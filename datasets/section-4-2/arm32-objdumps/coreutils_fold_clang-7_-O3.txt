
../repos/coreutils/src/fold:     file format elf32-littlearm


Disassembly of section .init:

00010e0c <.init>:
   10e0c:	push	{r3, lr}
   10e10:	bl	110d8 <__assert_fail@plt+0x48>
   10e14:	pop	{r3, pc}

Disassembly of section .plt:

00010e18 <calloc@plt-0x14>:
   10e18:	push	{lr}		; (str lr, [sp, #-4]!)
   10e1c:	ldr	lr, [pc, #4]	; 10e28 <calloc@plt-0x4>
   10e20:	add	lr, pc, lr
   10e24:	ldr	pc, [lr, #8]!
   10e28:	ldrdeq	r6, [r1], -r8

00010e2c <calloc@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #90112	; 0x16000
   10e34:	ldr	pc, [ip, #472]!	; 0x1d8

00010e38 <fputs_unlocked@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #90112	; 0x16000
   10e40:	ldr	pc, [ip, #464]!	; 0x1d0

00010e44 <raise@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #90112	; 0x16000
   10e4c:	ldr	pc, [ip, #456]!	; 0x1c8

00010e50 <strcmp@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #90112	; 0x16000
   10e58:	ldr	pc, [ip, #448]!	; 0x1c0

00010e5c <posix_fadvise64@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #90112	; 0x16000
   10e64:	ldr	pc, [ip, #440]!	; 0x1b8

00010e68 <fflush@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #90112	; 0x16000
   10e70:	ldr	pc, [ip, #432]!	; 0x1b0

00010e74 <memmove@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #90112	; 0x16000
   10e7c:	ldr	pc, [ip, #424]!	; 0x1a8

00010e80 <free@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #416]!	; 0x1a0

00010e8c <_exit@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #408]!	; 0x198

00010e98 <memcpy@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #400]!	; 0x190

00010ea4 <__strtoull_internal@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #392]!	; 0x188

00010eb0 <mbsinit@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #384]!	; 0x180

00010ebc <fwrite_unlocked@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #376]!	; 0x178

00010ec8 <memcmp@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #368]!	; 0x170

00010ed4 <dcgettext@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #360]!	; 0x168

00010ee0 <realloc@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #352]!	; 0x160

00010eec <textdomain@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #344]!	; 0x158

00010ef8 <iswprint@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #336]!	; 0x150

00010f04 <fwrite@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #328]!	; 0x148

00010f10 <lseek64@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #320]!	; 0x140

00010f1c <__ctype_get_mb_cur_max@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #312]!	; 0x138

00010f28 <__fpending@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #304]!	; 0x130

00010f34 <mbrtowc@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #296]!	; 0x128

00010f40 <error@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #288]!	; 0x120

00010f4c <malloc@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #280]!	; 0x118

00010f58 <__libc_start_main@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #272]!	; 0x110

00010f64 <__freading@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #264]!	; 0x108

00010f70 <__gmon_start__@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #256]!	; 0x100

00010f7c <getopt_long@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #248]!	; 0xf8

00010f88 <__ctype_b_loc@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #240]!	; 0xf0

00010f94 <exit@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #232]!	; 0xe8

00010fa0 <strlen@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #224]!	; 0xe0

00010fac <strchr@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #216]!	; 0xd8

00010fb8 <__errno_location@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #208]!	; 0xd0

00010fc4 <__cxa_atexit@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #90112	; 0x16000
   10fcc:	ldr	pc, [ip, #200]!	; 0xc8

00010fd0 <memset@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #90112	; 0x16000
   10fd8:	ldr	pc, [ip, #192]!	; 0xc0

00010fdc <__printf_chk@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #90112	; 0x16000
   10fe4:	ldr	pc, [ip, #184]!	; 0xb8

00010fe8 <fileno@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #90112	; 0x16000
   10ff0:	ldr	pc, [ip, #176]!	; 0xb0

00010ff4 <__fprintf_chk@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #90112	; 0x16000
   10ffc:	ldr	pc, [ip, #168]!	; 0xa8

00011000 <fclose@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #90112	; 0x16000
   11008:	ldr	pc, [ip, #160]!	; 0xa0

0001100c <fseeko64@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #90112	; 0x16000
   11014:	ldr	pc, [ip, #152]!	; 0x98

00011018 <__uflow@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #90112	; 0x16000
   11020:	ldr	pc, [ip, #144]!	; 0x90

00011024 <__overflow@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #90112	; 0x16000
   1102c:	ldr	pc, [ip, #136]!	; 0x88

00011030 <setlocale@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #90112	; 0x16000
   11038:	ldr	pc, [ip, #128]!	; 0x80

0001103c <strrchr@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #90112	; 0x16000
   11044:	ldr	pc, [ip, #120]!	; 0x78

00011048 <nl_langinfo@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #90112	; 0x16000
   11050:	ldr	pc, [ip, #112]!	; 0x70

00011054 <clearerr_unlocked@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #90112	; 0x16000
   1105c:	ldr	pc, [ip, #104]!	; 0x68

00011060 <fopen64@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #90112	; 0x16000
   11068:	ldr	pc, [ip, #96]!	; 0x60

0001106c <bindtextdomain@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #90112	; 0x16000
   11074:	ldr	pc, [ip, #88]!	; 0x58

00011078 <strncmp@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #90112	; 0x16000
   11080:	ldr	pc, [ip, #80]!	; 0x50

00011084 <abort@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #90112	; 0x16000
   1108c:	ldr	pc, [ip, #72]!	; 0x48

00011090 <__assert_fail@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #90112	; 0x16000
   11098:	ldr	pc, [ip, #64]!	; 0x40

Disassembly of section .text:

0001109c <.text>:
   1109c:	mov	fp, #0
   110a0:	mov	lr, #0
   110a4:	pop	{r1}		; (ldr r1, [sp], #4)
   110a8:	mov	r2, sp
   110ac:	push	{r2}		; (str r2, [sp, #-4]!)
   110b0:	push	{r0}		; (str r0, [sp, #-4]!)
   110b4:	ldr	ip, [pc, #16]	; 110cc <__assert_fail@plt+0x3c>
   110b8:	push	{ip}		; (str ip, [sp, #-4]!)
   110bc:	ldr	r0, [pc, #12]	; 110d0 <__assert_fail@plt+0x40>
   110c0:	ldr	r3, [pc, #12]	; 110d4 <__assert_fail@plt+0x44>
   110c4:	bl	10f58 <__libc_start_main@plt>
   110c8:	bl	11084 <abort@plt>
   110cc:	andeq	r5, r1, ip, asr #25
   110d0:	andeq	r1, r1, r4, lsr #8
   110d4:	andeq	r5, r1, ip, ror #24
   110d8:	ldr	r3, [pc, #20]	; 110f4 <__assert_fail@plt+0x64>
   110dc:	ldr	r2, [pc, #20]	; 110f8 <__assert_fail@plt+0x68>
   110e0:	add	r3, pc, r3
   110e4:	ldr	r2, [r3, r2]
   110e8:	cmp	r2, #0
   110ec:	bxeq	lr
   110f0:	b	10f70 <__gmon_start__@plt>
   110f4:	andeq	r5, r1, r8, lsl pc
   110f8:	ldrdeq	r0, [r0], -ip
   110fc:	ldr	r0, [pc, #24]	; 1111c <__assert_fail@plt+0x8c>
   11100:	ldr	r3, [pc, #24]	; 11120 <__assert_fail@plt+0x90>
   11104:	cmp	r3, r0
   11108:	bxeq	lr
   1110c:	ldr	r3, [pc, #16]	; 11124 <__assert_fail@plt+0x94>
   11110:	cmp	r3, #0
   11114:	bxeq	lr
   11118:	bx	r3
   1111c:	andeq	r7, r2, r0, lsr r1
   11120:	andeq	r7, r2, r0, lsr r1
   11124:	andeq	r0, r0, r0
   11128:	ldr	r0, [pc, #36]	; 11154 <__assert_fail@plt+0xc4>
   1112c:	ldr	r1, [pc, #36]	; 11158 <__assert_fail@plt+0xc8>
   11130:	sub	r1, r1, r0
   11134:	asr	r1, r1, #2
   11138:	add	r1, r1, r1, lsr #31
   1113c:	asrs	r1, r1, #1
   11140:	bxeq	lr
   11144:	ldr	r3, [pc, #16]	; 1115c <__assert_fail@plt+0xcc>
   11148:	cmp	r3, #0
   1114c:	bxeq	lr
   11150:	bx	r3
   11154:	andeq	r7, r2, r0, lsr r1
   11158:	andeq	r7, r2, r0, lsr r1
   1115c:	andeq	r0, r0, r0
   11160:	push	{r4, lr}
   11164:	ldr	r4, [pc, #24]	; 11184 <__assert_fail@plt+0xf4>
   11168:	ldrb	r3, [r4]
   1116c:	cmp	r3, #0
   11170:	popne	{r4, pc}
   11174:	bl	110fc <__assert_fail@plt+0x6c>
   11178:	mov	r3, #1
   1117c:	strb	r3, [r4]
   11180:	pop	{r4, pc}
   11184:	andeq	r7, r2, r4, asr r1
   11188:	b	11128 <__assert_fail@plt+0x98>
   1118c:	push	{fp, lr}
   11190:	mov	fp, sp
   11194:	sub	sp, sp, #56	; 0x38
   11198:	mov	r4, r0
   1119c:	cmp	r0, #0
   111a0:	bne	113e0 <__assert_fail@plt+0x350>
   111a4:	movw	r1, #23835	; 0x5d1b
   111a8:	mov	r0, #0
   111ac:	mov	r2, #5
   111b0:	movt	r1, #1
   111b4:	bl	10ed4 <dcgettext@plt>
   111b8:	mov	r1, r0
   111bc:	movw	r0, #29036	; 0x716c
   111c0:	movt	r0, #2
   111c4:	ldr	r2, [r0]
   111c8:	mov	r0, #1
   111cc:	bl	10fdc <__printf_chk@plt>
   111d0:	movw	r1, #23868	; 0x5d3c
   111d4:	mov	r0, #0
   111d8:	mov	r2, #5
   111dc:	movt	r1, #1
   111e0:	bl	10ed4 <dcgettext@plt>
   111e4:	movw	r7, #29004	; 0x714c
   111e8:	movt	r7, #2
   111ec:	ldr	r1, [r7]
   111f0:	bl	10e38 <fputs_unlocked@plt>
   111f4:	movw	r1, #24259	; 0x5ec3
   111f8:	mov	r0, #0
   111fc:	mov	r2, #5
   11200:	movt	r1, #1
   11204:	bl	10ed4 <dcgettext@plt>
   11208:	ldr	r1, [r7]
   1120c:	bl	10e38 <fputs_unlocked@plt>
   11210:	movw	r1, #24315	; 0x5efb
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	movt	r1, #1
   11220:	bl	10ed4 <dcgettext@plt>
   11224:	ldr	r1, [r7]
   11228:	bl	10e38 <fputs_unlocked@plt>
   1122c:	movw	r1, #23928	; 0x5d78
   11230:	mov	r0, #0
   11234:	mov	r2, #5
   11238:	movt	r1, #1
   1123c:	bl	10ed4 <dcgettext@plt>
   11240:	ldr	r1, [r7]
   11244:	bl	10e38 <fputs_unlocked@plt>
   11248:	movw	r1, #24075	; 0x5e0b
   1124c:	mov	r0, #0
   11250:	mov	r2, #5
   11254:	movt	r1, #1
   11258:	bl	10ed4 <dcgettext@plt>
   1125c:	ldr	r1, [r7]
   11260:	bl	10e38 <fputs_unlocked@plt>
   11264:	movw	r1, #24120	; 0x5e38
   11268:	mov	r0, #0
   1126c:	mov	r2, #5
   11270:	movt	r1, #1
   11274:	bl	10ed4 <dcgettext@plt>
   11278:	ldr	r1, [r7]
   1127c:	bl	10e38 <fputs_unlocked@plt>
   11280:	movw	r0, #24872	; 0x6128
   11284:	mov	r2, #48	; 0x30
   11288:	mov	r6, sp
   1128c:	movw	r5, #24174	; 0x5e6e
   11290:	movt	r0, #1
   11294:	movt	r5, #1
   11298:	add	r1, r0, #32
   1129c:	add	r3, r0, #16
   112a0:	vld1.64	{d18-d19}, [r0], r2
   112a4:	vld1.64	{d16-d17}, [r1]
   112a8:	vld1.64	{d20-d21}, [r3]
   112ac:	add	r1, r6, #32
   112b0:	vldr	d22, [r0]
   112b4:	add	r0, r6, #16
   112b8:	vst1.64	{d16-d17}, [r1]
   112bc:	movw	r1, #24390	; 0x5f46
   112c0:	vst1.64	{d20-d21}, [r0]
   112c4:	mov	r0, r6
   112c8:	vst1.64	{d18-d19}, [r0], r2
   112cc:	movt	r1, #1
   112d0:	vstr	d22, [r0]
   112d4:	mov	r0, r5
   112d8:	bl	10e50 <strcmp@plt>
   112dc:	cmp	r0, #0
   112e0:	ldrne	r1, [r6, #8]!
   112e4:	cmpne	r1, #0
   112e8:	bne	112d4 <__assert_fail@plt+0x244>
   112ec:	ldr	r6, [r6, #4]
   112f0:	movw	r1, #24485	; 0x5fa5
   112f4:	mov	r0, #0
   112f8:	mov	r2, #5
   112fc:	movt	r1, #1
   11300:	bl	10ed4 <dcgettext@plt>
   11304:	movw	r2, #24229	; 0x5ea5
   11308:	movw	r3, #24508	; 0x5fbc
   1130c:	mov	r1, r0
   11310:	mov	r0, #1
   11314:	movt	r2, #1
   11318:	movt	r3, #1
   1131c:	bl	10fdc <__printf_chk@plt>
   11320:	cmp	r6, #0
   11324:	mov	r0, #5
   11328:	mov	r1, #0
   1132c:	moveq	r6, r5
   11330:	bl	11030 <setlocale@plt>
   11334:	cmp	r0, #0
   11338:	beq	11370 <__assert_fail@plt+0x2e0>
   1133c:	movw	r1, #24548	; 0x5fe4
   11340:	mov	r2, #3
   11344:	movt	r1, #1
   11348:	bl	11078 <strncmp@plt>
   1134c:	cmp	r0, #0
   11350:	beq	11370 <__assert_fail@plt+0x2e0>
   11354:	movw	r1, #24552	; 0x5fe8
   11358:	mov	r0, #0
   1135c:	mov	r2, #5
   11360:	movt	r1, #1
   11364:	bl	10ed4 <dcgettext@plt>
   11368:	ldr	r1, [r7]
   1136c:	bl	10e38 <fputs_unlocked@plt>
   11370:	movw	r1, #24623	; 0x602f
   11374:	mov	r0, #0
   11378:	mov	r2, #5
   1137c:	movt	r1, #1
   11380:	bl	10ed4 <dcgettext@plt>
   11384:	movw	r2, #24508	; 0x5fbc
   11388:	mov	r1, r0
   1138c:	mov	r0, #1
   11390:	mov	r3, r5
   11394:	movt	r2, #1
   11398:	bl	10fdc <__printf_chk@plt>
   1139c:	movw	r1, #24650	; 0x604a
   113a0:	mov	r0, #0
   113a4:	mov	r2, #5
   113a8:	movt	r1, #1
   113ac:	bl	10ed4 <dcgettext@plt>
   113b0:	movw	r3, #24700	; 0x607c
   113b4:	mov	r1, r0
   113b8:	movw	r0, #24418	; 0x5f62
   113bc:	cmp	r6, r5
   113c0:	mov	r2, r6
   113c4:	movt	r0, #1
   113c8:	movt	r3, #1
   113cc:	moveq	r3, r0
   113d0:	mov	r0, #1
   113d4:	bl	10fdc <__printf_chk@plt>
   113d8:	mov	r0, r4
   113dc:	bl	10f94 <exit@plt>
   113e0:	movw	r0, #28992	; 0x7140
   113e4:	movw	r1, #23796	; 0x5cf4
   113e8:	mov	r2, #5
   113ec:	movt	r0, #2
   113f0:	movt	r1, #1
   113f4:	ldr	r5, [r0]
   113f8:	mov	r0, #0
   113fc:	bl	10ed4 <dcgettext@plt>
   11400:	mov	r2, r0
   11404:	movw	r0, #29036	; 0x716c
   11408:	mov	r1, #1
   1140c:	movt	r0, #2
   11410:	ldr	r3, [r0]
   11414:	mov	r0, r5
   11418:	bl	10ff4 <__fprintf_chk@plt>
   1141c:	mov	r0, r4
   11420:	bl	10f94 <exit@plt>
   11424:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11428:	add	fp, sp, #28
   1142c:	sub	sp, sp, #28
   11430:	mov	r5, r0
   11434:	ldr	r0, [r1]
   11438:	mov	r4, r1
   1143c:	bl	11df0 <__assert_fail@plt+0xd60>
   11440:	movw	r1, #24700	; 0x607c
   11444:	mov	r0, #6
   11448:	movt	r1, #1
   1144c:	bl	11030 <setlocale@plt>
   11450:	movw	r6, #24233	; 0x5ea9
   11454:	movw	r1, #24179	; 0x5e73
   11458:	movt	r6, #1
   1145c:	movt	r1, #1
   11460:	mov	r0, r6
   11464:	bl	1106c <bindtextdomain@plt>
   11468:	mov	r0, r6
   1146c:	bl	10eec <textdomain@plt>
   11470:	movw	r0, #6940	; 0x1b1c
   11474:	movt	r0, #1
   11478:	bl	15cd0 <__assert_fail@plt+0x4c40>
   1147c:	movw	r0, #29016	; 0x7158
   11480:	movw	r2, #24736	; 0x60a0
   11484:	movw	r3, #24772	; 0x60c4
   11488:	mov	r8, #0
   1148c:	mov	r1, r4
   11490:	movt	r0, #2
   11494:	movt	r2, #1
   11498:	movt	r3, #1
   1149c:	str	r8, [sp]
   114a0:	strh	r8, [r0]
   114a4:	strb	r8, [r0, #2]
   114a8:	mov	r0, r5
   114ac:	bl	10f7c <getopt_long@plt>
   114b0:	mov	r7, #80	; 0x50
   114b4:	cmn	r0, #1
   114b8:	beq	115c0 <__assert_fail@plt+0x530>
   114bc:	movw	r9, #29008	; 0x7150
   114c0:	movw	sl, #24736	; 0x60a0
   114c4:	movw	r6, #24772	; 0x60c4
   114c8:	movt	r9, #2
   114cc:	movt	sl, #1
   114d0:	movt	r6, #1
   114d4:	b	11508 <__assert_fail@plt+0x478>
   114d8:	cmp	r0, #98	; 0x62
   114dc:	bne	11650 <__assert_fail@plt+0x5c0>
   114e0:	movw	r0, #29016	; 0x7158
   114e4:	mov	r1, #1
   114e8:	movt	r0, #2
   114ec:	strb	r1, [r0, #1]
   114f0:	b	115a0 <__assert_fail@plt+0x510>
   114f4:	movw	r0, #29016	; 0x7158
   114f8:	mov	r1, #1
   114fc:	movt	r0, #2
   11500:	strb	r1, [r0, #2]
   11504:	b	115a0 <__assert_fail@plt+0x510>
   11508:	sub	r1, r0, #48	; 0x30
   1150c:	cmp	r1, #10
   11510:	bcs	11540 <__assert_fail@plt+0x4b0>
   11514:	ldr	r1, [r9]
   11518:	cmp	r1, #0
   1151c:	beq	1152c <__assert_fail@plt+0x49c>
   11520:	sub	r7, r1, #1
   11524:	str	r7, [r9]
   11528:	b	1155c <__assert_fail@plt+0x4cc>
   1152c:	add	r7, sp, #26
   11530:	strb	r8, [sp, #27]
   11534:	strb	r0, [sp, #26]
   11538:	str	r7, [r9]
   1153c:	b	1155c <__assert_fail@plt+0x4cc>
   11540:	cmp	r0, #114	; 0x72
   11544:	ble	114d8 <__assert_fail@plt+0x448>
   11548:	cmp	r0, #115	; 0x73
   1154c:	beq	114f4 <__assert_fail@plt+0x464>
   11550:	cmp	r0, #119	; 0x77
   11554:	bne	116b0 <__assert_fail@plt+0x620>
   11558:	ldr	r7, [r9]
   1155c:	movw	r1, #24203	; 0x5e8b
   11560:	mov	r0, #0
   11564:	mov	r2, #5
   11568:	movt	r1, #1
   1156c:	bl	10ed4 <dcgettext@plt>
   11570:	mvn	r1, #9
   11574:	mov	r2, #1
   11578:	mov	r3, #0
   1157c:	stm	sp, {r1, r8}
   11580:	movw	r1, #24700	; 0x607c
   11584:	str	r0, [sp, #12]
   11588:	mov	r0, r7
   1158c:	str	r8, [sp, #16]
   11590:	movt	r1, #1
   11594:	str	r1, [sp, #8]
   11598:	bl	14adc <__assert_fail@plt+0x3a4c>
   1159c:	mov	r7, r0
   115a0:	mov	r0, r5
   115a4:	mov	r1, r4
   115a8:	mov	r2, sl
   115ac:	mov	r3, r6
   115b0:	str	r8, [sp]
   115b4:	bl	10f7c <getopt_long@plt>
   115b8:	cmn	r0, #1
   115bc:	bne	11508 <__assert_fail@plt+0x478>
   115c0:	movw	r0, #28984	; 0x7138
   115c4:	movt	r0, #2
   115c8:	ldr	r0, [r0]
   115cc:	cmp	r0, r5
   115d0:	bne	115ec <__assert_fail@plt+0x55c>
   115d4:	movw	r0, #25028	; 0x61c4
   115d8:	mov	r1, r7
   115dc:	movt	r0, #1
   115e0:	bl	116d0 <__assert_fail@plt+0x640>
   115e4:	mov	r6, r0
   115e8:	b	11618 <__assert_fail@plt+0x588>
   115ec:	mov	r6, #1
   115f0:	bge	11618 <__assert_fail@plt+0x588>
   115f4:	sub	r5, r5, r0
   115f8:	add	r4, r4, r0, lsl #2
   115fc:	mov	r6, #1
   11600:	ldr	r0, [r4], #4
   11604:	mov	r1, r7
   11608:	bl	116d0 <__assert_fail@plt+0x640>
   1160c:	and	r6, r6, r0
   11610:	subs	r5, r5, #1
   11614:	bne	11600 <__assert_fail@plt+0x570>
   11618:	movw	r0, #29016	; 0x7158
   1161c:	movt	r0, #2
   11620:	ldrb	r0, [r0]
   11624:	cmp	r0, #1
   11628:	bne	11644 <__assert_fail@plt+0x5b4>
   1162c:	movw	r0, #29000	; 0x7148
   11630:	movt	r0, #2
   11634:	ldr	r0, [r0]
   11638:	bl	11c48 <__assert_fail@plt+0xbb8>
   1163c:	cmn	r0, #1
   11640:	beq	116b8 <__assert_fail@plt+0x628>
   11644:	eor	r0, r6, #1
   11648:	sub	sp, fp, #28
   1164c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11650:	cmn	r0, #3
   11654:	beq	11668 <__assert_fail@plt+0x5d8>
   11658:	cmn	r0, #2
   1165c:	bne	116b0 <__assert_fail@plt+0x620>
   11660:	mov	r0, #0
   11664:	bl	1118c <__assert_fail@plt+0xfc>
   11668:	movw	r0, #28904	; 0x70e8
   1166c:	movw	r2, #24243	; 0x5eb3
   11670:	mov	r1, #0
   11674:	movt	r0, #2
   11678:	movt	r2, #1
   1167c:	str	r1, [sp, #4]
   11680:	movw	r1, #24174	; 0x5e6e
   11684:	ldr	r3, [r0]
   11688:	movw	r0, #29004	; 0x714c
   1168c:	str	r2, [sp]
   11690:	movw	r2, #24229	; 0x5ea5
   11694:	movt	r1, #1
   11698:	movt	r0, #2
   1169c:	movt	r2, #1
   116a0:	ldr	r0, [r0]
   116a4:	bl	14210 <__assert_fail@plt+0x3180>
   116a8:	mov	r0, #0
   116ac:	bl	10f94 <exit@plt>
   116b0:	mov	r0, #1
   116b4:	bl	1118c <__assert_fail@plt+0xfc>
   116b8:	bl	10fb8 <__errno_location@plt>
   116bc:	ldr	r1, [r0]
   116c0:	movw	r2, #25028	; 0x61c4
   116c4:	mov	r0, #1
   116c8:	movt	r2, #1
   116cc:	bl	10f40 <error@plt>
   116d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116d4:	add	fp, sp, #28
   116d8:	sub	sp, sp, #20
   116dc:	str	r1, [sp, #16]
   116e0:	movw	r1, #25028	; 0x61c4
   116e4:	mov	r6, r0
   116e8:	movt	r1, #1
   116ec:	bl	10e50 <strcmp@plt>
   116f0:	cmp	r0, #0
   116f4:	beq	11a74 <__assert_fail@plt+0x9e4>
   116f8:	movw	r1, #24953	; 0x6179
   116fc:	mov	r0, r6
   11700:	movt	r1, #1
   11704:	bl	11060 <fopen64@plt>
   11708:	cmp	r0, #0
   1170c:	beq	11a98 <__assert_fail@plt+0xa08>
   11710:	mov	r1, #2
   11714:	str	r6, [sp, #4]
   11718:	str	r0, [sp, #8]
   1171c:	bl	11c0c <__assert_fail@plt+0xb7c>
   11720:	movw	r8, #29016	; 0x7158
   11724:	mov	r6, #0
   11728:	movt	r8, #2
   1172c:	b	11758 <__assert_fail@plt+0x6c8>
   11730:	mov	r1, r0
   11734:	ldr	r0, [r8, #4]
   11738:	mov	r2, r5
   1173c:	strb	r1, [r0, r4]
   11740:	movw	r1, #29004	; 0x714c
   11744:	movt	r1, #2
   11748:	ldr	r3, [r1]
   1174c:	mov	r1, #1
   11750:	bl	10ebc <fwrite_unlocked@plt>
   11754:	mov	r6, #0
   11758:	mov	r4, #0
   1175c:	b	11770 <__assert_fail@plt+0x6e0>
   11760:	ldr	r0, [r8, #4]
   11764:	ldr	r1, [sp, #12]
   11768:	strb	r1, [r0, r4]
   1176c:	add	r4, r4, #1
   11770:	ldr	r0, [sp, #8]
   11774:	ldr	r2, [r0, #4]
   11778:	ldr	r1, [r0, #8]
   1177c:	cmp	r2, r1
   11780:	bcs	119e8 <__assert_fail@plt+0x958>
   11784:	add	r1, r2, #1
   11788:	str	r1, [r0, #4]
   1178c:	ldrb	r0, [r2]
   11790:	str	r0, [sp, #12]
   11794:	ldr	r0, [r8, #8]
   11798:	add	r5, r4, #1
   1179c:	cmp	r5, r0
   117a0:	bcc	117b4 <__assert_fail@plt+0x724>
   117a4:	ldr	r0, [r8, #4]
   117a8:	add	r1, r8, #8
   117ac:	bl	14578 <__assert_fail@plt+0x34e8>
   117b0:	str	r0, [r8, #4]
   117b4:	ldr	r0, [sp, #12]
   117b8:	cmp	r0, #10
   117bc:	bne	117f0 <__assert_fail@plt+0x760>
   117c0:	b	11730 <__assert_fail@plt+0x6a0>
   117c4:	mov	r0, #10
   117c8:	add	r2, r4, #1
   117cc:	mov	r1, #1
   117d0:	strb	r0, [r9, r4]
   117d4:	movw	r0, #29004	; 0x714c
   117d8:	movt	r0, #2
   117dc:	ldr	r3, [r0]
   117e0:	mov	r0, r9
   117e4:	bl	10ebc <fwrite_unlocked@plt>
   117e8:	mov	r6, #0
   117ec:	mov	r4, #0
   117f0:	ldrb	r0, [r8, #1]
   117f4:	cmp	r0, #0
   117f8:	bne	1181c <__assert_fail@plt+0x78c>
   117fc:	ldr	r0, [sp, #12]
   11800:	uxtb	r0, r0
   11804:	cmp	r0, #8
   11808:	beq	11990 <__assert_fail@plt+0x900>
   1180c:	cmp	r0, #9
   11810:	beq	119a8 <__assert_fail@plt+0x918>
   11814:	cmp	r0, #13
   11818:	beq	119e0 <__assert_fail@plt+0x950>
   1181c:	add	r6, r6, #1
   11820:	ldr	r0, [sp, #16]
   11824:	cmp	r6, r0
   11828:	bls	11760 <__assert_fail@plt+0x6d0>
   1182c:	ldrb	r0, [r8, #2]
   11830:	ldr	r9, [r8, #4]
   11834:	cmp	r0, #1
   11838:	bne	11984 <__assert_fail@plt+0x8f4>
   1183c:	add	r0, r9, r4
   11840:	mov	sl, #0
   11844:	sub	r5, r0, #1
   11848:	adds	r0, r4, sl
   1184c:	beq	11984 <__assert_fail@plt+0x8f4>
   11850:	mov	r7, sl
   11854:	bl	10f88 <__ctype_b_loc@plt>
   11858:	ldrb	r1, [r5, sl]
   1185c:	ldr	r0, [r0]
   11860:	sub	sl, sl, #1
   11864:	ldrb	r0, [r0, r1, lsl #1]
   11868:	tst	r0, #1
   1186c:	beq	11848 <__assert_fail@plt+0x7b8>
   11870:	add	r0, r4, sl
   11874:	mov	r1, #1
   11878:	add	r2, r0, #1
   1187c:	movw	r0, #29004	; 0x714c
   11880:	movt	r0, #2
   11884:	ldr	r3, [r0]
   11888:	mov	r5, r0
   1188c:	mov	r0, r9
   11890:	bl	10ebc <fwrite_unlocked@plt>
   11894:	ldr	r0, [r5]
   11898:	ldr	r1, [r0, #20]
   1189c:	ldr	r2, [r0, #24]
   118a0:	cmp	r1, r2
   118a4:	bcs	119c4 <__assert_fail@plt+0x934>
   118a8:	add	r2, r1, #1
   118ac:	str	r2, [r0, #20]
   118b0:	mov	r0, #10
   118b4:	strb	r0, [r1]
   118b8:	ldr	r5, [r8, #4]
   118bc:	mvn	r9, sl
   118c0:	mov	r2, r9
   118c4:	add	r0, r5, r4
   118c8:	add	r0, r0, sl
   118cc:	add	r1, r0, #1
   118d0:	mov	r0, r5
   118d4:	bl	10e74 <memmove@plt>
   118d8:	mov	r6, #0
   118dc:	cmn	sl, #1
   118e0:	mov	r4, #0
   118e4:	beq	117f0 <__assert_fail@plt+0x760>
   118e8:	ldrb	r0, [r8, #1]
   118ec:	mov	r6, r9
   118f0:	mov	r4, r9
   118f4:	cmp	r0, #0
   118f8:	bne	117f0 <__assert_fail@plt+0x760>
   118fc:	mov	r0, #0
   11900:	mov	r6, #0
   11904:	ldrb	r2, [r5, -r0]
   11908:	mov	r1, r6
   1190c:	mov	r6, #0
   11910:	cmp	r2, #13
   11914:	beq	11934 <__assert_fail@plt+0x8a4>
   11918:	cmp	r2, #9
   1191c:	beq	11944 <__assert_fail@plt+0x8b4>
   11920:	cmp	r2, #8
   11924:	bne	11960 <__assert_fail@plt+0x8d0>
   11928:	cmp	r1, #0
   1192c:	subne	r1, r1, #1
   11930:	mov	r6, r1
   11934:	sub	r0, r0, #1
   11938:	cmp	r7, r0
   1193c:	bne	11904 <__assert_fail@plt+0x874>
   11940:	b	11970 <__assert_fail@plt+0x8e0>
   11944:	and	r2, r1, #7
   11948:	add	r1, r1, #8
   1194c:	sub	r6, r1, r2
   11950:	sub	r0, r0, #1
   11954:	cmp	r7, r0
   11958:	bne	11904 <__assert_fail@plt+0x874>
   1195c:	b	11970 <__assert_fail@plt+0x8e0>
   11960:	add	r6, r1, #1
   11964:	sub	r0, r0, #1
   11968:	cmp	r7, r0
   1196c:	bne	11904 <__assert_fail@plt+0x874>
   11970:	mov	r4, r9
   11974:	ldrb	r0, [r8, #1]
   11978:	cmp	r0, #0
   1197c:	beq	117fc <__assert_fail@plt+0x76c>
   11980:	b	1181c <__assert_fail@plt+0x78c>
   11984:	cmp	r4, #0
   11988:	bne	117c4 <__assert_fail@plt+0x734>
   1198c:	b	119d0 <__assert_fail@plt+0x940>
   11990:	cmp	r6, #0
   11994:	subne	r6, r6, #1
   11998:	ldr	r0, [sp, #16]
   1199c:	cmp	r6, r0
   119a0:	bhi	1182c <__assert_fail@plt+0x79c>
   119a4:	b	11760 <__assert_fail@plt+0x6d0>
   119a8:	and	r0, r6, #7
   119ac:	add	r1, r6, #8
   119b0:	sub	r6, r1, r0
   119b4:	ldr	r0, [sp, #16]
   119b8:	cmp	r6, r0
   119bc:	bhi	1182c <__assert_fail@plt+0x79c>
   119c0:	b	11760 <__assert_fail@plt+0x6d0>
   119c4:	mov	r1, #10
   119c8:	bl	11024 <__overflow@plt>
   119cc:	b	118b8 <__assert_fail@plt+0x828>
   119d0:	ldr	r0, [sp, #12]
   119d4:	strb	r0, [r9, r4]
   119d8:	mov	r4, #1
   119dc:	b	11770 <__assert_fail@plt+0x6e0>
   119e0:	mov	r6, #0
   119e4:	b	11760 <__assert_fail@plt+0x6d0>
   119e8:	bl	11018 <__uflow@plt>
   119ec:	cmn	r0, #1
   119f0:	bne	11790 <__assert_fail@plt+0x700>
   119f4:	bl	10fb8 <__errno_location@plt>
   119f8:	mov	r5, r0
   119fc:	ldr	r6, [r0]
   11a00:	ldr	r0, [sp, #8]
   11a04:	cmp	r4, #0
   11a08:	ldrb	r0, [r0]
   11a0c:	lsl	r7, r0, #26
   11a10:	beq	11a30 <__assert_fail@plt+0x9a0>
   11a14:	movw	r0, #29004	; 0x714c
   11a18:	mov	r1, #1
   11a1c:	mov	r2, r4
   11a20:	movt	r0, #2
   11a24:	ldr	r3, [r0]
   11a28:	ldr	r0, [r8, #4]
   11a2c:	bl	10ebc <fwrite_unlocked@plt>
   11a30:	and	r4, r6, r7, asr #31
   11a34:	ldr	r6, [sp, #4]
   11a38:	movw	r1, #25028	; 0x61c4
   11a3c:	movt	r1, #1
   11a40:	mov	r0, r6
   11a44:	bl	10e50 <strcmp@plt>
   11a48:	cmp	r0, #0
   11a4c:	beq	11aa4 <__assert_fail@plt+0xa14>
   11a50:	ldr	r0, [sp, #8]
   11a54:	bl	11c48 <__assert_fail@plt+0xbb8>
   11a58:	cmp	r4, #0
   11a5c:	bne	11a68 <__assert_fail@plt+0x9d8>
   11a60:	cmp	r0, #0
   11a64:	ldrne	r4, [r5]
   11a68:	cmp	r4, #0
   11a6c:	bne	11ab4 <__assert_fail@plt+0xa24>
   11a70:	b	11aec <__assert_fail@plt+0xa5c>
   11a74:	movw	r0, #29016	; 0x7158
   11a78:	mov	r1, #1
   11a7c:	movt	r0, #2
   11a80:	strb	r1, [r0]
   11a84:	movw	r0, #29000	; 0x7148
   11a88:	movt	r0, #2
   11a8c:	ldr	r0, [r0]
   11a90:	cmp	r0, #0
   11a94:	bne	11710 <__assert_fail@plt+0x680>
   11a98:	bl	10fb8 <__errno_location@plt>
   11a9c:	ldr	r4, [r0]
   11aa0:	b	11ab4 <__assert_fail@plt+0xa24>
   11aa4:	ldr	r0, [sp, #8]
   11aa8:	bl	11054 <clearerr_unlocked@plt>
   11aac:	cmp	r4, #0
   11ab0:	beq	11aec <__assert_fail@plt+0xa5c>
   11ab4:	mov	r0, #0
   11ab8:	mov	r1, #3
   11abc:	mov	r2, r6
   11ac0:	mov	r5, #0
   11ac4:	bl	13ac0 <__assert_fail@plt+0x2a30>
   11ac8:	movw	r2, #24959	; 0x617f
   11acc:	mov	r3, r0
   11ad0:	mov	r0, #0
   11ad4:	mov	r1, r4
   11ad8:	movt	r2, #1
   11adc:	bl	10f40 <error@plt>
   11ae0:	mov	r0, r5
   11ae4:	sub	sp, fp, #28
   11ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11aec:	mov	r5, #1
   11af0:	mov	r0, r5
   11af4:	sub	sp, fp, #28
   11af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11afc:	movw	r1, #29028	; 0x7164
   11b00:	movt	r1, #2
   11b04:	str	r0, [r1, #4]
   11b08:	bx	lr
   11b0c:	movw	r1, #29028	; 0x7164
   11b10:	movt	r1, #2
   11b14:	strb	r0, [r1]
   11b18:	bx	lr
   11b1c:	push	{r4, r5, r6, sl, fp, lr}
   11b20:	add	fp, sp, #16
   11b24:	sub	sp, sp, #8
   11b28:	movw	r0, #29004	; 0x714c
   11b2c:	movt	r0, #2
   11b30:	ldr	r0, [r0]
   11b34:	bl	15870 <__assert_fail@plt+0x47e0>
   11b38:	cmp	r0, #0
   11b3c:	beq	11b64 <__assert_fail@plt+0xad4>
   11b40:	movw	r5, #29028	; 0x7164
   11b44:	movt	r5, #2
   11b48:	ldrb	r0, [r5]
   11b4c:	cmp	r0, #0
   11b50:	beq	11b90 <__assert_fail@plt+0xb00>
   11b54:	bl	10fb8 <__errno_location@plt>
   11b58:	ldr	r0, [r0]
   11b5c:	cmp	r0, #32
   11b60:	bne	11b90 <__assert_fail@plt+0xb00>
   11b64:	movw	r0, #28992	; 0x7140
   11b68:	movt	r0, #2
   11b6c:	ldr	r0, [r0]
   11b70:	bl	15870 <__assert_fail@plt+0x47e0>
   11b74:	cmp	r0, #0
   11b78:	subeq	sp, fp, #16
   11b7c:	popeq	{r4, r5, r6, sl, fp, pc}
   11b80:	movw	r0, #28908	; 0x70ec
   11b84:	movt	r0, #2
   11b88:	ldr	r0, [r0]
   11b8c:	bl	10e8c <_exit@plt>
   11b90:	movw	r1, #24943	; 0x616f
   11b94:	mov	r0, #0
   11b98:	mov	r2, #5
   11b9c:	movt	r1, #1
   11ba0:	bl	10ed4 <dcgettext@plt>
   11ba4:	ldr	r6, [r5, #4]
   11ba8:	mov	r4, r0
   11bac:	bl	10fb8 <__errno_location@plt>
   11bb0:	ldr	r5, [r0]
   11bb4:	cmp	r6, #0
   11bb8:	bne	11bd4 <__assert_fail@plt+0xb44>
   11bbc:	movw	r2, #24959	; 0x617f
   11bc0:	mov	r0, #0
   11bc4:	mov	r1, r5
   11bc8:	mov	r3, r4
   11bcc:	movt	r2, #1
   11bd0:	b	11bf4 <__assert_fail@plt+0xb64>
   11bd4:	mov	r0, r6
   11bd8:	bl	139e4 <__assert_fail@plt+0x2954>
   11bdc:	movw	r2, #24955	; 0x617b
   11be0:	mov	r3, r0
   11be4:	str	r4, [sp]
   11be8:	mov	r0, #0
   11bec:	mov	r1, r5
   11bf0:	movt	r2, #1
   11bf4:	bl	10f40 <error@plt>
   11bf8:	movw	r0, #28908	; 0x70ec
   11bfc:	movt	r0, #2
   11c00:	ldr	r0, [r0]
   11c04:	bl	10e8c <_exit@plt>
   11c08:	b	10e5c <posix_fadvise64@plt>
   11c0c:	cmp	r0, #0
   11c10:	bxeq	lr
   11c14:	push	{r4, sl, fp, lr}
   11c18:	add	fp, sp, #8
   11c1c:	sub	sp, sp, #16
   11c20:	mov	r4, r1
   11c24:	bl	10fe8 <fileno@plt>
   11c28:	mov	r1, #0
   11c2c:	mov	r2, #0
   11c30:	mov	r3, #0
   11c34:	str	r1, [sp]
   11c38:	stmib	sp, {r1, r4}
   11c3c:	bl	10e5c <posix_fadvise64@plt>
   11c40:	sub	sp, fp, #8
   11c44:	pop	{r4, sl, fp, pc}
   11c48:	push	{r4, r5, r6, sl, fp, lr}
   11c4c:	add	fp, sp, #16
   11c50:	sub	sp, sp, #8
   11c54:	mov	r4, r0
   11c58:	bl	10fe8 <fileno@plt>
   11c5c:	cmn	r0, #1
   11c60:	ble	11cd4 <__assert_fail@plt+0xc44>
   11c64:	mov	r0, r4
   11c68:	bl	10f64 <__freading@plt>
   11c6c:	cmp	r0, #0
   11c70:	beq	11c9c <__assert_fail@plt+0xc0c>
   11c74:	mov	r0, r4
   11c78:	bl	10fe8 <fileno@plt>
   11c7c:	mov	r1, #1
   11c80:	mov	r2, #0
   11c84:	mov	r3, #0
   11c88:	str	r1, [sp]
   11c8c:	bl	10f10 <lseek64@plt>
   11c90:	and	r0, r0, r1
   11c94:	cmn	r0, #1
   11c98:	beq	11cd4 <__assert_fail@plt+0xc44>
   11c9c:	mov	r0, r4
   11ca0:	bl	11ce4 <__assert_fail@plt+0xc54>
   11ca4:	cmp	r0, #0
   11ca8:	beq	11cd4 <__assert_fail@plt+0xc44>
   11cac:	bl	10fb8 <__errno_location@plt>
   11cb0:	ldr	r6, [r0]
   11cb4:	mov	r5, r0
   11cb8:	mov	r0, r4
   11cbc:	bl	11000 <fclose@plt>
   11cc0:	cmp	r6, #0
   11cc4:	strne	r6, [r5]
   11cc8:	mvnne	r0, #0
   11ccc:	sub	sp, fp, #16
   11cd0:	pop	{r4, r5, r6, sl, fp, pc}
   11cd4:	mov	r0, r4
   11cd8:	sub	sp, fp, #16
   11cdc:	pop	{r4, r5, r6, sl, fp, lr}
   11ce0:	b	11000 <fclose@plt>
   11ce4:	push	{r4, sl, fp, lr}
   11ce8:	add	fp, sp, #8
   11cec:	sub	sp, sp, #8
   11cf0:	mov	r4, r0
   11cf4:	cmp	r0, #0
   11cf8:	beq	11d14 <__assert_fail@plt+0xc84>
   11cfc:	mov	r0, r4
   11d00:	bl	10f64 <__freading@plt>
   11d04:	cmp	r0, #0
   11d08:	ldrbne	r0, [r4, #1]
   11d0c:	tstne	r0, #1
   11d10:	bne	11d24 <__assert_fail@plt+0xc94>
   11d14:	mov	r0, r4
   11d18:	sub	sp, fp, #8
   11d1c:	pop	{r4, sl, fp, lr}
   11d20:	b	10e68 <fflush@plt>
   11d24:	mov	r0, #1
   11d28:	mov	r2, #0
   11d2c:	mov	r3, #0
   11d30:	str	r0, [sp]
   11d34:	mov	r0, r4
   11d38:	bl	11d4c <__assert_fail@plt+0xcbc>
   11d3c:	mov	r0, r4
   11d40:	sub	sp, fp, #8
   11d44:	pop	{r4, sl, fp, lr}
   11d48:	b	10e68 <fflush@plt>
   11d4c:	push	{r4, r5, r6, r7, fp, lr}
   11d50:	add	fp, sp, #16
   11d54:	sub	sp, sp, #8
   11d58:	mov	r4, r0
   11d5c:	ldr	r0, [r0, #4]
   11d60:	mov	r5, r3
   11d64:	mov	r6, r2
   11d68:	ldr	r1, [r4, #8]
   11d6c:	cmp	r1, r0
   11d70:	bne	11d8c <__assert_fail@plt+0xcfc>
   11d74:	ldrd	r0, [r4, #16]
   11d78:	cmp	r1, r0
   11d7c:	bne	11d8c <__assert_fail@plt+0xcfc>
   11d80:	ldr	r0, [r4, #36]	; 0x24
   11d84:	cmp	r0, #0
   11d88:	beq	11da4 <__assert_fail@plt+0xd14>
   11d8c:	mov	r0, r4
   11d90:	mov	r2, r6
   11d94:	mov	r3, r5
   11d98:	sub	sp, fp, #16
   11d9c:	pop	{r4, r5, r6, r7, fp, lr}
   11da0:	b	1100c <fseeko64@plt>
   11da4:	ldr	r7, [fp, #8]
   11da8:	mov	r0, r4
   11dac:	bl	10fe8 <fileno@plt>
   11db0:	mov	r2, r6
   11db4:	mov	r3, r5
   11db8:	str	r7, [sp]
   11dbc:	bl	10f10 <lseek64@plt>
   11dc0:	and	r2, r0, r1
   11dc4:	cmn	r2, #1
   11dc8:	mvneq	r0, #0
   11dcc:	subeq	sp, fp, #16
   11dd0:	popeq	{r4, r5, r6, r7, fp, pc}
   11dd4:	strd	r0, [r4, #80]	; 0x50
   11dd8:	ldr	r0, [r4]
   11ddc:	bic	r0, r0, #16
   11de0:	str	r0, [r4]
   11de4:	mov	r0, #0
   11de8:	sub	sp, fp, #16
   11dec:	pop	{r4, r5, r6, r7, fp, pc}
   11df0:	push	{r4, r5, fp, lr}
   11df4:	add	fp, sp, #8
   11df8:	cmp	r0, #0
   11dfc:	beq	11e90 <__assert_fail@plt+0xe00>
   11e00:	mov	r1, #47	; 0x2f
   11e04:	mov	r4, r0
   11e08:	bl	1103c <strrchr@plt>
   11e0c:	cmp	r0, #0
   11e10:	mov	r5, r4
   11e14:	addne	r5, r0, #1
   11e18:	sub	r0, r5, r4
   11e1c:	cmp	r0, #7
   11e20:	blt	11e74 <__assert_fail@plt+0xde4>
   11e24:	movw	r1, #25018	; 0x61ba
   11e28:	sub	r0, r5, #7
   11e2c:	mov	r2, #7
   11e30:	movt	r1, #1
   11e34:	bl	11078 <strncmp@plt>
   11e38:	cmp	r0, #0
   11e3c:	bne	11e74 <__assert_fail@plt+0xde4>
   11e40:	movw	r1, #25026	; 0x61c2
   11e44:	mov	r0, r5
   11e48:	mov	r2, #3
   11e4c:	movt	r1, #1
   11e50:	bl	11078 <strncmp@plt>
   11e54:	cmp	r0, #0
   11e58:	beq	11e64 <__assert_fail@plt+0xdd4>
   11e5c:	mov	r4, r5
   11e60:	b	11e74 <__assert_fail@plt+0xde4>
   11e64:	movw	r0, #28976	; 0x7130
   11e68:	add	r4, r5, #3
   11e6c:	movt	r0, #2
   11e70:	str	r4, [r0]
   11e74:	movw	r0, #28980	; 0x7134
   11e78:	movt	r0, #2
   11e7c:	str	r4, [r0]
   11e80:	movw	r0, #29036	; 0x716c
   11e84:	movt	r0, #2
   11e88:	str	r4, [r0]
   11e8c:	pop	{r4, r5, fp, pc}
   11e90:	movw	r0, #28992	; 0x7140
   11e94:	mov	r1, #55	; 0x37
   11e98:	mov	r2, #1
   11e9c:	movt	r0, #2
   11ea0:	ldr	r3, [r0]
   11ea4:	movw	r0, #24962	; 0x6182
   11ea8:	movt	r0, #1
   11eac:	bl	10f04 <fwrite@plt>
   11eb0:	bl	11084 <abort@plt>
   11eb4:	push	{r4, r5, r6, sl, fp, lr}
   11eb8:	add	fp, sp, #16
   11ebc:	mov	r4, r0
   11ec0:	movw	r0, #29040	; 0x7170
   11ec4:	movt	r0, #2
   11ec8:	cmp	r4, #0
   11ecc:	moveq	r4, r0
   11ed0:	bl	10fb8 <__errno_location@plt>
   11ed4:	ldr	r6, [r0]
   11ed8:	mov	r5, r0
   11edc:	mov	r0, r4
   11ee0:	mov	r1, #48	; 0x30
   11ee4:	bl	148a4 <__assert_fail@plt+0x3814>
   11ee8:	str	r6, [r5]
   11eec:	pop	{r4, r5, r6, sl, fp, pc}
   11ef0:	movw	r1, #29040	; 0x7170
   11ef4:	cmp	r0, #0
   11ef8:	movt	r1, #2
   11efc:	movne	r1, r0
   11f00:	ldr	r0, [r1]
   11f04:	bx	lr
   11f08:	movw	r2, #29040	; 0x7170
   11f0c:	cmp	r0, #0
   11f10:	movt	r2, #2
   11f14:	movne	r2, r0
   11f18:	str	r1, [r2]
   11f1c:	bx	lr
   11f20:	movw	r3, #29040	; 0x7170
   11f24:	cmp	r0, #0
   11f28:	movt	r3, #2
   11f2c:	movne	r3, r0
   11f30:	ubfx	r0, r1, #5, #3
   11f34:	and	r1, r1, #31
   11f38:	add	r0, r3, r0, lsl #2
   11f3c:	ldr	r3, [r0, #8]
   11f40:	eor	r2, r2, r3, lsr r1
   11f44:	and	r2, r2, #1
   11f48:	eor	r2, r3, r2, lsl r1
   11f4c:	str	r2, [r0, #8]
   11f50:	mov	r0, #1
   11f54:	and	r0, r0, r3, lsr r1
   11f58:	bx	lr
   11f5c:	movw	r2, #29040	; 0x7170
   11f60:	cmp	r0, #0
   11f64:	movt	r2, #2
   11f68:	movne	r2, r0
   11f6c:	ldr	r0, [r2, #4]
   11f70:	str	r1, [r2, #4]
   11f74:	bx	lr
   11f78:	movw	r3, #29040	; 0x7170
   11f7c:	cmp	r0, #0
   11f80:	movt	r3, #2
   11f84:	movne	r3, r0
   11f88:	cmp	r1, #0
   11f8c:	mov	r0, #10
   11f90:	cmpne	r2, #0
   11f94:	str	r0, [r3]
   11f98:	bne	11fa8 <__assert_fail@plt+0xf18>
   11f9c:	push	{fp, lr}
   11fa0:	mov	fp, sp
   11fa4:	bl	11084 <abort@plt>
   11fa8:	str	r1, [r3, #40]	; 0x28
   11fac:	str	r2, [r3, #44]	; 0x2c
   11fb0:	bx	lr
   11fb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fb8:	add	fp, sp, #28
   11fbc:	sub	sp, sp, #20
   11fc0:	mov	r7, r0
   11fc4:	ldr	r0, [fp, #8]
   11fc8:	movw	r5, #29040	; 0x7170
   11fcc:	mov	r8, r3
   11fd0:	mov	r9, r2
   11fd4:	mov	sl, r1
   11fd8:	movt	r5, #2
   11fdc:	cmp	r0, #0
   11fe0:	movne	r5, r0
   11fe4:	bl	10fb8 <__errno_location@plt>
   11fe8:	mov	r4, r0
   11fec:	ldm	r5, {r0, r1}
   11ff0:	ldr	r2, [r5, #40]	; 0x28
   11ff4:	ldr	r3, [r5, #44]	; 0x2c
   11ff8:	add	r5, r5, #8
   11ffc:	ldr	r6, [r4]
   12000:	stm	sp, {r0, r1, r5}
   12004:	str	r2, [sp, #12]
   12008:	str	r3, [sp, #16]
   1200c:	mov	r0, r7
   12010:	mov	r1, sl
   12014:	mov	r2, r9
   12018:	mov	r3, r8
   1201c:	bl	1202c <__assert_fail@plt+0xf9c>
   12020:	str	r6, [r4]
   12024:	sub	sp, fp, #28
   12028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1202c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12030:	add	fp, sp, #28
   12034:	sub	sp, sp, #156	; 0x9c
   12038:	str	r0, [sp, #76]	; 0x4c
   1203c:	ldr	r0, [fp, #12]
   12040:	mov	r6, r1
   12044:	str	r3, [sp, #84]	; 0x54
   12048:	str	r2, [fp, #-84]	; 0xffffffac
   1204c:	and	r1, r0, #4
   12050:	str	r1, [sp, #24]
   12054:	and	r1, r0, #1
   12058:	str	r1, [sp, #28]
   1205c:	ubfx	r8, r0, #1, #1
   12060:	bl	10f1c <__ctype_get_mb_cur_max@plt>
   12064:	str	r0, [sp, #32]
   12068:	ldr	r0, [fp, #24]
   1206c:	ldr	r7, [fp, #8]
   12070:	mov	r1, #0
   12074:	mov	r2, #0
   12078:	mov	r4, #1
   1207c:	str	r1, [sp, #52]	; 0x34
   12080:	str	r0, [sp, #72]	; 0x48
   12084:	ldr	r0, [fp, #20]
   12088:	str	r0, [sp, #68]	; 0x44
   1208c:	mov	r0, #0
   12090:	str	r0, [sp, #48]	; 0x30
   12094:	mov	r0, #0
   12098:	str	r0, [sp, #92]	; 0x5c
   1209c:	mov	r0, #0
   120a0:	str	r0, [fp, #-76]	; 0xffffffb4
   120a4:	mov	r0, #0
   120a8:	cmp	r7, #10
   120ac:	bhi	13394 <__assert_fail@plt+0x2304>
   120b0:	add	r1, pc, #28
   120b4:	mov	sl, r6
   120b8:	ldr	r6, [sp, #76]	; 0x4c
   120bc:	ldr	ip, [fp, #-84]	; 0xffffffac
   120c0:	ldr	lr, [sp, #84]	; 0x54
   120c4:	mov	r9, #0
   120c8:	mov	r3, #1
   120cc:	mov	r5, #0
   120d0:	ldr	pc, [r1, r7, lsl #2]
   120d4:	andeq	r2, r1, r4, lsr #3
   120d8:	andeq	r2, r1, r0, ror #3
   120dc:			; <UNDEFINED> instruction: 0x000121b4
   120e0:	muleq	r1, ip, r1
   120e4:	ldrdeq	r2, [r1], -r4
   120e8:	andeq	r2, r1, r8, lsl #4
   120ec:	andeq	r2, r1, r4, asr #3
   120f0:	andeq	r2, r1, r4, lsl r4
   120f4:	andeq	r2, r1, r0, lsl #2
   120f8:	andeq	r2, r1, r0, lsl #2
   120fc:	andeq	r2, r1, r8, lsr #7
   12100:	mov	r9, r4
   12104:	movw	r4, #25108	; 0x6214
   12108:	mov	r5, r8
   1210c:	mov	r8, r2
   12110:	mov	r0, #0
   12114:	mov	r2, #5
   12118:	movt	r4, #1
   1211c:	mov	r1, r4
   12120:	bl	10ed4 <dcgettext@plt>
   12124:	cmp	r0, r4
   12128:	str	r0, [sp, #68]	; 0x44
   1212c:	bne	122bc <__assert_fail@plt+0x122c>
   12130:	bl	1591c <__assert_fail@plt+0x488c>
   12134:	ldrb	r1, [r0]
   12138:	and	r1, r1, #223	; 0xdf
   1213c:	cmp	r1, #71	; 0x47
   12140:	beq	12288 <__assert_fail@plt+0x11f8>
   12144:	cmp	r1, #85	; 0x55
   12148:	bne	122a0 <__assert_fail@plt+0x1210>
   1214c:	ldrb	r1, [r0, #1]
   12150:	and	r1, r1, #223	; 0xdf
   12154:	cmp	r1, #84	; 0x54
   12158:	bne	122a0 <__assert_fail@plt+0x1210>
   1215c:	ldrb	r1, [r0, #2]
   12160:	and	r1, r1, #223	; 0xdf
   12164:	cmp	r1, #70	; 0x46
   12168:	bne	122a0 <__assert_fail@plt+0x1210>
   1216c:	ldrb	r1, [r0, #3]
   12170:	cmp	r1, #45	; 0x2d
   12174:	ldrbeq	r1, [r0, #4]
   12178:	cmpeq	r1, #56	; 0x38
   1217c:	bne	122a0 <__assert_fail@plt+0x1210>
   12180:	ldrb	r0, [r0, #5]
   12184:	cmp	r0, #0
   12188:	movw	r0, #25112	; 0x6218
   1218c:	movt	r0, #1
   12190:	str	r0, [sp, #68]	; 0x44
   12194:	bne	122a0 <__assert_fail@plt+0x1210>
   12198:	b	122bc <__assert_fail@plt+0x122c>
   1219c:	mov	r0, #1
   121a0:	b	121e0 <__assert_fail@plt+0x1150>
   121a4:	mov	r7, #0
   121a8:	mov	r9, #0
   121ac:	mov	r3, r0
   121b0:	b	12280 <__assert_fail@plt+0x11f0>
   121b4:	tst	r8, #1
   121b8:	bne	121e0 <__assert_fail@plt+0x1150>
   121bc:	mov	r3, r0
   121c0:	b	12238 <__assert_fail@plt+0x11a8>
   121c4:	mov	r0, #1
   121c8:	mov	r9, #0
   121cc:	mov	r7, #5
   121d0:	b	1221c <__assert_fail@plt+0x118c>
   121d4:	mov	r3, #1
   121d8:	tst	r8, #1
   121dc:	beq	12238 <__assert_fail@plt+0x11a8>
   121e0:	mov	r1, #1
   121e4:	mov	r9, #0
   121e8:	mov	r7, #2
   121ec:	mov	r3, r0
   121f0:	mov	r5, #1
   121f4:	str	r1, [fp, #-76]	; 0xffffffb4
   121f8:	movw	r1, #25110	; 0x6216
   121fc:	movt	r1, #1
   12200:	str	r1, [sp, #92]	; 0x5c
   12204:	b	12414 <__assert_fail@plt+0x1384>
   12208:	mov	r7, #5
   1220c:	tst	r8, #1
   12210:	beq	12258 <__assert_fail@plt+0x11c8>
   12214:	mov	r0, #1
   12218:	mov	r9, #0
   1221c:	str	r0, [fp, #-76]	; 0xffffffb4
   12220:	movw	r0, #25106	; 0x6212
   12224:	mov	r3, #1
   12228:	mov	r5, #1
   1222c:	movt	r0, #1
   12230:	str	r0, [sp, #92]	; 0x5c
   12234:	b	12414 <__assert_fail@plt+0x1384>
   12238:	cmp	sl, #0
   1223c:	mov	r9, #1
   12240:	mov	r7, #2
   12244:	movne	r0, #39	; 0x27
   12248:	strbne	r0, [r6]
   1224c:	movw	r0, #25110	; 0x6216
   12250:	movt	r0, #1
   12254:	b	12274 <__assert_fail@plt+0x11e4>
   12258:	cmp	sl, #0
   1225c:	mov	r9, #1
   12260:	mov	r3, #1
   12264:	movne	r0, #34	; 0x22
   12268:	strbne	r0, [r6]
   1226c:	movw	r0, #25106	; 0x6212
   12270:	movt	r0, #1
   12274:	str	r0, [sp, #92]	; 0x5c
   12278:	mov	r0, #1
   1227c:	str	r0, [fp, #-76]	; 0xffffffb4
   12280:	mov	r5, #0
   12284:	b	12414 <__assert_fail@plt+0x1384>
   12288:	ldrb	r1, [r0, #1]
   1228c:	and	r1, r1, #223	; 0xdf
   12290:	cmp	r1, #66	; 0x42
   12294:	ldrbeq	r1, [r0, #2]
   12298:	cmpeq	r1, #49	; 0x31
   1229c:	beq	131bc <__assert_fail@plt+0x212c>
   122a0:	movw	r0, #25110	; 0x6216
   122a4:	movw	r1, #25106	; 0x6212
   122a8:	cmp	r7, #9
   122ac:	movt	r0, #1
   122b0:	movt	r1, #1
   122b4:	moveq	r0, r1
   122b8:	str	r0, [sp, #68]	; 0x44
   122bc:	movw	r4, #25110	; 0x6216
   122c0:	mov	r0, #0
   122c4:	mov	r2, #5
   122c8:	movt	r4, #1
   122cc:	mov	r1, r4
   122d0:	bl	10ed4 <dcgettext@plt>
   122d4:	cmp	r0, r4
   122d8:	str	r0, [sp, #72]	; 0x48
   122dc:	beq	122ec <__assert_fail@plt+0x125c>
   122e0:	mov	r4, r9
   122e4:	mov	r2, r8
   122e8:	b	123a4 <__assert_fail@plt+0x1314>
   122ec:	bl	1591c <__assert_fail@plt+0x488c>
   122f0:	ldrb	r1, [r0]
   122f4:	mov	r4, r9
   122f8:	and	r1, r1, #223	; 0xdf
   122fc:	cmp	r1, #71	; 0x47
   12300:	beq	1235c <__assert_fail@plt+0x12cc>
   12304:	cmp	r1, #85	; 0x55
   12308:	mov	r2, r8
   1230c:	bne	12384 <__assert_fail@plt+0x12f4>
   12310:	ldrb	r1, [r0, #1]
   12314:	and	r1, r1, #223	; 0xdf
   12318:	cmp	r1, #84	; 0x54
   1231c:	bne	12384 <__assert_fail@plt+0x12f4>
   12320:	ldrb	r1, [r0, #2]
   12324:	and	r1, r1, #223	; 0xdf
   12328:	cmp	r1, #70	; 0x46
   1232c:	ldrbeq	r1, [r0, #3]
   12330:	cmpeq	r1, #45	; 0x2d
   12334:	bne	12384 <__assert_fail@plt+0x12f4>
   12338:	ldrb	r1, [r0, #4]
   1233c:	cmp	r1, #56	; 0x38
   12340:	ldrbeq	r0, [r0, #5]
   12344:	cmpeq	r0, #0
   12348:	bne	12384 <__assert_fail@plt+0x12f4>
   1234c:	movw	r0, #25116	; 0x621c
   12350:	movt	r0, #1
   12354:	str	r0, [sp, #72]	; 0x48
   12358:	b	123a4 <__assert_fail@plt+0x1314>
   1235c:	ldrb	r1, [r0, #1]
   12360:	mov	r2, r8
   12364:	and	r1, r1, #223	; 0xdf
   12368:	cmp	r1, #66	; 0x42
   1236c:	bne	12384 <__assert_fail@plt+0x12f4>
   12370:	ldrb	r1, [r0, #2]
   12374:	cmp	r1, #49	; 0x31
   12378:	ldrbeq	r1, [r0, #3]
   1237c:	cmpeq	r1, #56	; 0x38
   12380:	beq	13200 <__assert_fail@plt+0x2170>
   12384:	movw	r0, #25110	; 0x6216
   12388:	cmp	r7, #9
   1238c:	movt	r0, #1
   12390:	mov	r1, r0
   12394:	movw	r0, #25106	; 0x6212
   12398:	movt	r0, #1
   1239c:	moveq	r1, r0
   123a0:	str	r1, [sp, #72]	; 0x48
   123a4:	mov	r8, r5
   123a8:	mov	r9, #0
   123ac:	tst	r8, #1
   123b0:	mov	r5, r8
   123b4:	str	r2, [fp, #-48]	; 0xffffffd0
   123b8:	bne	123f0 <__assert_fail@plt+0x1360>
   123bc:	ldr	r0, [sp, #68]	; 0x44
   123c0:	ldrb	r0, [r0]
   123c4:	cmp	r0, #0
   123c8:	beq	123f0 <__assert_fail@plt+0x1360>
   123cc:	ldr	r1, [sp, #68]	; 0x44
   123d0:	mov	r9, #0
   123d4:	add	r1, r1, #1
   123d8:	cmp	r9, sl
   123dc:	strbcc	r0, [r6, r9]
   123e0:	ldrb	r0, [r1, r9]
   123e4:	add	r9, r9, #1
   123e8:	cmp	r0, #0
   123ec:	bne	123d8 <__assert_fail@plt+0x1348>
   123f0:	ldr	r8, [sp, #72]	; 0x48
   123f4:	mov	r0, r8
   123f8:	bl	10fa0 <strlen@plt>
   123fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   12400:	ldr	lr, [sp, #84]	; 0x54
   12404:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12408:	str	r0, [fp, #-76]	; 0xffffffb4
   1240c:	str	r8, [sp, #92]	; 0x5c
   12410:	mov	r3, #1
   12414:	ldr	r0, [fp, #16]
   12418:	str	r7, [fp, #-64]	; 0xffffffc0
   1241c:	str	r5, [fp, #-72]	; 0xffffffb8
   12420:	str	r3, [sp, #80]	; 0x50
   12424:	cmp	r0, #0
   12428:	movwne	r0, #1
   1242c:	and	r0, r0, r5
   12430:	str	r0, [fp, #-88]	; 0xffffffa8
   12434:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12438:	cmp	r0, #0
   1243c:	movwne	r0, #1
   12440:	subs	r7, r7, #2
   12444:	and	r1, r0, r5
   12448:	str	r7, [fp, #-80]	; 0xffffffb0
   1244c:	and	r1, r3, r1
   12450:	str	r1, [sp, #40]	; 0x28
   12454:	clz	r1, r7
   12458:	lsr	r1, r1, #5
   1245c:	and	r1, r1, r5
   12460:	eor	r5, r5, #1
   12464:	str	r1, [sp, #36]	; 0x24
   12468:	mov	r1, r7
   1246c:	str	r5, [sp, #88]	; 0x58
   12470:	mov	r7, #0
   12474:	movwne	r1, #1
   12478:	orr	r5, r1, r5
   1247c:	and	r1, r1, r3
   12480:	and	r0, r0, r1
   12484:	str	r5, [sp, #60]	; 0x3c
   12488:	str	r1, [fp, #-68]	; 0xffffffbc
   1248c:	str	r0, [fp, #-60]	; 0xffffffc4
   12490:	eor	r0, r3, #1
   12494:	str	r0, [sp, #44]	; 0x2c
   12498:	cmn	lr, #1
   1249c:	beq	124ac <__assert_fail@plt+0x141c>
   124a0:	cmp	r7, lr
   124a4:	bne	124b8 <__assert_fail@plt+0x1428>
   124a8:	b	13130 <__assert_fail@plt+0x20a0>
   124ac:	ldrb	r0, [ip, r7]
   124b0:	cmp	r0, #0
   124b4:	beq	13138 <__assert_fail@plt+0x20a8>
   124b8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   124bc:	mov	r8, #0
   124c0:	str	r4, [fp, #-52]	; 0xffffffcc
   124c4:	str	r2, [fp, #-48]	; 0xffffffd0
   124c8:	cmp	r0, #0
   124cc:	beq	12500 <__assert_fail@plt+0x1470>
   124d0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   124d4:	add	r4, r7, r0
   124d8:	cmp	r0, #2
   124dc:	bcc	124f8 <__assert_fail@plt+0x1468>
   124e0:	cmn	lr, #1
   124e4:	bne	124f8 <__assert_fail@plt+0x1468>
   124e8:	mov	r0, ip
   124ec:	bl	10fa0 <strlen@plt>
   124f0:	ldr	ip, [fp, #-84]	; 0xffffffac
   124f4:	mov	lr, r0
   124f8:	cmp	r4, lr
   124fc:	bls	12518 <__assert_fail@plt+0x1488>
   12500:	mov	r0, #0
   12504:	str	r0, [fp, #-56]	; 0xffffffc8
   12508:	ldrb	r5, [ip, r7]
   1250c:	cmp	r5, #126	; 0x7e
   12510:	bls	12568 <__assert_fail@plt+0x14d8>
   12514:	b	12970 <__assert_fail@plt+0x18e0>
   12518:	ldr	r1, [sp, #92]	; 0x5c
   1251c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12520:	add	r0, ip, r7
   12524:	mov	r4, lr
   12528:	bl	10ec8 <memcmp@plt>
   1252c:	ldr	r2, [sp, #88]	; 0x58
   12530:	cmp	r0, #0
   12534:	mov	r1, r0
   12538:	movwne	r1, #1
   1253c:	orr	r1, r1, r2
   12540:	tst	r1, #1
   12544:	beq	13244 <__assert_fail@plt+0x21b4>
   12548:	ldr	ip, [fp, #-84]	; 0xffffffac
   1254c:	clz	r0, r0
   12550:	mov	lr, r4
   12554:	lsr	r0, r0, #5
   12558:	str	r0, [fp, #-56]	; 0xffffffc8
   1255c:	ldrb	r5, [ip, r7]
   12560:	cmp	r5, #126	; 0x7e
   12564:	bhi	12970 <__assert_fail@plt+0x18e0>
   12568:	add	r3, pc, #16
   1256c:	mov	r4, #1
   12570:	mov	r2, #110	; 0x6e
   12574:	mov	r0, #97	; 0x61
   12578:	mov	r1, #0
   1257c:	ldr	pc, [r3, r5, lsl #2]
   12580:	andeq	r2, r1, r0, asr r8
   12584:	andeq	r2, r1, r0, ror r9
   12588:	andeq	r2, r1, r0, ror r9
   1258c:	andeq	r2, r1, r0, ror r9
   12590:	andeq	r2, r1, r0, ror r9
   12594:	andeq	r2, r1, r0, ror r9
   12598:	andeq	r2, r1, r0, ror r9
   1259c:	andeq	r2, r1, ip, asr #20
   125a0:	andeq	r2, r1, r0, lsr r8
   125a4:	andeq	r2, r1, r8, lsl r8
   125a8:	andeq	r2, r1, ip, lsr r8
   125ac:	andeq	r2, r1, ip, asr #17
   125b0:	andeq	r2, r1, r0, lsl r8
   125b4:	andeq	r2, r1, r8, lsr r8
   125b8:	andeq	r2, r1, r0, ror r9
   125bc:	andeq	r2, r1, r0, ror r9
   125c0:	andeq	r2, r1, r0, ror r9
   125c4:	andeq	r2, r1, r0, ror r9
   125c8:	andeq	r2, r1, r0, ror r9
   125cc:	andeq	r2, r1, r0, ror r9
   125d0:	andeq	r2, r1, r0, ror r9
   125d4:	andeq	r2, r1, r0, ror r9
   125d8:	andeq	r2, r1, r0, ror r9
   125dc:	andeq	r2, r1, r0, ror r9
   125e0:	andeq	r2, r1, r0, ror r9
   125e4:	andeq	r2, r1, r0, ror r9
   125e8:	andeq	r2, r1, r0, ror r9
   125ec:	andeq	r2, r1, r0, ror r9
   125f0:	andeq	r2, r1, r0, ror r9
   125f4:	andeq	r2, r1, r0, ror r9
   125f8:	andeq	r2, r1, r0, ror r9
   125fc:	andeq	r2, r1, r0, ror r9
   12600:	andeq	r2, r1, r8, asr #19
   12604:	andeq	r2, r1, ip, asr #19
   12608:	andeq	r2, r1, ip, asr #19
   1260c:	muleq	r1, ip, r7
   12610:	andeq	r2, r1, ip, asr #19
   12614:	andeq	r2, r1, ip, ror r7
   12618:	andeq	r2, r1, ip, asr #19
   1261c:	ldrdeq	r2, [r1], -r4
   12620:	andeq	r2, r1, ip, asr #19
   12624:	andeq	r2, r1, ip, asr #19
   12628:	andeq	r2, r1, ip, asr #19
   1262c:	andeq	r2, r1, ip, ror r7
   12630:	andeq	r2, r1, ip, ror r7
   12634:	andeq	r2, r1, ip, ror r7
   12638:	andeq	r2, r1, ip, ror r7
   1263c:	andeq	r2, r1, ip, ror r7
   12640:	andeq	r2, r1, ip, ror r7
   12644:	andeq	r2, r1, ip, ror r7
   12648:	andeq	r2, r1, ip, ror r7
   1264c:	andeq	r2, r1, ip, ror r7
   12650:	andeq	r2, r1, ip, ror r7
   12654:	andeq	r2, r1, ip, ror r7
   12658:	andeq	r2, r1, ip, ror r7
   1265c:	andeq	r2, r1, ip, ror r7
   12660:	andeq	r2, r1, ip, ror r7
   12664:	andeq	r2, r1, ip, ror r7
   12668:	andeq	r2, r1, ip, ror r7
   1266c:	andeq	r2, r1, ip, asr #19
   12670:	andeq	r2, r1, ip, asr #19
   12674:	andeq	r2, r1, ip, asr #19
   12678:	andeq	r2, r1, ip, asr #19
   1267c:	muleq	r1, r0, r8
   12680:	andeq	r2, r1, r0, ror r9
   12684:	andeq	r2, r1, ip, ror r7
   12688:	andeq	r2, r1, ip, ror r7
   1268c:	andeq	r2, r1, ip, ror r7
   12690:	andeq	r2, r1, ip, ror r7
   12694:	andeq	r2, r1, ip, ror r7
   12698:	andeq	r2, r1, ip, ror r7
   1269c:	andeq	r2, r1, ip, ror r7
   126a0:	andeq	r2, r1, ip, ror r7
   126a4:	andeq	r2, r1, ip, ror r7
   126a8:	andeq	r2, r1, ip, ror r7
   126ac:	andeq	r2, r1, ip, ror r7
   126b0:	andeq	r2, r1, ip, ror r7
   126b4:	andeq	r2, r1, ip, ror r7
   126b8:	andeq	r2, r1, ip, ror r7
   126bc:	andeq	r2, r1, ip, ror r7
   126c0:	andeq	r2, r1, ip, ror r7
   126c4:	andeq	r2, r1, ip, ror r7
   126c8:	andeq	r2, r1, ip, ror r7
   126cc:	andeq	r2, r1, ip, ror r7
   126d0:	andeq	r2, r1, ip, ror r7
   126d4:	andeq	r2, r1, ip, ror r7
   126d8:	andeq	r2, r1, ip, ror r7
   126dc:	andeq	r2, r1, ip, ror r7
   126e0:	andeq	r2, r1, ip, ror r7
   126e4:	andeq	r2, r1, ip, ror r7
   126e8:	andeq	r2, r1, ip, ror r7
   126ec:	andeq	r2, r1, ip, asr #19
   126f0:	ldrdeq	r2, [r1], -ip
   126f4:	andeq	r2, r1, ip, ror r7
   126f8:	andeq	r2, r1, ip, asr #19
   126fc:	andeq	r2, r1, ip, ror r7
   12700:	andeq	r2, r1, ip, asr #19
   12704:	andeq	r2, r1, ip, ror r7
   12708:	andeq	r2, r1, ip, ror r7
   1270c:	andeq	r2, r1, ip, ror r7
   12710:	andeq	r2, r1, ip, ror r7
   12714:	andeq	r2, r1, ip, ror r7
   12718:	andeq	r2, r1, ip, ror r7
   1271c:	andeq	r2, r1, ip, ror r7
   12720:	andeq	r2, r1, ip, ror r7
   12724:	andeq	r2, r1, ip, ror r7
   12728:	andeq	r2, r1, ip, ror r7
   1272c:	andeq	r2, r1, ip, ror r7
   12730:	andeq	r2, r1, ip, ror r7
   12734:	andeq	r2, r1, ip, ror r7
   12738:	andeq	r2, r1, ip, ror r7
   1273c:	andeq	r2, r1, ip, ror r7
   12740:	andeq	r2, r1, ip, ror r7
   12744:	andeq	r2, r1, ip, ror r7
   12748:	andeq	r2, r1, ip, ror r7
   1274c:	andeq	r2, r1, ip, ror r7
   12750:	andeq	r2, r1, ip, ror r7
   12754:	andeq	r2, r1, ip, ror r7
   12758:	andeq	r2, r1, ip, ror r7
   1275c:	andeq	r2, r1, ip, ror r7
   12760:	andeq	r2, r1, ip, ror r7
   12764:	andeq	r2, r1, ip, ror r7
   12768:	andeq	r2, r1, ip, ror r7
   1276c:			; <UNDEFINED> instruction: 0x000127bc
   12770:	andeq	r2, r1, ip, asr #19
   12774:			; <UNDEFINED> instruction: 0x000127bc
   12778:	muleq	r1, ip, r7
   1277c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12780:	cmp	r0, #0
   12784:	beq	12a60 <__assert_fail@plt+0x19d0>
   12788:	ldr	r0, [fp, #16]
   1278c:	cmp	r0, #0
   12790:	mov	r0, r5
   12794:	bne	12a70 <__assert_fail@plt+0x19e0>
   12798:	b	12a90 <__assert_fail@plt+0x1a00>
   1279c:	mov	r4, #0
   127a0:	cmp	r7, #0
   127a4:	beq	129c8 <__assert_fail@plt+0x1938>
   127a8:	mov	r8, #0
   127ac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   127b0:	cmp	r0, #0
   127b4:	bne	12788 <__assert_fail@plt+0x16f8>
   127b8:	b	12a60 <__assert_fail@plt+0x19d0>
   127bc:	mov	r4, #0
   127c0:	cmn	lr, #1
   127c4:	beq	129a0 <__assert_fail@plt+0x1910>
   127c8:	cmp	r7, #0
   127cc:	bne	127a8 <__assert_fail@plt+0x1718>
   127d0:	cmp	lr, #1
   127d4:	beq	129c8 <__assert_fail@plt+0x1938>
   127d8:	b	127a8 <__assert_fail@plt+0x1718>
   127dc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   127e0:	cmp	r0, #2
   127e4:	bne	129f8 <__assert_fail@plt+0x1968>
   127e8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   127ec:	tst	r0, #1
   127f0:	bne	13258 <__assert_fail@plt+0x21c8>
   127f4:	mov	r8, #0
   127f8:	mov	r0, #92	; 0x5c
   127fc:	mov	r4, #0
   12800:	cmp	r8, #0
   12804:	beq	12a18 <__assert_fail@plt+0x1988>
   12808:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1280c:	b	12b0c <__assert_fail@plt+0x1a7c>
   12810:	mov	r0, #102	; 0x66
   12814:	b	12a4c <__assert_fail@plt+0x19bc>
   12818:	mov	r2, #116	; 0x74
   1281c:	ldr	r0, [sp, #60]	; 0x3c
   12820:	tst	r0, #1
   12824:	mov	r0, r2
   12828:	bne	12a4c <__assert_fail@plt+0x19bc>
   1282c:	b	13258 <__assert_fail@plt+0x21c8>
   12830:	mov	r0, #98	; 0x62
   12834:	b	12a4c <__assert_fail@plt+0x19bc>
   12838:	mov	r2, #114	; 0x72
   1283c:	ldr	r0, [sp, #60]	; 0x3c
   12840:	tst	r0, #1
   12844:	mov	r0, r2
   12848:	bne	12a4c <__assert_fail@plt+0x19bc>
   1284c:	b	13258 <__assert_fail@plt+0x21c8>
   12850:	ldr	r0, [sp, #80]	; 0x50
   12854:	tst	r0, #1
   12858:	beq	12b34 <__assert_fail@plt+0x1aa4>
   1285c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12860:	tst	r0, #1
   12864:	bne	13380 <__assert_fail@plt+0x22f0>
   12868:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1286c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12870:	cmp	r0, #2
   12874:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12878:	movwne	r0, #1
   1287c:	orr	r0, r0, r2
   12880:	tst	r0, #1
   12884:	beq	12e2c <__assert_fail@plt+0x1d9c>
   12888:	mov	r0, r9
   1288c:	b	12e60 <__assert_fail@plt+0x1dd0>
   12890:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12894:	mov	r8, #0
   12898:	mov	r5, #63	; 0x3f
   1289c:	cmp	r0, #5
   128a0:	beq	12ce8 <__assert_fail@plt+0x1c58>
   128a4:	cmp	r0, #2
   128a8:	bne	12d98 <__assert_fail@plt+0x1d08>
   128ac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   128b0:	tst	r0, #1
   128b4:	bne	13258 <__assert_fail@plt+0x21c8>
   128b8:	mov	r4, #0
   128bc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   128c0:	cmp	r0, #0
   128c4:	bne	12788 <__assert_fail@plt+0x16f8>
   128c8:	b	12a60 <__assert_fail@plt+0x19d0>
   128cc:	mov	r0, #118	; 0x76
   128d0:	b	12a4c <__assert_fail@plt+0x19bc>
   128d4:	mov	r0, #1
   128d8:	mov	r5, #39	; 0x27
   128dc:	str	r0, [sp, #52]	; 0x34
   128e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   128e4:	cmp	r0, #2
   128e8:	bne	1295c <__assert_fail@plt+0x18cc>
   128ec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   128f0:	tst	r0, #1
   128f4:	bne	13258 <__assert_fail@plt+0x21c8>
   128f8:	ldr	r2, [sp, #48]	; 0x30
   128fc:	clz	r1, sl
   12900:	mov	r8, #0
   12904:	lsr	r1, r1, #5
   12908:	cmp	r2, #0
   1290c:	mov	r0, r2
   12910:	movwne	r0, #1
   12914:	orrs	r0, r0, r1
   12918:	moveq	r2, sl
   1291c:	moveq	sl, r0
   12920:	cmp	r9, sl
   12924:	str	r2, [sp, #48]	; 0x30
   12928:	movcc	r0, #39	; 0x27
   1292c:	strbcc	r0, [r6, r9]
   12930:	add	r0, r9, #1
   12934:	cmp	r0, sl
   12938:	movcc	r1, #92	; 0x5c
   1293c:	strbcc	r1, [r6, r0]
   12940:	add	r0, r9, #2
   12944:	add	r9, r9, #3
   12948:	cmp	r0, sl
   1294c:	movcc	r1, #39	; 0x27
   12950:	strbcc	r1, [r6, r0]
   12954:	mov	r0, #0
   12958:	str	r0, [fp, #-48]	; 0xffffffd0
   1295c:	mov	r4, #1
   12960:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12964:	cmp	r0, #0
   12968:	bne	12788 <__assert_fail@plt+0x16f8>
   1296c:	b	12a60 <__assert_fail@plt+0x19d0>
   12970:	ldr	r0, [sp, #32]
   12974:	cmp	r0, #1
   12978:	bne	12b64 <__assert_fail@plt+0x1ad4>
   1297c:	str	lr, [sp, #84]	; 0x54
   12980:	bl	10f88 <__ctype_b_loc@plt>
   12984:	ldr	r0, [r0]
   12988:	ldr	ip, [fp, #-84]	; 0xffffffac
   1298c:	mov	r1, #1
   12990:	add	r0, r0, r5, lsl #1
   12994:	ldrb	r0, [r0, #1]
   12998:	ubfx	r4, r0, #6, #1
   1299c:	b	12f5c <__assert_fail@plt+0x1ecc>
   129a0:	cmp	r7, #0
   129a4:	ldrbeq	r0, [ip, #1]
   129a8:	cmpeq	r0, #0
   129ac:	beq	129c8 <__assert_fail@plt+0x1938>
   129b0:	mvn	lr, #0
   129b4:	mov	r8, #0
   129b8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   129bc:	cmp	r0, #0
   129c0:	bne	12788 <__assert_fail@plt+0x16f8>
   129c4:	b	12a60 <__assert_fail@plt+0x19d0>
   129c8:	mov	r1, #1
   129cc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   129d0:	cmp	r0, #2
   129d4:	bne	129e4 <__assert_fail@plt+0x1954>
   129d8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   129dc:	tst	r0, #1
   129e0:	bne	13258 <__assert_fail@plt+0x21c8>
   129e4:	mov	r4, r1
   129e8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   129ec:	cmp	r0, #0
   129f0:	bne	12788 <__assert_fail@plt+0x16f8>
   129f4:	b	12a60 <__assert_fail@plt+0x19d0>
   129f8:	ldr	r1, [sp, #40]	; 0x28
   129fc:	mov	r8, #0
   12a00:	mov	r0, #92	; 0x5c
   12a04:	cmp	r1, #0
   12a08:	beq	12a4c <__assert_fail@plt+0x19bc>
   12a0c:	mov	r4, #0
   12a10:	cmp	r8, #0
   12a14:	bne	12808 <__assert_fail@plt+0x1778>
   12a18:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12a1c:	tst	r2, #1
   12a20:	beq	12b0c <__assert_fail@plt+0x1a7c>
   12a24:	cmp	r9, sl
   12a28:	movcc	r1, #39	; 0x27
   12a2c:	strbcc	r1, [r6, r9]
   12a30:	add	r1, r9, #1
   12a34:	add	r9, r9, #2
   12a38:	cmp	r1, sl
   12a3c:	movcc	r2, #39	; 0x27
   12a40:	strbcc	r2, [r6, r1]
   12a44:	mov	r2, #0
   12a48:	b	12b0c <__assert_fail@plt+0x1a7c>
   12a4c:	ldr	r1, [sp, #80]	; 0x50
   12a50:	mov	r4, #0
   12a54:	mov	r8, #0
   12a58:	tst	r1, #1
   12a5c:	bne	12a9c <__assert_fail@plt+0x1a0c>
   12a60:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12a64:	cmp	r0, #0
   12a68:	mov	r0, r5
   12a6c:	beq	12a90 <__assert_fail@plt+0x1a00>
   12a70:	ldr	r1, [fp, #16]
   12a74:	ubfx	r0, r5, #5, #3
   12a78:	mov	r2, #1
   12a7c:	ldr	r0, [r1, r0, lsl #2]
   12a80:	and	r1, r5, #31
   12a84:	tst	r0, r2, lsl r1
   12a88:	mov	r0, r5
   12a8c:	bne	12a9c <__assert_fail@plt+0x1a0c>
   12a90:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12a94:	cmp	r1, #0
   12a98:	beq	12ef4 <__assert_fail@plt+0x1e64>
   12a9c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12aa0:	tst	r1, #1
   12aa4:	bne	13238 <__assert_fail@plt+0x21a8>
   12aa8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12aac:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12ab0:	cmp	r1, #2
   12ab4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12ab8:	movwne	r1, #1
   12abc:	orr	r1, r1, r2
   12ac0:	tst	r1, #1
   12ac4:	bne	12afc <__assert_fail@plt+0x1a6c>
   12ac8:	cmp	r9, sl
   12acc:	movcc	r1, #39	; 0x27
   12ad0:	strbcc	r1, [r6, r9]
   12ad4:	add	r1, r9, #1
   12ad8:	cmp	r1, sl
   12adc:	movcc	r2, #36	; 0x24
   12ae0:	strbcc	r2, [r6, r1]
   12ae4:	add	r1, r9, #2
   12ae8:	add	r9, r9, #3
   12aec:	cmp	r1, sl
   12af0:	movcc	r2, #39	; 0x27
   12af4:	strbcc	r2, [r6, r1]
   12af8:	mov	r2, #1
   12afc:	cmp	r9, sl
   12b00:	movcc	r1, #92	; 0x5c
   12b04:	strbcc	r1, [r6, r9]
   12b08:	add	r9, r9, #1
   12b0c:	cmp	r9, sl
   12b10:	add	r7, r7, #1
   12b14:	strbcc	r0, [r6, r9]
   12b18:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12b1c:	add	r9, r9, #1
   12b20:	and	r0, r0, r4
   12b24:	mov	r4, r0
   12b28:	cmn	lr, #1
   12b2c:	bne	124a0 <__assert_fail@plt+0x1410>
   12b30:	b	124ac <__assert_fail@plt+0x141c>
   12b34:	ldr	r0, [sp, #28]
   12b38:	mov	r4, #0
   12b3c:	mov	r8, #0
   12b40:	mov	r5, #0
   12b44:	cmp	r0, #0
   12b48:	beq	12a60 <__assert_fail@plt+0x19d0>
   12b4c:	ldr	r4, [fp, #-52]	; 0xffffffcc
   12b50:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12b54:	add	r7, r7, #1
   12b58:	cmn	lr, #1
   12b5c:	bne	124a0 <__assert_fail@plt+0x1410>
   12b60:	b	124ac <__assert_fail@plt+0x141c>
   12b64:	mov	r0, #0
   12b68:	cmn	lr, #1
   12b6c:	str	r0, [fp, #-36]	; 0xffffffdc
   12b70:	str	r0, [fp, #-40]	; 0xffffffd8
   12b74:	bne	12b88 <__assert_fail@plt+0x1af8>
   12b78:	mov	r0, ip
   12b7c:	bl	10fa0 <strlen@plt>
   12b80:	ldr	ip, [fp, #-84]	; 0xffffffac
   12b84:	mov	lr, r0
   12b88:	ldr	r0, [sp, #36]	; 0x24
   12b8c:	str	sl, [sp, #56]	; 0x38
   12b90:	str	lr, [sp, #84]	; 0x54
   12b94:	cmp	r0, #0
   12b98:	beq	12db0 <__assert_fail@plt+0x1d20>
   12b9c:	add	r0, ip, r7
   12ba0:	mov	r4, #1
   12ba4:	mov	r6, #0
   12ba8:	sub	sl, fp, #40	; 0x28
   12bac:	str	r0, [sp, #20]
   12bb0:	str	r6, [sp, #64]	; 0x40
   12bb4:	add	r6, r6, r7
   12bb8:	sub	r0, fp, #44	; 0x2c
   12bbc:	mov	r3, sl
   12bc0:	add	r1, ip, r6
   12bc4:	sub	r2, lr, r6
   12bc8:	bl	15954 <__assert_fail@plt+0x48c4>
   12bcc:	cmn	r0, #2
   12bd0:	beq	12f0c <__assert_fail@plt+0x1e7c>
   12bd4:	ldr	sl, [sp, #56]	; 0x38
   12bd8:	cmn	r0, #1
   12bdc:	beq	12f00 <__assert_fail@plt+0x1e70>
   12be0:	cmp	r0, #0
   12be4:	beq	12f04 <__assert_fail@plt+0x1e74>
   12be8:	cmp	r0, #2
   12bec:	bcc	12cac <__assert_fail@plt+0x1c1c>
   12bf0:	ldr	r1, [sp, #64]	; 0x40
   12bf4:	ldr	r2, [sp, #20]
   12bf8:	add	r1, r2, r1
   12bfc:	mov	r2, #1
   12c00:	ldrb	r3, [r1, r2]
   12c04:	sub	r3, r3, #91	; 0x5b
   12c08:	cmp	r3, #33	; 0x21
   12c0c:	bhi	12ca0 <__assert_fail@plt+0x1c10>
   12c10:	add	r6, pc, #0
   12c14:	ldr	pc, [r6, r3, lsl #2]
   12c18:	andeq	r3, r1, r4, ror #4
   12c1c:	andeq	r3, r1, r4, ror #4
   12c20:	andeq	r2, r1, r0, lsr #25
   12c24:	andeq	r3, r1, r4, ror #4
   12c28:	andeq	r2, r1, r0, lsr #25
   12c2c:	andeq	r3, r1, r4, ror #4
   12c30:	andeq	r2, r1, r0, lsr #25
   12c34:	andeq	r2, r1, r0, lsr #25
   12c38:	andeq	r2, r1, r0, lsr #25
   12c3c:	andeq	r2, r1, r0, lsr #25
   12c40:	andeq	r2, r1, r0, lsr #25
   12c44:	andeq	r2, r1, r0, lsr #25
   12c48:	andeq	r2, r1, r0, lsr #25
   12c4c:	andeq	r2, r1, r0, lsr #25
   12c50:	andeq	r2, r1, r0, lsr #25
   12c54:	andeq	r2, r1, r0, lsr #25
   12c58:	andeq	r2, r1, r0, lsr #25
   12c5c:	andeq	r2, r1, r0, lsr #25
   12c60:	andeq	r2, r1, r0, lsr #25
   12c64:	andeq	r2, r1, r0, lsr #25
   12c68:	andeq	r2, r1, r0, lsr #25
   12c6c:	andeq	r2, r1, r0, lsr #25
   12c70:	andeq	r2, r1, r0, lsr #25
   12c74:	andeq	r2, r1, r0, lsr #25
   12c78:	andeq	r2, r1, r0, lsr #25
   12c7c:	andeq	r2, r1, r0, lsr #25
   12c80:	andeq	r2, r1, r0, lsr #25
   12c84:	andeq	r2, r1, r0, lsr #25
   12c88:	andeq	r2, r1, r0, lsr #25
   12c8c:	andeq	r2, r1, r0, lsr #25
   12c90:	andeq	r2, r1, r0, lsr #25
   12c94:	andeq	r2, r1, r0, lsr #25
   12c98:	andeq	r2, r1, r0, lsr #25
   12c9c:	andeq	r3, r1, r4, ror #4
   12ca0:	add	r2, r2, #1
   12ca4:	cmp	r2, r0
   12ca8:	bcc	12c00 <__assert_fail@plt+0x1b70>
   12cac:	ldr	r6, [sp, #64]	; 0x40
   12cb0:	add	r6, r0, r6
   12cb4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12cb8:	bl	10ef8 <iswprint@plt>
   12cbc:	cmp	r0, #0
   12cc0:	sub	sl, fp, #40	; 0x28
   12cc4:	movwne	r0, #1
   12cc8:	and	r4, r4, r0
   12ccc:	mov	r0, sl
   12cd0:	bl	10eb0 <mbsinit@plt>
   12cd4:	ldr	ip, [fp, #-84]	; 0xffffffac
   12cd8:	ldr	lr, [sp, #84]	; 0x54
   12cdc:	cmp	r0, #0
   12ce0:	beq	12bb0 <__assert_fail@plt+0x1b20>
   12ce4:	b	12f50 <__assert_fail@plt+0x1ec0>
   12ce8:	ldr	r0, [sp, #24]
   12cec:	cmp	r0, #0
   12cf0:	beq	12d98 <__assert_fail@plt+0x1d08>
   12cf4:	add	r0, r7, #2
   12cf8:	cmp	r0, lr
   12cfc:	bcs	12d98 <__assert_fail@plt+0x1d08>
   12d00:	add	r1, ip, r7
   12d04:	ldrb	r1, [r1, #1]
   12d08:	cmp	r1, #63	; 0x3f
   12d0c:	bne	12d98 <__assert_fail@plt+0x1d08>
   12d10:	ldrb	r5, [ip, r0]
   12d14:	sub	r1, r5, #33	; 0x21
   12d18:	cmp	r1, #29
   12d1c:	bhi	12d98 <__assert_fail@plt+0x1d08>
   12d20:	movw	r3, #20929	; 0x51c1
   12d24:	mov	r2, #1
   12d28:	movt	r3, #14336	; 0x3800
   12d2c:	tst	r3, r2, lsl r1
   12d30:	beq	12d98 <__assert_fail@plt+0x1d08>
   12d34:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12d38:	tst	r1, #1
   12d3c:	bne	13388 <__assert_fail@plt+0x22f8>
   12d40:	cmp	r9, sl
   12d44:	mov	r7, r0
   12d48:	mov	r4, #0
   12d4c:	movcc	r1, #63	; 0x3f
   12d50:	strbcc	r1, [r6, r9]
   12d54:	add	r1, r9, #1
   12d58:	cmp	r1, sl
   12d5c:	movcc	r2, #34	; 0x22
   12d60:	strbcc	r2, [r6, r1]
   12d64:	add	r1, r9, #2
   12d68:	cmp	r1, sl
   12d6c:	movcc	r2, #34	; 0x22
   12d70:	strbcc	r2, [r6, r1]
   12d74:	add	r1, r9, #3
   12d78:	add	r9, r9, #4
   12d7c:	cmp	r1, sl
   12d80:	movcc	r2, #63	; 0x3f
   12d84:	strbcc	r2, [r6, r1]
   12d88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12d8c:	cmp	r0, #0
   12d90:	bne	12788 <__assert_fail@plt+0x16f8>
   12d94:	b	12a60 <__assert_fail@plt+0x19d0>
   12d98:	mov	r5, #63	; 0x3f
   12d9c:	mov	r4, #0
   12da0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12da4:	cmp	r0, #0
   12da8:	bne	12788 <__assert_fail@plt+0x16f8>
   12dac:	b	12a60 <__assert_fail@plt+0x19d0>
   12db0:	mov	r4, #1
   12db4:	mov	r6, #0
   12db8:	sub	sl, fp, #40	; 0x28
   12dbc:	str	r6, [sp, #64]	; 0x40
   12dc0:	add	r6, r6, r7
   12dc4:	sub	r0, fp, #44	; 0x2c
   12dc8:	mov	r3, sl
   12dcc:	add	r1, ip, r6
   12dd0:	sub	r2, lr, r6
   12dd4:	bl	15954 <__assert_fail@plt+0x48c4>
   12dd8:	cmn	r0, #2
   12ddc:	beq	12f0c <__assert_fail@plt+0x1e7c>
   12de0:	cmn	r0, #1
   12de4:	beq	12f00 <__assert_fail@plt+0x1e70>
   12de8:	ldr	r6, [sp, #64]	; 0x40
   12dec:	cmp	r0, #0
   12df0:	beq	12f4c <__assert_fail@plt+0x1ebc>
   12df4:	add	r6, r0, r6
   12df8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12dfc:	bl	10ef8 <iswprint@plt>
   12e00:	cmp	r0, #0
   12e04:	sub	sl, fp, #40	; 0x28
   12e08:	movwne	r0, #1
   12e0c:	and	r4, r4, r0
   12e10:	mov	r0, sl
   12e14:	bl	10eb0 <mbsinit@plt>
   12e18:	ldr	ip, [fp, #-84]	; 0xffffffac
   12e1c:	ldr	lr, [sp, #84]	; 0x54
   12e20:	cmp	r0, #0
   12e24:	beq	12dbc <__assert_fail@plt+0x1d2c>
   12e28:	b	12f50 <__assert_fail@plt+0x1ec0>
   12e2c:	cmp	r9, sl
   12e30:	mov	r2, #1
   12e34:	movcc	r0, #39	; 0x27
   12e38:	strbcc	r0, [r6, r9]
   12e3c:	add	r0, r9, #1
   12e40:	cmp	r0, sl
   12e44:	movcc	r1, #36	; 0x24
   12e48:	strbcc	r1, [r6, r0]
   12e4c:	add	r0, r9, #2
   12e50:	cmp	r0, sl
   12e54:	movcc	r1, #39	; 0x27
   12e58:	strbcc	r1, [r6, r0]
   12e5c:	add	r0, r9, #3
   12e60:	cmp	r0, sl
   12e64:	add	r9, r0, #1
   12e68:	str	r2, [fp, #-48]	; 0xffffffd0
   12e6c:	movcc	r1, #92	; 0x5c
   12e70:	strbcc	r1, [r6, r0]
   12e74:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12e78:	cmp	r1, #2
   12e7c:	beq	12edc <__assert_fail@plt+0x1e4c>
   12e80:	add	r1, r7, #1
   12e84:	mov	r4, #0
   12e88:	mov	r8, #1
   12e8c:	mov	r5, #48	; 0x30
   12e90:	cmp	r1, lr
   12e94:	bcs	1277c <__assert_fail@plt+0x16ec>
   12e98:	ldrb	r1, [ip, r1]
   12e9c:	sub	r1, r1, #48	; 0x30
   12ea0:	uxtb	r1, r1
   12ea4:	cmp	r1, #9
   12ea8:	bhi	1277c <__assert_fail@plt+0x16ec>
   12eac:	cmp	r9, sl
   12eb0:	movcc	r1, #48	; 0x30
   12eb4:	strbcc	r1, [r6, r9]
   12eb8:	add	r1, r0, #2
   12ebc:	add	r9, r0, #3
   12ec0:	cmp	r1, sl
   12ec4:	movcc	r2, #48	; 0x30
   12ec8:	strbcc	r2, [r6, r1]
   12ecc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12ed0:	cmp	r0, #0
   12ed4:	bne	12788 <__assert_fail@plt+0x16f8>
   12ed8:	b	12a60 <__assert_fail@plt+0x19d0>
   12edc:	mov	r0, #48	; 0x30
   12ee0:	mov	r8, #1
   12ee4:	mov	r4, #0
   12ee8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12eec:	cmp	r1, #0
   12ef0:	bne	12a9c <__assert_fail@plt+0x1a0c>
   12ef4:	cmp	r8, #0
   12ef8:	beq	12a18 <__assert_fail@plt+0x1988>
   12efc:	b	12808 <__assert_fail@plt+0x1778>
   12f00:	mov	r4, #0
   12f04:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f08:	b	12f44 <__assert_fail@plt+0x1eb4>
   12f0c:	ldr	r1, [sp, #84]	; 0x54
   12f10:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f14:	mov	r4, #0
   12f18:	cmp	r6, r1
   12f1c:	bcs	12f44 <__assert_fail@plt+0x1eb4>
   12f20:	ldrb	r0, [ip, r6]
   12f24:	cmp	r0, #0
   12f28:	beq	12f44 <__assert_fail@plt+0x1eb4>
   12f2c:	ldr	r0, [sp, #64]	; 0x40
   12f30:	add	r0, r0, #1
   12f34:	add	r6, r0, r7
   12f38:	str	r0, [sp, #64]	; 0x40
   12f3c:	cmp	r6, r1
   12f40:	bcc	12f20 <__assert_fail@plt+0x1e90>
   12f44:	ldr	r6, [sp, #64]	; 0x40
   12f48:	b	12f50 <__assert_fail@plt+0x1ec0>
   12f4c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f50:	mov	r1, r6
   12f54:	ldr	r6, [sp, #76]	; 0x4c
   12f58:	ldr	sl, [sp, #56]	; 0x38
   12f5c:	ldr	r0, [sp, #44]	; 0x2c
   12f60:	cmp	r1, #1
   12f64:	orr	r2, r4, r0
   12f68:	mov	r0, r1
   12f6c:	bhi	12f8c <__assert_fail@plt+0x1efc>
   12f70:	tst	r2, #1
   12f74:	beq	12f8c <__assert_fail@plt+0x1efc>
   12f78:	ldr	lr, [sp, #84]	; 0x54
   12f7c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12f80:	cmp	r0, #0
   12f84:	bne	12788 <__assert_fail@plt+0x16f8>
   12f88:	b	12a60 <__assert_fail@plt+0x19d0>
   12f8c:	str	r2, [sp, #64]	; 0x40
   12f90:	add	r0, r0, r7
   12f94:	add	r1, r7, #1
   12f98:	ldr	lr, [sp, #84]	; 0x54
   12f9c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12fa0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12fa4:	mov	r3, #0
   12fa8:	str	r0, [sp, #56]	; 0x38
   12fac:	ldr	r0, [sp, #64]	; 0x40
   12fb0:	tst	r0, #1
   12fb4:	bne	1309c <__assert_fail@plt+0x200c>
   12fb8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12fbc:	tst	r0, #1
   12fc0:	bne	1323c <__assert_fail@plt+0x21ac>
   12fc4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12fc8:	cmp	r7, #2
   12fcc:	movwne	r3, #1
   12fd0:	orr	r3, r3, r2
   12fd4:	tst	r3, #1
   12fd8:	bne	13010 <__assert_fail@plt+0x1f80>
   12fdc:	cmp	r9, sl
   12fe0:	add	r3, r9, #1
   12fe4:	movcc	r2, #39	; 0x27
   12fe8:	strbcc	r2, [r6, r9]
   12fec:	cmp	r3, sl
   12ff0:	movcc	r2, #36	; 0x24
   12ff4:	strbcc	r2, [r6, r3]
   12ff8:	add	r3, r9, #2
   12ffc:	add	r9, r9, #3
   13000:	cmp	r3, sl
   13004:	movcc	r2, #39	; 0x27
   13008:	strbcc	r2, [r6, r3]
   1300c:	mov	r2, #1
   13010:	cmp	r9, sl
   13014:	mov	r0, r2
   13018:	movcc	r3, #92	; 0x5c
   1301c:	strbcc	r3, [r6, r9]
   13020:	add	r3, r9, #1
   13024:	cmp	r3, sl
   13028:	andcc	r7, r5, #192	; 0xc0
   1302c:	movcc	r2, #48	; 0x30
   13030:	orrcc	r7, r2, r7, lsr #6
   13034:	strbcc	r7, [r6, r3]
   13038:	add	r3, r9, #2
   1303c:	add	r9, r9, #3
   13040:	cmp	r3, sl
   13044:	lsrcc	r7, r5, #3
   13048:	movcc	r2, #6
   1304c:	bficc	r7, r2, #3, #29
   13050:	mov	r2, #6
   13054:	strbcc	r7, [r6, r3]
   13058:	bfi	r5, r2, #3, #29
   1305c:	mov	r3, #1
   13060:	mov	r2, r0
   13064:	ldr	r0, [sp, #56]	; 0x38
   13068:	and	r8, r3, #1
   1306c:	cmp	r0, r1
   13070:	bhi	130d0 <__assert_fail@plt+0x2040>
   13074:	b	13110 <__assert_fail@plt+0x2080>
   13078:	cmp	r9, sl
   1307c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13080:	strbcc	r5, [r6, r9]
   13084:	add	r9, r9, #1
   13088:	ldrb	r5, [ip, r1]
   1308c:	add	r1, r1, #1
   13090:	ldr	r0, [sp, #64]	; 0x40
   13094:	tst	r0, #1
   13098:	beq	12fb8 <__assert_fail@plt+0x1f28>
   1309c:	ldr	r7, [fp, #-56]	; 0xffffffc8
   130a0:	tst	r7, #1
   130a4:	beq	130b8 <__assert_fail@plt+0x2028>
   130a8:	cmp	r9, sl
   130ac:	movcc	r7, #92	; 0x5c
   130b0:	strbcc	r7, [r6, r9]
   130b4:	add	r9, r9, #1
   130b8:	mov	r7, #0
   130bc:	str	r7, [fp, #-56]	; 0xffffffc8
   130c0:	ldr	r0, [sp, #56]	; 0x38
   130c4:	and	r8, r3, #1
   130c8:	cmp	r0, r1
   130cc:	bls	13110 <__assert_fail@plt+0x2080>
   130d0:	cmp	r8, #0
   130d4:	mvn	r7, r2
   130d8:	movwne	r8, #1
   130dc:	orr	r7, r7, r8
   130e0:	tst	r7, #1
   130e4:	bne	13078 <__assert_fail@plt+0x1fe8>
   130e8:	cmp	r9, sl
   130ec:	movcc	r7, #39	; 0x27
   130f0:	strbcc	r7, [r6, r9]
   130f4:	add	r7, r9, #1
   130f8:	add	r9, r9, #2
   130fc:	cmp	r7, sl
   13100:	movcc	r2, #39	; 0x27
   13104:	strbcc	r2, [r6, r7]
   13108:	mov	r2, #0
   1310c:	b	13078 <__assert_fail@plt+0x1fe8>
   13110:	cmp	r8, #0
   13114:	sub	r7, r1, #1
   13118:	mov	r0, r5
   1311c:	str	r2, [fp, #-48]	; 0xffffffd0
   13120:	movwne	r8, #1
   13124:	cmp	r8, #0
   13128:	beq	12a18 <__assert_fail@plt+0x1988>
   1312c:	b	12808 <__assert_fail@plt+0x1778>
   13130:	mov	lr, r7
   13134:	b	1313c <__assert_fail@plt+0x20ac>
   13138:	mvn	lr, #0
   1313c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13140:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13144:	eor	r0, r7, #2
   13148:	orr	r0, r0, r9
   1314c:	clz	r0, r0
   13150:	lsr	r0, r0, #5
   13154:	tst	r1, r0
   13158:	bne	13258 <__assert_fail@plt+0x21c8>
   1315c:	mov	r0, r1
   13160:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13164:	cmp	r7, #2
   13168:	movwne	r1, #1
   1316c:	orr	r0, r0, r1
   13170:	tst	r0, #1
   13174:	ldreq	r0, [sp, #52]	; 0x34
   13178:	streq	lr, [sp, #84]	; 0x54
   1317c:	eoreq	r0, r0, #1
   13180:	tsteq	r0, #1
   13184:	bne	1331c <__assert_fail@plt+0x228c>
   13188:	tst	r4, #1
   1318c:	bne	132d8 <__assert_fail@plt+0x2248>
   13190:	ldr	r6, [sp, #48]	; 0x30
   13194:	mov	r8, #0
   13198:	cmp	r6, #0
   1319c:	beq	13314 <__assert_fail@plt+0x2284>
   131a0:	ldr	r0, [sp, #80]	; 0x50
   131a4:	mov	r1, #0
   131a8:	cmp	sl, #0
   131ac:	mov	r4, #0
   131b0:	str	r1, [fp, #-72]	; 0xffffffb8
   131b4:	beq	120a8 <__assert_fail@plt+0x1018>
   131b8:	b	1331c <__assert_fail@plt+0x228c>
   131bc:	ldrb	r1, [r0, #3]
   131c0:	cmp	r1, #56	; 0x38
   131c4:	ldrbeq	r1, [r0, #4]
   131c8:	cmpeq	r1, #48	; 0x30
   131cc:	bne	122a0 <__assert_fail@plt+0x1210>
   131d0:	ldrb	r1, [r0, #5]
   131d4:	cmp	r1, #51	; 0x33
   131d8:	ldrbeq	r1, [r0, #6]
   131dc:	cmpeq	r1, #48	; 0x30
   131e0:	bne	122a0 <__assert_fail@plt+0x1210>
   131e4:	ldrb	r0, [r0, #7]
   131e8:	cmp	r0, #0
   131ec:	movw	r0, #25120	; 0x6220
   131f0:	movt	r0, #1
   131f4:	str	r0, [sp, #68]	; 0x44
   131f8:	bne	122a0 <__assert_fail@plt+0x1210>
   131fc:	b	122bc <__assert_fail@plt+0x122c>
   13200:	ldrb	r1, [r0, #4]
   13204:	cmp	r1, #48	; 0x30
   13208:	ldrbeq	r1, [r0, #5]
   1320c:	cmpeq	r1, #51	; 0x33
   13210:	bne	12384 <__assert_fail@plt+0x12f4>
   13214:	ldrb	r1, [r0, #6]
   13218:	cmp	r1, #48	; 0x30
   1321c:	ldrbeq	r0, [r0, #7]
   13220:	cmpeq	r0, #0
   13224:	bne	12384 <__assert_fail@plt+0x12f4>
   13228:	movw	r0, #25124	; 0x6224
   1322c:	movt	r0, #1
   13230:	str	r0, [sp, #72]	; 0x48
   13234:	b	123a4 <__assert_fail@plt+0x1314>
   13238:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1323c:	ldr	r2, [sp, #80]	; 0x50
   13240:	b	13278 <__assert_fail@plt+0x21e8>
   13244:	ldr	ip, [fp, #-84]	; 0xffffffac
   13248:	mov	r2, #1
   1324c:	mov	lr, r4
   13250:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13254:	b	13278 <__assert_fail@plt+0x21e8>
   13258:	ldr	r2, [sp, #80]	; 0x50
   1325c:	mov	r7, #2
   13260:	b	13278 <__assert_fail@plt+0x21e8>
   13264:	ldr	r6, [sp, #76]	; 0x4c
   13268:	ldr	ip, [fp, #-84]	; 0xffffffac
   1326c:	ldr	lr, [sp, #84]	; 0x54
   13270:	ldr	r2, [sp, #80]	; 0x50
   13274:	mov	r7, #2
   13278:	mov	r0, #0
   1327c:	ldr	r1, [fp, #12]
   13280:	tst	r2, #1
   13284:	mov	r2, r7
   13288:	mov	r3, lr
   1328c:	str	r0, [sp, #8]
   13290:	ldr	r0, [sp, #68]	; 0x44
   13294:	movwne	r2, #4
   13298:	cmp	r7, #2
   1329c:	movne	r2, r7
   132a0:	str	r2, [sp]
   132a4:	mov	r2, ip
   132a8:	bic	r1, r1, #2
   132ac:	str	r0, [sp, #12]
   132b0:	ldr	r0, [sp, #72]	; 0x48
   132b4:	str	r1, [sp, #4]
   132b8:	mov	r1, sl
   132bc:	str	r0, [sp, #16]
   132c0:	mov	r0, r6
   132c4:	bl	1202c <__assert_fail@plt+0xf9c>
   132c8:	mov	r9, r0
   132cc:	mov	r0, r9
   132d0:	sub	sp, fp, #28
   132d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132d8:	mov	r0, #5
   132dc:	ldr	r1, [sp, #48]	; 0x30
   132e0:	ldr	r2, [fp, #-84]	; 0xffffffac
   132e4:	ldr	r3, [sp, #84]	; 0x54
   132e8:	str	r0, [sp]
   132ec:	ldr	r0, [fp, #12]
   132f0:	str	r0, [sp, #4]
   132f4:	ldr	r0, [fp, #16]
   132f8:	str	r0, [sp, #8]
   132fc:	ldr	r0, [sp, #68]	; 0x44
   13300:	str	r0, [sp, #12]
   13304:	ldr	r0, [sp, #72]	; 0x48
   13308:	str	r0, [sp, #16]
   1330c:	ldr	r0, [sp, #76]	; 0x4c
   13310:	b	132c4 <__assert_fail@plt+0x2234>
   13314:	mov	r0, #0
   13318:	str	r0, [fp, #-72]	; 0xffffffb8
   1331c:	ldr	r1, [sp, #92]	; 0x5c
   13320:	cmp	r1, #0
   13324:	beq	13364 <__assert_fail@plt+0x22d4>
   13328:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1332c:	ldr	r2, [sp, #76]	; 0x4c
   13330:	tst	r0, #1
   13334:	bne	13368 <__assert_fail@plt+0x22d8>
   13338:	ldrb	r0, [r1]
   1333c:	cmp	r0, #0
   13340:	beq	13368 <__assert_fail@plt+0x22d8>
   13344:	add	r1, r1, #1
   13348:	cmp	r9, sl
   1334c:	strbcc	r0, [r2, r9]
   13350:	add	r9, r9, #1
   13354:	ldrb	r0, [r1], #1
   13358:	cmp	r0, #0
   1335c:	bne	13348 <__assert_fail@plt+0x22b8>
   13360:	b	13368 <__assert_fail@plt+0x22d8>
   13364:	ldr	r2, [sp, #76]	; 0x4c
   13368:	cmp	r9, sl
   1336c:	movcc	r0, #0
   13370:	strbcc	r0, [r2, r9]
   13374:	mov	r0, r9
   13378:	sub	sp, fp, #28
   1337c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13380:	mov	r2, #1
   13384:	b	13250 <__assert_fail@plt+0x21c0>
   13388:	ldr	r2, [sp, #80]	; 0x50
   1338c:	mov	r7, #5
   13390:	b	13278 <__assert_fail@plt+0x21e8>
   13394:	bl	11084 <abort@plt>
   13398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1339c:	add	fp, sp, #28
   133a0:	sub	sp, sp, #28
   133a4:	movw	r5, #29040	; 0x7170
   133a8:	cmp	r2, #0
   133ac:	mov	r4, r1
   133b0:	mov	r7, r0
   133b4:	str	r0, [sp, #20]
   133b8:	movt	r5, #2
   133bc:	movne	r5, r2
   133c0:	bl	10fb8 <__errno_location@plt>
   133c4:	mov	sl, r0
   133c8:	ldm	r5, {r0, r1}
   133cc:	ldr	r2, [r5, #40]	; 0x28
   133d0:	ldr	r3, [r5, #44]	; 0x2c
   133d4:	add	r9, r5, #8
   133d8:	ldr	r6, [sl]
   133dc:	orr	r8, r1, #1
   133e0:	mov	r1, #0
   133e4:	str	r6, [sp, #24]
   133e8:	stm	sp, {r0, r8, r9}
   133ec:	str	r2, [sp, #12]
   133f0:	str	r3, [sp, #16]
   133f4:	mov	r0, #0
   133f8:	mov	r2, r7
   133fc:	mov	r3, r4
   13400:	mov	r6, r4
   13404:	bl	1202c <__assert_fail@plt+0xf9c>
   13408:	add	r7, r0, #1
   1340c:	mov	r0, r7
   13410:	bl	14474 <__assert_fail@plt+0x33e4>
   13414:	mov	r4, r0
   13418:	ldr	r0, [r5]
   1341c:	ldr	r2, [r5, #44]	; 0x2c
   13420:	ldr	r1, [r5, #40]	; 0x28
   13424:	mov	r3, r6
   13428:	stm	sp, {r0, r8, r9}
   1342c:	str	r2, [sp, #16]
   13430:	str	r1, [sp, #12]
   13434:	mov	r0, r4
   13438:	mov	r1, r7
   1343c:	ldr	r2, [sp, #20]
   13440:	bl	1202c <__assert_fail@plt+0xf9c>
   13444:	ldr	r0, [sp, #24]
   13448:	str	r0, [sl]
   1344c:	mov	r0, r4
   13450:	sub	sp, fp, #28
   13454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1345c:	add	fp, sp, #28
   13460:	sub	sp, sp, #36	; 0x24
   13464:	movw	r8, #29040	; 0x7170
   13468:	cmp	r3, #0
   1346c:	mov	r4, r2
   13470:	str	r2, [sp, #24]
   13474:	mov	r5, r1
   13478:	mov	r6, r0
   1347c:	str	r0, [sp, #20]
   13480:	movt	r8, #2
   13484:	movne	r8, r3
   13488:	bl	10fb8 <__errno_location@plt>
   1348c:	str	r0, [sp, #28]
   13490:	cmp	r4, #0
   13494:	add	sl, r8, #8
   13498:	ldm	r8, {r3, r9}
   1349c:	ldr	r7, [r0]
   134a0:	ldr	r1, [r8, #40]	; 0x28
   134a4:	ldr	r2, [r8, #44]	; 0x2c
   134a8:	mov	r0, #0
   134ac:	orreq	r9, r9, #1
   134b0:	str	r7, [sp, #32]
   134b4:	mov	r7, r5
   134b8:	stm	sp, {r3, r9, sl}
   134bc:	str	r1, [sp, #12]
   134c0:	str	r2, [sp, #16]
   134c4:	mov	r1, #0
   134c8:	mov	r2, r6
   134cc:	mov	r3, r5
   134d0:	bl	1202c <__assert_fail@plt+0xf9c>
   134d4:	add	r4, r0, #1
   134d8:	mov	r5, r0
   134dc:	mov	r0, r4
   134e0:	bl	14474 <__assert_fail@plt+0x33e4>
   134e4:	mov	r6, r0
   134e8:	ldr	r0, [r8]
   134ec:	ldr	r2, [r8, #44]	; 0x2c
   134f0:	ldr	r1, [r8, #40]	; 0x28
   134f4:	mov	r3, r7
   134f8:	stm	sp, {r0, r9, sl}
   134fc:	str	r2, [sp, #16]
   13500:	str	r1, [sp, #12]
   13504:	mov	r0, r6
   13508:	mov	r1, r4
   1350c:	ldr	r2, [sp, #20]
   13510:	bl	1202c <__assert_fail@plt+0xf9c>
   13514:	ldr	r0, [sp, #24]
   13518:	ldr	r1, [sp, #32]
   1351c:	ldr	r2, [sp, #28]
   13520:	cmp	r0, #0
   13524:	str	r1, [r2]
   13528:	strne	r5, [r0]
   1352c:	mov	r0, r6
   13530:	sub	sp, fp, #28
   13534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13538:	push	{r4, r5, r6, r7, fp, lr}
   1353c:	add	fp, sp, #16
   13540:	movw	r4, #28960	; 0x7120
   13544:	movt	r4, #2
   13548:	ldrd	r6, [r4]
   1354c:	cmp	r7, #2
   13550:	blt	1357c <__assert_fail@plt+0x24ec>
   13554:	add	r5, r6, #12
   13558:	mov	r7, #0
   1355c:	ldr	r0, [r5, r7, lsl #3]
   13560:	bl	158f4 <__assert_fail@plt+0x4864>
   13564:	ldr	r1, [r4, #4]
   13568:	add	r2, r7, #2
   1356c:	add	r0, r7, #1
   13570:	mov	r7, r0
   13574:	cmp	r2, r1
   13578:	blt	1355c <__assert_fail@plt+0x24cc>
   1357c:	ldr	r0, [r6, #4]
   13580:	movw	r5, #29088	; 0x71a0
   13584:	movt	r5, #2
   13588:	cmp	r0, r5
   1358c:	beq	135a0 <__assert_fail@plt+0x2510>
   13590:	bl	158f4 <__assert_fail@plt+0x4864>
   13594:	mov	r0, #256	; 0x100
   13598:	str	r0, [r4, #8]
   1359c:	str	r5, [r4, #12]
   135a0:	add	r5, r4, #8
   135a4:	cmp	r6, r5
   135a8:	beq	135b8 <__assert_fail@plt+0x2528>
   135ac:	mov	r0, r6
   135b0:	bl	158f4 <__assert_fail@plt+0x4864>
   135b4:	str	r5, [r4]
   135b8:	mov	r0, #1
   135bc:	str	r0, [r4, #4]
   135c0:	pop	{r4, r5, r6, r7, fp, pc}
   135c4:	movw	r3, #29040	; 0x7170
   135c8:	mvn	r2, #0
   135cc:	movt	r3, #2
   135d0:	b	135d4 <__assert_fail@plt+0x2544>
   135d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135d8:	add	fp, sp, #28
   135dc:	sub	sp, sp, #44	; 0x2c
   135e0:	mov	r7, r3
   135e4:	str	r2, [sp, #36]	; 0x24
   135e8:	str	r1, [sp, #32]
   135ec:	mov	r5, r0
   135f0:	bl	10fb8 <__errno_location@plt>
   135f4:	cmp	r5, #0
   135f8:	blt	1375c <__assert_fail@plt+0x26cc>
   135fc:	cmn	r5, #-2147483647	; 0x80000001
   13600:	beq	1375c <__assert_fail@plt+0x26cc>
   13604:	movw	r8, #28960	; 0x7120
   13608:	mov	r4, r0
   1360c:	movt	r8, #2
   13610:	ldr	r6, [r8]
   13614:	ldr	r1, [r8, #4]
   13618:	ldr	r0, [r0]
   1361c:	str	r4, [sp, #28]
   13620:	cmp	r1, r5
   13624:	str	r0, [sp, #24]
   13628:	ble	13634 <__assert_fail@plt+0x25a4>
   1362c:	mov	sl, r6
   13630:	b	13698 <__assert_fail@plt+0x2608>
   13634:	mov	r0, #8
   13638:	add	r9, r8, #8
   1363c:	add	r2, r5, #1
   13640:	str	r1, [fp, #-32]	; 0xffffffe0
   13644:	mvn	r3, #-2147483648	; 0x80000000
   13648:	str	r0, [sp]
   1364c:	subs	r0, r6, r9
   13650:	sub	r2, r2, r1
   13654:	sub	r1, fp, #32
   13658:	movne	r0, r6
   1365c:	bl	14674 <__assert_fail@plt+0x35e4>
   13660:	str	r0, [r8]
   13664:	cmp	r6, r9
   13668:	mov	sl, r0
   1366c:	ldrdeq	r0, [r8, #8]
   13670:	stmeq	sl, {r0, r1}
   13674:	ldr	r1, [r8, #4]
   13678:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1367c:	add	r0, sl, r1, lsl #3
   13680:	sub	r1, r2, r1
   13684:	lsl	r2, r1, #3
   13688:	mov	r1, #0
   1368c:	bl	10fd0 <memset@plt>
   13690:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13694:	str	r0, [r8, #4]
   13698:	mov	r9, sl
   1369c:	ldr	r6, [r9, r5, lsl #3]!
   136a0:	ldr	r4, [r9, #4]!
   136a4:	ldm	r7, {r0, r1}
   136a8:	ldr	r2, [r7, #40]	; 0x28
   136ac:	ldr	r3, [r7, #44]	; 0x2c
   136b0:	orr	r8, r1, #1
   136b4:	add	r1, r7, #8
   136b8:	stm	sp, {r0, r8}
   136bc:	add	r0, sp, #8
   136c0:	str	r1, [sp, #20]
   136c4:	stm	r0, {r1, r2, r3}
   136c8:	mov	r0, r4
   136cc:	mov	r1, r6
   136d0:	ldr	r2, [sp, #32]
   136d4:	ldr	r3, [sp, #36]	; 0x24
   136d8:	bl	1202c <__assert_fail@plt+0xf9c>
   136dc:	cmp	r6, r0
   136e0:	bhi	13744 <__assert_fail@plt+0x26b4>
   136e4:	add	r6, r0, #1
   136e8:	movw	r0, #29088	; 0x71a0
   136ec:	movt	r0, #2
   136f0:	str	r6, [sl, r5, lsl #3]
   136f4:	cmp	r4, r0
   136f8:	beq	13704 <__assert_fail@plt+0x2674>
   136fc:	mov	r0, r4
   13700:	bl	158f4 <__assert_fail@plt+0x4864>
   13704:	mov	r0, r6
   13708:	bl	14474 <__assert_fail@plt+0x33e4>
   1370c:	str	r0, [r9]
   13710:	mov	r4, r0
   13714:	add	r3, sp, #8
   13718:	ldr	r0, [r7]
   1371c:	ldr	r1, [r7, #40]	; 0x28
   13720:	ldr	r2, [r7, #44]	; 0x2c
   13724:	stm	sp, {r0, r8}
   13728:	ldr	r0, [sp, #20]
   1372c:	stm	r3, {r0, r1, r2}
   13730:	mov	r0, r4
   13734:	mov	r1, r6
   13738:	ldr	r2, [sp, #32]
   1373c:	ldr	r3, [sp, #36]	; 0x24
   13740:	bl	1202c <__assert_fail@plt+0xf9c>
   13744:	ldr	r1, [sp, #24]
   13748:	ldr	r0, [sp, #28]
   1374c:	str	r1, [r0]
   13750:	mov	r0, r4
   13754:	sub	sp, fp, #28
   13758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1375c:	bl	11084 <abort@plt>
   13760:	movw	r3, #29040	; 0x7170
   13764:	movt	r3, #2
   13768:	b	135d4 <__assert_fail@plt+0x2544>
   1376c:	movw	r3, #29040	; 0x7170
   13770:	mov	r1, r0
   13774:	mov	r0, #0
   13778:	mvn	r2, #0
   1377c:	movt	r3, #2
   13780:	b	135d4 <__assert_fail@plt+0x2544>
   13784:	movw	r3, #29040	; 0x7170
   13788:	mov	r2, r1
   1378c:	mov	r1, r0
   13790:	mov	r0, #0
   13794:	movt	r3, #2
   13798:	b	135d4 <__assert_fail@plt+0x2544>
   1379c:	push	{fp, lr}
   137a0:	mov	fp, sp
   137a4:	sub	sp, sp, #48	; 0x30
   137a8:	vmov.i32	q8, #0	; 0x00000000
   137ac:	mov	ip, #32
   137b0:	mov	r3, sp
   137b4:	mov	lr, r2
   137b8:	cmp	r1, #10
   137bc:	add	r2, r3, #16
   137c0:	vst1.64	{d16-d17}, [r3], ip
   137c4:	vst1.64	{d16-d17}, [r3]
   137c8:	vst1.64	{d16-d17}, [r2]
   137cc:	beq	137ec <__assert_fail@plt+0x275c>
   137d0:	str	r1, [sp]
   137d4:	mov	r3, sp
   137d8:	mov	r1, lr
   137dc:	mvn	r2, #0
   137e0:	bl	135d4 <__assert_fail@plt+0x2544>
   137e4:	mov	sp, fp
   137e8:	pop	{fp, pc}
   137ec:	bl	11084 <abort@plt>
   137f0:	push	{r4, sl, fp, lr}
   137f4:	add	fp, sp, #8
   137f8:	sub	sp, sp, #48	; 0x30
   137fc:	mov	ip, r3
   13800:	mov	r3, sp
   13804:	vmov.i32	q8, #0	; 0x00000000
   13808:	mov	lr, #32
   1380c:	cmp	r1, #10
   13810:	add	r4, r3, #16
   13814:	vst1.64	{d16-d17}, [r3], lr
   13818:	vst1.64	{d16-d17}, [r3]
   1381c:	vst1.64	{d16-d17}, [r4]
   13820:	beq	13840 <__assert_fail@plt+0x27b0>
   13824:	str	r1, [sp]
   13828:	mov	r1, r2
   1382c:	mov	r3, sp
   13830:	mov	r2, ip
   13834:	bl	135d4 <__assert_fail@plt+0x2544>
   13838:	sub	sp, fp, #8
   1383c:	pop	{r4, sl, fp, pc}
   13840:	bl	11084 <abort@plt>
   13844:	push	{fp, lr}
   13848:	mov	fp, sp
   1384c:	sub	sp, sp, #48	; 0x30
   13850:	mov	r3, sp
   13854:	vmov.i32	q8, #0	; 0x00000000
   13858:	mov	ip, #32
   1385c:	cmp	r0, #10
   13860:	add	r2, r3, #16
   13864:	vst1.64	{d16-d17}, [r3], ip
   13868:	vst1.64	{d16-d17}, [r3]
   1386c:	vst1.64	{d16-d17}, [r2]
   13870:	beq	13890 <__assert_fail@plt+0x2800>
   13874:	str	r0, [sp]
   13878:	mov	r3, sp
   1387c:	mov	r0, #0
   13880:	mvn	r2, #0
   13884:	bl	135d4 <__assert_fail@plt+0x2544>
   13888:	mov	sp, fp
   1388c:	pop	{fp, pc}
   13890:	bl	11084 <abort@plt>
   13894:	push	{fp, lr}
   13898:	mov	fp, sp
   1389c:	sub	sp, sp, #48	; 0x30
   138a0:	mov	r3, sp
   138a4:	vmov.i32	q8, #0	; 0x00000000
   138a8:	mov	ip, #32
   138ac:	cmp	r0, #10
   138b0:	add	lr, r3, #16
   138b4:	vst1.64	{d16-d17}, [r3], ip
   138b8:	vst1.64	{d16-d17}, [r3]
   138bc:	vst1.64	{d16-d17}, [lr]
   138c0:	beq	138dc <__assert_fail@plt+0x284c>
   138c4:	str	r0, [sp]
   138c8:	mov	r3, sp
   138cc:	mov	r0, #0
   138d0:	bl	135d4 <__assert_fail@plt+0x2544>
   138d4:	mov	sp, fp
   138d8:	pop	{fp, pc}
   138dc:	bl	11084 <abort@plt>
   138e0:	push	{r4, sl, fp, lr}
   138e4:	add	fp, sp, #8
   138e8:	sub	sp, sp, #48	; 0x30
   138ec:	mov	lr, r0
   138f0:	movw	r0, #29040	; 0x7170
   138f4:	mov	r3, #32
   138f8:	mov	ip, r1
   138fc:	mov	r4, #1
   13900:	movt	r0, #2
   13904:	add	r1, r0, #16
   13908:	vld1.64	{d16-d17}, [r0], r3
   1390c:	mov	r3, sp
   13910:	vld1.64	{d18-d19}, [r1]
   13914:	add	r1, r3, #16
   13918:	vld1.64	{d20-d21}, [r0]
   1391c:	add	r0, r3, #32
   13920:	vst1.64	{d18-d19}, [r1]
   13924:	mov	r1, r3
   13928:	vst1.64	{d20-d21}, [r0]
   1392c:	mov	r0, #28
   13930:	and	r0, r0, r2, lsr #3
   13934:	and	r2, r2, #31
   13938:	vst1.64	{d16-d17}, [r1], r0
   1393c:	ldr	r0, [r1, #8]
   13940:	bic	r4, r4, r0, lsr r2
   13944:	eor	r0, r0, r4, lsl r2
   13948:	mov	r2, ip
   1394c:	str	r0, [r1, #8]
   13950:	mov	r0, #0
   13954:	mov	r1, lr
   13958:	bl	135d4 <__assert_fail@plt+0x2544>
   1395c:	sub	sp, fp, #8
   13960:	pop	{r4, sl, fp, pc}
   13964:	push	{fp, lr}
   13968:	mov	fp, sp
   1396c:	sub	sp, sp, #48	; 0x30
   13970:	mov	ip, r0
   13974:	movw	r0, #29040	; 0x7170
   13978:	mov	r3, #32
   1397c:	movt	r0, #2
   13980:	add	r2, r0, #16
   13984:	vld1.64	{d16-d17}, [r0], r3
   13988:	mov	r3, sp
   1398c:	vld1.64	{d18-d19}, [r2]
   13990:	add	r2, r3, #16
   13994:	vld1.64	{d20-d21}, [r0]
   13998:	add	r0, r3, #32
   1399c:	vst1.64	{d18-d19}, [r2]
   139a0:	mov	r2, r3
   139a4:	vst1.64	{d20-d21}, [r0]
   139a8:	mov	r0, #28
   139ac:	and	r0, r0, r1, lsr #3
   139b0:	and	r1, r1, #31
   139b4:	vst1.64	{d16-d17}, [r2], r0
   139b8:	mov	r0, #1
   139bc:	ldr	lr, [r2, #8]
   139c0:	bic	r0, r0, lr, lsr r1
   139c4:	eor	r0, lr, r0, lsl r1
   139c8:	mov	r1, ip
   139cc:	str	r0, [r2, #8]
   139d0:	mov	r0, #0
   139d4:	mvn	r2, #0
   139d8:	bl	135d4 <__assert_fail@plt+0x2544>
   139dc:	mov	sp, fp
   139e0:	pop	{fp, pc}
   139e4:	push	{fp, lr}
   139e8:	mov	fp, sp
   139ec:	sub	sp, sp, #48	; 0x30
   139f0:	movw	r2, #29040	; 0x7170
   139f4:	mov	r3, #32
   139f8:	mov	r1, r0
   139fc:	movt	r2, #2
   13a00:	add	r0, r2, #16
   13a04:	vld1.64	{d16-d17}, [r2], r3
   13a08:	mov	r3, sp
   13a0c:	vld1.64	{d18-d19}, [r0]
   13a10:	add	r0, r3, #16
   13a14:	vld1.64	{d20-d21}, [r2]
   13a18:	mov	r2, r3
   13a1c:	vst1.64	{d18-d19}, [r0]
   13a20:	add	r0, r3, #32
   13a24:	vst1.64	{d20-d21}, [r0]
   13a28:	mov	r0, #12
   13a2c:	vst1.64	{d16-d17}, [r2], r0
   13a30:	ldr	r0, [r2]
   13a34:	orr	r0, r0, #67108864	; 0x4000000
   13a38:	str	r0, [r2]
   13a3c:	mov	r0, #0
   13a40:	mvn	r2, #0
   13a44:	bl	135d4 <__assert_fail@plt+0x2544>
   13a48:	mov	sp, fp
   13a4c:	pop	{fp, pc}
   13a50:	push	{fp, lr}
   13a54:	mov	fp, sp
   13a58:	sub	sp, sp, #48	; 0x30
   13a5c:	mov	ip, r1
   13a60:	mov	r1, r0
   13a64:	movw	r0, #29040	; 0x7170
   13a68:	mov	r3, #32
   13a6c:	movt	r0, #2
   13a70:	add	r2, r0, #16
   13a74:	vld1.64	{d16-d17}, [r0], r3
   13a78:	mov	r3, sp
   13a7c:	vld1.64	{d18-d19}, [r2]
   13a80:	add	r2, r3, #16
   13a84:	vld1.64	{d20-d21}, [r0]
   13a88:	add	r0, r3, #32
   13a8c:	vst1.64	{d18-d19}, [r2]
   13a90:	mov	r2, r3
   13a94:	vst1.64	{d20-d21}, [r0]
   13a98:	mov	r0, #12
   13a9c:	vst1.64	{d16-d17}, [r2], r0
   13aa0:	ldr	r0, [r2]
   13aa4:	orr	r0, r0, #67108864	; 0x4000000
   13aa8:	str	r0, [r2]
   13aac:	mov	r0, #0
   13ab0:	mov	r2, ip
   13ab4:	bl	135d4 <__assert_fail@plt+0x2544>
   13ab8:	mov	sp, fp
   13abc:	pop	{fp, pc}
   13ac0:	push	{r4, sl, fp, lr}
   13ac4:	add	fp, sp, #8
   13ac8:	sub	sp, sp, #96	; 0x60
   13acc:	mov	ip, r2
   13ad0:	mov	r2, sp
   13ad4:	vmov.i32	q8, #0	; 0x00000000
   13ad8:	mov	r4, #28
   13adc:	cmp	r1, #10
   13ae0:	mov	r3, r2
   13ae4:	add	lr, r2, #16
   13ae8:	vst1.64	{d16-d17}, [r3], r4
   13aec:	vst1.64	{d16-d17}, [lr]
   13af0:	vst1.32	{d16-d17}, [r3]
   13af4:	beq	13b44 <__assert_fail@plt+0x2ab4>
   13af8:	vld1.64	{d16-d17}, [r2], r4
   13afc:	vld1.64	{d18-d19}, [lr]
   13b00:	add	r3, sp, #48	; 0x30
   13b04:	add	r4, r3, #4
   13b08:	vld1.32	{d20-d21}, [r2]
   13b0c:	add	r2, r3, #20
   13b10:	vst1.32	{d16-d17}, [r4]
   13b14:	vst1.32	{d18-d19}, [r2]
   13b18:	add	r2, r3, #32
   13b1c:	vst1.32	{d20-d21}, [r2]
   13b20:	str	r1, [sp, #48]	; 0x30
   13b24:	mvn	r2, #0
   13b28:	ldr	r1, [sp, #60]	; 0x3c
   13b2c:	orr	r1, r1, #67108864	; 0x4000000
   13b30:	str	r1, [sp, #60]	; 0x3c
   13b34:	mov	r1, ip
   13b38:	bl	135d4 <__assert_fail@plt+0x2544>
   13b3c:	sub	sp, fp, #8
   13b40:	pop	{r4, sl, fp, pc}
   13b44:	bl	11084 <abort@plt>
   13b48:	push	{r4, r5, fp, lr}
   13b4c:	add	fp, sp, #8
   13b50:	sub	sp, sp, #48	; 0x30
   13b54:	mov	ip, r3
   13b58:	movw	r3, #29040	; 0x7170
   13b5c:	mov	lr, #32
   13b60:	cmp	r1, #0
   13b64:	mov	r5, sp
   13b68:	movt	r3, #2
   13b6c:	cmpne	r2, #0
   13b70:	add	r4, r3, #16
   13b74:	vld1.64	{d16-d17}, [r3], lr
   13b78:	vld1.64	{d18-d19}, [r4]
   13b7c:	add	r4, r5, #16
   13b80:	vld1.64	{d20-d21}, [r3]
   13b84:	vst1.64	{d16-d17}, [r5], lr
   13b88:	mov	r3, #10
   13b8c:	vst1.64	{d18-d19}, [r4]
   13b90:	vst1.64	{d20-d21}, [r5]
   13b94:	str	r3, [sp]
   13b98:	bne	13ba0 <__assert_fail@plt+0x2b10>
   13b9c:	bl	11084 <abort@plt>
   13ba0:	str	r2, [sp, #44]	; 0x2c
   13ba4:	str	r1, [sp, #40]	; 0x28
   13ba8:	mov	r3, sp
   13bac:	mov	r1, ip
   13bb0:	mvn	r2, #0
   13bb4:	bl	135d4 <__assert_fail@plt+0x2544>
   13bb8:	sub	sp, fp, #8
   13bbc:	pop	{r4, r5, fp, pc}
   13bc0:	push	{r4, r5, fp, lr}
   13bc4:	add	fp, sp, #8
   13bc8:	sub	sp, sp, #48	; 0x30
   13bcc:	mov	lr, r3
   13bd0:	movw	r3, #29040	; 0x7170
   13bd4:	mov	ip, #32
   13bd8:	cmp	r1, #0
   13bdc:	mov	r5, sp
   13be0:	movt	r3, #2
   13be4:	cmpne	r2, #0
   13be8:	add	r4, r3, #16
   13bec:	vld1.64	{d16-d17}, [r3], ip
   13bf0:	vld1.64	{d18-d19}, [r4]
   13bf4:	add	r4, r5, #16
   13bf8:	vld1.64	{d20-d21}, [r3]
   13bfc:	vst1.64	{d16-d17}, [r5], ip
   13c00:	mov	r3, #10
   13c04:	vst1.64	{d18-d19}, [r4]
   13c08:	vst1.64	{d20-d21}, [r5]
   13c0c:	str	r3, [sp]
   13c10:	bne	13c18 <__assert_fail@plt+0x2b88>
   13c14:	bl	11084 <abort@plt>
   13c18:	ldr	ip, [fp, #8]
   13c1c:	str	r2, [sp, #44]	; 0x2c
   13c20:	str	r1, [sp, #40]	; 0x28
   13c24:	mov	r3, sp
   13c28:	mov	r1, lr
   13c2c:	mov	r2, ip
   13c30:	bl	135d4 <__assert_fail@plt+0x2544>
   13c34:	sub	sp, fp, #8
   13c38:	pop	{r4, r5, fp, pc}
   13c3c:	push	{r4, sl, fp, lr}
   13c40:	add	fp, sp, #8
   13c44:	sub	sp, sp, #48	; 0x30
   13c48:	mov	ip, r2
   13c4c:	movw	r2, #29040	; 0x7170
   13c50:	mov	lr, #32
   13c54:	cmp	r0, #0
   13c58:	mov	r4, sp
   13c5c:	movt	r2, #2
   13c60:	cmpne	r1, #0
   13c64:	add	r3, r2, #16
   13c68:	vld1.64	{d16-d17}, [r2], lr
   13c6c:	vld1.64	{d18-d19}, [r3]
   13c70:	add	r3, r4, #16
   13c74:	vld1.64	{d20-d21}, [r2]
   13c78:	vst1.64	{d16-d17}, [r4], lr
   13c7c:	mov	r2, #10
   13c80:	vst1.64	{d18-d19}, [r3]
   13c84:	vst1.64	{d20-d21}, [r4]
   13c88:	str	r2, [sp]
   13c8c:	bne	13c94 <__assert_fail@plt+0x2c04>
   13c90:	bl	11084 <abort@plt>
   13c94:	str	r1, [sp, #44]	; 0x2c
   13c98:	str	r0, [sp, #40]	; 0x28
   13c9c:	mov	r3, sp
   13ca0:	mov	r0, #0
   13ca4:	mov	r1, ip
   13ca8:	mvn	r2, #0
   13cac:	bl	135d4 <__assert_fail@plt+0x2544>
   13cb0:	sub	sp, fp, #8
   13cb4:	pop	{r4, sl, fp, pc}
   13cb8:	push	{r4, r5, fp, lr}
   13cbc:	add	fp, sp, #8
   13cc0:	sub	sp, sp, #48	; 0x30
   13cc4:	mov	lr, r2
   13cc8:	movw	r2, #29040	; 0x7170
   13ccc:	mov	ip, r3
   13cd0:	mov	r3, #32
   13cd4:	cmp	r0, #0
   13cd8:	mov	r5, sp
   13cdc:	movt	r2, #2
   13ce0:	cmpne	r1, #0
   13ce4:	add	r4, r2, #16
   13ce8:	vld1.64	{d16-d17}, [r2], r3
   13cec:	vld1.64	{d18-d19}, [r4]
   13cf0:	add	r4, r5, #16
   13cf4:	vld1.64	{d20-d21}, [r2]
   13cf8:	vst1.64	{d16-d17}, [r5], r3
   13cfc:	mov	r2, #10
   13d00:	vst1.64	{d18-d19}, [r4]
   13d04:	vst1.64	{d20-d21}, [r5]
   13d08:	str	r2, [sp]
   13d0c:	bne	13d14 <__assert_fail@plt+0x2c84>
   13d10:	bl	11084 <abort@plt>
   13d14:	str	r1, [sp, #44]	; 0x2c
   13d18:	str	r0, [sp, #40]	; 0x28
   13d1c:	mov	r3, sp
   13d20:	mov	r0, #0
   13d24:	mov	r1, lr
   13d28:	mov	r2, ip
   13d2c:	bl	135d4 <__assert_fail@plt+0x2544>
   13d30:	sub	sp, fp, #8
   13d34:	pop	{r4, r5, fp, pc}
   13d38:	movw	r3, #28912	; 0x70f0
   13d3c:	movt	r3, #2
   13d40:	b	135d4 <__assert_fail@plt+0x2544>
   13d44:	movw	r3, #28912	; 0x70f0
   13d48:	mov	r2, r1
   13d4c:	mov	r1, r0
   13d50:	mov	r0, #0
   13d54:	movt	r3, #2
   13d58:	b	135d4 <__assert_fail@plt+0x2544>
   13d5c:	movw	r3, #28912	; 0x70f0
   13d60:	mvn	r2, #0
   13d64:	movt	r3, #2
   13d68:	b	135d4 <__assert_fail@plt+0x2544>
   13d6c:	movw	r3, #28912	; 0x70f0
   13d70:	mov	r1, r0
   13d74:	mov	r0, #0
   13d78:	mvn	r2, #0
   13d7c:	movt	r3, #2
   13d80:	b	135d4 <__assert_fail@plt+0x2544>
   13d84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13d88:	add	fp, sp, #24
   13d8c:	sub	sp, sp, #32
   13d90:	ldr	r6, [fp, #12]
   13d94:	ldr	r7, [fp, #8]
   13d98:	mov	r4, r2
   13d9c:	mov	r8, r0
   13da0:	cmp	r1, #0
   13da4:	beq	13dcc <__assert_fail@plt+0x2d3c>
   13da8:	movw	r2, #25212	; 0x627c
   13dac:	mov	r5, r1
   13db0:	str	r3, [sp, #4]
   13db4:	str	r4, [sp]
   13db8:	mov	r0, r8
   13dbc:	mov	r1, #1
   13dc0:	movt	r2, #1
   13dc4:	mov	r3, r5
   13dc8:	b	13de4 <__assert_fail@plt+0x2d54>
   13dcc:	movw	r2, #25224	; 0x6288
   13dd0:	str	r3, [sp]
   13dd4:	mov	r0, r8
   13dd8:	mov	r1, #1
   13ddc:	mov	r3, r4
   13de0:	movt	r2, #1
   13de4:	bl	10ff4 <__fprintf_chk@plt>
   13de8:	movw	r1, #25231	; 0x628f
   13dec:	mov	r0, #0
   13df0:	mov	r2, #5
   13df4:	movt	r1, #1
   13df8:	bl	10ed4 <dcgettext@plt>
   13dfc:	movw	r2, #25949	; 0x655d
   13e00:	mov	r3, r0
   13e04:	movw	r0, #2022	; 0x7e6
   13e08:	mov	r1, #1
   13e0c:	str	r0, [sp]
   13e10:	movt	r2, #1
   13e14:	mov	r0, r8
   13e18:	bl	10ff4 <__fprintf_chk@plt>
   13e1c:	movw	r4, #24699	; 0x607b
   13e20:	mov	r1, r8
   13e24:	movt	r4, #1
   13e28:	mov	r0, r4
   13e2c:	bl	10e38 <fputs_unlocked@plt>
   13e30:	movw	r1, #25235	; 0x6293
   13e34:	mov	r0, #0
   13e38:	mov	r2, #5
   13e3c:	movt	r1, #1
   13e40:	bl	10ed4 <dcgettext@plt>
   13e44:	movw	r3, #25406	; 0x633e
   13e48:	mov	r2, r0
   13e4c:	mov	r0, r8
   13e50:	mov	r1, #1
   13e54:	movt	r3, #1
   13e58:	bl	10ff4 <__fprintf_chk@plt>
   13e5c:	mov	r0, r4
   13e60:	mov	r1, r8
   13e64:	bl	10e38 <fputs_unlocked@plt>
   13e68:	cmp	r6, #9
   13e6c:	bhi	13ea8 <__assert_fail@plt+0x2e18>
   13e70:	add	r0, pc, #0
   13e74:	ldr	pc, [r0, r6, lsl #2]
   13e78:	andeq	r3, r1, r0, lsr #29
   13e7c:			; <UNDEFINED> instruction: 0x00013eb4
   13e80:	andeq	r3, r1, r4, ror #29
   13e84:	andeq	r3, r1, ip, lsl #30
   13e88:	andeq	r3, r1, r4, lsr pc
   13e8c:	andeq	r3, r1, ip, asr pc
   13e90:	andeq	r3, r1, r4, lsl #31
   13e94:			; <UNDEFINED> instruction: 0x00013fbc
   13e98:	andeq	r4, r1, r4, rrx
   13e9c:	andeq	r4, r1, ip
   13ea0:	sub	sp, fp, #24
   13ea4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ea8:	movw	r1, #25759	; 0x649f
   13eac:	movt	r1, #1
   13eb0:	b	14014 <__assert_fail@plt+0x2f84>
   13eb4:	movw	r1, #25440	; 0x6360
   13eb8:	mov	r0, #0
   13ebc:	mov	r2, #5
   13ec0:	movt	r1, #1
   13ec4:	bl	10ed4 <dcgettext@plt>
   13ec8:	ldr	r3, [r7]
   13ecc:	mov	r2, r0
   13ed0:	mov	r0, r8
   13ed4:	mov	r1, #1
   13ed8:	sub	sp, fp, #24
   13edc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ee0:	b	10ff4 <__fprintf_chk@plt>
   13ee4:	movw	r1, #25456	; 0x6370
   13ee8:	mov	r0, #0
   13eec:	mov	r2, #5
   13ef0:	movt	r1, #1
   13ef4:	bl	10ed4 <dcgettext@plt>
   13ef8:	mov	r2, r0
   13efc:	ldr	r3, [r7]
   13f00:	ldr	r0, [r7, #4]
   13f04:	str	r0, [sp]
   13f08:	b	13ff8 <__assert_fail@plt+0x2f68>
   13f0c:	movw	r1, #25479	; 0x6387
   13f10:	mov	r0, #0
   13f14:	mov	r2, #5
   13f18:	movt	r1, #1
   13f1c:	bl	10ed4 <dcgettext@plt>
   13f20:	ldr	r3, [r7]
   13f24:	mov	r2, r0
   13f28:	ldmib	r7, {r0, r1}
   13f2c:	stm	sp, {r0, r1}
   13f30:	b	13ff8 <__assert_fail@plt+0x2f68>
   13f34:	movw	r1, #25507	; 0x63a3
   13f38:	mov	r0, #0
   13f3c:	mov	r2, #5
   13f40:	movt	r1, #1
   13f44:	bl	10ed4 <dcgettext@plt>
   13f48:	ldr	r3, [r7]
   13f4c:	mov	r2, r0
   13f50:	ldmib	r7, {r0, r1, r7}
   13f54:	stm	sp, {r0, r1, r7}
   13f58:	b	13ff8 <__assert_fail@plt+0x2f68>
   13f5c:	movw	r1, #25539	; 0x63c3
   13f60:	mov	r0, #0
   13f64:	mov	r2, #5
   13f68:	movt	r1, #1
   13f6c:	bl	10ed4 <dcgettext@plt>
   13f70:	ldr	r3, [r7]
   13f74:	mov	r2, r0
   13f78:	ldmib	r7, {r0, r1, r6, r7}
   13f7c:	stm	sp, {r0, r1, r6, r7}
   13f80:	b	13ff8 <__assert_fail@plt+0x2f68>
   13f84:	movw	r1, #25575	; 0x63e7
   13f88:	mov	r0, #0
   13f8c:	mov	r2, #5
   13f90:	movt	r1, #1
   13f94:	bl	10ed4 <dcgettext@plt>
   13f98:	ldr	r3, [r7]
   13f9c:	mov	r2, r0
   13fa0:	ldmib	r7, {r0, r1, r6}
   13fa4:	ldr	r5, [r7, #16]
   13fa8:	ldr	r7, [r7, #20]
   13fac:	stm	sp, {r0, r1, r6}
   13fb0:	str	r5, [sp, #12]
   13fb4:	str	r7, [sp, #16]
   13fb8:	b	13ff8 <__assert_fail@plt+0x2f68>
   13fbc:	movw	r1, #25615	; 0x640f
   13fc0:	mov	r0, #0
   13fc4:	mov	r2, #5
   13fc8:	movt	r1, #1
   13fcc:	bl	10ed4 <dcgettext@plt>
   13fd0:	ldr	r3, [r7]
   13fd4:	mov	r2, r0
   13fd8:	ldmib	r7, {r0, r1, r6}
   13fdc:	ldr	r5, [r7, #16]
   13fe0:	ldr	r4, [r7, #20]
   13fe4:	ldr	r7, [r7, #24]
   13fe8:	stm	sp, {r0, r1, r6}
   13fec:	str	r5, [sp, #12]
   13ff0:	str	r4, [sp, #16]
   13ff4:	str	r7, [sp, #20]
   13ff8:	mov	r0, r8
   13ffc:	mov	r1, #1
   14000:	bl	10ff4 <__fprintf_chk@plt>
   14004:	sub	sp, fp, #24
   14008:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1400c:	movw	r1, #25707	; 0x646b
   14010:	movt	r1, #1
   14014:	mov	r0, #0
   14018:	mov	r2, #5
   1401c:	bl	10ed4 <dcgettext@plt>
   14020:	mov	ip, r0
   14024:	ldr	r3, [r7]
   14028:	ldr	r0, [r7, #4]
   1402c:	ldr	r1, [r7, #8]
   14030:	ldr	r6, [r7, #12]
   14034:	ldr	r5, [r7, #16]
   14038:	ldr	r4, [r7, #20]
   1403c:	ldr	r2, [r7, #24]
   14040:	ldr	lr, [r7, #28]
   14044:	ldr	r7, [r7, #32]
   14048:	stm	sp, {r0, r1, r6}
   1404c:	str	r5, [sp, #12]
   14050:	str	r4, [sp, #16]
   14054:	str	r2, [sp, #20]
   14058:	str	lr, [sp, #24]
   1405c:	str	r7, [sp, #28]
   14060:	b	140a8 <__assert_fail@plt+0x3018>
   14064:	movw	r1, #25659	; 0x643b
   14068:	mov	r0, #0
   1406c:	mov	r2, #5
   14070:	movt	r1, #1
   14074:	bl	10ed4 <dcgettext@plt>
   14078:	mov	ip, r0
   1407c:	ldr	r3, [r7]
   14080:	ldmib	r7, {r0, r1, r6}
   14084:	ldr	r5, [r7, #16]
   14088:	ldr	r4, [r7, #20]
   1408c:	ldr	r2, [r7, #24]
   14090:	ldr	r7, [r7, #28]
   14094:	stm	sp, {r0, r1, r6}
   14098:	str	r5, [sp, #12]
   1409c:	str	r4, [sp, #16]
   140a0:	str	r2, [sp, #20]
   140a4:	str	r7, [sp, #24]
   140a8:	mov	r0, r8
   140ac:	mov	r1, #1
   140b0:	mov	r2, ip
   140b4:	bl	10ff4 <__fprintf_chk@plt>
   140b8:	sub	sp, fp, #24
   140bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140c0:	push	{r4, sl, fp, lr}
   140c4:	add	fp, sp, #8
   140c8:	sub	sp, sp, #8
   140cc:	ldr	ip, [fp, #8]
   140d0:	mov	lr, #0
   140d4:	ldr	r4, [ip, lr, lsl #2]
   140d8:	add	lr, lr, #1
   140dc:	cmp	r4, #0
   140e0:	bne	140d4 <__assert_fail@plt+0x3044>
   140e4:	sub	r4, lr, #1
   140e8:	str	ip, [sp]
   140ec:	str	r4, [sp, #4]
   140f0:	bl	13d84 <__assert_fail@plt+0x2cf4>
   140f4:	sub	sp, fp, #8
   140f8:	pop	{r4, sl, fp, pc}
   140fc:	push	{fp, lr}
   14100:	mov	fp, sp
   14104:	sub	sp, sp, #48	; 0x30
   14108:	ldr	ip, [fp, #8]
   1410c:	ldr	lr, [ip]
   14110:	cmp	lr, #0
   14114:	str	lr, [sp, #8]
   14118:	beq	141b4 <__assert_fail@plt+0x3124>
   1411c:	ldr	lr, [ip, #4]
   14120:	cmp	lr, #0
   14124:	str	lr, [sp, #12]
   14128:	beq	141bc <__assert_fail@plt+0x312c>
   1412c:	ldr	lr, [ip, #8]
   14130:	cmp	lr, #0
   14134:	str	lr, [sp, #16]
   14138:	beq	141c4 <__assert_fail@plt+0x3134>
   1413c:	ldr	lr, [ip, #12]
   14140:	cmp	lr, #0
   14144:	str	lr, [sp, #20]
   14148:	beq	141cc <__assert_fail@plt+0x313c>
   1414c:	ldr	lr, [ip, #16]
   14150:	cmp	lr, #0
   14154:	str	lr, [sp, #24]
   14158:	beq	141d4 <__assert_fail@plt+0x3144>
   1415c:	ldr	lr, [ip, #20]
   14160:	cmp	lr, #0
   14164:	str	lr, [sp, #28]
   14168:	beq	141dc <__assert_fail@plt+0x314c>
   1416c:	ldr	lr, [ip, #24]
   14170:	cmp	lr, #0
   14174:	str	lr, [sp, #32]
   14178:	beq	141e4 <__assert_fail@plt+0x3154>
   1417c:	ldr	lr, [ip, #28]
   14180:	cmp	lr, #0
   14184:	str	lr, [sp, #36]	; 0x24
   14188:	beq	141ec <__assert_fail@plt+0x315c>
   1418c:	ldr	lr, [ip, #32]
   14190:	cmp	lr, #0
   14194:	str	lr, [sp, #40]	; 0x28
   14198:	beq	141f4 <__assert_fail@plt+0x3164>
   1419c:	ldr	lr, [ip, #36]	; 0x24
   141a0:	mov	ip, #10
   141a4:	cmp	lr, #0
   141a8:	str	lr, [sp, #44]	; 0x2c
   141ac:	movweq	ip, #9
   141b0:	b	141f8 <__assert_fail@plt+0x3168>
   141b4:	mov	ip, #0
   141b8:	b	141f8 <__assert_fail@plt+0x3168>
   141bc:	mov	ip, #1
   141c0:	b	141f8 <__assert_fail@plt+0x3168>
   141c4:	mov	ip, #2
   141c8:	b	141f8 <__assert_fail@plt+0x3168>
   141cc:	mov	ip, #3
   141d0:	b	141f8 <__assert_fail@plt+0x3168>
   141d4:	mov	ip, #4
   141d8:	b	141f8 <__assert_fail@plt+0x3168>
   141dc:	mov	ip, #5
   141e0:	b	141f8 <__assert_fail@plt+0x3168>
   141e4:	mov	ip, #6
   141e8:	b	141f8 <__assert_fail@plt+0x3168>
   141ec:	mov	ip, #7
   141f0:	b	141f8 <__assert_fail@plt+0x3168>
   141f4:	mov	ip, #8
   141f8:	add	lr, sp, #8
   141fc:	str	ip, [sp, #4]
   14200:	str	lr, [sp]
   14204:	bl	13d84 <__assert_fail@plt+0x2cf4>
   14208:	mov	sp, fp
   1420c:	pop	{fp, pc}
   14210:	push	{fp, lr}
   14214:	mov	fp, sp
   14218:	sub	sp, sp, #56	; 0x38
   1421c:	add	ip, fp, #8
   14220:	str	ip, [sp, #12]
   14224:	ldr	lr, [fp, #8]
   14228:	cmp	lr, #0
   1422c:	str	lr, [sp, #16]
   14230:	beq	142cc <__assert_fail@plt+0x323c>
   14234:	ldr	lr, [ip, #4]
   14238:	cmp	lr, #0
   1423c:	str	lr, [sp, #20]
   14240:	beq	142d4 <__assert_fail@plt+0x3244>
   14244:	ldr	lr, [ip, #8]
   14248:	cmp	lr, #0
   1424c:	str	lr, [sp, #24]
   14250:	beq	142dc <__assert_fail@plt+0x324c>
   14254:	ldr	lr, [ip, #12]
   14258:	cmp	lr, #0
   1425c:	str	lr, [sp, #28]
   14260:	beq	142e4 <__assert_fail@plt+0x3254>
   14264:	ldr	lr, [ip, #16]
   14268:	cmp	lr, #0
   1426c:	str	lr, [sp, #32]
   14270:	beq	142ec <__assert_fail@plt+0x325c>
   14274:	ldr	lr, [ip, #20]
   14278:	cmp	lr, #0
   1427c:	str	lr, [sp, #36]	; 0x24
   14280:	beq	142f4 <__assert_fail@plt+0x3264>
   14284:	ldr	lr, [ip, #24]
   14288:	cmp	lr, #0
   1428c:	str	lr, [sp, #40]	; 0x28
   14290:	beq	142fc <__assert_fail@plt+0x326c>
   14294:	ldr	lr, [ip, #28]
   14298:	cmp	lr, #0
   1429c:	str	lr, [sp, #44]	; 0x2c
   142a0:	beq	14304 <__assert_fail@plt+0x3274>
   142a4:	ldr	lr, [ip, #32]
   142a8:	cmp	lr, #0
   142ac:	str	lr, [sp, #48]	; 0x30
   142b0:	beq	1430c <__assert_fail@plt+0x327c>
   142b4:	ldr	lr, [ip, #36]	; 0x24
   142b8:	mov	ip, #10
   142bc:	cmp	lr, #0
   142c0:	str	lr, [sp, #52]	; 0x34
   142c4:	movweq	ip, #9
   142c8:	b	14310 <__assert_fail@plt+0x3280>
   142cc:	mov	ip, #0
   142d0:	b	14310 <__assert_fail@plt+0x3280>
   142d4:	mov	ip, #1
   142d8:	b	14310 <__assert_fail@plt+0x3280>
   142dc:	mov	ip, #2
   142e0:	b	14310 <__assert_fail@plt+0x3280>
   142e4:	mov	ip, #3
   142e8:	b	14310 <__assert_fail@plt+0x3280>
   142ec:	mov	ip, #4
   142f0:	b	14310 <__assert_fail@plt+0x3280>
   142f4:	mov	ip, #5
   142f8:	b	14310 <__assert_fail@plt+0x3280>
   142fc:	mov	ip, #6
   14300:	b	14310 <__assert_fail@plt+0x3280>
   14304:	mov	ip, #7
   14308:	b	14310 <__assert_fail@plt+0x3280>
   1430c:	mov	ip, #8
   14310:	add	lr, sp, #16
   14314:	str	ip, [sp, #4]
   14318:	str	lr, [sp]
   1431c:	bl	13d84 <__assert_fail@plt+0x2cf4>
   14320:	mov	sp, fp
   14324:	pop	{fp, pc}
   14328:	push	{fp, lr}
   1432c:	mov	fp, sp
   14330:	movw	r0, #29004	; 0x714c
   14334:	movt	r0, #2
   14338:	ldr	r1, [r0]
   1433c:	movw	r0, #24699	; 0x607b
   14340:	movt	r0, #1
   14344:	bl	10e38 <fputs_unlocked@plt>
   14348:	movw	r1, #25819	; 0x64db
   1434c:	mov	r0, #0
   14350:	mov	r2, #5
   14354:	movt	r1, #1
   14358:	bl	10ed4 <dcgettext@plt>
   1435c:	movw	r2, #25839	; 0x64ef
   14360:	mov	r1, r0
   14364:	mov	r0, #1
   14368:	movt	r2, #1
   1436c:	bl	10fdc <__printf_chk@plt>
   14370:	movw	r1, #25861	; 0x6505
   14374:	mov	r0, #0
   14378:	mov	r2, #5
   1437c:	movt	r1, #1
   14380:	bl	10ed4 <dcgettext@plt>
   14384:	movw	r2, #24229	; 0x5ea5
   14388:	movw	r3, #24508	; 0x5fbc
   1438c:	mov	r1, r0
   14390:	mov	r0, #1
   14394:	movt	r2, #1
   14398:	movt	r3, #1
   1439c:	bl	10fdc <__printf_chk@plt>
   143a0:	movw	r1, #25881	; 0x6519
   143a4:	mov	r0, #0
   143a8:	mov	r2, #5
   143ac:	movt	r1, #1
   143b0:	bl	10ed4 <dcgettext@plt>
   143b4:	movw	r2, #25920	; 0x6540
   143b8:	mov	r1, r0
   143bc:	mov	r0, #1
   143c0:	movt	r2, #1
   143c4:	pop	{fp, lr}
   143c8:	b	10fdc <__printf_chk@plt>
   143cc:	push	{r4, r5, r6, sl, fp, lr}
   143d0:	add	fp, sp, #16
   143d4:	mov	r4, r2
   143d8:	mov	r5, r1
   143dc:	mov	r6, r0
   143e0:	bl	159b4 <__assert_fail@plt+0x4924>
   143e4:	cmp	r0, #0
   143e8:	popne	{r4, r5, r6, sl, fp, pc}
   143ec:	cmp	r6, #0
   143f0:	beq	14404 <__assert_fail@plt+0x3374>
   143f4:	cmp	r5, #0
   143f8:	cmpne	r4, #0
   143fc:	bne	14404 <__assert_fail@plt+0x3374>
   14400:	pop	{r4, r5, r6, sl, fp, pc}
   14404:	bl	149a4 <__assert_fail@plt+0x3914>
   14408:	push	{r4, r5, r6, sl, fp, lr}
   1440c:	add	fp, sp, #16
   14410:	mov	r4, r2
   14414:	mov	r5, r1
   14418:	mov	r6, r0
   1441c:	bl	159b4 <__assert_fail@plt+0x4924>
   14420:	cmp	r0, #0
   14424:	popne	{r4, r5, r6, sl, fp, pc}
   14428:	cmp	r6, #0
   1442c:	beq	14440 <__assert_fail@plt+0x33b0>
   14430:	cmp	r5, #0
   14434:	cmpne	r4, #0
   14438:	bne	14440 <__assert_fail@plt+0x33b0>
   1443c:	pop	{r4, r5, r6, sl, fp, pc}
   14440:	bl	149a4 <__assert_fail@plt+0x3914>
   14444:	push	{fp, lr}
   14448:	mov	fp, sp
   1444c:	bl	157ec <__assert_fail@plt+0x475c>
   14450:	cmp	r0, #0
   14454:	popne	{fp, pc}
   14458:	bl	149a4 <__assert_fail@plt+0x3914>
   1445c:	push	{fp, lr}
   14460:	mov	fp, sp
   14464:	bl	157ec <__assert_fail@plt+0x475c>
   14468:	cmp	r0, #0
   1446c:	popne	{fp, pc}
   14470:	bl	149a4 <__assert_fail@plt+0x3914>
   14474:	push	{fp, lr}
   14478:	mov	fp, sp
   1447c:	bl	157ec <__assert_fail@plt+0x475c>
   14480:	cmp	r0, #0
   14484:	popne	{fp, pc}
   14488:	bl	149a4 <__assert_fail@plt+0x3914>
   1448c:	push	{r4, r5, fp, lr}
   14490:	add	fp, sp, #8
   14494:	mov	r4, r1
   14498:	mov	r5, r0
   1449c:	bl	1581c <__assert_fail@plt+0x478c>
   144a0:	cmp	r0, #0
   144a4:	popne	{r4, r5, fp, pc}
   144a8:	cmp	r5, #0
   144ac:	beq	144bc <__assert_fail@plt+0x342c>
   144b0:	cmp	r4, #0
   144b4:	bne	144bc <__assert_fail@plt+0x342c>
   144b8:	pop	{r4, r5, fp, pc}
   144bc:	bl	149a4 <__assert_fail@plt+0x3914>
   144c0:	push	{fp, lr}
   144c4:	mov	fp, sp
   144c8:	cmp	r1, #0
   144cc:	orreq	r1, r1, #1
   144d0:	bl	1581c <__assert_fail@plt+0x478c>
   144d4:	cmp	r0, #0
   144d8:	popne	{fp, pc}
   144dc:	bl	149a4 <__assert_fail@plt+0x3914>
   144e0:	push	{fp, lr}
   144e4:	mov	fp, sp
   144e8:	clz	r3, r2
   144ec:	lsr	ip, r3, #5
   144f0:	clz	r3, r1
   144f4:	lsr	r3, r3, #5
   144f8:	orrs	r3, r3, ip
   144fc:	movwne	r1, #1
   14500:	movwne	r2, #1
   14504:	bl	159b4 <__assert_fail@plt+0x4924>
   14508:	cmp	r0, #0
   1450c:	popne	{fp, pc}
   14510:	bl	149a4 <__assert_fail@plt+0x3914>
   14514:	push	{fp, lr}
   14518:	mov	fp, sp
   1451c:	mov	r2, r1
   14520:	mov	r1, r0
   14524:	mov	r0, #0
   14528:	bl	159b4 <__assert_fail@plt+0x4924>
   1452c:	cmp	r0, #0
   14530:	popne	{fp, pc}
   14534:	bl	149a4 <__assert_fail@plt+0x3914>
   14538:	push	{fp, lr}
   1453c:	mov	fp, sp
   14540:	mov	r2, r1
   14544:	mov	r1, r0
   14548:	clz	r0, r2
   1454c:	clz	r3, r1
   14550:	lsr	r0, r0, #5
   14554:	lsr	r3, r3, #5
   14558:	orrs	r0, r3, r0
   1455c:	movwne	r1, #1
   14560:	movwne	r2, #1
   14564:	mov	r0, #0
   14568:	bl	159b4 <__assert_fail@plt+0x4924>
   1456c:	cmp	r0, #0
   14570:	popne	{fp, pc}
   14574:	bl	149a4 <__assert_fail@plt+0x3914>
   14578:	push	{r4, r5, r6, sl, fp, lr}
   1457c:	add	fp, sp, #16
   14580:	ldr	r5, [r1]
   14584:	mov	r4, r1
   14588:	mov	r6, r0
   1458c:	cmp	r0, #0
   14590:	beq	145a8 <__assert_fail@plt+0x3518>
   14594:	mov	r0, #1
   14598:	add	r0, r0, r5, lsr #1
   1459c:	adds	r5, r5, r0
   145a0:	bcc	145b0 <__assert_fail@plt+0x3520>
   145a4:	b	145ec <__assert_fail@plt+0x355c>
   145a8:	cmp	r5, #0
   145ac:	movweq	r5, #64	; 0x40
   145b0:	mov	r0, r6
   145b4:	mov	r1, r5
   145b8:	mov	r2, #1
   145bc:	bl	159b4 <__assert_fail@plt+0x4924>
   145c0:	cmp	r5, #0
   145c4:	mov	r1, r5
   145c8:	movwne	r1, #1
   145cc:	cmp	r0, #0
   145d0:	bne	145e4 <__assert_fail@plt+0x3554>
   145d4:	clz	r2, r6
   145d8:	lsr	r2, r2, #5
   145dc:	orrs	r1, r2, r1
   145e0:	bne	145ec <__assert_fail@plt+0x355c>
   145e4:	str	r5, [r4]
   145e8:	pop	{r4, r5, r6, sl, fp, pc}
   145ec:	bl	149a4 <__assert_fail@plt+0x3914>
   145f0:	push	{r4, r5, r6, r7, fp, lr}
   145f4:	add	fp, sp, #16
   145f8:	ldr	r5, [r1]
   145fc:	mov	r6, r2
   14600:	mov	r4, r1
   14604:	mov	r7, r0
   14608:	cmp	r0, #0
   1460c:	beq	14624 <__assert_fail@plt+0x3594>
   14610:	mov	r0, #1
   14614:	add	r0, r0, r5, lsr #1
   14618:	adds	r5, r5, r0
   1461c:	bcc	1463c <__assert_fail@plt+0x35ac>
   14620:	b	14670 <__assert_fail@plt+0x35e0>
   14624:	cmp	r5, #0
   14628:	bne	1463c <__assert_fail@plt+0x35ac>
   1462c:	mov	r0, #64	; 0x40
   14630:	cmp	r6, #64	; 0x40
   14634:	udiv	r5, r0, r6
   14638:	addhi	r5, r5, #1
   1463c:	mov	r0, r7
   14640:	mov	r1, r5
   14644:	mov	r2, r6
   14648:	bl	159b4 <__assert_fail@plt+0x4924>
   1464c:	cmp	r0, #0
   14650:	bne	14668 <__assert_fail@plt+0x35d8>
   14654:	cmp	r7, #0
   14658:	beq	14670 <__assert_fail@plt+0x35e0>
   1465c:	cmp	r6, #0
   14660:	cmpne	r5, #0
   14664:	bne	14670 <__assert_fail@plt+0x35e0>
   14668:	str	r5, [r4]
   1466c:	pop	{r4, r5, r6, r7, fp, pc}
   14670:	bl	149a4 <__assert_fail@plt+0x3914>
   14674:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14678:	add	fp, sp, #24
   1467c:	mov	r8, r1
   14680:	ldr	r1, [r1]
   14684:	mov	r5, r0
   14688:	add	r0, r1, r1, asr #1
   1468c:	cmp	r0, r1
   14690:	mvnvs	r0, #-2147483648	; 0x80000000
   14694:	cmp	r0, r3
   14698:	mov	r7, r0
   1469c:	movgt	r7, r3
   146a0:	cmn	r3, #1
   146a4:	movle	r7, r0
   146a8:	ldr	r0, [fp, #8]
   146ac:	cmn	r0, #1
   146b0:	ble	146d8 <__assert_fail@plt+0x3648>
   146b4:	cmp	r0, #0
   146b8:	beq	1472c <__assert_fail@plt+0x369c>
   146bc:	cmn	r7, #1
   146c0:	ble	14700 <__assert_fail@plt+0x3670>
   146c4:	mvn	r4, #-2147483648	; 0x80000000
   146c8:	udiv	r6, r4, r0
   146cc:	cmp	r6, r7
   146d0:	bge	1472c <__assert_fail@plt+0x369c>
   146d4:	b	1473c <__assert_fail@plt+0x36ac>
   146d8:	cmn	r7, #1
   146dc:	ble	1471c <__assert_fail@plt+0x368c>
   146e0:	cmn	r0, #1
   146e4:	beq	1472c <__assert_fail@plt+0x369c>
   146e8:	mov	r6, #-2147483648	; 0x80000000
   146ec:	mvn	r4, #-2147483648	; 0x80000000
   146f0:	sdiv	r6, r6, r0
   146f4:	cmp	r6, r7
   146f8:	bge	1472c <__assert_fail@plt+0x369c>
   146fc:	b	1473c <__assert_fail@plt+0x36ac>
   14700:	beq	1472c <__assert_fail@plt+0x369c>
   14704:	mov	r6, #-2147483648	; 0x80000000
   14708:	mvn	r4, #-2147483648	; 0x80000000
   1470c:	sdiv	r6, r6, r7
   14710:	cmp	r6, r0
   14714:	bge	1472c <__assert_fail@plt+0x369c>
   14718:	b	1473c <__assert_fail@plt+0x36ac>
   1471c:	mvn	r4, #-2147483648	; 0x80000000
   14720:	sdiv	r6, r4, r0
   14724:	cmp	r7, r6
   14728:	blt	1473c <__assert_fail@plt+0x36ac>
   1472c:	mul	r6, r7, r0
   14730:	mov	r4, #64	; 0x40
   14734:	cmp	r6, #63	; 0x3f
   14738:	bgt	14744 <__assert_fail@plt+0x36b4>
   1473c:	sdiv	r7, r4, r0
   14740:	mul	r6, r7, r0
   14744:	cmp	r5, #0
   14748:	moveq	r4, #0
   1474c:	streq	r4, [r8]
   14750:	sub	r4, r7, r1
   14754:	cmp	r4, r2
   14758:	bge	14804 <__assert_fail@plt+0x3774>
   1475c:	add	r7, r1, r2
   14760:	mov	r6, #0
   14764:	mov	r2, #0
   14768:	cmp	r7, r3
   1476c:	movwgt	r6, #1
   14770:	cmn	r3, #1
   14774:	movwgt	r2, #1
   14778:	cmp	r7, r1
   1477c:	bvs	14838 <__assert_fail@plt+0x37a8>
   14780:	ands	r1, r2, r6
   14784:	bne	14838 <__assert_fail@plt+0x37a8>
   14788:	cmn	r0, #1
   1478c:	ble	147b4 <__assert_fail@plt+0x3724>
   14790:	cmp	r0, #0
   14794:	beq	14800 <__assert_fail@plt+0x3770>
   14798:	cmn	r7, #1
   1479c:	ble	147d8 <__assert_fail@plt+0x3748>
   147a0:	mvn	r1, #-2147483648	; 0x80000000
   147a4:	udiv	r1, r1, r0
   147a8:	cmp	r1, r7
   147ac:	bge	14800 <__assert_fail@plt+0x3770>
   147b0:	b	14838 <__assert_fail@plt+0x37a8>
   147b4:	cmn	r7, #1
   147b8:	ble	147f0 <__assert_fail@plt+0x3760>
   147bc:	cmn	r0, #1
   147c0:	beq	14800 <__assert_fail@plt+0x3770>
   147c4:	mov	r1, #-2147483648	; 0x80000000
   147c8:	sdiv	r1, r1, r0
   147cc:	cmp	r1, r7
   147d0:	bge	14800 <__assert_fail@plt+0x3770>
   147d4:	b	14838 <__assert_fail@plt+0x37a8>
   147d8:	beq	14800 <__assert_fail@plt+0x3770>
   147dc:	mov	r1, #-2147483648	; 0x80000000
   147e0:	sdiv	r1, r1, r7
   147e4:	cmp	r1, r0
   147e8:	bge	14800 <__assert_fail@plt+0x3770>
   147ec:	b	14838 <__assert_fail@plt+0x37a8>
   147f0:	mvn	r1, #-2147483648	; 0x80000000
   147f4:	sdiv	r1, r1, r0
   147f8:	cmp	r7, r1
   147fc:	blt	14838 <__assert_fail@plt+0x37a8>
   14800:	mul	r6, r7, r0
   14804:	mov	r0, r5
   14808:	mov	r1, r6
   1480c:	bl	1581c <__assert_fail@plt+0x478c>
   14810:	cmp	r6, #0
   14814:	movwne	r6, #1
   14818:	cmp	r0, #0
   1481c:	bne	14830 <__assert_fail@plt+0x37a0>
   14820:	clz	r1, r5
   14824:	lsr	r1, r1, #5
   14828:	orrs	r1, r1, r6
   1482c:	bne	14838 <__assert_fail@plt+0x37a8>
   14830:	str	r7, [r8]
   14834:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14838:	bl	149a4 <__assert_fail@plt+0x3914>
   1483c:	push	{fp, lr}
   14840:	mov	fp, sp
   14844:	mov	r1, #1
   14848:	bl	15798 <__assert_fail@plt+0x4708>
   1484c:	cmp	r0, #0
   14850:	popne	{fp, pc}
   14854:	bl	149a4 <__assert_fail@plt+0x3914>
   14858:	push	{fp, lr}
   1485c:	mov	fp, sp
   14860:	bl	15798 <__assert_fail@plt+0x4708>
   14864:	cmp	r0, #0
   14868:	popne	{fp, pc}
   1486c:	bl	149a4 <__assert_fail@plt+0x3914>
   14870:	push	{fp, lr}
   14874:	mov	fp, sp
   14878:	mov	r1, #1
   1487c:	bl	15798 <__assert_fail@plt+0x4708>
   14880:	cmp	r0, #0
   14884:	popne	{fp, pc}
   14888:	bl	149a4 <__assert_fail@plt+0x3914>
   1488c:	push	{fp, lr}
   14890:	mov	fp, sp
   14894:	bl	15798 <__assert_fail@plt+0x4708>
   14898:	cmp	r0, #0
   1489c:	popne	{fp, pc}
   148a0:	bl	149a4 <__assert_fail@plt+0x3914>
   148a4:	push	{r4, r5, r6, sl, fp, lr}
   148a8:	add	fp, sp, #16
   148ac:	mov	r5, r0
   148b0:	mov	r0, r1
   148b4:	mov	r4, r1
   148b8:	bl	157ec <__assert_fail@plt+0x475c>
   148bc:	cmp	r0, #0
   148c0:	beq	148dc <__assert_fail@plt+0x384c>
   148c4:	mov	r1, r5
   148c8:	mov	r2, r4
   148cc:	mov	r6, r0
   148d0:	bl	10e98 <memcpy@plt>
   148d4:	mov	r0, r6
   148d8:	pop	{r4, r5, r6, sl, fp, pc}
   148dc:	bl	149a4 <__assert_fail@plt+0x3914>
   148e0:	push	{r4, r5, r6, sl, fp, lr}
   148e4:	add	fp, sp, #16
   148e8:	mov	r5, r0
   148ec:	mov	r0, r1
   148f0:	mov	r4, r1
   148f4:	bl	157ec <__assert_fail@plt+0x475c>
   148f8:	cmp	r0, #0
   148fc:	beq	14918 <__assert_fail@plt+0x3888>
   14900:	mov	r1, r5
   14904:	mov	r2, r4
   14908:	mov	r6, r0
   1490c:	bl	10e98 <memcpy@plt>
   14910:	mov	r0, r6
   14914:	pop	{r4, r5, r6, sl, fp, pc}
   14918:	bl	149a4 <__assert_fail@plt+0x3914>
   1491c:	push	{r4, r5, r6, sl, fp, lr}
   14920:	add	fp, sp, #16
   14924:	mov	r5, r0
   14928:	add	r0, r1, #1
   1492c:	mov	r4, r1
   14930:	bl	157ec <__assert_fail@plt+0x475c>
   14934:	cmp	r0, #0
   14938:	beq	14960 <__assert_fail@plt+0x38d0>
   1493c:	mov	r6, r0
   14940:	mov	r0, #0
   14944:	mov	r1, r5
   14948:	mov	r2, r4
   1494c:	strb	r0, [r6, r4]
   14950:	mov	r0, r6
   14954:	bl	10e98 <memcpy@plt>
   14958:	mov	r0, r6
   1495c:	pop	{r4, r5, r6, sl, fp, pc}
   14960:	bl	149a4 <__assert_fail@plt+0x3914>
   14964:	push	{r4, r5, r6, sl, fp, lr}
   14968:	add	fp, sp, #16
   1496c:	mov	r4, r0
   14970:	bl	10fa0 <strlen@plt>
   14974:	add	r5, r0, #1
   14978:	mov	r0, r5
   1497c:	bl	157ec <__assert_fail@plt+0x475c>
   14980:	cmp	r0, #0
   14984:	beq	149a0 <__assert_fail@plt+0x3910>
   14988:	mov	r1, r4
   1498c:	mov	r2, r5
   14990:	mov	r6, r0
   14994:	bl	10e98 <memcpy@plt>
   14998:	mov	r0, r6
   1499c:	pop	{r4, r5, r6, sl, fp, pc}
   149a0:	bl	149a4 <__assert_fail@plt+0x3914>
   149a4:	push	{fp, lr}
   149a8:	mov	fp, sp
   149ac:	movw	r0, #28908	; 0x70ec
   149b0:	movw	r1, #25996	; 0x658c
   149b4:	mov	r2, #5
   149b8:	movt	r0, #2
   149bc:	movt	r1, #1
   149c0:	ldr	r4, [r0]
   149c4:	mov	r0, #0
   149c8:	bl	10ed4 <dcgettext@plt>
   149cc:	movw	r2, #24959	; 0x617f
   149d0:	mov	r3, r0
   149d4:	mov	r0, r4
   149d8:	mov	r1, #0
   149dc:	movt	r2, #1
   149e0:	bl	10f40 <error@plt>
   149e4:	bl	11084 <abort@plt>
   149e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   149ec:	add	fp, sp, #24
   149f0:	sub	sp, sp, #16
   149f4:	mov	r8, r0
   149f8:	ldr	r0, [fp, #16]
   149fc:	mov	r5, r3
   14a00:	mov	r6, r2
   14a04:	mov	r2, r1
   14a08:	add	r3, sp, #8
   14a0c:	mov	r1, #0
   14a10:	str	r0, [sp]
   14a14:	mov	r0, r8
   14a18:	bl	14ae4 <__assert_fail@plt+0x3a54>
   14a1c:	cmp	r0, #0
   14a20:	bne	14aac <__assert_fail@plt+0x3a1c>
   14a24:	ldr	r4, [sp, #8]
   14a28:	ldr	r7, [sp, #12]
   14a2c:	subs	r0, r4, r6
   14a30:	sbcs	r0, r7, r5
   14a34:	bcc	14a58 <__assert_fail@plt+0x39c8>
   14a38:	ldr	r1, [fp, #8]
   14a3c:	ldr	r0, [fp, #12]
   14a40:	subs	r1, r1, r4
   14a44:	sbcs	r0, r0, r7
   14a48:	movcs	r0, r4
   14a4c:	movcs	r1, r7
   14a50:	subcs	sp, fp, #24
   14a54:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a58:	bl	10fb8 <__errno_location@plt>
   14a5c:	subs	r1, r4, #1073741824	; 0x40000000
   14a60:	sbcs	r1, r7, #0
   14a64:	movcc	r1, #34	; 0x22
   14a68:	movcs	r1, #75	; 0x4b
   14a6c:	str	r1, [r0]
   14a70:	ldr	r6, [r0]
   14a74:	ldr	r4, [fp, #24]
   14a78:	ldr	r5, [fp, #20]
   14a7c:	mov	r0, r8
   14a80:	bl	13d6c <__assert_fail@plt+0x2cdc>
   14a84:	subs	r1, r6, #22
   14a88:	movw	r2, #24955	; 0x617b
   14a8c:	str	r0, [sp]
   14a90:	mov	r3, r5
   14a94:	movne	r1, r6
   14a98:	cmp	r4, #0
   14a9c:	movt	r2, #1
   14aa0:	movweq	r4, #1
   14aa4:	mov	r0, r4
   14aa8:	bl	10f40 <error@plt>
   14aac:	cmp	r0, #1
   14ab0:	beq	14ac8 <__assert_fail@plt+0x3a38>
   14ab4:	cmp	r0, #3
   14ab8:	bne	14ad4 <__assert_fail@plt+0x3a44>
   14abc:	bl	10fb8 <__errno_location@plt>
   14ac0:	mov	r1, #0
   14ac4:	b	14a6c <__assert_fail@plt+0x39dc>
   14ac8:	bl	10fb8 <__errno_location@plt>
   14acc:	mov	r1, #75	; 0x4b
   14ad0:	b	14a6c <__assert_fail@plt+0x39dc>
   14ad4:	bl	10fb8 <__errno_location@plt>
   14ad8:	b	14a70 <__assert_fail@plt+0x39e0>
   14adc:	mov	r1, #10
   14ae0:	b	149e8 <__assert_fail@plt+0x3958>
   14ae4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ae8:	add	fp, sp, #28
   14aec:	sub	sp, sp, #44	; 0x2c
   14af0:	cmp	r2, #37	; 0x25
   14af4:	bcs	15778 <__assert_fail@plt+0x46e8>
   14af8:	ldr	sl, [fp, #8]
   14afc:	mov	r6, r2
   14b00:	mov	r7, r1
   14b04:	mov	r4, r0
   14b08:	str	r3, [sp, #36]	; 0x24
   14b0c:	bl	10fb8 <__errno_location@plt>
   14b10:	mov	r5, r0
   14b14:	mov	r0, #0
   14b18:	str	r0, [r5]
   14b1c:	bl	10f88 <__ctype_b_loc@plt>
   14b20:	ldr	r1, [r0]
   14b24:	mov	r2, r4
   14b28:	ldrb	r0, [r2], #1
   14b2c:	add	r3, r1, r0, lsl #1
   14b30:	ldrb	r3, [r3, #1]
   14b34:	tst	r3, #32
   14b38:	bne	14b28 <__assert_fail@plt+0x3a98>
   14b3c:	sub	r9, fp, #32
   14b40:	cmp	r7, #0
   14b44:	mov	r8, #4
   14b48:	movne	r9, r7
   14b4c:	cmp	r0, #45	; 0x2d
   14b50:	beq	14f10 <__assert_fail@plt+0x3e80>
   14b54:	mov	r0, r4
   14b58:	mov	r1, r9
   14b5c:	mov	r2, r6
   14b60:	mov	r3, #0
   14b64:	bl	10ea4 <__strtoull_internal@plt>
   14b68:	mov	r7, r1
   14b6c:	ldr	r1, [r9]
   14b70:	cmp	r1, r4
   14b74:	beq	14bac <__assert_fail@plt+0x3b1c>
   14b78:	mov	r6, r0
   14b7c:	ldr	r0, [r5]
   14b80:	cmp	r0, #0
   14b84:	beq	14ec8 <__assert_fail@plt+0x3e38>
   14b88:	cmp	r0, #34	; 0x22
   14b8c:	bne	14f10 <__assert_fail@plt+0x3e80>
   14b90:	mov	r8, #1
   14b94:	cmp	sl, #0
   14b98:	beq	15764 <__assert_fail@plt+0x46d4>
   14b9c:	ldrb	r4, [r1]
   14ba0:	cmp	r4, #0
   14ba4:	bne	14bf0 <__assert_fail@plt+0x3b60>
   14ba8:	b	15764 <__assert_fail@plt+0x46d4>
   14bac:	cmp	sl, #0
   14bb0:	beq	14f10 <__assert_fail@plt+0x3e80>
   14bb4:	mov	r5, r1
   14bb8:	ldrb	r1, [r4]
   14bbc:	cmp	r1, #0
   14bc0:	beq	14f10 <__assert_fail@plt+0x3e80>
   14bc4:	mov	r0, sl
   14bc8:	bl	10fac <strchr@plt>
   14bcc:	cmp	r0, #0
   14bd0:	beq	14f10 <__assert_fail@plt+0x3e80>
   14bd4:	mov	r1, r5
   14bd8:	mov	r8, #0
   14bdc:	mov	r6, #1
   14be0:	mov	r7, #0
   14be4:	ldrb	r4, [r1]
   14be8:	cmp	r4, #0
   14bec:	beq	15764 <__assert_fail@plt+0x46d4>
   14bf0:	str	r1, [sp, #32]
   14bf4:	mov	r0, sl
   14bf8:	mov	r1, r4
   14bfc:	bl	10fac <strchr@plt>
   14c00:	cmp	r0, #0
   14c04:	beq	14f04 <__assert_fail@plt+0x3e74>
   14c08:	sub	r0, r4, #69	; 0x45
   14c0c:	mov	r1, #1
   14c10:	mov	r3, #0
   14c14:	mov	r5, #1024	; 0x400
   14c18:	cmp	r0, #47	; 0x2f
   14c1c:	str	r1, [sp, #28]
   14c20:	bhi	14d24 <__assert_fail@plt+0x3c94>
   14c24:	add	r1, pc, #0
   14c28:	ldr	pc, [r1, r0, lsl #2]
   14c2c:	andeq	r4, r1, ip, ror #25
   14c30:	andeq	r4, r1, r4, lsr #26
   14c34:	andeq	r4, r1, ip, ror #25
   14c38:	andeq	r4, r1, r4, lsr #26
   14c3c:	andeq	r4, r1, r4, lsr #26
   14c40:	andeq	r4, r1, r4, lsr #26
   14c44:	andeq	r4, r1, ip, ror #25
   14c48:	andeq	r4, r1, r4, lsr #26
   14c4c:	andeq	r4, r1, ip, ror #25
   14c50:	andeq	r4, r1, r4, lsr #26
   14c54:	andeq	r4, r1, r4, lsr #26
   14c58:	andeq	r4, r1, ip, ror #25
   14c5c:	andeq	r4, r1, r4, lsr #26
   14c60:	andeq	r4, r1, r4, lsr #26
   14c64:	andeq	r4, r1, r4, lsr #26
   14c68:	andeq	r4, r1, ip, ror #25
   14c6c:	andeq	r4, r1, r4, lsr #26
   14c70:	andeq	r4, r1, r4, lsr #26
   14c74:	andeq	r4, r1, r4, lsr #26
   14c78:	andeq	r4, r1, r4, lsr #26
   14c7c:	andeq	r4, r1, ip, ror #25
   14c80:	andeq	r4, r1, ip, ror #25
   14c84:	andeq	r4, r1, r4, lsr #26
   14c88:	andeq	r4, r1, r4, lsr #26
   14c8c:	andeq	r4, r1, r4, lsr #26
   14c90:	andeq	r4, r1, r4, lsr #26
   14c94:	andeq	r4, r1, r4, lsr #26
   14c98:	andeq	r4, r1, r4, lsr #26
   14c9c:	andeq	r4, r1, r4, lsr #26
   14ca0:	andeq	r4, r1, r4, lsr #26
   14ca4:	andeq	r4, r1, r4, lsr #26
   14ca8:	andeq	r4, r1, r4, lsr #26
   14cac:	andeq	r4, r1, r4, lsr #26
   14cb0:	andeq	r4, r1, r4, lsr #26
   14cb4:	andeq	r4, r1, ip, ror #25
   14cb8:	andeq	r4, r1, r4, lsr #26
   14cbc:	andeq	r4, r1, r4, lsr #26
   14cc0:	andeq	r4, r1, r4, lsr #26
   14cc4:	andeq	r4, r1, ip, ror #25
   14cc8:	andeq	r4, r1, r4, lsr #26
   14ccc:	andeq	r4, r1, ip, ror #25
   14cd0:	andeq	r4, r1, r4, lsr #26
   14cd4:	andeq	r4, r1, r4, lsr #26
   14cd8:	andeq	r4, r1, r4, lsr #26
   14cdc:	andeq	r4, r1, r4, lsr #26
   14ce0:	andeq	r4, r1, r4, lsr #26
   14ce4:	andeq	r4, r1, r4, lsr #26
   14ce8:	andeq	r4, r1, ip, ror #25
   14cec:	mov	r0, sl
   14cf0:	mov	r1, #48	; 0x30
   14cf4:	bl	10fac <strchr@plt>
   14cf8:	cmp	r0, #0
   14cfc:	beq	14d20 <__assert_fail@plt+0x3c90>
   14d00:	ldr	r1, [sp, #32]
   14d04:	ldrb	r0, [r1, #1]
   14d08:	cmp	r0, #66	; 0x42
   14d0c:	cmpne	r0, #68	; 0x44
   14d10:	bne	14ed8 <__assert_fail@plt+0x3e48>
   14d14:	mov	r5, #1000	; 0x3e8
   14d18:	mov	r0, #2
   14d1c:	str	r0, [sp, #28]
   14d20:	mov	r3, #0
   14d24:	sub	r0, r4, #66	; 0x42
   14d28:	cmp	r0, #53	; 0x35
   14d2c:	bhi	14f04 <__assert_fail@plt+0x3e74>
   14d30:	add	r1, pc, #0
   14d34:	ldr	pc, [r1, r0, lsl #2]
   14d38:	andeq	r5, r1, r4, ror r2
   14d3c:	andeq	r4, r1, r4, lsl #30
   14d40:	andeq	r4, r1, r4, lsl #30
   14d44:	muleq	r1, ip, r2
   14d48:	andeq	r4, r1, r4, lsl #30
   14d4c:	andeq	r4, r1, r0, lsl lr
   14d50:	andeq	r4, r1, r4, lsl #30
   14d54:	andeq	r4, r1, r4, lsl #30
   14d58:	andeq	r4, r1, r4, lsl #30
   14d5c:	andeq	r4, r1, ip, lsl pc
   14d60:	andeq	r4, r1, r4, lsl #30
   14d64:	andeq	r4, r1, r4, ror #30
   14d68:	andeq	r4, r1, r4, lsl #30
   14d6c:	andeq	r4, r1, r4, lsl #30
   14d70:	strdeq	r5, [r1], -r0
   14d74:	andeq	r4, r1, r4, lsl #30
   14d78:	andeq	r4, r1, r4, lsl #30
   14d7c:	andeq	r4, r1, r4, lsl #30
   14d80:	strdeq	r4, [r1], -r0
   14d84:	andeq	r4, r1, r4, lsl #30
   14d88:	andeq	r4, r1, r4, lsl #30
   14d8c:	andeq	r4, r1, r4, lsl #30
   14d90:	andeq	r4, r1, r4, lsl #30
   14d94:	andeq	r5, r1, r8, lsl r5
   14d98:	ldrdeq	r5, [r1], -r8
   14d9c:	andeq	r4, r1, r4, lsl #30
   14da0:	andeq	r4, r1, r4, lsl #30
   14da4:	andeq	r4, r1, r4, lsl #30
   14da8:	andeq	r4, r1, r4, lsl #30
   14dac:	andeq	r4, r1, r4, lsl #30
   14db0:	andeq	r4, r1, r4, lsl #30
   14db4:	andeq	r4, r1, r4, lsl #30
   14db8:	andeq	r5, r1, ip, ror #13
   14dbc:	andeq	r5, r1, r4, asr #14
   14dc0:	andeq	r4, r1, r4, lsl #30
   14dc4:	andeq	r4, r1, r4, lsl #30
   14dc8:	andeq	r4, r1, r4, lsl #30
   14dcc:	andeq	r4, r1, r0, lsl lr
   14dd0:	andeq	r4, r1, r4, lsl #30
   14dd4:	andeq	r4, r1, r4, lsl #30
   14dd8:	andeq	r4, r1, r4, lsl #30
   14ddc:	andeq	r4, r1, ip, lsl pc
   14de0:	andeq	r4, r1, r4, lsl #30
   14de4:	andeq	r4, r1, r4, ror #30
   14de8:	andeq	r4, r1, r4, lsl #30
   14dec:	andeq	r4, r1, r4, lsl #30
   14df0:	andeq	r4, r1, r4, lsl #30
   14df4:	andeq	r4, r1, r4, lsl #30
   14df8:	andeq	r4, r1, r4, lsl #30
   14dfc:	andeq	r4, r1, r4, lsl #30
   14e00:	strdeq	r4, [r1], -r0
   14e04:	andeq	r4, r1, r4, lsl #30
   14e08:	andeq	r4, r1, r4, lsl #30
   14e0c:	andeq	r5, r1, r0, lsr #14
   14e10:	mvn	r0, #0
   14e14:	mvn	r1, #0
   14e18:	mov	r2, r5
   14e1c:	mov	sl, r3
   14e20:	bl	15af8 <__assert_fail@plt+0x4a68>
   14e24:	subs	r3, r0, r6
   14e28:	mov	lr, #0
   14e2c:	umull	r4, r2, r6, r5
   14e30:	str	r1, [sp, #20]
   14e34:	sbcs	r3, r1, r7
   14e38:	mla	ip, r6, sl, r2
   14e3c:	mov	r2, r1
   14e40:	movwcc	lr, #1
   14e44:	mla	r7, r7, r5, ip
   14e48:	mov	r2, #0
   14e4c:	cmp	lr, #0
   14e50:	mvnne	r4, #0
   14e54:	mvnne	r7, #0
   14e58:	subs	r6, r0, r4
   14e5c:	sbcs	r6, r1, r7
   14e60:	movwcc	r2, #1
   14e64:	umull	r3, r6, r4, r5
   14e68:	cmp	r2, #0
   14e6c:	str	r6, [sp, #16]
   14e70:	mvnne	r3, #0
   14e74:	cmp	r2, #0
   14e78:	umull	r6, ip, r3, r5
   14e7c:	mla	r1, r3, sl, ip
   14e80:	ldr	ip, [sp, #16]
   14e84:	str	r1, [sp, #12]
   14e88:	mla	r4, r4, sl, ip
   14e8c:	mla	r4, r7, r5, r4
   14e90:	ldr	r7, [sp, #12]
   14e94:	mvnne	r4, #0
   14e98:	subs	r0, r0, r3
   14e9c:	ldr	r0, [sp, #20]
   14ea0:	mla	r7, r4, r5, r7
   14ea4:	sbcs	r0, r0, r4
   14ea8:	mov	r0, #0
   14eac:	movwcc	r0, #1
   14eb0:	cmp	r0, #0
   14eb4:	mov	r1, r0
   14eb8:	orr	r0, lr, r2
   14ebc:	mvnne	r7, #0
   14ec0:	mvnne	r6, #0
   14ec4:	b	15510 <__assert_fail@plt+0x4480>
   14ec8:	mov	r8, r0
   14ecc:	cmp	sl, #0
   14ed0:	bne	14b9c <__assert_fail@plt+0x3b0c>
   14ed4:	b	15764 <__assert_fail@plt+0x46d4>
   14ed8:	cmp	r0, #105	; 0x69
   14edc:	mov	r3, #0
   14ee0:	bne	14d24 <__assert_fail@plt+0x3c94>
   14ee4:	ldrb	r0, [r1, #2]
   14ee8:	mov	r1, #1
   14eec:	cmp	r0, #66	; 0x42
   14ef0:	movweq	r1, #3
   14ef4:	str	r1, [sp, #28]
   14ef8:	sub	r0, r4, #66	; 0x42
   14efc:	cmp	r0, #53	; 0x35
   14f00:	bls	14d30 <__assert_fail@plt+0x3ca0>
   14f04:	ldr	r0, [sp, #36]	; 0x24
   14f08:	orr	r8, r8, #2
   14f0c:	strd	r6, [r0]
   14f10:	mov	r0, r8
   14f14:	sub	sp, fp, #28
   14f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f1c:	mvn	r0, #0
   14f20:	mvn	r1, #0
   14f24:	mov	r2, r5
   14f28:	mov	r4, r3
   14f2c:	bl	15af8 <__assert_fail@plt+0x4a68>
   14f30:	subs	r0, r0, r6
   14f34:	mov	r2, #0
   14f38:	sbcs	r0, r1, r7
   14f3c:	movwcc	r2, #1
   14f40:	umull	r0, r1, r6, r5
   14f44:	mla	r1, r6, r4, r1
   14f48:	cmp	r2, #0
   14f4c:	mov	r3, r2
   14f50:	mla	r7, r7, r5, r1
   14f54:	mvnne	r0, #0
   14f58:	mvnne	r7, #0
   14f5c:	mov	r6, r0
   14f60:	b	15744 <__assert_fail@plt+0x46b4>
   14f64:	mvn	r0, #0
   14f68:	mvn	r1, #0
   14f6c:	mov	r2, r5
   14f70:	str	r3, [sp, #24]
   14f74:	bl	15af8 <__assert_fail@plt+0x4a68>
   14f78:	subs	r3, r0, r6
   14f7c:	mov	ip, r0
   14f80:	umull	r4, r0, r6, r5
   14f84:	mov	sl, #0
   14f88:	sbcs	r3, r1, r7
   14f8c:	str	r0, [sp, #20]
   14f90:	ldr	r0, [sp, #24]
   14f94:	mov	r3, #0
   14f98:	movwcc	r3, #1
   14f9c:	cmp	r3, #0
   14fa0:	mvnne	r4, #0
   14fa4:	cmp	r3, #0
   14fa8:	umull	lr, r2, r4, r5
   14fac:	mla	r2, r4, r0, r2
   14fb0:	str	r2, [sp, #16]
   14fb4:	ldr	r2, [sp, #20]
   14fb8:	mla	r6, r6, r0, r2
   14fbc:	ldr	r0, [sp, #16]
   14fc0:	mla	r6, r7, r5, r6
   14fc4:	mvnne	r6, #0
   14fc8:	mla	r7, r6, r5, r0
   14fcc:	subs	r0, ip, r4
   14fd0:	sbcs	r0, r1, r6
   14fd4:	movwcc	sl, #1
   14fd8:	cmp	sl, #0
   14fdc:	orr	r3, r3, sl
   14fe0:	mvnne	lr, #0
   14fe4:	mvnne	r7, #0
   14fe8:	mov	r6, lr
   14fec:	b	15744 <__assert_fail@plt+0x46b4>
   14ff0:	mvn	r0, #0
   14ff4:	mvn	r1, #0
   14ff8:	mov	r2, r5
   14ffc:	mov	sl, r3
   15000:	bl	15af8 <__assert_fail@plt+0x4a68>
   15004:	subs	r3, r0, r6
   15008:	mov	ip, r1
   1500c:	umull	r2, lr, r6, r5
   15010:	str	r0, [sp, #20]
   15014:	sbcs	r3, r1, r7
   15018:	mov	r1, #0
   1501c:	mla	r6, r6, sl, lr
   15020:	mov	lr, #0
   15024:	str	ip, [sp, #16]
   15028:	movwcc	r1, #1
   1502c:	mla	r7, r7, r5, r6
   15030:	cmp	r1, #0
   15034:	mvnne	r2, #0
   15038:	cmp	r1, #0
   1503c:	umull	r3, r4, r2, r5
   15040:	mvnne	r7, #0
   15044:	mla	r4, r2, sl, r4
   15048:	subs	r2, r0, r2
   1504c:	sbcs	r2, ip, r7
   15050:	mla	r4, r7, r5, r4
   15054:	movwcc	lr, #1
   15058:	mov	r2, #0
   1505c:	cmp	lr, #0
   15060:	mvnne	r3, #0
   15064:	mvnne	r4, #0
   15068:	subs	r7, r0, r3
   1506c:	mov	r0, r5
   15070:	sbcs	r7, ip, r4
   15074:	movwcc	r2, #1
   15078:	umull	r5, r7, r3, r5
   1507c:	cmp	r2, #0
   15080:	mla	r3, r3, sl, r7
   15084:	mvnne	r5, #0
   15088:	mla	r3, r4, r0, r3
   1508c:	cmp	r2, #0
   15090:	umull	r6, ip, r5, r0
   15094:	mvnne	r3, #0
   15098:	mla	ip, r5, sl, ip
   1509c:	mla	r7, r3, r0, ip
   150a0:	ldr	r0, [sp, #20]
   150a4:	subs	r0, r0, r5
   150a8:	ldr	r0, [sp, #16]
   150ac:	sbcs	r0, r0, r3
   150b0:	mov	r0, #0
   150b4:	movwcc	r0, #1
   150b8:	cmp	r0, #0
   150bc:	mov	r3, r0
   150c0:	orr	r0, r1, lr
   150c4:	orr	r0, r0, r2
   150c8:	mvnne	r7, #0
   150cc:	mvnne	r6, #0
   150d0:	orr	r3, r0, r3
   150d4:	b	15744 <__assert_fail@plt+0x46b4>
   150d8:	mvn	r0, #0
   150dc:	mvn	r1, #0
   150e0:	mov	r2, r5
   150e4:	mov	r4, r3
   150e8:	str	r3, [sp, #24]
   150ec:	bl	15af8 <__assert_fail@plt+0x4a68>
   150f0:	umull	r3, r2, r6, r5
   150f4:	mla	r2, r6, r4, r2
   150f8:	subs	r6, r0, r6
   150fc:	sbcs	r6, r1, r7
   15100:	mla	r2, r7, r5, r2
   15104:	mov	r7, #0
   15108:	mov	r6, #0
   1510c:	movwcc	r6, #1
   15110:	cmp	r6, #0
   15114:	str	r6, [sp, #20]
   15118:	mvnne	r3, #0
   1511c:	mvnne	r2, #0
   15120:	subs	r4, r0, r3
   15124:	umull	r6, ip, r3, r5
   15128:	sbcs	r4, r1, r2
   1512c:	ldr	r4, [sp, #24]
   15130:	movwcc	r7, #1
   15134:	cmp	r7, #0
   15138:	mov	lr, r7
   1513c:	str	r7, [sp, #16]
   15140:	mvnne	r6, #0
   15144:	cmp	lr, #0
   15148:	mov	lr, #0
   1514c:	umull	sl, r7, r6, r5
   15150:	mla	r3, r3, r4, ip
   15154:	mla	r7, r6, r4, r7
   15158:	mov	r4, r0
   1515c:	mla	r2, r2, r5, r3
   15160:	mvnne	r2, #0
   15164:	subs	r3, r0, r6
   15168:	mov	r0, #0
   1516c:	mla	r7, r2, r5, r7
   15170:	sbcs	r2, r1, r2
   15174:	mov	r3, r4
   15178:	movwcc	r0, #1
   1517c:	str	r3, [sp, #4]
   15180:	cmp	r0, #0
   15184:	str	r0, [sp, #12]
   15188:	mov	r0, r1
   1518c:	mvnne	sl, #0
   15190:	mvnne	r7, #0
   15194:	str	r0, [sp, #8]
   15198:	subs	r2, r4, sl
   1519c:	ldr	r4, [sp, #24]
   151a0:	sbcs	r2, r1, r7
   151a4:	movwcc	lr, #1
   151a8:	umull	r6, r2, sl, r5
   151ac:	cmp	lr, #0
   151b0:	mvnne	r6, #0
   151b4:	mla	r2, sl, r4, r2
   151b8:	cmp	lr, #0
   151bc:	umull	r1, ip, r6, r5
   151c0:	mla	r2, r7, r5, r2
   151c4:	mla	ip, r6, r4, ip
   151c8:	mvnne	r2, #0
   151cc:	subs	r6, r3, r6
   151d0:	mla	r7, r2, r5, ip
   151d4:	sbcs	r2, r0, r2
   151d8:	mov	ip, #0
   151dc:	movwcc	ip, #1
   151e0:	mov	r2, #0
   151e4:	cmp	ip, #0
   151e8:	mvnne	r1, #0
   151ec:	mvnne	r7, #0
   151f0:	subs	r6, r3, r1
   151f4:	ldr	r3, [sp, #24]
   151f8:	sbcs	r6, r0, r7
   151fc:	umull	r0, sl, r1, r5
   15200:	movwcc	r2, #1
   15204:	cmp	r2, #0
   15208:	mvnne	r0, #0
   1520c:	mla	r1, r1, r3, sl
   15210:	cmp	r2, #0
   15214:	umull	r6, r4, r0, r5
   15218:	mla	r1, r7, r5, r1
   1521c:	mla	r4, r0, r3, r4
   15220:	ldr	r3, [sp, #4]
   15224:	mvnne	r1, #0
   15228:	mla	r7, r1, r5, r4
   1522c:	ldr	r5, [sp, #16]
   15230:	subs	r0, r3, r0
   15234:	ldr	r0, [sp, #8]
   15238:	sbcs	r0, r0, r1
   1523c:	mov	r0, #0
   15240:	movwcc	r0, #1
   15244:	cmp	r0, #0
   15248:	mov	r1, r0
   1524c:	ldr	r0, [sp, #20]
   15250:	mvnne	r7, #0
   15254:	mvnne	r6, #0
   15258:	orr	r0, r0, r5
   1525c:	ldr	r5, [sp, #12]
   15260:	orr	r0, r0, r5
   15264:	orr	r0, r0, lr
   15268:	orr	r0, r0, ip
   1526c:	orr	r0, r0, r2
   15270:	b	156e0 <__assert_fail@plt+0x4650>
   15274:	mov	r1, #0
   15278:	lsl	r2, r7, #10
   1527c:	lsl	r0, r6, #10
   15280:	lsr	r3, r7, #22
   15284:	cmp	r1, r7, lsr #22
   15288:	orr	r2, r2, r6, lsr #22
   1528c:	mvnne	r0, #0
   15290:	movwne	r3, #1
   15294:	cmp	r1, r7, lsr #22
   15298:	b	15710 <__assert_fail@plt+0x4680>
   1529c:	mvn	r0, #0
   152a0:	mvn	r1, #0
   152a4:	mov	r2, r5
   152a8:	mov	sl, r3
   152ac:	bl	15af8 <__assert_fail@plt+0x4a68>
   152b0:	subs	r2, r0, r6
   152b4:	mov	ip, r0
   152b8:	mov	r0, #0
   152bc:	sbcs	r2, r1, r7
   152c0:	movwcc	r0, #1
   152c4:	umull	r4, r2, r6, r5
   152c8:	cmp	r0, #0
   152cc:	mla	r2, r6, sl, r2
   152d0:	str	r0, [sp, #20]
   152d4:	mvnne	r4, #0
   152d8:	cmp	r0, #0
   152dc:	mla	r2, r7, r5, r2
   152e0:	mov	r0, #0
   152e4:	umull	lr, r3, r4, r5
   152e8:	mvnne	r2, #0
   152ec:	mla	r3, r4, sl, r3
   152f0:	mla	r6, r2, r5, r3
   152f4:	subs	r3, ip, r4
   152f8:	sbcs	r2, r1, r2
   152fc:	mov	r3, r1
   15300:	movwcc	r0, #1
   15304:	str	r3, [sp, #8]
   15308:	cmp	r0, #0
   1530c:	str	r0, [sp, #16]
   15310:	mov	r0, ip
   15314:	mvnne	lr, #0
   15318:	mvnne	r6, #0
   1531c:	str	r0, [sp, #12]
   15320:	subs	r2, ip, lr
   15324:	umull	r7, r4, lr, r5
   15328:	sbcs	r2, r1, r6
   1532c:	mla	r4, lr, sl, r4
   15330:	mov	r2, #0
   15334:	mla	r6, r6, r5, r4
   15338:	mov	r4, #0
   1533c:	movwcc	r2, #1
   15340:	cmp	r2, #0
   15344:	mvnne	r7, #0
   15348:	cmp	r2, #0
   1534c:	umull	r1, ip, r7, r5
   15350:	mvnne	r6, #0
   15354:	mla	ip, r7, sl, ip
   15358:	subs	r7, r0, r7
   1535c:	mla	lr, r6, r5, ip
   15360:	sbcs	r7, r3, r6
   15364:	mov	ip, #0
   15368:	movwcc	ip, #1
   1536c:	cmp	ip, #0
   15370:	mvnne	r1, #0
   15374:	mvnne	lr, #0
   15378:	subs	r7, r0, r1
   1537c:	sbcs	r7, r3, lr
   15380:	movwcc	r4, #1
   15384:	umull	r0, r7, r1, r5
   15388:	cmp	r4, #0
   1538c:	mla	r1, r1, sl, r7
   15390:	mvnne	r0, #0
   15394:	mla	r1, lr, r5, r1
   15398:	cmp	r4, #0
   1539c:	umull	r6, r3, r0, r5
   153a0:	mvnne	r1, #0
   153a4:	mla	r3, r0, sl, r3
   153a8:	mla	r7, r1, r5, r3
   153ac:	ldr	r3, [sp, #12]
   153b0:	subs	r0, r3, r0
   153b4:	ldr	r3, [sp, #16]
   153b8:	ldr	r0, [sp, #8]
   153bc:	sbcs	r0, r0, r1
   153c0:	mov	r0, #0
   153c4:	movwcc	r0, #1
   153c8:	cmp	r0, #0
   153cc:	mov	r1, r0
   153d0:	ldr	r0, [sp, #20]
   153d4:	mvnne	r7, #0
   153d8:	mvnne	r6, #0
   153dc:	orr	r0, r0, r3
   153e0:	orr	r0, r0, r2
   153e4:	orr	r0, r0, ip
   153e8:	orr	r0, r0, r4
   153ec:	b	15510 <__assert_fail@plt+0x4480>
   153f0:	mvn	r0, #0
   153f4:	mvn	r1, #0
   153f8:	mov	r2, r5
   153fc:	mov	sl, r3
   15400:	bl	15af8 <__assert_fail@plt+0x4a68>
   15404:	umull	r3, r2, r6, r5
   15408:	mov	lr, r1
   1540c:	mov	r1, r0
   15410:	mla	r2, r6, sl, r2
   15414:	subs	r6, r0, r6
   15418:	mov	r0, #0
   1541c:	sbcs	r6, lr, r7
   15420:	mla	r2, r7, r5, r2
   15424:	movwcc	r0, #1
   15428:	cmp	r0, #0
   1542c:	str	r0, [sp, #20]
   15430:	mov	r0, r1
   15434:	mvnne	r3, #0
   15438:	mvnne	r2, #0
   1543c:	str	r0, [sp, #16]
   15440:	subs	r4, r1, r3
   15444:	umull	r7, ip, r3, r5
   15448:	sbcs	r4, lr, r2
   1544c:	mla	r3, r3, sl, ip
   15450:	mov	ip, #0
   15454:	mov	r4, #0
   15458:	mla	r2, r2, r5, r3
   1545c:	movwcc	r4, #1
   15460:	cmp	r4, #0
   15464:	mvnne	r7, #0
   15468:	cmp	r4, #0
   1546c:	umull	r1, r6, r7, r5
   15470:	mvnne	r2, #0
   15474:	mla	r6, r7, sl, r6
   15478:	mla	r3, r2, r5, r6
   1547c:	subs	r6, r0, r7
   15480:	sbcs	r2, lr, r2
   15484:	movwcc	ip, #1
   15488:	mov	r2, #0
   1548c:	cmp	ip, #0
   15490:	mvnne	r1, #0
   15494:	mvnne	r3, #0
   15498:	subs	r6, r0, r1
   1549c:	sbcs	r6, lr, r3
   154a0:	movwcc	r2, #1
   154a4:	umull	r0, r6, r1, r5
   154a8:	cmp	r2, #0
   154ac:	str	r6, [sp, #12]
   154b0:	mvnne	r0, #0
   154b4:	cmp	r2, #0
   154b8:	umull	r6, r7, r0, r5
   154bc:	mla	r7, r0, sl, r7
   154c0:	str	r7, [sp, #8]
   154c4:	ldr	r7, [sp, #12]
   154c8:	mla	r1, r1, sl, r7
   154cc:	mla	r1, r3, r5, r1
   154d0:	ldr	r3, [sp, #8]
   154d4:	mvnne	r1, #0
   154d8:	mla	r7, r1, r5, r3
   154dc:	ldr	r3, [sp, #16]
   154e0:	subs	r0, r3, r0
   154e4:	sbcs	r0, lr, r1
   154e8:	mov	r0, #0
   154ec:	movwcc	r0, #1
   154f0:	cmp	r0, #0
   154f4:	mov	r1, r0
   154f8:	ldr	r0, [sp, #20]
   154fc:	mvnne	r7, #0
   15500:	mvnne	r6, #0
   15504:	orr	r0, r0, r4
   15508:	orr	r0, r0, ip
   1550c:	orr	r0, r0, r2
   15510:	orr	r3, r0, r1
   15514:	b	15744 <__assert_fail@plt+0x46b4>
   15518:	mvn	r0, #0
   1551c:	mvn	r1, #0
   15520:	mov	r2, r5
   15524:	mov	sl, r3
   15528:	bl	15af8 <__assert_fail@plt+0x4a68>
   1552c:	mov	ip, r1
   15530:	subs	r1, r0, r6
   15534:	umull	r3, lr, r6, r5
   15538:	mov	r2, r5
   1553c:	sbcs	r1, ip, r7
   15540:	mla	r6, r6, sl, lr
   15544:	str	ip, [sp, #4]
   15548:	mov	r1, #0
   1554c:	mla	r7, r7, r2, r6
   15550:	movwcc	r1, #1
   15554:	cmp	r1, #0
   15558:	str	r1, [sp, #20]
   1555c:	mvnne	r3, #0
   15560:	cmp	r1, #0
   15564:	mov	r1, r0
   15568:	umull	r4, r5, r3, r5
   1556c:	mvnne	r7, #0
   15570:	mov	lr, r1
   15574:	mla	r5, r3, sl, r5
   15578:	subs	r3, r0, r3
   1557c:	sbcs	r0, ip, r7
   15580:	mla	r5, r7, r2, r5
   15584:	mov	r0, #0
   15588:	movwcc	r0, #1
   1558c:	cmp	r0, #0
   15590:	str	r0, [sp, #16]
   15594:	mvnne	r4, #0
   15598:	mvnne	r5, #0
   1559c:	subs	r0, r1, r4
   155a0:	mov	r1, #0
   155a4:	sbcs	r0, ip, r5
   155a8:	movwcc	r1, #1
   155ac:	umull	r3, r0, r4, r2
   155b0:	cmp	r1, #0
   155b4:	mla	r0, r4, sl, r0
   155b8:	mov	r4, lr
   155bc:	str	r1, [sp, #12]
   155c0:	mvnne	r3, #0
   155c4:	mla	r0, r5, r2, r0
   155c8:	cmp	r1, #0
   155cc:	str	r4, [sp]
   155d0:	umull	r7, r6, r3, r2
   155d4:	mvnne	r0, #0
   155d8:	mla	r6, r3, sl, r6
   155dc:	subs	r3, lr, r3
   155e0:	mla	r5, r0, r2, r6
   155e4:	sbcs	r0, ip, r0
   155e8:	mov	r3, #0
   155ec:	mov	r0, #0
   155f0:	movwcc	r0, #1
   155f4:	cmp	r0, #0
   155f8:	str	r0, [sp, #8]
   155fc:	mvnne	r7, #0
   15600:	mvnne	r5, #0
   15604:	subs	r0, lr, r7
   15608:	sbcs	r0, ip, r5
   1560c:	movwcc	r3, #1
   15610:	umull	r6, r0, r7, r2
   15614:	cmp	r3, #0
   15618:	mla	r7, r7, sl, r0
   1561c:	mov	r0, ip
   15620:	mvnne	r6, #0
   15624:	mla	r7, r5, r2, r7
   15628:	cmp	r3, #0
   1562c:	mov	r5, #0
   15630:	umull	r1, lr, r6, r2
   15634:	mvnne	r7, #0
   15638:	mla	lr, r6, sl, lr
   1563c:	subs	r6, r4, r6
   15640:	mla	lr, r7, r2, lr
   15644:	sbcs	r7, ip, r7
   15648:	mov	ip, #0
   1564c:	movwcc	ip, #1
   15650:	cmp	ip, #0
   15654:	mvnne	r1, #0
   15658:	mvnne	lr, #0
   1565c:	subs	r7, r4, r1
   15660:	sbcs	r7, r0, lr
   15664:	movwcc	r5, #1
   15668:	umull	r0, r7, r1, r2
   1566c:	cmp	r5, #0
   15670:	mla	r1, r1, sl, r7
   15674:	mvnne	r0, #0
   15678:	mla	r1, lr, r2, r1
   1567c:	cmp	r5, #0
   15680:	umull	r6, r4, r0, r2
   15684:	mvnne	r1, #0
   15688:	mla	r4, r0, sl, r4
   1568c:	mla	r7, r1, r2, r4
   15690:	ldr	r2, [sp]
   15694:	subs	r0, r2, r0
   15698:	ldr	r2, [sp, #16]
   1569c:	ldr	r0, [sp, #4]
   156a0:	sbcs	r0, r0, r1
   156a4:	mov	r0, #0
   156a8:	movwcc	r0, #1
   156ac:	cmp	r0, #0
   156b0:	mov	r1, r0
   156b4:	ldr	r0, [sp, #20]
   156b8:	mvnne	r7, #0
   156bc:	mvnne	r6, #0
   156c0:	orr	r0, r0, r2
   156c4:	ldr	r2, [sp, #12]
   156c8:	orr	r0, r0, r2
   156cc:	ldr	r2, [sp, #8]
   156d0:	orr	r0, r0, r2
   156d4:	orr	r0, r0, r3
   156d8:	orr	r0, r0, ip
   156dc:	orr	r0, r0, r5
   156e0:	orr	r0, r0, r1
   156e4:	and	r3, r0, #1
   156e8:	b	15744 <__assert_fail@plt+0x46b4>
   156ec:	mov	r1, #0
   156f0:	lsl	r2, r7, #9
   156f4:	lsl	r0, r6, #9
   156f8:	lsr	r3, r7, #23
   156fc:	cmp	r1, r7, lsr #23
   15700:	orr	r2, r2, r6, lsr #23
   15704:	mvnne	r0, #0
   15708:	movwne	r3, #1
   1570c:	cmp	r1, r7, lsr #23
   15710:	mvnne	r2, #0
   15714:	mov	r6, r0
   15718:	mov	r7, r2
   1571c:	b	15744 <__assert_fail@plt+0x46b4>
   15720:	lsl	r1, r7, #1
   15724:	lsl	r0, r6, #1
   15728:	cmp	r7, #0
   1572c:	lsr	r3, r7, #31
   15730:	orr	r1, r1, r6, lsr #31
   15734:	mvnlt	r0, #0
   15738:	mvnlt	r1, #0
   1573c:	mov	r6, r0
   15740:	mov	r7, r1
   15744:	ldr	r1, [sp, #32]
   15748:	ldr	r2, [sp, #28]
   1574c:	orr	r8, r3, r8
   15750:	add	r0, r1, r2
   15754:	str	r0, [r9]
   15758:	ldrb	r0, [r1, r2]
   1575c:	cmp	r0, #0
   15760:	orrne	r8, r8, #2
   15764:	ldr	r0, [sp, #36]	; 0x24
   15768:	strd	r6, [r0]
   1576c:	mov	r0, r8
   15770:	sub	sp, fp, #28
   15774:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15778:	movw	r0, #26013	; 0x659d
   1577c:	movw	r1, #26051	; 0x65c3
   15780:	movw	r3, #26067	; 0x65d3
   15784:	mov	r2, #85	; 0x55
   15788:	movt	r0, #1
   1578c:	movt	r1, #1
   15790:	movt	r3, #1
   15794:	bl	11090 <__assert_fail@plt>
   15798:	clz	r2, r1
   1579c:	clz	r3, r0
   157a0:	lsr	r2, r2, #5
   157a4:	lsr	r3, r3, #5
   157a8:	orrs	r2, r3, r2
   157ac:	movwne	r1, #1
   157b0:	movwne	r0, #1
   157b4:	cmp	r1, #0
   157b8:	beq	157e8 <__assert_fail@plt+0x4758>
   157bc:	mvn	r2, #-2147483648	; 0x80000000
   157c0:	udiv	r2, r2, r1
   157c4:	cmp	r2, r0
   157c8:	bcs	157e8 <__assert_fail@plt+0x4758>
   157cc:	push	{fp, lr}
   157d0:	mov	fp, sp
   157d4:	bl	10fb8 <__errno_location@plt>
   157d8:	mov	r1, #12
   157dc:	str	r1, [r0]
   157e0:	mov	r0, #0
   157e4:	pop	{fp, pc}
   157e8:	b	10e2c <calloc@plt>
   157ec:	cmp	r0, #0
   157f0:	movweq	r0, #1
   157f4:	cmn	r0, #1
   157f8:	ble	15800 <__assert_fail@plt+0x4770>
   157fc:	b	10f4c <malloc@plt>
   15800:	push	{fp, lr}
   15804:	mov	fp, sp
   15808:	bl	10fb8 <__errno_location@plt>
   1580c:	mov	r1, #12
   15810:	str	r1, [r0]
   15814:	mov	r0, #0
   15818:	pop	{fp, pc}
   1581c:	push	{fp, lr}
   15820:	mov	fp, sp
   15824:	cmp	r0, #0
   15828:	beq	15844 <__assert_fail@plt+0x47b4>
   1582c:	cmp	r1, #0
   15830:	beq	15850 <__assert_fail@plt+0x47c0>
   15834:	cmn	r1, #1
   15838:	ble	1585c <__assert_fail@plt+0x47cc>
   1583c:	pop	{fp, lr}
   15840:	b	10ee0 <realloc@plt>
   15844:	mov	r0, r1
   15848:	pop	{fp, lr}
   1584c:	b	157ec <__assert_fail@plt+0x475c>
   15850:	bl	158f4 <__assert_fail@plt+0x4864>
   15854:	mov	r0, #0
   15858:	pop	{fp, pc}
   1585c:	bl	10fb8 <__errno_location@plt>
   15860:	mov	r1, #12
   15864:	str	r1, [r0]
   15868:	mov	r0, #0
   1586c:	pop	{fp, pc}
   15870:	push	{r4, r5, r6, sl, fp, lr}
   15874:	add	fp, sp, #16
   15878:	mov	r4, r0
   1587c:	bl	10f28 <__fpending@plt>
   15880:	ldr	r6, [r4]
   15884:	mov	r5, r0
   15888:	mov	r0, r4
   1588c:	bl	11c48 <__assert_fail@plt+0xbb8>
   15890:	tst	r6, #32
   15894:	bne	158cc <__assert_fail@plt+0x483c>
   15898:	cmp	r0, #0
   1589c:	mov	r4, r0
   158a0:	mvnne	r4, #0
   158a4:	cmp	r5, #0
   158a8:	bne	158d8 <__assert_fail@plt+0x4848>
   158ac:	cmp	r0, #0
   158b0:	beq	158d8 <__assert_fail@plt+0x4848>
   158b4:	bl	10fb8 <__errno_location@plt>
   158b8:	ldr	r0, [r0]
   158bc:	subs	r4, r0, #9
   158c0:	mvnne	r4, #0
   158c4:	mov	r0, r4
   158c8:	pop	{r4, r5, r6, sl, fp, pc}
   158cc:	mvn	r4, #0
   158d0:	cmp	r0, #0
   158d4:	beq	158e0 <__assert_fail@plt+0x4850>
   158d8:	mov	r0, r4
   158dc:	pop	{r4, r5, r6, sl, fp, pc}
   158e0:	bl	10fb8 <__errno_location@plt>
   158e4:	mov	r1, #0
   158e8:	str	r1, [r0]
   158ec:	mov	r0, r4
   158f0:	pop	{r4, r5, r6, sl, fp, pc}
   158f4:	push	{r4, r5, r6, sl, fp, lr}
   158f8:	add	fp, sp, #16
   158fc:	mov	r4, r0
   15900:	bl	10fb8 <__errno_location@plt>
   15904:	ldr	r6, [r0]
   15908:	mov	r5, r0
   1590c:	mov	r0, r4
   15910:	bl	10e80 <free@plt>
   15914:	str	r6, [r5]
   15918:	pop	{r4, r5, r6, sl, fp, pc}
   1591c:	push	{fp, lr}
   15920:	mov	fp, sp
   15924:	mov	r0, #14
   15928:	bl	11048 <nl_langinfo@plt>
   1592c:	movw	r1, #24700	; 0x607c
   15930:	cmp	r0, #0
   15934:	movt	r1, #1
   15938:	movne	r1, r0
   1593c:	movw	r0, #26146	; 0x6622
   15940:	ldrb	r2, [r1]
   15944:	movt	r0, #1
   15948:	cmp	r2, #0
   1594c:	movne	r0, r1
   15950:	pop	{fp, pc}
   15954:	push	{r4, r5, r6, r7, fp, lr}
   15958:	add	fp, sp, #16
   1595c:	sub	sp, sp, #8
   15960:	add	r5, sp, #4
   15964:	cmp	r0, #0
   15968:	mov	r7, r2
   1596c:	mov	r4, r1
   15970:	movne	r5, r0
   15974:	mov	r0, r5
   15978:	bl	10f34 <mbrtowc@plt>
   1597c:	mov	r6, r0
   15980:	cmp	r7, #0
   15984:	beq	159a8 <__assert_fail@plt+0x4918>
   15988:	cmn	r6, #2
   1598c:	bcc	159a8 <__assert_fail@plt+0x4918>
   15990:	mov	r0, #0
   15994:	bl	159f0 <__assert_fail@plt+0x4960>
   15998:	cmp	r0, #0
   1599c:	ldrbeq	r0, [r4]
   159a0:	moveq	r6, #1
   159a4:	streq	r0, [r5]
   159a8:	mov	r0, r6
   159ac:	sub	sp, fp, #16
   159b0:	pop	{r4, r5, r6, r7, fp, pc}
   159b4:	cmp	r2, #0
   159b8:	beq	159e8 <__assert_fail@plt+0x4958>
   159bc:	mvn	r3, #0
   159c0:	udiv	r3, r3, r2
   159c4:	cmp	r3, r1
   159c8:	bcs	159e8 <__assert_fail@plt+0x4958>
   159cc:	push	{fp, lr}
   159d0:	mov	fp, sp
   159d4:	bl	10fb8 <__errno_location@plt>
   159d8:	mov	r1, #12
   159dc:	str	r1, [r0]
   159e0:	mov	r0, #0
   159e4:	pop	{fp, pc}
   159e8:	mul	r1, r2, r1
   159ec:	b	1581c <__assert_fail@plt+0x478c>
   159f0:	push	{r4, sl, fp, lr}
   159f4:	add	fp, sp, #8
   159f8:	sub	sp, sp, #264	; 0x108
   159fc:	add	r1, sp, #7
   15a00:	movw	r2, #257	; 0x101
   15a04:	bl	15a54 <__assert_fail@plt+0x49c4>
   15a08:	mov	r4, #0
   15a0c:	cmp	r0, #0
   15a10:	bne	15a48 <__assert_fail@plt+0x49b8>
   15a14:	movw	r1, #26152	; 0x6628
   15a18:	add	r0, sp, #7
   15a1c:	movt	r1, #1
   15a20:	bl	10e50 <strcmp@plt>
   15a24:	cmp	r0, #0
   15a28:	beq	15a48 <__assert_fail@plt+0x49b8>
   15a2c:	movw	r1, #26154	; 0x662a
   15a30:	add	r0, sp, #7
   15a34:	movt	r1, #1
   15a38:	bl	10e50 <strcmp@plt>
   15a3c:	mov	r4, r0
   15a40:	cmp	r0, #0
   15a44:	movwne	r4, #1
   15a48:	mov	r0, r4
   15a4c:	sub	sp, fp, #8
   15a50:	pop	{r4, sl, fp, pc}
   15a54:	push	{r4, r5, r6, r7, fp, lr}
   15a58:	add	fp, sp, #16
   15a5c:	mov	r4, r1
   15a60:	mov	r1, #0
   15a64:	mov	r6, r2
   15a68:	bl	11030 <setlocale@plt>
   15a6c:	cmp	r0, #0
   15a70:	beq	15aa0 <__assert_fail@plt+0x4a10>
   15a74:	mov	r7, r0
   15a78:	bl	10fa0 <strlen@plt>
   15a7c:	cmp	r0, r6
   15a80:	bcs	15ac0 <__assert_fail@plt+0x4a30>
   15a84:	add	r2, r0, #1
   15a88:	mov	r0, r4
   15a8c:	mov	r1, r7
   15a90:	bl	10e98 <memcpy@plt>
   15a94:	mov	r5, #0
   15a98:	mov	r0, r5
   15a9c:	pop	{r4, r5, r6, r7, fp, pc}
   15aa0:	cmp	r6, #0
   15aa4:	mov	r5, #22
   15aa8:	movne	r0, #0
   15aac:	strbne	r0, [r4]
   15ab0:	movne	r0, r5
   15ab4:	popne	{r4, r5, r6, r7, fp, pc}
   15ab8:	mov	r0, r5
   15abc:	pop	{r4, r5, r6, r7, fp, pc}
   15ac0:	mov	r5, #34	; 0x22
   15ac4:	cmp	r6, #0
   15ac8:	beq	15ae8 <__assert_fail@plt+0x4a58>
   15acc:	sub	r6, r6, #1
   15ad0:	mov	r0, r4
   15ad4:	mov	r1, r7
   15ad8:	mov	r2, r6
   15adc:	bl	10e98 <memcpy@plt>
   15ae0:	mov	r0, #0
   15ae4:	strb	r0, [r4, r6]
   15ae8:	mov	r0, r5
   15aec:	pop	{r4, r5, r6, r7, fp, pc}
   15af0:	mov	r1, #0
   15af4:	b	11030 <setlocale@plt>
   15af8:	cmp	r3, #0
   15afc:	cmpeq	r2, #0
   15b00:	bne	15b18 <__assert_fail@plt+0x4a88>
   15b04:	cmp	r1, #0
   15b08:	cmpeq	r0, #0
   15b0c:	mvnne	r1, #0
   15b10:	mvnne	r0, #0
   15b14:	b	15b34 <__assert_fail@plt+0x4aa4>
   15b18:	sub	sp, sp, #8
   15b1c:	push	{sp, lr}
   15b20:	bl	15b44 <__assert_fail@plt+0x4ab4>
   15b24:	ldr	lr, [sp, #4]
   15b28:	add	sp, sp, #8
   15b2c:	pop	{r2, r3}
   15b30:	bx	lr
   15b34:	push	{r1, lr}
   15b38:	mov	r0, #8
   15b3c:	bl	10e44 <raise@plt>
   15b40:	pop	{r1, pc}
   15b44:	cmp	r1, r3
   15b48:	cmpeq	r0, r2
   15b4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b50:	mov	r4, r0
   15b54:	movcc	r0, #0
   15b58:	mov	r5, r1
   15b5c:	ldr	lr, [sp, #36]	; 0x24
   15b60:	movcc	r1, r0
   15b64:	bcc	15c60 <__assert_fail@plt+0x4bd0>
   15b68:	cmp	r3, #0
   15b6c:	clzeq	ip, r2
   15b70:	clzne	ip, r3
   15b74:	addeq	ip, ip, #32
   15b78:	cmp	r5, #0
   15b7c:	clzeq	r1, r4
   15b80:	addeq	r1, r1, #32
   15b84:	clzne	r1, r5
   15b88:	sub	ip, ip, r1
   15b8c:	sub	sl, ip, #32
   15b90:	lsl	r9, r3, ip
   15b94:	rsb	fp, ip, #32
   15b98:	orr	r9, r9, r2, lsl sl
   15b9c:	orr	r9, r9, r2, lsr fp
   15ba0:	lsl	r8, r2, ip
   15ba4:	cmp	r5, r9
   15ba8:	cmpeq	r4, r8
   15bac:	movcc	r0, #0
   15bb0:	movcc	r1, r0
   15bb4:	bcc	15bd0 <__assert_fail@plt+0x4b40>
   15bb8:	mov	r0, #1
   15bbc:	subs	r4, r4, r8
   15bc0:	lsl	r1, r0, sl
   15bc4:	orr	r1, r1, r0, lsr fp
   15bc8:	lsl	r0, r0, ip
   15bcc:	sbc	r5, r5, r9
   15bd0:	cmp	ip, #0
   15bd4:	beq	15c60 <__assert_fail@plt+0x4bd0>
   15bd8:	lsr	r6, r8, #1
   15bdc:	orr	r6, r6, r9, lsl #31
   15be0:	lsr	r7, r9, #1
   15be4:	mov	r2, ip
   15be8:	b	15c0c <__assert_fail@plt+0x4b7c>
   15bec:	subs	r3, r4, r6
   15bf0:	sbc	r8, r5, r7
   15bf4:	adds	r3, r3, r3
   15bf8:	adc	r8, r8, r8
   15bfc:	adds	r4, r3, #1
   15c00:	adc	r5, r8, #0
   15c04:	subs	r2, r2, #1
   15c08:	beq	15c28 <__assert_fail@plt+0x4b98>
   15c0c:	cmp	r5, r7
   15c10:	cmpeq	r4, r6
   15c14:	bcs	15bec <__assert_fail@plt+0x4b5c>
   15c18:	adds	r4, r4, r4
   15c1c:	adc	r5, r5, r5
   15c20:	subs	r2, r2, #1
   15c24:	bne	15c0c <__assert_fail@plt+0x4b7c>
   15c28:	lsr	r3, r4, ip
   15c2c:	orr	r3, r3, r5, lsl fp
   15c30:	lsr	r2, r5, ip
   15c34:	orr	r3, r3, r5, lsr sl
   15c38:	adds	r0, r0, r4
   15c3c:	mov	r4, r3
   15c40:	lsl	r3, r2, ip
   15c44:	orr	r3, r3, r4, lsl sl
   15c48:	lsl	ip, r4, ip
   15c4c:	orr	r3, r3, r4, lsr fp
   15c50:	adc	r1, r1, r5
   15c54:	subs	r0, r0, ip
   15c58:	mov	r5, r2
   15c5c:	sbc	r1, r1, r3
   15c60:	cmp	lr, #0
   15c64:	strdne	r4, [lr]
   15c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15c70:	mov	r7, r0
   15c74:	ldr	r6, [pc, #72]	; 15cc4 <__assert_fail@plt+0x4c34>
   15c78:	ldr	r5, [pc, #72]	; 15cc8 <__assert_fail@plt+0x4c38>
   15c7c:	add	r6, pc, r6
   15c80:	add	r5, pc, r5
   15c84:	sub	r6, r6, r5
   15c88:	mov	r8, r1
   15c8c:	mov	r9, r2
   15c90:	bl	10e0c <calloc@plt-0x20>
   15c94:	asrs	r6, r6, #2
   15c98:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c9c:	mov	r4, #0
   15ca0:	add	r4, r4, #1
   15ca4:	ldr	r3, [r5], #4
   15ca8:	mov	r2, r9
   15cac:	mov	r1, r8
   15cb0:	mov	r0, r7
   15cb4:	blx	r3
   15cb8:	cmp	r6, r4
   15cbc:	bne	15ca0 <__assert_fail@plt+0x4c10>
   15cc0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15cc4:	andeq	r1, r1, r8, lsl #5
   15cc8:	andeq	r1, r1, r0, lsl #5
   15ccc:	bx	lr
   15cd0:	ldr	r3, [pc, #12]	; 15ce4 <__assert_fail@plt+0x4c54>
   15cd4:	mov	r1, #0
   15cd8:	add	r3, pc, r3
   15cdc:	ldr	r2, [r3]
   15ce0:	b	10fc4 <__cxa_atexit@plt>
   15ce4:	andeq	r1, r1, r4, lsl #8

Disassembly of section .fini:

00015ce8 <.fini>:
   15ce8:	push	{r3, lr}
   15cec:	pop	{r3, pc}
