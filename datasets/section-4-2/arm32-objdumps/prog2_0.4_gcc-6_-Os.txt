
../repos/prog2/0.4:     file format elf32-littlearm


Disassembly of section .init:

000105e4 <.init>:
   105e4:	push	{r3, lr}
   105e8:	bl	10798 <_start@@Base+0x3c>
   105ec:	pop	{r3, pc}

Disassembly of section .plt:

000105f0 <printf@plt-0x14>:
   105f0:	push	{lr}		; (str lr, [sp, #-4]!)
   105f4:	ldr	lr, [pc, #4]	; 10600 <printf@plt-0x4>
   105f8:	add	lr, pc, lr
   105fc:	ldr	pc, [lr, #8]!
   10600:	andeq	r0, r1, r0, lsl #20

00010604 <printf@plt>:
   10604:	add	ip, pc, #0, 12
   10608:	add	ip, ip, #16, 20	; 0x10000
   1060c:	ldr	pc, [ip, #2560]!	; 0xa00

00010610 <puts@plt>:
   10610:	add	ip, pc, #0, 12
   10614:	add	ip, ip, #16, 20	; 0x10000
   10618:	ldr	pc, [ip, #2552]!	; 0x9f8

0001061c <malloc@plt>:
   1061c:	add	ip, pc, #0, 12
   10620:	add	ip, ip, #16, 20	; 0x10000
   10624:	ldr	pc, [ip, #2544]!	; 0x9f0

00010628 <__libc_start_main@plt>:
   10628:	add	ip, pc, #0, 12
   1062c:	add	ip, ip, #16, 20	; 0x10000
   10630:	ldr	pc, [ip, #2536]!	; 0x9e8

00010634 <__gmon_start__@plt>:
   10634:	add	ip, pc, #0, 12
   10638:	add	ip, ip, #16, 20	; 0x10000
   1063c:	ldr	pc, [ip, #2528]!	; 0x9e0

00010640 <__isoc99_scanf@plt>:
   10640:	add	ip, pc, #0, 12
   10644:	add	ip, ip, #16, 20	; 0x10000
   10648:	ldr	pc, [ip, #2520]!	; 0x9d8

0001064c <abort@plt>:
   1064c:	add	ip, pc, #0, 12
   10650:	add	ip, ip, #16, 20	; 0x10000
   10654:	ldr	pc, [ip, #2512]!	; 0x9d0

Disassembly of section .text:

00010658 <main@@Base>:
   10658:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1065c:	ldr	r0, [pc, #216]	; 1073c <main@@Base+0xe4>
   10660:	bl	10604 <printf@plt>
   10664:	add	r1, sp, #4
   10668:	ldr	r0, [pc, #208]	; 10740 <main@@Base+0xe8>
   1066c:	bl	10640 <__isoc99_scanf@plt>
   10670:	ldr	r3, [sp, #4]
   10674:	cmp	r3, #100	; 0x64
   10678:	ble	1068c <main@@Base+0x34>
   1067c:	ldr	r0, [pc, #192]	; 10744 <main@@Base+0xec>
   10680:	bl	10604 <printf@plt>
   10684:	mov	r3, #100	; 0x64
   10688:	str	r3, [sp, #4]
   1068c:	ldr	r0, [sp, #4]
   10690:	ldr	r7, [pc, #176]	; 10748 <main@@Base+0xf0>
   10694:	ldr	r8, [pc, #164]	; 10740 <main@@Base+0xe8>
   10698:	lsl	r0, r0, #2
   1069c:	bl	1061c <malloc@plt>
   106a0:	mov	r4, #0
   106a4:	mov	r5, r0
   106a8:	mov	r6, r0
   106ac:	ldr	r1, [sp, #4]
   106b0:	cmp	r4, r1
   106b4:	blt	106fc <main@@Base+0xa4>
   106b8:	mov	r0, r5
   106bc:	bl	10884 <ordenado@@Base>
   106c0:	cmp	r0, #0
   106c4:	beq	10730 <main@@Base+0xd8>
   106c8:	ldr	r0, [pc, #124]	; 1074c <main@@Base+0xf4>
   106cc:	bl	10604 <printf@plt>
   106d0:	ldr	r4, [sp, #4]
   106d4:	ldr	r6, [pc, #116]	; 10750 <main@@Base+0xf8>
   106d8:	sub	r4, r4, #1
   106dc:	cmp	r4, #0
   106e0:	ldr	r1, [r5, r4, lsl #2]
   106e4:	bgt	10720 <main@@Base+0xc8>
   106e8:	ldr	r0, [pc, #100]	; 10754 <main@@Base+0xfc>
   106ec:	bl	10604 <printf@plt>
   106f0:	mov	r0, #0
   106f4:	add	sp, sp, #8
   106f8:	pop	{r4, r5, r6, r7, r8, pc}
   106fc:	add	r4, r4, #1
   10700:	mov	r1, r4
   10704:	mov	r0, r7
   10708:	bl	10604 <printf@plt>
   1070c:	mov	r1, r6
   10710:	mov	r0, r8
   10714:	bl	10640 <__isoc99_scanf@plt>
   10718:	add	r6, r6, #4
   1071c:	b	106ac <main@@Base+0x54>
   10720:	mov	r0, r6
   10724:	bl	10604 <printf@plt>
   10728:	sub	r4, r4, #1
   1072c:	b	106dc <main@@Base+0x84>
   10730:	ldr	r0, [pc, #32]	; 10758 <main@@Base+0x100>
   10734:	bl	10610 <puts@plt>
   10738:	b	106f0 <main@@Base+0x98>
   1073c:	andeq	r0, r1, r8, lsr #18
   10740:	andeq	r0, r1, r9, asr #18
   10744:	andeq	r0, r1, ip, asr #18
   10748:	andeq	r0, r1, r9, ror r9
   1074c:	muleq	r1, r1, r9
   10750:	ldrdeq	r0, [r1], -r4
   10754:	ldrdeq	r0, [r1], -r8
   10758:	ldrdeq	r0, [r1], -sp

0001075c <_start@@Base>:
   1075c:	mov	fp, #0
   10760:	mov	lr, #0
   10764:	pop	{r1}		; (ldr r1, [sp], #4)
   10768:	mov	r2, sp
   1076c:	push	{r2}		; (str r2, [sp, #-4]!)
   10770:	push	{r0}		; (str r0, [sp, #-4]!)
   10774:	ldr	ip, [pc, #16]	; 1078c <_start@@Base+0x30>
   10778:	push	{ip}		; (str ip, [sp, #-4]!)
   1077c:	ldr	r0, [pc, #12]	; 10790 <_start@@Base+0x34>
   10780:	ldr	r3, [pc, #12]	; 10794 <_start@@Base+0x38>
   10784:	bl	10628 <__libc_start_main@plt>
   10788:	bl	1064c <abort@plt>
   1078c:	andeq	r0, r1, r8, lsl r9
   10790:	andeq	r0, r1, r8, asr r6
   10794:			; <UNDEFINED> instruction: 0x000108b8
   10798:	ldr	r3, [pc, #20]	; 107b4 <_start@@Base+0x58>
   1079c:	ldr	r2, [pc, #20]	; 107b8 <_start@@Base+0x5c>
   107a0:	add	r3, pc, r3
   107a4:	ldr	r2, [r3, r2]
   107a8:	cmp	r2, #0
   107ac:	bxeq	lr
   107b0:	b	10634 <__gmon_start__@plt>
   107b4:	andeq	r0, r1, r8, asr r8
   107b8:	andeq	r0, r0, r8, lsr #32
   107bc:	ldr	r3, [pc, #28]	; 107e0 <_start@@Base+0x84>
   107c0:	ldr	r0, [pc, #28]	; 107e4 <_start@@Base+0x88>
   107c4:	sub	r3, r3, r0
   107c8:	cmp	r3, #6
   107cc:	bxls	lr
   107d0:	ldr	r3, [pc, #16]	; 107e8 <_start@@Base+0x8c>
   107d4:	cmp	r3, #0
   107d8:	bxeq	lr
   107dc:	bx	r3
   107e0:	andeq	r1, r2, r7, lsr r0
   107e4:	andeq	r1, r2, r4, lsr r0
   107e8:	andeq	r0, r0, r0
   107ec:	ldr	r1, [pc, #36]	; 10818 <_start@@Base+0xbc>
   107f0:	ldr	r0, [pc, #36]	; 1081c <_start@@Base+0xc0>
   107f4:	sub	r1, r1, r0
   107f8:	asr	r1, r1, #2
   107fc:	add	r1, r1, r1, lsr #31
   10800:	asrs	r1, r1, #1
   10804:	bxeq	lr
   10808:	ldr	r3, [pc, #16]	; 10820 <_start@@Base+0xc4>
   1080c:	cmp	r3, #0
   10810:	bxeq	lr
   10814:	bx	r3
   10818:	andeq	r1, r2, r4, lsr r0
   1081c:	andeq	r1, r2, r4, lsr r0
   10820:	andeq	r0, r0, r0
   10824:	push	{r4, lr}
   10828:	ldr	r4, [pc, #24]	; 10848 <_start@@Base+0xec>
   1082c:	ldrb	r3, [r4]
   10830:	cmp	r3, #0
   10834:	popne	{r4, pc}
   10838:	bl	107bc <_start@@Base+0x60>
   1083c:	mov	r3, #1
   10840:	strb	r3, [r4]
   10844:	pop	{r4, pc}
   10848:	andeq	r1, r2, r4, lsr r0
   1084c:	ldr	r0, [pc, #40]	; 1087c <_start@@Base+0x120>
   10850:	ldr	r3, [r0]
   10854:	cmp	r3, #0
   10858:	bne	10860 <_start@@Base+0x104>
   1085c:	b	107ec <_start@@Base+0x90>
   10860:	ldr	r3, [pc, #24]	; 10880 <_start@@Base+0x124>
   10864:	cmp	r3, #0
   10868:	beq	1085c <_start@@Base+0x100>
   1086c:	push	{r4, lr}
   10870:	blx	r3
   10874:	pop	{r4, lr}
   10878:	b	107ec <_start@@Base+0x90>
   1087c:	andeq	r0, r2, r4, lsl pc
   10880:	andeq	r0, r0, r0

00010884 <ordenado@@Base>:
   10884:	ldr	r2, [r0]
   10888:	mov	r3, #1
   1088c:	cmp	r3, r1
   10890:	blt	1089c <ordenado@@Base+0x18>
   10894:	mov	r0, #1
   10898:	bx	lr
   1089c:	ldr	ip, [r0, r3, lsl #2]
   108a0:	cmp	r2, ip
   108a4:	addle	r3, r3, #1
   108a8:	movle	r2, ip
   108ac:	ble	1088c <ordenado@@Base+0x8>
   108b0:	mov	r0, #0
   108b4:	bx	lr

000108b8 <__libc_csu_init@@Base>:
   108b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   108bc:	mov	r7, r0
   108c0:	ldr	r6, [pc, #72]	; 10910 <__libc_csu_init@@Base+0x58>
   108c4:	ldr	r5, [pc, #72]	; 10914 <__libc_csu_init@@Base+0x5c>
   108c8:	add	r6, pc, r6
   108cc:	add	r5, pc, r5
   108d0:	sub	r6, r6, r5
   108d4:	mov	r8, r1
   108d8:	mov	r9, r2
   108dc:	bl	105e4 <printf@plt-0x20>
   108e0:	asrs	r6, r6, #2
   108e4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   108e8:	mov	r4, #0
   108ec:	add	r4, r4, #1
   108f0:	ldr	r3, [r5], #4
   108f4:	mov	r2, r9
   108f8:	mov	r1, r8
   108fc:	mov	r0, r7
   10900:	blx	r3
   10904:	cmp	r6, r4
   10908:	bne	108ec <__libc_csu_init@@Base+0x34>
   1090c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10910:	andeq	r0, r1, r0, asr #12
   10914:	andeq	r0, r1, r8, lsr r6

00010918 <__libc_csu_fini@@Base>:
   10918:	bx	lr

Disassembly of section .fini:

0001091c <.fini>:
   1091c:	push	{r3, lr}
   10920:	pop	{r3, pc}
