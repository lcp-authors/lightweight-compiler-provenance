
../repos/charybdis/tools/.libs/charybdis-mkfingerprint:     file format elf32-littlearm


Disassembly of section .init:

000104ac <.init>:
   104ac:	push	{r3, lr}
   104b0:	bl	1058c <strcmp@plt+0x48>
   104b4:	pop	{r3, pc}

Disassembly of section .plt:

000104b8 <abort@plt-0x14>:
   104b8:	push	{lr}		; (str lr, [sp, #-4]!)
   104bc:	ldr	lr, [pc, #4]	; 104c8 <abort@plt-0x4>
   104c0:	add	lr, pc, lr
   104c4:	ldr	pc, [lr, #8]!
   104c8:	andeq	r0, r1, r8, lsr fp

000104cc <abort@plt>:
   104cc:	add	ip, pc, #0, 12
   104d0:	add	ip, ip, #16, 20	; 0x10000
   104d4:	ldr	pc, [ip, #2872]!	; 0xb38

000104d8 <__libc_start_main@plt>:
   104d8:	add	ip, pc, #0, 12
   104dc:	add	ip, ip, #16, 20	; 0x10000
   104e0:	ldr	pc, [ip, #2864]!	; 0xb30

000104e4 <__gmon_start__@plt>:
   104e4:	add	ip, pc, #0, 12
   104e8:	add	ip, ip, #16, 20	; 0x10000
   104ec:	ldr	pc, [ip, #2856]!	; 0xb28

000104f0 <putchar@plt>:
   104f0:	add	ip, pc, #0, 12
   104f4:	add	ip, ip, #16, 20	; 0x10000
   104f8:	ldr	pc, [ip, #2848]!	; 0xb20

000104fc <memset@plt>:
   104fc:	add	ip, pc, #0, 12
   10500:	add	ip, ip, #16, 20	; 0x10000
   10504:	ldr	pc, [ip, #2840]!	; 0xb18

00010508 <perror@plt>:
   10508:	add	ip, pc, #0, 12
   1050c:	add	ip, ip, #16, 20	; 0x10000
   10510:	ldr	pc, [ip, #2832]!	; 0xb10

00010514 <printf@plt>:
   10514:	add	ip, pc, #0, 12
   10518:	add	ip, ip, #16, 20	; 0x10000
   1051c:	ldr	pc, [ip, #2824]!	; 0xb08

00010520 <fwrite@plt>:
   10520:	add	ip, pc, #0, 12
   10524:	add	ip, ip, #16, 20	; 0x10000
   10528:	ldr	pc, [ip, #2816]!	; 0xb00

0001052c <puts@plt>:
   1052c:	add	ip, pc, #0, 12
   10530:	add	ip, ip, #16, 20	; 0x10000
   10534:	ldr	pc, [ip, #2808]!	; 0xaf8

00010538 <rb_get_ssl_certfp_file@plt>:
   10538:	add	ip, pc, #0, 12
   1053c:	add	ip, ip, #16, 20	; 0x10000
   10540:	ldr	pc, [ip, #2800]!	; 0xaf0

00010544 <strcmp@plt>:
   10544:	add	ip, pc, #0, 12
   10548:	add	ip, ip, #16, 20	; 0x10000
   1054c:	ldr	pc, [ip, #2792]!	; 0xae8

Disassembly of section .text:

00010550 <.text>:
   10550:	mov	fp, #0
   10554:	mov	lr, #0
   10558:	pop	{r1}		; (ldr r1, [sp], #4)
   1055c:	mov	r2, sp
   10560:	push	{r2}		; (str r2, [sp, #-4]!)
   10564:	push	{r0}		; (str r0, [sp, #-4]!)
   10568:	ldr	ip, [pc, #16]	; 10580 <strcmp@plt+0x3c>
   1056c:	push	{ip}		; (str ip, [sp, #-4]!)
   10570:	ldr	r0, [pc, #12]	; 10584 <strcmp@plt+0x40>
   10574:	ldr	r3, [pc, #12]	; 10588 <strcmp@plt+0x44>
   10578:	bl	104d8 <__libc_start_main@plt>
   1057c:	bl	104cc <abort@plt>
   10580:	andeq	r0, r1, ip, lsr #17
   10584:	andeq	r0, r1, r8, ror r6
   10588:	andeq	r0, r1, ip, asr #16
   1058c:	ldr	r3, [pc, #20]	; 105a8 <strcmp@plt+0x64>
   10590:	ldr	r2, [pc, #20]	; 105ac <strcmp@plt+0x68>
   10594:	add	r3, pc, r3
   10598:	ldr	r2, [r3, r2]
   1059c:	cmp	r2, #0
   105a0:	bxeq	lr
   105a4:	b	104e4 <__gmon_start__@plt>
   105a8:	andeq	r0, r1, r4, ror #20
   105ac:	andeq	r0, r0, r8, lsr r0
   105b0:	ldr	r3, [pc, #28]	; 105d4 <strcmp@plt+0x90>
   105b4:	ldr	r0, [pc, #28]	; 105d8 <strcmp@plt+0x94>
   105b8:	sub	r3, r3, r0
   105bc:	cmp	r3, #6
   105c0:	bxls	lr
   105c4:	ldr	r3, [pc, #16]	; 105dc <strcmp@plt+0x98>
   105c8:	cmp	r3, #0
   105cc:	bxeq	lr
   105d0:	bx	r3
   105d4:	andeq	r1, r2, r7, asr #32
   105d8:	andeq	r1, r2, r4, asr #32
   105dc:	andeq	r0, r0, r0
   105e0:	ldr	r1, [pc, #36]	; 1060c <strcmp@plt+0xc8>
   105e4:	ldr	r0, [pc, #36]	; 10610 <strcmp@plt+0xcc>
   105e8:	sub	r1, r1, r0
   105ec:	asr	r1, r1, #2
   105f0:	add	r1, r1, r1, lsr #31
   105f4:	asrs	r1, r1, #1
   105f8:	bxeq	lr
   105fc:	ldr	r3, [pc, #16]	; 10614 <strcmp@plt+0xd0>
   10600:	cmp	r3, #0
   10604:	bxeq	lr
   10608:	bx	r3
   1060c:	andeq	r1, r2, r4, asr #32
   10610:	andeq	r1, r2, r4, asr #32
   10614:	andeq	r0, r0, r0
   10618:	push	{r4, lr}
   1061c:	ldr	r4, [pc, #24]	; 1063c <strcmp@plt+0xf8>
   10620:	ldrb	r3, [r4]
   10624:	cmp	r3, #0
   10628:	popne	{r4, pc}
   1062c:	bl	105b0 <strcmp@plt+0x6c>
   10630:	mov	r3, #1
   10634:	strb	r3, [r4]
   10638:	pop	{r4, pc}
   1063c:	andeq	r1, r2, ip, asr #32
   10640:	ldr	r0, [pc, #40]	; 10670 <strcmp@plt+0x12c>
   10644:	ldr	r3, [r0]
   10648:	cmp	r3, #0
   1064c:	bne	10654 <strcmp@plt+0x110>
   10650:	b	105e0 <strcmp@plt+0x9c>
   10654:	ldr	r3, [pc, #24]	; 10674 <strcmp@plt+0x130>
   10658:	cmp	r3, #0
   1065c:	beq	10650 <strcmp@plt+0x10c>
   10660:	push	{r4, lr}
   10664:	blx	r3
   10668:	pop	{r4, lr}
   1066c:	b	105e0 <strcmp@plt+0x9c>
   10670:	strdeq	r0, [r2], -ip
   10674:	andeq	r0, r0, r0
   10678:	push	{r4, r5, r6, lr}
   1067c:	sub	sp, sp, #72	; 0x48
   10680:	mov	r5, r0
   10684:	mov	r4, r1
   10688:	mov	r2, #65	; 0x41
   1068c:	mov	r1, #0
   10690:	add	r0, sp, #4
   10694:	bl	104fc <memset@plt>
   10698:	cmp	r5, #3
   1069c:	bne	10718 <strcmp@plt+0x1d4>
   106a0:	ldr	r5, [r4, #4]
   106a4:	ldr	r4, [r4, #8]
   106a8:	ldr	r1, [pc, #344]	; 10808 <strcmp@plt+0x2c4>
   106ac:	mov	r0, r5
   106b0:	bl	10544 <strcmp@plt>
   106b4:	subs	r2, r0, #0
   106b8:	beq	10748 <strcmp@plt+0x204>
   106bc:	ldr	r1, [pc, #328]	; 1080c <strcmp@plt+0x2c8>
   106c0:	mov	r0, r5
   106c4:	bl	10544 <strcmp@plt>
   106c8:	cmp	r0, #0
   106cc:	beq	10750 <strcmp@plt+0x20c>
   106d0:	ldr	r1, [pc, #312]	; 10810 <strcmp@plt+0x2cc>
   106d4:	mov	r0, r5
   106d8:	bl	10544 <strcmp@plt>
   106dc:	cmp	r0, #0
   106e0:	beq	107c0 <strcmp@plt+0x27c>
   106e4:	ldr	r1, [pc, #296]	; 10814 <strcmp@plt+0x2d0>
   106e8:	mov	r0, r5
   106ec:	bl	10544 <strcmp@plt>
   106f0:	cmp	r0, #0
   106f4:	beq	107cc <strcmp@plt+0x288>
   106f8:	ldr	r1, [pc, #280]	; 10818 <strcmp@plt+0x2d4>
   106fc:	mov	r0, r5
   10700:	bl	10544 <strcmp@plt>
   10704:	cmp	r0, #0
   10708:	bne	10734 <strcmp@plt+0x1f0>
   1070c:	ldr	r6, [pc, #264]	; 1081c <strcmp@plt+0x2d8>
   10710:	ldr	r2, [pc, #264]	; 10820 <strcmp@plt+0x2dc>
   10714:	b	10758 <strcmp@plt+0x214>
   10718:	ldr	r0, [pc, #260]	; 10824 <strcmp@plt+0x2e0>
   1071c:	bl	1052c <puts@plt>
   10720:	ldr	r0, [pc, #256]	; 10828 <strcmp@plt+0x2e4>
   10724:	bl	1052c <puts@plt>
   10728:	mov	r0, #1
   1072c:	add	sp, sp, #72	; 0x48
   10730:	pop	{r4, r5, r6, pc}
   10734:	mov	r1, r5
   10738:	ldr	r0, [pc, #236]	; 1082c <strcmp@plt+0x2e8>
   1073c:	bl	10514 <printf@plt>
   10740:	mov	r0, #1
   10744:	b	1072c <strcmp@plt+0x1e8>
   10748:	ldr	r6, [pc, #224]	; 10830 <strcmp@plt+0x2ec>
   1074c:	b	10758 <strcmp@plt+0x214>
   10750:	ldr	r6, [pc, #216]	; 10830 <strcmp@plt+0x2ec>
   10754:	mov	r2, #1
   10758:	add	r1, sp, #4
   1075c:	mov	r0, r4
   10760:	bl	10538 <rb_get_ssl_certfp_file@plt>
   10764:	subs	r5, r0, #0
   10768:	blt	107d8 <strcmp@plt+0x294>
   1076c:	cmp	r5, #0
   10770:	beq	107e8 <strcmp@plt+0x2a4>
   10774:	mov	r1, r6
   10778:	ldr	r0, [pc, #180]	; 10834 <strcmp@plt+0x2f0>
   1077c:	bl	10514 <printf@plt>
   10780:	cmp	r5, #0
   10784:	ble	107b0 <strcmp@plt+0x26c>
   10788:	add	r4, sp, #3
   1078c:	add	r3, sp, #72	; 0x48
   10790:	add	r5, r3, r5
   10794:	sub	r5, r5, #69	; 0x45
   10798:	ldr	r6, [pc, #152]	; 10838 <strcmp@plt+0x2f4>
   1079c:	ldrb	r1, [r4, #1]!
   107a0:	mov	r0, r6
   107a4:	bl	10514 <printf@plt>
   107a8:	cmp	r4, r5
   107ac:	bne	1079c <strcmp@plt+0x258>
   107b0:	mov	r0, #10
   107b4:	bl	104f0 <putchar@plt>
   107b8:	mov	r0, #0
   107bc:	b	1072c <strcmp@plt+0x1e8>
   107c0:	ldr	r6, [pc, #104]	; 10830 <strcmp@plt+0x2ec>
   107c4:	mov	r2, #2
   107c8:	b	10758 <strcmp@plt+0x214>
   107cc:	ldr	r6, [pc, #104]	; 1083c <strcmp@plt+0x2f8>
   107d0:	ldr	r2, [pc, #104]	; 10840 <strcmp@plt+0x2fc>
   107d4:	b	10758 <strcmp@plt+0x214>
   107d8:	mov	r0, r4
   107dc:	bl	10508 <perror@plt>
   107e0:	mov	r0, #1
   107e4:	b	1072c <strcmp@plt+0x1e8>
   107e8:	ldr	r3, [pc, #84]	; 10844 <strcmp@plt+0x300>
   107ec:	ldr	r3, [r3]
   107f0:	mov	r2, #14
   107f4:	mov	r1, #1
   107f8:	ldr	r0, [pc, #72]	; 10848 <strcmp@plt+0x304>
   107fc:	bl	10520 <fwrite@plt>
   10800:	mov	r0, #1
   10804:	b	1072c <strcmp@plt+0x1e8>
   10808:	andeq	r0, r1, r0, asr #18
   1080c:	andeq	r0, r1, r8, asr #18
   10810:	andeq	r0, r1, r0, asr r9
   10814:	andeq	r0, r1, r8, asr r9
   10818:	andeq	r0, r1, r4, lsr r9
   1081c:	andeq	r0, r1, ip, asr #17
   10820:	andeq	r1, r0, r2
   10824:	ldrdeq	r0, [r1], -ip
   10828:	andeq	r0, r1, r0, lsl #18
   1082c:	andeq	r0, r1, r4, ror #18
   10830:	andeq	r0, r1, r4, asr #18
   10834:	andeq	r0, r1, r8, lsl #19
   10838:	andeq	r0, r1, ip, lsl #19
   1083c:			; <UNDEFINED> instruction: 0x000108bc
   10840:	andeq	r1, r0, r1
   10844:	andeq	r1, r2, r8, asr #32
   10848:	andeq	r0, r1, r8, ror r9
   1084c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10850:	mov	r7, r0
   10854:	ldr	r6, [pc, #72]	; 108a4 <strcmp@plt+0x360>
   10858:	ldr	r5, [pc, #72]	; 108a8 <strcmp@plt+0x364>
   1085c:	add	r6, pc, r6
   10860:	add	r5, pc, r5
   10864:	sub	r6, r6, r5
   10868:	mov	r8, r1
   1086c:	mov	r9, r2
   10870:	bl	104ac <abort@plt-0x20>
   10874:	asrs	r6, r6, #2
   10878:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1087c:	mov	r4, #0
   10880:	add	r4, r4, #1
   10884:	ldr	r3, [r5], #4
   10888:	mov	r2, r9
   1088c:	mov	r1, r8
   10890:	mov	r0, r7
   10894:	blx	r3
   10898:	cmp	r6, r4
   1089c:	bne	10880 <strcmp@plt+0x33c>
   108a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108a4:	muleq	r1, r4, r6
   108a8:	andeq	r0, r1, ip, lsl #13
   108ac:	bx	lr

Disassembly of section .fini:

000108b0 <.fini>:
   108b0:	push	{r3, lr}
   108b4:	pop	{r3, pc}
