
../repos/coreutils/src/chown:     file format elf32-littlearm


Disassembly of section .init:

0001100c <.init>:
   1100c:	push	{r3, lr}
   11010:	bl	118e0 <__assert_fail@plt+0x554>
   11014:	pop	{r3, pc}

Disassembly of section .plt:

00011018 <fstatfs64@plt-0x14>:
   11018:	push	{lr}		; (str lr, [sp, #-4]!)
   1101c:	ldr	lr, [pc, #4]	; 11028 <fstatfs64@plt-0x4>
   11020:	add	lr, pc, lr
   11024:	ldr	pc, [lr, #8]!
   11028:	ldrdeq	sl, [r1], -r8

0001102c <fstatfs64@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #106496	; 0x1a000
   11034:	ldr	pc, [ip, #4056]!	; 0xfd8

00011038 <calloc@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #106496	; 0x1a000
   11040:	ldr	pc, [ip, #4048]!	; 0xfd0

00011044 <endgrent@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #106496	; 0x1a000
   1104c:	ldr	pc, [ip, #4040]!	; 0xfc8

00011050 <fputs_unlocked@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #106496	; 0x1a000
   11058:	ldr	pc, [ip, #4032]!	; 0xfc0

0001105c <raise@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #106496	; 0x1a000
   11064:	ldr	pc, [ip, #4024]!	; 0xfb8

00011068 <getpwnam@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #106496	; 0x1a000
   11070:	ldr	pc, [ip, #4016]!	; 0xfb0

00011074 <strcmp@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #106496	; 0x1a000
   1107c:	ldr	pc, [ip, #4008]!	; 0xfa8

00011080 <getpwuid@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #106496	; 0x1a000
   11088:	ldr	pc, [ip, #4000]!	; 0xfa0

0001108c <fflush@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #106496	; 0x1a000
   11094:	ldr	pc, [ip, #3992]!	; 0xf98

00011098 <memmove@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #106496	; 0x1a000
   110a0:	ldr	pc, [ip, #3984]!	; 0xf90

000110a4 <free@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #106496	; 0x1a000
   110ac:	ldr	pc, [ip, #3976]!	; 0xf88

000110b0 <__openat64_2@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #106496	; 0x1a000
   110b8:	ldr	pc, [ip, #3968]!	; 0xf80

000110bc <_exit@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #106496	; 0x1a000
   110c4:	ldr	pc, [ip, #3960]!	; 0xf78

000110c8 <memcpy@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #106496	; 0x1a000
   110d0:	ldr	pc, [ip, #3952]!	; 0xf70

000110d4 <mbsinit@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #106496	; 0x1a000
   110dc:	ldr	pc, [ip, #3944]!	; 0xf68

000110e0 <memcmp@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #106496	; 0x1a000
   110e8:	ldr	pc, [ip, #3936]!	; 0xf60

000110ec <stpcpy@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #106496	; 0x1a000
   110f4:	ldr	pc, [ip, #3928]!	; 0xf58

000110f8 <fputc_unlocked@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #106496	; 0x1a000
   11100:	ldr	pc, [ip, #3920]!	; 0xf50

00011104 <dcgettext@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #106496	; 0x1a000
   1110c:	ldr	pc, [ip, #3912]!	; 0xf48

00011110 <realloc@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #106496	; 0x1a000
   11118:	ldr	pc, [ip, #3904]!	; 0xf40

0001111c <textdomain@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #106496	; 0x1a000
   11124:	ldr	pc, [ip, #3896]!	; 0xf38

00011128 <__fxstatat64@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #106496	; 0x1a000
   11130:	ldr	pc, [ip, #3888]!	; 0xf30

00011134 <iswprint@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #106496	; 0x1a000
   1113c:	ldr	pc, [ip, #3880]!	; 0xf28

00011140 <__fxstat64@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #106496	; 0x1a000
   11148:	ldr	pc, [ip, #3872]!	; 0xf20

0001114c <fwrite@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #106496	; 0x1a000
   11154:	ldr	pc, [ip, #3864]!	; 0xf18

00011158 <lseek64@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #106496	; 0x1a000
   11160:	ldr	pc, [ip, #3856]!	; 0xf10

00011164 <__ctype_get_mb_cur_max@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #106496	; 0x1a000
   1116c:	ldr	pc, [ip, #3848]!	; 0xf08

00011170 <strcpy@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #106496	; 0x1a000
   11178:	ldr	pc, [ip, #3840]!	; 0xf00

0001117c <__fpending@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #106496	; 0x1a000
   11184:	ldr	pc, [ip, #3832]!	; 0xef8

00011188 <mbrtowc@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #106496	; 0x1a000
   11190:	ldr	pc, [ip, #3824]!	; 0xef0

00011194 <error@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #106496	; 0x1a000
   1119c:	ldr	pc, [ip, #3816]!	; 0xee8

000111a0 <open64@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #106496	; 0x1a000
   111a8:	ldr	pc, [ip, #3808]!	; 0xee0

000111ac <malloc@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #106496	; 0x1a000
   111b4:	ldr	pc, [ip, #3800]!	; 0xed8

000111b8 <__libc_start_main@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #106496	; 0x1a000
   111c0:	ldr	pc, [ip, #3792]!	; 0xed0

000111c4 <__freading@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #106496	; 0x1a000
   111cc:	ldr	pc, [ip, #3784]!	; 0xec8

000111d0 <__gmon_start__@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #106496	; 0x1a000
   111d8:	ldr	pc, [ip, #3776]!	; 0xec0

000111dc <getopt_long@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #106496	; 0x1a000
   111e4:	ldr	pc, [ip, #3768]!	; 0xeb8

000111e8 <__ctype_b_loc@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #106496	; 0x1a000
   111f0:	ldr	pc, [ip, #3760]!	; 0xeb0

000111f4 <exit@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #106496	; 0x1a000
   111fc:	ldr	pc, [ip, #3752]!	; 0xea8

00011200 <strtoul@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #106496	; 0x1a000
   11208:	ldr	pc, [ip, #3744]!	; 0xea0

0001120c <strlen@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #106496	; 0x1a000
   11214:	ldr	pc, [ip, #3736]!	; 0xe98

00011218 <strchr@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #106496	; 0x1a000
   11220:	ldr	pc, [ip, #3728]!	; 0xe90

00011224 <openat64@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #106496	; 0x1a000
   1122c:	ldr	pc, [ip, #3720]!	; 0xe88

00011230 <fchown@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #106496	; 0x1a000
   11238:	ldr	pc, [ip, #3712]!	; 0xe80

0001123c <__errno_location@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #106496	; 0x1a000
   11244:	ldr	pc, [ip, #3704]!	; 0xe78

00011248 <__cxa_atexit@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #106496	; 0x1a000
   11250:	ldr	pc, [ip, #3696]!	; 0xe70

00011254 <memset@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #106496	; 0x1a000
   1125c:	ldr	pc, [ip, #3688]!	; 0xe68

00011260 <__printf_chk@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #106496	; 0x1a000
   11268:	ldr	pc, [ip, #3680]!	; 0xe60

0001126c <fileno@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #106496	; 0x1a000
   11274:	ldr	pc, [ip, #3672]!	; 0xe58

00011278 <__fprintf_chk@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #106496	; 0x1a000
   11280:	ldr	pc, [ip, #3664]!	; 0xe50

00011284 <fclose@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #106496	; 0x1a000
   1128c:	ldr	pc, [ip, #3656]!	; 0xe48

00011290 <fseeko64@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #106496	; 0x1a000
   11298:	ldr	pc, [ip, #3648]!	; 0xe40

0001129c <fcntl64@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #106496	; 0x1a000
   112a4:	ldr	pc, [ip, #3640]!	; 0xe38

000112a8 <setlocale@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #106496	; 0x1a000
   112b0:	ldr	pc, [ip, #3632]!	; 0xe30

000112b4 <endpwent@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #106496	; 0x1a000
   112bc:	ldr	pc, [ip, #3624]!	; 0xe28

000112c0 <strrchr@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #106496	; 0x1a000
   112c8:	ldr	pc, [ip, #3616]!	; 0xe20

000112cc <nl_langinfo@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #106496	; 0x1a000
   112d4:	ldr	pc, [ip, #3608]!	; 0xe18

000112d8 <readdir64@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #106496	; 0x1a000
   112e0:	ldr	pc, [ip, #3600]!	; 0xe10

000112e4 <fdopendir@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #106496	; 0x1a000
   112ec:	ldr	pc, [ip, #3592]!	; 0xe08

000112f0 <dirfd@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #106496	; 0x1a000
   112f8:	ldr	pc, [ip, #3584]!	; 0xe00

000112fc <fchdir@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #106496	; 0x1a000
   11304:	ldr	pc, [ip, #3576]!	; 0xdf8

00011308 <qsort@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #106496	; 0x1a000
   11310:	ldr	pc, [ip, #3568]!	; 0xdf0

00011314 <fchownat@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #106496	; 0x1a000
   1131c:	ldr	pc, [ip, #3560]!	; 0xde8

00011320 <bindtextdomain@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #106496	; 0x1a000
   11328:	ldr	pc, [ip, #3552]!	; 0xde0

0001132c <__xstat64@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #106496	; 0x1a000
   11334:	ldr	pc, [ip, #3544]!	; 0xdd8

00011338 <strncmp@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #106496	; 0x1a000
   11340:	ldr	pc, [ip, #3536]!	; 0xdd0

00011344 <abort@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #106496	; 0x1a000
   1134c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011350 <close@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #106496	; 0x1a000
   11358:	ldr	pc, [ip, #3520]!	; 0xdc0

0001135c <__lxstat64@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #106496	; 0x1a000
   11364:	ldr	pc, [ip, #3512]!	; 0xdb8

00011368 <closedir@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #106496	; 0x1a000
   11370:	ldr	pc, [ip, #3504]!	; 0xdb0

00011374 <getgrgid@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #106496	; 0x1a000
   1137c:	ldr	pc, [ip, #3496]!	; 0xda8

00011380 <getgrnam@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #106496	; 0x1a000
   11388:	ldr	pc, [ip, #3488]!	; 0xda0

0001138c <__assert_fail@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #106496	; 0x1a000
   11394:	ldr	pc, [ip, #3480]!	; 0xd98

Disassembly of section .text:

00011398 <.text>:
   11398:	mvn	r3, #0
   1139c:	movw	r2, #49568	; 0xc1a0
   113a0:	movt	r2, #2
   113a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   113a8:	movw	r5, #45760	; 0xb2c0
   113ac:	movt	r5, #1
   113b0:	strd	r6, [sp, #8]
   113b4:	mov	r7, r0
   113b8:	strd	r8, [sp, #16]
   113bc:	mov	r6, r1
   113c0:	mov	r8, #16
   113c4:	strd	sl, [sp, #24]
   113c8:	mov	sl, r3
   113cc:	mov	fp, #0
   113d0:	str	lr, [sp, #32]
   113d4:	sub	sp, sp, #172	; 0xac
   113d8:	ldr	r0, [r1]
   113dc:	str	r2, [sp, #16]
   113e0:	str	r3, [sp, #24]
   113e4:	str	r3, [sp, #28]
   113e8:	str	r3, [sp, #32]
   113ec:	str	r3, [sp, #36]	; 0x24
   113f0:	bl	16454 <__assert_fail@plt+0x50c8>
   113f4:	movw	r1, #44956	; 0xaf9c
   113f8:	movt	r1, #1
   113fc:	ldr	r9, [pc, #1176]	; 1189c <__assert_fail@plt+0x510>
   11400:	mov	r0, #6
   11404:	bl	112a8 <setlocale@plt>
   11408:	movw	r1, #45696	; 0xb280
   1140c:	movt	r1, #1
   11410:	movw	r0, #45528	; 0xb1d8
   11414:	movt	r0, #1
   11418:	bl	11320 <bindtextdomain@plt>
   1141c:	movw	r0, #45528	; 0xb1d8
   11420:	movt	r0, #1
   11424:	bl	1111c <textdomain@plt>
   11428:	movw	r0, #11448	; 0x2cb8
   1142c:	movt	r0, #1
   11430:	bl	1a6a4 <__assert_fail@plt+0x9318>
   11434:	add	r0, sp, #40	; 0x28
   11438:	bl	11e74 <__assert_fail@plt+0xae8>
   1143c:	mov	r4, #0
   11440:	mov	r3, r9
   11444:	mov	r2, r5
   11448:	mov	r1, r6
   1144c:	mov	r0, r7
   11450:	str	r4, [sp]
   11454:	bl	111dc <getopt_long@plt>
   11458:	cmn	r0, #1
   1145c:	beq	11600 <__assert_fail@plt+0x274>
   11460:	cmp	r0, #102	; 0x66
   11464:	beq	11540 <__assert_fail@plt+0x1b4>
   11468:	bgt	11498 <__assert_fail@plt+0x10c>
   1146c:	cmp	r0, #76	; 0x4c
   11470:	beq	11538 <__assert_fail@plt+0x1ac>
   11474:	bgt	114c8 <__assert_fail@plt+0x13c>
   11478:	cmn	r0, #2
   1147c:	beq	115f8 <__assert_fail@plt+0x26c>
   11480:	cmp	r0, #72	; 0x48
   11484:	beq	11518 <__assert_fail@plt+0x18c>
   11488:	cmn	r0, #3
   1148c:	beq	1154c <__assert_fail@plt+0x1c0>
   11490:	mov	r0, #1
   11494:	bl	11994 <__assert_fail@plt+0x608>
   11498:	movw	r3, #257	; 0x101
   1149c:	cmp	r0, r3
   114a0:	beq	115b8 <__assert_fail@plt+0x22c>
   114a4:	bgt	114e8 <__assert_fail@plt+0x15c>
   114a8:	cmp	r0, #118	; 0x76
   114ac:	beq	115b0 <__assert_fail@plt+0x224>
   114b0:	cmp	r0, #256	; 0x100
   114b4:	beq	11520 <__assert_fail@plt+0x194>
   114b8:	cmp	r0, #104	; 0x68
   114bc:	bne	11490 <__assert_fail@plt+0x104>
   114c0:	mov	sl, r4
   114c4:	b	1143c <__assert_fail@plt+0xb0>
   114c8:	cmp	r0, #82	; 0x52
   114cc:	beq	115a4 <__assert_fail@plt+0x218>
   114d0:	cmp	r0, #99	; 0x63
   114d4:	beq	11598 <__assert_fail@plt+0x20c>
   114d8:	cmp	r0, #80	; 0x50
   114dc:	bne	11490 <__assert_fail@plt+0x104>
   114e0:	mov	r8, #16
   114e4:	b	1143c <__assert_fail@plt+0xb0>
   114e8:	movw	r3, #259	; 0x103
   114ec:	cmp	r0, r3
   114f0:	beq	11530 <__assert_fail@plt+0x1a4>
   114f4:	blt	11528 <__assert_fail@plt+0x19c>
   114f8:	cmp	r0, #260	; 0x104
   114fc:	bne	11490 <__assert_fail@plt+0x104>
   11500:	ldr	r3, [sp, #16]
   11504:	ldr	r2, [r3]
   11508:	movw	r3, #49576	; 0xc1a8
   1150c:	movt	r3, #2
   11510:	str	r2, [r3]
   11514:	b	1143c <__assert_fail@plt+0xb0>
   11518:	mov	r8, #17
   1151c:	b	1143c <__assert_fail@plt+0xb0>
   11520:	mov	sl, #1
   11524:	b	1143c <__assert_fail@plt+0xb0>
   11528:	mov	fp, r4
   1152c:	b	1143c <__assert_fail@plt+0xb0>
   11530:	mov	fp, #1
   11534:	b	1143c <__assert_fail@plt+0xb0>
   11538:	mov	r8, #2
   1153c:	b	1143c <__assert_fail@plt+0xb0>
   11540:	mov	r3, #1
   11544:	strb	r3, [sp, #53]	; 0x35
   11548:	b	1143c <__assert_fail@plt+0xb0>
   1154c:	movw	r1, #45728	; 0xb2a0
   11550:	movt	r1, #1
   11554:	movw	r2, #45744	; 0xb2b0
   11558:	movt	r2, #1
   1155c:	movw	r3, #49468	; 0xc13c
   11560:	movt	r3, #2
   11564:	movw	r0, #49564	; 0xc19c
   11568:	movt	r0, #2
   1156c:	str	r2, [sp]
   11570:	movw	r2, #45524	; 0xb1d4
   11574:	movt	r2, #1
   11578:	stmib	sp, {r1, r4}
   1157c:	movw	r1, #42976	; 0xa7e0
   11580:	movt	r1, #1
   11584:	ldr	r0, [r0]
   11588:	ldr	r3, [r3]
   1158c:	bl	19098 <__assert_fail@plt+0x7d0c>
   11590:	mov	r0, r4
   11594:	bl	111f4 <exit@plt>
   11598:	mov	r3, #1
   1159c:	str	r3, [sp, #40]	; 0x28
   115a0:	b	1143c <__assert_fail@plt+0xb0>
   115a4:	mov	r3, #1
   115a8:	strb	r3, [sp, #44]	; 0x2c
   115ac:	b	1143c <__assert_fail@plt+0xb0>
   115b0:	str	r4, [sp, #40]	; 0x28
   115b4:	b	1143c <__assert_fail@plt+0xb0>
   115b8:	ldr	r0, [sp, #16]
   115bc:	mov	r3, r4
   115c0:	add	r2, sp, #36	; 0x24
   115c4:	add	r1, sp, #32
   115c8:	str	r4, [sp]
   115cc:	ldr	r0, [r0]
   115d0:	bl	18b2c <__assert_fail@plt+0x77a0>
   115d4:	cmp	r0, #0
   115d8:	beq	1143c <__assert_fail@plt+0xb0>
   115dc:	ldr	r3, [sp, #16]
   115e0:	str	r0, [sp, #20]
   115e4:	ldr	r0, [r3]
   115e8:	bl	18744 <__assert_fail@plt+0x73b8>
   115ec:	mov	r1, r4
   115f0:	ldr	r3, [sp, #20]
   115f4:	b	11848 <__assert_fail@plt+0x4bc>
   115f8:	mov	r0, r4
   115fc:	bl	11994 <__assert_fail@plt+0x608>
   11600:	ldrb	r3, [sp, #44]	; 0x2c
   11604:	cmp	r3, r4
   11608:	beq	116fc <__assert_fail@plt+0x370>
   1160c:	cmp	r8, #16
   11610:	beq	11740 <__assert_fail@plt+0x3b4>
   11614:	movw	r3, #49576	; 0xc1a8
   11618:	movt	r3, #2
   1161c:	movw	r4, #49552	; 0xc190
   11620:	movt	r4, #2
   11624:	ldr	r5, [r3]
   11628:	adds	sl, sl, #0
   1162c:	ldr	r2, [r4]
   11630:	movne	sl, #1
   11634:	strb	sl, [sp, #52]	; 0x34
   11638:	cmp	r5, #0
   1163c:	sub	r3, r7, r2
   11640:	beq	11770 <__assert_fail@plt+0x3e4>
   11644:	cmp	r3, #0
   11648:	ble	116cc <__assert_fail@plt+0x340>
   1164c:	add	r2, sp, #64	; 0x40
   11650:	mov	r1, r5
   11654:	mov	r0, #3
   11658:	bl	1132c <__xstat64@plt>
   1165c:	cmp	r0, #0
   11660:	bne	1185c <__assert_fail@plt+0x4d0>
   11664:	ldr	r3, [sp, #88]	; 0x58
   11668:	ldr	r2, [sp, #92]	; 0x5c
   1166c:	mov	r0, r3
   11670:	str	r3, [sp, #24]
   11674:	str	r2, [sp, #28]
   11678:	bl	11f08 <__assert_fail@plt+0xb7c>
   1167c:	str	r0, [sp, #56]	; 0x38
   11680:	ldr	r0, [sp, #92]	; 0x5c
   11684:	bl	11ec4 <__assert_fail@plt+0xb38>
   11688:	str	r0, [sp, #60]	; 0x3c
   1168c:	ldrb	r3, [sp, #44]	; 0x2c
   11690:	tst	fp, r3
   11694:	bne	117b8 <__assert_fail@plt+0x42c>
   11698:	add	r3, sp, #40	; 0x28
   1169c:	ldr	r2, [sp, #32]
   116a0:	orr	r1, r8, #1024	; 0x400
   116a4:	str	r3, [sp, #8]
   116a8:	ldr	r0, [r4]
   116ac:	ldr	r3, [sp, #36]	; 0x24
   116b0:	add	r0, r6, r0, lsl #2
   116b4:	strd	r2, [sp]
   116b8:	ldrd	r2, [sp, #24]
   116bc:	bl	11f4c <__assert_fail@plt+0xbc0>
   116c0:	eor	r0, r0, #1
   116c4:	uxtb	r0, r0
   116c8:	bl	111f4 <exit@plt>
   116cc:	cmp	r2, r7
   116d0:	blt	11704 <__assert_fail@plt+0x378>
   116d4:	mov	r2, #5
   116d8:	movw	r1, #45816	; 0xb2f8
   116dc:	movt	r1, #1
   116e0:	mov	r0, #0
   116e4:	bl	11104 <dcgettext@plt>
   116e8:	mov	r1, #0
   116ec:	mov	r2, r0
   116f0:	mov	r0, r1
   116f4:	bl	11194 <error@plt>
   116f8:	b	11490 <__assert_fail@plt+0x104>
   116fc:	mov	r8, #16
   11700:	b	11614 <__assert_fail@plt+0x288>
   11704:	mov	r2, #5
   11708:	movw	r1, #45832	; 0xb308
   1170c:	movt	r1, #1
   11710:	mov	r0, #0
   11714:	bl	11104 <dcgettext@plt>
   11718:	sub	r7, r7, #-1073741823	; 0xc0000001
   1171c:	mov	r4, r0
   11720:	ldr	r0, [r6, r7, lsl #2]
   11724:	bl	18744 <__assert_fail@plt+0x73b8>
   11728:	mov	r1, #0
   1172c:	mov	r3, r0
   11730:	mov	r2, r4
   11734:	mov	r0, r1
   11738:	bl	11194 <error@plt>
   1173c:	b	11490 <__assert_fail@plt+0x104>
   11740:	cmp	sl, #1
   11744:	movne	sl, r4
   11748:	bne	11614 <__assert_fail@plt+0x288>
   1174c:	mov	r2, #5
   11750:	movw	r1, #45772	; 0xb2cc
   11754:	movt	r1, #1
   11758:	mov	r0, r4
   1175c:	bl	11104 <dcgettext@plt>
   11760:	mov	r2, r0
   11764:	mov	r1, r4
   11768:	mov	r0, sl
   1176c:	bl	11194 <error@plt>
   11770:	cmp	r3, #1
   11774:	ble	116cc <__assert_fail@plt+0x340>
   11778:	add	ip, sp, #60	; 0x3c
   1177c:	add	r3, sp, #56	; 0x38
   11780:	ldr	r0, [r6, r2, lsl #2]
   11784:	add	r1, sp, #24
   11788:	add	r2, sp, #28
   1178c:	str	ip, [sp]
   11790:	bl	18b2c <__assert_fail@plt+0x77a0>
   11794:	subs	r7, r0, #0
   11798:	bne	11834 <__assert_fail@plt+0x4a8>
   1179c:	ldr	r3, [sp, #56]	; 0x38
   117a0:	cmp	r3, #0
   117a4:	beq	11814 <__assert_fail@plt+0x488>
   117a8:	ldr	r3, [r4]
   117ac:	add	r3, r3, #1
   117b0:	str	r3, [r4]
   117b4:	b	1168c <__assert_fail@plt+0x300>
   117b8:	ldr	r0, [pc, #224]	; 118a0 <__assert_fail@plt+0x514>
   117bc:	bl	1875c <__assert_fail@plt+0x73d0>
   117c0:	cmp	r0, #0
   117c4:	mov	r5, r0
   117c8:	str	r0, [sp, #48]	; 0x30
   117cc:	bne	11698 <__assert_fail@plt+0x30c>
   117d0:	bl	1123c <__errno_location@plt>
   117d4:	ldr	r4, [r0]
   117d8:	mov	r2, #5
   117dc:	mov	r0, r5
   117e0:	movw	r1, #45860	; 0xb324
   117e4:	movt	r1, #1
   117e8:	bl	11104 <dcgettext@plt>
   117ec:	mov	r5, r0
   117f0:	movw	r1, #45892	; 0xb344
   117f4:	movt	r1, #1
   117f8:	mov	r0, #4
   117fc:	bl	18490 <__assert_fail@plt+0x7104>
   11800:	mov	r3, r0
   11804:	mov	r2, r5
   11808:	mov	r1, r4
   1180c:	mov	r0, #1
   11810:	bl	11194 <error@plt>
   11814:	ldr	r3, [sp, #60]	; 0x3c
   11818:	cmp	r3, #0
   1181c:	beq	117a8 <__assert_fail@plt+0x41c>
   11820:	movw	r0, #44956	; 0xaf9c
   11824:	movt	r0, #1
   11828:	bl	195f8 <__assert_fail@plt+0x826c>
   1182c:	str	r0, [sp, #56]	; 0x38
   11830:	b	117a8 <__assert_fail@plt+0x41c>
   11834:	ldr	r3, [r4]
   11838:	ldr	r0, [r6, r3, lsl #2]
   1183c:	bl	18744 <__assert_fail@plt+0x73b8>
   11840:	mov	r3, r7
   11844:	mov	r1, r5
   11848:	movw	r2, #45720	; 0xb298
   1184c:	movt	r2, #1
   11850:	str	r0, [sp]
   11854:	mov	r0, #1
   11858:	bl	11194 <error@plt>
   1185c:	bl	1123c <__errno_location@plt>
   11860:	ldr	r4, [r0]
   11864:	mov	r2, #5
   11868:	movw	r1, #45860	; 0xb324
   1186c:	movt	r1, #1
   11870:	mov	r0, #0
   11874:	bl	11104 <dcgettext@plt>
   11878:	mov	r6, r0
   1187c:	mov	r1, r5
   11880:	mov	r0, #4
   11884:	bl	18490 <__assert_fail@plt+0x7104>
   11888:	mov	r3, r0
   1188c:	mov	r2, r6
   11890:	mov	r1, r4
   11894:	mov	r0, #1
   11898:	bl	11194 <error@plt>
   1189c:	andeq	sl, r1, r0, lsl #14
   118a0:			; <UNDEFINED> instruction: 0x0002c1b0
   118a4:	mov	fp, #0
   118a8:	mov	lr, #0
   118ac:	pop	{r1}		; (ldr r1, [sp], #4)
   118b0:	mov	r2, sp
   118b4:	push	{r2}		; (str r2, [sp, #-4]!)
   118b8:	push	{r0}		; (str r0, [sp, #-4]!)
   118bc:	ldr	ip, [pc, #16]	; 118d4 <__assert_fail@plt+0x548>
   118c0:	push	{ip}		; (str ip, [sp, #-4]!)
   118c4:	ldr	r0, [pc, #12]	; 118d8 <__assert_fail@plt+0x54c>
   118c8:	ldr	r3, [pc, #12]	; 118dc <__assert_fail@plt+0x550>
   118cc:	bl	111b8 <__libc_start_main@plt>
   118d0:	bl	11344 <abort@plt>
   118d4:	andeq	sl, r1, r0, lsr #13
   118d8:	muleq	r1, r8, r3
   118dc:	andeq	sl, r1, r0, asr #12
   118e0:	ldr	r3, [pc, #20]	; 118fc <__assert_fail@plt+0x570>
   118e4:	ldr	r2, [pc, #20]	; 11900 <__assert_fail@plt+0x574>
   118e8:	add	r3, pc, r3
   118ec:	ldr	r2, [r3, r2]
   118f0:	cmp	r2, #0
   118f4:	bxeq	lr
   118f8:	b	111d0 <__gmon_start__@plt>
   118fc:	andeq	sl, r1, r0, lsl r7
   11900:	andeq	r0, r0, r0, lsr r1
   11904:	ldr	r0, [pc, #24]	; 11924 <__assert_fail@plt+0x598>
   11908:	ldr	r3, [pc, #24]	; 11928 <__assert_fail@plt+0x59c>
   1190c:	cmp	r3, r0
   11910:	bxeq	lr
   11914:	ldr	r3, [pc, #16]	; 1192c <__assert_fail@plt+0x5a0>
   11918:	cmp	r3, #0
   1191c:	bxeq	lr
   11920:	bx	r3
   11924:	andeq	ip, r2, r4, lsl #3
   11928:	andeq	ip, r2, r4, lsl #3
   1192c:	andeq	r0, r0, r0
   11930:	ldr	r0, [pc, #36]	; 1195c <__assert_fail@plt+0x5d0>
   11934:	ldr	r1, [pc, #36]	; 11960 <__assert_fail@plt+0x5d4>
   11938:	sub	r1, r1, r0
   1193c:	asr	r1, r1, #2
   11940:	add	r1, r1, r1, lsr #31
   11944:	asrs	r1, r1, #1
   11948:	bxeq	lr
   1194c:	ldr	r3, [pc, #16]	; 11964 <__assert_fail@plt+0x5d8>
   11950:	cmp	r3, #0
   11954:	bxeq	lr
   11958:	bx	r3
   1195c:	andeq	ip, r2, r4, lsl #3
   11960:	andeq	ip, r2, r4, lsl #3
   11964:	andeq	r0, r0, r0
   11968:	push	{r4, lr}
   1196c:	ldr	r4, [pc, #24]	; 1198c <__assert_fail@plt+0x600>
   11970:	ldrb	r3, [r4]
   11974:	cmp	r3, #0
   11978:	popne	{r4, pc}
   1197c:	bl	11904 <__assert_fail@plt+0x578>
   11980:	mov	r3, #1
   11984:	strb	r3, [r4]
   11988:	pop	{r4, pc}
   1198c:	andeq	ip, r2, r4, lsr #3
   11990:	b	11930 <__assert_fail@plt+0x5a4>
   11994:	subs	r6, r0, #0
   11998:	str	r7, [sp, #-8]!
   1199c:	str	lr, [sp, #4]
   119a0:	sub	sp, sp, #64	; 0x40
   119a4:	beq	119ec <__assert_fail@plt+0x660>
   119a8:	movw	r3, #49560	; 0xc198
   119ac:	movt	r3, #2
   119b0:	ldr	r4, [r3]
   119b4:	mov	r2, #5
   119b8:	movw	r1, #42984	; 0xa7e8
   119bc:	movt	r1, #1
   119c0:	mov	r0, #0
   119c4:	bl	11104 <dcgettext@plt>
   119c8:	movw	r3, #49608	; 0xc1c8
   119cc:	movt	r3, #2
   119d0:	mov	r2, r0
   119d4:	mov	r1, #1
   119d8:	ldr	r3, [r3]
   119dc:	mov	r0, r4
   119e0:	bl	11278 <__fprintf_chk@plt>
   119e4:	mov	r0, r6
   119e8:	bl	111f4 <exit@plt>
   119ec:	mov	r2, #5
   119f0:	movw	r1, #43024	; 0xa810
   119f4:	movt	r1, #1
   119f8:	movw	r4, #49608	; 0xc1c8
   119fc:	movt	r4, #2
   11a00:	movw	r7, #49564	; 0xc19c
   11a04:	movt	r7, #2
   11a08:	bl	11104 <dcgettext@plt>
   11a0c:	ldr	r3, [r4]
   11a10:	mov	r1, r0
   11a14:	mov	r0, #1
   11a18:	mov	r2, r3
   11a1c:	bl	11260 <__printf_chk@plt>
   11a20:	mov	r2, #5
   11a24:	movw	r1, #43124	; 0xa874
   11a28:	movt	r1, #1
   11a2c:	mov	r0, r6
   11a30:	bl	11104 <dcgettext@plt>
   11a34:	ldr	r1, [r7]
   11a38:	bl	11050 <fputs_unlocked@plt>
   11a3c:	mov	r2, #5
   11a40:	movw	r1, #43272	; 0xa908
   11a44:	movt	r1, #1
   11a48:	mov	r0, r6
   11a4c:	bl	11104 <dcgettext@plt>
   11a50:	ldr	r1, [r7]
   11a54:	bl	11050 <fputs_unlocked@plt>
   11a58:	mov	r2, #5
   11a5c:	movw	r1, #43476	; 0xa9d4
   11a60:	movt	r1, #1
   11a64:	mov	r0, r6
   11a68:	bl	11104 <dcgettext@plt>
   11a6c:	ldr	r1, [r7]
   11a70:	bl	11050 <fputs_unlocked@plt>
   11a74:	mov	r2, #5
   11a78:	movw	r1, #43708	; 0xaabc
   11a7c:	movt	r1, #1
   11a80:	mov	r0, r6
   11a84:	bl	11104 <dcgettext@plt>
   11a88:	ldr	r1, [r7]
   11a8c:	bl	11050 <fputs_unlocked@plt>
   11a90:	mov	r2, #5
   11a94:	movw	r1, #43828	; 0xab34
   11a98:	movt	r1, #1
   11a9c:	mov	r0, r6
   11aa0:	bl	11104 <dcgettext@plt>
   11aa4:	ldr	r1, [r7]
   11aa8:	bl	11050 <fputs_unlocked@plt>
   11aac:	mov	r2, #5
   11ab0:	movw	r1, #44168	; 0xac88
   11ab4:	movt	r1, #1
   11ab8:	mov	r0, r6
   11abc:	bl	11104 <dcgettext@plt>
   11ac0:	ldr	r1, [r7]
   11ac4:	bl	11050 <fputs_unlocked@plt>
   11ac8:	mov	r2, #5
   11acc:	movw	r1, #44296	; 0xad08
   11ad0:	movt	r1, #1
   11ad4:	mov	r0, r6
   11ad8:	bl	11104 <dcgettext@plt>
   11adc:	ldr	r1, [r7]
   11ae0:	bl	11050 <fputs_unlocked@plt>
   11ae4:	mov	r2, #5
   11ae8:	movw	r1, #44420	; 0xad84
   11aec:	movt	r1, #1
   11af0:	mov	r0, r6
   11af4:	bl	11104 <dcgettext@plt>
   11af8:	ldr	r1, [r7]
   11afc:	bl	11050 <fputs_unlocked@plt>
   11b00:	mov	r2, #5
   11b04:	movw	r1, #44492	; 0xadcc
   11b08:	movt	r1, #1
   11b0c:	mov	r0, r6
   11b10:	bl	11104 <dcgettext@plt>
   11b14:	ldr	r1, [r7]
   11b18:	bl	11050 <fputs_unlocked@plt>
   11b1c:	mov	r2, #5
   11b20:	movw	r1, #44960	; 0xafa0
   11b24:	movt	r1, #1
   11b28:	mov	r0, r6
   11b2c:	bl	11104 <dcgettext@plt>
   11b30:	ldr	r1, [r7]
   11b34:	bl	11050 <fputs_unlocked@plt>
   11b38:	mov	r2, #5
   11b3c:	movw	r1, #45008	; 0xafd0
   11b40:	movt	r1, #1
   11b44:	mov	r0, r6
   11b48:	bl	11104 <dcgettext@plt>
   11b4c:	ldr	r1, [r7]
   11b50:	bl	11050 <fputs_unlocked@plt>
   11b54:	mov	r2, #5
   11b58:	movw	r1, #45064	; 0xb008
   11b5c:	movt	r1, #1
   11b60:	mov	r0, r6
   11b64:	bl	11104 <dcgettext@plt>
   11b68:	ldr	r1, [r7]
   11b6c:	bl	11050 <fputs_unlocked@plt>
   11b70:	mov	r2, #5
   11b74:	movw	r1, #45256	; 0xb0c8
   11b78:	movt	r1, #1
   11b7c:	mov	r0, r6
   11b80:	bl	11104 <dcgettext@plt>
   11b84:	ldr	ip, [r4]
   11b88:	mov	r1, r0
   11b8c:	mov	r0, #1
   11b90:	mov	r3, ip
   11b94:	mov	r2, ip
   11b98:	str	ip, [sp]
   11b9c:	bl	11260 <__printf_chk@plt>
   11ba0:	movw	lr, #42696	; 0xa6c8
   11ba4:	movt	lr, #1
   11ba8:	ldr	ip, [lr]
   11bac:	ldr	r4, [lr, #4]
   11bb0:	ldrd	r8, [lr, #8]
   11bb4:	subs	r1, ip, #0
   11bb8:	str	ip, [sp, #8]
   11bbc:	ldrd	r2, [lr, #16]
   11bc0:	str	r4, [sp, #12]
   11bc4:	ldrd	r4, [lr, #24]
   11bc8:	strd	r8, [sp, #16]
   11bcc:	ldrd	r8, [lr, #32]
   11bd0:	strd	r2, [sp, #24]
   11bd4:	ldrd	r2, [lr, #40]	; 0x28
   11bd8:	strd	r4, [sp, #32]
   11bdc:	ldrd	r4, [lr, #48]	; 0x30
   11be0:	strd	r8, [sp, #40]	; 0x28
   11be4:	strd	r2, [sp, #48]	; 0x30
   11be8:	strd	r4, [sp, #56]	; 0x38
   11bec:	movwne	r5, #42976	; 0xa7e0
   11bf0:	add	r4, sp, #8
   11bf4:	movtne	r5, #1
   11bf8:	bne	11cf0 <__assert_fail@plt+0x964>
   11bfc:	ldr	r4, [r4, #4]
   11c00:	movw	r1, #45460	; 0xb194
   11c04:	movt	r1, #1
   11c08:	mov	r2, #5
   11c0c:	cmp	r4, #0
   11c10:	beq	11d04 <__assert_fail@plt+0x978>
   11c14:	mov	r0, #0
   11c18:	bl	11104 <dcgettext@plt>
   11c1c:	mov	r1, r0
   11c20:	movw	r3, #45484	; 0xb1ac
   11c24:	movt	r3, #1
   11c28:	movw	r2, #45524	; 0xb1d4
   11c2c:	movt	r2, #1
   11c30:	mov	r0, #1
   11c34:	bl	11260 <__printf_chk@plt>
   11c38:	mov	r1, #0
   11c3c:	mov	r0, #5
   11c40:	bl	112a8 <setlocale@plt>
   11c44:	cmp	r0, #0
   11c48:	movweq	r5, #42976	; 0xa7e0
   11c4c:	movteq	r5, #1
   11c50:	beq	11c74 <__assert_fail@plt+0x8e8>
   11c54:	movw	r1, #45540	; 0xb1e4
   11c58:	movt	r1, #1
   11c5c:	mov	r2, #3
   11c60:	movw	r5, #42976	; 0xa7e0
   11c64:	movt	r5, #1
   11c68:	bl	11338 <strncmp@plt>
   11c6c:	cmp	r0, #0
   11c70:	bne	11dbc <__assert_fail@plt+0xa30>
   11c74:	mov	r2, #5
   11c78:	movw	r1, #45616	; 0xb230
   11c7c:	movt	r1, #1
   11c80:	mov	r0, #0
   11c84:	bl	11104 <dcgettext@plt>
   11c88:	mov	r1, r0
   11c8c:	movw	r3, #42976	; 0xa7e0
   11c90:	movt	r3, #1
   11c94:	movw	r2, #45484	; 0xb1ac
   11c98:	movt	r2, #1
   11c9c:	mov	r0, #1
   11ca0:	bl	11260 <__printf_chk@plt>
   11ca4:	mov	r2, #5
   11ca8:	movw	r1, #45644	; 0xb24c
   11cac:	movt	r1, #1
   11cb0:	mov	r0, #0
   11cb4:	bl	11104 <dcgettext@plt>
   11cb8:	movw	r2, #45904	; 0xb350
   11cbc:	movt	r2, #1
   11cc0:	cmp	r4, r5
   11cc4:	movw	r3, #44956	; 0xaf9c
   11cc8:	movt	r3, #1
   11ccc:	mov	r1, r0
   11cd0:	moveq	r3, r2
   11cd4:	mov	r2, r4
   11cd8:	mov	r0, #1
   11cdc:	bl	11260 <__printf_chk@plt>
   11ce0:	b	119e4 <__assert_fail@plt+0x658>
   11ce4:	ldr	r1, [r4, #8]!
   11ce8:	cmp	r1, #0
   11cec:	beq	11bfc <__assert_fail@plt+0x870>
   11cf0:	mov	r0, r5
   11cf4:	bl	11074 <strcmp@plt>
   11cf8:	cmp	r0, #0
   11cfc:	bne	11ce4 <__assert_fail@plt+0x958>
   11d00:	b	11bfc <__assert_fail@plt+0x870>
   11d04:	mov	r0, r4
   11d08:	bl	11104 <dcgettext@plt>
   11d0c:	mov	r1, r0
   11d10:	movw	r3, #45484	; 0xb1ac
   11d14:	movt	r3, #1
   11d18:	movw	r2, #45524	; 0xb1d4
   11d1c:	movt	r2, #1
   11d20:	mov	r0, #1
   11d24:	bl	11260 <__printf_chk@plt>
   11d28:	mov	r1, r4
   11d2c:	mov	r0, #5
   11d30:	bl	112a8 <setlocale@plt>
   11d34:	cmp	r0, #0
   11d38:	beq	11d54 <__assert_fail@plt+0x9c8>
   11d3c:	movw	r1, #45540	; 0xb1e4
   11d40:	movt	r1, #1
   11d44:	mov	r2, #3
   11d48:	bl	11338 <strncmp@plt>
   11d4c:	cmp	r0, #0
   11d50:	bne	11db0 <__assert_fail@plt+0xa24>
   11d54:	mov	r2, #5
   11d58:	movw	r1, #45616	; 0xb230
   11d5c:	movt	r1, #1
   11d60:	mov	r0, #0
   11d64:	bl	11104 <dcgettext@plt>
   11d68:	mov	r1, r0
   11d6c:	movw	r3, #42976	; 0xa7e0
   11d70:	movt	r3, #1
   11d74:	movw	r2, #45484	; 0xb1ac
   11d78:	movt	r2, #1
   11d7c:	mov	r0, #1
   11d80:	bl	11260 <__printf_chk@plt>
   11d84:	movw	r1, #45644	; 0xb24c
   11d88:	movt	r1, #1
   11d8c:	mov	r2, #5
   11d90:	mov	r0, #0
   11d94:	bl	11104 <dcgettext@plt>
   11d98:	movw	r4, #42976	; 0xa7e0
   11d9c:	movt	r4, #1
   11da0:	movw	r3, #45904	; 0xb350
   11da4:	movt	r3, #1
   11da8:	mov	r1, r0
   11dac:	b	11cd4 <__assert_fail@plt+0x948>
   11db0:	movw	r5, #42976	; 0xa7e0
   11db4:	movt	r5, #1
   11db8:	mov	r4, r5
   11dbc:	mov	r2, #5
   11dc0:	movw	r1, #45544	; 0xb1e8
   11dc4:	movt	r1, #1
   11dc8:	mov	r0, #0
   11dcc:	bl	11104 <dcgettext@plt>
   11dd0:	ldr	r1, [r7]
   11dd4:	bl	11050 <fputs_unlocked@plt>
   11dd8:	b	11c74 <__assert_fail@plt+0x8e8>
   11ddc:	subs	r3, r0, #0
   11de0:	strd	r4, [sp, #-16]!
   11de4:	str	r6, [sp, #8]
   11de8:	str	lr, [sp, #12]
   11dec:	beq	11e4c <__assert_fail@plt+0xac0>
   11df0:	cmp	r1, #0
   11df4:	beq	11e58 <__assert_fail@plt+0xacc>
   11df8:	mov	r4, r1
   11dfc:	mov	r5, r3
   11e00:	bl	1120c <strlen@plt>
   11e04:	mov	r6, r0
   11e08:	mov	r0, r4
   11e0c:	bl	1120c <strlen@plt>
   11e10:	add	r0, r6, r0
   11e14:	add	r0, r0, #2
   11e18:	bl	191a8 <__assert_fail@plt+0x7e1c>
   11e1c:	mov	r1, r5
   11e20:	mov	r6, r0
   11e24:	bl	110ec <stpcpy@plt>
   11e28:	mov	r3, #58	; 0x3a
   11e2c:	mov	r1, r4
   11e30:	strb	r3, [r0], #1
   11e34:	bl	11170 <strcpy@plt>
   11e38:	mov	r0, r6
   11e3c:	ldrd	r4, [sp]
   11e40:	ldr	r6, [sp, #8]
   11e44:	add	sp, sp, #12
   11e48:	pop	{pc}		; (ldr pc, [sp], #4)
   11e4c:	cmp	r1, #0
   11e50:	beq	11e6c <__assert_fail@plt+0xae0>
   11e54:	mov	r0, r1
   11e58:	ldrd	r4, [sp]
   11e5c:	ldr	r6, [sp, #8]
   11e60:	ldr	lr, [sp, #12]
   11e64:	add	sp, sp, #16
   11e68:	b	195f8 <__assert_fail@plt+0x826c>
   11e6c:	mov	r6, r1
   11e70:	b	11e38 <__assert_fail@plt+0xaac>
   11e74:	mov	r3, #0
   11e78:	mov	r1, #2
   11e7c:	mov	r2, #1
   11e80:	str	r1, [r0]
   11e84:	strb	r3, [r0, #4]
   11e88:	str	r3, [r0, #8]
   11e8c:	strh	r2, [r0, #12]
   11e90:	str	r3, [r0, #16]
   11e94:	str	r3, [r0, #20]
   11e98:	bx	lr
   11e9c:	str	r4, [sp, #-8]!
   11ea0:	mov	r4, r0
   11ea4:	ldr	r0, [r0, #16]
   11ea8:	str	lr, [sp, #4]
   11eac:	bl	12da4 <__assert_fail@plt+0x1a18>
   11eb0:	ldr	lr, [sp, #4]
   11eb4:	ldr	r0, [r4, #20]
   11eb8:	ldr	r4, [sp]
   11ebc:	add	sp, sp, #8
   11ec0:	b	12da4 <__assert_fail@plt+0x1a18>
   11ec4:	str	r4, [sp, #-8]!
   11ec8:	mov	r4, r0
   11ecc:	str	lr, [sp, #4]
   11ed0:	sub	sp, sp, #24
   11ed4:	bl	11374 <getgrgid@plt>
   11ed8:	subs	r1, r0, #0
   11edc:	beq	11ef8 <__assert_fail@plt+0xb6c>
   11ee0:	ldr	r0, [r1]
   11ee4:	bl	195f8 <__assert_fail@plt+0x826c>
   11ee8:	add	sp, sp, #24
   11eec:	ldr	r4, [sp]
   11ef0:	add	sp, sp, #4
   11ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   11ef8:	mov	r0, r4
   11efc:	mov	r2, sp
   11f00:	bl	16338 <__assert_fail@plt+0x4fac>
   11f04:	b	11ee4 <__assert_fail@plt+0xb58>
   11f08:	str	r4, [sp, #-8]!
   11f0c:	mov	r4, r0
   11f10:	str	lr, [sp, #4]
   11f14:	sub	sp, sp, #24
   11f18:	bl	11080 <getpwuid@plt>
   11f1c:	subs	r1, r0, #0
   11f20:	beq	11f3c <__assert_fail@plt+0xbb0>
   11f24:	ldr	r0, [r1]
   11f28:	bl	195f8 <__assert_fail@plt+0x826c>
   11f2c:	add	sp, sp, #24
   11f30:	ldr	r4, [sp]
   11f34:	add	sp, sp, #4
   11f38:	pop	{pc}		; (ldr pc, [sp], #4)
   11f3c:	mov	r0, r4
   11f40:	mov	r2, sp
   11f44:	bl	16338 <__assert_fail@plt+0x4fac>
   11f48:	b	11f28 <__assert_fail@plt+0xb9c>
   11f4c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11f50:	strd	r6, [sp, #8]
   11f54:	strd	r8, [sp, #16]
   11f58:	strd	sl, [sp, #24]
   11f5c:	str	lr, [sp, #32]
   11f60:	sub	sp, sp, #268	; 0x10c
   11f64:	ldr	r6, [sp, #312]	; 0x138
   11f68:	str	r2, [sp, #24]
   11f6c:	str	r3, [sp, #40]	; 0x28
   11f70:	ldr	r3, [sp, #304]	; 0x130
   11f74:	ldr	r2, [sp, #308]	; 0x134
   11f78:	and	r3, r3, r2
   11f7c:	cmn	r3, #1
   11f80:	str	r3, [sp, #20]
   11f84:	beq	1296c <__assert_fail@plt+0x15e0>
   11f88:	movw	r3, #46636	; 0xb62c
   11f8c:	movt	r3, #1
   11f90:	mov	r2, #0
   11f94:	mov	fp, #1
   11f98:	str	r3, [sp, #44]	; 0x2c
   11f9c:	movw	r3, #46892	; 0xb72c
   11fa0:	movt	r3, #1
   11fa4:	str	r3, [sp, #48]	; 0x30
   11fa8:	movw	r3, #46968	; 0xb778
   11fac:	movt	r3, #1
   11fb0:	str	r3, [sp, #52]	; 0x34
   11fb4:	bl	19664 <__assert_fail@plt+0x82d8>
   11fb8:	str	r0, [sp, #12]
   11fbc:	bl	1123c <__errno_location@plt>
   11fc0:	str	r0, [sp, #32]
   11fc4:	ldr	r0, [sp, #12]
   11fc8:	bl	1486c <__assert_fail@plt+0x34e0>
   11fcc:	subs	r9, r0, #0
   11fd0:	beq	120c0 <__assert_fail@plt+0xd34>
   11fd4:	ldrh	sl, [r9, #56]	; 0x38
   11fd8:	ldr	r3, [r9, #28]
   11fdc:	sub	r7, sl, #1
   11fe0:	str	r3, [sp, #16]
   11fe4:	cmp	r7, #9
   11fe8:	ldrls	pc, [pc, r7, lsl #2]
   11fec:	b	12170 <__assert_fail@plt+0xde4>
   11ff0:	andeq	r2, r1, r0, asr #6
   11ff4:	andeq	r2, r1, r8, ror #5
   11ff8:	andeq	r2, r1, r0, ror r1
   11ffc:	andeq	r2, r1, ip, lsr r4
   12000:	andeq	r2, r1, r0, ror r1
   12004:	andeq	r2, r1, r4, ror #2
   12008:	andeq	r2, r1, r0, lsl r1
   1200c:	andeq	r2, r1, r0, ror r1
   12010:	andeq	r2, r1, r0, ror r1
   12014:	andeq	r2, r1, r8, lsl r0
   12018:	ldr	r3, [r9, #48]	; 0x30
   1201c:	cmp	r3, #0
   12020:	bne	12030 <__assert_fail@plt+0xca4>
   12024:	ldr	r3, [r9, #16]
   12028:	cmp	r3, #0
   1202c:	beq	12ae0 <__assert_fail@plt+0x1754>
   12030:	ldrb	r4, [r6, #13]
   12034:	cmp	r4, #0
   12038:	movweq	r1, #46324	; 0xb4f4
   1203c:	movteq	r1, #1
   12040:	bne	1211c <__assert_fail@plt+0xd90>
   12044:	ldr	r5, [r9, #32]
   12048:	mov	r2, #5
   1204c:	mov	r0, r4
   12050:	bl	11104 <dcgettext@plt>
   12054:	mov	r7, r0
   12058:	mov	r0, #4
   1205c:	ldr	r1, [sp, #16]
   12060:	bl	18490 <__assert_fail@plt+0x7104>
   12064:	mov	r3, r0
   12068:	mov	r2, r7
   1206c:	mov	r1, r5
   12070:	mov	r0, r4
   12074:	bl	11194 <error@plt>
   12078:	ldr	r3, [r6]
   1207c:	mov	fp, r4
   12080:	mov	r5, r4
   12084:	mov	r7, r4
   12088:	mov	r4, #1
   1208c:	cmp	r3, #2
   12090:	bne	12134 <__assert_fail@plt+0xda8>
   12094:	ldrb	r3, [r6, #4]
   12098:	cmp	r3, #0
   1209c:	bne	11fc4 <__assert_fail@plt+0xc38>
   120a0:	mov	r1, r9
   120a4:	mov	r2, #4
   120a8:	ldr	r0, [sp, #12]
   120ac:	bl	14f20 <__assert_fail@plt+0x3b94>
   120b0:	ldr	r0, [sp, #12]
   120b4:	bl	1486c <__assert_fail@plt+0x34e0>
   120b8:	subs	r9, r0, #0
   120bc:	bne	11fd4 <__assert_fail@plt+0xc48>
   120c0:	ldr	r3, [sp, #32]
   120c4:	ldr	r4, [r3]
   120c8:	cmp	r4, #0
   120cc:	beq	120e0 <__assert_fail@plt+0xd54>
   120d0:	ldrb	fp, [r6, #13]
   120d4:	cmp	fp, #0
   120d8:	movne	fp, r9
   120dc:	beq	12aa0 <__assert_fail@plt+0x1714>
   120e0:	ldr	r0, [sp, #12]
   120e4:	bl	146e0 <__assert_fail@plt+0x3354>
   120e8:	cmp	r0, #0
   120ec:	bne	12a1c <__assert_fail@plt+0x1690>
   120f0:	mov	r0, fp
   120f4:	add	sp, sp, #268	; 0x10c
   120f8:	ldrd	r4, [sp]
   120fc:	ldrd	r6, [sp, #8]
   12100:	ldrd	r8, [sp, #16]
   12104:	ldrd	sl, [sp, #24]
   12108:	add	sp, sp, #32
   1210c:	pop	{pc}		; (ldr pc, [sp], #4)
   12110:	ldrb	r4, [r6, #13]
   12114:	cmp	r4, #0
   12118:	beq	128cc <__assert_fail@plt+0x1540>
   1211c:	mov	fp, #0
   12120:	mov	r5, fp
   12124:	mov	r7, fp
   12128:	ldr	r3, [r6]
   1212c:	cmp	r3, #2
   12130:	beq	12094 <__assert_fail@plt+0xd08>
   12134:	cmp	r3, #0
   12138:	bne	12094 <__assert_fail@plt+0xd08>
   1213c:	cmp	r7, #0
   12140:	moveq	r3, #3
   12144:	streq	r3, [sp, #36]	; 0x24
   12148:	bne	1290c <__assert_fail@plt+0x1580>
   1214c:	cmp	r5, #0
   12150:	bne	12894 <__assert_fail@plt+0x1508>
   12154:	mov	r8, r5
   12158:	ldr	sl, [r6, #16]
   1215c:	ldr	r4, [r6, #20]
   12160:	b	12580 <__assert_fail@plt+0x11f4>
   12164:	ldrb	r3, [r6, #4]
   12168:	cmp	r3, #0
   1216c:	beq	11fc4 <__assert_fail@plt+0xc38>
   12170:	ldr	r3, [sp, #20]
   12174:	add	r5, r9, #64	; 0x40
   12178:	ldrb	r4, [r6, #12]
   1217c:	ldr	r8, [r9, #24]
   12180:	cmn	r3, #1
   12184:	beq	125e8 <__assert_fail@plt+0x125c>
   12188:	cmp	r4, #0
   1218c:	beq	121a0 <__assert_fail@plt+0xe14>
   12190:	ldr	r3, [r9, #80]	; 0x50
   12194:	and	r3, r3, #61440	; 0xf000
   12198:	cmp	r3, #40960	; 0xa000
   1219c:	beq	12988 <__assert_fail@plt+0x15fc>
   121a0:	ldr	r3, [sp, #304]	; 0x130
   121a4:	uxth	r7, r7
   121a8:	bic	sl, sl, #2
   121ac:	cmp	sl, #4
   121b0:	cmpne	r7, #1
   121b4:	movls	r7, #1
   121b8:	movhi	r7, #0
   121bc:	cmn	r3, #1
   121c0:	beq	12454 <__assert_fail@plt+0x10c8>
   121c4:	ldr	r3, [r5, #24]
   121c8:	ldr	r2, [sp, #304]	; 0x130
   121cc:	cmp	r2, r3
   121d0:	beq	12454 <__assert_fail@plt+0x10c8>
   121d4:	cmp	r7, #0
   121d8:	beq	128c0 <__assert_fail@plt+0x1534>
   121dc:	ldr	ip, [r6, #8]
   121e0:	cmp	ip, #0
   121e4:	beq	12c90 <__assert_fail@plt+0x1904>
   121e8:	ldrd	r2, [ip]
   121ec:	ldrd	r0, [r5, #96]	; 0x60
   121f0:	cmp	r1, r3
   121f4:	cmpeq	r0, r2
   121f8:	moveq	lr, #0
   121fc:	bne	12c90 <__assert_fail@plt+0x1904>
   12200:	ldrd	r0, [r5]
   12204:	ldrd	r2, [ip, #8]
   12208:	cmp	r1, r3
   1220c:	cmpeq	r0, r2
   12210:	beq	12730 <__assert_fail@plt+0x13a4>
   12214:	cmp	lr, #0
   12218:	beq	128c0 <__assert_fail@plt+0x1534>
   1221c:	ldrb	r4, [r6, #12]
   12220:	cmp	r4, #0
   12224:	ldr	r3, [sp, #12]
   12228:	ldr	sl, [r3, #32]
   1222c:	bne	1249c <__assert_fail@plt+0x1110>
   12230:	mov	r2, #256	; 0x100
   12234:	mov	r1, r8
   12238:	mov	r0, sl
   1223c:	ldr	r3, [sp, #40]	; 0x28
   12240:	str	r2, [sp]
   12244:	ldr	r2, [sp, #24]
   12248:	bl	11314 <fchownat@plt>
   1224c:	cmp	r0, #0
   12250:	moveq	r0, #1
   12254:	movne	r0, #0
   12258:	beq	1226c <__assert_fail@plt+0xee0>
   1225c:	ldr	r3, [sp, #32]
   12260:	ldr	r3, [r3]
   12264:	cmp	r3, #95	; 0x5f
   12268:	beq	12a50 <__assert_fail@plt+0x16c4>
   1226c:	cmp	r0, #0
   12270:	bne	12534 <__assert_fail@plt+0x11a8>
   12274:	ldrb	r4, [r6, #13]
   12278:	cmp	r4, #0
   1227c:	movne	fp, #0
   12280:	movne	r7, fp
   12284:	bne	12128 <__assert_fail@plt+0xd9c>
   12288:	ldr	r3, [sp, #24]
   1228c:	mov	r2, #5
   12290:	mov	r0, r4
   12294:	cmn	r3, #1
   12298:	ldr	r3, [sp, #32]
   1229c:	movwne	r1, #46584	; 0xb5f8
   122a0:	movweq	r1, #46612	; 0xb614
   122a4:	movtne	r1, #1
   122a8:	movteq	r1, #1
   122ac:	ldr	r7, [r3]
   122b0:	bl	11104 <dcgettext@plt>
   122b4:	mov	r4, r0
   122b8:	mov	r0, #4
   122bc:	ldr	r1, [sp, #16]
   122c0:	bl	18490 <__assert_fail@plt+0x7104>
   122c4:	mov	r3, r0
   122c8:	mov	r0, #0
   122cc:	mov	r2, r4
   122d0:	mov	r1, r7
   122d4:	mov	fp, r0
   122d8:	mov	r4, #1
   122dc:	bl	11194 <error@plt>
   122e0:	mov	r7, fp
   122e4:	b	12128 <__assert_fail@plt+0xd9c>
   122e8:	mov	r1, r9
   122ec:	ldr	r0, [sp, #12]
   122f0:	bl	196bc <__assert_fail@plt+0x8330>
   122f4:	cmp	r0, #0
   122f8:	beq	12170 <__assert_fail@plt+0xde4>
   122fc:	mov	r2, #5
   12300:	movw	r1, #46372	; 0xb524
   12304:	movt	r1, #1
   12308:	mov	r0, #0
   1230c:	bl	11104 <dcgettext@plt>
   12310:	mov	r4, r0
   12314:	mov	r1, #3
   12318:	ldr	r2, [sp, #16]
   1231c:	mov	r0, #0
   12320:	bl	1856c <__assert_fail@plt+0x71e0>
   12324:	mov	r1, #0
   12328:	mov	r3, r0
   1232c:	mov	r2, r4
   12330:	mov	r0, r1
   12334:	mov	fp, r1
   12338:	bl	11194 <error@plt>
   1233c:	b	11fc4 <__assert_fail@plt+0xc38>
   12340:	ldrb	r3, [r6, #4]
   12344:	cmp	r3, #0
   12348:	beq	12170 <__assert_fail@plt+0xde4>
   1234c:	ldr	ip, [r6, #8]
   12350:	cmp	ip, #0
   12354:	beq	11fc4 <__assert_fail@plt+0xc38>
   12358:	ldrd	r2, [ip]
   1235c:	ldrd	r0, [r9, #160]	; 0xa0
   12360:	cmp	r1, r3
   12364:	cmpeq	r0, r2
   12368:	bne	11fc4 <__assert_fail@plt+0xc38>
   1236c:	ldrd	r0, [ip, #8]
   12370:	ldrd	r2, [r9, #64]	; 0x40
   12374:	cmp	r3, r1
   12378:	cmpeq	r2, r0
   1237c:	bne	11fc4 <__assert_fail@plt+0xc38>
   12380:	ldr	r7, [sp, #16]
   12384:	movw	r1, #45892	; 0xb344
   12388:	movt	r1, #1
   1238c:	mov	r0, r7
   12390:	bl	11074 <strcmp@plt>
   12394:	subs	r4, r0, #0
   12398:	beq	12c10 <__assert_fail@plt+0x1884>
   1239c:	mov	r2, #5
   123a0:	movw	r1, #46212	; 0xb484
   123a4:	movt	r1, #1
   123a8:	mov	r0, #0
   123ac:	bl	11104 <dcgettext@plt>
   123b0:	mov	r4, r0
   123b4:	mov	r1, #4
   123b8:	ldr	r2, [sp, #16]
   123bc:	mov	r0, #0
   123c0:	bl	18404 <__assert_fail@plt+0x7078>
   123c4:	mov	r5, r0
   123c8:	mov	r1, #4
   123cc:	movw	r2, #45892	; 0xb344
   123d0:	movt	r2, #1
   123d4:	mov	r0, #1
   123d8:	bl	18404 <__assert_fail@plt+0x7078>
   123dc:	mov	r1, #0
   123e0:	mov	r3, r5
   123e4:	str	r0, [sp]
   123e8:	mov	r2, r4
   123ec:	mov	r0, r1
   123f0:	bl	11194 <error@plt>
   123f4:	mov	r2, #5
   123f8:	movw	r1, #46272	; 0xb4c0
   123fc:	movt	r1, #1
   12400:	mov	r0, #0
   12404:	bl	11104 <dcgettext@plt>
   12408:	mov	r1, #0
   1240c:	mov	r2, r0
   12410:	mov	r0, r1
   12414:	mov	fp, r1
   12418:	bl	11194 <error@plt>
   1241c:	ldr	r4, [sp, #12]
   12420:	mov	r1, r9
   12424:	mov	r2, #4
   12428:	mov	r0, r4
   1242c:	bl	14f20 <__assert_fail@plt+0x3b94>
   12430:	mov	r0, r4
   12434:	bl	1486c <__assert_fail@plt+0x34e0>
   12438:	b	11fc4 <__assert_fail@plt+0xc38>
   1243c:	ldrb	r4, [r6, #13]
   12440:	cmp	r4, #0
   12444:	bne	1211c <__assert_fail@plt+0xd90>
   12448:	movw	r1, #46344	; 0xb508
   1244c:	movt	r1, #1
   12450:	b	12044 <__assert_fail@plt+0xcb8>
   12454:	ldr	r3, [sp, #308]	; 0x134
   12458:	cmn	r3, #1
   1245c:	beq	126f4 <__assert_fail@plt+0x1368>
   12460:	ldr	lr, [r5, #28]
   12464:	cmp	r7, #0
   12468:	sub	lr, lr, r3
   1246c:	clz	lr, lr
   12470:	lsr	lr, lr, #5
   12474:	beq	12214 <__assert_fail@plt+0xe88>
   12478:	ldr	ip, [r6, #8]
   1247c:	cmp	ip, #0
   12480:	beq	12214 <__assert_fail@plt+0xe88>
   12484:	ldrd	r2, [ip]
   12488:	ldrd	r0, [r5, #96]	; 0x60
   1248c:	cmp	r1, r3
   12490:	cmpeq	r0, r2
   12494:	bne	12214 <__assert_fail@plt+0xe88>
   12498:	b	12200 <__assert_fail@plt+0xe74>
   1249c:	ldr	r3, [sp, #20]
   124a0:	cmn	r3, #1
   124a4:	beq	12508 <__assert_fail@plt+0x117c>
   124a8:	ldr	r3, [r5, #16]
   124ac:	and	r3, r3, #61440	; 0xf000
   124b0:	cmp	r3, #32768	; 0x8000
   124b4:	beq	128b4 <__assert_fail@plt+0x1528>
   124b8:	cmp	r3, #16384	; 0x4000
   124bc:	moveq	r3, #18688	; 0x4900
   124c0:	streq	r3, [sp, #28]
   124c4:	bne	12508 <__assert_fail@plt+0x117c>
   124c8:	mov	r1, r8
   124cc:	mov	r0, sl
   124d0:	ldr	r2, [sp, #28]
   124d4:	bl	110b0 <__openat64_2@plt>
   124d8:	subs	r7, r0, #0
   124dc:	bge	127c8 <__assert_fail@plt+0x143c>
   124e0:	ldr	r3, [sp, #32]
   124e4:	ldr	r3, [r3]
   124e8:	cmp	r3, #13
   124ec:	bne	12274 <__assert_fail@plt+0xee8>
   124f0:	ldr	r3, [r5, #16]
   124f4:	and	r3, r3, #61440	; 0xf000
   124f8:	cmp	r3, #32768	; 0x8000
   124fc:	beq	127ac <__assert_fail@plt+0x1420>
   12500:	ldr	r3, [sp, #12]
   12504:	ldr	sl, [r3, #32]
   12508:	mov	r2, #0
   1250c:	mov	r1, r8
   12510:	mov	r0, sl
   12514:	ldr	r3, [sp, #40]	; 0x28
   12518:	str	r2, [sp]
   1251c:	ldr	r2, [sp, #24]
   12520:	bl	11314 <fchownat@plt>
   12524:	clz	r0, r0
   12528:	lsr	r0, r0, #5
   1252c:	cmp	r0, #0
   12530:	beq	12274 <__assert_fail@plt+0xee8>
   12534:	ldr	r3, [r6]
   12538:	cmp	r3, #2
   1253c:	beq	12094 <__assert_fail@plt+0xd08>
   12540:	ldr	r2, [sp, #24]
   12544:	cmn	r2, #1
   12548:	beq	12628 <__assert_fail@plt+0x129c>
   1254c:	ldr	r0, [r5, #24]
   12550:	ldr	r2, [sp, #24]
   12554:	cmp	r2, r0
   12558:	movne	r3, #2
   1255c:	strne	r3, [sp, #36]	; 0x24
   12560:	beq	12628 <__assert_fail@plt+0x129c>
   12564:	bl	11f08 <__assert_fail@plt+0xb7c>
   12568:	mov	r8, r0
   1256c:	ldr	r0, [r5, #28]
   12570:	bl	11ec4 <__assert_fail@plt+0xb38>
   12574:	ldr	sl, [r6, #16]
   12578:	mov	r5, r0
   1257c:	ldr	r4, [r6, #20]
   12580:	mov	r1, r4
   12584:	mov	r0, sl
   12588:	bl	11ddc <__assert_fail@plt+0xa50>
   1258c:	cmp	sl, #0
   12590:	str	r0, [sp, #28]
   12594:	movne	r0, r8
   12598:	moveq	r0, #0
   1259c:	cmp	r4, #0
   125a0:	movne	r1, r5
   125a4:	moveq	r1, #0
   125a8:	bl	11ddc <__assert_fail@plt+0xa50>
   125ac:	ldr	r3, [sp, #36]	; 0x24
   125b0:	mov	r7, r0
   125b4:	cmp	r3, #3
   125b8:	beq	126c8 <__assert_fail@plt+0x133c>
   125bc:	cmp	r3, #4
   125c0:	beq	12650 <__assert_fail@plt+0x12c4>
   125c4:	cmp	sl, #0
   125c8:	beq	12818 <__assert_fail@plt+0x148c>
   125cc:	movw	r1, #46692	; 0xb664
   125d0:	movt	r1, #1
   125d4:	mov	r2, #5
   125d8:	mov	r0, #0
   125dc:	bl	11104 <dcgettext@plt>
   125e0:	mov	r4, r0
   125e4:	b	12670 <__assert_fail@plt+0x12e4>
   125e8:	ldr	r3, [r6]
   125ec:	cmp	r3, #2
   125f0:	bne	12188 <__assert_fail@plt+0xdfc>
   125f4:	ldr	r3, [r6, #8]
   125f8:	cmp	r3, #0
   125fc:	bne	12188 <__assert_fail@plt+0xdfc>
   12600:	cmp	r4, #0
   12604:	bne	12190 <__assert_fail@plt+0xe04>
   12608:	bic	sl, sl, #2
   1260c:	uxth	r7, r7
   12610:	cmp	sl, #4
   12614:	cmpne	r7, #1
   12618:	bhi	12220 <__assert_fail@plt+0xe94>
   1261c:	ldr	r3, [sp, #12]
   12620:	ldr	sl, [r3, #32]
   12624:	b	12230 <__assert_fail@plt+0xea4>
   12628:	ldr	r1, [sp, #40]	; 0x28
   1262c:	cmn	r1, #1
   12630:	beq	12884 <__assert_fail@plt+0x14f8>
   12634:	ldr	r2, [r5, #28]
   12638:	cmp	r1, r2
   1263c:	beq	12884 <__assert_fail@plt+0x14f8>
   12640:	mov	r3, #2
   12644:	ldr	r0, [r5, #24]
   12648:	str	r3, [sp, #36]	; 0x24
   1264c:	b	12564 <__assert_fail@plt+0x11d8>
   12650:	cmp	sl, #0
   12654:	beq	1283c <__assert_fail@plt+0x14b0>
   12658:	movw	r1, #47004	; 0xb79c
   1265c:	movt	r1, #1
   12660:	mov	r2, #5
   12664:	mov	r0, #0
   12668:	bl	11104 <dcgettext@plt>
   1266c:	mov	r4, r0
   12670:	mov	r0, #4
   12674:	ldr	r1, [sp, #16]
   12678:	bl	18490 <__assert_fail@plt+0x7104>
   1267c:	mov	r1, r4
   12680:	ldr	r4, [sp, #28]
   12684:	mov	r2, r0
   12688:	mov	r3, r7
   1268c:	mov	r0, #1
   12690:	str	r4, [sp]
   12694:	bl	11260 <__printf_chk@plt>
   12698:	mov	r0, r7
   1269c:	bl	12da4 <__assert_fail@plt+0x1a18>
   126a0:	mov	r0, r4
   126a4:	bl	12da4 <__assert_fail@plt+0x1a18>
   126a8:	mov	r0, r8
   126ac:	bl	12da4 <__assert_fail@plt+0x1a18>
   126b0:	mov	r0, r5
   126b4:	bl	12da4 <__assert_fail@plt+0x1a18>
   126b8:	ldrb	r3, [r6, #4]
   126bc:	cmp	r3, #0
   126c0:	bne	11fc4 <__assert_fail@plt+0xc38>
   126c4:	b	120a0 <__assert_fail@plt+0xd14>
   126c8:	cmp	r0, #0
   126cc:	beq	12a5c <__assert_fail@plt+0x16d0>
   126d0:	cmp	sl, #0
   126d4:	beq	12860 <__assert_fail@plt+0x14d4>
   126d8:	movw	r1, #46800	; 0xb6d0
   126dc:	movt	r1, #1
   126e0:	mov	r2, #5
   126e4:	mov	r0, #0
   126e8:	bl	11104 <dcgettext@plt>
   126ec:	mov	r4, r0
   126f0:	b	12670 <__assert_fail@plt+0x12e4>
   126f4:	cmp	r7, #0
   126f8:	beq	1221c <__assert_fail@plt+0xe90>
   126fc:	ldr	ip, [r6, #8]
   12700:	cmp	ip, #0
   12704:	beq	1221c <__assert_fail@plt+0xe90>
   12708:	ldrd	r2, [ip]
   1270c:	ldrd	r0, [r5, #96]	; 0x60
   12710:	cmp	r1, r3
   12714:	cmpeq	r0, r2
   12718:	bne	1221c <__assert_fail@plt+0xe90>
   1271c:	ldrd	r2, [r5]
   12720:	ldrd	r0, [ip, #8]
   12724:	cmp	r1, r3
   12728:	cmpeq	r0, r2
   1272c:	bne	1221c <__assert_fail@plt+0xe90>
   12730:	ldr	r7, [sp, #16]
   12734:	movw	r1, #45892	; 0xb344
   12738:	movt	r1, #1
   1273c:	mov	r0, r7
   12740:	bl	11074 <strcmp@plt>
   12744:	subs	r4, r0, #0
   12748:	bne	12ba0 <__assert_fail@plt+0x1814>
   1274c:	mov	r2, #5
   12750:	movw	r1, #46164	; 0xb454
   12754:	movt	r1, #1
   12758:	bl	11104 <dcgettext@plt>
   1275c:	mov	r5, r0
   12760:	mov	r1, r7
   12764:	mov	r0, #4
   12768:	bl	18490 <__assert_fail@plt+0x7104>
   1276c:	mov	r3, r0
   12770:	mov	r2, r5
   12774:	mov	r1, r4
   12778:	mov	r0, r4
   1277c:	bl	11194 <error@plt>
   12780:	mov	r2, #5
   12784:	movw	r1, #46272	; 0xb4c0
   12788:	movt	r1, #1
   1278c:	mov	r0, #0
   12790:	bl	11104 <dcgettext@plt>
   12794:	mov	r1, #0
   12798:	mov	r2, r0
   1279c:	mov	r0, r1
   127a0:	mov	fp, r1
   127a4:	bl	11194 <error@plt>
   127a8:	b	11fc4 <__assert_fail@plt+0xc38>
   127ac:	ldr	r3, [sp, #28]
   127b0:	mov	r0, sl
   127b4:	mov	r1, r8
   127b8:	orr	r2, r3, #1
   127bc:	bl	110b0 <__openat64_2@plt>
   127c0:	subs	r7, r0, #0
   127c4:	blt	12bfc <__assert_fail@plt+0x1870>
   127c8:	add	r2, sp, #160	; 0xa0
   127cc:	mov	r1, r7
   127d0:	mov	r0, #3
   127d4:	bl	11140 <__fxstat64@plt>
   127d8:	subs	ip, r0, #0
   127dc:	bne	1289c <__assert_fail@plt+0x1510>
   127e0:	add	r3, sp, #256	; 0x100
   127e4:	ldrd	r0, [r5, #96]	; 0x60
   127e8:	ldrd	r2, [r3]
   127ec:	cmp	r1, r3
   127f0:	cmpeq	r0, r2
   127f4:	beq	12b14 <__assert_fail@plt+0x1788>
   127f8:	ldr	sl, [sp, #32]
   127fc:	mov	r0, r7
   12800:	mov	fp, ip
   12804:	mov	r7, ip
   12808:	ldr	r8, [sl]
   1280c:	bl	11350 <close@plt>
   12810:	str	r8, [sl]
   12814:	b	12128 <__assert_fail@plt+0xd9c>
   12818:	cmp	r4, #0
   1281c:	beq	12b78 <__assert_fail@plt+0x17ec>
   12820:	mov	r0, sl
   12824:	movw	r1, #46732	; 0xb68c
   12828:	movt	r1, #1
   1282c:	mov	r2, #5
   12830:	bl	11104 <dcgettext@plt>
   12834:	mov	r4, r0
   12838:	b	12670 <__assert_fail@plt+0x12e4>
   1283c:	cmp	r4, #0
   12840:	beq	12b5c <__assert_fail@plt+0x17d0>
   12844:	mov	r0, sl
   12848:	movw	r1, #47036	; 0xb7bc
   1284c:	movt	r1, #1
   12850:	mov	r2, #5
   12854:	bl	11104 <dcgettext@plt>
   12858:	mov	r4, r0
   1285c:	b	12670 <__assert_fail@plt+0x12e4>
   12860:	cmp	r4, #0
   12864:	beq	12afc <__assert_fail@plt+0x1770>
   12868:	mov	r0, sl
   1286c:	movw	r1, #46848	; 0xb700
   12870:	movt	r1, #1
   12874:	mov	r2, #5
   12878:	bl	11104 <dcgettext@plt>
   1287c:	mov	r4, r0
   12880:	b	12670 <__assert_fail@plt+0x12e4>
   12884:	cmp	r3, #0
   12888:	bne	12094 <__assert_fail@plt+0xd08>
   1288c:	mov	r3, #4
   12890:	str	r3, [sp, #36]	; 0x24
   12894:	ldr	r0, [r5, #24]
   12898:	b	12564 <__assert_fail@plt+0x11d8>
   1289c:	ldr	r8, [sp, #32]
   128a0:	mov	r0, r7
   128a4:	ldr	r4, [r8]
   128a8:	bl	11350 <close@plt>
   128ac:	str	r4, [r8]
   128b0:	b	12274 <__assert_fail@plt+0xee8>
   128b4:	mov	r3, #2304	; 0x900
   128b8:	str	r3, [sp, #28]
   128bc:	b	124c8 <__assert_fail@plt+0x113c>
   128c0:	mov	r4, #1
   128c4:	mov	r7, r4
   128c8:	b	12128 <__assert_fail@plt+0xd9c>
   128cc:	ldr	r5, [r9, #32]
   128d0:	mov	r1, #3
   128d4:	mov	r0, r4
   128d8:	mov	fp, r4
   128dc:	mov	r7, r4
   128e0:	ldr	r2, [sp, #16]
   128e4:	mov	r4, #1
   128e8:	bl	1856c <__assert_fail@plt+0x71e0>
   128ec:	mov	r3, r0
   128f0:	movw	r2, #45724	; 0xb29c
   128f4:	movt	r2, #1
   128f8:	mov	r1, r5
   128fc:	mov	r0, fp
   12900:	mov	r5, fp
   12904:	bl	11194 <error@plt>
   12908:	b	12128 <__assert_fail@plt+0xd9c>
   1290c:	cmp	r4, #0
   12910:	bne	12b94 <__assert_fail@plt+0x1808>
   12914:	cmp	r5, #0
   12918:	moveq	r8, r5
   1291c:	beq	12938 <__assert_fail@plt+0x15ac>
   12920:	ldr	r0, [r5, #24]
   12924:	bl	11f08 <__assert_fail@plt+0xb7c>
   12928:	mov	r8, r0
   1292c:	ldr	r0, [r5, #28]
   12930:	bl	11ec4 <__assert_fail@plt+0xb38>
   12934:	mov	r5, r0
   12938:	mov	r2, #5
   1293c:	mov	r0, #0
   12940:	ldr	r1, [sp, #44]	; 0x2c
   12944:	bl	11104 <dcgettext@plt>
   12948:	mov	r4, r0
   1294c:	mov	r0, #4
   12950:	ldr	r1, [sp, #16]
   12954:	bl	18490 <__assert_fail@plt+0x7104>
   12958:	mov	r2, r0
   1295c:	mov	r1, r4
   12960:	mov	r0, #1
   12964:	bl	11260 <__printf_chk@plt>
   12968:	b	126a8 <__assert_fail@plt+0x131c>
   1296c:	ldrb	r3, [r6, #12]
   12970:	cmp	r3, #0
   12974:	bne	11f88 <__assert_fail@plt+0xbfc>
   12978:	ldr	r3, [r6]
   1297c:	cmp	r3, #2
   12980:	orreq	r1, r1, #8
   12984:	b	11f88 <__assert_fail@plt+0xbfc>
   12988:	ldr	r3, [sp, #12]
   1298c:	mov	r5, #0
   12990:	mov	r2, r8
   12994:	mov	r0, #3
   12998:	ldr	r1, [r3, #32]
   1299c:	add	r3, sp, #56	; 0x38
   129a0:	str	r5, [sp]
   129a4:	bl	11128 <__fxstatat64@plt>
   129a8:	cmp	r0, r5
   129ac:	beq	12a90 <__assert_fail@plt+0x1704>
   129b0:	ldrb	r4, [r6, #13]
   129b4:	cmp	r4, #0
   129b8:	movne	fp, r5
   129bc:	addne	r5, sp, #56	; 0x38
   129c0:	movne	r7, fp
   129c4:	bne	12128 <__assert_fail@plt+0xd9c>
   129c8:	ldr	r3, [sp, #32]
   129cc:	mov	r2, #5
   129d0:	mov	r0, r4
   129d4:	movw	r1, #46560	; 0xb5e0
   129d8:	movt	r1, #1
   129dc:	mov	fp, r4
   129e0:	ldr	r5, [r3]
   129e4:	bl	11104 <dcgettext@plt>
   129e8:	mov	r7, r0
   129ec:	mov	r0, #4
   129f0:	ldr	r1, [sp, #16]
   129f4:	bl	18490 <__assert_fail@plt+0x7104>
   129f8:	mov	r3, r0
   129fc:	mov	r2, r7
   12a00:	mov	r1, r5
   12a04:	mov	r0, r4
   12a08:	add	r5, sp, #56	; 0x38
   12a0c:	mov	r4, #1
   12a10:	bl	11194 <error@plt>
   12a14:	mov	r7, fp
   12a18:	b	12128 <__assert_fail@plt+0xd9c>
   12a1c:	ldr	r3, [sp, #32]
   12a20:	mov	r2, #5
   12a24:	movw	r1, #47092	; 0xb7f4
   12a28:	movt	r1, #1
   12a2c:	mov	r0, #0
   12a30:	ldr	r4, [r3]
   12a34:	bl	11104 <dcgettext@plt>
   12a38:	mov	r2, r0
   12a3c:	mov	r0, #0
   12a40:	mov	fp, r0
   12a44:	mov	r1, r4
   12a48:	bl	11194 <error@plt>
   12a4c:	b	120f0 <__assert_fail@plt+0xd64>
   12a50:	mov	r4, #0
   12a54:	mov	r7, #1
   12a58:	b	12128 <__assert_fail@plt+0xd9c>
   12a5c:	cmp	sl, #0
   12a60:	beq	12ac4 <__assert_fail@plt+0x1738>
   12a64:	movw	r1, #46928	; 0xb750
   12a68:	movt	r1, #1
   12a6c:	mov	r2, #5
   12a70:	bl	11104 <dcgettext@plt>
   12a74:	mov	r4, r0
   12a78:	mov	r0, #0
   12a7c:	ldr	r7, [sp, #28]
   12a80:	bl	12da4 <__assert_fail@plt+0x1a18>
   12a84:	mov	r3, #0
   12a88:	str	r3, [sp, #28]
   12a8c:	b	12670 <__assert_fail@plt+0x12e4>
   12a90:	ldrh	sl, [r9, #56]	; 0x38
   12a94:	add	r5, sp, #56	; 0x38
   12a98:	sub	r7, sl, #1
   12a9c:	b	121a0 <__assert_fail@plt+0xe14>
   12aa0:	mov	r2, #5
   12aa4:	movw	r1, #46148	; 0xb444
   12aa8:	movt	r1, #1
   12aac:	bl	11104 <dcgettext@plt>
   12ab0:	mov	r2, r0
   12ab4:	mov	r1, r4
   12ab8:	mov	r0, fp
   12abc:	bl	11194 <error@plt>
   12ac0:	b	120e0 <__assert_fail@plt+0xd54>
   12ac4:	cmp	r4, #0
   12ac8:	mov	r2, #5
   12acc:	ldrne	r1, [sp, #52]	; 0x34
   12ad0:	ldreq	r1, [sp, #48]	; 0x30
   12ad4:	bl	11104 <dcgettext@plt>
   12ad8:	mov	r4, r0
   12adc:	b	12a78 <__assert_fail@plt+0x16ec>
   12ae0:	mov	r3, #1
   12ae4:	mov	r1, r9
   12ae8:	ldr	r0, [sp, #12]
   12aec:	mov	r2, r3
   12af0:	str	r3, [r9, #16]
   12af4:	bl	14f20 <__assert_fail@plt+0x3b94>
   12af8:	b	11fc4 <__assert_fail@plt+0xc38>
   12afc:	mov	r0, r4
   12b00:	mov	r2, #5
   12b04:	ldr	r1, [sp, #48]	; 0x30
   12b08:	bl	11104 <dcgettext@plt>
   12b0c:	mov	r4, r0
   12b10:	b	12670 <__assert_fail@plt+0x12e4>
   12b14:	ldrd	r0, [r5]
   12b18:	ldrd	r2, [sp, #160]	; 0xa0
   12b1c:	cmp	r1, r3
   12b20:	cmpeq	r0, r2
   12b24:	bne	127f8 <__assert_fail@plt+0x146c>
   12b28:	ldr	r3, [sp, #304]	; 0x130
   12b2c:	cmn	r3, #1
   12b30:	beq	12c48 <__assert_fail@plt+0x18bc>
   12b34:	ldr	r3, [sp, #184]	; 0xb8
   12b38:	ldr	r2, [sp, #304]	; 0x130
   12b3c:	cmp	r2, r3
   12b40:	beq	12c48 <__assert_fail@plt+0x18bc>
   12b44:	ldr	r8, [sp, #32]
   12b48:	mov	r0, r7
   12b4c:	ldr	r4, [r8]
   12b50:	bl	11350 <close@plt>
   12b54:	str	r4, [r8]
   12b58:	b	12534 <__assert_fail@plt+0x11a8>
   12b5c:	mov	r0, r4
   12b60:	movw	r1, #47064	; 0xb7d8
   12b64:	movt	r1, #1
   12b68:	mov	r2, #5
   12b6c:	bl	11104 <dcgettext@plt>
   12b70:	mov	r4, r0
   12b74:	b	12670 <__assert_fail@plt+0x12e4>
   12b78:	mov	r0, r4
   12b7c:	movw	r1, #46768	; 0xb6b0
   12b80:	movt	r1, #1
   12b84:	mov	r2, #5
   12b88:	bl	11104 <dcgettext@plt>
   12b8c:	mov	r4, r0
   12b90:	b	12670 <__assert_fail@plt+0x12e4>
   12b94:	mov	r3, #4
   12b98:	str	r3, [sp, #36]	; 0x24
   12b9c:	b	1214c <__assert_fail@plt+0xdc0>
   12ba0:	mov	r2, #5
   12ba4:	movw	r1, #46212	; 0xb484
   12ba8:	movt	r1, #1
   12bac:	mov	r0, #0
   12bb0:	bl	11104 <dcgettext@plt>
   12bb4:	mov	r4, r0
   12bb8:	mov	r1, #4
   12bbc:	ldr	r2, [sp, #16]
   12bc0:	mov	r0, #0
   12bc4:	bl	18404 <__assert_fail@plt+0x7078>
   12bc8:	mov	r5, r0
   12bcc:	mov	r1, #4
   12bd0:	movw	r2, #45892	; 0xb344
   12bd4:	movt	r2, #1
   12bd8:	mov	r0, #1
   12bdc:	bl	18404 <__assert_fail@plt+0x7078>
   12be0:	mov	r1, #0
   12be4:	mov	r3, r5
   12be8:	str	r0, [sp]
   12bec:	mov	r2, r4
   12bf0:	mov	r0, r1
   12bf4:	bl	11194 <error@plt>
   12bf8:	b	12780 <__assert_fail@plt+0x13f4>
   12bfc:	ldr	r3, [sp, #32]
   12c00:	ldr	r3, [r3]
   12c04:	cmp	r3, #13
   12c08:	bne	12274 <__assert_fail@plt+0xee8>
   12c0c:	b	12500 <__assert_fail@plt+0x1174>
   12c10:	mov	r2, #5
   12c14:	movw	r1, #46164	; 0xb454
   12c18:	movt	r1, #1
   12c1c:	bl	11104 <dcgettext@plt>
   12c20:	mov	r5, r0
   12c24:	mov	r1, r7
   12c28:	mov	r0, #4
   12c2c:	bl	18490 <__assert_fail@plt+0x7104>
   12c30:	mov	r3, r0
   12c34:	mov	r2, r5
   12c38:	mov	r1, r4
   12c3c:	mov	r0, r4
   12c40:	bl	11194 <error@plt>
   12c44:	b	123f4 <__assert_fail@plt+0x1068>
   12c48:	ldr	r3, [sp, #308]	; 0x134
   12c4c:	cmn	r3, #1
   12c50:	beq	12c64 <__assert_fail@plt+0x18d8>
   12c54:	ldr	r3, [sp, #188]	; 0xbc
   12c58:	ldr	r2, [sp, #308]	; 0x134
   12c5c:	cmp	r2, r3
   12c60:	bne	12b44 <__assert_fail@plt+0x17b8>
   12c64:	mov	r0, r7
   12c68:	ldr	r1, [sp, #24]
   12c6c:	ldr	r2, [sp, #40]	; 0x28
   12c70:	bl	11230 <fchown@plt>
   12c74:	cmp	r0, #0
   12c78:	bne	1289c <__assert_fail@plt+0x1510>
   12c7c:	mov	r0, r7
   12c80:	bl	11350 <close@plt>
   12c84:	cmp	r0, #0
   12c88:	bne	12274 <__assert_fail@plt+0xee8>
   12c8c:	b	12534 <__assert_fail@plt+0x11a8>
   12c90:	mov	r4, r7
   12c94:	b	12128 <__assert_fail@plt+0xd9c>
   12c98:	movw	r3, #49600	; 0xc1c0
   12c9c:	movt	r3, #2
   12ca0:	str	r0, [r3]
   12ca4:	bx	lr
   12ca8:	movw	r3, #49600	; 0xc1c0
   12cac:	movt	r3, #2
   12cb0:	strb	r0, [r3, #4]
   12cb4:	bx	lr
   12cb8:	movw	r3, #49564	; 0xc19c
   12cbc:	movt	r3, #2
   12cc0:	strd	r4, [sp, #-16]!
   12cc4:	ldr	r0, [r3]
   12cc8:	str	r6, [sp, #8]
   12ccc:	str	lr, [sp, #12]
   12cd0:	sub	sp, sp, #8
   12cd4:	bl	19cfc <__assert_fail@plt+0x8970>
   12cd8:	cmp	r0, #0
   12cdc:	beq	12d08 <__assert_fail@plt+0x197c>
   12ce0:	movw	r4, #49600	; 0xc1c0
   12ce4:	movt	r4, #2
   12ce8:	ldrb	r6, [r4, #4]
   12cec:	bl	1123c <__errno_location@plt>
   12cf0:	mov	r5, r0
   12cf4:	cmp	r6, #0
   12cf8:	beq	12d34 <__assert_fail@plt+0x19a8>
   12cfc:	ldr	r3, [r0]
   12d00:	cmp	r3, #32
   12d04:	bne	12d34 <__assert_fail@plt+0x19a8>
   12d08:	movw	r3, #49560	; 0xc198
   12d0c:	movt	r3, #2
   12d10:	ldr	r0, [r3]
   12d14:	bl	19cfc <__assert_fail@plt+0x8970>
   12d18:	cmp	r0, #0
   12d1c:	bne	12d7c <__assert_fail@plt+0x19f0>
   12d20:	add	sp, sp, #8
   12d24:	ldrd	r4, [sp]
   12d28:	ldr	r6, [sp, #8]
   12d2c:	add	sp, sp, #12
   12d30:	pop	{pc}		; (ldr pc, [sp], #4)
   12d34:	movw	r1, #47128	; 0xb818
   12d38:	movt	r1, #1
   12d3c:	mov	r2, #5
   12d40:	mov	r0, #0
   12d44:	bl	11104 <dcgettext@plt>
   12d48:	mov	r6, r0
   12d4c:	ldr	r0, [r4]
   12d50:	cmp	r0, #0
   12d54:	beq	12d8c <__assert_fail@plt+0x1a00>
   12d58:	ldr	r4, [r5]
   12d5c:	bl	18558 <__assert_fail@plt+0x71cc>
   12d60:	mov	r3, r0
   12d64:	movw	r2, #45720	; 0xb298
   12d68:	movt	r2, #1
   12d6c:	mov	r0, #0
   12d70:	str	r6, [sp]
   12d74:	mov	r1, r4
   12d78:	bl	11194 <error@plt>
   12d7c:	movw	r3, #49472	; 0xc140
   12d80:	movt	r3, #2
   12d84:	ldr	r0, [r3]
   12d88:	bl	110bc <_exit@plt>
   12d8c:	mov	r3, r6
   12d90:	movw	r2, #45724	; 0xb29c
   12d94:	movt	r2, #1
   12d98:	ldr	r1, [r5]
   12d9c:	bl	11194 <error@plt>
   12da0:	b	12d7c <__assert_fail@plt+0x19f0>
   12da4:	strd	r4, [sp, #-12]!
   12da8:	mov	r5, r0
   12dac:	str	lr, [sp, #8]
   12db0:	sub	sp, sp, #12
   12db4:	bl	1123c <__errno_location@plt>
   12db8:	mov	r4, r0
   12dbc:	mov	r2, #0
   12dc0:	ldr	r3, [r4]
   12dc4:	mov	r0, r5
   12dc8:	str	r2, [r4]
   12dcc:	str	r3, [sp]
   12dd0:	str	r3, [sp, #4]
   12dd4:	bl	110a4 <free@plt>
   12dd8:	ldr	r3, [r4]
   12ddc:	add	r2, sp, #8
   12de0:	clz	r3, r3
   12de4:	lsr	r3, r3, #5
   12de8:	add	r3, r2, r3, lsl #2
   12dec:	ldr	r3, [r3, #-8]
   12df0:	str	r3, [r4]
   12df4:	add	sp, sp, #12
   12df8:	ldrd	r4, [sp]
   12dfc:	add	sp, sp, #8
   12e00:	pop	{pc}		; (ldr pc, [sp], #4)
   12e04:	strd	r4, [sp, #-8]!
   12e08:	ldrd	r2, [r1, #8]
   12e0c:	ldrd	r4, [r0, #8]
   12e10:	cmp	r5, r3
   12e14:	cmpeq	r4, r2
   12e18:	movne	r0, #0
   12e1c:	bne	12e38 <__assert_fail@plt+0x1aac>
   12e20:	ldrd	r4, [r0]
   12e24:	ldrd	r2, [r1]
   12e28:	cmp	r5, r3
   12e2c:	cmpeq	r4, r2
   12e30:	moveq	r0, #1
   12e34:	movne	r0, #0
   12e38:	ldrd	r4, [sp]
   12e3c:	add	sp, sp, #8
   12e40:	bx	lr
   12e44:	mov	r2, r1
   12e48:	mov	r3, #0
   12e4c:	str	r4, [sp, #-8]!
   12e50:	ldrd	r0, [r0, #8]
   12e54:	str	lr, [sp, #4]
   12e58:	bl	1a4cc <__assert_fail@plt+0x9140>
   12e5c:	ldr	r4, [sp]
   12e60:	add	sp, sp, #4
   12e64:	mov	r0, r2
   12e68:	pop	{pc}		; (ldr pc, [sp], #4)
   12e6c:	mov	r2, r1
   12e70:	mov	r3, #0
   12e74:	str	r4, [sp, #-8]!
   12e78:	ldrd	r0, [r0]
   12e7c:	str	lr, [sp, #4]
   12e80:	bl	1a4cc <__assert_fail@plt+0x9140>
   12e84:	ldr	r4, [sp]
   12e88:	add	sp, sp, #4
   12e8c:	mov	r0, r2
   12e90:	pop	{pc}		; (ldr pc, [sp], #4)
   12e94:	strd	r4, [sp, #-8]!
   12e98:	ldrd	r2, [r1]
   12e9c:	ldrd	r4, [r0]
   12ea0:	cmp	r5, r3
   12ea4:	cmpeq	r4, r2
   12ea8:	ldrd	r4, [sp]
   12eac:	add	sp, sp, #8
   12eb0:	moveq	r0, #1
   12eb4:	movne	r0, #0
   12eb8:	bx	lr
   12ebc:	ldr	r2, [r0]
   12ec0:	ldr	r3, [r1]
   12ec4:	ldrd	r0, [r2, #160]	; 0xa0
   12ec8:	ldrd	r2, [r3, #160]	; 0xa0
   12ecc:	cmp	r1, r3
   12ed0:	cmpeq	r0, r2
   12ed4:	movhi	r0, #1
   12ed8:	movls	r0, #0
   12edc:	movcc	r3, #1
   12ee0:	movcs	r3, #0
   12ee4:	sub	r0, r0, r3
   12ee8:	bx	lr
   12eec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12ef0:	mov	r5, r2
   12ef4:	mov	r4, r1
   12ef8:	ldr	r2, [r0, #40]	; 0x28
   12efc:	strd	r6, [sp, #8]
   12f00:	mov	r6, r0
   12f04:	str	r8, [sp, #16]
   12f08:	str	lr, [sp, #20]
   12f0c:	ldr	r0, [r0, #8]
   12f10:	cmp	r2, r5
   12f14:	ldr	r7, [r6, #44]	; 0x2c
   12f18:	bcs	12f40 <__assert_fail@plt+0x1bb4>
   12f1c:	add	r1, r5, #40	; 0x28
   12f20:	cmn	r1, #-1073741823	; 0xc0000001
   12f24:	str	r1, [r6, #40]	; 0x28
   12f28:	bhi	12fc8 <__assert_fail@plt+0x1c3c>
   12f2c:	lsl	r1, r1, #2
   12f30:	bl	19ca4 <__assert_fail@plt+0x8918>
   12f34:	cmp	r0, #0
   12f38:	strne	r0, [r6, #8]
   12f3c:	beq	12fc4 <__assert_fail@plt+0x1c38>
   12f40:	cmp	r4, #0
   12f44:	movne	r2, r0
   12f48:	beq	12f5c <__assert_fail@plt+0x1bd0>
   12f4c:	str	r4, [r2], #4
   12f50:	ldr	r4, [r4, #8]
   12f54:	cmp	r4, #0
   12f58:	bne	12f4c <__assert_fail@plt+0x1bc0>
   12f5c:	mov	r3, r7
   12f60:	mov	r2, #4
   12f64:	mov	r1, r5
   12f68:	bl	11308 <qsort@plt>
   12f6c:	ldr	lr, [r6, #8]
   12f70:	subs	r3, r5, #1
   12f74:	ldr	r0, [lr]
   12f78:	moveq	r2, r0
   12f7c:	beq	12fa8 <__assert_fail@plt+0x1c1c>
   12f80:	mov	ip, r0
   12f84:	mov	r2, lr
   12f88:	b	12f90 <__assert_fail@plt+0x1c04>
   12f8c:	ldr	ip, [r2]
   12f90:	subs	r3, r3, #1
   12f94:	ldr	r1, [r2, #4]!
   12f98:	str	r1, [ip, #8]
   12f9c:	bne	12f8c <__assert_fail@plt+0x1c00>
   12fa0:	add	r5, lr, r5, lsl #2
   12fa4:	ldr	r2, [r5, #-4]
   12fa8:	mov	r3, #0
   12fac:	str	r3, [r2, #8]
   12fb0:	ldrd	r4, [sp]
   12fb4:	ldrd	r6, [sp, #8]
   12fb8:	ldr	r8, [sp, #16]
   12fbc:	add	sp, sp, #20
   12fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   12fc4:	ldr	r0, [r6, #8]
   12fc8:	bl	12da4 <__assert_fail@plt+0x1a18>
   12fcc:	mov	r3, #0
   12fd0:	mov	r0, r4
   12fd4:	str	r3, [r6, #8]
   12fd8:	str	r3, [r6, #40]	; 0x28
   12fdc:	b	12fb0 <__assert_fail@plt+0x1c24>
   12fe0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12fe4:	mov	r5, r2
   12fe8:	strd	r6, [sp, #8]
   12fec:	mov	r6, r0
   12ff0:	add	r0, r2, #176	; 0xb0
   12ff4:	bic	r0, r0, #7
   12ff8:	mov	r7, r1
   12ffc:	str	r8, [sp, #16]
   13000:	str	lr, [sp, #20]
   13004:	bl	19c68 <__assert_fail@plt+0x88dc>
   13008:	subs	r4, r0, #0
   1300c:	beq	13058 <__assert_fail@plt+0x1ccc>
   13010:	mov	r1, r7
   13014:	mov	r2, r5
   13018:	add	r0, r4, #168	; 0xa8
   1301c:	bl	110c8 <memcpy@plt>
   13020:	ldr	r1, [r6, #24]
   13024:	mov	r3, #0
   13028:	add	r0, r4, r5
   1302c:	mov	r2, #3
   13030:	strb	r3, [r0, #168]	; 0xa8
   13034:	str	r3, [r4, #12]
   13038:	str	r3, [r4, #16]
   1303c:	str	r3, [r4, #20]
   13040:	str	r1, [r4, #28]
   13044:	str	r3, [r4, #32]
   13048:	str	r6, [r4, #44]	; 0x2c
   1304c:	str	r5, [r4, #52]	; 0x34
   13050:	strh	r3, [r4, #58]	; 0x3a
   13054:	strh	r2, [r4, #60]	; 0x3c
   13058:	mov	r0, r4
   1305c:	ldrd	r4, [sp]
   13060:	ldrd	r6, [sp, #8]
   13064:	ldr	r8, [sp, #16]
   13068:	add	sp, sp, #20
   1306c:	pop	{pc}		; (ldr pc, [sp], #4)
   13070:	strd	r4, [sp, #-16]!
   13074:	subs	r4, r0, #0
   13078:	str	r6, [sp, #8]
   1307c:	str	lr, [sp, #12]
   13080:	beq	130a8 <__assert_fail@plt+0x1d1c>
   13084:	ldr	r5, [r4, #8]
   13088:	ldr	r3, [r4, #12]
   1308c:	subs	r0, r3, #0
   13090:	beq	13098 <__assert_fail@plt+0x1d0c>
   13094:	bl	11368 <closedir@plt>
   13098:	mov	r0, r4
   1309c:	bl	12da4 <__assert_fail@plt+0x1a18>
   130a0:	subs	r4, r5, #0
   130a4:	bne	13084 <__assert_fail@plt+0x1cf8>
   130a8:	ldrd	r4, [sp]
   130ac:	ldr	r6, [sp, #8]
   130b0:	add	sp, sp, #12
   130b4:	pop	{pc}		; (ldr pc, [sp], #4)
   130b8:	str	r4, [sp, #-8]!
   130bc:	mov	r4, r0
   130c0:	str	lr, [sp, #4]
   130c4:	b	130d4 <__assert_fail@plt+0x1d48>
   130c8:	bl	162e8 <__assert_fail@plt+0x4f5c>
   130cc:	cmp	r0, #0
   130d0:	bge	130f4 <__assert_fail@plt+0x1d68>
   130d4:	mov	r0, r4
   130d8:	bl	16298 <__assert_fail@plt+0x4f0c>
   130dc:	cmp	r0, #0
   130e0:	mov	r0, r4
   130e4:	beq	130c8 <__assert_fail@plt+0x1d3c>
   130e8:	ldr	r4, [sp]
   130ec:	add	sp, sp, #4
   130f0:	pop	{pc}		; (ldr pc, [sp], #4)
   130f4:	bl	11350 <close@plt>
   130f8:	b	130d4 <__assert_fail@plt+0x1d48>
   130fc:	strd	r4, [sp, #-20]!	; 0xffffffec
   13100:	ldr	r5, [r0, #44]	; 0x2c
   13104:	ldr	r3, [r5, #48]	; 0x30
   13108:	strd	r6, [sp, #8]
   1310c:	str	lr, [sp, #16]
   13110:	sub	sp, sp, #100	; 0x64
   13114:	tst	r3, #512	; 0x200
   13118:	beq	131a8 <__assert_fail@plt+0x1e1c>
   1311c:	ldr	r4, [r5, #52]	; 0x34
   13120:	mov	r7, r1
   13124:	mov	r6, r0
   13128:	cmp	r4, #0
   1312c:	beq	13154 <__assert_fail@plt+0x1dc8>
   13130:	ldrd	r2, [r6, #64]	; 0x40
   13134:	add	r1, sp, #8
   13138:	mov	r0, r4
   1313c:	strd	r2, [sp, #8]
   13140:	bl	15798 <__assert_fail@plt+0x440c>
   13144:	cmp	r0, #0
   13148:	beq	1318c <__assert_fail@plt+0x1e00>
   1314c:	ldr	r0, [r0, #8]
   13150:	b	131ac <__assert_fail@plt+0x1e20>
   13154:	movw	r0, #11684	; 0x2da4
   13158:	movt	r0, #1
   1315c:	mov	r1, r4
   13160:	movw	r3, #11924	; 0x2e94
   13164:	movt	r3, #1
   13168:	movw	r2, #11884	; 0x2e6c
   1316c:	movt	r2, #1
   13170:	str	r0, [sp]
   13174:	mov	r0, #13
   13178:	bl	15ab8 <__assert_fail@plt+0x472c>
   1317c:	cmp	r0, #0
   13180:	mov	r4, r0
   13184:	str	r0, [r5, #52]	; 0x34
   13188:	bne	13130 <__assert_fail@plt+0x1da4>
   1318c:	cmp	r7, #0
   13190:	blt	131a8 <__assert_fail@plt+0x1e1c>
   13194:	mov	r0, r7
   13198:	add	r1, sp, #8
   1319c:	bl	1102c <fstatfs64@plt>
   131a0:	cmp	r0, #0
   131a4:	beq	131c0 <__assert_fail@plt+0x1e34>
   131a8:	mov	r0, #0
   131ac:	add	sp, sp, #100	; 0x64
   131b0:	ldrd	r4, [sp]
   131b4:	ldrd	r6, [sp, #8]
   131b8:	add	sp, sp, #16
   131bc:	pop	{pc}		; (ldr pc, [sp], #4)
   131c0:	cmp	r4, #0
   131c4:	beq	13204 <__assert_fail@plt+0x1e78>
   131c8:	mov	r0, #16
   131cc:	bl	19c68 <__assert_fail@plt+0x88dc>
   131d0:	subs	r5, r0, #0
   131d4:	beq	13204 <__assert_fail@plt+0x1e78>
   131d8:	ldr	ip, [sp, #8]
   131dc:	mov	r0, r4
   131e0:	mov	r1, r5
   131e4:	ldrd	r2, [r6, #64]	; 0x40
   131e8:	strd	r2, [r5]
   131ec:	str	ip, [r5, #8]
   131f0:	bl	16110 <__assert_fail@plt+0x4d84>
   131f4:	cmp	r0, #0
   131f8:	beq	1320c <__assert_fail@plt+0x1e80>
   131fc:	cmp	r5, r0
   13200:	bne	13218 <__assert_fail@plt+0x1e8c>
   13204:	ldr	r0, [sp, #8]
   13208:	b	131ac <__assert_fail@plt+0x1e20>
   1320c:	mov	r0, r5
   13210:	bl	12da4 <__assert_fail@plt+0x1a18>
   13214:	b	13204 <__assert_fail@plt+0x1e78>
   13218:	bl	11344 <abort@plt>
   1321c:	strd	r4, [sp, #-16]!
   13220:	mov	r5, r1
   13224:	ldr	r1, [r0, #32]
   13228:	str	r6, [sp, #8]
   1322c:	str	lr, [sp, #12]
   13230:	sub	r3, r1, r5
   13234:	cmn	r1, #100	; 0x64
   13238:	clz	r3, r3
   1323c:	lsr	r3, r3, #5
   13240:	moveq	r3, #0
   13244:	cmp	r3, #0
   13248:	bne	132a8 <__assert_fail@plt+0x1f1c>
   1324c:	cmp	r2, #0
   13250:	mov	r4, r0
   13254:	bne	13284 <__assert_fail@plt+0x1ef8>
   13258:	ldr	r3, [r0, #48]	; 0x30
   1325c:	mvn	r2, r1
   13260:	lsr	r2, r2, #31
   13264:	eor	r3, r3, #4
   13268:	ands	r3, r2, r3, lsr #2
   1326c:	bne	1329c <__assert_fail@plt+0x1f10>
   13270:	ldr	r6, [sp, #8]
   13274:	str	r5, [r4, #32]
   13278:	ldrd	r4, [sp]
   1327c:	add	sp, sp, #12
   13280:	pop	{pc}		; (ldr pc, [sp], #4)
   13284:	add	r0, r0, #60	; 0x3c
   13288:	bl	162a0 <__assert_fail@plt+0x4f14>
   1328c:	cmp	r0, #0
   13290:	blt	13270 <__assert_fail@plt+0x1ee4>
   13294:	bl	11350 <close@plt>
   13298:	b	13270 <__assert_fail@plt+0x1ee4>
   1329c:	mov	r0, r1
   132a0:	bl	11350 <close@plt>
   132a4:	b	13270 <__assert_fail@plt+0x1ee4>
   132a8:	bl	11344 <abort@plt>
   132ac:	ldr	r3, [r0, #48]	; 0x30
   132b0:	strd	r4, [sp, #-16]!
   132b4:	mov	r4, r0
   132b8:	str	r6, [sp, #8]
   132bc:	str	lr, [sp, #12]
   132c0:	ands	r5, r3, #4
   132c4:	movne	r5, #0
   132c8:	bne	132e0 <__assert_fail@plt+0x1f54>
   132cc:	tst	r3, #512	; 0x200
   132d0:	beq	132fc <__assert_fail@plt+0x1f70>
   132d4:	mov	r2, #1
   132d8:	mvn	r1, #99	; 0x63
   132dc:	bl	1321c <__assert_fail@plt+0x1e90>
   132e0:	add	r0, r4, #60	; 0x3c
   132e4:	bl	130b8 <__assert_fail@plt+0x1d2c>
   132e8:	mov	r0, r5
   132ec:	ldrd	r4, [sp]
   132f0:	ldr	r6, [sp, #8]
   132f4:	add	sp, sp, #12
   132f8:	pop	{pc}		; (ldr pc, [sp], #4)
   132fc:	ldr	r0, [r0, #28]
   13300:	bl	112fc <fchdir@plt>
   13304:	adds	r5, r0, #0
   13308:	movne	r5, #1
   1330c:	b	132e0 <__assert_fail@plt+0x1f54>
   13310:	ldr	ip, [r2, #48]	; 0x30
   13314:	strd	r4, [sp, #-16]!
   13318:	mov	r4, r2
   1331c:	add	r5, r2, #64	; 0x40
   13320:	ldr	r2, [r2, #24]
   13324:	str	r6, [sp, #8]
   13328:	str	lr, [sp, #12]
   1332c:	sub	sp, sp, #8
   13330:	cmp	ip, #0
   13334:	bne	133ac <__assert_fail@plt+0x2020>
   13338:	tst	r1, #1
   1333c:	beq	133ac <__assert_fail@plt+0x2020>
   13340:	mov	r1, r2
   13344:	mov	r0, #3
   13348:	mov	r2, r5
   1334c:	bl	1132c <__xstat64@plt>
   13350:	cmp	r0, #0
   13354:	beq	133d8 <__assert_fail@plt+0x204c>
   13358:	bl	1123c <__errno_location@plt>
   1335c:	ldr	r3, [r0]
   13360:	mov	r6, r0
   13364:	cmp	r3, #2
   13368:	bne	13390 <__assert_fail@plt+0x2004>
   1336c:	mov	r2, r5
   13370:	mov	r0, #3
   13374:	ldr	r1, [r4, #24]
   13378:	bl	1135c <__lxstat64@plt>
   1337c:	subs	r3, r0, #0
   13380:	moveq	r0, #13
   13384:	streq	r3, [r6]
   13388:	beq	133fc <__assert_fail@plt+0x2070>
   1338c:	ldr	r3, [r6]
   13390:	mov	r0, r5
   13394:	mov	r2, #104	; 0x68
   13398:	str	r3, [r4, #32]
   1339c:	mov	r1, #0
   133a0:	bl	11254 <memset@plt>
   133a4:	mov	r0, #10
   133a8:	b	133fc <__assert_fail@plt+0x2070>
   133ac:	ubfx	ip, r1, #1, #1
   133b0:	orrs	r3, r3, ip
   133b4:	bne	13340 <__assert_fail@plt+0x1fb4>
   133b8:	mov	ip, #256	; 0x100
   133bc:	mov	r1, r0
   133c0:	mov	r3, r5
   133c4:	mov	r0, #3
   133c8:	str	ip, [sp]
   133cc:	bl	11128 <__fxstatat64@plt>
   133d0:	cmp	r0, #0
   133d4:	bne	13458 <__assert_fail@plt+0x20cc>
   133d8:	ldr	r3, [r4, #80]	; 0x50
   133dc:	and	r3, r3, #61440	; 0xf000
   133e0:	cmp	r3, #16384	; 0x4000
   133e4:	beq	13410 <__assert_fail@plt+0x2084>
   133e8:	cmp	r3, #40960	; 0xa000
   133ec:	beq	13464 <__assert_fail@plt+0x20d8>
   133f0:	cmp	r3, #32768	; 0x8000
   133f4:	movne	r0, #3
   133f8:	moveq	r0, #8
   133fc:	add	sp, sp, #8
   13400:	ldrd	r4, [sp]
   13404:	ldr	r6, [sp, #8]
   13408:	add	sp, sp, #12
   1340c:	pop	{pc}		; (ldr pc, [sp], #4)
   13410:	ldrb	r3, [r4, #168]	; 0xa8
   13414:	cmp	r3, #46	; 0x2e
   13418:	bne	1343c <__assert_fail@plt+0x20b0>
   1341c:	ldrb	r3, [r4, #169]	; 0xa9
   13420:	cmp	r3, #0
   13424:	beq	13444 <__assert_fail@plt+0x20b8>
   13428:	ldr	r3, [r4, #168]	; 0xa8
   1342c:	bic	r3, r3, #-16777216	; 0xff000000
   13430:	bic	r3, r3, #255	; 0xff
   13434:	cmp	r3, #11776	; 0x2e00
   13438:	beq	13444 <__assert_fail@plt+0x20b8>
   1343c:	mov	r0, #1
   13440:	b	133fc <__assert_fail@plt+0x2070>
   13444:	ldr	r3, [r4, #48]	; 0x30
   13448:	cmp	r3, #0
   1344c:	moveq	r0, #1
   13450:	movne	r0, #5
   13454:	b	133fc <__assert_fail@plt+0x2070>
   13458:	bl	1123c <__errno_location@plt>
   1345c:	ldr	r3, [r0]
   13460:	b	13390 <__assert_fail@plt+0x2004>
   13464:	mov	r0, #12
   13468:	b	133fc <__assert_fail@plt+0x2070>
   1346c:	mov	ip, r1
   13470:	ldr	r1, [r1]
   13474:	strd	r4, [sp, #-16]!
   13478:	mov	r4, r0
   1347c:	ldr	r0, [r0]
   13480:	str	r6, [sp, #8]
   13484:	str	lr, [sp, #12]
   13488:	add	r3, r1, #256	; 0x100
   1348c:	add	r2, r3, r2
   13490:	cmp	r1, r2
   13494:	bhi	134c8 <__assert_fail@plt+0x213c>
   13498:	mov	r1, r2
   1349c:	str	r2, [ip]
   134a0:	bl	19ca4 <__assert_fail@plt+0x8918>
   134a4:	subs	r5, r0, #0
   134a8:	movne	r3, #1
   134ac:	strne	r5, [r4]
   134b0:	beq	134e8 <__assert_fail@plt+0x215c>
   134b4:	ldrd	r4, [sp]
   134b8:	mov	r0, r3
   134bc:	ldr	r6, [sp, #8]
   134c0:	add	sp, sp, #12
   134c4:	pop	{pc}		; (ldr pc, [sp], #4)
   134c8:	mov	r5, #0
   134cc:	bl	12da4 <__assert_fail@plt+0x1a18>
   134d0:	str	r5, [r4]
   134d4:	bl	1123c <__errno_location@plt>
   134d8:	mov	r2, #36	; 0x24
   134dc:	mov	r3, r5
   134e0:	str	r2, [r0]
   134e4:	b	134b4 <__assert_fail@plt+0x2128>
   134e8:	ldr	r0, [r4]
   134ec:	bl	12da4 <__assert_fail@plt+0x1a18>
   134f0:	mov	r3, r5
   134f4:	str	r5, [r4]
   134f8:	b	134b4 <__assert_fail@plt+0x2128>
   134fc:	movw	r3, #258	; 0x102
   13500:	str	r4, [sp, #-8]!
   13504:	mov	r4, r1
   13508:	tst	r0, r3
   1350c:	str	lr, [sp, #4]
   13510:	sub	sp, sp, #8
   13514:	beq	13560 <__assert_fail@plt+0x21d4>
   13518:	movw	r1, #11684	; 0x2da4
   1351c:	movt	r1, #1
   13520:	movw	r3, #11780	; 0x2e04
   13524:	movt	r3, #1
   13528:	movw	r2, #11844	; 0x2e44
   1352c:	movt	r2, #1
   13530:	str	r1, [sp]
   13534:	mov	r0, #31
   13538:	mov	r1, #0
   1353c:	bl	15ab8 <__assert_fail@plt+0x472c>
   13540:	mov	r3, r0
   13544:	adds	r0, r0, #0
   13548:	movne	r0, #1
   1354c:	str	r3, [r4]
   13550:	add	sp, sp, #8
   13554:	ldr	r4, [sp]
   13558:	add	sp, sp, #4
   1355c:	pop	{pc}		; (ldr pc, [sp], #4)
   13560:	mov	r0, #32
   13564:	bl	19c68 <__assert_fail@plt+0x88dc>
   13568:	cmp	r0, #0
   1356c:	str	r0, [r4]
   13570:	beq	13550 <__assert_fail@plt+0x21c4>
   13574:	bl	19d84 <__assert_fail@plt+0x89f8>
   13578:	mov	r0, #1
   1357c:	add	sp, sp, #8
   13580:	ldr	r4, [sp]
   13584:	add	sp, sp, #4
   13588:	pop	{pc}		; (ldr pc, [sp], #4)
   1358c:	mov	r3, r2
   13590:	lsl	r2, r1, #11
   13594:	tst	r1, #512	; 0x200
   13598:	and	r2, r2, #32768	; 0x8000
   1359c:	orr	r2, r2, #540672	; 0x84000
   135a0:	orr	r2, r2, #2304	; 0x900
   135a4:	beq	135b0 <__assert_fail@plt+0x2224>
   135a8:	mov	r1, r3
   135ac:	b	163b0 <__assert_fail@plt+0x5024>
   135b0:	mov	r1, r2
   135b4:	mov	r0, r3
   135b8:	b	1a140 <__assert_fail@plt+0x8db4>
   135bc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   135c0:	mov	r5, r0
   135c4:	mov	r4, r2
   135c8:	strd	r6, [sp, #8]
   135cc:	mov	r7, r1
   135d0:	strd	r8, [sp, #16]
   135d4:	ldr	r9, [r0, #48]	; 0x30
   135d8:	str	sl, [sp, #24]
   135dc:	subs	sl, r3, #0
   135e0:	str	lr, [sp, #28]
   135e4:	sub	sp, sp, #104	; 0x68
   135e8:	and	r8, r9, #4
   135ec:	beq	136c4 <__assert_fail@plt+0x2338>
   135f0:	movw	r1, #47188	; 0xb854
   135f4:	movt	r1, #1
   135f8:	mov	r0, sl
   135fc:	bl	11074 <strcmp@plt>
   13600:	cmp	r0, #0
   13604:	bne	136c4 <__assert_fail@plt+0x2338>
   13608:	cmp	r8, #0
   1360c:	bne	13704 <__assert_fail@plt+0x2378>
   13610:	cmp	r4, #0
   13614:	bge	137c4 <__assert_fail@plt+0x2438>
   13618:	tst	r9, #512	; 0x200
   1361c:	bne	13748 <__assert_fail@plt+0x23bc>
   13620:	mov	r8, #1
   13624:	mov	r1, r9
   13628:	mov	r2, sl
   1362c:	ldr	r0, [r5, #32]
   13630:	bl	1358c <__assert_fail@plt+0x2200>
   13634:	subs	r6, r0, #0
   13638:	blt	137bc <__assert_fail@plt+0x2430>
   1363c:	ldr	r9, [r5, #48]	; 0x30
   13640:	tst	r9, #2
   13644:	beq	136e0 <__assert_fail@plt+0x2354>
   13648:	mov	r2, sp
   1364c:	mov	r1, r6
   13650:	mov	r0, #3
   13654:	bl	11140 <__fxstat64@plt>
   13658:	cmp	r0, #0
   1365c:	bne	13740 <__assert_fail@plt+0x23b4>
   13660:	ldrd	r2, [sp]
   13664:	ldrd	r0, [r7, #64]	; 0x40
   13668:	cmp	r1, r3
   1366c:	cmpeq	r0, r2
   13670:	bne	13734 <__assert_fail@plt+0x23a8>
   13674:	ldrd	r2, [sp, #96]	; 0x60
   13678:	ldrd	r0, [r7, #160]	; 0xa0
   1367c:	cmp	r1, r3
   13680:	cmpeq	r0, r2
   13684:	bne	13734 <__assert_fail@plt+0x23a8>
   13688:	ldr	r9, [r5, #48]	; 0x30
   1368c:	tst	r9, #512	; 0x200
   13690:	bne	13784 <__assert_fail@plt+0x23f8>
   13694:	mov	r0, r6
   13698:	bl	112fc <fchdir@plt>
   1369c:	mov	r9, r0
   136a0:	cmp	r4, #0
   136a4:	bge	13714 <__assert_fail@plt+0x2388>
   136a8:	bl	1123c <__errno_location@plt>
   136ac:	mov	r4, r0
   136b0:	mov	r0, r6
   136b4:	ldr	r5, [r4]
   136b8:	bl	11350 <close@plt>
   136bc:	str	r5, [r4]
   136c0:	b	13714 <__assert_fail@plt+0x2388>
   136c4:	cmp	r8, #0
   136c8:	bne	13704 <__assert_fail@plt+0x2378>
   136cc:	cmp	r4, #0
   136d0:	movge	r6, r4
   136d4:	blt	13624 <__assert_fail@plt+0x2298>
   136d8:	tst	r9, #2
   136dc:	bne	13648 <__assert_fail@plt+0x22bc>
   136e0:	cmp	sl, #0
   136e4:	beq	1368c <__assert_fail@plt+0x2300>
   136e8:	mov	r0, sl
   136ec:	movw	r1, #47188	; 0xb854
   136f0:	movt	r1, #1
   136f4:	bl	11074 <strcmp@plt>
   136f8:	cmp	r0, #0
   136fc:	bne	1368c <__assert_fail@plt+0x2300>
   13700:	b	13648 <__assert_fail@plt+0x22bc>
   13704:	mvn	r3, r4
   13708:	lsr	r3, r3, #31
   1370c:	ands	r9, r3, r9, lsr #9
   13710:	bne	137a0 <__assert_fail@plt+0x2414>
   13714:	mov	r0, r9
   13718:	add	sp, sp, #104	; 0x68
   1371c:	ldrd	r4, [sp]
   13720:	ldrd	r6, [sp, #8]
   13724:	ldrd	r8, [sp, #16]
   13728:	ldr	sl, [sp, #24]
   1372c:	add	sp, sp, #28
   13730:	pop	{pc}		; (ldr pc, [sp], #4)
   13734:	bl	1123c <__errno_location@plt>
   13738:	mov	r3, #2
   1373c:	str	r3, [r0]
   13740:	mvn	r9, #0
   13744:	b	136a0 <__assert_fail@plt+0x2314>
   13748:	add	r6, r5, #60	; 0x3c
   1374c:	mov	r0, r6
   13750:	bl	16298 <__assert_fail@plt+0x4f0c>
   13754:	subs	r8, r0, #0
   13758:	bne	13624 <__assert_fail@plt+0x2298>
   1375c:	mov	r0, r6
   13760:	bl	162e8 <__assert_fail@plt+0x4f5c>
   13764:	subs	r6, r0, #0
   13768:	blt	137b0 <__assert_fail@plt+0x2424>
   1376c:	ldr	r9, [r5, #48]	; 0x30
   13770:	mov	r4, r6
   13774:	mov	r8, #1
   13778:	tst	r9, #2
   1377c:	beq	1368c <__assert_fail@plt+0x2300>
   13780:	b	13648 <__assert_fail@plt+0x22bc>
   13784:	eor	r2, r8, #1
   13788:	mov	r1, r6
   1378c:	uxtb	r2, r2
   13790:	mov	r0, r5
   13794:	bl	1321c <__assert_fail@plt+0x1e90>
   13798:	mov	r9, #0
   1379c:	b	13714 <__assert_fail@plt+0x2388>
   137a0:	mov	r0, r4
   137a4:	mov	r9, #0
   137a8:	bl	11350 <close@plt>
   137ac:	b	13714 <__assert_fail@plt+0x2388>
   137b0:	mov	r8, #1
   137b4:	ldr	r9, [r5, #48]	; 0x30
   137b8:	b	13624 <__assert_fail@plt+0x2298>
   137bc:	mvn	r9, #0
   137c0:	b	13714 <__assert_fail@plt+0x2388>
   137c4:	tst	r9, #2
   137c8:	mov	r6, r4
   137cc:	mov	r8, #1
   137d0:	beq	136e8 <__assert_fail@plt+0x235c>
   137d4:	b	13648 <__assert_fail@plt+0x22bc>
   137d8:	movw	r3, #258	; 0x102
   137dc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   137e0:	tst	r0, r3
   137e4:	strd	r6, [sp, #8]
   137e8:	strd	r8, [sp, #16]
   137ec:	mov	r8, r2
   137f0:	str	sl, [sp, #24]
   137f4:	mov	sl, r1
   137f8:	str	lr, [sp, #28]
   137fc:	beq	13880 <__assert_fail@plt+0x24f4>
   13800:	mov	r0, #24
   13804:	bl	19c68 <__assert_fail@plt+0x88dc>
   13808:	subs	r9, r0, #0
   1380c:	beq	138a4 <__assert_fail@plt+0x2518>
   13810:	ldrd	r6, [r8, #64]	; 0x40
   13814:	mov	r1, r9
   13818:	ldrd	r4, [r8, #160]	; 0xa0
   1381c:	ldr	r0, [sl]
   13820:	strd	r6, [r9]
   13824:	str	r8, [r9, #16]
   13828:	strd	r4, [r9, #8]
   1382c:	bl	16110 <__assert_fail@plt+0x4d84>
   13830:	cmp	r9, r0
   13834:	mov	r4, r0
   13838:	beq	13864 <__assert_fail@plt+0x24d8>
   1383c:	mov	r0, r9
   13840:	bl	12da4 <__assert_fail@plt+0x1a18>
   13844:	cmp	r4, #0
   13848:	beq	138a4 <__assert_fail@plt+0x2518>
   1384c:	ldr	r3, [r4, #16]
   13850:	mov	r2, #2
   13854:	mov	r0, #1
   13858:	str	r3, [r8]
   1385c:	strh	r2, [r8, #56]	; 0x38
   13860:	b	13868 <__assert_fail@plt+0x24dc>
   13864:	mov	r0, #1
   13868:	ldrd	r4, [sp]
   1386c:	ldrd	r6, [sp, #8]
   13870:	ldrd	r8, [sp, #16]
   13874:	ldr	sl, [sp, #24]
   13878:	add	sp, sp, #28
   1387c:	pop	{pc}		; (ldr pc, [sp], #4)
   13880:	add	r1, r2, #64	; 0x40
   13884:	ldr	r0, [sl]
   13888:	bl	19dac <__assert_fail@plt+0x8a20>
   1388c:	cmp	r0, #0
   13890:	beq	13864 <__assert_fail@plt+0x24d8>
   13894:	mov	r3, #2
   13898:	str	r8, [r8]
   1389c:	strh	r3, [r8, #56]	; 0x38
   138a0:	b	13868 <__assert_fail@plt+0x24dc>
   138a4:	mov	r0, #0
   138a8:	b	13868 <__assert_fail@plt+0x24dc>
   138ac:	movw	r3, #258	; 0x102
   138b0:	mov	ip, r1
   138b4:	strd	r4, [sp, #-12]!
   138b8:	tst	r0, r3
   138bc:	str	lr, [sp, #8]
   138c0:	sub	sp, sp, #28
   138c4:	bne	13914 <__assert_fail@plt+0x2588>
   138c8:	ldr	r3, [r2, #4]
   138cc:	cmp	r3, #0
   138d0:	beq	13904 <__assert_fail@plt+0x2578>
   138d4:	ldr	r1, [r3, #48]	; 0x30
   138d8:	cmp	r1, #0
   138dc:	blt	13904 <__assert_fail@plt+0x2578>
   138e0:	ldr	ip, [ip]
   138e4:	ldrd	r0, [ip, #16]
   138e8:	orrs	r1, r0, r1
   138ec:	beq	13974 <__assert_fail@plt+0x25e8>
   138f0:	ldrd	r4, [ip]
   138f4:	ldrd	r0, [r2, #160]	; 0xa0
   138f8:	cmp	r5, r1
   138fc:	cmpeq	r4, r0
   13900:	beq	1394c <__assert_fail@plt+0x25c0>
   13904:	add	sp, sp, #28
   13908:	ldrd	r4, [sp]
   1390c:	add	sp, sp, #8
   13910:	pop	{pc}		; (ldr pc, [sp], #4)
   13914:	ldrd	r4, [r2, #64]	; 0x40
   13918:	mov	r1, sp
   1391c:	ldrd	r2, [r2, #160]	; 0xa0
   13920:	ldr	r0, [ip]
   13924:	strd	r4, [sp]
   13928:	strd	r2, [sp, #8]
   1392c:	bl	16150 <__assert_fail@plt+0x4dc4>
   13930:	cmp	r0, #0
   13934:	beq	13974 <__assert_fail@plt+0x25e8>
   13938:	bl	12da4 <__assert_fail@plt+0x1a18>
   1393c:	add	sp, sp, #28
   13940:	ldrd	r4, [sp]
   13944:	add	sp, sp, #8
   13948:	pop	{pc}		; (ldr pc, [sp], #4)
   1394c:	ldrd	r0, [ip, #8]
   13950:	ldrd	r4, [r2, #64]	; 0x40
   13954:	cmp	r1, r5
   13958:	cmpeq	r0, r4
   1395c:	bne	13904 <__assert_fail@plt+0x2578>
   13960:	ldrd	r0, [r3, #64]	; 0x40
   13964:	ldrd	r2, [r3, #160]	; 0xa0
   13968:	strd	r2, [ip]
   1396c:	strd	r0, [ip, #8]
   13970:	b	13904 <__assert_fail@plt+0x2578>
   13974:	bl	11344 <abort@plt>
   13978:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1397c:	mov	r5, r0
   13980:	strd	r6, [sp, #8]
   13984:	strd	r8, [sp, #16]
   13988:	ldr	r9, [r0]
   1398c:	strd	sl, [sp, #24]
   13990:	str	lr, [sp, #32]
   13994:	sub	sp, sp, #68	; 0x44
   13998:	str	r1, [sp, #32]
   1399c:	ldr	r0, [r9, #12]
   139a0:	cmp	r0, #0
   139a4:	str	r0, [sp, #40]	; 0x28
   139a8:	beq	13ce8 <__assert_fail@plt+0x295c>
   139ac:	bl	112f0 <dirfd@plt>
   139b0:	cmp	r0, #0
   139b4:	str	r0, [sp, #60]	; 0x3c
   139b8:	blt	1422c <__assert_fail@plt+0x2ea0>
   139bc:	ldr	r3, [r5, #44]	; 0x2c
   139c0:	cmp	r3, #0
   139c4:	beq	14110 <__assert_fail@plt+0x2d84>
   139c8:	ldr	r3, [r5, #48]	; 0x30
   139cc:	mvn	r2, #0
   139d0:	str	r2, [sp, #16]
   139d4:	mov	r2, #1
   139d8:	str	r2, [sp, #52]	; 0x34
   139dc:	ldr	r2, [r9, #28]
   139e0:	ldr	r1, [r9, #40]	; 0x28
   139e4:	sub	r0, r1, #1
   139e8:	str	r1, [sp]
   139ec:	ldrb	r2, [r2, r0]
   139f0:	str	r0, [sp, #28]
   139f4:	cmp	r2, #47	; 0x2f
   139f8:	beq	13a08 <__assert_fail@plt+0x267c>
   139fc:	add	r2, r1, #1
   13a00:	str	r2, [sp]
   13a04:	str	r1, [sp, #28]
   13a08:	ands	r3, r3, #4
   13a0c:	streq	r3, [sp, #20]
   13a10:	beq	13a30 <__assert_fail@plt+0x26a4>
   13a14:	ldr	r3, [r5, #24]
   13a18:	mov	r1, #47	; 0x2f
   13a1c:	ldr	r0, [sp, #28]
   13a20:	add	r2, r3, r0
   13a24:	strb	r1, [r3, r0]
   13a28:	add	r3, r2, #1
   13a2c:	str	r3, [sp, #20]
   13a30:	mov	sl, #0
   13a34:	movw	r3, #6548	; 0x1994
   13a38:	movt	r3, #258	; 0x102
   13a3c:	mov	r2, sl
   13a40:	ldr	fp, [r5, #36]	; 0x24
   13a44:	mov	r7, sl
   13a48:	stmib	sp, {r2, r9}
   13a4c:	movw	r2, #19778	; 0x4d42
   13a50:	movt	r2, #65363	; 0xff53
   13a54:	str	sl, [sp, #24]
   13a58:	str	r3, [sp, #44]	; 0x2c
   13a5c:	ldr	r3, [r9, #48]	; 0x30
   13a60:	str	sl, [sp, #36]	; 0x24
   13a64:	str	r2, [sp, #48]	; 0x30
   13a68:	ldr	r2, [sp]
   13a6c:	add	r3, r3, #1
   13a70:	str	r3, [sp, #12]
   13a74:	sub	fp, fp, r2
   13a78:	b	13a90 <__assert_fail@plt+0x2704>
   13a7c:	ldr	r3, [sp, #16]
   13a80:	add	r7, r7, #1
   13a84:	cmp	r7, r3
   13a88:	bcs	13e48 <__assert_fail@plt+0x2abc>
   13a8c:	mov	sl, r4
   13a90:	ldr	r3, [sp, #8]
   13a94:	ldr	r4, [r3, #12]
   13a98:	cmp	r4, #0
   13a9c:	beq	13fd0 <__assert_fail@plt+0x2c44>
   13aa0:	bl	1123c <__errno_location@plt>
   13aa4:	mov	r8, r0
   13aa8:	mov	r3, #0
   13aac:	mov	r0, r4
   13ab0:	str	r3, [r8]
   13ab4:	bl	112d8 <readdir64@plt>
   13ab8:	subs	r9, r0, #0
   13abc:	beq	140a0 <__assert_fail@plt+0x2d14>
   13ac0:	ldr	r3, [r5, #48]	; 0x30
   13ac4:	tst	r3, #32
   13ac8:	bne	13ad8 <__assert_fail@plt+0x274c>
   13acc:	ldrb	r3, [r9, #19]
   13ad0:	cmp	r3, #46	; 0x2e
   13ad4:	beq	13c6c <__assert_fail@plt+0x28e0>
   13ad8:	add	r4, r9, #19
   13adc:	mov	r0, r4
   13ae0:	bl	1120c <strlen@plt>
   13ae4:	mov	r2, r0
   13ae8:	mov	r1, r4
   13aec:	mov	r6, r0
   13af0:	mov	r0, r5
   13af4:	bl	12fe0 <__assert_fail@plt+0x1c54>
   13af8:	subs	r4, r0, #0
   13afc:	beq	13f00 <__assert_fail@plt+0x2b74>
   13b00:	cmp	fp, r6
   13b04:	bls	13bcc <__assert_fail@plt+0x2840>
   13b08:	ldr	r3, [sp]
   13b0c:	adds	r6, r6, r3
   13b10:	bcs	14300 <__assert_fail@plt+0x2f74>
   13b14:	ldr	r3, [sp, #12]
   13b18:	add	r1, r4, #168	; 0xa8
   13b1c:	ldr	ip, [r5]
   13b20:	ldr	r0, [r5, #48]	; 0x30
   13b24:	str	r6, [r4, #40]	; 0x28
   13b28:	str	r3, [r4, #48]	; 0x30
   13b2c:	ldrd	r2, [r9]
   13b30:	str	ip, [r4, #4]
   13b34:	tst	r0, #4
   13b38:	streq	r1, [r4, #24]
   13b3c:	strd	r2, [r4, #160]	; 0xa0
   13b40:	bne	13c4c <__assert_fail@plt+0x28c0>
   13b44:	ldr	r3, [r5, #44]	; 0x2c
   13b48:	cmp	r3, #0
   13b4c:	beq	13b58 <__assert_fail@plt+0x27cc>
   13b50:	ands	r3, r0, #1024	; 0x400
   13b54:	beq	13c8c <__assert_fail@plt+0x2900>
   13b58:	ldrb	r3, [r9, #18]
   13b5c:	tst	r0, #8
   13b60:	sub	r2, r3, #1
   13b64:	beq	13b70 <__assert_fail@plt+0x27e4>
   13b68:	tst	r3, #251	; 0xfb
   13b6c:	bne	13ca4 <__assert_fail@plt+0x2918>
   13b70:	mov	r3, #11
   13b74:	cmp	r2, r3
   13b78:	strh	r3, [r4, #56]	; 0x38
   13b7c:	bls	13c30 <__assert_fail@plt+0x28a4>
   13b80:	mov	r1, #0
   13b84:	mov	r2, #2
   13b88:	mov	r3, #0
   13b8c:	str	r1, [r4, #80]	; 0x50
   13b90:	strd	r2, [r4, #112]	; 0x70
   13b94:	ldr	r2, [sp, #4]
   13b98:	mov	r3, #0
   13b9c:	str	r3, [r4, #8]
   13ba0:	cmp	r2, r3
   13ba4:	movw	r3, #10000	; 0x2710
   13ba8:	strne	r4, [sl, #8]
   13bac:	streq	r4, [sp, #4]
   13bb0:	cmp	r7, r3
   13bb4:	bne	13a7c <__assert_fail@plt+0x26f0>
   13bb8:	ldr	r6, [r5, #44]	; 0x2c
   13bbc:	cmp	r6, #0
   13bc0:	beq	13dfc <__assert_fail@plt+0x2a70>
   13bc4:	movw	r7, #10001	; 0x2711
   13bc8:	b	13a8c <__assert_fail@plt+0x2700>
   13bcc:	ldr	r3, [sp, #28]
   13bd0:	add	r1, r5, #36	; 0x24
   13bd4:	add	r0, r5, #24
   13bd8:	ldr	fp, [r5, #24]
   13bdc:	add	r2, r3, #2
   13be0:	add	r2, r2, r6
   13be4:	bl	1346c <__assert_fail@plt+0x20e0>
   13be8:	cmp	r0, #0
   13bec:	beq	13f00 <__assert_fail@plt+0x2b74>
   13bf0:	ldr	r3, [r5, #24]
   13bf4:	cmp	r3, fp
   13bf8:	beq	13ce0 <__assert_fail@plt+0x2954>
   13bfc:	ldr	r2, [r5, #48]	; 0x30
   13c00:	tst	r2, #4
   13c04:	beq	13c14 <__assert_fail@plt+0x2888>
   13c08:	ldr	r2, [sp]
   13c0c:	add	r3, r3, r2
   13c10:	str	r3, [sp, #20]
   13c14:	ldr	r3, [sp]
   13c18:	str	r0, [sp, #24]
   13c1c:	ldr	fp, [r5, #36]	; 0x24
   13c20:	sub	fp, fp, r3
   13c24:	b	13b08 <__assert_fail@plt+0x277c>
   13c28:	mov	r3, #11
   13c2c:	strh	r3, [r4, #56]	; 0x38
   13c30:	movw	r3, #47140	; 0xb824
   13c34:	movt	r3, #1
   13c38:	ldr	r1, [r3, r2, lsl #2]
   13c3c:	mov	r2, #2
   13c40:	mov	r3, #0
   13c44:	str	r1, [r4, #80]	; 0x50
   13c48:	b	13b90 <__assert_fail@plt+0x2804>
   13c4c:	ldr	r3, [r4, #28]
   13c50:	ldr	r2, [r4, #52]	; 0x34
   13c54:	ldr	r0, [sp, #20]
   13c58:	str	r3, [r4, #24]
   13c5c:	add	r2, r2, #1
   13c60:	bl	11098 <memmove@plt>
   13c64:	ldr	r0, [r5, #48]	; 0x30
   13c68:	b	13b44 <__assert_fail@plt+0x27b8>
   13c6c:	ldrb	r3, [r9, #20]
   13c70:	cmp	r3, #0
   13c74:	beq	13c84 <__assert_fail@plt+0x28f8>
   13c78:	ldrh	r3, [r9, #20]
   13c7c:	cmp	r3, #46	; 0x2e
   13c80:	bne	13ad8 <__assert_fail@plt+0x274c>
   13c84:	mov	r4, sl
   13c88:	b	13a8c <__assert_fail@plt+0x2700>
   13c8c:	mov	r1, r0
   13c90:	mov	r2, r4
   13c94:	ldr	r0, [r5, #32]
   13c98:	bl	13310 <__assert_fail@plt+0x1f84>
   13c9c:	strh	r0, [r4, #56]	; 0x38
   13ca0:	b	13b94 <__assert_fail@plt+0x2808>
   13ca4:	ubfx	r0, r0, #4, #1
   13ca8:	cmp	r3, #10
   13cac:	moveq	r3, r0
   13cb0:	orrne	r3, r0, #1
   13cb4:	cmp	r3, #0
   13cb8:	beq	13c28 <__assert_fail@plt+0x289c>
   13cbc:	mov	r3, #11
   13cc0:	cmp	r2, r3
   13cc4:	strh	r3, [r4, #56]	; 0x38
   13cc8:	bls	13ee4 <__assert_fail@plt+0x2b58>
   13ccc:	mov	r1, #0
   13cd0:	mov	r2, #1
   13cd4:	mov	r3, #0
   13cd8:	str	r1, [r4, #80]	; 0x50
   13cdc:	b	13b90 <__assert_fail@plt+0x2804>
   13ce0:	ldr	r0, [sp, #24]
   13ce4:	b	13c14 <__assert_fail@plt+0x2888>
   13ce8:	ldr	r3, [r5, #48]	; 0x30
   13cec:	ldr	r1, [r9, #24]
   13cf0:	and	r2, r3, #516	; 0x204
   13cf4:	cmp	r2, #512	; 0x200
   13cf8:	ldreq	r0, [r5, #32]
   13cfc:	mvnne	r0, #99	; 0x63
   13d00:	ands	r2, r3, #16
   13d04:	beq	13d14 <__assert_fail@plt+0x2988>
   13d08:	tst	r3, #1
   13d0c:	moveq	r2, #32768	; 0x8000
   13d10:	bne	13f64 <__assert_fail@plt+0x2bd8>
   13d14:	add	r3, sp, #60	; 0x3c
   13d18:	bl	163f0 <__assert_fail@plt+0x5064>
   13d1c:	cmp	r0, #0
   13d20:	str	r0, [sp, #4]
   13d24:	str	r0, [r9, #12]
   13d28:	beq	14274 <__assert_fail@plt+0x2ee8>
   13d2c:	ldrh	r3, [r9, #56]	; 0x38
   13d30:	ldr	r0, [r5, #48]	; 0x30
   13d34:	cmp	r3, #11
   13d38:	beq	141c0 <__assert_fail@plt+0x2e34>
   13d3c:	tst	r0, #256	; 0x100
   13d40:	bne	1413c <__assert_fail@plt+0x2db0>
   13d44:	ldr	r2, [r5, #44]	; 0x2c
   13d48:	movw	r3, #34464	; 0x86a0
   13d4c:	movt	r3, #1
   13d50:	cmp	r2, #0
   13d54:	mvnne	r3, #0
   13d58:	str	r3, [sp, #16]
   13d5c:	ldr	r3, [sp, #32]
   13d60:	cmp	r3, #2
   13d64:	beq	1412c <__assert_fail@plt+0x2da0>
   13d68:	ldr	r3, [r5, #48]	; 0x30
   13d6c:	ldr	r0, [sp, #60]	; 0x3c
   13d70:	and	r3, r3, #56	; 0x38
   13d74:	cmp	r3, #24
   13d78:	beq	13f74 <__assert_fail@plt+0x2be8>
   13d7c:	ldr	r3, [sp, #32]
   13d80:	mov	r4, #1
   13d84:	sub	r6, r3, #3
   13d88:	clz	r6, r6
   13d8c:	lsr	r6, r6, #5
   13d90:	ldr	r3, [r5, #48]	; 0x30
   13d94:	tst	r3, #512	; 0x200
   13d98:	bne	14260 <__assert_fail@plt+0x2ed4>
   13d9c:	cmp	r0, #0
   13da0:	bge	14200 <__assert_fail@plt+0x2e74>
   13da4:	tst	r6, r4
   13da8:	beq	13db8 <__assert_fail@plt+0x2a2c>
   13dac:	bl	1123c <__errno_location@plt>
   13db0:	ldr	r3, [r0]
   13db4:	str	r3, [r9, #32]
   13db8:	ldrh	r3, [r9, #58]	; 0x3a
   13dbc:	ldr	r0, [r9, #12]
   13dc0:	orr	r3, r3, #1
   13dc4:	strh	r3, [r9, #58]	; 0x3a
   13dc8:	bl	11368 <closedir@plt>
   13dcc:	ldr	r3, [r5, #48]	; 0x30
   13dd0:	mov	r2, #0
   13dd4:	str	r2, [r9, #12]
   13dd8:	tst	r3, #512	; 0x200
   13ddc:	beq	13dec <__assert_fail@plt+0x2a60>
   13de0:	ldr	r0, [sp, #60]	; 0x3c
   13de4:	cmp	r0, r2
   13de8:	bge	14254 <__assert_fail@plt+0x2ec8>
   13dec:	mov	r2, #0
   13df0:	str	r2, [r9, #12]
   13df4:	str	r2, [sp, #52]	; 0x34
   13df8:	b	139dc <__assert_fail@plt+0x2650>
   13dfc:	ldr	r0, [sp, #8]
   13e00:	ldr	r1, [sp, #60]	; 0x3c
   13e04:	bl	130fc <__assert_fail@plt+0x1d70>
   13e08:	movw	r3, #26985	; 0x6969
   13e0c:	cmp	r0, r3
   13e10:	beq	13e34 <__assert_fail@plt+0x2aa8>
   13e14:	ldr	r3, [sp, #44]	; 0x2c
   13e18:	cmp	r0, r3
   13e1c:	beq	13e34 <__assert_fail@plt+0x2aa8>
   13e20:	ldr	r3, [sp, #48]	; 0x30
   13e24:	cmp	r0, r3
   13e28:	movne	r3, #1
   13e2c:	strne	r3, [sp, #36]	; 0x24
   13e30:	bne	13bc4 <__assert_fail@plt+0x2838>
   13e34:	ldr	r3, [sp, #16]
   13e38:	add	r7, r7, #1
   13e3c:	str	r6, [sp, #36]	; 0x24
   13e40:	cmp	r7, r3
   13e44:	bcc	13a8c <__assert_fail@plt+0x2700>
   13e48:	ldr	r9, [sp, #8]
   13e4c:	ldr	r3, [sp, #24]
   13e50:	cmp	r3, #0
   13e54:	beq	13fe0 <__assert_fail@plt+0x2c54>
   13e58:	ldr	r3, [r5, #4]
   13e5c:	ldr	r1, [r5, #24]
   13e60:	cmp	r3, #0
   13e64:	beq	13e98 <__assert_fail@plt+0x2b0c>
   13e68:	ldr	r2, [r3, #24]
   13e6c:	add	r0, r3, #168	; 0xa8
   13e70:	cmp	r2, r0
   13e74:	beq	13e88 <__assert_fail@plt+0x2afc>
   13e78:	ldr	r0, [r3, #28]
   13e7c:	sub	r2, r2, r0
   13e80:	add	r2, r1, r2
   13e84:	str	r2, [r3, #24]
   13e88:	str	r1, [r3, #28]
   13e8c:	ldr	r3, [r3, #8]
   13e90:	cmp	r3, #0
   13e94:	bne	13e68 <__assert_fail@plt+0x2adc>
   13e98:	ldr	r3, [sp, #4]
   13e9c:	b	13ed0 <__assert_fail@plt+0x2b44>
   13ea0:	ldr	r2, [r3, #24]
   13ea4:	cmp	r2, r0
   13ea8:	beq	13ebc <__assert_fail@plt+0x2b30>
   13eac:	ldr	r0, [r3, #28]
   13eb0:	sub	r2, r2, r0
   13eb4:	add	r2, r1, r2
   13eb8:	str	r2, [r3, #24]
   13ebc:	ldr	r2, [r3, #8]
   13ec0:	str	r1, [r3, #28]
   13ec4:	cmp	r2, #0
   13ec8:	ldreq	r2, [r3, #4]
   13ecc:	mov	r3, r2
   13ed0:	ldr	r2, [r3, #48]	; 0x30
   13ed4:	add	r0, r3, #168	; 0xa8
   13ed8:	cmp	r2, #0
   13edc:	bge	13ea0 <__assert_fail@plt+0x2b14>
   13ee0:	b	13fe0 <__assert_fail@plt+0x2c54>
   13ee4:	movw	r3, #47140	; 0xb824
   13ee8:	movt	r3, #1
   13eec:	ldr	r1, [r3, r2, lsl #2]
   13ef0:	mov	r2, #1
   13ef4:	mov	r3, #0
   13ef8:	str	r1, [r4, #80]	; 0x50
   13efc:	b	13b90 <__assert_fail@plt+0x2804>
   13f00:	ldr	r9, [sp, #8]
   13f04:	mov	r0, r4
   13f08:	ldr	r4, [r8]
   13f0c:	bl	12da4 <__assert_fail@plt+0x1a18>
   13f10:	ldr	r0, [sp, #4]
   13f14:	bl	13070 <__assert_fail@plt+0x1ce4>
   13f18:	ldr	r0, [r9, #12]
   13f1c:	bl	11368 <closedir@plt>
   13f20:	ldr	r3, [r5, #48]	; 0x30
   13f24:	mov	r2, #0
   13f28:	mov	r1, #7
   13f2c:	str	r2, [sp, #4]
   13f30:	str	r2, [r9, #12]
   13f34:	strh	r1, [r9, #56]	; 0x38
   13f38:	orr	r3, r3, #8192	; 0x2000
   13f3c:	str	r3, [r5, #48]	; 0x30
   13f40:	str	r4, [r8]
   13f44:	ldr	r0, [sp, #4]
   13f48:	add	sp, sp, #68	; 0x44
   13f4c:	ldrd	r4, [sp]
   13f50:	ldrd	r6, [sp, #8]
   13f54:	ldrd	r8, [sp, #16]
   13f58:	ldrd	sl, [sp, #24]
   13f5c:	add	sp, sp, #32
   13f60:	pop	{pc}		; (ldr pc, [sp], #4)
   13f64:	ldr	r2, [r9, #48]	; 0x30
   13f68:	cmp	r2, #0
   13f6c:	movne	r2, #32768	; 0x8000
   13f70:	b	13d14 <__assert_fail@plt+0x2988>
   13f74:	ldr	r3, [r9, #84]	; 0x54
   13f78:	cmp	r3, #2
   13f7c:	bne	13d7c <__assert_fail@plt+0x29f0>
   13f80:	mov	r1, r0
   13f84:	mov	r0, r9
   13f88:	bl	130fc <__assert_fail@plt+0x1d70>
   13f8c:	movw	r3, #26985	; 0x6969
   13f90:	cmp	r0, r3
   13f94:	beq	142f8 <__assert_fail@plt+0x2f6c>
   13f98:	bgt	142dc <__assert_fail@plt+0x2f50>
   13f9c:	movw	r3, #19778	; 0x4d42
   13fa0:	movt	r3, #65363	; 0xff53
   13fa4:	cmp	r0, r3
   13fa8:	beq	142f8 <__assert_fail@plt+0x2f6c>
   13fac:	cmp	r0, #0
   13fb0:	beq	142f8 <__assert_fail@plt+0x2f6c>
   13fb4:	ldr	r3, [sp, #32]
   13fb8:	cmp	r3, #3
   13fbc:	bne	1412c <__assert_fail@plt+0x2da0>
   13fc0:	mov	r4, #0
   13fc4:	mov	r6, #1
   13fc8:	ldr	r0, [sp, #60]	; 0x3c
   13fcc:	b	13d90 <__assert_fail@plt+0x2a04>
   13fd0:	mov	r9, r3
   13fd4:	ldr	r3, [sp, #24]
   13fd8:	cmp	r3, #0
   13fdc:	bne	13e58 <__assert_fail@plt+0x2acc>
   13fe0:	ldr	r3, [r5, #48]	; 0x30
   13fe4:	tst	r3, #4
   13fe8:	beq	14018 <__assert_fail@plt+0x2c8c>
   13fec:	ldr	r2, [sp]
   13ff0:	ldr	r3, [r5, #36]	; 0x24
   13ff4:	cmp	r7, #0
   13ff8:	cmpne	r3, r2
   13ffc:	bne	1400c <__assert_fail@plt+0x2c80>
   14000:	ldr	r3, [sp, #20]
   14004:	sub	r3, r3, #1
   14008:	str	r3, [sp, #20]
   1400c:	ldr	r2, [sp, #20]
   14010:	mov	r3, #0
   14014:	strb	r3, [r2]
   14018:	ldr	r2, [sp, #40]	; 0x28
   1401c:	ldr	r3, [sp, #52]	; 0x34
   14020:	cmp	r2, #0
   14024:	movne	r3, #0
   14028:	cmp	r3, #0
   1402c:	beq	14064 <__assert_fail@plt+0x2cd8>
   14030:	ldr	r3, [sp, #32]
   14034:	cmp	r7, #0
   14038:	cmpne	r3, #1
   1403c:	bne	1406c <__assert_fail@plt+0x2ce0>
   14040:	ldr	r3, [r9, #48]	; 0x30
   14044:	cmp	r3, #0
   14048:	bne	141dc <__assert_fail@plt+0x2e50>
   1404c:	mov	r0, r5
   14050:	bl	132ac <__assert_fail@plt+0x1f20>
   14054:	adds	r0, r0, #0
   14058:	movne	r0, #1
   1405c:	cmp	r0, #0
   14060:	bne	142b4 <__assert_fail@plt+0x2f28>
   14064:	cmp	r7, #0
   14068:	beq	1418c <__assert_fail@plt+0x2e00>
   1406c:	ldr	r3, [sp, #36]	; 0x24
   14070:	cmp	r3, #0
   14074:	bne	140e4 <__assert_fail@plt+0x2d58>
   14078:	ldr	r3, [r5, #44]	; 0x2c
   1407c:	cmp	r3, #0
   14080:	cmpne	r7, #1
   14084:	beq	13f44 <__assert_fail@plt+0x2bb8>
   14088:	mov	r2, r7
   1408c:	mov	r0, r5
   14090:	ldr	r1, [sp, #4]
   14094:	bl	12eec <__assert_fail@plt+0x1b60>
   14098:	str	r0, [sp, #4]
   1409c:	b	13f44 <__assert_fail@plt+0x2bb8>
   140a0:	ldr	r3, [r8]
   140a4:	ldr	r9, [sp, #8]
   140a8:	cmp	r3, #0
   140ac:	beq	140c8 <__assert_fail@plt+0x2d3c>
   140b0:	ldr	r2, [sp, #40]	; 0x28
   140b4:	str	r3, [r9, #32]
   140b8:	orrs	r2, r2, r7
   140bc:	moveq	r3, #4
   140c0:	movne	r3, #7
   140c4:	strh	r3, [r9, #56]	; 0x38
   140c8:	ldr	r0, [r9, #12]
   140cc:	cmp	r0, #0
   140d0:	beq	13fd4 <__assert_fail@plt+0x2c48>
   140d4:	bl	11368 <closedir@plt>
   140d8:	mov	r3, #0
   140dc:	str	r3, [r9, #12]
   140e0:	b	13fd4 <__assert_fail@plt+0x2c48>
   140e4:	movw	r3, #11964	; 0x2ebc
   140e8:	movt	r3, #1
   140ec:	ldr	r1, [sp, #4]
   140f0:	mov	r2, r7
   140f4:	mov	r0, r5
   140f8:	str	r3, [r5, #44]	; 0x2c
   140fc:	bl	12eec <__assert_fail@plt+0x1b60>
   14100:	mov	r3, #0
   14104:	str	r0, [sp, #4]
   14108:	str	r3, [r5, #44]	; 0x2c
   1410c:	b	13f44 <__assert_fail@plt+0x2bb8>
   14110:	movw	r3, #34464	; 0x86a0
   14114:	movt	r3, #1
   14118:	mov	r2, #1
   1411c:	str	r3, [sp, #16]
   14120:	str	r2, [sp, #52]	; 0x34
   14124:	ldr	r3, [r5, #48]	; 0x30
   14128:	b	139dc <__assert_fail@plt+0x2650>
   1412c:	mov	r3, #0
   14130:	str	r3, [sp, #52]	; 0x34
   14134:	ldr	r3, [r5, #48]	; 0x30
   14138:	b	139dc <__assert_fail@plt+0x2650>
   1413c:	add	r4, r5, #56	; 0x38
   14140:	mov	r2, r9
   14144:	mov	r1, r4
   14148:	bl	138ac <__assert_fail@plt+0x2520>
   1414c:	mov	r3, #0
   14150:	mov	r2, r9
   14154:	ldr	r0, [r5, #32]
   14158:	ldr	r1, [r5, #48]	; 0x30
   1415c:	bl	13310 <__assert_fail@plt+0x1f84>
   14160:	mov	r1, r4
   14164:	mov	r2, r9
   14168:	ldr	r0, [r5, #48]	; 0x30
   1416c:	bl	137d8 <__assert_fail@plt+0x244c>
   14170:	subs	r4, r0, #0
   14174:	bne	13d44 <__assert_fail@plt+0x29b8>
   14178:	bl	1123c <__errno_location@plt>
   1417c:	mov	r3, #12
   14180:	str	r4, [sp, #4]
   14184:	str	r3, [r0]
   14188:	b	13f44 <__assert_fail@plt+0x2bb8>
   1418c:	ldr	r3, [sp, #32]
   14190:	cmp	r3, #3
   14194:	bne	141ac <__assert_fail@plt+0x2e20>
   14198:	ldrh	r3, [r9, #56]	; 0x38
   1419c:	cmp	r3, #7
   141a0:	cmpne	r3, #4
   141a4:	movne	r3, #6
   141a8:	strhne	r3, [r9, #56]	; 0x38
   141ac:	mov	r3, #0
   141b0:	ldr	r0, [sp, #4]
   141b4:	str	r3, [sp, #4]
   141b8:	bl	13070 <__assert_fail@plt+0x1ce4>
   141bc:	b	13f44 <__assert_fail@plt+0x2bb8>
   141c0:	mov	r1, r0
   141c4:	mov	r3, #0
   141c8:	ldr	r0, [r5, #32]
   141cc:	mov	r2, r9
   141d0:	bl	13310 <__assert_fail@plt+0x1f84>
   141d4:	strh	r0, [r9, #56]	; 0x38
   141d8:	b	13d44 <__assert_fail@plt+0x29b8>
   141dc:	movw	r3, #47188	; 0xb854
   141e0:	movt	r3, #1
   141e4:	ldr	r1, [r9, #4]
   141e8:	mvn	r2, #0
   141ec:	mov	r0, r5
   141f0:	bl	135bc <__assert_fail@plt+0x2230>
   141f4:	adds	r0, r0, #0
   141f8:	movne	r0, #1
   141fc:	b	1405c <__assert_fail@plt+0x2cd0>
   14200:	mov	r2, r0
   14204:	mov	r3, #0
   14208:	mov	r1, r9
   1420c:	mov	r0, r5
   14210:	bl	135bc <__assert_fail@plt+0x2230>
   14214:	cmp	r0, #0
   14218:	bne	13da4 <__assert_fail@plt+0x2a18>
   1421c:	mov	r3, #1
   14220:	str	r3, [sp, #52]	; 0x34
   14224:	ldr	r3, [r5, #48]	; 0x30
   14228:	b	139dc <__assert_fail@plt+0x2650>
   1422c:	ldr	r0, [r9, #12]
   14230:	mov	r4, #0
   14234:	bl	11368 <closedir@plt>
   14238:	ldr	r3, [sp, #32]
   1423c:	str	r4, [r9, #12]
   14240:	cmp	r3, #3
   14244:	beq	14298 <__assert_fail@plt+0x2f0c>
   14248:	mov	r3, #0
   1424c:	str	r3, [sp, #4]
   14250:	b	13f44 <__assert_fail@plt+0x2bb8>
   14254:	bl	11350 <close@plt>
   14258:	ldr	r3, [r5, #48]	; 0x30
   1425c:	b	13dec <__assert_fail@plt+0x2a60>
   14260:	mov	r2, #3
   14264:	movw	r1, #1030	; 0x406
   14268:	bl	19f58 <__assert_fail@plt+0x8bcc>
   1426c:	str	r0, [sp, #60]	; 0x3c
   14270:	b	13d9c <__assert_fail@plt+0x2a10>
   14274:	ldr	r3, [sp, #32]
   14278:	cmp	r3, #3
   1427c:	bne	14248 <__assert_fail@plt+0x2ebc>
   14280:	mov	r3, #4
   14284:	strh	r3, [r9, #56]	; 0x38
   14288:	bl	1123c <__errno_location@plt>
   1428c:	ldr	r3, [r0]
   14290:	str	r3, [r9, #32]
   14294:	b	13f44 <__assert_fail@plt+0x2bb8>
   14298:	mov	r3, #4
   1429c:	str	r4, [sp, #4]
   142a0:	strh	r3, [r9, #56]	; 0x38
   142a4:	bl	1123c <__errno_location@plt>
   142a8:	ldr	r3, [r0]
   142ac:	str	r3, [r9, #32]
   142b0:	b	13f44 <__assert_fail@plt+0x2bb8>
   142b4:	ldr	r3, [r5, #48]	; 0x30
   142b8:	mov	r2, #7
   142bc:	mov	r1, #0
   142c0:	strh	r2, [r9, #56]	; 0x38
   142c4:	ldr	r0, [sp, #4]
   142c8:	str	r1, [sp, #4]
   142cc:	orr	r3, r3, #8192	; 0x2000
   142d0:	str	r3, [r5, #48]	; 0x30
   142d4:	bl	13070 <__assert_fail@plt+0x1ce4>
   142d8:	b	13f44 <__assert_fail@plt+0x2bb8>
   142dc:	movw	r3, #40864	; 0x9fa0
   142e0:	cmp	r0, r3
   142e4:	beq	142f8 <__assert_fail@plt+0x2f6c>
   142e8:	movw	r3, #16719	; 0x414f
   142ec:	movt	r3, #21318	; 0x5346
   142f0:	cmp	r0, r3
   142f4:	bne	13fb4 <__assert_fail@plt+0x2c28>
   142f8:	ldr	r0, [sp, #60]	; 0x3c
   142fc:	b	13d7c <__assert_fail@plt+0x29f0>
   14300:	ldr	r9, [sp, #8]
   14304:	mov	r0, r4
   14308:	bl	12da4 <__assert_fail@plt+0x1a18>
   1430c:	ldr	r0, [sp, #4]
   14310:	bl	13070 <__assert_fail@plt+0x1ce4>
   14314:	ldr	r0, [r9, #12]
   14318:	bl	11368 <closedir@plt>
   1431c:	ldr	r3, [r5, #48]	; 0x30
   14320:	mov	r2, #0
   14324:	mov	r0, #7
   14328:	mov	r1, #36	; 0x24
   1432c:	str	r2, [sp, #4]
   14330:	str	r2, [r9, #12]
   14334:	strh	r0, [r9, #56]	; 0x38
   14338:	orr	r3, r3, #8192	; 0x2000
   1433c:	str	r3, [r5, #48]	; 0x30
   14340:	str	r1, [r8]
   14344:	b	13f44 <__assert_fail@plt+0x2bb8>
   14348:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1434c:	bic	r5, r1, #4080	; 0xff0
   14350:	bic	r5, r5, #15
   14354:	strd	r6, [sp, #8]
   14358:	cmp	r5, #0
   1435c:	strd	r8, [sp, #16]
   14360:	strd	sl, [sp, #24]
   14364:	str	lr, [sp, #32]
   14368:	sub	sp, sp, #12
   1436c:	bne	14688 <__assert_fail@plt+0x32fc>
   14370:	and	r3, r1, #516	; 0x204
   14374:	mov	r7, r1
   14378:	cmp	r3, #516	; 0x204
   1437c:	beq	14624 <__assert_fail@plt+0x3298>
   14380:	ands	r5, r1, #18
   14384:	beq	14624 <__assert_fail@plt+0x3298>
   14388:	mov	r6, r0
   1438c:	mov	r1, #96	; 0x60
   14390:	mov	r0, #1
   14394:	mov	r9, r2
   14398:	bl	19bf4 <__assert_fail@plt+0x8868>
   1439c:	subs	r5, r0, #0
   143a0:	beq	145dc <__assert_fail@plt+0x3250>
   143a4:	tst	r7, #2
   143a8:	mvn	r2, #99	; 0x63
   143ac:	bicne	r3, r7, #512	; 0x200
   143b0:	orrne	r3, r3, #4
   143b4:	streq	r7, [r5, #48]	; 0x30
   143b8:	str	r2, [r5, #32]
   143bc:	strne	r3, [r5, #48]	; 0x30
   143c0:	ldr	r3, [r6]
   143c4:	str	r9, [r5, #44]	; 0x2c
   143c8:	cmp	r3, #0
   143cc:	beq	1469c <__assert_fail@plt+0x3310>
   143d0:	mov	r8, r6
   143d4:	mov	r4, #0
   143d8:	mov	r0, r3
   143dc:	bl	1120c <strlen@plt>
   143e0:	ldr	r3, [r8, #4]!
   143e4:	cmp	r4, r0
   143e8:	movcc	r4, r0
   143ec:	cmp	r3, #0
   143f0:	bne	143d8 <__assert_fail@plt+0x304c>
   143f4:	add	r2, r4, #1
   143f8:	cmp	r2, #4096	; 0x1000
   143fc:	movcc	r2, #4096	; 0x1000
   14400:	add	r1, r5, #36	; 0x24
   14404:	add	r0, r5, #24
   14408:	bl	1346c <__assert_fail@plt+0x20e0>
   1440c:	subs	fp, r0, #0
   14410:	beq	14614 <__assert_fail@plt+0x3288>
   14414:	ldr	sl, [r6]
   14418:	cmp	sl, #0
   1441c:	beq	14678 <__assert_fail@plt+0x32ec>
   14420:	movw	r1, #44956	; 0xaf9c
   14424:	movt	r1, #1
   14428:	mov	r2, #0
   1442c:	mov	r0, r5
   14430:	bl	12fe0 <__assert_fail@plt+0x1c54>
   14434:	subs	sl, r0, #0
   14438:	beq	1460c <__assert_fail@plt+0x3280>
   1443c:	mvn	r3, #0
   14440:	cmp	r9, #0
   14444:	ldr	r4, [r6]
   14448:	str	r3, [sl, #48]	; 0x30
   1444c:	beq	14458 <__assert_fail@plt+0x30cc>
   14450:	ldr	fp, [r5, #48]	; 0x30
   14454:	ubfx	fp, fp, #10, #1
   14458:	cmp	r4, #0
   1445c:	beq	146d8 <__assert_fail@plt+0x334c>
   14460:	eor	r7, r7, #2048	; 0x800
   14464:	mov	r3, #0
   14468:	ubfx	r2, r7, #11, #1
   1446c:	mov	r8, r3
   14470:	mov	r7, r3
   14474:	strd	r2, [sp]
   14478:	b	144b0 <__assert_fail@plt+0x3124>
   1447c:	mov	r3, #11
   14480:	mov	r2, #2
   14484:	cmp	r9, r1
   14488:	strh	r3, [r4, #56]	; 0x38
   1448c:	mov	r3, #0
   14490:	strd	r2, [r4, #112]	; 0x70
   14494:	beq	14664 <__assert_fail@plt+0x32d8>
   14498:	str	r7, [r4, #8]
   1449c:	mov	r7, r4
   144a0:	ldr	r4, [r6, #4]!
   144a4:	add	r8, r8, #1
   144a8:	cmp	r4, #0
   144ac:	beq	1455c <__assert_fail@plt+0x31d0>
   144b0:	mov	r0, r4
   144b4:	bl	1120c <strlen@plt>
   144b8:	ldr	r3, [sp]
   144bc:	mov	r2, r0
   144c0:	cmp	r0, #2
   144c4:	movls	r3, #0
   144c8:	andhi	r3, r3, #1
   144cc:	cmp	r3, #0
   144d0:	bne	14634 <__assert_fail@plt+0x32a8>
   144d4:	mov	r1, r4
   144d8:	mov	r0, r5
   144dc:	bl	12fe0 <__assert_fail@plt+0x1c54>
   144e0:	subs	r4, r0, #0
   144e4:	beq	145fc <__assert_fail@plt+0x3270>
   144e8:	add	r2, r4, #168	; 0xa8
   144ec:	cmp	r7, #0
   144f0:	moveq	r3, #0
   144f4:	andne	r3, fp, #1
   144f8:	str	sl, [r4, #4]
   144fc:	mov	r1, #0
   14500:	cmp	r3, #0
   14504:	str	r2, [r4, #24]
   14508:	str	r1, [r4, #48]	; 0x30
   1450c:	bne	1447c <__assert_fail@plt+0x30f0>
   14510:	mov	r2, r4
   14514:	ldr	r0, [r5, #32]
   14518:	ldr	r1, [r5, #48]	; 0x30
   1451c:	bl	13310 <__assert_fail@plt+0x1f84>
   14520:	cmp	r9, #0
   14524:	strh	r0, [r4, #56]	; 0x38
   14528:	bne	14498 <__assert_fail@plt+0x310c>
   1452c:	cmp	r7, #0
   14530:	str	r9, [r4, #8]
   14534:	moveq	r7, r4
   14538:	streq	r4, [sp, #4]
   1453c:	beq	144a0 <__assert_fail@plt+0x3114>
   14540:	ldr	r3, [sp, #4]
   14544:	str	r4, [sp, #4]
   14548:	str	r4, [r3, #8]
   1454c:	ldr	r4, [r6, #4]!
   14550:	add	r8, r8, #1
   14554:	cmp	r4, #0
   14558:	bne	144b0 <__assert_fail@plt+0x3124>
   1455c:	cmp	r9, #0
   14560:	cmpne	r8, #1
   14564:	bls	1457c <__assert_fail@plt+0x31f0>
   14568:	mov	r1, r7
   1456c:	mov	r2, r8
   14570:	mov	r0, r5
   14574:	bl	12eec <__assert_fail@plt+0x1b60>
   14578:	mov	r7, r0
   1457c:	movw	r1, #44956	; 0xaf9c
   14580:	movt	r1, #1
   14584:	mov	r2, #0
   14588:	mov	r0, r5
   1458c:	bl	12fe0 <__assert_fail@plt+0x1c54>
   14590:	cmp	r0, #0
   14594:	str	r0, [r5]
   14598:	beq	145fc <__assert_fail@plt+0x3270>
   1459c:	mov	r2, #1
   145a0:	mov	r3, #9
   145a4:	str	r7, [r0, #8]
   145a8:	add	r1, r5, #56	; 0x38
   145ac:	str	r2, [r0, #48]	; 0x30
   145b0:	strh	r3, [r0, #56]	; 0x38
   145b4:	ldr	r0, [r5, #48]	; 0x30
   145b8:	bl	134fc <__assert_fail@plt+0x2170>
   145bc:	cmp	r0, #0
   145c0:	beq	145fc <__assert_fail@plt+0x3270>
   145c4:	ldr	r1, [r5, #48]	; 0x30
   145c8:	tst	r1, #516	; 0x204
   145cc:	beq	146a4 <__assert_fail@plt+0x3318>
   145d0:	mvn	r1, #0
   145d4:	add	r0, r5, #60	; 0x3c
   145d8:	bl	1626c <__assert_fail@plt+0x4ee0>
   145dc:	mov	r0, r5
   145e0:	add	sp, sp, #12
   145e4:	ldrd	r4, [sp]
   145e8:	ldrd	r6, [sp, #8]
   145ec:	ldrd	r8, [sp, #16]
   145f0:	ldrd	sl, [sp, #24]
   145f4:	add	sp, sp, #32
   145f8:	pop	{pc}		; (ldr pc, [sp], #4)
   145fc:	mov	r0, r7
   14600:	bl	13070 <__assert_fail@plt+0x1ce4>
   14604:	mov	r0, sl
   14608:	bl	12da4 <__assert_fail@plt+0x1a18>
   1460c:	ldr	r0, [r5, #24]
   14610:	bl	12da4 <__assert_fail@plt+0x1a18>
   14614:	mov	r0, r5
   14618:	mov	r5, #0
   1461c:	bl	12da4 <__assert_fail@plt+0x1a18>
   14620:	b	145dc <__assert_fail@plt+0x3250>
   14624:	bl	1123c <__errno_location@plt>
   14628:	mov	r3, #22
   1462c:	str	r3, [r0]
   14630:	b	145dc <__assert_fail@plt+0x3250>
   14634:	sub	r3, r0, #1
   14638:	ldrb	r1, [r4, r3]
   1463c:	add	r3, r4, r3
   14640:	cmp	r1, #47	; 0x2f
   14644:	bne	144d4 <__assert_fail@plt+0x3148>
   14648:	ldrb	r1, [r3, #-1]!
   1464c:	cmp	r1, #47	; 0x2f
   14650:	bne	144d4 <__assert_fail@plt+0x3148>
   14654:	sub	r2, r2, #1
   14658:	cmp	r2, #1
   1465c:	bne	14648 <__assert_fail@plt+0x32bc>
   14660:	b	144d4 <__assert_fail@plt+0x3148>
   14664:	ldr	r3, [sp, #4]
   14668:	str	r4, [sp, #4]
   1466c:	str	r9, [r4, #8]
   14670:	str	r4, [r3, #8]
   14674:	b	1454c <__assert_fail@plt+0x31c0>
   14678:	cmp	r9, #0
   1467c:	beq	146d0 <__assert_fail@plt+0x3344>
   14680:	mov	r4, sl
   14684:	b	14450 <__assert_fail@plt+0x30c4>
   14688:	bl	1123c <__errno_location@plt>
   1468c:	mov	r3, #22
   14690:	mov	r5, #0
   14694:	str	r3, [r0]
   14698:	b	145dc <__assert_fail@plt+0x3250>
   1469c:	mov	r2, #4096	; 0x1000
   146a0:	b	14400 <__assert_fail@plt+0x3074>
   146a4:	movw	r2, #47192	; 0xb858
   146a8:	movt	r2, #1
   146ac:	ldr	r0, [r5, #32]
   146b0:	bl	1358c <__assert_fail@plt+0x2200>
   146b4:	cmp	r0, #0
   146b8:	str	r0, [r5, #28]
   146bc:	bge	145d0 <__assert_fail@plt+0x3244>
   146c0:	ldr	r3, [r5, #48]	; 0x30
   146c4:	orr	r3, r3, #4
   146c8:	str	r3, [r5, #48]	; 0x30
   146cc:	b	145d0 <__assert_fail@plt+0x3244>
   146d0:	mov	r7, sl
   146d4:	b	1457c <__assert_fail@plt+0x31f0>
   146d8:	mov	r7, r4
   146dc:	b	1457c <__assert_fail@plt+0x31f0>
   146e0:	ldr	r3, [r0]
   146e4:	strd	r4, [sp, #-16]!
   146e8:	mov	r5, r0
   146ec:	str	r6, [sp, #8]
   146f0:	str	lr, [sp, #12]
   146f4:	cmp	r3, #0
   146f8:	beq	14734 <__assert_fail@plt+0x33a8>
   146fc:	ldr	r2, [r3, #48]	; 0x30
   14700:	cmp	r2, #0
   14704:	blt	14854 <__assert_fail@plt+0x34c8>
   14708:	ldr	r4, [r3, #8]
   1470c:	mov	r0, r3
   14710:	cmp	r4, #0
   14714:	ldreq	r4, [r3, #4]
   14718:	bl	12da4 <__assert_fail@plt+0x1a18>
   1471c:	ldr	r2, [r4, #48]	; 0x30
   14720:	mov	r3, r4
   14724:	cmp	r2, #0
   14728:	bge	14708 <__assert_fail@plt+0x337c>
   1472c:	mov	r0, r4
   14730:	bl	12da4 <__assert_fail@plt+0x1a18>
   14734:	ldr	r0, [r5, #4]
   14738:	cmp	r0, #0
   1473c:	beq	14744 <__assert_fail@plt+0x33b8>
   14740:	bl	13070 <__assert_fail@plt+0x1ce4>
   14744:	ldr	r0, [r5, #8]
   14748:	bl	12da4 <__assert_fail@plt+0x1a18>
   1474c:	ldr	r0, [r5, #24]
   14750:	bl	12da4 <__assert_fail@plt+0x1a18>
   14754:	ldr	r3, [r5, #48]	; 0x30
   14758:	tst	r3, #512	; 0x200
   1475c:	bne	147c8 <__assert_fail@plt+0x343c>
   14760:	tst	r3, #4
   14764:	beq	147f4 <__assert_fail@plt+0x3468>
   14768:	mov	r4, #0
   1476c:	add	r0, r5, #60	; 0x3c
   14770:	bl	130b8 <__assert_fail@plt+0x1d2c>
   14774:	ldr	r0, [r5, #52]	; 0x34
   14778:	cmp	r0, #0
   1477c:	beq	14784 <__assert_fail@plt+0x33f8>
   14780:	bl	15cec <__assert_fail@plt+0x4960>
   14784:	ldr	r3, [r5, #48]	; 0x30
   14788:	movw	r2, #258	; 0x102
   1478c:	ldr	r0, [r5, #56]	; 0x38
   14790:	tst	r2, r3
   14794:	beq	147ec <__assert_fail@plt+0x3460>
   14798:	cmp	r0, #0
   1479c:	beq	147a4 <__assert_fail@plt+0x3418>
   147a0:	bl	15cec <__assert_fail@plt+0x4960>
   147a4:	mov	r0, r5
   147a8:	bl	12da4 <__assert_fail@plt+0x1a18>
   147ac:	cmp	r4, #0
   147b0:	bne	1485c <__assert_fail@plt+0x34d0>
   147b4:	mov	r0, r4
   147b8:	ldrd	r4, [sp]
   147bc:	ldr	r6, [sp, #8]
   147c0:	add	sp, sp, #12
   147c4:	pop	{pc}		; (ldr pc, [sp], #4)
   147c8:	ldr	r0, [r5, #32]
   147cc:	cmp	r0, #0
   147d0:	blt	14768 <__assert_fail@plt+0x33dc>
   147d4:	bl	11350 <close@plt>
   147d8:	cmp	r0, #0
   147dc:	beq	14768 <__assert_fail@plt+0x33dc>
   147e0:	bl	1123c <__errno_location@plt>
   147e4:	ldr	r4, [r0]
   147e8:	b	1476c <__assert_fail@plt+0x33e0>
   147ec:	bl	12da4 <__assert_fail@plt+0x1a18>
   147f0:	b	147a4 <__assert_fail@plt+0x3418>
   147f4:	ldr	r0, [r5, #28]
   147f8:	bl	112fc <fchdir@plt>
   147fc:	cmp	r0, #0
   14800:	bne	14824 <__assert_fail@plt+0x3498>
   14804:	ldr	r0, [r5, #28]
   14808:	bl	11350 <close@plt>
   1480c:	cmp	r0, #0
   14810:	beq	14768 <__assert_fail@plt+0x33dc>
   14814:	bl	1123c <__errno_location@plt>
   14818:	mov	r6, r0
   1481c:	ldr	r4, [r6]
   14820:	b	1476c <__assert_fail@plt+0x33e0>
   14824:	bl	1123c <__errno_location@plt>
   14828:	mov	r6, r0
   1482c:	ldr	r0, [r5, #28]
   14830:	ldr	r4, [r6]
   14834:	bl	11350 <close@plt>
   14838:	adds	r3, r0, #0
   1483c:	movne	r3, #1
   14840:	cmp	r4, #0
   14844:	movne	r3, #0
   14848:	cmp	r3, #0
   1484c:	beq	1476c <__assert_fail@plt+0x33e0>
   14850:	b	1481c <__assert_fail@plt+0x3490>
   14854:	mov	r4, r3
   14858:	b	1472c <__assert_fail@plt+0x33a0>
   1485c:	bl	1123c <__errno_location@plt>
   14860:	str	r4, [r0]
   14864:	mvn	r4, #0
   14868:	b	147b4 <__assert_fail@plt+0x3428>
   1486c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14870:	ldr	r4, [r0]
   14874:	strd	r6, [sp, #8]
   14878:	str	r8, [sp, #16]
   1487c:	str	lr, [sp, #20]
   14880:	cmp	r4, #0
   14884:	beq	149a4 <__assert_fail@plt+0x3618>
   14888:	ldr	r1, [r0, #48]	; 0x30
   1488c:	ands	r3, r1, #8192	; 0x2000
   14890:	bne	149a4 <__assert_fail@plt+0x3618>
   14894:	ldrh	r2, [r4, #60]	; 0x3c
   14898:	mov	r8, r0
   1489c:	mov	r0, #3
   148a0:	strh	r0, [r4, #60]	; 0x3c
   148a4:	cmp	r2, #1
   148a8:	beq	14c50 <__assert_fail@plt+0x38c4>
   148ac:	cmp	r2, #2
   148b0:	ldrh	r3, [r4, #56]	; 0x38
   148b4:	beq	149c0 <__assert_fail@plt+0x3634>
   148b8:	cmp	r3, #1
   148bc:	bne	148ec <__assert_fail@plt+0x3560>
   148c0:	b	14a6c <__assert_fail@plt+0x36e0>
   148c4:	mov	r0, r4
   148c8:	str	r5, [r8]
   148cc:	bl	12da4 <__assert_fail@plt+0x1a18>
   148d0:	ldr	r4, [r5, #48]	; 0x30
   148d4:	cmp	r4, #0
   148d8:	beq	14ab4 <__assert_fail@plt+0x3728>
   148dc:	ldrh	r3, [r5, #60]	; 0x3c
   148e0:	mov	r4, r5
   148e4:	cmp	r3, #4
   148e8:	bne	14b6c <__assert_fail@plt+0x37e0>
   148ec:	ldr	r5, [r4, #8]
   148f0:	cmp	r5, #0
   148f4:	bne	148c4 <__assert_fail@plt+0x3538>
   148f8:	ldr	r6, [r4, #4]
   148fc:	ldr	r3, [r6, #12]
   14900:	cmp	r3, #0
   14904:	bne	14d74 <__assert_fail@plt+0x39e8>
   14908:	mov	r0, r4
   1490c:	str	r6, [r8]
   14910:	bl	12da4 <__assert_fail@plt+0x1a18>
   14914:	ldr	r3, [r6, #48]	; 0x30
   14918:	cmn	r3, #1
   1491c:	beq	14d18 <__assert_fail@plt+0x398c>
   14920:	ldrh	r3, [r6, #56]	; 0x38
   14924:	cmp	r3, #11
   14928:	beq	14c4c <__assert_fail@plt+0x38c0>
   1492c:	ldr	r2, [r8, #24]
   14930:	mov	r1, #0
   14934:	ldr	r3, [r6, #40]	; 0x28
   14938:	strb	r1, [r2, r3]
   1493c:	ldr	r3, [r6, #48]	; 0x30
   14940:	cmp	r3, r1
   14944:	beq	14d38 <__assert_fail@plt+0x39ac>
   14948:	ldrh	r3, [r6, #58]	; 0x3a
   1494c:	tst	r3, #2
   14950:	bne	14ccc <__assert_fail@plt+0x3940>
   14954:	tst	r3, #1
   14958:	beq	14e0c <__assert_fail@plt+0x3a80>
   1495c:	ldrh	r3, [r6, #56]	; 0x38
   14960:	ldr	r0, [r8, #48]	; 0x30
   14964:	cmp	r3, #2
   14968:	beq	14998 <__assert_fail@plt+0x360c>
   1496c:	ldr	r3, [r6, #32]
   14970:	cmp	r3, #0
   14974:	movne	r3, #7
   14978:	strhne	r3, [r6, #56]	; 0x38
   1497c:	bne	14998 <__assert_fail@plt+0x360c>
   14980:	mov	r3, #6
   14984:	mov	r2, r6
   14988:	add	r1, r8, #56	; 0x38
   1498c:	strh	r3, [r6, #56]	; 0x38
   14990:	bl	138ac <__assert_fail@plt+0x2520>
   14994:	ldr	r0, [r8, #48]	; 0x30
   14998:	tst	r0, #8192	; 0x2000
   1499c:	moveq	r4, r6
   149a0:	beq	149a8 <__assert_fail@plt+0x361c>
   149a4:	mov	r4, #0
   149a8:	mov	r0, r4
   149ac:	ldrd	r4, [sp]
   149b0:	ldrd	r6, [sp, #8]
   149b4:	ldr	r8, [sp, #16]
   149b8:	add	sp, sp, #20
   149bc:	pop	{pc}		; (ldr pc, [sp], #4)
   149c0:	sub	r2, r3, #12
   149c4:	cmp	r2, #1
   149c8:	bls	14c08 <__assert_fail@plt+0x387c>
   149cc:	cmp	r3, #1
   149d0:	bne	148ec <__assert_fail@plt+0x3560>
   149d4:	tst	r1, #64	; 0x40
   149d8:	beq	149f0 <__assert_fail@plt+0x3664>
   149dc:	ldrd	r2, [r8, #16]
   149e0:	ldrd	r6, [r4, #64]	; 0x40
   149e4:	cmp	r7, r3
   149e8:	cmpeq	r6, r2
   149ec:	bne	14a74 <__assert_fail@plt+0x36e8>
   149f0:	ldr	r0, [r8, #4]
   149f4:	cmp	r0, #0
   149f8:	beq	14c78 <__assert_fail@plt+0x38ec>
   149fc:	tst	r1, #4096	; 0x1000
   14a00:	bne	14c64 <__assert_fail@plt+0x38d8>
   14a04:	mvn	r2, #0
   14a08:	mov	r1, r4
   14a0c:	ldr	r3, [r4, #24]
   14a10:	mov	r0, r8
   14a14:	bl	135bc <__assert_fail@plt+0x2230>
   14a18:	cmp	r0, #0
   14a1c:	beq	14d00 <__assert_fail@plt+0x3974>
   14a20:	bl	1123c <__errno_location@plt>
   14a24:	ldrh	r3, [r4, #58]	; 0x3a
   14a28:	ldr	r2, [r0]
   14a2c:	orr	r3, r3, #1
   14a30:	str	r2, [r4, #32]
   14a34:	strh	r3, [r4, #58]	; 0x3a
   14a38:	ldr	r4, [r8, #4]
   14a3c:	cmp	r4, #0
   14a40:	beq	14a60 <__assert_fail@plt+0x36d4>
   14a44:	mov	r3, r4
   14a48:	ldr	r2, [r3, #4]
   14a4c:	ldr	r2, [r2, #24]
   14a50:	str	r2, [r3, #24]
   14a54:	ldr	r3, [r3, #8]
   14a58:	cmp	r3, #0
   14a5c:	bne	14a48 <__assert_fail@plt+0x36bc>
   14a60:	mov	r3, #0
   14a64:	str	r3, [r8, #4]
   14a68:	b	14b74 <__assert_fail@plt+0x37e8>
   14a6c:	cmp	r2, #4
   14a70:	bne	149d4 <__assert_fail@plt+0x3648>
   14a74:	ldrh	r3, [r4, #58]	; 0x3a
   14a78:	tst	r3, #2
   14a7c:	bne	14db4 <__assert_fail@plt+0x3a28>
   14a80:	ldr	r0, [r8, #4]
   14a84:	cmp	r0, #0
   14a88:	beq	14a98 <__assert_fail@plt+0x370c>
   14a8c:	bl	13070 <__assert_fail@plt+0x1ce4>
   14a90:	mov	r3, #0
   14a94:	str	r3, [r8, #4]
   14a98:	mov	r3, #6
   14a9c:	mov	r2, r4
   14aa0:	ldr	r0, [r8, #48]	; 0x30
   14aa4:	add	r1, r8, #56	; 0x38
   14aa8:	strh	r3, [r4, #56]	; 0x38
   14aac:	bl	138ac <__assert_fail@plt+0x2520>
   14ab0:	b	149a8 <__assert_fail@plt+0x361c>
   14ab4:	mov	r0, r8
   14ab8:	bl	132ac <__assert_fail@plt+0x1f20>
   14abc:	ldr	r3, [r8, #48]	; 0x30
   14ac0:	cmp	r0, #0
   14ac4:	orrne	r3, r3, #8192	; 0x2000
   14ac8:	strne	r3, [r8, #48]	; 0x30
   14acc:	bne	149a8 <__assert_fail@plt+0x361c>
   14ad0:	movw	r2, #258	; 0x102
   14ad4:	ldr	r0, [r8, #56]	; 0x38
   14ad8:	tst	r2, r3
   14adc:	beq	14dac <__assert_fail@plt+0x3a20>
   14ae0:	cmp	r0, #0
   14ae4:	beq	14aec <__assert_fail@plt+0x3760>
   14ae8:	bl	15cec <__assert_fail@plt+0x4960>
   14aec:	ldr	r2, [r5, #52]	; 0x34
   14af0:	add	r4, r5, #168	; 0xa8
   14af4:	mov	r1, r4
   14af8:	ldr	r0, [r8, #24]
   14afc:	str	r2, [r5, #40]	; 0x28
   14b00:	add	r2, r2, #1
   14b04:	bl	11098 <memmove@plt>
   14b08:	mov	r0, r4
   14b0c:	mov	r1, #47	; 0x2f
   14b10:	bl	112c0 <strrchr@plt>
   14b14:	cmp	r0, #0
   14b18:	beq	14b48 <__assert_fail@plt+0x37bc>
   14b1c:	cmp	r4, r0
   14b20:	beq	14d08 <__assert_fail@plt+0x397c>
   14b24:	add	r6, r0, #1
   14b28:	mov	r0, r6
   14b2c:	bl	1120c <strlen@plt>
   14b30:	mov	r7, r0
   14b34:	mov	r1, r6
   14b38:	mov	r0, r4
   14b3c:	add	r2, r7, #1
   14b40:	bl	11098 <memmove@plt>
   14b44:	str	r7, [r5, #52]	; 0x34
   14b48:	ldr	r3, [r8, #24]
   14b4c:	add	r1, r8, #56	; 0x38
   14b50:	mov	r4, r5
   14b54:	ldr	r0, [r8, #48]	; 0x30
   14b58:	str	r3, [r5, #24]
   14b5c:	str	r3, [r5, #28]
   14b60:	bl	134fc <__assert_fail@plt+0x2170>
   14b64:	ldrh	r0, [r5, #56]	; 0x38
   14b68:	b	14bb8 <__assert_fail@plt+0x382c>
   14b6c:	cmp	r3, #2
   14b70:	beq	14ddc <__assert_fail@plt+0x3a50>
   14b74:	ldr	r0, [r4, #4]
   14b78:	mov	ip, #47	; 0x2f
   14b7c:	add	r1, r4, #168	; 0xa8
   14b80:	ldr	r3, [r8, #24]
   14b84:	ldr	lr, [r0, #28]
   14b88:	ldr	r2, [r0, #40]	; 0x28
   14b8c:	sub	r0, r2, #1
   14b90:	ldrb	lr, [lr, r0]
   14b94:	cmp	lr, ip
   14b98:	movne	r0, r2
   14b9c:	strb	ip, [r3, r0]
   14ba0:	add	r0, r3, r0
   14ba4:	ldr	r2, [r4, #52]	; 0x34
   14ba8:	add	r0, r0, #1
   14bac:	add	r2, r2, #1
   14bb0:	bl	11098 <memmove@plt>
   14bb4:	ldrh	r0, [r4, #56]	; 0x38
   14bb8:	cmp	r0, #11
   14bbc:	str	r4, [r8]
   14bc0:	beq	14c30 <__assert_fail@plt+0x38a4>
   14bc4:	cmp	r0, #1
   14bc8:	bne	149a8 <__assert_fail@plt+0x361c>
   14bcc:	ldr	r3, [r4, #48]	; 0x30
   14bd0:	add	r1, r8, #56	; 0x38
   14bd4:	ldr	r0, [r8, #48]	; 0x30
   14bd8:	cmp	r3, #0
   14bdc:	ldrdeq	r2, [r4, #64]	; 0x40
   14be0:	strdeq	r2, [r8, #16]
   14be4:	mov	r2, r4
   14be8:	bl	137d8 <__assert_fail@plt+0x244c>
   14bec:	subs	r5, r0, #0
   14bf0:	bne	149a8 <__assert_fail@plt+0x361c>
   14bf4:	bl	1123c <__errno_location@plt>
   14bf8:	mov	r3, #12
   14bfc:	mov	r4, r5
   14c00:	str	r3, [r0]
   14c04:	b	149a8 <__assert_fail@plt+0x361c>
   14c08:	mov	r3, #1
   14c0c:	mov	r2, r4
   14c10:	ldr	r0, [r8, #32]
   14c14:	bl	13310 <__assert_fail@plt+0x1f84>
   14c18:	cmp	r0, #1
   14c1c:	strh	r0, [r4, #56]	; 0x38
   14c20:	beq	14e54 <__assert_fail@plt+0x3ac8>
   14c24:	cmp	r0, #11
   14c28:	str	r4, [r8]
   14c2c:	bne	149a8 <__assert_fail@plt+0x361c>
   14c30:	ldrd	r2, [r4, #112]	; 0x70
   14c34:	cmp	r3, #0
   14c38:	cmpeq	r2, #2
   14c3c:	beq	14dc0 <__assert_fail@plt+0x3a34>
   14c40:	cmp	r3, #0
   14c44:	cmpeq	r2, #1
   14c48:	beq	149a8 <__assert_fail@plt+0x361c>
   14c4c:	bl	11344 <abort@plt>
   14c50:	mov	r2, r4
   14c54:	ldr	r0, [r8, #32]
   14c58:	bl	13310 <__assert_fail@plt+0x1f84>
   14c5c:	strh	r0, [r4, #56]	; 0x38
   14c60:	b	149a8 <__assert_fail@plt+0x361c>
   14c64:	bic	r1, r1, #4096	; 0x1000
   14c68:	str	r1, [r8, #48]	; 0x30
   14c6c:	bl	13070 <__assert_fail@plt+0x1ce4>
   14c70:	mov	r3, #0
   14c74:	str	r3, [r8, #4]
   14c78:	mov	r1, #3
   14c7c:	mov	r0, r8
   14c80:	bl	13978 <__assert_fail@plt+0x25ec>
   14c84:	cmp	r0, #0
   14c88:	str	r0, [r8, #4]
   14c8c:	movne	r4, r0
   14c90:	bne	14a60 <__assert_fail@plt+0x36d4>
   14c94:	ldr	r0, [r8, #48]	; 0x30
   14c98:	tst	r0, #8192	; 0x2000
   14c9c:	bne	149a4 <__assert_fail@plt+0x3618>
   14ca0:	ldr	r3, [r4, #32]
   14ca4:	cmp	r3, #0
   14ca8:	beq	14cbc <__assert_fail@plt+0x3930>
   14cac:	ldrh	r3, [r4, #56]	; 0x38
   14cb0:	cmp	r3, #4
   14cb4:	movne	r3, #7
   14cb8:	strhne	r3, [r4, #56]	; 0x38
   14cbc:	add	r1, r8, #56	; 0x38
   14cc0:	mov	r2, r4
   14cc4:	bl	138ac <__assert_fail@plt+0x2520>
   14cc8:	b	149a8 <__assert_fail@plt+0x361c>
   14ccc:	ldr	r3, [r8, #48]	; 0x30
   14cd0:	ldr	r0, [r6, #36]	; 0x24
   14cd4:	tst	r3, #4
   14cd8:	bne	14cf8 <__assert_fail@plt+0x396c>
   14cdc:	tst	r3, #512	; 0x200
   14ce0:	beq	14e40 <__assert_fail@plt+0x3ab4>
   14ce4:	mov	r1, r0
   14ce8:	mov	r2, #1
   14cec:	mov	r0, r8
   14cf0:	bl	1321c <__assert_fail@plt+0x1e90>
   14cf4:	ldr	r0, [r6, #36]	; 0x24
   14cf8:	bl	11350 <close@plt>
   14cfc:	b	1495c <__assert_fail@plt+0x35d0>
   14d00:	ldr	r4, [r8, #4]
   14d04:	b	14a60 <__assert_fail@plt+0x36d4>
   14d08:	ldrb	r3, [r4, #1]
   14d0c:	cmp	r3, #0
   14d10:	beq	14b48 <__assert_fail@plt+0x37bc>
   14d14:	b	14b24 <__assert_fail@plt+0x3798>
   14d18:	mov	r0, r6
   14d1c:	bl	12da4 <__assert_fail@plt+0x1a18>
   14d20:	bl	1123c <__errno_location@plt>
   14d24:	mov	r3, #0
   14d28:	mov	r4, r3
   14d2c:	str	r3, [r0]
   14d30:	str	r3, [r8]
   14d34:	b	149a8 <__assert_fail@plt+0x361c>
   14d38:	mov	r0, r8
   14d3c:	bl	132ac <__assert_fail@plt+0x1f20>
   14d40:	cmp	r0, #0
   14d44:	beq	1495c <__assert_fail@plt+0x35d0>
   14d48:	bl	1123c <__errno_location@plt>
   14d4c:	ldr	r3, [r8, #48]	; 0x30
   14d50:	ldr	r2, [r0]
   14d54:	orr	r3, r3, #8192	; 0x2000
   14d58:	str	r2, [r6, #32]
   14d5c:	str	r3, [r8, #48]	; 0x30
   14d60:	ldrh	r3, [r6, #56]	; 0x38
   14d64:	cmp	r3, #2
   14d68:	beq	149a4 <__assert_fail@plt+0x3618>
   14d6c:	ldr	r0, [r8, #48]	; 0x30
   14d70:	b	1496c <__assert_fail@plt+0x35e0>
   14d74:	ldr	r2, [r8, #24]
   14d78:	mov	r1, #3
   14d7c:	mov	r0, r8
   14d80:	ldr	r3, [r6, #40]	; 0x28
   14d84:	str	r6, [r8]
   14d88:	strb	r5, [r2, r3]
   14d8c:	bl	13978 <__assert_fail@plt+0x25ec>
   14d90:	subs	r3, r0, #0
   14d94:	bne	14e30 <__assert_fail@plt+0x3aa4>
   14d98:	ldr	r3, [r8, #48]	; 0x30
   14d9c:	tst	r3, #8192	; 0x2000
   14da0:	bne	149a4 <__assert_fail@plt+0x3618>
   14da4:	ldr	r6, [r4, #4]
   14da8:	b	14908 <__assert_fail@plt+0x357c>
   14dac:	bl	12da4 <__assert_fail@plt+0x1a18>
   14db0:	b	14aec <__assert_fail@plt+0x3760>
   14db4:	ldr	r0, [r4, #36]	; 0x24
   14db8:	bl	11350 <close@plt>
   14dbc:	b	14a80 <__assert_fail@plt+0x36f4>
   14dc0:	mov	r3, #0
   14dc4:	mov	r2, r4
   14dc8:	ldr	r0, [r8, #32]
   14dcc:	ldr	r1, [r8, #48]	; 0x30
   14dd0:	bl	13310 <__assert_fail@plt+0x1f84>
   14dd4:	strh	r0, [r4, #56]	; 0x38
   14dd8:	b	14bc4 <__assert_fail@plt+0x3838>
   14ddc:	mov	r3, #1
   14de0:	mov	r2, r5
   14de4:	ldr	r0, [r8, #32]
   14de8:	ldr	r1, [r8, #48]	; 0x30
   14dec:	bl	13310 <__assert_fail@plt+0x1f84>
   14df0:	cmp	r0, #1
   14df4:	strh	r0, [r5, #56]	; 0x38
   14df8:	beq	14e94 <__assert_fail@plt+0x3b08>
   14dfc:	mov	r3, #3
   14e00:	mov	r4, r5
   14e04:	strh	r3, [r5, #60]	; 0x3c
   14e08:	b	14b74 <__assert_fail@plt+0x37e8>
   14e0c:	movw	r3, #47188	; 0xb854
   14e10:	movt	r3, #1
   14e14:	ldr	r1, [r6, #4]
   14e18:	mvn	r2, #0
   14e1c:	mov	r0, r8
   14e20:	bl	135bc <__assert_fail@plt+0x2230>
   14e24:	cmp	r0, #0
   14e28:	beq	1495c <__assert_fail@plt+0x35d0>
   14e2c:	b	14d48 <__assert_fail@plt+0x39bc>
   14e30:	mov	r0, r4
   14e34:	mov	r4, r3
   14e38:	bl	12da4 <__assert_fail@plt+0x1a18>
   14e3c:	b	14b74 <__assert_fail@plt+0x37e8>
   14e40:	bl	112fc <fchdir@plt>
   14e44:	cmp	r0, #0
   14e48:	bne	14ecc <__assert_fail@plt+0x3b40>
   14e4c:	ldr	r0, [r6, #36]	; 0x24
   14e50:	b	14cf8 <__assert_fail@plt+0x396c>
   14e54:	ldr	r1, [r8, #48]	; 0x30
   14e58:	tst	r1, #4
   14e5c:	strne	r4, [r8]
   14e60:	bne	14bcc <__assert_fail@plt+0x3840>
   14e64:	movw	r2, #47192	; 0xb858
   14e68:	movt	r2, #1
   14e6c:	ldr	r0, [r8, #32]
   14e70:	bl	1358c <__assert_fail@plt+0x2200>
   14e74:	cmp	r0, #0
   14e78:	str	r0, [r4, #36]	; 0x24
   14e7c:	blt	14eec <__assert_fail@plt+0x3b60>
   14e80:	ldrh	r3, [r4, #58]	; 0x3a
   14e84:	ldrh	r0, [r4, #56]	; 0x38
   14e88:	orr	r3, r3, #2
   14e8c:	strh	r3, [r4, #58]	; 0x3a
   14e90:	b	14bb8 <__assert_fail@plt+0x382c>
   14e94:	ldr	r1, [r8, #48]	; 0x30
   14e98:	tst	r1, #4
   14e9c:	bne	14dfc <__assert_fail@plt+0x3a70>
   14ea0:	movw	r2, #47192	; 0xb858
   14ea4:	movt	r2, #1
   14ea8:	ldr	r0, [r8, #32]
   14eac:	bl	1358c <__assert_fail@plt+0x2200>
   14eb0:	cmp	r0, #0
   14eb4:	str	r0, [r5, #36]	; 0x24
   14eb8:	blt	14f08 <__assert_fail@plt+0x3b7c>
   14ebc:	ldrh	r3, [r5, #58]	; 0x3a
   14ec0:	orr	r3, r3, #2
   14ec4:	strh	r3, [r5, #58]	; 0x3a
   14ec8:	b	14dfc <__assert_fail@plt+0x3a70>
   14ecc:	bl	1123c <__errno_location@plt>
   14ed0:	ldr	r3, [r8, #48]	; 0x30
   14ed4:	ldr	r2, [r0]
   14ed8:	ldr	r0, [r6, #36]	; 0x24
   14edc:	orr	r3, r3, #8192	; 0x2000
   14ee0:	str	r2, [r6, #32]
   14ee4:	str	r3, [r8, #48]	; 0x30
   14ee8:	b	14cf8 <__assert_fail@plt+0x396c>
   14eec:	bl	1123c <__errno_location@plt>
   14ef0:	ldr	r3, [r0]
   14ef4:	mov	r2, #7
   14ef8:	str	r3, [r4, #32]
   14efc:	strh	r2, [r4, #56]	; 0x38
   14f00:	str	r4, [r8]
   14f04:	b	149a8 <__assert_fail@plt+0x361c>
   14f08:	bl	1123c <__errno_location@plt>
   14f0c:	ldr	r3, [r0]
   14f10:	mov	r2, #7
   14f14:	str	r3, [r5, #32]
   14f18:	strh	r2, [r5, #56]	; 0x38
   14f1c:	b	14dfc <__assert_fail@plt+0x3a70>
   14f20:	cmp	r2, #4
   14f24:	bhi	14f38 <__assert_fail@plt+0x3bac>
   14f28:	mov	r3, #0
   14f2c:	strh	r2, [r1, #60]	; 0x3c
   14f30:	mov	r0, r3
   14f34:	bx	lr
   14f38:	str	r4, [sp, #-8]!
   14f3c:	str	lr, [sp, #4]
   14f40:	bl	1123c <__errno_location@plt>
   14f44:	mov	r2, #22
   14f48:	mov	r3, #1
   14f4c:	ldr	r4, [sp]
   14f50:	add	sp, sp, #4
   14f54:	str	r2, [r0]
   14f58:	mov	r0, r3
   14f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f60:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14f64:	mov	r4, r1
   14f68:	mov	r5, r0
   14f6c:	strd	r6, [sp, #8]
   14f70:	str	r8, [sp, #16]
   14f74:	str	lr, [sp, #20]
   14f78:	bl	1123c <__errno_location@plt>
   14f7c:	bics	r2, r4, #4096	; 0x1000
   14f80:	mov	r7, r0
   14f84:	movne	r3, #22
   14f88:	movne	r0, #0
   14f8c:	strne	r3, [r7]
   14f90:	bne	15024 <__assert_fail@plt+0x3c98>
   14f94:	ldr	r6, [r5]
   14f98:	str	r2, [r7]
   14f9c:	ldr	r3, [r5, #48]	; 0x30
   14fa0:	ands	r0, r3, #8192	; 0x2000
   14fa4:	movne	r0, r2
   14fa8:	bne	15024 <__assert_fail@plt+0x3c98>
   14fac:	ldrh	r3, [r6, #56]	; 0x38
   14fb0:	cmp	r3, #9
   14fb4:	beq	15094 <__assert_fail@plt+0x3d08>
   14fb8:	cmp	r3, #1
   14fbc:	bne	15024 <__assert_fail@plt+0x3c98>
   14fc0:	ldr	r0, [r5, #4]
   14fc4:	cmp	r0, #0
   14fc8:	beq	14fd0 <__assert_fail@plt+0x3c44>
   14fcc:	bl	13070 <__assert_fail@plt+0x1ce4>
   14fd0:	cmp	r4, #4096	; 0x1000
   14fd4:	movne	r4, #1
   14fd8:	bne	14fec <__assert_fail@plt+0x3c60>
   14fdc:	ldr	r3, [r5, #48]	; 0x30
   14fe0:	mov	r4, #2
   14fe4:	orr	r3, r3, #4096	; 0x1000
   14fe8:	str	r3, [r5, #48]	; 0x30
   14fec:	ldr	r3, [r6, #48]	; 0x30
   14ff0:	cmp	r3, #0
   14ff4:	bne	15014 <__assert_fail@plt+0x3c88>
   14ff8:	ldr	r3, [r6, #24]
   14ffc:	ldrb	r3, [r3]
   15000:	cmp	r3, #47	; 0x2f
   15004:	beq	15014 <__assert_fail@plt+0x3c88>
   15008:	ldr	r1, [r5, #48]	; 0x30
   1500c:	ands	r6, r1, #4
   15010:	beq	15038 <__assert_fail@plt+0x3cac>
   15014:	mov	r1, r4
   15018:	mov	r0, r5
   1501c:	bl	13978 <__assert_fail@plt+0x25ec>
   15020:	str	r0, [r5, #4]
   15024:	ldrd	r4, [sp]
   15028:	ldrd	r6, [sp, #8]
   1502c:	ldr	r8, [sp, #16]
   15030:	add	sp, sp, #20
   15034:	pop	{pc}		; (ldr pc, [sp], #4)
   15038:	movw	r2, #47192	; 0xb858
   1503c:	movt	r2, #1
   15040:	ldr	r0, [r5, #32]
   15044:	bl	1358c <__assert_fail@plt+0x2200>
   15048:	subs	r8, r0, #0
   1504c:	movlt	r0, r6
   15050:	strlt	r6, [r5, #4]
   15054:	blt	15024 <__assert_fail@plt+0x3c98>
   15058:	mov	r1, r4
   1505c:	mov	r0, r5
   15060:	bl	13978 <__assert_fail@plt+0x25ec>
   15064:	ldr	r3, [r5, #48]	; 0x30
   15068:	str	r0, [r5, #4]
   1506c:	ands	r4, r3, #512	; 0x200
   15070:	bne	1509c <__assert_fail@plt+0x3d10>
   15074:	mov	r0, r8
   15078:	bl	112fc <fchdir@plt>
   1507c:	cmp	r0, #0
   15080:	bne	150b0 <__assert_fail@plt+0x3d24>
   15084:	mov	r0, r8
   15088:	bl	11350 <close@plt>
   1508c:	ldr	r0, [r5, #4]
   15090:	b	15024 <__assert_fail@plt+0x3c98>
   15094:	ldr	r0, [r6, #8]
   15098:	b	15024 <__assert_fail@plt+0x3c98>
   1509c:	mov	r1, r8
   150a0:	mov	r2, #1
   150a4:	mov	r0, r5
   150a8:	bl	1321c <__assert_fail@plt+0x1e90>
   150ac:	b	1508c <__assert_fail@plt+0x3d00>
   150b0:	ldr	r5, [r7]
   150b4:	mov	r0, r8
   150b8:	bl	11350 <close@plt>
   150bc:	mov	r0, r4
   150c0:	str	r5, [r7]
   150c4:	b	15024 <__assert_fail@plt+0x3c98>
   150c8:	cmp	r0, #10
   150cc:	movcc	r0, #10
   150d0:	orr	r0, r0, #1
   150d4:	cmn	r0, #1
   150d8:	bxeq	lr
   150dc:	push	{lr}		; (str lr, [sp, #-4]!)
   150e0:	movw	lr, #43691	; 0xaaab
   150e4:	movt	lr, #43690	; 0xaaaa
   150e8:	umull	r2, r3, lr, r0
   150ec:	cmp	r0, #9
   150f0:	lsr	r3, r3, #1
   150f4:	add	r3, r3, r3, lsl #1
   150f8:	sub	r3, r0, r3
   150fc:	bls	1513c <__assert_fail@plt+0x3db0>
   15100:	cmp	r3, #0
   15104:	beq	15144 <__assert_fail@plt+0x3db8>
   15108:	mov	ip, #16
   1510c:	mov	r1, #9
   15110:	mov	r2, #3
   15114:	b	15120 <__assert_fail@plt+0x3d94>
   15118:	cmp	r3, #0
   1511c:	beq	15144 <__assert_fail@plt+0x3db8>
   15120:	add	r2, r2, #2
   15124:	add	r1, r1, ip
   15128:	cmp	r1, r0
   1512c:	add	ip, ip, #8
   15130:	udiv	r3, r0, r2
   15134:	mls	r3, r2, r3, r0
   15138:	bcc	15118 <__assert_fail@plt+0x3d8c>
   1513c:	cmp	r3, #0
   15140:	bne	15150 <__assert_fail@plt+0x3dc4>
   15144:	add	r0, r0, #2
   15148:	cmn	r0, #1
   1514c:	bne	150e8 <__assert_fail@plt+0x3d5c>
   15150:	pop	{pc}		; (ldr pc, [sp], #4)
   15154:	ror	r0, r0, #3
   15158:	udiv	r3, r0, r1
   1515c:	mls	r0, r3, r1, r0
   15160:	bx	lr
   15164:	sub	r0, r1, r0
   15168:	clz	r0, r0
   1516c:	lsr	r0, r0, #5
   15170:	bx	lr
   15174:	str	r4, [sp, #-8]!
   15178:	mov	r4, r0
   1517c:	mov	r0, r1
   15180:	ldr	r1, [r4, #8]
   15184:	ldr	r3, [r4, #24]
   15188:	str	lr, [sp, #4]
   1518c:	blx	r3
   15190:	ldr	r3, [r4, #8]
   15194:	cmp	r3, r0
   15198:	bls	151b0 <__assert_fail@plt+0x3e24>
   1519c:	ldr	r3, [r4]
   151a0:	ldr	r4, [sp]
   151a4:	add	sp, sp, #4
   151a8:	add	r0, r3, r0, lsl #3
   151ac:	pop	{pc}		; (ldr pc, [sp], #4)
   151b0:	bl	11344 <abort@plt>
   151b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   151b8:	mov	r5, r1
   151bc:	strd	r6, [sp, #8]
   151c0:	mov	r7, r3
   151c4:	mov	r6, r0
   151c8:	str	r8, [sp, #16]
   151cc:	mov	r8, r2
   151d0:	str	lr, [sp, #20]
   151d4:	bl	15174 <__assert_fail@plt+0x3de8>
   151d8:	str	r0, [r8]
   151dc:	ldr	r1, [r0]
   151e0:	cmp	r1, #0
   151e4:	beq	152d4 <__assert_fail@plt+0x3f48>
   151e8:	cmp	r1, r5
   151ec:	mov	r4, r0
   151f0:	beq	1529c <__assert_fail@plt+0x3f10>
   151f4:	mov	r0, r5
   151f8:	ldr	r3, [r6, #28]
   151fc:	blx	r3
   15200:	cmp	r0, #0
   15204:	bne	15298 <__assert_fail@plt+0x3f0c>
   15208:	ldr	r3, [r4, #4]
   1520c:	cmp	r3, #0
   15210:	beq	152d4 <__assert_fail@plt+0x3f48>
   15214:	ldr	r1, [r3]
   15218:	cmp	r5, r1
   1521c:	bne	15240 <__assert_fail@plt+0x3eb4>
   15220:	b	1525c <__assert_fail@plt+0x3ed0>
   15224:	ldr	r4, [r4, #4]
   15228:	ldr	r3, [r4, #4]
   1522c:	cmp	r3, #0
   15230:	beq	152d4 <__assert_fail@plt+0x3f48>
   15234:	ldr	r1, [r3]
   15238:	cmp	r1, r5
   1523c:	beq	1525c <__assert_fail@plt+0x3ed0>
   15240:	mov	r0, r5
   15244:	ldr	r3, [r6, #28]
   15248:	blx	r3
   1524c:	cmp	r0, #0
   15250:	beq	15224 <__assert_fail@plt+0x3e98>
   15254:	ldr	r3, [r4, #4]
   15258:	ldr	r1, [r3]
   1525c:	cmp	r7, #0
   15260:	beq	15280 <__assert_fail@plt+0x3ef4>
   15264:	ldr	r0, [r3, #4]
   15268:	mov	r2, #0
   1526c:	str	r0, [r4, #4]
   15270:	str	r2, [r3]
   15274:	ldr	r2, [r6, #36]	; 0x24
   15278:	str	r2, [r3, #4]
   1527c:	str	r3, [r6, #36]	; 0x24
   15280:	ldrd	r4, [sp]
   15284:	mov	r0, r1
   15288:	ldrd	r6, [sp, #8]
   1528c:	ldr	r8, [sp, #16]
   15290:	add	sp, sp, #20
   15294:	pop	{pc}		; (ldr pc, [sp], #4)
   15298:	ldr	r1, [r4]
   1529c:	cmp	r7, #0
   152a0:	beq	15280 <__assert_fail@plt+0x3ef4>
   152a4:	ldr	r0, [r4, #4]
   152a8:	cmp	r0, #0
   152ac:	streq	r0, [r4]
   152b0:	beq	15280 <__assert_fail@plt+0x3ef4>
   152b4:	ldrd	r2, [r0]
   152b8:	mov	ip, #0
   152bc:	strd	r2, [r4]
   152c0:	str	ip, [r0]
   152c4:	ldr	r3, [r6, #36]	; 0x24
   152c8:	str	r3, [r0, #4]
   152cc:	str	r0, [r6, #36]	; 0x24
   152d0:	b	15280 <__assert_fail@plt+0x3ef4>
   152d4:	mov	r1, #0
   152d8:	b	15280 <__assert_fail@plt+0x3ef4>
   152dc:	ldr	r2, [r0]
   152e0:	movw	r3, #47196	; 0xb85c
   152e4:	movt	r3, #1
   152e8:	mov	r1, r0
   152ec:	cmp	r2, r3
   152f0:	beq	15378 <__assert_fail@plt+0x3fec>
   152f4:	vldr	s14, [pc, #132]	; 15380 <__assert_fail@plt+0x3ff4>
   152f8:	vldr	s15, [r2, #8]
   152fc:	vcmpe.f32	s15, s14
   15300:	vmrs	APSR_nzcv, fpscr
   15304:	ble	1536c <__assert_fail@plt+0x3fe0>
   15308:	vldr	s13, [pc, #116]	; 15384 <__assert_fail@plt+0x3ff8>
   1530c:	vcmpe.f32	s15, s13
   15310:	vmrs	APSR_nzcv, fpscr
   15314:	bpl	1536c <__assert_fail@plt+0x3fe0>
   15318:	vldr	s13, [pc, #104]	; 15388 <__assert_fail@plt+0x3ffc>
   1531c:	vldr	s12, [r2, #12]
   15320:	vcmpe.f32	s12, s13
   15324:	vmrs	APSR_nzcv, fpscr
   15328:	ble	1536c <__assert_fail@plt+0x3fe0>
   1532c:	vldr	s13, [r2]
   15330:	vcmpe.f32	s13, #0.0
   15334:	vmrs	APSR_nzcv, fpscr
   15338:	blt	1536c <__assert_fail@plt+0x3fe0>
   1533c:	vadd.f32	s14, s13, s14
   15340:	vldr	s13, [r2, #4]
   15344:	vcmpe.f32	s14, s13
   15348:	vmrs	APSR_nzcv, fpscr
   1534c:	bpl	1536c <__assert_fail@plt+0x3fe0>
   15350:	vldr	s12, [pc, #52]	; 1538c <__assert_fail@plt+0x4000>
   15354:	vcmpe.f32	s13, s12
   15358:	vmrs	APSR_nzcv, fpscr
   1535c:	bhi	1536c <__assert_fail@plt+0x3fe0>
   15360:	vcmpe.f32	s15, s14
   15364:	vmrs	APSR_nzcv, fpscr
   15368:	bgt	15378 <__assert_fail@plt+0x3fec>
   1536c:	mov	r0, #0
   15370:	str	r3, [r1]
   15374:	bx	lr
   15378:	mov	r0, #1
   1537c:	bx	lr
   15380:	stclcc	12, cr12, [ip, #820]	; 0x334
   15384:	svccc	0x00666666
   15388:	svccc	0x008ccccd
   1538c:	svccc	0x00800000
   15390:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15394:	ldr	r3, [r1, #4]
   15398:	strd	r6, [sp, #8]
   1539c:	ldr	r6, [r1]
   153a0:	strd	r8, [sp, #16]
   153a4:	str	sl, [sp, #24]
   153a8:	str	lr, [sp, #28]
   153ac:	cmp	r6, r3
   153b0:	bcs	15478 <__assert_fail@plt+0x40ec>
   153b4:	mov	r8, r2
   153b8:	mov	r5, r0
   153bc:	mov	r7, r1
   153c0:	add	r6, r6, #8
   153c4:	mov	r9, #0
   153c8:	b	153d8 <__assert_fail@plt+0x404c>
   153cc:	cmp	r3, r6
   153d0:	add	r6, r6, #8
   153d4:	bls	15478 <__assert_fail@plt+0x40ec>
   153d8:	ldr	sl, [r6, #-8]
   153dc:	cmp	sl, #0
   153e0:	beq	153cc <__assert_fail@plt+0x4040>
   153e4:	ldr	r4, [r6, #-4]
   153e8:	cmp	r4, #0
   153ec:	bne	1540c <__assert_fail@plt+0x4080>
   153f0:	b	1545c <__assert_fail@plt+0x40d0>
   153f4:	ldr	r2, [r0, #4]
   153f8:	cmp	r3, #0
   153fc:	str	r2, [r4, #4]
   15400:	str	r4, [r0, #4]
   15404:	mov	r4, r3
   15408:	beq	15458 <__assert_fail@plt+0x40cc>
   1540c:	ldr	sl, [r4]
   15410:	mov	r0, r5
   15414:	mov	r1, sl
   15418:	bl	15174 <__assert_fail@plt+0x3de8>
   1541c:	ldr	r2, [r0]
   15420:	ldr	r3, [r4, #4]
   15424:	cmp	r2, #0
   15428:	bne	153f4 <__assert_fail@plt+0x4068>
   1542c:	ldr	r1, [r5, #12]
   15430:	cmp	r3, #0
   15434:	str	sl, [r0]
   15438:	add	r1, r1, #1
   1543c:	str	r1, [r5, #12]
   15440:	str	r2, [r4]
   15444:	ldr	r2, [r5, #36]	; 0x24
   15448:	str	r2, [r4, #4]
   1544c:	str	r4, [r5, #36]	; 0x24
   15450:	mov	r4, r3
   15454:	bne	1540c <__assert_fail@plt+0x4080>
   15458:	ldr	sl, [r6, #-8]
   1545c:	cmp	r8, #0
   15460:	str	r9, [r6, #-4]
   15464:	beq	15494 <__assert_fail@plt+0x4108>
   15468:	ldr	r3, [r7, #4]
   1546c:	cmp	r3, r6
   15470:	add	r6, r6, #8
   15474:	bhi	153d8 <__assert_fail@plt+0x404c>
   15478:	mov	r0, #1
   1547c:	ldrd	r4, [sp]
   15480:	ldrd	r6, [sp, #8]
   15484:	ldrd	r8, [sp, #16]
   15488:	ldr	sl, [sp, #24]
   1548c:	add	sp, sp, #28
   15490:	pop	{pc}		; (ldr pc, [sp], #4)
   15494:	mov	r1, sl
   15498:	mov	r0, r5
   1549c:	bl	15174 <__assert_fail@plt+0x3de8>
   154a0:	ldr	r3, [r0]
   154a4:	mov	r4, r0
   154a8:	cmp	r3, #0
   154ac:	beq	154ec <__assert_fail@plt+0x4160>
   154b0:	ldr	r0, [r5, #36]	; 0x24
   154b4:	cmp	r0, #0
   154b8:	beq	15500 <__assert_fail@plt+0x4174>
   154bc:	ldr	r3, [r0, #4]
   154c0:	str	r3, [r5, #36]	; 0x24
   154c4:	ldr	r3, [r4, #4]
   154c8:	str	sl, [r0]
   154cc:	str	r3, [r0, #4]
   154d0:	str	r0, [r4, #4]
   154d4:	ldr	r2, [r7, #12]
   154d8:	str	r9, [r6, #-8]
   154dc:	ldr	r3, [r7, #4]
   154e0:	sub	r2, r2, #1
   154e4:	str	r2, [r7, #12]
   154e8:	b	153cc <__assert_fail@plt+0x4040>
   154ec:	ldr	r3, [r5, #12]
   154f0:	str	sl, [r0]
   154f4:	add	r3, r3, #1
   154f8:	str	r3, [r5, #12]
   154fc:	b	154d4 <__assert_fail@plt+0x4148>
   15500:	mov	r0, #8
   15504:	bl	19c68 <__assert_fail@plt+0x88dc>
   15508:	cmp	r0, #0
   1550c:	bne	154c4 <__assert_fail@plt+0x4138>
   15510:	mov	r0, r8
   15514:	b	1547c <__assert_fail@plt+0x40f0>
   15518:	ldr	r0, [r0, #8]
   1551c:	bx	lr
   15520:	ldr	r0, [r0, #12]
   15524:	bx	lr
   15528:	ldr	r0, [r0, #16]
   1552c:	bx	lr
   15530:	ldm	r0, {r1, r3}
   15534:	cmp	r1, r3
   15538:	bcs	155ac <__assert_fail@plt+0x4220>
   1553c:	sub	ip, r3, #1
   15540:	add	r3, r1, #16
   15544:	sub	ip, ip, r1
   15548:	mov	r0, #0
   1554c:	bic	ip, ip, #7
   15550:	add	r1, r1, #8
   15554:	add	ip, ip, r3
   15558:	b	15568 <__assert_fail@plt+0x41dc>
   1555c:	add	r1, r1, #8
   15560:	cmp	r1, ip
   15564:	beq	155a8 <__assert_fail@plt+0x421c>
   15568:	ldr	r3, [r1, #-8]
   1556c:	cmp	r3, #0
   15570:	beq	1555c <__assert_fail@plt+0x41d0>
   15574:	ldr	r3, [r1, #-4]
   15578:	mov	r2, #1
   1557c:	cmp	r3, #0
   15580:	beq	15594 <__assert_fail@plt+0x4208>
   15584:	ldr	r3, [r3, #4]
   15588:	add	r2, r2, #1
   1558c:	cmp	r3, #0
   15590:	bne	15584 <__assert_fail@plt+0x41f8>
   15594:	cmp	r0, r2
   15598:	add	r1, r1, #8
   1559c:	movcc	r0, r2
   155a0:	cmp	r1, ip
   155a4:	bne	15568 <__assert_fail@plt+0x41dc>
   155a8:	bx	lr
   155ac:	mov	r0, #0
   155b0:	bx	lr
   155b4:	ldm	r0, {r1, r3}
   155b8:	push	{lr}		; (str lr, [sp, #-4]!)
   155bc:	cmp	r1, r3
   155c0:	bcs	15654 <__assert_fail@plt+0x42c8>
   155c4:	sub	ip, r3, #1
   155c8:	mov	r2, #0
   155cc:	sub	ip, ip, r1
   155d0:	add	r3, r1, #16
   155d4:	bic	ip, ip, #7
   155d8:	add	r1, r1, #8
   155dc:	add	ip, ip, r3
   155e0:	mov	lr, r2
   155e4:	b	155f4 <__assert_fail@plt+0x4268>
   155e8:	add	r1, r1, #8
   155ec:	cmp	r1, ip
   155f0:	beq	15630 <__assert_fail@plt+0x42a4>
   155f4:	ldr	r3, [r1, #-8]
   155f8:	cmp	r3, #0
   155fc:	beq	155e8 <__assert_fail@plt+0x425c>
   15600:	ldr	r3, [r1, #-4]
   15604:	add	lr, lr, #1
   15608:	add	r2, r2, #1
   1560c:	cmp	r3, #0
   15610:	beq	155e8 <__assert_fail@plt+0x425c>
   15614:	ldr	r3, [r3, #4]
   15618:	add	r2, r2, #1
   1561c:	cmp	r3, #0
   15620:	bne	15614 <__assert_fail@plt+0x4288>
   15624:	add	r1, r1, #8
   15628:	cmp	r1, ip
   1562c:	bne	155f4 <__assert_fail@plt+0x4268>
   15630:	ldr	r3, [r0, #12]
   15634:	cmp	r3, lr
   15638:	movne	r0, #0
   1563c:	bne	15650 <__assert_fail@plt+0x42c4>
   15640:	ldr	r0, [r0, #16]
   15644:	sub	r0, r0, r2
   15648:	clz	r0, r0
   1564c:	lsr	r0, r0, #5
   15650:	pop	{pc}		; (ldr pc, [sp], #4)
   15654:	mov	r2, #0
   15658:	mov	lr, r2
   1565c:	b	15630 <__assert_fail@plt+0x42a4>
   15660:	strd	r4, [sp, #-20]!	; 0xffffffec
   15664:	mov	r4, r1
   15668:	ldr	r2, [r0]
   1566c:	ldr	r1, [r0, #4]
   15670:	ldr	r3, [r0, #16]
   15674:	strd	r6, [sp, #8]
   15678:	str	lr, [sp, #16]
   1567c:	sub	sp, sp, #12
   15680:	cmp	r2, r1
   15684:	ldrd	r6, [r0, #8]
   15688:	bcs	15788 <__assert_fail@plt+0x43fc>
   1568c:	sub	ip, r1, #1
   15690:	add	r1, r2, #16
   15694:	sub	ip, ip, r2
   15698:	add	r0, r2, #8
   1569c:	bic	ip, ip, #7
   156a0:	mov	r5, #0
   156a4:	add	ip, ip, r1
   156a8:	b	156b8 <__assert_fail@plt+0x432c>
   156ac:	add	r0, r0, #8
   156b0:	cmp	r0, ip
   156b4:	beq	156f8 <__assert_fail@plt+0x436c>
   156b8:	ldr	r2, [r0, #-8]
   156bc:	cmp	r2, #0
   156c0:	beq	156ac <__assert_fail@plt+0x4320>
   156c4:	ldr	r2, [r0, #-4]
   156c8:	mov	r1, #1
   156cc:	cmp	r2, #0
   156d0:	beq	156e4 <__assert_fail@plt+0x4358>
   156d4:	ldr	r2, [r2, #4]
   156d8:	add	r1, r1, #1
   156dc:	cmp	r2, #0
   156e0:	bne	156d4 <__assert_fail@plt+0x4348>
   156e4:	cmp	r5, r1
   156e8:	add	r0, r0, #8
   156ec:	movcc	r5, r1
   156f0:	cmp	r0, ip
   156f4:	bne	156b8 <__assert_fail@plt+0x432c>
   156f8:	mov	r1, #1
   156fc:	mov	r0, r4
   15700:	movw	r2, #47216	; 0xb870
   15704:	movt	r2, #1
   15708:	bl	11278 <__fprintf_chk@plt>
   1570c:	mov	r3, r6
   15710:	mov	r1, #1
   15714:	mov	r0, r4
   15718:	movw	r2, #47240	; 0xb888
   1571c:	movt	r2, #1
   15720:	bl	11278 <__fprintf_chk@plt>
   15724:	vmov	s15, r7
   15728:	mov	r3, r7
   1572c:	mov	r1, #1
   15730:	vldr	d5, [pc, #88]	; 15790 <__assert_fail@plt+0x4404>
   15734:	mov	r0, r4
   15738:	movw	r2, #47264	; 0xb8a0
   1573c:	movt	r2, #1
   15740:	vcvt.f64.u32	d6, s15
   15744:	vmov	s15, r6
   15748:	vmul.f64	d6, d6, d5
   1574c:	vcvt.f64.u32	d7, s15
   15750:	vdiv.f64	d5, d6, d7
   15754:	vstr	d5, [sp]
   15758:	bl	11278 <__fprintf_chk@plt>
   1575c:	mov	r3, r5
   15760:	mov	r0, r4
   15764:	movw	r2, #47300	; 0xb8c4
   15768:	movt	r2, #1
   1576c:	mov	r1, #1
   15770:	add	sp, sp, #12
   15774:	ldrd	r4, [sp]
   15778:	ldrd	r6, [sp, #8]
   1577c:	ldr	lr, [sp, #16]
   15780:	add	sp, sp, #20
   15784:	b	11278 <__fprintf_chk@plt>
   15788:	mov	r5, #0
   1578c:	b	156f8 <__assert_fail@plt+0x436c>
   15790:	andeq	r0, r0, r0
   15794:	subsmi	r0, r9, r0
   15798:	strd	r4, [sp, #-16]!
   1579c:	mov	r5, r1
   157a0:	str	r6, [sp, #8]
   157a4:	mov	r6, r0
   157a8:	str	lr, [sp, #12]
   157ac:	bl	15174 <__assert_fail@plt+0x3de8>
   157b0:	ldr	r3, [r0]
   157b4:	cmp	r3, #0
   157b8:	beq	157f4 <__assert_fail@plt+0x4468>
   157bc:	mov	r4, r0
   157c0:	b	157c8 <__assert_fail@plt+0x443c>
   157c4:	ldr	r3, [r4]
   157c8:	cmp	r3, r5
   157cc:	mov	r1, r3
   157d0:	mov	r0, r5
   157d4:	beq	1580c <__assert_fail@plt+0x4480>
   157d8:	ldr	r3, [r6, #28]
   157dc:	blx	r3
   157e0:	cmp	r0, #0
   157e4:	bne	15808 <__assert_fail@plt+0x447c>
   157e8:	ldr	r4, [r4, #4]
   157ec:	cmp	r4, #0
   157f0:	bne	157c4 <__assert_fail@plt+0x4438>
   157f4:	ldrd	r4, [sp]
   157f8:	mov	r0, #0
   157fc:	ldr	r6, [sp, #8]
   15800:	add	sp, sp, #12
   15804:	pop	{pc}		; (ldr pc, [sp], #4)
   15808:	ldr	r5, [r4]
   1580c:	mov	r0, r5
   15810:	ldrd	r4, [sp]
   15814:	ldr	r6, [sp, #8]
   15818:	add	sp, sp, #12
   1581c:	pop	{pc}		; (ldr pc, [sp], #4)
   15820:	ldr	r3, [r0, #16]
   15824:	cmp	r3, #0
   15828:	beq	1587c <__assert_fail@plt+0x44f0>
   1582c:	ldr	r3, [r0]
   15830:	ldr	r2, [r0, #4]
   15834:	cmp	r3, r2
   15838:	bcs	15870 <__assert_fail@plt+0x44e4>
   1583c:	ldr	r0, [r3]
   15840:	cmp	r0, #0
   15844:	bxne	lr
   15848:	sub	r2, r2, #1
   1584c:	sub	r2, r2, r3
   15850:	bic	r2, r2, #7
   15854:	add	r2, r3, r2
   15858:	b	15868 <__assert_fail@plt+0x44dc>
   1585c:	ldr	r0, [r3, #8]!
   15860:	cmp	r0, #0
   15864:	bxne	lr
   15868:	cmp	r3, r2
   1586c:	bne	1585c <__assert_fail@plt+0x44d0>
   15870:	str	r4, [sp, #-8]!
   15874:	str	lr, [sp, #4]
   15878:	bl	11344 <abort@plt>
   1587c:	mov	r0, r3
   15880:	bx	lr
   15884:	strd	r4, [sp, #-16]!
   15888:	mov	r5, r0
   1588c:	mov	r4, r1
   15890:	str	r6, [sp, #8]
   15894:	str	lr, [sp, #12]
   15898:	bl	15174 <__assert_fail@plt+0x3de8>
   1589c:	mov	r2, r0
   158a0:	mov	r3, r0
   158a4:	b	158b0 <__assert_fail@plt+0x4524>
   158a8:	cmp	r3, #0
   158ac:	beq	158c8 <__assert_fail@plt+0x453c>
   158b0:	ldm	r3, {r1, r3}
   158b4:	cmp	r1, r4
   158b8:	bne	158a8 <__assert_fail@plt+0x451c>
   158bc:	cmp	r3, #0
   158c0:	ldrne	r0, [r3]
   158c4:	bne	158ec <__assert_fail@plt+0x4560>
   158c8:	ldr	r3, [r5, #4]
   158cc:	b	158dc <__assert_fail@plt+0x4550>
   158d0:	ldr	r0, [r2]
   158d4:	cmp	r0, #0
   158d8:	bne	158ec <__assert_fail@plt+0x4560>
   158dc:	add	r2, r2, #8
   158e0:	cmp	r3, r2
   158e4:	bhi	158d0 <__assert_fail@plt+0x4544>
   158e8:	mov	r0, #0
   158ec:	ldrd	r4, [sp]
   158f0:	ldr	r6, [sp, #8]
   158f4:	add	sp, sp, #12
   158f8:	pop	{pc}		; (ldr pc, [sp], #4)
   158fc:	strd	r4, [sp, #-12]!
   15900:	ldr	r5, [r0]
   15904:	str	lr, [sp, #8]
   15908:	ldr	lr, [r0, #4]
   1590c:	cmp	lr, r5
   15910:	bls	1599c <__assert_fail@plt+0x4610>
   15914:	mov	ip, #0
   15918:	ldr	r3, [r5]
   1591c:	cmp	r3, #0
   15920:	bne	15944 <__assert_fail@plt+0x45b8>
   15924:	add	r5, r5, #8
   15928:	cmp	lr, r5
   1592c:	bhi	15918 <__assert_fail@plt+0x458c>
   15930:	mov	r2, ip
   15934:	ldrd	r4, [sp]
   15938:	add	sp, sp, #8
   1593c:	mov	r0, r2
   15940:	pop	{pc}		; (ldr pc, [sp], #4)
   15944:	cmp	r2, ip
   15948:	bls	15930 <__assert_fail@plt+0x45a4>
   1594c:	str	r3, [r1, ip, lsl #2]
   15950:	add	r4, ip, #1
   15954:	add	lr, r1, ip, lsl #2
   15958:	ldr	r3, [r5, #4]
   1595c:	cmp	r3, #0
   15960:	beq	15990 <__assert_fail@plt+0x4604>
   15964:	mov	ip, r4
   15968:	cmp	r2, ip
   1596c:	add	ip, ip, #1
   15970:	beq	15934 <__assert_fail@plt+0x45a8>
   15974:	ldr	r4, [r3]
   15978:	str	r4, [lr, #4]!
   1597c:	ldr	r3, [r3, #4]
   15980:	cmp	r3, #0
   15984:	bne	15968 <__assert_fail@plt+0x45dc>
   15988:	ldr	lr, [r0, #4]
   1598c:	b	15924 <__assert_fail@plt+0x4598>
   15990:	mov	ip, r4
   15994:	ldr	lr, [r0, #4]
   15998:	b	15924 <__assert_fail@plt+0x4598>
   1599c:	mov	r2, #0
   159a0:	b	15934 <__assert_fail@plt+0x45a8>
   159a4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   159a8:	ldr	r3, [r0, #4]
   159ac:	strd	r6, [sp, #8]
   159b0:	strd	r8, [sp, #16]
   159b4:	ldr	r8, [r0]
   159b8:	str	sl, [sp, #24]
   159bc:	str	lr, [sp, #28]
   159c0:	cmp	r3, r8
   159c4:	bls	15a40 <__assert_fail@plt+0x46b4>
   159c8:	mov	r7, r2
   159cc:	mov	r6, r1
   159d0:	mov	r9, r0
   159d4:	mov	r5, #0
   159d8:	ldr	r0, [r8]
   159dc:	cmp	r0, #0
   159e0:	bne	15a0c <__assert_fail@plt+0x4680>
   159e4:	add	r8, r8, #8
   159e8:	cmp	r3, r8
   159ec:	bhi	159d8 <__assert_fail@plt+0x464c>
   159f0:	mov	r0, r5
   159f4:	ldrd	r4, [sp]
   159f8:	ldrd	r6, [sp, #8]
   159fc:	ldrd	r8, [sp, #16]
   15a00:	ldr	sl, [sp, #24]
   15a04:	add	sp, sp, #28
   15a08:	pop	{pc}		; (ldr pc, [sp], #4)
   15a0c:	mov	r4, r8
   15a10:	b	15a18 <__assert_fail@plt+0x468c>
   15a14:	ldr	r0, [r4]
   15a18:	mov	r1, r7
   15a1c:	blx	r6
   15a20:	cmp	r0, #0
   15a24:	beq	159f0 <__assert_fail@plt+0x4664>
   15a28:	ldr	r4, [r4, #4]
   15a2c:	add	r5, r5, #1
   15a30:	cmp	r4, #0
   15a34:	bne	15a14 <__assert_fail@plt+0x4688>
   15a38:	ldr	r3, [r9, #4]
   15a3c:	b	159e4 <__assert_fail@plt+0x4658>
   15a40:	mov	r5, #0
   15a44:	b	159f0 <__assert_fail@plt+0x4664>
   15a48:	ldrb	r2, [r0]
   15a4c:	cmp	r2, #0
   15a50:	beq	15a7c <__assert_fail@plt+0x46f0>
   15a54:	mov	r3, #0
   15a58:	rsb	r3, r3, r3, lsl #5
   15a5c:	add	r3, r3, r2
   15a60:	ldrb	r2, [r0, #1]!
   15a64:	udiv	ip, r3, r1
   15a68:	cmp	r2, #0
   15a6c:	mls	r3, r1, ip, r3
   15a70:	bne	15a58 <__assert_fail@plt+0x46cc>
   15a74:	mov	r0, r3
   15a78:	bx	lr
   15a7c:	mov	r3, r2
   15a80:	mov	r0, r3
   15a84:	bx	lr
   15a88:	movw	r3, #47196	; 0xb85c
   15a8c:	movt	r3, #1
   15a90:	strd	r4, [sp, #-8]!
   15a94:	ldrd	r4, [r3]
   15a98:	ldr	r1, [r3, #16]
   15a9c:	ldrd	r2, [r3, #8]
   15aa0:	strd	r4, [r0]
   15aa4:	ldrd	r4, [sp]
   15aa8:	add	sp, sp, #8
   15aac:	strd	r2, [r0, #8]
   15ab0:	str	r1, [r0, #16]
   15ab4:	bx	lr
   15ab8:	strd	r4, [sp, #-20]!	; 0xffffffec
   15abc:	cmp	r2, #0
   15ac0:	movw	ip, #20836	; 0x5164
   15ac4:	movt	ip, #1
   15ac8:	strd	r6, [sp, #8]
   15acc:	movne	r6, r2
   15ad0:	str	lr, [sp, #16]
   15ad4:	sub	sp, sp, #12
   15ad8:	movw	lr, #20820	; 0x5154
   15adc:	movt	lr, #1
   15ae0:	mov	r7, r1
   15ae4:	moveq	r6, lr
   15ae8:	cmp	r3, #0
   15aec:	str	r0, [sp, #4]
   15af0:	mov	r0, #40	; 0x28
   15af4:	movne	r5, r3
   15af8:	moveq	r5, ip
   15afc:	bl	19c68 <__assert_fail@plt+0x88dc>
   15b00:	subs	r4, r0, #0
   15b04:	beq	15b9c <__assert_fail@plt+0x4810>
   15b08:	cmp	r7, #0
   15b0c:	add	r0, r4, #20
   15b10:	beq	15bb4 <__assert_fail@plt+0x4828>
   15b14:	str	r7, [r4, #20]
   15b18:	bl	152dc <__assert_fail@plt+0x3f50>
   15b1c:	cmp	r0, #0
   15b20:	beq	15bfc <__assert_fail@plt+0x4870>
   15b24:	ldrb	r3, [r7, #16]
   15b28:	cmp	r3, #0
   15b2c:	beq	15c0c <__assert_fail@plt+0x4880>
   15b30:	ldr	r0, [sp, #4]
   15b34:	bl	150c8 <__assert_fail@plt+0x3d3c>
   15b38:	lsrs	r2, r0, #30
   15b3c:	movne	r7, #1
   15b40:	moveq	r7, #0
   15b44:	tst	r0, #536870912	; 0x20000000
   15b48:	bne	15bf4 <__assert_fail@plt+0x4868>
   15b4c:	cmp	r7, #0
   15b50:	bne	15bf4 <__assert_fail@plt+0x4868>
   15b54:	cmp	r0, #0
   15b58:	str	r0, [r4, #8]
   15b5c:	beq	15bfc <__assert_fail@plt+0x4870>
   15b60:	mov	r1, #8
   15b64:	bl	19bf4 <__assert_fail@plt+0x8868>
   15b68:	cmp	r0, #0
   15b6c:	str	r0, [r4]
   15b70:	beq	15bfc <__assert_fail@plt+0x4870>
   15b74:	ldr	r3, [r4, #8]
   15b78:	str	r7, [r4, #12]
   15b7c:	str	r7, [r4, #16]
   15b80:	str	r6, [r4, #24]
   15b84:	str	r5, [r4, #28]
   15b88:	add	r0, r0, r3, lsl #3
   15b8c:	ldr	r3, [sp, #32]
   15b90:	str	r0, [r4, #4]
   15b94:	str	r3, [r4, #32]
   15b98:	str	r7, [r4, #36]	; 0x24
   15b9c:	mov	r0, r4
   15ba0:	add	sp, sp, #12
   15ba4:	ldrd	r4, [sp]
   15ba8:	ldrd	r6, [sp, #8]
   15bac:	add	sp, sp, #16
   15bb0:	pop	{pc}		; (ldr pc, [sp], #4)
   15bb4:	movw	r3, #47196	; 0xb85c
   15bb8:	movt	r3, #1
   15bbc:	str	r3, [r4, #20]
   15bc0:	bl	152dc <__assert_fail@plt+0x3f50>
   15bc4:	cmp	r0, #0
   15bc8:	beq	15bfc <__assert_fail@plt+0x4870>
   15bcc:	vldr	s13, [pc, #64]	; 15c14 <__assert_fail@plt+0x4888>
   15bd0:	vldr	s15, [sp, #4]
   15bd4:	vldr	s14, [pc, #60]	; 15c18 <__assert_fail@plt+0x488c>
   15bd8:	vcvt.f32.u32	s12, s15
   15bdc:	vdiv.f32	s15, s12, s13
   15be0:	vcmpe.f32	s15, s14
   15be4:	vmrs	APSR_nzcv, fpscr
   15be8:	vcvtlt.u32.f32	s15, s15
   15bec:	vstrlt	s15, [sp, #4]
   15bf0:	blt	15b30 <__assert_fail@plt+0x47a4>
   15bf4:	mov	r3, #0
   15bf8:	str	r3, [r4, #8]
   15bfc:	mov	r0, r4
   15c00:	mov	r4, #0
   15c04:	bl	12da4 <__assert_fail@plt+0x1a18>
   15c08:	b	15b9c <__assert_fail@plt+0x4810>
   15c0c:	vldr	s13, [r7, #8]
   15c10:	b	15bd0 <__assert_fail@plt+0x4844>
   15c14:	svccc	0x004ccccd
   15c18:	svcmi	0x00800000
   15c1c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15c20:	mov	r5, r0
   15c24:	ldr	r2, [r0, #4]
   15c28:	strd	r6, [sp, #8]
   15c2c:	ldr	r6, [r0]
   15c30:	str	r8, [sp, #16]
   15c34:	str	lr, [sp, #20]
   15c38:	cmp	r6, r2
   15c3c:	addcc	r6, r6, #8
   15c40:	movcc	r7, #0
   15c44:	bcc	15c58 <__assert_fail@plt+0x48cc>
   15c48:	b	15ccc <__assert_fail@plt+0x4940>
   15c4c:	cmp	r2, r6
   15c50:	add	r6, r6, #8
   15c54:	bls	15ccc <__assert_fail@plt+0x4940>
   15c58:	ldr	r3, [r6, #-8]
   15c5c:	cmp	r3, #0
   15c60:	beq	15c4c <__assert_fail@plt+0x48c0>
   15c64:	ldr	r4, [r6, #-4]
   15c68:	ldr	r2, [r5, #32]
   15c6c:	cmp	r4, #0
   15c70:	beq	15ca4 <__assert_fail@plt+0x4918>
   15c74:	cmp	r2, #0
   15c78:	beq	15c88 <__assert_fail@plt+0x48fc>
   15c7c:	ldr	r0, [r4]
   15c80:	blx	r2
   15c84:	ldr	r2, [r5, #32]
   15c88:	ldr	r3, [r4, #4]
   15c8c:	ldr	r1, [r5, #36]	; 0x24
   15c90:	str	r7, [r4]
   15c94:	str	r1, [r4, #4]
   15c98:	str	r4, [r5, #36]	; 0x24
   15c9c:	subs	r4, r3, #0
   15ca0:	bne	15c74 <__assert_fail@plt+0x48e8>
   15ca4:	cmp	r2, #0
   15ca8:	beq	15cb4 <__assert_fail@plt+0x4928>
   15cac:	ldr	r0, [r6, #-8]
   15cb0:	blx	r2
   15cb4:	str	r7, [r6, #-8]
   15cb8:	str	r7, [r6, #-4]
   15cbc:	ldr	r2, [r5, #4]
   15cc0:	cmp	r2, r6
   15cc4:	add	r6, r6, #8
   15cc8:	bhi	15c58 <__assert_fail@plt+0x48cc>
   15ccc:	mov	r3, #0
   15cd0:	ldrd	r6, [sp, #8]
   15cd4:	ldr	r8, [sp, #16]
   15cd8:	str	r3, [r5, #12]
   15cdc:	str	r3, [r5, #16]
   15ce0:	ldrd	r4, [sp]
   15ce4:	add	sp, sp, #20
   15ce8:	pop	{pc}		; (ldr pc, [sp], #4)
   15cec:	strd	r4, [sp, #-16]!
   15cf0:	ldr	r2, [r0, #32]
   15cf4:	ldr	r5, [r0]
   15cf8:	ldr	r3, [r0, #4]
   15cfc:	cmp	r2, #0
   15d00:	str	r6, [sp, #8]
   15d04:	mov	r6, r0
   15d08:	str	lr, [sp, #12]
   15d0c:	beq	15d74 <__assert_fail@plt+0x49e8>
   15d10:	ldr	r2, [r0, #16]
   15d14:	cmp	r2, #0
   15d18:	beq	15d74 <__assert_fail@plt+0x49e8>
   15d1c:	cmp	r5, r3
   15d20:	bcc	15d34 <__assert_fail@plt+0x49a8>
   15d24:	b	15da8 <__assert_fail@plt+0x4a1c>
   15d28:	add	r5, r5, #8
   15d2c:	cmp	r3, r5
   15d30:	bls	15d70 <__assert_fail@plt+0x49e4>
   15d34:	ldr	r0, [r5]
   15d38:	cmp	r0, #0
   15d3c:	beq	15d28 <__assert_fail@plt+0x499c>
   15d40:	mov	r4, r5
   15d44:	b	15d4c <__assert_fail@plt+0x49c0>
   15d48:	ldr	r0, [r4]
   15d4c:	ldr	r3, [r6, #32]
   15d50:	blx	r3
   15d54:	ldr	r4, [r4, #4]
   15d58:	cmp	r4, #0
   15d5c:	bne	15d48 <__assert_fail@plt+0x49bc>
   15d60:	ldr	r3, [r6, #4]
   15d64:	add	r5, r5, #8
   15d68:	cmp	r3, r5
   15d6c:	bhi	15d34 <__assert_fail@plt+0x49a8>
   15d70:	ldr	r5, [r6]
   15d74:	cmp	r5, r3
   15d78:	bcs	15da8 <__assert_fail@plt+0x4a1c>
   15d7c:	ldr	r0, [r5, #4]
   15d80:	cmp	r0, #0
   15d84:	beq	15d9c <__assert_fail@plt+0x4a10>
   15d88:	ldr	r4, [r0, #4]
   15d8c:	bl	12da4 <__assert_fail@plt+0x1a18>
   15d90:	subs	r0, r4, #0
   15d94:	bne	15d88 <__assert_fail@plt+0x49fc>
   15d98:	ldr	r3, [r6, #4]
   15d9c:	add	r5, r5, #8
   15da0:	cmp	r3, r5
   15da4:	bhi	15d7c <__assert_fail@plt+0x49f0>
   15da8:	ldr	r0, [r6, #36]	; 0x24
   15dac:	cmp	r0, #0
   15db0:	beq	15dc4 <__assert_fail@plt+0x4a38>
   15db4:	ldr	r4, [r0, #4]
   15db8:	bl	12da4 <__assert_fail@plt+0x1a18>
   15dbc:	subs	r0, r4, #0
   15dc0:	bne	15db4 <__assert_fail@plt+0x4a28>
   15dc4:	ldr	r0, [r6]
   15dc8:	bl	12da4 <__assert_fail@plt+0x1a18>
   15dcc:	mov	r0, r6
   15dd0:	ldrd	r4, [sp]
   15dd4:	ldr	r6, [sp, #8]
   15dd8:	ldr	lr, [sp, #12]
   15ddc:	add	sp, sp, #16
   15de0:	b	12da4 <__assert_fail@plt+0x1a18>
   15de4:	ldr	r3, [r0, #20]
   15de8:	strd	r4, [sp, #-20]!	; 0xffffffec
   15dec:	ldrb	r2, [r3, #16]
   15df0:	strd	r6, [sp, #8]
   15df4:	mov	r6, r0
   15df8:	str	lr, [sp, #16]
   15dfc:	sub	sp, sp, #52	; 0x34
   15e00:	str	r1, [sp, #4]
   15e04:	cmp	r2, #0
   15e08:	bne	15e34 <__assert_fail@plt+0x4aa8>
   15e0c:	vmov	s15, r1
   15e10:	vldr	s13, [r3, #8]
   15e14:	vldr	s14, [pc, #340]	; 15f70 <__assert_fail@plt+0x4be4>
   15e18:	vcvt.f32.u32	s12, s15
   15e1c:	vdiv.f32	s15, s12, s13
   15e20:	vcmpe.f32	s15, s14
   15e24:	vmrs	APSR_nzcv, fpscr
   15e28:	vcvtlt.u32.f32	s15, s15
   15e2c:	vstrlt	s15, [sp, #4]
   15e30:	bge	15e64 <__assert_fail@plt+0x4ad8>
   15e34:	ldr	r0, [sp, #4]
   15e38:	bl	150c8 <__assert_fail@plt+0x3d3c>
   15e3c:	lsrs	r3, r0, #30
   15e40:	mov	r5, r0
   15e44:	movne	r4, #1
   15e48:	moveq	r4, #0
   15e4c:	tst	r0, #536870912	; 0x20000000
   15e50:	movne	r4, #1
   15e54:	cmp	r0, #0
   15e58:	moveq	r4, #1
   15e5c:	cmp	r4, #0
   15e60:	beq	15e80 <__assert_fail@plt+0x4af4>
   15e64:	mov	r4, #0
   15e68:	mov	r0, r4
   15e6c:	add	sp, sp, #52	; 0x34
   15e70:	ldrd	r4, [sp]
   15e74:	ldrd	r6, [sp, #8]
   15e78:	add	sp, sp, #16
   15e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e80:	ldr	r3, [r6, #8]
   15e84:	cmp	r3, r0
   15e88:	beq	15f38 <__assert_fail@plt+0x4bac>
   15e8c:	mov	r1, #8
   15e90:	bl	19bf4 <__assert_fail@plt+0x8868>
   15e94:	cmp	r0, #0
   15e98:	str	r0, [sp, #8]
   15e9c:	beq	15e64 <__assert_fail@plt+0x4ad8>
   15ea0:	add	r3, r0, r5, lsl #3
   15ea4:	ldr	r7, [r6, #20]
   15ea8:	mov	r2, r4
   15eac:	add	r0, sp, #8
   15eb0:	mov	r1, r6
   15eb4:	ldr	lr, [r6, #28]
   15eb8:	str	r3, [sp, #12]
   15ebc:	str	r5, [sp, #16]
   15ec0:	ldr	r5, [r6, #24]
   15ec4:	str	r4, [sp, #20]
   15ec8:	ldr	ip, [r6, #32]
   15ecc:	str	r4, [sp, #24]
   15ed0:	ldr	r3, [r6, #36]	; 0x24
   15ed4:	str	r7, [sp, #28]
   15ed8:	str	r5, [sp, #32]
   15edc:	str	lr, [sp, #36]	; 0x24
   15ee0:	str	ip, [sp, #40]	; 0x28
   15ee4:	str	r3, [sp, #44]	; 0x2c
   15ee8:	bl	15390 <__assert_fail@plt+0x4004>
   15eec:	subs	r4, r0, #0
   15ef0:	bne	15f40 <__assert_fail@plt+0x4bb4>
   15ef4:	ldr	r3, [sp, #44]	; 0x2c
   15ef8:	mov	r2, #1
   15efc:	add	r1, sp, #8
   15f00:	mov	r0, r6
   15f04:	str	r3, [r6, #36]	; 0x24
   15f08:	bl	15390 <__assert_fail@plt+0x4004>
   15f0c:	cmp	r0, #0
   15f10:	beq	15f6c <__assert_fail@plt+0x4be0>
   15f14:	add	r1, sp, #8
   15f18:	mov	r0, r6
   15f1c:	mov	r2, r4
   15f20:	bl	15390 <__assert_fail@plt+0x4004>
   15f24:	cmp	r0, #0
   15f28:	beq	15f6c <__assert_fail@plt+0x4be0>
   15f2c:	ldr	r0, [sp, #8]
   15f30:	bl	12da4 <__assert_fail@plt+0x1a18>
   15f34:	b	15e68 <__assert_fail@plt+0x4adc>
   15f38:	mov	r4, #1
   15f3c:	b	15e68 <__assert_fail@plt+0x4adc>
   15f40:	ldr	r0, [r6]
   15f44:	bl	12da4 <__assert_fail@plt+0x1a18>
   15f48:	ldrd	r2, [sp, #8]
   15f4c:	ldr	r1, [sp, #16]
   15f50:	strd	r2, [r6]
   15f54:	ldr	r2, [sp, #20]
   15f58:	str	r1, [r6, #8]
   15f5c:	ldr	r3, [sp, #44]	; 0x2c
   15f60:	str	r2, [r6, #12]
   15f64:	str	r3, [r6, #36]	; 0x24
   15f68:	b	15e68 <__assert_fail@plt+0x4adc>
   15f6c:	bl	11344 <abort@plt>
   15f70:	svcmi	0x00800000
   15f74:	strd	r4, [sp, #-16]!
   15f78:	str	r6, [sp, #8]
   15f7c:	subs	r6, r1, #0
   15f80:	str	lr, [sp, #12]
   15f84:	sub	sp, sp, #8
   15f88:	beq	16108 <__assert_fail@plt+0x4d7c>
   15f8c:	mov	r3, #0
   15f90:	mov	r5, r2
   15f94:	add	r2, sp, #4
   15f98:	mov	r4, r0
   15f9c:	bl	151b4 <__assert_fail@plt+0x3e28>
   15fa0:	subs	r3, r0, #0
   15fa4:	beq	15fd0 <__assert_fail@plt+0x4c44>
   15fa8:	cmp	r5, #0
   15fac:	moveq	r0, r5
   15fb0:	beq	15fbc <__assert_fail@plt+0x4c30>
   15fb4:	mov	r0, #0
   15fb8:	str	r3, [r5]
   15fbc:	add	sp, sp, #8
   15fc0:	ldrd	r4, [sp]
   15fc4:	ldr	r6, [sp, #8]
   15fc8:	add	sp, sp, #12
   15fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   15fd0:	vldr	s15, [r4, #8]
   15fd4:	vldr	s14, [r4, #12]
   15fd8:	ldr	r3, [r4, #20]
   15fdc:	vcvt.f32.u32	s15, s15
   15fe0:	vcvt.f32.u32	s14, s14
   15fe4:	vldr	s13, [r3, #8]
   15fe8:	vmul.f32	s15, s15, s13
   15fec:	vcmpe.f32	s14, s15
   15ff0:	vmrs	APSR_nzcv, fpscr
   15ff4:	bgt	1603c <__assert_fail@plt+0x4cb0>
   15ff8:	ldr	r2, [sp, #4]
   15ffc:	ldr	r3, [r2]
   16000:	cmp	r3, #0
   16004:	beq	16098 <__assert_fail@plt+0x4d0c>
   16008:	ldr	r3, [r4, #36]	; 0x24
   1600c:	cmp	r3, #0
   16010:	beq	160bc <__assert_fail@plt+0x4d30>
   16014:	ldr	r1, [r3, #4]
   16018:	str	r1, [r4, #36]	; 0x24
   1601c:	ldr	r1, [r4, #16]
   16020:	mov	r0, #1
   16024:	ldr	ip, [r2, #4]
   16028:	add	r1, r1, r0
   1602c:	stm	r3, {r6, ip}
   16030:	str	r3, [r2, #4]
   16034:	str	r1, [r4, #16]
   16038:	b	15fbc <__assert_fail@plt+0x4c30>
   1603c:	add	r0, r4, #20
   16040:	bl	152dc <__assert_fail@plt+0x3f50>
   16044:	vldr	s15, [r4, #8]
   16048:	vldr	s14, [r4, #12]
   1604c:	ldr	r3, [r4, #20]
   16050:	vcvt.f32.u32	s15, s15
   16054:	vcvt.f32.u32	s14, s14
   16058:	vldr	s13, [r3, #8]
   1605c:	vmul.f32	s12, s13, s15
   16060:	vcmpe.f32	s14, s12
   16064:	vmrs	APSR_nzcv, fpscr
   16068:	ble	15ff8 <__assert_fail@plt+0x4c6c>
   1606c:	vldr	s14, [r3, #12]
   16070:	ldrb	r2, [r3, #16]
   16074:	vmul.f32	s15, s15, s14
   16078:	vldr	s14, [pc, #140]	; 1610c <__assert_fail@plt+0x4d80>
   1607c:	cmp	r2, #0
   16080:	vmuleq.f32	s15, s15, s13
   16084:	vcmpe.f32	s15, s14
   16088:	vmrs	APSR_nzcv, fpscr
   1608c:	blt	160d4 <__assert_fail@plt+0x4d48>
   16090:	mvn	r0, #0
   16094:	b	15fbc <__assert_fail@plt+0x4c30>
   16098:	ldr	r1, [r4, #12]
   1609c:	mov	r0, #1
   160a0:	ldr	r3, [r4, #16]
   160a4:	str	r6, [r2]
   160a8:	add	r2, r1, r0
   160ac:	add	r3, r3, r0
   160b0:	str	r2, [r4, #12]
   160b4:	str	r3, [r4, #16]
   160b8:	b	15fbc <__assert_fail@plt+0x4c30>
   160bc:	mov	r0, #8
   160c0:	bl	19c68 <__assert_fail@plt+0x88dc>
   160c4:	subs	r3, r0, #0
   160c8:	beq	16090 <__assert_fail@plt+0x4d04>
   160cc:	ldr	r2, [sp, #4]
   160d0:	b	1601c <__assert_fail@plt+0x4c90>
   160d4:	vcvt.u32.f32	s15, s15
   160d8:	mov	r0, r4
   160dc:	vmov	r1, s15
   160e0:	bl	15de4 <__assert_fail@plt+0x4a58>
   160e4:	cmp	r0, #0
   160e8:	beq	16090 <__assert_fail@plt+0x4d04>
   160ec:	add	r2, sp, #4
   160f0:	mov	r3, #0
   160f4:	mov	r1, r6
   160f8:	mov	r0, r4
   160fc:	bl	151b4 <__assert_fail@plt+0x3e28>
   16100:	cmp	r0, #0
   16104:	beq	15ff8 <__assert_fail@plt+0x4c6c>
   16108:	bl	11344 <abort@plt>
   1610c:	svcmi	0x00800000
   16110:	str	r4, [sp, #-8]!
   16114:	mov	r4, r1
   16118:	str	lr, [sp, #4]
   1611c:	sub	sp, sp, #8
   16120:	add	r2, sp, #4
   16124:	bl	15f74 <__assert_fail@plt+0x4be8>
   16128:	cmn	r0, #1
   1612c:	moveq	r0, #0
   16130:	beq	16140 <__assert_fail@plt+0x4db4>
   16134:	cmp	r0, #0
   16138:	ldreq	r0, [sp, #4]
   1613c:	movne	r0, r4
   16140:	add	sp, sp, #8
   16144:	ldr	r4, [sp]
   16148:	add	sp, sp, #4
   1614c:	pop	{pc}		; (ldr pc, [sp], #4)
   16150:	strd	r4, [sp, #-16]!
   16154:	mov	r3, #1
   16158:	mov	r4, r0
   1615c:	str	r6, [sp, #8]
   16160:	str	lr, [sp, #12]
   16164:	sub	sp, sp, #8
   16168:	add	r2, sp, #4
   1616c:	bl	151b4 <__assert_fail@plt+0x3e28>
   16170:	subs	r5, r0, #0
   16174:	beq	16194 <__assert_fail@plt+0x4e08>
   16178:	ldr	r2, [sp, #4]
   1617c:	ldr	r3, [r4, #16]
   16180:	ldr	r2, [r2]
   16184:	sub	r3, r3, #1
   16188:	str	r3, [r4, #16]
   1618c:	cmp	r2, #0
   16190:	beq	161ac <__assert_fail@plt+0x4e20>
   16194:	mov	r0, r5
   16198:	add	sp, sp, #8
   1619c:	ldrd	r4, [sp]
   161a0:	ldr	r6, [sp, #8]
   161a4:	add	sp, sp, #12
   161a8:	pop	{pc}		; (ldr pc, [sp], #4)
   161ac:	vldr	s15, [r4, #8]
   161b0:	ldr	r3, [r4, #12]
   161b4:	ldr	r2, [r4, #20]
   161b8:	vcvt.f32.u32	s15, s15
   161bc:	sub	r3, r3, #1
   161c0:	vmov	s14, r3
   161c4:	vldr	s13, [r2]
   161c8:	str	r3, [r4, #12]
   161cc:	vmul.f32	s15, s15, s13
   161d0:	vcvt.f32.u32	s14, s14
   161d4:	vcmpe.f32	s14, s15
   161d8:	vmrs	APSR_nzcv, fpscr
   161dc:	bpl	16194 <__assert_fail@plt+0x4e08>
   161e0:	add	r0, r4, #20
   161e4:	bl	152dc <__assert_fail@plt+0x3f50>
   161e8:	vldr	s15, [r4, #8]
   161ec:	vldr	s13, [r4, #12]
   161f0:	ldr	r3, [r4, #20]
   161f4:	vcvt.f32.u32	s15, s15
   161f8:	vcvt.f32.u32	s13, s13
   161fc:	vldr	s14, [r3]
   16200:	vmul.f32	s14, s15, s14
   16204:	vcmpe.f32	s13, s14
   16208:	vmrs	APSR_nzcv, fpscr
   1620c:	bpl	16194 <__assert_fail@plt+0x4e08>
   16210:	ldrb	r2, [r3, #16]
   16214:	mov	r0, r4
   16218:	vldr	s14, [r3, #4]
   1621c:	cmp	r2, #0
   16220:	vmul.f32	s15, s15, s14
   16224:	vldreq	s14, [r3, #8]
   16228:	vmuleq.f32	s15, s15, s14
   1622c:	vcvt.u32.f32	s15, s15
   16230:	vmov	r1, s15
   16234:	bl	15de4 <__assert_fail@plt+0x4a58>
   16238:	cmp	r0, #0
   1623c:	bne	16194 <__assert_fail@plt+0x4e08>
   16240:	ldr	r0, [r4, #36]	; 0x24
   16244:	cmp	r0, #0
   16248:	beq	1625c <__assert_fail@plt+0x4ed0>
   1624c:	ldr	r6, [r0, #4]
   16250:	bl	12da4 <__assert_fail@plt+0x1a18>
   16254:	subs	r0, r6, #0
   16258:	bne	1624c <__assert_fail@plt+0x4ec0>
   1625c:	mov	r3, #0
   16260:	str	r3, [r4, #36]	; 0x24
   16264:	b	16194 <__assert_fail@plt+0x4e08>
   16268:	b	16150 <__assert_fail@plt+0x4dc4>
   1626c:	mov	r3, #0
   16270:	mov	r2, #1
   16274:	str	r1, [r0]
   16278:	str	r1, [r0, #4]
   1627c:	str	r1, [r0, #8]
   16280:	str	r1, [r0, #12]
   16284:	str	r1, [r0, #16]
   16288:	str	r3, [r0, #20]
   1628c:	str	r3, [r0, #24]
   16290:	strb	r2, [r0, #28]
   16294:	bx	lr
   16298:	ldrb	r0, [r0, #28]
   1629c:	bx	lr
   162a0:	ldrb	ip, [r0, #28]
   162a4:	mov	r2, r0
   162a8:	ldr	r3, [r0, #20]
   162ac:	eor	ip, ip, #1
   162b0:	add	r3, ip, r3
   162b4:	and	r3, r3, #3
   162b8:	ldr	r0, [r0, r3, lsl #2]
   162bc:	str	r1, [r2, r3, lsl #2]
   162c0:	ldr	r1, [r2, #24]
   162c4:	str	r3, [r2, #20]
   162c8:	cmp	r1, r3
   162cc:	bne	162dc <__assert_fail@plt+0x4f50>
   162d0:	add	ip, ip, r1
   162d4:	and	ip, ip, #3
   162d8:	str	ip, [r2, #24]
   162dc:	mov	r3, #0
   162e0:	strb	r3, [r2, #28]
   162e4:	bx	lr
   162e8:	ldrb	r3, [r0, #28]
   162ec:	cmp	r3, #0
   162f0:	bne	1632c <__assert_fail@plt+0x4fa0>
   162f4:	ldr	r1, [r0, #16]
   162f8:	ldr	r3, [r0, #20]
   162fc:	ldr	r2, [r0, r3, lsl #2]
   16300:	str	r1, [r0, r3, lsl #2]
   16304:	ldr	r1, [r0, #24]
   16308:	cmp	r3, r1
   1630c:	moveq	r3, #1
   16310:	strbeq	r3, [r0, #28]
   16314:	beq	16324 <__assert_fail@plt+0x4f98>
   16318:	add	r3, r3, #3
   1631c:	and	r3, r3, #3
   16320:	str	r3, [r0, #20]
   16324:	mov	r0, r2
   16328:	bx	lr
   1632c:	str	r4, [sp, #-8]!
   16330:	str	lr, [sp, #4]
   16334:	bl	11344 <abort@plt>
   16338:	mov	r3, #0
   1633c:	strd	r4, [sp, #-16]!
   16340:	mov	r4, r0
   16344:	mov	r5, r1
   16348:	str	r6, [sp, #8]
   1634c:	add	r6, r2, #20
   16350:	str	lr, [sp, #12]
   16354:	strb	r3, [r2, #20]
   16358:	mov	r0, r4
   1635c:	mov	r1, r5
   16360:	mov	r2, #10
   16364:	mov	r3, #0
   16368:	bl	1a4cc <__assert_fail@plt+0x9140>
   1636c:	add	ip, r2, #48	; 0x30
   16370:	mov	r0, r4
   16374:	mov	r1, r5
   16378:	mov	r2, #10
   1637c:	mov	r3, #0
   16380:	strb	ip, [r6, #-1]!
   16384:	bl	1a4cc <__assert_fail@plt+0x9140>
   16388:	cmp	r5, #0
   1638c:	mov	r5, r1
   16390:	cmpeq	r4, #9
   16394:	mov	r4, r0
   16398:	bhi	16358 <__assert_fail@plt+0x4fcc>
   1639c:	mov	r0, r6
   163a0:	ldrd	r4, [sp]
   163a4:	ldr	r6, [sp, #8]
   163a8:	add	sp, sp, #12
   163ac:	pop	{pc}		; (ldr pc, [sp], #4)
   163b0:	push	{r2, r3}
   163b4:	push	{lr}		; (str lr, [sp, #-4]!)
   163b8:	sub	sp, sp, #12
   163bc:	ldr	r2, [sp, #16]
   163c0:	ands	r3, r2, #64	; 0x40
   163c4:	bne	163e0 <__assert_fail@plt+0x5054>
   163c8:	bl	11224 <openat64@plt>
   163cc:	bl	187b8 <__assert_fail@plt+0x742c>
   163d0:	add	sp, sp, #12
   163d4:	pop	{lr}		; (ldr lr, [sp], #4)
   163d8:	add	sp, sp, #8
   163dc:	bx	lr
   163e0:	add	ip, sp, #20
   163e4:	ldr	r3, [sp, #20]
   163e8:	str	ip, [sp, #4]
   163ec:	b	163c8 <__assert_fail@plt+0x503c>
   163f0:	orr	r2, r2, #540672	; 0x84000
   163f4:	strd	r4, [sp, #-16]!
   163f8:	orr	r2, r2, #2304	; 0x900
   163fc:	str	r6, [sp, #8]
   16400:	mov	r6, r3
   16404:	str	lr, [sp, #12]
   16408:	bl	163b0 <__assert_fail@plt+0x5024>
   1640c:	subs	r5, r0, #0
   16410:	movlt	r4, #0
   16414:	blt	16428 <__assert_fail@plt+0x509c>
   16418:	bl	112e4 <fdopendir@plt>
   1641c:	subs	r4, r0, #0
   16420:	beq	1643c <__assert_fail@plt+0x50b0>
   16424:	str	r5, [r6]
   16428:	mov	r0, r4
   1642c:	ldrd	r4, [sp]
   16430:	ldr	r6, [sp, #8]
   16434:	add	sp, sp, #12
   16438:	pop	{pc}		; (ldr pc, [sp], #4)
   1643c:	bl	1123c <__errno_location@plt>
   16440:	mov	r6, r0
   16444:	mov	r0, r5
   16448:	ldr	r5, [r6]
   1644c:	bl	11350 <close@plt>
   16450:	b	16424 <__assert_fail@plt+0x5098>
   16454:	strd	r4, [sp, #-16]!
   16458:	subs	r4, r0, #0
   1645c:	str	r6, [sp, #8]
   16460:	str	lr, [sp, #12]
   16464:	beq	164fc <__assert_fail@plt+0x5170>
   16468:	mov	r1, #47	; 0x2f
   1646c:	bl	112c0 <strrchr@plt>
   16470:	subs	r5, r0, #0
   16474:	beq	164d4 <__assert_fail@plt+0x5148>
   16478:	add	r6, r5, #1
   1647c:	sub	r3, r6, r4
   16480:	cmp	r3, #6
   16484:	ble	164d4 <__assert_fail@plt+0x5148>
   16488:	movw	r1, #47380	; 0xb914
   1648c:	movt	r1, #1
   16490:	mov	r2, #7
   16494:	sub	r0, r5, #6
   16498:	bl	11338 <strncmp@plt>
   1649c:	cmp	r0, #0
   164a0:	bne	164d4 <__assert_fail@plt+0x5148>
   164a4:	movw	r1, #47388	; 0xb91c
   164a8:	movt	r1, #1
   164ac:	mov	r2, #3
   164b0:	mov	r0, r6
   164b4:	bl	11338 <strncmp@plt>
   164b8:	cmp	r0, #0
   164bc:	movne	r4, r6
   164c0:	bne	164d4 <__assert_fail@plt+0x5148>
   164c4:	add	r4, r5, #4
   164c8:	movw	r3, #49544	; 0xc188
   164cc:	movt	r3, #2
   164d0:	str	r4, [r3]
   164d4:	movw	r2, #49608	; 0xc1c8
   164d8:	movt	r2, #2
   164dc:	ldr	r6, [sp, #8]
   164e0:	movw	r3, #49548	; 0xc18c
   164e4:	movt	r3, #2
   164e8:	str	r4, [r2]
   164ec:	str	r4, [r3]
   164f0:	ldrd	r4, [sp]
   164f4:	add	sp, sp, #12
   164f8:	pop	{pc}		; (ldr pc, [sp], #4)
   164fc:	movw	r3, #49560	; 0xc198
   16500:	movt	r3, #2
   16504:	movw	r0, #47324	; 0xb8dc
   16508:	movt	r0, #1
   1650c:	ldr	r3, [r3]
   16510:	mov	r2, #55	; 0x37
   16514:	mov	r1, #1
   16518:	bl	1114c <fwrite@plt>
   1651c:	bl	11344 <abort@plt>
   16520:	strd	r4, [sp, #-16]!
   16524:	mov	r4, #0
   16528:	mov	r5, #0
   1652c:	cmp	r1, #10
   16530:	str	r6, [sp, #8]
   16534:	strd	r4, [r0]
   16538:	strd	r4, [r0, #8]
   1653c:	str	lr, [sp, #12]
   16540:	strd	r4, [r0, #16]
   16544:	strd	r4, [r0, #24]
   16548:	strd	r4, [r0, #32]
   1654c:	strd	r4, [r0, #40]	; 0x28
   16550:	beq	16568 <__assert_fail@plt+0x51dc>
   16554:	ldrd	r4, [sp]
   16558:	str	r1, [r0]
   1655c:	ldr	r6, [sp, #8]
   16560:	add	sp, sp, #12
   16564:	pop	{pc}		; (ldr pc, [sp], #4)
   16568:	bl	11344 <abort@plt>
   1656c:	mov	r2, #5
   16570:	strd	r4, [sp, #-16]!
   16574:	mov	r5, r0
   16578:	str	r6, [sp, #8]
   1657c:	mov	r6, r1
   16580:	mov	r1, r0
   16584:	mov	r0, #0
   16588:	str	lr, [sp, #12]
   1658c:	bl	11104 <dcgettext@plt>
   16590:	cmp	r5, r0
   16594:	mov	r4, r0
   16598:	beq	165b0 <__assert_fail@plt+0x5224>
   1659c:	mov	r0, r4
   165a0:	ldrd	r4, [sp]
   165a4:	ldr	r6, [sp, #8]
   165a8:	add	sp, sp, #12
   165ac:	pop	{pc}		; (ldr pc, [sp], #4)
   165b0:	bl	1a2b0 <__assert_fail@plt+0x8f24>
   165b4:	ldrb	r3, [r0]
   165b8:	bic	r3, r3, #32
   165bc:	cmp	r3, #85	; 0x55
   165c0:	bne	16628 <__assert_fail@plt+0x529c>
   165c4:	ldrb	r3, [r0, #1]
   165c8:	bic	r3, r3, #32
   165cc:	cmp	r3, #84	; 0x54
   165d0:	bne	166a8 <__assert_fail@plt+0x531c>
   165d4:	ldrb	r3, [r0, #2]
   165d8:	bic	r3, r3, #32
   165dc:	cmp	r3, #70	; 0x46
   165e0:	bne	166a8 <__assert_fail@plt+0x531c>
   165e4:	ldrb	r3, [r0, #3]
   165e8:	cmp	r3, #45	; 0x2d
   165ec:	bne	166a8 <__assert_fail@plt+0x531c>
   165f0:	ldrb	r3, [r0, #4]
   165f4:	cmp	r3, #56	; 0x38
   165f8:	bne	166a8 <__assert_fail@plt+0x531c>
   165fc:	ldrb	r3, [r0, #5]
   16600:	cmp	r3, #0
   16604:	bne	166a8 <__assert_fail@plt+0x531c>
   16608:	ldrb	r2, [r4]
   1660c:	movw	r3, #47480	; 0xb978
   16610:	movt	r3, #1
   16614:	movw	r4, #47492	; 0xb984
   16618:	movt	r4, #1
   1661c:	cmp	r2, #96	; 0x60
   16620:	movne	r4, r3
   16624:	b	1659c <__assert_fail@plt+0x5210>
   16628:	cmp	r3, #71	; 0x47
   1662c:	bne	166a8 <__assert_fail@plt+0x531c>
   16630:	ldrb	r3, [r0, #1]
   16634:	bic	r3, r3, #32
   16638:	cmp	r3, #66	; 0x42
   1663c:	bne	166a8 <__assert_fail@plt+0x531c>
   16640:	ldrb	r3, [r0, #2]
   16644:	cmp	r3, #49	; 0x31
   16648:	bne	166a8 <__assert_fail@plt+0x531c>
   1664c:	ldrb	r3, [r0, #3]
   16650:	cmp	r3, #56	; 0x38
   16654:	bne	166a8 <__assert_fail@plt+0x531c>
   16658:	ldrb	r3, [r0, #4]
   1665c:	cmp	r3, #48	; 0x30
   16660:	bne	166a8 <__assert_fail@plt+0x531c>
   16664:	ldrb	r3, [r0, #5]
   16668:	cmp	r3, #51	; 0x33
   1666c:	bne	166a8 <__assert_fail@plt+0x531c>
   16670:	ldrb	r3, [r0, #6]
   16674:	cmp	r3, #48	; 0x30
   16678:	bne	166a8 <__assert_fail@plt+0x531c>
   1667c:	ldrb	r3, [r0, #7]
   16680:	cmp	r3, #0
   16684:	bne	166a8 <__assert_fail@plt+0x531c>
   16688:	ldrb	r2, [r4]
   1668c:	movw	r3, #47484	; 0xb97c
   16690:	movt	r3, #1
   16694:	movw	r4, #47488	; 0xb980
   16698:	movt	r4, #1
   1669c:	cmp	r2, #96	; 0x60
   166a0:	movne	r4, r3
   166a4:	b	1659c <__assert_fail@plt+0x5210>
   166a8:	movw	r3, #47496	; 0xb988
   166ac:	movt	r3, #1
   166b0:	cmp	r6, #9
   166b4:	movw	r4, #47476	; 0xb974
   166b8:	movt	r4, #1
   166bc:	movne	r4, r3
   166c0:	b	1659c <__assert_fail@plt+0x5210>
   166c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   166c8:	strd	r6, [sp, #8]
   166cc:	strd	r8, [sp, #16]
   166d0:	strd	sl, [sp, #24]
   166d4:	mov	fp, r0
   166d8:	mov	sl, r1
   166dc:	str	lr, [sp, #32]
   166e0:	sub	sp, sp, #116	; 0x74
   166e4:	ldr	r8, [sp, #152]	; 0x98
   166e8:	str	r3, [sp, #28]
   166ec:	ldr	r3, [sp, #156]	; 0x9c
   166f0:	str	r2, [sp, #32]
   166f4:	and	r4, r3, #2
   166f8:	ubfx	r3, r3, #1, #1
   166fc:	str	r3, [sp, #44]	; 0x2c
   16700:	bl	11164 <__ctype_get_mb_cur_max@plt>
   16704:	str	r0, [sp, #64]	; 0x40
   16708:	cmp	r8, #10
   1670c:	ldrls	pc, [pc, r8, lsl #2]
   16710:	b	17e80 <__assert_fail@plt+0x6af4>
   16714:	andeq	r6, r1, r8, lsl fp
   16718:			; <UNDEFINED> instruction: 0x00016bb4
   1671c:	muleq	r1, r0, r1
   16720:	ldrdeq	r6, [r1], -r4
   16724:	andeq	r6, r1, ip, ror sl
   16728:	andeq	r6, r1, r8, asr #21
   1672c:	andeq	r6, r1, r8, asr #22
   16730:	andeq	r6, r1, r4, lsl #23
   16734:	andeq	r6, r1, r0, asr #14
   16738:	andeq	r6, r1, r0, asr #14
   1673c:	andeq	r6, r1, r0, asr #14
   16740:	cmp	r8, #10
   16744:	beq	16770 <__assert_fail@plt+0x53e4>
   16748:	mov	r1, r8
   1674c:	movw	r0, #47500	; 0xb98c
   16750:	movt	r0, #1
   16754:	bl	1656c <__assert_fail@plt+0x51e0>
   16758:	mov	r1, r8
   1675c:	str	r0, [sp, #164]	; 0xa4
   16760:	movw	r0, #47496	; 0xb988
   16764:	movt	r0, #1
   16768:	bl	1656c <__assert_fail@plt+0x51e0>
   1676c:	str	r0, [sp, #168]	; 0xa8
   16770:	cmp	r4, #0
   16774:	movne	r4, #0
   16778:	beq	17b5c <__assert_fail@plt+0x67d0>
   1677c:	mov	r3, #1
   16780:	mov	r5, #0
   16784:	ldr	r0, [sp, #168]	; 0xa8
   16788:	str	r3, [sp, #36]	; 0x24
   1678c:	str	r3, [sp, #40]	; 0x28
   16790:	str	r5, [sp, #68]	; 0x44
   16794:	bl	1120c <strlen@plt>
   16798:	ldr	r3, [sp, #168]	; 0xa8
   1679c:	str	r5, [sp, #48]	; 0x30
   167a0:	str	r0, [sp, #56]	; 0x38
   167a4:	str	r3, [sp, #60]	; 0x3c
   167a8:	str	r5, [sp, #72]	; 0x48
   167ac:	str	r8, [sp, #152]	; 0x98
   167b0:	mov	r8, fp
   167b4:	mov	r9, #0
   167b8:	ldr	fp, [sp, #152]	; 0x98
   167bc:	ldr	r3, [sp, #28]
   167c0:	cmn	r3, #1
   167c4:	beq	16d24 <__assert_fail@plt+0x5998>
   167c8:	ldr	r3, [sp, #28]
   167cc:	subs	r6, r3, r9
   167d0:	movne	r6, #1
   167d4:	cmp	r6, #0
   167d8:	beq	16d3c <__assert_fail@plt+0x59b0>
   167dc:	ldr	r0, [sp, #32]
   167e0:	ldr	r7, [sp, #40]	; 0x28
   167e4:	add	r3, r0, r9
   167e8:	cmp	fp, #2
   167ec:	moveq	r7, #0
   167f0:	andne	r7, r7, #1
   167f4:	str	r3, [sp, #52]	; 0x34
   167f8:	cmp	r7, #0
   167fc:	beq	171d8 <__assert_fail@plt+0x5e4c>
   16800:	ldr	r2, [sp, #56]	; 0x38
   16804:	cmp	r2, #0
   16808:	beq	17474 <__assert_fail@plt+0x60e8>
   1680c:	ldr	r1, [sp, #28]
   16810:	cmp	r2, #1
   16814:	mov	r3, r2
   16818:	movls	r3, #0
   1681c:	movhi	r3, #1
   16820:	add	r5, r9, r2
   16824:	cmn	r1, #1
   16828:	movne	r3, #0
   1682c:	cmp	r3, #0
   16830:	beq	1683c <__assert_fail@plt+0x54b0>
   16834:	bl	1120c <strlen@plt>
   16838:	str	r0, [sp, #28]
   1683c:	ldr	r3, [sp, #28]
   16840:	cmp	r5, r3
   16844:	bhi	17474 <__assert_fail@plt+0x60e8>
   16848:	ldr	r0, [sp, #52]	; 0x34
   1684c:	ldr	r2, [sp, #56]	; 0x38
   16850:	ldr	r1, [sp, #60]	; 0x3c
   16854:	bl	110e0 <memcmp@plt>
   16858:	cmp	r0, #0
   1685c:	bne	17474 <__assert_fail@plt+0x60e8>
   16860:	ldr	r3, [sp, #44]	; 0x2c
   16864:	cmp	r3, #0
   16868:	bne	17da4 <__assert_fail@plt+0x6a18>
   1686c:	ldr	r3, [sp, #52]	; 0x34
   16870:	ldrb	r5, [r3]
   16874:	cmp	r5, #126	; 0x7e
   16878:	ldrls	pc, [pc, r5, lsl #2]
   1687c:	b	17134 <__assert_fail@plt+0x5da8>
   16880:	andeq	r7, r1, r8, lsr r0
   16884:	andeq	r7, r1, r4, lsr r1
   16888:	andeq	r7, r1, r4, lsr r1
   1688c:	andeq	r7, r1, r4, lsr r1
   16890:	andeq	r7, r1, r4, lsr r1
   16894:	andeq	r7, r1, r4, lsr r1
   16898:	andeq	r7, r1, r4, lsr r1
   1689c:	andeq	r7, r1, ip
   168a0:	andeq	r7, r1, r4
   168a4:	andeq	r6, r1, ip, asr #30
   168a8:	strdeq	r6, [r1], -r8
   168ac:	andeq	r6, r1, r4, asr #30
   168b0:	ldrdeq	r6, [r1], -r4
   168b4:	andeq	r7, r1, r0, lsr #32
   168b8:	andeq	r7, r1, r4, lsr r1
   168bc:	andeq	r7, r1, r4, lsr r1
   168c0:	andeq	r7, r1, r4, lsr r1
   168c4:	andeq	r7, r1, r4, lsr r1
   168c8:	andeq	r7, r1, r4, lsr r1
   168cc:	andeq	r7, r1, r4, lsr r1
   168d0:	andeq	r7, r1, r4, lsr r1
   168d4:	andeq	r7, r1, r4, lsr r1
   168d8:	andeq	r7, r1, r4, lsr r1
   168dc:	andeq	r7, r1, r4, lsr r1
   168e0:	andeq	r7, r1, r4, lsr r1
   168e4:	andeq	r7, r1, r4, lsr r1
   168e8:	andeq	r7, r1, r4, lsr r1
   168ec:	andeq	r7, r1, r4, lsr r1
   168f0:	andeq	r7, r1, r4, lsr r1
   168f4:	andeq	r7, r1, r4, lsr r1
   168f8:	andeq	r7, r1, r4, lsr r1
   168fc:	andeq	r7, r1, r4, lsr r1
   16900:	andeq	r7, r1, r0, lsl r1
   16904:	andeq	r7, r1, r8, lsl r0
   16908:	andeq	r7, r1, r8, lsl r0
   1690c:	strdeq	r7, [r1], -r4
   16910:	andeq	r7, r1, r8, lsl r0
   16914:	andeq	r7, r1, r8, lsr #2
   16918:	andeq	r7, r1, r8, lsl r0
   1691c:	andeq	r6, r1, r4, ror lr
   16920:	andeq	r7, r1, r8, lsl r0
   16924:	andeq	r7, r1, r8, lsl r0
   16928:	andeq	r7, r1, r8, lsl r0
   1692c:	andeq	r7, r1, r8, lsr #2
   16930:	andeq	r7, r1, r8, lsr #2
   16934:	andeq	r7, r1, r8, lsr #2
   16938:	andeq	r7, r1, r8, lsr #2
   1693c:	andeq	r7, r1, r8, lsr #2
   16940:	andeq	r7, r1, r8, lsr #2
   16944:	andeq	r7, r1, r8, lsr #2
   16948:	andeq	r7, r1, r8, lsr #2
   1694c:	andeq	r7, r1, r8, lsr #2
   16950:	andeq	r7, r1, r8, lsr #2
   16954:	andeq	r7, r1, r8, lsr #2
   16958:	andeq	r7, r1, r8, lsr #2
   1695c:	andeq	r7, r1, r8, lsr #2
   16960:	andeq	r7, r1, r8, lsr #2
   16964:	andeq	r7, r1, r8, lsr #2
   16968:	andeq	r7, r1, r8, lsr #2
   1696c:	andeq	r7, r1, r8, lsl r0
   16970:	andeq	r7, r1, r8, lsl r0
   16974:	andeq	r7, r1, r8, lsl r0
   16978:	andeq	r7, r1, r8, lsl r0
   1697c:	andeq	r6, r1, r8, asr #28
   16980:	andeq	r7, r1, r4, lsr r1
   16984:	andeq	r7, r1, r8, lsr #2
   16988:	andeq	r7, r1, r8, lsr #2
   1698c:	andeq	r7, r1, r8, lsr #2
   16990:	andeq	r7, r1, r8, lsr #2
   16994:	andeq	r7, r1, r8, lsr #2
   16998:	andeq	r7, r1, r8, lsr #2
   1699c:	andeq	r7, r1, r8, lsr #2
   169a0:	andeq	r7, r1, r8, lsr #2
   169a4:	andeq	r7, r1, r8, lsr #2
   169a8:	andeq	r7, r1, r8, lsr #2
   169ac:	andeq	r7, r1, r8, lsr #2
   169b0:	andeq	r7, r1, r8, lsr #2
   169b4:	andeq	r7, r1, r8, lsr #2
   169b8:	andeq	r7, r1, r8, lsr #2
   169bc:	andeq	r7, r1, r8, lsr #2
   169c0:	andeq	r7, r1, r8, lsr #2
   169c4:	andeq	r7, r1, r8, lsr #2
   169c8:	andeq	r7, r1, r8, lsr #2
   169cc:	andeq	r7, r1, r8, lsr #2
   169d0:	andeq	r7, r1, r8, lsr #2
   169d4:	andeq	r7, r1, r8, lsr #2
   169d8:	andeq	r7, r1, r8, lsr #2
   169dc:	andeq	r7, r1, r8, lsr #2
   169e0:	andeq	r7, r1, r8, lsr #2
   169e4:	andeq	r7, r1, r8, lsr #2
   169e8:	andeq	r7, r1, r8, lsr #2
   169ec:	andeq	r7, r1, r8, lsl r0
   169f0:	strdeq	r6, [r1], -r0
   169f4:	andeq	r7, r1, r8, lsr #2
   169f8:	andeq	r7, r1, r8, lsl r0
   169fc:	andeq	r7, r1, r8, lsr #2
   16a00:	andeq	r7, r1, r8, lsl r0
   16a04:	andeq	r7, r1, r8, lsr #2
   16a08:	andeq	r7, r1, r8, lsr #2
   16a0c:	andeq	r7, r1, r8, lsr #2
   16a10:	andeq	r7, r1, r8, lsr #2
   16a14:	andeq	r7, r1, r8, lsr #2
   16a18:	andeq	r7, r1, r8, lsr #2
   16a1c:	andeq	r7, r1, r8, lsr #2
   16a20:	andeq	r7, r1, r8, lsr #2
   16a24:	andeq	r7, r1, r8, lsr #2
   16a28:	andeq	r7, r1, r8, lsr #2
   16a2c:	andeq	r7, r1, r8, lsr #2
   16a30:	andeq	r7, r1, r8, lsr #2
   16a34:	andeq	r7, r1, r8, lsr #2
   16a38:	andeq	r7, r1, r8, lsr #2
   16a3c:	andeq	r7, r1, r8, lsr #2
   16a40:	andeq	r7, r1, r8, lsr #2
   16a44:	andeq	r7, r1, r8, lsr #2
   16a48:	andeq	r7, r1, r8, lsr #2
   16a4c:	andeq	r7, r1, r8, lsr #2
   16a50:	andeq	r7, r1, r8, lsr #2
   16a54:	andeq	r7, r1, r8, lsr #2
   16a58:	andeq	r7, r1, r8, lsr #2
   16a5c:	andeq	r7, r1, r8, lsr #2
   16a60:	andeq	r7, r1, r8, lsr #2
   16a64:	andeq	r7, r1, r8, lsr #2
   16a68:	andeq	r7, r1, r8, lsr #2
   16a6c:	andeq	r6, r1, r4, lsl ip
   16a70:	andeq	r7, r1, r8, lsl r0
   16a74:	andeq	r6, r1, r4, lsl ip
   16a78:	strdeq	r7, [r1], -r4
   16a7c:	cmp	r4, #0
   16a80:	moveq	r3, #1
   16a84:	streq	r3, [sp, #40]	; 0x28
   16a88:	beq	1719c <__assert_fail@plt+0x5e10>
   16a8c:	mov	r3, #0
   16a90:	mov	r2, #1
   16a94:	mov	r4, r3
   16a98:	str	r2, [sp, #36]	; 0x24
   16a9c:	str	r2, [sp, #44]	; 0x2c
   16aa0:	str	r2, [sp, #56]	; 0x38
   16aa4:	str	r3, [sp, #68]	; 0x44
   16aa8:	movw	r3, #47496	; 0xb988
   16aac:	movt	r3, #1
   16ab0:	str	r4, [sp, #40]	; 0x28
   16ab4:	mov	r8, #2
   16ab8:	str	r4, [sp, #48]	; 0x30
   16abc:	str	r3, [sp, #60]	; 0x3c
   16ac0:	str	r4, [sp, #72]	; 0x48
   16ac4:	b	167ac <__assert_fail@plt+0x5420>
   16ac8:	cmp	r4, #0
   16acc:	bne	17d18 <__assert_fail@plt+0x698c>
   16ad0:	cmp	sl, #0
   16ad4:	beq	17ad8 <__assert_fail@plt+0x674c>
   16ad8:	mov	r3, #34	; 0x22
   16adc:	mov	r1, r4
   16ae0:	mov	r2, #1
   16ae4:	strb	r3, [fp]
   16ae8:	movw	r3, #47476	; 0xb974
   16aec:	movt	r3, #1
   16af0:	mov	r4, r2
   16af4:	str	r2, [sp, #36]	; 0x24
   16af8:	str	r2, [sp, #40]	; 0x28
   16afc:	str	r1, [sp, #44]	; 0x2c
   16b00:	str	r1, [sp, #48]	; 0x30
   16b04:	str	r2, [sp, #56]	; 0x38
   16b08:	str	r3, [sp, #60]	; 0x3c
   16b0c:	str	r1, [sp, #68]	; 0x44
   16b10:	str	r1, [sp, #72]	; 0x48
   16b14:	b	167ac <__assert_fail@plt+0x5420>
   16b18:	mov	r3, #0
   16b1c:	mov	r4, r8
   16b20:	str	r3, [sp, #40]	; 0x28
   16b24:	str	r3, [sp, #44]	; 0x2c
   16b28:	str	r3, [sp, #48]	; 0x30
   16b2c:	str	r8, [sp, #56]	; 0x38
   16b30:	str	r3, [sp, #60]	; 0x3c
   16b34:	str	r3, [sp, #68]	; 0x44
   16b38:	mov	r3, #1
   16b3c:	str	r3, [sp, #36]	; 0x24
   16b40:	str	r8, [sp, #72]	; 0x48
   16b44:	b	167ac <__assert_fail@plt+0x5420>
   16b48:	mov	r3, #1
   16b4c:	mov	r2, #0
   16b50:	mov	r4, r2
   16b54:	mov	r8, #5
   16b58:	str	r3, [sp, #36]	; 0x24
   16b5c:	str	r3, [sp, #40]	; 0x28
   16b60:	str	r3, [sp, #44]	; 0x2c
   16b64:	str	r2, [sp, #48]	; 0x30
   16b68:	str	r3, [sp, #56]	; 0x38
   16b6c:	movw	r3, #47476	; 0xb974
   16b70:	movt	r3, #1
   16b74:	str	r3, [sp, #60]	; 0x3c
   16b78:	str	r2, [sp, #68]	; 0x44
   16b7c:	str	r2, [sp, #72]	; 0x48
   16b80:	b	167ac <__assert_fail@plt+0x5420>
   16b84:	mov	r3, #0
   16b88:	mov	r2, #1
   16b8c:	mov	r4, r3
   16b90:	str	r2, [sp, #36]	; 0x24
   16b94:	str	r2, [sp, #40]	; 0x28
   16b98:	str	r3, [sp, #44]	; 0x2c
   16b9c:	str	r3, [sp, #48]	; 0x30
   16ba0:	str	r3, [sp, #56]	; 0x38
   16ba4:	str	r3, [sp, #60]	; 0x3c
   16ba8:	str	r3, [sp, #68]	; 0x44
   16bac:	str	r3, [sp, #72]	; 0x48
   16bb0:	b	167ac <__assert_fail@plt+0x5420>
   16bb4:	mov	r2, #1
   16bb8:	mov	r3, #0
   16bbc:	mov	r4, r3
   16bc0:	str	r2, [sp, #36]	; 0x24
   16bc4:	str	r2, [sp, #44]	; 0x2c
   16bc8:	str	r8, [sp, #56]	; 0x38
   16bcc:	str	r3, [sp, #68]	; 0x44
   16bd0:	b	16aa8 <__assert_fail@plt+0x571c>
   16bd4:	mov	r3, #1
   16bd8:	mov	r2, #0
   16bdc:	mov	r4, r2
   16be0:	mov	r8, #2
   16be4:	str	r3, [sp, #36]	; 0x24
   16be8:	str	r3, [sp, #40]	; 0x28
   16bec:	str	r3, [sp, #44]	; 0x2c
   16bf0:	str	r2, [sp, #48]	; 0x30
   16bf4:	str	r3, [sp, #56]	; 0x38
   16bf8:	movw	r3, #47496	; 0xb988
   16bfc:	movt	r3, #1
   16c00:	str	r3, [sp, #60]	; 0x3c
   16c04:	str	r2, [sp, #68]	; 0x44
   16c08:	str	r2, [sp, #72]	; 0x48
   16c0c:	b	167ac <__assert_fail@plt+0x5420>
   16c10:	mov	r7, #0
   16c14:	ldr	r3, [sp, #28]
   16c18:	cmn	r3, #1
   16c1c:	beq	176f4 <__assert_fail@plt+0x6368>
   16c20:	ldr	r3, [sp, #28]
   16c24:	subs	r2, r3, #1
   16c28:	movne	r2, #1
   16c2c:	sub	r3, fp, #2
   16c30:	cmp	r2, #0
   16c34:	clz	r3, r3
   16c38:	lsr	r3, r3, #5
   16c3c:	bne	16c48 <__assert_fail@plt+0x58bc>
   16c40:	cmp	r9, #0
   16c44:	beq	17454 <__assert_fail@plt+0x60c8>
   16c48:	mov	r6, #0
   16c4c:	ldr	r2, [sp, #40]	; 0x28
   16c50:	eor	r2, r2, #1
   16c54:	orrs	r3, r3, r2
   16c58:	bne	16e30 <__assert_fail@plt+0x5aa4>
   16c5c:	ldr	r2, [sp, #160]	; 0xa0
   16c60:	cmp	r2, #0
   16c64:	beq	16c84 <__assert_fail@plt+0x58f8>
   16c68:	ldr	r0, [sp, #160]	; 0xa0
   16c6c:	ubfx	r1, r5, #5, #8
   16c70:	and	r2, r5, #31
   16c74:	ldr	r1, [r0, r1, lsl #2]
   16c78:	lsr	r2, r1, r2
   16c7c:	tst	r2, #1
   16c80:	bne	16c8c <__assert_fail@plt+0x5900>
   16c84:	cmp	r7, #0
   16c88:	beq	16efc <__assert_fail@plt+0x5b70>
   16c8c:	ldr	r2, [sp, #44]	; 0x2c
   16c90:	sub	r3, fp, #2
   16c94:	clz	r3, r3
   16c98:	lsr	r3, r3, #5
   16c9c:	cmp	r2, #0
   16ca0:	bne	17a48 <__assert_fail@plt+0x66bc>
   16ca4:	ldr	r2, [sp, #48]	; 0x30
   16ca8:	eor	r2, r2, #1
   16cac:	ands	r3, r3, r2
   16cb0:	beq	16ce8 <__assert_fail@plt+0x595c>
   16cb4:	cmp	sl, r4
   16cb8:	str	r3, [sp, #48]	; 0x30
   16cbc:	movhi	r2, #39	; 0x27
   16cc0:	strbhi	r2, [r8, r4]
   16cc4:	add	r2, r4, #1
   16cc8:	cmp	sl, r2
   16ccc:	movhi	r1, #36	; 0x24
   16cd0:	strbhi	r1, [r8, r2]
   16cd4:	add	r2, r4, #2
   16cd8:	add	r4, r4, #3
   16cdc:	cmp	sl, r2
   16ce0:	movhi	r1, #39	; 0x27
   16ce4:	strbhi	r1, [r8, r2]
   16ce8:	cmp	r4, sl
   16cec:	add	r9, r9, #1
   16cf0:	movcc	r3, #92	; 0x5c
   16cf4:	strbcc	r3, [r8, r4]
   16cf8:	add	r4, r4, #1
   16cfc:	cmp	r4, sl
   16d00:	ldr	r3, [sp, #36]	; 0x24
   16d04:	strbcc	r5, [r8, r4]
   16d08:	cmp	r6, #0
   16d0c:	add	r4, r4, #1
   16d10:	moveq	r3, #0
   16d14:	str	r3, [sp, #36]	; 0x24
   16d18:	ldr	r3, [sp, #28]
   16d1c:	cmn	r3, #1
   16d20:	bne	167c8 <__assert_fail@plt+0x543c>
   16d24:	ldr	r3, [sp, #32]
   16d28:	ldrb	r6, [r3, r9]
   16d2c:	adds	r6, r6, #0
   16d30:	movne	r6, #1
   16d34:	cmp	r6, #0
   16d38:	bne	167dc <__assert_fail@plt+0x5450>
   16d3c:	str	fp, [sp, #152]	; 0x98
   16d40:	mov	fp, r8
   16d44:	cmp	r4, #0
   16d48:	ldr	r1, [sp, #44]	; 0x2c
   16d4c:	movne	r3, #0
   16d50:	ldr	r8, [sp, #152]	; 0x98
   16d54:	sub	r2, r8, #2
   16d58:	clz	r2, r2
   16d5c:	lsr	r2, r2, #5
   16d60:	andeq	r3, r2, r1
   16d64:	cmp	r3, #0
   16d68:	bne	17e24 <__assert_fail@plt+0x6a98>
   16d6c:	eor	r3, r1, #1
   16d70:	ands	r2, r2, r3
   16d74:	beq	17d50 <__assert_fail@plt+0x69c4>
   16d78:	ldr	r3, [sp, #68]	; 0x44
   16d7c:	cmp	r3, #0
   16d80:	beq	17d54 <__assert_fail@plt+0x69c8>
   16d84:	ldr	r3, [sp, #36]	; 0x24
   16d88:	cmp	r3, #0
   16d8c:	bne	17de0 <__assert_fail@plt+0x6a54>
   16d90:	ldr	r3, [sp, #72]	; 0x48
   16d94:	adds	r3, r3, #0
   16d98:	movne	r3, #1
   16d9c:	cmp	sl, #0
   16da0:	movne	r3, #0
   16da4:	cmp	r3, #0
   16da8:	ldreq	r2, [sp, #68]	; 0x44
   16dac:	beq	17d54 <__assert_fail@plt+0x69c8>
   16db0:	ldr	r2, [sp, #72]	; 0x48
   16db4:	str	r3, [sp, #68]	; 0x44
   16db8:	movw	r3, #47496	; 0xb988
   16dbc:	movt	r3, #1
   16dc0:	mov	r1, #39	; 0x27
   16dc4:	mov	r4, #1
   16dc8:	ldr	sl, [sp, #72]	; 0x48
   16dcc:	mov	r8, #2
   16dd0:	str	r3, [sp, #60]	; 0x3c
   16dd4:	mov	r3, #0
   16dd8:	strb	r1, [fp]
   16ddc:	str	r3, [sp, #44]	; 0x2c
   16de0:	str	r4, [sp, #56]	; 0x38
   16de4:	str	r2, [sp, #72]	; 0x48
   16de8:	b	167ac <__assert_fail@plt+0x5420>
   16dec:	mov	r7, #0
   16df0:	cmp	fp, #2
   16df4:	beq	176d4 <__assert_fail@plt+0x6348>
   16df8:	ldr	r2, [sp, #40]	; 0x28
   16dfc:	ldr	r3, [sp, #56]	; 0x38
   16e00:	ldr	r1, [sp, #44]	; 0x2c
   16e04:	cmp	r3, #0
   16e08:	moveq	r3, #0
   16e0c:	andne	r3, r2, r1
   16e10:	cmp	r3, #0
   16e14:	moveq	r5, #92	; 0x5c
   16e18:	moveq	r3, r5
   16e1c:	bne	176e0 <__assert_fail@plt+0x6354>
   16e20:	ldr	r2, [sp, #40]	; 0x28
   16e24:	cmp	r2, #0
   16e28:	bne	17b1c <__assert_fail@plt+0x6790>
   16e2c:	mov	r6, #0
   16e30:	ldr	r3, [sp, #44]	; 0x2c
   16e34:	cmp	r3, #0
   16e38:	beq	176cc <__assert_fail@plt+0x6340>
   16e3c:	mov	r3, #0
   16e40:	b	16c5c <__assert_fail@plt+0x58d0>
   16e44:	mov	r7, #0
   16e48:	cmp	fp, #2
   16e4c:	beq	17744 <__assert_fail@plt+0x63b8>
   16e50:	cmp	fp, #5
   16e54:	beq	17708 <__assert_fail@plt+0x637c>
   16e58:	sub	r3, fp, #2
   16e5c:	mov	r6, #0
   16e60:	clz	r3, r3
   16e64:	mov	r5, #63	; 0x3f
   16e68:	lsr	r3, r3, #5
   16e6c:	b	16c4c <__assert_fail@plt+0x58c0>
   16e70:	mov	r7, #0
   16e74:	cmp	fp, #2
   16e78:	movne	r3, #0
   16e7c:	movne	r5, #39	; 0x27
   16e80:	strne	r6, [sp, #68]	; 0x44
   16e84:	bne	16c4c <__assert_fail@plt+0x58c0>
   16e88:	ldr	r3, [sp, #44]	; 0x2c
   16e8c:	cmp	r3, #0
   16e90:	bne	17b4c <__assert_fail@plt+0x67c0>
   16e94:	ldr	r3, [sp, #72]	; 0x48
   16e98:	cmp	sl, #0
   16e9c:	clz	r3, r3
   16ea0:	lsr	r3, r3, #5
   16ea4:	moveq	r3, #0
   16ea8:	cmp	r3, #0
   16eac:	bne	17a78 <__assert_fail@plt+0x66ec>
   16eb0:	cmp	sl, r4
   16eb4:	movhi	r3, #39	; 0x27
   16eb8:	strbhi	r3, [r8, r4]
   16ebc:	add	r3, r4, #1
   16ec0:	cmp	sl, r3
   16ec4:	movhi	r2, #92	; 0x5c
   16ec8:	strbhi	r2, [r8, r3]
   16ecc:	add	r3, r4, #2
   16ed0:	cmp	sl, r3
   16ed4:	bls	16ee0 <__assert_fail@plt+0x5b54>
   16ed8:	mov	r2, #39	; 0x27
   16edc:	strb	r2, [r8, r3]
   16ee0:	mov	r3, #0
   16ee4:	cmp	r7, #0
   16ee8:	add	r4, r4, #3
   16eec:	mov	r5, #39	; 0x27
   16ef0:	str	r3, [sp, #48]	; 0x30
   16ef4:	str	r6, [sp, #68]	; 0x44
   16ef8:	bne	16c8c <__assert_fail@plt+0x5900>
   16efc:	ldr	r2, [sp, #48]	; 0x30
   16f00:	eor	r3, r3, #1
   16f04:	add	r9, r9, #1
   16f08:	and	r3, r3, r2
   16f0c:	uxtb	r3, r3
   16f10:	cmp	r3, #0
   16f14:	beq	16cfc <__assert_fail@plt+0x5970>
   16f18:	cmp	sl, r4
   16f1c:	movhi	r3, #39	; 0x27
   16f20:	strbhi	r3, [r8, r4]
   16f24:	add	r3, r4, #1
   16f28:	add	r4, r4, #2
   16f2c:	cmp	sl, r3
   16f30:	movhi	r2, #39	; 0x27
   16f34:	strbhi	r2, [r8, r3]
   16f38:	mov	r3, #0
   16f3c:	str	r3, [sp, #48]	; 0x30
   16f40:	b	16cfc <__assert_fail@plt+0x5970>
   16f44:	mov	r3, #118	; 0x76
   16f48:	b	16e20 <__assert_fail@plt+0x5a94>
   16f4c:	mov	r3, #116	; 0x74
   16f50:	ldr	r2, [sp, #44]	; 0x2c
   16f54:	cmp	fp, #2
   16f58:	movne	r2, #0
   16f5c:	andeq	r2, r2, #1
   16f60:	cmp	r2, #0
   16f64:	beq	16e20 <__assert_fail@plt+0x5a94>
   16f68:	mov	fp, r8
   16f6c:	mov	r8, #2
   16f70:	ldr	r3, [sp, #40]	; 0x28
   16f74:	cmp	r3, #0
   16f78:	movne	r8, #4
   16f7c:	mov	lr, #0
   16f80:	mov	r0, fp
   16f84:	ldr	r2, [sp, #32]
   16f88:	ldr	r3, [sp, #156]	; 0x9c
   16f8c:	ldr	r1, [sp, #164]	; 0xa4
   16f90:	bic	ip, r3, #2
   16f94:	ldr	r3, [sp, #28]
   16f98:	stm	sp, {r8, ip, lr}
   16f9c:	ldr	ip, [sp, #168]	; 0xa8
   16fa0:	str	r1, [sp, #12]
   16fa4:	mov	r1, sl
   16fa8:	str	ip, [sp, #16]
   16fac:	bl	166c4 <__assert_fail@plt+0x5338>
   16fb0:	mov	r4, r0
   16fb4:	mov	r0, r4
   16fb8:	add	sp, sp, #116	; 0x74
   16fbc:	ldrd	r4, [sp]
   16fc0:	ldrd	r6, [sp, #8]
   16fc4:	ldrd	r8, [sp, #16]
   16fc8:	ldrd	sl, [sp, #24]
   16fcc:	add	sp, sp, #32
   16fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   16fd4:	mov	r5, #102	; 0x66
   16fd8:	ldr	r2, [sp, #44]	; 0x2c
   16fdc:	sub	r3, fp, #2
   16fe0:	clz	r3, r3
   16fe4:	lsr	r3, r3, #5
   16fe8:	cmp	r2, #0
   16fec:	bne	17a48 <__assert_fail@plt+0x66bc>
   16ff0:	mov	r6, r2
   16ff4:	b	16ce8 <__assert_fail@plt+0x595c>
   16ff8:	mov	r5, #110	; 0x6e
   16ffc:	mov	r6, #0
   17000:	b	16c8c <__assert_fail@plt+0x5900>
   17004:	mov	r5, #98	; 0x62
   17008:	b	16fd8 <__assert_fail@plt+0x5c4c>
   1700c:	mov	r5, #97	; 0x61
   17010:	b	16fd8 <__assert_fail@plt+0x5c4c>
   17014:	mov	r7, #0
   17018:	mov	r6, #0
   1701c:	b	16e3c <__assert_fail@plt+0x5ab0>
   17020:	mov	r5, #114	; 0x72
   17024:	b	16ffc <__assert_fail@plt+0x5c70>
   17028:	ldr	r3, [sp, #44]	; 0x2c
   1702c:	cmp	r3, #0
   17030:	bne	17dc0 <__assert_fail@plt+0x6a34>
   17034:	mov	r7, r3
   17038:	ldr	r3, [sp, #48]	; 0x30
   1703c:	sub	r2, fp, #2
   17040:	clz	r2, r2
   17044:	lsr	r2, r2, #5
   17048:	eor	r3, r3, #1
   1704c:	ands	r3, r2, r3
   17050:	beq	17a64 <__assert_fail@plt+0x66d8>
   17054:	cmp	sl, r4
   17058:	movhi	r1, #39	; 0x27
   1705c:	strbhi	r1, [r8, r4]
   17060:	add	r1, r4, #1
   17064:	cmp	sl, r1
   17068:	movhi	r0, #36	; 0x24
   1706c:	strbhi	r0, [r8, r1]
   17070:	add	r1, r4, #2
   17074:	cmp	sl, r1
   17078:	movhi	r0, #39	; 0x27
   1707c:	strbhi	r0, [r8, r1]
   17080:	add	r1, r4, #3
   17084:	cmp	sl, r1
   17088:	bls	17abc <__assert_fail@plt+0x6730>
   1708c:	mov	r4, r1
   17090:	mov	r1, #92	; 0x5c
   17094:	mov	r0, r4
   17098:	str	r3, [sp, #48]	; 0x30
   1709c:	strb	r1, [r8, r4]
   170a0:	cmp	fp, #2
   170a4:	add	r4, r4, #1
   170a8:	beq	17b0c <__assert_fail@plt+0x6780>
   170ac:	ldr	r1, [sp, #28]
   170b0:	add	r3, r9, #1
   170b4:	cmp	r3, r1
   170b8:	bcs	170d0 <__assert_fail@plt+0x5d44>
   170bc:	ldr	r1, [sp, #32]
   170c0:	ldrb	r3, [r1, r3]
   170c4:	sub	r3, r3, #48	; 0x30
   170c8:	cmp	r3, #9
   170cc:	bls	17b24 <__assert_fail@plt+0x6798>
   170d0:	mov	r5, #48	; 0x30
   170d4:	ldr	r3, [sp, #40]	; 0x28
   170d8:	eor	r3, r3, #1
   170dc:	orrs	r2, r2, r3
   170e0:	mov	r3, r6
   170e4:	moveq	r6, r2
   170e8:	beq	16c5c <__assert_fail@plt+0x58d0>
   170ec:	mov	r6, #0
   170f0:	b	16c84 <__assert_fail@plt+0x58f8>
   170f4:	cmp	r9, #0
   170f8:	mov	r2, r7
   170fc:	bne	1769c <__assert_fail@plt+0x6310>
   17100:	mov	r6, r7
   17104:	mov	r3, r9
   17108:	mov	r7, r2
   1710c:	b	16c4c <__assert_fail@plt+0x58c0>
   17110:	mov	r2, r7
   17114:	mov	r6, r7
   17118:	mov	r3, #0
   1711c:	mov	r7, r2
   17120:	mov	r5, #32
   17124:	b	16c4c <__assert_fail@plt+0x58c0>
   17128:	mov	r6, r7
   1712c:	b	16e3c <__assert_fail@plt+0x5ab0>
   17130:	mov	r7, #0
   17134:	ldr	r3, [sp, #64]	; 0x40
   17138:	cmp	r3, #1
   1713c:	bne	1775c <__assert_fail@plt+0x63d0>
   17140:	bl	111e8 <__ctype_b_loc@plt>
   17144:	ldr	r2, [r0]
   17148:	sxth	r3, r5
   1714c:	lsl	r3, r3, #1
   17150:	ldr	r1, [sp, #64]	; 0x40
   17154:	ldrh	r3, [r2, r3]
   17158:	mov	ip, r1
   1715c:	and	r3, r3, #16384	; 0x4000
   17160:	cmp	r3, #0
   17164:	ldr	r3, [sp, #40]	; 0x28
   17168:	movne	r6, #1
   1716c:	moveq	r6, #0
   17170:	movne	r2, #0
   17174:	andeq	r2, r3, #1
   17178:	cmp	r2, #0
   1717c:	bne	17aa4 <__assert_fail@plt+0x6718>
   17180:	sub	r3, fp, #2
   17184:	clz	r3, r3
   17188:	lsr	r3, r3, #5
   1718c:	b	16c4c <__assert_fail@plt+0x58c0>
   17190:	cmp	r4, #0
   17194:	bne	17e34 <__assert_fail@plt+0x6aa8>
   17198:	str	r4, [sp, #40]	; 0x28
   1719c:	cmp	sl, #0
   171a0:	bne	17e64 <__assert_fail@plt+0x6ad8>
   171a4:	mov	r3, #1
   171a8:	movw	r2, #47496	; 0xb988
   171ac:	movt	r2, #1
   171b0:	mov	r4, r3
   171b4:	mov	r8, #2
   171b8:	str	r3, [sp, #36]	; 0x24
   171bc:	str	sl, [sp, #44]	; 0x2c
   171c0:	str	sl, [sp, #48]	; 0x30
   171c4:	str	r3, [sp, #56]	; 0x38
   171c8:	str	r2, [sp, #60]	; 0x3c
   171cc:	str	sl, [sp, #68]	; 0x44
   171d0:	str	sl, [sp, #72]	; 0x48
   171d4:	b	167ac <__assert_fail@plt+0x5420>
   171d8:	ldr	r3, [sp, #32]
   171dc:	ldrb	r5, [r3, r9]
   171e0:	cmp	r5, #126	; 0x7e
   171e4:	ldrls	pc, [pc, r5, lsl #2]
   171e8:	b	17134 <__assert_fail@plt+0x5da8>
   171ec:	andeq	r7, r1, r0, lsl r4
   171f0:	andeq	r7, r1, r4, lsr r1
   171f4:	andeq	r7, r1, r4, lsr r1
   171f8:	andeq	r7, r1, r4, lsr r1
   171fc:	andeq	r7, r1, r4, lsr r1
   17200:	andeq	r7, r1, r4, lsr r1
   17204:	andeq	r7, r1, r4, lsr r1
   17208:	andeq	r7, r1, r8, lsl #8
   1720c:	andeq	r7, r1, r0, lsl #8
   17210:	andeq	r6, r1, ip, asr #30
   17214:	strdeq	r7, [r1], -r8
   17218:	andeq	r6, r1, r4, asr #30
   1721c:	strdeq	r7, [r1], -r0
   17220:	andeq	r7, r1, r8, ror #7
   17224:	andeq	r7, r1, r4, lsr r1
   17228:	andeq	r7, r1, r4, lsr r1
   1722c:	andeq	r7, r1, r4, lsr r1
   17230:	andeq	r7, r1, r4, lsr r1
   17234:	andeq	r7, r1, r4, lsr r1
   17238:	andeq	r7, r1, r4, lsr r1
   1723c:	andeq	r7, r1, r4, lsr r1
   17240:	andeq	r7, r1, r4, lsr r1
   17244:	andeq	r7, r1, r4, lsr r1
   17248:	andeq	r7, r1, r4, lsr r1
   1724c:	andeq	r7, r1, r4, lsr r1
   17250:	andeq	r7, r1, r4, lsr r1
   17254:	andeq	r7, r1, r4, lsr r1
   17258:	andeq	r7, r1, r4, lsr r1
   1725c:	andeq	r7, r1, r4, lsr r1
   17260:	andeq	r7, r1, r4, lsr r1
   17264:	andeq	r7, r1, r4, lsr r1
   17268:	andeq	r7, r1, r4, lsr r1
   1726c:	andeq	r7, r1, r4, ror #8
   17270:	andeq	r7, r1, r4, asr #8
   17274:	andeq	r7, r1, r4, asr #8
   17278:	andeq	r7, r1, r4, lsr r4
   1727c:	andeq	r7, r1, r4, asr #8
   17280:	andeq	r7, r1, r0, lsl #3
   17284:	andeq	r7, r1, r4, asr #8
   17288:	andeq	r6, r1, r4, ror lr
   1728c:	andeq	r7, r1, r4, asr #8
   17290:	andeq	r7, r1, r4, asr #8
   17294:	andeq	r7, r1, r4, asr #8
   17298:	andeq	r7, r1, r0, lsl #3
   1729c:	andeq	r7, r1, r0, lsl #3
   172a0:	andeq	r7, r1, r0, lsl #3
   172a4:	andeq	r7, r1, r0, lsl #3
   172a8:	andeq	r7, r1, r0, lsl #3
   172ac:	andeq	r7, r1, r0, lsl #3
   172b0:	andeq	r7, r1, r0, lsl #3
   172b4:	andeq	r7, r1, r0, lsl #3
   172b8:	andeq	r7, r1, r0, lsl #3
   172bc:	andeq	r7, r1, r0, lsl #3
   172c0:	andeq	r7, r1, r0, lsl #3
   172c4:	andeq	r7, r1, r0, lsl #3
   172c8:	andeq	r7, r1, r0, lsl #3
   172cc:	andeq	r7, r1, r0, lsl #3
   172d0:	andeq	r7, r1, r0, lsl #3
   172d4:	andeq	r7, r1, r0, lsl #3
   172d8:	andeq	r7, r1, r4, asr #8
   172dc:	andeq	r7, r1, r4, asr #8
   172e0:	andeq	r7, r1, r4, asr #8
   172e4:	andeq	r7, r1, r4, asr #8
   172e8:	andeq	r6, r1, r8, asr #28
   172ec:	andeq	r7, r1, r4, lsr r1
   172f0:	andeq	r7, r1, r0, lsl #3
   172f4:	andeq	r7, r1, r0, lsl #3
   172f8:	andeq	r7, r1, r0, lsl #3
   172fc:	andeq	r7, r1, r0, lsl #3
   17300:	andeq	r7, r1, r0, lsl #3
   17304:	andeq	r7, r1, r0, lsl #3
   17308:	andeq	r7, r1, r0, lsl #3
   1730c:	andeq	r7, r1, r0, lsl #3
   17310:	andeq	r7, r1, r0, lsl #3
   17314:	andeq	r7, r1, r0, lsl #3
   17318:	andeq	r7, r1, r0, lsl #3
   1731c:	andeq	r7, r1, r0, lsl #3
   17320:	andeq	r7, r1, r0, lsl #3
   17324:	andeq	r7, r1, r0, lsl #3
   17328:	andeq	r7, r1, r0, lsl #3
   1732c:	andeq	r7, r1, r0, lsl #3
   17330:	andeq	r7, r1, r0, lsl #3
   17334:	andeq	r7, r1, r0, lsl #3
   17338:	andeq	r7, r1, r0, lsl #3
   1733c:	andeq	r7, r1, r0, lsl #3
   17340:	andeq	r7, r1, r0, lsl #3
   17344:	andeq	r7, r1, r0, lsl #3
   17348:	andeq	r7, r1, r0, lsl #3
   1734c:	andeq	r7, r1, r0, lsl #3
   17350:	andeq	r7, r1, r0, lsl #3
   17354:	andeq	r7, r1, r0, lsl #3
   17358:	andeq	r7, r1, r4, asr #8
   1735c:	strdeq	r6, [r1], -r0
   17360:	andeq	r7, r1, r0, lsl #3
   17364:	andeq	r7, r1, r4, asr #8
   17368:	andeq	r7, r1, r0, lsl #3
   1736c:	andeq	r7, r1, r4, asr #8
   17370:	andeq	r7, r1, r0, lsl #3
   17374:	andeq	r7, r1, r0, lsl #3
   17378:	andeq	r7, r1, r0, lsl #3
   1737c:	andeq	r7, r1, r0, lsl #3
   17380:	andeq	r7, r1, r0, lsl #3
   17384:	andeq	r7, r1, r0, lsl #3
   17388:	andeq	r7, r1, r0, lsl #3
   1738c:	andeq	r7, r1, r0, lsl #3
   17390:	andeq	r7, r1, r0, lsl #3
   17394:	andeq	r7, r1, r0, lsl #3
   17398:	andeq	r7, r1, r0, lsl #3
   1739c:	andeq	r7, r1, r0, lsl #3
   173a0:	andeq	r7, r1, r0, lsl #3
   173a4:	andeq	r7, r1, r0, lsl #3
   173a8:	andeq	r7, r1, r0, lsl #3
   173ac:	andeq	r7, r1, r0, lsl #3
   173b0:	andeq	r7, r1, r0, lsl #3
   173b4:	andeq	r7, r1, r0, lsl #3
   173b8:	andeq	r7, r1, r0, lsl #3
   173bc:	andeq	r7, r1, r0, lsl #3
   173c0:	andeq	r7, r1, r0, lsl #3
   173c4:	andeq	r7, r1, r0, lsl #3
   173c8:	andeq	r7, r1, r0, lsl #3
   173cc:	andeq	r7, r1, r0, lsl #3
   173d0:	andeq	r7, r1, r0, lsl #3
   173d4:	andeq	r7, r1, r0, lsl #3
   173d8:	andeq	r6, r1, r4, lsl ip
   173dc:	andeq	r7, r1, r4, asr #8
   173e0:	andeq	r6, r1, r4, lsl ip
   173e4:	andeq	r7, r1, r4, lsr r4
   173e8:	mov	r3, #114	; 0x72
   173ec:	b	16f50 <__assert_fail@plt+0x5bc4>
   173f0:	mov	r3, #102	; 0x66
   173f4:	b	16e20 <__assert_fail@plt+0x5a94>
   173f8:	mov	r3, #110	; 0x6e
   173fc:	b	16f50 <__assert_fail@plt+0x5bc4>
   17400:	mov	r3, #98	; 0x62
   17404:	b	16e20 <__assert_fail@plt+0x5a94>
   17408:	mov	r3, #97	; 0x61
   1740c:	b	16e20 <__assert_fail@plt+0x5a94>
   17410:	ldr	r3, [sp, #40]	; 0x28
   17414:	cmp	r3, #0
   17418:	bne	17028 <__assert_fail@plt+0x5c9c>
   1741c:	ldr	r3, [sp, #156]	; 0x9c
   17420:	tst	r3, #1
   17424:	addne	r9, r9, #1
   17428:	bne	167bc <__assert_fail@plt+0x5430>
   1742c:	ldr	r7, [sp, #40]	; 0x28
   17430:	b	16e2c <__assert_fail@plt+0x5aa0>
   17434:	sub	r3, fp, #2
   17438:	clz	r3, r3
   1743c:	lsr	r3, r3, #5
   17440:	b	16c40 <__assert_fail@plt+0x58b4>
   17444:	sub	r3, fp, #2
   17448:	mov	r6, #0
   1744c:	clz	r3, r3
   17450:	lsr	r3, r3, #5
   17454:	ldr	r2, [sp, #44]	; 0x2c
   17458:	tst	r2, r3
   1745c:	beq	16c4c <__assert_fail@plt+0x58c0>
   17460:	b	16f68 <__assert_fail@plt+0x5bdc>
   17464:	sub	r3, fp, #2
   17468:	clz	r3, r3
   1746c:	lsr	r3, r3, #5
   17470:	b	17454 <__assert_fail@plt+0x60c8>
   17474:	ldr	r3, [sp, #52]	; 0x34
   17478:	ldrb	r5, [r3]
   1747c:	cmp	r5, #126	; 0x7e
   17480:	ldrls	pc, [pc, r5, lsl #2]
   17484:	b	17130 <__assert_fail@plt+0x5da4>
   17488:	andeq	r7, r1, r8, lsr #32
   1748c:	andeq	r7, r1, r0, lsr r1
   17490:	andeq	r7, r1, r0, lsr r1
   17494:	andeq	r7, r1, r0, lsr r1
   17498:	andeq	r7, r1, r0, lsr r1
   1749c:	andeq	r7, r1, r0, lsr r1
   174a0:	andeq	r7, r1, r0, lsr r1
   174a4:	andeq	r7, r1, ip
   174a8:	andeq	r7, r1, r4
   174ac:	andeq	r7, r1, r0, asr #13
   174b0:	strdeq	r6, [r1], -r8
   174b4:			; <UNDEFINED> instruction: 0x000176b4
   174b8:	ldrdeq	r6, [r1], -r4
   174bc:	andeq	r7, r1, r0, lsr #32
   174c0:	andeq	r7, r1, r0, lsr r1
   174c4:	andeq	r7, r1, r0, lsr r1
   174c8:	andeq	r7, r1, r0, lsr r1
   174cc:	andeq	r7, r1, r0, lsr r1
   174d0:	andeq	r7, r1, r0, lsr r1
   174d4:	andeq	r7, r1, r0, lsr r1
   174d8:	andeq	r7, r1, r0, lsr r1
   174dc:	andeq	r7, r1, r0, lsr r1
   174e0:	andeq	r7, r1, r0, lsr r1
   174e4:	andeq	r7, r1, r0, lsr r1
   174e8:	andeq	r7, r1, r0, lsr r1
   174ec:	andeq	r7, r1, r0, lsr r1
   174f0:	andeq	r7, r1, r0, lsr r1
   174f4:	andeq	r7, r1, r0, lsr r1
   174f8:	andeq	r7, r1, r0, lsr r1
   174fc:	andeq	r7, r1, r0, lsr r1
   17500:	andeq	r7, r1, r0, lsr r1
   17504:	andeq	r7, r1, r0, lsr r1
   17508:	andeq	r7, r1, ip, lsr #13
   1750c:	andeq	r7, r1, r4, lsl r0
   17510:	andeq	r7, r1, r4, lsl r0
   17514:	muleq	r1, r0, r6
   17518:	andeq	r7, r1, r4, lsl r0
   1751c:	andeq	r7, r1, r4, lsl #13
   17520:	andeq	r7, r1, r4, lsl r0
   17524:	andeq	r6, r1, r0, ror lr
   17528:	andeq	r7, r1, r4, lsl r0
   1752c:	andeq	r7, r1, r4, lsl r0
   17530:	andeq	r7, r1, r4, lsl r0
   17534:	andeq	r7, r1, r4, lsl #13
   17538:	andeq	r7, r1, r4, lsl #13
   1753c:	andeq	r7, r1, r4, lsl #13
   17540:	andeq	r7, r1, r4, lsl #13
   17544:	andeq	r7, r1, r4, lsl #13
   17548:	andeq	r7, r1, r4, lsl #13
   1754c:	andeq	r7, r1, r4, lsl #13
   17550:	andeq	r7, r1, r4, lsl #13
   17554:	andeq	r7, r1, r4, lsl #13
   17558:	andeq	r7, r1, r4, lsl #13
   1755c:	andeq	r7, r1, r4, lsl #13
   17560:	andeq	r7, r1, r4, lsl #13
   17564:	andeq	r7, r1, r4, lsl #13
   17568:	andeq	r7, r1, r4, lsl #13
   1756c:	andeq	r7, r1, r4, lsl #13
   17570:	andeq	r7, r1, r4, lsl #13
   17574:	andeq	r7, r1, r4, lsl r0
   17578:	andeq	r7, r1, r4, lsl r0
   1757c:	andeq	r7, r1, r4, lsl r0
   17580:	andeq	r7, r1, r4, lsl r0
   17584:	andeq	r6, r1, r4, asr #28
   17588:	andeq	r7, r1, r0, lsr r1
   1758c:	andeq	r7, r1, r4, lsl #13
   17590:	andeq	r7, r1, r4, lsl #13
   17594:	andeq	r7, r1, r4, lsl #13
   17598:	andeq	r7, r1, r4, lsl #13
   1759c:	andeq	r7, r1, r4, lsl #13
   175a0:	andeq	r7, r1, r4, lsl #13
   175a4:	andeq	r7, r1, r4, lsl #13
   175a8:	andeq	r7, r1, r4, lsl #13
   175ac:	andeq	r7, r1, r4, lsl #13
   175b0:	andeq	r7, r1, r4, lsl #13
   175b4:	andeq	r7, r1, r4, lsl #13
   175b8:	andeq	r7, r1, r4, lsl #13
   175bc:	andeq	r7, r1, r4, lsl #13
   175c0:	andeq	r7, r1, r4, lsl #13
   175c4:	andeq	r7, r1, r4, lsl #13
   175c8:	andeq	r7, r1, r4, lsl #13
   175cc:	andeq	r7, r1, r4, lsl #13
   175d0:	andeq	r7, r1, r4, lsl #13
   175d4:	andeq	r7, r1, r4, lsl #13
   175d8:	andeq	r7, r1, r4, lsl #13
   175dc:	andeq	r7, r1, r4, lsl #13
   175e0:	andeq	r7, r1, r4, lsl #13
   175e4:	andeq	r7, r1, r4, lsl #13
   175e8:	andeq	r7, r1, r4, lsl #13
   175ec:	andeq	r7, r1, r4, lsl #13
   175f0:	andeq	r7, r1, r4, lsl #13
   175f4:	andeq	r7, r1, r4, lsl r0
   175f8:	andeq	r6, r1, ip, ror #27
   175fc:	andeq	r7, r1, r4, lsl #13
   17600:	andeq	r7, r1, r4, lsl r0
   17604:	andeq	r7, r1, r4, lsl #13
   17608:	andeq	r7, r1, r4, lsl r0
   1760c:	andeq	r7, r1, r4, lsl #13
   17610:	andeq	r7, r1, r4, lsl #13
   17614:	andeq	r7, r1, r4, lsl #13
   17618:	andeq	r7, r1, r4, lsl #13
   1761c:	andeq	r7, r1, r4, lsl #13
   17620:	andeq	r7, r1, r4, lsl #13
   17624:	andeq	r7, r1, r4, lsl #13
   17628:	andeq	r7, r1, r4, lsl #13
   1762c:	andeq	r7, r1, r4, lsl #13
   17630:	andeq	r7, r1, r4, lsl #13
   17634:	andeq	r7, r1, r4, lsl #13
   17638:	andeq	r7, r1, r4, lsl #13
   1763c:	andeq	r7, r1, r4, lsl #13
   17640:	andeq	r7, r1, r4, lsl #13
   17644:	andeq	r7, r1, r4, lsl #13
   17648:	andeq	r7, r1, r4, lsl #13
   1764c:	andeq	r7, r1, r4, lsl #13
   17650:	andeq	r7, r1, r4, lsl #13
   17654:	andeq	r7, r1, r4, lsl #13
   17658:	andeq	r7, r1, r4, lsl #13
   1765c:	andeq	r7, r1, r4, lsl #13
   17660:	andeq	r7, r1, r4, lsl #13
   17664:	andeq	r7, r1, r4, lsl #13
   17668:	andeq	r7, r1, r4, lsl #13
   1766c:	andeq	r7, r1, r4, lsl #13
   17670:	andeq	r7, r1, r4, lsl #13
   17674:	andeq	r6, r1, r0, lsl ip
   17678:	andeq	r7, r1, r4, lsl r0
   1767c:	andeq	r6, r1, r0, lsl ip
   17680:	muleq	r1, r0, r6
   17684:	mov	r6, r7
   17688:	mov	r7, #0
   1768c:	b	16e3c <__assert_fail@plt+0x5ab0>
   17690:	cmp	r9, #0
   17694:	mov	r2, #0
   17698:	beq	17100 <__assert_fail@plt+0x5d74>
   1769c:	mov	r6, #0
   176a0:	mov	r7, r2
   176a4:	mov	r3, r6
   176a8:	b	16c5c <__assert_fail@plt+0x58d0>
   176ac:	mov	r2, #0
   176b0:	b	17114 <__assert_fail@plt+0x5d88>
   176b4:	mov	r7, #0
   176b8:	mov	r3, #118	; 0x76
   176bc:	b	16e20 <__assert_fail@plt+0x5a94>
   176c0:	mov	r7, #0
   176c4:	mov	r3, #116	; 0x74
   176c8:	b	16f50 <__assert_fail@plt+0x5bc4>
   176cc:	ldr	r3, [sp, #44]	; 0x2c
   176d0:	b	16c84 <__assert_fail@plt+0x58f8>
   176d4:	ldr	r3, [sp, #44]	; 0x2c
   176d8:	cmp	r3, #0
   176dc:	bne	17b4c <__assert_fail@plt+0x67c0>
   176e0:	add	r9, r9, #1
   176e4:	mov	r6, #0
   176e8:	ldr	r3, [sp, #48]	; 0x30
   176ec:	mov	r5, #92	; 0x5c
   176f0:	b	16f10 <__assert_fail@plt+0x5b84>
   176f4:	ldr	r3, [sp, #32]
   176f8:	ldrb	r2, [r3, #1]
   176fc:	adds	r2, r2, #0
   17700:	movne	r2, #1
   17704:	b	16c2c <__assert_fail@plt+0x58a0>
   17708:	ldr	r3, [sp, #156]	; 0x9c
   1770c:	ands	r3, r3, #4
   17710:	beq	17738 <__assert_fail@plt+0x63ac>
   17714:	ldr	r2, [sp, #28]
   17718:	add	r3, r9, #2
   1771c:	cmp	r3, r2
   17720:	bcs	17734 <__assert_fail@plt+0x63a8>
   17724:	ldr	r2, [sp, #52]	; 0x34
   17728:	ldrb	r5, [r2, #1]
   1772c:	cmp	r5, #63	; 0x3f
   17730:	beq	17bb0 <__assert_fail@plt+0x6824>
   17734:	mov	r3, #0
   17738:	mov	r5, #63	; 0x3f
   1773c:	mov	r6, r3
   17740:	b	16c4c <__assert_fail@plt+0x58c0>
   17744:	ldr	r3, [sp, #44]	; 0x2c
   17748:	cmp	r3, #0
   1774c:	bne	17b4c <__assert_fail@plt+0x67c0>
   17750:	mov	r6, r3
   17754:	mov	r5, #63	; 0x3f
   17758:	b	16c84 <__assert_fail@plt+0x58f8>
   1775c:	ldr	r1, [sp, #28]
   17760:	mov	r2, #0
   17764:	mov	r3, #0
   17768:	strd	r2, [sp, #104]	; 0x68
   1776c:	cmn	r1, #1
   17770:	bne	17780 <__assert_fail@plt+0x63f4>
   17774:	ldr	r0, [sp, #32]
   17778:	bl	1120c <strlen@plt>
   1777c:	str	r0, [sp, #28]
   17780:	str	r8, [sp, #76]	; 0x4c
   17784:	mov	r3, #0
   17788:	str	sl, [sp, #80]	; 0x50
   1778c:	ldr	sl, [sp, #32]
   17790:	str	r5, [sp, #84]	; 0x54
   17794:	mov	r5, r3
   17798:	ldr	r8, [sp, #44]	; 0x2c
   1779c:	str	r7, [sp, #88]	; 0x58
   177a0:	str	r4, [sp, #92]	; 0x5c
   177a4:	ldr	r2, [sp, #28]
   177a8:	add	r4, r9, r5
   177ac:	add	r3, sp, #104	; 0x68
   177b0:	add	r7, sl, r4
   177b4:	add	r0, sp, #100	; 0x64
   177b8:	mov	r1, r7
   177bc:	sub	r2, r2, r4
   177c0:	bl	1a2fc <__assert_fail@plt+0x8f70>
   177c4:	subs	r1, r0, #0
   177c8:	beq	17814 <__assert_fail@plt+0x6488>
   177cc:	cmn	r1, #1
   177d0:	beq	17b8c <__assert_fail@plt+0x6800>
   177d4:	cmn	r1, #2
   177d8:	beq	17cac <__assert_fail@plt+0x6920>
   177dc:	cmp	fp, #2
   177e0:	movne	r3, #0
   177e4:	andeq	r3, r8, #1
   177e8:	cmp	r3, #0
   177ec:	bne	17978 <__assert_fail@plt+0x65ec>
   177f0:	ldr	r0, [sp, #100]	; 0x64
   177f4:	add	r5, r5, r1
   177f8:	bl	11134 <iswprint@plt>
   177fc:	cmp	r0, #0
   17800:	add	r0, sp, #104	; 0x68
   17804:	moveq	r6, #0
   17808:	bl	110d4 <mbsinit@plt>
   1780c:	cmp	r0, #0
   17810:	beq	177a4 <__assert_fail@plt+0x6418>
   17814:	ldr	r3, [sp, #40]	; 0x28
   17818:	mov	ip, r5
   1781c:	eor	r2, r6, #1
   17820:	ldr	r8, [sp, #76]	; 0x4c
   17824:	ldr	sl, [sp, #80]	; 0x50
   17828:	and	r2, r2, r3
   1782c:	ldr	r5, [sp, #84]	; 0x54
   17830:	ldr	r7, [sp, #88]	; 0x58
   17834:	ldr	r4, [sp, #92]	; 0x5c
   17838:	cmp	ip, #1
   1783c:	bls	17178 <__assert_fail@plt+0x5dec>
   17840:	add	r1, ip, r9
   17844:	mov	r0, #39	; 0x27
   17848:	ldr	lr, [sp, #52]	; 0x34
   1784c:	mov	ip, #0
   17850:	str	r6, [sp, #52]	; 0x34
   17854:	ldr	r6, [sp, #48]	; 0x30
   17858:	b	17914 <__assert_fail@plt+0x6588>
   1785c:	ldr	ip, [sp, #44]	; 0x2c
   17860:	sub	r3, fp, #2
   17864:	clz	r3, r3
   17868:	lsr	r3, r3, #5
   1786c:	cmp	ip, #0
   17870:	bne	17a84 <__assert_fail@plt+0x66f8>
   17874:	eor	ip, r6, #1
   17878:	ands	r3, r3, ip
   1787c:	beq	178ac <__assert_fail@plt+0x6520>
   17880:	cmp	sl, r4
   17884:	add	ip, r4, #1
   17888:	strbhi	r0, [r8, r4]
   1788c:	cmp	sl, ip
   17890:	movhi	r6, #36	; 0x24
   17894:	strbhi	r6, [r8, ip]
   17898:	add	ip, r4, #2
   1789c:	mov	r6, r3
   178a0:	cmp	sl, ip
   178a4:	add	r4, r4, #3
   178a8:	strbhi	r0, [r8, ip]
   178ac:	cmp	sl, r4
   178b0:	movhi	r3, #92	; 0x5c
   178b4:	strbhi	r3, [r8, r4]
   178b8:	add	r3, r4, #1
   178bc:	cmp	sl, r3
   178c0:	bls	178d0 <__assert_fail@plt+0x6544>
   178c4:	lsr	ip, r5, #6
   178c8:	add	ip, ip, #48	; 0x30
   178cc:	strb	ip, [r8, r3]
   178d0:	add	r3, r4, #2
   178d4:	cmp	sl, r3
   178d8:	bls	178e8 <__assert_fail@plt+0x655c>
   178dc:	ubfx	ip, r5, #3, #3
   178e0:	add	ip, ip, #48	; 0x30
   178e4:	strb	ip, [r8, r3]
   178e8:	add	r9, r9, #1
   178ec:	and	r5, r5, #7
   178f0:	cmp	r9, r1
   178f4:	add	r5, r5, #48	; 0x30
   178f8:	add	r4, r4, #3
   178fc:	bcs	17ab0 <__assert_fail@plt+0x6724>
   17900:	mov	ip, r2
   17904:	cmp	sl, r4
   17908:	strbhi	r5, [r8, r4]
   1790c:	add	r4, r4, #1
   17910:	ldrb	r5, [lr, #1]!
   17914:	cmp	r2, #0
   17918:	bne	1785c <__assert_fail@plt+0x64d0>
   1791c:	eor	r3, ip, #1
   17920:	cmp	r7, #0
   17924:	and	r3, r3, r6
   17928:	uxtb	r3, r3
   1792c:	beq	17940 <__assert_fail@plt+0x65b4>
   17930:	cmp	sl, r4
   17934:	movhi	r7, #92	; 0x5c
   17938:	strbhi	r7, [r8, r4]
   1793c:	add	r4, r4, #1
   17940:	add	r9, r9, #1
   17944:	cmp	r9, r1
   17948:	bcs	17a98 <__assert_fail@plt+0x670c>
   1794c:	cmp	r3, #0
   17950:	beq	17ad0 <__assert_fail@plt+0x6744>
   17954:	cmp	sl, r4
   17958:	add	r3, r4, #1
   1795c:	mov	r7, #0
   17960:	strbhi	r0, [r8, r4]
   17964:	cmp	sl, r3
   17968:	add	r4, r4, #2
   1796c:	mov	r6, r7
   17970:	strbhi	r0, [r8, r3]
   17974:	b	17904 <__assert_fail@plt+0x6578>
   17978:	cmp	r1, #1
   1797c:	beq	177f0 <__assert_fail@plt+0x6464>
   17980:	add	r2, r4, #1
   17984:	add	r3, sl, r1
   17988:	add	r2, sl, r2
   1798c:	add	r4, r3, r4
   17990:	ldrb	r3, [r2], #1
   17994:	sub	r3, r3, #91	; 0x5b
   17998:	cmp	r3, #33	; 0x21
   1799c:	ldrls	pc, [pc, r3, lsl #2]
   179a0:	b	17a2c <__assert_fail@plt+0x66a0>
   179a4:	andeq	r7, r1, r8, lsr sl
   179a8:	andeq	r7, r1, r8, lsr sl
   179ac:	andeq	r7, r1, ip, lsr #20
   179b0:	andeq	r7, r1, r8, lsr sl
   179b4:	andeq	r7, r1, ip, lsr #20
   179b8:	andeq	r7, r1, r8, lsr sl
   179bc:	andeq	r7, r1, ip, lsr #20
   179c0:	andeq	r7, r1, ip, lsr #20
   179c4:	andeq	r7, r1, ip, lsr #20
   179c8:	andeq	r7, r1, ip, lsr #20
   179cc:	andeq	r7, r1, ip, lsr #20
   179d0:	andeq	r7, r1, ip, lsr #20
   179d4:	andeq	r7, r1, ip, lsr #20
   179d8:	andeq	r7, r1, ip, lsr #20
   179dc:	andeq	r7, r1, ip, lsr #20
   179e0:	andeq	r7, r1, ip, lsr #20
   179e4:	andeq	r7, r1, ip, lsr #20
   179e8:	andeq	r7, r1, ip, lsr #20
   179ec:	andeq	r7, r1, ip, lsr #20
   179f0:	andeq	r7, r1, ip, lsr #20
   179f4:	andeq	r7, r1, ip, lsr #20
   179f8:	andeq	r7, r1, ip, lsr #20
   179fc:	andeq	r7, r1, ip, lsr #20
   17a00:	andeq	r7, r1, ip, lsr #20
   17a04:	andeq	r7, r1, ip, lsr #20
   17a08:	andeq	r7, r1, ip, lsr #20
   17a0c:	andeq	r7, r1, ip, lsr #20
   17a10:	andeq	r7, r1, ip, lsr #20
   17a14:	andeq	r7, r1, ip, lsr #20
   17a18:	andeq	r7, r1, ip, lsr #20
   17a1c:	andeq	r7, r1, ip, lsr #20
   17a20:	andeq	r7, r1, ip, lsr #20
   17a24:	andeq	r7, r1, ip, lsr #20
   17a28:	andeq	r7, r1, r8, lsr sl
   17a2c:	cmp	r4, r2
   17a30:	bne	17990 <__assert_fail@plt+0x6604>
   17a34:	b	177f0 <__assert_fail@plt+0x6464>
   17a38:	mov	r8, #2
   17a3c:	ldr	fp, [sp, #76]	; 0x4c
   17a40:	ldr	sl, [sp, #80]	; 0x50
   17a44:	b	16f70 <__assert_fail@plt+0x5be4>
   17a48:	ldr	r2, [sp, #40]	; 0x28
   17a4c:	str	fp, [sp, #152]	; 0x98
   17a50:	mov	fp, r8
   17a54:	ldr	r8, [sp, #152]	; 0x98
   17a58:	and	r2, r2, r3
   17a5c:	str	r2, [sp, #40]	; 0x28
   17a60:	b	16f70 <__assert_fail@plt+0x5be4>
   17a64:	cmp	sl, r4
   17a68:	movls	r0, r4
   17a6c:	bls	170a0 <__assert_fail@plt+0x5d14>
   17a70:	ldr	r3, [sp, #48]	; 0x30
   17a74:	b	17090 <__assert_fail@plt+0x5d04>
   17a78:	str	sl, [sp, #72]	; 0x48
   17a7c:	ldr	sl, [sp, #44]	; 0x2c
   17a80:	b	16ee0 <__assert_fail@plt+0x5b54>
   17a84:	str	r3, [sp, #40]	; 0x28
   17a88:	str	fp, [sp, #152]	; 0x98
   17a8c:	mov	fp, r8
   17a90:	ldr	r8, [sp, #152]	; 0x98
   17a94:	b	16f70 <__assert_fail@plt+0x5be4>
   17a98:	str	r6, [sp, #48]	; 0x30
   17a9c:	ldr	r6, [sp, #52]	; 0x34
   17aa0:	b	16f10 <__assert_fail@plt+0x5b84>
   17aa4:	mov	r6, #0
   17aa8:	ldr	r2, [sp, #40]	; 0x28
   17aac:	b	17840 <__assert_fail@plt+0x64b4>
   17ab0:	str	r6, [sp, #48]	; 0x30
   17ab4:	ldr	r6, [sp, #52]	; 0x34
   17ab8:	b	16cfc <__assert_fail@plt+0x5970>
   17abc:	add	r4, r4, #4
   17ac0:	mov	r6, #0
   17ac4:	str	r3, [sp, #48]	; 0x30
   17ac8:	mov	r5, #48	; 0x30
   17acc:	b	16c84 <__assert_fail@plt+0x58f8>
   17ad0:	mov	r7, r3
   17ad4:	b	17904 <__assert_fail@plt+0x6578>
   17ad8:	mov	r3, #1
   17adc:	movw	r2, #47476	; 0xb974
   17ae0:	movt	r2, #1
   17ae4:	mov	r4, r3
   17ae8:	str	r3, [sp, #36]	; 0x24
   17aec:	str	r3, [sp, #40]	; 0x28
   17af0:	str	sl, [sp, #44]	; 0x2c
   17af4:	str	sl, [sp, #48]	; 0x30
   17af8:	str	r3, [sp, #56]	; 0x38
   17afc:	str	r2, [sp, #60]	; 0x3c
   17b00:	str	sl, [sp, #68]	; 0x44
   17b04:	str	sl, [sp, #72]	; 0x48
   17b08:	b	167ac <__assert_fail@plt+0x5420>
   17b0c:	mov	r3, r6
   17b10:	mov	r5, #48	; 0x30
   17b14:	mov	r6, #0
   17b18:	b	16c84 <__assert_fail@plt+0x58f8>
   17b1c:	mov	r5, r3
   17b20:	b	16ffc <__assert_fail@plt+0x5c70>
   17b24:	cmp	sl, r4
   17b28:	mov	r5, #48	; 0x30
   17b2c:	movhi	r3, #48	; 0x30
   17b30:	strbhi	r3, [r8, r4]
   17b34:	add	r3, r0, #2
   17b38:	add	r4, r0, #3
   17b3c:	cmp	sl, r3
   17b40:	movhi	r1, #48	; 0x30
   17b44:	strbhi	r1, [r8, r3]
   17b48:	b	170d4 <__assert_fail@plt+0x5d48>
   17b4c:	str	fp, [sp, #152]	; 0x98
   17b50:	mov	fp, r8
   17b54:	ldr	r8, [sp, #152]	; 0x98
   17b58:	b	16f70 <__assert_fail@plt+0x5be4>
   17b5c:	ldr	r3, [sp, #164]	; 0xa4
   17b60:	ldrb	r3, [r3]
   17b64:	cmp	r3, #0
   17b68:	beq	1677c <__assert_fail@plt+0x53f0>
   17b6c:	ldr	r2, [sp, #164]	; 0xa4
   17b70:	cmp	sl, r4
   17b74:	strbhi	r3, [fp, r4]
   17b78:	add	r4, r4, #1
   17b7c:	ldrb	r3, [r2, #1]!
   17b80:	cmp	r3, #0
   17b84:	bne	17b70 <__assert_fail@plt+0x67e4>
   17b88:	b	1677c <__assert_fail@plt+0x53f0>
   17b8c:	mov	ip, r5
   17b90:	mov	r6, #0
   17b94:	ldr	r2, [sp, #40]	; 0x28
   17b98:	ldr	r8, [sp, #76]	; 0x4c
   17b9c:	ldr	sl, [sp, #80]	; 0x50
   17ba0:	ldr	r5, [sp, #84]	; 0x54
   17ba4:	ldr	r7, [sp, #88]	; 0x58
   17ba8:	ldr	r4, [sp, #92]	; 0x5c
   17bac:	b	17838 <__assert_fail@plt+0x64ac>
   17bb0:	ldr	r2, [sp, #32]
   17bb4:	ldrb	r1, [r2, r3]
   17bb8:	sub	r2, r1, #33	; 0x21
   17bbc:	cmp	r2, #29
   17bc0:	ldrls	pc, [pc, r2, lsl #2]
   17bc4:	b	17ca0 <__assert_fail@plt+0x6914>
   17bc8:	andeq	r7, r1, r0, asr #24
   17bcc:	andeq	r7, r1, r0, lsr #25
   17bd0:	andeq	r7, r1, r0, lsr #25
   17bd4:	andeq	r7, r1, r0, lsr #25
   17bd8:	andeq	r7, r1, r0, lsr #25
   17bdc:	andeq	r7, r1, r0, lsr #25
   17be0:	andeq	r7, r1, r0, asr #24
   17be4:	andeq	r7, r1, r0, asr #24
   17be8:	andeq	r7, r1, r0, asr #24
   17bec:	andeq	r7, r1, r0, lsr #25
   17bf0:	andeq	r7, r1, r0, lsr #25
   17bf4:	andeq	r7, r1, r0, lsr #25
   17bf8:	andeq	r7, r1, r0, asr #24
   17bfc:	andeq	r7, r1, r0, lsr #25
   17c00:	andeq	r7, r1, r0, asr #24
   17c04:	andeq	r7, r1, r0, lsr #25
   17c08:	andeq	r7, r1, r0, lsr #25
   17c0c:	andeq	r7, r1, r0, lsr #25
   17c10:	andeq	r7, r1, r0, lsr #25
   17c14:	andeq	r7, r1, r0, lsr #25
   17c18:	andeq	r7, r1, r0, lsr #25
   17c1c:	andeq	r7, r1, r0, lsr #25
   17c20:	andeq	r7, r1, r0, lsr #25
   17c24:	andeq	r7, r1, r0, lsr #25
   17c28:	andeq	r7, r1, r0, lsr #25
   17c2c:	andeq	r7, r1, r0, lsr #25
   17c30:	andeq	r7, r1, r0, lsr #25
   17c34:	andeq	r7, r1, r0, asr #24
   17c38:	andeq	r7, r1, r0, asr #24
   17c3c:	andeq	r7, r1, r0, asr #24
   17c40:	ldr	r2, [sp, #44]	; 0x2c
   17c44:	cmp	r2, #0
   17c48:	bne	17da4 <__assert_fail@plt+0x6a18>
   17c4c:	cmp	sl, r4
   17c50:	mov	r5, r1
   17c54:	movhi	r2, #63	; 0x3f
   17c58:	mov	r9, r3
   17c5c:	strbhi	r2, [r8, r4]
   17c60:	add	r2, r4, #1
   17c64:	cmp	sl, r2
   17c68:	movhi	r0, #34	; 0x22
   17c6c:	strbhi	r0, [r8, r2]
   17c70:	add	r2, r4, #2
   17c74:	cmp	sl, r2
   17c78:	movhi	r0, #34	; 0x22
   17c7c:	strbhi	r0, [r8, r2]
   17c80:	add	r2, r4, #3
   17c84:	add	r4, r4, #4
   17c88:	cmp	sl, r2
   17c8c:	movhi	r0, #63	; 0x3f
   17c90:	strbhi	r0, [r8, r2]
   17c94:	mov	r2, #0
   17c98:	mov	r6, r2
   17c9c:	b	170d4 <__assert_fail@plt+0x5d48>
   17ca0:	mov	r3, #0
   17ca4:	mov	r6, r3
   17ca8:	b	16c4c <__assert_fail@plt+0x58c0>
   17cac:	ldr	r0, [sp, #28]
   17cb0:	mov	r1, r4
   17cb4:	mov	r2, r7
   17cb8:	mov	r3, r5
   17cbc:	mov	ip, r5
   17cc0:	ldr	r8, [sp, #76]	; 0x4c
   17cc4:	ldr	sl, [sp, #80]	; 0x50
   17cc8:	cmp	r1, r0
   17ccc:	ldr	r5, [sp, #84]	; 0x54
   17cd0:	ldr	r7, [sp, #88]	; 0x58
   17cd4:	ldr	r4, [sp, #92]	; 0x5c
   17cd8:	bcs	17d0c <__assert_fail@plt+0x6980>
   17cdc:	ldrb	r6, [r2]
   17ce0:	cmp	r6, #0
   17ce4:	bne	17cf8 <__assert_fail@plt+0x696c>
   17ce8:	b	17e2c <__assert_fail@plt+0x6aa0>
   17cec:	ldrb	r6, [r2, #1]!
   17cf0:	cmp	r6, #0
   17cf4:	beq	17db4 <__assert_fail@plt+0x6a28>
   17cf8:	add	r3, r3, #1
   17cfc:	add	r1, r9, r3
   17d00:	cmp	r1, r0
   17d04:	bcc	17cec <__assert_fail@plt+0x6960>
   17d08:	mov	ip, r3
   17d0c:	mov	r6, #0
   17d10:	ldr	r2, [sp, #40]	; 0x28
   17d14:	b	17838 <__assert_fail@plt+0x64ac>
   17d18:	mov	r3, #1
   17d1c:	mov	r2, #0
   17d20:	mov	r4, r2
   17d24:	str	r3, [sp, #36]	; 0x24
   17d28:	str	r3, [sp, #40]	; 0x28
   17d2c:	str	r3, [sp, #44]	; 0x2c
   17d30:	str	r2, [sp, #48]	; 0x30
   17d34:	str	r3, [sp, #56]	; 0x38
   17d38:	movw	r3, #47476	; 0xb974
   17d3c:	movt	r3, #1
   17d40:	str	r3, [sp, #60]	; 0x3c
   17d44:	str	r2, [sp, #68]	; 0x44
   17d48:	str	r2, [sp, #72]	; 0x48
   17d4c:	b	167ac <__assert_fail@plt+0x5420>
   17d50:	mov	r2, r3
   17d54:	ldr	r3, [sp, #60]	; 0x3c
   17d58:	cmp	r3, #0
   17d5c:	moveq	r2, #0
   17d60:	andne	r2, r2, #1
   17d64:	cmp	r2, #0
   17d68:	beq	17d94 <__assert_fail@plt+0x6a08>
   17d6c:	mov	r2, r3
   17d70:	ldrb	r3, [r3]
   17d74:	cmp	r3, #0
   17d78:	beq	17d94 <__assert_fail@plt+0x6a08>
   17d7c:	cmp	sl, r4
   17d80:	strbhi	r3, [fp, r4]
   17d84:	add	r4, r4, #1
   17d88:	ldrb	r3, [r2, #1]!
   17d8c:	cmp	r3, #0
   17d90:	bne	17d7c <__assert_fail@plt+0x69f0>
   17d94:	cmp	sl, r4
   17d98:	movhi	r3, #0
   17d9c:	strbhi	r3, [fp, r4]
   17da0:	b	16fb4 <__assert_fail@plt+0x5c28>
   17da4:	str	fp, [sp, #152]	; 0x98
   17da8:	mov	fp, r8
   17dac:	ldr	r8, [sp, #152]	; 0x98
   17db0:	b	16f7c <__assert_fail@plt+0x5bf0>
   17db4:	mov	ip, r3
   17db8:	ldr	r2, [sp, #40]	; 0x28
   17dbc:	b	17838 <__assert_fail@plt+0x64ac>
   17dc0:	str	fp, [sp, #152]	; 0x98
   17dc4:	mov	fp, r8
   17dc8:	ldr	r8, [sp, #152]	; 0x98
   17dcc:	sub	r3, r8, #2
   17dd0:	clz	r3, r3
   17dd4:	lsr	r3, r3, #5
   17dd8:	str	r3, [sp, #40]	; 0x28
   17ddc:	b	16f70 <__assert_fail@plt+0x5be4>
   17de0:	mov	ip, #5
   17de4:	ldr	r3, [sp, #28]
   17de8:	str	ip, [sp]
   17dec:	ldr	r2, [sp, #156]	; 0x9c
   17df0:	ldr	ip, [sp, #164]	; 0xa4
   17df4:	ldr	r0, [sp, #160]	; 0xa0
   17df8:	str	r2, [sp, #4]
   17dfc:	ldr	r2, [sp, #32]
   17e00:	ldr	r1, [sp, #72]	; 0x48
   17e04:	str	ip, [sp, #12]
   17e08:	ldr	ip, [sp, #168]	; 0xa8
   17e0c:	str	r0, [sp, #8]
   17e10:	mov	r0, fp
   17e14:	str	ip, [sp, #16]
   17e18:	bl	166c4 <__assert_fail@plt+0x5338>
   17e1c:	mov	r4, r0
   17e20:	b	16fb4 <__assert_fail@plt+0x5c28>
   17e24:	mov	r8, #2
   17e28:	b	16f70 <__assert_fail@plt+0x5be4>
   17e2c:	ldr	r2, [sp, #40]	; 0x28
   17e30:	b	17838 <__assert_fail@plt+0x64ac>
   17e34:	mov	r3, #0
   17e38:	mov	r2, #1
   17e3c:	mov	r4, r3
   17e40:	strd	r2, [sp, #36]	; 0x24
   17e44:	strd	r2, [sp, #44]	; 0x2c
   17e48:	str	r2, [sp, #56]	; 0x38
   17e4c:	str	r3, [sp, #68]	; 0x44
   17e50:	str	r3, [sp, #72]	; 0x48
   17e54:	movw	r3, #47496	; 0xb988
   17e58:	movt	r3, #1
   17e5c:	str	r3, [sp, #60]	; 0x3c
   17e60:	b	167ac <__assert_fail@plt+0x5420>
   17e64:	mov	r3, #0
   17e68:	mov	r1, #1
   17e6c:	mov	r2, r3
   17e70:	str	r1, [sp, #36]	; 0x24
   17e74:	str	r3, [sp, #48]	; 0x30
   17e78:	str	sl, [sp, #72]	; 0x48
   17e7c:	b	16db4 <__assert_fail@plt+0x5a28>
   17e80:	bl	11344 <abort@plt>
   17e84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17e88:	mov	r4, r0
   17e8c:	mov	r5, r3
   17e90:	strd	r6, [sp, #8]
   17e94:	movw	r7, #49476	; 0xc144
   17e98:	movt	r7, #2
   17e9c:	strd	r8, [sp, #16]
   17ea0:	strd	sl, [sp, #24]
   17ea4:	mov	sl, r1
   17ea8:	mov	fp, r2
   17eac:	str	lr, [sp, #32]
   17eb0:	sub	sp, sp, #60	; 0x3c
   17eb4:	bl	1123c <__errno_location@plt>
   17eb8:	mov	r8, r0
   17ebc:	cmn	r4, #-2147483647	; 0x80000001
   17ec0:	ldr	r6, [r7]
   17ec4:	movne	r0, #0
   17ec8:	moveq	r0, #1
   17ecc:	ldr	r3, [r8]
   17ed0:	orrs	r0, r0, r4, lsr #31
   17ed4:	str	r3, [sp, #28]
   17ed8:	bne	18068 <__assert_fail@plt+0x6cdc>
   17edc:	ldr	r3, [r7, #4]
   17ee0:	cmp	r3, r4
   17ee4:	bgt	17f44 <__assert_fail@plt+0x6bb8>
   17ee8:	add	r1, r7, #8
   17eec:	sub	r2, r4, r3
   17ef0:	str	r3, [sp, #52]	; 0x34
   17ef4:	cmp	r6, r1
   17ef8:	add	r2, r2, #1
   17efc:	beq	18040 <__assert_fail@plt+0x6cb4>
   17f00:	mov	r1, #8
   17f04:	mov	r0, r6
   17f08:	mvn	r3, #-2147483648	; 0x80000000
   17f0c:	str	r1, [sp]
   17f10:	add	r1, sp, #52	; 0x34
   17f14:	bl	193a0 <__assert_fail@plt+0x8014>
   17f18:	mov	r6, r0
   17f1c:	str	r0, [r7]
   17f20:	ldr	r0, [r7, #4]
   17f24:	mov	r1, #0
   17f28:	ldr	r2, [sp, #52]	; 0x34
   17f2c:	sub	r2, r2, r0
   17f30:	add	r0, r6, r0, lsl #3
   17f34:	lsl	r2, r2, #3
   17f38:	bl	11254 <memset@plt>
   17f3c:	ldr	r3, [sp, #52]	; 0x34
   17f40:	str	r3, [r7, #4]
   17f44:	ldr	r1, [r5, #4]
   17f48:	add	r0, r6, r4, lsl #3
   17f4c:	add	ip, r5, #8
   17f50:	mov	r3, fp
   17f54:	mov	r2, sl
   17f58:	ldr	r7, [r0, #4]
   17f5c:	str	r0, [sp, #36]	; 0x24
   17f60:	str	ip, [sp, #40]	; 0x28
   17f64:	orr	r0, r1, #1
   17f68:	ldr	r9, [r6, r4, lsl #3]
   17f6c:	str	ip, [sp, #8]
   17f70:	ldr	lr, [r5, #44]	; 0x2c
   17f74:	str	r0, [sp, #4]
   17f78:	ldr	ip, [r5]
   17f7c:	mov	r1, r9
   17f80:	str	ip, [sp, #32]
   17f84:	ldr	ip, [r5, #40]	; 0x28
   17f88:	str	ip, [sp, #12]
   17f8c:	ldr	ip, [sp, #32]
   17f90:	str	lr, [sp, #16]
   17f94:	str	r0, [sp, #44]	; 0x2c
   17f98:	mov	r0, r7
   17f9c:	str	ip, [sp]
   17fa0:	bl	166c4 <__assert_fail@plt+0x5338>
   17fa4:	cmp	r9, r0
   17fa8:	bhi	18018 <__assert_fail@plt+0x6c8c>
   17fac:	add	r9, r0, #1
   17fb0:	movw	r3, #49612	; 0xc1cc
   17fb4:	movt	r3, #2
   17fb8:	cmp	r7, r3
   17fbc:	str	r9, [r6, r4, lsl #3]
   17fc0:	beq	17fcc <__assert_fail@plt+0x6c40>
   17fc4:	mov	r0, r7
   17fc8:	bl	12da4 <__assert_fail@plt+0x1a18>
   17fcc:	mov	r0, r9
   17fd0:	bl	191f0 <__assert_fail@plt+0x7e64>
   17fd4:	ldr	ip, [r5]
   17fd8:	mov	r3, fp
   17fdc:	mov	r2, sl
   17fe0:	mov	r1, r9
   17fe4:	mov	r7, r0
   17fe8:	ldr	lr, [sp, #36]	; 0x24
   17fec:	ldr	r4, [r5, #40]	; 0x28
   17ff0:	str	r0, [lr, #4]
   17ff4:	ldr	lr, [r5, #44]	; 0x2c
   17ff8:	str	ip, [sp]
   17ffc:	ldr	ip, [sp, #44]	; 0x2c
   18000:	str	ip, [sp, #4]
   18004:	ldr	ip, [sp, #40]	; 0x28
   18008:	str	r4, [sp, #12]
   1800c:	str	lr, [sp, #16]
   18010:	str	ip, [sp, #8]
   18014:	bl	166c4 <__assert_fail@plt+0x5338>
   18018:	ldr	r3, [sp, #28]
   1801c:	mov	r0, r7
   18020:	str	r3, [r8]
   18024:	add	sp, sp, #60	; 0x3c
   18028:	ldrd	r4, [sp]
   1802c:	ldrd	r6, [sp, #8]
   18030:	ldrd	r8, [sp, #16]
   18034:	ldrd	sl, [sp, #24]
   18038:	add	sp, sp, #32
   1803c:	pop	{pc}		; (ldr pc, [sp], #4)
   18040:	mov	r1, #8
   18044:	mvn	r3, #-2147483648	; 0x80000000
   18048:	str	r1, [sp]
   1804c:	add	r1, sp, #52	; 0x34
   18050:	bl	193a0 <__assert_fail@plt+0x8014>
   18054:	ldrd	r2, [r7, #8]
   18058:	mov	r6, r0
   1805c:	str	r0, [r7]
   18060:	strd	r2, [r0]
   18064:	b	17f20 <__assert_fail@plt+0x6b94>
   18068:	bl	11344 <abort@plt>
   1806c:	strd	r4, [sp, #-16]!
   18070:	mov	r5, r0
   18074:	str	r6, [sp, #8]
   18078:	str	lr, [sp, #12]
   1807c:	bl	1123c <__errno_location@plt>
   18080:	mov	r4, r0
   18084:	cmp	r5, #0
   18088:	ldr	r0, [pc, #32]	; 180b0 <__assert_fail@plt+0x6d24>
   1808c:	mov	r1, #48	; 0x30
   18090:	movne	r0, r5
   18094:	ldr	r6, [r4]
   18098:	bl	19518 <__assert_fail@plt+0x818c>
   1809c:	str	r6, [r4]
   180a0:	ldrd	r4, [sp]
   180a4:	ldr	r6, [sp, #8]
   180a8:	add	sp, sp, #12
   180ac:	pop	{pc}		; (ldr pc, [sp], #4)
   180b0:	andeq	ip, r2, ip, asr #5
   180b4:	ldr	r3, [pc, #12]	; 180c8 <__assert_fail@plt+0x6d3c>
   180b8:	cmp	r0, #0
   180bc:	moveq	r0, r3
   180c0:	ldr	r0, [r0]
   180c4:	bx	lr
   180c8:	andeq	ip, r2, ip, asr #5
   180cc:	ldr	r3, [pc, #12]	; 180e0 <__assert_fail@plt+0x6d54>
   180d0:	cmp	r0, #0
   180d4:	moveq	r0, r3
   180d8:	str	r1, [r0]
   180dc:	bx	lr
   180e0:	andeq	ip, r2, ip, asr #5
   180e4:	ldr	r3, [pc, #52]	; 18120 <__assert_fail@plt+0x6d94>
   180e8:	cmp	r0, #0
   180ec:	push	{lr}		; (str lr, [sp, #-4]!)
   180f0:	lsr	lr, r1, #5
   180f4:	and	r1, r1, #31
   180f8:	moveq	r0, r3
   180fc:	add	r3, r0, #8
   18100:	ldr	ip, [r3, lr, lsl #2]
   18104:	lsr	r0, ip, r1
   18108:	eor	r2, r2, r0
   1810c:	and	r0, r0, #1
   18110:	and	r2, r2, #1
   18114:	eor	r1, ip, r2, lsl r1
   18118:	str	r1, [r3, lr, lsl #2]
   1811c:	pop	{pc}		; (ldr pc, [sp], #4)
   18120:	andeq	ip, r2, ip, asr #5
   18124:	ldr	r3, [pc, #16]	; 1813c <__assert_fail@plt+0x6db0>
   18128:	cmp	r0, #0
   1812c:	movne	r3, r0
   18130:	ldr	r0, [r3, #4]
   18134:	str	r1, [r3, #4]
   18138:	bx	lr
   1813c:	andeq	ip, r2, ip, asr #5
   18140:	ldr	r3, [pc, #48]	; 18178 <__assert_fail@plt+0x6dec>
   18144:	cmp	r0, #0
   18148:	mov	ip, #10
   1814c:	moveq	r0, r3
   18150:	cmp	r2, #0
   18154:	cmpne	r1, #0
   18158:	str	ip, [r0]
   1815c:	beq	1816c <__assert_fail@plt+0x6de0>
   18160:	str	r1, [r0, #40]	; 0x28
   18164:	str	r2, [r0, #44]	; 0x2c
   18168:	bx	lr
   1816c:	str	r4, [sp, #-8]!
   18170:	str	lr, [sp, #4]
   18174:	bl	11344 <abort@plt>
   18178:	andeq	ip, r2, ip, asr #5
   1817c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18180:	strd	r6, [sp, #8]
   18184:	mov	r7, r0
   18188:	mov	r6, r1
   1818c:	strd	r8, [sp, #16]
   18190:	mov	r8, r2
   18194:	mov	r9, r3
   18198:	str	lr, [sp, #24]
   1819c:	sub	sp, sp, #28
   181a0:	ldr	r4, [sp, #56]	; 0x38
   181a4:	ldr	ip, [pc, #104]	; 18214 <__assert_fail@plt+0x6e88>
   181a8:	cmp	r4, #0
   181ac:	moveq	r4, ip
   181b0:	bl	1123c <__errno_location@plt>
   181b4:	ldr	ip, [r4, #44]	; 0x2c
   181b8:	mov	r5, r0
   181bc:	mov	r1, r6
   181c0:	add	lr, r4, #8
   181c4:	mov	r3, r9
   181c8:	ldr	r6, [r5]
   181cc:	mov	r2, r8
   181d0:	mov	r0, r7
   181d4:	str	ip, [sp, #16]
   181d8:	ldr	ip, [r4, #40]	; 0x28
   181dc:	str	lr, [sp, #8]
   181e0:	str	ip, [sp, #12]
   181e4:	ldr	ip, [r4, #4]
   181e8:	str	ip, [sp, #4]
   181ec:	ldr	ip, [r4]
   181f0:	str	ip, [sp]
   181f4:	bl	166c4 <__assert_fail@plt+0x5338>
   181f8:	str	r6, [r5]
   181fc:	add	sp, sp, #28
   18200:	ldrd	r4, [sp]
   18204:	ldrd	r6, [sp, #8]
   18208:	ldrd	r8, [sp, #16]
   1820c:	add	sp, sp, #24
   18210:	pop	{pc}		; (ldr pc, [sp], #4)
   18214:	andeq	ip, r2, ip, asr #5
   18218:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1821c:	cmp	r3, #0
   18220:	ldr	r4, [pc, #220]	; 18304 <__assert_fail@plt+0x6f78>
   18224:	movne	r4, r3
   18228:	strd	r6, [sp, #8]
   1822c:	mov	r6, r2
   18230:	strd	r8, [sp, #16]
   18234:	mov	r9, r0
   18238:	strd	sl, [sp, #24]
   1823c:	mov	sl, r1
   18240:	str	lr, [sp, #32]
   18244:	sub	sp, sp, #44	; 0x2c
   18248:	bl	1123c <__errno_location@plt>
   1824c:	ldr	r5, [r4, #4]
   18250:	mov	r7, r0
   18254:	mov	r1, #0
   18258:	add	r8, r4, #8
   1825c:	mov	r3, sl
   18260:	ldr	ip, [r4, #44]	; 0x2c
   18264:	mov	r2, r9
   18268:	mov	r0, r1
   1826c:	ldr	lr, [r7]
   18270:	cmp	r6, r1
   18274:	orreq	r5, r5, #1
   18278:	str	ip, [sp, #16]
   1827c:	ldr	ip, [r4, #40]	; 0x28
   18280:	stmib	sp, {r5, r8, ip}
   18284:	ldr	ip, [r4]
   18288:	str	lr, [sp, #28]
   1828c:	str	ip, [sp]
   18290:	bl	166c4 <__assert_fail@plt+0x5338>
   18294:	add	r1, r0, #1
   18298:	mov	fp, r0
   1829c:	mov	r0, r1
   182a0:	str	r1, [sp, #36]	; 0x24
   182a4:	bl	191f0 <__assert_fail@plt+0x7e64>
   182a8:	ldr	ip, [r4, #44]	; 0x2c
   182ac:	mov	r3, sl
   182b0:	mov	r2, r9
   182b4:	ldr	r1, [sp, #36]	; 0x24
   182b8:	str	ip, [sp, #16]
   182bc:	ldr	ip, [r4, #40]	; 0x28
   182c0:	str	r0, [sp, #32]
   182c4:	stmib	sp, {r5, r8, ip}
   182c8:	ldr	ip, [r4]
   182cc:	str	ip, [sp]
   182d0:	bl	166c4 <__assert_fail@plt+0x5338>
   182d4:	ldr	lr, [sp, #28]
   182d8:	cmp	r6, #0
   182dc:	ldr	r0, [sp, #32]
   182e0:	str	lr, [r7]
   182e4:	strne	fp, [r6]
   182e8:	add	sp, sp, #44	; 0x2c
   182ec:	ldrd	r4, [sp]
   182f0:	ldrd	r6, [sp, #8]
   182f4:	ldrd	r8, [sp, #16]
   182f8:	ldrd	sl, [sp, #24]
   182fc:	add	sp, sp, #32
   18300:	pop	{pc}		; (ldr pc, [sp], #4)
   18304:	andeq	ip, r2, ip, asr #5
   18308:	mov	r3, r2
   1830c:	mov	r2, #0
   18310:	b	18218 <__assert_fail@plt+0x6e8c>
   18314:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18318:	movw	r5, #49476	; 0xc144
   1831c:	movt	r5, #2
   18320:	ldr	r3, [r5, #4]
   18324:	strd	r6, [sp, #8]
   18328:	str	r8, [sp, #16]
   1832c:	str	lr, [sp, #20]
   18330:	ldr	r7, [r5]
   18334:	cmp	r3, #1
   18338:	ble	1835c <__assert_fail@plt+0x6fd0>
   1833c:	mov	r4, #1
   18340:	add	r6, r7, #4
   18344:	ldr	r0, [r6, r4, lsl #3]
   18348:	add	r4, r4, #1
   1834c:	bl	12da4 <__assert_fail@plt+0x1a18>
   18350:	ldr	r3, [r5, #4]
   18354:	cmp	r3, r4
   18358:	bgt	18344 <__assert_fail@plt+0x6fb8>
   1835c:	ldr	r0, [r7, #4]
   18360:	movw	r4, #49612	; 0xc1cc
   18364:	movt	r4, #2
   18368:	cmp	r0, r4
   1836c:	beq	18380 <__assert_fail@plt+0x6ff4>
   18370:	bl	12da4 <__assert_fail@plt+0x1a18>
   18374:	mov	r3, #256	; 0x100
   18378:	str	r3, [r5, #8]
   1837c:	str	r4, [r5, #12]
   18380:	ldr	r4, [pc, #44]	; 183b4 <__assert_fail@plt+0x7028>
   18384:	cmp	r7, r4
   18388:	beq	18398 <__assert_fail@plt+0x700c>
   1838c:	mov	r0, r7
   18390:	bl	12da4 <__assert_fail@plt+0x1a18>
   18394:	str	r4, [r5]
   18398:	mov	r3, #1
   1839c:	ldrd	r6, [sp, #8]
   183a0:	str	r3, [r5, #4]
   183a4:	ldrd	r4, [sp]
   183a8:	ldr	r8, [sp, #16]
   183ac:	add	sp, sp, #20
   183b0:	pop	{pc}		; (ldr pc, [sp], #4)
   183b4:	andeq	ip, r2, ip, asr #2
   183b8:	ldr	r3, [pc, #4]	; 183c4 <__assert_fail@plt+0x7038>
   183bc:	mvn	r2, #0
   183c0:	b	17e84 <__assert_fail@plt+0x6af8>
   183c4:	andeq	ip, r2, ip, asr #5
   183c8:	ldr	r3, [pc]	; 183d0 <__assert_fail@plt+0x7044>
   183cc:	b	17e84 <__assert_fail@plt+0x6af8>
   183d0:	andeq	ip, r2, ip, asr #5
   183d4:	mov	r1, r0
   183d8:	ldr	r3, [pc, #8]	; 183e8 <__assert_fail@plt+0x705c>
   183dc:	mvn	r2, #0
   183e0:	mov	r0, #0
   183e4:	b	17e84 <__assert_fail@plt+0x6af8>
   183e8:	andeq	ip, r2, ip, asr #5
   183ec:	mov	r2, r1
   183f0:	ldr	r3, [pc, #8]	; 18400 <__assert_fail@plt+0x7074>
   183f4:	mov	r1, r0
   183f8:	mov	r0, #0
   183fc:	b	17e84 <__assert_fail@plt+0x6af8>
   18400:	andeq	ip, r2, ip, asr #5
   18404:	strd	r4, [sp, #-12]!
   18408:	mov	r5, r2
   1840c:	mov	r4, r0
   18410:	str	lr, [sp, #8]
   18414:	sub	sp, sp, #52	; 0x34
   18418:	mov	r0, sp
   1841c:	bl	16520 <__assert_fail@plt+0x5194>
   18420:	mov	r3, sp
   18424:	mov	r1, r5
   18428:	mov	r0, r4
   1842c:	mvn	r2, #0
   18430:	bl	17e84 <__assert_fail@plt+0x6af8>
   18434:	add	sp, sp, #52	; 0x34
   18438:	ldrd	r4, [sp]
   1843c:	add	sp, sp, #8
   18440:	pop	{pc}		; (ldr pc, [sp], #4)
   18444:	strd	r4, [sp, #-16]!
   18448:	mov	r5, r2
   1844c:	mov	r4, r0
   18450:	str	r6, [sp, #8]
   18454:	mov	r6, r3
   18458:	str	lr, [sp, #12]
   1845c:	sub	sp, sp, #48	; 0x30
   18460:	mov	r0, sp
   18464:	bl	16520 <__assert_fail@plt+0x5194>
   18468:	mov	r3, sp
   1846c:	mov	r2, r6
   18470:	mov	r1, r5
   18474:	mov	r0, r4
   18478:	bl	17e84 <__assert_fail@plt+0x6af8>
   1847c:	add	sp, sp, #48	; 0x30
   18480:	ldrd	r4, [sp]
   18484:	ldr	r6, [sp, #8]
   18488:	add	sp, sp, #12
   1848c:	pop	{pc}		; (ldr pc, [sp], #4)
   18490:	mov	r2, r1
   18494:	mov	r1, r0
   18498:	mov	r0, #0
   1849c:	b	18404 <__assert_fail@plt+0x7078>
   184a0:	mov	r3, r2
   184a4:	mov	r2, r1
   184a8:	mov	r1, r0
   184ac:	mov	r0, #0
   184b0:	b	18444 <__assert_fail@plt+0x70b8>
   184b4:	ldr	ip, [pc, #140]	; 18548 <__assert_fail@plt+0x71bc>
   184b8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   184bc:	ldrd	r4, [ip]
   184c0:	strd	r6, [sp, #8]
   184c4:	ldrd	r6, [ip, #8]
   184c8:	strd	r8, [sp, #16]
   184cc:	lsr	r9, r2, #5
   184d0:	str	lr, [sp, #24]
   184d4:	sub	sp, sp, #52	; 0x34
   184d8:	and	lr, r2, #31
   184dc:	add	r8, sp, #8
   184e0:	mov	r2, r1
   184e4:	strd	r4, [sp]
   184e8:	mov	r1, r0
   184ec:	mov	r3, sp
   184f0:	strd	r6, [sp, #8]
   184f4:	mov	r0, #0
   184f8:	ldrd	r4, [ip, #16]
   184fc:	ldrd	r6, [ip, #24]
   18500:	strd	r4, [sp, #16]
   18504:	ldrd	r4, [ip, #32]
   18508:	strd	r6, [sp, #24]
   1850c:	ldrd	r6, [ip, #40]	; 0x28
   18510:	strd	r4, [sp, #32]
   18514:	strd	r6, [sp, #40]	; 0x28
   18518:	ldr	ip, [r8, r9, lsl #2]
   1851c:	mvn	r4, ip, lsr lr
   18520:	and	r4, r4, #1
   18524:	eor	lr, ip, r4, lsl lr
   18528:	str	lr, [r8, r9, lsl #2]
   1852c:	bl	17e84 <__assert_fail@plt+0x6af8>
   18530:	add	sp, sp, #52	; 0x34
   18534:	ldrd	r4, [sp]
   18538:	ldrd	r6, [sp, #8]
   1853c:	ldrd	r8, [sp, #16]
   18540:	add	sp, sp, #24
   18544:	pop	{pc}		; (ldr pc, [sp], #4)
   18548:	andeq	ip, r2, ip, asr #5
   1854c:	mov	r2, r1
   18550:	mvn	r1, #0
   18554:	b	184b4 <__assert_fail@plt+0x7128>
   18558:	mov	r2, #58	; 0x3a
   1855c:	mvn	r1, #0
   18560:	b	184b4 <__assert_fail@plt+0x7128>
   18564:	mov	r2, #58	; 0x3a
   18568:	b	184b4 <__assert_fail@plt+0x7128>
   1856c:	strd	r4, [sp, #-20]!	; 0xffffffec
   18570:	strd	r6, [sp, #8]
   18574:	mov	r6, r0
   18578:	mov	r7, r2
   1857c:	str	lr, [sp, #16]
   18580:	sub	sp, sp, #100	; 0x64
   18584:	mov	r0, sp
   18588:	bl	16520 <__assert_fail@plt+0x5194>
   1858c:	ldrd	r4, [sp, #8]
   18590:	mov	r1, r7
   18594:	mov	r0, r6
   18598:	add	r3, sp, #48	; 0x30
   1859c:	mvn	r2, #0
   185a0:	ldrd	r6, [sp]
   185a4:	strd	r4, [sp, #56]	; 0x38
   185a8:	ldrd	r4, [sp, #16]
   185ac:	strd	r6, [sp, #48]	; 0x30
   185b0:	ldrd	r6, [sp, #32]
   185b4:	ldr	lr, [sp, #60]	; 0x3c
   185b8:	strd	r4, [sp, #64]	; 0x40
   185bc:	ldrd	r4, [sp, #24]
   185c0:	mvn	ip, lr
   185c4:	and	ip, ip, #67108864	; 0x4000000
   185c8:	strd	r4, [sp, #72]	; 0x48
   185cc:	eor	ip, ip, lr
   185d0:	ldrd	r4, [sp, #40]	; 0x28
   185d4:	str	ip, [sp, #60]	; 0x3c
   185d8:	strd	r6, [sp, #80]	; 0x50
   185dc:	strd	r4, [sp, #88]	; 0x58
   185e0:	bl	17e84 <__assert_fail@plt+0x6af8>
   185e4:	add	sp, sp, #100	; 0x64
   185e8:	ldrd	r4, [sp]
   185ec:	ldrd	r6, [sp, #8]
   185f0:	add	sp, sp, #16
   185f4:	pop	{pc}		; (ldr pc, [sp], #4)
   185f8:	ldr	ip, [pc, #156]	; 1869c <__assert_fail@plt+0x7310>
   185fc:	cmp	r2, #0
   18600:	cmpne	r1, #0
   18604:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18608:	strd	r6, [sp, #8]
   1860c:	mov	r6, r2
   18610:	str	r8, [sp, #16]
   18614:	mov	r8, r3
   18618:	strd	sl, [sp, #20]
   1861c:	ldrd	r4, [ip]
   18620:	str	lr, [sp, #28]
   18624:	sub	sp, sp, #48	; 0x30
   18628:	mov	lr, #10
   1862c:	ldrd	r2, [ip, #8]
   18630:	ldrd	sl, [ip, #16]
   18634:	strd	r4, [sp]
   18638:	ldrd	r4, [ip, #32]
   1863c:	str	lr, [sp]
   18640:	strd	r2, [sp, #8]
   18644:	strd	sl, [sp, #16]
   18648:	ldrd	r2, [ip, #24]
   1864c:	ldrd	sl, [ip, #40]	; 0x28
   18650:	strd	r2, [sp, #24]
   18654:	strd	r4, [sp, #32]
   18658:	strd	sl, [sp, #40]	; 0x28
   1865c:	beq	18698 <__assert_fail@plt+0x730c>
   18660:	ldr	r2, [sp, #80]	; 0x50
   18664:	mov	r7, r1
   18668:	mov	r3, sp
   1866c:	mov	r1, r8
   18670:	str	r7, [sp, #40]	; 0x28
   18674:	str	r6, [sp, #44]	; 0x2c
   18678:	bl	17e84 <__assert_fail@plt+0x6af8>
   1867c:	add	sp, sp, #48	; 0x30
   18680:	ldrd	r4, [sp]
   18684:	ldrd	r6, [sp, #8]
   18688:	ldr	r8, [sp, #16]
   1868c:	ldrd	sl, [sp, #20]
   18690:	add	sp, sp, #28
   18694:	pop	{pc}		; (ldr pc, [sp], #4)
   18698:	bl	11344 <abort@plt>
   1869c:	andeq	ip, r2, ip, asr #5
   186a0:	mvn	ip, #0
   186a4:	push	{lr}		; (str lr, [sp, #-4]!)
   186a8:	sub	sp, sp, #12
   186ac:	str	ip, [sp]
   186b0:	bl	185f8 <__assert_fail@plt+0x726c>
   186b4:	add	sp, sp, #12
   186b8:	pop	{pc}		; (ldr pc, [sp], #4)
   186bc:	mvn	ip, #0
   186c0:	push	{lr}		; (str lr, [sp, #-4]!)
   186c4:	sub	sp, sp, #12
   186c8:	mov	r3, r2
   186cc:	mov	r2, r1
   186d0:	mov	r1, r0
   186d4:	mov	r0, #0
   186d8:	str	ip, [sp]
   186dc:	bl	185f8 <__assert_fail@plt+0x726c>
   186e0:	add	sp, sp, #12
   186e4:	pop	{pc}		; (ldr pc, [sp], #4)
   186e8:	push	{lr}		; (str lr, [sp, #-4]!)
   186ec:	sub	sp, sp, #12
   186f0:	str	r3, [sp]
   186f4:	mov	r3, r2
   186f8:	mov	r2, r1
   186fc:	mov	r1, r0
   18700:	mov	r0, #0
   18704:	bl	185f8 <__assert_fail@plt+0x726c>
   18708:	add	sp, sp, #12
   1870c:	pop	{pc}		; (ldr pc, [sp], #4)
   18710:	ldr	r3, [pc]	; 18718 <__assert_fail@plt+0x738c>
   18714:	b	17e84 <__assert_fail@plt+0x6af8>
   18718:	andeq	ip, r2, r4, asr r1
   1871c:	mov	r2, r1
   18720:	ldr	r3, [pc, #8]	; 18730 <__assert_fail@plt+0x73a4>
   18724:	mov	r1, r0
   18728:	mov	r0, #0
   1872c:	b	17e84 <__assert_fail@plt+0x6af8>
   18730:	andeq	ip, r2, r4, asr r1
   18734:	ldr	r3, [pc, #4]	; 18740 <__assert_fail@plt+0x73b4>
   18738:	mvn	r2, #0
   1873c:	b	17e84 <__assert_fail@plt+0x6af8>
   18740:	andeq	ip, r2, r4, asr r1
   18744:	mov	r1, r0
   18748:	ldr	r3, [pc, #8]	; 18758 <__assert_fail@plt+0x73cc>
   1874c:	mvn	r2, #0
   18750:	mov	r0, #0
   18754:	b	17e84 <__assert_fail@plt+0x6af8>
   18758:	andeq	ip, r2, r4, asr r1
   1875c:	str	r4, [sp, #-16]!
   18760:	movw	r1, #45892	; 0xb344
   18764:	movt	r1, #1
   18768:	strd	r6, [sp, #4]
   1876c:	mov	r4, r0
   18770:	mov	r0, #3
   18774:	str	lr, [sp, #12]
   18778:	sub	sp, sp, #104	; 0x68
   1877c:	mov	r2, sp
   18780:	bl	1135c <__lxstat64@plt>
   18784:	cmp	r0, #0
   18788:	movne	r0, #0
   1878c:	bne	187a4 <__assert_fail@plt+0x7418>
   18790:	ldrd	r6, [sp]
   18794:	mov	r0, r4
   18798:	ldrd	r2, [sp, #96]	; 0x60
   1879c:	strd	r2, [r4]
   187a0:	strd	r6, [r4, #8]
   187a4:	add	sp, sp, #104	; 0x68
   187a8:	ldr	r4, [sp]
   187ac:	ldrd	r6, [sp, #4]
   187b0:	add	sp, sp, #12
   187b4:	pop	{pc}		; (ldr pc, [sp], #4)
   187b8:	cmp	r0, #2
   187bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   187c0:	mov	r4, r0
   187c4:	strd	r6, [sp, #8]
   187c8:	str	r8, [sp, #16]
   187cc:	str	lr, [sp, #20]
   187d0:	bls	187ec <__assert_fail@plt+0x7460>
   187d4:	mov	r0, r4
   187d8:	ldrd	r4, [sp]
   187dc:	ldrd	r6, [sp, #8]
   187e0:	ldr	r8, [sp, #16]
   187e4:	add	sp, sp, #20
   187e8:	pop	{pc}		; (ldr pc, [sp], #4)
   187ec:	bl	1a3a4 <__assert_fail@plt+0x9018>
   187f0:	mov	r7, r0
   187f4:	bl	1123c <__errno_location@plt>
   187f8:	mov	r5, r0
   187fc:	mov	r0, r4
   18800:	ldr	r6, [r5]
   18804:	mov	r4, r7
   18808:	bl	11350 <close@plt>
   1880c:	str	r6, [r5]
   18810:	b	187d4 <__assert_fail@plt+0x7448>
   18814:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18818:	mov	r4, r1
   1881c:	strd	r6, [sp, #8]
   18820:	strd	r8, [sp, #16]
   18824:	subs	r9, r3, #0
   18828:	mov	r8, r2
   1882c:	strd	sl, [sp, #24]
   18830:	mvneq	sl, #0
   18834:	str	lr, [sp, #32]
   18838:	sub	sp, sp, #44	; 0x2c
   1883c:	ldr	r3, [sp, #80]	; 0x50
   18840:	ldrne	sl, [r9]
   18844:	ldr	fp, [r2]
   18848:	cmp	r3, #0
   1884c:	ldr	r6, [sp, #84]	; 0x54
   18850:	beq	18860 <__assert_fail@plt+0x74d4>
   18854:	mov	r3, #0
   18858:	ldr	r2, [sp, #80]	; 0x50
   1885c:	str	r3, [r2]
   18860:	cmp	r6, #0
   18864:	movne	r3, #0
   18868:	strne	r3, [r6]
   1886c:	cmp	r4, #0
   18870:	beq	18a24 <__assert_fail@plt+0x7698>
   18874:	subs	r3, r4, r0
   18878:	bne	18920 <__assert_fail@plt+0x7594>
   1887c:	ldrb	r2, [r4, #1]
   18880:	cmp	r2, #0
   18884:	beq	18a38 <__assert_fail@plt+0x76ac>
   18888:	adds	r5, r4, #1
   1888c:	moveq	r4, r5
   18890:	beq	188c8 <__assert_fail@plt+0x753c>
   18894:	mov	r4, r3
   18898:	ldrb	r3, [r5]
   1889c:	cmp	r3, #43	; 0x2b
   188a0:	beq	18994 <__assert_fail@plt+0x7608>
   188a4:	mov	r0, r5
   188a8:	bl	11380 <getgrnam@plt>
   188ac:	cmp	r0, #0
   188b0:	beq	18994 <__assert_fail@plt+0x7608>
   188b4:	ldr	sl, [r0, #8]
   188b8:	bl	11044 <endgrent@plt>
   188bc:	mov	r0, r5
   188c0:	bl	195f8 <__assert_fail@plt+0x826c>
   188c4:	mov	r5, r0
   188c8:	ldr	r3, [sp, #80]	; 0x50
   188cc:	cmp	r9, #0
   188d0:	str	fp, [r8]
   188d4:	strne	sl, [r9]
   188d8:	cmp	r3, #0
   188dc:	strne	r4, [r3]
   188e0:	movne	r4, #0
   188e4:	cmp	r6, #0
   188e8:	mov	r0, r4
   188ec:	strne	r5, [r6]
   188f0:	movne	r5, #0
   188f4:	bl	12da4 <__assert_fail@plt+0x1a18>
   188f8:	mov	r0, r5
   188fc:	bl	12da4 <__assert_fail@plt+0x1a18>
   18900:	mov	r0, #0
   18904:	add	sp, sp, #44	; 0x2c
   18908:	ldrd	r4, [sp]
   1890c:	ldrd	r6, [sp, #8]
   18910:	ldrd	r8, [sp, #16]
   18914:	ldrd	sl, [sp, #24]
   18918:	add	sp, sp, #32
   1891c:	pop	{pc}		; (ldr pc, [sp], #4)
   18920:	add	r1, r3, #1
   18924:	str	r3, [sp, #12]
   18928:	bl	19560 <__assert_fail@plt+0x81d4>
   1892c:	ldrb	r5, [r4, #1]
   18930:	mov	r2, #0
   18934:	mov	r7, r0
   18938:	ldr	r3, [sp, #12]
   1893c:	cmp	r5, r2
   18940:	strb	r2, [r0, r3]
   18944:	ldrb	r3, [r0]
   18948:	beq	18a40 <__assert_fail@plt+0x76b4>
   1894c:	adds	r5, r4, #1
   18950:	moveq	r4, #1
   18954:	movne	r4, r2
   18958:	cmp	r3, #43	; 0x2b
   1895c:	beq	189e8 <__assert_fail@plt+0x765c>
   18960:	bl	11068 <getpwnam@plt>
   18964:	cmp	r0, #0
   18968:	beq	189e8 <__assert_fail@plt+0x765c>
   1896c:	cmp	r4, #0
   18970:	ldr	fp, [r0, #8]
   18974:	moveq	r4, r7
   18978:	bne	18a5c <__assert_fail@plt+0x76d0>
   1897c:	bl	112b4 <endpwent@plt>
   18980:	cmp	r5, #0
   18984:	beq	188c8 <__assert_fail@plt+0x753c>
   18988:	ldrb	r3, [r5]
   1898c:	cmp	r3, #43	; 0x2b
   18990:	bne	188a4 <__assert_fail@plt+0x7518>
   18994:	movw	r0, #44956	; 0xaf9c
   18998:	movt	r0, #1
   1899c:	add	r3, sp, #16
   189a0:	mov	r2, #10
   189a4:	mov	r1, #0
   189a8:	str	r0, [sp]
   189ac:	mov	r0, r5
   189b0:	bl	196f4 <__assert_fail@plt+0x8368>
   189b4:	cmp	r0, #0
   189b8:	bne	189c8 <__assert_fail@plt+0x763c>
   189bc:	ldr	sl, [sp, #16]
   189c0:	cmn	sl, #1
   189c4:	bne	188b8 <__assert_fail@plt+0x752c>
   189c8:	bl	11044 <endgrent@plt>
   189cc:	mov	r0, r5
   189d0:	mov	r7, r4
   189d4:	bl	195f8 <__assert_fail@plt+0x826c>
   189d8:	movw	r4, #47620	; 0xba04
   189dc:	movt	r4, #1
   189e0:	mov	r5, r0
   189e4:	b	18a00 <__assert_fail@plt+0x7674>
   189e8:	cmp	r4, #0
   189ec:	beq	18ab0 <__assert_fail@plt+0x7724>
   189f0:	movw	r4, #47604	; 0xb9f4
   189f4:	movt	r4, #1
   189f8:	mov	r5, #0
   189fc:	bl	112b4 <endpwent@plt>
   18a00:	mov	r0, r7
   18a04:	bl	12da4 <__assert_fail@plt+0x1a18>
   18a08:	mov	r0, r5
   18a0c:	bl	12da4 <__assert_fail@plt+0x1a18>
   18a10:	mov	r1, r4
   18a14:	mov	r2, #5
   18a18:	mov	r0, #0
   18a1c:	bl	11104 <dcgettext@plt>
   18a20:	b	18904 <__assert_fail@plt+0x7578>
   18a24:	ldrb	r3, [r0]
   18a28:	cmp	r3, #0
   18a2c:	bne	18a8c <__assert_fail@plt+0x7700>
   18a30:	mov	r5, r4
   18a34:	b	188c8 <__assert_fail@plt+0x753c>
   18a38:	mov	r4, r2
   18a3c:	b	18a30 <__assert_fail@plt+0x76a4>
   18a40:	cmp	r3, #43	; 0x2b
   18a44:	beq	189f0 <__assert_fail@plt+0x7664>
   18a48:	bl	11068 <getpwnam@plt>
   18a4c:	cmp	r0, #0
   18a50:	movne	r4, #1
   18a54:	bne	1896c <__assert_fail@plt+0x75e0>
   18a58:	b	189f0 <__assert_fail@plt+0x7664>
   18a5c:	ldr	sl, [r0, #12]
   18a60:	mov	r0, sl
   18a64:	bl	11374 <getgrgid@plt>
   18a68:	subs	r1, r0, #0
   18a6c:	beq	18b1c <__assert_fail@plt+0x7790>
   18a70:	ldr	r0, [r1]
   18a74:	bl	195f8 <__assert_fail@plt+0x826c>
   18a78:	mov	r5, r0
   18a7c:	mov	r4, r7
   18a80:	bl	11044 <endgrent@plt>
   18a84:	bl	112b4 <endpwent@plt>
   18a88:	b	188c8 <__assert_fail@plt+0x753c>
   18a8c:	bl	195f8 <__assert_fail@plt+0x826c>
   18a90:	ldrb	r3, [r0]
   18a94:	mov	r7, r0
   18a98:	cmp	r3, #43	; 0x2b
   18a9c:	moveq	r5, r4
   18aa0:	beq	18ab0 <__assert_fail@plt+0x7724>
   18aa4:	bl	11068 <getpwnam@plt>
   18aa8:	subs	r5, r0, #0
   18aac:	bne	18b0c <__assert_fail@plt+0x7780>
   18ab0:	movw	r0, #44956	; 0xaf9c
   18ab4:	movt	r0, #1
   18ab8:	add	r3, sp, #16
   18abc:	mov	r2, #10
   18ac0:	mov	r1, #0
   18ac4:	str	r0, [sp]
   18ac8:	mov	r0, r7
   18acc:	bl	196f4 <__assert_fail@plt+0x8368>
   18ad0:	cmp	r0, #0
   18ad4:	bne	18af8 <__assert_fail@plt+0x776c>
   18ad8:	ldr	fp, [sp, #16]
   18adc:	cmn	fp, #1
   18ae0:	beq	18af8 <__assert_fail@plt+0x776c>
   18ae4:	bl	112b4 <endpwent@plt>
   18ae8:	cmp	r5, #0
   18aec:	mov	r4, r7
   18af0:	beq	188c8 <__assert_fail@plt+0x753c>
   18af4:	b	18898 <__assert_fail@plt+0x750c>
   18af8:	movw	r4, #47636	; 0xba14
   18afc:	movt	r4, #1
   18b00:	bl	112b4 <endpwent@plt>
   18b04:	mov	r5, #0
   18b08:	b	18a00 <__assert_fail@plt+0x7674>
   18b0c:	ldr	fp, [r5, #8]
   18b10:	mov	r5, r4
   18b14:	mov	r4, r7
   18b18:	b	1897c <__assert_fail@plt+0x75f0>
   18b1c:	add	r2, sp, #16
   18b20:	mov	r0, sl
   18b24:	bl	16338 <__assert_fail@plt+0x4fac>
   18b28:	b	18a74 <__assert_fail@plt+0x76e8>
   18b2c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18b30:	strd	r6, [sp, #8]
   18b34:	subs	r7, r2, #0
   18b38:	strd	r8, [sp, #16]
   18b3c:	mov	r9, r1
   18b40:	mov	r8, r3
   18b44:	str	sl, [sp, #24]
   18b48:	str	lr, [sp, #28]
   18b4c:	sub	sp, sp, #8
   18b50:	ldr	r6, [sp, #40]	; 0x28
   18b54:	beq	18bec <__assert_fail@plt+0x7860>
   18b58:	mov	r1, #58	; 0x3a
   18b5c:	mov	r5, r0
   18b60:	bl	11218 <strchr@plt>
   18b64:	mov	sl, r0
   18b68:	mov	r1, r0
   18b6c:	str	r8, [sp]
   18b70:	mov	r3, r7
   18b74:	mov	r2, r9
   18b78:	str	r6, [sp, #4]
   18b7c:	mov	r0, r5
   18b80:	bl	18814 <__assert_fail@plt+0x7488>
   18b84:	cmp	sl, #0
   18b88:	mov	r4, r0
   18b8c:	bne	18bcc <__assert_fail@plt+0x7840>
   18b90:	cmp	r0, #0
   18b94:	beq	18c0c <__assert_fail@plt+0x7880>
   18b98:	mov	r1, #46	; 0x2e
   18b9c:	mov	r0, r5
   18ba0:	bl	11218 <strchr@plt>
   18ba4:	subs	r1, r0, #0
   18ba8:	beq	18bcc <__assert_fail@plt+0x7840>
   18bac:	mov	r3, r7
   18bb0:	mov	r2, r9
   18bb4:	str	r8, [sp]
   18bb8:	mov	r0, r5
   18bbc:	str	r6, [sp, #4]
   18bc0:	bl	18814 <__assert_fail@plt+0x7488>
   18bc4:	cmp	r0, #0
   18bc8:	beq	18c0c <__assert_fail@plt+0x7880>
   18bcc:	mov	r0, r4
   18bd0:	add	sp, sp, #8
   18bd4:	ldrd	r4, [sp]
   18bd8:	ldrd	r6, [sp, #8]
   18bdc:	ldrd	r8, [sp, #16]
   18be0:	ldr	sl, [sp, #24]
   18be4:	add	sp, sp, #28
   18be8:	pop	{pc}		; (ldr pc, [sp], #4)
   18bec:	mov	r2, r1
   18bf0:	mov	r3, r7
   18bf4:	str	r8, [sp]
   18bf8:	mov	r1, r7
   18bfc:	str	r6, [sp, #4]
   18c00:	bl	18814 <__assert_fail@plt+0x7488>
   18c04:	mov	r4, r0
   18c08:	b	18bcc <__assert_fail@plt+0x7840>
   18c0c:	mov	r4, #0
   18c10:	b	18bcc <__assert_fail@plt+0x7840>
   18c14:	cmp	r1, #0
   18c18:	strd	r4, [sp, #-16]!
   18c1c:	mov	ip, r3
   18c20:	str	r6, [sp, #8]
   18c24:	mov	r4, r0
   18c28:	str	lr, [sp, #12]
   18c2c:	sub	sp, sp, #32
   18c30:	ldr	r5, [sp, #48]	; 0x30
   18c34:	ldr	r6, [sp, #52]	; 0x34
   18c38:	beq	18d7c <__assert_fail@plt+0x79f0>
   18c3c:	mov	r3, r1
   18c40:	mov	r1, #1
   18c44:	stm	sp, {r2, ip}
   18c48:	movw	r2, #47652	; 0xba24
   18c4c:	movt	r2, #1
   18c50:	bl	11278 <__fprintf_chk@plt>
   18c54:	mov	r2, #5
   18c58:	movw	r1, #47672	; 0xba38
   18c5c:	movt	r1, #1
   18c60:	mov	r0, #0
   18c64:	bl	11104 <dcgettext@plt>
   18c68:	movw	ip, #2022	; 0x7e6
   18c6c:	mov	r3, r0
   18c70:	mov	r1, #1
   18c74:	movw	r2, #48400	; 0xbd10
   18c78:	movt	r2, #1
   18c7c:	mov	r0, r4
   18c80:	str	ip, [sp]
   18c84:	bl	11278 <__fprintf_chk@plt>
   18c88:	mov	r1, r4
   18c8c:	mov	r0, #10
   18c90:	bl	110f8 <fputc_unlocked@plt>
   18c94:	mov	r2, #5
   18c98:	movw	r1, #47676	; 0xba3c
   18c9c:	movt	r1, #1
   18ca0:	mov	r0, #0
   18ca4:	bl	11104 <dcgettext@plt>
   18ca8:	mov	r2, r0
   18cac:	mov	r1, #1
   18cb0:	movw	r3, #47848	; 0xbae8
   18cb4:	movt	r3, #1
   18cb8:	mov	r0, r4
   18cbc:	bl	11278 <__fprintf_chk@plt>
   18cc0:	mov	r1, r4
   18cc4:	mov	r0, #10
   18cc8:	bl	110f8 <fputc_unlocked@plt>
   18ccc:	cmp	r6, #9
   18cd0:	ldrls	pc, [pc, r6, lsl #2]
   18cd4:	b	18fe8 <__assert_fail@plt+0x7c5c>
   18cd8:	andeq	r8, r1, r8, ror #26
   18cdc:	muleq	r1, r8, sp
   18ce0:	ldrdeq	r8, [r1], -r4
   18ce4:	andeq	r8, r1, r4, lsl lr
   18ce8:	andeq	r8, r1, ip, asr lr
   18cec:	muleq	r1, r4, lr
   18cf0:	ldrdeq	r8, [r1], -ip
   18cf4:	andeq	r8, r1, r0, lsr pc
   18cf8:	andeq	r8, r1, r8, lsl #31
   18cfc:	andeq	r8, r1, r0, lsl #26
   18d00:	movw	r1, #48152	; 0xbc18
   18d04:	movt	r1, #1
   18d08:	mov	r2, #5
   18d0c:	mov	r0, #0
   18d10:	bl	11104 <dcgettext@plt>
   18d14:	ldr	lr, [r5, #4]
   18d18:	mov	r2, r0
   18d1c:	mov	r1, #1
   18d20:	mov	r0, r4
   18d24:	ldr	r3, [r5, #8]
   18d28:	ldr	ip, [r5, #32]
   18d2c:	str	lr, [sp]
   18d30:	ldr	lr, [r5, #12]
   18d34:	str	ip, [sp, #28]
   18d38:	ldr	ip, [r5, #28]
   18d3c:	str	r3, [sp, #4]
   18d40:	ldr	r3, [r5, #16]
   18d44:	str	lr, [sp, #8]
   18d48:	ldr	lr, [r5, #20]
   18d4c:	str	ip, [sp, #24]
   18d50:	ldr	ip, [r5, #24]
   18d54:	str	r3, [sp, #12]
   18d58:	ldr	r3, [r5]
   18d5c:	str	lr, [sp, #16]
   18d60:	str	ip, [sp, #20]
   18d64:	bl	11278 <__fprintf_chk@plt>
   18d68:	add	sp, sp, #32
   18d6c:	ldrd	r4, [sp]
   18d70:	ldr	r6, [sp, #8]
   18d74:	add	sp, sp, #12
   18d78:	pop	{pc}		; (ldr pc, [sp], #4)
   18d7c:	mov	r3, r2
   18d80:	mov	r1, #1
   18d84:	str	ip, [sp]
   18d88:	movw	r2, #47664	; 0xba30
   18d8c:	movt	r2, #1
   18d90:	bl	11278 <__fprintf_chk@plt>
   18d94:	b	18c54 <__assert_fail@plt+0x78c8>
   18d98:	mov	r2, #5
   18d9c:	movw	r1, #47884	; 0xbb0c
   18da0:	movt	r1, #1
   18da4:	mov	r0, #0
   18da8:	bl	11104 <dcgettext@plt>
   18dac:	ldr	r3, [r5]
   18db0:	mov	r2, r0
   18db4:	mov	r1, #1
   18db8:	mov	r0, r4
   18dbc:	add	sp, sp, #32
   18dc0:	ldrd	r4, [sp]
   18dc4:	ldr	r6, [sp, #8]
   18dc8:	ldr	lr, [sp, #12]
   18dcc:	add	sp, sp, #16
   18dd0:	b	11278 <__fprintf_chk@plt>
   18dd4:	mov	r2, #5
   18dd8:	movw	r1, #47900	; 0xbb1c
   18ddc:	movt	r1, #1
   18de0:	mov	r0, #0
   18de4:	bl	11104 <dcgettext@plt>
   18de8:	ldm	r5, {r3, ip}
   18dec:	mov	r2, r0
   18df0:	mov	r1, #1
   18df4:	mov	r0, r4
   18df8:	str	ip, [sp, #48]	; 0x30
   18dfc:	add	sp, sp, #32
   18e00:	ldrd	r4, [sp]
   18e04:	ldr	r6, [sp, #8]
   18e08:	ldr	lr, [sp, #12]
   18e0c:	add	sp, sp, #16
   18e10:	b	11278 <__fprintf_chk@plt>
   18e14:	mov	r2, #5
   18e18:	movw	r1, #47924	; 0xbb34
   18e1c:	movt	r1, #1
   18e20:	mov	r0, #0
   18e24:	bl	11104 <dcgettext@plt>
   18e28:	ldm	r5, {r3, lr}
   18e2c:	mov	r2, r0
   18e30:	mov	r1, #1
   18e34:	mov	r0, r4
   18e38:	ldr	ip, [r5, #8]
   18e3c:	str	lr, [sp, #48]	; 0x30
   18e40:	str	ip, [sp, #52]	; 0x34
   18e44:	add	sp, sp, #32
   18e48:	ldrd	r4, [sp]
   18e4c:	ldr	r6, [sp, #8]
   18e50:	ldr	lr, [sp, #12]
   18e54:	add	sp, sp, #16
   18e58:	b	11278 <__fprintf_chk@plt>
   18e5c:	mov	r2, #5
   18e60:	movw	r1, #47952	; 0xbb50
   18e64:	movt	r1, #1
   18e68:	mov	r0, #0
   18e6c:	bl	11104 <dcgettext@plt>
   18e70:	ldmib	r5, {r3, ip, lr}
   18e74:	mov	r2, r0
   18e78:	mov	r1, #1
   18e7c:	mov	r0, r4
   18e80:	str	r3, [sp]
   18e84:	ldr	r3, [r5]
   18e88:	stmib	sp, {ip, lr}
   18e8c:	bl	11278 <__fprintf_chk@plt>
   18e90:	b	18d68 <__assert_fail@plt+0x79dc>
   18e94:	mov	r2, #5
   18e98:	movw	r1, #47984	; 0xbb70
   18e9c:	movt	r1, #1
   18ea0:	mov	r0, #0
   18ea4:	bl	11104 <dcgettext@plt>
   18ea8:	ldmib	r5, {ip, lr}
   18eac:	mov	r2, r0
   18eb0:	mov	r1, #1
   18eb4:	mov	r0, r4
   18eb8:	ldr	r3, [r5, #16]
   18ebc:	str	ip, [sp]
   18ec0:	ldr	ip, [r5, #12]
   18ec4:	str	r3, [sp, #12]
   18ec8:	ldr	r3, [r5]
   18ecc:	str	lr, [sp, #4]
   18ed0:	str	ip, [sp, #8]
   18ed4:	bl	11278 <__fprintf_chk@plt>
   18ed8:	b	18d68 <__assert_fail@plt+0x79dc>
   18edc:	mov	r2, #5
   18ee0:	movw	r1, #48020	; 0xbb94
   18ee4:	movt	r1, #1
   18ee8:	mov	r0, #0
   18eec:	bl	11104 <dcgettext@plt>
   18ef0:	ldr	lr, [r5, #4]
   18ef4:	mov	r2, r0
   18ef8:	mov	r1, #1
   18efc:	mov	r0, r4
   18f00:	ldr	r3, [r5, #8]
   18f04:	ldr	ip, [r5, #20]
   18f08:	str	lr, [sp]
   18f0c:	ldr	lr, [r5, #12]
   18f10:	str	ip, [sp, #16]
   18f14:	ldr	ip, [r5, #16]
   18f18:	str	r3, [sp, #4]
   18f1c:	ldr	r3, [r5]
   18f20:	str	lr, [sp, #8]
   18f24:	str	ip, [sp, #12]
   18f28:	bl	11278 <__fprintf_chk@plt>
   18f2c:	b	18d68 <__assert_fail@plt+0x79dc>
   18f30:	mov	r2, #5
   18f34:	movw	r1, #48060	; 0xbbbc
   18f38:	movt	r1, #1
   18f3c:	mov	r0, #0
   18f40:	bl	11104 <dcgettext@plt>
   18f44:	ldmib	r5, {r3, ip}
   18f48:	mov	r2, r0
   18f4c:	mov	r1, #1
   18f50:	mov	r0, r4
   18f54:	ldr	lr, [r5, #24]
   18f58:	str	r3, [sp]
   18f5c:	ldr	r3, [r5, #12]
   18f60:	str	lr, [sp, #20]
   18f64:	ldr	lr, [r5, #20]
   18f68:	str	ip, [sp, #4]
   18f6c:	ldr	ip, [r5, #16]
   18f70:	str	r3, [sp, #8]
   18f74:	ldr	r3, [r5]
   18f78:	str	ip, [sp, #12]
   18f7c:	str	lr, [sp, #16]
   18f80:	bl	11278 <__fprintf_chk@plt>
   18f84:	b	18d68 <__assert_fail@plt+0x79dc>
   18f88:	mov	r2, #5
   18f8c:	movw	r1, #48104	; 0xbbe8
   18f90:	movt	r1, #1
   18f94:	mov	r0, #0
   18f98:	bl	11104 <dcgettext@plt>
   18f9c:	ldmib	r5, {ip, lr}
   18fa0:	mov	r2, r0
   18fa4:	mov	r1, #1
   18fa8:	mov	r0, r4
   18fac:	ldr	r3, [r5, #28]
   18fb0:	str	ip, [sp]
   18fb4:	ldr	ip, [r5, #12]
   18fb8:	str	r3, [sp, #24]
   18fbc:	ldr	r3, [r5, #24]
   18fc0:	str	lr, [sp, #4]
   18fc4:	ldr	lr, [r5, #16]
   18fc8:	str	ip, [sp, #8]
   18fcc:	ldr	ip, [r5, #20]
   18fd0:	str	r3, [sp, #20]
   18fd4:	ldr	r3, [r5]
   18fd8:	str	lr, [sp, #12]
   18fdc:	str	ip, [sp, #16]
   18fe0:	bl	11278 <__fprintf_chk@plt>
   18fe4:	b	18d68 <__assert_fail@plt+0x79dc>
   18fe8:	movw	r1, #48204	; 0xbc4c
   18fec:	movt	r1, #1
   18ff0:	b	18d08 <__assert_fail@plt+0x797c>
   18ff4:	strd	r4, [sp, #-12]!
   18ff8:	str	lr, [sp, #8]
   18ffc:	sub	sp, sp, #12
   19000:	ldr	r5, [sp, #24]
   19004:	ldr	ip, [r5]
   19008:	cmp	ip, #0
   1900c:	beq	19028 <__assert_fail@plt+0x7c9c>
   19010:	mov	lr, r5
   19014:	mov	ip, #0
   19018:	ldr	r4, [lr, #4]!
   1901c:	add	ip, ip, #1
   19020:	cmp	r4, #0
   19024:	bne	19018 <__assert_fail@plt+0x7c8c>
   19028:	stm	sp, {r5, ip}
   1902c:	bl	18c14 <__assert_fail@plt+0x7888>
   19030:	add	sp, sp, #12
   19034:	ldrd	r4, [sp]
   19038:	add	sp, sp, #8
   1903c:	pop	{pc}		; (ldr pc, [sp], #4)
   19040:	strd	r4, [sp, #-16]!
   19044:	mov	ip, #0
   19048:	str	r6, [sp, #8]
   1904c:	str	lr, [sp, #12]
   19050:	sub	sp, sp, #48	; 0x30
   19054:	ldr	r5, [sp, #64]	; 0x40
   19058:	add	r6, sp, #8
   1905c:	mov	r4, r6
   19060:	ldr	lr, [r5], #4
   19064:	cmp	lr, #0
   19068:	str	lr, [r4], #4
   1906c:	beq	1907c <__assert_fail@plt+0x7cf0>
   19070:	add	ip, ip, #1
   19074:	cmp	ip, #10
   19078:	bne	19060 <__assert_fail@plt+0x7cd4>
   1907c:	stm	sp, {r6, ip}
   19080:	bl	18c14 <__assert_fail@plt+0x7888>
   19084:	add	sp, sp, #48	; 0x30
   19088:	ldrd	r4, [sp]
   1908c:	ldr	r6, [sp, #8]
   19090:	add	sp, sp, #12
   19094:	pop	{pc}		; (ldr pc, [sp], #4)
   19098:	push	{r3}		; (str r3, [sp, #-4]!)
   1909c:	mov	ip, #0
   190a0:	strd	r4, [sp, #-12]!
   190a4:	str	lr, [sp, #8]
   190a8:	sub	sp, sp, #56	; 0x38
   190ac:	add	r3, sp, #72	; 0x48
   190b0:	add	r5, sp, #16
   190b4:	mov	r4, r3
   190b8:	mov	lr, r5
   190bc:	str	r3, [sp, #12]
   190c0:	ldr	r3, [r4], #4
   190c4:	cmp	r3, #0
   190c8:	str	r3, [lr], #4
   190cc:	beq	190dc <__assert_fail@plt+0x7d50>
   190d0:	add	ip, ip, #1
   190d4:	cmp	ip, #10
   190d8:	bne	190c0 <__assert_fail@plt+0x7d34>
   190dc:	ldr	r3, [sp, #68]	; 0x44
   190e0:	stm	sp, {r5, ip}
   190e4:	bl	18c14 <__assert_fail@plt+0x7888>
   190e8:	add	sp, sp, #56	; 0x38
   190ec:	ldrd	r4, [sp]
   190f0:	ldr	lr, [sp, #8]
   190f4:	add	sp, sp, #12
   190f8:	add	sp, sp, #4
   190fc:	bx	lr
   19100:	movw	r3, #49564	; 0xc19c
   19104:	movt	r3, #2
   19108:	str	r4, [sp, #-8]!
   1910c:	mov	r0, #10
   19110:	ldr	r1, [r3]
   19114:	str	lr, [sp, #4]
   19118:	bl	110f8 <fputc_unlocked@plt>
   1911c:	mov	r2, #5
   19120:	movw	r1, #48264	; 0xbc88
   19124:	movt	r1, #1
   19128:	mov	r0, #0
   1912c:	bl	11104 <dcgettext@plt>
   19130:	mov	r1, r0
   19134:	movw	r2, #48284	; 0xbc9c
   19138:	movt	r2, #1
   1913c:	mov	r0, #1
   19140:	bl	11260 <__printf_chk@plt>
   19144:	mov	r2, #5
   19148:	movw	r1, #48308	; 0xbcb4
   1914c:	movt	r1, #1
   19150:	mov	r0, #0
   19154:	bl	11104 <dcgettext@plt>
   19158:	mov	r1, r0
   1915c:	movw	r3, #45484	; 0xb1ac
   19160:	movt	r3, #1
   19164:	movw	r2, #45524	; 0xb1d4
   19168:	movt	r2, #1
   1916c:	mov	r0, #1
   19170:	bl	11260 <__printf_chk@plt>
   19174:	mov	r2, #5
   19178:	movw	r1, #48328	; 0xbcc8
   1917c:	movt	r1, #1
   19180:	mov	r0, #0
   19184:	bl	11104 <dcgettext@plt>
   19188:	mov	r1, r0
   1918c:	movw	r2, #48368	; 0xbcf0
   19190:	movt	r2, #1
   19194:	mov	r0, #1
   19198:	ldr	r4, [sp]
   1919c:	ldr	lr, [sp, #4]
   191a0:	add	sp, sp, #8
   191a4:	b	11260 <__printf_chk@plt>
   191a8:	str	r4, [sp, #-8]!
   191ac:	str	lr, [sp, #4]
   191b0:	bl	19c68 <__assert_fail@plt+0x88dc>
   191b4:	cmp	r0, #0
   191b8:	beq	191c8 <__assert_fail@plt+0x7e3c>
   191bc:	ldr	r4, [sp]
   191c0:	add	sp, sp, #4
   191c4:	pop	{pc}		; (ldr pc, [sp], #4)
   191c8:	bl	19620 <__assert_fail@plt+0x8294>
   191cc:	str	r4, [sp, #-8]!
   191d0:	str	lr, [sp, #4]
   191d4:	bl	19c68 <__assert_fail@plt+0x88dc>
   191d8:	cmp	r0, #0
   191dc:	beq	191ec <__assert_fail@plt+0x7e60>
   191e0:	ldr	r4, [sp]
   191e4:	add	sp, sp, #4
   191e8:	pop	{pc}		; (ldr pc, [sp], #4)
   191ec:	bl	19620 <__assert_fail@plt+0x8294>
   191f0:	str	r4, [sp, #-8]!
   191f4:	str	lr, [sp, #4]
   191f8:	bl	19c68 <__assert_fail@plt+0x88dc>
   191fc:	cmp	r0, #0
   19200:	beq	19210 <__assert_fail@plt+0x7e84>
   19204:	ldr	r4, [sp]
   19208:	add	sp, sp, #4
   1920c:	pop	{pc}		; (ldr pc, [sp], #4)
   19210:	bl	19620 <__assert_fail@plt+0x8294>
   19214:	strd	r4, [sp, #-16]!
   19218:	mov	r5, r0
   1921c:	mov	r4, r1
   19220:	str	r6, [sp, #8]
   19224:	str	lr, [sp, #12]
   19228:	bl	19ca4 <__assert_fail@plt+0x8918>
   1922c:	cmp	r0, #0
   19230:	beq	19244 <__assert_fail@plt+0x7eb8>
   19234:	ldrd	r4, [sp]
   19238:	ldr	r6, [sp, #8]
   1923c:	add	sp, sp, #12
   19240:	pop	{pc}		; (ldr pc, [sp], #4)
   19244:	adds	r4, r4, #0
   19248:	movne	r4, #1
   1924c:	cmp	r5, #0
   19250:	moveq	r4, #1
   19254:	cmp	r4, #0
   19258:	beq	19234 <__assert_fail@plt+0x7ea8>
   1925c:	bl	19620 <__assert_fail@plt+0x8294>
   19260:	cmp	r1, #0
   19264:	orreq	r1, r1, #1
   19268:	str	r4, [sp, #-8]!
   1926c:	str	lr, [sp, #4]
   19270:	bl	19ca4 <__assert_fail@plt+0x8918>
   19274:	cmp	r0, #0
   19278:	beq	19288 <__assert_fail@plt+0x7efc>
   1927c:	ldr	r4, [sp]
   19280:	add	sp, sp, #4
   19284:	pop	{pc}		; (ldr pc, [sp], #4)
   19288:	bl	19620 <__assert_fail@plt+0x8294>
   1928c:	strd	r4, [sp, #-16]!
   19290:	mov	r4, r0
   19294:	mov	r5, r2
   19298:	str	r6, [sp, #8]
   1929c:	mov	r6, r1
   192a0:	str	lr, [sp, #12]
   192a4:	bl	1a36c <__assert_fail@plt+0x8fe0>
   192a8:	cmp	r0, #0
   192ac:	beq	192c0 <__assert_fail@plt+0x7f34>
   192b0:	ldrd	r4, [sp]
   192b4:	ldr	r6, [sp, #8]
   192b8:	add	sp, sp, #12
   192bc:	pop	{pc}		; (ldr pc, [sp], #4)
   192c0:	cmp	r4, #0
   192c4:	beq	192d4 <__assert_fail@plt+0x7f48>
   192c8:	cmp	r6, #0
   192cc:	cmpne	r5, #0
   192d0:	beq	192b0 <__assert_fail@plt+0x7f24>
   192d4:	bl	19620 <__assert_fail@plt+0x8294>
   192d8:	b	1928c <__assert_fail@plt+0x7f00>
   192dc:	cmp	r2, #0
   192e0:	cmpne	r1, #0
   192e4:	str	r4, [sp, #-8]!
   192e8:	moveq	r2, #1
   192ec:	str	lr, [sp, #4]
   192f0:	moveq	r1, r2
   192f4:	bl	1a36c <__assert_fail@plt+0x8fe0>
   192f8:	cmp	r0, #0
   192fc:	beq	1930c <__assert_fail@plt+0x7f80>
   19300:	ldr	r4, [sp]
   19304:	add	sp, sp, #4
   19308:	pop	{pc}		; (ldr pc, [sp], #4)
   1930c:	bl	19620 <__assert_fail@plt+0x8294>
   19310:	mov	r2, r1
   19314:	mov	r1, r0
   19318:	mov	r0, #0
   1931c:	b	1928c <__assert_fail@plt+0x7f00>
   19320:	mov	r2, r1
   19324:	mov	r1, r0
   19328:	mov	r0, #0
   1932c:	b	192dc <__assert_fail@plt+0x7f50>
   19330:	cmp	r0, #0
   19334:	strd	r4, [sp, #-16]!
   19338:	mov	r5, r1
   1933c:	ldr	r4, [r1]
   19340:	str	r6, [sp, #8]
   19344:	str	lr, [sp, #12]
   19348:	beq	19378 <__assert_fail@plt+0x7fec>
   1934c:	lsr	r3, r4, #1
   19350:	add	r3, r3, #1
   19354:	adds	r4, r4, r3
   19358:	bcs	19394 <__assert_fail@plt+0x8008>
   1935c:	mov	r1, r4
   19360:	bl	1928c <__assert_fail@plt+0x7f00>
   19364:	ldr	r6, [sp, #8]
   19368:	str	r4, [r5]
   1936c:	ldrd	r4, [sp]
   19370:	add	sp, sp, #12
   19374:	pop	{pc}		; (ldr pc, [sp], #4)
   19378:	cmp	r4, #0
   1937c:	bne	1935c <__assert_fail@plt+0x7fd0>
   19380:	mov	r4, #64	; 0x40
   19384:	udiv	r4, r4, r2
   19388:	cmp	r2, #64	; 0x40
   1938c:	addhi	r4, r4, #1
   19390:	b	1935c <__assert_fail@plt+0x7fd0>
   19394:	bl	19620 <__assert_fail@plt+0x8294>
   19398:	mov	r2, #1
   1939c:	b	19330 <__assert_fail@plt+0x7fa4>
   193a0:	ldr	ip, [r1]
   193a4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   193a8:	mov	r5, r1
   193ac:	strd	r6, [sp, #8]
   193b0:	str	lr, [sp, #28]
   193b4:	strd	r8, [sp, #16]
   193b8:	asr	lr, ip, #1
   193bc:	ldr	r8, [sp, #32]
   193c0:	str	sl, [sp, #24]
   193c4:	adds	r4, ip, lr
   193c8:	mvn	lr, r3
   193cc:	lsr	lr, lr, #31
   193d0:	mvnvs	r4, #-2147483648	; 0x80000000
   193d4:	cmp	r3, r4
   193d8:	movge	r1, #0
   193dc:	andlt	r1, lr, #1
   193e0:	cmp	r1, #0
   193e4:	movne	r4, r3
   193e8:	smull	r6, r7, r4, r8
   193ec:	cmp	r7, r6, asr #31
   193f0:	bne	19478 <__assert_fail@plt+0x80ec>
   193f4:	cmp	r6, #63	; 0x3f
   193f8:	mov	r1, r6
   193fc:	ble	19460 <__assert_fail@plt+0x80d4>
   19400:	cmp	r0, #0
   19404:	sub	r6, r4, ip
   19408:	streq	r0, [r5]
   1940c:	cmp	r6, r2
   19410:	bge	19440 <__assert_fail@plt+0x80b4>
   19414:	adds	r4, ip, r2
   19418:	bvs	19474 <__assert_fail@plt+0x80e8>
   1941c:	cmp	r4, r3
   19420:	movle	r3, #0
   19424:	andgt	r3, lr, #1
   19428:	cmp	r3, #0
   1942c:	bne	19474 <__assert_fail@plt+0x80e8>
   19430:	smull	r8, r9, r4, r8
   19434:	cmp	r9, r8, asr #31
   19438:	mov	r1, r8
   1943c:	bne	19474 <__assert_fail@plt+0x80e8>
   19440:	bl	19214 <__assert_fail@plt+0x7e88>
   19444:	ldrd	r6, [sp, #8]
   19448:	ldrd	r8, [sp, #16]
   1944c:	ldr	sl, [sp, #24]
   19450:	str	r4, [r5]
   19454:	ldrd	r4, [sp]
   19458:	add	sp, sp, #28
   1945c:	pop	{pc}		; (ldr pc, [sp], #4)
   19460:	mov	r6, #64	; 0x40
   19464:	sdiv	r4, r6, r8
   19468:	mls	r1, r8, r4, r6
   1946c:	sub	r1, r6, r1
   19470:	b	19400 <__assert_fail@plt+0x8074>
   19474:	bl	19620 <__assert_fail@plt+0x8294>
   19478:	mvn	r6, #-2147483648	; 0x80000000
   1947c:	b	19464 <__assert_fail@plt+0x80d8>
   19480:	mov	r1, #1
   19484:	str	r4, [sp, #-8]!
   19488:	str	lr, [sp, #4]
   1948c:	bl	19bf4 <__assert_fail@plt+0x8868>
   19490:	cmp	r0, #0
   19494:	beq	194a4 <__assert_fail@plt+0x8118>
   19498:	ldr	r4, [sp]
   1949c:	add	sp, sp, #4
   194a0:	pop	{pc}		; (ldr pc, [sp], #4)
   194a4:	bl	19620 <__assert_fail@plt+0x8294>
   194a8:	mov	r1, #1
   194ac:	str	r4, [sp, #-8]!
   194b0:	str	lr, [sp, #4]
   194b4:	bl	19bf4 <__assert_fail@plt+0x8868>
   194b8:	cmp	r0, #0
   194bc:	beq	194cc <__assert_fail@plt+0x8140>
   194c0:	ldr	r4, [sp]
   194c4:	add	sp, sp, #4
   194c8:	pop	{pc}		; (ldr pc, [sp], #4)
   194cc:	bl	19620 <__assert_fail@plt+0x8294>
   194d0:	str	r4, [sp, #-8]!
   194d4:	str	lr, [sp, #4]
   194d8:	bl	19bf4 <__assert_fail@plt+0x8868>
   194dc:	cmp	r0, #0
   194e0:	beq	194f0 <__assert_fail@plt+0x8164>
   194e4:	ldr	r4, [sp]
   194e8:	add	sp, sp, #4
   194ec:	pop	{pc}		; (ldr pc, [sp], #4)
   194f0:	bl	19620 <__assert_fail@plt+0x8294>
   194f4:	str	r4, [sp, #-8]!
   194f8:	str	lr, [sp, #4]
   194fc:	bl	19bf4 <__assert_fail@plt+0x8868>
   19500:	cmp	r0, #0
   19504:	beq	19514 <__assert_fail@plt+0x8188>
   19508:	ldr	r4, [sp]
   1950c:	add	sp, sp, #4
   19510:	pop	{pc}		; (ldr pc, [sp], #4)
   19514:	bl	19620 <__assert_fail@plt+0x8294>
   19518:	strd	r4, [sp, #-16]!
   1951c:	mov	r4, r1
   19520:	str	r6, [sp, #8]
   19524:	mov	r6, r0
   19528:	mov	r0, r1
   1952c:	str	lr, [sp, #12]
   19530:	bl	19c68 <__assert_fail@plt+0x88dc>
   19534:	subs	r5, r0, #0
   19538:	beq	1955c <__assert_fail@plt+0x81d0>
   1953c:	mov	r2, r4
   19540:	mov	r1, r6
   19544:	bl	110c8 <memcpy@plt>
   19548:	mov	r0, r5
   1954c:	ldrd	r4, [sp]
   19550:	ldr	r6, [sp, #8]
   19554:	add	sp, sp, #12
   19558:	pop	{pc}		; (ldr pc, [sp], #4)
   1955c:	bl	19620 <__assert_fail@plt+0x8294>
   19560:	strd	r4, [sp, #-16]!
   19564:	mov	r4, r1
   19568:	str	r6, [sp, #8]
   1956c:	mov	r6, r0
   19570:	mov	r0, r1
   19574:	str	lr, [sp, #12]
   19578:	bl	19c68 <__assert_fail@plt+0x88dc>
   1957c:	subs	r5, r0, #0
   19580:	beq	195a4 <__assert_fail@plt+0x8218>
   19584:	mov	r2, r4
   19588:	mov	r1, r6
   1958c:	bl	110c8 <memcpy@plt>
   19590:	mov	r0, r5
   19594:	ldrd	r4, [sp]
   19598:	ldr	r6, [sp, #8]
   1959c:	add	sp, sp, #12
   195a0:	pop	{pc}		; (ldr pc, [sp], #4)
   195a4:	bl	19620 <__assert_fail@plt+0x8294>
   195a8:	strd	r4, [sp, #-16]!
   195ac:	mov	r4, r1
   195b0:	str	r6, [sp, #8]
   195b4:	mov	r6, r0
   195b8:	add	r0, r1, #1
   195bc:	str	lr, [sp, #12]
   195c0:	bl	19c68 <__assert_fail@plt+0x88dc>
   195c4:	subs	r5, r0, #0
   195c8:	beq	195f4 <__assert_fail@plt+0x8268>
   195cc:	mov	r3, #0
   195d0:	mov	r1, r6
   195d4:	mov	r2, r4
   195d8:	strb	r3, [r5, r4]
   195dc:	bl	110c8 <memcpy@plt>
   195e0:	mov	r0, r5
   195e4:	ldrd	r4, [sp]
   195e8:	ldr	r6, [sp, #8]
   195ec:	add	sp, sp, #12
   195f0:	pop	{pc}		; (ldr pc, [sp], #4)
   195f4:	bl	19620 <__assert_fail@plt+0x8294>
   195f8:	str	r4, [sp, #-8]!
   195fc:	mov	r4, r0
   19600:	str	lr, [sp, #4]
   19604:	bl	1120c <strlen@plt>
   19608:	add	r1, r0, #1
   1960c:	mov	r0, r4
   19610:	ldr	r4, [sp]
   19614:	ldr	lr, [sp, #4]
   19618:	add	sp, sp, #8
   1961c:	b	19518 <__assert_fail@plt+0x818c>
   19620:	movw	r3, #49472	; 0xc140
   19624:	movt	r3, #2
   19628:	str	r4, [sp, #-8]!
   1962c:	ldr	r4, [r3]
   19630:	mov	r2, #5
   19634:	movw	r1, #48448	; 0xbd40
   19638:	movt	r1, #1
   1963c:	mov	r0, #0
   19640:	str	lr, [sp, #4]
   19644:	bl	11104 <dcgettext@plt>
   19648:	mov	r3, r0
   1964c:	movw	r2, #45724	; 0xb29c
   19650:	movt	r2, #1
   19654:	mov	r1, #0
   19658:	mov	r0, r4
   1965c:	bl	11194 <error@plt>
   19660:	bl	11344 <abort@plt>
   19664:	orr	r1, r1, #512	; 0x200
   19668:	str	r4, [sp, #-8]!
   1966c:	str	lr, [sp, #4]
   19670:	bl	14348 <__assert_fail@plt+0x2fbc>
   19674:	cmp	r0, #0
   19678:	beq	19688 <__assert_fail@plt+0x82fc>
   1967c:	ldr	r4, [sp]
   19680:	add	sp, sp, #4
   19684:	pop	{pc}		; (ldr pc, [sp], #4)
   19688:	bl	1123c <__errno_location@plt>
   1968c:	ldr	r3, [r0]
   19690:	cmp	r3, #22
   19694:	beq	1969c <__assert_fail@plt+0x8310>
   19698:	bl	19620 <__assert_fail@plt+0x8294>
   1969c:	movw	r3, #48468	; 0xbd54
   196a0:	movt	r3, #1
   196a4:	movw	r1, #48480	; 0xbd60
   196a8:	movt	r1, #1
   196ac:	movw	r0, #48492	; 0xbd6c
   196b0:	movt	r0, #1
   196b4:	mov	r2, #41	; 0x29
   196b8:	bl	1138c <__assert_fail@plt>
   196bc:	ldr	r3, [r0, #48]	; 0x30
   196c0:	and	r3, r3, #17
   196c4:	cmp	r3, #16
   196c8:	beq	196ec <__assert_fail@plt+0x8360>
   196cc:	cmp	r3, #17
   196d0:	beq	196dc <__assert_fail@plt+0x8350>
   196d4:	mov	r0, #0
   196d8:	bx	lr
   196dc:	ldr	r0, [r1, #48]	; 0x30
   196e0:	adds	r0, r0, #0
   196e4:	movne	r0, #1
   196e8:	bx	lr
   196ec:	mov	r0, #1
   196f0:	bx	lr
   196f4:	cmp	r2, #36	; 0x24
   196f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   196fc:	strd	r6, [sp, #8]
   19700:	strd	r8, [sp, #16]
   19704:	strd	sl, [sp, #24]
   19708:	str	lr, [sp, #32]
   1970c:	sub	sp, sp, #12
   19710:	bhi	19bd4 <__assert_fail@plt+0x8848>
   19714:	cmp	r1, #0
   19718:	mov	r7, r2
   1971c:	mov	r8, r0
   19720:	mov	r5, r1
   19724:	mov	r6, r3
   19728:	addeq	r5, sp, #4
   1972c:	bl	1123c <__errno_location@plt>
   19730:	mov	r3, #0
   19734:	mov	r9, r0
   19738:	str	r3, [r0]
   1973c:	bl	111e8 <__ctype_b_loc@plt>
   19740:	ldrb	r3, [r8]
   19744:	mov	r2, r8
   19748:	ldr	r0, [r0]
   1974c:	b	19754 <__assert_fail@plt+0x83c8>
   19750:	ldrb	r3, [r2, #1]!
   19754:	lsl	r1, r3, #1
   19758:	ldrh	r4, [r0, r1]
   1975c:	ands	r4, r4, #8192	; 0x2000
   19760:	bne	19750 <__assert_fail@plt+0x83c4>
   19764:	cmp	r3, #45	; 0x2d
   19768:	beq	197fc <__assert_fail@plt+0x8470>
   1976c:	mov	r2, r7
   19770:	mov	r1, r5
   19774:	mov	r0, r8
   19778:	bl	11200 <strtoul@plt>
   1977c:	ldr	r7, [r5]
   19780:	mov	sl, r0
   19784:	cmp	r7, r8
   19788:	beq	197e4 <__assert_fail@plt+0x8458>
   1978c:	ldr	r4, [r9]
   19790:	cmp	r4, #0
   19794:	bne	197d4 <__assert_fail@plt+0x8448>
   19798:	ldr	r3, [sp, #48]	; 0x30
   1979c:	cmp	r3, #0
   197a0:	beq	197b0 <__assert_fail@plt+0x8424>
   197a4:	ldrb	r8, [r7]
   197a8:	cmp	r8, #0
   197ac:	bne	19a6c <__assert_fail@plt+0x86e0>
   197b0:	str	sl, [r6]
   197b4:	mov	r0, r4
   197b8:	add	sp, sp, #12
   197bc:	ldrd	r4, [sp]
   197c0:	ldrd	r6, [sp, #8]
   197c4:	ldrd	r8, [sp, #16]
   197c8:	ldrd	sl, [sp, #24]
   197cc:	add	sp, sp, #32
   197d0:	pop	{pc}		; (ldr pc, [sp], #4)
   197d4:	cmp	r4, #34	; 0x22
   197d8:	bne	197fc <__assert_fail@plt+0x8470>
   197dc:	mov	r4, #1
   197e0:	b	19798 <__assert_fail@plt+0x840c>
   197e4:	ldr	r3, [sp, #48]	; 0x30
   197e8:	cmp	r3, #0
   197ec:	beq	197fc <__assert_fail@plt+0x8470>
   197f0:	ldrb	r8, [r8]
   197f4:	cmp	r8, #0
   197f8:	bne	19804 <__assert_fail@plt+0x8478>
   197fc:	mov	r4, #4
   19800:	b	197b4 <__assert_fail@plt+0x8428>
   19804:	mov	r1, r8
   19808:	mov	r0, r3
   1980c:	bl	11218 <strchr@plt>
   19810:	cmp	r0, #0
   19814:	movne	sl, #1
   19818:	beq	197fc <__assert_fail@plt+0x8470>
   1981c:	sub	r3, r8, #69	; 0x45
   19820:	cmp	r3, #47	; 0x2f
   19824:	ldrls	pc, [pc, r3, lsl #2]
   19828:	b	1992c <__assert_fail@plt+0x85a0>
   1982c:	andeq	r9, r1, ip, ror #17
   19830:	andeq	r9, r1, ip, lsr #18
   19834:	andeq	r9, r1, ip, ror #17
   19838:	andeq	r9, r1, ip, lsr #18
   1983c:	andeq	r9, r1, ip, lsr #18
   19840:	andeq	r9, r1, ip, lsr #18
   19844:	andeq	r9, r1, ip, ror #17
   19848:	andeq	r9, r1, ip, lsr #18
   1984c:	andeq	r9, r1, ip, ror #17
   19850:	andeq	r9, r1, ip, lsr #18
   19854:	andeq	r9, r1, ip, lsr #18
   19858:	andeq	r9, r1, ip, ror #17
   1985c:	andeq	r9, r1, ip, lsr #18
   19860:	andeq	r9, r1, ip, lsr #18
   19864:	andeq	r9, r1, ip, lsr #18
   19868:	andeq	r9, r1, ip, ror #17
   1986c:	andeq	r9, r1, ip, lsr #18
   19870:	andeq	r9, r1, ip, lsr #18
   19874:	andeq	r9, r1, ip, lsr #18
   19878:	andeq	r9, r1, ip, lsr #18
   1987c:	andeq	r9, r1, ip, ror #17
   19880:	andeq	r9, r1, ip, ror #17
   19884:	andeq	r9, r1, ip, lsr #18
   19888:	andeq	r9, r1, ip, lsr #18
   1988c:	andeq	r9, r1, ip, lsr #18
   19890:	andeq	r9, r1, ip, lsr #18
   19894:	andeq	r9, r1, ip, lsr #18
   19898:	andeq	r9, r1, ip, lsr #18
   1989c:	andeq	r9, r1, ip, lsr #18
   198a0:	andeq	r9, r1, ip, lsr #18
   198a4:	andeq	r9, r1, ip, lsr #18
   198a8:	andeq	r9, r1, ip, lsr #18
   198ac:	andeq	r9, r1, ip, lsr #18
   198b0:	andeq	r9, r1, ip, lsr #18
   198b4:	andeq	r9, r1, ip, ror #17
   198b8:	andeq	r9, r1, ip, lsr #18
   198bc:	andeq	r9, r1, ip, lsr #18
   198c0:	andeq	r9, r1, ip, lsr #18
   198c4:	andeq	r9, r1, ip, ror #17
   198c8:	andeq	r9, r1, ip, lsr #18
   198cc:	andeq	r9, r1, ip, ror #17
   198d0:	andeq	r9, r1, ip, lsr #18
   198d4:	andeq	r9, r1, ip, lsr #18
   198d8:	andeq	r9, r1, ip, lsr #18
   198dc:	andeq	r9, r1, ip, lsr #18
   198e0:	andeq	r9, r1, ip, lsr #18
   198e4:	andeq	r9, r1, ip, lsr #18
   198e8:	andeq	r9, r1, ip, ror #17
   198ec:	mov	r1, #48	; 0x30
   198f0:	ldr	r0, [sp, #48]	; 0x30
   198f4:	bl	11218 <strchr@plt>
   198f8:	cmp	r0, #0
   198fc:	beq	1992c <__assert_fail@plt+0x85a0>
   19900:	ldrb	r3, [r7, #1]
   19904:	cmp	r3, #68	; 0x44
   19908:	beq	19bc8 <__assert_fail@plt+0x883c>
   1990c:	cmp	r3, #105	; 0x69
   19910:	beq	19a84 <__assert_fail@plt+0x86f8>
   19914:	cmp	r3, #66	; 0x42
   19918:	moveq	r0, #2
   1991c:	movne	r0, #1
   19920:	moveq	r1, #1000	; 0x3e8
   19924:	movne	r1, #1024	; 0x400
   19928:	b	19934 <__assert_fail@plt+0x85a8>
   1992c:	mov	r0, #1
   19930:	mov	r1, #1024	; 0x400
   19934:	sub	r8, r8, #66	; 0x42
   19938:	cmp	r8, #53	; 0x35
   1993c:	ldrls	pc, [pc, r8, lsl #2]
   19940:	b	19a50 <__assert_fail@plt+0x86c4>
   19944:	andeq	r9, r1, r4, asr fp
   19948:	andeq	r9, r1, r0, asr sl
   1994c:	andeq	r9, r1, r0, asr sl
   19950:	andeq	r9, r1, r0, lsr fp
   19954:	andeq	r9, r1, r0, asr sl
   19958:	andeq	r9, r1, ip, lsl sl
   1995c:	andeq	r9, r1, r0, asr sl
   19960:	andeq	r9, r1, r0, asr sl
   19964:	andeq	r9, r1, r0, asr sl
   19968:	andeq	r9, r1, r8, asr sl
   1996c:	andeq	r9, r1, r0, asr sl
   19970:	andeq	r9, r1, ip, ror #22
   19974:	andeq	r9, r1, r0, asr sl
   19978:	andeq	r9, r1, r0, asr sl
   1997c:	andeq	r9, r1, ip, lsl #22
   19980:	andeq	r9, r1, r0, asr sl
   19984:	andeq	r9, r1, r0, asr sl
   19988:	andeq	r9, r1, r0, asr sl
   1998c:	andeq	r9, r1, r8, ror #21
   19990:	andeq	r9, r1, r0, asr sl
   19994:	andeq	r9, r1, r0, asr sl
   19998:	andeq	r9, r1, r0, asr sl
   1999c:	andeq	r9, r1, r0, asr sl
   199a0:	andeq	r9, r1, r4, asr #21
   199a4:	muleq	r1, ip, sl
   199a8:	andeq	r9, r1, r0, asr sl
   199ac:	andeq	r9, r1, r0, asr sl
   199b0:	andeq	r9, r1, r0, asr sl
   199b4:	andeq	r9, r1, r0, asr sl
   199b8:	andeq	r9, r1, r0, asr sl
   199bc:	andeq	r9, r1, r0, asr sl
   199c0:	andeq	r9, r1, r0, asr sl
   199c4:			; <UNDEFINED> instruction: 0x00019bb0
   199c8:	andeq	r9, r1, ip, lsr sl
   199cc:	andeq	r9, r1, r0, asr sl
   199d0:	andeq	r9, r1, r0, asr sl
   199d4:	andeq	r9, r1, r0, asr sl
   199d8:	andeq	r9, r1, ip, lsl sl
   199dc:	andeq	r9, r1, r0, asr sl
   199e0:	andeq	r9, r1, r0, asr sl
   199e4:	andeq	r9, r1, r0, asr sl
   199e8:	andeq	r9, r1, r8, asr sl
   199ec:	andeq	r9, r1, r0, asr sl
   199f0:	andeq	r9, r1, ip, ror #22
   199f4:	andeq	r9, r1, r0, asr sl
   199f8:	andeq	r9, r1, r0, asr sl
   199fc:	andeq	r9, r1, r0, asr sl
   19a00:	andeq	r9, r1, r0, asr sl
   19a04:	andeq	r9, r1, r0, asr sl
   19a08:	andeq	r9, r1, r0, asr sl
   19a0c:	andeq	r9, r1, r8, ror #21
   19a10:	andeq	r9, r1, r0, asr sl
   19a14:	andeq	r9, r1, r0, asr sl
   19a18:	muleq	r1, r8, fp
   19a1c:	umull	r2, r3, sl, r1
   19a20:	cmp	r3, #0
   19a24:	bne	19a34 <__assert_fail@plt+0x86a8>
   19a28:	umull	r2, r3, r2, r1
   19a2c:	cmp	r3, #0
   19a30:	beq	19b78 <__assert_fail@plt+0x87ec>
   19a34:	mov	r4, #1
   19a38:	mvn	sl, #0
   19a3c:	add	r3, r7, r0
   19a40:	str	r3, [r5]
   19a44:	ldrb	r3, [r7, r0]
   19a48:	cmp	r3, #0
   19a4c:	beq	197b0 <__assert_fail@plt+0x8424>
   19a50:	orr	r4, r4, #2
   19a54:	b	197b0 <__assert_fail@plt+0x8424>
   19a58:	umull	sl, fp, sl, r1
   19a5c:	cmp	fp, #0
   19a60:	movne	r4, #1
   19a64:	mvnne	sl, #0
   19a68:	b	19a3c <__assert_fail@plt+0x86b0>
   19a6c:	mov	r1, r8
   19a70:	ldr	r0, [sp, #48]	; 0x30
   19a74:	bl	11218 <strchr@plt>
   19a78:	cmp	r0, #0
   19a7c:	bne	1981c <__assert_fail@plt+0x8490>
   19a80:	b	19a50 <__assert_fail@plt+0x86c4>
   19a84:	ldrb	r3, [r7, #2]
   19a88:	mov	r1, #1024	; 0x400
   19a8c:	cmp	r3, #66	; 0x42
   19a90:	movne	r0, #1
   19a94:	moveq	r0, #3
   19a98:	b	19934 <__assert_fail@plt+0x85a8>
   19a9c:	mov	ip, #7
   19aa0:	mov	lr, #0
   19aa4:	umull	sl, fp, sl, r1
   19aa8:	cmp	fp, #0
   19aac:	movne	lr, #1
   19ab0:	mvnne	sl, #0
   19ab4:	subs	ip, ip, #1
   19ab8:	bne	19aa4 <__assert_fail@plt+0x8718>
   19abc:	orr	r4, r4, lr
   19ac0:	b	19a3c <__assert_fail@plt+0x86b0>
   19ac4:	mov	ip, #8
   19ac8:	mov	lr, #0
   19acc:	umull	sl, fp, sl, r1
   19ad0:	cmp	fp, #0
   19ad4:	movne	lr, #1
   19ad8:	mvnne	sl, #0
   19adc:	subs	ip, ip, #1
   19ae0:	bne	19acc <__assert_fail@plt+0x8740>
   19ae4:	b	19abc <__assert_fail@plt+0x8730>
   19ae8:	mov	ip, #4
   19aec:	mov	lr, #0
   19af0:	umull	sl, fp, sl, r1
   19af4:	cmp	fp, #0
   19af8:	movne	lr, #1
   19afc:	mvnne	sl, #0
   19b00:	subs	ip, ip, #1
   19b04:	bne	19af0 <__assert_fail@plt+0x8764>
   19b08:	b	19abc <__assert_fail@plt+0x8730>
   19b0c:	mov	ip, #5
   19b10:	mov	lr, #0
   19b14:	umull	sl, fp, sl, r1
   19b18:	cmp	fp, #0
   19b1c:	movne	lr, #1
   19b20:	mvnne	sl, #0
   19b24:	subs	ip, ip, #1
   19b28:	bne	19b14 <__assert_fail@plt+0x8788>
   19b2c:	b	19abc <__assert_fail@plt+0x8730>
   19b30:	mov	ip, #6
   19b34:	mov	lr, #0
   19b38:	umull	sl, fp, sl, r1
   19b3c:	cmp	fp, #0
   19b40:	movne	lr, #1
   19b44:	mvnne	sl, #0
   19b48:	subs	ip, ip, #1
   19b4c:	bne	19b38 <__assert_fail@plt+0x87ac>
   19b50:	b	19abc <__assert_fail@plt+0x8730>
   19b54:	lsr	r3, sl, #22
   19b58:	cmp	r3, #0
   19b5c:	movne	r4, #1
   19b60:	mvnne	sl, #0
   19b64:	lsleq	sl, sl, #10
   19b68:	b	19a3c <__assert_fail@plt+0x86b0>
   19b6c:	umull	r2, r3, sl, r1
   19b70:	cmp	r3, #0
   19b74:	bne	19a34 <__assert_fail@plt+0x86a8>
   19b78:	umull	r8, r9, r2, r1
   19b7c:	adds	r3, r9, #0
   19b80:	movne	r3, #1
   19b84:	cmp	r3, #0
   19b88:	movne	r4, r3
   19b8c:	moveq	sl, r8
   19b90:	mvnne	sl, #0
   19b94:	b	19a3c <__assert_fail@plt+0x86b0>
   19b98:	lsr	r3, sl, #31
   19b9c:	cmp	r3, #0
   19ba0:	movne	r4, #1
   19ba4:	mvnne	sl, #0
   19ba8:	lsleq	sl, sl, #1
   19bac:	b	19a3c <__assert_fail@plt+0x86b0>
   19bb0:	lsr	r3, sl, #23
   19bb4:	cmp	r3, #0
   19bb8:	movne	r4, #1
   19bbc:	mvnne	sl, #0
   19bc0:	lsleq	sl, sl, #9
   19bc4:	b	19a3c <__assert_fail@plt+0x86b0>
   19bc8:	mov	r0, #2
   19bcc:	mov	r1, #1000	; 0x3e8
   19bd0:	b	19934 <__assert_fail@plt+0x85a8>
   19bd4:	movw	r3, #48508	; 0xbd7c
   19bd8:	movt	r3, #1
   19bdc:	movw	r1, #48520	; 0xbd88
   19be0:	movt	r1, #1
   19be4:	movw	r0, #48536	; 0xbd98
   19be8:	movt	r0, #1
   19bec:	mov	r2, #85	; 0x55
   19bf0:	bl	1138c <__assert_fail@plt>
   19bf4:	cmp	r1, #0
   19bf8:	cmpne	r0, #0
   19bfc:	beq	19c48 <__assert_fail@plt+0x88bc>
   19c00:	strd	r4, [sp, #-16]!
   19c04:	umull	r4, r5, r0, r1
   19c08:	str	r6, [sp, #8]
   19c0c:	str	lr, [sp, #12]
   19c10:	adds	r3, r5, #0
   19c14:	movne	r3, #1
   19c18:	cmp	r4, #0
   19c1c:	blt	19c28 <__assert_fail@plt+0x889c>
   19c20:	cmp	r3, #0
   19c24:	beq	19c54 <__assert_fail@plt+0x88c8>
   19c28:	bl	1123c <__errno_location@plt>
   19c2c:	mov	r3, #12
   19c30:	ldrd	r4, [sp]
   19c34:	ldr	r6, [sp, #8]
   19c38:	add	sp, sp, #12
   19c3c:	str	r3, [r0]
   19c40:	mov	r0, #0
   19c44:	pop	{pc}		; (ldr pc, [sp], #4)
   19c48:	mov	r1, #1
   19c4c:	mov	r0, r1
   19c50:	b	11038 <calloc@plt>
   19c54:	ldrd	r4, [sp]
   19c58:	ldr	r6, [sp, #8]
   19c5c:	ldr	lr, [sp, #12]
   19c60:	add	sp, sp, #16
   19c64:	b	11038 <calloc@plt>
   19c68:	cmp	r0, #0
   19c6c:	beq	19c78 <__assert_fail@plt+0x88ec>
   19c70:	blt	19c80 <__assert_fail@plt+0x88f4>
   19c74:	b	111ac <malloc@plt>
   19c78:	mov	r0, #1
   19c7c:	b	111ac <malloc@plt>
   19c80:	str	r4, [sp, #-8]!
   19c84:	str	lr, [sp, #4]
   19c88:	bl	1123c <__errno_location@plt>
   19c8c:	mov	r3, #12
   19c90:	ldr	r4, [sp]
   19c94:	add	sp, sp, #4
   19c98:	str	r3, [r0]
   19c9c:	mov	r0, #0
   19ca0:	pop	{pc}		; (ldr pc, [sp], #4)
   19ca4:	cmp	r0, #0
   19ca8:	beq	19cd0 <__assert_fail@plt+0x8944>
   19cac:	cmp	r1, #0
   19cb0:	str	r4, [sp, #-8]!
   19cb4:	str	lr, [sp, #4]
   19cb8:	beq	19cd8 <__assert_fail@plt+0x894c>
   19cbc:	blt	19cec <__assert_fail@plt+0x8960>
   19cc0:	ldr	r4, [sp]
   19cc4:	ldr	lr, [sp, #4]
   19cc8:	add	sp, sp, #8
   19ccc:	b	11110 <realloc@plt>
   19cd0:	mov	r0, r1
   19cd4:	b	19c68 <__assert_fail@plt+0x88dc>
   19cd8:	bl	12da4 <__assert_fail@plt+0x1a18>
   19cdc:	ldr	r4, [sp]
   19ce0:	add	sp, sp, #4
   19ce4:	mov	r0, #0
   19ce8:	pop	{pc}		; (ldr pc, [sp], #4)
   19cec:	bl	1123c <__errno_location@plt>
   19cf0:	mov	r3, #12
   19cf4:	str	r3, [r0]
   19cf8:	b	19cdc <__assert_fail@plt+0x8950>
   19cfc:	strd	r4, [sp, #-16]!
   19d00:	mov	r4, r0
   19d04:	str	r6, [sp, #8]
   19d08:	str	lr, [sp, #12]
   19d0c:	bl	1117c <__fpending@plt>
   19d10:	ldr	r5, [r4]
   19d14:	mov	r6, r0
   19d18:	mov	r0, r4
   19d1c:	bl	19ea4 <__assert_fail@plt+0x8b18>
   19d20:	mov	r4, r0
   19d24:	and	r5, r5, #32
   19d28:	cmp	r5, #0
   19d2c:	bne	19d64 <__assert_fail@plt+0x89d8>
   19d30:	cmp	r0, #0
   19d34:	beq	19d50 <__assert_fail@plt+0x89c4>
   19d38:	cmp	r6, #0
   19d3c:	bne	19d7c <__assert_fail@plt+0x89f0>
   19d40:	bl	1123c <__errno_location@plt>
   19d44:	ldr	r4, [r0]
   19d48:	subs	r4, r4, #9
   19d4c:	mvnne	r4, #0
   19d50:	mov	r0, r4
   19d54:	ldrd	r4, [sp]
   19d58:	ldr	r6, [sp, #8]
   19d5c:	add	sp, sp, #12
   19d60:	pop	{pc}		; (ldr pc, [sp], #4)
   19d64:	cmp	r0, #0
   19d68:	bne	19d7c <__assert_fail@plt+0x89f0>
   19d6c:	bl	1123c <__errno_location@plt>
   19d70:	str	r4, [r0]
   19d74:	mvn	r4, #0
   19d78:	b	19d50 <__assert_fail@plt+0x89c4>
   19d7c:	mvn	r4, #0
   19d80:	b	19d50 <__assert_fail@plt+0x89c4>
   19d84:	movw	r3, #62998	; 0xf616
   19d88:	movt	r3, #149	; 0x95
   19d8c:	strd	r4, [sp, #-8]!
   19d90:	mov	r4, #0
   19d94:	mov	r5, #0
   19d98:	strd	r4, [r0, #16]
   19d9c:	str	r3, [r0, #24]
   19da0:	ldrd	r4, [sp]
   19da4:	add	sp, sp, #8
   19da8:	bx	lr
   19dac:	ldr	r2, [r0, #24]
   19db0:	movw	r3, #62998	; 0xf616
   19db4:	movt	r3, #149	; 0x95
   19db8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19dbc:	strd	r6, [sp, #8]
   19dc0:	strd	r8, [sp, #16]
   19dc4:	strd	sl, [sp, #24]
   19dc8:	cmp	r2, r3
   19dcc:	str	lr, [sp, #32]
   19dd0:	sub	sp, sp, #4
   19dd4:	bne	19e84 <__assert_fail@plt+0x8af8>
   19dd8:	ldrd	r6, [r0, #16]
   19ddc:	ldrd	sl, [r1, #96]	; 0x60
   19de0:	orrs	r3, r6, r7
   19de4:	beq	19e38 <__assert_fail@plt+0x8aac>
   19de8:	ldrd	r2, [r0]
   19dec:	cmp	r3, fp
   19df0:	cmpeq	r2, sl
   19df4:	beq	19e58 <__assert_fail@plt+0x8acc>
   19df8:	adds	r8, r6, #1
   19dfc:	adc	r9, r7, #0
   19e00:	and	r2, r6, r8
   19e04:	and	r3, r7, r9
   19e08:	orrs	r3, r2, r3
   19e0c:	strd	r8, [r0, #16]
   19e10:	movne	r1, #0
   19e14:	beq	19e74 <__assert_fail@plt+0x8ae8>
   19e18:	mov	r0, r1
   19e1c:	add	sp, sp, #4
   19e20:	ldrd	r4, [sp]
   19e24:	ldrd	r6, [sp, #8]
   19e28:	ldrd	r8, [sp, #16]
   19e2c:	ldrd	sl, [sp, #24]
   19e30:	add	sp, sp, #32
   19e34:	pop	{pc}		; (ldr pc, [sp], #4)
   19e38:	mov	r2, #1
   19e3c:	mov	r3, #0
   19e40:	strd	r2, [r0, #16]
   19e44:	ldrd	r2, [r1]
   19e48:	mov	r1, #0
   19e4c:	strd	sl, [r0]
   19e50:	strd	r2, [r0, #8]
   19e54:	b	19e18 <__assert_fail@plt+0x8a8c>
   19e58:	ldrd	r4, [r1]
   19e5c:	ldrd	r2, [r0, #8]
   19e60:	cmp	r5, r3
   19e64:	cmpeq	r4, r2
   19e68:	bne	19df8 <__assert_fail@plt+0x8a6c>
   19e6c:	mov	r1, #1
   19e70:	b	19e18 <__assert_fail@plt+0x8a8c>
   19e74:	orrs	r3, r8, r9
   19e78:	bne	19e44 <__assert_fail@plt+0x8ab8>
   19e7c:	mov	r1, #1
   19e80:	b	19e18 <__assert_fail@plt+0x8a8c>
   19e84:	movw	r3, #48576	; 0xbdc0
   19e88:	movt	r3, #1
   19e8c:	movw	r1, #48588	; 0xbdcc
   19e90:	movt	r1, #1
   19e94:	movw	r0, #48608	; 0xbde0
   19e98:	movt	r0, #1
   19e9c:	mov	r2, #60	; 0x3c
   19ea0:	bl	1138c <__assert_fail@plt>
   19ea4:	strd	r4, [sp, #-12]!
   19ea8:	mov	r4, r0
   19eac:	str	lr, [sp, #8]
   19eb0:	sub	sp, sp, #12
   19eb4:	bl	1126c <fileno@plt>
   19eb8:	cmp	r0, #0
   19ebc:	mov	r0, r4
   19ec0:	blt	19f44 <__assert_fail@plt+0x8bb8>
   19ec4:	bl	111c4 <__freading@plt>
   19ec8:	cmp	r0, #0
   19ecc:	bne	19f10 <__assert_fail@plt+0x8b84>
   19ed0:	mov	r0, r4
   19ed4:	bl	1a180 <__assert_fail@plt+0x8df4>
   19ed8:	cmp	r0, #0
   19edc:	beq	19f40 <__assert_fail@plt+0x8bb4>
   19ee0:	bl	1123c <__errno_location@plt>
   19ee4:	mov	r5, r0
   19ee8:	mov	r0, r4
   19eec:	ldr	r4, [r5]
   19ef0:	bl	11284 <fclose@plt>
   19ef4:	cmp	r4, #0
   19ef8:	mvnne	r0, #0
   19efc:	strne	r4, [r5]
   19f00:	add	sp, sp, #12
   19f04:	ldrd	r4, [sp]
   19f08:	add	sp, sp, #8
   19f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   19f10:	mov	r0, r4
   19f14:	bl	1126c <fileno@plt>
   19f18:	mov	r1, #1
   19f1c:	mov	r2, #0
   19f20:	mov	r3, #0
   19f24:	str	r1, [sp]
   19f28:	bl	11158 <lseek64@plt>
   19f2c:	mvn	r3, #0
   19f30:	mvn	r2, #0
   19f34:	cmp	r1, r3
   19f38:	cmpeq	r0, r2
   19f3c:	bne	19ed0 <__assert_fail@plt+0x8b44>
   19f40:	mov	r0, r4
   19f44:	add	sp, sp, #12
   19f48:	ldrd	r4, [sp]
   19f4c:	ldr	lr, [sp, #8]
   19f50:	add	sp, sp, #12
   19f54:	b	11284 <fclose@plt>
   19f58:	push	{r1, r2, r3}
   19f5c:	strd	r4, [sp, #-20]!	; 0xffffffec
   19f60:	strd	r6, [sp, #8]
   19f64:	str	lr, [sp, #16]
   19f68:	sub	sp, sp, #8
   19f6c:	ldr	r1, [sp, #28]
   19f70:	add	r2, sp, #32
   19f74:	str	r2, [sp, #4]
   19f78:	cmp	r1, #0
   19f7c:	beq	1a058 <__assert_fail@plt+0x8ccc>
   19f80:	movw	r3, #1030	; 0x406
   19f84:	mov	r6, r0
   19f88:	cmp	r1, r3
   19f8c:	beq	1a068 <__assert_fail@plt+0x8cdc>
   19f90:	cmp	r1, #11
   19f94:	beq	1a010 <__assert_fail@plt+0x8c84>
   19f98:	ble	19ff0 <__assert_fail@plt+0x8c64>
   19f9c:	movw	r2, #1031	; 0x407
   19fa0:	cmp	r1, r2
   19fa4:	bgt	1a02c <__assert_fail@plt+0x8ca0>
   19fa8:	cmp	r1, r3
   19fac:	bge	19fbc <__assert_fail@plt+0x8c30>
   19fb0:	movw	r3, #1025	; 0x401
   19fb4:	cmp	r1, r3
   19fb8:	beq	1a010 <__assert_fail@plt+0x8c84>
   19fbc:	ldr	r3, [sp, #4]
   19fc0:	mov	r0, r6
   19fc4:	ldr	r2, [r3]
   19fc8:	bl	1129c <fcntl64@plt>
   19fcc:	mov	r4, r0
   19fd0:	mov	r0, r4
   19fd4:	add	sp, sp, #8
   19fd8:	ldrd	r4, [sp]
   19fdc:	ldrd	r6, [sp, #8]
   19fe0:	ldr	lr, [sp, #16]
   19fe4:	add	sp, sp, #20
   19fe8:	add	sp, sp, #12
   19fec:	bx	lr
   19ff0:	cmp	r1, #4
   19ff4:	beq	19fbc <__assert_fail@plt+0x8c30>
   19ff8:	bgt	1a020 <__assert_fail@plt+0x8c94>
   19ffc:	cmp	r1, #2
   1a000:	beq	19fbc <__assert_fail@plt+0x8c30>
   1a004:	bgt	1a010 <__assert_fail@plt+0x8c84>
   1a008:	cmp	r1, #1
   1a00c:	bne	19fbc <__assert_fail@plt+0x8c30>
   1a010:	mov	r0, r6
   1a014:	bl	1129c <fcntl64@plt>
   1a018:	mov	r4, r0
   1a01c:	b	19fd0 <__assert_fail@plt+0x8c44>
   1a020:	cmp	r1, #9
   1a024:	bne	19fbc <__assert_fail@plt+0x8c30>
   1a028:	b	1a010 <__assert_fail@plt+0x8c84>
   1a02c:	movw	r3, #1033	; 0x409
   1a030:	cmp	r1, r3
   1a034:	beq	19fbc <__assert_fail@plt+0x8c30>
   1a038:	blt	1a010 <__assert_fail@plt+0x8c84>
   1a03c:	movw	r3, #1034	; 0x40a
   1a040:	cmp	r1, r3
   1a044:	bne	19fbc <__assert_fail@plt+0x8c30>
   1a048:	mov	r0, r6
   1a04c:	bl	1129c <fcntl64@plt>
   1a050:	mov	r4, r0
   1a054:	b	19fd0 <__assert_fail@plt+0x8c44>
   1a058:	ldr	r2, [sp, #32]
   1a05c:	bl	1129c <fcntl64@plt>
   1a060:	mov	r4, r0
   1a064:	b	19fd0 <__assert_fail@plt+0x8c44>
   1a068:	movw	r5, #49916	; 0xc2fc
   1a06c:	movt	r5, #2
   1a070:	ldr	r7, [r2]
   1a074:	add	r2, sp, #36	; 0x24
   1a078:	ldr	r3, [r5]
   1a07c:	str	r2, [sp, #4]
   1a080:	mov	r2, r7
   1a084:	cmp	r3, #0
   1a088:	blt	1a0a4 <__assert_fail@plt+0x8d18>
   1a08c:	bl	1129c <fcntl64@plt>
   1a090:	subs	r4, r0, #0
   1a094:	blt	1a10c <__assert_fail@plt+0x8d80>
   1a098:	mov	r3, #1
   1a09c:	str	r3, [r5]
   1a0a0:	b	19fd0 <__assert_fail@plt+0x8c44>
   1a0a4:	mov	r1, #0
   1a0a8:	bl	1129c <fcntl64@plt>
   1a0ac:	subs	r4, r0, #0
   1a0b0:	blt	19fd0 <__assert_fail@plt+0x8c44>
   1a0b4:	ldr	r3, [r5]
   1a0b8:	cmn	r3, #1
   1a0bc:	bne	19fd0 <__assert_fail@plt+0x8c44>
   1a0c0:	mov	r1, #1
   1a0c4:	mov	r0, r4
   1a0c8:	bl	1129c <fcntl64@plt>
   1a0cc:	subs	r2, r0, #0
   1a0d0:	blt	1a0ec <__assert_fail@plt+0x8d60>
   1a0d4:	orr	r2, r2, #1
   1a0d8:	mov	r1, #2
   1a0dc:	mov	r0, r4
   1a0e0:	bl	1129c <fcntl64@plt>
   1a0e4:	cmn	r0, #1
   1a0e8:	bne	19fd0 <__assert_fail@plt+0x8c44>
   1a0ec:	bl	1123c <__errno_location@plt>
   1a0f0:	mov	r5, r0
   1a0f4:	mov	r0, r4
   1a0f8:	ldr	r6, [r5]
   1a0fc:	mvn	r4, #0
   1a100:	bl	11350 <close@plt>
   1a104:	str	r6, [r5]
   1a108:	b	19fd0 <__assert_fail@plt+0x8c44>
   1a10c:	bl	1123c <__errno_location@plt>
   1a110:	ldr	r3, [r0]
   1a114:	cmp	r3, #22
   1a118:	bne	1a098 <__assert_fail@plt+0x8d0c>
   1a11c:	mov	r2, r7
   1a120:	mov	r0, r6
   1a124:	mov	r1, #0
   1a128:	bl	1129c <fcntl64@plt>
   1a12c:	subs	r4, r0, #0
   1a130:	mvnge	r3, #0
   1a134:	strge	r3, [r5]
   1a138:	bge	1a0c0 <__assert_fail@plt+0x8d34>
   1a13c:	b	19fd0 <__assert_fail@plt+0x8c44>
   1a140:	push	{r1, r2, r3}
   1a144:	push	{lr}		; (str lr, [sp, #-4]!)
   1a148:	sub	sp, sp, #8
   1a14c:	ldr	r1, [sp, #12]
   1a150:	ands	r2, r1, #64	; 0x40
   1a154:	bne	1a170 <__assert_fail@plt+0x8de4>
   1a158:	bl	111a0 <open64@plt>
   1a15c:	bl	187b8 <__assert_fail@plt+0x742c>
   1a160:	add	sp, sp, #8
   1a164:	pop	{lr}		; (ldr lr, [sp], #4)
   1a168:	add	sp, sp, #12
   1a16c:	bx	lr
   1a170:	add	r3, sp, #16
   1a174:	ldr	r2, [sp, #16]
   1a178:	str	r3, [sp, #4]
   1a17c:	b	1a158 <__assert_fail@plt+0x8dcc>
   1a180:	str	r4, [sp, #-8]!
   1a184:	subs	r4, r0, #0
   1a188:	str	lr, [sp, #4]
   1a18c:	sub	sp, sp, #8
   1a190:	beq	1a1ac <__assert_fail@plt+0x8e20>
   1a194:	bl	111c4 <__freading@plt>
   1a198:	cmp	r0, #0
   1a19c:	beq	1a1ac <__assert_fail@plt+0x8e20>
   1a1a0:	ldr	r3, [r4]
   1a1a4:	tst	r3, #256	; 0x100
   1a1a8:	bne	1a1c4 <__assert_fail@plt+0x8e38>
   1a1ac:	mov	r0, r4
   1a1b0:	add	sp, sp, #8
   1a1b4:	ldr	r4, [sp]
   1a1b8:	ldr	lr, [sp, #4]
   1a1bc:	add	sp, sp, #8
   1a1c0:	b	1108c <fflush@plt>
   1a1c4:	mov	r1, #1
   1a1c8:	mov	r2, #0
   1a1cc:	mov	r3, #0
   1a1d0:	mov	r0, r4
   1a1d4:	str	r1, [sp]
   1a1d8:	bl	1a1e0 <__assert_fail@plt+0x8e54>
   1a1dc:	b	1a1ac <__assert_fail@plt+0x8e20>
   1a1e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a1e4:	mov	r4, r0
   1a1e8:	ldr	ip, [r0, #4]
   1a1ec:	strd	r6, [sp, #8]
   1a1f0:	str	lr, [sp, #20]
   1a1f4:	ldr	lr, [r0, #8]
   1a1f8:	str	r8, [sp, #16]
   1a1fc:	sub	sp, sp, #8
   1a200:	ldr	r5, [sp, #32]
   1a204:	cmp	lr, ip
   1a208:	beq	1a230 <__assert_fail@plt+0x8ea4>
   1a20c:	mov	r0, r4
   1a210:	str	r5, [sp, #32]
   1a214:	add	sp, sp, #8
   1a218:	ldrd	r4, [sp]
   1a21c:	ldrd	r6, [sp, #8]
   1a220:	ldr	r8, [sp, #16]
   1a224:	ldr	lr, [sp, #20]
   1a228:	add	sp, sp, #24
   1a22c:	b	11290 <fseeko64@plt>
   1a230:	ldr	ip, [r0, #16]
   1a234:	ldr	lr, [r0, #20]
   1a238:	cmp	lr, ip
   1a23c:	bne	1a20c <__assert_fail@plt+0x8e80>
   1a240:	ldr	r8, [r0, #36]	; 0x24
   1a244:	cmp	r8, #0
   1a248:	bne	1a20c <__assert_fail@plt+0x8e80>
   1a24c:	mov	r6, r2
   1a250:	mov	r7, r3
   1a254:	bl	1126c <fileno@plt>
   1a258:	mov	r2, r6
   1a25c:	mov	r3, r7
   1a260:	str	r5, [sp]
   1a264:	bl	11158 <lseek64@plt>
   1a268:	mvn	r3, #0
   1a26c:	mvn	r2, #0
   1a270:	cmp	r1, r3
   1a274:	cmpeq	r0, r2
   1a278:	beq	1a2a8 <__assert_fail@plt+0x8f1c>
   1a27c:	ldr	r3, [r4]
   1a280:	strd	r0, [r4, #80]	; 0x50
   1a284:	bic	r3, r3, #16
   1a288:	str	r3, [r4]
   1a28c:	mov	r0, r8
   1a290:	add	sp, sp, #8
   1a294:	ldrd	r4, [sp]
   1a298:	ldrd	r6, [sp, #8]
   1a29c:	ldr	r8, [sp, #16]
   1a2a0:	add	sp, sp, #20
   1a2a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2a8:	mvn	r8, #0
   1a2ac:	b	1a28c <__assert_fail@plt+0x8f00>
   1a2b0:	mov	r0, #14
   1a2b4:	str	r4, [sp, #-8]!
   1a2b8:	str	lr, [sp, #4]
   1a2bc:	bl	112cc <nl_langinfo@plt>
   1a2c0:	cmp	r0, #0
   1a2c4:	beq	1a2e8 <__assert_fail@plt+0x8f5c>
   1a2c8:	ldrb	r2, [r0]
   1a2cc:	movw	r3, #48632	; 0xbdf8
   1a2d0:	movt	r3, #1
   1a2d4:	ldr	r4, [sp]
   1a2d8:	add	sp, sp, #4
   1a2dc:	cmp	r2, #0
   1a2e0:	moveq	r0, r3
   1a2e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2e8:	ldr	r4, [sp]
   1a2ec:	add	sp, sp, #4
   1a2f0:	movw	r0, #48632	; 0xbdf8
   1a2f4:	movt	r0, #1
   1a2f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2fc:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a300:	mov	r5, r2
   1a304:	strd	r6, [sp, #8]
   1a308:	subs	r6, r0, #0
   1a30c:	mov	r7, r1
   1a310:	str	lr, [sp, #16]
   1a314:	sub	sp, sp, #12
   1a318:	addeq	r6, sp, #4
   1a31c:	mov	r0, r6
   1a320:	bl	11188 <mbrtowc@plt>
   1a324:	cmp	r5, #0
   1a328:	cmnne	r0, #3
   1a32c:	mov	r4, r0
   1a330:	bhi	1a34c <__assert_fail@plt+0x8fc0>
   1a334:	mov	r0, r4
   1a338:	add	sp, sp, #12
   1a33c:	ldrd	r4, [sp]
   1a340:	ldrd	r6, [sp, #8]
   1a344:	add	sp, sp, #16
   1a348:	pop	{pc}		; (ldr pc, [sp], #4)
   1a34c:	mov	r0, #0
   1a350:	bl	1a3b0 <__assert_fail@plt+0x9024>
   1a354:	cmp	r0, #0
   1a358:	bne	1a334 <__assert_fail@plt+0x8fa8>
   1a35c:	ldrb	r3, [r7]
   1a360:	mov	r4, #1
   1a364:	str	r3, [r6]
   1a368:	b	1a334 <__assert_fail@plt+0x8fa8>
   1a36c:	umull	r2, r3, r1, r2
   1a370:	cmp	r3, #0
   1a374:	bne	1a380 <__assert_fail@plt+0x8ff4>
   1a378:	mov	r1, r2
   1a37c:	b	19ca4 <__assert_fail@plt+0x8918>
   1a380:	str	r4, [sp, #-8]!
   1a384:	str	lr, [sp, #4]
   1a388:	bl	1123c <__errno_location@plt>
   1a38c:	mov	r3, #12
   1a390:	ldr	r4, [sp]
   1a394:	add	sp, sp, #4
   1a398:	str	r3, [r0]
   1a39c:	mov	r0, #0
   1a3a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3a4:	mov	r2, #3
   1a3a8:	mov	r1, #0
   1a3ac:	b	19f58 <__assert_fail@plt+0x8bcc>
   1a3b0:	push	{lr}		; (str lr, [sp, #-4]!)
   1a3b4:	sub	sp, sp, #268	; 0x10c
   1a3b8:	movw	r2, #257	; 0x101
   1a3bc:	add	r1, sp, #4
   1a3c0:	bl	1a408 <__assert_fail@plt+0x907c>
   1a3c4:	cmp	r0, #0
   1a3c8:	movne	r0, #0
   1a3cc:	bne	1a400 <__assert_fail@plt+0x9074>
   1a3d0:	movw	r1, #48640	; 0xbe00
   1a3d4:	movt	r1, #1
   1a3d8:	add	r0, sp, #4
   1a3dc:	bl	11074 <strcmp@plt>
   1a3e0:	cmp	r0, #0
   1a3e4:	beq	1a400 <__assert_fail@plt+0x9074>
   1a3e8:	add	r0, sp, #4
   1a3ec:	movw	r1, #48644	; 0xbe04
   1a3f0:	movt	r1, #1
   1a3f4:	bl	11074 <strcmp@plt>
   1a3f8:	adds	r0, r0, #0
   1a3fc:	movne	r0, #1
   1a400:	add	sp, sp, #268	; 0x10c
   1a404:	pop	{pc}		; (ldr pc, [sp], #4)
   1a408:	strd	r4, [sp, #-16]!
   1a40c:	mov	r5, r1
   1a410:	mov	r1, #0
   1a414:	mov	r4, r2
   1a418:	str	r6, [sp, #8]
   1a41c:	str	lr, [sp, #12]
   1a420:	bl	112a8 <setlocale@plt>
   1a424:	subs	r6, r0, #0
   1a428:	beq	1a4a8 <__assert_fail@plt+0x911c>
   1a42c:	bl	1120c <strlen@plt>
   1a430:	cmp	r4, r0
   1a434:	bhi	1a454 <__assert_fail@plt+0x90c8>
   1a438:	cmp	r4, #0
   1a43c:	moveq	r0, #34	; 0x22
   1a440:	bne	1a478 <__assert_fail@plt+0x90ec>
   1a444:	ldrd	r4, [sp]
   1a448:	ldr	r6, [sp, #8]
   1a44c:	add	sp, sp, #12
   1a450:	pop	{pc}		; (ldr pc, [sp], #4)
   1a454:	add	r2, r0, #1
   1a458:	mov	r1, r6
   1a45c:	mov	r0, r5
   1a460:	bl	110c8 <memcpy@plt>
   1a464:	ldrd	r4, [sp]
   1a468:	mov	r0, #0
   1a46c:	ldr	r6, [sp, #8]
   1a470:	add	sp, sp, #12
   1a474:	pop	{pc}		; (ldr pc, [sp], #4)
   1a478:	sub	r4, r4, #1
   1a47c:	mov	r1, r6
   1a480:	mov	r2, r4
   1a484:	mov	r0, r5
   1a488:	bl	110c8 <memcpy@plt>
   1a48c:	mov	r3, #0
   1a490:	mov	r0, #34	; 0x22
   1a494:	strb	r3, [r5, r4]
   1a498:	ldrd	r4, [sp]
   1a49c:	ldr	r6, [sp, #8]
   1a4a0:	add	sp, sp, #12
   1a4a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4a8:	cmp	r4, #0
   1a4ac:	mov	r0, #22
   1a4b0:	strbne	r6, [r5]
   1a4b4:	ldrd	r4, [sp]
   1a4b8:	ldr	r6, [sp, #8]
   1a4bc:	add	sp, sp, #12
   1a4c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4c4:	mov	r1, #0
   1a4c8:	b	112a8 <setlocale@plt>
   1a4cc:	cmp	r3, #0
   1a4d0:	cmpeq	r2, #0
   1a4d4:	bne	1a4ec <__assert_fail@plt+0x9160>
   1a4d8:	cmp	r1, #0
   1a4dc:	cmpeq	r0, #0
   1a4e0:	mvnne	r1, #0
   1a4e4:	mvnne	r0, #0
   1a4e8:	b	1a508 <__assert_fail@plt+0x917c>
   1a4ec:	sub	sp, sp, #8
   1a4f0:	push	{sp, lr}
   1a4f4:	bl	1a518 <__assert_fail@plt+0x918c>
   1a4f8:	ldr	lr, [sp, #4]
   1a4fc:	add	sp, sp, #8
   1a500:	pop	{r2, r3}
   1a504:	bx	lr
   1a508:	push	{r1, lr}
   1a50c:	mov	r0, #8
   1a510:	bl	1105c <raise@plt>
   1a514:	pop	{r1, pc}
   1a518:	cmp	r1, r3
   1a51c:	cmpeq	r0, r2
   1a520:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a524:	mov	r4, r0
   1a528:	movcc	r0, #0
   1a52c:	mov	r5, r1
   1a530:	ldr	lr, [sp, #36]	; 0x24
   1a534:	movcc	r1, r0
   1a538:	bcc	1a634 <__assert_fail@plt+0x92a8>
   1a53c:	cmp	r3, #0
   1a540:	clzeq	ip, r2
   1a544:	clzne	ip, r3
   1a548:	addeq	ip, ip, #32
   1a54c:	cmp	r5, #0
   1a550:	clzeq	r1, r4
   1a554:	addeq	r1, r1, #32
   1a558:	clzne	r1, r5
   1a55c:	sub	ip, ip, r1
   1a560:	sub	sl, ip, #32
   1a564:	lsl	r9, r3, ip
   1a568:	rsb	fp, ip, #32
   1a56c:	orr	r9, r9, r2, lsl sl
   1a570:	orr	r9, r9, r2, lsr fp
   1a574:	lsl	r8, r2, ip
   1a578:	cmp	r5, r9
   1a57c:	cmpeq	r4, r8
   1a580:	movcc	r0, #0
   1a584:	movcc	r1, r0
   1a588:	bcc	1a5a4 <__assert_fail@plt+0x9218>
   1a58c:	mov	r0, #1
   1a590:	subs	r4, r4, r8
   1a594:	lsl	r1, r0, sl
   1a598:	orr	r1, r1, r0, lsr fp
   1a59c:	lsl	r0, r0, ip
   1a5a0:	sbc	r5, r5, r9
   1a5a4:	cmp	ip, #0
   1a5a8:	beq	1a634 <__assert_fail@plt+0x92a8>
   1a5ac:	lsr	r6, r8, #1
   1a5b0:	orr	r6, r6, r9, lsl #31
   1a5b4:	lsr	r7, r9, #1
   1a5b8:	mov	r2, ip
   1a5bc:	b	1a5e0 <__assert_fail@plt+0x9254>
   1a5c0:	subs	r3, r4, r6
   1a5c4:	sbc	r8, r5, r7
   1a5c8:	adds	r3, r3, r3
   1a5cc:	adc	r8, r8, r8
   1a5d0:	adds	r4, r3, #1
   1a5d4:	adc	r5, r8, #0
   1a5d8:	subs	r2, r2, #1
   1a5dc:	beq	1a5fc <__assert_fail@plt+0x9270>
   1a5e0:	cmp	r5, r7
   1a5e4:	cmpeq	r4, r6
   1a5e8:	bcs	1a5c0 <__assert_fail@plt+0x9234>
   1a5ec:	adds	r4, r4, r4
   1a5f0:	adc	r5, r5, r5
   1a5f4:	subs	r2, r2, #1
   1a5f8:	bne	1a5e0 <__assert_fail@plt+0x9254>
   1a5fc:	lsr	r3, r4, ip
   1a600:	orr	r3, r3, r5, lsl fp
   1a604:	lsr	r2, r5, ip
   1a608:	orr	r3, r3, r5, lsr sl
   1a60c:	adds	r0, r0, r4
   1a610:	mov	r4, r3
   1a614:	lsl	r3, r2, ip
   1a618:	orr	r3, r3, r4, lsl sl
   1a61c:	lsl	ip, r4, ip
   1a620:	orr	r3, r3, r4, lsr fp
   1a624:	adc	r1, r1, r5
   1a628:	subs	r0, r0, ip
   1a62c:	mov	r5, r2
   1a630:	sbc	r1, r1, r3
   1a634:	cmp	lr, #0
   1a638:	strdne	r4, [lr]
   1a63c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a640:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a644:	mov	r7, r0
   1a648:	ldr	r6, [pc, #72]	; 1a698 <__assert_fail@plt+0x930c>
   1a64c:	ldr	r5, [pc, #72]	; 1a69c <__assert_fail@plt+0x9310>
   1a650:	add	r6, pc, r6
   1a654:	add	r5, pc, r5
   1a658:	sub	r6, r6, r5
   1a65c:	mov	r8, r1
   1a660:	mov	r9, r2
   1a664:	bl	1100c <fstatfs64@plt-0x20>
   1a668:	asrs	r6, r6, #2
   1a66c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a670:	mov	r4, #0
   1a674:	add	r4, r4, #1
   1a678:	ldr	r3, [r5], #4
   1a67c:	mov	r2, r9
   1a680:	mov	r1, r8
   1a684:	mov	r0, r7
   1a688:	blx	r3
   1a68c:	cmp	r6, r4
   1a690:	bne	1a674 <__assert_fail@plt+0x92e8>
   1a694:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a698:			; <UNDEFINED> instruction: 0x000118bc
   1a69c:			; <UNDEFINED> instruction: 0x000118b4
   1a6a0:	bx	lr
   1a6a4:	ldr	r3, [pc, #12]	; 1a6b8 <__assert_fail@plt+0x932c>
   1a6a8:	mov	r1, #0
   1a6ac:	add	r3, pc, r3
   1a6b0:	ldr	r2, [r3]
   1a6b4:	b	11248 <__cxa_atexit@plt>
   1a6b8:	andeq	r1, r1, r4, lsl #21

Disassembly of section .fini:

0001a6bc <.fini>:
   1a6bc:	push	{r3, lr}
   1a6c0:	pop	{r3, pc}
