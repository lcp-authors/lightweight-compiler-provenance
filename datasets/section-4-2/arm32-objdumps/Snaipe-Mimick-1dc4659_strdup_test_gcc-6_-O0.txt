
../repos/Snaipe-Mimick-1dc4659/sample/strdup/strdup_test:     file format elf32-littlearm


Disassembly of section .init:

00011214 <.init>:
   11214:	push	{r3, lr}
   11218:	bl	11378 <_start@@Base+0x3c>
   1121c:	pop	{r3, pc}

Disassembly of section .plt:

00011220 <strstr@plt-0x14>:
   11220:	push	{lr}		; (str lr, [sp, #-4]!)
   11224:	ldr	lr, [pc, #4]	; 11230 <strstr@plt-0x4>
   11228:	add	lr, pc, lr
   1122c:	ldr	pc, [lr, #8]!
   11230:	ldrdeq	r3, [r1], -r0

00011234 <strstr@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #77824	; 0x13000
   1123c:	ldr	pc, [ip, #3536]!	; 0xdd0

00011240 <raise@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #77824	; 0x13000
   11248:	ldr	pc, [ip, #3528]!	; 0xdc8

0001124c <strcmp@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #77824	; 0x13000
   11254:	ldr	pc, [ip, #3520]!	; 0xdc0

00011258 <mprotect@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #77824	; 0x13000
   11260:	ldr	pc, [ip, #3512]!	; 0xdb8

00011264 <free@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #77824	; 0x13000
   1126c:	ldr	pc, [ip, #3504]!	; 0xdb0

00011270 <memcpy@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #77824	; 0x13000
   11278:	ldr	pc, [ip, #3496]!	; 0xda8

0001127c <realloc@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #77824	; 0x13000
   11284:	ldr	pc, [ip, #3488]!	; 0xda0

00011288 <malloc@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #77824	; 0x13000
   11290:	ldr	pc, [ip, #3480]!	; 0xd98

00011294 <__libc_start_main@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #77824	; 0x13000
   1129c:	ldr	pc, [ip, #3472]!	; 0xd90

000112a0 <__gmon_start__@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #77824	; 0x13000
   112a8:	ldr	pc, [ip, #3464]!	; 0xd88

000112ac <strlen@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #77824	; 0x13000
   112b4:	ldr	pc, [ip, #3456]!	; 0xd80

000112b8 <mmap@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #77824	; 0x13000
   112c0:	ldr	pc, [ip, #3448]!	; 0xd78

000112c4 <strchr@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #77824	; 0x13000
   112cc:	ldr	pc, [ip, #3440]!	; 0xd70

000112d0 <fprintf@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #77824	; 0x13000
   112d8:	ldr	pc, [ip, #3432]!	; 0xd68

000112dc <__errno_location@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #77824	; 0x13000
   112e4:	ldr	pc, [ip, #3424]!	; 0xd60

000112e8 <snprintf@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #77824	; 0x13000
   112f0:	ldr	pc, [ip, #3416]!	; 0xd58

000112f4 <memset@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #77824	; 0x13000
   112fc:	ldr	pc, [ip, #3408]!	; 0xd50

00011300 <munmap@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #77824	; 0x13000
   11308:	ldr	pc, [ip, #3400]!	; 0xd48

0001130c <my_strdup@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #77824	; 0x13000
   11314:	ldr	pc, [ip, #3392]!	; 0xd40

00011318 <__tls_get_addr@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #77824	; 0x13000
   11320:	ldr	pc, [ip, #3384]!	; 0xd38

00011324 <strncmp@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #77824	; 0x13000
   1132c:	ldr	pc, [ip, #3376]!	; 0xd30

00011330 <abort@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #77824	; 0x13000
   11338:	ldr	pc, [ip, #3368]!	; 0xd28

Disassembly of section .text:

0001133c <_start@@Base>:
   1133c:	mov	fp, #0
   11340:	mov	lr, #0
   11344:	pop	{r1}		; (ldr r1, [sp], #4)
   11348:	mov	r2, sp
   1134c:	push	{r2}		; (str r2, [sp, #-4]!)
   11350:	push	{r0}		; (str r0, [sp, #-4]!)
   11354:	ldr	ip, [pc, #16]	; 1136c <_start@@Base+0x30>
   11358:	push	{ip}		; (str ip, [sp, #-4]!)
   1135c:	ldr	r0, [pc, #12]	; 11370 <_start@@Base+0x34>
   11360:	ldr	r3, [pc, #12]	; 11374 <_start@@Base+0x38>
   11364:	bl	11294 <__libc_start_main@plt>
   11368:	bl	11330 <abort@plt>
   1136c:	andeq	r4, r1, ip, lsl #9
   11370:	muleq	r1, ip, ip
   11374:	andeq	r4, r1, ip, lsr #8
   11378:	ldr	r3, [pc, #20]	; 11394 <_start@@Base+0x58>
   1137c:	ldr	r2, [pc, #20]	; 11398 <_start@@Base+0x5c>
   11380:	add	r3, pc, r3
   11384:	ldr	r2, [r3, r2]
   11388:	cmp	r2, #0
   1138c:	bxeq	lr
   11390:	b	112a0 <__gmon_start__@plt>
   11394:	andeq	r3, r1, r8, ror ip
   11398:	andeq	r0, r0, r4, lsr #1
   1139c:	ldr	r3, [pc, #28]	; 113c0 <_start@@Base+0x84>
   113a0:	ldr	r0, [pc, #28]	; 113c4 <_start@@Base+0x88>
   113a4:	sub	r3, r3, r0
   113a8:	cmp	r3, #6
   113ac:	bxls	lr
   113b0:	ldr	r3, [pc, #16]	; 113c8 <_start@@Base+0x8c>
   113b4:	cmp	r3, #0
   113b8:	bxeq	lr
   113bc:	bx	r3
   113c0:	ldrdeq	r5, [r2], -r7
   113c4:	ldrdeq	r5, [r2], -r4
   113c8:	andeq	r0, r0, r0
   113cc:	ldr	r1, [pc, #36]	; 113f8 <_start@@Base+0xbc>
   113d0:	ldr	r0, [pc, #36]	; 113fc <_start@@Base+0xc0>
   113d4:	sub	r1, r1, r0
   113d8:	asr	r1, r1, #2
   113dc:	add	r1, r1, r1, lsr #31
   113e0:	asrs	r1, r1, #1
   113e4:	bxeq	lr
   113e8:	ldr	r3, [pc, #16]	; 11400 <_start@@Base+0xc4>
   113ec:	cmp	r3, #0
   113f0:	bxeq	lr
   113f4:	bx	r3
   113f8:	ldrdeq	r5, [r2], -r4
   113fc:	ldrdeq	r5, [r2], -r4
   11400:	andeq	r0, r0, r0
   11404:	push	{r4, lr}
   11408:	ldr	r4, [pc, #24]	; 11428 <_start@@Base+0xec>
   1140c:	ldrb	r3, [r4]
   11410:	cmp	r3, #0
   11414:	popne	{r4, pc}
   11418:	bl	1139c <_start@@Base+0x60>
   1141c:	mov	r3, #1
   11420:	strb	r3, [r4]
   11424:	pop	{r4, pc}
   11428:	ldrdeq	r5, [r2], -r4
   1142c:	ldr	r0, [pc, #40]	; 1145c <_start@@Base+0x120>
   11430:	ldr	r3, [r0]
   11434:	cmp	r3, #0
   11438:	bne	11440 <_start@@Base+0x104>
   1143c:	b	113cc <_start@@Base+0x90>
   11440:	ldr	r3, [pc, #24]	; 11460 <_start@@Base+0x124>
   11444:	cmp	r3, #0
   11448:	beq	1143c <_start@@Base+0x100>
   1144c:	push	{r4, lr}
   11450:	blx	r3
   11454:	pop	{r4, lr}
   11458:	b	113cc <_start@@Base+0x90>
   1145c:	strdeq	r4, [r2], -ip
   11460:	andeq	r0, r0, r0
   11464:	push	{fp, lr}
   11468:	add	fp, sp, #4
   1146c:	sub	sp, sp, #96	; 0x60
   11470:	str	r0, [fp, #-96]	; 0xffffffa0
   11474:	bl	11f10 <mmk_matcher_ctx@@Base>
   11478:	str	r0, [fp, #-24]	; 0xffffffe8
   1147c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11480:	cmp	r3, #0
   11484:	beq	116dc <_start@@Base+0x3a0>
   11488:	bl	13400 <mmk_ctx@@Base>
   1148c:	mov	r3, r0
   11490:	mov	r0, r3
   11494:	bl	12ff4 <mmk_stub_context@@Base>
   11498:	str	r0, [fp, #-28]	; 0xffffffe4
   1149c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   114a0:	ldr	r3, [r3]
   114a4:	cmp	r3, #0
   114a8:	bne	114f8 <_start@@Base+0x1bc>
   114ac:	mov	r0, #44	; 0x2c
   114b0:	bl	13e54 <mmk_malloc@@Base>
   114b4:	str	r0, [fp, #-32]	; 0xffffffe0
   114b8:	bl	14130 <mmk_when_get_result@@Base>
   114bc:	mov	r2, r0
   114c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   114c4:	add	ip, r3, #8
   114c8:	mov	lr, r2
   114cc:	ldm	lr!, {r0, r1, r2, r3}
   114d0:	stmia	ip!, {r0, r1, r2, r3}
   114d4:	ldr	r3, [lr]
   114d8:	str	r3, [ip]
   114dc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   114e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   114e4:	str	r2, [r3, #40]	; 0x28
   114e8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   114ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
   114f0:	bl	1415c <mmk_when_impl@@Base>
   114f4:	b	116cc <_start@@Base+0x390>
   114f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   114fc:	ldr	r3, [r3]
   11500:	cmp	r3, #1
   11504:	bne	116cc <_start@@Base+0x390>
   11508:	mov	r3, #0
   1150c:	str	r3, [fp, #-8]
   11510:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11514:	bl	12334 <mmk_mock_params_begin@@Base>
   11518:	str	r0, [fp, #-12]
   1151c:	b	11684 <_start@@Base+0x348>
   11520:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11524:	str	r3, [fp, #-36]	; 0xffffffdc
   11528:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1152c:	ldr	r3, [r3, #8]
   11530:	cmp	r3, #0
   11534:	beq	11624 <_start@@Base+0x2e8>
   11538:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1153c:	ldr	r3, [r3, #8]
   11540:	str	r3, [fp, #-36]	; 0xffffffdc
   11544:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11548:	ldr	r3, [r3]
   1154c:	cmp	r3, #0
   11550:	beq	11648 <_start@@Base+0x30c>
   11554:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11558:	ldr	r3, [r3]
   1155c:	cmp	r3, #0
   11560:	bge	115e4 <_start@@Base+0x2a8>
   11564:	ldr	r3, [fp, #-12]
   11568:	add	r3, r3, #12
   1156c:	sub	r1, fp, #96	; 0x60
   11570:	mov	r2, #4
   11574:	mov	r0, r3
   11578:	bl	13a48 <mmk_memcmp@@Base>
   1157c:	str	r0, [fp, #-40]	; 0xffffffd8
   11580:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11584:	cmp	r3, #0
   11588:	bne	115a0 <_start@@Base+0x264>
   1158c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11590:	ldr	r3, [r3]
   11594:	and	r3, r3, #2
   11598:	cmp	r3, #0
   1159c:	beq	11660 <_start@@Base+0x324>
   115a0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   115a4:	cmp	r3, #0
   115a8:	bge	115c0 <_start@@Base+0x284>
   115ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   115b0:	ldr	r3, [r3]
   115b4:	and	r3, r3, #4
   115b8:	cmp	r3, #0
   115bc:	beq	11668 <_start@@Base+0x32c>
   115c0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   115c4:	cmp	r3, #0
   115c8:	ble	11648 <_start@@Base+0x30c>
   115cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   115d0:	ldr	r3, [r3]
   115d4:	and	r3, r3, #8
   115d8:	cmp	r3, #0
   115dc:	bne	11648 <_start@@Base+0x30c>
   115e0:	b	11674 <_start@@Base+0x338>
   115e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   115e8:	ldr	r3, [r3]
   115ec:	cmp	r3, #1
   115f0:	bne	11648 <_start@@Base+0x30c>
   115f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   115f8:	bl	12034 <mmk_matcher_get_predicate@@Base>
   115fc:	str	r0, [fp, #-44]	; 0xffffffd4
   11600:	ldr	r3, [fp, #-12]
   11604:	ldr	r2, [r3, #12]
   11608:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1160c:	mov	r0, r2
   11610:	blx	r3
   11614:	mov	r3, r0
   11618:	cmp	r3, #0
   1161c:	bne	11648 <_start@@Base+0x30c>
   11620:	b	11674 <_start@@Base+0x338>
   11624:	ldr	r3, [fp, #-12]
   11628:	add	r3, r3, #12
   1162c:	sub	r1, fp, #96	; 0x60
   11630:	mov	r2, #4
   11634:	mov	r0, r3
   11638:	bl	13a48 <mmk_memcmp@@Base>
   1163c:	mov	r3, r0
   11640:	cmp	r3, #0
   11644:	bne	11670 <_start@@Base+0x334>
   11648:	ldr	r3, [fp, #-12]
   1164c:	ldr	r3, [r3]
   11650:	ldr	r2, [fp, #-8]
   11654:	add	r3, r2, r3
   11658:	str	r3, [fp, #-8]
   1165c:	b	11674 <_start@@Base+0x338>
   11660:	nop			; (mov r0, r0)
   11664:	b	11674 <_start@@Base+0x338>
   11668:	nop			; (mov r0, r0)
   1166c:	b	11674 <_start@@Base+0x338>
   11670:	nop			; (mov r0, r0)
   11674:	ldr	r1, [fp, #-12]
   11678:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1167c:	bl	12388 <mmk_mock_params_next@@Base>
   11680:	str	r0, [fp, #-12]
   11684:	ldr	r3, [fp, #-12]
   11688:	cmp	r3, #0
   1168c:	bne	11520 <_start@@Base+0x1e4>
   11690:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11694:	str	r3, [fp, #-16]
   11698:	b	116b8 <_start@@Base+0x37c>
   1169c:	ldr	r3, [fp, #-16]
   116a0:	ldr	r3, [r3, #8]
   116a4:	str	r3, [fp, #-48]	; 0xffffffd0
   116a8:	ldr	r0, [fp, #-16]
   116ac:	bl	13ee4 <mmk_free@@Base>
   116b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   116b4:	str	r3, [fp, #-16]
   116b8:	ldr	r3, [fp, #-16]
   116bc:	cmp	r3, #0
   116c0:	bne	1169c <_start@@Base+0x360>
   116c4:	ldr	r0, [fp, #-8]
   116c8:	bl	135fc <mmk_verify_set_times@@Base>
   116cc:	ldr	r3, [pc, #648]	; 1195c <_start@@Base+0x620>
   116d0:	add	r3, pc, r3
   116d4:	ldr	r3, [r3]
   116d8:	b	11950 <_start@@Base+0x614>
   116dc:	sub	r3, fp, #88	; 0x58
   116e0:	mov	r2, #0
   116e4:	str	r2, [r3]
   116e8:	str	r2, [r3, #4]
   116ec:	str	r2, [r3, #8]
   116f0:	str	r2, [r3, #12]
   116f4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   116f8:	str	r3, [fp, #-76]	; 0xffffffb4
   116fc:	sub	r3, fp, #88	; 0x58
   11700:	str	r3, [fp, #-52]	; 0xffffffcc
   11704:	mov	r1, #16
   11708:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1170c:	bl	13810 <mmk_verify_register_call@@Base>
   11710:	bl	12400 <mmk_mock_get_params@@Base>
   11714:	str	r0, [fp, #-20]	; 0xffffffec
   11718:	b	11938 <_start@@Base+0x5fc>
   1171c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11720:	str	r3, [fp, #-56]	; 0xffffffc8
   11724:	ldr	r3, [fp, #-20]	; 0xffffffec
   11728:	ldr	r3, [r3]
   1172c:	str	r3, [fp, #-60]	; 0xffffffc4
   11730:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11734:	ldr	r3, [r3, #8]
   11738:	cmp	r3, #0
   1173c:	beq	11824 <_start@@Base+0x4e8>
   11740:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11744:	ldr	r3, [r3, #8]
   11748:	str	r3, [fp, #-60]	; 0xffffffc4
   1174c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11750:	ldr	r3, [r3]
   11754:	cmp	r3, #0
   11758:	beq	11848 <_start@@Base+0x50c>
   1175c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11760:	ldr	r3, [r3]
   11764:	cmp	r3, #0
   11768:	bge	117e8 <_start@@Base+0x4ac>
   1176c:	sub	r1, fp, #96	; 0x60
   11770:	sub	r3, fp, #96	; 0x60
   11774:	mov	r2, #4
   11778:	mov	r0, r3
   1177c:	bl	13a48 <mmk_memcmp@@Base>
   11780:	str	r0, [fp, #-64]	; 0xffffffc0
   11784:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11788:	cmp	r3, #0
   1178c:	bne	117a4 <_start@@Base+0x468>
   11790:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11794:	ldr	r3, [r3]
   11798:	and	r3, r3, #2
   1179c:	cmp	r3, #0
   117a0:	beq	11920 <_start@@Base+0x5e4>
   117a4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   117a8:	cmp	r3, #0
   117ac:	bge	117c4 <_start@@Base+0x488>
   117b0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   117b4:	ldr	r3, [r3]
   117b8:	and	r3, r3, #4
   117bc:	cmp	r3, #0
   117c0:	beq	11920 <_start@@Base+0x5e4>
   117c4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   117c8:	cmp	r3, #0
   117cc:	ble	11848 <_start@@Base+0x50c>
   117d0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   117d4:	ldr	r3, [r3]
   117d8:	and	r3, r3, #8
   117dc:	cmp	r3, #0
   117e0:	bne	11848 <_start@@Base+0x50c>
   117e4:	b	11920 <_start@@Base+0x5e4>
   117e8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   117ec:	ldr	r3, [r3]
   117f0:	cmp	r3, #1
   117f4:	bne	11848 <_start@@Base+0x50c>
   117f8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   117fc:	bl	12034 <mmk_matcher_get_predicate@@Base>
   11800:	str	r0, [fp, #-68]	; 0xffffffbc
   11804:	ldr	r2, [fp, #-96]	; 0xffffffa0
   11808:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1180c:	mov	r0, r2
   11810:	blx	r3
   11814:	mov	r3, r0
   11818:	cmp	r3, #0
   1181c:	bne	11848 <_start@@Base+0x50c>
   11820:	b	1192c <_start@@Base+0x5f0>
   11824:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11828:	add	r1, r3, #40	; 0x28
   1182c:	sub	r3, fp, #96	; 0x60
   11830:	mov	r2, #4
   11834:	mov	r0, r3
   11838:	bl	13a48 <mmk_memcmp@@Base>
   1183c:	mov	r3, r0
   11840:	cmp	r3, #0
   11844:	bne	11928 <_start@@Base+0x5ec>
   11848:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1184c:	ldr	r3, [r3, #12]
   11850:	cmp	r3, #0
   11854:	beq	1186c <_start@@Base+0x530>
   11858:	bl	112dc <__errno_location@plt>
   1185c:	mov	r2, r0
   11860:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11864:	ldr	r3, [r3, #12]
   11868:	str	r3, [r2]
   1186c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11870:	ldr	r3, [r3, #20]
   11874:	cmp	r3, #0
   11878:	beq	118ac <_start@@Base+0x570>
   1187c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11880:	ldr	r3, [r3, #16]
   11884:	cmp	r3, #0
   11888:	bne	118ac <_start@@Base+0x570>
   1188c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11890:	ldr	r3, [r3, #20]
   11894:	ldr	r2, [fp, #-96]	; 0xffffffa0
   11898:	mov	r0, r2
   1189c:	blx	r3
   118a0:	str	r0, [fp, #-72]	; 0xffffffb8
   118a4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   118a8:	b	11950 <_start@@Base+0x614>
   118ac:	ldr	r3, [fp, #-56]	; 0xffffffc8
   118b0:	ldr	r3, [r3, #20]
   118b4:	cmp	r3, #0
   118b8:	beq	118f0 <_start@@Base+0x5b4>
   118bc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   118c0:	ldr	r3, [r3, #16]
   118c4:	cmp	r3, #0
   118c8:	beq	118f0 <_start@@Base+0x5b4>
   118cc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   118d0:	ldr	r3, [r3, #20]
   118d4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   118d8:	mov	r0, r2
   118dc:	blx	r3
   118e0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   118e4:	ldr	r3, [r3, #16]
   118e8:	ldr	r3, [r3]
   118ec:	b	11950 <_start@@Base+0x614>
   118f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   118f4:	ldr	r3, [r3, #16]
   118f8:	cmp	r3, #0
   118fc:	beq	11910 <_start@@Base+0x5d4>
   11900:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11904:	ldr	r3, [r3, #16]
   11908:	ldr	r3, [r3]
   1190c:	b	11950 <_start@@Base+0x614>
   11910:	ldr	r3, [pc, #72]	; 11960 <_start@@Base+0x624>
   11914:	add	r3, pc, r3
   11918:	ldr	r3, [r3]
   1191c:	b	11950 <_start@@Base+0x614>
   11920:	nop			; (mov r0, r0)
   11924:	b	1192c <_start@@Base+0x5f0>
   11928:	nop			; (mov r0, r0)
   1192c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11930:	ldr	r3, [r3, #4]
   11934:	str	r3, [fp, #-20]	; 0xffffffec
   11938:	ldr	r3, [fp, #-20]	; 0xffffffec
   1193c:	cmp	r3, #0
   11940:	bne	1171c <_start@@Base+0x3e0>
   11944:	ldr	r3, [pc, #24]	; 11964 <_start@@Base+0x628>
   11948:	add	r3, pc, r3
   1194c:	ldr	r3, [r3]
   11950:	mov	r0, r3
   11954:	sub	sp, fp, #4
   11958:	pop	{fp, pc}
   1195c:	andeq	r3, r1, r0, lsl #20
   11960:			; <UNDEFINED> instruction: 0x000137bc
   11964:	andeq	r3, r1, r8, lsl #15
   11968:	push	{fp, lr}
   1196c:	add	fp, sp, #4
   11970:	sub	sp, sp, #8
   11974:	str	r0, [fp, #-8]
   11978:	ldr	r3, [pc, #28]	; 1199c <_start@@Base+0x660>
   1197c:	add	r3, pc, r3
   11980:	mov	r1, r3
   11984:	ldr	r0, [fp, #-8]
   11988:	bl	1205c <mmk_mock_create_internal@@Base>
   1198c:	mov	r3, r0
   11990:	mov	r0, r3
   11994:	sub	sp, fp, #4
   11998:	pop	{fp, pc}
   1199c:			; <UNDEFINED> instruction: 0xfffffae0

000119a0 <test_simple_case@@Base>:
   119a0:	push	{r4, fp, lr}
   119a4:	add	fp, sp, #8
   119a8:	sub	sp, sp, #76	; 0x4c
   119ac:	ldr	r4, [pc, #404]	; 11b48 <test_simple_case@@Base+0x1a8>
   119b0:	add	r4, pc, r4
   119b4:	ldr	r3, [pc, #400]	; 11b4c <test_simple_case@@Base+0x1ac>
   119b8:	add	r3, pc, r3
   119bc:	mov	r0, r3
   119c0:	bl	11968 <_start@@Base+0x62c>
   119c4:	mov	r0, #0
   119c8:	bl	11e74 <mmk_matcher_init@@Base>
   119cc:	sub	r3, fp, #68	; 0x44
   119d0:	mov	r2, #0
   119d4:	str	r2, [r3]
   119d8:	str	r2, [r3, #4]
   119dc:	str	r2, [r3, #8]
   119e0:	str	r2, [r3, #12]
   119e4:	str	r2, [r3, #16]
   119e8:	sub	r3, fp, #76	; 0x4c
   119ec:	str	r3, [fp, #-48]	; 0xffffffd0
   119f0:	sub	r3, fp, #48	; 0x30
   119f4:	str	r3, [fp, #-60]	; 0xffffffc4
   119f8:	sub	r3, fp, #68	; 0x44
   119fc:	mov	r0, r3
   11a00:	bl	140f4 <mmk_when_init@@Base>
   11a04:	mov	r0, #6
   11a08:	bl	11288 <malloc@plt>
   11a0c:	bl	11ee0 <mmk_matcher_term@@Base>
   11a10:	ldr	r3, [pc, #312]	; 11b50 <test_simple_case@@Base+0x1b0>
   11a14:	add	r3, pc, r3
   11a18:	mov	r0, r3
   11a1c:	bl	1130c <my_strdup@plt>
   11a20:	str	r0, [fp, #-16]
   11a24:	mov	r0, #1
   11a28:	bl	11e74 <mmk_matcher_init@@Base>
   11a2c:	mov	r1, #0
   11a30:	mov	r0, #-2147483638	; 0x8000000a
   11a34:	bl	11f3c <mmk_matcher_add@@Base>
   11a38:	mov	r0, #6
   11a3c:	bl	11288 <malloc@plt>
   11a40:	bl	11ee0 <mmk_matcher_term@@Base>
   11a44:	sub	r3, fp, #44	; 0x2c
   11a48:	mov	r2, #0
   11a4c:	str	r2, [r3]
   11a50:	str	r2, [r3, #4]
   11a54:	str	r2, [r3, #8]
   11a58:	str	r2, [r3, #12]
   11a5c:	str	r2, [r3, #16]
   11a60:	str	r2, [r3, #20]
   11a64:	mov	r3, #1
   11a68:	str	r3, [fp, #-44]	; 0xffffffd4
   11a6c:	mov	r3, #1
   11a70:	str	r3, [fp, #-28]	; 0xffffffe4
   11a74:	sub	r3, fp, #44	; 0x2c
   11a78:	mov	r0, r3
   11a7c:	bl	13638 <mmk_verify_times@@Base>
   11a80:	str	r0, [fp, #-20]	; 0xffffffec
   11a84:	ldr	r3, [fp, #-20]	; 0xffffffec
   11a88:	cmp	r3, #0
   11a8c:	bne	11ac4 <test_simple_case@@Base+0x124>
   11a90:	ldr	r3, [pc, #188]	; 11b54 <test_simple_case@@Base+0x1b4>
   11a94:	ldr	r3, [r4, r3]
   11a98:	ldr	r0, [r3]
   11a9c:	ldr	r3, [pc, #180]	; 11b58 <test_simple_case@@Base+0x1b8>
   11aa0:	add	r3, pc, r3
   11aa4:	str	r3, [sp]
   11aa8:	mov	r3, #23
   11aac:	ldr	r2, [pc, #168]	; 11b5c <test_simple_case@@Base+0x1bc>
   11ab0:	add	r2, pc, r2
   11ab4:	ldr	r1, [pc, #164]	; 11b60 <test_simple_case@@Base+0x1c0>
   11ab8:	add	r1, pc, r1
   11abc:	bl	112d0 <fprintf@plt>
   11ac0:	bl	11330 <abort@plt>
   11ac4:	sub	r3, fp, #76	; 0x4c
   11ac8:	ldr	r2, [fp, #-16]
   11acc:	cmp	r2, r3
   11ad0:	bne	11af8 <test_simple_case@@Base+0x158>
   11ad4:	sub	r3, fp, #76	; 0x4c
   11ad8:	mov	r1, r3
   11adc:	ldr	r3, [pc, #128]	; 11b64 <test_simple_case@@Base+0x1c4>
   11ae0:	add	r3, pc, r3
   11ae4:	mov	r0, r3
   11ae8:	bl	1124c <strcmp@plt>
   11aec:	mov	r3, r0
   11af0:	cmp	r3, #0
   11af4:	beq	11b2c <test_simple_case@@Base+0x18c>
   11af8:	ldr	r3, [pc, #84]	; 11b54 <test_simple_case@@Base+0x1b4>
   11afc:	ldr	r3, [r4, r3]
   11b00:	ldr	r0, [r3]
   11b04:	ldr	r3, [pc, #92]	; 11b68 <test_simple_case@@Base+0x1c8>
   11b08:	add	r3, pc, r3
   11b0c:	str	r3, [sp]
   11b10:	mov	r3, #24
   11b14:	ldr	r2, [pc, #80]	; 11b6c <test_simple_case@@Base+0x1cc>
   11b18:	add	r2, pc, r2
   11b1c:	ldr	r1, [pc, #76]	; 11b70 <test_simple_case@@Base+0x1d0>
   11b20:	add	r1, pc, r1
   11b24:	bl	112d0 <fprintf@plt>
   11b28:	bl	11330 <abort@plt>
   11b2c:	ldr	r3, [pc, #64]	; 11b74 <test_simple_case@@Base+0x1d4>
   11b30:	ldr	r3, [r4, r3]
   11b34:	mov	r0, r3
   11b38:	bl	11e28 <mmk_reset@@Base>
   11b3c:	nop			; (mov r0, r0)
   11b40:	sub	sp, fp, #8
   11b44:	pop	{r4, fp, pc}
   11b48:	andeq	r3, r1, r8, asr #12
   11b4c:	ldrdeq	r2, [r0], -ip
   11b50:	muleq	r0, r4, sl
   11b54:	muleq	r0, r0, r0
   11b58:	andeq	r2, r0, ip, lsl #21
   11b5c:	andeq	r2, r0, r0, lsl #20
   11b60:	andeq	r2, r0, r4, asr sl
   11b64:	andeq	r3, r1, r0, ror #11
   11b68:	andeq	r2, r0, ip, lsr #20
   11b6c:	muleq	r0, r8, r9
   11b70:	andeq	r2, r0, ip, ror #19
   11b74:	andeq	r0, r0, r0, lsr #1

00011b78 <test_error_case@@Base>:
   11b78:	push	{r4, fp, lr}
   11b7c:	add	fp, sp, #8
   11b80:	sub	sp, sp, #44	; 0x2c
   11b84:	ldr	r4, [pc, #244]	; 11c80 <test_error_case@@Base+0x108>
   11b88:	add	r4, pc, r4
   11b8c:	ldr	r3, [pc, #240]	; 11c84 <test_error_case@@Base+0x10c>
   11b90:	add	r3, pc, r3
   11b94:	mov	r0, r3
   11b98:	bl	11968 <_start@@Base+0x62c>
   11b9c:	str	r0, [fp, #-16]
   11ba0:	mov	r0, #0
   11ba4:	bl	11e74 <mmk_matcher_init@@Base>
   11ba8:	sub	r3, fp, #44	; 0x2c
   11bac:	mov	r2, #0
   11bb0:	str	r2, [r3]
   11bb4:	str	r2, [r3, #4]
   11bb8:	str	r2, [r3, #8]
   11bbc:	str	r2, [r3, #12]
   11bc0:	str	r2, [r3, #16]
   11bc4:	mov	r3, #12
   11bc8:	str	r3, [fp, #-40]	; 0xffffffd8
   11bcc:	mov	r3, #0
   11bd0:	str	r3, [fp, #-24]	; 0xffffffe8
   11bd4:	sub	r3, fp, #24
   11bd8:	str	r3, [fp, #-36]	; 0xffffffdc
   11bdc:	sub	r3, fp, #44	; 0x2c
   11be0:	mov	r0, r3
   11be4:	bl	140f4 <mmk_when_init@@Base>
   11be8:	mov	r1, #1
   11bec:	mov	r0, #0
   11bf0:	bl	11f3c <mmk_matcher_add@@Base>
   11bf4:	ldr	r3, [fp, #-16]
   11bf8:	mov	r0, #0
   11bfc:	blx	r3
   11c00:	bl	11ee0 <mmk_matcher_term@@Base>
   11c04:	ldr	r3, [pc, #124]	; 11c88 <test_error_case@@Base+0x110>
   11c08:	add	r3, pc, r3
   11c0c:	mov	r0, r3
   11c10:	bl	1130c <my_strdup@plt>
   11c14:	str	r0, [fp, #-20]	; 0xffffffec
   11c18:	ldr	r3, [fp, #-20]	; 0xffffffec
   11c1c:	cmp	r3, #0
   11c20:	bne	11c38 <test_error_case@@Base+0xc0>
   11c24:	bl	112dc <__errno_location@plt>
   11c28:	mov	r3, r0
   11c2c:	ldr	r3, [r3]
   11c30:	cmp	r3, #12
   11c34:	beq	11c6c <test_error_case@@Base+0xf4>
   11c38:	ldr	r3, [pc, #76]	; 11c8c <test_error_case@@Base+0x114>
   11c3c:	ldr	r3, [r4, r3]
   11c40:	ldr	r0, [r3]
   11c44:	ldr	r3, [pc, #68]	; 11c90 <test_error_case@@Base+0x118>
   11c48:	add	r3, pc, r3
   11c4c:	str	r3, [sp]
   11c50:	mov	r3, #39	; 0x27
   11c54:	ldr	r2, [pc, #56]	; 11c94 <test_error_case@@Base+0x11c>
   11c58:	add	r2, pc, r2
   11c5c:	ldr	r1, [pc, #52]	; 11c98 <test_error_case@@Base+0x120>
   11c60:	add	r1, pc, r1
   11c64:	bl	112d0 <fprintf@plt>
   11c68:	bl	11330 <abort@plt>
   11c6c:	ldr	r0, [fp, #-16]
   11c70:	bl	11e28 <mmk_reset@@Base>
   11c74:	nop			; (mov r0, r0)
   11c78:	sub	sp, fp, #8
   11c7c:	pop	{r4, fp, pc}
   11c80:	andeq	r3, r1, r0, ror r4
   11c84:	andeq	r2, r0, r4, lsl #18
   11c88:	andeq	r2, r0, ip, asr #18
   11c8c:	muleq	r0, r0, r0
   11c90:	andeq	r2, r0, r0, lsl r9
   11c94:	andeq	r2, r0, r8, asr r8
   11c98:	andeq	r2, r0, ip, lsr #17

00011c9c <main@@Base>:
   11c9c:	push	{fp, lr}
   11ca0:	add	fp, sp, #4
   11ca4:	bl	119a0 <test_simple_case@@Base>
   11ca8:	bl	11b78 <test_error_case@@Base>
   11cac:	mov	r3, #0
   11cb0:	mov	r0, r3
   11cb4:	pop	{fp, pc}

00011cb8 <mmk_init@@Base>:
   11cb8:	push	{r4, fp, lr}
   11cbc:	add	fp, sp, #8
   11cc0:	sub	sp, sp, #12
   11cc4:	ldr	r4, [pc, #164]	; 11d70 <mmk_init@@Base+0xb8>
   11cc8:	add	r4, pc, r4
   11ccc:	ldr	r3, [pc, #160]	; 11d74 <mmk_init@@Base+0xbc>
   11cd0:	add	r3, pc, r3
   11cd4:	ldr	r3, [r3]
   11cd8:	cmp	r3, #0
   11cdc:	bne	11d64 <mmk_init@@Base+0xac>
   11ce0:	bl	12784 <plt_init_ctx@@Base>
   11ce4:	mov	r2, r0
   11ce8:	ldr	r3, [pc, #136]	; 11d78 <mmk_init@@Base+0xc0>
   11cec:	add	r3, pc, r3
   11cf0:	str	r2, [r3, #4]
   11cf4:	ldr	r3, [pc, #128]	; 11d7c <mmk_init@@Base+0xc4>
   11cf8:	add	r3, pc, r3
   11cfc:	ldr	r3, [r3, #4]
   11d00:	cmn	r3, #1
   11d04:	bne	11d3c <mmk_init@@Base+0x84>
   11d08:	ldr	r3, [pc, #112]	; 11d80 <mmk_init@@Base+0xc8>
   11d0c:	ldr	r3, [r4, r3]
   11d10:	ldr	r0, [r3]
   11d14:	ldr	r3, [pc, #104]	; 11d84 <mmk_init@@Base+0xcc>
   11d18:	add	r3, pc, r3
   11d1c:	str	r3, [sp]
   11d20:	mov	r3, #45	; 0x2d
   11d24:	ldr	r2, [pc, #92]	; 11d88 <mmk_init@@Base+0xd0>
   11d28:	add	r2, pc, r2
   11d2c:	ldr	r1, [pc, #88]	; 11d8c <mmk_init@@Base+0xd4>
   11d30:	add	r1, pc, r1
   11d34:	bl	112d0 <fprintf@plt>
   11d38:	bl	11330 <abort@plt>
   11d3c:	ldr	r3, [pc, #76]	; 11d90 <mmk_init@@Base+0xd8>
   11d40:	add	r3, pc, r3
   11d44:	ldr	r3, [r3, #4]
   11d48:	mov	r0, r3
   11d4c:	bl	13f24 <mmk_init_vital_functions@@Base>
   11d50:	ldr	r3, [pc, #60]	; 11d94 <mmk_init@@Base+0xdc>
   11d54:	add	r3, pc, r3
   11d58:	mov	r2, #1
   11d5c:	str	r2, [r3]
   11d60:	b	11d68 <mmk_init@@Base+0xb0>
   11d64:	nop			; (mov r0, r0)
   11d68:	sub	sp, fp, #8
   11d6c:	pop	{r4, fp, pc}
   11d70:	andeq	r3, r1, r0, lsr r3
   11d74:	andeq	r3, r1, r4, lsl #8
   11d78:	andeq	r3, r1, r8, ror #7
   11d7c:	ldrdeq	r3, [r1], -ip
   11d80:	muleq	r0, r0, r0
   11d84:	ldrdeq	r2, [r0], -r0
   11d88:	andeq	r2, r0, r0, asr r8
   11d8c:	muleq	r0, r8, r8
   11d90:	muleq	r1, r4, r3
   11d94:	andeq	r3, r1, r0, lsl #7

00011d98 <mmk_plt_ctx@@Base>:
   11d98:	push	{fp, lr}
   11d9c:	add	fp, sp, #4
   11da0:	sub	sp, sp, #8
   11da4:	ldr	r2, [pc, #96]	; 11e0c <mmk_plt_ctx@@Base+0x74>
   11da8:	add	r2, pc, r2
   11dac:	ldr	r3, [pc, #92]	; 11e10 <mmk_plt_ctx@@Base+0x78>
   11db0:	add	r3, pc, r3
   11db4:	ldr	r3, [r3]
   11db8:	cmp	r3, #0
   11dbc:	bne	11df4 <mmk_plt_ctx@@Base+0x5c>
   11dc0:	ldr	r3, [pc, #76]	; 11e14 <mmk_plt_ctx@@Base+0x7c>
   11dc4:	ldr	r3, [r2, r3]
   11dc8:	ldr	r0, [r3]
   11dcc:	ldr	r3, [pc, #68]	; 11e18 <mmk_plt_ctx@@Base+0x80>
   11dd0:	add	r3, pc, r3
   11dd4:	str	r3, [sp]
   11dd8:	mov	r3, #54	; 0x36
   11ddc:	ldr	r2, [pc, #56]	; 11e1c <mmk_plt_ctx@@Base+0x84>
   11de0:	add	r2, pc, r2
   11de4:	ldr	r1, [pc, #52]	; 11e20 <mmk_plt_ctx@@Base+0x88>
   11de8:	add	r1, pc, r1
   11dec:	bl	112d0 <fprintf@plt>
   11df0:	bl	11330 <abort@plt>
   11df4:	ldr	r3, [pc, #40]	; 11e24 <mmk_plt_ctx@@Base+0x8c>
   11df8:	add	r3, pc, r3
   11dfc:	ldr	r3, [r3, #4]
   11e00:	mov	r0, r3
   11e04:	sub	sp, fp, #4
   11e08:	pop	{fp, pc}
   11e0c:	andeq	r3, r1, r0, asr r2
   11e10:	andeq	r3, r1, r4, lsr #6
   11e14:	muleq	r0, r0, r0
   11e18:	andeq	r2, r0, r0, lsr r8
   11e1c:	muleq	r0, r8, r7
   11e20:	andeq	r2, r0, r0, ror #15
   11e24:	ldrdeq	r3, [r1], -ip

00011e28 <mmk_reset@@Base>:
   11e28:	push	{fp, lr}
   11e2c:	add	fp, sp, #4
   11e30:	sub	sp, sp, #16
   11e34:	str	r0, [fp, #-16]
   11e38:	ldr	r3, [fp, #-16]
   11e3c:	cmp	r3, #0
   11e40:	beq	11e68 <mmk_reset@@Base+0x40>
   11e44:	ldr	r0, [fp, #-16]
   11e48:	bl	1335c <mmk_ask_ctx@@Base>
   11e4c:	str	r0, [fp, #-8]
   11e50:	ldr	r0, [fp, #-8]
   11e54:	bl	12ff4 <mmk_stub_context@@Base>
   11e58:	str	r0, [fp, #-12]
   11e5c:	ldr	r0, [fp, #-12]
   11e60:	bl	12258 <mmk_mock_destroy_internal@@Base>
   11e64:	b	11e6c <mmk_reset@@Base+0x44>
   11e68:	nop			; (mov r0, r0)
   11e6c:	sub	sp, fp, #4
   11e70:	pop	{fp, pc}

00011e74 <mmk_matcher_init@@Base>:
   11e74:	push	{fp, lr}
   11e78:	add	fp, sp, #4
   11e7c:	sub	sp, sp, #16
   11e80:	str	r0, [fp, #-16]
   11e84:	mov	r0, #12
   11e88:	bl	13e54 <mmk_malloc@@Base>
   11e8c:	str	r0, [fp, #-8]
   11e90:	ldr	r3, [fp, #-8]
   11e94:	mov	r2, r3
   11e98:	mov	r3, #0
   11e9c:	str	r3, [r2]
   11ea0:	str	r3, [r2, #4]
   11ea4:	str	r3, [r2, #8]
   11ea8:	ldr	r3, [fp, #-8]
   11eac:	ldr	r2, [fp, #-16]
   11eb0:	str	r2, [r3]
   11eb4:	ldr	r3, [pc, #32]	; 11edc <mmk_matcher_init@@Base+0x68>
   11eb8:	add	r3, pc, r3
   11ebc:	mov	r0, r3
   11ec0:	bl	11318 <__tls_get_addr@plt>
   11ec4:	mov	r2, r0
   11ec8:	ldr	r3, [fp, #-8]
   11ecc:	str	r3, [r2]
   11ed0:	nop			; (mov r0, r0)
   11ed4:	sub	sp, fp, #4
   11ed8:	pop	{fp, pc}
   11edc:	andeq	r3, r1, r4, lsr #3

00011ee0 <mmk_matcher_term@@Base>:
   11ee0:	push	{fp, lr}
   11ee4:	add	fp, sp, #4
   11ee8:	ldr	r3, [pc, #28]	; 11f0c <mmk_matcher_term@@Base+0x2c>
   11eec:	add	r3, pc, r3
   11ef0:	mov	r0, r3
   11ef4:	bl	11318 <__tls_get_addr@plt>
   11ef8:	mov	r2, r0
   11efc:	mov	r3, #0
   11f00:	str	r3, [r2]
   11f04:	nop			; (mov r0, r0)
   11f08:	pop	{fp, pc}
   11f0c:	andeq	r3, r1, r0, ror r1

00011f10 <mmk_matcher_ctx@@Base>:
   11f10:	push	{fp, lr}
   11f14:	add	fp, sp, #4
   11f18:	ldr	r3, [pc, #24]	; 11f38 <mmk_matcher_ctx@@Base+0x28>
   11f1c:	add	r3, pc, r3
   11f20:	mov	r0, r3
   11f24:	bl	11318 <__tls_get_addr@plt>
   11f28:	mov	r3, r0
   11f2c:	ldr	r3, [r3]
   11f30:	mov	r0, r3
   11f34:	pop	{fp, pc}
   11f38:	andeq	r3, r1, r0, asr #2

00011f3c <mmk_matcher_add@@Base>:
   11f3c:	push	{fp, lr}
   11f40:	add	fp, sp, #4
   11f44:	sub	sp, sp, #24
   11f48:	str	r0, [fp, #-24]	; 0xffffffe8
   11f4c:	str	r1, [fp, #-28]	; 0xffffffe4
   11f50:	mov	r0, #12
   11f54:	bl	13e54 <mmk_malloc@@Base>
   11f58:	str	r0, [fp, #-16]
   11f5c:	ldr	r3, [pc, #200]	; 1202c <mmk_matcher_add@@Base+0xf0>
   11f60:	add	r3, pc, r3
   11f64:	mov	r0, r3
   11f68:	bl	11318 <__tls_get_addr@plt>
   11f6c:	mov	r3, r0
   11f70:	ldr	r3, [r3]
   11f74:	str	r3, [fp, #-8]
   11f78:	ldr	r1, [fp, #-28]	; 0xffffffe4
   11f7c:	ldr	r3, [fp, #-16]
   11f80:	mov	r2, r3
   11f84:	mov	r3, #0
   11f88:	str	r3, [r2]
   11f8c:	str	r3, [r2, #4]
   11f90:	str	r3, [r2, #8]
   11f94:	ldr	r3, [fp, #-16]
   11f98:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11f9c:	str	r2, [r3]
   11fa0:	ldr	r3, [fp, #-16]
   11fa4:	str	r1, [r3, #4]
   11fa8:	ldr	r3, [pc, #128]	; 12030 <mmk_matcher_add@@Base+0xf4>
   11fac:	add	r3, pc, r3
   11fb0:	mov	r0, r3
   11fb4:	bl	11318 <__tls_get_addr@plt>
   11fb8:	mov	r3, r0
   11fbc:	ldr	r3, [r3]
   11fc0:	ldr	r3, [r3, #8]
   11fc4:	str	r3, [fp, #-12]
   11fc8:	b	11fe0 <mmk_matcher_add@@Base+0xa4>
   11fcc:	ldr	r3, [fp, #-12]
   11fd0:	str	r3, [fp, #-8]
   11fd4:	ldr	r3, [fp, #-12]
   11fd8:	ldr	r3, [r3, #8]
   11fdc:	str	r3, [fp, #-12]
   11fe0:	ldr	r3, [fp, #-12]
   11fe4:	cmp	r3, #0
   11fe8:	beq	12004 <mmk_matcher_add@@Base+0xc8>
   11fec:	ldr	r3, [fp, #-12]
   11ff0:	ldr	r2, [r3, #4]
   11ff4:	ldr	r3, [fp, #-16]
   11ff8:	ldr	r3, [r3, #4]
   11ffc:	cmp	r2, r3
   12000:	bcc	11fcc <mmk_matcher_add@@Base+0x90>
   12004:	ldr	r3, [fp, #-8]
   12008:	ldr	r2, [r3, #8]
   1200c:	ldr	r3, [fp, #-16]
   12010:	str	r2, [r3, #8]
   12014:	ldr	r3, [fp, #-8]
   12018:	ldr	r2, [fp, #-16]
   1201c:	str	r2, [r3, #8]
   12020:	nop			; (mov r0, r0)
   12024:	sub	sp, fp, #4
   12028:	pop	{fp, pc}
   1202c:	strdeq	r3, [r1], -ip
   12030:	strheq	r3, [r1], -r0

00012034 <mmk_matcher_get_predicate@@Base>:
   12034:	push	{fp}		; (str fp, [sp, #-4]!)
   12038:	add	fp, sp, #0
   1203c:	sub	sp, sp, #12
   12040:	str	r0, [fp, #-8]
   12044:	ldr	r3, [fp, #-8]
   12048:	add	r3, r3, #12
   1204c:	mov	r0, r3
   12050:	add	sp, fp, #0
   12054:	pop	{fp}		; (ldr fp, [sp], #4)
   12058:	bx	lr

0001205c <mmk_mock_create_internal@@Base>:
   1205c:	push	{r4, fp, lr}
   12060:	add	fp, sp, #8
   12064:	sub	sp, sp, #44	; 0x2c
   12068:	str	r0, [fp, #-40]	; 0xffffffd8
   1206c:	str	r1, [fp, #-44]	; 0xffffffd4
   12070:	ldr	r4, [pc, #452]	; 1223c <mmk_mock_create_internal@@Base+0x1e0>
   12074:	add	r4, pc, r4
   12078:	bl	11cb8 <mmk_init@@Base>
   1207c:	mov	r0, #20
   12080:	bl	13e54 <mmk_malloc@@Base>
   12084:	str	r0, [fp, #-20]	; 0xffffffec
   12088:	ldr	r3, [fp, #-20]	; 0xffffffec
   1208c:	cmp	r3, #0
   12090:	bne	120c8 <mmk_mock_create_internal@@Base+0x6c>
   12094:	ldr	r3, [pc, #420]	; 12240 <mmk_mock_create_internal@@Base+0x1e4>
   12098:	ldr	r3, [r4, r3]
   1209c:	ldr	r0, [r3]
   120a0:	ldr	r3, [pc, #412]	; 12244 <mmk_mock_create_internal@@Base+0x1e8>
   120a4:	add	r3, pc, r3
   120a8:	str	r3, [sp]
   120ac:	mov	r3, #36	; 0x24
   120b0:	ldr	r2, [pc, #400]	; 12248 <mmk_mock_create_internal@@Base+0x1ec>
   120b4:	add	r2, pc, r2
   120b8:	ldr	r1, [pc, #396]	; 1224c <mmk_mock_create_internal@@Base+0x1f0>
   120bc:	add	r1, pc, r1
   120c0:	bl	112d0 <fprintf@plt>
   120c4:	bl	11330 <abort@plt>
   120c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   120cc:	mov	r2, r3
   120d0:	mov	r3, #0
   120d4:	str	r3, [r2]
   120d8:	str	r3, [r2, #4]
   120dc:	str	r3, [r2, #8]
   120e0:	str	r3, [r2, #12]
   120e4:	str	r3, [r2, #16]
   120e8:	mov	r1, #64	; 0x40
   120ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
   120f0:	bl	13c3c <mmk_strchr@@Base>
   120f4:	str	r0, [fp, #-24]	; 0xffffffe8
   120f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   120fc:	cmp	r3, #0
   12100:	bne	12114 <mmk_mock_create_internal@@Base+0xb8>
   12104:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12108:	bl	13da0 <mmk_strlen@@Base>
   1210c:	str	r0, [fp, #-16]
   12110:	b	12124 <mmk_mock_create_internal@@Base+0xc8>
   12114:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12118:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1211c:	sub	r3, r2, r3
   12120:	str	r3, [fp, #-16]
   12124:	ldr	r3, [fp, #-16]
   12128:	add	r3, r3, #1
   1212c:	mov	r0, r3
   12130:	bl	13e54 <mmk_malloc@@Base>
   12134:	str	r0, [fp, #-28]	; 0xffffffe4
   12138:	ldr	r2, [fp, #-16]
   1213c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12140:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12144:	bl	13d14 <mmk_strncpy@@Base>
   12148:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1214c:	ldr	r3, [fp, #-16]
   12150:	add	r3, r2, r3
   12154:	mov	r2, #0
   12158:	strb	r2, [r3]
   1215c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12160:	cmp	r3, #0
   12164:	beq	12190 <mmk_mock_create_internal@@Base+0x134>
   12168:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1216c:	add	r3, r3, #1
   12170:	mov	r2, #4
   12174:	ldr	r1, [pc, #212]	; 12250 <mmk_mock_create_internal@@Base+0x1f4>
   12178:	add	r1, pc, r1
   1217c:	mov	r0, r3
   12180:	bl	13b78 <mmk_strneq@@Base>
   12184:	mov	r3, r0
   12188:	cmp	r3, #0
   1218c:	beq	12198 <mmk_mock_create_internal@@Base+0x13c>
   12190:	mov	r3, #1
   12194:	b	1219c <mmk_mock_create_internal@@Base+0x140>
   12198:	mov	r3, #0
   1219c:	str	r3, [fp, #-32]	; 0xffffffe0
   121a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   121a4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   121a8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   121ac:	bl	1324c <mmk_stub_create@@Base>
   121b0:	mov	r2, r0
   121b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   121b8:	str	r2, [r3, #4]
   121bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   121c0:	ldr	r3, [r3, #4]
   121c4:	cmp	r3, #0
   121c8:	bne	121f0 <mmk_mock_create_internal@@Base+0x194>
   121cc:	ldr	r3, [pc, #108]	; 12240 <mmk_mock_create_internal@@Base+0x1e4>
   121d0:	ldr	r3, [r4, r3]
   121d4:	ldr	r3, [r3]
   121d8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   121dc:	ldr	r1, [pc, #112]	; 12254 <mmk_mock_create_internal@@Base+0x1f8>
   121e0:	add	r1, pc, r1
   121e4:	mov	r0, r3
   121e8:	bl	112d0 <fprintf@plt>
   121ec:	bl	11330 <abort@plt>
   121f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   121f4:	cmp	r3, #0
   121f8:	bne	1221c <mmk_mock_create_internal@@Base+0x1c0>
   121fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12200:	ldr	r4, [r3, #4]
   12204:	ldr	r2, [fp, #-20]	; 0xffffffec
   12208:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1220c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12210:	bl	1324c <mmk_stub_create@@Base>
   12214:	mov	r3, r0
   12218:	str	r3, [r4, #36]	; 0x24
   1221c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12220:	bl	13ee4 <mmk_free@@Base>
   12224:	ldr	r3, [fp, #-20]	; 0xffffffec
   12228:	ldr	r3, [r3, #4]
   1222c:	ldr	r3, [r3, #32]
   12230:	mov	r0, r3
   12234:	sub	sp, fp, #8
   12238:	pop	{r4, fp, pc}
   1223c:	andeq	r2, r1, r4, lsl #31
   12240:	muleq	r0, r0, r0
   12244:	andeq	r2, r0, r0, ror #11
   12248:	andeq	r2, r0, r0, ror #10
   1224c:	andeq	r2, r0, r8, lsr #11
   12250:	andeq	r2, r0, r0, lsl r5
   12254:			; <UNDEFINED> instruction: 0x000024b0

00012258 <mmk_mock_destroy_internal@@Base>:
   12258:	push	{fp, lr}
   1225c:	add	fp, sp, #4
   12260:	sub	sp, sp, #32
   12264:	str	r0, [fp, #-32]	; 0xffffffe0
   12268:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1226c:	ldr	r3, [r3, #4]
   12270:	str	r3, [fp, #-8]
   12274:	b	12294 <mmk_mock_destroy_internal@@Base+0x3c>
   12278:	ldr	r3, [fp, #-8]
   1227c:	ldr	r3, [r3, #36]	; 0x24
   12280:	str	r3, [fp, #-20]	; 0xffffffec
   12284:	ldr	r0, [fp, #-8]
   12288:	bl	13330 <mmk_stub_destroy@@Base>
   1228c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12290:	str	r3, [fp, #-8]
   12294:	ldr	r3, [fp, #-8]
   12298:	cmp	r3, #0
   1229c:	bne	12278 <mmk_mock_destroy_internal@@Base+0x20>
   122a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   122a4:	ldr	r3, [r3, #8]
   122a8:	mov	r0, r3
   122ac:	bl	13ee4 <mmk_free@@Base>
   122b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   122b4:	ldr	r3, [r3]
   122b8:	str	r3, [fp, #-12]
   122bc:	b	12314 <mmk_mock_destroy_internal@@Base+0xbc>
   122c0:	ldr	r3, [fp, #-12]
   122c4:	ldr	r3, [r3, #4]
   122c8:	str	r3, [fp, #-24]	; 0xffffffe8
   122cc:	ldr	r3, [fp, #-12]
   122d0:	ldr	r3, [r3]
   122d4:	str	r3, [fp, #-16]
   122d8:	b	122f8 <mmk_mock_destroy_internal@@Base+0xa0>
   122dc:	ldr	r3, [fp, #-16]
   122e0:	ldr	r3, [r3, #8]
   122e4:	str	r3, [fp, #-28]	; 0xffffffe4
   122e8:	ldr	r0, [fp, #-16]
   122ec:	bl	13ee4 <mmk_free@@Base>
   122f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   122f4:	str	r3, [fp, #-16]
   122f8:	ldr	r3, [fp, #-16]
   122fc:	cmp	r3, #0
   12300:	bne	122dc <mmk_mock_destroy_internal@@Base+0x84>
   12304:	ldr	r0, [fp, #-12]
   12308:	bl	13ee4 <mmk_free@@Base>
   1230c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12310:	str	r3, [fp, #-12]
   12314:	ldr	r3, [fp, #-12]
   12318:	cmp	r3, #0
   1231c:	bne	122c0 <mmk_mock_destroy_internal@@Base+0x68>
   12320:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12324:	bl	13ee4 <mmk_free@@Base>
   12328:	nop			; (mov r0, r0)
   1232c:	sub	sp, fp, #4
   12330:	pop	{fp, pc}

00012334 <mmk_mock_params_begin@@Base>:
   12334:	push	{fp}		; (str fp, [sp, #-4]!)
   12338:	add	fp, sp, #0
   1233c:	sub	sp, sp, #12
   12340:	str	r0, [fp, #-8]
   12344:	ldr	r3, [fp, #-8]
   12348:	ldr	r3, [r3, #8]
   1234c:	cmp	r3, #0
   12350:	beq	12364 <mmk_mock_params_begin@@Base+0x30>
   12354:	ldr	r3, [fp, #-8]
   12358:	ldr	r3, [r3, #12]
   1235c:	cmp	r3, #0
   12360:	bne	1236c <mmk_mock_params_begin@@Base+0x38>
   12364:	mov	r3, #0
   12368:	b	12378 <mmk_mock_params_begin@@Base+0x44>
   1236c:	ldr	r3, [fp, #-8]
   12370:	ldr	r3, [r3, #8]
   12374:	add	r3, r3, #4
   12378:	mov	r0, r3
   1237c:	add	sp, fp, #0
   12380:	pop	{fp}		; (ldr fp, [sp], #4)
   12384:	bx	lr

00012388 <mmk_mock_params_next@@Base>:
   12388:	push	{fp}		; (str fp, [sp, #-4]!)
   1238c:	add	fp, sp, #0
   12390:	sub	sp, sp, #20
   12394:	str	r0, [fp, #-16]
   12398:	str	r1, [fp, #-20]	; 0xffffffec
   1239c:	ldr	r3, [fp, #-20]	; 0xffffffec
   123a0:	str	r3, [fp, #-8]
   123a4:	ldr	r3, [fp, #-8]
   123a8:	ldr	r3, [r3, #-4]
   123ac:	str	r3, [fp, #-12]
   123b0:	ldr	r3, [fp, #-12]
   123b4:	add	r3, r3, #4
   123b8:	ldr	r2, [fp, #-8]
   123bc:	add	r3, r2, r3
   123c0:	str	r3, [fp, #-8]
   123c4:	ldr	r3, [fp, #-16]
   123c8:	ldr	r2, [r3, #8]
   123cc:	ldr	r3, [fp, #-16]
   123d0:	ldr	r3, [r3, #12]
   123d4:	add	r2, r2, r3
   123d8:	ldr	r3, [fp, #-8]
   123dc:	cmp	r2, r3
   123e0:	bhi	123ec <mmk_mock_params_next@@Base+0x64>
   123e4:	mov	r3, #0
   123e8:	b	123f0 <mmk_mock_params_next@@Base+0x68>
   123ec:	ldr	r3, [fp, #-8]
   123f0:	mov	r0, r3
   123f4:	add	sp, fp, #0
   123f8:	pop	{fp}		; (ldr fp, [sp], #4)
   123fc:	bx	lr

00012400 <mmk_mock_get_params@@Base>:
   12400:	push	{fp, lr}
   12404:	add	fp, sp, #4
   12408:	sub	sp, sp, #8
   1240c:	bl	13400 <mmk_ctx@@Base>
   12410:	mov	r3, r0
   12414:	mov	r0, r3
   12418:	bl	12ff4 <mmk_stub_context@@Base>
   1241c:	str	r0, [fp, #-8]
   12420:	ldr	r3, [fp, #-8]
   12424:	ldr	r3, [r3]
   12428:	mov	r0, r3
   1242c:	sub	sp, fp, #4
   12430:	pop	{fp, pc}
   12434:	push	{fp}		; (str fp, [sp, #-4]!)
   12438:	add	fp, sp, #0
   1243c:	sub	sp, sp, #20
   12440:	str	r0, [fp, #-16]
   12444:	str	r1, [fp, #-20]	; 0xffffffec
   12448:	ldr	r3, [fp, #-16]
   1244c:	ldr	r3, [r3]
   12450:	str	r3, [fp, #-12]
   12454:	ldr	r3, [fp, #-16]
   12458:	ldr	r3, [r3, #8]
   1245c:	str	r3, [fp, #-8]
   12460:	b	124b8 <mmk_mock_get_params@@Base+0xb8>
   12464:	ldr	r3, [fp, #-8]
   12468:	ldr	r2, [r3]
   1246c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12470:	cmp	r2, r3
   12474:	bne	124ac <mmk_mock_get_params@@Base+0xac>
   12478:	ldr	r3, [fp, #-8]
   1247c:	ldr	r2, [r3, #4]
   12480:	ldr	r3, [fp, #-12]
   12484:	cmp	r2, r3
   12488:	bcc	12498 <mmk_mock_get_params@@Base+0x98>
   1248c:	ldr	r3, [fp, #-8]
   12490:	ldr	r3, [r3, #4]
   12494:	b	124cc <mmk_mock_get_params@@Base+0xcc>
   12498:	ldr	r3, [fp, #-8]
   1249c:	ldr	r2, [r3, #4]
   124a0:	ldr	r3, [fp, #-12]
   124a4:	add	r3, r2, r3
   124a8:	b	124cc <mmk_mock_get_params@@Base+0xcc>
   124ac:	ldr	r3, [fp, #-8]
   124b0:	add	r3, r3, #8
   124b4:	str	r3, [fp, #-8]
   124b8:	ldr	r3, [fp, #-8]
   124bc:	ldr	r3, [r3]
   124c0:	cmp	r3, #0
   124c4:	bne	12464 <mmk_mock_get_params@@Base+0x64>
   124c8:	mov	r3, #0
   124cc:	mov	r0, r3
   124d0:	add	sp, fp, #0
   124d4:	pop	{fp}		; (ldr fp, [sp], #4)
   124d8:	bx	lr
   124dc:	push	{fp}		; (str fp, [sp, #-4]!)
   124e0:	add	fp, sp, #0
   124e4:	sub	sp, sp, #20
   124e8:	str	r0, [fp, #-16]
   124ec:	str	r1, [fp, #-20]	; 0xffffffec
   124f0:	ldr	r3, [fp, #-16]
   124f4:	ldr	r3, [r3, #8]
   124f8:	str	r3, [fp, #-8]
   124fc:	b	1252c <mmk_mock_get_params@@Base+0x12c>
   12500:	ldr	r3, [fp, #-8]
   12504:	ldr	r2, [r3]
   12508:	ldr	r3, [fp, #-20]	; 0xffffffec
   1250c:	cmp	r2, r3
   12510:	bne	12520 <mmk_mock_get_params@@Base+0x120>
   12514:	ldr	r3, [fp, #-8]
   12518:	ldr	r3, [r3, #4]
   1251c:	b	12540 <mmk_mock_get_params@@Base+0x140>
   12520:	ldr	r3, [fp, #-8]
   12524:	add	r3, r3, #8
   12528:	str	r3, [fp, #-8]
   1252c:	ldr	r3, [fp, #-8]
   12530:	ldr	r3, [r3]
   12534:	cmp	r3, #0
   12538:	bne	12500 <mmk_mock_get_params@@Base+0x100>
   1253c:	mov	r3, #0
   12540:	mov	r0, r3
   12544:	add	sp, fp, #0
   12548:	pop	{fp}		; (ldr fp, [sp], #4)
   1254c:	bx	lr
   12550:	push	{fp}		; (str fp, [sp, #-4]!)
   12554:	add	fp, sp, #0
   12558:	sub	sp, sp, #12
   1255c:	str	r0, [fp, #-8]
   12560:	str	r1, [fp, #-12]
   12564:	b	12594 <mmk_mock_get_params@@Base+0x194>
   12568:	ldr	r3, [fp, #-8]
   1256c:	ldr	r2, [r3]
   12570:	ldr	r3, [fp, #-12]
   12574:	cmp	r2, r3
   12578:	bne	12588 <mmk_mock_get_params@@Base+0x188>
   1257c:	ldr	r3, [fp, #-8]
   12580:	ldr	r3, [r3, #4]
   12584:	b	125a8 <mmk_mock_get_params@@Base+0x1a8>
   12588:	ldr	r3, [fp, #-8]
   1258c:	add	r3, r3, #8
   12590:	str	r3, [fp, #-8]
   12594:	ldr	r3, [fp, #-8]
   12598:	ldr	r3, [r3]
   1259c:	cmp	r3, #0
   125a0:	bne	12568 <mmk_mock_get_params@@Base+0x168>
   125a4:	mvn	r3, #0
   125a8:	mov	r0, r3
   125ac:	add	sp, fp, #0
   125b0:	pop	{fp}		; (ldr fp, [sp], #4)
   125b4:	bx	lr
   125b8:	push	{fp}		; (str fp, [sp, #-4]!)
   125bc:	add	fp, sp, #0
   125c0:	sub	sp, sp, #20
   125c4:	str	r0, [fp, #-16]
   125c8:	str	r1, [fp, #-20]	; 0xffffffec
   125cc:	mov	r3, #0
   125d0:	str	r3, [fp, #-8]
   125d4:	b	12618 <mmk_mock_get_params@@Base+0x218>
   125d8:	ldr	r3, [fp, #-8]
   125dc:	lsl	r3, r3, #5
   125e0:	ldr	r2, [fp, #-16]
   125e4:	add	r3, r2, r3
   125e8:	ldr	r3, [r3]
   125ec:	cmp	r3, #2
   125f0:	bne	1260c <mmk_mock_get_params@@Base+0x20c>
   125f4:	ldr	r3, [fp, #-8]
   125f8:	lsl	r3, r3, #5
   125fc:	ldr	r2, [fp, #-16]
   12600:	add	r3, r2, r3
   12604:	ldr	r3, [r3, #8]
   12608:	b	1262c <mmk_mock_get_params@@Base+0x22c>
   1260c:	ldr	r3, [fp, #-8]
   12610:	add	r3, r3, #1
   12614:	str	r3, [fp, #-8]
   12618:	ldr	r2, [fp, #-8]
   1261c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12620:	cmp	r2, r3
   12624:	bcc	125d8 <mmk_mock_get_params@@Base+0x1d8>
   12628:	mov	r3, #0
   1262c:	mov	r0, r3
   12630:	add	sp, fp, #0
   12634:	pop	{fp}		; (ldr fp, [sp], #4)
   12638:	bx	lr
   1263c:	push	{fp}		; (str fp, [sp, #-4]!)
   12640:	add	fp, sp, #0
   12644:	sub	sp, sp, #20
   12648:	str	r0, [fp, #-16]
   1264c:	ldr	r3, [fp, #-16]
   12650:	str	r3, [fp, #-8]
   12654:	b	12680 <mmk_mock_get_params@@Base+0x280>
   12658:	ldr	r3, [fp, #-8]
   1265c:	ldr	r3, [r3]
   12660:	cmp	r3, #21
   12664:	bne	12674 <mmk_mock_get_params@@Base+0x274>
   12668:	ldr	r3, [fp, #-8]
   1266c:	ldr	r3, [r3, #4]
   12670:	b	12694 <mmk_mock_get_params@@Base+0x294>
   12674:	ldr	r3, [fp, #-8]
   12678:	add	r3, r3, #8
   1267c:	str	r3, [fp, #-8]
   12680:	ldr	r3, [fp, #-8]
   12684:	ldr	r3, [r3]
   12688:	cmp	r3, #0
   1268c:	bne	12658 <mmk_mock_get_params@@Base+0x258>
   12690:	mov	r3, #0
   12694:	mov	r0, r3
   12698:	add	sp, fp, #0
   1269c:	pop	{fp}		; (ldr fp, [sp], #4)
   126a0:	bx	lr
   126a4:	push	{fp, lr}
   126a8:	add	fp, sp, #4
   126ac:	sub	sp, sp, #24
   126b0:	ldr	r3, [pc, #192]	; 12778 <mmk_mock_get_params@@Base+0x378>
   126b4:	add	r3, pc, r3
   126b8:	mov	r2, #0
   126bc:	str	r2, [fp, #-8]
   126c0:	ldr	r2, [pc, #180]	; 1277c <mmk_mock_get_params@@Base+0x37c>
   126c4:	ldr	r2, [r3, r2]
   126c8:	str	r2, [fp, #-8]
   126cc:	ldr	r2, [fp, #-8]
   126d0:	cmp	r2, #0
   126d4:	bne	12768 <mmk_mock_get_params@@Base+0x368>
   126d8:	ldr	r2, [pc, #160]	; 12780 <mmk_mock_get_params@@Base+0x380>
   126dc:	ldr	r3, [r3, r2]
   126e0:	ldr	r3, [r3]
   126e4:	str	r3, [fp, #-12]
   126e8:	nop			; (mov r0, r0)
   126ec:	ldr	r3, [fp, #-12]
   126f0:	add	r2, r3, #4
   126f4:	str	r2, [fp, #-12]
   126f8:	ldr	r3, [r3]
   126fc:	cmp	r3, #0
   12700:	bne	126ec <mmk_mock_get_params@@Base+0x2ec>
   12704:	ldr	r3, [fp, #-12]
   12708:	str	r3, [fp, #-16]
   1270c:	mov	r1, #3
   12710:	ldr	r0, [fp, #-16]
   12714:	bl	12550 <mmk_mock_get_params@@Base+0x150>
   12718:	str	r0, [fp, #-20]	; 0xffffffec
   1271c:	mov	r1, #4
   12720:	ldr	r0, [fp, #-16]
   12724:	bl	12550 <mmk_mock_get_params@@Base+0x150>
   12728:	str	r0, [fp, #-24]	; 0xffffffe8
   1272c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12730:	cmn	r3, #1
   12734:	beq	12768 <mmk_mock_get_params@@Base+0x368>
   12738:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1273c:	cmn	r3, #1
   12740:	beq	12768 <mmk_mock_get_params@@Base+0x368>
   12744:	ldr	r3, [fp, #-20]	; 0xffffffec
   12748:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1274c:	mov	r0, r3
   12750:	bl	125b8 <mmk_mock_get_params@@Base+0x1b8>
   12754:	str	r0, [fp, #-28]	; 0xffffffe4
   12758:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1275c:	mov	r0, r3
   12760:	bl	1263c <mmk_mock_get_params@@Base+0x23c>
   12764:	str	r0, [fp, #-8]
   12768:	ldr	r3, [fp, #-8]
   1276c:	mov	r0, r3
   12770:	sub	sp, fp, #4
   12774:	pop	{fp, pc}
   12778:	andeq	r2, r1, r4, asr #18
   1277c:	strheq	r0, [r0], -r4
   12780:	strheq	r0, [r0], -ip

00012784 <plt_init_ctx@@Base>:
   12784:	push	{fp, lr}
   12788:	add	fp, sp, #4
   1278c:	ldr	r3, [pc, #52]	; 127c8 <plt_init_ctx@@Base+0x44>
   12790:	add	r3, pc, r3
   12794:	ldr	r3, [r3]
   12798:	cmn	r3, #1
   1279c:	bne	127b4 <plt_init_ctx@@Base+0x30>
   127a0:	bl	126a4 <mmk_mock_get_params@@Base+0x2a4>
   127a4:	mov	r2, r0
   127a8:	ldr	r3, [pc, #28]	; 127cc <plt_init_ctx@@Base+0x48>
   127ac:	add	r3, pc, r3
   127b0:	str	r2, [r3]
   127b4:	ldr	r3, [pc, #20]	; 127d0 <plt_init_ctx@@Base+0x4c>
   127b8:	add	r3, pc, r3
   127bc:	ldr	r3, [r3]
   127c0:	mov	r0, r3
   127c4:	pop	{fp, pc}
   127c8:	andeq	r2, r1, r8, lsr r9
   127cc:	andeq	r2, r1, ip, lsl r9
   127d0:	andeq	r2, r1, r0, lsl r9

000127d4 <plt_get_lib@@Base>:
   127d4:	push	{r4, r5, r6, r7, r8, fp, lr}
   127d8:	add	fp, sp, #24
   127dc:	sub	sp, sp, #60	; 0x3c
   127e0:	str	r0, [fp, #-80]	; 0xffffffb0
   127e4:	str	r1, [fp, #-84]	; 0xffffffac
   127e8:	ldr	r8, [pc, #908]	; 12b7c <plt_get_lib@@Base+0x3a8>
   127ec:	add	r8, pc, r8
   127f0:	ldr	r3, [fp, #-84]	; 0xffffffac
   127f4:	cmp	r3, #0
   127f8:	bne	12808 <plt_get_lib@@Base+0x34>
   127fc:	ldr	r3, [pc, #892]	; 12b80 <plt_get_lib@@Base+0x3ac>
   12800:	add	r3, pc, r3
   12804:	str	r3, [fp, #-84]	; 0xffffffac
   12808:	mov	r3, #0
   1280c:	str	r3, [fp, #-32]	; 0xffffffe0
   12810:	mov	r2, #4
   12814:	ldr	r3, [pc, #872]	; 12b84 <plt_get_lib@@Base+0x3b0>
   12818:	add	r3, pc, r3
   1281c:	mov	r1, r3
   12820:	ldr	r0, [fp, #-84]	; 0xffffffac
   12824:	bl	11324 <strncmp@plt>
   12828:	mov	r3, r0
   1282c:	cmp	r3, #0
   12830:	bne	12840 <plt_get_lib@@Base+0x6c>
   12834:	mov	r3, #1
   12838:	str	r3, [fp, #-32]	; 0xffffffe0
   1283c:	b	12948 <plt_get_lib@@Base+0x174>
   12840:	mov	r2, #5
   12844:	ldr	r3, [pc, #828]	; 12b88 <plt_get_lib@@Base+0x3b4>
   12848:	add	r3, pc, r3
   1284c:	mov	r1, r3
   12850:	ldr	r0, [fp, #-84]	; 0xffffffac
   12854:	bl	11324 <strncmp@plt>
   12858:	mov	r3, r0
   1285c:	cmp	r3, #0
   12860:	bne	12870 <plt_get_lib@@Base+0x9c>
   12864:	mov	r3, #2
   12868:	str	r3, [fp, #-32]	; 0xffffffe0
   1286c:	b	12948 <plt_get_lib@@Base+0x174>
   12870:	mov	r2, #4
   12874:	ldr	r3, [pc, #784]	; 12b8c <plt_get_lib@@Base+0x3b8>
   12878:	add	r3, pc, r3
   1287c:	mov	r1, r3
   12880:	ldr	r0, [fp, #-84]	; 0xffffffac
   12884:	bl	11324 <strncmp@plt>
   12888:	mov	r3, r0
   1288c:	cmp	r3, #0
   12890:	bne	128a0 <plt_get_lib@@Base+0xcc>
   12894:	mov	r3, #3
   12898:	str	r3, [fp, #-32]	; 0xffffffe0
   1289c:	b	12948 <plt_get_lib@@Base+0x174>
   128a0:	ldr	r3, [pc, #744]	; 12b90 <plt_get_lib@@Base+0x3bc>
   128a4:	add	r3, pc, r3
   128a8:	mov	r1, r3
   128ac:	ldr	r0, [fp, #-84]	; 0xffffffac
   128b0:	bl	1124c <strcmp@plt>
   128b4:	mov	r3, r0
   128b8:	cmp	r3, #0
   128bc:	bne	128d0 <plt_get_lib@@Base+0xfc>
   128c0:	ldr	r3, [pc, #716]	; 12b94 <plt_get_lib@@Base+0x3c0>
   128c4:	add	r3, pc, r3
   128c8:	str	r3, [fp, #-84]	; 0xffffffac
   128cc:	b	12948 <plt_get_lib@@Base+0x174>
   128d0:	mov	r1, #58	; 0x3a
   128d4:	ldr	r0, [fp, #-84]	; 0xffffffac
   128d8:	bl	112c4 <strchr@plt>
   128dc:	str	r0, [fp, #-40]	; 0xffffffd8
   128e0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   128e4:	cmp	r3, #0
   128e8:	beq	12924 <plt_get_lib@@Base+0x150>
   128ec:	ldr	r2, [fp, #-40]	; 0xffffffd8
   128f0:	ldr	r3, [fp, #-84]	; 0xffffffac
   128f4:	sub	r3, r2, r3
   128f8:	add	r3, r3, #1
   128fc:	str	r3, [fp, #-44]	; 0xffffffd4
   12900:	ldr	r3, [pc, #656]	; 12b98 <plt_get_lib@@Base+0x3c4>
   12904:	ldr	r3, [r8, r3]
   12908:	ldr	r0, [r3]
   1290c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   12910:	ldr	r3, [fp, #-84]	; 0xffffffac
   12914:	ldr	r1, [pc, #640]	; 12b9c <plt_get_lib@@Base+0x3c8>
   12918:	add	r1, pc, r1
   1291c:	bl	112d0 <fprintf@plt>
   12920:	b	12944 <plt_get_lib@@Base+0x170>
   12924:	ldr	r3, [pc, #620]	; 12b98 <plt_get_lib@@Base+0x3c4>
   12928:	ldr	r3, [r8, r3]
   1292c:	ldr	r3, [r3]
   12930:	ldr	r2, [fp, #-84]	; 0xffffffac
   12934:	ldr	r1, [pc, #612]	; 12ba0 <plt_get_lib@@Base+0x3cc>
   12938:	add	r1, pc, r1
   1293c:	mov	r0, r3
   12940:	bl	112d0 <fprintf@plt>
   12944:	bl	11330 <abort@plt>
   12948:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1294c:	cmp	r3, #0
   12950:	beq	1296c <plt_get_lib@@Base+0x198>
   12954:	mov	r1, #58	; 0x3a
   12958:	ldr	r0, [fp, #-84]	; 0xffffffac
   1295c:	bl	112c4 <strchr@plt>
   12960:	mov	r3, r0
   12964:	add	r3, r3, #1
   12968:	b	12970 <plt_get_lib@@Base+0x19c>
   1296c:	ldr	r3, [fp, #-84]	; 0xffffffac
   12970:	str	r3, [fp, #-48]	; 0xffffffd0
   12974:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12978:	bl	112ac <strlen@plt>
   1297c:	str	r0, [fp, #-52]	; 0xffffffcc
   12980:	ldr	r3, [pc, #540]	; 12ba4 <plt_get_lib@@Base+0x3d0>
   12984:	add	r3, pc, r3
   12988:	mov	r1, r3
   1298c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12990:	bl	1124c <strcmp@plt>
   12994:	mov	r3, r0
   12998:	cmp	r3, #0
   1299c:	moveq	r3, #1
   129a0:	movne	r3, #0
   129a4:	uxtb	r3, r3
   129a8:	str	r3, [fp, #-56]	; 0xffffffc8
   129ac:	ldr	r3, [fp, #-80]	; 0xffffffb0
   129b0:	ldr	r3, [r3, #4]
   129b4:	str	r3, [fp, #-36]	; 0xffffffdc
   129b8:	b	12b60 <plt_get_lib@@Base+0x38c>
   129bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   129c0:	cmp	r3, #1
   129c4:	bne	12ae4 <plt_get_lib@@Base+0x310>
   129c8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   129cc:	cmp	r3, #0
   129d0:	beq	12a2c <plt_get_lib@@Base+0x258>
   129d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   129d8:	ldr	r3, [r3, #4]
   129dc:	ldr	r2, [pc, #452]	; 12ba8 <plt_get_lib@@Base+0x3d4>
   129e0:	add	r2, pc, r2
   129e4:	mov	r1, r2
   129e8:	mov	r0, r3
   129ec:	bl	11234 <strstr@plt>
   129f0:	mov	r3, r0
   129f4:	cmp	r3, #0
   129f8:	bne	12a24 <plt_get_lib@@Base+0x250>
   129fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12a00:	ldr	r3, [r3, #4]
   12a04:	ldr	r2, [pc, #416]	; 12bac <plt_get_lib@@Base+0x3d8>
   12a08:	add	r2, pc, r2
   12a0c:	mov	r1, r2
   12a10:	mov	r0, r3
   12a14:	bl	11234 <strstr@plt>
   12a18:	mov	r3, r0
   12a1c:	cmp	r3, #0
   12a20:	beq	12b54 <plt_get_lib@@Base+0x380>
   12a24:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12a28:	b	12b70 <plt_get_lib@@Base+0x39c>
   12a2c:	mov	r3, sp
   12a30:	mov	r8, r3
   12a34:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12a38:	add	r3, r3, #8
   12a3c:	str	r3, [fp, #-64]	; 0xffffffc0
   12a40:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12a44:	mov	r3, r1
   12a48:	sub	r3, r3, #1
   12a4c:	str	r3, [fp, #-68]	; 0xffffffbc
   12a50:	mov	r2, r1
   12a54:	mov	r3, #0
   12a58:	lsl	r5, r3, #3
   12a5c:	orr	r5, r5, r2, lsr #29
   12a60:	lsl	r4, r2, #3
   12a64:	mov	r2, r1
   12a68:	mov	r3, #0
   12a6c:	lsl	r7, r3, #3
   12a70:	orr	r7, r7, r2, lsr #29
   12a74:	lsl	r6, r2, #3
   12a78:	add	r3, r1, #7
   12a7c:	lsr	r3, r3, #3
   12a80:	lsl	r3, r3, #3
   12a84:	sub	sp, sp, r3
   12a88:	mov	r3, sp
   12a8c:	add	r3, r3, #0
   12a90:	str	r3, [fp, #-72]	; 0xffffffb8
   12a94:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12a98:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12a9c:	ldr	r2, [pc, #268]	; 12bb0 <plt_get_lib@@Base+0x3dc>
   12aa0:	add	r2, pc, r2
   12aa4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12aa8:	bl	112e8 <snprintf@plt>
   12aac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12ab0:	ldr	r3, [r3, #4]
   12ab4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12ab8:	mov	r1, r2
   12abc:	mov	r0, r3
   12ac0:	bl	11234 <strstr@plt>
   12ac4:	mov	r3, r0
   12ac8:	cmp	r3, #0
   12acc:	beq	12adc <plt_get_lib@@Base+0x308>
   12ad0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12ad4:	mov	sp, r8
   12ad8:	b	12b70 <plt_get_lib@@Base+0x39c>
   12adc:	mov	sp, r8
   12ae0:	b	12b54 <plt_get_lib@@Base+0x380>
   12ae4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12ae8:	cmp	r3, #0
   12aec:	beq	12afc <plt_get_lib@@Base+0x328>
   12af0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12af4:	cmp	r3, #2
   12af8:	bne	12b24 <plt_get_lib@@Base+0x350>
   12afc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12b00:	ldr	r3, [r3, #4]
   12b04:	mov	r1, r3
   12b08:	ldr	r0, [fp, #-84]	; 0xffffffac
   12b0c:	bl	1124c <strcmp@plt>
   12b10:	mov	r3, r0
   12b14:	cmp	r3, #0
   12b18:	bne	12b54 <plt_get_lib@@Base+0x380>
   12b1c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12b20:	b	12b70 <plt_get_lib@@Base+0x39c>
   12b24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12b28:	cmp	r3, #3
   12b2c:	bne	12b54 <plt_get_lib@@Base+0x380>
   12b30:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12b34:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12b38:	bl	12c98 <plt_get_lib@@Base+0x4c4>
   12b3c:	str	r0, [fp, #-60]	; 0xffffffc4
   12b40:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12b44:	cmp	r3, #0
   12b48:	beq	12b54 <plt_get_lib@@Base+0x380>
   12b4c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12b50:	b	12b70 <plt_get_lib@@Base+0x39c>
   12b54:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12b58:	ldr	r3, [r3, #12]
   12b5c:	str	r3, [fp, #-36]	; 0xffffffdc
   12b60:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12b64:	cmp	r3, #0
   12b68:	bne	129bc <plt_get_lib@@Base+0x1e8>
   12b6c:	mov	r3, #0
   12b70:	mov	r0, r3
   12b74:	sub	sp, fp, #24
   12b78:	pop	{r4, r5, r6, r7, r8, fp, pc}
   12b7c:	andeq	r2, r1, ip, lsl #16
   12b80:	andeq	r1, r0, r4, asr #29
   12b84:			; <UNDEFINED> instruction: 0x00001eb4
   12b88:	andeq	r1, r0, ip, lsl #29
   12b8c:	andeq	r1, r0, r4, ror #28
   12b90:	andeq	r1, r0, r0, lsr #28
   12b94:	andeq	r1, r0, r0, lsr #28
   12b98:	muleq	r0, r0, r0
   12b9c:	ldrdeq	r1, [r0], -r0
   12ba0:	ldrdeq	r1, [r0], -r4
   12ba4:	andeq	r1, r0, ip, lsr #27
   12ba8:	andeq	r1, r0, r4, asr sp
   12bac:	andeq	r1, r0, r8, lsr sp
   12bb0:	andeq	r1, r0, ip, lsr #25
   12bb4:	push	{fp, lr}
   12bb8:	add	fp, sp, #4
   12bbc:	sub	sp, sp, #32
   12bc0:	str	r0, [fp, #-24]	; 0xffffffe8
   12bc4:	str	r1, [fp, #-28]	; 0xffffffe4
   12bc8:	str	r2, [fp, #-32]	; 0xffffffe0
   12bcc:	str	r3, [fp, #-36]	; 0xffffffdc
   12bd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12bd4:	ldr	r3, [r3]
   12bd8:	str	r3, [fp, #-8]
   12bdc:	mov	r3, #0
   12be0:	str	r3, [fp, #-12]
   12be4:	b	12c58 <plt_get_lib@@Base+0x484>
   12be8:	ldr	r3, [fp, #-8]
   12bec:	ldr	r3, [r3, #4]
   12bf0:	lsr	r3, r3, #8
   12bf4:	lsl	r3, r3, #4
   12bf8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12bfc:	add	r3, r2, r3
   12c00:	str	r3, [fp, #-16]
   12c04:	ldr	r3, [fp, #-16]
   12c08:	ldr	r3, [r3]
   12c0c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12c10:	add	r3, r2, r3
   12c14:	ldr	r1, [fp, #-36]	; 0xffffffdc
   12c18:	mov	r0, r3
   12c1c:	bl	1124c <strcmp@plt>
   12c20:	mov	r3, r0
   12c24:	cmp	r3, #0
   12c28:	bne	12c38 <plt_get_lib@@Base+0x464>
   12c2c:	ldr	r3, [fp, #-8]
   12c30:	ldr	r3, [r3]
   12c34:	b	12c8c <plt_get_lib@@Base+0x4b8>
   12c38:	ldr	r3, [fp, #-12]
   12c3c:	add	r3, r3, #1
   12c40:	str	r3, [fp, #-12]
   12c44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c48:	ldr	r3, [r3, #8]
   12c4c:	ldr	r2, [fp, #-8]
   12c50:	add	r3, r2, r3
   12c54:	str	r3, [fp, #-8]
   12c58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c5c:	ldr	r2, [r3, #4]
   12c60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c64:	ldr	r3, [r3, #8]
   12c68:	mov	r1, r3
   12c6c:	mov	r0, r2
   12c70:	bl	14210 <mmk_trampoline_end@@Base+0x4>
   12c74:	mov	r3, r0
   12c78:	mov	r2, r3
   12c7c:	ldr	r3, [fp, #-12]
   12c80:	cmp	r2, r3
   12c84:	bhi	12be8 <plt_get_lib@@Base+0x414>
   12c88:	mov	r3, #0
   12c8c:	mov	r0, r3
   12c90:	sub	sp, fp, #4
   12c94:	pop	{fp, pc}
   12c98:	push	{fp, lr}
   12c9c:	add	fp, sp, #4
   12ca0:	sub	sp, sp, #56	; 0x38
   12ca4:	str	r0, [fp, #-56]	; 0xffffffc8
   12ca8:	str	r1, [fp, #-60]	; 0xffffffc4
   12cac:	mov	r1, #6
   12cb0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12cb4:	bl	12434 <mmk_mock_get_params@@Base+0x34>
   12cb8:	str	r0, [fp, #-8]
   12cbc:	mov	r1, #5
   12cc0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12cc4:	bl	12434 <mmk_mock_get_params@@Base+0x34>
   12cc8:	str	r0, [fp, #-12]
   12ccc:	mov	r1, #20
   12cd0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12cd4:	bl	124dc <mmk_mock_get_params@@Base+0xdc>
   12cd8:	mov	r3, r0
   12cdc:	str	r3, [fp, #-16]
   12ce0:	mov	r1, #23
   12ce4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12ce8:	bl	12434 <mmk_mock_get_params@@Base+0x34>
   12cec:	str	r0, [fp, #-20]	; 0xffffffec
   12cf0:	mov	r1, #2
   12cf4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12cf8:	bl	124dc <mmk_mock_get_params@@Base+0xdc>
   12cfc:	str	r0, [fp, #-24]	; 0xffffffe8
   12d00:	ldr	r3, [fp, #-16]
   12d04:	add	r3, r3, #2
   12d08:	mov	r1, r3
   12d0c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12d10:	bl	124dc <mmk_mock_get_params@@Base+0xdc>
   12d14:	str	r0, [fp, #-28]	; 0xffffffe4
   12d18:	ldr	r3, [fp, #-8]
   12d1c:	cmp	r3, #0
   12d20:	beq	12d60 <plt_get_lib@@Base+0x58c>
   12d24:	ldr	r3, [fp, #-12]
   12d28:	cmp	r3, #0
   12d2c:	beq	12d60 <plt_get_lib@@Base+0x58c>
   12d30:	ldr	r3, [fp, #-16]
   12d34:	cmp	r3, #0
   12d38:	beq	12d60 <plt_get_lib@@Base+0x58c>
   12d3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d40:	cmp	r3, #0
   12d44:	beq	12d60 <plt_get_lib@@Base+0x58c>
   12d48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12d4c:	cmp	r3, #0
   12d50:	beq	12d60 <plt_get_lib@@Base+0x58c>
   12d54:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12d58:	cmp	r3, #0
   12d5c:	bne	12d68 <plt_get_lib@@Base+0x594>
   12d60:	mov	r3, #0
   12d64:	b	12dc4 <plt_get_lib@@Base+0x5f0>
   12d68:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d6c:	str	r3, [fp, #-48]	; 0xffffffd0
   12d70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12d74:	str	r3, [fp, #-44]	; 0xffffffd4
   12d78:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12d7c:	str	r3, [fp, #-40]	; 0xffffffd8
   12d80:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12d84:	ldr	r3, [r3]
   12d88:	str	r3, [fp, #-32]	; 0xffffffe0
   12d8c:	sub	r0, fp, #48	; 0x30
   12d90:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12d94:	ldr	r2, [fp, #-12]
   12d98:	ldr	r1, [fp, #-8]
   12d9c:	bl	12bb4 <plt_get_lib@@Base+0x3e0>
   12da0:	str	r0, [fp, #-36]	; 0xffffffdc
   12da4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12da8:	cmp	r3, #0
   12dac:	beq	12dc0 <plt_get_lib@@Base+0x5ec>
   12db0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12db4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12db8:	add	r3, r2, r3
   12dbc:	b	12dc4 <plt_get_lib@@Base+0x5f0>
   12dc0:	mov	r3, #0
   12dc4:	mov	r0, r3
   12dc8:	sub	sp, fp, #4
   12dcc:	pop	{fp, pc}

00012dd0 <plt_get_offsets@@Base>:
   12dd0:	push	{fp, lr}
   12dd4:	add	fp, sp, #4
   12dd8:	sub	sp, sp, #24
   12ddc:	str	r0, [fp, #-16]
   12de0:	str	r1, [fp, #-20]	; 0xffffffec
   12de4:	str	r2, [fp, #-24]	; 0xffffffe8
   12de8:	ldr	r1, [fp, #-20]	; 0xffffffec
   12dec:	ldr	r0, [fp, #-16]
   12df0:	bl	12c98 <plt_get_lib@@Base+0x4c4>
   12df4:	str	r0, [fp, #-8]
   12df8:	ldr	r3, [fp, #-8]
   12dfc:	cmp	r3, #0
   12e00:	beq	12e44 <plt_get_offsets@@Base+0x74>
   12e04:	mov	r0, #8
   12e08:	bl	13e54 <mmk_malloc@@Base>
   12e0c:	str	r0, [fp, #-12]
   12e10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e14:	mov	r2, #1
   12e18:	str	r2, [r3]
   12e1c:	ldr	r3, [fp, #-12]
   12e20:	mov	r2, r3
   12e24:	mov	r3, #0
   12e28:	str	r3, [r2]
   12e2c:	str	r3, [r2, #4]
   12e30:	ldr	r3, [fp, #-12]
   12e34:	ldr	r2, [fp, #-8]
   12e38:	str	r2, [r3]
   12e3c:	ldr	r3, [fp, #-12]
   12e40:	b	12e48 <plt_get_offsets@@Base+0x78>
   12e44:	mov	r3, #0
   12e48:	mov	r0, r3
   12e4c:	sub	sp, fp, #4
   12e50:	pop	{fp, pc}

00012e54 <plt_set_offsets@@Base>:
   12e54:	push	{fp}		; (str fp, [sp, #-4]!)
   12e58:	add	fp, sp, #0
   12e5c:	sub	sp, sp, #28
   12e60:	str	r0, [fp, #-16]
   12e64:	str	r1, [fp, #-20]	; 0xffffffec
   12e68:	str	r2, [fp, #-24]	; 0xffffffe8
   12e6c:	mov	r3, #0
   12e70:	str	r3, [fp, #-8]
   12e74:	b	12ee8 <plt_set_offsets@@Base+0x94>
   12e78:	ldr	r3, [fp, #-8]
   12e7c:	lsl	r3, r3, #3
   12e80:	ldr	r2, [fp, #-16]
   12e84:	add	r3, r2, r3
   12e88:	ldr	r3, [r3, #4]
   12e8c:	cmp	r3, #0
   12e90:	bne	12ec0 <plt_set_offsets@@Base+0x6c>
   12e94:	ldr	r3, [fp, #-8]
   12e98:	lsl	r3, r3, #3
   12e9c:	ldr	r2, [fp, #-16]
   12ea0:	add	r3, r2, r3
   12ea4:	ldr	r2, [fp, #-8]
   12ea8:	lsl	r2, r2, #3
   12eac:	ldr	r1, [fp, #-16]
   12eb0:	add	r2, r1, r2
   12eb4:	ldr	r2, [r2]
   12eb8:	ldr	r2, [r2]
   12ebc:	str	r2, [r3, #4]
   12ec0:	ldr	r3, [fp, #-8]
   12ec4:	lsl	r3, r3, #3
   12ec8:	ldr	r2, [fp, #-16]
   12ecc:	add	r3, r2, r3
   12ed0:	ldr	r3, [r3]
   12ed4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12ed8:	str	r2, [r3]
   12edc:	ldr	r3, [fp, #-8]
   12ee0:	add	r3, r3, #1
   12ee4:	str	r3, [fp, #-8]
   12ee8:	ldr	r2, [fp, #-8]
   12eec:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ef0:	cmp	r2, r3
   12ef4:	bcc	12e78 <plt_set_offsets@@Base+0x24>
   12ef8:	nop			; (mov r0, r0)
   12efc:	add	sp, fp, #0
   12f00:	pop	{fp}		; (ldr fp, [sp], #4)
   12f04:	bx	lr

00012f08 <plt_reset_offsets@@Base>:
   12f08:	push	{fp}		; (str fp, [sp, #-4]!)
   12f0c:	add	fp, sp, #0
   12f10:	sub	sp, sp, #20
   12f14:	str	r0, [fp, #-16]
   12f18:	str	r1, [fp, #-20]	; 0xffffffec
   12f1c:	mov	r3, #0
   12f20:	str	r3, [fp, #-8]
   12f24:	b	12f60 <plt_reset_offsets@@Base+0x58>
   12f28:	ldr	r3, [fp, #-8]
   12f2c:	lsl	r3, r3, #3
   12f30:	ldr	r2, [fp, #-16]
   12f34:	add	r3, r2, r3
   12f38:	ldr	r3, [r3]
   12f3c:	ldr	r2, [fp, #-8]
   12f40:	lsl	r2, r2, #3
   12f44:	ldr	r1, [fp, #-16]
   12f48:	add	r2, r1, r2
   12f4c:	ldr	r2, [r2, #4]
   12f50:	str	r2, [r3]
   12f54:	ldr	r3, [fp, #-8]
   12f58:	add	r3, r3, #1
   12f5c:	str	r3, [fp, #-8]
   12f60:	ldr	r2, [fp, #-8]
   12f64:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f68:	cmp	r2, r3
   12f6c:	bcc	12f28 <plt_reset_offsets@@Base+0x20>
   12f70:	nop			; (mov r0, r0)
   12f74:	add	sp, fp, #0
   12f78:	pop	{fp}		; (ldr fp, [sp], #4)
   12f7c:	bx	lr

00012f80 <plt_get_real_fn@@Base>:
   12f80:	push	{fp, lr}
   12f84:	add	fp, sp, #4
   12f88:	sub	sp, sp, #16
   12f8c:	str	r0, [fp, #-16]
   12f90:	str	r1, [fp, #-20]	; 0xffffffec
   12f94:	ldr	r3, [fp, #-16]
   12f98:	ldr	r3, [r3, #4]
   12f9c:	str	r3, [fp, #-8]
   12fa0:	b	12fd8 <plt_get_real_fn@@Base+0x58>
   12fa4:	ldr	r1, [fp, #-20]	; 0xffffffec
   12fa8:	ldr	r0, [fp, #-8]
   12fac:	bl	12c98 <plt_get_lib@@Base+0x4c4>
   12fb0:	str	r0, [fp, #-12]
   12fb4:	ldr	r3, [fp, #-12]
   12fb8:	cmp	r3, #0
   12fbc:	beq	12fcc <plt_get_real_fn@@Base+0x4c>
   12fc0:	ldr	r3, [fp, #-12]
   12fc4:	ldr	r3, [r3]
   12fc8:	b	12fe8 <plt_get_real_fn@@Base+0x68>
   12fcc:	ldr	r3, [fp, #-8]
   12fd0:	ldr	r3, [r3, #12]
   12fd4:	str	r3, [fp, #-8]
   12fd8:	ldr	r3, [fp, #-8]
   12fdc:	cmp	r3, #0
   12fe0:	bne	12fa4 <plt_get_real_fn@@Base+0x24>
   12fe4:	mov	r3, #0
   12fe8:	mov	r0, r3
   12fec:	sub	sp, fp, #4
   12ff0:	pop	{fp, pc}

00012ff4 <mmk_stub_context@@Base>:
   12ff4:	push	{fp}		; (str fp, [sp, #-4]!)
   12ff8:	add	fp, sp, #0
   12ffc:	sub	sp, sp, #12
   13000:	str	r0, [fp, #-8]
   13004:	ldr	r3, [fp, #-8]
   13008:	cmp	r3, #0
   1300c:	bne	13018 <mmk_stub_context@@Base+0x24>
   13010:	mov	r3, #0
   13014:	b	13020 <mmk_stub_context@@Base+0x2c>
   13018:	ldr	r3, [fp, #-8]
   1301c:	ldr	r3, [r3, #12]
   13020:	mov	r0, r3
   13024:	add	sp, fp, #0
   13028:	pop	{fp}		; (ldr fp, [sp], #4)
   1302c:	bx	lr

00013030 <mmk_stub_create_static@@Base>:
   13030:	push	{r4, r5, fp, lr}
   13034:	add	fp, sp, #12
   13038:	sub	sp, sp, #40	; 0x28
   1303c:	str	r0, [fp, #-40]	; 0xffffffd8
   13040:	str	r1, [fp, #-44]	; 0xffffffd4
   13044:	str	r2, [fp, #-48]	; 0xffffffd0
   13048:	str	r3, [fp, #-52]	; 0xffffffcc
   1304c:	ldr	r4, [pc, #480]	; 13234 <mmk_stub_create_static@@Base+0x204>
   13050:	add	r4, pc, r4
   13054:	ldr	r3, [pc, #476]	; 13238 <mmk_stub_create_static@@Base+0x208>
   13058:	add	r3, pc, r3
   1305c:	mov	r0, r3
   13060:	bl	11318 <__tls_get_addr@plt>
   13064:	mov	r2, r0
   13068:	mov	r3, #0
   1306c:	str	r3, [r2]
   13070:	ldr	r3, [pc, #452]	; 1323c <mmk_stub_create_static@@Base+0x20c>
   13074:	add	r3, pc, r3
   13078:	mov	r0, r3
   1307c:	bl	11318 <__tls_get_addr@plt>
   13080:	mov	r2, r0
   13084:	mov	r3, #0
   13088:	str	r3, [r2]
   1308c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13090:	bl	13da0 <mmk_strlen@@Base>
   13094:	mov	r3, r0
   13098:	add	r3, r3, #1
   1309c:	mov	r0, r3
   130a0:	bl	13e54 <mmk_malloc@@Base>
   130a4:	str	r0, [fp, #-20]	; 0xffffffec
   130a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   130ac:	cmp	r3, #0
   130b0:	bne	130bc <mmk_stub_create_static@@Base+0x8c>
   130b4:	mvn	r3, #11
   130b8:	b	13228 <mmk_stub_create_static@@Base+0x1f8>
   130bc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   130c0:	ldr	r0, [fp, #-20]	; 0xffffffec
   130c4:	bl	13ca4 <mmk_strcpy@@Base>
   130c8:	mov	r3, #0
   130cc:	str	r3, [fp, #-16]
   130d0:	mov	r1, #64	; 0x40
   130d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   130d8:	bl	13c3c <mmk_strchr@@Base>
   130dc:	str	r0, [fp, #-24]	; 0xffffffe8
   130e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   130e4:	cmp	r3, #0
   130e8:	beq	13104 <mmk_stub_create_static@@Base+0xd4>
   130ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   130f0:	mov	r2, #0
   130f4:	strb	r2, [r3]
   130f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   130fc:	add	r3, r3, #1
   13100:	str	r3, [fp, #-16]
   13104:	bl	11d98 <mmk_plt_ctx@@Base>
   13108:	mov	r3, r0
   1310c:	ldr	r1, [fp, #-16]
   13110:	mov	r0, r3
   13114:	bl	127d4 <plt_get_lib@@Base>
   13118:	str	r0, [fp, #-28]	; 0xffffffe4
   1311c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13120:	cmp	r3, #0
   13124:	bne	13130 <mmk_stub_create_static@@Base+0x100>
   13128:	mvn	r3, #1
   1312c:	b	13228 <mmk_stub_create_static@@Base+0x1f8>
   13130:	mov	r3, #0
   13134:	str	r3, [fp, #-36]	; 0xffffffdc
   13138:	sub	r3, fp, #36	; 0x24
   1313c:	mov	r2, r3
   13140:	ldr	r1, [fp, #-20]	; 0xffffffec
   13144:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13148:	bl	12dd0 <plt_get_offsets@@Base>
   1314c:	str	r0, [fp, #-32]	; 0xffffffe0
   13150:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13154:	cmp	r3, #0
   13158:	beq	13168 <mmk_stub_create_static@@Base+0x138>
   1315c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13160:	cmp	r3, #0
   13164:	bne	13170 <mmk_stub_create_static@@Base+0x140>
   13168:	mvn	r3, #1
   1316c:	b	13228 <mmk_stub_create_static@@Base+0x1f8>
   13170:	ldr	r5, [fp, #-36]	; 0xffffffdc
   13174:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13178:	mov	r0, r3
   1317c:	mov	r3, #40	; 0x28
   13180:	mov	r2, r3
   13184:	mov	r1, #0
   13188:	bl	112f4 <memset@plt>
   1318c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13190:	ldr	r2, [pc, #168]	; 13240 <mmk_stub_create_static@@Base+0x210>
   13194:	ldr	r2, [r4, r2]
   13198:	str	r2, [r3]
   1319c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   131a0:	ldr	r2, [pc, #156]	; 13244 <mmk_stub_create_static@@Base+0x214>
   131a4:	ldr	r2, [r4, r2]
   131a8:	str	r2, [r3, #4]
   131ac:	ldr	r3, [fp, #-40]	; 0xffffffd8
   131b0:	ldr	r2, [pc, #144]	; 13248 <mmk_stub_create_static@@Base+0x218>
   131b4:	ldr	r2, [r4, r2]
   131b8:	str	r2, [r3, #8]
   131bc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   131c0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   131c4:	str	r2, [r3, #12]
   131c8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   131cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   131d0:	str	r2, [r3, #16]
   131d4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   131d8:	ldr	r2, [fp, #-16]
   131dc:	str	r2, [r3, #20]
   131e0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   131e4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   131e8:	str	r2, [r3, #24]
   131ec:	ldr	r3, [fp, #-40]	; 0xffffffd8
   131f0:	str	r5, [r3, #28]
   131f4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   131f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   131fc:	bl	13468 <create_trampoline@@Base>
   13200:	mov	r2, r0
   13204:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13208:	str	r2, [r3, #32]
   1320c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13210:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13214:	ldr	r3, [r3, #32]
   13218:	mov	r2, r3
   1321c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13220:	bl	12e54 <plt_set_offsets@@Base>
   13224:	mov	r3, #0
   13228:	mov	r0, r3
   1322c:	sub	sp, fp, #12
   13230:	pop	{r4, r5, fp, pc}
   13234:	andeq	r1, r1, r8, lsr #31
   13238:	andeq	r2, r1, ip
   1323c:	strdeq	r1, [r1], -r8
   13240:	strheq	r0, [r0], -r8
   13244:	muleq	r0, r8, r0
   13248:	andeq	r0, r0, r8, lsr #1

0001324c <mmk_stub_create@@Base>:
   1324c:	push	{fp, lr}
   13250:	add	fp, sp, #4
   13254:	sub	sp, sp, #24
   13258:	str	r0, [fp, #-16]
   1325c:	str	r1, [fp, #-20]	; 0xffffffec
   13260:	str	r2, [fp, #-24]	; 0xffffffe8
   13264:	bl	11cb8 <mmk_init@@Base>
   13268:	mov	r0, #40	; 0x28
   1326c:	bl	13e54 <mmk_malloc@@Base>
   13270:	str	r0, [fp, #-8]
   13274:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13278:	ldr	r2, [fp, #-20]	; 0xffffffec
   1327c:	ldr	r1, [fp, #-16]
   13280:	ldr	r0, [fp, #-8]
   13284:	bl	13030 <mmk_stub_create_static@@Base>
   13288:	str	r0, [fp, #-12]
   1328c:	ldr	r3, [fp, #-12]
   13290:	cmp	r3, #0
   13294:	bge	132b8 <mmk_stub_create@@Base+0x6c>
   13298:	ldr	r0, [fp, #-8]
   1329c:	bl	13ee4 <mmk_free@@Base>
   132a0:	bl	112dc <__errno_location@plt>
   132a4:	mov	r2, r0
   132a8:	ldr	r3, [fp, #-12]
   132ac:	str	r3, [r2]
   132b0:	mov	r3, #0
   132b4:	str	r3, [fp, #-8]
   132b8:	ldr	r3, [fp, #-8]
   132bc:	mov	r0, r3
   132c0:	sub	sp, fp, #4
   132c4:	pop	{fp, pc}

000132c8 <mmk_stub_destroy_static@@Base>:
   132c8:	push	{fp, lr}
   132cc:	add	fp, sp, #4
   132d0:	sub	sp, sp, #8
   132d4:	str	r0, [fp, #-8]
   132d8:	ldr	r3, [fp, #-8]
   132dc:	ldr	r2, [r3, #24]
   132e0:	ldr	r3, [fp, #-8]
   132e4:	ldr	r3, [r3, #28]
   132e8:	mov	r1, r3
   132ec:	mov	r0, r2
   132f0:	bl	12f08 <plt_reset_offsets@@Base>
   132f4:	ldr	r3, [fp, #-8]
   132f8:	ldr	r3, [r3, #24]
   132fc:	mov	r0, r3
   13300:	bl	13ee4 <mmk_free@@Base>
   13304:	ldr	r3, [fp, #-8]
   13308:	ldr	r3, [r3, #32]
   1330c:	mov	r0, r3
   13310:	bl	135cc <destroy_trampoline@@Base>
   13314:	ldr	r3, [fp, #-8]
   13318:	ldr	r3, [r3, #16]
   1331c:	mov	r0, r3
   13320:	bl	13ee4 <mmk_free@@Base>
   13324:	nop			; (mov r0, r0)
   13328:	sub	sp, fp, #4
   1332c:	pop	{fp, pc}

00013330 <mmk_stub_destroy@@Base>:
   13330:	push	{fp, lr}
   13334:	add	fp, sp, #4
   13338:	sub	sp, sp, #8
   1333c:	str	r0, [fp, #-8]
   13340:	ldr	r0, [fp, #-8]
   13344:	bl	132c8 <mmk_stub_destroy_static@@Base>
   13348:	ldr	r0, [fp, #-8]
   1334c:	bl	13ee4 <mmk_free@@Base>
   13350:	nop			; (mov r0, r0)
   13354:	sub	sp, fp, #4
   13358:	pop	{fp, pc}

0001335c <mmk_ask_ctx@@Base>:
   1335c:	push	{fp, lr}
   13360:	add	fp, sp, #4
   13364:	sub	sp, sp, #8
   13368:	str	r0, [fp, #-8]
   1336c:	ldr	r3, [pc, #44]	; 133a0 <mmk_ask_ctx@@Base+0x44>
   13370:	add	r3, pc, r3
   13374:	mov	r0, r3
   13378:	bl	11318 <__tls_get_addr@plt>
   1337c:	mov	r2, r0
   13380:	mov	r3, #1
   13384:	str	r3, [r2]
   13388:	ldr	r3, [fp, #-8]
   1338c:	blx	r3
   13390:	mov	r3, r0
   13394:	mov	r0, r3
   13398:	sub	sp, fp, #4
   1339c:	pop	{fp, pc}
   133a0:	strdeq	r1, [r1], -r4

000133a4 <mmk_ctx_asked@@Base>:
   133a4:	push	{fp, lr}
   133a8:	add	fp, sp, #4
   133ac:	sub	sp, sp, #8
   133b0:	ldr	r3, [pc, #64]	; 133f8 <mmk_ctx_asked@@Base+0x54>
   133b4:	add	r3, pc, r3
   133b8:	mov	r0, r3
   133bc:	bl	11318 <__tls_get_addr@plt>
   133c0:	mov	r3, r0
   133c4:	ldr	r3, [r3]
   133c8:	str	r3, [fp, #-8]
   133cc:	ldr	r3, [pc, #40]	; 133fc <mmk_ctx_asked@@Base+0x58>
   133d0:	add	r3, pc, r3
   133d4:	mov	r0, r3
   133d8:	bl	11318 <__tls_get_addr@plt>
   133dc:	mov	r2, r0
   133e0:	mov	r3, #0
   133e4:	str	r3, [r2]
   133e8:	ldr	r3, [fp, #-8]
   133ec:	mov	r0, r3
   133f0:	sub	sp, fp, #4
   133f4:	pop	{fp, pc}
   133f8:			; <UNDEFINED> instruction: 0x00011cb0
   133fc:	muleq	r1, r4, ip

00013400 <mmk_ctx@@Base>:
   13400:	push	{fp, lr}
   13404:	add	fp, sp, #4
   13408:	ldr	r3, [pc, #24]	; 13428 <mmk_ctx@@Base+0x28>
   1340c:	add	r3, pc, r3
   13410:	mov	r0, r3
   13414:	bl	11318 <__tls_get_addr@plt>
   13418:	mov	r3, r0
   1341c:	ldr	r3, [r3]
   13420:	mov	r0, r3
   13424:	pop	{fp, pc}
   13428:	andeq	r1, r1, r0, ror #24

0001342c <mmk_set_ctx@@Base>:
   1342c:	push	{fp, lr}
   13430:	add	fp, sp, #4
   13434:	sub	sp, sp, #8
   13438:	str	r0, [fp, #-8]
   1343c:	ldr	r3, [pc, #32]	; 13464 <mmk_set_ctx@@Base+0x38>
   13440:	add	r3, pc, r3
   13444:	mov	r0, r3
   13448:	bl	11318 <__tls_get_addr@plt>
   1344c:	mov	r2, r0
   13450:	ldr	r3, [fp, #-8]
   13454:	str	r3, [r2]
   13458:	nop			; (mov r0, r0)
   1345c:	sub	sp, fp, #4
   13460:	pop	{fp, pc}
   13464:	andeq	r1, r1, ip, lsr #24

00013468 <create_trampoline@@Base>:
   13468:	push	{r4, fp, lr}
   1346c:	add	fp, sp, #8
   13470:	sub	sp, sp, #28
   13474:	str	r0, [fp, #-24]	; 0xffffffe8
   13478:	str	r1, [fp, #-28]	; 0xffffffe4
   1347c:	ldr	r4, [pc, #288]	; 135a4 <create_trampoline@@Base+0x13c>
   13480:	add	r4, pc, r4
   13484:	ldr	r3, [pc, #284]	; 135a8 <create_trampoline@@Base+0x140>
   13488:	ldr	r3, [r4, r3]
   1348c:	mov	r2, r3
   13490:	ldr	r3, [pc, #276]	; 135ac <create_trampoline@@Base+0x144>
   13494:	ldr	r3, [r4, r3]
   13498:	sub	r3, r2, r3
   1349c:	str	r3, [fp, #-16]
   134a0:	ldr	r3, [fp, #-16]
   134a4:	cmp	r3, #4096	; 0x1000
   134a8:	bcc	134e0 <create_trampoline@@Base+0x78>
   134ac:	ldr	r3, [pc, #252]	; 135b0 <create_trampoline@@Base+0x148>
   134b0:	ldr	r3, [r4, r3]
   134b4:	ldr	r0, [r3]
   134b8:	ldr	r3, [pc, #244]	; 135b4 <create_trampoline@@Base+0x14c>
   134bc:	add	r3, pc, r3
   134c0:	str	r3, [sp]
   134c4:	mov	r3, #45	; 0x2d
   134c8:	ldr	r2, [pc, #232]	; 135b8 <create_trampoline@@Base+0x150>
   134cc:	add	r2, pc, r2
   134d0:	ldr	r1, [pc, #228]	; 135bc <create_trampoline@@Base+0x154>
   134d4:	add	r1, pc, r1
   134d8:	bl	112d0 <fprintf@plt>
   134dc:	bl	11330 <abort@plt>
   134e0:	mov	r3, #0
   134e4:	str	r3, [sp, #4]
   134e8:	mvn	r3, #0
   134ec:	str	r3, [sp]
   134f0:	mov	r3, #34	; 0x22
   134f4:	mov	r2, #7
   134f8:	mov	r1, #4096	; 0x1000
   134fc:	mov	r0, #0
   13500:	bl	112b8 <mmap@plt>
   13504:	str	r0, [fp, #-20]	; 0xffffffec
   13508:	ldr	r3, [fp, #-20]	; 0xffffffec
   1350c:	cmn	r3, #1
   13510:	bne	13548 <create_trampoline@@Base+0xe0>
   13514:	ldr	r3, [pc, #148]	; 135b0 <create_trampoline@@Base+0x148>
   13518:	ldr	r3, [r4, r3]
   1351c:	ldr	r0, [r3]
   13520:	ldr	r3, [pc, #152]	; 135c0 <create_trampoline@@Base+0x158>
   13524:	add	r3, pc, r3
   13528:	str	r3, [sp]
   1352c:	mov	r3, #69	; 0x45
   13530:	ldr	r2, [pc, #140]	; 135c4 <create_trampoline@@Base+0x15c>
   13534:	add	r2, pc, r2
   13538:	ldr	r1, [pc, #136]	; 135c8 <create_trampoline@@Base+0x160>
   1353c:	add	r1, pc, r1
   13540:	bl	112d0 <fprintf@plt>
   13544:	bl	11330 <abort@plt>
   13548:	ldr	r3, [fp, #-20]	; 0xffffffec
   1354c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13550:	str	r2, [r3]
   13554:	ldr	r3, [fp, #-20]	; 0xffffffec
   13558:	add	r3, r3, #4
   1355c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13560:	str	r2, [r3]
   13564:	ldr	r3, [fp, #-20]	; 0xffffffec
   13568:	add	r0, r3, #8
   1356c:	ldr	r2, [fp, #-16]
   13570:	ldr	r3, [pc, #52]	; 135ac <create_trampoline@@Base+0x144>
   13574:	ldr	r3, [r4, r3]
   13578:	mov	r1, r3
   1357c:	bl	11270 <memcpy@plt>
   13580:	mov	r2, #5
   13584:	mov	r1, #4096	; 0x1000
   13588:	ldr	r0, [fp, #-20]	; 0xffffffec
   1358c:	bl	11258 <mprotect@plt>
   13590:	ldr	r3, [fp, #-20]	; 0xffffffec
   13594:	add	r3, r3, #8
   13598:	mov	r0, r3
   1359c:	sub	sp, fp, #8
   135a0:	pop	{r4, fp, pc}
   135a4:	andeq	r1, r1, r8, ror fp
   135a8:	andeq	r0, r0, ip, lsl #1
   135ac:	muleq	r0, r4, r0
   135b0:	muleq	r0, r0, r0
   135b4:	andeq	r1, r0, r4, lsl r3
   135b8:	andeq	r1, r0, ip, lsl #5
   135bc:	ldrdeq	r1, [r0], -ip
   135c0:	andeq	r1, r0, r8, asr #5
   135c4:	andeq	r1, r0, r4, lsr #4
   135c8:	andeq	r1, r0, r4, ror r2

000135cc <destroy_trampoline@@Base>:
   135cc:	push	{fp, lr}
   135d0:	add	fp, sp, #4
   135d4:	sub	sp, sp, #8
   135d8:	str	r0, [fp, #-8]
   135dc:	ldr	r3, [fp, #-8]
   135e0:	sub	r3, r3, #8
   135e4:	mov	r1, #4096	; 0x1000
   135e8:	mov	r0, r3
   135ec:	bl	11300 <munmap@plt>
   135f0:	nop			; (mov r0, r0)
   135f4:	sub	sp, fp, #4
   135f8:	pop	{fp, pc}

000135fc <mmk_verify_set_times@@Base>:
   135fc:	push	{fp, lr}
   13600:	add	fp, sp, #4
   13604:	sub	sp, sp, #8
   13608:	str	r0, [fp, #-8]
   1360c:	ldr	r3, [pc, #32]	; 13634 <mmk_verify_set_times@@Base+0x38>
   13610:	add	r3, pc, r3
   13614:	mov	r0, r3
   13618:	bl	11318 <__tls_get_addr@plt>
   1361c:	mov	r2, r0
   13620:	ldr	r3, [fp, #-8]
   13624:	str	r3, [r2]
   13628:	nop			; (mov r0, r0)
   1362c:	sub	sp, fp, #4
   13630:	pop	{fp, pc}
   13634:	andeq	r1, r1, r4, ror #20

00013638 <mmk_verify_times@@Base>:
   13638:	push	{fp, lr}
   1363c:	add	fp, sp, #4
   13640:	sub	sp, sp, #16
   13644:	str	r0, [fp, #-16]
   13648:	ldr	r3, [pc, #260]	; 13754 <mmk_verify_times@@Base+0x11c>
   1364c:	add	r3, pc, r3
   13650:	mov	r0, r3
   13654:	bl	11318 <__tls_get_addr@plt>
   13658:	mov	r3, r0
   1365c:	ldr	r3, [r3]
   13660:	str	r3, [fp, #-8]
   13664:	ldr	r3, [fp, #-16]
   13668:	ldr	r3, [r3, #4]
   1366c:	cmp	r3, #0
   13670:	beq	1368c <mmk_verify_times@@Base+0x54>
   13674:	ldr	r3, [fp, #-8]
   13678:	cmp	r3, #0
   1367c:	moveq	r3, #1
   13680:	movne	r3, #0
   13684:	uxtb	r3, r3
   13688:	b	13748 <mmk_verify_times@@Base+0x110>
   1368c:	ldr	r3, [fp, #-16]
   13690:	ldr	r3, [r3, #8]
   13694:	cmp	r3, #0
   13698:	bne	136ac <mmk_verify_times@@Base+0x74>
   1369c:	ldr	r3, [fp, #-16]
   136a0:	ldr	r3, [r3, #12]
   136a4:	cmp	r3, #0
   136a8:	beq	13704 <mmk_verify_times@@Base+0xcc>
   136ac:	ldr	r3, [fp, #-16]
   136b0:	ldr	r3, [r3, #12]
   136b4:	cmp	r3, #0
   136b8:	beq	136c8 <mmk_verify_times@@Base+0x90>
   136bc:	ldr	r3, [fp, #-16]
   136c0:	ldr	r3, [r3, #12]
   136c4:	b	136cc <mmk_verify_times@@Base+0x94>
   136c8:	ldr	r3, [fp, #-8]
   136cc:	str	r3, [fp, #-12]
   136d0:	ldr	r3, [fp, #-16]
   136d4:	ldr	r2, [r3, #8]
   136d8:	ldr	r3, [fp, #-8]
   136dc:	cmp	r2, r3
   136e0:	bhi	136fc <mmk_verify_times@@Base+0xc4>
   136e4:	ldr	r2, [fp, #-8]
   136e8:	ldr	r3, [fp, #-12]
   136ec:	cmp	r2, r3
   136f0:	bhi	136fc <mmk_verify_times@@Base+0xc4>
   136f4:	mov	r3, #1
   136f8:	b	13748 <mmk_verify_times@@Base+0x110>
   136fc:	mov	r3, #0
   13700:	b	13748 <mmk_verify_times@@Base+0x110>
   13704:	ldr	r3, [fp, #-16]
   13708:	ldr	r3, [r3, #20]
   1370c:	cmp	r3, #0
   13710:	beq	1372c <mmk_verify_times@@Base+0xf4>
   13714:	ldr	r3, [fp, #-16]
   13718:	ldr	r3, [r3, #20]
   1371c:	ldr	r0, [fp, #-8]
   13720:	blx	r3
   13724:	mov	r3, r0
   13728:	b	13748 <mmk_verify_times@@Base+0x110>
   1372c:	ldr	r3, [fp, #-16]
   13730:	ldr	r2, [r3, #16]
   13734:	ldr	r3, [fp, #-8]
   13738:	cmp	r2, r3
   1373c:	moveq	r3, #1
   13740:	movne	r3, #0
   13744:	uxtb	r3, r3
   13748:	mov	r0, r3
   1374c:	sub	sp, fp, #4
   13750:	pop	{fp, pc}
   13754:	andeq	r1, r1, r8, lsr #20
   13758:	push	{fp, lr}
   1375c:	add	fp, sp, #4
   13760:	sub	sp, sp, #32
   13764:	str	r0, [fp, #-24]	; 0xffffffe8
   13768:	str	r1, [fp, #-28]	; 0xffffffe4
   1376c:	str	r2, [fp, #-32]	; 0xffffffe0
   13770:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13774:	add	r3, r3, #4
   13778:	str	r3, [fp, #-28]	; 0xffffffe4
   1377c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13780:	sub	r3, r3, #4
   13784:	str	r3, [fp, #-32]	; 0xffffffe0
   13788:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1378c:	bl	12334 <mmk_mock_params_begin@@Base>
   13790:	str	r0, [fp, #-8]
   13794:	b	137f4 <mmk_verify_times@@Base+0x1bc>
   13798:	ldr	r3, [fp, #-8]
   1379c:	add	r3, r3, #4
   137a0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   137a4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   137a8:	mov	r0, r3
   137ac:	bl	13a48 <mmk_memcmp@@Base>
   137b0:	str	r0, [fp, #-12]
   137b4:	ldr	r3, [fp, #-12]
   137b8:	cmp	r3, #0
   137bc:	bne	137e4 <mmk_verify_times@@Base+0x1ac>
   137c0:	ldr	r3, [fp, #-8]
   137c4:	str	r3, [fp, #-16]
   137c8:	ldr	r3, [fp, #-16]
   137cc:	ldr	r3, [r3]
   137d0:	add	r2, r3, #1
   137d4:	ldr	r3, [fp, #-16]
   137d8:	str	r2, [r3]
   137dc:	mov	r3, #1
   137e0:	b	13804 <mmk_verify_times@@Base+0x1cc>
   137e4:	ldr	r1, [fp, #-8]
   137e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   137ec:	bl	12388 <mmk_mock_params_next@@Base>
   137f0:	str	r0, [fp, #-8]
   137f4:	ldr	r3, [fp, #-8]
   137f8:	cmp	r3, #0
   137fc:	bne	13798 <mmk_verify_times@@Base+0x160>
   13800:	mov	r3, #0
   13804:	mov	r0, r3
   13808:	sub	sp, fp, #4
   1380c:	pop	{fp, pc}

00013810 <mmk_verify_register_call@@Base>:
   13810:	push	{r4, fp, lr}
   13814:	add	fp, sp, #8
   13818:	sub	sp, sp, #28
   1381c:	str	r0, [fp, #-24]	; 0xffffffe8
   13820:	str	r1, [fp, #-28]	; 0xffffffe4
   13824:	ldr	r4, [pc, #508]	; 13a28 <mmk_verify_register_call@@Base+0x218>
   13828:	add	r4, pc, r4
   1382c:	bl	13400 <mmk_ctx@@Base>
   13830:	mov	r3, r0
   13834:	mov	r0, r3
   13838:	bl	12ff4 <mmk_stub_context@@Base>
   1383c:	str	r0, [fp, #-16]
   13840:	ldr	r3, [fp, #-16]
   13844:	ldr	r3, [r3, #8]
   13848:	cmp	r3, #0
   1384c:	bne	138b4 <mmk_verify_register_call@@Base+0xa4>
   13850:	mov	r0, #4096	; 0x1000
   13854:	bl	13e54 <mmk_malloc@@Base>
   13858:	mov	r2, r0
   1385c:	ldr	r3, [fp, #-16]
   13860:	str	r2, [r3, #8]
   13864:	ldr	r3, [fp, #-16]
   13868:	ldr	r3, [r3, #8]
   1386c:	cmp	r3, #0
   13870:	bne	138a8 <mmk_verify_register_call@@Base+0x98>
   13874:	ldr	r3, [pc, #432]	; 13a2c <mmk_verify_register_call@@Base+0x21c>
   13878:	ldr	r3, [r4, r3]
   1387c:	ldr	r0, [r3]
   13880:	ldr	r3, [pc, #424]	; 13a30 <mmk_verify_register_call@@Base+0x220>
   13884:	add	r3, pc, r3
   13888:	str	r3, [sp]
   1388c:	mov	r3, #79	; 0x4f
   13890:	ldr	r2, [pc, #412]	; 13a34 <mmk_verify_register_call@@Base+0x224>
   13894:	add	r2, pc, r2
   13898:	ldr	r1, [pc, #408]	; 13a38 <mmk_verify_register_call@@Base+0x228>
   1389c:	add	r1, pc, r1
   138a0:	bl	112d0 <fprintf@plt>
   138a4:	bl	11330 <abort@plt>
   138a8:	ldr	r3, [fp, #-16]
   138ac:	mov	r2, #4096	; 0x1000
   138b0:	str	r2, [r3, #16]
   138b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   138b8:	mov	r2, r3
   138bc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   138c0:	ldr	r0, [fp, #-16]
   138c4:	bl	13758 <mmk_verify_times@@Base+0x120>
   138c8:	mov	r3, r0
   138cc:	cmp	r3, #0
   138d0:	bne	13a1c <mmk_verify_register_call@@Base+0x20c>
   138d4:	ldr	r3, [fp, #-16]
   138d8:	ldr	r2, [r3, #12]
   138dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   138e0:	add	r3, r2, r3
   138e4:	add	r2, r3, #4
   138e8:	ldr	r3, [fp, #-16]
   138ec:	ldr	r3, [r3, #16]
   138f0:	cmp	r2, r3
   138f4:	bcc	139a0 <mmk_verify_register_call@@Base+0x190>
   138f8:	b	13910 <mmk_verify_register_call@@Base+0x100>
   138fc:	ldr	r3, [fp, #-16]
   13900:	ldr	r3, [r3, #16]
   13904:	add	r2, r3, #4096	; 0x1000
   13908:	ldr	r3, [fp, #-16]
   1390c:	str	r2, [r3, #16]
   13910:	ldr	r3, [fp, #-16]
   13914:	ldr	r2, [r3, #12]
   13918:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1391c:	add	r3, r2, r3
   13920:	add	r2, r3, #4
   13924:	ldr	r3, [fp, #-16]
   13928:	ldr	r3, [r3, #16]
   1392c:	cmp	r2, r3
   13930:	bcs	138fc <mmk_verify_register_call@@Base+0xec>
   13934:	ldr	r3, [fp, #-16]
   13938:	ldr	r2, [r3, #8]
   1393c:	ldr	r3, [fp, #-16]
   13940:	ldr	r3, [r3, #16]
   13944:	mov	r1, r3
   13948:	mov	r0, r2
   1394c:	bl	13e98 <mmk_realloc@@Base>
   13950:	mov	r2, r0
   13954:	ldr	r3, [fp, #-16]
   13958:	str	r2, [r3, #8]
   1395c:	ldr	r3, [fp, #-16]
   13960:	ldr	r3, [r3, #8]
   13964:	cmp	r3, #0
   13968:	bne	139a0 <mmk_verify_register_call@@Base+0x190>
   1396c:	ldr	r3, [pc, #184]	; 13a2c <mmk_verify_register_call@@Base+0x21c>
   13970:	ldr	r3, [r4, r3]
   13974:	ldr	r0, [r3]
   13978:	ldr	r3, [pc, #188]	; 13a3c <mmk_verify_register_call@@Base+0x22c>
   1397c:	add	r3, pc, r3
   13980:	str	r3, [sp]
   13984:	mov	r3, #91	; 0x5b
   13988:	ldr	r2, [pc, #176]	; 13a40 <mmk_verify_register_call@@Base+0x230>
   1398c:	add	r2, pc, r2
   13990:	ldr	r1, [pc, #172]	; 13a44 <mmk_verify_register_call@@Base+0x234>
   13994:	add	r1, pc, r1
   13998:	bl	112d0 <fprintf@plt>
   1399c:	bl	11330 <abort@plt>
   139a0:	ldr	r3, [fp, #-16]
   139a4:	ldr	r2, [r3, #8]
   139a8:	ldr	r3, [fp, #-16]
   139ac:	ldr	r3, [r3, #12]
   139b0:	add	r3, r2, r3
   139b4:	sub	r1, fp, #28
   139b8:	mov	r2, #4
   139bc:	mov	r0, r3
   139c0:	bl	13af8 <mmk_memcpy@@Base>
   139c4:	ldr	r3, [fp, #-16]
   139c8:	ldr	r2, [r3, #8]
   139cc:	ldr	r3, [fp, #-16]
   139d0:	ldr	r3, [r3, #12]
   139d4:	add	r3, r3, #4
   139d8:	add	r3, r2, r3
   139dc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   139e0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   139e4:	mov	r0, r3
   139e8:	bl	13af8 <mmk_memcpy@@Base>
   139ec:	str	r0, [fp, #-20]	; 0xffffffec
   139f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   139f4:	mov	r2, #1
   139f8:	str	r2, [r3]
   139fc:	ldr	r3, [fp, #-16]
   13a00:	ldr	r2, [r3, #12]
   13a04:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13a08:	add	r3, r2, r3
   13a0c:	add	r2, r3, #4
   13a10:	ldr	r3, [fp, #-16]
   13a14:	str	r2, [r3, #12]
   13a18:	b	13a20 <mmk_verify_register_call@@Base+0x210>
   13a1c:	nop			; (mov r0, r0)
   13a20:	sub	sp, fp, #8
   13a24:	pop	{r4, fp, pc}
   13a28:	ldrdeq	r1, [r1], -r0
   13a2c:	muleq	r0, r0, r0
   13a30:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13a34:	andeq	r0, r0, ip, ror #30
   13a38:			; <UNDEFINED> instruction: 0x00000fb8
   13a3c:	strdeq	r0, [r0], -r8
   13a40:	andeq	r0, r0, r4, ror lr
   13a44:	andeq	r0, r0, r0, asr #29

00013a48 <mmk_memcmp@@Base>:
   13a48:	push	{fp}		; (str fp, [sp, #-4]!)
   13a4c:	add	fp, sp, #0
   13a50:	sub	sp, sp, #28
   13a54:	str	r0, [fp, #-16]
   13a58:	str	r1, [fp, #-20]	; 0xffffffec
   13a5c:	str	r2, [fp, #-24]	; 0xffffffe8
   13a60:	ldr	r3, [fp, #-16]
   13a64:	str	r3, [fp, #-8]
   13a68:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a6c:	str	r3, [fp, #-12]
   13a70:	b	13ad8 <mmk_memcmp@@Base+0x90>
   13a74:	ldr	r3, [fp, #-8]
   13a78:	ldrb	r2, [r3]
   13a7c:	ldr	r3, [fp, #-12]
   13a80:	ldrb	r3, [r3]
   13a84:	cmp	r2, r3
   13a88:	beq	13ab4 <mmk_memcmp@@Base+0x6c>
   13a8c:	ldr	r3, [fp, #-8]
   13a90:	ldrb	r2, [r3]
   13a94:	ldr	r3, [fp, #-12]
   13a98:	ldrb	r3, [r3]
   13a9c:	cmp	r2, r3
   13aa0:	bcs	13aac <mmk_memcmp@@Base+0x64>
   13aa4:	mvn	r3, #0
   13aa8:	b	13ae8 <mmk_memcmp@@Base+0xa0>
   13aac:	mov	r3, #1
   13ab0:	b	13ae8 <mmk_memcmp@@Base+0xa0>
   13ab4:	ldr	r3, [fp, #-8]
   13ab8:	add	r3, r3, #1
   13abc:	str	r3, [fp, #-8]
   13ac0:	ldr	r3, [fp, #-12]
   13ac4:	add	r3, r3, #1
   13ac8:	str	r3, [fp, #-12]
   13acc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ad0:	sub	r3, r3, #1
   13ad4:	str	r3, [fp, #-24]	; 0xffffffe8
   13ad8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13adc:	cmp	r3, #0
   13ae0:	bne	13a74 <mmk_memcmp@@Base+0x2c>
   13ae4:	mov	r3, #0
   13ae8:	mov	r0, r3
   13aec:	add	sp, fp, #0
   13af0:	pop	{fp}		; (ldr fp, [sp], #4)
   13af4:	bx	lr

00013af8 <mmk_memcpy@@Base>:
   13af8:	push	{fp}		; (str fp, [sp, #-4]!)
   13afc:	add	fp, sp, #0
   13b00:	sub	sp, sp, #28
   13b04:	str	r0, [fp, #-16]
   13b08:	str	r1, [fp, #-20]	; 0xffffffec
   13b0c:	str	r2, [fp, #-24]	; 0xffffffe8
   13b10:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b14:	str	r3, [fp, #-8]
   13b18:	ldr	r3, [fp, #-16]
   13b1c:	str	r3, [fp, #-12]
   13b20:	b	13b58 <mmk_memcpy@@Base+0x60>
   13b24:	ldr	r3, [fp, #-8]
   13b28:	ldrb	r2, [r3]
   13b2c:	ldr	r3, [fp, #-12]
   13b30:	strb	r2, [r3]
   13b34:	ldr	r3, [fp, #-12]
   13b38:	add	r3, r3, #1
   13b3c:	str	r3, [fp, #-12]
   13b40:	ldr	r3, [fp, #-8]
   13b44:	add	r3, r3, #1
   13b48:	str	r3, [fp, #-8]
   13b4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b50:	sub	r3, r3, #1
   13b54:	str	r3, [fp, #-24]	; 0xffffffe8
   13b58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b5c:	cmp	r3, #0
   13b60:	bne	13b24 <mmk_memcpy@@Base+0x2c>
   13b64:	ldr	r3, [fp, #-16]
   13b68:	mov	r0, r3
   13b6c:	add	sp, fp, #0
   13b70:	pop	{fp}		; (ldr fp, [sp], #4)
   13b74:	bx	lr

00013b78 <mmk_strneq@@Base>:
   13b78:	push	{fp}		; (str fp, [sp, #-4]!)
   13b7c:	add	fp, sp, #0
   13b80:	sub	sp, sp, #20
   13b84:	str	r0, [fp, #-8]
   13b88:	str	r1, [fp, #-12]
   13b8c:	str	r2, [fp, #-16]
   13b90:	b	13bd8 <mmk_strneq@@Base+0x60>
   13b94:	ldr	r3, [fp, #-8]
   13b98:	ldrb	r2, [r3]
   13b9c:	ldr	r3, [fp, #-12]
   13ba0:	ldrb	r3, [r3]
   13ba4:	cmp	r2, r3
   13ba8:	beq	13bb4 <mmk_strneq@@Base+0x3c>
   13bac:	mov	r3, #0
   13bb0:	b	13c2c <mmk_strneq@@Base+0xb4>
   13bb4:	ldr	r3, [fp, #-8]
   13bb8:	add	r3, r3, #1
   13bbc:	str	r3, [fp, #-8]
   13bc0:	ldr	r3, [fp, #-12]
   13bc4:	add	r3, r3, #1
   13bc8:	str	r3, [fp, #-12]
   13bcc:	ldr	r3, [fp, #-16]
   13bd0:	sub	r3, r3, #1
   13bd4:	str	r3, [fp, #-16]
   13bd8:	ldr	r3, [fp, #-8]
   13bdc:	ldrb	r3, [r3]
   13be0:	cmp	r3, #0
   13be4:	beq	13c04 <mmk_strneq@@Base+0x8c>
   13be8:	ldr	r3, [fp, #-12]
   13bec:	ldrb	r3, [r3]
   13bf0:	cmp	r3, #0
   13bf4:	beq	13c04 <mmk_strneq@@Base+0x8c>
   13bf8:	ldr	r3, [fp, #-16]
   13bfc:	cmp	r3, #0
   13c00:	bne	13b94 <mmk_strneq@@Base+0x1c>
   13c04:	ldr	r3, [fp, #-16]
   13c08:	cmp	r3, #0
   13c0c:	beq	13c20 <mmk_strneq@@Base+0xa8>
   13c10:	ldr	r3, [fp, #-12]
   13c14:	ldrb	r3, [r3]
   13c18:	cmp	r3, #0
   13c1c:	bne	13c28 <mmk_strneq@@Base+0xb0>
   13c20:	mov	r3, #1
   13c24:	b	13c2c <mmk_strneq@@Base+0xb4>
   13c28:	mov	r3, #0
   13c2c:	mov	r0, r3
   13c30:	add	sp, fp, #0
   13c34:	pop	{fp}		; (ldr fp, [sp], #4)
   13c38:	bx	lr

00013c3c <mmk_strchr@@Base>:
   13c3c:	push	{fp}		; (str fp, [sp, #-4]!)
   13c40:	add	fp, sp, #0
   13c44:	sub	sp, sp, #12
   13c48:	str	r0, [fp, #-8]
   13c4c:	str	r1, [fp, #-12]
   13c50:	b	13c80 <mmk_strchr@@Base+0x44>
   13c54:	ldr	r3, [fp, #-8]
   13c58:	ldrb	r3, [r3]
   13c5c:	mov	r2, r3
   13c60:	ldr	r3, [fp, #-12]
   13c64:	cmp	r2, r3
   13c68:	bne	13c74 <mmk_strchr@@Base+0x38>
   13c6c:	ldr	r3, [fp, #-8]
   13c70:	b	13c94 <mmk_strchr@@Base+0x58>
   13c74:	ldr	r3, [fp, #-8]
   13c78:	add	r3, r3, #1
   13c7c:	str	r3, [fp, #-8]
   13c80:	ldr	r3, [fp, #-8]
   13c84:	ldrb	r3, [r3]
   13c88:	cmp	r3, #0
   13c8c:	bne	13c54 <mmk_strchr@@Base+0x18>
   13c90:	mov	r3, #0
   13c94:	mov	r0, r3
   13c98:	add	sp, fp, #0
   13c9c:	pop	{fp}		; (ldr fp, [sp], #4)
   13ca0:	bx	lr

00013ca4 <mmk_strcpy@@Base>:
   13ca4:	push	{fp}		; (str fp, [sp, #-4]!)
   13ca8:	add	fp, sp, #0
   13cac:	sub	sp, sp, #12
   13cb0:	str	r0, [fp, #-8]
   13cb4:	str	r1, [fp, #-12]
   13cb8:	b	13ce4 <mmk_strcpy@@Base+0x40>
   13cbc:	ldr	r3, [fp, #-12]
   13cc0:	ldrb	r2, [r3]
   13cc4:	ldr	r3, [fp, #-8]
   13cc8:	strb	r2, [r3]
   13ccc:	ldr	r3, [fp, #-8]
   13cd0:	add	r3, r3, #1
   13cd4:	str	r3, [fp, #-8]
   13cd8:	ldr	r3, [fp, #-12]
   13cdc:	add	r3, r3, #1
   13ce0:	str	r3, [fp, #-12]
   13ce4:	ldr	r3, [fp, #-12]
   13ce8:	ldrb	r3, [r3]
   13cec:	cmp	r3, #0
   13cf0:	bne	13cbc <mmk_strcpy@@Base+0x18>
   13cf4:	ldr	r3, [fp, #-8]
   13cf8:	mov	r2, #0
   13cfc:	strb	r2, [r3]
   13d00:	ldr	r3, [fp, #-8]
   13d04:	mov	r0, r3
   13d08:	add	sp, fp, #0
   13d0c:	pop	{fp}		; (ldr fp, [sp], #4)
   13d10:	bx	lr

00013d14 <mmk_strncpy@@Base>:
   13d14:	push	{fp}		; (str fp, [sp, #-4]!)
   13d18:	add	fp, sp, #0
   13d1c:	sub	sp, sp, #20
   13d20:	str	r0, [fp, #-8]
   13d24:	str	r1, [fp, #-12]
   13d28:	str	r2, [fp, #-16]
   13d2c:	b	13d64 <mmk_strncpy@@Base+0x50>
   13d30:	ldr	r3, [fp, #-12]
   13d34:	ldrb	r2, [r3]
   13d38:	ldr	r3, [fp, #-8]
   13d3c:	strb	r2, [r3]
   13d40:	ldr	r3, [fp, #-8]
   13d44:	add	r3, r3, #1
   13d48:	str	r3, [fp, #-8]
   13d4c:	ldr	r3, [fp, #-12]
   13d50:	add	r3, r3, #1
   13d54:	str	r3, [fp, #-12]
   13d58:	ldr	r3, [fp, #-16]
   13d5c:	sub	r3, r3, #1
   13d60:	str	r3, [fp, #-16]
   13d64:	ldr	r3, [fp, #-12]
   13d68:	ldrb	r3, [r3]
   13d6c:	cmp	r3, #0
   13d70:	beq	13d80 <mmk_strncpy@@Base+0x6c>
   13d74:	ldr	r3, [fp, #-16]
   13d78:	cmp	r3, #0
   13d7c:	bne	13d30 <mmk_strncpy@@Base+0x1c>
   13d80:	ldr	r3, [fp, #-8]
   13d84:	mov	r2, #0
   13d88:	strb	r2, [r3]
   13d8c:	ldr	r3, [fp, #-8]
   13d90:	mov	r0, r3
   13d94:	add	sp, fp, #0
   13d98:	pop	{fp}		; (ldr fp, [sp], #4)
   13d9c:	bx	lr

00013da0 <mmk_strlen@@Base>:
   13da0:	push	{fp}		; (str fp, [sp, #-4]!)
   13da4:	add	fp, sp, #0
   13da8:	sub	sp, sp, #20
   13dac:	str	r0, [fp, #-16]
   13db0:	mov	r3, #0
   13db4:	str	r3, [fp, #-8]
   13db8:	b	13dd4 <mmk_strlen@@Base+0x34>
   13dbc:	ldr	r3, [fp, #-8]
   13dc0:	add	r3, r3, #1
   13dc4:	str	r3, [fp, #-8]
   13dc8:	ldr	r3, [fp, #-16]
   13dcc:	add	r3, r3, #1
   13dd0:	str	r3, [fp, #-16]
   13dd4:	ldr	r3, [fp, #-16]
   13dd8:	ldrb	r3, [r3]
   13ddc:	cmp	r3, #0
   13de0:	bne	13dbc <mmk_strlen@@Base+0x1c>
   13de4:	ldr	r3, [fp, #-8]
   13de8:	mov	r0, r3
   13dec:	add	sp, fp, #0
   13df0:	pop	{fp}		; (ldr fp, [sp], #4)
   13df4:	bx	lr

00013df8 <mmk_isspace@@Base>:
   13df8:	push	{fp}		; (str fp, [sp, #-4]!)
   13dfc:	add	fp, sp, #0
   13e00:	sub	sp, sp, #12
   13e04:	str	r0, [fp, #-8]
   13e08:	ldr	r3, [fp, #-8]
   13e0c:	cmp	r3, #32
   13e10:	beq	13e38 <mmk_isspace@@Base+0x40>
   13e14:	ldr	r3, [fp, #-8]
   13e18:	cmp	r3, #9
   13e1c:	beq	13e38 <mmk_isspace@@Base+0x40>
   13e20:	ldr	r3, [fp, #-8]
   13e24:	cmp	r3, #13
   13e28:	beq	13e38 <mmk_isspace@@Base+0x40>
   13e2c:	ldr	r3, [fp, #-8]
   13e30:	cmp	r3, #10
   13e34:	bne	13e40 <mmk_isspace@@Base+0x48>
   13e38:	mov	r3, #1
   13e3c:	b	13e44 <mmk_isspace@@Base+0x4c>
   13e40:	mov	r3, #0
   13e44:	mov	r0, r3
   13e48:	add	sp, fp, #0
   13e4c:	pop	{fp}		; (ldr fp, [sp], #4)
   13e50:	bx	lr

00013e54 <mmk_malloc@@Base>:
   13e54:	push	{fp, lr}
   13e58:	add	fp, sp, #4
   13e5c:	sub	sp, sp, #8
   13e60:	str	r0, [fp, #-8]
   13e64:	ldr	r2, [pc, #36]	; 13e90 <mmk_malloc@@Base+0x3c>
   13e68:	add	r2, pc, r2
   13e6c:	ldr	r3, [pc, #32]	; 13e94 <mmk_malloc@@Base+0x40>
   13e70:	ldr	r3, [r2, r3]
   13e74:	ldr	r3, [r3]
   13e78:	ldr	r0, [fp, #-8]
   13e7c:	blx	r3
   13e80:	mov	r3, r0
   13e84:	mov	r0, r3
   13e88:	sub	sp, fp, #4
   13e8c:	pop	{fp, pc}
   13e90:	muleq	r1, r0, r1
   13e94:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>

00013e98 <mmk_realloc@@Base>:
   13e98:	push	{fp, lr}
   13e9c:	add	fp, sp, #4
   13ea0:	sub	sp, sp, #8
   13ea4:	str	r0, [fp, #-8]
   13ea8:	str	r1, [fp, #-12]
   13eac:	ldr	r2, [pc, #40]	; 13edc <mmk_realloc@@Base+0x44>
   13eb0:	add	r2, pc, r2
   13eb4:	ldr	r3, [pc, #36]	; 13ee0 <mmk_realloc@@Base+0x48>
   13eb8:	ldr	r3, [r2, r3]
   13ebc:	ldr	r3, [r3]
   13ec0:	ldr	r1, [fp, #-12]
   13ec4:	ldr	r0, [fp, #-8]
   13ec8:	blx	r3
   13ecc:	mov	r3, r0
   13ed0:	mov	r0, r3
   13ed4:	sub	sp, fp, #4
   13ed8:	pop	{fp, pc}
   13edc:	andeq	r1, r1, r8, asr #2
   13ee0:	muleq	r0, ip, r0

00013ee4 <mmk_free@@Base>:
   13ee4:	push	{fp, lr}
   13ee8:	add	fp, sp, #4
   13eec:	sub	sp, sp, #8
   13ef0:	str	r0, [fp, #-8]
   13ef4:	ldr	r2, [pc, #32]	; 13f1c <mmk_free@@Base+0x38>
   13ef8:	add	r2, pc, r2
   13efc:	ldr	r3, [pc, #28]	; 13f20 <mmk_free@@Base+0x3c>
   13f00:	ldr	r3, [r2, r3]
   13f04:	ldr	r3, [r3]
   13f08:	ldr	r0, [fp, #-8]
   13f0c:	blx	r3
   13f10:	nop			; (mov r0, r0)
   13f14:	sub	sp, fp, #4
   13f18:	pop	{fp, pc}
   13f1c:	andeq	r1, r1, r0, lsl #2
   13f20:	andeq	r0, r0, ip, lsr #1

00013f24 <mmk_init_vital_functions@@Base>:
   13f24:	push	{r4, fp, lr}
   13f28:	add	fp, sp, #8
   13f2c:	sub	sp, sp, #20
   13f30:	str	r0, [fp, #-16]
   13f34:	ldr	r4, [pc, #372]	; 140b0 <mmk_init_vital_functions@@Base+0x18c>
   13f38:	add	r4, pc, r4
   13f3c:	mov	r0, #0
   13f40:	bl	11288 <malloc@plt>
   13f44:	mov	r3, r0
   13f48:	mov	r1, #0
   13f4c:	mov	r0, r3
   13f50:	bl	1127c <realloc@plt>
   13f54:	mov	r3, r0
   13f58:	mov	r0, r3
   13f5c:	bl	11264 <free@plt>
   13f60:	ldr	r3, [pc, #332]	; 140b4 <mmk_init_vital_functions@@Base+0x190>
   13f64:	add	r3, pc, r3
   13f68:	mov	r1, r3
   13f6c:	ldr	r0, [fp, #-16]
   13f70:	bl	12f80 <plt_get_real_fn@@Base>
   13f74:	mov	r2, r0
   13f78:	ldr	r3, [pc, #312]	; 140b8 <mmk_init_vital_functions@@Base+0x194>
   13f7c:	ldr	r3, [r4, r3]
   13f80:	str	r2, [r3]
   13f84:	ldr	r3, [pc, #300]	; 140b8 <mmk_init_vital_functions@@Base+0x194>
   13f88:	ldr	r3, [r4, r3]
   13f8c:	ldr	r3, [r3]
   13f90:	cmp	r3, #0
   13f94:	bne	13fcc <mmk_init_vital_functions@@Base+0xa8>
   13f98:	ldr	r3, [pc, #284]	; 140bc <mmk_init_vital_functions@@Base+0x198>
   13f9c:	ldr	r3, [r4, r3]
   13fa0:	ldr	r0, [r3]
   13fa4:	ldr	r3, [pc, #276]	; 140c0 <mmk_init_vital_functions@@Base+0x19c>
   13fa8:	add	r3, pc, r3
   13fac:	str	r3, [sp]
   13fb0:	mov	r3, #88	; 0x58
   13fb4:	ldr	r2, [pc, #264]	; 140c4 <mmk_init_vital_functions@@Base+0x1a0>
   13fb8:	add	r2, pc, r2
   13fbc:	ldr	r1, [pc, #260]	; 140c8 <mmk_init_vital_functions@@Base+0x1a4>
   13fc0:	add	r1, pc, r1
   13fc4:	bl	112d0 <fprintf@plt>
   13fc8:	bl	11330 <abort@plt>
   13fcc:	ldr	r3, [pc, #248]	; 140cc <mmk_init_vital_functions@@Base+0x1a8>
   13fd0:	add	r3, pc, r3
   13fd4:	mov	r1, r3
   13fd8:	ldr	r0, [fp, #-16]
   13fdc:	bl	12f80 <plt_get_real_fn@@Base>
   13fe0:	mov	r2, r0
   13fe4:	ldr	r3, [pc, #228]	; 140d0 <mmk_init_vital_functions@@Base+0x1ac>
   13fe8:	ldr	r3, [r4, r3]
   13fec:	str	r2, [r3]
   13ff0:	ldr	r3, [pc, #216]	; 140d0 <mmk_init_vital_functions@@Base+0x1ac>
   13ff4:	ldr	r3, [r4, r3]
   13ff8:	ldr	r3, [r3]
   13ffc:	cmp	r3, #0
   14000:	bne	14038 <mmk_init_vital_functions@@Base+0x114>
   14004:	ldr	r3, [pc, #176]	; 140bc <mmk_init_vital_functions@@Base+0x198>
   14008:	ldr	r3, [r4, r3]
   1400c:	ldr	r0, [r3]
   14010:	ldr	r3, [pc, #188]	; 140d4 <mmk_init_vital_functions@@Base+0x1b0>
   14014:	add	r3, pc, r3
   14018:	str	r3, [sp]
   1401c:	mov	r3, #89	; 0x59
   14020:	ldr	r2, [pc, #176]	; 140d8 <mmk_init_vital_functions@@Base+0x1b4>
   14024:	add	r2, pc, r2
   14028:	ldr	r1, [pc, #172]	; 140dc <mmk_init_vital_functions@@Base+0x1b8>
   1402c:	add	r1, pc, r1
   14030:	bl	112d0 <fprintf@plt>
   14034:	bl	11330 <abort@plt>
   14038:	ldr	r3, [pc, #160]	; 140e0 <mmk_init_vital_functions@@Base+0x1bc>
   1403c:	add	r3, pc, r3
   14040:	mov	r1, r3
   14044:	ldr	r0, [fp, #-16]
   14048:	bl	12f80 <plt_get_real_fn@@Base>
   1404c:	mov	r2, r0
   14050:	ldr	r3, [pc, #140]	; 140e4 <mmk_init_vital_functions@@Base+0x1c0>
   14054:	ldr	r3, [r4, r3]
   14058:	str	r2, [r3]
   1405c:	ldr	r3, [pc, #128]	; 140e4 <mmk_init_vital_functions@@Base+0x1c0>
   14060:	ldr	r3, [r4, r3]
   14064:	ldr	r3, [r3]
   14068:	cmp	r3, #0
   1406c:	bne	140a4 <mmk_init_vital_functions@@Base+0x180>
   14070:	ldr	r3, [pc, #68]	; 140bc <mmk_init_vital_functions@@Base+0x198>
   14074:	ldr	r3, [r4, r3]
   14078:	ldr	r0, [r3]
   1407c:	ldr	r3, [pc, #100]	; 140e8 <mmk_init_vital_functions@@Base+0x1c4>
   14080:	add	r3, pc, r3
   14084:	str	r3, [sp]
   14088:	mov	r3, #90	; 0x5a
   1408c:	ldr	r2, [pc, #88]	; 140ec <mmk_init_vital_functions@@Base+0x1c8>
   14090:	add	r2, pc, r2
   14094:	ldr	r1, [pc, #84]	; 140f0 <mmk_init_vital_functions@@Base+0x1cc>
   14098:	add	r1, pc, r1
   1409c:	bl	112d0 <fprintf@plt>
   140a0:	bl	11330 <abort@plt>
   140a4:	nop			; (mov r0, r0)
   140a8:	sub	sp, fp, #8
   140ac:	pop	{r4, fp, pc}
   140b0:	andeq	r1, r1, r0, asr #1
   140b4:	andeq	r0, r0, r0, lsr #18
   140b8:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   140bc:	muleq	r0, r0, r0
   140c0:	andeq	r0, r0, r8, asr r9
   140c4:	ldrdeq	r0, [r0], -r4
   140c8:	andeq	r0, r0, r0, lsr #18
   140cc:	andeq	r0, r0, r8, ror #18
   140d0:	muleq	r0, ip, r0
   140d4:	andeq	r0, r0, ip, lsr #18
   140d8:	andeq	r0, r0, r8, ror #16
   140dc:			; <UNDEFINED> instruction: 0x000008b4
   140e0:	andeq	r0, r0, ip, lsr r9
   140e4:	andeq	r0, r0, ip, lsr #1
   140e8:	andeq	r0, r0, r0, lsl #18
   140ec:	strdeq	r0, [r0], -ip
   140f0:	andeq	r0, r0, r8, asr #16

000140f4 <mmk_when_init@@Base>:
   140f4:	push	{fp, lr}
   140f8:	add	fp, sp, #4
   140fc:	sub	sp, sp, #8
   14100:	str	r0, [fp, #-8]
   14104:	ldr	r3, [pc, #32]	; 1412c <mmk_when_init@@Base+0x38>
   14108:	add	r3, pc, r3
   1410c:	mov	r0, r3
   14110:	bl	11318 <__tls_get_addr@plt>
   14114:	mov	r2, r0
   14118:	ldr	r3, [fp, #-8]
   1411c:	str	r3, [r2]
   14120:	nop			; (mov r0, r0)
   14124:	sub	sp, fp, #4
   14128:	pop	{fp, pc}
   1412c:	andeq	r0, r1, r4, ror pc

00014130 <mmk_when_get_result@@Base>:
   14130:	push	{fp, lr}
   14134:	add	fp, sp, #4
   14138:	ldr	r3, [pc, #24]	; 14158 <mmk_when_get_result@@Base+0x28>
   1413c:	add	r3, pc, r3
   14140:	mov	r0, r3
   14144:	bl	11318 <__tls_get_addr@plt>
   14148:	mov	r3, r0
   1414c:	ldr	r3, [r3]
   14150:	mov	r0, r3
   14154:	pop	{fp, pc}
   14158:	andeq	r0, r1, r0, asr #30

0001415c <mmk_when_impl@@Base>:
   1415c:	push	{fp, lr}
   14160:	add	fp, sp, #4
   14164:	sub	sp, sp, #16
   14168:	str	r0, [fp, #-16]
   1416c:	str	r1, [fp, #-20]	; 0xffffffec
   14170:	ldr	r3, [fp, #-20]	; 0xffffffec
   14174:	str	r3, [fp, #-8]
   14178:	bl	11f10 <mmk_matcher_ctx@@Base>
   1417c:	mov	r2, r0
   14180:	ldr	r3, [fp, #-8]
   14184:	str	r2, [r3]
   14188:	ldr	r3, [fp, #-16]
   1418c:	ldr	r2, [r3]
   14190:	ldr	r3, [fp, #-8]
   14194:	str	r2, [r3, #4]
   14198:	ldr	r3, [fp, #-16]
   1419c:	ldr	r2, [fp, #-8]
   141a0:	str	r2, [r3]
   141a4:	nop			; (mov r0, r0)
   141a8:	sub	sp, fp, #4
   141ac:	pop	{fp, pc}

000141b0 <mmk_trampoline@@Base>:
   141b0:	sub	ip, pc, #8
   141b4:	push	{r0, r1, r2, r3}
   141b8:	push	{ip, lr}
   141bc:	ldr	r0, [ip, #-8]
   141c0:	ldr	ip, [r0, #4]
   141c4:	blx	ip
   141c8:	pop	{ip, lr}
   141cc:	push	{ip, lr}
   141d0:	ldr	ip, [ip, #-8]
   141d4:	ldr	ip, [ip]
   141d8:	blx	ip
   141dc:	cmp	r0, #0
   141e0:	bne	141f0 <mmk_trampoline@@Base+0x40>
   141e4:	pop	{ip, lr}
   141e8:	pop	{r0, r1, r2, r3}
   141ec:	ldr	pc, [ip, #-4]
   141f0:	pop	{ip, lr}
   141f4:	pop	{r0, r1, r2, r3}
   141f8:	push	{ip, lr}
   141fc:	ldr	ip, [ip, #-8]
   14200:	ldr	ip, [ip, #8]
   14204:	blx	ip
   14208:	pop	{ip, pc}

0001420c <mmk_trampoline_end@@Base>:
   1420c:	nop			; (mov r0, r0)
   14210:	subs	r2, r1, #1
   14214:	bxeq	lr
   14218:	bcc	143f0 <mmk_trampoline_end@@Base+0x1e4>
   1421c:	cmp	r0, r1
   14220:	bls	143d4 <mmk_trampoline_end@@Base+0x1c8>
   14224:	tst	r1, r2
   14228:	beq	143e0 <mmk_trampoline_end@@Base+0x1d4>
   1422c:	clz	r3, r0
   14230:	clz	r2, r1
   14234:	sub	r3, r2, r3
   14238:	rsbs	r3, r3, #31
   1423c:	addne	r3, r3, r3, lsl #1
   14240:	mov	r2, #0
   14244:	addne	pc, pc, r3, lsl #2
   14248:	nop			; (mov r0, r0)
   1424c:	cmp	r0, r1, lsl #31
   14250:	adc	r2, r2, r2
   14254:	subcs	r0, r0, r1, lsl #31
   14258:	cmp	r0, r1, lsl #30
   1425c:	adc	r2, r2, r2
   14260:	subcs	r0, r0, r1, lsl #30
   14264:	cmp	r0, r1, lsl #29
   14268:	adc	r2, r2, r2
   1426c:	subcs	r0, r0, r1, lsl #29
   14270:	cmp	r0, r1, lsl #28
   14274:	adc	r2, r2, r2
   14278:	subcs	r0, r0, r1, lsl #28
   1427c:	cmp	r0, r1, lsl #27
   14280:	adc	r2, r2, r2
   14284:	subcs	r0, r0, r1, lsl #27
   14288:	cmp	r0, r1, lsl #26
   1428c:	adc	r2, r2, r2
   14290:	subcs	r0, r0, r1, lsl #26
   14294:	cmp	r0, r1, lsl #25
   14298:	adc	r2, r2, r2
   1429c:	subcs	r0, r0, r1, lsl #25
   142a0:	cmp	r0, r1, lsl #24
   142a4:	adc	r2, r2, r2
   142a8:	subcs	r0, r0, r1, lsl #24
   142ac:	cmp	r0, r1, lsl #23
   142b0:	adc	r2, r2, r2
   142b4:	subcs	r0, r0, r1, lsl #23
   142b8:	cmp	r0, r1, lsl #22
   142bc:	adc	r2, r2, r2
   142c0:	subcs	r0, r0, r1, lsl #22
   142c4:	cmp	r0, r1, lsl #21
   142c8:	adc	r2, r2, r2
   142cc:	subcs	r0, r0, r1, lsl #21
   142d0:	cmp	r0, r1, lsl #20
   142d4:	adc	r2, r2, r2
   142d8:	subcs	r0, r0, r1, lsl #20
   142dc:	cmp	r0, r1, lsl #19
   142e0:	adc	r2, r2, r2
   142e4:	subcs	r0, r0, r1, lsl #19
   142e8:	cmp	r0, r1, lsl #18
   142ec:	adc	r2, r2, r2
   142f0:	subcs	r0, r0, r1, lsl #18
   142f4:	cmp	r0, r1, lsl #17
   142f8:	adc	r2, r2, r2
   142fc:	subcs	r0, r0, r1, lsl #17
   14300:	cmp	r0, r1, lsl #16
   14304:	adc	r2, r2, r2
   14308:	subcs	r0, r0, r1, lsl #16
   1430c:	cmp	r0, r1, lsl #15
   14310:	adc	r2, r2, r2
   14314:	subcs	r0, r0, r1, lsl #15
   14318:	cmp	r0, r1, lsl #14
   1431c:	adc	r2, r2, r2
   14320:	subcs	r0, r0, r1, lsl #14
   14324:	cmp	r0, r1, lsl #13
   14328:	adc	r2, r2, r2
   1432c:	subcs	r0, r0, r1, lsl #13
   14330:	cmp	r0, r1, lsl #12
   14334:	adc	r2, r2, r2
   14338:	subcs	r0, r0, r1, lsl #12
   1433c:	cmp	r0, r1, lsl #11
   14340:	adc	r2, r2, r2
   14344:	subcs	r0, r0, r1, lsl #11
   14348:	cmp	r0, r1, lsl #10
   1434c:	adc	r2, r2, r2
   14350:	subcs	r0, r0, r1, lsl #10
   14354:	cmp	r0, r1, lsl #9
   14358:	adc	r2, r2, r2
   1435c:	subcs	r0, r0, r1, lsl #9
   14360:	cmp	r0, r1, lsl #8
   14364:	adc	r2, r2, r2
   14368:	subcs	r0, r0, r1, lsl #8
   1436c:	cmp	r0, r1, lsl #7
   14370:	adc	r2, r2, r2
   14374:	subcs	r0, r0, r1, lsl #7
   14378:	cmp	r0, r1, lsl #6
   1437c:	adc	r2, r2, r2
   14380:	subcs	r0, r0, r1, lsl #6
   14384:	cmp	r0, r1, lsl #5
   14388:	adc	r2, r2, r2
   1438c:	subcs	r0, r0, r1, lsl #5
   14390:	cmp	r0, r1, lsl #4
   14394:	adc	r2, r2, r2
   14398:	subcs	r0, r0, r1, lsl #4
   1439c:	cmp	r0, r1, lsl #3
   143a0:	adc	r2, r2, r2
   143a4:	subcs	r0, r0, r1, lsl #3
   143a8:	cmp	r0, r1, lsl #2
   143ac:	adc	r2, r2, r2
   143b0:	subcs	r0, r0, r1, lsl #2
   143b4:	cmp	r0, r1, lsl #1
   143b8:	adc	r2, r2, r2
   143bc:	subcs	r0, r0, r1, lsl #1
   143c0:	cmp	r0, r1
   143c4:	adc	r2, r2, r2
   143c8:	subcs	r0, r0, r1
   143cc:	mov	r0, r2
   143d0:	bx	lr
   143d4:	moveq	r0, #1
   143d8:	movne	r0, #0
   143dc:	bx	lr
   143e0:	clz	r2, r1
   143e4:	rsb	r2, r2, #31
   143e8:	lsr	r0, r0, r2
   143ec:	bx	lr
   143f0:	cmp	r0, #0
   143f4:	mvnne	r0, #0
   143f8:	b	1441c <mmk_trampoline_end@@Base+0x210>
   143fc:	cmp	r1, #0
   14400:	beq	143f0 <mmk_trampoline_end@@Base+0x1e4>
   14404:	push	{r0, r1, lr}
   14408:	bl	14210 <mmk_trampoline_end@@Base+0x4>
   1440c:	pop	{r1, r2, lr}
   14410:	mul	r3, r2, r0
   14414:	sub	r1, r1, r3
   14418:	bx	lr
   1441c:	push	{r1, lr}
   14420:	mov	r0, #8
   14424:	bl	11240 <raise@plt>
   14428:	pop	{r1, pc}

0001442c <__libc_csu_init@@Base>:
   1442c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14430:	mov	r7, r0
   14434:	ldr	r6, [pc, #72]	; 14484 <__libc_csu_init@@Base+0x58>
   14438:	ldr	r5, [pc, #72]	; 14488 <__libc_csu_init@@Base+0x5c>
   1443c:	add	r6, pc, r6
   14440:	add	r5, pc, r5
   14444:	sub	r6, r6, r5
   14448:	mov	r8, r1
   1444c:	mov	r9, r2
   14450:	bl	11214 <strstr@plt-0x20>
   14454:	asrs	r6, r6, #2
   14458:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1445c:	mov	r4, #0
   14460:	add	r4, r4, #1
   14464:	ldr	r3, [r5], #4
   14468:	mov	r2, r9
   1446c:	mov	r1, r8
   14470:	mov	r0, r7
   14474:	blx	r3
   14478:	cmp	r6, r4
   1447c:	bne	14460 <__libc_csu_init@@Base+0x34>
   14480:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14484:			; <UNDEFINED> instruction: 0x00010ab4
   14488:	andeq	r0, r1, ip, lsr #21

0001448c <__libc_csu_fini@@Base>:
   1448c:	bx	lr

Disassembly of section .fini:

00014490 <.fini>:
   14490:	push	{r3, lr}
   14494:	pop	{r3, pc}
