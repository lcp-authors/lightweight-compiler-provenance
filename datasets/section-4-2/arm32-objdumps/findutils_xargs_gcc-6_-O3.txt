
../repos/findutils/xargs/xargs:     file format elf32-littlearm


Disassembly of section .init:

0001119c <.init>:
   1119c:	push	{r3, lr}
   111a0:	bl	127cc <__assert_fail@plt+0x122c>
   111a4:	pop	{r3, pc}

Disassembly of section .plt:

000111a8 <fdopen@plt-0x14>:
   111a8:	push	{lr}		; (str lr, [sp, #-4]!)
   111ac:	ldr	lr, [pc, #4]	; 111b8 <fdopen@plt-0x4>
   111b0:	add	lr, pc, lr
   111b4:	ldr	pc, [lr, #8]!
   111b8:	andeq	lr, r1, r8, asr #28

000111bc <fdopen@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #122880	; 0x1e000
   111c4:	ldr	pc, [ip, #3656]!	; 0xe48

000111c8 <calloc@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #122880	; 0x1e000
   111d0:	ldr	pc, [ip, #3648]!	; 0xe40

000111d4 <raise@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #122880	; 0x1e000
   111dc:	ldr	pc, [ip, #3640]!	; 0xe38

000111e0 <strcmp@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #122880	; 0x1e000
   111e8:	ldr	pc, [ip, #3632]!	; 0xe30

000111ec <strtol@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #122880	; 0x1e000
   111f4:	ldr	pc, [ip, #3624]!	; 0xe28

000111f8 <printf@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #122880	; 0x1e000
   11200:	ldr	pc, [ip, #3616]!	; 0xe20

00011204 <read@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #122880	; 0x1e000
   1120c:	ldr	pc, [ip, #3608]!	; 0xe18

00011210 <fflush@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #122880	; 0x1e000
   11218:	ldr	pc, [ip, #3600]!	; 0xe10

0001121c <wcwidth@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #122880	; 0x1e000
   11224:	ldr	pc, [ip, #3592]!	; 0xe08

00011228 <free@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #122880	; 0x1e000
   11230:	ldr	pc, [ip, #3584]!	; 0xe00

00011234 <ferror@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #122880	; 0x1e000
   1123c:	ldr	pc, [ip, #3576]!	; 0xdf8

00011240 <_exit@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #122880	; 0x1e000
   11248:	ldr	pc, [ip, #3568]!	; 0xdf0

0001124c <memcpy@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #122880	; 0x1e000
   11254:	ldr	pc, [ip, #3560]!	; 0xde8

00011258 <execvp@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #122880	; 0x1e000
   11260:	ldr	pc, [ip, #3552]!	; 0xde0

00011264 <mbsinit@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #122880	; 0x1e000
   1126c:	ldr	pc, [ip, #3544]!	; 0xdd8

00011270 <signal@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #122880	; 0x1e000
   11278:	ldr	pc, [ip, #3536]!	; 0xdd0

0001127c <memcmp@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #122880	; 0x1e000
   11284:	ldr	pc, [ip, #3528]!	; 0xdc8

00011288 <dcgettext@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #122880	; 0x1e000
   11290:	ldr	pc, [ip, #3520]!	; 0xdc0

00011294 <sysconf@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #122880	; 0x1e000
   1129c:	ldr	pc, [ip, #3512]!	; 0xdb8

000112a0 <dup2@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #122880	; 0x1e000
   112a8:	ldr	pc, [ip, #3504]!	; 0xdb0

000112ac <getrlimit64@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #122880	; 0x1e000
   112b4:	ldr	pc, [ip, #3496]!	; 0xda8

000112b8 <realloc@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #122880	; 0x1e000
   112c0:	ldr	pc, [ip, #3488]!	; 0xda0

000112c4 <textdomain@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #122880	; 0x1e000
   112cc:	ldr	pc, [ip, #3480]!	; 0xd98

000112d0 <iswcntrl@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #122880	; 0x1e000
   112d8:	ldr	pc, [ip, #3472]!	; 0xd90

000112dc <iswprint@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #122880	; 0x1e000
   112e4:	ldr	pc, [ip, #3464]!	; 0xd88

000112e8 <poll@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #122880	; 0x1e000
   112f0:	ldr	pc, [ip, #3456]!	; 0xd80

000112f4 <sigaction@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #122880	; 0x1e000
   112fc:	ldr	pc, [ip, #3448]!	; 0xd78

00011300 <fwrite@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #122880	; 0x1e000
   11308:	ldr	pc, [ip, #3440]!	; 0xd70

0001130c <lseek64@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #122880	; 0x1e000
   11314:	ldr	pc, [ip, #3432]!	; 0xd68

00011318 <waitpid@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #122880	; 0x1e000
   11320:	ldr	pc, [ip, #3424]!	; 0xd60

00011324 <__ctype_get_mb_cur_max@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #122880	; 0x1e000
   1132c:	ldr	pc, [ip, #3416]!	; 0xd58

00011330 <strcpy@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #122880	; 0x1e000
   11338:	ldr	pc, [ip, #3408]!	; 0xd50

0001133c <__fpending@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #122880	; 0x1e000
   11344:	ldr	pc, [ip, #3400]!	; 0xd48

00011348 <mbrtowc@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #122880	; 0x1e000
   11350:	ldr	pc, [ip, #3392]!	; 0xd40

00011354 <error@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #122880	; 0x1e000
   1135c:	ldr	pc, [ip, #3384]!	; 0xd38

00011360 <opendir@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #122880	; 0x1e000
   11368:	ldr	pc, [ip, #3376]!	; 0xd30

0001136c <open64@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #122880	; 0x1e000
   11374:	ldr	pc, [ip, #3368]!	; 0xd28

00011378 <getenv@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #122880	; 0x1e000
   11380:	ldr	pc, [ip, #3360]!	; 0xd20

00011384 <malloc@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #122880	; 0x1e000
   1138c:	ldr	pc, [ip, #3352]!	; 0xd18

00011390 <__libc_start_main@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #122880	; 0x1e000
   11398:	ldr	pc, [ip, #3344]!	; 0xd10

0001139c <__freading@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #122880	; 0x1e000
   113a4:	ldr	pc, [ip, #3336]!	; 0xd08

000113a8 <__gmon_start__@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #122880	; 0x1e000
   113b0:	ldr	pc, [ip, #3328]!	; 0xd00

000113b4 <getopt_long@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #122880	; 0x1e000
   113bc:	ldr	pc, [ip, #3320]!	; 0xcf8

000113c0 <__ctype_b_loc@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #122880	; 0x1e000
   113c8:	ldr	pc, [ip, #3312]!	; 0xcf0

000113cc <getpid@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #122880	; 0x1e000
   113d4:	ldr	pc, [ip, #3304]!	; 0xce8

000113d8 <exit@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #122880	; 0x1e000
   113e0:	ldr	pc, [ip, #3296]!	; 0xce0

000113e4 <strtoul@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #122880	; 0x1e000
   113ec:	ldr	pc, [ip, #3288]!	; 0xcd8

000113f0 <strlen@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #122880	; 0x1e000
   113f8:	ldr	pc, [ip, #3280]!	; 0xcd0

000113fc <strchr@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #122880	; 0x1e000
   11404:	ldr	pc, [ip, #3272]!	; 0xcc8

00011408 <setenv@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #122880	; 0x1e000
   11410:	ldr	pc, [ip, #3264]!	; 0xcc0

00011414 <fprintf@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #122880	; 0x1e000
   1141c:	ldr	pc, [ip, #3256]!	; 0xcb8

00011420 <__errno_location@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #122880	; 0x1e000
   11428:	ldr	pc, [ip, #3248]!	; 0xcb0

0001142c <snprintf@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #122880	; 0x1e000
   11434:	ldr	pc, [ip, #3240]!	; 0xca8

00011438 <__cxa_atexit@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #122880	; 0x1e000
   11440:	ldr	pc, [ip, #3232]!	; 0xca0

00011444 <memset@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #122880	; 0x1e000
   1144c:	ldr	pc, [ip, #3224]!	; 0xc98

00011450 <strncpy@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #122880	; 0x1e000
   11458:	ldr	pc, [ip, #3216]!	; 0xc90

0001145c <write@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #122880	; 0x1e000
   11464:	ldr	pc, [ip, #3208]!	; 0xc88

00011468 <fileno@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #122880	; 0x1e000
   11470:	ldr	pc, [ip, #3200]!	; 0xc80

00011474 <memchr@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #122880	; 0x1e000
   1147c:	ldr	pc, [ip, #3192]!	; 0xc78

00011480 <fclose@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #122880	; 0x1e000
   11488:	ldr	pc, [ip, #3184]!	; 0xc70

0001148c <strnlen@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #122880	; 0x1e000
   11494:	ldr	pc, [ip, #3176]!	; 0xc68

00011498 <pipe@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #122880	; 0x1e000
   114a0:	ldr	pc, [ip, #3168]!	; 0xc60

000114a4 <fseeko64@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #122880	; 0x1e000
   114ac:	ldr	pc, [ip, #3160]!	; 0xc58

000114b0 <fcntl64@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #122880	; 0x1e000
   114b8:	ldr	pc, [ip, #3152]!	; 0xc50

000114bc <setlocale@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #122880	; 0x1e000
   114c4:	ldr	pc, [ip, #3144]!	; 0xc48

000114c8 <sigemptyset@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #122880	; 0x1e000
   114d0:	ldr	pc, [ip, #3136]!	; 0xc40

000114d4 <fork@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #122880	; 0x1e000
   114dc:	ldr	pc, [ip, #3128]!	; 0xc38

000114e0 <strrchr@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #122880	; 0x1e000
   114e8:	ldr	pc, [ip, #3120]!	; 0xc30

000114ec <nl_langinfo@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #122880	; 0x1e000
   114f4:	ldr	pc, [ip, #3112]!	; 0xc28

000114f8 <fputc@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #122880	; 0x1e000
   11500:	ldr	pc, [ip, #3104]!	; 0xc20

00011504 <readdir64@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #122880	; 0x1e000
   1150c:	ldr	pc, [ip, #3096]!	; 0xc18

00011510 <fdopendir@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #122880	; 0x1e000
   11518:	ldr	pc, [ip, #3088]!	; 0xc10

0001151c <putc@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #122880	; 0x1e000
   11524:	ldr	pc, [ip, #3080]!	; 0xc08

00011528 <dirfd@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #122880	; 0x1e000
   11530:	ldr	pc, [ip, #3072]!	; 0xc00

00011534 <bindtextdomain@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #122880	; 0x1e000
   1153c:	ldr	pc, [ip, #3064]!	; 0xbf8

00011540 <isatty@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #122880	; 0x1e000
   11548:	ldr	pc, [ip, #3056]!	; 0xbf0

0001154c <unsetenv@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #122880	; 0x1e000
   11554:	ldr	pc, [ip, #3048]!	; 0xbe8

00011558 <fputs@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #122880	; 0x1e000
   11560:	ldr	pc, [ip, #3040]!	; 0xbe0

00011564 <strncmp@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #122880	; 0x1e000
   1156c:	ldr	pc, [ip, #3032]!	; 0xbd8

00011570 <abort@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #122880	; 0x1e000
   11578:	ldr	pc, [ip, #3024]!	; 0xbd0

0001157c <getc@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #122880	; 0x1e000
   11584:	ldr	pc, [ip, #3016]!	; 0xbc8

00011588 <close@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #122880	; 0x1e000
   11590:	ldr	pc, [ip, #3008]!	; 0xbc0

00011594 <closedir@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #122880	; 0x1e000
   1159c:	ldr	pc, [ip, #3000]!	; 0xbb8

000115a0 <__assert_fail@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #122880	; 0x1e000
   115a8:	ldr	pc, [ip, #2992]!	; 0xbb0

Disassembly of section .text:

000115ac <.text>:
   115ac:	push	{r4, lr}
   115b0:	mov	r5, r0
   115b4:	bl	11420 <__errno_location@plt>
   115b8:	mov	r2, #5
   115bc:	ldr	r1, [pc, #28]	; 115e0 <__assert_fail@plt+0x40>
   115c0:	ldr	r4, [r0]
   115c4:	mov	r0, #0
   115c8:	bl	11288 <dcgettext@plt>
   115cc:	mov	r3, r5
   115d0:	mov	r1, r4
   115d4:	mov	r2, r0
   115d8:	mov	r0, #1
   115dc:	bl	11354 <error@plt>
   115e0:			; <UNDEFINED> instruction: 0x0001f2b4
   115e4:	ldr	r3, [pc, #4068]	; 125d0 <__assert_fail@plt+0x1030>
   115e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115ec:	sub	sp, sp, #228	; 0xe4
   115f0:	ldr	r2, [r1]
   115f4:	str	r1, [sp, #28]
   115f8:	mov	sl, r0
   115fc:	ldm	r3, {r0, r1}
   11600:	cmp	r2, #0
   11604:	ldr	fp, [pc, #4040]	; 125d4 <__assert_fail@plt+0x1034>
   11608:	str	r0, [sp, #76]	; 0x4c
   1160c:	movne	r0, r2
   11610:	ldreq	r0, [pc, #4032]	; 125d8 <__assert_fail@plt+0x1038>
   11614:	strb	r1, [sp, #80]	; 0x50
   11618:	bl	17390 <__assert_fail@plt+0x5df0>
   1161c:	bl	15384 <__assert_fail@plt+0x3de4>
   11620:	bl	113cc <getpid@plt>
   11624:	mov	r3, #0
   11628:	ldr	r1, [pc, #4012]	; 125dc <__assert_fail@plt+0x103c>
   1162c:	str	r3, [fp, #116]	; 0x74
   11630:	str	r0, [fp, #108]	; 0x6c
   11634:	mov	r0, #6
   11638:	bl	114bc <setlocale@plt>
   1163c:	ldr	r1, [pc, #3996]	; 125e0 <__assert_fail@plt+0x1040>
   11640:	ldr	r0, [pc, #3996]	; 125e4 <__assert_fail@plt+0x1044>
   11644:	bl	11534 <bindtextdomain@plt>
   11648:	ldr	r0, [pc, #3988]	; 125e4 <__assert_fail@plt+0x1044>
   1164c:	bl	112c4 <textdomain@plt>
   11650:	ldr	r0, [pc, #3984]	; 125e8 <__assert_fail@plt+0x1048>
   11654:	bl	1d904 <__assert_fail@plt+0xc364>
   11658:	cmp	r0, #0
   1165c:	bne	125a8 <__assert_fail@plt+0x1008>
   11660:	ldr	r0, [pc, #3972]	; 125ec <__assert_fail@plt+0x104c>
   11664:	bl	1d904 <__assert_fail@plt+0xc364>
   11668:	subs	r9, r0, #0
   1166c:	bne	125a8 <__assert_fail@plt+0x1008>
   11670:	mov	r1, #2048	; 0x800
   11674:	add	r0, fp, #4
   11678:	bl	14c04 <__assert_fail@plt+0x3664>
   1167c:	sub	r3, r0, #1
   11680:	cmp	r3, #1
   11684:	str	r0, [sp, #48]	; 0x30
   11688:	bls	11d98 <__assert_fail@plt+0x7f8>
   1168c:	mov	r0, r9
   11690:	bl	11294 <sysconf@plt>
   11694:	cmp	r0, #0
   11698:	ble	116b8 <__assert_fail@plt+0x118>
   1169c:	cmp	r0, #2048	; 0x800
   116a0:	ble	12768 <__assert_fail@plt+0x11c8>
   116a4:	ldr	r3, [fp, #16]
   116a8:	sub	r0, r0, #2048	; 0x800
   116ac:	cmp	r3, r0
   116b0:	movcc	r0, r3
   116b4:	str	r0, [fp, #16]
   116b8:	ldr	r3, [fp, #16]
   116bc:	cmp	r3, #2048	; 0x800
   116c0:	bcc	1277c <__assert_fail@plt+0x11dc>
   116c4:	ldr	r3, [pc, #3876]	; 125f0 <__assert_fail@plt+0x1050>
   116c8:	ldr	r0, [pc, #3876]	; 125f4 <__assert_fail@plt+0x1054>
   116cc:	str	r3, [fp, #36]	; 0x24
   116d0:	ldr	r3, [pc, #3872]	; 125f8 <__assert_fail@plt+0x1058>
   116d4:	str	r3, [sp, #52]	; 0x34
   116d8:	bl	14d30 <__assert_fail@plt+0x3790>
   116dc:	ldr	r3, [pc, #3864]	; 125fc <__assert_fail@plt+0x105c>
   116e0:	ldr	r5, [pc, #3864]	; 12600 <__assert_fail@plt+0x1060>
   116e4:	str	r3, [sp, #32]
   116e8:	ldr	r4, [pc, #3860]	; 12604 <__assert_fail@plt+0x1064>
   116ec:	ldr	r3, [pc, #3860]	; 12608 <__assert_fail@plt+0x1068>
   116f0:	ldr	r8, [pc, #3860]	; 1260c <__assert_fail@plt+0x106c>
   116f4:	add	r6, sp, #68	; 0x44
   116f8:	str	r3, [sp, #36]	; 0x24
   116fc:	mov	r3, #1
   11700:	str	r9, [sp, #40]	; 0x28
   11704:	str	r3, [sp, #44]	; 0x2c
   11708:	str	r6, [sp]
   1170c:	mov	r3, r5
   11710:	mov	r2, r4
   11714:	ldr	r1, [sp, #28]
   11718:	mov	r0, sl
   1171c:	bl	113b4 <getopt_long@plt>
   11720:	cmn	r0, #1
   11724:	beq	11e58 <__assert_fail@plt+0x8b8>
   11728:	sub	r0, r0, #48	; 0x30
   1172c:	cmp	r0, #208	; 0xd0
   11730:	ldrls	pc, [pc, r0, lsl #2]
   11734:	b	11d90 <__assert_fail@plt+0x7f0>
   11738:			; <UNDEFINED> instruction: 0x00011cb8
   1173c:	muleq	r1, r0, sp
   11740:	muleq	r1, r0, sp
   11744:	muleq	r1, r0, sp
   11748:	muleq	r1, r0, sp
   1174c:	muleq	r1, r0, sp
   11750:	muleq	r1, r0, sp
   11754:	muleq	r1, r0, sp
   11758:	muleq	r1, r0, sp
   1175c:	muleq	r1, r0, sp
   11760:	muleq	r1, r0, sp
   11764:	muleq	r1, r0, sp
   11768:	muleq	r1, r0, sp
   1176c:	muleq	r1, r0, sp
   11770:	muleq	r1, r0, sp
   11774:	muleq	r1, r0, sp
   11778:	muleq	r1, r0, sp
   1177c:	muleq	r1, r0, sp
   11780:	muleq	r1, r0, sp
   11784:	muleq	r1, r0, sp
   11788:	muleq	r1, r0, sp
   1178c:	muleq	r1, r8, ip
   11790:	muleq	r1, r0, sp
   11794:	muleq	r1, r0, sp
   11798:	muleq	r1, r0, sp
   1179c:	andeq	r1, r1, r4, asr ip
   117a0:	muleq	r1, r0, sp
   117a4:	muleq	r1, r0, sp
   117a8:	andeq	r1, r1, r8, lsl #24
   117ac:	muleq	r1, r0, sp
   117b0:	muleq	r1, r0, sp
   117b4:	muleq	r1, r0, sp
   117b8:	andeq	r1, r1, r0, ror #23
   117bc:	muleq	r1, r0, sp
   117c0:	muleq	r1, r0, sp
   117c4:	ldrdeq	r1, [r1], -r4
   117c8:	muleq	r1, r0, sp
   117cc:	muleq	r1, r0, sp
   117d0:	muleq	r1, r0, sp
   117d4:	muleq	r1, r0, sp
   117d8:	muleq	r1, r0, sp
   117dc:	muleq	r1, r0, sp
   117e0:	muleq	r1, r0, sp
   117e4:	muleq	r1, r0, sp
   117e8:	muleq	r1, r0, sp
   117ec:	muleq	r1, r0, sp
   117f0:	muleq	r1, r0, sp
   117f4:	muleq	r1, r0, sp
   117f8:	muleq	r1, r0, sp
   117fc:	andeq	r1, r1, r8, asr #23
   11800:	muleq	r1, r0, sp
   11804:	muleq	r1, r0, sp
   11808:	andeq	r1, r1, ip, asr fp
   1180c:	muleq	r1, r8, ip
   11810:	muleq	r1, r0, sp
   11814:	muleq	r1, r0, sp
   11818:	andeq	r1, r1, r4, asr fp
   1181c:	andeq	r1, r1, r4, asr ip
   11820:	muleq	r1, r0, sp
   11824:	muleq	r1, r0, sp
   11828:	andeq	r1, r1, r0, lsl #22
   1182c:	muleq	r1, r0, sp
   11830:	andeq	r1, r1, r0, lsr #21
   11834:	muleq	r1, r4, sl
   11838:	andeq	r1, r1, r4, lsl #21
   1183c:	muleq	r1, r0, sp
   11840:	andeq	r1, r1, ip, ror sl
   11844:	andeq	r1, r1, r4, asr sp
   11848:	andeq	r1, r1, r8, asr #26
   1184c:	muleq	r1, r0, sp
   11850:	andeq	r1, r1, r4, lsr sp
   11854:	muleq	r1, r0, sp
   11858:	andeq	r1, r1, r8, lsr #26
   1185c:	muleq	r1, r0, sp
   11860:	muleq	r1, r0, sp
   11864:	muleq	r1, r0, sp
   11868:	muleq	r1, r0, sp
   1186c:	muleq	r1, r0, sp
   11870:	muleq	r1, r0, sp
   11874:	muleq	r1, r0, sp
   11878:	muleq	r1, r0, sp
   1187c:	muleq	r1, r0, sp
   11880:	muleq	r1, r0, sp
   11884:	muleq	r1, r0, sp
   11888:	muleq	r1, r0, sp
   1188c:	muleq	r1, r0, sp
   11890:	muleq	r1, r0, sp
   11894:	muleq	r1, r0, sp
   11898:	muleq	r1, r0, sp
   1189c:	muleq	r1, r0, sp
   118a0:	muleq	r1, r0, sp
   118a4:	muleq	r1, r0, sp
   118a8:	muleq	r1, r0, sp
   118ac:	muleq	r1, r0, sp
   118b0:	muleq	r1, r0, sp
   118b4:	muleq	r1, r0, sp
   118b8:	muleq	r1, r0, sp
   118bc:	muleq	r1, r0, sp
   118c0:	muleq	r1, r0, sp
   118c4:	muleq	r1, r0, sp
   118c8:	muleq	r1, r0, sp
   118cc:	muleq	r1, r0, sp
   118d0:	muleq	r1, r0, sp
   118d4:	muleq	r1, r0, sp
   118d8:	muleq	r1, r0, sp
   118dc:	muleq	r1, r0, sp
   118e0:	muleq	r1, r0, sp
   118e4:	muleq	r1, r0, sp
   118e8:	muleq	r1, r0, sp
   118ec:	muleq	r1, r0, sp
   118f0:	muleq	r1, r0, sp
   118f4:	muleq	r1, r0, sp
   118f8:	muleq	r1, r0, sp
   118fc:	muleq	r1, r0, sp
   11900:	muleq	r1, r0, sp
   11904:	muleq	r1, r0, sp
   11908:	muleq	r1, r0, sp
   1190c:	muleq	r1, r0, sp
   11910:	muleq	r1, r0, sp
   11914:	muleq	r1, r0, sp
   11918:	muleq	r1, r0, sp
   1191c:	muleq	r1, r0, sp
   11920:	muleq	r1, r0, sp
   11924:	muleq	r1, r0, sp
   11928:	muleq	r1, r0, sp
   1192c:	muleq	r1, r0, sp
   11930:	muleq	r1, r0, sp
   11934:	muleq	r1, r0, sp
   11938:	muleq	r1, r0, sp
   1193c:	muleq	r1, r0, sp
   11940:	muleq	r1, r0, sp
   11944:	muleq	r1, r0, sp
   11948:	muleq	r1, r0, sp
   1194c:	muleq	r1, r0, sp
   11950:	muleq	r1, r0, sp
   11954:	muleq	r1, r0, sp
   11958:	muleq	r1, r0, sp
   1195c:	muleq	r1, r0, sp
   11960:	muleq	r1, r0, sp
   11964:	muleq	r1, r0, sp
   11968:	muleq	r1, r0, sp
   1196c:	muleq	r1, r0, sp
   11970:	muleq	r1, r0, sp
   11974:	muleq	r1, r0, sp
   11978:	muleq	r1, r0, sp
   1197c:	muleq	r1, r0, sp
   11980:	muleq	r1, r0, sp
   11984:	muleq	r1, r0, sp
   11988:	muleq	r1, r0, sp
   1198c:	muleq	r1, r0, sp
   11990:	muleq	r1, r0, sp
   11994:	muleq	r1, r0, sp
   11998:	muleq	r1, r0, sp
   1199c:	muleq	r1, r0, sp
   119a0:	muleq	r1, r0, sp
   119a4:	muleq	r1, r0, sp
   119a8:	muleq	r1, r0, sp
   119ac:	muleq	r1, r0, sp
   119b0:	muleq	r1, r0, sp
   119b4:	muleq	r1, r0, sp
   119b8:	muleq	r1, r0, sp
   119bc:	muleq	r1, r0, sp
   119c0:	muleq	r1, r0, sp
   119c4:	muleq	r1, r0, sp
   119c8:	muleq	r1, r0, sp
   119cc:	muleq	r1, r0, sp
   119d0:	muleq	r1, r0, sp
   119d4:	muleq	r1, r0, sp
   119d8:	muleq	r1, r0, sp
   119dc:	muleq	r1, r0, sp
   119e0:	muleq	r1, r0, sp
   119e4:	muleq	r1, r0, sp
   119e8:	muleq	r1, r0, sp
   119ec:	muleq	r1, r0, sp
   119f0:	muleq	r1, r0, sp
   119f4:	muleq	r1, r0, sp
   119f8:	muleq	r1, r0, sp
   119fc:	muleq	r1, r0, sp
   11a00:	muleq	r1, r0, sp
   11a04:	muleq	r1, r0, sp
   11a08:	muleq	r1, r0, sp
   11a0c:	muleq	r1, r0, sp
   11a10:	muleq	r1, r0, sp
   11a14:	muleq	r1, r0, sp
   11a18:	muleq	r1, r0, sp
   11a1c:	muleq	r1, r0, sp
   11a20:	muleq	r1, r0, sp
   11a24:	muleq	r1, r0, sp
   11a28:	muleq	r1, r0, sp
   11a2c:	muleq	r1, r0, sp
   11a30:	muleq	r1, r0, sp
   11a34:	muleq	r1, r0, sp
   11a38:	muleq	r1, r0, sp
   11a3c:	muleq	r1, r0, sp
   11a40:	muleq	r1, r0, sp
   11a44:	muleq	r1, r0, sp
   11a48:	muleq	r1, r0, sp
   11a4c:	muleq	r1, r0, sp
   11a50:	muleq	r1, r0, sp
   11a54:	muleq	r1, r0, sp
   11a58:	muleq	r1, r0, sp
   11a5c:	muleq	r1, r0, sp
   11a60:	muleq	r1, r0, sp
   11a64:	muleq	r1, r0, sp
   11a68:	muleq	r1, r0, sp
   11a6c:	muleq	r1, r0, sp
   11a70:	muleq	r1, r0, sp
   11a74:	muleq	r1, r0, sp
   11a78:	andeq	r1, r1, ip, asr #25
   11a7c:	str	r9, [sp, #44]	; 0x2c
   11a80:	b	11708 <__assert_fail@plt+0x168>
   11a84:	mov	r3, #1
   11a88:	strb	r3, [fp, #120]	; 0x78
   11a8c:	strb	r3, [fp, #121]	; 0x79
   11a90:	b	11708 <__assert_fail@plt+0x168>
   11a94:	mov	r3, #1
   11a98:	strb	r3, [fp, #140]	; 0x8c
   11a9c:	b	11708 <__assert_fail@plt+0x168>
   11aa0:	mov	r2, #1
   11aa4:	str	r2, [sp]
   11aa8:	mvn	r3, #0
   11aac:	mov	r1, #110	; 0x6e
   11ab0:	ldr	r0, [r8]
   11ab4:	bl	12c90 <__assert_fail@plt+0x16f0>
   11ab8:	ldr	r3, [fp, #40]	; 0x28
   11abc:	cmp	r3, #0
   11ac0:	str	r0, [fp, #44]	; 0x2c
   11ac4:	bne	12114 <__assert_fail@plt+0xb74>
   11ac8:	ldr	r3, [fp, #28]
   11acc:	cmp	r3, #0
   11ad0:	beq	11708 <__assert_fail@plt+0x168>
   11ad4:	ldr	r3, [fp, #44]	; 0x2c
   11ad8:	cmp	r3, #1
   11adc:	moveq	r3, #0
   11ae0:	streq	r3, [fp, #44]	; 0x2c
   11ae4:	beq	11708 <__assert_fail@plt+0x168>
   11ae8:	ldr	r1, [pc, #2848]	; 12610 <__assert_fail@plt+0x1070>
   11aec:	ldr	r0, [pc, #2848]	; 12614 <__assert_fail@plt+0x1074>
   11af0:	bl	1290c <__assert_fail@plt+0x136c>
   11af4:	mov	r3, #0
   11af8:	str	r3, [fp, #28]
   11afc:	b	11708 <__assert_fail@plt+0x168>
   11b00:	ldr	r0, [r8]
   11b04:	cmp	r0, #0
   11b08:	beq	12108 <__assert_fail@plt+0xb68>
   11b0c:	mov	r2, #1
   11b10:	str	r2, [sp]
   11b14:	mvn	r3, #0
   11b18:	mov	r1, #108	; 0x6c
   11b1c:	bl	12c90 <__assert_fail@plt+0x16f0>
   11b20:	str	r0, [fp, #40]	; 0x28
   11b24:	ldr	r3, [fp, #44]	; 0x2c
   11b28:	cmp	r3, #0
   11b2c:	bne	1212c <__assert_fail@plt+0xb8c>
   11b30:	ldr	r3, [fp, #28]
   11b34:	cmp	r3, #0
   11b38:	beq	11708 <__assert_fail@plt+0x168>
   11b3c:	ldr	r1, [pc, #2764]	; 12610 <__assert_fail@plt+0x1070>
   11b40:	ldr	r0, [pc, #2768]	; 12618 <__assert_fail@plt+0x1078>
   11b44:	bl	1290c <__assert_fail@plt+0x136c>
   11b48:	mov	r3, #0
   11b4c:	str	r3, [fp, #28]
   11b50:	b	11708 <__assert_fail@plt+0x168>
   11b54:	mov	r0, #0
   11b58:	bl	1297c <__assert_fail@plt+0x13dc>
   11b5c:	ldr	r3, [r8]
   11b60:	mov	r0, r3
   11b64:	str	r3, [sp, #32]
   11b68:	bl	113f0 <strlen@plt>
   11b6c:	ldr	r3, [sp, #32]
   11b70:	cmp	r0, #1
   11b74:	ldrbeq	r7, [r3]
   11b78:	beq	11bb8 <__assert_fail@plt+0x618>
   11b7c:	ldrb	r2, [r3]
   11b80:	cmp	r2, #92	; 0x5c
   11b84:	bne	126e4 <__assert_fail@plt+0x1144>
   11b88:	ldrb	r7, [r3, #1]
   11b8c:	cmp	r7, #102	; 0x66
   11b90:	beq	12528 <__assert_fail@plt+0xf88>
   11b94:	bls	11dac <__assert_fail@plt+0x80c>
   11b98:	cmp	r7, #114	; 0x72
   11b9c:	beq	12520 <__assert_fail@plt+0xf80>
   11ba0:	bls	12510 <__assert_fail@plt+0xf70>
   11ba4:	cmp	r7, #116	; 0x74
   11ba8:	beq	121b4 <__assert_fail@plt+0xc14>
   11bac:	cmp	r7, #118	; 0x76
   11bb0:	moveq	r7, #11
   11bb4:	bne	11dc4 <__assert_fail@plt+0x824>
   11bb8:	ldr	r3, [pc, #2652]	; 1261c <__assert_fail@plt+0x107c>
   11bbc:	strb	r7, [fp, #156]	; 0x9c
   11bc0:	str	r3, [sp, #32]
   11bc4:	b	11708 <__assert_fail@plt+0x168>
   11bc8:	ldr	r3, [r8]
   11bcc:	str	r3, [sp, #36]	; 0x24
   11bd0:	b	11708 <__assert_fail@plt+0x168>
   11bd4:	mov	r3, #1
   11bd8:	str	r3, [sp, #40]	; 0x28
   11bdc:	b	11708 <__assert_fail@plt+0x168>
   11be0:	mov	r3, #1
   11be4:	str	r3, [sp]
   11be8:	mov	r2, #0
   11bec:	mvn	r3, #-2147483648	; 0x80000000
   11bf0:	mov	r1, #80	; 0x50
   11bf4:	ldr	r0, [r8]
   11bf8:	bl	12c90 <__assert_fail@plt+0x16f0>
   11bfc:	ldr	r3, [pc, #2588]	; 12620 <__assert_fail@plt+0x1080>
   11c00:	str	r0, [r3]
   11c04:	b	11708 <__assert_fail@plt+0x168>
   11c08:	mov	r2, #1
   11c0c:	str	r2, [sp]
   11c10:	mvn	r3, #0
   11c14:	mov	r1, #76	; 0x4c
   11c18:	ldr	r0, [r8]
   11c1c:	bl	12c90 <__assert_fail@plt+0x16f0>
   11c20:	ldr	r3, [fp, #44]	; 0x2c
   11c24:	cmp	r3, #0
   11c28:	str	r0, [fp, #40]	; 0x28
   11c2c:	bne	1215c <__assert_fail@plt+0xbbc>
   11c30:	ldr	r3, [fp, #28]
   11c34:	cmp	r3, #0
   11c38:	beq	11708 <__assert_fail@plt+0x168>
   11c3c:	ldr	r1, [pc, #2508]	; 12610 <__assert_fail@plt+0x1070>
   11c40:	ldr	r0, [pc, #2524]	; 12624 <__assert_fail@plt+0x1084>
   11c44:	bl	1290c <__assert_fail@plt+0x136c>
   11c48:	mov	r3, #0
   11c4c:	str	r3, [fp, #28]
   11c50:	b	11708 <__assert_fail@plt+0x168>
   11c54:	ldr	r3, [r8]
   11c58:	ldr	r2, [fp, #44]	; 0x2c
   11c5c:	ldr	r1, [pc, #2500]	; 12628 <__assert_fail@plt+0x1088>
   11c60:	cmp	r3, #0
   11c64:	moveq	r3, r1
   11c68:	cmp	r2, #0
   11c6c:	str	r3, [fp, #28]
   11c70:	bne	12144 <__assert_fail@plt+0xba4>
   11c74:	ldr	r3, [fp, #40]	; 0x28
   11c78:	cmp	r3, #0
   11c7c:	beq	11708 <__assert_fail@plt+0x168>
   11c80:	ldr	r1, [pc, #2468]	; 1262c <__assert_fail@plt+0x108c>
   11c84:	ldr	r0, [pc, #2468]	; 12630 <__assert_fail@plt+0x1090>
   11c88:	bl	1290c <__assert_fail@plt+0x136c>
   11c8c:	mov	r3, #0
   11c90:	str	r3, [fp, #40]	; 0x28
   11c94:	b	11708 <__assert_fail@plt+0x168>
   11c98:	ldr	r3, [r8]
   11c9c:	cmp	r3, #0
   11ca0:	beq	11da4 <__assert_fail@plt+0x804>
   11ca4:	ldrb	r2, [r3]
   11ca8:	cmp	r2, #0
   11cac:	beq	11da4 <__assert_fail@plt+0x804>
   11cb0:	str	r3, [fp, #168]	; 0xa8
   11cb4:	b	11708 <__assert_fail@plt+0x168>
   11cb8:	mov	r3, #0
   11cbc:	strb	r3, [fp, #156]	; 0x9c
   11cc0:	ldr	r3, [pc, #2388]	; 1261c <__assert_fail@plt+0x107c>
   11cc4:	str	r3, [sp, #32]
   11cc8:	b	11708 <__assert_fail@plt+0x168>
   11ccc:	ldr	r7, [r8]
   11cd0:	mov	r1, #61	; 0x3d
   11cd4:	mov	r0, r7
   11cd8:	bl	113fc <strchr@plt>
   11cdc:	subs	r3, r0, #0
   11ce0:	str	r3, [sp, #56]	; 0x38
   11ce4:	bne	12738 <__assert_fail@plt+0x1198>
   11ce8:	mov	r0, r7
   11cec:	str	r7, [fp, #132]	; 0x84
   11cf0:	bl	1154c <unsetenv@plt>
   11cf4:	cmp	r0, #0
   11cf8:	beq	11708 <__assert_fail@plt+0x168>
   11cfc:	bl	11420 <__errno_location@plt>
   11d00:	mov	r2, #5
   11d04:	ldr	r1, [pc, #2344]	; 12634 <__assert_fail@plt+0x1094>
   11d08:	ldr	r4, [r0]
   11d0c:	ldr	r0, [sp, #56]	; 0x38
   11d10:	bl	11288 <dcgettext@plt>
   11d14:	mov	r3, r7
   11d18:	mov	r1, r4
   11d1c:	mov	r2, r0
   11d20:	mov	r0, #1
   11d24:	bl	11354 <error@plt>
   11d28:	mov	r3, #1
   11d2c:	str	r3, [fp, #4]
   11d30:	b	11708 <__assert_fail@plt+0x168>
   11d34:	ldr	r0, [pc, #2204]	; 125d8 <__assert_fail@plt+0x1038>
   11d38:	bl	15608 <__assert_fail@plt+0x4068>
   11d3c:	mov	r0, r9
   11d40:	add	sp, sp, #228	; 0xe4
   11d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d48:	mov	r3, #1
   11d4c:	strb	r3, [fp, #121]	; 0x79
   11d50:	b	11708 <__assert_fail@plt+0x168>
   11d54:	ldr	r3, [sp, #52]	; 0x34
   11d58:	mov	r7, #0
   11d5c:	blx	r3
   11d60:	str	r7, [sp]
   11d64:	ldr	r3, [fp, #8]
   11d68:	mov	r2, #1
   11d6c:	mov	r1, #115	; 0x73
   11d70:	ldr	r0, [r8]
   11d74:	bl	12c90 <__assert_fail@plt+0x16f0>
   11d78:	ldr	r2, [fp, #8]
   11d7c:	cmp	r0, r2
   11d80:	mov	r3, r0
   11d84:	bhi	12174 <__assert_fail@plt+0xbd4>
   11d88:	str	r3, [fp, #16]
   11d8c:	b	11708 <__assert_fail@plt+0x168>
   11d90:	mov	r0, #1
   11d94:	bl	1297c <__assert_fail@plt+0x13dc>
   11d98:	ldr	r3, [pc, #2200]	; 12638 <__assert_fail@plt+0x1098>
   11d9c:	str	r3, [sp, #52]	; 0x34
   11da0:	b	116dc <__assert_fail@plt+0x13c>
   11da4:	mov	r3, #0
   11da8:	b	11cb0 <__assert_fail@plt+0x710>
   11dac:	cmp	r7, #97	; 0x61
   11db0:	beq	12530 <__assert_fail@plt+0xf90>
   11db4:	cmp	r7, #98	; 0x62
   11db8:	beq	121ac <__assert_fail@plt+0xc0c>
   11dbc:	cmp	r7, #92	; 0x5c
   11dc0:	beq	11bb8 <__assert_fail@plt+0x618>
   11dc4:	cmp	r7, #120	; 0x78
   11dc8:	moveq	r1, #16
   11dcc:	addeq	r2, r3, #2
   11dd0:	streq	r1, [sp, #32]
   11dd4:	beq	11e04 <__assert_fail@plt+0x864>
   11dd8:	str	r3, [sp, #32]
   11ddc:	bl	113c0 <__ctype_b_loc@plt>
   11de0:	lsl	r7, r7, #1
   11de4:	ldr	r3, [sp, #32]
   11de8:	ldr	r2, [r0]
   11dec:	ldrh	r2, [r2, r7]
   11df0:	ands	r7, r2, #2048	; 0x800
   11df4:	beq	1270c <__assert_fail@plt+0x116c>
   11df8:	add	r2, r3, #1
   11dfc:	mov	r1, #8
   11e00:	str	r1, [sp, #32]
   11e04:	str	r3, [sp, #60]	; 0x3c
   11e08:	str	r2, [sp, #56]	; 0x38
   11e0c:	bl	11420 <__errno_location@plt>
   11e10:	ldr	r2, [sp, #56]	; 0x38
   11e14:	add	r1, sp, #224	; 0xe0
   11e18:	mov	r7, #0
   11e1c:	str	r7, [r1, #-140]!	; 0xffffff74
   11e20:	mov	ip, r0
   11e24:	mov	r0, r2
   11e28:	str	r7, [ip]
   11e2c:	ldr	r2, [sp, #32]
   11e30:	bl	113e4 <strtoul@plt>
   11e34:	ldr	r3, [sp, #60]	; 0x3c
   11e38:	cmp	r0, #255	; 0xff
   11e3c:	bhi	12548 <__assert_fail@plt+0xfa8>
   11e40:	ldr	r2, [sp, #84]	; 0x54
   11e44:	ldrb	r2, [r2]
   11e48:	cmp	r2, #0
   11e4c:	bne	1271c <__assert_fail@plt+0x117c>
   11e50:	uxtb	r7, r0
   11e54:	b	11bb8 <__assert_fail@plt+0x618>
   11e58:	ldr	r3, [fp, #168]	; 0xa8
   11e5c:	ldr	r2, [pc, #1976]	; 1261c <__assert_fail@plt+0x107c>
   11e60:	ldr	r1, [sp, #32]
   11e64:	adds	r3, r3, #0
   11e68:	movne	r3, #1
   11e6c:	cmp	r1, r2
   11e70:	movne	r3, #0
   11e74:	cmp	r3, #0
   11e78:	bne	12584 <__assert_fail@plt+0xfe4>
   11e7c:	ldr	r3, [sp, #52]	; 0x34
   11e80:	blx	r3
   11e84:	ldr	r3, [sp, #48]	; 0x30
   11e88:	cmp	r3, #0
   11e8c:	bne	126d0 <__assert_fail@plt+0x1130>
   11e90:	ldr	r3, [pc, #1956]	; 1263c <__assert_fail@plt+0x109c>
   11e94:	add	r4, sp, #224	; 0xe0
   11e98:	str	r3, [r4, #-140]!	; 0xffffff74
   11e9c:	add	r0, r4, #4
   11ea0:	bl	114c8 <sigemptyset@plt>
   11ea4:	ldr	r3, [sp, #48]	; 0x30
   11ea8:	mov	r1, r4
   11eac:	mov	r2, r3
   11eb0:	mov	r0, #10
   11eb4:	str	r3, [sp, #216]	; 0xd8
   11eb8:	bl	112f4 <sigaction@plt>
   11ebc:	cmp	r0, #0
   11ec0:	bne	124b8 <__assert_fail@plt+0xf18>
   11ec4:	ldr	r3, [pc, #1908]	; 12640 <__assert_fail@plt+0x10a0>
   11ec8:	mov	r5, #0
   11ecc:	add	r0, r4, #4
   11ed0:	str	r3, [sp, #84]	; 0x54
   11ed4:	bl	114c8 <sigemptyset@plt>
   11ed8:	mov	r1, r4
   11edc:	mov	r2, r5
   11ee0:	mov	r0, #12
   11ee4:	str	r5, [sp, #216]	; 0xd8
   11ee8:	bl	112f4 <sigaction@plt>
   11eec:	cmp	r0, r5
   11ef0:	bne	1248c <__assert_fail@plt+0xeec>
   11ef4:	ldr	r1, [pc, #1804]	; 12608 <__assert_fail@plt+0x1068>
   11ef8:	ldr	r0, [sp, #36]	; 0x24
   11efc:	bl	111e0 <strcmp@plt>
   11f00:	cmp	r0, #0
   11f04:	bne	123fc <__assert_fail@plt+0xe5c>
   11f08:	ldr	r3, [pc, #1844]	; 12644 <__assert_fail@plt+0x10a4>
   11f0c:	ldr	r3, [r3]
   11f10:	str	r3, [fp, #152]	; 0x98
   11f14:	ldr	r3, [fp, #28]
   11f18:	cmp	r3, #0
   11f1c:	beq	12538 <__assert_fail@plt+0xf98>
   11f20:	mov	r3, #1
   11f24:	str	r3, [fp, #4]
   11f28:	ldr	r3, [pc, #1816]	; 12648 <__assert_fail@plt+0x10a8>
   11f2c:	ldr	r3, [r3]
   11f30:	cmp	sl, r3
   11f34:	beq	124e8 <__assert_fail@plt+0xf48>
   11f38:	ldr	r3, [sp, #40]	; 0x28
   11f3c:	cmp	r3, #0
   11f40:	bne	12284 <__assert_fail@plt+0xce4>
   11f44:	ldr	r0, [fp, #16]
   11f48:	add	r0, r0, #1
   11f4c:	bl	1be70 <__assert_fail@plt+0xa8d0>
   11f50:	ldr	r3, [fp, #16]
   11f54:	str	r0, [fp, #144]	; 0x90
   11f58:	add	r0, r3, #1
   11f5c:	bl	1be70 <__assert_fail@plt+0xa8d0>
   11f60:	mov	r1, #0
   11f64:	str	r0, [fp, #60]	; 0x3c
   11f68:	mov	r0, #17
   11f6c:	bl	11270 <signal@plt>
   11f70:	ldr	r4, [fp, #28]
   11f74:	cmp	r4, #0
   11f78:	beq	121bc <__assert_fail@plt+0xc1c>
   11f7c:	lsl	r5, sl, #2
   11f80:	mov	r0, r5
   11f84:	bl	1be70 <__assert_fail@plt+0xa8d0>
   11f88:	ldr	r3, [pc, #1720]	; 12648 <__assert_fail@plt+0x10a8>
   11f8c:	ldr	r6, [r3]
   11f90:	cmp	sl, r6
   11f94:	str	r0, [sp, #36]	; 0x24
   11f98:	ble	11fc8 <__assert_fail@plt+0xa28>
   11f9c:	ldr	r3, [sp, #28]
   11fa0:	lsl	r6, r6, #2
   11fa4:	add	r4, r3, r6
   11fa8:	add	r5, r3, r5
   11fac:	ldr	r3, [sp, #36]	; 0x24
   11fb0:	add	r6, r3, r6
   11fb4:	ldr	r0, [r4], #4
   11fb8:	bl	113f0 <strlen@plt>
   11fbc:	cmp	r5, r4
   11fc0:	str	r0, [r6], #4
   11fc4:	bne	11fb4 <__assert_fail@plt+0xa14>
   11fc8:	ldr	r0, [fp, #28]
   11fcc:	bl	113f0 <strlen@plt>
   11fd0:	ldr	r9, [pc, #1652]	; 1264c <__assert_fail@plt+0x10ac>
   11fd4:	mov	r6, #0
   11fd8:	str	r0, [fp, #24]
   11fdc:	ldr	r3, [sp, #32]
   11fe0:	blx	r3
   11fe4:	cmn	r0, #1
   11fe8:	mov	r8, r0
   11fec:	beq	120f8 <__assert_fail@plt+0xb58>
   11ff0:	mov	r1, r9
   11ff4:	ldr	r0, [pc, #1528]	; 125f4 <__assert_fail@plt+0x1054>
   11ff8:	bl	14dd4 <__assert_fail@plt+0x3834>
   11ffc:	ldr	r3, [pc, #1604]	; 12648 <__assert_fail@plt+0x10a8>
   12000:	ldr	r7, [sp, #28]
   12004:	mov	r1, r9
   12008:	ldr	r2, [r3]
   1200c:	ldr	r3, [pc, #1548]	; 12620 <__assert_fail@plt+0x1080>
   12010:	sub	r8, r8, #1
   12014:	ldrb	r0, [r3, #4]
   12018:	ldr	r3, [sp, #36]	; 0x24
   1201c:	ldr	r3, [r3, r2, lsl #2]
   12020:	ldr	r2, [r7, r2, lsl #2]
   12024:	add	r3, r3, #1
   12028:	str	r0, [sp, #8]
   1202c:	str	r6, [sp, #4]
   12030:	str	r6, [sp]
   12034:	ldr	r0, [pc, #1464]	; 125f4 <__assert_fail@plt+0x1054>
   12038:	str	r6, [fp, #64]	; 0x40
   1203c:	bl	1438c <__assert_fail@plt+0x2dec>
   12040:	ldr	r2, [pc, #1536]	; 12648 <__assert_fail@plt+0x10a8>
   12044:	ldr	r5, [r2]
   12048:	ldr	r2, [pc, #1488]	; 12620 <__assert_fail@plt+0x1080>
   1204c:	add	r4, r5, #1
   12050:	cmp	sl, r4
   12054:	strb	r6, [r2, #4]
   12058:	ble	120b4 <__assert_fail@plt+0xb14>
   1205c:	ldr	r3, [sp, #36]	; 0x24
   12060:	lsl	r5, r5, #2
   12064:	add	r7, r7, r5
   12068:	mov	r0, r6
   1206c:	add	r5, r3, r5
   12070:	b	1207c <__assert_fail@plt+0xadc>
   12074:	ldr	r3, [pc, #1444]	; 12620 <__assert_fail@plt+0x1080>
   12078:	ldrb	r0, [r3, #4]
   1207c:	ldr	r1, [fp, #144]	; 0x90
   12080:	ldr	r3, [r5, #4]!
   12084:	ldr	r2, [r7, #4]!
   12088:	add	r4, r4, #1
   1208c:	str	r0, [sp, #16]
   12090:	str	r1, [sp, #8]
   12094:	str	r8, [sp, #12]
   12098:	str	r6, [sp, #4]
   1209c:	str	r6, [sp]
   120a0:	mov	r1, r9
   120a4:	ldr	r0, [pc, #1352]	; 125f4 <__assert_fail@plt+0x1054>
   120a8:	bl	14638 <__assert_fail@plt+0x3098>
   120ac:	cmp	sl, r4
   120b0:	bne	12074 <__assert_fail@plt+0xad4>
   120b4:	mov	r1, r9
   120b8:	ldr	r0, [pc, #1332]	; 125f4 <__assert_fail@plt+0x1054>
   120bc:	bl	148b8 <__assert_fail@plt+0x3318>
   120c0:	b	11fdc <__assert_fail@plt+0xa3c>
   120c4:	ldr	r2, [fp, #48]	; 0x30
   120c8:	ldr	r3, [fp, #32]
   120cc:	cmp	r2, r3
   120d0:	bne	120ec <__assert_fail@plt+0xb4c>
   120d4:	ldr	r3, [sp, #44]	; 0x2c
   120d8:	cmp	r3, #0
   120dc:	beq	120f8 <__assert_fail@plt+0xb58>
   120e0:	ldrb	r3, [fp, #128]	; 0x80
   120e4:	cmp	r3, #0
   120e8:	bne	120f8 <__assert_fail@plt+0xb58>
   120ec:	ldr	r1, [pc, #1368]	; 1264c <__assert_fail@plt+0x10ac>
   120f0:	sub	r0, r1, #44	; 0x2c
   120f4:	bl	148b8 <__assert_fail@plt+0x3318>
   120f8:	ldr	r3, [fp, #104]	; 0x68
   120fc:	str	r3, [fp, #116]	; 0x74
   12100:	ldr	r9, [fp, #104]	; 0x68
   12104:	b	11d3c <__assert_fail@plt+0x79c>
   12108:	mov	r3, #1
   1210c:	str	r3, [fp, #40]	; 0x28
   12110:	b	11b24 <__assert_fail@plt+0x584>
   12114:	ldr	r1, [pc, #1296]	; 1262c <__assert_fail@plt+0x108c>
   12118:	ldr	r0, [pc, #1268]	; 12614 <__assert_fail@plt+0x1074>
   1211c:	bl	1290c <__assert_fail@plt+0x136c>
   12120:	mov	r3, #0
   12124:	str	r3, [fp, #40]	; 0x28
   12128:	b	11ac8 <__assert_fail@plt+0x528>
   1212c:	ldr	r1, [pc, #1308]	; 12650 <__assert_fail@plt+0x10b0>
   12130:	ldr	r0, [pc, #1248]	; 12618 <__assert_fail@plt+0x1078>
   12134:	bl	1290c <__assert_fail@plt+0x136c>
   12138:	mov	r3, #0
   1213c:	str	r3, [fp, #44]	; 0x2c
   12140:	b	11b30 <__assert_fail@plt+0x590>
   12144:	ldr	r1, [pc, #1284]	; 12650 <__assert_fail@plt+0x10b0>
   12148:	ldr	r0, [pc, #1248]	; 12630 <__assert_fail@plt+0x1090>
   1214c:	bl	1290c <__assert_fail@plt+0x136c>
   12150:	mov	r3, #0
   12154:	str	r3, [fp, #44]	; 0x2c
   12158:	b	11c74 <__assert_fail@plt+0x6d4>
   1215c:	ldr	r1, [pc, #1260]	; 12650 <__assert_fail@plt+0x10b0>
   12160:	ldr	r0, [pc, #1212]	; 12624 <__assert_fail@plt+0x1084>
   12164:	bl	1290c <__assert_fail@plt+0x136c>
   12168:	mov	r3, #0
   1216c:	str	r3, [fp, #44]	; 0x2c
   12170:	b	11c30 <__assert_fail@plt+0x690>
   12174:	str	r0, [sp, #56]	; 0x38
   12178:	mov	r2, #5
   1217c:	ldr	r1, [pc, #1232]	; 12654 <__assert_fail@plt+0x10b4>
   12180:	mov	r0, r7
   12184:	bl	11288 <dcgettext@plt>
   12188:	ldr	r2, [fp, #8]
   1218c:	ldr	r3, [sp, #56]	; 0x38
   12190:	str	r2, [sp]
   12194:	mov	r1, r7
   12198:	mov	r2, r0
   1219c:	mov	r0, r7
   121a0:	bl	11354 <error@plt>
   121a4:	ldr	r3, [fp, #8]
   121a8:	b	11d88 <__assert_fail@plt+0x7e8>
   121ac:	mov	r7, #8
   121b0:	b	11bb8 <__assert_fail@plt+0x618>
   121b4:	mov	r7, #9
   121b8:	b	11bb8 <__assert_fail@plt+0x618>
   121bc:	ldr	r7, [pc, #1160]	; 1264c <__assert_fail@plt+0x10ac>
   121c0:	ldr	r5, [pc, #1112]	; 12620 <__assert_fail@plt+0x1080>
   121c4:	sub	r6, r7, #44	; 0x2c
   121c8:	ldr	r8, [sp, #28]
   121cc:	b	12214 <__assert_fail@plt+0xc74>
   121d0:	ldr	r9, [r8, r3, lsl #2]
   121d4:	mov	r0, r9
   121d8:	bl	113f0 <strlen@plt>
   121dc:	ldrb	r3, [r5, #4]
   121e0:	mov	r2, r9
   121e4:	str	r4, [sp, #4]
   121e8:	str	r3, [sp, #8]
   121ec:	str	r4, [sp]
   121f0:	mov	r1, r7
   121f4:	add	r3, r0, #1
   121f8:	mov	r0, r6
   121fc:	bl	1438c <__assert_fail@plt+0x2dec>
   12200:	ldr	r3, [pc, #1088]	; 12648 <__assert_fail@plt+0x10a8>
   12204:	ldr	r2, [pc, #1084]	; 12648 <__assert_fail@plt+0x10a8>
   12208:	ldr	r3, [r3]
   1220c:	add	r3, r3, #1
   12210:	str	r3, [r2]
   12214:	ldr	r3, [pc, #1068]	; 12648 <__assert_fail@plt+0x10a8>
   12218:	ldr	r3, [r3]
   1221c:	cmp	sl, r3
   12220:	bgt	121d0 <__assert_fail@plt+0xc30>
   12224:	ldr	r6, [pc, #1056]	; 1264c <__assert_fail@plt+0x10ac>
   12228:	mov	r3, #0
   1222c:	ldr	r1, [fp, #48]	; 0x30
   12230:	ldr	r2, [fp, #64]	; 0x40
   12234:	strb	r3, [r5, #4]
   12238:	mov	r4, r3
   1223c:	sub	r5, r6, #44	; 0x2c
   12240:	str	r1, [fp, #32]
   12244:	str	r2, [fp, #68]	; 0x44
   12248:	ldr	r3, [sp, #32]
   1224c:	blx	r3
   12250:	cmn	r0, #1
   12254:	beq	120c4 <__assert_fail@plt+0xb24>
   12258:	ldr	r3, [fp, #40]	; 0x28
   1225c:	cmp	r3, #0
   12260:	beq	12248 <__assert_fail@plt+0xca8>
   12264:	ldr	r2, [fp, #160]	; 0xa0
   12268:	cmp	r3, r2
   1226c:	bhi	12248 <__assert_fail@plt+0xca8>
   12270:	mov	r1, r6
   12274:	mov	r0, r5
   12278:	bl	148b8 <__assert_fail@plt+0x3318>
   1227c:	str	r4, [fp, #160]	; 0xa0
   12280:	b	12248 <__assert_fail@plt+0xca8>
   12284:	ldr	r4, [pc, #972]	; 12658 <__assert_fail@plt+0x10b8>
   12288:	mov	r2, #5
   1228c:	ldr	r1, [pc, #968]	; 1265c <__assert_fail@plt+0x10bc>
   12290:	mov	r0, #0
   12294:	ldr	r5, [r4]
   12298:	bl	11288 <dcgettext@plt>
   1229c:	mov	r6, r0
   122a0:	bl	14bb8 <__assert_fail@plt+0x3618>
   122a4:	mov	r1, r6
   122a8:	mov	r3, #0
   122ac:	mov	r2, r0
   122b0:	mov	r0, r5
   122b4:	bl	11414 <fprintf@plt>
   122b8:	mov	r2, #5
   122bc:	ldr	r1, [pc, #924]	; 12660 <__assert_fail@plt+0x10c0>
   122c0:	mov	r0, #0
   122c4:	ldr	r5, [r4]
   122c8:	bl	11288 <dcgettext@plt>
   122cc:	mov	r3, #0
   122d0:	ldr	r2, [fp, #8]
   122d4:	mov	r1, r0
   122d8:	mov	r0, r5
   122dc:	bl	11414 <fprintf@plt>
   122e0:	mov	r2, #5
   122e4:	ldr	r1, [pc, #888]	; 12664 <__assert_fail@plt+0x10c4>
   122e8:	mov	r0, #0
   122ec:	ldr	r5, [r4]
   122f0:	bl	11288 <dcgettext@plt>
   122f4:	mov	r3, #0
   122f8:	ldr	r2, [fp, #12]
   122fc:	mov	r1, r0
   12300:	mov	r0, r5
   12304:	bl	11414 <fprintf@plt>
   12308:	mov	r2, #5
   1230c:	ldr	r1, [pc, #852]	; 12668 <__assert_fail@plt+0x10c8>
   12310:	mov	r0, #0
   12314:	ldr	r5, [r4]
   12318:	bl	11288 <dcgettext@plt>
   1231c:	ldr	r6, [fp, #8]
   12320:	mov	r7, r0
   12324:	bl	14bb8 <__assert_fail@plt+0x3618>
   12328:	mov	r3, #0
   1232c:	mov	r1, r7
   12330:	sub	r2, r6, r0
   12334:	mov	r0, r5
   12338:	bl	11414 <fprintf@plt>
   1233c:	mov	r2, #5
   12340:	ldr	r1, [pc, #804]	; 1266c <__assert_fail@plt+0x10cc>
   12344:	mov	r0, #0
   12348:	ldr	r5, [r4]
   1234c:	bl	11288 <dcgettext@plt>
   12350:	mov	r3, #0
   12354:	ldr	r2, [fp, #16]
   12358:	mov	r1, r0
   1235c:	mov	r0, r5
   12360:	bl	11414 <fprintf@plt>
   12364:	mov	r2, #5
   12368:	ldr	r1, [pc, #768]	; 12670 <__assert_fail@plt+0x10d0>
   1236c:	mov	r0, #0
   12370:	ldr	r5, [r4]
   12374:	bl	11288 <dcgettext@plt>
   12378:	mvn	r2, #-2147483648	; 0x80000000
   1237c:	mov	r3, #0
   12380:	mov	r1, r0
   12384:	mov	r0, r5
   12388:	bl	11414 <fprintf@plt>
   1238c:	mov	r0, #0
   12390:	bl	11540 <isatty@plt>
   12394:	cmp	r0, #0
   12398:	beq	11f44 <__assert_fail@plt+0x9a4>
   1239c:	mov	r2, #5
   123a0:	ldr	r1, [pc, #716]	; 12674 <__assert_fail@plt+0x10d4>
   123a4:	mov	r0, #0
   123a8:	ldr	r5, [r4]
   123ac:	bl	11288 <dcgettext@plt>
   123b0:	mov	r1, r0
   123b4:	mov	r0, r5
   123b8:	bl	11414 <fprintf@plt>
   123bc:	ldr	r3, [sp, #44]	; 0x2c
   123c0:	cmp	r3, #0
   123c4:	beq	11f44 <__assert_fail@plt+0x9a4>
   123c8:	mov	r2, #5
   123cc:	ldr	r1, [pc, #676]	; 12678 <__assert_fail@plt+0x10d8>
   123d0:	mov	r0, #0
   123d4:	ldr	r4, [r4]
   123d8:	bl	11288 <dcgettext@plt>
   123dc:	ldr	r3, [pc, #612]	; 12648 <__assert_fail@plt+0x10a8>
   123e0:	ldr	r2, [sp, #28]
   123e4:	ldr	r3, [r3]
   123e8:	ldr	r2, [r2, r3, lsl #2]
   123ec:	mov	r1, r0
   123f0:	mov	r0, r4
   123f4:	bl	11414 <fprintf@plt>
   123f8:	b	11f44 <__assert_fail@plt+0x9a4>
   123fc:	mov	r3, #1
   12400:	mov	r1, #0
   12404:	ldr	r0, [sp, #36]	; 0x24
   12408:	str	r3, [fp, #136]	; 0x88
   1240c:	bl	15420 <__assert_fail@plt+0x3e80>
   12410:	subs	r4, r0, #0
   12414:	blt	12444 <__assert_fail@plt+0xea4>
   12418:	ldr	r1, [pc, #604]	; 1267c <__assert_fail@plt+0x10dc>
   1241c:	bl	111bc <fdopen@plt>
   12420:	cmp	r0, #0
   12424:	strne	r0, [fp, #152]	; 0x98
   12428:	bne	11f14 <__assert_fail@plt+0x974>
   1242c:	bl	11420 <__errno_location@plt>
   12430:	mov	r5, r0
   12434:	mov	r0, r4
   12438:	ldr	r4, [r5]
   1243c:	bl	11588 <close@plt>
   12440:	str	r4, [r5]
   12444:	mov	r4, #0
   12448:	str	r4, [fp, #152]	; 0x98
   1244c:	bl	11420 <__errno_location@plt>
   12450:	mov	r2, #5
   12454:	ldr	r1, [pc, #548]	; 12680 <__assert_fail@plt+0x10e0>
   12458:	ldr	r5, [r0]
   1245c:	mov	r0, r4
   12460:	bl	11288 <dcgettext@plt>
   12464:	ldr	r2, [sp, #36]	; 0x24
   12468:	mov	r1, #8
   1246c:	mov	r6, r0
   12470:	mov	r0, r4
   12474:	bl	1950c <__assert_fail@plt+0x7f6c>
   12478:	mov	r2, r6
   1247c:	mov	r1, r5
   12480:	mov	r3, r0
   12484:	mov	r0, #1
   12488:	bl	11354 <error@plt>
   1248c:	bl	11420 <__errno_location@plt>
   12490:	mov	r2, #5
   12494:	ldr	r1, [pc, #488]	; 12684 <__assert_fail@plt+0x10e4>
   12498:	ldr	r4, [r0]
   1249c:	mov	r0, r5
   124a0:	bl	11288 <dcgettext@plt>
   124a4:	mov	r1, r4
   124a8:	mov	r2, r0
   124ac:	mov	r0, r5
   124b0:	bl	11354 <error@plt>
   124b4:	b	11ef4 <__assert_fail@plt+0x954>
   124b8:	bl	11420 <__errno_location@plt>
   124bc:	ldr	r6, [sp, #48]	; 0x30
   124c0:	mov	r2, #5
   124c4:	ldr	r1, [pc, #444]	; 12688 <__assert_fail@plt+0x10e8>
   124c8:	ldr	r5, [r0]
   124cc:	mov	r0, r6
   124d0:	bl	11288 <dcgettext@plt>
   124d4:	mov	r1, r5
   124d8:	mov	r2, r0
   124dc:	mov	r0, r6
   124e0:	bl	11354 <error@plt>
   124e4:	b	11ec4 <__assert_fail@plt+0x924>
   124e8:	add	r3, sp, #224	; 0xe0
   124ec:	mov	r2, r3
   124f0:	add	r3, sp, #76	; 0x4c
   124f4:	str	r3, [r2, #-152]!	; 0xffffff68
   124f8:	str	r2, [sp, #28]
   124fc:	ldr	r2, [pc, #324]	; 12648 <__assert_fail@plt+0x10a8>
   12500:	mov	r3, #0
   12504:	mov	sl, #1
   12508:	str	r3, [r2]
   1250c:	b	11f38 <__assert_fail@plt+0x998>
   12510:	cmp	r7, #110	; 0x6e
   12514:	moveq	r7, #10
   12518:	beq	11bb8 <__assert_fail@plt+0x618>
   1251c:	b	11dc4 <__assert_fail@plt+0x824>
   12520:	mov	r7, #13
   12524:	b	11bb8 <__assert_fail@plt+0x618>
   12528:	mov	r7, #12
   1252c:	b	11bb8 <__assert_fail@plt+0x618>
   12530:	mov	r7, #7
   12534:	b	11bb8 <__assert_fail@plt+0x618>
   12538:	ldr	r3, [fp, #40]	; 0x28
   1253c:	cmp	r3, #0
   12540:	beq	11f28 <__assert_fail@plt+0x988>
   12544:	b	11f20 <__assert_fail@plt+0x980>
   12548:	ldr	r2, [sp, #32]
   1254c:	mov	r0, r7
   12550:	cmp	r2, #16
   12554:	mov	r2, #5
   12558:	ldreq	r1, [pc, #300]	; 1268c <__assert_fail@plt+0x10ec>
   1255c:	ldrne	r1, [pc, #300]	; 12690 <__assert_fail@plt+0x10f0>
   12560:	str	r3, [sp, #28]
   12564:	bl	11288 <dcgettext@plt>
   12568:	mov	r2, #255	; 0xff
   1256c:	str	r2, [sp]
   12570:	ldr	r3, [sp, #28]
   12574:	mov	r2, r0
   12578:	mov	r1, r7
   1257c:	mov	r0, #1
   12580:	bl	11354 <error@plt>
   12584:	mov	r2, #5
   12588:	ldr	r1, [pc, #260]	; 12694 <__assert_fail@plt+0x10f4>
   1258c:	mov	r0, #0
   12590:	bl	11288 <dcgettext@plt>
   12594:	mov	r1, #0
   12598:	mov	r2, r0
   1259c:	mov	r0, r1
   125a0:	bl	11354 <error@plt>
   125a4:	b	11e7c <__assert_fail@plt+0x8dc>
   125a8:	bl	11420 <__errno_location@plt>
   125ac:	mov	r2, #5
   125b0:	ldr	r1, [pc, #224]	; 12698 <__assert_fail@plt+0x10f8>
   125b4:	ldr	r4, [r0]
   125b8:	mov	r0, #0
   125bc:	bl	11288 <dcgettext@plt>
   125c0:	mov	r1, r4
   125c4:	mov	r2, r0
   125c8:	mov	r0, #1
   125cc:	bl	11354 <error@plt>
   125d0:	andeq	pc, r1, r0, lsr #3
   125d4:	andeq	r0, r3, r8, ror #3
   125d8:	ldrdeq	lr, [r1], -r4
   125dc:	andeq	lr, r1, r8, asr r6
   125e0:	ldrdeq	lr, [r1], -ip
   125e4:	ldrdeq	pc, [r1], -r0
   125e8:	ldrdeq	r5, [r1], -r4
   125ec:	andeq	r3, r1, r4, ror r0
   125f0:	strdeq	r3, [r1], -r0
   125f4:	andeq	r0, r3, ip, ror #3
   125f8:			; <UNDEFINED> instruction: 0x000128b8
   125fc:			; <UNDEFINED> instruction: 0x00013cb8
   12600:	andeq	sp, r1, r0, ror #18
   12604:	andeq	lr, r1, r0, asr #28
   12608:	ldrdeq	lr, [r1], -r0
   1260c:	andeq	r0, r3, r0, ror #3
   12610:	andeq	lr, r1, ip, ror #26
   12614:	andeq	lr, r1, r8, lsl #27
   12618:	andeq	lr, r1, r8, ror sp
   1261c:	andeq	r3, r1, ip, lsr #22
   12620:	andeq	r0, r3, r8, ror #2
   12624:	andeq	lr, r1, r8, ror #26
   12628:	andeq	lr, r1, ip, asr #21
   1262c:	andeq	lr, r1, ip, asr sp
   12630:	andeq	lr, r1, ip, asr #26
   12634:	andeq	lr, r1, r8, lsl lr
   12638:	andeq	r2, r1, r4, asr r9
   1263c:			; <UNDEFINED> instruction: 0x000128bc
   12640:	andeq	r2, r1, ip, ror #17
   12644:	ldrdeq	r0, [r3], -r8
   12648:	andeq	r0, r3, r8, asr #3
   1264c:	andeq	r0, r3, r8, lsl r2
   12650:	andeq	lr, r1, r0, asr #26
   12654:	muleq	r1, r8, sp
   12658:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1265c:	andeq	lr, r1, r0, lsl #30
   12660:	andeq	lr, r1, r0, lsr pc
   12664:	andeq	lr, r1, ip, ror #30
   12668:			; <UNDEFINED> instruction: 0x0001efbc
   1266c:	strdeq	lr, [r1], -r4
   12670:	andeq	pc, r1, r8, lsr #32
   12674:	andeq	pc, r1, r4, rrx
   12678:	andeq	pc, r1, r4, lsl r1	; <UNPREDICTABLE>
   1267c:	ldrdeq	lr, [r1], -r8
   12680:	andeq	pc, r1, r4, lsl #3
   12684:	ldrdeq	lr, [r1], -ip
   12688:			; <UNDEFINED> instruction: 0x0001eeb8
   1268c:	muleq	r1, r0, fp
   12690:	strdeq	lr, [r1], -r4
   12694:	andeq	lr, r1, r4, ror #28
   12698:	strdeq	lr, [r1], -r4
   1269c:	ldrdeq	r0, [r0], -r3
   126a0:	andeq	lr, r1, r0, lsr #29
   126a4:			; <UNDEFINED> instruction: 0x0001ecbc
   126a8:	andeq	lr, r1, r0, asr fp
   126ac:	andeq	lr, r1, r8, asr ip
   126b0:	ldrdeq	lr, [r1], -ip
   126b4:	andeq	sp, r1, r8, lsr #18
   126b8:	andeq	r0, r0, r3, ror #3
   126bc:	andeq	lr, r1, r8, lsl fp
   126c0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   126c4:	muleq	r1, r0, r7
   126c8:	andeq	lr, r1, r4, lsr fp
   126cc:	andeq	sp, r1, r8, asr r9
   126d0:	ldr	r3, [pc, #-12]	; 126cc <__assert_fail@plt+0x112c>
   126d4:	ldr	r2, [pc, #-64]	; 1269c <__assert_fail@plt+0x10fc>
   126d8:	ldr	r1, [pc, #-28]	; 126c4 <__assert_fail@plt+0x1124>
   126dc:	ldr	r0, [pc, #-68]	; 126a0 <__assert_fail@plt+0x1100>
   126e0:	bl	115a0 <__assert_fail@plt>
   126e4:	ldr	r1, [pc, #-72]	; 126a4 <__assert_fail@plt+0x1104>
   126e8:	mov	r2, #5
   126ec:	str	r3, [sp, #28]
   126f0:	mov	r0, #0
   126f4:	bl	11288 <dcgettext@plt>
   126f8:	ldr	r3, [sp, #28]
   126fc:	mov	r1, #0
   12700:	mov	r2, r0
   12704:	mov	r0, #1
   12708:	bl	11354 <error@plt>
   1270c:	str	r3, [sp, #28]
   12710:	mov	r2, #5
   12714:	ldr	r1, [pc, #-116]	; 126a8 <__assert_fail@plt+0x1108>
   12718:	b	126f0 <__assert_fail@plt+0x1150>
   1271c:	mov	r2, #5
   12720:	ldr	r1, [pc, #-124]	; 126ac <__assert_fail@plt+0x110c>
   12724:	mov	r0, r7
   12728:	str	r3, [sp, #28]
   1272c:	bl	11288 <dcgettext@plt>
   12730:	ldr	r2, [sp, #84]	; 0x54
   12734:	b	1256c <__assert_fail@plt+0xfcc>
   12738:	mov	r2, #5
   1273c:	ldr	r1, [pc, #-148]	; 126b0 <__assert_fail@plt+0x1110>
   12740:	mov	r0, #0
   12744:	bl	11288 <dcgettext@plt>
   12748:	ldr	r2, [sp, #68]	; 0x44
   1274c:	ldr	r3, [pc, #-160]	; 126b4 <__assert_fail@plt+0x1114>
   12750:	mov	r1, #0
   12754:	add	r3, r3, r2, lsl #4
   12758:	ldr	r3, [r3, #56]	; 0x38
   1275c:	mov	r2, r0
   12760:	mov	r0, #1
   12764:	bl	11354 <error@plt>
   12768:	ldr	r3, [pc, #-164]	; 126cc <__assert_fail@plt+0x112c>
   1276c:	ldr	r2, [pc, #-188]	; 126b8 <__assert_fail@plt+0x1118>
   12770:	ldr	r1, [pc, #-180]	; 126c4 <__assert_fail@plt+0x1124>
   12774:	ldr	r0, [pc, #-192]	; 126bc <__assert_fail@plt+0x111c>
   12778:	bl	115a0 <__assert_fail@plt>
   1277c:	ldr	r3, [pc, #-184]	; 126cc <__assert_fail@plt+0x112c>
   12780:	ldr	r2, [pc, #-200]	; 126c0 <__assert_fail@plt+0x1120>
   12784:	ldr	r1, [pc, #-200]	; 126c4 <__assert_fail@plt+0x1124>
   12788:	ldr	r0, [pc, #-200]	; 126c8 <__assert_fail@plt+0x1128>
   1278c:	bl	115a0 <__assert_fail@plt>
   12790:	mov	fp, #0
   12794:	mov	lr, #0
   12798:	pop	{r1}		; (ldr r1, [sp], #4)
   1279c:	mov	r2, sp
   127a0:	push	{r2}		; (str r2, [sp, #-4]!)
   127a4:	push	{r0}		; (str r0, [sp, #-4]!)
   127a8:	ldr	ip, [pc, #16]	; 127c0 <__assert_fail@plt+0x1220>
   127ac:	push	{ip}		; (str ip, [sp, #-4]!)
   127b0:	ldr	r0, [pc, #12]	; 127c4 <__assert_fail@plt+0x1224>
   127b4:	ldr	r3, [pc, #12]	; 127c8 <__assert_fail@plt+0x1228>
   127b8:	bl	11390 <__libc_start_main@plt>
   127bc:	bl	11570 <abort@plt>
   127c0:	andeq	sp, r1, r0, lsl #18
   127c4:	andeq	r1, r1, r4, ror #11
   127c8:	andeq	sp, r1, r0, lsr #17
   127cc:	ldr	r3, [pc, #20]	; 127e8 <__assert_fail@plt+0x1248>
   127d0:	ldr	r2, [pc, #20]	; 127ec <__assert_fail@plt+0x124c>
   127d4:	add	r3, pc, r3
   127d8:	ldr	r2, [r3, r2]
   127dc:	cmp	r2, #0
   127e0:	bxeq	lr
   127e4:	b	113a8 <__gmon_start__@plt>
   127e8:	andeq	sp, r1, r4, lsr #16
   127ec:	andeq	r0, r0, ip, asr r1
   127f0:	ldr	r3, [pc, #28]	; 12814 <__assert_fail@plt+0x1274>
   127f4:	ldr	r0, [pc, #28]	; 12818 <__assert_fail@plt+0x1278>
   127f8:	sub	r3, r3, r0
   127fc:	cmp	r3, #6
   12800:	bxls	lr
   12804:	ldr	r3, [pc, #16]	; 1281c <__assert_fail@plt+0x127c>
   12808:	cmp	r3, #0
   1280c:	bxeq	lr
   12810:	bx	r3
   12814:			; <UNDEFINED> instruction: 0x000301bb
   12818:			; <UNDEFINED> instruction: 0x000301b8
   1281c:	andeq	r0, r0, r0
   12820:	ldr	r1, [pc, #36]	; 1284c <__assert_fail@plt+0x12ac>
   12824:	ldr	r0, [pc, #36]	; 12850 <__assert_fail@plt+0x12b0>
   12828:	sub	r1, r1, r0
   1282c:	asr	r1, r1, #2
   12830:	add	r1, r1, r1, lsr #31
   12834:	asrs	r1, r1, #1
   12838:	bxeq	lr
   1283c:	ldr	r3, [pc, #16]	; 12854 <__assert_fail@plt+0x12b4>
   12840:	cmp	r3, #0
   12844:	bxeq	lr
   12848:	bx	r3
   1284c:			; <UNDEFINED> instruction: 0x000301b8
   12850:			; <UNDEFINED> instruction: 0x000301b8
   12854:	andeq	r0, r0, r0
   12858:	push	{r4, lr}
   1285c:	ldr	r4, [pc, #24]	; 1287c <__assert_fail@plt+0x12dc>
   12860:	ldrb	r3, [r4]
   12864:	cmp	r3, #0
   12868:	popne	{r4, pc}
   1286c:	bl	127f0 <__assert_fail@plt+0x1250>
   12870:	mov	r3, #1
   12874:	strb	r3, [r4]
   12878:	pop	{r4, pc}
   1287c:	andeq	r0, r3, r4, ror #3
   12880:	ldr	r0, [pc, #40]	; 128b0 <__assert_fail@plt+0x1310>
   12884:	ldr	r3, [r0]
   12888:	cmp	r3, #0
   1288c:	bne	12894 <__assert_fail@plt+0x12f4>
   12890:	b	12820 <__assert_fail@plt+0x1280>
   12894:	ldr	r3, [pc, #24]	; 128b4 <__assert_fail@plt+0x1314>
   12898:	cmp	r3, #0
   1289c:	beq	12890 <__assert_fail@plt+0x12f0>
   128a0:	push	{r4, lr}
   128a4:	blx	r3
   128a8:	pop	{r4, lr}
   128ac:	b	12820 <__assert_fail@plt+0x1280>
   128b0:	andeq	pc, r2, r4, lsl pc	; <UNPREDICTABLE>
   128b4:	andeq	r0, r0, r0
   128b8:	bx	lr
   128bc:	ldr	r3, [pc, #32]	; 128e4 <__assert_fail@plt+0x1344>
   128c0:	ldr	r2, [r3]
   128c4:	cmn	r2, #-2147483647	; 0x80000001
   128c8:	ldrne	r2, [r3]
   128cc:	addne	r2, r2, #1
   128d0:	strne	r2, [r3]
   128d4:	ldr	r3, [pc, #12]	; 128e8 <__assert_fail@plt+0x1348>
   128d8:	mov	r2, #1
   128dc:	str	r2, [r3]
   128e0:	bx	lr
   128e4:	andeq	r0, r3, r8, ror #2
   128e8:	andeq	r0, r3, r8, ror #3
   128ec:	ldr	r3, [pc, #20]	; 12908 <__assert_fail@plt+0x1368>
   128f0:	ldr	r2, [r3]
   128f4:	cmp	r2, #1
   128f8:	ldrgt	r2, [r3]
   128fc:	subgt	r2, r2, #1
   12900:	strgt	r2, [r3]
   12904:	bx	lr
   12908:	andeq	r0, r3, r8, ror #2
   1290c:	push	{r4, r5, lr}
   12910:	mov	r2, #5
   12914:	sub	sp, sp, #12
   12918:	mov	r4, r1
   1291c:	mov	r5, r0
   12920:	ldr	r1, [pc, #40]	; 12950 <__assert_fail@plt+0x13b0>
   12924:	mov	r0, #0
   12928:	bl	11288 <dcgettext@plt>
   1292c:	mov	r1, #0
   12930:	str	r5, [sp]
   12934:	str	r4, [sp, #4]
   12938:	mov	r3, r4
   1293c:	mov	r2, r0
   12940:	mov	r0, r1
   12944:	bl	11354 <error@plt>
   12948:	add	sp, sp, #12
   1294c:	pop	{r4, r5, pc}
   12950:	muleq	r1, r0, sl
   12954:	mov	r2, #5
   12958:	ldr	r1, [pc, #24]	; 12978 <__assert_fail@plt+0x13d8>
   1295c:	push	{r4, lr}
   12960:	mov	r0, #0
   12964:	bl	11288 <dcgettext@plt>
   12968:	mov	r1, #0
   1296c:	mov	r2, r0
   12970:	mov	r0, #1
   12974:	bl	11354 <error@plt>
   12978:	andeq	sp, r1, r0, ror #21
   1297c:	subs	r4, r0, #0
   12980:	push	{r7, lr}
   12984:	beq	129bc <__assert_fail@plt+0x141c>
   12988:	ldr	r3, [pc, #656]	; 12c20 <__assert_fail@plt+0x1680>
   1298c:	mov	r2, #5
   12990:	ldr	r1, [pc, #652]	; 12c24 <__assert_fail@plt+0x1684>
   12994:	mov	r0, #0
   12998:	ldr	r5, [r3]
   1299c:	bl	11288 <dcgettext@plt>
   129a0:	ldr	r3, [pc, #640]	; 12c28 <__assert_fail@plt+0x1688>
   129a4:	ldr	r2, [r3]
   129a8:	mov	r1, r0
   129ac:	mov	r0, r5
   129b0:	bl	11414 <fprintf@plt>
   129b4:	mov	r0, r4
   129b8:	bl	113d8 <exit@plt>
   129bc:	ldr	r5, [pc, #616]	; 12c2c <__assert_fail@plt+0x168c>
   129c0:	mov	r2, #5
   129c4:	ldr	r1, [pc, #612]	; 12c30 <__assert_fail@plt+0x1690>
   129c8:	ldr	r7, [r5]
   129cc:	bl	11288 <dcgettext@plt>
   129d0:	ldr	r6, [pc, #592]	; 12c28 <__assert_fail@plt+0x1688>
   129d4:	ldr	r2, [r6]
   129d8:	mov	r1, r0
   129dc:	mov	r0, r7
   129e0:	bl	11414 <fprintf@plt>
   129e4:	mov	r2, #5
   129e8:	ldr	r1, [pc, #580]	; 12c34 <__assert_fail@plt+0x1694>
   129ec:	mov	r0, r4
   129f0:	bl	11288 <dcgettext@plt>
   129f4:	ldr	r1, [r5]
   129f8:	bl	11558 <fputs@plt>
   129fc:	mov	r2, #5
   12a00:	ldr	r1, [pc, #560]	; 12c38 <__assert_fail@plt+0x1698>
   12a04:	mov	r0, r4
   12a08:	bl	11288 <dcgettext@plt>
   12a0c:	ldr	r1, [r5]
   12a10:	bl	11558 <fputs@plt>
   12a14:	mov	r2, #5
   12a18:	ldr	r1, [pc, #540]	; 12c3c <__assert_fail@plt+0x169c>
   12a1c:	mov	r0, r4
   12a20:	bl	11288 <dcgettext@plt>
   12a24:	ldr	r1, [r5]
   12a28:	bl	11558 <fputs@plt>
   12a2c:	mov	r2, #5
   12a30:	ldr	r1, [pc, #520]	; 12c40 <__assert_fail@plt+0x16a0>
   12a34:	mov	r0, r4
   12a38:	bl	11288 <dcgettext@plt>
   12a3c:	ldr	r1, [r5]
   12a40:	bl	11558 <fputs@plt>
   12a44:	mov	r2, #5
   12a48:	ldr	r1, [pc, #500]	; 12c44 <__assert_fail@plt+0x16a4>
   12a4c:	mov	r0, r4
   12a50:	bl	11288 <dcgettext@plt>
   12a54:	ldr	r1, [r5]
   12a58:	bl	11558 <fputs@plt>
   12a5c:	mov	r2, #5
   12a60:	ldr	r1, [pc, #480]	; 12c48 <__assert_fail@plt+0x16a8>
   12a64:	mov	r0, r4
   12a68:	bl	11288 <dcgettext@plt>
   12a6c:	ldr	r1, [r5]
   12a70:	bl	11558 <fputs@plt>
   12a74:	mov	r2, #5
   12a78:	ldr	r1, [pc, #460]	; 12c4c <__assert_fail@plt+0x16ac>
   12a7c:	mov	r0, r4
   12a80:	bl	11288 <dcgettext@plt>
   12a84:	ldr	r1, [r5]
   12a88:	bl	11558 <fputs@plt>
   12a8c:	mov	r2, #5
   12a90:	ldr	r1, [pc, #440]	; 12c50 <__assert_fail@plt+0x16b0>
   12a94:	mov	r0, r4
   12a98:	bl	11288 <dcgettext@plt>
   12a9c:	ldr	r1, [r5]
   12aa0:	bl	11558 <fputs@plt>
   12aa4:	mov	r2, #5
   12aa8:	ldr	r1, [pc, #420]	; 12c54 <__assert_fail@plt+0x16b4>
   12aac:	mov	r0, r4
   12ab0:	bl	11288 <dcgettext@plt>
   12ab4:	ldr	r1, [r5]
   12ab8:	bl	11558 <fputs@plt>
   12abc:	mov	r2, #5
   12ac0:	ldr	r1, [pc, #400]	; 12c58 <__assert_fail@plt+0x16b8>
   12ac4:	mov	r0, r4
   12ac8:	bl	11288 <dcgettext@plt>
   12acc:	ldr	r1, [r5]
   12ad0:	bl	11558 <fputs@plt>
   12ad4:	mov	r2, #5
   12ad8:	ldr	r1, [pc, #380]	; 12c5c <__assert_fail@plt+0x16bc>
   12adc:	mov	r0, r4
   12ae0:	bl	11288 <dcgettext@plt>
   12ae4:	ldr	r1, [r5]
   12ae8:	bl	11558 <fputs@plt>
   12aec:	mov	r2, #5
   12af0:	ldr	r1, [pc, #360]	; 12c60 <__assert_fail@plt+0x16c0>
   12af4:	mov	r0, r4
   12af8:	bl	11288 <dcgettext@plt>
   12afc:	ldr	r1, [r5]
   12b00:	bl	11558 <fputs@plt>
   12b04:	mov	r2, #5
   12b08:	ldr	r1, [pc, #340]	; 12c64 <__assert_fail@plt+0x16c4>
   12b0c:	mov	r0, r4
   12b10:	bl	11288 <dcgettext@plt>
   12b14:	ldr	r1, [r5]
   12b18:	bl	11558 <fputs@plt>
   12b1c:	mov	r2, #5
   12b20:	ldr	r1, [pc, #320]	; 12c68 <__assert_fail@plt+0x16c8>
   12b24:	mov	r0, r4
   12b28:	bl	11288 <dcgettext@plt>
   12b2c:	ldr	r1, [r5]
   12b30:	bl	11558 <fputs@plt>
   12b34:	mov	r2, #5
   12b38:	ldr	r1, [pc, #300]	; 12c6c <__assert_fail@plt+0x16cc>
   12b3c:	mov	r0, r4
   12b40:	bl	11288 <dcgettext@plt>
   12b44:	ldr	r1, [r5]
   12b48:	bl	11558 <fputs@plt>
   12b4c:	mov	r2, #5
   12b50:	ldr	r1, [pc, #280]	; 12c70 <__assert_fail@plt+0x16d0>
   12b54:	mov	r0, r4
   12b58:	bl	11288 <dcgettext@plt>
   12b5c:	ldr	r1, [r5]
   12b60:	bl	11558 <fputs@plt>
   12b64:	mov	r2, #5
   12b68:	ldr	r1, [pc, #260]	; 12c74 <__assert_fail@plt+0x16d4>
   12b6c:	mov	r0, r4
   12b70:	bl	11288 <dcgettext@plt>
   12b74:	ldr	r1, [r5]
   12b78:	bl	11558 <fputs@plt>
   12b7c:	mov	r2, #5
   12b80:	ldr	r1, [pc, #240]	; 12c78 <__assert_fail@plt+0x16d8>
   12b84:	mov	r0, r4
   12b88:	bl	11288 <dcgettext@plt>
   12b8c:	ldr	r1, [r5]
   12b90:	bl	11558 <fputs@plt>
   12b94:	mov	r2, #5
   12b98:	ldr	r1, [pc, #220]	; 12c7c <__assert_fail@plt+0x16dc>
   12b9c:	mov	r0, r4
   12ba0:	bl	11288 <dcgettext@plt>
   12ba4:	ldr	r1, [r5]
   12ba8:	bl	11558 <fputs@plt>
   12bac:	mov	r2, #5
   12bb0:	ldr	r1, [pc, #200]	; 12c80 <__assert_fail@plt+0x16e0>
   12bb4:	mov	r0, r4
   12bb8:	bl	11288 <dcgettext@plt>
   12bbc:	ldr	r1, [r5]
   12bc0:	bl	11558 <fputs@plt>
   12bc4:	mov	r2, #5
   12bc8:	ldr	r1, [pc, #180]	; 12c84 <__assert_fail@plt+0x16e4>
   12bcc:	mov	r0, r4
   12bd0:	bl	11288 <dcgettext@plt>
   12bd4:	ldr	r1, [r5]
   12bd8:	bl	11558 <fputs@plt>
   12bdc:	mov	r2, #5
   12be0:	ldr	r1, [pc, #160]	; 12c88 <__assert_fail@plt+0x16e8>
   12be4:	mov	r0, r4
   12be8:	bl	11288 <dcgettext@plt>
   12bec:	ldr	r1, [r5]
   12bf0:	bl	11558 <fputs@plt>
   12bf4:	mov	r2, #5
   12bf8:	ldr	r1, [pc, #140]	; 12c8c <__assert_fail@plt+0x16ec>
   12bfc:	mov	r0, r4
   12c00:	bl	11288 <dcgettext@plt>
   12c04:	ldr	r1, [r5]
   12c08:	bl	11558 <fputs@plt>
   12c0c:	ldr	r1, [r6]
   12c10:	ldr	r0, [r5]
   12c14:	bl	157c0 <__assert_fail@plt+0x4220>
   12c18:	mov	r0, r4
   12c1c:	bl	113d8 <exit@plt>
   12c20:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   12c24:	andeq	sp, r1, r4, lsl #22
   12c28:			; <UNDEFINED> instruction: 0x000302b4
   12c2c:	ldrdeq	r0, [r3], -ip
   12c30:	andeq	sp, r1, ip, lsr #22
   12c34:	andeq	sp, r1, r0, ror #22
   12c38:			; <UNDEFINED> instruction: 0x0001dbb0
   12c3c:	andeq	sp, r1, r8, lsr #24
   12c40:	strdeq	sp, [r1], -ip
   12c44:	andeq	sp, r1, ip, asr #26
   12c48:	andeq	sp, r1, r8, lsr lr
   12c4c:	andeq	sp, r1, ip, lsl pc
   12c50:			; <UNDEFINED> instruction: 0x0001dfb4
   12c54:	andeq	sp, r1, r8, ror #31
   12c58:	strheq	lr, [r1], -ip
   12c5c:	andeq	lr, r1, ip, lsr r1
   12c60:	ldrdeq	lr, [r1], -ip
   12c64:	andeq	lr, r1, ip, lsr #4
   12c68:	andeq	lr, r1, r4, lsl #6
   12c6c:	andeq	lr, r1, r0, asr r3
   12c70:	muleq	r1, r0, r3
   12c74:	andeq	lr, r1, r0, ror #7
   12c78:			; <UNDEFINED> instruction: 0x0001e4b8
   12c7c:	andeq	lr, r1, r4, lsl #10
   12c80:	andeq	lr, r1, r8, asr #10
   12c84:	muleq	r1, r0, r5
   12c88:	ldrdeq	lr, [r1], -r8
   12c8c:	andeq	lr, r1, r4, lsl r6
   12c90:	push	{r4, r5, r6, r7, lr}
   12c94:	sub	sp, sp, #20
   12c98:	mov	r7, r1
   12c9c:	mov	r5, r2
   12ca0:	add	r1, sp, #12
   12ca4:	mov	r2, #10
   12ca8:	mov	r4, r3
   12cac:	mov	r6, r0
   12cb0:	bl	111ec <strtol@plt>
   12cb4:	ldr	r3, [sp, #12]
   12cb8:	cmp	r6, r3
   12cbc:	beq	12d88 <__assert_fail@plt+0x17e8>
   12cc0:	ldrb	r3, [r3]
   12cc4:	cmp	r3, #0
   12cc8:	bne	12d88 <__assert_fail@plt+0x17e8>
   12ccc:	cmp	r0, r5
   12cd0:	blt	12d38 <__assert_fail@plt+0x1798>
   12cd4:	cmp	r4, #0
   12cd8:	cmpge	r0, r4
   12cdc:	bgt	12ce8 <__assert_fail@plt+0x1748>
   12ce0:	add	sp, sp, #20
   12ce4:	pop	{r4, r5, r6, r7, pc}
   12ce8:	ldr	ip, [pc, #212]	; 12dc4 <__assert_fail@plt+0x1824>
   12cec:	mov	r0, r3
   12cf0:	mov	r2, #5
   12cf4:	ldr	r1, [pc, #204]	; 12dc8 <__assert_fail@plt+0x1828>
   12cf8:	ldr	r5, [ip]
   12cfc:	bl	11288 <dcgettext@plt>
   12d00:	ldr	r3, [pc, #196]	; 12dcc <__assert_fail@plt+0x182c>
   12d04:	str	r4, [sp, #4]
   12d08:	str	r7, [sp]
   12d0c:	ldr	r2, [r3]
   12d10:	mov	r3, r6
   12d14:	mov	r1, r0
   12d18:	mov	r0, r5
   12d1c:	bl	11414 <fprintf@plt>
   12d20:	ldr	r3, [sp, #40]	; 0x28
   12d24:	cmp	r3, #0
   12d28:	bne	12d80 <__assert_fail@plt+0x17e0>
   12d2c:	mov	r0, r4
   12d30:	add	sp, sp, #20
   12d34:	pop	{r4, r5, r6, r7, pc}
   12d38:	ldr	ip, [pc, #132]	; 12dc4 <__assert_fail@plt+0x1824>
   12d3c:	mov	r0, r3
   12d40:	mov	r2, #5
   12d44:	ldr	r1, [pc, #132]	; 12dd0 <__assert_fail@plt+0x1830>
   12d48:	ldr	r4, [ip]
   12d4c:	bl	11288 <dcgettext@plt>
   12d50:	ldr	r3, [pc, #116]	; 12dcc <__assert_fail@plt+0x182c>
   12d54:	str	r5, [sp, #4]
   12d58:	str	r7, [sp]
   12d5c:	ldr	r2, [r3]
   12d60:	mov	r3, r6
   12d64:	mov	r1, r0
   12d68:	mov	r0, r4
   12d6c:	bl	11414 <fprintf@plt>
   12d70:	ldr	r3, [sp, #40]	; 0x28
   12d74:	cmp	r3, #0
   12d78:	moveq	r0, r5
   12d7c:	beq	12ce0 <__assert_fail@plt+0x1740>
   12d80:	mov	r0, #1
   12d84:	bl	1297c <__assert_fail@plt+0x13dc>
   12d88:	ldr	r3, [pc, #52]	; 12dc4 <__assert_fail@plt+0x1824>
   12d8c:	mov	r2, #5
   12d90:	ldr	r1, [pc, #60]	; 12dd4 <__assert_fail@plt+0x1834>
   12d94:	mov	r0, #0
   12d98:	ldr	r4, [r3]
   12d9c:	bl	11288 <dcgettext@plt>
   12da0:	ldr	r2, [pc, #36]	; 12dcc <__assert_fail@plt+0x182c>
   12da4:	str	r7, [sp]
   12da8:	mov	r3, r6
   12dac:	ldr	r2, [r2]
   12db0:	mov	r1, r0
   12db4:	mov	r0, r4
   12db8:	bl	11414 <fprintf@plt>
   12dbc:	mov	r0, #1
   12dc0:	bl	1297c <__assert_fail@plt+0x13dc>
   12dc4:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   12dc8:			; <UNDEFINED> instruction: 0x0001e6b4
   12dcc:			; <UNDEFINED> instruction: 0x000302b4
   12dd0:	andeq	lr, r1, r4, lsl #13
   12dd4:	andeq	lr, r1, ip, asr r6
   12dd8:	ldr	r0, [pc, #64]	; 12e20 <__assert_fail@plt+0x1880>
   12ddc:	ldr	r3, [r0, #28]
   12de0:	cmp	r3, #0
   12de4:	bxne	lr
   12de8:	ldr	r3, [pc, #52]	; 12e24 <__assert_fail@plt+0x1884>
   12dec:	ldrb	r3, [r3, #4]
   12df0:	cmp	r3, #0
   12df4:	bxne	lr
   12df8:	ldr	r2, [r0, #48]	; 0x30
   12dfc:	ldr	r3, [r0, #32]
   12e00:	cmp	r2, r3
   12e04:	bxeq	lr
   12e08:	ldr	r3, [r0, #4]
   12e0c:	cmp	r3, #0
   12e10:	bxne	lr
   12e14:	add	r1, r0, #48	; 0x30
   12e18:	add	r0, r0, #4
   12e1c:	b	148b8 <__assert_fail@plt+0x3318>
   12e20:	andeq	r0, r3, r8, ror #3
   12e24:	andeq	r0, r3, r8, ror #2
   12e28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e2c:	sub	sp, sp, #28
   12e30:	ldr	r5, [pc, #548]	; 1305c <__assert_fail@plt+0x1abc>
   12e34:	ldr	r3, [r5, #92]	; 0x5c
   12e38:	cmp	r3, #0
   12e3c:	beq	12e94 <__assert_fail@plt+0x18f4>
   12e40:	mov	r7, #0
   12e44:	ldr	fp, [pc, #532]	; 13060 <__assert_fail@plt+0x1ac0>
   12e48:	mov	r9, r0
   12e4c:	mov	r8, r7
   12e50:	mvn	r6, #0
   12e54:	mov	sl, #5
   12e58:	cmp	r9, r7
   12e5c:	movhi	r4, #0
   12e60:	movls	r4, #1
   12e64:	str	r8, [r5]
   12e68:	mov	r2, r4
   12e6c:	add	r1, sp, #20
   12e70:	mov	r0, r6
   12e74:	bl	11318 <waitpid@plt>
   12e78:	cmn	r0, #1
   12e7c:	mov	ip, r0
   12e80:	beq	12f84 <__assert_fail@plt+0x19e4>
   12e84:	cmp	r0, #0
   12e88:	bne	12e9c <__assert_fail@plt+0x18fc>
   12e8c:	cmp	r4, #0
   12e90:	beq	1300c <__assert_fail@plt+0x1a6c>
   12e94:	add	sp, sp, #28
   12e98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e9c:	ldr	lr, [r5, #96]	; 0x60
   12ea0:	cmp	lr, #0
   12ea4:	beq	12e68 <__assert_fail@plt+0x18c8>
   12ea8:	ldr	r1, [r5, #100]	; 0x64
   12eac:	ldr	r3, [r1]
   12eb0:	cmp	r0, r3
   12eb4:	beq	12ee0 <__assert_fail@plt+0x1940>
   12eb8:	add	r2, r1, #4
   12ebc:	mov	r3, #0
   12ec0:	add	r3, r3, #1
   12ec4:	cmp	r3, lr
   12ec8:	beq	12e68 <__assert_fail@plt+0x18c8>
   12ecc:	mov	r1, r2
   12ed0:	add	r2, r2, #4
   12ed4:	ldr	r0, [r1]
   12ed8:	cmp	ip, r0
   12edc:	bne	12ec0 <__assert_fail@plt+0x1920>
   12ee0:	str	r8, [r1]
   12ee4:	ldr	r1, [sp, #20]
   12ee8:	ldr	r3, [r5, #92]	; 0x5c
   12eec:	add	r7, r7, #1
   12ef0:	asr	r2, r1, #8
   12ef4:	sub	r3, r3, #1
   12ef8:	uxtb	r2, r2
   12efc:	cmp	r2, #255	; 0xff
   12f00:	str	r3, [r5, #92]	; 0x5c
   12f04:	beq	12fdc <__assert_fail@plt+0x1a3c>
   12f08:	uxtb	r3, r1
   12f0c:	cmp	r3, #127	; 0x7f
   12f10:	beq	12fa4 <__assert_fail@plt+0x1a04>
   12f14:	and	r3, r1, #127	; 0x7f
   12f18:	add	r3, r3, #1
   12f1c:	sxtb	r3, r3
   12f20:	cmp	r3, #1
   12f24:	ble	12f60 <__assert_fail@plt+0x19c0>
   12f28:	mov	r2, sl
   12f2c:	mov	r1, fp
   12f30:	mov	r0, r8
   12f34:	bl	11288 <dcgettext@plt>
   12f38:	ldr	r3, [r5, #52]	; 0x34
   12f3c:	ldr	r2, [sp, #20]
   12f40:	mov	r1, r8
   12f44:	and	r2, r2, #127	; 0x7f
   12f48:	ldr	r3, [r3]
   12f4c:	str	r2, [sp]
   12f50:	mov	r2, r0
   12f54:	mov	r0, #125	; 0x7d
   12f58:	bl	11354 <error@plt>
   12f5c:	ldr	r1, [sp, #20]
   12f60:	asr	r1, r1, #8
   12f64:	tst	r1, #255	; 0xff
   12f68:	movne	r3, #123	; 0x7b
   12f6c:	strne	r3, [r5, #104]	; 0x68
   12f70:	ldr	r3, [r5, #92]	; 0x5c
   12f74:	cmp	r3, #0
   12f78:	bne	12e58 <__assert_fail@plt+0x18b8>
   12f7c:	add	sp, sp, #28
   12f80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f84:	bl	11420 <__errno_location@plt>
   12f88:	ldr	r3, [r0]
   12f8c:	cmp	r3, #4
   12f90:	bne	13034 <__assert_fail@plt+0x1a94>
   12f94:	ldr	r3, [r5]
   12f98:	cmp	r3, #0
   12f9c:	movne	r4, #1
   12fa0:	b	12e68 <__assert_fail@plt+0x18c8>
   12fa4:	mov	r2, sl
   12fa8:	ldr	r1, [pc, #180]	; 13064 <__assert_fail@plt+0x1ac4>
   12fac:	mov	r0, r8
   12fb0:	bl	11288 <dcgettext@plt>
   12fb4:	ldrb	r2, [sp, #21]
   12fb8:	ldr	r3, [r5, #52]	; 0x34
   12fbc:	mov	r1, r8
   12fc0:	ldr	r3, [r3]
   12fc4:	str	r2, [sp]
   12fc8:	mov	r2, r0
   12fcc:	mov	r0, #125	; 0x7d
   12fd0:	bl	11354 <error@plt>
   12fd4:	ldr	r1, [sp, #20]
   12fd8:	b	12f14 <__assert_fail@plt+0x1974>
   12fdc:	mov	r2, sl
   12fe0:	ldr	r1, [pc, #128]	; 13068 <__assert_fail@plt+0x1ac8>
   12fe4:	mov	r0, r8
   12fe8:	bl	11288 <dcgettext@plt>
   12fec:	ldr	r3, [r5, #52]	; 0x34
   12ff0:	mov	r1, r8
   12ff4:	ldr	r3, [r3]
   12ff8:	mov	r2, r0
   12ffc:	mov	r0, #124	; 0x7c
   13000:	bl	11354 <error@plt>
   13004:	ldr	r1, [sp, #20]
   13008:	b	12f08 <__assert_fail@plt+0x1968>
   1300c:	mov	r2, #5
   13010:	ldr	r1, [pc, #84]	; 1306c <__assert_fail@plt+0x1acc>
   13014:	bl	11288 <dcgettext@plt>
   13018:	ldr	r3, [r5, #92]	; 0x5c
   1301c:	mov	r1, r4
   13020:	mov	r2, r0
   13024:	mov	r0, r4
   13028:	bl	11354 <error@plt>
   1302c:	add	sp, sp, #28
   13030:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13034:	mov	r2, #5
   13038:	ldr	r1, [pc, #48]	; 13070 <__assert_fail@plt+0x1ad0>
   1303c:	mov	r0, #0
   13040:	str	r3, [sp, #12]
   13044:	bl	11288 <dcgettext@plt>
   13048:	ldr	r3, [sp, #12]
   1304c:	mov	r1, r3
   13050:	mov	r2, r0
   13054:	mov	r0, #1
   13058:	bl	11354 <error@plt>
   1305c:	andeq	r0, r3, r8, ror #3
   13060:	andeq	lr, r1, r4, ror r7
   13064:	andeq	lr, r1, r8, asr r7
   13068:	andeq	lr, r1, r0, lsr r7
   1306c:	andeq	lr, r1, r4, lsl #14
   13070:	andeq	lr, r1, r4, ror #13
   13074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13078:	sub	sp, sp, #20
   1307c:	bl	113cc <getpid@plt>
   13080:	ldr	r5, [pc, #576]	; 132c8 <__assert_fail@plt+0x1d28>
   13084:	ldr	r3, [r5, #108]	; 0x6c
   13088:	cmp	r0, r3
   1308c:	bne	13294 <__assert_fail@plt+0x1cf4>
   13090:	ldrb	r6, [r5, #112]	; 0x70
   13094:	cmp	r6, #0
   13098:	beq	130a4 <__assert_fail@plt+0x1b04>
   1309c:	add	sp, sp, #20
   130a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130a4:	ldr	r2, [r5, #92]	; 0x5c
   130a8:	mov	r3, #1
   130ac:	cmp	r2, #0
   130b0:	strb	r3, [r5, #112]	; 0x70
   130b4:	beq	13114 <__assert_fail@plt+0x1b74>
   130b8:	ldr	fp, [pc, #524]	; 132cc <__assert_fail@plt+0x1d2c>
   130bc:	ldr	sl, [pc, #524]	; 132d0 <__assert_fail@plt+0x1d30>
   130c0:	ldr	r9, [pc, #524]	; 132d4 <__assert_fail@plt+0x1d34>
   130c4:	mvn	r7, #0
   130c8:	mov	r8, #5
   130cc:	str	r6, [r5]
   130d0:	mov	r2, r6
   130d4:	add	r1, sp, #12
   130d8:	mov	r0, r7
   130dc:	bl	11318 <waitpid@plt>
   130e0:	cmn	r0, #1
   130e4:	mov	r4, r0
   130e8:	beq	13214 <__assert_fail@plt+0x1c74>
   130ec:	cmp	r0, #0
   130f0:	bne	13134 <__assert_fail@plt+0x1b94>
   130f4:	mov	r2, #5
   130f8:	ldr	r1, [pc, #472]	; 132d8 <__assert_fail@plt+0x1d38>
   130fc:	bl	11288 <dcgettext@plt>
   13100:	ldr	r3, [r5, #92]	; 0x5c
   13104:	mov	r1, r4
   13108:	mov	r2, r0
   1310c:	mov	r0, r4
   13110:	bl	11354 <error@plt>
   13114:	ldr	r1, [r5, #116]	; 0x74
   13118:	ldr	r2, [r5, #104]	; 0x68
   1311c:	mov	r3, #0
   13120:	cmp	r1, r2
   13124:	strb	r3, [r5, #112]	; 0x70
   13128:	beq	1309c <__assert_fail@plt+0x1afc>
   1312c:	ldr	r0, [r5, #104]	; 0x68
   13130:	bl	11240 <_exit@plt>
   13134:	ldr	ip, [r5, #96]	; 0x60
   13138:	cmp	ip, #0
   1313c:	beq	130d0 <__assert_fail@plt+0x1b30>
   13140:	ldr	r1, [r5, #100]	; 0x64
   13144:	ldr	r3, [r1]
   13148:	cmp	r0, r3
   1314c:	beq	13178 <__assert_fail@plt+0x1bd8>
   13150:	add	r2, r1, #4
   13154:	mov	r3, #0
   13158:	add	r3, r3, #1
   1315c:	cmp	r3, ip
   13160:	beq	130d0 <__assert_fail@plt+0x1b30>
   13164:	mov	r1, r2
   13168:	add	r2, r2, #4
   1316c:	ldr	r0, [r1]
   13170:	cmp	r4, r0
   13174:	bne	13158 <__assert_fail@plt+0x1bb8>
   13178:	str	r6, [r1]
   1317c:	ldr	r1, [sp, #12]
   13180:	ldr	r3, [r5, #92]	; 0x5c
   13184:	asr	r2, r1, #8
   13188:	sub	r3, r3, #1
   1318c:	uxtb	r2, r2
   13190:	cmp	r2, #255	; 0xff
   13194:	str	r3, [r5, #92]	; 0x5c
   13198:	beq	13264 <__assert_fail@plt+0x1cc4>
   1319c:	uxtb	r3, r1
   131a0:	cmp	r3, #127	; 0x7f
   131a4:	beq	1322c <__assert_fail@plt+0x1c8c>
   131a8:	and	r3, r1, #127	; 0x7f
   131ac:	add	r3, r3, #1
   131b0:	sxtb	r3, r3
   131b4:	cmp	r3, #1
   131b8:	ble	131f4 <__assert_fail@plt+0x1c54>
   131bc:	mov	r2, r8
   131c0:	mov	r1, r9
   131c4:	mov	r0, r6
   131c8:	bl	11288 <dcgettext@plt>
   131cc:	ldr	r3, [r5, #52]	; 0x34
   131d0:	ldr	r2, [sp, #12]
   131d4:	mov	r1, r6
   131d8:	and	r2, r2, #127	; 0x7f
   131dc:	ldr	r3, [r3]
   131e0:	str	r2, [sp]
   131e4:	mov	r2, r0
   131e8:	mov	r0, #125	; 0x7d
   131ec:	bl	11354 <error@plt>
   131f0:	ldr	r1, [sp, #12]
   131f4:	asr	r1, r1, #8
   131f8:	tst	r1, #255	; 0xff
   131fc:	movne	r3, #123	; 0x7b
   13200:	strne	r3, [r5, #104]	; 0x68
   13204:	ldr	r3, [r5, #92]	; 0x5c
   13208:	cmp	r3, #0
   1320c:	bne	130cc <__assert_fail@plt+0x1b2c>
   13210:	b	13114 <__assert_fail@plt+0x1b74>
   13214:	bl	11420 <__errno_location@plt>
   13218:	ldr	r4, [r0]
   1321c:	cmp	r4, #4
   13220:	bne	132a8 <__assert_fail@plt+0x1d08>
   13224:	ldr	r3, [r5]
   13228:	b	130d0 <__assert_fail@plt+0x1b30>
   1322c:	mov	r2, r8
   13230:	mov	r1, sl
   13234:	mov	r0, r6
   13238:	bl	11288 <dcgettext@plt>
   1323c:	ldrb	r2, [sp, #13]
   13240:	ldr	r3, [r5, #52]	; 0x34
   13244:	mov	r1, r6
   13248:	ldr	r3, [r3]
   1324c:	str	r2, [sp]
   13250:	mov	r2, r0
   13254:	mov	r0, #125	; 0x7d
   13258:	bl	11354 <error@plt>
   1325c:	ldr	r1, [sp, #12]
   13260:	b	131a8 <__assert_fail@plt+0x1c08>
   13264:	mov	r2, r8
   13268:	mov	r1, fp
   1326c:	mov	r0, r6
   13270:	bl	11288 <dcgettext@plt>
   13274:	ldr	r3, [r5, #52]	; 0x34
   13278:	mov	r1, r6
   1327c:	ldr	r3, [r3]
   13280:	mov	r2, r0
   13284:	mov	r0, #124	; 0x7c
   13288:	bl	11354 <error@plt>
   1328c:	ldr	r1, [sp, #12]
   13290:	b	1319c <__assert_fail@plt+0x1bfc>
   13294:	ldr	r3, [pc, #64]	; 132dc <__assert_fail@plt+0x1d3c>
   13298:	ldr	r2, [pc, #64]	; 132e0 <__assert_fail@plt+0x1d40>
   1329c:	ldr	r1, [pc, #64]	; 132e4 <__assert_fail@plt+0x1d44>
   132a0:	ldr	r0, [pc, #64]	; 132e8 <__assert_fail@plt+0x1d48>
   132a4:	bl	115a0 <__assert_fail@plt>
   132a8:	mov	r2, #5
   132ac:	ldr	r1, [pc, #56]	; 132ec <__assert_fail@plt+0x1d4c>
   132b0:	mov	r0, #0
   132b4:	bl	11288 <dcgettext@plt>
   132b8:	mov	r1, r4
   132bc:	mov	r2, r0
   132c0:	mov	r0, #1
   132c4:	bl	11354 <error@plt>
   132c8:	andeq	r0, r3, r8, ror #3
   132cc:	andeq	lr, r1, r0, lsr r7
   132d0:	andeq	lr, r1, r8, asr r7
   132d4:	andeq	lr, r1, r4, ror r7
   132d8:	andeq	lr, r1, r4, lsl #14
   132dc:	andeq	sp, r1, r8, lsr #18
   132e0:	andeq	r0, r0, r5, asr #12
   132e4:	muleq	r1, r0, r7
   132e8:	muleq	r1, r8, r7
   132ec:	andeq	lr, r1, r4, ror #13
   132f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132f4:	sub	sp, sp, #44	; 0x2c
   132f8:	ldr	r5, [pc, #1976]	; 13ab8 <__assert_fail@plt+0x2518>
   132fc:	str	r3, [sp]
   13300:	ldr	r4, [pc, #1972]	; 13abc <__assert_fail@plt+0x251c>
   13304:	ldr	r3, [r5]
   13308:	cmp	r3, #0
   1330c:	beq	1333c <__assert_fail@plt+0x1d9c>
   13310:	ldr	r2, [r5]
   13314:	ldr	r3, [r4, #92]	; 0x5c
   13318:	cmp	r2, r3
   1331c:	bhi	1333c <__assert_fail@plt+0x1d9c>
   13320:	mov	r6, #1
   13324:	mov	r0, r6
   13328:	bl	12e28 <__assert_fail@plt+0x1888>
   1332c:	ldr	r3, [r5]
   13330:	ldr	r2, [r4, #92]	; 0x5c
   13334:	cmp	r2, r3
   13338:	bcs	13324 <__assert_fail@plt+0x1d84>
   1333c:	ldrb	r3, [r4, #120]	; 0x78
   13340:	cmp	r3, #0
   13344:	bne	1362c <__assert_fail@plt+0x208c>
   13348:	ldrb	r3, [r4, #121]	; 0x79
   1334c:	cmp	r3, #0
   13350:	bne	13798 <__assert_fail@plt+0x21f8>
   13354:	mov	r0, #0
   13358:	bl	12e28 <__assert_fail@plt+0x1888>
   1335c:	add	r0, sp, #12
   13360:	bl	1b4ac <__assert_fail@plt+0x9f0c>
   13364:	subs	r7, r0, #0
   13368:	bne	13a84 <__assert_fail@plt+0x24e4>
   1336c:	mov	r2, #1
   13370:	mov	r1, #2
   13374:	ldr	r0, [sp, #16]
   13378:	bl	1cb14 <__assert_fail@plt+0xb574>
   1337c:	mov	r6, #1
   13380:	b	133a8 <__assert_fail@plt+0x1e08>
   13384:	bl	11420 <__errno_location@plt>
   13388:	ldr	r3, [r0]
   1338c:	cmp	r3, #11
   13390:	bne	133b4 <__assert_fail@plt+0x1e14>
   13394:	ldr	r3, [r4, #92]	; 0x5c
   13398:	cmp	r3, #0
   1339c:	beq	133b4 <__assert_fail@plt+0x1e14>
   133a0:	mov	r0, r6
   133a4:	bl	12e28 <__assert_fail@plt+0x1888>
   133a8:	bl	114d4 <fork@plt>
   133ac:	subs	r5, r0, #0
   133b0:	blt	13384 <__assert_fail@plt+0x1de4>
   133b4:	cmn	r5, #1
   133b8:	beq	13604 <__assert_fail@plt+0x2064>
   133bc:	cmp	r5, #0
   133c0:	bne	135a4 <__assert_fail@plt+0x2004>
   133c4:	ldr	r0, [sp, #12]
   133c8:	bl	11588 <close@plt>
   133cc:	str	r5, [r4, #104]	; 0x68
   133d0:	bl	154fc <__assert_fail@plt+0x3f5c>
   133d4:	cmp	r0, #0
   133d8:	bne	1383c <__assert_fail@plt+0x229c>
   133dc:	ldr	r5, [r4, #96]	; 0x60
   133e0:	ldr	r0, [r4, #100]	; 0x64
   133e4:	cmp	r5, #0
   133e8:	moveq	r3, r5
   133ec:	beq	1342c <__assert_fail@plt+0x1e8c>
   133f0:	ldr	r3, [r0]
   133f4:	cmp	r3, #0
   133f8:	beq	13a20 <__assert_fail@plt+0x2480>
   133fc:	add	r2, r0, #4
   13400:	mov	r3, #0
   13404:	b	1341c <__assert_fail@plt+0x1e7c>
   13408:	mov	r1, r2
   1340c:	add	r2, r2, #4
   13410:	ldr	ip, [r1]
   13414:	cmp	ip, #0
   13418:	beq	13488 <__assert_fail@plt+0x1ee8>
   1341c:	add	r3, r3, #1
   13420:	cmp	r3, r5
   13424:	bne	13408 <__assert_fail@plt+0x1e68>
   13428:	lsl	r5, r3, #2
   1342c:	mov	r2, #4
   13430:	ldr	r1, [pc, #1672]	; 13ac0 <__assert_fail@plt+0x2520>
   13434:	str	r3, [sp, #4]
   13438:	bl	1c020 <__assert_fail@plt+0xaa80>
   1343c:	ldr	r2, [r4, #96]	; 0x60
   13440:	ldr	r3, [sp, #4]
   13444:	cmp	r2, r3
   13448:	str	r0, [r4, #100]	; 0x64
   1344c:	addls	r1, r0, r5
   13450:	ldrls	r2, [r0, r5]
   13454:	bls	13480 <__assert_fail@plt+0x1ee0>
   13458:	add	r1, r0, r3, lsl #2
   1345c:	mov	r2, r3
   13460:	mov	lr, #0
   13464:	str	lr, [r1], #4
   13468:	ldr	ip, [r4, #96]	; 0x60
   1346c:	add	r2, r2, #1
   13470:	cmp	r2, ip
   13474:	bcc	13464 <__assert_fail@plt+0x1ec4>
   13478:	ldr	r2, [r0, r5]
   1347c:	add	r1, r0, r5
   13480:	cmp	r2, #0
   13484:	bne	138e4 <__assert_fail@plt+0x2344>
   13488:	ldr	ip, [r4, #92]	; 0x5c
   1348c:	mov	r6, #0
   13490:	add	ip, ip, #1
   13494:	str	r6, [r1]
   13498:	add	r0, sp, #20
   1349c:	mov	r5, #1
   134a0:	ldr	r2, [pc, #1564]	; 13ac4 <__assert_fail@plt+0x2524>
   134a4:	mov	r1, #19
   134a8:	str	ip, [r4, #92]	; 0x5c
   134ac:	strb	r5, [r4, #128]	; 0x80
   134b0:	bl	1142c <snprintf@plt>
   134b4:	cmp	r0, #19
   134b8:	bhi	13aa4 <__assert_fail@plt+0x2504>
   134bc:	ldr	r7, [r4, #132]	; 0x84
   134c0:	cmp	r7, #0
   134c4:	beq	134e0 <__assert_fail@plt+0x1f40>
   134c8:	mov	r2, r5
   134cc:	add	r1, sp, #20
   134d0:	mov	r0, r7
   134d4:	bl	11408 <setenv@plt>
   134d8:	cmp	r0, #0
   134dc:	blt	13980 <__assert_fail@plt+0x23e0>
   134e0:	bl	11420 <__errno_location@plt>
   134e4:	mov	r5, r0
   134e8:	ldr	r3, [r4, #136]	; 0x88
   134ec:	cmp	r3, #0
   134f0:	bne	13724 <__assert_fail@plt+0x2184>
   134f4:	ldrb	r2, [r4, #140]	; 0x8c
   134f8:	ldr	r3, [pc, #1480]	; 13ac8 <__assert_fail@plt+0x2528>
   134fc:	ldr	r6, [pc, #1480]	; 13acc <__assert_fail@plt+0x252c>
   13500:	cmp	r2, #0
   13504:	movne	r6, r3
   13508:	mov	r0, #0
   1350c:	bl	11588 <close@plt>
   13510:	mov	r1, #0
   13514:	mov	r0, r6
   13518:	bl	15d88 <__assert_fail@plt+0x47e8>
   1351c:	subs	r7, r0, #0
   13520:	blt	13948 <__assert_fail@plt+0x23a8>
   13524:	beq	13540 <__assert_fail@plt+0x1fa0>
   13528:	mov	r1, #0
   1352c:	bl	112a0 <dup2@plt>
   13530:	cmp	r0, #0
   13534:	bne	13a74 <__assert_fail@plt+0x24d4>
   13538:	mov	r0, r7
   1353c:	bl	11588 <close@plt>
   13540:	ldr	r0, [sp]
   13544:	bl	14df8 <__assert_fail@plt+0x3858>
   13548:	cmp	r0, #0
   1354c:	beq	1381c <__assert_fail@plt+0x227c>
   13550:	mov	r3, #7
   13554:	str	r3, [r5]
   13558:	mov	r2, #4
   1355c:	mov	r1, r5
   13560:	ldr	r0, [sp, #16]
   13564:	bl	1145c <write@plt>
   13568:	ldr	r0, [sp, #16]
   1356c:	bl	11588 <close@plt>
   13570:	ldr	r1, [r5]
   13574:	cmp	r1, #7
   13578:	beq	13790 <__assert_fail@plt+0x21f0>
   1357c:	ldr	r3, [sp]
   13580:	mov	r0, #0
   13584:	ldr	r2, [pc, #1348]	; 13ad0 <__assert_fail@plt+0x2530>
   13588:	ldr	r3, [r3]
   1358c:	bl	11354 <error@plt>
   13590:	ldr	r3, [r5]
   13594:	cmp	r3, #2
   13598:	moveq	r0, #127	; 0x7f
   1359c:	bne	13790 <__assert_fail@plt+0x21f0>
   135a0:	bl	11240 <_exit@plt>
   135a4:	ldr	r0, [sp, #16]
   135a8:	bl	11588 <close@plt>
   135ac:	mov	r2, #4
   135b0:	add	r1, sp, #8
   135b4:	ldr	r0, [sp, #12]
   135b8:	bl	1b3dc <__assert_fail@plt+0x9e3c>
   135bc:	cmp	r0, #4
   135c0:	mov	r6, r0
   135c4:	beq	138f8 <__assert_fail@plt+0x2358>
   135c8:	cmn	r0, #1
   135cc:	beq	13748 <__assert_fail@plt+0x21a8>
   135d0:	cmp	r0, #0
   135d4:	beq	13844 <__assert_fail@plt+0x22a4>
   135d8:	bl	11420 <__errno_location@plt>
   135dc:	mov	r2, #5
   135e0:	ldr	r1, [pc, #1260]	; 13ad4 <__assert_fail@plt+0x2534>
   135e4:	ldr	r4, [r0]
   135e8:	mov	r0, #0
   135ec:	bl	11288 <dcgettext@plt>
   135f0:	mov	r3, r6
   135f4:	mov	r1, r4
   135f8:	mov	r2, r0
   135fc:	mov	r0, #1
   13600:	bl	11354 <error@plt>
   13604:	bl	11420 <__errno_location@plt>
   13608:	ldr	r1, [pc, #1224]	; 13ad8 <__assert_fail@plt+0x2538>
   1360c:	mov	r2, #5
   13610:	ldr	r4, [r0]
   13614:	mov	r0, #0
   13618:	bl	11288 <dcgettext@plt>
   1361c:	mov	r1, r4
   13620:	mov	r2, r0
   13624:	mov	r0, #1
   13628:	bl	11354 <error@plt>
   1362c:	ldr	r3, [r4, #48]	; 0x30
   13630:	cmp	r3, #1
   13634:	beq	136a0 <__assert_fail@plt+0x2100>
   13638:	ldr	r8, [pc, #1180]	; 13adc <__assert_fail@plt+0x253c>
   1363c:	ldr	fp, [pc, #1180]	; 13ae0 <__assert_fail@plt+0x2540>
   13640:	ldr	sl, [pc, #1180]	; 13ae4 <__assert_fail@plt+0x2544>
   13644:	ldr	r9, [pc, #1180]	; 13ae8 <__assert_fail@plt+0x2548>
   13648:	mov	r5, #0
   1364c:	ldr	r3, [r4, #52]	; 0x34
   13650:	cmp	r5, #0
   13654:	mov	r1, #3
   13658:	ldr	r2, [r3, r5, lsl #2]
   1365c:	mov	r0, #0
   13660:	movne	r7, fp
   13664:	moveq	r7, sl
   13668:	ldr	r6, [r8]
   1366c:	bl	1950c <__assert_fail@plt+0x7f6c>
   13670:	mov	r2, r7
   13674:	mov	r1, r9
   13678:	mov	r3, r0
   1367c:	mov	r0, r6
   13680:	bl	11414 <fprintf@plt>
   13684:	cmp	r0, #0
   13688:	blt	13a3c <__assert_fail@plt+0x249c>
   1368c:	ldr	r3, [r4, #48]	; 0x30
   13690:	add	r5, r5, #1
   13694:	sub	r3, r3, #1
   13698:	cmp	r5, r3
   1369c:	bcc	1364c <__assert_fail@plt+0x20ac>
   136a0:	ldr	r1, [r4, #124]	; 0x7c
   136a4:	cmp	r1, #0
   136a8:	beq	139bc <__assert_fail@plt+0x241c>
   136ac:	ldr	r8, [pc, #1064]	; 13adc <__assert_fail@plt+0x253c>
   136b0:	mov	r2, #4
   136b4:	mov	r1, #1
   136b8:	ldr	r3, [r8]
   136bc:	ldr	r0, [pc, #1064]	; 13aec <__assert_fail@plt+0x254c>
   136c0:	bl	11300 <fwrite@plt>
   136c4:	ldr	r0, [r8]
   136c8:	bl	1cce8 <__assert_fail@plt+0xb748>
   136cc:	cmp	r0, #0
   136d0:	bne	13a3c <__assert_fail@plt+0x249c>
   136d4:	ldr	r0, [r4, #124]	; 0x7c
   136d8:	bl	1157c <getc@plt>
   136dc:	cmp	r0, #10
   136e0:	cmnne	r0, #1
   136e4:	mov	r5, r0
   136e8:	beq	13700 <__assert_fail@plt+0x2160>
   136ec:	ldr	r0, [r4, #124]	; 0x7c
   136f0:	bl	1157c <getc@plt>
   136f4:	cmp	r0, #10
   136f8:	cmnne	r0, #1
   136fc:	bne	136ec <__assert_fail@plt+0x214c>
   13700:	cmn	r0, #1
   13704:	beq	13a94 <__assert_fail@plt+0x24f4>
   13708:	bic	r5, r5, #32
   1370c:	cmp	r5, #89	; 0x59
   13710:	beq	13738 <__assert_fail@plt+0x2198>
   13714:	mov	r7, #1
   13718:	mov	r0, r7
   1371c:	add	sp, sp, #44	; 0x2c
   13720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13724:	ldrb	r3, [r4, #140]	; 0x8c
   13728:	cmp	r3, #0
   1372c:	beq	13540 <__assert_fail@plt+0x1fa0>
   13730:	ldr	r6, [pc, #912]	; 13ac8 <__assert_fail@plt+0x2528>
   13734:	b	13508 <__assert_fail@plt+0x1f68>
   13738:	ldrb	r3, [r4, #120]	; 0x78
   1373c:	cmp	r3, #0
   13740:	bne	13354 <__assert_fail@plt+0x1db4>
   13744:	b	13348 <__assert_fail@plt+0x1da8>
   13748:	ldr	r0, [sp, #12]
   1374c:	bl	11588 <close@plt>
   13750:	bl	11420 <__errno_location@plt>
   13754:	mov	r2, #5
   13758:	ldr	r1, [pc, #912]	; 13af0 <__assert_fail@plt+0x2550>
   1375c:	ldr	r4, [r0]
   13760:	mov	r0, #0
   13764:	bl	11288 <dcgettext@plt>
   13768:	mov	r1, r4
   1376c:	mov	r2, r0
   13770:	mov	r0, #0
   13774:	bl	11354 <error@plt>
   13778:	ldr	r0, [sp, #12]
   1377c:	bl	11588 <close@plt>
   13780:	mov	r7, #1
   13784:	mov	r0, r7
   13788:	add	sp, sp, #44	; 0x2c
   1378c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13790:	mov	r0, #126	; 0x7e
   13794:	b	135a0 <__assert_fail@plt+0x2000>
   13798:	ldr	r3, [r4, #48]	; 0x30
   1379c:	cmp	r3, #1
   137a0:	beq	13a28 <__assert_fail@plt+0x2488>
   137a4:	mov	r5, #0
   137a8:	ldr	r8, [pc, #812]	; 13adc <__assert_fail@plt+0x253c>
   137ac:	ldr	sl, [pc, #812]	; 13ae0 <__assert_fail@plt+0x2540>
   137b0:	ldr	r9, [pc, #812]	; 13ae4 <__assert_fail@plt+0x2544>
   137b4:	mov	fp, r5
   137b8:	ldr	r3, [r4, #52]	; 0x34
   137bc:	cmp	r5, #0
   137c0:	mov	r1, #3
   137c4:	ldr	r2, [r3, r5, lsl #2]
   137c8:	mov	r0, fp
   137cc:	movne	r7, sl
   137d0:	moveq	r7, r9
   137d4:	ldr	r6, [r8]
   137d8:	bl	1950c <__assert_fail@plt+0x7f6c>
   137dc:	mov	r2, r7
   137e0:	ldr	r1, [pc, #768]	; 13ae8 <__assert_fail@plt+0x2548>
   137e4:	mov	r3, r0
   137e8:	mov	r0, r6
   137ec:	bl	11414 <fprintf@plt>
   137f0:	cmp	r0, #0
   137f4:	blt	13a3c <__assert_fail@plt+0x249c>
   137f8:	ldr	r3, [r4, #48]	; 0x30
   137fc:	add	r5, r5, #1
   13800:	sub	r3, r3, #1
   13804:	cmp	r5, r3
   13808:	bcc	137b8 <__assert_fail@plt+0x2218>
   1380c:	ldr	r1, [r8]
   13810:	mov	r0, #10
   13814:	bl	1151c <putc@plt>
   13818:	b	13354 <__assert_fail@plt+0x1db4>
   1381c:	ldr	r3, [sp]
   13820:	mov	r1, r3
   13824:	ldr	r0, [r3]
   13828:	bl	11258 <execvp@plt>
   1382c:	ldr	r3, [r5]
   13830:	cmp	r3, #0
   13834:	beq	13568 <__assert_fail@plt+0x1fc8>
   13838:	b	13558 <__assert_fail@plt+0x1fb8>
   1383c:	bl	15518 <__assert_fail@plt+0x3f78>
   13840:	b	133dc <__assert_fail@plt+0x1e3c>
   13844:	ldr	r7, [r4, #96]	; 0x60
   13848:	ldr	r0, [r4, #100]	; 0x64
   1384c:	cmp	r7, #0
   13850:	moveq	r6, r7
   13854:	beq	13894 <__assert_fail@plt+0x22f4>
   13858:	ldr	r3, [r0]
   1385c:	cmp	r3, #0
   13860:	moveq	r2, r0
   13864:	beq	1392c <__assert_fail@plt+0x238c>
   13868:	add	r3, r0, #4
   1386c:	b	13884 <__assert_fail@plt+0x22e4>
   13870:	mov	r2, r3
   13874:	add	r3, r3, #4
   13878:	ldr	r1, [r2]
   1387c:	cmp	r1, #0
   13880:	beq	1392c <__assert_fail@plt+0x238c>
   13884:	add	r6, r6, #1
   13888:	cmp	r7, r6
   1388c:	bne	13870 <__assert_fail@plt+0x22d0>
   13890:	lsl	r7, r7, #2
   13894:	mov	r2, #4
   13898:	ldr	r1, [pc, #544]	; 13ac0 <__assert_fail@plt+0x2520>
   1389c:	bl	1c020 <__assert_fail@plt+0xaa80>
   138a0:	ldr	r3, [r4, #96]	; 0x60
   138a4:	cmp	r3, r6
   138a8:	str	r0, [r4, #100]	; 0x64
   138ac:	addls	r2, r0, r7
   138b0:	ldrls	r3, [r0, r7]
   138b4:	bls	138dc <__assert_fail@plt+0x233c>
   138b8:	add	r3, r0, r6, lsl #2
   138bc:	mov	r1, #0
   138c0:	str	r1, [r3], #4
   138c4:	ldr	r2, [r4, #96]	; 0x60
   138c8:	add	r6, r6, #1
   138cc:	cmp	r6, r2
   138d0:	bcc	138c0 <__assert_fail@plt+0x2320>
   138d4:	ldr	r3, [r0, r7]
   138d8:	add	r2, r0, r7
   138dc:	cmp	r3, #0
   138e0:	beq	1392c <__assert_fail@plt+0x238c>
   138e4:	ldr	r3, [pc, #520]	; 13af4 <__assert_fail@plt+0x2554>
   138e8:	ldr	r2, [pc, #520]	; 13af8 <__assert_fail@plt+0x2558>
   138ec:	ldr	r1, [pc, #520]	; 13afc <__assert_fail@plt+0x255c>
   138f0:	ldr	r0, [pc, #520]	; 13b00 <__assert_fail@plt+0x2560>
   138f4:	bl	115a0 <__assert_fail@plt>
   138f8:	ldr	r0, [sp, #12]
   138fc:	bl	11588 <close@plt>
   13900:	mov	r0, r5
   13904:	mov	r2, #0
   13908:	add	r1, sp, #20
   1390c:	bl	11318 <waitpid@plt>
   13910:	ldr	r3, [sp, #8]
   13914:	cmp	r3, #7
   13918:	beq	13718 <__assert_fail@plt+0x2178>
   1391c:	cmp	r3, #2
   13920:	beq	139b4 <__assert_fail@plt+0x2414>
   13924:	mov	r0, #126	; 0x7e
   13928:	bl	113d8 <exit@plt>
   1392c:	ldr	r3, [r4, #92]	; 0x5c
   13930:	mov	r1, #1
   13934:	add	r3, r3, r1
   13938:	str	r5, [r2]
   1393c:	str	r3, [r4, #92]	; 0x5c
   13940:	strb	r1, [r4, #128]	; 0x80
   13944:	b	13778 <__assert_fail@plt+0x21d8>
   13948:	ldrb	r4, [r4, #140]	; 0x8c
   1394c:	cmp	r4, #0
   13950:	bne	13a4c <__assert_fail@plt+0x24ac>
   13954:	mov	r2, r6
   13958:	mov	r1, #8
   1395c:	mov	r0, r4
   13960:	ldr	r7, [r5]
   13964:	bl	1950c <__assert_fail@plt+0x7f6c>
   13968:	mov	r1, r7
   1396c:	ldr	r2, [pc, #348]	; 13ad0 <__assert_fail@plt+0x2530>
   13970:	mov	r3, r0
   13974:	mov	r0, r4
   13978:	bl	11354 <error@plt>
   1397c:	b	13540 <__assert_fail@plt+0x1fa0>
   13980:	bl	11420 <__errno_location@plt>
   13984:	mov	r2, #5
   13988:	ldr	r1, [pc, #372]	; 13b04 <__assert_fail@plt+0x2564>
   1398c:	ldr	r8, [r0]
   13990:	mov	r5, r0
   13994:	mov	r0, r6
   13998:	bl	11288 <dcgettext@plt>
   1399c:	mov	r3, r7
   139a0:	mov	r1, r8
   139a4:	mov	r2, r0
   139a8:	mov	r0, r6
   139ac:	bl	11354 <error@plt>
   139b0:	b	134e8 <__assert_fail@plt+0x1f48>
   139b4:	mov	r0, #127	; 0x7f
   139b8:	bl	113d8 <exit@plt>
   139bc:	ldr	r0, [pc, #260]	; 13ac8 <__assert_fail@plt+0x2528>
   139c0:	bl	15420 <__assert_fail@plt+0x3e80>
   139c4:	subs	r5, r0, #0
   139c8:	blt	13a30 <__assert_fail@plt+0x2490>
   139cc:	ldr	r1, [pc, #308]	; 13b08 <__assert_fail@plt+0x2568>
   139d0:	bl	111bc <fdopen@plt>
   139d4:	cmp	r0, #0
   139d8:	strne	r0, [r4, #124]	; 0x7c
   139dc:	bne	136ac <__assert_fail@plt+0x210c>
   139e0:	bl	11420 <__errno_location@plt>
   139e4:	mov	r6, r0
   139e8:	mov	r0, r5
   139ec:	ldr	r5, [r6]
   139f0:	bl	11588 <close@plt>
   139f4:	str	r5, [r6]
   139f8:	mov	r3, #0
   139fc:	mov	r2, #5
   13a00:	ldr	r1, [pc, #260]	; 13b0c <__assert_fail@plt+0x256c>
   13a04:	mov	r0, r3
   13a08:	str	r3, [r4, #124]	; 0x7c
   13a0c:	bl	11288 <dcgettext@plt>
   13a10:	mov	r1, r5
   13a14:	mov	r2, r0
   13a18:	mov	r0, #1
   13a1c:	bl	11354 <error@plt>
   13a20:	mov	r1, r0
   13a24:	b	13488 <__assert_fail@plt+0x1ee8>
   13a28:	ldr	r8, [pc, #172]	; 13adc <__assert_fail@plt+0x253c>
   13a2c:	b	1380c <__assert_fail@plt+0x226c>
   13a30:	bl	11420 <__errno_location@plt>
   13a34:	ldr	r5, [r0]
   13a38:	b	139f8 <__assert_fail@plt+0x2458>
   13a3c:	bl	11420 <__errno_location@plt>
   13a40:	mov	r2, #5
   13a44:	ldr	r1, [pc, #196]	; 13b10 <__assert_fail@plt+0x2570>
   13a48:	b	13610 <__assert_fail@plt+0x2070>
   13a4c:	mov	r2, r6
   13a50:	mov	r1, #8
   13a54:	mov	r0, #0
   13a58:	ldr	r4, [r5]
   13a5c:	bl	1950c <__assert_fail@plt+0x7f6c>
   13a60:	mov	r1, r4
   13a64:	ldr	r2, [pc, #100]	; 13ad0 <__assert_fail@plt+0x2530>
   13a68:	mov	r3, r0
   13a6c:	mov	r0, #1
   13a70:	bl	11354 <error@plt>
   13a74:	ldr	r4, [r5]
   13a78:	mov	r2, #5
   13a7c:	ldr	r1, [pc, #144]	; 13b14 <__assert_fail@plt+0x2574>
   13a80:	b	13614 <__assert_fail@plt+0x2074>
   13a84:	bl	11420 <__errno_location@plt>
   13a88:	mov	r2, #5
   13a8c:	ldr	r1, [pc, #132]	; 13b18 <__assert_fail@plt+0x2578>
   13a90:	b	13610 <__assert_fail@plt+0x2070>
   13a94:	bl	11420 <__errno_location@plt>
   13a98:	mov	r2, #5
   13a9c:	ldr	r1, [pc, #120]	; 13b1c <__assert_fail@plt+0x257c>
   13aa0:	b	13610 <__assert_fail@plt+0x2070>
   13aa4:	ldr	r3, [pc, #116]	; 13b20 <__assert_fail@plt+0x2580>
   13aa8:	ldr	r2, [pc, #116]	; 13b24 <__assert_fail@plt+0x2584>
   13aac:	ldr	r1, [pc, #72]	; 13afc <__assert_fail@plt+0x255c>
   13ab0:	ldr	r0, [pc, #112]	; 13b28 <__assert_fail@plt+0x2588>
   13ab4:	bl	115a0 <__assert_fail@plt>
   13ab8:	andeq	r0, r3, r8, ror #2
   13abc:	andeq	r0, r3, r8, ror #3
   13ac0:	andeq	r0, r3, r8, asr #4
   13ac4:	andeq	lr, r1, r0, asr r8
   13ac8:			; <UNDEFINED> instruction: 0x0001e7b0
   13acc:			; <UNDEFINED> instruction: 0x0001e7bc
   13ad0:			; <UNDEFINED> instruction: 0x0001f7b0
   13ad4:	andeq	lr, r1, ip, asr #18
   13ad8:	andeq	lr, r1, r4, lsr r8
   13adc:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   13ae0:	andeq	lr, r1, ip, lsr #15
   13ae4:	andeq	lr, r1, r8, asr r6
   13ae8:	andeq	lr, r1, r8, asr #15
   13aec:	andeq	lr, r1, ip, ror #15
   13af0:	strdeq	lr, [r1], -r0
   13af4:	andeq	sp, r1, ip, lsr r9
   13af8:	andeq	r0, r0, r5, asr #11
   13afc:	muleq	r1, r0, r7
   13b00:	andeq	lr, r1, r0, asr #16
   13b04:	muleq	r1, r0, r8
   13b08:	ldrdeq	lr, [r1], -r8
   13b0c:	muleq	r1, ip, r9
   13b10:	ldrdeq	lr, [r1], -r0
   13b14:			; <UNDEFINED> instruction: 0x0001e8b8
   13b18:	andeq	lr, r1, r0, lsl r8
   13b1c:	strdeq	lr, [r1], -r4
   13b20:	andeq	sp, r1, r8, asr #18
   13b24:	andeq	r0, r0, r6, lsr #9
   13b28:	andeq	lr, r1, r4, asr r8
   13b2c:	push	{r4, r5, r6, lr}
   13b30:	sub	sp, sp, #16
   13b34:	ldr	r5, [pc, #364]	; 13ca8 <__assert_fail@plt+0x2708>
   13b38:	ldr	r6, [r5, #16]
   13b3c:	ldrb	r3, [r5, #148]	; 0x94
   13b40:	ldr	r2, [r5, #68]	; 0x44
   13b44:	sub	r6, r6, #1
   13b48:	ldr	r4, [r5, #144]	; 0x90
   13b4c:	sub	r6, r6, r2
   13b50:	cmp	r3, #0
   13b54:	add	r6, r4, r6
   13b58:	beq	13b78 <__assert_fail@plt+0x25d8>
   13b5c:	b	13c10 <__assert_fail@plt+0x2670>
   13b60:	ldrb	r3, [r5, #156]	; 0x9c
   13b64:	cmp	r0, r3
   13b68:	beq	13bc0 <__assert_fail@plt+0x2620>
   13b6c:	cmp	r4, r6
   13b70:	bcs	13c40 <__assert_fail@plt+0x26a0>
   13b74:	strb	r0, [r4], #1
   13b78:	ldr	r0, [r5, #152]	; 0x98
   13b7c:	bl	1157c <getc@plt>
   13b80:	cmn	r0, #1
   13b84:	bne	13b60 <__assert_fail@plt+0x25c0>
   13b88:	ldr	r2, [r5, #144]	; 0x90
   13b8c:	mov	r3, #1
   13b90:	cmp	r4, r2
   13b94:	strb	r3, [r5, #148]	; 0x94
   13b98:	beq	13c10 <__assert_fail@plt+0x2670>
   13b9c:	mov	r3, #0
   13ba0:	strb	r3, [r4], #1
   13ba4:	ldr	r3, [r5, #28]
   13ba8:	sub	r4, r4, r2
   13bac:	cmp	r3, #0
   13bb0:	beq	13c18 <__assert_fail@plt+0x2678>
   13bb4:	mov	r0, r4
   13bb8:	add	sp, sp, #16
   13bbc:	pop	{r4, r5, r6, pc}
   13bc0:	mov	r3, #0
   13bc4:	strb	r3, [r4], #1
   13bc8:	ldr	r3, [r5, #160]	; 0xa0
   13bcc:	ldr	r0, [r5, #28]
   13bd0:	ldr	r2, [r5, #144]	; 0x90
   13bd4:	add	r3, r3, #1
   13bd8:	cmp	r0, #0
   13bdc:	sub	r4, r4, r2
   13be0:	str	r3, [r5, #160]	; 0xa0
   13be4:	bne	13bb4 <__assert_fail@plt+0x2614>
   13be8:	ldr	r3, [pc, #188]	; 13cac <__assert_fail@plt+0x270c>
   13bec:	str	r0, [sp, #4]
   13bf0:	ldr	r1, [pc, #184]	; 13cb0 <__assert_fail@plt+0x2710>
   13bf4:	ldrb	r3, [r3, #4]
   13bf8:	str	r0, [sp]
   13bfc:	sub	r0, r1, #44	; 0x2c
   13c00:	str	r3, [sp, #8]
   13c04:	mov	r3, r4
   13c08:	bl	1438c <__assert_fail@plt+0x2dec>
   13c0c:	b	13bb4 <__assert_fail@plt+0x2614>
   13c10:	mvn	r4, #0
   13c14:	b	13bb4 <__assert_fail@plt+0x2614>
   13c18:	ldr	r0, [pc, #140]	; 13cac <__assert_fail@plt+0x270c>
   13c1c:	str	r3, [sp, #4]
   13c20:	ldr	r1, [pc, #136]	; 13cb0 <__assert_fail@plt+0x2710>
   13c24:	ldrb	r0, [r0, #4]
   13c28:	str	r3, [sp]
   13c2c:	mov	r3, r4
   13c30:	str	r0, [sp, #8]
   13c34:	sub	r0, r1, #44	; 0x2c
   13c38:	bl	1438c <__assert_fail@plt+0x2dec>
   13c3c:	b	13bb4 <__assert_fail@plt+0x2614>
   13c40:	ldr	r3, [r5, #28]
   13c44:	cmp	r3, #0
   13c48:	beq	13c6c <__assert_fail@plt+0x26cc>
   13c4c:	mov	r2, #5
   13c50:	ldr	r1, [pc, #92]	; 13cb4 <__assert_fail@plt+0x2714>
   13c54:	mov	r0, #0
   13c58:	bl	11288 <dcgettext@plt>
   13c5c:	mov	r1, #0
   13c60:	mov	r2, r0
   13c64:	mov	r0, #1
   13c68:	bl	11354 <error@plt>
   13c6c:	ldr	r3, [pc, #56]	; 13cac <__assert_fail@plt+0x270c>
   13c70:	ldrb	r3, [r3, #4]
   13c74:	cmp	r3, #0
   13c78:	bne	13c4c <__assert_fail@plt+0x26ac>
   13c7c:	ldr	r2, [r5, #48]	; 0x30
   13c80:	ldr	r3, [r5, #32]
   13c84:	cmp	r2, r3
   13c88:	beq	13c4c <__assert_fail@plt+0x26ac>
   13c8c:	ldr	r3, [r5, #4]
   13c90:	cmp	r3, #0
   13c94:	bne	13c4c <__assert_fail@plt+0x26ac>
   13c98:	ldr	r1, [pc, #16]	; 13cb0 <__assert_fail@plt+0x2710>
   13c9c:	sub	r0, r1, #44	; 0x2c
   13ca0:	bl	148b8 <__assert_fail@plt+0x3318>
   13ca4:	b	13c4c <__assert_fail@plt+0x26ac>
   13ca8:	andeq	r0, r3, r8, ror #3
   13cac:	andeq	r0, r3, r8, ror #2
   13cb0:	andeq	r0, r3, r8, lsl r2
   13cb4:	andeq	lr, r1, r0, asr #19
   13cb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cbc:	sub	sp, sp, #36	; 0x24
   13cc0:	ldr	r5, [pc, #1692]	; 14364 <__assert_fail@plt+0x2dc4>
   13cc4:	ldr	r8, [r5, #16]
   13cc8:	ldrb	r7, [r5, #164]	; 0xa4
   13ccc:	ldr	r3, [r5, #68]	; 0x44
   13cd0:	sub	r8, r8, #1
   13cd4:	ldr	r4, [r5, #144]	; 0x90
   13cd8:	sub	r8, r8, r3
   13cdc:	cmp	r7, #0
   13ce0:	add	r8, r4, r8
   13ce4:	bne	13e80 <__assert_fail@plt+0x28e0>
   13ce8:	ldr	r0, [r5, #152]	; 0x98
   13cec:	bl	1157c <getc@plt>
   13cf0:	mov	r3, #1
   13cf4:	str	r3, [sp, #28]
   13cf8:	cmn	r0, #1
   13cfc:	mov	fp, r0
   13d00:	beq	1424c <__assert_fail@plt+0x2cac>
   13d04:	mov	sl, r3
   13d08:	mov	r9, #5
   13d0c:	bics	r3, fp, #127	; 0x7f
   13d10:	bne	13d2c <__assert_fail@plt+0x278c>
   13d14:	bl	113c0 <__ctype_b_loc@plt>
   13d18:	lsl	r2, fp, #1
   13d1c:	ldr	r1, [r0]
   13d20:	ldrh	r2, [r1, r2]
   13d24:	tst	r2, #1
   13d28:	bne	13e14 <__assert_fail@plt+0x2874>
   13d2c:	cmp	fp, #13
   13d30:	cmpne	fp, #10
   13d34:	moveq	r3, #1
   13d38:	movne	r3, #0
   13d3c:	str	r3, [sp, #24]
   13d40:	beq	13e14 <__assert_fail@plt+0x2874>
   13d44:	sub	r2, fp, #11
   13d48:	cmp	r2, #1
   13d4c:	bls	13e14 <__assert_fail@plt+0x2874>
   13d50:	ldr	r6, [r5, #28]
   13d54:	cmp	r6, #0
   13d58:	beq	13f1c <__assert_fail@plt+0x297c>
   13d5c:	cmp	fp, #39	; 0x27
   13d60:	beq	14018 <__assert_fail@plt+0x2a78>
   13d64:	cmp	fp, #92	; 0x5c
   13d68:	beq	13e90 <__assert_fail@plt+0x28f0>
   13d6c:	cmp	fp, #34	; 0x22
   13d70:	beq	14018 <__assert_fail@plt+0x2a78>
   13d74:	cmp	fp, #0
   13d78:	bne	14074 <__assert_fail@plt+0x2ad4>
   13d7c:	ldr	r3, [r5, #172]	; 0xac
   13d80:	cmp	r3, #0
   13d84:	beq	14130 <__assert_fail@plt+0x2b90>
   13d88:	cmp	r8, r4
   13d8c:	bls	1435c <__assert_fail@plt+0x2dbc>
   13d90:	strb	fp, [r4]
   13d94:	ldr	r0, [r5, #152]	; 0x98
   13d98:	bl	1157c <getc@plt>
   13d9c:	add	r4, r4, #1
   13da0:	cmn	r0, #1
   13da4:	mov	fp, r0
   13da8:	beq	13e28 <__assert_fail@plt+0x2888>
   13dac:	cmp	r0, #10
   13db0:	bne	13d50 <__assert_fail@plt+0x27b0>
   13db4:	mov	r2, #0
   13db8:	lsl	r6, r2, #1
   13dbc:	bl	113c0 <__ctype_b_loc@plt>
   13dc0:	ldr	r3, [r0]
   13dc4:	ldrh	r3, [r3, r6]
   13dc8:	tst	r3, #1
   13dcc:	beq	14008 <__assert_fail@plt+0x2a68>
   13dd0:	ldr	r0, [r5, #168]	; 0xa8
   13dd4:	mov	r3, #0
   13dd8:	ldr	r6, [r5, #144]	; 0x90
   13ddc:	cmp	r0, r3
   13de0:	strb	r3, [r4], #1
   13de4:	sub	r4, r4, r6
   13de8:	beq	13dfc <__assert_fail@plt+0x285c>
   13dec:	ldrb	r2, [r0]
   13df0:	ldrb	r3, [r6]
   13df4:	cmp	r2, r3
   13df8:	beq	141bc <__assert_fail@plt+0x2c1c>
   13dfc:	ldr	r3, [r5, #28]
   13e00:	cmp	r3, #0
   13e04:	beq	14204 <__assert_fail@plt+0x2c64>
   13e08:	mov	r0, r4
   13e0c:	add	sp, sp, #36	; 0x24
   13e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e14:	ldr	r0, [r5, #152]	; 0x98
   13e18:	bl	1157c <getc@plt>
   13e1c:	cmn	r0, #1
   13e20:	mov	fp, r0
   13e24:	bne	13d0c <__assert_fail@plt+0x276c>
   13e28:	ldr	r6, [r5, #144]	; 0x90
   13e2c:	mov	r3, #1
   13e30:	cmp	r6, r4
   13e34:	strb	r3, [r5, #164]	; 0xa4
   13e38:	movne	r3, #0
   13e3c:	strbne	r3, [r4], #1
   13e40:	subne	r4, r4, r6
   13e44:	beq	13e80 <__assert_fail@plt+0x28e0>
   13e48:	ldr	r3, [sp, #28]
   13e4c:	cmp	r3, #0
   13e50:	beq	13dfc <__assert_fail@plt+0x285c>
   13e54:	ldr	r0, [r5, #168]	; 0xa8
   13e58:	cmp	r0, #0
   13e5c:	beq	13dfc <__assert_fail@plt+0x285c>
   13e60:	ldrb	r2, [r0]
   13e64:	ldrb	r3, [r6]
   13e68:	cmp	r2, r3
   13e6c:	bne	13dfc <__assert_fail@plt+0x285c>
   13e70:	mov	r1, r6
   13e74:	bl	111e0 <strcmp@plt>
   13e78:	cmp	r0, #0
   13e7c:	bne	13dfc <__assert_fail@plt+0x285c>
   13e80:	mvn	r4, #0
   13e84:	mov	r0, r4
   13e88:	add	sp, sp, #36	; 0x24
   13e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e90:	ldr	r0, [r5, #152]	; 0x98
   13e94:	bl	1157c <getc@plt>
   13e98:	cmn	r0, #1
   13e9c:	beq	13e28 <__assert_fail@plt+0x2888>
   13ea0:	cmp	r0, #0
   13ea4:	bne	13fd0 <__assert_fail@plt+0x2a30>
   13ea8:	ldr	r6, [r5, #172]	; 0xac
   13eac:	cmp	r6, #0
   13eb0:	beq	13ec4 <__assert_fail@plt+0x2924>
   13eb4:	cmp	r8, r4
   13eb8:	bls	1415c <__assert_fail@plt+0x2bbc>
   13ebc:	strb	r0, [r4]
   13ec0:	b	13d94 <__assert_fail@plt+0x27f4>
   13ec4:	mov	r2, r9
   13ec8:	ldr	r1, [pc, #1176]	; 14368 <__assert_fail@plt+0x2dc8>
   13ecc:	bl	11288 <dcgettext@plt>
   13ed0:	mov	r1, r7
   13ed4:	mov	r2, r0
   13ed8:	mov	r0, r6
   13edc:	bl	11354 <error@plt>
   13ee0:	cmp	r8, r4
   13ee4:	str	sl, [r5, #172]	; 0xac
   13ee8:	bls	1415c <__assert_fail@plt+0x2bbc>
   13eec:	strb	r6, [r4]
   13ef0:	ldr	r0, [r5, #152]	; 0x98
   13ef4:	bl	1157c <getc@plt>
   13ef8:	add	r4, r4, #1
   13efc:	cmn	r0, #1
   13f00:	mov	fp, r0
   13f04:	beq	13e28 <__assert_fail@plt+0x2888>
   13f08:	cmp	r0, #10
   13f0c:	beq	13dbc <__assert_fail@plt+0x281c>
   13f10:	ldr	r6, [r5, #28]
   13f14:	cmp	r6, #0
   13f18:	bne	13d5c <__assert_fail@plt+0x27bc>
   13f1c:	bics	r1, fp, #127	; 0x7f
   13f20:	str	r1, [sp, #20]
   13f24:	bne	13d5c <__assert_fail@plt+0x27bc>
   13f28:	bl	113c0 <__ctype_b_loc@plt>
   13f2c:	lsl	r3, fp, #1
   13f30:	ldr	r2, [r0]
   13f34:	ldrh	r3, [r2, r3]
   13f38:	tst	r3, #1
   13f3c:	beq	13d5c <__assert_fail@plt+0x27bc>
   13f40:	ldr	r0, [r5, #168]	; 0xa8
   13f44:	ldr	r1, [sp, #20]
   13f48:	ldr	r2, [r5, #144]	; 0x90
   13f4c:	cmp	r0, #0
   13f50:	strb	r1, [r4], #1
   13f54:	sub	r4, r4, r2
   13f58:	beq	13f6c <__assert_fail@plt+0x29cc>
   13f5c:	ldrb	r1, [r0]
   13f60:	ldrb	r3, [r2]
   13f64:	cmp	r1, r3
   13f68:	beq	14230 <__assert_fail@plt+0x2c90>
   13f6c:	ldr	r3, [pc, #1016]	; 1436c <__assert_fail@plt+0x2dcc>
   13f70:	ldrb	r1, [r3, #4]
   13f74:	mov	r3, r4
   13f78:	str	r7, [sp, #4]
   13f7c:	str	r1, [sp, #8]
   13f80:	ldr	r1, [pc, #1000]	; 14370 <__assert_fail@plt+0x2dd0>
   13f84:	str	r7, [sp]
   13f88:	sub	r0, r1, #44	; 0x2c
   13f8c:	bl	1438c <__assert_fail@plt+0x2dec>
   13f90:	ldr	r0, [r5, #152]	; 0x98
   13f94:	ldr	r4, [r5, #144]	; 0x90
   13f98:	bl	1157c <getc@plt>
   13f9c:	ldr	r3, [sp, #24]
   13fa0:	str	r3, [sp, #28]
   13fa4:	cmn	r0, #1
   13fa8:	mov	fp, r0
   13fac:	bne	13d0c <__assert_fail@plt+0x276c>
   13fb0:	ldr	r6, [r5, #144]	; 0x90
   13fb4:	mov	r3, #1
   13fb8:	cmp	r4, r6
   13fbc:	strbne	r7, [r4], #1
   13fc0:	strb	r3, [r5, #164]	; 0xa4
   13fc4:	subne	r4, r4, r6
   13fc8:	bne	13dfc <__assert_fail@plt+0x285c>
   13fcc:	b	13e80 <__assert_fail@plt+0x28e0>
   13fd0:	cmp	r8, r4
   13fd4:	bls	1415c <__assert_fail@plt+0x2bbc>
   13fd8:	strb	r0, [r4]
   13fdc:	str	r0, [sp, #20]
   13fe0:	ldr	r0, [r5, #152]	; 0x98
   13fe4:	bl	1157c <getc@plt>
   13fe8:	add	r4, r4, #1
   13fec:	ldr	r2, [sp, #20]
   13ff0:	cmn	r0, #1
   13ff4:	beq	13e28 <__assert_fail@plt+0x2888>
   13ff8:	cmp	r0, #10
   13ffc:	bne	14354 <__assert_fail@plt+0x2db4>
   14000:	bics	r3, r2, #127	; 0x7f
   14004:	beq	13db8 <__assert_fail@plt+0x2818>
   14008:	ldr	r3, [r5, #160]	; 0xa0
   1400c:	add	r3, r3, #1
   14010:	str	r3, [r5, #160]	; 0xa0
   14014:	b	13dd0 <__assert_fail@plt+0x2830>
   14018:	ldr	r0, [r5, #152]	; 0x98
   1401c:	bl	1157c <getc@plt>
   14020:	cmn	r0, #1
   14024:	beq	141e4 <__assert_fail@plt+0x2c44>
   14028:	mov	r6, r4
   1402c:	add	r3, r6, #1
   14030:	mov	r4, r3
   14034:	cmp	r0, #10
   14038:	beq	142e0 <__assert_fail@plt+0x2d40>
   1403c:	cmp	r0, fp
   14040:	beq	14188 <__assert_fail@plt+0x2be8>
   14044:	cmp	r0, #0
   14048:	beq	1409c <__assert_fail@plt+0x2afc>
   1404c:	cmp	r8, r6
   14050:	bls	1415c <__assert_fail@plt+0x2bbc>
   14054:	strb	r0, [r6]
   14058:	ldr	r0, [r5, #152]	; 0x98
   1405c:	bl	1157c <getc@plt>
   14060:	cmn	r0, #1
   14064:	beq	142c0 <__assert_fail@plt+0x2d20>
   14068:	add	r4, r4, #1
   1406c:	add	r6, r6, #1
   14070:	b	14034 <__assert_fail@plt+0x2a94>
   14074:	cmp	r8, r4
   14078:	bls	1435c <__assert_fail@plt+0x2dbc>
   1407c:	strb	fp, [r4]
   14080:	ldr	r0, [r5, #152]	; 0x98
   14084:	bl	1157c <getc@plt>
   14088:	add	r4, r4, #1
   1408c:	cmn	r0, #1
   14090:	beq	13e28 <__assert_fail@plt+0x2888>
   14094:	mov	r2, fp
   14098:	b	13ff8 <__assert_fail@plt+0x2a58>
   1409c:	ldr	r3, [r5, #172]	; 0xac
   140a0:	cmp	r3, #0
   140a4:	bne	1404c <__assert_fail@plt+0x2aac>
   140a8:	mov	r2, r9
   140ac:	ldr	r1, [pc, #692]	; 14368 <__assert_fail@plt+0x2dc8>
   140b0:	mov	r0, r7
   140b4:	bl	11288 <dcgettext@plt>
   140b8:	mov	r1, r7
   140bc:	mov	r2, r0
   140c0:	mov	r0, #0
   140c4:	bl	11354 <error@plt>
   140c8:	cmp	r8, r6
   140cc:	str	sl, [r5, #172]	; 0xac
   140d0:	bls	1415c <__assert_fail@plt+0x2bbc>
   140d4:	mov	r4, r6
   140d8:	ldr	r0, [r5, #152]	; 0x98
   140dc:	strb	r7, [r4], #1
   140e0:	bl	1157c <getc@plt>
   140e4:	cmn	r0, #1
   140e8:	beq	141e4 <__assert_fail@plt+0x2c44>
   140ec:	cmp	r0, #10
   140f0:	beq	142e0 <__assert_fail@plt+0x2d40>
   140f4:	cmp	r0, fp
   140f8:	beq	1418c <__assert_fail@plt+0x2bec>
   140fc:	cmp	r0, #0
   14100:	beq	141a8 <__assert_fail@plt+0x2c08>
   14104:	cmp	r8, r4
   14108:	bls	1415c <__assert_fail@plt+0x2bbc>
   1410c:	strb	r0, [r4]
   14110:	ldr	r0, [r5, #152]	; 0x98
   14114:	bl	1157c <getc@plt>
   14118:	add	r6, r6, #2
   1411c:	cmn	r0, #1
   14120:	bne	1402c <__assert_fail@plt+0x2a8c>
   14124:	mov	r4, r6
   14128:	mov	r2, #2
   1412c:	b	14254 <__assert_fail@plt+0x2cb4>
   14130:	mov	r2, r9
   14134:	ldr	r1, [pc, #556]	; 14368 <__assert_fail@plt+0x2dc8>
   14138:	mov	r0, r7
   1413c:	bl	11288 <dcgettext@plt>
   14140:	mov	r1, r7
   14144:	mov	r2, r0
   14148:	mov	r0, fp
   1414c:	bl	11354 <error@plt>
   14150:	cmp	r8, r4
   14154:	str	sl, [r5, #172]	; 0xac
   14158:	bhi	13d90 <__assert_fail@plt+0x27f0>
   1415c:	ldr	r2, [r5, #28]
   14160:	cmp	r2, #0
   14164:	beq	14318 <__assert_fail@plt+0x2d78>
   14168:	mov	r2, #5
   1416c:	ldr	r1, [pc, #512]	; 14374 <__assert_fail@plt+0x2dd4>
   14170:	mov	r0, #0
   14174:	bl	11288 <dcgettext@plt>
   14178:	mov	r1, #0
   1417c:	mov	r2, r0
   14180:	mov	r0, #1
   14184:	bl	11354 <error@plt>
   14188:	mov	r4, r6
   1418c:	str	r0, [sp, #20]
   14190:	ldr	r0, [r5, #152]	; 0x98
   14194:	bl	1157c <getc@plt>
   14198:	ldr	r2, [sp, #20]
   1419c:	cmn	r0, #1
   141a0:	bne	13ff8 <__assert_fail@plt+0x2a58>
   141a4:	b	13e28 <__assert_fail@plt+0x2888>
   141a8:	ldr	r3, [r5, #172]	; 0xac
   141ac:	cmp	r3, #0
   141b0:	bne	14104 <__assert_fail@plt+0x2b64>
   141b4:	mov	r6, r4
   141b8:	b	140a8 <__assert_fail@plt+0x2b08>
   141bc:	mov	r1, r6
   141c0:	bl	111e0 <strcmp@plt>
   141c4:	cmp	r0, #0
   141c8:	bne	13dfc <__assert_fail@plt+0x285c>
   141cc:	ldr	r3, [sp, #28]
   141d0:	cmp	r3, #0
   141d4:	mov	r3, #1
   141d8:	strb	r3, [r5, #164]	; 0xa4
   141dc:	beq	13e08 <__assert_fail@plt+0x2868>
   141e0:	b	13e80 <__assert_fail@plt+0x28e0>
   141e4:	ldr	r1, [r5, #144]	; 0x90
   141e8:	mov	r2, #1
   141ec:	cmp	r1, r4
   141f0:	strb	r2, [r5, #164]	; 0xa4
   141f4:	beq	13e80 <__assert_fail@plt+0x28e0>
   141f8:	mov	r2, #0
   141fc:	strb	r2, [r4]
   14200:	b	1427c <__assert_fail@plt+0x2cdc>
   14204:	ldr	r2, [pc, #352]	; 1436c <__assert_fail@plt+0x2dcc>
   14208:	str	r3, [sp, #4]
   1420c:	ldr	r1, [pc, #348]	; 14370 <__assert_fail@plt+0x2dd0>
   14210:	ldrb	r0, [r2, #4]
   14214:	str	r3, [sp]
   14218:	mov	r2, r6
   1421c:	str	r0, [sp, #8]
   14220:	mov	r3, r4
   14224:	sub	r0, r1, #44	; 0x2c
   14228:	bl	1438c <__assert_fail@plt+0x2dec>
   1422c:	b	13e08 <__assert_fail@plt+0x2868>
   14230:	mov	r1, r2
   14234:	str	r2, [sp, #20]
   14238:	bl	111e0 <strcmp@plt>
   1423c:	ldr	r2, [sp, #20]
   14240:	cmp	r0, #0
   14244:	bne	13f6c <__assert_fail@plt+0x29cc>
   14248:	b	141cc <__assert_fail@plt+0x2c2c>
   1424c:	mov	fp, r7
   14250:	mov	r2, r3
   14254:	ldr	r6, [r5, #144]	; 0x90
   14258:	mov	r1, #1
   1425c:	cmp	r6, r4
   14260:	strb	r1, [r5, #164]	; 0xa4
   14264:	beq	13e80 <__assert_fail@plt+0x28e0>
   14268:	cmp	r2, #2
   1426c:	mov	r2, #0
   14270:	strb	r2, [r4], #1
   14274:	sub	r4, r4, r6
   14278:	bne	13e48 <__assert_fail@plt+0x28a8>
   1427c:	bl	12dd8 <__assert_fail@plt+0x1838>
   14280:	mov	r2, #5
   14284:	ldr	r1, [pc, #236]	; 14378 <__assert_fail@plt+0x2dd8>
   14288:	mov	r0, #0
   1428c:	bl	11288 <dcgettext@plt>
   14290:	cmp	fp, #34	; 0x22
   14294:	mov	r2, #5
   14298:	mov	r4, r0
   1429c:	beq	14308 <__assert_fail@plt+0x2d68>
   142a0:	ldr	r1, [pc, #212]	; 1437c <__assert_fail@plt+0x2ddc>
   142a4:	mov	r0, #0
   142a8:	bl	11288 <dcgettext@plt>
   142ac:	mov	r3, r0
   142b0:	mov	r2, r4
   142b4:	mov	r1, #0
   142b8:	mov	r0, #1
   142bc:	bl	11354 <error@plt>
   142c0:	ldr	r1, [r5, #144]	; 0x90
   142c4:	mov	r2, #1
   142c8:	cmp	r1, r4
   142cc:	strb	r2, [r5, #164]	; 0xa4
   142d0:	movne	r2, #0
   142d4:	strbne	r2, [r4]
   142d8:	bne	1427c <__assert_fail@plt+0x2cdc>
   142dc:	b	13e80 <__assert_fail@plt+0x28e0>
   142e0:	bl	12dd8 <__assert_fail@plt+0x1838>
   142e4:	mov	r2, #5
   142e8:	ldr	r1, [pc, #136]	; 14378 <__assert_fail@plt+0x2dd8>
   142ec:	mov	r0, #0
   142f0:	bl	11288 <dcgettext@plt>
   142f4:	cmp	fp, #34	; 0x22
   142f8:	movne	r2, #5
   142fc:	mov	r4, r0
   14300:	bne	142a0 <__assert_fail@plt+0x2d00>
   14304:	mov	r2, #5
   14308:	ldr	r1, [pc, #112]	; 14380 <__assert_fail@plt+0x2de0>
   1430c:	mov	r0, #0
   14310:	bl	11288 <dcgettext@plt>
   14314:	b	142ac <__assert_fail@plt+0x2d0c>
   14318:	ldr	r3, [pc, #76]	; 1436c <__assert_fail@plt+0x2dcc>
   1431c:	ldrb	r3, [r3, #4]
   14320:	cmp	r3, #0
   14324:	bne	14168 <__assert_fail@plt+0x2bc8>
   14328:	ldr	r2, [r5, #48]	; 0x30
   1432c:	ldr	r3, [r5, #32]
   14330:	cmp	r2, r3
   14334:	beq	14168 <__assert_fail@plt+0x2bc8>
   14338:	ldr	r3, [r5, #4]
   1433c:	cmp	r3, #0
   14340:	bne	14168 <__assert_fail@plt+0x2bc8>
   14344:	ldr	r1, [pc, #36]	; 14370 <__assert_fail@plt+0x2dd0>
   14348:	sub	r0, r1, #44	; 0x2c
   1434c:	bl	148b8 <__assert_fail@plt+0x3318>
   14350:	b	14168 <__assert_fail@plt+0x2bc8>
   14354:	mov	fp, r0
   14358:	b	13d50 <__assert_fail@plt+0x27b0>
   1435c:	mov	r2, r6
   14360:	b	14160 <__assert_fail@plt+0x2bc0>
   14364:	andeq	r0, r3, r8, ror #3
   14368:	andeq	lr, r1, r0, asr #20
   1436c:	andeq	r0, r3, r8, ror #2
   14370:	andeq	r0, r3, r8, lsl r2
   14374:	andeq	lr, r1, r0, asr #19
   14378:	ldrdeq	lr, [r1], -r8
   1437c:	andeq	lr, r1, r8, lsr sl
   14380:	andeq	lr, r1, r0, lsr sl
   14384:	mov	r0, #0
   14388:	bx	lr
   1438c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14390:	subs	r7, r2, #0
   14394:	ldr	r9, [sp, #36]	; 0x24
   14398:	ldr	r8, [sp, #40]	; 0x28
   1439c:	beq	145dc <__assert_fail@plt+0x303c>
   143a0:	ldr	sl, [pc, #628]	; 1461c <__assert_fail@plt+0x307c>
   143a4:	mov	r5, r0
   143a8:	cmp	r7, sl
   143ac:	mov	r4, r1
   143b0:	mov	r6, r3
   143b4:	beq	1452c <__assert_fail@plt+0x2f8c>
   143b8:	ldr	r1, [r1, #16]
   143bc:	add	r3, r3, r9
   143c0:	ldr	r2, [r0, #12]
   143c4:	add	r3, r3, r1
   143c8:	cmp	r3, r2
   143cc:	bls	14508 <__assert_fail@plt+0x2f68>
   143d0:	cmp	r8, #0
   143d4:	bne	14610 <__assert_fail@plt+0x3070>
   143d8:	ldr	r2, [r4]
   143dc:	ldr	r3, [r0, #28]
   143e0:	cmp	r2, r3
   143e4:	beq	14610 <__assert_fail@plt+0x3070>
   143e8:	ldr	r3, [r0, #24]
   143ec:	cmp	r3, #0
   143f0:	bne	145f0 <__assert_fail@plt+0x3050>
   143f4:	ldr	r3, [r0]
   143f8:	cmp	r3, #0
   143fc:	beq	14418 <__assert_fail@plt+0x2e78>
   14400:	ldr	r3, [r0, #36]	; 0x24
   14404:	cmp	r3, #0
   14408:	bne	145f0 <__assert_fail@plt+0x3050>
   1440c:	ldr	r3, [r0, #40]	; 0x28
   14410:	cmp	r3, #0
   14414:	bne	145f0 <__assert_fail@plt+0x3050>
   14418:	mov	r1, r4
   1441c:	mov	r0, r5
   14420:	bl	148b8 <__assert_fail@plt+0x3318>
   14424:	ldr	r3, [r4]
   14428:	ldr	r2, [r5, #40]	; 0x28
   1442c:	cmp	r2, #0
   14430:	beq	14444 <__assert_fail@plt+0x2ea4>
   14434:	ldr	r1, [r5, #28]
   14438:	sub	r1, r3, r1
   1443c:	cmp	r2, r1
   14440:	beq	14520 <__assert_fail@plt+0x2f80>
   14444:	ldr	r2, [r5, #16]
   14448:	cmp	r2, r3
   1444c:	beq	14520 <__assert_fail@plt+0x2f80>
   14450:	ldr	r3, [r4]
   14454:	mov	r2, #1
   14458:	str	r2, [r4, #28]
   1445c:	ldr	r1, [r4, #8]
   14460:	cmp	r1, r3
   14464:	bls	14544 <__assert_fail@plt+0x2fa4>
   14468:	ldr	r1, [r4, #4]
   1446c:	cmp	r7, sl
   14470:	beq	14574 <__assert_fail@plt+0x2fd4>
   14474:	ldr	ip, [r4, #16]
   14478:	ldr	r2, [r4, #12]
   1447c:	ldr	r0, [sp, #32]
   14480:	add	r2, r2, ip
   14484:	cmp	r0, #0
   14488:	add	r0, r3, #1
   1448c:	str	r0, [r4]
   14490:	str	r2, [r1, r3, lsl #2]
   14494:	beq	144b4 <__assert_fail@plt+0x2f14>
   14498:	ldr	r0, [r4, #12]
   1449c:	ldr	r1, [sp, #32]
   144a0:	add	r0, r0, ip
   144a4:	bl	11330 <strcpy@plt>
   144a8:	ldr	ip, [r4, #16]
   144ac:	add	ip, r9, ip
   144b0:	str	ip, [r4, #16]
   144b4:	ldr	r0, [r4, #12]
   144b8:	mov	r1, r7
   144bc:	add	r0, r0, ip
   144c0:	bl	11330 <strcpy@plt>
   144c4:	ldr	r3, [r4, #16]
   144c8:	cmp	r8, #0
   144cc:	add	r6, r6, r3
   144d0:	str	r6, [r4, #16]
   144d4:	ldr	r3, [r4]
   144d8:	bne	14590 <__assert_fail@plt+0x2ff0>
   144dc:	ldr	r2, [r5, #40]	; 0x28
   144e0:	cmp	r2, #0
   144e4:	beq	144f8 <__assert_fail@plt+0x2f58>
   144e8:	ldr	r1, [r5, #28]
   144ec:	sub	r1, r3, r1
   144f0:	cmp	r2, r1
   144f4:	beq	1459c <__assert_fail@plt+0x2ffc>
   144f8:	ldr	r2, [r5, #16]
   144fc:	cmp	r3, r2
   14500:	beq	1459c <__assert_fail@plt+0x2ffc>
   14504:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14508:	cmp	r8, #0
   1450c:	ldr	r3, [r4]
   14510:	beq	14428 <__assert_fail@plt+0x2e88>
   14514:	ldr	r2, [r0, #16]
   14518:	cmp	r3, r2
   1451c:	bne	1445c <__assert_fail@plt+0x2ebc>
   14520:	mov	r1, r4
   14524:	mov	r0, r5
   14528:	bl	148b8 <__assert_fail@plt+0x3318>
   1452c:	cmp	r8, #0
   14530:	ldrne	r3, [r4]
   14534:	moveq	r2, #1
   14538:	ldreq	r3, [r4]
   1453c:	streq	r2, [r4, #28]
   14540:	b	1445c <__assert_fail@plt+0x2ebc>
   14544:	ldr	r0, [r4, #4]
   14548:	cmp	r0, #0
   1454c:	beq	145bc <__assert_fail@plt+0x301c>
   14550:	lsl	r3, r1, #1
   14554:	str	r3, [r4, #8]
   14558:	lsl	r1, r1, #3
   1455c:	bl	1beac <__assert_fail@plt+0xa90c>
   14560:	cmp	r7, sl
   14564:	ldr	r3, [r4]
   14568:	mov	r1, r0
   1456c:	str	r0, [r4, #4]
   14570:	bne	14474 <__assert_fail@plt+0x2ed4>
   14574:	add	r0, r3, #1
   14578:	mov	r2, #0
   1457c:	cmp	r8, #0
   14580:	str	r0, [r4]
   14584:	str	r2, [r1, r3, lsl #2]
   14588:	bne	145b0 <__assert_fail@plt+0x3010>
   1458c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14590:	ldr	r2, [r5, #16]
   14594:	cmp	r3, r2
   14598:	bne	145b4 <__assert_fail@plt+0x3014>
   1459c:	mov	r0, r5
   145a0:	mov	r1, r4
   145a4:	bl	148b8 <__assert_fail@plt+0x3318>
   145a8:	cmp	r8, #0
   145ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   145b0:	ldr	r6, [r4, #16]
   145b4:	str	r6, [r4, #20]
   145b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   145bc:	mov	r3, #64	; 0x40
   145c0:	str	r3, [r4, #8]
   145c4:	mov	r0, #256	; 0x100
   145c8:	bl	1be70 <__assert_fail@plt+0xa8d0>
   145cc:	ldr	r3, [r4]
   145d0:	str	r0, [r4, #4]
   145d4:	mov	r1, r0
   145d8:	b	1446c <__assert_fail@plt+0x2ecc>
   145dc:	ldr	r3, [pc, #60]	; 14620 <__assert_fail@plt+0x3080>
   145e0:	ldr	r2, [pc, #60]	; 14624 <__assert_fail@plt+0x3084>
   145e4:	ldr	r1, [pc, #60]	; 14628 <__assert_fail@plt+0x3088>
   145e8:	ldr	r0, [pc, #60]	; 1462c <__assert_fail@plt+0x308c>
   145ec:	bl	115a0 <__assert_fail@plt>
   145f0:	ldr	r1, [pc, #56]	; 14630 <__assert_fail@plt+0x3090>
   145f4:	mov	r2, #5
   145f8:	mov	r0, #0
   145fc:	bl	11288 <dcgettext@plt>
   14600:	mov	r1, #0
   14604:	mov	r2, r0
   14608:	mov	r0, #1
   1460c:	bl	11354 <error@plt>
   14610:	mov	r2, #5
   14614:	ldr	r1, [pc, #24]	; 14634 <__assert_fail@plt+0x3094>
   14618:	b	145f8 <__assert_fail@plt+0x3058>
   1461c:	andeq	pc, r1, ip, lsl #6
   14620:	andeq	pc, r1, ip, ror #4
   14624:	andeq	r0, r0, r5, asr r1
   14628:	strdeq	pc, [r1], -r4
   1462c:	andeq	pc, r1, r0, lsl #6
   14630:	andeq	pc, r1, r4, asr r3	; <UNPREDICTABLE>
   14634:	andeq	pc, r1, r8, lsl r3	; <UNPREDICTABLE>
   14638:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1463c:	sub	sp, sp, #36	; 0x24
   14640:	mov	r5, r3
   14644:	ldr	r3, [sp, #72]	; 0x48
   14648:	ldr	r4, [pc, #608]	; 148b0 <__assert_fail@plt+0x3310>
   1464c:	str	r3, [sp, #12]
   14650:	ldr	r3, [sp, #76]	; 0x4c
   14654:	str	r1, [sp, #24]
   14658:	str	r3, [sp, #16]
   1465c:	ldr	r3, [sp, #80]	; 0x50
   14660:	ldr	r1, [r4]
   14664:	str	r3, [sp, #8]
   14668:	ldr	r3, [sp, #84]	; 0x54
   1466c:	mov	r9, r0
   14670:	str	r3, [sp, #4]
   14674:	ldr	r0, [r0, #12]
   14678:	ldr	r3, [sp, #88]	; 0x58
   1467c:	cmp	r1, #0
   14680:	str	r1, [sp, #20]
   14684:	mov	r7, r2
   14688:	sub	r6, r0, #1
   1468c:	str	r3, [sp, #28]
   14690:	beq	1489c <__assert_fail@plt+0x32fc>
   14694:	ldr	r3, [sp, #12]
   14698:	cmp	r3, #0
   1469c:	beq	147dc <__assert_fail@plt+0x323c>
   146a0:	ldr	r3, [sp, #4]
   146a4:	ldr	r2, [sp, #16]
   146a8:	ldr	r4, [sp, #20]
   146ac:	add	sl, r3, r2
   146b0:	mov	fp, r7
   146b4:	b	1472c <__assert_fail@plt+0x318c>
   146b8:	sub	r7, r8, fp
   146bc:	cmp	r6, r7
   146c0:	bls	147ac <__assert_fail@plt+0x320c>
   146c4:	mov	r0, r4
   146c8:	mov	r1, fp
   146cc:	sub	r6, r6, r7
   146d0:	mov	r2, r7
   146d4:	bl	11450 <strncpy@plt>
   146d8:	cmp	sl, r6
   146dc:	sub	r5, r5, r7
   146e0:	add	r4, r4, r7
   146e4:	bcs	14894 <__assert_fail@plt+0x32f4>
   146e8:	ldr	r3, [sp, #16]
   146ec:	ldr	r1, [sp, #12]
   146f0:	mov	r0, r4
   146f4:	add	r4, r4, r3
   146f8:	bl	11330 <strcpy@plt>
   146fc:	mov	r0, r4
   14700:	ldr	r1, [sp, #8]
   14704:	bl	11330 <strcpy@plt>
   14708:	ldr	r2, [r9, #20]
   1470c:	ldr	r3, [sp, #4]
   14710:	add	fp, r8, r2
   14714:	sub	r5, r5, r2
   14718:	ldrb	r2, [fp]
   1471c:	sub	r6, r6, sl
   14720:	add	r4, r4, r3
   14724:	cmp	r2, #0
   14728:	beq	14774 <__assert_fail@plt+0x31d4>
   1472c:	ldr	r1, [r9, #24]
   14730:	mov	r0, fp
   14734:	bl	16788 <__assert_fail@plt+0x51e8>
   14738:	subs	r8, r0, #0
   1473c:	bne	146b8 <__assert_fail@plt+0x3118>
   14740:	cmp	r5, r6
   14744:	bcs	147ac <__assert_fail@plt+0x320c>
   14748:	mov	r1, fp
   1474c:	add	fp, fp, r5
   14750:	mov	r2, r5
   14754:	mov	r0, r4
   14758:	bl	11450 <strncpy@plt>
   1475c:	ldrb	r2, [fp]
   14760:	sub	r6, r6, r5
   14764:	add	r4, r4, r5
   14768:	cmp	r2, #0
   1476c:	mov	r5, #0
   14770:	bne	1472c <__assert_fail@plt+0x318c>
   14774:	mov	ip, #0
   14778:	strb	ip, [r4], #1
   1477c:	ldr	r3, [sp, #20]
   14780:	str	ip, [sp, #76]	; 0x4c
   14784:	str	ip, [sp, #72]	; 0x48
   14788:	ldr	ip, [sp, #28]
   1478c:	mov	r2, r3
   14790:	ldr	r1, [sp, #24]
   14794:	mov	r0, r9
   14798:	sub	r3, r4, r3
   1479c:	str	ip, [sp, #80]	; 0x50
   147a0:	add	sp, sp, #36	; 0x24
   147a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147a8:	b	1438c <__assert_fail@plt+0x2dec>
   147ac:	mov	r7, fp
   147b0:	ldrb	r3, [r7]
   147b4:	cmp	r3, #0
   147b8:	beq	14774 <__assert_fail@plt+0x31d4>
   147bc:	mov	r2, #5
   147c0:	ldr	r1, [pc, #236]	; 148b4 <__assert_fail@plt+0x3314>
   147c4:	mov	r0, #0
   147c8:	bl	11288 <dcgettext@plt>
   147cc:	mov	r1, #0
   147d0:	mov	r2, r0
   147d4:	mov	r0, #1
   147d8:	bl	11354 <error@plt>
   147dc:	ldr	r3, [sp, #4]
   147e0:	ldr	r2, [sp, #16]
   147e4:	ldr	r4, [sp, #20]
   147e8:	add	sl, r3, r2
   147ec:	mov	fp, r7
   147f0:	b	14854 <__assert_fail@plt+0x32b4>
   147f4:	sub	r7, r8, fp
   147f8:	cmp	r7, r6
   147fc:	bcs	147ac <__assert_fail@plt+0x320c>
   14800:	mov	r0, r4
   14804:	mov	r1, fp
   14808:	sub	r6, r6, r7
   1480c:	mov	r2, r7
   14810:	bl	11450 <strncpy@plt>
   14814:	cmp	sl, r6
   14818:	sub	r5, r5, r7
   1481c:	add	r4, r4, r7
   14820:	bcs	14894 <__assert_fail@plt+0x32f4>
   14824:	mov	r0, r4
   14828:	ldr	r1, [sp, #8]
   1482c:	bl	11330 <strcpy@plt>
   14830:	ldr	r2, [r9, #20]
   14834:	ldr	r3, [sp, #4]
   14838:	sub	r6, r6, sl
   1483c:	add	r4, r4, r3
   14840:	add	fp, r8, r2
   14844:	sub	r5, r5, r2
   14848:	ldrb	r2, [fp]
   1484c:	cmp	r2, #0
   14850:	beq	14774 <__assert_fail@plt+0x31d4>
   14854:	ldr	r1, [r9, #24]
   14858:	mov	r0, fp
   1485c:	bl	16788 <__assert_fail@plt+0x51e8>
   14860:	subs	r8, r0, #0
   14864:	bne	147f4 <__assert_fail@plt+0x3254>
   14868:	cmp	r6, r5
   1486c:	bls	147ac <__assert_fail@plt+0x320c>
   14870:	mov	r1, fp
   14874:	mov	r0, r4
   14878:	mov	r2, r5
   1487c:	sub	r6, r6, r5
   14880:	add	fp, fp, r5
   14884:	add	r4, r4, r5
   14888:	bl	11450 <strncpy@plt>
   1488c:	ldr	r5, [sp, #12]
   14890:	b	14848 <__assert_fail@plt+0x32a8>
   14894:	mov	r7, r8
   14898:	b	147b0 <__assert_fail@plt+0x3210>
   1489c:	add	r0, r0, #1
   148a0:	bl	1be70 <__assert_fail@plt+0xa8d0>
   148a4:	str	r0, [sp, #20]
   148a8:	str	r0, [r4]
   148ac:	b	14694 <__assert_fail@plt+0x30f4>
   148b0:	muleq	r3, r8, r2
   148b4:	andeq	pc, r1, ip, ror #6
   148b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148bc:	sub	sp, sp, #20
   148c0:	mov	r3, #0
   148c4:	mov	r7, r1
   148c8:	str	r3, [sp, #8]
   148cc:	str	r3, [sp, #4]
   148d0:	str	r3, [sp]
   148d4:	ldr	r2, [pc, #668]	; 14b78 <__assert_fail@plt+0x35d8>
   148d8:	mov	r9, r0
   148dc:	bl	1438c <__assert_fail@plt+0x2dec>
   148e0:	ldr	r3, [r7]
   148e4:	cmp	r3, #0
   148e8:	beq	14b20 <__assert_fail@plt+0x3580>
   148ec:	ldr	r2, [r7, #4]
   148f0:	sub	r3, r3, #-1073741823	; 0xc0000001
   148f4:	ldr	r6, [r2, r3, lsl #2]
   148f8:	lsl	r3, r3, #2
   148fc:	cmp	r6, #0
   14900:	bne	14b64 <__assert_fail@plt+0x35c4>
   14904:	add	r0, r3, #8
   14908:	bl	1be70 <__assert_fail@plt+0xa8d0>
   1490c:	ldr	r1, [r7]
   14910:	mov	sl, r6
   14914:	mov	r5, r1
   14918:	mov	r8, r0
   1491c:	ldr	r0, [r9, #28]
   14920:	cmp	r0, #0
   14924:	beq	14b08 <__assert_fail@plt+0x3568>
   14928:	ldr	r3, [r7, #4]
   1492c:	lsl	r4, r0, #2
   14930:	add	lr, r3, r4
   14934:	sub	r2, r8, #4
   14938:	ldr	ip, [r3], #4
   1493c:	cmp	lr, r3
   14940:	str	ip, [r2, #4]!
   14944:	bne	14938 <__assert_fail@plt+0x3398>
   14948:	mov	r2, r4
   1494c:	mov	r4, r0
   14950:	add	ip, r6, r0
   14954:	cmp	r1, ip
   14958:	cmphi	r5, r0
   1495c:	bls	14994 <__assert_fail@plt+0x33f4>
   14960:	ldr	r3, [r7, #4]
   14964:	add	r2, r8, r0, lsl #2
   14968:	add	r3, r3, ip, lsl #2
   1496c:	add	r4, r4, #1
   14970:	add	lr, r6, r4
   14974:	ldr	ip, [r3], #4
   14978:	cmp	r1, lr
   1497c:	cmphi	r5, r4
   14980:	str	ip, [r2], #4
   14984:	bhi	1496c <__assert_fail@plt+0x33cc>
   14988:	cmp	r4, r0
   1498c:	bcc	14b50 <__assert_fail@plt+0x35b0>
   14990:	lsl	r2, r4, #2
   14994:	str	sl, [r8, r2]
   14998:	ldr	fp, [r9, #32]
   1499c:	mov	r3, r8
   149a0:	mov	r2, r4
   149a4:	ldr	r1, [r7, #24]
   149a8:	mov	r0, r9
   149ac:	blx	fp
   149b0:	subs	fp, r0, #0
   149b4:	bne	14a80 <__assert_fail@plt+0x34e0>
   149b8:	ldr	r2, [r9, #28]
   149bc:	add	r1, r2, #1
   149c0:	cmp	r5, r1
   149c4:	bls	14b34 <__assert_fail@plt+0x3594>
   149c8:	ldr	r3, [r7, #40]	; 0x28
   149cc:	ldr	ip, [r7, #36]	; 0x24
   149d0:	cmp	r5, r3
   149d4:	movcs	r0, #0
   149d8:	movcc	r0, #1
   149dc:	cmp	r3, #0
   149e0:	orreq	r0, r0, #1
   149e4:	cmp	r0, #0
   149e8:	strne	r5, [r7, #40]	; 0x28
   149ec:	movne	r3, r5
   149f0:	ldrne	r0, [r9, #28]
   149f4:	moveq	r0, r2
   149f8:	cmp	ip, #0
   149fc:	beq	14a78 <__assert_fail@plt+0x34d8>
   14a00:	cmp	ip, r3
   14a04:	bcs	14a78 <__assert_fail@plt+0x34d8>
   14a08:	sub	r3, r3, ip
   14a0c:	lsrs	r3, r3, #1
   14a10:	subne	r5, r5, r3
   14a14:	subeq	r5, r5, #1
   14a18:	cmp	r2, #0
   14a1c:	beq	14a2c <__assert_fail@plt+0x348c>
   14a20:	cmp	r1, r5
   14a24:	bcc	14a34 <__assert_fail@plt+0x3494>
   14a28:	mov	r5, r1
   14a2c:	cmp	r5, #0
   14a30:	moveq	r5, #1
   14a34:	ldr	r1, [r7]
   14a38:	add	r3, r6, #1
   14a3c:	sub	r2, r1, r0
   14a40:	cmp	r3, r2
   14a44:	bcc	14920 <__assert_fail@plt+0x3380>
   14a48:	mov	r0, r8
   14a4c:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   14a50:	ldr	r0, [r9, #28]
   14a54:	ldr	r1, [r7, #20]
   14a58:	mov	r2, #0
   14a5c:	mvn	r3, #0
   14a60:	str	r0, [r7]
   14a64:	str	r1, [r7, #16]
   14a68:	str	r2, [r7, #28]
   14a6c:	str	r3, [r7, #32]
   14a70:	add	sp, sp, #20
   14a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a78:	lsr	r5, r5, #1
   14a7c:	b	14a18 <__assert_fail@plt+0x3478>
   14a80:	ldr	r3, [r7, #36]	; 0x24
   14a84:	ldr	r1, [r9, #28]
   14a88:	cmp	r5, r3
   14a8c:	movhi	r3, r5
   14a90:	strhi	r5, [r7, #36]	; 0x24
   14a94:	movls	r0, r1
   14a98:	ldrhi	r0, [r9, #28]
   14a9c:	cmp	r3, #0
   14aa0:	beq	14af0 <__assert_fail@plt+0x3550>
   14aa4:	ldr	r2, [r7, #40]	; 0x28
   14aa8:	cmp	r2, r3
   14aac:	bls	14af0 <__assert_fail@plt+0x3550>
   14ab0:	sub	r3, r2, r3
   14ab4:	lsrs	r3, r3, #1
   14ab8:	addne	r3, r5, r3
   14abc:	addeq	r3, r5, #1
   14ac0:	cmp	r1, #0
   14ac4:	beq	14ad8 <__assert_fail@plt+0x3538>
   14ac8:	mov	r5, r3
   14acc:	add	r3, r1, #1
   14ad0:	cmp	r3, r5
   14ad4:	bcc	14ae4 <__assert_fail@plt+0x3544>
   14ad8:	cmp	r3, #0
   14adc:	movne	r5, r3
   14ae0:	moveq	r5, #1
   14ae4:	add	r6, r6, r4
   14ae8:	sub	r6, r6, r0
   14aec:	b	14a34 <__assert_fail@plt+0x3494>
   14af0:	cmn	r5, #1
   14af4:	beq	14b14 <__assert_fail@plt+0x3574>
   14af8:	cmp	r1, #0
   14afc:	add	r5, r5, #1
   14b00:	bne	14acc <__assert_fail@plt+0x352c>
   14b04:	b	14ae4 <__assert_fail@plt+0x3544>
   14b08:	mov	r2, sl
   14b0c:	mov	r4, r0
   14b10:	b	14950 <__assert_fail@plt+0x33b0>
   14b14:	cmp	r1, #0
   14b18:	bne	14acc <__assert_fail@plt+0x352c>
   14b1c:	b	14ae4 <__assert_fail@plt+0x3544>
   14b20:	ldr	r3, [pc, #84]	; 14b7c <__assert_fail@plt+0x35dc>
   14b24:	ldr	r2, [pc, #84]	; 14b80 <__assert_fail@plt+0x35e0>
   14b28:	ldr	r1, [pc, #84]	; 14b84 <__assert_fail@plt+0x35e4>
   14b2c:	ldr	r0, [pc, #84]	; 14b88 <__assert_fail@plt+0x35e8>
   14b30:	bl	115a0 <__assert_fail@plt>
   14b34:	mov	r2, #5
   14b38:	ldr	r1, [pc, #76]	; 14b8c <__assert_fail@plt+0x35ec>
   14b3c:	bl	11288 <dcgettext@plt>
   14b40:	mov	r1, fp
   14b44:	mov	r2, r0
   14b48:	mov	r0, #1
   14b4c:	bl	11354 <error@plt>
   14b50:	ldr	r3, [pc, #56]	; 14b90 <__assert_fail@plt+0x35f0>
   14b54:	mov	r2, #242	; 0xf2
   14b58:	ldr	r1, [pc, #36]	; 14b84 <__assert_fail@plt+0x35e4>
   14b5c:	ldr	r0, [pc, #48]	; 14b94 <__assert_fail@plt+0x35f4>
   14b60:	bl	115a0 <__assert_fail@plt>
   14b64:	ldr	r3, [pc, #16]	; 14b7c <__assert_fail@plt+0x35dc>
   14b68:	ldr	r2, [pc, #40]	; 14b98 <__assert_fail@plt+0x35f8>
   14b6c:	ldr	r1, [pc, #16]	; 14b84 <__assert_fail@plt+0x35e4>
   14b70:	ldr	r0, [pc, #36]	; 14b9c <__assert_fail@plt+0x35fc>
   14b74:	bl	115a0 <__assert_fail@plt>
   14b78:	andeq	pc, r1, ip, lsl #6
   14b7c:	andeq	pc, r1, r8, ror r2	; <UNPREDICTABLE>
   14b80:	andeq	r0, r0, r5, lsl #2
   14b84:	strdeq	pc, [r1], -r4
   14b88:	andeq	pc, r1, r0, lsl #7
   14b8c:	andeq	pc, r1, r0, ror #7
   14b90:	andeq	pc, r1, r4, lsl #5
   14b94:	andeq	pc, r1, r0, asr #7
   14b98:	andeq	r0, r0, r6, lsl #2
   14b9c:	muleq	r1, r4, r3
   14ba0:	push	{r4, lr}
   14ba4:	mov	r0, #0
   14ba8:	bl	11294 <sysconf@plt>
   14bac:	cmp	r0, #0
   14bb0:	mvnle	r0, #-2147483648	; 0x80000000
   14bb4:	pop	{r4, pc}
   14bb8:	ldr	r3, [pc, #64]	; 14c00 <__assert_fail@plt+0x3660>
   14bbc:	push	{r4, r5, r6, lr}
   14bc0:	ldr	r4, [r3]
   14bc4:	ldr	r3, [r4]
   14bc8:	cmp	r3, #0
   14bcc:	beq	14bf8 <__assert_fail@plt+0x3658>
   14bd0:	mov	r5, #0
   14bd4:	mov	r0, r3
   14bd8:	bl	113f0 <strlen@plt>
   14bdc:	ldr	r3, [r4, #4]!
   14be0:	cmp	r3, #0
   14be4:	add	r0, r0, #1
   14be8:	add	r5, r5, r0
   14bec:	bne	14bd4 <__assert_fail@plt+0x3634>
   14bf0:	mov	r0, r5
   14bf4:	pop	{r4, r5, r6, pc}
   14bf8:	mov	r5, r3
   14bfc:	b	14bf0 <__assert_fail@plt+0x3650>
   14c00:			; <UNDEFINED> instruction: 0x000301bc
   14c04:	ldr	r3, [pc, #268]	; 14d18 <__assert_fail@plt+0x3778>
   14c08:	push	{r4, r5, r6, r7, r8, lr}
   14c0c:	mov	r7, r0
   14c10:	ldr	r6, [r3]
   14c14:	mov	r8, r1
   14c18:	ldr	r4, [r6]
   14c1c:	cmp	r4, #0
   14c20:	beq	14cd0 <__assert_fail@plt+0x3730>
   14c24:	mov	r5, #0
   14c28:	mov	r0, r4
   14c2c:	bl	113f0 <strlen@plt>
   14c30:	ldr	r4, [r6, #4]!
   14c34:	cmp	r4, #0
   14c38:	add	r0, r0, #1
   14c3c:	add	r5, r5, r0
   14c40:	bne	14c28 <__assert_fail@plt+0x3688>
   14c44:	mov	r3, #4096	; 0x1000
   14c48:	str	r3, [r7, #8]
   14c4c:	mov	r0, r4
   14c50:	bl	11294 <sysconf@plt>
   14c54:	str	r4, [r7]
   14c58:	cmp	r0, #0
   14c5c:	mvnle	r0, #-2147483648	; 0x80000000
   14c60:	cmp	r5, r0
   14c64:	str	r0, [r7, #4]
   14c68:	bhi	14cc8 <__assert_fail@plt+0x3728>
   14c6c:	add	r3, r8, r5
   14c70:	cmp	r3, r0
   14c74:	bcc	14c80 <__assert_fail@plt+0x36e0>
   14c78:	mov	r0, #2
   14c7c:	pop	{r4, r5, r6, r7, r8, pc}
   14c80:	sub	r0, r0, r5
   14c84:	sub	r1, r0, r8
   14c88:	str	r1, [r7, #4]
   14c8c:	lsr	r3, r1, #2
   14c90:	sub	r3, r3, #2
   14c94:	cmp	r3, #0
   14c98:	str	r3, [r7, #16]
   14c9c:	beq	14d04 <__assert_fail@plt+0x3764>
   14ca0:	ldr	r3, [pc, #116]	; 14d1c <__assert_fail@plt+0x377c>
   14ca4:	mov	r0, #0
   14ca8:	str	r1, [r7, #12]
   14cac:	str	r3, [r7, #32]
   14cb0:	str	r0, [r7, #20]
   14cb4:	str	r0, [r7, #24]
   14cb8:	str	r0, [r7, #28]
   14cbc:	str	r0, [r7, #36]	; 0x24
   14cc0:	str	r0, [r7, #40]	; 0x28
   14cc4:	pop	{r4, r5, r6, r7, r8, pc}
   14cc8:	mov	r0, #1
   14ccc:	pop	{r4, r5, r6, r7, r8, pc}
   14cd0:	mov	r3, #4096	; 0x1000
   14cd4:	str	r3, [r0, #8]
   14cd8:	mov	r0, r4
   14cdc:	bl	11294 <sysconf@plt>
   14ce0:	cmp	r0, #0
   14ce4:	strgt	r0, [r7, #4]
   14ce8:	strgt	r4, [r7]
   14cec:	movgt	r5, r4
   14cf0:	mvnle	r0, #-2147483648	; 0x80000000
   14cf4:	strle	r4, [r7]
   14cf8:	movle	r5, r4
   14cfc:	strle	r0, [r7, #4]
   14d00:	b	14c6c <__assert_fail@plt+0x36cc>
   14d04:	ldr	r3, [pc, #20]	; 14d20 <__assert_fail@plt+0x3780>
   14d08:	ldr	r2, [pc, #20]	; 14d24 <__assert_fail@plt+0x3784>
   14d0c:	ldr	r1, [pc, #20]	; 14d28 <__assert_fail@plt+0x3788>
   14d10:	ldr	r0, [pc, #20]	; 14d2c <__assert_fail@plt+0x378c>
   14d14:	bl	115a0 <__assert_fail@plt>
   14d18:			; <UNDEFINED> instruction: 0x000301bc
   14d1c:	andeq	r4, r1, r4, lsl #7
   14d20:	muleq	r1, r0, r2
   14d24:	andeq	r0, r0, r6, lsl #4
   14d28:	strdeq	pc, [r1], -r4
   14d2c:	andeq	pc, r1, r4, lsl r4	; <UNPREDICTABLE>
   14d30:	ldr	r3, [r0, #4]
   14d34:	cmp	r3, #131072	; 0x20000
   14d38:	bcc	14d48 <__assert_fail@plt+0x37a8>
   14d3c:	ldr	r3, [r0, #8]
   14d40:	cmp	r3, #131072	; 0x20000
   14d44:	movls	r3, #131072	; 0x20000
   14d48:	str	r3, [r0, #12]
   14d4c:	bx	lr
   14d50:	ldr	r0, [r0, #12]
   14d54:	ldr	r3, [pc, #104]	; 14dc4 <__assert_fail@plt+0x3824>
   14d58:	push	{r4, r5, r6, lr}
   14d5c:	cmp	r0, r3
   14d60:	mov	r5, #0
   14d64:	str	r5, [r1]
   14d68:	str	r5, [r1, #16]
   14d6c:	str	r5, [r1, #4]
   14d70:	str	r5, [r1, #8]
   14d74:	str	r5, [r1, #36]	; 0x24
   14d78:	str	r5, [r1, #40]	; 0x28
   14d7c:	bhi	14db0 <__assert_fail@plt+0x3810>
   14d80:	add	r0, r0, #1
   14d84:	mov	r4, r1
   14d88:	mov	r6, r2
   14d8c:	bl	1be70 <__assert_fail@plt+0xa8d0>
   14d90:	mvn	r3, #0
   14d94:	str	r5, [r4, #20]
   14d98:	str	r5, [r4, #16]
   14d9c:	str	r5, [r4, #28]
   14da0:	str	r6, [r4, #24]
   14da4:	str	r3, [r4, #32]
   14da8:	str	r0, [r4, #12]
   14dac:	pop	{r4, r5, r6, pc}
   14db0:	ldr	r3, [pc, #16]	; 14dc8 <__assert_fail@plt+0x3828>
   14db4:	mov	r2, #572	; 0x23c
   14db8:	ldr	r1, [pc, #12]	; 14dcc <__assert_fail@plt+0x382c>
   14dbc:	ldr	r0, [pc, #12]	; 14dd0 <__assert_fail@plt+0x3830>
   14dc0:	bl	115a0 <__assert_fail@plt>
   14dc4:	svcvc	0x00fff7ff
   14dc8:	andeq	pc, r1, r4, lsr #5
   14dcc:	strdeq	pc, [r1], -r4
   14dd0:	andeq	pc, r1, ip, lsr #8
   14dd4:	ldr	ip, [r0, #28]
   14dd8:	ldr	r0, [r1, #20]
   14ddc:	mov	r2, #0
   14de0:	mvn	r3, #0
   14de4:	str	ip, [r1]
   14de8:	str	r0, [r1, #16]
   14dec:	str	r2, [r1, #28]
   14df0:	str	r3, [r1, #32]
   14df4:	bx	lr
   14df8:	ldr	r3, [r0]
   14dfc:	push	{r4, r5, r6, lr}
   14e00:	cmp	r3, #0
   14e04:	sub	sp, sp, #16
   14e08:	beq	14ec8 <__assert_fail@plt+0x3928>
   14e0c:	mov	r4, #0
   14e10:	mov	r5, r0
   14e14:	mov	r6, r4
   14e18:	mov	r0, r3
   14e1c:	bl	113f0 <strlen@plt>
   14e20:	ldr	r3, [r5, #4]!
   14e24:	add	r4, r4, #1
   14e28:	cmp	r3, #0
   14e2c:	add	r6, r6, r0
   14e30:	bne	14e18 <__assert_fail@plt+0x3878>
   14e34:	ldr	r0, [pc, #168]	; 14ee4 <__assert_fail@plt+0x3944>
   14e38:	bl	11378 <getenv@plt>
   14e3c:	cmp	r0, #0
   14e40:	beq	14e74 <__assert_fail@plt+0x38d4>
   14e44:	mov	r3, #0
   14e48:	str	r3, [sp]
   14e4c:	mov	r2, #10
   14e50:	add	r3, sp, #12
   14e54:	add	r1, sp, #8
   14e58:	bl	1c4f8 <__assert_fail@plt+0xaf58>
   14e5c:	cmp	r0, #0
   14e60:	bne	14edc <__assert_fail@plt+0x393c>
   14e64:	ldr	r3, [sp, #12]
   14e68:	cmp	r3, r4
   14e6c:	movcc	r0, #1
   14e70:	bcc	14eb4 <__assert_fail@plt+0x3914>
   14e74:	ldr	r0, [pc, #108]	; 14ee8 <__assert_fail@plt+0x3948>
   14e78:	bl	11378 <getenv@plt>
   14e7c:	subs	r3, r0, #0
   14e80:	beq	14ebc <__assert_fail@plt+0x391c>
   14e84:	mov	r3, #0
   14e88:	str	r3, [sp]
   14e8c:	mov	r2, #10
   14e90:	add	r3, sp, #12
   14e94:	add	r1, sp, #8
   14e98:	bl	1c4f8 <__assert_fail@plt+0xaf58>
   14e9c:	cmp	r0, #0
   14ea0:	bne	14ed4 <__assert_fail@plt+0x3934>
   14ea4:	ldr	r0, [sp, #12]
   14ea8:	cmp	r0, r6
   14eac:	movcs	r0, #0
   14eb0:	movcc	r0, #1
   14eb4:	add	sp, sp, #16
   14eb8:	pop	{r4, r5, r6, pc}
   14ebc:	mov	r0, r3
   14ec0:	add	sp, sp, #16
   14ec4:	pop	{r4, r5, r6, pc}
   14ec8:	mov	r4, r3
   14ecc:	mov	r6, r3
   14ed0:	b	14e34 <__assert_fail@plt+0x3894>
   14ed4:	ldr	r0, [pc, #12]	; 14ee8 <__assert_fail@plt+0x3948>
   14ed8:	bl	115ac <__assert_fail@plt+0xc>
   14edc:	ldr	r0, [pc]	; 14ee4 <__assert_fail@plt+0x3944>
   14ee0:	bl	115ac <__assert_fail@plt+0xc>
   14ee4:	andeq	pc, r1, r0, asr r4	; <UNPREDICTABLE>
   14ee8:	andeq	pc, r1, r8, ror r4	; <UNPREDICTABLE>
   14eec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14ef0:	ldr	r0, [pc, #212]	; 14fcc <__assert_fail@plt+0x3a2c>
   14ef4:	bl	15cf8 <__assert_fail@plt+0x4758>
   14ef8:	subs	r8, r0, #0
   14efc:	beq	14fc4 <__assert_fail@plt+0x3a24>
   14f00:	bl	11420 <__errno_location@plt>
   14f04:	mov	r9, #0
   14f08:	mov	r5, r9
   14f0c:	mvn	r6, #0
   14f10:	mov	sl, #1
   14f14:	mov	r7, r0
   14f18:	str	r5, [r7]
   14f1c:	mov	r0, r8
   14f20:	bl	11504 <readdir64@plt>
   14f24:	mov	r1, r5
   14f28:	subs	r4, r0, #0
   14f2c:	beq	14f6c <__assert_fail@plt+0x39cc>
   14f30:	ldrb	r3, [r4, #19]
   14f34:	add	r0, r4, #19
   14f38:	cmp	r3, #46	; 0x2e
   14f3c:	bne	14f58 <__assert_fail@plt+0x39b8>
   14f40:	ldrb	r3, [r4, #20]
   14f44:	cmp	r3, #0
   14f48:	beq	14f18 <__assert_fail@plt+0x3978>
   14f4c:	ldrh	r3, [r4, #20]
   14f50:	cmp	r3, #46	; 0x2e
   14f54:	beq	14f18 <__assert_fail@plt+0x3978>
   14f58:	bl	156b4 <__assert_fail@plt+0x4114>
   14f5c:	mov	r9, sl
   14f60:	cmp	r6, r0
   14f64:	movlt	r6, r0
   14f68:	b	14f18 <__assert_fail@plt+0x3978>
   14f6c:	ldr	r5, [r7]
   14f70:	cmp	r5, #0
   14f74:	bne	14f90 <__assert_fail@plt+0x39f0>
   14f78:	mov	r0, r8
   14f7c:	bl	11594 <closedir@plt>
   14f80:	cmp	r9, #0
   14f84:	beq	14fc4 <__assert_fail@plt+0x3a24>
   14f88:	mov	r0, r6
   14f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f90:	ldr	r2, [pc, #52]	; 14fcc <__assert_fail@plt+0x3a2c>
   14f94:	mov	r1, #8
   14f98:	bl	1950c <__assert_fail@plt+0x7f6c>
   14f9c:	mov	r1, r5
   14fa0:	ldr	r2, [pc, #40]	; 14fd0 <__assert_fail@plt+0x3a30>
   14fa4:	mvn	r6, #0
   14fa8:	mov	r3, r0
   14fac:	mov	r0, r4
   14fb0:	bl	11354 <error@plt>
   14fb4:	mov	r0, r8
   14fb8:	bl	11594 <closedir@plt>
   14fbc:	mov	r0, r6
   14fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14fc4:	mvn	r6, #0
   14fc8:	b	14f88 <__assert_fail@plt+0x39e8>
   14fcc:			; <UNDEFINED> instruction: 0x0001f4bc
   14fd0:			; <UNDEFINED> instruction: 0x0001f7b0
   14fd4:	push	{r4, r5, r6, lr}
   14fd8:	mov	r4, r1
   14fdc:	mov	r1, #1
   14fe0:	mov	r6, r0
   14fe4:	bl	1cb14 <__assert_fail@plt+0xb574>
   14fe8:	ands	r5, r0, #1
   14fec:	movne	r5, #0
   14ff0:	bne	1502c <__assert_fail@plt+0x3a8c>
   14ff4:	ldr	r1, [r4, #4]
   14ff8:	add	r2, r4, #8
   14ffc:	add	r1, r1, #1
   15000:	ldr	r0, [r4]
   15004:	lsl	r1, r1, #2
   15008:	bl	15824 <__assert_fail@plt+0x4284>
   1500c:	cmp	r0, #0
   15010:	strne	r0, [r4]
   15014:	ldrne	r3, [r4, #4]
   15018:	mvneq	r5, #0
   1501c:	strne	r6, [r0, r3, lsl #2]
   15020:	ldrne	r3, [r4, #4]
   15024:	addne	r3, r3, #1
   15028:	strne	r3, [r4, #4]
   1502c:	mov	r0, r5
   15030:	pop	{r4, r5, r6, pc}
   15034:	push	{r4, r5, r6, lr}
   15038:	mov	r4, r1
   1503c:	mov	r1, #1
   15040:	mov	r5, r0
   15044:	bl	1cb14 <__assert_fail@plt+0xb574>
   15048:	tst	r0, #1
   1504c:	bne	150a8 <__assert_fail@plt+0x3b08>
   15050:	ldmib	r4, {r0, r3}
   15054:	cmp	r3, r0
   15058:	bcs	15094 <__assert_fail@plt+0x3af4>
   1505c:	ldr	r1, [r4]
   15060:	add	r2, r1, r3, lsl #2
   15064:	ldr	r1, [r1, r3, lsl #2]
   15068:	cmp	r5, r1
   1506c:	ble	150a0 <__assert_fail@plt+0x3b00>
   15070:	add	r3, r3, #1
   15074:	b	15088 <__assert_fail@plt+0x3ae8>
   15078:	ldr	r1, [r2, #4]!
   1507c:	add	r3, r3, #1
   15080:	cmp	r5, r1
   15084:	ble	150a0 <__assert_fail@plt+0x3b00>
   15088:	cmp	r0, r3
   1508c:	str	r3, [r4, #8]
   15090:	bne	15078 <__assert_fail@plt+0x3ad8>
   15094:	mvn	r0, #0
   15098:	str	r5, [r4, #12]
   1509c:	pop	{r4, r5, r6, pc}
   150a0:	cmp	r5, r1
   150a4:	bne	15094 <__assert_fail@plt+0x3af4>
   150a8:	mov	r0, #0
   150ac:	pop	{r4, r5, r6, pc}
   150b0:	cmp	r0, #0
   150b4:	ble	1520c <__assert_fail@plt+0x3c6c>
   150b8:	mov	r3, #0
   150bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150c0:	mov	r2, r0
   150c4:	sub	sp, sp, #524	; 0x20c
   150c8:	mov	fp, r1
   150cc:	mov	r5, r3
   150d0:	mov	r6, #5
   150d4:	mov	r9, #1
   150d8:	str	r0, [sp, #4]
   150dc:	str	r3, [sp]
   150e0:	sub	r8, r2, r3
   150e4:	cmp	r8, #64	; 0x40
   150e8:	movge	r8, #64	; 0x40
   150ec:	cmp	r8, #0
   150f0:	ble	151e8 <__assert_fail@plt+0x3c48>
   150f4:	add	r7, sp, #8
   150f8:	mov	r2, r3
   150fc:	add	r1, r7, r8, lsl #3
   15100:	mov	r4, r7
   15104:	strh	r6, [r4, #4]
   15108:	strh	r5, [r4, #6]
   1510c:	str	r2, [r4], #8
   15110:	cmp	r4, r1
   15114:	add	r2, r2, #1
   15118:	bne	15104 <__assert_fail@plt+0x3b64>
   1511c:	mov	r2, r5
   15120:	mov	r1, r8
   15124:	add	r0, sp, #8
   15128:	bl	112e8 <poll@plt>
   1512c:	cmn	r0, #1
   15130:	beq	15200 <__assert_fail@plt+0x3c60>
   15134:	ldrsh	r2, [r7, #6]
   15138:	cmp	r2, #32
   1513c:	beq	151b8 <__assert_fail@plt+0x3c18>
   15140:	ldr	sl, [r7]
   15144:	mov	r1, r9
   15148:	mov	r0, sl
   1514c:	bl	1cb14 <__assert_fail@plt+0xb574>
   15150:	tst	r0, #1
   15154:	bne	151b8 <__assert_fail@plt+0x3c18>
   15158:	ldr	r1, [fp, #8]
   1515c:	ldr	lr, [fp, #4]
   15160:	cmp	lr, r1
   15164:	bls	151a0 <__assert_fail@plt+0x3c00>
   15168:	ldr	ip, [fp]
   1516c:	add	r0, ip, r1, lsl #2
   15170:	ldr	ip, [ip, r1, lsl #2]
   15174:	cmp	sl, ip
   15178:	ble	151b0 <__assert_fail@plt+0x3c10>
   1517c:	add	r1, r1, #1
   15180:	b	15194 <__assert_fail@plt+0x3bf4>
   15184:	ldr	ip, [r0, #4]!
   15188:	add	r1, r1, #1
   1518c:	cmp	sl, ip
   15190:	ble	151b0 <__assert_fail@plt+0x3c10>
   15194:	cmp	lr, r1
   15198:	str	r1, [fp, #8]
   1519c:	bne	15184 <__assert_fail@plt+0x3be4>
   151a0:	mvn	r0, #0
   151a4:	str	sl, [fp, #12]
   151a8:	add	sp, sp, #524	; 0x20c
   151ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151b0:	cmp	sl, ip
   151b4:	bne	151a0 <__assert_fail@plt+0x3c00>
   151b8:	add	r7, r7, #8
   151bc:	cmp	r7, r4
   151c0:	bne	15134 <__assert_fail@plt+0x3b94>
   151c4:	ldr	r3, [sp]
   151c8:	ldr	r2, [sp, #4]
   151cc:	add	r3, r3, r8
   151d0:	cmp	r2, r3
   151d4:	str	r3, [sp]
   151d8:	bgt	150e0 <__assert_fail@plt+0x3b40>
   151dc:	mov	r0, #0
   151e0:	add	sp, sp, #524	; 0x20c
   151e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151e8:	mov	r2, r5
   151ec:	mov	r1, r8
   151f0:	add	r0, sp, #8
   151f4:	bl	112e8 <poll@plt>
   151f8:	cmn	r0, #1
   151fc:	bne	151c4 <__assert_fail@plt+0x3c24>
   15200:	mvn	r0, #0
   15204:	add	sp, sp, #524	; 0x20c
   15208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1520c:	mov	r0, #0
   15210:	bx	lr
   15214:	cmp	r0, #0
   15218:	ble	1537c <__assert_fail@plt+0x3ddc>
   1521c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15220:	sub	sp, sp, #532	; 0x214
   15224:	mov	r3, #0
   15228:	str	r3, [sp, #8]
   1522c:	mov	r5, r3
   15230:	add	r3, r1, #8
   15234:	str	r3, [sp, #4]
   15238:	ldr	r3, [sp, #8]
   1523c:	mov	fp, r1
   15240:	mov	r6, #5
   15244:	mov	r9, #1
   15248:	mov	r2, r0
   1524c:	str	r0, [sp, #12]
   15250:	sub	sl, r2, r3
   15254:	cmp	sl, #64	; 0x40
   15258:	movge	sl, #64	; 0x40
   1525c:	cmp	sl, #0
   15260:	ble	15358 <__assert_fail@plt+0x3db8>
   15264:	add	r7, sp, #16
   15268:	mov	r2, r3
   1526c:	add	r1, r7, sl, lsl #3
   15270:	mov	r4, r7
   15274:	strh	r6, [r4, #4]
   15278:	strh	r5, [r4, #6]
   1527c:	str	r2, [r4], #8
   15280:	cmp	r4, r1
   15284:	add	r2, r2, #1
   15288:	bne	15274 <__assert_fail@plt+0x3cd4>
   1528c:	mov	r2, r5
   15290:	mov	r1, sl
   15294:	add	r0, sp, #16
   15298:	bl	112e8 <poll@plt>
   1529c:	cmn	r0, #1
   152a0:	beq	15370 <__assert_fail@plt+0x3dd0>
   152a4:	mov	r3, fp
   152a8:	mov	fp, sl
   152ac:	mov	sl, r3
   152b0:	b	152c0 <__assert_fail@plt+0x3d20>
   152b4:	add	r7, r7, #8
   152b8:	cmp	r4, r7
   152bc:	beq	15328 <__assert_fail@plt+0x3d88>
   152c0:	ldrsh	r2, [r7, #6]
   152c4:	mov	r1, r9
   152c8:	cmp	r2, #32
   152cc:	beq	152b4 <__assert_fail@plt+0x3d14>
   152d0:	ldr	r8, [r7]
   152d4:	mov	r0, r8
   152d8:	bl	1cb14 <__assert_fail@plt+0xb574>
   152dc:	tst	r0, #1
   152e0:	bne	152b4 <__assert_fail@plt+0x3d14>
   152e4:	ldr	r1, [sl, #4]
   152e8:	ldr	r2, [sp, #4]
   152ec:	add	r1, r1, #1
   152f0:	ldr	r0, [sl]
   152f4:	lsl	r1, r1, #2
   152f8:	bl	15824 <__assert_fail@plt+0x4284>
   152fc:	cmp	r0, #0
   15300:	beq	15370 <__assert_fail@plt+0x3dd0>
   15304:	ldr	r2, [sl, #4]
   15308:	str	r0, [sl]
   1530c:	add	r7, r7, #8
   15310:	str	r8, [r0, r2, lsl #2]
   15314:	ldr	r2, [sl, #4]
   15318:	cmp	r4, r7
   1531c:	add	r2, r2, #1
   15320:	str	r2, [sl, #4]
   15324:	bne	152c0 <__assert_fail@plt+0x3d20>
   15328:	mov	r3, sl
   1532c:	mov	sl, fp
   15330:	mov	fp, r3
   15334:	ldr	r3, [sp, #8]
   15338:	ldr	r2, [sp, #12]
   1533c:	add	r3, r3, sl
   15340:	cmp	r2, r3
   15344:	str	r3, [sp, #8]
   15348:	bgt	15250 <__assert_fail@plt+0x3cb0>
   1534c:	mov	r0, #0
   15350:	add	sp, sp, #532	; 0x214
   15354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15358:	mov	r2, r5
   1535c:	mov	r1, sl
   15360:	add	r0, sp, #16
   15364:	bl	112e8 <poll@plt>
   15368:	cmn	r0, #1
   1536c:	bne	15334 <__assert_fail@plt+0x3d94>
   15370:	mvn	r0, #0
   15374:	add	sp, sp, #532	; 0x214
   15378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1537c:	mov	r0, #0
   15380:	bx	lr
   15384:	push	{r4, r5, lr}
   15388:	sub	sp, sp, #20
   1538c:	bl	14eec <__assert_fail@plt+0x394c>
   15390:	cmp	r0, #0
   15394:	movge	r5, sp
   15398:	blt	153d0 <__assert_fail@plt+0x3e30>
   1539c:	cmn	r0, #-2147483647	; 0x80000001
   153a0:	mov	r3, #0
   153a4:	mov	r1, r5
   153a8:	addne	r0, r0, #1
   153ac:	str	r3, [sp]
   153b0:	str	r3, [sp, #8]
   153b4:	str	r3, [sp, #4]
   153b8:	bl	15214 <__assert_fail@plt+0x3c74>
   153bc:	ldr	r3, [pc, #88]	; 1541c <__assert_fail@plt+0x3e7c>
   153c0:	ldm	sp, {r1, r2}
   153c4:	stm	r3, {r1, r2}
   153c8:	add	sp, sp, #20
   153cc:	pop	{r4, r5, pc}
   153d0:	mov	r0, #4
   153d4:	bl	11294 <sysconf@plt>
   153d8:	mov	r1, sp
   153dc:	mov	r5, sp
   153e0:	cmn	r0, #1
   153e4:	movne	r4, r0
   153e8:	mov	r0, #7
   153ec:	moveq	r4, #20
   153f0:	bl	112ac <getrlimit64@plt>
   153f4:	cmp	r0, #0
   153f8:	movne	r0, r4
   153fc:	bne	1539c <__assert_fail@plt+0x3dfc>
   15400:	ldrd	r0, [sp]
   15404:	mvn	r3, #0
   15408:	mvn	r2, #0
   1540c:	cmp	r1, r3
   15410:	cmpeq	r0, r2
   15414:	moveq	r0, r4
   15418:	b	1539c <__assert_fail@plt+0x3dfc>
   1541c:	muleq	r3, ip, r2
   15420:	push	{r1, r2, r3}
   15424:	push	{r4, r5, r6, r7, r8, r9, lr}
   15428:	sub	sp, sp, #8
   1542c:	ldr	r6, [pc, #156]	; 154d0 <__assert_fail@plt+0x3f30>
   15430:	ldr	r4, [sp, #36]	; 0x24
   15434:	mov	r8, r0
   15438:	ldrb	r7, [r6, #8]
   1543c:	ands	r5, r4, #64	; 0x40
   15440:	addne	r3, sp, #40	; 0x28
   15444:	strne	r3, [sp, #4]
   15448:	ldrne	r5, [sp, #40]	; 0x28
   1544c:	cmp	r7, #0
   15450:	beq	15498 <__assert_fail@plt+0x3ef8>
   15454:	orr	r1, r4, #524288	; 0x80000
   15458:	mov	r2, r5
   1545c:	mov	r0, r8
   15460:	bl	15d88 <__assert_fail@plt+0x47e8>
   15464:	subs	r4, r0, #0
   15468:	blt	15478 <__assert_fail@plt+0x3ed8>
   1546c:	ldrb	r3, [r6, #9]
   15470:	cmp	r3, #0
   15474:	beq	1548c <__assert_fail@plt+0x3eec>
   15478:	mov	r0, r4
   1547c:	add	sp, sp, #8
   15480:	pop	{r4, r5, r6, r7, r8, r9, lr}
   15484:	add	sp, sp, #12
   15488:	bx	lr
   1548c:	mov	r1, #1
   15490:	bl	15a50 <__assert_fail@plt+0x44b0>
   15494:	b	15478 <__assert_fail@plt+0x3ed8>
   15498:	mov	r1, #524288	; 0x80000
   1549c:	ldr	r0, [pc, #48]	; 154d4 <__assert_fail@plt+0x3f34>
   154a0:	bl	15d88 <__assert_fail@plt+0x47e8>
   154a4:	subs	r9, r0, #0
   154a8:	blt	154c0 <__assert_fail@plt+0x3f20>
   154ac:	mov	r1, #1
   154b0:	bl	1cb14 <__assert_fail@plt+0xb574>
   154b4:	and	r7, r0, #1
   154b8:	mov	r0, r9
   154bc:	bl	11588 <close@plt>
   154c0:	mov	r3, #1
   154c4:	strb	r7, [r6, #9]
   154c8:	strb	r3, [r6, #8]
   154cc:	b	15454 <__assert_fail@plt+0x3eb4>
   154d0:	muleq	r3, ip, r2
   154d4:	andeq	pc, r1, ip, asr #9
   154d8:	push	{r4, lr}
   154dc:	ldr	r4, [pc, #20]	; 154f8 <__assert_fail@plt+0x3f58>
   154e0:	ldr	r0, [r4]
   154e4:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   154e8:	mov	r3, #0
   154ec:	str	r3, [r4]
   154f0:	str	r3, [r4, #4]
   154f4:	pop	{r4, pc}
   154f8:	muleq	r3, ip, r2
   154fc:	push	{r4, lr}
   15500:	ldr	r0, [pc, #12]	; 15514 <__assert_fail@plt+0x3f74>
   15504:	bl	11378 <getenv@plt>
   15508:	adds	r0, r0, #0
   1550c:	movne	r0, #1
   15510:	pop	{r4, pc}
   15514:	ldrdeq	pc, [r1], -r0
   15518:	ldr	r3, [pc, #212]	; 155f4 <__assert_fail@plt+0x4054>
   1551c:	push	{r4, r5, r6, r7, lr}
   15520:	sub	sp, sp, #20
   15524:	ldm	r3, {r6, r7}
   15528:	bl	14eec <__assert_fail@plt+0x394c>
   1552c:	cmp	r0, #0
   15530:	movge	r5, sp
   15534:	blt	155a8 <__assert_fail@plt+0x4008>
   15538:	cmn	r0, #-2147483647	; 0x80000001
   1553c:	addne	r0, r0, #1
   15540:	mov	r1, r5
   15544:	mov	r4, #0
   15548:	mvn	r3, #0
   1554c:	stm	sp, {r6, r7}
   15550:	str	r4, [sp, #8]
   15554:	str	r3, [sp, #12]
   15558:	bl	150b0 <__assert_fail@plt+0x3b10>
   1555c:	ldr	r5, [sp, #12]
   15560:	cmp	r5, r4
   15564:	blt	155a0 <__assert_fail@plt+0x4000>
   15568:	mov	r2, #5
   1556c:	ldr	r1, [pc, #132]	; 155f8 <__assert_fail@plt+0x4058>
   15570:	mov	r0, r4
   15574:	bl	11288 <dcgettext@plt>
   15578:	mov	r3, r5
   1557c:	mov	r1, r4
   15580:	mov	r2, r0
   15584:	mov	r0, r4
   15588:	bl	11354 <error@plt>
   1558c:	ldr	r3, [pc, #104]	; 155fc <__assert_fail@plt+0x405c>
   15590:	mov	r2, #396	; 0x18c
   15594:	ldr	r1, [pc, #100]	; 15600 <__assert_fail@plt+0x4060>
   15598:	ldr	r0, [pc, #100]	; 15604 <__assert_fail@plt+0x4064>
   1559c:	bl	115a0 <__assert_fail@plt>
   155a0:	add	sp, sp, #20
   155a4:	pop	{r4, r5, r6, r7, pc}
   155a8:	mov	r0, #4
   155ac:	bl	11294 <sysconf@plt>
   155b0:	mov	r1, sp
   155b4:	mov	r5, sp
   155b8:	cmn	r0, #1
   155bc:	movne	r4, r0
   155c0:	mov	r0, #7
   155c4:	moveq	r4, #20
   155c8:	bl	112ac <getrlimit64@plt>
   155cc:	cmp	r0, #0
   155d0:	movne	r0, r4
   155d4:	bne	15538 <__assert_fail@plt+0x3f98>
   155d8:	ldrd	r0, [sp]
   155dc:	mvn	r3, #0
   155e0:	mvn	r2, #0
   155e4:	cmp	r1, r3
   155e8:	cmpeq	r0, r2
   155ec:	moveq	r0, r4
   155f0:	b	15538 <__assert_fail@plt+0x3f98>
   155f4:	muleq	r3, ip, r2
   155f8:	andeq	pc, r1, ip, ror #9
   155fc:	andeq	pc, r1, r0, lsr #9
   15600:	andeq	pc, r1, r4, lsl #11
   15604:	muleq	r1, r0, r5
   15608:	ldr	r3, [pc, #136]	; 15698 <__assert_fail@plt+0x40f8>
   1560c:	push	{r4, r5, r6, r7, r8, lr}
   15610:	mov	r5, r0
   15614:	sub	sp, sp, #16
   15618:	ldr	r0, [r3]
   1561c:	bl	1cce8 <__assert_fail@plt+0xb748>
   15620:	ldr	ip, [pc, #116]	; 1569c <__assert_fail@plt+0x40fc>
   15624:	ldr	r3, [pc, #116]	; 156a0 <__assert_fail@plt+0x4100>
   15628:	mov	r2, #5
   1562c:	ldr	r1, [pc, #112]	; 156a4 <__assert_fail@plt+0x4104>
   15630:	mov	r0, #0
   15634:	ldr	r4, [ip]
   15638:	ldr	r7, [r3]
   1563c:	bl	11288 <dcgettext@plt>
   15640:	mov	r2, #5
   15644:	ldr	r1, [pc, #92]	; 156a8 <__assert_fail@plt+0x4108>
   15648:	mov	r8, r0
   1564c:	mov	r0, #0
   15650:	bl	11288 <dcgettext@plt>
   15654:	mov	r2, #5
   15658:	ldr	r1, [pc, #76]	; 156ac <__assert_fail@plt+0x410c>
   1565c:	mov	r6, r0
   15660:	mov	r0, #0
   15664:	bl	11288 <dcgettext@plt>
   15668:	mov	r2, #0
   1566c:	str	r2, [sp, #12]
   15670:	str	r8, [sp]
   15674:	mov	r3, r7
   15678:	str	r6, [sp, #4]
   1567c:	mov	r1, r5
   15680:	ldr	r2, [pc, #40]	; 156b0 <__assert_fail@plt+0x4110>
   15684:	str	r0, [sp, #8]
   15688:	mov	r0, r4
   1568c:	bl	1bca0 <__assert_fail@plt+0xa700>
   15690:	add	sp, sp, #16
   15694:	pop	{r4, r5, r6, r7, r8, pc}
   15698:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1569c:	ldrdeq	r0, [r3], -ip
   156a0:	andeq	r0, r3, r0, ror r1
   156a4:	muleq	r1, ip, r5
   156a8:	andeq	pc, r1, ip, lsr #11
   156ac:			; <UNDEFINED> instruction: 0x0001f5bc
   156b0:	andeq	pc, r1, ip, asr #11
   156b4:	push	{r4, r5, r6, r7, r8, lr}
   156b8:	sub	sp, sp, #16
   156bc:	mov	r4, r0
   156c0:	mov	r7, r1
   156c4:	bl	11420 <__errno_location@plt>
   156c8:	mov	r6, #0
   156cc:	mov	r2, #10
   156d0:	add	r1, sp, #12
   156d4:	str	r6, [r0]
   156d8:	mov	r5, r0
   156dc:	mov	r0, r4
   156e0:	bl	111ec <strtol@plt>
   156e4:	sub	r3, r0, #-2147483647	; 0x80000001
   156e8:	cmn	r3, #3
   156ec:	bls	15704 <__assert_fail@plt+0x4164>
   156f0:	ldr	r1, [r5]
   156f4:	ldr	r2, [pc, #184]	; 157b4 <__assert_fail@plt+0x4214>
   156f8:	mov	r3, r4
   156fc:	mov	r0, #1
   15700:	bl	11354 <error@plt>
   15704:	ldr	r3, [sp, #12]
   15708:	ldrb	r8, [r3]
   1570c:	cmp	r8, #0
   15710:	bne	15724 <__assert_fail@plt+0x4184>
   15714:	cmp	r4, r3
   15718:	beq	15778 <__assert_fail@plt+0x41d8>
   1571c:	add	sp, sp, #16
   15720:	pop	{r4, r5, r6, r7, r8, pc}
   15724:	mov	r2, #5
   15728:	ldr	r1, [pc, #136]	; 157b8 <__assert_fail@plt+0x4218>
   1572c:	mov	r0, r6
   15730:	ldr	r5, [r5]
   15734:	bl	11288 <dcgettext@plt>
   15738:	ldr	r2, [sp, #12]
   1573c:	mov	r1, r7
   15740:	mov	r8, r0
   15744:	mov	r0, r6
   15748:	bl	1950c <__assert_fail@plt+0x7f6c>
   1574c:	mov	r2, r4
   15750:	mov	r1, r7
   15754:	mov	r6, r0
   15758:	mov	r0, #1
   1575c:	bl	1950c <__assert_fail@plt+0x7f6c>
   15760:	mov	r3, r6
   15764:	mov	r2, r8
   15768:	mov	r1, r5
   1576c:	str	r0, [sp]
   15770:	mov	r0, #1
   15774:	bl	11354 <error@plt>
   15778:	mov	r2, #5
   1577c:	ldr	r1, [pc, #56]	; 157bc <__assert_fail@plt+0x421c>
   15780:	mov	r0, r8
   15784:	ldr	r5, [r5]
   15788:	bl	11288 <dcgettext@plt>
   1578c:	mov	r2, r4
   15790:	mov	r1, r7
   15794:	mov	r6, r0
   15798:	mov	r0, r8
   1579c:	bl	1950c <__assert_fail@plt+0x7f6c>
   157a0:	mov	r2, r6
   157a4:	mov	r1, r5
   157a8:	mov	r3, r0
   157ac:	mov	r0, #1
   157b0:	b	15700 <__assert_fail@plt+0x4160>
   157b4:			; <UNDEFINED> instruction: 0x0001f7b0
   157b8:	andeq	pc, r1, ip, ror #11
   157bc:	andeq	pc, r1, r8, lsl #12
   157c0:	push	{r4, r5, lr}
   157c4:	mov	r2, #5
   157c8:	sub	sp, sp, #20
   157cc:	mov	r4, r0
   157d0:	mov	r5, r1
   157d4:	mov	r0, #0
   157d8:	ldr	r1, [pc, #48]	; 15810 <__assert_fail@plt+0x4270>
   157dc:	bl	11288 <dcgettext@plt>
   157e0:	ldr	ip, [pc, #44]	; 15814 <__assert_fail@plt+0x4274>
   157e4:	ldr	r1, [pc, #44]	; 15818 <__assert_fail@plt+0x4278>
   157e8:	ldr	r2, [pc, #44]	; 1581c <__assert_fail@plt+0x427c>
   157ec:	mov	r3, r5
   157f0:	stmib	sp, {r1, ip}
   157f4:	str	r2, [sp]
   157f8:	ldr	r2, [pc, #32]	; 15820 <__assert_fail@plt+0x4280>
   157fc:	mov	r1, r0
   15800:	mov	r0, r4
   15804:	bl	11414 <fprintf@plt>
   15808:	add	sp, sp, #20
   1580c:	pop	{r4, r5, pc}
   15810:	andeq	pc, r1, r0, lsr #12
   15814:	andeq	pc, r1, r8, lsl r7	; <UNPREDICTABLE>
   15818:	andeq	pc, r1, r0, lsr r7	; <UNPREDICTABLE>
   1581c:	andeq	pc, r1, ip, asr #11
   15820:	strdeq	pc, [r1], -r0
   15824:	push	{r4, r5, r6, r7, r8, lr}
   15828:	mov	r4, r1
   1582c:	mov	r5, r0
   15830:	mov	r7, r2
   15834:	bl	11420 <__errno_location@plt>
   15838:	cmp	r4, #0
   1583c:	ldr	r8, [r0]
   15840:	beq	15900 <__assert_fail@plt+0x4360>
   15844:	ldr	r1, [r7]
   15848:	mov	r6, r0
   1584c:	cmp	r1, #0
   15850:	bne	158a8 <__assert_fail@plt+0x4308>
   15854:	cmp	r4, #16
   15858:	movls	r0, #16
   1585c:	bls	15888 <__assert_fail@plt+0x42e8>
   15860:	mov	r0, #32
   15864:	b	15878 <__assert_fail@plt+0x42d8>
   15868:	lsl	r3, r0, #1
   1586c:	cmp	r3, r0
   15870:	bcc	158cc <__assert_fail@plt+0x432c>
   15874:	mov	r0, r3
   15878:	cmp	r4, r0
   1587c:	bhi	15868 <__assert_fail@plt+0x42c8>
   15880:	cmp	r1, #0
   15884:	bne	158d8 <__assert_fail@plt+0x4338>
   15888:	cmp	r5, #0
   1588c:	bne	15914 <__assert_fail@plt+0x4374>
   15890:	str	r0, [r7]
   15894:	bl	1ce7c <__assert_fail@plt+0xb8dc>
   15898:	cmp	r0, #0
   1589c:	beq	158f8 <__assert_fail@plt+0x4358>
   158a0:	str	r8, [r6]
   158a4:	pop	{r4, r5, r6, r7, r8, pc}
   158a8:	cmp	r4, r1
   158ac:	bls	158c4 <__assert_fail@plt+0x4324>
   158b0:	lsl	r0, r1, #1
   158b4:	cmp	r1, r0
   158b8:	bls	15878 <__assert_fail@plt+0x42d8>
   158bc:	mov	r0, r4
   158c0:	b	158e0 <__assert_fail@plt+0x4340>
   158c4:	mov	r0, r5
   158c8:	b	15898 <__assert_fail@plt+0x42f8>
   158cc:	cmp	r1, #0
   158d0:	mov	r0, r4
   158d4:	beq	15888 <__assert_fail@plt+0x42e8>
   158d8:	cmp	r1, r0
   158dc:	beq	158c4 <__assert_fail@plt+0x4324>
   158e0:	str	r0, [r7]
   158e4:	mov	r1, r0
   158e8:	mov	r0, r5
   158ec:	bl	1cefc <__assert_fail@plt+0xb95c>
   158f0:	cmp	r0, #0
   158f4:	bne	158a0 <__assert_fail@plt+0x4300>
   158f8:	mov	r0, #0
   158fc:	pop	{r4, r5, r6, r7, r8, pc}
   15900:	ldr	r3, [pc, #32]	; 15928 <__assert_fail@plt+0x4388>
   15904:	mov	r2, #71	; 0x47
   15908:	ldr	r1, [pc, #28]	; 1592c <__assert_fail@plt+0x438c>
   1590c:	ldr	r0, [pc, #28]	; 15930 <__assert_fail@plt+0x4390>
   15910:	bl	115a0 <__assert_fail@plt>
   15914:	ldr	r3, [pc, #12]	; 15928 <__assert_fail@plt+0x4388>
   15918:	mov	r2, #79	; 0x4f
   1591c:	ldr	r1, [pc, #8]	; 1592c <__assert_fail@plt+0x438c>
   15920:	ldr	r0, [pc, #12]	; 15934 <__assert_fail@plt+0x4394>
   15924:	bl	115a0 <__assert_fail@plt>
   15928:	andeq	pc, r1, r0, ror #14
   1592c:	andeq	pc, r1, ip, ror #14
   15930:	andeq	pc, r1, r8, ror r7	; <UNPREDICTABLE>
   15934:	andeq	pc, r1, r4, lsl #15
   15938:	push	{r4, r5, r6, r7, r8, lr}
   1593c:	mov	r4, r1
   15940:	mov	r7, r0
   15944:	mov	r6, r2
   15948:	bl	11420 <__errno_location@plt>
   1594c:	cmp	r4, #0
   15950:	ldr	r8, [r0]
   15954:	beq	15a18 <__assert_fail@plt+0x4478>
   15958:	ldr	r1, [r6]
   1595c:	mov	r5, r0
   15960:	cmp	r1, #0
   15964:	bne	159bc <__assert_fail@plt+0x441c>
   15968:	cmp	r4, #16
   1596c:	movls	r0, #16
   15970:	bls	1599c <__assert_fail@plt+0x43fc>
   15974:	mov	r0, #32
   15978:	b	1598c <__assert_fail@plt+0x43ec>
   1597c:	lsl	r3, r0, #1
   15980:	cmp	r3, r0
   15984:	bcc	159e0 <__assert_fail@plt+0x4440>
   15988:	mov	r0, r3
   1598c:	cmp	r4, r0
   15990:	bhi	1597c <__assert_fail@plt+0x43dc>
   15994:	cmp	r1, #0
   15998:	bne	159ec <__assert_fail@plt+0x444c>
   1599c:	cmp	r7, #0
   159a0:	bne	15a2c <__assert_fail@plt+0x448c>
   159a4:	str	r0, [r6]
   159a8:	bl	1ce7c <__assert_fail@plt+0xb8dc>
   159ac:	cmp	r0, #0
   159b0:	beq	15a0c <__assert_fail@plt+0x446c>
   159b4:	str	r8, [r5]
   159b8:	pop	{r4, r5, r6, r7, r8, pc}
   159bc:	cmp	r4, r1
   159c0:	bls	159d8 <__assert_fail@plt+0x4438>
   159c4:	lsl	r0, r1, #1
   159c8:	cmp	r1, r0
   159cc:	bls	1598c <__assert_fail@plt+0x43ec>
   159d0:	mov	r0, r4
   159d4:	b	159f4 <__assert_fail@plt+0x4454>
   159d8:	mov	r0, r7
   159dc:	b	159ac <__assert_fail@plt+0x440c>
   159e0:	cmp	r1, #0
   159e4:	mov	r0, r4
   159e8:	beq	1599c <__assert_fail@plt+0x43fc>
   159ec:	cmp	r1, r0
   159f0:	beq	159d8 <__assert_fail@plt+0x4438>
   159f4:	str	r0, [r6]
   159f8:	mov	r1, r0
   159fc:	mov	r0, r7
   15a00:	bl	1cefc <__assert_fail@plt+0xb95c>
   15a04:	cmp	r0, #0
   15a08:	bne	159b4 <__assert_fail@plt+0x4414>
   15a0c:	mov	r0, r7
   15a10:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   15a14:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   15a18:	ldr	r3, [pc, #32]	; 15a40 <__assert_fail@plt+0x44a0>
   15a1c:	mov	r2, #71	; 0x47
   15a20:	ldr	r1, [pc, #28]	; 15a44 <__assert_fail@plt+0x44a4>
   15a24:	ldr	r0, [pc, #28]	; 15a48 <__assert_fail@plt+0x44a8>
   15a28:	bl	115a0 <__assert_fail@plt>
   15a2c:	ldr	r3, [pc, #12]	; 15a40 <__assert_fail@plt+0x44a0>
   15a30:	mov	r2, #79	; 0x4f
   15a34:	ldr	r1, [pc, #8]	; 15a44 <__assert_fail@plt+0x44a4>
   15a38:	ldr	r0, [pc, #12]	; 15a4c <__assert_fail@plt+0x44ac>
   15a3c:	bl	115a0 <__assert_fail@plt>
   15a40:	andeq	pc, r1, r0, ror #14
   15a44:	andeq	pc, r1, ip, ror #14
   15a48:	andeq	pc, r1, r8, ror r7	; <UNPREDICTABLE>
   15a4c:	andeq	pc, r1, r4, lsl #15
   15a50:	push	{r4, r5, r6, lr}
   15a54:	mov	r2, #0
   15a58:	mov	r4, r1
   15a5c:	mov	r1, #1
   15a60:	mov	r5, r0
   15a64:	bl	1cb14 <__assert_fail@plt+0xb574>
   15a68:	cmp	r0, #0
   15a6c:	blt	15aac <__assert_fail@plt+0x450c>
   15a70:	cmp	r4, #0
   15a74:	orrne	r2, r0, #1
   15a78:	biceq	r2, r0, #1
   15a7c:	cmp	r2, r0
   15a80:	beq	15aa4 <__assert_fail@plt+0x4504>
   15a84:	mov	r0, r5
   15a88:	mov	r1, #2
   15a8c:	bl	1cb14 <__assert_fail@plt+0xb574>
   15a90:	cmn	r0, #1
   15a94:	movne	r0, #0
   15a98:	moveq	r0, #1
   15a9c:	rsb	r0, r0, #0
   15aa0:	pop	{r4, r5, r6, pc}
   15aa4:	mov	r0, #0
   15aa8:	pop	{r4, r5, r6, pc}
   15aac:	mvn	r0, #0
   15ab0:	pop	{r4, r5, r6, pc}
   15ab4:	mov	r2, #0
   15ab8:	ldr	r1, [pc]	; 15ac0 <__assert_fail@plt+0x4520>
   15abc:	b	1cb14 <__assert_fail@plt+0xb574>
   15ac0:	andeq	r0, r0, r6, lsl #8
   15ac4:	ldr	r3, [pc, #4]	; 15ad0 <__assert_fail@plt+0x4530>
   15ac8:	str	r0, [r3]
   15acc:	bx	lr
   15ad0:	andeq	r0, r3, r8, lsr #5
   15ad4:	push	{r4, r5, r6, lr}
   15ad8:	sub	sp, sp, #8
   15adc:	ldr	r4, [pc, #248]	; 15bdc <__assert_fail@plt+0x463c>
   15ae0:	ldr	r5, [r4]
   15ae4:	mov	r0, r5
   15ae8:	bl	1cd48 <__assert_fail@plt+0xb7a8>
   15aec:	cmp	r0, #0
   15af0:	moveq	r4, r0
   15af4:	bne	15b20 <__assert_fail@plt+0x4580>
   15af8:	mov	r0, r5
   15afc:	bl	1cfa4 <__assert_fail@plt+0xba04>
   15b00:	cmp	r0, #0
   15b04:	moveq	r0, r4
   15b08:	orrne	r0, r4, #1
   15b0c:	cmp	r0, #0
   15b10:	bne	15b4c <__assert_fail@plt+0x45ac>
   15b14:	add	sp, sp, #8
   15b18:	pop	{r4, r5, r6, lr}
   15b1c:	b	15c14 <__assert_fail@plt+0x4674>
   15b20:	mov	r3, #1
   15b24:	str	r3, [sp]
   15b28:	mov	r0, r5
   15b2c:	mov	r2, #0
   15b30:	mov	r3, #0
   15b34:	bl	1cddc <__assert_fail@plt+0xb83c>
   15b38:	cmp	r0, #0
   15b3c:	beq	15ba8 <__assert_fail@plt+0x4608>
   15b40:	ldr	r5, [r4]
   15b44:	mov	r4, #0
   15b48:	b	15af8 <__assert_fail@plt+0x4558>
   15b4c:	mov	r2, #5
   15b50:	ldr	r1, [pc, #136]	; 15be0 <__assert_fail@plt+0x4640>
   15b54:	mov	r0, #0
   15b58:	bl	11288 <dcgettext@plt>
   15b5c:	ldr	r2, [pc, #128]	; 15be4 <__assert_fail@plt+0x4644>
   15b60:	ldr	r4, [r2]
   15b64:	cmp	r4, #0
   15b68:	mov	r5, r0
   15b6c:	beq	15bc0 <__assert_fail@plt+0x4620>
   15b70:	bl	11420 <__errno_location@plt>
   15b74:	ldr	r6, [r0]
   15b78:	mov	r0, r4
   15b7c:	bl	19ffc <__assert_fail@plt+0x8a5c>
   15b80:	mov	r1, r6
   15b84:	str	r5, [sp]
   15b88:	ldr	r2, [pc, #88]	; 15be8 <__assert_fail@plt+0x4648>
   15b8c:	mov	r3, r0
   15b90:	mov	r0, #0
   15b94:	bl	11354 <error@plt>
   15b98:	bl	15c14 <__assert_fail@plt+0x4674>
   15b9c:	ldr	r3, [pc, #72]	; 15bec <__assert_fail@plt+0x464c>
   15ba0:	ldr	r0, [r3]
   15ba4:	bl	11240 <_exit@plt>
   15ba8:	ldr	r0, [r4]
   15bac:	bl	1cce8 <__assert_fail@plt+0xb748>
   15bb0:	ldr	r5, [r4]
   15bb4:	adds	r4, r0, #0
   15bb8:	movne	r4, #1
   15bbc:	b	15af8 <__assert_fail@plt+0x4558>
   15bc0:	bl	11420 <__errno_location@plt>
   15bc4:	mov	r3, r5
   15bc8:	ldr	r2, [pc, #32]	; 15bf0 <__assert_fail@plt+0x4650>
   15bcc:	ldr	r1, [r0]
   15bd0:	mov	r0, r4
   15bd4:	bl	11354 <error@plt>
   15bd8:	b	15b98 <__assert_fail@plt+0x45f8>
   15bdc:	ldrdeq	r0, [r3], -r8
   15be0:	muleq	r1, r8, r7
   15be4:	andeq	r0, r3, r8, lsr #5
   15be8:	andeq	pc, r1, ip, lsr #15
   15bec:	andeq	r0, r3, r4, ror r1
   15bf0:			; <UNDEFINED> instruction: 0x0001f7b0
   15bf4:	ldr	r3, [pc, #4]	; 15c00 <__assert_fail@plt+0x4660>
   15bf8:	str	r0, [r3]
   15bfc:	bx	lr
   15c00:	andeq	r0, r3, ip, lsr #5
   15c04:	ldr	r3, [pc, #4]	; 15c10 <__assert_fail@plt+0x4670>
   15c08:	strb	r0, [r3, #4]
   15c0c:	bx	lr
   15c10:	andeq	r0, r3, ip, lsr #5
   15c14:	ldr	r3, [pc, #192]	; 15cdc <__assert_fail@plt+0x473c>
   15c18:	push	{r4, r5, r6, lr}
   15c1c:	sub	sp, sp, #8
   15c20:	ldr	r0, [r3]
   15c24:	bl	1cfa4 <__assert_fail@plt+0xba04>
   15c28:	cmp	r0, #0
   15c2c:	beq	15c50 <__assert_fail@plt+0x46b0>
   15c30:	ldr	r4, [pc, #168]	; 15ce0 <__assert_fail@plt+0x4740>
   15c34:	ldrb	r3, [r4, #4]
   15c38:	cmp	r3, #0
   15c3c:	beq	15c6c <__assert_fail@plt+0x46cc>
   15c40:	bl	11420 <__errno_location@plt>
   15c44:	ldr	r3, [r0]
   15c48:	cmp	r3, #32
   15c4c:	bne	15c6c <__assert_fail@plt+0x46cc>
   15c50:	ldr	r3, [pc, #140]	; 15ce4 <__assert_fail@plt+0x4744>
   15c54:	ldr	r0, [r3]
   15c58:	bl	1cfa4 <__assert_fail@plt+0xba04>
   15c5c:	cmp	r0, #0
   15c60:	bne	15cb4 <__assert_fail@plt+0x4714>
   15c64:	add	sp, sp, #8
   15c68:	pop	{r4, r5, r6, pc}
   15c6c:	mov	r2, #5
   15c70:	ldr	r1, [pc, #112]	; 15ce8 <__assert_fail@plt+0x4748>
   15c74:	mov	r0, #0
   15c78:	bl	11288 <dcgettext@plt>
   15c7c:	ldr	r4, [r4]
   15c80:	cmp	r4, #0
   15c84:	mov	r5, r0
   15c88:	beq	15cc0 <__assert_fail@plt+0x4720>
   15c8c:	bl	11420 <__errno_location@plt>
   15c90:	ldr	r6, [r0]
   15c94:	mov	r0, r4
   15c98:	bl	19ffc <__assert_fail@plt+0x8a5c>
   15c9c:	mov	r1, r6
   15ca0:	str	r5, [sp]
   15ca4:	ldr	r2, [pc, #64]	; 15cec <__assert_fail@plt+0x474c>
   15ca8:	mov	r3, r0
   15cac:	mov	r0, #0
   15cb0:	bl	11354 <error@plt>
   15cb4:	ldr	r3, [pc, #52]	; 15cf0 <__assert_fail@plt+0x4750>
   15cb8:	ldr	r0, [r3]
   15cbc:	bl	11240 <_exit@plt>
   15cc0:	bl	11420 <__errno_location@plt>
   15cc4:	mov	r3, r5
   15cc8:	ldr	r2, [pc, #36]	; 15cf4 <__assert_fail@plt+0x4754>
   15ccc:	ldr	r1, [r0]
   15cd0:	mov	r0, r4
   15cd4:	bl	11354 <error@plt>
   15cd8:	b	15cb4 <__assert_fail@plt+0x4714>
   15cdc:	ldrdeq	r0, [r3], -ip
   15ce0:	andeq	r0, r3, ip, lsr #5
   15ce4:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   15ce8:			; <UNDEFINED> instruction: 0x0001f7b4
   15cec:	andeq	pc, r1, ip, lsr #15
   15cf0:	andeq	r0, r3, r4, ror r1
   15cf4:			; <UNDEFINED> instruction: 0x0001f7b0
   15cf8:	push	{r4, r5, r6, r7, r8, lr}
   15cfc:	bl	11360 <opendir@plt>
   15d00:	subs	r4, r0, #0
   15d04:	beq	15d14 <__assert_fail@plt+0x4774>
   15d08:	bl	11528 <dirfd@plt>
   15d0c:	cmp	r0, #2
   15d10:	bls	15d1c <__assert_fail@plt+0x477c>
   15d14:	mov	r0, r4
   15d18:	pop	{r4, r5, r6, r7, r8, pc}
   15d1c:	mov	r2, #3
   15d20:	ldr	r1, [pc, #92]	; 15d84 <__assert_fail@plt+0x47e4>
   15d24:	bl	1cb14 <__assert_fail@plt+0xb574>
   15d28:	subs	r8, r0, #0
   15d2c:	blt	15d64 <__assert_fail@plt+0x47c4>
   15d30:	bl	11510 <fdopendir@plt>
   15d34:	mov	r6, r0
   15d38:	bl	11420 <__errno_location@plt>
   15d3c:	cmp	r6, #0
   15d40:	mov	r5, r0
   15d44:	ldr	r7, [r0]
   15d48:	beq	15d78 <__assert_fail@plt+0x47d8>
   15d4c:	mov	r0, r4
   15d50:	mov	r4, r6
   15d54:	bl	11594 <closedir@plt>
   15d58:	str	r7, [r5]
   15d5c:	mov	r0, r4
   15d60:	pop	{r4, r5, r6, r7, r8, pc}
   15d64:	bl	11420 <__errno_location@plt>
   15d68:	mov	r6, #0
   15d6c:	mov	r5, r0
   15d70:	ldr	r7, [r0]
   15d74:	b	15d4c <__assert_fail@plt+0x47ac>
   15d78:	mov	r0, r8
   15d7c:	bl	11588 <close@plt>
   15d80:	b	15d4c <__assert_fail@plt+0x47ac>
   15d84:	andeq	r0, r0, r6, lsl #8
   15d88:	push	{r1, r2, r3}
   15d8c:	push	{lr}		; (str lr, [sp, #-4]!)
   15d90:	sub	sp, sp, #8
   15d94:	ldr	r1, [sp, #12]
   15d98:	ands	r2, r1, #64	; 0x40
   15d9c:	addne	r3, sp, #16
   15da0:	ldrne	r2, [sp, #16]
   15da4:	strne	r3, [sp, #4]
   15da8:	bl	1136c <open64@plt>
   15dac:	bl	1b470 <__assert_fail@plt+0x9ed0>
   15db0:	add	sp, sp, #8
   15db4:	pop	{lr}		; (ldr lr, [sp], #4)
   15db8:	add	sp, sp, #12
   15dbc:	bx	lr
   15dc0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15dc4:	mov	r6, r2
   15dc8:	lsrs	r2, r6, #30
   15dcc:	movne	ip, #1
   15dd0:	moveq	ip, #0
   15dd4:	lsls	r2, r6, #2
   15dd8:	add	fp, sp, #28
   15ddc:	bmi	15de8 <__assert_fail@plt+0x4848>
   15de0:	cmp	ip, #0
   15de4:	beq	15df4 <__assert_fail@plt+0x4854>
   15de8:	mov	r0, #0
   15dec:	sub	sp, fp, #28
   15df0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15df4:	cmp	r2, #4016	; 0xfb0
   15df8:	mov	r5, r0
   15dfc:	mov	r4, r1
   15e00:	mov	r7, r3
   15e04:	bls	15ed8 <__assert_fail@plt+0x4938>
   15e08:	mov	r0, r2
   15e0c:	bl	1d0b4 <__assert_fail@plt+0xbb14>
   15e10:	cmp	r0, #0
   15e14:	beq	15de8 <__assert_fail@plt+0x4848>
   15e18:	cmp	r6, #2
   15e1c:	mov	r3, #1
   15e20:	str	r3, [r0, #4]
   15e24:	movhi	r8, r4
   15e28:	addhi	r2, r0, #8
   15e2c:	movhi	ip, #0
   15e30:	movhi	r3, #2
   15e34:	bls	15e80 <__assert_fail@plt+0x48e0>
   15e38:	ldrb	r1, [r8, #1]!
   15e3c:	ldrb	lr, [r4, ip]
   15e40:	cmp	lr, r1
   15e44:	bne	15e60 <__assert_fail@plt+0x48c0>
   15e48:	b	15ef0 <__assert_fail@plt+0x4950>
   15e4c:	ldr	lr, [r0, ip, lsl #2]
   15e50:	sub	ip, ip, lr
   15e54:	ldrb	lr, [r4, ip]
   15e58:	cmp	lr, r1
   15e5c:	beq	15ef0 <__assert_fail@plt+0x4950>
   15e60:	cmp	ip, #0
   15e64:	bne	15e4c <__assert_fail@plt+0x48ac>
   15e68:	mov	ip, #0
   15e6c:	str	r3, [r2]
   15e70:	add	r3, r3, #1
   15e74:	cmp	r6, r3
   15e78:	add	r2, r2, #4
   15e7c:	bne	15e38 <__assert_fail@plt+0x4898>
   15e80:	mov	r2, #0
   15e84:	str	r2, [r7]
   15e88:	ldrb	r3, [r5]
   15e8c:	mov	ip, r5
   15e90:	cmp	r3, #0
   15e94:	beq	15ec8 <__assert_fail@plt+0x4928>
   15e98:	ldrb	r1, [r4, r2]
   15e9c:	cmp	r1, r3
   15ea0:	beq	15f00 <__assert_fail@plt+0x4960>
   15ea4:	cmp	r2, #0
   15ea8:	addeq	r5, r5, #1
   15eac:	ldrbeq	r3, [ip, #1]
   15eb0:	ldrne	r1, [r0, r2, lsl #2]
   15eb4:	addeq	ip, ip, #1
   15eb8:	addne	r5, r5, r1
   15ebc:	subne	r2, r2, r1
   15ec0:	cmp	r3, #0
   15ec4:	bne	15e98 <__assert_fail@plt+0x48f8>
   15ec8:	bl	1d104 <__assert_fail@plt+0xbb64>
   15ecc:	mov	r0, #1
   15ed0:	sub	sp, fp, #28
   15ed4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15ed8:	add	r3, r2, #29
   15edc:	bic	r3, r3, #7
   15ee0:	sub	sp, sp, r3
   15ee4:	add	r0, sp, #15
   15ee8:	bic	r0, r0, #15
   15eec:	b	15e10 <__assert_fail@plt+0x4870>
   15ef0:	add	ip, ip, #1
   15ef4:	sub	r1, r3, ip
   15ef8:	str	r1, [r2]
   15efc:	b	15e70 <__assert_fail@plt+0x48d0>
   15f00:	add	r2, r2, #1
   15f04:	cmp	r6, r2
   15f08:	add	r1, ip, #1
   15f0c:	ldrbne	r3, [ip, #1]
   15f10:	movne	ip, r1
   15f14:	bne	15e90 <__assert_fail@plt+0x48f0>
   15f18:	str	r5, [r7]
   15f1c:	bl	1d104 <__assert_fail@plt+0xbb64>
   15f20:	mov	r0, #1
   15f24:	b	15ed0 <__assert_fail@plt+0x4930>
   15f28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f2c:	add	fp, sp, #32
   15f30:	sub	sp, sp, #188	; 0xbc
   15f34:	str	r0, [fp, #-212]	; 0xffffff2c
   15f38:	mov	r0, r1
   15f3c:	mov	r4, r1
   15f40:	str	r2, [fp, #-220]	; 0xffffff24
   15f44:	bl	1d1c8 <__assert_fail@plt+0xbc28>
   15f48:	mov	r3, #44	; 0x2c
   15f4c:	str	r0, [fp, #-208]	; 0xffffff30
   15f50:	umull	r0, r1, r0, r3
   15f54:	adds	r2, r1, #0
   15f58:	movne	r2, #1
   15f5c:	cmp	r0, #0
   15f60:	blt	15f6c <__assert_fail@plt+0x49cc>
   15f64:	cmp	r2, #0
   15f68:	beq	15f78 <__assert_fail@plt+0x49d8>
   15f6c:	mov	r0, #0
   15f70:	sub	sp, fp, #32
   15f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f78:	ldr	r2, [fp, #-208]	; 0xffffff30
   15f7c:	mul	r0, r3, r2
   15f80:	cmp	r0, #4016	; 0xfb0
   15f84:	bls	16230 <__assert_fail@plt+0x4c90>
   15f88:	bl	1d0b4 <__assert_fail@plt+0xbb14>
   15f8c:	mov	r3, r0
   15f90:	str	r0, [fp, #-216]	; 0xffffff28
   15f94:	cmp	r3, #0
   15f98:	beq	15f6c <__assert_fail@plt+0x49cc>
   15f9c:	ldr	r2, [fp, #-208]	; 0xffffff30
   15fa0:	add	r6, r3, #16
   15fa4:	mov	r7, #1
   15fa8:	add	sl, r2, r2, lsl #2
   15fac:	mov	r8, #0
   15fb0:	add	sl, r3, sl, lsl #3
   15fb4:	str	r4, [fp, #-188]	; 0xffffff44
   15fb8:	str	r8, [fp, #-196]	; 0xffffff3c
   15fbc:	strb	r8, [fp, #-204]	; 0xffffff34
   15fc0:	str	r8, [fp, #-200]	; 0xffffff38
   15fc4:	strb	r8, [fp, #-192]	; 0xffffff40
   15fc8:	ldrb	r3, [fp, #-204]	; 0xffffff34
   15fcc:	cmp	r3, #0
   15fd0:	bne	1640c <__assert_fail@plt+0x4e6c>
   15fd4:	ldrb	r3, [r4]
   15fd8:	ldr	r1, [pc, #1936]	; 16770 <__assert_fail@plt+0x51d0>
   15fdc:	and	r2, r3, #31
   15fe0:	lsr	r3, r3, #5
   15fe4:	ldr	r3, [r1, r3, lsl #2]
   15fe8:	lsr	r3, r3, r2
   15fec:	tst	r3, #1
   15ff0:	beq	163f8 <__assert_fail@plt+0x4e58>
   15ff4:	str	r7, [fp, #-184]	; 0xffffff48
   15ff8:	ldrb	r4, [r4]
   15ffc:	strb	r7, [fp, #-180]	; 0xffffff4c
   16000:	strb	r7, [fp, #-192]	; 0xffffff40
   16004:	cmp	r4, #0
   16008:	str	r4, [fp, #-176]	; 0xffffff50
   1600c:	bne	16478 <__assert_fail@plt+0x4ed8>
   16010:	ldr	r3, [fp, #-208]	; 0xffffff30
   16014:	str	r7, [sl, #4]
   16018:	cmp	r3, #2
   1601c:	bls	16110 <__assert_fail@plt+0x4b70>
   16020:	ldr	r8, [fp, #-216]	; 0xffffff28
   16024:	add	r7, sl, #8
   16028:	mov	r5, r8
   1602c:	mov	r6, #2
   16030:	ldrb	r3, [r5, #48]	; 0x30
   16034:	cmp	r3, #0
   16038:	bne	160b4 <__assert_fail@plt+0x4b14>
   1603c:	ldr	r9, [r5, #44]	; 0x2c
   16040:	b	16054 <__assert_fail@plt+0x4ab4>
   16044:	cmp	r4, #0
   16048:	beq	16088 <__assert_fail@plt+0x4ae8>
   1604c:	ldr	r3, [sl, r4, lsl #2]
   16050:	sub	r4, r4, r3
   16054:	add	r3, r4, r4, lsl #2
   16058:	add	r2, r8, r3, lsl #3
   1605c:	ldr	r2, [r2, #4]
   16060:	cmp	r2, r9
   16064:	bne	16044 <__assert_fail@plt+0x4aa4>
   16068:	ldr	r1, [r8, r3, lsl #3]
   1606c:	mov	r2, r9
   16070:	ldr	r0, [r5, #40]	; 0x28
   16074:	bl	1127c <memcmp@plt>
   16078:	cmp	r0, #0
   1607c:	beq	160ec <__assert_fail@plt+0x4b4c>
   16080:	cmp	r4, #0
   16084:	bne	1604c <__assert_fail@plt+0x4aac>
   16088:	str	r6, [r7]
   1608c:	mov	r4, #0
   16090:	b	160f8 <__assert_fail@plt+0x4b58>
   16094:	ldr	r3, [r3, #12]
   16098:	ldr	r2, [r5, #52]	; 0x34
   1609c:	cmp	r2, r3
   160a0:	beq	160ec <__assert_fail@plt+0x4b4c>
   160a4:	cmp	r4, #0
   160a8:	beq	16088 <__assert_fail@plt+0x4ae8>
   160ac:	ldr	r3, [sl, r4, lsl #2]
   160b0:	sub	r4, r4, r3
   160b4:	add	r3, r4, r4, lsl #2
   160b8:	add	r3, r8, r3, lsl #3
   160bc:	ldrb	r2, [r3, #8]
   160c0:	cmp	r2, #0
   160c4:	bne	16094 <__assert_fail@plt+0x4af4>
   160c8:	ldr	r2, [r5, #44]	; 0x2c
   160cc:	ldr	r1, [r3, #4]
   160d0:	cmp	r2, r1
   160d4:	bne	160a4 <__assert_fail@plt+0x4b04>
   160d8:	ldr	r1, [r3]
   160dc:	ldr	r0, [r5, #40]	; 0x28
   160e0:	bl	1127c <memcmp@plt>
   160e4:	cmp	r0, #0
   160e8:	bne	160a4 <__assert_fail@plt+0x4b04>
   160ec:	add	r4, r4, #1
   160f0:	sub	r3, r6, r4
   160f4:	str	r3, [r7]
   160f8:	ldr	r3, [fp, #-208]	; 0xffffff30
   160fc:	add	r6, r6, #1
   16100:	cmp	r3, r6
   16104:	add	r5, r5, #40	; 0x28
   16108:	add	r7, r7, #4
   1610c:	bne	16030 <__assert_fail@plt+0x4a90>
   16110:	ldr	r1, [fp, #-212]	; 0xffffff2c
   16114:	mov	r2, #0
   16118:	str	r1, [fp, #-132]	; 0xffffff7c
   1611c:	str	r1, [fp, #-76]	; 0xffffffb4
   16120:	str	sl, [fp, #-212]	; 0xffffff2c
   16124:	ldr	r1, [fp, #-220]	; 0xffffff24
   16128:	ldr	r9, [pc, #1600]	; 16770 <__assert_fail@plt+0x51d0>
   1612c:	ldr	sl, [fp, #-216]	; 0xffffff28
   16130:	mov	r3, r2
   16134:	mov	r8, r2
   16138:	mov	r7, r2
   1613c:	mov	r6, #1
   16140:	str	r2, [r1]
   16144:	strb	r2, [fp, #-148]	; 0xffffff6c
   16148:	str	r2, [fp, #-144]	; 0xffffff70
   1614c:	strb	r2, [fp, #-136]	; 0xffffff78
   16150:	strb	r2, [fp, #-92]	; 0xffffffa4
   16154:	str	r2, [fp, #-88]	; 0xffffffa8
   16158:	strb	r2, [fp, #-80]	; 0xffffffb0
   1615c:	str	r2, [fp, #-140]	; 0xffffff74
   16160:	str	r2, [fp, #-84]	; 0xffffffac
   16164:	cmp	r3, #0
   16168:	bne	1624c <__assert_fail@plt+0x4cac>
   1616c:	ldr	r5, [fp, #-76]	; 0xffffffb4
   16170:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   16174:	cmp	r3, #0
   16178:	bne	161ac <__assert_fail@plt+0x4c0c>
   1617c:	ldrb	r3, [r5]
   16180:	and	r2, r3, #31
   16184:	lsr	r3, r3, #5
   16188:	ldr	r3, [r9, r3, lsl #2]
   1618c:	lsr	r3, r3, r2
   16190:	tst	r3, #1
   16194:	bne	164bc <__assert_fail@plt+0x4f1c>
   16198:	sub	r0, fp, #88	; 0x58
   1619c:	bl	11264 <mbsinit@plt>
   161a0:	cmp	r0, #0
   161a4:	beq	16748 <__assert_fail@plt+0x51a8>
   161a8:	strb	r6, [fp, #-92]	; 0xffffffa4
   161ac:	bl	11324 <__ctype_get_mb_cur_max@plt>
   161b0:	mov	r1, r0
   161b4:	mov	r0, r5
   161b8:	bl	1b444 <__assert_fail@plt+0x9ea4>
   161bc:	sub	r3, fp, #88	; 0x58
   161c0:	mov	r1, r5
   161c4:	mov	r2, r0
   161c8:	sub	r0, fp, #64	; 0x40
   161cc:	bl	1cea8 <__assert_fail@plt+0xb908>
   161d0:	cmn	r0, #1
   161d4:	str	r0, [fp, #-72]	; 0xffffffb8
   161d8:	strbeq	r7, [fp, #-68]	; 0xffffffbc
   161dc:	streq	r6, [fp, #-72]	; 0xffffffb8
   161e0:	strbeq	r6, [fp, #-80]	; 0xffffffb0
   161e4:	beq	1625c <__assert_fail@plt+0x4cbc>
   161e8:	cmn	r0, #2
   161ec:	beq	165d8 <__assert_fail@plt+0x5038>
   161f0:	cmp	r0, #0
   161f4:	beq	166d0 <__assert_fail@plt+0x5130>
   161f8:	ldr	r4, [fp, #-64]	; 0xffffffc0
   161fc:	sub	r0, fp, #88	; 0x58
   16200:	strb	r6, [fp, #-68]	; 0xffffffbc
   16204:	bl	11264 <mbsinit@plt>
   16208:	strb	r6, [fp, #-80]	; 0xffffffb0
   1620c:	cmp	r0, #0
   16210:	strbne	r7, [fp, #-92]	; 0xffffffa4
   16214:	cmp	r4, #0
   16218:	bne	164dc <__assert_fail@plt+0x4f3c>
   1621c:	ldr	r0, [fp, #-216]	; 0xffffff28
   16220:	bl	1d104 <__assert_fail@plt+0xbb64>
   16224:	mov	r0, #1
   16228:	sub	sp, fp, #32
   1622c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16230:	add	r3, r0, #29
   16234:	bic	r3, r3, #7
   16238:	sub	sp, sp, r3
   1623c:	add	r3, sp, #15
   16240:	bic	r3, r3, #15
   16244:	str	r3, [fp, #-216]	; 0xffffff28
   16248:	b	15f94 <__assert_fail@plt+0x49f4>
   1624c:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   16250:	cmp	r3, #0
   16254:	ldrne	r4, [fp, #-64]	; 0xffffffc0
   16258:	bne	16214 <__assert_fail@plt+0x4c74>
   1625c:	add	r3, r8, r8, lsl #2
   16260:	add	r3, sl, r3, lsl #3
   16264:	ldr	r2, [r3, #4]
   16268:	ldr	r4, [fp, #-72]	; 0xffffffb8
   1626c:	cmp	r2, r4
   16270:	beq	1656c <__assert_fail@plt+0x4fcc>
   16274:	cmp	r8, #0
   16278:	beq	16524 <__assert_fail@plt+0x4f84>
   1627c:	ldr	r3, [fp, #-212]	; 0xffffff2c
   16280:	ldr	r5, [r3, r8, lsl #2]
   16284:	cmp	r5, #0
   16288:	sub	r8, r8, r5
   1628c:	beq	1624c <__assert_fail@plt+0x4cac>
   16290:	ldrb	r3, [fp, #-136]	; 0xffffff78
   16294:	cmp	r3, #0
   16298:	bne	16344 <__assert_fail@plt+0x4da4>
   1629c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   162a0:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   162a4:	cmp	r3, #0
   162a8:	bne	162dc <__assert_fail@plt+0x4d3c>
   162ac:	ldrb	r3, [r4]
   162b0:	and	r2, r3, #31
   162b4:	lsr	r3, r3, #5
   162b8:	ldr	r3, [r9, r3, lsl #2]
   162bc:	lsr	r3, r3, r2
   162c0:	tst	r3, #1
   162c4:	bne	16378 <__assert_fail@plt+0x4dd8>
   162c8:	sub	r0, fp, #144	; 0x90
   162cc:	bl	11264 <mbsinit@plt>
   162d0:	cmp	r0, #0
   162d4:	beq	16748 <__assert_fail@plt+0x51a8>
   162d8:	strb	r6, [fp, #-148]	; 0xffffff6c
   162dc:	bl	11324 <__ctype_get_mb_cur_max@plt>
   162e0:	mov	r1, r0
   162e4:	mov	r0, r4
   162e8:	bl	1b444 <__assert_fail@plt+0x9ea4>
   162ec:	sub	r3, fp, #144	; 0x90
   162f0:	mov	r1, r4
   162f4:	mov	r2, r0
   162f8:	sub	r0, fp, #120	; 0x78
   162fc:	bl	1cea8 <__assert_fail@plt+0xb908>
   16300:	cmn	r0, #1
   16304:	str	r0, [fp, #-128]	; 0xffffff80
   16308:	beq	16394 <__assert_fail@plt+0x4df4>
   1630c:	cmn	r0, #2
   16310:	beq	163a8 <__assert_fail@plt+0x4e08>
   16314:	cmp	r0, #0
   16318:	beq	163c4 <__assert_fail@plt+0x4e24>
   1631c:	ldr	r4, [fp, #-120]	; 0xffffff88
   16320:	sub	r0, fp, #144	; 0x90
   16324:	strb	r6, [fp, #-124]	; 0xffffff84
   16328:	bl	11264 <mbsinit@plt>
   1632c:	strb	r6, [fp, #-136]	; 0xffffff78
   16330:	cmp	r0, #0
   16334:	strbne	r7, [fp, #-148]	; 0xffffff6c
   16338:	cmp	r4, #0
   1633c:	bne	16354 <__assert_fail@plt+0x4db4>
   16340:	bl	11570 <abort@plt>
   16344:	ldrb	r3, [fp, #-124]	; 0xffffff84
   16348:	cmp	r3, #0
   1634c:	ldrne	r4, [fp, #-120]	; 0xffffff88
   16350:	bne	16338 <__assert_fail@plt+0x4d98>
   16354:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16358:	ldr	r3, [fp, #-128]	; 0xffffff80
   1635c:	subs	r5, r5, #1
   16360:	add	r4, r4, r3
   16364:	strb	r7, [fp, #-136]	; 0xffffff78
   16368:	str	r4, [fp, #-132]	; 0xffffff7c
   1636c:	ldrbeq	r3, [fp, #-80]	; 0xffffffb0
   16370:	bne	162a0 <__assert_fail@plt+0x4d00>
   16374:	b	16164 <__assert_fail@plt+0x4bc4>
   16378:	str	r6, [fp, #-128]	; 0xffffff80
   1637c:	ldrb	r3, [r4]
   16380:	strb	r6, [fp, #-124]	; 0xffffff84
   16384:	strb	r6, [fp, #-136]	; 0xffffff78
   16388:	str	r3, [fp, #-120]	; 0xffffff88
   1638c:	mov	r4, r3
   16390:	b	16338 <__assert_fail@plt+0x4d98>
   16394:	str	r6, [fp, #-128]	; 0xffffff80
   16398:	strb	r7, [fp, #-124]	; 0xffffff84
   1639c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   163a0:	mov	r3, r6
   163a4:	b	1635c <__assert_fail@plt+0x4dbc>
   163a8:	ldr	r4, [fp, #-132]	; 0xffffff7c
   163ac:	mov	r0, r4
   163b0:	bl	113f0 <strlen@plt>
   163b4:	strb	r7, [fp, #-124]	; 0xffffff84
   163b8:	str	r0, [fp, #-128]	; 0xffffff80
   163bc:	mov	r3, r0
   163c0:	b	1635c <__assert_fail@plt+0x4dbc>
   163c4:	ldr	r4, [fp, #-132]	; 0xffffff7c
   163c8:	str	r6, [fp, #-128]	; 0xffffff80
   163cc:	ldrb	r3, [r4]
   163d0:	cmp	r3, #0
   163d4:	bne	1675c <__assert_fail@plt+0x51bc>
   163d8:	ldr	r4, [fp, #-120]	; 0xffffff88
   163dc:	cmp	r4, #0
   163e0:	beq	16320 <__assert_fail@plt+0x4d80>
   163e4:	ldr	r3, [pc, #904]	; 16774 <__assert_fail@plt+0x51d4>
   163e8:	mov	r2, #172	; 0xac
   163ec:	ldr	r1, [pc, #900]	; 16778 <__assert_fail@plt+0x51d8>
   163f0:	ldr	r0, [pc, #900]	; 1677c <__assert_fail@plt+0x51dc>
   163f4:	bl	115a0 <__assert_fail@plt>
   163f8:	sub	r0, fp, #200	; 0xc8
   163fc:	bl	11264 <mbsinit@plt>
   16400:	cmp	r0, #0
   16404:	beq	16748 <__assert_fail@plt+0x51a8>
   16408:	strb	r7, [fp, #-204]	; 0xffffff34
   1640c:	bl	11324 <__ctype_get_mb_cur_max@plt>
   16410:	mov	r1, r0
   16414:	mov	r0, r4
   16418:	bl	1b444 <__assert_fail@plt+0x9ea4>
   1641c:	sub	r3, fp, #200	; 0xc8
   16420:	mov	r1, r4
   16424:	mov	r2, r0
   16428:	sub	r0, fp, #176	; 0xb0
   1642c:	bl	1cea8 <__assert_fail@plt+0xb908>
   16430:	cmn	r0, #1
   16434:	str	r0, [fp, #-184]	; 0xffffff48
   16438:	strbeq	r8, [fp, #-180]	; 0xffffff4c
   1643c:	streq	r7, [fp, #-184]	; 0xffffff48
   16440:	beq	16518 <__assert_fail@plt+0x4f78>
   16444:	cmn	r0, #2
   16448:	beq	16508 <__assert_fail@plt+0x4f68>
   1644c:	cmp	r0, #0
   16450:	beq	165b4 <__assert_fail@plt+0x5014>
   16454:	ldr	r4, [fp, #-176]	; 0xffffff50
   16458:	sub	r0, fp, #200	; 0xc8
   1645c:	strb	r7, [fp, #-180]	; 0xffffff4c
   16460:	bl	11264 <mbsinit@plt>
   16464:	strb	r7, [fp, #-192]	; 0xffffff40
   16468:	cmp	r0, #0
   1646c:	strbne	r8, [fp, #-204]	; 0xffffff34
   16470:	cmp	r4, #0
   16474:	beq	16010 <__assert_fail@plt+0x4a70>
   16478:	mov	r9, r7
   1647c:	ldr	r4, [fp, #-188]	; 0xffffff44
   16480:	sub	r3, fp, #172	; 0xac
   16484:	cmp	r4, r3
   16488:	strne	r4, [r6, #-16]
   1648c:	ldrne	r5, [fp, #-184]	; 0xffffff48
   16490:	beq	16698 <__assert_fail@plt+0x50f8>
   16494:	cmp	r9, #0
   16498:	add	r4, r4, r5
   1649c:	ldrne	r3, [fp, #-176]	; 0xffffff50
   164a0:	str	r5, [r6, #-12]
   164a4:	strb	r9, [r6, #-8]
   164a8:	strne	r3, [r6, #-4]
   164ac:	str	r4, [fp, #-188]	; 0xffffff44
   164b0:	add	r6, r6, #40	; 0x28
   164b4:	strb	r8, [fp, #-192]	; 0xffffff40
   164b8:	b	15fc8 <__assert_fail@plt+0x4a28>
   164bc:	str	r6, [fp, #-72]	; 0xffffffb8
   164c0:	ldrb	r3, [r5]
   164c4:	strb	r6, [fp, #-68]	; 0xffffffbc
   164c8:	strb	r6, [fp, #-80]	; 0xffffffb0
   164cc:	mov	r4, r3
   164d0:	cmp	r4, #0
   164d4:	str	r3, [fp, #-64]	; 0xffffffc0
   164d8:	beq	1621c <__assert_fail@plt+0x4c7c>
   164dc:	add	r3, r8, r8, lsl #2
   164e0:	add	r3, sl, r3, lsl #3
   164e4:	ldrb	r2, [r3, #8]
   164e8:	cmp	r2, #0
   164ec:	beq	16264 <__assert_fail@plt+0x4cc4>
   164f0:	ldr	r3, [r3, #12]
   164f4:	cmp	r4, r3
   164f8:	bne	16274 <__assert_fail@plt+0x4cd4>
   164fc:	ldr	r4, [fp, #-72]	; 0xffffffb8
   16500:	ldr	r5, [fp, #-76]	; 0xffffffb4
   16504:	b	16588 <__assert_fail@plt+0x4fe8>
   16508:	ldr	r0, [fp, #-188]	; 0xffffff44
   1650c:	bl	113f0 <strlen@plt>
   16510:	strb	r8, [fp, #-180]	; 0xffffff4c
   16514:	str	r0, [fp, #-184]	; 0xffffff48
   16518:	strb	r7, [fp, #-192]	; 0xffffff40
   1651c:	mov	r9, r8
   16520:	b	1647c <__assert_fail@plt+0x4edc>
   16524:	ldrb	r3, [fp, #-136]	; 0xffffff78
   16528:	cmp	r3, #0
   1652c:	beq	165f0 <__assert_fail@plt+0x5050>
   16530:	ldrb	r3, [fp, #-124]	; 0xffffff84
   16534:	cmp	r3, #0
   16538:	ldrne	r4, [fp, #-120]	; 0xffffff88
   1653c:	bne	1668c <__assert_fail@plt+0x50ec>
   16540:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16544:	ldr	r3, [fp, #-128]	; 0xffffff80
   16548:	ldr	r5, [fp, #-76]	; 0xffffffb4
   1654c:	add	r4, r4, r3
   16550:	ldr	r3, [fp, #-72]	; 0xffffffb8
   16554:	strb	r7, [fp, #-136]	; 0xffffff78
   16558:	add	r5, r5, r3
   1655c:	strb	r7, [fp, #-80]	; 0xffffffb0
   16560:	str	r4, [fp, #-132]	; 0xffffff7c
   16564:	str	r5, [fp, #-76]	; 0xffffffb4
   16568:	b	16170 <__assert_fail@plt+0x4bd0>
   1656c:	ldr	r5, [fp, #-76]	; 0xffffffb4
   16570:	ldr	r0, [r3]
   16574:	mov	r1, r5
   16578:	mov	r2, r4
   1657c:	bl	1127c <memcmp@plt>
   16580:	cmp	r0, #0
   16584:	bne	16274 <__assert_fail@plt+0x4cd4>
   16588:	ldr	r3, [fp, #-208]	; 0xffffff30
   1658c:	add	r8, r8, #1
   16590:	add	r5, r5, r4
   16594:	cmp	r3, r8
   16598:	str	r5, [fp, #-76]	; 0xffffffb4
   1659c:	strb	r7, [fp, #-80]	; 0xffffffb0
   165a0:	bne	16170 <__assert_fail@plt+0x4bd0>
   165a4:	ldr	r2, [fp, #-220]	; 0xffffff24
   165a8:	ldr	r3, [fp, #-132]	; 0xffffff7c
   165ac:	str	r3, [r2]
   165b0:	b	1621c <__assert_fail@plt+0x4c7c>
   165b4:	ldr	r3, [fp, #-188]	; 0xffffff44
   165b8:	str	r7, [fp, #-184]	; 0xffffff48
   165bc:	ldrb	r3, [r3]
   165c0:	cmp	r3, #0
   165c4:	bne	1675c <__assert_fail@plt+0x51bc>
   165c8:	ldr	r4, [fp, #-176]	; 0xffffff50
   165cc:	cmp	r4, #0
   165d0:	beq	16458 <__assert_fail@plt+0x4eb8>
   165d4:	b	163e4 <__assert_fail@plt+0x4e44>
   165d8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   165dc:	bl	113f0 <strlen@plt>
   165e0:	strb	r7, [fp, #-68]	; 0xffffffbc
   165e4:	strb	r6, [fp, #-80]	; 0xffffffb0
   165e8:	str	r0, [fp, #-72]	; 0xffffffb8
   165ec:	b	1625c <__assert_fail@plt+0x4cbc>
   165f0:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   165f4:	ldr	r4, [fp, #-132]	; 0xffffff7c
   165f8:	cmp	r3, #0
   165fc:	bne	16630 <__assert_fail@plt+0x5090>
   16600:	ldrb	r3, [r4]
   16604:	and	r2, r3, #31
   16608:	lsr	r3, r3, #5
   1660c:	ldr	r3, [r9, r3, lsl #2]
   16610:	lsr	r3, r3, r2
   16614:	tst	r3, #1
   16618:	bne	166b4 <__assert_fail@plt+0x5114>
   1661c:	sub	r0, fp, #144	; 0x90
   16620:	bl	11264 <mbsinit@plt>
   16624:	cmp	r0, #0
   16628:	beq	16748 <__assert_fail@plt+0x51a8>
   1662c:	strb	r6, [fp, #-148]	; 0xffffff6c
   16630:	bl	11324 <__ctype_get_mb_cur_max@plt>
   16634:	mov	r1, r0
   16638:	mov	r0, r4
   1663c:	bl	1b444 <__assert_fail@plt+0x9ea4>
   16640:	sub	r3, fp, #144	; 0x90
   16644:	mov	r1, r4
   16648:	mov	r2, r0
   1664c:	sub	r0, fp, #120	; 0x78
   16650:	bl	1cea8 <__assert_fail@plt+0xb908>
   16654:	cmn	r0, #1
   16658:	str	r0, [fp, #-128]	; 0xffffff80
   1665c:	beq	166f4 <__assert_fail@plt+0x5154>
   16660:	cmn	r0, #2
   16664:	beq	16708 <__assert_fail@plt+0x5168>
   16668:	cmp	r0, #0
   1666c:	beq	16724 <__assert_fail@plt+0x5184>
   16670:	ldr	r4, [fp, #-120]	; 0xffffff88
   16674:	sub	r0, fp, #144	; 0x90
   16678:	strb	r6, [fp, #-124]	; 0xffffff84
   1667c:	bl	11264 <mbsinit@plt>
   16680:	strb	r6, [fp, #-136]	; 0xffffff78
   16684:	cmp	r0, #0
   16688:	strbne	r7, [fp, #-148]	; 0xffffff6c
   1668c:	cmp	r4, #0
   16690:	beq	16340 <__assert_fail@plt+0x4da0>
   16694:	b	16540 <__assert_fail@plt+0x4fa0>
   16698:	ldr	r5, [fp, #-184]	; 0xffffff48
   1669c:	sub	r1, fp, #172	; 0xac
   166a0:	mov	r2, r5
   166a4:	mov	r0, r6
   166a8:	bl	1124c <memcpy@plt>
   166ac:	str	r6, [r6, #-16]
   166b0:	b	16494 <__assert_fail@plt+0x4ef4>
   166b4:	str	r6, [fp, #-128]	; 0xffffff80
   166b8:	ldrb	r3, [r4]
   166bc:	strb	r6, [fp, #-124]	; 0xffffff84
   166c0:	strb	r6, [fp, #-136]	; 0xffffff78
   166c4:	str	r3, [fp, #-120]	; 0xffffff88
   166c8:	mov	r4, r3
   166cc:	b	1668c <__assert_fail@plt+0x50ec>
   166d0:	ldr	r5, [fp, #-76]	; 0xffffffb4
   166d4:	str	r6, [fp, #-72]	; 0xffffffb8
   166d8:	ldrb	r3, [r5]
   166dc:	cmp	r3, #0
   166e0:	bne	1675c <__assert_fail@plt+0x51bc>
   166e4:	ldr	r4, [fp, #-64]	; 0xffffffc0
   166e8:	cmp	r4, #0
   166ec:	beq	161fc <__assert_fail@plt+0x4c5c>
   166f0:	b	163e4 <__assert_fail@plt+0x4e44>
   166f4:	str	r6, [fp, #-128]	; 0xffffff80
   166f8:	strb	r7, [fp, #-124]	; 0xffffff84
   166fc:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16700:	mov	r3, r6
   16704:	b	16548 <__assert_fail@plt+0x4fa8>
   16708:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1670c:	mov	r0, r4
   16710:	bl	113f0 <strlen@plt>
   16714:	strb	r7, [fp, #-124]	; 0xffffff84
   16718:	str	r0, [fp, #-128]	; 0xffffff80
   1671c:	mov	r3, r0
   16720:	b	16548 <__assert_fail@plt+0x4fa8>
   16724:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16728:	str	r6, [fp, #-128]	; 0xffffff80
   1672c:	ldrb	r3, [r4]
   16730:	cmp	r3, #0
   16734:	bne	1675c <__assert_fail@plt+0x51bc>
   16738:	ldr	r4, [fp, #-120]	; 0xffffff88
   1673c:	cmp	r4, #0
   16740:	beq	16674 <__assert_fail@plt+0x50d4>
   16744:	b	163e4 <__assert_fail@plt+0x4e44>
   16748:	ldr	r3, [pc, #36]	; 16774 <__assert_fail@plt+0x51d4>
   1674c:	mov	r2, #143	; 0x8f
   16750:	ldr	r1, [pc, #32]	; 16778 <__assert_fail@plt+0x51d8>
   16754:	ldr	r0, [pc, #36]	; 16780 <__assert_fail@plt+0x51e0>
   16758:	bl	115a0 <__assert_fail@plt>
   1675c:	ldr	r3, [pc, #16]	; 16774 <__assert_fail@plt+0x51d4>
   16760:	mov	r2, #171	; 0xab
   16764:	ldr	r1, [pc, #12]	; 16778 <__assert_fail@plt+0x51d8>
   16768:	ldr	r0, [pc, #20]	; 16784 <__assert_fail@plt+0x51e4>
   1676c:	bl	115a0 <__assert_fail@plt>
   16770:	andeq	pc, r1, r8, lsr #25
   16774:	andeq	pc, r1, r0, asr #15
   16778:	ldrdeq	pc, [r1], -r4
   1677c:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   16780:	andeq	pc, r1, r0, ror #15
   16784:	strdeq	pc, [r1], -r8
   16788:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1678c:	sub	sp, sp, #300	; 0x12c
   16790:	mov	fp, r1
   16794:	str	r0, [sp, #4]
   16798:	bl	11324 <__ctype_get_mb_cur_max@plt>
   1679c:	cmp	r0, #1
   167a0:	bls	16960 <__assert_fail@plt+0x53c0>
   167a4:	ldrb	r2, [fp]
   167a8:	ldr	r9, [pc, #3016]	; 17378 <__assert_fail@plt+0x5dd8>
   167ac:	mov	r1, #0
   167b0:	and	r0, r2, #31
   167b4:	lsr	r3, r2, #5
   167b8:	str	fp, [sp, #32]
   167bc:	ldr	r3, [r9, r3, lsl #2]
   167c0:	str	r1, [sp, #24]
   167c4:	strb	r1, [sp, #16]
   167c8:	lsr	r3, r3, r0
   167cc:	ands	r4, r3, #1
   167d0:	str	r1, [sp, #20]
   167d4:	strb	r1, [sp, #28]
   167d8:	beq	168c4 <__assert_fail@plt+0x5324>
   167dc:	mov	r3, #1
   167e0:	mov	r4, r2
   167e4:	str	r3, [sp, #36]	; 0x24
   167e8:	strb	r3, [sp, #40]	; 0x28
   167ec:	cmp	r4, #0
   167f0:	mov	r3, #1
   167f4:	str	r2, [sp, #44]	; 0x2c
   167f8:	strb	r3, [sp, #28]
   167fc:	beq	16954 <__assert_fail@plt+0x53b4>
   16800:	ldr	r1, [sp, #4]
   16804:	mov	r3, #0
   16808:	mov	sl, #1
   1680c:	str	fp, [sp, #88]	; 0x58
   16810:	str	fp, [sp, #12]
   16814:	mov	r8, r3
   16818:	mov	r7, r3
   1681c:	mov	r5, sl
   16820:	mov	r4, r1
   16824:	mov	fp, r3
   16828:	str	r1, [sp, #144]	; 0x90
   1682c:	strb	r3, [sp, #72]	; 0x48
   16830:	str	r3, [sp, #76]	; 0x4c
   16834:	strb	r3, [sp, #84]	; 0x54
   16838:	strb	r3, [sp, #128]	; 0x80
   1683c:	str	r3, [sp, #132]	; 0x84
   16840:	strb	r3, [sp, #140]	; 0x8c
   16844:	str	r3, [sp, #8]
   16848:	str	r3, [sp, #80]	; 0x50
   1684c:	str	r3, [sp, #136]	; 0x88
   16850:	ldrb	r3, [sp, #128]	; 0x80
   16854:	cmp	r3, #0
   16858:	bne	16aac <__assert_fail@plt+0x550c>
   1685c:	ldrb	r3, [r4]
   16860:	and	r2, r3, #31
   16864:	lsr	r3, r3, #5
   16868:	ldr	r3, [r9, r3, lsl #2]
   1686c:	lsr	r3, r3, r2
   16870:	tst	r3, #1
   16874:	beq	16a98 <__assert_fail@plt+0x54f8>
   16878:	str	r5, [sp, #148]	; 0x94
   1687c:	ldrb	r4, [r4]
   16880:	strb	r5, [sp, #152]	; 0x98
   16884:	str	r4, [sp, #156]	; 0x9c
   16888:	cmp	r4, #0
   1688c:	strb	r5, [sp, #140]	; 0x8c
   16890:	beq	16a84 <__assert_fail@plt+0x54e4>
   16894:	cmp	fp, #9
   16898:	movls	r2, #0
   1689c:	andhi	r2, sl, #1
   168a0:	cmp	r2, #0
   168a4:	beq	172c8 <__assert_fail@plt+0x5d28>
   168a8:	add	r3, fp, fp, lsl #2
   168ac:	cmp	r8, r3
   168b0:	bcs	16b70 <__assert_fail@plt+0x55d0>
   168b4:	add	r3, r8, #1
   168b8:	mov	sl, r2
   168bc:	ldr	r8, [sp, #8]
   168c0:	b	16c80 <__assert_fail@plt+0x56e0>
   168c4:	add	r0, sp, #20
   168c8:	bl	11264 <mbsinit@plt>
   168cc:	cmp	r0, #0
   168d0:	beq	17328 <__assert_fail@plt+0x5d88>
   168d4:	mov	r5, #1
   168d8:	strb	r5, [sp, #16]
   168dc:	bl	11324 <__ctype_get_mb_cur_max@plt>
   168e0:	mov	r1, r0
   168e4:	mov	r0, fp
   168e8:	bl	1b444 <__assert_fail@plt+0x9ea4>
   168ec:	add	r3, sp, #20
   168f0:	mov	r1, fp
   168f4:	mov	r2, r0
   168f8:	add	r0, sp, #44	; 0x2c
   168fc:	bl	1cea8 <__assert_fail@plt+0xb908>
   16900:	cmn	r0, #1
   16904:	str	r0, [sp, #36]	; 0x24
   16908:	strbeq	r4, [sp, #40]	; 0x28
   1690c:	streq	r5, [sp, #36]	; 0x24
   16910:	beq	16d48 <__assert_fail@plt+0x57a8>
   16914:	cmn	r0, #2
   16918:	beq	16d38 <__assert_fail@plt+0x5798>
   1691c:	cmp	r0, #0
   16920:	beq	17268 <__assert_fail@plt+0x5cc8>
   16924:	ldr	r4, [sp, #44]	; 0x2c
   16928:	mov	r3, #1
   1692c:	add	r0, sp, #20
   16930:	strb	r3, [sp, #40]	; 0x28
   16934:	bl	11264 <mbsinit@plt>
   16938:	cmp	r0, #0
   1693c:	movne	r3, #0
   16940:	strbne	r3, [sp, #16]
   16944:	mov	r3, #1
   16948:	cmp	r4, #0
   1694c:	strb	r3, [sp, #28]
   16950:	bne	16800 <__assert_fail@plt+0x5260>
   16954:	ldr	r0, [sp, #4]
   16958:	add	sp, sp, #300	; 0x12c
   1695c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16960:	ldrb	r7, [fp]
   16964:	cmp	r7, #0
   16968:	beq	16954 <__assert_fail@plt+0x53b4>
   1696c:	ldr	r5, [sp, #4]
   16970:	add	r8, fp, #1
   16974:	ldrb	r3, [r5]
   16978:	cmp	r3, #0
   1697c:	beq	16a84 <__assert_fail@plt+0x54e4>
   16980:	mov	r6, #0
   16984:	mov	r4, r6
   16988:	mov	r9, r6
   1698c:	mov	sl, fp
   16990:	mov	lr, #1
   16994:	ldrb	r3, [r5]
   16998:	mov	r0, r5
   1699c:	add	r6, r6, #1
   169a0:	cmp	r3, r7
   169a4:	add	r5, r5, #1
   169a8:	beq	16a30 <__assert_fail@plt+0x5490>
   169ac:	ldrb	r3, [r5]
   169b0:	cmp	r3, #0
   169b4:	beq	16a84 <__assert_fail@plt+0x54e4>
   169b8:	add	r4, r4, #1
   169bc:	cmp	r6, #9
   169c0:	movls	r3, #0
   169c4:	andhi	r3, lr, #1
   169c8:	cmp	r3, #0
   169cc:	beq	16994 <__assert_fail@plt+0x53f4>
   169d0:	add	r2, r6, r6, lsl #2
   169d4:	cmp	r4, r2
   169d8:	bcc	16a90 <__assert_fail@plt+0x54f0>
   169dc:	cmp	sl, #0
   169e0:	str	r3, [sp, #4]
   169e4:	beq	16a04 <__assert_fail@plt+0x5464>
   169e8:	mov	r0, sl
   169ec:	sub	r1, r4, r9
   169f0:	bl	1148c <strnlen@plt>
   169f4:	ldrb	r2, [sl, r0]!
   169f8:	cmp	r2, #0
   169fc:	bne	16d20 <__assert_fail@plt+0x5780>
   16a00:	mov	r9, r4
   16a04:	mov	r0, fp
   16a08:	bl	113f0 <strlen@plt>
   16a0c:	add	r3, sp, #240	; 0xf0
   16a10:	mov	r1, fp
   16a14:	mov	r2, r0
   16a18:	mov	r0, r5
   16a1c:	bl	15dc0 <__assert_fail@plt+0x4820>
   16a20:	subs	lr, r0, #0
   16a24:	bne	172c0 <__assert_fail@plt+0x5d20>
   16a28:	mov	sl, lr
   16a2c:	b	16994 <__assert_fail@plt+0x53f4>
   16a30:	ldrb	r3, [fp, #1]
   16a34:	cmp	r3, #0
   16a38:	beq	16958 <__assert_fail@plt+0x53b8>
   16a3c:	ldrb	r2, [r5]
   16a40:	cmp	r2, #0
   16a44:	beq	16a84 <__assert_fail@plt+0x54e4>
   16a48:	cmp	r2, r3
   16a4c:	add	r4, r4, #2
   16a50:	bne	169bc <__assert_fail@plt+0x541c>
   16a54:	mov	ip, r5
   16a58:	mov	r1, r8
   16a5c:	b	16a6c <__assert_fail@plt+0x54cc>
   16a60:	cmp	r3, r2
   16a64:	add	r4, r4, #1
   16a68:	bne	169bc <__assert_fail@plt+0x541c>
   16a6c:	ldrb	r3, [r1, #1]!
   16a70:	cmp	r3, #0
   16a74:	beq	16958 <__assert_fail@plt+0x53b8>
   16a78:	ldrb	r2, [ip, #1]!
   16a7c:	cmp	r2, #0
   16a80:	bne	16a60 <__assert_fail@plt+0x54c0>
   16a84:	mov	r0, #0
   16a88:	add	sp, sp, #300	; 0x12c
   16a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a90:	mov	lr, r3
   16a94:	b	16994 <__assert_fail@plt+0x53f4>
   16a98:	add	r0, sp, #132	; 0x84
   16a9c:	bl	11264 <mbsinit@plt>
   16aa0:	cmp	r0, #0
   16aa4:	beq	17328 <__assert_fail@plt+0x5d88>
   16aa8:	strb	r5, [sp, #128]	; 0x80
   16aac:	bl	11324 <__ctype_get_mb_cur_max@plt>
   16ab0:	mov	r1, r0
   16ab4:	mov	r0, r4
   16ab8:	bl	1b444 <__assert_fail@plt+0x9ea4>
   16abc:	add	r3, sp, #132	; 0x84
   16ac0:	mov	r1, r4
   16ac4:	mov	r2, r0
   16ac8:	add	r0, sp, #156	; 0x9c
   16acc:	bl	1cea8 <__assert_fail@plt+0xb908>
   16ad0:	cmn	r0, #1
   16ad4:	str	r0, [sp, #148]	; 0x94
   16ad8:	strbeq	r7, [sp, #152]	; 0x98
   16adc:	streq	r5, [sp, #148]	; 0x94
   16ae0:	beq	16b20 <__assert_fail@plt+0x5580>
   16ae4:	cmn	r0, #2
   16ae8:	beq	16b10 <__assert_fail@plt+0x5570>
   16aec:	cmp	r0, #0
   16af0:	beq	171bc <__assert_fail@plt+0x5c1c>
   16af4:	ldr	r4, [sp, #156]	; 0x9c
   16af8:	add	r0, sp, #132	; 0x84
   16afc:	strb	r5, [sp, #152]	; 0x98
   16b00:	bl	11264 <mbsinit@plt>
   16b04:	cmp	r0, #0
   16b08:	strbne	r7, [sp, #128]	; 0x80
   16b0c:	b	16888 <__assert_fail@plt+0x52e8>
   16b10:	ldr	r0, [sp, #144]	; 0x90
   16b14:	bl	113f0 <strlen@plt>
   16b18:	strb	r7, [sp, #152]	; 0x98
   16b1c:	str	r0, [sp, #148]	; 0x94
   16b20:	cmp	fp, #9
   16b24:	movls	r3, #0
   16b28:	andhi	r3, sl, #1
   16b2c:	cmp	r3, #0
   16b30:	strb	r5, [sp, #140]	; 0x8c
   16b34:	addeq	r8, r8, #1
   16b38:	bne	16b64 <__assert_fail@plt+0x55c4>
   16b3c:	ldr	r4, [sp, #148]	; 0x94
   16b40:	ldr	r3, [sp, #36]	; 0x24
   16b44:	ldr	r6, [sp, #144]	; 0x90
   16b48:	cmp	r4, r3
   16b4c:	beq	16d60 <__assert_fail@plt+0x57c0>
   16b50:	add	r4, r6, r4
   16b54:	str	r4, [sp, #144]	; 0x90
   16b58:	strb	r7, [sp, #140]	; 0x8c
   16b5c:	add	fp, fp, #1
   16b60:	b	16850 <__assert_fail@plt+0x52b0>
   16b64:	add	r2, fp, fp, lsl #2
   16b68:	cmp	r8, r2
   16b6c:	bcc	1733c <__assert_fail@plt+0x5d9c>
   16b70:	ldr	r3, [sp, #8]
   16b74:	subs	r6, r8, r3
   16b78:	ldrb	r3, [sp, #84]	; 0x54
   16b7c:	beq	1735c <__assert_fail@plt+0x5dbc>
   16b80:	cmp	r3, #0
   16b84:	beq	16d30 <__assert_fail@plt+0x5790>
   16b88:	ldrb	r3, [sp, #96]	; 0x60
   16b8c:	cmp	r3, #0
   16b90:	ldrne	r4, [sp, #100]	; 0x64
   16b94:	bne	16c50 <__assert_fail@plt+0x56b0>
   16b98:	ldr	r4, [sp, #88]	; 0x58
   16b9c:	ldr	r3, [sp, #92]	; 0x5c
   16ba0:	add	r4, r4, r3
   16ba4:	subs	r6, r6, #1
   16ba8:	strb	r7, [sp, #84]	; 0x54
   16bac:	str	r4, [sp, #88]	; 0x58
   16bb0:	mov	sl, r4
   16bb4:	beq	16e98 <__assert_fail@plt+0x58f8>
   16bb8:	ldrb	r3, [sp, #72]	; 0x48
   16bbc:	cmp	r3, #0
   16bc0:	bne	16bf4 <__assert_fail@plt+0x5654>
   16bc4:	ldrb	r3, [r4]
   16bc8:	and	r2, r3, #31
   16bcc:	lsr	r3, r3, #5
   16bd0:	ldr	r3, [r9, r3, lsl #2]
   16bd4:	lsr	r3, r3, r2
   16bd8:	tst	r3, #1
   16bdc:	bne	16cb0 <__assert_fail@plt+0x5710>
   16be0:	add	r0, sp, #76	; 0x4c
   16be4:	bl	11264 <mbsinit@plt>
   16be8:	cmp	r0, #0
   16bec:	beq	17328 <__assert_fail@plt+0x5d88>
   16bf0:	strb	r5, [sp, #72]	; 0x48
   16bf4:	bl	11324 <__ctype_get_mb_cur_max@plt>
   16bf8:	mov	r1, r0
   16bfc:	mov	r0, r4
   16c00:	bl	1b444 <__assert_fail@plt+0x9ea4>
   16c04:	add	r3, sp, #76	; 0x4c
   16c08:	mov	r1, r4
   16c0c:	mov	r2, r0
   16c10:	add	r0, sp, #100	; 0x64
   16c14:	bl	1cea8 <__assert_fail@plt+0xb908>
   16c18:	cmn	r0, #1
   16c1c:	str	r0, [sp, #92]	; 0x5c
   16c20:	beq	16ccc <__assert_fail@plt+0x572c>
   16c24:	cmn	r0, #2
   16c28:	beq	16ce0 <__assert_fail@plt+0x5740>
   16c2c:	cmp	r0, #0
   16c30:	beq	16cfc <__assert_fail@plt+0x575c>
   16c34:	ldr	r4, [sp, #100]	; 0x64
   16c38:	add	r0, sp, #76	; 0x4c
   16c3c:	strb	r5, [sp, #96]	; 0x60
   16c40:	bl	11264 <mbsinit@plt>
   16c44:	strb	r5, [sp, #84]	; 0x54
   16c48:	cmp	r0, #0
   16c4c:	strbne	r7, [sp, #72]	; 0x48
   16c50:	cmp	r4, #0
   16c54:	bne	16b98 <__assert_fail@plt+0x55f8>
   16c58:	add	r2, sp, #240	; 0xf0
   16c5c:	ldr	r1, [sp, #12]
   16c60:	ldr	r0, [sp, #4]
   16c64:	bl	15f28 <__assert_fail@plt+0x4988>
   16c68:	subs	sl, r0, #0
   16c6c:	bne	172c0 <__assert_fail@plt+0x5d20>
   16c70:	ldrb	r3, [sp, #152]	; 0x98
   16c74:	cmp	r3, #0
   16c78:	add	r3, r8, #1
   16c7c:	beq	16d54 <__assert_fail@plt+0x57b4>
   16c80:	ldrb	r2, [sp, #40]	; 0x28
   16c84:	cmp	r2, #0
   16c88:	beq	16d54 <__assert_fail@plt+0x57b4>
   16c8c:	ldr	r1, [sp, #156]	; 0x9c
   16c90:	ldr	r2, [sp, #44]	; 0x2c
   16c94:	str	r8, [sp, #8]
   16c98:	cmp	r1, r2
   16c9c:	beq	17260 <__assert_fail@plt+0x5cc0>
   16ca0:	ldr	r6, [sp, #144]	; 0x90
   16ca4:	mov	r8, r3
   16ca8:	ldr	r4, [sp, #148]	; 0x94
   16cac:	b	16b50 <__assert_fail@plt+0x55b0>
   16cb0:	str	r5, [sp, #92]	; 0x5c
   16cb4:	ldrb	r3, [r4]
   16cb8:	strb	r5, [sp, #96]	; 0x60
   16cbc:	strb	r5, [sp, #84]	; 0x54
   16cc0:	str	r3, [sp, #100]	; 0x64
   16cc4:	mov	r4, r3
   16cc8:	b	16c50 <__assert_fail@plt+0x56b0>
   16ccc:	str	r5, [sp, #92]	; 0x5c
   16cd0:	strb	r7, [sp, #96]	; 0x60
   16cd4:	ldr	r4, [sp, #88]	; 0x58
   16cd8:	mov	r3, r5
   16cdc:	b	16ba0 <__assert_fail@plt+0x5600>
   16ce0:	ldr	r4, [sp, #88]	; 0x58
   16ce4:	mov	r0, r4
   16ce8:	bl	113f0 <strlen@plt>
   16cec:	strb	r7, [sp, #96]	; 0x60
   16cf0:	str	r0, [sp, #92]	; 0x5c
   16cf4:	mov	r3, r0
   16cf8:	b	16ba0 <__assert_fail@plt+0x5600>
   16cfc:	ldr	r4, [sp, #88]	; 0x58
   16d00:	str	r5, [sp, #92]	; 0x5c
   16d04:	ldrb	r3, [r4]
   16d08:	cmp	r3, #0
   16d0c:	bne	17348 <__assert_fail@plt+0x5da8>
   16d10:	ldr	r4, [sp, #100]	; 0x64
   16d14:	cmp	r4, #0
   16d18:	beq	16c38 <__assert_fail@plt+0x5698>
   16d1c:	b	16e80 <__assert_fail@plt+0x58e0>
   16d20:	ldr	r3, [sp, #4]
   16d24:	mov	r9, r4
   16d28:	mov	lr, r3
   16d2c:	b	16994 <__assert_fail@plt+0x53f4>
   16d30:	ldr	r4, [sp, #88]	; 0x58
   16d34:	b	16bb8 <__assert_fail@plt+0x5618>
   16d38:	ldr	r0, [sp, #32]
   16d3c:	bl	113f0 <strlen@plt>
   16d40:	strb	r4, [sp, #40]	; 0x28
   16d44:	str	r0, [sp, #36]	; 0x24
   16d48:	mov	r3, #1
   16d4c:	strb	r3, [sp, #28]
   16d50:	b	16800 <__assert_fail@plt+0x5260>
   16d54:	str	r8, [sp, #8]
   16d58:	mov	r8, r3
   16d5c:	b	16b3c <__assert_fail@plt+0x559c>
   16d60:	mov	r2, r4
   16d64:	mov	r0, r6
   16d68:	ldr	r1, [sp, #32]
   16d6c:	bl	1127c <memcmp@plt>
   16d70:	cmp	r0, #0
   16d74:	bne	16b50 <__assert_fail@plt+0x55b0>
   16d78:	add	lr, sp, #128	; 0x80
   16d7c:	add	ip, sp, #184	; 0xb8
   16d80:	ldm	lr!, {r0, r1, r2, r3}
   16d84:	stmia	ip!, {r0, r1, r2, r3}
   16d88:	ldm	lr!, {r0, r1, r2, r3}
   16d8c:	strb	r7, [sp, #196]	; 0xc4
   16d90:	stmia	ip!, {r0, r1, r2, r3}
   16d94:	ldm	lr!, {r0, r1, r2, r3}
   16d98:	ldr	r4, [sp, #200]	; 0xc8
   16d9c:	stmia	ip!, {r0, r1, r2, r3}
   16da0:	ldm	lr, {r0, r1}
   16da4:	ldr	r3, [sp, #204]	; 0xcc
   16da8:	add	r4, r4, r3
   16dac:	stm	ip, {r0, r1}
   16db0:	str	r4, [sp, #200]	; 0xc8
   16db4:	ldr	r3, [sp, #12]
   16db8:	strb	r7, [sp, #240]	; 0xf0
   16dbc:	str	r3, [sp, #256]	; 0x100
   16dc0:	ldrb	r3, [r3]
   16dc4:	str	r7, [sp, #244]	; 0xf4
   16dc8:	str	r7, [sp, #248]	; 0xf8
   16dcc:	and	r2, r3, #31
   16dd0:	lsr	r1, r3, #5
   16dd4:	strb	r7, [sp, #252]	; 0xfc
   16dd8:	ldr	r6, [r9, r1, lsl #2]
   16ddc:	lsr	r6, r6, r2
   16de0:	ands	r6, r6, #1
   16de4:	beq	16e08 <__assert_fail@plt+0x5868>
   16de8:	mov	r4, r3
   16dec:	str	r5, [sp, #260]	; 0x104
   16df0:	str	r3, [sp, #268]	; 0x10c
   16df4:	strb	r5, [sp, #264]	; 0x108
   16df8:	cmp	r4, #0
   16dfc:	strb	r5, [sp, #252]	; 0xfc
   16e00:	bne	16eec <__assert_fail@plt+0x594c>
   16e04:	bl	11570 <abort@plt>
   16e08:	add	r0, sp, #244	; 0xf4
   16e0c:	bl	11264 <mbsinit@plt>
   16e10:	cmp	r0, #0
   16e14:	beq	17328 <__assert_fail@plt+0x5d88>
   16e18:	strb	r5, [sp, #240]	; 0xf0
   16e1c:	bl	11324 <__ctype_get_mb_cur_max@plt>
   16e20:	ldr	r4, [sp, #12]
   16e24:	mov	r1, r0
   16e28:	mov	r0, r4
   16e2c:	bl	1b444 <__assert_fail@plt+0x9ea4>
   16e30:	add	r3, sp, #244	; 0xf4
   16e34:	mov	r1, r4
   16e38:	mov	r2, r0
   16e3c:	add	r0, sp, #268	; 0x10c
   16e40:	bl	1cea8 <__assert_fail@plt+0xb908>
   16e44:	cmn	r0, #1
   16e48:	str	r0, [sp, #260]	; 0x104
   16e4c:	beq	172d4 <__assert_fail@plt+0x5d34>
   16e50:	cmn	r0, #2
   16e54:	beq	172e8 <__assert_fail@plt+0x5d48>
   16e58:	cmp	r0, #0
   16e5c:	bne	1728c <__assert_fail@plt+0x5cec>
   16e60:	ldr	r4, [sp, #256]	; 0x100
   16e64:	str	r5, [sp, #260]	; 0x104
   16e68:	ldrb	r3, [r4]
   16e6c:	cmp	r3, #0
   16e70:	bne	17348 <__assert_fail@plt+0x5da8>
   16e74:	ldr	r4, [sp, #268]	; 0x10c
   16e78:	cmp	r4, #0
   16e7c:	beq	17290 <__assert_fail@plt+0x5cf0>
   16e80:	ldr	r3, [pc, #1268]	; 1737c <__assert_fail@plt+0x5ddc>
   16e84:	mov	r2, #172	; 0xac
   16e88:	ldr	r1, [pc, #1264]	; 17380 <__assert_fail@plt+0x5de0>
   16e8c:	ldr	r0, [pc, #1264]	; 17384 <__assert_fail@plt+0x5de4>
   16e90:	bl	115a0 <__assert_fail@plt>
   16e94:	ldr	sl, [sp, #88]	; 0x58
   16e98:	ldrb	r3, [sp, #72]	; 0x48
   16e9c:	cmp	r3, #0
   16ea0:	bne	171f4 <__assert_fail@plt+0x5c54>
   16ea4:	ldrb	r3, [sl]
   16ea8:	and	r2, r3, #31
   16eac:	lsr	r3, r3, #5
   16eb0:	ldr	r3, [r9, r3, lsl #2]
   16eb4:	lsr	r3, r3, r2
   16eb8:	tst	r3, #1
   16ebc:	beq	171e0 <__assert_fail@plt+0x5c40>
   16ec0:	str	r5, [sp, #92]	; 0x5c
   16ec4:	ldrb	r3, [sl]
   16ec8:	strb	r5, [sp, #96]	; 0x60
   16ecc:	strb	r5, [sp, #84]	; 0x54
   16ed0:	mov	r4, r3
   16ed4:	str	r3, [sp, #100]	; 0x64
   16ed8:	cmp	r4, #0
   16edc:	beq	16c58 <__assert_fail@plt+0x56b8>
   16ee0:	ldrb	r3, [sp, #152]	; 0x98
   16ee4:	mov	sl, r5
   16ee8:	b	16c74 <__assert_fail@plt+0x56d4>
   16eec:	ldr	r4, [sp, #256]	; 0x100
   16ef0:	ldr	r3, [sp, #260]	; 0x104
   16ef4:	add	r4, r4, r3
   16ef8:	ldrb	r3, [sp, #240]	; 0xf0
   16efc:	strb	r7, [sp, #252]	; 0xfc
   16f00:	add	r8, r8, #1
   16f04:	cmp	r3, #0
   16f08:	str	r4, [sp, #256]	; 0x100
   16f0c:	bne	170ac <__assert_fail@plt+0x5b0c>
   16f10:	ldrb	r3, [r4]
   16f14:	and	r2, r3, #31
   16f18:	lsr	r3, r3, #5
   16f1c:	ldr	r3, [r9, r3, lsl #2]
   16f20:	lsr	r3, r3, r2
   16f24:	tst	r3, #1
   16f28:	beq	17144 <__assert_fail@plt+0x5ba4>
   16f2c:	str	r5, [sp, #260]	; 0x104
   16f30:	ldrb	r4, [r4]
   16f34:	strb	r5, [sp, #264]	; 0x108
   16f38:	str	r4, [sp, #268]	; 0x10c
   16f3c:	cmp	r4, #0
   16f40:	strb	r5, [sp, #252]	; 0xfc
   16f44:	bne	16f68 <__assert_fail@plt+0x59c8>
   16f48:	ldr	r0, [sp, #144]	; 0x90
   16f4c:	add	sp, sp, #300	; 0x12c
   16f50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f54:	ldr	r0, [sp, #256]	; 0x100
   16f58:	bl	113f0 <strlen@plt>
   16f5c:	strb	r7, [sp, #264]	; 0x108
   16f60:	str	r0, [sp, #260]	; 0x104
   16f64:	strb	r5, [sp, #252]	; 0xfc
   16f68:	ldrb	r3, [sp, #196]	; 0xc4
   16f6c:	cmp	r3, #0
   16f70:	beq	16fa0 <__assert_fail@plt+0x5a00>
   16f74:	ldrb	r3, [sp, #208]	; 0xd0
   16f78:	cmp	r3, #0
   16f7c:	ldrne	r4, [sp, #212]	; 0xd4
   16f80:	bne	17048 <__assert_fail@plt+0x5aa8>
   16f84:	ldr	r2, [sp, #204]	; 0xcc
   16f88:	ldr	r3, [sp, #260]	; 0x104
   16f8c:	cmp	r2, r3
   16f90:	beq	1712c <__assert_fail@plt+0x5b8c>
   16f94:	ldr	r6, [sp, #144]	; 0x90
   16f98:	ldr	r4, [sp, #148]	; 0x94
   16f9c:	b	16b50 <__assert_fail@plt+0x55b0>
   16fa0:	ldrb	r3, [sp, #184]	; 0xb8
   16fa4:	ldr	r4, [sp, #200]	; 0xc8
   16fa8:	cmp	r3, #0
   16fac:	bne	16fe0 <__assert_fail@plt+0x5a40>
   16fb0:	ldrb	r3, [r4]
   16fb4:	and	r2, r3, #31
   16fb8:	lsr	r3, r3, #5
   16fbc:	ldr	r3, [r9, r3, lsl #2]
   16fc0:	lsr	r3, r3, r2
   16fc4:	tst	r3, #1
   16fc8:	bne	17110 <__assert_fail@plt+0x5b70>
   16fcc:	add	r0, sp, #188	; 0xbc
   16fd0:	bl	11264 <mbsinit@plt>
   16fd4:	cmp	r0, #0
   16fd8:	beq	17328 <__assert_fail@plt+0x5d88>
   16fdc:	strb	r5, [sp, #184]	; 0xb8
   16fe0:	bl	11324 <__ctype_get_mb_cur_max@plt>
   16fe4:	mov	r1, r0
   16fe8:	mov	r0, r4
   16fec:	bl	1b444 <__assert_fail@plt+0x9ea4>
   16ff0:	add	r3, sp, #188	; 0xbc
   16ff4:	mov	r1, r4
   16ff8:	mov	r2, r0
   16ffc:	add	r0, sp, #212	; 0xd4
   17000:	bl	1cea8 <__assert_fail@plt+0xb908>
   17004:	cmn	r0, #1
   17008:	str	r0, [sp, #204]	; 0xcc
   1700c:	strbeq	r7, [sp, #208]	; 0xd0
   17010:	streq	r5, [sp, #204]	; 0xcc
   17014:	strbeq	r5, [sp, #196]	; 0xc4
   17018:	beq	16f84 <__assert_fail@plt+0x59e4>
   1701c:	cmn	r0, #2
   17020:	beq	1715c <__assert_fail@plt+0x5bbc>
   17024:	cmp	r0, #0
   17028:	beq	17198 <__assert_fail@plt+0x5bf8>
   1702c:	ldr	r4, [sp, #212]	; 0xd4
   17030:	add	r0, sp, #188	; 0xbc
   17034:	strb	r5, [sp, #208]	; 0xd0
   17038:	bl	11264 <mbsinit@plt>
   1703c:	strb	r5, [sp, #196]	; 0xc4
   17040:	cmp	r0, #0
   17044:	strbne	r7, [sp, #184]	; 0xb8
   17048:	cmp	r4, #0
   1704c:	beq	16a84 <__assert_fail@plt+0x54e4>
   17050:	ldrb	r3, [sp, #264]	; 0x108
   17054:	cmp	r3, #0
   17058:	beq	16f84 <__assert_fail@plt+0x59e4>
   1705c:	ldr	r0, [sp, #268]	; 0x10c
   17060:	subs	r0, r0, r4
   17064:	movne	r0, #1
   17068:	cmp	r0, #0
   1706c:	add	r1, r8, #1
   17070:	bne	16f94 <__assert_fail@plt+0x59f4>
   17074:	ldr	r3, [sp, #200]	; 0xc8
   17078:	ldr	r2, [sp, #204]	; 0xcc
   1707c:	ldr	r4, [sp, #256]	; 0x100
   17080:	add	r3, r3, r2
   17084:	str	r3, [sp, #200]	; 0xc8
   17088:	ldrb	r3, [sp, #240]	; 0xf0
   1708c:	ldr	r2, [sp, #260]	; 0x104
   17090:	strb	r0, [sp, #196]	; 0xc4
   17094:	add	r4, r4, r2
   17098:	cmp	r3, #0
   1709c:	strb	r0, [sp, #252]	; 0xfc
   170a0:	mov	r8, r1
   170a4:	str	r4, [sp, #256]	; 0x100
   170a8:	beq	16f10 <__assert_fail@plt+0x5970>
   170ac:	bl	11324 <__ctype_get_mb_cur_max@plt>
   170b0:	mov	r1, r0
   170b4:	mov	r0, r4
   170b8:	bl	1b444 <__assert_fail@plt+0x9ea4>
   170bc:	add	r3, sp, #244	; 0xf4
   170c0:	mov	r1, r4
   170c4:	mov	r2, r0
   170c8:	add	r0, sp, #268	; 0x10c
   170cc:	bl	1cea8 <__assert_fail@plt+0xb908>
   170d0:	cmn	r0, #1
   170d4:	str	r0, [sp, #260]	; 0x104
   170d8:	strbeq	r7, [sp, #264]	; 0x108
   170dc:	streq	r5, [sp, #260]	; 0x104
   170e0:	beq	16f64 <__assert_fail@plt+0x59c4>
   170e4:	cmn	r0, #2
   170e8:	beq	16f54 <__assert_fail@plt+0x59b4>
   170ec:	cmp	r0, #0
   170f0:	beq	17174 <__assert_fail@plt+0x5bd4>
   170f4:	ldr	r4, [sp, #268]	; 0x10c
   170f8:	add	r0, sp, #244	; 0xf4
   170fc:	strb	r5, [sp, #264]	; 0x108
   17100:	bl	11264 <mbsinit@plt>
   17104:	cmp	r0, #0
   17108:	strbne	r7, [sp, #240]	; 0xf0
   1710c:	b	16f3c <__assert_fail@plt+0x599c>
   17110:	str	r5, [sp, #204]	; 0xcc
   17114:	ldrb	r0, [r4]
   17118:	strb	r5, [sp, #208]	; 0xd0
   1711c:	strb	r5, [sp, #196]	; 0xc4
   17120:	str	r0, [sp, #212]	; 0xd4
   17124:	mov	r4, r0
   17128:	b	17048 <__assert_fail@plt+0x5aa8>
   1712c:	ldr	r1, [sp, #256]	; 0x100
   17130:	ldr	r0, [sp, #200]	; 0xc8
   17134:	bl	1127c <memcmp@plt>
   17138:	adds	r0, r0, #0
   1713c:	movne	r0, #1
   17140:	b	17068 <__assert_fail@plt+0x5ac8>
   17144:	add	r0, sp, #244	; 0xf4
   17148:	bl	11264 <mbsinit@plt>
   1714c:	cmp	r0, #0
   17150:	beq	17328 <__assert_fail@plt+0x5d88>
   17154:	strb	r5, [sp, #240]	; 0xf0
   17158:	b	170ac <__assert_fail@plt+0x5b0c>
   1715c:	ldr	r0, [sp, #200]	; 0xc8
   17160:	bl	113f0 <strlen@plt>
   17164:	strb	r7, [sp, #208]	; 0xd0
   17168:	strb	r5, [sp, #196]	; 0xc4
   1716c:	str	r0, [sp, #204]	; 0xcc
   17170:	b	16f84 <__assert_fail@plt+0x59e4>
   17174:	ldr	r3, [sp, #256]	; 0x100
   17178:	str	r5, [sp, #260]	; 0x104
   1717c:	ldrb	r3, [r3]
   17180:	cmp	r3, #0
   17184:	bne	17348 <__assert_fail@plt+0x5da8>
   17188:	ldr	r4, [sp, #268]	; 0x10c
   1718c:	cmp	r4, #0
   17190:	beq	170f8 <__assert_fail@plt+0x5b58>
   17194:	b	16e80 <__assert_fail@plt+0x58e0>
   17198:	ldr	r3, [sp, #200]	; 0xc8
   1719c:	str	r5, [sp, #204]	; 0xcc
   171a0:	ldrb	r3, [r3]
   171a4:	cmp	r3, #0
   171a8:	bne	17348 <__assert_fail@plt+0x5da8>
   171ac:	ldr	r4, [sp, #212]	; 0xd4
   171b0:	cmp	r4, #0
   171b4:	beq	17030 <__assert_fail@plt+0x5a90>
   171b8:	b	16e80 <__assert_fail@plt+0x58e0>
   171bc:	ldr	r6, [sp, #144]	; 0x90
   171c0:	str	r5, [sp, #148]	; 0x94
   171c4:	ldrb	r3, [r6]
   171c8:	cmp	r3, #0
   171cc:	bne	17348 <__assert_fail@plt+0x5da8>
   171d0:	ldr	r4, [sp, #156]	; 0x9c
   171d4:	cmp	r4, #0
   171d8:	beq	16af8 <__assert_fail@plt+0x5558>
   171dc:	b	16e80 <__assert_fail@plt+0x58e0>
   171e0:	add	r0, sp, #76	; 0x4c
   171e4:	bl	11264 <mbsinit@plt>
   171e8:	cmp	r0, #0
   171ec:	beq	17328 <__assert_fail@plt+0x5d88>
   171f0:	strb	r5, [sp, #72]	; 0x48
   171f4:	bl	11324 <__ctype_get_mb_cur_max@plt>
   171f8:	mov	r1, r0
   171fc:	mov	r0, sl
   17200:	bl	1b444 <__assert_fail@plt+0x9ea4>
   17204:	add	r3, sp, #76	; 0x4c
   17208:	mov	r1, sl
   1720c:	mov	r2, r0
   17210:	add	r0, sp, #100	; 0x64
   17214:	bl	1cea8 <__assert_fail@plt+0xb908>
   17218:	cmn	r0, #1
   1721c:	str	r0, [sp, #92]	; 0x5c
   17220:	strbeq	r7, [sp, #96]	; 0x60
   17224:	streq	r5, [sp, #92]	; 0x5c
   17228:	strbeq	r5, [sp, #84]	; 0x54
   1722c:	beq	16ee0 <__assert_fail@plt+0x5940>
   17230:	cmn	r0, #2
   17234:	beq	172a8 <__assert_fail@plt+0x5d08>
   17238:	cmp	r0, #0
   1723c:	beq	17304 <__assert_fail@plt+0x5d64>
   17240:	ldr	r4, [sp, #100]	; 0x64
   17244:	add	r0, sp, #76	; 0x4c
   17248:	strb	r5, [sp, #96]	; 0x60
   1724c:	bl	11264 <mbsinit@plt>
   17250:	strb	r5, [sp, #84]	; 0x54
   17254:	cmp	r0, #0
   17258:	strbne	r7, [sp, #72]	; 0x48
   1725c:	b	16ed8 <__assert_fail@plt+0x5938>
   17260:	mov	r8, r3
   17264:	b	16d78 <__assert_fail@plt+0x57d8>
   17268:	ldr	r3, [sp, #32]
   1726c:	str	r5, [sp, #36]	; 0x24
   17270:	ldrb	r3, [r3]
   17274:	cmp	r3, #0
   17278:	bne	17348 <__assert_fail@plt+0x5da8>
   1727c:	ldr	r4, [sp, #44]	; 0x2c
   17280:	cmp	r4, #0
   17284:	beq	16928 <__assert_fail@plt+0x5388>
   17288:	b	16e80 <__assert_fail@plt+0x58e0>
   1728c:	ldr	r4, [sp, #268]	; 0x10c
   17290:	add	r0, sp, #244	; 0xf4
   17294:	strb	r5, [sp, #264]	; 0x108
   17298:	bl	11264 <mbsinit@plt>
   1729c:	cmp	r0, #0
   172a0:	strbne	r7, [sp, #240]	; 0xf0
   172a4:	b	16df8 <__assert_fail@plt+0x5858>
   172a8:	ldr	r0, [sp, #88]	; 0x58
   172ac:	bl	113f0 <strlen@plt>
   172b0:	strb	r7, [sp, #96]	; 0x60
   172b4:	strb	r5, [sp, #84]	; 0x54
   172b8:	str	r0, [sp, #92]	; 0x5c
   172bc:	b	16ee0 <__assert_fail@plt+0x5940>
   172c0:	ldr	r0, [sp, #240]	; 0xf0
   172c4:	b	16958 <__assert_fail@plt+0x53b8>
   172c8:	add	r3, r8, #1
   172cc:	ldr	r8, [sp, #8]
   172d0:	b	16c80 <__assert_fail@plt+0x56e0>
   172d4:	str	r5, [sp, #260]	; 0x104
   172d8:	strb	r6, [sp, #264]	; 0x108
   172dc:	ldr	r4, [sp, #256]	; 0x100
   172e0:	mov	r3, r5
   172e4:	b	16ef4 <__assert_fail@plt+0x5954>
   172e8:	ldr	r4, [sp, #256]	; 0x100
   172ec:	mov	r0, r4
   172f0:	bl	113f0 <strlen@plt>
   172f4:	strb	r6, [sp, #264]	; 0x108
   172f8:	str	r0, [sp, #260]	; 0x104
   172fc:	mov	r3, r0
   17300:	b	16ef4 <__assert_fail@plt+0x5954>
   17304:	ldr	r4, [sp, #88]	; 0x58
   17308:	str	r5, [sp, #92]	; 0x5c
   1730c:	ldrb	r3, [r4]
   17310:	cmp	r3, #0
   17314:	bne	17348 <__assert_fail@plt+0x5da8>
   17318:	ldr	r4, [sp, #100]	; 0x64
   1731c:	cmp	r4, #0
   17320:	beq	17244 <__assert_fail@plt+0x5ca4>
   17324:	b	16e80 <__assert_fail@plt+0x58e0>
   17328:	ldr	r3, [pc, #76]	; 1737c <__assert_fail@plt+0x5ddc>
   1732c:	mov	r2, #143	; 0x8f
   17330:	ldr	r1, [pc, #72]	; 17380 <__assert_fail@plt+0x5de0>
   17334:	ldr	r0, [pc, #76]	; 17388 <__assert_fail@plt+0x5de8>
   17338:	bl	115a0 <__assert_fail@plt>
   1733c:	add	r8, r8, #1
   17340:	mov	sl, r3
   17344:	b	16b3c <__assert_fail@plt+0x559c>
   17348:	ldr	r3, [pc, #44]	; 1737c <__assert_fail@plt+0x5ddc>
   1734c:	mov	r2, #171	; 0xab
   17350:	ldr	r1, [pc, #40]	; 17380 <__assert_fail@plt+0x5de0>
   17354:	ldr	r0, [pc, #48]	; 1738c <__assert_fail@plt+0x5dec>
   17358:	bl	115a0 <__assert_fail@plt>
   1735c:	cmp	r3, #0
   17360:	beq	16e94 <__assert_fail@plt+0x58f4>
   17364:	ldrb	r3, [sp, #96]	; 0x60
   17368:	cmp	r3, #0
   1736c:	ldrne	r4, [sp, #100]	; 0x64
   17370:	beq	16ee0 <__assert_fail@plt+0x5940>
   17374:	b	16ed8 <__assert_fail@plt+0x5938>
   17378:	andeq	pc, r1, r8, lsr #25
   1737c:	andeq	pc, r1, r0, asr #15
   17380:	ldrdeq	pc, [r1], -r4
   17384:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   17388:	andeq	pc, r1, r0, ror #15
   1738c:	strdeq	pc, [r1], -r8
   17390:	push	{r4, r5, r6, lr}
   17394:	subs	r4, r0, #0
   17398:	beq	1740c <__assert_fail@plt+0x5e6c>
   1739c:	mov	r1, #47	; 0x2f
   173a0:	bl	114e0 <strrchr@plt>
   173a4:	subs	r5, r0, #0
   173a8:	beq	173f8 <__assert_fail@plt+0x5e58>
   173ac:	add	r6, r5, #1
   173b0:	sub	r3, r6, r4
   173b4:	cmp	r3, #6
   173b8:	ble	173f8 <__assert_fail@plt+0x5e58>
   173bc:	mov	r2, #7
   173c0:	ldr	r1, [pc, #96]	; 17428 <__assert_fail@plt+0x5e88>
   173c4:	sub	r0, r5, #6
   173c8:	bl	11564 <strncmp@plt>
   173cc:	cmp	r0, #0
   173d0:	bne	173f8 <__assert_fail@plt+0x5e58>
   173d4:	mov	r2, #3
   173d8:	ldr	r1, [pc, #76]	; 1742c <__assert_fail@plt+0x5e8c>
   173dc:	mov	r0, r6
   173e0:	bl	11564 <strncmp@plt>
   173e4:	cmp	r0, #0
   173e8:	movne	r4, r6
   173ec:	ldreq	r3, [pc, #60]	; 17430 <__assert_fail@plt+0x5e90>
   173f0:	addeq	r4, r5, #4
   173f4:	streq	r4, [r3]
   173f8:	ldr	r2, [pc, #52]	; 17434 <__assert_fail@plt+0x5e94>
   173fc:	ldr	r3, [pc, #52]	; 17438 <__assert_fail@plt+0x5e98>
   17400:	str	r4, [r2]
   17404:	str	r4, [r3]
   17408:	pop	{r4, r5, r6, pc}
   1740c:	ldr	r3, [pc, #40]	; 1743c <__assert_fail@plt+0x5e9c>
   17410:	mov	r2, #55	; 0x37
   17414:	mov	r1, #1
   17418:	ldr	r3, [r3]
   1741c:	ldr	r0, [pc, #28]	; 17440 <__assert_fail@plt+0x5ea0>
   17420:	bl	11300 <fwrite@plt>
   17424:	bl	11570 <abort@plt>
   17428:	andeq	pc, r1, ip, asr r8	; <UNPREDICTABLE>
   1742c:	andeq	pc, r1, r4, ror #16
   17430:			; <UNDEFINED> instruction: 0x000301b8
   17434:			; <UNDEFINED> instruction: 0x000302b4
   17438:	andeq	r0, r3, r0, asr #3
   1743c:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   17440:	andeq	pc, r1, r4, lsr #16
   17444:	push	{r4, r5, r6, lr}
   17448:	mov	r4, r0
   1744c:	mov	r5, r1
   17450:	bl	1d080 <__assert_fail@plt+0xbae0>
   17454:	ldrb	r3, [r0]
   17458:	bic	r3, r3, #32
   1745c:	cmp	r3, #85	; 0x55
   17460:	bne	174c0 <__assert_fail@plt+0x5f20>
   17464:	ldrb	r3, [r0, #1]
   17468:	bic	r3, r3, #32
   1746c:	cmp	r3, #84	; 0x54
   17470:	bne	174fc <__assert_fail@plt+0x5f5c>
   17474:	ldrb	r3, [r0, #2]
   17478:	bic	r3, r3, #32
   1747c:	cmp	r3, #70	; 0x46
   17480:	bne	174fc <__assert_fail@plt+0x5f5c>
   17484:	ldrb	r3, [r0, #3]
   17488:	cmp	r3, #45	; 0x2d
   1748c:	bne	174fc <__assert_fail@plt+0x5f5c>
   17490:	ldrb	r3, [r0, #4]
   17494:	cmp	r3, #56	; 0x38
   17498:	bne	174fc <__assert_fail@plt+0x5f5c>
   1749c:	ldrb	r3, [r0, #5]
   174a0:	cmp	r3, #0
   174a4:	bne	174fc <__assert_fail@plt+0x5f5c>
   174a8:	ldrb	r2, [r4]
   174ac:	ldr	r3, [pc, #152]	; 1754c <__assert_fail@plt+0x5fac>
   174b0:	ldr	r0, [pc, #152]	; 17550 <__assert_fail@plt+0x5fb0>
   174b4:	cmp	r2, #96	; 0x60
   174b8:	movne	r0, r3
   174bc:	pop	{r4, r5, r6, pc}
   174c0:	cmp	r3, #71	; 0x47
   174c4:	bne	174fc <__assert_fail@plt+0x5f5c>
   174c8:	ldrb	r3, [r0, #1]
   174cc:	bic	r3, r3, #32
   174d0:	cmp	r3, #66	; 0x42
   174d4:	bne	174fc <__assert_fail@plt+0x5f5c>
   174d8:	ldrb	r3, [r0, #2]
   174dc:	cmp	r3, #49	; 0x31
   174e0:	bne	174fc <__assert_fail@plt+0x5f5c>
   174e4:	ldrb	r3, [r0, #3]
   174e8:	cmp	r3, #56	; 0x38
   174ec:	bne	174fc <__assert_fail@plt+0x5f5c>
   174f0:	ldrb	r3, [r0, #4]
   174f4:	cmp	r3, #48	; 0x30
   174f8:	beq	17510 <__assert_fail@plt+0x5f70>
   174fc:	ldr	r3, [pc, #80]	; 17554 <__assert_fail@plt+0x5fb4>
   17500:	cmp	r5, #9
   17504:	ldr	r0, [pc, #76]	; 17558 <__assert_fail@plt+0x5fb8>
   17508:	movne	r0, r3
   1750c:	pop	{r4, r5, r6, pc}
   17510:	ldrb	r3, [r0, #5]
   17514:	cmp	r3, #51	; 0x33
   17518:	bne	174fc <__assert_fail@plt+0x5f5c>
   1751c:	ldrb	r3, [r0, #6]
   17520:	cmp	r3, #48	; 0x30
   17524:	bne	174fc <__assert_fail@plt+0x5f5c>
   17528:	ldrb	r3, [r0, #7]
   1752c:	cmp	r3, #0
   17530:	bne	174fc <__assert_fail@plt+0x5f5c>
   17534:	ldrb	r2, [r4]
   17538:	ldr	r3, [pc, #28]	; 1755c <__assert_fail@plt+0x5fbc>
   1753c:	ldr	r0, [pc, #28]	; 17560 <__assert_fail@plt+0x5fc0>
   17540:	cmp	r2, #96	; 0x60
   17544:	movne	r0, r3
   17548:	pop	{r4, r5, r6, pc}
   1754c:	andeq	pc, r1, r0, asr #17
   17550:			; <UNDEFINED> instruction: 0x0001f8bc
   17554:	ldrdeq	pc, [r1], -r0
   17558:	andeq	pc, r1, ip, asr #17
   1755c:	andeq	pc, r1, r8, asr #17
   17560:	andeq	pc, r1, r4, asr #17
   17564:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17568:	sub	sp, sp, #140	; 0x8c
   1756c:	mov	r9, r1
   17570:	str	r3, [sp, #24]
   17574:	mov	r3, #1
   17578:	mov	sl, r0
   1757c:	str	r2, [sp, #44]	; 0x2c
   17580:	str	r3, [sp, #28]
   17584:	bl	11324 <__ctype_get_mb_cur_max@plt>
   17588:	ldr	r3, [sp, #180]	; 0xb4
   1758c:	mov	fp, r9
   17590:	mov	r9, sl
   17594:	lsr	r3, r3, #1
   17598:	and	r3, r3, #1
   1759c:	str	r3, [sp, #40]	; 0x28
   175a0:	ldr	r3, [sp, #180]	; 0xb4
   175a4:	mov	r2, #0
   175a8:	and	r3, r3, #4
   175ac:	str	r3, [sp, #100]	; 0x64
   175b0:	ldr	r3, [sp, #180]	; 0xb4
   175b4:	str	r2, [sp, #76]	; 0x4c
   175b8:	and	r3, r3, #1
   175bc:	str	r3, [sp, #96]	; 0x60
   175c0:	str	r2, [sp, #36]	; 0x24
   175c4:	str	r2, [sp, #56]	; 0x38
   175c8:	str	r2, [sp, #68]	; 0x44
   175cc:	str	r2, [sp, #72]	; 0x48
   175d0:	str	r2, [sp, #84]	; 0x54
   175d4:	str	r0, [sp, #80]	; 0x50
   175d8:	ldr	r3, [sp, #176]	; 0xb0
   175dc:	cmp	r3, #10
   175e0:	ldrls	pc, [pc, r3, lsl #2]
   175e4:	b	187bc <__assert_fail@plt+0x721c>
   175e8:	andeq	r7, r1, r4, lsl r6
   175ec:	andeq	r7, r1, r4, lsr r9
   175f0:	andeq	r7, r1, ip, lsl #21
   175f4:	andeq	r7, r1, r8, ror #18
   175f8:	andeq	r7, r1, r0, ror #21
   175fc:	andeq	r7, r1, r0, asr #21
   17600:	andeq	r7, r1, r8, lsl #19
   17604:	andeq	r7, r1, ip, lsr #19
   17608:	ldrdeq	r7, [r1], -r4
   1760c:	ldrdeq	r7, [r1], -r4
   17610:	ldrdeq	r7, [r1], -r4
   17614:	mov	r3, #0
   17618:	ldr	r1, [sp, #56]	; 0x38
   1761c:	ldr	r2, [sp, #176]	; 0xb0
   17620:	ldr	lr, [sp, #176]	; 0xb0
   17624:	mov	r8, r3
   17628:	mov	ip, r3
   1762c:	str	r3, [sp, #40]	; 0x28
   17630:	mov	r3, r1
   17634:	cmp	r2, #2
   17638:	moveq	r3, #0
   1763c:	andne	r3, r3, #1
   17640:	mov	r0, r3
   17644:	str	r3, [sp, #92]	; 0x5c
   17648:	ldr	r3, [sp, #68]	; 0x44
   1764c:	sub	lr, lr, #2
   17650:	adds	r2, r3, #0
   17654:	movne	r2, #1
   17658:	and	r3, r1, ip
   1765c:	and	r3, r2, r3
   17660:	clz	lr, lr
   17664:	str	r3, [sp, #88]	; 0x58
   17668:	lsr	lr, lr, #5
   1766c:	mov	r3, ip
   17670:	and	r3, r3, lr
   17674:	mov	sl, #0
   17678:	and	r0, r2, r0
   1767c:	str	r3, [sp, #64]	; 0x40
   17680:	eor	r3, r1, #1
   17684:	str	lr, [sp, #52]	; 0x34
   17688:	str	r0, [sp, #48]	; 0x30
   1768c:	str	r3, [sp, #60]	; 0x3c
   17690:	ldr	r3, [sp, #24]
   17694:	cmn	r3, #1
   17698:	beq	17bc8 <__assert_fail@plt+0x6628>
   1769c:	subs	r7, r3, sl
   176a0:	movne	r7, #1
   176a4:	cmp	r7, #0
   176a8:	beq	17be0 <__assert_fail@plt+0x6640>
   176ac:	ldr	r3, [sp, #48]	; 0x30
   176b0:	cmp	r3, #0
   176b4:	beq	17f4c <__assert_fail@plt+0x69ac>
   176b8:	ldr	r2, [sp, #68]	; 0x44
   176bc:	ldr	r1, [sp, #24]
   176c0:	cmp	r2, #1
   176c4:	mov	r3, r2
   176c8:	movls	r3, #0
   176cc:	movhi	r3, #1
   176d0:	cmn	r1, #1
   176d4:	movne	r3, #0
   176d8:	cmp	r3, #0
   176dc:	add	r4, sl, r2
   176e0:	beq	176f0 <__assert_fail@plt+0x6150>
   176e4:	ldr	r0, [sp, #44]	; 0x2c
   176e8:	bl	113f0 <strlen@plt>
   176ec:	str	r0, [sp, #24]
   176f0:	ldr	r3, [sp, #24]
   176f4:	cmp	r3, r4
   176f8:	ldr	r3, [sp, #44]	; 0x2c
   176fc:	add	r5, r3, sl
   17700:	bcc	17f54 <__assert_fail@plt+0x69b4>
   17704:	mov	r0, r5
   17708:	ldr	r2, [sp, #68]	; 0x44
   1770c:	ldr	r1, [sp, #72]	; 0x48
   17710:	bl	1127c <memcmp@plt>
   17714:	cmp	r0, #0
   17718:	bne	17f54 <__assert_fail@plt+0x69b4>
   1771c:	ldr	r3, [sp, #40]	; 0x28
   17720:	cmp	r3, #0
   17724:	bne	18910 <__assert_fail@plt+0x7370>
   17728:	ldrb	r4, [r5]
   1772c:	cmp	r4, #126	; 0x7e
   17730:	ldrls	pc, [pc, r4, lsl #2]
   17734:	b	1884c <__assert_fail@plt+0x72ac>
   17738:	andeq	r7, r1, ip, lsl #28
   1773c:	andeq	r8, r1, ip, asr #16
   17740:	andeq	r8, r1, ip, asr #16
   17744:	andeq	r8, r1, ip, asr #16
   17748:	andeq	r8, r1, ip, asr #16
   1774c:	andeq	r8, r1, ip, asr #16
   17750:	andeq	r8, r1, ip, asr #16
   17754:	strdeq	r7, [r1], -r8
   17758:	andeq	r7, r1, r4, ror #27
   1775c:	andeq	r7, r1, r0, asr #27
   17760:	andeq	r7, r1, r0, lsr #27
   17764:	ldrdeq	r7, [r1], -r0
   17768:	andeq	r7, r1, r8, lsl #26
   1776c:	andeq	r7, r1, ip, lsr pc
   17770:	andeq	r8, r1, ip, asr #16
   17774:	andeq	r8, r1, ip, asr #16
   17778:	andeq	r8, r1, ip, asr #16
   1777c:	andeq	r8, r1, ip, asr #16
   17780:	andeq	r8, r1, ip, asr #16
   17784:	andeq	r8, r1, ip, asr #16
   17788:	andeq	r8, r1, ip, asr #16
   1778c:	andeq	r8, r1, ip, asr #16
   17790:	andeq	r8, r1, ip, asr #16
   17794:	andeq	r8, r1, ip, asr #16
   17798:	andeq	r8, r1, ip, asr #16
   1779c:	andeq	r8, r1, ip, asr #16
   177a0:	andeq	r8, r1, ip, asr #16
   177a4:	andeq	r8, r1, ip, asr #16
   177a8:	andeq	r8, r1, ip, asr #16
   177ac:	andeq	r8, r1, ip, asr #16
   177b0:	andeq	r8, r1, ip, asr #16
   177b4:	andeq	r8, r1, ip, asr #16
   177b8:	andeq	r7, r1, ip, lsr #30
   177bc:	andeq	r7, r1, ip, lsl #30
   177c0:	andeq	r7, r1, ip, lsl #30
   177c4:	andeq	r7, r1, ip, ror #29
   177c8:	andeq	r7, r1, ip, lsl #30
   177cc:	strdeq	r7, [r1], -r8
   177d0:	andeq	r7, r1, ip, lsl #30
   177d4:	ldrdeq	r7, [r1], -r4
   177d8:	andeq	r7, r1, ip, lsl #30
   177dc:	andeq	r7, r1, ip, lsl #30
   177e0:	andeq	r7, r1, ip, lsl #30
   177e4:	strdeq	r7, [r1], -r8
   177e8:	strdeq	r7, [r1], -r8
   177ec:	strdeq	r7, [r1], -r8
   177f0:	strdeq	r7, [r1], -r8
   177f4:	strdeq	r7, [r1], -r8
   177f8:	strdeq	r7, [r1], -r8
   177fc:	strdeq	r7, [r1], -r8
   17800:	strdeq	r7, [r1], -r8
   17804:	strdeq	r7, [r1], -r8
   17808:	strdeq	r7, [r1], -r8
   1780c:	strdeq	r7, [r1], -r8
   17810:	strdeq	r7, [r1], -r8
   17814:	strdeq	r7, [r1], -r8
   17818:	strdeq	r7, [r1], -r8
   1781c:	strdeq	r7, [r1], -r8
   17820:	strdeq	r7, [r1], -r8
   17824:	andeq	r7, r1, ip, lsl #30
   17828:	andeq	r7, r1, ip, lsl #30
   1782c:	andeq	r7, r1, ip, lsl #30
   17830:	andeq	r7, r1, ip, lsl #30
   17834:	andeq	r7, r1, r4, lsl #25
   17838:	andeq	r8, r1, ip, asr #16
   1783c:	strdeq	r7, [r1], -r8
   17840:	strdeq	r7, [r1], -r8
   17844:	strdeq	r7, [r1], -r8
   17848:	strdeq	r7, [r1], -r8
   1784c:	strdeq	r7, [r1], -r8
   17850:	strdeq	r7, [r1], -r8
   17854:	strdeq	r7, [r1], -r8
   17858:	strdeq	r7, [r1], -r8
   1785c:	strdeq	r7, [r1], -r8
   17860:	strdeq	r7, [r1], -r8
   17864:	strdeq	r7, [r1], -r8
   17868:	strdeq	r7, [r1], -r8
   1786c:	strdeq	r7, [r1], -r8
   17870:	strdeq	r7, [r1], -r8
   17874:	strdeq	r7, [r1], -r8
   17878:	strdeq	r7, [r1], -r8
   1787c:	strdeq	r7, [r1], -r8
   17880:	strdeq	r7, [r1], -r8
   17884:	strdeq	r7, [r1], -r8
   17888:	strdeq	r7, [r1], -r8
   1788c:	strdeq	r7, [r1], -r8
   17890:	strdeq	r7, [r1], -r8
   17894:	strdeq	r7, [r1], -r8
   17898:	strdeq	r7, [r1], -r8
   1789c:	strdeq	r7, [r1], -r8
   178a0:	strdeq	r7, [r1], -r8
   178a4:	andeq	r7, r1, ip, lsl #30
   178a8:	andeq	r7, r1, r0, asr ip
   178ac:	strdeq	r7, [r1], -r8
   178b0:	andeq	r7, r1, ip, lsl #30
   178b4:	strdeq	r7, [r1], -r8
   178b8:	andeq	r7, r1, ip, lsl #30
   178bc:	strdeq	r7, [r1], -r8
   178c0:	strdeq	r7, [r1], -r8
   178c4:	strdeq	r7, [r1], -r8
   178c8:	strdeq	r7, [r1], -r8
   178cc:	strdeq	r7, [r1], -r8
   178d0:	strdeq	r7, [r1], -r8
   178d4:	strdeq	r7, [r1], -r8
   178d8:	strdeq	r7, [r1], -r8
   178dc:	strdeq	r7, [r1], -r8
   178e0:	strdeq	r7, [r1], -r8
   178e4:	strdeq	r7, [r1], -r8
   178e8:	strdeq	r7, [r1], -r8
   178ec:	strdeq	r7, [r1], -r8
   178f0:	strdeq	r7, [r1], -r8
   178f4:	strdeq	r7, [r1], -r8
   178f8:	strdeq	r7, [r1], -r8
   178fc:	strdeq	r7, [r1], -r8
   17900:	strdeq	r7, [r1], -r8
   17904:	strdeq	r7, [r1], -r8
   17908:	strdeq	r7, [r1], -r8
   1790c:	strdeq	r7, [r1], -r8
   17910:	strdeq	r7, [r1], -r8
   17914:	strdeq	r7, [r1], -r8
   17918:	strdeq	r7, [r1], -r8
   1791c:	strdeq	r7, [r1], -r8
   17920:	strdeq	r7, [r1], -r8
   17924:	andeq	r7, r1, r8, lsl #22
   17928:	andeq	r7, r1, ip, lsl #30
   1792c:	andeq	r7, r1, r8, lsl #22
   17930:	andeq	r7, r1, ip, ror #29
   17934:	mov	r3, #1
   17938:	str	r3, [sp, #40]	; 0x28
   1793c:	str	r3, [sp, #68]	; 0x44
   17940:	mov	r8, #0
   17944:	ldr	r3, [pc, #4056]	; 18924 <__assert_fail@plt+0x7384>
   17948:	str	r3, [sp, #72]	; 0x48
   1794c:	mov	r3, #2
   17950:	str	r3, [sp, #176]	; 0xb0
   17954:	ldr	r1, [sp, #56]	; 0x38
   17958:	mov	r2, r3
   1795c:	ldr	ip, [sp, #40]	; 0x28
   17960:	mov	lr, r3
   17964:	b	17630 <__assert_fail@plt+0x6090>
   17968:	mov	r3, #1
   1796c:	str	r3, [sp, #56]	; 0x38
   17970:	str	r3, [sp, #68]	; 0x44
   17974:	str	r3, [sp, #40]	; 0x28
   17978:	ldr	r3, [pc, #4004]	; 18924 <__assert_fail@plt+0x7384>
   1797c:	mov	r8, #0
   17980:	str	r3, [sp, #72]	; 0x48
   17984:	b	1794c <__assert_fail@plt+0x63ac>
   17988:	mov	r3, #1
   1798c:	str	r3, [sp, #56]	; 0x38
   17990:	str	r3, [sp, #68]	; 0x44
   17994:	str	r3, [sp, #40]	; 0x28
   17998:	ldr	r3, [pc, #3976]	; 18928 <__assert_fail@plt+0x7388>
   1799c:	mov	r8, #0
   179a0:	str	r3, [sp, #72]	; 0x48
   179a4:	mov	r3, #5
   179a8:	b	17950 <__assert_fail@plt+0x63b0>
   179ac:	mov	r3, #0
   179b0:	str	r3, [sp, #40]	; 0x28
   179b4:	mov	r3, #1
   179b8:	str	r3, [sp, #56]	; 0x38
   179bc:	mov	r8, #0
   179c0:	mov	r1, r3
   179c4:	ldr	r2, [sp, #176]	; 0xb0
   179c8:	ldr	ip, [sp, #40]	; 0x28
   179cc:	ldr	lr, [sp, #176]	; 0xb0
   179d0:	b	17630 <__assert_fail@plt+0x6090>
   179d4:	ldr	r3, [sp, #176]	; 0xb0
   179d8:	cmp	r3, #10
   179dc:	beq	17a20 <__assert_fail@plt+0x6480>
   179e0:	mov	r2, #5
   179e4:	ldr	r1, [pc, #3904]	; 1892c <__assert_fail@plt+0x738c>
   179e8:	mov	r0, #0
   179ec:	bl	11288 <dcgettext@plt>
   179f0:	ldr	r2, [pc, #3892]	; 1892c <__assert_fail@plt+0x738c>
   179f4:	cmp	r0, r2
   179f8:	str	r0, [sp, #188]	; 0xbc
   179fc:	beq	18ab8 <__assert_fail@plt+0x7518>
   17a00:	mov	r2, #5
   17a04:	ldr	r1, [pc, #3864]	; 18924 <__assert_fail@plt+0x7384>
   17a08:	mov	r0, #0
   17a0c:	bl	11288 <dcgettext@plt>
   17a10:	ldr	r2, [pc, #3852]	; 18924 <__assert_fail@plt+0x7384>
   17a14:	cmp	r0, r2
   17a18:	str	r0, [sp, #192]	; 0xc0
   17a1c:	beq	18aa8 <__assert_fail@plt+0x7508>
   17a20:	ldr	r8, [sp, #40]	; 0x28
   17a24:	cmp	r8, #0
   17a28:	movne	r8, #0
   17a2c:	bne	17a5c <__assert_fail@plt+0x64bc>
   17a30:	ldr	r3, [sp, #188]	; 0xbc
   17a34:	ldrb	r3, [r3]
   17a38:	cmp	r3, #0
   17a3c:	beq	17a5c <__assert_fail@plt+0x64bc>
   17a40:	ldr	r2, [sp, #188]	; 0xbc
   17a44:	cmp	fp, r8
   17a48:	strbhi	r3, [r9, r8]
   17a4c:	ldrb	r3, [r2, #1]!
   17a50:	add	r8, r8, #1
   17a54:	cmp	r3, #0
   17a58:	bne	17a44 <__assert_fail@plt+0x64a4>
   17a5c:	ldr	r0, [sp, #192]	; 0xc0
   17a60:	bl	113f0 <strlen@plt>
   17a64:	ldr	r3, [sp, #192]	; 0xc0
   17a68:	ldr	r2, [sp, #176]	; 0xb0
   17a6c:	str	r3, [sp, #72]	; 0x48
   17a70:	mov	r3, #1
   17a74:	str	r3, [sp, #56]	; 0x38
   17a78:	mov	r1, r3
   17a7c:	ldr	ip, [sp, #40]	; 0x28
   17a80:	ldr	lr, [sp, #176]	; 0xb0
   17a84:	str	r0, [sp, #68]	; 0x44
   17a88:	b	17630 <__assert_fail@plt+0x6090>
   17a8c:	ldr	r3, [sp, #40]	; 0x28
   17a90:	cmp	r3, #0
   17a94:	beq	1873c <__assert_fail@plt+0x719c>
   17a98:	mov	r3, #1
   17a9c:	str	r3, [sp, #68]	; 0x44
   17aa0:	ldr	r3, [pc, #3708]	; 18924 <__assert_fail@plt+0x7384>
   17aa4:	str	r3, [sp, #72]	; 0x48
   17aa8:	mov	r8, #0
   17aac:	ldr	r1, [sp, #56]	; 0x38
   17ab0:	ldr	r2, [sp, #176]	; 0xb0
   17ab4:	ldr	ip, [sp, #40]	; 0x28
   17ab8:	ldr	lr, [sp, #176]	; 0xb0
   17abc:	b	17630 <__assert_fail@plt+0x6090>
   17ac0:	ldr	r3, [sp, #40]	; 0x28
   17ac4:	cmp	r3, #0
   17ac8:	beq	187c0 <__assert_fail@plt+0x7220>
   17acc:	str	r3, [sp, #56]	; 0x38
   17ad0:	mov	r3, #1
   17ad4:	str	r3, [sp, #68]	; 0x44
   17ad8:	ldr	r3, [pc, #3656]	; 18928 <__assert_fail@plt+0x7388>
   17adc:	b	17aa4 <__assert_fail@plt+0x6504>
   17ae0:	ldr	r3, [sp, #40]	; 0x28
   17ae4:	cmp	r3, #0
   17ae8:	mov	r3, #1
   17aec:	streq	r3, [sp, #56]	; 0x38
   17af0:	beq	1873c <__assert_fail@plt+0x719c>
   17af4:	str	r3, [sp, #68]	; 0x44
   17af8:	ldr	r3, [pc, #3620]	; 18924 <__assert_fail@plt+0x7384>
   17afc:	mov	r8, #0
   17b00:	str	r3, [sp, #72]	; 0x48
   17b04:	b	1794c <__assert_fail@plt+0x63ac>
   17b08:	ldr	r3, [sp, #24]
   17b0c:	ldr	r6, [sp, #48]	; 0x30
   17b10:	cmn	r3, #1
   17b14:	beq	18170 <__assert_fail@plt+0x6bd0>
   17b18:	subs	r3, r3, #1
   17b1c:	movne	r3, #1
   17b20:	cmp	r3, #0
   17b24:	beq	17ef0 <__assert_fail@plt+0x6950>
   17b28:	ldr	r1, [sp, #52]	; 0x34
   17b2c:	mov	r7, r3
   17b30:	mov	r3, #0
   17b34:	str	r3, [sp, #32]
   17b38:	ldr	r3, [sp, #60]	; 0x3c
   17b3c:	orr	r2, r1, r3
   17b40:	ldr	r3, [sp, #40]	; 0x28
   17b44:	eor	r2, r2, #1
   17b48:	orr	r2, r3, r2
   17b4c:	tst	r2, #255	; 0xff
   17b50:	bne	18474 <__assert_fail@plt+0x6ed4>
   17b54:	cmp	r6, #0
   17b58:	bne	17d34 <__assert_fail@plt+0x6794>
   17b5c:	ldr	r3, [sp, #36]	; 0x24
   17b60:	add	sl, sl, #1
   17b64:	and	r3, r3, r7
   17b68:	uxtb	r6, r3
   17b6c:	cmp	r6, #0
   17b70:	beq	17b9c <__assert_fail@plt+0x65fc>
   17b74:	cmp	fp, r8
   17b78:	movhi	r3, #39	; 0x27
   17b7c:	strbhi	r3, [r9, r8]
   17b80:	add	r3, r8, #1
   17b84:	cmp	fp, r3
   17b88:	movhi	r2, #39	; 0x27
   17b8c:	add	r8, r8, #2
   17b90:	strbhi	r2, [r9, r3]
   17b94:	mov	r3, #0
   17b98:	str	r3, [sp, #36]	; 0x24
   17b9c:	ldr	r2, [sp, #32]
   17ba0:	cmp	r8, fp
   17ba4:	ldr	r3, [sp, #28]
   17ba8:	strbcc	r4, [r9, r8]
   17bac:	cmp	r2, #0
   17bb0:	moveq	r3, #0
   17bb4:	str	r3, [sp, #28]
   17bb8:	ldr	r3, [sp, #24]
   17bbc:	add	r8, r8, #1
   17bc0:	cmn	r3, #1
   17bc4:	bne	1769c <__assert_fail@plt+0x60fc>
   17bc8:	ldr	r3, [sp, #44]	; 0x2c
   17bcc:	ldrb	r3, [r3, sl]
   17bd0:	adds	r7, r3, #0
   17bd4:	movne	r7, #1
   17bd8:	cmp	r7, #0
   17bdc:	bne	176ac <__assert_fail@plt+0x610c>
   17be0:	ldr	r3, [sp, #64]	; 0x40
   17be4:	cmp	r8, #0
   17be8:	movne	r3, #0
   17bec:	andeq	r3, r3, #1
   17bf0:	cmp	r3, #0
   17bf4:	str	r3, [sp, #64]	; 0x40
   17bf8:	bne	1869c <__assert_fail@plt+0x70fc>
   17bfc:	ldr	r3, [sp, #40]	; 0x28
   17c00:	ldr	r2, [sp, #52]	; 0x34
   17c04:	eor	r3, r3, #1
   17c08:	ands	r2, r2, r3
   17c0c:	beq	18ac8 <__assert_fail@plt+0x7528>
   17c10:	ldr	r3, [sp, #76]	; 0x4c
   17c14:	cmp	r3, #0
   17c18:	beq	18a98 <__assert_fail@plt+0x74f8>
   17c1c:	ldr	r3, [sp, #28]
   17c20:	cmp	r3, #0
   17c24:	bne	18a54 <__assert_fail@plt+0x74b4>
   17c28:	ldr	r2, [sp, #84]	; 0x54
   17c2c:	clz	r3, fp
   17c30:	cmp	r2, #0
   17c34:	lsr	r3, r3, #5
   17c38:	moveq	r3, #0
   17c3c:	cmp	r3, #0
   17c40:	beq	189f4 <__assert_fail@plt+0x7454>
   17c44:	mov	fp, r2
   17c48:	str	r3, [sp, #76]	; 0x4c
   17c4c:	b	175d8 <__assert_fail@plt+0x6038>
   17c50:	ldr	r3, [sp, #176]	; 0xb0
   17c54:	ldr	r6, [sp, #48]	; 0x30
   17c58:	cmp	r3, #2
   17c5c:	beq	18194 <__assert_fail@plt+0x6bf4>
   17c60:	ldr	r3, [sp, #88]	; 0x58
   17c64:	cmp	r3, #0
   17c68:	beq	18718 <__assert_fail@plt+0x7178>
   17c6c:	mov	r3, #0
   17c70:	add	sl, sl, #1
   17c74:	ldr	r6, [sp, #36]	; 0x24
   17c78:	str	r3, [sp, #32]
   17c7c:	mov	r4, #92	; 0x5c
   17c80:	b	17b6c <__assert_fail@plt+0x65cc>
   17c84:	ldr	r3, [sp, #176]	; 0xb0
   17c88:	ldr	r6, [sp, #48]	; 0x30
   17c8c:	cmp	r3, #2
   17c90:	beq	181c4 <__assert_fail@plt+0x6c24>
   17c94:	cmp	r3, #5
   17c98:	bne	18728 <__assert_fail@plt+0x7188>
   17c9c:	ldr	r3, [sp, #100]	; 0x64
   17ca0:	cmp	r3, #0
   17ca4:	beq	1878c <__assert_fail@plt+0x71ec>
   17ca8:	ldr	r2, [sp, #24]
   17cac:	add	r3, sl, #2
   17cb0:	cmp	r2, r3
   17cb4:	bls	17cc4 <__assert_fail@plt+0x6724>
   17cb8:	ldrb	r4, [r5, #1]
   17cbc:	cmp	r4, #63	; 0x3f
   17cc0:	beq	18934 <__assert_fail@plt+0x7394>
   17cc4:	mov	r1, #0
   17cc8:	str	r1, [sp, #32]
   17ccc:	mov	r4, #63	; 0x3f
   17cd0:	b	17b38 <__assert_fail@plt+0x6598>
   17cd4:	ldr	r3, [sp, #176]	; 0xb0
   17cd8:	ldr	r6, [sp, #48]	; 0x30
   17cdc:	cmp	r3, #2
   17ce0:	beq	181f0 <__assert_fail@plt+0x6c50>
   17ce4:	str	r7, [sp, #32]
   17ce8:	str	r7, [sp, #76]	; 0x4c
   17cec:	mov	r1, #0
   17cf0:	mov	r4, #39	; 0x27
   17cf4:	b	17b38 <__assert_fail@plt+0x6598>
   17cf8:	ldr	r6, [sp, #48]	; 0x30
   17cfc:	ldr	r1, [sp, #52]	; 0x34
   17d00:	str	r7, [sp, #32]
   17d04:	b	17b38 <__assert_fail@plt+0x6598>
   17d08:	ldr	r6, [sp, #48]	; 0x30
   17d0c:	ldr	r1, [sp, #52]	; 0x34
   17d10:	mov	r4, #12
   17d14:	mov	r3, #102	; 0x66
   17d18:	ldr	r2, [sp, #56]	; 0x38
   17d1c:	cmp	r2, #0
   17d20:	streq	r2, [sp, #32]
   17d24:	beq	17b38 <__assert_fail@plt+0x6598>
   17d28:	mov	r4, r3
   17d2c:	mov	r3, #0
   17d30:	str	r3, [sp, #32]
   17d34:	ldr	r3, [sp, #40]	; 0x28
   17d38:	cmp	r3, #0
   17d3c:	bne	184ac <__assert_fail@plt+0x6f0c>
   17d40:	ldr	r3, [sp, #36]	; 0x24
   17d44:	eor	r3, r3, #1
   17d48:	and	r3, r3, r1
   17d4c:	ands	r3, r3, #255	; 0xff
   17d50:	beq	17d88 <__assert_fail@plt+0x67e8>
   17d54:	cmp	fp, r8
   17d58:	movhi	r2, #39	; 0x27
   17d5c:	strbhi	r2, [r9, r8]
   17d60:	add	r2, r8, #1
   17d64:	cmp	fp, r2
   17d68:	movhi	r1, #36	; 0x24
   17d6c:	strbhi	r1, [r9, r2]
   17d70:	add	r2, r8, #2
   17d74:	cmp	fp, r2
   17d78:	add	r8, r8, #3
   17d7c:	movhi	r1, #39	; 0x27
   17d80:	strbhi	r1, [r9, r2]
   17d84:	str	r3, [sp, #36]	; 0x24
   17d88:	cmp	fp, r8
   17d8c:	movhi	r3, #92	; 0x5c
   17d90:	strbhi	r3, [r9, r8]
   17d94:	add	sl, sl, #1
   17d98:	add	r8, r8, #1
   17d9c:	b	17b9c <__assert_fail@plt+0x65fc>
   17da0:	ldr	r6, [sp, #48]	; 0x30
   17da4:	mov	r4, #10
   17da8:	mov	r3, #110	; 0x6e
   17dac:	ldr	r2, [sp, #64]	; 0x40
   17db0:	cmp	r2, #0
   17db4:	bne	18834 <__assert_fail@plt+0x7294>
   17db8:	ldr	r1, [sp, #52]	; 0x34
   17dbc:	b	17d18 <__assert_fail@plt+0x6778>
   17dc0:	ldr	r6, [sp, #48]	; 0x30
   17dc4:	ldr	r1, [sp, #52]	; 0x34
   17dc8:	mov	r3, #116	; 0x74
   17dcc:	b	17d18 <__assert_fail@plt+0x6778>
   17dd0:	ldr	r6, [sp, #48]	; 0x30
   17dd4:	ldr	r1, [sp, #52]	; 0x34
   17dd8:	mov	r4, #11
   17ddc:	mov	r3, #118	; 0x76
   17de0:	b	17d18 <__assert_fail@plt+0x6778>
   17de4:	ldr	r6, [sp, #48]	; 0x30
   17de8:	ldr	r1, [sp, #52]	; 0x34
   17dec:	mov	r4, #8
   17df0:	mov	r3, #98	; 0x62
   17df4:	b	17d18 <__assert_fail@plt+0x6778>
   17df8:	ldr	r6, [sp, #48]	; 0x30
   17dfc:	ldr	r1, [sp, #52]	; 0x34
   17e00:	mov	r4, #7
   17e04:	mov	r3, #97	; 0x61
   17e08:	b	17d18 <__assert_fail@plt+0x6778>
   17e0c:	ldr	r3, [sp, #56]	; 0x38
   17e10:	ldr	r6, [sp, #48]	; 0x30
   17e14:	cmp	r3, #0
   17e18:	beq	182dc <__assert_fail@plt+0x6d3c>
   17e1c:	ldr	r3, [sp, #40]	; 0x28
   17e20:	cmp	r3, #0
   17e24:	bne	18910 <__assert_fail@plt+0x7370>
   17e28:	ldr	r3, [sp, #36]	; 0x24
   17e2c:	ldr	r2, [sp, #52]	; 0x34
   17e30:	eor	r3, r3, #1
   17e34:	ands	r3, r2, r3
   17e38:	moveq	r2, r8
   17e3c:	beq	17e74 <__assert_fail@plt+0x68d4>
   17e40:	cmp	fp, r8
   17e44:	movhi	r2, #39	; 0x27
   17e48:	strbhi	r2, [r9, r8]
   17e4c:	add	r2, r8, #1
   17e50:	cmp	fp, r2
   17e54:	movhi	r1, #36	; 0x24
   17e58:	strbhi	r1, [r9, r2]
   17e5c:	add	r2, r8, #2
   17e60:	cmp	fp, r2
   17e64:	movhi	r1, #39	; 0x27
   17e68:	strbhi	r1, [r9, r2]
   17e6c:	add	r2, r8, #3
   17e70:	str	r3, [sp, #36]	; 0x24
   17e74:	cmp	fp, r2
   17e78:	movhi	r3, #92	; 0x5c
   17e7c:	strbhi	r3, [r9, r2]
   17e80:	ldr	r3, [sp, #92]	; 0x5c
   17e84:	add	r8, r2, #1
   17e88:	cmp	r3, #0
   17e8c:	beq	18810 <__assert_fail@plt+0x7270>
   17e90:	ldr	r1, [sp, #24]
   17e94:	add	r3, sl, #1
   17e98:	cmp	r1, r3
   17e9c:	bls	17ed4 <__assert_fail@plt+0x6934>
   17ea0:	ldr	r1, [sp, #44]	; 0x2c
   17ea4:	ldrb	r3, [r1, r3]
   17ea8:	sub	r3, r3, #48	; 0x30
   17eac:	cmp	r3, #9
   17eb0:	bhi	17ed4 <__assert_fail@plt+0x6934>
   17eb4:	cmp	fp, r8
   17eb8:	movhi	r3, #48	; 0x30
   17ebc:	strbhi	r3, [r9, r8]
   17ec0:	add	r3, r2, #2
   17ec4:	cmp	fp, r3
   17ec8:	add	r8, r2, #3
   17ecc:	movhi	r1, #48	; 0x30
   17ed0:	strbhi	r1, [r9, r3]
   17ed4:	ldr	r3, [sp, #40]	; 0x28
   17ed8:	ldr	r1, [sp, #52]	; 0x34
   17edc:	mov	r7, r3
   17ee0:	str	r3, [sp, #32]
   17ee4:	mov	r4, #48	; 0x30
   17ee8:	b	17b38 <__assert_fail@plt+0x6598>
   17eec:	ldr	r6, [sp, #48]	; 0x30
   17ef0:	cmp	sl, #0
   17ef4:	streq	r7, [sp, #32]
   17ef8:	beq	17f18 <__assert_fail@plt+0x6978>
   17efc:	mov	r3, #0
   17f00:	ldr	r1, [sp, #52]	; 0x34
   17f04:	str	r3, [sp, #32]
   17f08:	b	17b38 <__assert_fail@plt+0x6598>
   17f0c:	ldr	r6, [sp, #48]	; 0x30
   17f10:	mov	r3, #0
   17f14:	str	r3, [sp, #32]
   17f18:	ldr	r3, [sp, #64]	; 0x40
   17f1c:	cmp	r3, #0
   17f20:	bne	1869c <__assert_fail@plt+0x70fc>
   17f24:	ldr	r1, [sp, #52]	; 0x34
   17f28:	b	17b38 <__assert_fail@plt+0x6598>
   17f2c:	ldr	r3, [sp, #48]	; 0x30
   17f30:	mov	r6, r3
   17f34:	str	r3, [sp, #32]
   17f38:	b	17f18 <__assert_fail@plt+0x6978>
   17f3c:	ldr	r6, [sp, #48]	; 0x30
   17f40:	mov	r4, #13
   17f44:	mov	r3, #114	; 0x72
   17f48:	b	17dac <__assert_fail@plt+0x680c>
   17f4c:	ldr	r3, [sp, #44]	; 0x2c
   17f50:	add	r5, r3, sl
   17f54:	ldrb	r4, [r5]
   17f58:	cmp	r4, #126	; 0x7e
   17f5c:	ldrls	pc, [pc, r4, lsl #2]
   17f60:	b	182fc <__assert_fail@plt+0x6d5c>
   17f64:	andeq	r8, r1, ip, asr #5
   17f68:	strdeq	r8, [r1], -ip
   17f6c:	strdeq	r8, [r1], -ip
   17f70:	strdeq	r8, [r1], -ip
   17f74:	strdeq	r8, [r1], -ip
   17f78:	strdeq	r8, [r1], -ip
   17f7c:	strdeq	r8, [r1], -ip
   17f80:	andeq	r8, r1, r4, asr #5
   17f84:			; <UNDEFINED> instruction: 0x000182bc
   17f88:			; <UNDEFINED> instruction: 0x000182b0
   17f8c:	andeq	r8, r1, r8, lsr #5
   17f90:	andeq	r8, r1, r0, lsr #5
   17f94:	muleq	r1, r8, r2
   17f98:	muleq	r1, r0, r2
   17f9c:	strdeq	r8, [r1], -ip
   17fa0:	strdeq	r8, [r1], -ip
   17fa4:	strdeq	r8, [r1], -ip
   17fa8:	strdeq	r8, [r1], -ip
   17fac:	strdeq	r8, [r1], -ip
   17fb0:	strdeq	r8, [r1], -ip
   17fb4:	strdeq	r8, [r1], -ip
   17fb8:	strdeq	r8, [r1], -ip
   17fbc:	strdeq	r8, [r1], -ip
   17fc0:	strdeq	r8, [r1], -ip
   17fc4:	strdeq	r8, [r1], -ip
   17fc8:	strdeq	r8, [r1], -ip
   17fcc:	strdeq	r8, [r1], -ip
   17fd0:	strdeq	r8, [r1], -ip
   17fd4:	strdeq	r8, [r1], -ip
   17fd8:	strdeq	r8, [r1], -ip
   17fdc:	strdeq	r8, [r1], -ip
   17fe0:	strdeq	r8, [r1], -ip
   17fe4:	andeq	r8, r1, r4, lsl #5
   17fe8:	andeq	r8, r1, ip, ror r2
   17fec:	andeq	r8, r1, ip, ror r2
   17ff0:	andeq	r8, r1, r4, ror r2
   17ff4:	andeq	r8, r1, ip, ror r2
   17ff8:	andeq	r8, r1, ip, ror #4
   17ffc:	andeq	r8, r1, ip, ror r2
   18000:	andeq	r8, r1, r0, ror #3
   18004:	andeq	r8, r1, ip, ror r2
   18008:	andeq	r8, r1, ip, ror r2
   1800c:	andeq	r8, r1, ip, ror r2
   18010:	andeq	r8, r1, ip, ror #4
   18014:	andeq	r8, r1, ip, ror #4
   18018:	andeq	r8, r1, ip, ror #4
   1801c:	andeq	r8, r1, ip, ror #4
   18020:	andeq	r8, r1, ip, ror #4
   18024:	andeq	r8, r1, ip, ror #4
   18028:	andeq	r8, r1, ip, ror #4
   1802c:	andeq	r8, r1, ip, ror #4
   18030:	andeq	r8, r1, ip, ror #4
   18034:	andeq	r8, r1, ip, ror #4
   18038:	andeq	r8, r1, ip, ror #4
   1803c:	andeq	r8, r1, ip, ror #4
   18040:	andeq	r8, r1, ip, ror #4
   18044:	andeq	r8, r1, ip, ror #4
   18048:	andeq	r8, r1, ip, ror #4
   1804c:	andeq	r8, r1, ip, ror #4
   18050:	andeq	r8, r1, ip, ror r2
   18054:	andeq	r8, r1, ip, ror r2
   18058:	andeq	r8, r1, ip, ror r2
   1805c:	andeq	r8, r1, ip, ror r2
   18060:			; <UNDEFINED> instruction: 0x000181b4
   18064:	strdeq	r8, [r1], -ip
   18068:	andeq	r8, r1, ip, ror #4
   1806c:	andeq	r8, r1, ip, ror #4
   18070:	andeq	r8, r1, ip, ror #4
   18074:	andeq	r8, r1, ip, ror #4
   18078:	andeq	r8, r1, ip, ror #4
   1807c:	andeq	r8, r1, ip, ror #4
   18080:	andeq	r8, r1, ip, ror #4
   18084:	andeq	r8, r1, ip, ror #4
   18088:	andeq	r8, r1, ip, ror #4
   1808c:	andeq	r8, r1, ip, ror #4
   18090:	andeq	r8, r1, ip, ror #4
   18094:	andeq	r8, r1, ip, ror #4
   18098:	andeq	r8, r1, ip, ror #4
   1809c:	andeq	r8, r1, ip, ror #4
   180a0:	andeq	r8, r1, ip, ror #4
   180a4:	andeq	r8, r1, ip, ror #4
   180a8:	andeq	r8, r1, ip, ror #4
   180ac:	andeq	r8, r1, ip, ror #4
   180b0:	andeq	r8, r1, ip, ror #4
   180b4:	andeq	r8, r1, ip, ror #4
   180b8:	andeq	r8, r1, ip, ror #4
   180bc:	andeq	r8, r1, ip, ror #4
   180c0:	andeq	r8, r1, ip, ror #4
   180c4:	andeq	r8, r1, ip, ror #4
   180c8:	andeq	r8, r1, ip, ror #4
   180cc:	andeq	r8, r1, ip, ror #4
   180d0:	andeq	r8, r1, ip, ror r2
   180d4:	andeq	r8, r1, r4, lsl #3
   180d8:	andeq	r8, r1, ip, ror #4
   180dc:	andeq	r8, r1, ip, ror r2
   180e0:	andeq	r8, r1, ip, ror #4
   180e4:	andeq	r8, r1, ip, ror r2
   180e8:	andeq	r8, r1, ip, ror #4
   180ec:	andeq	r8, r1, ip, ror #4
   180f0:	andeq	r8, r1, ip, ror #4
   180f4:	andeq	r8, r1, ip, ror #4
   180f8:	andeq	r8, r1, ip, ror #4
   180fc:	andeq	r8, r1, ip, ror #4
   18100:	andeq	r8, r1, ip, ror #4
   18104:	andeq	r8, r1, ip, ror #4
   18108:	andeq	r8, r1, ip, ror #4
   1810c:	andeq	r8, r1, ip, ror #4
   18110:	andeq	r8, r1, ip, ror #4
   18114:	andeq	r8, r1, ip, ror #4
   18118:	andeq	r8, r1, ip, ror #4
   1811c:	andeq	r8, r1, ip, ror #4
   18120:	andeq	r8, r1, ip, ror #4
   18124:	andeq	r8, r1, ip, ror #4
   18128:	andeq	r8, r1, ip, ror #4
   1812c:	andeq	r8, r1, ip, ror #4
   18130:	andeq	r8, r1, ip, ror #4
   18134:	andeq	r8, r1, ip, ror #4
   18138:	andeq	r8, r1, ip, ror #4
   1813c:	andeq	r8, r1, ip, ror #4
   18140:	andeq	r8, r1, ip, ror #4
   18144:	andeq	r8, r1, ip, ror #4
   18148:	andeq	r8, r1, ip, ror #4
   1814c:	andeq	r8, r1, ip, ror #4
   18150:	andeq	r8, r1, r0, ror #2
   18154:	andeq	r8, r1, ip, ror r2
   18158:	andeq	r8, r1, r0, ror #2
   1815c:	andeq	r8, r1, r4, ror r2
   18160:	ldr	r3, [sp, #24]
   18164:	mov	r6, #0
   18168:	cmn	r3, #1
   1816c:	bne	17b18 <__assert_fail@plt+0x6578>
   18170:	ldr	r3, [sp, #44]	; 0x2c
   18174:	ldrb	r3, [r3, #1]
   18178:	adds	r3, r3, #0
   1817c:	movne	r3, #1
   18180:	b	17b20 <__assert_fail@plt+0x6580>
   18184:	ldr	r3, [sp, #176]	; 0xb0
   18188:	mov	r6, #0
   1818c:	cmp	r3, #2
   18190:	bne	17c60 <__assert_fail@plt+0x66c0>
   18194:	ldr	r3, [sp, #64]	; 0x40
   18198:	cmp	r3, #0
   1819c:	bne	189d4 <__assert_fail@plt+0x7434>
   181a0:	add	sl, sl, #1
   181a4:	ldr	r6, [sp, #36]	; 0x24
   181a8:	str	r3, [sp, #32]
   181ac:	mov	r4, #92	; 0x5c
   181b0:	b	17b6c <__assert_fail@plt+0x65cc>
   181b4:	ldr	r3, [sp, #176]	; 0xb0
   181b8:	mov	r6, #0
   181bc:	cmp	r3, #2
   181c0:	bne	17c94 <__assert_fail@plt+0x66f4>
   181c4:	ldr	r3, [sp, #40]	; 0x28
   181c8:	cmp	r3, #0
   181cc:	bne	184b0 <__assert_fail@plt+0x6f10>
   181d0:	mov	r1, r7
   181d4:	str	r3, [sp, #32]
   181d8:	mov	r4, #63	; 0x3f
   181dc:	b	17b38 <__assert_fail@plt+0x6598>
   181e0:	ldr	r3, [sp, #176]	; 0xb0
   181e4:	mov	r6, #0
   181e8:	cmp	r3, #2
   181ec:	bne	17ce4 <__assert_fail@plt+0x6744>
   181f0:	ldr	r3, [sp, #64]	; 0x40
   181f4:	cmp	r3, #0
   181f8:	bne	189d4 <__assert_fail@plt+0x7434>
   181fc:	ldr	r2, [sp, #84]	; 0x54
   18200:	adds	r3, fp, #0
   18204:	movne	r3, #1
   18208:	cmp	r2, #0
   1820c:	movne	r3, #0
   18210:	cmp	r3, #0
   18214:	strne	fp, [sp, #84]	; 0x54
   18218:	movne	fp, #0
   1821c:	bne	1824c <__assert_fail@plt+0x6cac>
   18220:	cmp	fp, r8
   18224:	movhi	r3, #39	; 0x27
   18228:	strbhi	r3, [r9, r8]
   1822c:	add	r3, r8, #1
   18230:	cmp	fp, r3
   18234:	movhi	r2, #92	; 0x5c
   18238:	strbhi	r2, [r9, r3]
   1823c:	add	r3, r8, #2
   18240:	cmp	fp, r3
   18244:	movhi	r2, #39	; 0x27
   18248:	strbhi	r2, [r9, r3]
   1824c:	ldr	r3, [sp, #64]	; 0x40
   18250:	add	r8, r8, #3
   18254:	mov	r1, r7
   18258:	str	r7, [sp, #32]
   1825c:	str	r7, [sp, #76]	; 0x4c
   18260:	str	r3, [sp, #36]	; 0x24
   18264:	mov	r4, #39	; 0x27
   18268:	b	17b38 <__assert_fail@plt+0x6598>
   1826c:	mov	r6, #0
   18270:	b	17cfc <__assert_fail@plt+0x675c>
   18274:	mov	r6, #0
   18278:	b	17ef0 <__assert_fail@plt+0x6950>
   1827c:	mov	r6, #0
   18280:	b	17f10 <__assert_fail@plt+0x6970>
   18284:	str	r7, [sp, #32]
   18288:	mov	r6, #0
   1828c:	b	17f18 <__assert_fail@plt+0x6978>
   18290:	mov	r6, #0
   18294:	b	17f40 <__assert_fail@plt+0x69a0>
   18298:	mov	r6, #0
   1829c:	b	17d0c <__assert_fail@plt+0x676c>
   182a0:	mov	r6, #0
   182a4:	b	17dd4 <__assert_fail@plt+0x6834>
   182a8:	mov	r6, #0
   182ac:	b	17da4 <__assert_fail@plt+0x6804>
   182b0:	mov	r6, #0
   182b4:	mov	r3, #116	; 0x74
   182b8:	b	17dac <__assert_fail@plt+0x680c>
   182bc:	mov	r6, #0
   182c0:	b	17de8 <__assert_fail@plt+0x6848>
   182c4:	mov	r6, #0
   182c8:	b	17dfc <__assert_fail@plt+0x685c>
   182cc:	ldr	r3, [sp, #56]	; 0x38
   182d0:	mov	r6, #0
   182d4:	cmp	r3, #0
   182d8:	bne	17e1c <__assert_fail@plt+0x687c>
   182dc:	ldr	r3, [sp, #96]	; 0x60
   182e0:	cmp	r3, #0
   182e4:	addne	sl, sl, #1
   182e8:	bne	17690 <__assert_fail@plt+0x60f0>
   182ec:	ldr	r1, [sp, #52]	; 0x34
   182f0:	str	r3, [sp, #32]
   182f4:	mov	r4, r3
   182f8:	b	17b38 <__assert_fail@plt+0x6598>
   182fc:	mov	r6, #0
   18300:	ldr	r3, [sp, #80]	; 0x50
   18304:	cmp	r3, #1
   18308:	bne	184f8 <__assert_fail@plt+0x6f58>
   1830c:	bl	113c0 <__ctype_b_loc@plt>
   18310:	ldr	r2, [sp, #80]	; 0x50
   18314:	sxth	r3, r4
   18318:	mov	r1, r2
   1831c:	lsl	r3, r3, #1
   18320:	ldr	r2, [r0]
   18324:	ldrh	r3, [r2, r3]
   18328:	and	r3, r3, #16384	; 0x4000
   1832c:	cmp	r3, #0
   18330:	movne	r3, #1
   18334:	moveq	r3, #0
   18338:	str	r3, [sp, #32]
   1833c:	moveq	r3, #1
   18340:	movne	r3, #0
   18344:	ldr	r2, [sp, #56]	; 0x38
   18348:	and	r3, r3, r2
   1834c:	ands	r3, r3, #255	; 0xff
   18350:	beq	17f24 <__assert_fail@plt+0x6984>
   18354:	add	r1, sl, r1
   18358:	mov	r0, #0
   1835c:	ldr	r7, [sp, #40]	; 0x28
   18360:	ldr	r2, [sp, #36]	; 0x24
   18364:	ldr	lr, [sp, #52]	; 0x34
   18368:	b	18418 <__assert_fail@plt+0x6e78>
   1836c:	cmp	r7, #0
   18370:	bne	1876c <__assert_fail@plt+0x71cc>
   18374:	eor	r0, r2, #1
   18378:	ands	r0, lr, r0
   1837c:	beq	183b4 <__assert_fail@plt+0x6e14>
   18380:	cmp	fp, r8
   18384:	movhi	r2, #39	; 0x27
   18388:	strbhi	r2, [r9, r8]
   1838c:	add	r2, r8, #1
   18390:	cmp	fp, r2
   18394:	movhi	ip, #36	; 0x24
   18398:	strbhi	ip, [r9, r2]
   1839c:	add	r2, r8, #2
   183a0:	cmp	fp, r2
   183a4:	movhi	ip, #39	; 0x27
   183a8:	strbhi	ip, [r9, r2]
   183ac:	add	r8, r8, #3
   183b0:	mov	r2, r0
   183b4:	cmp	fp, r8
   183b8:	movhi	r0, #92	; 0x5c
   183bc:	strbhi	r0, [r9, r8]
   183c0:	add	r0, r8, #1
   183c4:	cmp	fp, r0
   183c8:	lsrhi	ip, r4, #6
   183cc:	addhi	ip, ip, #48	; 0x30
   183d0:	strbhi	ip, [r9, r0]
   183d4:	add	ip, r8, #2
   183d8:	cmp	fp, ip
   183dc:	lsrhi	r0, r4, #3
   183e0:	andhi	r0, r0, #7
   183e4:	addhi	r0, r0, #48	; 0x30
   183e8:	add	sl, sl, #1
   183ec:	strbhi	r0, [r9, ip]
   183f0:	and	r4, r4, #7
   183f4:	cmp	sl, r1
   183f8:	add	r4, r4, #48	; 0x30
   183fc:	add	r8, r8, #3
   18400:	bcs	18784 <__assert_fail@plt+0x71e4>
   18404:	mov	r0, r3
   18408:	cmp	fp, r8
   1840c:	strbhi	r4, [r9, r8]
   18410:	ldrb	r4, [r5, #1]!
   18414:	add	r8, r8, #1
   18418:	cmp	r3, #0
   1841c:	bne	1836c <__assert_fail@plt+0x6dcc>
   18420:	cmp	r6, #0
   18424:	bne	184c8 <__assert_fail@plt+0x6f28>
   18428:	eor	r6, r0, #1
   1842c:	and	r6, r6, r2
   18430:	add	sl, sl, #1
   18434:	cmp	r1, sl
   18438:	uxtb	r6, r6
   1843c:	bls	184f0 <__assert_fail@plt+0x6f50>
   18440:	cmp	r6, #0
   18444:	beq	18408 <__assert_fail@plt+0x6e68>
   18448:	cmp	fp, r8
   1844c:	movhi	r2, #39	; 0x27
   18450:	strbhi	r2, [r9, r8]
   18454:	add	r2, r8, #1
   18458:	cmp	fp, r2
   1845c:	movhi	ip, #39	; 0x27
   18460:	strbhi	ip, [r9, r2]
   18464:	add	r8, r8, #2
   18468:	mov	r6, r3
   1846c:	mov	r2, r3
   18470:	b	18408 <__assert_fail@plt+0x6e68>
   18474:	ldr	r3, [sp, #184]	; 0xb8
   18478:	cmp	r3, #0
   1847c:	beq	17b54 <__assert_fail@plt+0x65b4>
   18480:	lsr	r2, r4, #5
   18484:	mov	r0, r3
   18488:	uxtb	r2, r2
   1848c:	and	r3, r4, #31
   18490:	ldr	r2, [r0, r2, lsl #2]
   18494:	lsr	r3, r2, r3
   18498:	tst	r3, #1
   1849c:	beq	17b54 <__assert_fail@plt+0x65b4>
   184a0:	ldr	r3, [sp, #40]	; 0x28
   184a4:	cmp	r3, #0
   184a8:	beq	17d40 <__assert_fail@plt+0x67a0>
   184ac:	mov	r3, r1
   184b0:	str	r3, [sp, #64]	; 0x40
   184b4:	mov	sl, r9
   184b8:	ldr	r3, [sp, #56]	; 0x38
   184bc:	mov	r9, fp
   184c0:	ldr	r2, [sp, #64]	; 0x40
   184c4:	b	186b4 <__assert_fail@plt+0x7114>
   184c8:	cmp	fp, r8
   184cc:	eor	r6, r0, #1
   184d0:	movhi	ip, #92	; 0x5c
   184d4:	and	r6, r6, r2
   184d8:	add	sl, sl, #1
   184dc:	strbhi	ip, [r9, r8]
   184e0:	cmp	r1, sl
   184e4:	add	r8, r8, #1
   184e8:	uxtb	r6, r6
   184ec:	bhi	18440 <__assert_fail@plt+0x6ea0>
   184f0:	str	r2, [sp, #36]	; 0x24
   184f4:	b	17b6c <__assert_fail@plt+0x65cc>
   184f8:	ldr	r3, [sp, #24]
   184fc:	cmn	r3, #1
   18500:	mov	r3, #0
   18504:	str	r3, [sp, #128]	; 0x80
   18508:	str	r3, [sp, #132]	; 0x84
   1850c:	beq	18800 <__assert_fail@plt+0x7260>
   18510:	mov	r2, r7
   18514:	mov	r3, #0
   18518:	str	r7, [sp, #104]	; 0x68
   1851c:	str	r5, [sp, #116]	; 0x74
   18520:	mov	r7, r3
   18524:	mov	r5, r2
   18528:	str	r4, [sp, #32]
   1852c:	str	r6, [sp, #108]	; 0x6c
   18530:	str	r8, [sp, #112]	; 0x70
   18534:	ldr	r3, [sp, #44]	; 0x2c
   18538:	add	r6, sl, r7
   1853c:	add	r4, r3, r6
   18540:	ldr	r3, [sp, #24]
   18544:	mov	r1, r4
   18548:	sub	r2, r3, r6
   1854c:	add	r0, sp, #124	; 0x7c
   18550:	add	r3, sp, #128	; 0x80
   18554:	bl	1cea8 <__assert_fail@plt+0xb908>
   18558:	subs	r8, r0, #0
   1855c:	beq	188e4 <__assert_fail@plt+0x7344>
   18560:	cmn	r8, #1
   18564:	beq	188bc <__assert_fail@plt+0x731c>
   18568:	cmn	r8, #2
   1856c:	beq	18854 <__assert_fail@plt+0x72b4>
   18570:	ldr	r3, [sp, #64]	; 0x40
   18574:	cmp	r3, #0
   18578:	beq	18638 <__assert_fail@plt+0x7098>
   1857c:	cmp	r8, #1
   18580:	beq	18638 <__assert_fail@plt+0x7098>
   18584:	sub	r3, r8, #1
   18588:	add	r6, r3, r6
   1858c:	ldr	r3, [sp, #44]	; 0x2c
   18590:	add	r6, r3, r6
   18594:	ldrb	r3, [r4, #1]!
   18598:	sub	r3, r3, #91	; 0x5b
   1859c:	cmp	r3, #33	; 0x21
   185a0:	ldrls	pc, [pc, r3, lsl #2]
   185a4:	b	18630 <__assert_fail@plt+0x7090>
   185a8:	muleq	r1, ip, r6
   185ac:	muleq	r1, ip, r6
   185b0:	andeq	r8, r1, r0, lsr r6
   185b4:	muleq	r1, ip, r6
   185b8:	andeq	r8, r1, r0, lsr r6
   185bc:	muleq	r1, ip, r6
   185c0:	andeq	r8, r1, r0, lsr r6
   185c4:	andeq	r8, r1, r0, lsr r6
   185c8:	andeq	r8, r1, r0, lsr r6
   185cc:	andeq	r8, r1, r0, lsr r6
   185d0:	andeq	r8, r1, r0, lsr r6
   185d4:	andeq	r8, r1, r0, lsr r6
   185d8:	andeq	r8, r1, r0, lsr r6
   185dc:	andeq	r8, r1, r0, lsr r6
   185e0:	andeq	r8, r1, r0, lsr r6
   185e4:	andeq	r8, r1, r0, lsr r6
   185e8:	andeq	r8, r1, r0, lsr r6
   185ec:	andeq	r8, r1, r0, lsr r6
   185f0:	andeq	r8, r1, r0, lsr r6
   185f4:	andeq	r8, r1, r0, lsr r6
   185f8:	andeq	r8, r1, r0, lsr r6
   185fc:	andeq	r8, r1, r0, lsr r6
   18600:	andeq	r8, r1, r0, lsr r6
   18604:	andeq	r8, r1, r0, lsr r6
   18608:	andeq	r8, r1, r0, lsr r6
   1860c:	andeq	r8, r1, r0, lsr r6
   18610:	andeq	r8, r1, r0, lsr r6
   18614:	andeq	r8, r1, r0, lsr r6
   18618:	andeq	r8, r1, r0, lsr r6
   1861c:	andeq	r8, r1, r0, lsr r6
   18620:	andeq	r8, r1, r0, lsr r6
   18624:	andeq	r8, r1, r0, lsr r6
   18628:	andeq	r8, r1, r0, lsr r6
   1862c:	muleq	r1, ip, r6
   18630:	cmp	r6, r4
   18634:	bne	18594 <__assert_fail@plt+0x6ff4>
   18638:	ldr	r0, [sp, #124]	; 0x7c
   1863c:	bl	112dc <iswprint@plt>
   18640:	add	r7, r7, r8
   18644:	cmp	r0, #0
   18648:	add	r0, sp, #128	; 0x80
   1864c:	moveq	r5, #0
   18650:	bl	11264 <mbsinit@plt>
   18654:	cmp	r0, #0
   18658:	beq	18534 <__assert_fail@plt+0x6f94>
   1865c:	ldr	r4, [sp, #32]
   18660:	str	r5, [sp, #32]
   18664:	ldr	r3, [sp, #32]
   18668:	mov	r1, r7
   1866c:	eor	r3, r3, #1
   18670:	ldr	r7, [sp, #104]	; 0x68
   18674:	ldr	r6, [sp, #108]	; 0x6c
   18678:	ldr	r8, [sp, #112]	; 0x70
   1867c:	ldr	r5, [sp, #116]	; 0x74
   18680:	uxtb	r3, r3
   18684:	cmp	r1, #1
   18688:	bls	18344 <__assert_fail@plt+0x6da4>
   1868c:	ldr	r2, [sp, #56]	; 0x38
   18690:	and	r3, r3, r2
   18694:	uxtb	r3, r3
   18698:	b	18354 <__assert_fail@plt+0x6db4>
   1869c:	mov	r3, #2
   186a0:	str	r3, [sp, #176]	; 0xb0
   186a4:	ldr	r2, [sp, #64]	; 0x40
   186a8:	ldr	r3, [sp, #56]	; 0x38
   186ac:	mov	sl, r9
   186b0:	mov	r9, fp
   186b4:	and	r3, r3, r2
   186b8:	tst	r3, #255	; 0xff
   186bc:	ldr	r3, [sp, #176]	; 0xb0
   186c0:	movne	r3, #4
   186c4:	str	r3, [sp, #176]	; 0xb0
   186c8:	ldr	r3, [sp, #180]	; 0xb4
   186cc:	mov	ip, #0
   186d0:	bic	r3, r3, #2
   186d4:	str	r3, [sp, #4]
   186d8:	ldr	r3, [sp, #192]	; 0xc0
   186dc:	ldr	r2, [sp, #44]	; 0x2c
   186e0:	str	r3, [sp, #16]
   186e4:	ldr	r3, [sp, #188]	; 0xbc
   186e8:	mov	r1, r9
   186ec:	str	r3, [sp, #12]
   186f0:	ldr	r3, [sp, #176]	; 0xb0
   186f4:	mov	r0, sl
   186f8:	str	r3, [sp]
   186fc:	str	ip, [sp, #8]
   18700:	ldr	r3, [sp, #24]
   18704:	bl	17564 <__assert_fail@plt+0x5fc4>
   18708:	mov	fp, r0
   1870c:	mov	r0, fp
   18710:	add	sp, sp, #140	; 0x8c
   18714:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18718:	mov	r4, #92	; 0x5c
   1871c:	mov	r1, #0
   18720:	mov	r3, r4
   18724:	b	17d18 <__assert_fail@plt+0x6778>
   18728:	mov	r3, #0
   1872c:	ldr	r1, [sp, #52]	; 0x34
   18730:	str	r3, [sp, #32]
   18734:	mov	r4, #63	; 0x3f
   18738:	b	17b38 <__assert_fail@plt+0x6598>
   1873c:	cmp	fp, #0
   18740:	beq	1879c <__assert_fail@plt+0x71fc>
   18744:	mov	r3, #39	; 0x27
   18748:	strb	r3, [r9]
   1874c:	mov	r3, #0
   18750:	str	r3, [sp, #40]	; 0x28
   18754:	mov	r3, #1
   18758:	str	r3, [sp, #68]	; 0x44
   1875c:	ldr	r3, [pc, #448]	; 18924 <__assert_fail@plt+0x7384>
   18760:	mov	r8, #1
   18764:	str	r3, [sp, #72]	; 0x48
   18768:	b	1794c <__assert_fail@plt+0x63ac>
   1876c:	ldr	r3, [sp, #40]	; 0x28
   18770:	mov	sl, r9
   18774:	str	r3, [sp, #56]	; 0x38
   18778:	mov	r9, fp
   1877c:	ldr	r2, [sp, #64]	; 0x40
   18780:	b	186b4 <__assert_fail@plt+0x7114>
   18784:	str	r2, [sp, #36]	; 0x24
   18788:	b	17b9c <__assert_fail@plt+0x65fc>
   1878c:	mov	r1, #0
   18790:	str	r3, [sp, #32]
   18794:	mov	r4, #63	; 0x3f
   18798:	b	17b38 <__assert_fail@plt+0x6598>
   1879c:	ldr	r3, [pc, #384]	; 18924 <__assert_fail@plt+0x7384>
   187a0:	str	r3, [sp, #72]	; 0x48
   187a4:	mov	r3, #0
   187a8:	str	r3, [sp, #40]	; 0x28
   187ac:	mov	r3, #1
   187b0:	str	r3, [sp, #68]	; 0x44
   187b4:	mov	r8, r3
   187b8:	b	1794c <__assert_fail@plt+0x63ac>
   187bc:	bl	11570 <abort@plt>
   187c0:	cmp	fp, #0
   187c4:	beq	18824 <__assert_fail@plt+0x7284>
   187c8:	mov	r2, #1
   187cc:	mov	r3, #34	; 0x22
   187d0:	strb	r3, [r9]
   187d4:	mov	r8, r2
   187d8:	mov	r3, r2
   187dc:	str	r2, [sp, #68]	; 0x44
   187e0:	str	r3, [sp, #56]	; 0x38
   187e4:	ldr	r3, [pc, #316]	; 18928 <__assert_fail@plt+0x7388>
   187e8:	ldr	r1, [sp, #56]	; 0x38
   187ec:	str	r3, [sp, #72]	; 0x48
   187f0:	ldr	r2, [sp, #176]	; 0xb0
   187f4:	ldr	ip, [sp, #40]	; 0x28
   187f8:	ldr	lr, [sp, #176]	; 0xb0
   187fc:	b	17630 <__assert_fail@plt+0x6090>
   18800:	ldr	r0, [sp, #44]	; 0x2c
   18804:	bl	113f0 <strlen@plt>
   18808:	str	r0, [sp, #24]
   1880c:	b	18510 <__assert_fail@plt+0x6f70>
   18810:	mov	r7, #0
   18814:	ldr	r1, [sp, #52]	; 0x34
   18818:	str	r3, [sp, #32]
   1881c:	mov	r4, #48	; 0x30
   18820:	b	17b38 <__assert_fail@plt+0x6598>
   18824:	mov	r3, #1
   18828:	str	r3, [sp, #68]	; 0x44
   1882c:	mov	r8, r3
   18830:	b	187e0 <__assert_fail@plt+0x7240>
   18834:	mov	r3, #2
   18838:	mov	sl, r9
   1883c:	str	r3, [sp, #176]	; 0xb0
   18840:	mov	r9, fp
   18844:	ldr	r3, [sp, #56]	; 0x38
   18848:	b	186b4 <__assert_fail@plt+0x7114>
   1884c:	ldr	r6, [sp, #48]	; 0x30
   18850:	b	18300 <__assert_fail@plt+0x6d60>
   18854:	ldr	r0, [sp, #24]
   18858:	mov	ip, r6
   1885c:	cmp	r0, ip
   18860:	mov	r1, r7
   18864:	mov	r2, r4
   18868:	ldr	r7, [sp, #104]	; 0x68
   1886c:	ldr	r4, [sp, #32]
   18870:	ldr	r6, [sp, #108]	; 0x6c
   18874:	ldr	r8, [sp, #112]	; 0x70
   18878:	ldr	r5, [sp, #116]	; 0x74
   1887c:	bls	188ac <__assert_fail@plt+0x730c>
   18880:	ldrb	r3, [r2]
   18884:	cmp	r3, #0
   18888:	bne	1889c <__assert_fail@plt+0x72fc>
   1888c:	b	189bc <__assert_fail@plt+0x741c>
   18890:	ldrb	r3, [r2, #1]!
   18894:	cmp	r3, #0
   18898:	beq	189bc <__assert_fail@plt+0x741c>
   1889c:	add	r1, r1, #1
   188a0:	add	r3, sl, r1
   188a4:	cmp	r0, r3
   188a8:	bhi	18890 <__assert_fail@plt+0x72f0>
   188ac:	mov	r2, #0
   188b0:	mov	r3, r7
   188b4:	str	r2, [sp, #32]
   188b8:	b	18684 <__assert_fail@plt+0x70e4>
   188bc:	mov	r1, r7
   188c0:	ldr	r7, [sp, #104]	; 0x68
   188c4:	mov	r2, #0
   188c8:	ldr	r4, [sp, #32]
   188cc:	ldr	r6, [sp, #108]	; 0x6c
   188d0:	ldr	r8, [sp, #112]	; 0x70
   188d4:	ldr	r5, [sp, #116]	; 0x74
   188d8:	mov	r3, r7
   188dc:	str	r2, [sp, #32]
   188e0:	b	18684 <__assert_fail@plt+0x70e4>
   188e4:	mov	r3, r5
   188e8:	eor	r3, r3, #1
   188ec:	ldr	r4, [sp, #32]
   188f0:	mov	r1, r7
   188f4:	str	r5, [sp, #32]
   188f8:	ldr	r7, [sp, #104]	; 0x68
   188fc:	ldr	r6, [sp, #108]	; 0x6c
   18900:	ldr	r8, [sp, #112]	; 0x70
   18904:	ldr	r5, [sp, #116]	; 0x74
   18908:	uxtb	r3, r3
   1890c:	b	18684 <__assert_fail@plt+0x70e4>
   18910:	mov	sl, r9
   18914:	str	r3, [sp, #56]	; 0x38
   18918:	mov	r9, fp
   1891c:	ldr	r2, [sp, #64]	; 0x40
   18920:	b	186b4 <__assert_fail@plt+0x7114>
   18924:	ldrdeq	pc, [r1], -r0
   18928:	andeq	pc, r1, ip, asr #17
   1892c:	ldrdeq	pc, [r1], -r4
   18930:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   18934:	ldr	r2, [sp, #44]	; 0x2c
   18938:	ldrb	r1, [r2, r3]
   1893c:	sub	r2, r1, #33	; 0x21
   18940:	uxtb	r2, r2
   18944:	cmp	r2, #29
   18948:	bhi	189c8 <__assert_fail@plt+0x7428>
   1894c:	ldr	r0, [pc, #-36]	; 18930 <__assert_fail@plt+0x7390>
   18950:	mov	ip, #1
   18954:	ands	r2, r0, ip, lsl r2
   18958:	beq	189e8 <__assert_fail@plt+0x7448>
   1895c:	ldr	r2, [sp, #40]	; 0x28
   18960:	cmp	r2, #0
   18964:	bne	18adc <__assert_fail@plt+0x753c>
   18968:	add	r2, r8, #1
   1896c:	cmp	fp, r8
   18970:	strbhi	r4, [r9, r8]
   18974:	cmp	fp, r2
   18978:	movhi	r0, #34	; 0x22
   1897c:	strbhi	r0, [r9, r2]
   18980:	add	r2, r8, #2
   18984:	cmp	fp, r2
   18988:	movhi	r0, #34	; 0x22
   1898c:	strbhi	r0, [r9, r2]
   18990:	add	r2, r8, #3
   18994:	cmp	fp, r2
   18998:	mov	sl, r3
   1899c:	ldr	r3, [sp, #40]	; 0x28
   189a0:	movhi	r0, #63	; 0x3f
   189a4:	mov	r4, r1
   189a8:	strbhi	r0, [r9, r2]
   189ac:	add	r8, r8, #4
   189b0:	mov	r1, r3
   189b4:	str	r3, [sp, #32]
   189b8:	b	17b38 <__assert_fail@plt+0x6598>
   189bc:	str	r3, [sp, #32]
   189c0:	mov	r3, r7
   189c4:	b	18684 <__assert_fail@plt+0x70e4>
   189c8:	mov	r1, #0
   189cc:	str	r1, [sp, #32]
   189d0:	b	17b38 <__assert_fail@plt+0x6598>
   189d4:	mov	sl, r9
   189d8:	ldr	r3, [sp, #56]	; 0x38
   189dc:	mov	r9, fp
   189e0:	ldr	r2, [sp, #64]	; 0x40
   189e4:	b	186b4 <__assert_fail@plt+0x7114>
   189e8:	str	r2, [sp, #32]
   189ec:	mov	r1, #0
   189f0:	b	17b38 <__assert_fail@plt+0x6598>
   189f4:	ldr	r2, [sp, #76]	; 0x4c
   189f8:	mov	sl, r9
   189fc:	mov	r9, fp
   18a00:	mov	fp, r8
   18a04:	ldr	r1, [sp, #72]	; 0x48
   18a08:	cmp	r1, #0
   18a0c:	moveq	r3, #0
   18a10:	andne	r3, r2, #1
   18a14:	cmp	r3, #0
   18a18:	beq	18a44 <__assert_fail@plt+0x74a4>
   18a1c:	ldrb	r3, [r1]
   18a20:	cmp	r3, #0
   18a24:	beq	18a44 <__assert_fail@plt+0x74a4>
   18a28:	mov	r2, r1
   18a2c:	cmp	r9, fp
   18a30:	strbhi	r3, [sl, fp]
   18a34:	ldrb	r3, [r2, #1]!
   18a38:	add	fp, fp, #1
   18a3c:	cmp	r3, #0
   18a40:	bne	18a2c <__assert_fail@plt+0x748c>
   18a44:	cmp	r9, fp
   18a48:	movhi	r3, #0
   18a4c:	strbhi	r3, [sl, fp]
   18a50:	b	1870c <__assert_fail@plt+0x716c>
   18a54:	ldr	r3, [sp, #192]	; 0xc0
   18a58:	mov	ip, #5
   18a5c:	str	r3, [sp, #16]
   18a60:	ldr	r3, [sp, #188]	; 0xbc
   18a64:	ldr	r2, [sp, #44]	; 0x2c
   18a68:	str	r3, [sp, #12]
   18a6c:	ldr	r3, [sp, #184]	; 0xb8
   18a70:	ldr	r1, [sp, #84]	; 0x54
   18a74:	str	r3, [sp, #8]
   18a78:	ldr	r3, [sp, #180]	; 0xb4
   18a7c:	mov	r0, r9
   18a80:	str	r3, [sp, #4]
   18a84:	str	ip, [sp]
   18a88:	ldr	r3, [sp, #24]
   18a8c:	bl	17564 <__assert_fail@plt+0x5fc4>
   18a90:	mov	fp, r0
   18a94:	b	1870c <__assert_fail@plt+0x716c>
   18a98:	mov	sl, r9
   18a9c:	mov	r9, fp
   18aa0:	mov	fp, r8
   18aa4:	b	18a04 <__assert_fail@plt+0x7464>
   18aa8:	ldr	r1, [sp, #176]	; 0xb0
   18aac:	bl	17444 <__assert_fail@plt+0x5ea4>
   18ab0:	str	r0, [sp, #192]	; 0xc0
   18ab4:	b	17a20 <__assert_fail@plt+0x6480>
   18ab8:	ldr	r1, [sp, #176]	; 0xb0
   18abc:	bl	17444 <__assert_fail@plt+0x5ea4>
   18ac0:	str	r0, [sp, #188]	; 0xbc
   18ac4:	b	17a00 <__assert_fail@plt+0x6460>
   18ac8:	mov	sl, r9
   18acc:	mov	r2, r3
   18ad0:	mov	r9, fp
   18ad4:	mov	fp, r8
   18ad8:	b	18a04 <__assert_fail@plt+0x7464>
   18adc:	mov	sl, r9
   18ae0:	mov	r9, fp
   18ae4:	b	186c8 <__assert_fail@plt+0x7128>
   18ae8:	push	{r4, r5, r6, lr}
   18aec:	mov	r5, r0
   18af0:	bl	11420 <__errno_location@plt>
   18af4:	cmp	r5, #0
   18af8:	mov	r1, #48	; 0x30
   18afc:	mov	r4, r0
   18b00:	ldr	r0, [pc, #16]	; 18b18 <__assert_fail@plt+0x7578>
   18b04:	ldr	r6, [r4]
   18b08:	movne	r0, r5
   18b0c:	bl	1c3dc <__assert_fail@plt+0xae3c>
   18b10:	str	r6, [r4]
   18b14:	pop	{r4, r5, r6, pc}
   18b18:			; <UNDEFINED> instruction: 0x000302b8
   18b1c:	ldr	r3, [pc, #12]	; 18b30 <__assert_fail@plt+0x7590>
   18b20:	cmp	r0, #0
   18b24:	moveq	r0, r3
   18b28:	ldr	r0, [r0]
   18b2c:	bx	lr
   18b30:			; <UNDEFINED> instruction: 0x000302b8
   18b34:	ldr	r3, [pc, #12]	; 18b48 <__assert_fail@plt+0x75a8>
   18b38:	cmp	r0, #0
   18b3c:	moveq	r0, r3
   18b40:	str	r1, [r0]
   18b44:	bx	lr
   18b48:			; <UNDEFINED> instruction: 0x000302b8
   18b4c:	ldr	r3, [pc, #52]	; 18b88 <__assert_fail@plt+0x75e8>
   18b50:	cmp	r0, #0
   18b54:	moveq	r0, r3
   18b58:	add	r3, r0, #8
   18b5c:	push	{lr}		; (str lr, [sp, #-4]!)
   18b60:	lsr	lr, r1, #5
   18b64:	and	r1, r1, #31
   18b68:	ldr	ip, [r3, lr, lsl #2]
   18b6c:	lsr	r0, ip, r1
   18b70:	eor	r2, r2, r0
   18b74:	and	r2, r2, #1
   18b78:	and	r0, r0, #1
   18b7c:	eor	r1, ip, r2, lsl r1
   18b80:	str	r1, [r3, lr, lsl #2]
   18b84:	pop	{pc}		; (ldr pc, [sp], #4)
   18b88:			; <UNDEFINED> instruction: 0x000302b8
   18b8c:	ldr	r3, [pc, #16]	; 18ba4 <__assert_fail@plt+0x7604>
   18b90:	cmp	r0, #0
   18b94:	movne	r3, r0
   18b98:	ldr	r0, [r3, #4]
   18b9c:	str	r1, [r3, #4]
   18ba0:	bx	lr
   18ba4:			; <UNDEFINED> instruction: 0x000302b8
   18ba8:	ldr	r3, [pc, #44]	; 18bdc <__assert_fail@plt+0x763c>
   18bac:	cmp	r0, #0
   18bb0:	moveq	r0, r3
   18bb4:	mov	ip, #10
   18bb8:	cmp	r2, #0
   18bbc:	cmpne	r1, #0
   18bc0:	str	ip, [r0]
   18bc4:	beq	18bd4 <__assert_fail@plt+0x7634>
   18bc8:	str	r1, [r0, #40]	; 0x28
   18bcc:	str	r2, [r0, #44]	; 0x2c
   18bd0:	bx	lr
   18bd4:	push	{r4, lr}
   18bd8:	bl	11570 <abort@plt>
   18bdc:			; <UNDEFINED> instruction: 0x000302b8
   18be0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18be4:	sub	sp, sp, #24
   18be8:	ldr	ip, [pc, #108]	; 18c5c <__assert_fail@plt+0x76bc>
   18bec:	ldr	r4, [sp, #56]	; 0x38
   18bf0:	mov	r9, r2
   18bf4:	cmp	r4, #0
   18bf8:	moveq	r4, ip
   18bfc:	mov	sl, r3
   18c00:	mov	r7, r0
   18c04:	mov	r8, r1
   18c08:	bl	11420 <__errno_location@plt>
   18c0c:	ldr	r3, [r4, #44]	; 0x2c
   18c10:	mov	r1, r8
   18c14:	ldr	r6, [r0]
   18c18:	str	r3, [sp, #16]
   18c1c:	ldr	r2, [r4, #40]	; 0x28
   18c20:	add	r3, r4, #8
   18c24:	str	r3, [sp, #8]
   18c28:	str	r2, [sp, #12]
   18c2c:	ldr	r2, [r4, #4]
   18c30:	mov	r5, r0
   18c34:	str	r2, [sp, #4]
   18c38:	ldr	ip, [r4]
   18c3c:	mov	r3, sl
   18c40:	mov	r2, r9
   18c44:	mov	r0, r7
   18c48:	str	ip, [sp]
   18c4c:	bl	17564 <__assert_fail@plt+0x5fc4>
   18c50:	str	r6, [r5]
   18c54:	add	sp, sp, #24
   18c58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18c5c:			; <UNDEFINED> instruction: 0x000302b8
   18c60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c64:	cmp	r2, #0
   18c68:	sub	sp, sp, #36	; 0x24
   18c6c:	ldr	r4, [pc, #164]	; 18d18 <__assert_fail@plt+0x7778>
   18c70:	mov	r8, r1
   18c74:	movne	r4, r2
   18c78:	mov	r7, r0
   18c7c:	bl	11420 <__errno_location@plt>
   18c80:	ldr	r3, [r4, #44]	; 0x2c
   18c84:	ldr	r5, [r4, #4]
   18c88:	add	r9, r4, #8
   18c8c:	orr	r5, r5, #1
   18c90:	mov	r1, #0
   18c94:	mov	r2, r7
   18c98:	ldr	fp, [r0]
   18c9c:	str	r3, [sp, #16]
   18ca0:	ldr	r3, [r4, #40]	; 0x28
   18ca4:	stmib	sp, {r5, r9}
   18ca8:	str	r3, [sp, #12]
   18cac:	ldr	r3, [r4]
   18cb0:	mov	r6, r0
   18cb4:	str	r3, [sp]
   18cb8:	mov	r0, r1
   18cbc:	mov	r3, r8
   18cc0:	bl	17564 <__assert_fail@plt+0x5fc4>
   18cc4:	add	r1, r0, #1
   18cc8:	mov	r0, r1
   18ccc:	str	r1, [sp, #28]
   18cd0:	bl	1be98 <__assert_fail@plt+0xa8f8>
   18cd4:	ldr	r3, [r4, #44]	; 0x2c
   18cd8:	ldr	r1, [sp, #28]
   18cdc:	str	r3, [sp, #16]
   18ce0:	ldr	r3, [r4, #40]	; 0x28
   18ce4:	str	r5, [sp, #4]
   18ce8:	str	r3, [sp, #12]
   18cec:	str	r9, [sp, #8]
   18cf0:	ldr	ip, [r4]
   18cf4:	mov	r3, r8
   18cf8:	mov	r2, r7
   18cfc:	str	ip, [sp]
   18d00:	mov	sl, r0
   18d04:	bl	17564 <__assert_fail@plt+0x5fc4>
   18d08:	mov	r0, sl
   18d0c:	str	fp, [r6]
   18d10:	add	sp, sp, #36	; 0x24
   18d14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d18:			; <UNDEFINED> instruction: 0x000302b8
   18d1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d20:	cmp	r3, #0
   18d24:	sub	sp, sp, #44	; 0x2c
   18d28:	ldr	r4, [pc, #192]	; 18df0 <__assert_fail@plt+0x7850>
   18d2c:	mov	r6, r2
   18d30:	movne	r4, r3
   18d34:	mov	r9, r1
   18d38:	mov	r8, r0
   18d3c:	bl	11420 <__errno_location@plt>
   18d40:	ldr	r3, [r4, #44]	; 0x2c
   18d44:	ldr	r5, [r4, #4]
   18d48:	add	sl, r4, #8
   18d4c:	cmp	r6, #0
   18d50:	orreq	r5, r5, #1
   18d54:	mov	r1, #0
   18d58:	ldr	r2, [r0]
   18d5c:	str	r3, [sp, #16]
   18d60:	ldr	r3, [r4, #40]	; 0x28
   18d64:	stmib	sp, {r5, sl}
   18d68:	str	r3, [sp, #12]
   18d6c:	ldr	r3, [r4]
   18d70:	mov	r7, r0
   18d74:	str	r2, [sp, #28]
   18d78:	str	r3, [sp]
   18d7c:	mov	r2, r8
   18d80:	mov	r3, r9
   18d84:	mov	r0, r1
   18d88:	bl	17564 <__assert_fail@plt+0x5fc4>
   18d8c:	add	r1, r0, #1
   18d90:	mov	fp, r0
   18d94:	mov	r0, r1
   18d98:	str	r1, [sp, #36]	; 0x24
   18d9c:	bl	1be98 <__assert_fail@plt+0xa8f8>
   18da0:	ldr	r3, [r4, #44]	; 0x2c
   18da4:	mov	r2, r8
   18da8:	str	r3, [sp, #16]
   18dac:	ldr	r3, [r4, #40]	; 0x28
   18db0:	str	r5, [sp, #4]
   18db4:	str	r3, [sp, #12]
   18db8:	str	sl, [sp, #8]
   18dbc:	ldr	ip, [r4]
   18dc0:	ldr	r1, [sp, #36]	; 0x24
   18dc4:	mov	r3, r9
   18dc8:	str	ip, [sp]
   18dcc:	str	r0, [sp, #32]
   18dd0:	bl	17564 <__assert_fail@plt+0x5fc4>
   18dd4:	ldr	r2, [sp, #28]
   18dd8:	cmp	r6, #0
   18ddc:	str	r2, [r7]
   18de0:	ldr	r0, [sp, #32]
   18de4:	strne	fp, [r6]
   18de8:	add	sp, sp, #44	; 0x2c
   18dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18df0:			; <UNDEFINED> instruction: 0x000302b8
   18df4:	push	{r4, r5, r6, r7, r8, lr}
   18df8:	ldr	r6, [pc, #116]	; 18e74 <__assert_fail@plt+0x78d4>
   18dfc:	ldr	r3, [r6, #4]
   18e00:	ldr	r7, [r6]
   18e04:	cmp	r3, #1
   18e08:	movgt	r5, r7
   18e0c:	movgt	r4, #1
   18e10:	ble	18e30 <__assert_fail@plt+0x7890>
   18e14:	ldr	r0, [r5, #12]
   18e18:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   18e1c:	ldr	r3, [r6, #4]
   18e20:	add	r4, r4, #1
   18e24:	cmp	r3, r4
   18e28:	add	r5, r5, #8
   18e2c:	bgt	18e14 <__assert_fail@plt+0x7874>
   18e30:	ldr	r0, [r7, #4]
   18e34:	ldr	r4, [pc, #60]	; 18e78 <__assert_fail@plt+0x78d8>
   18e38:	cmp	r0, r4
   18e3c:	beq	18e50 <__assert_fail@plt+0x78b0>
   18e40:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   18e44:	mov	r3, #256	; 0x100
   18e48:	str	r4, [r6, #12]
   18e4c:	str	r3, [r6, #8]
   18e50:	ldr	r4, [pc, #36]	; 18e7c <__assert_fail@plt+0x78dc>
   18e54:	cmp	r7, r4
   18e58:	beq	18e68 <__assert_fail@plt+0x78c8>
   18e5c:	mov	r0, r7
   18e60:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   18e64:	str	r4, [r6]
   18e68:	mov	r3, #1
   18e6c:	str	r3, [r6, #4]
   18e70:	pop	{r4, r5, r6, r7, r8, pc}
   18e74:	andeq	r0, r3, r8, ror r1
   18e78:	andeq	r0, r3, r8, ror #5
   18e7c:	andeq	r0, r3, r0, lsl #3
   18e80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e84:	sub	sp, sp, #44	; 0x2c
   18e88:	mov	r5, r0
   18e8c:	mov	sl, r1
   18e90:	bl	11420 <__errno_location@plt>
   18e94:	ldr	r4, [pc, #400]	; 1902c <__assert_fail@plt+0x7a8c>
   18e98:	cmn	r5, #-2147483647	; 0x80000001
   18e9c:	ldr	r6, [r4]
   18ea0:	mov	r8, r0
   18ea4:	movne	r0, #0
   18ea8:	moveq	r0, #1
   18eac:	ldr	r3, [r8]
   18eb0:	orrs	r0, r0, r5, lsr #31
   18eb4:	str	r3, [sp, #24]
   18eb8:	bne	19028 <__assert_fail@plt+0x7a88>
   18ebc:	ldr	r2, [r4, #4]
   18ec0:	cmp	r5, r2
   18ec4:	blt	18f24 <__assert_fail@plt+0x7984>
   18ec8:	add	r7, r4, #8
   18ecc:	cmp	r6, r7
   18ed0:	str	r2, [sp, #36]	; 0x24
   18ed4:	beq	18ff8 <__assert_fail@plt+0x7a58>
   18ed8:	mov	r3, #8
   18edc:	sub	r2, r5, r2
   18ee0:	mov	r0, r6
   18ee4:	str	r3, [sp]
   18ee8:	add	r2, r2, #1
   18eec:	mvn	r3, #-2147483648	; 0x80000000
   18ef0:	add	r1, sp, #36	; 0x24
   18ef4:	bl	1c0b4 <__assert_fail@plt+0xab14>
   18ef8:	mov	r6, r0
   18efc:	str	r0, [r4]
   18f00:	ldr	r0, [r4, #4]
   18f04:	ldr	r2, [sp, #36]	; 0x24
   18f08:	mov	r1, #0
   18f0c:	sub	r2, r2, r0
   18f10:	add	r0, r6, r0, lsl #3
   18f14:	lsl	r2, r2, #3
   18f18:	bl	11444 <memset@plt>
   18f1c:	ldr	r3, [sp, #36]	; 0x24
   18f20:	str	r3, [r4, #4]
   18f24:	ldr	r4, [pc, #260]	; 19030 <__assert_fail@plt+0x7a90>
   18f28:	add	fp, r6, r5, lsl #3
   18f2c:	ldr	r9, [r6, r5, lsl #3]
   18f30:	ldr	r0, [r4, #4]
   18f34:	ldr	r3, [r4]
   18f38:	ldr	r7, [fp, #4]
   18f3c:	ldr	r1, [r4, #44]	; 0x2c
   18f40:	ldr	r2, [r4, #40]	; 0x28
   18f44:	orr	r0, r0, #1
   18f48:	str	r3, [sp]
   18f4c:	add	r3, r4, #8
   18f50:	str	r0, [sp, #28]
   18f54:	str	r0, [sp, #4]
   18f58:	str	r1, [sp, #16]
   18f5c:	str	r2, [sp, #12]
   18f60:	str	r3, [sp, #8]
   18f64:	mov	r0, r7
   18f68:	mov	r1, r9
   18f6c:	mvn	r3, #0
   18f70:	mov	r2, sl
   18f74:	bl	17564 <__assert_fail@plt+0x5fc4>
   18f78:	cmp	r9, r0
   18f7c:	bhi	18fe4 <__assert_fail@plt+0x7a44>
   18f80:	add	r3, r4, #48	; 0x30
   18f84:	add	r9, r0, #1
   18f88:	cmp	r7, r3
   18f8c:	str	r9, [r6, r5, lsl #3]
   18f90:	beq	18f9c <__assert_fail@plt+0x79fc>
   18f94:	mov	r0, r7
   18f98:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   18f9c:	mov	r0, r9
   18fa0:	bl	1be98 <__assert_fail@plt+0xa8f8>
   18fa4:	ldr	ip, [r4, #44]	; 0x2c
   18fa8:	ldr	r3, [r4]
   18fac:	ldr	lr, [r4, #40]	; 0x28
   18fb0:	ldr	r4, [pc, #124]	; 19034 <__assert_fail@plt+0x7a94>
   18fb4:	mov	r2, sl
   18fb8:	mov	r1, r9
   18fbc:	str	r0, [fp, #4]
   18fc0:	str	r4, [sp, #8]
   18fc4:	ldr	r4, [sp, #28]
   18fc8:	str	r3, [sp]
   18fcc:	str	r4, [sp, #4]
   18fd0:	str	ip, [sp, #16]
   18fd4:	str	lr, [sp, #12]
   18fd8:	mvn	r3, #0
   18fdc:	mov	r7, r0
   18fe0:	bl	17564 <__assert_fail@plt+0x5fc4>
   18fe4:	ldr	r3, [sp, #24]
   18fe8:	mov	r0, r7
   18fec:	str	r3, [r8]
   18ff0:	add	sp, sp, #44	; 0x2c
   18ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ff8:	mov	r3, #8
   18ffc:	sub	r2, r5, r2
   19000:	str	r3, [sp]
   19004:	add	r1, sp, #36	; 0x24
   19008:	add	r2, r2, #1
   1900c:	mvn	r3, #-2147483648	; 0x80000000
   19010:	bl	1c0b4 <__assert_fail@plt+0xab14>
   19014:	mov	r6, r0
   19018:	ldm	r7, {r0, r1}
   1901c:	str	r6, [r4]
   19020:	stm	r6, {r0, r1}
   19024:	b	18f00 <__assert_fail@plt+0x7960>
   19028:	bl	11570 <abort@plt>
   1902c:	andeq	r0, r3, r8, ror r1
   19030:			; <UNDEFINED> instruction: 0x000302b8
   19034:	andeq	r0, r3, r0, asr #5
   19038:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1903c:	sub	sp, sp, #52	; 0x34
   19040:	mov	r5, r0
   19044:	mov	sl, r1
   19048:	mov	fp, r2
   1904c:	bl	11420 <__errno_location@plt>
   19050:	ldr	r4, [pc, #408]	; 191f0 <__assert_fail@plt+0x7c50>
   19054:	cmn	r5, #-2147483647	; 0x80000001
   19058:	ldr	r6, [r4]
   1905c:	mov	r8, r0
   19060:	movne	r0, #0
   19064:	moveq	r0, #1
   19068:	ldr	r3, [r8]
   1906c:	orrs	r0, r0, r5, lsr #31
   19070:	str	r3, [sp, #28]
   19074:	bne	191ec <__assert_fail@plt+0x7c4c>
   19078:	ldr	r2, [r4, #4]
   1907c:	cmp	r5, r2
   19080:	blt	190e0 <__assert_fail@plt+0x7b40>
   19084:	add	r7, r4, #8
   19088:	cmp	r6, r7
   1908c:	str	r2, [sp, #44]	; 0x2c
   19090:	beq	191bc <__assert_fail@plt+0x7c1c>
   19094:	mov	r3, #8
   19098:	sub	r2, r5, r2
   1909c:	mov	r0, r6
   190a0:	str	r3, [sp]
   190a4:	add	r2, r2, #1
   190a8:	mvn	r3, #-2147483648	; 0x80000000
   190ac:	add	r1, sp, #44	; 0x2c
   190b0:	bl	1c0b4 <__assert_fail@plt+0xab14>
   190b4:	mov	r6, r0
   190b8:	str	r0, [r4]
   190bc:	ldr	r0, [r4, #4]
   190c0:	ldr	r2, [sp, #44]	; 0x2c
   190c4:	mov	r1, #0
   190c8:	sub	r2, r2, r0
   190cc:	add	r0, r6, r0, lsl #3
   190d0:	lsl	r2, r2, #3
   190d4:	bl	11444 <memset@plt>
   190d8:	ldr	r3, [sp, #44]	; 0x2c
   190dc:	str	r3, [r4, #4]
   190e0:	ldr	r4, [pc, #268]	; 191f4 <__assert_fail@plt+0x7c54>
   190e4:	add	r3, r6, r5, lsl #3
   190e8:	str	r3, [sp, #32]
   190ec:	ldr	r7, [r3, #4]
   190f0:	ldr	r0, [r4, #4]
   190f4:	ldr	r3, [r4]
   190f8:	ldr	r9, [r6, r5, lsl #3]
   190fc:	ldr	r1, [r4, #44]	; 0x2c
   19100:	ldr	r2, [r4, #40]	; 0x28
   19104:	orr	r0, r0, #1
   19108:	str	r3, [sp]
   1910c:	add	r3, r4, #8
   19110:	str	r0, [sp, #36]	; 0x24
   19114:	str	r0, [sp, #4]
   19118:	str	r1, [sp, #16]
   1911c:	str	r2, [sp, #12]
   19120:	str	r3, [sp, #8]
   19124:	mov	r0, r7
   19128:	mov	r1, r9
   1912c:	mov	r3, fp
   19130:	mov	r2, sl
   19134:	bl	17564 <__assert_fail@plt+0x5fc4>
   19138:	cmp	r9, r0
   1913c:	bhi	191a8 <__assert_fail@plt+0x7c08>
   19140:	add	r3, r4, #48	; 0x30
   19144:	add	r9, r0, #1
   19148:	cmp	r7, r3
   1914c:	str	r9, [r6, r5, lsl #3]
   19150:	beq	1915c <__assert_fail@plt+0x7bbc>
   19154:	mov	r0, r7
   19158:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   1915c:	mov	r0, r9
   19160:	bl	1be98 <__assert_fail@plt+0xa8f8>
   19164:	ldr	ip, [sp, #32]
   19168:	ldr	lr, [r4, #44]	; 0x2c
   1916c:	ldr	r5, [r4, #40]	; 0x28
   19170:	mov	r3, fp
   19174:	mov	r2, sl
   19178:	mov	r1, r9
   1917c:	str	r0, [ip, #4]
   19180:	ldr	ip, [r4]
   19184:	ldr	r4, [pc, #108]	; 191f8 <__assert_fail@plt+0x7c58>
   19188:	str	lr, [sp, #16]
   1918c:	str	r4, [sp, #8]
   19190:	ldr	r4, [sp, #36]	; 0x24
   19194:	str	r5, [sp, #12]
   19198:	str	r4, [sp, #4]
   1919c:	str	ip, [sp]
   191a0:	mov	r7, r0
   191a4:	bl	17564 <__assert_fail@plt+0x5fc4>
   191a8:	ldr	r3, [sp, #28]
   191ac:	mov	r0, r7
   191b0:	str	r3, [r8]
   191b4:	add	sp, sp, #52	; 0x34
   191b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191bc:	mov	r3, #8
   191c0:	sub	r2, r5, r2
   191c4:	str	r3, [sp]
   191c8:	add	r1, sp, #44	; 0x2c
   191cc:	add	r2, r2, #1
   191d0:	mvn	r3, #-2147483648	; 0x80000000
   191d4:	bl	1c0b4 <__assert_fail@plt+0xab14>
   191d8:	mov	r6, r0
   191dc:	ldm	r7, {r0, r1}
   191e0:	str	r6, [r4]
   191e4:	stm	r6, {r0, r1}
   191e8:	b	190bc <__assert_fail@plt+0x7b1c>
   191ec:	bl	11570 <abort@plt>
   191f0:	andeq	r0, r3, r8, ror r1
   191f4:			; <UNDEFINED> instruction: 0x000302b8
   191f8:	andeq	r0, r3, r0, asr #5
   191fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19200:	sub	sp, sp, #44	; 0x2c
   19204:	mov	sl, r0
   19208:	bl	11420 <__errno_location@plt>
   1920c:	ldr	r4, [pc, #352]	; 19374 <__assert_fail@plt+0x7dd4>
   19210:	ldr	r2, [r4, #4]
   19214:	ldr	r5, [r4]
   19218:	cmp	r2, #0
   1921c:	ldr	r3, [r0]
   19220:	mov	r8, r0
   19224:	str	r3, [sp, #28]
   19228:	bgt	19284 <__assert_fail@plt+0x7ce4>
   1922c:	add	r6, r4, #8
   19230:	cmp	r5, r6
   19234:	str	r2, [sp, #36]	; 0x24
   19238:	beq	19344 <__assert_fail@plt+0x7da4>
   1923c:	mov	r3, #8
   19240:	mov	r0, r5
   19244:	str	r3, [sp]
   19248:	rsb	r2, r2, #1
   1924c:	mvn	r3, #-2147483648	; 0x80000000
   19250:	add	r1, sp, #36	; 0x24
   19254:	bl	1c0b4 <__assert_fail@plt+0xab14>
   19258:	mov	r5, r0
   1925c:	str	r0, [r4]
   19260:	ldr	r0, [r4, #4]
   19264:	ldr	r2, [sp, #36]	; 0x24
   19268:	mov	r1, #0
   1926c:	sub	r2, r2, r0
   19270:	add	r0, r5, r0, lsl #3
   19274:	lsl	r2, r2, #3
   19278:	bl	11444 <memset@plt>
   1927c:	ldr	r3, [sp, #36]	; 0x24
   19280:	str	r3, [r4, #4]
   19284:	ldr	r4, [pc, #236]	; 19378 <__assert_fail@plt+0x7dd8>
   19288:	ldr	r9, [r5]
   1928c:	ldr	r6, [r5, #4]
   19290:	ldr	r7, [r4, #4]
   19294:	ldr	r1, [r4, #44]	; 0x2c
   19298:	ldr	r2, [r4, #40]	; 0x28
   1929c:	ldr	r3, [r4]
   192a0:	orr	r7, r7, #1
   192a4:	add	fp, r4, #8
   192a8:	str	r1, [sp, #16]
   192ac:	str	r2, [sp, #12]
   192b0:	str	r3, [sp]
   192b4:	str	r7, [sp, #4]
   192b8:	str	fp, [sp, #8]
   192bc:	mov	r1, r9
   192c0:	mov	r0, r6
   192c4:	mvn	r3, #0
   192c8:	mov	r2, sl
   192cc:	bl	17564 <__assert_fail@plt+0x5fc4>
   192d0:	cmp	r9, r0
   192d4:	bhi	19330 <__assert_fail@plt+0x7d90>
   192d8:	add	r3, r4, #48	; 0x30
   192dc:	add	r9, r0, #1
   192e0:	cmp	r6, r3
   192e4:	str	r9, [r5]
   192e8:	beq	192f4 <__assert_fail@plt+0x7d54>
   192ec:	mov	r0, r6
   192f0:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   192f4:	mov	r0, r9
   192f8:	bl	1be98 <__assert_fail@plt+0xa8f8>
   192fc:	ldr	ip, [r4, #44]	; 0x2c
   19300:	ldr	r3, [r4]
   19304:	ldr	lr, [r4, #40]	; 0x28
   19308:	mov	r2, sl
   1930c:	mov	r1, r9
   19310:	str	r0, [r5, #4]
   19314:	str	r3, [sp]
   19318:	stmib	sp, {r7, fp}
   1931c:	str	ip, [sp, #16]
   19320:	str	lr, [sp, #12]
   19324:	mvn	r3, #0
   19328:	mov	r6, r0
   1932c:	bl	17564 <__assert_fail@plt+0x5fc4>
   19330:	ldr	r3, [sp, #28]
   19334:	mov	r0, r6
   19338:	str	r3, [r8]
   1933c:	add	sp, sp, #44	; 0x2c
   19340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19344:	mov	r3, #8
   19348:	str	r3, [sp]
   1934c:	add	r1, sp, #36	; 0x24
   19350:	rsb	r2, r2, #1
   19354:	mvn	r3, #-2147483648	; 0x80000000
   19358:	mov	r0, #0
   1935c:	bl	1c0b4 <__assert_fail@plt+0xab14>
   19360:	mov	r5, r0
   19364:	ldm	r6, {r0, r1}
   19368:	str	r5, [r4]
   1936c:	stm	r5, {r0, r1}
   19370:	b	19260 <__assert_fail@plt+0x7cc0>
   19374:	andeq	r0, r3, r8, ror r1
   19378:			; <UNDEFINED> instruction: 0x000302b8
   1937c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19380:	sub	sp, sp, #44	; 0x2c
   19384:	mov	r9, r0
   19388:	mov	sl, r1
   1938c:	bl	11420 <__errno_location@plt>
   19390:	ldr	r4, [pc, #364]	; 19504 <__assert_fail@plt+0x7f64>
   19394:	ldr	r2, [r4, #4]
   19398:	ldr	r5, [r4]
   1939c:	cmp	r2, #0
   193a0:	ldr	r3, [r0]
   193a4:	mov	r7, r0
   193a8:	str	r3, [sp, #24]
   193ac:	bgt	19408 <__assert_fail@plt+0x7e68>
   193b0:	add	r6, r4, #8
   193b4:	cmp	r5, r6
   193b8:	str	r2, [sp, #36]	; 0x24
   193bc:	beq	194d4 <__assert_fail@plt+0x7f34>
   193c0:	mov	r3, #8
   193c4:	mov	r0, r5
   193c8:	str	r3, [sp]
   193cc:	rsb	r2, r2, #1
   193d0:	mvn	r3, #-2147483648	; 0x80000000
   193d4:	add	r1, sp, #36	; 0x24
   193d8:	bl	1c0b4 <__assert_fail@plt+0xab14>
   193dc:	mov	r5, r0
   193e0:	str	r0, [r4]
   193e4:	ldr	r0, [r4, #4]
   193e8:	ldr	r2, [sp, #36]	; 0x24
   193ec:	mov	r1, #0
   193f0:	sub	r2, r2, r0
   193f4:	add	r0, r5, r0, lsl #3
   193f8:	lsl	r2, r2, #3
   193fc:	bl	11444 <memset@plt>
   19400:	ldr	r3, [sp, #36]	; 0x24
   19404:	str	r3, [r4, #4]
   19408:	ldr	r4, [pc, #248]	; 19508 <__assert_fail@plt+0x7f68>
   1940c:	ldr	r8, [r5]
   19410:	ldr	r6, [r5, #4]
   19414:	ldr	r0, [r4, #4]
   19418:	ldr	r1, [r4, #44]	; 0x2c
   1941c:	ldr	r2, [r4, #40]	; 0x28
   19420:	ldr	r3, [r4]
   19424:	orr	r0, r0, #1
   19428:	add	fp, r4, #8
   1942c:	str	r0, [sp, #28]
   19430:	str	r0, [sp, #4]
   19434:	str	r1, [sp, #16]
   19438:	str	r2, [sp, #12]
   1943c:	str	r3, [sp]
   19440:	str	fp, [sp, #8]
   19444:	mov	r1, r8
   19448:	mov	r0, r6
   1944c:	mov	r3, sl
   19450:	mov	r2, r9
   19454:	bl	17564 <__assert_fail@plt+0x5fc4>
   19458:	cmp	r8, r0
   1945c:	bhi	194c0 <__assert_fail@plt+0x7f20>
   19460:	add	r3, r4, #48	; 0x30
   19464:	add	r8, r0, #1
   19468:	cmp	r6, r3
   1946c:	str	r8, [r5]
   19470:	beq	1947c <__assert_fail@plt+0x7edc>
   19474:	mov	r0, r6
   19478:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   1947c:	mov	r0, r8
   19480:	bl	1be98 <__assert_fail@plt+0xa8f8>
   19484:	ldr	lr, [r4, #44]	; 0x2c
   19488:	ldr	ip, [r4]
   1948c:	mov	r3, sl
   19490:	mov	r2, r9
   19494:	mov	r1, r8
   19498:	str	r0, [r5, #4]
   1949c:	ldr	r5, [r4, #40]	; 0x28
   194a0:	ldr	r4, [sp, #28]
   194a4:	str	fp, [sp, #8]
   194a8:	str	r4, [sp, #4]
   194ac:	str	lr, [sp, #16]
   194b0:	str	r5, [sp, #12]
   194b4:	str	ip, [sp]
   194b8:	mov	r6, r0
   194bc:	bl	17564 <__assert_fail@plt+0x5fc4>
   194c0:	ldr	r3, [sp, #24]
   194c4:	mov	r0, r6
   194c8:	str	r3, [r7]
   194cc:	add	sp, sp, #44	; 0x2c
   194d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   194d4:	mov	r3, #8
   194d8:	str	r3, [sp]
   194dc:	add	r1, sp, #36	; 0x24
   194e0:	rsb	r2, r2, #1
   194e4:	mvn	r3, #-2147483648	; 0x80000000
   194e8:	mov	r0, #0
   194ec:	bl	1c0b4 <__assert_fail@plt+0xab14>
   194f0:	mov	r5, r0
   194f4:	ldm	r6, {r0, r1}
   194f8:	str	r5, [r4]
   194fc:	stm	r5, {r0, r1}
   19500:	b	193e4 <__assert_fail@plt+0x7e44>
   19504:	andeq	r0, r3, r8, ror r1
   19508:			; <UNDEFINED> instruction: 0x000302b8
   1950c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19510:	sub	sp, sp, #132	; 0x84
   19514:	mov	r5, r1
   19518:	mov	r4, r0
   1951c:	mov	r9, r2
   19520:	add	r0, sp, #80	; 0x50
   19524:	mov	r2, #48	; 0x30
   19528:	mov	r1, #0
   1952c:	bl	11444 <memset@plt>
   19530:	cmp	r5, #10
   19534:	beq	196ec <__assert_fail@plt+0x814c>
   19538:	add	lr, sp, #80	; 0x50
   1953c:	str	r5, [sp, #80]	; 0x50
   19540:	ldm	lr!, {r0, r1, r2, r3}
   19544:	add	ip, sp, #32
   19548:	ldr	r6, [pc, #416]	; 196f0 <__assert_fail@plt+0x8150>
   1954c:	stmia	ip!, {r0, r1, r2, r3}
   19550:	ldm	lr!, {r0, r1, r2, r3}
   19554:	stmia	ip!, {r0, r1, r2, r3}
   19558:	ldm	lr, {r0, r1, r2, r3}
   1955c:	stm	ip, {r0, r1, r2, r3}
   19560:	bl	11420 <__errno_location@plt>
   19564:	cmn	r4, #-2147483647	; 0x80000001
   19568:	ldr	r5, [r6]
   1956c:	mov	r7, r0
   19570:	movne	r0, #0
   19574:	moveq	r0, #1
   19578:	ldr	r3, [r7]
   1957c:	orrs	r0, r0, r4, lsr #31
   19580:	str	r3, [sp, #24]
   19584:	bne	196ec <__assert_fail@plt+0x814c>
   19588:	ldr	r2, [r6, #4]
   1958c:	cmp	r4, r2
   19590:	blt	195f0 <__assert_fail@plt+0x8050>
   19594:	add	r8, r6, #8
   19598:	cmp	r5, r8
   1959c:	str	r2, [sp, #80]	; 0x50
   195a0:	beq	196bc <__assert_fail@plt+0x811c>
   195a4:	mov	r3, #8
   195a8:	sub	r2, r4, r2
   195ac:	mov	r0, r5
   195b0:	str	r3, [sp]
   195b4:	add	r2, r2, #1
   195b8:	add	r1, sp, #80	; 0x50
   195bc:	mvn	r3, #-2147483648	; 0x80000000
   195c0:	bl	1c0b4 <__assert_fail@plt+0xab14>
   195c4:	mov	r5, r0
   195c8:	str	r0, [r6]
   195cc:	ldr	r0, [r6, #4]
   195d0:	ldr	r2, [sp, #80]	; 0x50
   195d4:	mov	r1, #0
   195d8:	sub	r2, r2, r0
   195dc:	add	r0, r5, r0, lsl #3
   195e0:	lsl	r2, r2, #3
   195e4:	bl	11444 <memset@plt>
   195e8:	ldr	r3, [sp, #80]	; 0x50
   195ec:	str	r3, [r6, #4]
   195f0:	add	fp, r5, r4, lsl #3
   195f4:	ldr	r1, [sp, #36]	; 0x24
   195f8:	ldr	r8, [r5, r4, lsl #3]
   195fc:	ldr	r6, [fp, #4]
   19600:	ldr	r2, [sp, #72]	; 0x48
   19604:	ldr	r3, [sp, #32]
   19608:	ldr	ip, [sp, #76]	; 0x4c
   1960c:	orr	r1, r1, #1
   19610:	add	sl, sp, #40	; 0x28
   19614:	str	r1, [sp, #28]
   19618:	str	r1, [sp, #4]
   1961c:	str	r2, [sp, #12]
   19620:	str	r3, [sp]
   19624:	mov	r0, r6
   19628:	mov	r1, r8
   1962c:	str	ip, [sp, #16]
   19630:	str	sl, [sp, #8]
   19634:	mvn	r3, #0
   19638:	mov	r2, r9
   1963c:	bl	17564 <__assert_fail@plt+0x5fc4>
   19640:	cmp	r8, r0
   19644:	bhi	196a8 <__assert_fail@plt+0x8108>
   19648:	ldr	r3, [pc, #164]	; 196f4 <__assert_fail@plt+0x8154>
   1964c:	add	r8, r0, #1
   19650:	cmp	r6, r3
   19654:	str	r8, [r5, r4, lsl #3]
   19658:	beq	19664 <__assert_fail@plt+0x80c4>
   1965c:	mov	r0, r6
   19660:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   19664:	mov	r0, r8
   19668:	bl	1be98 <__assert_fail@plt+0xa8f8>
   1966c:	ldr	lr, [sp, #76]	; 0x4c
   19670:	ldr	r3, [sp, #32]
   19674:	ldr	ip, [sp, #72]	; 0x48
   19678:	ldr	r4, [sp, #28]
   1967c:	mov	r2, r9
   19680:	mov	r1, r8
   19684:	str	r0, [fp, #4]
   19688:	str	r3, [sp]
   1968c:	str	sl, [sp, #8]
   19690:	str	r4, [sp, #4]
   19694:	str	lr, [sp, #16]
   19698:	str	ip, [sp, #12]
   1969c:	mvn	r3, #0
   196a0:	mov	r6, r0
   196a4:	bl	17564 <__assert_fail@plt+0x5fc4>
   196a8:	ldr	r3, [sp, #24]
   196ac:	mov	r0, r6
   196b0:	str	r3, [r7]
   196b4:	add	sp, sp, #132	; 0x84
   196b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196bc:	mov	r3, #8
   196c0:	sub	r2, r4, r2
   196c4:	add	r1, sp, #80	; 0x50
   196c8:	str	r3, [sp]
   196cc:	add	r2, r2, #1
   196d0:	mvn	r3, #-2147483648	; 0x80000000
   196d4:	bl	1c0b4 <__assert_fail@plt+0xab14>
   196d8:	mov	r5, r0
   196dc:	ldm	r8, {r0, r1}
   196e0:	str	r5, [r6]
   196e4:	stm	r5, {r0, r1}
   196e8:	b	195cc <__assert_fail@plt+0x802c>
   196ec:	bl	11570 <abort@plt>
   196f0:	andeq	r0, r3, r8, ror r1
   196f4:	andeq	r0, r3, r8, ror #5
   196f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196fc:	sub	sp, sp, #132	; 0x84
   19700:	mov	r5, r1
   19704:	mov	r4, r0
   19708:	mov	r9, r2
   1970c:	add	r0, sp, #80	; 0x50
   19710:	mov	r2, #48	; 0x30
   19714:	mov	r1, #0
   19718:	mov	sl, r3
   1971c:	bl	11444 <memset@plt>
   19720:	cmp	r5, #10
   19724:	beq	198e0 <__assert_fail@plt+0x8340>
   19728:	add	lr, sp, #80	; 0x50
   1972c:	str	r5, [sp, #80]	; 0x50
   19730:	ldm	lr!, {r0, r1, r2, r3}
   19734:	add	ip, sp, #32
   19738:	ldr	r6, [pc, #420]	; 198e4 <__assert_fail@plt+0x8344>
   1973c:	stmia	ip!, {r0, r1, r2, r3}
   19740:	ldm	lr!, {r0, r1, r2, r3}
   19744:	stmia	ip!, {r0, r1, r2, r3}
   19748:	ldm	lr, {r0, r1, r2, r3}
   1974c:	stm	ip, {r0, r1, r2, r3}
   19750:	bl	11420 <__errno_location@plt>
   19754:	cmn	r4, #-2147483647	; 0x80000001
   19758:	ldr	r5, [r6]
   1975c:	mov	r7, r0
   19760:	movne	r0, #0
   19764:	moveq	r0, #1
   19768:	ldr	r3, [r7]
   1976c:	orrs	r0, r0, r4, lsr #31
   19770:	str	r3, [sp, #24]
   19774:	bne	198e0 <__assert_fail@plt+0x8340>
   19778:	ldr	r2, [r6, #4]
   1977c:	cmp	r4, r2
   19780:	blt	197e0 <__assert_fail@plt+0x8240>
   19784:	add	r8, r6, #8
   19788:	cmp	r5, r8
   1978c:	str	r2, [sp, #80]	; 0x50
   19790:	beq	198b0 <__assert_fail@plt+0x8310>
   19794:	mov	r3, #8
   19798:	sub	r2, r4, r2
   1979c:	mov	r0, r5
   197a0:	str	r3, [sp]
   197a4:	add	r2, r2, #1
   197a8:	add	r1, sp, #80	; 0x50
   197ac:	mvn	r3, #-2147483648	; 0x80000000
   197b0:	bl	1c0b4 <__assert_fail@plt+0xab14>
   197b4:	mov	r5, r0
   197b8:	str	r0, [r6]
   197bc:	ldr	r0, [r6, #4]
   197c0:	ldr	r2, [sp, #80]	; 0x50
   197c4:	mov	r1, #0
   197c8:	sub	r2, r2, r0
   197cc:	add	r0, r5, r0, lsl #3
   197d0:	lsl	r2, r2, #3
   197d4:	bl	11444 <memset@plt>
   197d8:	ldr	r3, [sp, #80]	; 0x50
   197dc:	str	r3, [r6, #4]
   197e0:	add	fp, r5, r4, lsl #3
   197e4:	ldr	r3, [sp, #32]
   197e8:	ldr	r1, [sp, #36]	; 0x24
   197ec:	ldr	r8, [r5, r4, lsl #3]
   197f0:	ldr	r6, [fp, #4]
   197f4:	ldr	r2, [sp, #72]	; 0x48
   197f8:	ldr	ip, [sp, #76]	; 0x4c
   197fc:	orr	r1, r1, #1
   19800:	str	r3, [sp]
   19804:	add	r3, sp, #40	; 0x28
   19808:	str	r1, [sp, #28]
   1980c:	str	r1, [sp, #4]
   19810:	str	r2, [sp, #12]
   19814:	str	r3, [sp, #8]
   19818:	mov	r0, r6
   1981c:	mov	r1, r8
   19820:	str	ip, [sp, #16]
   19824:	mov	r3, sl
   19828:	mov	r2, r9
   1982c:	bl	17564 <__assert_fail@plt+0x5fc4>
   19830:	cmp	r8, r0
   19834:	bhi	1989c <__assert_fail@plt+0x82fc>
   19838:	ldr	r3, [pc, #168]	; 198e8 <__assert_fail@plt+0x8348>
   1983c:	add	r8, r0, #1
   19840:	cmp	r6, r3
   19844:	str	r8, [r5, r4, lsl #3]
   19848:	beq	19854 <__assert_fail@plt+0x82b4>
   1984c:	mov	r0, r6
   19850:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   19854:	mov	r0, r8
   19858:	bl	1be98 <__assert_fail@plt+0xa8f8>
   1985c:	add	lr, sp, #40	; 0x28
   19860:	ldr	ip, [sp, #76]	; 0x4c
   19864:	ldr	r4, [sp, #72]	; 0x48
   19868:	ldr	r5, [sp, #28]
   1986c:	mov	r3, sl
   19870:	mov	r2, r9
   19874:	mov	r1, r8
   19878:	str	r0, [fp, #4]
   1987c:	str	lr, [sp, #8]
   19880:	ldr	lr, [sp, #32]
   19884:	str	r5, [sp, #4]
   19888:	str	ip, [sp, #16]
   1988c:	str	r4, [sp, #12]
   19890:	str	lr, [sp]
   19894:	mov	r6, r0
   19898:	bl	17564 <__assert_fail@plt+0x5fc4>
   1989c:	ldr	r3, [sp, #24]
   198a0:	mov	r0, r6
   198a4:	str	r3, [r7]
   198a8:	add	sp, sp, #132	; 0x84
   198ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198b0:	mov	r3, #8
   198b4:	sub	r2, r4, r2
   198b8:	add	r1, sp, #80	; 0x50
   198bc:	str	r3, [sp]
   198c0:	add	r2, r2, #1
   198c4:	mvn	r3, #-2147483648	; 0x80000000
   198c8:	bl	1c0b4 <__assert_fail@plt+0xab14>
   198cc:	mov	r5, r0
   198d0:	ldm	r8, {r0, r1}
   198d4:	str	r5, [r6]
   198d8:	stm	r5, {r0, r1}
   198dc:	b	197bc <__assert_fail@plt+0x821c>
   198e0:	bl	11570 <abort@plt>
   198e4:	andeq	r0, r3, r8, ror r1
   198e8:	andeq	r0, r3, r8, ror #5
   198ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198f0:	sub	sp, sp, #124	; 0x7c
   198f4:	mov	r4, r0
   198f8:	mov	r9, r1
   198fc:	add	r0, sp, #72	; 0x48
   19900:	mov	r2, #48	; 0x30
   19904:	mov	r1, #0
   19908:	bl	11444 <memset@plt>
   1990c:	cmp	r4, #10
   19910:	beq	19a9c <__assert_fail@plt+0x84fc>
   19914:	add	lr, sp, #72	; 0x48
   19918:	str	r4, [sp, #72]	; 0x48
   1991c:	ldm	lr!, {r0, r1, r2, r3}
   19920:	add	ip, sp, #24
   19924:	ldr	r5, [pc, #372]	; 19aa0 <__assert_fail@plt+0x8500>
   19928:	stmia	ip!, {r0, r1, r2, r3}
   1992c:	ldm	lr!, {r0, r1, r2, r3}
   19930:	stmia	ip!, {r0, r1, r2, r3}
   19934:	ldm	lr, {r0, r1, r2, r3}
   19938:	stm	ip, {r0, r1, r2, r3}
   1993c:	bl	11420 <__errno_location@plt>
   19940:	ldr	r2, [r5, #4]
   19944:	ldr	r4, [r5]
   19948:	cmp	r2, #0
   1994c:	mov	r7, r0
   19950:	ldr	fp, [r0]
   19954:	bgt	199b0 <__assert_fail@plt+0x8410>
   19958:	add	r6, r5, #8
   1995c:	cmp	r4, r6
   19960:	str	r2, [sp, #72]	; 0x48
   19964:	beq	19a6c <__assert_fail@plt+0x84cc>
   19968:	mov	r3, #8
   1996c:	mov	r0, r4
   19970:	str	r3, [sp]
   19974:	rsb	r2, r2, #1
   19978:	add	r1, sp, #72	; 0x48
   1997c:	mvn	r3, #-2147483648	; 0x80000000
   19980:	bl	1c0b4 <__assert_fail@plt+0xab14>
   19984:	mov	r4, r0
   19988:	str	r0, [r5]
   1998c:	ldr	r0, [r5, #4]
   19990:	ldr	r2, [sp, #72]	; 0x48
   19994:	mov	r1, #0
   19998:	sub	r2, r2, r0
   1999c:	add	r0, r4, r0, lsl #3
   199a0:	lsl	r2, r2, #3
   199a4:	bl	11444 <memset@plt>
   199a8:	ldr	r3, [sp, #72]	; 0x48
   199ac:	str	r3, [r5, #4]
   199b0:	ldr	r6, [sp, #28]
   199b4:	ldr	r8, [r4]
   199b8:	ldr	r5, [r4, #4]
   199bc:	ldr	r2, [sp, #64]	; 0x40
   199c0:	ldr	r3, [sp, #24]
   199c4:	ldr	ip, [sp, #68]	; 0x44
   199c8:	orr	r6, r6, #1
   199cc:	add	sl, sp, #32
   199d0:	str	r2, [sp, #12]
   199d4:	str	r3, [sp]
   199d8:	str	r6, [sp, #4]
   199dc:	mov	r1, r8
   199e0:	mov	r0, r5
   199e4:	str	ip, [sp, #16]
   199e8:	str	sl, [sp, #8]
   199ec:	mvn	r3, #0
   199f0:	mov	r2, r9
   199f4:	bl	17564 <__assert_fail@plt+0x5fc4>
   199f8:	cmp	r8, r0
   199fc:	bhi	19a5c <__assert_fail@plt+0x84bc>
   19a00:	ldr	r3, [pc, #156]	; 19aa4 <__assert_fail@plt+0x8504>
   19a04:	add	r8, r0, #1
   19a08:	cmp	r5, r3
   19a0c:	str	r8, [r4]
   19a10:	beq	19a1c <__assert_fail@plt+0x847c>
   19a14:	mov	r0, r5
   19a18:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   19a1c:	mov	r0, r8
   19a20:	bl	1be98 <__assert_fail@plt+0xa8f8>
   19a24:	ldr	lr, [sp, #68]	; 0x44
   19a28:	ldr	r3, [sp, #24]
   19a2c:	ldr	ip, [sp, #64]	; 0x40
   19a30:	mov	r2, r9
   19a34:	mov	r1, r8
   19a38:	str	r0, [r4, #4]
   19a3c:	str	r3, [sp]
   19a40:	str	sl, [sp, #8]
   19a44:	str	r6, [sp, #4]
   19a48:	str	lr, [sp, #16]
   19a4c:	str	ip, [sp, #12]
   19a50:	mvn	r3, #0
   19a54:	mov	r5, r0
   19a58:	bl	17564 <__assert_fail@plt+0x5fc4>
   19a5c:	mov	r0, r5
   19a60:	str	fp, [r7]
   19a64:	add	sp, sp, #124	; 0x7c
   19a68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a6c:	mov	r3, #8
   19a70:	add	r1, sp, #72	; 0x48
   19a74:	str	r3, [sp]
   19a78:	rsb	r2, r2, #1
   19a7c:	mvn	r3, #-2147483648	; 0x80000000
   19a80:	mov	r0, #0
   19a84:	bl	1c0b4 <__assert_fail@plt+0xab14>
   19a88:	mov	r4, r0
   19a8c:	ldm	r6, {r0, r1}
   19a90:	str	r4, [r5]
   19a94:	stm	r4, {r0, r1}
   19a98:	b	1998c <__assert_fail@plt+0x83ec>
   19a9c:	bl	11570 <abort@plt>
   19aa0:	andeq	r0, r3, r8, ror r1
   19aa4:	andeq	r0, r3, r8, ror #5
   19aa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19aac:	sub	sp, sp, #132	; 0x84
   19ab0:	mov	r4, r0
   19ab4:	mov	r9, r1
   19ab8:	mov	sl, r2
   19abc:	add	r0, sp, #80	; 0x50
   19ac0:	mov	r2, #48	; 0x30
   19ac4:	mov	r1, #0
   19ac8:	bl	11444 <memset@plt>
   19acc:	cmp	r4, #10
   19ad0:	beq	19c64 <__assert_fail@plt+0x86c4>
   19ad4:	add	lr, sp, #80	; 0x50
   19ad8:	str	r4, [sp, #80]	; 0x50
   19adc:	ldm	lr!, {r0, r1, r2, r3}
   19ae0:	add	ip, sp, #32
   19ae4:	ldr	r5, [pc, #380]	; 19c68 <__assert_fail@plt+0x86c8>
   19ae8:	stmia	ip!, {r0, r1, r2, r3}
   19aec:	ldm	lr!, {r0, r1, r2, r3}
   19af0:	stmia	ip!, {r0, r1, r2, r3}
   19af4:	ldm	lr, {r0, r1, r2, r3}
   19af8:	stm	ip, {r0, r1, r2, r3}
   19afc:	bl	11420 <__errno_location@plt>
   19b00:	ldr	r2, [r5, #4]
   19b04:	ldr	r4, [r5]
   19b08:	cmp	r2, #0
   19b0c:	ldr	r3, [r0]
   19b10:	mov	r7, r0
   19b14:	str	r3, [sp, #28]
   19b18:	bgt	19b74 <__assert_fail@plt+0x85d4>
   19b1c:	add	r6, r5, #8
   19b20:	cmp	r4, r6
   19b24:	str	r2, [sp, #80]	; 0x50
   19b28:	beq	19c34 <__assert_fail@plt+0x8694>
   19b2c:	mov	r3, #8
   19b30:	mov	r0, r4
   19b34:	str	r3, [sp]
   19b38:	rsb	r2, r2, #1
   19b3c:	add	r1, sp, #80	; 0x50
   19b40:	mvn	r3, #-2147483648	; 0x80000000
   19b44:	bl	1c0b4 <__assert_fail@plt+0xab14>
   19b48:	mov	r4, r0
   19b4c:	str	r0, [r5]
   19b50:	ldr	r0, [r5, #4]
   19b54:	ldr	r2, [sp, #80]	; 0x50
   19b58:	mov	r1, #0
   19b5c:	sub	r2, r2, r0
   19b60:	add	r0, r4, r0, lsl #3
   19b64:	lsl	r2, r2, #3
   19b68:	bl	11444 <memset@plt>
   19b6c:	ldr	r3, [sp, #80]	; 0x50
   19b70:	str	r3, [r5, #4]
   19b74:	ldr	r6, [sp, #36]	; 0x24
   19b78:	ldr	r8, [r4]
   19b7c:	ldr	r5, [r4, #4]
   19b80:	ldr	r2, [sp, #72]	; 0x48
   19b84:	ldr	r3, [sp, #32]
   19b88:	ldr	ip, [sp, #76]	; 0x4c
   19b8c:	orr	r6, r6, #1
   19b90:	add	fp, sp, #40	; 0x28
   19b94:	str	r2, [sp, #12]
   19b98:	str	r3, [sp]
   19b9c:	str	r6, [sp, #4]
   19ba0:	mov	r1, r8
   19ba4:	mov	r0, r5
   19ba8:	str	ip, [sp, #16]
   19bac:	str	fp, [sp, #8]
   19bb0:	mov	r3, sl
   19bb4:	mov	r2, r9
   19bb8:	bl	17564 <__assert_fail@plt+0x5fc4>
   19bbc:	cmp	r8, r0
   19bc0:	bhi	19c20 <__assert_fail@plt+0x8680>
   19bc4:	ldr	r3, [pc, #160]	; 19c6c <__assert_fail@plt+0x86cc>
   19bc8:	add	r8, r0, #1
   19bcc:	cmp	r5, r3
   19bd0:	str	r8, [r4]
   19bd4:	beq	19be0 <__assert_fail@plt+0x8640>
   19bd8:	mov	r0, r5
   19bdc:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   19be0:	mov	r0, r8
   19be4:	bl	1be98 <__assert_fail@plt+0xa8f8>
   19be8:	ldr	ip, [sp, #76]	; 0x4c
   19bec:	ldr	lr, [sp, #32]
   19bf0:	mov	r3, sl
   19bf4:	mov	r2, r9
   19bf8:	mov	r1, r8
   19bfc:	str	r0, [r4, #4]
   19c00:	ldr	r4, [sp, #72]	; 0x48
   19c04:	str	fp, [sp, #8]
   19c08:	str	r6, [sp, #4]
   19c0c:	str	ip, [sp, #16]
   19c10:	str	r4, [sp, #12]
   19c14:	str	lr, [sp]
   19c18:	mov	r5, r0
   19c1c:	bl	17564 <__assert_fail@plt+0x5fc4>
   19c20:	ldr	r3, [sp, #28]
   19c24:	mov	r0, r5
   19c28:	str	r3, [r7]
   19c2c:	add	sp, sp, #132	; 0x84
   19c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c34:	mov	r3, #8
   19c38:	add	r1, sp, #80	; 0x50
   19c3c:	str	r3, [sp]
   19c40:	rsb	r2, r2, #1
   19c44:	mvn	r3, #-2147483648	; 0x80000000
   19c48:	mov	r0, #0
   19c4c:	bl	1c0b4 <__assert_fail@plt+0xab14>
   19c50:	mov	r4, r0
   19c54:	ldm	r6, {r0, r1}
   19c58:	str	r4, [r5]
   19c5c:	stm	r4, {r0, r1}
   19c60:	b	19b50 <__assert_fail@plt+0x85b0>
   19c64:	bl	11570 <abort@plt>
   19c68:	andeq	r0, r3, r8, ror r1
   19c6c:	andeq	r0, r3, r8, ror #5
   19c70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c74:	mov	r4, r2
   19c78:	ldr	lr, [pc, #432]	; 19e30 <__assert_fail@plt+0x8890>
   19c7c:	mov	sl, r0
   19c80:	mov	fp, r1
   19c84:	ldm	lr!, {r0, r1, r2, r3}
   19c88:	sub	sp, sp, #92	; 0x5c
   19c8c:	add	ip, sp, #40	; 0x28
   19c90:	lsr	r7, r4, #5
   19c94:	stmia	ip!, {r0, r1, r2, r3}
   19c98:	add	r6, sp, #48	; 0x30
   19c9c:	ldm	lr!, {r0, r1, r2, r3}
   19ca0:	and	r4, r4, #31
   19ca4:	ldr	r5, [pc, #392]	; 19e34 <__assert_fail@plt+0x8894>
   19ca8:	stmia	ip!, {r0, r1, r2, r3}
   19cac:	ldm	lr, {r0, r1, r2, r3}
   19cb0:	stm	ip, {r0, r1, r2, r3}
   19cb4:	ldr	r2, [r6, r7, lsl #2]
   19cb8:	lsr	r3, r2, r4
   19cbc:	eor	r3, r3, #1
   19cc0:	and	r3, r3, #1
   19cc4:	eor	r4, r2, r3, lsl r4
   19cc8:	str	r4, [r6, r7, lsl #2]
   19ccc:	bl	11420 <__errno_location@plt>
   19cd0:	ldr	r2, [r5, #4]
   19cd4:	ldr	r4, [r5]
   19cd8:	cmp	r2, #0
   19cdc:	ldr	r3, [r0]
   19ce0:	mov	r8, r0
   19ce4:	str	r3, [sp, #28]
   19ce8:	bgt	19d44 <__assert_fail@plt+0x87a4>
   19cec:	add	r7, r5, #8
   19cf0:	cmp	r4, r7
   19cf4:	str	r2, [sp, #36]	; 0x24
   19cf8:	beq	19e00 <__assert_fail@plt+0x8860>
   19cfc:	mov	r3, #8
   19d00:	mov	r0, r4
   19d04:	str	r3, [sp]
   19d08:	rsb	r2, r2, #1
   19d0c:	mvn	r3, #-2147483648	; 0x80000000
   19d10:	add	r1, sp, #36	; 0x24
   19d14:	bl	1c0b4 <__assert_fail@plt+0xab14>
   19d18:	mov	r4, r0
   19d1c:	str	r0, [r5]
   19d20:	ldr	r0, [r5, #4]
   19d24:	ldr	r2, [sp, #36]	; 0x24
   19d28:	mov	r1, #0
   19d2c:	sub	r2, r2, r0
   19d30:	add	r0, r4, r0, lsl #3
   19d34:	lsl	r2, r2, #3
   19d38:	bl	11444 <memset@plt>
   19d3c:	ldr	r3, [sp, #36]	; 0x24
   19d40:	str	r3, [r5, #4]
   19d44:	ldr	r7, [sp, #44]	; 0x2c
   19d48:	ldr	r9, [r4]
   19d4c:	ldr	r5, [r4, #4]
   19d50:	ldr	r2, [sp, #80]	; 0x50
   19d54:	ldr	r3, [sp, #40]	; 0x28
   19d58:	ldr	ip, [sp, #84]	; 0x54
   19d5c:	orr	r7, r7, #1
   19d60:	str	r2, [sp, #12]
   19d64:	str	r3, [sp]
   19d68:	str	r7, [sp, #4]
   19d6c:	str	r6, [sp, #8]
   19d70:	mov	r1, r9
   19d74:	mov	r0, r5
   19d78:	str	ip, [sp, #16]
   19d7c:	mov	r3, fp
   19d80:	mov	r2, sl
   19d84:	bl	17564 <__assert_fail@plt+0x5fc4>
   19d88:	cmp	r9, r0
   19d8c:	bhi	19dec <__assert_fail@plt+0x884c>
   19d90:	ldr	r3, [pc, #160]	; 19e38 <__assert_fail@plt+0x8898>
   19d94:	add	r9, r0, #1
   19d98:	cmp	r5, r3
   19d9c:	str	r9, [r4]
   19da0:	beq	19dac <__assert_fail@plt+0x880c>
   19da4:	mov	r0, r5
   19da8:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   19dac:	mov	r0, r9
   19db0:	bl	1be98 <__assert_fail@plt+0xa8f8>
   19db4:	ldr	ip, [sp, #84]	; 0x54
   19db8:	ldr	lr, [sp, #40]	; 0x28
   19dbc:	mov	r3, fp
   19dc0:	mov	r2, sl
   19dc4:	mov	r1, r9
   19dc8:	str	r0, [r4, #4]
   19dcc:	ldr	r4, [sp, #80]	; 0x50
   19dd0:	str	r6, [sp, #8]
   19dd4:	str	r7, [sp, #4]
   19dd8:	str	ip, [sp, #16]
   19ddc:	str	r4, [sp, #12]
   19de0:	str	lr, [sp]
   19de4:	mov	r5, r0
   19de8:	bl	17564 <__assert_fail@plt+0x5fc4>
   19dec:	ldr	r3, [sp, #28]
   19df0:	mov	r0, r5
   19df4:	str	r3, [r8]
   19df8:	add	sp, sp, #92	; 0x5c
   19dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e00:	mov	r3, #8
   19e04:	str	r3, [sp]
   19e08:	add	r1, sp, #36	; 0x24
   19e0c:	rsb	r2, r2, #1
   19e10:	mvn	r3, #-2147483648	; 0x80000000
   19e14:	mov	r0, #0
   19e18:	bl	1c0b4 <__assert_fail@plt+0xab14>
   19e1c:	mov	r4, r0
   19e20:	ldm	r7, {r0, r1}
   19e24:	str	r4, [r5]
   19e28:	stm	r4, {r0, r1}
   19e2c:	b	19d20 <__assert_fail@plt+0x8780>
   19e30:			; <UNDEFINED> instruction: 0x000302b8
   19e34:	andeq	r0, r3, r8, ror r1
   19e38:	andeq	r0, r3, r8, ror #5
   19e3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e40:	mov	r4, r1
   19e44:	ldr	lr, [pc, #420]	; 19ff0 <__assert_fail@plt+0x8a50>
   19e48:	mov	r6, r0
   19e4c:	sub	sp, sp, #84	; 0x54
   19e50:	ldm	lr!, {r0, r1, r2, r3}
   19e54:	add	ip, sp, #32
   19e58:	lsr	r8, r4, #5
   19e5c:	add	r5, sp, #40	; 0x28
   19e60:	stmia	ip!, {r0, r1, r2, r3}
   19e64:	and	r4, r4, #31
   19e68:	ldm	lr!, {r0, r1, r2, r3}
   19e6c:	ldr	r7, [pc, #384]	; 19ff4 <__assert_fail@plt+0x8a54>
   19e70:	stmia	ip!, {r0, r1, r2, r3}
   19e74:	ldm	lr, {r0, r1, r2, r3}
   19e78:	stm	ip, {r0, r1, r2, r3}
   19e7c:	ldr	r2, [r5, r8, lsl #2]
   19e80:	lsr	r3, r2, r4
   19e84:	eor	r3, r3, #1
   19e88:	and	r3, r3, #1
   19e8c:	eor	r4, r2, r3, lsl r4
   19e90:	str	r4, [r5, r8, lsl #2]
   19e94:	bl	11420 <__errno_location@plt>
   19e98:	ldr	r2, [r7, #4]
   19e9c:	ldr	r4, [r7]
   19ea0:	cmp	r2, #0
   19ea4:	mov	r9, r0
   19ea8:	ldr	sl, [r0]
   19eac:	bgt	19f08 <__assert_fail@plt+0x8968>
   19eb0:	add	r8, r7, #8
   19eb4:	cmp	r4, r8
   19eb8:	str	r2, [sp, #28]
   19ebc:	beq	19fc0 <__assert_fail@plt+0x8a20>
   19ec0:	mov	r3, #8
   19ec4:	mov	r0, r4
   19ec8:	str	r3, [sp]
   19ecc:	rsb	r2, r2, #1
   19ed0:	mvn	r3, #-2147483648	; 0x80000000
   19ed4:	add	r1, sp, #28
   19ed8:	bl	1c0b4 <__assert_fail@plt+0xab14>
   19edc:	mov	r4, r0
   19ee0:	str	r0, [r7]
   19ee4:	ldr	r0, [r7, #4]
   19ee8:	ldr	r2, [sp, #28]
   19eec:	mov	r1, #0
   19ef0:	sub	r2, r2, r0
   19ef4:	add	r0, r4, r0, lsl #3
   19ef8:	lsl	r2, r2, #3
   19efc:	bl	11444 <memset@plt>
   19f00:	ldr	r3, [sp, #28]
   19f04:	str	r3, [r7, #4]
   19f08:	ldr	r8, [sp, #36]	; 0x24
   19f0c:	ldr	fp, [r4]
   19f10:	ldr	r7, [r4, #4]
   19f14:	ldr	r2, [sp, #72]	; 0x48
   19f18:	ldr	r3, [sp, #32]
   19f1c:	ldr	ip, [sp, #76]	; 0x4c
   19f20:	orr	r8, r8, #1
   19f24:	str	r2, [sp, #12]
   19f28:	str	r3, [sp]
   19f2c:	str	r8, [sp, #4]
   19f30:	str	r5, [sp, #8]
   19f34:	mov	r1, fp
   19f38:	mov	r0, r7
   19f3c:	str	ip, [sp, #16]
   19f40:	mvn	r3, #0
   19f44:	mov	r2, r6
   19f48:	bl	17564 <__assert_fail@plt+0x5fc4>
   19f4c:	cmp	fp, r0
   19f50:	bhi	19fb0 <__assert_fail@plt+0x8a10>
   19f54:	ldr	r3, [pc, #156]	; 19ff8 <__assert_fail@plt+0x8a58>
   19f58:	add	fp, r0, #1
   19f5c:	cmp	r7, r3
   19f60:	str	fp, [r4]
   19f64:	beq	19f70 <__assert_fail@plt+0x89d0>
   19f68:	mov	r0, r7
   19f6c:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   19f70:	mov	r0, fp
   19f74:	bl	1be98 <__assert_fail@plt+0xa8f8>
   19f78:	ldr	lr, [sp, #76]	; 0x4c
   19f7c:	ldr	r3, [sp, #32]
   19f80:	ldr	ip, [sp, #72]	; 0x48
   19f84:	mov	r2, r6
   19f88:	mov	r1, fp
   19f8c:	str	r0, [r4, #4]
   19f90:	str	r3, [sp]
   19f94:	str	r5, [sp, #8]
   19f98:	str	r8, [sp, #4]
   19f9c:	str	lr, [sp, #16]
   19fa0:	str	ip, [sp, #12]
   19fa4:	mvn	r3, #0
   19fa8:	mov	r7, r0
   19fac:	bl	17564 <__assert_fail@plt+0x5fc4>
   19fb0:	mov	r0, r7
   19fb4:	str	sl, [r9]
   19fb8:	add	sp, sp, #84	; 0x54
   19fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fc0:	mov	r3, #8
   19fc4:	str	r3, [sp]
   19fc8:	add	r1, sp, #28
   19fcc:	rsb	r2, r2, #1
   19fd0:	mvn	r3, #-2147483648	; 0x80000000
   19fd4:	mov	r0, #0
   19fd8:	bl	1c0b4 <__assert_fail@plt+0xab14>
   19fdc:	mov	r4, r0
   19fe0:	ldm	r8, {r0, r1}
   19fe4:	str	r4, [r7]
   19fe8:	stm	r4, {r0, r1}
   19fec:	b	19ee4 <__assert_fail@plt+0x8944>
   19ff0:			; <UNDEFINED> instruction: 0x000302b8
   19ff4:	andeq	r0, r3, r8, ror r1
   19ff8:	andeq	r0, r3, r8, ror #5
   19ffc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a000:	mov	r6, r0
   1a004:	ldr	lr, [pc, #404]	; 1a1a0 <__assert_fail@plt+0x8c00>
   1a008:	sub	sp, sp, #84	; 0x54
   1a00c:	add	ip, sp, #32
   1a010:	ldm	lr!, {r0, r1, r2, r3}
   1a014:	ldr	r5, [pc, #392]	; 1a1a4 <__assert_fail@plt+0x8c04>
   1a018:	stmia	ip!, {r0, r1, r2, r3}
   1a01c:	ldm	lr!, {r0, r1, r2, r3}
   1a020:	ldr	r4, [sp, #44]	; 0x2c
   1a024:	stmia	ip!, {r0, r1, r2, r3}
   1a028:	ldm	lr, {r0, r1, r2, r3}
   1a02c:	mvn	lr, r4
   1a030:	and	lr, lr, #67108864	; 0x4000000
   1a034:	eor	lr, lr, r4
   1a038:	stm	ip, {r0, r1, r2, r3}
   1a03c:	str	lr, [sp, #44]	; 0x2c
   1a040:	bl	11420 <__errno_location@plt>
   1a044:	ldr	r2, [r5, #4]
   1a048:	ldr	r4, [r5]
   1a04c:	cmp	r2, #0
   1a050:	mov	r8, r0
   1a054:	ldr	sl, [r0]
   1a058:	bgt	1a0b4 <__assert_fail@plt+0x8b14>
   1a05c:	add	r7, r5, #8
   1a060:	cmp	r4, r7
   1a064:	str	r2, [sp, #28]
   1a068:	beq	1a170 <__assert_fail@plt+0x8bd0>
   1a06c:	mov	r3, #8
   1a070:	mov	r0, r4
   1a074:	str	r3, [sp]
   1a078:	rsb	r2, r2, #1
   1a07c:	mvn	r3, #-2147483648	; 0x80000000
   1a080:	add	r1, sp, #28
   1a084:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1a088:	mov	r4, r0
   1a08c:	str	r0, [r5]
   1a090:	ldr	r0, [r5, #4]
   1a094:	ldr	r2, [sp, #28]
   1a098:	mov	r1, #0
   1a09c:	sub	r2, r2, r0
   1a0a0:	add	r0, r4, r0, lsl #3
   1a0a4:	lsl	r2, r2, #3
   1a0a8:	bl	11444 <memset@plt>
   1a0ac:	ldr	r3, [sp, #28]
   1a0b0:	str	r3, [r5, #4]
   1a0b4:	ldr	r7, [sp, #36]	; 0x24
   1a0b8:	ldr	r9, [r4]
   1a0bc:	ldr	r5, [r4, #4]
   1a0c0:	ldr	r2, [sp, #72]	; 0x48
   1a0c4:	ldr	r3, [sp, #32]
   1a0c8:	ldr	ip, [sp, #76]	; 0x4c
   1a0cc:	orr	r7, r7, #1
   1a0d0:	add	fp, sp, #40	; 0x28
   1a0d4:	str	r2, [sp, #12]
   1a0d8:	str	r3, [sp]
   1a0dc:	str	r7, [sp, #4]
   1a0e0:	mov	r1, r9
   1a0e4:	mov	r0, r5
   1a0e8:	str	ip, [sp, #16]
   1a0ec:	str	fp, [sp, #8]
   1a0f0:	mvn	r3, #0
   1a0f4:	mov	r2, r6
   1a0f8:	bl	17564 <__assert_fail@plt+0x5fc4>
   1a0fc:	cmp	r9, r0
   1a100:	bhi	1a160 <__assert_fail@plt+0x8bc0>
   1a104:	ldr	r3, [pc, #156]	; 1a1a8 <__assert_fail@plt+0x8c08>
   1a108:	add	r9, r0, #1
   1a10c:	cmp	r5, r3
   1a110:	str	r9, [r4]
   1a114:	beq	1a120 <__assert_fail@plt+0x8b80>
   1a118:	mov	r0, r5
   1a11c:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   1a120:	mov	r0, r9
   1a124:	bl	1be98 <__assert_fail@plt+0xa8f8>
   1a128:	ldr	lr, [sp, #76]	; 0x4c
   1a12c:	ldr	r3, [sp, #32]
   1a130:	ldr	ip, [sp, #72]	; 0x48
   1a134:	mov	r2, r6
   1a138:	mov	r1, r9
   1a13c:	str	r0, [r4, #4]
   1a140:	str	r3, [sp]
   1a144:	str	fp, [sp, #8]
   1a148:	str	r7, [sp, #4]
   1a14c:	str	lr, [sp, #16]
   1a150:	str	ip, [sp, #12]
   1a154:	mvn	r3, #0
   1a158:	mov	r5, r0
   1a15c:	bl	17564 <__assert_fail@plt+0x5fc4>
   1a160:	mov	r0, r5
   1a164:	str	sl, [r8]
   1a168:	add	sp, sp, #84	; 0x54
   1a16c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a170:	mov	r3, #8
   1a174:	str	r3, [sp]
   1a178:	add	r1, sp, #28
   1a17c:	rsb	r2, r2, #1
   1a180:	mvn	r3, #-2147483648	; 0x80000000
   1a184:	mov	r0, #0
   1a188:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1a18c:	mov	r4, r0
   1a190:	ldm	r7, {r0, r1}
   1a194:	str	r4, [r5]
   1a198:	stm	r4, {r0, r1}
   1a19c:	b	1a090 <__assert_fail@plt+0x8af0>
   1a1a0:			; <UNDEFINED> instruction: 0x000302b8
   1a1a4:	andeq	r0, r3, r8, ror r1
   1a1a8:	andeq	r0, r3, r8, ror #5
   1a1ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1b0:	mov	r9, r0
   1a1b4:	ldr	lr, [pc, #416]	; 1a35c <__assert_fail@plt+0x8dbc>
   1a1b8:	mov	sl, r1
   1a1bc:	sub	sp, sp, #92	; 0x5c
   1a1c0:	ldm	lr!, {r0, r1, r2, r3}
   1a1c4:	add	ip, sp, #40	; 0x28
   1a1c8:	ldr	r5, [pc, #400]	; 1a360 <__assert_fail@plt+0x8dc0>
   1a1cc:	stmia	ip!, {r0, r1, r2, r3}
   1a1d0:	ldm	lr!, {r0, r1, r2, r3}
   1a1d4:	ldr	r4, [sp, #52]	; 0x34
   1a1d8:	stmia	ip!, {r0, r1, r2, r3}
   1a1dc:	ldm	lr, {r0, r1, r2, r3}
   1a1e0:	mvn	lr, r4
   1a1e4:	and	lr, lr, #67108864	; 0x4000000
   1a1e8:	eor	lr, lr, r4
   1a1ec:	stm	ip, {r0, r1, r2, r3}
   1a1f0:	str	lr, [sp, #52]	; 0x34
   1a1f4:	bl	11420 <__errno_location@plt>
   1a1f8:	ldr	r2, [r5, #4]
   1a1fc:	ldr	r4, [r5]
   1a200:	cmp	r2, #0
   1a204:	ldr	r3, [r0]
   1a208:	mov	r7, r0
   1a20c:	str	r3, [sp, #28]
   1a210:	bgt	1a26c <__assert_fail@plt+0x8ccc>
   1a214:	add	r6, r5, #8
   1a218:	cmp	r4, r6
   1a21c:	str	r2, [sp, #36]	; 0x24
   1a220:	beq	1a32c <__assert_fail@plt+0x8d8c>
   1a224:	mov	r3, #8
   1a228:	mov	r0, r4
   1a22c:	str	r3, [sp]
   1a230:	rsb	r2, r2, #1
   1a234:	mvn	r3, #-2147483648	; 0x80000000
   1a238:	add	r1, sp, #36	; 0x24
   1a23c:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1a240:	mov	r4, r0
   1a244:	str	r0, [r5]
   1a248:	ldr	r0, [r5, #4]
   1a24c:	ldr	r2, [sp, #36]	; 0x24
   1a250:	mov	r1, #0
   1a254:	sub	r2, r2, r0
   1a258:	add	r0, r4, r0, lsl #3
   1a25c:	lsl	r2, r2, #3
   1a260:	bl	11444 <memset@plt>
   1a264:	ldr	r3, [sp, #36]	; 0x24
   1a268:	str	r3, [r5, #4]
   1a26c:	ldr	r6, [sp, #44]	; 0x2c
   1a270:	ldr	r8, [r4]
   1a274:	ldr	r5, [r4, #4]
   1a278:	ldr	r2, [sp, #80]	; 0x50
   1a27c:	ldr	r3, [sp, #40]	; 0x28
   1a280:	ldr	ip, [sp, #84]	; 0x54
   1a284:	orr	r6, r6, #1
   1a288:	add	fp, sp, #48	; 0x30
   1a28c:	str	r2, [sp, #12]
   1a290:	str	r3, [sp]
   1a294:	str	r6, [sp, #4]
   1a298:	mov	r1, r8
   1a29c:	mov	r0, r5
   1a2a0:	str	ip, [sp, #16]
   1a2a4:	str	fp, [sp, #8]
   1a2a8:	mov	r3, sl
   1a2ac:	mov	r2, r9
   1a2b0:	bl	17564 <__assert_fail@plt+0x5fc4>
   1a2b4:	cmp	r8, r0
   1a2b8:	bhi	1a318 <__assert_fail@plt+0x8d78>
   1a2bc:	ldr	r3, [pc, #160]	; 1a364 <__assert_fail@plt+0x8dc4>
   1a2c0:	add	r8, r0, #1
   1a2c4:	cmp	r5, r3
   1a2c8:	str	r8, [r4]
   1a2cc:	beq	1a2d8 <__assert_fail@plt+0x8d38>
   1a2d0:	mov	r0, r5
   1a2d4:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   1a2d8:	mov	r0, r8
   1a2dc:	bl	1be98 <__assert_fail@plt+0xa8f8>
   1a2e0:	ldr	ip, [sp, #84]	; 0x54
   1a2e4:	ldr	lr, [sp, #40]	; 0x28
   1a2e8:	mov	r3, sl
   1a2ec:	mov	r2, r9
   1a2f0:	mov	r1, r8
   1a2f4:	str	r0, [r4, #4]
   1a2f8:	ldr	r4, [sp, #80]	; 0x50
   1a2fc:	str	fp, [sp, #8]
   1a300:	str	r6, [sp, #4]
   1a304:	str	ip, [sp, #16]
   1a308:	str	r4, [sp, #12]
   1a30c:	str	lr, [sp]
   1a310:	mov	r5, r0
   1a314:	bl	17564 <__assert_fail@plt+0x5fc4>
   1a318:	ldr	r3, [sp, #28]
   1a31c:	mov	r0, r5
   1a320:	str	r3, [r7]
   1a324:	add	sp, sp, #92	; 0x5c
   1a328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a32c:	mov	r3, #8
   1a330:	str	r3, [sp]
   1a334:	add	r1, sp, #36	; 0x24
   1a338:	rsb	r2, r2, #1
   1a33c:	mvn	r3, #-2147483648	; 0x80000000
   1a340:	mov	r0, #0
   1a344:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1a348:	mov	r4, r0
   1a34c:	ldm	r6, {r0, r1}
   1a350:	str	r4, [r5]
   1a354:	stm	r4, {r0, r1}
   1a358:	b	1a248 <__assert_fail@plt+0x8ca8>
   1a35c:			; <UNDEFINED> instruction: 0x000302b8
   1a360:	andeq	r0, r3, r8, ror r1
   1a364:	andeq	r0, r3, r8, ror #5
   1a368:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a36c:	sub	sp, sp, #180	; 0xb4
   1a370:	mov	r6, r1
   1a374:	mov	r4, r0
   1a378:	mov	r9, r2
   1a37c:	add	r0, sp, #80	; 0x50
   1a380:	mov	r2, #48	; 0x30
   1a384:	mov	r1, #0
   1a388:	bl	11444 <memset@plt>
   1a38c:	cmp	r6, #10
   1a390:	beq	1a570 <__assert_fail@plt+0x8fd0>
   1a394:	add	r5, sp, #80	; 0x50
   1a398:	str	r6, [sp, #80]	; 0x50
   1a39c:	ldm	r5!, {r0, r1, r2, r3}
   1a3a0:	add	ip, sp, #128	; 0x80
   1a3a4:	mov	r7, ip
   1a3a8:	add	lr, sp, #32
   1a3ac:	stmia	ip!, {r0, r1, r2, r3}
   1a3b0:	mov	r8, #67108864	; 0x4000000
   1a3b4:	ldm	r5!, {r0, r1, r2, r3}
   1a3b8:	ldr	r6, [pc, #436]	; 1a574 <__assert_fail@plt+0x8fd4>
   1a3bc:	stmia	ip!, {r0, r1, r2, r3}
   1a3c0:	ldm	r5, {r0, r1, r2, r3}
   1a3c4:	stm	ip, {r0, r1, r2, r3}
   1a3c8:	ldm	r7!, {r0, r1, r2, r3}
   1a3cc:	stmia	lr!, {r0, r1, r2, r3}
   1a3d0:	ldm	r7!, {r0, r1, r2, r3}
   1a3d4:	str	r8, [sp, #44]	; 0x2c
   1a3d8:	stmia	lr!, {r0, r1, r2, r3}
   1a3dc:	ldm	ip, {r0, r1, r2, r3}
   1a3e0:	stm	lr, {r0, r1, r2, r3}
   1a3e4:	bl	11420 <__errno_location@plt>
   1a3e8:	cmn	r4, #-2147483647	; 0x80000001
   1a3ec:	ldr	r5, [r6]
   1a3f0:	mov	r7, r0
   1a3f4:	movne	r0, #0
   1a3f8:	moveq	r0, #1
   1a3fc:	ldr	r3, [r7]
   1a400:	orrs	r0, r0, r4, lsr #31
   1a404:	str	r3, [sp, #24]
   1a408:	bne	1a570 <__assert_fail@plt+0x8fd0>
   1a40c:	ldr	r2, [r6, #4]
   1a410:	cmp	r4, r2
   1a414:	blt	1a474 <__assert_fail@plt+0x8ed4>
   1a418:	add	r8, r6, #8
   1a41c:	cmp	r5, r8
   1a420:	str	r2, [sp, #80]	; 0x50
   1a424:	beq	1a540 <__assert_fail@plt+0x8fa0>
   1a428:	mov	r3, #8
   1a42c:	sub	r2, r4, r2
   1a430:	mov	r0, r5
   1a434:	str	r3, [sp]
   1a438:	add	r2, r2, #1
   1a43c:	add	r1, sp, #80	; 0x50
   1a440:	mvn	r3, #-2147483648	; 0x80000000
   1a444:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1a448:	mov	r5, r0
   1a44c:	str	r0, [r6]
   1a450:	ldr	r0, [r6, #4]
   1a454:	ldr	r2, [sp, #80]	; 0x50
   1a458:	mov	r1, #0
   1a45c:	sub	r2, r2, r0
   1a460:	add	r0, r5, r0, lsl #3
   1a464:	lsl	r2, r2, #3
   1a468:	bl	11444 <memset@plt>
   1a46c:	ldr	r3, [sp, #80]	; 0x50
   1a470:	str	r3, [r6, #4]
   1a474:	add	fp, r5, r4, lsl #3
   1a478:	ldr	r1, [sp, #36]	; 0x24
   1a47c:	ldr	r8, [r5, r4, lsl #3]
   1a480:	ldr	r6, [fp, #4]
   1a484:	ldr	r2, [sp, #72]	; 0x48
   1a488:	ldr	r3, [sp, #32]
   1a48c:	ldr	ip, [sp, #76]	; 0x4c
   1a490:	orr	r1, r1, #1
   1a494:	add	sl, sp, #40	; 0x28
   1a498:	str	r1, [sp, #28]
   1a49c:	str	r1, [sp, #4]
   1a4a0:	str	r2, [sp, #12]
   1a4a4:	str	r3, [sp]
   1a4a8:	mov	r0, r6
   1a4ac:	mov	r1, r8
   1a4b0:	str	ip, [sp, #16]
   1a4b4:	str	sl, [sp, #8]
   1a4b8:	mvn	r3, #0
   1a4bc:	mov	r2, r9
   1a4c0:	bl	17564 <__assert_fail@plt+0x5fc4>
   1a4c4:	cmp	r8, r0
   1a4c8:	bhi	1a52c <__assert_fail@plt+0x8f8c>
   1a4cc:	ldr	r3, [pc, #164]	; 1a578 <__assert_fail@plt+0x8fd8>
   1a4d0:	add	r8, r0, #1
   1a4d4:	cmp	r6, r3
   1a4d8:	str	r8, [r5, r4, lsl #3]
   1a4dc:	beq	1a4e8 <__assert_fail@plt+0x8f48>
   1a4e0:	mov	r0, r6
   1a4e4:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   1a4e8:	mov	r0, r8
   1a4ec:	bl	1be98 <__assert_fail@plt+0xa8f8>
   1a4f0:	ldr	lr, [sp, #76]	; 0x4c
   1a4f4:	ldr	r3, [sp, #32]
   1a4f8:	ldr	ip, [sp, #72]	; 0x48
   1a4fc:	ldr	r4, [sp, #28]
   1a500:	mov	r2, r9
   1a504:	mov	r1, r8
   1a508:	str	r0, [fp, #4]
   1a50c:	str	r3, [sp]
   1a510:	str	sl, [sp, #8]
   1a514:	str	r4, [sp, #4]
   1a518:	str	lr, [sp, #16]
   1a51c:	str	ip, [sp, #12]
   1a520:	mvn	r3, #0
   1a524:	mov	r6, r0
   1a528:	bl	17564 <__assert_fail@plt+0x5fc4>
   1a52c:	ldr	r3, [sp, #24]
   1a530:	mov	r0, r6
   1a534:	str	r3, [r7]
   1a538:	add	sp, sp, #180	; 0xb4
   1a53c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a540:	mov	r3, #8
   1a544:	sub	r2, r4, r2
   1a548:	add	r1, sp, #80	; 0x50
   1a54c:	str	r3, [sp]
   1a550:	add	r2, r2, #1
   1a554:	mvn	r3, #-2147483648	; 0x80000000
   1a558:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1a55c:	mov	r5, r0
   1a560:	ldm	r8, {r0, r1}
   1a564:	str	r5, [r6]
   1a568:	stm	r5, {r0, r1}
   1a56c:	b	1a450 <__assert_fail@plt+0x8eb0>
   1a570:	bl	11570 <abort@plt>
   1a574:	andeq	r0, r3, r8, ror r1
   1a578:	andeq	r0, r3, r8, ror #5
   1a57c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a580:	mov	r7, r1
   1a584:	ldr	lr, [pc, #492]	; 1a778 <__assert_fail@plt+0x91d8>
   1a588:	mov	r8, r2
   1a58c:	mov	r4, r0
   1a590:	mov	fp, r3
   1a594:	ldm	lr!, {r0, r1, r2, r3}
   1a598:	sub	sp, sp, #100	; 0x64
   1a59c:	add	ip, sp, #48	; 0x30
   1a5a0:	mov	sl, #10
   1a5a4:	stmia	ip!, {r0, r1, r2, r3}
   1a5a8:	cmp	r8, #0
   1a5ac:	cmpne	r7, #0
   1a5b0:	ldm	lr!, {r0, r1, r2, r3}
   1a5b4:	str	sl, [sp, #48]	; 0x30
   1a5b8:	stmia	ip!, {r0, r1, r2, r3}
   1a5bc:	ldm	lr, {r0, r1, r2, r3}
   1a5c0:	stm	ip, {r0, r1, r2, r3}
   1a5c4:	beq	1a774 <__assert_fail@plt+0x91d4>
   1a5c8:	str	r7, [sp, #88]	; 0x58
   1a5cc:	str	r8, [sp, #92]	; 0x5c
   1a5d0:	bl	11420 <__errno_location@plt>
   1a5d4:	ldr	r6, [pc, #416]	; 1a77c <__assert_fail@plt+0x91dc>
   1a5d8:	cmn	r4, #-2147483647	; 0x80000001
   1a5dc:	ldr	r5, [r6]
   1a5e0:	mov	r9, r0
   1a5e4:	movne	r0, #0
   1a5e8:	moveq	r0, #1
   1a5ec:	ldr	r3, [r9]
   1a5f0:	orrs	r0, r0, r4, lsr #31
   1a5f4:	str	r3, [sp, #28]
   1a5f8:	bne	1a774 <__assert_fail@plt+0x91d4>
   1a5fc:	ldr	r2, [r6, #4]
   1a600:	cmp	r4, r2
   1a604:	movlt	r3, sl
   1a608:	blt	1a674 <__assert_fail@plt+0x90d4>
   1a60c:	add	r7, r6, #8
   1a610:	cmp	r5, r7
   1a614:	str	r2, [sp, #44]	; 0x2c
   1a618:	beq	1a744 <__assert_fail@plt+0x91a4>
   1a61c:	mov	r3, #8
   1a620:	sub	r2, r4, r2
   1a624:	mov	r0, r5
   1a628:	str	r3, [sp]
   1a62c:	add	r2, r2, #1
   1a630:	mvn	r3, #-2147483648	; 0x80000000
   1a634:	add	r1, sp, #44	; 0x2c
   1a638:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1a63c:	mov	r5, r0
   1a640:	str	r0, [r6]
   1a644:	ldr	r0, [r6, #4]
   1a648:	ldr	r2, [sp, #44]	; 0x2c
   1a64c:	mov	r1, #0
   1a650:	sub	r2, r2, r0
   1a654:	add	r0, r5, r0, lsl #3
   1a658:	lsl	r2, r2, #3
   1a65c:	bl	11444 <memset@plt>
   1a660:	ldr	r3, [sp, #48]	; 0x30
   1a664:	ldr	r7, [sp, #88]	; 0x58
   1a668:	ldr	r8, [sp, #92]	; 0x5c
   1a66c:	ldr	r2, [sp, #44]	; 0x2c
   1a670:	str	r2, [r6, #4]
   1a674:	add	r2, r5, r4, lsl #3
   1a678:	mov	r1, r2
   1a67c:	str	r2, [sp, #32]
   1a680:	ldr	r2, [sp, #52]	; 0x34
   1a684:	ldr	r6, [r1, #4]
   1a688:	ldr	sl, [r5, r4, lsl #3]
   1a68c:	orr	r2, r2, #1
   1a690:	str	r3, [sp]
   1a694:	add	r3, sp, #56	; 0x38
   1a698:	str	r2, [sp, #36]	; 0x24
   1a69c:	str	r2, [sp, #4]
   1a6a0:	str	r3, [sp, #8]
   1a6a4:	mov	r0, r6
   1a6a8:	str	r8, [sp, #16]
   1a6ac:	str	r7, [sp, #12]
   1a6b0:	mov	r1, sl
   1a6b4:	mvn	r3, #0
   1a6b8:	mov	r2, fp
   1a6bc:	bl	17564 <__assert_fail@plt+0x5fc4>
   1a6c0:	cmp	sl, r0
   1a6c4:	bhi	1a730 <__assert_fail@plt+0x9190>
   1a6c8:	ldr	r3, [pc, #176]	; 1a780 <__assert_fail@plt+0x91e0>
   1a6cc:	add	r7, r0, #1
   1a6d0:	cmp	r6, r3
   1a6d4:	str	r7, [r5, r4, lsl #3]
   1a6d8:	beq	1a6e4 <__assert_fail@plt+0x9144>
   1a6dc:	mov	r0, r6
   1a6e0:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   1a6e4:	mov	r0, r7
   1a6e8:	bl	1be98 <__assert_fail@plt+0xa8f8>
   1a6ec:	ldr	r3, [sp, #32]
   1a6f0:	ldr	lr, [sp, #92]	; 0x5c
   1a6f4:	ldr	ip, [sp, #88]	; 0x58
   1a6f8:	ldr	r4, [sp, #36]	; 0x24
   1a6fc:	mov	r2, fp
   1a700:	mov	r1, r7
   1a704:	str	r0, [r3, #4]
   1a708:	add	r3, sp, #56	; 0x38
   1a70c:	str	r3, [sp, #8]
   1a710:	ldr	r3, [sp, #48]	; 0x30
   1a714:	str	r4, [sp, #4]
   1a718:	str	r3, [sp]
   1a71c:	str	lr, [sp, #16]
   1a720:	str	ip, [sp, #12]
   1a724:	mvn	r3, #0
   1a728:	mov	r6, r0
   1a72c:	bl	17564 <__assert_fail@plt+0x5fc4>
   1a730:	ldr	r3, [sp, #28]
   1a734:	mov	r0, r6
   1a738:	str	r3, [r9]
   1a73c:	add	sp, sp, #100	; 0x64
   1a740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a744:	mov	r3, #8
   1a748:	sub	r2, r4, r2
   1a74c:	str	r3, [sp]
   1a750:	add	r1, sp, #44	; 0x2c
   1a754:	add	r2, r2, #1
   1a758:	mvn	r3, #-2147483648	; 0x80000000
   1a75c:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1a760:	mov	r5, r0
   1a764:	ldm	r7, {r0, r1}
   1a768:	str	r5, [r6]
   1a76c:	stm	r5, {r0, r1}
   1a770:	b	1a644 <__assert_fail@plt+0x90a4>
   1a774:	bl	11570 <abort@plt>
   1a778:			; <UNDEFINED> instruction: 0x000302b8
   1a77c:	andeq	r0, r3, r8, ror r1
   1a780:	andeq	r0, r3, r8, ror #5
   1a784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a788:	mov	r7, r1
   1a78c:	ldr	lr, [pc, #492]	; 1a980 <__assert_fail@plt+0x93e0>
   1a790:	mov	r8, r2
   1a794:	mov	r4, r0
   1a798:	mov	fp, r3
   1a79c:	ldm	lr!, {r0, r1, r2, r3}
   1a7a0:	sub	sp, sp, #100	; 0x64
   1a7a4:	add	ip, sp, #48	; 0x30
   1a7a8:	mov	sl, #10
   1a7ac:	stmia	ip!, {r0, r1, r2, r3}
   1a7b0:	cmp	r8, #0
   1a7b4:	cmpne	r7, #0
   1a7b8:	ldm	lr!, {r0, r1, r2, r3}
   1a7bc:	str	sl, [sp, #48]	; 0x30
   1a7c0:	stmia	ip!, {r0, r1, r2, r3}
   1a7c4:	ldm	lr, {r0, r1, r2, r3}
   1a7c8:	stm	ip, {r0, r1, r2, r3}
   1a7cc:	beq	1a97c <__assert_fail@plt+0x93dc>
   1a7d0:	str	r7, [sp, #88]	; 0x58
   1a7d4:	str	r8, [sp, #92]	; 0x5c
   1a7d8:	bl	11420 <__errno_location@plt>
   1a7dc:	ldr	r6, [pc, #416]	; 1a984 <__assert_fail@plt+0x93e4>
   1a7e0:	cmn	r4, #-2147483647	; 0x80000001
   1a7e4:	ldr	r5, [r6]
   1a7e8:	mov	r9, r0
   1a7ec:	movne	r0, #0
   1a7f0:	moveq	r0, #1
   1a7f4:	ldr	r3, [r9]
   1a7f8:	orrs	r0, r0, r4, lsr #31
   1a7fc:	str	r3, [sp, #28]
   1a800:	bne	1a97c <__assert_fail@plt+0x93dc>
   1a804:	ldr	r2, [r6, #4]
   1a808:	cmp	r4, r2
   1a80c:	movlt	r3, sl
   1a810:	blt	1a87c <__assert_fail@plt+0x92dc>
   1a814:	add	r7, r6, #8
   1a818:	cmp	r5, r7
   1a81c:	str	r2, [sp, #44]	; 0x2c
   1a820:	beq	1a94c <__assert_fail@plt+0x93ac>
   1a824:	mov	r3, #8
   1a828:	sub	r2, r4, r2
   1a82c:	mov	r0, r5
   1a830:	str	r3, [sp]
   1a834:	add	r2, r2, #1
   1a838:	mvn	r3, #-2147483648	; 0x80000000
   1a83c:	add	r1, sp, #44	; 0x2c
   1a840:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1a844:	mov	r5, r0
   1a848:	str	r0, [r6]
   1a84c:	ldr	r0, [r6, #4]
   1a850:	ldr	r2, [sp, #44]	; 0x2c
   1a854:	mov	r1, #0
   1a858:	sub	r2, r2, r0
   1a85c:	add	r0, r5, r0, lsl #3
   1a860:	lsl	r2, r2, #3
   1a864:	bl	11444 <memset@plt>
   1a868:	ldr	r3, [sp, #48]	; 0x30
   1a86c:	ldr	r7, [sp, #88]	; 0x58
   1a870:	ldr	r8, [sp, #92]	; 0x5c
   1a874:	ldr	r2, [sp, #44]	; 0x2c
   1a878:	str	r2, [r6, #4]
   1a87c:	add	r2, r5, r4, lsl #3
   1a880:	mov	r1, r2
   1a884:	str	r2, [sp, #32]
   1a888:	ldr	r2, [sp, #52]	; 0x34
   1a88c:	ldr	r6, [r1, #4]
   1a890:	ldr	sl, [r5, r4, lsl #3]
   1a894:	orr	r2, r2, #1
   1a898:	str	r3, [sp]
   1a89c:	add	r3, sp, #56	; 0x38
   1a8a0:	str	r2, [sp, #36]	; 0x24
   1a8a4:	str	r2, [sp, #4]
   1a8a8:	str	r3, [sp, #8]
   1a8ac:	mov	r0, r6
   1a8b0:	str	r8, [sp, #16]
   1a8b4:	str	r7, [sp, #12]
   1a8b8:	mov	r1, sl
   1a8bc:	ldr	r3, [sp, #136]	; 0x88
   1a8c0:	mov	r2, fp
   1a8c4:	bl	17564 <__assert_fail@plt+0x5fc4>
   1a8c8:	cmp	sl, r0
   1a8cc:	bhi	1a938 <__assert_fail@plt+0x9398>
   1a8d0:	ldr	r3, [pc, #176]	; 1a988 <__assert_fail@plt+0x93e8>
   1a8d4:	add	r7, r0, #1
   1a8d8:	cmp	r6, r3
   1a8dc:	str	r7, [r5, r4, lsl #3]
   1a8e0:	beq	1a8ec <__assert_fail@plt+0x934c>
   1a8e4:	mov	r0, r6
   1a8e8:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   1a8ec:	mov	r0, r7
   1a8f0:	bl	1be98 <__assert_fail@plt+0xa8f8>
   1a8f4:	ldr	r3, [sp, #32]
   1a8f8:	ldr	lr, [sp, #92]	; 0x5c
   1a8fc:	ldr	ip, [sp, #88]	; 0x58
   1a900:	ldr	r4, [sp, #36]	; 0x24
   1a904:	mov	r2, fp
   1a908:	mov	r1, r7
   1a90c:	str	r0, [r3, #4]
   1a910:	add	r3, sp, #56	; 0x38
   1a914:	str	r3, [sp, #8]
   1a918:	ldr	r3, [sp, #48]	; 0x30
   1a91c:	str	r4, [sp, #4]
   1a920:	str	r3, [sp]
   1a924:	str	lr, [sp, #16]
   1a928:	str	ip, [sp, #12]
   1a92c:	ldr	r3, [sp, #136]	; 0x88
   1a930:	mov	r6, r0
   1a934:	bl	17564 <__assert_fail@plt+0x5fc4>
   1a938:	ldr	r3, [sp, #28]
   1a93c:	mov	r0, r6
   1a940:	str	r3, [r9]
   1a944:	add	sp, sp, #100	; 0x64
   1a948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a94c:	mov	r3, #8
   1a950:	sub	r2, r4, r2
   1a954:	str	r3, [sp]
   1a958:	add	r1, sp, #44	; 0x2c
   1a95c:	add	r2, r2, #1
   1a960:	mvn	r3, #-2147483648	; 0x80000000
   1a964:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1a968:	mov	r5, r0
   1a96c:	ldm	r7, {r0, r1}
   1a970:	str	r5, [r6]
   1a974:	stm	r5, {r0, r1}
   1a978:	b	1a84c <__assert_fail@plt+0x92ac>
   1a97c:	bl	11570 <abort@plt>
   1a980:			; <UNDEFINED> instruction: 0x000302b8
   1a984:	andeq	r0, r3, r8, ror r1
   1a988:	andeq	r0, r3, r8, ror #5
   1a98c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a990:	mov	r5, r0
   1a994:	ldr	lr, [pc, #452]	; 1ab60 <__assert_fail@plt+0x95c0>
   1a998:	mov	r6, r1
   1a99c:	mov	sl, r2
   1a9a0:	ldm	lr!, {r0, r1, r2, r3}
   1a9a4:	sub	sp, sp, #92	; 0x5c
   1a9a8:	add	ip, sp, #40	; 0x28
   1a9ac:	cmp	r6, #0
   1a9b0:	cmpne	r5, #0
   1a9b4:	stmia	ip!, {r0, r1, r2, r3}
   1a9b8:	mov	r9, #10
   1a9bc:	ldm	lr!, {r0, r1, r2, r3}
   1a9c0:	moveq	fp, #1
   1a9c4:	movne	fp, #0
   1a9c8:	str	r9, [sp, #40]	; 0x28
   1a9cc:	stmia	ip!, {r0, r1, r2, r3}
   1a9d0:	ldm	lr, {r0, r1, r2, r3}
   1a9d4:	stm	ip, {r0, r1, r2, r3}
   1a9d8:	beq	1ab5c <__assert_fail@plt+0x95bc>
   1a9dc:	str	r5, [sp, #80]	; 0x50
   1a9e0:	str	r6, [sp, #84]	; 0x54
   1a9e4:	bl	11420 <__errno_location@plt>
   1a9e8:	ldr	r7, [pc, #372]	; 1ab64 <__assert_fail@plt+0x95c4>
   1a9ec:	ldr	r2, [r7, #4]
   1a9f0:	ldr	r4, [r7]
   1a9f4:	cmp	r2, #0
   1a9f8:	ldr	r3, [r0]
   1a9fc:	mov	r8, r0
   1aa00:	str	r3, [sp, #24]
   1aa04:	movgt	r3, r9
   1aa08:	bgt	1aa70 <__assert_fail@plt+0x94d0>
   1aa0c:	add	r5, r7, #8
   1aa10:	cmp	r4, r5
   1aa14:	str	r2, [sp, #36]	; 0x24
   1aa18:	beq	1ab2c <__assert_fail@plt+0x958c>
   1aa1c:	mov	r3, #8
   1aa20:	mov	r0, r4
   1aa24:	str	r3, [sp]
   1aa28:	rsb	r2, r2, #1
   1aa2c:	mvn	r3, #-2147483648	; 0x80000000
   1aa30:	add	r1, sp, #36	; 0x24
   1aa34:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1aa38:	mov	r4, r0
   1aa3c:	str	r0, [r7]
   1aa40:	ldr	r0, [r7, #4]
   1aa44:	ldr	r2, [sp, #36]	; 0x24
   1aa48:	mov	r1, #0
   1aa4c:	sub	r2, r2, r0
   1aa50:	add	r0, r4, r0, lsl #3
   1aa54:	lsl	r2, r2, #3
   1aa58:	bl	11444 <memset@plt>
   1aa5c:	ldr	r3, [sp, #40]	; 0x28
   1aa60:	ldr	r5, [sp, #80]	; 0x50
   1aa64:	ldr	r6, [sp, #84]	; 0x54
   1aa68:	ldr	r2, [sp, #36]	; 0x24
   1aa6c:	str	r2, [r7, #4]
   1aa70:	ldr	r2, [sp, #44]	; 0x2c
   1aa74:	ldr	r9, [r4]
   1aa78:	ldr	r7, [r4, #4]
   1aa7c:	orr	r2, r2, #1
   1aa80:	add	fp, sp, #48	; 0x30
   1aa84:	str	r2, [sp, #28]
   1aa88:	str	r2, [sp, #4]
   1aa8c:	str	r3, [sp]
   1aa90:	str	r6, [sp, #16]
   1aa94:	str	r5, [sp, #12]
   1aa98:	mov	r1, r9
   1aa9c:	mov	r0, r7
   1aaa0:	str	fp, [sp, #8]
   1aaa4:	mvn	r3, #0
   1aaa8:	mov	r2, sl
   1aaac:	bl	17564 <__assert_fail@plt+0x5fc4>
   1aab0:	cmp	r9, r0
   1aab4:	bhi	1ab18 <__assert_fail@plt+0x9578>
   1aab8:	ldr	r3, [pc, #168]	; 1ab68 <__assert_fail@plt+0x95c8>
   1aabc:	add	r5, r0, #1
   1aac0:	cmp	r7, r3
   1aac4:	str	r5, [r4]
   1aac8:	beq	1aad4 <__assert_fail@plt+0x9534>
   1aacc:	mov	r0, r7
   1aad0:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   1aad4:	mov	r0, r5
   1aad8:	bl	1be98 <__assert_fail@plt+0xa8f8>
   1aadc:	ldr	lr, [sp, #84]	; 0x54
   1aae0:	ldr	r3, [sp, #40]	; 0x28
   1aae4:	ldr	ip, [sp, #80]	; 0x50
   1aae8:	mov	r2, sl
   1aaec:	mov	r1, r5
   1aaf0:	str	r0, [r4, #4]
   1aaf4:	ldr	r4, [sp, #28]
   1aaf8:	str	r3, [sp]
   1aafc:	str	fp, [sp, #8]
   1ab00:	str	r4, [sp, #4]
   1ab04:	str	lr, [sp, #16]
   1ab08:	str	ip, [sp, #12]
   1ab0c:	mvn	r3, #0
   1ab10:	mov	r7, r0
   1ab14:	bl	17564 <__assert_fail@plt+0x5fc4>
   1ab18:	ldr	r3, [sp, #24]
   1ab1c:	mov	r0, r7
   1ab20:	str	r3, [r8]
   1ab24:	add	sp, sp, #92	; 0x5c
   1ab28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab2c:	mov	r3, #8
   1ab30:	str	r3, [sp]
   1ab34:	add	r1, sp, #36	; 0x24
   1ab38:	rsb	r2, r2, #1
   1ab3c:	mov	r0, fp
   1ab40:	mvn	r3, #-2147483648	; 0x80000000
   1ab44:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1ab48:	mov	r4, r0
   1ab4c:	ldm	r5, {r0, r1}
   1ab50:	str	r4, [r7]
   1ab54:	stm	r4, {r0, r1}
   1ab58:	b	1aa40 <__assert_fail@plt+0x94a0>
   1ab5c:	bl	11570 <abort@plt>
   1ab60:			; <UNDEFINED> instruction: 0x000302b8
   1ab64:	andeq	r0, r3, r8, ror r1
   1ab68:	andeq	r0, r3, r8, ror #5
   1ab6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab70:	mov	r5, r0
   1ab74:	ldr	lr, [pc, #464]	; 1ad4c <__assert_fail@plt+0x97ac>
   1ab78:	mov	r6, r1
   1ab7c:	mov	sl, r2
   1ab80:	mov	fp, r3
   1ab84:	ldm	lr!, {r0, r1, r2, r3}
   1ab88:	sub	sp, sp, #92	; 0x5c
   1ab8c:	add	ip, sp, #40	; 0x28
   1ab90:	cmp	r6, #0
   1ab94:	cmpne	r5, #0
   1ab98:	stmia	ip!, {r0, r1, r2, r3}
   1ab9c:	moveq	r4, #1
   1aba0:	ldm	lr!, {r0, r1, r2, r3}
   1aba4:	movne	r4, #0
   1aba8:	mov	r9, #10
   1abac:	str	r4, [sp, #28]
   1abb0:	stmia	ip!, {r0, r1, r2, r3}
   1abb4:	ldm	lr, {r0, r1, r2, r3}
   1abb8:	str	r9, [sp, #40]	; 0x28
   1abbc:	stm	ip, {r0, r1, r2, r3}
   1abc0:	beq	1ad48 <__assert_fail@plt+0x97a8>
   1abc4:	str	r5, [sp, #80]	; 0x50
   1abc8:	str	r6, [sp, #84]	; 0x54
   1abcc:	bl	11420 <__errno_location@plt>
   1abd0:	ldr	r7, [pc, #376]	; 1ad50 <__assert_fail@plt+0x97b0>
   1abd4:	ldr	r2, [r7, #4]
   1abd8:	ldr	r4, [r7]
   1abdc:	cmp	r2, #0
   1abe0:	ldr	r3, [r0]
   1abe4:	mov	r8, r0
   1abe8:	str	r3, [sp, #24]
   1abec:	movgt	r3, r9
   1abf0:	bgt	1ac58 <__assert_fail@plt+0x96b8>
   1abf4:	add	r5, r7, #8
   1abf8:	cmp	r4, r5
   1abfc:	str	r2, [sp, #36]	; 0x24
   1ac00:	beq	1ad18 <__assert_fail@plt+0x9778>
   1ac04:	mov	r3, #8
   1ac08:	mov	r0, r4
   1ac0c:	str	r3, [sp]
   1ac10:	rsb	r2, r2, #1
   1ac14:	mvn	r3, #-2147483648	; 0x80000000
   1ac18:	add	r1, sp, #36	; 0x24
   1ac1c:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1ac20:	mov	r4, r0
   1ac24:	str	r0, [r7]
   1ac28:	ldr	r0, [r7, #4]
   1ac2c:	ldr	r2, [sp, #36]	; 0x24
   1ac30:	mov	r1, #0
   1ac34:	sub	r2, r2, r0
   1ac38:	add	r0, r4, r0, lsl #3
   1ac3c:	lsl	r2, r2, #3
   1ac40:	bl	11444 <memset@plt>
   1ac44:	ldr	r3, [sp, #40]	; 0x28
   1ac48:	ldr	r5, [sp, #80]	; 0x50
   1ac4c:	ldr	r6, [sp, #84]	; 0x54
   1ac50:	ldr	r2, [sp, #36]	; 0x24
   1ac54:	str	r2, [r7, #4]
   1ac58:	ldr	r2, [sp, #44]	; 0x2c
   1ac5c:	ldr	r9, [r4]
   1ac60:	ldr	r7, [r4, #4]
   1ac64:	orr	r2, r2, #1
   1ac68:	str	r3, [sp]
   1ac6c:	add	r3, sp, #48	; 0x30
   1ac70:	str	r2, [sp, #28]
   1ac74:	str	r2, [sp, #4]
   1ac78:	str	r3, [sp, #8]
   1ac7c:	str	r6, [sp, #16]
   1ac80:	str	r5, [sp, #12]
   1ac84:	mov	r1, r9
   1ac88:	mov	r0, r7
   1ac8c:	mov	r3, fp
   1ac90:	mov	r2, sl
   1ac94:	bl	17564 <__assert_fail@plt+0x5fc4>
   1ac98:	cmp	r9, r0
   1ac9c:	bhi	1ad04 <__assert_fail@plt+0x9764>
   1aca0:	ldr	r3, [pc, #172]	; 1ad54 <__assert_fail@plt+0x97b4>
   1aca4:	add	r5, r0, #1
   1aca8:	cmp	r7, r3
   1acac:	str	r5, [r4]
   1acb0:	beq	1acbc <__assert_fail@plt+0x971c>
   1acb4:	mov	r0, r7
   1acb8:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   1acbc:	mov	r0, r5
   1acc0:	bl	1be98 <__assert_fail@plt+0xa8f8>
   1acc4:	add	lr, sp, #48	; 0x30
   1acc8:	ldr	ip, [sp, #84]	; 0x54
   1accc:	mov	r1, r5
   1acd0:	ldr	r5, [sp, #28]
   1acd4:	mov	r3, fp
   1acd8:	mov	r2, sl
   1acdc:	str	r0, [r4, #4]
   1ace0:	ldr	r4, [sp, #80]	; 0x50
   1ace4:	str	lr, [sp, #8]
   1ace8:	ldr	lr, [sp, #40]	; 0x28
   1acec:	str	r5, [sp, #4]
   1acf0:	str	ip, [sp, #16]
   1acf4:	str	r4, [sp, #12]
   1acf8:	str	lr, [sp]
   1acfc:	mov	r7, r0
   1ad00:	bl	17564 <__assert_fail@plt+0x5fc4>
   1ad04:	ldr	r3, [sp, #24]
   1ad08:	mov	r0, r7
   1ad0c:	str	r3, [r8]
   1ad10:	add	sp, sp, #92	; 0x5c
   1ad14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad18:	mov	r3, #8
   1ad1c:	str	r3, [sp]
   1ad20:	add	r1, sp, #36	; 0x24
   1ad24:	rsb	r2, r2, #1
   1ad28:	ldr	r0, [sp, #28]
   1ad2c:	mvn	r3, #-2147483648	; 0x80000000
   1ad30:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1ad34:	mov	r4, r0
   1ad38:	ldm	r5, {r0, r1}
   1ad3c:	str	r4, [r7]
   1ad40:	stm	r4, {r0, r1}
   1ad44:	b	1ac28 <__assert_fail@plt+0x9688>
   1ad48:	bl	11570 <abort@plt>
   1ad4c:			; <UNDEFINED> instruction: 0x000302b8
   1ad50:	andeq	r0, r3, r8, ror r1
   1ad54:	andeq	r0, r3, r8, ror #5
   1ad58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad5c:	sub	sp, sp, #52	; 0x34
   1ad60:	mov	r5, r0
   1ad64:	mov	sl, r1
   1ad68:	mov	fp, r2
   1ad6c:	bl	11420 <__errno_location@plt>
   1ad70:	ldr	r4, [pc, #404]	; 1af0c <__assert_fail@plt+0x996c>
   1ad74:	cmn	r5, #-2147483647	; 0x80000001
   1ad78:	ldr	r6, [r4]
   1ad7c:	mov	r8, r0
   1ad80:	movne	r0, #0
   1ad84:	moveq	r0, #1
   1ad88:	ldr	r3, [r8]
   1ad8c:	orrs	r0, r0, r5, lsr #31
   1ad90:	str	r3, [sp, #28]
   1ad94:	bne	1af08 <__assert_fail@plt+0x9968>
   1ad98:	ldr	r2, [r4, #4]
   1ad9c:	cmp	r5, r2
   1ada0:	blt	1ae00 <__assert_fail@plt+0x9860>
   1ada4:	add	r7, r4, #8
   1ada8:	cmp	r6, r7
   1adac:	str	r2, [sp, #44]	; 0x2c
   1adb0:	beq	1aed8 <__assert_fail@plt+0x9938>
   1adb4:	mov	r3, #8
   1adb8:	sub	r2, r5, r2
   1adbc:	mov	r0, r6
   1adc0:	str	r3, [sp]
   1adc4:	add	r2, r2, #1
   1adc8:	mvn	r3, #-2147483648	; 0x80000000
   1adcc:	add	r1, sp, #44	; 0x2c
   1add0:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1add4:	mov	r6, r0
   1add8:	str	r0, [r4]
   1addc:	ldr	r0, [r4, #4]
   1ade0:	ldr	r2, [sp, #44]	; 0x2c
   1ade4:	mov	r1, #0
   1ade8:	sub	r2, r2, r0
   1adec:	add	r0, r6, r0, lsl #3
   1adf0:	lsl	r2, r2, #3
   1adf4:	bl	11444 <memset@plt>
   1adf8:	ldr	r3, [sp, #44]	; 0x2c
   1adfc:	str	r3, [r4, #4]
   1ae00:	ldr	r2, [r4, #56]	; 0x38
   1ae04:	add	r3, r6, r5, lsl #3
   1ae08:	ldr	r1, [r4, #20]
   1ae0c:	ldr	r7, [r3, #4]
   1ae10:	ldr	r9, [r6, r5, lsl #3]
   1ae14:	ldr	ip, [r4, #60]	; 0x3c
   1ae18:	str	r3, [sp, #32]
   1ae1c:	ldr	r3, [r4, #16]
   1ae20:	str	r2, [sp, #12]
   1ae24:	ldr	r2, [pc, #228]	; 1af10 <__assert_fail@plt+0x9970>
   1ae28:	orr	r1, r1, #1
   1ae2c:	str	r1, [sp, #36]	; 0x24
   1ae30:	str	r1, [sp, #4]
   1ae34:	str	r2, [sp, #8]
   1ae38:	str	r3, [sp]
   1ae3c:	mov	r0, r7
   1ae40:	mov	r1, r9
   1ae44:	str	ip, [sp, #16]
   1ae48:	mov	r3, fp
   1ae4c:	mov	r2, sl
   1ae50:	bl	17564 <__assert_fail@plt+0x5fc4>
   1ae54:	cmp	r9, r0
   1ae58:	bhi	1aec4 <__assert_fail@plt+0x9924>
   1ae5c:	ldr	r3, [pc, #176]	; 1af14 <__assert_fail@plt+0x9974>
   1ae60:	add	r9, r0, #1
   1ae64:	cmp	r7, r3
   1ae68:	str	r9, [r6, r5, lsl #3]
   1ae6c:	beq	1ae78 <__assert_fail@plt+0x98d8>
   1ae70:	mov	r0, r7
   1ae74:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   1ae78:	mov	r0, r9
   1ae7c:	bl	1be98 <__assert_fail@plt+0xa8f8>
   1ae80:	ldr	ip, [sp, #32]
   1ae84:	ldr	lr, [r4, #60]	; 0x3c
   1ae88:	ldr	r5, [r4, #56]	; 0x38
   1ae8c:	mov	r3, fp
   1ae90:	mov	r2, sl
   1ae94:	mov	r1, r9
   1ae98:	str	r0, [ip, #4]
   1ae9c:	ldr	ip, [r4, #16]
   1aea0:	ldr	r4, [pc, #104]	; 1af10 <__assert_fail@plt+0x9970>
   1aea4:	str	lr, [sp, #16]
   1aea8:	str	r4, [sp, #8]
   1aeac:	ldr	r4, [sp, #36]	; 0x24
   1aeb0:	str	r5, [sp, #12]
   1aeb4:	str	r4, [sp, #4]
   1aeb8:	str	ip, [sp]
   1aebc:	mov	r7, r0
   1aec0:	bl	17564 <__assert_fail@plt+0x5fc4>
   1aec4:	ldr	r3, [sp, #28]
   1aec8:	mov	r0, r7
   1aecc:	str	r3, [r8]
   1aed0:	add	sp, sp, #52	; 0x34
   1aed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aed8:	mov	r3, #8
   1aedc:	sub	r2, r5, r2
   1aee0:	str	r3, [sp]
   1aee4:	add	r1, sp, #44	; 0x2c
   1aee8:	add	r2, r2, #1
   1aeec:	mvn	r3, #-2147483648	; 0x80000000
   1aef0:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1aef4:	mov	r6, r0
   1aef8:	ldm	r7, {r0, r1}
   1aefc:	str	r6, [r4]
   1af00:	stm	r6, {r0, r1}
   1af04:	b	1addc <__assert_fail@plt+0x983c>
   1af08:	bl	11570 <abort@plt>
   1af0c:	andeq	r0, r3, r8, ror r1
   1af10:	muleq	r3, r0, r1
   1af14:	andeq	r0, r3, r8, ror #5
   1af18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af1c:	sub	sp, sp, #44	; 0x2c
   1af20:	mov	r9, r0
   1af24:	mov	sl, r1
   1af28:	bl	11420 <__errno_location@plt>
   1af2c:	ldr	r4, [pc, #360]	; 1b09c <__assert_fail@plt+0x9afc>
   1af30:	ldr	r2, [r4, #4]
   1af34:	ldr	r5, [r4]
   1af38:	cmp	r2, #0
   1af3c:	ldr	r3, [r0]
   1af40:	mov	r7, r0
   1af44:	str	r3, [sp, #24]
   1af48:	bgt	1afa4 <__assert_fail@plt+0x9a04>
   1af4c:	add	r6, r4, #8
   1af50:	cmp	r5, r6
   1af54:	str	r2, [sp, #36]	; 0x24
   1af58:	beq	1b06c <__assert_fail@plt+0x9acc>
   1af5c:	mov	r3, #8
   1af60:	mov	r0, r5
   1af64:	str	r3, [sp]
   1af68:	rsb	r2, r2, #1
   1af6c:	mvn	r3, #-2147483648	; 0x80000000
   1af70:	add	r1, sp, #36	; 0x24
   1af74:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1af78:	mov	r5, r0
   1af7c:	str	r0, [r4]
   1af80:	ldr	r0, [r4, #4]
   1af84:	ldr	r2, [sp, #36]	; 0x24
   1af88:	mov	r1, #0
   1af8c:	sub	r2, r2, r0
   1af90:	add	r0, r5, r0, lsl #3
   1af94:	lsl	r2, r2, #3
   1af98:	bl	11444 <memset@plt>
   1af9c:	ldr	r3, [sp, #36]	; 0x24
   1afa0:	str	r3, [r4, #4]
   1afa4:	ldr	r1, [r4, #20]
   1afa8:	ldr	r8, [r5]
   1afac:	ldr	r6, [r5, #4]
   1afb0:	ldr	r2, [r4, #56]	; 0x38
   1afb4:	ldr	r3, [r4, #16]
   1afb8:	ldr	ip, [r4, #60]	; 0x3c
   1afbc:	ldr	fp, [pc, #220]	; 1b0a0 <__assert_fail@plt+0x9b00>
   1afc0:	orr	r1, r1, #1
   1afc4:	str	r1, [sp, #28]
   1afc8:	str	r1, [sp, #4]
   1afcc:	str	r2, [sp, #12]
   1afd0:	str	r3, [sp]
   1afd4:	mov	r1, r8
   1afd8:	mov	r0, r6
   1afdc:	str	ip, [sp, #16]
   1afe0:	str	fp, [sp, #8]
   1afe4:	mov	r3, sl
   1afe8:	mov	r2, r9
   1afec:	bl	17564 <__assert_fail@plt+0x5fc4>
   1aff0:	cmp	r8, r0
   1aff4:	bhi	1b058 <__assert_fail@plt+0x9ab8>
   1aff8:	ldr	r3, [pc, #164]	; 1b0a4 <__assert_fail@plt+0x9b04>
   1affc:	add	r8, r0, #1
   1b000:	cmp	r6, r3
   1b004:	str	r8, [r5]
   1b008:	beq	1b014 <__assert_fail@plt+0x9a74>
   1b00c:	mov	r0, r6
   1b010:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   1b014:	mov	r0, r8
   1b018:	bl	1be98 <__assert_fail@plt+0xa8f8>
   1b01c:	ldr	lr, [r4, #60]	; 0x3c
   1b020:	ldr	ip, [r4, #16]
   1b024:	mov	r3, sl
   1b028:	mov	r2, r9
   1b02c:	mov	r1, r8
   1b030:	str	r0, [r5, #4]
   1b034:	ldr	r5, [r4, #56]	; 0x38
   1b038:	ldr	r4, [sp, #28]
   1b03c:	str	fp, [sp, #8]
   1b040:	str	r4, [sp, #4]
   1b044:	str	lr, [sp, #16]
   1b048:	str	r5, [sp, #12]
   1b04c:	str	ip, [sp]
   1b050:	mov	r6, r0
   1b054:	bl	17564 <__assert_fail@plt+0x5fc4>
   1b058:	ldr	r3, [sp, #24]
   1b05c:	mov	r0, r6
   1b060:	str	r3, [r7]
   1b064:	add	sp, sp, #44	; 0x2c
   1b068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b06c:	mov	r3, #8
   1b070:	str	r3, [sp]
   1b074:	add	r1, sp, #36	; 0x24
   1b078:	rsb	r2, r2, #1
   1b07c:	mvn	r3, #-2147483648	; 0x80000000
   1b080:	mov	r0, #0
   1b084:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1b088:	mov	r5, r0
   1b08c:	ldm	r6, {r0, r1}
   1b090:	str	r5, [r4]
   1b094:	stm	r5, {r0, r1}
   1b098:	b	1af80 <__assert_fail@plt+0x99e0>
   1b09c:	andeq	r0, r3, r8, ror r1
   1b0a0:	muleq	r3, r0, r1
   1b0a4:	andeq	r0, r3, r8, ror #5
   1b0a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0ac:	sub	sp, sp, #44	; 0x2c
   1b0b0:	mov	r5, r0
   1b0b4:	mov	sl, r1
   1b0b8:	bl	11420 <__errno_location@plt>
   1b0bc:	ldr	r4, [pc, #396]	; 1b250 <__assert_fail@plt+0x9cb0>
   1b0c0:	cmn	r5, #-2147483647	; 0x80000001
   1b0c4:	ldr	r6, [r4]
   1b0c8:	mov	r8, r0
   1b0cc:	movne	r0, #0
   1b0d0:	moveq	r0, #1
   1b0d4:	ldr	r3, [r8]
   1b0d8:	orrs	r0, r0, r5, lsr #31
   1b0dc:	str	r3, [sp, #24]
   1b0e0:	bne	1b24c <__assert_fail@plt+0x9cac>
   1b0e4:	ldr	r2, [r4, #4]
   1b0e8:	cmp	r5, r2
   1b0ec:	blt	1b14c <__assert_fail@plt+0x9bac>
   1b0f0:	add	r7, r4, #8
   1b0f4:	cmp	r6, r7
   1b0f8:	str	r2, [sp, #36]	; 0x24
   1b0fc:	beq	1b21c <__assert_fail@plt+0x9c7c>
   1b100:	mov	r3, #8
   1b104:	sub	r2, r5, r2
   1b108:	mov	r0, r6
   1b10c:	str	r3, [sp]
   1b110:	add	r2, r2, #1
   1b114:	mvn	r3, #-2147483648	; 0x80000000
   1b118:	add	r1, sp, #36	; 0x24
   1b11c:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1b120:	mov	r6, r0
   1b124:	str	r0, [r4]
   1b128:	ldr	r0, [r4, #4]
   1b12c:	ldr	r2, [sp, #36]	; 0x24
   1b130:	mov	r1, #0
   1b134:	sub	r2, r2, r0
   1b138:	add	r0, r6, r0, lsl #3
   1b13c:	lsl	r2, r2, #3
   1b140:	bl	11444 <memset@plt>
   1b144:	ldr	r3, [sp, #36]	; 0x24
   1b148:	str	r3, [r4, #4]
   1b14c:	ldr	r2, [r4, #56]	; 0x38
   1b150:	add	fp, r6, r5, lsl #3
   1b154:	ldr	r1, [r4, #20]
   1b158:	ldr	r9, [r6, r5, lsl #3]
   1b15c:	ldr	r7, [fp, #4]
   1b160:	ldr	r3, [r4, #16]
   1b164:	ldr	ip, [r4, #60]	; 0x3c
   1b168:	str	r2, [sp, #12]
   1b16c:	ldr	r2, [pc, #224]	; 1b254 <__assert_fail@plt+0x9cb4>
   1b170:	orr	r1, r1, #1
   1b174:	str	r1, [sp, #28]
   1b178:	str	r1, [sp, #4]
   1b17c:	str	r2, [sp, #8]
   1b180:	str	r3, [sp]
   1b184:	mov	r0, r7
   1b188:	mov	r1, r9
   1b18c:	str	ip, [sp, #16]
   1b190:	mvn	r3, #0
   1b194:	mov	r2, sl
   1b198:	bl	17564 <__assert_fail@plt+0x5fc4>
   1b19c:	cmp	r9, r0
   1b1a0:	bhi	1b208 <__assert_fail@plt+0x9c68>
   1b1a4:	ldr	r3, [pc, #172]	; 1b258 <__assert_fail@plt+0x9cb8>
   1b1a8:	add	r9, r0, #1
   1b1ac:	cmp	r7, r3
   1b1b0:	str	r9, [r6, r5, lsl #3]
   1b1b4:	beq	1b1c0 <__assert_fail@plt+0x9c20>
   1b1b8:	mov	r0, r7
   1b1bc:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   1b1c0:	mov	r0, r9
   1b1c4:	bl	1be98 <__assert_fail@plt+0xa8f8>
   1b1c8:	ldr	ip, [r4, #60]	; 0x3c
   1b1cc:	ldr	r3, [r4, #16]
   1b1d0:	ldr	lr, [r4, #56]	; 0x38
   1b1d4:	ldr	r4, [pc, #120]	; 1b254 <__assert_fail@plt+0x9cb4>
   1b1d8:	mov	r2, sl
   1b1dc:	mov	r1, r9
   1b1e0:	str	r0, [fp, #4]
   1b1e4:	str	r4, [sp, #8]
   1b1e8:	ldr	r4, [sp, #28]
   1b1ec:	str	r3, [sp]
   1b1f0:	str	r4, [sp, #4]
   1b1f4:	str	ip, [sp, #16]
   1b1f8:	str	lr, [sp, #12]
   1b1fc:	mvn	r3, #0
   1b200:	mov	r7, r0
   1b204:	bl	17564 <__assert_fail@plt+0x5fc4>
   1b208:	ldr	r3, [sp, #24]
   1b20c:	mov	r0, r7
   1b210:	str	r3, [r8]
   1b214:	add	sp, sp, #44	; 0x2c
   1b218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b21c:	mov	r3, #8
   1b220:	sub	r2, r5, r2
   1b224:	str	r3, [sp]
   1b228:	add	r1, sp, #36	; 0x24
   1b22c:	add	r2, r2, #1
   1b230:	mvn	r3, #-2147483648	; 0x80000000
   1b234:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1b238:	mov	r6, r0
   1b23c:	ldm	r7, {r0, r1}
   1b240:	str	r6, [r4]
   1b244:	stm	r6, {r0, r1}
   1b248:	b	1b128 <__assert_fail@plt+0x9b88>
   1b24c:	bl	11570 <abort@plt>
   1b250:	andeq	r0, r3, r8, ror r1
   1b254:	muleq	r3, r0, r1
   1b258:	andeq	r0, r3, r8, ror #5
   1b25c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b260:	sub	sp, sp, #44	; 0x2c
   1b264:	mov	sl, r0
   1b268:	bl	11420 <__errno_location@plt>
   1b26c:	ldr	r4, [pc, #348]	; 1b3d0 <__assert_fail@plt+0x9e30>
   1b270:	ldr	r2, [r4, #4]
   1b274:	ldr	r5, [r4]
   1b278:	cmp	r2, #0
   1b27c:	ldr	r3, [r0]
   1b280:	mov	r8, r0
   1b284:	str	r3, [sp, #28]
   1b288:	bgt	1b2e4 <__assert_fail@plt+0x9d44>
   1b28c:	add	r6, r4, #8
   1b290:	cmp	r5, r6
   1b294:	str	r2, [sp, #36]	; 0x24
   1b298:	beq	1b3a0 <__assert_fail@plt+0x9e00>
   1b29c:	mov	r3, #8
   1b2a0:	mov	r0, r5
   1b2a4:	str	r3, [sp]
   1b2a8:	rsb	r2, r2, #1
   1b2ac:	mvn	r3, #-2147483648	; 0x80000000
   1b2b0:	add	r1, sp, #36	; 0x24
   1b2b4:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1b2b8:	mov	r5, r0
   1b2bc:	str	r0, [r4]
   1b2c0:	ldr	r0, [r4, #4]
   1b2c4:	ldr	r2, [sp, #36]	; 0x24
   1b2c8:	mov	r1, #0
   1b2cc:	sub	r2, r2, r0
   1b2d0:	add	r0, r5, r0, lsl #3
   1b2d4:	lsl	r2, r2, #3
   1b2d8:	bl	11444 <memset@plt>
   1b2dc:	ldr	r3, [sp, #36]	; 0x24
   1b2e0:	str	r3, [r4, #4]
   1b2e4:	ldr	r7, [r4, #20]
   1b2e8:	ldr	r9, [r5]
   1b2ec:	ldr	r6, [r5, #4]
   1b2f0:	ldr	r2, [r4, #56]	; 0x38
   1b2f4:	ldr	r3, [r4, #16]
   1b2f8:	ldr	ip, [r4, #60]	; 0x3c
   1b2fc:	ldr	fp, [pc, #208]	; 1b3d4 <__assert_fail@plt+0x9e34>
   1b300:	orr	r7, r7, #1
   1b304:	str	r2, [sp, #12]
   1b308:	str	r3, [sp]
   1b30c:	str	r7, [sp, #4]
   1b310:	mov	r1, r9
   1b314:	mov	r0, r6
   1b318:	str	ip, [sp, #16]
   1b31c:	str	fp, [sp, #8]
   1b320:	mvn	r3, #0
   1b324:	mov	r2, sl
   1b328:	bl	17564 <__assert_fail@plt+0x5fc4>
   1b32c:	cmp	r9, r0
   1b330:	bhi	1b38c <__assert_fail@plt+0x9dec>
   1b334:	ldr	r3, [pc, #156]	; 1b3d8 <__assert_fail@plt+0x9e38>
   1b338:	add	r9, r0, #1
   1b33c:	cmp	r6, r3
   1b340:	str	r9, [r5]
   1b344:	beq	1b350 <__assert_fail@plt+0x9db0>
   1b348:	mov	r0, r6
   1b34c:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   1b350:	mov	r0, r9
   1b354:	bl	1be98 <__assert_fail@plt+0xa8f8>
   1b358:	ldr	ip, [r4, #60]	; 0x3c
   1b35c:	ldr	r3, [r4, #16]
   1b360:	ldr	lr, [r4, #56]	; 0x38
   1b364:	mov	r2, sl
   1b368:	mov	r1, r9
   1b36c:	str	r0, [r5, #4]
   1b370:	str	r3, [sp]
   1b374:	stmib	sp, {r7, fp}
   1b378:	str	ip, [sp, #16]
   1b37c:	str	lr, [sp, #12]
   1b380:	mvn	r3, #0
   1b384:	mov	r6, r0
   1b388:	bl	17564 <__assert_fail@plt+0x5fc4>
   1b38c:	ldr	r3, [sp, #28]
   1b390:	mov	r0, r6
   1b394:	str	r3, [r8]
   1b398:	add	sp, sp, #44	; 0x2c
   1b39c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3a0:	mov	r3, #8
   1b3a4:	str	r3, [sp]
   1b3a8:	add	r1, sp, #36	; 0x24
   1b3ac:	rsb	r2, r2, #1
   1b3b0:	mvn	r3, #-2147483648	; 0x80000000
   1b3b4:	mov	r0, #0
   1b3b8:	bl	1c0b4 <__assert_fail@plt+0xab14>
   1b3bc:	mov	r5, r0
   1b3c0:	ldm	r6, {r0, r1}
   1b3c4:	str	r5, [r4]
   1b3c8:	stm	r5, {r0, r1}
   1b3cc:	b	1b2c0 <__assert_fail@plt+0x9d20>
   1b3d0:	andeq	r0, r3, r8, ror r1
   1b3d4:	muleq	r3, r0, r1
   1b3d8:	andeq	r0, r3, r8, ror #5
   1b3dc:	push	{r4, r5, r6, r7, r8, lr}
   1b3e0:	mov	r8, r0
   1b3e4:	ldr	r5, [pc, #84]	; 1b440 <__assert_fail@plt+0x9ea0>
   1b3e8:	mov	r7, r1
   1b3ec:	mov	r4, r2
   1b3f0:	mov	r2, r4
   1b3f4:	mov	r1, r7
   1b3f8:	mov	r0, r8
   1b3fc:	bl	11204 <read@plt>
   1b400:	subs	r6, r0, #0
   1b404:	bge	1b438 <__assert_fail@plt+0x9e98>
   1b408:	bl	11420 <__errno_location@plt>
   1b40c:	ldr	r3, [r0]
   1b410:	cmp	r3, #4
   1b414:	beq	1b3f0 <__assert_fail@plt+0x9e50>
   1b418:	cmp	r4, r5
   1b41c:	sub	r3, r3, #22
   1b420:	clz	r3, r3
   1b424:	lsr	r3, r3, #5
   1b428:	movls	r3, #0
   1b42c:	cmp	r3, #0
   1b430:	mov	r4, r5
   1b434:	bne	1b3f0 <__assert_fail@plt+0x9e50>
   1b438:	mov	r0, r6
   1b43c:	pop	{r4, r5, r6, r7, r8, pc}
   1b440:	svcvc	0x00f00000	; IMB
   1b444:	push	{r4, r5, r6, lr}
   1b448:	mov	r2, r1
   1b44c:	mov	r4, r1
   1b450:	mov	r1, #0
   1b454:	mov	r5, r0
   1b458:	bl	11474 <memchr@plt>
   1b45c:	cmp	r0, #0
   1b460:	subne	r0, r0, r5
   1b464:	addne	r0, r0, #1
   1b468:	moveq	r0, r4
   1b46c:	pop	{r4, r5, r6, pc}
   1b470:	cmp	r0, #2
   1b474:	push	{r4, r5, r6, r7, r8, lr}
   1b478:	mov	r4, r0
   1b47c:	bhi	1b4a4 <__assert_fail@plt+0x9f04>
   1b480:	bl	1d438 <__assert_fail@plt+0xbe98>
   1b484:	mov	r7, r0
   1b488:	bl	11420 <__errno_location@plt>
   1b48c:	mov	r5, r0
   1b490:	mov	r0, r4
   1b494:	ldr	r6, [r5]
   1b498:	mov	r4, r7
   1b49c:	bl	11588 <close@plt>
   1b4a0:	str	r6, [r5]
   1b4a4:	mov	r0, r4
   1b4a8:	pop	{r4, r5, r6, r7, r8, pc}
   1b4ac:	push	{r4, r5, r6, lr}
   1b4b0:	mov	r4, r0
   1b4b4:	bl	11498 <pipe@plt>
   1b4b8:	subs	r5, r0, #0
   1b4bc:	bne	1b514 <__assert_fail@plt+0x9f74>
   1b4c0:	ldr	r0, [r4]
   1b4c4:	bl	1b470 <__assert_fail@plt+0x9ed0>
   1b4c8:	cmp	r0, #0
   1b4cc:	str	r0, [r4]
   1b4d0:	blt	1b4f0 <__assert_fail@plt+0x9f50>
   1b4d4:	ldr	r0, [r4, #4]
   1b4d8:	bl	1b470 <__assert_fail@plt+0x9ed0>
   1b4dc:	cmp	r0, #0
   1b4e0:	str	r0, [r4, #4]
   1b4e4:	blt	1b4f4 <__assert_fail@plt+0x9f54>
   1b4e8:	mov	r0, r5
   1b4ec:	pop	{r4, r5, r6, pc}
   1b4f0:	mov	r5, #4
   1b4f4:	bl	11420 <__errno_location@plt>
   1b4f8:	mov	r6, r0
   1b4fc:	ldr	r0, [r4, r5]
   1b500:	ldr	r4, [r6]
   1b504:	mvn	r5, #0
   1b508:	bl	11588 <close@plt>
   1b50c:	str	r4, [r6]
   1b510:	b	1b4e8 <__assert_fail@plt+0x9f48>
   1b514:	mvn	r5, #0
   1b518:	b	1b4e8 <__assert_fail@plt+0x9f48>
   1b51c:	push	{r4, r5, r6, lr}
   1b520:	sub	sp, sp, #32
   1b524:	cmp	r1, #0
   1b528:	mov	r4, r0
   1b52c:	ldr	r5, [sp, #48]	; 0x30
   1b530:	ldr	r6, [sp, #52]	; 0x34
   1b534:	beq	1b7e0 <__assert_fail@plt+0xa240>
   1b538:	str	r3, [sp]
   1b53c:	mov	r3, r2
   1b540:	mov	r2, r1
   1b544:	ldr	r1, [pc, #684]	; 1b7f8 <__assert_fail@plt+0xa258>
   1b548:	bl	11414 <fprintf@plt>
   1b54c:	mov	r2, #5
   1b550:	ldr	r1, [pc, #676]	; 1b7fc <__assert_fail@plt+0xa25c>
   1b554:	mov	r0, #0
   1b558:	bl	11288 <dcgettext@plt>
   1b55c:	ldr	r3, [pc, #668]	; 1b800 <__assert_fail@plt+0xa260>
   1b560:	ldr	r1, [pc, #668]	; 1b804 <__assert_fail@plt+0xa264>
   1b564:	mov	r2, r0
   1b568:	mov	r0, r4
   1b56c:	bl	11414 <fprintf@plt>
   1b570:	mov	r1, r4
   1b574:	mov	r0, #10
   1b578:	bl	114f8 <fputc@plt>
   1b57c:	mov	r2, #5
   1b580:	ldr	r1, [pc, #640]	; 1b808 <__assert_fail@plt+0xa268>
   1b584:	mov	r0, #0
   1b588:	bl	11288 <dcgettext@plt>
   1b58c:	ldr	r2, [pc, #632]	; 1b80c <__assert_fail@plt+0xa26c>
   1b590:	mov	r1, r0
   1b594:	mov	r0, r4
   1b598:	bl	11414 <fprintf@plt>
   1b59c:	mov	r1, r4
   1b5a0:	mov	r0, #10
   1b5a4:	bl	114f8 <fputc@plt>
   1b5a8:	cmp	r6, #9
   1b5ac:	ldrls	pc, [pc, r6, lsl #2]
   1b5b0:	b	1b7ec <__assert_fail@plt+0xa24c>
   1b5b4:	andeq	fp, r1, r8, lsr #12
   1b5b8:	andeq	fp, r1, r0, lsr r6
   1b5bc:	andeq	fp, r1, r8, asr r6
   1b5c0:	andeq	fp, r1, r0, lsl #13
   1b5c4:			; <UNDEFINED> instruction: 0x0001b6b0
   1b5c8:	andeq	fp, r1, r8, ror #13
   1b5cc:	andeq	fp, r1, r8, lsl r7
   1b5d0:	andeq	fp, r1, r0, asr r7
   1b5d4:	muleq	r1, r4, r7
   1b5d8:	ldrdeq	fp, [r1], -ip
   1b5dc:	ldr	r1, [pc, #556]	; 1b810 <__assert_fail@plt+0xa270>
   1b5e0:	mov	r2, #5
   1b5e4:	mov	r0, #0
   1b5e8:	bl	11288 <dcgettext@plt>
   1b5ec:	add	r1, r5, #24
   1b5f0:	ldm	r5, {r2, r3}
   1b5f4:	ldm	r1, {r1, ip, lr}
   1b5f8:	str	lr, [sp, #24]
   1b5fc:	ldr	r6, [r5, #20]
   1b600:	str	ip, [sp, #20]
   1b604:	ldr	lr, [r5, #16]
   1b608:	str	r1, [sp, #16]
   1b60c:	ldr	r1, [r5, #8]
   1b610:	ldr	ip, [r5, #12]
   1b614:	str	r6, [sp, #12]
   1b618:	stm	sp, {r1, ip, lr}
   1b61c:	mov	r1, r0
   1b620:	mov	r0, r4
   1b624:	bl	11414 <fprintf@plt>
   1b628:	add	sp, sp, #32
   1b62c:	pop	{r4, r5, r6, pc}
   1b630:	mov	r2, #5
   1b634:	ldr	r1, [pc, #472]	; 1b814 <__assert_fail@plt+0xa274>
   1b638:	mov	r0, #0
   1b63c:	bl	11288 <dcgettext@plt>
   1b640:	ldr	r2, [r5]
   1b644:	mov	r1, r0
   1b648:	mov	r0, r4
   1b64c:	add	sp, sp, #32
   1b650:	pop	{r4, r5, r6, lr}
   1b654:	b	11414 <fprintf@plt>
   1b658:	mov	r2, #5
   1b65c:	ldr	r1, [pc, #436]	; 1b818 <__assert_fail@plt+0xa278>
   1b660:	mov	r0, #0
   1b664:	bl	11288 <dcgettext@plt>
   1b668:	ldm	r5, {r2, r3}
   1b66c:	mov	r1, r0
   1b670:	mov	r0, r4
   1b674:	add	sp, sp, #32
   1b678:	pop	{r4, r5, r6, lr}
   1b67c:	b	11414 <fprintf@plt>
   1b680:	mov	r2, #5
   1b684:	ldr	r1, [pc, #400]	; 1b81c <__assert_fail@plt+0xa27c>
   1b688:	mov	r0, #0
   1b68c:	bl	11288 <dcgettext@plt>
   1b690:	ldr	r1, [r5, #8]
   1b694:	ldm	r5, {r2, r3}
   1b698:	str	r1, [sp, #48]	; 0x30
   1b69c:	mov	r1, r0
   1b6a0:	mov	r0, r4
   1b6a4:	add	sp, sp, #32
   1b6a8:	pop	{r4, r5, r6, lr}
   1b6ac:	b	11414 <fprintf@plt>
   1b6b0:	mov	r2, #5
   1b6b4:	ldr	r1, [pc, #356]	; 1b820 <__assert_fail@plt+0xa280>
   1b6b8:	mov	r0, #0
   1b6bc:	bl	11288 <dcgettext@plt>
   1b6c0:	ldr	r1, [r5, #8]
   1b6c4:	ldr	ip, [r5, #12]
   1b6c8:	ldm	r5, {r2, r3}
   1b6cc:	str	r1, [sp, #48]	; 0x30
   1b6d0:	str	ip, [sp, #52]	; 0x34
   1b6d4:	mov	r1, r0
   1b6d8:	mov	r0, r4
   1b6dc:	add	sp, sp, #32
   1b6e0:	pop	{r4, r5, r6, lr}
   1b6e4:	b	11414 <fprintf@plt>
   1b6e8:	mov	r2, #5
   1b6ec:	ldr	r1, [pc, #304]	; 1b824 <__assert_fail@plt+0xa284>
   1b6f0:	mov	r0, #0
   1b6f4:	bl	11288 <dcgettext@plt>
   1b6f8:	add	r1, r5, #8
   1b6fc:	ldm	r5, {r2, r3}
   1b700:	ldm	r1, {r1, ip, lr}
   1b704:	stm	sp, {r1, ip, lr}
   1b708:	mov	r1, r0
   1b70c:	mov	r0, r4
   1b710:	bl	11414 <fprintf@plt>
   1b714:	b	1b628 <__assert_fail@plt+0xa088>
   1b718:	mov	r2, #5
   1b71c:	ldr	r1, [pc, #260]	; 1b828 <__assert_fail@plt+0xa288>
   1b720:	mov	r0, #0
   1b724:	bl	11288 <dcgettext@plt>
   1b728:	add	r1, r5, #8
   1b72c:	ldr	r6, [r5, #20]
   1b730:	ldm	r1, {r1, ip, lr}
   1b734:	ldm	r5, {r2, r3}
   1b738:	str	r6, [sp, #12]
   1b73c:	stm	sp, {r1, ip, lr}
   1b740:	mov	r1, r0
   1b744:	mov	r0, r4
   1b748:	bl	11414 <fprintf@plt>
   1b74c:	b	1b628 <__assert_fail@plt+0xa088>
   1b750:	mov	r2, #5
   1b754:	ldr	r1, [pc, #208]	; 1b82c <__assert_fail@plt+0xa28c>
   1b758:	mov	r0, #0
   1b75c:	bl	11288 <dcgettext@plt>
   1b760:	ldr	r1, [r5, #24]
   1b764:	ldm	r5, {r2, r3}
   1b768:	ldr	r6, [r5, #20]
   1b76c:	ldr	lr, [r5, #16]
   1b770:	str	r1, [sp, #16]
   1b774:	ldr	r1, [r5, #8]
   1b778:	ldr	ip, [r5, #12]
   1b77c:	str	r6, [sp, #12]
   1b780:	stm	sp, {r1, ip, lr}
   1b784:	mov	r1, r0
   1b788:	mov	r0, r4
   1b78c:	bl	11414 <fprintf@plt>
   1b790:	b	1b628 <__assert_fail@plt+0xa088>
   1b794:	mov	r2, #5
   1b798:	ldr	r1, [pc, #144]	; 1b830 <__assert_fail@plt+0xa290>
   1b79c:	mov	r0, #0
   1b7a0:	bl	11288 <dcgettext@plt>
   1b7a4:	ldr	ip, [r5, #28]
   1b7a8:	ldr	r1, [r5, #24]
   1b7ac:	ldm	r5, {r2, r3}
   1b7b0:	ldr	r6, [r5, #20]
   1b7b4:	str	ip, [sp, #20]
   1b7b8:	ldr	lr, [r5, #16]
   1b7bc:	str	r1, [sp, #16]
   1b7c0:	ldr	r1, [r5, #8]
   1b7c4:	ldr	ip, [r5, #12]
   1b7c8:	str	r6, [sp, #12]
   1b7cc:	stm	sp, {r1, ip, lr}
   1b7d0:	mov	r1, r0
   1b7d4:	mov	r0, r4
   1b7d8:	bl	11414 <fprintf@plt>
   1b7dc:	b	1b628 <__assert_fail@plt+0xa088>
   1b7e0:	ldr	r1, [pc, #76]	; 1b834 <__assert_fail@plt+0xa294>
   1b7e4:	bl	11414 <fprintf@plt>
   1b7e8:	b	1b54c <__assert_fail@plt+0x9fac>
   1b7ec:	mov	r2, #5
   1b7f0:	ldr	r1, [pc, #64]	; 1b838 <__assert_fail@plt+0xa298>
   1b7f4:	b	1b5e4 <__assert_fail@plt+0xa044>
   1b7f8:	andeq	pc, r1, ip, lsr r9	; <UNPREDICTABLE>
   1b7fc:	andeq	pc, r1, r0, asr r9	; <UNPREDICTABLE>
   1b800:	andeq	r0, r0, r6, ror #15
   1b804:	andeq	pc, r1, r0, lsl ip	; <UNPREDICTABLE>
   1b808:	andeq	pc, r1, r4, asr r9	; <UNPREDICTABLE>
   1b80c:	andeq	pc, r1, r0, lsl #20
   1b810:	andeq	pc, r1, r0, lsr fp	; <UNPREDICTABLE>
   1b814:	andeq	pc, r1, r4, lsr #20
   1b818:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1b81c:	andeq	pc, r1, ip, asr #20
   1b820:	andeq	pc, r1, r8, ror #20
   1b824:	andeq	pc, r1, r8, lsl #21
   1b828:	andeq	pc, r1, ip, lsr #21
   1b82c:	ldrdeq	pc, [r1], -r4
   1b830:	andeq	pc, r1, r0, lsl #22
   1b834:	andeq	pc, r1, r8, asr #18
   1b838:	andeq	pc, r1, r4, ror #22
   1b83c:	push	{r4, r5, lr}
   1b840:	sub	sp, sp, #12
   1b844:	ldr	r5, [sp, #24]
   1b848:	ldr	ip, [r5]
   1b84c:	cmp	ip, #0
   1b850:	beq	1b86c <__assert_fail@plt+0xa2cc>
   1b854:	mov	lr, r5
   1b858:	mov	ip, #0
   1b85c:	ldr	r4, [lr, #4]!
   1b860:	add	ip, ip, #1
   1b864:	cmp	r4, #0
   1b868:	bne	1b85c <__assert_fail@plt+0xa2bc>
   1b86c:	stm	sp, {r5, ip}
   1b870:	bl	1b51c <__assert_fail@plt+0x9f7c>
   1b874:	add	sp, sp, #12
   1b878:	pop	{r4, r5, pc}
   1b87c:	push	{r4, r5, lr}
   1b880:	sub	sp, sp, #76	; 0x4c
   1b884:	mov	r5, r0
   1b888:	ldr	ip, [sp, #88]	; 0x58
   1b88c:	ldr	r0, [ip]
   1b890:	cmp	r0, #0
   1b894:	str	r0, [sp, #32]
   1b898:	beq	1bc14 <__assert_fail@plt+0xa674>
   1b89c:	ldr	r0, [ip, #4]
   1b8a0:	cmp	r0, #0
   1b8a4:	str	r0, [sp, #36]	; 0x24
   1b8a8:	beq	1bc1c <__assert_fail@plt+0xa67c>
   1b8ac:	ldr	r0, [ip, #8]
   1b8b0:	cmp	r0, #0
   1b8b4:	str	r0, [sp, #40]	; 0x28
   1b8b8:	beq	1bc24 <__assert_fail@plt+0xa684>
   1b8bc:	ldr	r0, [ip, #12]
   1b8c0:	cmp	r0, #0
   1b8c4:	str	r0, [sp, #44]	; 0x2c
   1b8c8:	beq	1bc2c <__assert_fail@plt+0xa68c>
   1b8cc:	ldr	r0, [ip, #16]
   1b8d0:	cmp	r0, #0
   1b8d4:	str	r0, [sp, #48]	; 0x30
   1b8d8:	beq	1bc34 <__assert_fail@plt+0xa694>
   1b8dc:	ldr	r0, [ip, #20]
   1b8e0:	cmp	r0, #0
   1b8e4:	str	r0, [sp, #52]	; 0x34
   1b8e8:	beq	1bc3c <__assert_fail@plt+0xa69c>
   1b8ec:	ldr	r0, [ip, #24]
   1b8f0:	cmp	r0, #0
   1b8f4:	str	r0, [sp, #56]	; 0x38
   1b8f8:	beq	1bc44 <__assert_fail@plt+0xa6a4>
   1b8fc:	ldr	r0, [ip, #28]
   1b900:	cmp	r0, #0
   1b904:	str	r0, [sp, #60]	; 0x3c
   1b908:	beq	1bc4c <__assert_fail@plt+0xa6ac>
   1b90c:	ldr	r0, [ip, #32]
   1b910:	cmp	r0, #0
   1b914:	str	r0, [sp, #64]	; 0x40
   1b918:	beq	1bc54 <__assert_fail@plt+0xa6b4>
   1b91c:	ldr	r0, [ip, #36]	; 0x24
   1b920:	cmp	r0, #0
   1b924:	movne	r4, #10
   1b928:	moveq	r4, #9
   1b92c:	cmp	r1, #0
   1b930:	beq	1bbf8 <__assert_fail@plt+0xa658>
   1b934:	str	r3, [sp]
   1b938:	mov	r0, r5
   1b93c:	mov	r3, r2
   1b940:	mov	r2, r1
   1b944:	ldr	r1, [pc, #784]	; 1bc5c <__assert_fail@plt+0xa6bc>
   1b948:	bl	11414 <fprintf@plt>
   1b94c:	mov	r2, #5
   1b950:	ldr	r1, [pc, #776]	; 1bc60 <__assert_fail@plt+0xa6c0>
   1b954:	mov	r0, #0
   1b958:	bl	11288 <dcgettext@plt>
   1b95c:	ldr	r3, [pc, #768]	; 1bc64 <__assert_fail@plt+0xa6c4>
   1b960:	ldr	r1, [pc, #768]	; 1bc68 <__assert_fail@plt+0xa6c8>
   1b964:	mov	r2, r0
   1b968:	mov	r0, r5
   1b96c:	bl	11414 <fprintf@plt>
   1b970:	mov	r1, r5
   1b974:	mov	r0, #10
   1b978:	bl	114f8 <fputc@plt>
   1b97c:	mov	r2, #5
   1b980:	ldr	r1, [pc, #740]	; 1bc6c <__assert_fail@plt+0xa6cc>
   1b984:	mov	r0, #0
   1b988:	bl	11288 <dcgettext@plt>
   1b98c:	ldr	r2, [pc, #732]	; 1bc70 <__assert_fail@plt+0xa6d0>
   1b990:	mov	r1, r0
   1b994:	mov	r0, r5
   1b998:	bl	11414 <fprintf@plt>
   1b99c:	mov	r1, r5
   1b9a0:	mov	r0, #10
   1b9a4:	bl	114f8 <fputc@plt>
   1b9a8:	cmp	r4, #9
   1b9ac:	ldrls	pc, [pc, r4, lsl #2]
   1b9b0:	b	1bc08 <__assert_fail@plt+0xa668>
   1b9b4:	andeq	fp, r1, ip, lsr #20
   1b9b8:	andeq	fp, r1, r4, lsr sl
   1b9bc:	andeq	fp, r1, ip, asr sl
   1b9c0:	andeq	fp, r1, r8, lsl #21
   1b9c4:			; <UNDEFINED> instruction: 0x0001babc
   1b9c8:	strdeq	fp, [r1], -r0
   1b9cc:	andeq	fp, r1, r4, lsr #22
   1b9d0:	andeq	fp, r1, r0, ror #22
   1b9d4:	andeq	fp, r1, r8, lsr #23
   1b9d8:	ldrdeq	fp, [r1], -ip
   1b9dc:	ldr	r1, [pc, #656]	; 1bc74 <__assert_fail@plt+0xa6d4>
   1b9e0:	mov	r2, #5
   1b9e4:	mov	r0, #0
   1b9e8:	bl	11288 <dcgettext@plt>
   1b9ec:	add	r1, sp, #56	; 0x38
   1b9f0:	ldr	r4, [sp, #52]	; 0x34
   1b9f4:	ldm	r1, {r1, ip, lr}
   1b9f8:	ldr	r3, [sp, #36]	; 0x24
   1b9fc:	ldr	r2, [sp, #32]
   1ba00:	str	lr, [sp, #24]
   1ba04:	str	ip, [sp, #20]
   1ba08:	ldr	lr, [sp, #48]	; 0x30
   1ba0c:	ldr	ip, [sp, #44]	; 0x2c
   1ba10:	str	r1, [sp, #16]
   1ba14:	ldr	r1, [sp, #40]	; 0x28
   1ba18:	str	r4, [sp, #12]
   1ba1c:	stm	sp, {r1, ip, lr}
   1ba20:	mov	r1, r0
   1ba24:	mov	r0, r5
   1ba28:	bl	11414 <fprintf@plt>
   1ba2c:	add	sp, sp, #76	; 0x4c
   1ba30:	pop	{r4, r5, pc}
   1ba34:	mov	r2, #5
   1ba38:	ldr	r1, [pc, #568]	; 1bc78 <__assert_fail@plt+0xa6d8>
   1ba3c:	mov	r0, #0
   1ba40:	bl	11288 <dcgettext@plt>
   1ba44:	ldr	r2, [sp, #32]
   1ba48:	mov	r1, r0
   1ba4c:	mov	r0, r5
   1ba50:	add	sp, sp, #76	; 0x4c
   1ba54:	pop	{r4, r5, lr}
   1ba58:	b	11414 <fprintf@plt>
   1ba5c:	mov	r2, #5
   1ba60:	ldr	r1, [pc, #532]	; 1bc7c <__assert_fail@plt+0xa6dc>
   1ba64:	mov	r0, #0
   1ba68:	bl	11288 <dcgettext@plt>
   1ba6c:	ldr	r3, [sp, #36]	; 0x24
   1ba70:	ldr	r2, [sp, #32]
   1ba74:	mov	r1, r0
   1ba78:	mov	r0, r5
   1ba7c:	add	sp, sp, #76	; 0x4c
   1ba80:	pop	{r4, r5, lr}
   1ba84:	b	11414 <fprintf@plt>
   1ba88:	mov	r2, #5
   1ba8c:	ldr	r1, [pc, #492]	; 1bc80 <__assert_fail@plt+0xa6e0>
   1ba90:	mov	r0, #0
   1ba94:	bl	11288 <dcgettext@plt>
   1ba98:	ldr	r1, [sp, #40]	; 0x28
   1ba9c:	ldr	r3, [sp, #36]	; 0x24
   1baa0:	str	r1, [sp, #88]	; 0x58
   1baa4:	ldr	r2, [sp, #32]
   1baa8:	mov	r1, r0
   1baac:	mov	r0, r5
   1bab0:	add	sp, sp, #76	; 0x4c
   1bab4:	pop	{r4, r5, lr}
   1bab8:	b	11414 <fprintf@plt>
   1babc:	mov	r2, #5
   1bac0:	ldr	r1, [pc, #444]	; 1bc84 <__assert_fail@plt+0xa6e4>
   1bac4:	mov	r0, #0
   1bac8:	bl	11288 <dcgettext@plt>
   1bacc:	ldr	r1, [sp, #40]	; 0x28
   1bad0:	ldr	ip, [sp, #44]	; 0x2c
   1bad4:	ldr	r3, [sp, #36]	; 0x24
   1bad8:	ldr	r2, [sp, #32]
   1badc:	stm	sp, {r1, ip}
   1bae0:	mov	r1, r0
   1bae4:	mov	r0, r5
   1bae8:	bl	11414 <fprintf@plt>
   1baec:	b	1ba2c <__assert_fail@plt+0xa48c>
   1baf0:	mov	r2, #5
   1baf4:	ldr	r1, [pc, #396]	; 1bc88 <__assert_fail@plt+0xa6e8>
   1baf8:	mov	r0, #0
   1bafc:	bl	11288 <dcgettext@plt>
   1bb00:	add	r1, sp, #40	; 0x28
   1bb04:	ldr	r3, [sp, #36]	; 0x24
   1bb08:	ldm	r1, {r1, ip, lr}
   1bb0c:	ldr	r2, [sp, #32]
   1bb10:	stm	sp, {r1, ip, lr}
   1bb14:	mov	r1, r0
   1bb18:	mov	r0, r5
   1bb1c:	bl	11414 <fprintf@plt>
   1bb20:	b	1ba2c <__assert_fail@plt+0xa48c>
   1bb24:	mov	r2, #5
   1bb28:	ldr	r1, [pc, #348]	; 1bc8c <__assert_fail@plt+0xa6ec>
   1bb2c:	mov	r0, #0
   1bb30:	bl	11288 <dcgettext@plt>
   1bb34:	add	r1, sp, #40	; 0x28
   1bb38:	ldr	r4, [sp, #52]	; 0x34
   1bb3c:	ldm	r1, {r1, ip, lr}
   1bb40:	ldr	r3, [sp, #36]	; 0x24
   1bb44:	ldr	r2, [sp, #32]
   1bb48:	stm	sp, {r1, ip, lr}
   1bb4c:	str	r4, [sp, #12]
   1bb50:	mov	r1, r0
   1bb54:	mov	r0, r5
   1bb58:	bl	11414 <fprintf@plt>
   1bb5c:	b	1ba2c <__assert_fail@plt+0xa48c>
   1bb60:	mov	r2, #5
   1bb64:	ldr	r1, [pc, #292]	; 1bc90 <__assert_fail@plt+0xa6f0>
   1bb68:	mov	r0, #0
   1bb6c:	bl	11288 <dcgettext@plt>
   1bb70:	ldr	r1, [sp, #56]	; 0x38
   1bb74:	ldr	lr, [sp, #48]	; 0x30
   1bb78:	ldr	ip, [sp, #44]	; 0x2c
   1bb7c:	str	r1, [sp, #16]
   1bb80:	ldr	r1, [sp, #40]	; 0x28
   1bb84:	ldr	r4, [sp, #52]	; 0x34
   1bb88:	ldr	r3, [sp, #36]	; 0x24
   1bb8c:	stm	sp, {r1, ip, lr}
   1bb90:	ldr	r2, [sp, #32]
   1bb94:	str	r4, [sp, #12]
   1bb98:	mov	r1, r0
   1bb9c:	mov	r0, r5
   1bba0:	bl	11414 <fprintf@plt>
   1bba4:	b	1ba2c <__assert_fail@plt+0xa48c>
   1bba8:	mov	r2, #5
   1bbac:	ldr	r1, [pc, #224]	; 1bc94 <__assert_fail@plt+0xa6f4>
   1bbb0:	mov	r0, #0
   1bbb4:	bl	11288 <dcgettext@plt>
   1bbb8:	ldr	ip, [sp, #60]	; 0x3c
   1bbbc:	ldr	r1, [sp, #56]	; 0x38
   1bbc0:	ldr	lr, [sp, #48]	; 0x30
   1bbc4:	str	ip, [sp, #20]
   1bbc8:	str	r1, [sp, #16]
   1bbcc:	ldr	ip, [sp, #44]	; 0x2c
   1bbd0:	ldr	r1, [sp, #40]	; 0x28
   1bbd4:	ldr	r4, [sp, #52]	; 0x34
   1bbd8:	ldr	r3, [sp, #36]	; 0x24
   1bbdc:	stm	sp, {r1, ip, lr}
   1bbe0:	ldr	r2, [sp, #32]
   1bbe4:	str	r4, [sp, #12]
   1bbe8:	mov	r1, r0
   1bbec:	mov	r0, r5
   1bbf0:	bl	11414 <fprintf@plt>
   1bbf4:	b	1ba2c <__assert_fail@plt+0xa48c>
   1bbf8:	ldr	r1, [pc, #152]	; 1bc98 <__assert_fail@plt+0xa6f8>
   1bbfc:	mov	r0, r5
   1bc00:	bl	11414 <fprintf@plt>
   1bc04:	b	1b94c <__assert_fail@plt+0xa3ac>
   1bc08:	mov	r2, #5
   1bc0c:	ldr	r1, [pc, #136]	; 1bc9c <__assert_fail@plt+0xa6fc>
   1bc10:	b	1b9e4 <__assert_fail@plt+0xa444>
   1bc14:	mov	r4, r0
   1bc18:	b	1b92c <__assert_fail@plt+0xa38c>
   1bc1c:	mov	r4, #1
   1bc20:	b	1b92c <__assert_fail@plt+0xa38c>
   1bc24:	mov	r4, #2
   1bc28:	b	1b92c <__assert_fail@plt+0xa38c>
   1bc2c:	mov	r4, #3
   1bc30:	b	1b92c <__assert_fail@plt+0xa38c>
   1bc34:	mov	r4, #4
   1bc38:	b	1b92c <__assert_fail@plt+0xa38c>
   1bc3c:	mov	r4, #5
   1bc40:	b	1b92c <__assert_fail@plt+0xa38c>
   1bc44:	mov	r4, #6
   1bc48:	b	1b92c <__assert_fail@plt+0xa38c>
   1bc4c:	mov	r4, #7
   1bc50:	b	1b92c <__assert_fail@plt+0xa38c>
   1bc54:	mov	r4, #8
   1bc58:	b	1b92c <__assert_fail@plt+0xa38c>
   1bc5c:	andeq	pc, r1, ip, lsr r9	; <UNPREDICTABLE>
   1bc60:	andeq	pc, r1, r0, asr r9	; <UNPREDICTABLE>
   1bc64:	andeq	r0, r0, r6, ror #15
   1bc68:	andeq	pc, r1, r0, lsl ip	; <UNPREDICTABLE>
   1bc6c:	andeq	pc, r1, r4, asr r9	; <UNPREDICTABLE>
   1bc70:	andeq	pc, r1, r0, lsl #20
   1bc74:	andeq	pc, r1, r0, lsr fp	; <UNPREDICTABLE>
   1bc78:	andeq	pc, r1, r4, lsr #20
   1bc7c:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1bc80:	andeq	pc, r1, ip, asr #20
   1bc84:	andeq	pc, r1, r8, ror #20
   1bc88:	andeq	pc, r1, r8, lsl #21
   1bc8c:	andeq	pc, r1, ip, lsr #21
   1bc90:	ldrdeq	pc, [r1], -r4
   1bc94:	andeq	pc, r1, r0, lsl #22
   1bc98:	andeq	pc, r1, r8, asr #18
   1bc9c:	andeq	pc, r1, r4, ror #22
   1bca0:	push	{r3}		; (str r3, [sp, #-4]!)
   1bca4:	push	{lr}		; (str lr, [sp, #-4]!)
   1bca8:	sub	sp, sp, #56	; 0x38
   1bcac:	add	r3, sp, #64	; 0x40
   1bcb0:	ldr	ip, [sp, #64]	; 0x40
   1bcb4:	str	r3, [sp, #12]
   1bcb8:	cmp	ip, #0
   1bcbc:	str	ip, [sp, #16]
   1bcc0:	beq	1bd58 <__assert_fail@plt+0xa7b8>
   1bcc4:	ldr	ip, [sp, #68]	; 0x44
   1bcc8:	cmp	ip, #0
   1bccc:	str	ip, [sp, #20]
   1bcd0:	beq	1bd78 <__assert_fail@plt+0xa7d8>
   1bcd4:	ldr	ip, [sp, #72]	; 0x48
   1bcd8:	cmp	ip, #0
   1bcdc:	str	ip, [sp, #24]
   1bce0:	beq	1bd80 <__assert_fail@plt+0xa7e0>
   1bce4:	ldr	ip, [sp, #76]	; 0x4c
   1bce8:	cmp	ip, #0
   1bcec:	str	ip, [sp, #28]
   1bcf0:	beq	1bd88 <__assert_fail@plt+0xa7e8>
   1bcf4:	ldr	ip, [sp, #80]	; 0x50
   1bcf8:	cmp	ip, #0
   1bcfc:	str	ip, [sp, #32]
   1bd00:	beq	1bd90 <__assert_fail@plt+0xa7f0>
   1bd04:	ldr	ip, [sp, #84]	; 0x54
   1bd08:	cmp	ip, #0
   1bd0c:	str	ip, [sp, #36]	; 0x24
   1bd10:	beq	1bd98 <__assert_fail@plt+0xa7f8>
   1bd14:	ldr	ip, [sp, #88]	; 0x58
   1bd18:	cmp	ip, #0
   1bd1c:	str	ip, [sp, #40]	; 0x28
   1bd20:	beq	1bda0 <__assert_fail@plt+0xa800>
   1bd24:	ldr	ip, [sp, #92]	; 0x5c
   1bd28:	cmp	ip, #0
   1bd2c:	str	ip, [sp, #44]	; 0x2c
   1bd30:	beq	1bda8 <__assert_fail@plt+0xa808>
   1bd34:	ldr	ip, [sp, #96]	; 0x60
   1bd38:	cmp	ip, #0
   1bd3c:	str	ip, [sp, #48]	; 0x30
   1bd40:	beq	1bdb0 <__assert_fail@plt+0xa810>
   1bd44:	ldr	ip, [sp, #100]	; 0x64
   1bd48:	cmp	ip, #0
   1bd4c:	str	ip, [sp, #52]	; 0x34
   1bd50:	movne	ip, #10
   1bd54:	moveq	ip, #9
   1bd58:	add	r3, sp, #16
   1bd5c:	stm	sp, {r3, ip}
   1bd60:	ldr	r3, [sp, #60]	; 0x3c
   1bd64:	bl	1b51c <__assert_fail@plt+0x9f7c>
   1bd68:	add	sp, sp, #56	; 0x38
   1bd6c:	pop	{lr}		; (ldr lr, [sp], #4)
   1bd70:	add	sp, sp, #4
   1bd74:	bx	lr
   1bd78:	mov	ip, #1
   1bd7c:	b	1bd58 <__assert_fail@plt+0xa7b8>
   1bd80:	mov	ip, #2
   1bd84:	b	1bd58 <__assert_fail@plt+0xa7b8>
   1bd88:	mov	ip, #3
   1bd8c:	b	1bd58 <__assert_fail@plt+0xa7b8>
   1bd90:	mov	ip, #4
   1bd94:	b	1bd58 <__assert_fail@plt+0xa7b8>
   1bd98:	mov	ip, #5
   1bd9c:	b	1bd58 <__assert_fail@plt+0xa7b8>
   1bda0:	mov	ip, #6
   1bda4:	b	1bd58 <__assert_fail@plt+0xa7b8>
   1bda8:	mov	ip, #7
   1bdac:	b	1bd58 <__assert_fail@plt+0xa7b8>
   1bdb0:	mov	ip, #8
   1bdb4:	b	1bd58 <__assert_fail@plt+0xa7b8>
   1bdb8:	ldr	r3, [pc, #92]	; 1be1c <__assert_fail@plt+0xa87c>
   1bdbc:	push	{r4, lr}
   1bdc0:	mov	r0, #10
   1bdc4:	ldr	r1, [r3]
   1bdc8:	bl	114f8 <fputc@plt>
   1bdcc:	mov	r2, #5
   1bdd0:	ldr	r1, [pc, #72]	; 1be20 <__assert_fail@plt+0xa880>
   1bdd4:	mov	r0, #0
   1bdd8:	bl	11288 <dcgettext@plt>
   1bddc:	ldr	r1, [pc, #64]	; 1be24 <__assert_fail@plt+0xa884>
   1bde0:	bl	111f8 <printf@plt>
   1bde4:	mov	r2, #5
   1bde8:	ldr	r1, [pc, #56]	; 1be28 <__assert_fail@plt+0xa888>
   1bdec:	mov	r0, #0
   1bdf0:	bl	11288 <dcgettext@plt>
   1bdf4:	ldr	r2, [pc, #48]	; 1be2c <__assert_fail@plt+0xa88c>
   1bdf8:	ldr	r1, [pc, #48]	; 1be30 <__assert_fail@plt+0xa890>
   1bdfc:	bl	111f8 <printf@plt>
   1be00:	ldr	r1, [pc, #44]	; 1be34 <__assert_fail@plt+0xa894>
   1be04:	mov	r2, #5
   1be08:	mov	r0, #0
   1be0c:	bl	11288 <dcgettext@plt>
   1be10:	ldr	r1, [pc, #32]	; 1be38 <__assert_fail@plt+0xa898>
   1be14:	pop	{r4, lr}
   1be18:	b	111f8 <printf@plt>
   1be1c:	ldrdeq	r0, [r3], -ip
   1be20:	andeq	pc, r1, r0, lsr #23
   1be24:	andeq	pc, r1, r8, lsl r7	; <UNPREDICTABLE>
   1be28:			; <UNDEFINED> instruction: 0x0001fbb4
   1be2c:	strdeq	pc, [r1], -r0
   1be30:	andeq	pc, r1, ip, asr #11
   1be34:	andeq	pc, r1, r8, asr #23
   1be38:	strdeq	pc, [r1], -r0
   1be3c:	push	{r4, r5, r6, lr}
   1be40:	mov	r6, r0
   1be44:	mov	r5, r1
   1be48:	mov	r4, r2
   1be4c:	bl	1cf58 <__assert_fail@plt+0xb9b8>
   1be50:	cmp	r0, #0
   1be54:	popne	{r4, r5, r6, pc}
   1be58:	cmp	r6, #0
   1be5c:	beq	1be6c <__assert_fail@plt+0xa8cc>
   1be60:	cmp	r5, #0
   1be64:	cmpne	r4, #0
   1be68:	popeq	{r4, r5, r6, pc}
   1be6c:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   1be70:	push	{r4, lr}
   1be74:	bl	1ce7c <__assert_fail@plt+0xb8dc>
   1be78:	cmp	r0, #0
   1be7c:	popne	{r4, pc}
   1be80:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   1be84:	push	{r4, lr}
   1be88:	bl	1ce7c <__assert_fail@plt+0xb8dc>
   1be8c:	cmp	r0, #0
   1be90:	popne	{r4, pc}
   1be94:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   1be98:	push	{r4, lr}
   1be9c:	bl	1ce7c <__assert_fail@plt+0xb8dc>
   1bea0:	cmp	r0, #0
   1bea4:	popne	{r4, pc}
   1bea8:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   1beac:	push	{r4, r5, r6, lr}
   1beb0:	mov	r5, r0
   1beb4:	mov	r4, r1
   1beb8:	bl	1cefc <__assert_fail@plt+0xb95c>
   1bebc:	cmp	r0, #0
   1bec0:	popne	{r4, r5, r6, pc}
   1bec4:	adds	r4, r4, #0
   1bec8:	movne	r4, #1
   1becc:	cmp	r5, #0
   1bed0:	orreq	r4, r4, #1
   1bed4:	cmp	r4, #0
   1bed8:	popeq	{r4, r5, r6, pc}
   1bedc:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   1bee0:	push	{r4, lr}
   1bee4:	cmp	r1, #0
   1bee8:	orreq	r1, r1, #1
   1beec:	bl	1cefc <__assert_fail@plt+0xb95c>
   1bef0:	cmp	r0, #0
   1bef4:	popne	{r4, pc}
   1bef8:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   1befc:	push	{r4, r5, r6, lr}
   1bf00:	mov	r6, r0
   1bf04:	mov	r5, r1
   1bf08:	mov	r4, r2
   1bf0c:	bl	1cf58 <__assert_fail@plt+0xb9b8>
   1bf10:	cmp	r0, #0
   1bf14:	popne	{r4, r5, r6, pc}
   1bf18:	cmp	r6, #0
   1bf1c:	beq	1bf2c <__assert_fail@plt+0xa98c>
   1bf20:	cmp	r5, #0
   1bf24:	cmpne	r4, #0
   1bf28:	popeq	{r4, r5, r6, pc}
   1bf2c:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   1bf30:	cmp	r2, #0
   1bf34:	cmpne	r1, #0
   1bf38:	moveq	r2, #1
   1bf3c:	moveq	r1, r2
   1bf40:	push	{r4, lr}
   1bf44:	bl	1cf58 <__assert_fail@plt+0xb9b8>
   1bf48:	cmp	r0, #0
   1bf4c:	popne	{r4, pc}
   1bf50:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   1bf54:	push	{r4, lr}
   1bf58:	mov	r2, r1
   1bf5c:	mov	r1, r0
   1bf60:	mov	r0, #0
   1bf64:	bl	1cf58 <__assert_fail@plt+0xb9b8>
   1bf68:	cmp	r0, #0
   1bf6c:	popne	{r4, pc}
   1bf70:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   1bf74:	cmp	r1, #0
   1bf78:	cmpne	r0, #0
   1bf7c:	moveq	r2, #1
   1bf80:	movne	r2, r1
   1bf84:	moveq	r1, r2
   1bf88:	movne	r1, r0
   1bf8c:	push	{r4, lr}
   1bf90:	mov	r0, #0
   1bf94:	bl	1cf58 <__assert_fail@plt+0xb9b8>
   1bf98:	cmp	r0, #0
   1bf9c:	popne	{r4, pc}
   1bfa0:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   1bfa4:	cmp	r0, #0
   1bfa8:	push	{r4, r5, r6, lr}
   1bfac:	mov	r5, r1
   1bfb0:	ldr	r4, [r1]
   1bfb4:	beq	1bff0 <__assert_fail@plt+0xaa50>
   1bfb8:	lsr	r2, r4, #1
   1bfbc:	add	r3, r2, #1
   1bfc0:	mvn	r3, r3
   1bfc4:	cmp	r4, r3
   1bfc8:	bhi	1c00c <__assert_fail@plt+0xaa6c>
   1bfcc:	add	r4, r4, #1
   1bfd0:	add	r4, r4, r2
   1bfd4:	mov	r1, r4
   1bfd8:	mov	r2, #1
   1bfdc:	bl	1cf58 <__assert_fail@plt+0xb9b8>
   1bfe0:	cmp	r0, #0
   1bfe4:	beq	1c010 <__assert_fail@plt+0xaa70>
   1bfe8:	str	r4, [r5]
   1bfec:	pop	{r4, r5, r6, pc}
   1bff0:	cmp	r4, #0
   1bff4:	moveq	r4, #64	; 0x40
   1bff8:	mov	r1, r4
   1bffc:	mov	r2, #1
   1c000:	bl	1cf58 <__assert_fail@plt+0xb9b8>
   1c004:	cmp	r0, #0
   1c008:	bne	1bfe8 <__assert_fail@plt+0xaa48>
   1c00c:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   1c010:	cmp	r4, #0
   1c014:	bne	1c00c <__assert_fail@plt+0xaa6c>
   1c018:	str	r4, [r5]
   1c01c:	pop	{r4, r5, r6, pc}
   1c020:	cmp	r0, #0
   1c024:	push	{r4, r5, r6, lr}
   1c028:	mov	r5, r1
   1c02c:	ldr	r4, [r1]
   1c030:	mov	r6, r2
   1c034:	beq	1c078 <__assert_fail@plt+0xaad8>
   1c038:	lsr	r1, r4, #1
   1c03c:	add	r3, r1, #1
   1c040:	mvn	r3, r3
   1c044:	cmp	r4, r3
   1c048:	bhi	1c0b0 <__assert_fail@plt+0xab10>
   1c04c:	add	r4, r4, #1
   1c050:	add	r4, r4, r1
   1c054:	mov	r1, r4
   1c058:	bl	1cf58 <__assert_fail@plt+0xb9b8>
   1c05c:	cmp	r0, #0
   1c060:	bne	1c070 <__assert_fail@plt+0xaad0>
   1c064:	cmp	r4, #0
   1c068:	cmpne	r6, #0
   1c06c:	bne	1c0b0 <__assert_fail@plt+0xab10>
   1c070:	str	r4, [r5]
   1c074:	pop	{r4, r5, r6, pc}
   1c078:	cmp	r4, #0
   1c07c:	bne	1c098 <__assert_fail@plt+0xaaf8>
   1c080:	mov	r1, r2
   1c084:	mov	r0, #64	; 0x40
   1c088:	bl	1d444 <__assert_fail@plt+0xbea4>
   1c08c:	cmp	r0, #0
   1c090:	movne	r4, r0
   1c094:	addeq	r4, r0, #1
   1c098:	mov	r2, r6
   1c09c:	mov	r1, r4
   1c0a0:	mov	r0, #0
   1c0a4:	bl	1cf58 <__assert_fail@plt+0xb9b8>
   1c0a8:	cmp	r0, #0
   1c0ac:	bne	1c070 <__assert_fail@plt+0xaad0>
   1c0b0:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   1c0b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0b8:	sub	sp, sp, #12
   1c0bc:	ldr	r6, [r1]
   1c0c0:	mov	r8, r1
   1c0c4:	mov	r9, r0
   1c0c8:	asrs	r4, r6, #1
   1c0cc:	mov	sl, r2
   1c0d0:	mov	fp, r3
   1c0d4:	ldr	r7, [sp, #48]	; 0x30
   1c0d8:	bmi	1c254 <__assert_fail@plt+0xacb4>
   1c0dc:	mvn	r1, #-2147483648	; 0x80000000
   1c0e0:	sub	r1, r1, r4
   1c0e4:	cmp	r6, r1
   1c0e8:	movle	r1, #0
   1c0ec:	movgt	r1, #1
   1c0f0:	mvn	r3, fp
   1c0f4:	cmp	r1, #0
   1c0f8:	addeq	r4, r4, r6
   1c0fc:	mvnne	r4, #-2147483648	; 0x80000000
   1c100:	lsr	r3, r3, #31
   1c104:	cmp	fp, r4
   1c108:	movge	r2, #0
   1c10c:	andlt	r2, r3, #1
   1c110:	cmp	r2, #0
   1c114:	beq	1c204 <__assert_fail@plt+0xac64>
   1c118:	cmp	r7, #0
   1c11c:	blt	1c2ec <__assert_fail@plt+0xad4c>
   1c120:	bne	1c2e4 <__assert_fail@plt+0xad44>
   1c124:	mov	r5, #64	; 0x40
   1c128:	mov	r1, r7
   1c12c:	mov	r0, r5
   1c130:	str	r3, [sp, #4]
   1c134:	bl	1d650 <__assert_fail@plt+0xc0b0>
   1c138:	mov	r1, r7
   1c13c:	mov	r4, r0
   1c140:	mov	r0, r5
   1c144:	bl	1d870 <__assert_fail@plt+0xc2d0>
   1c148:	ldr	r3, [sp, #4]
   1c14c:	sub	r5, r5, r1
   1c150:	cmp	r9, #0
   1c154:	sub	r2, r4, r6
   1c158:	streq	r9, [r8]
   1c15c:	cmp	r2, sl
   1c160:	bge	1c1e4 <__assert_fail@plt+0xac44>
   1c164:	cmp	sl, #0
   1c168:	blt	1c284 <__assert_fail@plt+0xace4>
   1c16c:	cmp	r6, #0
   1c170:	blt	1c190 <__assert_fail@plt+0xabf0>
   1c174:	mvn	r2, #-2147483648	; 0x80000000
   1c178:	sub	r2, r2, sl
   1c17c:	cmp	r6, r2
   1c180:	movle	r2, #0
   1c184:	movgt	r2, #1
   1c188:	cmp	r2, #0
   1c18c:	bne	1c280 <__assert_fail@plt+0xace0>
   1c190:	add	r6, r6, sl
   1c194:	cmp	fp, r6
   1c198:	movge	r3, #0
   1c19c:	andlt	r3, r3, #1
   1c1a0:	cmp	r3, #0
   1c1a4:	mov	r4, r6
   1c1a8:	bne	1c280 <__assert_fail@plt+0xace0>
   1c1ac:	cmp	r7, #0
   1c1b0:	blt	1c298 <__assert_fail@plt+0xacf8>
   1c1b4:	beq	1c1e0 <__assert_fail@plt+0xac40>
   1c1b8:	cmp	r6, #0
   1c1bc:	blt	1c33c <__assert_fail@plt+0xad9c>
   1c1c0:	mov	r1, r7
   1c1c4:	mvn	r0, #-2147483648	; 0x80000000
   1c1c8:	bl	1d650 <__assert_fail@plt+0xc0b0>
   1c1cc:	cmp	r6, r0
   1c1d0:	movle	r0, #0
   1c1d4:	movgt	r0, #1
   1c1d8:	cmp	r0, #0
   1c1dc:	bne	1c280 <__assert_fail@plt+0xace0>
   1c1e0:	mul	r5, r6, r7
   1c1e4:	mov	r1, r5
   1c1e8:	mov	r0, r9
   1c1ec:	bl	1cefc <__assert_fail@plt+0xb95c>
   1c1f0:	cmp	r0, #0
   1c1f4:	beq	1c268 <__assert_fail@plt+0xacc8>
   1c1f8:	str	r4, [r8]
   1c1fc:	add	sp, sp, #12
   1c200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c204:	cmp	r7, #0
   1c208:	blt	1c2c4 <__assert_fail@plt+0xad24>
   1c20c:	beq	1c124 <__assert_fail@plt+0xab84>
   1c210:	cmp	r4, #0
   1c214:	blt	1c2f4 <__assert_fail@plt+0xad54>
   1c218:	mov	r1, r7
   1c21c:	mvn	r0, #-2147483648	; 0x80000000
   1c220:	str	r3, [sp, #4]
   1c224:	bl	1d650 <__assert_fail@plt+0xc0b0>
   1c228:	ldr	r3, [sp, #4]
   1c22c:	cmp	r0, r4
   1c230:	movge	r0, #0
   1c234:	movlt	r0, #1
   1c238:	cmp	r0, #0
   1c23c:	mvnne	r5, #-2147483648	; 0x80000000
   1c240:	bne	1c128 <__assert_fail@plt+0xab88>
   1c244:	mul	r5, r7, r4
   1c248:	cmp	r5, #63	; 0x3f
   1c24c:	bgt	1c150 <__assert_fail@plt+0xabb0>
   1c250:	b	1c124 <__assert_fail@plt+0xab84>
   1c254:	rsb	r1, r4, #-2147483648	; 0x80000000
   1c258:	cmp	r6, r1
   1c25c:	movge	r1, #0
   1c260:	movlt	r1, #1
   1c264:	b	1c0f0 <__assert_fail@plt+0xab50>
   1c268:	adds	r5, r5, #0
   1c26c:	movne	r5, #1
   1c270:	cmp	r9, #0
   1c274:	orreq	r5, r5, #1
   1c278:	cmp	r5, #0
   1c27c:	beq	1c1f8 <__assert_fail@plt+0xac58>
   1c280:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   1c284:	rsb	r2, sl, #-2147483648	; 0x80000000
   1c288:	cmp	r6, r2
   1c28c:	movge	r2, #0
   1c290:	movlt	r2, #1
   1c294:	b	1c188 <__assert_fail@plt+0xabe8>
   1c298:	cmp	r6, #0
   1c29c:	blt	1c320 <__assert_fail@plt+0xad80>
   1c2a0:	cmn	r7, #1
   1c2a4:	beq	1c1e0 <__assert_fail@plt+0xac40>
   1c2a8:	mov	r1, r7
   1c2ac:	mov	r0, #-2147483648	; 0x80000000
   1c2b0:	bl	1d650 <__assert_fail@plt+0xc0b0>
   1c2b4:	cmp	r6, r0
   1c2b8:	movle	r0, #0
   1c2bc:	movgt	r0, #1
   1c2c0:	b	1c1d8 <__assert_fail@plt+0xac38>
   1c2c4:	cmp	r4, #0
   1c2c8:	blt	1c360 <__assert_fail@plt+0xadc0>
   1c2cc:	cmn	r7, #1
   1c2d0:	beq	1c244 <__assert_fail@plt+0xaca4>
   1c2d4:	str	r3, [sp, #4]
   1c2d8:	mov	r1, r7
   1c2dc:	mov	r0, #-2147483648	; 0x80000000
   1c2e0:	b	1c224 <__assert_fail@plt+0xac84>
   1c2e4:	mov	r4, fp
   1c2e8:	b	1c218 <__assert_fail@plt+0xac78>
   1c2ec:	mov	r4, fp
   1c2f0:	b	1c2cc <__assert_fail@plt+0xad2c>
   1c2f4:	cmn	r4, #1
   1c2f8:	beq	1c244 <__assert_fail@plt+0xaca4>
   1c2fc:	mov	r1, r4
   1c300:	mov	r0, #-2147483648	; 0x80000000
   1c304:	str	r3, [sp, #4]
   1c308:	bl	1d650 <__assert_fail@plt+0xc0b0>
   1c30c:	ldr	r3, [sp, #4]
   1c310:	cmp	r7, r0
   1c314:	movle	r0, #0
   1c318:	movgt	r0, #1
   1c31c:	b	1c238 <__assert_fail@plt+0xac98>
   1c320:	mov	r1, r7
   1c324:	mvn	r0, #-2147483648	; 0x80000000
   1c328:	bl	1d650 <__assert_fail@plt+0xc0b0>
   1c32c:	cmp	r6, r0
   1c330:	movge	r0, #0
   1c334:	movlt	r0, #1
   1c338:	b	1c1d8 <__assert_fail@plt+0xac38>
   1c33c:	cmn	r6, #1
   1c340:	beq	1c1e0 <__assert_fail@plt+0xac40>
   1c344:	mov	r1, r6
   1c348:	mov	r0, #-2147483648	; 0x80000000
   1c34c:	bl	1d650 <__assert_fail@plt+0xc0b0>
   1c350:	cmp	r7, r0
   1c354:	movle	r0, #0
   1c358:	movgt	r0, #1
   1c35c:	b	1c1d8 <__assert_fail@plt+0xac38>
   1c360:	mov	r1, r7
   1c364:	mvn	r0, #-2147483648	; 0x80000000
   1c368:	str	r3, [sp, #4]
   1c36c:	bl	1d650 <__assert_fail@plt+0xc0b0>
   1c370:	ldr	r3, [sp, #4]
   1c374:	cmp	r0, r4
   1c378:	movle	r0, #0
   1c37c:	movgt	r0, #1
   1c380:	b	1c238 <__assert_fail@plt+0xac98>
   1c384:	push	{r4, lr}
   1c388:	mov	r1, #1
   1c38c:	bl	1cacc <__assert_fail@plt+0xb52c>
   1c390:	cmp	r0, #0
   1c394:	popne	{r4, pc}
   1c398:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   1c39c:	push	{r4, lr}
   1c3a0:	mov	r1, #1
   1c3a4:	bl	1cacc <__assert_fail@plt+0xb52c>
   1c3a8:	cmp	r0, #0
   1c3ac:	popne	{r4, pc}
   1c3b0:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   1c3b4:	push	{r4, lr}
   1c3b8:	bl	1cacc <__assert_fail@plt+0xb52c>
   1c3bc:	cmp	r0, #0
   1c3c0:	popne	{r4, pc}
   1c3c4:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   1c3c8:	push	{r4, lr}
   1c3cc:	bl	1cacc <__assert_fail@plt+0xb52c>
   1c3d0:	cmp	r0, #0
   1c3d4:	popne	{r4, pc}
   1c3d8:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   1c3dc:	push	{r4, r5, r6, lr}
   1c3e0:	mov	r6, r0
   1c3e4:	mov	r0, r1
   1c3e8:	mov	r4, r1
   1c3ec:	bl	1ce7c <__assert_fail@plt+0xb8dc>
   1c3f0:	subs	r5, r0, #0
   1c3f4:	beq	1c40c <__assert_fail@plt+0xae6c>
   1c3f8:	mov	r2, r4
   1c3fc:	mov	r1, r6
   1c400:	bl	1124c <memcpy@plt>
   1c404:	mov	r0, r5
   1c408:	pop	{r4, r5, r6, pc}
   1c40c:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   1c410:	push	{r4, r5, r6, lr}
   1c414:	mov	r6, r0
   1c418:	mov	r0, r1
   1c41c:	mov	r4, r1
   1c420:	bl	1ce7c <__assert_fail@plt+0xb8dc>
   1c424:	subs	r5, r0, #0
   1c428:	beq	1c440 <__assert_fail@plt+0xaea0>
   1c42c:	mov	r2, r4
   1c430:	mov	r1, r6
   1c434:	bl	1124c <memcpy@plt>
   1c438:	mov	r0, r5
   1c43c:	pop	{r4, r5, r6, pc}
   1c440:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   1c444:	push	{r4, r5, r6, lr}
   1c448:	mov	r6, r0
   1c44c:	add	r0, r1, #1
   1c450:	mov	r4, r1
   1c454:	bl	1ce7c <__assert_fail@plt+0xb8dc>
   1c458:	subs	r5, r0, #0
   1c45c:	beq	1c47c <__assert_fail@plt+0xaedc>
   1c460:	mov	r3, #0
   1c464:	mov	r1, r6
   1c468:	strb	r3, [r5, r4]
   1c46c:	mov	r2, r4
   1c470:	bl	1124c <memcpy@plt>
   1c474:	mov	r0, r5
   1c478:	pop	{r4, r5, r6, pc}
   1c47c:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   1c480:	push	{r4, r5, r6, lr}
   1c484:	mov	r6, r0
   1c488:	bl	113f0 <strlen@plt>
   1c48c:	add	r4, r0, #1
   1c490:	mov	r0, r4
   1c494:	bl	1ce7c <__assert_fail@plt+0xb8dc>
   1c498:	subs	r5, r0, #0
   1c49c:	beq	1c4b4 <__assert_fail@plt+0xaf14>
   1c4a0:	mov	r2, r4
   1c4a4:	mov	r1, r6
   1c4a8:	bl	1124c <memcpy@plt>
   1c4ac:	mov	r0, r5
   1c4b0:	pop	{r4, r5, r6, pc}
   1c4b4:	bl	1c4b8 <__assert_fail@plt+0xaf18>
   1c4b8:	ldr	r3, [pc, #44]	; 1c4ec <__assert_fail@plt+0xaf4c>
   1c4bc:	push	{r4, lr}
   1c4c0:	mov	r2, #5
   1c4c4:	ldr	r1, [pc, #36]	; 1c4f0 <__assert_fail@plt+0xaf50>
   1c4c8:	mov	r0, #0
   1c4cc:	ldr	r4, [r3]
   1c4d0:	bl	11288 <dcgettext@plt>
   1c4d4:	ldr	r2, [pc, #24]	; 1c4f4 <__assert_fail@plt+0xaf54>
   1c4d8:	mov	r1, #0
   1c4dc:	mov	r3, r0
   1c4e0:	mov	r0, r4
   1c4e4:	bl	11354 <error@plt>
   1c4e8:	bl	11570 <abort@plt>
   1c4ec:	andeq	r0, r3, r4, ror r1
   1c4f0:	andeq	pc, r1, r0, asr #24
   1c4f4:			; <UNDEFINED> instruction: 0x0001f7b0
   1c4f8:	cmp	r2, #36	; 0x24
   1c4fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c500:	sub	sp, sp, #8
   1c504:	bhi	1caa4 <__assert_fail@plt+0xb504>
   1c508:	cmp	r1, #0
   1c50c:	mov	r6, r1
   1c510:	mov	r9, r2
   1c514:	mov	r5, r0
   1c518:	mov	r8, r3
   1c51c:	addeq	r6, sp, #4
   1c520:	bl	11420 <__errno_location@plt>
   1c524:	mov	r3, #0
   1c528:	str	r3, [r0]
   1c52c:	mov	r7, r0
   1c530:	bl	113c0 <__ctype_b_loc@plt>
   1c534:	ldrb	r1, [r5]
   1c538:	mov	r2, r5
   1c53c:	ldr	r0, [r0]
   1c540:	b	1c548 <__assert_fail@plt+0xafa8>
   1c544:	ldrb	r1, [r2, #1]!
   1c548:	lsl	r3, r1, #1
   1c54c:	ldrh	r3, [r0, r3]
   1c550:	ands	r4, r3, #8192	; 0x2000
   1c554:	bne	1c544 <__assert_fail@plt+0xafa4>
   1c558:	cmp	r1, #45	; 0x2d
   1c55c:	bne	1c570 <__assert_fail@plt+0xafd0>
   1c560:	mov	r4, #4
   1c564:	mov	r0, r4
   1c568:	add	sp, sp, #8
   1c56c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c570:	mov	r2, r9
   1c574:	mov	r1, r6
   1c578:	mov	r0, r5
   1c57c:	bl	113e4 <strtoul@plt>
   1c580:	ldr	sl, [r6]
   1c584:	cmp	r5, sl
   1c588:	mov	r9, r0
   1c58c:	beq	1c5d4 <__assert_fail@plt+0xb034>
   1c590:	ldr	r4, [r7]
   1c594:	cmp	r4, #0
   1c598:	bne	1c5c4 <__assert_fail@plt+0xb024>
   1c59c:	ldr	r3, [sp, #40]	; 0x28
   1c5a0:	cmp	r3, #0
   1c5a4:	beq	1c5b4 <__assert_fail@plt+0xb014>
   1c5a8:	ldrb	r5, [sl]
   1c5ac:	cmp	r5, #0
   1c5b0:	bne	1c604 <__assert_fail@plt+0xb064>
   1c5b4:	mov	r0, r4
   1c5b8:	str	r9, [r8]
   1c5bc:	add	sp, sp, #8
   1c5c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c5c4:	cmp	r4, #34	; 0x22
   1c5c8:	bne	1c560 <__assert_fail@plt+0xafc0>
   1c5cc:	mov	r4, #1
   1c5d0:	b	1c59c <__assert_fail@plt+0xaffc>
   1c5d4:	ldr	r3, [sp, #40]	; 0x28
   1c5d8:	cmp	r3, #0
   1c5dc:	beq	1c560 <__assert_fail@plt+0xafc0>
   1c5e0:	ldrb	r5, [sl]
   1c5e4:	cmp	r5, #0
   1c5e8:	beq	1c560 <__assert_fail@plt+0xafc0>
   1c5ec:	mov	r1, r5
   1c5f0:	mov	r0, r3
   1c5f4:	bl	113fc <strchr@plt>
   1c5f8:	cmp	r0, #0
   1c5fc:	movne	r9, #1
   1c600:	beq	1c560 <__assert_fail@plt+0xafc0>
   1c604:	mov	r1, r5
   1c608:	ldr	r0, [sp, #40]	; 0x28
   1c60c:	bl	113fc <strchr@plt>
   1c610:	cmp	r0, #0
   1c614:	beq	1ca70 <__assert_fail@plt+0xb4d0>
   1c618:	sub	r3, r5, #69	; 0x45
   1c61c:	cmp	r3, #47	; 0x2f
   1c620:	ldrls	pc, [pc, r3, lsl #2]
   1c624:	b	1c6e8 <__assert_fail@plt+0xb148>
   1c628:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c62c:	andeq	ip, r1, r8, ror #13
   1c630:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c634:	andeq	ip, r1, r8, ror #13
   1c638:	andeq	ip, r1, r8, ror #13
   1c63c:	andeq	ip, r1, r8, ror #13
   1c640:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c644:	andeq	ip, r1, r8, ror #13
   1c648:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c64c:	andeq	ip, r1, r8, ror #13
   1c650:	andeq	ip, r1, r8, ror #13
   1c654:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c658:	andeq	ip, r1, r8, ror #13
   1c65c:	andeq	ip, r1, r8, ror #13
   1c660:	andeq	ip, r1, r8, ror #13
   1c664:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c668:	andeq	ip, r1, r8, ror #13
   1c66c:	andeq	ip, r1, r8, ror #13
   1c670:	andeq	ip, r1, r8, ror #13
   1c674:	andeq	ip, r1, r8, ror #13
   1c678:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c67c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c680:	andeq	ip, r1, r8, ror #13
   1c684:	andeq	ip, r1, r8, ror #13
   1c688:	andeq	ip, r1, r8, ror #13
   1c68c:	andeq	ip, r1, r8, ror #13
   1c690:	andeq	ip, r1, r8, ror #13
   1c694:	andeq	ip, r1, r8, ror #13
   1c698:	andeq	ip, r1, r8, ror #13
   1c69c:	andeq	ip, r1, r8, ror #13
   1c6a0:	andeq	ip, r1, r8, ror #13
   1c6a4:	andeq	ip, r1, r8, ror #13
   1c6a8:	andeq	ip, r1, r8, ror #13
   1c6ac:	andeq	ip, r1, r8, ror #13
   1c6b0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c6b4:	andeq	ip, r1, r8, ror #13
   1c6b8:	andeq	ip, r1, r8, ror #13
   1c6bc:	andeq	ip, r1, r8, ror #13
   1c6c0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c6c4:	andeq	ip, r1, r8, ror #13
   1c6c8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c6cc:	andeq	ip, r1, r8, ror #13
   1c6d0:	andeq	ip, r1, r8, ror #13
   1c6d4:	andeq	ip, r1, r8, ror #13
   1c6d8:	andeq	ip, r1, r8, ror #13
   1c6dc:	andeq	ip, r1, r8, ror #13
   1c6e0:	andeq	ip, r1, r8, ror #13
   1c6e4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c6e8:	ldr	r0, [pc, #968]	; 1cab8 <__assert_fail@plt+0xb518>
   1c6ec:	mov	r2, #1024	; 0x400
   1c6f0:	mov	r1, #1
   1c6f4:	sub	r5, r5, #66	; 0x42
   1c6f8:	cmp	r5, #53	; 0x35
   1c6fc:	ldrls	pc, [pc, r5, lsl #2]
   1c700:	b	1ca70 <__assert_fail@plt+0xb4d0>
   1c704:	andeq	ip, r1, r0, lsr sl
   1c708:	andeq	ip, r1, r0, ror sl
   1c70c:	andeq	ip, r1, r0, ror sl
   1c710:	strdeq	ip, [r1], -r4
   1c714:	andeq	ip, r1, r0, ror sl
   1c718:	andeq	ip, r1, r4, asr #20
   1c71c:	andeq	ip, r1, r0, ror sl
   1c720:	andeq	ip, r1, r0, ror sl
   1c724:	andeq	ip, r1, r0, ror sl
   1c728:	andeq	ip, r1, r8, ror #19
   1c72c:	andeq	ip, r1, r0, ror sl
   1c730:	andeq	ip, r1, r8, asr #19
   1c734:	andeq	ip, r1, r0, ror sl
   1c738:	andeq	ip, r1, r0, ror sl
   1c73c:	andeq	ip, r1, r8, ror #18
   1c740:	andeq	ip, r1, r0, ror sl
   1c744:	andeq	ip, r1, r0, ror sl
   1c748:	andeq	ip, r1, r0, ror sl
   1c74c:	andeq	ip, r1, r4, lsr r9
   1c750:	andeq	ip, r1, r0, ror sl
   1c754:	andeq	ip, r1, r0, ror sl
   1c758:	andeq	ip, r1, r0, ror sl
   1c75c:	andeq	ip, r1, r0, ror sl
   1c760:	strdeq	ip, [r1], -r0
   1c764:	andeq	ip, r1, ip, ror #16
   1c768:	andeq	ip, r1, r0, ror sl
   1c76c:	andeq	ip, r1, r0, ror sl
   1c770:	andeq	ip, r1, r0, ror sl
   1c774:	andeq	ip, r1, r0, ror sl
   1c778:	andeq	ip, r1, r0, ror sl
   1c77c:	andeq	ip, r1, r0, ror sl
   1c780:	andeq	ip, r1, r0, ror sl
   1c784:	andeq	ip, r1, r0, asr r8
   1c788:	andeq	ip, r1, r8, asr #16
   1c78c:	andeq	ip, r1, r0, ror sl
   1c790:	andeq	ip, r1, r0, ror sl
   1c794:	andeq	ip, r1, r0, ror sl
   1c798:	andeq	ip, r1, r4, asr #20
   1c79c:	andeq	ip, r1, r0, ror sl
   1c7a0:	andeq	ip, r1, r0, ror sl
   1c7a4:	andeq	ip, r1, r0, ror sl
   1c7a8:	andeq	ip, r1, r8, ror #19
   1c7ac:	andeq	ip, r1, r0, ror sl
   1c7b0:	andeq	ip, r1, r8, asr #19
   1c7b4:	andeq	ip, r1, r0, ror sl
   1c7b8:	andeq	ip, r1, r0, ror sl
   1c7bc:	andeq	ip, r1, r0, ror sl
   1c7c0:	andeq	ip, r1, r0, ror sl
   1c7c4:	andeq	ip, r1, r0, ror sl
   1c7c8:	andeq	ip, r1, r0, ror sl
   1c7cc:	andeq	ip, r1, r4, lsr r9
   1c7d0:	andeq	ip, r1, r0, ror sl
   1c7d4:	andeq	ip, r1, r0, ror sl
   1c7d8:	andeq	ip, r1, ip, lsl r8
   1c7dc:	mov	r1, #48	; 0x30
   1c7e0:	ldr	r0, [sp, #40]	; 0x28
   1c7e4:	bl	113fc <strchr@plt>
   1c7e8:	cmp	r0, #0
   1c7ec:	beq	1c6e8 <__assert_fail@plt+0xb148>
   1c7f0:	ldrb	r3, [sl, #1]
   1c7f4:	cmp	r3, #68	; 0x44
   1c7f8:	beq	1c80c <__assert_fail@plt+0xb26c>
   1c7fc:	cmp	r3, #105	; 0x69
   1c800:	beq	1ca7c <__assert_fail@plt+0xb4dc>
   1c804:	cmp	r3, #66	; 0x42
   1c808:	bne	1c6e8 <__assert_fail@plt+0xb148>
   1c80c:	ldr	r0, [pc, #680]	; 1cabc <__assert_fail@plt+0xb51c>
   1c810:	mov	r2, #1000	; 0x3e8
   1c814:	mov	r1, #2
   1c818:	b	1c6f4 <__assert_fail@plt+0xb154>
   1c81c:	cmp	r9, #0
   1c820:	blt	1c860 <__assert_fail@plt+0xb2c0>
   1c824:	lsl	r9, r9, #1
   1c828:	mov	r3, #0
   1c82c:	add	r2, sl, r1
   1c830:	str	r2, [r6]
   1c834:	ldrb	r2, [sl, r1]
   1c838:	orr	r4, r4, r3
   1c83c:	cmp	r2, #0
   1c840:	orrne	r4, r4, #2
   1c844:	b	1c5b4 <__assert_fail@plt+0xb014>
   1c848:	mov	r3, #0
   1c84c:	b	1c82c <__assert_fail@plt+0xb28c>
   1c850:	cmp	r9, #8388608	; 0x800000
   1c854:	lslcc	r9, r9, #9
   1c858:	movcc	r3, #0
   1c85c:	bcc	1c82c <__assert_fail@plt+0xb28c>
   1c860:	mvn	r9, #0
   1c864:	mov	r3, #1
   1c868:	b	1c82c <__assert_fail@plt+0xb28c>
   1c86c:	mul	r3, r9, r2
   1c870:	cmp	r9, r0
   1c874:	mvnhi	r3, #0
   1c878:	cmp	r0, r3
   1c87c:	mul	ip, r3, r2
   1c880:	mvncc	ip, #0
   1c884:	cmp	r0, r3
   1c888:	mul	lr, ip, r2
   1c88c:	movcs	r3, #0
   1c890:	movcc	r3, #1
   1c894:	cmp	r9, r0
   1c898:	orrhi	r3, r3, #1
   1c89c:	cmp	r0, ip
   1c8a0:	mvncc	lr, #0
   1c8a4:	orrcc	r3, r3, #1
   1c8a8:	mul	ip, lr, r2
   1c8ac:	cmp	r0, lr
   1c8b0:	mvncc	ip, #0
   1c8b4:	orrcc	r3, r3, #1
   1c8b8:	mul	lr, ip, r2
   1c8bc:	cmp	r0, ip
   1c8c0:	mvncc	lr, #0
   1c8c4:	orrcc	r3, r3, #1
   1c8c8:	mul	ip, lr, r2
   1c8cc:	cmp	r0, lr
   1c8d0:	mvncc	ip, #0
   1c8d4:	orrcc	r3, r3, #1
   1c8d8:	mul	r2, ip, r2
   1c8dc:	cmp	r0, ip
   1c8e0:	movcs	r9, r2
   1c8e4:	mvncc	r9, #0
   1c8e8:	orrcc	r3, r3, #1
   1c8ec:	b	1c82c <__assert_fail@plt+0xb28c>
   1c8f0:	mul	r3, r9, r2
   1c8f4:	cmp	r9, r0
   1c8f8:	mvnhi	r3, #0
   1c8fc:	cmp	r0, r3
   1c900:	mul	lr, r3, r2
   1c904:	mvncc	lr, #0
   1c908:	cmp	r0, r3
   1c90c:	movcs	r3, #0
   1c910:	movcc	r3, #1
   1c914:	mul	ip, lr, r2
   1c918:	cmp	r9, r0
   1c91c:	orrhi	r3, r3, #1
   1c920:	cmp	r0, lr
   1c924:	mvncc	ip, #0
   1c928:	orrcc	r3, r3, #1
   1c92c:	mul	lr, ip, r2
   1c930:	b	1c89c <__assert_fail@plt+0xb2fc>
   1c934:	mul	r3, r9, r2
   1c938:	cmp	r9, r0
   1c93c:	mvnhi	r3, #0
   1c940:	cmp	r0, r3
   1c944:	mul	lr, r3, r2
   1c948:	mvncc	lr, #0
   1c94c:	cmp	r0, r3
   1c950:	movcs	r3, #0
   1c954:	movcc	r3, #1
   1c958:	mul	ip, lr, r2
   1c95c:	cmp	r9, r0
   1c960:	orrhi	r3, r3, #1
   1c964:	b	1c8cc <__assert_fail@plt+0xb32c>
   1c968:	mul	r3, r9, r2
   1c96c:	cmp	r9, r0
   1c970:	mvnhi	r3, #0
   1c974:	cmp	r0, r3
   1c978:	mul	ip, r3, r2
   1c97c:	movcc	r3, #1
   1c980:	movcs	r3, #0
   1c984:	mvncc	ip, #0
   1c988:	cmp	r9, r0
   1c98c:	orrhi	r3, r3, #1
   1c990:	mul	lr, ip, r2
   1c994:	cmp	ip, r0
   1c998:	mvnhi	lr, #0
   1c99c:	orrhi	r3, r3, #1
   1c9a0:	mul	ip, lr, r2
   1c9a4:	cmp	lr, r0
   1c9a8:	mvnhi	ip, #0
   1c9ac:	orrhi	r3, r3, #1
   1c9b0:	mul	r2, ip, r2
   1c9b4:	cmp	ip, r0
   1c9b8:	movls	r9, r2
   1c9bc:	mvnhi	r9, #0
   1c9c0:	orrhi	r3, r3, #1
   1c9c4:	b	1c82c <__assert_fail@plt+0xb28c>
   1c9c8:	cmp	r9, r0
   1c9cc:	bhi	1ca98 <__assert_fail@plt+0xb4f8>
   1c9d0:	mul	r9, r9, r2
   1c9d4:	cmp	r0, r9
   1c9d8:	bcc	1ca98 <__assert_fail@plt+0xb4f8>
   1c9dc:	mul	r9, r2, r9
   1c9e0:	mov	r3, #0
   1c9e4:	b	1c82c <__assert_fail@plt+0xb28c>
   1c9e8:	cmp	r9, r0
   1c9ec:	bhi	1c860 <__assert_fail@plt+0xb2c0>
   1c9f0:	b	1c9dc <__assert_fail@plt+0xb43c>
   1c9f4:	mul	r3, r9, r2
   1c9f8:	cmp	r9, r0
   1c9fc:	mvnhi	r3, #0
   1ca00:	cmp	r3, r0
   1ca04:	mul	lr, r3, r2
   1ca08:	mvnhi	lr, #0
   1ca0c:	cmp	r3, r0
   1ca10:	cmpls	r9, r0
   1ca14:	movhi	r3, #1
   1ca18:	movls	r3, #0
   1ca1c:	cmp	r0, lr
   1ca20:	mul	ip, lr, r2
   1ca24:	orrcc	r3, r3, #1
   1ca28:	mvncc	ip, #0
   1ca2c:	b	1c990 <__assert_fail@plt+0xb3f0>
   1ca30:	cmp	r9, #4194304	; 0x400000
   1ca34:	lslcc	r9, r9, #10
   1ca38:	movcc	r3, #0
   1ca3c:	bcc	1c82c <__assert_fail@plt+0xb28c>
   1ca40:	b	1c860 <__assert_fail@plt+0xb2c0>
   1ca44:	mul	r3, r9, r2
   1ca48:	cmp	r9, r0
   1ca4c:	mvnhi	r3, #0
   1ca50:	cmp	r3, r0
   1ca54:	mul	ip, r3, r2
   1ca58:	mvnhi	ip, #0
   1ca5c:	cmp	r3, r0
   1ca60:	cmpls	r9, r0
   1ca64:	movhi	r3, #1
   1ca68:	movls	r3, #0
   1ca6c:	b	1c8d8 <__assert_fail@plt+0xb338>
   1ca70:	str	r9, [r8]
   1ca74:	orr	r4, r4, #2
   1ca78:	b	1c564 <__assert_fail@plt+0xafc4>
   1ca7c:	ldrb	r1, [sl, #2]
   1ca80:	ldr	r0, [pc, #48]	; 1cab8 <__assert_fail@plt+0xb518>
   1ca84:	mov	r2, #1024	; 0x400
   1ca88:	cmp	r1, #66	; 0x42
   1ca8c:	movne	r1, #1
   1ca90:	moveq	r1, #3
   1ca94:	b	1c6f4 <__assert_fail@plt+0xb154>
   1ca98:	mov	r3, #1
   1ca9c:	mvn	r9, #0
   1caa0:	b	1c82c <__assert_fail@plt+0xb28c>
   1caa4:	ldr	r3, [pc, #20]	; 1cac0 <__assert_fail@plt+0xb520>
   1caa8:	mov	r2, #84	; 0x54
   1caac:	ldr	r1, [pc, #16]	; 1cac4 <__assert_fail@plt+0xb524>
   1cab0:	ldr	r0, [pc, #16]	; 1cac8 <__assert_fail@plt+0xb528>
   1cab4:	bl	115a0 <__assert_fail@plt>
   1cab8:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   1cabc:	subeq	r8, r1, r7, lsr r9
   1cac0:	andeq	pc, r1, r4, asr ip	; <UNPREDICTABLE>
   1cac4:	andeq	pc, r1, r0, ror #24
   1cac8:	andeq	pc, r1, ip, ror #24
   1cacc:	cmp	r1, #0
   1cad0:	cmpne	r0, #0
   1cad4:	moveq	r1, #1
   1cad8:	moveq	r0, r1
   1cadc:	umull	r2, r3, r0, r1
   1cae0:	adds	r3, r3, #0
   1cae4:	movne	r3, #1
   1cae8:	cmp	r2, #0
   1caec:	blt	1cafc <__assert_fail@plt+0xb55c>
   1caf0:	cmp	r3, #0
   1caf4:	bne	1cafc <__assert_fail@plt+0xb55c>
   1caf8:	b	111c8 <calloc@plt>
   1cafc:	push	{r4, lr}
   1cb00:	bl	11420 <__errno_location@plt>
   1cb04:	mov	r3, #12
   1cb08:	str	r3, [r0]
   1cb0c:	mov	r0, #0
   1cb10:	pop	{r4, pc}
   1cb14:	push	{r1, r2, r3}
   1cb18:	push	{r4, r5, r6, r7, lr}
   1cb1c:	sub	sp, sp, #8
   1cb20:	add	r3, sp, #32
   1cb24:	ldr	r1, [sp, #28]
   1cb28:	str	r3, [sp, #4]
   1cb2c:	cmp	r1, #0
   1cb30:	beq	1cbc8 <__assert_fail@plt+0xb628>
   1cb34:	ldr	r2, [pc, #412]	; 1ccd8 <__assert_fail@plt+0xb738>
   1cb38:	mov	r5, r0
   1cb3c:	cmp	r1, r2
   1cb40:	bne	1cb8c <__assert_fail@plt+0xb5ec>
   1cb44:	ldr	r6, [pc, #400]	; 1ccdc <__assert_fail@plt+0xb73c>
   1cb48:	ldr	r7, [r3]
   1cb4c:	add	r2, sp, #36	; 0x24
   1cb50:	ldr	r3, [r6]
   1cb54:	str	r2, [sp, #4]
   1cb58:	cmp	r3, #0
   1cb5c:	mov	r2, r7
   1cb60:	blt	1cc8c <__assert_fail@plt+0xb6ec>
   1cb64:	bl	114b0 <fcntl64@plt>
   1cb68:	subs	r4, r0, #0
   1cb6c:	blt	1cc10 <__assert_fail@plt+0xb670>
   1cb70:	mov	r3, #1
   1cb74:	str	r3, [r6]
   1cb78:	mov	r0, r4
   1cb7c:	add	sp, sp, #8
   1cb80:	pop	{r4, r5, r6, r7, lr}
   1cb84:	add	sp, sp, #12
   1cb88:	bx	lr
   1cb8c:	cmp	r1, #11
   1cb90:	beq	1cbb8 <__assert_fail@plt+0xb618>
   1cb94:	bgt	1cbd8 <__assert_fail@plt+0xb638>
   1cb98:	cmp	r1, #3
   1cb9c:	beq	1cbb8 <__assert_fail@plt+0xb618>
   1cba0:	ble	1cccc <__assert_fail@plt+0xb72c>
   1cba4:	cmp	r1, #8
   1cba8:	beq	1cbf8 <__assert_fail@plt+0xb658>
   1cbac:	ble	1cbf8 <__assert_fail@plt+0xb658>
   1cbb0:	cmp	r1, #9
   1cbb4:	bne	1cbf8 <__assert_fail@plt+0xb658>
   1cbb8:	mov	r0, r5
   1cbbc:	bl	114b0 <fcntl64@plt>
   1cbc0:	mov	r4, r0
   1cbc4:	b	1cb78 <__assert_fail@plt+0xb5d8>
   1cbc8:	ldr	r2, [sp, #32]
   1cbcc:	bl	114b0 <fcntl64@plt>
   1cbd0:	mov	r4, r0
   1cbd4:	b	1cb78 <__assert_fail@plt+0xb5d8>
   1cbd8:	ldr	r3, [pc, #256]	; 1cce0 <__assert_fail@plt+0xb740>
   1cbdc:	cmp	r1, r3
   1cbe0:	bgt	1ccac <__assert_fail@plt+0xb70c>
   1cbe4:	cmp	r1, r2
   1cbe8:	bge	1cbf8 <__assert_fail@plt+0xb658>
   1cbec:	sub	r3, r3, #6
   1cbf0:	cmp	r1, r3
   1cbf4:	beq	1cbb8 <__assert_fail@plt+0xb618>
   1cbf8:	ldr	r3, [sp, #4]
   1cbfc:	mov	r0, r5
   1cc00:	ldr	r2, [r3]
   1cc04:	bl	114b0 <fcntl64@plt>
   1cc08:	mov	r4, r0
   1cc0c:	b	1cb78 <__assert_fail@plt+0xb5d8>
   1cc10:	bl	11420 <__errno_location@plt>
   1cc14:	ldr	r3, [r0]
   1cc18:	cmp	r3, #22
   1cc1c:	bne	1cb70 <__assert_fail@plt+0xb5d0>
   1cc20:	mov	r2, r7
   1cc24:	mov	r0, r5
   1cc28:	mov	r1, #0
   1cc2c:	bl	114b0 <fcntl64@plt>
   1cc30:	subs	r4, r0, #0
   1cc34:	blt	1cb78 <__assert_fail@plt+0xb5d8>
   1cc38:	mvn	r3, #0
   1cc3c:	str	r3, [r6]
   1cc40:	mov	r1, #1
   1cc44:	mov	r0, r4
   1cc48:	bl	114b0 <fcntl64@plt>
   1cc4c:	subs	r2, r0, #0
   1cc50:	blt	1cc6c <__assert_fail@plt+0xb6cc>
   1cc54:	orr	r2, r2, #1
   1cc58:	mov	r1, #2
   1cc5c:	mov	r0, r4
   1cc60:	bl	114b0 <fcntl64@plt>
   1cc64:	cmn	r0, #1
   1cc68:	bne	1cb78 <__assert_fail@plt+0xb5d8>
   1cc6c:	bl	11420 <__errno_location@plt>
   1cc70:	mov	r5, r0
   1cc74:	mov	r0, r4
   1cc78:	ldr	r6, [r5]
   1cc7c:	mvn	r4, #0
   1cc80:	bl	11588 <close@plt>
   1cc84:	str	r6, [r5]
   1cc88:	b	1cb78 <__assert_fail@plt+0xb5d8>
   1cc8c:	mov	r1, #0
   1cc90:	bl	114b0 <fcntl64@plt>
   1cc94:	subs	r4, r0, #0
   1cc98:	blt	1cb78 <__assert_fail@plt+0xb5d8>
   1cc9c:	ldr	r3, [r6]
   1cca0:	cmn	r3, #1
   1cca4:	beq	1cc40 <__assert_fail@plt+0xb6a0>
   1cca8:	b	1cb78 <__assert_fail@plt+0xb5d8>
   1ccac:	ldr	r3, [pc, #48]	; 1cce4 <__assert_fail@plt+0xb744>
   1ccb0:	cmp	r1, r3
   1ccb4:	beq	1cbf8 <__assert_fail@plt+0xb658>
   1ccb8:	blt	1cbb8 <__assert_fail@plt+0xb618>
   1ccbc:	add	r3, r3, #1
   1ccc0:	cmp	r1, r3
   1ccc4:	bne	1cbf8 <__assert_fail@plt+0xb658>
   1ccc8:	b	1cbb8 <__assert_fail@plt+0xb618>
   1cccc:	cmp	r1, #1
   1ccd0:	bne	1cbf8 <__assert_fail@plt+0xb658>
   1ccd4:	b	1cbb8 <__assert_fail@plt+0xb618>
   1ccd8:	andeq	r0, r0, r6, lsl #8
   1ccdc:	andeq	r0, r3, r8, ror #7
   1cce0:	andeq	r0, r0, r7, lsl #8
   1cce4:	andeq	r0, r0, r9, lsl #8
   1cce8:	push	{r4, lr}
   1ccec:	subs	r4, r0, #0
   1ccf0:	sub	sp, sp, #8
   1ccf4:	beq	1cd10 <__assert_fail@plt+0xb770>
   1ccf8:	bl	1139c <__freading@plt>
   1ccfc:	cmp	r0, #0
   1cd00:	beq	1cd10 <__assert_fail@plt+0xb770>
   1cd04:	ldr	r3, [r4]
   1cd08:	tst	r3, #256	; 0x100
   1cd0c:	bne	1cd20 <__assert_fail@plt+0xb780>
   1cd10:	mov	r0, r4
   1cd14:	add	sp, sp, #8
   1cd18:	pop	{r4, lr}
   1cd1c:	b	11210 <fflush@plt>
   1cd20:	mov	r3, #1
   1cd24:	str	r3, [sp]
   1cd28:	mov	r2, #0
   1cd2c:	mov	r3, #0
   1cd30:	mov	r0, r4
   1cd34:	bl	1cddc <__assert_fail@plt+0xb83c>
   1cd38:	mov	r0, r4
   1cd3c:	add	sp, sp, #8
   1cd40:	pop	{r4, lr}
   1cd44:	b	11210 <fflush@plt>
   1cd48:	ldr	r2, [r0, #20]
   1cd4c:	ldr	r3, [r0, #16]
   1cd50:	cmp	r2, r3
   1cd54:	bhi	1cd7c <__assert_fail@plt+0xb7dc>
   1cd58:	ldr	r3, [r0]
   1cd5c:	ldmib	r0, {r1, r2}
   1cd60:	ands	r3, r3, #256	; 0x100
   1cd64:	ldrne	r3, [r0, #44]	; 0x2c
   1cd68:	ldrne	r0, [r0, #36]	; 0x24
   1cd6c:	sub	r2, r2, r1
   1cd70:	subne	r3, r3, r0
   1cd74:	add	r0, r3, r2
   1cd78:	bx	lr
   1cd7c:	mov	r0, #0
   1cd80:	bx	lr
   1cd84:	push	{r4, r5, lr}
   1cd88:	sub	sp, sp, #12
   1cd8c:	mov	r5, r0
   1cd90:	bl	11420 <__errno_location@plt>
   1cd94:	mov	r2, #0
   1cd98:	mov	r4, r0
   1cd9c:	ldr	r3, [r0]
   1cda0:	str	r2, [r4]
   1cda4:	mov	r0, r5
   1cda8:	str	r3, [sp]
   1cdac:	str	r3, [sp, #4]
   1cdb0:	bl	11228 <free@plt>
   1cdb4:	ldr	r3, [r4]
   1cdb8:	add	r2, sp, #8
   1cdbc:	cmp	r3, #0
   1cdc0:	moveq	r3, #4
   1cdc4:	movne	r3, #0
   1cdc8:	add	r3, r2, r3
   1cdcc:	ldr	r3, [r3, #-8]
   1cdd0:	str	r3, [r4]
   1cdd4:	add	sp, sp, #12
   1cdd8:	pop	{r4, r5, pc}
   1cddc:	push	{r4, r5, r6, r7, r8, lr}
   1cde0:	sub	sp, sp, #8
   1cde4:	ldmib	r0, {ip, lr}
   1cde8:	mov	r4, r0
   1cdec:	ldr	r5, [sp, #32]
   1cdf0:	cmp	lr, ip
   1cdf4:	beq	1ce0c <__assert_fail@plt+0xb86c>
   1cdf8:	str	r5, [sp, #32]
   1cdfc:	mov	r0, r4
   1ce00:	add	sp, sp, #8
   1ce04:	pop	{r4, r5, r6, r7, r8, lr}
   1ce08:	b	114a4 <fseeko64@plt>
   1ce0c:	ldr	lr, [r0, #20]
   1ce10:	ldr	ip, [r0, #16]
   1ce14:	cmp	lr, ip
   1ce18:	bne	1cdf8 <__assert_fail@plt+0xb858>
   1ce1c:	ldr	r8, [r0, #36]	; 0x24
   1ce20:	cmp	r8, #0
   1ce24:	bne	1cdf8 <__assert_fail@plt+0xb858>
   1ce28:	mov	r6, r2
   1ce2c:	mov	r7, r3
   1ce30:	bl	11468 <fileno@plt>
   1ce34:	mov	r2, r6
   1ce38:	mov	r3, r7
   1ce3c:	str	r5, [sp]
   1ce40:	bl	1130c <lseek64@plt>
   1ce44:	mvn	r3, #0
   1ce48:	mvn	r2, #0
   1ce4c:	cmp	r1, r3
   1ce50:	cmpeq	r0, r2
   1ce54:	beq	1ce74 <__assert_fail@plt+0xb8d4>
   1ce58:	ldr	r3, [r4]
   1ce5c:	strd	r0, [r4, #80]	; 0x50
   1ce60:	mov	r0, r8
   1ce64:	bic	r3, r3, #16
   1ce68:	str	r3, [r4]
   1ce6c:	add	sp, sp, #8
   1ce70:	pop	{r4, r5, r6, r7, r8, pc}
   1ce74:	mvn	r0, #0
   1ce78:	b	1ce6c <__assert_fail@plt+0xb8cc>
   1ce7c:	cmp	r0, #0
   1ce80:	moveq	r0, #1
   1ce84:	cmp	r0, #0
   1ce88:	blt	1ce90 <__assert_fail@plt+0xb8f0>
   1ce8c:	b	11384 <malloc@plt>
   1ce90:	push	{r4, lr}
   1ce94:	bl	11420 <__errno_location@plt>
   1ce98:	mov	r3, #12
   1ce9c:	str	r3, [r0]
   1cea0:	mov	r0, #0
   1cea4:	pop	{r4, pc}
   1cea8:	push	{r4, r5, r6, r7, lr}
   1ceac:	subs	r6, r0, #0
   1ceb0:	sub	sp, sp, #12
   1ceb4:	addeq	r6, sp, #4
   1ceb8:	mov	r0, r6
   1cebc:	mov	r5, r2
   1cec0:	mov	r7, r1
   1cec4:	bl	11348 <mbrtowc@plt>
   1cec8:	cmp	r5, #0
   1cecc:	cmnne	r0, #3
   1ced0:	mov	r4, r0
   1ced4:	bls	1cef0 <__assert_fail@plt+0xb950>
   1ced8:	mov	r0, #0
   1cedc:	bl	1d024 <__assert_fail@plt+0xba84>
   1cee0:	cmp	r0, #0
   1cee4:	moveq	r4, #1
   1cee8:	ldrbeq	r3, [r7]
   1ceec:	streq	r3, [r6]
   1cef0:	mov	r0, r4
   1cef4:	add	sp, sp, #12
   1cef8:	pop	{r4, r5, r6, r7, pc}
   1cefc:	cmp	r0, #0
   1cf00:	beq	1cf24 <__assert_fail@plt+0xb984>
   1cf04:	cmp	r1, #0
   1cf08:	push	{lr}		; (str lr, [sp, #-4]!)
   1cf0c:	sub	sp, sp, #12
   1cf10:	beq	1cf2c <__assert_fail@plt+0xb98c>
   1cf14:	blt	1cf44 <__assert_fail@plt+0xb9a4>
   1cf18:	add	sp, sp, #12
   1cf1c:	pop	{lr}		; (ldr lr, [sp], #4)
   1cf20:	b	112b8 <realloc@plt>
   1cf24:	mov	r0, r1
   1cf28:	b	1ce7c <__assert_fail@plt+0xb8dc>
   1cf2c:	str	r1, [sp, #4]
   1cf30:	bl	1cd84 <__assert_fail@plt+0xb7e4>
   1cf34:	ldr	r3, [sp, #4]
   1cf38:	mov	r0, r3
   1cf3c:	add	sp, sp, #12
   1cf40:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf44:	bl	11420 <__errno_location@plt>
   1cf48:	mov	r2, #12
   1cf4c:	mov	r3, #0
   1cf50:	str	r2, [r0]
   1cf54:	b	1cf38 <__assert_fail@plt+0xb998>
   1cf58:	push	{r4, r5, r6, lr}
   1cf5c:	subs	r4, r2, #0
   1cf60:	mov	r6, r0
   1cf64:	mov	r5, r1
   1cf68:	beq	1cf94 <__assert_fail@plt+0xb9f4>
   1cf6c:	mov	r1, r4
   1cf70:	mvn	r0, #0
   1cf74:	bl	1d444 <__assert_fail@plt+0xbea4>
   1cf78:	cmp	r0, r5
   1cf7c:	bcs	1cf94 <__assert_fail@plt+0xb9f4>
   1cf80:	bl	11420 <__errno_location@plt>
   1cf84:	mov	r3, #12
   1cf88:	str	r3, [r0]
   1cf8c:	mov	r0, #0
   1cf90:	pop	{r4, r5, r6, pc}
   1cf94:	mul	r1, r5, r4
   1cf98:	mov	r0, r6
   1cf9c:	pop	{r4, r5, r6, lr}
   1cfa0:	b	1cefc <__assert_fail@plt+0xb95c>
   1cfa4:	push	{r4, r5, r6, lr}
   1cfa8:	mov	r4, r0
   1cfac:	bl	1133c <__fpending@plt>
   1cfb0:	mov	r6, r0
   1cfb4:	mov	r0, r4
   1cfb8:	bl	11234 <ferror@plt>
   1cfbc:	mov	r5, r0
   1cfc0:	mov	r0, r4
   1cfc4:	bl	11480 <fclose@plt>
   1cfc8:	cmp	r5, #0
   1cfcc:	mov	r4, r0
   1cfd0:	bne	1cff0 <__assert_fail@plt+0xba50>
   1cfd4:	cmp	r0, #0
   1cfd8:	beq	1cfe8 <__assert_fail@plt+0xba48>
   1cfdc:	cmp	r6, #0
   1cfe0:	beq	1d00c <__assert_fail@plt+0xba6c>
   1cfe4:	mvn	r4, #0
   1cfe8:	mov	r0, r4
   1cfec:	pop	{r4, r5, r6, pc}
   1cff0:	cmp	r0, #0
   1cff4:	bne	1cfe4 <__assert_fail@plt+0xba44>
   1cff8:	bl	11420 <__errno_location@plt>
   1cffc:	str	r4, [r0]
   1d000:	mvn	r4, #0
   1d004:	mov	r0, r4
   1d008:	pop	{r4, r5, r6, pc}
   1d00c:	bl	11420 <__errno_location@plt>
   1d010:	ldr	r4, [r0]
   1d014:	subs	r4, r4, #9
   1d018:	mvnne	r4, #0
   1d01c:	mov	r0, r4
   1d020:	pop	{r4, r5, r6, pc}
   1d024:	push	{lr}		; (str lr, [sp, #-4]!)
   1d028:	sub	sp, sp, #268	; 0x10c
   1d02c:	add	r1, sp, #4
   1d030:	ldr	r2, [pc, #60]	; 1d074 <__assert_fail@plt+0xbad4>
   1d034:	bl	1d3a0 <__assert_fail@plt+0xbe00>
   1d038:	cmp	r0, #0
   1d03c:	movne	r0, #0
   1d040:	bne	1d06c <__assert_fail@plt+0xbacc>
   1d044:	ldr	r1, [pc, #44]	; 1d078 <__assert_fail@plt+0xbad8>
   1d048:	add	r0, sp, #4
   1d04c:	bl	111e0 <strcmp@plt>
   1d050:	cmp	r0, #0
   1d054:	beq	1d06c <__assert_fail@plt+0xbacc>
   1d058:	add	r0, sp, #4
   1d05c:	ldr	r1, [pc, #24]	; 1d07c <__assert_fail@plt+0xbadc>
   1d060:	bl	111e0 <strcmp@plt>
   1d064:	adds	r0, r0, #0
   1d068:	movne	r0, #1
   1d06c:	add	sp, sp, #268	; 0x10c
   1d070:	pop	{pc}		; (ldr pc, [sp], #4)
   1d074:	andeq	r0, r0, r1, lsl #2
   1d078:	muleq	r1, r4, ip
   1d07c:	muleq	r1, r8, ip
   1d080:	push	{r4, lr}
   1d084:	mov	r0, #14
   1d088:	bl	114ec <nl_langinfo@plt>
   1d08c:	cmp	r0, #0
   1d090:	beq	1d0a8 <__assert_fail@plt+0xbb08>
   1d094:	ldrb	r2, [r0]
   1d098:	ldr	r3, [pc, #16]	; 1d0b0 <__assert_fail@plt+0xbb10>
   1d09c:	cmp	r2, #0
   1d0a0:	moveq	r0, r3
   1d0a4:	pop	{r4, pc}
   1d0a8:	ldr	r0, [pc]	; 1d0b0 <__assert_fail@plt+0xbb10>
   1d0ac:	pop	{r4, pc}
   1d0b0:	andeq	pc, r1, r0, lsr #25
   1d0b4:	cmn	r0, #-2147483631	; 0x80000011
   1d0b8:	bls	1d0c4 <__assert_fail@plt+0xbb24>
   1d0bc:	mov	r0, #0
   1d0c0:	bx	lr
   1d0c4:	push	{r4, lr}
   1d0c8:	add	r0, r0, #16
   1d0cc:	bl	11384 <malloc@plt>
   1d0d0:	cmp	r0, #0
   1d0d4:	beq	1d0fc <__assert_fail@plt+0xbb5c>
   1d0d8:	cmn	r0, #9
   1d0dc:	addls	r3, r0, #8
   1d0e0:	bicls	r2, r3, #15
   1d0e4:	movhi	r2, #0
   1d0e8:	rsb	r3, r0, #8
   1d0ec:	add	r3, r3, r2
   1d0f0:	add	r0, r0, r3
   1d0f4:	strb	r3, [r0, #-1]
   1d0f8:	pop	{r4, pc}
   1d0fc:	mov	r0, #0
   1d100:	pop	{r4, pc}
   1d104:	tst	r0, #7
   1d108:	bne	1d120 <__assert_fail@plt+0xbb80>
   1d10c:	tst	r0, #8
   1d110:	bxeq	lr
   1d114:	ldrb	r3, [r0, #-1]
   1d118:	sub	r0, r0, r3
   1d11c:	b	1cd84 <__assert_fail@plt+0xb7e4>
   1d120:	push	{r4, lr}
   1d124:	bl	11570 <abort@plt>
   1d128:	push	{r4, lr}
   1d12c:	mov	r4, r0
   1d130:	bl	1121c <wcwidth@plt>
   1d134:	cmp	r0, #0
   1d138:	popge	{r4, pc}
   1d13c:	mov	r0, r4
   1d140:	bl	112d0 <iswcntrl@plt>
   1d144:	clz	r0, r0
   1d148:	lsr	r0, r0, #5
   1d14c:	pop	{r4, pc}
   1d150:	mov	r3, r1
   1d154:	push	{r4, r5, r6, lr}
   1d158:	mov	r4, r1
   1d15c:	ldr	r1, [r3], #16
   1d160:	mov	r5, r0
   1d164:	cmp	r1, r3
   1d168:	strne	r1, [r0]
   1d16c:	beq	1d190 <__assert_fail@plt+0xbbf0>
   1d170:	ldrb	r3, [r4, #8]
   1d174:	ldr	r2, [r4, #4]
   1d178:	cmp	r3, #0
   1d17c:	strb	r3, [r5, #8]
   1d180:	ldrne	r3, [r4, #12]
   1d184:	str	r2, [r5, #4]
   1d188:	strne	r3, [r5, #12]
   1d18c:	pop	{r4, r5, r6, pc}
   1d190:	add	r3, r0, #16
   1d194:	mov	r0, r3
   1d198:	ldr	r2, [r4, #4]
   1d19c:	bl	1124c <memcpy@plt>
   1d1a0:	str	r0, [r5]
   1d1a4:	b	1d170 <__assert_fail@plt+0xbbd0>
   1d1a8:	ldr	r3, [pc, #20]	; 1d1c4 <__assert_fail@plt+0xbc24>
   1d1ac:	lsr	r2, r0, #5
   1d1b0:	and	r0, r0, #31
   1d1b4:	ldr	r3, [r3, r2, lsl #2]
   1d1b8:	lsr	r0, r3, r0
   1d1bc:	and	r0, r0, #1
   1d1c0:	bx	lr
   1d1c4:	andeq	pc, r1, r8, lsr #25
   1d1c8:	push	{r4, r5, r6, r7, r8, lr}
   1d1cc:	sub	sp, sp, #56	; 0x38
   1d1d0:	mov	r4, r0
   1d1d4:	bl	11324 <__ctype_get_mb_cur_max@plt>
   1d1d8:	cmp	r0, #1
   1d1dc:	bls	1d348 <__assert_fail@plt+0xbda8>
   1d1e0:	mov	r3, #0
   1d1e4:	ldr	r8, [pc, #412]	; 1d388 <__assert_fail@plt+0xbde8>
   1d1e8:	mov	r5, r3
   1d1ec:	mov	r6, r3
   1d1f0:	mov	r7, #1
   1d1f4:	str	r4, [sp, #16]
   1d1f8:	strb	r3, [sp]
   1d1fc:	str	r3, [sp, #4]
   1d200:	strb	r3, [sp, #12]
   1d204:	str	r3, [sp, #8]
   1d208:	ldrb	r3, [sp]
   1d20c:	cmp	r3, #0
   1d210:	bne	1d268 <__assert_fail@plt+0xbcc8>
   1d214:	ldrb	r3, [r4]
   1d218:	and	r2, r3, #31
   1d21c:	lsr	r3, r3, #5
   1d220:	ldr	r3, [r8, r3, lsl #2]
   1d224:	lsr	r3, r3, r2
   1d228:	tst	r3, #1
   1d22c:	beq	1d254 <__assert_fail@plt+0xbcb4>
   1d230:	str	r7, [sp, #20]
   1d234:	ldrb	r4, [r4]
   1d238:	strb	r7, [sp, #24]
   1d23c:	cmp	r4, #0
   1d240:	str	r4, [sp, #28]
   1d244:	bne	1d2c8 <__assert_fail@plt+0xbd28>
   1d248:	mov	r0, r5
   1d24c:	add	sp, sp, #56	; 0x38
   1d250:	pop	{r4, r5, r6, r7, r8, pc}
   1d254:	add	r0, sp, #4
   1d258:	bl	11264 <mbsinit@plt>
   1d25c:	cmp	r0, #0
   1d260:	beq	1d360 <__assert_fail@plt+0xbdc0>
   1d264:	strb	r7, [sp]
   1d268:	bl	11324 <__ctype_get_mb_cur_max@plt>
   1d26c:	mov	r1, r0
   1d270:	mov	r0, r4
   1d274:	bl	1b444 <__assert_fail@plt+0x9ea4>
   1d278:	add	r3, sp, #4
   1d27c:	mov	r1, r4
   1d280:	mov	r2, r0
   1d284:	add	r0, sp, #28
   1d288:	bl	1cea8 <__assert_fail@plt+0xb908>
   1d28c:	cmn	r0, #1
   1d290:	str	r0, [sp, #20]
   1d294:	beq	1d2e4 <__assert_fail@plt+0xbd44>
   1d298:	cmn	r0, #2
   1d29c:	beq	1d32c <__assert_fail@plt+0xbd8c>
   1d2a0:	cmp	r0, #0
   1d2a4:	beq	1d2f8 <__assert_fail@plt+0xbd58>
   1d2a8:	ldr	r4, [sp, #28]
   1d2ac:	add	r0, sp, #4
   1d2b0:	strb	r7, [sp, #24]
   1d2b4:	bl	11264 <mbsinit@plt>
   1d2b8:	cmp	r0, #0
   1d2bc:	strbne	r6, [sp]
   1d2c0:	cmp	r4, #0
   1d2c4:	beq	1d248 <__assert_fail@plt+0xbca8>
   1d2c8:	ldr	r4, [sp, #16]
   1d2cc:	ldr	r3, [sp, #20]
   1d2d0:	add	r4, r4, r3
   1d2d4:	add	r5, r5, #1
   1d2d8:	strb	r6, [sp, #12]
   1d2dc:	str	r4, [sp, #16]
   1d2e0:	b	1d208 <__assert_fail@plt+0xbc68>
   1d2e4:	str	r7, [sp, #20]
   1d2e8:	strb	r6, [sp, #24]
   1d2ec:	ldr	r4, [sp, #16]
   1d2f0:	mov	r3, r7
   1d2f4:	b	1d2d0 <__assert_fail@plt+0xbd30>
   1d2f8:	ldr	r4, [sp, #16]
   1d2fc:	str	r7, [sp, #20]
   1d300:	ldrb	r3, [r4]
   1d304:	cmp	r3, #0
   1d308:	bne	1d374 <__assert_fail@plt+0xbdd4>
   1d30c:	ldr	r4, [sp, #28]
   1d310:	cmp	r4, #0
   1d314:	beq	1d2ac <__assert_fail@plt+0xbd0c>
   1d318:	ldr	r3, [pc, #108]	; 1d38c <__assert_fail@plt+0xbdec>
   1d31c:	mov	r2, #172	; 0xac
   1d320:	ldr	r1, [pc, #104]	; 1d390 <__assert_fail@plt+0xbdf0>
   1d324:	ldr	r0, [pc, #104]	; 1d394 <__assert_fail@plt+0xbdf4>
   1d328:	bl	115a0 <__assert_fail@plt>
   1d32c:	ldr	r4, [sp, #16]
   1d330:	mov	r0, r4
   1d334:	bl	113f0 <strlen@plt>
   1d338:	strb	r6, [sp, #24]
   1d33c:	str	r0, [sp, #20]
   1d340:	mov	r3, r0
   1d344:	b	1d2d0 <__assert_fail@plt+0xbd30>
   1d348:	mov	r0, r4
   1d34c:	bl	113f0 <strlen@plt>
   1d350:	mov	r5, r0
   1d354:	mov	r0, r5
   1d358:	add	sp, sp, #56	; 0x38
   1d35c:	pop	{r4, r5, r6, r7, r8, pc}
   1d360:	ldr	r3, [pc, #36]	; 1d38c <__assert_fail@plt+0xbdec>
   1d364:	mov	r2, #143	; 0x8f
   1d368:	ldr	r1, [pc, #32]	; 1d390 <__assert_fail@plt+0xbdf0>
   1d36c:	ldr	r0, [pc, #36]	; 1d398 <__assert_fail@plt+0xbdf8>
   1d370:	bl	115a0 <__assert_fail@plt>
   1d374:	ldr	r3, [pc, #16]	; 1d38c <__assert_fail@plt+0xbdec>
   1d378:	mov	r2, #171	; 0xab
   1d37c:	ldr	r1, [pc, #12]	; 1d390 <__assert_fail@plt+0xbdf0>
   1d380:	ldr	r0, [pc, #20]	; 1d39c <__assert_fail@plt+0xbdfc>
   1d384:	bl	115a0 <__assert_fail@plt>
   1d388:	andeq	pc, r1, r8, lsr #25
   1d38c:	andeq	pc, r1, r8, asr #25
   1d390:	ldrdeq	pc, [r1], -r4
   1d394:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1d398:	andeq	pc, r1, r0, ror #15
   1d39c:	strdeq	pc, [r1], -r8
   1d3a0:	push	{r4, r5, r6, lr}
   1d3a4:	mov	r5, r1
   1d3a8:	mov	r1, #0
   1d3ac:	mov	r4, r2
   1d3b0:	bl	114bc <setlocale@plt>
   1d3b4:	subs	r6, r0, #0
   1d3b8:	beq	1d414 <__assert_fail@plt+0xbe74>
   1d3bc:	bl	113f0 <strlen@plt>
   1d3c0:	cmp	r4, r0
   1d3c4:	bhi	1d3fc <__assert_fail@plt+0xbe5c>
   1d3c8:	cmp	r4, #0
   1d3cc:	bne	1d3d8 <__assert_fail@plt+0xbe38>
   1d3d0:	mov	r0, #34	; 0x22
   1d3d4:	pop	{r4, r5, r6, pc}
   1d3d8:	sub	r4, r4, #1
   1d3dc:	mov	r1, r6
   1d3e0:	mov	r2, r4
   1d3e4:	mov	r0, r5
   1d3e8:	bl	1124c <memcpy@plt>
   1d3ec:	mov	r3, #0
   1d3f0:	strb	r3, [r5, r4]
   1d3f4:	mov	r0, #34	; 0x22
   1d3f8:	pop	{r4, r5, r6, pc}
   1d3fc:	add	r2, r0, #1
   1d400:	mov	r1, r6
   1d404:	mov	r0, r5
   1d408:	bl	1124c <memcpy@plt>
   1d40c:	mov	r0, #0
   1d410:	pop	{r4, r5, r6, pc}
   1d414:	cmp	r4, #0
   1d418:	beq	1d428 <__assert_fail@plt+0xbe88>
   1d41c:	strb	r6, [r5]
   1d420:	mov	r0, #22
   1d424:	pop	{r4, r5, r6, pc}
   1d428:	mov	r0, #22
   1d42c:	pop	{r4, r5, r6, pc}
   1d430:	mov	r1, #0
   1d434:	b	114bc <setlocale@plt>
   1d438:	mov	r2, #3
   1d43c:	mov	r1, #0
   1d440:	b	1cb14 <__assert_fail@plt+0xb574>
   1d444:	subs	r2, r1, #1
   1d448:	bxeq	lr
   1d44c:	bcc	1d624 <__assert_fail@plt+0xc084>
   1d450:	cmp	r0, r1
   1d454:	bls	1d608 <__assert_fail@plt+0xc068>
   1d458:	tst	r1, r2
   1d45c:	beq	1d614 <__assert_fail@plt+0xc074>
   1d460:	clz	r3, r0
   1d464:	clz	r2, r1
   1d468:	sub	r3, r2, r3
   1d46c:	rsbs	r3, r3, #31
   1d470:	addne	r3, r3, r3, lsl #1
   1d474:	mov	r2, #0
   1d478:	addne	pc, pc, r3, lsl #2
   1d47c:	nop			; (mov r0, r0)
   1d480:	cmp	r0, r1, lsl #31
   1d484:	adc	r2, r2, r2
   1d488:	subcs	r0, r0, r1, lsl #31
   1d48c:	cmp	r0, r1, lsl #30
   1d490:	adc	r2, r2, r2
   1d494:	subcs	r0, r0, r1, lsl #30
   1d498:	cmp	r0, r1, lsl #29
   1d49c:	adc	r2, r2, r2
   1d4a0:	subcs	r0, r0, r1, lsl #29
   1d4a4:	cmp	r0, r1, lsl #28
   1d4a8:	adc	r2, r2, r2
   1d4ac:	subcs	r0, r0, r1, lsl #28
   1d4b0:	cmp	r0, r1, lsl #27
   1d4b4:	adc	r2, r2, r2
   1d4b8:	subcs	r0, r0, r1, lsl #27
   1d4bc:	cmp	r0, r1, lsl #26
   1d4c0:	adc	r2, r2, r2
   1d4c4:	subcs	r0, r0, r1, lsl #26
   1d4c8:	cmp	r0, r1, lsl #25
   1d4cc:	adc	r2, r2, r2
   1d4d0:	subcs	r0, r0, r1, lsl #25
   1d4d4:	cmp	r0, r1, lsl #24
   1d4d8:	adc	r2, r2, r2
   1d4dc:	subcs	r0, r0, r1, lsl #24
   1d4e0:	cmp	r0, r1, lsl #23
   1d4e4:	adc	r2, r2, r2
   1d4e8:	subcs	r0, r0, r1, lsl #23
   1d4ec:	cmp	r0, r1, lsl #22
   1d4f0:	adc	r2, r2, r2
   1d4f4:	subcs	r0, r0, r1, lsl #22
   1d4f8:	cmp	r0, r1, lsl #21
   1d4fc:	adc	r2, r2, r2
   1d500:	subcs	r0, r0, r1, lsl #21
   1d504:	cmp	r0, r1, lsl #20
   1d508:	adc	r2, r2, r2
   1d50c:	subcs	r0, r0, r1, lsl #20
   1d510:	cmp	r0, r1, lsl #19
   1d514:	adc	r2, r2, r2
   1d518:	subcs	r0, r0, r1, lsl #19
   1d51c:	cmp	r0, r1, lsl #18
   1d520:	adc	r2, r2, r2
   1d524:	subcs	r0, r0, r1, lsl #18
   1d528:	cmp	r0, r1, lsl #17
   1d52c:	adc	r2, r2, r2
   1d530:	subcs	r0, r0, r1, lsl #17
   1d534:	cmp	r0, r1, lsl #16
   1d538:	adc	r2, r2, r2
   1d53c:	subcs	r0, r0, r1, lsl #16
   1d540:	cmp	r0, r1, lsl #15
   1d544:	adc	r2, r2, r2
   1d548:	subcs	r0, r0, r1, lsl #15
   1d54c:	cmp	r0, r1, lsl #14
   1d550:	adc	r2, r2, r2
   1d554:	subcs	r0, r0, r1, lsl #14
   1d558:	cmp	r0, r1, lsl #13
   1d55c:	adc	r2, r2, r2
   1d560:	subcs	r0, r0, r1, lsl #13
   1d564:	cmp	r0, r1, lsl #12
   1d568:	adc	r2, r2, r2
   1d56c:	subcs	r0, r0, r1, lsl #12
   1d570:	cmp	r0, r1, lsl #11
   1d574:	adc	r2, r2, r2
   1d578:	subcs	r0, r0, r1, lsl #11
   1d57c:	cmp	r0, r1, lsl #10
   1d580:	adc	r2, r2, r2
   1d584:	subcs	r0, r0, r1, lsl #10
   1d588:	cmp	r0, r1, lsl #9
   1d58c:	adc	r2, r2, r2
   1d590:	subcs	r0, r0, r1, lsl #9
   1d594:	cmp	r0, r1, lsl #8
   1d598:	adc	r2, r2, r2
   1d59c:	subcs	r0, r0, r1, lsl #8
   1d5a0:	cmp	r0, r1, lsl #7
   1d5a4:	adc	r2, r2, r2
   1d5a8:	subcs	r0, r0, r1, lsl #7
   1d5ac:	cmp	r0, r1, lsl #6
   1d5b0:	adc	r2, r2, r2
   1d5b4:	subcs	r0, r0, r1, lsl #6
   1d5b8:	cmp	r0, r1, lsl #5
   1d5bc:	adc	r2, r2, r2
   1d5c0:	subcs	r0, r0, r1, lsl #5
   1d5c4:	cmp	r0, r1, lsl #4
   1d5c8:	adc	r2, r2, r2
   1d5cc:	subcs	r0, r0, r1, lsl #4
   1d5d0:	cmp	r0, r1, lsl #3
   1d5d4:	adc	r2, r2, r2
   1d5d8:	subcs	r0, r0, r1, lsl #3
   1d5dc:	cmp	r0, r1, lsl #2
   1d5e0:	adc	r2, r2, r2
   1d5e4:	subcs	r0, r0, r1, lsl #2
   1d5e8:	cmp	r0, r1, lsl #1
   1d5ec:	adc	r2, r2, r2
   1d5f0:	subcs	r0, r0, r1, lsl #1
   1d5f4:	cmp	r0, r1
   1d5f8:	adc	r2, r2, r2
   1d5fc:	subcs	r0, r0, r1
   1d600:	mov	r0, r2
   1d604:	bx	lr
   1d608:	moveq	r0, #1
   1d60c:	movne	r0, #0
   1d610:	bx	lr
   1d614:	clz	r2, r1
   1d618:	rsb	r2, r2, #31
   1d61c:	lsr	r0, r0, r2
   1d620:	bx	lr
   1d624:	cmp	r0, #0
   1d628:	mvnne	r0, #0
   1d62c:	b	1d890 <__assert_fail@plt+0xc2f0>
   1d630:	cmp	r1, #0
   1d634:	beq	1d624 <__assert_fail@plt+0xc084>
   1d638:	push	{r0, r1, lr}
   1d63c:	bl	1d444 <__assert_fail@plt+0xbea4>
   1d640:	pop	{r1, r2, lr}
   1d644:	mul	r3, r2, r0
   1d648:	sub	r1, r1, r3
   1d64c:	bx	lr
   1d650:	cmp	r1, #0
   1d654:	beq	1d860 <__assert_fail@plt+0xc2c0>
   1d658:	eor	ip, r0, r1
   1d65c:	rsbmi	r1, r1, #0
   1d660:	subs	r2, r1, #1
   1d664:	beq	1d82c <__assert_fail@plt+0xc28c>
   1d668:	movs	r3, r0
   1d66c:	rsbmi	r3, r0, #0
   1d670:	cmp	r3, r1
   1d674:	bls	1d838 <__assert_fail@plt+0xc298>
   1d678:	tst	r1, r2
   1d67c:	beq	1d848 <__assert_fail@plt+0xc2a8>
   1d680:	clz	r2, r3
   1d684:	clz	r0, r1
   1d688:	sub	r2, r0, r2
   1d68c:	rsbs	r2, r2, #31
   1d690:	addne	r2, r2, r2, lsl #1
   1d694:	mov	r0, #0
   1d698:	addne	pc, pc, r2, lsl #2
   1d69c:	nop			; (mov r0, r0)
   1d6a0:	cmp	r3, r1, lsl #31
   1d6a4:	adc	r0, r0, r0
   1d6a8:	subcs	r3, r3, r1, lsl #31
   1d6ac:	cmp	r3, r1, lsl #30
   1d6b0:	adc	r0, r0, r0
   1d6b4:	subcs	r3, r3, r1, lsl #30
   1d6b8:	cmp	r3, r1, lsl #29
   1d6bc:	adc	r0, r0, r0
   1d6c0:	subcs	r3, r3, r1, lsl #29
   1d6c4:	cmp	r3, r1, lsl #28
   1d6c8:	adc	r0, r0, r0
   1d6cc:	subcs	r3, r3, r1, lsl #28
   1d6d0:	cmp	r3, r1, lsl #27
   1d6d4:	adc	r0, r0, r0
   1d6d8:	subcs	r3, r3, r1, lsl #27
   1d6dc:	cmp	r3, r1, lsl #26
   1d6e0:	adc	r0, r0, r0
   1d6e4:	subcs	r3, r3, r1, lsl #26
   1d6e8:	cmp	r3, r1, lsl #25
   1d6ec:	adc	r0, r0, r0
   1d6f0:	subcs	r3, r3, r1, lsl #25
   1d6f4:	cmp	r3, r1, lsl #24
   1d6f8:	adc	r0, r0, r0
   1d6fc:	subcs	r3, r3, r1, lsl #24
   1d700:	cmp	r3, r1, lsl #23
   1d704:	adc	r0, r0, r0
   1d708:	subcs	r3, r3, r1, lsl #23
   1d70c:	cmp	r3, r1, lsl #22
   1d710:	adc	r0, r0, r0
   1d714:	subcs	r3, r3, r1, lsl #22
   1d718:	cmp	r3, r1, lsl #21
   1d71c:	adc	r0, r0, r0
   1d720:	subcs	r3, r3, r1, lsl #21
   1d724:	cmp	r3, r1, lsl #20
   1d728:	adc	r0, r0, r0
   1d72c:	subcs	r3, r3, r1, lsl #20
   1d730:	cmp	r3, r1, lsl #19
   1d734:	adc	r0, r0, r0
   1d738:	subcs	r3, r3, r1, lsl #19
   1d73c:	cmp	r3, r1, lsl #18
   1d740:	adc	r0, r0, r0
   1d744:	subcs	r3, r3, r1, lsl #18
   1d748:	cmp	r3, r1, lsl #17
   1d74c:	adc	r0, r0, r0
   1d750:	subcs	r3, r3, r1, lsl #17
   1d754:	cmp	r3, r1, lsl #16
   1d758:	adc	r0, r0, r0
   1d75c:	subcs	r3, r3, r1, lsl #16
   1d760:	cmp	r3, r1, lsl #15
   1d764:	adc	r0, r0, r0
   1d768:	subcs	r3, r3, r1, lsl #15
   1d76c:	cmp	r3, r1, lsl #14
   1d770:	adc	r0, r0, r0
   1d774:	subcs	r3, r3, r1, lsl #14
   1d778:	cmp	r3, r1, lsl #13
   1d77c:	adc	r0, r0, r0
   1d780:	subcs	r3, r3, r1, lsl #13
   1d784:	cmp	r3, r1, lsl #12
   1d788:	adc	r0, r0, r0
   1d78c:	subcs	r3, r3, r1, lsl #12
   1d790:	cmp	r3, r1, lsl #11
   1d794:	adc	r0, r0, r0
   1d798:	subcs	r3, r3, r1, lsl #11
   1d79c:	cmp	r3, r1, lsl #10
   1d7a0:	adc	r0, r0, r0
   1d7a4:	subcs	r3, r3, r1, lsl #10
   1d7a8:	cmp	r3, r1, lsl #9
   1d7ac:	adc	r0, r0, r0
   1d7b0:	subcs	r3, r3, r1, lsl #9
   1d7b4:	cmp	r3, r1, lsl #8
   1d7b8:	adc	r0, r0, r0
   1d7bc:	subcs	r3, r3, r1, lsl #8
   1d7c0:	cmp	r3, r1, lsl #7
   1d7c4:	adc	r0, r0, r0
   1d7c8:	subcs	r3, r3, r1, lsl #7
   1d7cc:	cmp	r3, r1, lsl #6
   1d7d0:	adc	r0, r0, r0
   1d7d4:	subcs	r3, r3, r1, lsl #6
   1d7d8:	cmp	r3, r1, lsl #5
   1d7dc:	adc	r0, r0, r0
   1d7e0:	subcs	r3, r3, r1, lsl #5
   1d7e4:	cmp	r3, r1, lsl #4
   1d7e8:	adc	r0, r0, r0
   1d7ec:	subcs	r3, r3, r1, lsl #4
   1d7f0:	cmp	r3, r1, lsl #3
   1d7f4:	adc	r0, r0, r0
   1d7f8:	subcs	r3, r3, r1, lsl #3
   1d7fc:	cmp	r3, r1, lsl #2
   1d800:	adc	r0, r0, r0
   1d804:	subcs	r3, r3, r1, lsl #2
   1d808:	cmp	r3, r1, lsl #1
   1d80c:	adc	r0, r0, r0
   1d810:	subcs	r3, r3, r1, lsl #1
   1d814:	cmp	r3, r1
   1d818:	adc	r0, r0, r0
   1d81c:	subcs	r3, r3, r1
   1d820:	cmp	ip, #0
   1d824:	rsbmi	r0, r0, #0
   1d828:	bx	lr
   1d82c:	teq	ip, r0
   1d830:	rsbmi	r0, r0, #0
   1d834:	bx	lr
   1d838:	movcc	r0, #0
   1d83c:	asreq	r0, ip, #31
   1d840:	orreq	r0, r0, #1
   1d844:	bx	lr
   1d848:	clz	r2, r1
   1d84c:	rsb	r2, r2, #31
   1d850:	cmp	ip, #0
   1d854:	lsr	r0, r3, r2
   1d858:	rsbmi	r0, r0, #0
   1d85c:	bx	lr
   1d860:	cmp	r0, #0
   1d864:	mvngt	r0, #-2147483648	; 0x80000000
   1d868:	movlt	r0, #-2147483648	; 0x80000000
   1d86c:	b	1d890 <__assert_fail@plt+0xc2f0>
   1d870:	cmp	r1, #0
   1d874:	beq	1d860 <__assert_fail@plt+0xc2c0>
   1d878:	push	{r0, r1, lr}
   1d87c:	bl	1d658 <__assert_fail@plt+0xc0b8>
   1d880:	pop	{r1, r2, lr}
   1d884:	mul	r3, r2, r0
   1d888:	sub	r1, r1, r3
   1d88c:	bx	lr
   1d890:	push	{r1, lr}
   1d894:	mov	r0, #8
   1d898:	bl	111d4 <raise@plt>
   1d89c:	pop	{r1, pc}
   1d8a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d8a4:	mov	r7, r0
   1d8a8:	ldr	r6, [pc, #72]	; 1d8f8 <__assert_fail@plt+0xc358>
   1d8ac:	ldr	r5, [pc, #72]	; 1d8fc <__assert_fail@plt+0xc35c>
   1d8b0:	add	r6, pc, r6
   1d8b4:	add	r5, pc, r5
   1d8b8:	sub	r6, r6, r5
   1d8bc:	mov	r8, r1
   1d8c0:	mov	r9, r2
   1d8c4:	bl	1119c <fdopen@plt-0x20>
   1d8c8:	asrs	r6, r6, #2
   1d8cc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d8d0:	mov	r4, #0
   1d8d4:	add	r4, r4, #1
   1d8d8:	ldr	r3, [r5], #4
   1d8dc:	mov	r2, r9
   1d8e0:	mov	r1, r8
   1d8e4:	mov	r0, r7
   1d8e8:	blx	r3
   1d8ec:	cmp	r6, r4
   1d8f0:	bne	1d8d4 <__assert_fail@plt+0xc334>
   1d8f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d8f8:	andeq	r2, r1, r8, asr r6
   1d8fc:	andeq	r2, r1, r0, asr r6
   1d900:	bx	lr
   1d904:	ldr	r3, [pc, #12]	; 1d918 <__assert_fail@plt+0xc378>
   1d908:	mov	r1, #0
   1d90c:	add	r3, pc, r3
   1d910:	ldr	r2, [r3]
   1d914:	b	11438 <__cxa_atexit@plt>
   1d918:	andeq	r2, r1, r0, asr r8

Disassembly of section .fini:

0001d91c <.fini>:
   1d91c:	push	{r3, lr}
   1d920:	pop	{r3, pc}
