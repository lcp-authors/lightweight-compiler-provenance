
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test/monster_test:     file format elf32-littlearm


Disassembly of section .init:

00012e6c <.init>:
   12e6c:	push	{r3, lr}
   12e70:	bl	12fd4 <_start@@Base+0x3c>
   12e74:	pop	{r3, pc}

Disassembly of section .plt:

00012e78 <strcmp@plt-0x14>:
   12e78:	push	{lr}		; (str lr, [sp, #-4]!)
   12e7c:	ldr	lr, [pc, #4]	; 12e88 <strcmp@plt-0x4>
   12e80:	add	lr, pc, lr
   12e84:	ldr	pc, [lr, #8]!
   12e88:	andeq	r7, r2, r8, ror r1

00012e8c <strcmp@plt>:
   12e8c:	add	ip, pc, #0, 12
   12e90:	add	ip, ip, #159744	; 0x27000
   12e94:	ldr	pc, [ip, #376]!	; 0x178

00012e98 <printf@plt>:
   12e98:	add	ip, pc, #0, 12
   12e9c:	add	ip, ip, #159744	; 0x27000
   12ea0:	ldr	pc, [ip, #368]!	; 0x170

00012ea4 <free@plt>:
   12ea4:	add	ip, pc, #0, 12
   12ea8:	add	ip, ip, #159744	; 0x27000
   12eac:	ldr	pc, [ip, #360]!	; 0x168

00012eb0 <memcpy@plt>:
   12eb0:	add	ip, pc, #0, 12
   12eb4:	add	ip, ip, #159744	; 0x27000
   12eb8:	ldr	pc, [ip, #352]!	; 0x160

00012ebc <memcmp@plt>:
   12ebc:	add	ip, pc, #0, 12
   12ec0:	add	ip, ip, #159744	; 0x27000
   12ec4:	ldr	pc, [ip, #344]!	; 0x158

00012ec8 <realloc@plt>:
   12ec8:	add	ip, pc, #0, 12
   12ecc:	add	ip, ip, #159744	; 0x27000
   12ed0:	ldr	pc, [ip, #336]!	; 0x150

00012ed4 <fwrite@plt>:
   12ed4:	add	ip, pc, #0, 12
   12ed8:	add	ip, ip, #159744	; 0x27000
   12edc:	ldr	pc, [ip, #328]!	; 0x148

00012ee0 <gettimeofday@plt>:
   12ee0:	add	ip, pc, #0, 12
   12ee4:	add	ip, ip, #159744	; 0x27000
   12ee8:	ldr	pc, [ip, #320]!	; 0x140

00012eec <puts@plt>:
   12eec:	add	ip, pc, #0, 12
   12ef0:	add	ip, ip, #159744	; 0x27000
   12ef4:	ldr	pc, [ip, #312]!	; 0x138

00012ef8 <malloc@plt>:
   12ef8:	add	ip, pc, #0, 12
   12efc:	add	ip, ip, #159744	; 0x27000
   12f00:	ldr	pc, [ip, #304]!	; 0x130

00012f04 <__libc_start_main@plt>:
   12f04:	add	ip, pc, #0, 12
   12f08:	add	ip, ip, #159744	; 0x27000
   12f0c:	ldr	pc, [ip, #296]!	; 0x128

00012f10 <__gmon_start__@plt>:
   12f10:	add	ip, pc, #0, 12
   12f14:	add	ip, ip, #159744	; 0x27000
   12f18:	ldr	pc, [ip, #288]!	; 0x120

00012f1c <strlen@plt>:
   12f1c:	add	ip, pc, #0, 12
   12f20:	add	ip, ip, #159744	; 0x27000
   12f24:	ldr	pc, [ip, #280]!	; 0x118

00012f28 <fprintf@plt>:
   12f28:	add	ip, pc, #0, 12
   12f2c:	add	ip, ip, #159744	; 0x27000
   12f30:	ldr	pc, [ip, #272]!	; 0x110

00012f34 <posix_memalign@plt>:
   12f34:	add	ip, pc, #0, 12
   12f38:	add	ip, ip, #159744	; 0x27000
   12f3c:	ldr	pc, [ip, #264]!	; 0x108

00012f40 <memset@plt>:
   12f40:	add	ip, pc, #0, 12
   12f44:	add	ip, ip, #159744	; 0x27000
   12f48:	ldr	pc, [ip, #256]!	; 0x100

00012f4c <strncpy@plt>:
   12f4c:	add	ip, pc, #0, 12
   12f50:	add	ip, ip, #159744	; 0x27000
   12f54:	ldr	pc, [ip, #248]!	; 0xf8

00012f58 <memchr@plt>:
   12f58:	add	ip, pc, #0, 12
   12f5c:	add	ip, ip, #159744	; 0x27000
   12f60:	ldr	pc, [ip, #240]!	; 0xf0

00012f64 <fputc@plt>:
   12f64:	add	ip, pc, #0, 12
   12f68:	add	ip, ip, #159744	; 0x27000
   12f6c:	ldr	pc, [ip, #232]!	; 0xe8

00012f70 <strncmp@plt>:
   12f70:	add	ip, pc, #0, 12
   12f74:	add	ip, ip, #159744	; 0x27000
   12f78:	ldr	pc, [ip, #224]!	; 0xe0

00012f7c <abort@plt>:
   12f7c:	add	ip, pc, #0, 12
   12f80:	add	ip, ip, #159744	; 0x27000
   12f84:	ldr	pc, [ip, #216]!	; 0xd8

00012f88 <__assert_fail@plt>:
   12f88:	add	ip, pc, #0, 12
   12f8c:	add	ip, ip, #159744	; 0x27000
   12f90:	ldr	pc, [ip, #208]!	; 0xd0

Disassembly of section .text:

00012f98 <_start@@Base>:
   12f98:	mov	fp, #0
   12f9c:	mov	lr, #0
   12fa0:	pop	{r1}		; (ldr r1, [sp], #4)
   12fa4:	mov	r2, sp
   12fa8:	push	{r2}		; (str r2, [sp, #-4]!)
   12fac:	push	{r0}		; (str r0, [sp, #-4]!)
   12fb0:	ldr	ip, [pc, #16]	; 12fc8 <_start@@Base+0x30>
   12fb4:	push	{ip}		; (str ip, [sp, #-4]!)
   12fb8:	ldr	r0, [pc, #12]	; 12fcc <_start@@Base+0x34>
   12fbc:	ldr	r3, [pc, #12]	; 12fd0 <_start@@Base+0x38>
   12fc0:	bl	12f04 <__libc_start_main@plt>
   12fc4:	bl	12f7c <abort@plt>
   12fc8:	andeq	r4, r2, ip, lsr #6
   12fcc:	andeq	ip, r1, r0, ror #13
   12fd0:	andeq	r4, r2, ip, asr #5
   12fd4:	ldr	r3, [pc, #20]	; 12ff0 <_start@@Base+0x58>
   12fd8:	ldr	r2, [pc, #20]	; 12ff4 <_start@@Base+0x5c>
   12fdc:	add	r3, pc, r3
   12fe0:	ldr	r2, [r3, r2]
   12fe4:	cmp	r2, #0
   12fe8:	bxeq	lr
   12fec:	b	12f10 <__gmon_start__@plt>
   12ff0:	andeq	r7, r2, ip, lsl r0
   12ff4:	andeq	r0, r0, r4, rrx
   12ff8:	ldr	r0, [pc, #24]	; 13018 <_start@@Base+0x80>
   12ffc:	ldr	r3, [pc, #24]	; 1301c <_start@@Base+0x84>
   13000:	cmp	r3, r0
   13004:	bxeq	lr
   13008:	ldr	r3, [pc, #16]	; 13020 <_start@@Base+0x88>
   1300c:	cmp	r3, #0
   13010:	bxeq	lr
   13014:	bx	r3
   13018:	andeq	sl, r3, r0, ror r0
   1301c:	andeq	sl, r3, r0, ror r0
   13020:	andeq	r0, r0, r0
   13024:	ldr	r0, [pc, #36]	; 13050 <_start@@Base+0xb8>
   13028:	ldr	r1, [pc, #36]	; 13054 <_start@@Base+0xbc>
   1302c:	sub	r1, r1, r0
   13030:	asr	r1, r1, #2
   13034:	add	r1, r1, r1, lsr #31
   13038:	asrs	r1, r1, #1
   1303c:	bxeq	lr
   13040:	ldr	r3, [pc, #16]	; 13058 <_start@@Base+0xc0>
   13044:	cmp	r3, #0
   13048:	bxeq	lr
   1304c:	bx	r3
   13050:	andeq	sl, r3, r0, ror r0
   13054:	andeq	sl, r3, r0, ror r0
   13058:	andeq	r0, r0, r0
   1305c:	push	{r4, lr}
   13060:	ldr	r4, [pc, #24]	; 13080 <_start@@Base+0xe8>
   13064:	ldrb	r3, [r4]
   13068:	cmp	r3, #0
   1306c:	popne	{r4, pc}
   13070:	bl	12ff8 <_start@@Base+0x60>
   13074:	mov	r3, #1
   13078:	strb	r3, [r4]
   1307c:	pop	{r4, pc}
   13080:	andeq	sl, r3, r4, ror r0
   13084:	b	13024 <_start@@Base+0x8c>

00013088 <verify_empty_monster@@Base>:
   13088:	push	{fp, lr}
   1308c:	mov	fp, sp
   13090:	cmp	r0, #0
   13094:	beq	130f4 <verify_empty_monster@@Base+0x6c>
   13098:	ldr	r1, [r0, #4]
   1309c:	movw	r2, #20301	; 0x4f4d
   130a0:	movt	r2, #21326	; 0x534e
   130a4:	cmp	r1, r2
   130a8:	bne	130f4 <verify_empty_monster@@Base+0x6c>
   130ac:	ldr	r1, [r0]
   130b0:	ldr	r2, [r0, r1]!
   130b4:	mov	r1, r0
   130b8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   130bc:	cmp	r2, #9
   130c0:	bls	13108 <verify_empty_monster@@Base+0x80>
   130c4:	ldrh	r2, [r1, #8]
   130c8:	cmp	r2, #0
   130cc:	beq	13114 <verify_empty_monster@@Base+0x8c>
   130d0:	add	r0, r0, r2
   130d4:	ldrh	r0, [r0]
   130d8:	cmp	r0, #100	; 0x64
   130dc:	bne	13138 <verify_empty_monster@@Base+0xb0>
   130e0:	movw	r0, #25264	; 0x62b0
   130e4:	movt	r0, #2
   130e8:	bl	12eec <puts@plt>
   130ec:	mvn	r0, #0
   130f0:	pop	{fp, pc}
   130f4:	movw	r0, #25744	; 0x6490
   130f8:	movt	r0, #2
   130fc:	bl	12eec <puts@plt>
   13100:	mvn	r0, #0
   13104:	pop	{fp, pc}
   13108:	mov	r0, #0
   1310c:	cmp	r2, #6
   13110:	popcc	{fp, pc}
   13114:	ldrh	r0, [r1, #4]
   13118:	cmp	r0, #0
   1311c:	moveq	r0, #0
   13120:	popeq	{fp, pc}
   13124:	movw	r0, #25872	; 0x6510
   13128:	movt	r0, #2
   1312c:	bl	12eec <puts@plt>
   13130:	mvn	r0, #0
   13134:	pop	{fp, pc}
   13138:	movw	r0, #27040	; 0x69a0
   1313c:	movt	r0, #2
   13140:	bl	12eec <puts@plt>
   13144:	mvn	r0, #0
   13148:	pop	{fp, pc}

0001314c <test_enums@@Base>:
   1314c:	mov	r0, #0
   13150:	bx	lr
   13154:	nop	{0}

00013158 <test_type_aliases@@Base>:
   13158:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   1315c:	add	fp, sp, #24
   13160:	sub	sp, sp, #16
   13164:	mov	r4, r0
   13168:	bl	1dd44 <flatcc_builder_reset@@Base>
   1316c:	mvn	r0, #0
   13170:	mov	r1, #1
   13174:	mov	r2, #0
   13178:	mov	r3, #1
   1317c:	mov	r8, #0
   13180:	str	r1, [sp]
   13184:	str	r0, [sp, #4]
   13188:	mov	r0, r4
   1318c:	mov	r1, #0
   13190:	bl	2082c <flatcc_builder_create_vector@@Base>
   13194:	mov	r6, r0
   13198:	mvn	r0, #-536870912	; 0xe0000000
   1319c:	mov	r1, #8
   131a0:	mov	r2, #0
   131a4:	mov	r3, #8
   131a8:	str	r1, [sp]
   131ac:	str	r0, [sp, #4]
   131b0:	mov	r0, r4
   131b4:	mov	r1, #0
   131b8:	bl	2082c <flatcc_builder_create_vector@@Base>
   131bc:	movw	r1, #17220	; 0x4344
   131c0:	mov	r5, r0
   131c4:	mov	r0, r4
   131c8:	mov	r2, #0
   131cc:	mov	r3, #0
   131d0:	movt	r1, #2
   131d4:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   131d8:	cmp	r0, #0
   131dc:	bne	13200 <test_type_aliases@@Base+0xa8>
   131e0:	mov	r0, r4
   131e4:	mov	r1, #12
   131e8:	bl	1fcbc <flatcc_builder_start_table@@Base>
   131ec:	cmp	r0, #0
   131f0:	beq	1336c <test_type_aliases@@Base+0x214>
   131f4:	mov	r0, r4
   131f8:	mov	r1, r8
   131fc:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   13200:	add	r1, sp, #12
   13204:	mov	r0, r4
   13208:	bl	221c4 <flatcc_builder_finalize_aligned_buffer@@Base>
   1320c:	ldr	r1, [sp, #12]
   13210:	movw	r2, #17220	; 0x4344
   13214:	movw	r3, #51328	; 0xc880
   13218:	mov	r4, r0
   1321c:	movt	r2, #2
   13220:	movt	r3, #1
   13224:	bl	23554 <flatcc_verify_table_as_root@@Base>
   13228:	cmp	r0, #0
   1322c:	beq	13270 <test_type_aliases@@Base+0x118>
   13230:	mov	r5, r0
   13234:	movw	r0, #41072	; 0xa070
   13238:	ldr	r2, [sp, #12]
   1323c:	mov	r1, r4
   13240:	movt	r0, #3
   13244:	ldr	r3, [r0]
   13248:	movw	r0, #17225	; 0x4349
   1324c:	movt	r0, #2
   13250:	bl	13674 <test_type_aliases@@Base+0x51c>
   13254:	mov	r0, r5
   13258:	bl	228d0 <flatcc_verify_error_string@@Base>
   1325c:	mov	r1, r0
   13260:	movw	r0, #17244	; 0x435c
   13264:	movt	r0, #2
   13268:	bl	12e98 <printf@plt>
   1326c:	b	13358 <test_type_aliases@@Base+0x200>
   13270:	cmp	r4, #0
   13274:	beq	13628 <test_type_aliases@@Base+0x4d0>
   13278:	ldr	r0, [r4, #4]
   1327c:	movw	r1, #20301	; 0x4f4d
   13280:	movt	r1, #21326	; 0x534e
   13284:	cmp	r0, r1
   13288:	bne	13628 <test_type_aliases@@Base+0x4d0>
   1328c:	ldr	r1, [r4]
   13290:	mov	r6, r4
   13294:	ldr	r2, [r6, r1]!
   13298:	mov	r1, r6
   1329c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   132a0:	cmp	r2, #5
   132a4:	bls	13348 <test_type_aliases@@Base+0x1f0>
   132a8:	ldrh	r3, [r1, #4]
   132ac:	cmp	r3, #0
   132b0:	beq	13348 <test_type_aliases@@Base+0x1f0>
   132b4:	cmp	r2, #10
   132b8:	bcc	13348 <test_type_aliases@@Base+0x1f0>
   132bc:	ldrb	r3, [r6, r3]
   132c0:	cmp	r3, #128	; 0x80
   132c4:	bne	13348 <test_type_aliases@@Base+0x1f0>
   132c8:	ldrh	r3, [r1, #8]
   132cc:	cmp	r3, #0
   132d0:	beq	13348 <test_type_aliases@@Base+0x1f0>
   132d4:	cmp	r2, #14
   132d8:	bcc	13348 <test_type_aliases@@Base+0x1f0>
   132dc:	add	r3, r6, r3
   132e0:	ldrh	r3, [r3]
   132e4:	cmp	r3, #32768	; 0x8000
   132e8:	bne	13348 <test_type_aliases@@Base+0x1f0>
   132ec:	ldrh	r3, [r1, #12]
   132f0:	cmp	r3, #0
   132f4:	beq	13348 <test_type_aliases@@Base+0x1f0>
   132f8:	cmp	r2, #18
   132fc:	bcc	13348 <test_type_aliases@@Base+0x1f0>
   13300:	ldr	r3, [r6, r3]
   13304:	cmp	r3, #-2147483648	; 0x80000000
   13308:	bne	13348 <test_type_aliases@@Base+0x1f0>
   1330c:	ldrh	r3, [r1, #16]
   13310:	cmp	r3, #0
   13314:	beq	13348 <test_type_aliases@@Base+0x1f0>
   13318:	mov	r0, r6
   1331c:	ldr	r3, [r0, r3]!
   13320:	ldr	r0, [r0, #4]
   13324:	eor	r0, r0, #-2147483648	; 0x80000000
   13328:	orrs	r0, r3, r0
   1332c:	bne	13348 <test_type_aliases@@Base+0x1f0>
   13330:	ldrh	r3, [r1, #6]
   13334:	cmp	r3, #0
   13338:	beq	13348 <test_type_aliases@@Base+0x1f0>
   1333c:	ldrb	r0, [r6, r3]
   13340:	cmp	r0, #255	; 0xff
   13344:	beq	1355c <test_type_aliases@@Base+0x404>
   13348:	movw	r0, #25296	; 0x62d0
   1334c:	movt	r0, #2
   13350:	bl	12eec <puts@plt>
   13354:	mvn	r5, #0
   13358:	mov	r0, r4
   1335c:	bl	22304 <flatcc_builder_aligned_free@@Base>
   13360:	mov	r0, r5
   13364:	sub	sp, fp, #24
   13368:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   1336c:	mov	r0, r4
   13370:	mov	r1, #6
   13374:	mov	r2, #8
   13378:	mov	r3, #8
   1337c:	bl	2102c <flatcc_builder_table_add@@Base>
   13380:	cmp	r0, #0
   13384:	beq	131f4 <test_type_aliases@@Base+0x9c>
   13388:	mov	r9, #-2147483648	; 0x80000000
   1338c:	mov	r8, #0
   13390:	mov	r1, #7
   13394:	mov	r2, #8
   13398:	mov	r3, #8
   1339c:	strd	r8, [r0]
   133a0:	mov	r0, r4
   133a4:	bl	2102c <flatcc_builder_table_add@@Base>
   133a8:	cmp	r0, #0
   133ac:	beq	131f4 <test_type_aliases@@Base+0x9c>
   133b0:	mvn	r1, #0
   133b4:	mov	r2, #8
   133b8:	mov	r3, #8
   133bc:	str	r1, [r0]
   133c0:	str	r1, [r0, #4]
   133c4:	mov	r0, r4
   133c8:	mov	r1, #9
   133cc:	bl	2102c <flatcc_builder_table_add@@Base>
   133d0:	cmp	r0, #0
   133d4:	beq	131f4 <test_type_aliases@@Base+0x9c>
   133d8:	movw	r1, #26214	; 0x6666
   133dc:	movw	r2, #26214	; 0x6666
   133e0:	mov	r3, #4
   133e4:	movt	r2, #26214	; 0x6666
   133e8:	movt	r1, #16386	; 0x4002
   133ec:	str	r2, [r0]
   133f0:	str	r1, [r0, #4]
   133f4:	mov	r0, r4
   133f8:	mov	r1, #4
   133fc:	mov	r2, #4
   13400:	bl	2102c <flatcc_builder_table_add@@Base>
   13404:	cmp	r0, #0
   13408:	beq	131f4 <test_type_aliases@@Base+0x9c>
   1340c:	mov	r1, #-2147483648	; 0x80000000
   13410:	mov	r2, #4
   13414:	mov	r3, #4
   13418:	str	r1, [r0]
   1341c:	mov	r0, r4
   13420:	mov	r1, #5
   13424:	bl	2102c <flatcc_builder_table_add@@Base>
   13428:	cmp	r0, #0
   1342c:	beq	131f4 <test_type_aliases@@Base+0x9c>
   13430:	mvn	r1, #0
   13434:	mov	r2, #4
   13438:	mov	r3, #4
   1343c:	str	r1, [r0]
   13440:	mov	r0, r4
   13444:	mov	r1, #8
   13448:	bl	2102c <flatcc_builder_table_add@@Base>
   1344c:	cmp	r0, #0
   13450:	beq	131f4 <test_type_aliases@@Base+0x9c>
   13454:	movw	r1, #13107	; 0x3333
   13458:	cmp	r6, #0
   1345c:	movt	r1, #16403	; 0x4013
   13460:	str	r1, [r0]
   13464:	beq	131f4 <test_type_aliases@@Base+0x9c>
   13468:	mov	r0, r4
   1346c:	mov	r1, #10
   13470:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   13474:	cmp	r0, #0
   13478:	strne	r6, [r0]
   1347c:	cmpne	r5, #0
   13480:	beq	131f4 <test_type_aliases@@Base+0x9c>
   13484:	mov	r0, r4
   13488:	mov	r1, #11
   1348c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   13490:	cmp	r0, #0
   13494:	beq	131f4 <test_type_aliases@@Base+0x9c>
   13498:	str	r5, [r0]
   1349c:	mov	r0, r4
   134a0:	mov	r1, #2
   134a4:	mov	r2, #2
   134a8:	mov	r3, #2
   134ac:	bl	2102c <flatcc_builder_table_add@@Base>
   134b0:	cmp	r0, #0
   134b4:	beq	131f4 <test_type_aliases@@Base+0x9c>
   134b8:	mov	r1, #32768	; 0x8000
   134bc:	mov	r2, #2
   134c0:	mov	r3, #2
   134c4:	strh	r1, [r0]
   134c8:	mov	r0, r4
   134cc:	mov	r1, #3
   134d0:	bl	2102c <flatcc_builder_table_add@@Base>
   134d4:	cmp	r0, #0
   134d8:	beq	131f4 <test_type_aliases@@Base+0x9c>
   134dc:	movw	r1, #65535	; 0xffff
   134e0:	mov	r2, #1
   134e4:	mov	r3, #1
   134e8:	mov	r8, #0
   134ec:	strh	r1, [r0]
   134f0:	mov	r0, r4
   134f4:	mov	r1, #0
   134f8:	bl	2102c <flatcc_builder_table_add@@Base>
   134fc:	cmp	r0, #0
   13500:	beq	131f4 <test_type_aliases@@Base+0x9c>
   13504:	mov	r1, #128	; 0x80
   13508:	mov	r2, #1
   1350c:	mov	r3, #1
   13510:	strb	r1, [r0]
   13514:	mov	r0, r4
   13518:	mov	r1, #1
   1351c:	bl	2102c <flatcc_builder_table_add@@Base>
   13520:	cmp	r0, #0
   13524:	beq	131f4 <test_type_aliases@@Base+0x9c>
   13528:	mov	r1, #255	; 0xff
   1352c:	mov	r2, #0
   13530:	strb	r1, [r0]
   13534:	movw	r1, #25226	; 0x628a
   13538:	mov	r0, r4
   1353c:	movt	r1, #2
   13540:	bl	205dc <flatcc_builder_check_required@@Base>
   13544:	cmp	r0, #0
   13548:	beq	13648 <test_type_aliases@@Base+0x4f0>
   1354c:	mov	r0, r4
   13550:	bl	2066c <flatcc_builder_end_table@@Base>
   13554:	mov	r8, r0
   13558:	b	131f4 <test_type_aliases@@Base+0x9c>
   1355c:	ldrh	r3, [r1, #10]
   13560:	cmp	r3, #0
   13564:	beq	13348 <test_type_aliases@@Base+0x1f0>
   13568:	add	r0, r6, r3
   1356c:	movw	r3, #65535	; 0xffff
   13570:	ldrh	r0, [r0]
   13574:	cmp	r0, r3
   13578:	bne	13348 <test_type_aliases@@Base+0x1f0>
   1357c:	ldrh	r3, [r1, #14]
   13580:	cmp	r3, #0
   13584:	beq	13348 <test_type_aliases@@Base+0x1f0>
   13588:	cmp	r2, #20
   1358c:	bcc	13348 <test_type_aliases@@Base+0x1f0>
   13590:	ldr	r0, [r6, r3]
   13594:	cmn	r0, #1
   13598:	bne	13348 <test_type_aliases@@Base+0x1f0>
   1359c:	ldrh	r3, [r1, #18]
   135a0:	cmp	r3, #0
   135a4:	beq	13348 <test_type_aliases@@Base+0x1f0>
   135a8:	cmp	r2, #22
   135ac:	bcc	13348 <test_type_aliases@@Base+0x1f0>
   135b0:	mov	r0, r6
   135b4:	mvn	r5, #0
   135b8:	ldr	r3, [r0, r3]!
   135bc:	ldr	r0, [r0, #4]
   135c0:	eor	r3, r3, r5
   135c4:	eor	r0, r0, r5
   135c8:	orrs	r0, r3, r0
   135cc:	bne	13348 <test_type_aliases@@Base+0x1f0>
   135d0:	ldrh	r3, [r1, #20]
   135d4:	cmp	r3, #0
   135d8:	beq	13348 <test_type_aliases@@Base+0x1f0>
   135dc:	cmp	r2, #24
   135e0:	bcc	13348 <test_type_aliases@@Base+0x1f0>
   135e4:	add	r0, r6, r3
   135e8:	vldr	s2, [pc, #128]	; 13670 <test_type_aliases@@Base+0x518>
   135ec:	vldr	s0, [r0]
   135f0:	vcmp.f32	s0, s2
   135f4:	vmrs	APSR_nzcv, fpscr
   135f8:	bne	13348 <test_type_aliases@@Base+0x1f0>
   135fc:	ldrh	r1, [r1, #22]
   13600:	cmp	r1, #0
   13604:	beq	13348 <test_type_aliases@@Base+0x1f0>
   13608:	add	r0, r6, r1
   1360c:	vldr	d16, [pc, #84]	; 13668 <test_type_aliases@@Base+0x510>
   13610:	vldr	d17, [r0]
   13614:	vcmp.f64	d17, d16
   13618:	vmrs	APSR_nzcv, fpscr
   1361c:	bne	13348 <test_type_aliases@@Base+0x1f0>
   13620:	mov	r5, #0
   13624:	b	13358 <test_type_aliases@@Base+0x200>
   13628:	movw	r0, #20552	; 0x5048
   1362c:	movw	r1, #20590	; 0x506e
   13630:	movw	r3, #21218	; 0x52e2
   13634:	movw	r2, #749	; 0x2ed
   13638:	movt	r0, #2
   1363c:	movt	r1, #2
   13640:	movt	r3, #2
   13644:	bl	12f88 <__assert_fail@plt>
   13648:	movw	r0, #20827	; 0x515b
   1364c:	movw	r1, #21001	; 0x5209
   13650:	movw	r3, #21100	; 0x526c
   13654:	mov	r2, #237	; 0xed
   13658:	movt	r0, #2
   1365c:	movt	r1, #2
   13660:	movt	r3, #2
   13664:	bl	12f88 <__assert_fail@plt>
   13668:	strbtvs	r6, [r6], -r6, ror #12
   1366c:	andmi	r6, r2, r6, ror #12
   13670:	andsmi	r3, r3, r3, lsr r3
   13674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13678:	add	fp, sp, #28
   1367c:	sub	sp, sp, #20
   13680:	mov	r4, r3
   13684:	mov	r5, r2
   13688:	mov	r6, r1
   1368c:	cmp	r0, #0
   13690:	beq	136a8 <test_type_aliases@@Base+0x550>
   13694:	movw	r1, #21189	; 0x52c5
   13698:	mov	r2, r0
   1369c:	mov	r0, r4
   136a0:	movt	r1, #2
   136a4:	bl	12f28 <fprintf@plt>
   136a8:	cmp	r5, #0
   136ac:	beq	13788 <test_type_aliases@@Base+0x630>
   136b0:	movw	sl, #21208	; 0x52d8
   136b4:	add	r7, sp, #3
   136b8:	mov	r8, #0
   136bc:	movt	sl, #2
   136c0:	ands	r9, r8, #15
   136c4:	beq	136e0 <test_type_aliases@@Base+0x588>
   136c8:	tst	r8, #7
   136cc:	bne	13710 <test_type_aliases@@Base+0x5b8>
   136d0:	mov	r0, #32
   136d4:	mov	r1, r4
   136d8:	bl	12f64 <fputc@plt>
   136dc:	b	13710 <test_type_aliases@@Base+0x5b8>
   136e0:	cmp	r8, #0
   136e4:	beq	136fc <test_type_aliases@@Base+0x5a4>
   136e8:	movw	r1, #21194	; 0x52ca
   136ec:	mov	r0, r4
   136f0:	mov	r2, r7
   136f4:	movt	r1, #2
   136f8:	bl	12f28 <fprintf@plt>
   136fc:	movw	r1, #21200	; 0x52d0
   13700:	mov	r0, r4
   13704:	mov	r2, r8
   13708:	movt	r1, #2
   1370c:	bl	12f28 <fprintf@plt>
   13710:	ldrb	r2, [r6, r8]
   13714:	mov	r0, r4
   13718:	mov	r1, sl
   1371c:	bl	12f28 <fprintf@plt>
   13720:	ldrb	r0, [r6, r8]
   13724:	add	r8, r8, #1
   13728:	sub	r1, r0, #32
   1372c:	uxtb	r1, r1
   13730:	cmp	r1, #94	; 0x5e
   13734:	mov	r1, #0
   13738:	movwhi	r0, #46	; 0x2e
   1373c:	cmp	r5, r8
   13740:	strb	r0, [r7, r9]
   13744:	add	r0, r7, r9
   13748:	strb	r1, [r0, #1]
   1374c:	bne	136c0 <test_type_aliases@@Base+0x568>
   13750:	tst	r5, #15
   13754:	beq	13788 <test_type_aliases@@Base+0x630>
   13758:	add	r6, r5, #1
   1375c:	movw	r5, #21214	; 0x52de
   13760:	movt	r5, #2
   13764:	mov	r0, r5
   13768:	mov	r1, #3
   1376c:	mov	r2, #1
   13770:	mov	r3, r4
   13774:	bl	12ed4 <fwrite@plt>
   13778:	add	r0, r6, #1
   1377c:	tst	r6, #15
   13780:	mov	r6, r0
   13784:	bne	13764 <test_type_aliases@@Base+0x60c>
   13788:	movw	r1, #21194	; 0x52ca
   1378c:	add	r2, sp, #3
   13790:	mov	r0, r4
   13794:	movt	r1, #2
   13798:	bl	12f28 <fprintf@plt>
   1379c:	sub	sp, fp, #28
   137a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000137a4 <test_empty_monster@@Base>:
   137a4:	push	{r4, r5, fp, lr}
   137a8:	add	fp, sp, #8
   137ac:	sub	sp, sp, #8
   137b0:	mov	r4, r0
   137b4:	bl	1dd44 <flatcc_builder_reset@@Base>
   137b8:	movw	r1, #17220	; 0x4344
   137bc:	mov	r0, r4
   137c0:	mov	r2, #0
   137c4:	mov	r3, #0
   137c8:	movt	r1, #2
   137cc:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   137d0:	mov	r0, r4
   137d4:	mov	r1, #36	; 0x24
   137d8:	bl	1fcbc <flatcc_builder_start_table@@Base>
   137dc:	movw	r1, #17288	; 0x4388
   137e0:	mov	r0, r4
   137e4:	movt	r1, #2
   137e8:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   137ec:	cmp	r0, #0
   137f0:	beq	1380c <test_empty_monster@@Base+0x68>
   137f4:	mov	r5, r0
   137f8:	mov	r0, r4
   137fc:	mov	r1, #3
   13800:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   13804:	cmp	r0, #0
   13808:	strne	r5, [r0]
   1380c:	movw	r1, #25228	; 0x628c
   13810:	mov	r0, r4
   13814:	mov	r2, #1
   13818:	movt	r1, #2
   1381c:	bl	205dc <flatcc_builder_check_required@@Base>
   13820:	cmp	r0, #0
   13824:	beq	139ac <test_empty_monster@@Base+0x208>
   13828:	mov	r0, r4
   1382c:	bl	2066c <flatcc_builder_end_table@@Base>
   13830:	mov	r1, r0
   13834:	mov	r0, r4
   13838:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   1383c:	add	r1, sp, #4
   13840:	mov	r0, r4
   13844:	bl	221c4 <flatcc_builder_finalize_aligned_buffer@@Base>
   13848:	mov	r4, r0
   1384c:	movw	r0, #41072	; 0xa070
   13850:	ldr	r2, [sp, #4]
   13854:	movt	r0, #3
   13858:	mov	r1, r4
   1385c:	ldr	r3, [r0]
   13860:	movw	r0, #17298	; 0x4392
   13864:	movt	r0, #2
   13868:	bl	13674 <test_type_aliases@@Base+0x51c>
   1386c:	cmp	r4, #0
   13870:	beq	138cc <test_empty_monster@@Base+0x128>
   13874:	ldr	r0, [r4, #4]
   13878:	movw	r1, #20301	; 0x4f4d
   1387c:	movt	r1, #21326	; 0x534e
   13880:	cmp	r0, r1
   13884:	bne	138cc <test_empty_monster@@Base+0x128>
   13888:	ldr	r0, [r4]
   1388c:	mov	r1, r4
   13890:	ldr	r2, [r1, r0]!
   13894:	mov	r0, r1
   13898:	ldrh	r2, [r0, -r2]!	; <UNPREDICTABLE>
   1389c:	cmp	r2, #9
   138a0:	bls	138f0 <test_empty_monster@@Base+0x14c>
   138a4:	ldrh	r2, [r0, #8]
   138a8:	cmp	r2, #0
   138ac:	beq	138f8 <test_empty_monster@@Base+0x154>
   138b0:	add	r0, r1, r2
   138b4:	ldrh	r0, [r0]
   138b8:	cmp	r0, #100	; 0x64
   138bc:	bne	13958 <test_empty_monster@@Base+0x1b4>
   138c0:	movw	r0, #25264	; 0x62b0
   138c4:	movt	r0, #2
   138c8:	b	138d4 <test_empty_monster@@Base+0x130>
   138cc:	movw	r0, #25744	; 0x6490
   138d0:	movt	r0, #2
   138d4:	bl	12eec <puts@plt>
   138d8:	mvn	r5, #0
   138dc:	mov	r0, r4
   138e0:	bl	22304 <flatcc_builder_aligned_free@@Base>
   138e4:	mov	r0, r5
   138e8:	sub	sp, fp, #8
   138ec:	pop	{r4, r5, fp, pc}
   138f0:	cmp	r2, #6
   138f4:	bcc	13910 <test_empty_monster@@Base+0x16c>
   138f8:	ldrh	r0, [r0, #4]
   138fc:	cmp	r0, #0
   13900:	beq	13910 <test_empty_monster@@Base+0x16c>
   13904:	movw	r0, #25872	; 0x6510
   13908:	movt	r0, #2
   1390c:	b	138d4 <test_empty_monster@@Base+0x130>
   13910:	ldr	r1, [sp, #4]
   13914:	movw	r2, #17220	; 0x4344
   13918:	movw	r3, #51708	; 0xc9fc
   1391c:	mov	r0, r4
   13920:	movt	r2, #2
   13924:	movt	r3, #1
   13928:	bl	23554 <flatcc_verify_table_as_root@@Base>
   1392c:	cmp	r0, #0
   13930:	beq	13964 <test_empty_monster@@Base+0x1c0>
   13934:	bl	228d0 <flatcc_verify_error_string@@Base>
   13938:	mov	r1, r0
   1393c:	movw	r0, #17318	; 0x43a6
   13940:	movt	r0, #2
   13944:	bl	12e98 <printf@plt>
   13948:	mvn	r5, #0
   1394c:	mov	r0, r5
   13950:	sub	sp, fp, #8
   13954:	pop	{r4, r5, fp, pc}
   13958:	movw	r0, #27040	; 0x69a0
   1395c:	movt	r0, #2
   13960:	b	138d4 <test_empty_monster@@Base+0x130>
   13964:	ldr	r0, [sp, #4]
   13968:	movw	r2, #17220	; 0x4344
   1396c:	movw	r3, #51708	; 0xc9fc
   13970:	movt	r2, #2
   13974:	movt	r3, #1
   13978:	sub	r1, r0, #1
   1397c:	mov	r0, r4
   13980:	bl	23554 <flatcc_verify_table_as_root@@Base>
   13984:	mov	r5, #0
   13988:	cmp	r0, #0
   1398c:	bne	138dc <test_empty_monster@@Base+0x138>
   13990:	movw	r0, #25344	; 0x6300
   13994:	movt	r0, #2
   13998:	bl	12eec <puts@plt>
   1399c:	mvn	r5, #0
   139a0:	mov	r0, r5
   139a4:	sub	sp, fp, #8
   139a8:	pop	{r4, r5, fp, pc}
   139ac:	movw	r0, #21291	; 0x532b
   139b0:	movw	r1, #21001	; 0x5209
   139b4:	movw	r3, #21453	; 0x53cd
   139b8:	mov	r2, #235	; 0xeb
   139bc:	movt	r0, #2
   139c0:	movt	r1, #2
   139c4:	movt	r3, #2
   139c8:	bl	12f88 <__assert_fail@plt>

000139cc <test_typed_empty_monster@@Base>:
   139cc:	push	{r4, r5, r6, sl, fp, lr}
   139d0:	add	fp, sp, #16
   139d4:	sub	sp, sp, #8
   139d8:	mov	r4, r0
   139dc:	mov	r0, #0
   139e0:	str	r0, [sp]
   139e4:	mov	r0, r4
   139e8:	bl	1dd44 <flatcc_builder_reset@@Base>
   139ec:	movw	r1, #17358	; 0x43ce
   139f0:	mov	r0, r4
   139f4:	mov	r2, #0
   139f8:	mov	r3, #0
   139fc:	movt	r1, #2
   13a00:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   13a04:	mov	r0, r4
   13a08:	mov	r1, #36	; 0x24
   13a0c:	bl	1fcbc <flatcc_builder_start_table@@Base>
   13a10:	movw	r1, #17288	; 0x4388
   13a14:	mov	r0, r4
   13a18:	movt	r1, #2
   13a1c:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   13a20:	cmp	r0, #0
   13a24:	beq	13a40 <test_typed_empty_monster@@Base+0x74>
   13a28:	mov	r5, r0
   13a2c:	mov	r0, r4
   13a30:	mov	r1, #3
   13a34:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   13a38:	cmp	r0, #0
   13a3c:	strne	r5, [r0]
   13a40:	movw	r1, #25228	; 0x628c
   13a44:	mov	r0, r4
   13a48:	mov	r2, #1
   13a4c:	movt	r1, #2
   13a50:	bl	205dc <flatcc_builder_check_required@@Base>
   13a54:	cmp	r0, #0
   13a58:	beq	13c1c <test_typed_empty_monster@@Base+0x250>
   13a5c:	mov	r0, r4
   13a60:	bl	2066c <flatcc_builder_end_table@@Base>
   13a64:	mov	r1, r0
   13a68:	mov	r0, r4
   13a6c:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   13a70:	add	r1, sp, #4
   13a74:	mov	r0, r4
   13a78:	bl	221c4 <flatcc_builder_finalize_aligned_buffer@@Base>
   13a7c:	mov	r4, r0
   13a80:	movw	r0, #41072	; 0xa070
   13a84:	ldr	r2, [sp, #4]
   13a88:	movt	r0, #3
   13a8c:	mov	r1, r4
   13a90:	ldr	r3, [r0]
   13a94:	movw	r0, #17363	; 0x43d3
   13a98:	movt	r0, #2
   13a9c:	bl	13674 <test_type_aliases@@Base+0x51c>
   13aa0:	ldr	r1, [r4, #4]
   13aa4:	movw	r6, #62593	; 0xf481
   13aa8:	movt	r6, #13070	; 0x330e
   13aac:	cmp	r1, r6
   13ab0:	bne	13b24 <test_typed_empty_monster@@Base+0x158>
   13ab4:	movw	r0, #25744	; 0x6490
   13ab8:	movt	r0, #2
   13abc:	bl	12eec <puts@plt>
   13ac0:	ldr	r1, [sp, #4]
   13ac4:	movw	r2, #17358	; 0x43ce
   13ac8:	movw	r3, #51708	; 0xc9fc
   13acc:	mov	r0, r4
   13ad0:	movt	r2, #2
   13ad4:	movt	r3, #1
   13ad8:	bl	23554 <flatcc_verify_table_as_root@@Base>
   13adc:	cmp	r0, #0
   13ae0:	bne	13b08 <test_typed_empty_monster@@Base+0x13c>
   13ae4:	ldr	r1, [sp, #4]
   13ae8:	movw	r2, #17358	; 0x43ce
   13aec:	movw	r3, #51708	; 0xc9fc
   13af0:	mov	r0, r4
   13af4:	movt	r2, #2
   13af8:	movt	r3, #1
   13afc:	bl	23554 <flatcc_verify_table_as_root@@Base>
   13b00:	cmp	r0, #0
   13b04:	beq	13b48 <test_typed_empty_monster@@Base+0x17c>
   13b08:	mov	r5, r0
   13b0c:	bl	228d0 <flatcc_verify_error_string@@Base>
   13b10:	mov	r1, r0
   13b14:	movw	r0, #17439	; 0x441f
   13b18:	movt	r0, #2
   13b1c:	bl	12e98 <printf@plt>
   13b20:	b	13b34 <test_typed_empty_monster@@Base+0x168>
   13b24:	movw	r0, #17389	; 0x43ed
   13b28:	movt	r0, #2
   13b2c:	bl	12e98 <printf@plt>
   13b30:	mvn	r5, #0
   13b34:	mov	r0, r4
   13b38:	bl	22304 <flatcc_builder_aligned_free@@Base>
   13b3c:	mov	r0, r5
   13b40:	sub	sp, fp, #16
   13b44:	pop	{r4, r5, r6, sl, fp, pc}
   13b48:	ldr	r1, [sp, #4]
   13b4c:	movw	r3, #51708	; 0xc9fc
   13b50:	mov	r0, r4
   13b54:	mov	r2, r6
   13b58:	movt	r3, #1
   13b5c:	bl	236b8 <flatcc_verify_table_as_typed_root@@Base>
   13b60:	cmp	r0, #0
   13b64:	beq	13b84 <test_typed_empty_monster@@Base+0x1b8>
   13b68:	mov	r5, r0
   13b6c:	bl	228d0 <flatcc_verify_error_string@@Base>
   13b70:	mov	r1, r0
   13b74:	movw	r0, #17485	; 0x444d
   13b78:	movt	r0, #2
   13b7c:	bl	12e98 <printf@plt>
   13b80:	b	13b34 <test_typed_empty_monster@@Base+0x168>
   13b84:	ldr	r1, [sp, #4]
   13b88:	movw	r3, #51708	; 0xc9fc
   13b8c:	mov	r0, r4
   13b90:	mov	r2, r6
   13b94:	movt	r3, #1
   13b98:	bl	236b8 <flatcc_verify_table_as_typed_root@@Base>
   13b9c:	cmp	r0, #0
   13ba0:	beq	13bc0 <test_typed_empty_monster@@Base+0x1f4>
   13ba4:	mov	r5, r0
   13ba8:	bl	228d0 <flatcc_verify_error_string@@Base>
   13bac:	mov	r1, r0
   13bb0:	movw	r0, #17540	; 0x4484
   13bb4:	movt	r0, #2
   13bb8:	bl	12e98 <printf@plt>
   13bbc:	b	13b34 <test_typed_empty_monster@@Base+0x168>
   13bc0:	ldr	r1, [sp, #4]
   13bc4:	movw	r3, #51708	; 0xc9fc
   13bc8:	mov	r2, sp
   13bcc:	mov	r0, r4
   13bd0:	str	r6, [sp]
   13bd4:	movt	r3, #1
   13bd8:	bl	23554 <flatcc_verify_table_as_root@@Base>
   13bdc:	cmp	r0, #0
   13be0:	bne	13b08 <test_typed_empty_monster@@Base+0x13c>
   13be4:	ldr	r1, [sp, #4]
   13be8:	movw	r2, #17220	; 0x4344
   13bec:	movw	r3, #51708	; 0xc9fc
   13bf0:	mov	r0, r4
   13bf4:	movt	r2, #2
   13bf8:	movt	r3, #1
   13bfc:	bl	23554 <flatcc_verify_table_as_root@@Base>
   13c00:	mov	r5, #0
   13c04:	cmp	r0, #0
   13c08:	bne	13b34 <test_typed_empty_monster@@Base+0x168>
   13c0c:	movw	r0, #25392	; 0x6330
   13c10:	movt	r0, #2
   13c14:	bl	12eec <puts@plt>
   13c18:	b	13b34 <test_typed_empty_monster@@Base+0x168>
   13c1c:	movw	r0, #21291	; 0x532b
   13c20:	movw	r1, #21001	; 0x5209
   13c24:	movw	r3, #21453	; 0x53cd
   13c28:	mov	r2, #235	; 0xeb
   13c2c:	movt	r0, #2
   13c30:	movt	r1, #2
   13c34:	movt	r3, #2
   13c38:	bl	12f88 <__assert_fail@plt>

00013c3c <verify_table_with_emptystruct@@Base>:
   13c3c:	push	{fp, lr}
   13c40:	mov	fp, sp
   13c44:	cmp	r0, #0
   13c48:	beq	13ca4 <verify_table_with_emptystruct@@Base+0x68>
   13c4c:	ldr	r1, [r0, #4]
   13c50:	movw	r2, #20301	; 0x4f4d
   13c54:	movt	r2, #21326	; 0x534e
   13c58:	cmp	r1, r2
   13c5c:	bne	13ca4 <verify_table_with_emptystruct@@Base+0x68>
   13c60:	ldr	r1, [r0]
   13c64:	ldr	r2, [r0, r1]!
   13c68:	mov	r1, r0
   13c6c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   13c70:	cmp	r2, #5
   13c74:	bls	13c90 <verify_table_with_emptystruct@@Base+0x54>
   13c78:	ldrh	r1, [r1, #4]
   13c7c:	cmp	r1, #0
   13c80:	beq	13c90 <verify_table_with_emptystruct@@Base+0x54>
   13c84:	adds	r0, r0, r1
   13c88:	mov	r0, #0
   13c8c:	popne	{fp, pc}
   13c90:	movw	r0, #25520	; 0x63b0
   13c94:	movt	r0, #2
   13c98:	bl	12eec <puts@plt>
   13c9c:	mvn	r0, #0
   13ca0:	pop	{fp, pc}
   13ca4:	movw	r0, #25472	; 0x6380
   13ca8:	movt	r0, #2
   13cac:	bl	12eec <puts@plt>
   13cb0:	mvn	r0, #0
   13cb4:	pop	{fp, pc}

00013cb8 <test_table_with_emptystruct@@Base>:
   13cb8:	push	{r4, r5, fp, lr}
   13cbc:	add	fp, sp, #8
   13cc0:	sub	sp, sp, #8
   13cc4:	mov	r4, r0
   13cc8:	bl	1dd44 <flatcc_builder_reset@@Base>
   13ccc:	movw	r1, #17220	; 0x4344
   13cd0:	mov	r0, r4
   13cd4:	mov	r2, #0
   13cd8:	mov	r3, #0
   13cdc:	mov	r5, #0
   13ce0:	movt	r1, #2
   13ce4:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   13ce8:	cmp	r0, #0
   13cec:	bne	13d58 <test_table_with_emptystruct@@Base+0xa0>
   13cf0:	mov	r0, r4
   13cf4:	mov	r1, #1
   13cf8:	bl	1fcbc <flatcc_builder_start_table@@Base>
   13cfc:	cmp	r0, #0
   13d00:	bne	13d4c <test_table_with_emptystruct@@Base+0x94>
   13d04:	mov	r0, r4
   13d08:	mov	r1, #0
   13d0c:	mov	r2, #0
   13d10:	mov	r3, #1
   13d14:	mov	r5, #0
   13d18:	bl	2102c <flatcc_builder_table_add@@Base>
   13d1c:	cmp	r0, #0
   13d20:	beq	13d4c <test_table_with_emptystruct@@Base+0x94>
   13d24:	movw	r1, #25232	; 0x6290
   13d28:	mov	r0, r4
   13d2c:	mov	r2, #0
   13d30:	movt	r1, #2
   13d34:	bl	205dc <flatcc_builder_check_required@@Base>
   13d38:	cmp	r0, #0
   13d3c:	beq	13e08 <test_table_with_emptystruct@@Base+0x150>
   13d40:	mov	r0, r4
   13d44:	bl	2066c <flatcc_builder_end_table@@Base>
   13d48:	mov	r5, r0
   13d4c:	mov	r0, r4
   13d50:	mov	r1, r5
   13d54:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   13d58:	add	r1, sp, #4
   13d5c:	mov	r0, r4
   13d60:	bl	221c4 <flatcc_builder_finalize_aligned_buffer@@Base>
   13d64:	mov	r4, r0
   13d68:	movw	r0, #41072	; 0xa070
   13d6c:	ldr	r2, [sp, #4]
   13d70:	movt	r0, #3
   13d74:	mov	r1, r4
   13d78:	ldr	r3, [r0]
   13d7c:	movw	r0, #17610	; 0x44ca
   13d80:	movt	r0, #2
   13d84:	bl	13674 <test_type_aliases@@Base+0x51c>
   13d88:	cmp	r4, #0
   13d8c:	beq	13de4 <test_table_with_emptystruct@@Base+0x12c>
   13d90:	ldr	r0, [r4, #4]
   13d94:	movw	r1, #20301	; 0x4f4d
   13d98:	movt	r1, #21326	; 0x534e
   13d9c:	cmp	r0, r1
   13da0:	bne	13de4 <test_table_with_emptystruct@@Base+0x12c>
   13da4:	ldr	r1, [r4]
   13da8:	mov	r0, r4
   13dac:	ldr	r2, [r0, r1]!
   13db0:	mov	r1, r0
   13db4:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   13db8:	cmp	r2, #5
   13dbc:	bls	13dd8 <test_table_with_emptystruct@@Base+0x120>
   13dc0:	ldrh	r1, [r1, #4]
   13dc4:	cmp	r1, #0
   13dc8:	beq	13dd8 <test_table_with_emptystruct@@Base+0x120>
   13dcc:	adds	r0, r0, r1
   13dd0:	mov	r5, #0
   13dd4:	bne	13df4 <test_table_with_emptystruct@@Base+0x13c>
   13dd8:	movw	r0, #25520	; 0x63b0
   13ddc:	movt	r0, #2
   13de0:	b	13dec <test_table_with_emptystruct@@Base+0x134>
   13de4:	movw	r0, #25472	; 0x6380
   13de8:	movt	r0, #2
   13dec:	bl	12eec <puts@plt>
   13df0:	mvn	r5, #0
   13df4:	mov	r0, r4
   13df8:	bl	22304 <flatcc_builder_aligned_free@@Base>
   13dfc:	mov	r0, r5
   13e00:	sub	sp, fp, #8
   13e04:	pop	{r4, r5, fp, pc}
   13e08:	movw	r0, #21534	; 0x541e
   13e0c:	movw	r1, #21001	; 0x5209
   13e10:	movw	r3, #21723	; 0x54db
   13e14:	mov	r2, #215	; 0xd7
   13e18:	movt	r0, #2
   13e1c:	movt	r1, #2
   13e20:	movt	r3, #2
   13e24:	bl	12f88 <__assert_fail@plt>

00013e28 <test_typed_table_with_emptystruct@@Base>:
   13e28:	push	{r4, r5, fp, lr}
   13e2c:	add	fp, sp, #8
   13e30:	sub	sp, sp, #8
   13e34:	mov	r4, r0
   13e38:	bl	1dd44 <flatcc_builder_reset@@Base>
   13e3c:	movw	r1, #17634	; 0x44e2
   13e40:	mov	r0, r4
   13e44:	mov	r2, #0
   13e48:	mov	r3, #0
   13e4c:	mov	r5, #0
   13e50:	movt	r1, #2
   13e54:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   13e58:	cmp	r0, #0
   13e5c:	bne	13ec8 <test_typed_table_with_emptystruct@@Base+0xa0>
   13e60:	mov	r0, r4
   13e64:	mov	r1, #1
   13e68:	bl	1fcbc <flatcc_builder_start_table@@Base>
   13e6c:	cmp	r0, #0
   13e70:	bne	13ebc <test_typed_table_with_emptystruct@@Base+0x94>
   13e74:	mov	r0, r4
   13e78:	mov	r1, #0
   13e7c:	mov	r2, #0
   13e80:	mov	r3, #1
   13e84:	mov	r5, #0
   13e88:	bl	2102c <flatcc_builder_table_add@@Base>
   13e8c:	cmp	r0, #0
   13e90:	beq	13ebc <test_typed_table_with_emptystruct@@Base+0x94>
   13e94:	movw	r1, #25232	; 0x6290
   13e98:	mov	r0, r4
   13e9c:	mov	r2, #0
   13ea0:	movt	r1, #2
   13ea4:	bl	205dc <flatcc_builder_check_required@@Base>
   13ea8:	cmp	r0, #0
   13eac:	beq	13fc8 <test_typed_table_with_emptystruct@@Base+0x1a0>
   13eb0:	mov	r0, r4
   13eb4:	bl	2066c <flatcc_builder_end_table@@Base>
   13eb8:	mov	r5, r0
   13ebc:	mov	r0, r4
   13ec0:	mov	r1, r5
   13ec4:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   13ec8:	add	r1, sp, #4
   13ecc:	mov	r0, r4
   13ed0:	bl	2205c <flatcc_builder_get_direct_buffer@@Base>
   13ed4:	mov	r4, r0
   13ed8:	movw	r0, #41072	; 0xa070
   13edc:	ldr	r2, [sp, #4]
   13ee0:	movt	r0, #3
   13ee4:	mov	r1, r4
   13ee8:	ldr	r3, [r0]
   13eec:	movw	r0, #17604	; 0x44c4
   13ef0:	movt	r0, #2
   13ef4:	bl	13674 <test_type_aliases@@Base+0x51c>
   13ef8:	ldr	r1, [sp, #4]
   13efc:	movw	r2, #17634	; 0x44e2
   13f00:	movw	r3, #54112	; 0xd360
   13f04:	mov	r0, r4
   13f08:	movt	r2, #2
   13f0c:	movt	r3, #1
   13f10:	bl	23554 <flatcc_verify_table_as_root@@Base>
   13f14:	cmp	r0, #0
   13f18:	beq	13f28 <test_typed_table_with_emptystruct@@Base+0x100>
   13f1c:	movw	r0, #25664	; 0x6440
   13f20:	movt	r0, #2
   13f24:	b	13f88 <test_typed_table_with_emptystruct@@Base+0x160>
   13f28:	ldr	r1, [sp, #4]
   13f2c:	movw	r2, #17634	; 0x44e2
   13f30:	movw	r3, #54112	; 0xd360
   13f34:	mov	r0, r4
   13f38:	movt	r2, #2
   13f3c:	movt	r3, #1
   13f40:	bl	23554 <flatcc_verify_table_as_root@@Base>
   13f44:	cmp	r0, #0
   13f48:	beq	13f58 <test_typed_table_with_emptystruct@@Base+0x130>
   13f4c:	movw	r0, #25632	; 0x6420
   13f50:	movt	r0, #2
   13f54:	b	13f88 <test_typed_table_with_emptystruct@@Base+0x160>
   13f58:	ldr	r1, [sp, #4]
   13f5c:	movw	r5, #14262	; 0x37b6
   13f60:	movw	r3, #54112	; 0xd360
   13f64:	mov	r0, r4
   13f68:	movt	r5, #45277	; 0xb0dd
   13f6c:	movt	r3, #1
   13f70:	mov	r2, r5
   13f74:	bl	236b8 <flatcc_verify_table_as_typed_root@@Base>
   13f78:	cmp	r0, #0
   13f7c:	beq	13f98 <test_typed_table_with_emptystruct@@Base+0x170>
   13f80:	movw	r0, #25584	; 0x63f0
   13f84:	movt	r0, #2
   13f88:	bl	12eec <puts@plt>
   13f8c:	mvn	r0, #0
   13f90:	sub	sp, fp, #8
   13f94:	pop	{r4, r5, fp, pc}
   13f98:	cmp	r4, #0
   13f9c:	beq	13fbc <test_typed_table_with_emptystruct@@Base+0x194>
   13fa0:	ldr	r1, [r4, #4]
   13fa4:	mov	r0, #0
   13fa8:	cmp	r1, r5
   13fac:	beq	13f90 <test_typed_table_with_emptystruct@@Base+0x168>
   13fb0:	movw	r0, #25023	; 0x61bf
   13fb4:	movt	r0, #2
   13fb8:	b	13f88 <test_typed_table_with_emptystruct@@Base+0x160>
   13fbc:	movw	r0, #25552	; 0x63d0
   13fc0:	movt	r0, #2
   13fc4:	b	13f88 <test_typed_table_with_emptystruct@@Base+0x160>
   13fc8:	movw	r0, #21534	; 0x541e
   13fcc:	movw	r1, #21001	; 0x5209
   13fd0:	movw	r3, #21723	; 0x54db
   13fd4:	mov	r2, #215	; 0xd7
   13fd8:	movt	r0, #2
   13fdc:	movt	r1, #2
   13fe0:	movt	r3, #2
   13fe4:	bl	12f88 <__assert_fail@plt>

00013fe8 <verify_monster@@Base>:
   13fe8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13fec:	add	fp, sp, #24
   13ff0:	ldr	r1, [r0, #4]
   13ff4:	movw	r2, #20301	; 0x4f4d
   13ff8:	movt	r2, #21326	; 0x534e
   13ffc:	cmp	r1, r2
   14000:	bne	1405c <verify_monster@@Base+0x74>
   14004:	ldr	r1, [r0]
   14008:	adds	r5, r0, r1
   1400c:	beq	14074 <verify_monster@@Base+0x8c>
   14010:	ldr	r1, [r5]
   14014:	mov	r0, r5
   14018:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   1401c:	cmp	r1, #10
   14020:	bcc	14068 <verify_monster@@Base+0x80>
   14024:	ldrh	r1, [r0, #8]
   14028:	cmp	r1, #0
   1402c:	beq	14068 <verify_monster@@Base+0x80>
   14030:	add	r1, r5, r1
   14034:	ldrh	r1, [r1]
   14038:	cmp	r1, #80	; 0x50
   1403c:	bne	14068 <verify_monster@@Base+0x80>
   14040:	ldrh	r0, [r0, #4]
   14044:	cmp	r0, #0
   14048:	addsne	r4, r5, r0
   1404c:	bne	14088 <verify_monster@@Base+0xa0>
   14050:	movw	r0, #25776	; 0x64b0
   14054:	movt	r0, #2
   14058:	b	1407c <verify_monster@@Base+0x94>
   1405c:	movw	r0, #25696	; 0x6460
   14060:	movt	r0, #2
   14064:	b	1407c <verify_monster@@Base+0x94>
   14068:	movw	r0, #27040	; 0x69a0
   1406c:	movt	r0, #2
   14070:	b	1407c <verify_monster@@Base+0x94>
   14074:	movw	r0, #25744	; 0x6490
   14078:	movt	r0, #2
   1407c:	bl	12eec <puts@plt>
   14080:	mvn	r0, #0
   14084:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14088:	tst	r4, #15
   1408c:	beq	1409c <verify_monster@@Base+0xb4>
   14090:	movw	r0, #26992	; 0x6970
   14094:	movt	r0, #2
   14098:	bl	12eec <puts@plt>
   1409c:	vldr	s0, [pc, #992]	; 14484 <verify_monster@@Base+0x49c>
   140a0:	vldr	s2, [r4, #8]
   140a4:	vcmp.f32	s2, s0
   140a8:	vmrs	APSR_nzcv, fpscr
   140ac:	beq	140bc <verify_monster@@Base+0xd4>
   140b0:	movw	r0, #26944	; 0x6940
   140b4:	movt	r0, #2
   140b8:	b	1407c <verify_monster@@Base+0x94>
   140bc:	vldr	s0, [r4]
   140c0:	vmov.f32	s2, #112	; 0x3f800000  1.0
   140c4:	vcmp.f32	s0, s2
   140c8:	vmrs	APSR_nzcv, fpscr
   140cc:	bne	140e4 <verify_monster@@Base+0xfc>
   140d0:	vldr	s0, [r4, #4]
   140d4:	vmov.f32	s2, #0	; 0x40000000  2.0
   140d8:	vcmp.f32	s0, s2
   140dc:	vmrs	APSR_nzcv, fpscr
   140e0:	beq	140f0 <verify_monster@@Base+0x108>
   140e4:	movw	r0, #26912	; 0x6920
   140e8:	movt	r0, #2
   140ec:	b	1407c <verify_monster@@Base+0x94>
   140f0:	vldr	d16, [r4, #16]
   140f4:	vcmp.f64	d16, #0.0
   140f8:	vmrs	APSR_nzcv, fpscr
   140fc:	bne	1410c <verify_monster@@Base+0x124>
   14100:	ldr	r0, [r4, #26]
   14104:	cmp	r0, #0
   14108:	beq	14118 <verify_monster@@Base+0x130>
   1410c:	movw	r0, #26864	; 0x68f0
   14110:	movt	r0, #2
   14114:	b	1407c <verify_monster@@Base+0x94>
   14118:	ldr	r0, [r5]
   1411c:	mov	r6, r5
   14120:	ldrh	r7, [r6, -r0]!
   14124:	cmp	r7, #12
   14128:	bcc	14aec <verify_monster@@Base+0xb04>
   1412c:	ldrh	r0, [r6, #10]
   14130:	cmp	r0, #0
   14134:	beq	14aec <verify_monster@@Base+0xb04>
   14138:	mov	r1, r5
   1413c:	ldr	r0, [r1, r0]!
   14140:	add	r0, r1, r0
   14144:	movw	r1, #17288	; 0x4388
   14148:	add	r4, r0, #4
   1414c:	movt	r1, #2
   14150:	mov	r0, r4
   14154:	bl	12e8c <strcmp@plt>
   14158:	cmp	r0, #0
   1415c:	beq	1416c <verify_monster@@Base+0x184>
   14160:	movw	r0, #25808	; 0x64d0
   14164:	movt	r0, #2
   14168:	b	1407c <verify_monster@@Base+0x94>
   1416c:	ldr	r0, [r4, #-4]
   14170:	cmp	r0, #9
   14174:	bne	1428c <verify_monster@@Base+0x2a4>
   14178:	cmp	r7, #18
   1417c:	bcc	14298 <verify_monster@@Base+0x2b0>
   14180:	ldrh	r0, [r6, #16]
   14184:	cmp	r0, #0
   14188:	beq	14298 <verify_monster@@Base+0x2b0>
   1418c:	ldrb	r0, [r5, r0]
   14190:	cmp	r0, #2
   14194:	bne	14298 <verify_monster@@Base+0x2b0>
   14198:	ldrh	r1, [r6, #14]
   1419c:	cmp	r1, #0
   141a0:	beq	142a4 <verify_monster@@Base+0x2bc>
   141a4:	mov	r0, r5
   141a8:	ldr	r1, [r0, r1]!
   141ac:	ldr	r1, [r0, r1]!
   141b0:	cmp	r1, #10
   141b4:	bne	142a4 <verify_monster@@Base+0x2bc>
   141b8:	add	r0, r0, #4
   141bc:	mov	r1, #0
   141c0:	ldrb	r2, [r0]
   141c4:	cmp	r2, #0
   141c8:	bne	142b0 <verify_monster@@Base+0x2c8>
   141cc:	ldrb	r2, [r0, #1]
   141d0:	mov	r1, #1
   141d4:	cmp	r2, #1
   141d8:	bne	142b0 <verify_monster@@Base+0x2c8>
   141dc:	ldrb	r2, [r0, #2]
   141e0:	mov	r1, #2
   141e4:	cmp	r2, #2
   141e8:	bne	142b0 <verify_monster@@Base+0x2c8>
   141ec:	ldrb	r2, [r0, #3]
   141f0:	mov	r1, #3
   141f4:	cmp	r2, #3
   141f8:	bne	142b0 <verify_monster@@Base+0x2c8>
   141fc:	ldrb	r2, [r0, #4]
   14200:	mov	r1, #4
   14204:	cmp	r2, #4
   14208:	bne	142b0 <verify_monster@@Base+0x2c8>
   1420c:	ldrb	r2, [r0, #5]
   14210:	mov	r1, #5
   14214:	cmp	r2, #5
   14218:	bne	142b0 <verify_monster@@Base+0x2c8>
   1421c:	ldrb	r2, [r0, #6]
   14220:	mov	r1, #6
   14224:	cmp	r2, #6
   14228:	bne	142b0 <verify_monster@@Base+0x2c8>
   1422c:	ldrb	r2, [r0, #7]
   14230:	mov	r1, #7
   14234:	cmp	r2, #7
   14238:	bne	142b0 <verify_monster@@Base+0x2c8>
   1423c:	ldrb	r2, [r0, #8]
   14240:	mov	r1, #8
   14244:	cmp	r2, #8
   14248:	bne	142b0 <verify_monster@@Base+0x2c8>
   1424c:	ldrb	r0, [r0, #9]
   14250:	mov	r1, #9
   14254:	cmp	r0, #9
   14258:	bne	142b0 <verify_monster@@Base+0x2c8>
   1425c:	cmp	r7, #7
   14260:	bls	14438 <verify_monster@@Base+0x450>
   14264:	ldrh	r0, [r6, #6]
   14268:	cmp	r0, #0
   1426c:	beq	142c0 <verify_monster@@Base+0x2d8>
   14270:	add	r0, r5, r0
   14274:	ldrh	r0, [r0]
   14278:	cmp	r0, #150	; 0x96
   1427c:	bne	14444 <verify_monster@@Base+0x45c>
   14280:	movw	r0, #26704	; 0x6850
   14284:	movt	r0, #2
   14288:	b	1407c <verify_monster@@Base+0x94>
   1428c:	movw	r0, #26832	; 0x68d0
   14290:	movt	r0, #2
   14294:	b	1407c <verify_monster@@Base+0x94>
   14298:	movw	r0, #26800	; 0x68b0
   1429c:	movt	r0, #2
   142a0:	b	1407c <verify_monster@@Base+0x94>
   142a4:	movw	r0, #26768	; 0x6890
   142a8:	movt	r0, #2
   142ac:	b	1407c <verify_monster@@Base+0x94>
   142b0:	movw	r0, #17639	; 0x44e7
   142b4:	movt	r0, #2
   142b8:	bl	12e98 <printf@plt>
   142bc:	b	14080 <verify_monster@@Base+0x98>
   142c0:	cmp	r7, #10
   142c4:	bcc	14438 <verify_monster@@Base+0x450>
   142c8:	ldrh	r0, [r6, #8]
   142cc:	cmp	r0, #0
   142d0:	beq	14438 <verify_monster@@Base+0x450>
   142d4:	ldrh	r0, [r6, #4]
   142d8:	cmp	r0, #0
   142dc:	beq	1445c <verify_monster@@Base+0x474>
   142e0:	cmp	r7, #24
   142e4:	bcc	14450 <verify_monster@@Base+0x468>
   142e8:	ldrh	r1, [r6, #22]
   142ec:	cmp	r1, #0
   142f0:	beq	14450 <verify_monster@@Base+0x468>
   142f4:	mov	r0, r5
   142f8:	ldr	r1, [r0, r1]!
   142fc:	ldr	r1, [r0, r1]!
   14300:	cmp	r1, #5
   14304:	bne	14450 <verify_monster@@Base+0x468>
   14308:	add	r0, r0, #4
   1430c:	mov	r1, #0
   14310:	ldrh	r2, [r0]
   14314:	cmp	r2, #16
   14318:	bne	14468 <verify_monster@@Base+0x480>
   1431c:	ldrb	r2, [r0, #2]
   14320:	mov	r1, #0
   14324:	cmp	r2, #32
   14328:	bne	14468 <verify_monster@@Base+0x480>
   1432c:	ldrh	r2, [r0, #4]
   14330:	mov	r1, #1
   14334:	cmp	r2, #48	; 0x30
   14338:	bne	14468 <verify_monster@@Base+0x480>
   1433c:	ldrb	r2, [r0, #6]
   14340:	mov	r1, #1
   14344:	cmp	r2, #64	; 0x40
   14348:	bne	14468 <verify_monster@@Base+0x480>
   1434c:	ldrh	r2, [r0, #8]
   14350:	mov	r1, #2
   14354:	cmp	r2, #80	; 0x50
   14358:	bne	14468 <verify_monster@@Base+0x480>
   1435c:	ldrb	r2, [r0, #10]
   14360:	mov	r1, #2
   14364:	cmp	r2, #96	; 0x60
   14368:	bne	14468 <verify_monster@@Base+0x480>
   1436c:	ldrh	r2, [r0, #12]
   14370:	mov	r1, #3
   14374:	cmp	r2, #112	; 0x70
   14378:	bne	14468 <verify_monster@@Base+0x480>
   1437c:	ldrb	r2, [r0, #14]
   14380:	mov	r1, #3
   14384:	cmp	r2, #128	; 0x80
   14388:	bne	14468 <verify_monster@@Base+0x480>
   1438c:	ldrh	r2, [r0, #16]
   14390:	movw	r3, #401	; 0x191
   14394:	mov	r1, #4
   14398:	cmp	r2, r3
   1439c:	bne	14468 <verify_monster@@Base+0x480>
   143a0:	ldrb	r0, [r0, #18]
   143a4:	mov	r1, #4
   143a8:	cmp	r0, #145	; 0x91
   143ac:	bne	14468 <verify_monster@@Base+0x480>
   143b0:	cmp	r7, #27
   143b4:	bls	14478 <verify_monster@@Base+0x490>
   143b8:	ldrh	r1, [r6, #26]
   143bc:	cmp	r1, #0
   143c0:	beq	14478 <verify_monster@@Base+0x490>
   143c4:	mov	r0, r5
   143c8:	ldr	r1, [r0, r1]!
   143cc:	ldr	r1, [r0, r1]!
   143d0:	cmp	r1, #8
   143d4:	bne	14478 <verify_monster@@Base+0x490>
   143d8:	add	r9, r0, #4
   143dc:	mov	r4, r9
   143e0:	ldr	r0, [r4, #20]!
   143e4:	ldr	r8, [r4, r0]!
   143e8:	mov	r0, r4
   143ec:	ldrh	r1, [r0, -r8]!
   143f0:	cmp	r1, #12
   143f4:	bcc	14aec <verify_monster@@Base+0xb04>
   143f8:	ldrh	r0, [r0, #10]
   143fc:	cmp	r0, #0
   14400:	beq	14aec <verify_monster@@Base+0xb04>
   14404:	mov	r1, r4
   14408:	ldr	r0, [r1, r0]!
   1440c:	add	r0, r1, r0
   14410:	movw	r1, #17809	; 0x4591
   14414:	add	r0, r0, #4
   14418:	movt	r1, #2
   1441c:	bl	12e8c <strcmp@plt>
   14420:	cmp	r0, #0
   14424:	beq	14488 <verify_monster@@Base+0x4a0>
   14428:	movw	r0, #17793	; 0x4581
   1442c:	movt	r0, #2
   14430:	bl	12e98 <printf@plt>
   14434:	b	14080 <verify_monster@@Base+0x98>
   14438:	movw	r0, #25840	; 0x64f0
   1443c:	movt	r0, #2
   14440:	b	1407c <verify_monster@@Base+0x94>
   14444:	movw	r0, #26736	; 0x6870
   14448:	movt	r0, #2
   1444c:	b	1407c <verify_monster@@Base+0x94>
   14450:	movw	r0, #26656	; 0x6820
   14454:	movt	r0, #2
   14458:	b	1407c <verify_monster@@Base+0x94>
   1445c:	movw	r0, #25872	; 0x6510
   14460:	movt	r0, #2
   14464:	b	1407c <verify_monster@@Base+0x94>
   14468:	movw	r0, #17668	; 0x4504
   1446c:	movt	r0, #2
   14470:	bl	12e98 <printf@plt>
   14474:	b	14080 <verify_monster@@Base+0x98>
   14478:	movw	r0, #26608	; 0x67f0
   1447c:	movt	r0, #2
   14480:	b	1407c <verify_monster@@Base+0x94>
   14484:	subgt	ip, ip, sp, asr #25
   14488:	mov	r0, r9
   1448c:	ldr	r1, [r0, #4]!
   14490:	add	r0, r0, r1
   14494:	cmp	r0, r4
   14498:	beq	144a8 <verify_monster@@Base+0x4c0>
   1449c:	movw	r0, #26544	; 0x67b0
   144a0:	movt	r0, #2
   144a4:	b	1407c <verify_monster@@Base+0x94>
   144a8:	rsb	r2, r8, #0
   144ac:	mov	r1, r0
   144b0:	ldrh	r2, [r1, r2]!	; <UNPREDICTABLE>
   144b4:	cmp	r2, #12
   144b8:	bcc	14aec <verify_monster@@Base+0xb04>
   144bc:	ldrh	r1, [r1, #10]
   144c0:	cmp	r1, #0
   144c4:	beq	14aec <verify_monster@@Base+0xb04>
   144c8:	ldr	r1, [r0, r1]!
   144cc:	add	r0, r0, r1
   144d0:	movw	r1, #17809	; 0x4591
   144d4:	add	r8, r0, #4
   144d8:	movt	r1, #2
   144dc:	mov	r0, r8
   144e0:	bl	12e8c <strcmp@plt>
   144e4:	cmp	r0, #0
   144e8:	beq	144f8 <verify_monster@@Base+0x510>
   144ec:	movw	r0, #17817	; 0x4599
   144f0:	movt	r0, #2
   144f4:	b	146ac <verify_monster@@Base+0x6c4>
   144f8:	mov	r0, r9
   144fc:	ldr	r1, [r0, #8]!
   14500:	ldr	r2, [r0, r1]!
   14504:	mov	r1, r0
   14508:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1450c:	cmp	r2, #12
   14510:	bcc	14aec <verify_monster@@Base+0xb04>
   14514:	ldrh	r1, [r1, #10]
   14518:	cmp	r1, #0
   1451c:	beq	14aec <verify_monster@@Base+0xb04>
   14520:	ldr	r1, [r0, r1]!
   14524:	add	r0, r0, r1
   14528:	movw	r1, #17851	; 0x45bb
   1452c:	add	r8, r0, #4
   14530:	movt	r1, #2
   14534:	mov	r0, r8
   14538:	bl	12e8c <strcmp@plt>
   1453c:	cmp	r0, #0
   14540:	beq	14550 <verify_monster@@Base+0x568>
   14544:	movw	r0, #17857	; 0x45c1
   14548:	movt	r0, #2
   1454c:	b	146ac <verify_monster@@Base+0x6c4>
   14550:	ldr	r1, [r9]
   14554:	mov	r0, r9
   14558:	ldr	r2, [r0, r1]!
   1455c:	mov	r1, r0
   14560:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14564:	cmp	r2, #12
   14568:	bcc	14aec <verify_monster@@Base+0xb04>
   1456c:	ldrh	r1, [r1, #10]
   14570:	cmp	r1, #0
   14574:	beq	14aec <verify_monster@@Base+0xb04>
   14578:	ldr	r1, [r0, r1]!
   1457c:	add	r0, r0, r1
   14580:	movw	r1, #17891	; 0x45e3
   14584:	add	r8, r0, #4
   14588:	movt	r1, #2
   1458c:	mov	r0, r8
   14590:	bl	12e8c <strcmp@plt>
   14594:	cmp	r0, #0
   14598:	beq	145a8 <verify_monster@@Base+0x5c0>
   1459c:	movw	r0, #17900	; 0x45ec
   145a0:	movt	r0, #2
   145a4:	b	146ac <verify_monster@@Base+0x6c4>
   145a8:	mov	r0, r9
   145ac:	ldr	r1, [r0, #12]!
   145b0:	ldr	r2, [r0, r1]!
   145b4:	mov	r1, r0
   145b8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   145bc:	cmp	r2, #12
   145c0:	bcc	14aec <verify_monster@@Base+0xb04>
   145c4:	ldrh	r1, [r1, #10]
   145c8:	cmp	r1, #0
   145cc:	beq	14aec <verify_monster@@Base+0xb04>
   145d0:	ldr	r1, [r0, r1]!
   145d4:	add	r0, r0, r1
   145d8:	movw	r1, #17809	; 0x4591
   145dc:	add	r8, r0, #4
   145e0:	movt	r1, #2
   145e4:	mov	r0, r8
   145e8:	bl	12e8c <strcmp@plt>
   145ec:	cmp	r0, #0
   145f0:	beq	14600 <verify_monster@@Base+0x618>
   145f4:	movw	r0, #17937	; 0x4611
   145f8:	movt	r0, #2
   145fc:	b	146ac <verify_monster@@Base+0x6c4>
   14600:	mov	r0, r9
   14604:	ldr	r1, [r0, #16]!
   14608:	ldr	r2, [r0, r1]!
   1460c:	mov	r1, r0
   14610:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14614:	cmp	r2, #12
   14618:	bcc	14aec <verify_monster@@Base+0xb04>
   1461c:	ldrh	r1, [r1, #10]
   14620:	cmp	r1, #0
   14624:	beq	14aec <verify_monster@@Base+0xb04>
   14628:	ldr	r1, [r0, r1]!
   1462c:	add	r0, r0, r1
   14630:	movw	r1, #17851	; 0x45bb
   14634:	add	r8, r0, #4
   14638:	movt	r1, #2
   1463c:	mov	r0, r8
   14640:	bl	12e8c <strcmp@plt>
   14644:	cmp	r0, #0
   14648:	beq	14658 <verify_monster@@Base+0x670>
   1464c:	movw	r0, #17973	; 0x4635
   14650:	movt	r0, #2
   14654:	b	146ac <verify_monster@@Base+0x6c4>
   14658:	mov	r0, r9
   1465c:	ldr	r1, [r0, #24]!
   14660:	ldr	r2, [r0, r1]!
   14664:	mov	r1, r0
   14668:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1466c:	cmp	r2, #12
   14670:	bcc	14aec <verify_monster@@Base+0xb04>
   14674:	ldrh	r1, [r1, #10]
   14678:	cmp	r1, #0
   1467c:	beq	14aec <verify_monster@@Base+0xb04>
   14680:	ldr	r1, [r0, r1]!
   14684:	add	r0, r0, r1
   14688:	movw	r1, #17891	; 0x45e3
   1468c:	add	r8, r0, #4
   14690:	movt	r1, #2
   14694:	mov	r0, r8
   14698:	bl	12e8c <strcmp@plt>
   1469c:	cmp	r0, #0
   146a0:	beq	146b8 <verify_monster@@Base+0x6d0>
   146a4:	movw	r0, #18007	; 0x4657
   146a8:	movt	r0, #2
   146ac:	mov	r1, r8
   146b0:	bl	12e98 <printf@plt>
   146b4:	b	14080 <verify_monster@@Base+0x98>
   146b8:	ldr	r0, [r9, #28]!
   146bc:	ldr	r1, [r9, r0]!
   146c0:	mov	r0, r9
   146c4:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   146c8:	cmp	r1, #12
   146cc:	bcc	14aec <verify_monster@@Base+0xb04>
   146d0:	ldrh	r0, [r0, #10]
   146d4:	cmp	r0, #0
   146d8:	beq	14aec <verify_monster@@Base+0xb04>
   146dc:	ldr	r0, [r9, r0]!
   146e0:	movw	r1, #17851	; 0x45bb
   146e4:	movt	r1, #2
   146e8:	add	r0, r9, r0
   146ec:	add	r4, r0, #4
   146f0:	mov	r0, r4
   146f4:	bl	12e8c <strcmp@plt>
   146f8:	cmp	r0, #0
   146fc:	beq	14714 <verify_monster@@Base+0x72c>
   14700:	movw	r0, #18044	; 0x467c
   14704:	mov	r1, r4
   14708:	movt	r0, #2
   1470c:	bl	12e98 <printf@plt>
   14710:	b	14080 <verify_monster@@Base+0x98>
   14714:	ldrh	r1, [r6, #24]
   14718:	cmp	r1, #0
   1471c:	beq	14764 <verify_monster@@Base+0x77c>
   14720:	mov	r0, r5
   14724:	ldr	r1, [r0, r1]!
   14728:	ldr	r1, [r0, r1]!
   1472c:	cmp	r1, #3
   14730:	bne	14764 <verify_monster@@Base+0x77c>
   14734:	add	r4, r0, #4
   14738:	movw	r1, #18081	; 0x46a1
   1473c:	ldr	r0, [r4]
   14740:	movt	r1, #2
   14744:	add	r0, r4, r0
   14748:	add	r0, r0, #4
   1474c:	bl	12e8c <strcmp@plt>
   14750:	cmp	r0, #0
   14754:	beq	14770 <verify_monster@@Base+0x788>
   14758:	movw	r0, #26464	; 0x6760
   1475c:	movt	r0, #2
   14760:	b	1407c <verify_monster@@Base+0x94>
   14764:	movw	r0, #26496	; 0x6780
   14768:	movt	r0, #2
   1476c:	b	1407c <verify_monster@@Base+0x94>
   14770:	mov	r0, r4
   14774:	ldr	r1, [r0, #4]!
   14778:	ldr	r1, [r0, r1]!
   1477c:	cmp	r1, #2
   14780:	bne	147a0 <verify_monster@@Base+0x7b8>
   14784:	add	r0, r0, #4
   14788:	ldrh	r0, [r0]
   1478c:	cmp	r0, #44	; 0x2c
   14790:	beq	147b0 <verify_monster@@Base+0x7c8>
   14794:	movw	r0, #26432	; 0x6740
   14798:	movt	r0, #2
   1479c:	b	1407c <verify_monster@@Base+0x94>
   147a0:	movw	r0, #18087	; 0x46a7
   147a4:	movt	r0, #2
   147a8:	bl	12e98 <printf@plt>
   147ac:	b	14080 <verify_monster@@Base+0x98>
   147b0:	ldr	r0, [r4, #8]!
   147b4:	movw	r1, #18113	; 0x46c1
   147b8:	movt	r1, #2
   147bc:	add	r0, r4, r0
   147c0:	add	r0, r0, #4
   147c4:	bl	12e8c <strcmp@plt>
   147c8:	cmp	r0, #0
   147cc:	beq	147dc <verify_monster@@Base+0x7f4>
   147d0:	movw	r0, #26400	; 0x6720
   147d4:	movt	r0, #2
   147d8:	b	1407c <verify_monster@@Base+0x94>
   147dc:	cmp	r7, #54	; 0x36
   147e0:	bcc	14858 <verify_monster@@Base+0x870>
   147e4:	ldrh	r1, [r6, #52]	; 0x34
   147e8:	cmp	r1, #0
   147ec:	beq	14858 <verify_monster@@Base+0x870>
   147f0:	mov	r0, r5
   147f4:	ldr	r1, [r0, r1]!
   147f8:	ldr	r1, [r0, r1]!
   147fc:	cmp	r1, #4
   14800:	bne	14864 <verify_monster@@Base+0x87c>
   14804:	add	r0, r0, #4
   14808:	mov	r1, #0
   1480c:	ldrb	r2, [r0]
   14810:	cmp	r2, #0
   14814:	bne	14848 <verify_monster@@Base+0x860>
   14818:	ldrb	r2, [r0, #1]
   1481c:	mov	r1, #1
   14820:	cmp	r2, #1
   14824:	bne	14848 <verify_monster@@Base+0x860>
   14828:	ldrb	r2, [r0, #2]
   1482c:	mov	r1, #2
   14830:	cmp	r2, #1
   14834:	bne	14848 <verify_monster@@Base+0x860>
   14838:	ldrb	r0, [r0, #3]
   1483c:	mov	r1, #3
   14840:	cmp	r0, #0
   14844:	beq	14870 <verify_monster@@Base+0x888>
   14848:	movw	r0, #18120	; 0x46c8
   1484c:	movt	r0, #2
   14850:	bl	12e98 <printf@plt>
   14854:	b	14080 <verify_monster@@Base+0x98>
   14858:	movw	r0, #25904	; 0x6530
   1485c:	movt	r0, #2
   14860:	b	1407c <verify_monster@@Base+0x94>
   14864:	movw	r0, #26368	; 0x6700
   14868:	movt	r0, #2
   1486c:	b	1407c <verify_monster@@Base+0x94>
   14870:	ldrh	r0, [r6, #18]
   14874:	cmp	r0, #0
   14878:	beq	148ec <verify_monster@@Base+0x904>
   1487c:	ldrb	r0, [r5, r0]
   14880:	cmp	r0, #1
   14884:	bne	148ec <verify_monster@@Base+0x904>
   14888:	ldrh	r0, [r6, #20]
   1488c:	cmp	r0, #0
   14890:	movne	r1, r5
   14894:	ldrne	r0, [r1, r0]!
   14898:	addsne	r0, r1, r0
   1489c:	beq	14a68 <verify_monster@@Base+0xa80>
   148a0:	ldr	r2, [r0]
   148a4:	mov	r1, r0
   148a8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   148ac:	cmp	r2, #12
   148b0:	bcc	14aec <verify_monster@@Base+0xb04>
   148b4:	ldrh	r1, [r1, #10]
   148b8:	cmp	r1, #0
   148bc:	beq	14aec <verify_monster@@Base+0xb04>
   148c0:	ldr	r1, [r0, r1]!
   148c4:	add	r0, r0, r1
   148c8:	movw	r1, #17809	; 0x4591
   148cc:	add	r0, r0, #4
   148d0:	movt	r1, #2
   148d4:	bl	12e8c <strcmp@plt>
   148d8:	cmp	r0, #0
   148dc:	beq	148f8 <verify_monster@@Base+0x910>
   148e0:	movw	r0, #26288	; 0x66b0
   148e4:	movt	r0, #2
   148e8:	b	1407c <verify_monster@@Base+0x94>
   148ec:	movw	r0, #26320	; 0x66d0
   148f0:	movt	r0, #2
   148f4:	b	1407c <verify_monster@@Base+0x94>
   148f8:	ldrh	r0, [r6, #28]
   148fc:	cmp	r0, #0
   14900:	movne	r1, r5
   14904:	ldrne	r0, [r1, r0]!
   14908:	addsne	r4, r1, r0
   1490c:	beq	14a68 <verify_monster@@Base+0xa80>
   14910:	ldr	r0, [r4]
   14914:	mov	r7, r4
   14918:	ldrh	r8, [r7, -r0]!
   1491c:	cmp	r8, #12
   14920:	bcc	14aec <verify_monster@@Base+0xb04>
   14924:	ldrh	r0, [r7, #10]
   14928:	cmp	r0, #0
   1492c:	beq	14aec <verify_monster@@Base+0xb04>
   14930:	mov	r1, r4
   14934:	ldr	r0, [r1, r0]!
   14938:	add	r0, r1, r0
   1493c:	movw	r1, #18151	; 0x46e7
   14940:	add	r0, r0, #4
   14944:	movt	r1, #2
   14948:	bl	12e8c <strcmp@plt>
   1494c:	cmp	r0, #0
   14950:	beq	14960 <verify_monster@@Base+0x978>
   14954:	movw	r0, #26256	; 0x6690
   14958:	movt	r0, #2
   1495c:	b	1407c <verify_monster@@Base+0x94>
   14960:	cmp	r8, #20
   14964:	bcc	1497c <verify_monster@@Base+0x994>
   14968:	ldrh	r0, [r7, #18]
   1496c:	cmp	r0, #0
   14970:	ldrbne	r0, [r4, r0]
   14974:	cmpne	r0, #0
   14978:	bne	149c0 <verify_monster@@Base+0x9d8>
   1497c:	ldrh	r2, [r6, #20]
   14980:	mov	r1, #0
   14984:	mov	r0, #0
   14988:	cmp	r2, #0
   1498c:	movne	r1, r5
   14990:	ldrne	r2, [r1, r2]!
   14994:	addne	r1, r1, r2
   14998:	ldrh	r2, [r6, #20]
   1499c:	cmp	r2, #0
   149a0:	movne	r0, r5
   149a4:	ldrne	r2, [r0, r2]!
   149a8:	addne	r0, r0, r2
   149ac:	cmp	r1, r0
   149b0:	beq	149cc <verify_monster@@Base+0x9e4>
   149b4:	movw	r0, #26176	; 0x6640
   149b8:	movt	r0, #2
   149bc:	b	1407c <verify_monster@@Base+0x94>
   149c0:	movw	r0, #26208	; 0x6660
   149c4:	movt	r0, #2
   149c8:	b	1407c <verify_monster@@Base+0x94>
   149cc:	cmp	r8, #28
   149d0:	bcc	149ec <verify_monster@@Base+0xa04>
   149d4:	ldrh	r0, [r7, #26]
   149d8:	cmp	r0, #0
   149dc:	ldrne	r0, [r4, r0]!
   149e0:	ldrne	r0, [r4, r0]!
   149e4:	cmpne	r0, #0
   149e8:	bne	14a0c <verify_monster@@Base+0xa24>
   149ec:	movw	r0, #22025	; 0x5609
   149f0:	movw	r1, #20590	; 0x506e
   149f4:	movw	r3, #22352	; 0x5750
   149f8:	movw	r2, #693	; 0x2b5
   149fc:	movt	r0, #2
   14a00:	movt	r1, #2
   14a04:	movt	r3, #2
   14a08:	bl	12f88 <__assert_fail@plt>
   14a0c:	add	r1, r4, #4
   14a10:	add	r0, r1, r0, lsl #2
   14a14:	ldr	r1, [r0, #-4]!
   14a18:	adds	r0, r0, r1
   14a1c:	beq	14a74 <verify_monster@@Base+0xa8c>
   14a20:	ldr	r2, [r0]
   14a24:	mov	r1, r0
   14a28:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14a2c:	cmp	r2, #20
   14a30:	bcc	14a94 <verify_monster@@Base+0xaac>
   14a34:	ldrh	r3, [r1, #18]
   14a38:	cmp	r3, #0
   14a3c:	beq	14a94 <verify_monster@@Base+0xaac>
   14a40:	ldrb	r3, [r0, r3]
   14a44:	cmp	r3, #1
   14a48:	bne	14a94 <verify_monster@@Base+0xaac>
   14a4c:	cmp	r2, #22
   14a50:	bcc	14a68 <verify_monster@@Base+0xa80>
   14a54:	ldrh	r1, [r1, #20]
   14a58:	cmp	r1, #0
   14a5c:	ldrne	r1, [r0, r1]!
   14a60:	addsne	r0, r0, r1
   14a64:	bne	14aa0 <verify_monster@@Base+0xab8>
   14a68:	movw	r0, #20552	; 0x5048
   14a6c:	movt	r0, #2
   14a70:	b	14af4 <verify_monster@@Base+0xb0c>
   14a74:	movw	r0, #20552	; 0x5048
   14a78:	movw	r1, #20590	; 0x506e
   14a7c:	movw	r3, #22532	; 0x5804
   14a80:	movw	r2, #717	; 0x2cd
   14a84:	movt	r0, #2
   14a88:	movt	r1, #2
   14a8c:	movt	r3, #2
   14a90:	bl	12f88 <__assert_fail@plt>
   14a94:	movw	r0, #26096	; 0x65f0
   14a98:	movt	r0, #2
   14a9c:	b	1407c <verify_monster@@Base+0x94>
   14aa0:	ldr	r2, [r0]
   14aa4:	mov	r1, r0
   14aa8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14aac:	cmp	r2, #12
   14ab0:	bcc	14aec <verify_monster@@Base+0xb04>
   14ab4:	ldrh	r1, [r1, #10]
   14ab8:	cmp	r1, #0
   14abc:	beq	14aec <verify_monster@@Base+0xb04>
   14ac0:	ldr	r1, [r0, r1]!
   14ac4:	add	r0, r0, r1
   14ac8:	movw	r1, #17809	; 0x4591
   14acc:	add	r0, r0, #4
   14ad0:	movt	r1, #2
   14ad4:	bl	12e8c <strcmp@plt>
   14ad8:	cmp	r0, #0
   14adc:	beq	14b0c <verify_monster@@Base+0xb24>
   14ae0:	movw	r0, #26032	; 0x65b0
   14ae4:	movt	r0, #2
   14ae8:	b	1407c <verify_monster@@Base+0x94>
   14aec:	movw	r0, #21903	; 0x558f
   14af0:	movt	r0, #2
   14af4:	movw	r1, #20590	; 0x506e
   14af8:	movw	r3, #21822	; 0x553e
   14afc:	movw	r2, #699	; 0x2bb
   14b00:	movt	r1, #2
   14b04:	movt	r3, #2
   14b08:	bl	12f88 <__assert_fail@plt>
   14b0c:	ldrh	r0, [r6, #34]	; 0x22
   14b10:	cmp	r0, #0
   14b14:	beq	14b24 <verify_monster@@Base+0xb3c>
   14b18:	ldrb	r0, [r5, r0]
   14b1c:	cmp	r0, #0
   14b20:	beq	14b30 <verify_monster@@Base+0xb48>
   14b24:	movw	r0, #26000	; 0x6590
   14b28:	movt	r0, #2
   14b2c:	b	1407c <verify_monster@@Base+0x94>
   14b30:	ldrh	r0, [r6, #32]
   14b34:	cmp	r0, #0
   14b38:	beq	14b9c <verify_monster@@Base+0xbb4>
   14b3c:	ldr	r0, [r5, r0]!
   14b40:	adds	r1, r5, r0
   14b44:	beq	14ba8 <verify_monster@@Base+0xbc0>
   14b48:	ldr	r0, [r1]
   14b4c:	ldrh	r2, [r1, -r0]!
   14b50:	mov	r0, #0
   14b54:	cmp	r2, #6
   14b58:	bcc	14084 <verify_monster@@Base+0x9c>
   14b5c:	ldrh	r3, [r1, #4]
   14b60:	cmp	r3, #0
   14b64:	bne	14b90 <verify_monster@@Base+0xba8>
   14b68:	cmp	r2, #8
   14b6c:	bcc	14084 <verify_monster@@Base+0x9c>
   14b70:	ldrh	r3, [r1, #6]
   14b74:	cmp	r3, #0
   14b78:	bne	14b90 <verify_monster@@Base+0xba8>
   14b7c:	cmp	r2, #10
   14b80:	bcc	14084 <verify_monster@@Base+0x9c>
   14b84:	ldrh	r1, [r1, #8]
   14b88:	cmp	r1, #0
   14b8c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   14b90:	movw	r0, #25968	; 0x6570
   14b94:	movt	r0, #2
   14b98:	b	1407c <verify_monster@@Base+0x94>
   14b9c:	movw	r0, #25936	; 0x6550
   14ba0:	movt	r0, #2
   14ba4:	b	1407c <verify_monster@@Base+0x94>
   14ba8:	movw	r0, #20552	; 0x5048
   14bac:	movw	r1, #20590	; 0x506e
   14bb0:	movw	r3, #22629	; 0x5865
   14bb4:	movw	r2, #607	; 0x25f
   14bb8:	movt	r0, #2
   14bbc:	movt	r1, #2
   14bc0:	movt	r3, #2
   14bc4:	bl	12f88 <__assert_fail@plt>

00014bc8 <gen_monster@@Base>:
   14bc8:	push	{r4, r5, r6, sl, fp, lr}
   14bcc:	add	fp, sp, #16
   14bd0:	sub	sp, sp, #48	; 0x30
   14bd4:	mov	r4, r0
   14bd8:	movw	r0, #25216	; 0x6280
   14bdc:	mov	r5, r1
   14be0:	movt	r0, #2
   14be4:	vldr	d16, [r0]
   14be8:	movw	r0, #2312	; 0x908
   14bec:	strh	r0, [sp, #40]	; 0x28
   14bf0:	movw	r0, #256	; 0x100
   14bf4:	movt	r0, #1
   14bf8:	str	r0, [sp, #8]
   14bfc:	mov	r0, r4
   14c00:	vstr	d16, [sp, #32]
   14c04:	bl	1dd44 <flatcc_builder_reset@@Base>
   14c08:	cmp	r5, #0
   14c0c:	movw	r1, #17220	; 0x4344
   14c10:	mov	r0, r4
   14c14:	mov	r2, #0
   14c18:	moveq	r3, #0
   14c1c:	movt	r1, #2
   14c20:	movne	r3, #2
   14c24:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   14c28:	cmp	r0, #0
   14c2c:	bne	14c3c <gen_monster@@Base+0x74>
   14c30:	mov	r0, r4
   14c34:	mov	r1, #36	; 0x24
   14c38:	bl	1fcbc <flatcc_builder_start_table@@Base>
   14c3c:	mov	r0, r4
   14c40:	mov	r1, #2
   14c44:	mov	r2, #2
   14c48:	mov	r3, #2
   14c4c:	bl	2102c <flatcc_builder_table_add@@Base>
   14c50:	cmp	r0, #0
   14c54:	mov	r2, #32
   14c58:	mov	r3, #16
   14c5c:	movne	r1, #80	; 0x50
   14c60:	strhne	r1, [r0]
   14c64:	mov	r0, r4
   14c68:	mov	r1, #0
   14c6c:	bl	2102c <flatcc_builder_table_add@@Base>
   14c70:	movw	r3, #52429	; 0xcccd
   14c74:	mov	r1, #1065353216	; 0x3f800000
   14c78:	mov	r2, #1073741824	; 0x40000000
   14c7c:	movt	r3, #49228	; 0xc04c
   14c80:	stm	r0, {r1, r2, r3}
   14c84:	movw	r1, #17288	; 0x4388
   14c88:	mov	r0, r4
   14c8c:	movt	r1, #2
   14c90:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   14c94:	cmp	r0, #0
   14c98:	beq	14cb4 <gen_monster@@Base+0xec>
   14c9c:	mov	r5, r0
   14ca0:	mov	r0, r4
   14ca4:	mov	r1, #3
   14ca8:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   14cac:	cmp	r0, #0
   14cb0:	strne	r5, [r0]
   14cb4:	mov	r0, r4
   14cb8:	mov	r1, #6
   14cbc:	mov	r2, #1
   14cc0:	mov	r3, #1
   14cc4:	mov	r5, #1
   14cc8:	bl	2102c <flatcc_builder_table_add@@Base>
   14ccc:	cmp	r0, #0
   14cd0:	mov	r2, #10
   14cd4:	mov	r3, #1
   14cd8:	movne	r1, #2
   14cdc:	strbne	r1, [r0]
   14ce0:	mvn	r0, #0
   14ce4:	add	r1, sp, #32
   14ce8:	str	r5, [sp]
   14cec:	str	r0, [sp, #4]
   14cf0:	mov	r0, r4
   14cf4:	bl	2082c <flatcc_builder_create_vector@@Base>
   14cf8:	cmp	r0, #0
   14cfc:	beq	14d18 <gen_monster@@Base+0x150>
   14d00:	mov	r5, r0
   14d04:	mov	r0, r4
   14d08:	mov	r1, #5
   14d0c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   14d10:	cmp	r0, #0
   14d14:	strne	r5, [r0]
   14d18:	mov	r0, r4
   14d1c:	mov	r1, #4
   14d20:	mov	r2, #2
   14d24:	mvn	r3, #-1073741824	; 0xc0000000
   14d28:	bl	1f704 <flatcc_builder_start_vector@@Base>
   14d2c:	mov	r0, r4
   14d30:	mov	r1, #1
   14d34:	bl	1ebb0 <flatcc_builder_extend_vector@@Base>
   14d38:	mov	r1, #16
   14d3c:	strh	r1, [r0]
   14d40:	mov	r1, #32
   14d44:	strb	r1, [r0, #2]
   14d48:	mov	r0, r4
   14d4c:	mov	r1, #2
   14d50:	bl	1ebb0 <flatcc_builder_extend_vector@@Base>
   14d54:	mov	r1, #48	; 0x30
   14d58:	strh	r1, [r0]
   14d5c:	mov	r1, #64	; 0x40
   14d60:	strb	r1, [r0, #2]
   14d64:	mov	r1, #80	; 0x50
   14d68:	strh	r1, [r0, #4]
   14d6c:	mov	r1, #96	; 0x60
   14d70:	strb	r1, [r0, #6]
   14d74:	mov	r0, r4
   14d78:	mov	r1, #1
   14d7c:	bl	1ebb0 <flatcc_builder_extend_vector@@Base>
   14d80:	cmp	r0, #0
   14d84:	movne	r1, #128	; 0x80
   14d88:	strbne	r1, [r0, #2]
   14d8c:	movne	r1, #112	; 0x70
   14d90:	strhne	r1, [r0]
   14d94:	mov	r0, r4
   14d98:	mov	r1, #1
   14d9c:	bl	1ebb0 <flatcc_builder_extend_vector@@Base>
   14da0:	movw	r5, #400	; 0x190
   14da4:	cmp	r0, #0
   14da8:	mov	r1, #1
   14dac:	movt	r5, #145	; 0x91
   14db0:	strne	r5, [r0]
   14db4:	mov	r0, r4
   14db8:	bl	1ebb0 <flatcc_builder_extend_vector@@Base>
   14dbc:	cmp	r0, #0
   14dc0:	mov	r1, #1
   14dc4:	strne	r5, [r0]
   14dc8:	mov	r0, r4
   14dcc:	bl	1ebb0 <flatcc_builder_extend_vector@@Base>
   14dd0:	cmp	r0, #0
   14dd4:	strne	r5, [r0]
   14dd8:	mov	r0, r4
   14ddc:	bl	20a74 <flatcc_builder_vector_count@@Base>
   14de0:	cmp	r0, #7
   14de4:	bne	154e8 <gen_monster@@Base+0x920>
   14de8:	mov	r0, r4
   14dec:	mov	r1, #2
   14df0:	bl	1f538 <flatcc_builder_truncate_vector@@Base>
   14df4:	mov	r0, r4
   14df8:	bl	20a74 <flatcc_builder_vector_count@@Base>
   14dfc:	cmp	r0, #5
   14e00:	bne	15508 <gen_monster@@Base+0x940>
   14e04:	mov	r0, r4
   14e08:	bl	20a80 <flatcc_builder_vector_edit@@Base>
   14e0c:	ldrh	r1, [r0, #16]
   14e10:	add	r1, r1, #1
   14e14:	strh	r1, [r0, #16]
   14e18:	mov	r0, r4
   14e1c:	bl	20984 <flatcc_builder_end_vector@@Base>
   14e20:	cmp	r0, #0
   14e24:	beq	14e40 <gen_monster@@Base+0x278>
   14e28:	mov	r5, r0
   14e2c:	mov	r0, r4
   14e30:	mov	r1, #9
   14e34:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   14e38:	cmp	r0, #0
   14e3c:	strne	r5, [r0]
   14e40:	mov	r0, r4
   14e44:	mov	r1, #36	; 0x24
   14e48:	bl	1fcbc <flatcc_builder_start_table@@Base>
   14e4c:	movw	r1, #17809	; 0x4591
   14e50:	mov	r0, r4
   14e54:	mov	r2, #7
   14e58:	movt	r1, #2
   14e5c:	bl	21c68 <flatcc_builder_create_string@@Base>
   14e60:	cmp	r0, #0
   14e64:	beq	14e80 <gen_monster@@Base+0x2b8>
   14e68:	mov	r5, r0
   14e6c:	mov	r0, r4
   14e70:	mov	r1, #3
   14e74:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   14e78:	cmp	r0, #0
   14e7c:	strne	r5, [r0]
   14e80:	movw	r1, #25228	; 0x628c
   14e84:	mov	r0, r4
   14e88:	mov	r2, #1
   14e8c:	movt	r1, #2
   14e90:	bl	205dc <flatcc_builder_check_required@@Base>
   14e94:	cmp	r0, #0
   14e98:	beq	154c8 <gen_monster@@Base+0x900>
   14e9c:	mov	r0, r4
   14ea0:	bl	2066c <flatcc_builder_end_table@@Base>
   14ea4:	mov	r5, r0
   14ea8:	mov	r0, r4
   14eac:	bl	1f790 <flatcc_builder_start_offset_vector@@Base>
   14eb0:	mov	r0, r4
   14eb4:	mov	r1, #2
   14eb8:	bl	1ef4c <flatcc_builder_extend_offset_vector@@Base>
   14ebc:	str	r5, [r0]
   14ec0:	str	r5, [r0, #4]
   14ec4:	mov	r0, r4
   14ec8:	mov	r1, #36	; 0x24
   14ecc:	bl	1fcbc <flatcc_builder_start_table@@Base>
   14ed0:	movw	r1, #17851	; 0x45bb
   14ed4:	mov	r0, r4
   14ed8:	mov	r2, #30
   14edc:	movt	r1, #2
   14ee0:	bl	21d98 <flatcc_builder_create_string_strn@@Base>
   14ee4:	cmp	r0, #0
   14ee8:	beq	14f04 <gen_monster@@Base+0x33c>
   14eec:	mov	r6, r0
   14ef0:	mov	r0, r4
   14ef4:	mov	r1, #3
   14ef8:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   14efc:	cmp	r0, #0
   14f00:	strne	r6, [r0]
   14f04:	movw	r1, #25228	; 0x628c
   14f08:	mov	r0, r4
   14f0c:	mov	r2, #1
   14f10:	movt	r1, #2
   14f14:	bl	205dc <flatcc_builder_check_required@@Base>
   14f18:	cmp	r0, #0
   14f1c:	beq	154c8 <gen_monster@@Base+0x900>
   14f20:	mov	r0, r4
   14f24:	bl	2066c <flatcc_builder_end_table@@Base>
   14f28:	mov	r1, r0
   14f2c:	mov	r0, r4
   14f30:	bl	1f038 <flatcc_builder_offset_vector_push@@Base>
   14f34:	ldr	r6, [r0]
   14f38:	mov	r0, r4
   14f3c:	mov	r1, #3
   14f40:	bl	1ef4c <flatcc_builder_extend_offset_vector@@Base>
   14f44:	stm	r0, {r5, r6}
   14f48:	mov	r0, r4
   14f4c:	mov	r1, #1
   14f50:	bl	1f5d4 <flatcc_builder_truncate_offset_vector@@Base>
   14f54:	mov	r0, r4
   14f58:	bl	20d90 <flatcc_builder_offset_vector_count@@Base>
   14f5c:	cmp	r0, #5
   14f60:	bne	15528 <gen_monster@@Base+0x960>
   14f64:	mov	r0, r4
   14f68:	mov	r1, #36	; 0x24
   14f6c:	bl	1fcbc <flatcc_builder_start_table@@Base>
   14f70:	movw	r1, #18331	; 0x479b
   14f74:	mov	r0, r4
   14f78:	mov	r2, #8
   14f7c:	movt	r1, #2
   14f80:	bl	21d98 <flatcc_builder_create_string_strn@@Base>
   14f84:	cmp	r0, #0
   14f88:	beq	14fa4 <gen_monster@@Base+0x3dc>
   14f8c:	mov	r6, r0
   14f90:	mov	r0, r4
   14f94:	mov	r1, #3
   14f98:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   14f9c:	cmp	r0, #0
   14fa0:	strne	r6, [r0]
   14fa4:	movw	r1, #25228	; 0x628c
   14fa8:	mov	r0, r4
   14fac:	mov	r2, #1
   14fb0:	movt	r1, #2
   14fb4:	bl	205dc <flatcc_builder_check_required@@Base>
   14fb8:	cmp	r0, #0
   14fbc:	beq	154c8 <gen_monster@@Base+0x900>
   14fc0:	mov	r0, r4
   14fc4:	bl	2066c <flatcc_builder_end_table@@Base>
   14fc8:	mov	r1, r0
   14fcc:	mov	r0, r4
   14fd0:	bl	1f038 <flatcc_builder_offset_vector_push@@Base>
   14fd4:	ldr	r0, [r0]
   14fd8:	str	r0, [sp, #24]
   14fdc:	mov	r0, r4
   14fe0:	bl	20d90 <flatcc_builder_offset_vector_count@@Base>
   14fe4:	cmp	r0, #6
   14fe8:	bne	15548 <gen_monster@@Base+0x980>
   14fec:	mov	r0, r4
   14ff0:	bl	20d88 <flatcc_builder_offset_vector_edit@@Base>
   14ff4:	ldr	r1, [r0, #8]
   14ff8:	ldr	r2, [r0, #20]
   14ffc:	str	r1, [sp, #28]
   15000:	str	r2, [r0]
   15004:	str	r5, [r0, #20]
   15008:	add	r1, sp, #24
   1500c:	mov	r0, r4
   15010:	mov	r2, #2
   15014:	bl	1f138 <flatcc_builder_append_offset_vector@@Base>
   15018:	mov	r0, r4
   1501c:	bl	1fa48 <flatcc_builder_end_offset_vector@@Base>
   15020:	cmp	r0, #0
   15024:	beq	15040 <gen_monster@@Base+0x478>
   15028:	mov	r6, r0
   1502c:	mov	r0, r4
   15030:	mov	r1, #11
   15034:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   15038:	cmp	r0, #0
   1503c:	strne	r6, [r0]
   15040:	movw	r1, #18081	; 0x46a1
   15044:	mov	r0, r4
   15048:	movt	r1, #2
   1504c:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   15050:	movw	r1, #25196	; 0x626c
   15054:	str	r0, [sp, #12]
   15058:	mov	r0, r4
   1505c:	mov	r2, #2
   15060:	movt	r1, #2
   15064:	bl	21c68 <flatcc_builder_create_string@@Base>
   15068:	movw	r1, #18113	; 0x46c1
   1506c:	str	r0, [sp, #16]
   15070:	mov	r0, r4
   15074:	movt	r1, #2
   15078:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   1507c:	str	r0, [sp, #20]
   15080:	add	r1, sp, #12
   15084:	mov	r0, r4
   15088:	mov	r2, #3
   1508c:	bl	1f808 <flatcc_builder_create_offset_vector@@Base>
   15090:	cmp	r0, #0
   15094:	beq	150b0 <gen_monster@@Base+0x4e8>
   15098:	mov	r6, r0
   1509c:	mov	r0, r4
   150a0:	mov	r1, #10
   150a4:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   150a8:	cmp	r0, #0
   150ac:	strne	r6, [r0]
   150b0:	mov	r0, r4
   150b4:	mov	r1, #1
   150b8:	mov	r2, #1
   150bc:	mvn	r3, #0
   150c0:	bl	1f704 <flatcc_builder_start_vector@@Base>
   150c4:	add	r6, sp, #8
   150c8:	mov	r0, r4
   150cc:	mov	r2, #1
   150d0:	mov	r1, r6
   150d4:	bl	1edf8 <flatcc_builder_append_vector@@Base>
   150d8:	orr	r1, r6, #1
   150dc:	mov	r0, r4
   150e0:	mov	r2, #3
   150e4:	bl	1edf8 <flatcc_builder_append_vector@@Base>
   150e8:	mov	r0, r4
   150ec:	bl	20984 <flatcc_builder_end_vector@@Base>
   150f0:	cmp	r0, #0
   150f4:	beq	15110 <gen_monster@@Base+0x548>
   150f8:	mov	r6, r0
   150fc:	mov	r0, r4
   15100:	mov	r1, #24
   15104:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   15108:	cmp	r0, #0
   1510c:	strne	r6, [r0]
   15110:	cmp	r5, #0
   15114:	beq	15154 <gen_monster@@Base+0x58c>
   15118:	mov	r0, r4
   1511c:	mov	r1, #7
   15120:	mov	r2, #1
   15124:	mov	r3, #1
   15128:	bl	2102c <flatcc_builder_table_add@@Base>
   1512c:	cmp	r0, #0
   15130:	beq	15154 <gen_monster@@Base+0x58c>
   15134:	mov	r6, r0
   15138:	mov	r0, r4
   1513c:	mov	r1, #8
   15140:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   15144:	cmp	r0, #0
   15148:	movne	r1, #1
   1514c:	strbne	r1, [r6]
   15150:	strne	r5, [r0]
   15154:	mov	r0, r4
   15158:	mov	r1, #36	; 0x24
   1515c:	bl	1fcbc <flatcc_builder_start_table@@Base>
   15160:	movw	r1, #18151	; 0x46e7
   15164:	mov	r0, r4
   15168:	movt	r1, #2
   1516c:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   15170:	cmp	r0, #0
   15174:	beq	15190 <gen_monster@@Base+0x5c8>
   15178:	mov	r6, r0
   1517c:	mov	r0, r4
   15180:	mov	r1, #3
   15184:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   15188:	cmp	r0, #0
   1518c:	strne	r6, [r0]
   15190:	mov	r0, r4
   15194:	bl	1f790 <flatcc_builder_start_offset_vector@@Base>
   15198:	mov	r0, r4
   1519c:	mov	r1, #36	; 0x24
   151a0:	bl	1fcbc <flatcc_builder_start_table@@Base>
   151a4:	cmp	r5, #0
   151a8:	beq	151e8 <gen_monster@@Base+0x620>
   151ac:	mov	r0, r4
   151b0:	mov	r1, #7
   151b4:	mov	r2, #1
   151b8:	mov	r3, #1
   151bc:	bl	2102c <flatcc_builder_table_add@@Base>
   151c0:	cmp	r0, #0
   151c4:	beq	151e8 <gen_monster@@Base+0x620>
   151c8:	mov	r6, r0
   151cc:	mov	r0, r4
   151d0:	mov	r1, #8
   151d4:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   151d8:	cmp	r0, #0
   151dc:	movne	r1, #1
   151e0:	strbne	r1, [r6]
   151e4:	strne	r5, [r0]
   151e8:	movw	r1, #18410	; 0x47ea
   151ec:	mov	r0, r4
   151f0:	movt	r1, #2
   151f4:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   151f8:	cmp	r0, #0
   151fc:	beq	15218 <gen_monster@@Base+0x650>
   15200:	mov	r6, r0
   15204:	mov	r0, r4
   15208:	mov	r1, #3
   1520c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   15210:	cmp	r0, #0
   15214:	strne	r6, [r0]
   15218:	movw	r1, #25228	; 0x628c
   1521c:	mov	r0, r4
   15220:	mov	r2, #1
   15224:	movt	r1, #2
   15228:	bl	205dc <flatcc_builder_check_required@@Base>
   1522c:	cmp	r0, #0
   15230:	beq	154c8 <gen_monster@@Base+0x900>
   15234:	mov	r0, r4
   15238:	bl	2066c <flatcc_builder_end_table@@Base>
   1523c:	cmp	r0, #0
   15240:	beq	15250 <gen_monster@@Base+0x688>
   15244:	mov	r1, r0
   15248:	mov	r0, r4
   1524c:	bl	1f038 <flatcc_builder_offset_vector_push@@Base>
   15250:	mov	r0, r4
   15254:	mov	r1, #36	; 0x24
   15258:	bl	1fcbc <flatcc_builder_start_table@@Base>
   1525c:	cmp	r5, #0
   15260:	beq	152a0 <gen_monster@@Base+0x6d8>
   15264:	mov	r0, r4
   15268:	mov	r1, #7
   1526c:	mov	r2, #1
   15270:	mov	r3, #1
   15274:	bl	2102c <flatcc_builder_table_add@@Base>
   15278:	cmp	r0, #0
   1527c:	beq	152a0 <gen_monster@@Base+0x6d8>
   15280:	mov	r6, r0
   15284:	mov	r0, r4
   15288:	mov	r1, #8
   1528c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   15290:	cmp	r0, #0
   15294:	movne	r1, #1
   15298:	strbne	r1, [r6]
   1529c:	strne	r5, [r0]
   152a0:	movw	r1, #18410	; 0x47ea
   152a4:	mov	r0, r4
   152a8:	movt	r1, #2
   152ac:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   152b0:	cmp	r0, #0
   152b4:	beq	152d0 <gen_monster@@Base+0x708>
   152b8:	mov	r6, r0
   152bc:	mov	r0, r4
   152c0:	mov	r1, #3
   152c4:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   152c8:	cmp	r0, #0
   152cc:	strne	r6, [r0]
   152d0:	movw	r1, #25228	; 0x628c
   152d4:	mov	r0, r4
   152d8:	mov	r2, #1
   152dc:	movt	r1, #2
   152e0:	bl	205dc <flatcc_builder_check_required@@Base>
   152e4:	cmp	r0, #0
   152e8:	beq	154c8 <gen_monster@@Base+0x900>
   152ec:	mov	r0, r4
   152f0:	bl	2066c <flatcc_builder_end_table@@Base>
   152f4:	cmp	r0, #0
   152f8:	beq	15308 <gen_monster@@Base+0x740>
   152fc:	mov	r1, r0
   15300:	mov	r0, r4
   15304:	bl	1f038 <flatcc_builder_offset_vector_push@@Base>
   15308:	mov	r0, r4
   1530c:	mov	r1, #36	; 0x24
   15310:	bl	1fcbc <flatcc_builder_start_table@@Base>
   15314:	mov	r0, r4
   15318:	mov	r1, #8
   1531c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   15320:	movw	r1, #18410	; 0x47ea
   15324:	cmp	r0, #0
   15328:	strne	r5, [r0]
   1532c:	movt	r1, #2
   15330:	mov	r0, r4
   15334:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   15338:	cmp	r0, #0
   1533c:	beq	15358 <gen_monster@@Base+0x790>
   15340:	mov	r5, r0
   15344:	mov	r0, r4
   15348:	mov	r1, #3
   1534c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   15350:	cmp	r0, #0
   15354:	strne	r5, [r0]
   15358:	mov	r0, r4
   1535c:	mov	r1, #7
   15360:	mov	r2, #1
   15364:	mov	r3, #1
   15368:	mov	r5, #1
   1536c:	bl	2102c <flatcc_builder_table_add@@Base>
   15370:	movw	r1, #25228	; 0x628c
   15374:	cmp	r0, #0
   15378:	mov	r2, #1
   1537c:	strbne	r5, [r0]
   15380:	movt	r1, #2
   15384:	mov	r0, r4
   15388:	bl	205dc <flatcc_builder_check_required@@Base>
   1538c:	cmp	r0, #0
   15390:	beq	154c8 <gen_monster@@Base+0x900>
   15394:	mov	r0, r4
   15398:	bl	2066c <flatcc_builder_end_table@@Base>
   1539c:	cmp	r0, #0
   153a0:	beq	153b0 <gen_monster@@Base+0x7e8>
   153a4:	mov	r1, r0
   153a8:	mov	r0, r4
   153ac:	bl	1f038 <flatcc_builder_offset_vector_push@@Base>
   153b0:	mov	r0, r4
   153b4:	bl	1fa48 <flatcc_builder_end_offset_vector@@Base>
   153b8:	cmp	r0, #0
   153bc:	beq	153d8 <gen_monster@@Base+0x810>
   153c0:	mov	r5, r0
   153c4:	mov	r0, r4
   153c8:	mov	r1, #11
   153cc:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   153d0:	cmp	r0, #0
   153d4:	strne	r5, [r0]
   153d8:	movw	r1, #25228	; 0x628c
   153dc:	mov	r0, r4
   153e0:	mov	r2, #1
   153e4:	movt	r1, #2
   153e8:	bl	205dc <flatcc_builder_check_required@@Base>
   153ec:	cmp	r0, #0
   153f0:	beq	154c8 <gen_monster@@Base+0x900>
   153f4:	mov	r0, r4
   153f8:	bl	2066c <flatcc_builder_end_table@@Base>
   153fc:	cmp	r0, #0
   15400:	beq	1541c <gen_monster@@Base+0x854>
   15404:	mov	r5, r0
   15408:	mov	r0, r4
   1540c:	mov	r1, #12
   15410:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   15414:	cmp	r0, #0
   15418:	strne	r5, [r0]
   1541c:	mov	r0, r4
   15420:	mov	r1, #15
   15424:	mov	r2, #1
   15428:	mov	r3, #1
   1542c:	bl	2102c <flatcc_builder_table_add@@Base>
   15430:	cmp	r0, #0
   15434:	movne	r1, #0
   15438:	strbne	r1, [r0]
   1543c:	mov	r0, r4
   15440:	mov	r1, #3
   15444:	bl	1fcbc <flatcc_builder_start_table@@Base>
   15448:	movw	r1, #25234	; 0x6292
   1544c:	mov	r0, r4
   15450:	mov	r2, #0
   15454:	movt	r1, #2
   15458:	bl	205dc <flatcc_builder_check_required@@Base>
   1545c:	cmp	r0, #0
   15460:	beq	15568 <gen_monster@@Base+0x9a0>
   15464:	mov	r0, r4
   15468:	bl	2066c <flatcc_builder_end_table@@Base>
   1546c:	cmp	r0, #0
   15470:	beq	1548c <gen_monster@@Base+0x8c4>
   15474:	mov	r5, r0
   15478:	mov	r0, r4
   1547c:	mov	r1, #14
   15480:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   15484:	cmp	r0, #0
   15488:	strne	r5, [r0]
   1548c:	movw	r1, #25228	; 0x628c
   15490:	mov	r0, r4
   15494:	mov	r2, #1
   15498:	movt	r1, #2
   1549c:	bl	205dc <flatcc_builder_check_required@@Base>
   154a0:	cmp	r0, #0
   154a4:	beq	154c8 <gen_monster@@Base+0x900>
   154a8:	mov	r0, r4
   154ac:	bl	2066c <flatcc_builder_end_table@@Base>
   154b0:	mov	r1, r0
   154b4:	mov	r0, r4
   154b8:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   154bc:	mov	r0, #0
   154c0:	sub	sp, fp, #16
   154c4:	pop	{r4, r5, r6, sl, fp, pc}
   154c8:	movw	r0, #21291	; 0x532b
   154cc:	movw	r1, #21001	; 0x5209
   154d0:	movw	r3, #21453	; 0x53cd
   154d4:	mov	r2, #235	; 0xeb
   154d8:	movt	r0, #2
   154dc:	movt	r1, #2
   154e0:	movt	r3, #2
   154e4:	bl	12f88 <__assert_fail@plt>
   154e8:	movw	r0, #18161	; 0x46f1
   154ec:	movw	r1, #17712	; 0x4530
   154f0:	movw	r3, #18200	; 0x4718
   154f4:	movw	r2, #881	; 0x371
   154f8:	movt	r0, #2
   154fc:	movt	r1, #2
   15500:	movt	r3, #2
   15504:	bl	12f88 <__assert_fail@plt>
   15508:	movw	r0, #18241	; 0x4741
   1550c:	movw	r1, #17712	; 0x4530
   15510:	movw	r3, #18200	; 0x4718
   15514:	movw	r2, #883	; 0x373
   15518:	movt	r0, #2
   1551c:	movt	r1, #2
   15520:	movt	r3, #2
   15524:	bl	12f88 <__assert_fail@plt>
   15528:	movw	r0, #18280	; 0x4768
   1552c:	movw	r1, #17712	; 0x4530
   15530:	movw	r3, #18200	; 0x4718
   15534:	movw	r2, #923	; 0x39b
   15538:	movt	r0, #2
   1553c:	movt	r1, #2
   15540:	movt	r3, #2
   15544:	bl	12f88 <__assert_fail@plt>
   15548:	movw	r0, #18359	; 0x47b7
   1554c:	movw	r1, #17712	; 0x4530
   15550:	movw	r3, #18200	; 0x4718
   15554:	movw	r2, #929	; 0x3a1
   15558:	movt	r0, #2
   1555c:	movt	r1, #2
   15560:	movt	r3, #2
   15564:	bl	12f88 <__assert_fail@plt>
   15568:	movw	r0, #22696	; 0x58a8
   1556c:	movw	r1, #21001	; 0x5209
   15570:	movw	r3, #22849	; 0x5941
   15574:	mov	r2, #221	; 0xdd
   15578:	movt	r0, #2
   1557c:	movt	r1, #2
   15580:	movt	r3, #2
   15584:	bl	12f88 <__assert_fail@plt>

00015588 <test_monster@@Base>:
   15588:	push	{r4, r5, fp, lr}
   1558c:	add	fp, sp, #8
   15590:	sub	sp, sp, #8
   15594:	mov	r1, #0
   15598:	mov	r4, r0
   1559c:	bl	14bc8 <gen_monster@@Base>
   155a0:	add	r1, sp, #4
   155a4:	mov	r0, r4
   155a8:	bl	221c4 <flatcc_builder_finalize_aligned_buffer@@Base>
   155ac:	mov	r4, r0
   155b0:	movw	r0, #41072	; 0xa070
   155b4:	ldr	r2, [sp, #4]
   155b8:	movt	r0, #3
   155bc:	mov	r1, r4
   155c0:	ldr	r3, [r0]
   155c4:	movw	r0, #17375	; 0x43df
   155c8:	movt	r0, #2
   155cc:	bl	13674 <test_type_aliases@@Base+0x51c>
   155d0:	ldr	r1, [sp, #4]
   155d4:	movw	r2, #17220	; 0x4344
   155d8:	movw	r3, #51708	; 0xc9fc
   155dc:	mov	r0, r4
   155e0:	movt	r2, #2
   155e4:	movt	r3, #1
   155e8:	bl	23554 <flatcc_verify_table_as_root@@Base>
   155ec:	cmp	r0, #0
   155f0:	beq	15618 <test_monster@@Base+0x90>
   155f4:	bl	228d0 <flatcc_verify_error_string@@Base>
   155f8:	mov	r1, r0
   155fc:	movw	r0, #18419	; 0x47f3
   15600:	movt	r0, #2
   15604:	bl	12e98 <printf@plt>
   15608:	mvn	r5, #0
   1560c:	mov	r0, r5
   15610:	sub	sp, fp, #8
   15614:	pop	{r4, r5, fp, pc}
   15618:	mov	r0, r4
   1561c:	bl	13fe8 <verify_monster@@Base>
   15620:	mov	r5, r0
   15624:	mov	r0, r4
   15628:	bl	22304 <flatcc_builder_aligned_free@@Base>
   1562c:	mov	r0, r5
   15630:	sub	sp, fp, #8
   15634:	pop	{r4, r5, fp, pc}

00015638 <test_monster_with_size@@Base>:
   15638:	push	{r4, r5, fp, lr}
   1563c:	add	fp, sp, #8
   15640:	sub	sp, sp, #8
   15644:	mov	r1, #1
   15648:	mov	r4, r0
   1564c:	bl	14bc8 <gen_monster@@Base>
   15650:	add	r1, sp, #4
   15654:	mov	r0, r4
   15658:	bl	221c4 <flatcc_builder_finalize_aligned_buffer@@Base>
   1565c:	mov	r4, r0
   15660:	movw	r0, #41072	; 0xa070
   15664:	ldr	r2, [sp, #4]
   15668:	movt	r0, #3
   1566c:	mov	r1, r4
   15670:	ldr	r3, [r0]
   15674:	movw	r0, #18461	; 0x481d
   15678:	movt	r0, #2
   1567c:	bl	13674 <test_type_aliases@@Base+0x51c>
   15680:	tst	r4, #15
   15684:	beq	156b4 <test_monster_with_size@@Base+0x7c>
   15688:	movw	r0, #18485	; 0x4835
   1568c:	movt	r0, #2
   15690:	bl	12e98 <printf@plt>
   15694:	movw	r0, #18566	; 0x4886
   15698:	mov	r1, r4
   1569c:	movt	r0, #2
   156a0:	bl	12e98 <printf@plt>
   156a4:	mvn	r5, #0
   156a8:	mov	r0, r5
   156ac:	sub	sp, fp, #8
   156b0:	pop	{r4, r5, fp, pc}
   156b4:	mov	r5, r4
   156b8:	ldr	r0, [sp, #4]
   156bc:	ldr	r1, [r5], #4
   156c0:	sub	r2, r0, #4
   156c4:	cmp	r1, r2
   156c8:	bne	15700 <test_monster_with_size@@Base+0xc8>
   156cc:	movw	r2, #17220	; 0x4344
   156d0:	movw	r3, #51708	; 0xc9fc
   156d4:	mov	r0, r5
   156d8:	movt	r2, #2
   156dc:	movt	r3, #1
   156e0:	bl	23554 <flatcc_verify_table_as_root@@Base>
   156e4:	cmp	r0, #0
   156e8:	beq	1571c <test_monster_with_size@@Base+0xe4>
   156ec:	bl	228d0 <flatcc_verify_error_string@@Base>
   156f0:	mov	r1, r0
   156f4:	movw	r0, #18640	; 0x48d0
   156f8:	movt	r0, #2
   156fc:	b	156a0 <test_monster_with_size@@Base+0x68>
   15700:	movw	r0, #18586	; 0x489a
   15704:	movt	r0, #2
   15708:	bl	12e98 <printf@plt>
   1570c:	mvn	r5, #0
   15710:	mov	r0, r5
   15714:	sub	sp, fp, #8
   15718:	pop	{r4, r5, fp, pc}
   1571c:	mov	r0, r5
   15720:	bl	13fe8 <verify_monster@@Base>
   15724:	mov	r5, r0
   15728:	mov	r0, r4
   1572c:	bl	22304 <flatcc_builder_aligned_free@@Base>
   15730:	mov	r0, r5
   15734:	sub	sp, fp, #8
   15738:	pop	{r4, r5, fp, pc}

0001573c <test_string@@Base>:
   1573c:	push	{r4, r5, fp, lr}
   15740:	add	fp, sp, #8
   15744:	mov	r4, r0
   15748:	bl	1dd44 <flatcc_builder_reset@@Base>
   1574c:	movw	r1, #17220	; 0x4344
   15750:	mov	r0, r4
   15754:	mov	r2, #0
   15758:	mov	r3, #0
   1575c:	movt	r1, #2
   15760:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   15764:	cmp	r0, #0
   15768:	bne	15778 <test_string@@Base+0x3c>
   1576c:	mov	r0, r4
   15770:	mov	r1, #36	; 0x24
   15774:	bl	1fcbc <flatcc_builder_start_table@@Base>
   15778:	mov	r0, r4
   1577c:	bl	1fb20 <flatcc_builder_start_string@@Base>
   15780:	mov	r0, r4
   15784:	mov	r1, #3
   15788:	bl	1f27c <flatcc_builder_extend_string@@Base>
   1578c:	movw	r1, #12849	; 0x3231
   15790:	strh	r1, [r0]
   15794:	mov	r1, #51	; 0x33
   15798:	strb	r1, [r0, #2]
   1579c:	movw	r1, #18735	; 0x492f
   157a0:	mov	r0, r4
   157a4:	movt	r1, #2
   157a8:	bl	1f4d0 <flatcc_builder_append_string_str@@Base>
   157ac:	mov	r0, r4
   157b0:	bl	21edc <flatcc_builder_string_len@@Base>
   157b4:	cmp	r0, #4
   157b8:	bne	15918 <test_string@@Base+0x1dc>
   157bc:	movw	r1, #18773	; 0x4955
   157c0:	mov	r0, r4
   157c4:	mov	r2, #30
   157c8:	movt	r1, #2
   157cc:	bl	1f4fc <flatcc_builder_append_string_strn@@Base>
   157d0:	mov	r0, r4
   157d4:	bl	21edc <flatcc_builder_string_len@@Base>
   157d8:	cmp	r0, #8
   157dc:	bne	15938 <test_string@@Base+0x1fc>
   157e0:	movw	r1, #18816	; 0x4980
   157e4:	mov	r0, r4
   157e8:	mov	r2, #2
   157ec:	movt	r1, #2
   157f0:	bl	1f390 <flatcc_builder_append_string@@Base>
   157f4:	mov	r0, r4
   157f8:	bl	21edc <flatcc_builder_string_len@@Base>
   157fc:	cmp	r0, #10
   15800:	bne	15958 <test_string@@Base+0x21c>
   15804:	mov	r0, r4
   15808:	mov	r1, #3
   1580c:	bl	1f670 <flatcc_builder_truncate_string@@Base>
   15810:	mov	r0, r4
   15814:	bl	21edc <flatcc_builder_string_len@@Base>
   15818:	cmp	r0, #7
   1581c:	bne	15978 <test_string@@Base+0x23c>
   15820:	mov	r0, r4
   15824:	bl	21ed4 <flatcc_builder_string_edit@@Base>
   15828:	mov	r1, #46	; 0x2e
   1582c:	strb	r1, [r0, #4]
   15830:	mov	r0, r4
   15834:	bl	21dd4 <flatcc_builder_end_string@@Base>
   15838:	cmp	r0, #0
   1583c:	beq	15858 <test_string@@Base+0x11c>
   15840:	mov	r5, r0
   15844:	mov	r0, r4
   15848:	mov	r1, #3
   1584c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   15850:	cmp	r0, #0
   15854:	strne	r5, [r0]
   15858:	movw	r1, #25228	; 0x628c
   1585c:	mov	r0, r4
   15860:	mov	r2, #1
   15864:	movt	r1, #2
   15868:	bl	205dc <flatcc_builder_check_required@@Base>
   1586c:	cmp	r0, #0
   15870:	beq	15998 <test_string@@Base+0x25c>
   15874:	mov	r0, r4
   15878:	bl	2066c <flatcc_builder_end_table@@Base>
   1587c:	mov	r1, r0
   15880:	mov	r0, r4
   15884:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   15888:	mov	r0, r4
   1588c:	mov	r1, #0
   15890:	bl	2205c <flatcc_builder_get_direct_buffer@@Base>
   15894:	cmp	r0, #0
   15898:	beq	159b8 <test_string@@Base+0x27c>
   1589c:	ldr	r1, [r0, #4]
   158a0:	movw	r2, #20301	; 0x4f4d
   158a4:	movt	r2, #21326	; 0x534e
   158a8:	cmp	r1, r2
   158ac:	bne	159d8 <test_string@@Base+0x29c>
   158b0:	ldr	r1, [r0]
   158b4:	ldr	r2, [r0, r1]!
   158b8:	mov	r1, r0
   158bc:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   158c0:	cmp	r2, #11
   158c4:	bls	1590c <test_string@@Base+0x1d0>
   158c8:	ldrh	r1, [r1, #10]
   158cc:	cmp	r1, #0
   158d0:	beq	1590c <test_string@@Base+0x1d0>
   158d4:	ldr	r1, [r0, r1]!
   158d8:	add	r0, r0, r1
   158dc:	movw	r1, #18896	; 0x49d0
   158e0:	add	r0, r0, #4
   158e4:	movt	r1, #2
   158e8:	bl	12e8c <strcmp@plt>
   158ec:	cmp	r0, #0
   158f0:	moveq	r0, #0
   158f4:	popeq	{r4, r5, fp, pc}
   158f8:	movw	r0, #27088	; 0x69d0
   158fc:	movt	r0, #2
   15900:	bl	12eec <puts@plt>
   15904:	mvn	r0, #0
   15908:	pop	{r4, r5, fp, pc}
   1590c:	movw	r0, #21903	; 0x558f
   15910:	movt	r0, #2
   15914:	b	159e0 <test_string@@Base+0x2a4>
   15918:	movw	r0, #18699	; 0x490b
   1591c:	movw	r1, #17712	; 0x4530
   15920:	movw	r3, #18737	; 0x4931
   15924:	movw	r2, #1080	; 0x438
   15928:	movt	r0, #2
   1592c:	movt	r1, #2
   15930:	movt	r3, #2
   15934:	bl	12f88 <__assert_fail@plt>
   15938:	movw	r0, #18778	; 0x495a
   1593c:	movw	r1, #17712	; 0x4530
   15940:	movw	r3, #18737	; 0x4931
   15944:	movw	r2, #1082	; 0x43a
   15948:	movt	r0, #2
   1594c:	movt	r1, #2
   15950:	movt	r3, #2
   15954:	bl	12f88 <__assert_fail@plt>
   15958:	movw	r0, #18819	; 0x4983
   1595c:	movw	r1, #17712	; 0x4530
   15960:	movw	r3, #18737	; 0x4931
   15964:	movw	r2, #1084	; 0x43c
   15968:	movt	r0, #2
   1596c:	movt	r1, #2
   15970:	movt	r3, #2
   15974:	bl	12f88 <__assert_fail@plt>
   15978:	movw	r0, #18858	; 0x49aa
   1597c:	movw	r1, #17712	; 0x4530
   15980:	movw	r3, #18737	; 0x4931
   15984:	movw	r2, #1086	; 0x43e
   15988:	movt	r0, #2
   1598c:	movt	r1, #2
   15990:	movt	r3, #2
   15994:	bl	12f88 <__assert_fail@plt>
   15998:	movw	r0, #21291	; 0x532b
   1599c:	movw	r1, #21001	; 0x5209
   159a0:	movw	r3, #21453	; 0x53cd
   159a4:	mov	r2, #235	; 0xeb
   159a8:	movt	r0, #2
   159ac:	movt	r1, #2
   159b0:	movt	r3, #2
   159b4:	bl	12f88 <__assert_fail@plt>
   159b8:	movw	r0, #19184	; 0x4af0
   159bc:	movw	r1, #17712	; 0x4530
   159c0:	movw	r3, #18737	; 0x4931
   159c4:	movw	r2, #1093	; 0x445
   159c8:	movt	r0, #2
   159cc:	movt	r1, #2
   159d0:	movt	r3, #2
   159d4:	bl	12f88 <__assert_fail@plt>
   159d8:	movw	r0, #20552	; 0x5048
   159dc:	movt	r0, #2
   159e0:	movw	r1, #20590	; 0x506e
   159e4:	movw	r3, #21822	; 0x553e
   159e8:	movw	r2, #699	; 0x2bb
   159ec:	movt	r1, #2
   159f0:	movt	r3, #2
   159f4:	bl	12f88 <__assert_fail@plt>

000159f8 <test_sort_find@@Base>:
   159f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159fc:	add	fp, sp, #28
   15a00:	sub	sp, sp, #20
   15a04:	mov	r4, r0
   15a08:	bl	1dd44 <flatcc_builder_reset@@Base>
   15a0c:	movw	r1, #17220	; 0x4344
   15a10:	mov	r0, r4
   15a14:	mov	r2, #0
   15a18:	mov	r3, #0
   15a1c:	movt	r1, #2
   15a20:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   15a24:	cmp	r0, #0
   15a28:	bne	15a38 <test_sort_find@@Base+0x40>
   15a2c:	mov	r0, r4
   15a30:	mov	r1, #36	; 0x24
   15a34:	bl	1fcbc <flatcc_builder_start_table@@Base>
   15a38:	movw	r1, #17288	; 0x4388
   15a3c:	mov	r0, r4
   15a40:	movt	r1, #2
   15a44:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   15a48:	cmp	r0, #0
   15a4c:	beq	15a68 <test_sort_find@@Base+0x70>
   15a50:	mov	r5, r0
   15a54:	mov	r0, r4
   15a58:	mov	r1, #3
   15a5c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   15a60:	cmp	r0, #0
   15a64:	strne	r5, [r0]
   15a68:	mov	r0, r4
   15a6c:	bl	1f790 <flatcc_builder_start_offset_vector@@Base>
   15a70:	mov	r0, r4
   15a74:	mov	r1, #36	; 0x24
   15a78:	bl	1fcbc <flatcc_builder_start_table@@Base>
   15a7c:	movw	r1, #17809	; 0x4591
   15a80:	mov	r0, r4
   15a84:	movt	r1, #2
   15a88:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   15a8c:	cmp	r0, #0
   15a90:	beq	15aac <test_sort_find@@Base+0xb4>
   15a94:	mov	r5, r0
   15a98:	mov	r0, r4
   15a9c:	mov	r1, #3
   15aa0:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   15aa4:	cmp	r0, #0
   15aa8:	strne	r5, [r0]
   15aac:	movw	r1, #25228	; 0x628c
   15ab0:	mov	r0, r4
   15ab4:	mov	r2, #1
   15ab8:	movt	r1, #2
   15abc:	bl	205dc <flatcc_builder_check_required@@Base>
   15ac0:	cmp	r0, #0
   15ac4:	beq	1650c <test_sort_find@@Base+0xb14>
   15ac8:	mov	r0, r4
   15acc:	bl	2066c <flatcc_builder_end_table@@Base>
   15ad0:	cmp	r0, #0
   15ad4:	beq	15ae4 <test_sort_find@@Base+0xec>
   15ad8:	mov	r1, r0
   15adc:	mov	r0, r4
   15ae0:	bl	1f038 <flatcc_builder_offset_vector_push@@Base>
   15ae4:	mov	r0, r4
   15ae8:	mov	r1, #36	; 0x24
   15aec:	bl	1fcbc <flatcc_builder_start_table@@Base>
   15af0:	movw	r1, #17851	; 0x45bb
   15af4:	mov	r0, r4
   15af8:	movt	r1, #2
   15afc:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   15b00:	cmp	r0, #0
   15b04:	beq	15b20 <test_sort_find@@Base+0x128>
   15b08:	mov	r5, r0
   15b0c:	mov	r0, r4
   15b10:	mov	r1, #3
   15b14:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   15b18:	cmp	r0, #0
   15b1c:	strne	r5, [r0]
   15b20:	movw	r1, #25228	; 0x628c
   15b24:	mov	r0, r4
   15b28:	mov	r2, #1
   15b2c:	movt	r1, #2
   15b30:	bl	205dc <flatcc_builder_check_required@@Base>
   15b34:	cmp	r0, #0
   15b38:	beq	1650c <test_sort_find@@Base+0xb14>
   15b3c:	mov	r0, r4
   15b40:	bl	2066c <flatcc_builder_end_table@@Base>
   15b44:	cmp	r0, #0
   15b48:	beq	15b58 <test_sort_find@@Base+0x160>
   15b4c:	mov	r1, r0
   15b50:	mov	r0, r4
   15b54:	bl	1f038 <flatcc_builder_offset_vector_push@@Base>
   15b58:	mov	r0, r4
   15b5c:	mov	r1, #36	; 0x24
   15b60:	bl	1fcbc <flatcc_builder_start_table@@Base>
   15b64:	movw	r1, #17891	; 0x45e3
   15b68:	mov	r0, r4
   15b6c:	movt	r1, #2
   15b70:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   15b74:	cmp	r0, #0
   15b78:	beq	15b94 <test_sort_find@@Base+0x19c>
   15b7c:	mov	r5, r0
   15b80:	mov	r0, r4
   15b84:	mov	r1, #3
   15b88:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   15b8c:	cmp	r0, #0
   15b90:	strne	r5, [r0]
   15b94:	movw	r1, #25228	; 0x628c
   15b98:	mov	r0, r4
   15b9c:	mov	r2, #1
   15ba0:	movt	r1, #2
   15ba4:	bl	205dc <flatcc_builder_check_required@@Base>
   15ba8:	cmp	r0, #0
   15bac:	beq	1650c <test_sort_find@@Base+0xb14>
   15bb0:	mov	r0, r4
   15bb4:	bl	2066c <flatcc_builder_end_table@@Base>
   15bb8:	cmp	r0, #0
   15bbc:	beq	15bcc <test_sort_find@@Base+0x1d4>
   15bc0:	mov	r1, r0
   15bc4:	mov	r0, r4
   15bc8:	bl	1f038 <flatcc_builder_offset_vector_push@@Base>
   15bcc:	mov	r0, r4
   15bd0:	mov	r1, #36	; 0x24
   15bd4:	bl	1fcbc <flatcc_builder_start_table@@Base>
   15bd8:	movw	r1, #18904	; 0x49d8
   15bdc:	mov	r0, r4
   15be0:	movt	r1, #2
   15be4:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   15be8:	cmp	r0, #0
   15bec:	beq	15c08 <test_sort_find@@Base+0x210>
   15bf0:	mov	r5, r0
   15bf4:	mov	r0, r4
   15bf8:	mov	r1, #3
   15bfc:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   15c00:	cmp	r0, #0
   15c04:	strne	r5, [r0]
   15c08:	movw	r1, #25228	; 0x628c
   15c0c:	mov	r0, r4
   15c10:	mov	r2, #1
   15c14:	movt	r1, #2
   15c18:	bl	205dc <flatcc_builder_check_required@@Base>
   15c1c:	cmp	r0, #0
   15c20:	beq	1650c <test_sort_find@@Base+0xb14>
   15c24:	mov	r0, r4
   15c28:	bl	2066c <flatcc_builder_end_table@@Base>
   15c2c:	cmp	r0, #0
   15c30:	beq	15c40 <test_sort_find@@Base+0x248>
   15c34:	mov	r1, r0
   15c38:	mov	r0, r4
   15c3c:	bl	1f038 <flatcc_builder_offset_vector_push@@Base>
   15c40:	mov	r0, r4
   15c44:	mov	r1, #36	; 0x24
   15c48:	bl	1fcbc <flatcc_builder_start_table@@Base>
   15c4c:	movw	r1, #17891	; 0x45e3
   15c50:	mov	r0, r4
   15c54:	movt	r1, #2
   15c58:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   15c5c:	cmp	r0, #0
   15c60:	beq	15c7c <test_sort_find@@Base+0x284>
   15c64:	mov	r5, r0
   15c68:	mov	r0, r4
   15c6c:	mov	r1, #3
   15c70:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   15c74:	cmp	r0, #0
   15c78:	strne	r5, [r0]
   15c7c:	movw	r1, #25228	; 0x628c
   15c80:	mov	r0, r4
   15c84:	mov	r2, #1
   15c88:	movt	r1, #2
   15c8c:	bl	205dc <flatcc_builder_check_required@@Base>
   15c90:	cmp	r0, #0
   15c94:	beq	1650c <test_sort_find@@Base+0xb14>
   15c98:	mov	r0, r4
   15c9c:	bl	2066c <flatcc_builder_end_table@@Base>
   15ca0:	cmp	r0, #0
   15ca4:	beq	15cb4 <test_sort_find@@Base+0x2bc>
   15ca8:	mov	r1, r0
   15cac:	mov	r0, r4
   15cb0:	bl	1f038 <flatcc_builder_offset_vector_push@@Base>
   15cb4:	mov	r0, r4
   15cb8:	bl	1fa48 <flatcc_builder_end_offset_vector@@Base>
   15cbc:	cmp	r0, #0
   15cc0:	beq	15cdc <test_sort_find@@Base+0x2e4>
   15cc4:	mov	r5, r0
   15cc8:	mov	r0, r4
   15ccc:	mov	r1, #11
   15cd0:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   15cd4:	cmp	r0, #0
   15cd8:	strne	r5, [r0]
   15cdc:	movw	r1, #25228	; 0x628c
   15ce0:	mov	r0, r4
   15ce4:	mov	r2, #1
   15ce8:	movt	r1, #2
   15cec:	bl	205dc <flatcc_builder_check_required@@Base>
   15cf0:	cmp	r0, #0
   15cf4:	beq	1650c <test_sort_find@@Base+0xb14>
   15cf8:	mov	r0, r4
   15cfc:	bl	2066c <flatcc_builder_end_table@@Base>
   15d00:	mov	r1, r0
   15d04:	mov	r0, r4
   15d08:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   15d0c:	add	r1, sp, #16
   15d10:	mov	r0, r4
   15d14:	bl	221c4 <flatcc_builder_finalize_aligned_buffer@@Base>
   15d18:	movw	r9, #41072	; 0xa070
   15d1c:	ldr	r2, [sp, #16]
   15d20:	mov	r4, r0
   15d24:	movw	r0, #18910	; 0x49de
   15d28:	movt	r9, #3
   15d2c:	movt	r0, #2
   15d30:	mov	r1, r4
   15d34:	ldr	r3, [r9]
   15d38:	bl	13674 <test_type_aliases@@Base+0x51c>
   15d3c:	cmp	r4, #0
   15d40:	beq	1652c <test_sort_find@@Base+0xb34>
   15d44:	ldr	r0, [r4, #4]
   15d48:	movw	r1, #20301	; 0x4f4d
   15d4c:	movt	r1, #21326	; 0x534e
   15d50:	cmp	r0, r1
   15d54:	bne	1652c <test_sort_find@@Base+0xb34>
   15d58:	ldr	r1, [r4]
   15d5c:	str	r4, [sp, #12]
   15d60:	ldr	r2, [r4, r1]!
   15d64:	str	r1, [sp, #8]
   15d68:	mov	r1, r4
   15d6c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   15d70:	cmp	r2, #27
   15d74:	bls	1654c <test_sort_find@@Base+0xb54>
   15d78:	ldrh	r1, [r1, #26]
   15d7c:	cmp	r1, #0
   15d80:	beq	1654c <test_sort_find@@Base+0xb54>
   15d84:	str	r1, [sp, #4]
   15d88:	ldr	r1, [r4, r1]!
   15d8c:	ldr	r8, [r4, r1]!
   15d90:	str	r1, [sp]
   15d94:	add	r5, r4, #4
   15d98:	cmp	r8, #0
   15d9c:	beq	15e5c <test_sort_find@@Base+0x464>
   15da0:	lsr	r7, r8, #1
   15da4:	sub	r6, r8, #1
   15da8:	mov	r0, r5
   15dac:	mov	r1, r7
   15db0:	mov	r2, r6
   15db4:	bl	1d370 <main@@Base+0xc90>
   15db8:	mov	r0, #0
   15dbc:	cmp	r0, r8, lsr #1
   15dc0:	beq	15de4 <test_sort_find@@Base+0x3ec>
   15dc4:	sub	r7, r7, #1
   15dc8:	mov	r0, r5
   15dcc:	mov	r1, r7
   15dd0:	mov	r2, r6
   15dd4:	bl	1d370 <main@@Base+0xc90>
   15dd8:	sub	r7, r7, #1
   15ddc:	cmn	r7, #1
   15de0:	bne	15dc8 <test_sort_find@@Base+0x3d0>
   15de4:	cmp	r6, #0
   15de8:	beq	15e5c <test_sort_find@@Base+0x464>
   15dec:	mvn	r0, #3
   15df0:	ldr	r1, [sp]
   15df4:	sub	r6, r8, #2
   15df8:	add	r7, r0, r8, lsl #2
   15dfc:	mov	r0, #4
   15e00:	sub	sl, r0, r8, lsl #2
   15e04:	ldr	r0, [sp, #8]
   15e08:	add	r0, r1, r0
   15e0c:	ldr	r1, [sp, #4]
   15e10:	add	r0, r0, r8, lsl #2
   15e14:	add	r0, r0, r1
   15e18:	ldr	r1, [sp, #12]
   15e1c:	add	r4, r1, r0
   15e20:	ldr	r0, [r4]
   15e24:	ldr	r1, [r5]
   15e28:	mov	r2, r6
   15e2c:	add	r0, r7, r0
   15e30:	str	r0, [r5]
   15e34:	add	r0, sl, r1
   15e38:	mov	r1, #0
   15e3c:	str	r0, [r4], #-4
   15e40:	mov	r0, r5
   15e44:	bl	1d370 <main@@Base+0xc90>
   15e48:	sub	r6, r6, #1
   15e4c:	sub	r7, r7, #4
   15e50:	add	sl, sl, #4
   15e54:	cmn	r6, #1
   15e58:	bne	15e20 <test_sort_find@@Base+0x428>
   15e5c:	ldr	r4, [sp, #12]
   15e60:	ldr	r3, [r9]
   15e64:	ldr	r2, [sp, #16]
   15e68:	movw	r0, #18912	; 0x49e0
   15e6c:	movt	r0, #2
   15e70:	mov	r1, r4
   15e74:	bl	13674 <test_type_aliases@@Base+0x51c>
   15e78:	ldr	r0, [r5, #-4]
   15e7c:	cmp	r0, #5
   15e80:	bne	15ed8 <test_sort_find@@Base+0x4e0>
   15e84:	ldr	r1, [r5]
   15e88:	mov	r0, r5
   15e8c:	ldr	r2, [r0, r1]!
   15e90:	mov	r1, r0
   15e94:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   15e98:	cmp	r2, #12
   15e9c:	bcc	1656c <test_sort_find@@Base+0xb74>
   15ea0:	ldrh	r1, [r1, #10]
   15ea4:	cmp	r1, #0
   15ea8:	beq	1656c <test_sort_find@@Base+0xb74>
   15eac:	ldr	r1, [r0, r1]!
   15eb0:	add	r0, r0, r1
   15eb4:	movw	r1, #18904	; 0x49d8
   15eb8:	add	r0, r0, #4
   15ebc:	movt	r1, #2
   15ec0:	bl	12e8c <strcmp@plt>
   15ec4:	cmp	r0, #0
   15ec8:	beq	15efc <test_sort_find@@Base+0x504>
   15ecc:	movw	r0, #27520	; 0x6b80
   15ed0:	movt	r0, #2
   15ed4:	b	15ee0 <test_sort_find@@Base+0x4e8>
   15ed8:	movw	r0, #27552	; 0x6ba0
   15edc:	movt	r0, #2
   15ee0:	bl	12eec <puts@plt>
   15ee4:	mvn	r6, #0
   15ee8:	mov	r0, r4
   15eec:	bl	22304 <flatcc_builder_aligned_free@@Base>
   15ef0:	mov	r0, r6
   15ef4:	sub	sp, fp, #28
   15ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15efc:	mov	r6, r5
   15f00:	ldr	r0, [r6, #4]!
   15f04:	ldr	r1, [r6, r0]!
   15f08:	mov	r0, r6
   15f0c:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   15f10:	cmp	r1, #12
   15f14:	bcc	1656c <test_sort_find@@Base+0xb74>
   15f18:	ldrh	r0, [r0, #10]
   15f1c:	cmp	r0, #0
   15f20:	beq	1656c <test_sort_find@@Base+0xb74>
   15f24:	mov	r1, r6
   15f28:	ldr	r0, [r1, r0]!
   15f2c:	add	r0, r1, r0
   15f30:	movw	r1, #17891	; 0x45e3
   15f34:	add	r0, r0, #4
   15f38:	movt	r1, #2
   15f3c:	bl	12e8c <strcmp@plt>
   15f40:	cmp	r0, #0
   15f44:	beq	15f54 <test_sort_find@@Base+0x55c>
   15f48:	movw	r0, #27488	; 0x6b60
   15f4c:	movt	r0, #2
   15f50:	b	15ee0 <test_sort_find@@Base+0x4e8>
   15f54:	mov	r7, r5
   15f58:	ldr	r0, [r7, #8]!
   15f5c:	ldr	r1, [r7, r0]!
   15f60:	mov	r0, r7
   15f64:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   15f68:	cmp	r1, #12
   15f6c:	bcc	1656c <test_sort_find@@Base+0xb74>
   15f70:	ldrh	r0, [r0, #10]
   15f74:	cmp	r0, #0
   15f78:	beq	1656c <test_sort_find@@Base+0xb74>
   15f7c:	mov	r1, r7
   15f80:	ldr	r0, [r1, r0]!
   15f84:	add	r0, r1, r0
   15f88:	movw	r1, #17891	; 0x45e3
   15f8c:	add	r0, r0, #4
   15f90:	movt	r1, #2
   15f94:	bl	12e8c <strcmp@plt>
   15f98:	cmp	r0, #0
   15f9c:	beq	15fac <test_sort_find@@Base+0x5b4>
   15fa0:	movw	r0, #27456	; 0x6b40
   15fa4:	movt	r0, #2
   15fa8:	b	15ee0 <test_sort_find@@Base+0x4e8>
   15fac:	mov	r0, r5
   15fb0:	ldr	r1, [r0, #12]!
   15fb4:	ldr	r2, [r0, r1]!
   15fb8:	mov	r1, r0
   15fbc:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   15fc0:	cmp	r2, #12
   15fc4:	bcc	1656c <test_sort_find@@Base+0xb74>
   15fc8:	ldrh	r1, [r1, #10]
   15fcc:	cmp	r1, #0
   15fd0:	beq	1656c <test_sort_find@@Base+0xb74>
   15fd4:	ldr	r1, [r0, r1]!
   15fd8:	add	r0, r0, r1
   15fdc:	movw	r1, #17851	; 0x45bb
   15fe0:	add	r0, r0, #4
   15fe4:	movt	r1, #2
   15fe8:	bl	12e8c <strcmp@plt>
   15fec:	cmp	r0, #0
   15ff0:	beq	16000 <test_sort_find@@Base+0x608>
   15ff4:	movw	r0, #27424	; 0x6b20
   15ff8:	movt	r0, #2
   15ffc:	b	15ee0 <test_sort_find@@Base+0x4e8>
   16000:	mov	r0, r5
   16004:	ldr	r1, [r0, #16]!
   16008:	ldr	r2, [r0, r1]!
   1600c:	mov	r1, r0
   16010:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16014:	cmp	r2, #12
   16018:	bcc	1656c <test_sort_find@@Base+0xb74>
   1601c:	ldrh	r1, [r1, #10]
   16020:	cmp	r1, #0
   16024:	beq	1656c <test_sort_find@@Base+0xb74>
   16028:	ldr	r1, [r0, r1]!
   1602c:	add	r0, r0, r1
   16030:	movw	r1, #17809	; 0x4591
   16034:	add	r0, r0, #4
   16038:	movt	r1, #2
   1603c:	bl	12e8c <strcmp@plt>
   16040:	cmp	r0, #0
   16044:	beq	16054 <test_sort_find@@Base+0x65c>
   16048:	movw	r0, #27392	; 0x6b00
   1604c:	movt	r0, #2
   16050:	b	15ee0 <test_sort_find@@Base+0x4e8>
   16054:	cmp	r6, r7
   16058:	beq	161d4 <test_sort_find@@Base+0x7dc>
   1605c:	movw	r1, #17851	; 0x45bb
   16060:	mov	r0, r5
   16064:	movt	r1, #2
   16068:	bl	165b8 <test_sort_find@@Base+0xbc0>
   1606c:	cmp	r0, #3
   16070:	bne	161e0 <test_sort_find@@Base+0x7e8>
   16074:	ldr	r8, [r5, #-4]
   16078:	cmp	r8, #0
   1607c:	beq	161c8 <test_sort_find@@Base+0x7d0>
   16080:	mov	r7, #0
   16084:	subs	r9, r8, #1
   16088:	beq	1613c <test_sort_find@@Base+0x744>
   1608c:	movw	sl, #18982	; 0x4a26
   16090:	movt	sl, #2
   16094:	sub	r0, r9, r7
   16098:	add	r6, r7, r0, lsr #1
   1609c:	cmp	r8, r6
   160a0:	bls	1658c <test_sort_find@@Base+0xb94>
   160a4:	mov	r0, r5
   160a8:	ldr	r1, [r0, r6, lsl #2]!
   160ac:	adds	r0, r0, r1
   160b0:	beq	165ac <test_sort_find@@Base+0xbb4>
   160b4:	ldr	r2, [r0]
   160b8:	mov	r1, r0
   160bc:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   160c0:	cmp	r2, #12
   160c4:	bcc	1656c <test_sort_find@@Base+0xb74>
   160c8:	ldrh	r1, [r1, #10]
   160cc:	cmp	r1, #0
   160d0:	beq	1656c <test_sort_find@@Base+0xb74>
   160d4:	ldr	r1, [r0, r1]!
   160d8:	ldr	r4, [r0, r1]!
   160dc:	mov	r1, sl
   160e0:	cmp	r4, #5
   160e4:	mov	r2, r4
   160e8:	add	r0, r0, #4
   160ec:	movcs	r2, #5
   160f0:	bl	12f70 <strncmp@plt>
   160f4:	cmp	r0, #1
   160f8:	mov	r1, #0
   160fc:	mov	r2, #0
   16100:	movwlt	r1, #1
   16104:	cmp	r0, #0
   16108:	movwne	r0, #1
   1610c:	cmp	r4, #5
   16110:	ldr	r4, [sp, #12]
   16114:	movwcc	r2, #1
   16118:	orr	r0, r2, r0
   1611c:	ands	r0, r0, r1
   16120:	moveq	r9, r6
   16124:	addne	r7, r6, #1
   16128:	cmp	r9, r7
   1612c:	bhi	16094 <test_sort_find@@Base+0x69c>
   16130:	bne	161c8 <test_sort_find@@Base+0x7d0>
   16134:	cmp	r8, r7
   16138:	bls	1658c <test_sort_find@@Base+0xb94>
   1613c:	mov	r0, r5
   16140:	ldr	r1, [r0, r7, lsl #2]!
   16144:	adds	r0, r0, r1
   16148:	beq	165ac <test_sort_find@@Base+0xbb4>
   1614c:	ldr	r2, [r0]
   16150:	mov	r1, r0
   16154:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16158:	cmp	r2, #12
   1615c:	bcc	1656c <test_sort_find@@Base+0xb74>
   16160:	ldrh	r1, [r1, #10]
   16164:	cmp	r1, #0
   16168:	beq	1656c <test_sort_find@@Base+0xb74>
   1616c:	ldr	r1, [r0, r1]!
   16170:	ldr	r4, [r0, r1]!
   16174:	movw	r1, #18982	; 0x4a26
   16178:	movt	r1, #2
   1617c:	cmp	r4, #5
   16180:	mov	r2, r4
   16184:	add	r0, r0, #4
   16188:	movcs	r2, #5
   1618c:	bl	12f70 <strncmp@plt>
   16190:	cmp	r0, #0
   16194:	mov	r2, r0
   16198:	mov	r1, #0
   1619c:	mvneq	r2, #0
   161a0:	cmp	r4, #5
   161a4:	movwhi	r1, #1
   161a8:	cmp	r0, #0
   161ac:	movne	r1, r2
   161b0:	cmp	r4, #5
   161b4:	ldr	r4, [sp, #12]
   161b8:	movcc	r1, r2
   161bc:	cmp	r7, #3
   161c0:	cmpeq	r1, #0
   161c4:	beq	161ec <test_sort_find@@Base+0x7f4>
   161c8:	movw	r0, #27200	; 0x6a40
   161cc:	movt	r0, #2
   161d0:	b	15ee0 <test_sort_find@@Base+0x4e8>
   161d4:	movw	r0, #27312	; 0x6ab0
   161d8:	movt	r0, #2
   161dc:	b	15ee0 <test_sort_find@@Base+0x4e8>
   161e0:	movw	r0, #27264	; 0x6a80
   161e4:	movt	r0, #2
   161e8:	b	15ee0 <test_sort_find@@Base+0x4e8>
   161ec:	movw	r1, #17851	; 0x45bb
   161f0:	mov	r0, r5
   161f4:	movt	r1, #2
   161f8:	bl	165b8 <test_sort_find@@Base+0xbc0>
   161fc:	cmp	r0, #3
   16200:	bne	16364 <test_sort_find@@Base+0x96c>
   16204:	ldr	r8, [r5, #-4]
   16208:	cmp	r8, #0
   1620c:	beq	16358 <test_sort_find@@Base+0x960>
   16210:	mov	r7, #0
   16214:	subs	r9, r8, #1
   16218:	beq	162cc <test_sort_find@@Base+0x8d4>
   1621c:	movw	sl, #18989	; 0x4a2d
   16220:	movt	sl, #2
   16224:	sub	r0, r9, r7
   16228:	add	r6, r7, r0, lsr #1
   1622c:	cmp	r8, r6
   16230:	bls	1658c <test_sort_find@@Base+0xb94>
   16234:	mov	r0, r5
   16238:	ldr	r1, [r0, r6, lsl #2]!
   1623c:	adds	r0, r0, r1
   16240:	beq	165ac <test_sort_find@@Base+0xbb4>
   16244:	ldr	r2, [r0]
   16248:	mov	r1, r0
   1624c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16250:	cmp	r2, #12
   16254:	bcc	1656c <test_sort_find@@Base+0xb74>
   16258:	ldrh	r1, [r1, #10]
   1625c:	cmp	r1, #0
   16260:	beq	1656c <test_sort_find@@Base+0xb74>
   16264:	ldr	r1, [r0, r1]!
   16268:	ldr	r4, [r0, r1]!
   1626c:	mov	r1, sl
   16270:	cmp	r4, #5
   16274:	mov	r2, r4
   16278:	add	r0, r0, #4
   1627c:	movcs	r2, #5
   16280:	bl	12f70 <strncmp@plt>
   16284:	cmp	r0, #1
   16288:	mov	r1, #0
   1628c:	mov	r2, #0
   16290:	movwlt	r1, #1
   16294:	cmp	r0, #0
   16298:	movwne	r0, #1
   1629c:	cmp	r4, #5
   162a0:	movwcc	r2, #1
   162a4:	orr	r0, r2, r0
   162a8:	ands	r0, r0, r1
   162ac:	moveq	r9, r6
   162b0:	addne	r7, r6, #1
   162b4:	cmp	r9, r7
   162b8:	bhi	16224 <test_sort_find@@Base+0x82c>
   162bc:	ldr	r4, [sp, #12]
   162c0:	bne	16358 <test_sort_find@@Base+0x960>
   162c4:	cmp	r8, r7
   162c8:	bls	1658c <test_sort_find@@Base+0xb94>
   162cc:	mov	r0, r5
   162d0:	ldr	r1, [r0, r7, lsl #2]!
   162d4:	adds	r0, r0, r1
   162d8:	beq	165ac <test_sort_find@@Base+0xbb4>
   162dc:	ldr	r2, [r0]
   162e0:	mov	r1, r0
   162e4:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   162e8:	cmp	r2, #12
   162ec:	bcc	1656c <test_sort_find@@Base+0xb74>
   162f0:	ldrh	r1, [r1, #10]
   162f4:	cmp	r1, #0
   162f8:	beq	1656c <test_sort_find@@Base+0xb74>
   162fc:	ldr	r1, [r0, r1]!
   16300:	ldr	r4, [r0, r1]!
   16304:	movw	r1, #18989	; 0x4a2d
   16308:	movt	r1, #2
   1630c:	cmp	r4, #5
   16310:	mov	r2, r4
   16314:	add	r0, r0, #4
   16318:	movcs	r2, #5
   1631c:	bl	12f70 <strncmp@plt>
   16320:	cmp	r0, #0
   16324:	mov	r2, r0
   16328:	mov	r1, #0
   1632c:	mvneq	r2, #0
   16330:	cmp	r4, #5
   16334:	movwhi	r1, #1
   16338:	cmp	r0, #0
   1633c:	movne	r1, r2
   16340:	cmp	r4, #5
   16344:	ldr	r4, [sp, #12]
   16348:	movcc	r1, r2
   1634c:	cmp	r7, #3
   16350:	cmpeq	r1, #0
   16354:	beq	16370 <test_sort_find@@Base+0x978>
   16358:	movw	r0, #27120	; 0x69f0
   1635c:	movt	r0, #2
   16360:	b	15ee0 <test_sort_find@@Base+0x4e8>
   16364:	movw	r0, #27168	; 0x6a20
   16368:	movt	r0, #2
   1636c:	b	15ee0 <test_sort_find@@Base+0x4e8>
   16370:	movw	r1, #18996	; 0x4a34
   16374:	mov	r0, r5
   16378:	movt	r1, #2
   1637c:	bl	165b8 <test_sort_find@@Base+0xbc0>
   16380:	cmn	r0, #1
   16384:	beq	16394 <test_sort_find@@Base+0x99c>
   16388:	movw	r0, #28912	; 0x70f0
   1638c:	movt	r0, #2
   16390:	b	163b4 <test_sort_find@@Base+0x9bc>
   16394:	movw	r1, #18904	; 0x49d8
   16398:	mov	r0, r5
   1639c:	movt	r1, #2
   163a0:	bl	165b8 <test_sort_find@@Base+0xbc0>
   163a4:	cmp	r0, #0
   163a8:	beq	163c0 <test_sort_find@@Base+0x9c8>
   163ac:	movw	r0, #25039	; 0x61cf
   163b0:	movt	r0, #2
   163b4:	bl	12eec <puts@plt>
   163b8:	ldr	r4, [sp, #12]
   163bc:	b	15ee4 <test_sort_find@@Base+0x4ec>
   163c0:	movw	r1, #17891	; 0x45e3
   163c4:	mov	r0, r5
   163c8:	movt	r1, #2
   163cc:	bl	165b8 <test_sort_find@@Base+0xbc0>
   163d0:	cmp	r0, #1
   163d4:	bne	164cc <test_sort_find@@Base+0xad4>
   163d8:	movw	r1, #17809	; 0x4591
   163dc:	mov	r0, r5
   163e0:	movt	r1, #2
   163e4:	bl	165b8 <test_sort_find@@Base+0xbc0>
   163e8:	cmp	r0, #4
   163ec:	bne	164dc <test_sort_find@@Base+0xae4>
   163f0:	ldr	r0, [r5, #-4]
   163f4:	cmp	r0, #0
   163f8:	beq	16500 <test_sort_find@@Base+0xb08>
   163fc:	mov	r8, r0
   16400:	mov	r7, r0
   16404:	mov	r0, r5
   16408:	lsr	r9, r8, #1
   1640c:	sub	r4, r8, #1
   16410:	mov	r1, r9
   16414:	mov	r2, r4
   16418:	bl	1d370 <main@@Base+0xc90>
   1641c:	mov	r6, #0
   16420:	cmp	r6, r8, lsr #1
   16424:	beq	16448 <test_sort_find@@Base+0xa50>
   16428:	sub	r7, r9, #1
   1642c:	mov	r0, r5
   16430:	mov	r1, r7
   16434:	mov	r2, r4
   16438:	bl	1d370 <main@@Base+0xc90>
   1643c:	sub	r7, r7, #1
   16440:	cmn	r7, #1
   16444:	bne	1642c <test_sort_find@@Base+0xa34>
   16448:	cmp	r4, #0
   1644c:	ldr	r4, [sp, #12]
   16450:	beq	15ee8 <test_sort_find@@Base+0x4f0>
   16454:	mvn	r0, #3
   16458:	mov	r2, r8
   1645c:	ldr	r1, [sp]
   16460:	mov	r6, #0
   16464:	add	r9, r0, r8, lsl #2
   16468:	mov	r0, #4
   1646c:	sub	r7, r2, #2
   16470:	sub	r8, r0, r8, lsl #2
   16474:	ldr	r0, [sp, #8]
   16478:	add	r0, r1, r0
   1647c:	ldr	r1, [sp, #4]
   16480:	add	r0, r0, r2, lsl #2
   16484:	add	r0, r0, r1
   16488:	add	sl, r4, r0
   1648c:	ldr	r0, [sl]
   16490:	ldr	r1, [r5]
   16494:	mov	r2, r7
   16498:	add	r0, r9, r0
   1649c:	str	r0, [r5]
   164a0:	add	r0, r8, r1
   164a4:	mov	r1, #0
   164a8:	str	r0, [sl], #-4
   164ac:	mov	r0, r5
   164b0:	bl	1d370 <main@@Base+0xc90>
   164b4:	sub	r7, r7, #1
   164b8:	sub	r9, r9, #4
   164bc:	add	r8, r8, #4
   164c0:	cmn	r7, #1
   164c4:	bne	1648c <test_sort_find@@Base+0xa94>
   164c8:	b	15ee8 <test_sort_find@@Base+0x4f0>
   164cc:	mov	r6, r0
   164d0:	movw	r0, #28848	; 0x70b0
   164d4:	movt	r0, #2
   164d8:	b	164e8 <test_sort_find@@Base+0xaf0>
   164dc:	mov	r6, r0
   164e0:	movw	r0, #28880	; 0x70d0
   164e4:	movt	r0, #2
   164e8:	bl	12eec <puts@plt>
   164ec:	movw	r0, #19003	; 0x4a3b
   164f0:	mov	r1, r6
   164f4:	movt	r0, #2
   164f8:	bl	12e98 <printf@plt>
   164fc:	b	163b8 <test_sort_find@@Base+0x9c0>
   16500:	ldr	r4, [sp, #12]
   16504:	mov	r6, #0
   16508:	b	15ee8 <test_sort_find@@Base+0x4f0>
   1650c:	movw	r0, #21291	; 0x532b
   16510:	movw	r1, #21001	; 0x5209
   16514:	movw	r3, #21453	; 0x53cd
   16518:	mov	r2, #235	; 0xeb
   1651c:	movt	r0, #2
   16520:	movt	r1, #2
   16524:	movt	r3, #2
   16528:	bl	12f88 <__assert_fail@plt>
   1652c:	movw	r0, #20552	; 0x5048
   16530:	movw	r1, #20590	; 0x506e
   16534:	movw	r3, #22250	; 0x56ea
   16538:	movw	r2, #711	; 0x2c7
   1653c:	movt	r0, #2
   16540:	movt	r1, #2
   16544:	movt	r3, #2
   16548:	bl	12f88 <__assert_fail@plt>
   1654c:	movw	r0, #18934	; 0x49f6
   16550:	movw	r1, #17712	; 0x4530
   16554:	movw	r3, #18943	; 0x49ff
   16558:	movw	r2, #1147	; 0x47b
   1655c:	movt	r0, #2
   16560:	movt	r1, #2
   16564:	movt	r3, #2
   16568:	bl	12f88 <__assert_fail@plt>
   1656c:	movw	r0, #21903	; 0x558f
   16570:	movt	r0, #2
   16574:	movw	r1, #20590	; 0x506e
   16578:	movw	r3, #21822	; 0x553e
   1657c:	movw	r2, #699	; 0x2bb
   16580:	movt	r1, #2
   16584:	movt	r3, #2
   16588:	bl	12f88 <__assert_fail@plt>
   1658c:	movw	r0, #22025	; 0x5609
   16590:	movw	r1, #20590	; 0x506e
   16594:	movw	r3, #22352	; 0x5750
   16598:	movw	r2, #693	; 0x2b5
   1659c:	movt	r0, #2
   165a0:	movt	r1, #2
   165a4:	movt	r3, #2
   165a8:	bl	12f88 <__assert_fail@plt>
   165ac:	movw	r0, #20552	; 0x5048
   165b0:	movt	r0, #2
   165b4:	b	16574 <test_sort_find@@Base+0xb7c>
   165b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   165bc:	add	fp, sp, #24
   165c0:	mvn	r4, #0
   165c4:	cmp	r0, #0
   165c8:	beq	166a8 <test_sort_find@@Base+0xcb0>
   165cc:	ldr	r7, [r0, #-4]
   165d0:	mov	r9, r0
   165d4:	cmp	r7, #0
   165d8:	beq	166a8 <test_sort_find@@Base+0xcb0>
   165dc:	mov	r8, r1
   165e0:	mov	r4, #0
   165e4:	subs	r5, r7, #1
   165e8:	beq	16660 <test_sort_find@@Base+0xc68>
   165ec:	sub	r0, r5, r4
   165f0:	add	r6, r4, r0, lsr #1
   165f4:	cmp	r7, r6
   165f8:	bls	166c8 <test_sort_find@@Base+0xcd0>
   165fc:	mov	r0, r9
   16600:	ldr	r1, [r0, r6, lsl #2]!
   16604:	adds	r0, r0, r1
   16608:	beq	166e8 <test_sort_find@@Base+0xcf0>
   1660c:	ldr	r2, [r0]
   16610:	mov	r1, r0
   16614:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16618:	cmp	r2, #12
   1661c:	bcc	166bc <test_sort_find@@Base+0xcc4>
   16620:	ldrh	r1, [r1, #10]
   16624:	cmp	r1, #0
   16628:	beq	166bc <test_sort_find@@Base+0xcc4>
   1662c:	ldr	r1, [r0, r1]!
   16630:	add	r0, r0, r1
   16634:	mov	r1, r8
   16638:	add	r0, r0, #4
   1663c:	bl	12e8c <strcmp@plt>
   16640:	cmp	r0, #0
   16644:	movge	r5, r6
   16648:	addlt	r4, r6, #1
   1664c:	cmp	r5, r4
   16650:	bhi	165ec <test_sort_find@@Base+0xbf4>
   16654:	bne	166b0 <test_sort_find@@Base+0xcb8>
   16658:	cmp	r7, r4
   1665c:	bls	166c8 <test_sort_find@@Base+0xcd0>
   16660:	ldr	r0, [r9, r4, lsl #2]!
   16664:	adds	r0, r9, r0
   16668:	beq	166e8 <test_sort_find@@Base+0xcf0>
   1666c:	ldr	r2, [r0]
   16670:	mov	r1, r0
   16674:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16678:	cmp	r2, #12
   1667c:	bcc	166bc <test_sort_find@@Base+0xcc4>
   16680:	ldrh	r1, [r1, #10]
   16684:	cmp	r1, #0
   16688:	beq	166bc <test_sort_find@@Base+0xcc4>
   1668c:	ldr	r1, [r0, r1]!
   16690:	add	r0, r0, r1
   16694:	mov	r1, r8
   16698:	add	r0, r0, #4
   1669c:	bl	12e8c <strcmp@plt>
   166a0:	cmp	r0, #0
   166a4:	mvnne	r4, #0
   166a8:	mov	r0, r4
   166ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   166b0:	mvn	r4, #0
   166b4:	mov	r0, r4
   166b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   166bc:	movw	r0, #21903	; 0x558f
   166c0:	movt	r0, #2
   166c4:	b	166f0 <test_sort_find@@Base+0xcf8>
   166c8:	movw	r0, #22025	; 0x5609
   166cc:	movw	r1, #20590	; 0x506e
   166d0:	movw	r3, #22352	; 0x5750
   166d4:	movw	r2, #693	; 0x2b5
   166d8:	movt	r0, #2
   166dc:	movt	r1, #2
   166e0:	movt	r3, #2
   166e4:	bl	12f88 <__assert_fail@plt>
   166e8:	movw	r0, #20552	; 0x5048
   166ec:	movt	r0, #2
   166f0:	movw	r1, #20590	; 0x506e
   166f4:	movw	r3, #21822	; 0x553e
   166f8:	movw	r2, #699	; 0x2bb
   166fc:	movt	r1, #2
   16700:	movt	r3, #2
   16704:	bl	12f88 <__assert_fail@plt>

00016708 <test_scan@@Base>:
   16708:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1670c:	add	fp, sp, #28
   16710:	sub	sp, sp, #68	; 0x44
   16714:	mov	r4, r0
   16718:	mov	r0, #2
   1671c:	strb	r0, [fp, #-34]	; 0xffffffde
   16720:	mov	r0, #772	; 0x304
   16724:	strh	r0, [fp, #-36]	; 0xffffffdc
   16728:	movw	r0, #1798	; 0x706
   1672c:	movt	r0, #769	; 0x301
   16730:	str	r0, [fp, #-40]	; 0xffffffd8
   16734:	mov	r0, r4
   16738:	bl	1dd44 <flatcc_builder_reset@@Base>
   1673c:	movw	r1, #17220	; 0x4344
   16740:	mov	r0, r4
   16744:	mov	r2, #0
   16748:	mov	r3, #0
   1674c:	movt	r1, #2
   16750:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   16754:	cmp	r0, #0
   16758:	bne	16768 <test_scan@@Base+0x60>
   1675c:	mov	r0, r4
   16760:	mov	r1, #36	; 0x24
   16764:	bl	1fcbc <flatcc_builder_start_table@@Base>
   16768:	movw	r1, #17288	; 0x4388
   1676c:	mov	r0, r4
   16770:	movt	r1, #2
   16774:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   16778:	cmp	r0, #0
   1677c:	beq	16798 <test_scan@@Base+0x90>
   16780:	mov	r5, r0
   16784:	mov	r0, r4
   16788:	mov	r1, #3
   1678c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   16790:	cmp	r0, #0
   16794:	strne	r5, [r0]
   16798:	mvn	r0, #0
   1679c:	mov	r1, #1
   167a0:	mov	r2, #7
   167a4:	mov	r3, #1
   167a8:	str	r1, [sp]
   167ac:	str	r0, [sp, #4]
   167b0:	sub	r1, fp, #40	; 0x28
   167b4:	mov	r0, r4
   167b8:	bl	2082c <flatcc_builder_create_vector@@Base>
   167bc:	cmp	r0, #0
   167c0:	beq	167dc <test_scan@@Base+0xd4>
   167c4:	mov	r5, r0
   167c8:	mov	r0, r4
   167cc:	mov	r1, #5
   167d0:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   167d4:	cmp	r0, #0
   167d8:	strne	r5, [r0]
   167dc:	mov	r0, r4
   167e0:	bl	1f790 <flatcc_builder_start_offset_vector@@Base>
   167e4:	mov	r0, r4
   167e8:	bl	1fa48 <flatcc_builder_end_offset_vector@@Base>
   167ec:	cmp	r0, #0
   167f0:	beq	1680c <test_scan@@Base+0x104>
   167f4:	mov	r5, r0
   167f8:	mov	r0, r4
   167fc:	mov	r1, #10
   16800:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   16804:	cmp	r0, #0
   16808:	strne	r5, [r0]
   1680c:	mov	r0, r4
   16810:	bl	1f790 <flatcc_builder_start_offset_vector@@Base>
   16814:	mov	r0, r4
   16818:	mov	r1, #36	; 0x24
   1681c:	bl	1fcbc <flatcc_builder_start_table@@Base>
   16820:	movw	r1, #17809	; 0x4591
   16824:	mov	r0, r4
   16828:	movt	r1, #2
   1682c:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   16830:	cmp	r0, #0
   16834:	beq	16850 <test_scan@@Base+0x148>
   16838:	mov	r5, r0
   1683c:	mov	r0, r4
   16840:	mov	r1, #3
   16844:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   16848:	cmp	r0, #0
   1684c:	strne	r5, [r0]
   16850:	movw	r1, #25228	; 0x628c
   16854:	mov	r0, r4
   16858:	mov	r2, #1
   1685c:	movt	r1, #2
   16860:	bl	205dc <flatcc_builder_check_required@@Base>
   16864:	cmp	r0, #0
   16868:	beq	176e8 <test_scan@@Base+0xfe0>
   1686c:	mov	r0, r4
   16870:	bl	2066c <flatcc_builder_end_table@@Base>
   16874:	cmp	r0, #0
   16878:	beq	16888 <test_scan@@Base+0x180>
   1687c:	mov	r1, r0
   16880:	mov	r0, r4
   16884:	bl	1f038 <flatcc_builder_offset_vector_push@@Base>
   16888:	mov	r0, r4
   1688c:	mov	r1, #36	; 0x24
   16890:	bl	1fcbc <flatcc_builder_start_table@@Base>
   16894:	movw	r1, #17851	; 0x45bb
   16898:	mov	r0, r4
   1689c:	movt	r1, #2
   168a0:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   168a4:	cmp	r0, #0
   168a8:	beq	168c4 <test_scan@@Base+0x1bc>
   168ac:	mov	r5, r0
   168b0:	mov	r0, r4
   168b4:	mov	r1, #3
   168b8:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   168bc:	cmp	r0, #0
   168c0:	strne	r5, [r0]
   168c4:	movw	r1, #25228	; 0x628c
   168c8:	mov	r0, r4
   168cc:	mov	r2, #1
   168d0:	movt	r1, #2
   168d4:	bl	205dc <flatcc_builder_check_required@@Base>
   168d8:	cmp	r0, #0
   168dc:	beq	176e8 <test_scan@@Base+0xfe0>
   168e0:	mov	r0, r4
   168e4:	bl	2066c <flatcc_builder_end_table@@Base>
   168e8:	cmp	r0, #0
   168ec:	beq	168fc <test_scan@@Base+0x1f4>
   168f0:	mov	r1, r0
   168f4:	mov	r0, r4
   168f8:	bl	1f038 <flatcc_builder_offset_vector_push@@Base>
   168fc:	mov	r0, r4
   16900:	mov	r1, #36	; 0x24
   16904:	bl	1fcbc <flatcc_builder_start_table@@Base>
   16908:	movw	r1, #17891	; 0x45e3
   1690c:	mov	r0, r4
   16910:	movt	r1, #2
   16914:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   16918:	cmp	r0, #0
   1691c:	beq	16938 <test_scan@@Base+0x230>
   16920:	mov	r5, r0
   16924:	mov	r0, r4
   16928:	mov	r1, #3
   1692c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   16930:	cmp	r0, #0
   16934:	strne	r5, [r0]
   16938:	movw	r1, #25228	; 0x628c
   1693c:	mov	r0, r4
   16940:	mov	r2, #1
   16944:	movt	r1, #2
   16948:	bl	205dc <flatcc_builder_check_required@@Base>
   1694c:	cmp	r0, #0
   16950:	beq	176e8 <test_scan@@Base+0xfe0>
   16954:	mov	r0, r4
   16958:	bl	2066c <flatcc_builder_end_table@@Base>
   1695c:	cmp	r0, #0
   16960:	beq	16970 <test_scan@@Base+0x268>
   16964:	mov	r1, r0
   16968:	mov	r0, r4
   1696c:	bl	1f038 <flatcc_builder_offset_vector_push@@Base>
   16970:	mov	r0, r4
   16974:	mov	r1, #36	; 0x24
   16978:	bl	1fcbc <flatcc_builder_start_table@@Base>
   1697c:	movw	r1, #18904	; 0x49d8
   16980:	mov	r0, r4
   16984:	movt	r1, #2
   16988:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   1698c:	cmp	r0, #0
   16990:	beq	169ac <test_scan@@Base+0x2a4>
   16994:	mov	r5, r0
   16998:	mov	r0, r4
   1699c:	mov	r1, #3
   169a0:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   169a4:	cmp	r0, #0
   169a8:	strne	r5, [r0]
   169ac:	movw	r1, #25228	; 0x628c
   169b0:	mov	r0, r4
   169b4:	mov	r2, #1
   169b8:	movt	r1, #2
   169bc:	bl	205dc <flatcc_builder_check_required@@Base>
   169c0:	cmp	r0, #0
   169c4:	beq	176e8 <test_scan@@Base+0xfe0>
   169c8:	mov	r0, r4
   169cc:	bl	2066c <flatcc_builder_end_table@@Base>
   169d0:	cmp	r0, #0
   169d4:	beq	169e4 <test_scan@@Base+0x2dc>
   169d8:	mov	r1, r0
   169dc:	mov	r0, r4
   169e0:	bl	1f038 <flatcc_builder_offset_vector_push@@Base>
   169e4:	mov	r0, r4
   169e8:	mov	r1, #36	; 0x24
   169ec:	bl	1fcbc <flatcc_builder_start_table@@Base>
   169f0:	movw	r1, #17891	; 0x45e3
   169f4:	mov	r0, r4
   169f8:	movt	r1, #2
   169fc:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   16a00:	cmp	r0, #0
   16a04:	beq	16a20 <test_scan@@Base+0x318>
   16a08:	mov	r5, r0
   16a0c:	mov	r0, r4
   16a10:	mov	r1, #3
   16a14:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   16a18:	cmp	r0, #0
   16a1c:	strne	r5, [r0]
   16a20:	movw	r1, #25228	; 0x628c
   16a24:	mov	r0, r4
   16a28:	mov	r2, #1
   16a2c:	movt	r1, #2
   16a30:	bl	205dc <flatcc_builder_check_required@@Base>
   16a34:	cmp	r0, #0
   16a38:	beq	176e8 <test_scan@@Base+0xfe0>
   16a3c:	mov	r0, r4
   16a40:	bl	2066c <flatcc_builder_end_table@@Base>
   16a44:	cmp	r0, #0
   16a48:	beq	16a58 <test_scan@@Base+0x350>
   16a4c:	mov	r1, r0
   16a50:	mov	r0, r4
   16a54:	bl	1f038 <flatcc_builder_offset_vector_push@@Base>
   16a58:	mov	r0, r4
   16a5c:	bl	1fa48 <flatcc_builder_end_offset_vector@@Base>
   16a60:	cmp	r0, #0
   16a64:	beq	16a80 <test_scan@@Base+0x378>
   16a68:	mov	r5, r0
   16a6c:	mov	r0, r4
   16a70:	mov	r1, #11
   16a74:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   16a78:	cmp	r0, #0
   16a7c:	strne	r5, [r0]
   16a80:	movw	r1, #25228	; 0x628c
   16a84:	mov	r0, r4
   16a88:	mov	r2, #1
   16a8c:	movt	r1, #2
   16a90:	bl	205dc <flatcc_builder_check_required@@Base>
   16a94:	cmp	r0, #0
   16a98:	beq	176e8 <test_scan@@Base+0xfe0>
   16a9c:	mov	r0, r4
   16aa0:	bl	2066c <flatcc_builder_end_table@@Base>
   16aa4:	mov	r1, r0
   16aa8:	mov	r0, r4
   16aac:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   16ab0:	sub	r1, fp, #32
   16ab4:	mov	r0, r4
   16ab8:	bl	221c4 <flatcc_builder_finalize_aligned_buffer@@Base>
   16abc:	cmp	r0, #0
   16ac0:	beq	17708 <test_scan@@Base+0x1000>
   16ac4:	ldr	r2, [r0, #4]
   16ac8:	movw	r1, #20301	; 0x4f4d
   16acc:	movt	r1, #21326	; 0x534e
   16ad0:	cmp	r2, r1
   16ad4:	bne	17708 <test_scan@@Base+0x1000>
   16ad8:	ldr	r1, [r0]
   16adc:	mov	sl, r0
   16ae0:	str	r1, [sp, #48]	; 0x30
   16ae4:	ldr	r1, [sl, r1]!
   16ae8:	mov	r2, sl
   16aec:	ldrh	r1, [r2, -r1]!	; <UNPREDICTABLE>
   16af0:	cmp	r1, #27
   16af4:	bls	17728 <test_scan@@Base+0x1020>
   16af8:	ldrh	r9, [r2, #26]
   16afc:	cmp	r9, #0
   16b00:	beq	17728 <test_scan@@Base+0x1020>
   16b04:	ldrh	r3, [r2, #14]
   16b08:	cmp	r3, #0
   16b0c:	mov	r1, r3
   16b10:	str	r3, [sp, #40]	; 0x28
   16b14:	beq	17748 <test_scan@@Base+0x1040>
   16b18:	ldrh	r1, [r2, #24]
   16b1c:	str	r0, [fp, #-44]	; 0xffffffd4
   16b20:	cmp	r1, #0
   16b24:	mov	r0, r1
   16b28:	str	r1, [sp, #44]	; 0x2c
   16b2c:	beq	17768 <test_scan@@Base+0x1060>
   16b30:	mov	r1, sl
   16b34:	ldr	r0, [r1, r9]!
   16b38:	add	r1, r1, r0
   16b3c:	add	r1, r1, #4
   16b40:	ldr	r6, [r1, #-4]!
   16b44:	cmp	r6, #0
   16b48:	str	r1, [sp, #36]	; 0x24
   16b4c:	beq	16cb8 <test_scan@@Base+0x5b0>
   16b50:	ldr	r1, [sp, #40]	; 0x28
   16b54:	mov	r2, sl
   16b58:	movw	r5, #17851	; 0x45bb
   16b5c:	mov	r4, #0
   16b60:	movt	r5, #2
   16b64:	ldr	r1, [r2, r1]!
   16b68:	str	r1, [sp, #20]
   16b6c:	ldr	r1, [sp, #44]	; 0x2c
   16b70:	str	r2, [sp, #16]
   16b74:	ldr	r1, [sl, r1]!
   16b78:	str	r1, [sp, #24]
   16b7c:	ldr	r1, [sp, #48]	; 0x30
   16b80:	add	r7, r0, r1
   16b84:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16b88:	add	r1, r7, r9
   16b8c:	str	r1, [sp, #28]
   16b90:	add	r0, r0, r1
   16b94:	add	r8, r0, #8
   16b98:	str	r0, [sp, #32]
   16b9c:	ldr	r0, [r8, #-4]
   16ba0:	add	r1, r8, r0
   16ba4:	cmp	r1, #4
   16ba8:	beq	181ac <test_scan@@Base+0x1aa4>
   16bac:	ldr	r1, [r1, #-4]
   16bb0:	sub	r1, r0, r1
   16bb4:	add	r1, r8, r1
   16bb8:	ldrh	r2, [r1, #-4]
   16bbc:	cmp	r2, #12
   16bc0:	bcc	181a0 <test_scan@@Base+0x1a98>
   16bc4:	ldrh	r1, [r1, #6]
   16bc8:	cmp	r1, #0
   16bcc:	beq	181a0 <test_scan@@Base+0x1a98>
   16bd0:	add	r2, r0, r1
   16bd4:	add	r2, r8, r2
   16bd8:	ldr	r2, [r2, #-4]
   16bdc:	add	r0, r2, r0
   16be0:	add	r0, r0, r1
   16be4:	mov	r1, r5
   16be8:	add	r0, r8, r0
   16bec:	bl	12e8c <strcmp@plt>
   16bf0:	cmp	r0, #0
   16bf4:	beq	16c0c <test_scan@@Base+0x504>
   16bf8:	add	r4, r4, #1
   16bfc:	add	r8, r8, #4
   16c00:	cmp	r4, r6
   16c04:	bcc	16b9c <test_scan@@Base+0x494>
   16c08:	b	16cb8 <test_scan@@Base+0x5b0>
   16c0c:	cmp	r4, #1
   16c10:	bne	16cb8 <test_scan@@Base+0x5b0>
   16c14:	ldr	r8, [fp, #-44]	; 0xffffffd4
   16c18:	add	r0, r7, r6, lsl #2
   16c1c:	movw	r5, #17851	; 0x45bb
   16c20:	sub	r7, r6, #1
   16c24:	add	r9, r0, r9
   16c28:	movt	r5, #2
   16c2c:	add	r4, r8, r9
   16c30:	cmn	r7, #1
   16c34:	beq	16ca8 <test_scan@@Base+0x5a0>
   16c38:	cmp	r6, r7
   16c3c:	bls	187f4 <test_scan@@Base+0x20ec>
   16c40:	ldr	r0, [r4]
   16c44:	adds	r1, r4, r0
   16c48:	beq	181ac <test_scan@@Base+0x1aa4>
   16c4c:	ldr	r1, [r4, r0]
   16c50:	sub	r1, r0, r1
   16c54:	add	r1, r4, r1
   16c58:	ldrh	r2, [r1]
   16c5c:	cmp	r2, #12
   16c60:	bcc	181a0 <test_scan@@Base+0x1a98>
   16c64:	ldrh	r1, [r1, #10]
   16c68:	cmp	r1, #0
   16c6c:	beq	181a0 <test_scan@@Base+0x1a98>
   16c70:	add	r2, r0, r1
   16c74:	ldr	r2, [r4, r2]
   16c78:	add	r0, r2, r0
   16c7c:	add	r0, r0, r1
   16c80:	mov	r1, r5
   16c84:	add	r0, r4, r0
   16c88:	add	r0, r0, #4
   16c8c:	bl	12e8c <strcmp@plt>
   16c90:	sub	r4, r4, #4
   16c94:	sub	r7, r7, #1
   16c98:	cmp	r0, #0
   16c9c:	bne	16c30 <test_scan@@Base+0x528>
   16ca0:	cmp	r7, #0
   16ca4:	beq	16ce0 <test_scan@@Base+0x5d8>
   16ca8:	movw	r0, #29040	; 0x7170
   16cac:	movt	r0, #2
   16cb0:	bl	12eec <puts@plt>
   16cb4:	b	16cc8 <test_scan@@Base+0x5c0>
   16cb8:	movw	r0, #29072	; 0x7190
   16cbc:	movt	r0, #2
   16cc0:	bl	12eec <puts@plt>
   16cc4:	ldr	r8, [fp, #-44]	; 0xffffffd4
   16cc8:	mvn	r5, #0
   16ccc:	mov	r0, r8
   16cd0:	bl	22304 <flatcc_builder_aligned_free@@Base>
   16cd4:	mov	r0, r5
   16cd8:	sub	sp, fp, #28
   16cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ce0:	ldr	r0, [sp, #32]
   16ce4:	str	r9, [sp, #12]
   16ce8:	movw	r9, #18989	; 0x4a2d
   16cec:	mov	r7, #0
   16cf0:	movt	r9, #2
   16cf4:	add	r5, r0, #8
   16cf8:	ldr	r0, [r5, #-4]
   16cfc:	add	r1, r5, r0
   16d00:	cmp	r1, #4
   16d04:	beq	181ac <test_scan@@Base+0x1aa4>
   16d08:	ldr	r1, [r1, #-4]
   16d0c:	sub	r1, r0, r1
   16d10:	add	r1, r5, r1
   16d14:	ldrh	r2, [r1, #-4]
   16d18:	cmp	r2, #12
   16d1c:	bcc	181a0 <test_scan@@Base+0x1a98>
   16d20:	ldrh	r1, [r1, #6]
   16d24:	cmp	r1, #0
   16d28:	beq	181a0 <test_scan@@Base+0x1a98>
   16d2c:	add	r2, r0, r1
   16d30:	add	r2, r5, r2
   16d34:	ldr	r2, [r2, #-4]
   16d38:	add	r0, r2, r0
   16d3c:	add	r0, r0, r1
   16d40:	mov	r1, r9
   16d44:	add	r0, r5, r0
   16d48:	ldr	r4, [r0, #-4]
   16d4c:	cmp	r4, #5
   16d50:	mov	r2, r4
   16d54:	movcs	r2, #5
   16d58:	bl	12f70 <strncmp@plt>
   16d5c:	cmp	r0, #0
   16d60:	mov	r1, r0
   16d64:	mov	r2, #0
   16d68:	mvneq	r1, #0
   16d6c:	cmp	r4, #5
   16d70:	movwhi	r2, #1
   16d74:	cmp	r0, #0
   16d78:	movne	r2, r1
   16d7c:	cmp	r4, #5
   16d80:	movcc	r2, r1
   16d84:	cmp	r2, #0
   16d88:	beq	16da0 <test_scan@@Base+0x698>
   16d8c:	add	r7, r7, #1
   16d90:	add	r5, r5, #4
   16d94:	cmp	r7, r6
   16d98:	bcc	16cf8 <test_scan@@Base+0x5f0>
   16d9c:	b	16e6c <test_scan@@Base+0x764>
   16da0:	cmp	r7, #1
   16da4:	bne	16e6c <test_scan@@Base+0x764>
   16da8:	ldr	r0, [sp, #12]
   16dac:	movw	r7, #18989	; 0x4a2d
   16db0:	sub	r5, r6, #1
   16db4:	movt	r7, #2
   16db8:	add	r9, r8, r0
   16dbc:	cmn	r5, #1
   16dc0:	beq	16e6c <test_scan@@Base+0x764>
   16dc4:	cmp	r6, r5
   16dc8:	bls	187f4 <test_scan@@Base+0x20ec>
   16dcc:	ldr	r0, [r9]
   16dd0:	adds	r1, r9, r0
   16dd4:	beq	181ac <test_scan@@Base+0x1aa4>
   16dd8:	ldr	r1, [r9, r0]
   16ddc:	sub	r1, r0, r1
   16de0:	add	r1, r9, r1
   16de4:	ldrh	r2, [r1]
   16de8:	cmp	r2, #12
   16dec:	bcc	181a0 <test_scan@@Base+0x1a98>
   16df0:	ldrh	r1, [r1, #10]
   16df4:	cmp	r1, #0
   16df8:	beq	181a0 <test_scan@@Base+0x1a98>
   16dfc:	add	r2, r0, r1
   16e00:	ldr	r2, [r9, r2]
   16e04:	add	r0, r2, r0
   16e08:	add	r0, r0, r1
   16e0c:	mov	r1, r9
   16e10:	ldr	r4, [r1, r0]!
   16e14:	cmp	r4, #5
   16e18:	mov	r2, r4
   16e1c:	add	r0, r1, #4
   16e20:	mov	r1, r7
   16e24:	movcs	r2, #5
   16e28:	bl	12f70 <strncmp@plt>
   16e2c:	cmp	r0, #0
   16e30:	mov	r1, r0
   16e34:	mov	r2, #0
   16e38:	sub	r9, r9, #4
   16e3c:	sub	r5, r5, #1
   16e40:	mvneq	r1, #0
   16e44:	cmp	r4, #5
   16e48:	movwhi	r2, #1
   16e4c:	cmp	r0, #0
   16e50:	movne	r2, r1
   16e54:	cmp	r4, #5
   16e58:	movcc	r2, r1
   16e5c:	cmp	r2, #0
   16e60:	bne	16dbc <test_scan@@Base+0x6b4>
   16e64:	cmp	r5, #0
   16e68:	beq	16e78 <test_scan@@Base+0x770>
   16e6c:	movw	r0, #28992	; 0x7140
   16e70:	movt	r0, #2
   16e74:	b	16cb0 <test_scan@@Base+0x5a8>
   16e78:	cmp	r6, #3
   16e7c:	bcc	16efc <test_scan@@Base+0x7f4>
   16e80:	ldr	r0, [sp, #32]
   16e84:	movw	r5, #17851	; 0x45bb
   16e88:	mov	r7, #2
   16e8c:	movt	r5, #2
   16e90:	add	r4, r0, #12
   16e94:	ldr	r0, [r4]
   16e98:	adds	r1, r4, r0
   16e9c:	beq	181ac <test_scan@@Base+0x1aa4>
   16ea0:	ldr	r1, [r4, r0]
   16ea4:	sub	r1, r0, r1
   16ea8:	add	r1, r4, r1
   16eac:	ldrh	r2, [r1]
   16eb0:	cmp	r2, #12
   16eb4:	bcc	181a0 <test_scan@@Base+0x1a98>
   16eb8:	ldrh	r1, [r1, #10]
   16ebc:	cmp	r1, #0
   16ec0:	beq	181a0 <test_scan@@Base+0x1a98>
   16ec4:	add	r2, r0, r1
   16ec8:	ldr	r2, [r4, r2]
   16ecc:	add	r0, r2, r0
   16ed0:	add	r0, r0, r1
   16ed4:	mov	r1, r5
   16ed8:	add	r0, r4, r0
   16edc:	add	r0, r0, #4
   16ee0:	bl	12e8c <strcmp@plt>
   16ee4:	cmp	r0, #0
   16ee8:	beq	1700c <test_scan@@Base+0x904>
   16eec:	add	r7, r7, #1
   16ef0:	add	r4, r4, #4
   16ef4:	cmp	r7, r6
   16ef8:	bcc	16e94 <test_scan@@Base+0x78c>
   16efc:	ldr	r0, [sp, #32]
   16f00:	movw	r5, #18996	; 0x4a34
   16f04:	mov	r7, #0
   16f08:	movt	r5, #2
   16f0c:	add	r4, r0, #8
   16f10:	ldr	r0, [r4, #-4]
   16f14:	add	r1, r4, r0
   16f18:	cmp	r1, #4
   16f1c:	beq	181ac <test_scan@@Base+0x1aa4>
   16f20:	ldr	r1, [r1, #-4]
   16f24:	sub	r1, r0, r1
   16f28:	add	r1, r4, r1
   16f2c:	ldrh	r2, [r1, #-4]
   16f30:	cmp	r2, #12
   16f34:	bcc	181a0 <test_scan@@Base+0x1a98>
   16f38:	ldrh	r1, [r1, #6]
   16f3c:	cmp	r1, #0
   16f40:	beq	181a0 <test_scan@@Base+0x1a98>
   16f44:	add	r2, r0, r1
   16f48:	add	r2, r4, r2
   16f4c:	ldr	r2, [r2, #-4]
   16f50:	add	r0, r2, r0
   16f54:	add	r0, r0, r1
   16f58:	mov	r1, r5
   16f5c:	add	r0, r4, r0
   16f60:	bl	12e8c <strcmp@plt>
   16f64:	cmp	r0, #0
   16f68:	beq	17000 <test_scan@@Base+0x8f8>
   16f6c:	add	r7, r7, #1
   16f70:	add	r4, r4, #4
   16f74:	cmp	r7, r6
   16f78:	bcc	16f10 <test_scan@@Base+0x808>
   16f7c:	ldr	r0, [sp, #32]
   16f80:	movw	r5, #17809	; 0x4591
   16f84:	mov	r4, #0
   16f88:	movt	r5, #2
   16f8c:	add	r7, r0, #8
   16f90:	ldr	r0, [r7, #-4]
   16f94:	add	r1, r7, r0
   16f98:	cmp	r1, #4
   16f9c:	beq	181ac <test_scan@@Base+0x1aa4>
   16fa0:	ldr	r1, [r1, #-4]
   16fa4:	sub	r1, r0, r1
   16fa8:	add	r1, r7, r1
   16fac:	ldrh	r2, [r1, #-4]
   16fb0:	cmp	r2, #12
   16fb4:	bcc	181a0 <test_scan@@Base+0x1a98>
   16fb8:	ldrh	r1, [r1, #6]
   16fbc:	cmp	r1, #0
   16fc0:	beq	181a0 <test_scan@@Base+0x1a98>
   16fc4:	add	r2, r0, r1
   16fc8:	add	r2, r7, r2
   16fcc:	ldr	r2, [r2, #-4]
   16fd0:	add	r0, r2, r0
   16fd4:	add	r0, r0, r1
   16fd8:	mov	r1, r5
   16fdc:	add	r0, r7, r0
   16fe0:	bl	12e8c <strcmp@plt>
   16fe4:	cmp	r0, #0
   16fe8:	beq	17018 <test_scan@@Base+0x910>
   16fec:	add	r4, r4, #1
   16ff0:	add	r7, r7, #4
   16ff4:	cmp	r4, r6
   16ff8:	bcc	16f90 <test_scan@@Base+0x888>
   16ffc:	b	17020 <test_scan@@Base+0x918>
   17000:	movw	r0, #28912	; 0x70f0
   17004:	movt	r0, #2
   17008:	b	16cb0 <test_scan@@Base+0x5a8>
   1700c:	movw	r0, #28944	; 0x7110
   17010:	movt	r0, #2
   17014:	b	16cb0 <test_scan@@Base+0x5a8>
   17018:	cmp	r4, #0
   1701c:	beq	1702c <test_scan@@Base+0x924>
   17020:	movw	r0, #28880	; 0x70d0
   17024:	movt	r0, #2
   17028:	b	16cb0 <test_scan@@Base+0x5a8>
   1702c:	ldr	r0, [sp, #32]
   17030:	movw	r5, #17891	; 0x45e3
   17034:	mov	r4, #0
   17038:	movt	r5, #2
   1703c:	add	r7, r0, #8
   17040:	ldr	r0, [r7, #-4]
   17044:	add	r1, r7, r0
   17048:	cmp	r1, #4
   1704c:	beq	181ac <test_scan@@Base+0x1aa4>
   17050:	ldr	r1, [r1, #-4]
   17054:	sub	r1, r0, r1
   17058:	add	r1, r7, r1
   1705c:	ldrh	r2, [r1, #-4]
   17060:	cmp	r2, #12
   17064:	bcc	181a0 <test_scan@@Base+0x1a98>
   17068:	ldrh	r1, [r1, #6]
   1706c:	cmp	r1, #0
   17070:	beq	181a0 <test_scan@@Base+0x1a98>
   17074:	add	r2, r0, r1
   17078:	add	r2, r7, r2
   1707c:	ldr	r2, [r2, #-4]
   17080:	add	r0, r2, r0
   17084:	add	r0, r0, r1
   17088:	mov	r1, r5
   1708c:	add	r0, r7, r0
   17090:	bl	12e8c <strcmp@plt>
   17094:	cmp	r0, #0
   17098:	beq	170b0 <test_scan@@Base+0x9a8>
   1709c:	add	r4, r4, #1
   170a0:	add	r7, r7, #4
   170a4:	cmp	r4, r6
   170a8:	bcc	17040 <test_scan@@Base+0x938>
   170ac:	b	17384 <test_scan@@Base+0xc7c>
   170b0:	cmp	r4, #2
   170b4:	bne	17384 <test_scan@@Base+0xc7c>
   170b8:	ldr	r0, [sp, #12]
   170bc:	movw	r5, #17891	; 0x45e3
   170c0:	sub	r7, r6, #1
   170c4:	movt	r5, #2
   170c8:	add	r4, r8, r0
   170cc:	cmn	r7, #1
   170d0:	beq	17390 <test_scan@@Base+0xc88>
   170d4:	cmp	r6, r7
   170d8:	bls	187f4 <test_scan@@Base+0x20ec>
   170dc:	ldr	r0, [r4]
   170e0:	adds	r1, r4, r0
   170e4:	beq	181ac <test_scan@@Base+0x1aa4>
   170e8:	ldr	r1, [r4, r0]
   170ec:	sub	r1, r0, r1
   170f0:	add	r1, r4, r1
   170f4:	ldrh	r2, [r1]
   170f8:	cmp	r2, #12
   170fc:	bcc	181a0 <test_scan@@Base+0x1a98>
   17100:	ldrh	r1, [r1, #10]
   17104:	cmp	r1, #0
   17108:	beq	181a0 <test_scan@@Base+0x1a98>
   1710c:	add	r2, r0, r1
   17110:	ldr	r2, [r4, r2]
   17114:	add	r0, r2, r0
   17118:	add	r0, r0, r1
   1711c:	mov	r1, r5
   17120:	add	r0, r4, r0
   17124:	add	r0, r0, #4
   17128:	bl	12e8c <strcmp@plt>
   1712c:	sub	r4, r4, #4
   17130:	sub	r7, r7, #1
   17134:	cmp	r0, #0
   17138:	bne	170cc <test_scan@@Base+0x9c4>
   1713c:	cmp	r7, #3
   17140:	bne	17390 <test_scan@@Base+0xc88>
   17144:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17148:	ldr	r1, [sp, #12]
   1714c:	movw	r7, #19057	; 0x4a71
   17150:	sub	r5, r6, #1
   17154:	movt	r7, #2
   17158:	add	r9, r0, r1
   1715c:	cmn	r5, #1
   17160:	beq	1739c <test_scan@@Base+0xc94>
   17164:	cmp	r6, r5
   17168:	bls	187f4 <test_scan@@Base+0x20ec>
   1716c:	ldr	r0, [r9]
   17170:	adds	r1, r9, r0
   17174:	beq	181ac <test_scan@@Base+0x1aa4>
   17178:	ldr	r1, [r9, r0]
   1717c:	sub	r1, r0, r1
   17180:	add	r1, r9, r1
   17184:	ldrh	r2, [r1]
   17188:	cmp	r2, #12
   1718c:	bcc	181a0 <test_scan@@Base+0x1a98>
   17190:	ldrh	r1, [r1, #10]
   17194:	cmp	r1, #0
   17198:	beq	181a0 <test_scan@@Base+0x1a98>
   1719c:	add	r2, r0, r1
   171a0:	ldr	r2, [r9, r2]
   171a4:	add	r0, r2, r0
   171a8:	add	r0, r0, r1
   171ac:	mov	r1, r9
   171b0:	ldr	r4, [r1, r0]!
   171b4:	cmp	r4, #8
   171b8:	mov	r2, r4
   171bc:	add	r0, r1, #4
   171c0:	mov	r1, r7
   171c4:	movcs	r2, #8
   171c8:	bl	12f70 <strncmp@plt>
   171cc:	cmp	r0, #0
   171d0:	mov	r1, r0
   171d4:	mov	r2, #0
   171d8:	sub	r9, r9, #4
   171dc:	sub	r5, r5, #1
   171e0:	mvneq	r1, #0
   171e4:	cmp	r4, #8
   171e8:	movwhi	r2, #1
   171ec:	cmp	r0, #0
   171f0:	movne	r2, r1
   171f4:	cmp	r4, #8
   171f8:	movcc	r2, r1
   171fc:	cmp	r2, #0
   17200:	bne	1715c <test_scan@@Base+0xa54>
   17204:	cmp	r5, #3
   17208:	bne	1739c <test_scan@@Base+0xc94>
   1720c:	ldr	r1, [sp, #28]
   17210:	mvn	r0, r6
   17214:	mov	r7, r6
   17218:	movw	r8, #19057	; 0x4a71
   1721c:	cmn	r0, #4
   17220:	str	r0, [sp, #8]
   17224:	movt	r8, #2
   17228:	mvnls	r0, #3
   1722c:	cmp	r6, #3
   17230:	movcs	r7, #3
   17234:	sub	r1, r1, #4
   17238:	mov	r9, r7
   1723c:	str	r1, [sp, #28]
   17240:	sub	r0, r1, r0, lsl #2
   17244:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17248:	add	r5, r1, r0
   1724c:	cmp	r7, #2
   17250:	bcc	1739c <test_scan@@Base+0xc94>
   17254:	sub	r7, r7, #1
   17258:	cmp	r6, r7
   1725c:	bls	187f4 <test_scan@@Base+0x20ec>
   17260:	ldr	r0, [r5]
   17264:	adds	r1, r5, r0
   17268:	beq	181ac <test_scan@@Base+0x1aa4>
   1726c:	ldr	r1, [r5, r0]
   17270:	sub	r1, r0, r1
   17274:	add	r1, r5, r1
   17278:	ldrh	r2, [r1]
   1727c:	cmp	r2, #12
   17280:	bcc	181a0 <test_scan@@Base+0x1a98>
   17284:	ldrh	r1, [r1, #10]
   17288:	cmp	r1, #0
   1728c:	beq	181a0 <test_scan@@Base+0x1a98>
   17290:	add	r2, r0, r1
   17294:	ldr	r2, [r5, r2]
   17298:	add	r0, r2, r0
   1729c:	add	r0, r0, r1
   172a0:	mov	r1, r5
   172a4:	ldr	r4, [r1, r0]!
   172a8:	cmp	r4, #8
   172ac:	mov	r2, r4
   172b0:	add	r0, r1, #4
   172b4:	mov	r1, r8
   172b8:	movcs	r2, #8
   172bc:	bl	12f70 <strncmp@plt>
   172c0:	cmp	r0, #0
   172c4:	mov	r1, r0
   172c8:	mov	r2, #0
   172cc:	sub	r5, r5, #4
   172d0:	mvneq	r1, #0
   172d4:	cmp	r4, #8
   172d8:	movwhi	r2, #1
   172dc:	cmp	r0, #0
   172e0:	movne	r2, r1
   172e4:	cmp	r4, #8
   172e8:	movcc	r2, r1
   172ec:	cmp	r2, #0
   172f0:	bne	1724c <test_scan@@Base+0xb44>
   172f4:	cmp	r7, #2
   172f8:	bne	1739c <test_scan@@Base+0xc94>
   172fc:	cmp	r6, #3
   17300:	bcc	174f8 <test_scan@@Base+0xdf0>
   17304:	ldr	r0, [sp, #32]
   17308:	movw	r5, #17891	; 0x45e3
   1730c:	mov	r4, #2
   17310:	movt	r5, #2
   17314:	add	r7, r0, #12
   17318:	ldr	r0, [r7]
   1731c:	adds	r1, r7, r0
   17320:	beq	181ac <test_scan@@Base+0x1aa4>
   17324:	ldr	r1, [r7, r0]
   17328:	sub	r1, r0, r1
   1732c:	add	r1, r7, r1
   17330:	ldrh	r2, [r1]
   17334:	cmp	r2, #12
   17338:	bcc	181a0 <test_scan@@Base+0x1a98>
   1733c:	ldrh	r1, [r1, #10]
   17340:	cmp	r1, #0
   17344:	beq	181a0 <test_scan@@Base+0x1a98>
   17348:	add	r2, r0, r1
   1734c:	ldr	r2, [r7, r2]
   17350:	add	r0, r2, r0
   17354:	add	r0, r0, r1
   17358:	mov	r1, r5
   1735c:	add	r0, r7, r0
   17360:	add	r0, r0, #4
   17364:	bl	12e8c <strcmp@plt>
   17368:	cmp	r0, #0
   1736c:	beq	173a8 <test_scan@@Base+0xca0>
   17370:	add	r4, r4, #1
   17374:	add	r7, r7, #4
   17378:	cmp	r4, r6
   1737c:	bcc	17318 <test_scan@@Base+0xc10>
   17380:	b	174f8 <test_scan@@Base+0xdf0>
   17384:	movw	r0, #28848	; 0x70b0
   17388:	movt	r0, #2
   1738c:	b	16cb0 <test_scan@@Base+0x5a8>
   17390:	movw	r0, #28848	; 0x70b0
   17394:	movt	r0, #2
   17398:	b	16cc0 <test_scan@@Base+0x5b8>
   1739c:	movw	r0, #28816	; 0x7090
   173a0:	movt	r0, #2
   173a4:	b	16cc0 <test_scan@@Base+0x5b8>
   173a8:	cmp	r4, #2
   173ac:	bne	174f8 <test_scan@@Base+0xdf0>
   173b0:	ldr	r0, [sp, #32]
   173b4:	movw	r8, #19057	; 0x4a71
   173b8:	mov	r7, #2
   173bc:	movt	r8, #2
   173c0:	add	r5, r0, #12
   173c4:	ldr	r0, [r5]
   173c8:	adds	r1, r5, r0
   173cc:	beq	181ac <test_scan@@Base+0x1aa4>
   173d0:	ldr	r1, [r5, r0]
   173d4:	sub	r1, r0, r1
   173d8:	add	r1, r5, r1
   173dc:	ldrh	r2, [r1]
   173e0:	cmp	r2, #12
   173e4:	bcc	181a0 <test_scan@@Base+0x1a98>
   173e8:	ldrh	r1, [r1, #10]
   173ec:	cmp	r1, #0
   173f0:	beq	181a0 <test_scan@@Base+0x1a98>
   173f4:	add	r2, r0, r1
   173f8:	ldr	r2, [r5, r2]
   173fc:	add	r0, r2, r0
   17400:	add	r0, r0, r1
   17404:	mov	r1, r5
   17408:	ldr	r4, [r1, r0]!
   1740c:	cmp	r4, #8
   17410:	mov	r2, r4
   17414:	add	r0, r1, #4
   17418:	mov	r1, r8
   1741c:	movcs	r2, #8
   17420:	bl	12f70 <strncmp@plt>
   17424:	cmp	r0, #0
   17428:	mov	r1, r0
   1742c:	mov	r2, #0
   17430:	mvneq	r1, #0
   17434:	cmp	r4, #8
   17438:	movwhi	r2, #1
   1743c:	cmp	r0, #0
   17440:	movne	r2, r1
   17444:	cmp	r4, #8
   17448:	movcc	r2, r1
   1744c:	cmp	r2, #0
   17450:	beq	17468 <test_scan@@Base+0xd60>
   17454:	add	r7, r7, #1
   17458:	add	r5, r5, #4
   1745c:	cmp	r7, r6
   17460:	bcc	173c4 <test_scan@@Base+0xcbc>
   17464:	b	174f8 <test_scan@@Base+0xdf0>
   17468:	cmp	r7, #2
   1746c:	bne	174f8 <test_scan@@Base+0xdf0>
   17470:	cmp	r6, #4
   17474:	bcc	176dc <test_scan@@Base+0xfd4>
   17478:	ldr	r0, [sp, #32]
   1747c:	movw	r5, #17891	; 0x45e3
   17480:	mov	r4, #3
   17484:	movt	r5, #2
   17488:	add	r7, r0, #16
   1748c:	ldr	r0, [r7]
   17490:	adds	r1, r7, r0
   17494:	beq	181ac <test_scan@@Base+0x1aa4>
   17498:	ldr	r1, [r7, r0]
   1749c:	sub	r1, r0, r1
   174a0:	add	r1, r7, r1
   174a4:	ldrh	r2, [r1]
   174a8:	cmp	r2, #12
   174ac:	bcc	181a0 <test_scan@@Base+0x1a98>
   174b0:	ldrh	r1, [r1, #10]
   174b4:	cmp	r1, #0
   174b8:	beq	181a0 <test_scan@@Base+0x1a98>
   174bc:	add	r2, r0, r1
   174c0:	ldr	r2, [r7, r2]
   174c4:	add	r0, r2, r0
   174c8:	add	r0, r0, r1
   174cc:	mov	r1, r5
   174d0:	add	r0, r7, r0
   174d4:	add	r0, r0, #4
   174d8:	bl	12e8c <strcmp@plt>
   174dc:	cmp	r0, #0
   174e0:	beq	17504 <test_scan@@Base+0xdfc>
   174e4:	add	r4, r4, #1
   174e8:	add	r7, r7, #4
   174ec:	cmp	r4, r6
   174f0:	bcc	1748c <test_scan@@Base+0xd84>
   174f4:	b	176dc <test_scan@@Base+0xfd4>
   174f8:	movw	r0, #28768	; 0x7060
   174fc:	movt	r0, #2
   17500:	b	16cc0 <test_scan@@Base+0x5b8>
   17504:	cmp	r4, #4
   17508:	bne	176dc <test_scan@@Base+0xfd4>
   1750c:	cmp	r9, #2
   17510:	bcc	177a8 <test_scan@@Base+0x10a0>
   17514:	ldr	r0, [sp, #32]
   17518:	movw	r5, #18996	; 0x4a34
   1751c:	mov	r7, #1
   17520:	movt	r5, #2
   17524:	add	r4, r0, #12
   17528:	ldr	r0, [r4, #-4]
   1752c:	add	r1, r4, r0
   17530:	cmp	r1, #4
   17534:	beq	181ac <test_scan@@Base+0x1aa4>
   17538:	ldr	r1, [r1, #-4]
   1753c:	sub	r1, r0, r1
   17540:	add	r1, r4, r1
   17544:	ldrh	r2, [r1, #-4]
   17548:	cmp	r2, #12
   1754c:	bcc	181a0 <test_scan@@Base+0x1a98>
   17550:	ldrh	r1, [r1, #6]
   17554:	cmp	r1, #0
   17558:	beq	181a0 <test_scan@@Base+0x1a98>
   1755c:	add	r2, r0, r1
   17560:	add	r2, r4, r2
   17564:	ldr	r2, [r2, #-4]
   17568:	add	r0, r2, r0
   1756c:	add	r0, r0, r1
   17570:	mov	r1, r5
   17574:	add	r0, r4, r0
   17578:	bl	12e8c <strcmp@plt>
   1757c:	cmp	r0, #0
   17580:	beq	17788 <test_scan@@Base+0x1080>
   17584:	add	r7, r7, #1
   17588:	add	r4, r4, #4
   1758c:	cmp	r7, r9
   17590:	bcc	17528 <test_scan@@Base+0xe20>
   17594:	cmp	r9, #2
   17598:	bcc	177a8 <test_scan@@Base+0x10a0>
   1759c:	ldr	r0, [sp, #32]
   175a0:	movw	r5, #17809	; 0x4591
   175a4:	mov	r7, #1
   175a8:	movt	r5, #2
   175ac:	add	r4, r0, #12
   175b0:	ldr	r0, [r4, #-4]
   175b4:	add	r1, r4, r0
   175b8:	cmp	r1, #4
   175bc:	beq	181ac <test_scan@@Base+0x1aa4>
   175c0:	ldr	r1, [r1, #-4]
   175c4:	sub	r1, r0, r1
   175c8:	add	r1, r4, r1
   175cc:	ldrh	r2, [r1, #-4]
   175d0:	cmp	r2, #12
   175d4:	bcc	181a0 <test_scan@@Base+0x1a98>
   175d8:	ldrh	r1, [r1, #6]
   175dc:	cmp	r1, #0
   175e0:	beq	181a0 <test_scan@@Base+0x1a98>
   175e4:	add	r2, r0, r1
   175e8:	add	r2, r4, r2
   175ec:	ldr	r2, [r2, #-4]
   175f0:	add	r0, r2, r0
   175f4:	add	r0, r0, r1
   175f8:	mov	r1, r5
   175fc:	add	r0, r4, r0
   17600:	bl	12e8c <strcmp@plt>
   17604:	cmp	r0, #0
   17608:	beq	17794 <test_scan@@Base+0x108c>
   1760c:	add	r7, r7, #1
   17610:	add	r4, r4, #4
   17614:	cmp	r7, r9
   17618:	bcc	175b0 <test_scan@@Base+0xea8>
   1761c:	cmp	r9, #2
   17620:	bcc	177a8 <test_scan@@Base+0x10a0>
   17624:	ldr	r0, [sp, #32]
   17628:	movw	r4, #17851	; 0x45bb
   1762c:	mov	r5, #1
   17630:	mov	r7, #0
   17634:	movt	r4, #2
   17638:	add	r8, r0, #8
   1763c:	ldr	r0, [sp, #36]	; 0x24
   17640:	add	r0, r0, r7
   17644:	ldr	r0, [r0, #8]
   17648:	add	r1, r7, r0
   1764c:	adds	r1, r8, r1
   17650:	beq	181ac <test_scan@@Base+0x1aa4>
   17654:	ldr	r1, [sp, #36]	; 0x24
   17658:	ldr	r2, [sp, #32]
   1765c:	add	r1, r1, r0
   17660:	add	r1, r1, r7
   17664:	ldr	r1, [r1, #8]
   17668:	sub	r1, r0, r1
   1766c:	add	r1, r2, r1
   17670:	add	r1, r1, r7
   17674:	ldrh	r2, [r1, #8]
   17678:	cmp	r2, #12
   1767c:	bcc	181a0 <test_scan@@Base+0x1a98>
   17680:	ldrh	r1, [r1, #18]
   17684:	cmp	r1, #0
   17688:	beq	181a0 <test_scan@@Base+0x1a98>
   1768c:	ldr	r3, [sp, #36]	; 0x24
   17690:	add	r2, r0, r1
   17694:	add	r2, r3, r2
   17698:	add	r2, r2, r7
   1769c:	ldr	r2, [r2, #8]
   176a0:	add	r0, r2, r0
   176a4:	add	r0, r0, r1
   176a8:	ldr	r1, [sp, #32]
   176ac:	add	r0, r7, r0
   176b0:	add	r0, r1, r0
   176b4:	mov	r1, r4
   176b8:	add	r0, r0, #12
   176bc:	bl	12e8c <strcmp@plt>
   176c0:	cmp	r0, #0
   176c4:	beq	177a0 <test_scan@@Base+0x1098>
   176c8:	add	r5, r5, #1
   176cc:	add	r7, r7, #4
   176d0:	cmp	r5, r9
   176d4:	bcc	1763c <test_scan@@Base+0xf34>
   176d8:	b	177a8 <test_scan@@Base+0x10a0>
   176dc:	movw	r0, #28736	; 0x7040
   176e0:	movt	r0, #2
   176e4:	b	16cc0 <test_scan@@Base+0x5b8>
   176e8:	movw	r0, #21291	; 0x532b
   176ec:	movw	r1, #21001	; 0x5209
   176f0:	movw	r3, #21453	; 0x53cd
   176f4:	mov	r2, #235	; 0xeb
   176f8:	movt	r0, #2
   176fc:	movt	r1, #2
   17700:	movt	r3, #2
   17704:	bl	12f88 <__assert_fail@plt>
   17708:	movw	r0, #20552	; 0x5048
   1770c:	movw	r1, #20590	; 0x506e
   17710:	movw	r3, #22250	; 0x56ea
   17714:	movw	r2, #711	; 0x2c7
   17718:	movt	r0, #2
   1771c:	movt	r1, #2
   17720:	movt	r3, #2
   17724:	bl	12f88 <__assert_fail@plt>
   17728:	movw	r0, #18934	; 0x49f6
   1772c:	movw	r1, #17712	; 0x4530
   17730:	movw	r3, #19011	; 0x4a43
   17734:	movw	r2, #1305	; 0x519
   17738:	movt	r0, #2
   1773c:	movt	r1, #2
   17740:	movt	r3, #2
   17744:	bl	12f88 <__assert_fail@plt>
   17748:	movw	r0, #19045	; 0x4a65
   1774c:	movw	r1, #17712	; 0x4530
   17750:	movw	r3, #19011	; 0x4a43
   17754:	movw	r2, #1307	; 0x51b
   17758:	movt	r0, #2
   1775c:	movt	r1, #2
   17760:	movt	r3, #2
   17764:	bl	12f88 <__assert_fail@plt>
   17768:	movw	r0, #19049	; 0x4a69
   1776c:	movw	r1, #17712	; 0x4530
   17770:	movw	r3, #19011	; 0x4a43
   17774:	movw	r2, #1309	; 0x51d
   17778:	movt	r0, #2
   1777c:	movt	r1, #2
   17780:	movt	r3, #2
   17784:	bl	12f88 <__assert_fail@plt>
   17788:	movw	r0, #28688	; 0x7010
   1778c:	movt	r0, #2
   17790:	b	16cc0 <test_scan@@Base+0x5b8>
   17794:	movw	r0, #28640	; 0x6fe0
   17798:	movt	r0, #2
   1779c:	b	16cc0 <test_scan@@Base+0x5b8>
   177a0:	cmp	r7, #0
   177a4:	beq	177b4 <test_scan@@Base+0x10ac>
   177a8:	movw	r0, #28592	; 0x6fb0
   177ac:	movt	r0, #2
   177b0:	b	16cc0 <test_scan@@Base+0x5b8>
   177b4:	movw	r4, #17891	; 0x45e3
   177b8:	mov	r5, #1
   177bc:	mov	r7, #0
   177c0:	movt	r4, #2
   177c4:	ldr	r0, [sp, #36]	; 0x24
   177c8:	add	r0, r0, r7
   177cc:	ldr	r0, [r0, #8]
   177d0:	add	r1, r7, r0
   177d4:	adds	r1, r8, r1
   177d8:	beq	181ac <test_scan@@Base+0x1aa4>
   177dc:	ldr	r2, [sp, #36]	; 0x24
   177e0:	add	r1, r2, r0
   177e4:	add	r1, r1, r7
   177e8:	ldr	r1, [r1, #8]
   177ec:	sub	r1, r0, r1
   177f0:	add	r1, r2, r1
   177f4:	add	r1, r1, r7
   177f8:	ldrh	r2, [r1, #8]
   177fc:	cmp	r2, #12
   17800:	bcc	181a0 <test_scan@@Base+0x1a98>
   17804:	ldrh	r1, [r1, #18]
   17808:	cmp	r1, #0
   1780c:	beq	181a0 <test_scan@@Base+0x1a98>
   17810:	ldr	r3, [sp, #36]	; 0x24
   17814:	add	r2, r0, r1
   17818:	add	r2, r3, r2
   1781c:	add	r2, r2, r7
   17820:	ldr	r2, [r2, #8]
   17824:	add	r0, r2, r0
   17828:	add	r0, r0, r1
   1782c:	ldr	r1, [sp, #32]
   17830:	add	r0, r7, r0
   17834:	add	r0, r1, r0
   17838:	mov	r1, r4
   1783c:	add	r0, r0, #12
   17840:	bl	12e8c <strcmp@plt>
   17844:	cmp	r0, #0
   17848:	beq	17860 <test_scan@@Base+0x1158>
   1784c:	add	r5, r5, #1
   17850:	add	r7, r7, #4
   17854:	cmp	r5, r9
   17858:	bcc	177c4 <test_scan@@Base+0x10bc>
   1785c:	b	17988 <test_scan@@Base+0x1280>
   17860:	cmp	r7, #4
   17864:	bne	17988 <test_scan@@Base+0x1280>
   17868:	ldr	r0, [sp, #32]
   1786c:	movw	r5, #18904	; 0x49d8
   17870:	mov	r7, #1
   17874:	movt	r5, #2
   17878:	add	r4, r0, #12
   1787c:	ldr	r0, [r4, #-4]
   17880:	add	r1, r4, r0
   17884:	cmp	r1, #4
   17888:	beq	181ac <test_scan@@Base+0x1aa4>
   1788c:	ldr	r1, [r1, #-4]
   17890:	sub	r1, r0, r1
   17894:	add	r1, r4, r1
   17898:	ldrh	r2, [r1, #-4]
   1789c:	cmp	r2, #12
   178a0:	bcc	181a0 <test_scan@@Base+0x1a98>
   178a4:	ldrh	r1, [r1, #6]
   178a8:	cmp	r1, #0
   178ac:	beq	181a0 <test_scan@@Base+0x1a98>
   178b0:	add	r2, r0, r1
   178b4:	add	r2, r4, r2
   178b8:	ldr	r2, [r2, #-4]
   178bc:	add	r0, r2, r0
   178c0:	add	r0, r0, r1
   178c4:	mov	r1, r5
   178c8:	add	r0, r4, r0
   178cc:	bl	12e8c <strcmp@plt>
   178d0:	cmp	r0, #0
   178d4:	beq	17994 <test_scan@@Base+0x128c>
   178d8:	add	r7, r7, #1
   178dc:	add	r4, r4, #4
   178e0:	cmp	r7, r9
   178e4:	bcc	1787c <test_scan@@Base+0x1174>
   178e8:	ldr	r0, [sp, #8]
   178ec:	ldr	r1, [sp, #28]
   178f0:	movw	r5, #18996	; 0x4a34
   178f4:	mov	r7, r9
   178f8:	movt	r5, #2
   178fc:	cmn	r0, #4
   17900:	mvnls	r0, #3
   17904:	sub	r0, r1, r0, lsl #2
   17908:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1790c:	add	r4, r1, r0
   17910:	subs	r7, r7, #1
   17914:	bls	179a0 <test_scan@@Base+0x1298>
   17918:	cmp	r6, r7
   1791c:	bls	187f4 <test_scan@@Base+0x20ec>
   17920:	ldr	r0, [r4]
   17924:	adds	r1, r4, r0
   17928:	beq	181ac <test_scan@@Base+0x1aa4>
   1792c:	ldr	r1, [r4, r0]
   17930:	sub	r1, r0, r1
   17934:	add	r1, r4, r1
   17938:	ldrh	r2, [r1]
   1793c:	cmp	r2, #12
   17940:	bcc	181a0 <test_scan@@Base+0x1a98>
   17944:	ldrh	r1, [r1, #10]
   17948:	cmp	r1, #0
   1794c:	beq	181a0 <test_scan@@Base+0x1a98>
   17950:	add	r2, r0, r1
   17954:	ldr	r2, [r4, r2]
   17958:	add	r0, r2, r0
   1795c:	add	r0, r0, r1
   17960:	mov	r1, r5
   17964:	add	r0, r4, r0
   17968:	add	r0, r0, #4
   1796c:	bl	12e8c <strcmp@plt>
   17970:	sub	r4, r4, #4
   17974:	cmp	r0, #0
   17978:	bne	17910 <test_scan@@Base+0x1208>
   1797c:	movw	r0, #28448	; 0x6f20
   17980:	movt	r0, #2
   17984:	b	16cc0 <test_scan@@Base+0x5b8>
   17988:	movw	r0, #28544	; 0x6f80
   1798c:	movt	r0, #2
   17990:	b	16cc0 <test_scan@@Base+0x5b8>
   17994:	movw	r0, #28496	; 0x6f50
   17998:	movt	r0, #2
   1799c:	b	16cc0 <test_scan@@Base+0x5b8>
   179a0:	ldr	r0, [sp, #8]
   179a4:	ldr	r1, [sp, #28]
   179a8:	movw	r5, #17809	; 0x4591
   179ac:	mov	r7, r9
   179b0:	movt	r5, #2
   179b4:	cmn	r0, #4
   179b8:	mvnls	r0, #3
   179bc:	sub	r0, r1, r0, lsl #2
   179c0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   179c4:	add	r4, r1, r0
   179c8:	subs	r7, r7, #1
   179cc:	bls	17a40 <test_scan@@Base+0x1338>
   179d0:	cmp	r6, r7
   179d4:	bls	187f4 <test_scan@@Base+0x20ec>
   179d8:	ldr	r0, [r4]
   179dc:	adds	r1, r4, r0
   179e0:	beq	181ac <test_scan@@Base+0x1aa4>
   179e4:	ldr	r1, [r4, r0]
   179e8:	sub	r1, r0, r1
   179ec:	add	r1, r4, r1
   179f0:	ldrh	r2, [r1]
   179f4:	cmp	r2, #12
   179f8:	bcc	181a0 <test_scan@@Base+0x1a98>
   179fc:	ldrh	r1, [r1, #10]
   17a00:	cmp	r1, #0
   17a04:	beq	181a0 <test_scan@@Base+0x1a98>
   17a08:	add	r2, r0, r1
   17a0c:	ldr	r2, [r4, r2]
   17a10:	add	r0, r2, r0
   17a14:	add	r0, r0, r1
   17a18:	mov	r1, r5
   17a1c:	add	r0, r4, r0
   17a20:	add	r0, r0, #4
   17a24:	bl	12e8c <strcmp@plt>
   17a28:	sub	r4, r4, #4
   17a2c:	cmp	r0, #0
   17a30:	bne	179c8 <test_scan@@Base+0x12c0>
   17a34:	movw	r0, #28400	; 0x6ef0
   17a38:	movt	r0, #2
   17a3c:	b	16cc0 <test_scan@@Base+0x5b8>
   17a40:	ldr	r0, [sp, #8]
   17a44:	ldr	r1, [sp, #28]
   17a48:	ldr	r2, [fp, #-44]	; 0xffffffd4
   17a4c:	movw	r4, #17851	; 0x45bb
   17a50:	movt	r4, #2
   17a54:	cmn	r0, #4
   17a58:	mvnls	r0, #3
   17a5c:	sub	r1, r1, r0, lsl #2
   17a60:	add	r7, r2, r1
   17a64:	mvn	r1, #1
   17a68:	sub	r5, r1, r0
   17a6c:	add	r0, r5, #1
   17a70:	cmp	r0, #2
   17a74:	bcc	17ae8 <test_scan@@Base+0x13e0>
   17a78:	cmp	r6, r5
   17a7c:	bls	187f4 <test_scan@@Base+0x20ec>
   17a80:	ldr	r0, [r7]
   17a84:	adds	r1, r7, r0
   17a88:	beq	181ac <test_scan@@Base+0x1aa4>
   17a8c:	ldr	r1, [r7, r0]
   17a90:	sub	r1, r0, r1
   17a94:	add	r1, r7, r1
   17a98:	ldrh	r2, [r1]
   17a9c:	cmp	r2, #12
   17aa0:	bcc	181a0 <test_scan@@Base+0x1a98>
   17aa4:	ldrh	r1, [r1, #10]
   17aa8:	cmp	r1, #0
   17aac:	beq	181a0 <test_scan@@Base+0x1a98>
   17ab0:	add	r2, r0, r1
   17ab4:	ldr	r2, [r7, r2]
   17ab8:	add	r0, r2, r0
   17abc:	add	r0, r0, r1
   17ac0:	mov	r1, r4
   17ac4:	add	r0, r7, r0
   17ac8:	add	r0, r0, #4
   17acc:	bl	12e8c <strcmp@plt>
   17ad0:	sub	r7, r7, #4
   17ad4:	sub	r5, r5, #1
   17ad8:	cmp	r0, #0
   17adc:	bne	17a6c <test_scan@@Base+0x1364>
   17ae0:	cmp	r5, #0
   17ae4:	beq	17af4 <test_scan@@Base+0x13ec>
   17ae8:	movw	r0, #28352	; 0x6ec0
   17aec:	movt	r0, #2
   17af0:	b	16cc0 <test_scan@@Base+0x5b8>
   17af4:	ldr	r0, [sp, #8]
   17af8:	ldr	r1, [sp, #28]
   17afc:	movw	r5, #17891	; 0x45e3
   17b00:	mov	r7, r9
   17b04:	movt	r5, #2
   17b08:	cmn	r0, #4
   17b0c:	mvnls	r0, #3
   17b10:	sub	r0, r1, r0, lsl #2
   17b14:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17b18:	add	r4, r1, r0
   17b1c:	cmp	r7, #2
   17b20:	bcc	17c30 <test_scan@@Base+0x1528>
   17b24:	sub	r7, r7, #1
   17b28:	cmp	r6, r7
   17b2c:	bls	187f4 <test_scan@@Base+0x20ec>
   17b30:	ldr	r0, [r4]
   17b34:	adds	r1, r4, r0
   17b38:	beq	181ac <test_scan@@Base+0x1aa4>
   17b3c:	ldr	r1, [r4, r0]
   17b40:	sub	r1, r0, r1
   17b44:	add	r1, r4, r1
   17b48:	ldrh	r2, [r1]
   17b4c:	cmp	r2, #12
   17b50:	bcc	181a0 <test_scan@@Base+0x1a98>
   17b54:	ldrh	r1, [r1, #10]
   17b58:	cmp	r1, #0
   17b5c:	beq	181a0 <test_scan@@Base+0x1a98>
   17b60:	add	r2, r0, r1
   17b64:	ldr	r2, [r4, r2]
   17b68:	add	r0, r2, r0
   17b6c:	add	r0, r0, r1
   17b70:	mov	r1, r5
   17b74:	add	r0, r4, r0
   17b78:	add	r0, r0, #4
   17b7c:	bl	12e8c <strcmp@plt>
   17b80:	sub	r4, r4, #4
   17b84:	cmp	r0, #0
   17b88:	bne	17b1c <test_scan@@Base+0x1414>
   17b8c:	cmp	r7, #2
   17b90:	bne	17c30 <test_scan@@Base+0x1528>
   17b94:	ldr	r0, [sp, #8]
   17b98:	ldr	r1, [sp, #28]
   17b9c:	movw	r5, #18904	; 0x49d8
   17ba0:	movt	r5, #2
   17ba4:	cmn	r0, #4
   17ba8:	mvnls	r0, #3
   17bac:	sub	r0, r1, r0, lsl #2
   17bb0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17bb4:	add	r4, r1, r0
   17bb8:	subs	r9, r9, #1
   17bbc:	bls	17c3c <test_scan@@Base+0x1534>
   17bc0:	cmp	r6, r9
   17bc4:	bls	187f4 <test_scan@@Base+0x20ec>
   17bc8:	ldr	r0, [r4]
   17bcc:	cmn	r4, r0
   17bd0:	beq	181ac <test_scan@@Base+0x1aa4>
   17bd4:	ldr	r1, [r4, r0]
   17bd8:	sub	r1, r0, r1
   17bdc:	add	r1, r4, r1
   17be0:	ldrh	r2, [r1]
   17be4:	cmp	r2, #12
   17be8:	bcc	181a0 <test_scan@@Base+0x1a98>
   17bec:	ldrh	r1, [r1, #10]
   17bf0:	cmp	r1, #0
   17bf4:	beq	181a0 <test_scan@@Base+0x1a98>
   17bf8:	add	r2, r0, r1
   17bfc:	ldr	r2, [r4, r2]
   17c00:	add	r0, r2, r0
   17c04:	add	r0, r0, r1
   17c08:	mov	r1, r5
   17c0c:	add	r0, r4, r0
   17c10:	add	r0, r0, #4
   17c14:	bl	12e8c <strcmp@plt>
   17c18:	sub	r4, r4, #4
   17c1c:	cmp	r0, #0
   17c20:	bne	17bb8 <test_scan@@Base+0x14b0>
   17c24:	movw	r0, #28256	; 0x6e60
   17c28:	movt	r0, #2
   17c2c:	b	16cc0 <test_scan@@Base+0x5b8>
   17c30:	movw	r0, #28304	; 0x6e90
   17c34:	movt	r0, #2
   17c38:	b	16cc0 <test_scan@@Base+0x5b8>
   17c3c:	movw	r4, #17851	; 0x45bb
   17c40:	mov	r5, #1
   17c44:	movt	r4, #2
   17c48:	ldr	r0, [r8, #-4]
   17c4c:	add	r1, r8, r0
   17c50:	cmp	r1, #4
   17c54:	beq	181ac <test_scan@@Base+0x1aa4>
   17c58:	ldr	r1, [r1, #-4]
   17c5c:	sub	r1, r0, r1
   17c60:	add	r1, r8, r1
   17c64:	ldrh	r2, [r1, #-4]
   17c68:	cmp	r2, #12
   17c6c:	bcc	181a0 <test_scan@@Base+0x1a98>
   17c70:	ldrh	r1, [r1, #6]
   17c74:	cmp	r1, #0
   17c78:	beq	181a0 <test_scan@@Base+0x1a98>
   17c7c:	add	r2, r0, r1
   17c80:	add	r2, r8, r2
   17c84:	ldr	r2, [r2, #-4]
   17c88:	add	r0, r2, r0
   17c8c:	add	r0, r0, r1
   17c90:	mov	r1, r4
   17c94:	add	r0, r8, r0
   17c98:	bl	12e8c <strcmp@plt>
   17c9c:	cmp	r0, #0
   17ca0:	beq	17cbc <test_scan@@Base+0x15b4>
   17ca4:	add	r0, r5, #1
   17ca8:	cmp	r5, r6
   17cac:	add	r8, r8, #4
   17cb0:	mov	r5, r0
   17cb4:	bcc	17c48 <test_scan@@Base+0x1540>
   17cb8:	b	17d80 <test_scan@@Base+0x1678>
   17cbc:	cmp	r6, r5
   17cc0:	bls	17d8c <test_scan@@Base+0x1684>
   17cc4:	ldr	r0, [sp, #32]
   17cc8:	movw	r8, #17851	; 0x45bb
   17ccc:	mov	r9, #0
   17cd0:	movt	r8, #2
   17cd4:	add	r0, r0, #8
   17cd8:	str	r0, [sp, #36]	; 0x24
   17cdc:	mov	r0, #1
   17ce0:	mov	r7, r9
   17ce4:	mov	r9, r0
   17ce8:	ldr	r0, [sp, #36]	; 0x24
   17cec:	add	r4, r0, r5, lsl #2
   17cf0:	ldr	r0, [r4, #-4]
   17cf4:	add	r1, r4, r0
   17cf8:	cmp	r1, #4
   17cfc:	beq	181ac <test_scan@@Base+0x1aa4>
   17d00:	ldr	r1, [r1, #-4]
   17d04:	sub	r1, r0, r1
   17d08:	add	r1, r4, r1
   17d0c:	ldrh	r2, [r1, #-4]
   17d10:	cmp	r2, #12
   17d14:	bcc	181a0 <test_scan@@Base+0x1a98>
   17d18:	ldrh	r1, [r1, #6]
   17d1c:	cmp	r1, #0
   17d20:	beq	181a0 <test_scan@@Base+0x1a98>
   17d24:	add	r2, r0, r1
   17d28:	add	r2, r4, r2
   17d2c:	ldr	r2, [r2, #-4]
   17d30:	add	r0, r2, r0
   17d34:	add	r0, r0, r1
   17d38:	mov	r1, r8
   17d3c:	add	r0, r4, r0
   17d40:	bl	12e8c <strcmp@plt>
   17d44:	cmp	r0, #0
   17d48:	beq	17d60 <test_scan@@Base+0x1658>
   17d4c:	add	r5, r5, #1
   17d50:	add	r4, r4, #4
   17d54:	cmp	r5, r6
   17d58:	bcc	17cf0 <test_scan@@Base+0x15e8>
   17d5c:	b	17d74 <test_scan@@Base+0x166c>
   17d60:	add	r5, r5, #1
   17d64:	add	r0, r9, #1
   17d68:	cmp	r6, r5
   17d6c:	bhi	17ce0 <test_scan@@Base+0x15d8>
   17d70:	b	17d78 <test_scan@@Base+0x1670>
   17d74:	mov	r9, r7
   17d78:	cmp	r9, #0
   17d7c:	beq	17d8c <test_scan@@Base+0x1684>
   17d80:	movw	r0, #28224	; 0x6e40
   17d84:	movt	r0, #2
   17d88:	b	16cc0 <test_scan@@Base+0x5b8>
   17d8c:	ldr	r0, [sp, #32]
   17d90:	movw	r8, #18996	; 0x4a34
   17d94:	mov	r5, #1
   17d98:	movt	r8, #2
   17d9c:	add	r4, r0, #8
   17da0:	ldr	r0, [r4, #-4]
   17da4:	add	r1, r4, r0
   17da8:	cmp	r1, #4
   17dac:	beq	181ac <test_scan@@Base+0x1aa4>
   17db0:	ldr	r1, [r1, #-4]
   17db4:	sub	r1, r0, r1
   17db8:	add	r1, r4, r1
   17dbc:	ldrh	r2, [r1, #-4]
   17dc0:	cmp	r2, #12
   17dc4:	bcc	181a0 <test_scan@@Base+0x1a98>
   17dc8:	ldrh	r1, [r1, #6]
   17dcc:	cmp	r1, #0
   17dd0:	beq	181a0 <test_scan@@Base+0x1a98>
   17dd4:	add	r2, r0, r1
   17dd8:	add	r2, r4, r2
   17ddc:	ldr	r2, [r2, #-4]
   17de0:	add	r0, r2, r0
   17de4:	add	r0, r0, r1
   17de8:	mov	r1, r8
   17dec:	add	r0, r4, r0
   17df0:	bl	12e8c <strcmp@plt>
   17df4:	cmp	r0, #0
   17df8:	beq	17e98 <test_scan@@Base+0x1790>
   17dfc:	add	r0, r5, #1
   17e00:	cmp	r5, r6
   17e04:	add	r4, r4, #4
   17e08:	mov	r5, r0
   17e0c:	bcc	17da0 <test_scan@@Base+0x1698>
   17e10:	ldr	r0, [sp, #32]
   17e14:	movw	r8, #17809	; 0x4591
   17e18:	mov	r5, #1
   17e1c:	movt	r8, #2
   17e20:	add	r4, r0, #8
   17e24:	ldr	r0, [r4, #-4]
   17e28:	add	r1, r4, r0
   17e2c:	cmp	r1, #4
   17e30:	beq	181ac <test_scan@@Base+0x1aa4>
   17e34:	ldr	r1, [r1, #-4]
   17e38:	sub	r1, r0, r1
   17e3c:	add	r1, r4, r1
   17e40:	ldrh	r2, [r1, #-4]
   17e44:	cmp	r2, #12
   17e48:	bcc	181a0 <test_scan@@Base+0x1a98>
   17e4c:	ldrh	r1, [r1, #6]
   17e50:	cmp	r1, #0
   17e54:	beq	181a0 <test_scan@@Base+0x1a98>
   17e58:	add	r2, r0, r1
   17e5c:	add	r2, r4, r2
   17e60:	ldr	r2, [r2, #-4]
   17e64:	add	r0, r2, r0
   17e68:	add	r0, r0, r1
   17e6c:	mov	r1, r8
   17e70:	add	r0, r4, r0
   17e74:	bl	12e8c <strcmp@plt>
   17e78:	cmp	r0, #0
   17e7c:	beq	17f4c <test_scan@@Base+0x1844>
   17e80:	add	r0, r5, #1
   17e84:	cmp	r5, r6
   17e88:	add	r4, r4, #4
   17e8c:	mov	r5, r0
   17e90:	bcc	17e24 <test_scan@@Base+0x171c>
   17e94:	b	18010 <test_scan@@Base+0x1908>
   17e98:	cmp	r6, r5
   17e9c:	bls	17f40 <test_scan@@Base+0x1838>
   17ea0:	ldr	r0, [sp, #32]
   17ea4:	movw	r8, #18996	; 0x4a34
   17ea8:	mov	r7, #1
   17eac:	movt	r8, #2
   17eb0:	add	r9, r0, #8
   17eb4:	add	r4, r9, r5, lsl #2
   17eb8:	ldr	r0, [r4, #-4]
   17ebc:	add	r1, r4, r0
   17ec0:	cmp	r1, #4
   17ec4:	beq	181ac <test_scan@@Base+0x1aa4>
   17ec8:	ldr	r1, [r1, #-4]
   17ecc:	sub	r1, r0, r1
   17ed0:	add	r1, r4, r1
   17ed4:	ldrh	r2, [r1, #-4]
   17ed8:	cmp	r2, #12
   17edc:	bcc	181a0 <test_scan@@Base+0x1a98>
   17ee0:	ldrh	r1, [r1, #6]
   17ee4:	cmp	r1, #0
   17ee8:	beq	181a0 <test_scan@@Base+0x1a98>
   17eec:	add	r2, r0, r1
   17ef0:	add	r2, r4, r2
   17ef4:	ldr	r2, [r2, #-4]
   17ef8:	add	r0, r2, r0
   17efc:	add	r0, r0, r1
   17f00:	mov	r1, r8
   17f04:	add	r0, r4, r0
   17f08:	bl	12e8c <strcmp@plt>
   17f0c:	cmp	r0, #0
   17f10:	beq	17f28 <test_scan@@Base+0x1820>
   17f14:	add	r5, r5, #1
   17f18:	add	r4, r4, #4
   17f1c:	cmp	r5, r6
   17f20:	bcc	17eb8 <test_scan@@Base+0x17b0>
   17f24:	b	17f38 <test_scan@@Base+0x1830>
   17f28:	add	r5, r5, #1
   17f2c:	add	r7, r7, #1
   17f30:	cmp	r6, r5
   17f34:	bhi	17eb4 <test_scan@@Base+0x17ac>
   17f38:	cmp	r7, #0
   17f3c:	beq	17e10 <test_scan@@Base+0x1708>
   17f40:	movw	r0, #28192	; 0x6e20
   17f44:	movt	r0, #2
   17f48:	b	16cc0 <test_scan@@Base+0x5b8>
   17f4c:	cmp	r6, r5
   17f50:	bls	1801c <test_scan@@Base+0x1914>
   17f54:	ldr	r0, [sp, #32]
   17f58:	movw	r8, #17809	; 0x4591
   17f5c:	mov	r9, #0
   17f60:	movt	r8, #2
   17f64:	add	r0, r0, #8
   17f68:	str	r0, [sp, #36]	; 0x24
   17f6c:	mov	r0, #1
   17f70:	mov	r7, r9
   17f74:	mov	r9, r0
   17f78:	ldr	r0, [sp, #36]	; 0x24
   17f7c:	add	r4, r0, r5, lsl #2
   17f80:	ldr	r0, [r4, #-4]
   17f84:	add	r1, r4, r0
   17f88:	cmp	r1, #4
   17f8c:	beq	181ac <test_scan@@Base+0x1aa4>
   17f90:	ldr	r1, [r1, #-4]
   17f94:	sub	r1, r0, r1
   17f98:	add	r1, r4, r1
   17f9c:	ldrh	r2, [r1, #-4]
   17fa0:	cmp	r2, #12
   17fa4:	bcc	181a0 <test_scan@@Base+0x1a98>
   17fa8:	ldrh	r1, [r1, #6]
   17fac:	cmp	r1, #0
   17fb0:	beq	181a0 <test_scan@@Base+0x1a98>
   17fb4:	add	r2, r0, r1
   17fb8:	add	r2, r4, r2
   17fbc:	ldr	r2, [r2, #-4]
   17fc0:	add	r0, r2, r0
   17fc4:	add	r0, r0, r1
   17fc8:	mov	r1, r8
   17fcc:	add	r0, r4, r0
   17fd0:	bl	12e8c <strcmp@plt>
   17fd4:	cmp	r0, #0
   17fd8:	beq	17ff0 <test_scan@@Base+0x18e8>
   17fdc:	add	r5, r5, #1
   17fe0:	add	r4, r4, #4
   17fe4:	cmp	r5, r6
   17fe8:	bcc	17f80 <test_scan@@Base+0x1878>
   17fec:	b	18004 <test_scan@@Base+0x18fc>
   17ff0:	add	r5, r5, #1
   17ff4:	add	r0, r9, #1
   17ff8:	cmp	r6, r5
   17ffc:	bhi	17f70 <test_scan@@Base+0x1868>
   18000:	b	18008 <test_scan@@Base+0x1900>
   18004:	mov	r9, r7
   18008:	cmp	r9, #0
   1800c:	beq	1801c <test_scan@@Base+0x1914>
   18010:	movw	r0, #28160	; 0x6e00
   18014:	movt	r0, #2
   18018:	b	16cc0 <test_scan@@Base+0x5b8>
   1801c:	ldr	r0, [sp, #32]
   18020:	movw	r8, #17891	; 0x45e3
   18024:	mov	r5, #1
   18028:	movt	r8, #2
   1802c:	add	r4, r0, #8
   18030:	ldr	r0, [r4, #-4]
   18034:	add	r1, r4, r0
   18038:	cmp	r1, #4
   1803c:	beq	181ac <test_scan@@Base+0x1aa4>
   18040:	ldr	r1, [r1, #-4]
   18044:	sub	r1, r0, r1
   18048:	add	r1, r4, r1
   1804c:	ldrh	r2, [r1, #-4]
   18050:	cmp	r2, #12
   18054:	bcc	181a0 <test_scan@@Base+0x1a98>
   18058:	ldrh	r1, [r1, #6]
   1805c:	cmp	r1, #0
   18060:	beq	181a0 <test_scan@@Base+0x1a98>
   18064:	add	r2, r0, r1
   18068:	add	r2, r4, r2
   1806c:	ldr	r2, [r2, #-4]
   18070:	add	r0, r2, r0
   18074:	add	r0, r0, r1
   18078:	mov	r1, r8
   1807c:	add	r0, r4, r0
   18080:	bl	12e8c <strcmp@plt>
   18084:	cmp	r0, #0
   18088:	beq	180a4 <test_scan@@Base+0x199c>
   1808c:	add	r0, r5, #1
   18090:	cmp	r5, r6
   18094:	add	r4, r4, #4
   18098:	mov	r5, r0
   1809c:	bcc	18030 <test_scan@@Base+0x1928>
   180a0:	b	181cc <test_scan@@Base+0x1ac4>
   180a4:	cmp	r6, r5
   180a8:	bls	181cc <test_scan@@Base+0x1ac4>
   180ac:	ldr	r0, [sp, #32]
   180b0:	movw	r4, #17891	; 0x45e3
   180b4:	mov	r9, #1
   180b8:	movt	r4, #2
   180bc:	add	r8, r0, #8
   180c0:	add	r7, r8, r5, lsl #2
   180c4:	ldr	r0, [r7, #-4]
   180c8:	add	r1, r7, r0
   180cc:	cmp	r1, #4
   180d0:	beq	181ac <test_scan@@Base+0x1aa4>
   180d4:	ldr	r1, [r1, #-4]
   180d8:	sub	r1, r0, r1
   180dc:	add	r1, r7, r1
   180e0:	ldrh	r2, [r1, #-4]
   180e4:	cmp	r2, #12
   180e8:	bcc	181a0 <test_scan@@Base+0x1a98>
   180ec:	ldrh	r1, [r1, #6]
   180f0:	cmp	r1, #0
   180f4:	beq	181a0 <test_scan@@Base+0x1a98>
   180f8:	add	r2, r0, r1
   180fc:	add	r2, r7, r2
   18100:	ldr	r2, [r2, #-4]
   18104:	add	r0, r2, r0
   18108:	add	r0, r0, r1
   1810c:	mov	r1, r4
   18110:	add	r0, r7, r0
   18114:	bl	12e8c <strcmp@plt>
   18118:	cmp	r0, #0
   1811c:	beq	18134 <test_scan@@Base+0x1a2c>
   18120:	add	r5, r5, #1
   18124:	add	r7, r7, #4
   18128:	cmp	r5, r6
   1812c:	bcc	180c4 <test_scan@@Base+0x19bc>
   18130:	b	18144 <test_scan@@Base+0x1a3c>
   18134:	add	r5, r5, #1
   18138:	add	r9, r9, #1
   1813c:	cmp	r6, r5
   18140:	bhi	180c0 <test_scan@@Base+0x19b8>
   18144:	cmp	r9, #2
   18148:	bne	181cc <test_scan@@Base+0x1ac4>
   1814c:	ldr	r0, [sp, #20]
   18150:	ldr	r1, [sp, #16]
   18154:	ldr	r0, [r1, r0]
   18158:	cmp	r0, #0
   1815c:	beq	181e0 <test_scan@@Base+0x1ad8>
   18160:	ldr	r1, [sp, #48]	; 0x30
   18164:	ldr	r2, [sp, #20]
   18168:	mov	r7, #0
   1816c:	add	r2, r1, r2
   18170:	ldr	r1, [sp, #40]	; 0x28
   18174:	add	ip, r2, r1
   18178:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1817c:	add	r3, r1, ip
   18180:	add	r5, r3, #4
   18184:	ldrb	r4, [r5, r7]
   18188:	cmp	r4, #6
   1818c:	beq	181d8 <test_scan@@Base+0x1ad0>
   18190:	add	r7, r7, #1
   18194:	cmp	r7, r0
   18198:	bcc	18184 <test_scan@@Base+0x1a7c>
   1819c:	b	181e0 <test_scan@@Base+0x1ad8>
   181a0:	movw	r0, #21903	; 0x558f
   181a4:	movt	r0, #2
   181a8:	b	181b4 <test_scan@@Base+0x1aac>
   181ac:	movw	r0, #20552	; 0x5048
   181b0:	movt	r0, #2
   181b4:	movw	r1, #20590	; 0x506e
   181b8:	movw	r3, #21822	; 0x553e
   181bc:	movw	r2, #699	; 0x2bb
   181c0:	movt	r1, #2
   181c4:	movt	r3, #2
   181c8:	bl	12f88 <__assert_fail@plt>
   181cc:	movw	r0, #28128	; 0x6de0
   181d0:	movt	r0, #2
   181d4:	b	16cc0 <test_scan@@Base+0x5b8>
   181d8:	cmp	r7, #0
   181dc:	beq	181ec <test_scan@@Base+0x1ae4>
   181e0:	movw	r0, #28080	; 0x6db0
   181e4:	movt	r0, #2
   181e8:	b	16cc0 <test_scan@@Base+0x5b8>
   181ec:	mov	r7, #0
   181f0:	ldrb	r4, [r5, r7]
   181f4:	cmp	r4, #1
   181f8:	beq	1820c <test_scan@@Base+0x1b04>
   181fc:	add	r7, r7, #1
   18200:	cmp	r7, r0
   18204:	bcc	181f0 <test_scan@@Base+0x1ae8>
   18208:	b	18280 <test_scan@@Base+0x1b78>
   1820c:	cmp	r7, #2
   18210:	bne	18280 <test_scan@@Base+0x1b78>
   18214:	cmp	r0, #4
   18218:	bcc	18244 <test_scan@@Base+0x1b3c>
   1821c:	add	r7, r3, #7
   18220:	mov	r4, #0
   18224:	ldrb	r1, [r7, r4]
   18228:	cmp	r1, #1
   1822c:	beq	1828c <test_scan@@Base+0x1b84>
   18230:	add	r1, r4, #1
   18234:	add	r4, r4, #4
   18238:	cmp	r4, r0
   1823c:	mov	r4, r1
   18240:	bcc	18224 <test_scan@@Base+0x1b1c>
   18244:	mov	r7, #0
   18248:	ldrb	r1, [r5, r7]
   1824c:	cmp	r1, #5
   18250:	beq	18308 <test_scan@@Base+0x1c00>
   18254:	add	r7, r7, #1
   18258:	cmp	r7, r0
   1825c:	bcc	18248 <test_scan@@Base+0x1b40>
   18260:	mov	r7, #0
   18264:	ldrb	r1, [r5, r7]
   18268:	cmp	r1, #2
   1826c:	beq	18298 <test_scan@@Base+0x1b90>
   18270:	add	r7, r7, #1
   18274:	cmp	r7, r0
   18278:	bcc	18264 <test_scan@@Base+0x1b5c>
   1827c:	b	182c0 <test_scan@@Base+0x1bb8>
   18280:	movw	r0, #28032	; 0x6d80
   18284:	movt	r0, #2
   18288:	b	16cc0 <test_scan@@Base+0x5b8>
   1828c:	movw	r0, #27968	; 0x6d40
   18290:	movt	r0, #2
   18294:	b	16cc0 <test_scan@@Base+0x5b8>
   18298:	cmp	r7, #6
   1829c:	bne	182c0 <test_scan@@Base+0x1bb8>
   182a0:	mov	r7, #0
   182a4:	ldrb	r1, [r5, r7]
   182a8:	cmp	r1, #3
   182ac:	beq	182cc <test_scan@@Base+0x1bc4>
   182b0:	add	r7, r7, #1
   182b4:	cmp	r7, r0
   182b8:	bcc	182a4 <test_scan@@Base+0x1b9c>
   182bc:	b	18308 <test_scan@@Base+0x1c00>
   182c0:	movw	r0, #27856	; 0x6cd0
   182c4:	movt	r0, #2
   182c8:	b	16cc0 <test_scan@@Base+0x5b8>
   182cc:	cmp	r7, #3
   182d0:	bne	18308 <test_scan@@Base+0x1c00>
   182d4:	cmp	r0, #4
   182d8:	bcc	1831c <test_scan@@Base+0x1c14>
   182dc:	add	r7, r3, #7
   182e0:	mov	r5, #0
   182e4:	ldrb	r1, [r7, r5]
   182e8:	cmp	r1, #3
   182ec:	beq	18314 <test_scan@@Base+0x1c0c>
   182f0:	add	r1, r5, #1
   182f4:	add	r5, r5, #4
   182f8:	cmp	r5, r0
   182fc:	mov	r5, r1
   18300:	bcc	182e4 <test_scan@@Base+0x1bdc>
   18304:	b	1831c <test_scan@@Base+0x1c14>
   18308:	movw	r0, #27904	; 0x6d00
   1830c:	movt	r0, #2
   18310:	b	16cc0 <test_scan@@Base+0x5b8>
   18314:	cmp	r5, #0
   18318:	beq	18328 <test_scan@@Base+0x1c20>
   1831c:	movw	r0, #27792	; 0x6c90
   18320:	movt	r0, #2
   18324:	b	16cc0 <test_scan@@Base+0x5b8>
   18328:	cmp	r0, #5
   1832c:	bcc	18814 <test_scan@@Base+0x210c>
   18330:	add	r3, r3, #8
   18334:	mov	r7, #0
   18338:	ldrb	r1, [r3, r7]
   1833c:	cmp	r1, #3
   18340:	beq	1835c <test_scan@@Base+0x1c54>
   18344:	add	r1, r7, #1
   18348:	add	r7, r7, #5
   1834c:	cmp	r7, r0
   18350:	mov	r7, r1
   18354:	bcc	18338 <test_scan@@Base+0x1c30>
   18358:	b	18814 <test_scan@@Base+0x210c>
   1835c:	cmp	r7, #1
   18360:	bne	18814 <test_scan@@Base+0x210c>
   18364:	add	r1, r2, r0
   18368:	ldr	r2, [sp, #40]	; 0x28
   1836c:	add	r1, r1, r2
   18370:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18374:	add	r1, r2, r1
   18378:	sub	r2, r0, #1
   1837c:	add	r3, r1, #3
   18380:	cmn	r2, #1
   18384:	beq	18820 <test_scan@@Base+0x2118>
   18388:	cmp	r0, r2
   1838c:	bls	1882c <test_scan@@Base+0x2124>
   18390:	ldrb	r1, [r3], #-1
   18394:	sub	r2, r2, #1
   18398:	cmp	r1, #3
   1839c:	bne	18380 <test_scan@@Base+0x1c78>
   183a0:	cmp	r2, #4
   183a4:	bne	18820 <test_scan@@Base+0x2118>
   183a8:	mvn	r2, r0
   183ac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   183b0:	add	r1, ip, #2
   183b4:	cmn	r2, #5
   183b8:	mvnls	r2, #4
   183bc:	sub	r1, r1, r2
   183c0:	add	r1, r3, r1
   183c4:	mvn	r3, #1
   183c8:	sub	r2, r3, r2
   183cc:	add	r3, r2, #1
   183d0:	cmp	r3, #2
   183d4:	bcc	1884c <test_scan@@Base+0x2144>
   183d8:	cmp	r0, r2
   183dc:	bls	1882c <test_scan@@Base+0x2124>
   183e0:	ldrb	r3, [r1], #-1
   183e4:	sub	r2, r2, #1
   183e8:	cmp	r3, #3
   183ec:	bne	183cc <test_scan@@Base+0x1cc4>
   183f0:	cmp	r2, #2
   183f4:	bne	1884c <test_scan@@Base+0x2144>
   183f8:	ldr	r1, [sp, #24]
   183fc:	ldr	r0, [sp, #48]	; 0x30
   18400:	movw	r9, #18081	; 0x46a1
   18404:	mov	r7, #0
   18408:	mvn	r5, #0
   1840c:	movt	r9, #2
   18410:	ldr	r2, [sl, r1]
   18414:	add	r0, r1, r0
   18418:	ldr	r1, [sp, #44]	; 0x2c
   1841c:	add	r0, r0, r2, lsl #2
   18420:	str	r2, [sp, #48]	; 0x30
   18424:	add	r0, r0, r1
   18428:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1842c:	add	r0, r1, r0
   18430:	str	r0, [sp, #44]	; 0x2c
   18434:	add	r0, r0, #4
   18438:	ldr	r1, [sp, #48]	; 0x30
   1843c:	cmp	r1, r7
   18440:	beq	18478 <test_scan@@Base+0x1d70>
   18444:	ldr	r1, [sp, #48]	; 0x30
   18448:	adds	r1, r1, r5
   1844c:	bcc	18858 <test_scan@@Base+0x2150>
   18450:	mov	r4, r0
   18454:	ldr	r1, [r4, #-4]!
   18458:	add	r0, r0, r1
   1845c:	mov	r1, r9
   18460:	bl	12e8c <strcmp@plt>
   18464:	cmp	r0, #0
   18468:	sub	r5, r5, #1
   1846c:	add	r7, r7, #1
   18470:	mov	r0, r4
   18474:	bne	18438 <test_scan@@Base+0x1d30>
   18478:	ldr	r0, [sp, #44]	; 0x2c
   1847c:	movw	r9, #18081	; 0x46a1
   18480:	mov	r7, #0
   18484:	mvn	r5, #0
   18488:	movt	r9, #2
   1848c:	add	r0, r0, #4
   18490:	ldr	r1, [sp, #48]	; 0x30
   18494:	cmp	r1, r7
   18498:	beq	184d0 <test_scan@@Base+0x1dc8>
   1849c:	ldr	r1, [sp, #48]	; 0x30
   184a0:	adds	r1, r1, r5
   184a4:	bcc	18858 <test_scan@@Base+0x2150>
   184a8:	mov	r4, r0
   184ac:	ldr	r1, [r4, #-4]!
   184b0:	add	r0, r0, r1
   184b4:	mov	r1, r9
   184b8:	bl	12e8c <strcmp@plt>
   184bc:	cmp	r0, #0
   184c0:	sub	r5, r5, #1
   184c4:	add	r7, r7, #1
   184c8:	mov	r0, r4
   184cc:	bne	18490 <test_scan@@Base+0x1d88>
   184d0:	ldr	r0, [sp, #44]	; 0x2c
   184d4:	movw	sl, #18081	; 0x46a1
   184d8:	mov	r9, #0
   184dc:	movt	sl, #2
   184e0:	add	r7, r0, #4
   184e4:	ldr	r0, [sp, #48]	; 0x30
   184e8:	sub	r5, r0, #1
   184ec:	ldr	r0, [sp, #48]	; 0x30
   184f0:	adds	r0, r0, r9
   184f4:	beq	18568 <test_scan@@Base+0x1e60>
   184f8:	ldr	r1, [sp, #48]	; 0x30
   184fc:	add	r0, r5, r9
   18500:	cmp	r1, r0
   18504:	bls	18858 <test_scan@@Base+0x2150>
   18508:	ldr	r2, [sp, #44]	; 0x2c
   1850c:	ldr	r1, [r2, r9, lsl #2]
   18510:	add	r0, r7, r1
   18514:	add	r1, r2, r1
   18518:	ldr	r4, [r1, r9, lsl #2]
   1851c:	mov	r1, sl
   18520:	cmp	r4, #4
   18524:	mov	r2, r4
   18528:	movcs	r2, #4
   1852c:	bl	12f70 <strncmp@plt>
   18530:	cmp	r0, #0
   18534:	mov	r1, r0
   18538:	mov	r2, #0
   1853c:	sub	r9, r9, #1
   18540:	sub	r7, r7, #4
   18544:	mvneq	r1, #0
   18548:	cmp	r4, #4
   1854c:	movwhi	r2, #1
   18550:	cmp	r0, #0
   18554:	movne	r2, r1
   18558:	cmp	r4, #4
   1855c:	movcc	r2, r1
   18560:	cmp	r2, #0
   18564:	bne	184ec <test_scan@@Base+0x1de4>
   18568:	ldr	r0, [sp, #44]	; 0x2c
   1856c:	mov	sl, #0
   18570:	add	r7, r0, #4
   18574:	ldr	r0, [sp, #48]	; 0x30
   18578:	rsb	r9, r0, #0
   1857c:	cmp	r9, sl
   18580:	beq	185f8 <test_scan@@Base+0x1ef0>
   18584:	ldr	r1, [sp, #48]	; 0x30
   18588:	add	r0, r5, sl
   1858c:	cmp	r1, r0
   18590:	bls	18858 <test_scan@@Base+0x2150>
   18594:	ldr	r2, [sp, #44]	; 0x2c
   18598:	ldr	r1, [r2, sl, lsl #2]
   1859c:	add	r0, r7, r1
   185a0:	add	r1, r2, r1
   185a4:	ldr	r4, [r1, sl, lsl #2]
   185a8:	movw	r1, #18081	; 0x46a1
   185ac:	movt	r1, #2
   185b0:	cmp	r4, #4
   185b4:	mov	r2, r4
   185b8:	movcs	r2, #4
   185bc:	bl	12f70 <strncmp@plt>
   185c0:	cmp	r0, #0
   185c4:	mov	r1, r0
   185c8:	mov	r2, #0
   185cc:	sub	sl, sl, #1
   185d0:	sub	r7, r7, #4
   185d4:	mvneq	r1, #0
   185d8:	cmp	r4, #4
   185dc:	movwhi	r2, #1
   185e0:	cmp	r0, #0
   185e4:	movne	r2, r1
   185e8:	cmp	r4, #4
   185ec:	movcc	r2, r1
   185f0:	cmp	r2, #0
   185f4:	bne	1857c <test_scan@@Base+0x1e74>
   185f8:	ldr	r0, [sp, #32]
   185fc:	mov	r1, #0
   18600:	add	r0, r0, #12
   18604:	ldr	r2, [r0, #-8]
   18608:	add	r3, r0, r2
   1860c:	cmp	r3, #8
   18610:	beq	18880 <test_scan@@Base+0x2178>
   18614:	ldr	r3, [r3, #-8]
   18618:	sub	r3, r2, r3
   1861c:	add	r3, r0, r3
   18620:	ldrh	r7, [r3, #-8]
   18624:	cmp	r7, #10
   18628:	bcc	1864c <test_scan@@Base+0x1f44>
   1862c:	ldrh	r3, [r3]
   18630:	cmp	r3, #0
   18634:	beq	1864c <test_scan@@Base+0x1f44>
   18638:	add	r2, r2, r3
   1863c:	add	r2, r0, r2
   18640:	ldrh	r2, [r2, #-8]
   18644:	cmp	r2, #13
   18648:	beq	1865c <test_scan@@Base+0x1f54>
   1864c:	add	r1, r1, #1
   18650:	add	r0, r0, #4
   18654:	cmp	r1, r6
   18658:	bcc	18604 <test_scan@@Base+0x1efc>
   1865c:	cmp	r6, #2
   18660:	bcc	186bc <test_scan@@Base+0x1fb4>
   18664:	mov	r0, #1
   18668:	ldr	r1, [r8]
   1866c:	adds	r2, r8, r1
   18670:	beq	18880 <test_scan@@Base+0x2178>
   18674:	ldr	r2, [r8, r1]
   18678:	sub	r2, r1, r2
   1867c:	add	r2, r8, r2
   18680:	ldrh	r3, [r2]
   18684:	cmp	r3, #10
   18688:	bcc	186ac <test_scan@@Base+0x1fa4>
   1868c:	ldrh	r2, [r2, #8]
   18690:	cmp	r2, #0
   18694:	beq	186ac <test_scan@@Base+0x1fa4>
   18698:	add	r1, r1, r2
   1869c:	add	r1, r8, r1
   186a0:	ldrh	r1, [r1]
   186a4:	cmp	r1, #42	; 0x2a
   186a8:	beq	186bc <test_scan@@Base+0x1fb4>
   186ac:	add	r0, r0, #1
   186b0:	add	r8, r8, #4
   186b4:	cmp	r0, r6
   186b8:	bcc	18668 <test_scan@@Base+0x1f60>
   186bc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   186c0:	ldr	r1, [sp, #12]
   186c4:	mvn	r2, #0
   186c8:	add	r0, r0, r1
   186cc:	sub	r1, r6, #1
   186d0:	cmn	r1, #1
   186d4:	beq	18748 <test_scan@@Base+0x2040>
   186d8:	cmp	r6, r1
   186dc:	bls	187f4 <test_scan@@Base+0x20ec>
   186e0:	ldr	r7, [r0]
   186e4:	adds	r3, r0, r7
   186e8:	beq	18880 <test_scan@@Base+0x2178>
   186ec:	ldr	r3, [r0, r7]
   186f0:	sub	r3, r7, r3
   186f4:	add	r5, r0, r3
   186f8:	mov	r3, #1
   186fc:	ldrh	r4, [r5]
   18700:	cmp	r4, #10
   18704:	bcc	18738 <test_scan@@Base+0x2030>
   18708:	ldrh	r5, [r5, #8]
   1870c:	cmp	r5, #0
   18710:	beq	18738 <test_scan@@Base+0x2030>
   18714:	add	r3, r7, r5
   18718:	add	r3, r0, r3
   1871c:	ldrsh	r7, [r3]
   18720:	uxth	r5, r7
   18724:	uxtah	r3, r2, r7
   18728:	cmp	r5, #1
   1872c:	movwne	r3, #1
   18730:	cmp	r7, #1
   18734:	mvnlt	r3, #0
   18738:	sub	r0, r0, #4
   1873c:	sub	r1, r1, #1
   18740:	cmp	r3, #0
   18744:	bne	186d0 <test_scan@@Base+0x1fc8>
   18748:	ldr	r2, [sp, #8]
   1874c:	ldr	r0, [sp, #28]
   18750:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18754:	ldr	r8, [fp, #-44]	; 0xffffffd4
   18758:	mvn	ip, #41	; 0x29
   1875c:	mov	r5, #0
   18760:	cmn	r2, #3
   18764:	mvnls	r2, #2
   18768:	sub	r0, r0, r2, lsl #2
   1876c:	add	r0, r1, r0
   18770:	mvn	r1, #1
   18774:	sub	r1, r1, r2
   18778:	cmn	r1, #1
   1877c:	beq	18878 <test_scan@@Base+0x2170>
   18780:	cmp	r6, r1
   18784:	bls	187f4 <test_scan@@Base+0x20ec>
   18788:	ldr	r7, [r0]
   1878c:	cmn	r0, r7
   18790:	beq	18880 <test_scan@@Base+0x2178>
   18794:	ldr	r3, [r0, r7]
   18798:	sub	r3, r7, r3
   1879c:	add	r4, r0, r3
   187a0:	mov	r3, #1
   187a4:	ldrh	r2, [r4]
   187a8:	cmp	r2, #10
   187ac:	bcc	187e0 <test_scan@@Base+0x20d8>
   187b0:	ldrh	r4, [r4, #8]
   187b4:	cmp	r4, #0
   187b8:	beq	187e0 <test_scan@@Base+0x20d8>
   187bc:	add	r2, r7, r4
   187c0:	add	r2, r0, r2
   187c4:	ldrsh	r2, [r2]
   187c8:	uxth	r7, r2
   187cc:	uxtah	r3, ip, r2
   187d0:	cmp	r7, #42	; 0x2a
   187d4:	movwne	r3, #1
   187d8:	cmp	r2, #42	; 0x2a
   187dc:	mvnlt	r3, #0
   187e0:	sub	r0, r0, #4
   187e4:	sub	r1, r1, #1
   187e8:	cmp	r3, #0
   187ec:	bne	18778 <test_scan@@Base+0x2070>
   187f0:	b	16ccc <test_scan@@Base+0x5c4>
   187f4:	movw	r0, #22025	; 0x5609
   187f8:	movw	r1, #20590	; 0x506e
   187fc:	movw	r3, #22352	; 0x5750
   18800:	movw	r2, #693	; 0x2b5
   18804:	movt	r0, #2
   18808:	movt	r1, #2
   1880c:	movt	r3, #2
   18810:	bl	12f88 <__assert_fail@plt>
   18814:	movw	r0, #27728	; 0x6c50
   18818:	movt	r0, #2
   1881c:	b	16cc0 <test_scan@@Base+0x5b8>
   18820:	movw	r0, #27664	; 0x6c10
   18824:	movt	r0, #2
   18828:	b	16cc0 <test_scan@@Base+0x5b8>
   1882c:	movw	r0, #22025	; 0x5609
   18830:	movw	r1, #22080	; 0x5640
   18834:	movw	r3, #22184	; 0x56a8
   18838:	movw	r2, #395	; 0x18b
   1883c:	movt	r0, #2
   18840:	movt	r1, #2
   18844:	movt	r3, #2
   18848:	bl	12f88 <__assert_fail@plt>
   1884c:	movw	r0, #27600	; 0x6bd0
   18850:	movt	r0, #2
   18854:	b	16cc0 <test_scan@@Base+0x5b8>
   18858:	movw	r0, #22025	; 0x5609
   1885c:	movw	r1, #22080	; 0x5640
   18860:	movw	r3, #22451	; 0x57b3
   18864:	mov	r2, #108	; 0x6c
   18868:	movt	r0, #2
   1886c:	movt	r1, #2
   18870:	movt	r3, #2
   18874:	bl	12f88 <__assert_fail@plt>
   18878:	ldr	r8, [fp, #-44]	; 0xffffffd4
   1887c:	b	16ccc <test_scan@@Base+0x5c4>
   18880:	movw	r0, #20552	; 0x5048
   18884:	movw	r1, #20590	; 0x506e
   18888:	movw	r3, #20688	; 0x50d0
   1888c:	movw	r2, #697	; 0x2b9
   18890:	movt	r0, #2
   18894:	movt	r1, #2
   18898:	movt	r3, #2
   1889c:	bl	12f88 <__assert_fail@plt>

000188a0 <test_basic_sort@@Base>:
   188a0:	push	{r4, r5, r6, r7, fp, lr}
   188a4:	add	fp, sp, #16
   188a8:	sub	sp, sp, #24
   188ac:	mov	r4, r0
   188b0:	mov	r0, #2
   188b4:	strb	r0, [sp, #18]
   188b8:	mov	r0, #772	; 0x304
   188bc:	strh	r0, [sp, #16]
   188c0:	movw	r0, #1798	; 0x706
   188c4:	movt	r0, #769	; 0x301
   188c8:	str	r0, [sp, #12]
   188cc:	mov	r0, r4
   188d0:	bl	1dd44 <flatcc_builder_reset@@Base>
   188d4:	movw	r1, #17220	; 0x4344
   188d8:	mov	r0, r4
   188dc:	mov	r2, #0
   188e0:	mov	r3, #0
   188e4:	movt	r1, #2
   188e8:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   188ec:	cmp	r0, #0
   188f0:	bne	18900 <test_basic_sort@@Base+0x60>
   188f4:	mov	r0, r4
   188f8:	mov	r1, #36	; 0x24
   188fc:	bl	1fcbc <flatcc_builder_start_table@@Base>
   18900:	movw	r1, #17288	; 0x4388
   18904:	mov	r0, r4
   18908:	movt	r1, #2
   1890c:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   18910:	cmp	r0, #0
   18914:	beq	18930 <test_basic_sort@@Base+0x90>
   18918:	mov	r5, r0
   1891c:	mov	r0, r4
   18920:	mov	r1, #3
   18924:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   18928:	cmp	r0, #0
   1892c:	strne	r5, [r0]
   18930:	mvn	r0, #0
   18934:	mov	r1, #1
   18938:	mov	r2, #7
   1893c:	mov	r3, #1
   18940:	str	r1, [sp]
   18944:	str	r0, [sp, #4]
   18948:	add	r1, sp, #12
   1894c:	mov	r0, r4
   18950:	bl	2082c <flatcc_builder_create_vector@@Base>
   18954:	cmp	r0, #0
   18958:	beq	18974 <test_basic_sort@@Base+0xd4>
   1895c:	mov	r5, r0
   18960:	mov	r0, r4
   18964:	mov	r1, #5
   18968:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1896c:	cmp	r0, #0
   18970:	strne	r5, [r0]
   18974:	movw	r1, #25228	; 0x628c
   18978:	mov	r0, r4
   1897c:	mov	r2, #1
   18980:	movt	r1, #2
   18984:	bl	205dc <flatcc_builder_check_required@@Base>
   18988:	cmp	r0, #0
   1898c:	beq	18e9c <test_basic_sort@@Base+0x5fc>
   18990:	mov	r0, r4
   18994:	bl	2066c <flatcc_builder_end_table@@Base>
   18998:	mov	r1, r0
   1899c:	mov	r0, r4
   189a0:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   189a4:	add	r1, sp, #20
   189a8:	mov	r0, r4
   189ac:	bl	2205c <flatcc_builder_get_direct_buffer@@Base>
   189b0:	cmp	r0, #0
   189b4:	beq	18e7c <test_basic_sort@@Base+0x5dc>
   189b8:	ldr	r1, [r0, #4]
   189bc:	movw	r2, #20301	; 0x4f4d
   189c0:	movt	r2, #21326	; 0x534e
   189c4:	cmp	r1, r2
   189c8:	bne	18e7c <test_basic_sort@@Base+0x5dc>
   189cc:	ldr	r1, [r0]
   189d0:	ldr	r2, [r0, r1]!
   189d4:	mov	r1, r0
   189d8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   189dc:	cmp	r2, #15
   189e0:	bls	189fc <test_basic_sort@@Base+0x15c>
   189e4:	ldrh	r1, [r1, #14]
   189e8:	cmp	r1, #0
   189ec:	ldrne	r1, [r0, r1]!
   189f0:	ldrne	r3, [r0, r1]!
   189f4:	cmpne	r3, #0
   189f8:	bne	18a1c <test_basic_sort@@Base+0x17c>
   189fc:	movw	r0, #19068	; 0x4a7c
   18a00:	movw	r1, #17712	; 0x4530
   18a04:	movw	r3, #19114	; 0x4aaa
   18a08:	mov	r2, #1552	; 0x610
   18a0c:	movt	r0, #2
   18a10:	movt	r1, #2
   18a14:	movt	r3, #2
   18a18:	bl	12f88 <__assert_fail@plt>
   18a1c:	bic	r5, r3, #1
   18a20:	sub	r7, r3, #1
   18a24:	add	r0, r0, #4
   18a28:	lsr	lr, r3, #1
   18a2c:	cmp	r5, r7
   18a30:	bhi	18b24 <test_basic_sort@@Base+0x284>
   18a34:	mov	ip, lr
   18a38:	cmp	r5, r7
   18a3c:	bcs	18a78 <test_basic_sort@@Base+0x1d8>
   18a40:	b	18a58 <test_basic_sort@@Base+0x1b8>
   18a44:	ldr	r3, [r0, #-4]
   18a48:	lsl	r5, r4, #1
   18a4c:	mov	ip, r4
   18a50:	cmp	r5, r7
   18a54:	bcs	18a78 <test_basic_sort@@Base+0x1d8>
   18a58:	cmp	r3, r5
   18a5c:	orrhi	r2, r5, #1
   18a60:	cmphi	r3, r2
   18a64:	bls	18e44 <test_basic_sort@@Base+0x5a4>
   18a68:	ldrb	r4, [r0, r2]
   18a6c:	ldrb	r6, [r0, r5]
   18a70:	cmp	r6, r4
   18a74:	movcc	r5, r2
   18a78:	mov	r4, r5
   18a7c:	cmp	r3, ip
   18a80:	cmphi	r3, r4
   18a84:	bls	18e44 <test_basic_sort@@Base+0x5a4>
   18a88:	ldrb	r2, [r0, ip]
   18a8c:	ldrb	r3, [r0, r4]
   18a90:	cmp	r2, r3
   18a94:	bcs	18b24 <test_basic_sort@@Base+0x284>
   18a98:	cmp	r7, r4, lsl #1
   18a9c:	strb	r2, [r0, r4]
   18aa0:	strb	r3, [r0, ip]
   18aa4:	bcs	18a44 <test_basic_sort@@Base+0x1a4>
   18aa8:	b	18b24 <test_basic_sort@@Base+0x284>
   18aac:	sub	lr, lr, #1
   18ab0:	cmp	r7, lr, lsl #1
   18ab4:	bcc	18b24 <test_basic_sort@@Base+0x284>
   18ab8:	lsl	r2, lr, #1
   18abc:	mov	r3, lr
   18ac0:	ldr	r4, [r0, #-4]
   18ac4:	cmp	r2, r7
   18ac8:	bcs	18aec <test_basic_sort@@Base+0x24c>
   18acc:	cmp	r4, r2
   18ad0:	orrhi	r5, r2, #1
   18ad4:	cmphi	r4, r5
   18ad8:	bls	18e44 <test_basic_sort@@Base+0x5a4>
   18adc:	ldrb	r6, [r0, r5]
   18ae0:	ldrb	r1, [r0, r2]
   18ae4:	cmp	r1, r6
   18ae8:	movcc	r2, r5
   18aec:	mov	r5, r2
   18af0:	cmp	r4, r3
   18af4:	cmphi	r4, r5
   18af8:	bls	18e44 <test_basic_sort@@Base+0x5a4>
   18afc:	ldrb	r2, [r0, r3]
   18b00:	ldrb	r4, [r0, r5]
   18b04:	cmp	r2, r4
   18b08:	bcs	18b24 <test_basic_sort@@Base+0x284>
   18b0c:	strb	r2, [r0, r5]
   18b10:	strb	r4, [r0, r3]
   18b14:	lsl	r2, r5, #1
   18b18:	cmp	r7, r5, lsl #1
   18b1c:	mov	r3, r5
   18b20:	bcs	18ac0 <test_basic_sort@@Base+0x220>
   18b24:	cmp	lr, #0
   18b28:	bne	18aac <test_basic_sort@@Base+0x20c>
   18b2c:	b	18bb0 <test_basic_sort@@Base+0x310>
   18b30:	ldrb	r2, [r0]
   18b34:	ldrb	r1, [r0, r7]
   18b38:	mov	r4, #0
   18b3c:	strb	r2, [r0, r7]
   18b40:	sub	r7, r7, #1
   18b44:	mov	r2, #0
   18b48:	strb	r1, [r0]
   18b4c:	ldr	r5, [r0, #-4]
   18b50:	cmp	r4, r7
   18b54:	bcs	18b78 <test_basic_sort@@Base+0x2d8>
   18b58:	cmp	r5, r4
   18b5c:	orrhi	r3, r4, #1
   18b60:	cmphi	r5, r3
   18b64:	bls	18e44 <test_basic_sort@@Base+0x5a4>
   18b68:	ldrb	r1, [r0, r3]
   18b6c:	ldrb	r6, [r0, r4]
   18b70:	cmp	r6, r1
   18b74:	movcc	r4, r3
   18b78:	mov	r3, r4
   18b7c:	cmp	r5, r2
   18b80:	cmphi	r5, r3
   18b84:	bls	18e44 <test_basic_sort@@Base+0x5a4>
   18b88:	ldrb	r5, [r0, r2]
   18b8c:	ldrb	r4, [r0, r3]
   18b90:	cmp	r5, r4
   18b94:	bcs	18bb0 <test_basic_sort@@Base+0x310>
   18b98:	strb	r5, [r0, r3]
   18b9c:	strb	r4, [r0, r2]
   18ba0:	lsl	r4, r3, #1
   18ba4:	cmp	r7, r3, lsl #1
   18ba8:	mov	r2, r3
   18bac:	bcs	18b4c <test_basic_sort@@Base+0x2ac>
   18bb0:	cmp	r7, #0
   18bb4:	bne	18b30 <test_basic_sort@@Base+0x290>
   18bb8:	ldr	r1, [r0, #-4]
   18bbc:	cmp	r1, #7
   18bc0:	bne	189fc <test_basic_sort@@Base+0x15c>
   18bc4:	ldrb	r1, [r0]
   18bc8:	cmp	r1, #1
   18bcc:	bne	18e64 <test_basic_sort@@Base+0x5c4>
   18bd0:	mov	r2, #0
   18bd4:	mov	r3, #6
   18bd8:	sub	r7, r3, r2
   18bdc:	add	r5, r2, r7, lsr #1
   18be0:	cmp	r5, #7
   18be4:	bcs	18e44 <test_basic_sort@@Base+0x5a4>
   18be8:	ldrb	r7, [r0, r5]
   18bec:	cmp	r7, r1
   18bf0:	movcs	r3, r5
   18bf4:	addcc	r2, r5, #1
   18bf8:	cmp	r3, r2
   18bfc:	bhi	18bd8 <test_basic_sort@@Base+0x338>
   18c00:	bne	18c74 <test_basic_sort@@Base+0x3d4>
   18c04:	cmp	r2, #7
   18c08:	bcs	18e44 <test_basic_sort@@Base+0x5a4>
   18c0c:	ldrb	r3, [r0, r2]
   18c10:	cmp	r3, r1
   18c14:	cmpeq	r2, #0
   18c18:	bne	18c74 <test_basic_sort@@Base+0x3d4>
   18c1c:	ldrb	r1, [r0, #1]
   18c20:	cmp	r1, #2
   18c24:	bne	18e64 <test_basic_sort@@Base+0x5c4>
   18c28:	mov	r2, #0
   18c2c:	mov	r3, #6
   18c30:	sub	r7, r3, r2
   18c34:	add	r5, r2, r7, lsr #1
   18c38:	cmp	r5, #6
   18c3c:	bhi	18e44 <test_basic_sort@@Base+0x5a4>
   18c40:	ldrb	r7, [r0, r5]
   18c44:	cmp	r7, r1
   18c48:	movcs	r3, r5
   18c4c:	addcc	r2, r5, #1
   18c50:	cmp	r3, r2
   18c54:	bhi	18c30 <test_basic_sort@@Base+0x390>
   18c58:	bne	18c74 <test_basic_sort@@Base+0x3d4>
   18c5c:	cmp	r2, #6
   18c60:	bhi	18e44 <test_basic_sort@@Base+0x5a4>
   18c64:	ldrb	r3, [r0, r2]
   18c68:	cmp	r3, r1
   18c6c:	cmpeq	r2, #1
   18c70:	beq	18c80 <test_basic_sort@@Base+0x3e0>
   18c74:	movw	r0, #29104	; 0x71b0
   18c78:	movt	r0, #2
   18c7c:	b	18e6c <test_basic_sort@@Base+0x5cc>
   18c80:	ldrb	r1, [r0, #2]
   18c84:	cmp	r1, #3
   18c88:	bne	18e64 <test_basic_sort@@Base+0x5c4>
   18c8c:	mov	r2, #0
   18c90:	mov	r3, #6
   18c94:	sub	r7, r3, r2
   18c98:	add	r5, r2, r7, lsr #1
   18c9c:	cmp	r5, #6
   18ca0:	bhi	18e44 <test_basic_sort@@Base+0x5a4>
   18ca4:	ldrb	r7, [r0, r5]
   18ca8:	cmp	r7, r1
   18cac:	movcs	r3, r5
   18cb0:	addcc	r2, r5, #1
   18cb4:	cmp	r3, r2
   18cb8:	bhi	18c94 <test_basic_sort@@Base+0x3f4>
   18cbc:	bne	18c74 <test_basic_sort@@Base+0x3d4>
   18cc0:	cmp	r2, #6
   18cc4:	bhi	18e44 <test_basic_sort@@Base+0x5a4>
   18cc8:	ldrb	r3, [r0, r2]
   18ccc:	cmp	r3, r1
   18cd0:	cmpeq	r2, #2
   18cd4:	bne	18c74 <test_basic_sort@@Base+0x3d4>
   18cd8:	ldrb	r1, [r0, #3]
   18cdc:	cmp	r1, #3
   18ce0:	bne	18e64 <test_basic_sort@@Base+0x5c4>
   18ce4:	mov	r2, #0
   18ce8:	mov	r3, #6
   18cec:	sub	r7, r3, r2
   18cf0:	add	r5, r2, r7, lsr #1
   18cf4:	cmp	r5, #6
   18cf8:	bhi	18e44 <test_basic_sort@@Base+0x5a4>
   18cfc:	ldrb	r7, [r0, r5]
   18d00:	cmp	r7, r1
   18d04:	movcs	r3, r5
   18d08:	addcc	r2, r5, #1
   18d0c:	cmp	r3, r2
   18d10:	bhi	18cec <test_basic_sort@@Base+0x44c>
   18d14:	bne	18c74 <test_basic_sort@@Base+0x3d4>
   18d18:	cmp	r2, #6
   18d1c:	bhi	18e44 <test_basic_sort@@Base+0x5a4>
   18d20:	ldrb	r3, [r0, r2]
   18d24:	cmp	r3, r1
   18d28:	cmpeq	r2, #2
   18d2c:	bne	18c74 <test_basic_sort@@Base+0x3d4>
   18d30:	ldrb	r1, [r0, #4]
   18d34:	cmp	r1, #4
   18d38:	bne	18e64 <test_basic_sort@@Base+0x5c4>
   18d3c:	mov	r2, #0
   18d40:	mov	r3, #6
   18d44:	sub	r7, r3, r2
   18d48:	add	r5, r2, r7, lsr #1
   18d4c:	cmp	r5, #6
   18d50:	bhi	18e44 <test_basic_sort@@Base+0x5a4>
   18d54:	ldrb	r7, [r0, r5]
   18d58:	cmp	r7, r1
   18d5c:	movcs	r3, r5
   18d60:	addcc	r2, r5, #1
   18d64:	cmp	r3, r2
   18d68:	bhi	18d44 <test_basic_sort@@Base+0x4a4>
   18d6c:	bne	18c74 <test_basic_sort@@Base+0x3d4>
   18d70:	cmp	r2, #6
   18d74:	bhi	18e44 <test_basic_sort@@Base+0x5a4>
   18d78:	ldrb	r3, [r0, r2]
   18d7c:	cmp	r3, r1
   18d80:	cmpeq	r2, #4
   18d84:	bne	18c74 <test_basic_sort@@Base+0x3d4>
   18d88:	ldrb	r1, [r0, #5]
   18d8c:	cmp	r1, #6
   18d90:	bne	18e64 <test_basic_sort@@Base+0x5c4>
   18d94:	mov	r2, #0
   18d98:	mov	r3, #6
   18d9c:	sub	r7, r3, r2
   18da0:	add	r5, r2, r7, lsr #1
   18da4:	cmp	r5, #6
   18da8:	bhi	18e44 <test_basic_sort@@Base+0x5a4>
   18dac:	ldrb	r7, [r0, r5]
   18db0:	cmp	r7, r1
   18db4:	movcs	r3, r5
   18db8:	addcc	r2, r5, #1
   18dbc:	cmp	r3, r2
   18dc0:	bhi	18d9c <test_basic_sort@@Base+0x4fc>
   18dc4:	bne	18c74 <test_basic_sort@@Base+0x3d4>
   18dc8:	cmp	r2, #6
   18dcc:	bhi	18e44 <test_basic_sort@@Base+0x5a4>
   18dd0:	ldrb	r3, [r0, r2]
   18dd4:	cmp	r3, r1
   18dd8:	cmpeq	r2, #5
   18ddc:	bne	18c74 <test_basic_sort@@Base+0x3d4>
   18de0:	ldrb	r1, [r0, #6]
   18de4:	cmp	r1, #7
   18de8:	bne	18e64 <test_basic_sort@@Base+0x5c4>
   18dec:	mov	r2, #0
   18df0:	mov	r3, #6
   18df4:	sub	r7, r3, r2
   18df8:	add	r5, r2, r7, lsr #1
   18dfc:	cmp	r5, #6
   18e00:	bhi	18e44 <test_basic_sort@@Base+0x5a4>
   18e04:	ldrb	r7, [r0, r5]
   18e08:	cmp	r7, r1
   18e0c:	movcs	r3, r5
   18e10:	addcc	r2, r5, #1
   18e14:	cmp	r3, r2
   18e18:	bhi	18df4 <test_basic_sort@@Base+0x554>
   18e1c:	bne	18c74 <test_basic_sort@@Base+0x3d4>
   18e20:	cmp	r2, #6
   18e24:	bhi	18e44 <test_basic_sort@@Base+0x5a4>
   18e28:	ldrb	r0, [r0, r2]
   18e2c:	cmp	r0, r1
   18e30:	bne	18c74 <test_basic_sort@@Base+0x3d4>
   18e34:	mov	r0, #0
   18e38:	cmp	r2, #6
   18e3c:	beq	18e74 <test_basic_sort@@Base+0x5d4>
   18e40:	b	18c74 <test_basic_sort@@Base+0x3d4>
   18e44:	movw	r0, #22025	; 0x5609
   18e48:	movw	r1, #22080	; 0x5640
   18e4c:	movw	r3, #22184	; 0x56a8
   18e50:	movw	r2, #395	; 0x18b
   18e54:	movt	r0, #2
   18e58:	movt	r1, #2
   18e5c:	movt	r3, #2
   18e60:	bl	12f88 <__assert_fail@plt>
   18e64:	movw	r0, #29136	; 0x71d0
   18e68:	movt	r0, #2
   18e6c:	bl	12eec <puts@plt>
   18e70:	mvn	r0, #0
   18e74:	sub	sp, fp, #16
   18e78:	pop	{r4, r5, r6, r7, fp, pc}
   18e7c:	movw	r0, #20552	; 0x5048
   18e80:	movw	r1, #20590	; 0x506e
   18e84:	movw	r3, #21936	; 0x55b0
   18e88:	movw	r2, #706	; 0x2c2
   18e8c:	movt	r0, #2
   18e90:	movt	r1, #2
   18e94:	movt	r3, #2
   18e98:	bl	12f88 <__assert_fail@plt>
   18e9c:	movw	r0, #21291	; 0x532b
   18ea0:	movw	r1, #21001	; 0x5209
   18ea4:	movw	r3, #21453	; 0x53cd
   18ea8:	mov	r2, #235	; 0xeb
   18eac:	movt	r0, #2
   18eb0:	movt	r1, #2
   18eb4:	movt	r3, #2
   18eb8:	bl	12f88 <__assert_fail@plt>

00018ebc <test_clone_slice@@Base>:
   18ebc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ec0:	add	fp, sp, #28
   18ec4:	sub	sp, sp, #36	; 0x24
   18ec8:	mov	r5, r0
   18ecc:	mov	r0, #0
   18ed0:	strb	r0, [sp, #30]
   18ed4:	mov	r0, #1
   18ed8:	strh	r0, [sp, #28]
   18edc:	mov	r0, #256	; 0x100
   18ee0:	str	r0, [sp, #24]
   18ee4:	mov	r0, r5
   18ee8:	bl	1dd44 <flatcc_builder_reset@@Base>
   18eec:	movw	r1, #17220	; 0x4344
   18ef0:	mov	r0, r5
   18ef4:	mov	r2, #0
   18ef8:	mov	r3, #0
   18efc:	movt	r1, #2
   18f00:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   18f04:	cmp	r0, #0
   18f08:	bne	18f18 <test_clone_slice@@Base+0x5c>
   18f0c:	mov	r0, r5
   18f10:	mov	r1, #36	; 0x24
   18f14:	bl	1fcbc <flatcc_builder_start_table@@Base>
   18f18:	movw	r1, #19154	; 0x4ad2
   18f1c:	mov	r0, r5
   18f20:	movt	r1, #2
   18f24:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   18f28:	cmp	r0, #0
   18f2c:	beq	18f48 <test_clone_slice@@Base+0x8c>
   18f30:	mov	r4, r0
   18f34:	mov	r0, r5
   18f38:	mov	r1, #3
   18f3c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   18f40:	cmp	r0, #0
   18f44:	strne	r4, [r0]
   18f48:	mvn	r0, #0
   18f4c:	mov	r1, #1
   18f50:	mov	r2, #7
   18f54:	mov	r3, #1
   18f58:	str	r1, [sp]
   18f5c:	str	r0, [sp, #4]
   18f60:	add	r1, sp, #24
   18f64:	mov	r0, r5
   18f68:	bl	2082c <flatcc_builder_create_vector@@Base>
   18f6c:	cmp	r0, #0
   18f70:	beq	18f8c <test_clone_slice@@Base+0xd0>
   18f74:	mov	r4, r0
   18f78:	mov	r0, r5
   18f7c:	mov	r1, #24
   18f80:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   18f84:	cmp	r0, #0
   18f88:	strne	r4, [r0]
   18f8c:	mov	r0, r5
   18f90:	mov	r1, #4
   18f94:	mov	r2, #2
   18f98:	mvn	r3, #-1073741824	; 0xc0000000
   18f9c:	bl	1f704 <flatcc_builder_start_vector@@Base>
   18fa0:	mov	r0, r5
   18fa4:	mov	r1, #2
   18fa8:	bl	1ebb0 <flatcc_builder_extend_vector@@Base>
   18fac:	mov	r1, #22
   18fb0:	strh	r1, [r0]
   18fb4:	mov	r1, #44	; 0x2c
   18fb8:	strh	r1, [r0, #4]
   18fbc:	mov	r0, r5
   18fc0:	bl	20984 <flatcc_builder_end_vector@@Base>
   18fc4:	cmp	r0, #0
   18fc8:	beq	18fe4 <test_clone_slice@@Base+0x128>
   18fcc:	mov	r4, r0
   18fd0:	mov	r0, r5
   18fd4:	mov	r1, #9
   18fd8:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   18fdc:	cmp	r0, #0
   18fe0:	strne	r4, [r0]
   18fe4:	mov	r0, r5
   18fe8:	mov	r1, #0
   18fec:	mov	r2, #32
   18ff0:	mov	r3, #16
   18ff4:	mov	r8, #0
   18ff8:	bl	2102c <flatcc_builder_table_add@@Base>
   18ffc:	movw	r1, #13107	; 0x3333
   19000:	mov	r2, #1
   19004:	movt	r1, #49705	; 0xc229
   19008:	str	r1, [r0]
   1900c:	movw	r1, #25228	; 0x628c
   19010:	mov	r0, r5
   19014:	movt	r1, #2
   19018:	bl	205dc <flatcc_builder_check_required@@Base>
   1901c:	cmp	r0, #0
   19020:	beq	1986c <test_clone_slice@@Base+0x9b0>
   19024:	mov	r0, r5
   19028:	bl	2066c <flatcc_builder_end_table@@Base>
   1902c:	mov	r1, r0
   19030:	mov	r0, r5
   19034:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   19038:	add	r1, sp, #32
   1903c:	mov	r0, r5
   19040:	bl	221c4 <flatcc_builder_finalize_aligned_buffer@@Base>
   19044:	mov	r4, r0
   19048:	movw	r0, #41072	; 0xa070
   1904c:	ldr	r2, [sp, #32]
   19050:	movt	r0, #3
   19054:	mov	r1, r4
   19058:	ldr	r3, [r0]
   1905c:	movw	r0, #19165	; 0x4add
   19060:	movt	r0, #2
   19064:	bl	13674 <test_type_aliases@@Base+0x51c>
   19068:	movw	r1, #20301	; 0x4f4d
   1906c:	cmp	r4, #0
   19070:	movt	r1, #21326	; 0x534e
   19074:	beq	19088 <test_clone_slice@@Base+0x1cc>
   19078:	ldr	r0, [r4, #4]
   1907c:	cmp	r0, r1
   19080:	ldreq	r0, [r4]
   19084:	addeq	r8, r4, r0
   19088:	mov	r0, r5
   1908c:	bl	1dd44 <flatcc_builder_reset@@Base>
   19090:	movw	r1, #17220	; 0x4344
   19094:	mov	r0, r5
   19098:	mov	r2, #0
   1909c:	mov	r3, #0
   190a0:	movt	r1, #2
   190a4:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   190a8:	cmp	r0, #0
   190ac:	bne	190bc <test_clone_slice@@Base+0x200>
   190b0:	mov	r0, r5
   190b4:	mov	r1, #36	; 0x24
   190b8:	bl	1fcbc <flatcc_builder_start_table@@Base>
   190bc:	cmp	r8, #0
   190c0:	beq	1988c <test_clone_slice@@Base+0x9d0>
   190c4:	ldr	r1, [r8]
   190c8:	mov	r0, r8
   190cc:	ldrh	r2, [r0, -r1]!
   190d0:	cmp	r2, #12
   190d4:	bcc	19860 <test_clone_slice@@Base+0x9a4>
   190d8:	ldrh	r1, [r0, #10]
   190dc:	cmp	r1, #0
   190e0:	beq	19860 <test_clone_slice@@Base+0x9a4>
   190e4:	cmp	r2, #54	; 0x36
   190e8:	bcc	198ac <test_clone_slice@@Base+0x9f0>
   190ec:	ldrh	r2, [r0, #52]	; 0x34
   190f0:	cmp	r2, #0
   190f4:	beq	198ac <test_clone_slice@@Base+0x9f0>
   190f8:	ldrh	r0, [r0, #22]
   190fc:	str	r4, [sp, #20]
   19100:	cmp	r0, #0
   19104:	beq	198cc <test_clone_slice@@Base+0xa10>
   19108:	mov	r3, r8
   1910c:	mov	sl, r8
   19110:	str	r8, [sp, #16]
   19114:	ldr	r0, [r8, r0]!
   19118:	ldr	r1, [r3, r1]!
   1911c:	ldr	r9, [sl, r2]!
   19120:	str	r0, [sp, #12]
   19124:	mov	r0, r5
   19128:	add	r1, r3, r1
   1912c:	add	r6, r1, #4
   19130:	ldr	r2, [r6, #-4]
   19134:	mov	r1, r6
   19138:	bl	21c68 <flatcc_builder_create_string@@Base>
   1913c:	cmp	r0, #0
   19140:	beq	1915c <test_clone_slice@@Base+0x2a0>
   19144:	mov	r4, r0
   19148:	mov	r0, r5
   1914c:	mov	r1, #3
   19150:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   19154:	cmp	r0, #0
   19158:	strne	r4, [r0]
   1915c:	mov	r0, r5
   19160:	bl	1f790 <flatcc_builder_start_offset_vector@@Base>
   19164:	ldr	r2, [r6, #-4]
   19168:	mov	r0, r5
   1916c:	mov	r1, r6
   19170:	bl	21c68 <flatcc_builder_create_string@@Base>
   19174:	cmp	r0, #0
   19178:	beq	19188 <test_clone_slice@@Base+0x2cc>
   1917c:	mov	r1, r0
   19180:	mov	r0, r5
   19184:	bl	1f038 <flatcc_builder_offset_vector_push@@Base>
   19188:	ldr	r0, [r6, #-4]
   1918c:	cmp	r0, #4
   19190:	mov	r2, r0
   19194:	movcs	r2, #4
   19198:	add	r1, r6, r2
   1919c:	sub	r2, r0, r2
   191a0:	mov	r0, r5
   191a4:	cmp	r2, #20
   191a8:	movcs	r2, #20
   191ac:	bl	21c68 <flatcc_builder_create_string@@Base>
   191b0:	cmp	r0, #0
   191b4:	beq	191c4 <test_clone_slice@@Base+0x308>
   191b8:	mov	r1, r0
   191bc:	mov	r0, r5
   191c0:	bl	1f038 <flatcc_builder_offset_vector_push@@Base>
   191c4:	ldr	r2, [r6, #-4]
   191c8:	mov	r0, r5
   191cc:	mov	r1, r6
   191d0:	cmp	r2, #3
   191d4:	movcs	r2, #3
   191d8:	bl	21c68 <flatcc_builder_create_string@@Base>
   191dc:	cmp	r0, #0
   191e0:	beq	191f0 <test_clone_slice@@Base+0x334>
   191e4:	mov	r1, r0
   191e8:	mov	r0, r5
   191ec:	bl	1f038 <flatcc_builder_offset_vector_push@@Base>
   191f0:	mov	r0, r5
   191f4:	add	r7, sl, r9
   191f8:	bl	1fa48 <flatcc_builder_end_offset_vector@@Base>
   191fc:	cmp	r0, #0
   19200:	beq	1921c <test_clone_slice@@Base+0x360>
   19204:	mov	r4, r0
   19208:	mov	r0, r5
   1920c:	mov	r1, #10
   19210:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   19214:	cmp	r0, #0
   19218:	strne	r4, [r0]
   1921c:	ldr	r0, [sp, #12]
   19220:	mov	r1, #36	; 0x24
   19224:	add	sl, r7, #4
   19228:	add	r8, r8, r0
   1922c:	mov	r0, r5
   19230:	bl	1fcbc <flatcc_builder_start_table@@Base>
   19234:	ldr	r0, [r6, #-4]
   19238:	cmp	r0, #2
   1923c:	mov	r2, r0
   19240:	movcs	r2, #2
   19244:	add	r1, r6, r2
   19248:	sub	r2, r0, r2
   1924c:	mov	r0, r5
   19250:	cmp	r2, #20
   19254:	movcs	r2, #20
   19258:	bl	21c68 <flatcc_builder_create_string@@Base>
   1925c:	cmp	r0, #0
   19260:	beq	1927c <test_clone_slice@@Base+0x3c0>
   19264:	mov	r4, r0
   19268:	mov	r0, r5
   1926c:	mov	r1, #3
   19270:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   19274:	cmp	r0, #0
   19278:	strne	r4, [r0]
   1927c:	ldr	r2, [sl, #-4]
   19280:	mvn	r0, #0
   19284:	mov	r1, #1
   19288:	mov	r3, #1
   1928c:	add	r9, r8, #4
   19290:	str	r1, [sp]
   19294:	str	r0, [sp, #4]
   19298:	mov	r0, r5
   1929c:	mov	r1, sl
   192a0:	bl	2082c <flatcc_builder_create_vector@@Base>
   192a4:	cmp	r0, #0
   192a8:	beq	192c4 <test_clone_slice@@Base+0x408>
   192ac:	mov	r4, r0
   192b0:	mov	r0, r5
   192b4:	mov	r1, #24
   192b8:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   192bc:	cmp	r0, #0
   192c0:	strne	r4, [r0]
   192c4:	ldr	r0, [r9, #-4]
   192c8:	mvn	r1, #-1073741824	; 0xc0000000
   192cc:	mov	r2, #2
   192d0:	str	r2, [sp]
   192d4:	str	r1, [sp, #4]
   192d8:	cmp	r0, #0
   192dc:	mov	r3, r0
   192e0:	movwne	r3, #1
   192e4:	sub	r0, r0, r3
   192e8:	add	r1, r9, r3, lsl #2
   192ec:	mov	r3, #4
   192f0:	cmp	r0, #2
   192f4:	movcc	r2, r0
   192f8:	mov	r0, r5
   192fc:	bl	2082c <flatcc_builder_create_vector@@Base>
   19300:	ldr	r7, [sp, #16]
   19304:	cmp	r0, #0
   19308:	beq	19324 <test_clone_slice@@Base+0x468>
   1930c:	mov	r4, r0
   19310:	mov	r0, r5
   19314:	mov	r1, #9
   19318:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1931c:	cmp	r0, #0
   19320:	strne	r4, [r0]
   19324:	movw	r1, #25228	; 0x628c
   19328:	mov	r0, r5
   1932c:	mov	r2, #1
   19330:	movt	r1, #2
   19334:	bl	205dc <flatcc_builder_check_required@@Base>
   19338:	cmp	r0, #0
   1933c:	beq	1986c <test_clone_slice@@Base+0x9b0>
   19340:	mov	r0, r5
   19344:	bl	2066c <flatcc_builder_end_table@@Base>
   19348:	cmp	r0, #0
   1934c:	beq	19390 <test_clone_slice@@Base+0x4d4>
   19350:	mov	r4, r0
   19354:	mov	r0, r5
   19358:	mov	r1, #7
   1935c:	mov	r2, #1
   19360:	mov	r3, #1
   19364:	bl	2102c <flatcc_builder_table_add@@Base>
   19368:	cmp	r0, #0
   1936c:	beq	19390 <test_clone_slice@@Base+0x4d4>
   19370:	mov	r6, r0
   19374:	mov	r0, r5
   19378:	mov	r1, #8
   1937c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   19380:	cmp	r0, #0
   19384:	movne	r1, #1
   19388:	strbne	r1, [r6]
   1938c:	strne	r4, [r0]
   19390:	ldr	r0, [sl, #-4]
   19394:	mov	r2, #1
   19398:	mvn	r1, #0
   1939c:	mov	r3, #1
   193a0:	str	r2, [sp]
   193a4:	str	r1, [sp, #4]
   193a8:	cmp	r0, #3
   193ac:	mov	r2, r0
   193b0:	movcs	r2, #3
   193b4:	add	r1, sl, r2
   193b8:	sub	r2, r0, r2
   193bc:	mov	r0, r5
   193c0:	bl	2082c <flatcc_builder_create_vector@@Base>
   193c4:	cmp	r0, #0
   193c8:	beq	193e4 <test_clone_slice@@Base+0x528>
   193cc:	mov	r4, r0
   193d0:	mov	r0, r5
   193d4:	mov	r1, #24
   193d8:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   193dc:	cmp	r0, #0
   193e0:	strne	r4, [r0]
   193e4:	ldr	r1, [r7]
   193e8:	mov	r0, r7
   193ec:	movw	r6, #20301	; 0x4f4d
   193f0:	movt	r6, #21326	; 0x534e
   193f4:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   193f8:	cmp	r1, #6
   193fc:	bcc	19414 <test_clone_slice@@Base+0x558>
   19400:	ldrh	r0, [r0, #4]
   19404:	cmp	r0, #0
   19408:	beq	19414 <test_clone_slice@@Base+0x558>
   1940c:	add	r2, r7, r0
   19410:	b	19418 <test_clone_slice@@Base+0x55c>
   19414:	mov	r2, #0
   19418:	mov	r0, #16
   1941c:	mov	r1, #0
   19420:	mov	r3, #32
   19424:	str	r0, [sp]
   19428:	mov	r0, r5
   1942c:	bl	21f30 <flatcc_builder_table_add_copy@@Base>
   19430:	ldr	r2, [r9, #-4]
   19434:	mvn	r0, #-1073741824	; 0xc0000000
   19438:	mov	r1, #2
   1943c:	mov	r3, #4
   19440:	str	r1, [sp]
   19444:	str	r0, [sp, #4]
   19448:	mov	r0, r5
   1944c:	mov	r1, r9
   19450:	bl	2082c <flatcc_builder_create_vector@@Base>
   19454:	cmp	r0, #0
   19458:	beq	19474 <test_clone_slice@@Base+0x5b8>
   1945c:	mov	r4, r0
   19460:	mov	r0, r5
   19464:	mov	r1, #9
   19468:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1946c:	cmp	r0, #0
   19470:	strne	r4, [r0]
   19474:	movw	r1, #25228	; 0x628c
   19478:	mov	r0, r5
   1947c:	mov	r2, #1
   19480:	movt	r1, #2
   19484:	bl	205dc <flatcc_builder_check_required@@Base>
   19488:	cmp	r0, #0
   1948c:	beq	1986c <test_clone_slice@@Base+0x9b0>
   19490:	mov	r0, r5
   19494:	bl	2066c <flatcc_builder_end_table@@Base>
   19498:	mov	r1, r0
   1949c:	mov	r0, r5
   194a0:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   194a4:	add	r1, sp, #32
   194a8:	mov	r0, r5
   194ac:	bl	2205c <flatcc_builder_get_direct_buffer@@Base>
   194b0:	mov	r5, r0
   194b4:	movw	r0, #41072	; 0xa070
   194b8:	ldr	r2, [sp, #32]
   194bc:	movt	r0, #3
   194c0:	mov	r1, r5
   194c4:	ldr	r3, [r0]
   194c8:	movw	r0, #19244	; 0x4b2c
   194cc:	movt	r0, #2
   194d0:	bl	13674 <test_type_aliases@@Base+0x51c>
   194d4:	cmp	r5, #0
   194d8:	beq	1988c <test_clone_slice@@Base+0x9d0>
   194dc:	ldr	r0, [r5, #4]
   194e0:	cmp	r0, r6
   194e4:	bne	1988c <test_clone_slice@@Base+0x9d0>
   194e8:	ldr	r0, [r5]
   194ec:	ldr	r0, [r5, r0]!
   194f0:	mov	r4, r5
   194f4:	ldrh	r8, [r4, -r0]!
   194f8:	cmp	r8, #11
   194fc:	bls	19860 <test_clone_slice@@Base+0x9a4>
   19500:	ldrh	r0, [r4, #10]
   19504:	cmp	r0, #0
   19508:	beq	19860 <test_clone_slice@@Base+0x9a4>
   1950c:	mov	r1, r5
   19510:	ldr	r0, [r1, r0]!
   19514:	add	r0, r1, r0
   19518:	movw	r1, #19154	; 0x4ad2
   1951c:	add	r0, r0, #4
   19520:	movt	r1, #2
   19524:	bl	12e8c <strcmp@plt>
   19528:	cmp	r0, #0
   1952c:	beq	19554 <test_clone_slice@@Base+0x698>
   19530:	movw	r0, #29712	; 0x7410
   19534:	movt	r0, #2
   19538:	bl	12eec <puts@plt>
   1953c:	mvn	r5, #0
   19540:	ldr	r0, [sp, #20]
   19544:	bl	22304 <flatcc_builder_aligned_free@@Base>
   19548:	mov	r0, r5
   1954c:	sub	sp, fp, #28
   19550:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19554:	cmp	r8, #26
   19558:	bcc	19578 <test_clone_slice@@Base+0x6bc>
   1955c:	ldrh	r1, [r4, #24]
   19560:	cmp	r1, #0
   19564:	movne	r0, r5
   19568:	ldrne	r1, [r0, r1]!
   1956c:	ldrne	r6, [r0, r1]!
   19570:	cmpne	r6, #0
   19574:	bne	19598 <test_clone_slice@@Base+0x6dc>
   19578:	movw	r0, #22025	; 0x5609
   1957c:	movw	r1, #22080	; 0x5640
   19580:	movw	r3, #22451	; 0x57b3
   19584:	mov	r2, #108	; 0x6c
   19588:	movt	r0, #2
   1958c:	movt	r1, #2
   19590:	movt	r3, #2
   19594:	bl	12f88 <__assert_fail@plt>
   19598:	add	r7, r0, #4
   1959c:	movw	r1, #19154	; 0x4ad2
   195a0:	ldr	r0, [r7]
   195a4:	movt	r1, #2
   195a8:	add	r0, r7, r0
   195ac:	add	r0, r0, #4
   195b0:	bl	12e8c <strcmp@plt>
   195b4:	cmp	r0, #0
   195b8:	beq	195c8 <test_clone_slice@@Base+0x70c>
   195bc:	movw	r0, #29680	; 0x73f0
   195c0:	movt	r0, #2
   195c4:	b	19538 <test_clone_slice@@Base+0x67c>
   195c8:	cmp	r6, #1
   195cc:	bls	19578 <test_clone_slice@@Base+0x6bc>
   195d0:	mov	r0, r7
   195d4:	ldr	r1, [r0, #4]!
   195d8:	ldr	r1, [r0, r1]!
   195dc:	cmp	r1, #6
   195e0:	bne	19608 <test_clone_slice@@Base+0x74c>
   195e4:	movw	r1, #19158	; 0x4ad6
   195e8:	add	r0, r0, #4
   195ec:	movt	r1, #2
   195f0:	bl	12e8c <strcmp@plt>
   195f4:	cmp	r0, #0
   195f8:	beq	19614 <test_clone_slice@@Base+0x758>
   195fc:	movw	r0, #29600	; 0x73a0
   19600:	movt	r0, #2
   19604:	b	19538 <test_clone_slice@@Base+0x67c>
   19608:	movw	r0, #29632	; 0x73c0
   1960c:	movt	r0, #2
   19610:	b	19538 <test_clone_slice@@Base+0x67c>
   19614:	cmp	r6, #2
   19618:	bls	19578 <test_clone_slice@@Base+0x6bc>
   1961c:	ldr	r0, [r7, #8]!
   19620:	ldr	r0, [r7, r0]!
   19624:	cmp	r0, #3
   19628:	bne	19650 <test_clone_slice@@Base+0x794>
   1962c:	movw	r1, #19267	; 0x4b43
   19630:	add	r0, r7, #4
   19634:	movt	r1, #2
   19638:	bl	12e8c <strcmp@plt>
   1963c:	cmp	r0, #0
   19640:	beq	1965c <test_clone_slice@@Base+0x7a0>
   19644:	movw	r0, #29536	; 0x7360
   19648:	movt	r0, #2
   1964c:	b	19538 <test_clone_slice@@Base+0x67c>
   19650:	movw	r0, #29568	; 0x7380
   19654:	movt	r0, #2
   19658:	b	19538 <test_clone_slice@@Base+0x67c>
   1965c:	ldrh	r0, [r4, #20]
   19660:	cmp	r0, #0
   19664:	movne	r1, r5
   19668:	ldrne	r0, [r1, r0]!
   1966c:	addsne	r9, r1, r0
   19670:	bne	19694 <test_clone_slice@@Base+0x7d8>
   19674:	movw	r0, #17708	; 0x452c
   19678:	movw	r1, #17712	; 0x4530
   1967c:	movw	r3, #19191	; 0x4af7
   19680:	mov	r2, #1664	; 0x680
   19684:	movt	r0, #2
   19688:	movt	r1, #2
   1968c:	movt	r3, #2
   19690:	bl	12f88 <__assert_fail@plt>
   19694:	ldr	r0, [r9]
   19698:	mov	r7, r9
   1969c:	ldrh	r6, [r7, -r0]!
   196a0:	cmp	r6, #12
   196a4:	bcc	19860 <test_clone_slice@@Base+0x9a4>
   196a8:	ldrh	r0, [r7, #10]
   196ac:	cmp	r0, #0
   196b0:	beq	19860 <test_clone_slice@@Base+0x9a4>
   196b4:	mov	r1, r9
   196b8:	ldr	r0, [r1, r0]!
   196bc:	add	r0, r1, r0
   196c0:	movw	r1, #19156	; 0x4ad4
   196c4:	add	r0, r0, #4
   196c8:	movt	r1, #2
   196cc:	bl	12e8c <strcmp@plt>
   196d0:	cmp	r0, #0
   196d4:	beq	196e8 <test_clone_slice@@Base+0x82c>
   196d8:	movw	r0, #19271	; 0x4b47
   196dc:	movt	r0, #2
   196e0:	bl	12e98 <printf@plt>
   196e4:	b	1953c <test_clone_slice@@Base+0x680>
   196e8:	cmp	r6, #54	; 0x36
   196ec:	bcc	19734 <test_clone_slice@@Base+0x878>
   196f0:	ldrh	r1, [r7, #52]	; 0x34
   196f4:	cmp	r1, #0
   196f8:	beq	19734 <test_clone_slice@@Base+0x878>
   196fc:	mov	r0, r9
   19700:	ldr	r1, [r0, r1]!
   19704:	ldr	r1, [r0, r1]!
   19708:	cmp	r1, #7
   1970c:	bne	19734 <test_clone_slice@@Base+0x878>
   19710:	add	r0, r0, #4
   19714:	add	r1, sp, #24
   19718:	mov	r2, #7
   1971c:	bl	12ebc <memcmp@plt>
   19720:	cmp	r0, #0
   19724:	beq	19740 <test_clone_slice@@Base+0x884>
   19728:	movw	r0, #29472	; 0x7320
   1972c:	movt	r0, #2
   19730:	b	19538 <test_clone_slice@@Base+0x67c>
   19734:	movw	r0, #29504	; 0x7340
   19738:	movt	r0, #2
   1973c:	b	19538 <test_clone_slice@@Base+0x67c>
   19740:	cmp	r8, #54	; 0x36
   19744:	bcc	19788 <test_clone_slice@@Base+0x8cc>
   19748:	ldrh	r1, [r4, #52]	; 0x34
   1974c:	cmp	r1, #0
   19750:	beq	19788 <test_clone_slice@@Base+0x8cc>
   19754:	mov	r0, r5
   19758:	ldr	r1, [r0, r1]!
   1975c:	ldr	r1, [r0, r1]!
   19760:	cmp	r1, #4
   19764:	bne	19788 <test_clone_slice@@Base+0x8cc>
   19768:	add	r0, r0, #4
   1976c:	ldr	r1, [sp, #27]
   19770:	ldr	r0, [r0]
   19774:	cmp	r0, r1
   19778:	beq	19794 <test_clone_slice@@Base+0x8d8>
   1977c:	movw	r0, #29408	; 0x72e0
   19780:	movt	r0, #2
   19784:	b	19538 <test_clone_slice@@Base+0x67c>
   19788:	movw	r0, #29440	; 0x7300
   1978c:	movt	r0, #2
   19790:	b	19538 <test_clone_slice@@Base+0x67c>
   19794:	ldrh	r0, [r4, #4]
   19798:	vldr	s0, [pc, #332]	; 198ec <test_clone_slice@@Base+0xa30>
   1979c:	add	r0, r5, r0
   197a0:	vldr	s2, [r0]
   197a4:	vcmp.f32	s2, s0
   197a8:	vmrs	APSR_nzcv, fpscr
   197ac:	beq	197bc <test_clone_slice@@Base+0x900>
   197b0:	movw	r0, #29376	; 0x72c0
   197b4:	movt	r0, #2
   197b8:	b	19538 <test_clone_slice@@Base+0x67c>
   197bc:	ldrh	r0, [r4, #22]
   197c0:	cmp	r0, #0
   197c4:	beq	19830 <test_clone_slice@@Base+0x974>
   197c8:	ldr	r0, [r5, r0]!
   197cc:	ldr	r0, [r5, r0]!
   197d0:	cmp	r0, #2
   197d4:	bne	19830 <test_clone_slice@@Base+0x974>
   197d8:	add	r0, r5, #4
   197dc:	ldrh	r1, [r0]
   197e0:	cmp	r1, #22
   197e4:	bne	1983c <test_clone_slice@@Base+0x980>
   197e8:	ldrh	r0, [r0, #4]
   197ec:	cmp	r0, #44	; 0x2c
   197f0:	bne	19848 <test_clone_slice@@Base+0x98c>
   197f4:	ldrh	r0, [r7, #22]
   197f8:	cmp	r0, #0
   197fc:	beq	19854 <test_clone_slice@@Base+0x998>
   19800:	ldr	r0, [r9, r0]!
   19804:	ldr	r0, [r9, r0]!
   19808:	cmp	r0, #1
   1980c:	bne	19854 <test_clone_slice@@Base+0x998>
   19810:	add	r0, r9, #4
   19814:	mov	r5, #0
   19818:	ldrh	r0, [r0]
   1981c:	cmp	r0, #44	; 0x2c
   19820:	beq	19540 <test_clone_slice@@Base+0x684>
   19824:	movw	r0, #29168	; 0x71f0
   19828:	movt	r0, #2
   1982c:	b	19538 <test_clone_slice@@Base+0x67c>
   19830:	movw	r0, #29312	; 0x7280
   19834:	movt	r0, #2
   19838:	b	19538 <test_clone_slice@@Base+0x67c>
   1983c:	movw	r0, #29280	; 0x7260
   19840:	movt	r0, #2
   19844:	b	19538 <test_clone_slice@@Base+0x67c>
   19848:	movw	r0, #29248	; 0x7240
   1984c:	movt	r0, #2
   19850:	b	19538 <test_clone_slice@@Base+0x67c>
   19854:	movw	r0, #29216	; 0x7220
   19858:	movt	r0, #2
   1985c:	b	19538 <test_clone_slice@@Base+0x67c>
   19860:	movw	r0, #21903	; 0x558f
   19864:	movt	r0, #2
   19868:	b	19894 <test_clone_slice@@Base+0x9d8>
   1986c:	movw	r0, #21291	; 0x532b
   19870:	movw	r1, #21001	; 0x5209
   19874:	movw	r3, #21453	; 0x53cd
   19878:	mov	r2, #235	; 0xeb
   1987c:	movt	r0, #2
   19880:	movt	r1, #2
   19884:	movt	r3, #2
   19888:	bl	12f88 <__assert_fail@plt>
   1988c:	movw	r0, #20552	; 0x5048
   19890:	movt	r0, #2
   19894:	movw	r1, #20590	; 0x506e
   19898:	movw	r3, #21822	; 0x553e
   1989c:	movw	r2, #699	; 0x2bb
   198a0:	movt	r1, #2
   198a4:	movt	r3, #2
   198a8:	bl	12f88 <__assert_fail@plt>
   198ac:	movw	r0, #19232	; 0x4b20
   198b0:	movw	r1, #17712	; 0x4530
   198b4:	movw	r3, #19191	; 0x4af7
   198b8:	movw	r2, #1606	; 0x646
   198bc:	movt	r0, #2
   198c0:	movt	r1, #2
   198c4:	movt	r3, #2
   198c8:	bl	12f88 <__assert_fail@plt>
   198cc:	movw	r0, #19238	; 0x4b26
   198d0:	movw	r1, #17712	; 0x4530
   198d4:	movw	r3, #19191	; 0x4af7
   198d8:	movw	r2, #1608	; 0x648
   198dc:	movt	r0, #2
   198e0:	movt	r1, #2
   198e4:	movt	r3, #2
   198e8:	bl	12f88 <__assert_fail@plt>
   198ec:	eorgt	r3, r9, #-872415232	; 0xcc000000

000198f0 <test_create_add_field@@Base>:
   198f0:	push	{r4, r5, fp, lr}
   198f4:	add	fp, sp, #8
   198f8:	sub	sp, sp, #8
   198fc:	mov	r4, r0
   19900:	bl	1dd44 <flatcc_builder_reset@@Base>
   19904:	movw	r1, #17220	; 0x4344
   19908:	mov	r0, r4
   1990c:	mov	r2, #0
   19910:	mov	r3, #0
   19914:	movt	r1, #2
   19918:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   1991c:	cmp	r0, #0
   19920:	bne	19930 <test_create_add_field@@Base+0x40>
   19924:	mov	r0, r4
   19928:	mov	r1, #36	; 0x24
   1992c:	bl	1fcbc <flatcc_builder_start_table@@Base>
   19930:	movw	r1, #17288	; 0x4388
   19934:	mov	r0, r4
   19938:	movt	r1, #2
   1993c:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   19940:	cmp	r0, #0
   19944:	beq	19960 <test_create_add_field@@Base+0x70>
   19948:	mov	r5, r0
   1994c:	mov	r0, r4
   19950:	mov	r1, #3
   19954:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   19958:	cmp	r0, #0
   1995c:	strne	r5, [r0]
   19960:	movw	r1, #19319	; 0x4b77
   19964:	mov	r0, r4
   19968:	movt	r1, #2
   1996c:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   19970:	mov	r5, r0
   19974:	mov	r0, r4
   19978:	mov	r1, #3
   1997c:	bl	1fcbc <flatcc_builder_start_table@@Base>
   19980:	cmp	r0, #0
   19984:	beq	19a18 <test_create_add_field@@Base+0x128>
   19988:	movw	r1, #25228	; 0x628c
   1998c:	mov	r0, r4
   19990:	mov	r2, #1
   19994:	movt	r1, #2
   19998:	bl	205dc <flatcc_builder_check_required@@Base>
   1999c:	cmp	r0, #0
   199a0:	beq	19b90 <test_create_add_field@@Base+0x2a0>
   199a4:	mov	r0, r4
   199a8:	bl	2066c <flatcc_builder_end_table@@Base>
   199ac:	mov	r1, r0
   199b0:	mov	r0, r4
   199b4:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   199b8:	add	r1, sp, #4
   199bc:	mov	r0, r4
   199c0:	bl	221c4 <flatcc_builder_finalize_aligned_buffer@@Base>
   199c4:	cmp	r0, #0
   199c8:	beq	19b70 <test_create_add_field@@Base+0x280>
   199cc:	mov	r4, r0
   199d0:	ldr	r0, [r0, #4]
   199d4:	movw	r1, #20301	; 0x4f4d
   199d8:	movt	r1, #21326	; 0x534e
   199dc:	cmp	r0, r1
   199e0:	bne	19b70 <test_create_add_field@@Base+0x280>
   199e4:	ldr	r1, [r4]
   199e8:	mov	r0, r4
   199ec:	ldr	r2, [r0, r1]!
   199f0:	mov	r1, r0
   199f4:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   199f8:	cmp	r2, #29
   199fc:	bls	19aec <test_create_add_field@@Base+0x1fc>
   19a00:	ldrh	r3, [r1, #28]
   19a04:	cmp	r3, #0
   19a08:	beq	19ad0 <test_create_add_field@@Base+0x1e0>
   19a0c:	movw	r0, #29776	; 0x7450
   19a10:	movt	r0, #2
   19a14:	b	19b54 <test_create_add_field@@Base+0x264>
   19a18:	mov	r0, r4
   19a1c:	mov	r1, #1
   19a20:	mov	r2, #8
   19a24:	mov	r3, #8
   19a28:	bl	2102c <flatcc_builder_table_add@@Base>
   19a2c:	cmp	r0, #0
   19a30:	beq	19988 <test_create_add_field@@Base+0x98>
   19a34:	mvn	r2, #99	; 0x63
   19a38:	cmp	r5, #0
   19a3c:	mvn	r1, #0
   19a40:	str	r2, [r0]
   19a44:	str	r1, [r0, #4]
   19a48:	beq	19988 <test_create_add_field@@Base+0x98>
   19a4c:	mov	r0, r4
   19a50:	mov	r1, #0
   19a54:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   19a58:	cmp	r0, #0
   19a5c:	beq	19988 <test_create_add_field@@Base+0x98>
   19a60:	str	r5, [r0]
   19a64:	mov	r0, r4
   19a68:	mov	r1, #2
   19a6c:	mov	r2, #2
   19a70:	mov	r3, #2
   19a74:	mov	r5, #2
   19a78:	bl	2102c <flatcc_builder_table_add@@Base>
   19a7c:	cmp	r0, #0
   19a80:	beq	19988 <test_create_add_field@@Base+0x98>
   19a84:	movw	r1, #25234	; 0x6292
   19a88:	strh	r5, [r0]
   19a8c:	mov	r0, r4
   19a90:	mov	r2, #0
   19a94:	movt	r1, #2
   19a98:	bl	205dc <flatcc_builder_check_required@@Base>
   19a9c:	cmp	r0, #0
   19aa0:	beq	19bb0 <test_create_add_field@@Base+0x2c0>
   19aa4:	mov	r0, r4
   19aa8:	bl	2066c <flatcc_builder_end_table@@Base>
   19aac:	cmp	r0, #0
   19ab0:	beq	19988 <test_create_add_field@@Base+0x98>
   19ab4:	mov	r5, r0
   19ab8:	mov	r0, r4
   19abc:	mov	r1, #14
   19ac0:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   19ac4:	cmp	r0, #0
   19ac8:	strne	r5, [r0]
   19acc:	b	19988 <test_create_add_field@@Base+0x98>
   19ad0:	cmp	r2, #34	; 0x22
   19ad4:	bcc	19aec <test_create_add_field@@Base+0x1fc>
   19ad8:	ldrh	r1, [r1, #32]
   19adc:	cmp	r1, #0
   19ae0:	ldrne	r1, [r0, r1]!
   19ae4:	addsne	r0, r0, r1
   19ae8:	bne	19b0c <test_create_add_field@@Base+0x21c>
   19aec:	movw	r0, #20552	; 0x5048
   19af0:	movw	r1, #20590	; 0x506e
   19af4:	movw	r3, #23000	; 0x59d8
   19af8:	mov	r2, #608	; 0x260
   19afc:	movt	r0, #2
   19b00:	movt	r1, #2
   19b04:	movt	r3, #2
   19b08:	bl	12f88 <__assert_fail@plt>
   19b0c:	ldr	r2, [r0]
   19b10:	mov	r1, r0
   19b14:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   19b18:	cmp	r2, #8
   19b1c:	bcc	19b4c <test_create_add_field@@Base+0x25c>
   19b20:	ldrh	r1, [r1, #6]
   19b24:	cmp	r1, #0
   19b28:	beq	19b4c <test_create_add_field@@Base+0x25c>
   19b2c:	ldr	r1, [r0, r1]!
   19b30:	mvn	r2, #99	; 0x63
   19b34:	mov	r5, #0
   19b38:	ldr	r0, [r0, #4]
   19b3c:	eor	r1, r1, r2
   19b40:	mvn	r0, r0
   19b44:	orrs	r0, r1, r0
   19b48:	beq	19b5c <test_create_add_field@@Base+0x26c>
   19b4c:	movw	r0, #29744	; 0x7430
   19b50:	movt	r0, #2
   19b54:	bl	12eec <puts@plt>
   19b58:	mvn	r5, #0
   19b5c:	mov	r0, r4
   19b60:	bl	22304 <flatcc_builder_aligned_free@@Base>
   19b64:	mov	r0, r5
   19b68:	sub	sp, fp, #8
   19b6c:	pop	{r4, r5, fp, pc}
   19b70:	movw	r0, #20552	; 0x5048
   19b74:	movw	r1, #20590	; 0x506e
   19b78:	movw	r3, #22924	; 0x598c
   19b7c:	mov	r2, #716	; 0x2cc
   19b80:	movt	r0, #2
   19b84:	movt	r1, #2
   19b88:	movt	r3, #2
   19b8c:	bl	12f88 <__assert_fail@plt>
   19b90:	movw	r0, #21291	; 0x532b
   19b94:	movw	r1, #21001	; 0x5209
   19b98:	movw	r3, #21453	; 0x53cd
   19b9c:	mov	r2, #235	; 0xeb
   19ba0:	movt	r0, #2
   19ba4:	movt	r1, #2
   19ba8:	movt	r3, #2
   19bac:	bl	12f88 <__assert_fail@plt>
   19bb0:	movw	r0, #22696	; 0x58a8
   19bb4:	movw	r1, #21001	; 0x5209
   19bb8:	movw	r3, #22849	; 0x5941
   19bbc:	mov	r2, #221	; 0xdd
   19bc0:	movt	r0, #2
   19bc4:	movt	r1, #2
   19bc8:	movt	r3, #2
   19bcc:	bl	12f88 <__assert_fail@plt>

00019bd0 <test_union_vector@@Base>:
   19bd0:	push	{r4, r5, r6, sl, fp, lr}
   19bd4:	add	fp, sp, #16
   19bd8:	sub	sp, sp, #16
   19bdc:	mov	r4, r0
   19be0:	bl	1dd44 <flatcc_builder_reset@@Base>
   19be4:	movw	r1, #17220	; 0x4344
   19be8:	mov	r0, r4
   19bec:	mov	r2, #0
   19bf0:	mov	r3, #0
   19bf4:	movt	r1, #2
   19bf8:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   19bfc:	cmp	r0, #0
   19c00:	bne	19c10 <test_union_vector@@Base+0x40>
   19c04:	mov	r0, r4
   19c08:	mov	r1, #36	; 0x24
   19c0c:	bl	1fcbc <flatcc_builder_start_table@@Base>
   19c10:	movw	r1, #19325	; 0x4b7d
   19c14:	mov	r0, r4
   19c18:	movt	r1, #2
   19c1c:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   19c20:	cmp	r0, #0
   19c24:	beq	19c40 <test_union_vector@@Base+0x70>
   19c28:	mov	r5, r0
   19c2c:	mov	r0, r4
   19c30:	mov	r1, #3
   19c34:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   19c38:	cmp	r0, #0
   19c3c:	strne	r5, [r0]
   19c40:	mov	r0, r4
   19c44:	mov	r1, #4
   19c48:	bl	1fcbc <flatcc_builder_start_table@@Base>
   19c4c:	mov	r5, #0
   19c50:	cmp	r0, #0
   19c54:	bne	19c80 <test_union_vector@@Base+0xb0>
   19c58:	movw	r1, #25236	; 0x6294
   19c5c:	mov	r0, r4
   19c60:	mov	r2, #0
   19c64:	movt	r1, #2
   19c68:	bl	205dc <flatcc_builder_check_required@@Base>
   19c6c:	cmp	r0, #0
   19c70:	beq	1a0ec <test_union_vector@@Base+0x51c>
   19c74:	mov	r0, r4
   19c78:	bl	2066c <flatcc_builder_end_table@@Base>
   19c7c:	mov	r5, r0
   19c80:	mov	r0, r4
   19c84:	bl	21614 <flatcc_builder_start_union_vector@@Base>
   19c88:	mov	r0, r4
   19c8c:	mov	r1, #2
   19c90:	mov	r2, r5
   19c94:	bl	21a1c <flatcc_builder_union_vector_push@@Base>
   19c98:	add	r0, sp, #4
   19c9c:	mov	r1, r4
   19ca0:	bl	2168c <flatcc_builder_end_union_vector@@Base>
   19ca4:	ldr	r6, [sp, #4]
   19ca8:	ldr	r5, [sp, #8]
   19cac:	mov	r0, r4
   19cb0:	mov	r1, #4
   19cb4:	bl	1fcbc <flatcc_builder_start_table@@Base>
   19cb8:	cmp	r6, #0
   19cbc:	cmpne	r5, #0
   19cc0:	bne	19e2c <test_union_vector@@Base+0x25c>
   19cc4:	movw	r1, #25238	; 0x6296
   19cc8:	mov	r0, r4
   19ccc:	mov	r2, #0
   19cd0:	movt	r1, #2
   19cd4:	bl	205dc <flatcc_builder_check_required@@Base>
   19cd8:	cmp	r0, #0
   19cdc:	beq	1a08c <test_union_vector@@Base+0x4bc>
   19ce0:	mov	r0, r4
   19ce4:	bl	2066c <flatcc_builder_end_table@@Base>
   19ce8:	cmp	r0, #0
   19cec:	beq	19d30 <test_union_vector@@Base+0x160>
   19cf0:	mov	r5, r0
   19cf4:	mov	r0, r4
   19cf8:	mov	r1, #7
   19cfc:	mov	r2, #1
   19d00:	mov	r3, #1
   19d04:	bl	2102c <flatcc_builder_table_add@@Base>
   19d08:	cmp	r0, #0
   19d0c:	beq	19d30 <test_union_vector@@Base+0x160>
   19d10:	mov	r6, r0
   19d14:	mov	r0, r4
   19d18:	mov	r1, #8
   19d1c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   19d20:	cmp	r0, #0
   19d24:	movne	r1, #4
   19d28:	strbne	r1, [r6]
   19d2c:	strne	r5, [r0]
   19d30:	movw	r1, #25228	; 0x628c
   19d34:	mov	r0, r4
   19d38:	mov	r2, #1
   19d3c:	movt	r1, #2
   19d40:	bl	205dc <flatcc_builder_check_required@@Base>
   19d44:	cmp	r0, #0
   19d48:	beq	1a0ac <test_union_vector@@Base+0x4dc>
   19d4c:	mov	r0, r4
   19d50:	bl	2066c <flatcc_builder_end_table@@Base>
   19d54:	mov	r1, r0
   19d58:	mov	r0, r4
   19d5c:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   19d60:	add	r1, sp, #12
   19d64:	mov	r0, r4
   19d68:	bl	221c4 <flatcc_builder_finalize_aligned_buffer@@Base>
   19d6c:	ldr	r1, [sp, #12]
   19d70:	movw	r2, #17220	; 0x4344
   19d74:	movw	r3, #51708	; 0xc9fc
   19d78:	mov	r4, r0
   19d7c:	movt	r2, #2
   19d80:	movt	r3, #1
   19d84:	bl	23554 <flatcc_verify_table_as_root@@Base>
   19d88:	cmp	r0, #0
   19d8c:	beq	19db0 <test_union_vector@@Base+0x1e0>
   19d90:	bl	228d0 <flatcc_verify_error_string@@Base>
   19d94:	mov	r1, r0
   19d98:	movw	r0, #19332	; 0x4b84
   19d9c:	movt	r0, #2
   19da0:	bl	12e98 <printf@plt>
   19da4:	mvn	r0, #0
   19da8:	sub	sp, fp, #16
   19dac:	pop	{r4, r5, r6, sl, fp, pc}
   19db0:	cmp	r4, #0
   19db4:	beq	1a0cc <test_union_vector@@Base+0x4fc>
   19db8:	ldr	r0, [r4, #4]
   19dbc:	movw	r1, #20301	; 0x4f4d
   19dc0:	movt	r1, #21326	; 0x534e
   19dc4:	cmp	r0, r1
   19dc8:	bne	1a0cc <test_union_vector@@Base+0x4fc>
   19dcc:	ldr	r1, [r4]
   19dd0:	mov	r0, r4
   19dd4:	ldr	r2, [r0, r1]!
   19dd8:	mov	r1, r0
   19ddc:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   19de0:	cmp	r2, #19
   19de4:	bls	19e5c <test_union_vector@@Base+0x28c>
   19de8:	ldrh	r3, [r1, #18]
   19dec:	cmp	r3, #0
   19df0:	beq	19e5c <test_union_vector@@Base+0x28c>
   19df4:	ldrb	r3, [r0, r3]
   19df8:	cmp	r3, #4
   19dfc:	bne	19e5c <test_union_vector@@Base+0x28c>
   19e00:	cmp	r2, #22
   19e04:	bcc	19e1c <test_union_vector@@Base+0x24c>
   19e08:	ldrh	r1, [r1, #20]
   19e0c:	cmp	r1, #0
   19e10:	ldrne	r1, [r0, r1]!
   19e14:	addsne	r5, r0, r1
   19e18:	bne	19e7c <test_union_vector@@Base+0x2ac>
   19e1c:	movw	r0, #29824	; 0x7480
   19e20:	movt	r0, #2
   19e24:	bl	12eec <puts@plt>
   19e28:	b	19e68 <test_union_vector@@Base+0x298>
   19e2c:	mov	r0, r4
   19e30:	mov	r1, #2
   19e34:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   19e38:	cmp	r0, #0
   19e3c:	beq	19cc4 <test_union_vector@@Base+0xf4>
   19e40:	str	r6, [r0]
   19e44:	mov	r0, r4
   19e48:	mov	r1, #3
   19e4c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   19e50:	cmp	r0, #0
   19e54:	strne	r5, [r0]
   19e58:	b	19cc4 <test_union_vector@@Base+0xf4>
   19e5c:	movw	r0, #19392	; 0x4bc0
   19e60:	movt	r0, #2
   19e64:	bl	12e98 <printf@plt>
   19e68:	mov	r0, r4
   19e6c:	bl	22304 <flatcc_builder_aligned_free@@Base>
   19e70:	mov	r0, #0
   19e74:	sub	sp, fp, #16
   19e78:	pop	{r4, r5, r6, sl, fp, pc}
   19e7c:	ldr	r1, [r5]
   19e80:	mov	r2, r5
   19e84:	ldrh	r3, [r2, -r1]!
   19e88:	cmp	r3, #12
   19e8c:	bcc	19ea0 <test_union_vector@@Base+0x2d0>
   19e90:	ldrh	r1, [r2, #10]
   19e94:	cmp	r1, #0
   19e98:	bne	19e1c <test_union_vector@@Base+0x24c>
   19e9c:	b	19ea8 <test_union_vector@@Base+0x2d8>
   19ea0:	cmp	r3, #10
   19ea4:	bcc	19f4c <test_union_vector@@Base+0x37c>
   19ea8:	ldrh	lr, [r2, #8]
   19eac:	mov	r6, #0
   19eb0:	mov	r1, #0
   19eb4:	cmp	lr, #0
   19eb8:	movne	r0, r5
   19ebc:	ldrne	r6, [r0, lr]!
   19ec0:	addne	r0, r0, r6
   19ec4:	addne	r6, r0, #4
   19ec8:	cmp	r3, #12
   19ecc:	bcc	19efc <test_union_vector@@Base+0x32c>
   19ed0:	ldrh	r1, [r2, #10]
   19ed4:	cmp	r1, #0
   19ed8:	beq	19ef8 <test_union_vector@@Base+0x328>
   19edc:	mov	r0, r5
   19ee0:	ldr	r1, [r0, r1]!
   19ee4:	add	r0, r0, r1
   19ee8:	add	r1, r0, #4
   19eec:	cmp	r6, #0
   19ef0:	bne	19f04 <test_union_vector@@Base+0x334>
   19ef4:	b	19f4c <test_union_vector@@Base+0x37c>
   19ef8:	mov	r1, #0
   19efc:	cmp	r6, #0
   19f00:	beq	19f4c <test_union_vector@@Base+0x37c>
   19f04:	ldr	r0, [r6, #-4]
   19f08:	cmp	r0, #1
   19f0c:	bne	19f4c <test_union_vector@@Base+0x37c>
   19f10:	ldrb	r0, [r6]
   19f14:	cmp	r0, #2
   19f18:	bne	19f58 <test_union_vector@@Base+0x388>
   19f1c:	cmp	r1, #0
   19f20:	ldrne	r0, [r1, #-4]
   19f24:	cmpne	r0, #0
   19f28:	bne	19f64 <test_union_vector@@Base+0x394>
   19f2c:	movw	r0, #22025	; 0x5609
   19f30:	movw	r1, #22080	; 0x5640
   19f34:	movw	r3, #23700	; 0x5c94
   19f38:	mov	r2, #117	; 0x75
   19f3c:	movt	r0, #2
   19f40:	movt	r1, #2
   19f44:	movt	r3, #2
   19f48:	bl	12f88 <__assert_fail@plt>
   19f4c:	movw	r0, #30064	; 0x7570
   19f50:	movt	r0, #2
   19f54:	b	19e24 <test_union_vector@@Base+0x254>
   19f58:	movw	r0, #30016	; 0x7540
   19f5c:	movt	r0, #2
   19f60:	b	19e24 <test_union_vector@@Base+0x254>
   19f64:	ldr	r0, [r1]
   19f68:	adds	ip, r1, r0
   19f6c:	beq	19fe0 <test_union_vector@@Base+0x410>
   19f70:	ldr	r0, [ip]
   19f74:	mov	r1, ip
   19f78:	ldrh	r0, [r1, -r0]!	; <UNPREDICTABLE>
   19f7c:	cmp	r0, #6
   19f80:	bcc	19fa0 <test_union_vector@@Base+0x3d0>
   19f84:	ldrh	r1, [r1, #4]
   19f88:	cmp	r1, #0
   19f8c:	beq	19fa0 <test_union_vector@@Base+0x3d0>
   19f90:	add	r0, ip, r1
   19f94:	ldrsb	r1, [r0]
   19f98:	cmp	r1, #2
   19f9c:	bne	1a070 <test_union_vector@@Base+0x4a0>
   19fa0:	cmp	lr, #0
   19fa4:	mov	r6, #0
   19fa8:	mov	r1, #0
   19fac:	movne	r0, r5
   19fb0:	ldrne	r6, [r0, lr]!
   19fb4:	addne	r0, r0, r6
   19fb8:	addne	r6, r0, #4
   19fbc:	cmp	r3, #12
   19fc0:	bcc	19ff0 <test_union_vector@@Base+0x420>
   19fc4:	ldrh	r1, [r2, #10]
   19fc8:	cmp	r1, #0
   19fcc:	beq	19fec <test_union_vector@@Base+0x41c>
   19fd0:	ldr	r0, [r5, r1]!
   19fd4:	add	r0, r5, r0
   19fd8:	add	r1, r0, #4
   19fdc:	b	19ff0 <test_union_vector@@Base+0x420>
   19fe0:	movw	r0, #25055	; 0x61df
   19fe4:	movt	r0, #2
   19fe8:	b	19e24 <test_union_vector@@Base+0x254>
   19fec:	mov	r1, #0
   19ff0:	cmp	r6, #0
   19ff4:	mov	r2, #0
   19ff8:	mov	r0, #0
   19ffc:	ldrne	r2, [r6, #-4]
   1a000:	cmp	r1, #0
   1a004:	ldrne	r0, [r1, #-4]
   1a008:	cmp	r2, r0
   1a00c:	bne	1a10c <test_union_vector@@Base+0x53c>
   1a010:	cmp	r6, #0
   1a014:	beq	1a064 <test_union_vector@@Base+0x494>
   1a018:	ldr	r0, [r6, #-4]
   1a01c:	cmp	r0, #1
   1a020:	bne	1a064 <test_union_vector@@Base+0x494>
   1a024:	ldrb	r0, [r6]
   1a028:	cmp	r0, #0
   1a02c:	beq	1a080 <test_union_vector@@Base+0x4b0>
   1a030:	cmp	r1, #0
   1a034:	ldrne	r2, [r1, #-4]
   1a038:	cmpne	r2, #0
   1a03c:	beq	19f2c <test_union_vector@@Base+0x35c>
   1a040:	cmp	r0, #2
   1a044:	bne	1a080 <test_union_vector@@Base+0x4b0>
   1a048:	ldr	r0, [r1]
   1a04c:	add	r0, r1, r0
   1a050:	cmp	r0, ip
   1a054:	beq	19e68 <test_union_vector@@Base+0x298>
   1a058:	movw	r0, #29872	; 0x74b0
   1a05c:	movt	r0, #2
   1a060:	b	19e24 <test_union_vector@@Base+0x254>
   1a064:	movw	r0, #29936	; 0x74f0
   1a068:	movt	r0, #2
   1a06c:	b	19e24 <test_union_vector@@Base+0x254>
   1a070:	movw	r0, #19426	; 0x4be2
   1a074:	movt	r0, #2
   1a078:	bl	12e98 <printf@plt>
   1a07c:	b	19e68 <test_union_vector@@Base+0x298>
   1a080:	movw	r0, #29904	; 0x74d0
   1a084:	movt	r0, #2
   1a088:	b	19e24 <test_union_vector@@Base+0x254>
   1a08c:	movw	r0, #23384	; 0x5b58
   1a090:	movw	r1, #21001	; 0x5209
   1a094:	movw	r3, #23534	; 0x5bee
   1a098:	mov	r2, #223	; 0xdf
   1a09c:	movt	r0, #2
   1a0a0:	movt	r1, #2
   1a0a4:	movt	r3, #2
   1a0a8:	bl	12f88 <__assert_fail@plt>
   1a0ac:	movw	r0, #21291	; 0x532b
   1a0b0:	movw	r1, #21001	; 0x5209
   1a0b4:	movw	r3, #21453	; 0x53cd
   1a0b8:	mov	r2, #235	; 0xeb
   1a0bc:	movt	r0, #2
   1a0c0:	movt	r1, #2
   1a0c4:	movt	r3, #2
   1a0c8:	bl	12f88 <__assert_fail@plt>
   1a0cc:	movw	r0, #20552	; 0x5048
   1a0d0:	movw	r1, #20590	; 0x506e
   1a0d4:	movw	r3, #22532	; 0x5804
   1a0d8:	movw	r2, #717	; 0x2cd
   1a0dc:	movt	r0, #2
   1a0e0:	movt	r1, #2
   1a0e4:	movt	r3, #2
   1a0e8:	bl	12f88 <__assert_fail@plt>
   1a0ec:	movw	r0, #23061	; 0x5a15
   1a0f0:	movw	r1, #21001	; 0x5209
   1a0f4:	movw	r3, #23271	; 0x5ae7
   1a0f8:	mov	r2, #217	; 0xd9
   1a0fc:	movt	r0, #2
   1a100:	movt	r1, #2
   1a104:	movt	r3, #2
   1a108:	bl	12f88 <__assert_fail@plt>
   1a10c:	movw	r0, #23784	; 0x5ce8
   1a110:	movw	r1, #20590	; 0x506e
   1a114:	movw	r3, #23885	; 0x5d4d
   1a118:	movw	r2, #621	; 0x26d
   1a11c:	movt	r0, #2
   1a120:	movt	r1, #2
   1a124:	movt	r3, #2
   1a128:	bl	12f88 <__assert_fail@plt>

0001a12c <test_mixed_type_union@@Base>:
   1a12c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a130:	add	fp, sp, #24
   1a134:	sub	sp, sp, #16
   1a138:	mov	r4, r0
   1a13c:	bl	1dd44 <flatcc_builder_reset@@Base>
   1a140:	movw	r1, #17220	; 0x4344
   1a144:	mov	r0, r4
   1a148:	mov	r2, #0
   1a14c:	mov	r3, #0
   1a150:	mov	r8, #0
   1a154:	movt	r1, #2
   1a158:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   1a15c:	cmp	r0, #0
   1a160:	bne	1a170 <test_mixed_type_union@@Base+0x44>
   1a164:	mov	r0, r4
   1a168:	mov	r1, #10
   1a16c:	bl	1fcbc <flatcc_builder_start_table@@Base>
   1a170:	mov	r0, r4
   1a174:	mov	r1, #4
   1a178:	mov	r2, #4
   1a17c:	bl	1e9e4 <flatcc_builder_start_struct@@Base>
   1a180:	cmp	r0, #0
   1a184:	beq	1a19c <test_mixed_type_union@@Base+0x70>
   1a188:	mov	r1, #10
   1a18c:	str	r1, [r0]
   1a190:	mov	r0, r4
   1a194:	bl	1ead8 <flatcc_builder_end_struct@@Base>
   1a198:	mov	r8, r0
   1a19c:	mov	r0, r4
   1a1a0:	mov	r1, #2
   1a1a4:	mov	r2, #2
   1a1a8:	bl	1e9e4 <flatcc_builder_start_struct@@Base>
   1a1ac:	cmp	r0, #0
   1a1b0:	beq	1a1cc <test_mixed_type_union@@Base+0xa0>
   1a1b4:	mov	r1, #22
   1a1b8:	strh	r1, [r0]
   1a1bc:	mov	r0, r4
   1a1c0:	bl	1ead8 <flatcc_builder_end_struct@@Base>
   1a1c4:	mov	r9, r0
   1a1c8:	b	1a1d0 <test_mixed_type_union@@Base+0xa4>
   1a1cc:	mov	r9, #0
   1a1d0:	mov	r0, r4
   1a1d4:	mov	r1, #2
   1a1d8:	mov	r2, #2
   1a1dc:	bl	1e9e4 <flatcc_builder_start_struct@@Base>
   1a1e0:	cmp	r0, #0
   1a1e4:	beq	1a240 <test_mixed_type_union@@Base+0x114>
   1a1e8:	mov	r1, #19
   1a1ec:	strh	r1, [r0]
   1a1f0:	mov	r0, r4
   1a1f4:	bl	1ead8 <flatcc_builder_end_struct@@Base>
   1a1f8:	cmp	r0, #0
   1a1fc:	beq	1a240 <test_mixed_type_union@@Base+0x114>
   1a200:	mov	r5, r0
   1a204:	mov	r0, r4
   1a208:	mov	r1, #0
   1a20c:	mov	r2, #1
   1a210:	mov	r3, #1
   1a214:	bl	2102c <flatcc_builder_table_add@@Base>
   1a218:	cmp	r0, #0
   1a21c:	beq	1a240 <test_mixed_type_union@@Base+0x114>
   1a220:	mov	r7, r0
   1a224:	mov	r0, r4
   1a228:	mov	r1, #1
   1a22c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1a230:	cmp	r0, #0
   1a234:	movne	r1, #8
   1a238:	strbne	r1, [r7]
   1a23c:	strne	r5, [r0]
   1a240:	cmp	r9, #0
   1a244:	beq	1a284 <test_mixed_type_union@@Base+0x158>
   1a248:	mov	r0, r4
   1a24c:	mov	r1, #6
   1a250:	mov	r2, #1
   1a254:	mov	r3, #1
   1a258:	bl	2102c <flatcc_builder_table_add@@Base>
   1a25c:	cmp	r0, #0
   1a260:	beq	1a284 <test_mixed_type_union@@Base+0x158>
   1a264:	mov	r5, r0
   1a268:	mov	r0, r4
   1a26c:	mov	r1, #7
   1a270:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1a274:	cmp	r0, #0
   1a278:	movne	r1, #8
   1a27c:	strbne	r1, [r5]
   1a280:	strne	r9, [r0]
   1a284:	mov	r0, r4
   1a288:	mov	r1, #1
   1a28c:	bl	1fcbc <flatcc_builder_start_table@@Base>
   1a290:	mov	r7, #0
   1a294:	cmp	r0, #0
   1a298:	beq	1a464 <test_mixed_type_union@@Base+0x338>
   1a29c:	movw	r1, #19455	; 0x4bff
   1a2a0:	mov	r0, r4
   1a2a4:	movt	r1, #2
   1a2a8:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   1a2ac:	cmp	r0, #0
   1a2b0:	beq	1a2f4 <test_mixed_type_union@@Base+0x1c8>
   1a2b4:	mov	r5, r0
   1a2b8:	mov	r0, r4
   1a2bc:	mov	r1, #4
   1a2c0:	mov	r2, #1
   1a2c4:	mov	r3, #1
   1a2c8:	bl	2102c <flatcc_builder_table_add@@Base>
   1a2cc:	cmp	r0, #0
   1a2d0:	beq	1a2f4 <test_mixed_type_union@@Base+0x1c8>
   1a2d4:	mov	r6, r0
   1a2d8:	mov	r0, r4
   1a2dc:	mov	r1, #5
   1a2e0:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1a2e4:	cmp	r0, #0
   1a2e8:	movne	r1, #11
   1a2ec:	strbne	r1, [r6]
   1a2f0:	strne	r5, [r0]
   1a2f4:	mov	r0, r4
   1a2f8:	bl	21614 <flatcc_builder_start_union_vector@@Base>
   1a2fc:	mov	r0, r4
   1a300:	mov	r1, #8
   1a304:	mov	r2, r9
   1a308:	bl	21a1c <flatcc_builder_union_vector_push@@Base>
   1a30c:	mov	r0, r4
   1a310:	mov	r1, #2
   1a314:	mov	r2, r7
   1a318:	bl	21a1c <flatcc_builder_union_vector_push@@Base>
   1a31c:	mov	r0, r4
   1a320:	mov	r1, #1
   1a324:	bl	1fcbc <flatcc_builder_start_table@@Base>
   1a328:	mov	r6, #0
   1a32c:	cmp	r0, #0
   1a330:	mov	r5, #0
   1a334:	bne	1a388 <test_mixed_type_union@@Base+0x25c>
   1a338:	mov	r0, r4
   1a33c:	mov	r1, #0
   1a340:	mov	r2, #4
   1a344:	mov	r3, #4
   1a348:	mov	r5, #0
   1a34c:	bl	2102c <flatcc_builder_table_add@@Base>
   1a350:	cmp	r0, #0
   1a354:	beq	1a388 <test_mixed_type_union@@Base+0x25c>
   1a358:	mov	r1, #1
   1a35c:	mov	r2, #0
   1a360:	str	r1, [r0]
   1a364:	movw	r1, #25240	; 0x6298
   1a368:	mov	r0, r4
   1a36c:	movt	r1, #2
   1a370:	bl	205dc <flatcc_builder_check_required@@Base>
   1a374:	cmp	r0, #0
   1a378:	beq	1aaf4 <test_mixed_type_union@@Base+0x9c8>
   1a37c:	mov	r0, r4
   1a380:	bl	2066c <flatcc_builder_end_table@@Base>
   1a384:	mov	r5, r0
   1a388:	mov	r0, r4
   1a38c:	mov	r1, #2
   1a390:	mov	r2, r5
   1a394:	bl	21a1c <flatcc_builder_union_vector_push@@Base>
   1a398:	movw	r1, #19466	; 0x4c0a
   1a39c:	mov	r0, r4
   1a3a0:	movt	r1, #2
   1a3a4:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   1a3a8:	mov	r2, r0
   1a3ac:	mov	r0, r4
   1a3b0:	mov	r1, #11
   1a3b4:	bl	21a1c <flatcc_builder_union_vector_push@@Base>
   1a3b8:	mov	r0, r4
   1a3bc:	mov	r1, #9
   1a3c0:	mov	r2, r8
   1a3c4:	bl	21a1c <flatcc_builder_union_vector_push@@Base>
   1a3c8:	mov	r0, r4
   1a3cc:	mov	r1, #4
   1a3d0:	mov	r2, #4
   1a3d4:	bl	1e9e4 <flatcc_builder_start_struct@@Base>
   1a3d8:	mov	r1, #3
   1a3dc:	str	r1, [r0]
   1a3e0:	mov	r0, r4
   1a3e4:	bl	1ead8 <flatcc_builder_end_struct@@Base>
   1a3e8:	mov	r2, r0
   1a3ec:	mov	r0, r4
   1a3f0:	mov	r1, #9
   1a3f4:	bl	21a1c <flatcc_builder_union_vector_push@@Base>
   1a3f8:	mov	r0, r4
   1a3fc:	mov	r1, #4
   1a400:	mov	r2, #4
   1a404:	bl	1e9e4 <flatcc_builder_start_struct@@Base>
   1a408:	cmp	r0, #0
   1a40c:	beq	1a424 <test_mixed_type_union@@Base+0x2f8>
   1a410:	mov	r1, #1
   1a414:	str	r1, [r0]
   1a418:	mov	r0, r4
   1a41c:	bl	1ead8 <flatcc_builder_end_struct@@Base>
   1a420:	mov	r6, r0
   1a424:	mov	r0, r4
   1a428:	mov	r1, #9
   1a42c:	mov	r2, r6
   1a430:	bl	21a1c <flatcc_builder_union_vector_push@@Base>
   1a434:	mov	r0, r4
   1a438:	mov	r1, #4
   1a43c:	mov	r2, #4
   1a440:	bl	1e9e4 <flatcc_builder_start_struct@@Base>
   1a444:	cmp	r0, #0
   1a448:	beq	1a504 <test_mixed_type_union@@Base+0x3d8>
   1a44c:	mov	r1, #2
   1a450:	str	r1, [r0]
   1a454:	mov	r0, r4
   1a458:	bl	1ead8 <flatcc_builder_end_struct@@Base>
   1a45c:	mov	r2, r0
   1a460:	b	1a508 <test_mixed_type_union@@Base+0x3dc>
   1a464:	mov	r0, r4
   1a468:	mov	r1, #0
   1a46c:	mov	r2, #4
   1a470:	mov	r3, #4
   1a474:	mov	r7, #0
   1a478:	bl	2102c <flatcc_builder_table_add@@Base>
   1a47c:	cmp	r0, #0
   1a480:	beq	1a29c <test_mixed_type_union@@Base+0x170>
   1a484:	mov	r1, #42	; 0x2a
   1a488:	mov	r2, #0
   1a48c:	mov	r7, #0
   1a490:	str	r1, [r0]
   1a494:	movw	r1, #25240	; 0x6298
   1a498:	mov	r0, r4
   1a49c:	movt	r1, #2
   1a4a0:	bl	205dc <flatcc_builder_check_required@@Base>
   1a4a4:	cmp	r0, #0
   1a4a8:	beq	1aaf4 <test_mixed_type_union@@Base+0x9c8>
   1a4ac:	mov	r0, r4
   1a4b0:	bl	2066c <flatcc_builder_end_table@@Base>
   1a4b4:	cmp	r0, #0
   1a4b8:	beq	1a29c <test_mixed_type_union@@Base+0x170>
   1a4bc:	mov	r5, r0
   1a4c0:	mov	r0, r4
   1a4c4:	mov	r1, #2
   1a4c8:	mov	r2, #1
   1a4cc:	mov	r3, #1
   1a4d0:	bl	2102c <flatcc_builder_table_add@@Base>
   1a4d4:	cmp	r0, #0
   1a4d8:	beq	1a4fc <test_mixed_type_union@@Base+0x3d0>
   1a4dc:	mov	r6, r0
   1a4e0:	mov	r0, r4
   1a4e4:	mov	r1, #3
   1a4e8:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1a4ec:	cmp	r0, #0
   1a4f0:	movne	r1, #2
   1a4f4:	strbne	r1, [r6]
   1a4f8:	strne	r5, [r0]
   1a4fc:	mov	r7, r5
   1a500:	b	1a29c <test_mixed_type_union@@Base+0x170>
   1a504:	mov	r2, #0
   1a508:	mov	r0, r4
   1a50c:	mov	r1, #9
   1a510:	bl	21a1c <flatcc_builder_union_vector_push@@Base>
   1a514:	movw	r1, #19464	; 0x4c08
   1a518:	mov	r0, r4
   1a51c:	movt	r1, #2
   1a520:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   1a524:	mov	r2, r0
   1a528:	mov	r0, r4
   1a52c:	mov	r1, #11
   1a530:	bl	21a1c <flatcc_builder_union_vector_push@@Base>
   1a534:	movw	r1, #19460	; 0x4c04
   1a538:	mov	r0, r4
   1a53c:	movt	r1, #2
   1a540:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   1a544:	mov	r2, r0
   1a548:	mov	r0, r4
   1a54c:	mov	r1, #11
   1a550:	bl	21a1c <flatcc_builder_union_vector_push@@Base>
   1a554:	add	r0, sp, #8
   1a558:	mov	r1, r4
   1a55c:	bl	2168c <flatcc_builder_end_union_vector@@Base>
   1a560:	ldr	r6, [sp, #8]
   1a564:	cmp	r6, #0
   1a568:	ldrne	r5, [sp, #12]
   1a56c:	cmpne	r5, #0
   1a570:	bne	1a694 <test_mixed_type_union@@Base+0x568>
   1a574:	movw	r1, #25242	; 0x629a
   1a578:	mov	r0, r4
   1a57c:	mov	r2, #0
   1a580:	movt	r1, #2
   1a584:	bl	205dc <flatcc_builder_check_required@@Base>
   1a588:	cmp	r0, #0
   1a58c:	beq	1aaa4 <test_mixed_type_union@@Base+0x978>
   1a590:	mov	r0, r4
   1a594:	bl	2066c <flatcc_builder_end_table@@Base>
   1a598:	mov	r1, r0
   1a59c:	mov	r0, r4
   1a5a0:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   1a5a4:	add	r1, sp, #4
   1a5a8:	mov	r0, r4
   1a5ac:	bl	221c4 <flatcc_builder_finalize_aligned_buffer@@Base>
   1a5b0:	mov	r4, r0
   1a5b4:	movw	r0, #41072	; 0xa070
   1a5b8:	ldr	r2, [sp, #4]
   1a5bc:	movt	r0, #3
   1a5c0:	mov	r1, r4
   1a5c4:	ldr	r3, [r0]
   1a5c8:	movw	r0, #19472	; 0x4c10
   1a5cc:	movt	r0, #2
   1a5d0:	bl	13674 <test_type_aliases@@Base+0x51c>
   1a5d4:	ldr	r1, [sp, #4]
   1a5d8:	movw	r2, #17220	; 0x4344
   1a5dc:	movw	r3, #53440	; 0xd0c0
   1a5e0:	mov	r0, r4
   1a5e4:	movt	r2, #2
   1a5e8:	movt	r3, #1
   1a5ec:	bl	23554 <flatcc_verify_table_as_root@@Base>
   1a5f0:	cmp	r0, #0
   1a5f4:	beq	1a61c <test_mixed_type_union@@Base+0x4f0>
   1a5f8:	bl	228d0 <flatcc_verify_error_string@@Base>
   1a5fc:	mov	r1, r0
   1a600:	movw	r0, #19485	; 0x4c1d
   1a604:	movt	r0, #2
   1a608:	bl	12e98 <printf@plt>
   1a60c:	mvn	r5, #0
   1a610:	mov	r0, r5
   1a614:	sub	sp, fp, #24
   1a618:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a61c:	cmp	r4, #0
   1a620:	beq	1aad4 <test_mixed_type_union@@Base+0x9a8>
   1a624:	ldr	r0, [r4, #4]
   1a628:	movw	r1, #20301	; 0x4f4d
   1a62c:	movt	r1, #21326	; 0x534e
   1a630:	cmp	r0, r1
   1a634:	bne	1aad4 <test_mixed_type_union@@Base+0x9a8>
   1a638:	ldr	r0, [r4]
   1a63c:	mov	r5, r4
   1a640:	ldr	r0, [r5, r0]!
   1a644:	mov	r7, r5
   1a648:	ldrh	r1, [r7, -r0]!
   1a64c:	cmp	r1, #7
   1a650:	bls	1a6c4 <test_mixed_type_union@@Base+0x598>
   1a654:	ldrh	r0, [r7, #6]
   1a658:	cmp	r0, #0
   1a65c:	beq	1a6c4 <test_mixed_type_union@@Base+0x598>
   1a660:	cmp	r1, #24
   1a664:	bcc	1a6d0 <test_mixed_type_union@@Base+0x5a4>
   1a668:	ldrh	r6, [r7, #22]
   1a66c:	cmp	r6, #0
   1a670:	beq	1a6d0 <test_mixed_type_union@@Base+0x5a4>
   1a674:	ldrh	r1, [r7, #4]
   1a678:	cmp	r1, #0
   1a67c:	ldrbne	r1, [r5, r1]
   1a680:	cmpne	r1, #0
   1a684:	bne	1a6f4 <test_mixed_type_union@@Base+0x5c8>
   1a688:	movw	r0, #30816	; 0x7860
   1a68c:	movt	r0, #2
   1a690:	b	1a6d8 <test_mixed_type_union@@Base+0x5ac>
   1a694:	mov	r0, r4
   1a698:	mov	r1, #8
   1a69c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1a6a0:	cmp	r0, #0
   1a6a4:	beq	1a574 <test_mixed_type_union@@Base+0x448>
   1a6a8:	str	r6, [r0]
   1a6ac:	mov	r0, r4
   1a6b0:	mov	r1, #9
   1a6b4:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1a6b8:	cmp	r0, #0
   1a6bc:	strne	r5, [r0]
   1a6c0:	b	1a574 <test_mixed_type_union@@Base+0x448>
   1a6c4:	movw	r0, #30112	; 0x75a0
   1a6c8:	movt	r0, #2
   1a6cc:	b	1a6d8 <test_mixed_type_union@@Base+0x5ac>
   1a6d0:	movw	r0, #30160	; 0x75d0
   1a6d4:	movt	r0, #2
   1a6d8:	bl	12eec <puts@plt>
   1a6dc:	mvn	r5, #0
   1a6e0:	mov	r0, r4
   1a6e4:	bl	22304 <flatcc_builder_aligned_free@@Base>
   1a6e8:	mov	r0, r5
   1a6ec:	sub	sp, fp, #24
   1a6f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a6f4:	cmp	r1, #8
   1a6f8:	bne	1a688 <test_mixed_type_union@@Base+0x55c>
   1a6fc:	mov	r1, r5
   1a700:	ldr	r0, [r1, r0]!
   1a704:	adds	r0, r1, r0
   1a708:	beq	1a724 <test_mixed_type_union@@Base+0x5f8>
   1a70c:	ldrh	r0, [r0]
   1a710:	cmp	r0, #20
   1a714:	bcc	1a734 <test_mixed_type_union@@Base+0x608>
   1a718:	movw	r0, #30768	; 0x7830
   1a71c:	movt	r0, #2
   1a720:	b	1a6d8 <test_mixed_type_union@@Base+0x5ac>
   1a724:	movw	r0, #30208	; 0x7600
   1a728:	movt	r0, #2
   1a72c:	bl	12eec <puts@plt>
   1a730:	b	1a778 <test_mixed_type_union@@Base+0x64c>
   1a734:	cmp	r0, #19
   1a738:	bne	1a778 <test_mixed_type_union@@Base+0x64c>
   1a73c:	ldrh	r0, [r7, #16]
   1a740:	cmp	r0, #0
   1a744:	beq	1a784 <test_mixed_type_union@@Base+0x658>
   1a748:	ldrb	r0, [r5, r0]
   1a74c:	cmp	r0, #8
   1a750:	bne	1a784 <test_mixed_type_union@@Base+0x658>
   1a754:	ldrh	r0, [r7, #18]
   1a758:	cmp	r0, #0
   1a75c:	movne	r1, r5
   1a760:	ldrne	r0, [r1, r0]!
   1a764:	addsne	r0, r1, r0
   1a768:	bne	1a790 <test_mixed_type_union@@Base+0x664>
   1a76c:	movw	r0, #30240	; 0x7620
   1a770:	movt	r0, #2
   1a774:	b	1a6d8 <test_mixed_type_union@@Base+0x5ac>
   1a778:	movw	r0, #30720	; 0x7800
   1a77c:	movt	r0, #2
   1a780:	b	1a6d8 <test_mixed_type_union@@Base+0x5ac>
   1a784:	movw	r0, #30656	; 0x77c0
   1a788:	movt	r0, #2
   1a78c:	b	1a6d8 <test_mixed_type_union@@Base+0x5ac>
   1a790:	ldrh	r0, [r0]
   1a794:	cmp	r0, #22
   1a798:	bne	1a7d8 <test_mixed_type_union@@Base+0x6ac>
   1a79c:	ldrh	r0, [r7, #8]
   1a7a0:	cmp	r0, #0
   1a7a4:	beq	1a7e4 <test_mixed_type_union@@Base+0x6b8>
   1a7a8:	ldrb	r0, [r5, r0]
   1a7ac:	cmp	r0, #2
   1a7b0:	bne	1a7e4 <test_mixed_type_union@@Base+0x6b8>
   1a7b4:	ldrh	r0, [r7, #10]
   1a7b8:	cmp	r0, #0
   1a7bc:	movne	r1, r5
   1a7c0:	ldrne	r0, [r1, r0]!
   1a7c4:	addsne	r0, r1, r0
   1a7c8:	bne	1a7f0 <test_mixed_type_union@@Base+0x6c4>
   1a7cc:	movw	r0, #30288	; 0x7650
   1a7d0:	movt	r0, #2
   1a7d4:	b	1a6d8 <test_mixed_type_union@@Base+0x5ac>
   1a7d8:	movw	r0, #30608	; 0x7790
   1a7dc:	movt	r0, #2
   1a7e0:	b	1a6d8 <test_mixed_type_union@@Base+0x5ac>
   1a7e4:	movw	r0, #30576	; 0x7770
   1a7e8:	movt	r0, #2
   1a7ec:	b	1a6d8 <test_mixed_type_union@@Base+0x5ac>
   1a7f0:	ldr	r2, [r0]
   1a7f4:	mov	r1, r0
   1a7f8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1a7fc:	cmp	r2, #6
   1a800:	bcc	1a7cc <test_mixed_type_union@@Base+0x6a0>
   1a804:	ldrh	r1, [r1, #4]
   1a808:	cmp	r1, #0
   1a80c:	beq	1a7cc <test_mixed_type_union@@Base+0x6a0>
   1a810:	ldr	r0, [r0, r1]
   1a814:	cmp	r0, #42	; 0x2a
   1a818:	bne	1a7cc <test_mixed_type_union@@Base+0x6a0>
   1a81c:	ldrh	r0, [r7, #12]
   1a820:	cmp	r0, #0
   1a824:	beq	1a884 <test_mixed_type_union@@Base+0x758>
   1a828:	ldrb	r0, [r5, r0]
   1a82c:	cmp	r0, #11
   1a830:	bne	1a884 <test_mixed_type_union@@Base+0x758>
   1a834:	ldrh	r0, [r7, #14]
   1a838:	cmp	r0, #0
   1a83c:	beq	1a890 <test_mixed_type_union@@Base+0x764>
   1a840:	mov	r1, r5
   1a844:	ldr	r0, [r1, r0]!
   1a848:	adds	r9, r1, r0
   1a84c:	add	r8, r9, #4
   1a850:	movne	r9, r8
   1a854:	beq	1a890 <test_mixed_type_union@@Base+0x764>
   1a858:	movw	r1, #19455	; 0x4bff
   1a85c:	mov	r0, r9
   1a860:	movt	r1, #2
   1a864:	bl	12e8c <strcmp@plt>
   1a868:	cmp	r0, #0
   1a86c:	beq	1a89c <test_mixed_type_union@@Base+0x770>
   1a870:	movw	r0, #19564	; 0x4c6c
   1a874:	mov	r1, r9
   1a878:	movt	r0, #2
   1a87c:	bl	12e98 <printf@plt>
   1a880:	b	1a6dc <test_mixed_type_union@@Base+0x5b0>
   1a884:	movw	r0, #30544	; 0x7750
   1a888:	movt	r0, #2
   1a88c:	b	1a6d8 <test_mixed_type_union@@Base+0x5ac>
   1a890:	movw	r0, #30336	; 0x7680
   1a894:	movt	r0, #2
   1a898:	b	1a6d8 <test_mixed_type_union@@Base+0x5ac>
   1a89c:	movw	r1, #19455	; 0x4bff
   1a8a0:	mov	r0, r8
   1a8a4:	movt	r1, #2
   1a8a8:	bl	12e8c <strcmp@plt>
   1a8ac:	cmp	r0, #0
   1a8b0:	beq	1a8c0 <test_mixed_type_union@@Base+0x794>
   1a8b4:	movw	r0, #19600	; 0x4c90
   1a8b8:	movt	r0, #2
   1a8bc:	b	1a8e0 <test_mixed_type_union@@Base+0x7b4>
   1a8c0:	movw	r1, #19455	; 0x4bff
   1a8c4:	mov	r0, r8
   1a8c8:	movt	r1, #2
   1a8cc:	bl	12e8c <strcmp@plt>
   1a8d0:	cmp	r0, #0
   1a8d4:	beq	1a8ec <test_mixed_type_union@@Base+0x7c0>
   1a8d8:	movw	r0, #19645	; 0x4cbd
   1a8dc:	movt	r0, #2
   1a8e0:	mov	r1, r8
   1a8e4:	bl	12e98 <printf@plt>
   1a8e8:	b	1a6dc <test_mixed_type_union@@Base+0x5b0>
   1a8ec:	ldrh	r1, [r7, #20]
   1a8f0:	mov	r0, r5
   1a8f4:	cmp	r1, #0
   1a8f8:	beq	1aa54 <test_mixed_type_union@@Base+0x928>
   1a8fc:	ldr	r2, [r0, r6]!
   1a900:	add	r0, r0, r2
   1a904:	mov	r2, r5
   1a908:	ldr	r3, [r2, r1]!
   1a90c:	add	r0, r0, #4
   1a910:	ldr	r3, [r2, r3]!
   1a914:	add	r6, r2, #4
   1a918:	mov	r2, #0
   1a91c:	ldr	r7, [r0, #-4]
   1a920:	cmp	r3, r7
   1a924:	bne	1aa78 <test_mixed_type_union@@Base+0x94c>
   1a928:	cmp	r2, #0
   1a92c:	bne	1acf0 <test_mixed_type_union@@Base+0xbc4>
   1a930:	ldr	r8, [r6, #-4]
   1a934:	cmp	r8, #0
   1a938:	beq	1acf0 <test_mixed_type_union@@Base+0xbc4>
   1a93c:	ldrb	r2, [r6]
   1a940:	cmp	r2, #0
   1a944:	beq	1aa48 <test_mixed_type_union@@Base+0x91c>
   1a948:	ldr	r9, [r0, #-4]
   1a94c:	cmp	r9, #0
   1a950:	beq	1ad10 <test_mixed_type_union@@Base+0xbe4>
   1a954:	cmp	r2, #8
   1a958:	bne	1aa48 <test_mixed_type_union@@Base+0x91c>
   1a95c:	cmp	r8, #1
   1a960:	bls	1acf0 <test_mixed_type_union@@Base+0xbc4>
   1a964:	ldrb	r2, [r6, #1]
   1a968:	cmp	r2, #0
   1a96c:	beq	1aa98 <test_mixed_type_union@@Base+0x96c>
   1a970:	cmp	r9, #1
   1a974:	bls	1ad10 <test_mixed_type_union@@Base+0xbe4>
   1a978:	cmp	r2, #2
   1a97c:	bne	1aa98 <test_mixed_type_union@@Base+0x96c>
   1a980:	mov	r2, r0
   1a984:	ldr	r3, [r2, #4]!
   1a988:	add	r2, r2, r3
   1a98c:	ldr	r7, [r2]
   1a990:	mov	r3, r2
   1a994:	ldrh	r7, [r3, -r7]!	; <UNPREDICTABLE>
   1a998:	cmp	r7, #6
   1a99c:	bcc	1aac4 <test_mixed_type_union@@Base+0x998>
   1a9a0:	ldrh	r3, [r3, #4]
   1a9a4:	cmp	r3, #0
   1a9a8:	beq	1aac4 <test_mixed_type_union@@Base+0x998>
   1a9ac:	ldr	r2, [r2, r3]
   1a9b0:	cmp	r2, #42	; 0x2a
   1a9b4:	bne	1aac4 <test_mixed_type_union@@Base+0x998>
   1a9b8:	cmp	r8, #2
   1a9bc:	bls	1acf0 <test_mixed_type_union@@Base+0xbc4>
   1a9c0:	ldrb	r2, [r6, #2]
   1a9c4:	cmp	r2, #0
   1a9c8:	beq	1ab14 <test_mixed_type_union@@Base+0x9e8>
   1a9cc:	cmp	r9, #2
   1a9d0:	bls	1ad10 <test_mixed_type_union@@Base+0xbe4>
   1a9d4:	cmp	r2, #2
   1a9d8:	bne	1ab14 <test_mixed_type_union@@Base+0x9e8>
   1a9dc:	mov	r2, r0
   1a9e0:	ldr	r3, [r2, #8]!
   1a9e4:	add	r2, r2, r3
   1a9e8:	ldr	r7, [r2]
   1a9ec:	mov	r3, r2
   1a9f0:	ldrh	r7, [r3, -r7]!	; <UNPREDICTABLE>
   1a9f4:	cmp	r7, #6
   1a9f8:	bcc	1ab20 <test_mixed_type_union@@Base+0x9f4>
   1a9fc:	ldrh	r3, [r3, #4]
   1aa00:	cmp	r3, #0
   1aa04:	beq	1ab20 <test_mixed_type_union@@Base+0x9f4>
   1aa08:	ldr	r2, [r2, r3]
   1aa0c:	cmp	r2, #1
   1aa10:	bne	1ab20 <test_mixed_type_union@@Base+0x9f4>
   1aa14:	cmp	r1, #0
   1aa18:	ldrne	r1, [r5, r1]!
   1aa1c:	ldrne	r1, [r5, r1]!
   1aa20:	cmpne	r1, #3
   1aa24:	bhi	1ab2c <test_mixed_type_union@@Base+0xa00>
   1aa28:	movw	r0, #22025	; 0x5609
   1aa2c:	movw	r1, #22080	; 0x5640
   1aa30:	movw	r3, #23607	; 0x5c37
   1aa34:	movw	r2, #405	; 0x195
   1aa38:	movt	r0, #2
   1aa3c:	movt	r1, #2
   1aa40:	movt	r3, #2
   1aa44:	bl	12f88 <__assert_fail@plt>
   1aa48:	movw	r0, #19690	; 0x4cea
   1aa4c:	movt	r0, #2
   1aa50:	b	1aacc <test_mixed_type_union@@Base+0x9a0>
   1aa54:	ldr	r2, [r0, r6]!
   1aa58:	mov	r6, #0
   1aa5c:	mov	r3, #0
   1aa60:	add	r0, r0, r2
   1aa64:	mov	r2, #1
   1aa68:	add	r0, r0, #4
   1aa6c:	ldr	r7, [r0, #-4]
   1aa70:	cmp	r3, r7
   1aa74:	beq	1a928 <test_mixed_type_union@@Base+0x7fc>
   1aa78:	movw	r0, #23784	; 0x5ce8
   1aa7c:	movw	r1, #20590	; 0x506e
   1aa80:	movw	r3, #24487	; 0x5fa7
   1aa84:	movw	r2, #823	; 0x337
   1aa88:	movt	r0, #2
   1aa8c:	movt	r1, #2
   1aa90:	movt	r3, #2
   1aa94:	bl	12f88 <__assert_fail@plt>
   1aa98:	movw	r0, #19727	; 0x4d0f
   1aa9c:	movt	r0, #2
   1aaa0:	b	1aacc <test_mixed_type_union@@Base+0x9a0>
   1aaa4:	movw	r0, #24222	; 0x5e9e
   1aaa8:	movw	r1, #21001	; 0x5209
   1aaac:	movw	r3, #24357	; 0x5f25
   1aab0:	mov	r2, #241	; 0xf1
   1aab4:	movt	r0, #2
   1aab8:	movt	r1, #2
   1aabc:	movt	r3, #2
   1aac0:	bl	12f88 <__assert_fail@plt>
   1aac4:	movw	r0, #19762	; 0x4d32
   1aac8:	movt	r0, #2
   1aacc:	bl	12e98 <printf@plt>
   1aad0:	b	1a6dc <test_mixed_type_union@@Base+0x5b0>
   1aad4:	movw	r0, #20552	; 0x5048
   1aad8:	movw	r1, #20590	; 0x506e
   1aadc:	movw	r3, #24420	; 0x5f64
   1aae0:	movw	r2, #819	; 0x333
   1aae4:	movt	r0, #2
   1aae8:	movt	r1, #2
   1aaec:	movt	r3, #2
   1aaf0:	bl	12f88 <__assert_fail@plt>
   1aaf4:	movw	r0, #24009	; 0x5dc9
   1aaf8:	movw	r1, #21001	; 0x5209
   1aafc:	movw	r3, #24153	; 0x5e59
   1ab00:	mov	r2, #239	; 0xef
   1ab04:	movt	r0, #2
   1ab08:	movt	r1, #2
   1ab0c:	movt	r3, #2
   1ab10:	bl	12f88 <__assert_fail@plt>
   1ab14:	movw	r0, #19812	; 0x4d64
   1ab18:	movt	r0, #2
   1ab1c:	b	1aacc <test_mixed_type_union@@Base+0x9a0>
   1ab20:	movw	r0, #19846	; 0x4d86
   1ab24:	movt	r0, #2
   1ab28:	b	1aacc <test_mixed_type_union@@Base+0x9a0>
   1ab2c:	add	r1, r5, #4
   1ab30:	ldrb	r1, [r1, #3]
   1ab34:	cmp	r1, #11
   1ab38:	bne	1ab74 <test_mixed_type_union@@Base+0xa48>
   1ab3c:	cmp	r9, #3
   1ab40:	bls	1ad30 <test_mixed_type_union@@Base+0xc04>
   1ab44:	ldr	r1, [r0, #12]!
   1ab48:	add	r0, r0, r1
   1ab4c:	movw	r1, #19466	; 0x4c0a
   1ab50:	add	r5, r0, #4
   1ab54:	movt	r1, #2
   1ab58:	mov	r0, r5
   1ab5c:	bl	12e8c <strcmp@plt>
   1ab60:	cmp	r0, #0
   1ab64:	beq	1ab80 <test_mixed_type_union@@Base+0xa54>
   1ab68:	movw	r0, #30368	; 0x76a0
   1ab6c:	movt	r0, #2
   1ab70:	b	1a6d8 <test_mixed_type_union@@Base+0x5ac>
   1ab74:	movw	r0, #30496	; 0x7720
   1ab78:	movt	r0, #2
   1ab7c:	b	1a6d8 <test_mixed_type_union@@Base+0x5ac>
   1ab80:	cmp	r8, #3
   1ab84:	bls	1acf0 <test_mixed_type_union@@Base+0xbc4>
   1ab88:	ldrb	r0, [r6, #3]
   1ab8c:	cmp	r0, #11
   1ab90:	bne	1abb8 <test_mixed_type_union@@Base+0xa8c>
   1ab94:	movw	r1, #19466	; 0x4c0a
   1ab98:	mov	r0, r5
   1ab9c:	movt	r1, #2
   1aba0:	bl	12e8c <strcmp@plt>
   1aba4:	cmp	r0, #0
   1aba8:	beq	1abc4 <test_mixed_type_union@@Base+0xa98>
   1abac:	movw	r0, #30432	; 0x76e0
   1abb0:	movt	r0, #2
   1abb4:	b	1a6d8 <test_mixed_type_union@@Base+0x5ac>
   1abb8:	movw	r0, #19895	; 0x4db7
   1abbc:	movt	r0, #2
   1abc0:	b	1aacc <test_mixed_type_union@@Base+0x9a0>
   1abc4:	cmp	r8, #4
   1abc8:	bls	1acf0 <test_mixed_type_union@@Base+0xbc4>
   1abcc:	ldrb	r0, [r6, #4]
   1abd0:	cmp	r0, #0
   1abd4:	beq	1acb4 <test_mixed_type_union@@Base+0xb88>
   1abd8:	cmp	r9, #4
   1abdc:	bls	1ad10 <test_mixed_type_union@@Base+0xbe4>
   1abe0:	cmp	r0, #9
   1abe4:	bne	1acb4 <test_mixed_type_union@@Base+0xb88>
   1abe8:	cmp	r8, #5
   1abec:	bls	1acf0 <test_mixed_type_union@@Base+0xbc4>
   1abf0:	ldrb	r0, [r6, #5]
   1abf4:	cmp	r0, #0
   1abf8:	beq	1acc0 <test_mixed_type_union@@Base+0xb94>
   1abfc:	cmp	r9, #5
   1ac00:	bls	1ad10 <test_mixed_type_union@@Base+0xbe4>
   1ac04:	cmp	r0, #9
   1ac08:	bne	1acc0 <test_mixed_type_union@@Base+0xb94>
   1ac0c:	cmp	r8, #6
   1ac10:	bls	1acf0 <test_mixed_type_union@@Base+0xbc4>
   1ac14:	ldrb	r0, [r6, #6]
   1ac18:	cmp	r0, #0
   1ac1c:	beq	1accc <test_mixed_type_union@@Base+0xba0>
   1ac20:	cmp	r9, #6
   1ac24:	bls	1ad10 <test_mixed_type_union@@Base+0xbe4>
   1ac28:	cmp	r0, #9
   1ac2c:	bne	1accc <test_mixed_type_union@@Base+0xba0>
   1ac30:	cmp	r8, #7
   1ac34:	bls	1acf0 <test_mixed_type_union@@Base+0xbc4>
   1ac38:	ldrb	r0, [r6, #7]
   1ac3c:	cmp	r0, #0
   1ac40:	beq	1acd8 <test_mixed_type_union@@Base+0xbac>
   1ac44:	cmp	r9, #7
   1ac48:	bls	1ad10 <test_mixed_type_union@@Base+0xbe4>
   1ac4c:	cmp	r0, #9
   1ac50:	bne	1acd8 <test_mixed_type_union@@Base+0xbac>
   1ac54:	cmp	r8, #8
   1ac58:	bls	1acf0 <test_mixed_type_union@@Base+0xbc4>
   1ac5c:	ldrb	r0, [r6, #8]
   1ac60:	cmp	r0, #0
   1ac64:	beq	1ace4 <test_mixed_type_union@@Base+0xbb8>
   1ac68:	cmp	r9, #8
   1ac6c:	bls	1ad10 <test_mixed_type_union@@Base+0xbe4>
   1ac70:	cmp	r0, #11
   1ac74:	bne	1ace4 <test_mixed_type_union@@Base+0xbb8>
   1ac78:	cmp	r8, #9
   1ac7c:	bls	1acf0 <test_mixed_type_union@@Base+0xbc4>
   1ac80:	ldrb	r0, [r6, #9]
   1ac84:	cmp	r0, #0
   1ac88:	beq	1ace4 <test_mixed_type_union@@Base+0xbb8>
   1ac8c:	cmp	r9, #9
   1ac90:	bls	1ad10 <test_mixed_type_union@@Base+0xbe4>
   1ac94:	cmp	r0, #11
   1ac98:	bne	1ace4 <test_mixed_type_union@@Base+0xbb8>
   1ac9c:	mov	r5, #0
   1aca0:	cmp	r8, #10
   1aca4:	beq	1a6e0 <test_mixed_type_union@@Base+0x5b4>
   1aca8:	movw	r0, #20134	; 0x4ea6
   1acac:	movt	r0, #2
   1acb0:	b	1aacc <test_mixed_type_union@@Base+0x9a0>
   1acb4:	movw	r0, #19951	; 0x4def
   1acb8:	movt	r0, #2
   1acbc:	b	1aacc <test_mixed_type_union@@Base+0x9a0>
   1acc0:	movw	r0, #19985	; 0x4e11
   1acc4:	movt	r0, #2
   1acc8:	b	1aacc <test_mixed_type_union@@Base+0x9a0>
   1accc:	movw	r0, #20019	; 0x4e33
   1acd0:	movt	r0, #2
   1acd4:	b	1aacc <test_mixed_type_union@@Base+0x9a0>
   1acd8:	movw	r0, #20055	; 0x4e57
   1acdc:	movt	r0, #2
   1ace0:	b	1aacc <test_mixed_type_union@@Base+0x9a0>
   1ace4:	movw	r0, #20090	; 0x4e7a
   1ace8:	movt	r0, #2
   1acec:	b	1aacc <test_mixed_type_union@@Base+0x9a0>
   1acf0:	movw	r0, #23977	; 0x5da9
   1acf4:	movw	r1, #20590	; 0x506e
   1acf8:	movw	r3, #24571	; 0x5ffb
   1acfc:	movw	r2, #773	; 0x305
   1ad00:	movt	r0, #2
   1ad04:	movt	r1, #2
   1ad08:	movt	r3, #2
   1ad0c:	bl	12f88 <__assert_fail@plt>
   1ad10:	movw	r0, #22025	; 0x5609
   1ad14:	movw	r1, #22080	; 0x5640
   1ad18:	movw	r3, #23700	; 0x5c94
   1ad1c:	mov	r2, #117	; 0x75
   1ad20:	movt	r0, #2
   1ad24:	movt	r1, #2
   1ad28:	movt	r3, #2
   1ad2c:	bl	12f88 <__assert_fail@plt>
   1ad30:	movw	r0, #22025	; 0x5609
   1ad34:	movw	r1, #22080	; 0x5640
   1ad38:	movw	r3, #24667	; 0x605b
   1ad3c:	mov	r2, #119	; 0x77
   1ad40:	movt	r0, #2
   1ad44:	movt	r1, #2
   1ad48:	movt	r3, #2
   1ad4c:	bl	12f88 <__assert_fail@plt>

0001ad50 <test_add_set_defaults@@Base>:
   1ad50:	push	{r4, r5, r6, sl, fp, lr}
   1ad54:	add	fp, sp, #16
   1ad58:	sub	sp, sp, #8
   1ad5c:	mov	r4, r0
   1ad60:	bl	1dd44 <flatcc_builder_reset@@Base>
   1ad64:	movw	r1, #17220	; 0x4344
   1ad68:	mov	r0, r4
   1ad6c:	mov	r2, #0
   1ad70:	mov	r3, #0
   1ad74:	movt	r1, #2
   1ad78:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   1ad7c:	cmp	r0, #0
   1ad80:	bne	1ad90 <test_add_set_defaults@@Base+0x40>
   1ad84:	mov	r0, r4
   1ad88:	mov	r1, #36	; 0x24
   1ad8c:	bl	1fcbc <flatcc_builder_start_table@@Base>
   1ad90:	movw	r1, #17288	; 0x4388
   1ad94:	mov	r0, r4
   1ad98:	movt	r1, #2
   1ad9c:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   1ada0:	cmp	r0, #0
   1ada4:	beq	1adc0 <test_add_set_defaults@@Base+0x70>
   1ada8:	mov	r5, r0
   1adac:	mov	r0, r4
   1adb0:	mov	r1, #3
   1adb4:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1adb8:	cmp	r0, #0
   1adbc:	strne	r5, [r0]
   1adc0:	mov	r0, r4
   1adc4:	mov	r1, #1
   1adc8:	mov	r2, #2
   1adcc:	mov	r3, #2
   1add0:	bl	2102c <flatcc_builder_table_add@@Base>
   1add4:	cmp	r0, #0
   1add8:	mov	r2, #1
   1addc:	movne	r1, #100	; 0x64
   1ade0:	strhne	r1, [r0]
   1ade4:	movw	r1, #25228	; 0x628c
   1ade8:	mov	r0, r4
   1adec:	movt	r1, #2
   1adf0:	bl	205dc <flatcc_builder_check_required@@Base>
   1adf4:	cmp	r0, #0
   1adf8:	beq	1b04c <test_add_set_defaults@@Base+0x2fc>
   1adfc:	mov	r0, r4
   1ae00:	bl	2066c <flatcc_builder_end_table@@Base>
   1ae04:	mov	r1, r0
   1ae08:	mov	r0, r4
   1ae0c:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   1ae10:	add	r1, sp, #4
   1ae14:	mov	r0, r4
   1ae18:	bl	2205c <flatcc_builder_get_direct_buffer@@Base>
   1ae1c:	cmp	r0, #0
   1ae20:	beq	1b02c <test_add_set_defaults@@Base+0x2dc>
   1ae24:	ldr	r1, [r0, #4]
   1ae28:	movw	r6, #20301	; 0x4f4d
   1ae2c:	movt	r6, #21326	; 0x534e
   1ae30:	cmp	r1, r6
   1ae34:	bne	1b02c <test_add_set_defaults@@Base+0x2dc>
   1ae38:	ldr	r1, [r0]
   1ae3c:	ldr	r1, [r0, r1]!
   1ae40:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   1ae44:	cmp	r1, #9
   1ae48:	bls	1ae64 <test_add_set_defaults@@Base+0x114>
   1ae4c:	ldrh	r2, [r0, #8]
   1ae50:	cmp	r2, #0
   1ae54:	beq	1ae6c <test_add_set_defaults@@Base+0x11c>
   1ae58:	movw	r0, #31136	; 0x79a0
   1ae5c:	movt	r0, #2
   1ae60:	b	1b010 <test_add_set_defaults@@Base+0x2c0>
   1ae64:	cmp	r1, #8
   1ae68:	bcc	1ae98 <test_add_set_defaults@@Base+0x148>
   1ae6c:	ldrh	r2, [r0, #6]
   1ae70:	cmp	r2, #0
   1ae74:	beq	1ae98 <test_add_set_defaults@@Base+0x148>
   1ae78:	cmp	r1, #18
   1ae7c:	bcc	1aea4 <test_add_set_defaults@@Base+0x154>
   1ae80:	ldrh	r0, [r0, #16]
   1ae84:	cmp	r0, #0
   1ae88:	beq	1aea4 <test_add_set_defaults@@Base+0x154>
   1ae8c:	movw	r0, #31088	; 0x7970
   1ae90:	movt	r0, #2
   1ae94:	b	1b010 <test_add_set_defaults@@Base+0x2c0>
   1ae98:	movw	r0, #30848	; 0x7880
   1ae9c:	movt	r0, #2
   1aea0:	b	1b010 <test_add_set_defaults@@Base+0x2c0>
   1aea4:	mov	r0, r4
   1aea8:	bl	1dd44 <flatcc_builder_reset@@Base>
   1aeac:	movw	r1, #17220	; 0x4344
   1aeb0:	mov	r0, r4
   1aeb4:	mov	r2, #0
   1aeb8:	mov	r3, #0
   1aebc:	movt	r1, #2
   1aec0:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   1aec4:	cmp	r0, #0
   1aec8:	bne	1aed8 <test_add_set_defaults@@Base+0x188>
   1aecc:	mov	r0, r4
   1aed0:	mov	r1, #36	; 0x24
   1aed4:	bl	1fcbc <flatcc_builder_start_table@@Base>
   1aed8:	movw	r1, #17288	; 0x4388
   1aedc:	mov	r0, r4
   1aee0:	movt	r1, #2
   1aee4:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   1aee8:	cmp	r0, #0
   1aeec:	beq	1af08 <test_add_set_defaults@@Base+0x1b8>
   1aef0:	mov	r5, r0
   1aef4:	mov	r0, r4
   1aef8:	mov	r1, #3
   1aefc:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1af00:	cmp	r0, #0
   1af04:	strne	r5, [r0]
   1af08:	mov	r0, r4
   1af0c:	mov	r1, #2
   1af10:	mov	r2, #2
   1af14:	mov	r3, #2
   1af18:	bl	2102c <flatcc_builder_table_add@@Base>
   1af1c:	cmp	r0, #0
   1af20:	mov	r2, #2
   1af24:	mov	r3, #2
   1af28:	movne	r1, #100	; 0x64
   1af2c:	strhne	r1, [r0]
   1af30:	mov	r0, r4
   1af34:	mov	r1, #1
   1af38:	bl	2102c <flatcc_builder_table_add@@Base>
   1af3c:	cmp	r0, #0
   1af40:	mov	r2, #1
   1af44:	mov	r3, #1
   1af48:	movne	r1, #100	; 0x64
   1af4c:	strhne	r1, [r0]
   1af50:	mov	r0, r4
   1af54:	mov	r1, #6
   1af58:	bl	2102c <flatcc_builder_table_add@@Base>
   1af5c:	cmp	r0, #0
   1af60:	mov	r2, #1
   1af64:	movne	r1, #8
   1af68:	strbne	r1, [r0]
   1af6c:	movw	r1, #25228	; 0x628c
   1af70:	mov	r0, r4
   1af74:	movt	r1, #2
   1af78:	bl	205dc <flatcc_builder_check_required@@Base>
   1af7c:	cmp	r0, #0
   1af80:	beq	1b04c <test_add_set_defaults@@Base+0x2fc>
   1af84:	mov	r0, r4
   1af88:	bl	2066c <flatcc_builder_end_table@@Base>
   1af8c:	mov	r1, r0
   1af90:	mov	r0, r4
   1af94:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   1af98:	add	r1, sp, #4
   1af9c:	mov	r0, r4
   1afa0:	bl	2205c <flatcc_builder_get_direct_buffer@@Base>
   1afa4:	cmp	r0, #0
   1afa8:	beq	1b02c <test_add_set_defaults@@Base+0x2dc>
   1afac:	ldr	r1, [r0, #4]
   1afb0:	cmp	r1, r6
   1afb4:	bne	1b02c <test_add_set_defaults@@Base+0x2dc>
   1afb8:	ldr	r1, [r0]
   1afbc:	ldr	r1, [r0, r1]!
   1afc0:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   1afc4:	cmp	r1, #9
   1afc8:	bls	1b008 <test_add_set_defaults@@Base+0x2b8>
   1afcc:	ldrh	r2, [r0, #8]
   1afd0:	cmp	r2, #0
   1afd4:	beq	1b008 <test_add_set_defaults@@Base+0x2b8>
   1afd8:	ldrh	r2, [r0, #6]
   1afdc:	cmp	r2, #0
   1afe0:	beq	1b020 <test_add_set_defaults@@Base+0x2d0>
   1afe4:	cmp	r1, #18
   1afe8:	bcc	1affc <test_add_set_defaults@@Base+0x2ac>
   1afec:	ldrh	r1, [r0, #16]
   1aff0:	mov	r0, #0
   1aff4:	cmp	r1, #0
   1aff8:	bne	1b018 <test_add_set_defaults@@Base+0x2c8>
   1affc:	movw	r0, #31024	; 0x7930
   1b000:	movt	r0, #2
   1b004:	b	1b010 <test_add_set_defaults@@Base+0x2c0>
   1b008:	movw	r0, #30896	; 0x78b0
   1b00c:	movt	r0, #2
   1b010:	bl	12eec <puts@plt>
   1b014:	mvn	r0, #0
   1b018:	sub	sp, fp, #16
   1b01c:	pop	{r4, r5, r6, sl, fp, pc}
   1b020:	movw	r0, #30960	; 0x78f0
   1b024:	movt	r0, #2
   1b028:	b	1b010 <test_add_set_defaults@@Base+0x2c0>
   1b02c:	movw	r0, #20552	; 0x5048
   1b030:	movw	r1, #20590	; 0x506e
   1b034:	movw	r3, #20754	; 0x5112
   1b038:	movw	r2, #697	; 0x2b9
   1b03c:	movt	r0, #2
   1b040:	movt	r1, #2
   1b044:	movt	r3, #2
   1b048:	bl	12f88 <__assert_fail@plt>
   1b04c:	movw	r0, #21291	; 0x532b
   1b050:	movw	r1, #21001	; 0x5209
   1b054:	movw	r3, #21453	; 0x53cd
   1b058:	mov	r2, #235	; 0xeb
   1b05c:	movt	r0, #2
   1b060:	movt	r1, #2
   1b064:	movt	r3, #2
   1b068:	bl	12f88 <__assert_fail@plt>

0001b06c <test_nested_buffer@@Base>:
   1b06c:	push	{r4, r5, r6, r7, fp, lr}
   1b070:	add	fp, sp, #16
   1b074:	sub	sp, sp, #8
   1b078:	mov	r4, r0
   1b07c:	bl	1dd44 <flatcc_builder_reset@@Base>
   1b080:	movw	r1, #17220	; 0x4344
   1b084:	mov	r0, r4
   1b088:	mov	r2, #0
   1b08c:	mov	r3, #0
   1b090:	movt	r1, #2
   1b094:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   1b098:	cmp	r0, #0
   1b09c:	bne	1b0ac <test_nested_buffer@@Base+0x40>
   1b0a0:	mov	r0, r4
   1b0a4:	mov	r1, #36	; 0x24
   1b0a8:	bl	1fcbc <flatcc_builder_start_table@@Base>
   1b0ac:	movw	r1, #17288	; 0x4388
   1b0b0:	mov	r0, r4
   1b0b4:	movt	r1, #2
   1b0b8:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   1b0bc:	cmp	r0, #0
   1b0c0:	beq	1b0dc <test_nested_buffer@@Base+0x70>
   1b0c4:	mov	r5, r0
   1b0c8:	mov	r0, r4
   1b0cc:	mov	r1, #3
   1b0d0:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1b0d4:	cmp	r0, #0
   1b0d8:	strne	r5, [r0]
   1b0dc:	movw	r1, #17220	; 0x4344
   1b0e0:	mov	r0, r4
   1b0e4:	mov	r2, #0
   1b0e8:	mov	r3, #0
   1b0ec:	movt	r1, #2
   1b0f0:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   1b0f4:	cmp	r0, #0
   1b0f8:	bne	1b108 <test_nested_buffer@@Base+0x9c>
   1b0fc:	mov	r0, r4
   1b100:	mov	r1, #36	; 0x24
   1b104:	bl	1fcbc <flatcc_builder_start_table@@Base>
   1b108:	movw	r1, #20172	; 0x4ecc
   1b10c:	mov	r0, r4
   1b110:	movt	r1, #2
   1b114:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   1b118:	cmp	r0, #0
   1b11c:	beq	1b138 <test_nested_buffer@@Base+0xcc>
   1b120:	mov	r5, r0
   1b124:	mov	r0, r4
   1b128:	mov	r1, #3
   1b12c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1b130:	cmp	r0, #0
   1b134:	strne	r5, [r0]
   1b138:	movw	r1, #25228	; 0x628c
   1b13c:	mov	r0, r4
   1b140:	mov	r2, #1
   1b144:	movt	r1, #2
   1b148:	bl	205dc <flatcc_builder_check_required@@Base>
   1b14c:	cmp	r0, #0
   1b150:	beq	1b384 <test_nested_buffer@@Base+0x318>
   1b154:	mov	r0, r4
   1b158:	bl	2066c <flatcc_builder_end_table@@Base>
   1b15c:	mov	r1, r0
   1b160:	mov	r0, r4
   1b164:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   1b168:	cmp	r0, #0
   1b16c:	beq	1b188 <test_nested_buffer@@Base+0x11c>
   1b170:	mov	r5, r0
   1b174:	mov	r0, r4
   1b178:	mov	r1, #13
   1b17c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1b180:	cmp	r0, #0
   1b184:	strne	r5, [r0]
   1b188:	mov	r0, r4
   1b18c:	mov	r1, #2
   1b190:	mov	r2, #2
   1b194:	mov	r3, #2
   1b198:	bl	2102c <flatcc_builder_table_add@@Base>
   1b19c:	cmp	r0, #0
   1b1a0:	mov	r2, #1
   1b1a4:	movne	r1, #10
   1b1a8:	strhne	r1, [r0]
   1b1ac:	movw	r1, #25228	; 0x628c
   1b1b0:	mov	r0, r4
   1b1b4:	movt	r1, #2
   1b1b8:	bl	205dc <flatcc_builder_check_required@@Base>
   1b1bc:	cmp	r0, #0
   1b1c0:	beq	1b384 <test_nested_buffer@@Base+0x318>
   1b1c4:	mov	r0, r4
   1b1c8:	bl	2066c <flatcc_builder_end_table@@Base>
   1b1cc:	mov	r1, r0
   1b1d0:	mov	r0, r4
   1b1d4:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   1b1d8:	add	r1, sp, #4
   1b1dc:	mov	r0, r4
   1b1e0:	bl	2205c <flatcc_builder_get_direct_buffer@@Base>
   1b1e4:	mov	r4, r0
   1b1e8:	movw	r0, #41072	; 0xa070
   1b1ec:	ldr	r2, [sp, #4]
   1b1f0:	movt	r0, #3
   1b1f4:	mov	r1, r4
   1b1f8:	ldr	r3, [r0]
   1b1fc:	movw	r0, #20188	; 0x4edc
   1b200:	movt	r0, #2
   1b204:	bl	13674 <test_type_aliases@@Base+0x51c>
   1b208:	cmp	r4, #0
   1b20c:	beq	1b358 <test_nested_buffer@@Base+0x2ec>
   1b210:	ldr	r0, [r4, #4]
   1b214:	movw	r6, #20301	; 0x4f4d
   1b218:	movt	r6, #21326	; 0x534e
   1b21c:	cmp	r0, r6
   1b220:	bne	1b358 <test_nested_buffer@@Base+0x2ec>
   1b224:	ldr	r0, [r4]
   1b228:	ldr	r0, [r4, r0]!
   1b22c:	mov	r5, r4
   1b230:	ldrh	r7, [r5, -r0]!
   1b234:	cmp	r7, #11
   1b238:	bls	1b364 <test_nested_buffer@@Base+0x2f8>
   1b23c:	ldrh	r0, [r5, #10]
   1b240:	cmp	r0, #0
   1b244:	beq	1b364 <test_nested_buffer@@Base+0x2f8>
   1b248:	mov	r1, r4
   1b24c:	ldr	r0, [r1, r0]!
   1b250:	add	r0, r1, r0
   1b254:	movw	r1, #17288	; 0x4388
   1b258:	add	r0, r0, #4
   1b25c:	movt	r1, #2
   1b260:	bl	12e8c <strcmp@plt>
   1b264:	cmp	r0, #0
   1b268:	beq	1b284 <test_nested_buffer@@Base+0x218>
   1b26c:	movw	r0, #31344	; 0x7a70
   1b270:	movt	r0, #2
   1b274:	bl	12eec <puts@plt>
   1b278:	mvn	r0, #0
   1b27c:	sub	sp, fp, #16
   1b280:	pop	{r4, r5, r6, r7, fp, pc}
   1b284:	mov	r0, #0
   1b288:	cmp	r7, #32
   1b28c:	bcc	1b2bc <test_nested_buffer@@Base+0x250>
   1b290:	ldrh	r1, [r5, #30]
   1b294:	cmp	r1, #0
   1b298:	beq	1b2bc <test_nested_buffer@@Base+0x250>
   1b29c:	mov	r2, r4
   1b2a0:	ldr	r1, [r2, r1]!
   1b2a4:	add	r1, r2, r1
   1b2a8:	ldr	r2, [r1, #8]
   1b2ac:	cmp	r2, r6
   1b2b0:	addeq	r0, r1, #4
   1b2b4:	ldreq	r1, [r0]
   1b2b8:	addeq	r0, r0, r1
   1b2bc:	ldrh	r1, [r5, #8]
   1b2c0:	cmp	r1, #0
   1b2c4:	beq	1b340 <test_nested_buffer@@Base+0x2d4>
   1b2c8:	add	r1, r4, r1
   1b2cc:	ldrh	r1, [r1]
   1b2d0:	cmp	r1, #10
   1b2d4:	bne	1b340 <test_nested_buffer@@Base+0x2d4>
   1b2d8:	cmp	r0, #0
   1b2dc:	beq	1b358 <test_nested_buffer@@Base+0x2ec>
   1b2e0:	ldr	r2, [r0]
   1b2e4:	mov	r1, r0
   1b2e8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1b2ec:	cmp	r2, #12
   1b2f0:	bcc	1b364 <test_nested_buffer@@Base+0x2f8>
   1b2f4:	ldrh	r1, [r1, #10]
   1b2f8:	cmp	r1, #0
   1b2fc:	beq	1b364 <test_nested_buffer@@Base+0x2f8>
   1b300:	ldr	r1, [r0, r1]!
   1b304:	add	r0, r0, r1
   1b308:	movw	r1, #20172	; 0x4ecc
   1b30c:	add	r0, r0, #4
   1b310:	movt	r1, #2
   1b314:	bl	12e8c <strcmp@plt>
   1b318:	cmp	r0, #0
   1b31c:	moveq	r0, #0
   1b320:	subeq	sp, fp, #16
   1b324:	popeq	{r4, r5, r6, r7, fp, pc}
   1b328:	movw	r0, #31264	; 0x7a20
   1b32c:	movt	r0, #2
   1b330:	bl	12eec <puts@plt>
   1b334:	mvn	r0, #0
   1b338:	sub	sp, fp, #16
   1b33c:	pop	{r4, r5, r6, r7, fp, pc}
   1b340:	movw	r0, #31296	; 0x7a40
   1b344:	movt	r0, #2
   1b348:	bl	12eec <puts@plt>
   1b34c:	mvn	r0, #0
   1b350:	sub	sp, fp, #16
   1b354:	pop	{r4, r5, r6, r7, fp, pc}
   1b358:	movw	r0, #20552	; 0x5048
   1b35c:	movt	r0, #2
   1b360:	b	1b36c <test_nested_buffer@@Base+0x300>
   1b364:	movw	r0, #21903	; 0x558f
   1b368:	movt	r0, #2
   1b36c:	movw	r1, #20590	; 0x506e
   1b370:	movw	r3, #21822	; 0x553e
   1b374:	movw	r2, #699	; 0x2bb
   1b378:	movt	r1, #2
   1b37c:	movt	r3, #2
   1b380:	bl	12f88 <__assert_fail@plt>
   1b384:	movw	r0, #21291	; 0x532b
   1b388:	movw	r1, #21001	; 0x5209
   1b38c:	movw	r3, #21453	; 0x53cd
   1b390:	mov	r2, #235	; 0xeb
   1b394:	movt	r0, #2
   1b398:	movt	r1, #2
   1b39c:	movt	r3, #2
   1b3a0:	bl	12f88 <__assert_fail@plt>

0001b3a4 <test_nested_buffer_first@@Base>:
   1b3a4:	push	{r4, r5, r6, r7, fp, lr}
   1b3a8:	add	fp, sp, #16
   1b3ac:	sub	sp, sp, #8
   1b3b0:	mov	r4, r0
   1b3b4:	bl	1dd44 <flatcc_builder_reset@@Base>
   1b3b8:	movw	r1, #17220	; 0x4344
   1b3bc:	mov	r0, r4
   1b3c0:	mov	r2, #0
   1b3c4:	mov	r3, #0
   1b3c8:	movt	r1, #2
   1b3cc:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   1b3d0:	cmp	r0, #0
   1b3d4:	bne	1b3e4 <test_nested_buffer_first@@Base+0x40>
   1b3d8:	mov	r0, r4
   1b3dc:	mov	r1, #36	; 0x24
   1b3e0:	bl	1fcbc <flatcc_builder_start_table@@Base>
   1b3e4:	movw	r1, #17220	; 0x4344
   1b3e8:	mov	r0, r4
   1b3ec:	mov	r2, #0
   1b3f0:	mov	r3, #0
   1b3f4:	movt	r1, #2
   1b3f8:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   1b3fc:	cmp	r0, #0
   1b400:	bne	1b410 <test_nested_buffer_first@@Base+0x6c>
   1b404:	mov	r0, r4
   1b408:	mov	r1, #36	; 0x24
   1b40c:	bl	1fcbc <flatcc_builder_start_table@@Base>
   1b410:	movw	r1, #20172	; 0x4ecc
   1b414:	mov	r0, r4
   1b418:	movt	r1, #2
   1b41c:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   1b420:	cmp	r0, #0
   1b424:	beq	1b440 <test_nested_buffer_first@@Base+0x9c>
   1b428:	mov	r5, r0
   1b42c:	mov	r0, r4
   1b430:	mov	r1, #3
   1b434:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1b438:	cmp	r0, #0
   1b43c:	strne	r5, [r0]
   1b440:	movw	r1, #25228	; 0x628c
   1b444:	mov	r0, r4
   1b448:	mov	r2, #1
   1b44c:	movt	r1, #2
   1b450:	bl	205dc <flatcc_builder_check_required@@Base>
   1b454:	cmp	r0, #0
   1b458:	beq	1b6bc <test_nested_buffer_first@@Base+0x318>
   1b45c:	mov	r0, r4
   1b460:	bl	2066c <flatcc_builder_end_table@@Base>
   1b464:	mov	r1, r0
   1b468:	mov	r0, r4
   1b46c:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   1b470:	cmp	r0, #0
   1b474:	beq	1b490 <test_nested_buffer_first@@Base+0xec>
   1b478:	mov	r5, r0
   1b47c:	mov	r0, r4
   1b480:	mov	r1, #13
   1b484:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1b488:	cmp	r0, #0
   1b48c:	strne	r5, [r0]
   1b490:	mov	r0, r4
   1b494:	mov	r1, #2
   1b498:	mov	r2, #2
   1b49c:	mov	r3, #2
   1b4a0:	bl	2102c <flatcc_builder_table_add@@Base>
   1b4a4:	cmp	r0, #0
   1b4a8:	movne	r1, #10
   1b4ac:	strhne	r1, [r0]
   1b4b0:	movw	r1, #17288	; 0x4388
   1b4b4:	mov	r0, r4
   1b4b8:	movt	r1, #2
   1b4bc:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   1b4c0:	cmp	r0, #0
   1b4c4:	beq	1b4e0 <test_nested_buffer_first@@Base+0x13c>
   1b4c8:	mov	r5, r0
   1b4cc:	mov	r0, r4
   1b4d0:	mov	r1, #3
   1b4d4:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1b4d8:	cmp	r0, #0
   1b4dc:	strne	r5, [r0]
   1b4e0:	movw	r1, #25228	; 0x628c
   1b4e4:	mov	r0, r4
   1b4e8:	mov	r2, #1
   1b4ec:	movt	r1, #2
   1b4f0:	bl	205dc <flatcc_builder_check_required@@Base>
   1b4f4:	cmp	r0, #0
   1b4f8:	beq	1b6bc <test_nested_buffer_first@@Base+0x318>
   1b4fc:	mov	r0, r4
   1b500:	bl	2066c <flatcc_builder_end_table@@Base>
   1b504:	mov	r1, r0
   1b508:	mov	r0, r4
   1b50c:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   1b510:	add	r1, sp, #4
   1b514:	mov	r0, r4
   1b518:	bl	2205c <flatcc_builder_get_direct_buffer@@Base>
   1b51c:	mov	r4, r0
   1b520:	movw	r0, #41072	; 0xa070
   1b524:	ldr	r2, [sp, #4]
   1b528:	movt	r0, #3
   1b52c:	mov	r1, r4
   1b530:	ldr	r3, [r0]
   1b534:	movw	r0, #20188	; 0x4edc
   1b538:	movt	r0, #2
   1b53c:	bl	13674 <test_type_aliases@@Base+0x51c>
   1b540:	cmp	r4, #0
   1b544:	beq	1b690 <test_nested_buffer_first@@Base+0x2ec>
   1b548:	ldr	r0, [r4, #4]
   1b54c:	movw	r6, #20301	; 0x4f4d
   1b550:	movt	r6, #21326	; 0x534e
   1b554:	cmp	r0, r6
   1b558:	bne	1b690 <test_nested_buffer_first@@Base+0x2ec>
   1b55c:	ldr	r0, [r4]
   1b560:	ldr	r0, [r4, r0]!
   1b564:	mov	r5, r4
   1b568:	ldrh	r7, [r5, -r0]!
   1b56c:	cmp	r7, #11
   1b570:	bls	1b69c <test_nested_buffer_first@@Base+0x2f8>
   1b574:	ldrh	r0, [r5, #10]
   1b578:	cmp	r0, #0
   1b57c:	beq	1b69c <test_nested_buffer_first@@Base+0x2f8>
   1b580:	mov	r1, r4
   1b584:	ldr	r0, [r1, r0]!
   1b588:	add	r0, r1, r0
   1b58c:	movw	r1, #17288	; 0x4388
   1b590:	add	r0, r0, #4
   1b594:	movt	r1, #2
   1b598:	bl	12e8c <strcmp@plt>
   1b59c:	cmp	r0, #0
   1b5a0:	beq	1b5bc <test_nested_buffer_first@@Base+0x218>
   1b5a4:	movw	r0, #31344	; 0x7a70
   1b5a8:	movt	r0, #2
   1b5ac:	bl	12eec <puts@plt>
   1b5b0:	mvn	r0, #0
   1b5b4:	sub	sp, fp, #16
   1b5b8:	pop	{r4, r5, r6, r7, fp, pc}
   1b5bc:	mov	r0, #0
   1b5c0:	cmp	r7, #32
   1b5c4:	bcc	1b5f4 <test_nested_buffer_first@@Base+0x250>
   1b5c8:	ldrh	r1, [r5, #30]
   1b5cc:	cmp	r1, #0
   1b5d0:	beq	1b5f4 <test_nested_buffer_first@@Base+0x250>
   1b5d4:	mov	r2, r4
   1b5d8:	ldr	r1, [r2, r1]!
   1b5dc:	add	r1, r2, r1
   1b5e0:	ldr	r2, [r1, #8]
   1b5e4:	cmp	r2, r6
   1b5e8:	addeq	r0, r1, #4
   1b5ec:	ldreq	r1, [r0]
   1b5f0:	addeq	r0, r0, r1
   1b5f4:	ldrh	r1, [r5, #8]
   1b5f8:	cmp	r1, #0
   1b5fc:	beq	1b678 <test_nested_buffer_first@@Base+0x2d4>
   1b600:	add	r1, r4, r1
   1b604:	ldrh	r1, [r1]
   1b608:	cmp	r1, #10
   1b60c:	bne	1b678 <test_nested_buffer_first@@Base+0x2d4>
   1b610:	cmp	r0, #0
   1b614:	beq	1b690 <test_nested_buffer_first@@Base+0x2ec>
   1b618:	ldr	r2, [r0]
   1b61c:	mov	r1, r0
   1b620:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1b624:	cmp	r2, #12
   1b628:	bcc	1b69c <test_nested_buffer_first@@Base+0x2f8>
   1b62c:	ldrh	r1, [r1, #10]
   1b630:	cmp	r1, #0
   1b634:	beq	1b69c <test_nested_buffer_first@@Base+0x2f8>
   1b638:	ldr	r1, [r0, r1]!
   1b63c:	add	r0, r0, r1
   1b640:	movw	r1, #20172	; 0x4ecc
   1b644:	add	r0, r0, #4
   1b648:	movt	r1, #2
   1b64c:	bl	12e8c <strcmp@plt>
   1b650:	cmp	r0, #0
   1b654:	moveq	r0, #0
   1b658:	subeq	sp, fp, #16
   1b65c:	popeq	{r4, r5, r6, r7, fp, pc}
   1b660:	movw	r0, #31264	; 0x7a20
   1b664:	movt	r0, #2
   1b668:	bl	12eec <puts@plt>
   1b66c:	mvn	r0, #0
   1b670:	sub	sp, fp, #16
   1b674:	pop	{r4, r5, r6, r7, fp, pc}
   1b678:	movw	r0, #31296	; 0x7a40
   1b67c:	movt	r0, #2
   1b680:	bl	12eec <puts@plt>
   1b684:	mvn	r0, #0
   1b688:	sub	sp, fp, #16
   1b68c:	pop	{r4, r5, r6, r7, fp, pc}
   1b690:	movw	r0, #20552	; 0x5048
   1b694:	movt	r0, #2
   1b698:	b	1b6a4 <test_nested_buffer_first@@Base+0x300>
   1b69c:	movw	r0, #21903	; 0x558f
   1b6a0:	movt	r0, #2
   1b6a4:	movw	r1, #20590	; 0x506e
   1b6a8:	movw	r3, #21822	; 0x553e
   1b6ac:	movw	r2, #699	; 0x2bb
   1b6b0:	movt	r1, #2
   1b6b4:	movt	r3, #2
   1b6b8:	bl	12f88 <__assert_fail@plt>
   1b6bc:	movw	r0, #21291	; 0x532b
   1b6c0:	movw	r1, #21001	; 0x5209
   1b6c4:	movw	r3, #21453	; 0x53cd
   1b6c8:	mov	r2, #235	; 0xeb
   1b6cc:	movt	r0, #2
   1b6d0:	movt	r1, #2
   1b6d4:	movt	r3, #2
   1b6d8:	bl	12f88 <__assert_fail@plt>

0001b6dc <test_nested_buffer_using_nest@@Base>:
   1b6dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b6e0:	add	fp, sp, #24
   1b6e4:	sub	sp, sp, #1040	; 0x410
   1b6e8:	mov	r4, r0
   1b6ec:	bl	1dd44 <flatcc_builder_reset@@Base>
   1b6f0:	movw	r1, #17220	; 0x4344
   1b6f4:	mov	r0, r4
   1b6f8:	mov	r2, #0
   1b6fc:	mov	r3, #0
   1b700:	movt	r1, #2
   1b704:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   1b708:	cmp	r0, #0
   1b70c:	bne	1b71c <test_nested_buffer_using_nest@@Base+0x40>
   1b710:	mov	r0, r4
   1b714:	mov	r1, #36	; 0x24
   1b718:	bl	1fcbc <flatcc_builder_start_table@@Base>
   1b71c:	movw	r1, #20172	; 0x4ecc
   1b720:	mov	r0, r4
   1b724:	movt	r1, #2
   1b728:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   1b72c:	cmp	r0, #0
   1b730:	beq	1b74c <test_nested_buffer_using_nest@@Base+0x70>
   1b734:	mov	r5, r0
   1b738:	mov	r0, r4
   1b73c:	mov	r1, #3
   1b740:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1b744:	cmp	r0, #0
   1b748:	strne	r5, [r0]
   1b74c:	mov	r0, r4
   1b750:	mov	r1, #1
   1b754:	mov	r2, #2
   1b758:	mov	r3, #2
   1b75c:	bl	2102c <flatcc_builder_table_add@@Base>
   1b760:	cmp	r0, #0
   1b764:	mov	r2, #1
   1b768:	movne	r1, #42	; 0x2a
   1b76c:	strhne	r1, [r0]
   1b770:	movw	r1, #25228	; 0x628c
   1b774:	mov	r0, r4
   1b778:	movt	r1, #2
   1b77c:	bl	205dc <flatcc_builder_check_required@@Base>
   1b780:	cmp	r0, #0
   1b784:	beq	1ba50 <test_nested_buffer_using_nest@@Base+0x374>
   1b788:	mov	r0, r4
   1b78c:	bl	2066c <flatcc_builder_end_table@@Base>
   1b790:	mov	r1, r0
   1b794:	mov	r0, r4
   1b798:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   1b79c:	mov	r0, r4
   1b7a0:	bl	21fd0 <flatcc_builder_get_buffer_size@@Base>
   1b7a4:	mov	r5, r0
   1b7a8:	add	r1, sp, #16
   1b7ac:	mov	r0, r4
   1b7b0:	mov	r2, #1024	; 0x400
   1b7b4:	bl	220bc <flatcc_builder_copy_buffer@@Base>
   1b7b8:	cmp	r0, #0
   1b7bc:	beq	1b958 <test_nested_buffer_using_nest@@Base+0x27c>
   1b7c0:	mov	r0, r4
   1b7c4:	bl	1dd44 <flatcc_builder_reset@@Base>
   1b7c8:	movw	r1, #17220	; 0x4344
   1b7cc:	mov	r0, r4
   1b7d0:	mov	r2, #0
   1b7d4:	mov	r3, #0
   1b7d8:	movt	r1, #2
   1b7dc:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   1b7e0:	cmp	r0, #0
   1b7e4:	bne	1b7f4 <test_nested_buffer_using_nest@@Base+0x118>
   1b7e8:	mov	r0, r4
   1b7ec:	mov	r1, #36	; 0x24
   1b7f0:	bl	1fcbc <flatcc_builder_start_table@@Base>
   1b7f4:	mvn	r0, #0
   1b7f8:	mov	r1, #8
   1b7fc:	mov	r2, r5
   1b800:	mov	r3, #1
   1b804:	str	r1, [sp]
   1b808:	str	r0, [sp, #4]
   1b80c:	add	r1, sp, #16
   1b810:	mov	r0, r4
   1b814:	bl	2082c <flatcc_builder_create_vector@@Base>
   1b818:	cmp	r0, #0
   1b81c:	beq	1b838 <test_nested_buffer_using_nest@@Base+0x15c>
   1b820:	mov	r5, r0
   1b824:	mov	r0, r4
   1b828:	mov	r1, #13
   1b82c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1b830:	cmp	r0, #0
   1b834:	strne	r5, [r0]
   1b838:	mov	r0, r4
   1b83c:	mov	r1, #2
   1b840:	mov	r2, #2
   1b844:	mov	r3, #2
   1b848:	bl	2102c <flatcc_builder_table_add@@Base>
   1b84c:	cmp	r0, #0
   1b850:	movne	r1, #10
   1b854:	strhne	r1, [r0]
   1b858:	movw	r1, #17288	; 0x4388
   1b85c:	mov	r0, r4
   1b860:	movt	r1, #2
   1b864:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   1b868:	cmp	r0, #0
   1b86c:	beq	1b888 <test_nested_buffer_using_nest@@Base+0x1ac>
   1b870:	mov	r5, r0
   1b874:	mov	r0, r4
   1b878:	mov	r1, #3
   1b87c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1b880:	cmp	r0, #0
   1b884:	strne	r5, [r0]
   1b888:	movw	r1, #25228	; 0x628c
   1b88c:	mov	r0, r4
   1b890:	mov	r2, #1
   1b894:	movt	r1, #2
   1b898:	bl	205dc <flatcc_builder_check_required@@Base>
   1b89c:	cmp	r0, #0
   1b8a0:	beq	1ba50 <test_nested_buffer_using_nest@@Base+0x374>
   1b8a4:	mov	r0, r4
   1b8a8:	bl	2066c <flatcc_builder_end_table@@Base>
   1b8ac:	mov	r1, r0
   1b8b0:	mov	r0, r4
   1b8b4:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   1b8b8:	add	r1, sp, #12
   1b8bc:	mov	r0, r4
   1b8c0:	bl	2205c <flatcc_builder_get_direct_buffer@@Base>
   1b8c4:	mov	r4, r0
   1b8c8:	movw	r0, #41072	; 0xa070
   1b8cc:	ldr	r2, [sp, #12]
   1b8d0:	movt	r0, #3
   1b8d4:	mov	r1, r4
   1b8d8:	ldr	r3, [r0]
   1b8dc:	movw	r0, #20206	; 0x4eee
   1b8e0:	movt	r0, #2
   1b8e4:	bl	13674 <test_type_aliases@@Base+0x51c>
   1b8e8:	cmp	r4, #0
   1b8ec:	beq	1ba70 <test_nested_buffer_using_nest@@Base+0x394>
   1b8f0:	ldr	r0, [r4, #4]
   1b8f4:	movw	r7, #20301	; 0x4f4d
   1b8f8:	movt	r7, #21326	; 0x534e
   1b8fc:	cmp	r0, r7
   1b900:	bne	1ba70 <test_nested_buffer_using_nest@@Base+0x394>
   1b904:	ldr	r0, [r4]
   1b908:	ldr	r0, [r4, r0]!
   1b90c:	mov	r6, r4
   1b910:	ldrh	r5, [r6, -r0]!
   1b914:	cmp	r5, #11
   1b918:	bls	1ba7c <test_nested_buffer_using_nest@@Base+0x3a0>
   1b91c:	ldrh	r0, [r6, #10]
   1b920:	cmp	r0, #0
   1b924:	beq	1ba7c <test_nested_buffer_using_nest@@Base+0x3a0>
   1b928:	mov	r1, r4
   1b92c:	ldr	r0, [r1, r0]!
   1b930:	add	r0, r1, r0
   1b934:	movw	r1, #17288	; 0x4388
   1b938:	add	r0, r0, #4
   1b93c:	movt	r1, #2
   1b940:	bl	12e8c <strcmp@plt>
   1b944:	cmp	r0, #0
   1b948:	beq	1b964 <test_nested_buffer_using_nest@@Base+0x288>
   1b94c:	movw	r0, #31344	; 0x7a70
   1b950:	movt	r0, #2
   1b954:	b	1ba14 <test_nested_buffer_using_nest@@Base+0x338>
   1b958:	movw	r0, #31184	; 0x79d0
   1b95c:	movt	r0, #2
   1b960:	b	1ba14 <test_nested_buffer_using_nest@@Base+0x338>
   1b964:	mov	r8, #0
   1b968:	cmp	r5, #32
   1b96c:	bcc	1b998 <test_nested_buffer_using_nest@@Base+0x2bc>
   1b970:	ldrh	r0, [r6, #30]
   1b974:	cmp	r0, #0
   1b978:	beq	1b998 <test_nested_buffer_using_nest@@Base+0x2bc>
   1b97c:	mov	r1, r4
   1b980:	ldr	r0, [r1, r0]!
   1b984:	add	r0, r1, r0
   1b988:	ldr	r1, [r0, #8]
   1b98c:	cmp	r1, r7
   1b990:	ldreq	r1, [r0, #4]!
   1b994:	addeq	r8, r0, r1
   1b998:	ldrh	r0, [r6, #8]
   1b99c:	cmp	r0, #0
   1b9a0:	beq	1ba0c <test_nested_buffer_using_nest@@Base+0x330>
   1b9a4:	add	r0, r4, r0
   1b9a8:	ldrh	r0, [r0]
   1b9ac:	cmp	r0, #10
   1b9b0:	bne	1ba0c <test_nested_buffer_using_nest@@Base+0x330>
   1b9b4:	cmp	r8, #0
   1b9b8:	beq	1ba70 <test_nested_buffer_using_nest@@Base+0x394>
   1b9bc:	ldr	r0, [r8]
   1b9c0:	mov	r4, r8
   1b9c4:	ldrh	r0, [r4, -r0]!	; <UNPREDICTABLE>
   1b9c8:	cmp	r0, #12
   1b9cc:	bcc	1ba7c <test_nested_buffer_using_nest@@Base+0x3a0>
   1b9d0:	ldrh	r0, [r4, #10]
   1b9d4:	cmp	r0, #0
   1b9d8:	beq	1ba7c <test_nested_buffer_using_nest@@Base+0x3a0>
   1b9dc:	mov	r1, r8
   1b9e0:	ldr	r0, [r1, r0]!
   1b9e4:	add	r0, r1, r0
   1b9e8:	movw	r1, #20172	; 0x4ecc
   1b9ec:	add	r0, r0, #4
   1b9f0:	movt	r1, #2
   1b9f4:	bl	12e8c <strcmp@plt>
   1b9f8:	cmp	r0, #0
   1b9fc:	beq	1ba24 <test_nested_buffer_using_nest@@Base+0x348>
   1ba00:	movw	r0, #31264	; 0x7a20
   1ba04:	movt	r0, #2
   1ba08:	b	1ba14 <test_nested_buffer_using_nest@@Base+0x338>
   1ba0c:	movw	r0, #31296	; 0x7a40
   1ba10:	movt	r0, #2
   1ba14:	bl	12eec <puts@plt>
   1ba18:	mvn	r0, #0
   1ba1c:	sub	sp, fp, #24
   1ba20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ba24:	ldrh	r0, [r4, #6]
   1ba28:	cmp	r0, #0
   1ba2c:	beq	1ba44 <test_nested_buffer_using_nest@@Base+0x368>
   1ba30:	add	r0, r8, r0
   1ba34:	ldrh	r1, [r0]
   1ba38:	mov	r0, #0
   1ba3c:	cmp	r1, #42	; 0x2a
   1ba40:	beq	1ba1c <test_nested_buffer_using_nest@@Base+0x340>
   1ba44:	movw	r0, #31216	; 0x79f0
   1ba48:	movt	r0, #2
   1ba4c:	b	1ba14 <test_nested_buffer_using_nest@@Base+0x338>
   1ba50:	movw	r0, #21291	; 0x532b
   1ba54:	movw	r1, #21001	; 0x5209
   1ba58:	movw	r3, #21453	; 0x53cd
   1ba5c:	mov	r2, #235	; 0xeb
   1ba60:	movt	r0, #2
   1ba64:	movt	r1, #2
   1ba68:	movt	r3, #2
   1ba6c:	bl	12f88 <__assert_fail@plt>
   1ba70:	movw	r0, #20552	; 0x5048
   1ba74:	movt	r0, #2
   1ba78:	b	1ba84 <test_nested_buffer_using_nest@@Base+0x3a8>
   1ba7c:	movw	r0, #21903	; 0x558f
   1ba80:	movt	r0, #2
   1ba84:	movw	r1, #20590	; 0x506e
   1ba88:	movw	r3, #21822	; 0x553e
   1ba8c:	movw	r2, #699	; 0x2bb
   1ba90:	movt	r1, #2
   1ba94:	movt	r3, #2
   1ba98:	bl	12f88 <__assert_fail@plt>

0001ba9c <verify_include@@Base>:
   1ba9c:	mov	r0, #0
   1baa0:	bx	lr
   1baa4:	nop	{0}

0001baa8 <test_struct_buffer@@Base>:
   1baa8:	push	{r4, r5, r6, sl, fp, lr}
   1baac:	add	fp, sp, #16
   1bab0:	sub	sp, sp, #112	; 0x70
   1bab4:	mov	r4, r0
   1bab8:	bl	1dd44 <flatcc_builder_reset@@Base>
   1babc:	mov	r0, r4
   1bac0:	mov	r1, #32
   1bac4:	mov	r2, #16
   1bac8:	mov	r5, #16
   1bacc:	bl	1e9e4 <flatcc_builder_start_struct@@Base>
   1bad0:	mov	r6, #0
   1bad4:	cmp	r0, #0
   1bad8:	mov	r3, #0
   1badc:	beq	1bb34 <test_struct_buffer@@Base+0x8c>
   1bae0:	movw	r1, #52428	; 0xcccc
   1bae4:	movw	r2, #52429	; 0xcccd
   1bae8:	movw	r3, #0
   1baec:	movt	r2, #52428	; 0xcccc
   1baf0:	movt	r1, #16400	; 0x4010
   1baf4:	movt	r3, #16448	; 0x4040
   1baf8:	str	r2, [r0, #16]
   1bafc:	str	r1, [r0, #20]
   1bb00:	mov	r2, #1065353216	; 0x3f800000
   1bb04:	mov	r1, #1073741824	; 0x40000000
   1bb08:	str	r2, [r0]
   1bb0c:	stmib	r0, {r1, r3}
   1bb10:	mov	r1, #8
   1bb14:	strb	r1, [r0, #24]
   1bb18:	movw	r1, #2730	; 0xaaa
   1bb1c:	strh	r1, [r0, #26]
   1bb20:	mov	r1, #239	; 0xef
   1bb24:	strb	r1, [r0, #28]
   1bb28:	mov	r0, r4
   1bb2c:	bl	1ead8 <flatcc_builder_end_struct@@Base>
   1bb30:	mov	r3, r0
   1bb34:	movw	r1, #17220	; 0x4344
   1bb38:	mov	r0, r4
   1bb3c:	mov	r2, #0
   1bb40:	stm	sp, {r5, r6}
   1bb44:	movt	r1, #2
   1bb48:	bl	1e380 <flatcc_builder_create_buffer@@Base>
   1bb4c:	mov	r0, r4
   1bb50:	bl	21fd0 <flatcc_builder_get_buffer_size@@Base>
   1bb54:	cmp	r0, #48	; 0x30
   1bb58:	bne	1bc84 <test_struct_buffer@@Base+0x1dc>
   1bb5c:	movw	r0, #20294	; 0x4f46
   1bb60:	mov	r1, #48	; 0x30
   1bb64:	movt	r0, #2
   1bb68:	bl	12e98 <printf@plt>
   1bb6c:	mov	r0, r4
   1bb70:	bl	22308 <flatcc_builder_get_emit_context@@Base>
   1bb74:	ldr	r0, [r0, #24]
   1bb78:	cmp	r0, #48	; 0x30
   1bb7c:	bne	1bca4 <test_struct_buffer@@Base+0x1fc>
   1bb80:	add	r1, sp, #12
   1bb84:	mov	r0, r4
   1bb88:	mov	r2, #100	; 0x64
   1bb8c:	bl	220bc <flatcc_builder_copy_buffer@@Base>
   1bb90:	cmp	r0, #0
   1bb94:	beq	1bc60 <test_struct_buffer@@Base+0x1b8>
   1bb98:	movw	r0, #41072	; 0xa070
   1bb9c:	add	r4, sp, #12
   1bba0:	mov	r2, #48	; 0x30
   1bba4:	movt	r0, #3
   1bba8:	mov	r1, r4
   1bbac:	ldr	r3, [r0]
   1bbb0:	movw	r0, #20453	; 0x4fe5
   1bbb4:	movt	r0, #2
   1bbb8:	bl	13674 <test_type_aliases@@Base+0x51c>
   1bbbc:	ldr	r0, [sp, #16]
   1bbc0:	movw	r1, #20301	; 0x4f4d
   1bbc4:	movt	r1, #21326	; 0x534e
   1bbc8:	cmp	r0, r1
   1bbcc:	bne	1bc6c <test_struct_buffer@@Base+0x1c4>
   1bbd0:	ldr	r0, [sp, #12]
   1bbd4:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1bbd8:	add	r0, r4, r0
   1bbdc:	vldr	s0, [r0]
   1bbe0:	vcmp.f32	s0, s2
   1bbe4:	vmrs	APSR_nzcv, fpscr
   1bbe8:	bne	1bc54 <test_struct_buffer@@Base+0x1ac>
   1bbec:	vldr	s0, [r0, #4]
   1bbf0:	vmov.f32	s2, #0	; 0x40000000  2.0
   1bbf4:	vcmp.f32	s0, s2
   1bbf8:	vmrs	APSR_nzcv, fpscr
   1bbfc:	bne	1bc54 <test_struct_buffer@@Base+0x1ac>
   1bc00:	vldr	s0, [r0, #8]
   1bc04:	vmov.f32	s2, #8	; 0x40400000  3.0
   1bc08:	vcmp.f32	s0, s2
   1bc0c:	vmrs	APSR_nzcv, fpscr
   1bc10:	bne	1bc54 <test_struct_buffer@@Base+0x1ac>
   1bc14:	vldr	d16, [pc, #172]	; 1bcc8 <test_struct_buffer@@Base+0x220>
   1bc18:	vldr	d17, [r0, #16]
   1bc1c:	vcmp.f64	d17, d16
   1bc20:	vmrs	APSR_nzcv, fpscr
   1bc24:	bne	1bc54 <test_struct_buffer@@Base+0x1ac>
   1bc28:	ldrb	r1, [r0, #24]
   1bc2c:	cmp	r1, #8
   1bc30:	bne	1bc54 <test_struct_buffer@@Base+0x1ac>
   1bc34:	ldrh	r1, [r0, #26]
   1bc38:	movw	r2, #2730	; 0xaaa
   1bc3c:	cmp	r1, r2
   1bc40:	bne	1bc54 <test_struct_buffer@@Base+0x1ac>
   1bc44:	ldrb	r1, [r0, #28]
   1bc48:	mov	r0, #0
   1bc4c:	cmp	r1, #239	; 0xef
   1bc50:	beq	1bc7c <test_struct_buffer@@Base+0x1d4>
   1bc54:	movw	r0, #31456	; 0x7ae0
   1bc58:	movt	r0, #2
   1bc5c:	b	1bc74 <test_struct_buffer@@Base+0x1cc>
   1bc60:	movw	r0, #25071	; 0x61ef
   1bc64:	movt	r0, #2
   1bc68:	b	1bc74 <test_struct_buffer@@Base+0x1cc>
   1bc6c:	movw	r0, #31376	; 0x7a90
   1bc70:	movt	r0, #2
   1bc74:	bl	12eec <puts@plt>
   1bc78:	mvn	r0, #0
   1bc7c:	sub	sp, fp, #16
   1bc80:	pop	{r4, r5, r6, sl, fp, pc}
   1bc84:	movw	r0, #20240	; 0x4f10
   1bc88:	movw	r1, #17712	; 0x4530
   1bc8c:	movw	r3, #20251	; 0x4f1b
   1bc90:	movw	r2, #2339	; 0x923
   1bc94:	movt	r0, #2
   1bc98:	movt	r1, #2
   1bc9c:	movt	r3, #2
   1bca0:	bl	12f88 <__assert_fail@plt>
   1bca4:	movw	r0, #20323	; 0x4f63
   1bca8:	movw	r1, #17712	; 0x4530
   1bcac:	movw	r3, #20251	; 0x4f1b
   1bcb0:	movw	r2, #2341	; 0x925
   1bcb4:	movt	r0, #2
   1bcb8:	movt	r1, #2
   1bcbc:	movt	r3, #2
   1bcc0:	bl	12f88 <__assert_fail@plt>
   1bcc4:	nop	{0}
   1bcc8:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1bccc:	andsmi	ip, r0, ip, asr #25

0001bcd0 <test_typed_struct_buffer@@Base>:
   1bcd0:	push	{r4, r5, r6, sl, fp, lr}
   1bcd4:	add	fp, sp, #16
   1bcd8:	sub	sp, sp, #112	; 0x70
   1bcdc:	mov	r4, r0
   1bce0:	bl	1dd44 <flatcc_builder_reset@@Base>
   1bce4:	mov	r0, r4
   1bce8:	mov	r1, #32
   1bcec:	mov	r2, #16
   1bcf0:	mov	r5, #16
   1bcf4:	bl	1e9e4 <flatcc_builder_start_struct@@Base>
   1bcf8:	mov	r6, #0
   1bcfc:	cmp	r0, #0
   1bd00:	mov	r3, #0
   1bd04:	beq	1bd5c <test_typed_struct_buffer@@Base+0x8c>
   1bd08:	movw	r1, #52428	; 0xcccc
   1bd0c:	movw	r2, #52429	; 0xcccd
   1bd10:	movw	r3, #0
   1bd14:	movt	r2, #52428	; 0xcccc
   1bd18:	movt	r1, #16400	; 0x4010
   1bd1c:	movt	r3, #16448	; 0x4040
   1bd20:	str	r2, [r0, #16]
   1bd24:	str	r1, [r0, #20]
   1bd28:	mov	r2, #1065353216	; 0x3f800000
   1bd2c:	mov	r1, #1073741824	; 0x40000000
   1bd30:	str	r2, [r0]
   1bd34:	stmib	r0, {r1, r3}
   1bd38:	mov	r1, #8
   1bd3c:	strb	r1, [r0, #24]
   1bd40:	movw	r1, #2730	; 0xaaa
   1bd44:	strh	r1, [r0, #26]
   1bd48:	mov	r1, #239	; 0xef
   1bd4c:	strb	r1, [r0, #28]
   1bd50:	mov	r0, r4
   1bd54:	bl	1ead8 <flatcc_builder_end_struct@@Base>
   1bd58:	mov	r3, r0
   1bd5c:	movw	r1, #20472	; 0x4ff8
   1bd60:	mov	r0, r4
   1bd64:	mov	r2, #0
   1bd68:	stm	sp, {r5, r6}
   1bd6c:	movt	r1, #2
   1bd70:	bl	1e380 <flatcc_builder_create_buffer@@Base>
   1bd74:	mov	r0, r4
   1bd78:	bl	21fd0 <flatcc_builder_get_buffer_size@@Base>
   1bd7c:	cmp	r0, #48	; 0x30
   1bd80:	bne	1bf24 <test_typed_struct_buffer@@Base+0x254>
   1bd84:	movw	r0, #20294	; 0x4f46
   1bd88:	mov	r1, #48	; 0x30
   1bd8c:	movt	r0, #2
   1bd90:	bl	12e98 <printf@plt>
   1bd94:	mov	r0, r4
   1bd98:	bl	22308 <flatcc_builder_get_emit_context@@Base>
   1bd9c:	ldr	r0, [r0, #24]
   1bda0:	cmp	r0, #48	; 0x30
   1bda4:	bne	1bf44 <test_typed_struct_buffer@@Base+0x274>
   1bda8:	add	r1, sp, #12
   1bdac:	mov	r0, r4
   1bdb0:	mov	r2, #100	; 0x64
   1bdb4:	bl	220bc <flatcc_builder_copy_buffer@@Base>
   1bdb8:	cmp	r0, #0
   1bdbc:	beq	1be28 <test_typed_struct_buffer@@Base+0x158>
   1bdc0:	movw	r0, #41072	; 0xa070
   1bdc4:	add	r1, sp, #12
   1bdc8:	mov	r2, #48	; 0x30
   1bdcc:	movt	r0, #3
   1bdd0:	ldr	r3, [r0]
   1bdd4:	movw	r0, #20447	; 0x4fdf
   1bdd8:	movt	r0, #2
   1bddc:	bl	13674 <test_type_aliases@@Base+0x51c>
   1bde0:	ldr	r0, [sp, #16]
   1bde4:	movw	r4, #16082	; 0x3ed2
   1bde8:	movt	r4, #43253	; 0xa8f5
   1bdec:	cmp	r0, r4
   1bdf0:	bne	1be34 <test_typed_struct_buffer@@Base+0x164>
   1bdf4:	mov	r0, #16
   1bdf8:	add	r5, sp, #12
   1bdfc:	mov	r1, #48	; 0x30
   1be00:	mov	r2, r4
   1be04:	mov	r3, #32
   1be08:	str	r0, [sp]
   1be0c:	mov	r0, r5
   1be10:	bl	234cc <flatcc_verify_struct_as_typed_root@@Base>
   1be14:	cmp	r0, #0
   1be18:	beq	1be4c <test_typed_struct_buffer@@Base+0x17c>
   1be1c:	movw	r0, #31536	; 0x7b30
   1be20:	movt	r0, #2
   1be24:	b	1be3c <test_typed_struct_buffer@@Base+0x16c>
   1be28:	movw	r0, #25071	; 0x61ef
   1be2c:	movt	r0, #2
   1be30:	b	1be3c <test_typed_struct_buffer@@Base+0x16c>
   1be34:	movw	r0, #31376	; 0x7a90
   1be38:	movt	r0, #2
   1be3c:	bl	12eec <puts@plt>
   1be40:	mvn	r0, #0
   1be44:	sub	sp, fp, #16
   1be48:	pop	{r4, r5, r6, sl, fp, pc}
   1be4c:	ldr	r0, [sp, #16]
   1be50:	cmp	r0, r4
   1be54:	bne	1be8c <test_typed_struct_buffer@@Base+0x1bc>
   1be58:	ldr	r6, [sp, #12]
   1be5c:	mov	r0, #16
   1be60:	mov	r1, #48	; 0x30
   1be64:	mov	r2, r4
   1be68:	mov	r3, #32
   1be6c:	str	r0, [sp]
   1be70:	mov	r0, r5
   1be74:	bl	234cc <flatcc_verify_struct_as_typed_root@@Base>
   1be78:	cmp	r0, #0
   1be7c:	beq	1be98 <test_typed_struct_buffer@@Base+0x1c8>
   1be80:	movw	r0, #31488	; 0x7b00
   1be84:	movt	r0, #2
   1be88:	b	1be3c <test_typed_struct_buffer@@Base+0x16c>
   1be8c:	movw	r0, #31424	; 0x7ac0
   1be90:	movt	r0, #2
   1be94:	b	1be3c <test_typed_struct_buffer@@Base+0x16c>
   1be98:	add	r0, r5, r6
   1be9c:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1bea0:	vldr	s0, [r0]
   1bea4:	vcmp.f32	s0, s2
   1bea8:	vmrs	APSR_nzcv, fpscr
   1beac:	bne	1bf18 <test_typed_struct_buffer@@Base+0x248>
   1beb0:	vldr	s0, [r0, #4]
   1beb4:	vmov.f32	s2, #0	; 0x40000000  2.0
   1beb8:	vcmp.f32	s0, s2
   1bebc:	vmrs	APSR_nzcv, fpscr
   1bec0:	bne	1bf18 <test_typed_struct_buffer@@Base+0x248>
   1bec4:	vldr	s0, [r0, #8]
   1bec8:	vmov.f32	s2, #8	; 0x40400000  3.0
   1becc:	vcmp.f32	s0, s2
   1bed0:	vmrs	APSR_nzcv, fpscr
   1bed4:	bne	1bf18 <test_typed_struct_buffer@@Base+0x248>
   1bed8:	vldr	d16, [pc, #136]	; 1bf68 <test_typed_struct_buffer@@Base+0x298>
   1bedc:	vldr	d17, [r0, #16]
   1bee0:	vcmp.f64	d17, d16
   1bee4:	vmrs	APSR_nzcv, fpscr
   1bee8:	bne	1bf18 <test_typed_struct_buffer@@Base+0x248>
   1beec:	ldrb	r1, [r0, #24]
   1bef0:	cmp	r1, #8
   1bef4:	bne	1bf18 <test_typed_struct_buffer@@Base+0x248>
   1bef8:	ldrh	r1, [r0, #26]
   1befc:	movw	r2, #2730	; 0xaaa
   1bf00:	cmp	r1, r2
   1bf04:	bne	1bf18 <test_typed_struct_buffer@@Base+0x248>
   1bf08:	ldrb	r1, [r0, #28]
   1bf0c:	mov	r0, #0
   1bf10:	cmp	r1, #239	; 0xef
   1bf14:	beq	1be44 <test_typed_struct_buffer@@Base+0x174>
   1bf18:	movw	r0, #31456	; 0x7ae0
   1bf1c:	movt	r0, #2
   1bf20:	b	1be3c <test_typed_struct_buffer@@Base+0x16c>
   1bf24:	movw	r0, #20240	; 0x4f10
   1bf28:	movw	r1, #17712	; 0x4530
   1bf2c:	movw	r3, #20398	; 0x4fae
   1bf30:	movw	r2, #2388	; 0x954
   1bf34:	movt	r0, #2
   1bf38:	movt	r1, #2
   1bf3c:	movt	r3, #2
   1bf40:	bl	12f88 <__assert_fail@plt>
   1bf44:	movw	r0, #20323	; 0x4f63
   1bf48:	movw	r1, #17712	; 0x4530
   1bf4c:	movw	r3, #20398	; 0x4fae
   1bf50:	movw	r2, #2390	; 0x956
   1bf54:	movt	r0, #2
   1bf58:	movt	r1, #2
   1bf5c:	movt	r3, #2
   1bf60:	bl	12f88 <__assert_fail@plt>
   1bf64:	nop	{0}
   1bf68:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1bf6c:	andsmi	ip, r0, ip, asr #25

0001bf70 <gen_monster_benchmark@@Base>:
   1bf70:	push	{r4, r5, fp, lr}
   1bf74:	add	fp, sp, #8
   1bf78:	sub	sp, sp, #24
   1bf7c:	mov	r4, r0
   1bf80:	movw	r0, #25216	; 0x6280
   1bf84:	movt	r0, #2
   1bf88:	vldr	d16, [r0]
   1bf8c:	movw	r0, #2312	; 0x908
   1bf90:	strh	r0, [sp, #16]
   1bf94:	mov	r0, r4
   1bf98:	vstr	d16, [sp, #8]
   1bf9c:	bl	1dd44 <flatcc_builder_reset@@Base>
   1bfa0:	movw	r1, #17220	; 0x4344
   1bfa4:	mov	r0, r4
   1bfa8:	mov	r2, #0
   1bfac:	mov	r3, #0
   1bfb0:	movt	r1, #2
   1bfb4:	bl	1e6c4 <flatcc_builder_start_buffer@@Base>
   1bfb8:	cmp	r0, #0
   1bfbc:	bne	1bfcc <gen_monster_benchmark@@Base+0x5c>
   1bfc0:	mov	r0, r4
   1bfc4:	mov	r1, #36	; 0x24
   1bfc8:	bl	1fcbc <flatcc_builder_start_table@@Base>
   1bfcc:	mov	r0, r4
   1bfd0:	mov	r1, #2
   1bfd4:	mov	r2, #2
   1bfd8:	mov	r3, #2
   1bfdc:	bl	2102c <flatcc_builder_table_add@@Base>
   1bfe0:	cmp	r0, #0
   1bfe4:	mov	r2, #32
   1bfe8:	mov	r3, #16
   1bfec:	movne	r1, #80	; 0x50
   1bff0:	strhne	r1, [r0]
   1bff4:	mov	r0, r4
   1bff8:	mov	r1, #0
   1bffc:	bl	2102c <flatcc_builder_table_add@@Base>
   1c000:	movw	r3, #52429	; 0xcccd
   1c004:	mov	r1, #1065353216	; 0x3f800000
   1c008:	mov	r2, #1073741824	; 0x40000000
   1c00c:	movt	r3, #49228	; 0xc04c
   1c010:	stm	r0, {r1, r2, r3}
   1c014:	movw	r1, #17288	; 0x4388
   1c018:	mov	r0, r4
   1c01c:	movt	r1, #2
   1c020:	bl	21d6c <flatcc_builder_create_string_str@@Base>
   1c024:	cmp	r0, #0
   1c028:	beq	1c044 <gen_monster_benchmark@@Base+0xd4>
   1c02c:	mov	r5, r0
   1c030:	mov	r0, r4
   1c034:	mov	r1, #3
   1c038:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1c03c:	cmp	r0, #0
   1c040:	strne	r5, [r0]
   1c044:	mvn	r0, #0
   1c048:	mov	r1, #1
   1c04c:	mov	r2, #10
   1c050:	mov	r3, #1
   1c054:	str	r1, [sp]
   1c058:	str	r0, [sp, #4]
   1c05c:	add	r1, sp, #8
   1c060:	mov	r0, r4
   1c064:	bl	2082c <flatcc_builder_create_vector@@Base>
   1c068:	cmp	r0, #0
   1c06c:	beq	1c088 <gen_monster_benchmark@@Base+0x118>
   1c070:	mov	r5, r0
   1c074:	mov	r0, r4
   1c078:	mov	r1, #5
   1c07c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1c080:	cmp	r0, #0
   1c084:	strne	r5, [r0]
   1c088:	mov	r0, r4
   1c08c:	mov	r1, #4
   1c090:	mov	r2, #2
   1c094:	mvn	r3, #-1073741824	; 0xc0000000
   1c098:	bl	1f704 <flatcc_builder_start_vector@@Base>
   1c09c:	mov	r0, r4
   1c0a0:	mov	r1, #1
   1c0a4:	bl	1ebb0 <flatcc_builder_extend_vector@@Base>
   1c0a8:	mov	r1, #16
   1c0ac:	strh	r1, [r0]
   1c0b0:	mov	r1, #32
   1c0b4:	strb	r1, [r0, #2]
   1c0b8:	mov	r0, r4
   1c0bc:	mov	r1, #2
   1c0c0:	bl	1ebb0 <flatcc_builder_extend_vector@@Base>
   1c0c4:	mov	r1, #48	; 0x30
   1c0c8:	strh	r1, [r0]
   1c0cc:	mov	r1, #64	; 0x40
   1c0d0:	strb	r1, [r0, #2]
   1c0d4:	mov	r1, #80	; 0x50
   1c0d8:	strh	r1, [r0, #4]
   1c0dc:	mov	r1, #96	; 0x60
   1c0e0:	strb	r1, [r0, #6]
   1c0e4:	mov	r0, r4
   1c0e8:	mov	r1, #1
   1c0ec:	bl	1ebb0 <flatcc_builder_extend_vector@@Base>
   1c0f0:	cmp	r0, #0
   1c0f4:	movne	r1, #128	; 0x80
   1c0f8:	strbne	r1, [r0, #2]
   1c0fc:	movne	r1, #112	; 0x70
   1c100:	strhne	r1, [r0]
   1c104:	mov	r0, r4
   1c108:	mov	r1, #1
   1c10c:	bl	1ebb0 <flatcc_builder_extend_vector@@Base>
   1c110:	cmp	r0, #0
   1c114:	movwne	r1, #401	; 0x191
   1c118:	movtne	r1, #145	; 0x91
   1c11c:	strne	r1, [r0]
   1c120:	mov	r0, r4
   1c124:	bl	20984 <flatcc_builder_end_vector@@Base>
   1c128:	cmp	r0, #0
   1c12c:	beq	1c148 <gen_monster_benchmark@@Base+0x1d8>
   1c130:	mov	r5, r0
   1c134:	mov	r0, r4
   1c138:	mov	r1, #9
   1c13c:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   1c140:	cmp	r0, #0
   1c144:	strne	r5, [r0]
   1c148:	movw	r1, #25228	; 0x628c
   1c14c:	mov	r0, r4
   1c150:	mov	r2, #1
   1c154:	movt	r1, #2
   1c158:	bl	205dc <flatcc_builder_check_required@@Base>
   1c15c:	cmp	r0, #0
   1c160:	beq	1c184 <gen_monster_benchmark@@Base+0x214>
   1c164:	mov	r0, r4
   1c168:	bl	2066c <flatcc_builder_end_table@@Base>
   1c16c:	mov	r1, r0
   1c170:	mov	r0, r4
   1c174:	bl	1e8b4 <flatcc_builder_end_buffer@@Base>
   1c178:	mov	r0, #0
   1c17c:	sub	sp, fp, #8
   1c180:	pop	{r4, r5, fp, pc}
   1c184:	movw	r0, #21291	; 0x532b
   1c188:	movw	r1, #21001	; 0x5209
   1c18c:	movw	r3, #21453	; 0x53cd
   1c190:	mov	r2, #235	; 0xeb
   1c194:	movt	r0, #2
   1c198:	movt	r1, #2
   1c19c:	movt	r3, #2
   1c1a0:	bl	12f88 <__assert_fail@plt>
   1c1a4:	nop	{0}

0001c1a8 <time_monster@@Base>:
   1c1a8:	push	{r4, r5, r6, r7, fp, lr}
   1c1ac:	add	fp, sp, #16
   1c1b0:	vpush	{d8-d9}
   1c1b4:	sub	sp, sp, #8
   1c1b8:	mov	r4, r0
   1c1bc:	movw	r0, #31584	; 0x7b60
   1c1c0:	movt	r0, #2
   1c1c4:	bl	12eec <puts@plt>
   1c1c8:	mov	r0, sp
   1c1cc:	mov	r1, #0
   1c1d0:	bl	12ee0 <gettimeofday@plt>
   1c1d4:	movw	r5, #41080	; 0xa078
   1c1d8:	movt	r5, #3
   1c1dc:	ldr	r0, [r5]
   1c1e0:	cmp	r0, #0
   1c1e4:	beq	1c1f4 <time_monster@@Base+0x4c>
   1c1e8:	ldr	r1, [r5, #4]
   1c1ec:	ldr	r2, [sp]
   1c1f0:	b	1c200 <time_monster@@Base+0x58>
   1c1f4:	ldm	sp, {r0, r1}
   1c1f8:	mov	r2, r0
   1c1fc:	strd	r0, [r5]
   1c200:	ldr	r3, [sp, #4]
   1c204:	vldr	d8, [pc, #180]	; 1c2c0 <time_monster@@Base+0x118>
   1c208:	movw	r7, #16960	; 0x4240
   1c20c:	sub	r6, r2, r0
   1c210:	movt	r7, #15
   1c214:	sub	r1, r3, r1
   1c218:	vmov	s0, r1
   1c21c:	vcvt.f64.s32	d16, s0
   1c220:	vdiv.f64	d9, d16, d8
   1c224:	mov	r0, r4
   1c228:	bl	1bf70 <gen_monster_benchmark@@Base>
   1c22c:	subs	r7, r7, #1
   1c230:	bne	1c224 <time_monster@@Base+0x7c>
   1c234:	mov	r0, r4
   1c238:	bl	21fd0 <flatcc_builder_get_buffer_size@@Base>
   1c23c:	mov	r4, r0
   1c240:	mov	r0, sp
   1c244:	mov	r1, #0
   1c248:	bl	12ee0 <gettimeofday@plt>
   1c24c:	vmov	s0, r6
   1c250:	vcvt.f64.s32	d16, s0
   1c254:	ldr	r0, [r5]
   1c258:	vadd.f64	d0, d9, d16
   1c25c:	cmp	r0, #0
   1c260:	beq	1c270 <time_monster@@Base+0xc8>
   1c264:	ldr	r1, [r5, #4]
   1c268:	ldr	r2, [sp]
   1c26c:	b	1c27c <time_monster@@Base+0xd4>
   1c270:	ldm	sp, {r0, r1}
   1c274:	mov	r2, r0
   1c278:	strd	r0, [r5]
   1c27c:	sub	r0, r2, r0
   1c280:	ldr	r2, [sp, #4]
   1c284:	vmov	s4, r0
   1c288:	movw	r0, #20477	; 0x4ffd
   1c28c:	movt	r0, #2
   1c290:	sub	r1, r2, r1
   1c294:	vmov	s2, r1
   1c298:	mov	r1, r4
   1c29c:	vcvt.f64.s32	d16, s2
   1c2a0:	vcvt.f64.s32	d17, s4
   1c2a4:	vdiv.f64	d16, d16, d8
   1c2a8:	vadd.f64	d1, d16, d17
   1c2ac:	bl	1c2c8 <time_monster@@Base+0x120>
   1c2b0:	mov	r0, #0
   1c2b4:	sub	sp, fp, #32
   1c2b8:	vpop	{d8-d9}
   1c2bc:	pop	{r4, r5, r6, r7, fp, pc}
   1c2c0:	andeq	r0, r0, r0
   1c2c4:	smlawbmi	lr, r0, r4, r8
   1c2c8:	push	{r4, sl, fp, lr}
   1c2cc:	add	fp, sp, #8
   1c2d0:	vpush	{d8-d9}
   1c2d4:	mov	r4, r1
   1c2d8:	mov	r1, r0
   1c2dc:	movw	r0, #24761	; 0x60b9
   1c2e0:	vmov.f64	d8, d1
   1c2e4:	vmov.f64	d9, d0
   1c2e8:	movt	r0, #2
   1c2ec:	bl	12e98 <printf@plt>
   1c2f0:	movw	r0, #24776	; 0x60c8
   1c2f4:	vsub.f64	d9, d8, d9
   1c2f8:	vmov	r2, r3, d9
   1c2fc:	movt	r0, #2
   1c300:	bl	12e98 <printf@plt>
   1c304:	movw	r0, #24800	; 0x60e0
   1c308:	movw	r1, #16960	; 0x4240
   1c30c:	movt	r0, #2
   1c310:	movt	r1, #15
   1c314:	bl	12e98 <printf@plt>
   1c318:	movw	r0, #24816	; 0x60f0
   1c31c:	mov	r1, r4
   1c320:	movt	r0, #2
   1c324:	bl	12e98 <printf@plt>
   1c328:	vldr	d8, [pc, #248]	; 1c428 <time_monster@@Base+0x280>
   1c32c:	vmov	s0, r4
   1c330:	movw	r0, #24835	; 0x6103
   1c334:	vcvt.f64.u32	d16, s0
   1c338:	movt	r0, #2
   1c33c:	vmul.f64	d16, d16, d8
   1c340:	vdiv.f64	d16, d16, d8
   1c344:	vdiv.f64	d16, d16, d9
   1c348:	vmov	r2, r3, d16
   1c34c:	bl	12e98 <printf@plt>
   1c350:	movw	r0, #24859	; 0x611b
   1c354:	vdiv.f64	d16, d8, d9
   1c358:	vmov	r2, r3, d16
   1c35c:	movt	r0, #2
   1c360:	bl	12e98 <printf@plt>
   1c364:	vmov.f64	d16, #112	; 0x3f800000  1.0
   1c368:	movw	r0, #24892	; 0x613c
   1c36c:	movw	r1, #20499	; 0x5013
   1c370:	vdiv.f64	d16, d16, d9
   1c374:	movt	r0, #2
   1c378:	movt	r1, #2
   1c37c:	vmov	r2, r3, d16
   1c380:	bl	12e98 <printf@plt>
   1c384:	vldr	d17, [pc, #164]	; 1c430 <time_monster@@Base+0x288>
   1c388:	vldr	d18, [pc, #168]	; 1c438 <time_monster@@Base+0x290>
   1c38c:	vmul.f64	d16, d9, d17
   1c390:	vdiv.f64	d16, d16, d8
   1c394:	vcmpe.f64	d16, d18
   1c398:	vmrs	APSR_nzcv, fpscr
   1c39c:	bpl	1c3b8 <time_monster@@Base+0x210>
   1c3a0:	movw	r0, #24928	; 0x6160
   1c3a4:	vmov	r2, r3, d16
   1c3a8:	movt	r0, #2
   1c3ac:	vpop	{d8-d9}
   1c3b0:	pop	{r4, sl, fp, lr}
   1c3b4:	b	12e98 <printf@plt>
   1c3b8:	vcmpe.f64	d16, d8
   1c3bc:	vmrs	APSR_nzcv, fpscr
   1c3c0:	bpl	1c3e0 <time_monster@@Base+0x238>
   1c3c4:	movw	r0, #24952	; 0x6178
   1c3c8:	vdiv.f64	d16, d16, d18
   1c3cc:	vmov	r2, r3, d16
   1c3d0:	movt	r0, #2
   1c3d4:	vpop	{d8-d9}
   1c3d8:	pop	{r4, sl, fp, lr}
   1c3dc:	b	12e98 <printf@plt>
   1c3e0:	vcmpe.f64	d16, d17
   1c3e4:	vmrs	APSR_nzcv, fpscr
   1c3e8:	bpl	1c408 <time_monster@@Base+0x260>
   1c3ec:	movw	r0, #24976	; 0x6190
   1c3f0:	vdiv.f64	d16, d16, d8
   1c3f4:	vmov	r2, r3, d16
   1c3f8:	movt	r0, #2
   1c3fc:	vpop	{d8-d9}
   1c400:	pop	{r4, sl, fp, lr}
   1c404:	b	12e98 <printf@plt>
   1c408:	movw	r0, #25000	; 0x61a8
   1c40c:	vdiv.f64	d16, d16, d17
   1c410:	vmov	r2, r3, d16
   1c414:	movt	r0, #2
   1c418:	vpop	{d8-d9}
   1c41c:	pop	{r4, sl, fp, lr}
   1c420:	b	12e98 <printf@plt>
   1c424:	nop	{0}
   1c428:	andeq	r0, r0, r0
   1c42c:	smlawbmi	lr, r0, r4, r8
   1c430:	andeq	r0, r0, r0
   1c434:	bicmi	ip, sp, r5, ror #26
   1c438:	andeq	r0, r0, r0
   1c43c:	addmi	r4, pc, r0

0001c440 <gen_struct_buffer_benchmark@@Base>:
   1c440:	push	{r4, r5, r6, sl, fp, lr}
   1c444:	add	fp, sp, #16
   1c448:	sub	sp, sp, #8
   1c44c:	mov	r4, r0
   1c450:	bl	1dd44 <flatcc_builder_reset@@Base>
   1c454:	mov	r0, r4
   1c458:	mov	r1, #32
   1c45c:	mov	r2, #16
   1c460:	mov	r5, #16
   1c464:	bl	1e9e4 <flatcc_builder_start_struct@@Base>
   1c468:	mov	r6, #0
   1c46c:	cmp	r0, #0
   1c470:	mov	r3, #0
   1c474:	beq	1c4cc <gen_struct_buffer_benchmark@@Base+0x8c>
   1c478:	movw	r1, #52428	; 0xcccc
   1c47c:	movw	r2, #52429	; 0xcccd
   1c480:	movw	r3, #0
   1c484:	movt	r2, #52428	; 0xcccc
   1c488:	movt	r1, #16400	; 0x4010
   1c48c:	movt	r3, #16448	; 0x4040
   1c490:	str	r2, [r0, #16]
   1c494:	str	r1, [r0, #20]
   1c498:	mov	r2, #1065353216	; 0x3f800000
   1c49c:	mov	r1, #1073741824	; 0x40000000
   1c4a0:	str	r2, [r0]
   1c4a4:	stmib	r0, {r1, r3}
   1c4a8:	mov	r1, #8
   1c4ac:	strb	r1, [r0, #24]
   1c4b0:	movw	r1, #2730	; 0xaaa
   1c4b4:	strh	r1, [r0, #26]
   1c4b8:	mov	r1, #239	; 0xef
   1c4bc:	strb	r1, [r0, #28]
   1c4c0:	mov	r0, r4
   1c4c4:	bl	1ead8 <flatcc_builder_end_struct@@Base>
   1c4c8:	mov	r3, r0
   1c4cc:	movw	r1, #17220	; 0x4344
   1c4d0:	mov	r0, r4
   1c4d4:	mov	r2, #0
   1c4d8:	stm	sp, {r5, r6}
   1c4dc:	movt	r1, #2
   1c4e0:	bl	1e380 <flatcc_builder_create_buffer@@Base>
   1c4e4:	mov	r0, r4
   1c4e8:	mov	r1, #0
   1c4ec:	bl	2205c <flatcc_builder_get_direct_buffer@@Base>
   1c4f0:	cmp	r0, #0
   1c4f4:	beq	1c580 <gen_struct_buffer_benchmark@@Base+0x140>
   1c4f8:	ldr	r1, [r0]
   1c4fc:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1c500:	add	r0, r0, r1
   1c504:	vldr	s0, [r0]
   1c508:	vcmp.f32	s0, s2
   1c50c:	vmrs	APSR_nzcv, fpscr
   1c510:	bne	1c580 <gen_struct_buffer_benchmark@@Base+0x140>
   1c514:	vldr	s0, [r0, #4]
   1c518:	vmov.f32	s2, #0	; 0x40000000  2.0
   1c51c:	vcmp.f32	s0, s2
   1c520:	vmrs	APSR_nzcv, fpscr
   1c524:	bne	1c580 <gen_struct_buffer_benchmark@@Base+0x140>
   1c528:	vldr	s0, [r0, #8]
   1c52c:	vmov.f32	s2, #8	; 0x40400000  3.0
   1c530:	vcmp.f32	s0, s2
   1c534:	vmrs	APSR_nzcv, fpscr
   1c538:	bne	1c580 <gen_struct_buffer_benchmark@@Base+0x140>
   1c53c:	vldr	d16, [pc, #76]	; 1c590 <gen_struct_buffer_benchmark@@Base+0x150>
   1c540:	vldr	d17, [r0, #16]
   1c544:	vcmp.f64	d17, d16
   1c548:	vmrs	APSR_nzcv, fpscr
   1c54c:	bne	1c580 <gen_struct_buffer_benchmark@@Base+0x140>
   1c550:	ldrb	r1, [r0, #24]
   1c554:	cmp	r1, #8
   1c558:	bne	1c580 <gen_struct_buffer_benchmark@@Base+0x140>
   1c55c:	ldrh	r1, [r0, #26]
   1c560:	movw	r2, #2730	; 0xaaa
   1c564:	cmp	r1, r2
   1c568:	bne	1c580 <gen_struct_buffer_benchmark@@Base+0x140>
   1c56c:	ldrb	r0, [r0, #28]
   1c570:	subs	r0, r0, #239	; 0xef
   1c574:	mvnne	r0, #0
   1c578:	sub	sp, fp, #16
   1c57c:	pop	{r4, r5, r6, sl, fp, pc}
   1c580:	mvn	r0, #0
   1c584:	sub	sp, fp, #16
   1c588:	pop	{r4, r5, r6, sl, fp, pc}
   1c58c:	nop	{0}
   1c590:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1c594:	andsmi	ip, r0, ip, asr #25

0001c598 <time_struct_buffer@@Base>:
   1c598:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c59c:	add	fp, sp, #24
   1c5a0:	vpush	{d8-d9}
   1c5a4:	sub	sp, sp, #8
   1c5a8:	mov	r4, r0
   1c5ac:	movw	r0, #31584	; 0x7b60
   1c5b0:	movt	r0, #2
   1c5b4:	bl	12eec <puts@plt>
   1c5b8:	mov	r0, sp
   1c5bc:	mov	r1, #0
   1c5c0:	bl	12ee0 <gettimeofday@plt>
   1c5c4:	movw	r8, #41080	; 0xa078
   1c5c8:	movt	r8, #3
   1c5cc:	ldr	r0, [r8]
   1c5d0:	cmp	r0, #0
   1c5d4:	beq	1c5e4 <time_struct_buffer@@Base+0x4c>
   1c5d8:	ldr	r1, [r8, #4]
   1c5dc:	ldr	r2, [sp]
   1c5e0:	b	1c5f0 <time_struct_buffer@@Base+0x58>
   1c5e4:	ldm	sp, {r0, r1}
   1c5e8:	mov	r2, r0
   1c5ec:	strd	r0, [r8]
   1c5f0:	ldr	r3, [sp, #4]
   1c5f4:	vldr	d9, [pc, #220]	; 1c6d8 <time_struct_buffer@@Base+0x140>
   1c5f8:	movw	r6, #16960	; 0x4240
   1c5fc:	sub	r7, r2, r0
   1c600:	mov	r5, #0
   1c604:	movt	r6, #15
   1c608:	sub	r1, r3, r1
   1c60c:	vmov	s0, r1
   1c610:	vcvt.f64.s32	d16, s0
   1c614:	vdiv.f64	d8, d16, d9
   1c618:	mov	r0, r4
   1c61c:	bl	1c440 <gen_struct_buffer_benchmark@@Base>
   1c620:	orr	r5, r0, r5
   1c624:	subs	r6, r6, #1
   1c628:	bne	1c618 <time_struct_buffer@@Base+0x80>
   1c62c:	mov	r0, sp
   1c630:	mov	r1, #0
   1c634:	bl	12ee0 <gettimeofday@plt>
   1c638:	vmov	s0, r7
   1c63c:	vcvt.f64.s32	d16, s0
   1c640:	ldr	r0, [r8]
   1c644:	cmp	r0, #0
   1c648:	beq	1c658 <time_struct_buffer@@Base+0xc0>
   1c64c:	ldr	r1, [r8, #4]
   1c650:	ldr	r2, [sp]
   1c654:	b	1c664 <time_struct_buffer@@Base+0xcc>
   1c658:	ldm	sp, {r0, r1}
   1c65c:	mov	r2, r0
   1c660:	strd	r0, [r8]
   1c664:	sub	r0, r2, r0
   1c668:	ldr	r2, [sp, #4]
   1c66c:	vadd.f64	d8, d8, d16
   1c670:	vmov	s2, r0
   1c674:	mov	r0, r4
   1c678:	sub	r1, r2, r1
   1c67c:	vmov	s0, r1
   1c680:	vcvt.f64.s32	d16, s0
   1c684:	vcvt.f64.s32	d17, s2
   1c688:	vdiv.f64	d16, d16, d9
   1c68c:	vadd.f64	d9, d16, d17
   1c690:	bl	21fd0 <flatcc_builder_get_buffer_size@@Base>
   1c694:	mov	r4, r0
   1c698:	cmp	r5, #0
   1c69c:	beq	1c6ac <time_struct_buffer@@Base+0x114>
   1c6a0:	movw	r0, #31616	; 0x7b80
   1c6a4:	movt	r0, #2
   1c6a8:	bl	12eec <puts@plt>
   1c6ac:	movw	r0, #20507	; 0x501b
   1c6b0:	vmov.f64	d0, d8
   1c6b4:	vmov.f64	d1, d9
   1c6b8:	mov	r1, r4
   1c6bc:	movt	r0, #2
   1c6c0:	bl	1c2c8 <time_monster@@Base+0x120>
   1c6c4:	mov	r0, r5
   1c6c8:	sub	sp, fp, #40	; 0x28
   1c6cc:	vpop	{d8-d9}
   1c6d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c6d4:	nop	{0}
   1c6d8:	andeq	r0, r0, r0
   1c6dc:	smlawbmi	lr, r0, r4, r8

0001c6e0 <main@@Base>:
   1c6e0:	push	{r4, sl, fp, lr}
   1c6e4:	add	fp, sp, #8
   1c6e8:	sub	sp, sp, #232	; 0xe8
   1c6ec:	mov	r4, sp
   1c6f0:	mov	r0, r4
   1c6f4:	bl	1d7a8 <flatcc_builder_init@@Base>
   1c6f8:	movw	r0, #31648	; 0x7ba0
   1c6fc:	movt	r0, #2
   1c700:	bl	12eec <puts@plt>
   1c704:	mov	r0, r4
   1c708:	bl	13cb8 <test_table_with_emptystruct@@Base>
   1c70c:	cmp	r0, #0
   1c710:	bne	1c854 <main@@Base+0x174>
   1c714:	mov	r0, sp
   1c718:	bl	137a4 <test_empty_monster@@Base>
   1c71c:	cmp	r0, #0
   1c720:	bne	1c854 <main@@Base+0x174>
   1c724:	mov	r0, sp
   1c728:	bl	15588 <test_monster@@Base>
   1c72c:	cmp	r0, #0
   1c730:	bne	1c854 <main@@Base+0x174>
   1c734:	mov	r0, sp
   1c738:	bl	15638 <test_monster_with_size@@Base>
   1c73c:	cmp	r0, #0
   1c740:	bne	1c854 <main@@Base+0x174>
   1c744:	mov	r0, sp
   1c748:	bl	1573c <test_string@@Base>
   1c74c:	cmp	r0, #0
   1c750:	bne	1c854 <main@@Base+0x174>
   1c754:	mov	r0, sp
   1c758:	bl	1baa8 <test_struct_buffer@@Base>
   1c75c:	cmp	r0, #0
   1c760:	bne	1c854 <main@@Base+0x174>
   1c764:	mov	r0, sp
   1c768:	bl	139cc <test_typed_empty_monster@@Base>
   1c76c:	cmp	r0, #0
   1c770:	bne	1c854 <main@@Base+0x174>
   1c774:	mov	r0, sp
   1c778:	bl	13e28 <test_typed_table_with_emptystruct@@Base>
   1c77c:	cmp	r0, #0
   1c780:	bne	1c854 <main@@Base+0x174>
   1c784:	mov	r0, sp
   1c788:	bl	1bcd0 <test_typed_struct_buffer@@Base>
   1c78c:	cmp	r0, #0
   1c790:	bne	1c854 <main@@Base+0x174>
   1c794:	mov	r0, sp
   1c798:	bl	18ebc <test_clone_slice@@Base>
   1c79c:	cmp	r0, #0
   1c7a0:	bne	1c854 <main@@Base+0x174>
   1c7a4:	mov	r0, sp
   1c7a8:	bl	1ad50 <test_add_set_defaults@@Base>
   1c7ac:	cmp	r0, #0
   1c7b0:	bne	1c854 <main@@Base+0x174>
   1c7b4:	mov	r0, sp
   1c7b8:	bl	198f0 <test_create_add_field@@Base>
   1c7bc:	cmp	r0, #0
   1c7c0:	bne	1c854 <main@@Base+0x174>
   1c7c4:	mov	r0, sp
   1c7c8:	bl	19bd0 <test_union_vector@@Base>
   1c7cc:	cmp	r0, #0
   1c7d0:	bne	1c854 <main@@Base+0x174>
   1c7d4:	mov	r0, sp
   1c7d8:	bl	188a0 <test_basic_sort@@Base>
   1c7dc:	cmp	r0, #0
   1c7e0:	bne	1c854 <main@@Base+0x174>
   1c7e4:	mov	r0, sp
   1c7e8:	bl	159f8 <test_sort_find@@Base>
   1c7ec:	cmp	r0, #0
   1c7f0:	bne	1c854 <main@@Base+0x174>
   1c7f4:	mov	r0, sp
   1c7f8:	bl	16708 <test_scan@@Base>
   1c7fc:	cmp	r0, #0
   1c800:	bne	1c854 <main@@Base+0x174>
   1c804:	mov	r0, sp
   1c808:	bl	1b06c <test_nested_buffer@@Base>
   1c80c:	cmp	r0, #0
   1c810:	bne	1c854 <main@@Base+0x174>
   1c814:	mov	r0, sp
   1c818:	bl	1b3a4 <test_nested_buffer_first@@Base>
   1c81c:	cmp	r0, #0
   1c820:	bne	1c854 <main@@Base+0x174>
   1c824:	mov	r0, sp
   1c828:	bl	1b6dc <test_nested_buffer_using_nest@@Base>
   1c82c:	cmp	r0, #0
   1c830:	bne	1c854 <main@@Base+0x174>
   1c834:	mov	r0, sp
   1c838:	bl	13158 <test_type_aliases@@Base>
   1c83c:	cmp	r0, #0
   1c840:	bne	1c854 <main@@Base+0x174>
   1c844:	mov	r0, sp
   1c848:	bl	1a12c <test_mixed_type_union@@Base>
   1c84c:	cmp	r0, #0
   1c850:	beq	1c86c <main@@Base+0x18c>
   1c854:	movw	r0, #25083	; 0x61fb
   1c858:	movt	r0, #2
   1c85c:	bl	12eec <puts@plt>
   1c860:	mvn	r0, #0
   1c864:	sub	sp, fp, #8
   1c868:	pop	{r4, sl, fp, pc}
   1c86c:	mov	r0, sp
   1c870:	bl	1dd50 <flatcc_builder_clear@@Base>
   1c874:	mov	r0, #0
   1c878:	sub	sp, fp, #8
   1c87c:	pop	{r4, sl, fp, pc}
   1c880:	push	{r4, sl, fp, lr}
   1c884:	add	fp, sp, #8
   1c888:	sub	sp, sp, #8
   1c88c:	mov	r1, #0
   1c890:	mov	r2, #1
   1c894:	mov	r3, #1
   1c898:	mov	r4, r0
   1c89c:	bl	228f0 <flatcc_verify_field@@Base>
   1c8a0:	cmp	r0, #0
   1c8a4:	bne	1c9f4 <main@@Base+0x314>
   1c8a8:	mov	r0, r4
   1c8ac:	mov	r1, #1
   1c8b0:	mov	r2, #1
   1c8b4:	mov	r3, #1
   1c8b8:	bl	228f0 <flatcc_verify_field@@Base>
   1c8bc:	cmp	r0, #0
   1c8c0:	bne	1c9f4 <main@@Base+0x314>
   1c8c4:	mov	r0, r4
   1c8c8:	mov	r1, #2
   1c8cc:	mov	r2, #2
   1c8d0:	mov	r3, #2
   1c8d4:	bl	228f0 <flatcc_verify_field@@Base>
   1c8d8:	cmp	r0, #0
   1c8dc:	bne	1c9f4 <main@@Base+0x314>
   1c8e0:	mov	r0, r4
   1c8e4:	mov	r1, #3
   1c8e8:	mov	r2, #2
   1c8ec:	mov	r3, #2
   1c8f0:	bl	228f0 <flatcc_verify_field@@Base>
   1c8f4:	cmp	r0, #0
   1c8f8:	bne	1c9f4 <main@@Base+0x314>
   1c8fc:	mov	r0, r4
   1c900:	mov	r1, #4
   1c904:	mov	r2, #4
   1c908:	mov	r3, #4
   1c90c:	bl	228f0 <flatcc_verify_field@@Base>
   1c910:	cmp	r0, #0
   1c914:	bne	1c9f4 <main@@Base+0x314>
   1c918:	mov	r0, r4
   1c91c:	mov	r1, #5
   1c920:	mov	r2, #4
   1c924:	mov	r3, #4
   1c928:	bl	228f0 <flatcc_verify_field@@Base>
   1c92c:	cmp	r0, #0
   1c930:	bne	1c9f4 <main@@Base+0x314>
   1c934:	mov	r0, r4
   1c938:	mov	r1, #6
   1c93c:	mov	r2, #8
   1c940:	mov	r3, #8
   1c944:	bl	228f0 <flatcc_verify_field@@Base>
   1c948:	cmp	r0, #0
   1c94c:	bne	1c9f4 <main@@Base+0x314>
   1c950:	mov	r0, r4
   1c954:	mov	r1, #7
   1c958:	mov	r2, #8
   1c95c:	mov	r3, #8
   1c960:	bl	228f0 <flatcc_verify_field@@Base>
   1c964:	cmp	r0, #0
   1c968:	bne	1c9f4 <main@@Base+0x314>
   1c96c:	mov	r0, r4
   1c970:	mov	r1, #8
   1c974:	mov	r2, #4
   1c978:	mov	r3, #4
   1c97c:	bl	228f0 <flatcc_verify_field@@Base>
   1c980:	cmp	r0, #0
   1c984:	bne	1c9f4 <main@@Base+0x314>
   1c988:	mov	r0, r4
   1c98c:	mov	r1, #9
   1c990:	mov	r2, #8
   1c994:	mov	r3, #8
   1c998:	bl	228f0 <flatcc_verify_field@@Base>
   1c99c:	cmp	r0, #0
   1c9a0:	bne	1c9f4 <main@@Base+0x314>
   1c9a4:	mvn	r0, #0
   1c9a8:	mov	r1, #1
   1c9ac:	mov	r2, #0
   1c9b0:	mov	r3, #1
   1c9b4:	str	r1, [sp]
   1c9b8:	str	r0, [sp, #4]
   1c9bc:	mov	r0, r4
   1c9c0:	mov	r1, #10
   1c9c4:	bl	22a58 <flatcc_verify_vector_field@@Base>
   1c9c8:	cmp	r0, #0
   1c9cc:	bne	1c9f4 <main@@Base+0x314>
   1c9d0:	mvn	r0, #-536870912	; 0xe0000000
   1c9d4:	mov	r1, #8
   1c9d8:	mov	r2, #0
   1c9dc:	mov	r3, #8
   1c9e0:	str	r1, [sp]
   1c9e4:	str	r0, [sp, #4]
   1c9e8:	mov	r0, r4
   1c9ec:	mov	r1, #11
   1c9f0:	bl	22a58 <flatcc_verify_vector_field@@Base>
   1c9f4:	sub	sp, fp, #8
   1c9f8:	pop	{r4, sl, fp, pc}
   1c9fc:	push	{r4, r5, r6, r7, fp, lr}
   1ca00:	add	fp, sp, #16
   1ca04:	sub	sp, sp, #8
   1ca08:	mov	r1, #0
   1ca0c:	mov	r2, #32
   1ca10:	mov	r3, #16
   1ca14:	mov	r4, r0
   1ca18:	bl	228f0 <flatcc_verify_field@@Base>
   1ca1c:	cmp	r0, #0
   1ca20:	bne	1ce28 <main@@Base+0x748>
   1ca24:	mov	r0, r4
   1ca28:	mov	r1, #2
   1ca2c:	mov	r2, #2
   1ca30:	mov	r3, #2
   1ca34:	bl	228f0 <flatcc_verify_field@@Base>
   1ca38:	cmp	r0, #0
   1ca3c:	bne	1ce28 <main@@Base+0x748>
   1ca40:	mov	r0, r4
   1ca44:	mov	r1, #1
   1ca48:	mov	r2, #2
   1ca4c:	mov	r3, #2
   1ca50:	bl	228f0 <flatcc_verify_field@@Base>
   1ca54:	cmp	r0, #0
   1ca58:	bne	1ce28 <main@@Base+0x748>
   1ca5c:	mov	r0, r4
   1ca60:	mov	r1, #3
   1ca64:	mov	r2, #1
   1ca68:	bl	22974 <flatcc_verify_string_field@@Base>
   1ca6c:	cmp	r0, #0
   1ca70:	bne	1ce28 <main@@Base+0x748>
   1ca74:	mov	r0, r4
   1ca78:	mov	r1, #6
   1ca7c:	mov	r2, #1
   1ca80:	mov	r3, #1
   1ca84:	mov	r5, #1
   1ca88:	bl	228f0 <flatcc_verify_field@@Base>
   1ca8c:	cmp	r0, #0
   1ca90:	bne	1ce28 <main@@Base+0x748>
   1ca94:	mvn	r0, #0
   1ca98:	mov	r1, #5
   1ca9c:	mov	r2, #0
   1caa0:	mov	r3, #1
   1caa4:	str	r5, [sp]
   1caa8:	str	r0, [sp, #4]
   1caac:	mov	r0, r4
   1cab0:	bl	22a58 <flatcc_verify_vector_field@@Base>
   1cab4:	cmp	r0, #0
   1cab8:	bne	1ce28 <main@@Base+0x748>
   1cabc:	movw	r3, #51708	; 0xc9fc
   1cac0:	mov	r0, r4
   1cac4:	mov	r1, #11
   1cac8:	mov	r2, #0
   1cacc:	movt	r3, #1
   1cad0:	bl	22e60 <flatcc_verify_table_vector_field@@Base>
   1cad4:	cmp	r0, #0
   1cad8:	bne	1ce28 <main@@Base+0x748>
   1cadc:	mov	r0, r4
   1cae0:	mov	r1, #10
   1cae4:	mov	r2, #0
   1cae8:	bl	22b50 <flatcc_verify_string_vector_field@@Base>
   1caec:	cmp	r0, #0
   1caf0:	bne	1ce28 <main@@Base+0x748>
   1caf4:	mov	r0, r4
   1caf8:	mov	r1, #28
   1cafc:	mov	r2, #0
   1cb00:	bl	22b50 <flatcc_verify_string_vector_field@@Base>
   1cb04:	cmp	r0, #0
   1cb08:	bne	1ce28 <main@@Base+0x748>
   1cb0c:	mvn	r0, #0
   1cb10:	mov	r1, #1
   1cb14:	mov	r2, #0
   1cb18:	mov	r3, #1
   1cb1c:	str	r1, [sp]
   1cb20:	str	r0, [sp, #4]
   1cb24:	mov	r0, r4
   1cb28:	mov	r1, #24
   1cb2c:	bl	22a58 <flatcc_verify_vector_field@@Base>
   1cb30:	cmp	r0, #0
   1cb34:	bne	1ce28 <main@@Base+0x748>
   1cb38:	mvn	r0, #-536870912	; 0xe0000000
   1cb3c:	mov	r1, #4
   1cb40:	mov	r2, #0
   1cb44:	mov	r3, #8
   1cb48:	str	r1, [sp]
   1cb4c:	str	r0, [sp, #4]
   1cb50:	mov	r0, r4
   1cb54:	mov	r1, #29
   1cb58:	bl	22a58 <flatcc_verify_vector_field@@Base>
   1cb5c:	cmp	r0, #0
   1cb60:	bne	1ce28 <main@@Base+0x748>
   1cb64:	movw	r5, #51708	; 0xc9fc
   1cb68:	mov	r0, r4
   1cb6c:	mov	r1, #12
   1cb70:	mov	r2, #0
   1cb74:	movt	r5, #1
   1cb78:	mov	r3, r5
   1cb7c:	bl	22cf4 <flatcc_verify_table_field@@Base>
   1cb80:	cmp	r0, #0
   1cb84:	bne	1ce28 <main@@Base+0x748>
   1cb88:	movw	r3, #52816	; 0xce50
   1cb8c:	mov	r0, r4
   1cb90:	mov	r1, #8
   1cb94:	mov	r2, #0
   1cb98:	movt	r3, #1
   1cb9c:	bl	23d9c <flatcc_verify_union_field@@Base>
   1cba0:	cmp	r0, #0
   1cba4:	bne	1ce28 <main@@Base+0x748>
   1cba8:	mvn	r6, #-1073741824	; 0xc0000000
   1cbac:	mov	r7, #2
   1cbb0:	mov	r0, r4
   1cbb4:	mov	r1, #9
   1cbb8:	mov	r2, #0
   1cbbc:	mov	r3, #4
   1cbc0:	str	r7, [sp]
   1cbc4:	str	r6, [sp, #4]
   1cbc8:	bl	22a58 <flatcc_verify_vector_field@@Base>
   1cbcc:	cmp	r0, #0
   1cbd0:	bne	1ce28 <main@@Base+0x748>
   1cbd4:	mov	r0, r4
   1cbd8:	mov	r1, #31
   1cbdc:	mov	r2, #0
   1cbe0:	mov	r3, #4
   1cbe4:	str	r7, [sp]
   1cbe8:	str	r6, [sp, #4]
   1cbec:	bl	22a58 <flatcc_verify_vector_field@@Base>
   1cbf0:	cmp	r0, #0
   1cbf4:	bne	1ce28 <main@@Base+0x748>
   1cbf8:	mov	r0, #1
   1cbfc:	mov	r1, #13
   1cc00:	mov	r2, #0
   1cc04:	mov	r3, #0
   1cc08:	stm	sp, {r0, r5}
   1cc0c:	mov	r0, r4
   1cc10:	bl	23a64 <flatcc_verify_table_as_nested_root@@Base>
   1cc14:	cmp	r0, #0
   1cc18:	bne	1ce28 <main@@Base+0x748>
   1cc1c:	movw	r3, #52860	; 0xce7c
   1cc20:	mov	r0, r4
   1cc24:	mov	r1, #14
   1cc28:	mov	r2, #0
   1cc2c:	movt	r3, #1
   1cc30:	bl	22cf4 <flatcc_verify_table_field@@Base>
   1cc34:	cmp	r0, #0
   1cc38:	bne	1ce28 <main@@Base+0x748>
   1cc3c:	mov	r0, r4
   1cc40:	mov	r1, #15
   1cc44:	mov	r2, #1
   1cc48:	mov	r3, #1
   1cc4c:	bl	228f0 <flatcc_verify_field@@Base>
   1cc50:	cmp	r0, #0
   1cc54:	bne	1ce28 <main@@Base+0x748>
   1cc58:	mov	r0, r4
   1cc5c:	mov	r1, #16
   1cc60:	mov	r2, #4
   1cc64:	mov	r3, #4
   1cc68:	bl	228f0 <flatcc_verify_field@@Base>
   1cc6c:	cmp	r0, #0
   1cc70:	bne	1ce28 <main@@Base+0x748>
   1cc74:	mov	r0, r4
   1cc78:	mov	r1, #17
   1cc7c:	mov	r2, #4
   1cc80:	mov	r3, #4
   1cc84:	bl	228f0 <flatcc_verify_field@@Base>
   1cc88:	cmp	r0, #0
   1cc8c:	bne	1ce28 <main@@Base+0x748>
   1cc90:	mov	r0, r4
   1cc94:	mov	r1, #18
   1cc98:	mov	r2, #8
   1cc9c:	mov	r3, #8
   1cca0:	bl	228f0 <flatcc_verify_field@@Base>
   1cca4:	cmp	r0, #0
   1cca8:	bne	1ce28 <main@@Base+0x748>
   1ccac:	mov	r0, r4
   1ccb0:	mov	r1, #19
   1ccb4:	mov	r2, #8
   1ccb8:	mov	r3, #8
   1ccbc:	bl	228f0 <flatcc_verify_field@@Base>
   1ccc0:	cmp	r0, #0
   1ccc4:	bne	1ce28 <main@@Base+0x748>
   1ccc8:	mov	r0, r4
   1cccc:	mov	r1, #20
   1ccd0:	mov	r2, #4
   1ccd4:	mov	r3, #4
   1ccd8:	bl	228f0 <flatcc_verify_field@@Base>
   1ccdc:	cmp	r0, #0
   1cce0:	bne	1ce28 <main@@Base+0x748>
   1cce4:	mov	r0, r4
   1cce8:	mov	r1, #21
   1ccec:	mov	r2, #4
   1ccf0:	mov	r3, #4
   1ccf4:	bl	228f0 <flatcc_verify_field@@Base>
   1ccf8:	cmp	r0, #0
   1ccfc:	bne	1ce28 <main@@Base+0x748>
   1cd00:	mov	r0, r4
   1cd04:	mov	r1, #22
   1cd08:	mov	r2, #8
   1cd0c:	mov	r3, #8
   1cd10:	bl	228f0 <flatcc_verify_field@@Base>
   1cd14:	cmp	r0, #0
   1cd18:	bne	1ce28 <main@@Base+0x748>
   1cd1c:	mov	r0, r4
   1cd20:	mov	r1, #23
   1cd24:	mov	r2, #8
   1cd28:	mov	r3, #8
   1cd2c:	bl	228f0 <flatcc_verify_field@@Base>
   1cd30:	cmp	r0, #0
   1cd34:	bne	1ce28 <main@@Base+0x748>
   1cd38:	mov	r0, r4
   1cd3c:	mov	r1, #25
   1cd40:	mov	r2, #4
   1cd44:	mov	r3, #4
   1cd48:	bl	228f0 <flatcc_verify_field@@Base>
   1cd4c:	cmp	r0, #0
   1cd50:	bne	1ce28 <main@@Base+0x748>
   1cd54:	mov	r0, r4
   1cd58:	mov	r1, #26
   1cd5c:	mov	r2, #4
   1cd60:	mov	r3, #4
   1cd64:	bl	228f0 <flatcc_verify_field@@Base>
   1cd68:	cmp	r0, #0
   1cd6c:	bne	1ce28 <main@@Base+0x748>
   1cd70:	mov	r0, r4
   1cd74:	mov	r1, #27
   1cd78:	mov	r2, #4
   1cd7c:	mov	r3, #4
   1cd80:	bl	228f0 <flatcc_verify_field@@Base>
   1cd84:	cmp	r0, #0
   1cd88:	bne	1ce28 <main@@Base+0x748>
   1cd8c:	mvn	r0, #0
   1cd90:	mov	r1, #1
   1cd94:	mov	r2, #0
   1cd98:	mov	r3, #1
   1cd9c:	str	r1, [sp]
   1cda0:	str	r0, [sp, #4]
   1cda4:	mov	r0, r4
   1cda8:	mov	r1, #30
   1cdac:	bl	22a58 <flatcc_verify_vector_field@@Base>
   1cdb0:	cmp	r0, #0
   1cdb4:	bne	1ce28 <main@@Base+0x748>
   1cdb8:	mvn	r5, #-536870912	; 0xe0000000
   1cdbc:	mov	r6, #8
   1cdc0:	mov	r0, r4
   1cdc4:	mov	r1, #32
   1cdc8:	mov	r2, #0
   1cdcc:	mov	r3, #8
   1cdd0:	str	r6, [sp]
   1cdd4:	str	r5, [sp, #4]
   1cdd8:	bl	22a58 <flatcc_verify_vector_field@@Base>
   1cddc:	cmp	r0, #0
   1cde0:	bne	1ce28 <main@@Base+0x748>
   1cde4:	mov	r0, r4
   1cde8:	mov	r1, #33	; 0x21
   1cdec:	mov	r2, #0
   1cdf0:	mov	r3, #8
   1cdf4:	str	r6, [sp]
   1cdf8:	str	r5, [sp, #4]
   1cdfc:	bl	22a58 <flatcc_verify_vector_field@@Base>
   1ce00:	cmp	r0, #0
   1ce04:	bne	1ce28 <main@@Base+0x748>
   1ce08:	movw	r3, #52948	; 0xced4
   1ce0c:	mov	r0, r4
   1ce10:	mov	r1, #34	; 0x22
   1ce14:	mov	r2, #0
   1ce18:	movt	r3, #1
   1ce1c:	bl	22cf4 <flatcc_verify_table_field@@Base>
   1ce20:	cmp	r0, #0
   1ce24:	beq	1ce30 <main@@Base+0x750>
   1ce28:	sub	sp, fp, #16
   1ce2c:	pop	{r4, r5, r6, r7, fp, pc}
   1ce30:	movw	r3, #52956	; 0xcedc
   1ce34:	mov	r0, r4
   1ce38:	mov	r1, #35	; 0x23
   1ce3c:	mov	r2, #0
   1ce40:	movt	r3, #1
   1ce44:	sub	sp, fp, #16
   1ce48:	pop	{r4, r5, r6, r7, fp, lr}
   1ce4c:	b	22cf4 <flatcc_verify_table_field@@Base>
   1ce50:	ldrb	r1, [r0, #12]
   1ce54:	sub	r1, r1, #1
   1ce58:	uxtb	r2, r1
   1ce5c:	cmp	r2, #3
   1ce60:	movhi	r0, #0
   1ce64:	bxhi	lr
   1ce68:	movw	r2, #25244	; 0x629c
   1ce6c:	sxtb	r1, r1
   1ce70:	movt	r2, #2
   1ce74:	ldr	r1, [r2, r1, lsl #2]
   1ce78:	b	23160 <flatcc_verify_union_table@@Base>
   1ce7c:	push	{r4, sl, fp, lr}
   1ce80:	add	fp, sp, #8
   1ce84:	mov	r1, #0
   1ce88:	mov	r2, #0
   1ce8c:	mov	r4, r0
   1ce90:	bl	22974 <flatcc_verify_string_field@@Base>
   1ce94:	cmp	r0, #0
   1ce98:	popne	{r4, sl, fp, pc}
   1ce9c:	mov	r0, r4
   1cea0:	mov	r1, #1
   1cea4:	mov	r2, #8
   1cea8:	mov	r3, #8
   1ceac:	bl	228f0 <flatcc_verify_field@@Base>
   1ceb0:	cmp	r0, #0
   1ceb4:	beq	1cebc <main@@Base+0x7dc>
   1ceb8:	pop	{r4, sl, fp, pc}
   1cebc:	mov	r0, r4
   1cec0:	mov	r1, #2
   1cec4:	mov	r2, #2
   1cec8:	mov	r3, #2
   1cecc:	pop	{r4, sl, fp, lr}
   1ced0:	b	228f0 <flatcc_verify_field@@Base>
   1ced4:	mov	r0, #0
   1ced8:	bx	lr
   1cedc:	push	{r4, r5, r6, sl, fp, lr}
   1cee0:	add	fp, sp, #16
   1cee4:	sub	sp, sp, #8
   1cee8:	mvn	r5, #0
   1ceec:	mov	r6, #1
   1cef0:	mov	r1, #0
   1cef4:	mov	r2, #0
   1cef8:	mov	r3, #1
   1cefc:	mov	r4, r0
   1cf00:	str	r6, [sp]
   1cf04:	str	r5, [sp, #4]
   1cf08:	bl	22a58 <flatcc_verify_vector_field@@Base>
   1cf0c:	cmp	r0, #0
   1cf10:	bne	1cf38 <main@@Base+0x858>
   1cf14:	mov	r0, r4
   1cf18:	mov	r1, #1
   1cf1c:	mov	r2, #0
   1cf20:	mov	r3, #1
   1cf24:	str	r6, [sp]
   1cf28:	str	r5, [sp, #4]
   1cf2c:	bl	22a58 <flatcc_verify_vector_field@@Base>
   1cf30:	cmp	r0, #0
   1cf34:	beq	1cf40 <main@@Base+0x860>
   1cf38:	sub	sp, fp, #16
   1cf3c:	pop	{r4, r5, r6, sl, fp, pc}
   1cf40:	movw	r0, #51708	; 0xc9fc
   1cf44:	mov	r1, #1
   1cf48:	mov	r2, #0
   1cf4c:	mov	r3, #0
   1cf50:	movt	r0, #1
   1cf54:	str	r1, [sp]
   1cf58:	mov	r1, #2
   1cf5c:	str	r0, [sp, #4]
   1cf60:	mov	r0, r4
   1cf64:	bl	23a64 <flatcc_verify_table_as_nested_root@@Base>
   1cf68:	sub	sp, fp, #16
   1cf6c:	pop	{r4, r5, r6, sl, fp, pc}
   1cf70:	push	{r4, sl, fp, lr}
   1cf74:	add	fp, sp, #8
   1cf78:	mov	r1, #0
   1cf7c:	mov	r2, #1
   1cf80:	mov	r3, #1
   1cf84:	mov	r4, r0
   1cf88:	bl	228f0 <flatcc_verify_field@@Base>
   1cf8c:	cmp	r0, #0
   1cf90:	bne	1cfcc <main@@Base+0x8ec>
   1cf94:	mov	r0, r4
   1cf98:	mov	r1, #1
   1cf9c:	mov	r2, #1
   1cfa0:	mov	r3, #1
   1cfa4:	bl	228f0 <flatcc_verify_field@@Base>
   1cfa8:	cmp	r0, #0
   1cfac:	popne	{r4, sl, fp, pc}
   1cfb0:	mov	r0, r4
   1cfb4:	mov	r1, #2
   1cfb8:	mov	r2, #1
   1cfbc:	mov	r3, #1
   1cfc0:	bl	228f0 <flatcc_verify_field@@Base>
   1cfc4:	cmp	r0, #0
   1cfc8:	beq	1cfd0 <main@@Base+0x8f0>
   1cfcc:	pop	{r4, sl, fp, pc}
   1cfd0:	mov	r0, r4
   1cfd4:	mov	r1, #3
   1cfd8:	mov	r2, #1
   1cfdc:	mov	r3, #1
   1cfe0:	pop	{r4, sl, fp, lr}
   1cfe4:	b	228f0 <flatcc_verify_field@@Base>
   1cfe8:	mov	r0, #0
   1cfec:	bx	lr
   1cff0:	push	{r4, sl, fp, lr}
   1cff4:	add	fp, sp, #8
   1cff8:	movw	r3, #53336	; 0xd058
   1cffc:	mov	r1, #0
   1d000:	mov	r2, #0
   1d004:	mov	r4, r0
   1d008:	movt	r3, #1
   1d00c:	bl	22cf4 <flatcc_verify_table_field@@Base>
   1d010:	cmp	r0, #0
   1d014:	popne	{r4, sl, fp, pc}
   1d018:	movw	r3, #53440	; 0xd0c0
   1d01c:	mov	r0, r4
   1d020:	mov	r1, #1
   1d024:	mov	r2, #0
   1d028:	movt	r3, #1
   1d02c:	bl	22cf4 <flatcc_verify_table_field@@Base>
   1d030:	cmp	r0, #0
   1d034:	beq	1d03c <main@@Base+0x95c>
   1d038:	pop	{r4, sl, fp, pc}
   1d03c:	movw	r3, #52816	; 0xce50
   1d040:	mov	r0, r4
   1d044:	mov	r1, #3
   1d048:	mov	r2, #0
   1d04c:	movt	r3, #1
   1d050:	pop	{r4, sl, fp, lr}
   1d054:	b	23f20 <flatcc_verify_union_vector_field@@Base>
   1d058:	push	{r4, sl, fp, lr}
   1d05c:	add	fp, sp, #8
   1d060:	movw	r3, #53608	; 0xd168
   1d064:	mov	r1, #0
   1d068:	mov	r2, #0
   1d06c:	mov	r4, r0
   1d070:	movt	r3, #1
   1d074:	bl	22cf4 <flatcc_verify_table_field@@Base>
   1d078:	cmp	r0, #0
   1d07c:	popne	{r4, sl, fp, pc}
   1d080:	movw	r3, #53856	; 0xd260
   1d084:	mov	r0, r4
   1d088:	mov	r1, #1
   1d08c:	mov	r2, #0
   1d090:	movt	r3, #1
   1d094:	bl	22cf4 <flatcc_verify_table_field@@Base>
   1d098:	cmp	r0, #0
   1d09c:	beq	1d0a4 <main@@Base+0x9c4>
   1d0a0:	pop	{r4, sl, fp, pc}
   1d0a4:	movw	r3, #53916	; 0xd29c
   1d0a8:	mov	r0, r4
   1d0ac:	mov	r1, #2
   1d0b0:	mov	r2, #0
   1d0b4:	movt	r3, #1
   1d0b8:	pop	{r4, sl, fp, lr}
   1d0bc:	b	22cf4 <flatcc_verify_table_field@@Base>
   1d0c0:	push	{r4, sl, fp, lr}
   1d0c4:	add	fp, sp, #8
   1d0c8:	movw	r3, #53976	; 0xd2d8
   1d0cc:	mov	r1, #1
   1d0d0:	mov	r2, #0
   1d0d4:	mov	r4, r0
   1d0d8:	movt	r3, #1
   1d0dc:	bl	23d9c <flatcc_verify_union_field@@Base>
   1d0e0:	cmp	r0, #0
   1d0e4:	bne	1d148 <main@@Base+0xa68>
   1d0e8:	movw	r3, #53976	; 0xd2d8
   1d0ec:	mov	r0, r4
   1d0f0:	mov	r1, #3
   1d0f4:	mov	r2, #0
   1d0f8:	movt	r3, #1
   1d0fc:	bl	23d9c <flatcc_verify_union_field@@Base>
   1d100:	cmp	r0, #0
   1d104:	bne	1d148 <main@@Base+0xa68>
   1d108:	movw	r3, #53976	; 0xd2d8
   1d10c:	mov	r0, r4
   1d110:	mov	r1, #5
   1d114:	mov	r2, #0
   1d118:	movt	r3, #1
   1d11c:	bl	23d9c <flatcc_verify_union_field@@Base>
   1d120:	cmp	r0, #0
   1d124:	popne	{r4, sl, fp, pc}
   1d128:	movw	r3, #53976	; 0xd2d8
   1d12c:	mov	r0, r4
   1d130:	mov	r1, #7
   1d134:	mov	r2, #0
   1d138:	movt	r3, #1
   1d13c:	bl	23d9c <flatcc_verify_union_field@@Base>
   1d140:	cmp	r0, #0
   1d144:	beq	1d14c <main@@Base+0xa6c>
   1d148:	pop	{r4, sl, fp, pc}
   1d14c:	movw	r3, #53976	; 0xd2d8
   1d150:	mov	r0, r4
   1d154:	mov	r1, #9
   1d158:	mov	r2, #0
   1d15c:	movt	r3, #1
   1d160:	pop	{r4, sl, fp, lr}
   1d164:	b	23f20 <flatcc_verify_union_vector_field@@Base>
   1d168:	push	{r4, sl, fp, lr}
   1d16c:	add	fp, sp, #8
   1d170:	mov	r1, #0
   1d174:	mov	r2, #0
   1d178:	mov	r4, r0
   1d17c:	bl	22974 <flatcc_verify_string_field@@Base>
   1d180:	cmp	r0, #0
   1d184:	bne	1d244 <main@@Base+0xb64>
   1d188:	mov	r0, r4
   1d18c:	mov	r1, #1
   1d190:	mov	r2, #4
   1d194:	mov	r3, #4
   1d198:	bl	228f0 <flatcc_verify_field@@Base>
   1d19c:	cmp	r0, #0
   1d1a0:	bne	1d244 <main@@Base+0xb64>
   1d1a4:	mov	r0, r4
   1d1a8:	mov	r1, #2
   1d1ac:	mov	r2, #0
   1d1b0:	bl	22974 <flatcc_verify_string_field@@Base>
   1d1b4:	cmp	r0, #0
   1d1b8:	bne	1d244 <main@@Base+0xb64>
   1d1bc:	mov	r0, r4
   1d1c0:	mov	r1, #3
   1d1c4:	mov	r2, #8
   1d1c8:	mov	r3, #8
   1d1cc:	bl	228f0 <flatcc_verify_field@@Base>
   1d1d0:	cmp	r0, #0
   1d1d4:	bne	1d244 <main@@Base+0xb64>
   1d1d8:	mov	r0, r4
   1d1dc:	mov	r1, #4
   1d1e0:	mov	r2, #0
   1d1e4:	bl	22974 <flatcc_verify_string_field@@Base>
   1d1e8:	cmp	r0, #0
   1d1ec:	bne	1d244 <main@@Base+0xb64>
   1d1f0:	mov	r0, r4
   1d1f4:	mov	r1, #5
   1d1f8:	mov	r2, #8
   1d1fc:	mov	r3, #8
   1d200:	bl	228f0 <flatcc_verify_field@@Base>
   1d204:	cmp	r0, #0
   1d208:	bne	1d244 <main@@Base+0xb64>
   1d20c:	mov	r0, r4
   1d210:	mov	r1, #6
   1d214:	mov	r2, #4
   1d218:	mov	r3, #4
   1d21c:	bl	228f0 <flatcc_verify_field@@Base>
   1d220:	cmp	r0, #0
   1d224:	popne	{r4, sl, fp, pc}
   1d228:	mov	r0, r4
   1d22c:	mov	r1, #7
   1d230:	mov	r2, #8
   1d234:	mov	r3, #8
   1d238:	bl	228f0 <flatcc_verify_field@@Base>
   1d23c:	cmp	r0, #0
   1d240:	beq	1d248 <main@@Base+0xb68>
   1d244:	pop	{r4, sl, fp, pc}
   1d248:	mov	r0, r4
   1d24c:	mov	r1, #8
   1d250:	mov	r2, #4
   1d254:	mov	r3, #4
   1d258:	pop	{r4, sl, fp, lr}
   1d25c:	b	228f0 <flatcc_verify_field@@Base>
   1d260:	push	{r4, sl, fp, lr}
   1d264:	add	fp, sp, #8
   1d268:	mov	r1, #0
   1d26c:	mov	r2, #8
   1d270:	mov	r3, #8
   1d274:	mov	r4, r0
   1d278:	bl	228f0 <flatcc_verify_field@@Base>
   1d27c:	cmp	r0, #0
   1d280:	popne	{r4, sl, fp, pc}
   1d284:	mov	r0, r4
   1d288:	mov	r1, #1
   1d28c:	mov	r2, #4
   1d290:	mov	r3, #4
   1d294:	pop	{r4, sl, fp, lr}
   1d298:	b	228f0 <flatcc_verify_field@@Base>
   1d29c:	push	{r4, sl, fp, lr}
   1d2a0:	add	fp, sp, #8
   1d2a4:	mov	r1, #0
   1d2a8:	mov	r2, #8
   1d2ac:	mov	r3, #8
   1d2b0:	mov	r4, r0
   1d2b4:	bl	228f0 <flatcc_verify_field@@Base>
   1d2b8:	cmp	r0, #0
   1d2bc:	popne	{r4, sl, fp, pc}
   1d2c0:	mov	r0, r4
   1d2c4:	mov	r1, #1
   1d2c8:	mov	r2, #4
   1d2cc:	mov	r3, #4
   1d2d0:	pop	{r4, sl, fp, lr}
   1d2d4:	b	228f0 <flatcc_verify_field@@Base>
   1d2d8:	ldrb	r2, [r0, #12]
   1d2dc:	sub	r1, r2, #2
   1d2e0:	cmp	r1, #9
   1d2e4:	bhi	1d324 <main@@Base+0xc44>
   1d2e8:	add	r2, pc, #0
   1d2ec:	ldr	pc, [r2, r1, lsl #2]
   1d2f0:	andeq	sp, r1, r8, lsr r3
   1d2f4:	andeq	sp, r1, r0, lsr r3
   1d2f8:	andeq	sp, r1, r0, lsr r3
   1d2fc:	andeq	sp, r1, r0, lsr r3
   1d300:	andeq	sp, r1, r0, lsr r3
   1d304:	andeq	sp, r1, r0, lsr r3
   1d308:	andeq	sp, r1, r4, asr #6
   1d30c:	andeq	sp, r1, r8, lsl r3
   1d310:	andeq	sp, r1, r8, lsl r3
   1d314:	andeq	sp, r1, ip, lsr #6
   1d318:	mov	r1, #4
   1d31c:	mov	r2, #4
   1d320:	b	23248 <flatcc_verify_union_struct@@Base>
   1d324:	cmp	r2, #255	; 0xff
   1d328:	bne	1d330 <main@@Base+0xc50>
   1d32c:	b	232a0 <flatcc_verify_union_string@@Base>
   1d330:	mov	r0, #0
   1d334:	bx	lr
   1d338:	movw	r1, #54096	; 0xd350
   1d33c:	movt	r1, #1
   1d340:	b	23160 <flatcc_verify_union_table@@Base>
   1d344:	mov	r1, #2
   1d348:	mov	r2, #2
   1d34c:	b	23248 <flatcc_verify_union_struct@@Base>
   1d350:	mov	r1, #0
   1d354:	mov	r2, #4
   1d358:	mov	r3, #4
   1d35c:	b	228f0 <flatcc_verify_field@@Base>
   1d360:	mov	r1, #0
   1d364:	mov	r2, #0
   1d368:	mov	r3, #1
   1d36c:	b	228f0 <flatcc_verify_field@@Base>
   1d370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d374:	add	fp, sp, #28
   1d378:	sub	sp, sp, #12
   1d37c:	cmp	r2, r1, lsl #1
   1d380:	bcs	1d38c <main@@Base+0xcac>
   1d384:	sub	sp, fp, #28
   1d388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d38c:	mov	r9, r2
   1d390:	mov	sl, r0
   1d394:	lsl	r4, r1, #1
   1d398:	str	r0, [sp]
   1d39c:	cmp	r4, r9
   1d3a0:	bcs	1d488 <main@@Base+0xda8>
   1d3a4:	cmp	sl, #0
   1d3a8:	ldrne	r8, [sl, #-4]
   1d3ac:	cmpne	r8, r4
   1d3b0:	bls	1d5a4 <main@@Base+0xec4>
   1d3b4:	mov	r0, sl
   1d3b8:	ldr	r2, [r0, r4, lsl #2]!
   1d3bc:	adds	r0, r0, r2
   1d3c0:	beq	1d5d0 <main@@Base+0xef0>
   1d3c4:	ldr	r2, [r0]
   1d3c8:	mov	r3, r0
   1d3cc:	ldrh	r2, [r3, -r2]!	; <UNPREDICTABLE>
   1d3d0:	cmp	r2, #12
   1d3d4:	bcc	1d5c4 <main@@Base+0xee4>
   1d3d8:	ldrh	ip, [r3, #10]
   1d3dc:	cmp	ip, #0
   1d3e0:	beq	1d5c4 <main@@Base+0xee4>
   1d3e4:	orr	r7, r4, #1
   1d3e8:	cmp	r8, r7
   1d3ec:	bls	1d5a4 <main@@Base+0xec4>
   1d3f0:	mov	r2, sl
   1d3f4:	ldr	r3, [r2, r7, lsl #2]!
   1d3f8:	adds	r3, r2, r3
   1d3fc:	beq	1d5d0 <main@@Base+0xef0>
   1d400:	ldr	r6, [r3]
   1d404:	mov	r2, r3
   1d408:	str	r1, [sp, #8]
   1d40c:	ldrh	r6, [r2, -r6]!	; <UNPREDICTABLE>
   1d410:	cmp	r6, #12
   1d414:	bcc	1d5c4 <main@@Base+0xee4>
   1d418:	ldrh	r2, [r2, #10]
   1d41c:	cmp	r2, #0
   1d420:	beq	1d5c4 <main@@Base+0xee4>
   1d424:	ldr	r1, [r0, ip]!
   1d428:	mov	r5, r9
   1d42c:	add	r0, r0, r1
   1d430:	ldr	r1, [r3, r2]!
   1d434:	add	r0, r0, #4
   1d438:	ldr	r6, [r0, #-4]
   1d43c:	ldr	r9, [r3, r1]!
   1d440:	cmp	r6, r9
   1d444:	mov	r2, r9
   1d448:	add	r1, r3, #4
   1d44c:	movcc	r2, r6
   1d450:	bl	12f70 <strncmp@plt>
   1d454:	cmp	r0, #0
   1d458:	mov	r0, r7
   1d45c:	ldr	r1, [sp, #8]
   1d460:	movne	r0, r4
   1d464:	movlt	r0, r7
   1d468:	movne	r4, r0
   1d46c:	cmp	r6, r9
   1d470:	mov	r9, r5
   1d474:	movcc	r4, r0
   1d478:	mov	r6, r4
   1d47c:	cmp	r8, r1
   1d480:	bhi	1d4a0 <main@@Base+0xdc0>
   1d484:	b	1d5a4 <main@@Base+0xec4>
   1d488:	cmp	sl, #0
   1d48c:	beq	1d5a4 <main@@Base+0xec4>
   1d490:	ldr	r8, [sl, #-4]
   1d494:	mov	r6, r4
   1d498:	cmp	r8, r1
   1d49c:	bls	1d5a4 <main@@Base+0xec4>
   1d4a0:	mov	r4, sl
   1d4a4:	ldr	r5, [r4, r1, lsl #2]!
   1d4a8:	adds	r0, r4, r5
   1d4ac:	beq	1d5d0 <main@@Base+0xef0>
   1d4b0:	ldr	r2, [r0]
   1d4b4:	mov	r3, r0
   1d4b8:	ldrh	r2, [r3, -r2]!	; <UNPREDICTABLE>
   1d4bc:	cmp	r2, #12
   1d4c0:	bcc	1d5c4 <main@@Base+0xee4>
   1d4c4:	ldrh	ip, [r3, #10]
   1d4c8:	cmp	ip, #0
   1d4cc:	beq	1d5c4 <main@@Base+0xee4>
   1d4d0:	cmp	r8, r6
   1d4d4:	bls	1d5a4 <main@@Base+0xec4>
   1d4d8:	mov	r7, sl
   1d4dc:	ldr	r8, [r7, r6, lsl #2]!
   1d4e0:	adds	r3, r7, r8
   1d4e4:	beq	1d5d0 <main@@Base+0xef0>
   1d4e8:	stmib	sp, {r5, r6}
   1d4ec:	mov	r2, r3
   1d4f0:	ldr	r5, [r3]
   1d4f4:	ldrh	r5, [r2, -r5]!	; <UNPREDICTABLE>
   1d4f8:	cmp	r5, #12
   1d4fc:	bcc	1d5c4 <main@@Base+0xee4>
   1d500:	ldrh	r2, [r2, #10]
   1d504:	cmp	r2, #0
   1d508:	beq	1d5c4 <main@@Base+0xee4>
   1d50c:	mov	r6, r1
   1d510:	ldr	r1, [r0, ip]!
   1d514:	add	r0, r0, r1
   1d518:	ldr	r1, [r3, r2]!
   1d51c:	add	r0, r0, #4
   1d520:	ldr	sl, [r0, #-4]
   1d524:	ldr	r5, [r3, r1]!
   1d528:	cmp	sl, r5
   1d52c:	mov	r2, r5
   1d530:	add	r1, r3, #4
   1d534:	movcc	r2, sl
   1d538:	bl	12f70 <strncmp@plt>
   1d53c:	cmp	r0, #1
   1d540:	mov	r1, #0
   1d544:	mov	r2, #0
   1d548:	movwlt	r1, #1
   1d54c:	cmp	r0, #0
   1d550:	movwne	r0, #1
   1d554:	cmp	sl, r5
   1d558:	ldr	sl, [sp]
   1d55c:	movwcc	r2, #1
   1d560:	orr	r0, r2, r0
   1d564:	cmp	r0, #1
   1d568:	bne	1d384 <main@@Base+0xca4>
   1d56c:	cmp	r1, #0
   1d570:	beq	1d384 <main@@Base+0xca4>
   1d574:	ldr	r2, [sp, #8]
   1d578:	sub	r0, r6, r2
   1d57c:	cmp	r9, r2, lsl #1
   1d580:	sub	r1, r8, r0, lsl #2
   1d584:	str	r1, [r4]
   1d588:	ldr	r1, [sp, #4]
   1d58c:	lsl	r4, r2, #1
   1d590:	add	r0, r1, r0, lsl #2
   1d594:	mov	r1, r2
   1d598:	str	r0, [r7]
   1d59c:	bcs	1d39c <main@@Base+0xcbc>
   1d5a0:	b	1d384 <main@@Base+0xca4>
   1d5a4:	movw	r0, #22025	; 0x5609
   1d5a8:	movw	r1, #20590	; 0x506e
   1d5ac:	movw	r3, #22352	; 0x5750
   1d5b0:	movw	r2, #693	; 0x2b5
   1d5b4:	movt	r0, #2
   1d5b8:	movt	r1, #2
   1d5bc:	movt	r3, #2
   1d5c0:	bl	12f88 <__assert_fail@plt>
   1d5c4:	movw	r0, #21903	; 0x558f
   1d5c8:	movt	r0, #2
   1d5cc:	b	1d5d8 <main@@Base+0xef8>
   1d5d0:	movw	r0, #20552	; 0x5048
   1d5d4:	movt	r0, #2
   1d5d8:	movw	r1, #20590	; 0x506e
   1d5dc:	movw	r3, #21822	; 0x553e
   1d5e0:	movw	r2, #699	; 0x2bb
   1d5e4:	movt	r1, #2
   1d5e8:	movt	r3, #2
   1d5ec:	bl	12f88 <__assert_fail@plt>

0001d5f0 <flatcc_builder_default_alloc@@Base>:
   1d5f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d5f4:	add	fp, sp, #24
   1d5f8:	mov	r4, r1
   1d5fc:	cmp	r2, #0
   1d600:	beq	1d648 <flatcc_builder_default_alloc@@Base+0x58>
   1d604:	ldr	r0, [fp, #8]
   1d608:	mov	r8, r3
   1d60c:	sub	r1, r0, #1
   1d610:	cmp	r1, #6
   1d614:	bhi	1d674 <flatcc_builder_default_alloc@@Base+0x84>
   1d618:	add	r3, pc, #4
   1d61c:	mov	r0, #256	; 0x100
   1d620:	ldr	pc, [r3, r1, lsl #2]
   1d624:	andeq	sp, r1, r8, lsl #13
   1d628:	andeq	sp, r1, r4, ror r6
   1d62c:	andeq	sp, r1, r4, ror r6
   1d630:	andeq	sp, r1, r0, asr #12
   1d634:	andeq	sp, r1, ip, ror r6
   1d638:	andeq	sp, r1, r4, ror r6
   1d63c:	andeq	sp, r1, r4, lsl #13
   1d640:	mov	r0, #288	; 0x120
   1d644:	b	1d688 <flatcc_builder_default_alloc@@Base+0x98>
   1d648:	ldr	r0, [r4]
   1d64c:	cmp	r0, #0
   1d650:	moveq	r6, #0
   1d654:	moveq	r0, r6
   1d658:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d65c:	bl	12ea4 <free@plt>
   1d660:	mov	r6, #0
   1d664:	mov	r0, r6
   1d668:	str	r6, [r4]
   1d66c:	str	r6, [r4, #4]
   1d670:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d674:	mov	r0, #32
   1d678:	b	1d688 <flatcc_builder_default_alloc@@Base+0x98>
   1d67c:	mov	r0, r2
   1d680:	b	1d688 <flatcc_builder_default_alloc@@Base+0x98>
   1d684:	mov	r0, #64	; 0x40
   1d688:	mov	r7, r0
   1d68c:	lsl	r0, r0, #1
   1d690:	cmp	r7, r2
   1d694:	bcc	1d688 <flatcc_builder_default_alloc@@Base+0x98>
   1d698:	ldr	r0, [r4, #4]
   1d69c:	mov	r6, #0
   1d6a0:	cmp	r0, r2
   1d6a4:	lsrcs	r0, r0, #1
   1d6a8:	cmpcs	r0, r7
   1d6ac:	bcs	1d6e4 <flatcc_builder_default_alloc@@Base+0xf4>
   1d6b0:	ldr	r0, [r4]
   1d6b4:	mov	r1, r7
   1d6b8:	bl	12ec8 <realloc@plt>
   1d6bc:	cmp	r0, #0
   1d6c0:	mvneq	r6, #0
   1d6c4:	moveq	r0, r6
   1d6c8:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d6cc:	cmp	r8, #0
   1d6d0:	mov	r5, r0
   1d6d4:	ldrne	r1, [r4, #4]
   1d6d8:	cmpne	r7, r1
   1d6dc:	bhi	1d6ec <flatcc_builder_default_alloc@@Base+0xfc>
   1d6e0:	stm	r4, {r5, r7}
   1d6e4:	mov	r0, r6
   1d6e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d6ec:	add	r0, r5, r1
   1d6f0:	sub	r2, r7, r1
   1d6f4:	mov	r1, #0
   1d6f8:	bl	12f40 <memset@plt>
   1d6fc:	b	1d6e0 <flatcc_builder_default_alloc@@Base+0xf0>

0001d700 <flatcc_builder_flush_vtable_cache@@Base>:
   1d700:	push	{r4, r5, fp, lr}
   1d704:	add	fp, sp, #8
   1d708:	mov	r4, r0
   1d70c:	ldr	r0, [r0, #116]	; 0x74
   1d710:	cmp	r0, #0
   1d714:	popeq	{r4, r5, fp, pc}
   1d718:	ldr	r0, [r4, #92]	; 0x5c
   1d71c:	ldr	r2, [r4, #96]	; 0x60
   1d720:	mov	r1, #0
   1d724:	mov	r5, #0
   1d728:	bl	12f40 <memset@plt>
   1d72c:	mov	r0, #16
   1d730:	str	r5, [r4, #120]	; 0x78
   1d734:	str	r0, [r4, #124]	; 0x7c
   1d738:	pop	{r4, r5, fp, pc}

0001d73c <flatcc_builder_custom_init@@Base>:
   1d73c:	push	{r4, r5, r6, r7, fp, lr}
   1d740:	add	fp, sp, #16
   1d744:	mov	r6, r2
   1d748:	mov	r7, r1
   1d74c:	mov	r1, #0
   1d750:	mov	r2, #232	; 0xe8
   1d754:	mov	r5, r3
   1d758:	mov	r4, r0
   1d75c:	bl	12f40 <memset@plt>
   1d760:	ldr	r0, [fp, #8]
   1d764:	cmp	r7, #0
   1d768:	bne	1d780 <flatcc_builder_custom_init@@Base+0x44>
   1d76c:	movw	r7, #9372	; 0x249c
   1d770:	mov	r1, #1
   1d774:	add	r6, r4, #188	; 0xbc
   1d778:	movt	r7, #2
   1d77c:	str	r1, [r4, #184]	; 0xb8
   1d780:	movw	r1, #54768	; 0xd5f0
   1d784:	cmp	r5, #0
   1d788:	str	r6, [r4, #36]	; 0x24
   1d78c:	str	r0, [r4, #40]	; 0x28
   1d790:	mov	r0, #0
   1d794:	str	r7, [r4, #44]	; 0x2c
   1d798:	movt	r1, #1
   1d79c:	movne	r1, r5
   1d7a0:	str	r1, [r4, #48]	; 0x30
   1d7a4:	pop	{r4, r5, r6, r7, fp, pc}

0001d7a8 <flatcc_builder_init@@Base>:
   1d7a8:	push	{r4, r5, fp, lr}
   1d7ac:	add	fp, sp, #8
   1d7b0:	mov	r1, #0
   1d7b4:	mov	r2, #232	; 0xe8
   1d7b8:	mov	r4, r0
   1d7bc:	mov	r5, #0
   1d7c0:	bl	12f40 <memset@plt>
   1d7c4:	mov	r0, #1
   1d7c8:	movw	r2, #9372	; 0x249c
   1d7cc:	add	r1, r4, #188	; 0xbc
   1d7d0:	str	r0, [r4, #184]	; 0xb8
   1d7d4:	movw	r0, #54768	; 0xd5f0
   1d7d8:	movt	r2, #2
   1d7dc:	str	r1, [r4, #36]	; 0x24
   1d7e0:	str	r5, [r4, #40]	; 0x28
   1d7e4:	movt	r0, #1
   1d7e8:	str	r2, [r4, #44]	; 0x2c
   1d7ec:	str	r0, [r4, #48]	; 0x30
   1d7f0:	mov	r0, #0
   1d7f4:	pop	{r4, r5, fp, pc}

0001d7f8 <flatcc_builder_custom_reset@@Base>:
   1d7f8:	push	{r4, r5, r6, sl, fp, lr}
   1d7fc:	add	fp, sp, #16
   1d800:	sub	sp, sp, #8
   1d804:	mov	r5, r1
   1d808:	mov	r4, r0
   1d80c:	cmp	r2, #0
   1d810:	beq	1d870 <flatcc_builder_custom_reset@@Base+0x78>
   1d814:	mov	r1, r4
   1d818:	ldr	r0, [r1, #52]!	; 0x34
   1d81c:	cmp	r0, #0
   1d820:	beq	1d89c <flatcc_builder_custom_reset@@Base+0xa4>
   1d824:	ldr	r0, [r4, #40]	; 0x28
   1d828:	ldr	r6, [r4, #48]	; 0x30
   1d82c:	mov	r2, #0
   1d830:	mov	r3, #1
   1d834:	str	r2, [sp]
   1d838:	mov	r2, #1
   1d83c:	blx	r6
   1d840:	mvn	r6, #0
   1d844:	cmp	r0, #0
   1d848:	bne	1db50 <flatcc_builder_custom_reset@@Base+0x358>
   1d84c:	ldr	r0, [r4, #52]	; 0x34
   1d850:	ldr	r2, [r4, #56]	; 0x38
   1d854:	mov	r1, #0
   1d858:	bl	12f40 <memset@plt>
   1d85c:	mov	r1, r4
   1d860:	ldr	r0, [r1, #60]!	; 0x3c
   1d864:	cmp	r0, #0
   1d868:	bne	1d8b8 <flatcc_builder_custom_reset@@Base+0xc0>
   1d86c:	b	1d904 <flatcc_builder_custom_reset@@Base+0x10c>
   1d870:	ldr	r0, [r4, #52]	; 0x34
   1d874:	ldr	r2, [r4, #56]	; 0x38
   1d878:	cmp	r0, #0
   1d87c:	beq	1d96c <flatcc_builder_custom_reset@@Base+0x174>
   1d880:	mov	r1, #0
   1d884:	bl	12f40 <memset@plt>
   1d888:	ldr	r0, [r4, #60]	; 0x3c
   1d88c:	ldr	r2, [r4, #64]	; 0x40
   1d890:	cmp	r0, #0
   1d894:	bne	1d984 <flatcc_builder_custom_reset@@Base+0x18c>
   1d898:	b	1d9a0 <flatcc_builder_custom_reset@@Base+0x1a8>
   1d89c:	ldr	r0, [r4, #56]	; 0x38
   1d8a0:	cmp	r0, #0
   1d8a4:	bne	1dd24 <flatcc_builder_custom_reset@@Base+0x52c>
   1d8a8:	mov	r1, r4
   1d8ac:	ldr	r0, [r1, #60]!	; 0x3c
   1d8b0:	cmp	r0, #0
   1d8b4:	beq	1d904 <flatcc_builder_custom_reset@@Base+0x10c>
   1d8b8:	ldr	r0, [r4, #40]	; 0x28
   1d8bc:	ldr	r6, [r4, #48]	; 0x30
   1d8c0:	mov	r2, #1
   1d8c4:	mov	r3, #1
   1d8c8:	str	r2, [sp]
   1d8cc:	mov	r2, #1
   1d8d0:	blx	r6
   1d8d4:	mvn	r6, #0
   1d8d8:	cmp	r0, #0
   1d8dc:	bne	1db50 <flatcc_builder_custom_reset@@Base+0x358>
   1d8e0:	ldr	r0, [r4, #60]	; 0x3c
   1d8e4:	ldr	r2, [r4, #64]	; 0x40
   1d8e8:	mov	r1, #0
   1d8ec:	bl	12f40 <memset@plt>
   1d8f0:	mov	r1, r4
   1d8f4:	ldr	r0, [r1, #68]!	; 0x44
   1d8f8:	cmp	r0, #0
   1d8fc:	bne	1d920 <flatcc_builder_custom_reset@@Base+0x128>
   1d900:	b	1db5c <flatcc_builder_custom_reset@@Base+0x364>
   1d904:	ldr	r0, [r4, #64]	; 0x40
   1d908:	cmp	r0, #0
   1d90c:	bne	1dd24 <flatcc_builder_custom_reset@@Base+0x52c>
   1d910:	mov	r1, r4
   1d914:	ldr	r0, [r1, #68]!	; 0x44
   1d918:	cmp	r0, #0
   1d91c:	beq	1db5c <flatcc_builder_custom_reset@@Base+0x364>
   1d920:	ldr	r0, [r4, #40]	; 0x28
   1d924:	ldr	r6, [r4, #48]	; 0x30
   1d928:	mov	r2, #2
   1d92c:	mov	r3, #1
   1d930:	str	r2, [sp]
   1d934:	mov	r2, #1
   1d938:	blx	r6
   1d93c:	mvn	r6, #0
   1d940:	cmp	r0, #0
   1d944:	bne	1db50 <flatcc_builder_custom_reset@@Base+0x358>
   1d948:	ldr	r0, [r4, #68]	; 0x44
   1d94c:	ldr	r2, [r4, #72]	; 0x48
   1d950:	mov	r1, #0
   1d954:	bl	12f40 <memset@plt>
   1d958:	mov	r1, r4
   1d95c:	ldr	r0, [r1, #76]!	; 0x4c
   1d960:	cmp	r0, #0
   1d964:	bne	1db78 <flatcc_builder_custom_reset@@Base+0x380>
   1d968:	b	1dbc4 <flatcc_builder_custom_reset@@Base+0x3cc>
   1d96c:	cmp	r2, #0
   1d970:	bne	1dd24 <flatcc_builder_custom_reset@@Base+0x52c>
   1d974:	ldr	r0, [r4, #60]	; 0x3c
   1d978:	ldr	r2, [r4, #64]	; 0x40
   1d97c:	cmp	r0, #0
   1d980:	beq	1d9a0 <flatcc_builder_custom_reset@@Base+0x1a8>
   1d984:	mov	r1, #0
   1d988:	bl	12f40 <memset@plt>
   1d98c:	ldr	r0, [r4, #68]	; 0x44
   1d990:	ldr	r2, [r4, #72]	; 0x48
   1d994:	cmp	r0, #0
   1d998:	bne	1d9b8 <flatcc_builder_custom_reset@@Base+0x1c0>
   1d99c:	b	1d9d4 <flatcc_builder_custom_reset@@Base+0x1dc>
   1d9a0:	cmp	r2, #0
   1d9a4:	bne	1dd24 <flatcc_builder_custom_reset@@Base+0x52c>
   1d9a8:	ldr	r0, [r4, #68]	; 0x44
   1d9ac:	ldr	r2, [r4, #72]	; 0x48
   1d9b0:	cmp	r0, #0
   1d9b4:	beq	1d9d4 <flatcc_builder_custom_reset@@Base+0x1dc>
   1d9b8:	mov	r1, #0
   1d9bc:	bl	12f40 <memset@plt>
   1d9c0:	ldr	r0, [r4, #76]	; 0x4c
   1d9c4:	ldr	r2, [r4, #80]	; 0x50
   1d9c8:	cmp	r0, #0
   1d9cc:	bne	1d9ec <flatcc_builder_custom_reset@@Base+0x1f4>
   1d9d0:	b	1da08 <flatcc_builder_custom_reset@@Base+0x210>
   1d9d4:	cmp	r2, #0
   1d9d8:	bne	1dd24 <flatcc_builder_custom_reset@@Base+0x52c>
   1d9dc:	ldr	r0, [r4, #76]	; 0x4c
   1d9e0:	ldr	r2, [r4, #80]	; 0x50
   1d9e4:	cmp	r0, #0
   1d9e8:	beq	1da08 <flatcc_builder_custom_reset@@Base+0x210>
   1d9ec:	mov	r1, #0
   1d9f0:	bl	12f40 <memset@plt>
   1d9f4:	ldr	r0, [r4, #84]	; 0x54
   1d9f8:	ldr	r2, [r4, #88]	; 0x58
   1d9fc:	cmp	r0, #0
   1da00:	bne	1da20 <flatcc_builder_custom_reset@@Base+0x228>
   1da04:	b	1da3c <flatcc_builder_custom_reset@@Base+0x244>
   1da08:	cmp	r2, #0
   1da0c:	bne	1dd24 <flatcc_builder_custom_reset@@Base+0x52c>
   1da10:	ldr	r0, [r4, #84]	; 0x54
   1da14:	ldr	r2, [r4, #88]	; 0x58
   1da18:	cmp	r0, #0
   1da1c:	beq	1da3c <flatcc_builder_custom_reset@@Base+0x244>
   1da20:	mov	r1, #0
   1da24:	bl	12f40 <memset@plt>
   1da28:	ldr	r0, [r4, #92]	; 0x5c
   1da2c:	ldr	r2, [r4, #96]	; 0x60
   1da30:	cmp	r0, #0
   1da34:	bne	1da54 <flatcc_builder_custom_reset@@Base+0x25c>
   1da38:	b	1da70 <flatcc_builder_custom_reset@@Base+0x278>
   1da3c:	cmp	r2, #0
   1da40:	bne	1dd24 <flatcc_builder_custom_reset@@Base+0x52c>
   1da44:	ldr	r0, [r4, #92]	; 0x5c
   1da48:	ldr	r2, [r4, #96]	; 0x60
   1da4c:	cmp	r0, #0
   1da50:	beq	1da70 <flatcc_builder_custom_reset@@Base+0x278>
   1da54:	mov	r1, #0
   1da58:	bl	12f40 <memset@plt>
   1da5c:	ldr	r0, [r4, #100]	; 0x64
   1da60:	ldr	r2, [r4, #104]	; 0x68
   1da64:	cmp	r0, #0
   1da68:	bne	1da88 <flatcc_builder_custom_reset@@Base+0x290>
   1da6c:	b	1daa4 <flatcc_builder_custom_reset@@Base+0x2ac>
   1da70:	cmp	r2, #0
   1da74:	bne	1dd24 <flatcc_builder_custom_reset@@Base+0x52c>
   1da78:	ldr	r0, [r4, #100]	; 0x64
   1da7c:	ldr	r2, [r4, #104]	; 0x68
   1da80:	cmp	r0, #0
   1da84:	beq	1daa4 <flatcc_builder_custom_reset@@Base+0x2ac>
   1da88:	mov	r1, #0
   1da8c:	bl	12f40 <memset@plt>
   1da90:	ldr	r0, [r4, #108]	; 0x6c
   1da94:	ldr	r2, [r4, #112]	; 0x70
   1da98:	cmp	r0, #0
   1da9c:	bne	1dabc <flatcc_builder_custom_reset@@Base+0x2c4>
   1daa0:	b	1dac8 <flatcc_builder_custom_reset@@Base+0x2d0>
   1daa4:	cmp	r2, #0
   1daa8:	bne	1dd24 <flatcc_builder_custom_reset@@Base+0x52c>
   1daac:	ldr	r0, [r4, #108]	; 0x6c
   1dab0:	ldr	r2, [r4, #112]	; 0x70
   1dab4:	cmp	r0, #0
   1dab8:	beq	1dac8 <flatcc_builder_custom_reset@@Base+0x2d0>
   1dabc:	mov	r1, #0
   1dac0:	bl	12f40 <memset@plt>
   1dac4:	b	1dad0 <flatcc_builder_custom_reset@@Base+0x2d8>
   1dac8:	cmp	r2, #0
   1dacc:	bne	1dd24 <flatcc_builder_custom_reset@@Base+0x52c>
   1dad0:	mov	r0, #0
   1dad4:	vmov.i32	q8, #0	; 0x00000000
   1dad8:	mov	r6, #0
   1dadc:	str	r0, [r4, #120]	; 0x78
   1dae0:	ldr	r1, [r4, #124]	; 0x7c
   1dae4:	cmp	r1, #0
   1dae8:	movne	r1, #16
   1daec:	strne	r1, [r4, #124]	; 0x7c
   1daf0:	add	r1, r4, #148	; 0x94
   1daf4:	strh	r0, [r4, #128]	; 0x80
   1daf8:	str	r0, [r4, #136]	; 0x88
   1dafc:	str	r0, [r4, #140]	; 0x8c
   1db00:	str	r0, [r4, #32]
   1db04:	cmp	r5, #0
   1db08:	vst1.32	{d16-d17}, [r1]
   1db0c:	ldr	r2, [r4, #60]	; 0x3c
   1db10:	ldr	r1, [r4, #52]	; 0x34
   1db14:	ldr	r3, [r4, #76]	; 0x4c
   1db18:	str	r2, [r4, #16]
   1db1c:	str	r0, [r4, #20]
   1db20:	str	r0, [r4, #24]
   1db24:	movne	r0, #0
   1db28:	str	r3, [r4]
   1db2c:	str	r1, [r4, #4]
   1db30:	strne	r0, [r4, #172]	; 0xac
   1db34:	strne	r0, [r4, #176]	; 0xb0
   1db38:	strne	r0, [r4, #180]	; 0xb4
   1db3c:	ldr	r0, [r4, #184]	; 0xb8
   1db40:	cmp	r0, #0
   1db44:	beq	1db50 <flatcc_builder_custom_reset@@Base+0x358>
   1db48:	add	r0, r4, #188	; 0xbc
   1db4c:	bl	22364 <flatcc_emitter_reset@@Base>
   1db50:	mov	r0, r6
   1db54:	sub	sp, fp, #16
   1db58:	pop	{r4, r5, r6, sl, fp, pc}
   1db5c:	ldr	r0, [r4, #72]	; 0x48
   1db60:	cmp	r0, #0
   1db64:	bne	1dd24 <flatcc_builder_custom_reset@@Base+0x52c>
   1db68:	mov	r1, r4
   1db6c:	ldr	r0, [r1, #76]!	; 0x4c
   1db70:	cmp	r0, #0
   1db74:	beq	1dbc4 <flatcc_builder_custom_reset@@Base+0x3cc>
   1db78:	ldr	r0, [r4, #40]	; 0x28
   1db7c:	ldr	r6, [r4, #48]	; 0x30
   1db80:	mov	r2, #3
   1db84:	mov	r3, #1
   1db88:	str	r2, [sp]
   1db8c:	mov	r2, #1
   1db90:	blx	r6
   1db94:	mvn	r6, #0
   1db98:	cmp	r0, #0
   1db9c:	bne	1db50 <flatcc_builder_custom_reset@@Base+0x358>
   1dba0:	ldr	r0, [r4, #76]	; 0x4c
   1dba4:	ldr	r2, [r4, #80]	; 0x50
   1dba8:	mov	r1, #0
   1dbac:	bl	12f40 <memset@plt>
   1dbb0:	mov	r1, r4
   1dbb4:	ldr	r0, [r1, #84]!	; 0x54
   1dbb8:	cmp	r0, #0
   1dbbc:	bne	1dbe0 <flatcc_builder_custom_reset@@Base+0x3e8>
   1dbc0:	b	1dc2c <flatcc_builder_custom_reset@@Base+0x434>
   1dbc4:	ldr	r0, [r4, #80]	; 0x50
   1dbc8:	cmp	r0, #0
   1dbcc:	bne	1dd24 <flatcc_builder_custom_reset@@Base+0x52c>
   1dbd0:	mov	r1, r4
   1dbd4:	ldr	r0, [r1, #84]!	; 0x54
   1dbd8:	cmp	r0, #0
   1dbdc:	beq	1dc2c <flatcc_builder_custom_reset@@Base+0x434>
   1dbe0:	ldr	r0, [r4, #40]	; 0x28
   1dbe4:	ldr	r6, [r4, #48]	; 0x30
   1dbe8:	mov	r2, #4
   1dbec:	mov	r3, #1
   1dbf0:	str	r2, [sp]
   1dbf4:	mov	r2, #1
   1dbf8:	blx	r6
   1dbfc:	mvn	r6, #0
   1dc00:	cmp	r0, #0
   1dc04:	bne	1db50 <flatcc_builder_custom_reset@@Base+0x358>
   1dc08:	ldr	r0, [r4, #84]	; 0x54
   1dc0c:	ldr	r2, [r4, #88]	; 0x58
   1dc10:	mov	r1, #0
   1dc14:	bl	12f40 <memset@plt>
   1dc18:	ldr	r0, [r4, #92]	; 0x5c
   1dc1c:	ldr	r2, [r4, #96]	; 0x60
   1dc20:	cmp	r0, #0
   1dc24:	bne	1dc48 <flatcc_builder_custom_reset@@Base+0x450>
   1dc28:	b	1dc64 <flatcc_builder_custom_reset@@Base+0x46c>
   1dc2c:	ldr	r0, [r4, #88]	; 0x58
   1dc30:	cmp	r0, #0
   1dc34:	bne	1dd24 <flatcc_builder_custom_reset@@Base+0x52c>
   1dc38:	ldr	r0, [r4, #92]	; 0x5c
   1dc3c:	ldr	r2, [r4, #96]	; 0x60
   1dc40:	cmp	r0, #0
   1dc44:	beq	1dc64 <flatcc_builder_custom_reset@@Base+0x46c>
   1dc48:	mov	r1, #0
   1dc4c:	bl	12f40 <memset@plt>
   1dc50:	mov	r1, r4
   1dc54:	ldr	r0, [r1, #100]!	; 0x64
   1dc58:	cmp	r0, #0
   1dc5c:	bne	1dc7c <flatcc_builder_custom_reset@@Base+0x484>
   1dc60:	b	1dcc8 <flatcc_builder_custom_reset@@Base+0x4d0>
   1dc64:	cmp	r2, #0
   1dc68:	bne	1dd24 <flatcc_builder_custom_reset@@Base+0x52c>
   1dc6c:	mov	r1, r4
   1dc70:	ldr	r0, [r1, #100]!	; 0x64
   1dc74:	cmp	r0, #0
   1dc78:	beq	1dcc8 <flatcc_builder_custom_reset@@Base+0x4d0>
   1dc7c:	ldr	r0, [r4, #40]	; 0x28
   1dc80:	ldr	r6, [r4, #48]	; 0x30
   1dc84:	mov	r2, #6
   1dc88:	mov	r3, #1
   1dc8c:	str	r2, [sp]
   1dc90:	mov	r2, #1
   1dc94:	blx	r6
   1dc98:	mvn	r6, #0
   1dc9c:	cmp	r0, #0
   1dca0:	bne	1db50 <flatcc_builder_custom_reset@@Base+0x358>
   1dca4:	ldr	r0, [r4, #100]	; 0x64
   1dca8:	ldr	r2, [r4, #104]	; 0x68
   1dcac:	mov	r1, #0
   1dcb0:	bl	12f40 <memset@plt>
   1dcb4:	mov	r1, r4
   1dcb8:	ldr	r0, [r1, #108]!	; 0x6c
   1dcbc:	cmp	r0, #0
   1dcc0:	bne	1dce4 <flatcc_builder_custom_reset@@Base+0x4ec>
   1dcc4:	b	1dd18 <flatcc_builder_custom_reset@@Base+0x520>
   1dcc8:	ldr	r0, [r4, #104]	; 0x68
   1dccc:	cmp	r0, #0
   1dcd0:	bne	1dd24 <flatcc_builder_custom_reset@@Base+0x52c>
   1dcd4:	mov	r1, r4
   1dcd8:	ldr	r0, [r1, #108]!	; 0x6c
   1dcdc:	cmp	r0, #0
   1dce0:	beq	1dd18 <flatcc_builder_custom_reset@@Base+0x520>
   1dce4:	ldr	r0, [r4, #40]	; 0x28
   1dce8:	ldr	r6, [r4, #48]	; 0x30
   1dcec:	mov	r2, #7
   1dcf0:	mov	r3, #1
   1dcf4:	str	r2, [sp]
   1dcf8:	mov	r2, #1
   1dcfc:	blx	r6
   1dd00:	mvn	r6, #0
   1dd04:	cmp	r0, #0
   1dd08:	bne	1db50 <flatcc_builder_custom_reset@@Base+0x358>
   1dd0c:	ldr	r0, [r4, #108]	; 0x6c
   1dd10:	ldr	r2, [r4, #112]	; 0x70
   1dd14:	b	1dabc <flatcc_builder_custom_reset@@Base+0x2c4>
   1dd18:	ldr	r0, [r4, #112]	; 0x70
   1dd1c:	cmp	r0, #0
   1dd20:	beq	1dad0 <flatcc_builder_custom_reset@@Base+0x2d8>
   1dd24:	movw	r0, #32192	; 0x7dc0
   1dd28:	movw	r1, #32210	; 0x7dd2
   1dd2c:	movw	r3, #32280	; 0x7e18
   1dd30:	movw	r2, #434	; 0x1b2
   1dd34:	movt	r0, #2
   1dd38:	movt	r1, #2
   1dd3c:	movt	r3, #2
   1dd40:	bl	12f88 <__assert_fail@plt>

0001dd44 <flatcc_builder_reset@@Base>:
   1dd44:	mov	r1, #0
   1dd48:	mov	r2, #0
   1dd4c:	b	1d7f8 <flatcc_builder_custom_reset@@Base>

0001dd50 <flatcc_builder_clear@@Base>:
   1dd50:	push	{r4, sl, fp, lr}
   1dd54:	add	fp, sp, #8
   1dd58:	sub	sp, sp, #8
   1dd5c:	mov	r4, r0
   1dd60:	ldr	r0, [r0, #40]	; 0x28
   1dd64:	mov	r1, #0
   1dd68:	mov	r2, #0
   1dd6c:	mov	r3, #0
   1dd70:	ldr	ip, [r4, #48]	; 0x30
   1dd74:	str	r1, [sp]
   1dd78:	add	r1, r4, #52	; 0x34
   1dd7c:	blx	ip
   1dd80:	ldr	r0, [r4, #40]	; 0x28
   1dd84:	ldr	ip, [r4, #48]	; 0x30
   1dd88:	mov	r1, #1
   1dd8c:	mov	r2, #0
   1dd90:	mov	r3, #0
   1dd94:	str	r1, [sp]
   1dd98:	add	r1, r4, #60	; 0x3c
   1dd9c:	blx	ip
   1dda0:	ldr	r0, [r4, #40]	; 0x28
   1dda4:	ldr	ip, [r4, #48]	; 0x30
   1dda8:	mov	r1, #2
   1ddac:	mov	r2, #0
   1ddb0:	mov	r3, #0
   1ddb4:	str	r1, [sp]
   1ddb8:	add	r1, r4, #68	; 0x44
   1ddbc:	blx	ip
   1ddc0:	ldr	r0, [r4, #40]	; 0x28
   1ddc4:	ldr	ip, [r4, #48]	; 0x30
   1ddc8:	mov	r1, #3
   1ddcc:	mov	r2, #0
   1ddd0:	mov	r3, #0
   1ddd4:	str	r1, [sp]
   1ddd8:	add	r1, r4, #76	; 0x4c
   1dddc:	blx	ip
   1dde0:	ldr	r0, [r4, #40]	; 0x28
   1dde4:	ldr	ip, [r4, #48]	; 0x30
   1dde8:	mov	r1, #4
   1ddec:	mov	r2, #0
   1ddf0:	mov	r3, #0
   1ddf4:	str	r1, [sp]
   1ddf8:	add	r1, r4, #84	; 0x54
   1ddfc:	blx	ip
   1de00:	ldr	r0, [r4, #40]	; 0x28
   1de04:	ldr	ip, [r4, #48]	; 0x30
   1de08:	mov	r1, #5
   1de0c:	mov	r2, #0
   1de10:	mov	r3, #0
   1de14:	str	r1, [sp]
   1de18:	add	r1, r4, #92	; 0x5c
   1de1c:	blx	ip
   1de20:	ldr	r0, [r4, #40]	; 0x28
   1de24:	ldr	ip, [r4, #48]	; 0x30
   1de28:	mov	r1, #6
   1de2c:	mov	r2, #0
   1de30:	mov	r3, #0
   1de34:	str	r1, [sp]
   1de38:	add	r1, r4, #100	; 0x64
   1de3c:	blx	ip
   1de40:	ldr	r0, [r4, #40]	; 0x28
   1de44:	ldr	ip, [r4, #48]	; 0x30
   1de48:	mov	r1, #7
   1de4c:	mov	r2, #0
   1de50:	mov	r3, #0
   1de54:	str	r1, [sp]
   1de58:	add	r1, r4, #108	; 0x6c
   1de5c:	blx	ip
   1de60:	ldr	r0, [r4, #184]	; 0xb8
   1de64:	cmp	r0, #0
   1de68:	beq	1de74 <flatcc_builder_clear@@Base+0x124>
   1de6c:	add	r0, r4, #188	; 0xbc
   1de70:	bl	22430 <flatcc_emitter_clear@@Base>
   1de74:	mov	r0, r4
   1de78:	mov	r1, #0
   1de7c:	mov	r2, #232	; 0xe8
   1de80:	sub	sp, fp, #8
   1de84:	pop	{r4, sl, fp, lr}
   1de88:	b	12f40 <memset@plt>

0001de8c <flatcc_builder_enter_user_frame_ptr@@Base>:
   1de8c:	push	{r4, r5, r6, r7, fp, lr}
   1de90:	add	fp, sp, #16
   1de94:	sub	sp, sp, #8
   1de98:	mov	r4, r0
   1de9c:	ldr	r0, [r0, #112]	; 0x70
   1dea0:	add	r1, r1, #7
   1dea4:	ldr	r7, [r4, #228]	; 0xe4
   1dea8:	bic	r5, r1, #3
   1deac:	add	r6, r4, #108	; 0x6c
   1deb0:	add	r2, r7, r5
   1deb4:	cmp	r2, r0
   1deb8:	bls	1dee0 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   1debc:	ldr	r0, [r4, #40]	; 0x28
   1dec0:	ldr	ip, [r4, #48]	; 0x30
   1dec4:	mov	r1, #7
   1dec8:	mov	r3, #0
   1decc:	str	r1, [sp]
   1ded0:	mov	r1, r6
   1ded4:	blx	ip
   1ded8:	cmp	r0, #0
   1dedc:	bne	1df34 <flatcc_builder_enter_user_frame_ptr@@Base+0xa8>
   1dee0:	ldr	r0, [r6]
   1dee4:	adds	r6, r0, r7
   1dee8:	beq	1df24 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   1deec:	mov	r0, r6
   1def0:	mov	r1, #0
   1def4:	mov	r2, r5
   1def8:	bl	12f40 <memset@plt>
   1defc:	ldr	r0, [r4, #224]	; 0xe0
   1df00:	str	r0, [r6], #4
   1df04:	ldr	r0, [r4, #228]	; 0xe4
   1df08:	add	r1, r0, #4
   1df0c:	add	r0, r0, r5
   1df10:	str	r1, [r4, #224]	; 0xe0
   1df14:	str	r0, [r4, #228]	; 0xe4
   1df18:	mov	r0, r6
   1df1c:	sub	sp, fp, #16
   1df20:	pop	{r4, r5, r6, r7, fp, pc}
   1df24:	mov	r6, #0
   1df28:	mov	r0, r6
   1df2c:	sub	sp, fp, #16
   1df30:	pop	{r4, r5, r6, r7, fp, pc}
   1df34:	movw	r0, #36728	; 0x8f78
   1df38:	movw	r1, #32210	; 0x7dd2
   1df3c:	movw	r3, #36274	; 0x8db2
   1df40:	mov	r2, #308	; 0x134
   1df44:	movt	r0, #2
   1df48:	movt	r1, #2
   1df4c:	movt	r3, #2
   1df50:	bl	12f88 <__assert_fail@plt>

0001df54 <flatcc_builder_enter_user_frame@@Base>:
   1df54:	push	{r4, r5, r6, r7, fp, lr}
   1df58:	add	fp, sp, #16
   1df5c:	sub	sp, sp, #8
   1df60:	mov	r4, r0
   1df64:	ldr	r0, [r0, #112]	; 0x70
   1df68:	add	r1, r1, #7
   1df6c:	ldr	r7, [r4, #228]	; 0xe4
   1df70:	bic	r5, r1, #3
   1df74:	add	r6, r4, #108	; 0x6c
   1df78:	add	r2, r7, r5
   1df7c:	cmp	r2, r0
   1df80:	bls	1dfa8 <flatcc_builder_enter_user_frame@@Base+0x54>
   1df84:	ldr	r0, [r4, #40]	; 0x28
   1df88:	ldr	ip, [r4, #48]	; 0x30
   1df8c:	mov	r1, #7
   1df90:	mov	r3, #0
   1df94:	str	r1, [sp]
   1df98:	mov	r1, r6
   1df9c:	blx	ip
   1dfa0:	cmp	r0, #0
   1dfa4:	bne	1dff0 <flatcc_builder_enter_user_frame@@Base+0x9c>
   1dfa8:	ldr	r0, [r6]
   1dfac:	adds	r6, r0, r7
   1dfb0:	moveq	r0, #0
   1dfb4:	subeq	sp, fp, #16
   1dfb8:	popeq	{r4, r5, r6, r7, fp, pc}
   1dfbc:	mov	r0, r6
   1dfc0:	mov	r1, #0
   1dfc4:	mov	r2, r5
   1dfc8:	bl	12f40 <memset@plt>
   1dfcc:	ldr	r0, [r4, #224]	; 0xe0
   1dfd0:	str	r0, [r6]
   1dfd4:	ldr	r1, [r4, #228]	; 0xe4
   1dfd8:	add	r0, r1, #4
   1dfdc:	add	r1, r1, r5
   1dfe0:	str	r0, [r4, #224]	; 0xe0
   1dfe4:	str	r1, [r4, #228]	; 0xe4
   1dfe8:	sub	sp, fp, #16
   1dfec:	pop	{r4, r5, r6, r7, fp, pc}
   1dff0:	movw	r0, #36728	; 0x8f78
   1dff4:	movw	r1, #32210	; 0x7dd2
   1dff8:	movw	r3, #36274	; 0x8db2
   1dffc:	mov	r2, #308	; 0x134
   1e000:	movt	r0, #2
   1e004:	movt	r1, #2
   1e008:	movt	r3, #2
   1e00c:	bl	12f88 <__assert_fail@plt>

0001e010 <flatcc_builder_exit_user_frame@@Base>:
   1e010:	ldr	r1, [r0, #224]	; 0xe0
   1e014:	cmp	r1, #0
   1e018:	subne	r2, r1, #4
   1e01c:	strne	r2, [r0, #228]	; 0xe4
   1e020:	ldrne	r2, [r0, #108]	; 0x6c
   1e024:	addne	r1, r2, r1
   1e028:	ldrne	r1, [r1, #-4]
   1e02c:	strne	r1, [r0, #224]	; 0xe0
   1e030:	movne	r0, r1
   1e034:	bxne	lr
   1e038:	push	{fp, lr}
   1e03c:	mov	fp, sp
   1e040:	movw	r0, #32342	; 0x7e56
   1e044:	movw	r1, #32210	; 0x7dd2
   1e048:	movw	r3, #32367	; 0x7e6f
   1e04c:	movw	r2, #542	; 0x21e
   1e050:	movt	r0, #2
   1e054:	movt	r1, #2
   1e058:	movt	r3, #2
   1e05c:	bl	12f88 <__assert_fail@plt>

0001e060 <flatcc_builder_exit_user_frame_at@@Base>:
   1e060:	push	{fp, lr}
   1e064:	mov	fp, sp
   1e068:	ldr	r2, [r0, #224]	; 0xe0
   1e06c:	cmp	r2, r1
   1e070:	bcc	1e0bc <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   1e074:	cmp	r1, #0
   1e078:	str	r1, [r0, #224]	; 0xe0
   1e07c:	subne	r2, r1, #4
   1e080:	strne	r2, [r0, #228]	; 0xe4
   1e084:	ldrne	r2, [r0, #108]	; 0x6c
   1e088:	addne	r1, r2, r1
   1e08c:	ldrne	r1, [r1, #-4]
   1e090:	strne	r1, [r0, #224]	; 0xe0
   1e094:	movne	r0, r1
   1e098:	popne	{fp, pc}
   1e09c:	movw	r0, #32342	; 0x7e56
   1e0a0:	movw	r1, #32210	; 0x7dd2
   1e0a4:	movw	r3, #32367	; 0x7e6f
   1e0a8:	movw	r2, #542	; 0x21e
   1e0ac:	movt	r0, #2
   1e0b0:	movt	r1, #2
   1e0b4:	movt	r3, #2
   1e0b8:	bl	12f88 <__assert_fail@plt>
   1e0bc:	movw	r0, #32425	; 0x7ea9
   1e0c0:	movw	r1, #32210	; 0x7dd2
   1e0c4:	movw	r3, #32456	; 0x7ec8
   1e0c8:	movw	r2, #551	; 0x227
   1e0cc:	movt	r0, #2
   1e0d0:	movt	r1, #2
   1e0d4:	movt	r3, #2
   1e0d8:	bl	12f88 <__assert_fail@plt>

0001e0dc <flatcc_builder_get_current_user_frame@@Base>:
   1e0dc:	ldr	r0, [r0, #224]	; 0xe0
   1e0e0:	bx	lr

0001e0e4 <flatcc_builder_get_user_frame_ptr@@Base>:
   1e0e4:	ldr	r0, [r0, #108]	; 0x6c
   1e0e8:	add	r0, r0, r1
   1e0ec:	bx	lr

0001e0f0 <flatcc_builder_embed_buffer@@Base>:
   1e0f0:	push	{r4, r5, r6, r7, fp, lr}
   1e0f4:	add	fp, sp, #16
   1e0f8:	sub	sp, sp, #88	; 0x58
   1e0fc:	mov	r4, r0
   1e100:	ldr	r0, [fp, #8]
   1e104:	mov	r5, r3
   1e108:	mov	r7, r2
   1e10c:	mov	r2, r1
   1e110:	sub	r1, fp, #18
   1e114:	strh	r0, [fp, #-18]	; 0xffffffee
   1e118:	mov	r0, r4
   1e11c:	ldr	r3, [r4, #152]	; 0x98
   1e120:	cmp	r3, #0
   1e124:	movwne	r3, #1
   1e128:	bl	1e260 <flatcc_builder_embed_buffer@@Base+0x170>
   1e12c:	ldr	r1, [fp, #12]
   1e130:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1e134:	ldr	r0, [r4, #136]	; 0x88
   1e138:	mov	r2, #0
   1e13c:	str	r2, [sp, #8]
   1e140:	str	r2, [sp, #12]
   1e144:	and	r1, r1, #2
   1e148:	sub	r3, r3, #1
   1e14c:	add	r1, r5, r1, lsl #1
   1e150:	sub	r1, r0, r1
   1e154:	and	r3, r3, r1
   1e158:	add	r1, r3, r5
   1e15c:	str	r1, [fp, #-24]	; 0xffffffe8
   1e160:	ldr	r1, [r4, #152]	; 0x98
   1e164:	cmp	r1, #0
   1e168:	mov	r1, #0
   1e16c:	beq	1e18c <flatcc_builder_embed_buffer@@Base+0x9c>
   1e170:	sub	r1, fp, #24
   1e174:	mov	r2, #1
   1e178:	str	r1, [sp, #16]
   1e17c:	mov	r1, #4
   1e180:	str	r1, [sp, #8]
   1e184:	str	r1, [sp, #20]
   1e188:	str	r2, [sp, #12]
   1e18c:	cmp	r5, #0
   1e190:	beq	1e1b4 <flatcc_builder_embed_buffer@@Base+0xc4>
   1e194:	add	r6, sp, #8
   1e198:	add	r1, r1, r5
   1e19c:	add	r6, r6, r2, lsl #3
   1e1a0:	add	r2, r2, #1
   1e1a4:	str	r1, [sp, #8]
   1e1a8:	str	r7, [r6, #8]
   1e1ac:	str	r5, [r6, #12]
   1e1b0:	str	r2, [sp, #12]
   1e1b4:	cmp	r3, #0
   1e1b8:	beq	1e1e4 <flatcc_builder_embed_buffer@@Base+0xf4>
   1e1bc:	add	r7, sp, #8
   1e1c0:	movw	r6, #31680	; 0x7bc0
   1e1c4:	add	r1, r1, r3
   1e1c8:	add	r7, r7, r2, lsl #3
   1e1cc:	add	r2, r2, #1
   1e1d0:	movt	r6, #2
   1e1d4:	str	r1, [sp, #8]
   1e1d8:	str	r6, [r7, #8]
   1e1dc:	str	r3, [r7, #12]
   1e1e0:	str	r2, [sp, #12]
   1e1e4:	cmp	r1, #0
   1e1e8:	ble	1e240 <flatcc_builder_embed_buffer@@Base+0x150>
   1e1ec:	sub	r5, r0, r1
   1e1f0:	ldr	r0, [r4, #36]	; 0x24
   1e1f4:	ldr	r7, [r4, #44]	; 0x2c
   1e1f8:	str	r1, [sp]
   1e1fc:	add	r1, sp, #8
   1e200:	add	r1, r1, #8
   1e204:	mov	r3, r5
   1e208:	blx	r7
   1e20c:	cmp	r0, #0
   1e210:	streq	r5, [r4, #136]	; 0x88
   1e214:	moveq	r0, r5
   1e218:	subeq	sp, fp, #16
   1e21c:	popeq	{r4, r5, r6, r7, fp, pc}
   1e220:	movw	r0, #36728	; 0x8f78
   1e224:	movw	r1, #32210	; 0x7dd2
   1e228:	movw	r3, #36407	; 0x8e37
   1e22c:	movw	r2, #651	; 0x28b
   1e230:	movt	r0, #2
   1e234:	movt	r1, #2
   1e238:	movt	r3, #2
   1e23c:	bl	12f88 <__assert_fail@plt>
   1e240:	movw	r0, #36728	; 0x8f78
   1e244:	movw	r1, #32210	; 0x7dd2
   1e248:	movw	r3, #36407	; 0x8e37
   1e24c:	movw	r2, #647	; 0x287
   1e250:	movt	r0, #2
   1e254:	movt	r1, #2
   1e258:	movt	r3, #2
   1e25c:	bl	12f88 <__assert_fail@plt>
   1e260:	push	{r4, sl, fp, lr}
   1e264:	add	fp, sp, #8
   1e268:	sub	sp, sp, #80	; 0x50
   1e26c:	cmp	r2, #0
   1e270:	bne	1e280 <flatcc_builder_embed_buffer@@Base+0x190>
   1e274:	ldrh	r2, [r0, #132]	; 0x84
   1e278:	cmp	r2, #0
   1e27c:	movweq	r2, #1
   1e280:	ldrh	r4, [r1]
   1e284:	cmp	r4, #4
   1e288:	movwcc	r4, #4
   1e28c:	cmpcs	r4, r2
   1e290:	bcs	1e2a0 <flatcc_builder_embed_buffer@@Base+0x1b0>
   1e294:	cmp	r4, r2
   1e298:	movcc	r4, r2
   1e29c:	strh	r4, [r1]
   1e2a0:	cmp	r3, #0
   1e2a4:	bne	1e318 <flatcc_builder_embed_buffer@@Base+0x228>
   1e2a8:	ldr	r4, [r0, #140]	; 0x8c
   1e2ac:	sub	r1, r2, #1
   1e2b0:	ands	r1, r4, r1
   1e2b4:	beq	1e318 <flatcc_builder_embed_buffer@@Base+0x228>
   1e2b8:	movw	r2, #31680	; 0x7bc0
   1e2bc:	cmn	r1, #1
   1e2c0:	movt	r2, #2
   1e2c4:	str	r2, [sp, #16]
   1e2c8:	mov	r2, #1
   1e2cc:	str	r1, [sp, #8]
   1e2d0:	str	r1, [sp, #20]
   1e2d4:	str	r2, [sp, #12]
   1e2d8:	add	r2, r4, r1
   1e2dc:	str	r2, [r0, #140]	; 0x8c
   1e2e0:	ble	1e320 <flatcc_builder_embed_buffer@@Base+0x230>
   1e2e4:	ldr	r2, [r0, #36]	; 0x24
   1e2e8:	ldr	ip, [r0, #44]	; 0x2c
   1e2ec:	add	r0, sp, #8
   1e2f0:	str	r1, [sp]
   1e2f4:	mov	r3, r4
   1e2f8:	add	r1, r0, #8
   1e2fc:	mov	r0, r2
   1e300:	mov	r2, #1
   1e304:	blx	ip
   1e308:	cmp	r0, #0
   1e30c:	bne	1e340 <flatcc_builder_embed_buffer@@Base+0x250>
   1e310:	cmn	r4, #1
   1e314:	beq	1e360 <flatcc_builder_embed_buffer@@Base+0x270>
   1e318:	sub	sp, fp, #8
   1e31c:	pop	{r4, sl, fp, pc}
   1e320:	movw	r0, #36728	; 0x8f78
   1e324:	movw	r1, #32210	; 0x7dd2
   1e328:	movw	r3, #36595	; 0x8ef3
   1e32c:	movw	r2, #673	; 0x2a1
   1e330:	movt	r0, #2
   1e334:	movt	r1, #2
   1e338:	movt	r3, #2
   1e33c:	bl	12f88 <__assert_fail@plt>
   1e340:	movw	r0, #36728	; 0x8f78
   1e344:	movw	r1, #32210	; 0x7dd2
   1e348:	movw	r3, #36595	; 0x8ef3
   1e34c:	movw	r2, #677	; 0x2a5
   1e350:	movt	r0, #2
   1e354:	movt	r1, #2
   1e358:	movt	r3, #2
   1e35c:	bl	12f88 <__assert_fail@plt>
   1e360:	movw	r0, #36728	; 0x8f78
   1e364:	movw	r1, #32210	; 0x7dd2
   1e368:	movw	r3, #36341	; 0x8df5
   1e36c:	movw	r2, #702	; 0x2be
   1e370:	movt	r0, #2
   1e374:	movt	r1, #2
   1e378:	movt	r3, #2
   1e37c:	bl	12f88 <__assert_fail@plt>

0001e380 <flatcc_builder_create_buffer@@Base>:
   1e380:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e384:	add	fp, sp, #28
   1e388:	sub	sp, sp, #100	; 0x64
   1e38c:	ldr	r8, [fp, #12]
   1e390:	mov	r4, r0
   1e394:	ldr	r0, [fp, #8]
   1e398:	mov	r7, r1
   1e39c:	mov	r5, #0
   1e3a0:	mov	r9, r3
   1e3a4:	sub	r1, fp, #30
   1e3a8:	str	r5, [sp, #12]
   1e3ac:	and	r6, r8, #1
   1e3b0:	strh	r0, [fp, #-30]	; 0xffffffe2
   1e3b4:	mov	r0, r4
   1e3b8:	mov	r3, r6
   1e3bc:	bl	1e260 <flatcc_builder_embed_buffer@@Base+0x170>
   1e3c0:	ldrh	r0, [r4, #128]	; 0x80
   1e3c4:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   1e3c8:	cmp	r0, r1
   1e3cc:	strhcc	r1, [r4, #128]	; 0x80
   1e3d0:	cmp	r7, #0
   1e3d4:	stmib	sp, {r6, r9}
   1e3d8:	beq	1e3f4 <flatcc_builder_create_buffer@@Base+0x74>
   1e3dc:	ldr	r5, [r7]
   1e3e0:	cmp	r5, #0
   1e3e4:	str	r5, [sp, #12]
   1e3e8:	movwne	r5, #1
   1e3ec:	lsl	r7, r5, #2
   1e3f0:	b	1e3f8 <flatcc_builder_create_buffer@@Base+0x78>
   1e3f4:	mov	r7, #0
   1e3f8:	ldr	r9, [r4, #136]	; 0x88
   1e3fc:	mov	sl, #4
   1e400:	mvn	r6, #3
   1e404:	mov	r3, #0
   1e408:	ands	ip, r8, #3
   1e40c:	and	r2, sl, r8, lsl #1
   1e410:	str	r3, [sp, #20]
   1e414:	str	r3, [sp, #16]
   1e418:	sub	r2, r6, r2
   1e41c:	sub	r6, r1, #1
   1e420:	mov	r1, #4
   1e424:	add	r2, r2, r9
   1e428:	sub	r2, r2, r7
   1e42c:	beq	1e450 <flatcc_builder_create_buffer@@Base+0xd0>
   1e430:	sub	r1, fp, #40	; 0x28
   1e434:	mov	r3, #1
   1e438:	str	r1, [sp, #24]
   1e43c:	mov	r1, #4
   1e440:	str	r1, [sp, #16]
   1e444:	str	r1, [sp, #28]
   1e448:	mov	r1, #8
   1e44c:	str	r3, [sp, #20]
   1e450:	add	lr, sp, #16
   1e454:	and	r6, r2, r6
   1e458:	sub	r0, fp, #36	; 0x24
   1e45c:	str	r1, [sp, #16]
   1e460:	cmp	r5, #0
   1e464:	add	r2, lr, r3, lsl #3
   1e468:	str	r0, [r2, #8]
   1e46c:	str	sl, [r2, #12]
   1e470:	add	r2, r3, #1
   1e474:	str	r2, [sp, #20]
   1e478:	beq	1e49c <flatcc_builder_create_buffer@@Base+0x11c>
   1e47c:	add	r1, r1, r7
   1e480:	add	r0, lr, r2, lsl #3
   1e484:	add	r2, sp, #12
   1e488:	str	r1, [sp, #16]
   1e48c:	str	r2, [r0, #8]
   1e490:	orr	r2, r3, #2
   1e494:	str	r7, [r0, #12]
   1e498:	str	r2, [sp, #20]
   1e49c:	cmp	r6, #0
   1e4a0:	beq	1e4c8 <flatcc_builder_create_buffer@@Base+0x148>
   1e4a4:	movw	r3, #31680	; 0x7bc0
   1e4a8:	add	r1, r1, r6
   1e4ac:	add	r0, lr, r2, lsl #3
   1e4b0:	add	r2, r2, #1
   1e4b4:	movt	r3, #2
   1e4b8:	str	r1, [sp, #16]
   1e4bc:	str	r3, [r0, #8]
   1e4c0:	str	r6, [r0, #12]
   1e4c4:	str	r2, [sp, #20]
   1e4c8:	ldr	r5, [sp, #4]
   1e4cc:	sub	r7, r9, r1
   1e4d0:	cmp	ip, #0
   1e4d4:	mov	r6, #144	; 0x90
   1e4d8:	ldr	r3, [sp, #8]
   1e4dc:	mov	r0, r7
   1e4e0:	addne	r0, r0, #4
   1e4e4:	cmp	r5, #0
   1e4e8:	sub	r3, r3, r0
   1e4ec:	movweq	r6, #140	; 0x8c
   1e4f0:	cmp	r1, #0
   1e4f4:	ldr	r6, [r4, r6]
   1e4f8:	str	r3, [fp, #-36]	; 0xffffffdc
   1e4fc:	sub	r0, r6, r0
   1e500:	str	r0, [fp, #-40]	; 0xffffffd8
   1e504:	ble	1e55c <flatcc_builder_create_buffer@@Base+0x1dc>
   1e508:	ldr	r0, [r4, #36]	; 0x24
   1e50c:	ldr	r6, [r4, #44]	; 0x2c
   1e510:	str	r1, [sp]
   1e514:	add	r1, lr, #8
   1e518:	mov	r3, r7
   1e51c:	blx	r6
   1e520:	cmp	r0, #0
   1e524:	bne	1e57c <flatcc_builder_create_buffer@@Base+0x1fc>
   1e528:	cmp	r7, #0
   1e52c:	str	r7, [r4, #136]	; 0x88
   1e530:	movne	r0, r7
   1e534:	subne	sp, fp, #28
   1e538:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e53c:	movw	r0, #36728	; 0x8f78
   1e540:	movw	r1, #32210	; 0x7dd2
   1e544:	movw	r3, #32525	; 0x7f0d
   1e548:	mov	r2, #772	; 0x304
   1e54c:	movt	r0, #2
   1e550:	movt	r1, #2
   1e554:	movt	r3, #2
   1e558:	bl	12f88 <__assert_fail@plt>
   1e55c:	movw	r0, #36728	; 0x8f78
   1e560:	movw	r1, #32210	; 0x7dd2
   1e564:	movw	r3, #36407	; 0x8e37
   1e568:	movw	r2, #647	; 0x287
   1e56c:	movt	r0, #2
   1e570:	movt	r1, #2
   1e574:	movt	r3, #2
   1e578:	bl	12f88 <__assert_fail@plt>
   1e57c:	movw	r0, #36728	; 0x8f78
   1e580:	movw	r1, #32210	; 0x7dd2
   1e584:	movw	r3, #36407	; 0x8e37
   1e588:	movw	r2, #651	; 0x28b
   1e58c:	movt	r0, #2
   1e590:	movt	r1, #2
   1e594:	movt	r3, #2
   1e598:	bl	12f88 <__assert_fail@plt>

0001e59c <flatcc_builder_create_struct@@Base>:
   1e59c:	push	{r4, r5, r6, sl, fp, lr}
   1e5a0:	add	fp, sp, #16
   1e5a4:	sub	sp, sp, #80	; 0x50
   1e5a8:	cmp	r3, #0
   1e5ac:	beq	1e684 <flatcc_builder_create_struct@@Base+0xe8>
   1e5b0:	mov	r5, r0
   1e5b4:	ldrh	r0, [r0, #128]	; 0x80
   1e5b8:	mov	r4, #0
   1e5bc:	cmp	r0, r3
   1e5c0:	strhcc	r3, [r5, #128]	; 0x80
   1e5c4:	sub	r3, r3, #1
   1e5c8:	cmp	r2, #0
   1e5cc:	ldr	r0, [r5, #136]	; 0x88
   1e5d0:	str	r4, [sp, #12]
   1e5d4:	str	r4, [sp, #8]
   1e5d8:	movne	r4, #1
   1e5dc:	strne	r1, [sp, #16]
   1e5e0:	strne	r2, [sp, #8]
   1e5e4:	strne	r2, [sp, #20]
   1e5e8:	strne	r4, [sp, #12]
   1e5ec:	sub	r6, r0, r2
   1e5f0:	and	r3, r6, r3
   1e5f4:	cmp	r3, #0
   1e5f8:	beq	1e624 <flatcc_builder_create_struct@@Base+0x88>
   1e5fc:	add	r1, sp, #8
   1e600:	movw	r6, #31680	; 0x7bc0
   1e604:	add	r2, r3, r2
   1e608:	add	r1, r1, r4, lsl #3
   1e60c:	add	r4, r4, #1
   1e610:	movt	r6, #2
   1e614:	str	r2, [sp, #8]
   1e618:	str	r6, [r1, #8]
   1e61c:	str	r3, [r1, #12]
   1e620:	str	r4, [sp, #12]
   1e624:	cmp	r2, #0
   1e628:	ble	1e6a4 <flatcc_builder_create_struct@@Base+0x108>
   1e62c:	sub	r6, r0, r2
   1e630:	ldr	r0, [r5, #36]	; 0x24
   1e634:	ldr	ip, [r5, #44]	; 0x2c
   1e638:	add	r1, sp, #8
   1e63c:	str	r2, [sp]
   1e640:	mov	r2, r4
   1e644:	add	r1, r1, #8
   1e648:	mov	r3, r6
   1e64c:	blx	ip
   1e650:	cmp	r0, #0
   1e654:	streq	r6, [r5, #136]	; 0x88
   1e658:	moveq	r0, r6
   1e65c:	subeq	sp, fp, #16
   1e660:	popeq	{r4, r5, r6, sl, fp, pc}
   1e664:	movw	r0, #36728	; 0x8f78
   1e668:	movw	r1, #32210	; 0x7dd2
   1e66c:	movw	r3, #36407	; 0x8e37
   1e670:	movw	r2, #651	; 0x28b
   1e674:	movt	r0, #2
   1e678:	movt	r1, #2
   1e67c:	movt	r3, #2
   1e680:	bl	12f88 <__assert_fail@plt>
   1e684:	movw	r0, #32656	; 0x7f90
   1e688:	movw	r1, #32210	; 0x7dd2
   1e68c:	movw	r3, #32667	; 0x7f9b
   1e690:	movw	r2, #783	; 0x30f
   1e694:	movt	r0, #2
   1e698:	movt	r1, #2
   1e69c:	movt	r3, #2
   1e6a0:	bl	12f88 <__assert_fail@plt>
   1e6a4:	movw	r0, #36728	; 0x8f78
   1e6a8:	movw	r1, #32210	; 0x7dd2
   1e6ac:	movw	r3, #36407	; 0x8e37
   1e6b0:	movw	r2, #647	; 0x287
   1e6b4:	movt	r0, #2
   1e6b8:	movt	r1, #2
   1e6bc:	movt	r3, #2
   1e6c0:	bl	12f88 <__assert_fail@plt>

0001e6c4 <flatcc_builder_start_buffer@@Base>:
   1e6c4:	push	{r4, r5, r6, r7, fp, lr}
   1e6c8:	add	fp, sp, #16
   1e6cc:	mov	r5, r1
   1e6d0:	ldrh	r1, [r0, #128]	; 0x80
   1e6d4:	mov	r6, r3
   1e6d8:	mov	r7, r2
   1e6dc:	mov	r4, r0
   1e6e0:	bl	1e780 <flatcc_builder_start_buffer@@Base+0xbc>
   1e6e4:	mov	r1, r0
   1e6e8:	mvn	r0, #0
   1e6ec:	cmp	r1, #0
   1e6f0:	popne	{r4, r5, r6, r7, fp, pc}
   1e6f4:	mov	r0, #1
   1e6f8:	cmp	r5, #0
   1e6fc:	strh	r0, [r4, #128]	; 0x80
   1e700:	ldrh	r1, [r4, #132]	; 0x84
   1e704:	ldr	r2, [r4, #32]
   1e708:	strh	r1, [r2, #34]	; 0x22
   1e70c:	strh	r7, [r4, #132]	; 0x84
   1e710:	ldrh	r1, [r4, #164]	; 0xa4
   1e714:	ldr	r2, [r4, #32]
   1e718:	strh	r1, [r2, #32]
   1e71c:	strh	r6, [r4, #164]	; 0xa4
   1e720:	ldr	r1, [r4, #32]
   1e724:	ldr	r2, [r4, #144]	; 0x90
   1e728:	str	r2, [r1, #20]
   1e72c:	ldr	r1, [r4, #32]
   1e730:	ldr	r2, [r4, #152]	; 0x98
   1e734:	str	r2, [r1, #28]
   1e738:	ldr	r3, [r4, #148]	; 0x94
   1e73c:	ldr	r1, [r4, #32]
   1e740:	ldr	r2, [r4, #136]	; 0x88
   1e744:	ldr	r7, [r4, #168]	; 0xa8
   1e748:	add	r6, r3, #1
   1e74c:	str	r2, [r4, #144]	; 0x90
   1e750:	str	r6, [r4, #148]	; 0x94
   1e754:	str	r3, [r4, #152]	; 0x98
   1e758:	str	r7, [r1, #16]
   1e75c:	movw	r1, #31680	; 0x7bc0
   1e760:	movt	r1, #2
   1e764:	movne	r1, r5
   1e768:	ldr	r1, [r1]
   1e76c:	str	r1, [r4, #168]	; 0xa8
   1e770:	ldr	r1, [r4, #32]
   1e774:	strh	r0, [r1, #14]
   1e778:	mov	r0, #0
   1e77c:	pop	{r4, r5, r6, r7, fp, pc}
   1e780:	push	{r4, r5, r6, r7, fp, lr}
   1e784:	add	fp, sp, #16
   1e788:	sub	sp, sp, #8
   1e78c:	mov	r5, r1
   1e790:	ldr	r1, [r0, #156]	; 0x9c
   1e794:	ldr	r2, [r0, #160]	; 0xa0
   1e798:	mov	r4, r0
   1e79c:	add	r0, r1, #1
   1e7a0:	cmp	r1, r2
   1e7a4:	str	r0, [r4, #156]	; 0x9c
   1e7a8:	bge	1e7bc <flatcc_builder_start_buffer@@Base+0xf8>
   1e7ac:	ldr	r0, [r4, #32]
   1e7b0:	add	r0, r0, #36	; 0x24
   1e7b4:	str	r0, [r4, #32]
   1e7b8:	b	1e850 <flatcc_builder_start_buffer@@Base+0x18c>
   1e7bc:	ldr	r2, [r4, #176]	; 0xb0
   1e7c0:	mvn	r6, #0
   1e7c4:	cmp	r2, #1
   1e7c8:	cmpge	r1, r2
   1e7cc:	bge	1e888 <flatcc_builder_start_buffer@@Base+0x1c4>
   1e7d0:	add	r7, r0, r0, lsl #3
   1e7d4:	ldr	r0, [r4, #88]	; 0x58
   1e7d8:	lsl	r2, r7, #2
   1e7dc:	cmp	r2, r0
   1e7e0:	bls	1e808 <flatcc_builder_start_buffer@@Base+0x144>
   1e7e4:	ldr	r0, [r4, #40]	; 0x28
   1e7e8:	ldr	ip, [r4, #48]	; 0x30
   1e7ec:	mov	r3, #4
   1e7f0:	add	r1, r4, #84	; 0x54
   1e7f4:	str	r3, [sp]
   1e7f8:	mov	r3, #0
   1e7fc:	blx	ip
   1e800:	cmp	r0, #0
   1e804:	bne	1e894 <flatcc_builder_start_buffer@@Base+0x1d0>
   1e808:	ldr	r1, [r4, #84]	; 0x54
   1e80c:	mvn	r0, #35	; 0x23
   1e810:	add	r0, r0, r7, lsl #2
   1e814:	adds	r0, r0, r1
   1e818:	str	r0, [r4, #32]
   1e81c:	beq	1e888 <flatcc_builder_start_buffer@@Base+0x1c4>
   1e820:	ldr	r1, [r4, #88]	; 0x58
   1e824:	movw	r3, #36409	; 0x8e39
   1e828:	ldr	r2, [r4, #176]	; 0xb0
   1e82c:	movt	r3, #14563	; 0x38e3
   1e830:	umull	r1, r3, r1, r3
   1e834:	lsr	r1, r3, #3
   1e838:	cmp	r2, r3, lsr #3
   1e83c:	mov	r3, r1
   1e840:	movlt	r3, r2
   1e844:	cmp	r2, #0
   1e848:	movle	r3, r1
   1e84c:	str	r3, [r4, #160]	; 0xa0
   1e850:	ldr	r1, [r4, #20]
   1e854:	mvn	r3, #3
   1e858:	mov	r6, #0
   1e85c:	str	r1, [r0, #8]
   1e860:	ldrh	r2, [r4, #130]	; 0x82
   1e864:	strh	r2, [r0, #12]
   1e868:	strh	r5, [r4, #130]	; 0x82
   1e86c:	ldr	r2, [r4, #28]
   1e870:	stm	r0, {r2, r3}
   1e874:	add	r0, r1, r2
   1e878:	str	r6, [r4, #20]
   1e87c:	add	r0, r0, #7
   1e880:	bic	r0, r0, #7
   1e884:	str	r0, [r4, #28]
   1e888:	mov	r0, r6
   1e88c:	sub	sp, fp, #16
   1e890:	pop	{r4, r5, r6, r7, fp, pc}
   1e894:	movw	r0, #36728	; 0x8f78
   1e898:	movw	r1, #32210	; 0x7dd2
   1e89c:	movw	r3, #36274	; 0x8db2
   1e8a0:	mov	r2, #308	; 0x134
   1e8a4:	movt	r0, #2
   1e8a8:	movt	r1, #2
   1e8ac:	movt	r3, #2
   1e8b0:	bl	12f88 <__assert_fail@plt>

0001e8b4 <flatcc_builder_end_buffer@@Base>:
   1e8b4:	push	{r4, r5, r6, sl, fp, lr}
   1e8b8:	add	fp, sp, #16
   1e8bc:	sub	sp, sp, #8
   1e8c0:	mov	r4, r0
   1e8c4:	ldr	r0, [r0, #32]
   1e8c8:	ldrh	r0, [r0, #14]
   1e8cc:	cmp	r0, #1
   1e8d0:	bne	1e9c4 <flatcc_builder_end_buffer@@Base+0x110>
   1e8d4:	mov	r3, r1
   1e8d8:	ldr	r1, [r4, #152]	; 0x98
   1e8dc:	ldrh	r0, [r4, #164]	; 0xa4
   1e8e0:	ldrh	r2, [r4, #132]	; 0x84
   1e8e4:	cmp	r1, #0
   1e8e8:	ldrh	r1, [r4, #128]	; 0x80
   1e8ec:	and	r0, r0, #2
   1e8f0:	orrne	r0, r0, #1
   1e8f4:	cmp	r1, r2
   1e8f8:	movcc	r1, r2
   1e8fc:	strhcc	r2, [r4, #128]	; 0x80
   1e900:	str	r0, [sp, #4]
   1e904:	mov	r0, r4
   1e908:	str	r1, [sp]
   1e90c:	add	r1, r4, #168	; 0xa8
   1e910:	bl	1e380 <flatcc_builder_create_buffer@@Base>
   1e914:	mov	r6, r0
   1e918:	cmp	r0, #0
   1e91c:	beq	1e9b8 <flatcc_builder_end_buffer@@Base+0x104>
   1e920:	ldr	r1, [r4, #32]
   1e924:	ldr	r0, [r4, #16]
   1e928:	ldr	r2, [r4, #20]
   1e92c:	ldr	r3, [r1, #20]
   1e930:	str	r3, [r4, #144]	; 0x90
   1e934:	ldr	r3, [r1, #28]
   1e938:	str	r3, [r4, #152]	; 0x98
   1e93c:	ldr	r3, [r1, #16]
   1e940:	str	r3, [r4, #168]	; 0xa8
   1e944:	ldrh	r1, [r1, #32]
   1e948:	strh	r1, [r4, #164]	; 0xa4
   1e94c:	mov	r1, #0
   1e950:	bl	12f40 <memset@plt>
   1e954:	ldr	r0, [r4, #32]
   1e958:	ldr	r1, [r4, #60]	; 0x3c
   1e95c:	ldr	r2, [r4, #64]	; 0x40
   1e960:	ldr	r3, [r0, #8]
   1e964:	str	r3, [r4, #20]
   1e968:	ldr	r3, [r0]
   1e96c:	str	r3, [r4, #28]
   1e970:	add	r1, r1, r3
   1e974:	ldr	r5, [r0, #4]
   1e978:	str	r1, [r4, #16]
   1e97c:	sub	r1, r2, r3
   1e980:	cmp	r1, r5
   1e984:	movhi	r1, r5
   1e988:	str	r1, [r4, #24]
   1e98c:	ldrh	r1, [r4, #130]	; 0x82
   1e990:	ldrh	r2, [r4, #128]	; 0x80
   1e994:	cmp	r2, r1
   1e998:	strhcc	r1, [r4, #128]	; 0x80
   1e99c:	ldrh	r1, [r0, #12]
   1e9a0:	sub	r0, r0, #36	; 0x24
   1e9a4:	str	r0, [r4, #32]
   1e9a8:	strh	r1, [r4, #130]	; 0x82
   1e9ac:	ldr	r0, [r4, #156]	; 0x9c
   1e9b0:	sub	r0, r0, #1
   1e9b4:	str	r0, [r4, #156]	; 0x9c
   1e9b8:	mov	r0, r6
   1e9bc:	sub	sp, fp, #16
   1e9c0:	pop	{r4, r5, r6, sl, fp, pc}
   1e9c4:	movw	r0, #32769	; 0x8001
   1e9c8:	movw	r1, #32210	; 0x7dd2
   1e9cc:	movw	r3, #32813	; 0x802d
   1e9d0:	movw	r2, #838	; 0x346
   1e9d4:	movt	r0, #2
   1e9d8:	movt	r1, #2
   1e9dc:	movt	r3, #2
   1e9e0:	bl	12f88 <__assert_fail@plt>

0001e9e4 <flatcc_builder_start_struct@@Base>:
   1e9e4:	push	{r4, r5, r6, r7, fp, lr}
   1e9e8:	add	fp, sp, #16
   1e9ec:	sub	sp, sp, #8
   1e9f0:	mov	r6, r1
   1e9f4:	mov	r1, r2
   1e9f8:	mov	r4, r0
   1e9fc:	bl	1e780 <flatcc_builder_start_buffer@@Base+0xbc>
   1ea00:	mov	r5, #0
   1ea04:	cmp	r0, #0
   1ea08:	bne	1ea84 <flatcc_builder_start_struct@@Base+0xa0>
   1ea0c:	ldr	r2, [r4, #32]
   1ea10:	mov	r0, #2
   1ea14:	mvn	r7, #3
   1ea18:	strh	r0, [r2, #14]
   1ea1c:	ldr	r1, [r4, #28]
   1ea20:	ldr	r3, [r4, #64]	; 0x40
   1ea24:	ldr	r0, [r4, #60]	; 0x3c
   1ea28:	sub	r3, r3, r1
   1ea2c:	add	r0, r0, r1
   1ea30:	cmn	r3, #4
   1ea34:	str	r0, [r4, #16]
   1ea38:	movcs	r3, r7
   1ea3c:	str	r3, [r4, #24]
   1ea40:	str	r7, [r2, #4]
   1ea44:	ldr	r7, [r4, #20]
   1ea48:	add	r2, r7, r6
   1ea4c:	cmp	r2, r3
   1ea50:	str	r2, [r4, #20]
   1ea54:	bcc	1eac0 <flatcc_builder_start_struct@@Base+0xdc>
   1ea58:	ldr	r0, [r4, #40]	; 0x28
   1ea5c:	ldr	r6, [r4, #48]	; 0x30
   1ea60:	add	r1, r1, r2
   1ea64:	mov	r3, #1
   1ea68:	str	r3, [sp]
   1ea6c:	add	r2, r1, #1
   1ea70:	add	r1, r4, #60	; 0x3c
   1ea74:	mov	r3, #1
   1ea78:	blx	r6
   1ea7c:	cmp	r0, #0
   1ea80:	beq	1ea90 <flatcc_builder_start_struct@@Base+0xac>
   1ea84:	mov	r0, r5
   1ea88:	sub	sp, fp, #16
   1ea8c:	pop	{r4, r5, r6, r7, fp, pc}
   1ea90:	ldr	r1, [r4, #28]
   1ea94:	ldr	r0, [r4, #60]	; 0x3c
   1ea98:	ldr	r3, [r4, #64]	; 0x40
   1ea9c:	ldr	r2, [r4, #32]
   1eaa0:	add	r0, r0, r1
   1eaa4:	sub	r1, r3, r1
   1eaa8:	mvn	r3, #3
   1eaac:	cmn	r1, #4
   1eab0:	str	r0, [r4, #16]
   1eab4:	movcs	r1, r3
   1eab8:	str	r1, [r4, #24]
   1eabc:	str	r3, [r2, #4]
   1eac0:	add	r5, r0, r7
   1eac4:	mov	r0, r5
   1eac8:	sub	sp, fp, #16
   1eacc:	pop	{r4, r5, r6, r7, fp, pc}

0001ead0 <flatcc_builder_struct_edit@@Base>:
   1ead0:	ldr	r0, [r0, #16]
   1ead4:	bx	lr

0001ead8 <flatcc_builder_end_struct@@Base>:
   1ead8:	push	{r4, r5, fp, lr}
   1eadc:	add	fp, sp, #8
   1eae0:	mov	r4, r0
   1eae4:	ldr	r0, [r0, #32]
   1eae8:	ldrh	r0, [r0, #14]
   1eaec:	cmp	r0, #2
   1eaf0:	bne	1eb90 <flatcc_builder_end_struct@@Base+0xb8>
   1eaf4:	ldrh	r3, [r4, #130]	; 0x82
   1eaf8:	ldr	r1, [r4, #16]
   1eafc:	ldr	r2, [r4, #20]
   1eb00:	mov	r0, r4
   1eb04:	bl	1e59c <flatcc_builder_create_struct@@Base>
   1eb08:	mov	r5, r0
   1eb0c:	cmp	r0, #0
   1eb10:	beq	1eb88 <flatcc_builder_end_struct@@Base+0xb0>
   1eb14:	ldr	r0, [r4, #16]
   1eb18:	ldr	r2, [r4, #20]
   1eb1c:	mov	r1, #0
   1eb20:	bl	12f40 <memset@plt>
   1eb24:	ldr	r0, [r4, #32]
   1eb28:	ldr	r1, [r4, #60]	; 0x3c
   1eb2c:	ldr	ip, [r4, #64]	; 0x40
   1eb30:	ldr	r3, [r0, #8]
   1eb34:	str	r3, [r4, #20]
   1eb38:	ldr	r3, [r0]
   1eb3c:	str	r3, [r4, #28]
   1eb40:	add	r1, r1, r3
   1eb44:	ldr	r2, [r0, #4]
   1eb48:	str	r1, [r4, #16]
   1eb4c:	sub	r1, ip, r3
   1eb50:	cmp	r1, r2
   1eb54:	movhi	r1, r2
   1eb58:	str	r1, [r4, #24]
   1eb5c:	ldrh	r1, [r4, #130]	; 0x82
   1eb60:	ldrh	r2, [r4, #128]	; 0x80
   1eb64:	cmp	r2, r1
   1eb68:	strhcc	r1, [r4, #128]	; 0x80
   1eb6c:	ldrh	r1, [r0, #12]
   1eb70:	sub	r0, r0, #36	; 0x24
   1eb74:	str	r0, [r4, #32]
   1eb78:	strh	r1, [r4, #130]	; 0x82
   1eb7c:	ldr	r0, [r4, #156]	; 0x9c
   1eb80:	sub	r0, r0, #1
   1eb84:	str	r0, [r4, #156]	; 0x9c
   1eb88:	mov	r0, r5
   1eb8c:	pop	{r4, r5, fp, pc}
   1eb90:	movw	r0, #32902	; 0x8086
   1eb94:	movw	r1, #32210	; 0x7dd2
   1eb98:	movw	r3, #32946	; 0x80b2
   1eb9c:	mov	r2, #872	; 0x368
   1eba0:	movt	r0, #2
   1eba4:	movt	r1, #2
   1eba8:	movt	r3, #2
   1ebac:	bl	12f88 <__assert_fail@plt>

0001ebb0 <flatcc_builder_extend_vector@@Base>:
   1ebb0:	push	{r4, r5, fp, lr}
   1ebb4:	add	fp, sp, #8
   1ebb8:	sub	sp, sp, #8
   1ebbc:	mov	r4, r0
   1ebc0:	ldr	r0, [r0, #32]
   1ebc4:	ldr	r2, [r0, #20]
   1ebc8:	adds	r2, r2, r1
   1ebcc:	bcs	1ec8c <flatcc_builder_extend_vector@@Base+0xdc>
   1ebd0:	ldr	r3, [r0, #24]
   1ebd4:	cmp	r2, r3
   1ebd8:	bhi	1ec8c <flatcc_builder_extend_vector@@Base+0xdc>
   1ebdc:	str	r2, [r0, #20]
   1ebe0:	ldr	r2, [r4, #32]
   1ebe4:	ldr	r5, [r4, #20]
   1ebe8:	ldr	r0, [r4, #24]
   1ebec:	ldr	r2, [r2, #16]
   1ebf0:	mla	r1, r2, r1, r5
   1ebf4:	cmp	r1, r0
   1ebf8:	str	r1, [r4, #20]
   1ebfc:	bcs	1ec10 <flatcc_builder_extend_vector@@Base+0x60>
   1ec00:	ldr	r0, [r4, #16]
   1ec04:	add	r0, r0, r5
   1ec08:	sub	sp, fp, #8
   1ec0c:	pop	{r4, r5, fp, pc}
   1ec10:	ldr	r2, [r4, #28]
   1ec14:	ldr	r0, [r4, #40]	; 0x28
   1ec18:	ldr	ip, [r4, #48]	; 0x30
   1ec1c:	mov	r3, #1
   1ec20:	str	r3, [sp]
   1ec24:	mov	r3, #1
   1ec28:	add	r1, r1, r2
   1ec2c:	add	r2, r1, #1
   1ec30:	add	r1, r4, #60	; 0x3c
   1ec34:	blx	ip
   1ec38:	mov	r1, r0
   1ec3c:	mov	r0, #0
   1ec40:	cmp	r1, #0
   1ec44:	beq	1ec50 <flatcc_builder_extend_vector@@Base+0xa0>
   1ec48:	sub	sp, fp, #8
   1ec4c:	pop	{r4, r5, fp, pc}
   1ec50:	ldr	r1, [r4, #28]
   1ec54:	ldr	r0, [r4, #60]	; 0x3c
   1ec58:	ldr	r3, [r4, #64]	; 0x40
   1ec5c:	ldr	r2, [r4, #32]
   1ec60:	add	r0, r0, r1
   1ec64:	sub	r1, r3, r1
   1ec68:	mvn	r3, #3
   1ec6c:	cmn	r1, #4
   1ec70:	str	r0, [r4, #16]
   1ec74:	movcs	r1, r3
   1ec78:	str	r1, [r4, #24]
   1ec7c:	str	r3, [r2, #4]
   1ec80:	add	r0, r0, r5
   1ec84:	sub	sp, fp, #8
   1ec88:	pop	{r4, r5, fp, pc}
   1ec8c:	movw	r0, #36481	; 0x8e81
   1ec90:	movw	r1, #32210	; 0x7dd2
   1ec94:	movw	r3, #36508	; 0x8e9c
   1ec98:	mov	r2, #892	; 0x37c
   1ec9c:	movt	r0, #2
   1eca0:	movt	r1, #2
   1eca4:	movt	r3, #2
   1eca8:	bl	12f88 <__assert_fail@plt>

0001ecac <flatcc_builder_vector_push@@Base>:
   1ecac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ecb0:	add	fp, sp, #24
   1ecb4:	sub	sp, sp, #8
   1ecb8:	mov	r5, r0
   1ecbc:	ldr	r0, [r0, #32]
   1ecc0:	mov	r8, r1
   1ecc4:	ldrh	r1, [r0, #14]
   1ecc8:	cmp	r1, #4
   1eccc:	bne	1edb8 <flatcc_builder_vector_push@@Base+0x10c>
   1ecd0:	ldr	r1, [r0, #20]
   1ecd4:	ldr	r2, [r0, #24]
   1ecd8:	cmp	r1, r2
   1ecdc:	bhi	1edd8 <flatcc_builder_vector_push@@Base+0x12c>
   1ece0:	add	r1, r1, #1
   1ece4:	str	r1, [r0, #20]
   1ece8:	ldr	r1, [r5, #32]
   1ecec:	ldr	r4, [r5, #20]
   1ecf0:	ldr	r0, [r5, #24]
   1ecf4:	ldr	r6, [r1, #16]
   1ecf8:	add	r1, r4, r6
   1ecfc:	cmp	r1, r0
   1ed00:	str	r1, [r5, #20]
   1ed04:	bcs	1ed30 <flatcc_builder_vector_push@@Base+0x84>
   1ed08:	ldr	r0, [r5, #16]
   1ed0c:	adds	r7, r0, r4
   1ed10:	beq	1eda8 <flatcc_builder_vector_push@@Base+0xfc>
   1ed14:	mov	r0, r7
   1ed18:	mov	r1, r8
   1ed1c:	mov	r2, r6
   1ed20:	bl	12eb0 <memcpy@plt>
   1ed24:	mov	r0, r7
   1ed28:	sub	sp, fp, #24
   1ed2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ed30:	ldr	r2, [r5, #28]
   1ed34:	ldr	r0, [r5, #40]	; 0x28
   1ed38:	ldr	r7, [r5, #48]	; 0x30
   1ed3c:	mov	r3, #1
   1ed40:	str	r3, [sp]
   1ed44:	mov	r3, #1
   1ed48:	add	r1, r1, r2
   1ed4c:	add	r2, r1, #1
   1ed50:	add	r1, r5, #60	; 0x3c
   1ed54:	blx	r7
   1ed58:	mov	r7, #0
   1ed5c:	cmp	r0, #0
   1ed60:	beq	1ed70 <flatcc_builder_vector_push@@Base+0xc4>
   1ed64:	mov	r0, r7
   1ed68:	sub	sp, fp, #24
   1ed6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ed70:	ldr	r1, [r5, #28]
   1ed74:	ldr	r0, [r5, #60]	; 0x3c
   1ed78:	ldr	r3, [r5, #64]	; 0x40
   1ed7c:	ldr	r2, [r5, #32]
   1ed80:	add	r0, r0, r1
   1ed84:	sub	r1, r3, r1
   1ed88:	mvn	r3, #3
   1ed8c:	cmn	r1, #4
   1ed90:	str	r0, [r5, #16]
   1ed94:	movcs	r1, r3
   1ed98:	str	r1, [r5, #24]
   1ed9c:	str	r3, [r2, #4]
   1eda0:	adds	r7, r0, r4
   1eda4:	bne	1ed14 <flatcc_builder_vector_push@@Base+0x68>
   1eda8:	mov	r7, #0
   1edac:	mov	r0, r7
   1edb0:	sub	sp, fp, #24
   1edb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1edb8:	movw	r0, #33013	; 0x80f5
   1edbc:	movw	r1, #32210	; 0x7dd2
   1edc0:	movw	r3, #33057	; 0x8121
   1edc4:	movw	r2, #907	; 0x38b
   1edc8:	movt	r0, #2
   1edcc:	movt	r1, #2
   1edd0:	movt	r3, #2
   1edd4:	bl	12f88 <__assert_fail@plt>
   1edd8:	movw	r0, #33124	; 0x8164
   1eddc:	movw	r1, #32210	; 0x7dd2
   1ede0:	movw	r3, #33057	; 0x8121
   1ede4:	mov	r2, #908	; 0x38c
   1ede8:	movt	r0, #2
   1edec:	movt	r1, #2
   1edf0:	movt	r3, #2
   1edf4:	bl	12f88 <__assert_fail@plt>

0001edf8 <flatcc_builder_append_vector@@Base>:
   1edf8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1edfc:	add	fp, sp, #24
   1ee00:	sub	sp, sp, #8
   1ee04:	mov	r6, r0
   1ee08:	ldr	r0, [r0, #32]
   1ee0c:	mov	r8, r1
   1ee10:	ldrh	r1, [r0, #14]
   1ee14:	cmp	r1, #4
   1ee18:	bne	1ef2c <flatcc_builder_append_vector@@Base+0x134>
   1ee1c:	ldr	r1, [r0, #20]
   1ee20:	mov	r5, r2
   1ee24:	adds	r1, r1, r2
   1ee28:	bcs	1ef0c <flatcc_builder_append_vector@@Base+0x114>
   1ee2c:	ldr	r2, [r0, #24]
   1ee30:	cmp	r1, r2
   1ee34:	bhi	1ef0c <flatcc_builder_append_vector@@Base+0x114>
   1ee38:	str	r1, [r0, #20]
   1ee3c:	ldr	r1, [r6, #32]
   1ee40:	ldr	r4, [r6, #20]
   1ee44:	ldr	r0, [r6, #24]
   1ee48:	ldr	r9, [r1, #16]
   1ee4c:	mla	r1, r9, r5, r4
   1ee50:	cmp	r1, r0
   1ee54:	str	r1, [r6, #20]
   1ee58:	bcs	1ee84 <flatcc_builder_append_vector@@Base+0x8c>
   1ee5c:	ldr	r0, [r6, #16]
   1ee60:	adds	r7, r0, r4
   1ee64:	beq	1eefc <flatcc_builder_append_vector@@Base+0x104>
   1ee68:	mul	r2, r9, r5
   1ee6c:	mov	r0, r7
   1ee70:	mov	r1, r8
   1ee74:	bl	12eb0 <memcpy@plt>
   1ee78:	mov	r0, r7
   1ee7c:	sub	sp, fp, #24
   1ee80:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ee84:	ldr	r2, [r6, #28]
   1ee88:	ldr	r0, [r6, #40]	; 0x28
   1ee8c:	ldr	r7, [r6, #48]	; 0x30
   1ee90:	mov	r3, #1
   1ee94:	str	r3, [sp]
   1ee98:	mov	r3, #1
   1ee9c:	add	r1, r1, r2
   1eea0:	add	r2, r1, #1
   1eea4:	add	r1, r6, #60	; 0x3c
   1eea8:	blx	r7
   1eeac:	mov	r7, #0
   1eeb0:	cmp	r0, #0
   1eeb4:	beq	1eec4 <flatcc_builder_append_vector@@Base+0xcc>
   1eeb8:	mov	r0, r7
   1eebc:	sub	sp, fp, #24
   1eec0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1eec4:	ldr	r1, [r6, #28]
   1eec8:	ldr	r0, [r6, #60]	; 0x3c
   1eecc:	ldr	r3, [r6, #64]	; 0x40
   1eed0:	ldr	r2, [r6, #32]
   1eed4:	add	r0, r0, r1
   1eed8:	sub	r1, r3, r1
   1eedc:	mvn	r3, #3
   1eee0:	cmn	r1, #4
   1eee4:	str	r0, [r6, #16]
   1eee8:	movcs	r1, r3
   1eeec:	str	r1, [r6, #24]
   1eef0:	str	r3, [r2, #4]
   1eef4:	adds	r7, r0, r4
   1eef8:	bne	1ee68 <flatcc_builder_append_vector@@Base+0x70>
   1eefc:	mov	r7, #0
   1ef00:	mov	r0, r7
   1ef04:	sub	sp, fp, #24
   1ef08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ef0c:	movw	r0, #36481	; 0x8e81
   1ef10:	movw	r1, #32210	; 0x7dd2
   1ef14:	movw	r3, #36508	; 0x8e9c
   1ef18:	mov	r2, #892	; 0x37c
   1ef1c:	movt	r0, #2
   1ef20:	movt	r1, #2
   1ef24:	movt	r3, #2
   1ef28:	bl	12f88 <__assert_fail@plt>
   1ef2c:	movw	r0, #33013	; 0x80f5
   1ef30:	movw	r1, #32210	; 0x7dd2
   1ef34:	movw	r3, #33185	; 0x81a1
   1ef38:	movw	r2, #915	; 0x393
   1ef3c:	movt	r0, #2
   1ef40:	movt	r1, #2
   1ef44:	movt	r3, #2
   1ef48:	bl	12f88 <__assert_fail@plt>

0001ef4c <flatcc_builder_extend_offset_vector@@Base>:
   1ef4c:	push	{r4, r5, fp, lr}
   1ef50:	add	fp, sp, #8
   1ef54:	sub	sp, sp, #8
   1ef58:	mov	r4, r0
   1ef5c:	ldr	r0, [r0, #32]
   1ef60:	ldr	r2, [r0, #20]
   1ef64:	adds	r2, r2, r1
   1ef68:	cmpcc	r2, #1073741824	; 0x40000000
   1ef6c:	bcc	1ef90 <flatcc_builder_extend_offset_vector@@Base+0x44>
   1ef70:	movw	r0, #36481	; 0x8e81
   1ef74:	movw	r1, #32210	; 0x7dd2
   1ef78:	movw	r3, #36508	; 0x8e9c
   1ef7c:	mov	r2, #892	; 0x37c
   1ef80:	movt	r0, #2
   1ef84:	movt	r1, #2
   1ef88:	movt	r3, #2
   1ef8c:	bl	12f88 <__assert_fail@plt>
   1ef90:	str	r2, [r0, #20]
   1ef94:	ldr	r5, [r4, #20]
   1ef98:	ldr	r0, [r4, #24]
   1ef9c:	add	r1, r5, r1, lsl #2
   1efa0:	cmp	r1, r0
   1efa4:	str	r1, [r4, #20]
   1efa8:	bcs	1efbc <flatcc_builder_extend_offset_vector@@Base+0x70>
   1efac:	ldr	r0, [r4, #16]
   1efb0:	add	r0, r0, r5
   1efb4:	sub	sp, fp, #8
   1efb8:	pop	{r4, r5, fp, pc}
   1efbc:	ldr	r2, [r4, #28]
   1efc0:	ldr	r0, [r4, #40]	; 0x28
   1efc4:	ldr	ip, [r4, #48]	; 0x30
   1efc8:	mov	r3, #1
   1efcc:	str	r3, [sp]
   1efd0:	mov	r3, #1
   1efd4:	add	r1, r1, r2
   1efd8:	add	r2, r1, #1
   1efdc:	add	r1, r4, #60	; 0x3c
   1efe0:	blx	ip
   1efe4:	mov	r1, r0
   1efe8:	mov	r0, #0
   1efec:	cmp	r1, #0
   1eff0:	beq	1effc <flatcc_builder_extend_offset_vector@@Base+0xb0>
   1eff4:	sub	sp, fp, #8
   1eff8:	pop	{r4, r5, fp, pc}
   1effc:	ldr	r1, [r4, #28]
   1f000:	ldr	r0, [r4, #60]	; 0x3c
   1f004:	ldr	r3, [r4, #64]	; 0x40
   1f008:	ldr	r2, [r4, #32]
   1f00c:	add	r0, r0, r1
   1f010:	sub	r1, r3, r1
   1f014:	mvn	r3, #3
   1f018:	cmn	r1, #4
   1f01c:	str	r0, [r4, #16]
   1f020:	movcs	r1, r3
   1f024:	str	r1, [r4, #24]
   1f028:	str	r3, [r2, #4]
   1f02c:	add	r0, r0, r5
   1f030:	sub	sp, fp, #8
   1f034:	pop	{r4, r5, fp, pc}

0001f038 <flatcc_builder_offset_vector_push@@Base>:
   1f038:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f03c:	add	fp, sp, #24
   1f040:	sub	sp, sp, #8
   1f044:	mov	r6, r0
   1f048:	ldr	r0, [r0, #32]
   1f04c:	mov	r8, r1
   1f050:	ldrh	r1, [r0, #14]
   1f054:	cmp	r1, #5
   1f058:	bne	1f118 <flatcc_builder_offset_vector_push@@Base+0xe0>
   1f05c:	ldr	r1, [r0, #20]
   1f060:	mov	r5, #0
   1f064:	cmn	r1, #-1073741823	; 0xc0000001
   1f068:	beq	1f0c4 <flatcc_builder_offset_vector_push@@Base+0x8c>
   1f06c:	add	r1, r1, #1
   1f070:	str	r1, [r0, #20]
   1f074:	ldr	r7, [r6, #20]
   1f078:	ldr	r0, [r6, #24]
   1f07c:	add	r1, r7, #4
   1f080:	cmp	r1, r0
   1f084:	str	r1, [r6, #20]
   1f088:	bcs	1f094 <flatcc_builder_offset_vector_push@@Base+0x5c>
   1f08c:	ldr	r0, [r6, #16]
   1f090:	b	1f100 <flatcc_builder_offset_vector_push@@Base+0xc8>
   1f094:	ldr	r1, [r6, #28]
   1f098:	ldr	r0, [r6, #40]	; 0x28
   1f09c:	ldr	r4, [r6, #48]	; 0x30
   1f0a0:	mov	r2, #1
   1f0a4:	mov	r3, #1
   1f0a8:	str	r2, [sp]
   1f0ac:	add	r1, r7, r1
   1f0b0:	add	r2, r1, #5
   1f0b4:	add	r1, r6, #60	; 0x3c
   1f0b8:	blx	r4
   1f0bc:	cmp	r0, #0
   1f0c0:	beq	1f0d0 <flatcc_builder_offset_vector_push@@Base+0x98>
   1f0c4:	mov	r0, r5
   1f0c8:	sub	sp, fp, #24
   1f0cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f0d0:	ldr	r1, [r6, #28]
   1f0d4:	ldr	r0, [r6, #60]	; 0x3c
   1f0d8:	ldr	r3, [r6, #64]	; 0x40
   1f0dc:	ldr	r2, [r6, #32]
   1f0e0:	add	r0, r0, r1
   1f0e4:	sub	r1, r3, r1
   1f0e8:	mvn	r3, #3
   1f0ec:	cmn	r1, #4
   1f0f0:	str	r0, [r6, #16]
   1f0f4:	movcs	r1, r3
   1f0f8:	str	r1, [r6, #24]
   1f0fc:	str	r3, [r2, #4]
   1f100:	adds	r0, r0, r7
   1f104:	movne	r5, r0
   1f108:	strne	r8, [r0]
   1f10c:	mov	r0, r5
   1f110:	sub	sp, fp, #24
   1f114:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f118:	movw	r0, #33262	; 0x81ee
   1f11c:	movw	r1, #32210	; 0x7dd2
   1f120:	movw	r3, #33313	; 0x8221
   1f124:	movw	r2, #934	; 0x3a6
   1f128:	movt	r0, #2
   1f12c:	movt	r1, #2
   1f130:	movt	r3, #2
   1f134:	bl	12f88 <__assert_fail@plt>

0001f138 <flatcc_builder_append_offset_vector@@Base>:
   1f138:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f13c:	add	fp, sp, #24
   1f140:	sub	sp, sp, #8
   1f144:	mov	r6, r0
   1f148:	ldr	r0, [r0, #32]
   1f14c:	mov	r8, r1
   1f150:	ldrh	r1, [r0, #14]
   1f154:	cmp	r1, #5
   1f158:	bne	1f25c <flatcc_builder_append_offset_vector@@Base+0x124>
   1f15c:	ldr	r1, [r0, #20]
   1f160:	mov	r5, r2
   1f164:	adds	r1, r1, r2
   1f168:	cmpcc	r1, #1073741824	; 0x40000000
   1f16c:	bcc	1f190 <flatcc_builder_append_offset_vector@@Base+0x58>
   1f170:	movw	r0, #36481	; 0x8e81
   1f174:	movw	r1, #32210	; 0x7dd2
   1f178:	movw	r3, #36508	; 0x8e9c
   1f17c:	mov	r2, #892	; 0x37c
   1f180:	movt	r0, #2
   1f184:	movt	r1, #2
   1f188:	movt	r3, #2
   1f18c:	bl	12f88 <__assert_fail@plt>
   1f190:	str	r1, [r0, #20]
   1f194:	ldr	r4, [r6, #20]
   1f198:	ldr	r0, [r6, #24]
   1f19c:	add	r1, r4, r5, lsl #2
   1f1a0:	cmp	r1, r0
   1f1a4:	str	r1, [r6, #20]
   1f1a8:	bcs	1f1d4 <flatcc_builder_append_offset_vector@@Base+0x9c>
   1f1ac:	ldr	r0, [r6, #16]
   1f1b0:	adds	r7, r0, r4
   1f1b4:	beq	1f24c <flatcc_builder_append_offset_vector@@Base+0x114>
   1f1b8:	lsl	r2, r5, #2
   1f1bc:	mov	r0, r7
   1f1c0:	mov	r1, r8
   1f1c4:	bl	12eb0 <memcpy@plt>
   1f1c8:	mov	r0, r7
   1f1cc:	sub	sp, fp, #24
   1f1d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f1d4:	ldr	r2, [r6, #28]
   1f1d8:	ldr	r0, [r6, #40]	; 0x28
   1f1dc:	ldr	r7, [r6, #48]	; 0x30
   1f1e0:	mov	r3, #1
   1f1e4:	str	r3, [sp]
   1f1e8:	mov	r3, #1
   1f1ec:	add	r1, r1, r2
   1f1f0:	add	r2, r1, #1
   1f1f4:	add	r1, r6, #60	; 0x3c
   1f1f8:	blx	r7
   1f1fc:	mov	r7, #0
   1f200:	cmp	r0, #0
   1f204:	beq	1f214 <flatcc_builder_append_offset_vector@@Base+0xdc>
   1f208:	mov	r0, r7
   1f20c:	sub	sp, fp, #24
   1f210:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f214:	ldr	r1, [r6, #28]
   1f218:	ldr	r0, [r6, #60]	; 0x3c
   1f21c:	ldr	r3, [r6, #64]	; 0x40
   1f220:	ldr	r2, [r6, #32]
   1f224:	add	r0, r0, r1
   1f228:	sub	r1, r3, r1
   1f22c:	mvn	r3, #3
   1f230:	cmn	r1, #4
   1f234:	str	r0, [r6, #16]
   1f238:	movcs	r1, r3
   1f23c:	str	r1, [r6, #24]
   1f240:	str	r3, [r2, #4]
   1f244:	adds	r7, r0, r4
   1f248:	bne	1f1b8 <flatcc_builder_append_offset_vector@@Base+0x80>
   1f24c:	mov	r7, #0
   1f250:	mov	r0, r7
   1f254:	sub	sp, fp, #24
   1f258:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f25c:	movw	r0, #33262	; 0x81ee
   1f260:	movw	r1, #32210	; 0x7dd2
   1f264:	movw	r3, #33411	; 0x8283
   1f268:	mov	r2, #948	; 0x3b4
   1f26c:	movt	r0, #2
   1f270:	movt	r1, #2
   1f274:	movt	r3, #2
   1f278:	bl	12f88 <__assert_fail@plt>

0001f27c <flatcc_builder_extend_string@@Base>:
   1f27c:	push	{r4, r5, fp, lr}
   1f280:	add	fp, sp, #8
   1f284:	sub	sp, sp, #8
   1f288:	mov	r4, r0
   1f28c:	ldr	r0, [r0, #32]
   1f290:	ldrh	r2, [r0, #14]
   1f294:	cmp	r2, #6
   1f298:	bne	1f350 <flatcc_builder_extend_string@@Base+0xd4>
   1f29c:	ldr	r2, [r0, #20]
   1f2a0:	adds	r2, r2, r1
   1f2a4:	bcs	1f370 <flatcc_builder_extend_string@@Base+0xf4>
   1f2a8:	str	r2, [r0, #20]
   1f2ac:	ldr	r5, [r4, #20]
   1f2b0:	ldr	r0, [r4, #24]
   1f2b4:	add	r1, r5, r1
   1f2b8:	cmp	r1, r0
   1f2bc:	str	r1, [r4, #20]
   1f2c0:	bcs	1f2d4 <flatcc_builder_extend_string@@Base+0x58>
   1f2c4:	ldr	r0, [r4, #16]
   1f2c8:	add	r0, r0, r5
   1f2cc:	sub	sp, fp, #8
   1f2d0:	pop	{r4, r5, fp, pc}
   1f2d4:	ldr	r2, [r4, #28]
   1f2d8:	ldr	r0, [r4, #40]	; 0x28
   1f2dc:	ldr	ip, [r4, #48]	; 0x30
   1f2e0:	mov	r3, #1
   1f2e4:	str	r3, [sp]
   1f2e8:	mov	r3, #1
   1f2ec:	add	r1, r1, r2
   1f2f0:	add	r2, r1, #1
   1f2f4:	add	r1, r4, #60	; 0x3c
   1f2f8:	blx	ip
   1f2fc:	mov	r1, r0
   1f300:	mov	r0, #0
   1f304:	cmp	r1, #0
   1f308:	beq	1f314 <flatcc_builder_extend_string@@Base+0x98>
   1f30c:	sub	sp, fp, #8
   1f310:	pop	{r4, r5, fp, pc}
   1f314:	ldr	r1, [r4, #28]
   1f318:	ldr	r0, [r4, #60]	; 0x3c
   1f31c:	ldr	r3, [r4, #64]	; 0x40
   1f320:	ldr	r2, [r4, #32]
   1f324:	add	r0, r0, r1
   1f328:	sub	r1, r3, r1
   1f32c:	mvn	r3, #3
   1f330:	cmn	r1, #4
   1f334:	str	r0, [r4, #16]
   1f338:	movcs	r1, r3
   1f33c:	str	r1, [r4, #24]
   1f340:	str	r3, [r2, #4]
   1f344:	add	r0, r0, r5
   1f348:	sub	sp, fp, #8
   1f34c:	pop	{r4, r5, fp, pc}
   1f350:	movw	r0, #33527	; 0x82f7
   1f354:	movw	r1, #32210	; 0x7dd2
   1f358:	movw	r3, #33571	; 0x8323
   1f35c:	movw	r2, #957	; 0x3bd
   1f360:	movt	r0, #2
   1f364:	movt	r1, #2
   1f368:	movt	r3, #2
   1f36c:	bl	12f88 <__assert_fail@plt>
   1f370:	movw	r0, #36481	; 0x8e81
   1f374:	movw	r1, #32210	; 0x7dd2
   1f378:	movw	r3, #36508	; 0x8e9c
   1f37c:	mov	r2, #892	; 0x37c
   1f380:	movt	r0, #2
   1f384:	movt	r1, #2
   1f388:	movt	r3, #2
   1f38c:	bl	12f88 <__assert_fail@plt>

0001f390 <flatcc_builder_append_string@@Base>:
   1f390:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f394:	add	fp, sp, #24
   1f398:	sub	sp, sp, #8
   1f39c:	mov	r6, r0
   1f3a0:	ldr	r0, [r0, #32]
   1f3a4:	mov	r8, r1
   1f3a8:	ldrh	r1, [r0, #14]
   1f3ac:	cmp	r1, #6
   1f3b0:	bne	1f490 <flatcc_builder_append_string@@Base+0x100>
   1f3b4:	ldr	r1, [r0, #20]
   1f3b8:	mov	r4, r2
   1f3bc:	adds	r1, r1, r2
   1f3c0:	bcs	1f4b0 <flatcc_builder_append_string@@Base+0x120>
   1f3c4:	str	r1, [r0, #20]
   1f3c8:	ldr	r5, [r6, #20]
   1f3cc:	ldr	r0, [r6, #24]
   1f3d0:	add	r1, r5, r4
   1f3d4:	cmp	r1, r0
   1f3d8:	str	r1, [r6, #20]
   1f3dc:	bcs	1f408 <flatcc_builder_append_string@@Base+0x78>
   1f3e0:	ldr	r0, [r6, #16]
   1f3e4:	adds	r7, r0, r5
   1f3e8:	beq	1f480 <flatcc_builder_append_string@@Base+0xf0>
   1f3ec:	mov	r0, r7
   1f3f0:	mov	r1, r8
   1f3f4:	mov	r2, r4
   1f3f8:	bl	12eb0 <memcpy@plt>
   1f3fc:	mov	r0, r7
   1f400:	sub	sp, fp, #24
   1f404:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f408:	ldr	r2, [r6, #28]
   1f40c:	ldr	r0, [r6, #40]	; 0x28
   1f410:	ldr	r7, [r6, #48]	; 0x30
   1f414:	mov	r3, #1
   1f418:	str	r3, [sp]
   1f41c:	mov	r3, #1
   1f420:	add	r1, r1, r2
   1f424:	add	r2, r1, #1
   1f428:	add	r1, r6, #60	; 0x3c
   1f42c:	blx	r7
   1f430:	mov	r7, #0
   1f434:	cmp	r0, #0
   1f438:	beq	1f448 <flatcc_builder_append_string@@Base+0xb8>
   1f43c:	mov	r0, r7
   1f440:	sub	sp, fp, #24
   1f444:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f448:	ldr	r1, [r6, #28]
   1f44c:	ldr	r0, [r6, #60]	; 0x3c
   1f450:	ldr	r3, [r6, #64]	; 0x40
   1f454:	ldr	r2, [r6, #32]
   1f458:	add	r0, r0, r1
   1f45c:	sub	r1, r3, r1
   1f460:	mvn	r3, #3
   1f464:	cmn	r1, #4
   1f468:	str	r0, [r6, #16]
   1f46c:	movcs	r1, r3
   1f470:	str	r1, [r6, #24]
   1f474:	str	r3, [r2, #4]
   1f478:	adds	r7, r0, r5
   1f47c:	bne	1f3ec <flatcc_builder_append_string@@Base+0x5c>
   1f480:	mov	r7, #0
   1f484:	mov	r0, r7
   1f488:	sub	sp, fp, #24
   1f48c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f490:	movw	r0, #33527	; 0x82f7
   1f494:	movw	r1, #32210	; 0x7dd2
   1f498:	movw	r3, #33634	; 0x8362
   1f49c:	movw	r2, #966	; 0x3c6
   1f4a0:	movt	r0, #2
   1f4a4:	movt	r1, #2
   1f4a8:	movt	r3, #2
   1f4ac:	bl	12f88 <__assert_fail@plt>
   1f4b0:	movw	r0, #36481	; 0x8e81
   1f4b4:	movw	r1, #32210	; 0x7dd2
   1f4b8:	movw	r3, #36508	; 0x8e9c
   1f4bc:	mov	r2, #892	; 0x37c
   1f4c0:	movt	r0, #2
   1f4c4:	movt	r1, #2
   1f4c8:	movt	r3, #2
   1f4cc:	bl	12f88 <__assert_fail@plt>

0001f4d0 <flatcc_builder_append_string_str@@Base>:
   1f4d0:	push	{r4, r5, fp, lr}
   1f4d4:	add	fp, sp, #8
   1f4d8:	mov	r5, r0
   1f4dc:	mov	r0, r1
   1f4e0:	mov	r4, r1
   1f4e4:	bl	12f1c <strlen@plt>
   1f4e8:	mov	r2, r0
   1f4ec:	mov	r0, r5
   1f4f0:	mov	r1, r4
   1f4f4:	pop	{r4, r5, fp, lr}
   1f4f8:	b	1f390 <flatcc_builder_append_string@@Base>

0001f4fc <flatcc_builder_append_string_strn@@Base>:
   1f4fc:	push	{r4, r5, r6, sl, fp, lr}
   1f500:	add	fp, sp, #16
   1f504:	mov	r6, r0
   1f508:	mov	r5, r1
   1f50c:	mov	r0, r1
   1f510:	mov	r1, #0
   1f514:	mov	r4, r2
   1f518:	bl	12f58 <memchr@plt>
   1f51c:	cmp	r0, #0
   1f520:	mov	r1, r5
   1f524:	subne	r4, r0, r5
   1f528:	mov	r0, r6
   1f52c:	mov	r2, r4
   1f530:	pop	{r4, r5, r6, sl, fp, lr}
   1f534:	b	1f390 <flatcc_builder_append_string@@Base>

0001f538 <flatcc_builder_truncate_vector@@Base>:
   1f538:	push	{fp, lr}
   1f53c:	mov	fp, sp
   1f540:	ldr	r2, [r0, #32]
   1f544:	ldrh	r3, [r2, #14]
   1f548:	cmp	r3, #4
   1f54c:	bne	1f594 <flatcc_builder_truncate_vector@@Base+0x5c>
   1f550:	ldr	r3, [r2, #20]
   1f554:	cmp	r3, r1
   1f558:	bcc	1f5b4 <flatcc_builder_truncate_vector@@Base+0x7c>
   1f55c:	sub	r3, r3, r1
   1f560:	str	r3, [r2, #20]
   1f564:	ldr	r2, [r0, #32]
   1f568:	ldr	r3, [r0, #20]
   1f56c:	ldr	ip, [r0, #16]
   1f570:	ldr	r2, [r2, #16]
   1f574:	mls	r3, r2, r1, r3
   1f578:	mul	r2, r2, r1
   1f57c:	mov	r1, #0
   1f580:	str	r3, [r0, #20]
   1f584:	add	r0, ip, r3
   1f588:	bl	12f40 <memset@plt>
   1f58c:	mov	r0, #0
   1f590:	pop	{fp, pc}
   1f594:	movw	r0, #33013	; 0x80f5
   1f598:	movw	r1, #32210	; 0x7dd2
   1f59c:	movw	r3, #33711	; 0x83af
   1f5a0:	movw	r2, #985	; 0x3d9
   1f5a4:	movt	r0, #2
   1f5a8:	movt	r1, #2
   1f5ac:	movt	r3, #2
   1f5b0:	bl	12f88 <__assert_fail@plt>
   1f5b4:	movw	r0, #33774	; 0x83ee
   1f5b8:	movw	r1, #32210	; 0x7dd2
   1f5bc:	movw	r3, #33711	; 0x83af
   1f5c0:	movw	r2, #986	; 0x3da
   1f5c4:	movt	r0, #2
   1f5c8:	movt	r1, #2
   1f5cc:	movt	r3, #2
   1f5d0:	bl	12f88 <__assert_fail@plt>

0001f5d4 <flatcc_builder_truncate_offset_vector@@Base>:
   1f5d4:	push	{fp, lr}
   1f5d8:	mov	fp, sp
   1f5dc:	ldr	r2, [r0, #32]
   1f5e0:	ldrh	r3, [r2, #14]
   1f5e4:	cmp	r3, #5
   1f5e8:	bne	1f630 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   1f5ec:	ldr	r3, [r2, #20]
   1f5f0:	cmp	r3, r1
   1f5f4:	bcc	1f650 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   1f5f8:	sub	r3, r3, r1
   1f5fc:	str	r3, [r2, #20]
   1f600:	ldr	r2, [r0, #32]
   1f604:	ldr	r3, [r0, #20]
   1f608:	ldr	ip, [r0, #16]
   1f60c:	ldr	r2, [r2, #16]
   1f610:	mls	r3, r2, r1, r3
   1f614:	mul	r2, r2, r1
   1f618:	mov	r1, #0
   1f61c:	str	r3, [r0, #20]
   1f620:	add	r0, ip, r3
   1f624:	bl	12f40 <memset@plt>
   1f628:	mov	r0, #0
   1f62c:	pop	{fp, pc}
   1f630:	movw	r0, #33262	; 0x81ee
   1f634:	movw	r1, #32210	; 0x7dd2
   1f638:	movw	r3, #33810	; 0x8412
   1f63c:	movw	r2, #994	; 0x3e2
   1f640:	movt	r0, #2
   1f644:	movt	r1, #2
   1f648:	movt	r3, #2
   1f64c:	bl	12f88 <__assert_fail@plt>
   1f650:	movw	r0, #33880	; 0x8458
   1f654:	movw	r1, #32210	; 0x7dd2
   1f658:	movw	r3, #33810	; 0x8412
   1f65c:	movw	r2, #995	; 0x3e3
   1f660:	movt	r0, #2
   1f664:	movt	r1, #2
   1f668:	movt	r3, #2
   1f66c:	bl	12f88 <__assert_fail@plt>

0001f670 <flatcc_builder_truncate_string@@Base>:
   1f670:	push	{fp, lr}
   1f674:	mov	fp, sp
   1f678:	mov	r2, r1
   1f67c:	ldr	r1, [r0, #32]
   1f680:	ldrh	r3, [r1, #14]
   1f684:	cmp	r3, #6
   1f688:	bne	1f6c4 <flatcc_builder_truncate_string@@Base+0x54>
   1f68c:	ldr	r3, [r1, #20]
   1f690:	cmp	r3, r2
   1f694:	bcc	1f6e4 <flatcc_builder_truncate_string@@Base+0x74>
   1f698:	sub	r3, r3, r2
   1f69c:	str	r3, [r1, #20]
   1f6a0:	ldr	r3, [r0, #20]
   1f6a4:	ldr	r1, [r0, #16]
   1f6a8:	sub	r3, r3, r2
   1f6ac:	str	r3, [r0, #20]
   1f6b0:	add	r0, r1, r3
   1f6b4:	mov	r1, #0
   1f6b8:	bl	12f40 <memset@plt>
   1f6bc:	mov	r0, #0
   1f6c0:	pop	{fp, pc}
   1f6c4:	movw	r0, #33527	; 0x82f7
   1f6c8:	movw	r1, #32210	; 0x7dd2
   1f6cc:	movw	r3, #33939	; 0x8493
   1f6d0:	movw	r2, #1003	; 0x3eb
   1f6d4:	movt	r0, #2
   1f6d8:	movt	r1, #2
   1f6dc:	movt	r3, #2
   1f6e0:	bl	12f88 <__assert_fail@plt>
   1f6e4:	movw	r0, #34002	; 0x84d2
   1f6e8:	movw	r1, #32210	; 0x7dd2
   1f6ec:	movw	r3, #33939	; 0x8493
   1f6f0:	mov	r2, #1004	; 0x3ec
   1f6f4:	movt	r0, #2
   1f6f8:	movt	r1, #2
   1f6fc:	movt	r3, #2
   1f700:	bl	12f88 <__assert_fail@plt>

0001f704 <flatcc_builder_start_vector@@Base>:
   1f704:	push	{r4, r5, r6, r7, fp, lr}
   1f708:	add	fp, sp, #16
   1f70c:	mov	r7, #4
   1f710:	cmp	r2, #4
   1f714:	mov	r6, r1
   1f718:	mov	r5, r3
   1f71c:	mov	r4, r0
   1f720:	movls	r2, r7
   1f724:	mov	r1, r2
   1f728:	bl	1e780 <flatcc_builder_start_buffer@@Base+0xbc>
   1f72c:	mov	r1, r0
   1f730:	mvn	r0, #0
   1f734:	cmp	r1, #0
   1f738:	popne	{r4, r5, r6, r7, fp, pc}
   1f73c:	ldr	r0, [r4, #32]
   1f740:	str	r6, [r0, #16]
   1f744:	mov	r0, #0
   1f748:	ldr	r1, [r4, #32]
   1f74c:	str	r0, [r1, #20]
   1f750:	ldr	r1, [r4, #32]
   1f754:	str	r5, [r1, #24]
   1f758:	ldr	r1, [r4, #32]
   1f75c:	strh	r7, [r1, #14]
   1f760:	ldr	r2, [r4, #28]
   1f764:	ldr	r3, [r4, #60]	; 0x3c
   1f768:	ldr	r7, [r4, #64]	; 0x40
   1f76c:	add	r3, r3, r2
   1f770:	sub	r2, r7, r2
   1f774:	str	r3, [r4, #16]
   1f778:	mvn	r3, #3
   1f77c:	cmn	r2, #4
   1f780:	movcs	r2, r3
   1f784:	str	r2, [r4, #24]
   1f788:	str	r3, [r1, #4]
   1f78c:	pop	{r4, r5, r6, r7, fp, pc}

0001f790 <flatcc_builder_start_offset_vector@@Base>:
   1f790:	push	{r4, r5, fp, lr}
   1f794:	add	fp, sp, #8
   1f798:	mov	r1, #4
   1f79c:	mov	r4, r0
   1f7a0:	mov	r5, #4
   1f7a4:	bl	1e780 <flatcc_builder_start_buffer@@Base+0xbc>
   1f7a8:	mov	r1, r0
   1f7ac:	mvn	r0, #0
   1f7b0:	cmp	r1, #0
   1f7b4:	popne	{r4, r5, fp, pc}
   1f7b8:	ldr	r0, [r4, #32]
   1f7bc:	mov	r2, #5
   1f7c0:	str	r5, [r0, #16]
   1f7c4:	mov	r0, #0
   1f7c8:	ldr	r1, [r4, #32]
   1f7cc:	str	r0, [r1, #20]
   1f7d0:	ldr	r1, [r4, #32]
   1f7d4:	strh	r2, [r1, #14]
   1f7d8:	ldr	r2, [r4, #28]
   1f7dc:	ldr	r3, [r4, #60]	; 0x3c
   1f7e0:	ldr	r5, [r4, #64]	; 0x40
   1f7e4:	add	r3, r3, r2
   1f7e8:	sub	r2, r5, r2
   1f7ec:	str	r3, [r4, #16]
   1f7f0:	mvn	r3, #3
   1f7f4:	cmn	r2, #4
   1f7f8:	movcs	r2, r3
   1f7fc:	str	r2, [r4, #24]
   1f800:	str	r3, [r1, #4]
   1f804:	pop	{r4, r5, fp, pc}

0001f808 <flatcc_builder_create_offset_vector@@Base>:
   1f808:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f80c:	add	fp, sp, #24
   1f810:	sub	sp, sp, #8
   1f814:	mov	r8, r1
   1f818:	mov	r1, #4
   1f81c:	mov	r6, r2
   1f820:	mov	r4, r0
   1f824:	mov	r5, #4
   1f828:	bl	1e780 <flatcc_builder_start_buffer@@Base+0xbc>
   1f82c:	mov	r7, #0
   1f830:	cmp	r0, #0
   1f834:	beq	1f844 <flatcc_builder_create_offset_vector@@Base+0x3c>
   1f838:	mov	r0, r7
   1f83c:	sub	sp, fp, #24
   1f840:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f844:	ldr	r0, [r4, #32]
   1f848:	mov	r1, #0
   1f84c:	str	r5, [r0, #16]
   1f850:	ldr	r0, [r4, #32]
   1f854:	str	r1, [r0, #20]
   1f858:	mov	r1, #5
   1f85c:	ldr	r0, [r4, #32]
   1f860:	strh	r1, [r0, #14]
   1f864:	ldr	r1, [r4, #28]
   1f868:	ldr	r2, [r4, #60]	; 0x3c
   1f86c:	ldr	r3, [r4, #64]	; 0x40
   1f870:	add	r2, r2, r1
   1f874:	sub	r1, r3, r1
   1f878:	str	r2, [r4, #16]
   1f87c:	mvn	r2, #3
   1f880:	cmn	r1, #4
   1f884:	movcs	r1, r2
   1f888:	str	r1, [r4, #24]
   1f88c:	str	r2, [r0, #4]
   1f890:	ldr	r1, [r0, #20]
   1f894:	adds	r1, r1, r6
   1f898:	cmpcc	r1, #1073741824	; 0x40000000
   1f89c:	bcc	1f8c0 <flatcc_builder_create_offset_vector@@Base+0xb8>
   1f8a0:	movw	r0, #36481	; 0x8e81
   1f8a4:	movw	r1, #32210	; 0x7dd2
   1f8a8:	movw	r3, #36508	; 0x8e9c
   1f8ac:	mov	r2, #892	; 0x37c
   1f8b0:	movt	r0, #2
   1f8b4:	movt	r1, #2
   1f8b8:	movt	r3, #2
   1f8bc:	bl	12f88 <__assert_fail@plt>
   1f8c0:	str	r1, [r0, #20]
   1f8c4:	ldr	r5, [r4, #20]
   1f8c8:	ldr	r0, [r4, #24]
   1f8cc:	add	r1, r5, r6, lsl #2
   1f8d0:	cmp	r1, r0
   1f8d4:	str	r1, [r4, #20]
   1f8d8:	bcs	1f9ac <flatcc_builder_create_offset_vector@@Base+0x1a4>
   1f8dc:	ldr	r0, [r4, #16]
   1f8e0:	adds	r0, r0, r5
   1f8e4:	beq	1fa18 <flatcc_builder_create_offset_vector@@Base+0x210>
   1f8e8:	lsl	r2, r6, #2
   1f8ec:	mov	r1, r8
   1f8f0:	bl	12eb0 <memcpy@plt>
   1f8f4:	ldr	r0, [r4, #32]
   1f8f8:	ldrh	r1, [r0, #14]
   1f8fc:	cmp	r1, #5
   1f900:	bne	1fa28 <flatcc_builder_create_offset_vector@@Base+0x220>
   1f904:	ldr	r2, [r0, #20]
   1f908:	ldr	r1, [r4, #16]
   1f90c:	mov	r0, r4
   1f910:	mov	r3, #0
   1f914:	mov	r7, #0
   1f918:	bl	20a90 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1f91c:	cmp	r0, #0
   1f920:	beq	1f838 <flatcc_builder_create_offset_vector@@Base+0x30>
   1f924:	mov	r5, r0
   1f928:	ldr	r0, [r4, #16]
   1f92c:	ldr	r2, [r4, #20]
   1f930:	mov	r1, #0
   1f934:	bl	12f40 <memset@plt>
   1f938:	ldr	r0, [r4, #32]
   1f93c:	ldr	r1, [r4, #60]	; 0x3c
   1f940:	ldr	r2, [r4, #64]	; 0x40
   1f944:	ldr	r3, [r0, #8]
   1f948:	str	r3, [r4, #20]
   1f94c:	ldr	r3, [r0]
   1f950:	str	r3, [r4, #28]
   1f954:	add	r1, r1, r3
   1f958:	ldr	r7, [r0, #4]
   1f95c:	str	r1, [r4, #16]
   1f960:	sub	r1, r2, r3
   1f964:	cmp	r1, r7
   1f968:	movhi	r1, r7
   1f96c:	mov	r7, r5
   1f970:	str	r1, [r4, #24]
   1f974:	ldrh	r1, [r4, #130]	; 0x82
   1f978:	ldrh	r2, [r4, #128]	; 0x80
   1f97c:	cmp	r2, r1
   1f980:	strhcc	r1, [r4, #128]	; 0x80
   1f984:	ldrh	r1, [r0, #12]
   1f988:	sub	r0, r0, #36	; 0x24
   1f98c:	str	r0, [r4, #32]
   1f990:	strh	r1, [r4, #130]	; 0x82
   1f994:	ldr	r0, [r4, #156]	; 0x9c
   1f998:	sub	r0, r0, #1
   1f99c:	str	r0, [r4, #156]	; 0x9c
   1f9a0:	mov	r0, r7
   1f9a4:	sub	sp, fp, #24
   1f9a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f9ac:	ldr	r2, [r4, #28]
   1f9b0:	ldr	r0, [r4, #40]	; 0x28
   1f9b4:	ldr	r7, [r4, #48]	; 0x30
   1f9b8:	mov	r3, #1
   1f9bc:	str	r3, [sp]
   1f9c0:	mov	r3, #1
   1f9c4:	add	r1, r1, r2
   1f9c8:	add	r2, r1, #1
   1f9cc:	add	r1, r4, #60	; 0x3c
   1f9d0:	blx	r7
   1f9d4:	mov	r7, #0
   1f9d8:	cmp	r0, #0
   1f9dc:	bne	1f838 <flatcc_builder_create_offset_vector@@Base+0x30>
   1f9e0:	ldr	r1, [r4, #28]
   1f9e4:	ldr	r0, [r4, #60]	; 0x3c
   1f9e8:	ldr	r3, [r4, #64]	; 0x40
   1f9ec:	ldr	r2, [r4, #32]
   1f9f0:	add	r0, r0, r1
   1f9f4:	sub	r1, r3, r1
   1f9f8:	mvn	r3, #3
   1f9fc:	cmn	r1, #4
   1fa00:	str	r0, [r4, #16]
   1fa04:	movcs	r1, r3
   1fa08:	str	r1, [r4, #24]
   1fa0c:	str	r3, [r2, #4]
   1fa10:	adds	r0, r0, r5
   1fa14:	bne	1f8e8 <flatcc_builder_create_offset_vector@@Base+0xe0>
   1fa18:	mov	r7, #0
   1fa1c:	mov	r0, r7
   1fa20:	sub	sp, fp, #24
   1fa24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fa28:	movw	r0, #33262	; 0x81ee
   1fa2c:	movw	r1, #32210	; 0x7dd2
   1fa30:	movw	r3, #34845	; 0x881d
   1fa34:	movw	r2, #1480	; 0x5c8
   1fa38:	movt	r0, #2
   1fa3c:	movt	r1, #2
   1fa40:	movt	r3, #2
   1fa44:	bl	12f88 <__assert_fail@plt>

0001fa48 <flatcc_builder_end_offset_vector@@Base>:
   1fa48:	push	{r4, r5, fp, lr}
   1fa4c:	add	fp, sp, #8
   1fa50:	mov	r4, r0
   1fa54:	ldr	r0, [r0, #32]
   1fa58:	ldrh	r1, [r0, #14]
   1fa5c:	cmp	r1, #5
   1fa60:	bne	1fb00 <flatcc_builder_end_offset_vector@@Base+0xb8>
   1fa64:	ldr	r2, [r0, #20]
   1fa68:	ldr	r1, [r4, #16]
   1fa6c:	mov	r0, r4
   1fa70:	mov	r3, #0
   1fa74:	bl	20a90 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1fa78:	mov	r5, r0
   1fa7c:	cmp	r0, #0
   1fa80:	beq	1faf8 <flatcc_builder_end_offset_vector@@Base+0xb0>
   1fa84:	ldr	r0, [r4, #16]
   1fa88:	ldr	r2, [r4, #20]
   1fa8c:	mov	r1, #0
   1fa90:	bl	12f40 <memset@plt>
   1fa94:	ldr	r0, [r4, #32]
   1fa98:	ldr	r1, [r4, #60]	; 0x3c
   1fa9c:	ldr	ip, [r4, #64]	; 0x40
   1faa0:	ldr	r3, [r0, #8]
   1faa4:	str	r3, [r4, #20]
   1faa8:	ldr	r3, [r0]
   1faac:	str	r3, [r4, #28]
   1fab0:	add	r1, r1, r3
   1fab4:	ldr	r2, [r0, #4]
   1fab8:	str	r1, [r4, #16]
   1fabc:	sub	r1, ip, r3
   1fac0:	cmp	r1, r2
   1fac4:	movhi	r1, r2
   1fac8:	str	r1, [r4, #24]
   1facc:	ldrh	r1, [r4, #130]	; 0x82
   1fad0:	ldrh	r2, [r4, #128]	; 0x80
   1fad4:	cmp	r2, r1
   1fad8:	strhcc	r1, [r4, #128]	; 0x80
   1fadc:	ldrh	r1, [r0, #12]
   1fae0:	sub	r0, r0, #36	; 0x24
   1fae4:	str	r0, [r4, #32]
   1fae8:	strh	r1, [r4, #130]	; 0x82
   1faec:	ldr	r0, [r4, #156]	; 0x9c
   1faf0:	sub	r0, r0, #1
   1faf4:	str	r0, [r4, #156]	; 0x9c
   1faf8:	mov	r0, r5
   1fafc:	pop	{r4, r5, fp, pc}
   1fb00:	movw	r0, #33262	; 0x81ee
   1fb04:	movw	r1, #32210	; 0x7dd2
   1fb08:	movw	r3, #34845	; 0x881d
   1fb0c:	movw	r2, #1480	; 0x5c8
   1fb10:	movt	r0, #2
   1fb14:	movt	r1, #2
   1fb18:	movt	r3, #2
   1fb1c:	bl	12f88 <__assert_fail@plt>

0001fb20 <flatcc_builder_start_string@@Base>:
   1fb20:	push	{r4, r5, fp, lr}
   1fb24:	add	fp, sp, #8
   1fb28:	mov	r1, #1
   1fb2c:	mov	r4, r0
   1fb30:	mov	r5, #1
   1fb34:	bl	1e780 <flatcc_builder_start_buffer@@Base+0xbc>
   1fb38:	mov	r1, r0
   1fb3c:	mvn	r0, #0
   1fb40:	cmp	r1, #0
   1fb44:	popne	{r4, r5, fp, pc}
   1fb48:	ldr	r0, [r4, #32]
   1fb4c:	mov	r2, #6
   1fb50:	str	r5, [r0, #16]
   1fb54:	mov	r0, #0
   1fb58:	ldr	r1, [r4, #32]
   1fb5c:	str	r0, [r1, #20]
   1fb60:	ldr	r1, [r4, #32]
   1fb64:	strh	r2, [r1, #14]
   1fb68:	ldr	r2, [r4, #28]
   1fb6c:	ldr	r3, [r4, #60]	; 0x3c
   1fb70:	ldr	r5, [r4, #64]	; 0x40
   1fb74:	add	r3, r3, r2
   1fb78:	sub	r2, r5, r2
   1fb7c:	str	r3, [r4, #16]
   1fb80:	mvn	r3, #3
   1fb84:	cmn	r2, #4
   1fb88:	movcs	r2, r3
   1fb8c:	str	r2, [r4, #24]
   1fb90:	str	r3, [r1, #4]
   1fb94:	pop	{r4, r5, fp, pc}

0001fb98 <flatcc_builder_reserve_table@@Base>:
   1fb98:	push	{r4, r5, r6, sl, fp, lr}
   1fb9c:	add	fp, sp, #16
   1fba0:	sub	sp, sp, #8
   1fba4:	cmn	r1, #1
   1fba8:	ble	1fc7c <flatcc_builder_reserve_table@@Base+0xe4>
   1fbac:	mov	r4, r0
   1fbb0:	ldr	r0, [r0, #32]
   1fbb4:	mov	r5, r1
   1fbb8:	ldr	r1, [r4, #56]	; 0x38
   1fbbc:	ldrh	r2, [r0, #28]
   1fbc0:	ldr	r0, [r0, #16]
   1fbc4:	add	r6, r0, r2, lsl #1
   1fbc8:	add	r0, r6, r5, lsl #1
   1fbcc:	add	r2, r0, #4
   1fbd0:	cmp	r2, r1
   1fbd4:	bls	1fbfc <flatcc_builder_reserve_table@@Base+0x64>
   1fbd8:	ldr	r0, [r4, #40]	; 0x28
   1fbdc:	ldr	ip, [r4, #48]	; 0x30
   1fbe0:	mov	r3, #0
   1fbe4:	add	r1, r4, #52	; 0x34
   1fbe8:	str	r3, [sp]
   1fbec:	mov	r3, #1
   1fbf0:	blx	ip
   1fbf4:	cmp	r0, #0
   1fbf8:	bne	1fc9c <flatcc_builder_reserve_table@@Base+0x104>
   1fbfc:	ldr	r0, [r4, #52]	; 0x34
   1fc00:	adds	r0, r0, r6
   1fc04:	str	r0, [r4, #4]
   1fc08:	mvneq	r0, #0
   1fc0c:	subeq	sp, fp, #16
   1fc10:	popeq	{r4, r5, r6, sl, fp, pc}
   1fc14:	add	r0, r0, #4
   1fc18:	lsl	r1, r5, #1
   1fc1c:	str	r0, [r4, #4]
   1fc20:	ldr	r0, [r4, #32]
   1fc24:	ldr	r3, [r4, #80]	; 0x50
   1fc28:	ldr	r5, [r0, #20]
   1fc2c:	orr	r0, r1, #1
   1fc30:	add	r2, r5, r0
   1fc34:	cmp	r2, r3
   1fc38:	bls	1fc60 <flatcc_builder_reserve_table@@Base+0xc8>
   1fc3c:	ldr	r0, [r4, #40]	; 0x28
   1fc40:	ldr	r6, [r4, #48]	; 0x30
   1fc44:	mov	r3, #3
   1fc48:	add	r1, r4, #76	; 0x4c
   1fc4c:	str	r3, [sp]
   1fc50:	mov	r3, #0
   1fc54:	blx	r6
   1fc58:	cmp	r0, #0
   1fc5c:	bne	1fc9c <flatcc_builder_reserve_table@@Base+0x104>
   1fc60:	ldr	r0, [r4, #76]	; 0x4c
   1fc64:	adds	r0, r0, r5
   1fc68:	str	r0, [r4]
   1fc6c:	mov	r0, #0
   1fc70:	mvneq	r0, #0
   1fc74:	sub	sp, fp, #16
   1fc78:	pop	{r4, r5, r6, sl, fp, pc}
   1fc7c:	movw	r0, #34101	; 0x8535
   1fc80:	movw	r1, #32210	; 0x7dd2
   1fc84:	movw	r3, #34036	; 0x84f4
   1fc88:	movw	r2, #1065	; 0x429
   1fc8c:	movt	r0, #2
   1fc90:	movt	r1, #2
   1fc94:	movt	r3, #2
   1fc98:	bl	12f88 <__assert_fail@plt>
   1fc9c:	movw	r0, #36728	; 0x8f78
   1fca0:	movw	r1, #32210	; 0x7dd2
   1fca4:	movw	r3, #36274	; 0x8db2
   1fca8:	mov	r2, #308	; 0x134
   1fcac:	movt	r0, #2
   1fcb0:	movt	r1, #2
   1fcb4:	movt	r3, #2
   1fcb8:	bl	12f88 <__assert_fail@plt>

0001fcbc <flatcc_builder_start_table@@Base>:
   1fcbc:	push	{r4, r5, r6, r7, fp, lr}
   1fcc0:	add	fp, sp, #16
   1fcc4:	sub	sp, sp, #8
   1fcc8:	mov	r6, r1
   1fccc:	mov	r1, #4
   1fcd0:	mov	r4, r0
   1fcd4:	bl	1e780 <flatcc_builder_start_buffer@@Base+0xbc>
   1fcd8:	mvn	r5, #0
   1fcdc:	cmp	r0, #0
   1fce0:	beq	1fcf0 <flatcc_builder_start_table@@Base+0x34>
   1fce4:	mov	r0, r5
   1fce8:	sub	sp, fp, #16
   1fcec:	pop	{r4, r5, r6, r7, fp, pc}
   1fcf0:	mov	r1, r4
   1fcf4:	ldr	r2, [r4, #4]
   1fcf8:	ldr	r3, [r4, #32]
   1fcfc:	ldr	r0, [r1, #52]!	; 0x34
   1fd00:	sub	r0, r2, r0
   1fd04:	str	r0, [r3, #16]
   1fd08:	ldr	r0, [r4]
   1fd0c:	ldr	r3, [r4, #76]	; 0x4c
   1fd10:	ldr	r2, [r4, #32]
   1fd14:	sub	r0, r0, r3
   1fd18:	mov	r3, #0
   1fd1c:	str	r0, [r2, #20]
   1fd20:	ldr	r0, [r4, #12]
   1fd24:	ldr	r2, [r4, #32]
   1fd28:	str	r0, [r2, #24]
   1fd2c:	ldr	r0, [r4, #32]
   1fd30:	ldrh	r2, [r4, #8]
   1fd34:	strh	r2, [r0, #28]
   1fd38:	movw	r0, #15186	; 0x3b52
   1fd3c:	strh	r3, [r4, #8]
   1fd40:	mov	r2, #3
   1fd44:	movt	r0, #12137	; 0x2f69
   1fd48:	str	r0, [r4, #12]
   1fd4c:	ldr	r0, [r4, #32]
   1fd50:	strh	r2, [r0, #14]
   1fd54:	ldrh	r2, [r0, #28]
   1fd58:	ldr	r0, [r0, #16]
   1fd5c:	add	r7, r0, r2, lsl #1
   1fd60:	add	r0, r7, r6, lsl #1
   1fd64:	add	r2, r0, #4
   1fd68:	ldr	r0, [r4, #56]	; 0x38
   1fd6c:	cmp	r2, r0
   1fd70:	bls	1fd90 <flatcc_builder_start_table@@Base+0xd4>
   1fd74:	ldr	r0, [r4, #40]	; 0x28
   1fd78:	ldr	ip, [r4, #48]	; 0x30
   1fd7c:	str	r3, [sp]
   1fd80:	mov	r3, #1
   1fd84:	blx	ip
   1fd88:	cmp	r0, #0
   1fd8c:	bne	1fe3c <flatcc_builder_start_table@@Base+0x180>
   1fd90:	ldr	r0, [r4, #52]	; 0x34
   1fd94:	adds	r0, r0, r7
   1fd98:	str	r0, [r4, #4]
   1fd9c:	beq	1fce4 <flatcc_builder_start_table@@Base+0x28>
   1fda0:	add	r0, r0, #4
   1fda4:	lsl	r1, r6, #1
   1fda8:	str	r0, [r4, #4]
   1fdac:	ldr	r0, [r4, #32]
   1fdb0:	ldr	r3, [r4, #80]	; 0x50
   1fdb4:	ldr	r6, [r0, #20]
   1fdb8:	orr	r0, r1, #1
   1fdbc:	add	r2, r6, r0
   1fdc0:	cmp	r2, r3
   1fdc4:	bls	1fdec <flatcc_builder_start_table@@Base+0x130>
   1fdc8:	ldr	r0, [r4, #40]	; 0x28
   1fdcc:	ldr	r7, [r4, #48]	; 0x30
   1fdd0:	mov	r3, #3
   1fdd4:	add	r1, r4, #76	; 0x4c
   1fdd8:	str	r3, [sp]
   1fddc:	mov	r3, #0
   1fde0:	blx	r7
   1fde4:	cmp	r0, #0
   1fde8:	bne	1fe3c <flatcc_builder_start_table@@Base+0x180>
   1fdec:	ldr	r0, [r4, #76]	; 0x4c
   1fdf0:	adds	r0, r0, r6
   1fdf4:	str	r0, [r4]
   1fdf8:	beq	1fce4 <flatcc_builder_start_table@@Base+0x28>
   1fdfc:	ldr	r0, [r4, #28]
   1fe00:	ldr	r2, [r4, #60]	; 0x3c
   1fe04:	ldr	r3, [r4, #64]	; 0x40
   1fe08:	ldr	r1, [r4, #32]
   1fe0c:	mov	r5, #0
   1fe10:	add	r2, r2, r0
   1fe14:	sub	r0, r3, r0
   1fe18:	str	r2, [r4, #16]
   1fe1c:	movw	r2, #65532	; 0xfffc
   1fe20:	cmp	r0, r2
   1fe24:	movcs	r0, r2
   1fe28:	str	r0, [r4, #24]
   1fe2c:	str	r2, [r1, #4]
   1fe30:	mov	r0, r5
   1fe34:	sub	sp, fp, #16
   1fe38:	pop	{r4, r5, r6, r7, fp, pc}
   1fe3c:	movw	r0, #36728	; 0x8f78
   1fe40:	movw	r1, #32210	; 0x7dd2
   1fe44:	movw	r3, #36274	; 0x8db2
   1fe48:	mov	r2, #308	; 0x134
   1fe4c:	movt	r0, #2
   1fe50:	movt	r1, #2
   1fe54:	movt	r3, #2
   1fe58:	bl	12f88 <__assert_fail@plt>

0001fe5c <flatcc_builder_create_vtable@@Base>:
   1fe5c:	push	{r4, r5, fp, lr}
   1fe60:	add	fp, sp, #8
   1fe64:	sub	sp, sp, #80	; 0x50
   1fe68:	mov	r3, r2
   1fe6c:	mov	r2, #0
   1fe70:	mov	r4, r0
   1fe74:	cmp	r3, #0
   1fe78:	str	r2, [sp, #12]
   1fe7c:	str	r2, [sp, #8]
   1fe80:	movne	r2, #1
   1fe84:	strne	r1, [sp, #16]
   1fe88:	strne	r3, [sp, #8]
   1fe8c:	strne	r3, [sp, #20]
   1fe90:	strne	r2, [sp, #12]
   1fe94:	ldr	r0, [r4, #152]	; 0x98
   1fe98:	cmp	r0, #0
   1fe9c:	bne	1feac <flatcc_builder_create_vtable@@Base+0x50>
   1fea0:	ldr	r0, [r4, #180]	; 0xb4
   1fea4:	cmp	r0, #0
   1fea8:	beq	1fef8 <flatcc_builder_create_vtable@@Base+0x9c>
   1feac:	cmp	r3, #0
   1feb0:	beq	1ff3c <flatcc_builder_create_vtable@@Base+0xe0>
   1feb4:	ldr	r0, [r4, #136]	; 0x88
   1feb8:	ldr	ip, [r4, #44]	; 0x2c
   1febc:	add	r1, sp, #8
   1fec0:	add	r1, r1, #8
   1fec4:	sub	r5, r0, r3
   1fec8:	ldr	r0, [r4, #36]	; 0x24
   1fecc:	str	r3, [sp]
   1fed0:	mov	r3, r5
   1fed4:	blx	ip
   1fed8:	cmp	r0, #0
   1fedc:	bne	1ff5c <flatcc_builder_create_vtable@@Base+0x100>
   1fee0:	cmp	r5, #0
   1fee4:	str	r5, [r4, #136]	; 0x88
   1fee8:	beq	1ff30 <flatcc_builder_create_vtable@@Base+0xd4>
   1feec:	add	r0, r5, #1
   1fef0:	sub	sp, fp, #8
   1fef4:	pop	{r4, r5, fp, pc}
   1fef8:	ldr	r5, [r4, #140]	; 0x8c
   1fefc:	ldr	r0, [r4, #36]	; 0x24
   1ff00:	ldr	ip, [r4, #44]	; 0x2c
   1ff04:	add	r1, r5, r3
   1ff08:	str	r1, [r4, #140]	; 0x8c
   1ff0c:	add	r1, sp, #8
   1ff10:	str	r3, [sp]
   1ff14:	mov	r3, r5
   1ff18:	add	r1, r1, #8
   1ff1c:	blx	ip
   1ff20:	cmp	r0, #0
   1ff24:	bne	1ff7c <flatcc_builder_create_vtable@@Base+0x120>
   1ff28:	adds	r0, r5, #1
   1ff2c:	bne	1fef0 <flatcc_builder_create_vtable@@Base+0x94>
   1ff30:	mov	r0, #0
   1ff34:	sub	sp, fp, #8
   1ff38:	pop	{r4, r5, fp, pc}
   1ff3c:	movw	r0, #36728	; 0x8f78
   1ff40:	movw	r1, #32210	; 0x7dd2
   1ff44:	movw	r3, #36407	; 0x8e37
   1ff48:	movw	r2, #647	; 0x287
   1ff4c:	movt	r0, #2
   1ff50:	movt	r1, #2
   1ff54:	movt	r3, #2
   1ff58:	bl	12f88 <__assert_fail@plt>
   1ff5c:	movw	r0, #36728	; 0x8f78
   1ff60:	movw	r1, #32210	; 0x7dd2
   1ff64:	movw	r3, #36407	; 0x8e37
   1ff68:	movw	r2, #651	; 0x28b
   1ff6c:	movt	r0, #2
   1ff70:	movt	r1, #2
   1ff74:	movt	r3, #2
   1ff78:	bl	12f88 <__assert_fail@plt>
   1ff7c:	movw	r0, #36728	; 0x8f78
   1ff80:	movw	r1, #32210	; 0x7dd2
   1ff84:	movw	r3, #36595	; 0x8ef3
   1ff88:	movw	r2, #677	; 0x2a5
   1ff8c:	movt	r0, #2
   1ff90:	movt	r1, #2
   1ff94:	movt	r3, #2
   1ff98:	bl	12f88 <__assert_fail@plt>

0001ff9c <flatcc_builder_create_cached_vtable@@Base>:
   1ff9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ffa0:	add	fp, sp, #28
   1ffa4:	sub	sp, sp, #20
   1ffa8:	mov	sl, r0
   1ffac:	ldr	r0, [r0, #116]	; 0x74
   1ffb0:	mov	r8, r3
   1ffb4:	mov	r5, r2
   1ffb8:	str	r1, [sp, #16]
   1ffbc:	cmp	r0, #0
   1ffc0:	beq	20064 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   1ffc4:	ldr	r1, [sl, #92]	; 0x5c
   1ffc8:	rsb	r0, r0, #32
   1ffcc:	lsr	r0, r8, r0
   1ffd0:	add	r6, r1, r0, lsl #2
   1ffd4:	cmp	r6, #0
   1ffd8:	beq	20128 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   1ffdc:	ldr	r7, [r6]
   1ffe0:	str	r6, [sp, #12]
   1ffe4:	cmp	r7, #0
   1ffe8:	beq	20138 <flatcc_builder_create_cached_vtable@@Base+0x19c>
   1ffec:	ldr	r4, [sl, #68]	; 0x44
   1fff0:	ldr	r8, [sl, #100]	; 0x64
   1fff4:	mov	r0, #0
   1fff8:	str	r0, [sp, #8]
   1fffc:	add	r9, r8, r7
   20000:	mov	r1, r4
   20004:	ldr	r0, [r9, #8]
   20008:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   2000c:	cmp	r0, r5
   20010:	bne	20028 <flatcc_builder_create_cached_vtable@@Base+0x8c>
   20014:	ldr	r0, [sp, #16]
   20018:	mov	r2, r5
   2001c:	bl	12ebc <memcmp@plt>
   20020:	cmp	r0, #0
   20024:	beq	2003c <flatcc_builder_create_cached_vtable@@Base+0xa0>
   20028:	ldr	r7, [r9, #12]!
   2002c:	cmp	r7, #0
   20030:	mov	r6, r9
   20034:	bne	1fffc <flatcc_builder_create_cached_vtable@@Base+0x60>
   20038:	b	20120 <flatcc_builder_create_cached_vtable@@Base+0x184>
   2003c:	ldr	r0, [sl, #152]	; 0x98
   20040:	ldr	r1, [r9, #4]
   20044:	cmp	r1, r0
   20048:	beq	202a4 <flatcc_builder_create_cached_vtable@@Base+0x308>
   2004c:	mov	r6, r9
   20050:	mov	r0, r9
   20054:	ldr	r7, [r6, #12]!
   20058:	cmp	r7, #0
   2005c:	bne	1fff8 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   20060:	b	2013c <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   20064:	ldr	r0, [sl, #124]	; 0x7c
   20068:	cmp	r0, #0
   2006c:	bne	202f8 <flatcc_builder_create_cached_vtable@@Base+0x35c>
   20070:	ldr	r0, [sl, #104]	; 0x68
   20074:	add	r7, sl, #100	; 0x64
   20078:	cmp	r0, #15
   2007c:	bhi	200a8 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   20080:	ldr	r0, [sl, #40]	; 0x28
   20084:	ldr	r6, [sl, #48]	; 0x30
   20088:	mov	r1, #6
   2008c:	mov	r2, #16
   20090:	mov	r3, #0
   20094:	str	r1, [sp]
   20098:	mov	r1, r7
   2009c:	blx	r6
   200a0:	cmp	r0, #0
   200a4:	bne	202d8 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   200a8:	ldr	r0, [r7]
   200ac:	mov	r7, #0
   200b0:	cmp	r0, #0
   200b4:	beq	201dc <flatcc_builder_create_cached_vtable@@Base+0x240>
   200b8:	mov	r0, #16
   200bc:	mov	r2, #5
   200c0:	add	r1, sl, #92	; 0x5c
   200c4:	mov	r3, #1
   200c8:	mov	r4, #256	; 0x100
   200cc:	str	r0, [sl, #124]	; 0x7c
   200d0:	ldr	r0, [sl, #40]	; 0x28
   200d4:	ldr	r6, [sl, #48]	; 0x30
   200d8:	str	r2, [sp]
   200dc:	mov	r2, #256	; 0x100
   200e0:	blx	r6
   200e4:	cmp	r0, #0
   200e8:	bne	201dc <flatcc_builder_create_cached_vtable@@Base+0x240>
   200ec:	ldr	r0, [sl, #96]	; 0x60
   200f0:	mov	r1, r4
   200f4:	lsl	r4, r4, #1
   200f8:	cmp	r0, r1, lsl #1
   200fc:	bcs	200f0 <flatcc_builder_create_cached_vtable@@Base+0x154>
   20100:	lsr	r1, r1, #2
   20104:	mvn	r0, #0
   20108:	mov	r2, #1
   2010c:	add	r0, r0, #1
   20110:	cmp	r1, r2, lsl r0
   20114:	bhi	2010c <flatcc_builder_create_cached_vtable@@Base+0x170>
   20118:	str	r0, [sl, #116]	; 0x74
   2011c:	b	1ffc4 <flatcc_builder_create_cached_vtable@@Base+0x28>
   20120:	ldr	r9, [sp, #8]
   20124:	b	2013c <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   20128:	mov	r7, #0
   2012c:	mov	r0, r7
   20130:	sub	sp, fp, #28
   20134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20138:	mov	r9, #0
   2013c:	ldr	r4, [sl, #124]	; 0x7c
   20140:	ldr	r0, [sl, #104]	; 0x68
   20144:	add	r7, sl, #100	; 0x64
   20148:	add	r2, r4, #16
   2014c:	cmp	r2, r0
   20150:	bls	20178 <flatcc_builder_create_cached_vtable@@Base+0x1dc>
   20154:	ldr	r0, [sl, #40]	; 0x28
   20158:	ldr	r6, [sl, #48]	; 0x30
   2015c:	mov	r1, #6
   20160:	mov	r3, #0
   20164:	str	r1, [sp]
   20168:	mov	r1, r7
   2016c:	blx	r6
   20170:	cmp	r0, #0
   20174:	bne	202d8 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   20178:	ldr	r0, [r7]
   2017c:	mov	r7, #0
   20180:	adds	r4, r0, r4
   20184:	beq	201dc <flatcc_builder_create_cached_vtable@@Base+0x240>
   20188:	ldr	r0, [sl, #124]	; 0x7c
   2018c:	ldr	r1, [sl, #152]	; 0x98
   20190:	add	r2, r0, #16
   20194:	str	r2, [sl, #124]	; 0x7c
   20198:	ldr	r2, [sp, #12]
   2019c:	str	r1, [r4, #4]
   201a0:	ldr	r1, [r2]
   201a4:	str	r1, [r4, #12]
   201a8:	ldr	r1, [sp, #16]
   201ac:	str	r0, [r2]
   201b0:	mov	r0, sl
   201b4:	mov	r2, r5
   201b8:	bl	1fe5c <flatcc_builder_create_vtable@@Base>
   201bc:	cmp	r0, #0
   201c0:	str	r0, [r4]
   201c4:	beq	201dc <flatcc_builder_create_cached_vtable@@Base+0x240>
   201c8:	cmp	r9, #0
   201cc:	beq	201e8 <flatcc_builder_create_cached_vtable@@Base+0x24c>
   201d0:	ldr	r0, [r9, #8]
   201d4:	str	r0, [r4, #8]
   201d8:	ldr	r7, [r4]
   201dc:	mov	r0, r7
   201e0:	sub	sp, fp, #28
   201e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   201e8:	ldr	r6, [sl, #120]	; 0x78
   201ec:	ldr	r0, [sl, #172]	; 0xac
   201f0:	add	r2, r6, r5
   201f4:	cmp	r0, #0
   201f8:	beq	20234 <flatcc_builder_create_cached_vtable@@Base+0x298>
   201fc:	cmp	r0, r2
   20200:	bcs	20234 <flatcc_builder_create_cached_vtable@@Base+0x298>
   20204:	ldr	r0, [sl, #116]	; 0x74
   20208:	cmp	r0, #0
   2020c:	beq	201d8 <flatcc_builder_create_cached_vtable@@Base+0x23c>
   20210:	ldr	r0, [sl, #92]	; 0x5c
   20214:	ldr	r2, [sl, #96]	; 0x60
   20218:	mov	r1, #0
   2021c:	mov	r5, #0
   20220:	bl	12f40 <memset@plt>
   20224:	mov	r0, #16
   20228:	str	r5, [sl, #120]	; 0x78
   2022c:	str	r0, [sl, #124]	; 0x7c
   20230:	b	201d8 <flatcc_builder_create_cached_vtable@@Base+0x23c>
   20234:	ldr	r0, [sl, #72]	; 0x48
   20238:	add	r7, sl, #68	; 0x44
   2023c:	cmp	r2, r0
   20240:	bls	20268 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   20244:	ldr	r0, [sl, #40]	; 0x28
   20248:	ldr	ip, [sl, #48]	; 0x30
   2024c:	mov	r1, #2
   20250:	mov	r3, #0
   20254:	str	r1, [sp]
   20258:	mov	r1, r7
   2025c:	blx	ip
   20260:	cmp	r0, #0
   20264:	bne	202d8 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   20268:	ldr	r0, [r7]
   2026c:	adds	r0, r0, r6
   20270:	beq	20294 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   20274:	ldr	r1, [sl, #120]	; 0x78
   20278:	mov	r2, r5
   2027c:	str	r1, [r4, #8]
   20280:	add	r1, r1, r5
   20284:	str	r1, [sl, #120]	; 0x78
   20288:	ldr	r1, [sp, #16]
   2028c:	bl	12eb0 <memcpy@plt>
   20290:	b	201d8 <flatcc_builder_create_cached_vtable@@Base+0x23c>
   20294:	mvn	r7, #0
   20298:	mov	r0, r7
   2029c:	sub	sp, fp, #28
   202a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   202a4:	ldr	r0, [sp, #12]
   202a8:	cmp	r6, r0
   202ac:	beq	202c8 <flatcc_builder_create_cached_vtable@@Base+0x32c>
   202b0:	mov	r1, r0
   202b4:	ldr	r0, [r9, #12]
   202b8:	str	r0, [r6]
   202bc:	ldr	r0, [r1]
   202c0:	str	r0, [r9, #12]
   202c4:	str	r7, [r1]
   202c8:	ldr	r7, [r9]
   202cc:	mov	r0, r7
   202d0:	sub	sp, fp, #28
   202d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   202d8:	movw	r0, #36728	; 0x8f78
   202dc:	movw	r1, #32210	; 0x7dd2
   202e0:	movw	r3, #36274	; 0x8db2
   202e4:	mov	r2, #308	; 0x134
   202e8:	movt	r0, #2
   202ec:	movt	r1, #2
   202f0:	movt	r3, #2
   202f4:	bl	12f88 <__assert_fail@plt>
   202f8:	movw	r0, #36668	; 0x8f3c
   202fc:	movw	r1, #32210	; 0x7dd2
   20300:	movw	r3, #36683	; 0x8f4b
   20304:	movw	r2, #342	; 0x156
   20308:	movt	r0, #2
   2030c:	movt	r1, #2
   20310:	movt	r3, #2
   20314:	bl	12f88 <__assert_fail@plt>

00020318 <flatcc_builder_create_table@@Base>:
   20318:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2031c:	add	fp, sp, #24
   20320:	sub	sp, sp, #80	; 0x50
   20324:	ldr	r5, [fp, #12]
   20328:	cmn	r5, #1
   2032c:	ble	20480 <flatcc_builder_create_table@@Base+0x168>
   20330:	ldr	ip, [fp, #16]
   20334:	tst	ip, #1
   20338:	beq	204a0 <flatcc_builder_create_table@@Base+0x188>
   2033c:	mov	r8, r0
   20340:	ldrh	r0, [r0, #128]	; 0x80
   20344:	cmp	r3, #4
   20348:	movls	r3, #4
   2034c:	cmp	r0, r3
   20350:	strhcc	r3, [r8, #128]	; 0x80
   20354:	sub	r3, r3, #1
   20358:	cmp	r5, #1
   2035c:	ldr	r4, [r8, #136]	; 0x88
   20360:	sub	r0, r4, r2
   20364:	and	r0, r0, r3
   20368:	add	r3, ip, r0
   2036c:	mvn	ip, #3
   20370:	sub	r6, ip, r2
   20374:	add	r4, r6, r4
   20378:	add	r6, r4, #1
   2037c:	sub	r3, r6, r3
   20380:	str	r3, [fp, #-28]	; 0xffffffe4
   20384:	blt	203b0 <flatcc_builder_create_table@@Base+0x98>
   20388:	ldr	r3, [fp, #8]
   2038c:	sub	r6, r4, r0
   20390:	sub	r4, ip, r6
   20394:	ldrh	r6, [r3], #2
   20398:	subs	r5, r5, #1
   2039c:	ldr	r7, [r6, r1]
   203a0:	add	r7, r4, r7
   203a4:	sub	r7, r7, r6
   203a8:	str	r7, [r6, r1]
   203ac:	bne	20394 <flatcc_builder_create_table@@Base+0x7c>
   203b0:	sub	r3, fp, #28
   203b4:	mov	r4, #4
   203b8:	cmp	r2, #0
   203bc:	str	r3, [sp, #12]
   203c0:	mov	r3, #1
   203c4:	str	r4, [sp, #4]
   203c8:	str	r4, [sp, #16]
   203cc:	str	r3, [sp, #8]
   203d0:	beq	203ec <flatcc_builder_create_table@@Base+0xd4>
   203d4:	mov	r3, #2
   203d8:	add	r4, r2, #4
   203dc:	str	r1, [sp, #20]
   203e0:	str	r2, [sp, #24]
   203e4:	str	r3, [sp, #8]
   203e8:	str	r4, [sp, #4]
   203ec:	cmp	r0, #0
   203f0:	beq	2041c <flatcc_builder_create_table@@Base+0x104>
   203f4:	add	r1, sp, #4
   203f8:	movw	r2, #31680	; 0x7bc0
   203fc:	add	r4, r4, r0
   20400:	add	r1, r1, r3, lsl #3
   20404:	add	r3, r3, #1
   20408:	movt	r2, #2
   2040c:	str	r4, [sp, #4]
   20410:	str	r2, [r1, #8]
   20414:	str	r0, [r1, #12]
   20418:	str	r3, [sp, #8]
   2041c:	cmp	r4, #0
   20420:	ble	204c0 <flatcc_builder_create_table@@Base+0x1a8>
   20424:	ldr	r0, [r8, #136]	; 0x88
   20428:	ldr	r7, [r8, #44]	; 0x2c
   2042c:	add	r1, sp, #4
   20430:	mov	r2, r3
   20434:	add	r1, r1, #8
   20438:	sub	r5, r0, r4
   2043c:	ldr	r0, [r8, #36]	; 0x24
   20440:	str	r4, [sp]
   20444:	mov	r3, r5
   20448:	blx	r7
   2044c:	cmp	r0, #0
   20450:	streq	r5, [r8, #136]	; 0x88
   20454:	moveq	r0, r5
   20458:	subeq	sp, fp, #24
   2045c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   20460:	movw	r0, #36728	; 0x8f78
   20464:	movw	r1, #32210	; 0x7dd2
   20468:	movw	r3, #36407	; 0x8e37
   2046c:	movw	r2, #651	; 0x28b
   20470:	movt	r0, #2
   20474:	movt	r1, #2
   20478:	movt	r3, #2
   2047c:	bl	12f88 <__assert_fail@plt>
   20480:	movw	r0, #34094	; 0x852e
   20484:	movw	r1, #32210	; 0x7dd2
   20488:	movw	r3, #34112	; 0x8540
   2048c:	movw	r2, #1237	; 0x4d5
   20490:	movt	r0, #2
   20494:	movt	r1, #2
   20498:	movt	r3, #2
   2049c:	bl	12f88 <__assert_fail@plt>
   204a0:	movw	r0, #34268	; 0x85dc
   204a4:	movw	r1, #32210	; 0x7dd2
   204a8:	movw	r3, #34112	; 0x8540
   204ac:	movw	r2, #1243	; 0x4db
   204b0:	movt	r0, #2
   204b4:	movt	r1, #2
   204b8:	movt	r3, #2
   204bc:	bl	12f88 <__assert_fail@plt>
   204c0:	movw	r0, #36728	; 0x8f78
   204c4:	movw	r1, #32210	; 0x7dd2
   204c8:	movw	r3, #36407	; 0x8e37
   204cc:	movw	r2, #647	; 0x287
   204d0:	movt	r0, #2
   204d4:	movt	r1, #2
   204d8:	movt	r3, #2
   204dc:	bl	12f88 <__assert_fail@plt>

000204e0 <flatcc_builder_check_required_field@@Base>:
   204e0:	ldr	r2, [r0, #32]
   204e4:	ldrh	r2, [r2, #14]
   204e8:	cmp	r2, #3
   204ec:	bne	2051c <flatcc_builder_check_required_field@@Base+0x3c>
   204f0:	ldrh	r3, [r0, #8]
   204f4:	mov	r2, #0
   204f8:	cmp	r3, r1
   204fc:	bls	20514 <flatcc_builder_check_required_field@@Base+0x34>
   20500:	ldr	r0, [r0, #4]
   20504:	add	r0, r0, r1, lsl #1
   20508:	ldrh	r2, [r0]
   2050c:	cmp	r2, #0
   20510:	movwne	r2, #1
   20514:	mov	r0, r2
   20518:	bx	lr
   2051c:	push	{fp, lr}
   20520:	mov	fp, sp
   20524:	movw	r0, #34279	; 0x85e7
   20528:	movw	r1, #32210	; 0x7dd2
   2052c:	movw	r3, #34322	; 0x8612
   20530:	movw	r2, #1272	; 0x4f8
   20534:	movt	r0, #2
   20538:	movt	r1, #2
   2053c:	movt	r3, #2
   20540:	bl	12f88 <__assert_fail@plt>

00020544 <flatcc_builder_check_union_field@@Base>:
   20544:	mov	r2, r0
   20548:	ldr	r0, [r0, #32]
   2054c:	ldrh	r0, [r0, #14]
   20550:	cmp	r0, #3
   20554:	bne	205b4 <flatcc_builder_check_union_field@@Base+0x70>
   20558:	cmp	r1, #0
   2055c:	mov	r0, #0
   20560:	ldrhne	r3, [r2, #8]
   20564:	cmpne	r3, r1
   20568:	bhi	20570 <flatcc_builder_check_union_field@@Base+0x2c>
   2056c:	bx	lr
   20570:	ldr	r0, [r2, #4]
   20574:	add	r0, r0, r1, lsl #1
   20578:	ldrh	r1, [r0, #-2]
   2057c:	cmp	r1, #0
   20580:	beq	205a4 <flatcc_builder_check_union_field@@Base+0x60>
   20584:	ldr	r2, [r2, #16]
   20588:	ldrh	r0, [r0]
   2058c:	ldrb	r1, [r2, r1]
   20590:	cmp	r1, #0
   20594:	beq	205a8 <flatcc_builder_check_union_field@@Base+0x64>
   20598:	cmp	r0, #0
   2059c:	movwne	r0, #1
   205a0:	bx	lr
   205a4:	ldrh	r0, [r0]
   205a8:	clz	r0, r0
   205ac:	lsr	r0, r0, #5
   205b0:	bx	lr
   205b4:	push	{fp, lr}
   205b8:	mov	fp, sp
   205bc:	movw	r0, #34279	; 0x85e7
   205c0:	movw	r1, #32210	; 0x7dd2
   205c4:	movw	r3, #34405	; 0x8665
   205c8:	movw	r2, #1279	; 0x4ff
   205cc:	movt	r0, #2
   205d0:	movt	r1, #2
   205d4:	movt	r3, #2
   205d8:	bl	12f88 <__assert_fail@plt>

000205dc <flatcc_builder_check_required@@Base>:
   205dc:	push	{fp, lr}
   205e0:	mov	fp, sp
   205e4:	mov	r3, r0
   205e8:	ldr	r0, [r0, #32]
   205ec:	ldrh	r0, [r0, #14]
   205f0:	cmp	r0, #3
   205f4:	bne	2064c <flatcc_builder_check_required@@Base+0x70>
   205f8:	ldrh	ip, [r3, #8]
   205fc:	mov	r0, #0
   20600:	cmp	ip, r2
   20604:	movge	r0, #1
   20608:	cmpge	r2, #1
   2060c:	bge	20614 <flatcc_builder_check_required@@Base+0x38>
   20610:	pop	{fp, pc}
   20614:	ldr	ip, [r3, #4]
   20618:	mov	lr, #0
   2061c:	b	20630 <flatcc_builder_check_required@@Base+0x54>
   20620:	add	lr, lr, #1
   20624:	add	r1, r1, #2
   20628:	cmp	lr, r2
   2062c:	popge	{fp, pc}
   20630:	ldrh	r3, [r1]
   20634:	add	r3, ip, r3, lsl #1
   20638:	ldrh	r3, [r3]
   2063c:	cmp	r3, #0
   20640:	bne	20620 <flatcc_builder_check_required@@Base+0x44>
   20644:	mov	r0, #0
   20648:	pop	{fp, pc}
   2064c:	movw	r0, #34279	; 0x85e7
   20650:	movw	r1, #32210	; 0x7dd2
   20654:	movw	r3, #34485	; 0x86b5
   20658:	movw	r2, #1297	; 0x511
   2065c:	movt	r0, #2
   20660:	movt	r1, #2
   20664:	movt	r3, #2
   20668:	bl	12f88 <__assert_fail@plt>

0002066c <flatcc_builder_end_table@@Base>:
   2066c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20670:	add	fp, sp, #24
   20674:	sub	sp, sp, #16
   20678:	mov	r4, r0
   2067c:	ldr	r0, [r0, #32]
   20680:	ldrh	r0, [r0, #14]
   20684:	cmp	r0, #3
   20688:	bne	2080c <flatcc_builder_end_table@@Base+0x1a0>
   2068c:	ldrh	r0, [r4, #8]
   20690:	ldr	r5, [r4, #4]
   20694:	mov	r1, #4
   20698:	movw	r2, #31153	; 0x79b1
   2069c:	movt	r2, #40503	; 0x9e37
   206a0:	add	r0, r1, r0, lsl #1
   206a4:	strh	r0, [r5, #-4]!
   206a8:	ldrh	r1, [r4, #20]
   206ac:	uxth	r6, r0
   206b0:	add	r1, r1, #4
   206b4:	strh	r1, [r5, #2]
   206b8:	uxth	r1, r1
   206bc:	ldr	r0, [r4, #12]
   206c0:	eor	r0, r0, r6
   206c4:	mul	r0, r0, r2
   206c8:	eor	r0, r0, r1
   206cc:	mov	r1, r5
   206d0:	mul	r3, r0, r2
   206d4:	mov	r0, r4
   206d8:	mov	r2, r6
   206dc:	str	r3, [r4, #12]
   206e0:	bl	1ff9c <flatcc_builder_create_cached_vtable@@Base>
   206e4:	cmp	r0, #0
   206e8:	beq	207fc <flatcc_builder_end_table@@Base+0x190>
   206ec:	mov	r7, r0
   206f0:	mov	r0, r5
   206f4:	mov	r1, #0
   206f8:	mov	r2, r6
   206fc:	mov	r8, #0
   20700:	bl	12f40 <memset@plt>
   20704:	ldr	r5, [r4, #32]
   20708:	ldr	r0, [r4, #76]	; 0x4c
   2070c:	ldr	r6, [r4]
   20710:	ldrh	r3, [r4, #130]	; 0x82
   20714:	ldr	r1, [r4, #16]
   20718:	ldr	r2, [r4, #20]
   2071c:	ldr	r5, [r5, #20]
   20720:	add	r0, r0, r5
   20724:	sub	r6, r6, r0
   20728:	asr	r6, r6, #1
   2072c:	stm	sp, {r0, r6, r7}
   20730:	mov	r0, r4
   20734:	bl	20318 <flatcc_builder_create_table@@Base>
   20738:	cmp	r0, #0
   2073c:	beq	207f0 <flatcc_builder_end_table@@Base+0x184>
   20740:	ldr	r1, [r4, #32]
   20744:	mov	r5, r0
   20748:	ldr	r0, [r4, #16]
   2074c:	ldr	r2, [r4, #20]
   20750:	ldr	r3, [r4, #52]	; 0x34
   20754:	ldr	r7, [r1, #24]
   20758:	str	r7, [r4, #12]
   2075c:	ldrh	r7, [r1, #28]
   20760:	strh	r7, [r4, #8]
   20764:	ldr	r7, [r1, #16]
   20768:	add	r3, r3, r7
   2076c:	str	r3, [r4, #4]
   20770:	ldr	r3, [r4, #76]	; 0x4c
   20774:	ldr	r1, [r1, #20]
   20778:	add	r1, r3, r1
   2077c:	str	r1, [r4]
   20780:	mov	r1, #0
   20784:	bl	12f40 <memset@plt>
   20788:	ldr	r0, [r4, #32]
   2078c:	ldr	r1, [r4, #60]	; 0x3c
   20790:	ldr	r2, [r4, #64]	; 0x40
   20794:	mov	r8, r5
   20798:	ldr	r3, [r0, #8]
   2079c:	str	r3, [r4, #20]
   207a0:	ldr	r3, [r0]
   207a4:	str	r3, [r4, #28]
   207a8:	add	r1, r1, r3
   207ac:	ldr	r7, [r0, #4]
   207b0:	str	r1, [r4, #16]
   207b4:	sub	r1, r2, r3
   207b8:	cmp	r1, r7
   207bc:	movhi	r1, r7
   207c0:	str	r1, [r4, #24]
   207c4:	ldrh	r1, [r4, #130]	; 0x82
   207c8:	ldrh	r2, [r4, #128]	; 0x80
   207cc:	cmp	r2, r1
   207d0:	strhcc	r1, [r4, #128]	; 0x80
   207d4:	ldrh	r1, [r0, #12]
   207d8:	sub	r0, r0, #36	; 0x24
   207dc:	str	r0, [r4, #32]
   207e0:	strh	r1, [r4, #130]	; 0x82
   207e4:	ldr	r0, [r4, #156]	; 0x9c
   207e8:	sub	r0, r0, #1
   207ec:	str	r0, [r4, #156]	; 0x9c
   207f0:	mov	r0, r8
   207f4:	sub	sp, fp, #24
   207f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   207fc:	mov	r8, #0
   20800:	mov	r0, r8
   20804:	sub	sp, fp, #24
   20808:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2080c:	movw	r0, #34279	; 0x85e7
   20810:	movw	r1, #32210	; 0x7dd2
   20814:	movw	r3, #34575	; 0x870f
   20818:	movw	r2, #1317	; 0x525
   2081c:	movt	r0, #2
   20820:	movt	r1, #2
   20824:	movt	r3, #2
   20828:	bl	12f88 <__assert_fail@plt>

0002082c <flatcc_builder_create_vector@@Base>:
   2082c:	push	{r4, r5, r6, r7, fp, lr}
   20830:	add	fp, sp, #16
   20834:	sub	sp, sp, #80	; 0x50
   20838:	mov	r7, r0
   2083c:	ldr	r0, [fp, #12]
   20840:	cmp	r2, r0
   20844:	bhi	20944 <flatcc_builder_create_vector@@Base+0x118>
   20848:	ldr	r0, [fp, #8]
   2084c:	mov	r4, r2
   20850:	ldrh	r2, [r7, #128]	; 0x80
   20854:	mov	r5, #4
   20858:	cmp	r0, #4
   2085c:	movls	r0, r5
   20860:	cmp	r2, r0
   20864:	sub	r2, fp, #20
   20868:	strhcc	r0, [r7, #128]	; 0x80
   2086c:	str	r4, [fp, #-20]	; 0xffffffec
   20870:	sub	r0, r0, #1
   20874:	ldr	ip, [r7, #136]	; 0x88
   20878:	str	r2, [sp, #12]
   2087c:	mov	r2, #1
   20880:	str	r5, [sp, #4]
   20884:	str	r5, [sp, #16]
   20888:	str	r2, [sp, #8]
   2088c:	mls	r6, r3, r4, ip
   20890:	mul	r3, r3, r4
   20894:	and	r0, r6, r0
   20898:	cmp	r3, #0
   2089c:	beq	208b8 <flatcc_builder_create_vector@@Base+0x8c>
   208a0:	mov	r2, #2
   208a4:	add	r5, r3, #4
   208a8:	str	r1, [sp, #20]
   208ac:	str	r3, [sp, #24]
   208b0:	str	r2, [sp, #8]
   208b4:	str	r5, [sp, #4]
   208b8:	cmp	r0, #0
   208bc:	beq	208e8 <flatcc_builder_create_vector@@Base+0xbc>
   208c0:	add	r1, sp, #4
   208c4:	movw	r3, #31680	; 0x7bc0
   208c8:	add	r5, r5, r0
   208cc:	add	r1, r1, r2, lsl #3
   208d0:	add	r2, r2, #1
   208d4:	movt	r3, #2
   208d8:	str	r5, [sp, #4]
   208dc:	str	r3, [r1, #8]
   208e0:	str	r0, [r1, #12]
   208e4:	str	r2, [sp, #8]
   208e8:	cmp	r5, #0
   208ec:	ble	20964 <flatcc_builder_create_vector@@Base+0x138>
   208f0:	ldr	r0, [r7, #36]	; 0x24
   208f4:	ldr	r6, [r7, #44]	; 0x2c
   208f8:	add	r1, sp, #4
   208fc:	sub	r4, ip, r5
   20900:	str	r5, [sp]
   20904:	add	r1, r1, #8
   20908:	mov	r3, r4
   2090c:	blx	r6
   20910:	cmp	r0, #0
   20914:	streq	r4, [r7, #136]	; 0x88
   20918:	moveq	r0, r4
   2091c:	subeq	sp, fp, #16
   20920:	popeq	{r4, r5, r6, r7, fp, pc}
   20924:	movw	r0, #36728	; 0x8f78
   20928:	movw	r1, #32210	; 0x7dd2
   2092c:	movw	r3, #36407	; 0x8e37
   20930:	movw	r2, #651	; 0x28b
   20934:	movt	r0, #2
   20938:	movt	r1, #2
   2093c:	movt	r3, #2
   20940:	bl	12f88 <__assert_fail@plt>
   20944:	movw	r0, #34641	; 0x8751
   20948:	movw	r1, #32210	; 0x7dd2
   2094c:	movw	r3, #34660	; 0x8764
   20950:	movw	r2, #1365	; 0x555
   20954:	movt	r0, #2
   20958:	movt	r1, #2
   2095c:	movt	r3, #2
   20960:	bl	12f88 <__assert_fail@plt>
   20964:	movw	r0, #36728	; 0x8f78
   20968:	movw	r1, #32210	; 0x7dd2
   2096c:	movw	r3, #36407	; 0x8e37
   20970:	movw	r2, #647	; 0x287
   20974:	movt	r0, #2
   20978:	movt	r1, #2
   2097c:	movt	r3, #2
   20980:	bl	12f88 <__assert_fail@plt>

00020984 <flatcc_builder_end_vector@@Base>:
   20984:	push	{r4, r5, fp, lr}
   20988:	add	fp, sp, #8
   2098c:	sub	sp, sp, #8
   20990:	mov	r4, r0
   20994:	ldr	r0, [r0, #32]
   20998:	ldrh	r1, [r0, #14]
   2099c:	cmp	r1, #4
   209a0:	bne	20a54 <flatcc_builder_end_vector@@Base+0xd0>
   209a4:	ldr	r3, [r0, #16]
   209a8:	ldr	r2, [r0, #20]
   209ac:	ldr	r0, [r0, #24]
   209b0:	ldr	r1, [r4, #16]
   209b4:	ldrh	r5, [r4, #130]	; 0x82
   209b8:	str	r0, [sp, #4]
   209bc:	mov	r0, r4
   209c0:	str	r5, [sp]
   209c4:	bl	2082c <flatcc_builder_create_vector@@Base>
   209c8:	mov	r5, r0
   209cc:	cmp	r0, #0
   209d0:	beq	20a48 <flatcc_builder_end_vector@@Base+0xc4>
   209d4:	ldr	r0, [r4, #16]
   209d8:	ldr	r2, [r4, #20]
   209dc:	mov	r1, #0
   209e0:	bl	12f40 <memset@plt>
   209e4:	ldr	r0, [r4, #32]
   209e8:	ldr	r1, [r4, #60]	; 0x3c
   209ec:	ldr	ip, [r4, #64]	; 0x40
   209f0:	ldr	r3, [r0, #8]
   209f4:	str	r3, [r4, #20]
   209f8:	ldr	r3, [r0]
   209fc:	str	r3, [r4, #28]
   20a00:	add	r1, r1, r3
   20a04:	ldr	r2, [r0, #4]
   20a08:	str	r1, [r4, #16]
   20a0c:	sub	r1, ip, r3
   20a10:	cmp	r1, r2
   20a14:	movhi	r1, r2
   20a18:	str	r1, [r4, #24]
   20a1c:	ldrh	r1, [r4, #130]	; 0x82
   20a20:	ldrh	r2, [r4, #128]	; 0x80
   20a24:	cmp	r2, r1
   20a28:	strhcc	r1, [r4, #128]	; 0x80
   20a2c:	ldrh	r1, [r0, #12]
   20a30:	sub	r0, r0, #36	; 0x24
   20a34:	str	r0, [r4, #32]
   20a38:	strh	r1, [r4, #130]	; 0x82
   20a3c:	ldr	r0, [r4, #156]	; 0x9c
   20a40:	sub	r0, r0, #1
   20a44:	str	r0, [r4, #156]	; 0x9c
   20a48:	mov	r0, r5
   20a4c:	sub	sp, fp, #8
   20a50:	pop	{r4, r5, fp, pc}
   20a54:	movw	r0, #33013	; 0x80f5
   20a58:	movw	r1, #32210	; 0x7dd2
   20a5c:	movw	r3, #34778	; 0x87da
   20a60:	movw	r2, #1400	; 0x578
   20a64:	movt	r0, #2
   20a68:	movt	r1, #2
   20a6c:	movt	r3, #2
   20a70:	bl	12f88 <__assert_fail@plt>

00020a74 <flatcc_builder_vector_count@@Base>:
   20a74:	ldr	r0, [r0, #32]
   20a78:	ldr	r0, [r0, #20]
   20a7c:	bx	lr

00020a80 <flatcc_builder_vector_edit@@Base>:
   20a80:	ldr	r0, [r0, #16]
   20a84:	bx	lr

00020a88 <flatcc_builder_create_offset_vector_direct@@Base>:
   20a88:	mov	r3, #0
   20a8c:	b	20a90 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   20a90:	push	{r4, r5, r6, r7, fp, lr}
   20a94:	add	fp, sp, #16
   20a98:	sub	sp, sp, #80	; 0x50
   20a9c:	mov	r5, #0
   20aa0:	cmn	r2, #-1073741823	; 0xc0000001
   20aa4:	bhi	20c04 <flatcc_builder_create_offset_vector_direct@@Base+0x17c>
   20aa8:	mov	r7, r0
   20aac:	ldrh	r0, [r0, #128]	; 0x80
   20ab0:	sub	r6, fp, #20
   20ab4:	mov	r4, #4
   20ab8:	mov	ip, #1
   20abc:	cmp	r0, #3
   20ac0:	movls	r0, #4
   20ac4:	strhls	r0, [r7, #128]	; 0x80
   20ac8:	str	r2, [fp, #-20]	; 0xffffffec
   20acc:	ldr	lr, [r7, #136]	; 0x88
   20ad0:	str	r6, [sp, #12]
   20ad4:	mov	r6, #0
   20ad8:	str	r4, [sp, #4]
   20adc:	str	r4, [sp, #16]
   20ae0:	str	ip, [sp, #8]
   20ae4:	cmp	r6, r2, lsl #2
   20ae8:	and	r5, lr, #3
   20aec:	beq	20b0c <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   20af0:	lsl	r6, r2, #2
   20af4:	mov	ip, #2
   20af8:	str	r1, [sp, #20]
   20afc:	add	r4, r6, #4
   20b00:	str	r6, [sp, #24]
   20b04:	str	ip, [sp, #8]
   20b08:	str	r4, [sp, #4]
   20b0c:	cmp	r5, #0
   20b10:	beq	20b3c <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   20b14:	add	r6, sp, #4
   20b18:	movw	r0, #31680	; 0x7bc0
   20b1c:	add	r4, r4, r5
   20b20:	add	r6, r6, ip, lsl #3
   20b24:	add	ip, ip, #1
   20b28:	movt	r0, #2
   20b2c:	str	r4, [sp, #4]
   20b30:	str	r0, [r6, #8]
   20b34:	str	r5, [r6, #12]
   20b38:	str	ip, [sp, #8]
   20b3c:	cmp	r2, #0
   20b40:	beq	20bc8 <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   20b44:	mvn	r0, #3
   20b48:	cmp	r3, #0
   20b4c:	sub	r0, r0, lr
   20b50:	add	r0, r0, r4
   20b54:	beq	20ba0 <flatcc_builder_create_offset_vector_direct@@Base+0x118>
   20b58:	mov	r5, #0
   20b5c:	ldr	r6, [r1, r5, lsl #2]
   20b60:	cmp	r6, #0
   20b64:	beq	20b80 <flatcc_builder_create_offset_vector_direct@@Base+0xf8>
   20b68:	add	r6, r0, r6
   20b6c:	str	r6, [r1, r5, lsl #2]
   20b70:	ldrb	r6, [r3, r5]
   20b74:	cmp	r6, #0
   20b78:	bne	20b8c <flatcc_builder_create_offset_vector_direct@@Base+0x104>
   20b7c:	b	20c10 <flatcc_builder_create_offset_vector_direct@@Base+0x188>
   20b80:	ldrb	r6, [r3, r5]
   20b84:	cmp	r6, #0
   20b88:	bne	20c50 <flatcc_builder_create_offset_vector_direct@@Base+0x1c8>
   20b8c:	add	r5, r5, #1
   20b90:	sub	r0, r0, #4
   20b94:	cmp	r5, r2
   20b98:	bcc	20b5c <flatcc_builder_create_offset_vector_direct@@Base+0xd4>
   20b9c:	b	20bc8 <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   20ba0:	mov	r3, #0
   20ba4:	ldr	r5, [r1, r3, lsl #2]
   20ba8:	cmp	r5, #0
   20bac:	beq	20c30 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   20bb0:	add	r6, r0, r5
   20bb4:	sub	r0, r0, #4
   20bb8:	str	r6, [r1, r3, lsl #2]
   20bbc:	add	r3, r3, #1
   20bc0:	cmp	r3, r2
   20bc4:	bcc	20ba4 <flatcc_builder_create_offset_vector_direct@@Base+0x11c>
   20bc8:	cmp	r4, #0
   20bcc:	ble	20c70 <flatcc_builder_create_offset_vector_direct@@Base+0x1e8>
   20bd0:	ldr	r0, [r7, #136]	; 0x88
   20bd4:	ldr	r6, [r7, #44]	; 0x2c
   20bd8:	add	r1, sp, #4
   20bdc:	mov	r2, ip
   20be0:	add	r1, r1, #8
   20be4:	sub	r5, r0, r4
   20be8:	ldr	r0, [r7, #36]	; 0x24
   20bec:	str	r4, [sp]
   20bf0:	mov	r3, r5
   20bf4:	blx	r6
   20bf8:	cmp	r0, #0
   20bfc:	bne	20c90 <flatcc_builder_create_offset_vector_direct@@Base+0x208>
   20c00:	str	r5, [r7, #136]	; 0x88
   20c04:	mov	r0, r5
   20c08:	sub	sp, fp, #16
   20c0c:	pop	{r4, r5, r6, r7, fp, pc}
   20c10:	movw	r0, #36716	; 0x8f6c
   20c14:	movw	r1, #32210	; 0x7dd2
   20c18:	movw	r3, #36730	; 0x8f7a
   20c1c:	movw	r2, #1457	; 0x5b1
   20c20:	movt	r0, #2
   20c24:	movt	r1, #2
   20c28:	movt	r3, #2
   20c2c:	bl	12f88 <__assert_fail@plt>
   20c30:	movw	r0, #36728	; 0x8f78
   20c34:	movw	r1, #32210	; 0x7dd2
   20c38:	movw	r3, #36730	; 0x8f7a
   20c3c:	movw	r2, #1463	; 0x5b7
   20c40:	movt	r0, #2
   20c44:	movt	r1, #2
   20c48:	movt	r3, #2
   20c4c:	bl	12f88 <__assert_fail@plt>
   20c50:	movw	r0, #36861	; 0x8ffd
   20c54:	movw	r1, #32210	; 0x7dd2
   20c58:	movw	r3, #36730	; 0x8f7a
   20c5c:	movw	r2, #1461	; 0x5b5
   20c60:	movt	r0, #2
   20c64:	movt	r1, #2
   20c68:	movt	r3, #2
   20c6c:	bl	12f88 <__assert_fail@plt>
   20c70:	movw	r0, #36728	; 0x8f78
   20c74:	movw	r1, #32210	; 0x7dd2
   20c78:	movw	r3, #36407	; 0x8e37
   20c7c:	movw	r2, #647	; 0x287
   20c80:	movt	r0, #2
   20c84:	movt	r1, #2
   20c88:	movt	r3, #2
   20c8c:	bl	12f88 <__assert_fail@plt>
   20c90:	movw	r0, #36728	; 0x8f78
   20c94:	movw	r1, #32210	; 0x7dd2
   20c98:	movw	r3, #36407	; 0x8e37
   20c9c:	movw	r2, #651	; 0x28b
   20ca0:	movt	r0, #2
   20ca4:	movt	r1, #2
   20ca8:	movt	r3, #2
   20cac:	bl	12f88 <__assert_fail@plt>

00020cb0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   20cb0:	push	{r4, r5, fp, lr}
   20cb4:	add	fp, sp, #8
   20cb8:	mov	r4, r0
   20cbc:	ldr	r0, [r0, #32]
   20cc0:	mov	r3, r1
   20cc4:	ldrh	r1, [r0, #14]
   20cc8:	cmp	r1, #5
   20ccc:	bne	20d68 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   20cd0:	ldr	r2, [r0, #20]
   20cd4:	ldr	r1, [r4, #16]
   20cd8:	mov	r0, r4
   20cdc:	bl	20a90 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   20ce0:	mov	r5, r0
   20ce4:	cmp	r0, #0
   20ce8:	beq	20d60 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   20cec:	ldr	r0, [r4, #16]
   20cf0:	ldr	r2, [r4, #20]
   20cf4:	mov	r1, #0
   20cf8:	bl	12f40 <memset@plt>
   20cfc:	ldr	r0, [r4, #32]
   20d00:	ldr	r1, [r4, #60]	; 0x3c
   20d04:	ldr	ip, [r4, #64]	; 0x40
   20d08:	ldr	r3, [r0, #8]
   20d0c:	str	r3, [r4, #20]
   20d10:	ldr	r3, [r0]
   20d14:	str	r3, [r4, #28]
   20d18:	add	r1, r1, r3
   20d1c:	ldr	r2, [r0, #4]
   20d20:	str	r1, [r4, #16]
   20d24:	sub	r1, ip, r3
   20d28:	cmp	r1, r2
   20d2c:	movhi	r1, r2
   20d30:	str	r1, [r4, #24]
   20d34:	ldrh	r1, [r4, #130]	; 0x82
   20d38:	ldrh	r2, [r4, #128]	; 0x80
   20d3c:	cmp	r2, r1
   20d40:	strhcc	r1, [r4, #128]	; 0x80
   20d44:	ldrh	r1, [r0, #12]
   20d48:	sub	r0, r0, #36	; 0x24
   20d4c:	str	r0, [r4, #32]
   20d50:	strh	r1, [r4, #130]	; 0x82
   20d54:	ldr	r0, [r4, #156]	; 0x9c
   20d58:	sub	r0, r0, #1
   20d5c:	str	r0, [r4, #156]	; 0x9c
   20d60:	mov	r0, r5
   20d64:	pop	{r4, r5, fp, pc}
   20d68:	movw	r0, #33262	; 0x81ee
   20d6c:	movw	r1, #32210	; 0x7dd2
   20d70:	movw	r3, #34919	; 0x8867
   20d74:	movw	r2, #1493	; 0x5d5
   20d78:	movt	r0, #2
   20d7c:	movt	r1, #2
   20d80:	movt	r3, #2
   20d84:	bl	12f88 <__assert_fail@plt>

00020d88 <flatcc_builder_offset_vector_edit@@Base>:
   20d88:	ldr	r0, [r0, #16]
   20d8c:	bx	lr

00020d90 <flatcc_builder_offset_vector_count@@Base>:
   20d90:	ldr	r0, [r0, #32]
   20d94:	ldr	r0, [r0, #20]
   20d98:	bx	lr

00020d9c <flatcc_builder_table_add_union@@Base>:
   20d9c:	push	{r4, r5, r6, r7, fp, lr}
   20da0:	add	fp, sp, #16
   20da4:	mov	r5, r0
   20da8:	ldr	r0, [r0, #32]
   20dac:	ldrh	r0, [r0, #14]
   20db0:	cmp	r0, #3
   20db4:	bne	20e3c <flatcc_builder_table_add_union@@Base+0xa0>
   20db8:	mov	r7, r3
   20dbc:	mov	r4, r2
   20dc0:	mov	r6, r1
   20dc4:	cmp	r3, #0
   20dc8:	beq	20dd8 <flatcc_builder_table_add_union@@Base+0x3c>
   20dcc:	uxtb	r0, r4
   20dd0:	cmp	r0, #0
   20dd4:	beq	20e5c <flatcc_builder_table_add_union@@Base+0xc0>
   20dd8:	cmp	r7, #0
   20ddc:	beq	20df8 <flatcc_builder_table_add_union@@Base+0x5c>
   20de0:	mov	r0, r5
   20de4:	mov	r1, r6
   20de8:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   20dec:	cmp	r0, #0
   20df0:	beq	20e7c <flatcc_builder_table_add_union@@Base+0xe0>
   20df4:	str	r7, [r0]
   20df8:	sub	r1, r6, #1
   20dfc:	mov	r0, r5
   20e00:	mov	r2, #1
   20e04:	mov	r3, #1
   20e08:	bl	2102c <flatcc_builder_table_add@@Base>
   20e0c:	cmp	r0, #0
   20e10:	strbne	r4, [r0]
   20e14:	movne	r0, #0
   20e18:	popne	{r4, r5, r6, r7, fp, pc}
   20e1c:	movw	r0, #35165	; 0x895d
   20e20:	movw	r1, #32210	; 0x7dd2
   20e24:	movw	r3, #35033	; 0x88d9
   20e28:	movw	r2, #1526	; 0x5f6
   20e2c:	movt	r0, #2
   20e30:	movt	r1, #2
   20e34:	movt	r3, #2
   20e38:	bl	12f88 <__assert_fail@plt>
   20e3c:	movw	r0, #34279	; 0x85e7
   20e40:	movw	r1, #32210	; 0x7dd2
   20e44:	movw	r3, #35033	; 0x88d9
   20e48:	movw	r2, #1518	; 0x5ee
   20e4c:	movt	r0, #2
   20e50:	movt	r1, #2
   20e54:	movt	r3, #2
   20e58:	bl	12f88 <__assert_fail@plt>
   20e5c:	movw	r0, #35121	; 0x8931
   20e60:	movw	r1, #32210	; 0x7dd2
   20e64:	movw	r3, #35033	; 0x88d9
   20e68:	movw	r2, #1519	; 0x5ef
   20e6c:	movt	r0, #2
   20e70:	movt	r1, #2
   20e74:	movt	r3, #2
   20e78:	bl	12f88 <__assert_fail@plt>
   20e7c:	movw	r0, #35155	; 0x8953
   20e80:	movw	r1, #32210	; 0x7dd2
   20e84:	movw	r3, #35033	; 0x88d9
   20e88:	movw	r2, #1522	; 0x5f2
   20e8c:	movt	r0, #2
   20e90:	movt	r1, #2
   20e94:	movt	r3, #2
   20e98:	bl	12f88 <__assert_fail@plt>

00020e9c <flatcc_builder_table_add_offset@@Base>:
   20e9c:	push	{r4, r5, r6, r7, fp, lr}
   20ea0:	add	fp, sp, #16
   20ea4:	sub	sp, sp, #8
   20ea8:	mov	r4, r0
   20eac:	ldr	r0, [r0, #32]
   20eb0:	ldrh	r0, [r0, #14]
   20eb4:	cmp	r0, #3
   20eb8:	bne	20fcc <flatcc_builder_table_add_offset@@Base+0x130>
   20ebc:	movw	r0, #32765	; 0x7ffd
   20ec0:	mov	r5, r1
   20ec4:	cmp	r1, r0
   20ec8:	bcs	20fec <flatcc_builder_table_add_offset@@Base+0x150>
   20ecc:	ldr	r0, [r4, #4]
   20ed0:	add	r1, r0, r5, lsl #1
   20ed4:	ldrh	r1, [r1]
   20ed8:	cmp	r1, #0
   20edc:	bne	2100c <flatcc_builder_table_add_offset@@Base+0x170>
   20ee0:	ldr	r2, [r4, #20]
   20ee4:	ldr	r1, [r4, #12]
   20ee8:	ldr	r3, [r4, #24]
   20eec:	add	r2, r2, #3
   20ef0:	eor	r1, r1, r5
   20ef4:	bic	r6, r2, #3
   20ef8:	movw	r2, #31153	; 0x79b1
   20efc:	movt	r2, #40503	; 0x9e37
   20f00:	add	r7, r6, #4
   20f04:	mul	r1, r1, r2
   20f08:	cmp	r7, r3
   20f0c:	str	r7, [r4, #20]
   20f10:	eor	r1, r1, #4
   20f14:	mul	r1, r1, r2
   20f18:	str	r1, [r4, #12]
   20f1c:	bls	20f90 <flatcc_builder_table_add_offset@@Base+0xf4>
   20f20:	ldr	r1, [r4, #28]
   20f24:	ldr	r0, [r4, #40]	; 0x28
   20f28:	ldr	ip, [r4, #48]	; 0x30
   20f2c:	mov	r2, #1
   20f30:	mov	r3, #1
   20f34:	str	r2, [sp]
   20f38:	add	r2, r1, r7
   20f3c:	add	r1, r4, #60	; 0x3c
   20f40:	blx	ip
   20f44:	mov	r1, r0
   20f48:	mov	r0, #0
   20f4c:	cmp	r1, #0
   20f50:	beq	20f5c <flatcc_builder_table_add_offset@@Base+0xc0>
   20f54:	sub	sp, fp, #16
   20f58:	pop	{r4, r5, r6, r7, fp, pc}
   20f5c:	ldr	r0, [r4, #28]
   20f60:	ldr	r2, [r4, #60]	; 0x3c
   20f64:	ldr	r3, [r4, #64]	; 0x40
   20f68:	ldr	r1, [r4, #32]
   20f6c:	add	r2, r2, r0
   20f70:	sub	r0, r3, r0
   20f74:	str	r2, [r4, #16]
   20f78:	movw	r2, #65532	; 0xfffc
   20f7c:	cmp	r0, r2
   20f80:	movcs	r0, r2
   20f84:	str	r0, [r4, #24]
   20f88:	str	r2, [r1, #4]
   20f8c:	ldr	r0, [r4, #4]
   20f90:	uxth	r1, r5
   20f94:	add	r0, r0, r1, lsl #1
   20f98:	strh	r7, [r0]
   20f9c:	ldrh	r0, [r4, #8]
   20fa0:	cmp	r0, r1
   20fa4:	addls	r0, r5, #1
   20fa8:	strhls	r0, [r4, #8]
   20fac:	ldr	r0, [r4]
   20fb0:	add	r1, r0, #2
   20fb4:	str	r1, [r4]
   20fb8:	strh	r6, [r0]
   20fbc:	ldr	r0, [r4, #16]
   20fc0:	add	r0, r0, r6
   20fc4:	sub	sp, fp, #16
   20fc8:	pop	{r4, r5, r6, r7, fp, pc}
   20fcc:	movw	r0, #34279	; 0x85e7
   20fd0:	movw	r1, #32210	; 0x7dd2
   20fd4:	movw	r3, #36059	; 0x8cdb
   20fd8:	movw	r2, #1811	; 0x713
   20fdc:	movt	r0, #2
   20fe0:	movt	r1, #2
   20fe4:	movt	r3, #2
   20fe8:	bl	12f88 <__assert_fail@plt>
   20fec:	movw	r0, #35931	; 0x8c5b
   20ff0:	movw	r1, #32210	; 0x7dd2
   20ff4:	movw	r3, #36059	; 0x8cdb
   20ff8:	movw	r2, #1812	; 0x714
   20ffc:	movt	r0, #2
   21000:	movt	r1, #2
   21004:	movt	r3, #2
   21008:	bl	12f88 <__assert_fail@plt>
   2100c:	movw	r0, #36728	; 0x8f78
   21010:	movw	r1, #32210	; 0x7dd2
   21014:	movw	r3, #36059	; 0x8cdb
   21018:	movw	r2, #1819	; 0x71b
   2101c:	movt	r0, #2
   21020:	movt	r1, #2
   21024:	movt	r3, #2
   21028:	bl	12f88 <__assert_fail@plt>

0002102c <flatcc_builder_table_add@@Base>:
   2102c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21030:	add	fp, sp, #24
   21034:	sub	sp, sp, #8
   21038:	mov	r4, r0
   2103c:	ldr	r0, [r0, #32]
   21040:	ldrh	r0, [r0, #14]
   21044:	cmp	r0, #3
   21048:	bne	21168 <flatcc_builder_table_add@@Base+0x13c>
   2104c:	movw	r0, #32765	; 0x7ffd
   21050:	mov	r8, r1
   21054:	cmp	r1, r0
   21058:	bcs	21188 <flatcc_builder_table_add@@Base+0x15c>
   2105c:	ldrh	r0, [r4, #130]	; 0x82
   21060:	cmp	r0, r3
   21064:	strhcc	r3, [r4, #130]	; 0x82
   21068:	ldr	r0, [r4, #4]
   2106c:	add	r1, r0, r8, lsl #1
   21070:	ldrh	r1, [r1]
   21074:	cmp	r1, #0
   21078:	bne	211a8 <flatcc_builder_table_add@@Base+0x17c>
   2107c:	ldr	r1, [r4, #12]
   21080:	movw	r7, #31153	; 0x79b1
   21084:	ldr	r6, [r4, #20]
   21088:	ldr	r5, [r4, #24]
   2108c:	movt	r7, #40503	; 0x9e37
   21090:	eor	r1, r1, r8
   21094:	mul	r1, r1, r7
   21098:	eor	r1, r1, r2
   2109c:	mul	r1, r1, r7
   210a0:	str	r1, [r4, #12]
   210a4:	add	r1, r3, r6
   210a8:	rsb	r3, r3, #0
   210ac:	sub	r1, r1, #1
   210b0:	and	r6, r1, r3
   210b4:	add	r1, r6, r2
   210b8:	cmp	r1, r5
   210bc:	str	r1, [r4, #20]
   210c0:	bcc	21138 <flatcc_builder_table_add@@Base+0x10c>
   210c4:	ldr	r2, [r4, #28]
   210c8:	ldr	r0, [r4, #40]	; 0x28
   210cc:	ldr	r7, [r4, #48]	; 0x30
   210d0:	mov	r3, #1
   210d4:	str	r3, [sp]
   210d8:	mov	r3, #1
   210dc:	add	r1, r1, r2
   210e0:	add	r2, r1, #1
   210e4:	add	r1, r4, #60	; 0x3c
   210e8:	blx	r7
   210ec:	mov	r1, r0
   210f0:	mov	r0, #0
   210f4:	cmp	r1, #0
   210f8:	beq	21104 <flatcc_builder_table_add@@Base+0xd8>
   210fc:	sub	sp, fp, #24
   21100:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21104:	ldr	r0, [r4, #28]
   21108:	ldr	r2, [r4, #60]	; 0x3c
   2110c:	ldr	r3, [r4, #64]	; 0x40
   21110:	ldr	r1, [r4, #32]
   21114:	add	r2, r2, r0
   21118:	sub	r0, r3, r0
   2111c:	str	r2, [r4, #16]
   21120:	movw	r2, #65532	; 0xfffc
   21124:	cmp	r0, r2
   21128:	movcs	r0, r2
   2112c:	str	r0, [r4, #24]
   21130:	str	r2, [r1, #4]
   21134:	ldr	r0, [r4, #4]
   21138:	uxth	r1, r8
   2113c:	add	r2, r6, #4
   21140:	add	r0, r0, r1, lsl #1
   21144:	strh	r2, [r0]
   21148:	ldrh	r0, [r4, #8]
   2114c:	cmp	r0, r1
   21150:	addls	r0, r8, #1
   21154:	strhls	r0, [r4, #8]
   21158:	ldr	r0, [r4, #16]
   2115c:	add	r0, r0, r6
   21160:	sub	sp, fp, #24
   21164:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21168:	movw	r0, #34279	; 0x85e7
   2116c:	movw	r1, #32210	; 0x7dd2
   21170:	movw	r3, #35857	; 0x8c11
   21174:	movw	r2, #1773	; 0x6ed
   21178:	movt	r0, #2
   2117c:	movt	r1, #2
   21180:	movt	r3, #2
   21184:	bl	12f88 <__assert_fail@plt>
   21188:	movw	r0, #35931	; 0x8c5b
   2118c:	movw	r1, #32210	; 0x7dd2
   21190:	movw	r3, #35857	; 0x8c11
   21194:	movw	r2, #1774	; 0x6ee
   21198:	movt	r0, #2
   2119c:	movt	r1, #2
   211a0:	movt	r3, #2
   211a4:	bl	12f88 <__assert_fail@plt>
   211a8:	movw	r0, #36728	; 0x8f78
   211ac:	movw	r1, #32210	; 0x7dd2
   211b0:	movw	r3, #35857	; 0x8c11
   211b4:	movw	r2, #1784	; 0x6f8
   211b8:	movt	r0, #2
   211bc:	movt	r1, #2
   211c0:	movt	r3, #2
   211c4:	bl	12f88 <__assert_fail@plt>

000211c8 <flatcc_builder_table_add_union_vector@@Base>:
   211c8:	push	{r4, r5, r6, r7, fp, lr}
   211cc:	add	fp, sp, #16
   211d0:	mov	r6, r0
   211d4:	ldr	r0, [r0, #32]
   211d8:	ldrh	r0, [r0, #14]
   211dc:	cmp	r0, #3
   211e0:	bne	21248 <flatcc_builder_table_add_union_vector@@Base+0x80>
   211e4:	clz	r0, r3
   211e8:	mov	r5, r1
   211ec:	clz	r1, r2
   211f0:	mov	r4, r3
   211f4:	mov	r7, r2
   211f8:	lsr	r0, r0, #5
   211fc:	lsr	r1, r1, #5
   21200:	cmp	r1, r0
   21204:	bne	21268 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   21208:	cmp	r7, #0
   2120c:	beq	21240 <flatcc_builder_table_add_union_vector@@Base+0x78>
   21210:	sub	r1, r5, #1
   21214:	mov	r0, r6
   21218:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   2121c:	cmp	r0, #0
   21220:	beq	21288 <flatcc_builder_table_add_union_vector@@Base+0xc0>
   21224:	str	r7, [r0]
   21228:	mov	r0, r6
   2122c:	mov	r1, r5
   21230:	bl	20e9c <flatcc_builder_table_add_offset@@Base>
   21234:	cmp	r0, #0
   21238:	beq	212a8 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   2123c:	str	r4, [r0]
   21240:	mov	r0, #0
   21244:	pop	{r4, r5, r6, r7, fp, pc}
   21248:	movw	r0, #34279	; 0x85e7
   2124c:	movw	r1, #32210	; 0x7dd2
   21250:	movw	r3, #35177	; 0x8969
   21254:	mov	r2, #1536	; 0x600
   21258:	movt	r0, #2
   2125c:	movt	r1, #2
   21260:	movt	r3, #2
   21264:	bl	12f88 <__assert_fail@plt>
   21268:	movw	r0, #35276	; 0x89cc
   2126c:	movw	r1, #32210	; 0x7dd2
   21270:	movw	r3, #35177	; 0x8969
   21274:	movw	r2, #1537	; 0x601
   21278:	movt	r0, #2
   2127c:	movt	r1, #2
   21280:	movt	r3, #2
   21284:	bl	12f88 <__assert_fail@plt>
   21288:	movw	r0, #35155	; 0x8953
   2128c:	movw	r1, #32210	; 0x7dd2
   21290:	movw	r3, #35177	; 0x8969
   21294:	movw	r2, #1540	; 0x604
   21298:	movt	r0, #2
   2129c:	movt	r1, #2
   212a0:	movt	r3, #2
   212a4:	bl	12f88 <__assert_fail@plt>
   212a8:	movw	r0, #35155	; 0x8953
   212ac:	movw	r1, #32210	; 0x7dd2
   212b0:	movw	r3, #35177	; 0x8969
   212b4:	movw	r2, #1544	; 0x608
   212b8:	movt	r0, #2
   212bc:	movt	r1, #2
   212c0:	movt	r3, #2
   212c4:	bl	12f88 <__assert_fail@plt>

000212c8 <flatcc_builder_create_union_vector@@Base>:
   212c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   212cc:	add	fp, sp, #28
   212d0:	sub	sp, sp, #12
   212d4:	mov	r7, #0
   212d8:	mov	r4, r1
   212dc:	mov	r5, r0
   212e0:	mov	sl, r3
   212e4:	mov	r9, r2
   212e8:	mov	r6, #4
   212ec:	str	r7, [r0]
   212f0:	str	r7, [r0, #4]
   212f4:	mov	r0, r1
   212f8:	mov	r1, #4
   212fc:	bl	1e780 <flatcc_builder_start_buffer@@Base+0xbc>
   21300:	cmp	r0, #0
   21304:	beq	21310 <flatcc_builder_create_union_vector@@Base+0x48>
   21308:	sub	sp, fp, #28
   2130c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21310:	ldr	r0, [r4, #32]
   21314:	mov	r1, #5
   21318:	str	r6, [r0, #16]
   2131c:	ldr	r0, [r4, #32]
   21320:	str	r7, [r0, #20]
   21324:	ldr	r0, [r4, #32]
   21328:	strh	r1, [r0, #14]
   2132c:	ldr	r1, [r4, #28]
   21330:	ldr	r2, [r4, #60]	; 0x3c
   21334:	ldr	r3, [r4, #64]	; 0x40
   21338:	add	r2, r2, r1
   2133c:	sub	r1, r3, r1
   21340:	str	r2, [r4, #16]
   21344:	mvn	r2, #3
   21348:	cmn	r1, #4
   2134c:	movcs	r1, r2
   21350:	str	r1, [r4, #24]
   21354:	str	r2, [r0, #4]
   21358:	ldr	r1, [r0, #20]
   2135c:	adds	r1, r1, sl
   21360:	cmpcc	r1, #1073741824	; 0x40000000
   21364:	bcc	21388 <flatcc_builder_create_union_vector@@Base+0xc0>
   21368:	movw	r0, #36481	; 0x8e81
   2136c:	movw	r1, #32210	; 0x7dd2
   21370:	movw	r3, #36508	; 0x8e9c
   21374:	mov	r2, #892	; 0x37c
   21378:	movt	r0, #2
   2137c:	movt	r1, #2
   21380:	movt	r3, #2
   21384:	bl	12f88 <__assert_fail@plt>
   21388:	str	r1, [r0, #20]
   2138c:	ldr	r7, [r4, #20]
   21390:	ldr	r0, [r4, #24]
   21394:	add	r1, r7, sl, lsl #2
   21398:	cmp	r1, r0
   2139c:	str	r1, [r4, #20]
   213a0:	bcs	213b4 <flatcc_builder_create_union_vector@@Base+0xec>
   213a4:	ldr	r1, [r4, #16]
   213a8:	adds	r2, r1, r7
   213ac:	bne	2141c <flatcc_builder_create_union_vector@@Base+0x154>
   213b0:	b	21308 <flatcc_builder_create_union_vector@@Base+0x40>
   213b4:	ldr	r2, [r4, #28]
   213b8:	ldr	r0, [r4, #40]	; 0x28
   213bc:	ldr	r6, [r4, #48]	; 0x30
   213c0:	mov	r3, #1
   213c4:	str	r3, [sp]
   213c8:	mov	r3, #1
   213cc:	add	r1, r1, r2
   213d0:	add	r2, r1, #1
   213d4:	add	r1, r4, #60	; 0x3c
   213d8:	blx	r6
   213dc:	cmp	r0, #0
   213e0:	bne	21308 <flatcc_builder_create_union_vector@@Base+0x40>
   213e4:	ldr	r0, [r4, #28]
   213e8:	ldr	r1, [r4, #60]	; 0x3c
   213ec:	ldr	r3, [r4, #64]	; 0x40
   213f0:	ldr	r2, [r4, #32]
   213f4:	add	r1, r1, r0
   213f8:	sub	r0, r3, r0
   213fc:	mvn	r3, #3
   21400:	cmn	r0, #4
   21404:	str	r1, [r4, #16]
   21408:	movcs	r0, r3
   2140c:	str	r0, [r4, #24]
   21410:	str	r3, [r2, #4]
   21414:	adds	r2, r1, r7
   21418:	beq	21308 <flatcc_builder_create_union_vector@@Base+0x40>
   2141c:	ldr	r7, [r4, #20]
   21420:	add	r2, r7, sl
   21424:	cmp	r2, r0
   21428:	str	r2, [r4, #20]
   2142c:	bcc	21490 <flatcc_builder_create_union_vector@@Base+0x1c8>
   21430:	ldr	r1, [r4, #28]
   21434:	ldr	r0, [r4, #40]	; 0x28
   21438:	ldr	r6, [r4, #48]	; 0x30
   2143c:	mov	r3, #1
   21440:	str	r3, [sp]
   21444:	mov	r3, #1
   21448:	add	r1, r2, r1
   2144c:	add	r2, r1, #1
   21450:	add	r1, r4, #60	; 0x3c
   21454:	blx	r6
   21458:	cmp	r0, #0
   2145c:	bne	21308 <flatcc_builder_create_union_vector@@Base+0x40>
   21460:	ldr	r0, [r4, #28]
   21464:	ldr	r1, [r4, #60]	; 0x3c
   21468:	ldr	r3, [r4, #64]	; 0x40
   2146c:	ldr	r2, [r4, #32]
   21470:	add	r1, r1, r0
   21474:	sub	r0, r3, r0
   21478:	mvn	r3, #3
   2147c:	cmn	r0, #4
   21480:	str	r1, [r4, #16]
   21484:	movcs	r0, r3
   21488:	str	r0, [r4, #24]
   2148c:	str	r3, [r2, #4]
   21490:	adds	r8, r1, r7
   21494:	beq	21308 <flatcc_builder_create_union_vector@@Base+0x40>
   21498:	cmp	sl, #0
   2149c:	beq	214cc <flatcc_builder_create_union_vector@@Base+0x204>
   214a0:	add	r0, r9, #4
   214a4:	mov	r2, sl
   214a8:	mov	r3, r1
   214ac:	mov	r7, r8
   214b0:	ldrb	r6, [r0, #-4]
   214b4:	subs	r2, r2, #1
   214b8:	strb	r6, [r7], #1
   214bc:	ldr	r6, [r0]
   214c0:	add	r0, r0, #8
   214c4:	str	r6, [r3], #4
   214c8:	bne	214b0 <flatcc_builder_create_union_vector@@Base+0x1e8>
   214cc:	mov	r0, r4
   214d0:	mov	r2, sl
   214d4:	mov	r3, r8
   214d8:	bl	20a90 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   214dc:	mov	r7, r0
   214e0:	mov	r9, #0
   214e4:	cmp	r0, #0
   214e8:	beq	21514 <flatcc_builder_create_union_vector@@Base+0x24c>
   214ec:	mvn	r0, #0
   214f0:	mov	r1, #1
   214f4:	mov	r2, sl
   214f8:	mov	r3, #1
   214fc:	str	r1, [sp]
   21500:	str	r0, [sp, #4]
   21504:	mov	r0, r4
   21508:	mov	r1, r8
   2150c:	bl	2082c <flatcc_builder_create_vector@@Base>
   21510:	b	21518 <flatcc_builder_create_union_vector@@Base+0x250>
   21514:	mov	r0, #0
   21518:	orr	r1, r9, r7
   2151c:	stm	r5, {r0, r1}
   21520:	mov	r1, #0
   21524:	ldr	r0, [r4, #16]
   21528:	ldr	r2, [r4, #20]
   2152c:	bl	12f40 <memset@plt>
   21530:	ldr	r0, [r4, #32]
   21534:	ldr	r1, [r4, #60]	; 0x3c
   21538:	ldr	r2, [r4, #64]	; 0x40
   2153c:	ldr	r3, [r0, #8]
   21540:	str	r3, [r4, #20]
   21544:	ldr	r3, [r0]
   21548:	str	r3, [r4, #28]
   2154c:	add	r1, r1, r3
   21550:	ldr	r7, [r0, #4]
   21554:	str	r1, [r4, #16]
   21558:	sub	r1, r2, r3
   2155c:	cmp	r1, r7
   21560:	movhi	r1, r7
   21564:	str	r1, [r4, #24]
   21568:	ldrh	r1, [r4, #130]	; 0x82
   2156c:	ldrh	r2, [r4, #128]	; 0x80
   21570:	cmp	r2, r1
   21574:	strhcc	r1, [r4, #128]	; 0x80
   21578:	ldrh	r1, [r0, #12]
   2157c:	sub	r0, r0, #36	; 0x24
   21580:	str	r0, [r4, #32]
   21584:	strh	r1, [r4, #130]	; 0x82
   21588:	ldr	r0, [r4, #156]	; 0x9c
   2158c:	sub	r0, r0, #1
   21590:	str	r0, [r4, #156]	; 0x9c
   21594:	sub	sp, fp, #28
   21598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002159c <flatcc_builder_create_union_vector_direct@@Base>:
   2159c:	push	{r4, r5, r6, r7, fp, lr}
   215a0:	add	fp, sp, #16
   215a4:	sub	sp, sp, #8
   215a8:	ldr	r7, [fp, #8]
   215ac:	mov	r5, r2
   215b0:	mov	r4, r0
   215b4:	mov	r0, #0
   215b8:	mov	r6, r1
   215bc:	str	r0, [r4]
   215c0:	str	r0, [r4, #4]
   215c4:	mov	r0, r1
   215c8:	mov	r1, r3
   215cc:	mov	r3, r5
   215d0:	mov	r2, r7
   215d4:	bl	20a90 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   215d8:	cmp	r0, #0
   215dc:	str	r0, [r4, #4]
   215e0:	beq	2160c <flatcc_builder_create_union_vector_direct@@Base+0x70>
   215e4:	mvn	r0, #0
   215e8:	mov	r1, #1
   215ec:	mov	r2, r7
   215f0:	mov	r3, #1
   215f4:	str	r1, [sp]
   215f8:	str	r0, [sp, #4]
   215fc:	mov	r0, r6
   21600:	mov	r1, r5
   21604:	bl	2082c <flatcc_builder_create_vector@@Base>
   21608:	str	r0, [r4]
   2160c:	sub	sp, fp, #16
   21610:	pop	{r4, r5, r6, r7, fp, pc}

00021614 <flatcc_builder_start_union_vector@@Base>:
   21614:	push	{r4, sl, fp, lr}
   21618:	add	fp, sp, #8
   2161c:	mov	r1, #4
   21620:	mov	r4, r0
   21624:	bl	1e780 <flatcc_builder_start_buffer@@Base+0xbc>
   21628:	mov	r1, r0
   2162c:	mvn	r0, #0
   21630:	cmp	r1, #0
   21634:	popne	{r4, sl, fp, pc}
   21638:	ldr	r0, [r4, #32]
   2163c:	mov	r1, #8
   21640:	mov	r2, #7
   21644:	str	r1, [r0, #16]
   21648:	mov	r0, #0
   2164c:	ldr	r1, [r4, #32]
   21650:	str	r0, [r1, #20]
   21654:	ldr	r1, [r4, #32]
   21658:	strh	r2, [r1, #14]
   2165c:	ldr	r2, [r4, #28]
   21660:	ldr	r3, [r4, #60]	; 0x3c
   21664:	ldr	ip, [r4, #64]	; 0x40
   21668:	add	r3, r3, r2
   2166c:	sub	r2, ip, r2
   21670:	str	r3, [r4, #16]
   21674:	mvn	r3, #3
   21678:	cmn	r2, #4
   2167c:	movcs	r2, r3
   21680:	str	r2, [r4, #24]
   21684:	str	r3, [r1, #4]
   21688:	pop	{r4, sl, fp, pc}

0002168c <flatcc_builder_end_union_vector@@Base>:
   2168c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21690:	add	fp, sp, #28
   21694:	sub	sp, sp, #12
   21698:	mov	sl, r0
   2169c:	mov	r0, #0
   216a0:	mov	r4, r1
   216a4:	str	r0, [sl]
   216a8:	str	r0, [sl, #4]
   216ac:	ldr	r0, [r1, #32]
   216b0:	ldrh	r1, [r0, #14]
   216b4:	cmp	r1, #7
   216b8:	bne	21860 <flatcc_builder_end_union_vector@@Base+0x1d4>
   216bc:	ldr	r6, [r0, #20]
   216c0:	ldr	r7, [r4, #20]
   216c4:	ldr	r2, [r4, #24]
   216c8:	add	r0, r6, r6, lsl #2
   216cc:	add	r1, r7, r0
   216d0:	cmp	r1, r2
   216d4:	str	r1, [r4, #20]
   216d8:	bcs	21768 <flatcc_builder_end_union_vector@@Base+0xdc>
   216dc:	ldr	r0, [r4, #16]
   216e0:	adds	r1, r0, r7
   216e4:	beq	217d0 <flatcc_builder_end_union_vector@@Base+0x144>
   216e8:	add	r8, r1, r6, lsl #2
   216ec:	cmp	r6, #0
   216f0:	beq	21720 <flatcc_builder_end_union_vector@@Base+0x94>
   216f4:	add	r0, r0, #4
   216f8:	mov	r2, r6
   216fc:	mov	r3, r1
   21700:	mov	r7, r8
   21704:	ldrb	r5, [r0, #-4]
   21708:	subs	r2, r2, #1
   2170c:	strb	r5, [r7], #1
   21710:	ldr	r5, [r0]
   21714:	add	r0, r0, #8
   21718:	str	r5, [r3], #4
   2171c:	bne	21704 <flatcc_builder_end_union_vector@@Base+0x78>
   21720:	mov	r0, r4
   21724:	mov	r2, r6
   21728:	mov	r3, r8
   2172c:	bl	20a90 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   21730:	mov	r7, r0
   21734:	mov	r9, #0
   21738:	cmp	r0, #0
   2173c:	beq	217d8 <flatcc_builder_end_union_vector@@Base+0x14c>
   21740:	mvn	r0, #0
   21744:	mov	r1, #1
   21748:	mov	r2, r6
   2174c:	mov	r3, #1
   21750:	str	r1, [sp]
   21754:	str	r0, [sp, #4]
   21758:	mov	r0, r4
   2175c:	mov	r1, r8
   21760:	bl	2082c <flatcc_builder_create_vector@@Base>
   21764:	b	217dc <flatcc_builder_end_union_vector@@Base+0x150>
   21768:	ldr	r2, [r4, #28]
   2176c:	ldr	r0, [r4, #40]	; 0x28
   21770:	ldr	r5, [r4, #48]	; 0x30
   21774:	mov	r3, #1
   21778:	str	r3, [sp]
   2177c:	mov	r3, #1
   21780:	add	r1, r1, r2
   21784:	add	r2, r1, #1
   21788:	add	r1, r4, #60	; 0x3c
   2178c:	blx	r5
   21790:	cmp	r0, #0
   21794:	bne	217d0 <flatcc_builder_end_union_vector@@Base+0x144>
   21798:	ldr	r1, [r4, #28]
   2179c:	ldr	r0, [r4, #60]	; 0x3c
   217a0:	ldr	r3, [r4, #64]	; 0x40
   217a4:	ldr	r2, [r4, #32]
   217a8:	add	r0, r0, r1
   217ac:	sub	r1, r3, r1
   217b0:	mvn	r3, #3
   217b4:	cmn	r1, #4
   217b8:	str	r0, [r4, #16]
   217bc:	movcs	r1, r3
   217c0:	str	r1, [r4, #24]
   217c4:	str	r3, [r2, #4]
   217c8:	adds	r1, r0, r7
   217cc:	bne	216e8 <flatcc_builder_end_union_vector@@Base+0x5c>
   217d0:	sub	sp, fp, #28
   217d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217d8:	mov	r0, #0
   217dc:	orr	r1, r9, r7
   217e0:	stm	sl, {r0, r1}
   217e4:	mov	r1, #0
   217e8:	ldr	r0, [r4, #16]
   217ec:	ldr	r2, [r4, #20]
   217f0:	bl	12f40 <memset@plt>
   217f4:	ldr	r0, [r4, #32]
   217f8:	ldr	r1, [r4, #60]	; 0x3c
   217fc:	ldr	r2, [r4, #64]	; 0x40
   21800:	ldr	r3, [r0, #8]
   21804:	str	r3, [r4, #20]
   21808:	ldr	r3, [r0]
   2180c:	str	r3, [r4, #28]
   21810:	add	r1, r1, r3
   21814:	ldr	r7, [r0, #4]
   21818:	str	r1, [r4, #16]
   2181c:	sub	r1, r2, r3
   21820:	cmp	r1, r7
   21824:	movhi	r1, r7
   21828:	str	r1, [r4, #24]
   2182c:	ldrh	r1, [r4, #130]	; 0x82
   21830:	ldrh	r2, [r4, #128]	; 0x80
   21834:	cmp	r2, r1
   21838:	strhcc	r1, [r4, #128]	; 0x80
   2183c:	ldrh	r1, [r0, #12]
   21840:	sub	r0, r0, #36	; 0x24
   21844:	str	r0, [r4, #32]
   21848:	strh	r1, [r4, #130]	; 0x82
   2184c:	ldr	r0, [r4, #156]	; 0x9c
   21850:	sub	r0, r0, #1
   21854:	str	r0, [r4, #156]	; 0x9c
   21858:	sub	sp, fp, #28
   2185c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21860:	movw	r0, #35316	; 0x89f4
   21864:	movw	r1, #32210	; 0x7dd2
   21868:	movw	r3, #35366	; 0x8a26
   2186c:	movw	r2, #1617	; 0x651
   21870:	movt	r0, #2
   21874:	movt	r1, #2
   21878:	movt	r3, #2
   2187c:	bl	12f88 <__assert_fail@plt>

00021880 <flatcc_builder_union_vector_count@@Base>:
   21880:	ldr	r0, [r0, #32]
   21884:	ldr	r0, [r0, #20]
   21888:	bx	lr

0002188c <flatcc_builder_union_vector_edit@@Base>:
   2188c:	ldr	r0, [r0, #16]
   21890:	bx	lr

00021894 <flatcc_builder_extend_union_vector@@Base>:
   21894:	push	{r4, r5, fp, lr}
   21898:	add	fp, sp, #8
   2189c:	sub	sp, sp, #8
   218a0:	mov	r4, r0
   218a4:	ldr	r0, [r0, #32]
   218a8:	ldr	r2, [r0, #20]
   218ac:	adds	r2, r2, r1
   218b0:	cmpcc	r2, #536870912	; 0x20000000
   218b4:	bcc	218d8 <flatcc_builder_extend_union_vector@@Base+0x44>
   218b8:	movw	r0, #36481	; 0x8e81
   218bc:	movw	r1, #32210	; 0x7dd2
   218c0:	movw	r3, #36508	; 0x8e9c
   218c4:	mov	r2, #892	; 0x37c
   218c8:	movt	r0, #2
   218cc:	movt	r1, #2
   218d0:	movt	r3, #2
   218d4:	bl	12f88 <__assert_fail@plt>
   218d8:	str	r2, [r0, #20]
   218dc:	ldr	r5, [r4, #20]
   218e0:	ldr	r0, [r4, #24]
   218e4:	add	r1, r5, r1, lsl #3
   218e8:	cmp	r1, r0
   218ec:	str	r1, [r4, #20]
   218f0:	bcs	21904 <flatcc_builder_extend_union_vector@@Base+0x70>
   218f4:	ldr	r0, [r4, #16]
   218f8:	add	r0, r0, r5
   218fc:	sub	sp, fp, #8
   21900:	pop	{r4, r5, fp, pc}
   21904:	ldr	r2, [r4, #28]
   21908:	ldr	r0, [r4, #40]	; 0x28
   2190c:	ldr	ip, [r4, #48]	; 0x30
   21910:	mov	r3, #1
   21914:	str	r3, [sp]
   21918:	mov	r3, #1
   2191c:	add	r1, r1, r2
   21920:	add	r2, r1, #1
   21924:	add	r1, r4, #60	; 0x3c
   21928:	blx	ip
   2192c:	mov	r1, r0
   21930:	mov	r0, #0
   21934:	cmp	r1, #0
   21938:	beq	21944 <flatcc_builder_extend_union_vector@@Base+0xb0>
   2193c:	sub	sp, fp, #8
   21940:	pop	{r4, r5, fp, pc}
   21944:	ldr	r1, [r4, #28]
   21948:	ldr	r0, [r4, #60]	; 0x3c
   2194c:	ldr	r3, [r4, #64]	; 0x40
   21950:	ldr	r2, [r4, #32]
   21954:	add	r0, r0, r1
   21958:	sub	r1, r3, r1
   2195c:	mvn	r3, #3
   21960:	cmn	r1, #4
   21964:	str	r0, [r4, #16]
   21968:	movcs	r1, r3
   2196c:	str	r1, [r4, #24]
   21970:	str	r3, [r2, #4]
   21974:	add	r0, r0, r5
   21978:	sub	sp, fp, #8
   2197c:	pop	{r4, r5, fp, pc}

00021980 <flatcc_builder_truncate_union_vector@@Base>:
   21980:	push	{fp, lr}
   21984:	mov	fp, sp
   21988:	ldr	r2, [r0, #32]
   2198c:	ldrh	r3, [r2, #14]
   21990:	cmp	r3, #7
   21994:	bne	219dc <flatcc_builder_truncate_union_vector@@Base+0x5c>
   21998:	ldr	r3, [r2, #20]
   2199c:	cmp	r3, r1
   219a0:	bcc	219fc <flatcc_builder_truncate_union_vector@@Base+0x7c>
   219a4:	sub	r3, r3, r1
   219a8:	str	r3, [r2, #20]
   219ac:	ldr	r2, [r0, #32]
   219b0:	ldr	r3, [r0, #20]
   219b4:	ldr	ip, [r0, #16]
   219b8:	ldr	r2, [r2, #16]
   219bc:	mls	r3, r2, r1, r3
   219c0:	mul	r2, r2, r1
   219c4:	mov	r1, #0
   219c8:	str	r3, [r0, #20]
   219cc:	add	r0, ip, r3
   219d0:	bl	12f40 <memset@plt>
   219d4:	mov	r0, #0
   219d8:	pop	{fp, pc}
   219dc:	movw	r0, #35316	; 0x89f4
   219e0:	movw	r1, #32210	; 0x7dd2
   219e4:	movw	r3, #35449	; 0x8a79
   219e8:	movw	r2, #1665	; 0x681
   219ec:	movt	r0, #2
   219f0:	movt	r1, #2
   219f4:	movt	r3, #2
   219f8:	bl	12f88 <__assert_fail@plt>
   219fc:	movw	r0, #33880	; 0x8458
   21a00:	movw	r1, #32210	; 0x7dd2
   21a04:	movw	r3, #35449	; 0x8a79
   21a08:	movw	r2, #1666	; 0x682
   21a0c:	movt	r0, #2
   21a10:	movt	r1, #2
   21a14:	movt	r3, #2
   21a18:	bl	12f88 <__assert_fail@plt>

00021a1c <flatcc_builder_union_vector_push@@Base>:
   21a1c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21a20:	add	fp, sp, #24
   21a24:	sub	sp, sp, #8
   21a28:	mov	r7, r0
   21a2c:	ldr	r0, [r0, #32]
   21a30:	mov	r9, r1
   21a34:	ldrh	r1, [r0, #14]
   21a38:	cmp	r1, #7
   21a3c:	bne	21b04 <flatcc_builder_union_vector_push@@Base+0xe8>
   21a40:	ldr	r1, [r0, #20]
   21a44:	mov	r6, #0
   21a48:	cmn	r1, #-536870911	; 0xe0000001
   21a4c:	beq	21aac <flatcc_builder_union_vector_push@@Base+0x90>
   21a50:	add	r1, r1, #1
   21a54:	mov	r8, r2
   21a58:	str	r1, [r0, #20]
   21a5c:	ldr	r4, [r7, #20]
   21a60:	ldr	r0, [r7, #24]
   21a64:	add	r1, r4, #8
   21a68:	cmp	r1, r0
   21a6c:	str	r1, [r7, #20]
   21a70:	bcs	21a7c <flatcc_builder_union_vector_push@@Base+0x60>
   21a74:	ldr	r0, [r7, #16]
   21a78:	b	21ae8 <flatcc_builder_union_vector_push@@Base+0xcc>
   21a7c:	ldr	r1, [r7, #28]
   21a80:	ldr	r0, [r7, #40]	; 0x28
   21a84:	ldr	r5, [r7, #48]	; 0x30
   21a88:	mov	r2, #1
   21a8c:	mov	r3, #1
   21a90:	str	r2, [sp]
   21a94:	add	r1, r4, r1
   21a98:	add	r2, r1, #9
   21a9c:	add	r1, r7, #60	; 0x3c
   21aa0:	blx	r5
   21aa4:	cmp	r0, #0
   21aa8:	beq	21ab8 <flatcc_builder_union_vector_push@@Base+0x9c>
   21aac:	mov	r0, r6
   21ab0:	sub	sp, fp, #24
   21ab4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21ab8:	ldr	r1, [r7, #28]
   21abc:	ldr	r0, [r7, #60]	; 0x3c
   21ac0:	ldr	r3, [r7, #64]	; 0x40
   21ac4:	ldr	r2, [r7, #32]
   21ac8:	add	r0, r0, r1
   21acc:	sub	r1, r3, r1
   21ad0:	mvn	r3, #3
   21ad4:	cmn	r1, #4
   21ad8:	str	r0, [r7, #16]
   21adc:	movcs	r1, r3
   21ae0:	str	r1, [r7, #24]
   21ae4:	str	r3, [r2, #4]
   21ae8:	adds	r0, r0, r4
   21aec:	movne	r6, r0
   21af0:	strne	r9, [r0]
   21af4:	strne	r8, [r0, #4]
   21af8:	mov	r0, r6
   21afc:	sub	sp, fp, #24
   21b00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21b04:	movw	r0, #35316	; 0x89f4
   21b08:	movw	r1, #32210	; 0x7dd2
   21b0c:	movw	r3, #35518	; 0x8abe
   21b10:	movw	r2, #1677	; 0x68d
   21b14:	movt	r0, #2
   21b18:	movt	r1, #2
   21b1c:	movt	r3, #2
   21b20:	bl	12f88 <__assert_fail@plt>

00021b24 <flatcc_builder_append_union_vector@@Base>:
   21b24:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21b28:	add	fp, sp, #24
   21b2c:	sub	sp, sp, #8
   21b30:	mov	r6, r0
   21b34:	ldr	r0, [r0, #32]
   21b38:	mov	r8, r1
   21b3c:	ldrh	r1, [r0, #14]
   21b40:	cmp	r1, #7
   21b44:	bne	21c48 <flatcc_builder_append_union_vector@@Base+0x124>
   21b48:	ldr	r1, [r0, #20]
   21b4c:	mov	r5, r2
   21b50:	adds	r1, r1, r2
   21b54:	cmpcc	r1, #536870912	; 0x20000000
   21b58:	bcc	21b7c <flatcc_builder_append_union_vector@@Base+0x58>
   21b5c:	movw	r0, #36481	; 0x8e81
   21b60:	movw	r1, #32210	; 0x7dd2
   21b64:	movw	r3, #36508	; 0x8e9c
   21b68:	mov	r2, #892	; 0x37c
   21b6c:	movt	r0, #2
   21b70:	movt	r1, #2
   21b74:	movt	r3, #2
   21b78:	bl	12f88 <__assert_fail@plt>
   21b7c:	str	r1, [r0, #20]
   21b80:	ldr	r4, [r6, #20]
   21b84:	ldr	r0, [r6, #24]
   21b88:	add	r1, r4, r5, lsl #3
   21b8c:	cmp	r1, r0
   21b90:	str	r1, [r6, #20]
   21b94:	bcs	21bc0 <flatcc_builder_append_union_vector@@Base+0x9c>
   21b98:	ldr	r0, [r6, #16]
   21b9c:	adds	r7, r0, r4
   21ba0:	beq	21c38 <flatcc_builder_append_union_vector@@Base+0x114>
   21ba4:	lsl	r2, r5, #3
   21ba8:	mov	r0, r7
   21bac:	mov	r1, r8
   21bb0:	bl	12eb0 <memcpy@plt>
   21bb4:	mov	r0, r7
   21bb8:	sub	sp, fp, #24
   21bbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21bc0:	ldr	r2, [r6, #28]
   21bc4:	ldr	r0, [r6, #40]	; 0x28
   21bc8:	ldr	r7, [r6, #48]	; 0x30
   21bcc:	mov	r3, #1
   21bd0:	str	r3, [sp]
   21bd4:	mov	r3, #1
   21bd8:	add	r1, r1, r2
   21bdc:	add	r2, r1, #1
   21be0:	add	r1, r6, #60	; 0x3c
   21be4:	blx	r7
   21be8:	mov	r7, #0
   21bec:	cmp	r0, #0
   21bf0:	beq	21c00 <flatcc_builder_append_union_vector@@Base+0xdc>
   21bf4:	mov	r0, r7
   21bf8:	sub	sp, fp, #24
   21bfc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21c00:	ldr	r1, [r6, #28]
   21c04:	ldr	r0, [r6, #60]	; 0x3c
   21c08:	ldr	r3, [r6, #64]	; 0x40
   21c0c:	ldr	r2, [r6, #32]
   21c10:	add	r0, r0, r1
   21c14:	sub	r1, r3, r1
   21c18:	mvn	r3, #3
   21c1c:	cmn	r1, #4
   21c20:	str	r0, [r6, #16]
   21c24:	movcs	r1, r3
   21c28:	str	r1, [r6, #24]
   21c2c:	str	r3, [r2, #4]
   21c30:	adds	r7, r0, r4
   21c34:	bne	21ba4 <flatcc_builder_append_union_vector@@Base+0x80>
   21c38:	mov	r7, #0
   21c3c:	mov	r0, r7
   21c40:	sub	sp, fp, #24
   21c44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21c48:	movw	r0, #35316	; 0x89f4
   21c4c:	movw	r1, #32210	; 0x7dd2
   21c50:	movw	r3, #35627	; 0x8b2b
   21c54:	movw	r2, #1692	; 0x69c
   21c58:	movt	r0, #2
   21c5c:	movt	r1, #2
   21c60:	movt	r3, #2
   21c64:	bl	12f88 <__assert_fail@plt>

00021c68 <flatcc_builder_create_string@@Base>:
   21c68:	push	{r4, r5, r6, sl, fp, lr}
   21c6c:	add	fp, sp, #16
   21c70:	sub	sp, sp, #80	; 0x50
   21c74:	str	r2, [fp, #-20]	; 0xffffffec
   21c78:	mvn	r5, r2
   21c7c:	mov	r6, r0
   21c80:	mov	r3, #1
   21c84:	cmp	r2, #0
   21c88:	ldr	ip, [r0, #136]	; 0x88
   21c8c:	sub	r0, fp, #20
   21c90:	str	r0, [sp, #12]
   21c94:	mov	r0, #4
   21c98:	str	r0, [sp, #4]
   21c9c:	str	r0, [sp, #16]
   21ca0:	str	r3, [sp, #8]
   21ca4:	add	r5, ip, r5
   21ca8:	and	r5, r5, #3
   21cac:	add	r5, r5, #1
   21cb0:	beq	21ccc <flatcc_builder_create_string@@Base+0x64>
   21cb4:	mov	r3, #2
   21cb8:	add	r0, r2, #4
   21cbc:	str	r1, [sp, #20]
   21cc0:	str	r2, [sp, #24]
   21cc4:	str	r3, [sp, #8]
   21cc8:	str	r0, [sp, #4]
   21ccc:	movw	r2, #31680	; 0x7bc0
   21cd0:	add	lr, sp, #4
   21cd4:	add	r1, r0, r5
   21cd8:	add	r0, lr, r3, lsl #3
   21cdc:	movt	r2, #2
   21ce0:	str	r1, [sp, #4]
   21ce4:	cmp	r1, #0
   21ce8:	str	r2, [r0, #8]
   21cec:	add	r2, r3, #1
   21cf0:	str	r5, [r0, #12]
   21cf4:	str	r2, [sp, #8]
   21cf8:	ble	21d4c <flatcc_builder_create_string@@Base+0xe4>
   21cfc:	ldr	r0, [r6, #36]	; 0x24
   21d00:	ldr	r4, [r6, #44]	; 0x2c
   21d04:	sub	r5, ip, r1
   21d08:	str	r1, [sp]
   21d0c:	add	r1, lr, #8
   21d10:	mov	r3, r5
   21d14:	blx	r4
   21d18:	cmp	r0, #0
   21d1c:	streq	r5, [r6, #136]	; 0x88
   21d20:	moveq	r0, r5
   21d24:	subeq	sp, fp, #16
   21d28:	popeq	{r4, r5, r6, sl, fp, pc}
   21d2c:	movw	r0, #36728	; 0x8f78
   21d30:	movw	r1, #32210	; 0x7dd2
   21d34:	movw	r3, #36407	; 0x8e37
   21d38:	movw	r2, #651	; 0x28b
   21d3c:	movt	r0, #2
   21d40:	movt	r1, #2
   21d44:	movt	r3, #2
   21d48:	bl	12f88 <__assert_fail@plt>
   21d4c:	movw	r0, #36728	; 0x8f78
   21d50:	movw	r1, #32210	; 0x7dd2
   21d54:	movw	r3, #36407	; 0x8e37
   21d58:	movw	r2, #647	; 0x287
   21d5c:	movt	r0, #2
   21d60:	movt	r1, #2
   21d64:	movt	r3, #2
   21d68:	bl	12f88 <__assert_fail@plt>

00021d6c <flatcc_builder_create_string_str@@Base>:
   21d6c:	push	{r4, r5, fp, lr}
   21d70:	add	fp, sp, #8
   21d74:	mov	r5, r0
   21d78:	mov	r0, r1
   21d7c:	mov	r4, r1
   21d80:	bl	12f1c <strlen@plt>
   21d84:	mov	r2, r0
   21d88:	mov	r0, r5
   21d8c:	mov	r1, r4
   21d90:	pop	{r4, r5, fp, lr}
   21d94:	b	21c68 <flatcc_builder_create_string@@Base>

00021d98 <flatcc_builder_create_string_strn@@Base>:
   21d98:	push	{r4, r5, r6, sl, fp, lr}
   21d9c:	add	fp, sp, #16
   21da0:	mov	r6, r0
   21da4:	mov	r5, r1
   21da8:	mov	r0, r1
   21dac:	mov	r1, #0
   21db0:	mov	r4, r2
   21db4:	bl	12f58 <memchr@plt>
   21db8:	cmp	r0, #0
   21dbc:	mov	r1, r5
   21dc0:	subne	r4, r0, r5
   21dc4:	mov	r0, r6
   21dc8:	mov	r2, r4
   21dcc:	pop	{r4, r5, r6, sl, fp, lr}
   21dd0:	b	21c68 <flatcc_builder_create_string@@Base>

00021dd4 <flatcc_builder_end_string@@Base>:
   21dd4:	push	{r4, r5, fp, lr}
   21dd8:	add	fp, sp, #8
   21ddc:	mov	r4, r0
   21de0:	ldr	r0, [r0, #32]
   21de4:	ldrh	r1, [r0, #14]
   21de8:	cmp	r1, #6
   21dec:	bne	21e94 <flatcc_builder_end_string@@Base+0xc0>
   21df0:	ldr	r2, [r0, #20]
   21df4:	ldr	r0, [r4, #20]
   21df8:	cmp	r2, r0
   21dfc:	bne	21eb4 <flatcc_builder_end_string@@Base+0xe0>
   21e00:	ldr	r1, [r4, #16]
   21e04:	mov	r0, r4
   21e08:	bl	21c68 <flatcc_builder_create_string@@Base>
   21e0c:	mov	r5, r0
   21e10:	cmp	r0, #0
   21e14:	beq	21e8c <flatcc_builder_end_string@@Base+0xb8>
   21e18:	ldr	r0, [r4, #16]
   21e1c:	ldr	r2, [r4, #20]
   21e20:	mov	r1, #0
   21e24:	bl	12f40 <memset@plt>
   21e28:	ldr	r0, [r4, #32]
   21e2c:	ldr	r1, [r4, #60]	; 0x3c
   21e30:	ldr	ip, [r4, #64]	; 0x40
   21e34:	ldr	r3, [r0, #8]
   21e38:	str	r3, [r4, #20]
   21e3c:	ldr	r3, [r0]
   21e40:	str	r3, [r4, #28]
   21e44:	add	r1, r1, r3
   21e48:	ldr	r2, [r0, #4]
   21e4c:	str	r1, [r4, #16]
   21e50:	sub	r1, ip, r3
   21e54:	cmp	r1, r2
   21e58:	movhi	r1, r2
   21e5c:	str	r1, [r4, #24]
   21e60:	ldrh	r1, [r4, #130]	; 0x82
   21e64:	ldrh	r2, [r4, #128]	; 0x80
   21e68:	cmp	r2, r1
   21e6c:	strhcc	r1, [r4, #128]	; 0x80
   21e70:	ldrh	r1, [r0, #12]
   21e74:	sub	r0, r0, #36	; 0x24
   21e78:	str	r0, [r4, #32]
   21e7c:	strh	r1, [r4, #130]	; 0x82
   21e80:	ldr	r0, [r4, #156]	; 0x9c
   21e84:	sub	r0, r0, #1
   21e88:	str	r0, [r4, #156]	; 0x9c
   21e8c:	mov	r0, r5
   21e90:	pop	{r4, r5, fp, pc}
   21e94:	movw	r0, #33527	; 0x82f7
   21e98:	movw	r1, #32210	; 0x7dd2
   21e9c:	movw	r3, #35754	; 0x8baa
   21ea0:	movw	r2, #1732	; 0x6c4
   21ea4:	movt	r0, #2
   21ea8:	movt	r1, #2
   21eac:	movt	r3, #2
   21eb0:	bl	12f88 <__assert_fail@plt>
   21eb4:	movw	r0, #35821	; 0x8bed
   21eb8:	movw	r1, #32210	; 0x7dd2
   21ebc:	movw	r3, #35754	; 0x8baa
   21ec0:	movw	r2, #1733	; 0x6c5
   21ec4:	movt	r0, #2
   21ec8:	movt	r1, #2
   21ecc:	movt	r3, #2
   21ed0:	bl	12f88 <__assert_fail@plt>

00021ed4 <flatcc_builder_string_edit@@Base>:
   21ed4:	ldr	r0, [r0, #16]
   21ed8:	bx	lr

00021edc <flatcc_builder_string_len@@Base>:
   21edc:	ldr	r0, [r0, #32]
   21ee0:	ldr	r0, [r0, #20]
   21ee4:	bx	lr

00021ee8 <flatcc_builder_table_edit@@Base>:
   21ee8:	ldr	r2, [r0, #32]
   21eec:	ldrh	r2, [r2, #14]
   21ef0:	cmp	r2, #3
   21ef4:	ldreq	r2, [r0, #16]
   21ef8:	ldreq	r0, [r0, #20]
   21efc:	addeq	r0, r2, r0
   21f00:	subeq	r0, r0, r1
   21f04:	bxeq	lr
   21f08:	push	{fp, lr}
   21f0c:	mov	fp, sp
   21f10:	movw	r0, #34279	; 0x85e7
   21f14:	movw	r1, #32210	; 0x7dd2
   21f18:	movw	r3, #35999	; 0x8c9f
   21f1c:	movw	r2, #1794	; 0x702
   21f20:	movt	r0, #2
   21f24:	movt	r1, #2
   21f28:	movt	r3, #2
   21f2c:	bl	12f88 <__assert_fail@plt>

00021f30 <flatcc_builder_table_add_copy@@Base>:
   21f30:	push	{r4, r5, r6, sl, fp, lr}
   21f34:	add	fp, sp, #16
   21f38:	mov	r4, r3
   21f3c:	ldr	r3, [fp, #8]
   21f40:	mov	r5, r2
   21f44:	mov	r2, r4
   21f48:	bl	2102c <flatcc_builder_table_add@@Base>
   21f4c:	mov	r6, r0
   21f50:	cmp	r0, #0
   21f54:	beq	21f68 <flatcc_builder_table_add_copy@@Base+0x38>
   21f58:	mov	r0, r6
   21f5c:	mov	r1, r5
   21f60:	mov	r2, r4
   21f64:	bl	12eb0 <memcpy@plt>
   21f68:	mov	r0, r6
   21f6c:	pop	{r4, r5, r6, sl, fp, pc}

00021f70 <flatcc_builder_push_buffer_alignment@@Base>:
   21f70:	ldrh	r1, [r0, #128]	; 0x80
   21f74:	mov	r2, #4
   21f78:	strh	r2, [r0, #128]	; 0x80
   21f7c:	mov	r0, r1
   21f80:	bx	lr

00021f84 <flatcc_builder_pop_buffer_alignment@@Base>:
   21f84:	ldrh	r2, [r0, #128]	; 0x80
   21f88:	cmp	r2, r1
   21f8c:	strhcc	r1, [r0, #128]	; 0x80
   21f90:	bx	lr

00021f94 <flatcc_builder_get_buffer_alignment@@Base>:
   21f94:	ldrh	r0, [r0, #128]	; 0x80
   21f98:	bx	lr

00021f9c <flatcc_builder_set_vtable_clustering@@Base>:
   21f9c:	clz	r1, r1
   21fa0:	lsr	r1, r1, #5
   21fa4:	str	r1, [r0, #180]	; 0xb4
   21fa8:	bx	lr

00021fac <flatcc_builder_set_block_align@@Base>:
   21fac:	strh	r1, [r0, #132]	; 0x84
   21fb0:	bx	lr

00021fb4 <flatcc_builder_get_level@@Base>:
   21fb4:	ldr	r0, [r0, #156]	; 0x9c
   21fb8:	bx	lr

00021fbc <flatcc_builder_set_max_level@@Base>:
   21fbc:	str	r1, [r0, #176]	; 0xb0
   21fc0:	ldr	r2, [r0, #160]	; 0xa0
   21fc4:	cmp	r2, r1
   21fc8:	strlt	r1, [r0, #160]	; 0xa0
   21fcc:	bx	lr

00021fd0 <flatcc_builder_get_buffer_size@@Base>:
   21fd0:	ldr	r1, [r0, #136]	; 0x88
   21fd4:	ldr	r0, [r0, #140]	; 0x8c
   21fd8:	sub	r0, r0, r1
   21fdc:	bx	lr

00021fe0 <flatcc_builder_get_buffer_start@@Base>:
   21fe0:	ldr	r0, [r0, #136]	; 0x88
   21fe4:	bx	lr

00021fe8 <flatcc_builder_get_buffer_end@@Base>:
   21fe8:	ldr	r0, [r0, #140]	; 0x8c
   21fec:	bx	lr

00021ff0 <flatcc_builder_set_vtable_cache_limit@@Base>:
   21ff0:	str	r1, [r0, #172]	; 0xac
   21ff4:	bx	lr

00021ff8 <flatcc_builder_set_identifier@@Base>:
   21ff8:	movw	r2, #31680	; 0x7bc0
   21ffc:	cmp	r1, #0
   22000:	movt	r2, #2
   22004:	movne	r2, r1
   22008:	ldr	r1, [r2]
   2200c:	str	r1, [r0, #168]	; 0xa8
   22010:	bx	lr

00022014 <flatcc_builder_get_type@@Base>:
   22014:	ldr	r0, [r0, #32]
   22018:	cmp	r0, #0
   2201c:	ldrhne	r0, [r0, #14]
   22020:	moveq	r0, #0
   22024:	bx	lr

00022028 <flatcc_builder_get_type_at@@Base>:
   22028:	mov	r2, r0
   2202c:	cmp	r1, #1
   22030:	mov	r0, #0
   22034:	ldrge	r3, [r2, #156]	; 0x9c
   22038:	cmpge	r3, r1
   2203c:	bge	22044 <flatcc_builder_get_type_at@@Base+0x1c>
   22040:	bx	lr
   22044:	sub	r0, r1, r3
   22048:	ldr	r1, [r2, #32]
   2204c:	add	r0, r0, r0, lsl #3
   22050:	add	r0, r1, r0, lsl #2
   22054:	ldrh	r0, [r0, #14]
   22058:	bx	lr

0002205c <flatcc_builder_get_direct_buffer@@Base>:
   2205c:	ldr	r2, [r0, #184]	; 0xb8
   22060:	cmp	r2, #0
   22064:	beq	22090 <flatcc_builder_get_direct_buffer@@Base+0x34>
   22068:	ldr	r2, [r0, #188]	; 0xbc
   2206c:	ldr	r3, [r0, #192]	; 0xc0
   22070:	cmp	r2, r3
   22074:	beq	220a8 <flatcc_builder_get_direct_buffer@@Base+0x4c>
   22078:	cmp	r1, #0
   2207c:	moveq	r0, #0
   22080:	bxeq	lr
   22084:	mov	r0, #0
   22088:	str	r0, [r1]
   2208c:	bx	lr
   22090:	cmp	r1, #0
   22094:	moveq	r0, #0
   22098:	bxeq	lr
   2209c:	mov	r0, #0
   220a0:	str	r0, [r1]
   220a4:	bx	lr
   220a8:	cmp	r1, #0
   220ac:	ldrne	r2, [r0, #212]	; 0xd4
   220b0:	strne	r2, [r1]
   220b4:	ldr	r0, [r0, #196]	; 0xc4
   220b8:	bx	lr

000220bc <flatcc_builder_copy_buffer@@Base>:
   220bc:	push	{fp, lr}
   220c0:	mov	fp, sp
   220c4:	ldr	r3, [r0, #184]	; 0xb8
   220c8:	cmp	r3, #0
   220cc:	beq	22100 <flatcc_builder_copy_buffer@@Base+0x44>
   220d0:	add	r0, r0, #188	; 0xbc
   220d4:	bl	22814 <flatcc_emitter_copy_buffer@@Base>
   220d8:	cmp	r0, #0
   220dc:	popne	{fp, pc}
   220e0:	movw	r0, #19184	; 0x4af0
   220e4:	movw	r1, #32210	; 0x7dd2
   220e8:	movw	r3, #36138	; 0x8d2a
   220ec:	movw	r2, #1926	; 0x786
   220f0:	movt	r0, #2
   220f4:	movt	r1, #2
   220f8:	movt	r3, #2
   220fc:	bl	12f88 <__assert_fail@plt>
   22100:	mov	r0, #0
   22104:	pop	{fp, pc}

00022108 <flatcc_builder_finalize_buffer@@Base>:
   22108:	push	{r4, r5, r6, sl, fp, lr}
   2210c:	add	fp, sp, #16
   22110:	mov	r5, r0
   22114:	ldr	r0, [r0, #136]	; 0x88
   22118:	cmp	r1, #0
   2211c:	ldr	r2, [r5, #140]	; 0x8c
   22120:	sub	r4, r2, r0
   22124:	mov	r0, r4
   22128:	strne	r4, [r1]
   2212c:	bl	12ef8 <malloc@plt>
   22130:	cmp	r0, #0
   22134:	beq	22184 <flatcc_builder_finalize_buffer@@Base+0x7c>
   22138:	mov	r6, r0
   2213c:	ldr	r0, [r5, #184]	; 0xb8
   22140:	cmp	r0, #0
   22144:	beq	221a4 <flatcc_builder_finalize_buffer@@Base+0x9c>
   22148:	add	r0, r5, #188	; 0xbc
   2214c:	mov	r1, r6
   22150:	mov	r2, r4
   22154:	bl	22814 <flatcc_emitter_copy_buffer@@Base>
   22158:	cmp	r0, #0
   2215c:	movne	r0, r6
   22160:	popne	{r4, r5, r6, sl, fp, pc}
   22164:	movw	r0, #19184	; 0x4af0
   22168:	movw	r1, #32210	; 0x7dd2
   2216c:	movw	r3, #36138	; 0x8d2a
   22170:	movw	r2, #1926	; 0x786
   22174:	movt	r0, #2
   22178:	movt	r1, #2
   2217c:	movt	r3, #2
   22180:	bl	12f88 <__assert_fail@plt>
   22184:	movw	r0, #36728	; 0x8f78
   22188:	movw	r1, #32210	; 0x7dd2
   2218c:	movw	r3, #36207	; 0x8d6f
   22190:	movw	r2, #1944	; 0x798
   22194:	movt	r0, #2
   22198:	movt	r1, #2
   2219c:	movt	r3, #2
   221a0:	bl	12f88 <__assert_fail@plt>
   221a4:	movw	r0, #36728	; 0x8f78
   221a8:	movw	r1, #32210	; 0x7dd2
   221ac:	movw	r3, #36207	; 0x8d6f
   221b0:	movw	r2, #1948	; 0x79c
   221b4:	movt	r0, #2
   221b8:	movt	r1, #2
   221bc:	movt	r3, #2
   221c0:	bl	12f88 <__assert_fail@plt>

000221c4 <flatcc_builder_finalize_aligned_buffer@@Base>:
   221c4:	push	{r4, r5, r6, r7, fp, lr}
   221c8:	add	fp, sp, #16
   221cc:	sub	sp, sp, #8
   221d0:	mov	r5, r0
   221d4:	mov	r4, r1
   221d8:	ldr	r0, [r0, #136]	; 0x88
   221dc:	ldr	r1, [r5, #140]	; 0x8c
   221e0:	cmp	r4, #0
   221e4:	sub	r0, r1, r0
   221e8:	mov	r1, #0
   221ec:	strne	r0, [r4]
   221f0:	ldrh	r2, [r5, #128]	; 0x80
   221f4:	str	r1, [sp, #4]
   221f8:	add	r0, r0, r2
   221fc:	cmp	r2, #4
   22200:	mov	r1, r2
   22204:	rsb	r2, r2, #0
   22208:	sub	r0, r0, #1
   2220c:	movls	r1, #4
   22210:	and	r7, r0, r2
   22214:	add	r0, sp, #4
   22218:	mov	r2, r7
   2221c:	bl	12f34 <posix_memalign@plt>
   22220:	ldr	r6, [sp, #4]
   22224:	cmp	r0, #0
   22228:	cmpne	r6, #0
   2222c:	bne	22268 <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   22230:	cmp	r6, #0
   22234:	beq	22270 <flatcc_builder_finalize_aligned_buffer@@Base+0xac>
   22238:	ldr	r0, [r5, #184]	; 0xb8
   2223c:	cmp	r0, #0
   22240:	beq	22268 <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   22244:	add	r0, r5, #188	; 0xbc
   22248:	mov	r1, r6
   2224c:	mov	r2, r7
   22250:	bl	22814 <flatcc_emitter_copy_buffer@@Base>
   22254:	cmp	r0, #0
   22258:	beq	22288 <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   2225c:	mov	r0, r6
   22260:	sub	sp, fp, #16
   22264:	pop	{r4, r5, r6, r7, fp, pc}
   22268:	mov	r0, r6
   2226c:	bl	12ea4 <free@plt>
   22270:	mov	r6, #0
   22274:	cmp	r4, #0
   22278:	strne	r6, [r4]
   2227c:	mov	r0, r6
   22280:	sub	sp, fp, #16
   22284:	pop	{r4, r5, r6, r7, fp, pc}
   22288:	movw	r0, #19184	; 0x4af0
   2228c:	movw	r1, #32210	; 0x7dd2
   22290:	movw	r3, #36138	; 0x8d2a
   22294:	movw	r2, #1926	; 0x786
   22298:	movt	r0, #2
   2229c:	movt	r1, #2
   222a0:	movt	r3, #2
   222a4:	bl	12f88 <__assert_fail@plt>

000222a8 <flatcc_builder_aligned_alloc@@Base>:
   222a8:	push	{fp, lr}
   222ac:	mov	fp, sp
   222b0:	sub	sp, sp, #8
   222b4:	mov	r2, r1
   222b8:	mov	r1, r0
   222bc:	mov	r0, #0
   222c0:	cmp	r1, #4
   222c4:	str	r0, [sp, #4]
   222c8:	add	r0, sp, #4
   222cc:	movls	r1, #4
   222d0:	bl	12f34 <posix_memalign@plt>
   222d4:	mov	r1, r0
   222d8:	ldr	r0, [sp, #4]
   222dc:	cmp	r1, #0
   222e0:	cmpne	r0, #0
   222e4:	bne	222f0 <flatcc_builder_aligned_alloc@@Base+0x48>
   222e8:	mov	sp, fp
   222ec:	pop	{fp, pc}
   222f0:	bl	12ea4 <free@plt>
   222f4:	mov	r0, #0
   222f8:	str	r0, [sp, #4]
   222fc:	mov	sp, fp
   22300:	pop	{fp, pc}

00022304 <flatcc_builder_aligned_free@@Base>:
   22304:	b	12ea4 <free@plt>

00022308 <flatcc_builder_get_emit_context@@Base>:
   22308:	ldr	r0, [r0, #36]	; 0x24
   2230c:	bx	lr

00022310 <flatcc_emitter_recycle_page@@Base>:
   22310:	ldr	r3, [r0]
   22314:	mov	r2, r0
   22318:	mvn	r0, #0
   2231c:	cmp	r3, r1
   22320:	ldrne	r2, [r2, #4]
   22324:	cmpne	r2, r1
   22328:	bne	22330 <flatcc_emitter_recycle_page@@Base+0x20>
   2232c:	bx	lr
   22330:	ldr	r0, [r1, #2944]	; 0xb80
   22334:	ldr	r2, [r1, #2948]	; 0xb84
   22338:	str	r2, [r0, #2948]	; 0xb84
   2233c:	ldr	r2, [r1, #2948]	; 0xb84
   22340:	str	r0, [r2, #2944]	; 0xb80
   22344:	ldr	r0, [r3, #2948]	; 0xb84
   22348:	str	r3, [r1, #2944]	; 0xb80
   2234c:	str	r0, [r1, #2948]	; 0xb84
   22350:	str	r1, [r0, #2944]	; 0xb80
   22354:	ldr	r0, [r1, #2944]	; 0xb80
   22358:	str	r1, [r0, #2948]	; 0xb84
   2235c:	mov	r0, #0
   22360:	bx	lr

00022364 <flatcc_emitter_reset@@Base>:
   22364:	push	{r4, sl, fp, lr}
   22368:	add	fp, sp, #8
   2236c:	ldr	r1, [r0]
   22370:	cmp	r1, #0
   22374:	beq	2242c <flatcc_emitter_reset@@Base+0xc8>
   22378:	mov	r4, r0
   2237c:	add	r2, r1, #1472	; 0x5c0
   22380:	mov	r0, #1472	; 0x5c0
   22384:	mov	r3, #0
   22388:	stmib	r4, {r1, r2}
   2238c:	str	r0, [r4, #12]
   22390:	str	r2, [r4, #16]
   22394:	str	r0, [r4, #20]
   22398:	movw	r0, #64064	; 0xfa40
   2239c:	movt	r0, #65535	; 0xffff
   223a0:	str	r0, [r1, #2952]	; 0xb88
   223a4:	ldr	r2, [r4, #32]
   223a8:	ldr	r0, [r4, #24]
   223ac:	cmp	r2, #0
   223b0:	moveq	r2, r0
   223b4:	streq	r0, [r4, #32]
   223b8:	str	r3, [r4, #24]
   223bc:	add	r2, r2, r2, lsl #1
   223c0:	lsr	r2, r2, #2
   223c4:	add	r0, r2, r0, lsr #2
   223c8:	str	r0, [r4, #32]
   223cc:	ldr	r2, [r4, #28]
   223d0:	cmp	r2, r0, lsl #1
   223d4:	bls	2242c <flatcc_emitter_reset@@Base+0xc8>
   223d8:	mov	r2, r1
   223dc:	ldr	r0, [r2, #2944]!	; 0xb80
   223e0:	cmp	r0, r1
   223e4:	beq	2242c <flatcc_emitter_reset@@Base+0xc8>
   223e8:	ldr	r3, [r0, #2944]	; 0xb80
   223ec:	str	r3, [r2]
   223f0:	ldr	r2, [r0, #2944]	; 0xb80
   223f4:	str	r1, [r2, #2948]	; 0xb84
   223f8:	bl	12ea4 <free@plt>
   223fc:	ldr	r0, [r4, #28]
   22400:	ldr	r1, [r4, #32]
   22404:	sub	r0, r0, #2944	; 0xb80
   22408:	cmp	r0, r1, lsl #1
   2240c:	str	r0, [r4, #28]
   22410:	popls	{r4, sl, fp, pc}
   22414:	ldr	r1, [r4, #4]
   22418:	ldr	r3, [r4]
   2241c:	mov	r2, r1
   22420:	ldr	r0, [r2, #2944]!	; 0xb80
   22424:	cmp	r0, r3
   22428:	bne	223e8 <flatcc_emitter_reset@@Base+0x84>
   2242c:	pop	{r4, sl, fp, pc}

00022430 <flatcc_emitter_clear@@Base>:
   22430:	push	{r4, r5, r6, sl, fp, lr}
   22434:	add	fp, sp, #16
   22438:	ldr	r5, [r0]
   2243c:	cmp	r5, #0
   22440:	popeq	{r4, r5, r6, sl, fp, pc}
   22444:	mov	r4, r0
   22448:	ldr	r0, [r5, #2948]	; 0xb84
   2244c:	mov	r6, #0
   22450:	str	r6, [r0, #2944]	; 0xb80
   22454:	ldr	r0, [r5, #2944]	; 0xb80
   22458:	cmp	r0, #0
   2245c:	beq	22478 <flatcc_emitter_clear@@Base+0x48>
   22460:	mov	r5, r0
   22464:	ldr	r0, [r0, #2948]	; 0xb84
   22468:	bl	12ea4 <free@plt>
   2246c:	ldr	r0, [r5, #2944]	; 0xb80
   22470:	cmp	r0, #0
   22474:	bne	22460 <flatcc_emitter_clear@@Base+0x30>
   22478:	mov	r0, r5
   2247c:	bl	12ea4 <free@plt>
   22480:	vmov.i32	q8, #0	; 0x00000000
   22484:	add	r0, r4, #16
   22488:	vst1.32	{d16-d17}, [r0]
   2248c:	mov	r0, #32
   22490:	vst1.32	{d16-d17}, [r4], r0
   22494:	str	r6, [r4]
   22498:	pop	{r4, r5, r6, sl, fp, pc}

0002249c <flatcc_emitter@@Base>:
   2249c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224a0:	add	fp, sp, #28
   224a4:	sub	sp, sp, #4
   224a8:	mov	r6, r0
   224ac:	mov	r7, r1
   224b0:	ldr	r0, [r0, #24]
   224b4:	ldr	r1, [fp, #8]
   224b8:	mov	r4, r2
   224bc:	cmn	r3, #1
   224c0:	mov	r9, r6
   224c4:	add	r0, r0, r1
   224c8:	str	r0, [r6, #24]
   224cc:	ble	22618 <flatcc_emitter@@Base+0x17c>
   224d0:	ldr	r0, [r9, #20]!
   224d4:	cmp	r0, r1
   224d8:	bcs	22798 <flatcc_emitter@@Base+0x2fc>
   224dc:	mov	r8, #0
   224e0:	cmp	r4, #0
   224e4:	beq	227f8 <flatcc_emitter@@Base+0x35c>
   224e8:	movw	sl, #64064	; 0xfa40
   224ec:	movt	sl, #65535	; 0xffff
   224f0:	ldr	r8, [r7, #4]
   224f4:	cmp	r8, #0
   224f8:	beq	225fc <flatcc_emitter@@Base+0x160>
   224fc:	ldr	r9, [r7]
   22500:	cmp	r8, r0
   22504:	mov	r5, r8
   22508:	bls	225c8 <flatcc_emitter@@Base+0x12c>
   2250c:	mov	r5, r0
   22510:	cmp	r5, #0
   22514:	bne	225c8 <flatcc_emitter@@Base+0x12c>
   22518:	ldr	r5, [r6, #4]
   2251c:	cmp	r5, #0
   22520:	beq	22534 <flatcc_emitter@@Base+0x98>
   22524:	ldr	r0, [r5, #2944]	; 0xb80
   22528:	ldr	r1, [r6]
   2252c:	cmp	r0, r1
   22530:	bne	2256c <flatcc_emitter@@Base+0xd0>
   22534:	movw	r0, #2956	; 0xb8c
   22538:	bl	12ef8 <malloc@plt>
   2253c:	cmp	r0, #0
   22540:	beq	227a8 <flatcc_emitter@@Base+0x30c>
   22544:	ldr	r1, [r6, #28]
   22548:	cmp	r5, #0
   2254c:	add	r1, r1, #2944	; 0xb80
   22550:	str	r1, [r6, #28]
   22554:	beq	22598 <flatcc_emitter@@Base+0xfc>
   22558:	ldr	r1, [r6]
   2255c:	str	r1, [r0, #2944]	; 0xb80
   22560:	str	r5, [r0, #2948]	; 0xb84
   22564:	str	r0, [r1, #2948]	; 0xb84
   22568:	str	r0, [r5, #2944]	; 0xb80
   2256c:	mov	r5, #2944	; 0xb80
   22570:	str	r0, [r6, #4]
   22574:	str	r0, [r6, #16]
   22578:	str	r5, [r6, #20]
   2257c:	ldr	r1, [r0, #2948]	; 0xb84
   22580:	ldr	r1, [r1, #2952]	; 0xb88
   22584:	add	r1, r1, #2944	; 0xb80
   22588:	str	r1, [r0, #2952]	; 0xb88
   2258c:	cmp	r8, r5
   22590:	bhi	22510 <flatcc_emitter@@Base+0x74>
   22594:	b	225c4 <flatcc_emitter@@Base+0x128>
   22598:	add	r1, r0, #1472	; 0x5c0
   2259c:	mov	r5, #1472	; 0x5c0
   225a0:	str	r0, [r6]
   225a4:	stmib	r6, {r0, r1, r5}
   225a8:	str	r1, [r6, #16]
   225ac:	str	r5, [r6, #20]
   225b0:	str	r0, [r0, #2944]	; 0xb80
   225b4:	str	r0, [r0, #2948]	; 0xb84
   225b8:	str	sl, [r0, #2952]	; 0xb88
   225bc:	cmp	r8, r5
   225c0:	bhi	22510 <flatcc_emitter@@Base+0x74>
   225c4:	mov	r5, r8
   225c8:	ldr	r0, [r6, #16]
   225cc:	mov	r1, r9
   225d0:	mov	r2, r5
   225d4:	bl	12eb0 <memcpy@plt>
   225d8:	ldr	r0, [r6, #16]
   225dc:	ldr	r1, [r6, #20]
   225e0:	add	r9, r9, r5
   225e4:	subs	r8, r8, r5
   225e8:	add	r2, r0, r5
   225ec:	sub	r0, r1, r5
   225f0:	str	r2, [r6, #16]
   225f4:	str	r0, [r6, #20]
   225f8:	bne	22500 <flatcc_emitter@@Base+0x64>
   225fc:	subs	r4, r4, #1
   22600:	add	r7, r7, #8
   22604:	bne	224f0 <flatcc_emitter@@Base+0x54>
   22608:	mov	r8, #0
   2260c:	mov	r0, r8
   22610:	sub	sp, fp, #28
   22614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22618:	ldr	r0, [r9, #12]!
   2261c:	cmp	r0, r1
   22620:	bcs	227b8 <flatcc_emitter@@Base+0x31c>
   22624:	mov	r8, #0
   22628:	cmp	r4, #0
   2262c:	beq	227f8 <flatcc_emitter@@Base+0x35c>
   22630:	add	r0, r7, r4, lsl #3
   22634:	movw	sl, #2952	; 0xb88
   22638:	ldr	r8, [r0, #-4]
   2263c:	sub	r1, r0, #8
   22640:	str	r1, [sp]
   22644:	cmp	r8, #0
   22648:	beq	2277c <flatcc_emitter@@Base+0x2e0>
   2264c:	ldr	r0, [sp]
   22650:	ldr	r0, [r0]
   22654:	add	r7, r0, r8
   22658:	ldr	r1, [r9]
   2265c:	cmp	r8, r1
   22660:	bhi	22690 <flatcc_emitter@@Base+0x1f4>
   22664:	b	2274c <flatcc_emitter@@Base+0x2b0>
   22668:	add	r3, r0, #2944	; 0xb80
   2266c:	mov	r1, #2944	; 0xb80
   22670:	str	r3, [r6, #8]
   22674:	str	r1, [r6, #12]
   22678:	ldr	r0, [r0, #2944]	; 0xb80
   2267c:	ldr	r0, [r0, #2952]	; 0xb88
   22680:	sub	r0, r0, #2944	; 0xb80
   22684:	str	r0, [r2]
   22688:	cmp	r8, r1
   2268c:	bls	2274c <flatcc_emitter@@Base+0x2b0>
   22690:	cmp	r1, #0
   22694:	mov	r5, r1
   22698:	bne	22750 <flatcc_emitter@@Base+0x2b4>
   2269c:	ldr	r5, [r6]
   226a0:	cmp	r5, #0
   226a4:	beq	226d0 <flatcc_emitter@@Base+0x234>
   226a8:	ldr	r0, [r5, #2948]	; 0xb84
   226ac:	ldr	r1, [r6, #4]
   226b0:	cmp	r0, r1
   226b4:	beq	226d0 <flatcc_emitter@@Base+0x234>
   226b8:	ldr	r1, [r5, #2952]	; 0xb88
   226bc:	mov	r2, r0
   226c0:	sub	r1, r1, #2944	; 0xb80
   226c4:	str	r1, [r2, #2952]!	; 0xb88
   226c8:	str	r0, [r6]
   226cc:	b	22668 <flatcc_emitter@@Base+0x1cc>
   226d0:	movw	r0, #2956	; 0xb8c
   226d4:	bl	12ef8 <malloc@plt>
   226d8:	cmp	r0, #0
   226dc:	beq	22804 <flatcc_emitter@@Base+0x368>
   226e0:	ldr	r1, [r6, #28]
   226e4:	cmp	r5, #0
   226e8:	add	r1, r1, #2944	; 0xb80
   226ec:	str	r1, [r6, #28]
   226f0:	beq	22714 <flatcc_emitter@@Base+0x278>
   226f4:	ldr	r1, [r6, #4]
   226f8:	add	r2, r0, sl
   226fc:	str	r5, [r0, #2944]	; 0xb80
   22700:	str	r1, [r0, #2948]	; 0xb84
   22704:	str	r0, [r5, #2948]	; 0xb84
   22708:	str	r0, [r1, #2944]	; 0xb80
   2270c:	str	r0, [r6]
   22710:	b	22668 <flatcc_emitter@@Base+0x1cc>
   22714:	add	r2, r0, #1472	; 0x5c0
   22718:	mov	r1, #1472	; 0x5c0
   2271c:	str	r0, [r6]
   22720:	stmib	r6, {r0, r2}
   22724:	str	r1, [r6, #12]
   22728:	str	r2, [r6, #16]
   2272c:	movw	r2, #64064	; 0xfa40
   22730:	str	r1, [r6, #20]
   22734:	str	r0, [r0, #2944]	; 0xb80
   22738:	str	r0, [r0, #2948]	; 0xb84
   2273c:	movt	r2, #65535	; 0xffff
   22740:	str	r2, [r0, #2952]	; 0xb88
   22744:	cmp	r8, r1
   22748:	bhi	22690 <flatcc_emitter@@Base+0x1f4>
   2274c:	mov	r5, r8
   22750:	sub	r0, r1, r5
   22754:	sub	r7, r7, r5
   22758:	mov	r2, r5
   2275c:	str	r0, [r6, #12]
   22760:	mov	r1, r7
   22764:	ldr	r0, [r6, #8]
   22768:	sub	r0, r0, r5
   2276c:	str	r0, [r6, #8]
   22770:	bl	12eb0 <memcpy@plt>
   22774:	subs	r8, r8, r5
   22778:	bne	22658 <flatcc_emitter@@Base+0x1bc>
   2277c:	ldr	r0, [sp]
   22780:	subs	r4, r4, #1
   22784:	bne	22638 <flatcc_emitter@@Base+0x19c>
   22788:	mov	r8, #0
   2278c:	mov	r0, r8
   22790:	sub	sp, fp, #28
   22794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22798:	ldr	r5, [r6, #16]
   2279c:	add	r2, r5, r1
   227a0:	str	r2, [r6, #16]
   227a4:	b	227c4 <flatcc_emitter@@Base+0x328>
   227a8:	mvn	r8, #0
   227ac:	mov	r0, r8
   227b0:	sub	sp, fp, #28
   227b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   227b8:	ldr	r2, [r6, #8]
   227bc:	sub	r5, r2, r1
   227c0:	str	r5, [r6, #8]
   227c4:	sub	r0, r0, r1
   227c8:	mov	r8, #0
   227cc:	cmp	r4, #0
   227d0:	str	r0, [r9]
   227d4:	beq	227f8 <flatcc_emitter@@Base+0x35c>
   227d8:	ldm	r7, {r1, r2}
   227dc:	mov	r0, r5
   227e0:	bl	12eb0 <memcpy@plt>
   227e4:	ldr	r0, [r7, #4]
   227e8:	add	r7, r7, #8
   227ec:	subs	r4, r4, #1
   227f0:	add	r5, r5, r0
   227f4:	bne	227d8 <flatcc_emitter@@Base+0x33c>
   227f8:	mov	r0, r8
   227fc:	sub	sp, fp, #28
   22800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22804:	mvn	r8, #0
   22808:	mov	r0, r8
   2280c:	sub	sp, fp, #28
   22810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022814 <flatcc_emitter_copy_buffer@@Base>:
   22814:	push	{r4, r5, r6, sl, fp, lr}
   22818:	add	fp, sp, #16
   2281c:	mov	r3, r2
   22820:	ldr	r2, [r0, #24]
   22824:	mov	r5, #0
   22828:	cmp	r2, r3
   2282c:	bhi	228b4 <flatcc_emitter_copy_buffer@@Base+0xa0>
   22830:	mov	r4, r0
   22834:	ldr	r0, [r0]
   22838:	cmp	r0, #0
   2283c:	beq	228b4 <flatcc_emitter_copy_buffer@@Base+0xa0>
   22840:	mov	r6, r1
   22844:	ldr	r1, [r4, #4]
   22848:	cmp	r0, r1
   2284c:	beq	228bc <flatcc_emitter_copy_buffer@@Base+0xa8>
   22850:	ldr	r0, [r4, #12]
   22854:	ldr	r1, [r4, #8]
   22858:	rsb	r5, r0, #2944	; 0xb80
   2285c:	mov	r0, r6
   22860:	mov	r2, r5
   22864:	bl	12eb0 <memcpy@plt>
   22868:	ldm	r4, {r0, r1}
   2286c:	add	r5, r6, r5
   22870:	ldr	r6, [r0, #2944]	; 0xb80
   22874:	cmp	r6, r1
   22878:	beq	228a0 <flatcc_emitter_copy_buffer@@Base+0x8c>
   2287c:	mov	r0, r5
   22880:	mov	r1, r6
   22884:	mov	r2, #2944	; 0xb80
   22888:	bl	12eb0 <memcpy@plt>
   2288c:	ldr	r6, [r6, #2944]	; 0xb80
   22890:	ldr	r0, [r4, #4]
   22894:	add	r5, r5, #2944	; 0xb80
   22898:	cmp	r6, r0
   2289c:	bne	2287c <flatcc_emitter_copy_buffer@@Base+0x68>
   228a0:	ldr	r0, [r4, #20]
   228a4:	mov	r1, r6
   228a8:	rsb	r2, r0, #2944	; 0xb80
   228ac:	mov	r0, r5
   228b0:	bl	12eb0 <memcpy@plt>
   228b4:	mov	r0, r5
   228b8:	pop	{r4, r5, r6, sl, fp, pc}
   228bc:	ldr	r1, [r4, #8]
   228c0:	mov	r0, r6
   228c4:	bl	12eb0 <memcpy@plt>
   228c8:	mov	r0, r6
   228cc:	pop	{r4, r5, r6, sl, fp, pc}

000228d0 <flatcc_verify_error_string@@Base>:
   228d0:	cmp	r0, #36	; 0x24
   228d4:	movwhi	r0, #37942	; 0x9436
   228d8:	movthi	r0, #2
   228dc:	bxhi	lr
   228e0:	movw	r1, #37952	; 0x9440
   228e4:	movt	r1, #2
   228e8:	ldr	r0, [r1, r0, lsl #2]
   228ec:	bx	lr

000228f0 <flatcc_verify_field@@Base>:
   228f0:	push	{r4, sl, fp, lr}
   228f4:	add	fp, sp, #8
   228f8:	ldrh	r4, [r0, #22]
   228fc:	mov	ip, #4
   22900:	mov	lr, #0
   22904:	add	r1, ip, r1, lsl #1
   22908:	uxth	ip, r1
   2290c:	cmp	ip, r4
   22910:	bcs	2296c <flatcc_verify_field@@Base+0x7c>
   22914:	ldr	r4, [r0, #12]
   22918:	uxtah	r1, r4, r1
   2291c:	ldrh	ip, [r1]
   22920:	cmp	ip, #0
   22924:	beq	2296c <flatcc_verify_field@@Base+0x7c>
   22928:	add	r1, ip, r2
   2292c:	ldrh	r2, [r0, #20]
   22930:	mov	lr, #13
   22934:	cmp	r1, r2
   22938:	bhi	2296c <flatcc_verify_field@@Base+0x7c>
   2293c:	ldr	r1, [r0]
   22940:	mov	lr, #0
   22944:	add	r2, r1, ip
   22948:	ldr	r1, [r0, #16]
   2294c:	add	r4, r2, r1
   22950:	sub	r1, r3, #1
   22954:	tst	r4, r1
   22958:	beq	2296c <flatcc_verify_field@@Base+0x7c>
   2295c:	ldr	r0, [r0, #16]
   22960:	add	r0, r2, r0
   22964:	ands	lr, r0, r1
   22968:	movwne	lr, #12
   2296c:	mov	r0, lr
   22970:	pop	{r4, sl, fp, pc}

00022974 <flatcc_verify_string_field@@Base>:
   22974:	push	{fp, lr}
   22978:	mov	fp, sp
   2297c:	mov	lr, r2
   22980:	ldrh	r2, [r0, #22]
   22984:	mov	r3, #4
   22988:	add	r1, r3, r1, lsl #1
   2298c:	uxth	r3, r1
   22990:	cmp	r3, r2
   22994:	bcs	22a30 <flatcc_verify_string_field@@Base+0xbc>
   22998:	ldr	r2, [r0, #12]
   2299c:	uxtah	r1, r2, r1
   229a0:	ldrh	r1, [r1]
   229a4:	cmp	r1, #0
   229a8:	beq	22a30 <flatcc_verify_string_field@@Base+0xbc>
   229ac:	ldrh	r2, [r0, #20]
   229b0:	add	r3, r1, #4
   229b4:	mov	lr, #13
   229b8:	cmp	r3, r2
   229bc:	bhi	22a28 <flatcc_verify_string_field@@Base+0xb4>
   229c0:	ldr	r2, [r0, #16]
   229c4:	mov	lr, #12
   229c8:	add	r3, r2, r1
   229cc:	tst	r3, #3
   229d0:	bne	22a28 <flatcc_verify_string_field@@Base+0xb4>
   229d4:	cmp	r3, #0
   229d8:	moveq	lr, #0
   229dc:	moveq	r0, lr
   229e0:	popeq	{fp, pc}
   229e4:	ldr	ip, [r0]
   229e8:	mov	lr, #17
   229ec:	ldr	r1, [ip, r3]
   229f0:	add	r1, r1, r3
   229f4:	tst	r1, #3
   229f8:	bne	22a28 <flatcc_verify_string_field@@Base+0xb4>
   229fc:	cmp	r1, r3
   22a00:	bls	22a28 <flatcc_verify_string_field@@Base+0xb4>
   22a04:	ldr	r3, [r0, #4]
   22a08:	add	r0, r1, #4
   22a0c:	cmp	r3, r0
   22a10:	ldrcs	r1, [ip, r1]
   22a14:	subcs	r2, r3, r0
   22a18:	movcs	lr, #8
   22a1c:	addcs	r3, r1, #1
   22a20:	cmpcs	r2, r3
   22a24:	bcs	22a40 <flatcc_verify_string_field@@Base+0xcc>
   22a28:	mov	r0, lr
   22a2c:	pop	{fp, pc}
   22a30:	cmp	lr, #0
   22a34:	movwne	lr, #4
   22a38:	mov	r0, lr
   22a3c:	pop	{fp, pc}
   22a40:	add	r0, ip, r0
   22a44:	ldrb	lr, [r0, r1]
   22a48:	cmp	lr, #0
   22a4c:	movwne	lr, #7
   22a50:	mov	r0, lr
   22a54:	pop	{fp, pc}

00022a58 <flatcc_verify_vector_field@@Base>:
   22a58:	push	{r4, r5, fp, lr}
   22a5c:	add	fp, sp, #8
   22a60:	mov	r5, r2
   22a64:	ldrh	r2, [r0, #22]
   22a68:	mov	r4, #4
   22a6c:	add	r1, r4, r1, lsl #1
   22a70:	uxth	r4, r1
   22a74:	cmp	r4, r2
   22a78:	bcs	22b40 <flatcc_verify_vector_field@@Base+0xe8>
   22a7c:	ldr	r2, [r0, #12]
   22a80:	uxtah	r1, r2, r1
   22a84:	ldrh	r1, [r1]
   22a88:	cmp	r1, #0
   22a8c:	beq	22b40 <flatcc_verify_vector_field@@Base+0xe8>
   22a90:	ldrh	r2, [r0, #20]
   22a94:	add	r4, r1, #4
   22a98:	mov	r5, #13
   22a9c:	cmp	r4, r2
   22aa0:	bhi	22b38 <flatcc_verify_vector_field@@Base+0xe0>
   22aa4:	ldr	r2, [r0, #16]
   22aa8:	mov	r5, #12
   22aac:	add	r1, r2, r1
   22ab0:	tst	r1, #3
   22ab4:	bne	22b38 <flatcc_verify_vector_field@@Base+0xe0>
   22ab8:	cmp	r1, #0
   22abc:	moveq	r5, #0
   22ac0:	moveq	r0, r5
   22ac4:	popeq	{r4, r5, fp, pc}
   22ac8:	ldr	ip, [r0]
   22acc:	ldr	r4, [fp, #8]
   22ad0:	mov	r5, #16
   22ad4:	ldr	r2, [ip, r1]
   22ad8:	cmp	r4, #4
   22adc:	movls	r4, #4
   22ae0:	add	lr, r2, r1
   22ae4:	cmp	lr, r1
   22ae8:	bls	22b38 <flatcc_verify_vector_field@@Base+0xe0>
   22aec:	ldr	r0, [r0, #4]
   22af0:	add	r1, lr, #4
   22af4:	cmp	r1, r0
   22af8:	bhi	22b38 <flatcc_verify_vector_field@@Base+0xe0>
   22afc:	sub	r2, r4, #1
   22b00:	orr	r2, r2, #3
   22b04:	tst	r1, r2
   22b08:	bne	22b38 <flatcc_verify_vector_field@@Base+0xe0>
   22b0c:	ldr	r2, [fp, #12]
   22b10:	ldr	r1, [ip, lr]
   22b14:	mov	r5, #25
   22b18:	cmp	r1, r2
   22b1c:	bhi	22b38 <flatcc_verify_vector_field@@Base+0xe0>
   22b20:	sub	r0, r0, #4
   22b24:	mul	r1, r1, r3
   22b28:	mov	r5, #0
   22b2c:	sub	r0, r0, lr
   22b30:	cmp	r0, r1
   22b34:	movwcc	r5, #26
   22b38:	mov	r0, r5
   22b3c:	pop	{r4, r5, fp, pc}
   22b40:	cmp	r5, #0
   22b44:	movwne	r5, #4
   22b48:	mov	r0, r5
   22b4c:	pop	{r4, r5, fp, pc}

00022b50 <flatcc_verify_string_vector_field@@Base>:
   22b50:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22b54:	add	fp, sp, #24
   22b58:	ldrh	r7, [r0, #22]
   22b5c:	mov	r3, #4
   22b60:	add	r1, r3, r1, lsl #1
   22b64:	uxth	r3, r1
   22b68:	cmp	r3, r7
   22b6c:	bcs	22bb4 <flatcc_verify_string_vector_field@@Base+0x64>
   22b70:	ldr	r3, [r0, #12]
   22b74:	uxtah	r1, r3, r1
   22b78:	ldrh	r1, [r1]
   22b7c:	cmp	r1, #0
   22b80:	beq	22bb4 <flatcc_verify_string_vector_field@@Base+0x64>
   22b84:	ldrh	r3, [r0, #20]
   22b88:	add	r7, r1, #4
   22b8c:	mov	r2, #13
   22b90:	cmp	r7, r3
   22b94:	bhi	22bac <flatcc_verify_string_vector_field@@Base+0x5c>
   22b98:	ldr	r4, [r0, #16]
   22b9c:	mov	r2, #12
   22ba0:	add	r6, r4, r1
   22ba4:	tst	r6, #3
   22ba8:	beq	22bc4 <flatcc_verify_string_vector_field@@Base+0x74>
   22bac:	mov	r0, r2
   22bb0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22bb4:	cmp	r2, #0
   22bb8:	movwne	r2, #4
   22bbc:	mov	r0, r2
   22bc0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22bc4:	mov	r2, #0
   22bc8:	cmp	r6, #0
   22bcc:	beq	22bac <flatcc_verify_string_vector_field@@Base+0x5c>
   22bd0:	ldr	r5, [r0]
   22bd4:	mov	r2, #16
   22bd8:	ldr	r7, [r5, r6]
   22bdc:	add	r3, r7, r6
   22be0:	cmp	r3, r6
   22be4:	bls	22bac <flatcc_verify_string_vector_field@@Base+0x5c>
   22be8:	ldr	lr, [r0, #4]
   22bec:	add	r0, r3, #4
   22bf0:	cmp	r0, lr
   22bf4:	bhi	22bac <flatcc_verify_string_vector_field@@Base+0x5c>
   22bf8:	ands	r0, r0, #3
   22bfc:	bne	22bac <flatcc_verify_string_vector_field@@Base+0x5c>
   22c00:	ldr	ip, [r5, r3]
   22c04:	mov	r2, #25
   22c08:	cmn	ip, #-1073741823	; 0xc0000001
   22c0c:	bhi	22bac <flatcc_verify_string_vector_field@@Base+0x5c>
   22c10:	sub	r0, lr, #4
   22c14:	mov	r2, #26
   22c18:	sub	r0, r0, r3
   22c1c:	cmp	r0, ip, lsl #2
   22c20:	bcc	22bac <flatcc_verify_string_vector_field@@Base+0x5c>
   22c24:	cmp	ip, #0
   22c28:	mov	r2, #0
   22c2c:	beq	22bac <flatcc_verify_string_vector_field@@Base+0x5c>
   22c30:	sub	r0, lr, #8
   22c34:	add	r9, r7, r4
   22c38:	sub	r0, r0, r1
   22c3c:	sub	r0, r0, r7
   22c40:	sub	r8, r0, r4
   22c44:	add	r0, r5, r9
   22c48:	mov	r5, #0
   22c4c:	rsb	r4, r0, #0
   22c50:	sub	r0, r1, r4
   22c54:	add	r3, r1, r9
   22c58:	mov	r2, #17
   22c5c:	ldr	r6, [r0, #4]
   22c60:	add	r7, r3, r6
   22c64:	add	r0, r7, #4
   22c68:	tst	r0, #3
   22c6c:	bne	22bac <flatcc_verify_string_vector_field@@Base+0x5c>
   22c70:	add	r3, r3, #4
   22c74:	cmp	r0, r3
   22c78:	bls	22bac <flatcc_verify_string_vector_field@@Base+0x5c>
   22c7c:	add	r0, r7, #8
   22c80:	cmp	lr, r0
   22c84:	bcc	22bac <flatcc_verify_string_vector_field@@Base+0x5c>
   22c88:	add	r0, r1, r6
   22c8c:	sub	r2, r8, r6
   22c90:	sub	r0, r0, r4
   22c94:	ldr	r0, [r0, #4]
   22c98:	add	r3, r0, #1
   22c9c:	cmp	r2, r3
   22ca0:	bcc	22cdc <flatcc_verify_string_vector_field@@Base+0x18c>
   22ca4:	add	r0, r6, r0
   22ca8:	add	r0, r1, r0
   22cac:	sub	r0, r0, r4
   22cb0:	ldrb	r0, [r0, #8]
   22cb4:	cmp	r0, #0
   22cb8:	bne	22ce8 <flatcc_verify_string_vector_field@@Base+0x198>
   22cbc:	add	r5, r5, #1
   22cc0:	sub	r8, r8, #4
   22cc4:	add	r9, r9, #4
   22cc8:	sub	r4, r4, #4
   22ccc:	mov	r2, #0
   22cd0:	cmp	r5, ip
   22cd4:	bcc	22c50 <flatcc_verify_string_vector_field@@Base+0x100>
   22cd8:	b	22bac <flatcc_verify_string_vector_field@@Base+0x5c>
   22cdc:	mov	r2, #8
   22ce0:	mov	r0, r2
   22ce4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22ce8:	mov	r2, #7
   22cec:	mov	r0, r2
   22cf0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00022cf4 <flatcc_verify_table_field@@Base>:
   22cf4:	push	{r4, r5, r6, sl, fp, lr}
   22cf8:	add	fp, sp, #16
   22cfc:	sub	sp, sp, #24
   22d00:	ldrh	r5, [r0, #22]
   22d04:	mov	r6, #4
   22d08:	add	r1, r6, r1, lsl #1
   22d0c:	uxth	r6, r1
   22d10:	cmp	r6, r5
   22d14:	bcs	22e2c <flatcc_verify_table_field@@Base+0x138>
   22d18:	ldr	r6, [r0, #12]
   22d1c:	uxtah	r1, r6, r1
   22d20:	ldrh	r1, [r1]
   22d24:	cmp	r1, #0
   22d28:	beq	22e2c <flatcc_verify_table_field@@Base+0x138>
   22d2c:	ldrh	r6, [r0, #20]
   22d30:	add	r5, r1, #4
   22d34:	mov	r2, #13
   22d38:	cmp	r5, r6
   22d3c:	bhi	22e34 <flatcc_verify_table_field@@Base+0x140>
   22d40:	ldr	r2, [r0, #16]
   22d44:	add	r4, r2, r1
   22d48:	mov	r2, #12
   22d4c:	tst	r4, #3
   22d50:	bne	22e34 <flatcc_verify_table_field@@Base+0x140>
   22d54:	cmp	r4, #0
   22d58:	beq	22e40 <flatcc_verify_table_field@@Base+0x14c>
   22d5c:	ldm	r0, {r1, ip}
   22d60:	ldr	r2, [r0, #8]
   22d64:	ldr	r0, [r1, r4]
   22d68:	subs	r2, r2, #1
   22d6c:	str	r2, [sp, #8]
   22d70:	beq	22e50 <flatcc_verify_table_field@@Base+0x15c>
   22d74:	add	r0, r0, r4
   22d78:	mov	r2, #15
   22d7c:	tst	r0, #3
   22d80:	bne	22e34 <flatcc_verify_table_field@@Base+0x140>
   22d84:	cmp	r0, r4
   22d88:	bls	22e34 <flatcc_verify_table_field@@Base+0x140>
   22d8c:	add	r6, r0, #4
   22d90:	cmp	r6, ip
   22d94:	bhi	22e34 <flatcc_verify_table_field@@Base+0x140>
   22d98:	str	r0, [sp, #16]
   22d9c:	ldr	r2, [r1, r0]
   22da0:	sub	r5, r0, r2
   22da4:	mov	r2, #29
   22da8:	tst	r5, #-2147483647	; 0x80000001
   22dac:	bne	22e34 <flatcc_verify_table_field@@Base+0x140>
   22db0:	add	r4, r5, #2
   22db4:	mov	r2, #27
   22db8:	cmp	r4, ip
   22dbc:	bhi	22e34 <flatcc_verify_table_field@@Base+0x140>
   22dc0:	mov	lr, r1
   22dc4:	mov	r2, #30
   22dc8:	ldrh	r6, [lr, r5]!
   22dcc:	tst	r6, #1
   22dd0:	strh	r6, [sp, #22]
   22dd4:	bne	22e34 <flatcc_verify_table_field@@Base+0x140>
   22dd8:	add	r5, r5, r6
   22ddc:	cmp	r5, ip
   22de0:	bhi	22e34 <flatcc_verify_table_field@@Base+0x140>
   22de4:	mov	r2, #28
   22de8:	cmp	r6, #4
   22dec:	bcc	22e34 <flatcc_verify_table_field@@Base+0x140>
   22df0:	add	r2, r1, r4
   22df4:	sub	r0, ip, r0
   22df8:	ldrh	r4, [r2]
   22dfc:	mov	r2, #20
   22e00:	cmp	r0, r4
   22e04:	strh	r4, [sp, #20]
   22e08:	bcc	22e34 <flatcc_verify_table_field@@Base+0x140>
   22e0c:	mov	r0, sp
   22e10:	str	lr, [sp, #12]
   22e14:	stm	sp, {r1, ip}
   22e18:	blx	r3
   22e1c:	mov	r2, r0
   22e20:	mov	r0, r2
   22e24:	sub	sp, fp, #16
   22e28:	pop	{r4, r5, r6, sl, fp, pc}
   22e2c:	cmp	r2, #0
   22e30:	movwne	r2, #4
   22e34:	mov	r0, r2
   22e38:	sub	sp, fp, #16
   22e3c:	pop	{r4, r5, r6, sl, fp, pc}
   22e40:	mov	r2, #0
   22e44:	mov	r0, r2
   22e48:	sub	sp, fp, #16
   22e4c:	pop	{r4, r5, r6, sl, fp, pc}
   22e50:	mov	r2, #3
   22e54:	mov	r0, r2
   22e58:	sub	sp, fp, #16
   22e5c:	pop	{r4, r5, r6, sl, fp, pc}

00022e60 <flatcc_verify_table_vector_field@@Base>:
   22e60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22e64:	add	fp, sp, #28
   22e68:	sub	sp, sp, #36	; 0x24
   22e6c:	ldrh	r7, [r0, #22]
   22e70:	mov	r4, r3
   22e74:	mov	r3, #4
   22e78:	add	r1, r3, r1, lsl #1
   22e7c:	uxth	r3, r1
   22e80:	cmp	r3, r7
   22e84:	bcs	23044 <flatcc_verify_table_vector_field@@Base+0x1e4>
   22e88:	ldr	r3, [r0, #12]
   22e8c:	uxtah	r1, r3, r1
   22e90:	ldrh	r1, [r1]
   22e94:	cmp	r1, #0
   22e98:	beq	23044 <flatcc_verify_table_vector_field@@Base+0x1e4>
   22e9c:	ldrh	r3, [r0, #20]
   22ea0:	add	r7, r1, #4
   22ea4:	mov	r2, #13
   22ea8:	cmp	r7, r3
   22eac:	bhi	2304c <flatcc_verify_table_vector_field@@Base+0x1ec>
   22eb0:	ldr	r3, [r0, #16]
   22eb4:	mov	r2, #12
   22eb8:	add	r6, r3, r1
   22ebc:	tst	r6, #3
   22ec0:	bne	2304c <flatcc_verify_table_vector_field@@Base+0x1ec>
   22ec4:	mov	r2, #0
   22ec8:	cmp	r6, #0
   22ecc:	beq	2304c <flatcc_verify_table_vector_field@@Base+0x1ec>
   22ed0:	ldr	r7, [r0, #8]
   22ed4:	cmp	r7, #1
   22ed8:	blt	23058 <flatcc_verify_table_vector_field@@Base+0x1f8>
   22edc:	ldr	sl, [r0]
   22ee0:	mov	r2, #16
   22ee4:	ldr	ip, [sl, r6]
   22ee8:	add	r5, ip, r6
   22eec:	cmp	r5, r6
   22ef0:	bls	2304c <flatcc_verify_table_vector_field@@Base+0x1ec>
   22ef4:	ldr	r9, [r0, #4]
   22ef8:	add	r8, r5, #4
   22efc:	cmp	r8, r9
   22f00:	bhi	2304c <flatcc_verify_table_vector_field@@Base+0x1ec>
   22f04:	ands	r0, r8, #3
   22f08:	bne	2304c <flatcc_verify_table_vector_field@@Base+0x1ec>
   22f0c:	ldr	lr, [sl, r5]
   22f10:	mov	r2, #25
   22f14:	cmn	lr, #-1073741823	; 0xc0000001
   22f18:	bhi	2304c <flatcc_verify_table_vector_field@@Base+0x1ec>
   22f1c:	sub	r0, r9, #4
   22f20:	mov	r2, #26
   22f24:	sub	r6, r0, r5
   22f28:	cmp	r6, lr, lsl #2
   22f2c:	bcc	2304c <flatcc_verify_table_vector_field@@Base+0x1ec>
   22f30:	cmp	lr, #0
   22f34:	mov	r2, #0
   22f38:	beq	2304c <flatcc_verify_table_vector_field@@Base+0x1ec>
   22f3c:	subs	r2, r7, #2
   22f40:	str	r2, [sp, #4]
   22f44:	beq	23124 <flatcc_verify_table_vector_field@@Base+0x2c4>
   22f48:	sub	r0, r0, r1
   22f4c:	sub	r0, r0, ip
   22f50:	sub	r5, r0, r3
   22f54:	mov	r0, #0
   22f58:	str	r0, [sp, #8]
   22f5c:	ldr	r2, [sl, r8]
   22f60:	ldr	r0, [sp, #4]
   22f64:	str	r0, [sp, #20]
   22f68:	add	r0, r8, r2
   22f6c:	add	ip, r0, #4
   22f70:	tst	r0, #3
   22f74:	bne	23068 <flatcc_verify_table_vector_field@@Base+0x208>
   22f78:	cmp	r0, r8
   22f7c:	bls	23068 <flatcc_verify_table_vector_field@@Base+0x208>
   22f80:	cmp	ip, r9
   22f84:	bhi	23068 <flatcc_verify_table_vector_field@@Base+0x208>
   22f88:	str	r0, [sp, #28]
   22f8c:	add	r1, sl, r2
   22f90:	ldr	r7, [r1, r8]
   22f94:	sub	r1, r2, r7
   22f98:	add	r3, r8, r1
   22f9c:	tst	r3, #-2147483647	; 0x80000001
   22fa0:	bne	23068 <flatcc_verify_table_vector_field@@Base+0x208>
   22fa4:	add	r6, r3, #2
   22fa8:	cmp	r6, r9
   22fac:	bhi	23068 <flatcc_verify_table_vector_field@@Base+0x208>
   22fb0:	add	r1, sl, r1
   22fb4:	add	r1, r1, r8
   22fb8:	ldrh	r1, [r1]
   22fbc:	cmp	r1, #4
   22fc0:	strh	r1, [sp, #34]	; 0x22
   22fc4:	bcc	23068 <flatcc_verify_table_vector_field@@Base+0x208>
   22fc8:	ands	r6, r1, #1
   22fcc:	bne	23068 <flatcc_verify_table_vector_field@@Base+0x208>
   22fd0:	add	r1, r2, r1
   22fd4:	sub	r1, r1, r7
   22fd8:	add	r1, r8, r1
   22fdc:	cmp	r1, r9
   22fe0:	bhi	23068 <flatcc_verify_table_vector_field@@Base+0x208>
   22fe4:	add	r1, sl, r3
   22fe8:	sub	r2, r5, r2
   22fec:	ldrh	r3, [r1, #2]
   22ff0:	cmp	r2, r3
   22ff4:	strh	r3, [sp, #32]
   22ff8:	bcc	23068 <flatcc_verify_table_vector_field@@Base+0x208>
   22ffc:	add	r0, sp, #12
   23000:	str	sl, [sp, #12]
   23004:	str	r1, [sp, #24]
   23008:	mov	r6, lr
   2300c:	str	r9, [sp, #16]
   23010:	blx	r4
   23014:	cmp	r0, #0
   23018:	bne	2313c <flatcc_verify_table_vector_field@@Base+0x2dc>
   2301c:	ldr	r0, [sp, #8]
   23020:	sub	r5, r5, #4
   23024:	add	r8, r8, #4
   23028:	mov	r2, #0
   2302c:	mov	lr, r6
   23030:	add	r0, r0, #1
   23034:	cmp	r0, r6
   23038:	str	r0, [sp, #8]
   2303c:	bcc	22f5c <flatcc_verify_table_vector_field@@Base+0xfc>
   23040:	b	2304c <flatcc_verify_table_vector_field@@Base+0x1ec>
   23044:	cmp	r2, #0
   23048:	movwne	r2, #4
   2304c:	mov	r0, r2
   23050:	sub	sp, fp, #28
   23054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23058:	mov	r2, #3
   2305c:	mov	r0, r2
   23060:	sub	sp, fp, #28
   23064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23068:	ldr	r1, [sp, #4]
   2306c:	str	r1, [sp, #20]
   23070:	mov	r2, #15
   23074:	tst	r0, #3
   23078:	bne	2304c <flatcc_verify_table_vector_field@@Base+0x1ec>
   2307c:	cmp	r0, r8
   23080:	bls	2304c <flatcc_verify_table_vector_field@@Base+0x1ec>
   23084:	cmp	ip, r9
   23088:	bhi	2304c <flatcc_verify_table_vector_field@@Base+0x1ec>
   2308c:	str	r0, [sp, #28]
   23090:	mov	r2, #29
   23094:	ldr	r1, [sl, r0]
   23098:	sub	r7, r0, r1
   2309c:	tst	r7, #-2147483647	; 0x80000001
   230a0:	bne	2304c <flatcc_verify_table_vector_field@@Base+0x1ec>
   230a4:	add	r3, r7, #2
   230a8:	mov	r2, #27
   230ac:	cmp	r3, r9
   230b0:	bhi	2304c <flatcc_verify_table_vector_field@@Base+0x1ec>
   230b4:	mov	r1, sl
   230b8:	mov	r2, #30
   230bc:	ldrh	r6, [r1, r7]!
   230c0:	tst	r6, #1
   230c4:	strh	r6, [sp, #34]	; 0x22
   230c8:	bne	2304c <flatcc_verify_table_vector_field@@Base+0x1ec>
   230cc:	add	r7, r7, r6
   230d0:	cmp	r7, r9
   230d4:	bhi	2304c <flatcc_verify_table_vector_field@@Base+0x1ec>
   230d8:	mov	r2, #28
   230dc:	cmp	r6, #4
   230e0:	bcc	2304c <flatcc_verify_table_vector_field@@Base+0x1ec>
   230e4:	add	r2, sl, r3
   230e8:	sub	r0, r9, r0
   230ec:	ldrh	r3, [r2]
   230f0:	mov	r2, #20
   230f4:	cmp	r0, r3
   230f8:	strh	r3, [sp, #32]
   230fc:	bcc	2304c <flatcc_verify_table_vector_field@@Base+0x1ec>
   23100:	add	r0, sp, #12
   23104:	str	sl, [sp, #12]
   23108:	str	r1, [sp, #24]
   2310c:	str	r9, [sp, #16]
   23110:	blx	r4
   23114:	mov	r2, r0
   23118:	mov	r0, r2
   2311c:	sub	sp, fp, #28
   23120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23124:	mov	r0, #0
   23128:	mov	r2, #3
   2312c:	str	r0, [sp, #20]
   23130:	mov	r0, r2
   23134:	sub	sp, fp, #28
   23138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2313c:	ldr	r0, [sl, r8]
   23140:	ldr	r1, [sp, #4]
   23144:	add	r0, r0, r8
   23148:	str	r1, [sp, #20]
   2314c:	add	ip, r0, #4
   23150:	mov	r2, #15
   23154:	tst	r0, #3
   23158:	beq	2307c <flatcc_verify_table_vector_field@@Base+0x21c>
   2315c:	b	2304c <flatcc_verify_table_vector_field@@Base+0x1ec>

00023160 <flatcc_verify_union_table@@Base>:
   23160:	push	{r4, r5, r6, sl, fp, lr}
   23164:	add	fp, sp, #16
   23168:	sub	sp, sp, #24
   2316c:	ldr	r5, [r0, #16]
   23170:	ldr	r3, [r0, #20]
   23174:	ldr	ip, [r0]
   23178:	ldr	r2, [r0, #4]
   2317c:	ldr	r0, [r0, #8]
   23180:	subs	r0, r0, #1
   23184:	str	r0, [sp, #8]
   23188:	moveq	r0, #3
   2318c:	subeq	sp, fp, #16
   23190:	popeq	{r4, r5, r6, sl, fp, pc}
   23194:	add	r3, r3, r5
   23198:	mov	r0, #15
   2319c:	tst	r3, #3
   231a0:	bne	23240 <flatcc_verify_union_table@@Base+0xe0>
   231a4:	cmp	r3, r5
   231a8:	bls	23240 <flatcc_verify_union_table@@Base+0xe0>
   231ac:	add	r6, r3, #4
   231b0:	cmp	r6, r2
   231b4:	bhi	23240 <flatcc_verify_union_table@@Base+0xe0>
   231b8:	str	r3, [sp, #16]
   231bc:	ldr	r0, [ip, r3]
   231c0:	sub	r5, r3, r0
   231c4:	mov	r0, #29
   231c8:	tst	r5, #-2147483647	; 0x80000001
   231cc:	bne	23240 <flatcc_verify_union_table@@Base+0xe0>
   231d0:	add	r4, r5, #2
   231d4:	mov	r0, #27
   231d8:	cmp	r4, r2
   231dc:	bhi	23240 <flatcc_verify_union_table@@Base+0xe0>
   231e0:	mov	lr, ip
   231e4:	mov	r0, #30
   231e8:	ldrh	r6, [lr, r5]!
   231ec:	tst	r6, #1
   231f0:	strh	r6, [sp, #22]
   231f4:	bne	23240 <flatcc_verify_union_table@@Base+0xe0>
   231f8:	add	r5, r5, r6
   231fc:	cmp	r5, r2
   23200:	bhi	23240 <flatcc_verify_union_table@@Base+0xe0>
   23204:	mov	r0, #28
   23208:	cmp	r6, #4
   2320c:	bcc	23240 <flatcc_verify_union_table@@Base+0xe0>
   23210:	add	r0, ip, r4
   23214:	sub	r3, r2, r3
   23218:	ldrh	r4, [r0]
   2321c:	mov	r0, #20
   23220:	cmp	r3, r4
   23224:	strh	r4, [sp, #20]
   23228:	bcc	23240 <flatcc_verify_union_table@@Base+0xe0>
   2322c:	mov	r0, sp
   23230:	str	ip, [sp]
   23234:	str	lr, [sp, #12]
   23238:	str	r2, [sp, #4]
   2323c:	blx	r1
   23240:	sub	sp, fp, #16
   23244:	pop	{r4, r5, r6, sl, fp, pc}

00023248 <flatcc_verify_union_struct@@Base>:
   23248:	push	{fp, lr}
   2324c:	mov	fp, sp
   23250:	ldr	lr, [r0, #20]
   23254:	mov	r3, r0
   23258:	mov	r0, #18
   2325c:	cmp	lr, #0
   23260:	beq	2329c <flatcc_verify_union_struct@@Base+0x54>
   23264:	ldr	ip, [r3, #4]
   23268:	ldr	r3, [r3, #16]
   2326c:	add	r3, r3, lr
   23270:	cmp	r3, ip
   23274:	bhi	2329c <flatcc_verify_union_struct@@Base+0x54>
   23278:	adds	r1, r3, r1
   2327c:	mov	r0, #10
   23280:	bcs	2329c <flatcc_verify_union_struct@@Base+0x54>
   23284:	mov	r0, #9
   23288:	cmp	r1, ip
   2328c:	pophi	{fp, pc}
   23290:	sub	r0, r2, #1
   23294:	ands	r0, r3, r0
   23298:	movwne	r0, #11
   2329c:	pop	{fp, pc}

000232a0 <flatcc_verify_union_string@@Base>:
   232a0:	mov	r1, r0
   232a4:	ldr	r3, [r0, #16]
   232a8:	ldr	r0, [r0, #20]
   232ac:	add	r2, r0, r3
   232b0:	mov	r0, #17
   232b4:	tst	r2, #3
   232b8:	bne	2330c <flatcc_verify_union_string@@Base+0x6c>
   232bc:	cmp	r2, r3
   232c0:	bls	2330c <flatcc_verify_union_string@@Base+0x6c>
   232c4:	ldr	r3, [r1, #4]
   232c8:	add	ip, r2, #4
   232cc:	cmp	r3, ip
   232d0:	bcc	2330c <flatcc_verify_union_string@@Base+0x6c>
   232d4:	push	{fp, lr}
   232d8:	mov	fp, sp
   232dc:	ldr	r1, [r1]
   232e0:	sub	lr, r3, ip
   232e4:	mov	r0, #8
   232e8:	ldr	r2, [r1, r2]
   232ec:	add	r3, r2, #1
   232f0:	cmp	lr, r3
   232f4:	pop	{fp, lr}
   232f8:	bxcc	lr
   232fc:	add	r0, r1, ip
   23300:	ldrb	r0, [r0, r2]
   23304:	cmp	r0, #0
   23308:	movwne	r0, #7
   2330c:	bx	lr

00023310 <flatcc_verify_buffer_header@@Base>:
   23310:	push	{r4, sl, fp, lr}
   23314:	add	fp, sp, #8
   23318:	sub	sp, sp, #8
   2331c:	mov	r4, r0
   23320:	mov	r0, #5
   23324:	tst	r4, #3
   23328:	bne	2337c <flatcc_verify_buffer_header@@Base+0x6c>
   2332c:	mov	r0, #6
   23330:	cmn	r1, #9
   23334:	bhi	2337c <flatcc_verify_buffer_header@@Base+0x6c>
   23338:	mov	r0, #1
   2333c:	cmp	r1, #8
   23340:	bcc	2337c <flatcc_verify_buffer_header@@Base+0x6c>
   23344:	cmp	r2, #0
   23348:	beq	23384 <flatcc_verify_buffer_header@@Base+0x74>
   2334c:	mov	r0, #0
   23350:	mov	r1, r2
   23354:	mov	r2, #4
   23358:	str	r0, [sp, #4]
   2335c:	add	r0, sp, #4
   23360:	bl	12f4c <strncpy@plt>
   23364:	ldr	r1, [sp, #4]
   23368:	cmp	r1, #0
   2336c:	ldrne	r2, [r4, #4]
   23370:	movne	r0, #2
   23374:	cmpne	r2, r1
   23378:	moveq	r0, #0
   2337c:	sub	sp, fp, #8
   23380:	pop	{r4, sl, fp, pc}
   23384:	mov	r0, #0
   23388:	sub	sp, fp, #8
   2338c:	pop	{r4, sl, fp, pc}

00023390 <flatcc_verify_typed_buffer_header@@Base>:
   23390:	mov	r3, r0
   23394:	mov	r0, #5
   23398:	tst	r3, #3
   2339c:	bne	233d0 <flatcc_verify_typed_buffer_header@@Base+0x40>
   233a0:	mov	r0, #6
   233a4:	cmn	r1, #9
   233a8:	bhi	233d0 <flatcc_verify_typed_buffer_header@@Base+0x40>
   233ac:	mov	r0, #1
   233b0:	cmp	r1, #8
   233b4:	bxcc	lr
   233b8:	cmp	r2, #0
   233bc:	beq	233d4 <flatcc_verify_typed_buffer_header@@Base+0x44>
   233c0:	ldr	r1, [r3, #4]
   233c4:	mov	r0, #2
   233c8:	cmp	r1, r2
   233cc:	moveq	r0, #0
   233d0:	bx	lr
   233d4:	mov	r0, #0
   233d8:	bx	lr

000233dc <flatcc_verify_struct_as_root@@Base>:
   233dc:	push	{r4, r5, r6, r7, fp, lr}
   233e0:	add	fp, sp, #16
   233e4:	sub	sp, sp, #8
   233e8:	mov	r5, r0
   233ec:	mov	r0, #5
   233f0:	tst	r5, #3
   233f4:	bne	2348c <flatcc_verify_struct_as_root@@Base+0xb0>
   233f8:	mov	r4, r1
   233fc:	mov	r0, #6
   23400:	cmn	r1, #9
   23404:	bhi	2348c <flatcc_verify_struct_as_root@@Base+0xb0>
   23408:	mov	r0, #1
   2340c:	cmp	r4, #8
   23410:	bcc	2348c <flatcc_verify_struct_as_root@@Base+0xb0>
   23414:	mov	r6, r3
   23418:	mov	r7, r2
   2341c:	cmp	r2, #0
   23420:	beq	23450 <flatcc_verify_struct_as_root@@Base+0x74>
   23424:	mov	r0, #0
   23428:	mov	r1, r7
   2342c:	mov	r2, #4
   23430:	str	r0, [sp]
   23434:	mov	r0, sp
   23438:	bl	12f4c <strncpy@plt>
   2343c:	ldr	r0, [sp]
   23440:	cmp	r0, #0
   23444:	ldrne	r1, [r5, #4]
   23448:	cmpne	r1, r0
   2344c:	bne	23494 <flatcc_verify_struct_as_root@@Base+0xb8>
   23450:	ldr	r1, [r5]
   23454:	mov	r0, #18
   23458:	sub	r2, r1, #1
   2345c:	cmp	r2, r4
   23460:	bcs	2348c <flatcc_verify_struct_as_root@@Base+0xb0>
   23464:	adds	r2, r1, r6
   23468:	mov	r0, #10
   2346c:	bcs	2348c <flatcc_verify_struct_as_root@@Base+0xb0>
   23470:	mov	r0, #9
   23474:	cmp	r2, r4
   23478:	bhi	2348c <flatcc_verify_struct_as_root@@Base+0xb0>
   2347c:	ldr	r0, [fp, #8]
   23480:	sub	r0, r0, #1
   23484:	ands	r0, r1, r0
   23488:	movwne	r0, #11
   2348c:	sub	sp, fp, #16
   23490:	pop	{r4, r5, r6, r7, fp, pc}
   23494:	mov	r0, #0
   23498:	mov	r1, r7
   2349c:	mov	r2, #4
   234a0:	str	r0, [sp, #4]
   234a4:	add	r0, sp, #4
   234a8:	bl	12f4c <strncpy@plt>
   234ac:	ldr	r1, [sp, #4]
   234b0:	ldr	r0, [r5, #4]
   234b4:	subs	r0, r0, r1
   234b8:	movwne	r0, #2
   234bc:	cmp	r1, #0
   234c0:	moveq	r0, r1
   234c4:	sub	sp, fp, #16
   234c8:	pop	{r4, r5, r6, r7, fp, pc}

000234cc <flatcc_verify_struct_as_typed_root@@Base>:
   234cc:	push	{fp, lr}
   234d0:	mov	fp, sp
   234d4:	mov	ip, r0
   234d8:	mov	r0, #5
   234dc:	tst	ip, #3
   234e0:	bne	23550 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   234e4:	mov	r0, #6
   234e8:	cmn	r1, #9
   234ec:	bhi	23550 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   234f0:	mov	r0, #1
   234f4:	cmp	r1, #8
   234f8:	bcc	23550 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   234fc:	cmp	r2, #0
   23500:	beq	23514 <flatcc_verify_struct_as_typed_root@@Base+0x48>
   23504:	ldr	lr, [ip, #4]
   23508:	mov	r0, #2
   2350c:	cmp	lr, r2
   23510:	bne	23550 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   23514:	ldr	ip, [ip]
   23518:	mov	r0, #18
   2351c:	sub	r2, ip, #1
   23520:	cmp	r2, r1
   23524:	bcs	23550 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   23528:	adds	r3, ip, r3
   2352c:	mov	r0, #10
   23530:	bcs	23550 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   23534:	mov	r0, #9
   23538:	cmp	r3, r1
   2353c:	pophi	{fp, pc}
   23540:	ldr	r0, [fp, #8]
   23544:	sub	r0, r0, #1
   23548:	ands	r0, ip, r0
   2354c:	movwne	r0, #11
   23550:	pop	{fp, pc}

00023554 <flatcc_verify_table_as_root@@Base>:
   23554:	push	{r4, r5, r6, r7, fp, lr}
   23558:	add	fp, sp, #16
   2355c:	sub	sp, sp, #24
   23560:	mov	r4, r0
   23564:	mov	r0, #5
   23568:	tst	r4, #3
   2356c:	bne	23678 <flatcc_verify_table_as_root@@Base+0x124>
   23570:	mov	r6, r1
   23574:	mov	r0, #6
   23578:	cmn	r1, #9
   2357c:	bhi	23678 <flatcc_verify_table_as_root@@Base+0x124>
   23580:	mov	r0, #1
   23584:	cmp	r6, #8
   23588:	bcc	23678 <flatcc_verify_table_as_root@@Base+0x124>
   2358c:	mov	r5, r3
   23590:	mov	r7, r2
   23594:	cmp	r2, #0
   23598:	beq	235c8 <flatcc_verify_table_as_root@@Base+0x74>
   2359c:	mov	r0, #0
   235a0:	mov	r1, r7
   235a4:	mov	r2, #4
   235a8:	str	r0, [sp]
   235ac:	mov	r0, sp
   235b0:	bl	12f4c <strncpy@plt>
   235b4:	ldr	r0, [sp]
   235b8:	cmp	r0, #0
   235bc:	ldrne	r1, [r4, #4]
   235c0:	cmpne	r1, r0
   235c4:	bne	23680 <flatcc_verify_table_as_root@@Base+0x12c>
   235c8:	ldr	r1, [r4]
   235cc:	mov	r0, #99	; 0x63
   235d0:	str	r0, [sp, #8]
   235d4:	mov	r0, #15
   235d8:	tst	r1, #3
   235dc:	bne	23678 <flatcc_verify_table_as_root@@Base+0x124>
   235e0:	cmp	r1, #0
   235e4:	beq	23678 <flatcc_verify_table_as_root@@Base+0x124>
   235e8:	add	r2, r1, #4
   235ec:	cmp	r2, r6
   235f0:	bhi	23678 <flatcc_verify_table_as_root@@Base+0x124>
   235f4:	str	r1, [sp, #16]
   235f8:	ldr	r0, [r4, r1]
   235fc:	sub	r7, r1, r0
   23600:	mov	r0, #29
   23604:	tst	r7, #-2147483647	; 0x80000001
   23608:	bne	23678 <flatcc_verify_table_as_root@@Base+0x124>
   2360c:	add	r3, r7, #2
   23610:	mov	r0, #27
   23614:	cmp	r3, r6
   23618:	bhi	23678 <flatcc_verify_table_as_root@@Base+0x124>
   2361c:	mov	ip, r4
   23620:	mov	r0, #30
   23624:	ldrh	r2, [ip, r7]!
   23628:	tst	r2, #1
   2362c:	strh	r2, [sp, #22]
   23630:	bne	23678 <flatcc_verify_table_as_root@@Base+0x124>
   23634:	add	r7, r7, r2
   23638:	cmp	r7, r6
   2363c:	bhi	23678 <flatcc_verify_table_as_root@@Base+0x124>
   23640:	mov	r0, #28
   23644:	cmp	r2, #4
   23648:	bcc	23678 <flatcc_verify_table_as_root@@Base+0x124>
   2364c:	add	r0, r4, r3
   23650:	sub	r1, r6, r1
   23654:	ldrh	r2, [r0]
   23658:	mov	r0, #20
   2365c:	cmp	r1, r2
   23660:	strh	r2, [sp, #20]
   23664:	bcc	23678 <flatcc_verify_table_as_root@@Base+0x124>
   23668:	mov	r0, sp
   2366c:	str	ip, [sp, #12]
   23670:	stm	sp, {r4, r6}
   23674:	blx	r5
   23678:	sub	sp, fp, #16
   2367c:	pop	{r4, r5, r6, r7, fp, pc}
   23680:	mov	r0, #0
   23684:	mov	r1, r7
   23688:	mov	r2, #4
   2368c:	str	r0, [sp]
   23690:	mov	r0, sp
   23694:	bl	12f4c <strncpy@plt>
   23698:	ldr	r1, [sp]
   2369c:	ldr	r0, [r4, #4]
   236a0:	subs	r0, r0, r1
   236a4:	movwne	r0, #2
   236a8:	cmp	r1, #0
   236ac:	moveq	r0, r1
   236b0:	sub	sp, fp, #16
   236b4:	pop	{r4, r5, r6, r7, fp, pc}

000236b8 <flatcc_verify_table_as_typed_root@@Base>:
   236b8:	push	{r4, r5, r6, sl, fp, lr}
   236bc:	add	fp, sp, #16
   236c0:	sub	sp, sp, #24
   236c4:	mov	ip, #5
   236c8:	tst	r0, #3
   236cc:	bne	237b4 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   236d0:	mov	ip, #6
   236d4:	cmn	r1, #9
   236d8:	bhi	237b4 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   236dc:	mov	ip, #1
   236e0:	cmp	r1, #8
   236e4:	bcc	237b4 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   236e8:	cmp	r2, #0
   236ec:	beq	23700 <flatcc_verify_table_as_typed_root@@Base+0x48>
   236f0:	ldr	r6, [r0, #4]
   236f4:	mov	ip, #2
   236f8:	cmp	r6, r2
   236fc:	bne	237b4 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   23700:	ldr	r2, [r0]
   23704:	mov	r6, #99	; 0x63
   23708:	mov	ip, #15
   2370c:	str	r6, [sp, #8]
   23710:	tst	r2, #3
   23714:	bne	237b4 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   23718:	cmp	r2, #0
   2371c:	beq	237b4 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   23720:	add	r6, r2, #4
   23724:	cmp	r6, r1
   23728:	bhi	237b4 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   2372c:	str	r2, [sp, #16]
   23730:	mov	ip, #29
   23734:	ldr	r6, [r0, r2]
   23738:	sub	r5, r2, r6
   2373c:	tst	r5, #-2147483647	; 0x80000001
   23740:	bne	237b4 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   23744:	add	r4, r5, #2
   23748:	mov	ip, #27
   2374c:	cmp	r4, r1
   23750:	bhi	237b4 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   23754:	mov	lr, r0
   23758:	mov	ip, #30
   2375c:	ldrh	r6, [lr, r5]!
   23760:	tst	r6, #1
   23764:	strh	r6, [sp, #22]
   23768:	bne	237b4 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   2376c:	add	r5, r5, r6
   23770:	cmp	r5, r1
   23774:	bhi	237b4 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   23778:	mov	ip, #28
   2377c:	cmp	r6, #4
   23780:	bcc	237b4 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   23784:	add	r6, r0, r4
   23788:	sub	r2, r1, r2
   2378c:	mov	ip, #20
   23790:	ldrh	r4, [r6]
   23794:	cmp	r2, r4
   23798:	strh	r4, [sp, #20]
   2379c:	bcc	237b4 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   237a0:	str	lr, [sp, #12]
   237a4:	stm	sp, {r0, r1}
   237a8:	mov	r0, sp
   237ac:	blx	r3
   237b0:	mov	ip, r0
   237b4:	mov	r0, ip
   237b8:	sub	sp, fp, #16
   237bc:	pop	{r4, r5, r6, sl, fp, pc}

000237c0 <flatcc_verify_struct_as_nested_root@@Base>:
   237c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   237c4:	add	fp, sp, #24
   237c8:	sub	sp, sp, #8
   237cc:	ldrh	r6, [r0, #22]
   237d0:	mov	r4, r3
   237d4:	mov	r3, #4
   237d8:	ldr	r9, [fp, #12]
   237dc:	add	r3, r3, r1, lsl #1
   237e0:	uxth	r7, r3
   237e4:	cmp	r7, r6
   237e8:	bcs	2386c <flatcc_verify_struct_as_nested_root@@Base+0xac>
   237ec:	ldr	r1, [r0, #12]
   237f0:	ldrh	r5, [r1, r7]!
   237f4:	cmp	r5, #0
   237f8:	beq	2386c <flatcc_verify_struct_as_nested_root@@Base+0xac>
   237fc:	ldrh	r3, [r0, #20]
   23800:	add	r7, r5, #4
   23804:	cmp	r7, r3
   23808:	bhi	23884 <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   2380c:	ldr	r3, [r0, #16]
   23810:	add	r6, r3, r5
   23814:	tst	r6, #3
   23818:	bne	23884 <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   2381c:	cmp	r6, #0
   23820:	beq	23940 <flatcc_verify_struct_as_nested_root@@Base+0x180>
   23824:	ldr	r3, [r0]
   23828:	ldr	r7, [r3, r6]
   2382c:	add	r7, r7, r6
   23830:	cmp	r7, r6
   23834:	bls	23884 <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   23838:	ldr	r6, [r0, #4]
   2383c:	add	r5, r7, #4
   23840:	cmp	r5, r6
   23844:	bhi	23884 <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   23848:	ands	r5, r5, #3
   2384c:	bne	23884 <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   23850:	ldr	r3, [r3, r7]
   23854:	sub	r6, r6, #4
   23858:	sub	r6, r6, r7
   2385c:	mul	r3, r3, r9
   23860:	cmp	r6, r3
   23864:	bcc	23884 <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   23868:	b	23940 <flatcc_verify_struct_as_nested_root@@Base+0x180>
   2386c:	cmp	r2, #0
   23870:	beq	2392c <flatcc_verify_struct_as_nested_root@@Base+0x16c>
   23874:	cmp	r7, r6
   23878:	bcs	23918 <flatcc_verify_struct_as_nested_root@@Base+0x158>
   2387c:	ldr	r1, [r0, #12]
   23880:	uxtah	r1, r1, r3
   23884:	ldrh	r1, [r1]
   23888:	cmp	r1, #0
   2388c:	beq	23918 <flatcc_verify_struct_as_nested_root@@Base+0x158>
   23890:	ldrh	r3, [r0, #20]
   23894:	add	r7, r1, #4
   23898:	mov	r2, #13
   2389c:	cmp	r7, r3
   238a0:	bhi	23960 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   238a4:	ldr	r2, [r0, #16]
   238a8:	add	r7, r2, r1
   238ac:	mov	r2, #12
   238b0:	tst	r7, #3
   238b4:	bne	23960 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   238b8:	cmp	r7, #0
   238bc:	beq	23a18 <flatcc_verify_struct_as_nested_root@@Base+0x258>
   238c0:	ldr	r1, [r0]
   238c4:	ldr	r2, [r1, r7]
   238c8:	add	r3, r2, r7
   238cc:	mov	r2, #16
   238d0:	cmp	r3, r7
   238d4:	bls	23960 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   238d8:	ldr	r0, [r0, #4]
   238dc:	add	r7, r3, #4
   238e0:	cmp	r7, r0
   238e4:	bhi	23960 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   238e8:	ands	r7, r7, #3
   238ec:	bne	23960 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   238f0:	ldr	r1, [r1, r3]
   238f4:	sub	r0, r0, #4
   238f8:	mov	r2, #0
   238fc:	sub	r0, r0, r3
   23900:	mul	r1, r1, r9
   23904:	cmp	r0, r1
   23908:	movwcc	r2, #26
   2390c:	mov	r0, r2
   23910:	sub	sp, fp, #24
   23914:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23918:	cmp	r2, #0
   2391c:	movwne	r2, #4
   23920:	mov	r0, r2
   23924:	sub	sp, fp, #24
   23928:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2392c:	mov	r2, #0
   23930:	cmp	r7, r6
   23934:	bcs	23960 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   23938:	ldr	r1, [r0, #12]
   2393c:	uxtah	r1, r1, r3
   23940:	ldrh	r1, [r1]
   23944:	mov	r2, #0
   23948:	cmp	r1, #0
   2394c:	ldrne	r3, [r0]
   23950:	ldrne	r0, [r0, #16]
   23954:	addne	r0, r3, r0
   23958:	addsne	r0, r0, r1
   2395c:	bne	2396c <flatcc_verify_struct_as_nested_root@@Base+0x1ac>
   23960:	mov	r0, r2
   23964:	sub	sp, fp, #24
   23968:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2396c:	ldr	r7, [r0]
   23970:	mov	r2, #5
   23974:	ldr	r8, [r7, r0]!
   23978:	add	r6, r7, #4
   2397c:	tst	r6, #3
   23980:	bne	23960 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   23984:	mov	r2, #6
   23988:	cmn	r8, #9
   2398c:	bhi	23960 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   23990:	mov	r2, #1
   23994:	cmp	r8, #8
   23998:	bcc	23960 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   2399c:	cmp	r4, #0
   239a0:	beq	239d0 <flatcc_verify_struct_as_nested_root@@Base+0x210>
   239a4:	mov	r0, #0
   239a8:	mov	r1, r4
   239ac:	mov	r2, #4
   239b0:	str	r0, [sp]
   239b4:	mov	r0, sp
   239b8:	bl	12f4c <strncpy@plt>
   239bc:	ldr	r0, [sp]
   239c0:	cmp	r0, #0
   239c4:	ldrne	r1, [r7, #8]
   239c8:	cmpne	r1, r0
   239cc:	bne	23a28 <flatcc_verify_struct_as_nested_root@@Base+0x268>
   239d0:	ldr	r0, [r6]
   239d4:	mov	r2, #18
   239d8:	sub	r1, r0, #1
   239dc:	cmp	r1, r8
   239e0:	bcs	23960 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   239e4:	ldr	r1, [fp, #8]
   239e8:	mov	r2, #10
   239ec:	adds	r1, r0, r1
   239f0:	bcs	23960 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   239f4:	mov	r2, #9
   239f8:	cmp	r1, r8
   239fc:	bhi	23960 <flatcc_verify_struct_as_nested_root@@Base+0x1a0>
   23a00:	sub	r1, r9, #1
   23a04:	ands	r2, r0, r1
   23a08:	movwne	r2, #11
   23a0c:	mov	r0, r2
   23a10:	sub	sp, fp, #24
   23a14:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23a18:	mov	r2, #0
   23a1c:	mov	r0, r2
   23a20:	sub	sp, fp, #24
   23a24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23a28:	mov	r0, #0
   23a2c:	mov	r1, r4
   23a30:	mov	r2, #4
   23a34:	str	r0, [sp, #4]
   23a38:	add	r0, sp, #4
   23a3c:	bl	12f4c <strncpy@plt>
   23a40:	ldr	r0, [sp, #4]
   23a44:	ldr	r1, [r7, #8]
   23a48:	subs	r2, r1, r0
   23a4c:	movwne	r2, #2
   23a50:	cmp	r0, #0
   23a54:	moveq	r2, r0
   23a58:	mov	r0, r2
   23a5c:	sub	sp, fp, #24
   23a60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00023a64 <flatcc_verify_table_as_nested_root@@Base>:
   23a64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23a68:	add	fp, sp, #24
   23a6c:	sub	sp, sp, #24
   23a70:	mov	r4, r0
   23a74:	mov	r0, #4
   23a78:	ldr	ip, [fp, #8]
   23a7c:	mov	r5, r3
   23a80:	ldrh	r6, [r4, #22]
   23a84:	add	r3, r0, r1, lsl #1
   23a88:	uxth	r7, r3
   23a8c:	cmp	r7, r6
   23a90:	bcs	23b14 <flatcc_verify_table_as_nested_root@@Base+0xb0>
   23a94:	ldr	r1, [r4, #12]
   23a98:	ldrh	r0, [r1, r7]!
   23a9c:	cmp	r0, #0
   23aa0:	beq	23b14 <flatcc_verify_table_as_nested_root@@Base+0xb0>
   23aa4:	ldrh	r3, [r4, #20]
   23aa8:	add	r7, r0, #4
   23aac:	cmp	r7, r3
   23ab0:	bhi	23b2c <flatcc_verify_table_as_nested_root@@Base+0xc8>
   23ab4:	ldr	r3, [r4, #16]
   23ab8:	add	r0, r3, r0
   23abc:	tst	r0, #3
   23ac0:	bne	23b2c <flatcc_verify_table_as_nested_root@@Base+0xc8>
   23ac4:	cmp	r0, #0
   23ac8:	beq	23be8 <flatcc_verify_table_as_nested_root@@Base+0x184>
   23acc:	ldr	r3, [r4]
   23ad0:	ldr	r7, [r3, r0]
   23ad4:	add	r7, r7, r0
   23ad8:	cmp	r7, r0
   23adc:	bls	23b2c <flatcc_verify_table_as_nested_root@@Base+0xc8>
   23ae0:	ldr	r0, [r4, #4]
   23ae4:	add	r6, r7, #4
   23ae8:	cmp	r6, r0
   23aec:	bhi	23b2c <flatcc_verify_table_as_nested_root@@Base+0xc8>
   23af0:	ands	r6, r6, #3
   23af4:	bne	23b2c <flatcc_verify_table_as_nested_root@@Base+0xc8>
   23af8:	ldr	r3, [r3, r7]
   23afc:	sub	r0, r0, #4
   23b00:	sub	r0, r0, r7
   23b04:	mul	r3, r3, ip
   23b08:	cmp	r0, r3
   23b0c:	bcc	23b2c <flatcc_verify_table_as_nested_root@@Base+0xc8>
   23b10:	b	23be8 <flatcc_verify_table_as_nested_root@@Base+0x184>
   23b14:	cmp	r2, #0
   23b18:	beq	23bd4 <flatcc_verify_table_as_nested_root@@Base+0x170>
   23b1c:	cmp	r7, r6
   23b20:	bcs	23bc0 <flatcc_verify_table_as_nested_root@@Base+0x15c>
   23b24:	ldr	r0, [r4, #12]
   23b28:	uxtah	r1, r0, r3
   23b2c:	ldrh	r0, [r1]
   23b30:	cmp	r0, #0
   23b34:	beq	23bc0 <flatcc_verify_table_as_nested_root@@Base+0x15c>
   23b38:	ldrh	r1, [r4, #20]
   23b3c:	add	r3, r0, #4
   23b40:	mov	r2, #13
   23b44:	cmp	r3, r1
   23b48:	bhi	23c08 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   23b4c:	ldr	r1, [r4, #16]
   23b50:	mov	r2, #12
   23b54:	add	r0, r1, r0
   23b58:	tst	r0, #3
   23b5c:	bne	23c08 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   23b60:	cmp	r0, #0
   23b64:	beq	23d44 <flatcc_verify_table_as_nested_root@@Base+0x2e0>
   23b68:	ldr	r1, [r4]
   23b6c:	ldr	r2, [r1, r0]
   23b70:	add	r3, r2, r0
   23b74:	mov	r2, #16
   23b78:	cmp	r3, r0
   23b7c:	bls	23c08 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   23b80:	ldr	r0, [r4, #4]
   23b84:	add	r7, r3, #4
   23b88:	cmp	r7, r0
   23b8c:	bhi	23c08 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   23b90:	ands	r7, r7, #3
   23b94:	bne	23c08 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   23b98:	ldr	r1, [r1, r3]
   23b9c:	sub	r0, r0, #4
   23ba0:	mov	r2, #0
   23ba4:	sub	r0, r0, r3
   23ba8:	mul	r1, r1, ip
   23bac:	cmp	r0, r1
   23bb0:	movwcc	r2, #26
   23bb4:	mov	r0, r2
   23bb8:	sub	sp, fp, #24
   23bbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23bc0:	cmp	r2, #0
   23bc4:	movwne	r2, #4
   23bc8:	mov	r0, r2
   23bcc:	sub	sp, fp, #24
   23bd0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23bd4:	mov	r2, #0
   23bd8:	cmp	r7, r6
   23bdc:	bcs	23c08 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   23be0:	ldr	r0, [r4, #12]
   23be4:	uxtah	r1, r0, r3
   23be8:	ldrh	r0, [r1]
   23bec:	mov	r2, #0
   23bf0:	cmp	r0, #0
   23bf4:	ldrne	r1, [r4]
   23bf8:	ldrne	r3, [r4, #16]
   23bfc:	addne	r1, r1, r3
   23c00:	addsne	r0, r1, r0
   23c04:	bne	23c14 <flatcc_verify_table_as_nested_root@@Base+0x1b0>
   23c08:	mov	r0, r2
   23c0c:	sub	sp, fp, #24
   23c10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23c14:	ldr	r6, [r0]
   23c18:	mov	r2, #5
   23c1c:	ldr	r8, [r6, r0]!
   23c20:	add	r7, r6, #4
   23c24:	tst	r7, #3
   23c28:	bne	23c08 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   23c2c:	mov	r2, #6
   23c30:	cmn	r8, #9
   23c34:	bhi	23c08 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   23c38:	mov	r2, #1
   23c3c:	cmp	r8, #8
   23c40:	bcc	23c08 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   23c44:	cmp	r5, #0
   23c48:	beq	23c78 <flatcc_verify_table_as_nested_root@@Base+0x214>
   23c4c:	mov	r0, #0
   23c50:	mov	r1, r5
   23c54:	mov	r2, #4
   23c58:	str	r0, [sp]
   23c5c:	mov	r0, sp
   23c60:	bl	12f4c <strncpy@plt>
   23c64:	ldr	r0, [sp]
   23c68:	cmp	r0, #0
   23c6c:	ldrne	r1, [r6, #8]
   23c70:	cmpne	r1, r0
   23c74:	bne	23d54 <flatcc_verify_table_as_nested_root@@Base+0x2f0>
   23c78:	ldr	r1, [r4, #8]
   23c7c:	ldr	r0, [r7]
   23c80:	subs	r1, r1, #1
   23c84:	str	r1, [sp, #8]
   23c88:	beq	23d8c <flatcc_verify_table_as_nested_root@@Base+0x328>
   23c8c:	mov	r2, #15
   23c90:	tst	r0, #3
   23c94:	bne	23c08 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   23c98:	cmp	r0, #0
   23c9c:	beq	23c08 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   23ca0:	add	r1, r0, #4
   23ca4:	cmp	r1, r8
   23ca8:	bhi	23c08 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   23cac:	str	r0, [sp, #16]
   23cb0:	mov	r2, #29
   23cb4:	ldr	r1, [r7, r0]
   23cb8:	sub	r6, r0, r1
   23cbc:	tst	r6, #-2147483647	; 0x80000001
   23cc0:	bne	23c08 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   23cc4:	add	r3, r6, #2
   23cc8:	mov	r2, #27
   23ccc:	cmp	r3, r8
   23cd0:	bhi	23c08 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   23cd4:	mov	r1, r7
   23cd8:	mov	r2, #30
   23cdc:	ldrh	r5, [r1, r6]!
   23ce0:	tst	r5, #1
   23ce4:	strh	r5, [sp, #22]
   23ce8:	bne	23c08 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   23cec:	add	r6, r6, r5
   23cf0:	cmp	r6, r8
   23cf4:	bhi	23c08 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   23cf8:	mov	r2, #28
   23cfc:	cmp	r5, #4
   23d00:	bcc	23c08 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   23d04:	add	r2, r7, r3
   23d08:	sub	r0, r8, r0
   23d0c:	ldrh	r3, [r2]
   23d10:	mov	r2, #20
   23d14:	cmp	r0, r3
   23d18:	strh	r3, [sp, #20]
   23d1c:	bcc	23c08 <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   23d20:	ldr	r2, [fp, #12]
   23d24:	mov	r0, sp
   23d28:	str	r1, [sp, #12]
   23d2c:	stm	sp, {r7, r8}
   23d30:	blx	r2
   23d34:	mov	r2, r0
   23d38:	mov	r0, r2
   23d3c:	sub	sp, fp, #24
   23d40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23d44:	mov	r2, #0
   23d48:	mov	r0, r2
   23d4c:	sub	sp, fp, #24
   23d50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23d54:	mov	r0, #0
   23d58:	mov	r1, r5
   23d5c:	mov	r2, #4
   23d60:	str	r0, [sp]
   23d64:	mov	r0, sp
   23d68:	bl	12f4c <strncpy@plt>
   23d6c:	ldr	r1, [sp]
   23d70:	ldr	r0, [r6, #8]
   23d74:	subs	r0, r0, r1
   23d78:	movwne	r0, #2
   23d7c:	cmp	r1, #0
   23d80:	moveq	r0, r1
   23d84:	sub	sp, fp, #24
   23d88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23d8c:	mov	r2, #3
   23d90:	mov	r0, r2
   23d94:	sub	sp, fp, #24
   23d98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00023d9c <flatcc_verify_union_field@@Base>:
   23d9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23da0:	add	fp, sp, #28
   23da4:	sub	sp, sp, #28
   23da8:	ldrh	r4, [r0, #22]
   23dac:	mov	r7, #2
   23db0:	lsl	r5, r1, #1
   23db4:	add	r7, r7, r1, lsl #1
   23db8:	uxth	r6, r7
   23dbc:	cmp	r6, r4
   23dc0:	bcs	23ebc <flatcc_verify_union_field@@Base+0x120>
   23dc4:	ldr	r6, [r0, #12]
   23dc8:	uxtah	r1, r6, r7
   23dcc:	ldrh	ip, [r1]
   23dd0:	cmp	ip, #0
   23dd4:	beq	23ebc <flatcc_verify_union_field@@Base+0x120>
   23dd8:	ldrh	r7, [r0, #20]
   23ddc:	mov	r1, #13
   23de0:	cmp	ip, r7
   23de4:	bcs	23ee4 <flatcc_verify_union_field@@Base+0x148>
   23de8:	add	r7, r5, #4
   23dec:	ldr	lr, [r0]
   23df0:	ldr	r9, [r0, #16]
   23df4:	mov	r1, #1
   23df8:	uxth	sl, r7
   23dfc:	cmp	sl, r4
   23e00:	uxtahcc	r1, r6, r7
   23e04:	ldrhcc	r1, [r1]
   23e08:	add	r8, lr, r9
   23e0c:	ldrb	r5, [r8, ip]
   23e10:	clzcc	r1, r1
   23e14:	lsrcc	r1, r1, #5
   23e18:	cmp	r1, #0
   23e1c:	moveq	r1, #24
   23e20:	cmpeq	r5, #0
   23e24:	beq	23ee4 <flatcc_verify_union_field@@Base+0x148>
   23e28:	mov	r1, #0
   23e2c:	cmp	r5, #0
   23e30:	beq	23ee4 <flatcc_verify_union_field@@Base+0x148>
   23e34:	cmp	sl, r4
   23e38:	bcs	23f08 <flatcc_verify_union_field@@Base+0x16c>
   23e3c:	uxtah	r1, r6, r7
   23e40:	ldrh	r4, [r1]
   23e44:	cmp	r4, #0
   23e48:	beq	23f08 <flatcc_verify_union_field@@Base+0x16c>
   23e4c:	ldrh	r1, [r0, #20]
   23e50:	add	r2, r4, #4
   23e54:	cmp	r2, r1
   23e58:	mov	r1, #13
   23e5c:	bhi	23ee4 <flatcc_verify_union_field@@Base+0x148>
   23e60:	add	r2, r9, r4
   23e64:	mov	r1, #12
   23e68:	tst	r2, #3
   23e6c:	bne	23ee4 <flatcc_verify_union_field@@Base+0x148>
   23e70:	cmp	r2, #0
   23e74:	mov	r1, #0
   23e78:	beq	23ee4 <flatcc_verify_union_field@@Base+0x148>
   23e7c:	str	lr, [sp, #4]
   23e80:	ldr	r1, [r0, #4]
   23e84:	ldr	r0, [r0, #8]
   23e88:	str	r1, [sp, #8]
   23e8c:	str	r2, [sp, #20]
   23e90:	str	r0, [sp, #12]
   23e94:	ldr	r0, [lr, r2]
   23e98:	str	r0, [sp, #24]
   23e9c:	ldrb	r0, [r8, ip]
   23ea0:	strb	r0, [sp, #16]
   23ea4:	add	r0, sp, #4
   23ea8:	blx	r3
   23eac:	mov	r1, r0
   23eb0:	mov	r0, r1
   23eb4:	sub	sp, fp, #28
   23eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ebc:	add	r1, r5, #4
   23ec0:	uxth	r3, r1
   23ec4:	cmp	r3, r4
   23ec8:	bcs	23ef0 <flatcc_verify_union_field@@Base+0x154>
   23ecc:	ldr	r0, [r0, #12]
   23ed0:	uxtah	r0, r0, r1
   23ed4:	mov	r1, #23
   23ed8:	ldrh	r0, [r0]
   23edc:	cmp	r0, #0
   23ee0:	beq	23ef0 <flatcc_verify_union_field@@Base+0x154>
   23ee4:	mov	r0, r1
   23ee8:	sub	sp, fp, #28
   23eec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ef0:	cmp	r2, #0
   23ef4:	movwne	r2, #21
   23ef8:	mov	r1, r2
   23efc:	mov	r0, r1
   23f00:	sub	sp, fp, #28
   23f04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f08:	cmp	r2, #0
   23f0c:	movwne	r2, #4
   23f10:	mov	r1, r2
   23f14:	mov	r0, r1
   23f18:	sub	sp, fp, #28
   23f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00023f20 <flatcc_verify_union_vector_field@@Base>:
   23f20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f24:	add	fp, sp, #28
   23f28:	sub	sp, sp, #28
   23f2c:	mov	r9, r3
   23f30:	mov	r3, #2
   23f34:	lsl	lr, r1, #1
   23f38:	add	r6, r3, r1, lsl #1
   23f3c:	ldrh	r3, [r0, #22]
   23f40:	uxth	r4, r6
   23f44:	cmp	r4, r3
   23f48:	bcs	23f60 <flatcc_verify_union_vector_field@@Base+0x40>
   23f4c:	ldr	r7, [r0, #12]
   23f50:	mov	r1, r7
   23f54:	ldrh	r5, [r1, r4]!
   23f58:	cmp	r5, #0
   23f5c:	bne	23fac <flatcc_verify_union_vector_field@@Base+0x8c>
   23f60:	add	r1, lr, #4
   23f64:	uxth	r7, r1
   23f68:	cmp	r7, r3
   23f6c:	bcs	24018 <flatcc_verify_union_vector_field@@Base+0xf8>
   23f70:	cmp	r2, #0
   23f74:	beq	23f90 <flatcc_verify_union_vector_field@@Base+0x70>
   23f78:	ldr	r7, [r0, #12]
   23f7c:	uxtah	r1, r7, r1
   23f80:	ldrh	r7, [r1]
   23f84:	mov	r1, #22
   23f88:	cmp	r7, #0
   23f8c:	beq	24258 <flatcc_verify_union_vector_field@@Base+0x338>
   23f90:	cmp	r4, r3
   23f94:	bcs	24028 <flatcc_verify_union_vector_field@@Base+0x108>
   23f98:	ldr	r7, [r0, #12]
   23f9c:	mov	r1, r7
   23fa0:	ldrh	r5, [r1, r4]!
   23fa4:	cmp	r5, #0
   23fa8:	beq	24028 <flatcc_verify_union_vector_field@@Base+0x108>
   23fac:	ldrh	r6, [r0, #20]
   23fb0:	add	r4, r5, #4
   23fb4:	cmp	r4, r6
   23fb8:	bhi	24040 <flatcc_verify_union_vector_field@@Base+0x120>
   23fbc:	ldr	r6, [r0, #16]
   23fc0:	add	r4, r6, r5
   23fc4:	tst	r4, #3
   23fc8:	bne	24040 <flatcc_verify_union_vector_field@@Base+0x120>
   23fcc:	cmp	r4, #0
   23fd0:	beq	240e4 <flatcc_verify_union_vector_field@@Base+0x1c4>
   23fd4:	ldr	r6, [r0]
   23fd8:	ldr	r5, [r6, r4]
   23fdc:	add	r5, r5, r4
   23fe0:	cmp	r5, r4
   23fe4:	bls	24040 <flatcc_verify_union_vector_field@@Base+0x120>
   23fe8:	ldr	ip, [r0, #4]
   23fec:	add	r4, r5, #4
   23ff0:	cmp	r4, ip
   23ff4:	bhi	24040 <flatcc_verify_union_vector_field@@Base+0x120>
   23ff8:	ands	r4, r4, #3
   23ffc:	bne	24040 <flatcc_verify_union_vector_field@@Base+0x120>
   24000:	ldr	r4, [r6, r5]
   24004:	sub	r6, ip, #4
   24008:	sub	r6, r6, r5
   2400c:	cmp	r6, r4
   24010:	bcc	24040 <flatcc_verify_union_vector_field@@Base+0x120>
   24014:	b	240e4 <flatcc_verify_union_vector_field@@Base+0x1c4>
   24018:	mov	r1, #22
   2401c:	cmp	r2, #0
   24020:	bne	24258 <flatcc_verify_union_vector_field@@Base+0x338>
   24024:	b	23f90 <flatcc_verify_union_vector_field@@Base+0x70>
   24028:	cmp	r2, #0
   2402c:	beq	240d0 <flatcc_verify_union_vector_field@@Base+0x1b0>
   24030:	cmp	r4, r3
   24034:	bcs	2424c <flatcc_verify_union_vector_field@@Base+0x32c>
   24038:	ldr	r1, [r0, #12]
   2403c:	uxtah	r1, r1, r6
   24040:	ldrh	r3, [r1]
   24044:	cmp	r3, #0
   24048:	beq	2424c <flatcc_verify_union_vector_field@@Base+0x32c>
   2404c:	ldrh	r2, [r0, #20]
   24050:	add	r7, r3, #4
   24054:	mov	r1, #13
   24058:	cmp	r7, r2
   2405c:	bhi	24258 <flatcc_verify_union_vector_field@@Base+0x338>
   24060:	ldr	r1, [r0, #16]
   24064:	add	r7, r1, r3
   24068:	mov	r1, #12
   2406c:	tst	r7, #3
   24070:	bne	24258 <flatcc_verify_union_vector_field@@Base+0x338>
   24074:	cmp	r7, #0
   24078:	beq	24264 <flatcc_verify_union_vector_field@@Base+0x344>
   2407c:	ldr	r2, [r0]
   24080:	ldr	r1, [r2, r7]
   24084:	add	r3, r1, r7
   24088:	mov	r1, #16
   2408c:	cmp	r3, r7
   24090:	bls	24258 <flatcc_verify_union_vector_field@@Base+0x338>
   24094:	ldr	r0, [r0, #4]
   24098:	add	r7, r3, #4
   2409c:	cmp	r7, r0
   240a0:	bhi	24258 <flatcc_verify_union_vector_field@@Base+0x338>
   240a4:	ands	r7, r7, #3
   240a8:	bne	24258 <flatcc_verify_union_vector_field@@Base+0x338>
   240ac:	ldr	r2, [r2, r3]
   240b0:	sub	r0, r0, #4
   240b4:	mov	r1, #0
   240b8:	sub	r0, r0, r3
   240bc:	cmp	r0, r2
   240c0:	movwcc	r1, #26
   240c4:	mov	r0, r1
   240c8:	sub	sp, fp, #28
   240cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   240d0:	mov	r1, #0
   240d4:	cmp	r4, r3
   240d8:	bcs	24258 <flatcc_verify_union_vector_field@@Base+0x338>
   240dc:	ldr	r7, [r0, #12]
   240e0:	uxtah	r1, r7, r6
   240e4:	ldrh	r5, [r1]
   240e8:	mov	r1, #0
   240ec:	cmp	r5, #0
   240f0:	ldrne	r8, [r0]
   240f4:	ldrne	r6, [r0, #16]
   240f8:	addne	r4, r8, r6
   240fc:	addsne	ip, r4, r5
   24100:	beq	24258 <flatcc_verify_union_vector_field@@Base+0x338>
   24104:	add	r1, lr, #4
   24108:	uxth	r5, r1
   2410c:	cmp	r5, r3
   24110:	bcs	2424c <flatcc_verify_union_vector_field@@Base+0x32c>
   24114:	uxtah	r1, r7, r1
   24118:	ldrh	r3, [r1]
   2411c:	cmp	r3, #0
   24120:	beq	2424c <flatcc_verify_union_vector_field@@Base+0x32c>
   24124:	ldrh	r2, [r0, #20]
   24128:	add	r7, r3, #4
   2412c:	mov	r1, #13
   24130:	cmp	r7, r2
   24134:	bhi	24258 <flatcc_verify_union_vector_field@@Base+0x338>
   24138:	add	r4, r6, r3
   2413c:	mov	r1, #12
   24140:	tst	r4, #3
   24144:	bne	24258 <flatcc_verify_union_vector_field@@Base+0x338>
   24148:	cmp	r4, #0
   2414c:	mov	r1, #0
   24150:	beq	24258 <flatcc_verify_union_vector_field@@Base+0x338>
   24154:	ldr	r7, [r0, #8]
   24158:	cmp	r7, #1
   2415c:	blt	24274 <flatcc_verify_union_vector_field@@Base+0x354>
   24160:	ldr	r2, [r8, r4]
   24164:	mov	r1, #16
   24168:	add	r5, r2, r4
   2416c:	cmp	r5, r4
   24170:	bls	24258 <flatcc_verify_union_vector_field@@Base+0x338>
   24174:	ldr	r0, [r0, #4]
   24178:	add	r4, r5, #4
   2417c:	cmp	r4, r0
   24180:	bhi	24258 <flatcc_verify_union_vector_field@@Base+0x338>
   24184:	ands	r4, r4, #3
   24188:	bne	24258 <flatcc_verify_union_vector_field@@Base+0x338>
   2418c:	ldr	r4, [r8, r5]
   24190:	mov	r1, #25
   24194:	cmn	r4, #-1073741823	; 0xc0000001
   24198:	bhi	24258 <flatcc_verify_union_vector_field@@Base+0x338>
   2419c:	sub	r1, r0, #4
   241a0:	sub	r5, r1, r5
   241a4:	mov	r1, #26
   241a8:	cmp	r5, r4, lsl #2
   241ac:	bcc	24258 <flatcc_verify_union_vector_field@@Base+0x338>
   241b0:	ldr	r5, [ip]
   241b4:	mov	r1, #34	; 0x22
   241b8:	ldr	sl, [r5, ip]!
   241bc:	cmp	r4, sl
   241c0:	bne	24258 <flatcc_verify_union_vector_field@@Base+0x338>
   241c4:	cmp	sl, #0
   241c8:	sub	r1, r7, #1
   241cc:	str	r0, [sp, #8]
   241d0:	str	r8, [sp, #4]
   241d4:	str	r1, [sp, #12]
   241d8:	beq	24284 <flatcc_verify_union_vector_field@@Base+0x364>
   241dc:	add	r0, r2, r6
   241e0:	add	r7, r5, #4
   241e4:	mov	r5, #0
   241e8:	add	r4, sp, #4
   241ec:	add	r0, r0, r3
   241f0:	add	r6, r0, #4
   241f4:	ldr	r1, [r8, r6]
   241f8:	ldrb	r0, [r7, r5]
   241fc:	cmp	r1, #0
   24200:	beq	2422c <flatcc_verify_union_vector_field@@Base+0x30c>
   24204:	cmp	r0, #0
   24208:	beq	24294 <flatcc_verify_union_vector_field@@Base+0x374>
   2420c:	str	r6, [sp, #20]
   24210:	strb	r0, [sp, #16]
   24214:	mov	r0, r4
   24218:	str	r1, [sp, #24]
   2421c:	blx	r9
   24220:	cmp	r0, #0
   24224:	beq	24234 <flatcc_verify_union_vector_field@@Base+0x314>
   24228:	b	242a4 <flatcc_verify_union_vector_field@@Base+0x384>
   2422c:	cmp	r0, #0
   24230:	bne	242bc <flatcc_verify_union_vector_field@@Base+0x39c>
   24234:	add	r5, r5, #1
   24238:	add	r6, r6, #4
   2423c:	mov	r1, #0
   24240:	cmp	r5, sl
   24244:	bcc	241f4 <flatcc_verify_union_vector_field@@Base+0x2d4>
   24248:	b	24258 <flatcc_verify_union_vector_field@@Base+0x338>
   2424c:	cmp	r2, #0
   24250:	movwne	r2, #4
   24254:	mov	r1, r2
   24258:	mov	r0, r1
   2425c:	sub	sp, fp, #28
   24260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24264:	mov	r1, #0
   24268:	mov	r0, r1
   2426c:	sub	sp, fp, #28
   24270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24274:	mov	r1, #3
   24278:	mov	r0, r1
   2427c:	sub	sp, fp, #28
   24280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24284:	mov	r1, #0
   24288:	mov	r0, r1
   2428c:	sub	sp, fp, #28
   24290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24294:	mov	r1, #33	; 0x21
   24298:	mov	r0, r1
   2429c:	sub	sp, fp, #28
   242a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   242a4:	add	r0, sp, #4
   242a8:	blx	r9
   242ac:	mov	r1, r0
   242b0:	mov	r0, r1
   242b4:	sub	sp, fp, #28
   242b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   242bc:	mov	r1, #32
   242c0:	mov	r0, r1
   242c4:	sub	sp, fp, #28
   242c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000242cc <__libc_csu_init@@Base>:
   242cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   242d0:	mov	r7, r0
   242d4:	ldr	r6, [pc, #72]	; 24324 <__libc_csu_init@@Base+0x58>
   242d8:	ldr	r5, [pc, #72]	; 24328 <__libc_csu_init@@Base+0x5c>
   242dc:	add	r6, pc, r6
   242e0:	add	r5, pc, r5
   242e4:	sub	r6, r6, r5
   242e8:	mov	r8, r1
   242ec:	mov	r9, r2
   242f0:	bl	12e6c <strcmp@plt-0x20>
   242f4:	asrs	r6, r6, #2
   242f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   242fc:	mov	r4, #0
   24300:	add	r4, r4, #1
   24304:	ldr	r3, [r5], #4
   24308:	mov	r2, r9
   2430c:	mov	r1, r8
   24310:	mov	r0, r7
   24314:	blx	r3
   24318:	cmp	r6, r4
   2431c:	bne	24300 <__libc_csu_init@@Base+0x34>
   24320:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24324:	andeq	r5, r1, r8, lsr #24
   24328:	andeq	r5, r1, r0, lsr #24

0002432c <__libc_csu_fini@@Base>:
   2432c:	bx	lr

Disassembly of section .fini:

00024330 <.fini>:
   24330:	push	{r3, lr}
   24334:	pop	{r3, pc}
