
../repos/coreutils/src/who:     file format elf32-littlearm


Disassembly of section .init:

000110a4 <.init>:
   110a4:	push	{r3, lr}
   110a8:	bl	11400 <__assert_fail@plt+0x48>
   110ac:	pop	{r3, pc}

Disassembly of section .plt:

000110b0 <calloc@plt-0x14>:
   110b0:	push	{lr}		; (str lr, [sp, #-4]!)
   110b4:	ldr	lr, [pc, #4]	; 110c0 <calloc@plt-0x4>
   110b8:	add	lr, pc, lr
   110bc:	ldr	pc, [lr, #8]!
   110c0:	andeq	r5, r1, r0, asr #30

000110c4 <calloc@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #86016	; 0x15000
   110cc:	ldr	pc, [ip, #3904]!	; 0xf40

000110d0 <fputs_unlocked@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #86016	; 0x15000
   110d8:	ldr	pc, [ip, #3896]!	; 0xf38

000110dc <raise@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #86016	; 0x15000
   110e4:	ldr	pc, [ip, #3888]!	; 0xf30

000110e8 <strcmp@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #86016	; 0x15000
   110f0:	ldr	pc, [ip, #3880]!	; 0xf28

000110f4 <fflush@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #86016	; 0x15000
   110fc:	ldr	pc, [ip, #3872]!	; 0xf20

00011100 <utmpxname@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #86016	; 0x15000
   11108:	ldr	pc, [ip, #3864]!	; 0xf18

0001110c <free@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #86016	; 0x15000
   11114:	ldr	pc, [ip, #3856]!	; 0xf10

00011118 <gai_strerror@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #86016	; 0x15000
   11120:	ldr	pc, [ip, #3848]!	; 0xf08

00011124 <_exit@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #86016	; 0x15000
   1112c:	ldr	pc, [ip, #3840]!	; 0xf00

00011130 <memcpy@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #86016	; 0x15000
   11138:	ldr	pc, [ip, #3832]!	; 0xef8

0001113c <mbsinit@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #86016	; 0x15000
   11144:	ldr	pc, [ip, #3824]!	; 0xef0

00011148 <time@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #86016	; 0x15000
   11150:	ldr	pc, [ip, #3816]!	; 0xee8

00011154 <stpcpy@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #86016	; 0x15000
   1115c:	ldr	pc, [ip, #3808]!	; 0xee0

00011160 <dcgettext@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #86016	; 0x15000
   11168:	ldr	pc, [ip, #3800]!	; 0xed8

0001116c <strdup@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #86016	; 0x15000
   11174:	ldr	pc, [ip, #3792]!	; 0xed0

00011178 <setutxent@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #86016	; 0x15000
   11180:	ldr	pc, [ip, #3784]!	; 0xec8

00011184 <realloc@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #86016	; 0x15000
   1118c:	ldr	pc, [ip, #3776]!	; 0xec0

00011190 <textdomain@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #86016	; 0x15000
   11198:	ldr	pc, [ip, #3768]!	; 0xeb8

0001119c <iswprint@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #86016	; 0x15000
   111a4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111a8 <lseek64@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #86016	; 0x15000
   111b0:	ldr	pc, [ip, #3752]!	; 0xea8

000111b4 <__ctype_get_mb_cur_max@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #86016	; 0x15000
   111bc:	ldr	pc, [ip, #3744]!	; 0xea0

000111c0 <__fpending@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #86016	; 0x15000
   111c8:	ldr	pc, [ip, #3736]!	; 0xe98

000111cc <ferror_unlocked@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #86016	; 0x15000
   111d4:	ldr	pc, [ip, #3728]!	; 0xe90

000111d8 <mbrtowc@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #86016	; 0x15000
   111e0:	ldr	pc, [ip, #3720]!	; 0xe88

000111e4 <error@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #86016	; 0x15000
   111ec:	ldr	pc, [ip, #3712]!	; 0xe80

000111f0 <__asprintf_chk@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #86016	; 0x15000
   111f8:	ldr	pc, [ip, #3704]!	; 0xe78

000111fc <puts@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #86016	; 0x15000
   11204:	ldr	pc, [ip, #3696]!	; 0xe70

00011208 <malloc@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #86016	; 0x15000
   11210:	ldr	pc, [ip, #3688]!	; 0xe68

00011214 <__libc_start_main@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #86016	; 0x15000
   1121c:	ldr	pc, [ip, #3680]!	; 0xe60

00011220 <strftime@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #86016	; 0x15000
   11228:	ldr	pc, [ip, #3672]!	; 0xe58

0001122c <__freading@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #86016	; 0x15000
   11234:	ldr	pc, [ip, #3664]!	; 0xe50

00011238 <localtime@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #86016	; 0x15000
   11240:	ldr	pc, [ip, #3656]!	; 0xe48

00011244 <__gmon_start__@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #86016	; 0x15000
   1124c:	ldr	pc, [ip, #3648]!	; 0xe40

00011250 <getopt_long@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #86016	; 0x15000
   11258:	ldr	pc, [ip, #3640]!	; 0xe38

0001125c <kill@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #86016	; 0x15000
   11264:	ldr	pc, [ip, #3632]!	; 0xe30

00011268 <__ctype_b_loc@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #86016	; 0x15000
   11270:	ldr	pc, [ip, #3624]!	; 0xe28

00011274 <exit@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #86016	; 0x15000
   1127c:	ldr	pc, [ip, #3616]!	; 0xe20

00011280 <bcmp@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #86016	; 0x15000
   11288:	ldr	pc, [ip, #3608]!	; 0xe18

0001128c <ttyname@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #86016	; 0x15000
   11294:	ldr	pc, [ip, #3600]!	; 0xe10

00011298 <strlen@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #86016	; 0x15000
   112a0:	ldr	pc, [ip, #3592]!	; 0xe08

000112a4 <strchr@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #86016	; 0x15000
   112ac:	ldr	pc, [ip, #3584]!	; 0xe00

000112b0 <__errno_location@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #86016	; 0x15000
   112b8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112bc <__sprintf_chk@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #86016	; 0x15000
   112c4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112c8 <__cxa_atexit@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #86016	; 0x15000
   112d0:	ldr	pc, [ip, #3560]!	; 0xde8

000112d4 <memset@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #86016	; 0x15000
   112dc:	ldr	pc, [ip, #3552]!	; 0xde0

000112e0 <strncpy@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #86016	; 0x15000
   112e8:	ldr	pc, [ip, #3544]!	; 0xdd8

000112ec <__printf_chk@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #86016	; 0x15000
   112f4:	ldr	pc, [ip, #3536]!	; 0xdd0

000112f8 <fileno@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #86016	; 0x15000
   11300:	ldr	pc, [ip, #3528]!	; 0xdc8

00011304 <__fprintf_chk@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #86016	; 0x15000
   1130c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011310 <fclose@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #86016	; 0x15000
   11318:	ldr	pc, [ip, #3512]!	; 0xdb8

0001131c <fseeko64@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #86016	; 0x15000
   11324:	ldr	pc, [ip, #3504]!	; 0xdb0

00011328 <endutxent@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #86016	; 0x15000
   11330:	ldr	pc, [ip, #3496]!	; 0xda8

00011334 <setlocale@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #86016	; 0x15000
   1133c:	ldr	pc, [ip, #3488]!	; 0xda0

00011340 <strrchr@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #86016	; 0x15000
   11348:	ldr	pc, [ip, #3480]!	; 0xd98

0001134c <nl_langinfo@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #86016	; 0x15000
   11354:	ldr	pc, [ip, #3472]!	; 0xd90

00011358 <freeaddrinfo@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #86016	; 0x15000
   11360:	ldr	pc, [ip, #3464]!	; 0xd88

00011364 <getaddrinfo@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #86016	; 0x15000
   1136c:	ldr	pc, [ip, #3456]!	; 0xd80

00011370 <bindtextdomain@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #86016	; 0x15000
   11378:	ldr	pc, [ip, #3448]!	; 0xd78

0001137c <__xstat64@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #86016	; 0x15000
   11384:	ldr	pc, [ip, #3440]!	; 0xd70

00011388 <fputs@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #86016	; 0x15000
   11390:	ldr	pc, [ip, #3432]!	; 0xd68

00011394 <strncmp@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #86016	; 0x15000
   1139c:	ldr	pc, [ip, #3424]!	; 0xd60

000113a0 <abort@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #86016	; 0x15000
   113a8:	ldr	pc, [ip, #3416]!	; 0xd58

000113ac <getutxent@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #86016	; 0x15000
   113b4:	ldr	pc, [ip, #3408]!	; 0xd50

000113b8 <__assert_fail@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #86016	; 0x15000
   113c0:	ldr	pc, [ip, #3400]!	; 0xd48

Disassembly of section .text:

000113c4 <.text>:
   113c4:	mov	fp, #0
   113c8:	mov	lr, #0
   113cc:	pop	{r1}		; (ldr r1, [sp], #4)
   113d0:	mov	r2, sp
   113d4:	push	{r2}		; (str r2, [sp, #-4]!)
   113d8:	push	{r0}		; (str r0, [sp, #-4]!)
   113dc:	ldr	ip, [pc, #16]	; 113f4 <__assert_fail@plt+0x3c>
   113e0:	push	{ip}		; (str ip, [sp, #-4]!)
   113e4:	ldr	r0, [pc, #12]	; 113f8 <__assert_fail@plt+0x40>
   113e8:	ldr	r3, [pc, #12]	; 113fc <__assert_fail@plt+0x44>
   113ec:	bl	11214 <__libc_start_main@plt>
   113f0:	bl	113a0 <abort@plt>
   113f4:	andeq	r5, r1, r4, asr #21
   113f8:	muleq	r1, r4, r7
   113fc:	andeq	r5, r1, r4, ror #20
   11400:	ldr	r3, [pc, #20]	; 1141c <__assert_fail@plt+0x64>
   11404:	ldr	r2, [pc, #20]	; 11420 <__assert_fail@plt+0x68>
   11408:	add	r3, pc, r3
   1140c:	ldr	r2, [r3, r2]
   11410:	cmp	r2, #0
   11414:	bxeq	lr
   11418:	b	11244 <__gmon_start__@plt>
   1141c:	strdeq	r5, [r1], -r0
   11420:	andeq	r0, r0, ip, lsl #2
   11424:	ldr	r0, [pc, #24]	; 11444 <__assert_fail@plt+0x8c>
   11428:	ldr	r3, [pc, #24]	; 11448 <__assert_fail@plt+0x90>
   1142c:	cmp	r3, r0
   11430:	bxeq	lr
   11434:	ldr	r3, [pc, #16]	; 1144c <__assert_fail@plt+0x94>
   11438:	cmp	r3, #0
   1143c:	bxeq	lr
   11440:	bx	r3
   11444:	andeq	r7, r2, r8, ror #2
   11448:	andeq	r7, r2, r8, ror #2
   1144c:	andeq	r0, r0, r0
   11450:	ldr	r0, [pc, #36]	; 1147c <__assert_fail@plt+0xc4>
   11454:	ldr	r1, [pc, #36]	; 11480 <__assert_fail@plt+0xc8>
   11458:	sub	r1, r1, r0
   1145c:	asr	r1, r1, #2
   11460:	add	r1, r1, r1, lsr #31
   11464:	asrs	r1, r1, #1
   11468:	bxeq	lr
   1146c:	ldr	r3, [pc, #16]	; 11484 <__assert_fail@plt+0xcc>
   11470:	cmp	r3, #0
   11474:	bxeq	lr
   11478:	bx	r3
   1147c:	andeq	r7, r2, r8, ror #2
   11480:	andeq	r7, r2, r8, ror #2
   11484:	andeq	r0, r0, r0
   11488:	push	{r4, lr}
   1148c:	ldr	r4, [pc, #24]	; 114ac <__assert_fail@plt+0xf4>
   11490:	ldrb	r3, [r4]
   11494:	cmp	r3, #0
   11498:	popne	{r4, pc}
   1149c:	bl	11424 <__assert_fail@plt+0x6c>
   114a0:	mov	r3, #1
   114a4:	strb	r3, [r4]
   114a8:	pop	{r4, pc}
   114ac:	andeq	r7, r2, r0, lsl #3
   114b0:	b	11450 <__assert_fail@plt+0x98>
   114b4:	push	{fp, lr}
   114b8:	mov	fp, sp
   114bc:	sub	sp, sp, #56	; 0x38
   114c0:	mov	r8, r0
   114c4:	cmp	r0, #0
   114c8:	bne	11754 <__assert_fail@plt+0x39c>
   114cc:	movw	r1, #23331	; 0x5b23
   114d0:	mov	r0, #0
   114d4:	mov	r2, #5
   114d8:	movt	r1, #1
   114dc:	bl	11160 <dcgettext@plt>
   114e0:	mov	r1, r0
   114e4:	movw	r0, #29188	; 0x7204
   114e8:	movt	r0, #2
   114ec:	ldr	r2, [r0]
   114f0:	mov	r0, #1
   114f4:	bl	112ec <__printf_chk@plt>
   114f8:	movw	r1, #23375	; 0x5b4f
   114fc:	mov	r0, #0
   11500:	mov	r2, #5
   11504:	movt	r1, #1
   11508:	bl	11160 <dcgettext@plt>
   1150c:	movw	r9, #29052	; 0x717c
   11510:	movt	r9, #2
   11514:	ldr	r1, [r9]
   11518:	bl	110d0 <fputs_unlocked@plt>
   1151c:	movw	r1, #23435	; 0x5b8b
   11520:	mov	r0, #0
   11524:	mov	r2, #5
   11528:	movt	r1, #1
   1152c:	bl	11160 <dcgettext@plt>
   11530:	ldr	r1, [r9]
   11534:	bl	110d0 <fputs_unlocked@plt>
   11538:	movw	r1, #23630	; 0x5c4e
   1153c:	mov	r0, #0
   11540:	mov	r2, #5
   11544:	movt	r1, #1
   11548:	bl	11160 <dcgettext@plt>
   1154c:	ldr	r1, [r9]
   11550:	bl	110d0 <fputs_unlocked@plt>
   11554:	movw	r1, #23680	; 0x5c80
   11558:	mov	r0, #0
   1155c:	mov	r2, #5
   11560:	movt	r1, #1
   11564:	bl	11160 <dcgettext@plt>
   11568:	ldr	r1, [r9]
   1156c:	bl	110d0 <fputs_unlocked@plt>
   11570:	movw	r1, #23867	; 0x5d3b
   11574:	mov	r0, #0
   11578:	mov	r2, #5
   1157c:	movt	r1, #1
   11580:	bl	11160 <dcgettext@plt>
   11584:	ldr	r1, [r9]
   11588:	bl	110d0 <fputs_unlocked@plt>
   1158c:	movw	r1, #24090	; 0x5e1a
   11590:	mov	r0, #0
   11594:	mov	r2, #5
   11598:	movt	r1, #1
   1159c:	bl	11160 <dcgettext@plt>
   115a0:	ldr	r1, [r9]
   115a4:	bl	110d0 <fputs_unlocked@plt>
   115a8:	movw	r1, #24253	; 0x5ebd
   115ac:	mov	r0, #0
   115b0:	mov	r2, #5
   115b4:	movt	r1, #1
   115b8:	bl	11160 <dcgettext@plt>
   115bc:	ldr	r1, [r9]
   115c0:	bl	110d0 <fputs_unlocked@plt>
   115c4:	movw	r1, #24298	; 0x5eea
   115c8:	mov	r0, #0
   115cc:	mov	r2, #5
   115d0:	movt	r1, #1
   115d4:	bl	11160 <dcgettext@plt>
   115d8:	ldr	r1, [r9]
   115dc:	bl	110d0 <fputs_unlocked@plt>
   115e0:	movw	r1, #24352	; 0x5f20
   115e4:	mov	r0, #0
   115e8:	mov	r2, #5
   115ec:	movt	r1, #1
   115f0:	bl	11160 <dcgettext@plt>
   115f4:	movw	r2, #24477	; 0x5f9d
   115f8:	movw	r3, #24491	; 0x5fab
   115fc:	mov	r1, r0
   11600:	mov	r0, #1
   11604:	movt	r2, #1
   11608:	movt	r3, #1
   1160c:	bl	112ec <__printf_chk@plt>
   11610:	movw	r0, #25688	; 0x6458
   11614:	mov	r6, sp
   11618:	movt	r0, #1
   1161c:	mov	r1, r6
   11620:	ldm	r0!, {r2, r3, r4, r5}
   11624:	stmia	r1!, {r2, r3, r4, r5}
   11628:	ldm	r0!, {r2, r3, r4, r5, r7}
   1162c:	stmia	r1!, {r2, r3, r4, r5, r7}
   11630:	ldm	r0, {r2, r3, r4, r5, r7}
   11634:	stm	r1, {r2, r3, r4, r5, r7}
   11638:	movw	r1, #24653	; 0x604d
   1163c:	movw	r5, #24505	; 0x5fb9
   11640:	movt	r1, #1
   11644:	movt	r5, #1
   11648:	mov	r0, r5
   1164c:	bl	110e8 <strcmp@plt>
   11650:	cmp	r0, #0
   11654:	ldrne	r1, [r6, #8]!
   11658:	cmpne	r1, #0
   1165c:	bne	11648 <__assert_fail@plt+0x290>
   11660:	movw	r1, #24748	; 0x60ac
   11664:	ldr	r6, [r6, #4]
   11668:	mov	r0, #0
   1166c:	mov	r2, #5
   11670:	movt	r1, #1
   11674:	bl	11160 <dcgettext@plt>
   11678:	movw	r2, #24548	; 0x5fe4
   1167c:	movw	r3, #24771	; 0x60c3
   11680:	mov	r1, r0
   11684:	mov	r0, #1
   11688:	movt	r2, #1
   1168c:	movt	r3, #1
   11690:	bl	112ec <__printf_chk@plt>
   11694:	cmp	r6, #0
   11698:	mov	r0, #5
   1169c:	mov	r1, #0
   116a0:	moveq	r6, r5
   116a4:	bl	11334 <setlocale@plt>
   116a8:	cmp	r0, #0
   116ac:	beq	116e4 <__assert_fail@plt+0x32c>
   116b0:	movw	r1, #24811	; 0x60eb
   116b4:	mov	r2, #3
   116b8:	movt	r1, #1
   116bc:	bl	11394 <strncmp@plt>
   116c0:	cmp	r0, #0
   116c4:	beq	116e4 <__assert_fail@plt+0x32c>
   116c8:	movw	r1, #24815	; 0x60ef
   116cc:	mov	r0, #0
   116d0:	mov	r2, #5
   116d4:	movt	r1, #1
   116d8:	bl	11160 <dcgettext@plt>
   116dc:	ldr	r1, [r9]
   116e0:	bl	110d0 <fputs_unlocked@plt>
   116e4:	movw	r1, #24886	; 0x6136
   116e8:	mov	r0, #0
   116ec:	mov	r2, #5
   116f0:	movt	r1, #1
   116f4:	bl	11160 <dcgettext@plt>
   116f8:	movw	r2, #24771	; 0x60c3
   116fc:	mov	r1, r0
   11700:	mov	r0, #1
   11704:	mov	r3, r5
   11708:	movt	r2, #1
   1170c:	bl	112ec <__printf_chk@plt>
   11710:	movw	r1, #24913	; 0x6151
   11714:	mov	r0, #0
   11718:	mov	r2, #5
   1171c:	movt	r1, #1
   11720:	bl	11160 <dcgettext@plt>
   11724:	mov	r1, r0
   11728:	movw	r0, #24681	; 0x6069
   1172c:	movw	r3, #24963	; 0x6183
   11730:	cmp	r6, r5
   11734:	mov	r2, r6
   11738:	movt	r0, #1
   1173c:	movt	r3, #1
   11740:	moveq	r3, r0
   11744:	mov	r0, #1
   11748:	bl	112ec <__printf_chk@plt>
   1174c:	mov	r0, r8
   11750:	bl	11274 <exit@plt>
   11754:	movw	r0, #29048	; 0x7178
   11758:	movw	r1, #23292	; 0x5afc
   1175c:	mov	r2, #5
   11760:	movt	r0, #2
   11764:	movt	r1, #1
   11768:	ldr	r5, [r0]
   1176c:	mov	r0, #0
   11770:	bl	11160 <dcgettext@plt>
   11774:	mov	r2, r0
   11778:	movw	r0, #29188	; 0x7204
   1177c:	mov	r1, #1
   11780:	movt	r0, #2
   11784:	ldr	r3, [r0]
   11788:	mov	r0, r5
   1178c:	bl	11304 <__fprintf_chk@plt>
   11790:	b	1174c <__assert_fail@plt+0x394>
   11794:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11798:	add	fp, sp, #28
   1179c:	sub	sp, sp, #20
   117a0:	mov	r5, r0
   117a4:	ldr	r0, [r1]
   117a8:	mov	r4, r1
   117ac:	bl	12dfc <__assert_fail@plt+0x1a44>
   117b0:	movw	r1, #24963	; 0x6183
   117b4:	mov	r0, #6
   117b8:	movt	r1, #1
   117bc:	bl	11334 <setlocale@plt>
   117c0:	movw	r6, #24552	; 0x5fe8
   117c4:	movw	r1, #24509	; 0x5fbd
   117c8:	movt	r6, #1
   117cc:	movt	r1, #1
   117d0:	mov	r0, r6
   117d4:	bl	11370 <bindtextdomain@plt>
   117d8:	mov	r0, r6
   117dc:	bl	11190 <textdomain@plt>
   117e0:	movw	r0, #11204	; 0x2bc4
   117e4:	movt	r0, #1
   117e8:	bl	15ac8 <__assert_fail@plt+0x4710>
   117ec:	movw	r9, #24533	; 0x5fd5
   117f0:	movw	r7, #25400	; 0x6338
   117f4:	mov	r6, #1
   117f8:	mov	r8, #1
   117fc:	movt	r9, #1
   11800:	movt	r7, #1
   11804:	mov	sl, r8
   11808:	mov	r8, #0
   1180c:	mov	r0, r5
   11810:	mov	r1, r4
   11814:	mov	r2, r9
   11818:	mov	r3, r7
   1181c:	str	r8, [sp]
   11820:	bl	11250 <getopt_long@plt>
   11824:	cmp	r0, #83	; 0x53
   11828:	ble	11910 <__assert_fail@plt+0x558>
   1182c:	sub	r1, r0, #97	; 0x61
   11830:	cmp	r1, #22
   11834:	bhi	1192c <__assert_fail@plt+0x574>
   11838:	movw	r0, #29060	; 0x7184
   1183c:	add	r2, pc, #4
   11840:	movt	r0, #2
   11844:	ldr	pc, [r2, r1, lsl #2]
   11848:	andeq	r1, r1, r4, lsr #17
   1184c:	andeq	r1, r1, r4, ror #19
   11850:	andeq	r1, r1, ip, lsl #23
   11854:	andeq	r1, r1, r4, asr #19
   11858:	andeq	r1, r1, ip, lsl #23
   1185c:	andeq	r1, r1, ip, lsl #23
   11860:	andeq	r1, r1, ip, lsl #23
   11864:	andeq	r1, r1, ip, lsl #23
   11868:	andeq	r1, r1, ip, lsl #23
   1186c:	andeq	r1, r1, ip, lsl #23
   11870:	andeq	r1, r1, ip, lsl #23
   11874:	andeq	r1, r1, ip, ror r9
   11878:	andeq	r1, r1, r4, ror #18
   1187c:	andeq	r1, r1, ip, lsl #23
   11880:	andeq	r1, r1, ip, lsl #23
   11884:	andeq	r1, r1, r0, ror r9
   11888:	andeq	r1, r1, r8, asr r9
   1188c:	andeq	r1, r1, r8, lsl #19
   11890:	andeq	r1, r1, ip, asr #18
   11894:	andeq	r1, r1, r0, lsr #19
   11898:	andeq	r1, r1, r0, asr #18
   1189c:	andeq	r1, r1, ip, lsl #23
   118a0:	andeq	r1, r1, r4, lsr r9
   118a4:	movw	r0, #29061	; 0x7185
   118a8:	movt	r0, #2
   118ac:	strb	r6, [r0]
   118b0:	movw	r0, #29060	; 0x7184
   118b4:	movt	r0, #2
   118b8:	strb	r6, [r0]
   118bc:	movw	r0, #29062	; 0x7186
   118c0:	movt	r0, #2
   118c4:	strb	r6, [r0]
   118c8:	movw	r0, #29063	; 0x7187
   118cc:	movt	r0, #2
   118d0:	strb	r6, [r0]
   118d4:	movw	r0, #29064	; 0x7188
   118d8:	movt	r0, #2
   118dc:	strb	r6, [r0]
   118e0:	movw	r0, #29065	; 0x7189
   118e4:	movt	r0, #2
   118e8:	strb	r6, [r0]
   118ec:	movw	r0, #29066	; 0x718a
   118f0:	movt	r0, #2
   118f4:	strb	r6, [r0]
   118f8:	movw	r0, #29067	; 0x718b
   118fc:	movt	r0, #2
   11900:	strb	r6, [r0]
   11904:	movw	r0, #29068	; 0x718c
   11908:	movt	r0, #2
   1190c:	b	119d8 <__assert_fail@plt+0x620>
   11910:	cmp	r0, #71	; 0x47
   11914:	ble	119ec <__assert_fail@plt+0x634>
   11918:	cmp	r0, #72	; 0x48
   1191c:	bne	11b8c <__assert_fail@plt+0x7d4>
   11920:	movw	r0, #29070	; 0x718e
   11924:	movt	r0, #2
   11928:	b	119bc <__assert_fail@plt+0x604>
   1192c:	cmp	r0, #84	; 0x54
   11930:	bne	119ac <__assert_fail@plt+0x5f4>
   11934:	movw	r0, #29067	; 0x718b
   11938:	movt	r0, #2
   1193c:	b	119bc <__assert_fail@plt+0x604>
   11940:	movw	r0, #29066	; 0x718a
   11944:	movt	r0, #2
   11948:	b	11990 <__assert_fail@plt+0x5d8>
   1194c:	movw	r0, #29073	; 0x7191
   11950:	movt	r0, #2
   11954:	b	119bc <__assert_fail@plt+0x604>
   11958:	movw	r0, #29072	; 0x7190
   1195c:	movt	r0, #2
   11960:	b	119bc <__assert_fail@plt+0x604>
   11964:	movw	r0, #29071	; 0x718f
   11968:	movt	r0, #2
   1196c:	b	119bc <__assert_fail@plt+0x604>
   11970:	movw	r0, #29063	; 0x7187
   11974:	movt	r0, #2
   11978:	b	119e4 <__assert_fail@plt+0x62c>
   1197c:	movw	r0, #29062	; 0x7186
   11980:	movt	r0, #2
   11984:	b	11990 <__assert_fail@plt+0x5d8>
   11988:	movw	r0, #29064	; 0x7188
   1198c:	movt	r0, #2
   11990:	strb	r6, [r0]
   11994:	movw	r0, #29068	; 0x718c
   11998:	movt	r0, #2
   1199c:	b	119e4 <__assert_fail@plt+0x62c>
   119a0:	movw	r0, #29065	; 0x7189
   119a4:	movt	r0, #2
   119a8:	b	119e4 <__assert_fail@plt+0x62c>
   119ac:	cmp	r0, #256	; 0x100
   119b0:	bne	11b8c <__assert_fail@plt+0x7d4>
   119b4:	movw	r0, #29074	; 0x7192
   119b8:	movt	r0, #2
   119bc:	mov	r8, sl
   119c0:	b	119e4 <__assert_fail@plt+0x62c>
   119c4:	movw	r0, #29068	; 0x718c
   119c8:	movt	r0, #2
   119cc:	strb	r6, [r0]
   119d0:	movw	r0, #29061	; 0x7185
   119d4:	movt	r0, #2
   119d8:	strb	r6, [r0]
   119dc:	movw	r0, #29069	; 0x718d
   119e0:	movt	r0, #2
   119e4:	strb	r6, [r0]
   119e8:	b	11804 <__assert_fail@plt+0x44c>
   119ec:	cmn	r0, #1
   119f0:	bne	11adc <__assert_fail@plt+0x724>
   119f4:	tst	sl, #1
   119f8:	beq	11a18 <__assert_fail@plt+0x660>
   119fc:	movw	r0, #29073	; 0x7191
   11a00:	mov	r1, #1
   11a04:	movt	r0, #2
   11a08:	strb	r1, [r0]
   11a0c:	movw	r0, #29066	; 0x718a
   11a10:	movt	r0, #2
   11a14:	strb	r1, [r0]
   11a18:	movw	r0, #29069	; 0x718d
   11a1c:	movt	r0, #2
   11a20:	ldrb	r0, [r0]
   11a24:	cmp	r0, #1
   11a28:	movweq	r0, #29073	; 0x7191
   11a2c:	moveq	r1, #0
   11a30:	movteq	r0, #2
   11a34:	strbeq	r1, [r0]
   11a38:	mov	r0, #2
   11a3c:	bl	12cd4 <__assert_fail@plt+0x191c>
   11a40:	movw	r1, #24609	; 0x6021
   11a44:	movw	r2, #24624	; 0x6030
   11a48:	cmp	r0, #0
   11a4c:	movw	r0, #29076	; 0x7194
   11a50:	movw	r6, #29040	; 0x7170
   11a54:	movt	r1, #1
   11a58:	movt	r2, #1
   11a5c:	movt	r0, #2
   11a60:	movt	r6, #2
   11a64:	movne	r2, r1
   11a68:	movw	r1, #29080	; 0x7198
   11a6c:	movt	r1, #2
   11a70:	str	r2, [r0]
   11a74:	mov	r0, #12
   11a78:	movwne	r0, #16
   11a7c:	str	r0, [r1]
   11a80:	ldr	r0, [r6]
   11a84:	sub	r1, r5, r0
   11a88:	add	r2, r1, #1
   11a8c:	cmp	r2, #2
   11a90:	bcc	11ab4 <__assert_fail@plt+0x6fc>
   11a94:	cmp	r1, #1
   11a98:	beq	11ac4 <__assert_fail@plt+0x70c>
   11a9c:	cmp	r1, #2
   11aa0:	bne	11b50 <__assert_fail@plt+0x798>
   11aa4:	movw	r0, #29071	; 0x718f
   11aa8:	mov	r1, #1
   11aac:	movt	r0, #2
   11ab0:	strb	r1, [r0]
   11ab4:	movw	r0, #24477	; 0x5f9d
   11ab8:	mov	r1, #1
   11abc:	movt	r0, #1
   11ac0:	b	11acc <__assert_fail@plt+0x714>
   11ac4:	ldr	r0, [r4, r0, lsl #2]
   11ac8:	mov	r1, #0
   11acc:	bl	11b94 <__assert_fail@plt+0x7dc>
   11ad0:	mov	r0, #0
   11ad4:	sub	sp, fp, #28
   11ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11adc:	cmn	r0, #3
   11ae0:	bne	11b40 <__assert_fail@plt+0x788>
   11ae4:	movw	r0, #28960	; 0x7120
   11ae8:	movw	r2, #24595	; 0x6013
   11aec:	movw	r6, #24562	; 0x5ff2
   11af0:	movw	r7, #24579	; 0x6003
   11af4:	mov	r1, #0
   11af8:	movt	r0, #2
   11afc:	movt	r2, #1
   11b00:	movt	r6, #1
   11b04:	movt	r7, #1
   11b08:	ldr	r3, [r0]
   11b0c:	movw	r0, #29052	; 0x717c
   11b10:	stm	sp, {r6, r7}
   11b14:	str	r2, [sp, #8]
   11b18:	movw	r2, #24548	; 0x5fe4
   11b1c:	str	r1, [sp, #12]
   11b20:	movw	r1, #24505	; 0x5fb9
   11b24:	movt	r0, #2
   11b28:	movt	r1, #1
   11b2c:	movt	r2, #1
   11b30:	ldr	r0, [r0]
   11b34:	bl	14f18 <__assert_fail@plt+0x3b60>
   11b38:	mov	r0, #0
   11b3c:	bl	11274 <exit@plt>
   11b40:	cmn	r0, #2
   11b44:	bne	11b8c <__assert_fail@plt+0x7d4>
   11b48:	mov	r0, #0
   11b4c:	bl	114b4 <__assert_fail@plt+0xfc>
   11b50:	movw	r1, #24636	; 0x603c
   11b54:	mov	r0, #0
   11b58:	mov	r2, #5
   11b5c:	movt	r1, #1
   11b60:	bl	11160 <dcgettext@plt>
   11b64:	mov	r5, r0
   11b68:	ldr	r0, [r6]
   11b6c:	add	r0, r4, r0, lsl #2
   11b70:	ldr	r0, [r0, #8]
   11b74:	bl	147e8 <__assert_fail@plt+0x3430>
   11b78:	mov	r3, r0
   11b7c:	mov	r0, #0
   11b80:	mov	r1, #0
   11b84:	mov	r2, r5
   11b88:	bl	111e4 <error@plt>
   11b8c:	mov	r0, #1
   11b90:	bl	114b4 <__assert_fail@plt+0xfc>
   11b94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b98:	add	fp, sp, #28
   11b9c:	sub	sp, sp, #484	; 0x1e4
   11ba0:	mov	r3, r1
   11ba4:	add	r1, sp, #52	; 0x34
   11ba8:	add	r2, sp, #48	; 0x30
   11bac:	mov	r4, r0
   11bb0:	bl	14998 <__assert_fail@plt+0x35e0>
   11bb4:	cmp	r0, #0
   11bb8:	bne	12788 <__assert_fail@plt+0x13d0>
   11bbc:	movw	r0, #29072	; 0x7190
   11bc0:	ldr	r4, [sp, #48]	; 0x30
   11bc4:	ldr	r9, [sp, #52]	; 0x34
   11bc8:	movt	r0, #2
   11bcc:	ldrb	r0, [r0]
   11bd0:	cmp	r0, #1
   11bd4:	bne	11c7c <__assert_fail@plt+0x8c4>
   11bd8:	mov	r5, #0
   11bdc:	cmp	r9, #0
   11be0:	beq	11c54 <__assert_fail@plt+0x89c>
   11be4:	movw	r7, #24963	; 0x6183
   11be8:	movw	r8, #25069	; 0x61ed
   11bec:	movw	sl, #25218	; 0x6282
   11bf0:	movt	r7, #1
   11bf4:	movt	r8, #1
   11bf8:	movt	sl, #1
   11bfc:	ldrb	r0, [r4, #44]	; 0x2c
   11c00:	sub	r9, r9, #1
   11c04:	cmp	r0, #0
   11c08:	beq	11c48 <__assert_fail@plt+0x890>
   11c0c:	ldrh	r0, [r4]
   11c10:	cmp	r0, #7
   11c14:	bne	11c48 <__assert_fail@plt+0x890>
   11c18:	mov	r0, r4
   11c1c:	bl	14934 <__assert_fail@plt+0x357c>
   11c20:	mov	r6, r0
   11c24:	mov	r0, #1
   11c28:	mov	r1, r8
   11c2c:	mov	r2, r7
   11c30:	mov	r3, r6
   11c34:	bl	112ec <__printf_chk@plt>
   11c38:	mov	r0, r6
   11c3c:	bl	12cac <__assert_fail@plt+0x18f4>
   11c40:	add	r5, r5, #1
   11c44:	mov	r7, sl
   11c48:	add	r4, r4, #384	; 0x180
   11c4c:	cmp	r9, #0
   11c50:	bne	11bfc <__assert_fail@plt+0x844>
   11c54:	movw	r1, #25074	; 0x61f2
   11c58:	mov	r0, #0
   11c5c:	mov	r2, #5
   11c60:	movt	r1, #1
   11c64:	bl	11160 <dcgettext@plt>
   11c68:	mov	r1, r0
   11c6c:	mov	r0, #1
   11c70:	mov	r2, r5
   11c74:	bl	112ec <__printf_chk@plt>
   11c78:	b	12778 <__assert_fail@plt+0x13c0>
   11c7c:	movw	r0, #29070	; 0x718e
   11c80:	movt	r0, #2
   11c84:	ldrb	r0, [r0]
   11c88:	cmp	r0, #1
   11c8c:	bne	11d58 <__assert_fail@plt+0x9a0>
   11c90:	movw	r1, #25094	; 0x6206
   11c94:	mov	r0, #0
   11c98:	mov	r2, #5
   11c9c:	movt	r1, #1
   11ca0:	bl	11160 <dcgettext@plt>
   11ca4:	movw	r1, #25099	; 0x620b
   11ca8:	str	r0, [sp, #44]	; 0x2c
   11cac:	mov	r0, #0
   11cb0:	mov	r2, #5
   11cb4:	movt	r1, #1
   11cb8:	bl	11160 <dcgettext@plt>
   11cbc:	movw	r1, #25104	; 0x6210
   11cc0:	mov	r8, r0
   11cc4:	mov	r0, #0
   11cc8:	mov	r2, #5
   11ccc:	movt	r1, #1
   11cd0:	bl	11160 <dcgettext@plt>
   11cd4:	movw	r1, #25109	; 0x6215
   11cd8:	mov	sl, r0
   11cdc:	mov	r0, #0
   11ce0:	mov	r2, #5
   11ce4:	movt	r1, #1
   11ce8:	bl	11160 <dcgettext@plt>
   11cec:	movw	r1, #25114	; 0x621a
   11cf0:	mov	r5, r0
   11cf4:	mov	r0, #0
   11cf8:	mov	r2, #5
   11cfc:	movt	r1, #1
   11d00:	bl	11160 <dcgettext@plt>
   11d04:	movw	r1, #25118	; 0x621e
   11d08:	mov	r6, r0
   11d0c:	mov	r0, #0
   11d10:	mov	r2, #5
   11d14:	movt	r1, #1
   11d18:	bl	11160 <dcgettext@plt>
   11d1c:	movw	r1, #25126	; 0x6226
   11d20:	mov	r7, r0
   11d24:	mov	r0, #0
   11d28:	mov	r2, #5
   11d2c:	movt	r1, #1
   11d30:	bl	11160 <dcgettext@plt>
   11d34:	add	r1, sp, #8
   11d38:	stm	sp, {r8, sl}
   11d3c:	mov	r2, #32
   11d40:	mvn	r3, #0
   11d44:	stm	r1, {r5, r6, r7}
   11d48:	ldr	r1, [sp, #44]	; 0x2c
   11d4c:	str	r0, [sp, #20]
   11d50:	mvn	r0, #0
   11d54:	bl	127d8 <__assert_fail@plt+0x1420>
   11d58:	movw	sl, #29071	; 0x718f
   11d5c:	movt	sl, #2
   11d60:	ldrb	r0, [sl]
   11d64:	cmp	r0, #1
   11d68:	bne	11d9c <__assert_fail@plt+0x9e4>
   11d6c:	mov	r0, #0
   11d70:	bl	1128c <ttyname@plt>
   11d74:	cmp	r0, #0
   11d78:	beq	12778 <__assert_fail@plt+0x13c0>
   11d7c:	movw	r1, #25088	; 0x6200
   11d80:	mov	r2, #5
   11d84:	mov	r5, r0
   11d88:	movt	r1, #1
   11d8c:	bl	11394 <strncmp@plt>
   11d90:	cmp	r0, #0
   11d94:	addeq	r5, r5, #5
   11d98:	str	r5, [sp, #40]	; 0x28
   11d9c:	cmp	r9, #0
   11da0:	beq	12778 <__assert_fail@plt+0x13c0>
   11da4:	sub	r0, fp, #184	; 0xb8
   11da8:	movw	r7, #29066	; 0x718a
   11dac:	orr	r0, r0, #5
   11db0:	movt	r7, #2
   11db4:	str	r0, [sp, #24]
   11db8:	mov	r0, #-2147483648	; 0x80000000
   11dbc:	str	r0, [sp, #44]	; 0x2c
   11dc0:	ldrb	r0, [sl]
   11dc4:	cmp	r0, #1
   11dc8:	bne	11de4 <__assert_fail@plt+0xa2c>
   11dcc:	ldr	r0, [sp, #40]	; 0x28
   11dd0:	add	r1, r4, #8
   11dd4:	mov	r2, #32
   11dd8:	bl	11394 <strncmp@plt>
   11ddc:	cmp	r0, #0
   11de0:	bne	12758 <__assert_fail@plt+0x13a0>
   11de4:	ldrb	r0, [r7]
   11de8:	add	r6, r4, #332	; 0x14c
   11dec:	cmp	r0, #1
   11df0:	bne	11ee8 <__assert_fail@plt+0xb30>
   11df4:	mov	r8, r4
   11df8:	ldrb	r0, [r8, #44]!	; 0x2c
   11dfc:	cmp	r0, #0
   11e00:	beq	11ee8 <__assert_fail@plt+0xb30>
   11e04:	ldrh	r0, [r4]
   11e08:	cmp	r0, #7
   11e0c:	bne	11ee8 <__assert_fail@plt+0xb30>
   11e10:	ldr	r0, [r4, #4]
   11e14:	movw	r3, #25188	; 0x6264
   11e18:	mov	r1, #1
   11e1c:	mov	r2, #12
   11e20:	movt	r3, #1
   11e24:	str	r0, [sp]
   11e28:	sub	r0, fp, #196	; 0xc4
   11e2c:	bl	112bc <__sprintf_chk@plt>
   11e30:	mov	r0, r4
   11e34:	ldrb	r1, [r0, #8]!
   11e38:	str	r0, [sp, #36]	; 0x24
   11e3c:	sub	r0, fp, #184	; 0xb8
   11e40:	cmp	r1, #47	; 0x2f
   11e44:	beq	11e6c <__assert_fail@plt+0xab4>
   11e48:	mov	r0, #47	; 0x2f
   11e4c:	ldr	r2, [sp, #24]
   11e50:	cmp	r1, #0
   11e54:	strh	r0, [fp, #-180]	; 0xffffff4c
   11e58:	movw	r0, #25647	; 0x642f
   11e5c:	movt	r0, #30309	; 0x7665
   11e60:	str	r0, [fp, #-184]	; 0xffffff48
   11e64:	mov	r0, r2
   11e68:	beq	11eac <__assert_fail@plt+0xaf4>
   11e6c:	add	r2, r4, #40	; 0x28
   11e70:	mov	r7, #0
   11e74:	strb	r1, [r0, r7]
   11e78:	add	r1, r4, r7
   11e7c:	mov	r3, r7
   11e80:	add	r1, r1, #9
   11e84:	cmp	r1, r2
   11e88:	bcs	11e9c <__assert_fail@plt+0xae4>
   11e8c:	ldrb	r1, [r1]
   11e90:	add	r7, r3, #1
   11e94:	cmp	r1, #0
   11e98:	bne	11e74 <__assert_fail@plt+0xabc>
   11e9c:	movw	r7, #29066	; 0x718a
   11ea0:	add	r0, r0, r3
   11ea4:	movt	r7, #2
   11ea8:	add	r2, r0, #1
   11eac:	mov	r0, #0
   11eb0:	sub	r1, fp, #136	; 0x88
   11eb4:	strb	r0, [r2]
   11eb8:	sub	r0, fp, #184	; 0xb8
   11ebc:	bl	15ae0 <__assert_fail@plt+0x4728>
   11ec0:	mov	r1, #63	; 0x3f
   11ec4:	cmp	r0, #0
   11ec8:	beq	123a0 <__assert_fail@plt+0xfe8>
   11ecc:	movw	r3, #25197	; 0x626d
   11ed0:	str	r1, [sp, #32]
   11ed4:	sub	r0, fp, #143	; 0x8f
   11ed8:	mov	r1, #1
   11edc:	mov	r2, #7
   11ee0:	movt	r3, #1
   11ee4:	b	124c4 <__assert_fail@plt+0x110c>
   11ee8:	movw	r0, #29064	; 0x7188
   11eec:	movt	r0, #2
   11ef0:	ldrb	r0, [r0]
   11ef4:	cmp	r0, #1
   11ef8:	bne	12068 <__assert_fail@plt+0xcb0>
   11efc:	ldrh	r0, [r4]
   11f00:	cmp	r0, #1
   11f04:	bne	12068 <__assert_fail@plt+0xcb0>
   11f08:	ldr	r7, [r4, #4]
   11f0c:	asr	r0, r7, #31
   11f10:	add	r6, r7, r0, lsr #24
   11f14:	movw	r0, #29132	; 0x71cc
   11f18:	movt	r0, #2
   11f1c:	ldr	r5, [r0]
   11f20:	cmp	r5, #0
   11f24:	bne	11f58 <__assert_fail@plt+0xba0>
   11f28:	movw	r1, #25316	; 0x62e4
   11f2c:	mov	r0, #0
   11f30:	mov	r2, #5
   11f34:	movt	r1, #1
   11f38:	bl	11160 <dcgettext@plt>
   11f3c:	bl	11298 <strlen@plt>
   11f40:	add	r0, r0, #3
   11f44:	bl	15020 <__assert_fail@plt+0x3c68>
   11f48:	mov	r5, r0
   11f4c:	movw	r0, #29132	; 0x71cc
   11f50:	movt	r0, #2
   11f54:	str	r5, [r0]
   11f58:	movw	r1, #25316	; 0x62e4
   11f5c:	mov	r0, #0
   11f60:	mov	r2, #5
   11f64:	asr	r6, r6, #8
   11f68:	movt	r1, #1
   11f6c:	bl	11160 <dcgettext@plt>
   11f70:	movw	r3, #25326	; 0x62ee
   11f74:	uxtb	r1, r7
   11f78:	stm	sp, {r0, r1}
   11f7c:	mov	r0, r5
   11f80:	mov	r1, #1
   11f84:	mvn	r2, #0
   11f88:	movt	r3, #1
   11f8c:	bl	112bc <__sprintf_chk@plt>
   11f90:	movw	r7, #29136	; 0x71d0
   11f94:	movt	r7, #2
   11f98:	ldr	r5, [r7]
   11f9c:	cmp	r5, #0
   11fa0:	bne	11fcc <__assert_fail@plt+0xc14>
   11fa4:	movw	r1, #25332	; 0x62f4
   11fa8:	mov	r0, #0
   11fac:	mov	r2, #5
   11fb0:	movt	r1, #1
   11fb4:	bl	11160 <dcgettext@plt>
   11fb8:	bl	11298 <strlen@plt>
   11fbc:	add	r0, r0, #2
   11fc0:	bl	15020 <__assert_fail@plt+0x3c68>
   11fc4:	mov	r5, r0
   11fc8:	str	r0, [r7]
   11fcc:	movw	r1, #25332	; 0x62f4
   11fd0:	mov	r0, #0
   11fd4:	mov	r2, #5
   11fd8:	movt	r1, #1
   11fdc:	bl	11160 <dcgettext@plt>
   11fe0:	uxtb	r1, r6
   11fe4:	movw	r3, #25338	; 0x62fa
   11fe8:	mvn	r2, #0
   11fec:	movt	r3, #1
   11ff0:	cmp	r1, #78	; 0x4e
   11ff4:	movweq	r1, #83	; 0x53
   11ff8:	stm	sp, {r0, r1}
   11ffc:	mov	r0, r5
   12000:	mov	r1, #1
   12004:	bl	112bc <__sprintf_chk@plt>
   12008:	movw	r0, #29132	; 0x71cc
   1200c:	movt	r0, #2
   12010:	ldr	r5, [r0]
   12014:	mov	r0, r4
   12018:	bl	12a00 <__assert_fail@plt+0x1648>
   1201c:	mvn	r1, #31
   12020:	ldr	r3, [r7]
   12024:	str	r5, [sp]
   12028:	uxtab	r2, r1, r6
   1202c:	movw	r1, #24963	; 0x6183
   12030:	movt	r1, #1
   12034:	stmib	sp, {r0, r1}
   12038:	mvn	r0, #0
   1203c:	cmp	r2, #95	; 0x5f
   12040:	mov	r2, #32
   12044:	movcs	r3, r1
   12048:	str	r1, [sp, #12]
   1204c:	str	r1, [sp, #20]
   12050:	str	r3, [sp, #16]
   12054:	mvn	r3, #0
   12058:	bl	127d8 <__assert_fail@plt+0x1420>
   1205c:	movw	r7, #29066	; 0x718a
   12060:	movt	r7, #2
   12064:	b	12758 <__assert_fail@plt+0x13a0>
   12068:	movw	r0, #29060	; 0x7184
   1206c:	movt	r0, #2
   12070:	ldrb	r0, [r0]
   12074:	cmp	r0, #1
   12078:	bne	12098 <__assert_fail@plt+0xce0>
   1207c:	ldrh	r0, [r4]
   12080:	cmp	r0, #2
   12084:	bne	12098 <__assert_fail@plt+0xce0>
   12088:	movw	r1, #25343	; 0x62ff
   1208c:	mov	r0, #0
   12090:	movt	r1, #1
   12094:	b	120c4 <__assert_fail@plt+0xd0c>
   12098:	movw	r0, #29065	; 0x7189
   1209c:	movt	r0, #2
   120a0:	ldrb	r0, [r0]
   120a4:	cmp	r0, #1
   120a8:	bne	12108 <__assert_fail@plt+0xd50>
   120ac:	ldrh	r0, [r4]
   120b0:	cmp	r0, #3
   120b4:	bne	12108 <__assert_fail@plt+0xd50>
   120b8:	movw	r1, #25355	; 0x630b
   120bc:	mov	r0, #0
   120c0:	movt	r1, #1
   120c4:	mov	r2, #5
   120c8:	bl	11160 <dcgettext@plt>
   120cc:	mov	r5, r0
   120d0:	mov	r0, r4
   120d4:	bl	12a00 <__assert_fail@plt+0x1648>
   120d8:	movw	r1, #24963	; 0x6183
   120dc:	str	r0, [sp, #4]
   120e0:	mvn	r0, #0
   120e4:	mov	r2, #32
   120e8:	mvn	r3, #0
   120ec:	str	r5, [sp]
   120f0:	movt	r1, #1
   120f4:	str	r1, [sp, #8]
   120f8:	str	r1, [sp, #12]
   120fc:	str	r1, [sp, #16]
   12100:	str	r1, [sp, #20]
   12104:	b	12754 <__assert_fail@plt+0x139c>
   12108:	movw	r0, #29063	; 0x7187
   1210c:	movt	r0, #2
   12110:	ldrb	r0, [r0]
   12114:	cmp	r0, #1
   12118:	bne	1218c <__assert_fail@plt+0xdd4>
   1211c:	ldrh	r0, [r4]
   12120:	cmp	r0, #5
   12124:	bne	1218c <__assert_fail@plt+0xdd4>
   12128:	mov	r0, r4
   1212c:	bl	12a70 <__assert_fail@plt+0x16b8>
   12130:	mov	r5, r0
   12134:	ldr	r0, [r4, #4]
   12138:	movw	r3, #25188	; 0x6264
   1213c:	sub	r6, fp, #196	; 0xc4
   12140:	mov	r1, #1
   12144:	mov	r2, #12
   12148:	movt	r3, #1
   1214c:	str	r0, [sp]
   12150:	mov	r0, r6
   12154:	bl	112bc <__sprintf_chk@plt>
   12158:	mov	r0, r4
   1215c:	bl	12a00 <__assert_fail@plt+0x1648>
   12160:	add	r1, r4, #8
   12164:	str	r0, [sp, #4]
   12168:	mvn	r0, #0
   1216c:	str	r6, [sp, #12]
   12170:	str	r5, [sp, #16]
   12174:	str	r1, [sp]
   12178:	movw	r1, #24963	; 0x6183
   1217c:	movt	r1, #1
   12180:	str	r1, [sp, #8]
   12184:	str	r1, [sp, #20]
   12188:	b	12228 <__assert_fail@plt+0xe70>
   1218c:	movw	r0, #29062	; 0x7186
   12190:	movt	r0, #2
   12194:	ldrb	r0, [r0]
   12198:	cmp	r0, #1
   1219c:	bne	12240 <__assert_fail@plt+0xe88>
   121a0:	ldrh	r0, [r4]
   121a4:	cmp	r0, #6
   121a8:	bne	12240 <__assert_fail@plt+0xe88>
   121ac:	mov	r0, r4
   121b0:	bl	12a70 <__assert_fail@plt+0x16b8>
   121b4:	mov	r5, r0
   121b8:	ldr	r0, [r4, #4]
   121bc:	movw	r3, #25188	; 0x6264
   121c0:	sub	r8, fp, #196	; 0xc4
   121c4:	mov	r1, #1
   121c8:	mov	r2, #12
   121cc:	movt	r3, #1
   121d0:	str	r0, [sp]
   121d4:	mov	r0, r8
   121d8:	bl	112bc <__sprintf_chk@plt>
   121dc:	movw	r1, #25372	; 0x631c
   121e0:	mov	r0, #0
   121e4:	mov	r2, #5
   121e8:	movt	r1, #1
   121ec:	bl	11160 <dcgettext@plt>
   121f0:	mov	r6, r0
   121f4:	mov	r0, r4
   121f8:	bl	12a00 <__assert_fail@plt+0x1648>
   121fc:	str	r0, [sp, #4]
   12200:	movw	r0, #24963	; 0x6183
   12204:	add	r1, r4, #8
   12208:	str	r8, [sp, #12]
   1220c:	str	r5, [sp, #16]
   12210:	movt	r0, #1
   12214:	str	r1, [sp]
   12218:	mov	r1, r6
   1221c:	str	r0, [sp, #8]
   12220:	str	r0, [sp, #20]
   12224:	mvn	r0, #0
   12228:	mov	r2, #32
   1222c:	mov	r3, #32
   12230:	bl	127d8 <__assert_fail@plt+0x1420>
   12234:	mov	r0, r5
   12238:	bl	12cac <__assert_fail@plt+0x18f4>
   1223c:	b	12758 <__assert_fail@plt+0x13a0>
   12240:	movw	r0, #29061	; 0x7185
   12244:	movt	r0, #2
   12248:	ldrb	r0, [r0]
   1224c:	cmp	r0, #1
   12250:	bne	12758 <__assert_fail@plt+0x13a0>
   12254:	ldrh	r0, [r4]
   12258:	cmp	r0, #8
   1225c:	bne	12758 <__assert_fail@plt+0x13a0>
   12260:	mov	r0, r4
   12264:	bl	12a70 <__assert_fail@plt+0x16b8>
   12268:	mov	r8, r0
   1226c:	ldr	r0, [r4, #4]
   12270:	movw	r3, #25188	; 0x6264
   12274:	mov	r1, #1
   12278:	mov	r2, #12
   1227c:	movt	r3, #1
   12280:	str	r0, [sp]
   12284:	sub	r0, fp, #196	; 0xc4
   12288:	bl	112bc <__sprintf_chk@plt>
   1228c:	movw	r7, #29140	; 0x71d4
   12290:	movt	r7, #2
   12294:	ldr	r5, [r7]
   12298:	cmp	r5, #0
   1229c:	bne	122e8 <__assert_fail@plt+0xf30>
   122a0:	movw	r1, #25378	; 0x6322
   122a4:	mov	r0, #0
   122a8:	mov	r2, #5
   122ac:	movt	r1, #1
   122b0:	bl	11160 <dcgettext@plt>
   122b4:	bl	11298 <strlen@plt>
   122b8:	movw	r1, #25384	; 0x6328
   122bc:	mov	r5, r0
   122c0:	mov	r0, #0
   122c4:	mov	r2, #5
   122c8:	movt	r1, #1
   122cc:	bl	11160 <dcgettext@plt>
   122d0:	bl	11298 <strlen@plt>
   122d4:	add	r0, r5, r0
   122d8:	add	r0, r0, #14
   122dc:	bl	15020 <__assert_fail@plt+0x3c68>
   122e0:	mov	r5, r0
   122e4:	str	r0, [r7]
   122e8:	movw	r1, #25378	; 0x6322
   122ec:	mov	r0, #0
   122f0:	mov	r2, #5
   122f4:	movt	r1, #1
   122f8:	bl	11160 <dcgettext@plt>
   122fc:	movw	r1, #25384	; 0x6328
   12300:	ldrsh	sl, [r6]
   12304:	mov	r7, r0
   12308:	mov	r0, #0
   1230c:	mov	r2, #5
   12310:	movt	r1, #1
   12314:	bl	11160 <dcgettext@plt>
   12318:	ldrsh	r1, [r6, #2]
   1231c:	movw	r3, #25390	; 0x632e
   12320:	stm	sp, {r7, sl}
   12324:	str	r0, [sp, #8]
   12328:	mov	r0, r5
   1232c:	mvn	r2, #0
   12330:	movt	r3, #1
   12334:	str	r1, [sp, #12]
   12338:	mov	r1, #1
   1233c:	bl	112bc <__sprintf_chk@plt>
   12340:	mov	r0, r4
   12344:	bl	12a00 <__assert_fail@plt+0x1648>
   12348:	movw	r1, #29140	; 0x71d4
   1234c:	add	r2, r4, #8
   12350:	str	r0, [sp, #4]
   12354:	sub	r0, fp, #196	; 0xc4
   12358:	str	r8, [sp, #16]
   1235c:	movt	r1, #2
   12360:	str	r2, [sp]
   12364:	str	r0, [sp, #12]
   12368:	mvn	r0, #0
   1236c:	mov	r2, #32
   12370:	ldr	r3, [r1]
   12374:	movw	r1, #24963	; 0x6183
   12378:	movt	r1, #1
   1237c:	str	r1, [sp, #8]
   12380:	str	r3, [sp, #20]
   12384:	mov	r3, #32
   12388:	bl	127d8 <__assert_fail@plt+0x1420>
   1238c:	mov	r0, r8
   12390:	bl	12cac <__assert_fail@plt+0x18f4>
   12394:	movw	sl, #29071	; 0x718f
   12398:	movt	sl, #2
   1239c:	b	1205c <__assert_fail@plt+0xca4>
   123a0:	ldrb	r0, [fp, #-120]	; 0xffffff88
   123a4:	ldr	r5, [fp, #-64]	; 0xffffffc0
   123a8:	mov	r1, #43	; 0x2b
   123ac:	tst	r0, #16
   123b0:	movweq	r1, #45	; 0x2d
   123b4:	cmp	r5, #0
   123b8:	beq	11ecc <__assert_fail@plt+0xb14>
   123bc:	movw	r0, #28956	; 0x711c
   123c0:	str	r1, [sp, #32]
   123c4:	movt	r0, #2
   123c8:	ldr	r0, [r0]
   123cc:	cmp	r0, #-2147483648	; 0x80000000
   123d0:	bne	123e0 <__assert_fail@plt+0x1028>
   123d4:	movw	r0, #28956	; 0x711c
   123d8:	movt	r0, #2
   123dc:	bl	11148 <time@plt>
   123e0:	ldr	r0, [sp, #44]	; 0x2c
   123e4:	cmp	r5, r0
   123e8:	ble	12490 <__assert_fail@plt+0x10d8>
   123ec:	movw	r0, #28956	; 0x711c
   123f0:	movt	r0, #2
   123f4:	ldr	r0, [r0]
   123f8:	cmp	r0, r5
   123fc:	blt	12490 <__assert_fail@plt+0x10d8>
   12400:	movw	r1, #44672	; 0xae80
   12404:	movt	r1, #65534	; 0xfffe
   12408:	add	r1, r0, r1
   1240c:	cmp	r1, r5
   12410:	bge	12490 <__assert_fail@plt+0x10d8>
   12414:	sub	r1, r0, r5
   12418:	movw	r0, #25214	; 0x627e
   1241c:	movt	r0, #1
   12420:	cmp	r1, #60	; 0x3c
   12424:	blt	124a4 <__assert_fail@plt+0x10ec>
   12428:	movw	r0, #20864	; 0x5180
   1242c:	movt	r0, #1
   12430:	cmp	r1, r0
   12434:	bge	127b8 <__assert_fail@plt+0x1400>
   12438:	movw	r0, #46021	; 0xb3c5
   1243c:	movw	r5, #29092	; 0x71a4
   12440:	movw	r3, #25300	; 0x62d4
   12444:	movt	r0, #37282	; 0x91a2
   12448:	movt	r5, #2
   1244c:	movt	r3, #1
   12450:	umull	r0, r2, r1, r0
   12454:	lsr	r0, r2, #11
   12458:	mov	r2, #3600	; 0xe10
   1245c:	mls	r1, r0, r2, r1
   12460:	movw	r2, #34953	; 0x8889
   12464:	movt	r2, #34952	; 0x8888
   12468:	uxth	r1, r1
   1246c:	umull	r1, r2, r1, r2
   12470:	lsr	r1, r2, #5
   12474:	stm	sp, {r0, r1}
   12478:	mov	r0, r5
   1247c:	mov	r1, #1
   12480:	mov	r2, #6
   12484:	bl	112bc <__sprintf_chk@plt>
   12488:	mov	r0, r5
   1248c:	b	124a4 <__assert_fail@plt+0x10ec>
   12490:	movw	r1, #25310	; 0x62de
   12494:	mov	r0, #0
   12498:	mov	r2, #5
   1249c:	movt	r1, #1
   124a0:	bl	11160 <dcgettext@plt>
   124a4:	movw	r3, #25192	; 0x6268
   124a8:	mov	r1, #6
   124ac:	str	r0, [sp, #4]
   124b0:	sub	r0, fp, #143	; 0x8f
   124b4:	mov	r2, #7
   124b8:	str	r1, [sp]
   124bc:	mov	r1, #1
   124c0:	movt	r3, #1
   124c4:	bl	112bc <__sprintf_chk@plt>
   124c8:	ldrb	r0, [r4, #76]	; 0x4c
   124cc:	cmp	r0, #0
   124d0:	beq	125dc <__assert_fail@plt+0x1224>
   124d4:	mov	r2, #0
   124d8:	add	r7, sp, #59	; 0x3b
   124dc:	strb	r0, [r7, r2]
   124e0:	add	r0, r4, r2
   124e4:	mov	r1, r2
   124e8:	add	r0, r0, #77	; 0x4d
   124ec:	cmp	r0, r6
   124f0:	bcs	12504 <__assert_fail@plt+0x114c>
   124f4:	ldrb	r0, [r0]
   124f8:	add	r2, r1, #1
   124fc:	cmp	r0, #0
   12500:	bne	124dc <__assert_fail@plt+0x1124>
   12504:	add	r0, r7, r1
   12508:	mov	r6, #0
   1250c:	mov	r1, #58	; 0x3a
   12510:	strb	r6, [r0, #1]
   12514:	mov	r0, r7
   12518:	bl	112a4 <strchr@plt>
   1251c:	cmp	r0, #0
   12520:	mov	sl, #0
   12524:	movw	r5, #29088	; 0x71a0
   12528:	movne	r1, #0
   1252c:	movt	r5, #2
   12530:	strbne	r1, [r0], #1
   12534:	movne	sl, r0
   12538:	ldrb	r0, [sp, #59]	; 0x3b
   1253c:	cmp	r0, #0
   12540:	beq	12564 <__assert_fail@plt+0x11ac>
   12544:	movw	r0, #29074	; 0x7192
   12548:	movt	r0, #2
   1254c:	ldrb	r0, [r0]
   12550:	cmp	r0, #1
   12554:	bne	12564 <__assert_fail@plt+0x11ac>
   12558:	mov	r0, r7
   1255c:	bl	12af4 <__assert_fail@plt+0x173c>
   12560:	mov	r6, r0
   12564:	mov	r0, r7
   12568:	cmp	r6, #0
   1256c:	ldr	r5, [r5]
   12570:	mov	r7, r6
   12574:	str	r6, [sp, #28]
   12578:	moveq	r7, r0
   1257c:	mov	r0, r7
   12580:	bl	11298 <strlen@plt>
   12584:	mov	r6, r0
   12588:	cmp	sl, #0
   1258c:	beq	12600 <__assert_fail@plt+0x1248>
   12590:	mov	r0, sl
   12594:	bl	11298 <strlen@plt>
   12598:	add	r0, r6, r0
   1259c:	add	r0, r0, #4
   125a0:	cmp	r5, r0
   125a4:	bcs	12640 <__assert_fail@plt+0x1288>
   125a8:	movw	r1, #29088	; 0x71a0
   125ac:	movt	r1, #2
   125b0:	str	r0, [r1]
   125b4:	movw	r0, #29084	; 0x719c
   125b8:	mov	r5, r1
   125bc:	movt	r0, #2
   125c0:	mov	r6, r0
   125c4:	ldr	r0, [r0]
   125c8:	bl	12cac <__assert_fail@plt+0x18f4>
   125cc:	ldr	r0, [r5]
   125d0:	bl	15020 <__assert_fail@plt+0x3c68>
   125d4:	str	r0, [r6]
   125d8:	b	1264c <__assert_fail@plt+0x1294>
   125dc:	movw	r5, #29088	; 0x71a0
   125e0:	movt	r5, #2
   125e4:	ldr	r0, [r5]
   125e8:	cmp	r0, #0
   125ec:	beq	12678 <__assert_fail@plt+0x12c0>
   125f0:	movw	r0, #29084	; 0x719c
   125f4:	movt	r0, #2
   125f8:	ldr	r0, [r0]
   125fc:	b	126a0 <__assert_fail@plt+0x12e8>
   12600:	add	r0, r6, #3
   12604:	cmp	r5, r0
   12608:	bcs	126b4 <__assert_fail@plt+0x12fc>
   1260c:	movw	r1, #29088	; 0x71a0
   12610:	movt	r1, #2
   12614:	str	r0, [r1]
   12618:	movw	r0, #29084	; 0x719c
   1261c:	mov	r5, r1
   12620:	movt	r0, #2
   12624:	mov	r6, r0
   12628:	ldr	r0, [r0]
   1262c:	bl	12cac <__assert_fail@plt+0x18f4>
   12630:	ldr	r0, [r5]
   12634:	bl	15020 <__assert_fail@plt+0x3c68>
   12638:	str	r0, [r6]
   1263c:	b	126c0 <__assert_fail@plt+0x1308>
   12640:	movw	r0, #29084	; 0x719c
   12644:	movt	r0, #2
   12648:	ldr	r0, [r0]
   1264c:	movw	r3, #25201	; 0x6271
   12650:	ldr	r6, [sp, #36]	; 0x24
   12654:	mov	r1, #1
   12658:	mvn	r2, #0
   1265c:	sub	r5, fp, #196	; 0xc4
   12660:	stm	sp, {r7, sl}
   12664:	movt	r3, #1
   12668:	bl	112bc <__sprintf_chk@plt>
   1266c:	movw	sl, #29071	; 0x718f
   12670:	movt	sl, #2
   12674:	b	126e8 <__assert_fail@plt+0x1330>
   12678:	mov	r0, #1
   1267c:	str	r0, [r5]
   12680:	movw	r0, #29084	; 0x719c
   12684:	movt	r0, #2
   12688:	mov	r6, r0
   1268c:	ldr	r0, [r0]
   12690:	bl	12cac <__assert_fail@plt+0x18f4>
   12694:	ldr	r0, [r5]
   12698:	bl	15020 <__assert_fail@plt+0x3c68>
   1269c:	str	r0, [r6]
   126a0:	ldr	r6, [sp, #36]	; 0x24
   126a4:	sub	r5, fp, #196	; 0xc4
   126a8:	mov	r1, #0
   126ac:	strb	r1, [r0]
   126b0:	b	12704 <__assert_fail@plt+0x134c>
   126b4:	movw	r0, #29084	; 0x719c
   126b8:	movt	r0, #2
   126bc:	ldr	r0, [r0]
   126c0:	movw	r3, #25209	; 0x6279
   126c4:	ldr	r6, [sp, #36]	; 0x24
   126c8:	movw	sl, #29071	; 0x718f
   126cc:	mov	r1, #1
   126d0:	mvn	r2, #0
   126d4:	sub	r5, fp, #196	; 0xc4
   126d8:	str	r7, [sp]
   126dc:	movt	r3, #1
   126e0:	movt	sl, #2
   126e4:	bl	112bc <__sprintf_chk@plt>
   126e8:	ldr	r0, [sp, #28]
   126ec:	cmp	r0, #0
   126f0:	beq	126fc <__assert_fail@plt+0x1344>
   126f4:	mov	r0, r7
   126f8:	bl	12cac <__assert_fail@plt+0x18f4>
   126fc:	movw	r7, #29066	; 0x718a
   12700:	movt	r7, #2
   12704:	mov	r0, r4
   12708:	bl	12a00 <__assert_fail@plt+0x1648>
   1270c:	movw	r1, #29084	; 0x719c
   12710:	movw	r2, #24963	; 0x6183
   12714:	str	r0, [sp, #4]
   12718:	sub	r0, fp, #143	; 0x8f
   1271c:	mov	r3, #32
   12720:	str	r6, [sp]
   12724:	str	r5, [sp, #12]
   12728:	movt	r1, #2
   1272c:	movt	r2, #1
   12730:	str	r0, [sp, #8]
   12734:	mov	r0, #32
   12738:	ldr	r1, [r1]
   1273c:	str	r2, [sp, #20]
   12740:	cmp	r1, #0
   12744:	moveq	r1, r2
   12748:	ldr	r2, [sp, #32]
   1274c:	str	r1, [sp, #16]
   12750:	mov	r1, r8
   12754:	bl	127d8 <__assert_fail@plt+0x1420>
   12758:	ldrh	r0, [r4]
   1275c:	sub	r9, r9, #1
   12760:	cmp	r0, #2
   12764:	ldreq	r0, [r4, #340]	; 0x154
   12768:	add	r4, r4, #384	; 0x180
   1276c:	streq	r0, [sp, #44]	; 0x2c
   12770:	cmp	r9, #0
   12774:	bne	11dc0 <__assert_fail@plt+0xa08>
   12778:	ldr	r0, [sp, #48]	; 0x30
   1277c:	bl	12cac <__assert_fail@plt+0x18f4>
   12780:	sub	sp, fp, #28
   12784:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12788:	bl	112b0 <__errno_location@plt>
   1278c:	ldr	r5, [r0]
   12790:	mov	r0, #0
   12794:	mov	r1, #3
   12798:	mov	r2, r4
   1279c:	bl	14654 <__assert_fail@plt+0x329c>
   127a0:	movw	r2, #25775	; 0x64af
   127a4:	mov	r3, r0
   127a8:	mov	r0, #1
   127ac:	mov	r1, r5
   127b0:	movt	r2, #1
   127b4:	bl	111e4 <error@plt>
   127b8:	movw	r0, #25220	; 0x6284
   127bc:	movw	r1, #25250	; 0x62a2
   127c0:	movw	r3, #25260	; 0x62ac
   127c4:	mov	r2, #205	; 0xcd
   127c8:	movt	r0, #1
   127cc:	movt	r1, #1
   127d0:	movt	r3, #1
   127d4:	bl	113b8 <__assert_fail@plt>
   127d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127dc:	add	fp, sp, #28
   127e0:	sub	sp, sp, #68	; 0x44
   127e4:	mov	r7, r0
   127e8:	movw	r0, #29068	; 0x718c
   127ec:	movw	r9, #28952	; 0x7118
   127f0:	movw	r5, #29073	; 0x7191
   127f4:	mov	r4, r3
   127f8:	mov	r6, r1
   127fc:	movt	r0, #2
   12800:	movt	r9, #2
   12804:	movt	r5, #2
   12808:	ldrb	r0, [r0]
   1280c:	strb	r2, [r9, #1]
   12810:	cmp	r0, #1
   12814:	bne	12858 <__assert_fail@plt+0x14a0>
   12818:	ldrb	r0, [r5]
   1281c:	cmp	r0, #0
   12820:	bne	12858 <__assert_fail@plt+0x14a0>
   12824:	ldr	r8, [fp, #16]
   12828:	mov	r0, r8
   1282c:	bl	11298 <strlen@plt>
   12830:	cmp	r0, #6
   12834:	bhi	12858 <__assert_fail@plt+0x14a0>
   12838:	movw	r3, #25131	; 0x622b
   1283c:	sub	r0, fp, #40	; 0x28
   12840:	mov	r1, #1
   12844:	mov	r2, #8
   12848:	str	r8, [sp]
   1284c:	movt	r3, #1
   12850:	bl	112bc <__sprintf_chk@plt>
   12854:	b	12860 <__assert_fail@plt+0x14a8>
   12858:	mov	r0, #0
   1285c:	strb	r0, [fp, #-40]	; 0xffffffd8
   12860:	ldrb	r0, [r5]
   12864:	cmp	r0, #0
   12868:	bne	128a4 <__assert_fail@plt+0x14ec>
   1286c:	ldr	r8, [fp, #20]
   12870:	mov	r0, r8
   12874:	bl	11298 <strlen@plt>
   12878:	cmp	r0, #11
   1287c:	bhi	128a4 <__assert_fail@plt+0x14ec>
   12880:	movw	r3, #25137	; 0x6231
   12884:	add	r0, sp, #43	; 0x2b
   12888:	mov	r1, #1
   1288c:	mov	r2, #13
   12890:	mov	r5, r7
   12894:	str	r8, [sp]
   12898:	movt	r3, #1
   1289c:	bl	112bc <__sprintf_chk@plt>
   128a0:	b	128b0 <__assert_fail@plt+0x14f8>
   128a4:	mov	r5, r7
   128a8:	mov	r0, #0
   128ac:	strb	r0, [sp, #43]	; 0x2b
   128b0:	movw	sl, #29069	; 0x718d
   128b4:	ldr	r8, [fp, #28]
   128b8:	mov	r0, #1
   128bc:	movt	sl, #2
   128c0:	ldrb	r1, [sl]
   128c4:	cmp	r1, #1
   128c8:	bne	128e4 <__assert_fail@plt+0x152c>
   128cc:	mov	r0, r8
   128d0:	bl	11298 <strlen@plt>
   128d4:	mov	r1, r0
   128d8:	add	r0, r0, #2
   128dc:	cmp	r1, #12
   128e0:	movwcc	r0, #14
   128e4:	bl	15020 <__assert_fail@plt+0x3c68>
   128e8:	mov	r7, r0
   128ec:	ldrb	r0, [sl]
   128f0:	cmp	r0, #1
   128f4:	bne	12918 <__assert_fail@plt+0x1560>
   128f8:	movw	r3, #25143	; 0x6237
   128fc:	mov	r0, r7
   12900:	mov	r1, #1
   12904:	mvn	r2, #0
   12908:	str	r8, [sp]
   1290c:	movt	r3, #1
   12910:	bl	112bc <__sprintf_chk@plt>
   12914:	b	12920 <__assert_fail@plt+0x1568>
   12918:	mov	r0, #0
   1291c:	strb	r0, [r7]
   12920:	movw	r0, #29067	; 0x718b
   12924:	mov	r2, r4
   12928:	movw	r4, #25183	; 0x625f
   1292c:	cmp	r6, #0
   12930:	movw	r1, #29080	; 0x7198
   12934:	mov	r3, r5
   12938:	ldr	r5, [fp, #24]
   1293c:	str	r7, [sp, #36]	; 0x24
   12940:	add	ip, sp, #43	; 0x2b
   12944:	movt	r0, #2
   12948:	movt	r4, #1
   1294c:	movne	r4, r6
   12950:	movt	r1, #2
   12954:	movw	r6, #24963	; 0x6183
   12958:	movt	r6, #1
   1295c:	ldrb	r0, [r0]
   12960:	ldr	r1, [r1]
   12964:	str	r5, [sp, #32]
   12968:	sub	r5, fp, #40	; 0x28
   1296c:	cmp	r0, #0
   12970:	ldr	r0, [fp, #8]
   12974:	movne	r6, r9
   12978:	stm	sp, {r4, r6}
   1297c:	str	r2, [sp, #8]
   12980:	movw	r2, #25150	; 0x623e
   12984:	str	r1, [sp, #16]
   12988:	add	r1, sp, #20
   1298c:	movt	r2, #1
   12990:	str	r0, [sp, #12]
   12994:	ldr	r0, [fp, #12]
   12998:	stm	r1, {r0, r5, ip}
   1299c:	sub	r0, fp, #32
   129a0:	mov	r1, #1
   129a4:	bl	111f0 <__asprintf_chk@plt>
   129a8:	cmn	r0, #1
   129ac:	beq	129fc <__assert_fail@plt+0x1644>
   129b0:	ldr	r4, [fp, #-32]	; 0xffffffe0
   129b4:	mov	r0, r4
   129b8:	bl	11298 <strlen@plt>
   129bc:	add	r0, r0, r4
   129c0:	add	r0, r0, #1
   129c4:	ldrb	r1, [r0, #-2]
   129c8:	sub	r0, r0, #1
   129cc:	cmp	r1, #32
   129d0:	beq	129c4 <__assert_fail@plt+0x160c>
   129d4:	mov	r1, #0
   129d8:	strb	r1, [r0]
   129dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   129e0:	bl	111fc <puts@plt>
   129e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   129e8:	bl	12cac <__assert_fail@plt+0x18f4>
   129ec:	mov	r0, r7
   129f0:	bl	12cac <__assert_fail@plt+0x18f4>
   129f4:	sub	sp, fp, #28
   129f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129fc:	bl	1544c <__assert_fail@plt+0x4094>
   12a00:	push	{r4, sl, fp, lr}
   12a04:	add	fp, sp, #8
   12a08:	sub	sp, sp, #8
   12a0c:	ldr	r0, [r0, #340]	; 0x154
   12a10:	str	r0, [sp, #4]
   12a14:	add	r0, sp, #4
   12a18:	bl	11238 <localtime@plt>
   12a1c:	cmp	r0, #0
   12a20:	beq	12a4c <__assert_fail@plt+0x1694>
   12a24:	mov	r3, r0
   12a28:	movw	r0, #29076	; 0x7194
   12a2c:	movw	r4, #29098	; 0x71aa
   12a30:	mov	r1, #33	; 0x21
   12a34:	movt	r0, #2
   12a38:	movt	r4, #2
   12a3c:	ldr	r2, [r0]
   12a40:	mov	r0, r4
   12a44:	bl	11220 <strftime@plt>
   12a48:	b	12a64 <__assert_fail@plt+0x16ac>
   12a4c:	ldr	r0, [sp, #4]
   12a50:	movw	r2, #29098	; 0x71aa
   12a54:	movt	r2, #2
   12a58:	asr	r1, r0, #31
   12a5c:	bl	12d40 <__assert_fail@plt+0x1988>
   12a60:	mov	r4, r0
   12a64:	mov	r0, r4
   12a68:	sub	sp, fp, #8
   12a6c:	pop	{r4, sl, fp, pc}
   12a70:	push	{r4, r5, r6, sl, fp, lr}
   12a74:	add	fp, sp, #16
   12a78:	movw	r6, #25368	; 0x6318
   12a7c:	mov	r5, r0
   12a80:	mov	r0, #0
   12a84:	mov	r2, #5
   12a88:	movt	r6, #1
   12a8c:	mov	r1, r6
   12a90:	bl	11160 <dcgettext@plt>
   12a94:	bl	11298 <strlen@plt>
   12a98:	add	r0, r0, #5
   12a9c:	bl	15020 <__assert_fail@plt+0x3c68>
   12aa0:	mov	r4, r0
   12aa4:	mov	r0, #0
   12aa8:	mov	r1, r6
   12aac:	mov	r2, #5
   12ab0:	bl	11160 <dcgettext@plt>
   12ab4:	mov	r1, r0
   12ab8:	mov	r0, r4
   12abc:	bl	11154 <stpcpy@plt>
   12ac0:	add	r1, r5, #44	; 0x2c
   12ac4:	add	r2, r5, #40	; 0x28
   12ac8:	ldrb	r3, [r2]
   12acc:	cmp	r3, #0
   12ad0:	beq	12ae4 <__assert_fail@plt+0x172c>
   12ad4:	add	r2, r2, #1
   12ad8:	strb	r3, [r0], #1
   12adc:	cmp	r2, r1
   12ae0:	bcc	12ac8 <__assert_fail@plt+0x1710>
   12ae4:	mov	r1, #0
   12ae8:	strb	r1, [r0]
   12aec:	mov	r0, r4
   12af0:	pop	{r4, r5, r6, sl, fp, pc}
   12af4:	movw	r1, #29144	; 0x71d8
   12af8:	movt	r1, #2
   12afc:	b	12b00 <__assert_fail@plt+0x1748>
   12b00:	push	{r4, r5, r6, sl, fp, lr}
   12b04:	add	fp, sp, #16
   12b08:	sub	sp, sp, #8
   12b0c:	movw	r2, #29148	; 0x71dc
   12b10:	mov	r6, r0
   12b14:	mov	r0, #2
   12b18:	mov	r5, r1
   12b1c:	mov	r4, #0
   12b20:	add	r3, sp, #4
   12b24:	mov	r1, #0
   12b28:	movt	r2, #2
   12b2c:	str	r4, [sp, #4]
   12b30:	str	r0, [r2]
   12b34:	mov	r0, r6
   12b38:	bl	11364 <getaddrinfo@plt>
   12b3c:	cmp	r0, #0
   12b40:	beq	12b50 <__assert_fail@plt+0x1798>
   12b44:	cmp	r5, #0
   12b48:	strne	r0, [r5]
   12b4c:	b	12b88 <__assert_fail@plt+0x17d0>
   12b50:	ldr	r0, [sp, #4]
   12b54:	ldr	r0, [r0, #24]
   12b58:	cmp	r0, #0
   12b5c:	movne	r6, r0
   12b60:	mov	r0, r6
   12b64:	bl	1116c <strdup@plt>
   12b68:	mov	r4, r0
   12b6c:	cmp	r5, #0
   12b70:	beq	12b80 <__assert_fail@plt+0x17c8>
   12b74:	cmp	r4, #0
   12b78:	mvneq	r0, #9
   12b7c:	streq	r0, [r5]
   12b80:	ldr	r0, [sp, #4]
   12b84:	bl	11358 <freeaddrinfo@plt>
   12b88:	mov	r0, r4
   12b8c:	sub	sp, fp, #16
   12b90:	pop	{r4, r5, r6, sl, fp, pc}
   12b94:	movw	r0, #29144	; 0x71d8
   12b98:	movt	r0, #2
   12b9c:	ldr	r0, [r0]
   12ba0:	b	11118 <gai_strerror@plt>
   12ba4:	movw	r1, #29180	; 0x71fc
   12ba8:	movt	r1, #2
   12bac:	str	r0, [r1]
   12bb0:	bx	lr
   12bb4:	movw	r1, #29184	; 0x7200
   12bb8:	movt	r1, #2
   12bbc:	strb	r0, [r1]
   12bc0:	bx	lr
   12bc4:	push	{r4, r5, r6, sl, fp, lr}
   12bc8:	add	fp, sp, #16
   12bcc:	sub	sp, sp, #8
   12bd0:	movw	r0, #29052	; 0x717c
   12bd4:	movt	r0, #2
   12bd8:	ldr	r0, [r0]
   12bdc:	bl	15564 <__assert_fail@plt+0x41ac>
   12be0:	cmp	r0, #0
   12be4:	beq	12c0c <__assert_fail@plt+0x1854>
   12be8:	movw	r0, #29184	; 0x7200
   12bec:	movt	r0, #2
   12bf0:	ldrb	r0, [r0]
   12bf4:	cmp	r0, #0
   12bf8:	beq	12c2c <__assert_fail@plt+0x1874>
   12bfc:	bl	112b0 <__errno_location@plt>
   12c00:	ldr	r0, [r0]
   12c04:	cmp	r0, #32
   12c08:	bne	12c2c <__assert_fail@plt+0x1874>
   12c0c:	movw	r0, #29048	; 0x7178
   12c10:	movt	r0, #2
   12c14:	ldr	r0, [r0]
   12c18:	bl	15564 <__assert_fail@plt+0x41ac>
   12c1c:	cmp	r0, #0
   12c20:	subeq	sp, fp, #16
   12c24:	popeq	{r4, r5, r6, sl, fp, pc}
   12c28:	b	12c9c <__assert_fail@plt+0x18e4>
   12c2c:	movw	r1, #25759	; 0x649f
   12c30:	mov	r0, #0
   12c34:	mov	r2, #5
   12c38:	movt	r1, #1
   12c3c:	bl	11160 <dcgettext@plt>
   12c40:	mov	r4, r0
   12c44:	movw	r0, #29180	; 0x71fc
   12c48:	movt	r0, #2
   12c4c:	ldr	r6, [r0]
   12c50:	bl	112b0 <__errno_location@plt>
   12c54:	ldr	r5, [r0]
   12c58:	cmp	r6, #0
   12c5c:	bne	12c78 <__assert_fail@plt+0x18c0>
   12c60:	movw	r2, #25775	; 0x64af
   12c64:	mov	r0, #0
   12c68:	mov	r1, r5
   12c6c:	mov	r3, r4
   12c70:	movt	r2, #1
   12c74:	b	12c98 <__assert_fail@plt+0x18e0>
   12c78:	mov	r0, r6
   12c7c:	bl	145a8 <__assert_fail@plt+0x31f0>
   12c80:	movw	r2, #25771	; 0x64ab
   12c84:	mov	r3, r0
   12c88:	str	r4, [sp]
   12c8c:	mov	r0, #0
   12c90:	mov	r1, r5
   12c94:	movt	r2, #1
   12c98:	bl	111e4 <error@plt>
   12c9c:	movw	r0, #28964	; 0x7124
   12ca0:	movt	r0, #2
   12ca4:	ldr	r0, [r0]
   12ca8:	bl	11124 <_exit@plt>
   12cac:	push	{r4, r5, r6, sl, fp, lr}
   12cb0:	add	fp, sp, #16
   12cb4:	mov	r4, r0
   12cb8:	bl	112b0 <__errno_location@plt>
   12cbc:	ldr	r6, [r0]
   12cc0:	mov	r5, r0
   12cc4:	mov	r0, r4
   12cc8:	bl	1110c <free@plt>
   12ccc:	str	r6, [r5]
   12cd0:	pop	{r4, r5, r6, sl, fp, pc}
   12cd4:	push	{r4, sl, fp, lr}
   12cd8:	add	fp, sp, #8
   12cdc:	sub	sp, sp, #264	; 0x108
   12ce0:	add	r1, sp, #7
   12ce4:	movw	r2, #257	; 0x101
   12ce8:	bl	14acc <__assert_fail@plt+0x3714>
   12cec:	mov	r4, #0
   12cf0:	cmp	r0, #0
   12cf4:	bne	12d34 <__assert_fail@plt+0x197c>
   12cf8:	movw	r1, #25778	; 0x64b2
   12cfc:	add	r0, sp, #7
   12d00:	mov	r2, #2
   12d04:	movt	r1, #1
   12d08:	bl	11280 <bcmp@plt>
   12d0c:	cmp	r0, #0
   12d10:	beq	12d34 <__assert_fail@plt+0x197c>
   12d14:	movw	r1, #25780	; 0x64b4
   12d18:	add	r0, sp, #7
   12d1c:	mov	r2, #6
   12d20:	movt	r1, #1
   12d24:	bl	11280 <bcmp@plt>
   12d28:	cmp	r0, #0
   12d2c:	mov	r4, r0
   12d30:	movwne	r4, #1
   12d34:	mov	r0, r4
   12d38:	sub	sp, fp, #8
   12d3c:	pop	{r4, sl, fp, pc}
   12d40:	push	{r4, r5, r6, sl, fp, lr}
   12d44:	add	fp, sp, #16
   12d48:	mov	r5, r0
   12d4c:	mov	r0, #0
   12d50:	mov	r4, r1
   12d54:	add	r6, r2, #19
   12d58:	cmp	r1, #0
   12d5c:	strb	r0, [r2, #20]
   12d60:	bmi	12dac <__assert_fail@plt+0x19f4>
   12d64:	mov	r0, r5
   12d68:	mov	r1, r4
   12d6c:	mov	r2, #10
   12d70:	mov	r3, #0
   12d74:	bl	15858 <__assert_fail@plt+0x44a0>
   12d78:	add	r2, r0, r0, lsl #2
   12d7c:	sub	r2, r5, r2, lsl #1
   12d80:	add	r2, r2, #48	; 0x30
   12d84:	strb	r2, [r6], #-1
   12d88:	adds	r2, r5, #9
   12d8c:	mov	r5, r0
   12d90:	adc	r3, r4, #0
   12d94:	rsbs	r2, r2, #18
   12d98:	mov	r4, r1
   12d9c:	rscs	r2, r3, #0
   12da0:	bcc	12d64 <__assert_fail@plt+0x19ac>
   12da4:	add	r6, r6, #1
   12da8:	b	12df4 <__assert_fail@plt+0x1a3c>
   12dac:	mov	r0, r5
   12db0:	mov	r1, r4
   12db4:	mov	r2, #10
   12db8:	mov	r3, #0
   12dbc:	bl	15858 <__assert_fail@plt+0x44a0>
   12dc0:	add	r2, r0, r0, lsl #2
   12dc4:	rsb	r2, r5, r2, lsl #1
   12dc8:	add	r2, r2, #48	; 0x30
   12dcc:	strb	r2, [r6], #-1
   12dd0:	adds	r2, r5, #9
   12dd4:	mov	r5, r0
   12dd8:	adc	r3, r4, #0
   12ddc:	rsbs	r2, r2, #18
   12de0:	mov	r4, r1
   12de4:	rscs	r2, r3, #0
   12de8:	bcc	12dac <__assert_fail@plt+0x19f4>
   12dec:	mov	r0, #45	; 0x2d
   12df0:	strb	r0, [r6]
   12df4:	mov	r0, r6
   12df8:	pop	{r4, r5, r6, sl, fp, pc}
   12dfc:	push	{r4, r5, fp, lr}
   12e00:	add	fp, sp, #8
   12e04:	cmp	r0, #0
   12e08:	beq	12e9c <__assert_fail@plt+0x1ae4>
   12e0c:	mov	r1, #47	; 0x2f
   12e10:	mov	r4, r0
   12e14:	bl	11340 <strrchr@plt>
   12e18:	cmp	r0, #0
   12e1c:	mov	r5, r4
   12e20:	addne	r5, r0, #1
   12e24:	sub	r0, r5, r4
   12e28:	cmp	r0, #7
   12e2c:	blt	12e80 <__assert_fail@plt+0x1ac8>
   12e30:	movw	r1, #25842	; 0x64f2
   12e34:	sub	r0, r5, #7
   12e38:	mov	r2, #7
   12e3c:	movt	r1, #1
   12e40:	bl	11394 <strncmp@plt>
   12e44:	cmp	r0, #0
   12e48:	bne	12e80 <__assert_fail@plt+0x1ac8>
   12e4c:	movw	r1, #25850	; 0x64fa
   12e50:	mov	r0, r5
   12e54:	mov	r2, #3
   12e58:	movt	r1, #1
   12e5c:	bl	11394 <strncmp@plt>
   12e60:	cmp	r0, #0
   12e64:	beq	12e70 <__assert_fail@plt+0x1ab8>
   12e68:	mov	r4, r5
   12e6c:	b	12e80 <__assert_fail@plt+0x1ac8>
   12e70:	movw	r0, #29032	; 0x7168
   12e74:	add	r4, r5, #3
   12e78:	movt	r0, #2
   12e7c:	str	r4, [r0]
   12e80:	movw	r0, #29036	; 0x716c
   12e84:	movt	r0, #2
   12e88:	str	r4, [r0]
   12e8c:	movw	r0, #29188	; 0x7204
   12e90:	movt	r0, #2
   12e94:	str	r4, [r0]
   12e98:	pop	{r4, r5, fp, pc}
   12e9c:	movw	r0, #29048	; 0x7178
   12ea0:	movt	r0, #2
   12ea4:	ldr	r1, [r0]
   12ea8:	movw	r0, #25786	; 0x64ba
   12eac:	movt	r0, #1
   12eb0:	bl	11388 <fputs@plt>
   12eb4:	bl	113a0 <abort@plt>
   12eb8:	push	{r4, r5, r6, sl, fp, lr}
   12ebc:	add	fp, sp, #16
   12ec0:	mov	r4, r0
   12ec4:	movw	r0, #29192	; 0x7208
   12ec8:	movt	r0, #2
   12ecc:	cmp	r4, #0
   12ed0:	moveq	r4, r0
   12ed4:	bl	112b0 <__errno_location@plt>
   12ed8:	ldr	r6, [r0]
   12edc:	mov	r5, r0
   12ee0:	mov	r0, r4
   12ee4:	mov	r1, #48	; 0x30
   12ee8:	bl	15370 <__assert_fail@plt+0x3fb8>
   12eec:	str	r6, [r5]
   12ef0:	pop	{r4, r5, r6, sl, fp, pc}
   12ef4:	movw	r1, #29192	; 0x7208
   12ef8:	cmp	r0, #0
   12efc:	movt	r1, #2
   12f00:	movne	r1, r0
   12f04:	ldr	r0, [r1]
   12f08:	bx	lr
   12f0c:	movw	r2, #29192	; 0x7208
   12f10:	cmp	r0, #0
   12f14:	movt	r2, #2
   12f18:	movne	r2, r0
   12f1c:	str	r1, [r2]
   12f20:	bx	lr
   12f24:	movw	r3, #29192	; 0x7208
   12f28:	cmp	r0, #0
   12f2c:	and	r2, r2, #1
   12f30:	movt	r3, #2
   12f34:	movne	r3, r0
   12f38:	ubfx	r0, r1, #5, #3
   12f3c:	and	r1, r1, #31
   12f40:	add	ip, r3, r0, lsl #2
   12f44:	mov	r0, #1
   12f48:	ldr	r3, [ip, #8]
   12f4c:	and	r0, r0, r3, lsr r1
   12f50:	eor	r2, r0, r2
   12f54:	eor	r1, r3, r2, lsl r1
   12f58:	str	r1, [ip, #8]
   12f5c:	bx	lr
   12f60:	movw	r2, #29192	; 0x7208
   12f64:	cmp	r0, #0
   12f68:	movt	r2, #2
   12f6c:	movne	r2, r0
   12f70:	ldr	r0, [r2, #4]
   12f74:	str	r1, [r2, #4]
   12f78:	bx	lr
   12f7c:	push	{fp, lr}
   12f80:	mov	fp, sp
   12f84:	movw	r3, #29192	; 0x7208
   12f88:	cmp	r0, #0
   12f8c:	movt	r3, #2
   12f90:	movne	r3, r0
   12f94:	cmp	r1, #0
   12f98:	mov	r0, #10
   12f9c:	cmpne	r2, #0
   12fa0:	str	r0, [r3]
   12fa4:	bne	12fac <__assert_fail@plt+0x1bf4>
   12fa8:	bl	113a0 <abort@plt>
   12fac:	str	r1, [r3, #40]	; 0x28
   12fb0:	str	r2, [r3, #44]	; 0x2c
   12fb4:	pop	{fp, pc}
   12fb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fbc:	add	fp, sp, #28
   12fc0:	sub	sp, sp, #20
   12fc4:	mov	r7, r0
   12fc8:	ldr	r0, [fp, #8]
   12fcc:	movw	r5, #29192	; 0x7208
   12fd0:	mov	r8, r3
   12fd4:	mov	r9, r2
   12fd8:	mov	sl, r1
   12fdc:	movt	r5, #2
   12fe0:	cmp	r0, #0
   12fe4:	movne	r5, r0
   12fe8:	bl	112b0 <__errno_location@plt>
   12fec:	ldr	r2, [r5, #40]	; 0x28
   12ff0:	ldr	r3, [r5, #44]	; 0x2c
   12ff4:	mov	r4, r0
   12ff8:	ldm	r5, {r0, r1}
   12ffc:	add	r5, r5, #8
   13000:	ldr	r6, [r4]
   13004:	stm	sp, {r0, r1, r5}
   13008:	mov	r0, r7
   1300c:	mov	r1, sl
   13010:	str	r2, [sp, #12]
   13014:	str	r3, [sp, #16]
   13018:	mov	r2, r9
   1301c:	mov	r3, r8
   13020:	bl	13030 <__assert_fail@plt+0x1c78>
   13024:	str	r6, [r4]
   13028:	sub	sp, fp, #28
   1302c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13030:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13034:	add	fp, sp, #28
   13038:	sub	sp, sp, #156	; 0x9c
   1303c:	mov	r5, r0
   13040:	add	r0, r2, #1
   13044:	mov	r6, r1
   13048:	mov	sl, r3
   1304c:	str	r2, [fp, #-80]	; 0xffffffb0
   13050:	str	r0, [sp, #72]	; 0x48
   13054:	ldr	r0, [fp, #12]
   13058:	and	r1, r0, #1
   1305c:	str	r1, [sp, #32]
   13060:	and	r1, r0, #4
   13064:	str	r1, [sp, #28]
   13068:	ubfx	r9, r0, #1, #1
   1306c:	bl	111b4 <__ctype_get_mb_cur_max@plt>
   13070:	str	r0, [sp, #40]	; 0x28
   13074:	ldr	r0, [fp, #24]
   13078:	ldr	r7, [fp, #8]
   1307c:	mov	r1, #0
   13080:	mov	lr, #0
   13084:	str	r5, [fp, #-84]	; 0xffffffac
   13088:	str	r1, [sp, #60]	; 0x3c
   1308c:	mov	r1, #1
   13090:	str	r1, [fp, #-48]	; 0xffffffd0
   13094:	str	r0, [sp, #80]	; 0x50
   13098:	ldr	r0, [fp, #20]
   1309c:	str	r0, [sp, #76]	; 0x4c
   130a0:	mov	r0, #0
   130a4:	str	r0, [sp, #56]	; 0x38
   130a8:	mov	r0, #0
   130ac:	str	r0, [fp, #-88]	; 0xffffffa8
   130b0:	mov	r0, #0
   130b4:	str	r0, [fp, #-72]	; 0xffffffb8
   130b8:	mov	r0, #0
   130bc:	cmp	r7, #10
   130c0:	bhi	1409c <__assert_fail@plt+0x2ce4>
   130c4:	add	r1, pc, #24
   130c8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   130cc:	mov	ip, r6
   130d0:	mov	r8, #0
   130d4:	mov	r2, #1
   130d8:	mov	r6, #0
   130dc:	mov	r3, sl
   130e0:	ldr	pc, [r1, r7, lsl #2]
   130e4:	ldrdeq	r3, [r1], -r0
   130e8:	andeq	r3, r1, r4, lsr #4
   130ec:	andeq	r3, r1, r4, ror #3
   130f0:	andeq	r3, r1, r8, asr #3
   130f4:	andeq	r3, r1, r8, lsl r2
   130f8:	andeq	r3, r1, ip, asr #4
   130fc:	strdeq	r3, [r1], -r4
   13100:	ldrdeq	r3, [r1], -r0
   13104:	andeq	r3, r1, r0, lsl r1
   13108:	andeq	r3, r1, r0, lsl r1
   1310c:	andeq	r3, r1, r0, asr r1
   13110:	movw	r0, #25932	; 0x654c
   13114:	mov	r1, r7
   13118:	mov	r6, r5
   1311c:	mov	r4, ip
   13120:	mov	r5, lr
   13124:	movt	r0, #1
   13128:	bl	14800 <__assert_fail@plt+0x3448>
   1312c:	str	r0, [sp, #76]	; 0x4c
   13130:	movw	r0, #25934	; 0x654e
   13134:	mov	r1, r7
   13138:	movt	r0, #1
   1313c:	bl	14800 <__assert_fail@plt+0x3448>
   13140:	mov	lr, r5
   13144:	mov	r5, r6
   13148:	mov	ip, r4
   1314c:	str	r0, [sp, #80]	; 0x50
   13150:	mov	r8, #0
   13154:	tst	r9, #1
   13158:	str	lr, [sp, #44]	; 0x2c
   1315c:	bne	13194 <__assert_fail@plt+0x1ddc>
   13160:	ldr	r0, [sp, #76]	; 0x4c
   13164:	ldrb	r0, [r0]
   13168:	cmp	r0, #0
   1316c:	beq	13194 <__assert_fail@plt+0x1ddc>
   13170:	ldr	r1, [sp, #76]	; 0x4c
   13174:	mov	r8, #0
   13178:	add	r1, r1, #1
   1317c:	cmp	r8, ip
   13180:	strbcc	r0, [r5, r8]
   13184:	ldrb	r0, [r1, r8]
   13188:	add	r8, r8, #1
   1318c:	cmp	r0, #0
   13190:	bne	1317c <__assert_fail@plt+0x1dc4>
   13194:	ldr	r6, [sp, #80]	; 0x50
   13198:	mov	r4, ip
   1319c:	mov	r0, r6
   131a0:	bl	11298 <strlen@plt>
   131a4:	mov	ip, r4
   131a8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   131ac:	ldr	lr, [sp, #44]	; 0x2c
   131b0:	str	r6, [fp, #-88]	; 0xffffffa8
   131b4:	str	r0, [fp, #-72]	; 0xffffffb8
   131b8:	mov	r2, #1
   131bc:	mov	r6, r9
   131c0:	mov	r3, sl
   131c4:	b	132d0 <__assert_fail@plt+0x1f18>
   131c8:	mov	r0, #1
   131cc:	b	13224 <__assert_fail@plt+0x1e6c>
   131d0:	mov	r7, #0
   131d4:	mov	r8, #0
   131d8:	mov	r2, r0
   131dc:	mov	r6, #0
   131e0:	b	132d0 <__assert_fail@plt+0x1f18>
   131e4:	tst	r9, #1
   131e8:	bne	13224 <__assert_fail@plt+0x1e6c>
   131ec:	mov	r2, r0
   131f0:	b	1327c <__assert_fail@plt+0x1ec4>
   131f4:	mov	r0, #1
   131f8:	mov	r8, #0
   131fc:	mov	r7, #5
   13200:	mov	r2, #1
   13204:	str	r0, [fp, #-72]	; 0xffffffb8
   13208:	movw	r0, #25930	; 0x654a
   1320c:	movt	r0, #1
   13210:	str	r0, [fp, #-88]	; 0xffffffa8
   13214:	b	13244 <__assert_fail@plt+0x1e8c>
   13218:	mov	r2, #1
   1321c:	tst	r9, #1
   13220:	beq	1327c <__assert_fail@plt+0x1ec4>
   13224:	mov	r1, #1
   13228:	mov	r8, #0
   1322c:	mov	r7, #2
   13230:	mov	r2, r0
   13234:	str	r1, [fp, #-72]	; 0xffffffb8
   13238:	movw	r1, #25934	; 0x654e
   1323c:	movt	r1, #1
   13240:	str	r1, [fp, #-88]	; 0xffffffa8
   13244:	mov	r6, #1
   13248:	b	132d0 <__assert_fail@plt+0x1f18>
   1324c:	tst	r9, #1
   13250:	beq	132a0 <__assert_fail@plt+0x1ee8>
   13254:	mov	r0, #1
   13258:	mov	r8, #0
   1325c:	mov	r2, #1
   13260:	mov	r6, #1
   13264:	mov	r7, #5
   13268:	str	r0, [fp, #-72]	; 0xffffffb8
   1326c:	movw	r0, #25930	; 0x654a
   13270:	movt	r0, #1
   13274:	str	r0, [fp, #-88]	; 0xffffffa8
   13278:	b	132d0 <__assert_fail@plt+0x1f18>
   1327c:	cmp	ip, #0
   13280:	mov	r8, #1
   13284:	mov	r6, #0
   13288:	mov	r7, #2
   1328c:	movne	r0, #39	; 0x27
   13290:	strbne	r0, [r5]
   13294:	movw	r0, #25934	; 0x654e
   13298:	movt	r0, #1
   1329c:	b	132c4 <__assert_fail@plt+0x1f0c>
   132a0:	cmp	ip, #0
   132a4:	mov	r8, #1
   132a8:	mov	r2, #1
   132ac:	mov	r7, #5
   132b0:	mov	r6, #0
   132b4:	movne	r0, #34	; 0x22
   132b8:	strbne	r0, [r5]
   132bc:	movw	r0, #25930	; 0x654a
   132c0:	movt	r0, #1
   132c4:	str	r0, [fp, #-88]	; 0xffffffa8
   132c8:	mov	r0, #1
   132cc:	str	r0, [fp, #-72]	; 0xffffffb8
   132d0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   132d4:	str	r7, [fp, #-68]	; 0xffffffbc
   132d8:	str	r6, [fp, #-76]	; 0xffffffb4
   132dc:	str	r2, [sp, #84]	; 0x54
   132e0:	cmp	r0, #0
   132e4:	movwne	r0, #1
   132e8:	and	r1, r0, r6
   132ec:	and	r1, r2, r1
   132f0:	str	r1, [sp, #48]	; 0x30
   132f4:	sub	r1, r7, #2
   132f8:	clz	r1, r1
   132fc:	lsr	r1, r1, #5
   13300:	and	r1, r1, r6
   13304:	str	r1, [sp, #64]	; 0x40
   13308:	subs	r1, r7, #2
   1330c:	eor	r7, r6, #1
   13310:	movwne	r1, #1
   13314:	str	r7, [sp, #92]	; 0x5c
   13318:	orr	r7, r1, r7
   1331c:	and	r1, r1, r2
   13320:	and	r0, r0, r1
   13324:	str	r7, [sp, #68]	; 0x44
   13328:	mov	r7, #0
   1332c:	str	r0, [fp, #-60]	; 0xffffffc4
   13330:	orr	r0, r1, r6
   13334:	ldr	r1, [fp, #16]
   13338:	eor	r0, r0, #1
   1333c:	clz	r1, r1
   13340:	lsr	r1, r1, #5
   13344:	orr	r0, r1, r0
   13348:	str	r0, [fp, #-64]	; 0xffffffc0
   1334c:	eor	r0, r2, #1
   13350:	str	r0, [sp, #52]	; 0x34
   13354:	cmn	r3, #1
   13358:	beq	13368 <__assert_fail@plt+0x1fb0>
   1335c:	cmp	r7, r3
   13360:	bne	13374 <__assert_fail@plt+0x1fbc>
   13364:	b	13ed0 <__assert_fail@plt+0x2b18>
   13368:	ldrb	r0, [r4, r7]
   1336c:	cmp	r0, #0
   13370:	beq	13ed8 <__assert_fail@plt+0x2b20>
   13374:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13378:	cmp	r0, #0
   1337c:	beq	133c4 <__assert_fail@plt+0x200c>
   13380:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13384:	add	r5, r7, r0
   13388:	cmp	r0, #2
   1338c:	bcc	133d8 <__assert_fail@plt+0x2020>
   13390:	mov	r0, #0
   13394:	cmn	r3, #1
   13398:	str	r0, [fp, #-56]	; 0xffffffc8
   1339c:	bne	133e0 <__assert_fail@plt+0x2028>
   133a0:	mov	r0, r4
   133a4:	mov	r4, ip
   133a8:	mov	r6, lr
   133ac:	bl	11298 <strlen@plt>
   133b0:	mov	ip, r4
   133b4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   133b8:	mov	lr, r6
   133bc:	mov	r3, r0
   133c0:	b	133e0 <__assert_fail@plt+0x2028>
   133c4:	mov	r0, #0
   133c8:	mov	sl, r3
   133cc:	str	r0, [fp, #-56]	; 0xffffffc8
   133d0:	mov	r0, #0
   133d4:	b	1344c <__assert_fail@plt+0x2094>
   133d8:	mov	r0, #0
   133dc:	str	r0, [fp, #-56]	; 0xffffffc8
   133e0:	cmp	r5, r3
   133e4:	bls	133f8 <__assert_fail@plt+0x2040>
   133e8:	ldr	r5, [fp, #-84]	; 0xffffffac
   133ec:	mov	r0, #0
   133f0:	mov	sl, r3
   133f4:	b	1344c <__assert_fail@plt+0x2094>
   133f8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   133fc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13400:	add	r0, r4, r7
   13404:	mov	r5, lr
   13408:	mov	r6, ip
   1340c:	mov	sl, r3
   13410:	bl	11280 <bcmp@plt>
   13414:	ldr	r2, [sp, #92]	; 0x5c
   13418:	cmp	r0, #0
   1341c:	ldr	r3, [fp, #-84]	; 0xffffffac
   13420:	mov	r1, r0
   13424:	movwne	r1, #1
   13428:	orr	r1, r1, r2
   1342c:	tst	r1, #1
   13430:	beq	13f5c <__assert_fail@plt+0x2ba4>
   13434:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13438:	clz	r0, r0
   1343c:	mov	lr, r5
   13440:	mov	ip, r6
   13444:	mov	r5, r3
   13448:	lsr	r0, r0, #5
   1344c:	str	r0, [fp, #-52]	; 0xffffffcc
   13450:	ldrb	r6, [r4, r7]
   13454:	cmp	r6, #126	; 0x7e
   13458:	bhi	13980 <__assert_fail@plt+0x25c8>
   1345c:	add	r3, pc, #16
   13460:	mov	r9, #1
   13464:	mov	r2, #110	; 0x6e
   13468:	mov	r0, #97	; 0x61
   1346c:	mov	r1, #0
   13470:	ldr	pc, [r3, r6, lsl #2]
   13474:	andeq	r3, r1, r4, ror #15
   13478:	andeq	r3, r1, r0, lsl #19
   1347c:	andeq	r3, r1, r0, lsl #19
   13480:	andeq	r3, r1, r0, lsl #19
   13484:	andeq	r3, r1, r0, lsl #19
   13488:	andeq	r3, r1, r0, lsl #19
   1348c:	andeq	r3, r1, r0, lsl #19
   13490:	andeq	r3, r1, r0, lsl #20
   13494:	andeq	r3, r1, r4, asr #15
   13498:			; <UNDEFINED> instruction: 0x000137bc
   1349c:	ldrdeq	r3, [r1], -r0
   134a0:	andeq	r3, r1, r8, ror #17
   134a4:			; <UNDEFINED> instruction: 0x000137b4
   134a8:	andeq	r3, r1, ip, asr #15
   134ac:	andeq	r3, r1, r0, lsl #19
   134b0:	andeq	r3, r1, r0, lsl #19
   134b4:	andeq	r3, r1, r0, lsl #19
   134b8:	andeq	r3, r1, r0, lsl #19
   134bc:	andeq	r3, r1, r0, lsl #19
   134c0:	andeq	r3, r1, r0, lsl #19
   134c4:	andeq	r3, r1, r0, lsl #19
   134c8:	andeq	r3, r1, r0, lsl #19
   134cc:	andeq	r3, r1, r0, lsl #19
   134d0:	andeq	r3, r1, r0, lsl #19
   134d4:	andeq	r3, r1, r0, lsl #19
   134d8:	andeq	r3, r1, r0, lsl #19
   134dc:	andeq	r3, r1, r0, lsl #19
   134e0:	andeq	r3, r1, r0, lsl #19
   134e4:	andeq	r3, r1, r0, lsl #19
   134e8:	andeq	r3, r1, r0, lsl #19
   134ec:	andeq	r3, r1, r0, lsl #19
   134f0:	andeq	r3, r1, r0, lsl #19
   134f4:	andeq	r3, r1, r4, ror #14
   134f8:	andeq	r3, r1, r8, ror #14
   134fc:	andeq	r3, r1, r8, ror #14
   13500:	andeq	r3, r1, ip, asr #14
   13504:	andeq	r3, r1, r8, ror #14
   13508:	andeq	r3, r1, r0, ror r6
   1350c:	andeq	r3, r1, r8, ror #14
   13510:	strdeq	r3, [r1], -r0
   13514:	andeq	r3, r1, r8, ror #14
   13518:	andeq	r3, r1, r8, ror #14
   1351c:	andeq	r3, r1, r8, ror #14
   13520:	andeq	r3, r1, r0, ror r6
   13524:	andeq	r3, r1, r0, ror r6
   13528:	andeq	r3, r1, r0, ror r6
   1352c:	andeq	r3, r1, r0, ror r6
   13530:	andeq	r3, r1, r0, ror r6
   13534:	andeq	r3, r1, r0, ror r6
   13538:	andeq	r3, r1, r0, ror r6
   1353c:	andeq	r3, r1, r0, ror r6
   13540:	andeq	r3, r1, r0, ror r6
   13544:	andeq	r3, r1, r0, ror r6
   13548:	andeq	r3, r1, r0, ror r6
   1354c:	andeq	r3, r1, r0, ror r6
   13550:	andeq	r3, r1, r0, ror r6
   13554:	andeq	r3, r1, r0, ror r6
   13558:	andeq	r3, r1, r0, ror r6
   1355c:	andeq	r3, r1, r0, ror r6
   13560:	andeq	r3, r1, r8, ror #14
   13564:	andeq	r3, r1, r8, ror #14
   13568:	andeq	r3, r1, r8, ror #14
   1356c:	andeq	r3, r1, r8, ror #14
   13570:			; <UNDEFINED> instruction: 0x000138bc
   13574:	andeq	r3, r1, r0, lsl #19
   13578:	andeq	r3, r1, r0, ror r6
   1357c:	andeq	r3, r1, r0, ror r6
   13580:	andeq	r3, r1, r0, ror r6
   13584:	andeq	r3, r1, r0, ror r6
   13588:	andeq	r3, r1, r0, ror r6
   1358c:	andeq	r3, r1, r0, ror r6
   13590:	andeq	r3, r1, r0, ror r6
   13594:	andeq	r3, r1, r0, ror r6
   13598:	andeq	r3, r1, r0, ror r6
   1359c:	andeq	r3, r1, r0, ror r6
   135a0:	andeq	r3, r1, r0, ror r6
   135a4:	andeq	r3, r1, r0, ror r6
   135a8:	andeq	r3, r1, r0, ror r6
   135ac:	andeq	r3, r1, r0, ror r6
   135b0:	andeq	r3, r1, r0, ror r6
   135b4:	andeq	r3, r1, r0, ror r6
   135b8:	andeq	r3, r1, r0, ror r6
   135bc:	andeq	r3, r1, r0, ror r6
   135c0:	andeq	r3, r1, r0, ror r6
   135c4:	andeq	r3, r1, r0, ror r6
   135c8:	andeq	r3, r1, r0, ror r6
   135cc:	andeq	r3, r1, r0, ror r6
   135d0:	andeq	r3, r1, r0, ror r6
   135d4:	andeq	r3, r1, r0, ror r6
   135d8:	andeq	r3, r1, r0, ror r6
   135dc:	andeq	r3, r1, r0, ror r6
   135e0:	andeq	r3, r1, r8, ror #14
   135e4:	muleq	r1, r0, r7
   135e8:	andeq	r3, r1, r0, ror r6
   135ec:	andeq	r3, r1, r8, ror #14
   135f0:	andeq	r3, r1, r0, ror r6
   135f4:	andeq	r3, r1, r8, ror #14
   135f8:	andeq	r3, r1, r0, ror r6
   135fc:	andeq	r3, r1, r0, ror r6
   13600:	andeq	r3, r1, r0, ror r6
   13604:	andeq	r3, r1, r0, ror r6
   13608:	andeq	r3, r1, r0, ror r6
   1360c:	andeq	r3, r1, r0, ror r6
   13610:	andeq	r3, r1, r0, ror r6
   13614:	andeq	r3, r1, r0, ror r6
   13618:	andeq	r3, r1, r0, ror r6
   1361c:	andeq	r3, r1, r0, ror r6
   13620:	andeq	r3, r1, r0, ror r6
   13624:	andeq	r3, r1, r0, ror r6
   13628:	andeq	r3, r1, r0, ror r6
   1362c:	andeq	r3, r1, r0, ror r6
   13630:	andeq	r3, r1, r0, ror r6
   13634:	andeq	r3, r1, r0, ror r6
   13638:	andeq	r3, r1, r0, ror r6
   1363c:	andeq	r3, r1, r0, ror r6
   13640:	andeq	r3, r1, r0, ror r6
   13644:	andeq	r3, r1, r0, ror r6
   13648:	andeq	r3, r1, r0, ror r6
   1364c:	andeq	r3, r1, r0, ror r6
   13650:	andeq	r3, r1, r0, ror r6
   13654:	andeq	r3, r1, r0, ror r6
   13658:	andeq	r3, r1, r0, ror r6
   1365c:	andeq	r3, r1, r0, ror r6
   13660:	andeq	r3, r1, r4, lsr #14
   13664:	andeq	r3, r1, r8, ror #14
   13668:	andeq	r3, r1, r4, lsr #14
   1366c:	andeq	r3, r1, ip, asr #14
   13670:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13674:	tst	r0, #1
   13678:	bne	136a4 <__assert_fail@plt+0x22ec>
   1367c:	ldr	r1, [fp, #16]
   13680:	ubfx	r0, r6, #5, #3
   13684:	mov	r2, #1
   13688:	ldr	r0, [r1, r0, lsl #2]
   1368c:	and	r1, r6, #31
   13690:	tst	r0, r2, lsl r1
   13694:	beq	136a4 <__assert_fail@plt+0x22ec>
   13698:	mov	r0, r6
   1369c:	mov	r1, r9
   136a0:	b	136b8 <__assert_fail@plt+0x2300>
   136a4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   136a8:	mov	r1, r9
   136ac:	cmp	r0, #0
   136b0:	mov	r0, r6
   136b4:	beq	13e04 <__assert_fail@plt+0x2a4c>
   136b8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   136bc:	tst	r2, #1
   136c0:	bne	13fa0 <__assert_fail@plt+0x2be8>
   136c4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   136c8:	subs	r2, r2, #2
   136cc:	movwne	r2, #1
   136d0:	orr	r2, r2, lr
   136d4:	tst	r2, #1
   136d8:	bne	13710 <__assert_fail@plt+0x2358>
   136dc:	cmp	r8, ip
   136e0:	mov	lr, #1
   136e4:	movcc	r2, #39	; 0x27
   136e8:	strbcc	r2, [r5, r8]
   136ec:	add	r2, r8, #1
   136f0:	cmp	r2, ip
   136f4:	movcc	r3, #36	; 0x24
   136f8:	strbcc	r3, [r5, r2]
   136fc:	add	r2, r8, #2
   13700:	add	r8, r8, #3
   13704:	cmp	r2, ip
   13708:	movcc	r3, #39	; 0x27
   1370c:	strbcc	r3, [r5, r2]
   13710:	cmp	r8, ip
   13714:	movcc	r2, #92	; 0x5c
   13718:	strbcc	r2, [r5, r8]
   1371c:	add	r8, r8, #1
   13720:	b	13e44 <__assert_fail@plt+0x2a8c>
   13724:	cmp	sl, #1
   13728:	beq	1374c <__assert_fail@plt+0x2394>
   1372c:	mov	r9, #0
   13730:	cmn	sl, #1
   13734:	bne	13758 <__assert_fail@plt+0x23a0>
   13738:	ldrb	r0, [r4, #1]
   1373c:	cmp	r0, #0
   13740:	beq	1374c <__assert_fail@plt+0x2394>
   13744:	mvn	sl, #0
   13748:	b	13758 <__assert_fail@plt+0x23a0>
   1374c:	mov	r9, #0
   13750:	cmp	r7, #0
   13754:	beq	13764 <__assert_fail@plt+0x23ac>
   13758:	mov	r0, #0
   1375c:	str	r0, [fp, #-56]	; 0xffffffc8
   13760:	b	13670 <__assert_fail@plt+0x22b8>
   13764:	mov	r1, #1
   13768:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1376c:	cmp	r0, #2
   13770:	bne	13788 <__assert_fail@plt+0x23d0>
   13774:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13778:	mov	r9, r1
   1377c:	tst	r0, #1
   13780:	beq	13670 <__assert_fail@plt+0x22b8>
   13784:	b	13fa0 <__assert_fail@plt+0x2be8>
   13788:	mov	r9, r1
   1378c:	b	13670 <__assert_fail@plt+0x22b8>
   13790:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13794:	cmp	r0, #2
   13798:	bne	139dc <__assert_fail@plt+0x2624>
   1379c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   137a0:	tst	r0, #1
   137a4:	bne	13fa0 <__assert_fail@plt+0x2be8>
   137a8:	mov	r0, #0
   137ac:	str	r0, [fp, #-56]	; 0xffffffc8
   137b0:	b	139f4 <__assert_fail@plt+0x263c>
   137b4:	mov	r0, #102	; 0x66
   137b8:	b	13a00 <__assert_fail@plt+0x2648>
   137bc:	mov	r2, #116	; 0x74
   137c0:	b	137d0 <__assert_fail@plt+0x2418>
   137c4:	mov	r0, #98	; 0x62
   137c8:	b	13a00 <__assert_fail@plt+0x2648>
   137cc:	mov	r2, #114	; 0x72
   137d0:	ldr	r0, [sp, #68]	; 0x44
   137d4:	tst	r0, #1
   137d8:	mov	r0, r2
   137dc:	bne	13a00 <__assert_fail@plt+0x2648>
   137e0:	b	13fa0 <__assert_fail@plt+0x2be8>
   137e4:	ldr	r0, [sp, #84]	; 0x54
   137e8:	tst	r0, #1
   137ec:	beq	13a20 <__assert_fail@plt+0x2668>
   137f0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   137f4:	tst	r0, #1
   137f8:	bne	1408c <__assert_fail@plt+0x2cd4>
   137fc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13800:	mov	r2, sl
   13804:	subs	r0, r0, #2
   13808:	movwne	r0, #1
   1380c:	orr	r0, r0, lr
   13810:	tst	r0, #1
   13814:	bne	1384c <__assert_fail@plt+0x2494>
   13818:	cmp	r8, ip
   1381c:	mov	lr, #1
   13820:	movcc	r0, #39	; 0x27
   13824:	strbcc	r0, [r5, r8]
   13828:	add	r0, r8, #1
   1382c:	cmp	r0, ip
   13830:	movcc	r1, #36	; 0x24
   13834:	strbcc	r1, [r5, r0]
   13838:	add	r0, r8, #2
   1383c:	add	r8, r8, #3
   13840:	cmp	r0, ip
   13844:	movcc	r1, #39	; 0x27
   13848:	strbcc	r1, [r5, r0]
   1384c:	mov	r1, #1
   13850:	cmp	r8, ip
   13854:	mov	r9, #0
   13858:	mov	r6, #48	; 0x30
   1385c:	str	r1, [fp, #-56]	; 0xffffffc8
   13860:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13864:	movcc	r0, #92	; 0x5c
   13868:	strbcc	r0, [r5, r8]
   1386c:	add	r0, r8, #1
   13870:	cmp	r1, #2
   13874:	beq	13b7c <__assert_fail@plt+0x27c4>
   13878:	add	r1, r7, #1
   1387c:	cmp	r1, r2
   13880:	bcs	13b7c <__assert_fail@plt+0x27c4>
   13884:	ldrb	r1, [r4, r1]
   13888:	sub	r1, r1, #48	; 0x30
   1388c:	uxtb	r1, r1
   13890:	cmp	r1, #9
   13894:	bhi	13b7c <__assert_fail@plt+0x27c4>
   13898:	cmp	r0, ip
   1389c:	movcc	r1, #48	; 0x30
   138a0:	strbcc	r1, [r5, r0]
   138a4:	add	r0, r8, #2
   138a8:	add	r8, r8, #3
   138ac:	cmp	r0, ip
   138b0:	movcc	r1, #48	; 0x30
   138b4:	strbcc	r1, [r5, r0]
   138b8:	b	13670 <__assert_fail@plt+0x22b8>
   138bc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   138c0:	mov	r6, #63	; 0x3f
   138c4:	cmp	r0, #5
   138c8:	beq	13b84 <__assert_fail@plt+0x27cc>
   138cc:	mov	r1, #0
   138d0:	cmp	r0, #2
   138d4:	str	r1, [fp, #-56]	; 0xffffffc8
   138d8:	bne	13c38 <__assert_fail@plt+0x2880>
   138dc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   138e0:	mov	r9, #0
   138e4:	b	1377c <__assert_fail@plt+0x23c4>
   138e8:	mov	r0, #118	; 0x76
   138ec:	b	13a00 <__assert_fail@plt+0x2648>
   138f0:	mov	r0, #1
   138f4:	mov	r6, #39	; 0x27
   138f8:	str	r0, [sp, #60]	; 0x3c
   138fc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13900:	cmp	r0, #2
   13904:	bne	13978 <__assert_fail@plt+0x25c0>
   13908:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1390c:	tst	r0, #1
   13910:	bne	13fa0 <__assert_fail@plt+0x2be8>
   13914:	ldr	r2, [sp, #56]	; 0x38
   13918:	clz	r1, ip
   1391c:	mov	lr, #0
   13920:	lsr	r1, r1, #5
   13924:	cmp	r2, #0
   13928:	mov	r0, r2
   1392c:	movwne	r0, #1
   13930:	orrs	r0, r0, r1
   13934:	moveq	r2, ip
   13938:	moveq	ip, r0
   1393c:	cmp	r8, ip
   13940:	str	r2, [sp, #56]	; 0x38
   13944:	movcc	r0, #39	; 0x27
   13948:	strbcc	r0, [r5, r8]
   1394c:	add	r0, r8, #1
   13950:	cmp	r0, ip
   13954:	movcc	r1, #92	; 0x5c
   13958:	strbcc	r1, [r5, r0]
   1395c:	add	r0, r8, #2
   13960:	add	r8, r8, #3
   13964:	cmp	r0, ip
   13968:	movcc	r1, #39	; 0x27
   1396c:	strbcc	r1, [r5, r0]
   13970:	mov	r0, #0
   13974:	str	r0, [fp, #-56]	; 0xffffffc8
   13978:	mov	r9, #1
   1397c:	b	13670 <__assert_fail@plt+0x22b8>
   13980:	ldr	r0, [sp, #40]	; 0x28
   13984:	str	lr, [sp, #44]	; 0x2c
   13988:	str	ip, [sp, #88]	; 0x58
   1398c:	cmp	r0, #1
   13990:	bne	13a40 <__assert_fail@plt+0x2688>
   13994:	str	sl, [sp, #36]	; 0x24
   13998:	bl	11268 <__ctype_b_loc@plt>
   1399c:	ldr	r0, [r0]
   139a0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   139a4:	mov	r1, #1
   139a8:	add	r0, r0, r6, lsl #1
   139ac:	ldrb	r0, [r0, #1]
   139b0:	ubfx	r9, r0, #6, #1
   139b4:	ldr	r0, [sp, #52]	; 0x34
   139b8:	ldr	lr, [sp, #44]	; 0x2c
   139bc:	cmp	r1, #1
   139c0:	orr	r3, r9, r0
   139c4:	bhi	13c40 <__assert_fail@plt+0x2888>
   139c8:	tst	r3, #1
   139cc:	beq	13c40 <__assert_fail@plt+0x2888>
   139d0:	ldr	sl, [sp, #36]	; 0x24
   139d4:	ldr	ip, [sp, #88]	; 0x58
   139d8:	b	13670 <__assert_fail@plt+0x22b8>
   139dc:	ldr	r1, [sp, #48]	; 0x30
   139e0:	mov	r0, #0
   139e4:	str	r0, [fp, #-56]	; 0xffffffc8
   139e8:	mov	r0, #92	; 0x5c
   139ec:	cmp	r1, #0
   139f0:	beq	13a00 <__assert_fail@plt+0x2648>
   139f4:	mov	r6, #92	; 0x5c
   139f8:	mov	r9, #0
   139fc:	b	13e04 <__assert_fail@plt+0x2a4c>
   13a00:	mov	r1, #0
   13a04:	mov	r9, #0
   13a08:	str	r1, [fp, #-56]	; 0xffffffc8
   13a0c:	ldr	r1, [sp, #84]	; 0x54
   13a10:	tst	r1, #1
   13a14:	mov	r1, #0
   13a18:	beq	13670 <__assert_fail@plt+0x22b8>
   13a1c:	b	136b8 <__assert_fail@plt+0x2300>
   13a20:	ldr	r0, [sp, #32]
   13a24:	mov	r6, #0
   13a28:	mov	r9, #0
   13a2c:	cmp	r0, #0
   13a30:	mov	r0, #0
   13a34:	str	r0, [fp, #-56]	; 0xffffffc8
   13a38:	beq	13670 <__assert_fail@plt+0x22b8>
   13a3c:	b	13e5c <__assert_fail@plt+0x2aa4>
   13a40:	mov	r0, #0
   13a44:	cmn	sl, #1
   13a48:	sub	r3, fp, #40	; 0x28
   13a4c:	str	r0, [fp, #-36]	; 0xffffffdc
   13a50:	str	r0, [fp, #-40]	; 0xffffffd8
   13a54:	bne	13a6c <__assert_fail@plt+0x26b4>
   13a58:	mov	r0, r4
   13a5c:	bl	11298 <strlen@plt>
   13a60:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13a64:	sub	r3, fp, #40	; 0x28
   13a68:	mov	sl, r0
   13a6c:	ldr	r0, [sp, #72]	; 0x48
   13a70:	mov	r9, #1
   13a74:	mov	r1, #0
   13a78:	str	sl, [sp, #36]	; 0x24
   13a7c:	add	r0, r0, r7
   13a80:	str	r0, [sp, #20]
   13a84:	add	r0, r1, r7
   13a88:	str	r1, [sp, #24]
   13a8c:	add	r1, r4, r0
   13a90:	mov	r4, r0
   13a94:	sub	r2, sl, r0
   13a98:	sub	r0, fp, #44	; 0x2c
   13a9c:	bl	157b8 <__assert_fail@plt+0x4400>
   13aa0:	cmp	r0, #0
   13aa4:	beq	13eb0 <__assert_fail@plt+0x2af8>
   13aa8:	cmn	r0, #1
   13aac:	beq	13e68 <__assert_fail@plt+0x2ab0>
   13ab0:	ldr	r2, [sp, #36]	; 0x24
   13ab4:	cmn	r0, #2
   13ab8:	beq	13e70 <__assert_fail@plt+0x2ab8>
   13abc:	ldr	r2, [sp, #64]	; 0x40
   13ac0:	ldr	ip, [sp, #88]	; 0x58
   13ac4:	ldr	r4, [sp, #84]	; 0x54
   13ac8:	ldr	lr, [fp, #-48]	; 0xffffffd0
   13acc:	cmp	r0, #2
   13ad0:	mov	r1, #0
   13ad4:	movwcc	r1, #1
   13ad8:	eor	r2, r2, #1
   13adc:	orrs	r1, r2, r1
   13ae0:	bne	13b30 <__assert_fail@plt+0x2778>
   13ae4:	ldr	r1, [sp, #24]
   13ae8:	ldr	r2, [sp, #20]
   13aec:	add	r1, r2, r1
   13af0:	sub	r2, r0, #1
   13af4:	ldrb	r3, [r1]
   13af8:	sub	r5, r3, #94	; 0x5e
   13afc:	cmp	r5, #30
   13b00:	bhi	13b18 <__assert_fail@plt+0x2760>
   13b04:	mov	r4, #1
   13b08:	mov	sl, #1073741829	; 0x40000005
   13b0c:	tst	sl, r4, lsl r5
   13b10:	ldr	r4, [sp, #84]	; 0x54
   13b14:	bne	13f78 <__assert_fail@plt+0x2bc0>
   13b18:	sub	r3, r3, #91	; 0x5b
   13b1c:	cmp	r3, #2
   13b20:	bcc	13f78 <__assert_fail@plt+0x2bc0>
   13b24:	add	r1, r1, #1
   13b28:	subs	r2, r2, #1
   13b2c:	bne	13af4 <__assert_fail@plt+0x273c>
   13b30:	ldr	r5, [sp, #24]
   13b34:	str	lr, [fp, #-48]	; 0xffffffd0
   13b38:	add	r5, r0, r5
   13b3c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13b40:	bl	1119c <iswprint@plt>
   13b44:	cmp	r0, #0
   13b48:	sub	r4, fp, #40	; 0x28
   13b4c:	movwne	r0, #1
   13b50:	and	r9, r9, r0
   13b54:	mov	r0, r4
   13b58:	bl	1113c <mbsinit@plt>
   13b5c:	mov	r1, r5
   13b60:	mov	r3, r4
   13b64:	ldr	sl, [sp, #36]	; 0x24
   13b68:	ldr	r5, [fp, #-84]	; 0xffffffac
   13b6c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13b70:	cmp	r0, #0
   13b74:	beq	13a84 <__assert_fail@plt+0x26cc>
   13b78:	b	139b4 <__assert_fail@plt+0x25fc>
   13b7c:	mov	r8, r0
   13b80:	b	13670 <__assert_fail@plt+0x22b8>
   13b84:	mov	r0, #0
   13b88:	str	r0, [fp, #-56]	; 0xffffffc8
   13b8c:	ldr	r0, [sp, #28]
   13b90:	cmp	r0, #0
   13b94:	beq	13c38 <__assert_fail@plt+0x2880>
   13b98:	add	r0, r7, #2
   13b9c:	mov	r1, sl
   13ba0:	cmp	r0, sl
   13ba4:	bcs	13c38 <__assert_fail@plt+0x2880>
   13ba8:	add	r1, r7, r4
   13bac:	ldrb	r1, [r1, #1]
   13bb0:	cmp	r1, #63	; 0x3f
   13bb4:	bne	13c38 <__assert_fail@plt+0x2880>
   13bb8:	ldrb	r9, [r4, r0]
   13bbc:	sub	r2, r9, #33	; 0x21
   13bc0:	cmp	r2, #29
   13bc4:	bhi	13c38 <__assert_fail@plt+0x2880>
   13bc8:	mov	r1, r4
   13bcc:	movw	r4, #20929	; 0x51c1
   13bd0:	mov	r3, #1
   13bd4:	movt	r4, #14336	; 0x3800
   13bd8:	tst	r4, r3, lsl r2
   13bdc:	beq	13ec4 <__assert_fail@plt+0x2b0c>
   13be0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13be4:	tst	r2, #1
   13be8:	bne	14094 <__assert_fail@plt+0x2cdc>
   13bec:	cmp	r8, ip
   13bf0:	mov	r4, r1
   13bf4:	mov	r7, r0
   13bf8:	mov	r6, r9
   13bfc:	movcc	r2, #63	; 0x3f
   13c00:	strbcc	r2, [r5, r8]
   13c04:	add	r2, r8, #1
   13c08:	cmp	r2, ip
   13c0c:	movcc	r3, #34	; 0x22
   13c10:	strbcc	r3, [r5, r2]
   13c14:	add	r2, r8, #2
   13c18:	cmp	r2, ip
   13c1c:	movcc	r3, #34	; 0x22
   13c20:	strbcc	r3, [r5, r2]
   13c24:	add	r2, r8, #3
   13c28:	add	r8, r8, #4
   13c2c:	cmp	r2, ip
   13c30:	movcc	r3, #63	; 0x3f
   13c34:	strbcc	r3, [r5, r2]
   13c38:	mov	r9, #0
   13c3c:	b	13670 <__assert_fail@plt+0x22b8>
   13c40:	ldr	sl, [sp, #36]	; 0x24
   13c44:	add	r0, r1, r7
   13c48:	mov	r2, #0
   13c4c:	str	r3, [sp, #24]
   13c50:	str	r0, [fp, #-56]	; 0xffffffc8
   13c54:	tst	r3, #1
   13c58:	beq	13c84 <__assert_fail@plt+0x28cc>
   13c5c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13c60:	tst	r0, #1
   13c64:	beq	13d4c <__assert_fail@plt+0x2994>
   13c68:	ldr	r1, [sp, #88]	; 0x58
   13c6c:	mov	r0, r3
   13c70:	cmp	r8, r1
   13c74:	movcc	r1, #92	; 0x5c
   13c78:	strbcc	r1, [r5, r8]
   13c7c:	add	r8, r8, #1
   13c80:	b	13d50 <__assert_fail@plt+0x2998>
   13c84:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13c88:	tst	r1, #1
   13c8c:	bne	13f9c <__assert_fail@plt+0x2be4>
   13c90:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13c94:	subs	r2, r1, #2
   13c98:	movwne	r2, #1
   13c9c:	orr	r2, r2, lr
   13ca0:	tst	r2, #1
   13ca4:	bne	13ce8 <__assert_fail@plt+0x2930>
   13ca8:	ldr	r1, [sp, #88]	; 0x58
   13cac:	add	r2, r8, #1
   13cb0:	mov	lr, #1
   13cb4:	cmp	r8, r1
   13cb8:	movcc	r1, #39	; 0x27
   13cbc:	strbcc	r1, [r5, r8]
   13cc0:	ldr	r1, [sp, #88]	; 0x58
   13cc4:	cmp	r2, r1
   13cc8:	movcc	r1, #36	; 0x24
   13ccc:	strbcc	r1, [r5, r2]
   13cd0:	ldr	r1, [sp, #88]	; 0x58
   13cd4:	add	r2, r8, #2
   13cd8:	add	r8, r8, #3
   13cdc:	cmp	r2, r1
   13ce0:	movcc	r1, #39	; 0x27
   13ce4:	strbcc	r1, [r5, r2]
   13ce8:	ldr	r1, [sp, #88]	; 0x58
   13cec:	add	r2, r8, #1
   13cf0:	mov	r0, r3
   13cf4:	cmp	r8, r1
   13cf8:	movcc	r1, #92	; 0x5c
   13cfc:	strbcc	r1, [r5, r8]
   13d00:	ldr	r1, [sp, #88]	; 0x58
   13d04:	cmp	r2, r1
   13d08:	bcs	13d1c <__assert_fail@plt+0x2964>
   13d0c:	uxtb	r3, r6
   13d10:	mov	r1, #48	; 0x30
   13d14:	orr	r3, r1, r3, lsr #6
   13d18:	strb	r3, [r5, r2]
   13d1c:	ldr	r1, [sp, #88]	; 0x58
   13d20:	add	r2, r8, #2
   13d24:	add	r8, r8, #3
   13d28:	cmp	r2, r1
   13d2c:	lsrcc	r3, r6, #3
   13d30:	movcc	r1, #6
   13d34:	bficc	r3, r1, #3, #29
   13d38:	mov	r1, #6
   13d3c:	bfi	r6, r1, #3, #29
   13d40:	strbcc	r3, [r5, r2]
   13d44:	mov	r2, #1
   13d48:	b	13d58 <__assert_fail@plt+0x29a0>
   13d4c:	mov	r0, r3
   13d50:	mov	r1, #0
   13d54:	str	r1, [fp, #-52]	; 0xffffffcc
   13d58:	mov	ip, r2
   13d5c:	and	r1, r2, #1
   13d60:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13d64:	add	r3, r7, #1
   13d68:	cmp	r2, r3
   13d6c:	bls	13df4 <__assert_fail@plt+0x2a3c>
   13d70:	cmp	r1, #0
   13d74:	mvn	r5, lr
   13d78:	movwne	r1, #1
   13d7c:	orr	r5, r5, r1
   13d80:	tst	r5, #1
   13d84:	bne	13dc8 <__assert_fail@plt+0x2a10>
   13d88:	ldr	r1, [sp, #88]	; 0x58
   13d8c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13d90:	mov	r2, r4
   13d94:	ldr	r4, [sp, #88]	; 0x58
   13d98:	ldr	r0, [sp, #24]
   13d9c:	mov	lr, #0
   13da0:	cmp	r8, r1
   13da4:	movcc	r1, #39	; 0x27
   13da8:	strbcc	r1, [r5, r8]
   13dac:	add	r1, r8, #1
   13db0:	add	r8, r8, #2
   13db4:	cmp	r1, r4
   13db8:	movcc	r4, #39	; 0x27
   13dbc:	strbcc	r4, [r5, r1]
   13dc0:	mov	r4, r2
   13dc4:	b	13dcc <__assert_fail@plt+0x2a14>
   13dc8:	ldr	r5, [fp, #-84]	; 0xffffffac
   13dcc:	ldr	r1, [sp, #88]	; 0x58
   13dd0:	mov	r2, ip
   13dd4:	cmp	r8, r1
   13dd8:	ldr	r1, [sp, #72]	; 0x48
   13ddc:	strbcc	r6, [r5, r8]
   13de0:	add	r8, r8, #1
   13de4:	ldrb	r6, [r1, r7]
   13de8:	mov	r7, r3
   13dec:	mov	r3, r0
   13df0:	b	13c54 <__assert_fail@plt+0x289c>
   13df4:	ldr	ip, [sp, #88]	; 0x58
   13df8:	cmp	r1, #0
   13dfc:	movwne	r1, #1
   13e00:	str	r1, [fp, #-56]	; 0xffffffc8
   13e04:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13e08:	cmp	r0, #0
   13e0c:	bne	13e3c <__assert_fail@plt+0x2a84>
   13e10:	tst	lr, #1
   13e14:	beq	13e3c <__assert_fail@plt+0x2a84>
   13e18:	cmp	r8, ip
   13e1c:	mov	lr, #0
   13e20:	movcc	r0, #39	; 0x27
   13e24:	strbcc	r0, [r5, r8]
   13e28:	add	r0, r8, #1
   13e2c:	add	r8, r8, #2
   13e30:	cmp	r0, ip
   13e34:	movcc	r1, #39	; 0x27
   13e38:	strbcc	r1, [r5, r0]
   13e3c:	mov	r1, r9
   13e40:	mov	r0, r6
   13e44:	cmp	r8, ip
   13e48:	strbcc	r0, [r5, r8]
   13e4c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13e50:	add	r8, r8, #1
   13e54:	and	r0, r0, r1
   13e58:	str	r0, [fp, #-48]	; 0xffffffd0
   13e5c:	mov	r3, sl
   13e60:	add	r7, r7, #1
   13e64:	b	13354 <__assert_fail@plt+0x1f9c>
   13e68:	mov	r9, #0
   13e6c:	b	13eb0 <__assert_fail@plt+0x2af8>
   13e70:	mov	r9, #0
   13e74:	cmp	r2, r4
   13e78:	bls	13eb0 <__assert_fail@plt+0x2af8>
   13e7c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13e80:	ldr	r1, [sp, #24]
   13e84:	add	r0, r4, r7
   13e88:	mov	r3, r1
   13e8c:	ldrb	r1, [r0, r1]
   13e90:	cmp	r1, #0
   13e94:	beq	13ebc <__assert_fail@plt+0x2b04>
   13e98:	add	r3, r3, #1
   13e9c:	add	r1, r7, r3
   13ea0:	cmp	r1, r2
   13ea4:	mov	r1, r3
   13ea8:	bcc	13e88 <__assert_fail@plt+0x2ad0>
   13eac:	b	139b4 <__assert_fail@plt+0x25fc>
   13eb0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13eb4:	ldr	r1, [sp, #24]
   13eb8:	b	139b4 <__assert_fail@plt+0x25fc>
   13ebc:	mov	r1, r3
   13ec0:	b	139b4 <__assert_fail@plt+0x25fc>
   13ec4:	mov	r9, #0
   13ec8:	mov	r4, r1
   13ecc:	b	13670 <__assert_fail@plt+0x22b8>
   13ed0:	mov	sl, r7
   13ed4:	b	13edc <__assert_fail@plt+0x2b24>
   13ed8:	mvn	sl, #0
   13edc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13ee0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13ee4:	eor	r0, r1, #2
   13ee8:	orr	r0, r0, r8
   13eec:	clz	r0, r0
   13ef0:	lsr	r0, r0, #5
   13ef4:	tst	r2, r0
   13ef8:	bne	13fa0 <__assert_fail@plt+0x2be8>
   13efc:	subs	r0, r1, #2
   13f00:	movwne	r0, #1
   13f04:	orr	r0, r2, r0
   13f08:	tst	r0, #1
   13f0c:	ldreq	r0, [sp, #60]	; 0x3c
   13f10:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   13f14:	eoreq	r0, r0, #1
   13f18:	tsteq	r0, #1
   13f1c:	bne	14034 <__assert_fail@plt+0x2c7c>
   13f20:	tst	r1, #1
   13f24:	bne	14000 <__assert_fail@plt+0x2c48>
   13f28:	ldr	r6, [sp, #56]	; 0x38
   13f2c:	mov	r9, #0
   13f30:	cmp	r6, #0
   13f34:	beq	1402c <__assert_fail@plt+0x2c74>
   13f38:	ldr	r0, [sp, #84]	; 0x54
   13f3c:	mov	r1, #0
   13f40:	mov	r7, #2
   13f44:	cmp	ip, #0
   13f48:	str	r1, [fp, #-48]	; 0xffffffd0
   13f4c:	mov	r1, #0
   13f50:	str	r1, [fp, #-76]	; 0xffffffb4
   13f54:	beq	130bc <__assert_fail@plt+0x1d04>
   13f58:	b	14034 <__assert_fail@plt+0x2c7c>
   13f5c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13f60:	ldr	r1, [fp, #12]
   13f64:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13f68:	mov	r5, r3
   13f6c:	mov	ip, r6
   13f70:	mov	r3, sl
   13f74:	b	13fc4 <__assert_fail@plt+0x2c0c>
   13f78:	tst	r4, #1
   13f7c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13f80:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13f84:	ldr	r1, [fp, #12]
   13f88:	ldr	r3, [sp, #36]	; 0x24
   13f8c:	mov	r0, #2
   13f90:	movwne	r0, #4
   13f94:	mov	r2, r0
   13f98:	b	13fc4 <__assert_fail@plt+0x2c0c>
   13f9c:	ldr	ip, [sp, #88]	; 0x58
   13fa0:	ldr	r1, [sp, #84]	; 0x54
   13fa4:	mov	r0, #2
   13fa8:	tst	r1, #1
   13fac:	movwne	r0, #4
   13fb0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13fb4:	ldr	r1, [fp, #12]
   13fb8:	mov	r3, sl
   13fbc:	cmp	r2, #2
   13fc0:	moveq	r2, r0
   13fc4:	mov	r0, #0
   13fc8:	bic	r1, r1, #2
   13fcc:	str	r2, [sp]
   13fd0:	mov	r2, r4
   13fd4:	str	r0, [sp, #8]
   13fd8:	ldr	r0, [sp, #76]	; 0x4c
   13fdc:	str	r1, [sp, #4]
   13fe0:	mov	r1, ip
   13fe4:	str	r0, [sp, #12]
   13fe8:	ldr	r0, [sp, #80]	; 0x50
   13fec:	str	r0, [sp, #16]
   13ff0:	mov	r0, r5
   13ff4:	bl	13030 <__assert_fail@plt+0x1c78>
   13ff8:	mov	r8, r0
   13ffc:	b	14080 <__assert_fail@plt+0x2cc8>
   14000:	mov	r0, #5
   14004:	ldr	r1, [sp, #56]	; 0x38
   14008:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1400c:	mov	r3, sl
   14010:	str	r0, [sp]
   14014:	ldr	r0, [fp, #12]
   14018:	str	r0, [sp, #4]
   1401c:	ldr	r0, [fp, #16]
   14020:	str	r0, [sp, #8]
   14024:	ldr	r0, [sp, #76]	; 0x4c
   14028:	b	13fe4 <__assert_fail@plt+0x2c2c>
   1402c:	mov	r0, #0
   14030:	str	r0, [fp, #-76]	; 0xffffffb4
   14034:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14038:	cmp	r1, #0
   1403c:	beq	14074 <__assert_fail@plt+0x2cbc>
   14040:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14044:	tst	r0, #1
   14048:	bne	14074 <__assert_fail@plt+0x2cbc>
   1404c:	ldrb	r0, [r1]
   14050:	cmp	r0, #0
   14054:	beq	14074 <__assert_fail@plt+0x2cbc>
   14058:	add	r1, r1, #1
   1405c:	cmp	r8, ip
   14060:	strbcc	r0, [r5, r8]
   14064:	add	r8, r8, #1
   14068:	ldrb	r0, [r1], #1
   1406c:	cmp	r0, #0
   14070:	bne	1405c <__assert_fail@plt+0x2ca4>
   14074:	cmp	r8, ip
   14078:	movcc	r0, #0
   1407c:	strbcc	r0, [r5, r8]
   14080:	mov	r0, r8
   14084:	sub	sp, fp, #28
   14088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1408c:	mov	r0, #4
   14090:	b	13fb0 <__assert_fail@plt+0x2bf8>
   14094:	mov	r4, r1
   14098:	b	13fa0 <__assert_fail@plt+0x2be8>
   1409c:	bl	113a0 <abort@plt>
   140a0:	mov	r3, r2
   140a4:	mov	r2, #0
   140a8:	b	140ac <__assert_fail@plt+0x2cf4>
   140ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140b0:	add	fp, sp, #28
   140b4:	sub	sp, sp, #36	; 0x24
   140b8:	movw	r8, #29192	; 0x7208
   140bc:	cmp	r3, #0
   140c0:	mov	r4, r2
   140c4:	str	r2, [sp, #24]
   140c8:	mov	r5, r1
   140cc:	mov	r6, r0
   140d0:	str	r0, [sp, #20]
   140d4:	movt	r8, #2
   140d8:	movne	r8, r3
   140dc:	bl	112b0 <__errno_location@plt>
   140e0:	str	r0, [sp, #28]
   140e4:	ldr	r1, [r8, #40]	; 0x28
   140e8:	ldr	r2, [r8, #44]	; 0x2c
   140ec:	ldr	r7, [r0]
   140f0:	cmp	r4, #0
   140f4:	add	sl, r8, #8
   140f8:	mov	r0, #0
   140fc:	ldm	r8, {r3, r9}
   14100:	orreq	r9, r9, #1
   14104:	stm	sp, {r3, r9, sl}
   14108:	str	r1, [sp, #12]
   1410c:	str	r2, [sp, #16]
   14110:	mov	r1, #0
   14114:	mov	r2, r6
   14118:	mov	r3, r5
   1411c:	str	r7, [sp, #32]
   14120:	mov	r7, r5
   14124:	bl	13030 <__assert_fail@plt+0x1c78>
   14128:	add	r4, r0, #1
   1412c:	mov	r5, r0
   14130:	mov	r0, r4
   14134:	bl	15050 <__assert_fail@plt+0x3c98>
   14138:	mov	r6, r0
   1413c:	ldr	r0, [r8]
   14140:	ldr	r2, [r8, #44]	; 0x2c
   14144:	ldr	r1, [r8, #40]	; 0x28
   14148:	mov	r3, r7
   1414c:	stm	sp, {r0, r9, sl}
   14150:	str	r2, [sp, #16]
   14154:	ldr	r2, [sp, #20]
   14158:	str	r1, [sp, #12]
   1415c:	mov	r0, r6
   14160:	mov	r1, r4
   14164:	bl	13030 <__assert_fail@plt+0x1c78>
   14168:	ldr	r0, [sp, #24]
   1416c:	ldr	r1, [sp, #32]
   14170:	ldr	r2, [sp, #28]
   14174:	cmp	r0, #0
   14178:	str	r1, [r2]
   1417c:	strne	r5, [r0]
   14180:	mov	r0, r6
   14184:	sub	sp, fp, #28
   14188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1418c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14190:	add	fp, sp, #24
   14194:	movw	r5, #28972	; 0x712c
   14198:	movw	r8, #28968	; 0x7128
   1419c:	movt	r5, #2
   141a0:	movt	r8, #2
   141a4:	ldr	r0, [r5]
   141a8:	ldr	r4, [r8]
   141ac:	cmp	r0, #2
   141b0:	blt	141dc <__assert_fail@plt+0x2e24>
   141b4:	add	r7, r4, #12
   141b8:	mov	r6, #0
   141bc:	ldr	r0, [r7, r6, lsl #3]
   141c0:	bl	12cac <__assert_fail@plt+0x18f4>
   141c4:	ldr	r1, [r5]
   141c8:	add	r2, r6, #2
   141cc:	add	r0, r6, #1
   141d0:	mov	r6, r0
   141d4:	cmp	r2, r1
   141d8:	blt	141bc <__assert_fail@plt+0x2e04>
   141dc:	ldr	r0, [r4, #4]
   141e0:	movw	r9, #29240	; 0x7238
   141e4:	movw	r7, #28976	; 0x7130
   141e8:	movt	r9, #2
   141ec:	movt	r7, #2
   141f0:	cmp	r0, r9
   141f4:	beq	14204 <__assert_fail@plt+0x2e4c>
   141f8:	bl	12cac <__assert_fail@plt+0x18f4>
   141fc:	mov	r0, #256	; 0x100
   14200:	stm	r7, {r0, r9}
   14204:	cmp	r4, r7
   14208:	beq	14218 <__assert_fail@plt+0x2e60>
   1420c:	mov	r0, r4
   14210:	bl	12cac <__assert_fail@plt+0x18f4>
   14214:	str	r7, [r8]
   14218:	mov	r0, #1
   1421c:	str	r0, [r5]
   14220:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14224:	movw	r3, #29192	; 0x7208
   14228:	mvn	r2, #0
   1422c:	movt	r3, #2
   14230:	b	14234 <__assert_fail@plt+0x2e7c>
   14234:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14238:	add	fp, sp, #28
   1423c:	sub	sp, sp, #44	; 0x2c
   14240:	mov	r7, r3
   14244:	str	r2, [sp, #36]	; 0x24
   14248:	str	r1, [sp, #32]
   1424c:	mov	r5, r0
   14250:	bl	112b0 <__errno_location@plt>
   14254:	cmp	r5, #0
   14258:	bmi	143c8 <__assert_fail@plt+0x3010>
   1425c:	cmn	r5, #-2147483647	; 0x80000001
   14260:	beq	143c8 <__assert_fail@plt+0x3010>
   14264:	movw	r8, #28972	; 0x712c
   14268:	movw	r4, #28968	; 0x7128
   1426c:	str	r0, [sp, #28]
   14270:	ldr	r0, [r0]
   14274:	movt	r8, #2
   14278:	movt	r4, #2
   1427c:	ldr	r1, [r8]
   14280:	ldr	r6, [r4]
   14284:	str	r0, [sp, #24]
   14288:	cmp	r1, r5
   1428c:	ble	14298 <__assert_fail@plt+0x2ee0>
   14290:	mov	sl, r6
   14294:	b	14304 <__assert_fail@plt+0x2f4c>
   14298:	movw	r9, #28976	; 0x7130
   1429c:	mov	r0, #8
   142a0:	str	r1, [fp, #-32]	; 0xffffffe0
   142a4:	sub	r1, r5, r1
   142a8:	mvn	r3, #-2147483648	; 0x80000000
   142ac:	movt	r9, #2
   142b0:	str	r0, [sp]
   142b4:	add	r2, r1, #1
   142b8:	sub	r1, fp, #32
   142bc:	subs	r0, r6, r9
   142c0:	movne	r0, r6
   142c4:	bl	15180 <__assert_fail@plt+0x3dc8>
   142c8:	mov	sl, r0
   142cc:	cmp	r6, r9
   142d0:	str	r0, [r4]
   142d4:	bne	142e0 <__assert_fail@plt+0x2f28>
   142d8:	ldrd	r0, [r9]
   142dc:	stm	sl, {r0, r1}
   142e0:	ldr	r1, [r8]
   142e4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   142e8:	add	r0, sl, r1, lsl #3
   142ec:	sub	r1, r2, r1
   142f0:	lsl	r2, r1, #3
   142f4:	mov	r1, #0
   142f8:	bl	112d4 <memset@plt>
   142fc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14300:	str	r0, [r8]
   14304:	mov	r9, sl
   14308:	ldm	r7, {r0, r1}
   1430c:	orr	r8, r1, #1
   14310:	add	r1, r7, #8
   14314:	ldr	r2, [r7, #40]	; 0x28
   14318:	ldr	r3, [r7, #44]	; 0x2c
   1431c:	ldr	r6, [r9, r5, lsl #3]!
   14320:	str	r1, [sp, #20]
   14324:	ldr	r4, [r9, #4]!
   14328:	stm	sp, {r0, r8}
   1432c:	add	r0, sp, #8
   14330:	stm	r0, {r1, r2, r3}
   14334:	ldr	r2, [sp, #32]
   14338:	ldr	r3, [sp, #36]	; 0x24
   1433c:	mov	r1, r6
   14340:	mov	r0, r4
   14344:	bl	13030 <__assert_fail@plt+0x1c78>
   14348:	cmp	r6, r0
   1434c:	bhi	143b0 <__assert_fail@plt+0x2ff8>
   14350:	add	r6, r0, #1
   14354:	movw	r0, #29240	; 0x7238
   14358:	movt	r0, #2
   1435c:	str	r6, [sl, r5, lsl #3]
   14360:	cmp	r4, r0
   14364:	beq	14370 <__assert_fail@plt+0x2fb8>
   14368:	mov	r0, r4
   1436c:	bl	12cac <__assert_fail@plt+0x18f4>
   14370:	mov	r0, r6
   14374:	bl	15050 <__assert_fail@plt+0x3c98>
   14378:	str	r0, [r9]
   1437c:	mov	r4, r0
   14380:	add	r3, sp, #8
   14384:	ldr	r0, [r7]
   14388:	ldr	r1, [r7, #40]	; 0x28
   1438c:	ldr	r2, [r7, #44]	; 0x2c
   14390:	stm	sp, {r0, r8}
   14394:	ldr	r0, [sp, #20]
   14398:	stm	r3, {r0, r1, r2}
   1439c:	ldr	r2, [sp, #32]
   143a0:	ldr	r3, [sp, #36]	; 0x24
   143a4:	mov	r0, r4
   143a8:	mov	r1, r6
   143ac:	bl	13030 <__assert_fail@plt+0x1c78>
   143b0:	ldr	r0, [sp, #28]
   143b4:	ldr	r1, [sp, #24]
   143b8:	str	r1, [r0]
   143bc:	mov	r0, r4
   143c0:	sub	sp, fp, #28
   143c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143c8:	bl	113a0 <abort@plt>
   143cc:	movw	r3, #29192	; 0x7208
   143d0:	movt	r3, #2
   143d4:	b	14234 <__assert_fail@plt+0x2e7c>
   143d8:	movw	r3, #29192	; 0x7208
   143dc:	mov	r1, r0
   143e0:	mov	r0, #0
   143e4:	mvn	r2, #0
   143e8:	movt	r3, #2
   143ec:	b	14234 <__assert_fail@plt+0x2e7c>
   143f0:	movw	r3, #29192	; 0x7208
   143f4:	mov	r2, r1
   143f8:	mov	r1, r0
   143fc:	mov	r0, #0
   14400:	movt	r3, #2
   14404:	b	14234 <__assert_fail@plt+0x2e7c>
   14408:	push	{fp, lr}
   1440c:	mov	fp, sp
   14410:	sub	sp, sp, #48	; 0x30
   14414:	vmov.i32	q8, #0	; 0x00000000
   14418:	mov	ip, #32
   1441c:	mov	r3, sp
   14420:	mov	lr, r2
   14424:	cmp	r1, #10
   14428:	add	r2, r3, #16
   1442c:	vst1.64	{d16-d17}, [r3], ip
   14430:	vst1.64	{d16-d17}, [r2]
   14434:	vst1.64	{d16-d17}, [r3]
   14438:	beq	14458 <__assert_fail@plt+0x30a0>
   1443c:	str	r1, [sp]
   14440:	mov	r3, sp
   14444:	mov	r1, lr
   14448:	mvn	r2, #0
   1444c:	bl	14234 <__assert_fail@plt+0x2e7c>
   14450:	mov	sp, fp
   14454:	pop	{fp, pc}
   14458:	bl	113a0 <abort@plt>
   1445c:	push	{r4, sl, fp, lr}
   14460:	add	fp, sp, #8
   14464:	sub	sp, sp, #48	; 0x30
   14468:	vmov.i32	q8, #0	; 0x00000000
   1446c:	mov	ip, r3
   14470:	mov	r3, sp
   14474:	mov	lr, #32
   14478:	cmp	r1, #10
   1447c:	add	r4, r3, #16
   14480:	vst1.64	{d16-d17}, [r3], lr
   14484:	vst1.64	{d16-d17}, [r4]
   14488:	vst1.64	{d16-d17}, [r3]
   1448c:	beq	144ac <__assert_fail@plt+0x30f4>
   14490:	str	r1, [sp]
   14494:	mov	r1, r2
   14498:	mov	r3, sp
   1449c:	mov	r2, ip
   144a0:	bl	14234 <__assert_fail@plt+0x2e7c>
   144a4:	sub	sp, fp, #8
   144a8:	pop	{r4, sl, fp, pc}
   144ac:	bl	113a0 <abort@plt>
   144b0:	mov	r2, r1
   144b4:	mov	r1, r0
   144b8:	mov	r0, #0
   144bc:	b	14408 <__assert_fail@plt+0x3050>
   144c0:	mov	r3, r2
   144c4:	mov	r2, r1
   144c8:	mov	r1, r0
   144cc:	mov	r0, #0
   144d0:	b	1445c <__assert_fail@plt+0x30a4>
   144d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   144d8:	add	fp, sp, #24
   144dc:	sub	sp, sp, #48	; 0x30
   144e0:	movw	r8, #29192	; 0x7208
   144e4:	mov	lr, r0
   144e8:	mov	r3, sp
   144ec:	mov	ip, r1
   144f0:	movt	r8, #2
   144f4:	mov	r1, r3
   144f8:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   144fc:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   14500:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   14504:	stm	r1, {r0, r4, r5, r6, r7, r9}
   14508:	ubfx	r0, r2, #5, #3
   1450c:	and	r2, r2, #31
   14510:	mov	r4, #1
   14514:	add	r0, r3, r0, lsl #2
   14518:	ldr	r1, [r0, #8]
   1451c:	bic	r4, r4, r1, lsr r2
   14520:	eor	r1, r1, r4, lsl r2
   14524:	mov	r2, ip
   14528:	str	r1, [r0, #8]
   1452c:	mov	r0, #0
   14530:	mov	r1, lr
   14534:	bl	14234 <__assert_fail@plt+0x2e7c>
   14538:	sub	sp, fp, #24
   1453c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14540:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14544:	add	fp, sp, #24
   14548:	sub	sp, sp, #48	; 0x30
   1454c:	movw	lr, #29192	; 0x7208
   14550:	mov	ip, r0
   14554:	mov	r3, sp
   14558:	movt	lr, #2
   1455c:	mov	r2, r3
   14560:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   14564:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   14568:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   1456c:	stm	r2, {r0, r4, r5, r6, r7, r8}
   14570:	ubfx	r0, r1, #5, #3
   14574:	and	r1, r1, #31
   14578:	mov	r7, #1
   1457c:	add	r0, r3, r0, lsl #2
   14580:	ldr	r2, [r0, #8]
   14584:	bic	r7, r7, r2, lsr r1
   14588:	eor	r1, r2, r7, lsl r1
   1458c:	mvn	r2, #0
   14590:	str	r1, [r0, #8]
   14594:	mov	r0, #0
   14598:	mov	r1, ip
   1459c:	bl	14234 <__assert_fail@plt+0x2e7c>
   145a0:	sub	sp, fp, #24
   145a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   145a8:	push	{r4, r5, r6, r7, fp, lr}
   145ac:	add	fp, sp, #16
   145b0:	sub	sp, sp, #48	; 0x30
   145b4:	movw	lr, #29192	; 0x7208
   145b8:	mov	ip, r0
   145bc:	mov	r3, sp
   145c0:	movt	lr, #2
   145c4:	mov	r2, r3
   145c8:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   145cc:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   145d0:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   145d4:	stm	r2, {r0, r1, r4, r5, r6, r7}
   145d8:	mov	r1, ip
   145dc:	mvn	r2, #0
   145e0:	ldr	r0, [sp, #12]
   145e4:	orr	r0, r0, #67108864	; 0x4000000
   145e8:	str	r0, [sp, #12]
   145ec:	mov	r0, #0
   145f0:	bl	14234 <__assert_fail@plt+0x2e7c>
   145f4:	sub	sp, fp, #16
   145f8:	pop	{r4, r5, r6, r7, fp, pc}
   145fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14600:	add	fp, sp, #24
   14604:	sub	sp, sp, #48	; 0x30
   14608:	movw	r8, #29192	; 0x7208
   1460c:	mov	ip, r1
   14610:	mov	lr, r0
   14614:	mov	r3, sp
   14618:	movt	r8, #2
   1461c:	mov	r2, r3
   14620:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   14624:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   14628:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   1462c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   14630:	mov	r1, lr
   14634:	mov	r2, ip
   14638:	ldr	r0, [sp, #12]
   1463c:	orr	r0, r0, #67108864	; 0x4000000
   14640:	str	r0, [sp, #12]
   14644:	mov	r0, #0
   14648:	bl	14234 <__assert_fail@plt+0x2e7c>
   1464c:	sub	sp, fp, #24
   14650:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14654:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14658:	add	fp, sp, #24
   1465c:	sub	sp, sp, #96	; 0x60
   14660:	vmov.i32	q8, #0	; 0x00000000
   14664:	mov	lr, sp
   14668:	mov	ip, r2
   1466c:	cmp	r1, #10
   14670:	add	r3, lr, #16
   14674:	mov	r2, lr
   14678:	vst1.64	{d16-d17}, [r3]
   1467c:	mov	r3, #28
   14680:	vst1.64	{d16-d17}, [r2], r3
   14684:	vst1.32	{d16-d17}, [r2]
   14688:	beq	146c8 <__assert_fail@plt+0x3310>
   1468c:	str	r1, [sp, #48]	; 0x30
   14690:	add	r3, sp, #48	; 0x30
   14694:	ldm	lr!, {r2, r4, r5, r6, r7}
   14698:	add	r1, r3, #4
   1469c:	stmia	r1!, {r2, r4, r5, r6, r7}
   146a0:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   146a4:	stm	r1, {r2, r4, r5, r6, r7, r8}
   146a8:	mvn	r2, #0
   146ac:	ldr	r1, [sp, #60]	; 0x3c
   146b0:	orr	r1, r1, #67108864	; 0x4000000
   146b4:	str	r1, [sp, #60]	; 0x3c
   146b8:	mov	r1, ip
   146bc:	bl	14234 <__assert_fail@plt+0x2e7c>
   146c0:	sub	sp, fp, #24
   146c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   146c8:	bl	113a0 <abort@plt>
   146cc:	push	{fp, lr}
   146d0:	mov	fp, sp
   146d4:	sub	sp, sp, #8
   146d8:	mvn	ip, #0
   146dc:	str	ip, [sp]
   146e0:	bl	146ec <__assert_fail@plt+0x3334>
   146e4:	mov	sp, fp
   146e8:	pop	{fp, pc}
   146ec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   146f0:	add	fp, sp, #24
   146f4:	sub	sp, sp, #48	; 0x30
   146f8:	movw	ip, #29192	; 0x7208
   146fc:	mov	lr, r3
   14700:	mov	r3, sp
   14704:	cmp	r1, #0
   14708:	movt	ip, #2
   1470c:	cmpne	r2, #0
   14710:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   14714:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   14718:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   1471c:	stm	r3, {r4, r5, r6, r7, r8, r9}
   14720:	mov	r3, #10
   14724:	str	r3, [sp]
   14728:	bne	14730 <__assert_fail@plt+0x3378>
   1472c:	bl	113a0 <abort@plt>
   14730:	ldr	ip, [fp, #8]
   14734:	str	r2, [sp, #44]	; 0x2c
   14738:	str	r1, [sp, #40]	; 0x28
   1473c:	mov	r3, sp
   14740:	mov	r1, lr
   14744:	mov	r2, ip
   14748:	bl	14234 <__assert_fail@plt+0x2e7c>
   1474c:	sub	sp, fp, #24
   14750:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14754:	push	{fp, lr}
   14758:	mov	fp, sp
   1475c:	sub	sp, sp, #8
   14760:	mov	r3, r2
   14764:	mov	r2, r1
   14768:	mov	r1, r0
   1476c:	mvn	r0, #0
   14770:	str	r0, [sp]
   14774:	mov	r0, #0
   14778:	bl	146ec <__assert_fail@plt+0x3334>
   1477c:	mov	sp, fp
   14780:	pop	{fp, pc}
   14784:	push	{fp, lr}
   14788:	mov	fp, sp
   1478c:	sub	sp, sp, #8
   14790:	mov	ip, r2
   14794:	mov	r2, r1
   14798:	mov	r1, r0
   1479c:	str	r3, [sp]
   147a0:	mov	r0, #0
   147a4:	mov	r3, ip
   147a8:	bl	146ec <__assert_fail@plt+0x3334>
   147ac:	mov	sp, fp
   147b0:	pop	{fp, pc}
   147b4:	movw	r3, #28984	; 0x7138
   147b8:	movt	r3, #2
   147bc:	b	14234 <__assert_fail@plt+0x2e7c>
   147c0:	movw	r3, #28984	; 0x7138
   147c4:	mov	r2, r1
   147c8:	mov	r1, r0
   147cc:	mov	r0, #0
   147d0:	movt	r3, #2
   147d4:	b	14234 <__assert_fail@plt+0x2e7c>
   147d8:	movw	r3, #28984	; 0x7138
   147dc:	mvn	r2, #0
   147e0:	movt	r3, #2
   147e4:	b	14234 <__assert_fail@plt+0x2e7c>
   147e8:	movw	r3, #28984	; 0x7138
   147ec:	mov	r1, r0
   147f0:	mov	r0, #0
   147f4:	mvn	r2, #0
   147f8:	movt	r3, #2
   147fc:	b	14234 <__assert_fail@plt+0x2e7c>
   14800:	push	{r4, r5, fp, lr}
   14804:	add	fp, sp, #8
   14808:	mov	r5, r0
   1480c:	mov	r4, r1
   14810:	mov	r0, #0
   14814:	mov	r2, #5
   14818:	mov	r1, r5
   1481c:	bl	11160 <dcgettext@plt>
   14820:	cmp	r0, r5
   14824:	popne	{r4, r5, fp, pc}
   14828:	bl	15780 <__assert_fail@plt+0x43c8>
   1482c:	ldrb	r1, [r0]
   14830:	and	r1, r1, #223	; 0xdf
   14834:	cmp	r1, #71	; 0x47
   14838:	beq	148a0 <__assert_fail@plt+0x34e8>
   1483c:	cmp	r1, #85	; 0x55
   14840:	bne	148f8 <__assert_fail@plt+0x3540>
   14844:	ldrb	r1, [r0, #1]
   14848:	and	r1, r1, #223	; 0xdf
   1484c:	cmp	r1, #84	; 0x54
   14850:	bne	148f8 <__assert_fail@plt+0x3540>
   14854:	ldrb	r1, [r0, #2]
   14858:	and	r1, r1, #223	; 0xdf
   1485c:	cmp	r1, #70	; 0x46
   14860:	bne	148f8 <__assert_fail@plt+0x3540>
   14864:	ldrb	r1, [r0, #3]
   14868:	cmp	r1, #45	; 0x2d
   1486c:	bne	148f8 <__assert_fail@plt+0x3540>
   14870:	ldrb	r1, [r0, #4]
   14874:	cmp	r1, #56	; 0x38
   14878:	bne	148f8 <__assert_fail@plt+0x3540>
   1487c:	ldrb	r0, [r0, #5]
   14880:	cmp	r0, #0
   14884:	bne	148f8 <__assert_fail@plt+0x3540>
   14888:	ldrb	r1, [r5]
   1488c:	movw	r2, #25936	; 0x6550
   14890:	movw	r0, #25940	; 0x6554
   14894:	movt	r2, #1
   14898:	movt	r0, #1
   1489c:	b	14928 <__assert_fail@plt+0x3570>
   148a0:	ldrb	r1, [r0, #1]
   148a4:	and	r1, r1, #223	; 0xdf
   148a8:	cmp	r1, #66	; 0x42
   148ac:	bne	148f8 <__assert_fail@plt+0x3540>
   148b0:	ldrb	r1, [r0, #2]
   148b4:	cmp	r1, #49	; 0x31
   148b8:	bne	148f8 <__assert_fail@plt+0x3540>
   148bc:	ldrb	r1, [r0, #3]
   148c0:	cmp	r1, #56	; 0x38
   148c4:	bne	148f8 <__assert_fail@plt+0x3540>
   148c8:	ldrb	r1, [r0, #4]
   148cc:	cmp	r1, #48	; 0x30
   148d0:	bne	148f8 <__assert_fail@plt+0x3540>
   148d4:	ldrb	r1, [r0, #5]
   148d8:	cmp	r1, #51	; 0x33
   148dc:	bne	148f8 <__assert_fail@plt+0x3540>
   148e0:	ldrb	r1, [r0, #6]
   148e4:	cmp	r1, #48	; 0x30
   148e8:	bne	148f8 <__assert_fail@plt+0x3540>
   148ec:	ldrb	r0, [r0, #7]
   148f0:	cmp	r0, #0
   148f4:	beq	14914 <__assert_fail@plt+0x355c>
   148f8:	movw	r1, #25930	; 0x654a
   148fc:	movw	r0, #25934	; 0x654e
   14900:	cmp	r4, #9
   14904:	movt	r1, #1
   14908:	movt	r0, #1
   1490c:	moveq	r0, r1
   14910:	pop	{r4, r5, fp, pc}
   14914:	ldrb	r1, [r5]
   14918:	movw	r2, #25944	; 0x6558
   1491c:	movw	r0, #25948	; 0x655c
   14920:	movt	r2, #1
   14924:	movt	r0, #1
   14928:	cmp	r1, #96	; 0x60
   1492c:	moveq	r0, r2
   14930:	pop	{r4, r5, fp, pc}
   14934:	push	{r4, r5, fp, lr}
   14938:	add	fp, sp, #8
   1493c:	mov	r5, r0
   14940:	mov	r0, #33	; 0x21
   14944:	bl	15020 <__assert_fail@plt+0x3c68>
   14948:	add	r1, r5, #44	; 0x2c
   1494c:	mov	r2, #32
   14950:	mov	r4, r0
   14954:	bl	112e0 <strncpy@plt>
   14958:	mov	r5, #0
   1495c:	strb	r5, [r0, #32]
   14960:	bl	11298 <strlen@plt>
   14964:	cmp	r0, #1
   14968:	blt	14990 <__assert_fail@plt+0x35d8>
   1496c:	add	r1, r4, r0
   14970:	mov	r0, r1
   14974:	ldrb	r2, [r0, #-1]!
   14978:	cmp	r2, #32
   1497c:	bne	14990 <__assert_fail@plt+0x35d8>
   14980:	strb	r5, [r1, #-1]
   14984:	cmp	r4, r0
   14988:	mov	r1, r0
   1498c:	bcc	14974 <__assert_fail@plt+0x35bc>
   14990:	mov	r0, r4
   14994:	pop	{r4, r5, fp, pc}
   14998:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1499c:	add	fp, sp, #28
   149a0:	sub	sp, sp, #20
   149a4:	mov	r6, #0
   149a8:	mov	r5, r3
   149ac:	str	r2, [sp, #12]
   149b0:	str	r1, [sp, #8]
   149b4:	str	r6, [sp, #16]
   149b8:	bl	11100 <utmpxname@plt>
   149bc:	bl	11178 <setutxent@plt>
   149c0:	bl	113ac <getutxent@plt>
   149c4:	cmp	r0, #0
   149c8:	beq	14aa8 <__assert_fail@plt+0x36f0>
   149cc:	mov	r4, r0
   149d0:	and	r7, r5, #1
   149d4:	and	r8, r5, #2
   149d8:	mov	r5, #0
   149dc:	mov	r9, #384	; 0x180
   149e0:	add	sl, sp, #16
   149e4:	mov	r6, #0
   149e8:	ldrb	r0, [r4, #44]	; 0x2c
   149ec:	cmp	r0, #0
   149f0:	mov	r0, #0
   149f4:	beq	14a08 <__assert_fail@plt+0x3650>
   149f8:	ldrh	r0, [r4]
   149fc:	sub	r0, r0, #7
   14a00:	clz	r0, r0
   14a04:	lsr	r0, r0, #5
   14a08:	cmp	r8, #0
   14a0c:	beq	14a18 <__assert_fail@plt+0x3660>
   14a10:	cmp	r0, #0
   14a14:	beq	14a94 <__assert_fail@plt+0x36dc>
   14a18:	cmp	r7, #0
   14a1c:	beq	14a54 <__assert_fail@plt+0x369c>
   14a20:	eors	r0, r0, #1
   14a24:	bne	14a54 <__assert_fail@plt+0x369c>
   14a28:	ldr	r0, [r4, #4]
   14a2c:	cmp	r0, #1
   14a30:	blt	14a54 <__assert_fail@plt+0x369c>
   14a34:	mov	r1, #0
   14a38:	bl	1125c <kill@plt>
   14a3c:	cmn	r0, #1
   14a40:	bgt	14a54 <__assert_fail@plt+0x369c>
   14a44:	bl	112b0 <__errno_location@plt>
   14a48:	ldr	r0, [r0]
   14a4c:	cmp	r0, #3
   14a50:	beq	14a94 <__assert_fail@plt+0x36dc>
   14a54:	ldr	r0, [sp, #16]
   14a58:	cmp	r5, r0
   14a5c:	bne	14a7c <__assert_fail@plt+0x36c4>
   14a60:	mov	r0, r6
   14a64:	mov	r1, sl
   14a68:	mov	r2, #1
   14a6c:	mvn	r3, #0
   14a70:	str	r9, [sp]
   14a74:	bl	15180 <__assert_fail@plt+0x3dc8>
   14a78:	mov	r6, r0
   14a7c:	add	r0, r5, r5, lsl #1
   14a80:	mov	r1, r4
   14a84:	mov	r2, #384	; 0x180
   14a88:	add	r0, r6, r0, lsl #7
   14a8c:	bl	11130 <memcpy@plt>
   14a90:	add	r5, r5, #1
   14a94:	bl	113ac <getutxent@plt>
   14a98:	mov	r4, r0
   14a9c:	cmp	r0, #0
   14aa0:	bne	149e8 <__assert_fail@plt+0x3630>
   14aa4:	b	14aac <__assert_fail@plt+0x36f4>
   14aa8:	mov	r5, #0
   14aac:	bl	11328 <endutxent@plt>
   14ab0:	ldr	r0, [sp, #8]
   14ab4:	str	r5, [r0]
   14ab8:	ldr	r0, [sp, #12]
   14abc:	str	r6, [r0]
   14ac0:	mov	r0, #0
   14ac4:	sub	sp, fp, #28
   14ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14acc:	push	{r4, r5, r6, r7, fp, lr}
   14ad0:	add	fp, sp, #16
   14ad4:	mov	r4, r1
   14ad8:	mov	r1, #0
   14adc:	mov	r6, r2
   14ae0:	bl	11334 <setlocale@plt>
   14ae4:	cmp	r0, #0
   14ae8:	beq	14b14 <__assert_fail@plt+0x375c>
   14aec:	mov	r7, r0
   14af0:	bl	11298 <strlen@plt>
   14af4:	cmp	r0, r6
   14af8:	bcs	14b28 <__assert_fail@plt+0x3770>
   14afc:	add	r2, r0, #1
   14b00:	mov	r0, r4
   14b04:	mov	r1, r7
   14b08:	bl	11130 <memcpy@plt>
   14b0c:	mov	r5, #0
   14b10:	b	14b50 <__assert_fail@plt+0x3798>
   14b14:	cmp	r6, #0
   14b18:	mov	r5, #22
   14b1c:	movne	r0, #0
   14b20:	strbne	r0, [r4]
   14b24:	b	14b50 <__assert_fail@plt+0x3798>
   14b28:	mov	r5, #34	; 0x22
   14b2c:	cmp	r6, #0
   14b30:	beq	14b50 <__assert_fail@plt+0x3798>
   14b34:	sub	r6, r6, #1
   14b38:	mov	r0, r4
   14b3c:	mov	r1, r7
   14b40:	mov	r2, r6
   14b44:	bl	11130 <memcpy@plt>
   14b48:	mov	r0, #0
   14b4c:	strb	r0, [r4, r6]
   14b50:	mov	r0, r5
   14b54:	pop	{r4, r5, r6, r7, fp, pc}
   14b58:	mov	r1, #0
   14b5c:	b	11334 <setlocale@plt>
   14b60:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14b64:	add	fp, sp, #24
   14b68:	sub	sp, sp, #32
   14b6c:	ldr	r6, [fp, #12]
   14b70:	ldr	r7, [fp, #8]
   14b74:	mov	r4, r2
   14b78:	mov	r8, r0
   14b7c:	cmp	r1, #0
   14b80:	beq	14ba8 <__assert_fail@plt+0x37f0>
   14b84:	movw	r2, #26036	; 0x65b4
   14b88:	mov	r5, r1
   14b8c:	str	r3, [sp, #4]
   14b90:	str	r4, [sp]
   14b94:	mov	r0, r8
   14b98:	mov	r1, #1
   14b9c:	movt	r2, #1
   14ba0:	mov	r3, r5
   14ba4:	b	14bc0 <__assert_fail@plt+0x3808>
   14ba8:	movw	r2, #26048	; 0x65c0
   14bac:	str	r3, [sp]
   14bb0:	mov	r0, r8
   14bb4:	mov	r1, #1
   14bb8:	mov	r3, r4
   14bbc:	movt	r2, #1
   14bc0:	bl	11304 <__fprintf_chk@plt>
   14bc4:	movw	r1, #26055	; 0x65c7
   14bc8:	mov	r0, #0
   14bcc:	mov	r2, #5
   14bd0:	movt	r1, #1
   14bd4:	bl	11160 <dcgettext@plt>
   14bd8:	movw	r2, #26773	; 0x6895
   14bdc:	mov	r3, r0
   14be0:	movw	r0, #2022	; 0x7e6
   14be4:	mov	r1, #1
   14be8:	movt	r2, #1
   14bec:	str	r0, [sp]
   14bf0:	mov	r0, r8
   14bf4:	bl	11304 <__fprintf_chk@plt>
   14bf8:	movw	r4, #24962	; 0x6182
   14bfc:	mov	r1, r8
   14c00:	movt	r4, #1
   14c04:	mov	r0, r4
   14c08:	bl	110d0 <fputs_unlocked@plt>
   14c0c:	movw	r1, #26059	; 0x65cb
   14c10:	mov	r0, #0
   14c14:	mov	r2, #5
   14c18:	movt	r1, #1
   14c1c:	bl	11160 <dcgettext@plt>
   14c20:	movw	r3, #26230	; 0x6676
   14c24:	mov	r2, r0
   14c28:	mov	r0, r8
   14c2c:	mov	r1, #1
   14c30:	movt	r3, #1
   14c34:	bl	11304 <__fprintf_chk@plt>
   14c38:	mov	r0, r4
   14c3c:	mov	r1, r8
   14c40:	bl	110d0 <fputs_unlocked@plt>
   14c44:	cmp	r6, #9
   14c48:	bhi	14cac <__assert_fail@plt+0x38f4>
   14c4c:	add	r0, pc, #0
   14c50:	ldr	pc, [r0, r6, lsl #2]
   14c54:	andeq	r4, r1, r4, lsl #29
   14c58:	andeq	r4, r1, ip, ror ip
   14c5c:			; <UNDEFINED> instruction: 0x00014cb8
   14c60:	andeq	r4, r1, r0, ror #25
   14c64:	andeq	r4, r1, r8, lsl #26
   14c68:	andeq	r4, r1, r0, lsr sp
   14c6c:	andeq	r4, r1, r8, asr sp
   14c70:	muleq	r1, r0, sp
   14c74:	andeq	r4, r1, r0, lsr lr
   14c78:	ldrdeq	r4, [r1], -r8
   14c7c:	movw	r1, #26264	; 0x6698
   14c80:	mov	r0, #0
   14c84:	mov	r2, #5
   14c88:	movt	r1, #1
   14c8c:	bl	11160 <dcgettext@plt>
   14c90:	ldr	r3, [r7]
   14c94:	mov	r2, r0
   14c98:	mov	r0, r8
   14c9c:	mov	r1, #1
   14ca0:	sub	sp, fp, #24
   14ca4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ca8:	b	11304 <__fprintf_chk@plt>
   14cac:	movw	r1, #26583	; 0x67d7
   14cb0:	movt	r1, #1
   14cb4:	b	14de0 <__assert_fail@plt+0x3a28>
   14cb8:	movw	r1, #26280	; 0x66a8
   14cbc:	mov	r0, #0
   14cc0:	mov	r2, #5
   14cc4:	movt	r1, #1
   14cc8:	bl	11160 <dcgettext@plt>
   14ccc:	mov	r2, r0
   14cd0:	ldr	r3, [r7]
   14cd4:	ldr	r0, [r7, #4]
   14cd8:	str	r0, [sp]
   14cdc:	b	14dcc <__assert_fail@plt+0x3a14>
   14ce0:	movw	r1, #26303	; 0x66bf
   14ce4:	mov	r0, #0
   14ce8:	mov	r2, #5
   14cec:	movt	r1, #1
   14cf0:	bl	11160 <dcgettext@plt>
   14cf4:	mov	r2, r0
   14cf8:	ldr	r3, [r7]
   14cfc:	ldmib	r7, {r0, r1}
   14d00:	stm	sp, {r0, r1}
   14d04:	b	14dcc <__assert_fail@plt+0x3a14>
   14d08:	movw	r1, #26331	; 0x66db
   14d0c:	mov	r0, #0
   14d10:	mov	r2, #5
   14d14:	movt	r1, #1
   14d18:	bl	11160 <dcgettext@plt>
   14d1c:	ldr	r3, [r7]
   14d20:	mov	r2, r0
   14d24:	ldmib	r7, {r0, r1, r7}
   14d28:	stm	sp, {r0, r1, r7}
   14d2c:	b	14dcc <__assert_fail@plt+0x3a14>
   14d30:	movw	r1, #26363	; 0x66fb
   14d34:	mov	r0, #0
   14d38:	mov	r2, #5
   14d3c:	movt	r1, #1
   14d40:	bl	11160 <dcgettext@plt>
   14d44:	ldr	r3, [r7]
   14d48:	mov	r2, r0
   14d4c:	ldmib	r7, {r0, r1, r6, r7}
   14d50:	stm	sp, {r0, r1, r6, r7}
   14d54:	b	14dcc <__assert_fail@plt+0x3a14>
   14d58:	movw	r1, #26399	; 0x671f
   14d5c:	mov	r0, #0
   14d60:	mov	r2, #5
   14d64:	movt	r1, #1
   14d68:	bl	11160 <dcgettext@plt>
   14d6c:	mov	r2, r0
   14d70:	ldr	r3, [r7]
   14d74:	ldmib	r7, {r0, r1, r6}
   14d78:	ldr	r5, [r7, #16]
   14d7c:	ldr	r7, [r7, #20]
   14d80:	stm	sp, {r0, r1, r6}
   14d84:	str	r5, [sp, #12]
   14d88:	str	r7, [sp, #16]
   14d8c:	b	14dcc <__assert_fail@plt+0x3a14>
   14d90:	movw	r1, #26439	; 0x6747
   14d94:	mov	r0, #0
   14d98:	mov	r2, #5
   14d9c:	movt	r1, #1
   14da0:	bl	11160 <dcgettext@plt>
   14da4:	mov	r2, r0
   14da8:	ldr	r3, [r7]
   14dac:	ldmib	r7, {r0, r1, r6}
   14db0:	ldr	r5, [r7, #16]
   14db4:	ldr	r4, [r7, #20]
   14db8:	ldr	r7, [r7, #24]
   14dbc:	stm	sp, {r0, r1, r6}
   14dc0:	str	r5, [sp, #12]
   14dc4:	str	r4, [sp, #16]
   14dc8:	str	r7, [sp, #20]
   14dcc:	mov	r0, r8
   14dd0:	mov	r1, #1
   14dd4:	b	14e80 <__assert_fail@plt+0x3ac8>
   14dd8:	movw	r1, #26531	; 0x67a3
   14ddc:	movt	r1, #1
   14de0:	mov	r0, #0
   14de4:	mov	r2, #5
   14de8:	bl	11160 <dcgettext@plt>
   14dec:	mov	ip, r0
   14df0:	ldr	r3, [r7]
   14df4:	ldr	r0, [r7, #4]
   14df8:	ldr	r1, [r7, #8]
   14dfc:	ldr	r6, [r7, #12]
   14e00:	ldr	r5, [r7, #16]
   14e04:	ldr	r4, [r7, #20]
   14e08:	ldr	r2, [r7, #24]
   14e0c:	ldr	lr, [r7, #28]
   14e10:	ldr	r7, [r7, #32]
   14e14:	stm	sp, {r0, r1, r6}
   14e18:	str	r5, [sp, #12]
   14e1c:	str	r4, [sp, #16]
   14e20:	str	r2, [sp, #20]
   14e24:	str	lr, [sp, #24]
   14e28:	str	r7, [sp, #28]
   14e2c:	b	14e74 <__assert_fail@plt+0x3abc>
   14e30:	movw	r1, #26483	; 0x6773
   14e34:	mov	r0, #0
   14e38:	mov	r2, #5
   14e3c:	movt	r1, #1
   14e40:	bl	11160 <dcgettext@plt>
   14e44:	mov	ip, r0
   14e48:	ldr	r3, [r7]
   14e4c:	ldmib	r7, {r0, r1, r6}
   14e50:	ldr	r5, [r7, #16]
   14e54:	ldr	r4, [r7, #20]
   14e58:	ldr	r2, [r7, #24]
   14e5c:	ldr	r7, [r7, #28]
   14e60:	stm	sp, {r0, r1, r6}
   14e64:	str	r5, [sp, #12]
   14e68:	str	r4, [sp, #16]
   14e6c:	str	r2, [sp, #20]
   14e70:	str	r7, [sp, #24]
   14e74:	mov	r0, r8
   14e78:	mov	r1, #1
   14e7c:	mov	r2, ip
   14e80:	bl	11304 <__fprintf_chk@plt>
   14e84:	sub	sp, fp, #24
   14e88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e8c:	push	{r4, sl, fp, lr}
   14e90:	add	fp, sp, #8
   14e94:	sub	sp, sp, #8
   14e98:	ldr	ip, [fp, #8]
   14e9c:	mov	lr, #0
   14ea0:	ldr	r4, [ip, lr, lsl #2]
   14ea4:	add	lr, lr, #1
   14ea8:	cmp	r4, #0
   14eac:	bne	14ea0 <__assert_fail@plt+0x3ae8>
   14eb0:	sub	r4, lr, #1
   14eb4:	str	ip, [sp]
   14eb8:	str	r4, [sp, #4]
   14ebc:	bl	14b60 <__assert_fail@plt+0x37a8>
   14ec0:	sub	sp, fp, #8
   14ec4:	pop	{r4, sl, fp, pc}
   14ec8:	push	{r4, r5, fp, lr}
   14ecc:	add	fp, sp, #8
   14ed0:	sub	sp, sp, #48	; 0x30
   14ed4:	ldr	r4, [fp, #8]
   14ed8:	mov	ip, #0
   14edc:	add	lr, sp, #8
   14ee0:	ldr	r5, [r4]
   14ee4:	cmp	r5, #0
   14ee8:	str	r5, [lr, ip, lsl #2]
   14eec:	beq	14f04 <__assert_fail@plt+0x3b4c>
   14ef0:	add	ip, ip, #1
   14ef4:	add	r4, r4, #4
   14ef8:	cmp	ip, #10
   14efc:	bne	14ee0 <__assert_fail@plt+0x3b28>
   14f00:	mov	ip, #10
   14f04:	str	lr, [sp]
   14f08:	str	ip, [sp, #4]
   14f0c:	bl	14b60 <__assert_fail@plt+0x37a8>
   14f10:	sub	sp, fp, #8
   14f14:	pop	{r4, r5, fp, pc}
   14f18:	push	{fp, lr}
   14f1c:	mov	fp, sp
   14f20:	sub	sp, sp, #8
   14f24:	add	ip, fp, #8
   14f28:	str	ip, [sp, #4]
   14f2c:	str	ip, [sp]
   14f30:	bl	14ec8 <__assert_fail@plt+0x3b10>
   14f34:	mov	sp, fp
   14f38:	pop	{fp, pc}
   14f3c:	push	{fp, lr}
   14f40:	mov	fp, sp
   14f44:	movw	r0, #29052	; 0x717c
   14f48:	movt	r0, #2
   14f4c:	ldr	r1, [r0]
   14f50:	movw	r0, #24962	; 0x6182
   14f54:	movt	r0, #1
   14f58:	bl	110d0 <fputs_unlocked@plt>
   14f5c:	movw	r1, #26643	; 0x6813
   14f60:	mov	r0, #0
   14f64:	mov	r2, #5
   14f68:	movt	r1, #1
   14f6c:	bl	11160 <dcgettext@plt>
   14f70:	movw	r2, #26663	; 0x6827
   14f74:	mov	r1, r0
   14f78:	mov	r0, #1
   14f7c:	movt	r2, #1
   14f80:	bl	112ec <__printf_chk@plt>
   14f84:	movw	r1, #26685	; 0x683d
   14f88:	mov	r0, #0
   14f8c:	mov	r2, #5
   14f90:	movt	r1, #1
   14f94:	bl	11160 <dcgettext@plt>
   14f98:	movw	r2, #24548	; 0x5fe4
   14f9c:	movw	r3, #24771	; 0x60c3
   14fa0:	mov	r1, r0
   14fa4:	mov	r0, #1
   14fa8:	movt	r2, #1
   14fac:	movt	r3, #1
   14fb0:	bl	112ec <__printf_chk@plt>
   14fb4:	movw	r1, #26705	; 0x6851
   14fb8:	mov	r0, #0
   14fbc:	mov	r2, #5
   14fc0:	movt	r1, #1
   14fc4:	bl	11160 <dcgettext@plt>
   14fc8:	movw	r2, #26744	; 0x6878
   14fcc:	mov	r1, r0
   14fd0:	mov	r0, #1
   14fd4:	movt	r2, #1
   14fd8:	pop	{fp, lr}
   14fdc:	b	112ec <__printf_chk@plt>
   14fe0:	b	14fe4 <__assert_fail@plt+0x3c2c>
   14fe4:	push	{r4, r5, r6, sl, fp, lr}
   14fe8:	add	fp, sp, #16
   14fec:	mov	r4, r2
   14ff0:	mov	r5, r1
   14ff4:	mov	r6, r0
   14ff8:	bl	1581c <__assert_fail@plt+0x4464>
   14ffc:	cmp	r0, #0
   15000:	popne	{r4, r5, r6, sl, fp, pc}
   15004:	cmp	r6, #0
   15008:	beq	1501c <__assert_fail@plt+0x3c64>
   1500c:	cmp	r5, #0
   15010:	cmpne	r4, #0
   15014:	bne	1501c <__assert_fail@plt+0x3c64>
   15018:	pop	{r4, r5, r6, sl, fp, pc}
   1501c:	bl	1544c <__assert_fail@plt+0x4094>
   15020:	push	{fp, lr}
   15024:	mov	fp, sp
   15028:	bl	154e4 <__assert_fail@plt+0x412c>
   1502c:	cmp	r0, #0
   15030:	popne	{fp, pc}
   15034:	bl	1544c <__assert_fail@plt+0x4094>
   15038:	push	{fp, lr}
   1503c:	mov	fp, sp
   15040:	bl	154e4 <__assert_fail@plt+0x412c>
   15044:	cmp	r0, #0
   15048:	popne	{fp, pc}
   1504c:	bl	1544c <__assert_fail@plt+0x4094>
   15050:	push	{fp, lr}
   15054:	mov	fp, sp
   15058:	bl	154e4 <__assert_fail@plt+0x412c>
   1505c:	cmp	r0, #0
   15060:	popne	{fp, pc}
   15064:	bl	1544c <__assert_fail@plt+0x4094>
   15068:	push	{r4, r5, fp, lr}
   1506c:	add	fp, sp, #8
   15070:	mov	r4, r1
   15074:	mov	r5, r0
   15078:	bl	15514 <__assert_fail@plt+0x415c>
   1507c:	cmp	r0, #0
   15080:	popne	{r4, r5, fp, pc}
   15084:	cmp	r5, #0
   15088:	beq	15098 <__assert_fail@plt+0x3ce0>
   1508c:	cmp	r4, #0
   15090:	bne	15098 <__assert_fail@plt+0x3ce0>
   15094:	pop	{r4, r5, fp, pc}
   15098:	bl	1544c <__assert_fail@plt+0x4094>
   1509c:	push	{fp, lr}
   150a0:	mov	fp, sp
   150a4:	cmp	r1, #0
   150a8:	orreq	r1, r1, #1
   150ac:	bl	15514 <__assert_fail@plt+0x415c>
   150b0:	cmp	r0, #0
   150b4:	popne	{fp, pc}
   150b8:	bl	1544c <__assert_fail@plt+0x4094>
   150bc:	push	{fp, lr}
   150c0:	mov	fp, sp
   150c4:	clz	r3, r2
   150c8:	lsr	ip, r3, #5
   150cc:	clz	r3, r1
   150d0:	lsr	r3, r3, #5
   150d4:	orrs	r3, r3, ip
   150d8:	movwne	r1, #1
   150dc:	movwne	r2, #1
   150e0:	bl	1581c <__assert_fail@plt+0x4464>
   150e4:	cmp	r0, #0
   150e8:	popne	{fp, pc}
   150ec:	bl	1544c <__assert_fail@plt+0x4094>
   150f0:	push	{fp, lr}
   150f4:	mov	fp, sp
   150f8:	mov	r2, r1
   150fc:	mov	r1, r0
   15100:	mov	r0, #0
   15104:	bl	1581c <__assert_fail@plt+0x4464>
   15108:	cmp	r0, #0
   1510c:	popne	{fp, pc}
   15110:	bl	1544c <__assert_fail@plt+0x4094>
   15114:	mov	r2, r1
   15118:	mov	r1, r0
   1511c:	mov	r0, #0
   15120:	b	150bc <__assert_fail@plt+0x3d04>
   15124:	mov	r2, #1
   15128:	b	1512c <__assert_fail@plt+0x3d74>
   1512c:	push	{r4, r5, fp, lr}
   15130:	add	fp, sp, #8
   15134:	ldr	r5, [r1]
   15138:	mov	r4, r1
   1513c:	cmp	r0, #0
   15140:	beq	15158 <__assert_fail@plt+0x3da0>
   15144:	mov	r1, #1
   15148:	add	r1, r1, r5, lsr #1
   1514c:	adds	r5, r5, r1
   15150:	bcc	15170 <__assert_fail@plt+0x3db8>
   15154:	bl	1544c <__assert_fail@plt+0x4094>
   15158:	cmp	r5, #0
   1515c:	bne	15170 <__assert_fail@plt+0x3db8>
   15160:	mov	r1, #64	; 0x40
   15164:	cmp	r2, #64	; 0x40
   15168:	udiv	r5, r1, r2
   1516c:	addhi	r5, r5, #1
   15170:	mov	r1, r5
   15174:	bl	14fe4 <__assert_fail@plt+0x3c2c>
   15178:	str	r5, [r4]
   1517c:	pop	{r4, r5, fp, pc}
   15180:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15184:	add	fp, sp, #24
   15188:	ldr	r6, [r1]
   1518c:	mov	r8, r1
   15190:	ldr	r4, [fp, #8]
   15194:	add	r1, r6, r6, asr #1
   15198:	cmp	r1, r6
   1519c:	mvnvs	r1, #-2147483648	; 0x80000000
   151a0:	cmp	r1, r3
   151a4:	mov	r5, r1
   151a8:	movgt	r5, r3
   151ac:	cmn	r3, #1
   151b0:	movle	r5, r1
   151b4:	cmn	r4, #1
   151b8:	ble	151d8 <__assert_fail@plt+0x3e20>
   151bc:	cmp	r4, #0
   151c0:	beq	1522c <__assert_fail@plt+0x3e74>
   151c4:	cmn	r5, #1
   151c8:	ble	15200 <__assert_fail@plt+0x3e48>
   151cc:	mvn	r7, #-2147483648	; 0x80000000
   151d0:	udiv	r1, r7, r4
   151d4:	b	151f4 <__assert_fail@plt+0x3e3c>
   151d8:	cmn	r5, #1
   151dc:	ble	1521c <__assert_fail@plt+0x3e64>
   151e0:	cmn	r4, #1
   151e4:	beq	1522c <__assert_fail@plt+0x3e74>
   151e8:	mov	r1, #-2147483648	; 0x80000000
   151ec:	mvn	r7, #-2147483648	; 0x80000000
   151f0:	sdiv	r1, r1, r4
   151f4:	cmp	r1, r5
   151f8:	bge	1522c <__assert_fail@plt+0x3e74>
   151fc:	b	1523c <__assert_fail@plt+0x3e84>
   15200:	beq	1522c <__assert_fail@plt+0x3e74>
   15204:	mov	r1, #-2147483648	; 0x80000000
   15208:	mvn	r7, #-2147483648	; 0x80000000
   1520c:	sdiv	r1, r1, r5
   15210:	cmp	r1, r4
   15214:	bge	1522c <__assert_fail@plt+0x3e74>
   15218:	b	1523c <__assert_fail@plt+0x3e84>
   1521c:	mvn	r7, #-2147483648	; 0x80000000
   15220:	sdiv	r1, r7, r4
   15224:	cmp	r5, r1
   15228:	blt	1523c <__assert_fail@plt+0x3e84>
   1522c:	mul	r1, r5, r4
   15230:	mov	r7, #64	; 0x40
   15234:	cmp	r1, #63	; 0x3f
   15238:	bgt	15244 <__assert_fail@plt+0x3e8c>
   1523c:	sdiv	r5, r7, r4
   15240:	mul	r1, r5, r4
   15244:	cmp	r0, #0
   15248:	moveq	r7, #0
   1524c:	streq	r7, [r8]
   15250:	sub	r7, r5, r6
   15254:	cmp	r7, r2
   15258:	bge	152fc <__assert_fail@plt+0x3f44>
   1525c:	add	r5, r6, r2
   15260:	mov	r2, #0
   15264:	mov	r1, #0
   15268:	cmp	r5, r3
   1526c:	movwgt	r2, #1
   15270:	cmn	r3, #1
   15274:	movwgt	r1, #1
   15278:	cmp	r5, r6
   1527c:	bvs	152e4 <__assert_fail@plt+0x3f2c>
   15280:	ands	r1, r1, r2
   15284:	bne	152e4 <__assert_fail@plt+0x3f2c>
   15288:	cmn	r4, #1
   1528c:	ble	152ac <__assert_fail@plt+0x3ef4>
   15290:	cmp	r4, #0
   15294:	beq	152f8 <__assert_fail@plt+0x3f40>
   15298:	cmn	r5, #1
   1529c:	ble	152d0 <__assert_fail@plt+0x3f18>
   152a0:	mvn	r1, #-2147483648	; 0x80000000
   152a4:	udiv	r1, r1, r4
   152a8:	b	152c4 <__assert_fail@plt+0x3f0c>
   152ac:	cmn	r5, #1
   152b0:	ble	152e8 <__assert_fail@plt+0x3f30>
   152b4:	cmn	r4, #1
   152b8:	beq	152f8 <__assert_fail@plt+0x3f40>
   152bc:	mov	r1, #-2147483648	; 0x80000000
   152c0:	sdiv	r1, r1, r4
   152c4:	cmp	r1, r5
   152c8:	bge	152f8 <__assert_fail@plt+0x3f40>
   152cc:	b	152e4 <__assert_fail@plt+0x3f2c>
   152d0:	beq	152f8 <__assert_fail@plt+0x3f40>
   152d4:	mov	r1, #-2147483648	; 0x80000000
   152d8:	sdiv	r1, r1, r5
   152dc:	cmp	r1, r4
   152e0:	bge	152f8 <__assert_fail@plt+0x3f40>
   152e4:	bl	1544c <__assert_fail@plt+0x4094>
   152e8:	mvn	r1, #-2147483648	; 0x80000000
   152ec:	sdiv	r1, r1, r4
   152f0:	cmp	r5, r1
   152f4:	blt	152e4 <__assert_fail@plt+0x3f2c>
   152f8:	mul	r1, r5, r4
   152fc:	bl	15068 <__assert_fail@plt+0x3cb0>
   15300:	str	r5, [r8]
   15304:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15308:	push	{fp, lr}
   1530c:	mov	fp, sp
   15310:	mov	r1, #1
   15314:	bl	15490 <__assert_fail@plt+0x40d8>
   15318:	cmp	r0, #0
   1531c:	popne	{fp, pc}
   15320:	bl	1544c <__assert_fail@plt+0x4094>
   15324:	push	{fp, lr}
   15328:	mov	fp, sp
   1532c:	bl	15490 <__assert_fail@plt+0x40d8>
   15330:	cmp	r0, #0
   15334:	popne	{fp, pc}
   15338:	bl	1544c <__assert_fail@plt+0x4094>
   1533c:	push	{fp, lr}
   15340:	mov	fp, sp
   15344:	mov	r1, #1
   15348:	bl	15490 <__assert_fail@plt+0x40d8>
   1534c:	cmp	r0, #0
   15350:	popne	{fp, pc}
   15354:	bl	1544c <__assert_fail@plt+0x4094>
   15358:	push	{fp, lr}
   1535c:	mov	fp, sp
   15360:	bl	15490 <__assert_fail@plt+0x40d8>
   15364:	cmp	r0, #0
   15368:	popne	{fp, pc}
   1536c:	bl	1544c <__assert_fail@plt+0x4094>
   15370:	push	{r4, r5, fp, lr}
   15374:	add	fp, sp, #8
   15378:	mov	r5, r0
   1537c:	mov	r0, r1
   15380:	mov	r4, r1
   15384:	bl	154e4 <__assert_fail@plt+0x412c>
   15388:	cmp	r0, #0
   1538c:	beq	153a0 <__assert_fail@plt+0x3fe8>
   15390:	mov	r1, r5
   15394:	mov	r2, r4
   15398:	pop	{r4, r5, fp, lr}
   1539c:	b	11130 <memcpy@plt>
   153a0:	bl	1544c <__assert_fail@plt+0x4094>
   153a4:	push	{r4, r5, fp, lr}
   153a8:	add	fp, sp, #8
   153ac:	mov	r5, r0
   153b0:	mov	r0, r1
   153b4:	mov	r4, r1
   153b8:	bl	154e4 <__assert_fail@plt+0x412c>
   153bc:	cmp	r0, #0
   153c0:	beq	153d4 <__assert_fail@plt+0x401c>
   153c4:	mov	r1, r5
   153c8:	mov	r2, r4
   153cc:	pop	{r4, r5, fp, lr}
   153d0:	b	11130 <memcpy@plt>
   153d4:	bl	1544c <__assert_fail@plt+0x4094>
   153d8:	push	{r4, r5, fp, lr}
   153dc:	add	fp, sp, #8
   153e0:	mov	r5, r0
   153e4:	add	r0, r1, #1
   153e8:	mov	r4, r1
   153ec:	bl	154e4 <__assert_fail@plt+0x412c>
   153f0:	cmp	r0, #0
   153f4:	beq	15410 <__assert_fail@plt+0x4058>
   153f8:	mov	r1, #0
   153fc:	mov	r2, r4
   15400:	strb	r1, [r0, r4]
   15404:	mov	r1, r5
   15408:	pop	{r4, r5, fp, lr}
   1540c:	b	11130 <memcpy@plt>
   15410:	bl	1544c <__assert_fail@plt+0x4094>
   15414:	push	{r4, r5, fp, lr}
   15418:	add	fp, sp, #8
   1541c:	mov	r4, r0
   15420:	bl	11298 <strlen@plt>
   15424:	add	r5, r0, #1
   15428:	mov	r0, r5
   1542c:	bl	154e4 <__assert_fail@plt+0x412c>
   15430:	cmp	r0, #0
   15434:	beq	15448 <__assert_fail@plt+0x4090>
   15438:	mov	r1, r4
   1543c:	mov	r2, r5
   15440:	pop	{r4, r5, fp, lr}
   15444:	b	11130 <memcpy@plt>
   15448:	bl	1544c <__assert_fail@plt+0x4094>
   1544c:	push	{fp, lr}
   15450:	mov	fp, sp
   15454:	movw	r0, #28964	; 0x7124
   15458:	movw	r1, #26820	; 0x68c4
   1545c:	mov	r2, #5
   15460:	movt	r0, #2
   15464:	movt	r1, #1
   15468:	ldr	r4, [r0]
   1546c:	mov	r0, #0
   15470:	bl	11160 <dcgettext@plt>
   15474:	movw	r2, #25775	; 0x64af
   15478:	mov	r3, r0
   1547c:	mov	r0, r4
   15480:	mov	r1, #0
   15484:	movt	r2, #1
   15488:	bl	111e4 <error@plt>
   1548c:	bl	113a0 <abort@plt>
   15490:	clz	r2, r1
   15494:	clz	r3, r0
   15498:	lsr	r2, r2, #5
   1549c:	lsr	r3, r3, #5
   154a0:	orrs	r2, r3, r2
   154a4:	movwne	r1, #1
   154a8:	movwne	r0, #1
   154ac:	cmp	r1, #0
   154b0:	beq	154e0 <__assert_fail@plt+0x4128>
   154b4:	mvn	r2, #-2147483648	; 0x80000000
   154b8:	udiv	r2, r2, r1
   154bc:	cmp	r2, r0
   154c0:	bcs	154e0 <__assert_fail@plt+0x4128>
   154c4:	push	{fp, lr}
   154c8:	mov	fp, sp
   154cc:	bl	112b0 <__errno_location@plt>
   154d0:	mov	r1, #12
   154d4:	str	r1, [r0]
   154d8:	mov	r0, #0
   154dc:	pop	{fp, pc}
   154e0:	b	110c4 <calloc@plt>
   154e4:	cmp	r0, #0
   154e8:	movweq	r0, #1
   154ec:	cmn	r0, #1
   154f0:	ble	154f8 <__assert_fail@plt+0x4140>
   154f4:	b	11208 <malloc@plt>
   154f8:	push	{fp, lr}
   154fc:	mov	fp, sp
   15500:	bl	112b0 <__errno_location@plt>
   15504:	mov	r1, #12
   15508:	str	r1, [r0]
   1550c:	mov	r0, #0
   15510:	pop	{fp, pc}
   15514:	push	{fp, lr}
   15518:	mov	fp, sp
   1551c:	cmp	r0, #0
   15520:	beq	1553c <__assert_fail@plt+0x4184>
   15524:	cmp	r1, #0
   15528:	beq	15548 <__assert_fail@plt+0x4190>
   1552c:	cmn	r1, #1
   15530:	ble	15550 <__assert_fail@plt+0x4198>
   15534:	pop	{fp, lr}
   15538:	b	11184 <realloc@plt>
   1553c:	mov	r0, r1
   15540:	pop	{fp, lr}
   15544:	b	154e4 <__assert_fail@plt+0x412c>
   15548:	bl	12cac <__assert_fail@plt+0x18f4>
   1554c:	b	1555c <__assert_fail@plt+0x41a4>
   15550:	bl	112b0 <__errno_location@plt>
   15554:	mov	r1, #12
   15558:	str	r1, [r0]
   1555c:	mov	r0, #0
   15560:	pop	{fp, pc}
   15564:	push	{r4, r5, r6, sl, fp, lr}
   15568:	add	fp, sp, #16
   1556c:	mov	r4, r0
   15570:	bl	111c0 <__fpending@plt>
   15574:	mov	r5, r0
   15578:	mov	r0, r4
   1557c:	bl	111cc <ferror_unlocked@plt>
   15580:	mov	r6, r0
   15584:	mov	r0, r4
   15588:	bl	155e4 <__assert_fail@plt+0x422c>
   1558c:	cmp	r6, #0
   15590:	beq	155b0 <__assert_fail@plt+0x41f8>
   15594:	mvn	r4, #0
   15598:	cmp	r0, #0
   1559c:	bne	155dc <__assert_fail@plt+0x4224>
   155a0:	bl	112b0 <__errno_location@plt>
   155a4:	mov	r1, #0
   155a8:	str	r1, [r0]
   155ac:	b	155dc <__assert_fail@plt+0x4224>
   155b0:	cmp	r0, #0
   155b4:	mov	r4, r0
   155b8:	mvnne	r4, #0
   155bc:	cmp	r5, #0
   155c0:	bne	155dc <__assert_fail@plt+0x4224>
   155c4:	cmp	r0, #0
   155c8:	beq	155dc <__assert_fail@plt+0x4224>
   155cc:	bl	112b0 <__errno_location@plt>
   155d0:	ldr	r0, [r0]
   155d4:	subs	r4, r0, #9
   155d8:	mvnne	r4, #0
   155dc:	mov	r0, r4
   155e0:	pop	{r4, r5, r6, sl, fp, pc}
   155e4:	push	{r4, r5, r6, sl, fp, lr}
   155e8:	add	fp, sp, #16
   155ec:	sub	sp, sp, #8
   155f0:	mov	r4, r0
   155f4:	bl	112f8 <fileno@plt>
   155f8:	cmn	r0, #1
   155fc:	ble	15670 <__assert_fail@plt+0x42b8>
   15600:	mov	r0, r4
   15604:	bl	1122c <__freading@plt>
   15608:	cmp	r0, #0
   1560c:	beq	15638 <__assert_fail@plt+0x4280>
   15610:	mov	r0, r4
   15614:	bl	112f8 <fileno@plt>
   15618:	mov	r1, #1
   1561c:	mov	r2, #0
   15620:	mov	r3, #0
   15624:	str	r1, [sp]
   15628:	bl	111a8 <lseek64@plt>
   1562c:	and	r0, r0, r1
   15630:	cmn	r0, #1
   15634:	beq	15670 <__assert_fail@plt+0x42b8>
   15638:	mov	r0, r4
   1563c:	bl	15680 <__assert_fail@plt+0x42c8>
   15640:	cmp	r0, #0
   15644:	beq	15670 <__assert_fail@plt+0x42b8>
   15648:	bl	112b0 <__errno_location@plt>
   1564c:	ldr	r6, [r0]
   15650:	mov	r5, r0
   15654:	mov	r0, r4
   15658:	bl	11310 <fclose@plt>
   1565c:	cmp	r6, #0
   15660:	strne	r6, [r5]
   15664:	mvnne	r0, #0
   15668:	sub	sp, fp, #16
   1566c:	pop	{r4, r5, r6, sl, fp, pc}
   15670:	mov	r0, r4
   15674:	sub	sp, fp, #16
   15678:	pop	{r4, r5, r6, sl, fp, lr}
   1567c:	b	11310 <fclose@plt>
   15680:	push	{r4, sl, fp, lr}
   15684:	add	fp, sp, #8
   15688:	sub	sp, sp, #8
   1568c:	mov	r4, r0
   15690:	cmp	r0, #0
   15694:	beq	156cc <__assert_fail@plt+0x4314>
   15698:	mov	r0, r4
   1569c:	bl	1122c <__freading@plt>
   156a0:	cmp	r0, #0
   156a4:	beq	156cc <__assert_fail@plt+0x4314>
   156a8:	ldrb	r0, [r4, #1]
   156ac:	tst	r0, #1
   156b0:	beq	156cc <__assert_fail@plt+0x4314>
   156b4:	mov	r0, #1
   156b8:	mov	r2, #0
   156bc:	mov	r3, #0
   156c0:	str	r0, [sp]
   156c4:	mov	r0, r4
   156c8:	bl	156dc <__assert_fail@plt+0x4324>
   156cc:	mov	r0, r4
   156d0:	sub	sp, fp, #8
   156d4:	pop	{r4, sl, fp, lr}
   156d8:	b	110f4 <fflush@plt>
   156dc:	push	{r4, r5, r6, r7, fp, lr}
   156e0:	add	fp, sp, #16
   156e4:	sub	sp, sp, #8
   156e8:	mov	r4, r0
   156ec:	ldr	r0, [r0, #4]
   156f0:	mov	r5, r3
   156f4:	mov	r6, r2
   156f8:	ldr	r1, [r4, #8]
   156fc:	cmp	r1, r0
   15700:	bne	1571c <__assert_fail@plt+0x4364>
   15704:	ldrd	r0, [r4, #16]
   15708:	cmp	r1, r0
   1570c:	bne	1571c <__assert_fail@plt+0x4364>
   15710:	ldr	r0, [r4, #36]	; 0x24
   15714:	cmp	r0, #0
   15718:	beq	15734 <__assert_fail@plt+0x437c>
   1571c:	mov	r0, r4
   15720:	mov	r2, r6
   15724:	mov	r3, r5
   15728:	sub	sp, fp, #16
   1572c:	pop	{r4, r5, r6, r7, fp, lr}
   15730:	b	1131c <fseeko64@plt>
   15734:	ldr	r7, [fp, #8]
   15738:	mov	r0, r4
   1573c:	bl	112f8 <fileno@plt>
   15740:	mov	r2, r6
   15744:	mov	r3, r5
   15748:	str	r7, [sp]
   1574c:	bl	111a8 <lseek64@plt>
   15750:	and	r2, r0, r1
   15754:	cmn	r2, #1
   15758:	beq	15774 <__assert_fail@plt+0x43bc>
   1575c:	strd	r0, [r4, #80]	; 0x50
   15760:	ldr	r0, [r4]
   15764:	bic	r0, r0, #16
   15768:	str	r0, [r4]
   1576c:	mov	r0, #0
   15770:	b	15778 <__assert_fail@plt+0x43c0>
   15774:	mvn	r0, #0
   15778:	sub	sp, fp, #16
   1577c:	pop	{r4, r5, r6, r7, fp, pc}
   15780:	push	{fp, lr}
   15784:	mov	fp, sp
   15788:	mov	r0, #14
   1578c:	bl	1134c <nl_langinfo@plt>
   15790:	movw	r1, #24963	; 0x6183
   15794:	cmp	r0, #0
   15798:	movt	r1, #1
   1579c:	movne	r1, r0
   157a0:	movw	r0, #26837	; 0x68d5
   157a4:	ldrb	r2, [r1]
   157a8:	movt	r0, #1
   157ac:	cmp	r2, #0
   157b0:	movne	r0, r1
   157b4:	pop	{fp, pc}
   157b8:	push	{r4, r5, r6, r7, fp, lr}
   157bc:	add	fp, sp, #16
   157c0:	sub	sp, sp, #8
   157c4:	cmp	r0, #0
   157c8:	add	r5, sp, #4
   157cc:	mov	r7, r2
   157d0:	mov	r4, r1
   157d4:	movne	r5, r0
   157d8:	mov	r0, r5
   157dc:	bl	111d8 <mbrtowc@plt>
   157e0:	mov	r6, r0
   157e4:	cmp	r7, #0
   157e8:	beq	15810 <__assert_fail@plt+0x4458>
   157ec:	cmn	r6, #2
   157f0:	bcc	15810 <__assert_fail@plt+0x4458>
   157f4:	mov	r0, #0
   157f8:	bl	12cd4 <__assert_fail@plt+0x191c>
   157fc:	cmp	r0, #0
   15800:	bne	15810 <__assert_fail@plt+0x4458>
   15804:	ldrb	r0, [r4]
   15808:	mov	r6, #1
   1580c:	str	r0, [r5]
   15810:	mov	r0, r6
   15814:	sub	sp, fp, #16
   15818:	pop	{r4, r5, r6, r7, fp, pc}
   1581c:	cmp	r2, #0
   15820:	beq	15850 <__assert_fail@plt+0x4498>
   15824:	mvn	r3, #0
   15828:	udiv	r3, r3, r2
   1582c:	cmp	r3, r1
   15830:	bcs	15850 <__assert_fail@plt+0x4498>
   15834:	push	{fp, lr}
   15838:	mov	fp, sp
   1583c:	bl	112b0 <__errno_location@plt>
   15840:	mov	r1, #12
   15844:	str	r1, [r0]
   15848:	mov	r0, #0
   1584c:	pop	{fp, pc}
   15850:	mul	r1, r2, r1
   15854:	b	15514 <__assert_fail@plt+0x415c>
   15858:	cmp	r3, #0
   1585c:	cmpeq	r2, #0
   15860:	bne	15884 <__assert_fail@plt+0x44cc>
   15864:	cmp	r1, #0
   15868:	movlt	r1, #-2147483648	; 0x80000000
   1586c:	movlt	r0, #0
   15870:	blt	15880 <__assert_fail@plt+0x44c8>
   15874:	cmpeq	r0, #0
   15878:	mvnne	r1, #-2147483648	; 0x80000000
   1587c:	mvnne	r0, #0
   15880:	b	1592c <__assert_fail@plt+0x4574>
   15884:	sub	sp, sp, #8
   15888:	push	{sp, lr}
   1588c:	cmp	r1, #0
   15890:	blt	158b0 <__assert_fail@plt+0x44f8>
   15894:	cmp	r3, #0
   15898:	blt	158e4 <__assert_fail@plt+0x452c>
   1589c:	bl	1593c <__assert_fail@plt+0x4584>
   158a0:	ldr	lr, [sp, #4]
   158a4:	add	sp, sp, #8
   158a8:	pop	{r2, r3}
   158ac:	bx	lr
   158b0:	rsbs	r0, r0, #0
   158b4:	sbc	r1, r1, r1, lsl #1
   158b8:	cmp	r3, #0
   158bc:	blt	15908 <__assert_fail@plt+0x4550>
   158c0:	bl	1593c <__assert_fail@plt+0x4584>
   158c4:	ldr	lr, [sp, #4]
   158c8:	add	sp, sp, #8
   158cc:	pop	{r2, r3}
   158d0:	rsbs	r0, r0, #0
   158d4:	sbc	r1, r1, r1, lsl #1
   158d8:	rsbs	r2, r2, #0
   158dc:	sbc	r3, r3, r3, lsl #1
   158e0:	bx	lr
   158e4:	rsbs	r2, r2, #0
   158e8:	sbc	r3, r3, r3, lsl #1
   158ec:	bl	1593c <__assert_fail@plt+0x4584>
   158f0:	ldr	lr, [sp, #4]
   158f4:	add	sp, sp, #8
   158f8:	pop	{r2, r3}
   158fc:	rsbs	r0, r0, #0
   15900:	sbc	r1, r1, r1, lsl #1
   15904:	bx	lr
   15908:	rsbs	r2, r2, #0
   1590c:	sbc	r3, r3, r3, lsl #1
   15910:	bl	1593c <__assert_fail@plt+0x4584>
   15914:	ldr	lr, [sp, #4]
   15918:	add	sp, sp, #8
   1591c:	pop	{r2, r3}
   15920:	rsbs	r2, r2, #0
   15924:	sbc	r3, r3, r3, lsl #1
   15928:	bx	lr
   1592c:	push	{r1, lr}
   15930:	mov	r0, #8
   15934:	bl	110dc <raise@plt>
   15938:	pop	{r1, pc}
   1593c:	cmp	r1, r3
   15940:	cmpeq	r0, r2
   15944:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15948:	mov	r4, r0
   1594c:	movcc	r0, #0
   15950:	mov	r5, r1
   15954:	ldr	lr, [sp, #36]	; 0x24
   15958:	movcc	r1, r0
   1595c:	bcc	15a58 <__assert_fail@plt+0x46a0>
   15960:	cmp	r3, #0
   15964:	clzeq	ip, r2
   15968:	clzne	ip, r3
   1596c:	addeq	ip, ip, #32
   15970:	cmp	r5, #0
   15974:	clzeq	r1, r4
   15978:	addeq	r1, r1, #32
   1597c:	clzne	r1, r5
   15980:	sub	ip, ip, r1
   15984:	sub	sl, ip, #32
   15988:	lsl	r9, r3, ip
   1598c:	rsb	fp, ip, #32
   15990:	orr	r9, r9, r2, lsl sl
   15994:	orr	r9, r9, r2, lsr fp
   15998:	lsl	r8, r2, ip
   1599c:	cmp	r5, r9
   159a0:	cmpeq	r4, r8
   159a4:	movcc	r0, #0
   159a8:	movcc	r1, r0
   159ac:	bcc	159c8 <__assert_fail@plt+0x4610>
   159b0:	mov	r0, #1
   159b4:	subs	r4, r4, r8
   159b8:	lsl	r1, r0, sl
   159bc:	orr	r1, r1, r0, lsr fp
   159c0:	lsl	r0, r0, ip
   159c4:	sbc	r5, r5, r9
   159c8:	cmp	ip, #0
   159cc:	beq	15a58 <__assert_fail@plt+0x46a0>
   159d0:	lsr	r6, r8, #1
   159d4:	orr	r6, r6, r9, lsl #31
   159d8:	lsr	r7, r9, #1
   159dc:	mov	r2, ip
   159e0:	b	15a04 <__assert_fail@plt+0x464c>
   159e4:	subs	r3, r4, r6
   159e8:	sbc	r8, r5, r7
   159ec:	adds	r3, r3, r3
   159f0:	adc	r8, r8, r8
   159f4:	adds	r4, r3, #1
   159f8:	adc	r5, r8, #0
   159fc:	subs	r2, r2, #1
   15a00:	beq	15a20 <__assert_fail@plt+0x4668>
   15a04:	cmp	r5, r7
   15a08:	cmpeq	r4, r6
   15a0c:	bcs	159e4 <__assert_fail@plt+0x462c>
   15a10:	adds	r4, r4, r4
   15a14:	adc	r5, r5, r5
   15a18:	subs	r2, r2, #1
   15a1c:	bne	15a04 <__assert_fail@plt+0x464c>
   15a20:	lsr	r3, r4, ip
   15a24:	orr	r3, r3, r5, lsl fp
   15a28:	lsr	r2, r5, ip
   15a2c:	orr	r3, r3, r5, lsr sl
   15a30:	adds	r0, r0, r4
   15a34:	mov	r4, r3
   15a38:	lsl	r3, r2, ip
   15a3c:	orr	r3, r3, r4, lsl sl
   15a40:	lsl	ip, r4, ip
   15a44:	orr	r3, r3, r4, lsr fp
   15a48:	adc	r1, r1, r5
   15a4c:	subs	r0, r0, ip
   15a50:	mov	r5, r2
   15a54:	sbc	r1, r1, r3
   15a58:	cmp	lr, #0
   15a5c:	strdne	r4, [lr]
   15a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a64:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15a68:	mov	r7, r0
   15a6c:	ldr	r6, [pc, #72]	; 15abc <__assert_fail@plt+0x4704>
   15a70:	ldr	r5, [pc, #72]	; 15ac0 <__assert_fail@plt+0x4708>
   15a74:	add	r6, pc, r6
   15a78:	add	r5, pc, r5
   15a7c:	sub	r6, r6, r5
   15a80:	mov	r8, r1
   15a84:	mov	r9, r2
   15a88:	bl	110a4 <calloc@plt-0x20>
   15a8c:	asrs	r6, r6, #2
   15a90:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a94:	mov	r4, #0
   15a98:	add	r4, r4, #1
   15a9c:	ldr	r3, [r5], #4
   15aa0:	mov	r2, r9
   15aa4:	mov	r1, r8
   15aa8:	mov	r0, r7
   15aac:	blx	r3
   15ab0:	cmp	r6, r4
   15ab4:	bne	15a98 <__assert_fail@plt+0x46e0>
   15ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15abc:	muleq	r1, r0, r4
   15ac0:	andeq	r1, r1, r8, lsl #9
   15ac4:	bx	lr
   15ac8:	ldr	r3, [pc, #12]	; 15adc <__assert_fail@plt+0x4724>
   15acc:	mov	r1, #0
   15ad0:	add	r3, pc, r3
   15ad4:	ldr	r2, [r3]
   15ad8:	b	112c8 <__cxa_atexit@plt>
   15adc:	andeq	r1, r1, ip, lsr r6
   15ae0:	mov	r2, r1
   15ae4:	mov	r1, r0
   15ae8:	mov	r0, #3
   15aec:	b	1137c <__xstat64@plt>

Disassembly of section .fini:

00015af0 <.fini>:
   15af0:	push	{r3, lr}
   15af4:	pop	{r3, pc}
