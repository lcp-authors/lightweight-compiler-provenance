
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test/monster_test:     file format elf32-littlearm


Disassembly of section .init:

00012e6c <.init>:
   12e6c:	push	{r3, lr}
   12e70:	bl	12fd4 <_start@@Base+0x3c>
   12e74:	pop	{r3, pc}

Disassembly of section .plt:

00012e78 <strcmp@plt-0x14>:
   12e78:	push	{lr}		; (str lr, [sp, #-4]!)
   12e7c:	ldr	lr, [pc, #4]	; 12e88 <strcmp@plt-0x4>
   12e80:	add	lr, pc, lr
   12e84:	ldr	pc, [lr, #8]!
   12e88:	andeq	r6, r2, r8, ror r1

00012e8c <strcmp@plt>:
   12e8c:	add	ip, pc, #0, 12
   12e90:	add	ip, ip, #155648	; 0x26000
   12e94:	ldr	pc, [ip, #376]!	; 0x178

00012e98 <printf@plt>:
   12e98:	add	ip, pc, #0, 12
   12e9c:	add	ip, ip, #155648	; 0x26000
   12ea0:	ldr	pc, [ip, #368]!	; 0x170

00012ea4 <free@plt>:
   12ea4:	add	ip, pc, #0, 12
   12ea8:	add	ip, ip, #155648	; 0x26000
   12eac:	ldr	pc, [ip, #360]!	; 0x168

00012eb0 <memcpy@plt>:
   12eb0:	add	ip, pc, #0, 12
   12eb4:	add	ip, ip, #155648	; 0x26000
   12eb8:	ldr	pc, [ip, #352]!	; 0x160

00012ebc <memcmp@plt>:
   12ebc:	add	ip, pc, #0, 12
   12ec0:	add	ip, ip, #155648	; 0x26000
   12ec4:	ldr	pc, [ip, #344]!	; 0x158

00012ec8 <realloc@plt>:
   12ec8:	add	ip, pc, #0, 12
   12ecc:	add	ip, ip, #155648	; 0x26000
   12ed0:	ldr	pc, [ip, #336]!	; 0x150

00012ed4 <fwrite@plt>:
   12ed4:	add	ip, pc, #0, 12
   12ed8:	add	ip, ip, #155648	; 0x26000
   12edc:	ldr	pc, [ip, #328]!	; 0x148

00012ee0 <gettimeofday@plt>:
   12ee0:	add	ip, pc, #0, 12
   12ee4:	add	ip, ip, #155648	; 0x26000
   12ee8:	ldr	pc, [ip, #320]!	; 0x140

00012eec <puts@plt>:
   12eec:	add	ip, pc, #0, 12
   12ef0:	add	ip, ip, #155648	; 0x26000
   12ef4:	ldr	pc, [ip, #312]!	; 0x138

00012ef8 <malloc@plt>:
   12ef8:	add	ip, pc, #0, 12
   12efc:	add	ip, ip, #155648	; 0x26000
   12f00:	ldr	pc, [ip, #304]!	; 0x130

00012f04 <__libc_start_main@plt>:
   12f04:	add	ip, pc, #0, 12
   12f08:	add	ip, ip, #155648	; 0x26000
   12f0c:	ldr	pc, [ip, #296]!	; 0x128

00012f10 <__gmon_start__@plt>:
   12f10:	add	ip, pc, #0, 12
   12f14:	add	ip, ip, #155648	; 0x26000
   12f18:	ldr	pc, [ip, #288]!	; 0x120

00012f1c <strlen@plt>:
   12f1c:	add	ip, pc, #0, 12
   12f20:	add	ip, ip, #155648	; 0x26000
   12f24:	ldr	pc, [ip, #280]!	; 0x118

00012f28 <fprintf@plt>:
   12f28:	add	ip, pc, #0, 12
   12f2c:	add	ip, ip, #155648	; 0x26000
   12f30:	ldr	pc, [ip, #272]!	; 0x110

00012f34 <posix_memalign@plt>:
   12f34:	add	ip, pc, #0, 12
   12f38:	add	ip, ip, #155648	; 0x26000
   12f3c:	ldr	pc, [ip, #264]!	; 0x108

00012f40 <memset@plt>:
   12f40:	add	ip, pc, #0, 12
   12f44:	add	ip, ip, #155648	; 0x26000
   12f48:	ldr	pc, [ip, #256]!	; 0x100

00012f4c <strncpy@plt>:
   12f4c:	add	ip, pc, #0, 12
   12f50:	add	ip, ip, #155648	; 0x26000
   12f54:	ldr	pc, [ip, #248]!	; 0xf8

00012f58 <memchr@plt>:
   12f58:	add	ip, pc, #0, 12
   12f5c:	add	ip, ip, #155648	; 0x26000
   12f60:	ldr	pc, [ip, #240]!	; 0xf0

00012f64 <fputc@plt>:
   12f64:	add	ip, pc, #0, 12
   12f68:	add	ip, ip, #155648	; 0x26000
   12f6c:	ldr	pc, [ip, #232]!	; 0xe8

00012f70 <strncmp@plt>:
   12f70:	add	ip, pc, #0, 12
   12f74:	add	ip, ip, #155648	; 0x26000
   12f78:	ldr	pc, [ip, #224]!	; 0xe0

00012f7c <abort@plt>:
   12f7c:	add	ip, pc, #0, 12
   12f80:	add	ip, ip, #155648	; 0x26000
   12f84:	ldr	pc, [ip, #216]!	; 0xd8

00012f88 <__assert_fail@plt>:
   12f88:	add	ip, pc, #0, 12
   12f8c:	add	ip, ip, #155648	; 0x26000
   12f90:	ldr	pc, [ip, #208]!	; 0xd0

Disassembly of section .text:

00012f98 <_start@@Base>:
   12f98:	mov	fp, #0
   12f9c:	mov	lr, #0
   12fa0:	pop	{r1}		; (ldr r1, [sp], #4)
   12fa4:	mov	r2, sp
   12fa8:	push	{r2}		; (str r2, [sp, #-4]!)
   12fac:	push	{r0}		; (str r0, [sp, #-4]!)
   12fb0:	ldr	ip, [pc, #16]	; 12fc8 <_start@@Base+0x30>
   12fb4:	push	{ip}		; (str ip, [sp, #-4]!)
   12fb8:	ldr	r0, [pc, #12]	; 12fcc <_start@@Base+0x34>
   12fbc:	ldr	r3, [pc, #12]	; 12fd0 <_start@@Base+0x38>
   12fc0:	bl	12f04 <__libc_start_main@plt>
   12fc4:	bl	12f7c <abort@plt>
   12fc8:	andeq	r2, r2, r8, lsl r3
   12fcc:	andeq	fp, r1, ip, lsr r3
   12fd0:			; <UNDEFINED> instruction: 0x000222b8
   12fd4:	ldr	r3, [pc, #20]	; 12ff0 <_start@@Base+0x58>
   12fd8:	ldr	r2, [pc, #20]	; 12ff4 <_start@@Base+0x5c>
   12fdc:	add	r3, pc, r3
   12fe0:	ldr	r2, [r3, r2]
   12fe4:	cmp	r2, #0
   12fe8:	bxeq	lr
   12fec:	b	12f10 <__gmon_start__@plt>
   12ff0:	andeq	r6, r2, ip, lsl r0
   12ff4:	andeq	r0, r0, r4, rrx
   12ff8:	ldr	r0, [pc, #24]	; 13018 <_start@@Base+0x80>
   12ffc:	ldr	r3, [pc, #24]	; 1301c <_start@@Base+0x84>
   13000:	cmp	r3, r0
   13004:	bxeq	lr
   13008:	ldr	r3, [pc, #16]	; 13020 <_start@@Base+0x88>
   1300c:	cmp	r3, #0
   13010:	bxeq	lr
   13014:	bx	r3
   13018:	andeq	r9, r3, r0, ror r0
   1301c:	andeq	r9, r3, r0, ror r0
   13020:	andeq	r0, r0, r0
   13024:	ldr	r0, [pc, #36]	; 13050 <_start@@Base+0xb8>
   13028:	ldr	r1, [pc, #36]	; 13054 <_start@@Base+0xbc>
   1302c:	sub	r1, r1, r0
   13030:	asr	r1, r1, #2
   13034:	add	r1, r1, r1, lsr #31
   13038:	asrs	r1, r1, #1
   1303c:	bxeq	lr
   13040:	ldr	r3, [pc, #16]	; 13058 <_start@@Base+0xc0>
   13044:	cmp	r3, #0
   13048:	bxeq	lr
   1304c:	bx	r3
   13050:	andeq	r9, r3, r0, ror r0
   13054:	andeq	r9, r3, r0, ror r0
   13058:	andeq	r0, r0, r0
   1305c:	push	{r4, lr}
   13060:	ldr	r4, [pc, #24]	; 13080 <_start@@Base+0xe8>
   13064:	ldrb	r3, [r4]
   13068:	cmp	r3, #0
   1306c:	popne	{r4, pc}
   13070:	bl	12ff8 <_start@@Base+0x60>
   13074:	mov	r3, #1
   13078:	strb	r3, [r4]
   1307c:	pop	{r4, pc}
   13080:	andeq	r9, r3, r4, ror r0
   13084:	b	13024 <_start@@Base+0x8c>

00013088 <verify_empty_monster@@Base>:
   13088:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1308c:	add	fp, sp, #24
   13090:	mov	r4, r0
   13094:	movw	r1, #9012	; 0x2334
   13098:	movt	r1, #2
   1309c:	bl	131cc <verify_empty_monster@@Base+0x144>
   130a0:	mov	r8, r0
   130a4:	movw	r1, #9017	; 0x2339
   130a8:	movt	r1, #2
   130ac:	mov	r0, r4
   130b0:	bl	131cc <verify_empty_monster@@Base+0x144>
   130b4:	mov	r5, r0
   130b8:	mov	r0, r4
   130bc:	mov	r1, #0
   130c0:	bl	131cc <verify_empty_monster@@Base+0x144>
   130c4:	mov	r6, r0
   130c8:	movw	r1, #9022	; 0x233e
   130cc:	movt	r1, #2
   130d0:	mov	r0, r4
   130d4:	bl	131cc <verify_empty_monster@@Base+0x144>
   130d8:	mov	r7, r0
   130dc:	mov	r0, r4
   130e0:	bl	13204 <verify_empty_monster@@Base+0x17c>
   130e4:	cmp	r8, #0
   130e8:	beq	13100 <verify_empty_monster@@Base+0x78>
   130ec:	cmp	r5, #0
   130f0:	beq	1310c <verify_empty_monster@@Base+0x84>
   130f4:	movw	r0, #21328	; 0x5350
   130f8:	movt	r0, #2
   130fc:	b	1311c <verify_empty_monster@@Base+0x94>
   13100:	movw	r0, #21088	; 0x5260
   13104:	movt	r0, #2
   13108:	b	1311c <verify_empty_monster@@Base+0x94>
   1310c:	cmp	r6, r8
   13110:	beq	13128 <verify_empty_monster@@Base+0xa0>
   13114:	movw	r0, #21264	; 0x5310
   13118:	movt	r0, #2
   1311c:	bl	12eec <puts@plt>
   13120:	mvn	r0, #0
   13124:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13128:	cmp	r7, r8
   1312c:	beq	1313c <verify_empty_monster@@Base+0xb4>
   13130:	movw	r0, #9028	; 0x2344
   13134:	movt	r0, #2
   13138:	b	1314c <verify_empty_monster@@Base+0xc4>
   1313c:	cmp	r0, r8
   13140:	beq	13158 <verify_empty_monster@@Base+0xd0>
   13144:	movw	r0, #9079	; 0x2377
   13148:	movt	r0, #2
   1314c:	bl	12e98 <printf@plt>
   13150:	mvn	r0, #0
   13154:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13158:	mov	r0, r8
   1315c:	bl	13244 <verify_empty_monster@@Base+0x1bc>
   13160:	cmp	r0, #100	; 0x64
   13164:	bne	13184 <verify_empty_monster@@Base+0xfc>
   13168:	mov	r0, r8
   1316c:	bl	132b4 <verify_empty_monster@@Base+0x22c>
   13170:	cmp	r0, #0
   13174:	beq	13190 <verify_empty_monster@@Base+0x108>
   13178:	movw	r0, #21184	; 0x52c0
   1317c:	movt	r0, #2
   13180:	b	1311c <verify_empty_monster@@Base+0x94>
   13184:	movw	r0, #21216	; 0x52e0
   13188:	movt	r0, #2
   1318c:	b	1311c <verify_empty_monster@@Base+0x94>
   13190:	mov	r0, r8
   13194:	bl	1331c <verify_empty_monster@@Base+0x294>
   13198:	cmp	r0, #0
   1319c:	beq	131ac <verify_empty_monster@@Base+0x124>
   131a0:	movw	r0, #21152	; 0x52a0
   131a4:	movt	r0, #2
   131a8:	b	1311c <verify_empty_monster@@Base+0x94>
   131ac:	mov	r0, r8
   131b0:	bl	13384 <verify_empty_monster@@Base+0x2fc>
   131b4:	cmp	r0, #0
   131b8:	moveq	r0, #0
   131bc:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   131c0:	movw	r0, #21120	; 0x5280
   131c4:	movt	r0, #2
   131c8:	b	1311c <verify_empty_monster@@Base+0x94>
   131cc:	push	{r4, r5, fp, lr}
   131d0:	add	fp, sp, #8
   131d4:	mov	r5, #0
   131d8:	cmp	r0, #0
   131dc:	beq	131fc <verify_empty_monster@@Base+0x174>
   131e0:	mov	r4, r0
   131e4:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   131e8:	cmp	r0, #0
   131ec:	beq	131fc <verify_empty_monster@@Base+0x174>
   131f0:	mov	r0, r4
   131f4:	bl	1b5cc <main@@Base+0x290>
   131f8:	add	r5, r4, r0
   131fc:	mov	r0, r5
   13200:	pop	{r4, r5, fp, pc}
   13204:	push	{r4, r5, fp, lr}
   13208:	add	fp, sp, #8
   1320c:	mov	r5, #0
   13210:	cmp	r0, #0
   13214:	beq	1323c <verify_empty_monster@@Base+0x1b4>
   13218:	mov	r4, r0
   1321c:	movw	r1, #9012	; 0x2334
   13220:	movt	r1, #2
   13224:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   13228:	cmp	r0, #0
   1322c:	beq	1323c <verify_empty_monster@@Base+0x1b4>
   13230:	mov	r0, r4
   13234:	bl	1b5cc <main@@Base+0x290>
   13238:	add	r5, r4, r0
   1323c:	mov	r0, r5
   13240:	pop	{r4, r5, fp, pc}
   13244:	push	{r4, r5, fp, lr}
   13248:	add	fp, sp, #8
   1324c:	cmp	r0, #0
   13250:	beq	13294 <verify_empty_monster@@Base+0x20c>
   13254:	mov	r4, r0
   13258:	bl	1b5d8 <main@@Base+0x29c>
   1325c:	sub	r5, r4, r0
   13260:	mov	r0, r5
   13264:	bl	1b5e0 <main@@Base+0x2a4>
   13268:	cmp	r0, #10
   1326c:	bcc	1328c <verify_empty_monster@@Base+0x204>
   13270:	add	r0, r5, #8
   13274:	bl	1b5e0 <main@@Base+0x2a4>
   13278:	cmp	r0, #0
   1327c:	beq	1328c <verify_empty_monster@@Base+0x204>
   13280:	add	r0, r4, r0
   13284:	pop	{r4, r5, fp, lr}
   13288:	b	1b5e8 <main@@Base+0x2ac>
   1328c:	mov	r0, #100	; 0x64
   13290:	pop	{r4, r5, fp, pc}
   13294:	movw	r0, #12494	; 0x30ce
   13298:	movt	r0, #2
   1329c:	movw	r1, #12532	; 0x30f4
   132a0:	movt	r1, #2
   132a4:	movw	r3, #12630	; 0x3156
   132a8:	movt	r3, #2
   132ac:	movw	r2, #697	; 0x2b9
   132b0:	bl	12f88 <__assert_fail@plt>
   132b4:	push	{r4, sl, fp, lr}
   132b8:	add	fp, sp, #8
   132bc:	cmp	r0, #0
   132c0:	beq	132fc <verify_empty_monster@@Base+0x274>
   132c4:	mov	r4, r0
   132c8:	bl	1b5d8 <main@@Base+0x29c>
   132cc:	sub	r4, r4, r0
   132d0:	mov	r0, r4
   132d4:	bl	1b5e0 <main@@Base+0x2a4>
   132d8:	mov	r1, r0
   132dc:	mov	r0, #0
   132e0:	cmp	r1, #10
   132e4:	popcc	{r4, sl, fp, pc}
   132e8:	add	r0, r4, #8
   132ec:	bl	1b5e0 <main@@Base+0x2a4>
   132f0:	cmp	r0, #0
   132f4:	movwne	r0, #1
   132f8:	pop	{r4, sl, fp, pc}
   132fc:	movw	r0, #12494	; 0x30ce
   13300:	movt	r0, #2
   13304:	movw	r1, #12532	; 0x30f4
   13308:	movt	r1, #2
   1330c:	movw	r3, #12696	; 0x3198
   13310:	movt	r3, #2
   13314:	movw	r2, #697	; 0x2b9
   13318:	bl	12f88 <__assert_fail@plt>
   1331c:	push	{r4, sl, fp, lr}
   13320:	add	fp, sp, #8
   13324:	cmp	r0, #0
   13328:	beq	13364 <verify_empty_monster@@Base+0x2dc>
   1332c:	mov	r4, r0
   13330:	bl	1b5d8 <main@@Base+0x29c>
   13334:	sub	r4, r4, r0
   13338:	mov	r0, r4
   1333c:	bl	1b5e0 <main@@Base+0x2a4>
   13340:	mov	r1, r0
   13344:	mov	r0, #0
   13348:	cmp	r1, #6
   1334c:	popcc	{r4, sl, fp, pc}
   13350:	add	r0, r4, #4
   13354:	bl	1b5e0 <main@@Base+0x2a4>
   13358:	cmp	r0, #0
   1335c:	movwne	r0, #1
   13360:	pop	{r4, sl, fp, pc}
   13364:	movw	r0, #12494	; 0x30ce
   13368:	movt	r0, #2
   1336c:	movw	r1, #12532	; 0x30f4
   13370:	movt	r1, #2
   13374:	movw	r3, #12769	; 0x31e1
   13378:	movt	r3, #2
   1337c:	mov	r2, #696	; 0x2b8
   13380:	bl	12f88 <__assert_fail@plt>
   13384:	push	{r4, r5, fp, lr}
   13388:	add	fp, sp, #8
   1338c:	cmp	r0, #0
   13390:	beq	133cc <verify_empty_monster@@Base+0x344>
   13394:	mov	r4, r0
   13398:	bl	1b5d8 <main@@Base+0x29c>
   1339c:	sub	r5, r4, r0
   133a0:	mov	r0, r5
   133a4:	bl	1b5e0 <main@@Base+0x2a4>
   133a8:	cmp	r0, #6
   133ac:	bcc	133c4 <verify_empty_monster@@Base+0x33c>
   133b0:	add	r0, r5, #4
   133b4:	bl	1b5e0 <main@@Base+0x2a4>
   133b8:	cmp	r0, #0
   133bc:	addne	r0, r4, r0
   133c0:	popne	{r4, r5, fp, pc}
   133c4:	mov	r0, #0
   133c8:	pop	{r4, r5, fp, pc}
   133cc:	movw	r0, #12494	; 0x30ce
   133d0:	movt	r0, #2
   133d4:	movw	r1, #12532	; 0x30f4
   133d8:	movt	r1, #2
   133dc:	movw	r3, #12843	; 0x322b
   133e0:	movt	r3, #2
   133e4:	mov	r2, #696	; 0x2b8
   133e8:	bl	12f88 <__assert_fail@plt>

000133ec <test_enums@@Base>:
   133ec:	mov	r0, #0
   133f0:	bx	lr
   133f4:	nop	{0}

000133f8 <test_type_aliases@@Base>:
   133f8:	push	{r4, r5, fp, lr}
   133fc:	add	fp, sp, #8
   13400:	sub	sp, sp, #8
   13404:	mov	r4, r0
   13408:	bl	1db08 <flatcc_builder_reset@@Base>
   1340c:	mov	r0, r4
   13410:	mov	r1, #0
   13414:	mov	r2, #0
   13418:	bl	13594 <test_type_aliases@@Base+0x19c>
   1341c:	mov	r5, r0
   13420:	mov	r0, r4
   13424:	bl	135bc <test_type_aliases@@Base+0x1c4>
   13428:	mov	r2, r0
   1342c:	mov	r0, r4
   13430:	mov	r1, r5
   13434:	bl	135f0 <test_type_aliases@@Base+0x1f8>
   13438:	add	r1, sp, #4
   1343c:	mov	r0, r4
   13440:	bl	20950 <flatcc_builder_finalize_aligned_buffer@@Base>
   13444:	mov	r4, r0
   13448:	ldr	r1, [sp, #4]
   1344c:	bl	13638 <test_type_aliases@@Base+0x240>
   13450:	cmp	r0, #0
   13454:	beq	13498 <test_type_aliases@@Base+0xa0>
   13458:	mov	r5, r0
   1345c:	movw	r0, #36976	; 0x9070
   13460:	movt	r0, #3
   13464:	ldr	r3, [r0]
   13468:	ldr	r2, [sp, #4]
   1346c:	movw	r0, #9122	; 0x23a2
   13470:	movt	r0, #2
   13474:	mov	r1, r4
   13478:	bl	1364c <test_type_aliases@@Base+0x254>
   1347c:	mov	r0, r5
   13480:	bl	21208 <flatcc_verify_error_string@@Base>
   13484:	mov	r1, r0
   13488:	movw	r0, #9141	; 0x23b5
   1348c:	movt	r0, #2
   13490:	bl	12e98 <printf@plt>
   13494:	b	1356c <test_type_aliases@@Base+0x174>
   13498:	mov	r0, r4
   1349c:	bl	1377c <test_type_aliases@@Base+0x384>
   134a0:	mov	r5, r0
   134a4:	bl	137bc <test_type_aliases@@Base+0x3c4>
   134a8:	cmn	r0, #128	; 0x80
   134ac:	bne	1355c <test_type_aliases@@Base+0x164>
   134b0:	mov	r0, r5
   134b4:	bl	1382c <test_type_aliases@@Base+0x434>
   134b8:	cmn	r0, #32768	; 0x8000
   134bc:	bne	1355c <test_type_aliases@@Base+0x164>
   134c0:	mov	r0, r5
   134c4:	bl	1389c <test_type_aliases@@Base+0x4a4>
   134c8:	cmp	r0, #-2147483648	; 0x80000000
   134cc:	bne	1355c <test_type_aliases@@Base+0x164>
   134d0:	mov	r0, r5
   134d4:	bl	1390c <test_type_aliases@@Base+0x514>
   134d8:	eor	r1, r1, #-2147483648	; 0x80000000
   134dc:	orrs	r0, r0, r1
   134e0:	bne	1355c <test_type_aliases@@Base+0x164>
   134e4:	mov	r0, r5
   134e8:	bl	13980 <test_type_aliases@@Base+0x588>
   134ec:	cmp	r0, #255	; 0xff
   134f0:	bne	1355c <test_type_aliases@@Base+0x164>
   134f4:	mov	r0, r5
   134f8:	bl	139f0 <test_type_aliases@@Base+0x5f8>
   134fc:	movw	r1, #65535	; 0xffff
   13500:	cmp	r0, r1
   13504:	bne	1355c <test_type_aliases@@Base+0x164>
   13508:	mov	r0, r5
   1350c:	bl	13a60 <test_type_aliases@@Base+0x668>
   13510:	cmn	r0, #1
   13514:	bne	1355c <test_type_aliases@@Base+0x164>
   13518:	mov	r0, r5
   1351c:	bl	13ad0 <test_type_aliases@@Base+0x6d8>
   13520:	and	r0, r0, r1
   13524:	cmn	r0, #1
   13528:	bne	1355c <test_type_aliases@@Base+0x164>
   1352c:	mov	r0, r5
   13530:	bl	13b44 <test_type_aliases@@Base+0x74c>
   13534:	vldr	s2, [pc, #84]	; 13590 <test_type_aliases@@Base+0x198>
   13538:	vcmp.f32	s0, s2
   1353c:	vmrs	APSR_nzcv, fpscr
   13540:	bne	1355c <test_type_aliases@@Base+0x164>
   13544:	mov	r0, r5
   13548:	bl	13bb8 <test_type_aliases@@Base+0x7c0>
   1354c:	vldr	d16, [pc, #52]	; 13588 <test_type_aliases@@Base+0x190>
   13550:	vcmp.f64	d0, d16
   13554:	vmrs	APSR_nzcv, fpscr
   13558:	beq	13580 <test_type_aliases@@Base+0x188>
   1355c:	movw	r0, #21376	; 0x5380
   13560:	movt	r0, #2
   13564:	bl	12eec <puts@plt>
   13568:	mvn	r5, #0
   1356c:	mov	r0, r4
   13570:	bl	20a30 <flatcc_builder_aligned_free@@Base>
   13574:	mov	r0, r5
   13578:	sub	sp, fp, #8
   1357c:	pop	{r4, r5, fp, pc}
   13580:	mov	r5, #0
   13584:	b	1356c <test_type_aliases@@Base+0x174>
   13588:	strbtvs	r6, [r6], -r6, ror #12
   1358c:	andmi	r6, r2, r6, ror #12
   13590:	andsmi	r3, r3, r3, lsr r3
   13594:	push	{fp, lr}
   13598:	mov	fp, sp
   1359c:	sub	sp, sp, #8
   135a0:	mvn	ip, #0
   135a4:	mov	r3, #1
   135a8:	stm	sp, {r3, ip}
   135ac:	mov	r3, #1
   135b0:	bl	1f800 <flatcc_builder_create_vector@@Base>
   135b4:	mov	sp, fp
   135b8:	pop	{fp, pc}
   135bc:	push	{fp, lr}
   135c0:	mov	fp, sp
   135c4:	sub	sp, sp, #8
   135c8:	mvn	r1, #-536870912	; 0xe0000000
   135cc:	mov	r2, #8
   135d0:	str	r2, [sp]
   135d4:	str	r1, [sp, #4]
   135d8:	mov	r1, #0
   135dc:	mov	r2, #0
   135e0:	mov	r3, #8
   135e4:	bl	1f800 <flatcc_builder_create_vector@@Base>
   135e8:	mov	sp, fp
   135ec:	pop	{fp, pc}
   135f0:	push	{r4, r5, r6, sl, fp, lr}
   135f4:	add	fp, sp, #16
   135f8:	mov	r5, r2
   135fc:	mov	r6, r1
   13600:	mov	r4, r0
   13604:	movw	r1, #9012	; 0x2334
   13608:	movt	r1, #2
   1360c:	bl	13d30 <test_empty_monster@@Base+0x108>
   13610:	cmp	r0, #0
   13614:	popne	{r4, r5, r6, sl, fp, pc}
   13618:	mov	r0, r4
   1361c:	mov	r1, r6
   13620:	mov	r2, r5
   13624:	bl	1b5fc <main@@Base+0x2c0>
   13628:	mov	r1, r0
   1362c:	mov	r0, r4
   13630:	pop	{r4, r5, r6, sl, fp, lr}
   13634:	b	13db4 <test_empty_monster@@Base+0x18c>
   13638:	movw	r2, #9012	; 0x2334
   1363c:	movt	r2, #2
   13640:	movw	r3, #47836	; 0xbadc
   13644:	movt	r3, #1
   13648:	b	21b54 <flatcc_verify_table_as_root@@Base>
   1364c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13650:	add	fp, sp, #28
   13654:	sub	sp, sp, #20
   13658:	mov	r4, r3
   1365c:	mov	r5, r2
   13660:	mov	r6, r1
   13664:	cmp	r0, #0
   13668:	beq	13680 <test_type_aliases@@Base+0x288>
   1366c:	mov	r2, r0
   13670:	movw	r1, #13293	; 0x33ed
   13674:	movt	r1, #2
   13678:	mov	r0, r4
   1367c:	bl	12f28 <fprintf@plt>
   13680:	cmp	r5, #0
   13684:	beq	13760 <test_type_aliases@@Base+0x368>
   13688:	add	r7, sp, #3
   1368c:	movw	sl, #13312	; 0x3400
   13690:	movt	sl, #2
   13694:	mov	r8, #0
   13698:	ands	r9, r8, #15
   1369c:	beq	136b8 <test_type_aliases@@Base+0x2c0>
   136a0:	tst	r8, #7
   136a4:	bne	136e8 <test_type_aliases@@Base+0x2f0>
   136a8:	mov	r0, #32
   136ac:	mov	r1, r4
   136b0:	bl	12f64 <fputc@plt>
   136b4:	b	136e8 <test_type_aliases@@Base+0x2f0>
   136b8:	cmp	r8, #0
   136bc:	beq	136d4 <test_type_aliases@@Base+0x2dc>
   136c0:	mov	r0, r4
   136c4:	movw	r1, #13298	; 0x33f2
   136c8:	movt	r1, #2
   136cc:	mov	r2, r7
   136d0:	bl	12f28 <fprintf@plt>
   136d4:	mov	r0, r4
   136d8:	movw	r1, #13304	; 0x33f8
   136dc:	movt	r1, #2
   136e0:	mov	r2, r8
   136e4:	bl	12f28 <fprintf@plt>
   136e8:	ldrb	r2, [r6, r8]
   136ec:	mov	r0, r4
   136f0:	mov	r1, sl
   136f4:	bl	12f28 <fprintf@plt>
   136f8:	ldrb	r0, [r6, r8]
   136fc:	sub	r1, r0, #32
   13700:	uxtb	r1, r1
   13704:	cmp	r1, #94	; 0x5e
   13708:	movwhi	r0, #46	; 0x2e
   1370c:	strb	r0, [r7, r9]
   13710:	add	r0, r7, r9
   13714:	mov	r1, #0
   13718:	strb	r1, [r0, #1]
   1371c:	add	r8, r8, #1
   13720:	cmp	r5, r8
   13724:	bne	13698 <test_type_aliases@@Base+0x2a0>
   13728:	tst	r5, #15
   1372c:	beq	13760 <test_type_aliases@@Base+0x368>
   13730:	add	r6, r5, #1
   13734:	movw	r5, #13318	; 0x3406
   13738:	movt	r5, #2
   1373c:	mov	r0, r5
   13740:	mov	r1, #3
   13744:	mov	r2, #1
   13748:	mov	r3, r4
   1374c:	bl	12ed4 <fwrite@plt>
   13750:	add	r0, r6, #1
   13754:	tst	r6, #15
   13758:	mov	r6, r0
   1375c:	bne	1373c <test_type_aliases@@Base+0x344>
   13760:	movw	r1, #13298	; 0x33f2
   13764:	movt	r1, #2
   13768:	add	r2, sp, #3
   1376c:	mov	r0, r4
   13770:	bl	12f28 <fprintf@plt>
   13774:	sub	sp, fp, #28
   13778:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1377c:	push	{r4, r5, fp, lr}
   13780:	add	fp, sp, #8
   13784:	mov	r5, #0
   13788:	cmp	r0, #0
   1378c:	beq	137b4 <test_type_aliases@@Base+0x3bc>
   13790:	mov	r4, r0
   13794:	movw	r1, #9012	; 0x2334
   13798:	movt	r1, #2
   1379c:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   137a0:	cmp	r0, #0
   137a4:	beq	137b4 <test_type_aliases@@Base+0x3bc>
   137a8:	mov	r0, r4
   137ac:	bl	1b5cc <main@@Base+0x290>
   137b0:	add	r5, r4, r0
   137b4:	mov	r0, r5
   137b8:	pop	{r4, r5, fp, pc}
   137bc:	push	{r4, r5, fp, lr}
   137c0:	add	fp, sp, #8
   137c4:	cmp	r0, #0
   137c8:	beq	1380c <test_type_aliases@@Base+0x414>
   137cc:	mov	r4, r0
   137d0:	bl	1b5d8 <main@@Base+0x29c>
   137d4:	sub	r5, r4, r0
   137d8:	mov	r0, r5
   137dc:	bl	1b5e0 <main@@Base+0x2a4>
   137e0:	cmp	r0, #6
   137e4:	bcc	13804 <test_type_aliases@@Base+0x40c>
   137e8:	add	r0, r5, #4
   137ec:	bl	1b5e0 <main@@Base+0x2a4>
   137f0:	cmp	r0, #0
   137f4:	beq	13804 <test_type_aliases@@Base+0x40c>
   137f8:	add	r0, r4, r0
   137fc:	pop	{r4, r5, fp, lr}
   13800:	b	1bc58 <main@@Base+0x91c>
   13804:	mov	r0, #0
   13808:	pop	{r4, r5, fp, pc}
   1380c:	movw	r0, #12494	; 0x30ce
   13810:	movt	r0, #2
   13814:	movw	r1, #12532	; 0x30f4
   13818:	movt	r1, #2
   1381c:	movw	r3, #13322	; 0x340a
   13820:	movt	r3, #2
   13824:	movw	r2, #749	; 0x2ed
   13828:	bl	12f88 <__assert_fail@plt>
   1382c:	push	{r4, r5, fp, lr}
   13830:	add	fp, sp, #8
   13834:	cmp	r0, #0
   13838:	beq	1387c <test_type_aliases@@Base+0x484>
   1383c:	mov	r4, r0
   13840:	bl	1b5d8 <main@@Base+0x29c>
   13844:	sub	r5, r4, r0
   13848:	mov	r0, r5
   1384c:	bl	1b5e0 <main@@Base+0x2a4>
   13850:	cmp	r0, #10
   13854:	bcc	13874 <test_type_aliases@@Base+0x47c>
   13858:	add	r0, r5, #8
   1385c:	bl	1b5e0 <main@@Base+0x2a4>
   13860:	cmp	r0, #0
   13864:	beq	13874 <test_type_aliases@@Base+0x47c>
   13868:	add	r0, r4, r0
   1386c:	pop	{r4, r5, fp, lr}
   13870:	b	1b5e8 <main@@Base+0x2ac>
   13874:	mov	r0, #0
   13878:	pop	{r4, r5, fp, pc}
   1387c:	movw	r0, #12494	; 0x30ce
   13880:	movt	r0, #2
   13884:	movw	r1, #12532	; 0x30f4
   13888:	movt	r1, #2
   1388c:	movw	r3, #13395	; 0x3453
   13890:	movt	r3, #2
   13894:	movw	r2, #751	; 0x2ef
   13898:	bl	12f88 <__assert_fail@plt>
   1389c:	push	{r4, r5, fp, lr}
   138a0:	add	fp, sp, #8
   138a4:	cmp	r0, #0
   138a8:	beq	138ec <test_type_aliases@@Base+0x4f4>
   138ac:	mov	r4, r0
   138b0:	bl	1b5d8 <main@@Base+0x29c>
   138b4:	sub	r5, r4, r0
   138b8:	mov	r0, r5
   138bc:	bl	1b5e0 <main@@Base+0x2a4>
   138c0:	cmp	r0, #14
   138c4:	bcc	138e4 <test_type_aliases@@Base+0x4ec>
   138c8:	add	r0, r5, #12
   138cc:	bl	1b5e0 <main@@Base+0x2a4>
   138d0:	cmp	r0, #0
   138d4:	beq	138e4 <test_type_aliases@@Base+0x4ec>
   138d8:	add	r0, r4, r0
   138dc:	pop	{r4, r5, fp, lr}
   138e0:	b	1bc64 <main@@Base+0x928>
   138e4:	mov	r0, #0
   138e8:	pop	{r4, r5, fp, pc}
   138ec:	movw	r0, #12494	; 0x30ce
   138f0:	movt	r0, #2
   138f4:	movw	r1, #12532	; 0x30f4
   138f8:	movt	r1, #2
   138fc:	movw	r3, #13470	; 0x349e
   13900:	movt	r3, #2
   13904:	movw	r2, #753	; 0x2f1
   13908:	bl	12f88 <__assert_fail@plt>
   1390c:	push	{r4, r5, fp, lr}
   13910:	add	fp, sp, #8
   13914:	cmp	r0, #0
   13918:	beq	13960 <test_type_aliases@@Base+0x568>
   1391c:	mov	r4, r0
   13920:	bl	1b5d8 <main@@Base+0x29c>
   13924:	sub	r5, r4, r0
   13928:	mov	r0, r5
   1392c:	bl	1b5e0 <main@@Base+0x2a4>
   13930:	cmp	r0, #18
   13934:	bcc	13954 <test_type_aliases@@Base+0x55c>
   13938:	add	r0, r5, #16
   1393c:	bl	1b5e0 <main@@Base+0x2a4>
   13940:	cmp	r0, #0
   13944:	beq	13954 <test_type_aliases@@Base+0x55c>
   13948:	add	r0, r4, r0
   1394c:	pop	{r4, r5, fp, lr}
   13950:	b	1bc70 <main@@Base+0x934>
   13954:	mov	r0, #0
   13958:	mov	r1, #0
   1395c:	pop	{r4, r5, fp, pc}
   13960:	movw	r0, #12494	; 0x30ce
   13964:	movt	r0, #2
   13968:	movw	r1, #12532	; 0x30f4
   1396c:	movt	r1, #2
   13970:	movw	r3, #13545	; 0x34e9
   13974:	movt	r3, #2
   13978:	movw	r2, #755	; 0x2f3
   1397c:	bl	12f88 <__assert_fail@plt>
   13980:	push	{r4, r5, fp, lr}
   13984:	add	fp, sp, #8
   13988:	cmp	r0, #0
   1398c:	beq	139d0 <test_type_aliases@@Base+0x5d8>
   13990:	mov	r4, r0
   13994:	bl	1b5d8 <main@@Base+0x29c>
   13998:	sub	r5, r4, r0
   1399c:	mov	r0, r5
   139a0:	bl	1b5e0 <main@@Base+0x2a4>
   139a4:	cmp	r0, #8
   139a8:	bcc	139c8 <test_type_aliases@@Base+0x5d0>
   139ac:	add	r0, r5, #6
   139b0:	bl	1b5e0 <main@@Base+0x2a4>
   139b4:	cmp	r0, #0
   139b8:	beq	139c8 <test_type_aliases@@Base+0x5d0>
   139bc:	add	r0, r4, r0
   139c0:	pop	{r4, r5, fp, lr}
   139c4:	b	1bc7c <main@@Base+0x940>
   139c8:	mov	r0, #0
   139cc:	pop	{r4, r5, fp, pc}
   139d0:	movw	r0, #12494	; 0x30ce
   139d4:	movt	r0, #2
   139d8:	movw	r1, #12532	; 0x30f4
   139dc:	movt	r1, #2
   139e0:	movw	r3, #13620	; 0x3534
   139e4:	movt	r3, #2
   139e8:	movw	r2, #750	; 0x2ee
   139ec:	bl	12f88 <__assert_fail@plt>
   139f0:	push	{r4, r5, fp, lr}
   139f4:	add	fp, sp, #8
   139f8:	cmp	r0, #0
   139fc:	beq	13a40 <test_type_aliases@@Base+0x648>
   13a00:	mov	r4, r0
   13a04:	bl	1b5d8 <main@@Base+0x29c>
   13a08:	sub	r5, r4, r0
   13a0c:	mov	r0, r5
   13a10:	bl	1b5e0 <main@@Base+0x2a4>
   13a14:	cmp	r0, #12
   13a18:	bcc	13a38 <test_type_aliases@@Base+0x640>
   13a1c:	add	r0, r5, #10
   13a20:	bl	1b5e0 <main@@Base+0x2a4>
   13a24:	cmp	r0, #0
   13a28:	beq	13a38 <test_type_aliases@@Base+0x640>
   13a2c:	add	r0, r4, r0
   13a30:	pop	{r4, r5, fp, lr}
   13a34:	b	1bc88 <main@@Base+0x94c>
   13a38:	mov	r0, #0
   13a3c:	pop	{r4, r5, fp, pc}
   13a40:	movw	r0, #12494	; 0x30ce
   13a44:	movt	r0, #2
   13a48:	movw	r1, #12532	; 0x30f4
   13a4c:	movt	r1, #2
   13a50:	movw	r3, #13694	; 0x357e
   13a54:	movt	r3, #2
   13a58:	mov	r2, #752	; 0x2f0
   13a5c:	bl	12f88 <__assert_fail@plt>
   13a60:	push	{r4, r5, fp, lr}
   13a64:	add	fp, sp, #8
   13a68:	cmp	r0, #0
   13a6c:	beq	13ab0 <test_type_aliases@@Base+0x6b8>
   13a70:	mov	r4, r0
   13a74:	bl	1b5d8 <main@@Base+0x29c>
   13a78:	sub	r5, r4, r0
   13a7c:	mov	r0, r5
   13a80:	bl	1b5e0 <main@@Base+0x2a4>
   13a84:	cmp	r0, #16
   13a88:	bcc	13aa8 <test_type_aliases@@Base+0x6b0>
   13a8c:	add	r0, r5, #14
   13a90:	bl	1b5e0 <main@@Base+0x2a4>
   13a94:	cmp	r0, #0
   13a98:	beq	13aa8 <test_type_aliases@@Base+0x6b0>
   13a9c:	add	r0, r4, r0
   13aa0:	pop	{r4, r5, fp, lr}
   13aa4:	b	1bc94 <main@@Base+0x958>
   13aa8:	mov	r0, #0
   13aac:	pop	{r4, r5, fp, pc}
   13ab0:	movw	r0, #12494	; 0x30ce
   13ab4:	movt	r0, #2
   13ab8:	movw	r1, #12532	; 0x30f4
   13abc:	movt	r1, #2
   13ac0:	movw	r3, #13770	; 0x35ca
   13ac4:	movt	r3, #2
   13ac8:	movw	r2, #754	; 0x2f2
   13acc:	bl	12f88 <__assert_fail@plt>
   13ad0:	push	{r4, r5, fp, lr}
   13ad4:	add	fp, sp, #8
   13ad8:	cmp	r0, #0
   13adc:	beq	13b24 <test_type_aliases@@Base+0x72c>
   13ae0:	mov	r4, r0
   13ae4:	bl	1b5d8 <main@@Base+0x29c>
   13ae8:	sub	r5, r4, r0
   13aec:	mov	r0, r5
   13af0:	bl	1b5e0 <main@@Base+0x2a4>
   13af4:	cmp	r0, #20
   13af8:	bcc	13b18 <test_type_aliases@@Base+0x720>
   13afc:	add	r0, r5, #18
   13b00:	bl	1b5e0 <main@@Base+0x2a4>
   13b04:	cmp	r0, #0
   13b08:	beq	13b18 <test_type_aliases@@Base+0x720>
   13b0c:	add	r0, r4, r0
   13b10:	pop	{r4, r5, fp, lr}
   13b14:	b	1bca0 <main@@Base+0x964>
   13b18:	mov	r0, #0
   13b1c:	mov	r1, #0
   13b20:	pop	{r4, r5, fp, pc}
   13b24:	movw	r0, #12494	; 0x30ce
   13b28:	movt	r0, #2
   13b2c:	movw	r1, #12532	; 0x30f4
   13b30:	movt	r1, #2
   13b34:	movw	r3, #13846	; 0x3616
   13b38:	movt	r3, #2
   13b3c:	mov	r2, #756	; 0x2f4
   13b40:	bl	12f88 <__assert_fail@plt>
   13b44:	push	{r4, r5, fp, lr}
   13b48:	add	fp, sp, #8
   13b4c:	cmp	r0, #0
   13b50:	beq	13b94 <test_type_aliases@@Base+0x79c>
   13b54:	mov	r4, r0
   13b58:	bl	1b5d8 <main@@Base+0x29c>
   13b5c:	sub	r5, r4, r0
   13b60:	mov	r0, r5
   13b64:	bl	1b5e0 <main@@Base+0x2a4>
   13b68:	cmp	r0, #22
   13b6c:	bcc	13b8c <test_type_aliases@@Base+0x794>
   13b70:	add	r0, r5, #20
   13b74:	bl	1b5e0 <main@@Base+0x2a4>
   13b78:	cmp	r0, #0
   13b7c:	beq	13b8c <test_type_aliases@@Base+0x794>
   13b80:	add	r0, r4, r0
   13b84:	pop	{r4, r5, fp, lr}
   13b88:	b	1bcac <main@@Base+0x970>
   13b8c:	vldr	s0, [pc, #32]	; 13bb4 <test_type_aliases@@Base+0x7bc>
   13b90:	pop	{r4, r5, fp, pc}
   13b94:	movw	r0, #12494	; 0x30ce
   13b98:	movt	r0, #2
   13b9c:	movw	r1, #12532	; 0x30f4
   13ba0:	movt	r1, #2
   13ba4:	movw	r3, #13922	; 0x3662
   13ba8:	movt	r3, #2
   13bac:	movw	r2, #757	; 0x2f5
   13bb0:	bl	12f88 <__assert_fail@plt>
   13bb4:	andeq	r0, r0, r0
   13bb8:	push	{r4, r5, fp, lr}
   13bbc:	add	fp, sp, #8
   13bc0:	cmp	r0, #0
   13bc4:	beq	13c08 <test_type_aliases@@Base+0x810>
   13bc8:	mov	r4, r0
   13bcc:	bl	1b5d8 <main@@Base+0x29c>
   13bd0:	sub	r5, r4, r0
   13bd4:	mov	r0, r5
   13bd8:	bl	1b5e0 <main@@Base+0x2a4>
   13bdc:	cmp	r0, #24
   13be0:	bcc	13c00 <test_type_aliases@@Base+0x808>
   13be4:	add	r0, r5, #22
   13be8:	bl	1b5e0 <main@@Base+0x2a4>
   13bec:	cmp	r0, #0
   13bf0:	beq	13c00 <test_type_aliases@@Base+0x808>
   13bf4:	add	r0, r4, r0
   13bf8:	pop	{r4, r5, fp, lr}
   13bfc:	b	1bcb8 <main@@Base+0x97c>
   13c00:	vmov.i32	d0, #0	; 0x00000000
   13c04:	pop	{r4, r5, fp, pc}
   13c08:	movw	r0, #12494	; 0x30ce
   13c0c:	movt	r0, #2
   13c10:	movw	r1, #12532	; 0x30f4
   13c14:	movt	r1, #2
   13c18:	movw	r3, #13995	; 0x36ab
   13c1c:	movt	r3, #2
   13c20:	movw	r2, #758	; 0x2f6
   13c24:	bl	12f88 <__assert_fail@plt>

00013c28 <test_empty_monster@@Base>:
   13c28:	push	{r4, r5, fp, lr}
   13c2c:	add	fp, sp, #8
   13c30:	sub	sp, sp, #8
   13c34:	mov	r4, r0
   13c38:	bl	1db08 <flatcc_builder_reset@@Base>
   13c3c:	movw	r1, #9012	; 0x2334
   13c40:	movt	r1, #2
   13c44:	mov	r0, r4
   13c48:	bl	13d30 <test_empty_monster@@Base+0x108>
   13c4c:	mov	r0, r4
   13c50:	bl	13d3c <test_empty_monster@@Base+0x114>
   13c54:	movw	r1, #9185	; 0x23e1
   13c58:	movt	r1, #2
   13c5c:	mov	r0, r4
   13c60:	bl	13d44 <test_empty_monster@@Base+0x11c>
   13c64:	mov	r0, r4
   13c68:	bl	13d64 <test_empty_monster@@Base+0x13c>
   13c6c:	mov	r1, r0
   13c70:	mov	r0, r4
   13c74:	bl	13db4 <test_empty_monster@@Base+0x18c>
   13c78:	add	r1, sp, #4
   13c7c:	mov	r0, r4
   13c80:	bl	20950 <flatcc_builder_finalize_aligned_buffer@@Base>
   13c84:	mov	r4, r0
   13c88:	movw	r0, #36976	; 0x9070
   13c8c:	movt	r0, #3
   13c90:	ldr	r3, [r0]
   13c94:	ldr	r2, [sp, #4]
   13c98:	movw	r0, #9195	; 0x23eb
   13c9c:	movt	r0, #2
   13ca0:	mov	r1, r4
   13ca4:	bl	1364c <test_type_aliases@@Base+0x254>
   13ca8:	mov	r0, r4
   13cac:	bl	13088 <verify_empty_monster@@Base>
   13cb0:	mov	r5, r0
   13cb4:	cmp	r0, #0
   13cb8:	beq	13cc8 <test_empty_monster@@Base+0xa0>
   13cbc:	mov	r0, r4
   13cc0:	bl	20a30 <flatcc_builder_aligned_free@@Base>
   13cc4:	b	13cfc <test_empty_monster@@Base+0xd4>
   13cc8:	ldr	r1, [sp, #4]
   13ccc:	movw	r2, #9012	; 0x2334
   13cd0:	movt	r2, #2
   13cd4:	mov	r0, r4
   13cd8:	bl	13db8 <test_empty_monster@@Base+0x190>
   13cdc:	cmp	r0, #0
   13ce0:	beq	13d08 <test_empty_monster@@Base+0xe0>
   13ce4:	bl	21208 <flatcc_verify_error_string@@Base>
   13ce8:	mov	r1, r0
   13cec:	movw	r0, #9215	; 0x23ff
   13cf0:	movt	r0, #2
   13cf4:	bl	12e98 <printf@plt>
   13cf8:	mvn	r5, #0
   13cfc:	mov	r0, r5
   13d00:	sub	sp, fp, #8
   13d04:	pop	{r4, r5, fp, pc}
   13d08:	ldr	r0, [sp, #4]
   13d0c:	sub	r1, r0, #1
   13d10:	mov	r0, r4
   13d14:	bl	13dc4 <test_empty_monster@@Base+0x19c>
   13d18:	cmp	r0, #0
   13d1c:	bne	13cbc <test_empty_monster@@Base+0x94>
   13d20:	movw	r0, #21424	; 0x53b0
   13d24:	movt	r0, #2
   13d28:	bl	12eec <puts@plt>
   13d2c:	b	13cf8 <test_empty_monster@@Base+0xd0>
   13d30:	mov	r2, #0
   13d34:	mov	r3, #0
   13d38:	b	1e2ac <flatcc_builder_start_buffer@@Base>
   13d3c:	mov	r1, #36	; 0x24
   13d40:	b	1ef94 <flatcc_builder_start_table@@Base>
   13d44:	push	{r4, sl, fp, lr}
   13d48:	add	fp, sp, #8
   13d4c:	mov	r4, r0
   13d50:	bl	204a8 <flatcc_builder_create_string_str@@Base>
   13d54:	mov	r1, r0
   13d58:	mov	r0, r4
   13d5c:	pop	{r4, sl, fp, lr}
   13d60:	b	16148 <gen_monster@@Base+0x644>
   13d64:	push	{r4, sl, fp, lr}
   13d68:	add	fp, sp, #8
   13d6c:	mov	r4, r0
   13d70:	movw	r1, #21036	; 0x522c
   13d74:	movt	r1, #2
   13d78:	mov	r2, #1
   13d7c:	bl	1f624 <flatcc_builder_check_required@@Base>
   13d80:	cmp	r0, #0
   13d84:	beq	13d94 <test_empty_monster@@Base+0x16c>
   13d88:	mov	r0, r4
   13d8c:	pop	{r4, sl, fp, lr}
   13d90:	b	1f6b4 <flatcc_builder_end_table@@Base>
   13d94:	movw	r0, #14069	; 0x36f5
   13d98:	movt	r0, #2
   13d9c:	movw	r1, #13105	; 0x3331
   13da0:	movt	r1, #2
   13da4:	movw	r3, #14231	; 0x3797
   13da8:	movt	r3, #2
   13dac:	mov	r2, #235	; 0xeb
   13db0:	bl	12f88 <__assert_fail@plt>
   13db4:	b	1e460 <flatcc_builder_end_buffer@@Base>
   13db8:	movw	r3, #48324	; 0xbcc4
   13dbc:	movt	r3, #1
   13dc0:	b	21b54 <flatcc_verify_table_as_root@@Base>
   13dc4:	movw	r2, #9012	; 0x2334
   13dc8:	movt	r2, #2
   13dcc:	movw	r3, #48324	; 0xbcc4
   13dd0:	movt	r3, #1
   13dd4:	b	21b54 <flatcc_verify_table_as_root@@Base>

00013dd8 <test_typed_empty_monster@@Base>:
   13dd8:	push	{r4, r5, r6, sl, fp, lr}
   13ddc:	add	fp, sp, #16
   13de0:	sub	sp, sp, #8
   13de4:	mov	r4, r0
   13de8:	mov	r0, #0
   13dec:	str	r0, [sp]
   13df0:	mov	r0, r4
   13df4:	bl	1db08 <flatcc_builder_reset@@Base>
   13df8:	movw	r1, #9255	; 0x2427
   13dfc:	movt	r1, #2
   13e00:	mov	r0, r4
   13e04:	bl	13d30 <test_empty_monster@@Base+0x108>
   13e08:	mov	r0, r4
   13e0c:	bl	13d3c <test_empty_monster@@Base+0x114>
   13e10:	movw	r1, #9185	; 0x23e1
   13e14:	movt	r1, #2
   13e18:	mov	r0, r4
   13e1c:	bl	13d44 <test_empty_monster@@Base+0x11c>
   13e20:	mov	r0, r4
   13e24:	bl	13d64 <test_empty_monster@@Base+0x13c>
   13e28:	mov	r1, r0
   13e2c:	mov	r0, r4
   13e30:	bl	13db4 <test_empty_monster@@Base+0x18c>
   13e34:	add	r1, sp, #4
   13e38:	mov	r0, r4
   13e3c:	bl	20950 <flatcc_builder_finalize_aligned_buffer@@Base>
   13e40:	mov	r4, r0
   13e44:	movw	r0, #36976	; 0x9070
   13e48:	movt	r0, #3
   13e4c:	ldr	r3, [r0]
   13e50:	ldr	r2, [sp, #4]
   13e54:	movw	r0, #9260	; 0x242c
   13e58:	movt	r0, #2
   13e5c:	mov	r1, r4
   13e60:	bl	1364c <test_type_aliases@@Base+0x254>
   13e64:	mov	r0, r4
   13e68:	bl	13ff4 <test_typed_empty_monster@@Base+0x21c>
   13e6c:	mov	r5, r0
   13e70:	bl	13ffc <test_typed_empty_monster@@Base+0x224>
   13e74:	cmp	r5, r0
   13e78:	bne	13ef4 <test_typed_empty_monster@@Base+0x11c>
   13e7c:	movw	r6, #62593	; 0xf481
   13e80:	movt	r6, #13070	; 0x330e
   13e84:	mov	r0, r4
   13e88:	mov	r1, r6
   13e8c:	bl	14008 <test_typed_empty_monster@@Base+0x230>
   13e90:	cmp	r0, #0
   13e94:	beq	13f08 <test_typed_empty_monster@@Base+0x130>
   13e98:	mov	r0, r4
   13e9c:	bl	13088 <verify_empty_monster@@Base>
   13ea0:	cmp	r0, #0
   13ea4:	beq	13f14 <test_typed_empty_monster@@Base+0x13c>
   13ea8:	ldr	r1, [sp, #4]
   13eac:	movw	r2, #9255	; 0x2427
   13eb0:	movt	r2, #2
   13eb4:	mov	r0, r4
   13eb8:	bl	13db8 <test_empty_monster@@Base+0x190>
   13ebc:	cmp	r0, #0
   13ec0:	bne	13ed8 <test_typed_empty_monster@@Base+0x100>
   13ec4:	ldr	r1, [sp, #4]
   13ec8:	mov	r0, r4
   13ecc:	bl	14038 <test_typed_empty_monster@@Base+0x260>
   13ed0:	cmp	r0, #0
   13ed4:	beq	13f38 <test_typed_empty_monster@@Base+0x160>
   13ed8:	mov	r5, r0
   13edc:	bl	21208 <flatcc_verify_error_string@@Base>
   13ee0:	mov	r1, r0
   13ee4:	movw	r0, #9336	; 0x2478
   13ee8:	movt	r0, #2
   13eec:	bl	12e98 <printf@plt>
   13ef0:	b	13f24 <test_typed_empty_monster@@Base+0x14c>
   13ef4:	movw	r0, #9286	; 0x2446
   13ef8:	movt	r0, #2
   13efc:	mov	r1, r5
   13f00:	bl	12e98 <printf@plt>
   13f04:	b	13f20 <test_typed_empty_monster@@Base+0x148>
   13f08:	movw	r0, #21472	; 0x53e0
   13f0c:	movt	r0, #2
   13f10:	b	13f1c <test_typed_empty_monster@@Base+0x144>
   13f14:	movw	r0, #21520	; 0x5410
   13f18:	movt	r0, #2
   13f1c:	bl	12eec <puts@plt>
   13f20:	mvn	r5, #0
   13f24:	mov	r0, r4
   13f28:	bl	20a30 <flatcc_builder_aligned_free@@Base>
   13f2c:	mov	r0, r5
   13f30:	sub	sp, fp, #16
   13f34:	pop	{r4, r5, r6, sl, fp, pc}
   13f38:	ldr	r1, [sp, #4]
   13f3c:	mov	r0, r4
   13f40:	mov	r2, r6
   13f44:	bl	1404c <test_typed_empty_monster@@Base+0x274>
   13f48:	cmp	r0, #0
   13f4c:	beq	13f6c <test_typed_empty_monster@@Base+0x194>
   13f50:	mov	r5, r0
   13f54:	bl	21208 <flatcc_verify_error_string@@Base>
   13f58:	mov	r1, r0
   13f5c:	movw	r0, #9382	; 0x24a6
   13f60:	movt	r0, #2
   13f64:	bl	12e98 <printf@plt>
   13f68:	b	13f24 <test_typed_empty_monster@@Base+0x14c>
   13f6c:	ldr	r5, [sp, #4]
   13f70:	bl	13ffc <test_typed_empty_monster@@Base+0x224>
   13f74:	mov	r2, r0
   13f78:	mov	r0, r4
   13f7c:	mov	r1, r5
   13f80:	bl	1404c <test_typed_empty_monster@@Base+0x274>
   13f84:	cmp	r0, #0
   13f88:	beq	13fa8 <test_typed_empty_monster@@Base+0x1d0>
   13f8c:	mov	r5, r0
   13f90:	bl	21208 <flatcc_verify_error_string@@Base>
   13f94:	mov	r1, r0
   13f98:	movw	r0, #9437	; 0x24dd
   13f9c:	movt	r0, #2
   13fa0:	bl	12e98 <printf@plt>
   13fa4:	b	13f24 <test_typed_empty_monster@@Base+0x14c>
   13fa8:	mov	r5, sp
   13fac:	mov	r0, r5
   13fb0:	bl	14058 <test_typed_empty_monster@@Base+0x280>
   13fb4:	ldr	r1, [sp, #4]
   13fb8:	mov	r0, r4
   13fbc:	mov	r2, r5
   13fc0:	bl	13db8 <test_empty_monster@@Base+0x190>
   13fc4:	cmp	r0, #0
   13fc8:	bne	13ed8 <test_typed_empty_monster@@Base+0x100>
   13fcc:	ldr	r1, [sp, #4]
   13fd0:	mov	r0, r4
   13fd4:	bl	13dc4 <test_empty_monster@@Base+0x19c>
   13fd8:	mov	r5, #0
   13fdc:	cmp	r0, #0
   13fe0:	bne	13f24 <test_typed_empty_monster@@Base+0x14c>
   13fe4:	movw	r0, #21584	; 0x5450
   13fe8:	movt	r0, #2
   13fec:	bl	12eec <puts@plt>
   13ff0:	b	13f24 <test_typed_empty_monster@@Base+0x14c>
   13ff4:	add	r0, r0, #4
   13ff8:	b	1c628 <main@@Base+0x12ec>
   13ffc:	movw	r0, #62593	; 0xf481
   14000:	movt	r0, #13070	; 0x330e
   14004:	bx	lr
   14008:	cmp	r1, #0
   1400c:	moveq	r0, #1
   14010:	bxeq	lr
   14014:	push	{r4, sl, fp, lr}
   14018:	add	fp, sp, #8
   1401c:	mov	r4, r1
   14020:	add	r0, r0, #4
   14024:	bl	1c628 <main@@Base+0x12ec>
   14028:	sub	r0, r0, r4
   1402c:	clz	r0, r0
   14030:	lsr	r0, r0, #5
   14034:	pop	{r4, sl, fp, pc}
   14038:	movw	r2, #9255	; 0x2427
   1403c:	movt	r2, #2
   14040:	movw	r3, #48324	; 0xbcc4
   14044:	movt	r3, #1
   14048:	b	21b54 <flatcc_verify_table_as_root@@Base>
   1404c:	movw	r3, #48324	; 0xbcc4
   14050:	movt	r3, #1
   14054:	b	21bc4 <flatcc_verify_table_as_typed_root@@Base>
   14058:	movw	r1, #62593	; 0xf481
   1405c:	movt	r1, #13070	; 0x330e
   14060:	str	r1, [r0]
   14064:	bx	lr

00014068 <verify_table_with_emptystruct@@Base>:
   14068:	push	{fp, lr}
   1406c:	mov	fp, sp
   14070:	bl	140b0 <verify_table_with_emptystruct@@Base+0x48>
   14074:	cmp	r0, #0
   14078:	beq	1409c <verify_table_with_emptystruct@@Base+0x34>
   1407c:	bl	140f0 <verify_table_with_emptystruct@@Base+0x88>
   14080:	mov	r1, r0
   14084:	mov	r0, #0
   14088:	cmp	r1, #0
   1408c:	popne	{fp, pc}
   14090:	movw	r0, #21712	; 0x54d0
   14094:	movt	r0, #2
   14098:	b	140a4 <verify_table_with_emptystruct@@Base+0x3c>
   1409c:	movw	r0, #21664	; 0x54a0
   140a0:	movt	r0, #2
   140a4:	bl	12eec <puts@plt>
   140a8:	mvn	r0, #0
   140ac:	pop	{fp, pc}
   140b0:	push	{r4, r5, fp, lr}
   140b4:	add	fp, sp, #8
   140b8:	mov	r5, #0
   140bc:	cmp	r0, #0
   140c0:	beq	140e8 <verify_table_with_emptystruct@@Base+0x80>
   140c4:	mov	r4, r0
   140c8:	movw	r1, #9012	; 0x2334
   140cc:	movt	r1, #2
   140d0:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   140d4:	cmp	r0, #0
   140d8:	beq	140e8 <verify_table_with_emptystruct@@Base+0x80>
   140dc:	mov	r0, r4
   140e0:	bl	1b5cc <main@@Base+0x290>
   140e4:	add	r5, r4, r0
   140e8:	mov	r0, r5
   140ec:	pop	{r4, r5, fp, pc}
   140f0:	push	{r4, r5, fp, lr}
   140f4:	add	fp, sp, #8
   140f8:	cmp	r0, #0
   140fc:	beq	14138 <verify_table_with_emptystruct@@Base+0xd0>
   14100:	mov	r4, r0
   14104:	bl	1b5d8 <main@@Base+0x29c>
   14108:	sub	r5, r4, r0
   1410c:	mov	r0, r5
   14110:	bl	1b5e0 <main@@Base+0x2a4>
   14114:	cmp	r0, #6
   14118:	bcc	14130 <verify_table_with_emptystruct@@Base+0xc8>
   1411c:	add	r0, r5, #4
   14120:	bl	1b5e0 <main@@Base+0x2a4>
   14124:	cmp	r0, #0
   14128:	addne	r0, r4, r0
   1412c:	popne	{r4, r5, fp, pc}
   14130:	mov	r0, #0
   14134:	pop	{r4, r5, fp, pc}
   14138:	movw	r0, #12494	; 0x30ce
   1413c:	movt	r0, #2
   14140:	movw	r1, #12532	; 0x30f4
   14144:	movt	r1, #2
   14148:	movw	r3, #14312	; 0x37e8
   1414c:	movt	r3, #2
   14150:	movw	r2, #569	; 0x239
   14154:	bl	12f88 <__assert_fail@plt>

00014158 <test_table_with_emptystruct@@Base>:
   14158:	push	{r4, r5, fp, lr}
   1415c:	add	fp, sp, #8
   14160:	sub	sp, sp, #8
   14164:	mov	r4, r0
   14168:	bl	1db08 <flatcc_builder_reset@@Base>
   1416c:	mov	r0, r4
   14170:	bl	141c4 <test_table_with_emptystruct@@Base+0x6c>
   14174:	add	r1, sp, #4
   14178:	mov	r0, r4
   1417c:	bl	20950 <flatcc_builder_finalize_aligned_buffer@@Base>
   14180:	mov	r4, r0
   14184:	movw	r0, #36976	; 0x9070
   14188:	movt	r0, #3
   1418c:	ldr	r3, [r0]
   14190:	ldr	r2, [sp, #4]
   14194:	movw	r0, #9507	; 0x2523
   14198:	movt	r0, #2
   1419c:	mov	r1, r4
   141a0:	bl	1364c <test_type_aliases@@Base+0x254>
   141a4:	mov	r0, r4
   141a8:	bl	14068 <verify_table_with_emptystruct@@Base>
   141ac:	mov	r5, r0
   141b0:	mov	r0, r4
   141b4:	bl	20a30 <flatcc_builder_aligned_free@@Base>
   141b8:	mov	r0, r5
   141bc:	sub	sp, fp, #8
   141c0:	pop	{r4, r5, fp, pc}
   141c4:	push	{r4, sl, fp, lr}
   141c8:	add	fp, sp, #8
   141cc:	mov	r4, r0
   141d0:	movw	r1, #9012	; 0x2334
   141d4:	movt	r1, #2
   141d8:	bl	13d30 <test_empty_monster@@Base+0x108>
   141dc:	cmp	r0, #0
   141e0:	popne	{r4, sl, fp, pc}
   141e4:	mov	r0, r4
   141e8:	bl	1c634 <main@@Base+0x12f8>
   141ec:	mov	r1, r0
   141f0:	mov	r0, r4
   141f4:	pop	{r4, sl, fp, lr}
   141f8:	b	13db4 <test_empty_monster@@Base+0x18c>

000141fc <test_typed_table_with_emptystruct@@Base>:
   141fc:	push	{r4, r5, fp, lr}
   14200:	add	fp, sp, #8
   14204:	sub	sp, sp, #8
   14208:	mov	r4, r0
   1420c:	bl	1db08 <flatcc_builder_reset@@Base>
   14210:	mov	r0, r4
   14214:	bl	1440c <test_typed_table_with_emptystruct@@Base+0x210>
   14218:	add	r1, sp, #4
   1421c:	mov	r0, r4
   14220:	bl	2081c <flatcc_builder_get_direct_buffer@@Base>
   14224:	mov	r4, r0
   14228:	movw	r0, #36976	; 0x9070
   1422c:	movt	r0, #3
   14230:	ldr	r3, [r0]
   14234:	ldr	r2, [sp, #4]
   14238:	movw	r0, #9501	; 0x251d
   1423c:	movt	r0, #2
   14240:	mov	r1, r4
   14244:	bl	1364c <test_type_aliases@@Base+0x254>
   14248:	ldr	r1, [sp, #4]
   1424c:	mov	r0, r4
   14250:	bl	14444 <test_typed_table_with_emptystruct@@Base+0x248>
   14254:	cmp	r0, #0
   14258:	beq	14268 <test_typed_table_with_emptystruct@@Base+0x6c>
   1425c:	movw	r0, #22240	; 0x56e0
   14260:	movt	r0, #2
   14264:	b	142a4 <test_typed_table_with_emptystruct@@Base+0xa8>
   14268:	ldr	r1, [sp, #4]
   1426c:	mov	r0, r4
   14270:	bl	14458 <test_typed_table_with_emptystruct@@Base+0x25c>
   14274:	cmp	r0, #0
   14278:	beq	14288 <test_typed_table_with_emptystruct@@Base+0x8c>
   1427c:	movw	r0, #22208	; 0x56c0
   14280:	movt	r0, #2
   14284:	b	142a4 <test_typed_table_with_emptystruct@@Base+0xa8>
   14288:	ldr	r1, [sp, #4]
   1428c:	mov	r0, r4
   14290:	bl	1446c <test_typed_table_with_emptystruct@@Base+0x270>
   14294:	cmp	r0, #0
   14298:	beq	142b8 <test_typed_table_with_emptystruct@@Base+0xbc>
   1429c:	movw	r0, #22160	; 0x5690
   142a0:	movt	r0, #2
   142a4:	bl	12eec <puts@plt>
   142a8:	mvn	r5, #0
   142ac:	mov	r0, r5
   142b0:	sub	sp, fp, #8
   142b4:	pop	{r4, r5, fp, pc}
   142b8:	cmp	r4, #0
   142bc:	beq	1430c <test_typed_table_with_emptystruct@@Base+0x110>
   142c0:	movw	r1, #14262	; 0x37b6
   142c4:	movt	r1, #45277	; 0xb0dd
   142c8:	mov	r0, r4
   142cc:	bl	14008 <test_typed_empty_monster@@Base+0x230>
   142d0:	cmp	r0, #0
   142d4:	beq	14318 <test_typed_table_with_emptystruct@@Base+0x11c>
   142d8:	mov	r0, r4
   142dc:	mov	r1, #0
   142e0:	bl	14008 <test_typed_empty_monster@@Base+0x230>
   142e4:	cmp	r0, #0
   142e8:	beq	14324 <test_typed_table_with_emptystruct@@Base+0x128>
   142ec:	mov	r0, r4
   142f0:	mov	r1, #1
   142f4:	bl	14008 <test_typed_empty_monster@@Base+0x230>
   142f8:	cmp	r0, #0
   142fc:	beq	14330 <test_typed_table_with_emptystruct@@Base+0x134>
   14300:	movw	r0, #22112	; 0x5660
   14304:	movt	r0, #2
   14308:	b	142a4 <test_typed_table_with_emptystruct@@Base+0xa8>
   1430c:	movw	r0, #21744	; 0x54f0
   14310:	movt	r0, #2
   14314:	b	142a4 <test_typed_table_with_emptystruct@@Base+0xa8>
   14318:	movw	r0, #20779	; 0x512b
   1431c:	movt	r0, #2
   14320:	b	142a4 <test_typed_table_with_emptystruct@@Base+0xa8>
   14324:	movw	r0, #21776	; 0x5510
   14328:	movt	r0, #2
   1432c:	b	142a4 <test_typed_table_with_emptystruct@@Base+0xa8>
   14330:	mov	r0, r4
   14334:	mov	r1, #0
   14338:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   1433c:	cmp	r0, #0
   14340:	beq	14378 <test_typed_table_with_emptystruct@@Base+0x17c>
   14344:	movw	r1, #9531	; 0x253b
   14348:	movt	r1, #2
   1434c:	mov	r0, r4
   14350:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   14354:	cmp	r0, #0
   14358:	beq	14384 <test_typed_table_with_emptystruct@@Base+0x188>
   1435c:	mov	r0, r4
   14360:	bl	140b0 <verify_table_with_emptystruct@@Base+0x48>
   14364:	cmp	r0, #0
   14368:	beq	14390 <test_typed_table_with_emptystruct@@Base+0x194>
   1436c:	movw	r0, #22080	; 0x5640
   14370:	movt	r0, #2
   14374:	b	142a4 <test_typed_table_with_emptystruct@@Base+0xa8>
   14378:	movw	r0, #21808	; 0x5530
   1437c:	movt	r0, #2
   14380:	b	142a4 <test_typed_table_with_emptystruct@@Base+0xa8>
   14384:	movw	r0, #21856	; 0x5560
   14388:	movt	r0, #2
   1438c:	b	142a4 <test_typed_table_with_emptystruct@@Base+0xa8>
   14390:	mov	r0, r4
   14394:	mov	r1, #1
   14398:	bl	144ec <test_typed_table_with_emptystruct@@Base+0x2f0>
   1439c:	cmp	r0, #0
   143a0:	beq	143b0 <test_typed_table_with_emptystruct@@Base+0x1b4>
   143a4:	movw	r0, #22032	; 0x5610
   143a8:	movt	r0, #2
   143ac:	b	142a4 <test_typed_table_with_emptystruct@@Base+0xa8>
   143b0:	mov	r0, r4
   143b4:	bl	14524 <test_typed_table_with_emptystruct@@Base+0x328>
   143b8:	cmp	r0, #0
   143bc:	beq	143f4 <test_typed_table_with_emptystruct@@Base+0x1f8>
   143c0:	mov	r0, r4
   143c4:	bl	14564 <test_typed_table_with_emptystruct@@Base+0x368>
   143c8:	cmp	r0, #0
   143cc:	beq	14400 <test_typed_table_with_emptystruct@@Base+0x204>
   143d0:	mov	r5, #0
   143d4:	mov	r0, r4
   143d8:	mov	r1, #0
   143dc:	bl	144ec <test_typed_table_with_emptystruct@@Base+0x2f0>
   143e0:	cmp	r0, #0
   143e4:	bne	142ac <test_typed_table_with_emptystruct@@Base+0xb0>
   143e8:	movw	r0, #22000	; 0x55f0
   143ec:	movt	r0, #2
   143f0:	b	142a4 <test_typed_table_with_emptystruct@@Base+0xa8>
   143f4:	movw	r0, #21904	; 0x5590
   143f8:	movt	r0, #2
   143fc:	b	142a4 <test_typed_table_with_emptystruct@@Base+0xa8>
   14400:	movw	r0, #21968	; 0x55d0
   14404:	movt	r0, #2
   14408:	b	142a4 <test_typed_table_with_emptystruct@@Base+0xa8>
   1440c:	push	{r4, sl, fp, lr}
   14410:	add	fp, sp, #8
   14414:	mov	r4, r0
   14418:	movw	r1, #9531	; 0x253b
   1441c:	movt	r1, #2
   14420:	bl	13d30 <test_empty_monster@@Base+0x108>
   14424:	cmp	r0, #0
   14428:	popne	{r4, sl, fp, pc}
   1442c:	mov	r0, r4
   14430:	bl	1c634 <main@@Base+0x12f8>
   14434:	mov	r1, r0
   14438:	mov	r0, r4
   1443c:	pop	{r4, sl, fp, lr}
   14440:	b	13db4 <test_empty_monster@@Base+0x18c>
   14444:	movw	r2, #9531	; 0x253b
   14448:	movt	r2, #2
   1444c:	movw	r3, #50936	; 0xc6f8
   14450:	movt	r3, #1
   14454:	b	21b54 <flatcc_verify_table_as_root@@Base>
   14458:	movw	r2, #9531	; 0x253b
   1445c:	movt	r2, #2
   14460:	movw	r3, #50936	; 0xc6f8
   14464:	movt	r3, #1
   14468:	b	21b54 <flatcc_verify_table_as_root@@Base>
   1446c:	movw	r2, #14262	; 0x37b6
   14470:	movt	r2, #45277	; 0xb0dd
   14474:	movw	r3, #50936	; 0xc6f8
   14478:	movt	r3, #1
   1447c:	b	21bc4 <flatcc_verify_table_as_typed_root@@Base>
   14480:	push	{r4, r5, fp, lr}
   14484:	add	fp, sp, #8
   14488:	sub	sp, sp, #8
   1448c:	mov	r4, r0
   14490:	mov	r0, #0
   14494:	str	r0, [sp, #4]
   14498:	cmp	r1, #0
   1449c:	moveq	r0, #1
   144a0:	subeq	sp, fp, #8
   144a4:	popeq	{r4, r5, fp, pc}
   144a8:	add	r0, sp, #4
   144ac:	mov	r2, #4
   144b0:	bl	12f4c <strncpy@plt>
   144b4:	ldr	r5, [sp, #4]
   144b8:	mov	r0, r5
   144bc:	bl	1c708 <main@@Base+0x13cc>
   144c0:	str	r5, [sp, #4]
   144c4:	add	r0, r4, #4
   144c8:	bl	1c628 <main@@Base+0x12ec>
   144cc:	sub	r0, r0, r5
   144d0:	clz	r0, r0
   144d4:	lsr	r0, r0, #5
   144d8:	clz	r1, r5
   144dc:	lsr	r1, r1, #5
   144e0:	orr	r0, r1, r0
   144e4:	sub	sp, fp, #8
   144e8:	pop	{r4, r5, fp, pc}
   144ec:	push	{r4, r5, fp, lr}
   144f0:	add	fp, sp, #8
   144f4:	mov	r5, #0
   144f8:	cmp	r0, #0
   144fc:	beq	1451c <test_typed_table_with_emptystruct@@Base+0x320>
   14500:	mov	r4, r0
   14504:	bl	14008 <test_typed_empty_monster@@Base+0x230>
   14508:	cmp	r0, #0
   1450c:	beq	1451c <test_typed_table_with_emptystruct@@Base+0x320>
   14510:	mov	r0, r4
   14514:	bl	1b5cc <main@@Base+0x290>
   14518:	add	r5, r4, r0
   1451c:	mov	r0, r5
   14520:	pop	{r4, r5, fp, pc}
   14524:	push	{r4, r5, fp, lr}
   14528:	add	fp, sp, #8
   1452c:	mov	r5, #0
   14530:	cmp	r0, #0
   14534:	beq	1455c <test_typed_table_with_emptystruct@@Base+0x360>
   14538:	mov	r4, r0
   1453c:	movw	r1, #9531	; 0x253b
   14540:	movt	r1, #2
   14544:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   14548:	cmp	r0, #0
   1454c:	beq	1455c <test_typed_table_with_emptystruct@@Base+0x360>
   14550:	mov	r0, r4
   14554:	bl	1b5cc <main@@Base+0x290>
   14558:	add	r5, r4, r0
   1455c:	mov	r0, r5
   14560:	pop	{r4, r5, fp, pc}
   14564:	push	{r4, r5, fp, lr}
   14568:	add	fp, sp, #8
   1456c:	mov	r5, #0
   14570:	cmp	r0, #0
   14574:	beq	1459c <test_typed_table_with_emptystruct@@Base+0x3a0>
   14578:	mov	r4, r0
   1457c:	movw	r1, #14262	; 0x37b6
   14580:	movt	r1, #45277	; 0xb0dd
   14584:	bl	14008 <test_typed_empty_monster@@Base+0x230>
   14588:	cmp	r0, #0
   1458c:	beq	1459c <test_typed_table_with_emptystruct@@Base+0x3a0>
   14590:	mov	r0, r4
   14594:	bl	1b5cc <main@@Base+0x290>
   14598:	add	r5, r4, r0
   1459c:	mov	r0, r5
   145a0:	pop	{r4, r5, fp, pc}

000145a4 <verify_monster@@Base>:
   145a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145a8:	add	fp, sp, #28
   145ac:	sub	sp, sp, #4
   145b0:	vpush	{d8-d10}
   145b4:	sub	sp, sp, #48	; 0x30
   145b8:	bfc	sp, #0, #4
   145bc:	mov	r4, r0
   145c0:	mov	r1, #0
   145c4:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   145c8:	cmp	r0, #0
   145cc:	beq	14624 <verify_monster@@Base+0x80>
   145d0:	movw	r1, #9012	; 0x2334
   145d4:	movt	r1, #2
   145d8:	mov	r0, r4
   145dc:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   145e0:	cmp	r0, #0
   145e4:	beq	14630 <verify_monster@@Base+0x8c>
   145e8:	movw	r1, #9536	; 0x2540
   145ec:	movt	r1, #2
   145f0:	mov	r0, r4
   145f4:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   145f8:	cmp	r0, #0
   145fc:	beq	1463c <verify_monster@@Base+0x98>
   14600:	movw	r1, #9544	; 0x2548
   14604:	movt	r1, #2
   14608:	mov	r0, r4
   1460c:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   14610:	cmp	r0, #0
   14614:	beq	1465c <verify_monster@@Base+0xb8>
   14618:	movw	r0, #24160	; 0x5e60
   1461c:	movt	r0, #2
   14620:	b	14644 <verify_monster@@Base+0xa0>
   14624:	movw	r0, #22272	; 0x5700
   14628:	movt	r0, #2
   1462c:	b	14644 <verify_monster@@Base+0xa0>
   14630:	movw	r0, #22320	; 0x5730
   14634:	movt	r0, #2
   14638:	b	14644 <verify_monster@@Base+0xa0>
   1463c:	movw	r0, #22368	; 0x5760
   14640:	movt	r0, #2
   14644:	bl	12eec <puts@plt>
   14648:	mvn	r0, #0
   1464c:	sub	sp, fp, #56	; 0x38
   14650:	vpop	{d8-d10}
   14654:	add	sp, sp, #4
   14658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1465c:	movw	r1, #9012	; 0x2334
   14660:	movt	r1, #2
   14664:	mov	r0, r4
   14668:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   1466c:	cmp	r0, #0
   14670:	beq	146e0 <verify_monster@@Base+0x13c>
   14674:	mov	r0, r4
   14678:	bl	13204 <verify_empty_monster@@Base+0x17c>
   1467c:	cmp	r0, #0
   14680:	beq	146ec <verify_monster@@Base+0x148>
   14684:	mov	r4, r0
   14688:	bl	13244 <verify_empty_monster@@Base+0x1bc>
   1468c:	cmp	r0, #80	; 0x50
   14690:	bne	146f8 <verify_monster@@Base+0x154>
   14694:	mov	r0, r4
   14698:	bl	13384 <verify_empty_monster@@Base+0x2fc>
   1469c:	cmp	r0, #0
   146a0:	beq	14704 <verify_monster@@Base+0x160>
   146a4:	mov	r5, r0
   146a8:	tst	r0, #15
   146ac:	beq	146bc <verify_monster@@Base+0x118>
   146b0:	movw	r0, #24112	; 0x5e30
   146b4:	movt	r0, #2
   146b8:	bl	12eec <puts@plt>
   146bc:	mov	r0, r5
   146c0:	bl	14f98 <verify_monster@@Base+0x9f4>
   146c4:	vldr	s16, [pc, #1008]	; 14abc <verify_monster@@Base+0x518>
   146c8:	vcmp.f32	s0, s16
   146cc:	vmrs	APSR_nzcv, fpscr
   146d0:	beq	14710 <verify_monster@@Base+0x16c>
   146d4:	movw	r0, #24064	; 0x5e00
   146d8:	movt	r0, #2
   146dc:	b	14644 <verify_monster@@Base+0xa0>
   146e0:	movw	r0, #22432	; 0x57a0
   146e4:	movt	r0, #2
   146e8:	b	14644 <verify_monster@@Base+0xa0>
   146ec:	movw	r0, #21088	; 0x5260
   146f0:	movt	r0, #2
   146f4:	b	14644 <verify_monster@@Base+0xa0>
   146f8:	movw	r0, #21216	; 0x52e0
   146fc:	movt	r0, #2
   14700:	b	14644 <verify_monster@@Base+0xa0>
   14704:	movw	r0, #22496	; 0x57e0
   14708:	movt	r0, #2
   1470c:	b	14644 <verify_monster@@Base+0xa0>
   14710:	vldr	s0, [r5]
   14714:	vmov.f32	s18, #112	; 0x3f800000  1.0
   14718:	vcmp.f32	s0, s18
   1471c:	vmrs	APSR_nzcv, fpscr
   14720:	bne	14748 <verify_monster@@Base+0x1a4>
   14724:	vldr	s0, [r5, #4]
   14728:	vmov.f32	s20, #0	; 0x40000000  2.0
   1472c:	vcmp.f32	s0, s20
   14730:	vmrs	APSR_nzcv, fpscr
   14734:	bne	14748 <verify_monster@@Base+0x1a4>
   14738:	vldr	s0, [r5, #8]
   1473c:	vcmp.f32	s0, s16
   14740:	vmrs	APSR_nzcv, fpscr
   14744:	beq	14754 <verify_monster@@Base+0x1b0>
   14748:	movw	r0, #24032	; 0x5de0
   1474c:	movt	r0, #2
   14750:	b	14644 <verify_monster@@Base+0xa0>
   14754:	add	r6, sp, #16
   14758:	mov	r0, r6
   1475c:	bl	14fb0 <verify_monster@@Base+0xa0c>
   14760:	mov	r0, r6
   14764:	mov	r1, r5
   14768:	bl	14fc0 <verify_monster@@Base+0xa1c>
   1476c:	vldr	s0, [sp, #16]
   14770:	vcmp.f32	s0, s18
   14774:	vmrs	APSR_nzcv, fpscr
   14778:	bne	1479c <verify_monster@@Base+0x1f8>
   1477c:	vldr	s0, [sp, #20]
   14780:	vcmp.f32	s0, s20
   14784:	vmrs	APSR_nzcv, fpscr
   14788:	bne	1479c <verify_monster@@Base+0x1f8>
   1478c:	vldr	s0, [sp, #24]
   14790:	vcmp.f32	s0, s16
   14794:	vmrs	APSR_nzcv, fpscr
   14798:	beq	147a8 <verify_monster@@Base+0x204>
   1479c:	movw	r0, #23984	; 0x5db0
   147a0:	movt	r0, #2
   147a4:	b	14644 <verify_monster@@Base+0xa0>
   147a8:	vldr	d16, [r5, #16]
   147ac:	vcmp.f64	d16, #0.0
   147b0:	vmrs	APSR_nzcv, fpscr
   147b4:	bne	147c4 <verify_monster@@Base+0x220>
   147b8:	ldr	r0, [r5, #26]
   147bc:	cmp	r0, #0
   147c0:	beq	147d0 <verify_monster@@Base+0x22c>
   147c4:	movw	r0, #23936	; 0x5d80
   147c8:	movt	r0, #2
   147cc:	b	14644 <verify_monster@@Base+0xa0>
   147d0:	mov	r0, r4
   147d4:	bl	15010 <verify_monster@@Base+0xa6c>
   147d8:	mov	r5, r0
   147dc:	movw	r1, #9185	; 0x23e1
   147e0:	movt	r1, #2
   147e4:	bl	12e8c <strcmp@plt>
   147e8:	cmp	r0, #0
   147ec:	beq	147fc <verify_monster@@Base+0x258>
   147f0:	movw	r0, #22528	; 0x5800
   147f4:	movt	r0, #2
   147f8:	b	14644 <verify_monster@@Base+0xa0>
   147fc:	mov	r0, r4
   14800:	bl	15010 <verify_monster@@Base+0xa6c>
   14804:	mov	r6, r0
   14808:	mov	r0, r5
   1480c:	bl	15090 <verify_monster@@Base+0xaec>
   14810:	cmp	r0, #9
   14814:	bne	14874 <verify_monster@@Base+0x2d0>
   14818:	mov	r0, r6
   1481c:	bl	15090 <verify_monster@@Base+0xaec>
   14820:	cmp	r0, #9
   14824:	bne	14874 <verify_monster@@Base+0x2d0>
   14828:	mov	r0, r4
   1482c:	bl	150a4 <verify_monster@@Base+0xb00>
   14830:	cmp	r0, #2
   14834:	bne	14880 <verify_monster@@Base+0x2dc>
   14838:	mov	r0, #2
   1483c:	bl	15114 <verify_monster@@Base+0xb70>
   14840:	cmp	r0, #0
   14844:	beq	1488c <verify_monster@@Base+0x2e8>
   14848:	mov	r0, #1
   1484c:	bl	15114 <verify_monster@@Base+0xb70>
   14850:	cmp	r0, #0
   14854:	beq	14898 <verify_monster@@Base+0x2f4>
   14858:	mov	r0, #4
   1485c:	bl	15114 <verify_monster@@Base+0xb70>
   14860:	cmp	r0, #0
   14864:	beq	148a4 <verify_monster@@Base+0x300>
   14868:	movw	r0, #23824	; 0x5d10
   1486c:	movt	r0, #2
   14870:	b	14644 <verify_monster@@Base+0xa0>
   14874:	movw	r0, #23904	; 0x5d60
   14878:	movt	r0, #2
   1487c:	b	14644 <verify_monster@@Base+0xa0>
   14880:	movw	r0, #23872	; 0x5d40
   14884:	movt	r0, #2
   14888:	b	14644 <verify_monster@@Base+0xa0>
   1488c:	movw	r0, #22560	; 0x5820
   14890:	movt	r0, #2
   14894:	b	14644 <verify_monster@@Base+0xa0>
   14898:	movw	r0, #22624	; 0x5860
   1489c:	movt	r0, #2
   148a0:	b	14644 <verify_monster@@Base+0xa0>
   148a4:	mov	r0, #8
   148a8:	bl	15114 <verify_monster@@Base+0xb70>
   148ac:	cmp	r0, #0
   148b0:	beq	148d0 <verify_monster@@Base+0x32c>
   148b4:	mov	r0, #9
   148b8:	bl	15114 <verify_monster@@Base+0xb70>
   148bc:	cmp	r0, #0
   148c0:	beq	148dc <verify_monster@@Base+0x338>
   148c4:	movw	r0, #23824	; 0x5d10
   148c8:	movt	r0, #2
   148cc:	b	14644 <verify_monster@@Base+0xa0>
   148d0:	movw	r0, #22688	; 0x58a0
   148d4:	movt	r0, #2
   148d8:	b	14644 <verify_monster@@Base+0xa0>
   148dc:	mov	r0, #1
   148e0:	bl	15140 <verify_monster@@Base+0xb9c>
   148e4:	cmp	r0, #0
   148e8:	beq	14908 <verify_monster@@Base+0x364>
   148ec:	mov	r0, #42	; 0x2a
   148f0:	bl	15140 <verify_monster@@Base+0xb9c>
   148f4:	cmp	r0, #0
   148f8:	beq	14914 <verify_monster@@Base+0x370>
   148fc:	movw	r0, #23776	; 0x5ce0
   14900:	movt	r0, #2
   14904:	b	14644 <verify_monster@@Base+0xa0>
   14908:	movw	r0, #22752	; 0x58e0
   1490c:	movt	r0, #2
   14910:	b	14644 <verify_monster@@Base+0xa0>
   14914:	mov	r0, r4
   14918:	bl	15154 <verify_monster@@Base+0xbb0>
   1491c:	mov	r5, r0
   14920:	bl	151d0 <verify_monster@@Base+0xc2c>
   14924:	cmp	r0, #10
   14928:	bne	14994 <verify_monster@@Base+0x3f0>
   1492c:	mov	r0, r5
   14930:	bl	151d0 <verify_monster@@Base+0xc2c>
   14934:	cmp	r0, #0
   14938:	beq	14968 <verify_monster@@Base+0x3c4>
   1493c:	mov	r6, #0
   14940:	mov	r0, r5
   14944:	mov	r1, r6
   14948:	bl	151d4 <verify_monster@@Base+0xc30>
   1494c:	cmp	r6, r0
   14950:	bne	149ac <verify_monster@@Base+0x408>
   14954:	add	r6, r6, #1
   14958:	mov	r0, r5
   1495c:	bl	151d0 <verify_monster@@Base+0xc2c>
   14960:	cmp	r6, r0
   14964:	bcc	14940 <verify_monster@@Base+0x39c>
   14968:	mov	r0, r4
   1496c:	bl	1521c <verify_monster@@Base+0xc78>
   14970:	cmp	r0, #150	; 0x96
   14974:	bne	149a0 <verify_monster@@Base+0x3fc>
   14978:	mov	r0, r4
   1497c:	bl	1528c <verify_monster@@Base+0xce8>
   14980:	cmp	r0, #0
   14984:	beq	149c0 <verify_monster@@Base+0x41c>
   14988:	movw	r0, #23680	; 0x5c80
   1498c:	movt	r0, #2
   14990:	b	14644 <verify_monster@@Base+0xa0>
   14994:	movw	r0, #23744	; 0x5cc0
   14998:	movt	r0, #2
   1499c:	b	14644 <verify_monster@@Base+0xa0>
   149a0:	movw	r0, #23712	; 0x5ca0
   149a4:	movt	r0, #2
   149a8:	b	14644 <verify_monster@@Base+0xa0>
   149ac:	movw	r0, #9549	; 0x254d
   149b0:	movt	r0, #2
   149b4:	mov	r1, r6
   149b8:	bl	12e98 <printf@plt>
   149bc:	b	14648 <verify_monster@@Base+0xa4>
   149c0:	mov	r0, r4
   149c4:	bl	132b4 <verify_empty_monster@@Base+0x22c>
   149c8:	cmp	r0, #0
   149cc:	beq	14ab0 <verify_monster@@Base+0x50c>
   149d0:	mov	r0, r4
   149d4:	bl	1331c <verify_empty_monster@@Base+0x294>
   149d8:	cmp	r0, #0
   149dc:	beq	14ac0 <verify_monster@@Base+0x51c>
   149e0:	mov	r0, r4
   149e4:	bl	152f4 <verify_monster@@Base+0xd50>
   149e8:	mov	r9, r0
   149ec:	bl	15370 <verify_monster@@Base+0xdcc>
   149f0:	cmp	r0, #5
   149f4:	bne	14acc <verify_monster@@Base+0x528>
   149f8:	mov	r6, #0
   149fc:	movw	r8, #20856	; 0x5178
   14a00:	movt	r8, #2
   14a04:	mov	r5, r8
   14a08:	mov	r0, r9
   14a0c:	mov	r1, r6
   14a10:	bl	15384 <verify_monster@@Base+0xde0>
   14a14:	mov	r7, r0
   14a18:	ldrh	sl, [r5]
   14a1c:	bl	153c4 <verify_monster@@Base+0xe20>
   14a20:	uxth	r0, r0
   14a24:	cmp	sl, r0
   14a28:	bne	14ad8 <verify_monster@@Base+0x534>
   14a2c:	add	r0, r8, r6, lsl #2
   14a30:	ldrb	sl, [r0, #2]
   14a34:	mov	r0, r7
   14a38:	bl	153d4 <verify_monster@@Base+0xe30>
   14a3c:	uxtb	r0, r0
   14a40:	cmp	sl, r0
   14a44:	bne	14ad8 <verify_monster@@Base+0x534>
   14a48:	add	r5, r5, #4
   14a4c:	add	r6, r6, #1
   14a50:	cmp	r6, #5
   14a54:	bcc	14a08 <verify_monster@@Base+0x464>
   14a58:	mov	r0, r4
   14a5c:	bl	153e8 <verify_monster@@Base+0xe44>
   14a60:	mov	r5, r0
   14a64:	bl	15464 <verify_monster@@Base+0xec0>
   14a68:	cmp	r0, #8
   14a6c:	bne	14ae4 <verify_monster@@Base+0x540>
   14a70:	mov	r0, r5
   14a74:	mov	r1, #5
   14a78:	bl	15478 <verify_monster@@Base+0xed4>
   14a7c:	cmp	r0, #0
   14a80:	beq	14e30 <verify_monster@@Base+0x88c>
   14a84:	mov	r6, r0
   14a88:	bl	15010 <verify_monster@@Base+0xa6c>
   14a8c:	movw	r1, #9746	; 0x2612
   14a90:	movt	r1, #2
   14a94:	bl	12e8c <strcmp@plt>
   14a98:	cmp	r0, #0
   14a9c:	beq	14af0 <verify_monster@@Base+0x54c>
   14aa0:	movw	r0, #9730	; 0x2602
   14aa4:	movt	r0, #2
   14aa8:	bl	12e98 <printf@plt>
   14aac:	b	14648 <verify_monster@@Base+0xa4>
   14ab0:	movw	r0, #22800	; 0x5910
   14ab4:	movt	r0, #2
   14ab8:	b	14644 <verify_monster@@Base+0xa0>
   14abc:	subgt	ip, ip, sp, asr #25
   14ac0:	movw	r0, #21152	; 0x52a0
   14ac4:	movt	r0, #2
   14ac8:	b	14644 <verify_monster@@Base+0xa0>
   14acc:	movw	r0, #23632	; 0x5c50
   14ad0:	movt	r0, #2
   14ad4:	b	14644 <verify_monster@@Base+0xa0>
   14ad8:	movw	r0, #9578	; 0x256a
   14adc:	movt	r0, #2
   14ae0:	b	149b4 <verify_monster@@Base+0x410>
   14ae4:	movw	r0, #23584	; 0x5c20
   14ae8:	movt	r0, #2
   14aec:	b	14644 <verify_monster@@Base+0xa0>
   14af0:	mov	r0, r5
   14af4:	mov	r1, #1
   14af8:	bl	15478 <verify_monster@@Base+0xed4>
   14afc:	cmp	r0, r6
   14b00:	beq	14b10 <verify_monster@@Base+0x56c>
   14b04:	movw	r0, #23520	; 0x5be0
   14b08:	movt	r0, #2
   14b0c:	b	14644 <verify_monster@@Base+0xa0>
   14b10:	bl	15010 <verify_monster@@Base+0xa6c>
   14b14:	mov	r6, r0
   14b18:	movw	r1, #9746	; 0x2612
   14b1c:	movt	r1, #2
   14b20:	bl	12e8c <strcmp@plt>
   14b24:	cmp	r0, #0
   14b28:	beq	14b38 <verify_monster@@Base+0x594>
   14b2c:	movw	r0, #9754	; 0x261a
   14b30:	movt	r0, #2
   14b34:	b	149b4 <verify_monster@@Base+0x410>
   14b38:	mov	r0, r5
   14b3c:	mov	r1, #2
   14b40:	bl	15478 <verify_monster@@Base+0xed4>
   14b44:	bl	15010 <verify_monster@@Base+0xa6c>
   14b48:	mov	r6, r0
   14b4c:	movw	r1, #9788	; 0x263c
   14b50:	movt	r1, #2
   14b54:	bl	12e8c <strcmp@plt>
   14b58:	cmp	r0, #0
   14b5c:	beq	14b6c <verify_monster@@Base+0x5c8>
   14b60:	movw	r0, #9794	; 0x2642
   14b64:	movt	r0, #2
   14b68:	b	149b4 <verify_monster@@Base+0x410>
   14b6c:	mov	r0, r5
   14b70:	mov	r1, #0
   14b74:	bl	15478 <verify_monster@@Base+0xed4>
   14b78:	bl	15010 <verify_monster@@Base+0xa6c>
   14b7c:	mov	r6, r0
   14b80:	movw	r1, #9828	; 0x2664
   14b84:	movt	r1, #2
   14b88:	bl	12e8c <strcmp@plt>
   14b8c:	cmp	r0, #0
   14b90:	beq	14ba0 <verify_monster@@Base+0x5fc>
   14b94:	movw	r0, #9837	; 0x266d
   14b98:	movt	r0, #2
   14b9c:	b	149b4 <verify_monster@@Base+0x410>
   14ba0:	mov	r0, r5
   14ba4:	mov	r1, #3
   14ba8:	bl	15478 <verify_monster@@Base+0xed4>
   14bac:	bl	15010 <verify_monster@@Base+0xa6c>
   14bb0:	mov	r6, r0
   14bb4:	movw	r1, #9746	; 0x2612
   14bb8:	movt	r1, #2
   14bbc:	bl	12e8c <strcmp@plt>
   14bc0:	cmp	r0, #0
   14bc4:	beq	14bd4 <verify_monster@@Base+0x630>
   14bc8:	movw	r0, #9874	; 0x2692
   14bcc:	movt	r0, #2
   14bd0:	b	149b4 <verify_monster@@Base+0x410>
   14bd4:	mov	r0, r5
   14bd8:	mov	r1, #4
   14bdc:	bl	15478 <verify_monster@@Base+0xed4>
   14be0:	bl	15010 <verify_monster@@Base+0xa6c>
   14be4:	mov	r6, r0
   14be8:	movw	r1, #9788	; 0x263c
   14bec:	movt	r1, #2
   14bf0:	bl	12e8c <strcmp@plt>
   14bf4:	cmp	r0, #0
   14bf8:	beq	14c08 <verify_monster@@Base+0x664>
   14bfc:	movw	r0, #9910	; 0x26b6
   14c00:	movt	r0, #2
   14c04:	b	149b4 <verify_monster@@Base+0x410>
   14c08:	mov	r0, r5
   14c0c:	mov	r1, #6
   14c10:	bl	15478 <verify_monster@@Base+0xed4>
   14c14:	bl	15010 <verify_monster@@Base+0xa6c>
   14c18:	mov	r6, r0
   14c1c:	movw	r1, #9828	; 0x2664
   14c20:	movt	r1, #2
   14c24:	bl	12e8c <strcmp@plt>
   14c28:	cmp	r0, #0
   14c2c:	beq	14c3c <verify_monster@@Base+0x698>
   14c30:	movw	r0, #9944	; 0x26d8
   14c34:	movt	r0, #2
   14c38:	b	149b4 <verify_monster@@Base+0x410>
   14c3c:	mov	r0, r5
   14c40:	mov	r1, #7
   14c44:	bl	15478 <verify_monster@@Base+0xed4>
   14c48:	bl	15010 <verify_monster@@Base+0xa6c>
   14c4c:	mov	r5, r0
   14c50:	movw	r1, #9788	; 0x263c
   14c54:	movt	r1, #2
   14c58:	bl	12e8c <strcmp@plt>
   14c5c:	cmp	r0, #0
   14c60:	beq	14c78 <verify_monster@@Base+0x6d4>
   14c64:	movw	r0, #9981	; 0x26fd
   14c68:	movt	r0, #2
   14c6c:	mov	r1, r5
   14c70:	bl	12e98 <printf@plt>
   14c74:	b	14648 <verify_monster@@Base+0xa4>
   14c78:	mov	r0, r4
   14c7c:	bl	154c8 <verify_monster@@Base+0xf24>
   14c80:	mov	r5, r0
   14c84:	bl	15544 <verify_monster@@Base+0xfa0>
   14c88:	cmp	r0, #3
   14c8c:	bne	14cbc <verify_monster@@Base+0x718>
   14c90:	mov	r0, r5
   14c94:	mov	r1, #0
   14c98:	bl	15558 <verify_monster@@Base+0xfb4>
   14c9c:	movw	r1, #10018	; 0x2722
   14ca0:	movt	r1, #2
   14ca4:	bl	12e8c <strcmp@plt>
   14ca8:	cmp	r0, #0
   14cac:	beq	14cc8 <verify_monster@@Base+0x724>
   14cb0:	movw	r0, #23440	; 0x5b90
   14cb4:	movt	r0, #2
   14cb8:	b	14644 <verify_monster@@Base+0xa0>
   14cbc:	movw	r0, #23472	; 0x5bb0
   14cc0:	movt	r0, #2
   14cc4:	b	14644 <verify_monster@@Base+0xa0>
   14cc8:	mov	r0, r5
   14ccc:	mov	r1, #1
   14cd0:	bl	15558 <verify_monster@@Base+0xfb4>
   14cd4:	mov	r6, r0
   14cd8:	bl	15090 <verify_monster@@Base+0xaec>
   14cdc:	cmp	r0, #2
   14ce0:	bne	14cfc <verify_monster@@Base+0x758>
   14ce4:	ldrh	r0, [r6]
   14ce8:	cmp	r0, #44	; 0x2c
   14cec:	beq	14d0c <verify_monster@@Base+0x768>
   14cf0:	movw	r0, #23408	; 0x5b70
   14cf4:	movt	r0, #2
   14cf8:	b	14644 <verify_monster@@Base+0xa0>
   14cfc:	movw	r0, #10024	; 0x2728
   14d00:	movt	r0, #2
   14d04:	bl	12e98 <printf@plt>
   14d08:	b	14648 <verify_monster@@Base+0xa4>
   14d0c:	mov	r0, r5
   14d10:	mov	r1, #2
   14d14:	bl	15558 <verify_monster@@Base+0xfb4>
   14d18:	movw	r1, #10050	; 0x2742
   14d1c:	movt	r1, #2
   14d20:	bl	12e8c <strcmp@plt>
   14d24:	cmp	r0, #0
   14d28:	beq	14d38 <verify_monster@@Base+0x794>
   14d2c:	movw	r0, #23376	; 0x5b50
   14d30:	movt	r0, #2
   14d34:	b	14644 <verify_monster@@Base+0xa0>
   14d38:	mov	r0, r4
   14d3c:	bl	155ac <verify_monster@@Base+0x1008>
   14d40:	cmp	r0, #0
   14d44:	beq	14dd0 <verify_monster@@Base+0x82c>
   14d48:	mov	r0, r4
   14d4c:	bl	15614 <verify_monster@@Base+0x1070>
   14d50:	mov	r5, r0
   14d54:	bl	15690 <verify_monster@@Base+0x10ec>
   14d58:	cmp	r0, #4
   14d5c:	bne	14ddc <verify_monster@@Base+0x838>
   14d60:	mov	r6, #0
   14d64:	movw	r7, #21068	; 0x524c
   14d68:	movt	r7, #2
   14d6c:	mov	r0, r5
   14d70:	mov	r1, r6
   14d74:	bl	15694 <verify_monster@@Base+0x10f0>
   14d78:	ldr	r1, [r7, r6, lsl #2]
   14d7c:	cmp	r1, r0
   14d80:	bne	14de8 <verify_monster@@Base+0x844>
   14d84:	add	r6, r6, #1
   14d88:	cmp	r6, #4
   14d8c:	bcc	14d6c <verify_monster@@Base+0x7c8>
   14d90:	mov	r0, r4
   14d94:	bl	156dc <verify_monster@@Base+0x1138>
   14d98:	cmp	r0, #1
   14d9c:	bne	14df4 <verify_monster@@Base+0x850>
   14da0:	mov	r5, r0
   14da4:	mov	r0, r4
   14da8:	bl	1574c <verify_monster@@Base+0x11a8>
   14dac:	bl	15010 <verify_monster@@Base+0xa6c>
   14db0:	movw	r1, #9746	; 0x2612
   14db4:	movt	r1, #2
   14db8:	bl	12e8c <strcmp@plt>
   14dbc:	cmp	r0, #0
   14dc0:	beq	14e00 <verify_monster@@Base+0x85c>
   14dc4:	movw	r0, #23264	; 0x5ae0
   14dc8:	movt	r0, #2
   14dcc:	b	14644 <verify_monster@@Base+0xa0>
   14dd0:	movw	r0, #22832	; 0x5930
   14dd4:	movt	r0, #2
   14dd8:	b	14644 <verify_monster@@Base+0xa0>
   14ddc:	movw	r0, #23344	; 0x5b30
   14de0:	movt	r0, #2
   14de4:	b	14644 <verify_monster@@Base+0xa0>
   14de8:	movw	r0, #10057	; 0x2749
   14dec:	movt	r0, #2
   14df0:	b	149b4 <verify_monster@@Base+0x410>
   14df4:	movw	r0, #23296	; 0x5b00
   14df8:	movt	r0, #2
   14dfc:	b	14644 <verify_monster@@Base+0xa0>
   14e00:	mov	r0, r4
   14e04:	bl	157c4 <verify_monster@@Base+0x1220>
   14e08:	mov	r6, r0
   14e0c:	bl	15010 <verify_monster@@Base+0xa6c>
   14e10:	movw	r1, #10088	; 0x2768
   14e14:	movt	r1, #2
   14e18:	bl	12e8c <strcmp@plt>
   14e1c:	cmp	r0, #0
   14e20:	beq	14e50 <verify_monster@@Base+0x8ac>
   14e24:	movw	r0, #23232	; 0x5ac0
   14e28:	movt	r0, #2
   14e2c:	b	14644 <verify_monster@@Base+0xa0>
   14e30:	movw	r0, #9618	; 0x2592
   14e34:	movt	r0, #2
   14e38:	movw	r1, #9622	; 0x2596
   14e3c:	movt	r1, #2
   14e40:	movw	r3, #9703	; 0x25e7
   14e44:	movt	r3, #2
   14e48:	movw	r2, #662	; 0x296
   14e4c:	bl	12f88 <__assert_fail@plt>
   14e50:	mov	r0, r6
   14e54:	bl	156dc <verify_monster@@Base+0x1138>
   14e58:	cmp	r0, #0
   14e5c:	beq	14e6c <verify_monster@@Base+0x8c8>
   14e60:	movw	r0, #23184	; 0x5a90
   14e64:	movt	r0, #2
   14e68:	b	14644 <verify_monster@@Base+0xa0>
   14e6c:	add	r0, sp, #8
   14e70:	mov	r1, r4
   14e74:	bl	1583c <verify_monster@@Base+0x1298>
   14e78:	ldrb	r0, [sp, #8]
   14e7c:	cmp	r0, r5
   14e80:	bne	14f78 <verify_monster@@Base+0x9d4>
   14e84:	ldr	r5, [sp, #12]
   14e88:	mov	r0, r4
   14e8c:	bl	1574c <verify_monster@@Base+0x11a8>
   14e90:	cmp	r5, r0
   14e94:	beq	14ea4 <verify_monster@@Base+0x900>
   14e98:	movw	r0, #23104	; 0x5a40
   14e9c:	movt	r0, #2
   14ea0:	b	14644 <verify_monster@@Base+0xa0>
   14ea4:	mov	r0, r6
   14ea8:	bl	153e8 <verify_monster@@Base+0xe44>
   14eac:	mov	r5, r0
   14eb0:	bl	15464 <verify_monster@@Base+0xec0>
   14eb4:	sub	r1, r0, #1
   14eb8:	mov	r0, r5
   14ebc:	bl	15478 <verify_monster@@Base+0xed4>
   14ec0:	mov	r5, r0
   14ec4:	bl	156dc <verify_monster@@Base+0x1138>
   14ec8:	cmp	r0, #1
   14ecc:	bne	14f84 <verify_monster@@Base+0x9e0>
   14ed0:	mov	r0, r5
   14ed4:	bl	1574c <verify_monster@@Base+0x11a8>
   14ed8:	bl	15010 <verify_monster@@Base+0xa6c>
   14edc:	movw	r1, #9746	; 0x2612
   14ee0:	movt	r1, #2
   14ee4:	bl	12e8c <strcmp@plt>
   14ee8:	cmp	r0, #0
   14eec:	beq	14efc <verify_monster@@Base+0x958>
   14ef0:	movw	r0, #22960	; 0x59b0
   14ef4:	movt	r0, #2
   14ef8:	b	14644 <verify_monster@@Base+0xa0>
   14efc:	mov	r0, r4
   14f00:	bl	1587c <verify_monster@@Base+0x12d8>
   14f04:	cmp	r0, #0
   14f08:	beq	14f18 <verify_monster@@Base+0x974>
   14f0c:	movw	r0, #22928	; 0x5990
   14f10:	movt	r0, #2
   14f14:	b	14644 <verify_monster@@Base+0xa0>
   14f18:	mov	r0, r4
   14f1c:	bl	158ec <verify_monster@@Base+0x1348>
   14f20:	cmp	r0, #0
   14f24:	beq	14f6c <verify_monster@@Base+0x9c8>
   14f28:	mov	r0, r4
   14f2c:	bl	15954 <verify_monster@@Base+0x13b0>
   14f30:	mov	r4, r0
   14f34:	bl	159cc <verify_monster@@Base+0x1428>
   14f38:	cmp	r0, #0
   14f3c:	bne	14f60 <verify_monster@@Base+0x9bc>
   14f40:	mov	r0, r4
   14f44:	bl	15a34 <verify_monster@@Base+0x1490>
   14f48:	cmp	r0, #0
   14f4c:	bne	14f60 <verify_monster@@Base+0x9bc>
   14f50:	mov	r0, r4
   14f54:	bl	15a9c <verify_monster@@Base+0x14f8>
   14f58:	cmp	r0, #0
   14f5c:	beq	14f90 <verify_monster@@Base+0x9ec>
   14f60:	movw	r0, #22896	; 0x5970
   14f64:	movt	r0, #2
   14f68:	b	14644 <verify_monster@@Base+0xa0>
   14f6c:	movw	r0, #22864	; 0x5950
   14f70:	movt	r0, #2
   14f74:	b	14644 <verify_monster@@Base+0xa0>
   14f78:	movw	r0, #23136	; 0x5a60
   14f7c:	movt	r0, #2
   14f80:	b	14644 <verify_monster@@Base+0xa0>
   14f84:	movw	r0, #23024	; 0x59f0
   14f88:	movt	r0, #2
   14f8c:	b	14644 <verify_monster@@Base+0xa0>
   14f90:	mov	r0, #0
   14f94:	b	1464c <verify_monster@@Base+0xa8>
   14f98:	cmp	r0, #0
   14f9c:	vldreq	s0, [pc, #8]	; 14fac <verify_monster@@Base+0xa08>
   14fa0:	bxeq	lr
   14fa4:	add	r0, r0, #8
   14fa8:	b	1bcac <main@@Base+0x970>
   14fac:	andeq	r0, r0, r0
   14fb0:	vmov.i32	q8, #0	; 0x00000000
   14fb4:	vst1.64	{d16-d17}, [r0 :128]!
   14fb8:	vst1.64	{d16-d17}, [r0 :128]
   14fbc:	bx	lr
   14fc0:	push	{r4, r5, fp, lr}
   14fc4:	add	fp, sp, #8
   14fc8:	mov	r4, r1
   14fcc:	mov	r5, r0
   14fd0:	bl	1c70c <main@@Base+0x13d0>
   14fd4:	add	r0, r5, #4
   14fd8:	add	r1, r4, #4
   14fdc:	bl	1c70c <main@@Base+0x13d0>
   14fe0:	add	r0, r5, #8
   14fe4:	add	r1, r4, #8
   14fe8:	bl	1c70c <main@@Base+0x13d0>
   14fec:	add	r0, r5, #16
   14ff0:	add	r1, r4, #16
   14ff4:	bl	1c728 <main@@Base+0x13ec>
   14ff8:	ldrb	r0, [r4, #24]
   14ffc:	strb	r0, [r5, #24]
   15000:	add	r0, r5, #26
   15004:	add	r1, r4, #26
   15008:	pop	{r4, r5, fp, lr}
   1500c:	b	1c744 <main@@Base+0x1408>
   15010:	push	{r4, r5, fp, lr}
   15014:	add	fp, sp, #8
   15018:	cmp	r0, #0
   1501c:	beq	15070 <verify_monster@@Base+0xacc>
   15020:	mov	r4, r0
   15024:	bl	1b5d8 <main@@Base+0x29c>
   15028:	sub	r5, r4, r0
   1502c:	mov	r0, r5
   15030:	bl	1b5e0 <main@@Base+0x2a4>
   15034:	cmp	r0, #12
   15038:	bcc	15064 <verify_monster@@Base+0xac0>
   1503c:	add	r0, r5, #10
   15040:	bl	1b5e0 <main@@Base+0x2a4>
   15044:	cmp	r0, #0
   15048:	beq	15064 <verify_monster@@Base+0xac0>
   1504c:	add	r4, r4, r0
   15050:	mov	r0, r4
   15054:	bl	1b5cc <main@@Base+0x290>
   15058:	add	r0, r4, r0
   1505c:	add	r0, r0, #4
   15060:	pop	{r4, r5, fp, pc}
   15064:	movw	r0, #14796	; 0x39cc
   15068:	movt	r0, #2
   1506c:	b	15078 <verify_monster@@Base+0xad4>
   15070:	movw	r0, #12494	; 0x30ce
   15074:	movt	r0, #2
   15078:	movw	r1, #12532	; 0x30f4
   1507c:	movt	r1, #2
   15080:	movw	r3, #14715	; 0x397b
   15084:	movt	r3, #2
   15088:	movw	r2, #699	; 0x2bb
   1508c:	bl	12f88 <__assert_fail@plt>
   15090:	cmp	r0, #0
   15094:	moveq	r0, #0
   15098:	bxeq	lr
   1509c:	sub	r0, r0, #4
   150a0:	b	1b5cc <main@@Base+0x290>
   150a4:	push	{r4, r5, fp, lr}
   150a8:	add	fp, sp, #8
   150ac:	cmp	r0, #0
   150b0:	beq	150f4 <verify_monster@@Base+0xb50>
   150b4:	mov	r4, r0
   150b8:	bl	1b5d8 <main@@Base+0x29c>
   150bc:	sub	r5, r4, r0
   150c0:	mov	r0, r5
   150c4:	bl	1b5e0 <main@@Base+0x2a4>
   150c8:	cmp	r0, #18
   150cc:	bcc	150ec <verify_monster@@Base+0xb48>
   150d0:	add	r0, r5, #16
   150d4:	bl	1b5e0 <main@@Base+0x2a4>
   150d8:	cmp	r0, #0
   150dc:	beq	150ec <verify_monster@@Base+0xb48>
   150e0:	add	r0, r4, r0
   150e4:	pop	{r4, r5, fp, lr}
   150e8:	b	1c780 <main@@Base+0x1444>
   150ec:	mov	r0, #8
   150f0:	pop	{r4, r5, fp, pc}
   150f4:	movw	r0, #12494	; 0x30ce
   150f8:	movt	r0, #2
   150fc:	movw	r1, #12532	; 0x30f4
   15100:	movt	r1, #2
   15104:	movw	r3, #14829	; 0x39ed
   15108:	movt	r3, #2
   1510c:	movw	r2, #705	; 0x2c1
   15110:	bl	12f88 <__assert_fail@plt>
   15114:	cmp	r0, #8
   15118:	bhi	15138 <verify_monster@@Base+0xb94>
   1511c:	mov	r1, r0
   15120:	mov	r0, #1
   15124:	mov	r2, #1
   15128:	movw	r3, #262	; 0x106
   1512c:	tst	r3, r2, lsl r1
   15130:	moveq	r0, #0
   15134:	bx	lr
   15138:	mov	r0, #0
   1513c:	bx	lr
   15140:	mov	r1, #0
   15144:	cmp	r0, #5
   15148:	movwcc	r1, #1
   1514c:	mov	r0, r1
   15150:	bx	lr
   15154:	push	{r4, r5, r6, sl, fp, lr}
   15158:	add	fp, sp, #16
   1515c:	cmp	r0, #0
   15160:	beq	151b0 <verify_monster@@Base+0xc0c>
   15164:	mov	r4, r0
   15168:	bl	1b5d8 <main@@Base+0x29c>
   1516c:	sub	r6, r4, r0
   15170:	mov	r0, r6
   15174:	bl	1b5e0 <main@@Base+0x2a4>
   15178:	mov	r5, #0
   1517c:	cmp	r0, #16
   15180:	bcc	151a8 <verify_monster@@Base+0xc04>
   15184:	add	r0, r6, #14
   15188:	bl	1b5e0 <main@@Base+0x2a4>
   1518c:	cmp	r0, #0
   15190:	beq	151a8 <verify_monster@@Base+0xc04>
   15194:	add	r4, r4, r0
   15198:	mov	r0, r4
   1519c:	bl	1b5cc <main@@Base+0x290>
   151a0:	add	r0, r4, r0
   151a4:	add	r5, r0, #4
   151a8:	mov	r0, r5
   151ac:	pop	{r4, r5, r6, sl, fp, pc}
   151b0:	movw	r0, #12494	; 0x30ce
   151b4:	movt	r0, #2
   151b8:	movw	r1, #12532	; 0x30f4
   151bc:	movt	r1, #2
   151c0:	movw	r3, #14918	; 0x3a46
   151c4:	movt	r3, #2
   151c8:	movw	r2, #706	; 0x2c2
   151cc:	bl	12f88 <__assert_fail@plt>
   151d0:	b	1c78c <main@@Base+0x1450>
   151d4:	push	{r4, r5, fp, lr}
   151d8:	add	fp, sp, #8
   151dc:	mov	r4, r1
   151e0:	mov	r5, r0
   151e4:	bl	1c78c <main@@Base+0x1450>
   151e8:	cmp	r0, r4
   151ec:	bls	151fc <verify_monster@@Base+0xc58>
   151f0:	add	r0, r5, r4
   151f4:	pop	{r4, r5, fp, lr}
   151f8:	b	1bc7c <main@@Base+0x940>
   151fc:	movw	r0, #15007	; 0x3a9f
   15200:	movt	r0, #2
   15204:	movw	r1, #15062	; 0x3ad6
   15208:	movt	r1, #2
   1520c:	movw	r3, #15166	; 0x3b3e
   15210:	movt	r3, #2
   15214:	movw	r2, #395	; 0x18b
   15218:	bl	12f88 <__assert_fail@plt>
   1521c:	push	{r4, r5, fp, lr}
   15220:	add	fp, sp, #8
   15224:	cmp	r0, #0
   15228:	beq	1526c <verify_monster@@Base+0xcc8>
   1522c:	mov	r4, r0
   15230:	bl	1b5d8 <main@@Base+0x29c>
   15234:	sub	r5, r4, r0
   15238:	mov	r0, r5
   1523c:	bl	1b5e0 <main@@Base+0x2a4>
   15240:	cmp	r0, #8
   15244:	bcc	15264 <verify_monster@@Base+0xcc0>
   15248:	add	r0, r5, #6
   1524c:	bl	1b5e0 <main@@Base+0x2a4>
   15250:	cmp	r0, #0
   15254:	beq	15264 <verify_monster@@Base+0xcc0>
   15258:	add	r0, r4, r0
   1525c:	pop	{r4, r5, fp, lr}
   15260:	b	1b5e8 <main@@Base+0x2ac>
   15264:	mov	r0, #150	; 0x96
   15268:	pop	{r4, r5, fp, pc}
   1526c:	movw	r0, #12494	; 0x30ce
   15270:	movt	r0, #2
   15274:	movw	r1, #12532	; 0x30f4
   15278:	movt	r1, #2
   1527c:	movw	r3, #15232	; 0x3b80
   15280:	movt	r3, #2
   15284:	movw	r2, #698	; 0x2ba
   15288:	bl	12f88 <__assert_fail@plt>
   1528c:	push	{r4, sl, fp, lr}
   15290:	add	fp, sp, #8
   15294:	cmp	r0, #0
   15298:	beq	152d4 <verify_monster@@Base+0xd30>
   1529c:	mov	r4, r0
   152a0:	bl	1b5d8 <main@@Base+0x29c>
   152a4:	sub	r4, r4, r0
   152a8:	mov	r0, r4
   152ac:	bl	1b5e0 <main@@Base+0x2a4>
   152b0:	mov	r1, r0
   152b4:	mov	r0, #0
   152b8:	cmp	r1, #8
   152bc:	popcc	{r4, sl, fp, pc}
   152c0:	add	r0, r4, #6
   152c4:	bl	1b5e0 <main@@Base+0x2a4>
   152c8:	cmp	r0, #0
   152cc:	movwne	r0, #1
   152d0:	pop	{r4, sl, fp, pc}
   152d4:	movw	r0, #12494	; 0x30ce
   152d8:	movt	r0, #2
   152dc:	movw	r1, #12532	; 0x30f4
   152e0:	movt	r1, #2
   152e4:	movw	r3, #15300	; 0x3bc4
   152e8:	movt	r3, #2
   152ec:	movw	r2, #698	; 0x2ba
   152f0:	bl	12f88 <__assert_fail@plt>
   152f4:	push	{r4, r5, r6, sl, fp, lr}
   152f8:	add	fp, sp, #16
   152fc:	cmp	r0, #0
   15300:	beq	15350 <verify_monster@@Base+0xdac>
   15304:	mov	r4, r0
   15308:	bl	1b5d8 <main@@Base+0x29c>
   1530c:	sub	r6, r4, r0
   15310:	mov	r0, r6
   15314:	bl	1b5e0 <main@@Base+0x2a4>
   15318:	mov	r5, #0
   1531c:	cmp	r0, #24
   15320:	bcc	15348 <verify_monster@@Base+0xda4>
   15324:	add	r0, r6, #22
   15328:	bl	1b5e0 <main@@Base+0x2a4>
   1532c:	cmp	r0, #0
   15330:	beq	15348 <verify_monster@@Base+0xda4>
   15334:	add	r4, r4, r0
   15338:	mov	r0, r4
   1533c:	bl	1b5cc <main@@Base+0x290>
   15340:	add	r0, r4, r0
   15344:	add	r5, r0, #4
   15348:	mov	r0, r5
   1534c:	pop	{r4, r5, r6, sl, fp, pc}
   15350:	movw	r0, #12494	; 0x30ce
   15354:	movt	r0, #2
   15358:	movw	r1, #12532	; 0x30f4
   1535c:	movt	r1, #2
   15360:	movw	r3, #15375	; 0x3c0f
   15364:	movt	r3, #2
   15368:	movw	r2, #718	; 0x2ce
   1536c:	bl	12f88 <__assert_fail@plt>
   15370:	cmp	r0, #0
   15374:	moveq	r0, #0
   15378:	bxeq	lr
   1537c:	sub	r0, r0, #4
   15380:	b	1b5cc <main@@Base+0x290>
   15384:	push	{r4, r5, fp, lr}
   15388:	add	fp, sp, #8
   1538c:	mov	r4, r1
   15390:	mov	r5, r0
   15394:	bl	1c78c <main@@Base+0x1450>
   15398:	cmp	r0, r4
   1539c:	addhi	r0, r5, r4, lsl #2
   153a0:	pophi	{r4, r5, fp, pc}
   153a4:	movw	r0, #15007	; 0x3a9f
   153a8:	movt	r0, #2
   153ac:	movw	r1, #12532	; 0x30f4
   153b0:	movt	r1, #2
   153b4:	movw	r3, #15462	; 0x3c66
   153b8:	movt	r3, #2
   153bc:	mov	r2, #380	; 0x17c
   153c0:	bl	12f88 <__assert_fail@plt>
   153c4:	cmp	r0, #0
   153c8:	moveq	r0, #0
   153cc:	bxeq	lr
   153d0:	b	1b5e8 <main@@Base+0x2ac>
   153d4:	cmp	r0, #0
   153d8:	moveq	r0, #0
   153dc:	bxeq	lr
   153e0:	add	r0, r0, #2
   153e4:	b	1bc58 <main@@Base+0x91c>
   153e8:	push	{r4, r5, r6, sl, fp, lr}
   153ec:	add	fp, sp, #16
   153f0:	cmp	r0, #0
   153f4:	beq	15444 <verify_monster@@Base+0xea0>
   153f8:	mov	r4, r0
   153fc:	bl	1b5d8 <main@@Base+0x29c>
   15400:	sub	r6, r4, r0
   15404:	mov	r0, r6
   15408:	bl	1b5e0 <main@@Base+0x2a4>
   1540c:	mov	r5, #0
   15410:	cmp	r0, #28
   15414:	bcc	1543c <verify_monster@@Base+0xe98>
   15418:	add	r0, r6, #26
   1541c:	bl	1b5e0 <main@@Base+0x2a4>
   15420:	cmp	r0, #0
   15424:	beq	1543c <verify_monster@@Base+0xe98>
   15428:	add	r4, r4, r0
   1542c:	mov	r0, r4
   15430:	bl	1b5cc <main@@Base+0x290>
   15434:	add	r0, r4, r0
   15438:	add	r5, r0, #4
   1543c:	mov	r0, r5
   15440:	pop	{r4, r5, r6, sl, fp, pc}
   15444:	movw	r0, #12494	; 0x30ce
   15448:	movt	r0, #2
   1544c:	movw	r1, #12532	; 0x30f4
   15450:	movt	r1, #2
   15454:	movw	r3, #15553	; 0x3cc1
   15458:	movt	r3, #2
   1545c:	movw	r2, #711	; 0x2c7
   15460:	bl	12f88 <__assert_fail@plt>
   15464:	cmp	r0, #0
   15468:	moveq	r0, #0
   1546c:	bxeq	lr
   15470:	sub	r0, r0, #4
   15474:	b	1b5cc <main@@Base+0x290>
   15478:	push	{r4, r5, fp, lr}
   1547c:	add	fp, sp, #8
   15480:	mov	r4, r1
   15484:	mov	r5, r0
   15488:	bl	1c78c <main@@Base+0x1450>
   1548c:	cmp	r0, r4
   15490:	bls	154a8 <verify_monster@@Base+0xf04>
   15494:	add	r4, r5, r4, lsl #2
   15498:	mov	r0, r4
   1549c:	bl	1b5cc <main@@Base+0x290>
   154a0:	add	r0, r4, r0
   154a4:	pop	{r4, r5, fp, pc}
   154a8:	movw	r0, #15007	; 0x3a9f
   154ac:	movt	r0, #2
   154b0:	movw	r1, #12532	; 0x30f4
   154b4:	movt	r1, #2
   154b8:	movw	r3, #15655	; 0x3d27
   154bc:	movt	r3, #2
   154c0:	movw	r2, #693	; 0x2b5
   154c4:	bl	12f88 <__assert_fail@plt>
   154c8:	push	{r4, r5, r6, sl, fp, lr}
   154cc:	add	fp, sp, #16
   154d0:	cmp	r0, #0
   154d4:	beq	15524 <verify_monster@@Base+0xf80>
   154d8:	mov	r4, r0
   154dc:	bl	1b5d8 <main@@Base+0x29c>
   154e0:	sub	r6, r4, r0
   154e4:	mov	r0, r6
   154e8:	bl	1b5e0 <main@@Base+0x2a4>
   154ec:	mov	r5, #0
   154f0:	cmp	r0, #26
   154f4:	bcc	1551c <verify_monster@@Base+0xf78>
   154f8:	add	r0, r6, #24
   154fc:	bl	1b5e0 <main@@Base+0x2a4>
   15500:	cmp	r0, #0
   15504:	beq	1551c <verify_monster@@Base+0xf78>
   15508:	add	r4, r4, r0
   1550c:	mov	r0, r4
   15510:	bl	1b5cc <main@@Base+0x290>
   15514:	add	r0, r4, r0
   15518:	add	r5, r0, #4
   1551c:	mov	r0, r5
   15520:	pop	{r4, r5, r6, sl, fp, pc}
   15524:	movw	r0, #12494	; 0x30ce
   15528:	movt	r0, #2
   1552c:	movw	r1, #12532	; 0x30f4
   15530:	movt	r1, #2
   15534:	movw	r3, #15754	; 0x3d8a
   15538:	movt	r3, #2
   1553c:	mov	r2, #712	; 0x2c8
   15540:	bl	12f88 <__assert_fail@plt>
   15544:	cmp	r0, #0
   15548:	moveq	r0, #0
   1554c:	bxeq	lr
   15550:	sub	r0, r0, #4
   15554:	b	1b5cc <main@@Base+0x290>
   15558:	push	{r4, r5, fp, lr}
   1555c:	add	fp, sp, #8
   15560:	mov	r4, r1
   15564:	mov	r5, r0
   15568:	bl	1c78c <main@@Base+0x1450>
   1556c:	cmp	r0, r4
   15570:	bls	1558c <verify_monster@@Base+0xfe8>
   15574:	add	r4, r5, r4, lsl #2
   15578:	mov	r0, r4
   1557c:	bl	1b5cc <main@@Base+0x290>
   15580:	add	r0, r4, r0
   15584:	add	r0, r0, #4
   15588:	pop	{r4, r5, fp, pc}
   1558c:	movw	r0, #15007	; 0x3a9f
   15590:	movt	r0, #2
   15594:	movw	r1, #15062	; 0x3ad6
   15598:	movt	r1, #2
   1559c:	movw	r3, #15852	; 0x3dec
   155a0:	movt	r3, #2
   155a4:	mov	r2, #108	; 0x6c
   155a8:	bl	12f88 <__assert_fail@plt>
   155ac:	push	{r4, sl, fp, lr}
   155b0:	add	fp, sp, #8
   155b4:	cmp	r0, #0
   155b8:	beq	155f4 <verify_monster@@Base+0x1050>
   155bc:	mov	r4, r0
   155c0:	bl	1b5d8 <main@@Base+0x29c>
   155c4:	sub	r4, r4, r0
   155c8:	mov	r0, r4
   155cc:	bl	1b5e0 <main@@Base+0x2a4>
   155d0:	mov	r1, r0
   155d4:	mov	r0, #0
   155d8:	cmp	r1, #54	; 0x36
   155dc:	popcc	{r4, sl, fp, pc}
   155e0:	add	r0, r4, #52	; 0x34
   155e4:	bl	1b5e0 <main@@Base+0x2a4>
   155e8:	cmp	r0, #0
   155ec:	movwne	r0, #1
   155f0:	pop	{r4, sl, fp, pc}
   155f4:	movw	r0, #12494	; 0x30ce
   155f8:	movt	r0, #2
   155fc:	movw	r1, #12532	; 0x30f4
   15600:	movt	r1, #2
   15604:	movw	r3, #15933	; 0x3e3d
   15608:	movt	r3, #2
   1560c:	movw	r2, #714	; 0x2ca
   15610:	bl	12f88 <__assert_fail@plt>
   15614:	push	{r4, r5, r6, sl, fp, lr}
   15618:	add	fp, sp, #16
   1561c:	cmp	r0, #0
   15620:	beq	15670 <verify_monster@@Base+0x10cc>
   15624:	mov	r4, r0
   15628:	bl	1b5d8 <main@@Base+0x29c>
   1562c:	sub	r6, r4, r0
   15630:	mov	r0, r6
   15634:	bl	1b5e0 <main@@Base+0x2a4>
   15638:	mov	r5, #0
   1563c:	cmp	r0, #54	; 0x36
   15640:	bcc	15668 <verify_monster@@Base+0x10c4>
   15644:	add	r0, r6, #52	; 0x34
   15648:	bl	1b5e0 <main@@Base+0x2a4>
   1564c:	cmp	r0, #0
   15650:	beq	15668 <verify_monster@@Base+0x10c4>
   15654:	add	r4, r4, r0
   15658:	mov	r0, r4
   1565c:	bl	1b5cc <main@@Base+0x290>
   15660:	add	r0, r4, r0
   15664:	add	r5, r0, #4
   15668:	mov	r0, r5
   1566c:	pop	{r4, r5, r6, sl, fp, pc}
   15670:	movw	r0, #12494	; 0x30ce
   15674:	movt	r0, #2
   15678:	movw	r1, #12532	; 0x30f4
   1567c:	movt	r1, #2
   15680:	movw	r3, #16020	; 0x3e94
   15684:	movt	r3, #2
   15688:	movw	r2, #714	; 0x2ca
   1568c:	bl	12f88 <__assert_fail@plt>
   15690:	b	1c78c <main@@Base+0x1450>
   15694:	push	{r4, r5, fp, lr}
   15698:	add	fp, sp, #8
   1569c:	mov	r4, r1
   156a0:	mov	r5, r0
   156a4:	bl	1c78c <main@@Base+0x1450>
   156a8:	cmp	r0, r4
   156ac:	bls	156bc <verify_monster@@Base+0x1118>
   156b0:	add	r0, r5, r4
   156b4:	pop	{r4, r5, fp, lr}
   156b8:	b	1c7a0 <main@@Base+0x1464>
   156bc:	movw	r0, #15007	; 0x3a9f
   156c0:	movt	r0, #2
   156c4:	movw	r1, #15062	; 0x3ad6
   156c8:	movt	r1, #2
   156cc:	movw	r3, #16116	; 0x3ef4
   156d0:	movt	r3, #2
   156d4:	movw	r2, #394	; 0x18a
   156d8:	bl	12f88 <__assert_fail@plt>
   156dc:	push	{r4, r5, fp, lr}
   156e0:	add	fp, sp, #8
   156e4:	cmp	r0, #0
   156e8:	beq	1572c <verify_monster@@Base+0x1188>
   156ec:	mov	r4, r0
   156f0:	bl	1b5d8 <main@@Base+0x29c>
   156f4:	sub	r5, r4, r0
   156f8:	mov	r0, r5
   156fc:	bl	1b5e0 <main@@Base+0x2a4>
   15700:	cmp	r0, #20
   15704:	bcc	15724 <verify_monster@@Base+0x1180>
   15708:	add	r0, r5, #18
   1570c:	bl	1b5e0 <main@@Base+0x2a4>
   15710:	cmp	r0, #0
   15714:	beq	15724 <verify_monster@@Base+0x1180>
   15718:	add	r0, r4, r0
   1571c:	pop	{r4, r5, fp, lr}
   15720:	b	1c7ac <main@@Base+0x1470>
   15724:	mov	r0, #0
   15728:	pop	{r4, r5, fp, pc}
   1572c:	movw	r0, #12494	; 0x30ce
   15730:	movt	r0, #2
   15734:	movw	r1, #12532	; 0x30f4
   15738:	movt	r1, #2
   1573c:	movw	r3, #16191	; 0x3f3f
   15740:	movt	r3, #2
   15744:	movw	r2, #717	; 0x2cd
   15748:	bl	12f88 <__assert_fail@plt>
   1574c:	push	{r4, r5, r6, sl, fp, lr}
   15750:	add	fp, sp, #16
   15754:	cmp	r0, #0
   15758:	beq	157a4 <verify_monster@@Base+0x1200>
   1575c:	mov	r4, r0
   15760:	bl	1b5d8 <main@@Base+0x29c>
   15764:	sub	r6, r4, r0
   15768:	mov	r0, r6
   1576c:	bl	1b5e0 <main@@Base+0x2a4>
   15770:	mov	r5, #0
   15774:	cmp	r0, #22
   15778:	bcc	1579c <verify_monster@@Base+0x11f8>
   1577c:	add	r0, r6, #20
   15780:	bl	1b5e0 <main@@Base+0x2a4>
   15784:	cmp	r0, #0
   15788:	beq	1579c <verify_monster@@Base+0x11f8>
   1578c:	add	r4, r4, r0
   15790:	mov	r0, r4
   15794:	bl	1b5cc <main@@Base+0x290>
   15798:	add	r5, r4, r0
   1579c:	mov	r0, r5
   157a0:	pop	{r4, r5, r6, sl, fp, pc}
   157a4:	movw	r0, #12494	; 0x30ce
   157a8:	movt	r0, #2
   157ac:	movw	r1, #12532	; 0x30f4
   157b0:	movt	r1, #2
   157b4:	movw	r3, #16288	; 0x3fa0
   157b8:	movt	r3, #2
   157bc:	movw	r2, #717	; 0x2cd
   157c0:	bl	12f88 <__assert_fail@plt>
   157c4:	push	{r4, r5, r6, sl, fp, lr}
   157c8:	add	fp, sp, #16
   157cc:	cmp	r0, #0
   157d0:	beq	1581c <verify_monster@@Base+0x1278>
   157d4:	mov	r4, r0
   157d8:	bl	1b5d8 <main@@Base+0x29c>
   157dc:	sub	r6, r4, r0
   157e0:	mov	r0, r6
   157e4:	bl	1b5e0 <main@@Base+0x2a4>
   157e8:	mov	r5, #0
   157ec:	cmp	r0, #30
   157f0:	bcc	15814 <verify_monster@@Base+0x1270>
   157f4:	add	r0, r6, #28
   157f8:	bl	1b5e0 <main@@Base+0x2a4>
   157fc:	cmp	r0, #0
   15800:	beq	15814 <verify_monster@@Base+0x1270>
   15804:	add	r4, r4, r0
   15808:	mov	r0, r4
   1580c:	bl	1b5cc <main@@Base+0x290>
   15810:	add	r5, r4, r0
   15814:	mov	r0, r5
   15818:	pop	{r4, r5, r6, sl, fp, pc}
   1581c:	movw	r0, #12494	; 0x30ce
   15820:	movt	r0, #2
   15824:	movw	r1, #12532	; 0x30f4
   15828:	movt	r1, #2
   1582c:	movw	r3, #16370	; 0x3ff2
   15830:	movt	r3, #2
   15834:	mov	r2, #716	; 0x2cc
   15838:	bl	12f88 <__assert_fail@plt>
   1583c:	push	{r4, r5, fp, lr}
   15840:	add	fp, sp, #8
   15844:	mov	r5, r1
   15848:	mov	r4, r0
   1584c:	mov	r0, #0
   15850:	str	r0, [r4]
   15854:	str	r0, [r4, #4]
   15858:	mov	r0, r1
   1585c:	bl	156dc <verify_monster@@Base+0x1138>
   15860:	strb	r0, [r4]
   15864:	cmp	r0, #0
   15868:	popeq	{r4, r5, fp, pc}
   1586c:	mov	r0, r5
   15870:	bl	1574c <verify_monster@@Base+0x11a8>
   15874:	str	r0, [r4, #4]
   15878:	pop	{r4, r5, fp, pc}
   1587c:	push	{r4, r5, fp, lr}
   15880:	add	fp, sp, #8
   15884:	cmp	r0, #0
   15888:	beq	158cc <verify_monster@@Base+0x1328>
   1588c:	mov	r4, r0
   15890:	bl	1b5d8 <main@@Base+0x29c>
   15894:	sub	r5, r4, r0
   15898:	mov	r0, r5
   1589c:	bl	1b5e0 <main@@Base+0x2a4>
   158a0:	cmp	r0, #36	; 0x24
   158a4:	bcc	158c4 <verify_monster@@Base+0x1320>
   158a8:	add	r0, r5, #34	; 0x22
   158ac:	bl	1b5e0 <main@@Base+0x2a4>
   158b0:	cmp	r0, #0
   158b4:	beq	158c4 <verify_monster@@Base+0x1320>
   158b8:	add	r0, r4, r0
   158bc:	pop	{r4, r5, fp, lr}
   158c0:	b	1c7a0 <main@@Base+0x1464>
   158c4:	mov	r0, #1
   158c8:	pop	{r4, r5, fp, pc}
   158cc:	movw	r0, #12494	; 0x30ce
   158d0:	movt	r0, #2
   158d4:	movw	r1, #12532	; 0x30f4
   158d8:	movt	r1, #2
   158dc:	movw	r3, #16462	; 0x404e
   158e0:	movt	r3, #2
   158e4:	movw	r2, #723	; 0x2d3
   158e8:	bl	12f88 <__assert_fail@plt>
   158ec:	push	{r4, sl, fp, lr}
   158f0:	add	fp, sp, #8
   158f4:	cmp	r0, #0
   158f8:	beq	15934 <verify_monster@@Base+0x1390>
   158fc:	mov	r4, r0
   15900:	bl	1b5d8 <main@@Base+0x29c>
   15904:	sub	r4, r4, r0
   15908:	mov	r0, r4
   1590c:	bl	1b5e0 <main@@Base+0x2a4>
   15910:	mov	r1, r0
   15914:	mov	r0, #0
   15918:	cmp	r1, #34	; 0x22
   1591c:	popcc	{r4, sl, fp, pc}
   15920:	add	r0, r4, #32
   15924:	bl	1b5e0 <main@@Base+0x2a4>
   15928:	cmp	r0, #0
   1592c:	movwne	r0, #1
   15930:	pop	{r4, sl, fp, pc}
   15934:	movw	r0, #12494	; 0x30ce
   15938:	movt	r0, #2
   1593c:	movw	r1, #12532	; 0x30f4
   15940:	movt	r1, #2
   15944:	movw	r3, #16545	; 0x40a1
   15948:	movt	r3, #2
   1594c:	movw	r2, #722	; 0x2d2
   15950:	bl	12f88 <__assert_fail@plt>
   15954:	push	{r4, r5, r6, sl, fp, lr}
   15958:	add	fp, sp, #16
   1595c:	cmp	r0, #0
   15960:	beq	159ac <verify_monster@@Base+0x1408>
   15964:	mov	r4, r0
   15968:	bl	1b5d8 <main@@Base+0x29c>
   1596c:	sub	r6, r4, r0
   15970:	mov	r0, r6
   15974:	bl	1b5e0 <main@@Base+0x2a4>
   15978:	mov	r5, #0
   1597c:	cmp	r0, #34	; 0x22
   15980:	bcc	159a4 <verify_monster@@Base+0x1400>
   15984:	add	r0, r6, #32
   15988:	bl	1b5e0 <main@@Base+0x2a4>
   1598c:	cmp	r0, #0
   15990:	beq	159a4 <verify_monster@@Base+0x1400>
   15994:	add	r4, r4, r0
   15998:	mov	r0, r4
   1599c:	bl	1b5cc <main@@Base+0x290>
   159a0:	add	r5, r4, r0
   159a4:	mov	r0, r5
   159a8:	pop	{r4, r5, r6, sl, fp, pc}
   159ac:	movw	r0, #12494	; 0x30ce
   159b0:	movt	r0, #2
   159b4:	movw	r1, #12532	; 0x30f4
   159b8:	movt	r1, #2
   159bc:	movw	r3, #16625	; 0x40f1
   159c0:	movt	r3, #2
   159c4:	movw	r2, #722	; 0x2d2
   159c8:	bl	12f88 <__assert_fail@plt>
   159cc:	push	{r4, sl, fp, lr}
   159d0:	add	fp, sp, #8
   159d4:	cmp	r0, #0
   159d8:	beq	15a14 <verify_monster@@Base+0x1470>
   159dc:	mov	r4, r0
   159e0:	bl	1b5d8 <main@@Base+0x29c>
   159e4:	sub	r4, r4, r0
   159e8:	mov	r0, r4
   159ec:	bl	1b5e0 <main@@Base+0x2a4>
   159f0:	mov	r1, r0
   159f4:	mov	r0, #0
   159f8:	cmp	r1, #6
   159fc:	popcc	{r4, sl, fp, pc}
   15a00:	add	r0, r4, #4
   15a04:	bl	1b5e0 <main@@Base+0x2a4>
   15a08:	cmp	r0, #0
   15a0c:	movwne	r0, #1
   15a10:	pop	{r4, sl, fp, pc}
   15a14:	movw	r0, #12494	; 0x30ce
   15a18:	movt	r0, #2
   15a1c:	movw	r1, #12532	; 0x30f4
   15a20:	movt	r1, #2
   15a24:	movw	r3, #16718	; 0x414e
   15a28:	movt	r3, #2
   15a2c:	movw	r2, #607	; 0x25f
   15a30:	bl	12f88 <__assert_fail@plt>
   15a34:	push	{r4, sl, fp, lr}
   15a38:	add	fp, sp, #8
   15a3c:	cmp	r0, #0
   15a40:	beq	15a7c <verify_monster@@Base+0x14d8>
   15a44:	mov	r4, r0
   15a48:	bl	1b5d8 <main@@Base+0x29c>
   15a4c:	sub	r4, r4, r0
   15a50:	mov	r0, r4
   15a54:	bl	1b5e0 <main@@Base+0x2a4>
   15a58:	mov	r1, r0
   15a5c:	mov	r0, #0
   15a60:	cmp	r1, #8
   15a64:	popcc	{r4, sl, fp, pc}
   15a68:	add	r0, r4, #6
   15a6c:	bl	1b5e0 <main@@Base+0x2a4>
   15a70:	cmp	r0, #0
   15a74:	movwne	r0, #1
   15a78:	pop	{r4, sl, fp, pc}
   15a7c:	movw	r0, #12494	; 0x30ce
   15a80:	movt	r0, #2
   15a84:	movw	r1, #12532	; 0x30f4
   15a88:	movt	r1, #2
   15a8c:	movw	r3, #16785	; 0x4191
   15a90:	movt	r3, #2
   15a94:	mov	r2, #608	; 0x260
   15a98:	bl	12f88 <__assert_fail@plt>
   15a9c:	push	{r4, sl, fp, lr}
   15aa0:	add	fp, sp, #8
   15aa4:	cmp	r0, #0
   15aa8:	beq	15ae4 <verify_monster@@Base+0x1540>
   15aac:	mov	r4, r0
   15ab0:	bl	1b5d8 <main@@Base+0x29c>
   15ab4:	sub	r4, r4, r0
   15ab8:	mov	r0, r4
   15abc:	bl	1b5e0 <main@@Base+0x2a4>
   15ac0:	mov	r1, r0
   15ac4:	mov	r0, #0
   15ac8:	cmp	r1, #10
   15acc:	popcc	{r4, sl, fp, pc}
   15ad0:	add	r0, r4, #8
   15ad4:	bl	1b5e0 <main@@Base+0x2a4>
   15ad8:	cmp	r0, #0
   15adc:	movwne	r0, #1
   15ae0:	pop	{r4, sl, fp, pc}
   15ae4:	movw	r0, #12494	; 0x30ce
   15ae8:	movt	r0, #2
   15aec:	movw	r1, #12532	; 0x30f4
   15af0:	movt	r1, #2
   15af4:	movw	r3, #16853	; 0x41d5
   15af8:	movt	r3, #2
   15afc:	movw	r2, #609	; 0x261
   15b00:	bl	12f88 <__assert_fail@plt>

00015b04 <gen_monster@@Base>:
   15b04:	push	{r4, r5, r6, sl, fp, lr}
   15b08:	add	fp, sp, #16
   15b0c:	sub	sp, sp, #72	; 0x48
   15b10:	mov	r5, r1
   15b14:	mov	r4, r0
   15b18:	movw	r0, #20984	; 0x51f8
   15b1c:	movt	r0, #2
   15b20:	vldr	d16, [r0]
   15b24:	movw	r0, #2312	; 0x908
   15b28:	strh	r0, [fp, #-24]	; 0xffffffe8
   15b2c:	vstr	d16, [fp, #-32]	; 0xffffffe0
   15b30:	movw	r0, #256	; 0x100
   15b34:	movt	r0, #1
   15b38:	str	r0, [sp, #28]
   15b3c:	mov	r0, r4
   15b40:	bl	1db08 <flatcc_builder_reset@@Base>
   15b44:	mov	r0, r4
   15b48:	cmp	r5, #0
   15b4c:	beq	15b58 <gen_monster@@Base+0x54>
   15b50:	bl	15fac <gen_monster@@Base+0x4a8>
   15b54:	b	15b5c <gen_monster@@Base+0x58>
   15b58:	bl	15fd0 <gen_monster@@Base+0x4cc>
   15b5c:	mov	r5, #80	; 0x50
   15b60:	mov	r0, r4
   15b64:	mov	r1, #80	; 0x50
   15b68:	bl	15ffc <gen_monster@@Base+0x4f8>
   15b6c:	mov	r0, r4
   15b70:	bl	16038 <gen_monster@@Base+0x534>
   15b74:	mov	r1, #1065353216	; 0x3f800000
   15b78:	mov	r2, #1073741824	; 0x40000000
   15b7c:	movw	r3, #52429	; 0xcccd
   15b80:	movt	r3, #49228	; 0xc04c
   15b84:	stm	r0, {r1, r2, r3}
   15b88:	movw	r1, #9185	; 0x23e1
   15b8c:	movt	r1, #2
   15b90:	mov	r0, r4
   15b94:	bl	13d44 <test_empty_monster@@Base+0x11c>
   15b98:	mov	r0, r4
   15b9c:	mov	r1, #2
   15ba0:	bl	16048 <gen_monster@@Base+0x544>
   15ba4:	sub	r1, fp, #32
   15ba8:	mov	r0, r4
   15bac:	mov	r2, #10
   15bb0:	bl	16084 <gen_monster@@Base+0x580>
   15bb4:	mov	r0, r4
   15bb8:	bl	160a4 <gen_monster@@Base+0x5a0>
   15bbc:	mov	r0, r4
   15bc0:	mov	r1, #1
   15bc4:	bl	160a8 <gen_monster@@Base+0x5a4>
   15bc8:	mov	r1, #16
   15bcc:	strh	r1, [r0]
   15bd0:	mov	r1, #32
   15bd4:	strb	r1, [r0, #2]
   15bd8:	mov	r0, r4
   15bdc:	mov	r1, #2
   15be0:	bl	160a8 <gen_monster@@Base+0x5a4>
   15be4:	mov	r1, #48	; 0x30
   15be8:	strh	r1, [r0]
   15bec:	mov	r1, #64	; 0x40
   15bf0:	strb	r1, [r0, #2]
   15bf4:	strh	r5, [r0, #4]
   15bf8:	mov	r1, #96	; 0x60
   15bfc:	strb	r1, [r0, #6]
   15c00:	mov	r0, r4
   15c04:	bl	160ac <gen_monster@@Base+0x5a8>
   15c08:	mov	r0, #145	; 0x91
   15c0c:	strb	r0, [fp, #-34]	; 0xffffffde
   15c10:	mov	r0, #400	; 0x190
   15c14:	strh	r0, [fp, #-36]	; 0xffffffdc
   15c18:	sub	r5, fp, #36	; 0x24
   15c1c:	mov	r0, r4
   15c20:	mov	r1, r5
   15c24:	bl	160cc <gen_monster@@Base+0x5c8>
   15c28:	mov	r0, r4
   15c2c:	mov	r1, r5
   15c30:	bl	160cc <gen_monster@@Base+0x5c8>
   15c34:	mov	r0, r4
   15c38:	mov	r1, r5
   15c3c:	bl	160f0 <gen_monster@@Base+0x5ec>
   15c40:	mov	r0, r4
   15c44:	bl	16114 <gen_monster@@Base+0x610>
   15c48:	cmp	r0, #7
   15c4c:	bne	15f2c <gen_monster@@Base+0x428>
   15c50:	mov	r0, r4
   15c54:	bl	16118 <gen_monster@@Base+0x614>
   15c58:	mov	r0, r4
   15c5c:	bl	16114 <gen_monster@@Base+0x610>
   15c60:	cmp	r0, #5
   15c64:	bne	15f4c <gen_monster@@Base+0x448>
   15c68:	mov	r0, r4
   15c6c:	bl	16120 <gen_monster@@Base+0x61c>
   15c70:	ldrh	r1, [r0, #16]
   15c74:	add	r1, r1, #1
   15c78:	strh	r1, [r0, #16]
   15c7c:	mov	r0, r4
   15c80:	bl	16124 <gen_monster@@Base+0x620>
   15c84:	mov	r0, r4
   15c88:	bl	13d3c <test_empty_monster@@Base+0x114>
   15c8c:	movw	r1, #9746	; 0x2612
   15c90:	movt	r1, #2
   15c94:	mov	r0, r4
   15c98:	mov	r2, #7
   15c9c:	bl	16144 <gen_monster@@Base+0x640>
   15ca0:	mov	r1, r0
   15ca4:	mov	r0, r4
   15ca8:	bl	16148 <gen_monster@@Base+0x644>
   15cac:	mov	r0, r4
   15cb0:	bl	13d64 <test_empty_monster@@Base+0x13c>
   15cb4:	mov	r5, r0
   15cb8:	mov	r0, r4
   15cbc:	bl	16170 <gen_monster@@Base+0x66c>
   15cc0:	mov	r0, r4
   15cc4:	mov	r1, #2
   15cc8:	bl	16174 <gen_monster@@Base+0x670>
   15ccc:	str	r5, [r0]
   15cd0:	str	r5, [r0, #4]
   15cd4:	mov	r0, r4
   15cd8:	bl	16178 <gen_monster@@Base+0x674>
   15cdc:	movw	r1, #9788	; 0x263c
   15ce0:	movt	r1, #2
   15ce4:	mov	r0, r4
   15ce8:	mov	r2, #30
   15cec:	bl	1617c <gen_monster@@Base+0x678>
   15cf0:	mov	r0, r4
   15cf4:	bl	1619c <gen_monster@@Base+0x698>
   15cf8:	ldr	r6, [r0]
   15cfc:	mov	r0, r4
   15d00:	mov	r1, #3
   15d04:	bl	16174 <gen_monster@@Base+0x670>
   15d08:	stm	r0, {r5, r6}
   15d0c:	mov	r0, r4
   15d10:	bl	161bc <gen_monster@@Base+0x6b8>
   15d14:	mov	r0, r4
   15d18:	bl	161c4 <gen_monster@@Base+0x6c0>
   15d1c:	cmp	r0, #5
   15d20:	bne	15f6c <gen_monster@@Base+0x468>
   15d24:	mov	r0, r4
   15d28:	bl	16178 <gen_monster@@Base+0x674>
   15d2c:	movw	r1, #10268	; 0x281c
   15d30:	movt	r1, #2
   15d34:	mov	r0, r4
   15d38:	mov	r2, #8
   15d3c:	bl	1617c <gen_monster@@Base+0x678>
   15d40:	mov	r0, r4
   15d44:	bl	1619c <gen_monster@@Base+0x698>
   15d48:	ldr	r0, [r0]
   15d4c:	str	r0, [sp, #44]	; 0x2c
   15d50:	mov	r0, r4
   15d54:	bl	161c4 <gen_monster@@Base+0x6c0>
   15d58:	cmp	r0, #6
   15d5c:	bne	15f8c <gen_monster@@Base+0x488>
   15d60:	mov	r0, r4
   15d64:	bl	161c8 <gen_monster@@Base+0x6c4>
   15d68:	ldr	r1, [r0, #8]
   15d6c:	ldr	r2, [r0, #20]
   15d70:	str	r1, [sp, #48]	; 0x30
   15d74:	str	r2, [r0]
   15d78:	str	r5, [r0, #20]
   15d7c:	add	r1, sp, #44	; 0x2c
   15d80:	mov	r0, r4
   15d84:	bl	161cc <gen_monster@@Base+0x6c8>
   15d88:	mov	r0, r4
   15d8c:	bl	161d4 <gen_monster@@Base+0x6d0>
   15d90:	movw	r1, #10018	; 0x2722
   15d94:	movt	r1, #2
   15d98:	mov	r0, r4
   15d9c:	bl	161f4 <gen_monster@@Base+0x6f0>
   15da0:	str	r0, [sp, #32]
   15da4:	movw	r1, #20976	; 0x51f0
   15da8:	movt	r1, #2
   15dac:	mov	r0, r4
   15db0:	mov	r2, #2
   15db4:	bl	16144 <gen_monster@@Base+0x640>
   15db8:	str	r0, [sp, #36]	; 0x24
   15dbc:	movw	r1, #10050	; 0x2742
   15dc0:	movt	r1, #2
   15dc4:	mov	r0, r4
   15dc8:	bl	161f4 <gen_monster@@Base+0x6f0>
   15dcc:	str	r0, [sp, #40]	; 0x28
   15dd0:	add	r1, sp, #32
   15dd4:	mov	r0, r4
   15dd8:	bl	161f8 <gen_monster@@Base+0x6f4>
   15ddc:	mov	r0, r4
   15de0:	bl	1621c <gen_monster@@Base+0x718>
   15de4:	add	r6, sp, #28
   15de8:	mov	r0, r4
   15dec:	mov	r1, r6
   15df0:	mov	r2, #1
   15df4:	bl	16220 <gen_monster@@Base+0x71c>
   15df8:	orr	r1, r6, #1
   15dfc:	mov	r0, r4
   15e00:	mov	r2, #3
   15e04:	bl	16220 <gen_monster@@Base+0x71c>
   15e08:	mov	r0, r4
   15e0c:	bl	16224 <gen_monster@@Base+0x720>
   15e10:	add	r0, sp, #20
   15e14:	mov	r1, r5
   15e18:	bl	162b0 <gen_monster@@Base+0x7ac>
   15e1c:	ldr	r1, [sp, #20]
   15e20:	ldr	r2, [sp, #24]
   15e24:	mov	r0, r4
   15e28:	bl	16244 <gen_monster@@Base+0x740>
   15e2c:	mov	r0, r4
   15e30:	bl	162c0 <gen_monster@@Base+0x7bc>
   15e34:	movw	r1, #10088	; 0x2768
   15e38:	movt	r1, #2
   15e3c:	mov	r0, r4
   15e40:	bl	13d44 <test_empty_monster@@Base+0x11c>
   15e44:	mov	r0, r4
   15e48:	bl	16170 <gen_monster@@Base+0x66c>
   15e4c:	mov	r0, r4
   15e50:	bl	162c4 <gen_monster@@Base+0x7c0>
   15e54:	add	r0, sp, #12
   15e58:	mov	r1, r5
   15e5c:	bl	162b0 <gen_monster@@Base+0x7ac>
   15e60:	ldr	r1, [sp, #12]
   15e64:	ldr	r2, [sp, #16]
   15e68:	mov	r0, r4
   15e6c:	bl	16244 <gen_monster@@Base+0x740>
   15e70:	movw	r6, #10347	; 0x286b
   15e74:	movt	r6, #2
   15e78:	mov	r0, r4
   15e7c:	mov	r1, r6
   15e80:	bl	13d44 <test_empty_monster@@Base+0x11c>
   15e84:	mov	r0, r4
   15e88:	bl	1619c <gen_monster@@Base+0x698>
   15e8c:	mov	r0, r4
   15e90:	bl	16178 <gen_monster@@Base+0x674>
   15e94:	mov	r0, r4
   15e98:	mov	r1, r5
   15e9c:	bl	162c8 <gen_monster@@Base+0x7c4>
   15ea0:	mov	r0, r4
   15ea4:	mov	r1, r6
   15ea8:	bl	13d44 <test_empty_monster@@Base+0x11c>
   15eac:	mov	r0, r4
   15eb0:	bl	162f4 <gen_monster@@Base+0x7f0>
   15eb4:	mov	r0, r4
   15eb8:	bl	16178 <gen_monster@@Base+0x674>
   15ebc:	add	r0, sp, #4
   15ec0:	mov	r1, r5
   15ec4:	bl	162b0 <gen_monster@@Base+0x7ac>
   15ec8:	ldmib	sp, {r1, r2}
   15ecc:	mov	r0, r4
   15ed0:	bl	16314 <gen_monster@@Base+0x810>
   15ed4:	mov	r0, r4
   15ed8:	mov	r1, r6
   15edc:	bl	13d44 <test_empty_monster@@Base+0x11c>
   15ee0:	mov	r0, r4
   15ee4:	bl	1633c <gen_monster@@Base+0x838>
   15ee8:	mov	r0, r4
   15eec:	bl	1619c <gen_monster@@Base+0x698>
   15ef0:	mov	r0, r4
   15ef4:	bl	161d4 <gen_monster@@Base+0x6d0>
   15ef8:	mov	r0, r4
   15efc:	bl	16364 <gen_monster@@Base+0x860>
   15f00:	mov	r0, r4
   15f04:	bl	16384 <gen_monster@@Base+0x880>
   15f08:	mov	r0, r4
   15f0c:	bl	163ac <gen_monster@@Base+0x8a8>
   15f10:	mov	r0, r4
   15f14:	bl	163b0 <gen_monster@@Base+0x8ac>
   15f18:	mov	r0, r4
   15f1c:	bl	163d0 <gen_monster@@Base+0x8cc>
   15f20:	mov	r0, #0
   15f24:	sub	sp, fp, #16
   15f28:	pop	{r4, r5, r6, sl, fp, pc}
   15f2c:	movw	r0, #10098	; 0x2772
   15f30:	movt	r0, #2
   15f34:	movw	r1, #9622	; 0x2596
   15f38:	movt	r1, #2
   15f3c:	movw	r3, #10137	; 0x2799
   15f40:	movt	r3, #2
   15f44:	movw	r2, #881	; 0x371
   15f48:	bl	12f88 <__assert_fail@plt>
   15f4c:	movw	r0, #10178	; 0x27c2
   15f50:	movt	r0, #2
   15f54:	movw	r1, #9622	; 0x2596
   15f58:	movt	r1, #2
   15f5c:	movw	r3, #10137	; 0x2799
   15f60:	movt	r3, #2
   15f64:	movw	r2, #883	; 0x373
   15f68:	bl	12f88 <__assert_fail@plt>
   15f6c:	movw	r0, #10217	; 0x27e9
   15f70:	movt	r0, #2
   15f74:	movw	r1, #9622	; 0x2596
   15f78:	movt	r1, #2
   15f7c:	movw	r3, #10137	; 0x2799
   15f80:	movt	r3, #2
   15f84:	movw	r2, #923	; 0x39b
   15f88:	bl	12f88 <__assert_fail@plt>
   15f8c:	movw	r0, #10296	; 0x2838
   15f90:	movt	r0, #2
   15f94:	movw	r1, #9622	; 0x2596
   15f98:	movt	r1, #2
   15f9c:	movw	r3, #10137	; 0x2799
   15fa0:	movt	r3, #2
   15fa4:	movw	r2, #929	; 0x3a1
   15fa8:	bl	12f88 <__assert_fail@plt>
   15fac:	push	{r4, sl, fp, lr}
   15fb0:	add	fp, sp, #8
   15fb4:	mov	r4, r0
   15fb8:	bl	1c7b8 <main@@Base+0x147c>
   15fbc:	cmp	r0, #0
   15fc0:	popne	{r4, sl, fp, pc}
   15fc4:	mov	r0, r4
   15fc8:	pop	{r4, sl, fp, lr}
   15fcc:	b	13d3c <test_empty_monster@@Base+0x114>
   15fd0:	push	{r4, sl, fp, lr}
   15fd4:	add	fp, sp, #8
   15fd8:	mov	r4, r0
   15fdc:	movw	r1, #9012	; 0x2334
   15fe0:	movt	r1, #2
   15fe4:	bl	13d30 <test_empty_monster@@Base+0x108>
   15fe8:	cmp	r0, #0
   15fec:	popne	{r4, sl, fp, pc}
   15ff0:	mov	r0, r4
   15ff4:	pop	{r4, sl, fp, lr}
   15ff8:	b	13d3c <test_empty_monster@@Base+0x114>
   15ffc:	push	{r4, sl, fp, lr}
   16000:	add	fp, sp, #8
   16004:	cmp	r1, #100	; 0x64
   16008:	popeq	{r4, sl, fp, pc}
   1600c:	mov	r4, r1
   16010:	mov	r1, #2
   16014:	mov	r2, #2
   16018:	mov	r3, #2
   1601c:	bl	1fda8 <flatcc_builder_table_add@@Base>
   16020:	cmp	r0, #0
   16024:	beq	16034 <gen_monster@@Base+0x530>
   16028:	mov	r1, r4
   1602c:	pop	{r4, sl, fp, lr}
   16030:	b	1ba7c <main@@Base+0x740>
   16034:	pop	{r4, sl, fp, pc}
   16038:	mov	r1, #0
   1603c:	mov	r2, #32
   16040:	mov	r3, #16
   16044:	b	1fda8 <flatcc_builder_table_add@@Base>
   16048:	push	{r4, sl, fp, lr}
   1604c:	add	fp, sp, #8
   16050:	cmp	r1, #8
   16054:	popeq	{r4, sl, fp, pc}
   16058:	mov	r4, r1
   1605c:	mov	r1, #6
   16060:	mov	r2, #1
   16064:	mov	r3, #1
   16068:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1606c:	cmp	r0, #0
   16070:	beq	16080 <gen_monster@@Base+0x57c>
   16074:	mov	r1, r4
   16078:	pop	{r4, sl, fp, lr}
   1607c:	b	1c7cc <main@@Base+0x1490>
   16080:	pop	{r4, sl, fp, pc}
   16084:	push	{r4, sl, fp, lr}
   16088:	add	fp, sp, #8
   1608c:	mov	r4, r0
   16090:	bl	13594 <test_type_aliases@@Base+0x19c>
   16094:	mov	r1, r0
   16098:	mov	r0, r4
   1609c:	pop	{r4, sl, fp, lr}
   160a0:	b	1c7f0 <main@@Base+0x14b4>
   160a4:	b	1c818 <main@@Base+0x14dc>
   160a8:	b	1e6d8 <flatcc_builder_extend_vector@@Base>
   160ac:	push	{fp, lr}
   160b0:	mov	fp, sp
   160b4:	mov	r1, #1
   160b8:	bl	1e6d8 <flatcc_builder_extend_vector@@Base>
   160bc:	cmp	r0, #0
   160c0:	popeq	{fp, pc}
   160c4:	pop	{fp, lr}
   160c8:	b	1c828 <main@@Base+0x14ec>
   160cc:	push	{r4, sl, fp, lr}
   160d0:	add	fp, sp, #8
   160d4:	mov	r4, r1
   160d8:	mov	r1, #1
   160dc:	bl	1e6d8 <flatcc_builder_extend_vector@@Base>
   160e0:	cmp	r0, #0
   160e4:	ldrne	r1, [r4]
   160e8:	strne	r1, [r0]
   160ec:	pop	{r4, sl, fp, pc}
   160f0:	push	{r4, sl, fp, lr}
   160f4:	add	fp, sp, #8
   160f8:	mov	r4, r1
   160fc:	mov	r1, #1
   16100:	bl	1e6d8 <flatcc_builder_extend_vector@@Base>
   16104:	cmp	r0, #0
   16108:	ldrne	r1, [r4]
   1610c:	strne	r1, [r0]
   16110:	pop	{r4, sl, fp, pc}
   16114:	b	1f990 <flatcc_builder_vector_count@@Base>
   16118:	mov	r1, #2
   1611c:	b	1eb20 <flatcc_builder_truncate_vector@@Base>
   16120:	b	1f99c <flatcc_builder_vector_edit@@Base>
   16124:	push	{r4, sl, fp, lr}
   16128:	add	fp, sp, #8
   1612c:	mov	r4, r0
   16130:	bl	1c864 <main@@Base+0x1528>
   16134:	mov	r1, r0
   16138:	mov	r0, r4
   1613c:	pop	{r4, sl, fp, lr}
   16140:	b	1c83c <main@@Base+0x1500>
   16144:	b	203ec <flatcc_builder_create_string@@Base>
   16148:	push	{r4, sl, fp, lr}
   1614c:	add	fp, sp, #8
   16150:	cmp	r1, #0
   16154:	popeq	{r4, sl, fp, pc}
   16158:	mov	r4, r1
   1615c:	mov	r1, #3
   16160:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   16164:	cmp	r0, #0
   16168:	strne	r4, [r0]
   1616c:	pop	{r4, sl, fp, pc}
   16170:	b	1ed50 <flatcc_builder_start_offset_vector@@Base>
   16174:	b	1e89c <flatcc_builder_extend_offset_vector@@Base>
   16178:	b	13d3c <test_empty_monster@@Base+0x114>
   1617c:	push	{r4, sl, fp, lr}
   16180:	add	fp, sp, #8
   16184:	mov	r4, r0
   16188:	bl	204d4 <flatcc_builder_create_string_strn@@Base>
   1618c:	mov	r1, r0
   16190:	mov	r0, r4
   16194:	pop	{r4, sl, fp, lr}
   16198:	b	16148 <gen_monster@@Base+0x644>
   1619c:	push	{r4, sl, fp, lr}
   161a0:	add	fp, sp, #8
   161a4:	mov	r4, r0
   161a8:	bl	13d64 <test_empty_monster@@Base+0x13c>
   161ac:	mov	r1, r0
   161b0:	mov	r0, r4
   161b4:	pop	{r4, sl, fp, lr}
   161b8:	b	1c868 <main@@Base+0x152c>
   161bc:	mov	r1, #1
   161c0:	b	1ebc4 <flatcc_builder_truncate_offset_vector@@Base>
   161c4:	b	1fbcc <flatcc_builder_offset_vector_count@@Base>
   161c8:	b	1fbc4 <flatcc_builder_offset_vector_edit@@Base>
   161cc:	mov	r2, #2
   161d0:	b	1e944 <flatcc_builder_append_offset_vector@@Base>
   161d4:	push	{r4, sl, fp, lr}
   161d8:	add	fp, sp, #8
   161dc:	mov	r4, r0
   161e0:	bl	1ee04 <flatcc_builder_end_offset_vector@@Base>
   161e4:	mov	r1, r0
   161e8:	mov	r0, r4
   161ec:	pop	{r4, sl, fp, lr}
   161f0:	b	1c878 <main@@Base+0x153c>
   161f4:	b	204a8 <flatcc_builder_create_string_str@@Base>
   161f8:	push	{r4, sl, fp, lr}
   161fc:	add	fp, sp, #8
   16200:	mov	r4, r0
   16204:	mov	r2, #3
   16208:	bl	1edb0 <flatcc_builder_create_offset_vector@@Base>
   1620c:	mov	r1, r0
   16210:	mov	r0, r4
   16214:	pop	{r4, sl, fp, lr}
   16218:	b	1c8a0 <main@@Base+0x1564>
   1621c:	b	1c8c8 <main@@Base+0x158c>
   16220:	b	1e820 <flatcc_builder_append_vector@@Base>
   16224:	push	{r4, sl, fp, lr}
   16228:	add	fp, sp, #8
   1622c:	mov	r4, r0
   16230:	bl	1c900 <main@@Base+0x15c4>
   16234:	mov	r1, r0
   16238:	mov	r0, r4
   1623c:	pop	{r4, sl, fp, lr}
   16240:	b	1c8d8 <main@@Base+0x159c>
   16244:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16248:	add	fp, sp, #24
   1624c:	mov	r4, #0
   16250:	tst	r1, #255	; 0xff
   16254:	beq	162a8 <gen_monster@@Base+0x7a4>
   16258:	mov	r5, r2
   1625c:	mvn	r4, #0
   16260:	cmp	r2, #0
   16264:	beq	162a8 <gen_monster@@Base+0x7a4>
   16268:	mov	r6, r1
   1626c:	mov	r7, r0
   16270:	mov	r1, #7
   16274:	mov	r2, #1
   16278:	mov	r3, #1
   1627c:	bl	1fda8 <flatcc_builder_table_add@@Base>
   16280:	cmp	r0, #0
   16284:	beq	162a8 <gen_monster@@Base+0x7a4>
   16288:	mov	r8, r0
   1628c:	mov	r0, r7
   16290:	mov	r1, #8
   16294:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   16298:	cmp	r0, #0
   1629c:	strbne	r6, [r8]
   162a0:	strne	r5, [r0]
   162a4:	movne	r4, #0
   162a8:	mov	r0, r4
   162ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   162b0:	str	r1, [r0, #4]
   162b4:	mov	r1, #1
   162b8:	strb	r1, [r0]
   162bc:	bx	lr
   162c0:	b	13d3c <test_empty_monster@@Base+0x114>
   162c4:	b	13d3c <test_empty_monster@@Base+0x114>
   162c8:	push	{r4, sl, fp, lr}
   162cc:	add	fp, sp, #8
   162d0:	sub	sp, sp, #8
   162d4:	mov	r4, r0
   162d8:	mov	r0, sp
   162dc:	bl	162b0 <gen_monster@@Base+0x7ac>
   162e0:	ldm	sp, {r1, r2}
   162e4:	mov	r0, r4
   162e8:	sub	sp, fp, #8
   162ec:	pop	{r4, sl, fp, lr}
   162f0:	b	16244 <gen_monster@@Base+0x740>
   162f4:	push	{r4, sl, fp, lr}
   162f8:	add	fp, sp, #8
   162fc:	mov	r4, r0
   16300:	bl	13d64 <test_empty_monster@@Base+0x13c>
   16304:	mov	r1, r0
   16308:	mov	r0, r4
   1630c:	pop	{r4, sl, fp, lr}
   16310:	b	1c904 <main@@Base+0x15c8>
   16314:	push	{r4, sl, fp, lr}
   16318:	add	fp, sp, #8
   1631c:	tst	r1, #255	; 0xff
   16320:	popeq	{r4, sl, fp, pc}
   16324:	mov	r4, r2
   16328:	mov	r1, #8
   1632c:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   16330:	cmp	r0, #0
   16334:	strne	r4, [r0]
   16338:	pop	{r4, sl, fp, pc}
   1633c:	push	{r4, sl, fp, lr}
   16340:	add	fp, sp, #8
   16344:	mov	r4, #1
   16348:	mov	r1, #7
   1634c:	mov	r2, #1
   16350:	mov	r3, #1
   16354:	bl	1fda8 <flatcc_builder_table_add@@Base>
   16358:	cmp	r0, #0
   1635c:	strbne	r4, [r0]
   16360:	pop	{r4, sl, fp, pc}
   16364:	push	{r4, sl, fp, lr}
   16368:	add	fp, sp, #8
   1636c:	mov	r4, r0
   16370:	bl	13d64 <test_empty_monster@@Base+0x13c>
   16374:	mov	r1, r0
   16378:	mov	r0, r4
   1637c:	pop	{r4, sl, fp, lr}
   16380:	b	188dc <test_create_add_field@@Base+0xf4>
   16384:	push	{fp, lr}
   16388:	mov	fp, sp
   1638c:	mov	r1, #15
   16390:	mov	r2, #1
   16394:	mov	r3, #1
   16398:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1639c:	cmp	r0, #0
   163a0:	popeq	{fp, pc}
   163a4:	pop	{fp, lr}
   163a8:	b	1c910 <main@@Base+0x15d4>
   163ac:	b	1c91c <main@@Base+0x15e0>
   163b0:	push	{r4, sl, fp, lr}
   163b4:	add	fp, sp, #8
   163b8:	mov	r4, r0
   163bc:	bl	1c94c <main@@Base+0x1610>
   163c0:	mov	r1, r0
   163c4:	mov	r0, r4
   163c8:	pop	{r4, sl, fp, lr}
   163cc:	b	1c924 <main@@Base+0x15e8>
   163d0:	push	{r4, sl, fp, lr}
   163d4:	add	fp, sp, #8
   163d8:	mov	r4, r0
   163dc:	bl	13d64 <test_empty_monster@@Base+0x13c>
   163e0:	mov	r1, r0
   163e4:	mov	r0, r4
   163e8:	pop	{r4, sl, fp, lr}
   163ec:	b	13db4 <test_empty_monster@@Base+0x18c>

000163f0 <test_monster@@Base>:
   163f0:	push	{r4, r5, fp, lr}
   163f4:	add	fp, sp, #8
   163f8:	sub	sp, sp, #8
   163fc:	mov	r4, r0
   16400:	mov	r1, #0
   16404:	bl	15b04 <gen_monster@@Base>
   16408:	add	r1, sp, #4
   1640c:	mov	r0, r4
   16410:	bl	20950 <flatcc_builder_finalize_aligned_buffer@@Base>
   16414:	mov	r4, r0
   16418:	movw	r0, #36976	; 0x9070
   1641c:	movt	r0, #3
   16420:	ldr	r3, [r0]
   16424:	ldr	r2, [sp, #4]
   16428:	movw	r0, #9272	; 0x2438
   1642c:	movt	r0, #2
   16430:	mov	r1, r4
   16434:	bl	1364c <test_type_aliases@@Base+0x254>
   16438:	ldr	r1, [sp, #4]
   1643c:	mov	r0, r4
   16440:	bl	13dc4 <test_empty_monster@@Base+0x19c>
   16444:	cmp	r0, #0
   16448:	beq	16468 <test_monster@@Base+0x78>
   1644c:	bl	21208 <flatcc_verify_error_string@@Base>
   16450:	mov	r1, r0
   16454:	movw	r0, #10356	; 0x2874
   16458:	movt	r0, #2
   1645c:	bl	12e98 <printf@plt>
   16460:	mvn	r5, #0
   16464:	b	1647c <test_monster@@Base+0x8c>
   16468:	mov	r0, r4
   1646c:	bl	145a4 <verify_monster@@Base>
   16470:	mov	r5, r0
   16474:	mov	r0, r4
   16478:	bl	20a30 <flatcc_builder_aligned_free@@Base>
   1647c:	mov	r0, r5
   16480:	sub	sp, fp, #8
   16484:	pop	{r4, r5, fp, pc}

00016488 <test_monster_with_size@@Base>:
   16488:	push	{r4, r5, fp, lr}
   1648c:	add	fp, sp, #8
   16490:	sub	sp, sp, #8
   16494:	mov	r4, r0
   16498:	mov	r1, #1
   1649c:	bl	15b04 <gen_monster@@Base>
   164a0:	add	r1, sp, #4
   164a4:	mov	r0, r4
   164a8:	bl	20950 <flatcc_builder_finalize_aligned_buffer@@Base>
   164ac:	mov	r4, r0
   164b0:	movw	r0, #36976	; 0x9070
   164b4:	movt	r0, #3
   164b8:	ldr	r3, [r0]
   164bc:	ldr	r2, [sp, #4]
   164c0:	movw	r0, #10398	; 0x289e
   164c4:	movt	r0, #2
   164c8:	mov	r1, r4
   164cc:	bl	1364c <test_type_aliases@@Base+0x254>
   164d0:	tst	r4, #15
   164d4:	beq	164fc <test_monster_with_size@@Base+0x74>
   164d8:	movw	r0, #10422	; 0x28b6
   164dc:	movt	r0, #2
   164e0:	bl	12e98 <printf@plt>
   164e4:	movw	r0, #10503	; 0x2907
   164e8:	movt	r0, #2
   164ec:	mov	r1, r4
   164f0:	bl	12e98 <printf@plt>
   164f4:	mvn	r5, #0
   164f8:	b	1656c <test_monster_with_size@@Base+0xe4>
   164fc:	mov	r1, sp
   16500:	mov	r0, r4
   16504:	bl	16578 <test_monster_with_size@@Base+0xf0>
   16508:	mov	r5, r0
   1650c:	ldr	r0, [sp, #4]
   16510:	sub	r2, r0, #4
   16514:	ldr	r1, [sp]
   16518:	cmp	r1, r2
   1651c:	bne	16544 <test_monster_with_size@@Base+0xbc>
   16520:	mov	r0, r5
   16524:	bl	13dc4 <test_empty_monster@@Base+0x19c>
   16528:	cmp	r0, #0
   1652c:	beq	16558 <test_monster_with_size@@Base+0xd0>
   16530:	bl	21208 <flatcc_verify_error_string@@Base>
   16534:	mov	r1, r0
   16538:	movw	r0, #10577	; 0x2951
   1653c:	movt	r0, #2
   16540:	b	164f0 <test_monster_with_size@@Base+0x68>
   16544:	movw	r0, #10523	; 0x291b
   16548:	movt	r0, #2
   1654c:	bl	12e98 <printf@plt>
   16550:	mvn	r5, #0
   16554:	b	1656c <test_monster_with_size@@Base+0xe4>
   16558:	mov	r0, r5
   1655c:	bl	145a4 <verify_monster@@Base>
   16560:	mov	r5, r0
   16564:	mov	r0, r4
   16568:	bl	20a30 <flatcc_builder_aligned_free@@Base>
   1656c:	mov	r0, r5
   16570:	sub	sp, fp, #8
   16574:	pop	{r4, r5, fp, pc}
   16578:	push	{r4, r5, fp, lr}
   1657c:	add	fp, sp, #8
   16580:	mov	r4, r0
   16584:	cmp	r1, #0
   16588:	beq	1659c <test_monster_with_size@@Base+0x114>
   1658c:	mov	r5, r1
   16590:	mov	r0, r4
   16594:	bl	1b5cc <main@@Base+0x290>
   16598:	str	r0, [r5]
   1659c:	add	r0, r4, #4
   165a0:	pop	{r4, r5, fp, pc}

000165a4 <test_string@@Base>:
   165a4:	push	{r4, r5, fp, lr}
   165a8:	add	fp, sp, #8
   165ac:	mov	r4, r0
   165b0:	bl	1db08 <flatcc_builder_reset@@Base>
   165b4:	mov	r0, r4
   165b8:	bl	15fd0 <gen_monster@@Base+0x4cc>
   165bc:	mov	r0, r4
   165c0:	bl	16748 <test_string@@Base+0x1a4>
   165c4:	mov	r0, r4
   165c8:	bl	1674c <test_string@@Base+0x1a8>
   165cc:	movw	r1, #12849	; 0x3231
   165d0:	strh	r1, [r0]
   165d4:	mov	r1, #51	; 0x33
   165d8:	strb	r1, [r0, #2]
   165dc:	mov	r0, r4
   165e0:	bl	16754 <test_string@@Base+0x1b0>
   165e4:	mov	r0, r4
   165e8:	bl	16760 <test_string@@Base+0x1bc>
   165ec:	cmp	r0, #4
   165f0:	bne	166a8 <test_string@@Base+0x104>
   165f4:	mov	r0, r4
   165f8:	bl	16764 <test_string@@Base+0x1c0>
   165fc:	mov	r0, r4
   16600:	bl	16760 <test_string@@Base+0x1bc>
   16604:	cmp	r0, #8
   16608:	bne	166c8 <test_string@@Base+0x124>
   1660c:	mov	r0, r4
   16610:	bl	16774 <test_string@@Base+0x1d0>
   16614:	mov	r0, r4
   16618:	bl	16760 <test_string@@Base+0x1bc>
   1661c:	cmp	r0, #10
   16620:	bne	166e8 <test_string@@Base+0x144>
   16624:	mov	r0, r4
   16628:	bl	16784 <test_string@@Base+0x1e0>
   1662c:	mov	r0, r4
   16630:	bl	16760 <test_string@@Base+0x1bc>
   16634:	cmp	r0, #7
   16638:	bne	16708 <test_string@@Base+0x164>
   1663c:	mov	r0, r4
   16640:	bl	1678c <test_string@@Base+0x1e8>
   16644:	mov	r1, #46	; 0x2e
   16648:	strb	r1, [r0, #4]
   1664c:	mov	r0, r4
   16650:	bl	16790 <test_string@@Base+0x1ec>
   16654:	mov	r0, r4
   16658:	bl	163d0 <gen_monster@@Base+0x8cc>
   1665c:	mov	r5, #0
   16660:	mov	r0, r4
   16664:	mov	r1, #0
   16668:	bl	2081c <flatcc_builder_get_direct_buffer@@Base>
   1666c:	cmp	r0, #0
   16670:	beq	16728 <test_string@@Base+0x184>
   16674:	bl	13204 <verify_empty_monster@@Base+0x17c>
   16678:	bl	15010 <verify_monster@@Base+0xa6c>
   1667c:	movw	r1, #10833	; 0x2a51
   16680:	movt	r1, #2
   16684:	bl	12e8c <strcmp@plt>
   16688:	cmp	r0, #0
   1668c:	beq	166a0 <test_string@@Base+0xfc>
   16690:	movw	r0, #24224	; 0x5ea0
   16694:	movt	r0, #2
   16698:	bl	12eec <puts@plt>
   1669c:	mvn	r5, #0
   166a0:	mov	r0, r5
   166a4:	pop	{r4, r5, fp, pc}
   166a8:	movw	r0, #10636	; 0x298c
   166ac:	movt	r0, #2
   166b0:	movw	r1, #9622	; 0x2596
   166b4:	movt	r1, #2
   166b8:	movw	r3, #10674	; 0x29b2
   166bc:	movt	r3, #2
   166c0:	movw	r2, #1080	; 0x438
   166c4:	bl	12f88 <__assert_fail@plt>
   166c8:	movw	r0, #10715	; 0x29db
   166cc:	movt	r0, #2
   166d0:	movw	r1, #9622	; 0x2596
   166d4:	movt	r1, #2
   166d8:	movw	r3, #10674	; 0x29b2
   166dc:	movt	r3, #2
   166e0:	movw	r2, #1082	; 0x43a
   166e4:	bl	12f88 <__assert_fail@plt>
   166e8:	movw	r0, #10756	; 0x2a04
   166ec:	movt	r0, #2
   166f0:	movw	r1, #9622	; 0x2596
   166f4:	movt	r1, #2
   166f8:	movw	r3, #10674	; 0x29b2
   166fc:	movt	r3, #2
   16700:	movw	r2, #1084	; 0x43c
   16704:	bl	12f88 <__assert_fail@plt>
   16708:	movw	r0, #10795	; 0x2a2b
   1670c:	movt	r0, #2
   16710:	movw	r1, #9622	; 0x2596
   16714:	movt	r1, #2
   16718:	movw	r3, #10674	; 0x29b2
   1671c:	movt	r3, #2
   16720:	movw	r2, #1086	; 0x43e
   16724:	bl	12f88 <__assert_fail@plt>
   16728:	movw	r0, #11121	; 0x2b71
   1672c:	movt	r0, #2
   16730:	movw	r1, #9622	; 0x2596
   16734:	movt	r1, #2
   16738:	movw	r3, #10674	; 0x29b2
   1673c:	movt	r3, #2
   16740:	movw	r2, #1093	; 0x445
   16744:	bl	12f88 <__assert_fail@plt>
   16748:	b	1ee68 <flatcc_builder_start_string@@Base>
   1674c:	mov	r1, #3
   16750:	b	1e9bc <flatcc_builder_extend_string@@Base>
   16754:	movw	r1, #10672	; 0x29b0
   16758:	movt	r1, #2
   1675c:	b	1ea98 <flatcc_builder_append_string_str@@Base>
   16760:	b	2059c <flatcc_builder_string_len@@Base>
   16764:	movw	r1, #10710	; 0x29d6
   16768:	movt	r1, #2
   1676c:	mov	r2, #30
   16770:	b	1eac4 <flatcc_builder_append_string_strn@@Base>
   16774:	movw	r1, #10753	; 0x2a01
   16778:	movt	r1, #2
   1677c:	mov	r2, #2
   16780:	b	1ea24 <flatcc_builder_append_string@@Base>
   16784:	mov	r1, #3
   16788:	b	1ec48 <flatcc_builder_truncate_string@@Base>
   1678c:	b	20594 <flatcc_builder_string_edit@@Base>
   16790:	push	{r4, sl, fp, lr}
   16794:	add	fp, sp, #8
   16798:	mov	r4, r0
   1679c:	bl	20504 <flatcc_builder_end_string@@Base>
   167a0:	mov	r1, r0
   167a4:	mov	r0, r4
   167a8:	pop	{r4, sl, fp, lr}
   167ac:	b	16148 <gen_monster@@Base+0x644>

000167b0 <test_sort_find@@Base>:
   167b0:	push	{r4, r5, r6, sl, fp, lr}
   167b4:	add	fp, sp, #16
   167b8:	sub	sp, sp, #8
   167bc:	mov	r4, r0
   167c0:	bl	1db08 <flatcc_builder_reset@@Base>
   167c4:	mov	r0, r4
   167c8:	bl	15fd0 <gen_monster@@Base+0x4cc>
   167cc:	movw	r1, #9185	; 0x23e1
   167d0:	movt	r1, #2
   167d4:	mov	r0, r4
   167d8:	bl	13d44 <test_empty_monster@@Base+0x11c>
   167dc:	mov	r0, r4
   167e0:	bl	16170 <gen_monster@@Base+0x66c>
   167e4:	mov	r0, r4
   167e8:	bl	16178 <gen_monster@@Base+0x674>
   167ec:	movw	r1, #9746	; 0x2612
   167f0:	movt	r1, #2
   167f4:	mov	r0, r4
   167f8:	bl	13d44 <test_empty_monster@@Base+0x11c>
   167fc:	mov	r0, r4
   16800:	bl	1619c <gen_monster@@Base+0x698>
   16804:	mov	r0, r4
   16808:	bl	16178 <gen_monster@@Base+0x674>
   1680c:	movw	r1, #9788	; 0x263c
   16810:	movt	r1, #2
   16814:	mov	r0, r4
   16818:	bl	13d44 <test_empty_monster@@Base+0x11c>
   1681c:	mov	r0, r4
   16820:	bl	1619c <gen_monster@@Base+0x698>
   16824:	mov	r0, r4
   16828:	bl	16178 <gen_monster@@Base+0x674>
   1682c:	movw	r5, #9828	; 0x2664
   16830:	movt	r5, #2
   16834:	mov	r0, r4
   16838:	mov	r1, r5
   1683c:	bl	13d44 <test_empty_monster@@Base+0x11c>
   16840:	mov	r0, r4
   16844:	bl	1619c <gen_monster@@Base+0x698>
   16848:	mov	r0, r4
   1684c:	bl	16178 <gen_monster@@Base+0x674>
   16850:	movw	r1, #10841	; 0x2a59
   16854:	movt	r1, #2
   16858:	mov	r0, r4
   1685c:	bl	13d44 <test_empty_monster@@Base+0x11c>
   16860:	mov	r0, r4
   16864:	bl	1619c <gen_monster@@Base+0x698>
   16868:	mov	r0, r4
   1686c:	bl	16178 <gen_monster@@Base+0x674>
   16870:	mov	r0, r4
   16874:	mov	r1, r5
   16878:	bl	13d44 <test_empty_monster@@Base+0x11c>
   1687c:	mov	r0, r4
   16880:	bl	1619c <gen_monster@@Base+0x698>
   16884:	mov	r0, r4
   16888:	bl	161d4 <gen_monster@@Base+0x6d0>
   1688c:	mov	r0, r4
   16890:	bl	163d0 <gen_monster@@Base+0x8cc>
   16894:	add	r1, sp, #4
   16898:	mov	r0, r4
   1689c:	bl	20950 <flatcc_builder_finalize_aligned_buffer@@Base>
   168a0:	mov	r4, r0
   168a4:	movw	r6, #36976	; 0x9070
   168a8:	movt	r6, #3
   168ac:	ldr	r3, [r6]
   168b0:	ldr	r2, [sp, #4]
   168b4:	movw	r0, #10847	; 0x2a5f
   168b8:	movt	r0, #2
   168bc:	mov	r1, r4
   168c0:	bl	1364c <test_type_aliases@@Base+0x254>
   168c4:	mov	r0, r4
   168c8:	bl	13204 <verify_empty_monster@@Base+0x17c>
   168cc:	bl	153e8 <verify_monster@@Base+0xe44>
   168d0:	cmp	r0, #0
   168d4:	beq	16b88 <test_sort_find@@Base+0x3d8>
   168d8:	mov	r5, r0
   168dc:	bl	16ba8 <test_sort_find@@Base+0x3f8>
   168e0:	ldr	r3, [r6]
   168e4:	ldr	r2, [sp, #4]
   168e8:	movw	r0, #10849	; 0x2a61
   168ec:	movt	r0, #2
   168f0:	mov	r1, r4
   168f4:	bl	1364c <test_type_aliases@@Base+0x254>
   168f8:	mov	r0, r5
   168fc:	bl	15464 <verify_monster@@Base+0xec0>
   16900:	cmp	r0, #5
   16904:	bne	16938 <test_sort_find@@Base+0x188>
   16908:	mov	r0, r5
   1690c:	mov	r1, #0
   16910:	bl	15478 <verify_monster@@Base+0xed4>
   16914:	bl	15010 <verify_monster@@Base+0xa6c>
   16918:	movw	r1, #10841	; 0x2a59
   1691c:	movt	r1, #2
   16920:	bl	12e8c <strcmp@plt>
   16924:	cmp	r0, #0
   16928:	beq	1695c <test_sort_find@@Base+0x1ac>
   1692c:	movw	r0, #24752	; 0x60b0
   16930:	movt	r0, #2
   16934:	b	16940 <test_sort_find@@Base+0x190>
   16938:	movw	r0, #24784	; 0x60d0
   1693c:	movt	r0, #2
   16940:	bl	12eec <puts@plt>
   16944:	mvn	r5, #0
   16948:	mov	r0, r4
   1694c:	bl	20a30 <flatcc_builder_aligned_free@@Base>
   16950:	mov	r0, r5
   16954:	sub	sp, fp, #16
   16958:	pop	{r4, r5, r6, sl, fp, pc}
   1695c:	mov	r0, r5
   16960:	mov	r1, #1
   16964:	bl	15478 <verify_monster@@Base+0xed4>
   16968:	bl	15010 <verify_monster@@Base+0xa6c>
   1696c:	movw	r1, #9828	; 0x2664
   16970:	movt	r1, #2
   16974:	bl	12e8c <strcmp@plt>
   16978:	cmp	r0, #0
   1697c:	beq	1698c <test_sort_find@@Base+0x1dc>
   16980:	movw	r0, #24720	; 0x6090
   16984:	movt	r0, #2
   16988:	b	16940 <test_sort_find@@Base+0x190>
   1698c:	mov	r0, r5
   16990:	mov	r1, #2
   16994:	bl	15478 <verify_monster@@Base+0xed4>
   16998:	bl	15010 <verify_monster@@Base+0xa6c>
   1699c:	movw	r1, #9828	; 0x2664
   169a0:	movt	r1, #2
   169a4:	bl	12e8c <strcmp@plt>
   169a8:	cmp	r0, #0
   169ac:	beq	169bc <test_sort_find@@Base+0x20c>
   169b0:	movw	r0, #24688	; 0x6070
   169b4:	movt	r0, #2
   169b8:	b	16940 <test_sort_find@@Base+0x190>
   169bc:	mov	r0, r5
   169c0:	mov	r1, #3
   169c4:	bl	15478 <verify_monster@@Base+0xed4>
   169c8:	bl	15010 <verify_monster@@Base+0xa6c>
   169cc:	movw	r1, #9788	; 0x263c
   169d0:	movt	r1, #2
   169d4:	bl	12e8c <strcmp@plt>
   169d8:	cmp	r0, #0
   169dc:	beq	169ec <test_sort_find@@Base+0x23c>
   169e0:	movw	r0, #24656	; 0x6050
   169e4:	movt	r0, #2
   169e8:	b	16940 <test_sort_find@@Base+0x190>
   169ec:	mov	r0, r5
   169f0:	mov	r1, #4
   169f4:	bl	15478 <verify_monster@@Base+0xed4>
   169f8:	bl	15010 <verify_monster@@Base+0xa6c>
   169fc:	movw	r1, #9746	; 0x2612
   16a00:	movt	r1, #2
   16a04:	bl	12e8c <strcmp@plt>
   16a08:	cmp	r0, #0
   16a0c:	beq	16a1c <test_sort_find@@Base+0x26c>
   16a10:	movw	r0, #24624	; 0x6030
   16a14:	movt	r0, #2
   16a18:	b	16940 <test_sort_find@@Base+0x190>
   16a1c:	mov	r0, r5
   16a20:	mov	r1, #1
   16a24:	bl	15478 <verify_monster@@Base+0xed4>
   16a28:	mov	r6, r0
   16a2c:	mov	r0, r5
   16a30:	mov	r1, #2
   16a34:	bl	15478 <verify_monster@@Base+0xed4>
   16a38:	cmp	r6, r0
   16a3c:	beq	16ab4 <test_sort_find@@Base+0x304>
   16a40:	mov	r0, r5
   16a44:	bl	16bac <test_sort_find@@Base+0x3fc>
   16a48:	cmp	r0, #3
   16a4c:	bne	16ac0 <test_sort_find@@Base+0x310>
   16a50:	mov	r0, r5
   16a54:	bl	16bb8 <test_sort_find@@Base+0x408>
   16a58:	cmp	r0, #3
   16a5c:	bne	16acc <test_sort_find@@Base+0x31c>
   16a60:	movw	r1, #9788	; 0x263c
   16a64:	movt	r1, #2
   16a68:	mov	r0, r5
   16a6c:	bl	16bc4 <test_sort_find@@Base+0x414>
   16a70:	cmp	r0, #3
   16a74:	bne	16ad8 <test_sort_find@@Base+0x328>
   16a78:	movw	r1, #10926	; 0x2aae
   16a7c:	movt	r1, #2
   16a80:	mov	r0, r5
   16a84:	bl	16c5c <test_sort_find@@Base+0x4ac>
   16a88:	cmp	r0, #3
   16a8c:	bne	16ae4 <test_sort_find@@Base+0x334>
   16a90:	movw	r1, #10933	; 0x2ab5
   16a94:	movt	r1, #2
   16a98:	mov	r0, r5
   16a9c:	bl	16bc4 <test_sort_find@@Base+0x414>
   16aa0:	cmn	r0, #1
   16aa4:	beq	16af0 <test_sort_find@@Base+0x340>
   16aa8:	movw	r0, #24320	; 0x5f00
   16aac:	movt	r0, #2
   16ab0:	b	16940 <test_sort_find@@Base+0x190>
   16ab4:	movw	r0, #24544	; 0x5fe0
   16ab8:	movt	r0, #2
   16abc:	b	16940 <test_sort_find@@Base+0x190>
   16ac0:	movw	r0, #24496	; 0x5fb0
   16ac4:	movt	r0, #2
   16ac8:	b	16940 <test_sort_find@@Base+0x190>
   16acc:	movw	r0, #24432	; 0x5f70
   16ad0:	movt	r0, #2
   16ad4:	b	16940 <test_sort_find@@Base+0x190>
   16ad8:	movw	r0, #24400	; 0x5f50
   16adc:	movt	r0, #2
   16ae0:	b	16940 <test_sort_find@@Base+0x190>
   16ae4:	movw	r0, #24352	; 0x5f20
   16ae8:	movt	r0, #2
   16aec:	b	16940 <test_sort_find@@Base+0x190>
   16af0:	movw	r1, #10841	; 0x2a59
   16af4:	movt	r1, #2
   16af8:	mov	r0, r5
   16afc:	bl	16bc4 <test_sort_find@@Base+0x414>
   16b00:	cmp	r0, #0
   16b04:	beq	16b14 <test_sort_find@@Base+0x364>
   16b08:	movw	r0, #20795	; 0x513b
   16b0c:	movt	r0, #2
   16b10:	b	16940 <test_sort_find@@Base+0x190>
   16b14:	movw	r1, #9828	; 0x2664
   16b18:	movt	r1, #2
   16b1c:	mov	r0, r5
   16b20:	bl	16bc4 <test_sort_find@@Base+0x414>
   16b24:	cmp	r0, #1
   16b28:	bne	16b54 <test_sort_find@@Base+0x3a4>
   16b2c:	movw	r1, #9746	; 0x2612
   16b30:	movt	r1, #2
   16b34:	mov	r0, r5
   16b38:	bl	16bc4 <test_sort_find@@Base+0x414>
   16b3c:	cmp	r0, #4
   16b40:	bne	16b64 <test_sort_find@@Base+0x3b4>
   16b44:	mov	r0, r5
   16b48:	bl	16ba8 <test_sort_find@@Base+0x3f8>
   16b4c:	mov	r5, #0
   16b50:	b	16948 <test_sort_find@@Base+0x198>
   16b54:	mov	r6, r0
   16b58:	movw	r0, #24288	; 0x5ee0
   16b5c:	movt	r0, #2
   16b60:	b	16b70 <test_sort_find@@Base+0x3c0>
   16b64:	mov	r6, r0
   16b68:	movw	r0, #24256	; 0x5ec0
   16b6c:	movt	r0, #2
   16b70:	bl	12eec <puts@plt>
   16b74:	movw	r0, #10940	; 0x2abc
   16b78:	movt	r0, #2
   16b7c:	mov	r1, r6
   16b80:	bl	12e98 <printf@plt>
   16b84:	b	16944 <test_sort_find@@Base+0x194>
   16b88:	movw	r0, #10871	; 0x2a77
   16b8c:	movt	r0, #2
   16b90:	movw	r1, #9622	; 0x2596
   16b94:	movt	r1, #2
   16b98:	movw	r3, #10880	; 0x2a80
   16b9c:	movt	r3, #2
   16ba0:	movw	r2, #1147	; 0x47b
   16ba4:	bl	12f88 <__assert_fail@plt>
   16ba8:	b	1c99c <main@@Base+0x1660>
   16bac:	movw	r1, #9788	; 0x263c
   16bb0:	movt	r1, #2
   16bb4:	b	16bc4 <test_sort_find@@Base+0x414>
   16bb8:	movw	r1, #10919	; 0x2aa7
   16bbc:	movt	r1, #2
   16bc0:	b	16c5c <test_sort_find@@Base+0x4ac>
   16bc4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16bc8:	add	fp, sp, #24
   16bcc:	mov	r8, r1
   16bd0:	mov	r6, r0
   16bd4:	bl	15464 <verify_monster@@Base+0xec0>
   16bd8:	mvn	r4, #0
   16bdc:	cmp	r0, #0
   16be0:	beq	16c48 <test_sort_find@@Base+0x498>
   16be4:	mov	r4, #0
   16be8:	subs	r5, r0, #1
   16bec:	beq	16c28 <test_sort_find@@Base+0x478>
   16bf0:	sub	r0, r5, r4
   16bf4:	add	r7, r4, r0, lsr #1
   16bf8:	mov	r0, r6
   16bfc:	mov	r1, r7
   16c00:	bl	15478 <verify_monster@@Base+0xed4>
   16c04:	bl	15010 <verify_monster@@Base+0xa6c>
   16c08:	mov	r1, r8
   16c0c:	bl	1cbec <main@@Base+0x18b0>
   16c10:	cmp	r0, #0
   16c14:	movge	r5, r7
   16c18:	addlt	r4, r7, #1
   16c1c:	cmp	r5, r4
   16c20:	bhi	16bf0 <test_sort_find@@Base+0x440>
   16c24:	bne	16c50 <test_sort_find@@Base+0x4a0>
   16c28:	mov	r0, r6
   16c2c:	mov	r1, r4
   16c30:	bl	15478 <verify_monster@@Base+0xed4>
   16c34:	bl	15010 <verify_monster@@Base+0xa6c>
   16c38:	mov	r1, r8
   16c3c:	bl	1cbec <main@@Base+0x18b0>
   16c40:	cmp	r0, #0
   16c44:	mvnne	r4, #0
   16c48:	mov	r0, r4
   16c4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16c50:	mvn	r4, #0
   16c54:	mov	r0, r4
   16c58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16c5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16c60:	add	fp, sp, #24
   16c64:	mov	r8, r1
   16c68:	mov	r6, r0
   16c6c:	bl	15464 <verify_monster@@Base+0xec0>
   16c70:	mvn	r4, #0
   16c74:	cmp	r0, #0
   16c78:	beq	16ce8 <test_sort_find@@Base+0x538>
   16c7c:	mov	r4, #0
   16c80:	subs	r5, r0, #1
   16c84:	beq	16cc4 <test_sort_find@@Base+0x514>
   16c88:	sub	r0, r5, r4
   16c8c:	add	r7, r4, r0, lsr #1
   16c90:	mov	r0, r6
   16c94:	mov	r1, r7
   16c98:	bl	15478 <verify_monster@@Base+0xed4>
   16c9c:	bl	15010 <verify_monster@@Base+0xa6c>
   16ca0:	mov	r1, r8
   16ca4:	mov	r2, #5
   16ca8:	bl	1cb94 <main@@Base+0x1858>
   16cac:	cmp	r0, #0
   16cb0:	movge	r5, r7
   16cb4:	addlt	r4, r7, #1
   16cb8:	cmp	r5, r4
   16cbc:	bhi	16c88 <test_sort_find@@Base+0x4d8>
   16cc0:	bne	16cf0 <test_sort_find@@Base+0x540>
   16cc4:	mov	r0, r6
   16cc8:	mov	r1, r4
   16ccc:	bl	15478 <verify_monster@@Base+0xed4>
   16cd0:	bl	15010 <verify_monster@@Base+0xa6c>
   16cd4:	mov	r1, r8
   16cd8:	mov	r2, #5
   16cdc:	bl	1cb94 <main@@Base+0x1858>
   16ce0:	cmp	r0, #0
   16ce4:	mvnne	r4, #0
   16ce8:	mov	r0, r4
   16cec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16cf0:	mvn	r4, #0
   16cf4:	mov	r0, r4
   16cf8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00016cfc <test_scan@@Base>:
   16cfc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16d00:	add	fp, sp, #24
   16d04:	sub	sp, sp, #16
   16d08:	mov	r4, r0
   16d0c:	mov	r0, #2
   16d10:	strb	r0, [sp, #10]
   16d14:	mov	r0, #772	; 0x304
   16d18:	strh	r0, [sp, #8]
   16d1c:	movw	r0, #1798	; 0x706
   16d20:	movt	r0, #769	; 0x301
   16d24:	str	r0, [sp, #4]
   16d28:	mov	r0, r4
   16d2c:	bl	1db08 <flatcc_builder_reset@@Base>
   16d30:	mov	r0, r4
   16d34:	bl	15fd0 <gen_monster@@Base+0x4cc>
   16d38:	movw	r1, #9185	; 0x23e1
   16d3c:	movt	r1, #2
   16d40:	mov	r0, r4
   16d44:	bl	13d44 <test_empty_monster@@Base+0x11c>
   16d48:	add	r1, sp, #4
   16d4c:	mov	r0, r4
   16d50:	mov	r2, #7
   16d54:	bl	16084 <gen_monster@@Base+0x580>
   16d58:	mov	r0, r4
   16d5c:	bl	176f4 <test_scan@@Base+0x9f8>
   16d60:	mov	r0, r4
   16d64:	bl	176f8 <test_scan@@Base+0x9fc>
   16d68:	mov	r0, r4
   16d6c:	bl	16170 <gen_monster@@Base+0x66c>
   16d70:	mov	r0, r4
   16d74:	bl	16178 <gen_monster@@Base+0x674>
   16d78:	movw	r1, #9746	; 0x2612
   16d7c:	movt	r1, #2
   16d80:	mov	r0, r4
   16d84:	bl	13d44 <test_empty_monster@@Base+0x11c>
   16d88:	mov	r0, r4
   16d8c:	bl	1619c <gen_monster@@Base+0x698>
   16d90:	mov	r0, r4
   16d94:	bl	16178 <gen_monster@@Base+0x674>
   16d98:	movw	r1, #9788	; 0x263c
   16d9c:	movt	r1, #2
   16da0:	mov	r0, r4
   16da4:	bl	13d44 <test_empty_monster@@Base+0x11c>
   16da8:	mov	r0, r4
   16dac:	bl	1619c <gen_monster@@Base+0x698>
   16db0:	mov	r0, r4
   16db4:	bl	16178 <gen_monster@@Base+0x674>
   16db8:	movw	r5, #9828	; 0x2664
   16dbc:	movt	r5, #2
   16dc0:	mov	r0, r4
   16dc4:	mov	r1, r5
   16dc8:	bl	13d44 <test_empty_monster@@Base+0x11c>
   16dcc:	mov	r0, r4
   16dd0:	bl	1619c <gen_monster@@Base+0x698>
   16dd4:	mov	r0, r4
   16dd8:	bl	16178 <gen_monster@@Base+0x674>
   16ddc:	movw	r1, #10841	; 0x2a59
   16de0:	movt	r1, #2
   16de4:	mov	r0, r4
   16de8:	bl	13d44 <test_empty_monster@@Base+0x11c>
   16dec:	mov	r0, r4
   16df0:	bl	1619c <gen_monster@@Base+0x698>
   16df4:	mov	r0, r4
   16df8:	bl	16178 <gen_monster@@Base+0x674>
   16dfc:	mov	r0, r4
   16e00:	mov	r1, r5
   16e04:	bl	13d44 <test_empty_monster@@Base+0x11c>
   16e08:	mov	r0, r4
   16e0c:	bl	1619c <gen_monster@@Base+0x698>
   16e10:	mov	r0, r4
   16e14:	bl	161d4 <gen_monster@@Base+0x6d0>
   16e18:	mov	r0, r4
   16e1c:	bl	163d0 <gen_monster@@Base+0x8cc>
   16e20:	add	r1, sp, #12
   16e24:	mov	r0, r4
   16e28:	bl	20950 <flatcc_builder_finalize_aligned_buffer@@Base>
   16e2c:	mov	r4, r0
   16e30:	bl	13204 <verify_empty_monster@@Base+0x17c>
   16e34:	mov	r7, r0
   16e38:	bl	153e8 <verify_monster@@Base+0xe44>
   16e3c:	cmp	r0, #0
   16e40:	beq	17318 <test_scan@@Base+0x61c>
   16e44:	mov	r6, r0
   16e48:	mov	r0, r7
   16e4c:	bl	15154 <verify_monster@@Base+0xbb0>
   16e50:	cmp	r0, #0
   16e54:	beq	17338 <test_scan@@Base+0x63c>
   16e58:	mov	r5, r0
   16e5c:	mov	r0, r7
   16e60:	bl	154c8 <verify_monster@@Base+0xf24>
   16e64:	cmp	r0, #0
   16e68:	beq	17358 <test_scan@@Base+0x65c>
   16e6c:	mov	r7, r0
   16e70:	movw	r1, #9788	; 0x263c
   16e74:	movt	r1, #2
   16e78:	mov	r0, r6
   16e7c:	bl	17718 <test_scan@@Base+0xa1c>
   16e80:	cmp	r0, #1
   16e84:	bne	16eec <test_scan@@Base+0x1f0>
   16e88:	mov	r0, r6
   16e8c:	bl	1771c <test_scan@@Base+0xa20>
   16e90:	cmp	r0, #1
   16e94:	bne	16ef8 <test_scan@@Base+0x1fc>
   16e98:	mov	r0, r6
   16e9c:	bl	17728 <test_scan@@Base+0xa2c>
   16ea0:	cmp	r0, #1
   16ea4:	bne	16f04 <test_scan@@Base+0x208>
   16ea8:	mov	r0, r6
   16eac:	bl	1772c <test_scan@@Base+0xa30>
   16eb0:	cmp	r0, #1
   16eb4:	bne	16f10 <test_scan@@Base+0x214>
   16eb8:	mvn	r8, #0
   16ebc:	movw	r3, #9788	; 0x263c
   16ec0:	movt	r3, #2
   16ec4:	mov	r0, r6
   16ec8:	mov	r1, #2
   16ecc:	mvn	r2, #0
   16ed0:	bl	1773c <test_scan@@Base+0xa40>
   16ed4:	cmn	r0, #1
   16ed8:	beq	16f34 <test_scan@@Base+0x238>
   16edc:	movw	r0, #26240	; 0x6680
   16ee0:	movt	r0, #2
   16ee4:	bl	12eec <puts@plt>
   16ee8:	b	16f20 <test_scan@@Base+0x224>
   16eec:	movw	r0, #26368	; 0x6700
   16ef0:	movt	r0, #2
   16ef4:	b	16f18 <test_scan@@Base+0x21c>
   16ef8:	movw	r0, #26336	; 0x66e0
   16efc:	movt	r0, #2
   16f00:	b	16f18 <test_scan@@Base+0x21c>
   16f04:	movw	r0, #26288	; 0x66b0
   16f08:	movt	r0, #2
   16f0c:	b	16f18 <test_scan@@Base+0x21c>
   16f10:	movw	r0, #26288	; 0x66b0
   16f14:	movt	r0, #2
   16f18:	bl	12eec <puts@plt>
   16f1c:	mvn	r8, #0
   16f20:	mov	r0, r4
   16f24:	bl	20a30 <flatcc_builder_aligned_free@@Base>
   16f28:	mov	r0, r8
   16f2c:	sub	sp, fp, #24
   16f30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16f34:	movw	r1, #10933	; 0x2ab5
   16f38:	movt	r1, #2
   16f3c:	mov	r0, r6
   16f40:	bl	17718 <test_scan@@Base+0xa1c>
   16f44:	cmn	r0, #1
   16f48:	beq	16f5c <test_scan@@Base+0x260>
   16f4c:	movw	r0, #24320	; 0x5f00
   16f50:	movt	r0, #2
   16f54:	bl	12eec <puts@plt>
   16f58:	b	16f20 <test_scan@@Base+0x224>
   16f5c:	movw	r1, #9746	; 0x2612
   16f60:	movt	r1, #2
   16f64:	mov	r0, r6
   16f68:	bl	17718 <test_scan@@Base+0xa1c>
   16f6c:	cmp	r0, #0
   16f70:	beq	16f84 <test_scan@@Base+0x288>
   16f74:	movw	r0, #24256	; 0x5ec0
   16f78:	movt	r0, #2
   16f7c:	bl	12eec <puts@plt>
   16f80:	b	16f20 <test_scan@@Base+0x224>
   16f84:	movw	r1, #9828	; 0x2664
   16f88:	movt	r1, #2
   16f8c:	mov	r0, r6
   16f90:	bl	17740 <test_scan@@Base+0xa44>
   16f94:	cmp	r0, #2
   16f98:	bne	17068 <test_scan@@Base+0x36c>
   16f9c:	movw	r1, #9828	; 0x2664
   16fa0:	movt	r1, #2
   16fa4:	mov	r0, r6
   16fa8:	bl	177a4 <test_scan@@Base+0xaa8>
   16fac:	cmp	r0, #4
   16fb0:	bne	17078 <test_scan@@Base+0x37c>
   16fb4:	movw	r1, #10994	; 0x2af2
   16fb8:	movt	r1, #2
   16fbc:	mov	r0, r6
   16fc0:	mov	r2, #8
   16fc4:	bl	177f4 <test_scan@@Base+0xaf8>
   16fc8:	cmp	r0, #4
   16fcc:	bne	17088 <test_scan@@Base+0x38c>
   16fd0:	mov	r0, r6
   16fd4:	bl	1784c <test_scan@@Base+0xb50>
   16fd8:	cmp	r0, #2
   16fdc:	bne	17098 <test_scan@@Base+0x39c>
   16fe0:	mvn	r8, #0
   16fe4:	movw	r3, #9828	; 0x2664
   16fe8:	movt	r3, #2
   16fec:	mov	r0, r6
   16ff0:	mov	r1, #2
   16ff4:	mvn	r2, #0
   16ff8:	bl	178b8 <test_scan@@Base+0xbbc>
   16ffc:	cmp	r0, #2
   17000:	bne	170a8 <test_scan@@Base+0x3ac>
   17004:	mov	r0, r6
   17008:	bl	17930 <test_scan@@Base+0xc34>
   1700c:	cmp	r0, #2
   17010:	bne	170b8 <test_scan@@Base+0x3bc>
   17014:	mvn	r8, #0
   17018:	movw	r3, #9828	; 0x2664
   1701c:	movt	r3, #2
   17020:	mov	r0, r6
   17024:	mov	r1, #3
   17028:	mvn	r2, #0
   1702c:	bl	178b8 <test_scan@@Base+0xbbc>
   17030:	cmp	r0, #4
   17034:	bne	170c8 <test_scan@@Base+0x3cc>
   17038:	movw	r3, #10933	; 0x2ab5
   1703c:	movt	r3, #2
   17040:	mov	r0, r6
   17044:	mov	r1, #1
   17048:	mov	r2, #3
   1704c:	bl	1773c <test_scan@@Base+0xa40>
   17050:	cmn	r0, #1
   17054:	beq	170d8 <test_scan@@Base+0x3dc>
   17058:	movw	r0, #26080	; 0x65e0
   1705c:	movt	r0, #2
   17060:	bl	12eec <puts@plt>
   17064:	b	16f20 <test_scan@@Base+0x224>
   17068:	movw	r0, #24288	; 0x5ee0
   1706c:	movt	r0, #2
   17070:	bl	12eec <puts@plt>
   17074:	b	16f20 <test_scan@@Base+0x224>
   17078:	movw	r0, #24288	; 0x5ee0
   1707c:	movt	r0, #2
   17080:	bl	12eec <puts@plt>
   17084:	b	16f20 <test_scan@@Base+0x224>
   17088:	movw	r0, #26208	; 0x6660
   1708c:	movt	r0, #2
   17090:	bl	12eec <puts@plt>
   17094:	b	16f20 <test_scan@@Base+0x224>
   17098:	movw	r0, #26208	; 0x6660
   1709c:	movt	r0, #2
   170a0:	bl	12eec <puts@plt>
   170a4:	b	16f20 <test_scan@@Base+0x224>
   170a8:	movw	r0, #26160	; 0x6630
   170ac:	movt	r0, #2
   170b0:	bl	12eec <puts@plt>
   170b4:	b	16f20 <test_scan@@Base+0x224>
   170b8:	movw	r0, #26160	; 0x6630
   170bc:	movt	r0, #2
   170c0:	bl	12eec <puts@plt>
   170c4:	b	16f20 <test_scan@@Base+0x224>
   170c8:	movw	r0, #26128	; 0x6610
   170cc:	movt	r0, #2
   170d0:	bl	12eec <puts@plt>
   170d4:	b	16f20 <test_scan@@Base+0x224>
   170d8:	movw	r3, #9746	; 0x2612
   170dc:	movt	r3, #2
   170e0:	mov	r0, r6
   170e4:	mov	r1, #1
   170e8:	mov	r2, #3
   170ec:	bl	1773c <test_scan@@Base+0xa40>
   170f0:	cmn	r0, #1
   170f4:	beq	17108 <test_scan@@Base+0x40c>
   170f8:	movw	r0, #26032	; 0x65b0
   170fc:	movt	r0, #2
   17100:	bl	12eec <puts@plt>
   17104:	b	16f20 <test_scan@@Base+0x224>
   17108:	movw	r3, #9788	; 0x263c
   1710c:	movt	r3, #2
   17110:	mov	r0, r6
   17114:	mov	r1, #1
   17118:	mov	r2, #3
   1711c:	bl	1773c <test_scan@@Base+0xa40>
   17120:	cmp	r0, #1
   17124:	bne	17178 <test_scan@@Base+0x47c>
   17128:	movw	r3, #9828	; 0x2664
   1712c:	movt	r3, #2
   17130:	mov	r0, r6
   17134:	mov	r1, #1
   17138:	mov	r2, #3
   1713c:	bl	178b8 <test_scan@@Base+0xbbc>
   17140:	cmp	r0, #2
   17144:	bne	17188 <test_scan@@Base+0x48c>
   17148:	movw	r3, #10841	; 0x2a59
   1714c:	movt	r3, #2
   17150:	mov	r0, r6
   17154:	mov	r1, #1
   17158:	mov	r2, #3
   1715c:	bl	178b8 <test_scan@@Base+0xbbc>
   17160:	cmn	r0, #1
   17164:	beq	17198 <test_scan@@Base+0x49c>
   17168:	movw	r0, #25888	; 0x6520
   1716c:	movt	r0, #2
   17170:	bl	12eec <puts@plt>
   17174:	b	16f20 <test_scan@@Base+0x224>
   17178:	movw	r0, #25984	; 0x6580
   1717c:	movt	r0, #2
   17180:	bl	12eec <puts@plt>
   17184:	b	16f20 <test_scan@@Base+0x224>
   17188:	movw	r0, #25936	; 0x6550
   1718c:	movt	r0, #2
   17190:	bl	12eec <puts@plt>
   17194:	b	16f20 <test_scan@@Base+0x224>
   17198:	movw	r3, #10933	; 0x2ab5
   1719c:	movt	r3, #2
   171a0:	mov	r0, r6
   171a4:	mov	r1, #1
   171a8:	mov	r2, #3
   171ac:	bl	1799c <test_scan@@Base+0xca0>
   171b0:	cmn	r0, #1
   171b4:	beq	171c8 <test_scan@@Base+0x4cc>
   171b8:	movw	r0, #25840	; 0x64f0
   171bc:	movt	r0, #2
   171c0:	bl	12eec <puts@plt>
   171c4:	b	16f20 <test_scan@@Base+0x224>
   171c8:	movw	r3, #9746	; 0x2612
   171cc:	movt	r3, #2
   171d0:	mov	r0, r6
   171d4:	mov	r1, #1
   171d8:	mov	r2, #3
   171dc:	bl	1799c <test_scan@@Base+0xca0>
   171e0:	cmn	r0, #1
   171e4:	beq	171f8 <test_scan@@Base+0x4fc>
   171e8:	movw	r0, #25792	; 0x64c0
   171ec:	movt	r0, #2
   171f0:	bl	12eec <puts@plt>
   171f4:	b	16f20 <test_scan@@Base+0x224>
   171f8:	movw	r3, #9788	; 0x263c
   171fc:	movt	r3, #2
   17200:	mov	r0, r6
   17204:	mov	r1, #1
   17208:	mov	r2, #3
   1720c:	bl	1799c <test_scan@@Base+0xca0>
   17210:	cmp	r0, #1
   17214:	bne	17268 <test_scan@@Base+0x56c>
   17218:	movw	r3, #9828	; 0x2664
   1721c:	movt	r3, #2
   17220:	mov	r0, r6
   17224:	mov	r1, #1
   17228:	mov	r2, #3
   1722c:	bl	179a0 <test_scan@@Base+0xca4>
   17230:	cmp	r0, #2
   17234:	bne	17278 <test_scan@@Base+0x57c>
   17238:	movw	r3, #10841	; 0x2a59
   1723c:	movt	r3, #2
   17240:	mov	r0, r6
   17244:	mov	r1, #1
   17248:	mov	r2, #3
   1724c:	bl	179a0 <test_scan@@Base+0xca4>
   17250:	cmn	r0, #1
   17254:	beq	17288 <test_scan@@Base+0x58c>
   17258:	movw	r0, #25648	; 0x6430
   1725c:	movt	r0, #2
   17260:	bl	12eec <puts@plt>
   17264:	b	16f20 <test_scan@@Base+0x224>
   17268:	movw	r0, #25744	; 0x6490
   1726c:	movt	r0, #2
   17270:	bl	12eec <puts@plt>
   17274:	b	16f20 <test_scan@@Base+0x224>
   17278:	movw	r0, #25696	; 0x6460
   1727c:	movt	r0, #2
   17280:	bl	12eec <puts@plt>
   17284:	b	16f20 <test_scan@@Base+0x224>
   17288:	movw	r3, #9746	; 0x2612
   1728c:	movt	r3, #2
   17290:	mov	r0, r6
   17294:	mov	r1, #0
   17298:	mov	r2, #0
   1729c:	bl	1773c <test_scan@@Base+0xa40>
   172a0:	cmn	r0, #1
   172a4:	beq	172b8 <test_scan@@Base+0x5bc>
   172a8:	movw	r0, #25616	; 0x6410
   172ac:	movt	r0, #2
   172b0:	bl	12eec <puts@plt>
   172b4:	b	16f20 <test_scan@@Base+0x224>
   172b8:	movw	r3, #9788	; 0x263c
   172bc:	movt	r3, #2
   172c0:	mov	r0, r6
   172c4:	mov	r1, #0
   172c8:	mov	r2, #0
   172cc:	bl	1773c <test_scan@@Base+0xa40>
   172d0:	cmn	r0, #1
   172d4:	beq	172e8 <test_scan@@Base+0x5ec>
   172d8:	movw	r0, #25584	; 0x63f0
   172dc:	movt	r0, #2
   172e0:	bl	12eec <puts@plt>
   172e4:	b	16f20 <test_scan@@Base+0x224>
   172e8:	movw	r3, #9788	; 0x263c
   172ec:	movt	r3, #2
   172f0:	mov	r0, r6
   172f4:	mov	r1, #1
   172f8:	mov	r2, #1
   172fc:	bl	1773c <test_scan@@Base+0xa40>
   17300:	cmn	r0, #1
   17304:	beq	17378 <test_scan@@Base+0x67c>
   17308:	movw	r0, #25536	; 0x63c0
   1730c:	movt	r0, #2
   17310:	bl	12eec <puts@plt>
   17314:	b	16f20 <test_scan@@Base+0x224>
   17318:	movw	r0, #10871	; 0x2a77
   1731c:	movt	r0, #2
   17320:	movw	r1, #9622	; 0x2596
   17324:	movt	r1, #2
   17328:	movw	r3, #10948	; 0x2ac4
   1732c:	movt	r3, #2
   17330:	movw	r2, #1305	; 0x519
   17334:	bl	12f88 <__assert_fail@plt>
   17338:	movw	r0, #10982	; 0x2ae6
   1733c:	movt	r0, #2
   17340:	movw	r1, #9622	; 0x2596
   17344:	movt	r1, #2
   17348:	movw	r3, #10948	; 0x2ac4
   1734c:	movt	r3, #2
   17350:	movw	r2, #1307	; 0x51b
   17354:	bl	12f88 <__assert_fail@plt>
   17358:	movw	r0, #10986	; 0x2aea
   1735c:	movt	r0, #2
   17360:	movw	r1, #9622	; 0x2596
   17364:	movt	r1, #2
   17368:	movw	r3, #10948	; 0x2ac4
   1736c:	movt	r3, #2
   17370:	movw	r2, #1309	; 0x51d
   17374:	bl	12f88 <__assert_fail@plt>
   17378:	mov	r0, r6
   1737c:	bl	15464 <verify_monster@@Base+0xec0>
   17380:	mov	r1, r0
   17384:	mvn	r8, #0
   17388:	movw	r3, #9746	; 0x2612
   1738c:	movt	r3, #2
   17390:	mov	r0, r6
   17394:	mvn	r2, #0
   17398:	bl	1773c <test_scan@@Base+0xa40>
   1739c:	cmn	r0, #1
   173a0:	beq	173b4 <test_scan@@Base+0x6b8>
   173a4:	movw	r0, #25488	; 0x6390
   173a8:	movt	r0, #2
   173ac:	bl	12eec <puts@plt>
   173b0:	b	16f20 <test_scan@@Base+0x224>
   173b4:	movw	r3, #9746	; 0x2612
   173b8:	movt	r3, #2
   173bc:	mov	r0, r6
   173c0:	mov	r1, #0
   173c4:	mov	r2, #0
   173c8:	bl	1799c <test_scan@@Base+0xca0>
   173cc:	cmn	r0, #1
   173d0:	beq	173e4 <test_scan@@Base+0x6e8>
   173d4:	movw	r0, #25616	; 0x6410
   173d8:	movt	r0, #2
   173dc:	bl	12eec <puts@plt>
   173e0:	b	16f20 <test_scan@@Base+0x224>
   173e4:	movw	r3, #9788	; 0x263c
   173e8:	movt	r3, #2
   173ec:	mov	r0, r6
   173f0:	mov	r1, #0
   173f4:	mov	r2, #0
   173f8:	bl	1799c <test_scan@@Base+0xca0>
   173fc:	cmn	r0, #1
   17400:	beq	17414 <test_scan@@Base+0x718>
   17404:	movw	r0, #25584	; 0x63f0
   17408:	movt	r0, #2
   1740c:	bl	12eec <puts@plt>
   17410:	b	16f20 <test_scan@@Base+0x224>
   17414:	movw	r3, #9788	; 0x263c
   17418:	movt	r3, #2
   1741c:	mov	r0, r6
   17420:	mov	r1, #1
   17424:	mov	r2, #1
   17428:	bl	1799c <test_scan@@Base+0xca0>
   1742c:	cmn	r0, #1
   17430:	beq	17444 <test_scan@@Base+0x748>
   17434:	movw	r0, #25536	; 0x63c0
   17438:	movt	r0, #2
   1743c:	bl	12eec <puts@plt>
   17440:	b	16f20 <test_scan@@Base+0x224>
   17444:	mov	r0, r6
   17448:	bl	15464 <verify_monster@@Base+0xec0>
   1744c:	mov	r1, r0
   17450:	mvn	r8, #0
   17454:	movw	r3, #9746	; 0x2612
   17458:	movt	r3, #2
   1745c:	mov	r0, r6
   17460:	mvn	r2, #0
   17464:	bl	1799c <test_scan@@Base+0xca0>
   17468:	cmn	r0, #1
   1746c:	beq	17480 <test_scan@@Base+0x784>
   17470:	movw	r0, #25488	; 0x6390
   17474:	movt	r0, #2
   17478:	bl	12eec <puts@plt>
   1747c:	b	16f20 <test_scan@@Base+0x224>
   17480:	movw	r1, #9788	; 0x263c
   17484:	movt	r1, #2
   17488:	mov	r0, r6
   1748c:	bl	17a0c <test_scan@@Base+0xd10>
   17490:	cmp	r0, #1
   17494:	bne	174c0 <test_scan@@Base+0x7c4>
   17498:	movw	r1, #10933	; 0x2ab5
   1749c:	movt	r1, #2
   174a0:	mov	r0, r6
   174a4:	bl	17a0c <test_scan@@Base+0xd10>
   174a8:	cmp	r0, #0
   174ac:	beq	174d0 <test_scan@@Base+0x7d4>
   174b0:	movw	r0, #25424	; 0x6350
   174b4:	movt	r0, #2
   174b8:	bl	12eec <puts@plt>
   174bc:	b	16f20 <test_scan@@Base+0x224>
   174c0:	movw	r0, #25456	; 0x6370
   174c4:	movt	r0, #2
   174c8:	bl	12eec <puts@plt>
   174cc:	b	16f20 <test_scan@@Base+0x224>
   174d0:	movw	r1, #9746	; 0x2612
   174d4:	movt	r1, #2
   174d8:	mov	r0, r6
   174dc:	bl	17a0c <test_scan@@Base+0xd10>
   174e0:	cmp	r0, #1
   174e4:	bne	17524 <test_scan@@Base+0x828>
   174e8:	movw	r1, #9828	; 0x2664
   174ec:	movt	r1, #2
   174f0:	mov	r0, r6
   174f4:	bl	17a0c <test_scan@@Base+0xd10>
   174f8:	cmp	r0, #2
   174fc:	bne	17534 <test_scan@@Base+0x838>
   17500:	mov	r0, r5
   17504:	mov	r1, #6
   17508:	bl	17a50 <test_scan@@Base+0xd54>
   1750c:	cmp	r0, #0
   17510:	beq	17544 <test_scan@@Base+0x848>
   17514:	movw	r0, #25312	; 0x62e0
   17518:	movt	r0, #2
   1751c:	bl	12eec <puts@plt>
   17520:	b	16f20 <test_scan@@Base+0x224>
   17524:	movw	r0, #25392	; 0x6330
   17528:	movt	r0, #2
   1752c:	bl	12eec <puts@plt>
   17530:	b	16f20 <test_scan@@Base+0x224>
   17534:	movw	r0, #25360	; 0x6310
   17538:	movt	r0, #2
   1753c:	bl	12eec <puts@plt>
   17540:	b	16f20 <test_scan@@Base+0x224>
   17544:	mov	r0, r5
   17548:	mov	r1, #1
   1754c:	bl	17a50 <test_scan@@Base+0xd54>
   17550:	cmp	r0, #2
   17554:	bne	17580 <test_scan@@Base+0x884>
   17558:	mov	r0, r5
   1755c:	mov	r1, #3
   17560:	mov	r2, #1
   17564:	bl	17aa8 <test_scan@@Base+0xdac>
   17568:	cmn	r0, #1
   1756c:	beq	17590 <test_scan@@Base+0x894>
   17570:	movw	r0, #25200	; 0x6270
   17574:	movt	r0, #2
   17578:	bl	12eec <puts@plt>
   1757c:	b	16f20 <test_scan@@Base+0x224>
   17580:	movw	r0, #25264	; 0x62b0
   17584:	movt	r0, #2
   17588:	bl	12eec <puts@plt>
   1758c:	b	16f20 <test_scan@@Base+0x224>
   17590:	mov	r0, r5
   17594:	mov	r1, #5
   17598:	bl	17a50 <test_scan@@Base+0xd54>
   1759c:	cmn	r0, #1
   175a0:	beq	175b4 <test_scan@@Base+0x8b8>
   175a4:	movw	r0, #25088	; 0x6200
   175a8:	movt	r0, #2
   175ac:	bl	12eec <puts@plt>
   175b0:	b	16f20 <test_scan@@Base+0x224>
   175b4:	mov	r0, r5
   175b8:	mov	r1, #2
   175bc:	bl	17a50 <test_scan@@Base+0xd54>
   175c0:	cmp	r0, #6
   175c4:	bne	17694 <test_scan@@Base+0x998>
   175c8:	mov	r0, r5
   175cc:	mov	r1, #3
   175d0:	bl	17a50 <test_scan@@Base+0xd54>
   175d4:	cmp	r0, #3
   175d8:	bne	176a4 <test_scan@@Base+0x9a8>
   175dc:	mov	r0, r5
   175e0:	mov	r1, #3
   175e4:	mov	r2, #3
   175e8:	bl	17aa8 <test_scan@@Base+0xdac>
   175ec:	cmp	r0, #3
   175f0:	bne	176b4 <test_scan@@Base+0x9b8>
   175f4:	mov	r0, r5
   175f8:	mov	r1, #4
   175fc:	mov	r2, #3
   17600:	bl	17aa8 <test_scan@@Base+0xdac>
   17604:	cmp	r0, #5
   17608:	bne	176c4 <test_scan@@Base+0x9c8>
   1760c:	mov	r0, r5
   17610:	bl	17b00 <test_scan@@Base+0xe04>
   17614:	cmp	r0, #5
   17618:	bne	176d4 <test_scan@@Base+0x9d8>
   1761c:	mov	r0, r5
   17620:	bl	17b40 <test_scan@@Base+0xe44>
   17624:	cmp	r0, #3
   17628:	bne	176e4 <test_scan@@Base+0x9e8>
   1762c:	mov	r0, r7
   17630:	bl	17b94 <test_scan@@Base+0xe98>
   17634:	mov	r0, r7
   17638:	bl	17bf0 <test_scan@@Base+0xef4>
   1763c:	mov	r0, r7
   17640:	bl	17c4c <test_scan@@Base+0xf50>
   17644:	mov	r0, r7
   17648:	bl	17cac <test_scan@@Base+0xfb0>
   1764c:	mov	r0, r7
   17650:	bl	17d0c <test_scan@@Base+0x1010>
   17654:	mov	r0, r7
   17658:	bl	17d54 <test_scan@@Base+0x1058>
   1765c:	mov	r0, r7
   17660:	bl	17d9c <test_scan@@Base+0x10a0>
   17664:	mov	r0, r7
   17668:	bl	17de8 <test_scan@@Base+0x10ec>
   1766c:	mov	r0, r6
   17670:	bl	17e34 <test_scan@@Base+0x1138>
   17674:	mov	r0, r6
   17678:	bl	17e84 <test_scan@@Base+0x1188>
   1767c:	mov	r0, r6
   17680:	bl	17ed4 <test_scan@@Base+0x11d8>
   17684:	mov	r0, r6
   17688:	bl	17f10 <test_scan@@Base+0x1214>
   1768c:	mov	r8, #0
   17690:	b	16f20 <test_scan@@Base+0x224>
   17694:	movw	r0, #25152	; 0x6240
   17698:	movt	r0, #2
   1769c:	bl	12eec <puts@plt>
   176a0:	b	16f20 <test_scan@@Base+0x224>
   176a4:	movw	r0, #25088	; 0x6200
   176a8:	movt	r0, #2
   176ac:	bl	12eec <puts@plt>
   176b0:	b	16f20 <test_scan@@Base+0x224>
   176b4:	movw	r0, #25024	; 0x61c0
   176b8:	movt	r0, #2
   176bc:	bl	12eec <puts@plt>
   176c0:	b	16f20 <test_scan@@Base+0x224>
   176c4:	movw	r0, #24960	; 0x6180
   176c8:	movt	r0, #2
   176cc:	bl	12eec <puts@plt>
   176d0:	b	16f20 <test_scan@@Base+0x224>
   176d4:	movw	r0, #24896	; 0x6140
   176d8:	movt	r0, #2
   176dc:	bl	12eec <puts@plt>
   176e0:	b	16f20 <test_scan@@Base+0x224>
   176e4:	movw	r0, #24832	; 0x6100
   176e8:	movt	r0, #2
   176ec:	bl	12eec <puts@plt>
   176f0:	b	16f20 <test_scan@@Base+0x224>
   176f4:	b	1ed50 <flatcc_builder_start_offset_vector@@Base>
   176f8:	push	{r4, sl, fp, lr}
   176fc:	add	fp, sp, #8
   17700:	mov	r4, r0
   17704:	bl	1ee04 <flatcc_builder_end_offset_vector@@Base>
   17708:	mov	r1, r0
   1770c:	mov	r0, r4
   17710:	pop	{r4, sl, fp, lr}
   17714:	b	1c8a0 <main@@Base+0x1564>
   17718:	b	17740 <test_scan@@Base+0xa44>
   1771c:	movw	r1, #9788	; 0x263c
   17720:	movt	r1, #2
   17724:	b	177a4 <test_scan@@Base+0xaa8>
   17728:	b	1cbf0 <main@@Base+0x18b4>
   1772c:	movw	r1, #10926	; 0x2aae
   17730:	movt	r1, #2
   17734:	mov	r2, #5
   17738:	b	177f4 <test_scan@@Base+0xaf8>
   1773c:	b	178b8 <test_scan@@Base+0xbbc>
   17740:	push	{r4, r5, r6, r7, fp, lr}
   17744:	add	fp, sp, #16
   17748:	mov	r5, r1
   1774c:	mov	r6, r0
   17750:	bl	15464 <verify_monster@@Base+0xec0>
   17754:	mvn	r4, #0
   17758:	cmp	r0, #0
   1775c:	beq	1779c <test_scan@@Base+0xaa0>
   17760:	mov	r7, #0
   17764:	mov	r0, r6
   17768:	mov	r1, r7
   1776c:	bl	15478 <verify_monster@@Base+0xed4>
   17770:	bl	15010 <verify_monster@@Base+0xa6c>
   17774:	mov	r1, r5
   17778:	bl	1cbec <main@@Base+0x18b0>
   1777c:	cmp	r0, #0
   17780:	moveq	r0, r7
   17784:	popeq	{r4, r5, r6, r7, fp, pc}
   17788:	add	r7, r7, #1
   1778c:	mov	r0, r6
   17790:	bl	15464 <verify_monster@@Base+0xec0>
   17794:	cmp	r7, r0
   17798:	bcc	17764 <test_scan@@Base+0xa68>
   1779c:	mov	r0, r4
   177a0:	pop	{r4, r5, r6, r7, fp, pc}
   177a4:	push	{r4, r5, r6, sl, fp, lr}
   177a8:	add	fp, sp, #16
   177ac:	mov	r4, r1
   177b0:	mov	r5, r0
   177b4:	bl	15464 <verify_monster@@Base+0xec0>
   177b8:	sub	r1, r0, #1
   177bc:	mov	r6, r1
   177c0:	cmn	r1, #1
   177c4:	beq	177ec <test_scan@@Base+0xaf0>
   177c8:	mov	r0, r5
   177cc:	mov	r1, r6
   177d0:	bl	15478 <verify_monster@@Base+0xed4>
   177d4:	bl	15010 <verify_monster@@Base+0xa6c>
   177d8:	mov	r1, r4
   177dc:	bl	1cbec <main@@Base+0x18b0>
   177e0:	sub	r1, r6, #1
   177e4:	cmp	r0, #0
   177e8:	bne	177bc <test_scan@@Base+0xac0>
   177ec:	mov	r0, r6
   177f0:	pop	{r4, r5, r6, sl, fp, pc}
   177f4:	push	{r4, r5, r6, r7, fp, lr}
   177f8:	add	fp, sp, #16
   177fc:	mov	r4, r2
   17800:	mov	r5, r1
   17804:	mov	r6, r0
   17808:	bl	15464 <verify_monster@@Base+0xec0>
   1780c:	sub	r1, r0, #1
   17810:	mov	r7, r1
   17814:	cmn	r1, #1
   17818:	beq	17844 <test_scan@@Base+0xb48>
   1781c:	mov	r0, r6
   17820:	mov	r1, r7
   17824:	bl	15478 <verify_monster@@Base+0xed4>
   17828:	bl	15010 <verify_monster@@Base+0xa6c>
   1782c:	mov	r1, r5
   17830:	mov	r2, r4
   17834:	bl	1cb94 <main@@Base+0x1858>
   17838:	sub	r1, r7, #1
   1783c:	cmp	r0, #0
   17840:	bne	17810 <test_scan@@Base+0xb14>
   17844:	mov	r0, r7
   17848:	pop	{r4, r5, r6, r7, fp, pc}
   1784c:	push	{r4, r5, r6, sl, fp, lr}
   17850:	add	fp, sp, #16
   17854:	mov	r4, r0
   17858:	bl	15464 <verify_monster@@Base+0xec0>
   1785c:	mov	r5, r0
   17860:	cmp	r0, #3
   17864:	movcs	r5, #3
   17868:	movw	r6, #10994	; 0x2af2
   1786c:	movt	r6, #2
   17870:	cmp	r5, #2
   17874:	bcc	178ac <test_scan@@Base+0xbb0>
   17878:	sub	r5, r5, #1
   1787c:	mov	r0, r4
   17880:	mov	r1, r5
   17884:	bl	15478 <verify_monster@@Base+0xed4>
   17888:	bl	15010 <verify_monster@@Base+0xa6c>
   1788c:	mov	r1, r6
   17890:	mov	r2, #8
   17894:	bl	1cb94 <main@@Base+0x1858>
   17898:	cmp	r0, #0
   1789c:	moveq	r0, r5
   178a0:	popeq	{r4, r5, r6, sl, fp, pc}
   178a4:	cmp	r5, #2
   178a8:	bcs	17878 <test_scan@@Base+0xb7c>
   178ac:	mvn	r5, #0
   178b0:	mov	r0, r5
   178b4:	pop	{r4, r5, r6, sl, fp, pc}
   178b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   178bc:	add	fp, sp, #24
   178c0:	mov	r4, r3
   178c4:	mov	r6, r2
   178c8:	mov	r5, r1
   178cc:	mov	r7, r0
   178d0:	bl	15464 <verify_monster@@Base+0xec0>
   178d4:	cmp	r0, r6
   178d8:	movhi	r0, r6
   178dc:	mvn	r8, #0
   178e0:	cmp	r0, r5
   178e4:	bls	17928 <test_scan@@Base+0xc2c>
   178e8:	mov	r0, r7
   178ec:	mov	r1, r5
   178f0:	bl	15478 <verify_monster@@Base+0xed4>
   178f4:	bl	15010 <verify_monster@@Base+0xa6c>
   178f8:	mov	r1, r4
   178fc:	bl	1cbec <main@@Base+0x18b0>
   17900:	cmp	r0, #0
   17904:	moveq	r0, r5
   17908:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1790c:	mov	r0, r7
   17910:	bl	15464 <verify_monster@@Base+0xec0>
   17914:	cmp	r0, r6
   17918:	movhi	r0, r6
   1791c:	add	r5, r5, #1
   17920:	cmp	r5, r0
   17924:	bcc	178e8 <test_scan@@Base+0xbec>
   17928:	mov	r0, r8
   1792c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17930:	push	{r4, r5, r6, r7, fp, lr}
   17934:	add	fp, sp, #16
   17938:	mov	r5, r0
   1793c:	bl	15464 <verify_monster@@Base+0xec0>
   17940:	mvn	r4, #0
   17944:	cmp	r0, #3
   17948:	bcc	17994 <test_scan@@Base+0xc98>
   1794c:	mov	r6, #2
   17950:	movw	r7, #10994	; 0x2af2
   17954:	movt	r7, #2
   17958:	mov	r0, r5
   1795c:	mov	r1, r6
   17960:	bl	15478 <verify_monster@@Base+0xed4>
   17964:	bl	15010 <verify_monster@@Base+0xa6c>
   17968:	mov	r1, r7
   1796c:	mov	r2, #8
   17970:	bl	1cb94 <main@@Base+0x1858>
   17974:	cmp	r0, #0
   17978:	moveq	r0, r6
   1797c:	popeq	{r4, r5, r6, r7, fp, pc}
   17980:	add	r6, r6, #1
   17984:	mov	r0, r5
   17988:	bl	15464 <verify_monster@@Base+0xec0>
   1798c:	cmp	r6, r0
   17990:	bcc	17958 <test_scan@@Base+0xc5c>
   17994:	mov	r0, r4
   17998:	pop	{r4, r5, r6, r7, fp, pc}
   1799c:	b	179a0 <test_scan@@Base+0xca4>
   179a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   179a4:	add	fp, sp, #24
   179a8:	mov	r4, r3
   179ac:	mov	r8, r2
   179b0:	mov	r5, r1
   179b4:	mov	r6, r0
   179b8:	bl	15464 <verify_monster@@Base+0xec0>
   179bc:	mov	r7, r0
   179c0:	cmp	r0, r8
   179c4:	movhi	r7, r8
   179c8:	cmp	r7, r5
   179cc:	bls	17a00 <test_scan@@Base+0xd04>
   179d0:	sub	r7, r7, #1
   179d4:	mov	r0, r6
   179d8:	mov	r1, r7
   179dc:	bl	15478 <verify_monster@@Base+0xed4>
   179e0:	bl	15010 <verify_monster@@Base+0xa6c>
   179e4:	mov	r1, r4
   179e8:	bl	1cbec <main@@Base+0x18b0>
   179ec:	cmp	r0, #0
   179f0:	moveq	r0, r7
   179f4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   179f8:	cmp	r7, r5
   179fc:	bhi	179d0 <test_scan@@Base+0xcd4>
   17a00:	mvn	r7, #0
   17a04:	mov	r0, r7
   17a08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17a0c:	push	{r4, r5, r6, sl, fp, lr}
   17a10:	add	fp, sp, #16
   17a14:	mov	r4, r1
   17a18:	mov	r5, r0
   17a1c:	bl	17718 <test_scan@@Base+0xa1c>
   17a20:	mov	r6, #0
   17a24:	b	17a40 <test_scan@@Base+0xd44>
   17a28:	add	r1, r0, #1
   17a2c:	mov	r0, r5
   17a30:	mvn	r2, #0
   17a34:	mov	r3, r4
   17a38:	bl	1773c <test_scan@@Base+0xa40>
   17a3c:	add	r6, r6, #1
   17a40:	cmn	r0, #1
   17a44:	moveq	r0, r6
   17a48:	popeq	{r4, r5, r6, sl, fp, pc}
   17a4c:	b	17a28 <test_scan@@Base+0xd2c>
   17a50:	push	{r4, r5, r6, r7, fp, lr}
   17a54:	add	fp, sp, #16
   17a58:	mov	r5, r1
   17a5c:	mov	r6, r0
   17a60:	bl	151d0 <verify_monster@@Base+0xc2c>
   17a64:	mvn	r4, #0
   17a68:	cmp	r0, #0
   17a6c:	beq	17aa0 <test_scan@@Base+0xda4>
   17a70:	mov	r7, #0
   17a74:	mov	r0, r6
   17a78:	mov	r1, r7
   17a7c:	bl	151d4 <verify_monster@@Base+0xc30>
   17a80:	cmp	r0, r5
   17a84:	moveq	r0, r7
   17a88:	popeq	{r4, r5, r6, r7, fp, pc}
   17a8c:	add	r7, r7, #1
   17a90:	mov	r0, r6
   17a94:	bl	151d0 <verify_monster@@Base+0xc2c>
   17a98:	cmp	r7, r0
   17a9c:	bcc	17a74 <test_scan@@Base+0xd78>
   17aa0:	mov	r0, r4
   17aa4:	pop	{r4, r5, r6, r7, fp, pc}
   17aa8:	push	{r4, r5, r6, r7, fp, lr}
   17aac:	add	fp, sp, #16
   17ab0:	mov	r6, r2
   17ab4:	mov	r5, r1
   17ab8:	mov	r7, r0
   17abc:	bl	151d0 <verify_monster@@Base+0xc2c>
   17ac0:	mvn	r4, #0
   17ac4:	cmp	r0, r5
   17ac8:	bls	17af8 <test_scan@@Base+0xdfc>
   17acc:	mov	r0, r7
   17ad0:	mov	r1, r5
   17ad4:	bl	151d4 <verify_monster@@Base+0xc30>
   17ad8:	cmp	r0, r6
   17adc:	moveq	r0, r5
   17ae0:	popeq	{r4, r5, r6, r7, fp, pc}
   17ae4:	add	r5, r5, #1
   17ae8:	mov	r0, r7
   17aec:	bl	151d0 <verify_monster@@Base+0xc2c>
   17af0:	cmp	r5, r0
   17af4:	bcc	17acc <test_scan@@Base+0xdd0>
   17af8:	mov	r0, r4
   17afc:	pop	{r4, r5, r6, r7, fp, pc}
   17b00:	push	{r4, r5, fp, lr}
   17b04:	add	fp, sp, #8
   17b08:	mov	r4, r0
   17b0c:	bl	151d0 <verify_monster@@Base+0xc2c>
   17b10:	sub	r1, r0, #1
   17b14:	mov	r5, r1
   17b18:	cmn	r1, #1
   17b1c:	beq	17b38 <test_scan@@Base+0xe3c>
   17b20:	mov	r0, r4
   17b24:	mov	r1, r5
   17b28:	bl	151d4 <verify_monster@@Base+0xc30>
   17b2c:	sub	r1, r5, #1
   17b30:	cmp	r0, #3
   17b34:	bne	17b14 <test_scan@@Base+0xe18>
   17b38:	mov	r0, r5
   17b3c:	pop	{r4, r5, fp, pc}
   17b40:	push	{r4, r5, fp, lr}
   17b44:	add	fp, sp, #8
   17b48:	mov	r4, r0
   17b4c:	bl	151d0 <verify_monster@@Base+0xc2c>
   17b50:	mov	r5, r0
   17b54:	cmp	r0, #4
   17b58:	movcs	r5, #4
   17b5c:	cmp	r5, #2
   17b60:	bcc	17b88 <test_scan@@Base+0xe8c>
   17b64:	sub	r5, r5, #1
   17b68:	mov	r0, r4
   17b6c:	mov	r1, r5
   17b70:	bl	151d4 <verify_monster@@Base+0xc30>
   17b74:	cmp	r0, #3
   17b78:	moveq	r0, r5
   17b7c:	popeq	{r4, r5, fp, pc}
   17b80:	cmp	r5, #2
   17b84:	bcs	17b64 <test_scan@@Base+0xe68>
   17b88:	mvn	r5, #0
   17b8c:	mov	r0, r5
   17b90:	pop	{r4, r5, fp, pc}
   17b94:	push	{r4, r5, r6, sl, fp, lr}
   17b98:	add	fp, sp, #16
   17b9c:	mov	r4, r0
   17ba0:	bl	15544 <verify_monster@@Base+0xfa0>
   17ba4:	cmp	r0, #0
   17ba8:	beq	17bec <test_scan@@Base+0xef0>
   17bac:	mov	r5, #0
   17bb0:	movw	r6, #10018	; 0x2722
   17bb4:	movt	r6, #2
   17bb8:	b	17bd0 <test_scan@@Base+0xed4>
   17bbc:	add	r5, r5, #1
   17bc0:	mov	r0, r4
   17bc4:	bl	15544 <verify_monster@@Base+0xfa0>
   17bc8:	cmp	r5, r0
   17bcc:	popcs	{r4, r5, r6, sl, fp, pc}
   17bd0:	mov	r0, r4
   17bd4:	mov	r1, r5
   17bd8:	bl	15558 <verify_monster@@Base+0xfb4>
   17bdc:	mov	r1, r6
   17be0:	bl	1cbec <main@@Base+0x18b0>
   17be4:	cmp	r0, #0
   17be8:	bne	17bbc <test_scan@@Base+0xec0>
   17bec:	pop	{r4, r5, r6, sl, fp, pc}
   17bf0:	push	{r4, r5, r6, sl, fp, lr}
   17bf4:	add	fp, sp, #16
   17bf8:	mov	r4, r0
   17bfc:	bl	15544 <verify_monster@@Base+0xfa0>
   17c00:	cmp	r0, #0
   17c04:	beq	17c48 <test_scan@@Base+0xf4c>
   17c08:	mov	r5, #0
   17c0c:	movw	r6, #10018	; 0x2722
   17c10:	movt	r6, #2
   17c14:	b	17c2c <test_scan@@Base+0xf30>
   17c18:	add	r5, r5, #1
   17c1c:	mov	r0, r4
   17c20:	bl	15544 <verify_monster@@Base+0xfa0>
   17c24:	cmp	r5, r0
   17c28:	popcs	{r4, r5, r6, sl, fp, pc}
   17c2c:	mov	r0, r4
   17c30:	mov	r1, r5
   17c34:	bl	15558 <verify_monster@@Base+0xfb4>
   17c38:	mov	r1, r6
   17c3c:	bl	1cbec <main@@Base+0x18b0>
   17c40:	cmp	r0, #0
   17c44:	bne	17c18 <test_scan@@Base+0xf1c>
   17c48:	pop	{r4, r5, r6, sl, fp, pc}
   17c4c:	push	{r4, r5, r6, sl, fp, lr}
   17c50:	add	fp, sp, #16
   17c54:	mov	r4, r0
   17c58:	bl	15544 <verify_monster@@Base+0xfa0>
   17c5c:	cmp	r0, #0
   17c60:	beq	17ca8 <test_scan@@Base+0xfac>
   17c64:	mov	r5, #0
   17c68:	movw	r6, #10018	; 0x2722
   17c6c:	movt	r6, #2
   17c70:	b	17c88 <test_scan@@Base+0xf8c>
   17c74:	add	r5, r5, #1
   17c78:	mov	r0, r4
   17c7c:	bl	15544 <verify_monster@@Base+0xfa0>
   17c80:	cmp	r5, r0
   17c84:	popcs	{r4, r5, r6, sl, fp, pc}
   17c88:	mov	r0, r4
   17c8c:	mov	r1, r5
   17c90:	bl	15558 <verify_monster@@Base+0xfb4>
   17c94:	mov	r1, r6
   17c98:	mov	r2, #4
   17c9c:	bl	1cb94 <main@@Base+0x1858>
   17ca0:	cmp	r0, #0
   17ca4:	bne	17c74 <test_scan@@Base+0xf78>
   17ca8:	pop	{r4, r5, r6, sl, fp, pc}
   17cac:	push	{r4, r5, r6, sl, fp, lr}
   17cb0:	add	fp, sp, #16
   17cb4:	mov	r4, r0
   17cb8:	bl	15544 <verify_monster@@Base+0xfa0>
   17cbc:	cmp	r0, #0
   17cc0:	beq	17d08 <test_scan@@Base+0x100c>
   17cc4:	mov	r5, #0
   17cc8:	movw	r6, #10018	; 0x2722
   17ccc:	movt	r6, #2
   17cd0:	b	17ce8 <test_scan@@Base+0xfec>
   17cd4:	add	r5, r5, #1
   17cd8:	mov	r0, r4
   17cdc:	bl	15544 <verify_monster@@Base+0xfa0>
   17ce0:	cmp	r5, r0
   17ce4:	popcs	{r4, r5, r6, sl, fp, pc}
   17ce8:	mov	r0, r4
   17cec:	mov	r1, r5
   17cf0:	bl	15558 <verify_monster@@Base+0xfb4>
   17cf4:	mov	r1, r6
   17cf8:	mov	r2, #4
   17cfc:	bl	1cb94 <main@@Base+0x1858>
   17d00:	cmp	r0, #0
   17d04:	bne	17cd4 <test_scan@@Base+0xfd8>
   17d08:	pop	{r4, r5, r6, sl, fp, pc}
   17d0c:	push	{r4, r5, r6, sl, fp, lr}
   17d10:	add	fp, sp, #16
   17d14:	mov	r4, r0
   17d18:	bl	15544 <verify_monster@@Base+0xfa0>
   17d1c:	sub	r5, r0, #1
   17d20:	movw	r6, #10018	; 0x2722
   17d24:	movt	r6, #2
   17d28:	cmn	r5, #1
   17d2c:	popeq	{r4, r5, r6, sl, fp, pc}
   17d30:	mov	r0, r4
   17d34:	mov	r1, r5
   17d38:	bl	15558 <verify_monster@@Base+0xfb4>
   17d3c:	mov	r1, r6
   17d40:	bl	1cbec <main@@Base+0x18b0>
   17d44:	sub	r5, r5, #1
   17d48:	cmp	r0, #0
   17d4c:	bne	17d28 <test_scan@@Base+0x102c>
   17d50:	pop	{r4, r5, r6, sl, fp, pc}
   17d54:	push	{r4, r5, r6, sl, fp, lr}
   17d58:	add	fp, sp, #16
   17d5c:	mov	r4, r0
   17d60:	bl	15544 <verify_monster@@Base+0xfa0>
   17d64:	sub	r5, r0, #1
   17d68:	movw	r6, #10018	; 0x2722
   17d6c:	movt	r6, #2
   17d70:	cmn	r5, #1
   17d74:	popeq	{r4, r5, r6, sl, fp, pc}
   17d78:	mov	r0, r4
   17d7c:	mov	r1, r5
   17d80:	bl	15558 <verify_monster@@Base+0xfb4>
   17d84:	mov	r1, r6
   17d88:	bl	1cbec <main@@Base+0x18b0>
   17d8c:	sub	r5, r5, #1
   17d90:	cmp	r0, #0
   17d94:	bne	17d70 <test_scan@@Base+0x1074>
   17d98:	pop	{r4, r5, r6, sl, fp, pc}
   17d9c:	push	{r4, r5, r6, sl, fp, lr}
   17da0:	add	fp, sp, #16
   17da4:	mov	r4, r0
   17da8:	bl	15544 <verify_monster@@Base+0xfa0>
   17dac:	sub	r5, r0, #1
   17db0:	movw	r6, #10018	; 0x2722
   17db4:	movt	r6, #2
   17db8:	cmn	r5, #1
   17dbc:	popeq	{r4, r5, r6, sl, fp, pc}
   17dc0:	mov	r0, r4
   17dc4:	mov	r1, r5
   17dc8:	bl	15558 <verify_monster@@Base+0xfb4>
   17dcc:	mov	r1, r6
   17dd0:	mov	r2, #4
   17dd4:	bl	1cb94 <main@@Base+0x1858>
   17dd8:	sub	r5, r5, #1
   17ddc:	cmp	r0, #0
   17de0:	bne	17db8 <test_scan@@Base+0x10bc>
   17de4:	pop	{r4, r5, r6, sl, fp, pc}
   17de8:	push	{r4, r5, r6, sl, fp, lr}
   17dec:	add	fp, sp, #16
   17df0:	mov	r4, r0
   17df4:	bl	15544 <verify_monster@@Base+0xfa0>
   17df8:	sub	r5, r0, #1
   17dfc:	movw	r6, #10018	; 0x2722
   17e00:	movt	r6, #2
   17e04:	cmn	r5, #1
   17e08:	popeq	{r4, r5, r6, sl, fp, pc}
   17e0c:	mov	r0, r4
   17e10:	mov	r1, r5
   17e14:	bl	15558 <verify_monster@@Base+0xfb4>
   17e18:	mov	r1, r6
   17e1c:	mov	r2, #4
   17e20:	bl	1cb94 <main@@Base+0x1858>
   17e24:	sub	r5, r5, #1
   17e28:	cmp	r0, #0
   17e2c:	bne	17e04 <test_scan@@Base+0x1108>
   17e30:	pop	{r4, r5, r6, sl, fp, pc}
   17e34:	push	{r4, r5, fp, lr}
   17e38:	add	fp, sp, #8
   17e3c:	mov	r4, r0
   17e40:	bl	15464 <verify_monster@@Base+0xec0>
   17e44:	cmp	r0, #0
   17e48:	beq	17e80 <test_scan@@Base+0x1184>
   17e4c:	mov	r5, #0
   17e50:	b	17e68 <test_scan@@Base+0x116c>
   17e54:	add	r5, r5, #1
   17e58:	mov	r0, r4
   17e5c:	bl	15464 <verify_monster@@Base+0xec0>
   17e60:	cmp	r5, r0
   17e64:	popcs	{r4, r5, fp, pc}
   17e68:	mov	r0, r4
   17e6c:	mov	r1, r5
   17e70:	bl	15478 <verify_monster@@Base+0xed4>
   17e74:	bl	13244 <verify_empty_monster@@Base+0x1bc>
   17e78:	cmp	r0, #13
   17e7c:	bne	17e54 <test_scan@@Base+0x1158>
   17e80:	pop	{r4, r5, fp, pc}
   17e84:	push	{r4, r5, fp, lr}
   17e88:	add	fp, sp, #8
   17e8c:	mov	r4, r0
   17e90:	bl	15464 <verify_monster@@Base+0xec0>
   17e94:	cmp	r0, #2
   17e98:	bcc	17ed0 <test_scan@@Base+0x11d4>
   17e9c:	mov	r5, #1
   17ea0:	b	17eb8 <test_scan@@Base+0x11bc>
   17ea4:	add	r5, r5, #1
   17ea8:	mov	r0, r4
   17eac:	bl	15464 <verify_monster@@Base+0xec0>
   17eb0:	cmp	r5, r0
   17eb4:	popcs	{r4, r5, fp, pc}
   17eb8:	mov	r0, r4
   17ebc:	mov	r1, r5
   17ec0:	bl	15478 <verify_monster@@Base+0xed4>
   17ec4:	bl	13244 <verify_empty_monster@@Base+0x1bc>
   17ec8:	cmp	r0, #42	; 0x2a
   17ecc:	bne	17ea4 <test_scan@@Base+0x11a8>
   17ed0:	pop	{r4, r5, fp, pc}
   17ed4:	push	{r4, r5, fp, lr}
   17ed8:	add	fp, sp, #8
   17edc:	mov	r4, r0
   17ee0:	bl	15464 <verify_monster@@Base+0xec0>
   17ee4:	sub	r5, r0, #1
   17ee8:	cmn	r5, #1
   17eec:	popeq	{r4, r5, fp, pc}
   17ef0:	mov	r0, r4
   17ef4:	mov	r1, r5
   17ef8:	bl	15478 <verify_monster@@Base+0xed4>
   17efc:	bl	13244 <verify_empty_monster@@Base+0x1bc>
   17f00:	sub	r5, r5, #1
   17f04:	cmp	r0, #1
   17f08:	bne	17ee8 <test_scan@@Base+0x11ec>
   17f0c:	pop	{r4, r5, fp, pc}
   17f10:	push	{r4, r5, fp, lr}
   17f14:	add	fp, sp, #8
   17f18:	mov	r4, r0
   17f1c:	bl	15464 <verify_monster@@Base+0xec0>
   17f20:	mvn	r0, r0
   17f24:	cmn	r0, #3
   17f28:	mvnls	r0, #2
   17f2c:	mvn	r1, #1
   17f30:	sub	r5, r1, r0
   17f34:	cmn	r5, #1
   17f38:	popeq	{r4, r5, fp, pc}
   17f3c:	mov	r0, r4
   17f40:	mov	r1, r5
   17f44:	bl	15478 <verify_monster@@Base+0xed4>
   17f48:	bl	13244 <verify_empty_monster@@Base+0x1bc>
   17f4c:	sub	r5, r5, #1
   17f50:	cmp	r0, #42	; 0x2a
   17f54:	bne	17f34 <test_scan@@Base+0x1238>
   17f58:	pop	{r4, r5, fp, pc}

00017f5c <test_basic_sort@@Base>:
   17f5c:	push	{r4, r5, r6, r7, fp, lr}
   17f60:	add	fp, sp, #16
   17f64:	sub	sp, sp, #16
   17f68:	mov	r4, r0
   17f6c:	mov	r0, #2
   17f70:	strb	r0, [sp, #10]
   17f74:	mov	r0, #772	; 0x304
   17f78:	strh	r0, [sp, #8]
   17f7c:	movw	r0, #1798	; 0x706
   17f80:	movt	r0, #769	; 0x301
   17f84:	str	r0, [sp, #4]
   17f88:	mov	r0, r4
   17f8c:	bl	1db08 <flatcc_builder_reset@@Base>
   17f90:	mov	r0, r4
   17f94:	bl	15fd0 <gen_monster@@Base+0x4cc>
   17f98:	movw	r1, #9185	; 0x23e1
   17f9c:	movt	r1, #2
   17fa0:	mov	r0, r4
   17fa4:	bl	13d44 <test_empty_monster@@Base+0x11c>
   17fa8:	add	r1, sp, #4
   17fac:	mov	r0, r4
   17fb0:	mov	r2, #7
   17fb4:	bl	16084 <gen_monster@@Base+0x580>
   17fb8:	mov	r0, r4
   17fbc:	bl	163d0 <gen_monster@@Base+0x8cc>
   17fc0:	add	r1, sp, #12
   17fc4:	mov	r0, r4
   17fc8:	bl	2081c <flatcc_builder_get_direct_buffer@@Base>
   17fcc:	bl	13204 <verify_empty_monster@@Base+0x17c>
   17fd0:	bl	15154 <verify_monster@@Base+0xbb0>
   17fd4:	mov	r4, r0
   17fd8:	bl	180b4 <test_basic_sort@@Base+0x158>
   17fdc:	mov	r0, r4
   17fe0:	bl	151d0 <verify_monster@@Base+0xc2c>
   17fe4:	cmp	r0, #7
   17fe8:	bne	18094 <test_basic_sort@@Base+0x138>
   17fec:	mov	r0, r4
   17ff0:	bl	151d0 <verify_monster@@Base+0xc2c>
   17ff4:	cmp	r0, #0
   17ff8:	beq	18064 <test_basic_sort@@Base+0x108>
   17ffc:	mov	r5, #0
   18000:	movw	r6, #21008	; 0x5210
   18004:	movt	r6, #2
   18008:	mov	r7, #0
   1800c:	mov	r0, r4
   18010:	mov	r1, r5
   18014:	bl	151d4 <verify_monster@@Base+0xc30>
   18018:	mov	r1, r0
   1801c:	ldrb	r0, [r6, r5]
   18020:	cmp	r1, r0
   18024:	bne	18070 <test_basic_sort@@Base+0x114>
   18028:	mov	r0, r4
   1802c:	bl	180b8 <test_basic_sort@@Base+0x15c>
   18030:	uxtb	r1, r7
   18034:	cmp	r1, #3
   18038:	mov	r1, r7
   1803c:	movweq	r1, #2
   18040:	uxtb	r1, r1
   18044:	cmp	r0, r1
   18048:	bne	1807c <test_basic_sort@@Base+0x120>
   1804c:	add	r7, r7, #1
   18050:	uxtb	r5, r7
   18054:	mov	r0, r4
   18058:	bl	151d0 <verify_monster@@Base+0xc2c>
   1805c:	cmp	r0, r5
   18060:	bhi	1800c <test_basic_sort@@Base+0xb0>
   18064:	mov	r0, #0
   18068:	sub	sp, fp, #16
   1806c:	pop	{r4, r5, r6, r7, fp, pc}
   18070:	movw	r0, #26432	; 0x6740
   18074:	movt	r0, #2
   18078:	b	18084 <test_basic_sort@@Base+0x128>
   1807c:	movw	r0, #26400	; 0x6720
   18080:	movt	r0, #2
   18084:	bl	12eec <puts@plt>
   18088:	mvn	r0, #0
   1808c:	sub	sp, fp, #16
   18090:	pop	{r4, r5, r6, r7, fp, pc}
   18094:	movw	r0, #11005	; 0x2afd
   18098:	movt	r0, #2
   1809c:	movw	r1, #9622	; 0x2596
   180a0:	movt	r1, #2
   180a4:	movw	r3, #11051	; 0x2b2b
   180a8:	movt	r3, #2
   180ac:	mov	r2, #1552	; 0x610
   180b0:	bl	12f88 <__assert_fail@plt>
   180b4:	b	1cc5c <main@@Base+0x1920>
   180b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   180bc:	add	fp, sp, #24
   180c0:	mov	r8, r1
   180c4:	mov	r6, r0
   180c8:	bl	151d0 <verify_monster@@Base+0xc2c>
   180cc:	mvn	r5, #0
   180d0:	cmp	r0, #0
   180d4:	beq	18124 <test_basic_sort@@Base+0x1c8>
   180d8:	mov	r5, #0
   180dc:	subs	r4, r0, #1
   180e0:	beq	18110 <test_basic_sort@@Base+0x1b4>
   180e4:	sub	r0, r4, r5
   180e8:	add	r7, r5, r0, lsr #1
   180ec:	mov	r0, r6
   180f0:	mov	r1, r7
   180f4:	bl	151d4 <verify_monster@@Base+0xc30>
   180f8:	cmp	r0, r8
   180fc:	movcs	r4, r7
   18100:	addcc	r5, r7, #1
   18104:	cmp	r4, r5
   18108:	bhi	180e4 <test_basic_sort@@Base+0x188>
   1810c:	bne	1812c <test_basic_sort@@Base+0x1d0>
   18110:	mov	r0, r6
   18114:	mov	r1, r5
   18118:	bl	151d4 <verify_monster@@Base+0xc30>
   1811c:	cmp	r0, r8
   18120:	mvnne	r5, #0
   18124:	mov	r0, r5
   18128:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1812c:	mvn	r5, #0
   18130:	mov	r0, r5
   18134:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00018138 <test_clone_slice@@Base>:
   18138:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1813c:	add	fp, sp, #28
   18140:	sub	sp, sp, #20
   18144:	mov	r5, r0
   18148:	mov	r0, #0
   1814c:	strb	r0, [sp, #14]
   18150:	mov	r0, #1
   18154:	strh	r0, [sp, #12]
   18158:	mov	r0, #256	; 0x100
   1815c:	str	r0, [sp, #8]
   18160:	mov	r0, r5
   18164:	bl	1db08 <flatcc_builder_reset@@Base>
   18168:	mov	r0, r5
   1816c:	bl	15fd0 <gen_monster@@Base+0x4cc>
   18170:	movw	r1, #11091	; 0x2b53
   18174:	movt	r1, #2
   18178:	mov	r0, r5
   1817c:	bl	13d44 <test_empty_monster@@Base+0x11c>
   18180:	add	r1, sp, #8
   18184:	mov	r0, r5
   18188:	bl	18694 <test_clone_slice@@Base+0x55c>
   1818c:	mov	r0, r5
   18190:	bl	160a4 <gen_monster@@Base+0x5a0>
   18194:	mov	r0, r5
   18198:	mov	r1, #2
   1819c:	bl	160a8 <gen_monster@@Base+0x5a4>
   181a0:	mov	r1, #22
   181a4:	strh	r1, [r0]
   181a8:	mov	r1, #44	; 0x2c
   181ac:	strh	r1, [r0, #4]
   181b0:	mov	r0, r5
   181b4:	bl	16124 <gen_monster@@Base+0x620>
   181b8:	mov	r0, r5
   181bc:	bl	16038 <gen_monster@@Base+0x534>
   181c0:	movw	r1, #13107	; 0x3333
   181c4:	movt	r1, #49705	; 0xc229
   181c8:	str	r1, [r0]
   181cc:	mov	r0, r5
   181d0:	bl	163d0 <gen_monster@@Base+0x8cc>
   181d4:	add	r1, sp, #16
   181d8:	mov	r0, r5
   181dc:	bl	20950 <flatcc_builder_finalize_aligned_buffer@@Base>
   181e0:	mov	r8, r0
   181e4:	movw	sl, #36976	; 0x9070
   181e8:	movt	sl, #3
   181ec:	ldr	r3, [sl]
   181f0:	ldr	r2, [sp, #16]
   181f4:	movw	r0, #11102	; 0x2b5e
   181f8:	movt	r0, #2
   181fc:	mov	r1, r8
   18200:	bl	1364c <test_type_aliases@@Base+0x254>
   18204:	mov	r0, r8
   18208:	bl	13204 <verify_empty_monster@@Base+0x17c>
   1820c:	mov	r6, r0
   18210:	mov	r0, r5
   18214:	bl	1db08 <flatcc_builder_reset@@Base>
   18218:	mov	r0, r5
   1821c:	bl	15fd0 <gen_monster@@Base+0x4cc>
   18220:	mov	r0, r6
   18224:	bl	15010 <verify_monster@@Base+0xa6c>
   18228:	mov	r7, r0
   1822c:	mov	r0, r6
   18230:	bl	15614 <verify_monster@@Base+0x1070>
   18234:	cmp	r0, #0
   18238:	beq	18630 <test_clone_slice@@Base+0x4f8>
   1823c:	mov	r4, r0
   18240:	mov	r0, r6
   18244:	bl	152f4 <verify_monster@@Base+0xd50>
   18248:	cmp	r0, #0
   1824c:	beq	18650 <test_clone_slice@@Base+0x518>
   18250:	mov	r9, r0
   18254:	mov	r0, r5
   18258:	mov	r1, r7
   1825c:	bl	186b4 <test_clone_slice@@Base+0x57c>
   18260:	mov	r0, r5
   18264:	bl	176f4 <test_scan@@Base+0x9f8>
   18268:	mov	r0, r5
   1826c:	mov	r1, r7
   18270:	bl	186d4 <test_clone_slice@@Base+0x59c>
   18274:	mov	r0, r5
   18278:	mov	r1, r7
   1827c:	mov	r2, #4
   18280:	mov	r3, #20
   18284:	bl	186f4 <test_clone_slice@@Base+0x5bc>
   18288:	mov	r0, r5
   1828c:	mov	r1, r7
   18290:	mov	r2, #0
   18294:	mov	r3, #3
   18298:	bl	186f4 <test_clone_slice@@Base+0x5bc>
   1829c:	mov	r0, r5
   182a0:	bl	176f8 <test_scan@@Base+0x9fc>
   182a4:	mov	r0, r5
   182a8:	bl	13d3c <test_empty_monster@@Base+0x114>
   182ac:	mov	r0, r5
   182b0:	mov	r1, r7
   182b4:	bl	18714 <test_clone_slice@@Base+0x5dc>
   182b8:	mov	r0, r5
   182bc:	mov	r1, r4
   182c0:	bl	1873c <test_clone_slice@@Base+0x604>
   182c4:	mov	r0, r5
   182c8:	mov	r1, r9
   182cc:	bl	1875c <test_clone_slice@@Base+0x624>
   182d0:	mov	r0, r5
   182d4:	bl	13d64 <test_empty_monster@@Base+0x13c>
   182d8:	mov	r1, r0
   182dc:	mov	r0, sp
   182e0:	bl	162b0 <gen_monster@@Base+0x7ac>
   182e4:	ldm	sp, {r1, r2}
   182e8:	mov	r0, r5
   182ec:	bl	16244 <gen_monster@@Base+0x740>
   182f0:	mov	r0, r5
   182f4:	mov	r1, r4
   182f8:	bl	1877c <test_clone_slice@@Base+0x644>
   182fc:	mov	r0, r6
   18300:	bl	13384 <verify_empty_monster@@Base+0x2fc>
   18304:	mov	r1, r0
   18308:	mov	r0, r5
   1830c:	bl	1879c <test_clone_slice@@Base+0x664>
   18310:	mov	r0, r5
   18314:	mov	r1, r9
   18318:	bl	187c8 <test_clone_slice@@Base+0x690>
   1831c:	mov	r0, r5
   18320:	bl	163d0 <gen_monster@@Base+0x8cc>
   18324:	add	r1, sp, #16
   18328:	mov	r0, r5
   1832c:	bl	2081c <flatcc_builder_get_direct_buffer@@Base>
   18330:	mov	r4, r0
   18334:	ldr	r3, [sl]
   18338:	ldr	r2, [sp, #16]
   1833c:	movw	r0, #11181	; 0x2bad
   18340:	movt	r0, #2
   18344:	mov	r1, r4
   18348:	bl	1364c <test_type_aliases@@Base+0x254>
   1834c:	mov	r0, r4
   18350:	bl	13204 <verify_empty_monster@@Base+0x17c>
   18354:	mov	r5, r0
   18358:	bl	15010 <verify_monster@@Base+0xa6c>
   1835c:	movw	r1, #11091	; 0x2b53
   18360:	movt	r1, #2
   18364:	bl	12e8c <strcmp@plt>
   18368:	cmp	r0, #0
   1836c:	beq	1837c <test_clone_slice@@Base+0x244>
   18370:	movw	r0, #27056	; 0x69b0
   18374:	movt	r0, #2
   18378:	b	183fc <test_clone_slice@@Base+0x2c4>
   1837c:	mov	r0, r5
   18380:	bl	154c8 <verify_monster@@Base+0xf24>
   18384:	mov	r4, r0
   18388:	mov	r1, #0
   1838c:	bl	15558 <verify_monster@@Base+0xfb4>
   18390:	movw	r1, #11091	; 0x2b53
   18394:	movt	r1, #2
   18398:	bl	12e8c <strcmp@plt>
   1839c:	cmp	r0, #0
   183a0:	beq	183b0 <test_clone_slice@@Base+0x278>
   183a4:	movw	r0, #27024	; 0x6990
   183a8:	movt	r0, #2
   183ac:	b	183fc <test_clone_slice@@Base+0x2c4>
   183b0:	mov	r0, r4
   183b4:	mov	r1, #1
   183b8:	bl	15558 <verify_monster@@Base+0xfb4>
   183bc:	bl	15090 <verify_monster@@Base+0xaec>
   183c0:	cmp	r0, #6
   183c4:	bne	183f4 <test_clone_slice@@Base+0x2bc>
   183c8:	mov	r0, r4
   183cc:	mov	r1, #1
   183d0:	bl	15558 <verify_monster@@Base+0xfb4>
   183d4:	movw	r1, #11095	; 0x2b57
   183d8:	movt	r1, #2
   183dc:	bl	12e8c <strcmp@plt>
   183e0:	cmp	r0, #0
   183e4:	beq	18418 <test_clone_slice@@Base+0x2e0>
   183e8:	movw	r0, #26944	; 0x6940
   183ec:	movt	r0, #2
   183f0:	b	183fc <test_clone_slice@@Base+0x2c4>
   183f4:	movw	r0, #26976	; 0x6960
   183f8:	movt	r0, #2
   183fc:	bl	12eec <puts@plt>
   18400:	mvn	r4, #0
   18404:	mov	r0, r8
   18408:	bl	20a30 <flatcc_builder_aligned_free@@Base>
   1840c:	mov	r0, r4
   18410:	sub	sp, fp, #28
   18414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18418:	mov	r0, r4
   1841c:	mov	r1, #2
   18420:	bl	15558 <verify_monster@@Base+0xfb4>
   18424:	bl	15090 <verify_monster@@Base+0xaec>
   18428:	cmp	r0, #3
   1842c:	bne	1845c <test_clone_slice@@Base+0x324>
   18430:	mov	r0, r4
   18434:	mov	r1, #2
   18438:	bl	15558 <verify_monster@@Base+0xfb4>
   1843c:	movw	r1, #11204	; 0x2bc4
   18440:	movt	r1, #2
   18444:	bl	12e8c <strcmp@plt>
   18448:	cmp	r0, #0
   1844c:	beq	18468 <test_clone_slice@@Base+0x330>
   18450:	movw	r0, #26880	; 0x6900
   18454:	movt	r0, #2
   18458:	b	183fc <test_clone_slice@@Base+0x2c4>
   1845c:	movw	r0, #26912	; 0x6920
   18460:	movt	r0, #2
   18464:	b	183fc <test_clone_slice@@Base+0x2c4>
   18468:	mov	r0, r5
   1846c:	bl	1574c <verify_monster@@Base+0x11a8>
   18470:	cmp	r0, #0
   18474:	beq	18670 <test_clone_slice@@Base+0x538>
   18478:	mov	r6, r0
   1847c:	bl	15010 <verify_monster@@Base+0xa6c>
   18480:	movw	r1, #11093	; 0x2b55
   18484:	movt	r1, #2
   18488:	bl	12e8c <strcmp@plt>
   1848c:	cmp	r0, #0
   18490:	beq	184a4 <test_clone_slice@@Base+0x36c>
   18494:	movw	r0, #11208	; 0x2bc8
   18498:	movt	r0, #2
   1849c:	bl	12e98 <printf@plt>
   184a0:	b	18400 <test_clone_slice@@Base+0x2c8>
   184a4:	mov	r0, r6
   184a8:	bl	15614 <verify_monster@@Base+0x1070>
   184ac:	mov	r4, r0
   184b0:	bl	15690 <verify_monster@@Base+0x10ec>
   184b4:	cmp	r0, #7
   184b8:	bne	184e0 <test_clone_slice@@Base+0x3a8>
   184bc:	add	r1, sp, #8
   184c0:	mov	r0, r4
   184c4:	mov	r2, #7
   184c8:	bl	12ebc <memcmp@plt>
   184cc:	cmp	r0, #0
   184d0:	beq	184ec <test_clone_slice@@Base+0x3b4>
   184d4:	movw	r0, #26816	; 0x68c0
   184d8:	movt	r0, #2
   184dc:	b	183fc <test_clone_slice@@Base+0x2c4>
   184e0:	movw	r0, #26848	; 0x68e0
   184e4:	movt	r0, #2
   184e8:	b	183fc <test_clone_slice@@Base+0x2c4>
   184ec:	mov	r0, r5
   184f0:	bl	15614 <verify_monster@@Base+0x1070>
   184f4:	mov	r4, r0
   184f8:	bl	15690 <verify_monster@@Base+0x10ec>
   184fc:	cmp	r0, #4
   18500:	bne	18520 <test_clone_slice@@Base+0x3e8>
   18504:	ldr	r0, [r4]
   18508:	ldr	r1, [sp, #11]
   1850c:	cmp	r0, r1
   18510:	beq	1852c <test_clone_slice@@Base+0x3f4>
   18514:	movw	r0, #26752	; 0x6880
   18518:	movt	r0, #2
   1851c:	b	183fc <test_clone_slice@@Base+0x2c4>
   18520:	movw	r0, #26784	; 0x68a0
   18524:	movt	r0, #2
   18528:	b	183fc <test_clone_slice@@Base+0x2c4>
   1852c:	mov	r0, r5
   18530:	bl	13384 <verify_empty_monster@@Base+0x2fc>
   18534:	vldr	s0, [pc, #340]	; 18690 <test_clone_slice@@Base+0x558>
   18538:	vldr	s2, [r0]
   1853c:	vcmp.f32	s2, s0
   18540:	vmrs	APSR_nzcv, fpscr
   18544:	beq	18554 <test_clone_slice@@Base+0x41c>
   18548:	movw	r0, #26720	; 0x6860
   1854c:	movt	r0, #2
   18550:	b	183fc <test_clone_slice@@Base+0x2c4>
   18554:	mov	r0, r5
   18558:	bl	152f4 <verify_monster@@Base+0xd50>
   1855c:	mov	r4, r0
   18560:	bl	15370 <verify_monster@@Base+0xdcc>
   18564:	cmp	r0, #2
   18568:	bne	185f4 <test_clone_slice@@Base+0x4bc>
   1856c:	mov	r0, r4
   18570:	mov	r1, #0
   18574:	bl	15384 <verify_monster@@Base+0xde0>
   18578:	bl	153c4 <verify_monster@@Base+0xe20>
   1857c:	cmp	r0, #22
   18580:	bne	18600 <test_clone_slice@@Base+0x4c8>
   18584:	mov	r0, r4
   18588:	mov	r1, #0
   1858c:	bl	15384 <verify_monster@@Base+0xde0>
   18590:	ldrh	r0, [r0]
   18594:	cmp	r0, #22
   18598:	bne	1860c <test_clone_slice@@Base+0x4d4>
   1859c:	mov	r0, r4
   185a0:	mov	r1, #1
   185a4:	bl	15384 <verify_monster@@Base+0xde0>
   185a8:	bl	153c4 <verify_monster@@Base+0xe20>
   185ac:	cmp	r0, #44	; 0x2c
   185b0:	bne	18618 <test_clone_slice@@Base+0x4e0>
   185b4:	mov	r0, r6
   185b8:	bl	152f4 <verify_monster@@Base+0xd50>
   185bc:	mov	r5, r0
   185c0:	bl	15370 <verify_monster@@Base+0xdcc>
   185c4:	cmp	r0, #1
   185c8:	bne	18624 <test_clone_slice@@Base+0x4ec>
   185cc:	mov	r4, #0
   185d0:	mov	r0, r5
   185d4:	mov	r1, #0
   185d8:	bl	15384 <verify_monster@@Base+0xde0>
   185dc:	bl	153c4 <verify_monster@@Base+0xe20>
   185e0:	cmp	r0, #44	; 0x2c
   185e4:	beq	18404 <test_clone_slice@@Base+0x2cc>
   185e8:	movw	r0, #26464	; 0x6760
   185ec:	movt	r0, #2
   185f0:	b	183fc <test_clone_slice@@Base+0x2c4>
   185f4:	movw	r0, #26656	; 0x6820
   185f8:	movt	r0, #2
   185fc:	b	183fc <test_clone_slice@@Base+0x2c4>
   18600:	movw	r0, #26624	; 0x6800
   18604:	movt	r0, #2
   18608:	b	183fc <test_clone_slice@@Base+0x2c4>
   1860c:	movw	r0, #26576	; 0x67d0
   18610:	movt	r0, #2
   18614:	b	183fc <test_clone_slice@@Base+0x2c4>
   18618:	movw	r0, #26544	; 0x67b0
   1861c:	movt	r0, #2
   18620:	b	183fc <test_clone_slice@@Base+0x2c4>
   18624:	movw	r0, #26512	; 0x6790
   18628:	movt	r0, #2
   1862c:	b	183fc <test_clone_slice@@Base+0x2c4>
   18630:	movw	r0, #11169	; 0x2ba1
   18634:	movt	r0, #2
   18638:	movw	r1, #9622	; 0x2596
   1863c:	movt	r1, #2
   18640:	movw	r3, #11128	; 0x2b78
   18644:	movt	r3, #2
   18648:	movw	r2, #1606	; 0x646
   1864c:	bl	12f88 <__assert_fail@plt>
   18650:	movw	r0, #11175	; 0x2ba7
   18654:	movt	r0, #2
   18658:	movw	r1, #9622	; 0x2596
   1865c:	movt	r1, #2
   18660:	movw	r3, #11128	; 0x2b78
   18664:	movt	r3, #2
   18668:	movw	r2, #1608	; 0x648
   1866c:	bl	12f88 <__assert_fail@plt>
   18670:	movw	r0, #9618	; 0x2592
   18674:	movt	r0, #2
   18678:	movw	r1, #9622	; 0x2596
   1867c:	movt	r1, #2
   18680:	movw	r3, #11128	; 0x2b78
   18684:	movt	r3, #2
   18688:	mov	r2, #1664	; 0x680
   1868c:	bl	12f88 <__assert_fail@plt>
   18690:	eorgt	r3, r9, #-872415232	; 0xcc000000
   18694:	push	{r4, sl, fp, lr}
   18698:	add	fp, sp, #8
   1869c:	mov	r4, r0
   186a0:	bl	1cd68 <main@@Base+0x1a2c>
   186a4:	mov	r1, r0
   186a8:	mov	r0, r4
   186ac:	pop	{r4, sl, fp, lr}
   186b0:	b	1c8d8 <main@@Base+0x159c>
   186b4:	push	{r4, sl, fp, lr}
   186b8:	add	fp, sp, #8
   186bc:	mov	r4, r0
   186c0:	bl	1cd98 <main@@Base+0x1a5c>
   186c4:	mov	r1, r0
   186c8:	mov	r0, r4
   186cc:	pop	{r4, sl, fp, lr}
   186d0:	b	16148 <gen_monster@@Base+0x644>
   186d4:	push	{r4, sl, fp, lr}
   186d8:	add	fp, sp, #8
   186dc:	mov	r4, r0
   186e0:	bl	1cd98 <main@@Base+0x1a5c>
   186e4:	mov	r1, r0
   186e8:	mov	r0, r4
   186ec:	pop	{r4, sl, fp, lr}
   186f0:	b	1cdc4 <main@@Base+0x1a88>
   186f4:	push	{r4, sl, fp, lr}
   186f8:	add	fp, sp, #8
   186fc:	mov	r4, r0
   18700:	bl	1cdd0 <main@@Base+0x1a94>
   18704:	mov	r1, r0
   18708:	mov	r0, r4
   1870c:	pop	{r4, sl, fp, lr}
   18710:	b	1cdc4 <main@@Base+0x1a88>
   18714:	push	{r4, sl, fp, lr}
   18718:	add	fp, sp, #8
   1871c:	mov	r4, r0
   18720:	mov	r2, #2
   18724:	mov	r3, #20
   18728:	bl	1cdd0 <main@@Base+0x1a94>
   1872c:	mov	r1, r0
   18730:	mov	r0, r4
   18734:	pop	{r4, sl, fp, lr}
   18738:	b	16148 <gen_monster@@Base+0x644>
   1873c:	push	{r4, sl, fp, lr}
   18740:	add	fp, sp, #8
   18744:	mov	r4, r0
   18748:	bl	1ce14 <main@@Base+0x1ad8>
   1874c:	mov	r1, r0
   18750:	mov	r0, r4
   18754:	pop	{r4, sl, fp, lr}
   18758:	b	1c8d8 <main@@Base+0x159c>
   1875c:	push	{r4, sl, fp, lr}
   18760:	add	fp, sp, #8
   18764:	mov	r4, r0
   18768:	bl	1ce5c <main@@Base+0x1b20>
   1876c:	mov	r1, r0
   18770:	mov	r0, r4
   18774:	pop	{r4, sl, fp, lr}
   18778:	b	1c83c <main@@Base+0x1500>
   1877c:	push	{r4, sl, fp, lr}
   18780:	add	fp, sp, #8
   18784:	mov	r4, r0
   18788:	bl	1ced0 <main@@Base+0x1b94>
   1878c:	mov	r1, r0
   18790:	mov	r0, r4
   18794:	pop	{r4, sl, fp, lr}
   18798:	b	1c8d8 <main@@Base+0x159c>
   1879c:	push	{fp, lr}
   187a0:	mov	fp, sp
   187a4:	sub	sp, sp, #8
   187a8:	mov	r2, r1
   187ac:	mov	r1, #16
   187b0:	str	r1, [sp]
   187b4:	mov	r1, #0
   187b8:	mov	r3, #32
   187bc:	bl	20674 <flatcc_builder_table_add_copy@@Base>
   187c0:	mov	sp, fp
   187c4:	pop	{fp, pc}
   187c8:	push	{r4, sl, fp, lr}
   187cc:	add	fp, sp, #8
   187d0:	mov	r4, r0
   187d4:	bl	1cf3c <main@@Base+0x1c00>
   187d8:	mov	r1, r0
   187dc:	mov	r0, r4
   187e0:	pop	{r4, sl, fp, lr}
   187e4:	b	1c83c <main@@Base+0x1500>

000187e8 <test_create_add_field@@Base>:
   187e8:	push	{r4, r5, r6, sl, fp, lr}
   187ec:	add	fp, sp, #16
   187f0:	sub	sp, sp, #8
   187f4:	mov	r5, r0
   187f8:	bl	1db08 <flatcc_builder_reset@@Base>
   187fc:	mov	r0, r5
   18800:	bl	15fd0 <gen_monster@@Base+0x4cc>
   18804:	movw	r1, #9185	; 0x23e1
   18808:	movt	r1, #2
   1880c:	mov	r0, r5
   18810:	bl	13d44 <test_empty_monster@@Base+0x11c>
   18814:	movw	r1, #11256	; 0x2bf8
   18818:	movt	r1, #2
   1881c:	mov	r0, r5
   18820:	bl	161f4 <gen_monster@@Base+0x6f0>
   18824:	mov	r1, r0
   18828:	mov	r0, r5
   1882c:	bl	188bc <test_create_add_field@@Base+0xd4>
   18830:	mov	r4, #0
   18834:	mov	r0, r5
   18838:	mov	r1, #0
   1883c:	bl	188dc <test_create_add_field@@Base+0xf4>
   18840:	mov	r0, r5
   18844:	bl	163d0 <gen_monster@@Base+0x8cc>
   18848:	add	r1, sp, #4
   1884c:	mov	r0, r5
   18850:	bl	20950 <flatcc_builder_finalize_aligned_buffer@@Base>
   18854:	mov	r5, r0
   18858:	bl	13204 <verify_empty_monster@@Base+0x17c>
   1885c:	mov	r6, r0
   18860:	bl	18904 <test_create_add_field@@Base+0x11c>
   18864:	cmp	r0, #0
   18868:	beq	18878 <test_create_add_field@@Base+0x90>
   1886c:	movw	r0, #27120	; 0x69f0
   18870:	movt	r0, #2
   18874:	b	188a0 <test_create_add_field@@Base+0xb8>
   18878:	mov	r0, r6
   1887c:	bl	15954 <verify_monster@@Base+0x13b0>
   18880:	bl	1896c <test_create_add_field@@Base+0x184>
   18884:	mvn	r2, #99	; 0x63
   18888:	eor	r0, r0, r2
   1888c:	mvn	r1, r1
   18890:	orrs	r0, r0, r1
   18894:	beq	188a8 <test_create_add_field@@Base+0xc0>
   18898:	movw	r0, #27088	; 0x69d0
   1889c:	movt	r0, #2
   188a0:	bl	12eec <puts@plt>
   188a4:	mvn	r4, #0
   188a8:	mov	r0, r5
   188ac:	bl	20a30 <flatcc_builder_aligned_free@@Base>
   188b0:	mov	r0, r4
   188b4:	sub	sp, fp, #16
   188b8:	pop	{r4, r5, r6, sl, fp, pc}
   188bc:	push	{r4, sl, fp, lr}
   188c0:	add	fp, sp, #8
   188c4:	mov	r4, r0
   188c8:	bl	1cf84 <main@@Base+0x1c48>
   188cc:	mov	r1, r0
   188d0:	mov	r0, r4
   188d4:	pop	{r4, sl, fp, lr}
   188d8:	b	1c924 <main@@Base+0x15e8>
   188dc:	push	{r4, sl, fp, lr}
   188e0:	add	fp, sp, #8
   188e4:	cmp	r1, #0
   188e8:	popeq	{r4, sl, fp, pc}
   188ec:	mov	r4, r1
   188f0:	mov	r1, #12
   188f4:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   188f8:	cmp	r0, #0
   188fc:	strne	r4, [r0]
   18900:	pop	{r4, sl, fp, pc}
   18904:	push	{r4, sl, fp, lr}
   18908:	add	fp, sp, #8
   1890c:	cmp	r0, #0
   18910:	beq	1894c <test_create_add_field@@Base+0x164>
   18914:	mov	r4, r0
   18918:	bl	1b5d8 <main@@Base+0x29c>
   1891c:	sub	r4, r4, r0
   18920:	mov	r0, r4
   18924:	bl	1b5e0 <main@@Base+0x2a4>
   18928:	mov	r1, r0
   1892c:	mov	r0, #0
   18930:	cmp	r1, #30
   18934:	popcc	{r4, sl, fp, pc}
   18938:	add	r0, r4, #28
   1893c:	bl	1b5e0 <main@@Base+0x2a4>
   18940:	cmp	r0, #0
   18944:	movwne	r0, #1
   18948:	pop	{r4, sl, fp, pc}
   1894c:	movw	r0, #12494	; 0x30ce
   18950:	movt	r0, #2
   18954:	movw	r1, #12532	; 0x30f4
   18958:	movt	r1, #2
   1895c:	movw	r3, #17151	; 0x42ff
   18960:	movt	r3, #2
   18964:	mov	r2, #716	; 0x2cc
   18968:	bl	12f88 <__assert_fail@plt>
   1896c:	push	{r4, r5, fp, lr}
   18970:	add	fp, sp, #8
   18974:	cmp	r0, #0
   18978:	beq	189c0 <test_create_add_field@@Base+0x1d8>
   1897c:	mov	r4, r0
   18980:	bl	1b5d8 <main@@Base+0x29c>
   18984:	sub	r5, r4, r0
   18988:	mov	r0, r5
   1898c:	bl	1b5e0 <main@@Base+0x2a4>
   18990:	cmp	r0, #8
   18994:	bcc	189b4 <test_create_add_field@@Base+0x1cc>
   18998:	add	r0, r5, #6
   1899c:	bl	1b5e0 <main@@Base+0x2a4>
   189a0:	cmp	r0, #0
   189a4:	beq	189b4 <test_create_add_field@@Base+0x1cc>
   189a8:	add	r0, r4, r0
   189ac:	pop	{r4, r5, fp, lr}
   189b0:	b	1bc70 <main@@Base+0x934>
   189b4:	mov	r0, #0
   189b8:	mov	r1, #0
   189bc:	pop	{r4, r5, fp, pc}
   189c0:	movw	r0, #12494	; 0x30ce
   189c4:	movt	r0, #2
   189c8:	movw	r1, #12532	; 0x30f4
   189cc:	movt	r1, #2
   189d0:	movw	r3, #17227	; 0x434b
   189d4:	movt	r3, #2
   189d8:	mov	r2, #608	; 0x260
   189dc:	bl	12f88 <__assert_fail@plt>

000189e0 <test_union_vector@@Base>:
   189e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   189e4:	add	fp, sp, #24
   189e8:	sub	sp, sp, #24
   189ec:	mov	r4, r0
   189f0:	bl	1db08 <flatcc_builder_reset@@Base>
   189f4:	mov	r0, r4
   189f8:	bl	15fd0 <gen_monster@@Base+0x4cc>
   189fc:	movw	r1, #11262	; 0x2bfe
   18a00:	movt	r1, #2
   18a04:	mov	r0, r4
   18a08:	bl	13d44 <test_empty_monster@@Base+0x11c>
   18a0c:	mov	r0, r4
   18a10:	bl	18c30 <test_union_vector@@Base+0x250>
   18a14:	mov	r5, r0
   18a18:	mov	r0, r4
   18a1c:	bl	18c58 <test_union_vector@@Base+0x278>
   18a20:	add	r0, sp, #12
   18a24:	mov	r1, r5
   18a28:	bl	18c60 <test_union_vector@@Base+0x280>
   18a2c:	ldr	r1, [sp, #12]
   18a30:	ldr	r2, [sp, #16]
   18a34:	mov	r0, r4
   18a38:	bl	18c5c <test_union_vector@@Base+0x27c>
   18a3c:	add	r0, sp, #4
   18a40:	mov	r1, r4
   18a44:	bl	18c70 <test_union_vector@@Base+0x290>
   18a48:	ldmib	sp, {r5, r6}
   18a4c:	mov	r0, r4
   18a50:	bl	18c80 <test_union_vector@@Base+0x2a0>
   18a54:	mov	r0, r4
   18a58:	mov	r1, r5
   18a5c:	mov	r2, r6
   18a60:	bl	18c84 <test_union_vector@@Base+0x2a4>
   18a64:	mov	r0, r4
   18a68:	bl	18cd4 <test_union_vector@@Base+0x2f4>
   18a6c:	mov	r0, r4
   18a70:	bl	163d0 <gen_monster@@Base+0x8cc>
   18a74:	add	r1, sp, #20
   18a78:	mov	r0, r4
   18a7c:	bl	20950 <flatcc_builder_finalize_aligned_buffer@@Base>
   18a80:	mov	r4, r0
   18a84:	ldr	r1, [sp, #20]
   18a88:	bl	13dc4 <test_empty_monster@@Base+0x19c>
   18a8c:	cmp	r0, #0
   18a90:	beq	18ab4 <test_union_vector@@Base+0xd4>
   18a94:	bl	21208 <flatcc_verify_error_string@@Base>
   18a98:	mov	r1, r0
   18a9c:	movw	r0, #11269	; 0x2c05
   18aa0:	movt	r0, #2
   18aa4:	bl	12e98 <printf@plt>
   18aa8:	mvn	r0, #0
   18aac:	sub	sp, fp, #24
   18ab0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18ab4:	mov	r0, r4
   18ab8:	bl	13204 <verify_empty_monster@@Base+0x17c>
   18abc:	mov	r5, r0
   18ac0:	bl	156dc <verify_monster@@Base+0x1138>
   18ac4:	cmp	r0, #4
   18ac8:	bne	18afc <test_union_vector@@Base+0x11c>
   18acc:	mov	r0, r5
   18ad0:	bl	1574c <verify_monster@@Base+0x11a8>
   18ad4:	cmp	r0, #0
   18ad8:	beq	18aec <test_union_vector@@Base+0x10c>
   18adc:	mov	r6, r0
   18ae0:	bl	18cfc <test_union_vector@@Base+0x31c>
   18ae4:	cmp	r0, #0
   18ae8:	beq	18b1c <test_union_vector@@Base+0x13c>
   18aec:	movw	r0, #27168	; 0x6a20
   18af0:	movt	r0, #2
   18af4:	bl	12eec <puts@plt>
   18af8:	b	18b08 <test_union_vector@@Base+0x128>
   18afc:	movw	r0, #11329	; 0x2c41
   18b00:	movt	r0, #2
   18b04:	bl	12e98 <printf@plt>
   18b08:	mov	r0, r4
   18b0c:	bl	20a30 <flatcc_builder_aligned_free@@Base>
   18b10:	mov	r0, #0
   18b14:	sub	sp, fp, #24
   18b18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18b1c:	mov	r0, r6
   18b20:	bl	18d64 <test_union_vector@@Base+0x384>
   18b24:	mov	r5, r0
   18b28:	mov	r0, r6
   18b2c:	bl	18de0 <test_union_vector@@Base+0x400>
   18b30:	mov	r7, r0
   18b34:	mov	r0, r5
   18b38:	bl	18e5c <test_union_vector@@Base+0x47c>
   18b3c:	cmp	r0, #1
   18b40:	bne	18be0 <test_union_vector@@Base+0x200>
   18b44:	mov	r0, r5
   18b48:	mov	r1, #0
   18b4c:	bl	18e60 <test_union_vector@@Base+0x480>
   18b50:	cmp	r0, #2
   18b54:	bne	18bec <test_union_vector@@Base+0x20c>
   18b58:	mov	r0, r7
   18b5c:	mov	r1, #0
   18b60:	bl	18ea8 <test_union_vector@@Base+0x4c8>
   18b64:	cmp	r0, #0
   18b68:	beq	18bf8 <test_union_vector@@Base+0x218>
   18b6c:	mov	r7, r0
   18b70:	bl	18ef8 <test_union_vector@@Base+0x518>
   18b74:	cmp	r0, #2
   18b78:	bne	18c04 <test_union_vector@@Base+0x224>
   18b7c:	add	r0, sp, #4
   18b80:	mov	r1, r6
   18b84:	bl	18f68 <test_union_vector@@Base+0x588>
   18b88:	ldmib	sp, {r6, r8}
   18b8c:	mov	r0, r6
   18b90:	mov	r1, r8
   18b94:	bl	18fd4 <test_union_vector@@Base+0x5f4>
   18b98:	cmp	r0, #1
   18b9c:	bne	18c18 <test_union_vector@@Base+0x238>
   18ba0:	add	r0, sp, #4
   18ba4:	mov	r1, r6
   18ba8:	mov	r2, r8
   18bac:	bl	18fd8 <test_union_vector@@Base+0x5f8>
   18bb0:	ldr	r8, [sp, #8]
   18bb4:	ldrb	r6, [sp, #4]
   18bb8:	mov	r0, r5
   18bbc:	mov	r1, #0
   18bc0:	bl	18e60 <test_union_vector@@Base+0x480>
   18bc4:	cmp	r6, r0
   18bc8:	bne	18c24 <test_union_vector@@Base+0x244>
   18bcc:	cmp	r8, r7
   18bd0:	beq	18b08 <test_union_vector@@Base+0x128>
   18bd4:	movw	r0, #27216	; 0x6a50
   18bd8:	movt	r0, #2
   18bdc:	b	18af4 <test_union_vector@@Base+0x114>
   18be0:	movw	r0, #27408	; 0x6b10
   18be4:	movt	r0, #2
   18be8:	b	18af4 <test_union_vector@@Base+0x114>
   18bec:	movw	r0, #27360	; 0x6ae0
   18bf0:	movt	r0, #2
   18bf4:	b	18af4 <test_union_vector@@Base+0x114>
   18bf8:	movw	r0, #20811	; 0x514b
   18bfc:	movt	r0, #2
   18c00:	b	18af4 <test_union_vector@@Base+0x114>
   18c04:	mov	r1, r0
   18c08:	movw	r0, #11363	; 0x2c63
   18c0c:	movt	r0, #2
   18c10:	bl	12e98 <printf@plt>
   18c14:	b	18b08 <test_union_vector@@Base+0x128>
   18c18:	movw	r0, #27280	; 0x6a90
   18c1c:	movt	r0, #2
   18c20:	b	18af4 <test_union_vector@@Base+0x114>
   18c24:	movw	r0, #27248	; 0x6a70
   18c28:	movt	r0, #2
   18c2c:	b	18af4 <test_union_vector@@Base+0x114>
   18c30:	push	{r4, sl, fp, lr}
   18c34:	add	fp, sp, #8
   18c38:	mov	r4, r0
   18c3c:	bl	1d088 <main@@Base+0x1d4c>
   18c40:	cmp	r0, #0
   18c44:	movne	r0, #0
   18c48:	popne	{r4, sl, fp, pc}
   18c4c:	mov	r0, r4
   18c50:	pop	{r4, sl, fp, lr}
   18c54:	b	1d090 <main@@Base+0x1d54>
   18c58:	b	200e4 <flatcc_builder_start_union_vector@@Base>
   18c5c:	b	202fc <flatcc_builder_union_vector_push@@Base>
   18c60:	str	r1, [r0, #4]
   18c64:	mov	r1, #2
   18c68:	strb	r1, [r0]
   18c6c:	bx	lr
   18c70:	push	{fp, lr}
   18c74:	mov	fp, sp
   18c78:	bl	20144 <flatcc_builder_end_union_vector@@Base>
   18c7c:	pop	{fp, pc}
   18c80:	b	1d0e0 <main@@Base+0x1da4>
   18c84:	push	{r4, r5, r6, sl, fp, lr}
   18c88:	add	fp, sp, #16
   18c8c:	cmp	r1, #0
   18c90:	movne	r4, r2
   18c94:	cmpne	r2, #0
   18c98:	bne	18ca0 <test_union_vector@@Base+0x2c0>
   18c9c:	pop	{r4, r5, r6, sl, fp, pc}
   18ca0:	mov	r6, r1
   18ca4:	mov	r5, r0
   18ca8:	mov	r1, #2
   18cac:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   18cb0:	cmp	r0, #0
   18cb4:	popeq	{r4, r5, r6, sl, fp, pc}
   18cb8:	str	r6, [r0]
   18cbc:	mov	r0, r5
   18cc0:	mov	r1, #3
   18cc4:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   18cc8:	cmp	r0, #0
   18ccc:	strne	r4, [r0]
   18cd0:	pop	{r4, r5, r6, sl, fp, pc}
   18cd4:	push	{r4, sl, fp, lr}
   18cd8:	add	fp, sp, #8
   18cdc:	mov	r4, r0
   18ce0:	bl	1d0e8 <main@@Base+0x1dac>
   18ce4:	cmp	r0, #0
   18ce8:	popeq	{r4, sl, fp, pc}
   18cec:	mov	r1, r0
   18cf0:	mov	r0, r4
   18cf4:	pop	{r4, sl, fp, lr}
   18cf8:	b	1d138 <main@@Base+0x1dfc>
   18cfc:	push	{r4, sl, fp, lr}
   18d00:	add	fp, sp, #8
   18d04:	cmp	r0, #0
   18d08:	beq	18d44 <test_union_vector@@Base+0x364>
   18d0c:	mov	r4, r0
   18d10:	bl	1b5d8 <main@@Base+0x29c>
   18d14:	sub	r4, r4, r0
   18d18:	mov	r0, r4
   18d1c:	bl	1b5e0 <main@@Base+0x2a4>
   18d20:	mov	r1, r0
   18d24:	mov	r0, #0
   18d28:	cmp	r1, #12
   18d2c:	popcc	{r4, sl, fp, pc}
   18d30:	add	r0, r4, #10
   18d34:	bl	1b5e0 <main@@Base+0x2a4>
   18d38:	cmp	r0, #0
   18d3c:	movwne	r0, #1
   18d40:	pop	{r4, sl, fp, pc}
   18d44:	movw	r0, #12494	; 0x30ce
   18d48:	movt	r0, #2
   18d4c:	movw	r1, #12532	; 0x30f4
   18d50:	movt	r1, #2
   18d54:	movw	r3, #17834	; 0x45aa
   18d58:	movt	r3, #2
   18d5c:	movw	r2, #621	; 0x26d
   18d60:	bl	12f88 <__assert_fail@plt>
   18d64:	push	{r4, r5, r6, sl, fp, lr}
   18d68:	add	fp, sp, #16
   18d6c:	cmp	r0, #0
   18d70:	beq	18dc0 <test_union_vector@@Base+0x3e0>
   18d74:	mov	r4, r0
   18d78:	bl	1b5d8 <main@@Base+0x29c>
   18d7c:	sub	r6, r4, r0
   18d80:	mov	r0, r6
   18d84:	bl	1b5e0 <main@@Base+0x2a4>
   18d88:	mov	r5, #0
   18d8c:	cmp	r0, #10
   18d90:	bcc	18db8 <test_union_vector@@Base+0x3d8>
   18d94:	add	r0, r6, #8
   18d98:	bl	1b5e0 <main@@Base+0x2a4>
   18d9c:	cmp	r0, #0
   18da0:	beq	18db8 <test_union_vector@@Base+0x3d8>
   18da4:	add	r4, r4, r0
   18da8:	mov	r0, r4
   18dac:	bl	1b5cc <main@@Base+0x290>
   18db0:	add	r0, r4, r0
   18db4:	add	r5, r0, #4
   18db8:	mov	r0, r5
   18dbc:	pop	{r4, r5, r6, sl, fp, pc}
   18dc0:	movw	r0, #12494	; 0x30ce
   18dc4:	movt	r0, #2
   18dc8:	movw	r1, #12532	; 0x30f4
   18dcc:	movt	r1, #2
   18dd0:	movw	r3, #17904	; 0x45f0
   18dd4:	movt	r3, #2
   18dd8:	movw	r2, #621	; 0x26d
   18ddc:	bl	12f88 <__assert_fail@plt>
   18de0:	push	{r4, r5, r6, sl, fp, lr}
   18de4:	add	fp, sp, #16
   18de8:	cmp	r0, #0
   18dec:	beq	18e3c <test_union_vector@@Base+0x45c>
   18df0:	mov	r4, r0
   18df4:	bl	1b5d8 <main@@Base+0x29c>
   18df8:	sub	r6, r4, r0
   18dfc:	mov	r0, r6
   18e00:	bl	1b5e0 <main@@Base+0x2a4>
   18e04:	mov	r5, #0
   18e08:	cmp	r0, #12
   18e0c:	bcc	18e34 <test_union_vector@@Base+0x454>
   18e10:	add	r0, r6, #10
   18e14:	bl	1b5e0 <main@@Base+0x2a4>
   18e18:	cmp	r0, #0
   18e1c:	beq	18e34 <test_union_vector@@Base+0x454>
   18e20:	add	r4, r4, r0
   18e24:	mov	r0, r4
   18e28:	bl	1b5cc <main@@Base+0x290>
   18e2c:	add	r0, r4, r0
   18e30:	add	r5, r0, #4
   18e34:	mov	r0, r5
   18e38:	pop	{r4, r5, r6, sl, fp, pc}
   18e3c:	movw	r0, #12494	; 0x30ce
   18e40:	movt	r0, #2
   18e44:	movw	r1, #12532	; 0x30f4
   18e48:	movt	r1, #2
   18e4c:	movw	r3, #17989	; 0x4645
   18e50:	movt	r3, #2
   18e54:	movw	r2, #621	; 0x26d
   18e58:	bl	12f88 <__assert_fail@plt>
   18e5c:	b	1c78c <main@@Base+0x1450>
   18e60:	push	{r4, r5, fp, lr}
   18e64:	add	fp, sp, #8
   18e68:	mov	r4, r1
   18e6c:	mov	r5, r0
   18e70:	bl	1c78c <main@@Base+0x1450>
   18e74:	cmp	r0, r4
   18e78:	bls	18e88 <test_union_vector@@Base+0x4a8>
   18e7c:	add	r0, r5, r4
   18e80:	pop	{r4, r5, fp, lr}
   18e84:	b	1d174 <main@@Base+0x1e38>
   18e88:	movw	r0, #15007	; 0x3a9f
   18e8c:	movt	r0, #2
   18e90:	movw	r1, #15062	; 0x3ad6
   18e94:	movt	r1, #2
   18e98:	movw	r3, #18070	; 0x4696
   18e9c:	movt	r3, #2
   18ea0:	movw	r2, #405	; 0x195
   18ea4:	bl	12f88 <__assert_fail@plt>
   18ea8:	push	{r4, r5, fp, lr}
   18eac:	add	fp, sp, #8
   18eb0:	mov	r4, r1
   18eb4:	mov	r5, r0
   18eb8:	bl	1c78c <main@@Base+0x1450>
   18ebc:	cmp	r0, r4
   18ec0:	bls	18ed8 <test_union_vector@@Base+0x4f8>
   18ec4:	add	r4, r5, r4, lsl #2
   18ec8:	mov	r0, r4
   18ecc:	bl	1b5cc <main@@Base+0x290>
   18ed0:	add	r0, r4, r0
   18ed4:	pop	{r4, r5, fp, pc}
   18ed8:	movw	r0, #15007	; 0x3a9f
   18edc:	movt	r0, #2
   18ee0:	movw	r1, #15062	; 0x3ad6
   18ee4:	movt	r1, #2
   18ee8:	movw	r3, #18163	; 0x46f3
   18eec:	movt	r3, #2
   18ef0:	mov	r2, #117	; 0x75
   18ef4:	bl	12f88 <__assert_fail@plt>
   18ef8:	push	{r4, r5, fp, lr}
   18efc:	add	fp, sp, #8
   18f00:	cmp	r0, #0
   18f04:	beq	18f48 <test_union_vector@@Base+0x568>
   18f08:	mov	r4, r0
   18f0c:	bl	1b5d8 <main@@Base+0x29c>
   18f10:	sub	r5, r4, r0
   18f14:	mov	r0, r5
   18f18:	bl	1b5e0 <main@@Base+0x2a4>
   18f1c:	cmp	r0, #6
   18f20:	bcc	18f40 <test_union_vector@@Base+0x560>
   18f24:	add	r0, r5, #4
   18f28:	bl	1b5e0 <main@@Base+0x2a4>
   18f2c:	cmp	r0, #0
   18f30:	beq	18f40 <test_union_vector@@Base+0x560>
   18f34:	add	r0, r4, r0
   18f38:	pop	{r4, r5, fp, lr}
   18f3c:	b	1c780 <main@@Base+0x1444>
   18f40:	mov	r0, #2
   18f44:	pop	{r4, r5, fp, pc}
   18f48:	movw	r0, #12494	; 0x30ce
   18f4c:	movt	r0, #2
   18f50:	movw	r1, #12532	; 0x30f4
   18f54:	movt	r1, #2
   18f58:	movw	r3, #18247	; 0x4747
   18f5c:	movt	r3, #2
   18f60:	movw	r2, #579	; 0x243
   18f64:	bl	12f88 <__assert_fail@plt>
   18f68:	push	{r4, r5, r6, sl, fp, lr}
   18f6c:	add	fp, sp, #16
   18f70:	mov	r4, r1
   18f74:	mov	r5, r0
   18f78:	mov	r0, r1
   18f7c:	bl	18d64 <test_union_vector@@Base+0x384>
   18f80:	mov	r6, r0
   18f84:	str	r0, [r5]
   18f88:	mov	r0, r4
   18f8c:	bl	18de0 <test_union_vector@@Base+0x400>
   18f90:	mov	r4, r0
   18f94:	str	r0, [r5, #4]
   18f98:	mov	r0, r6
   18f9c:	bl	1c78c <main@@Base+0x1450>
   18fa0:	mov	r5, r0
   18fa4:	mov	r0, r4
   18fa8:	bl	1c78c <main@@Base+0x1450>
   18fac:	cmp	r5, r0
   18fb0:	popeq	{r4, r5, r6, sl, fp, pc}
   18fb4:	movw	r0, #18368	; 0x47c0
   18fb8:	movt	r0, #2
   18fbc:	movw	r1, #12532	; 0x30f4
   18fc0:	movt	r1, #2
   18fc4:	movw	r3, #18469	; 0x4825
   18fc8:	movt	r3, #2
   18fcc:	movw	r2, #621	; 0x26d
   18fd0:	bl	12f88 <__assert_fail@plt>
   18fd4:	b	1c78c <main@@Base+0x1450>
   18fd8:	push	{r4, r5, r6, sl, fp, lr}
   18fdc:	add	fp, sp, #16
   18fe0:	mov	r5, r2
   18fe4:	mov	r6, r1
   18fe8:	mov	r4, r0
   18fec:	mov	r0, #0
   18ff0:	str	r0, [r4]
   18ff4:	str	r0, [r4, #4]
   18ff8:	mov	r0, r1
   18ffc:	bl	1c78c <main@@Base+0x1450>
   19000:	cmp	r0, #0
   19004:	beq	1902c <test_union_vector@@Base+0x64c>
   19008:	ldrb	r0, [r6]
   1900c:	strb	r0, [r4]
   19010:	cmp	r0, #0
   19014:	popeq	{r4, r5, r6, sl, fp, pc}
   19018:	mov	r0, r5
   1901c:	mov	r1, #0
   19020:	bl	18ea8 <test_union_vector@@Base+0x4c8>
   19024:	str	r0, [r4, #4]
   19028:	pop	{r4, r5, r6, sl, fp, pc}
   1902c:	movw	r0, #18561	; 0x4881
   19030:	movt	r0, #2
   19034:	movw	r1, #12532	; 0x30f4
   19038:	movt	r1, #2
   1903c:	movw	r3, #18593	; 0x48a1
   19040:	movt	r3, #2
   19044:	mov	r2, #520	; 0x208
   19048:	bl	12f88 <__assert_fail@plt>

0001904c <test_mixed_type_union@@Base>:
   1904c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19050:	add	fp, sp, #24
   19054:	sub	sp, sp, #24
   19058:	mov	r4, r0
   1905c:	bl	1db08 <flatcc_builder_reset@@Base>
   19060:	mov	r0, r4
   19064:	bl	196e0 <test_mixed_type_union@@Base+0x694>
   19068:	mov	r0, r4
   1906c:	mov	r1, #10
   19070:	bl	1970c <test_mixed_type_union@@Base+0x6c0>
   19074:	mov	r8, r0
   19078:	mov	r0, r4
   1907c:	mov	r1, #22
   19080:	bl	19740 <test_mixed_type_union@@Base+0x6f4>
   19084:	mov	r5, r0
   19088:	add	r0, sp, #12
   1908c:	mov	r1, r5
   19090:	bl	19774 <test_mixed_type_union@@Base+0x728>
   19094:	ldr	r6, [sp, #12]
   19098:	ldr	r7, [sp, #16]
   1909c:	mov	r0, r4
   190a0:	bl	19784 <test_mixed_type_union@@Base+0x738>
   190a4:	mov	r0, r4
   190a8:	mov	r1, r5
   190ac:	bl	197c8 <test_mixed_type_union@@Base+0x77c>
   190b0:	mov	r0, r4
   190b4:	mov	r1, #42	; 0x2a
   190b8:	bl	197f4 <test_mixed_type_union@@Base+0x7a8>
   190bc:	mov	r5, r0
   190c0:	mov	r0, r4
   190c4:	mov	r1, r5
   190c8:	bl	19838 <test_mixed_type_union@@Base+0x7ec>
   190cc:	mov	r0, r4
   190d0:	bl	19864 <test_mixed_type_union@@Base+0x818>
   190d4:	mov	r0, r4
   190d8:	bl	1988c <test_mixed_type_union@@Base+0x840>
   190dc:	mov	r0, r4
   190e0:	mov	r1, r6
   190e4:	mov	r2, r7
   190e8:	bl	19890 <test_mixed_type_union@@Base+0x844>
   190ec:	mov	r0, r4
   190f0:	mov	r1, r5
   190f4:	bl	19894 <test_mixed_type_union@@Base+0x848>
   190f8:	mov	r0, r4
   190fc:	bl	198c0 <test_mixed_type_union@@Base+0x874>
   19100:	movw	r1, #11403	; 0x2c8b
   19104:	movt	r1, #2
   19108:	mov	r0, r4
   1910c:	bl	161f4 <gen_monster@@Base+0x6f0>
   19110:	mov	r1, r0
   19114:	add	r0, sp, #4
   19118:	bl	198fc <test_mixed_type_union@@Base+0x8b0>
   1911c:	ldmib	sp, {r1, r2}
   19120:	mov	r0, r4
   19124:	bl	198f8 <test_mixed_type_union@@Base+0x8ac>
   19128:	mov	r0, r4
   1912c:	mov	r1, r8
   19130:	bl	1990c <test_mixed_type_union@@Base+0x8c0>
   19134:	mov	r0, r4
   19138:	bl	19938 <test_mixed_type_union@@Base+0x8ec>
   1913c:	mov	r1, #3
   19140:	str	r1, [r0]
   19144:	mov	r0, r4
   19148:	bl	1993c <test_mixed_type_union@@Base+0x8f0>
   1914c:	mov	r0, r4
   19150:	mov	r1, #1
   19154:	bl	1970c <test_mixed_type_union@@Base+0x6c0>
   19158:	mov	r1, r0
   1915c:	mov	r0, r4
   19160:	bl	1990c <test_mixed_type_union@@Base+0x8c0>
   19164:	mov	r0, r4
   19168:	bl	19970 <test_mixed_type_union@@Base+0x924>
   1916c:	movw	r1, #11401	; 0x2c89
   19170:	movt	r1, #2
   19174:	mov	r0, r4
   19178:	bl	161f4 <gen_monster@@Base+0x6f0>
   1917c:	mov	r1, r0
   19180:	mov	r0, r4
   19184:	bl	199a8 <test_mixed_type_union@@Base+0x95c>
   19188:	mov	r0, r4
   1918c:	bl	199d4 <test_mixed_type_union@@Base+0x988>
   19190:	mov	r0, r4
   19194:	bl	19a10 <test_mixed_type_union@@Base+0x9c4>
   19198:	mov	r0, r4
   1919c:	bl	19a40 <test_mixed_type_union@@Base+0x9f4>
   191a0:	add	r1, sp, #20
   191a4:	mov	r0, r4
   191a8:	bl	20950 <flatcc_builder_finalize_aligned_buffer@@Base>
   191ac:	mov	r4, r0
   191b0:	movw	r0, #36976	; 0x9070
   191b4:	movt	r0, #3
   191b8:	ldr	r3, [r0]
   191bc:	ldr	r2, [sp, #20]
   191c0:	movw	r0, #11409	; 0x2c91
   191c4:	movt	r0, #2
   191c8:	mov	r1, r4
   191cc:	bl	1364c <test_type_aliases@@Base+0x254>
   191d0:	ldr	r1, [sp, #20]
   191d4:	mov	r0, r4
   191d8:	bl	19a60 <test_mixed_type_union@@Base+0xa14>
   191dc:	cmp	r0, #0
   191e0:	beq	19200 <test_mixed_type_union@@Base+0x1b4>
   191e4:	bl	21208 <flatcc_verify_error_string@@Base>
   191e8:	mov	r1, r0
   191ec:	movw	r0, #11422	; 0x2c9e
   191f0:	movt	r0, #2
   191f4:	bl	12e98 <printf@plt>
   191f8:	mvn	r5, #0
   191fc:	b	192a4 <test_mixed_type_union@@Base+0x258>
   19200:	mov	r0, r4
   19204:	bl	19a74 <test_mixed_type_union@@Base+0xa28>
   19208:	mov	r5, r0
   1920c:	bl	19ab4 <test_mixed_type_union@@Base+0xa68>
   19210:	cmp	r0, #0
   19214:	beq	19274 <test_mixed_type_union@@Base+0x228>
   19218:	mov	r0, r5
   1921c:	bl	19b1c <test_mixed_type_union@@Base+0xad0>
   19220:	cmp	r0, #0
   19224:	beq	19280 <test_mixed_type_union@@Base+0x234>
   19228:	add	r0, sp, #12
   1922c:	mov	r1, r5
   19230:	bl	19b84 <test_mixed_type_union@@Base+0xb38>
   19234:	ldrb	r0, [sp, #12]
   19238:	cmp	r0, #8
   1923c:	bne	1928c <test_mixed_type_union@@Base+0x240>
   19240:	ldr	r6, [sp, #16]
   19244:	cmp	r6, #0
   19248:	bne	19258 <test_mixed_type_union@@Base+0x20c>
   1924c:	movw	r0, #27552	; 0x6ba0
   19250:	movt	r0, #2
   19254:	bl	12eec <puts@plt>
   19258:	mov	r0, r6
   1925c:	bl	19bc4 <test_mixed_type_union@@Base+0xb78>
   19260:	cmp	r0, #20
   19264:	bcc	192b0 <test_mixed_type_union@@Base+0x264>
   19268:	movw	r0, #28112	; 0x6dd0
   1926c:	movt	r0, #2
   19270:	b	19294 <test_mixed_type_union@@Base+0x248>
   19274:	movw	r0, #27456	; 0x6b40
   19278:	movt	r0, #2
   1927c:	b	19294 <test_mixed_type_union@@Base+0x248>
   19280:	movw	r0, #27504	; 0x6b70
   19284:	movt	r0, #2
   19288:	b	19294 <test_mixed_type_union@@Base+0x248>
   1928c:	movw	r0, #28160	; 0x6e00
   19290:	movt	r0, #2
   19294:	bl	12eec <puts@plt>
   19298:	mvn	r5, #0
   1929c:	mov	r0, r4
   192a0:	bl	20a30 <flatcc_builder_aligned_free@@Base>
   192a4:	mov	r0, r5
   192a8:	sub	sp, fp, #24
   192ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   192b0:	cmp	r0, #19
   192b4:	bne	19360 <test_mixed_type_union@@Base+0x314>
   192b8:	mov	r0, r5
   192bc:	bl	19bd4 <test_mixed_type_union@@Base+0xb88>
   192c0:	cmp	r0, #8
   192c4:	bne	1936c <test_mixed_type_union@@Base+0x320>
   192c8:	mov	r0, r5
   192cc:	bl	19c44 <test_mixed_type_union@@Base+0xbf8>
   192d0:	cmp	r0, #0
   192d4:	beq	19378 <test_mixed_type_union@@Base+0x32c>
   192d8:	bl	19bc4 <test_mixed_type_union@@Base+0xb78>
   192dc:	cmp	r0, #22
   192e0:	bne	19384 <test_mixed_type_union@@Base+0x338>
   192e4:	mov	r0, r5
   192e8:	bl	19cbc <test_mixed_type_union@@Base+0xc70>
   192ec:	cmp	r0, #2
   192f0:	bne	19390 <test_mixed_type_union@@Base+0x344>
   192f4:	mov	r0, r5
   192f8:	bl	19d2c <test_mixed_type_union@@Base+0xce0>
   192fc:	cmp	r0, #0
   19300:	beq	1939c <test_mixed_type_union@@Base+0x350>
   19304:	bl	19da4 <test_mixed_type_union@@Base+0xd58>
   19308:	cmp	r0, #42	; 0x2a
   1930c:	bne	1939c <test_mixed_type_union@@Base+0x350>
   19310:	mov	r0, r5
   19314:	bl	19e14 <test_mixed_type_union@@Base+0xdc8>
   19318:	cmp	r0, #11
   1931c:	bne	193a8 <test_mixed_type_union@@Base+0x35c>
   19320:	mov	r0, r5
   19324:	bl	19e90 <test_mixed_type_union@@Base+0xe44>
   19328:	bl	19e84 <test_mixed_type_union@@Base+0xe38>
   1932c:	cmp	r0, #0
   19330:	beq	193b4 <test_mixed_type_union@@Base+0x368>
   19334:	mov	r6, r0
   19338:	movw	r1, #11392	; 0x2c80
   1933c:	movt	r1, #2
   19340:	bl	12e8c <strcmp@plt>
   19344:	cmp	r0, #0
   19348:	beq	193c0 <test_mixed_type_union@@Base+0x374>
   1934c:	movw	r0, #11501	; 0x2ced
   19350:	movt	r0, #2
   19354:	mov	r1, r6
   19358:	bl	12e98 <printf@plt>
   1935c:	b	19298 <test_mixed_type_union@@Base+0x24c>
   19360:	movw	r0, #28064	; 0x6da0
   19364:	movt	r0, #2
   19368:	b	19294 <test_mixed_type_union@@Base+0x248>
   1936c:	movw	r0, #28000	; 0x6d60
   19370:	movt	r0, #2
   19374:	b	19294 <test_mixed_type_union@@Base+0x248>
   19378:	movw	r0, #27584	; 0x6bc0
   1937c:	movt	r0, #2
   19380:	b	19294 <test_mixed_type_union@@Base+0x248>
   19384:	movw	r0, #27952	; 0x6d30
   19388:	movt	r0, #2
   1938c:	b	19294 <test_mixed_type_union@@Base+0x248>
   19390:	movw	r0, #27920	; 0x6d10
   19394:	movt	r0, #2
   19398:	b	19294 <test_mixed_type_union@@Base+0x248>
   1939c:	movw	r0, #27632	; 0x6bf0
   193a0:	movt	r0, #2
   193a4:	b	19294 <test_mixed_type_union@@Base+0x248>
   193a8:	movw	r0, #27888	; 0x6cf0
   193ac:	movt	r0, #2
   193b0:	b	19294 <test_mixed_type_union@@Base+0x248>
   193b4:	movw	r0, #27680	; 0x6c20
   193b8:	movt	r0, #2
   193bc:	b	19294 <test_mixed_type_union@@Base+0x248>
   193c0:	mov	r0, r5
   193c4:	bl	19f08 <test_mixed_type_union@@Base+0xebc>
   193c8:	cmp	r0, #0
   193cc:	beq	193f4 <test_mixed_type_union@@Base+0x3a8>
   193d0:	mov	r6, r0
   193d4:	movw	r1, #11392	; 0x2c80
   193d8:	movt	r1, #2
   193dc:	bl	12e8c <strcmp@plt>
   193e0:	cmp	r0, #0
   193e4:	beq	19400 <test_mixed_type_union@@Base+0x3b4>
   193e8:	movw	r0, #11537	; 0x2d11
   193ec:	movt	r0, #2
   193f0:	b	19354 <test_mixed_type_union@@Base+0x308>
   193f4:	movw	r0, #27680	; 0x6c20
   193f8:	movt	r0, #2
   193fc:	b	19294 <test_mixed_type_union@@Base+0x248>
   19400:	add	r0, sp, #12
   19404:	mov	r1, r5
   19408:	bl	19f1c <test_mixed_type_union@@Base+0xed0>
   1940c:	ldr	r0, [sp, #12]
   19410:	ldr	r1, [sp, #16]
   19414:	bl	19f5c <test_mixed_type_union@@Base+0xf10>
   19418:	mov	r6, r0
   1941c:	movw	r1, #11392	; 0x2c80
   19420:	movt	r1, #2
   19424:	bl	12e8c <strcmp@plt>
   19428:	cmp	r0, #0
   1942c:	beq	1943c <test_mixed_type_union@@Base+0x3f0>
   19430:	movw	r0, #11582	; 0x2d3e
   19434:	movt	r0, #2
   19438:	b	19354 <test_mixed_type_union@@Base+0x308>
   1943c:	add	r0, sp, #12
   19440:	mov	r1, r5
   19444:	bl	19f64 <test_mixed_type_union@@Base+0xf18>
   19448:	ldr	r6, [sp, #12]
   1944c:	ldr	r7, [sp, #16]
   19450:	add	r0, sp, #12
   19454:	mov	r1, r6
   19458:	mov	r2, r7
   1945c:	mov	r3, #0
   19460:	bl	19fd0 <test_mixed_type_union@@Base+0xf84>
   19464:	ldrb	r0, [sp, #12]
   19468:	cmp	r0, #8
   1946c:	bne	19514 <test_mixed_type_union@@Base+0x4c8>
   19470:	add	r0, sp, #12
   19474:	mov	r1, r6
   19478:	mov	r2, r7
   1947c:	mov	r3, #1
   19480:	bl	19fd0 <test_mixed_type_union@@Base+0xf84>
   19484:	ldrb	r0, [sp, #12]
   19488:	cmp	r0, #2
   1948c:	bne	19520 <test_mixed_type_union@@Base+0x4d4>
   19490:	ldr	r0, [sp, #16]
   19494:	bl	19da4 <test_mixed_type_union@@Base+0xd58>
   19498:	cmp	r0, #42	; 0x2a
   1949c:	bne	1952c <test_mixed_type_union@@Base+0x4e0>
   194a0:	add	r0, sp, #12
   194a4:	mov	r1, r6
   194a8:	mov	r2, r7
   194ac:	mov	r3, #2
   194b0:	bl	19fd0 <test_mixed_type_union@@Base+0xf84>
   194b4:	ldrb	r0, [sp, #12]
   194b8:	cmp	r0, #2
   194bc:	bne	19538 <test_mixed_type_union@@Base+0x4ec>
   194c0:	ldr	r0, [sp, #16]
   194c4:	bl	19da4 <test_mixed_type_union@@Base+0xd58>
   194c8:	cmp	r0, #1
   194cc:	bne	19544 <test_mixed_type_union@@Base+0x4f8>
   194d0:	mov	r0, r5
   194d4:	bl	1a048 <test_mixed_type_union@@Base+0xffc>
   194d8:	mov	r1, #3
   194dc:	bl	18e60 <test_union_vector@@Base+0x480>
   194e0:	cmp	r0, #11
   194e4:	bne	19554 <test_mixed_type_union@@Base+0x508>
   194e8:	mov	r0, r6
   194ec:	mov	r1, r7
   194f0:	bl	1a0c4 <test_mixed_type_union@@Base+0x1078>
   194f4:	movw	r1, #11403	; 0x2c8b
   194f8:	movt	r1, #2
   194fc:	bl	12e8c <strcmp@plt>
   19500:	cmp	r0, #0
   19504:	beq	19560 <test_mixed_type_union@@Base+0x514>
   19508:	movw	r0, #27712	; 0x6c40
   1950c:	movt	r0, #2
   19510:	b	19294 <test_mixed_type_union@@Base+0x248>
   19514:	movw	r0, #11627	; 0x2d6b
   19518:	movt	r0, #2
   1951c:	b	1954c <test_mixed_type_union@@Base+0x500>
   19520:	movw	r0, #11664	; 0x2d90
   19524:	movt	r0, #2
   19528:	b	1954c <test_mixed_type_union@@Base+0x500>
   1952c:	movw	r0, #11699	; 0x2db3
   19530:	movt	r0, #2
   19534:	b	1954c <test_mixed_type_union@@Base+0x500>
   19538:	movw	r0, #11749	; 0x2de5
   1953c:	movt	r0, #2
   19540:	b	1954c <test_mixed_type_union@@Base+0x500>
   19544:	movw	r0, #11783	; 0x2e07
   19548:	movt	r0, #2
   1954c:	bl	12e98 <printf@plt>
   19550:	b	19298 <test_mixed_type_union@@Base+0x24c>
   19554:	movw	r0, #27840	; 0x6cc0
   19558:	movt	r0, #2
   1955c:	b	19294 <test_mixed_type_union@@Base+0x248>
   19560:	add	r0, sp, #12
   19564:	mov	r1, r6
   19568:	mov	r2, r7
   1956c:	mov	r3, #3
   19570:	bl	19fd0 <test_mixed_type_union@@Base+0xf84>
   19574:	ldr	r0, [sp, #12]
   19578:	uxtb	r1, r0
   1957c:	cmp	r1, #11
   19580:	bne	195b4 <test_mixed_type_union@@Base+0x568>
   19584:	ldr	r1, [sp, #16]
   19588:	bl	19f5c <test_mixed_type_union@@Base+0xf10>
   1958c:	cmp	r0, #0
   19590:	beq	195a8 <test_mixed_type_union@@Base+0x55c>
   19594:	movw	r1, #11403	; 0x2c8b
   19598:	movt	r1, #2
   1959c:	bl	12e8c <strcmp@plt>
   195a0:	cmp	r0, #0
   195a4:	beq	195c0 <test_mixed_type_union@@Base+0x574>
   195a8:	movw	r0, #27776	; 0x6c80
   195ac:	movt	r0, #2
   195b0:	b	19294 <test_mixed_type_union@@Base+0x248>
   195b4:	movw	r0, #11832	; 0x2e38
   195b8:	movt	r0, #2
   195bc:	b	1954c <test_mixed_type_union@@Base+0x500>
   195c0:	add	r0, sp, #12
   195c4:	mov	r1, r6
   195c8:	mov	r2, r7
   195cc:	mov	r3, #4
   195d0:	bl	19fd0 <test_mixed_type_union@@Base+0xf84>
   195d4:	ldrb	r0, [sp, #12]
   195d8:	cmp	r0, #9
   195dc:	bne	196a4 <test_mixed_type_union@@Base+0x658>
   195e0:	add	r0, sp, #12
   195e4:	mov	r1, r6
   195e8:	mov	r2, r7
   195ec:	mov	r3, #5
   195f0:	bl	19fd0 <test_mixed_type_union@@Base+0xf84>
   195f4:	ldrb	r0, [sp, #12]
   195f8:	cmp	r0, #9
   195fc:	bne	196b0 <test_mixed_type_union@@Base+0x664>
   19600:	add	r0, sp, #12
   19604:	mov	r1, r6
   19608:	mov	r2, r7
   1960c:	mov	r3, #6
   19610:	bl	19fd0 <test_mixed_type_union@@Base+0xf84>
   19614:	ldrb	r0, [sp, #12]
   19618:	cmp	r0, #9
   1961c:	bne	196bc <test_mixed_type_union@@Base+0x670>
   19620:	add	r0, sp, #12
   19624:	mov	r1, r6
   19628:	mov	r2, r7
   1962c:	mov	r3, #7
   19630:	bl	19fd0 <test_mixed_type_union@@Base+0xf84>
   19634:	ldrb	r0, [sp, #12]
   19638:	cmp	r0, #9
   1963c:	bne	196c8 <test_mixed_type_union@@Base+0x67c>
   19640:	add	r0, sp, #12
   19644:	mov	r1, r6
   19648:	mov	r2, r7
   1964c:	mov	r3, #8
   19650:	bl	19fd0 <test_mixed_type_union@@Base+0xf84>
   19654:	ldrb	r0, [sp, #12]
   19658:	cmp	r0, #11
   1965c:	bne	196d4 <test_mixed_type_union@@Base+0x688>
   19660:	add	r0, sp, #12
   19664:	mov	r1, r6
   19668:	mov	r2, r7
   1966c:	mov	r3, #9
   19670:	bl	19fd0 <test_mixed_type_union@@Base+0xf84>
   19674:	ldrb	r0, [sp, #12]
   19678:	cmp	r0, #11
   1967c:	bne	196d4 <test_mixed_type_union@@Base+0x688>
   19680:	mov	r0, r6
   19684:	mov	r1, r7
   19688:	bl	1a0d8 <test_mixed_type_union@@Base+0x108c>
   1968c:	mov	r5, #0
   19690:	cmp	r0, #10
   19694:	beq	1929c <test_mixed_type_union@@Base+0x250>
   19698:	movw	r0, #12071	; 0x2f27
   1969c:	movt	r0, #2
   196a0:	b	1954c <test_mixed_type_union@@Base+0x500>
   196a4:	movw	r0, #11888	; 0x2e70
   196a8:	movt	r0, #2
   196ac:	b	1954c <test_mixed_type_union@@Base+0x500>
   196b0:	movw	r0, #11922	; 0x2e92
   196b4:	movt	r0, #2
   196b8:	b	1954c <test_mixed_type_union@@Base+0x500>
   196bc:	movw	r0, #11956	; 0x2eb4
   196c0:	movt	r0, #2
   196c4:	b	1954c <test_mixed_type_union@@Base+0x500>
   196c8:	movw	r0, #11992	; 0x2ed8
   196cc:	movt	r0, #2
   196d0:	b	1954c <test_mixed_type_union@@Base+0x500>
   196d4:	movw	r0, #12027	; 0x2efb
   196d8:	movt	r0, #2
   196dc:	b	1954c <test_mixed_type_union@@Base+0x500>
   196e0:	push	{r4, sl, fp, lr}
   196e4:	add	fp, sp, #8
   196e8:	mov	r4, r0
   196ec:	movw	r1, #9012	; 0x2334
   196f0:	movt	r1, #2
   196f4:	bl	13d30 <test_empty_monster@@Base+0x108>
   196f8:	cmp	r0, #0
   196fc:	popne	{r4, sl, fp, pc}
   19700:	mov	r0, r4
   19704:	pop	{r4, sl, fp, lr}
   19708:	b	1d180 <main@@Base+0x1e44>
   1970c:	push	{r4, r5, fp, lr}
   19710:	add	fp, sp, #8
   19714:	mov	r5, r1
   19718:	mov	r4, r0
   1971c:	bl	1d188 <main@@Base+0x1e4c>
   19720:	cmp	r0, #0
   19724:	moveq	r0, #0
   19728:	popeq	{r4, r5, fp, pc}
   1972c:	mov	r1, r5
   19730:	bl	1d194 <main@@Base+0x1e58>
   19734:	mov	r0, r4
   19738:	pop	{r4, r5, fp, lr}
   1973c:	b	1d198 <main@@Base+0x1e5c>
   19740:	push	{r4, r5, fp, lr}
   19744:	add	fp, sp, #8
   19748:	mov	r5, r1
   1974c:	mov	r4, r0
   19750:	bl	1d19c <main@@Base+0x1e60>
   19754:	cmp	r0, #0
   19758:	moveq	r0, #0
   1975c:	popeq	{r4, r5, fp, pc}
   19760:	mov	r1, r5
   19764:	bl	1d1a8 <main@@Base+0x1e6c>
   19768:	mov	r0, r4
   1976c:	pop	{r4, r5, fp, lr}
   19770:	b	1d1ac <main@@Base+0x1e70>
   19774:	str	r1, [r0, #4]
   19778:	mov	r1, #8
   1977c:	strb	r1, [r0]
   19780:	bx	lr
   19784:	push	{r4, sl, fp, lr}
   19788:	add	fp, sp, #8
   1978c:	sub	sp, sp, #8
   19790:	mov	r4, r0
   19794:	mov	r1, #19
   19798:	bl	19740 <test_mixed_type_union@@Base+0x6f4>
   1979c:	cmp	r0, #0
   197a0:	subeq	sp, fp, #8
   197a4:	popeq	{r4, sl, fp, pc}
   197a8:	mov	r1, r0
   197ac:	mov	r0, sp
   197b0:	bl	19774 <test_mixed_type_union@@Base+0x728>
   197b4:	ldm	sp, {r1, r2}
   197b8:	mov	r0, r4
   197bc:	sub	sp, fp, #8
   197c0:	pop	{r4, sl, fp, lr}
   197c4:	b	1d1b0 <main@@Base+0x1e74>
   197c8:	push	{r4, sl, fp, lr}
   197cc:	add	fp, sp, #8
   197d0:	sub	sp, sp, #8
   197d4:	mov	r4, r0
   197d8:	mov	r0, sp
   197dc:	bl	19774 <test_mixed_type_union@@Base+0x728>
   197e0:	ldm	sp, {r1, r2}
   197e4:	mov	r0, r4
   197e8:	sub	sp, fp, #8
   197ec:	pop	{r4, sl, fp, lr}
   197f0:	b	1d21c <main@@Base+0x1ee0>
   197f4:	push	{r4, r5, fp, lr}
   197f8:	add	fp, sp, #8
   197fc:	mov	r5, r1
   19800:	mov	r4, r0
   19804:	bl	1d280 <main@@Base+0x1f44>
   19808:	cmp	r0, #0
   1980c:	bne	19824 <test_mixed_type_union@@Base+0x7d8>
   19810:	mov	r0, r4
   19814:	mov	r1, r5
   19818:	bl	1d288 <main@@Base+0x1f4c>
   1981c:	cmp	r0, #0
   19820:	beq	1982c <test_mixed_type_union@@Base+0x7e0>
   19824:	mov	r0, #0
   19828:	pop	{r4, r5, fp, pc}
   1982c:	mov	r0, r4
   19830:	pop	{r4, r5, fp, lr}
   19834:	b	1d2d0 <main@@Base+0x1f94>
   19838:	push	{r4, sl, fp, lr}
   1983c:	add	fp, sp, #8
   19840:	sub	sp, sp, #8
   19844:	mov	r4, r0
   19848:	mov	r0, sp
   1984c:	bl	1d384 <main@@Base+0x2048>
   19850:	ldm	sp, {r1, r2}
   19854:	mov	r0, r4
   19858:	sub	sp, fp, #8
   1985c:	pop	{r4, sl, fp, lr}
   19860:	b	1d320 <main@@Base+0x1fe4>
   19864:	push	{r4, sl, fp, lr}
   19868:	add	fp, sp, #8
   1986c:	mov	r4, r0
   19870:	movw	r1, #11392	; 0x2c80
   19874:	movt	r1, #2
   19878:	bl	204a8 <flatcc_builder_create_string_str@@Base>
   1987c:	mov	r1, r0
   19880:	mov	r0, r4
   19884:	pop	{r4, sl, fp, lr}
   19888:	b	1d394 <main@@Base+0x2058>
   1988c:	b	200e4 <flatcc_builder_start_union_vector@@Base>
   19890:	b	202fc <flatcc_builder_union_vector_push@@Base>
   19894:	push	{r4, sl, fp, lr}
   19898:	add	fp, sp, #8
   1989c:	sub	sp, sp, #8
   198a0:	mov	r4, r0
   198a4:	mov	r0, sp
   198a8:	bl	1d384 <main@@Base+0x2048>
   198ac:	ldm	sp, {r1, r2}
   198b0:	mov	r0, r4
   198b4:	sub	sp, fp, #8
   198b8:	pop	{r4, sl, fp, lr}
   198bc:	b	198f8 <test_mixed_type_union@@Base+0x8ac>
   198c0:	push	{r4, sl, fp, lr}
   198c4:	add	fp, sp, #8
   198c8:	sub	sp, sp, #8
   198cc:	mov	r4, r0
   198d0:	mov	r1, #1
   198d4:	bl	197f4 <test_mixed_type_union@@Base+0x7a8>
   198d8:	mov	r1, r0
   198dc:	mov	r0, sp
   198e0:	bl	1d384 <main@@Base+0x2048>
   198e4:	ldm	sp, {r1, r2}
   198e8:	mov	r0, r4
   198ec:	sub	sp, fp, #8
   198f0:	pop	{r4, sl, fp, lr}
   198f4:	b	198f8 <test_mixed_type_union@@Base+0x8ac>
   198f8:	b	202fc <flatcc_builder_union_vector_push@@Base>
   198fc:	str	r1, [r0, #4]
   19900:	mov	r1, #11
   19904:	strb	r1, [r0]
   19908:	bx	lr
   1990c:	push	{r4, sl, fp, lr}
   19910:	add	fp, sp, #8
   19914:	sub	sp, sp, #8
   19918:	mov	r4, r0
   1991c:	mov	r0, sp
   19920:	bl	1d424 <main@@Base+0x20e8>
   19924:	ldm	sp, {r1, r2}
   19928:	mov	r0, r4
   1992c:	sub	sp, fp, #8
   19930:	pop	{r4, sl, fp, lr}
   19934:	b	198f8 <test_mixed_type_union@@Base+0x8ac>
   19938:	b	1d188 <main@@Base+0x1e4c>
   1993c:	push	{r4, sl, fp, lr}
   19940:	add	fp, sp, #8
   19944:	sub	sp, sp, #8
   19948:	mov	r4, r0
   1994c:	bl	1d434 <main@@Base+0x20f8>
   19950:	mov	r1, r0
   19954:	mov	r0, sp
   19958:	bl	1d424 <main@@Base+0x20e8>
   1995c:	ldm	sp, {r1, r2}
   19960:	mov	r0, r4
   19964:	sub	sp, fp, #8
   19968:	pop	{r4, sl, fp, lr}
   1996c:	b	198f8 <test_mixed_type_union@@Base+0x8ac>
   19970:	push	{r4, sl, fp, lr}
   19974:	add	fp, sp, #8
   19978:	sub	sp, sp, #8
   1997c:	mov	r4, r0
   19980:	mov	r1, #2
   19984:	bl	1970c <test_mixed_type_union@@Base+0x6c0>
   19988:	mov	r1, r0
   1998c:	mov	r0, sp
   19990:	bl	1d424 <main@@Base+0x20e8>
   19994:	ldm	sp, {r1, r2}
   19998:	mov	r0, r4
   1999c:	sub	sp, fp, #8
   199a0:	pop	{r4, sl, fp, lr}
   199a4:	b	198f8 <test_mixed_type_union@@Base+0x8ac>
   199a8:	push	{r4, sl, fp, lr}
   199ac:	add	fp, sp, #8
   199b0:	sub	sp, sp, #8
   199b4:	mov	r4, r0
   199b8:	mov	r0, sp
   199bc:	bl	198fc <test_mixed_type_union@@Base+0x8b0>
   199c0:	ldm	sp, {r1, r2}
   199c4:	mov	r0, r4
   199c8:	sub	sp, fp, #8
   199cc:	pop	{r4, sl, fp, lr}
   199d0:	b	198f8 <test_mixed_type_union@@Base+0x8ac>
   199d4:	push	{r4, sl, fp, lr}
   199d8:	add	fp, sp, #8
   199dc:	sub	sp, sp, #8
   199e0:	mov	r4, r0
   199e4:	movw	r1, #11397	; 0x2c85
   199e8:	movt	r1, #2
   199ec:	bl	161f4 <gen_monster@@Base+0x6f0>
   199f0:	mov	r1, r0
   199f4:	mov	r0, sp
   199f8:	bl	198fc <test_mixed_type_union@@Base+0x8b0>
   199fc:	ldm	sp, {r1, r2}
   19a00:	mov	r0, r4
   19a04:	sub	sp, fp, #8
   19a08:	pop	{r4, sl, fp, lr}
   19a0c:	b	198f8 <test_mixed_type_union@@Base+0x8ac>
   19a10:	push	{r4, sl, fp, lr}
   19a14:	add	fp, sp, #8
   19a18:	sub	sp, sp, #8
   19a1c:	mov	r4, r0
   19a20:	mov	r0, sp
   19a24:	mov	r1, r4
   19a28:	bl	20144 <flatcc_builder_end_union_vector@@Base>
   19a2c:	ldm	sp, {r1, r2}
   19a30:	mov	r0, r4
   19a34:	bl	1d438 <main@@Base+0x20fc>
   19a38:	sub	sp, fp, #8
   19a3c:	pop	{r4, sl, fp, pc}
   19a40:	push	{r4, sl, fp, lr}
   19a44:	add	fp, sp, #8
   19a48:	mov	r4, r0
   19a4c:	bl	1d488 <main@@Base+0x214c>
   19a50:	mov	r1, r0
   19a54:	mov	r0, r4
   19a58:	pop	{r4, sl, fp, lr}
   19a5c:	b	13db4 <test_empty_monster@@Base+0x18c>
   19a60:	movw	r2, #9012	; 0x2334
   19a64:	movt	r2, #2
   19a68:	movw	r3, #50056	; 0xc388
   19a6c:	movt	r3, #1
   19a70:	b	21b54 <flatcc_verify_table_as_root@@Base>
   19a74:	push	{r4, r5, fp, lr}
   19a78:	add	fp, sp, #8
   19a7c:	mov	r5, #0
   19a80:	cmp	r0, #0
   19a84:	beq	19aac <test_mixed_type_union@@Base+0xa60>
   19a88:	mov	r4, r0
   19a8c:	movw	r1, #9012	; 0x2334
   19a90:	movt	r1, #2
   19a94:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   19a98:	cmp	r0, #0
   19a9c:	beq	19aac <test_mixed_type_union@@Base+0xa60>
   19aa0:	mov	r0, r4
   19aa4:	bl	1b5cc <main@@Base+0x290>
   19aa8:	add	r5, r4, r0
   19aac:	mov	r0, r5
   19ab0:	pop	{r4, r5, fp, pc}
   19ab4:	push	{r4, sl, fp, lr}
   19ab8:	add	fp, sp, #8
   19abc:	cmp	r0, #0
   19ac0:	beq	19afc <test_mixed_type_union@@Base+0xab0>
   19ac4:	mov	r4, r0
   19ac8:	bl	1b5d8 <main@@Base+0x29c>
   19acc:	sub	r4, r4, r0
   19ad0:	mov	r0, r4
   19ad4:	bl	1b5e0 <main@@Base+0x2a4>
   19ad8:	mov	r1, r0
   19adc:	mov	r0, #0
   19ae0:	cmp	r1, #8
   19ae4:	popcc	{r4, sl, fp, pc}
   19ae8:	add	r0, r4, #6
   19aec:	bl	1b5e0 <main@@Base+0x2a4>
   19af0:	cmp	r0, #0
   19af4:	movwne	r0, #1
   19af8:	pop	{r4, sl, fp, pc}
   19afc:	movw	r0, #12494	; 0x30ce
   19b00:	movt	r0, #2
   19b04:	movw	r1, #12532	; 0x30f4
   19b08:	movt	r1, #2
   19b0c:	movw	r3, #19103	; 0x4a9f
   19b10:	movt	r3, #2
   19b14:	movw	r2, #819	; 0x333
   19b18:	bl	12f88 <__assert_fail@plt>
   19b1c:	push	{r4, sl, fp, lr}
   19b20:	add	fp, sp, #8
   19b24:	cmp	r0, #0
   19b28:	beq	19b64 <test_mixed_type_union@@Base+0xb18>
   19b2c:	mov	r4, r0
   19b30:	bl	1b5d8 <main@@Base+0x29c>
   19b34:	sub	r4, r4, r0
   19b38:	mov	r0, r4
   19b3c:	bl	1b5e0 <main@@Base+0x2a4>
   19b40:	mov	r1, r0
   19b44:	mov	r0, #0
   19b48:	cmp	r1, #24
   19b4c:	popcc	{r4, sl, fp, pc}
   19b50:	add	r0, r4, #22
   19b54:	bl	1b5e0 <main@@Base+0x2a4>
   19b58:	cmp	r0, #0
   19b5c:	movwne	r0, #1
   19b60:	pop	{r4, sl, fp, pc}
   19b64:	movw	r0, #12494	; 0x30ce
   19b68:	movt	r0, #2
   19b6c:	movw	r1, #12532	; 0x30f4
   19b70:	movt	r1, #2
   19b74:	movw	r3, #19170	; 0x4ae2
   19b78:	movt	r3, #2
   19b7c:	movw	r2, #823	; 0x337
   19b80:	bl	12f88 <__assert_fail@plt>
   19b84:	push	{r4, r5, fp, lr}
   19b88:	add	fp, sp, #8
   19b8c:	mov	r5, r1
   19b90:	mov	r4, r0
   19b94:	mov	r0, #0
   19b98:	str	r0, [r4]
   19b9c:	str	r0, [r4, #4]
   19ba0:	mov	r0, r1
   19ba4:	bl	1d4d8 <main@@Base+0x219c>
   19ba8:	strb	r0, [r4]
   19bac:	cmp	r0, #0
   19bb0:	popeq	{r4, r5, fp, pc}
   19bb4:	mov	r0, r5
   19bb8:	bl	1d548 <main@@Base+0x220c>
   19bbc:	str	r0, [r4, #4]
   19bc0:	pop	{r4, r5, fp, pc}
   19bc4:	cmp	r0, #0
   19bc8:	moveq	r0, #0
   19bcc:	bxeq	lr
   19bd0:	b	1bc88 <main@@Base+0x94c>
   19bd4:	push	{r4, r5, fp, lr}
   19bd8:	add	fp, sp, #8
   19bdc:	cmp	r0, #0
   19be0:	beq	19c24 <test_mixed_type_union@@Base+0xbd8>
   19be4:	mov	r4, r0
   19be8:	bl	1b5d8 <main@@Base+0x29c>
   19bec:	sub	r5, r4, r0
   19bf0:	mov	r0, r5
   19bf4:	bl	1b5e0 <main@@Base+0x2a4>
   19bf8:	cmp	r0, #18
   19bfc:	bcc	19c1c <test_mixed_type_union@@Base+0xbd0>
   19c00:	add	r0, r5, #16
   19c04:	bl	1b5e0 <main@@Base+0x2a4>
   19c08:	cmp	r0, #0
   19c0c:	beq	19c1c <test_mixed_type_union@@Base+0xbd0>
   19c10:	add	r0, r4, r0
   19c14:	pop	{r4, r5, fp, lr}
   19c18:	b	1c7ac <main@@Base+0x1470>
   19c1c:	mov	r0, #0
   19c20:	pop	{r4, r5, fp, pc}
   19c24:	movw	r0, #12494	; 0x30ce
   19c28:	movt	r0, #2
   19c2c:	movw	r1, #12532	; 0x30f4
   19c30:	movt	r1, #2
   19c34:	movw	r3, #19395	; 0x4bc3
   19c38:	movt	r3, #2
   19c3c:	movw	r2, #822	; 0x336
   19c40:	bl	12f88 <__assert_fail@plt>
   19c44:	push	{r4, r5, r6, sl, fp, lr}
   19c48:	add	fp, sp, #16
   19c4c:	cmp	r0, #0
   19c50:	beq	19c9c <test_mixed_type_union@@Base+0xc50>
   19c54:	mov	r4, r0
   19c58:	bl	1b5d8 <main@@Base+0x29c>
   19c5c:	sub	r6, r4, r0
   19c60:	mov	r0, r6
   19c64:	bl	1b5e0 <main@@Base+0x2a4>
   19c68:	mov	r5, #0
   19c6c:	cmp	r0, #20
   19c70:	bcc	19c94 <test_mixed_type_union@@Base+0xc48>
   19c74:	add	r0, r6, #18
   19c78:	bl	1b5e0 <main@@Base+0x2a4>
   19c7c:	cmp	r0, #0
   19c80:	beq	19c94 <test_mixed_type_union@@Base+0xc48>
   19c84:	add	r4, r4, r0
   19c88:	mov	r0, r4
   19c8c:	bl	1b5cc <main@@Base+0x290>
   19c90:	add	r5, r4, r0
   19c94:	mov	r0, r5
   19c98:	pop	{r4, r5, r6, sl, fp, pc}
   19c9c:	movw	r0, #12494	; 0x30ce
   19ca0:	movt	r0, #2
   19ca4:	movw	r1, #12532	; 0x30f4
   19ca8:	movt	r1, #2
   19cac:	movw	r3, #19474	; 0x4c12
   19cb0:	movt	r3, #2
   19cb4:	movw	r2, #822	; 0x336
   19cb8:	bl	12f88 <__assert_fail@plt>
   19cbc:	push	{r4, r5, fp, lr}
   19cc0:	add	fp, sp, #8
   19cc4:	cmp	r0, #0
   19cc8:	beq	19d0c <test_mixed_type_union@@Base+0xcc0>
   19ccc:	mov	r4, r0
   19cd0:	bl	1b5d8 <main@@Base+0x29c>
   19cd4:	sub	r5, r4, r0
   19cd8:	mov	r0, r5
   19cdc:	bl	1b5e0 <main@@Base+0x2a4>
   19ce0:	cmp	r0, #10
   19ce4:	bcc	19d04 <test_mixed_type_union@@Base+0xcb8>
   19ce8:	add	r0, r5, #8
   19cec:	bl	1b5e0 <main@@Base+0x2a4>
   19cf0:	cmp	r0, #0
   19cf4:	beq	19d04 <test_mixed_type_union@@Base+0xcb8>
   19cf8:	add	r0, r4, r0
   19cfc:	pop	{r4, r5, fp, lr}
   19d00:	b	1c7ac <main@@Base+0x1470>
   19d04:	mov	r0, #0
   19d08:	pop	{r4, r5, fp, pc}
   19d0c:	movw	r0, #12494	; 0x30ce
   19d10:	movt	r0, #2
   19d14:	movw	r1, #12532	; 0x30f4
   19d18:	movt	r1, #2
   19d1c:	movw	r3, #19539	; 0x4c53
   19d20:	movt	r3, #2
   19d24:	mov	r2, #820	; 0x334
   19d28:	bl	12f88 <__assert_fail@plt>
   19d2c:	push	{r4, r5, r6, sl, fp, lr}
   19d30:	add	fp, sp, #16
   19d34:	cmp	r0, #0
   19d38:	beq	19d84 <test_mixed_type_union@@Base+0xd38>
   19d3c:	mov	r4, r0
   19d40:	bl	1b5d8 <main@@Base+0x29c>
   19d44:	sub	r6, r4, r0
   19d48:	mov	r0, r6
   19d4c:	bl	1b5e0 <main@@Base+0x2a4>
   19d50:	mov	r5, #0
   19d54:	cmp	r0, #12
   19d58:	bcc	19d7c <test_mixed_type_union@@Base+0xd30>
   19d5c:	add	r0, r6, #10
   19d60:	bl	1b5e0 <main@@Base+0x2a4>
   19d64:	cmp	r0, #0
   19d68:	beq	19d7c <test_mixed_type_union@@Base+0xd30>
   19d6c:	add	r4, r4, r0
   19d70:	mov	r0, r4
   19d74:	bl	1b5cc <main@@Base+0x290>
   19d78:	add	r5, r4, r0
   19d7c:	mov	r0, r5
   19d80:	pop	{r4, r5, r6, sl, fp, pc}
   19d84:	movw	r0, #12494	; 0x30ce
   19d88:	movt	r0, #2
   19d8c:	movw	r1, #12532	; 0x30f4
   19d90:	movt	r1, #2
   19d94:	movw	r3, #19623	; 0x4ca7
   19d98:	movt	r3, #2
   19d9c:	mov	r2, #820	; 0x334
   19da0:	bl	12f88 <__assert_fail@plt>
   19da4:	push	{r4, r5, fp, lr}
   19da8:	add	fp, sp, #8
   19dac:	cmp	r0, #0
   19db0:	beq	19df4 <test_mixed_type_union@@Base+0xda8>
   19db4:	mov	r4, r0
   19db8:	bl	1b5d8 <main@@Base+0x29c>
   19dbc:	sub	r5, r4, r0
   19dc0:	mov	r0, r5
   19dc4:	bl	1b5e0 <main@@Base+0x2a4>
   19dc8:	cmp	r0, #6
   19dcc:	bcc	19dec <test_mixed_type_union@@Base+0xda0>
   19dd0:	add	r0, r5, #4
   19dd4:	bl	1b5e0 <main@@Base+0x2a4>
   19dd8:	cmp	r0, #0
   19ddc:	beq	19dec <test_mixed_type_union@@Base+0xda0>
   19de0:	add	r0, r4, r0
   19de4:	pop	{r4, r5, fp, lr}
   19de8:	b	1bc64 <main@@Base+0x928>
   19dec:	mov	r0, #0
   19df0:	pop	{r4, r5, fp, pc}
   19df4:	movw	r0, #12494	; 0x30ce
   19df8:	movt	r0, #2
   19dfc:	movw	r1, #12532	; 0x30f4
   19e00:	movt	r1, #2
   19e04:	movw	r3, #19693	; 0x4ced
   19e08:	movt	r3, #2
   19e0c:	movw	r2, #770	; 0x302
   19e10:	bl	12f88 <__assert_fail@plt>
   19e14:	push	{r4, r5, fp, lr}
   19e18:	add	fp, sp, #8
   19e1c:	cmp	r0, #0
   19e20:	beq	19e64 <test_mixed_type_union@@Base+0xe18>
   19e24:	mov	r4, r0
   19e28:	bl	1b5d8 <main@@Base+0x29c>
   19e2c:	sub	r5, r4, r0
   19e30:	mov	r0, r5
   19e34:	bl	1b5e0 <main@@Base+0x2a4>
   19e38:	cmp	r0, #14
   19e3c:	bcc	19e5c <test_mixed_type_union@@Base+0xe10>
   19e40:	add	r0, r5, #12
   19e44:	bl	1b5e0 <main@@Base+0x2a4>
   19e48:	cmp	r0, #0
   19e4c:	beq	19e5c <test_mixed_type_union@@Base+0xe10>
   19e50:	add	r0, r4, r0
   19e54:	pop	{r4, r5, fp, lr}
   19e58:	b	1c7ac <main@@Base+0x1470>
   19e5c:	mov	r0, #0
   19e60:	pop	{r4, r5, fp, pc}
   19e64:	movw	r0, #12494	; 0x30ce
   19e68:	movt	r0, #2
   19e6c:	movw	r1, #12532	; 0x30f4
   19e70:	movt	r1, #2
   19e74:	movw	r3, #19764	; 0x4d34
   19e78:	movt	r3, #2
   19e7c:	movw	r2, #821	; 0x335
   19e80:	bl	12f88 <__assert_fail@plt>
   19e84:	cmp	r0, #0
   19e88:	addne	r0, r0, #4
   19e8c:	bx	lr
   19e90:	push	{r4, r5, r6, sl, fp, lr}
   19e94:	add	fp, sp, #16
   19e98:	cmp	r0, #0
   19e9c:	beq	19ee8 <test_mixed_type_union@@Base+0xe9c>
   19ea0:	mov	r4, r0
   19ea4:	bl	1b5d8 <main@@Base+0x29c>
   19ea8:	sub	r6, r4, r0
   19eac:	mov	r0, r6
   19eb0:	bl	1b5e0 <main@@Base+0x2a4>
   19eb4:	mov	r5, #0
   19eb8:	cmp	r0, #16
   19ebc:	bcc	19ee0 <test_mixed_type_union@@Base+0xe94>
   19ec0:	add	r0, r6, #14
   19ec4:	bl	1b5e0 <main@@Base+0x2a4>
   19ec8:	cmp	r0, #0
   19ecc:	beq	19ee0 <test_mixed_type_union@@Base+0xe94>
   19ed0:	add	r4, r4, r0
   19ed4:	mov	r0, r4
   19ed8:	bl	1b5cc <main@@Base+0x290>
   19edc:	add	r5, r4, r0
   19ee0:	mov	r0, r5
   19ee4:	pop	{r4, r5, r6, sl, fp, pc}
   19ee8:	movw	r0, #12494	; 0x30ce
   19eec:	movt	r0, #2
   19ef0:	movw	r1, #12532	; 0x30f4
   19ef4:	movt	r1, #2
   19ef8:	movw	r3, #19847	; 0x4d87
   19efc:	movt	r3, #2
   19f00:	movw	r2, #821	; 0x335
   19f04:	bl	12f88 <__assert_fail@plt>
   19f08:	push	{fp, lr}
   19f0c:	mov	fp, sp
   19f10:	bl	19e90 <test_mixed_type_union@@Base+0xe44>
   19f14:	pop	{fp, lr}
   19f18:	b	19e84 <test_mixed_type_union@@Base+0xe38>
   19f1c:	push	{r4, r5, fp, lr}
   19f20:	add	fp, sp, #8
   19f24:	mov	r5, r1
   19f28:	mov	r4, r0
   19f2c:	mov	r0, #0
   19f30:	str	r0, [r4]
   19f34:	str	r0, [r4, #4]
   19f38:	mov	r0, r1
   19f3c:	bl	19e14 <test_mixed_type_union@@Base+0xdc8>
   19f40:	strb	r0, [r4]
   19f44:	cmp	r0, #0
   19f48:	popeq	{r4, r5, fp, pc}
   19f4c:	mov	r0, r5
   19f50:	bl	19e90 <test_mixed_type_union@@Base+0xe44>
   19f54:	str	r0, [r4, #4]
   19f58:	pop	{r4, r5, fp, pc}
   19f5c:	mov	r0, r1
   19f60:	b	19e84 <test_mixed_type_union@@Base+0xe38>
   19f64:	push	{r4, r5, r6, sl, fp, lr}
   19f68:	add	fp, sp, #16
   19f6c:	mov	r4, r1
   19f70:	mov	r5, r0
   19f74:	mov	r0, r1
   19f78:	bl	1a048 <test_mixed_type_union@@Base+0xffc>
   19f7c:	mov	r6, r0
   19f80:	str	r0, [r5]
   19f84:	mov	r0, r4
   19f88:	bl	1d5c0 <main@@Base+0x2284>
   19f8c:	mov	r4, r0
   19f90:	str	r0, [r5, #4]
   19f94:	mov	r0, r6
   19f98:	bl	1c78c <main@@Base+0x1450>
   19f9c:	mov	r5, r0
   19fa0:	mov	r0, r4
   19fa4:	bl	1c78c <main@@Base+0x1450>
   19fa8:	cmp	r5, r0
   19fac:	popeq	{r4, r5, r6, sl, fp, pc}
   19fb0:	movw	r0, #18368	; 0x47c0
   19fb4:	movt	r0, #2
   19fb8:	movw	r1, #12532	; 0x30f4
   19fbc:	movt	r1, #2
   19fc0:	movw	r3, #19916	; 0x4dcc
   19fc4:	movt	r3, #2
   19fc8:	movw	r2, #823	; 0x337
   19fcc:	bl	12f88 <__assert_fail@plt>
   19fd0:	push	{r4, r5, r6, r7, fp, lr}
   19fd4:	add	fp, sp, #16
   19fd8:	mov	r5, r3
   19fdc:	mov	r6, r2
   19fe0:	mov	r7, r1
   19fe4:	mov	r4, r0
   19fe8:	mov	r0, #0
   19fec:	str	r0, [r4]
   19ff0:	str	r0, [r4, #4]
   19ff4:	mov	r0, r1
   19ff8:	bl	1c78c <main@@Base+0x1450>
   19ffc:	cmp	r0, r5
   1a000:	bls	1a028 <test_mixed_type_union@@Base+0xfdc>
   1a004:	ldrb	r0, [r7, r5]
   1a008:	strb	r0, [r4]
   1a00c:	cmp	r0, #0
   1a010:	popeq	{r4, r5, r6, r7, fp, pc}
   1a014:	mov	r0, r6
   1a018:	mov	r1, r5
   1a01c:	bl	18ea8 <test_union_vector@@Base+0x4c8>
   1a020:	str	r0, [r4, #4]
   1a024:	pop	{r4, r5, r6, r7, fp, pc}
   1a028:	movw	r0, #18561	; 0x4881
   1a02c:	movt	r0, #2
   1a030:	movw	r1, #12532	; 0x30f4
   1a034:	movt	r1, #2
   1a038:	movw	r3, #20074	; 0x4e6a
   1a03c:	movt	r3, #2
   1a040:	movw	r2, #773	; 0x305
   1a044:	bl	12f88 <__assert_fail@plt>
   1a048:	push	{r4, r5, r6, sl, fp, lr}
   1a04c:	add	fp, sp, #16
   1a050:	cmp	r0, #0
   1a054:	beq	1a0a4 <test_mixed_type_union@@Base+0x1058>
   1a058:	mov	r4, r0
   1a05c:	bl	1b5d8 <main@@Base+0x29c>
   1a060:	sub	r6, r4, r0
   1a064:	mov	r0, r6
   1a068:	bl	1b5e0 <main@@Base+0x2a4>
   1a06c:	mov	r5, #0
   1a070:	cmp	r0, #22
   1a074:	bcc	1a09c <test_mixed_type_union@@Base+0x1050>
   1a078:	add	r0, r6, #20
   1a07c:	bl	1b5e0 <main@@Base+0x2a4>
   1a080:	cmp	r0, #0
   1a084:	beq	1a09c <test_mixed_type_union@@Base+0x1050>
   1a088:	add	r4, r4, r0
   1a08c:	mov	r0, r4
   1a090:	bl	1b5cc <main@@Base+0x290>
   1a094:	add	r0, r4, r0
   1a098:	add	r5, r0, #4
   1a09c:	mov	r0, r5
   1a0a0:	pop	{r4, r5, r6, sl, fp, pc}
   1a0a4:	movw	r0, #12494	; 0x30ce
   1a0a8:	movt	r0, #2
   1a0ac:	movw	r1, #12532	; 0x30f4
   1a0b0:	movt	r1, #2
   1a0b4:	movw	r3, #20170	; 0x4eca
   1a0b8:	movt	r3, #2
   1a0bc:	movw	r2, #823	; 0x337
   1a0c0:	bl	12f88 <__assert_fail@plt>
   1a0c4:	push	{fp, lr}
   1a0c8:	mov	fp, sp
   1a0cc:	mov	r0, r1
   1a0d0:	bl	1d63c <main@@Base+0x2300>
   1a0d4:	pop	{fp, pc}
   1a0d8:	b	1c78c <main@@Base+0x1450>

0001a0dc <test_add_set_defaults@@Base>:
   1a0dc:	push	{r4, r5, fp, lr}
   1a0e0:	add	fp, sp, #8
   1a0e4:	sub	sp, sp, #8
   1a0e8:	mov	r4, r0
   1a0ec:	bl	1db08 <flatcc_builder_reset@@Base>
   1a0f0:	mov	r0, r4
   1a0f4:	bl	15fd0 <gen_monster@@Base+0x4cc>
   1a0f8:	movw	r1, #9185	; 0x23e1
   1a0fc:	movt	r1, #2
   1a100:	mov	r0, r4
   1a104:	bl	13d44 <test_empty_monster@@Base+0x11c>
   1a108:	mov	r0, r4
   1a10c:	mov	r1, #100	; 0x64
   1a110:	bl	15ffc <gen_monster@@Base+0x4f8>
   1a114:	mov	r0, r4
   1a118:	mov	r1, #100	; 0x64
   1a11c:	bl	1a250 <test_add_set_defaults@@Base+0x174>
   1a120:	mov	r0, r4
   1a124:	mov	r1, #8
   1a128:	bl	16048 <gen_monster@@Base+0x544>
   1a12c:	mov	r0, r4
   1a130:	bl	163d0 <gen_monster@@Base+0x8cc>
   1a134:	add	r1, sp, #4
   1a138:	mov	r0, r4
   1a13c:	bl	2081c <flatcc_builder_get_direct_buffer@@Base>
   1a140:	bl	13204 <verify_empty_monster@@Base+0x17c>
   1a144:	mov	r5, r0
   1a148:	bl	132b4 <verify_empty_monster@@Base+0x22c>
   1a14c:	cmp	r0, #0
   1a150:	beq	1a16c <test_add_set_defaults@@Base+0x90>
   1a154:	movw	r0, #28480	; 0x6f40
   1a158:	movt	r0, #2
   1a15c:	bl	12eec <puts@plt>
   1a160:	mvn	r0, #0
   1a164:	sub	sp, fp, #8
   1a168:	pop	{r4, r5, fp, pc}
   1a16c:	mov	r0, r5
   1a170:	bl	1528c <verify_monster@@Base+0xce8>
   1a174:	cmp	r0, #0
   1a178:	beq	1a198 <test_add_set_defaults@@Base+0xbc>
   1a17c:	mov	r0, r5
   1a180:	bl	1a28c <test_add_set_defaults@@Base+0x1b0>
   1a184:	cmp	r0, #0
   1a188:	beq	1a1a4 <test_add_set_defaults@@Base+0xc8>
   1a18c:	movw	r0, #28432	; 0x6f10
   1a190:	movt	r0, #2
   1a194:	b	1a15c <test_add_set_defaults@@Base+0x80>
   1a198:	movw	r0, #28192	; 0x6e20
   1a19c:	movt	r0, #2
   1a1a0:	b	1a15c <test_add_set_defaults@@Base+0x80>
   1a1a4:	mov	r0, r4
   1a1a8:	bl	1db08 <flatcc_builder_reset@@Base>
   1a1ac:	mov	r0, r4
   1a1b0:	bl	15fd0 <gen_monster@@Base+0x4cc>
   1a1b4:	movw	r1, #9185	; 0x23e1
   1a1b8:	movt	r1, #2
   1a1bc:	mov	r0, r4
   1a1c0:	bl	13d44 <test_empty_monster@@Base+0x11c>
   1a1c4:	mov	r0, r4
   1a1c8:	bl	1a2f4 <test_add_set_defaults@@Base+0x218>
   1a1cc:	mov	r0, r4
   1a1d0:	bl	1a320 <test_add_set_defaults@@Base+0x244>
   1a1d4:	mov	r0, r4
   1a1d8:	bl	1a34c <test_add_set_defaults@@Base+0x270>
   1a1dc:	mov	r0, r4
   1a1e0:	bl	163d0 <gen_monster@@Base+0x8cc>
   1a1e4:	add	r1, sp, #4
   1a1e8:	mov	r0, r4
   1a1ec:	bl	2081c <flatcc_builder_get_direct_buffer@@Base>
   1a1f0:	bl	13204 <verify_empty_monster@@Base+0x17c>
   1a1f4:	mov	r4, r0
   1a1f8:	bl	132b4 <verify_empty_monster@@Base+0x22c>
   1a1fc:	cmp	r0, #0
   1a200:	beq	1a238 <test_add_set_defaults@@Base+0x15c>
   1a204:	mov	r0, r4
   1a208:	bl	1528c <verify_monster@@Base+0xce8>
   1a20c:	cmp	r0, #0
   1a210:	beq	1a244 <test_add_set_defaults@@Base+0x168>
   1a214:	mov	r0, r4
   1a218:	bl	1a28c <test_add_set_defaults@@Base+0x1b0>
   1a21c:	mov	r1, r0
   1a220:	mov	r0, #0
   1a224:	cmp	r1, #0
   1a228:	bne	1a164 <test_add_set_defaults@@Base+0x88>
   1a22c:	movw	r0, #28368	; 0x6ed0
   1a230:	movt	r0, #2
   1a234:	b	1a15c <test_add_set_defaults@@Base+0x80>
   1a238:	movw	r0, #28240	; 0x6e50
   1a23c:	movt	r0, #2
   1a240:	b	1a15c <test_add_set_defaults@@Base+0x80>
   1a244:	movw	r0, #28304	; 0x6e90
   1a248:	movt	r0, #2
   1a24c:	b	1a15c <test_add_set_defaults@@Base+0x80>
   1a250:	push	{r4, sl, fp, lr}
   1a254:	add	fp, sp, #8
   1a258:	cmp	r1, #150	; 0x96
   1a25c:	popeq	{r4, sl, fp, pc}
   1a260:	mov	r4, r1
   1a264:	mov	r1, #1
   1a268:	mov	r2, #2
   1a26c:	mov	r3, #2
   1a270:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1a274:	cmp	r0, #0
   1a278:	beq	1a288 <test_add_set_defaults@@Base+0x1ac>
   1a27c:	mov	r1, r4
   1a280:	pop	{r4, sl, fp, lr}
   1a284:	b	1ba7c <main@@Base+0x740>
   1a288:	pop	{r4, sl, fp, pc}
   1a28c:	push	{r4, sl, fp, lr}
   1a290:	add	fp, sp, #8
   1a294:	cmp	r0, #0
   1a298:	beq	1a2d4 <test_add_set_defaults@@Base+0x1f8>
   1a29c:	mov	r4, r0
   1a2a0:	bl	1b5d8 <main@@Base+0x29c>
   1a2a4:	sub	r4, r4, r0
   1a2a8:	mov	r0, r4
   1a2ac:	bl	1b5e0 <main@@Base+0x2a4>
   1a2b0:	mov	r1, r0
   1a2b4:	mov	r0, #0
   1a2b8:	cmp	r1, #18
   1a2bc:	popcc	{r4, sl, fp, pc}
   1a2c0:	add	r0, r4, #16
   1a2c4:	bl	1b5e0 <main@@Base+0x2a4>
   1a2c8:	cmp	r0, #0
   1a2cc:	movwne	r0, #1
   1a2d0:	pop	{r4, sl, fp, pc}
   1a2d4:	movw	r0, #12494	; 0x30ce
   1a2d8:	movt	r0, #2
   1a2dc:	movw	r1, #12532	; 0x30f4
   1a2e0:	movt	r1, #2
   1a2e4:	movw	r3, #20341	; 0x4f75
   1a2e8:	movt	r3, #2
   1a2ec:	movw	r2, #705	; 0x2c1
   1a2f0:	bl	12f88 <__assert_fail@plt>
   1a2f4:	push	{fp, lr}
   1a2f8:	mov	fp, sp
   1a2fc:	mov	r1, #2
   1a300:	mov	r2, #2
   1a304:	mov	r3, #2
   1a308:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1a30c:	cmp	r0, #0
   1a310:	popeq	{fp, pc}
   1a314:	mov	r1, #100	; 0x64
   1a318:	pop	{fp, lr}
   1a31c:	b	1ba7c <main@@Base+0x740>
   1a320:	push	{fp, lr}
   1a324:	mov	fp, sp
   1a328:	mov	r1, #1
   1a32c:	mov	r2, #2
   1a330:	mov	r3, #2
   1a334:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1a338:	cmp	r0, #0
   1a33c:	popeq	{fp, pc}
   1a340:	mov	r1, #100	; 0x64
   1a344:	pop	{fp, lr}
   1a348:	b	1ba7c <main@@Base+0x740>
   1a34c:	push	{fp, lr}
   1a350:	mov	fp, sp
   1a354:	mov	r1, #6
   1a358:	mov	r2, #1
   1a35c:	mov	r3, #1
   1a360:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1a364:	cmp	r0, #0
   1a368:	popeq	{fp, pc}
   1a36c:	mov	r1, #8
   1a370:	pop	{fp, lr}
   1a374:	b	1c7cc <main@@Base+0x1490>

0001a378 <test_nested_buffer@@Base>:
   1a378:	push	{r4, r5, fp, lr}
   1a37c:	add	fp, sp, #8
   1a380:	sub	sp, sp, #8
   1a384:	mov	r5, r0
   1a388:	bl	1db08 <flatcc_builder_reset@@Base>
   1a38c:	mov	r0, r5
   1a390:	bl	15fd0 <gen_monster@@Base+0x4cc>
   1a394:	movw	r4, #9185	; 0x23e1
   1a398:	movt	r4, #2
   1a39c:	mov	r0, r5
   1a3a0:	mov	r1, r4
   1a3a4:	bl	13d44 <test_empty_monster@@Base+0x11c>
   1a3a8:	mov	r0, r5
   1a3ac:	bl	1a4a4 <test_nested_buffer@@Base+0x12c>
   1a3b0:	movw	r1, #12109	; 0x2f4d
   1a3b4:	movt	r1, #2
   1a3b8:	mov	r0, r5
   1a3bc:	bl	13d44 <test_empty_monster@@Base+0x11c>
   1a3c0:	mov	r0, r5
   1a3c4:	bl	1a4d0 <test_nested_buffer@@Base+0x158>
   1a3c8:	mov	r0, r5
   1a3cc:	mov	r1, #10
   1a3d0:	bl	15ffc <gen_monster@@Base+0x4f8>
   1a3d4:	mov	r0, r5
   1a3d8:	bl	163d0 <gen_monster@@Base+0x8cc>
   1a3dc:	add	r1, sp, #4
   1a3e0:	mov	r0, r5
   1a3e4:	bl	2081c <flatcc_builder_get_direct_buffer@@Base>
   1a3e8:	mov	r5, r0
   1a3ec:	movw	r0, #36976	; 0x9070
   1a3f0:	movt	r0, #3
   1a3f4:	ldr	r3, [r0]
   1a3f8:	ldr	r2, [sp, #4]
   1a3fc:	movw	r0, #12125	; 0x2f5d
   1a400:	movt	r0, #2
   1a404:	mov	r1, r5
   1a408:	bl	1364c <test_type_aliases@@Base+0x254>
   1a40c:	mov	r0, r5
   1a410:	bl	13204 <verify_empty_monster@@Base+0x17c>
   1a414:	mov	r5, r0
   1a418:	bl	15010 <verify_monster@@Base+0xa6c>
   1a41c:	mov	r1, r4
   1a420:	bl	12e8c <strcmp@plt>
   1a424:	cmp	r0, #0
   1a428:	beq	1a438 <test_nested_buffer@@Base+0xc0>
   1a42c:	movw	r0, #28608	; 0x6fc0
   1a430:	movt	r0, #2
   1a434:	b	1a494 <test_nested_buffer@@Base+0x11c>
   1a438:	mov	r0, r5
   1a43c:	bl	1a4fc <test_nested_buffer@@Base+0x184>
   1a440:	mov	r4, r0
   1a444:	mov	r0, r5
   1a448:	bl	13244 <verify_empty_monster@@Base+0x1bc>
   1a44c:	cmp	r0, #10
   1a450:	bne	1a48c <test_nested_buffer@@Base+0x114>
   1a454:	mov	r0, r4
   1a458:	bl	15010 <verify_monster@@Base+0xa6c>
   1a45c:	mov	r0, r4
   1a460:	bl	15010 <verify_monster@@Base+0xa6c>
   1a464:	movw	r1, #12109	; 0x2f4d
   1a468:	movt	r1, #2
   1a46c:	bl	12e8c <strcmp@plt>
   1a470:	cmp	r0, #0
   1a474:	moveq	r0, #0
   1a478:	subeq	sp, fp, #8
   1a47c:	popeq	{r4, r5, fp, pc}
   1a480:	movw	r0, #28528	; 0x6f70
   1a484:	movt	r0, #2
   1a488:	b	1a494 <test_nested_buffer@@Base+0x11c>
   1a48c:	movw	r0, #28560	; 0x6f90
   1a490:	movt	r0, #2
   1a494:	bl	12eec <puts@plt>
   1a498:	mvn	r0, #0
   1a49c:	sub	sp, fp, #8
   1a4a0:	pop	{r4, r5, fp, pc}
   1a4a4:	push	{r4, sl, fp, lr}
   1a4a8:	add	fp, sp, #8
   1a4ac:	mov	r4, r0
   1a4b0:	movw	r1, #9012	; 0x2334
   1a4b4:	movt	r1, #2
   1a4b8:	bl	13d30 <test_empty_monster@@Base+0x108>
   1a4bc:	cmp	r0, #0
   1a4c0:	popne	{r4, sl, fp, pc}
   1a4c4:	mov	r0, r4
   1a4c8:	pop	{r4, sl, fp, lr}
   1a4cc:	b	13d3c <test_empty_monster@@Base+0x114>
   1a4d0:	push	{r4, sl, fp, lr}
   1a4d4:	add	fp, sp, #8
   1a4d8:	mov	r4, r0
   1a4dc:	bl	13d64 <test_empty_monster@@Base+0x13c>
   1a4e0:	mov	r1, r0
   1a4e4:	mov	r0, r4
   1a4e8:	bl	13db4 <test_empty_monster@@Base+0x18c>
   1a4ec:	mov	r1, r0
   1a4f0:	mov	r0, r4
   1a4f4:	pop	{r4, sl, fp, lr}
   1a4f8:	b	1d68c <main@@Base+0x2350>
   1a4fc:	push	{r4, r5, fp, lr}
   1a500:	add	fp, sp, #8
   1a504:	bl	1d6b4 <main@@Base+0x2378>
   1a508:	mov	r5, #0
   1a50c:	cmp	r0, #0
   1a510:	beq	1a538 <test_nested_buffer@@Base+0x1c0>
   1a514:	mov	r4, r0
   1a518:	movw	r1, #9012	; 0x2334
   1a51c:	movt	r1, #2
   1a520:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   1a524:	cmp	r0, #0
   1a528:	beq	1a538 <test_nested_buffer@@Base+0x1c0>
   1a52c:	mov	r0, r4
   1a530:	bl	1b5cc <main@@Base+0x290>
   1a534:	add	r5, r4, r0
   1a538:	mov	r0, r5
   1a53c:	pop	{r4, r5, fp, pc}

0001a540 <test_nested_buffer_first@@Base>:
   1a540:	push	{r4, r5, fp, lr}
   1a544:	add	fp, sp, #8
   1a548:	sub	sp, sp, #8
   1a54c:	mov	r4, r0
   1a550:	bl	1db08 <flatcc_builder_reset@@Base>
   1a554:	mov	r0, r4
   1a558:	bl	15fd0 <gen_monster@@Base+0x4cc>
   1a55c:	mov	r0, r4
   1a560:	bl	1a4a4 <test_nested_buffer@@Base+0x12c>
   1a564:	movw	r1, #12109	; 0x2f4d
   1a568:	movt	r1, #2
   1a56c:	mov	r0, r4
   1a570:	bl	13d44 <test_empty_monster@@Base+0x11c>
   1a574:	mov	r0, r4
   1a578:	bl	1a4d0 <test_nested_buffer@@Base+0x158>
   1a57c:	mov	r0, r4
   1a580:	mov	r1, #10
   1a584:	bl	15ffc <gen_monster@@Base+0x4f8>
   1a588:	movw	r5, #9185	; 0x23e1
   1a58c:	movt	r5, #2
   1a590:	mov	r0, r4
   1a594:	mov	r1, r5
   1a598:	bl	13d44 <test_empty_monster@@Base+0x11c>
   1a59c:	mov	r0, r4
   1a5a0:	bl	163d0 <gen_monster@@Base+0x8cc>
   1a5a4:	add	r1, sp, #4
   1a5a8:	mov	r0, r4
   1a5ac:	bl	2081c <flatcc_builder_get_direct_buffer@@Base>
   1a5b0:	mov	r4, r0
   1a5b4:	movw	r0, #36976	; 0x9070
   1a5b8:	movt	r0, #3
   1a5bc:	ldr	r3, [r0]
   1a5c0:	ldr	r2, [sp, #4]
   1a5c4:	movw	r0, #12125	; 0x2f5d
   1a5c8:	movt	r0, #2
   1a5cc:	mov	r1, r4
   1a5d0:	bl	1364c <test_type_aliases@@Base+0x254>
   1a5d4:	mov	r0, r4
   1a5d8:	bl	13204 <verify_empty_monster@@Base+0x17c>
   1a5dc:	mov	r4, r0
   1a5e0:	bl	15010 <verify_monster@@Base+0xa6c>
   1a5e4:	mov	r1, r5
   1a5e8:	bl	12e8c <strcmp@plt>
   1a5ec:	cmp	r0, #0
   1a5f0:	beq	1a600 <test_nested_buffer_first@@Base+0xc0>
   1a5f4:	movw	r0, #28608	; 0x6fc0
   1a5f8:	movt	r0, #2
   1a5fc:	b	1a65c <test_nested_buffer_first@@Base+0x11c>
   1a600:	mov	r0, r4
   1a604:	bl	1a4fc <test_nested_buffer@@Base+0x184>
   1a608:	mov	r5, r0
   1a60c:	mov	r0, r4
   1a610:	bl	13244 <verify_empty_monster@@Base+0x1bc>
   1a614:	cmp	r0, #10
   1a618:	bne	1a654 <test_nested_buffer_first@@Base+0x114>
   1a61c:	mov	r0, r5
   1a620:	bl	15010 <verify_monster@@Base+0xa6c>
   1a624:	mov	r0, r5
   1a628:	bl	15010 <verify_monster@@Base+0xa6c>
   1a62c:	movw	r1, #12109	; 0x2f4d
   1a630:	movt	r1, #2
   1a634:	bl	12e8c <strcmp@plt>
   1a638:	cmp	r0, #0
   1a63c:	moveq	r0, #0
   1a640:	subeq	sp, fp, #8
   1a644:	popeq	{r4, r5, fp, pc}
   1a648:	movw	r0, #28528	; 0x6f70
   1a64c:	movt	r0, #2
   1a650:	b	1a65c <test_nested_buffer_first@@Base+0x11c>
   1a654:	movw	r0, #28560	; 0x6f90
   1a658:	movt	r0, #2
   1a65c:	bl	12eec <puts@plt>
   1a660:	mvn	r0, #0
   1a664:	sub	sp, fp, #8
   1a668:	pop	{r4, r5, fp, pc}

0001a66c <test_nested_buffer_using_nest@@Base>:
   1a66c:	push	{r4, r5, r6, sl, fp, lr}
   1a670:	add	fp, sp, #16
   1a674:	sub	sp, sp, #8
   1a678:	sub	sp, sp, #1024	; 0x400
   1a67c:	mov	r4, r0
   1a680:	bl	1db08 <flatcc_builder_reset@@Base>
   1a684:	mov	r0, r4
   1a688:	bl	15fd0 <gen_monster@@Base+0x4cc>
   1a68c:	movw	r1, #12109	; 0x2f4d
   1a690:	movt	r1, #2
   1a694:	mov	r0, r4
   1a698:	bl	13d44 <test_empty_monster@@Base+0x11c>
   1a69c:	mov	r0, r4
   1a6a0:	mov	r1, #42	; 0x2a
   1a6a4:	bl	1a250 <test_add_set_defaults@@Base+0x174>
   1a6a8:	mov	r0, r4
   1a6ac:	bl	163d0 <gen_monster@@Base+0x8cc>
   1a6b0:	mov	r0, r4
   1a6b4:	bl	20790 <flatcc_builder_get_buffer_size@@Base>
   1a6b8:	mov	r5, r0
   1a6bc:	add	r1, sp, #8
   1a6c0:	mov	r0, r4
   1a6c4:	mov	r2, #1024	; 0x400
   1a6c8:	bl	20874 <flatcc_builder_copy_buffer@@Base>
   1a6cc:	cmp	r0, #0
   1a6d0:	beq	1a778 <test_nested_buffer_using_nest@@Base+0x10c>
   1a6d4:	mov	r0, r4
   1a6d8:	bl	1db08 <flatcc_builder_reset@@Base>
   1a6dc:	mov	r0, r4
   1a6e0:	bl	15fd0 <gen_monster@@Base+0x4cc>
   1a6e4:	add	r1, sp, #8
   1a6e8:	mov	r0, r4
   1a6ec:	mov	r2, r5
   1a6f0:	bl	1a80c <test_nested_buffer_using_nest@@Base+0x1a0>
   1a6f4:	mov	r0, r4
   1a6f8:	mov	r1, #10
   1a6fc:	bl	15ffc <gen_monster@@Base+0x4f8>
   1a700:	movw	r5, #9185	; 0x23e1
   1a704:	movt	r5, #2
   1a708:	mov	r0, r4
   1a70c:	mov	r1, r5
   1a710:	bl	13d44 <test_empty_monster@@Base+0x11c>
   1a714:	mov	r0, r4
   1a718:	bl	163d0 <gen_monster@@Base+0x8cc>
   1a71c:	add	r1, sp, #4
   1a720:	mov	r0, r4
   1a724:	bl	2081c <flatcc_builder_get_direct_buffer@@Base>
   1a728:	mov	r4, r0
   1a72c:	movw	r0, #36976	; 0x9070
   1a730:	movt	r0, #3
   1a734:	ldr	r3, [r0]
   1a738:	ldr	r2, [sp, #4]
   1a73c:	movw	r0, #12143	; 0x2f6f
   1a740:	movt	r0, #2
   1a744:	mov	r1, r4
   1a748:	bl	1364c <test_type_aliases@@Base+0x254>
   1a74c:	mov	r0, r4
   1a750:	bl	13204 <verify_empty_monster@@Base+0x17c>
   1a754:	mov	r6, r0
   1a758:	bl	15010 <verify_monster@@Base+0xa6c>
   1a75c:	mov	r1, r5
   1a760:	bl	12e8c <strcmp@plt>
   1a764:	cmp	r0, #0
   1a768:	beq	1a784 <test_nested_buffer_using_nest@@Base+0x118>
   1a76c:	movw	r0, #28608	; 0x6fc0
   1a770:	movt	r0, #2
   1a774:	b	1a7d8 <test_nested_buffer_using_nest@@Base+0x16c>
   1a778:	movw	r0, #28640	; 0x6fe0
   1a77c:	movt	r0, #2
   1a780:	b	1a7d8 <test_nested_buffer_using_nest@@Base+0x16c>
   1a784:	mov	r0, r6
   1a788:	bl	1a4fc <test_nested_buffer@@Base+0x184>
   1a78c:	mov	r4, r0
   1a790:	mov	r0, r6
   1a794:	bl	13244 <verify_empty_monster@@Base+0x1bc>
   1a798:	cmp	r0, #10
   1a79c:	bne	1a7d0 <test_nested_buffer_using_nest@@Base+0x164>
   1a7a0:	mov	r0, r4
   1a7a4:	bl	15010 <verify_monster@@Base+0xa6c>
   1a7a8:	mov	r0, r4
   1a7ac:	bl	15010 <verify_monster@@Base+0xa6c>
   1a7b0:	movw	r1, #12109	; 0x2f4d
   1a7b4:	movt	r1, #2
   1a7b8:	bl	12e8c <strcmp@plt>
   1a7bc:	cmp	r0, #0
   1a7c0:	beq	1a7e8 <test_nested_buffer_using_nest@@Base+0x17c>
   1a7c4:	movw	r0, #28528	; 0x6f70
   1a7c8:	movt	r0, #2
   1a7cc:	b	1a7d8 <test_nested_buffer_using_nest@@Base+0x16c>
   1a7d0:	movw	r0, #28560	; 0x6f90
   1a7d4:	movt	r0, #2
   1a7d8:	bl	12eec <puts@plt>
   1a7dc:	mvn	r0, #0
   1a7e0:	sub	sp, fp, #16
   1a7e4:	pop	{r4, r5, r6, sl, fp, pc}
   1a7e8:	mov	r0, r4
   1a7ec:	bl	1521c <verify_monster@@Base+0xc78>
   1a7f0:	mov	r1, r0
   1a7f4:	mov	r0, #0
   1a7f8:	cmp	r1, #42	; 0x2a
   1a7fc:	beq	1a7e0 <test_nested_buffer_using_nest@@Base+0x174>
   1a800:	movw	r0, #28672	; 0x7000
   1a804:	movt	r0, #2
   1a808:	b	1a7d8 <test_nested_buffer_using_nest@@Base+0x16c>
   1a80c:	push	{r4, sl, fp, lr}
   1a810:	add	fp, sp, #8
   1a814:	sub	sp, sp, #8
   1a818:	mov	r4, r0
   1a81c:	mvn	r0, #0
   1a820:	mov	r3, #8
   1a824:	str	r3, [sp]
   1a828:	str	r0, [sp, #4]
   1a82c:	mov	r0, r4
   1a830:	mov	r3, #1
   1a834:	bl	1f800 <flatcc_builder_create_vector@@Base>
   1a838:	mov	r1, r0
   1a83c:	mov	r0, r4
   1a840:	sub	sp, fp, #8
   1a844:	pop	{r4, sl, fp, lr}
   1a848:	b	1d68c <main@@Base+0x2350>

0001a84c <verify_include@@Base>:
   1a84c:	mov	r0, #0
   1a850:	bx	lr
   1a854:	nop	{0}

0001a858 <test_struct_buffer@@Base>:
   1a858:	push	{r4, r5, fp, lr}
   1a85c:	add	fp, sp, #8
   1a860:	sub	sp, sp, #104	; 0x68
   1a864:	mov	r5, r0
   1a868:	bl	1db08 <flatcc_builder_reset@@Base>
   1a86c:	mov	r0, r5
   1a870:	bl	1aa48 <test_struct_buffer@@Base+0x1f0>
   1a874:	mov	r0, r5
   1a878:	bl	20790 <flatcc_builder_get_buffer_size@@Base>
   1a87c:	cmp	r0, #48	; 0x30
   1a880:	bne	1a9fc <test_struct_buffer@@Base+0x1a4>
   1a884:	mov	r4, r0
   1a888:	movw	r0, #12231	; 0x2fc7
   1a88c:	movt	r0, #2
   1a890:	mov	r1, r4
   1a894:	bl	12e98 <printf@plt>
   1a898:	mov	r0, r5
   1a89c:	bl	20a34 <flatcc_builder_get_emit_context@@Base>
   1a8a0:	bl	1aa8c <test_struct_buffer@@Base+0x234>
   1a8a4:	cmp	r0, r4
   1a8a8:	bne	1aa1c <test_struct_buffer@@Base+0x1c4>
   1a8ac:	add	r1, sp, #4
   1a8b0:	mov	r0, r5
   1a8b4:	mov	r2, #100	; 0x64
   1a8b8:	bl	20874 <flatcc_builder_copy_buffer@@Base>
   1a8bc:	cmp	r0, #0
   1a8c0:	beq	1a924 <test_struct_buffer@@Base+0xcc>
   1a8c4:	movw	r0, #36976	; 0x9070
   1a8c8:	movt	r0, #3
   1a8cc:	ldr	r3, [r0]
   1a8d0:	movw	r0, #12395	; 0x306b
   1a8d4:	movt	r0, #2
   1a8d8:	add	r5, sp, #4
   1a8dc:	mov	r1, r5
   1a8e0:	mov	r2, r4
   1a8e4:	bl	1364c <test_type_aliases@@Base+0x254>
   1a8e8:	movw	r1, #9012	; 0x2334
   1a8ec:	movt	r1, #2
   1a8f0:	mov	r0, r5
   1a8f4:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   1a8f8:	cmp	r0, #0
   1a8fc:	beq	1a930 <test_struct_buffer@@Base+0xd8>
   1a900:	add	r0, sp, #4
   1a904:	movw	r1, #12335	; 0x302f
   1a908:	movt	r1, #2
   1a90c:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   1a910:	cmp	r0, #0
   1a914:	beq	1a93c <test_struct_buffer@@Base+0xe4>
   1a918:	movw	r0, #28848	; 0x70b0
   1a91c:	movt	r0, #2
   1a920:	b	1a9ec <test_struct_buffer@@Base+0x194>
   1a924:	movw	r0, #20827	; 0x515b
   1a928:	movt	r0, #2
   1a92c:	b	1a9ec <test_struct_buffer@@Base+0x194>
   1a930:	movw	r0, #28720	; 0x7030
   1a934:	movt	r0, #2
   1a938:	b	1a9ec <test_struct_buffer@@Base+0x194>
   1a93c:	add	r0, sp, #4
   1a940:	movw	r1, #9012	; 0x2334
   1a944:	movt	r1, #2
   1a948:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   1a94c:	cmp	r0, #0
   1a950:	beq	1a9e4 <test_struct_buffer@@Base+0x18c>
   1a954:	add	r0, sp, #4
   1a958:	bl	1aa94 <test_struct_buffer@@Base+0x23c>
   1a95c:	vldr	s0, [r0]
   1a960:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1a964:	vcmp.f32	s0, s2
   1a968:	vmrs	APSR_nzcv, fpscr
   1a96c:	bne	1a9d8 <test_struct_buffer@@Base+0x180>
   1a970:	vldr	s0, [r0, #4]
   1a974:	vmov.f32	s2, #0	; 0x40000000  2.0
   1a978:	vcmp.f32	s0, s2
   1a97c:	vmrs	APSR_nzcv, fpscr
   1a980:	bne	1a9d8 <test_struct_buffer@@Base+0x180>
   1a984:	vldr	s0, [r0, #8]
   1a988:	vmov.f32	s2, #8	; 0x40400000  3.0
   1a98c:	vcmp.f32	s0, s2
   1a990:	vmrs	APSR_nzcv, fpscr
   1a994:	bne	1a9d8 <test_struct_buffer@@Base+0x180>
   1a998:	vldr	d16, [pc, #160]	; 1aa40 <test_struct_buffer@@Base+0x1e8>
   1a99c:	vldr	d17, [r0, #16]
   1a9a0:	vcmp.f64	d17, d16
   1a9a4:	vmrs	APSR_nzcv, fpscr
   1a9a8:	bne	1a9d8 <test_struct_buffer@@Base+0x180>
   1a9ac:	ldrb	r1, [r0, #24]
   1a9b0:	cmp	r1, #8
   1a9b4:	bne	1a9d8 <test_struct_buffer@@Base+0x180>
   1a9b8:	ldrh	r1, [r0, #26]
   1a9bc:	movw	r2, #2730	; 0xaaa
   1a9c0:	cmp	r1, r2
   1a9c4:	bne	1a9d8 <test_struct_buffer@@Base+0x180>
   1a9c8:	ldrb	r1, [r0, #28]
   1a9cc:	mov	r0, #0
   1a9d0:	cmp	r1, #239	; 0xef
   1a9d4:	beq	1a9f4 <test_struct_buffer@@Base+0x19c>
   1a9d8:	movw	r0, #28816	; 0x7090
   1a9dc:	movt	r0, #2
   1a9e0:	b	1a9ec <test_struct_buffer@@Base+0x194>
   1a9e4:	movw	r0, #28768	; 0x7060
   1a9e8:	movt	r0, #2
   1a9ec:	bl	12eec <puts@plt>
   1a9f0:	mvn	r0, #0
   1a9f4:	sub	sp, fp, #8
   1a9f8:	pop	{r4, r5, fp, pc}
   1a9fc:	movw	r0, #12177	; 0x2f91
   1aa00:	movt	r0, #2
   1aa04:	movw	r1, #9622	; 0x2596
   1aa08:	movt	r1, #2
   1aa0c:	movw	r3, #12188	; 0x2f9c
   1aa10:	movt	r3, #2
   1aa14:	movw	r2, #2339	; 0x923
   1aa18:	bl	12f88 <__assert_fail@plt>
   1aa1c:	movw	r0, #12260	; 0x2fe4
   1aa20:	movt	r0, #2
   1aa24:	movw	r1, #9622	; 0x2596
   1aa28:	movt	r1, #2
   1aa2c:	movw	r3, #12188	; 0x2f9c
   1aa30:	movt	r3, #2
   1aa34:	movw	r2, #2341	; 0x925
   1aa38:	bl	12f88 <__assert_fail@plt>
   1aa3c:	nop	{0}
   1aa40:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1aa44:	andsmi	ip, r0, ip, asr #25
   1aa48:	push	{r4, sl, fp, lr}
   1aa4c:	add	fp, sp, #8
   1aa50:	sub	sp, sp, #8
   1aa54:	mov	r4, r0
   1aa58:	bl	1d730 <main@@Base+0x23f4>
   1aa5c:	mov	r3, r0
   1aa60:	mov	r0, #0
   1aa64:	mov	r1, #16
   1aa68:	str	r1, [sp]
   1aa6c:	str	r0, [sp, #4]
   1aa70:	movw	r1, #9012	; 0x2334
   1aa74:	movt	r1, #2
   1aa78:	mov	r0, r4
   1aa7c:	mov	r2, #0
   1aa80:	bl	1e000 <flatcc_builder_create_buffer@@Base>
   1aa84:	sub	sp, fp, #8
   1aa88:	pop	{r4, sl, fp, pc}
   1aa8c:	ldr	r0, [r0, #24]
   1aa90:	bx	lr
   1aa94:	push	{r4, r5, fp, lr}
   1aa98:	add	fp, sp, #8
   1aa9c:	mov	r5, #0
   1aaa0:	cmp	r0, #0
   1aaa4:	beq	1aacc <test_struct_buffer@@Base+0x274>
   1aaa8:	mov	r4, r0
   1aaac:	movw	r1, #9012	; 0x2334
   1aab0:	movt	r1, #2
   1aab4:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   1aab8:	cmp	r0, #0
   1aabc:	beq	1aacc <test_struct_buffer@@Base+0x274>
   1aac0:	mov	r0, r4
   1aac4:	bl	1b5cc <main@@Base+0x290>
   1aac8:	add	r5, r4, r0
   1aacc:	mov	r0, r5
   1aad0:	pop	{r4, r5, fp, pc}
   1aad4:	nop	{0}

0001aad8 <test_typed_struct_buffer@@Base>:
   1aad8:	push	{r4, r5, fp, lr}
   1aadc:	add	fp, sp, #8
   1aae0:	sub	sp, sp, #104	; 0x68
   1aae4:	mov	r5, r0
   1aae8:	bl	1db08 <flatcc_builder_reset@@Base>
   1aaec:	mov	r0, r5
   1aaf0:	bl	1ad38 <test_typed_struct_buffer@@Base+0x260>
   1aaf4:	mov	r0, r5
   1aaf8:	bl	20790 <flatcc_builder_get_buffer_size@@Base>
   1aafc:	cmp	r0, #48	; 0x30
   1ab00:	bne	1acf0 <test_typed_struct_buffer@@Base+0x218>
   1ab04:	mov	r4, r0
   1ab08:	movw	r0, #12231	; 0x2fc7
   1ab0c:	movt	r0, #2
   1ab10:	mov	r1, r4
   1ab14:	bl	12e98 <printf@plt>
   1ab18:	mov	r0, r5
   1ab1c:	bl	20a34 <flatcc_builder_get_emit_context@@Base>
   1ab20:	bl	1aa8c <test_struct_buffer@@Base+0x234>
   1ab24:	cmp	r0, r4
   1ab28:	bne	1ad10 <test_typed_struct_buffer@@Base+0x238>
   1ab2c:	add	r1, sp, #4
   1ab30:	mov	r0, r5
   1ab34:	mov	r2, #100	; 0x64
   1ab38:	bl	20874 <flatcc_builder_copy_buffer@@Base>
   1ab3c:	cmp	r0, #0
   1ab40:	beq	1aba4 <test_typed_struct_buffer@@Base+0xcc>
   1ab44:	movw	r0, #36976	; 0x9070
   1ab48:	movt	r0, #3
   1ab4c:	ldr	r3, [r0]
   1ab50:	movw	r0, #12389	; 0x3065
   1ab54:	movt	r0, #2
   1ab58:	add	r5, sp, #4
   1ab5c:	mov	r1, r5
   1ab60:	mov	r2, r4
   1ab64:	bl	1364c <test_type_aliases@@Base+0x254>
   1ab68:	movw	r1, #12414	; 0x307e
   1ab6c:	movt	r1, #2
   1ab70:	mov	r0, r5
   1ab74:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   1ab78:	cmp	r0, #0
   1ab7c:	beq	1abb0 <test_typed_struct_buffer@@Base+0xd8>
   1ab80:	add	r0, sp, #4
   1ab84:	movw	r1, #12335	; 0x302f
   1ab88:	movt	r1, #2
   1ab8c:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   1ab90:	cmp	r0, #0
   1ab94:	beq	1abc8 <test_typed_struct_buffer@@Base+0xf0>
   1ab98:	movw	r0, #28848	; 0x70b0
   1ab9c:	movt	r0, #2
   1aba0:	b	1abb8 <test_typed_struct_buffer@@Base+0xe0>
   1aba4:	movw	r0, #20827	; 0x515b
   1aba8:	movt	r0, #2
   1abac:	b	1abb8 <test_typed_struct_buffer@@Base+0xe0>
   1abb0:	movw	r0, #28720	; 0x7030
   1abb4:	movt	r0, #2
   1abb8:	bl	12eec <puts@plt>
   1abbc:	mvn	r0, #0
   1abc0:	sub	sp, fp, #8
   1abc4:	pop	{r4, r5, fp, pc}
   1abc8:	add	r0, sp, #4
   1abcc:	movw	r1, #12414	; 0x307e
   1abd0:	movt	r1, #2
   1abd4:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   1abd8:	cmp	r0, #0
   1abdc:	beq	1ac10 <test_typed_struct_buffer@@Base+0x138>
   1abe0:	add	r0, sp, #4
   1abe4:	bl	1ad7c <test_typed_struct_buffer@@Base+0x2a4>
   1abe8:	cmp	r0, #0
   1abec:	beq	1ac1c <test_typed_struct_buffer@@Base+0x144>
   1abf0:	add	r0, sp, #4
   1abf4:	mov	r1, r4
   1abf8:	bl	1adbc <test_typed_struct_buffer@@Base+0x2e4>
   1abfc:	cmp	r0, #0
   1ac00:	beq	1ac28 <test_typed_struct_buffer@@Base+0x150>
   1ac04:	movw	r0, #29024	; 0x7160
   1ac08:	movt	r0, #2
   1ac0c:	b	1abb8 <test_typed_struct_buffer@@Base+0xe0>
   1ac10:	movw	r0, #28768	; 0x7060
   1ac14:	movt	r0, #2
   1ac18:	b	1abb8 <test_typed_struct_buffer@@Base+0xe0>
   1ac1c:	movw	r0, #28896	; 0x70e0
   1ac20:	movt	r0, #2
   1ac24:	b	1abb8 <test_typed_struct_buffer@@Base+0xe0>
   1ac28:	add	r0, sp, #4
   1ac2c:	bl	1ade8 <test_typed_struct_buffer@@Base+0x310>
   1ac30:	cmp	r0, #0
   1ac34:	beq	1ac5c <test_typed_struct_buffer@@Base+0x184>
   1ac38:	mov	r5, r0
   1ac3c:	add	r0, sp, #4
   1ac40:	mov	r1, r4
   1ac44:	bl	1ae28 <test_typed_struct_buffer@@Base+0x350>
   1ac48:	cmp	r0, #0
   1ac4c:	beq	1ac68 <test_typed_struct_buffer@@Base+0x190>
   1ac50:	movw	r0, #28976	; 0x7130
   1ac54:	movt	r0, #2
   1ac58:	b	1abb8 <test_typed_struct_buffer@@Base+0xe0>
   1ac5c:	movw	r0, #28944	; 0x7110
   1ac60:	movt	r0, #2
   1ac64:	b	1abb8 <test_typed_struct_buffer@@Base+0xe0>
   1ac68:	vldr	s0, [r5]
   1ac6c:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1ac70:	vcmp.f32	s0, s2
   1ac74:	vmrs	APSR_nzcv, fpscr
   1ac78:	bne	1ace4 <test_typed_struct_buffer@@Base+0x20c>
   1ac7c:	vldr	s0, [r5, #4]
   1ac80:	vmov.f32	s2, #0	; 0x40000000  2.0
   1ac84:	vcmp.f32	s0, s2
   1ac88:	vmrs	APSR_nzcv, fpscr
   1ac8c:	bne	1ace4 <test_typed_struct_buffer@@Base+0x20c>
   1ac90:	vldr	s0, [r5, #8]
   1ac94:	vmov.f32	s2, #8	; 0x40400000  3.0
   1ac98:	vcmp.f32	s0, s2
   1ac9c:	vmrs	APSR_nzcv, fpscr
   1aca0:	bne	1ace4 <test_typed_struct_buffer@@Base+0x20c>
   1aca4:	vldr	d16, [pc, #132]	; 1ad30 <test_typed_struct_buffer@@Base+0x258>
   1aca8:	vldr	d17, [r5, #16]
   1acac:	vcmp.f64	d17, d16
   1acb0:	vmrs	APSR_nzcv, fpscr
   1acb4:	bne	1ace4 <test_typed_struct_buffer@@Base+0x20c>
   1acb8:	ldrb	r0, [r5, #24]
   1acbc:	cmp	r0, #8
   1acc0:	bne	1ace4 <test_typed_struct_buffer@@Base+0x20c>
   1acc4:	ldrh	r0, [r5, #26]
   1acc8:	movw	r1, #2730	; 0xaaa
   1accc:	cmp	r0, r1
   1acd0:	bne	1ace4 <test_typed_struct_buffer@@Base+0x20c>
   1acd4:	ldrb	r1, [r5, #28]
   1acd8:	mov	r0, #0
   1acdc:	cmp	r1, #239	; 0xef
   1ace0:	beq	1abc0 <test_typed_struct_buffer@@Base+0xe8>
   1ace4:	movw	r0, #28816	; 0x7090
   1ace8:	movt	r0, #2
   1acec:	b	1abb8 <test_typed_struct_buffer@@Base+0xe0>
   1acf0:	movw	r0, #12177	; 0x2f91
   1acf4:	movt	r0, #2
   1acf8:	movw	r1, #9622	; 0x2596
   1acfc:	movt	r1, #2
   1ad00:	movw	r3, #12340	; 0x3034
   1ad04:	movt	r3, #2
   1ad08:	movw	r2, #2388	; 0x954
   1ad0c:	bl	12f88 <__assert_fail@plt>
   1ad10:	movw	r0, #12260	; 0x2fe4
   1ad14:	movt	r0, #2
   1ad18:	movw	r1, #9622	; 0x2596
   1ad1c:	movt	r1, #2
   1ad20:	movw	r3, #12340	; 0x3034
   1ad24:	movt	r3, #2
   1ad28:	movw	r2, #2390	; 0x956
   1ad2c:	bl	12f88 <__assert_fail@plt>
   1ad30:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1ad34:	andsmi	ip, r0, ip, asr #25
   1ad38:	push	{r4, sl, fp, lr}
   1ad3c:	add	fp, sp, #8
   1ad40:	sub	sp, sp, #8
   1ad44:	mov	r4, r0
   1ad48:	bl	1d730 <main@@Base+0x23f4>
   1ad4c:	mov	r3, r0
   1ad50:	mov	r0, #0
   1ad54:	mov	r1, #16
   1ad58:	str	r1, [sp]
   1ad5c:	str	r0, [sp, #4]
   1ad60:	movw	r1, #12414	; 0x307e
   1ad64:	movt	r1, #2
   1ad68:	mov	r0, r4
   1ad6c:	mov	r2, #0
   1ad70:	bl	1e000 <flatcc_builder_create_buffer@@Base>
   1ad74:	sub	sp, fp, #8
   1ad78:	pop	{r4, sl, fp, pc}
   1ad7c:	push	{r4, r5, fp, lr}
   1ad80:	add	fp, sp, #8
   1ad84:	mov	r5, #0
   1ad88:	cmp	r0, #0
   1ad8c:	beq	1adb4 <test_typed_struct_buffer@@Base+0x2dc>
   1ad90:	mov	r4, r0
   1ad94:	movw	r1, #16082	; 0x3ed2
   1ad98:	movt	r1, #43253	; 0xa8f5
   1ad9c:	bl	14008 <test_typed_empty_monster@@Base+0x230>
   1ada0:	cmp	r0, #0
   1ada4:	beq	1adb4 <test_typed_struct_buffer@@Base+0x2dc>
   1ada8:	mov	r0, r4
   1adac:	bl	1b5cc <main@@Base+0x290>
   1adb0:	add	r5, r4, r0
   1adb4:	mov	r0, r5
   1adb8:	pop	{r4, r5, fp, pc}
   1adbc:	push	{fp, lr}
   1adc0:	mov	fp, sp
   1adc4:	sub	sp, sp, #8
   1adc8:	mov	r2, #16
   1adcc:	str	r2, [sp]
   1add0:	movw	r2, #16082	; 0x3ed2
   1add4:	movt	r2, #43253	; 0xa8f5
   1add8:	mov	r3, #32
   1addc:	bl	21af8 <flatcc_verify_struct_as_typed_root@@Base>
   1ade0:	mov	sp, fp
   1ade4:	pop	{fp, pc}
   1ade8:	push	{r4, r5, fp, lr}
   1adec:	add	fp, sp, #8
   1adf0:	mov	r5, #0
   1adf4:	cmp	r0, #0
   1adf8:	beq	1ae20 <test_typed_struct_buffer@@Base+0x348>
   1adfc:	mov	r4, r0
   1ae00:	movw	r1, #16082	; 0x3ed2
   1ae04:	movt	r1, #43253	; 0xa8f5
   1ae08:	bl	14008 <test_typed_empty_monster@@Base+0x230>
   1ae0c:	cmp	r0, #0
   1ae10:	beq	1ae20 <test_typed_struct_buffer@@Base+0x348>
   1ae14:	mov	r0, r4
   1ae18:	bl	1b5cc <main@@Base+0x290>
   1ae1c:	add	r5, r4, r0
   1ae20:	mov	r0, r5
   1ae24:	pop	{r4, r5, fp, pc}
   1ae28:	push	{fp, lr}
   1ae2c:	mov	fp, sp
   1ae30:	sub	sp, sp, #8
   1ae34:	mov	r2, #16
   1ae38:	str	r2, [sp]
   1ae3c:	movw	r2, #16082	; 0x3ed2
   1ae40:	movt	r2, #43253	; 0xa8f5
   1ae44:	mov	r3, #32
   1ae48:	bl	21af8 <flatcc_verify_struct_as_typed_root@@Base>
   1ae4c:	mov	sp, fp
   1ae50:	pop	{fp, pc}

0001ae54 <gen_monster_benchmark@@Base>:
   1ae54:	push	{r4, r5, fp, lr}
   1ae58:	add	fp, sp, #8
   1ae5c:	sub	sp, sp, #24
   1ae60:	mov	r4, r0
   1ae64:	movw	r0, #21024	; 0x5220
   1ae68:	movt	r0, #2
   1ae6c:	vldr	d16, [r0]
   1ae70:	movw	r0, #2312	; 0x908
   1ae74:	strh	r0, [sp, #16]
   1ae78:	vstr	d16, [sp, #8]
   1ae7c:	mov	r0, r4
   1ae80:	bl	1db08 <flatcc_builder_reset@@Base>
   1ae84:	mov	r0, r4
   1ae88:	bl	15fd0 <gen_monster@@Base+0x4cc>
   1ae8c:	mov	r5, #80	; 0x50
   1ae90:	mov	r0, r4
   1ae94:	mov	r1, #80	; 0x50
   1ae98:	bl	15ffc <gen_monster@@Base+0x4f8>
   1ae9c:	mov	r0, r4
   1aea0:	bl	16038 <gen_monster@@Base+0x534>
   1aea4:	mov	r1, #1065353216	; 0x3f800000
   1aea8:	mov	r2, #1073741824	; 0x40000000
   1aeac:	movw	r3, #52429	; 0xcccd
   1aeb0:	movt	r3, #49228	; 0xc04c
   1aeb4:	stm	r0, {r1, r2, r3}
   1aeb8:	movw	r1, #9185	; 0x23e1
   1aebc:	movt	r1, #2
   1aec0:	mov	r0, r4
   1aec4:	bl	13d44 <test_empty_monster@@Base+0x11c>
   1aec8:	add	r1, sp, #8
   1aecc:	mov	r0, r4
   1aed0:	mov	r2, #10
   1aed4:	bl	16084 <gen_monster@@Base+0x580>
   1aed8:	mov	r0, r4
   1aedc:	bl	160a4 <gen_monster@@Base+0x5a0>
   1aee0:	mov	r0, r4
   1aee4:	mov	r1, #1
   1aee8:	bl	160a8 <gen_monster@@Base+0x5a4>
   1aeec:	mov	r1, #16
   1aef0:	strh	r1, [r0]
   1aef4:	mov	r1, #32
   1aef8:	strb	r1, [r0, #2]
   1aefc:	mov	r0, r4
   1af00:	mov	r1, #2
   1af04:	bl	160a8 <gen_monster@@Base+0x5a4>
   1af08:	mov	r1, #48	; 0x30
   1af0c:	strh	r1, [r0]
   1af10:	mov	r1, #64	; 0x40
   1af14:	strb	r1, [r0, #2]
   1af18:	strh	r5, [r0, #4]
   1af1c:	mov	r1, #96	; 0x60
   1af20:	strb	r1, [r0, #6]
   1af24:	mov	r0, r4
   1af28:	bl	160ac <gen_monster@@Base+0x5a8>
   1af2c:	mov	r0, #145	; 0x91
   1af30:	strb	r0, [sp, #6]
   1af34:	movw	r0, #401	; 0x191
   1af38:	strh	r0, [sp, #4]
   1af3c:	add	r1, sp, #4
   1af40:	mov	r0, r4
   1af44:	bl	160cc <gen_monster@@Base+0x5c8>
   1af48:	mov	r0, r4
   1af4c:	bl	16124 <gen_monster@@Base+0x620>
   1af50:	mov	r0, r4
   1af54:	bl	163d0 <gen_monster@@Base+0x8cc>
   1af58:	mov	r0, #0
   1af5c:	sub	sp, fp, #8
   1af60:	pop	{r4, r5, fp, pc}

0001af64 <time_monster@@Base>:
   1af64:	push	{r4, r5, fp, lr}
   1af68:	add	fp, sp, #8
   1af6c:	vpush	{d8}
   1af70:	mov	r4, r0
   1af74:	movw	r0, #29072	; 0x7190
   1af78:	movt	r0, #2
   1af7c:	bl	12eec <puts@plt>
   1af80:	movw	r5, #16960	; 0x4240
   1af84:	movt	r5, #15
   1af88:	bl	1afd8 <time_monster@@Base+0x74>
   1af8c:	vmov.f64	d8, d0
   1af90:	mov	r0, r4
   1af94:	bl	1ae54 <gen_monster_benchmark@@Base>
   1af98:	subs	r5, r5, #1
   1af9c:	bne	1af90 <time_monster@@Base+0x2c>
   1afa0:	mov	r0, r4
   1afa4:	bl	20790 <flatcc_builder_get_buffer_size@@Base>
   1afa8:	mov	r4, r0
   1afac:	bl	1afd8 <time_monster@@Base+0x74>
   1afb0:	vmov.f64	d1, d0
   1afb4:	movw	r0, #12419	; 0x3083
   1afb8:	movt	r0, #2
   1afbc:	vmov.f64	d0, d8
   1afc0:	mov	r1, r4
   1afc4:	bl	1b048 <time_monster@@Base+0xe4>
   1afc8:	mov	r0, #0
   1afcc:	vpop	{d8}
   1afd0:	pop	{r4, r5, fp, pc}
   1afd4:	nop	{0}
   1afd8:	push	{fp, lr}
   1afdc:	mov	fp, sp
   1afe0:	sub	sp, sp, #8
   1afe4:	mov	r0, sp
   1afe8:	mov	r1, #0
   1afec:	bl	12ee0 <gettimeofday@plt>
   1aff0:	movw	r0, #36984	; 0x9078
   1aff4:	movt	r0, #3
   1aff8:	ldr	r1, [r0]
   1affc:	cmp	r1, #0
   1b000:	ldmeq	sp, {r2, r3}
   1b004:	strdeq	r2, [r0]
   1b008:	ldrd	r0, [r0]
   1b00c:	ldm	sp, {r2, r3}
   1b010:	vldr	d16, [pc, #40]	; 1b040 <time_monster@@Base+0xdc>
   1b014:	sub	r0, r2, r0
   1b018:	sub	r1, r3, r1
   1b01c:	vmov	s0, r1
   1b020:	vcvt.f64.s32	d17, s0
   1b024:	vmov	s0, r0
   1b028:	vcvt.f64.s32	d18, s0
   1b02c:	vdiv.f64	d16, d17, d16
   1b030:	vadd.f64	d0, d16, d18
   1b034:	mov	sp, fp
   1b038:	pop	{fp, pc}
   1b03c:	nop	{0}
   1b040:	andeq	r0, r0, r0
   1b044:	smlawbmi	lr, r0, r4, r8
   1b048:	push	{r4, sl, fp, lr}
   1b04c:	add	fp, sp, #8
   1b050:	vpush	{d8-d9}
   1b054:	mov	r4, r1
   1b058:	vmov.f64	d8, d1
   1b05c:	vmov.f64	d9, d0
   1b060:	mov	r1, r0
   1b064:	movw	r0, #20517	; 0x5025
   1b068:	movt	r0, #2
   1b06c:	bl	12e98 <printf@plt>
   1b070:	vsub.f64	d9, d8, d9
   1b074:	vmov	r2, r3, d9
   1b078:	movw	r0, #20532	; 0x5034
   1b07c:	movt	r0, #2
   1b080:	bl	12e98 <printf@plt>
   1b084:	movw	r0, #20556	; 0x504c
   1b088:	movt	r0, #2
   1b08c:	movw	r1, #16960	; 0x4240
   1b090:	movt	r1, #15
   1b094:	bl	12e98 <printf@plt>
   1b098:	movw	r0, #20572	; 0x505c
   1b09c:	movt	r0, #2
   1b0a0:	mov	r1, r4
   1b0a4:	bl	12e98 <printf@plt>
   1b0a8:	vldr	d8, [pc, #224]	; 1b190 <time_monster@@Base+0x22c>
   1b0ac:	vmov	s0, r4
   1b0b0:	vcvt.f64.u32	d16, s0
   1b0b4:	vmul.f64	d16, d16, d8
   1b0b8:	vdiv.f64	d16, d16, d8
   1b0bc:	vdiv.f64	d16, d16, d9
   1b0c0:	vmov	r2, r3, d16
   1b0c4:	movw	r0, #20591	; 0x506f
   1b0c8:	movt	r0, #2
   1b0cc:	bl	12e98 <printf@plt>
   1b0d0:	vdiv.f64	d16, d8, d9
   1b0d4:	vmov	r2, r3, d16
   1b0d8:	movw	r0, #20615	; 0x5087
   1b0dc:	movt	r0, #2
   1b0e0:	bl	12e98 <printf@plt>
   1b0e4:	vmov.f64	d16, #112	; 0x3f800000  1.0
   1b0e8:	vdiv.f64	d16, d16, d9
   1b0ec:	vmov	r2, r3, d16
   1b0f0:	movw	r0, #20648	; 0x50a8
   1b0f4:	movt	r0, #2
   1b0f8:	movw	r1, #12441	; 0x3099
   1b0fc:	movt	r1, #2
   1b100:	bl	12e98 <printf@plt>
   1b104:	vldr	d17, [pc, #140]	; 1b198 <time_monster@@Base+0x234>
   1b108:	vmul.f64	d16, d9, d17
   1b10c:	vldr	d18, [pc, #140]	; 1b1a0 <time_monster@@Base+0x23c>
   1b110:	vdiv.f64	d16, d16, d8
   1b114:	vcmpe.f64	d16, d18
   1b118:	vmrs	APSR_nzcv, fpscr
   1b11c:	bpl	1b130 <time_monster@@Base+0x1cc>
   1b120:	vmov	r2, r3, d16
   1b124:	movw	r0, #20684	; 0x50cc
   1b128:	movt	r0, #2
   1b12c:	b	1b180 <time_monster@@Base+0x21c>
   1b130:	vcmpe.f64	d16, d8
   1b134:	vmrs	APSR_nzcv, fpscr
   1b138:	bpl	1b150 <time_monster@@Base+0x1ec>
   1b13c:	vdiv.f64	d16, d16, d18
   1b140:	vmov	r2, r3, d16
   1b144:	movw	r0, #20708	; 0x50e4
   1b148:	movt	r0, #2
   1b14c:	b	1b180 <time_monster@@Base+0x21c>
   1b150:	vcmpe.f64	d16, d17
   1b154:	vmrs	APSR_nzcv, fpscr
   1b158:	bpl	1b170 <time_monster@@Base+0x20c>
   1b15c:	vdiv.f64	d16, d16, d8
   1b160:	vmov	r2, r3, d16
   1b164:	movw	r0, #20732	; 0x50fc
   1b168:	movt	r0, #2
   1b16c:	b	1b180 <time_monster@@Base+0x21c>
   1b170:	vdiv.f64	d16, d16, d17
   1b174:	vmov	r2, r3, d16
   1b178:	movw	r0, #20756	; 0x5114
   1b17c:	movt	r0, #2
   1b180:	vpop	{d8-d9}
   1b184:	pop	{r4, sl, fp, lr}
   1b188:	b	12e98 <printf@plt>
   1b18c:	nop	{0}
   1b190:	andeq	r0, r0, r0
   1b194:	smlawbmi	lr, r0, r4, r8
   1b198:	andeq	r0, r0, r0
   1b19c:	bicmi	ip, sp, r5, ror #26
   1b1a0:	andeq	r0, r0, r0
   1b1a4:	addmi	r4, pc, r0

0001b1a8 <gen_struct_buffer_benchmark@@Base>:
   1b1a8:	push	{r4, sl, fp, lr}
   1b1ac:	add	fp, sp, #8
   1b1b0:	mov	r4, r0
   1b1b4:	bl	1db08 <flatcc_builder_reset@@Base>
   1b1b8:	mov	r0, r4
   1b1bc:	bl	1aa48 <test_struct_buffer@@Base+0x1f0>
   1b1c0:	mov	r0, r4
   1b1c4:	mov	r1, #0
   1b1c8:	bl	2081c <flatcc_builder_get_direct_buffer@@Base>
   1b1cc:	cmp	r0, #0
   1b1d0:	beq	1b254 <gen_struct_buffer_benchmark@@Base+0xac>
   1b1d4:	bl	1b268 <gen_struct_buffer_benchmark@@Base+0xc0>
   1b1d8:	vldr	s0, [r0]
   1b1dc:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1b1e0:	vcmp.f32	s0, s2
   1b1e4:	vmrs	APSR_nzcv, fpscr
   1b1e8:	bne	1b254 <gen_struct_buffer_benchmark@@Base+0xac>
   1b1ec:	vldr	s0, [r0, #4]
   1b1f0:	vmov.f32	s2, #0	; 0x40000000  2.0
   1b1f4:	vcmp.f32	s0, s2
   1b1f8:	vmrs	APSR_nzcv, fpscr
   1b1fc:	bne	1b254 <gen_struct_buffer_benchmark@@Base+0xac>
   1b200:	vldr	s0, [r0, #8]
   1b204:	vmov.f32	s2, #8	; 0x40400000  3.0
   1b208:	vcmp.f32	s0, s2
   1b20c:	vmrs	APSR_nzcv, fpscr
   1b210:	bne	1b254 <gen_struct_buffer_benchmark@@Base+0xac>
   1b214:	vldr	d16, [pc, #68]	; 1b260 <gen_struct_buffer_benchmark@@Base+0xb8>
   1b218:	vldr	d17, [r0, #16]
   1b21c:	vcmp.f64	d17, d16
   1b220:	vmrs	APSR_nzcv, fpscr
   1b224:	bne	1b254 <gen_struct_buffer_benchmark@@Base+0xac>
   1b228:	ldrb	r1, [r0, #24]
   1b22c:	cmp	r1, #8
   1b230:	bne	1b254 <gen_struct_buffer_benchmark@@Base+0xac>
   1b234:	ldrh	r1, [r0, #26]
   1b238:	movw	r2, #2730	; 0xaaa
   1b23c:	cmp	r1, r2
   1b240:	bne	1b254 <gen_struct_buffer_benchmark@@Base+0xac>
   1b244:	ldrb	r0, [r0, #28]
   1b248:	subs	r0, r0, #239	; 0xef
   1b24c:	mvnne	r0, #0
   1b250:	pop	{r4, sl, fp, pc}
   1b254:	mvn	r0, #0
   1b258:	pop	{r4, sl, fp, pc}
   1b25c:	nop	{0}
   1b260:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1b264:	andsmi	ip, r0, ip, asr #25
   1b268:	push	{r4, r5, fp, lr}
   1b26c:	add	fp, sp, #8
   1b270:	cmp	r0, #0
   1b274:	moveq	r5, #0
   1b278:	moveq	r0, r5
   1b27c:	popeq	{r4, r5, fp, pc}
   1b280:	mov	r4, r0
   1b284:	mov	r5, #0
   1b288:	mov	r1, #0
   1b28c:	bl	14480 <test_typed_table_with_emptystruct@@Base+0x284>
   1b290:	cmp	r0, #0
   1b294:	beq	1b2a4 <gen_struct_buffer_benchmark@@Base+0xfc>
   1b298:	mov	r0, r4
   1b29c:	bl	1b5cc <main@@Base+0x290>
   1b2a0:	add	r5, r4, r0
   1b2a4:	mov	r0, r5
   1b2a8:	pop	{r4, r5, fp, pc}

0001b2ac <time_struct_buffer@@Base>:
   1b2ac:	push	{r4, r5, r6, sl, fp, lr}
   1b2b0:	add	fp, sp, #16
   1b2b4:	vpush	{d8-d9}
   1b2b8:	mov	r5, r0
   1b2bc:	movw	r0, #29072	; 0x7190
   1b2c0:	movt	r0, #2
   1b2c4:	bl	12eec <puts@plt>
   1b2c8:	mov	r4, #0
   1b2cc:	movw	r6, #16960	; 0x4240
   1b2d0:	movt	r6, #15
   1b2d4:	bl	1afd8 <time_monster@@Base+0x74>
   1b2d8:	vmov.f64	d8, d0
   1b2dc:	mov	r0, r5
   1b2e0:	bl	1b1a8 <gen_struct_buffer_benchmark@@Base>
   1b2e4:	orr	r4, r0, r4
   1b2e8:	subs	r6, r6, #1
   1b2ec:	bne	1b2dc <time_struct_buffer@@Base+0x30>
   1b2f0:	bl	1afd8 <time_monster@@Base+0x74>
   1b2f4:	vmov.f64	d9, d0
   1b2f8:	mov	r0, r5
   1b2fc:	bl	20790 <flatcc_builder_get_buffer_size@@Base>
   1b300:	mov	r5, r0
   1b304:	cmp	r4, #0
   1b308:	beq	1b318 <time_struct_buffer@@Base+0x6c>
   1b30c:	movw	r0, #29104	; 0x71b0
   1b310:	movt	r0, #2
   1b314:	bl	12eec <puts@plt>
   1b318:	movw	r0, #12449	; 0x30a1
   1b31c:	movt	r0, #2
   1b320:	vmov.f64	d0, d8
   1b324:	vmov.f64	d1, d9
   1b328:	mov	r1, r5
   1b32c:	bl	1b048 <time_monster@@Base+0xe4>
   1b330:	mov	r0, r4
   1b334:	vpop	{d8-d9}
   1b338:	pop	{r4, r5, r6, sl, fp, pc}

0001b33c <main@@Base>:
   1b33c:	push	{r4, sl, fp, lr}
   1b340:	add	fp, sp, #8
   1b344:	sub	sp, sp, #232	; 0xe8
   1b348:	mov	r4, sp
   1b34c:	mov	r0, r4
   1b350:	bl	1d99c <flatcc_builder_init@@Base>
   1b354:	movw	r0, #29136	; 0x71d0
   1b358:	movt	r0, #2
   1b35c:	bl	12eec <puts@plt>
   1b360:	mov	r0, r4
   1b364:	bl	14158 <test_table_with_emptystruct@@Base>
   1b368:	cmp	r0, #0
   1b36c:	beq	1b37c <main@@Base+0x40>
   1b370:	movw	r0, #20839	; 0x5167
   1b374:	movt	r0, #2
   1b378:	b	1b5a8 <main@@Base+0x26c>
   1b37c:	mov	r0, sp
   1b380:	bl	13c28 <test_empty_monster@@Base>
   1b384:	cmp	r0, #0
   1b388:	beq	1b398 <main@@Base+0x5c>
   1b38c:	movw	r0, #20839	; 0x5167
   1b390:	movt	r0, #2
   1b394:	b	1b5a8 <main@@Base+0x26c>
   1b398:	mov	r0, sp
   1b39c:	bl	163f0 <test_monster@@Base>
   1b3a0:	cmp	r0, #0
   1b3a4:	beq	1b3b4 <main@@Base+0x78>
   1b3a8:	movw	r0, #20839	; 0x5167
   1b3ac:	movt	r0, #2
   1b3b0:	b	1b5a8 <main@@Base+0x26c>
   1b3b4:	mov	r0, sp
   1b3b8:	bl	16488 <test_monster_with_size@@Base>
   1b3bc:	cmp	r0, #0
   1b3c0:	beq	1b3d0 <main@@Base+0x94>
   1b3c4:	movw	r0, #20839	; 0x5167
   1b3c8:	movt	r0, #2
   1b3cc:	b	1b5a8 <main@@Base+0x26c>
   1b3d0:	mov	r0, sp
   1b3d4:	bl	165a4 <test_string@@Base>
   1b3d8:	cmp	r0, #0
   1b3dc:	beq	1b3ec <main@@Base+0xb0>
   1b3e0:	movw	r0, #20839	; 0x5167
   1b3e4:	movt	r0, #2
   1b3e8:	b	1b5a8 <main@@Base+0x26c>
   1b3ec:	mov	r0, sp
   1b3f0:	bl	1a858 <test_struct_buffer@@Base>
   1b3f4:	cmp	r0, #0
   1b3f8:	beq	1b408 <main@@Base+0xcc>
   1b3fc:	movw	r0, #20839	; 0x5167
   1b400:	movt	r0, #2
   1b404:	b	1b5a8 <main@@Base+0x26c>
   1b408:	mov	r0, sp
   1b40c:	bl	13dd8 <test_typed_empty_monster@@Base>
   1b410:	cmp	r0, #0
   1b414:	beq	1b424 <main@@Base+0xe8>
   1b418:	movw	r0, #20839	; 0x5167
   1b41c:	movt	r0, #2
   1b420:	b	1b5a8 <main@@Base+0x26c>
   1b424:	mov	r0, sp
   1b428:	bl	141fc <test_typed_table_with_emptystruct@@Base>
   1b42c:	cmp	r0, #0
   1b430:	beq	1b440 <main@@Base+0x104>
   1b434:	movw	r0, #20839	; 0x5167
   1b438:	movt	r0, #2
   1b43c:	b	1b5a8 <main@@Base+0x26c>
   1b440:	mov	r0, sp
   1b444:	bl	1aad8 <test_typed_struct_buffer@@Base>
   1b448:	cmp	r0, #0
   1b44c:	beq	1b45c <main@@Base+0x120>
   1b450:	movw	r0, #20839	; 0x5167
   1b454:	movt	r0, #2
   1b458:	b	1b5a8 <main@@Base+0x26c>
   1b45c:	mov	r0, sp
   1b460:	bl	18138 <test_clone_slice@@Base>
   1b464:	cmp	r0, #0
   1b468:	beq	1b478 <main@@Base+0x13c>
   1b46c:	movw	r0, #20839	; 0x5167
   1b470:	movt	r0, #2
   1b474:	b	1b5a8 <main@@Base+0x26c>
   1b478:	mov	r0, sp
   1b47c:	bl	1a0dc <test_add_set_defaults@@Base>
   1b480:	cmp	r0, #0
   1b484:	beq	1b494 <main@@Base+0x158>
   1b488:	movw	r0, #20839	; 0x5167
   1b48c:	movt	r0, #2
   1b490:	b	1b5a8 <main@@Base+0x26c>
   1b494:	mov	r0, sp
   1b498:	bl	187e8 <test_create_add_field@@Base>
   1b49c:	cmp	r0, #0
   1b4a0:	beq	1b4b0 <main@@Base+0x174>
   1b4a4:	movw	r0, #20839	; 0x5167
   1b4a8:	movt	r0, #2
   1b4ac:	b	1b5a8 <main@@Base+0x26c>
   1b4b0:	mov	r0, sp
   1b4b4:	bl	189e0 <test_union_vector@@Base>
   1b4b8:	cmp	r0, #0
   1b4bc:	beq	1b4cc <main@@Base+0x190>
   1b4c0:	movw	r0, #20839	; 0x5167
   1b4c4:	movt	r0, #2
   1b4c8:	b	1b5a8 <main@@Base+0x26c>
   1b4cc:	mov	r0, sp
   1b4d0:	bl	17f5c <test_basic_sort@@Base>
   1b4d4:	cmp	r0, #0
   1b4d8:	beq	1b4e8 <main@@Base+0x1ac>
   1b4dc:	movw	r0, #20839	; 0x5167
   1b4e0:	movt	r0, #2
   1b4e4:	b	1b5a8 <main@@Base+0x26c>
   1b4e8:	mov	r0, sp
   1b4ec:	bl	167b0 <test_sort_find@@Base>
   1b4f0:	cmp	r0, #0
   1b4f4:	beq	1b504 <main@@Base+0x1c8>
   1b4f8:	movw	r0, #20839	; 0x5167
   1b4fc:	movt	r0, #2
   1b500:	b	1b5a8 <main@@Base+0x26c>
   1b504:	mov	r0, sp
   1b508:	bl	16cfc <test_scan@@Base>
   1b50c:	cmp	r0, #0
   1b510:	beq	1b520 <main@@Base+0x1e4>
   1b514:	movw	r0, #20839	; 0x5167
   1b518:	movt	r0, #2
   1b51c:	b	1b5a8 <main@@Base+0x26c>
   1b520:	mov	r0, sp
   1b524:	bl	1a378 <test_nested_buffer@@Base>
   1b528:	cmp	r0, #0
   1b52c:	beq	1b53c <main@@Base+0x200>
   1b530:	movw	r0, #20839	; 0x5167
   1b534:	movt	r0, #2
   1b538:	b	1b5a8 <main@@Base+0x26c>
   1b53c:	mov	r0, sp
   1b540:	bl	1a540 <test_nested_buffer_first@@Base>
   1b544:	cmp	r0, #0
   1b548:	beq	1b558 <main@@Base+0x21c>
   1b54c:	movw	r0, #20839	; 0x5167
   1b550:	movt	r0, #2
   1b554:	b	1b5a8 <main@@Base+0x26c>
   1b558:	mov	r0, sp
   1b55c:	bl	1a66c <test_nested_buffer_using_nest@@Base>
   1b560:	cmp	r0, #0
   1b564:	beq	1b574 <main@@Base+0x238>
   1b568:	movw	r0, #20839	; 0x5167
   1b56c:	movt	r0, #2
   1b570:	b	1b5a8 <main@@Base+0x26c>
   1b574:	mov	r0, sp
   1b578:	bl	133f8 <test_type_aliases@@Base>
   1b57c:	cmp	r0, #0
   1b580:	beq	1b590 <main@@Base+0x254>
   1b584:	movw	r0, #20839	; 0x5167
   1b588:	movt	r0, #2
   1b58c:	b	1b5a8 <main@@Base+0x26c>
   1b590:	mov	r0, sp
   1b594:	bl	1904c <test_mixed_type_union@@Base>
   1b598:	cmp	r0, #0
   1b59c:	beq	1b5b8 <main@@Base+0x27c>
   1b5a0:	movw	r0, #20839	; 0x5167
   1b5a4:	movt	r0, #2
   1b5a8:	bl	12eec <puts@plt>
   1b5ac:	mvn	r0, #0
   1b5b0:	sub	sp, fp, #8
   1b5b4:	pop	{r4, sl, fp, pc}
   1b5b8:	mov	r0, sp
   1b5bc:	bl	1db14 <flatcc_builder_clear@@Base>
   1b5c0:	mov	r0, #0
   1b5c4:	sub	sp, fp, #8
   1b5c8:	pop	{r4, sl, fp, pc}
   1b5cc:	ldr	r0, [r0]
   1b5d0:	b	1b5d4 <main@@Base+0x298>
   1b5d4:	bx	lr
   1b5d8:	ldr	r0, [r0]
   1b5dc:	b	1b5f0 <main@@Base+0x2b4>
   1b5e0:	ldrh	r0, [r0]
   1b5e4:	b	1b5f4 <main@@Base+0x2b8>
   1b5e8:	ldrsh	r0, [r0]
   1b5ec:	b	1b5f8 <main@@Base+0x2bc>
   1b5f0:	bx	lr
   1b5f4:	bx	lr
   1b5f8:	bx	lr
   1b5fc:	push	{r4, r5, r6, sl, fp, lr}
   1b600:	add	fp, sp, #16
   1b604:	mov	r5, r2
   1b608:	mov	r6, r1
   1b60c:	mov	r4, r0
   1b610:	bl	1b6f8 <main@@Base+0x3bc>
   1b614:	cmp	r0, #0
   1b618:	bne	1b6e4 <main@@Base+0x3a8>
   1b61c:	mov	r0, r4
   1b620:	bl	1b700 <main@@Base+0x3c4>
   1b624:	cmp	r0, #0
   1b628:	bne	1b6e4 <main@@Base+0x3a8>
   1b62c:	mov	r0, r4
   1b630:	bl	1b740 <main@@Base+0x404>
   1b634:	cmp	r0, #0
   1b638:	bne	1b6e4 <main@@Base+0x3a8>
   1b63c:	mov	r0, r4
   1b640:	bl	1b770 <main@@Base+0x434>
   1b644:	cmp	r0, #0
   1b648:	bne	1b6e4 <main@@Base+0x3a8>
   1b64c:	mov	r0, r4
   1b650:	bl	1b7b0 <main@@Base+0x474>
   1b654:	cmp	r0, #0
   1b658:	bne	1b6e4 <main@@Base+0x3a8>
   1b65c:	mov	r0, r4
   1b660:	bl	1b7e4 <main@@Base+0x4a8>
   1b664:	cmp	r0, #0
   1b668:	bne	1b6e4 <main@@Base+0x3a8>
   1b66c:	mov	r0, r4
   1b670:	bl	1b814 <main@@Base+0x4d8>
   1b674:	cmp	r0, #0
   1b678:	bne	1b6e4 <main@@Base+0x3a8>
   1b67c:	mov	r0, r4
   1b680:	mov	r1, r6
   1b684:	bl	1b84c <main@@Base+0x510>
   1b688:	cmp	r0, #0
   1b68c:	bne	1b6e4 <main@@Base+0x3a8>
   1b690:	mov	r0, r4
   1b694:	mov	r1, r5
   1b698:	bl	1b880 <main@@Base+0x544>
   1b69c:	cmp	r0, #0
   1b6a0:	bne	1b6e4 <main@@Base+0x3a8>
   1b6a4:	mov	r0, r4
   1b6a8:	bl	1b8b4 <main@@Base+0x578>
   1b6ac:	cmp	r0, #0
   1b6b0:	bne	1b6e4 <main@@Base+0x3a8>
   1b6b4:	mov	r0, r4
   1b6b8:	bl	1b8ec <main@@Base+0x5b0>
   1b6bc:	cmp	r0, #0
   1b6c0:	bne	1b6e4 <main@@Base+0x3a8>
   1b6c4:	mov	r0, r4
   1b6c8:	bl	1b920 <main@@Base+0x5e4>
   1b6cc:	cmp	r0, #0
   1b6d0:	bne	1b6e4 <main@@Base+0x3a8>
   1b6d4:	mov	r0, r4
   1b6d8:	bl	1b958 <main@@Base+0x61c>
   1b6dc:	cmp	r0, #0
   1b6e0:	beq	1b6ec <main@@Base+0x3b0>
   1b6e4:	mov	r0, #0
   1b6e8:	pop	{r4, r5, r6, sl, fp, pc}
   1b6ec:	mov	r0, r4
   1b6f0:	pop	{r4, r5, r6, sl, fp, lr}
   1b6f4:	b	1b988 <main@@Base+0x64c>
   1b6f8:	mov	r1, #12
   1b6fc:	b	1ef94 <flatcc_builder_start_table@@Base>
   1b700:	push	{r4, sl, fp, lr}
   1b704:	add	fp, sp, #8
   1b708:	mov	r1, #6
   1b70c:	mov	r2, #8
   1b710:	mov	r3, #8
   1b714:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1b718:	cmp	r0, #0
   1b71c:	mvneq	r4, #0
   1b720:	moveq	r0, r4
   1b724:	popeq	{r4, sl, fp, pc}
   1b728:	mov	r4, #0
   1b72c:	mov	r2, #0
   1b730:	mov	r3, #-2147483648	; 0x80000000
   1b734:	bl	1b9d8 <main@@Base+0x69c>
   1b738:	mov	r0, r4
   1b73c:	pop	{r4, sl, fp, pc}
   1b740:	push	{fp, lr}
   1b744:	mov	fp, sp
   1b748:	mov	r1, #7
   1b74c:	mov	r2, #8
   1b750:	mov	r3, #8
   1b754:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1b758:	cmp	r0, #0
   1b75c:	mvneq	r0, #0
   1b760:	popeq	{fp, pc}
   1b764:	bl	1ba04 <main@@Base+0x6c8>
   1b768:	mov	r0, #0
   1b76c:	pop	{fp, pc}
   1b770:	push	{fp, lr}
   1b774:	mov	fp, sp
   1b778:	mov	r1, #9
   1b77c:	mov	r2, #8
   1b780:	mov	r3, #8
   1b784:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1b788:	cmp	r0, #0
   1b78c:	mvneq	r0, #0
   1b790:	popeq	{fp, pc}
   1b794:	vldr	d0, [pc, #12]	; 1b7a8 <main@@Base+0x46c>
   1b798:	bl	1ba14 <main@@Base+0x6d8>
   1b79c:	mov	r0, #0
   1b7a0:	pop	{fp, pc}
   1b7a4:	nop	{0}
   1b7a8:	strbtvs	r6, [r6], -r6, ror #12
   1b7ac:	andmi	r6, r2, r6, ror #12
   1b7b0:	push	{fp, lr}
   1b7b4:	mov	fp, sp
   1b7b8:	mov	r1, #4
   1b7bc:	mov	r2, #4
   1b7c0:	mov	r3, #4
   1b7c4:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1b7c8:	cmp	r0, #0
   1b7cc:	mvneq	r0, #0
   1b7d0:	popeq	{fp, pc}
   1b7d4:	mov	r1, #-2147483648	; 0x80000000
   1b7d8:	bl	1ba30 <main@@Base+0x6f4>
   1b7dc:	mov	r0, #0
   1b7e0:	pop	{fp, pc}
   1b7e4:	push	{fp, lr}
   1b7e8:	mov	fp, sp
   1b7ec:	mov	r1, #5
   1b7f0:	mov	r2, #4
   1b7f4:	mov	r3, #4
   1b7f8:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1b7fc:	cmp	r0, #0
   1b800:	mvneq	r0, #0
   1b804:	popeq	{fp, pc}
   1b808:	bl	1ba54 <main@@Base+0x718>
   1b80c:	mov	r0, #0
   1b810:	pop	{fp, pc}
   1b814:	push	{fp, lr}
   1b818:	mov	fp, sp
   1b81c:	mov	r1, #8
   1b820:	mov	r2, #4
   1b824:	mov	r3, #4
   1b828:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1b82c:	cmp	r0, #0
   1b830:	mvneq	r0, #0
   1b834:	popeq	{fp, pc}
   1b838:	vldr	s0, [pc, #8]	; 1b848 <main@@Base+0x50c>
   1b83c:	bl	1ba60 <main@@Base+0x724>
   1b840:	mov	r0, #0
   1b844:	pop	{fp, pc}
   1b848:	andsmi	r3, r3, r3, lsr r3
   1b84c:	push	{r4, r5, fp, lr}
   1b850:	add	fp, sp, #8
   1b854:	mvn	r4, #0
   1b858:	cmp	r1, #0
   1b85c:	beq	1b878 <main@@Base+0x53c>
   1b860:	mov	r5, r1
   1b864:	mov	r1, #10
   1b868:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   1b86c:	cmp	r0, #0
   1b870:	strne	r5, [r0]
   1b874:	movne	r4, #0
   1b878:	mov	r0, r4
   1b87c:	pop	{r4, r5, fp, pc}
   1b880:	push	{r4, r5, fp, lr}
   1b884:	add	fp, sp, #8
   1b888:	mvn	r4, #0
   1b88c:	cmp	r1, #0
   1b890:	beq	1b8ac <main@@Base+0x570>
   1b894:	mov	r5, r1
   1b898:	mov	r1, #11
   1b89c:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   1b8a0:	cmp	r0, #0
   1b8a4:	strne	r5, [r0]
   1b8a8:	movne	r4, #0
   1b8ac:	mov	r0, r4
   1b8b0:	pop	{r4, r5, fp, pc}
   1b8b4:	push	{fp, lr}
   1b8b8:	mov	fp, sp
   1b8bc:	mov	r1, #2
   1b8c0:	mov	r2, #2
   1b8c4:	mov	r3, #2
   1b8c8:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1b8cc:	cmp	r0, #0
   1b8d0:	mvneq	r0, #0
   1b8d4:	popeq	{fp, pc}
   1b8d8:	movw	r1, #32768	; 0x8000
   1b8dc:	movt	r1, #65535	; 0xffff
   1b8e0:	bl	1ba7c <main@@Base+0x740>
   1b8e4:	mov	r0, #0
   1b8e8:	pop	{fp, pc}
   1b8ec:	push	{fp, lr}
   1b8f0:	mov	fp, sp
   1b8f4:	mov	r1, #3
   1b8f8:	mov	r2, #2
   1b8fc:	mov	r3, #2
   1b900:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1b904:	cmp	r0, #0
   1b908:	mvneq	r0, #0
   1b90c:	popeq	{fp, pc}
   1b910:	movw	r1, #65535	; 0xffff
   1b914:	bl	1baa0 <main@@Base+0x764>
   1b918:	mov	r0, #0
   1b91c:	pop	{fp, pc}
   1b920:	push	{r4, sl, fp, lr}
   1b924:	add	fp, sp, #8
   1b928:	mov	r4, #0
   1b92c:	mov	r1, #0
   1b930:	mov	r2, #1
   1b934:	mov	r3, #1
   1b938:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1b93c:	cmp	r0, #0
   1b940:	mvneq	r4, #0
   1b944:	moveq	r0, r4
   1b948:	popeq	{r4, sl, fp, pc}
   1b94c:	bl	1bac4 <main@@Base+0x788>
   1b950:	mov	r0, r4
   1b954:	pop	{r4, sl, fp, pc}
   1b958:	push	{fp, lr}
   1b95c:	mov	fp, sp
   1b960:	mov	r1, #1
   1b964:	mov	r2, #1
   1b968:	mov	r3, #1
   1b96c:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1b970:	cmp	r0, #0
   1b974:	mvneq	r0, #0
   1b978:	popeq	{fp, pc}
   1b97c:	bl	1bad0 <main@@Base+0x794>
   1b980:	mov	r0, #0
   1b984:	pop	{fp, pc}
   1b988:	push	{r4, sl, fp, lr}
   1b98c:	add	fp, sp, #8
   1b990:	mov	r4, r0
   1b994:	movw	r1, #21034	; 0x522a
   1b998:	movt	r1, #2
   1b99c:	mov	r2, #0
   1b9a0:	bl	1f624 <flatcc_builder_check_required@@Base>
   1b9a4:	cmp	r0, #0
   1b9a8:	beq	1b9b8 <main@@Base+0x67c>
   1b9ac:	mov	r0, r4
   1b9b0:	pop	{r4, sl, fp, lr}
   1b9b4:	b	1f6b4 <flatcc_builder_end_table@@Base>
   1b9b8:	movw	r0, #12931	; 0x3283
   1b9bc:	movt	r0, #2
   1b9c0:	movw	r1, #13105	; 0x3331
   1b9c4:	movt	r1, #2
   1b9c8:	movw	r3, #13204	; 0x3394
   1b9cc:	movt	r3, #2
   1b9d0:	mov	r2, #237	; 0xed
   1b9d4:	bl	12f88 <__assert_fail@plt>
   1b9d8:	push	{r4, r6, r7, sl, fp, lr}
   1b9dc:	add	fp, sp, #16
   1b9e0:	mov	r1, r3
   1b9e4:	mov	r6, r2
   1b9e8:	mov	r4, r0
   1b9ec:	mov	r0, r2
   1b9f0:	bl	1ba00 <main@@Base+0x6c4>
   1b9f4:	mov	r7, r1
   1b9f8:	strd	r6, [r4]
   1b9fc:	pop	{r4, r6, r7, sl, fp, pc}
   1ba00:	bx	lr
   1ba04:	mvn	r1, #0
   1ba08:	str	r1, [r0]
   1ba0c:	str	r1, [r0, #4]
   1ba10:	bx	lr
   1ba14:	push	{r4, sl, fp, lr}
   1ba18:	add	fp, sp, #8
   1ba1c:	mov	r4, r0
   1ba20:	bl	1ba2c <main@@Base+0x6f0>
   1ba24:	vstr	d0, [r4]
   1ba28:	pop	{r4, sl, fp, pc}
   1ba2c:	bx	lr
   1ba30:	push	{r4, r5, fp, lr}
   1ba34:	add	fp, sp, #8
   1ba38:	mov	r4, r1
   1ba3c:	mov	r5, r0
   1ba40:	mov	r0, r1
   1ba44:	bl	1ba50 <main@@Base+0x714>
   1ba48:	str	r4, [r5]
   1ba4c:	pop	{r4, r5, fp, pc}
   1ba50:	bx	lr
   1ba54:	mvn	r1, #0
   1ba58:	str	r1, [r0]
   1ba5c:	bx	lr
   1ba60:	push	{r4, sl, fp, lr}
   1ba64:	add	fp, sp, #8
   1ba68:	mov	r4, r0
   1ba6c:	bl	1ba78 <main@@Base+0x73c>
   1ba70:	vstr	s0, [r4]
   1ba74:	pop	{r4, sl, fp, pc}
   1ba78:	bx	lr
   1ba7c:	push	{r4, r5, fp, lr}
   1ba80:	add	fp, sp, #8
   1ba84:	mov	r4, r1
   1ba88:	mov	r5, r0
   1ba8c:	mov	r0, r1
   1ba90:	bl	1ba9c <main@@Base+0x760>
   1ba94:	strh	r4, [r5]
   1ba98:	pop	{r4, r5, fp, pc}
   1ba9c:	bx	lr
   1baa0:	push	{r4, r5, fp, lr}
   1baa4:	add	fp, sp, #8
   1baa8:	mov	r4, r1
   1baac:	mov	r5, r0
   1bab0:	mov	r0, r1
   1bab4:	bl	1bac0 <main@@Base+0x784>
   1bab8:	strh	r4, [r5]
   1babc:	pop	{r4, r5, fp, pc}
   1bac0:	bx	lr
   1bac4:	mov	r1, #128	; 0x80
   1bac8:	strb	r1, [r0]
   1bacc:	bx	lr
   1bad0:	mov	r1, #255	; 0xff
   1bad4:	strb	r1, [r0]
   1bad8:	bx	lr
   1badc:	push	{r4, sl, fp, lr}
   1bae0:	add	fp, sp, #8
   1bae4:	sub	sp, sp, #8
   1bae8:	mov	r4, r0
   1baec:	mov	r1, #0
   1baf0:	mov	r2, #1
   1baf4:	mov	r3, #1
   1baf8:	bl	21228 <flatcc_verify_field@@Base>
   1bafc:	cmp	r0, #0
   1bb00:	bne	1bc50 <main@@Base+0x914>
   1bb04:	mov	r0, r4
   1bb08:	mov	r1, #1
   1bb0c:	mov	r2, #1
   1bb10:	mov	r3, #1
   1bb14:	bl	21228 <flatcc_verify_field@@Base>
   1bb18:	cmp	r0, #0
   1bb1c:	bne	1bc50 <main@@Base+0x914>
   1bb20:	mov	r0, r4
   1bb24:	mov	r1, #2
   1bb28:	mov	r2, #2
   1bb2c:	mov	r3, #2
   1bb30:	bl	21228 <flatcc_verify_field@@Base>
   1bb34:	cmp	r0, #0
   1bb38:	bne	1bc50 <main@@Base+0x914>
   1bb3c:	mov	r0, r4
   1bb40:	mov	r1, #3
   1bb44:	mov	r2, #2
   1bb48:	mov	r3, #2
   1bb4c:	bl	21228 <flatcc_verify_field@@Base>
   1bb50:	cmp	r0, #0
   1bb54:	bne	1bc50 <main@@Base+0x914>
   1bb58:	mov	r0, r4
   1bb5c:	mov	r1, #4
   1bb60:	mov	r2, #4
   1bb64:	mov	r3, #4
   1bb68:	bl	21228 <flatcc_verify_field@@Base>
   1bb6c:	cmp	r0, #0
   1bb70:	bne	1bc50 <main@@Base+0x914>
   1bb74:	mov	r0, r4
   1bb78:	mov	r1, #5
   1bb7c:	mov	r2, #4
   1bb80:	mov	r3, #4
   1bb84:	bl	21228 <flatcc_verify_field@@Base>
   1bb88:	cmp	r0, #0
   1bb8c:	bne	1bc50 <main@@Base+0x914>
   1bb90:	mov	r0, r4
   1bb94:	mov	r1, #6
   1bb98:	mov	r2, #8
   1bb9c:	mov	r3, #8
   1bba0:	bl	21228 <flatcc_verify_field@@Base>
   1bba4:	cmp	r0, #0
   1bba8:	bne	1bc50 <main@@Base+0x914>
   1bbac:	mov	r0, r4
   1bbb0:	mov	r1, #7
   1bbb4:	mov	r2, #8
   1bbb8:	mov	r3, #8
   1bbbc:	bl	21228 <flatcc_verify_field@@Base>
   1bbc0:	cmp	r0, #0
   1bbc4:	bne	1bc50 <main@@Base+0x914>
   1bbc8:	mov	r0, r4
   1bbcc:	mov	r1, #8
   1bbd0:	mov	r2, #4
   1bbd4:	mov	r3, #4
   1bbd8:	bl	21228 <flatcc_verify_field@@Base>
   1bbdc:	cmp	r0, #0
   1bbe0:	bne	1bc50 <main@@Base+0x914>
   1bbe4:	mov	r0, r4
   1bbe8:	mov	r1, #9
   1bbec:	mov	r2, #8
   1bbf0:	mov	r3, #8
   1bbf4:	bl	21228 <flatcc_verify_field@@Base>
   1bbf8:	cmp	r0, #0
   1bbfc:	bne	1bc50 <main@@Base+0x914>
   1bc00:	mvn	r0, #0
   1bc04:	mov	r1, #1
   1bc08:	str	r1, [sp]
   1bc0c:	str	r0, [sp, #4]
   1bc10:	mov	r0, r4
   1bc14:	mov	r1, #10
   1bc18:	mov	r2, #0
   1bc1c:	mov	r3, #1
   1bc20:	bl	213e8 <flatcc_verify_vector_field@@Base>
   1bc24:	cmp	r0, #0
   1bc28:	bne	1bc50 <main@@Base+0x914>
   1bc2c:	mvn	r0, #-536870912	; 0xe0000000
   1bc30:	mov	r1, #8
   1bc34:	str	r1, [sp]
   1bc38:	str	r0, [sp, #4]
   1bc3c:	mov	r0, r4
   1bc40:	mov	r1, #11
   1bc44:	mov	r2, #0
   1bc48:	mov	r3, #8
   1bc4c:	bl	213e8 <flatcc_verify_vector_field@@Base>
   1bc50:	sub	sp, fp, #8
   1bc54:	pop	{r4, sl, fp, pc}
   1bc58:	ldrsb	r0, [r0]
   1bc5c:	b	1bc60 <main@@Base+0x924>
   1bc60:	bx	lr
   1bc64:	ldr	r0, [r0]
   1bc68:	b	1bc6c <main@@Base+0x930>
   1bc6c:	bx	lr
   1bc70:	ldrd	r0, [r0]
   1bc74:	b	1bc78 <main@@Base+0x93c>
   1bc78:	bx	lr
   1bc7c:	ldrb	r0, [r0]
   1bc80:	b	1bc84 <main@@Base+0x948>
   1bc84:	bx	lr
   1bc88:	ldrh	r0, [r0]
   1bc8c:	b	1bc90 <main@@Base+0x954>
   1bc90:	bx	lr
   1bc94:	ldr	r0, [r0]
   1bc98:	b	1bc9c <main@@Base+0x960>
   1bc9c:	bx	lr
   1bca0:	ldrd	r0, [r0]
   1bca4:	b	1bca8 <main@@Base+0x96c>
   1bca8:	bx	lr
   1bcac:	vldr	s0, [r0]
   1bcb0:	b	1bcb4 <main@@Base+0x978>
   1bcb4:	bx	lr
   1bcb8:	vldr	d0, [r0]
   1bcbc:	b	1bcc0 <main@@Base+0x984>
   1bcc0:	bx	lr
   1bcc4:	push	{r4, r5, r6, r7, fp, lr}
   1bcc8:	add	fp, sp, #16
   1bccc:	sub	sp, sp, #8
   1bcd0:	mov	r4, r0
   1bcd4:	mov	r1, #0
   1bcd8:	mov	r2, #32
   1bcdc:	mov	r3, #16
   1bce0:	bl	21228 <flatcc_verify_field@@Base>
   1bce4:	cmp	r0, #0
   1bce8:	bne	1c0f0 <main@@Base+0xdb4>
   1bcec:	mov	r0, r4
   1bcf0:	mov	r1, #2
   1bcf4:	mov	r2, #2
   1bcf8:	mov	r3, #2
   1bcfc:	bl	21228 <flatcc_verify_field@@Base>
   1bd00:	cmp	r0, #0
   1bd04:	bne	1c0f0 <main@@Base+0xdb4>
   1bd08:	mov	r0, r4
   1bd0c:	mov	r1, #1
   1bd10:	mov	r2, #2
   1bd14:	mov	r3, #2
   1bd18:	bl	21228 <flatcc_verify_field@@Base>
   1bd1c:	cmp	r0, #0
   1bd20:	bne	1c0f0 <main@@Base+0xdb4>
   1bd24:	mov	r0, r4
   1bd28:	mov	r1, #3
   1bd2c:	mov	r2, #1
   1bd30:	bl	21294 <flatcc_verify_string_field@@Base>
   1bd34:	cmp	r0, #0
   1bd38:	bne	1c0f0 <main@@Base+0xdb4>
   1bd3c:	mov	r5, #1
   1bd40:	mov	r0, r4
   1bd44:	mov	r1, #6
   1bd48:	mov	r2, #1
   1bd4c:	mov	r3, #1
   1bd50:	bl	21228 <flatcc_verify_field@@Base>
   1bd54:	cmp	r0, #0
   1bd58:	bne	1c0f0 <main@@Base+0xdb4>
   1bd5c:	mvn	r0, #0
   1bd60:	str	r5, [sp]
   1bd64:	str	r0, [sp, #4]
   1bd68:	mov	r0, r4
   1bd6c:	mov	r1, #5
   1bd70:	mov	r2, #0
   1bd74:	mov	r3, #1
   1bd78:	bl	213e8 <flatcc_verify_vector_field@@Base>
   1bd7c:	cmp	r0, #0
   1bd80:	bne	1c0f0 <main@@Base+0xdb4>
   1bd84:	movw	r3, #48324	; 0xbcc4
   1bd88:	movt	r3, #1
   1bd8c:	mov	r0, r4
   1bd90:	mov	r1, #11
   1bd94:	mov	r2, #0
   1bd98:	bl	21750 <flatcc_verify_table_vector_field@@Base>
   1bd9c:	cmp	r0, #0
   1bda0:	bne	1c0f0 <main@@Base+0xdb4>
   1bda4:	mov	r0, r4
   1bda8:	mov	r1, #10
   1bdac:	mov	r2, #0
   1bdb0:	bl	214d4 <flatcc_verify_string_vector_field@@Base>
   1bdb4:	cmp	r0, #0
   1bdb8:	bne	1c0f0 <main@@Base+0xdb4>
   1bdbc:	mov	r0, r4
   1bdc0:	mov	r1, #28
   1bdc4:	mov	r2, #0
   1bdc8:	bl	214d4 <flatcc_verify_string_vector_field@@Base>
   1bdcc:	cmp	r0, #0
   1bdd0:	bne	1c0f0 <main@@Base+0xdb4>
   1bdd4:	mvn	r0, #0
   1bdd8:	mov	r1, #1
   1bddc:	str	r1, [sp]
   1bde0:	str	r0, [sp, #4]
   1bde4:	mov	r0, r4
   1bde8:	mov	r1, #24
   1bdec:	mov	r2, #0
   1bdf0:	mov	r3, #1
   1bdf4:	bl	213e8 <flatcc_verify_vector_field@@Base>
   1bdf8:	cmp	r0, #0
   1bdfc:	bne	1c0f0 <main@@Base+0xdb4>
   1be00:	mvn	r0, #-536870912	; 0xe0000000
   1be04:	mov	r1, #4
   1be08:	str	r1, [sp]
   1be0c:	str	r0, [sp, #4]
   1be10:	mov	r0, r4
   1be14:	mov	r1, #29
   1be18:	mov	r2, #0
   1be1c:	mov	r3, #8
   1be20:	bl	213e8 <flatcc_verify_vector_field@@Base>
   1be24:	cmp	r0, #0
   1be28:	bne	1c0f0 <main@@Base+0xdb4>
   1be2c:	movw	r5, #48324	; 0xbcc4
   1be30:	movt	r5, #1
   1be34:	mov	r0, r4
   1be38:	mov	r1, #12
   1be3c:	mov	r2, #0
   1be40:	mov	r3, r5
   1be44:	bl	215e4 <flatcc_verify_table_field@@Base>
   1be48:	cmp	r0, #0
   1be4c:	bne	1c0f0 <main@@Base+0xdb4>
   1be50:	movw	r3, #49432	; 0xc118
   1be54:	movt	r3, #1
   1be58:	mov	r0, r4
   1be5c:	mov	r1, #8
   1be60:	mov	r2, #0
   1be64:	bl	21e14 <flatcc_verify_union_field@@Base>
   1be68:	cmp	r0, #0
   1be6c:	bne	1c0f0 <main@@Base+0xdb4>
   1be70:	mvn	r6, #-1073741824	; 0xc0000000
   1be74:	mov	r7, #2
   1be78:	str	r7, [sp]
   1be7c:	str	r6, [sp, #4]
   1be80:	mov	r0, r4
   1be84:	mov	r1, #9
   1be88:	mov	r2, #0
   1be8c:	mov	r3, #4
   1be90:	bl	213e8 <flatcc_verify_vector_field@@Base>
   1be94:	cmp	r0, #0
   1be98:	bne	1c0f0 <main@@Base+0xdb4>
   1be9c:	str	r7, [sp]
   1bea0:	str	r6, [sp, #4]
   1bea4:	mov	r0, r4
   1bea8:	mov	r1, #31
   1beac:	mov	r2, #0
   1beb0:	mov	r3, #4
   1beb4:	bl	213e8 <flatcc_verify_vector_field@@Base>
   1beb8:	cmp	r0, #0
   1bebc:	bne	1c0f0 <main@@Base+0xdb4>
   1bec0:	mov	r0, #1
   1bec4:	stm	sp, {r0, r5}
   1bec8:	mov	r0, r4
   1becc:	mov	r1, #13
   1bed0:	mov	r2, #0
   1bed4:	mov	r3, #0
   1bed8:	bl	21d0c <flatcc_verify_table_as_nested_root@@Base>
   1bedc:	cmp	r0, #0
   1bee0:	bne	1c0f0 <main@@Base+0xdb4>
   1bee4:	movw	r3, #49476	; 0xc144
   1bee8:	movt	r3, #1
   1beec:	mov	r0, r4
   1bef0:	mov	r1, #14
   1bef4:	mov	r2, #0
   1bef8:	bl	215e4 <flatcc_verify_table_field@@Base>
   1befc:	cmp	r0, #0
   1bf00:	bne	1c0f0 <main@@Base+0xdb4>
   1bf04:	mov	r0, r4
   1bf08:	mov	r1, #15
   1bf0c:	mov	r2, #1
   1bf10:	mov	r3, #1
   1bf14:	bl	21228 <flatcc_verify_field@@Base>
   1bf18:	cmp	r0, #0
   1bf1c:	bne	1c0f0 <main@@Base+0xdb4>
   1bf20:	mov	r0, r4
   1bf24:	mov	r1, #16
   1bf28:	mov	r2, #4
   1bf2c:	mov	r3, #4
   1bf30:	bl	21228 <flatcc_verify_field@@Base>
   1bf34:	cmp	r0, #0
   1bf38:	bne	1c0f0 <main@@Base+0xdb4>
   1bf3c:	mov	r0, r4
   1bf40:	mov	r1, #17
   1bf44:	mov	r2, #4
   1bf48:	mov	r3, #4
   1bf4c:	bl	21228 <flatcc_verify_field@@Base>
   1bf50:	cmp	r0, #0
   1bf54:	bne	1c0f0 <main@@Base+0xdb4>
   1bf58:	mov	r0, r4
   1bf5c:	mov	r1, #18
   1bf60:	mov	r2, #8
   1bf64:	mov	r3, #8
   1bf68:	bl	21228 <flatcc_verify_field@@Base>
   1bf6c:	cmp	r0, #0
   1bf70:	bne	1c0f0 <main@@Base+0xdb4>
   1bf74:	mov	r0, r4
   1bf78:	mov	r1, #19
   1bf7c:	mov	r2, #8
   1bf80:	mov	r3, #8
   1bf84:	bl	21228 <flatcc_verify_field@@Base>
   1bf88:	cmp	r0, #0
   1bf8c:	bne	1c0f0 <main@@Base+0xdb4>
   1bf90:	mov	r0, r4
   1bf94:	mov	r1, #20
   1bf98:	mov	r2, #4
   1bf9c:	mov	r3, #4
   1bfa0:	bl	21228 <flatcc_verify_field@@Base>
   1bfa4:	cmp	r0, #0
   1bfa8:	bne	1c0f0 <main@@Base+0xdb4>
   1bfac:	mov	r0, r4
   1bfb0:	mov	r1, #21
   1bfb4:	mov	r2, #4
   1bfb8:	mov	r3, #4
   1bfbc:	bl	21228 <flatcc_verify_field@@Base>
   1bfc0:	cmp	r0, #0
   1bfc4:	bne	1c0f0 <main@@Base+0xdb4>
   1bfc8:	mov	r0, r4
   1bfcc:	mov	r1, #22
   1bfd0:	mov	r2, #8
   1bfd4:	mov	r3, #8
   1bfd8:	bl	21228 <flatcc_verify_field@@Base>
   1bfdc:	cmp	r0, #0
   1bfe0:	bne	1c0f0 <main@@Base+0xdb4>
   1bfe4:	mov	r0, r4
   1bfe8:	mov	r1, #23
   1bfec:	mov	r2, #8
   1bff0:	mov	r3, #8
   1bff4:	bl	21228 <flatcc_verify_field@@Base>
   1bff8:	cmp	r0, #0
   1bffc:	bne	1c0f0 <main@@Base+0xdb4>
   1c000:	mov	r0, r4
   1c004:	mov	r1, #25
   1c008:	mov	r2, #4
   1c00c:	mov	r3, #4
   1c010:	bl	21228 <flatcc_verify_field@@Base>
   1c014:	cmp	r0, #0
   1c018:	bne	1c0f0 <main@@Base+0xdb4>
   1c01c:	mov	r0, r4
   1c020:	mov	r1, #26
   1c024:	mov	r2, #4
   1c028:	mov	r3, #4
   1c02c:	bl	21228 <flatcc_verify_field@@Base>
   1c030:	cmp	r0, #0
   1c034:	bne	1c0f0 <main@@Base+0xdb4>
   1c038:	mov	r0, r4
   1c03c:	mov	r1, #27
   1c040:	mov	r2, #4
   1c044:	mov	r3, #4
   1c048:	bl	21228 <flatcc_verify_field@@Base>
   1c04c:	cmp	r0, #0
   1c050:	bne	1c0f0 <main@@Base+0xdb4>
   1c054:	mvn	r0, #0
   1c058:	mov	r1, #1
   1c05c:	str	r1, [sp]
   1c060:	str	r0, [sp, #4]
   1c064:	mov	r0, r4
   1c068:	mov	r1, #30
   1c06c:	mov	r2, #0
   1c070:	mov	r3, #1
   1c074:	bl	213e8 <flatcc_verify_vector_field@@Base>
   1c078:	cmp	r0, #0
   1c07c:	bne	1c0f0 <main@@Base+0xdb4>
   1c080:	mvn	r5, #-536870912	; 0xe0000000
   1c084:	mov	r6, #8
   1c088:	str	r6, [sp]
   1c08c:	str	r5, [sp, #4]
   1c090:	mov	r0, r4
   1c094:	mov	r1, #32
   1c098:	mov	r2, #0
   1c09c:	mov	r3, #8
   1c0a0:	bl	213e8 <flatcc_verify_vector_field@@Base>
   1c0a4:	cmp	r0, #0
   1c0a8:	bne	1c0f0 <main@@Base+0xdb4>
   1c0ac:	str	r6, [sp]
   1c0b0:	str	r5, [sp, #4]
   1c0b4:	mov	r0, r4
   1c0b8:	mov	r1, #33	; 0x21
   1c0bc:	mov	r2, #0
   1c0c0:	mov	r3, #8
   1c0c4:	bl	213e8 <flatcc_verify_vector_field@@Base>
   1c0c8:	cmp	r0, #0
   1c0cc:	bne	1c0f0 <main@@Base+0xdb4>
   1c0d0:	movw	r3, #49564	; 0xc19c
   1c0d4:	movt	r3, #1
   1c0d8:	mov	r0, r4
   1c0dc:	mov	r1, #34	; 0x22
   1c0e0:	mov	r2, #0
   1c0e4:	bl	215e4 <flatcc_verify_table_field@@Base>
   1c0e8:	cmp	r0, #0
   1c0ec:	beq	1c0f8 <main@@Base+0xdbc>
   1c0f0:	sub	sp, fp, #16
   1c0f4:	pop	{r4, r5, r6, r7, fp, pc}
   1c0f8:	movw	r3, #49572	; 0xc1a4
   1c0fc:	movt	r3, #1
   1c100:	mov	r0, r4
   1c104:	mov	r1, #35	; 0x23
   1c108:	mov	r2, #0
   1c10c:	sub	sp, fp, #16
   1c110:	pop	{r4, r5, r6, r7, fp, lr}
   1c114:	b	215e4 <flatcc_verify_table_field@@Base>
   1c118:	ldrb	r1, [r0, #12]
   1c11c:	sub	r1, r1, #1
   1c120:	uxtb	r2, r1
   1c124:	cmp	r2, #3
   1c128:	movhi	r0, #0
   1c12c:	bxhi	lr
   1c130:	sxtb	r1, r1
   1c134:	movw	r2, #21052	; 0x523c
   1c138:	movt	r2, #2
   1c13c:	ldr	r1, [r2, r1, lsl #2]
   1c140:	b	218b8 <flatcc_verify_union_table@@Base>
   1c144:	push	{r4, sl, fp, lr}
   1c148:	add	fp, sp, #8
   1c14c:	mov	r4, r0
   1c150:	mov	r1, #0
   1c154:	mov	r2, #0
   1c158:	bl	21294 <flatcc_verify_string_field@@Base>
   1c15c:	cmp	r0, #0
   1c160:	popne	{r4, sl, fp, pc}
   1c164:	mov	r0, r4
   1c168:	mov	r1, #1
   1c16c:	mov	r2, #8
   1c170:	mov	r3, #8
   1c174:	bl	21228 <flatcc_verify_field@@Base>
   1c178:	cmp	r0, #0
   1c17c:	beq	1c184 <main@@Base+0xe48>
   1c180:	pop	{r4, sl, fp, pc}
   1c184:	mov	r0, r4
   1c188:	mov	r1, #2
   1c18c:	mov	r2, #2
   1c190:	mov	r3, #2
   1c194:	pop	{r4, sl, fp, lr}
   1c198:	b	21228 <flatcc_verify_field@@Base>
   1c19c:	mov	r0, #0
   1c1a0:	bx	lr
   1c1a4:	push	{r4, r5, r6, sl, fp, lr}
   1c1a8:	add	fp, sp, #16
   1c1ac:	sub	sp, sp, #8
   1c1b0:	mov	r4, r0
   1c1b4:	mvn	r5, #0
   1c1b8:	mov	r6, #1
   1c1bc:	str	r6, [sp]
   1c1c0:	str	r5, [sp, #4]
   1c1c4:	mov	r1, #0
   1c1c8:	mov	r2, #0
   1c1cc:	mov	r3, #1
   1c1d0:	bl	213e8 <flatcc_verify_vector_field@@Base>
   1c1d4:	cmp	r0, #0
   1c1d8:	bne	1c200 <main@@Base+0xec4>
   1c1dc:	str	r6, [sp]
   1c1e0:	str	r5, [sp, #4]
   1c1e4:	mov	r0, r4
   1c1e8:	mov	r1, #1
   1c1ec:	mov	r2, #0
   1c1f0:	mov	r3, #1
   1c1f4:	bl	213e8 <flatcc_verify_vector_field@@Base>
   1c1f8:	cmp	r0, #0
   1c1fc:	beq	1c208 <main@@Base+0xecc>
   1c200:	sub	sp, fp, #16
   1c204:	pop	{r4, r5, r6, sl, fp, pc}
   1c208:	movw	r0, #48324	; 0xbcc4
   1c20c:	movt	r0, #1
   1c210:	mov	r1, #1
   1c214:	str	r1, [sp]
   1c218:	str	r0, [sp, #4]
   1c21c:	mov	r0, r4
   1c220:	mov	r1, #2
   1c224:	mov	r2, #0
   1c228:	mov	r3, #0
   1c22c:	bl	21d0c <flatcc_verify_table_as_nested_root@@Base>
   1c230:	sub	sp, fp, #16
   1c234:	pop	{r4, r5, r6, sl, fp, pc}
   1c238:	push	{r4, sl, fp, lr}
   1c23c:	add	fp, sp, #8
   1c240:	mov	r4, r0
   1c244:	mov	r1, #0
   1c248:	mov	r2, #1
   1c24c:	mov	r3, #1
   1c250:	bl	21228 <flatcc_verify_field@@Base>
   1c254:	cmp	r0, #0
   1c258:	bne	1c294 <main@@Base+0xf58>
   1c25c:	mov	r0, r4
   1c260:	mov	r1, #1
   1c264:	mov	r2, #1
   1c268:	mov	r3, #1
   1c26c:	bl	21228 <flatcc_verify_field@@Base>
   1c270:	cmp	r0, #0
   1c274:	popne	{r4, sl, fp, pc}
   1c278:	mov	r0, r4
   1c27c:	mov	r1, #2
   1c280:	mov	r2, #1
   1c284:	mov	r3, #1
   1c288:	bl	21228 <flatcc_verify_field@@Base>
   1c28c:	cmp	r0, #0
   1c290:	beq	1c298 <main@@Base+0xf5c>
   1c294:	pop	{r4, sl, fp, pc}
   1c298:	mov	r0, r4
   1c29c:	mov	r1, #3
   1c2a0:	mov	r2, #1
   1c2a4:	mov	r3, #1
   1c2a8:	pop	{r4, sl, fp, lr}
   1c2ac:	b	21228 <flatcc_verify_field@@Base>
   1c2b0:	mov	r0, #0
   1c2b4:	bx	lr
   1c2b8:	push	{r4, sl, fp, lr}
   1c2bc:	add	fp, sp, #8
   1c2c0:	mov	r4, r0
   1c2c4:	movw	r3, #49952	; 0xc320
   1c2c8:	movt	r3, #1
   1c2cc:	mov	r1, #0
   1c2d0:	mov	r2, #0
   1c2d4:	bl	215e4 <flatcc_verify_table_field@@Base>
   1c2d8:	cmp	r0, #0
   1c2dc:	popne	{r4, sl, fp, pc}
   1c2e0:	movw	r3, #50056	; 0xc388
   1c2e4:	movt	r3, #1
   1c2e8:	mov	r0, r4
   1c2ec:	mov	r1, #1
   1c2f0:	mov	r2, #0
   1c2f4:	bl	215e4 <flatcc_verify_table_field@@Base>
   1c2f8:	cmp	r0, #0
   1c2fc:	beq	1c304 <main@@Base+0xfc8>
   1c300:	pop	{r4, sl, fp, pc}
   1c304:	movw	r3, #49432	; 0xc118
   1c308:	movt	r3, #1
   1c30c:	mov	r0, r4
   1c310:	mov	r1, #3
   1c314:	mov	r2, #0
   1c318:	pop	{r4, sl, fp, lr}
   1c31c:	b	21f80 <flatcc_verify_union_vector_field@@Base>
   1c320:	push	{r4, sl, fp, lr}
   1c324:	add	fp, sp, #8
   1c328:	mov	r4, r0
   1c32c:	movw	r3, #50224	; 0xc430
   1c330:	movt	r3, #1
   1c334:	mov	r1, #0
   1c338:	mov	r2, #0
   1c33c:	bl	215e4 <flatcc_verify_table_field@@Base>
   1c340:	cmp	r0, #0
   1c344:	popne	{r4, sl, fp, pc}
   1c348:	movw	r3, #50472	; 0xc528
   1c34c:	movt	r3, #1
   1c350:	mov	r0, r4
   1c354:	mov	r1, #1
   1c358:	mov	r2, #0
   1c35c:	bl	215e4 <flatcc_verify_table_field@@Base>
   1c360:	cmp	r0, #0
   1c364:	beq	1c36c <main@@Base+0x1030>
   1c368:	pop	{r4, sl, fp, pc}
   1c36c:	movw	r3, #50532	; 0xc564
   1c370:	movt	r3, #1
   1c374:	mov	r0, r4
   1c378:	mov	r1, #2
   1c37c:	mov	r2, #0
   1c380:	pop	{r4, sl, fp, lr}
   1c384:	b	215e4 <flatcc_verify_table_field@@Base>
   1c388:	push	{r4, sl, fp, lr}
   1c38c:	add	fp, sp, #8
   1c390:	mov	r4, r0
   1c394:	movw	r3, #50592	; 0xc5a0
   1c398:	movt	r3, #1
   1c39c:	mov	r1, #1
   1c3a0:	mov	r2, #0
   1c3a4:	bl	21e14 <flatcc_verify_union_field@@Base>
   1c3a8:	cmp	r0, #0
   1c3ac:	bne	1c410 <main@@Base+0x10d4>
   1c3b0:	movw	r3, #50592	; 0xc5a0
   1c3b4:	movt	r3, #1
   1c3b8:	mov	r0, r4
   1c3bc:	mov	r1, #3
   1c3c0:	mov	r2, #0
   1c3c4:	bl	21e14 <flatcc_verify_union_field@@Base>
   1c3c8:	cmp	r0, #0
   1c3cc:	bne	1c410 <main@@Base+0x10d4>
   1c3d0:	movw	r3, #50592	; 0xc5a0
   1c3d4:	movt	r3, #1
   1c3d8:	mov	r0, r4
   1c3dc:	mov	r1, #5
   1c3e0:	mov	r2, #0
   1c3e4:	bl	21e14 <flatcc_verify_union_field@@Base>
   1c3e8:	cmp	r0, #0
   1c3ec:	popne	{r4, sl, fp, pc}
   1c3f0:	movw	r3, #50592	; 0xc5a0
   1c3f4:	movt	r3, #1
   1c3f8:	mov	r0, r4
   1c3fc:	mov	r1, #7
   1c400:	mov	r2, #0
   1c404:	bl	21e14 <flatcc_verify_union_field@@Base>
   1c408:	cmp	r0, #0
   1c40c:	beq	1c414 <main@@Base+0x10d8>
   1c410:	pop	{r4, sl, fp, pc}
   1c414:	movw	r3, #50592	; 0xc5a0
   1c418:	movt	r3, #1
   1c41c:	mov	r0, r4
   1c420:	mov	r1, #9
   1c424:	mov	r2, #0
   1c428:	pop	{r4, sl, fp, lr}
   1c42c:	b	21f80 <flatcc_verify_union_vector_field@@Base>
   1c430:	push	{r4, sl, fp, lr}
   1c434:	add	fp, sp, #8
   1c438:	mov	r4, r0
   1c43c:	mov	r1, #0
   1c440:	mov	r2, #0
   1c444:	bl	21294 <flatcc_verify_string_field@@Base>
   1c448:	cmp	r0, #0
   1c44c:	bne	1c50c <main@@Base+0x11d0>
   1c450:	mov	r0, r4
   1c454:	mov	r1, #1
   1c458:	mov	r2, #4
   1c45c:	mov	r3, #4
   1c460:	bl	21228 <flatcc_verify_field@@Base>
   1c464:	cmp	r0, #0
   1c468:	bne	1c50c <main@@Base+0x11d0>
   1c46c:	mov	r0, r4
   1c470:	mov	r1, #2
   1c474:	mov	r2, #0
   1c478:	bl	21294 <flatcc_verify_string_field@@Base>
   1c47c:	cmp	r0, #0
   1c480:	bne	1c50c <main@@Base+0x11d0>
   1c484:	mov	r0, r4
   1c488:	mov	r1, #3
   1c48c:	mov	r2, #8
   1c490:	mov	r3, #8
   1c494:	bl	21228 <flatcc_verify_field@@Base>
   1c498:	cmp	r0, #0
   1c49c:	bne	1c50c <main@@Base+0x11d0>
   1c4a0:	mov	r0, r4
   1c4a4:	mov	r1, #4
   1c4a8:	mov	r2, #0
   1c4ac:	bl	21294 <flatcc_verify_string_field@@Base>
   1c4b0:	cmp	r0, #0
   1c4b4:	bne	1c50c <main@@Base+0x11d0>
   1c4b8:	mov	r0, r4
   1c4bc:	mov	r1, #5
   1c4c0:	mov	r2, #8
   1c4c4:	mov	r3, #8
   1c4c8:	bl	21228 <flatcc_verify_field@@Base>
   1c4cc:	cmp	r0, #0
   1c4d0:	bne	1c50c <main@@Base+0x11d0>
   1c4d4:	mov	r0, r4
   1c4d8:	mov	r1, #6
   1c4dc:	mov	r2, #4
   1c4e0:	mov	r3, #4
   1c4e4:	bl	21228 <flatcc_verify_field@@Base>
   1c4e8:	cmp	r0, #0
   1c4ec:	popne	{r4, sl, fp, pc}
   1c4f0:	mov	r0, r4
   1c4f4:	mov	r1, #7
   1c4f8:	mov	r2, #8
   1c4fc:	mov	r3, #8
   1c500:	bl	21228 <flatcc_verify_field@@Base>
   1c504:	cmp	r0, #0
   1c508:	beq	1c510 <main@@Base+0x11d4>
   1c50c:	pop	{r4, sl, fp, pc}
   1c510:	mov	r0, r4
   1c514:	mov	r1, #8
   1c518:	mov	r2, #4
   1c51c:	mov	r3, #4
   1c520:	pop	{r4, sl, fp, lr}
   1c524:	b	21228 <flatcc_verify_field@@Base>
   1c528:	push	{r4, sl, fp, lr}
   1c52c:	add	fp, sp, #8
   1c530:	mov	r4, r0
   1c534:	mov	r1, #0
   1c538:	mov	r2, #8
   1c53c:	mov	r3, #8
   1c540:	bl	21228 <flatcc_verify_field@@Base>
   1c544:	cmp	r0, #0
   1c548:	popne	{r4, sl, fp, pc}
   1c54c:	mov	r0, r4
   1c550:	mov	r1, #1
   1c554:	mov	r2, #4
   1c558:	mov	r3, #4
   1c55c:	pop	{r4, sl, fp, lr}
   1c560:	b	21228 <flatcc_verify_field@@Base>
   1c564:	push	{r4, sl, fp, lr}
   1c568:	add	fp, sp, #8
   1c56c:	mov	r4, r0
   1c570:	mov	r1, #0
   1c574:	mov	r2, #8
   1c578:	mov	r3, #8
   1c57c:	bl	21228 <flatcc_verify_field@@Base>
   1c580:	cmp	r0, #0
   1c584:	popne	{r4, sl, fp, pc}
   1c588:	mov	r0, r4
   1c58c:	mov	r1, #1
   1c590:	mov	r2, #4
   1c594:	mov	r3, #4
   1c598:	pop	{r4, sl, fp, lr}
   1c59c:	b	21228 <flatcc_verify_field@@Base>
   1c5a0:	ldrb	r2, [r0, #12]
   1c5a4:	sub	r1, r2, #2
   1c5a8:	cmp	r1, #9
   1c5ac:	bhi	1c5ec <main@@Base+0x12b0>
   1c5b0:	add	r2, pc, #0
   1c5b4:	ldr	pc, [r2, r1, lsl #2]
   1c5b8:	andeq	ip, r1, r0, lsl #12
   1c5bc:	strdeq	ip, [r1], -r8
   1c5c0:	strdeq	ip, [r1], -r8
   1c5c4:	strdeq	ip, [r1], -r8
   1c5c8:	strdeq	ip, [r1], -r8
   1c5cc:	strdeq	ip, [r1], -r8
   1c5d0:	andeq	ip, r1, ip, lsl #12
   1c5d4:	andeq	ip, r1, r0, ror #11
   1c5d8:	andeq	ip, r1, r0, ror #11
   1c5dc:	strdeq	ip, [r1], -r4
   1c5e0:	mov	r1, #4
   1c5e4:	mov	r2, #4
   1c5e8:	b	218ec <flatcc_verify_union_struct@@Base>
   1c5ec:	cmp	r2, #255	; 0xff
   1c5f0:	bne	1c5f8 <main@@Base+0x12bc>
   1c5f4:	b	2196c <flatcc_verify_union_string@@Base>
   1c5f8:	mov	r0, #0
   1c5fc:	bx	lr
   1c600:	movw	r1, #50712	; 0xc618
   1c604:	movt	r1, #1
   1c608:	b	218b8 <flatcc_verify_union_table@@Base>
   1c60c:	mov	r1, #2
   1c610:	mov	r2, #2
   1c614:	b	218ec <flatcc_verify_union_struct@@Base>
   1c618:	mov	r1, #0
   1c61c:	mov	r2, #4
   1c620:	mov	r3, #4
   1c624:	b	21228 <flatcc_verify_field@@Base>
   1c628:	ldr	r0, [r0]
   1c62c:	b	1c630 <main@@Base+0x12f4>
   1c630:	bx	lr
   1c634:	push	{r4, sl, fp, lr}
   1c638:	add	fp, sp, #8
   1c63c:	mov	r4, r0
   1c640:	bl	1c670 <main@@Base+0x1334>
   1c644:	cmp	r0, #0
   1c648:	bne	1c65c <main@@Base+0x1320>
   1c64c:	mov	r0, r4
   1c650:	bl	1c678 <main@@Base+0x133c>
   1c654:	cmp	r0, #0
   1c658:	beq	1c664 <main@@Base+0x1328>
   1c65c:	mov	r0, #0
   1c660:	pop	{r4, sl, fp, pc}
   1c664:	mov	r0, r4
   1c668:	pop	{r4, sl, fp, lr}
   1c66c:	b	1c698 <main@@Base+0x135c>
   1c670:	mov	r1, #1
   1c674:	b	1ef94 <flatcc_builder_start_table@@Base>
   1c678:	push	{fp, lr}
   1c67c:	mov	fp, sp
   1c680:	bl	1c6e8 <main@@Base+0x13ac>
   1c684:	mov	r1, #0
   1c688:	cmp	r0, #0
   1c68c:	mvneq	r1, #0
   1c690:	mov	r0, r1
   1c694:	pop	{fp, pc}
   1c698:	push	{r4, sl, fp, lr}
   1c69c:	add	fp, sp, #8
   1c6a0:	mov	r4, r0
   1c6a4:	movw	r1, #21040	; 0x5230
   1c6a8:	movt	r1, #2
   1c6ac:	mov	r2, #0
   1c6b0:	bl	1f624 <flatcc_builder_check_required@@Base>
   1c6b4:	cmp	r0, #0
   1c6b8:	beq	1c6c8 <main@@Base+0x138c>
   1c6bc:	mov	r0, r4
   1c6c0:	pop	{r4, sl, fp, lr}
   1c6c4:	b	1f6b4 <flatcc_builder_end_table@@Base>
   1c6c8:	movw	r0, #14427	; 0x385b
   1c6cc:	movt	r0, #2
   1c6d0:	movw	r1, #13105	; 0x3331
   1c6d4:	movt	r1, #2
   1c6d8:	movw	r3, #14616	; 0x3918
   1c6dc:	movt	r3, #2
   1c6e0:	mov	r2, #215	; 0xd7
   1c6e4:	bl	12f88 <__assert_fail@plt>
   1c6e8:	mov	r1, #0
   1c6ec:	mov	r2, #0
   1c6f0:	mov	r3, #1
   1c6f4:	b	1fda8 <flatcc_builder_table_add@@Base>
   1c6f8:	mov	r1, #0
   1c6fc:	mov	r2, #0
   1c700:	mov	r3, #1
   1c704:	b	21228 <flatcc_verify_field@@Base>
   1c708:	bx	lr
   1c70c:	push	{r4, sl, fp, lr}
   1c710:	add	fp, sp, #8
   1c714:	mov	r4, r0
   1c718:	vldr	s0, [r1]
   1c71c:	bl	1bcb4 <main@@Base+0x978>
   1c720:	vstr	s0, [r4]
   1c724:	pop	{r4, sl, fp, pc}
   1c728:	push	{r4, sl, fp, lr}
   1c72c:	add	fp, sp, #8
   1c730:	mov	r4, r0
   1c734:	vldr	d0, [r1]
   1c738:	bl	1bcc0 <main@@Base+0x984>
   1c73c:	vstr	d0, [r4]
   1c740:	pop	{r4, sl, fp, pc}
   1c744:	push	{r4, r5, fp, lr}
   1c748:	add	fp, sp, #8
   1c74c:	mov	r4, r1
   1c750:	mov	r5, r0
   1c754:	bl	1c764 <main@@Base+0x1428>
   1c758:	ldrb	r0, [r4, #2]
   1c75c:	strb	r0, [r5, #2]
   1c760:	pop	{r4, r5, fp, pc}
   1c764:	push	{r4, sl, fp, lr}
   1c768:	add	fp, sp, #8
   1c76c:	mov	r4, r0
   1c770:	ldrsh	r0, [r1]
   1c774:	bl	1b5f8 <main@@Base+0x2bc>
   1c778:	strh	r0, [r4]
   1c77c:	pop	{r4, sl, fp, pc}
   1c780:	ldrsb	r0, [r0]
   1c784:	b	1c788 <main@@Base+0x144c>
   1c788:	bx	lr
   1c78c:	cmp	r0, #0
   1c790:	moveq	r0, #0
   1c794:	bxeq	lr
   1c798:	sub	r0, r0, #4
   1c79c:	b	1b5cc <main@@Base+0x290>
   1c7a0:	ldrb	r0, [r0]
   1c7a4:	b	1c7a8 <main@@Base+0x146c>
   1c7a8:	bx	lr
   1c7ac:	ldrb	r0, [r0]
   1c7b0:	b	1c7b4 <main@@Base+0x1478>
   1c7b4:	bx	lr
   1c7b8:	movw	r1, #9012	; 0x2334
   1c7bc:	movt	r1, #2
   1c7c0:	mov	r2, #0
   1c7c4:	mov	r3, #2
   1c7c8:	b	1e2ac <flatcc_builder_start_buffer@@Base>
   1c7cc:	push	{r4, r5, fp, lr}
   1c7d0:	add	fp, sp, #8
   1c7d4:	mov	r4, r1
   1c7d8:	mov	r5, r0
   1c7dc:	mov	r0, r1
   1c7e0:	bl	1c7ec <main@@Base+0x14b0>
   1c7e4:	strb	r4, [r5]
   1c7e8:	pop	{r4, r5, fp, pc}
   1c7ec:	bx	lr
   1c7f0:	push	{r4, sl, fp, lr}
   1c7f4:	add	fp, sp, #8
   1c7f8:	cmp	r1, #0
   1c7fc:	popeq	{r4, sl, fp, pc}
   1c800:	mov	r4, r1
   1c804:	mov	r1, #5
   1c808:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   1c80c:	cmp	r0, #0
   1c810:	strne	r4, [r0]
   1c814:	pop	{r4, sl, fp, pc}
   1c818:	mov	r1, #4
   1c81c:	mov	r2, #2
   1c820:	mvn	r3, #-1073741824	; 0xc0000000
   1c824:	b	1ecc0 <flatcc_builder_start_vector@@Base>
   1c828:	mov	r1, #128	; 0x80
   1c82c:	strb	r1, [r0, #2]
   1c830:	mov	r1, #112	; 0x70
   1c834:	strh	r1, [r0]
   1c838:	bx	lr
   1c83c:	push	{r4, sl, fp, lr}
   1c840:	add	fp, sp, #8
   1c844:	cmp	r1, #0
   1c848:	popeq	{r4, sl, fp, pc}
   1c84c:	mov	r4, r1
   1c850:	mov	r1, #9
   1c854:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   1c858:	cmp	r0, #0
   1c85c:	strne	r4, [r0]
   1c860:	pop	{r4, sl, fp, pc}
   1c864:	b	1f910 <flatcc_builder_end_vector@@Base>
   1c868:	cmp	r1, #0
   1c86c:	moveq	r0, #0
   1c870:	bxeq	lr
   1c874:	b	1e8d4 <flatcc_builder_offset_vector_push@@Base>
   1c878:	push	{r4, sl, fp, lr}
   1c87c:	add	fp, sp, #8
   1c880:	cmp	r1, #0
   1c884:	popeq	{r4, sl, fp, pc}
   1c888:	mov	r4, r1
   1c88c:	mov	r1, #11
   1c890:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   1c894:	cmp	r0, #0
   1c898:	strne	r4, [r0]
   1c89c:	pop	{r4, sl, fp, pc}
   1c8a0:	push	{r4, sl, fp, lr}
   1c8a4:	add	fp, sp, #8
   1c8a8:	cmp	r1, #0
   1c8ac:	popeq	{r4, sl, fp, pc}
   1c8b0:	mov	r4, r1
   1c8b4:	mov	r1, #10
   1c8b8:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   1c8bc:	cmp	r0, #0
   1c8c0:	strne	r4, [r0]
   1c8c4:	pop	{r4, sl, fp, pc}
   1c8c8:	mov	r1, #1
   1c8cc:	mov	r2, #1
   1c8d0:	mvn	r3, #0
   1c8d4:	b	1ecc0 <flatcc_builder_start_vector@@Base>
   1c8d8:	push	{r4, sl, fp, lr}
   1c8dc:	add	fp, sp, #8
   1c8e0:	cmp	r1, #0
   1c8e4:	popeq	{r4, sl, fp, pc}
   1c8e8:	mov	r4, r1
   1c8ec:	mov	r1, #24
   1c8f0:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   1c8f4:	cmp	r0, #0
   1c8f8:	strne	r4, [r0]
   1c8fc:	pop	{r4, sl, fp, pc}
   1c900:	b	1f910 <flatcc_builder_end_vector@@Base>
   1c904:	cmp	r1, #0
   1c908:	bxeq	lr
   1c90c:	b	1e8d4 <flatcc_builder_offset_vector_push@@Base>
   1c910:	mov	r1, #0
   1c914:	strb	r1, [r0]
   1c918:	bx	lr
   1c91c:	mov	r1, #3
   1c920:	b	1ef94 <flatcc_builder_start_table@@Base>
   1c924:	push	{r4, sl, fp, lr}
   1c928:	add	fp, sp, #8
   1c92c:	cmp	r1, #0
   1c930:	popeq	{r4, sl, fp, pc}
   1c934:	mov	r4, r1
   1c938:	mov	r1, #14
   1c93c:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   1c940:	cmp	r0, #0
   1c944:	strne	r4, [r0]
   1c948:	pop	{r4, sl, fp, pc}
   1c94c:	push	{r4, sl, fp, lr}
   1c950:	add	fp, sp, #8
   1c954:	mov	r4, r0
   1c958:	movw	r1, #21042	; 0x5232
   1c95c:	movt	r1, #2
   1c960:	mov	r2, #0
   1c964:	bl	1f624 <flatcc_builder_check_required@@Base>
   1c968:	cmp	r0, #0
   1c96c:	beq	1c97c <main@@Base+0x1640>
   1c970:	mov	r0, r4
   1c974:	pop	{r4, sl, fp, lr}
   1c978:	b	1f6b4 <flatcc_builder_end_table@@Base>
   1c97c:	movw	r0, #16923	; 0x421b
   1c980:	movt	r0, #2
   1c984:	movw	r1, #13105	; 0x3331
   1c988:	movt	r1, #2
   1c98c:	movw	r3, #17076	; 0x42b4
   1c990:	movt	r3, #2
   1c994:	mov	r2, #221	; 0xdd
   1c998:	bl	12f88 <__assert_fail@plt>
   1c99c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c9a0:	add	fp, sp, #28
   1c9a4:	sub	sp, sp, #4
   1c9a8:	mov	r8, r0
   1c9ac:	bl	15464 <verify_monster@@Base+0xec0>
   1c9b0:	cmp	r0, #0
   1c9b4:	beq	1ca54 <main@@Base+0x1718>
   1c9b8:	mov	r5, r0
   1c9bc:	lsr	r7, r0, #1
   1c9c0:	sub	r6, r0, #1
   1c9c4:	mov	r0, r8
   1c9c8:	mov	r1, r7
   1c9cc:	mov	r2, r6
   1c9d0:	bl	1ca5c <main@@Base+0x1720>
   1c9d4:	sub	r7, r7, #1
   1c9d8:	cmn	r7, #1
   1c9dc:	bne	1c9c4 <main@@Base+0x1688>
   1c9e0:	cmp	r6, #0
   1c9e4:	beq	1ca54 <main@@Base+0x1718>
   1c9e8:	mov	r0, #4
   1c9ec:	sub	r7, r0, r5, lsl #2
   1c9f0:	mvn	r0, #3
   1c9f4:	add	r4, r0, r5, lsl #2
   1c9f8:	sub	r5, r5, #2
   1c9fc:	add	r6, r8, r4
   1ca00:	mov	r0, r6
   1ca04:	bl	1b5cc <main@@Base+0x290>
   1ca08:	add	r9, r0, r4
   1ca0c:	mov	r0, r8
   1ca10:	bl	1b5cc <main@@Base+0x290>
   1ca14:	mov	sl, r0
   1ca18:	mov	r0, r8
   1ca1c:	mov	r1, r9
   1ca20:	bl	1cb74 <main@@Base+0x1838>
   1ca24:	add	r1, sl, r7
   1ca28:	mov	r0, r6
   1ca2c:	bl	1cb74 <main@@Base+0x1838>
   1ca30:	mov	r0, r8
   1ca34:	mov	r1, #0
   1ca38:	mov	r2, r5
   1ca3c:	bl	1ca5c <main@@Base+0x1720>
   1ca40:	add	r7, r7, #4
   1ca44:	sub	r5, r5, #1
   1ca48:	sub	r4, r4, #4
   1ca4c:	cmn	r5, #1
   1ca50:	bne	1c9fc <main@@Base+0x16c0>
   1ca54:	sub	sp, fp, #28
   1ca58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca60:	add	fp, sp, #28
   1ca64:	sub	sp, sp, #4
   1ca68:	cmp	r2, r1, lsl #1
   1ca6c:	bcc	1cb6c <main@@Base+0x1830>
   1ca70:	mov	r4, r2
   1ca74:	mov	sl, r1
   1ca78:	mov	r8, r0
   1ca7c:	lsl	r7, r1, #1
   1ca80:	str	r2, [sp]
   1ca84:	cmp	r7, r4
   1ca88:	bcs	1cad4 <main@@Base+0x1798>
   1ca8c:	mov	r0, r8
   1ca90:	mov	r1, r7
   1ca94:	bl	15478 <verify_monster@@Base+0xed4>
   1ca98:	bl	15010 <verify_monster@@Base+0xa6c>
   1ca9c:	mov	r9, r0
   1caa0:	orr	r4, r7, #1
   1caa4:	mov	r0, r8
   1caa8:	mov	r1, r4
   1caac:	bl	15478 <verify_monster@@Base+0xed4>
   1cab0:	bl	15010 <verify_monster@@Base+0xa6c>
   1cab4:	mov	r6, r0
   1cab8:	bl	15090 <verify_monster@@Base+0xaec>
   1cabc:	mov	r2, r0
   1cac0:	mov	r0, r9
   1cac4:	mov	r1, r6
   1cac8:	bl	1cb94 <main@@Base+0x1858>
   1cacc:	cmp	r0, #0
   1cad0:	movlt	r7, r4
   1cad4:	mov	r6, r7
   1cad8:	mov	r0, r8
   1cadc:	mov	r1, sl
   1cae0:	bl	15478 <verify_monster@@Base+0xed4>
   1cae4:	bl	15010 <verify_monster@@Base+0xa6c>
   1cae8:	mov	r7, r0
   1caec:	mov	r0, r8
   1caf0:	mov	r1, r6
   1caf4:	bl	15478 <verify_monster@@Base+0xed4>
   1caf8:	bl	15010 <verify_monster@@Base+0xa6c>
   1cafc:	mov	r5, r0
   1cb00:	bl	15090 <verify_monster@@Base+0xaec>
   1cb04:	mov	r2, r0
   1cb08:	mov	r0, r7
   1cb0c:	mov	r1, r5
   1cb10:	bl	1cb94 <main@@Base+0x1858>
   1cb14:	cmn	r0, #1
   1cb18:	bgt	1cb6c <main@@Base+0x1830>
   1cb1c:	sub	r7, sl, r6
   1cb20:	add	r5, r8, r6, lsl #2
   1cb24:	mov	r0, r5
   1cb28:	bl	1b5cc <main@@Base+0x290>
   1cb2c:	sub	r9, r0, r7, lsl #2
   1cb30:	add	r4, r8, sl, lsl #2
   1cb34:	mov	r0, r4
   1cb38:	bl	1b5cc <main@@Base+0x290>
   1cb3c:	mov	sl, r0
   1cb40:	mov	r0, r4
   1cb44:	mov	r1, r9
   1cb48:	ldr	r4, [sp]
   1cb4c:	bl	1cb74 <main@@Base+0x1838>
   1cb50:	add	r1, sl, r7, lsl #2
   1cb54:	mov	r0, r5
   1cb58:	bl	1cb74 <main@@Base+0x1838>
   1cb5c:	lsl	r7, r6, #1
   1cb60:	cmp	r4, r6, lsl #1
   1cb64:	mov	sl, r6
   1cb68:	bcs	1ca84 <main@@Base+0x1748>
   1cb6c:	sub	sp, fp, #28
   1cb70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb74:	push	{r4, r5, fp, lr}
   1cb78:	add	fp, sp, #8
   1cb7c:	mov	r4, r1
   1cb80:	mov	r5, r0
   1cb84:	mov	r0, r1
   1cb88:	bl	1cbe8 <main@@Base+0x18ac>
   1cb8c:	str	r4, [r5]
   1cb90:	pop	{r4, r5, fp, pc}
   1cb94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1cb98:	add	fp, sp, #24
   1cb9c:	mov	r4, r2
   1cba0:	mov	r8, r1
   1cba4:	mov	r6, r0
   1cba8:	bl	15090 <verify_monster@@Base+0xaec>
   1cbac:	mov	r7, r0
   1cbb0:	mov	r5, #0
   1cbb4:	cmp	r0, r4
   1cbb8:	movwhi	r5, #1
   1cbbc:	mov	r2, r4
   1cbc0:	movcc	r2, r0
   1cbc4:	mov	r0, r6
   1cbc8:	mov	r1, r8
   1cbcc:	bl	12f70 <strncmp@plt>
   1cbd0:	cmp	r0, #0
   1cbd4:	mvneq	r0, #0
   1cbd8:	movne	r5, r0
   1cbdc:	cmp	r7, r4
   1cbe0:	movcs	r0, r5
   1cbe4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1cbe8:	bx	lr
   1cbec:	b	12e8c <strcmp@plt>
   1cbf0:	push	{r4, r5, r6, r7, fp, lr}
   1cbf4:	add	fp, sp, #16
   1cbf8:	mov	r5, r0
   1cbfc:	bl	15464 <verify_monster@@Base+0xec0>
   1cc00:	mvn	r4, #0
   1cc04:	cmp	r0, #0
   1cc08:	beq	1cc54 <main@@Base+0x1918>
   1cc0c:	mov	r6, #0
   1cc10:	movw	r7, #10926	; 0x2aae
   1cc14:	movt	r7, #2
   1cc18:	mov	r0, r5
   1cc1c:	mov	r1, r6
   1cc20:	bl	15478 <verify_monster@@Base+0xed4>
   1cc24:	bl	15010 <verify_monster@@Base+0xa6c>
   1cc28:	mov	r1, r7
   1cc2c:	mov	r2, #5
   1cc30:	bl	1cb94 <main@@Base+0x1858>
   1cc34:	cmp	r0, #0
   1cc38:	moveq	r0, r6
   1cc3c:	popeq	{r4, r5, r6, r7, fp, pc}
   1cc40:	add	r6, r6, #1
   1cc44:	mov	r0, r5
   1cc48:	bl	15464 <verify_monster@@Base+0xec0>
   1cc4c:	cmp	r6, r0
   1cc50:	bcc	1cc18 <main@@Base+0x18dc>
   1cc54:	mov	r0, r4
   1cc58:	pop	{r4, r5, r6, r7, fp, pc}
   1cc5c:	push	{r4, r5, r6, sl, fp, lr}
   1cc60:	add	fp, sp, #16
   1cc64:	mov	r4, r0
   1cc68:	bl	151d0 <verify_monster@@Base+0xc2c>
   1cc6c:	cmp	r0, #0
   1cc70:	popeq	{r4, r5, r6, sl, fp, pc}
   1cc74:	lsr	r6, r0, #1
   1cc78:	sub	r5, r0, #1
   1cc7c:	mov	r0, r4
   1cc80:	mov	r1, r6
   1cc84:	mov	r2, r5
   1cc88:	bl	1cccc <main@@Base+0x1990>
   1cc8c:	sub	r6, r6, #1
   1cc90:	cmn	r6, #1
   1cc94:	bne	1cc7c <main@@Base+0x1940>
   1cc98:	b	1ccc0 <main@@Base+0x1984>
   1cc9c:	ldrb	r0, [r4, r5]
   1cca0:	ldrb	r1, [r4]
   1cca4:	strb	r1, [r4, r5]
   1cca8:	strb	r0, [r4]
   1ccac:	sub	r5, r5, #1
   1ccb0:	mov	r0, r4
   1ccb4:	mov	r1, #0
   1ccb8:	mov	r2, r5
   1ccbc:	bl	1cccc <main@@Base+0x1990>
   1ccc0:	cmp	r5, #0
   1ccc4:	bne	1cc9c <main@@Base+0x1960>
   1ccc8:	pop	{r4, r5, r6, sl, fp, pc}
   1cccc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ccd0:	add	fp, sp, #24
   1ccd4:	cmp	r2, r1, lsl #1
   1ccd8:	bcc	1cd64 <main@@Base+0x1a28>
   1ccdc:	mov	r8, r2
   1cce0:	mov	r6, r1
   1cce4:	mov	r5, r0
   1cce8:	lsl	r4, r1, #1
   1ccec:	cmp	r4, r8
   1ccf0:	bcs	1cd1c <main@@Base+0x19e0>
   1ccf4:	mov	r0, r5
   1ccf8:	mov	r1, r4
   1ccfc:	bl	151d4 <verify_monster@@Base+0xc30>
   1cd00:	mov	r9, r0
   1cd04:	orr	r7, r4, #1
   1cd08:	mov	r0, r5
   1cd0c:	mov	r1, r7
   1cd10:	bl	151d4 <verify_monster@@Base+0xc30>
   1cd14:	cmp	r9, r0
   1cd18:	movcc	r4, r7
   1cd1c:	mov	r7, r4
   1cd20:	mov	r0, r5
   1cd24:	mov	r1, r6
   1cd28:	bl	151d4 <verify_monster@@Base+0xc30>
   1cd2c:	mov	r4, r0
   1cd30:	mov	r0, r5
   1cd34:	mov	r1, r7
   1cd38:	bl	151d4 <verify_monster@@Base+0xc30>
   1cd3c:	cmp	r4, r0
   1cd40:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   1cd44:	ldrb	r0, [r5, r7]
   1cd48:	ldrb	r1, [r5, r6]
   1cd4c:	strb	r1, [r5, r7]
   1cd50:	strb	r0, [r5, r6]
   1cd54:	lsl	r4, r7, #1
   1cd58:	cmp	r8, r7, lsl #1
   1cd5c:	mov	r6, r7
   1cd60:	bcs	1ccec <main@@Base+0x19b0>
   1cd64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1cd68:	push	{fp, lr}
   1cd6c:	mov	fp, sp
   1cd70:	sub	sp, sp, #8
   1cd74:	mvn	r2, #0
   1cd78:	mov	r3, #1
   1cd7c:	str	r3, [sp]
   1cd80:	str	r2, [sp, #4]
   1cd84:	mov	r2, #7
   1cd88:	mov	r3, #1
   1cd8c:	bl	1f800 <flatcc_builder_create_vector@@Base>
   1cd90:	mov	sp, fp
   1cd94:	pop	{fp, pc}
   1cd98:	push	{r4, r5, fp, lr}
   1cd9c:	add	fp, sp, #8
   1cda0:	mov	r4, r1
   1cda4:	mov	r5, r0
   1cda8:	mov	r0, r1
   1cdac:	bl	15090 <verify_monster@@Base+0xaec>
   1cdb0:	mov	r2, r0
   1cdb4:	mov	r0, r5
   1cdb8:	mov	r1, r4
   1cdbc:	pop	{r4, r5, fp, lr}
   1cdc0:	b	203ec <flatcc_builder_create_string@@Base>
   1cdc4:	cmp	r1, #0
   1cdc8:	bxeq	lr
   1cdcc:	b	1e8d4 <flatcc_builder_offset_vector_push@@Base>
   1cdd0:	push	{r4, r5, r6, r7, fp, lr}
   1cdd4:	add	fp, sp, #16
   1cdd8:	mov	r4, r3
   1cddc:	mov	r5, r2
   1cde0:	mov	r6, r1
   1cde4:	mov	r7, r0
   1cde8:	mov	r0, r1
   1cdec:	bl	15090 <verify_monster@@Base+0xaec>
   1cdf0:	cmp	r0, r5
   1cdf4:	movls	r5, r0
   1cdf8:	add	r1, r6, r5
   1cdfc:	sub	r2, r0, r5
   1ce00:	cmp	r2, r4
   1ce04:	movcs	r2, r4
   1ce08:	mov	r0, r7
   1ce0c:	pop	{r4, r5, r6, r7, fp, lr}
   1ce10:	b	203ec <flatcc_builder_create_string@@Base>
   1ce14:	push	{r4, r5, fp, lr}
   1ce18:	add	fp, sp, #8
   1ce1c:	sub	sp, sp, #8
   1ce20:	mov	r4, r1
   1ce24:	mov	r5, r0
   1ce28:	mov	r0, r1
   1ce2c:	bl	15690 <verify_monster@@Base+0x10ec>
   1ce30:	mov	r2, r0
   1ce34:	mvn	r0, #0
   1ce38:	mov	r1, #1
   1ce3c:	str	r1, [sp]
   1ce40:	str	r0, [sp, #4]
   1ce44:	mov	r0, r5
   1ce48:	mov	r1, r4
   1ce4c:	mov	r3, #1
   1ce50:	bl	1f800 <flatcc_builder_create_vector@@Base>
   1ce54:	sub	sp, fp, #8
   1ce58:	pop	{r4, r5, fp, pc}
   1ce5c:	push	{r4, r5, r6, r7, fp, lr}
   1ce60:	add	fp, sp, #16
   1ce64:	sub	sp, sp, #8
   1ce68:	mov	r4, r1
   1ce6c:	mov	r5, r0
   1ce70:	mov	r0, r1
   1ce74:	bl	15370 <verify_monster@@Base+0xdcc>
   1ce78:	mov	r6, r0
   1ce7c:	cmp	r0, #0
   1ce80:	mov	r7, r0
   1ce84:	movwne	r7, #1
   1ce88:	mov	r0, r4
   1ce8c:	mov	r1, r7
   1ce90:	bl	1cec8 <main@@Base+0x1b8c>
   1ce94:	mov	r1, r0
   1ce98:	mvn	r0, #-1073741824	; 0xc0000000
   1ce9c:	mov	r2, #2
   1cea0:	str	r2, [sp]
   1cea4:	str	r0, [sp, #4]
   1cea8:	sub	r0, r6, r7
   1ceac:	cmp	r0, #2
   1ceb0:	movcc	r2, r0
   1ceb4:	mov	r0, r5
   1ceb8:	mov	r3, #4
   1cebc:	bl	1f800 <flatcc_builder_create_vector@@Base>
   1cec0:	sub	sp, fp, #16
   1cec4:	pop	{r4, r5, r6, r7, fp, pc}
   1cec8:	add	r0, r0, r1, lsl #2
   1cecc:	bx	lr
   1ced0:	push	{r4, r5, r6, r7, fp, lr}
   1ced4:	add	fp, sp, #16
   1ced8:	sub	sp, sp, #8
   1cedc:	mov	r4, r1
   1cee0:	mov	r5, r0
   1cee4:	mov	r0, r1
   1cee8:	bl	15690 <verify_monster@@Base+0x10ec>
   1ceec:	mov	r6, r0
   1cef0:	cmp	r0, #3
   1cef4:	mov	r7, r0
   1cef8:	movcs	r7, #3
   1cefc:	mov	r0, r4
   1cf00:	mov	r1, r7
   1cf04:	bl	1cf34 <main@@Base+0x1bf8>
   1cf08:	mov	r1, r0
   1cf0c:	mvn	r0, #0
   1cf10:	mov	r2, #1
   1cf14:	str	r2, [sp]
   1cf18:	str	r0, [sp, #4]
   1cf1c:	sub	r2, r6, r7
   1cf20:	mov	r0, r5
   1cf24:	mov	r3, #1
   1cf28:	bl	1f800 <flatcc_builder_create_vector@@Base>
   1cf2c:	sub	sp, fp, #16
   1cf30:	pop	{r4, r5, r6, r7, fp, pc}
   1cf34:	add	r0, r0, r1
   1cf38:	bx	lr
   1cf3c:	push	{r4, r5, fp, lr}
   1cf40:	add	fp, sp, #8
   1cf44:	sub	sp, sp, #8
   1cf48:	mov	r4, r1
   1cf4c:	mov	r5, r0
   1cf50:	mov	r0, r1
   1cf54:	bl	15370 <verify_monster@@Base+0xdcc>
   1cf58:	mov	r2, r0
   1cf5c:	mvn	r0, #-1073741824	; 0xc0000000
   1cf60:	mov	r1, #2
   1cf64:	str	r1, [sp]
   1cf68:	str	r0, [sp, #4]
   1cf6c:	mov	r0, r5
   1cf70:	mov	r1, r4
   1cf74:	mov	r3, #4
   1cf78:	bl	1f800 <flatcc_builder_create_vector@@Base>
   1cf7c:	sub	sp, fp, #8
   1cf80:	pop	{r4, r5, fp, pc}
   1cf84:	push	{r4, r5, fp, lr}
   1cf88:	add	fp, sp, #8
   1cf8c:	mov	r5, r1
   1cf90:	mov	r4, r0
   1cf94:	bl	1c91c <main@@Base+0x15e0>
   1cf98:	cmp	r0, #0
   1cf9c:	bne	1cfd4 <main@@Base+0x1c98>
   1cfa0:	mov	r0, r4
   1cfa4:	bl	1cfe8 <main@@Base+0x1cac>
   1cfa8:	cmp	r0, #0
   1cfac:	bne	1cfd4 <main@@Base+0x1c98>
   1cfb0:	mov	r0, r4
   1cfb4:	mov	r1, r5
   1cfb8:	bl	1d020 <main@@Base+0x1ce4>
   1cfbc:	cmp	r0, #0
   1cfc0:	bne	1cfd4 <main@@Base+0x1c98>
   1cfc4:	mov	r0, r4
   1cfc8:	bl	1d054 <main@@Base+0x1d18>
   1cfcc:	cmp	r0, #0
   1cfd0:	beq	1cfdc <main@@Base+0x1ca0>
   1cfd4:	mov	r0, #0
   1cfd8:	pop	{r4, r5, fp, pc}
   1cfdc:	mov	r0, r4
   1cfe0:	pop	{r4, r5, fp, lr}
   1cfe4:	b	1c94c <main@@Base+0x1610>
   1cfe8:	push	{fp, lr}
   1cfec:	mov	fp, sp
   1cff0:	mov	r1, #1
   1cff4:	mov	r2, #8
   1cff8:	mov	r3, #8
   1cffc:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1d000:	cmp	r0, #0
   1d004:	mvneq	r0, #0
   1d008:	popeq	{fp, pc}
   1d00c:	mvn	r2, #99	; 0x63
   1d010:	mvn	r3, #0
   1d014:	bl	1b9d8 <main@@Base+0x69c>
   1d018:	mov	r0, #0
   1d01c:	pop	{fp, pc}
   1d020:	push	{r4, r5, fp, lr}
   1d024:	add	fp, sp, #8
   1d028:	mvn	r4, #0
   1d02c:	cmp	r1, #0
   1d030:	beq	1d04c <main@@Base+0x1d10>
   1d034:	mov	r5, r1
   1d038:	mov	r1, #0
   1d03c:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   1d040:	cmp	r0, #0
   1d044:	strne	r5, [r0]
   1d048:	movne	r4, #0
   1d04c:	mov	r0, r4
   1d050:	pop	{r4, r5, fp, pc}
   1d054:	push	{fp, lr}
   1d058:	mov	fp, sp
   1d05c:	mov	r1, #2
   1d060:	mov	r2, #2
   1d064:	mov	r3, #2
   1d068:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1d06c:	cmp	r0, #0
   1d070:	mvneq	r0, #0
   1d074:	popeq	{fp, pc}
   1d078:	mov	r1, #2
   1d07c:	bl	1baa0 <main@@Base+0x764>
   1d080:	mov	r0, #0
   1d084:	pop	{fp, pc}
   1d088:	mov	r1, #4
   1d08c:	b	1ef94 <flatcc_builder_start_table@@Base>
   1d090:	push	{r4, sl, fp, lr}
   1d094:	add	fp, sp, #8
   1d098:	mov	r4, r0
   1d09c:	movw	r1, #21044	; 0x5234
   1d0a0:	movt	r1, #2
   1d0a4:	mov	r2, #0
   1d0a8:	bl	1f624 <flatcc_builder_check_required@@Base>
   1d0ac:	cmp	r0, #0
   1d0b0:	beq	1d0c0 <main@@Base+0x1d84>
   1d0b4:	mov	r0, r4
   1d0b8:	pop	{r4, sl, fp, lr}
   1d0bc:	b	1f6b4 <flatcc_builder_end_table@@Base>
   1d0c0:	movw	r0, #17288	; 0x4388
   1d0c4:	movt	r0, #2
   1d0c8:	movw	r1, #13105	; 0x3331
   1d0cc:	movt	r1, #2
   1d0d0:	movw	r3, #17498	; 0x445a
   1d0d4:	movt	r3, #2
   1d0d8:	mov	r2, #217	; 0xd9
   1d0dc:	bl	12f88 <__assert_fail@plt>
   1d0e0:	mov	r1, #4
   1d0e4:	b	1ef94 <flatcc_builder_start_table@@Base>
   1d0e8:	push	{r4, sl, fp, lr}
   1d0ec:	add	fp, sp, #8
   1d0f0:	mov	r4, r0
   1d0f4:	movw	r1, #21046	; 0x5236
   1d0f8:	movt	r1, #2
   1d0fc:	mov	r2, #0
   1d100:	bl	1f624 <flatcc_builder_check_required@@Base>
   1d104:	cmp	r0, #0
   1d108:	beq	1d118 <main@@Base+0x1ddc>
   1d10c:	mov	r0, r4
   1d110:	pop	{r4, sl, fp, lr}
   1d114:	b	1f6b4 <flatcc_builder_end_table@@Base>
   1d118:	movw	r0, #17611	; 0x44cb
   1d11c:	movt	r0, #2
   1d120:	movw	r1, #13105	; 0x3331
   1d124:	movt	r1, #2
   1d128:	movw	r3, #17761	; 0x4561
   1d12c:	movt	r3, #2
   1d130:	mov	r2, #223	; 0xdf
   1d134:	bl	12f88 <__assert_fail@plt>
   1d138:	push	{r4, sl, fp, lr}
   1d13c:	add	fp, sp, #8
   1d140:	sub	sp, sp, #8
   1d144:	mov	r4, r0
   1d148:	mov	r0, sp
   1d14c:	bl	1d164 <main@@Base+0x1e28>
   1d150:	ldm	sp, {r1, r2}
   1d154:	mov	r0, r4
   1d158:	sub	sp, fp, #8
   1d15c:	pop	{r4, sl, fp, lr}
   1d160:	b	16244 <gen_monster@@Base+0x740>
   1d164:	str	r1, [r0, #4]
   1d168:	mov	r1, #4
   1d16c:	strb	r1, [r0]
   1d170:	bx	lr
   1d174:	ldrb	r0, [r0]
   1d178:	b	1d17c <main@@Base+0x1e40>
   1d17c:	bx	lr
   1d180:	mov	r1, #10
   1d184:	b	1ef94 <flatcc_builder_start_table@@Base>
   1d188:	mov	r1, #4
   1d18c:	mov	r2, #4
   1d190:	b	1e594 <flatcc_builder_start_struct@@Base>
   1d194:	b	1ba30 <main@@Base+0x6f4>
   1d198:	b	1e670 <flatcc_builder_end_struct@@Base>
   1d19c:	mov	r1, #2
   1d1a0:	mov	r2, #2
   1d1a4:	b	1e594 <flatcc_builder_start_struct@@Base>
   1d1a8:	b	1baa0 <main@@Base+0x764>
   1d1ac:	b	1e670 <flatcc_builder_end_struct@@Base>
   1d1b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d1b4:	add	fp, sp, #24
   1d1b8:	tst	r1, #255	; 0xff
   1d1bc:	beq	1d210 <main@@Base+0x1ed4>
   1d1c0:	mov	r5, r2
   1d1c4:	mvn	r4, #0
   1d1c8:	cmp	r2, #0
   1d1cc:	beq	1d214 <main@@Base+0x1ed8>
   1d1d0:	mov	r6, r1
   1d1d4:	mov	r7, r0
   1d1d8:	mov	r1, #0
   1d1dc:	mov	r2, #1
   1d1e0:	mov	r3, #1
   1d1e4:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1d1e8:	cmp	r0, #0
   1d1ec:	beq	1d214 <main@@Base+0x1ed8>
   1d1f0:	mov	r8, r0
   1d1f4:	mov	r0, r7
   1d1f8:	mov	r1, #1
   1d1fc:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   1d200:	cmp	r0, #0
   1d204:	beq	1d214 <main@@Base+0x1ed8>
   1d208:	strb	r6, [r8]
   1d20c:	str	r5, [r0]
   1d210:	mov	r4, #0
   1d214:	mov	r0, r4
   1d218:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d21c:	push	{r4, r5, r6, r7, fp, lr}
   1d220:	add	fp, sp, #16
   1d224:	cmp	r2, #0
   1d228:	movne	r5, r1
   1d22c:	movne	r6, r0
   1d230:	uxtbne	r0, r1
   1d234:	cmpne	r0, #0
   1d238:	bne	1d240 <main@@Base+0x1f04>
   1d23c:	pop	{r4, r5, r6, r7, fp, pc}
   1d240:	mov	r4, r2
   1d244:	mov	r0, r6
   1d248:	mov	r1, #6
   1d24c:	mov	r2, #1
   1d250:	mov	r3, #1
   1d254:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1d258:	cmp	r0, #0
   1d25c:	popeq	{r4, r5, r6, r7, fp, pc}
   1d260:	mov	r7, r0
   1d264:	mov	r0, r6
   1d268:	mov	r1, #7
   1d26c:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   1d270:	cmp	r0, #0
   1d274:	strbne	r5, [r7]
   1d278:	strne	r4, [r0]
   1d27c:	pop	{r4, r5, r6, r7, fp, pc}
   1d280:	mov	r1, #1
   1d284:	b	1ef94 <flatcc_builder_start_table@@Base>
   1d288:	push	{r4, r5, fp, lr}
   1d28c:	add	fp, sp, #8
   1d290:	cmp	r1, #0
   1d294:	moveq	r4, #0
   1d298:	moveq	r0, r4
   1d29c:	popeq	{r4, r5, fp, pc}
   1d2a0:	mov	r5, r1
   1d2a4:	mov	r4, #0
   1d2a8:	mov	r1, #0
   1d2ac:	mov	r2, #4
   1d2b0:	mov	r3, #4
   1d2b4:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1d2b8:	cmp	r0, #0
   1d2bc:	mvneq	r4, #0
   1d2c0:	movne	r1, r5
   1d2c4:	blne	1ba30 <main@@Base+0x6f4>
   1d2c8:	mov	r0, r4
   1d2cc:	pop	{r4, r5, fp, pc}
   1d2d0:	push	{r4, sl, fp, lr}
   1d2d4:	add	fp, sp, #8
   1d2d8:	mov	r4, r0
   1d2dc:	movw	r1, #21048	; 0x5238
   1d2e0:	movt	r1, #2
   1d2e4:	mov	r2, #0
   1d2e8:	bl	1f624 <flatcc_builder_check_required@@Base>
   1d2ec:	cmp	r0, #0
   1d2f0:	beq	1d300 <main@@Base+0x1fc4>
   1d2f4:	mov	r0, r4
   1d2f8:	pop	{r4, sl, fp, lr}
   1d2fc:	b	1f6b4 <flatcc_builder_end_table@@Base>
   1d300:	movw	r0, #18692	; 0x4904
   1d304:	movt	r0, #2
   1d308:	movw	r1, #13105	; 0x3331
   1d30c:	movt	r1, #2
   1d310:	movw	r3, #18836	; 0x4994
   1d314:	movt	r3, #2
   1d318:	mov	r2, #239	; 0xef
   1d31c:	bl	12f88 <__assert_fail@plt>
   1d320:	push	{r4, r5, r6, r7, fp, lr}
   1d324:	add	fp, sp, #16
   1d328:	cmp	r2, #0
   1d32c:	movne	r5, r1
   1d330:	movne	r6, r0
   1d334:	uxtbne	r0, r1
   1d338:	cmpne	r0, #0
   1d33c:	bne	1d344 <main@@Base+0x2008>
   1d340:	pop	{r4, r5, r6, r7, fp, pc}
   1d344:	mov	r4, r2
   1d348:	mov	r0, r6
   1d34c:	mov	r1, #2
   1d350:	mov	r2, #1
   1d354:	mov	r3, #1
   1d358:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1d35c:	cmp	r0, #0
   1d360:	popeq	{r4, r5, r6, r7, fp, pc}
   1d364:	mov	r7, r0
   1d368:	mov	r0, r6
   1d36c:	mov	r1, #3
   1d370:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   1d374:	cmp	r0, #0
   1d378:	strbne	r5, [r7]
   1d37c:	strne	r4, [r0]
   1d380:	pop	{r4, r5, r6, r7, fp, pc}
   1d384:	str	r1, [r0, #4]
   1d388:	mov	r1, #2
   1d38c:	strb	r1, [r0]
   1d390:	bx	lr
   1d394:	push	{r4, sl, fp, lr}
   1d398:	add	fp, sp, #8
   1d39c:	sub	sp, sp, #8
   1d3a0:	mov	r4, r0
   1d3a4:	mov	r0, sp
   1d3a8:	bl	198fc <test_mixed_type_union@@Base+0x8b0>
   1d3ac:	ldm	sp, {r1, r2}
   1d3b0:	mov	r0, r4
   1d3b4:	sub	sp, fp, #8
   1d3b8:	pop	{r4, sl, fp, lr}
   1d3bc:	b	1d3c0 <main@@Base+0x2084>
   1d3c0:	push	{r4, r5, r6, r7, fp, lr}
   1d3c4:	add	fp, sp, #16
   1d3c8:	cmp	r2, #0
   1d3cc:	movne	r5, r1
   1d3d0:	movne	r6, r0
   1d3d4:	uxtbne	r0, r1
   1d3d8:	cmpne	r0, #0
   1d3dc:	bne	1d3e4 <main@@Base+0x20a8>
   1d3e0:	pop	{r4, r5, r6, r7, fp, pc}
   1d3e4:	mov	r4, r2
   1d3e8:	mov	r0, r6
   1d3ec:	mov	r1, #4
   1d3f0:	mov	r2, #1
   1d3f4:	mov	r3, #1
   1d3f8:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1d3fc:	cmp	r0, #0
   1d400:	popeq	{r4, r5, r6, r7, fp, pc}
   1d404:	mov	r7, r0
   1d408:	mov	r0, r6
   1d40c:	mov	r1, #5
   1d410:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   1d414:	cmp	r0, #0
   1d418:	strbne	r5, [r7]
   1d41c:	strne	r4, [r0]
   1d420:	pop	{r4, r5, r6, r7, fp, pc}
   1d424:	str	r1, [r0, #4]
   1d428:	mov	r1, #9
   1d42c:	strb	r1, [r0]
   1d430:	bx	lr
   1d434:	b	1e670 <flatcc_builder_end_struct@@Base>
   1d438:	push	{r4, r5, r6, sl, fp, lr}
   1d43c:	add	fp, sp, #16
   1d440:	cmp	r1, #0
   1d444:	movne	r4, r2
   1d448:	cmpne	r2, #0
   1d44c:	bne	1d454 <main@@Base+0x2118>
   1d450:	pop	{r4, r5, r6, sl, fp, pc}
   1d454:	mov	r6, r1
   1d458:	mov	r5, r0
   1d45c:	mov	r1, #8
   1d460:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   1d464:	cmp	r0, #0
   1d468:	popeq	{r4, r5, r6, sl, fp, pc}
   1d46c:	str	r6, [r0]
   1d470:	mov	r0, r5
   1d474:	mov	r1, #9
   1d478:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   1d47c:	cmp	r0, #0
   1d480:	strne	r4, [r0]
   1d484:	pop	{r4, r5, r6, sl, fp, pc}
   1d488:	push	{r4, sl, fp, lr}
   1d48c:	add	fp, sp, #8
   1d490:	mov	r4, r0
   1d494:	movw	r1, #21050	; 0x523a
   1d498:	movt	r1, #2
   1d49c:	mov	r2, #0
   1d4a0:	bl	1f624 <flatcc_builder_check_required@@Base>
   1d4a4:	cmp	r0, #0
   1d4a8:	beq	1d4b8 <main@@Base+0x217c>
   1d4ac:	mov	r0, r4
   1d4b0:	pop	{r4, sl, fp, lr}
   1d4b4:	b	1f6b4 <flatcc_builder_end_table@@Base>
   1d4b8:	movw	r0, #18905	; 0x49d9
   1d4bc:	movt	r0, #2
   1d4c0:	movw	r1, #13105	; 0x3331
   1d4c4:	movt	r1, #2
   1d4c8:	movw	r3, #19040	; 0x4a60
   1d4cc:	movt	r3, #2
   1d4d0:	mov	r2, #241	; 0xf1
   1d4d4:	bl	12f88 <__assert_fail@plt>
   1d4d8:	push	{r4, r5, fp, lr}
   1d4dc:	add	fp, sp, #8
   1d4e0:	cmp	r0, #0
   1d4e4:	beq	1d528 <main@@Base+0x21ec>
   1d4e8:	mov	r4, r0
   1d4ec:	bl	1b5d8 <main@@Base+0x29c>
   1d4f0:	sub	r5, r4, r0
   1d4f4:	mov	r0, r5
   1d4f8:	bl	1b5e0 <main@@Base+0x2a4>
   1d4fc:	cmp	r0, #6
   1d500:	bcc	1d520 <main@@Base+0x21e4>
   1d504:	add	r0, r5, #4
   1d508:	bl	1b5e0 <main@@Base+0x2a4>
   1d50c:	cmp	r0, #0
   1d510:	beq	1d520 <main@@Base+0x21e4>
   1d514:	add	r0, r4, r0
   1d518:	pop	{r4, r5, fp, lr}
   1d51c:	b	1c7ac <main@@Base+0x1470>
   1d520:	mov	r0, #0
   1d524:	pop	{r4, r5, fp, pc}
   1d528:	movw	r0, #12494	; 0x30ce
   1d52c:	movt	r0, #2
   1d530:	movw	r1, #12532	; 0x30f4
   1d534:	movt	r1, #2
   1d538:	movw	r3, #19233	; 0x4b21
   1d53c:	movt	r3, #2
   1d540:	movw	r2, #819	; 0x333
   1d544:	bl	12f88 <__assert_fail@plt>
   1d548:	push	{r4, r5, r6, sl, fp, lr}
   1d54c:	add	fp, sp, #16
   1d550:	cmp	r0, #0
   1d554:	beq	1d5a0 <main@@Base+0x2264>
   1d558:	mov	r4, r0
   1d55c:	bl	1b5d8 <main@@Base+0x29c>
   1d560:	sub	r6, r4, r0
   1d564:	mov	r0, r6
   1d568:	bl	1b5e0 <main@@Base+0x2a4>
   1d56c:	mov	r5, #0
   1d570:	cmp	r0, #8
   1d574:	bcc	1d598 <main@@Base+0x225c>
   1d578:	add	r0, r6, #6
   1d57c:	bl	1b5e0 <main@@Base+0x2a4>
   1d580:	cmp	r0, #0
   1d584:	beq	1d598 <main@@Base+0x225c>
   1d588:	add	r4, r4, r0
   1d58c:	mov	r0, r4
   1d590:	bl	1b5cc <main@@Base+0x290>
   1d594:	add	r5, r4, r0
   1d598:	mov	r0, r5
   1d59c:	pop	{r4, r5, r6, sl, fp, pc}
   1d5a0:	movw	r0, #12494	; 0x30ce
   1d5a4:	movt	r0, #2
   1d5a8:	movw	r1, #12532	; 0x30f4
   1d5ac:	movt	r1, #2
   1d5b0:	movw	r3, #19321	; 0x4b79
   1d5b4:	movt	r3, #2
   1d5b8:	movw	r2, #819	; 0x333
   1d5bc:	bl	12f88 <__assert_fail@plt>
   1d5c0:	push	{r4, r5, r6, sl, fp, lr}
   1d5c4:	add	fp, sp, #16
   1d5c8:	cmp	r0, #0
   1d5cc:	beq	1d61c <main@@Base+0x22e0>
   1d5d0:	mov	r4, r0
   1d5d4:	bl	1b5d8 <main@@Base+0x29c>
   1d5d8:	sub	r6, r4, r0
   1d5dc:	mov	r0, r6
   1d5e0:	bl	1b5e0 <main@@Base+0x2a4>
   1d5e4:	mov	r5, #0
   1d5e8:	cmp	r0, #24
   1d5ec:	bcc	1d614 <main@@Base+0x22d8>
   1d5f0:	add	r0, r6, #22
   1d5f4:	bl	1b5e0 <main@@Base+0x2a4>
   1d5f8:	cmp	r0, #0
   1d5fc:	beq	1d614 <main@@Base+0x22d8>
   1d600:	add	r4, r4, r0
   1d604:	mov	r0, r4
   1d608:	bl	1b5cc <main@@Base+0x290>
   1d60c:	add	r0, r4, r0
   1d610:	add	r5, r0, #4
   1d614:	mov	r0, r5
   1d618:	pop	{r4, r5, r6, sl, fp, pc}
   1d61c:	movw	r0, #12494	; 0x30ce
   1d620:	movt	r0, #2
   1d624:	movw	r1, #12532	; 0x30f4
   1d628:	movt	r1, #2
   1d62c:	movw	r3, #20000	; 0x4e20
   1d630:	movt	r3, #2
   1d634:	movw	r2, #823	; 0x337
   1d638:	bl	12f88 <__assert_fail@plt>
   1d63c:	push	{r4, sl, fp, lr}
   1d640:	add	fp, sp, #8
   1d644:	mov	r4, r0
   1d648:	bl	1c78c <main@@Base+0x1450>
   1d64c:	cmp	r0, #3
   1d650:	bls	1d66c <main@@Base+0x2330>
   1d654:	add	r4, r4, #12
   1d658:	mov	r0, r4
   1d65c:	bl	1b5cc <main@@Base+0x290>
   1d660:	add	r0, r4, r0
   1d664:	add	r0, r0, #4
   1d668:	pop	{r4, sl, fp, pc}
   1d66c:	movw	r0, #15007	; 0x3a9f
   1d670:	movt	r0, #2
   1d674:	movw	r1, #15062	; 0x3ad6
   1d678:	movt	r1, #2
   1d67c:	movw	r3, #20247	; 0x4f17
   1d680:	movt	r3, #2
   1d684:	mov	r2, #119	; 0x77
   1d688:	bl	12f88 <__assert_fail@plt>
   1d68c:	push	{r4, sl, fp, lr}
   1d690:	add	fp, sp, #8
   1d694:	cmp	r1, #0
   1d698:	popeq	{r4, sl, fp, pc}
   1d69c:	mov	r4, r1
   1d6a0:	mov	r1, #13
   1d6a4:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   1d6a8:	cmp	r0, #0
   1d6ac:	strne	r4, [r0]
   1d6b0:	pop	{r4, sl, fp, pc}
   1d6b4:	push	{r4, r5, r6, sl, fp, lr}
   1d6b8:	add	fp, sp, #16
   1d6bc:	cmp	r0, #0
   1d6c0:	beq	1d710 <main@@Base+0x23d4>
   1d6c4:	mov	r4, r0
   1d6c8:	bl	1b5d8 <main@@Base+0x29c>
   1d6cc:	sub	r6, r4, r0
   1d6d0:	mov	r0, r6
   1d6d4:	bl	1b5e0 <main@@Base+0x2a4>
   1d6d8:	mov	r5, #0
   1d6dc:	cmp	r0, #32
   1d6e0:	bcc	1d708 <main@@Base+0x23cc>
   1d6e4:	add	r0, r6, #30
   1d6e8:	bl	1b5e0 <main@@Base+0x2a4>
   1d6ec:	cmp	r0, #0
   1d6f0:	beq	1d708 <main@@Base+0x23cc>
   1d6f4:	add	r4, r4, r0
   1d6f8:	mov	r0, r4
   1d6fc:	bl	1b5cc <main@@Base+0x290>
   1d700:	add	r0, r4, r0
   1d704:	add	r5, r0, #4
   1d708:	mov	r0, r5
   1d70c:	pop	{r4, r5, r6, sl, fp, pc}
   1d710:	movw	r0, #12494	; 0x30ce
   1d714:	movt	r0, #2
   1d718:	movw	r1, #12532	; 0x30f4
   1d71c:	movt	r1, #2
   1d720:	movw	r3, #20417	; 0x4fc1
   1d724:	movt	r3, #2
   1d728:	mov	r2, #720	; 0x2d0
   1d72c:	bl	12f88 <__assert_fail@plt>
   1d730:	push	{r4, sl, fp, lr}
   1d734:	add	fp, sp, #8
   1d738:	mov	r4, r0
   1d73c:	bl	1d75c <main@@Base+0x2420>
   1d740:	cmp	r0, #0
   1d744:	moveq	r0, #0
   1d748:	popeq	{r4, sl, fp, pc}
   1d74c:	bl	1d768 <main@@Base+0x242c>
   1d750:	mov	r0, r4
   1d754:	pop	{r4, sl, fp, lr}
   1d758:	b	1d7c0 <main@@Base+0x2484>
   1d75c:	mov	r1, #32
   1d760:	mov	r2, #16
   1d764:	b	1e594 <flatcc_builder_start_struct@@Base>
   1d768:	push	{r4, sl, fp, lr}
   1d76c:	add	fp, sp, #8
   1d770:	mov	r4, r0
   1d774:	vmov.f32	s0, #112	; 0x3f800000  1.0
   1d778:	bl	1ba60 <main@@Base+0x724>
   1d77c:	vmov.f32	s0, #0	; 0x40000000  2.0
   1d780:	add	r0, r4, #4
   1d784:	bl	1ba60 <main@@Base+0x724>
   1d788:	vmov.f32	s0, #8	; 0x40400000  3.0
   1d78c:	add	r0, r4, #8
   1d790:	bl	1ba60 <main@@Base+0x724>
   1d794:	vldr	d0, [pc, #28]	; 1d7b8 <main@@Base+0x247c>
   1d798:	add	r0, r4, #16
   1d79c:	bl	1ba14 <main@@Base+0x6d8>
   1d7a0:	mov	r0, #8
   1d7a4:	strb	r0, [r4, #24]
   1d7a8:	add	r0, r4, #26
   1d7ac:	pop	{r4, sl, fp, lr}
   1d7b0:	b	1d7c4 <main@@Base+0x2488>
   1d7b4:	nop	{0}
   1d7b8:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1d7bc:	andsmi	ip, r0, ip, asr #25
   1d7c0:	b	1e670 <flatcc_builder_end_struct@@Base>
   1d7c4:	push	{r4, sl, fp, lr}
   1d7c8:	add	fp, sp, #8
   1d7cc:	mov	r4, r0
   1d7d0:	movw	r1, #2730	; 0xaaa
   1d7d4:	bl	1ba7c <main@@Base+0x740>
   1d7d8:	mov	r0, #239	; 0xef
   1d7dc:	strb	r0, [r4, #2]
   1d7e0:	pop	{r4, sl, fp, pc}

0001d7e4 <flatcc_builder_default_alloc@@Base>:
   1d7e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d7e8:	add	fp, sp, #24
   1d7ec:	mov	r4, r1
   1d7f0:	cmp	r2, #0
   1d7f4:	beq	1d83c <flatcc_builder_default_alloc@@Base+0x58>
   1d7f8:	mov	r8, r3
   1d7fc:	ldr	r0, [fp, #8]
   1d800:	sub	r1, r0, #1
   1d804:	cmp	r1, #6
   1d808:	bhi	1d868 <flatcc_builder_default_alloc@@Base+0x84>
   1d80c:	mov	r0, #256	; 0x100
   1d810:	add	r3, pc, #0
   1d814:	ldr	pc, [r3, r1, lsl #2]
   1d818:	andeq	sp, r1, ip, ror r8
   1d81c:	andeq	sp, r1, r8, ror #16
   1d820:	andeq	sp, r1, r8, ror #16
   1d824:	andeq	sp, r1, r4, lsr r8
   1d828:	andeq	sp, r1, r0, ror r8
   1d82c:	andeq	sp, r1, r8, ror #16
   1d830:	andeq	sp, r1, r8, ror r8
   1d834:	mov	r0, #288	; 0x120
   1d838:	b	1d87c <flatcc_builder_default_alloc@@Base+0x98>
   1d83c:	ldr	r0, [r4]
   1d840:	cmp	r0, #0
   1d844:	moveq	r6, #0
   1d848:	moveq	r0, r6
   1d84c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d850:	bl	12ea4 <free@plt>
   1d854:	mov	r6, #0
   1d858:	str	r6, [r4]
   1d85c:	str	r6, [r4, #4]
   1d860:	mov	r0, r6
   1d864:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d868:	mov	r0, #32
   1d86c:	b	1d87c <flatcc_builder_default_alloc@@Base+0x98>
   1d870:	mov	r0, r2
   1d874:	b	1d87c <flatcc_builder_default_alloc@@Base+0x98>
   1d878:	mov	r0, #64	; 0x40
   1d87c:	mov	r7, r0
   1d880:	lsl	r0, r0, #1
   1d884:	cmp	r7, r2
   1d888:	bcc	1d87c <flatcc_builder_default_alloc@@Base+0x98>
   1d88c:	ldr	r0, [r4, #4]
   1d890:	mov	r6, #0
   1d894:	cmp	r0, r2
   1d898:	lsrcs	r0, r0, #1
   1d89c:	cmpcs	r0, r7
   1d8a0:	bcs	1d8d8 <flatcc_builder_default_alloc@@Base+0xf4>
   1d8a4:	ldr	r0, [r4]
   1d8a8:	mov	r1, r7
   1d8ac:	bl	12ec8 <realloc@plt>
   1d8b0:	cmp	r0, #0
   1d8b4:	mvneq	r6, #0
   1d8b8:	moveq	r0, r6
   1d8bc:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d8c0:	mov	r5, r0
   1d8c4:	cmp	r8, #0
   1d8c8:	ldrne	r1, [r4, #4]
   1d8cc:	cmpne	r7, r1
   1d8d0:	bhi	1d8e0 <flatcc_builder_default_alloc@@Base+0xfc>
   1d8d4:	stm	r4, {r5, r7}
   1d8d8:	mov	r0, r6
   1d8dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d8e0:	add	r0, r5, r1
   1d8e4:	sub	r2, r7, r1
   1d8e8:	mov	r1, #0
   1d8ec:	bl	12f40 <memset@plt>
   1d8f0:	b	1d8d4 <flatcc_builder_default_alloc@@Base+0xf0>

0001d8f4 <flatcc_builder_flush_vtable_cache@@Base>:
   1d8f4:	push	{r4, r5, fp, lr}
   1d8f8:	add	fp, sp, #8
   1d8fc:	mov	r4, r0
   1d900:	ldr	r0, [r0, #116]	; 0x74
   1d904:	cmp	r0, #0
   1d908:	popeq	{r4, r5, fp, pc}
   1d90c:	ldr	r0, [r4, #92]	; 0x5c
   1d910:	ldr	r2, [r4, #96]	; 0x60
   1d914:	mov	r5, #0
   1d918:	mov	r1, #0
   1d91c:	bl	12f40 <memset@plt>
   1d920:	mov	r0, #16
   1d924:	str	r5, [r4, #120]	; 0x78
   1d928:	str	r0, [r4, #124]	; 0x7c
   1d92c:	pop	{r4, r5, fp, pc}

0001d930 <flatcc_builder_custom_init@@Base>:
   1d930:	push	{r4, r5, r6, r7, fp, lr}
   1d934:	add	fp, sp, #16
   1d938:	mov	r5, r3
   1d93c:	mov	r6, r2
   1d940:	mov	r7, r1
   1d944:	mov	r4, r0
   1d948:	mov	r1, #0
   1d94c:	mov	r2, #232	; 0xe8
   1d950:	bl	12f40 <memset@plt>
   1d954:	ldr	r0, [fp, #8]
   1d958:	cmp	r7, #0
   1d95c:	bne	1d974 <flatcc_builder_custom_init@@Base+0x44>
   1d960:	mov	r1, #1
   1d964:	str	r1, [r4, #184]	; 0xb8
   1d968:	add	r6, r4, #188	; 0xbc
   1d96c:	movw	r7, #3336	; 0xd08
   1d970:	movt	r7, #2
   1d974:	movw	r1, #55268	; 0xd7e4
   1d978:	movt	r1, #1
   1d97c:	cmp	r5, #0
   1d980:	movne	r1, r5
   1d984:	str	r6, [r4, #36]	; 0x24
   1d988:	str	r0, [r4, #40]	; 0x28
   1d98c:	str	r7, [r4, #44]	; 0x2c
   1d990:	str	r1, [r4, #48]	; 0x30
   1d994:	mov	r0, #0
   1d998:	pop	{r4, r5, r6, r7, fp, pc}

0001d99c <flatcc_builder_init@@Base>:
   1d99c:	push	{fp, lr}
   1d9a0:	mov	fp, sp
   1d9a4:	sub	sp, sp, #8
   1d9a8:	mov	r1, #0
   1d9ac:	str	r1, [sp]
   1d9b0:	mov	r1, #0
   1d9b4:	mov	r2, #0
   1d9b8:	mov	r3, #0
   1d9bc:	bl	1d930 <flatcc_builder_custom_init@@Base>
   1d9c0:	mov	r0, #0
   1d9c4:	mov	sp, fp
   1d9c8:	pop	{fp, pc}

0001d9cc <flatcc_builder_custom_reset@@Base>:
   1d9cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d9d0:	add	fp, sp, #24
   1d9d4:	sub	sp, sp, #8
   1d9d8:	mov	r9, r2
   1d9dc:	mov	r8, r1
   1d9e0:	mov	r4, r0
   1d9e4:	add	r7, r0, #52	; 0x34
   1d9e8:	mov	r5, #0
   1d9ec:	ldr	r0, [r7]
   1d9f0:	cmp	r0, #0
   1d9f4:	beq	1da38 <flatcc_builder_custom_reset@@Base+0x6c>
   1d9f8:	cmp	r9, #0
   1d9fc:	cmpne	r5, #5
   1da00:	beq	1da28 <flatcc_builder_custom_reset@@Base+0x5c>
   1da04:	ldr	r0, [r4, #40]	; 0x28
   1da08:	ldr	r6, [r4, #48]	; 0x30
   1da0c:	str	r5, [sp]
   1da10:	mov	r1, r7
   1da14:	mov	r2, #1
   1da18:	mov	r3, #1
   1da1c:	blx	r6
   1da20:	cmp	r0, #0
   1da24:	bne	1dad8 <flatcc_builder_custom_reset@@Base+0x10c>
   1da28:	ldm	r7, {r0, r2}
   1da2c:	mov	r1, #0
   1da30:	bl	12f40 <memset@plt>
   1da34:	b	1da44 <flatcc_builder_custom_reset@@Base+0x78>
   1da38:	ldr	r0, [r7, #4]
   1da3c:	cmp	r0, #0
   1da40:	bne	1dae8 <flatcc_builder_custom_reset@@Base+0x11c>
   1da44:	add	r7, r7, #8
   1da48:	add	r5, r5, #1
   1da4c:	cmp	r5, #8
   1da50:	bcc	1d9ec <flatcc_builder_custom_reset@@Base+0x20>
   1da54:	mov	r0, #0
   1da58:	str	r0, [r4, #120]	; 0x78
   1da5c:	ldr	r1, [r4, #124]	; 0x7c
   1da60:	cmp	r1, #0
   1da64:	movne	r1, #16
   1da68:	strne	r1, [r4, #124]	; 0x7c
   1da6c:	vmov.i32	q8, #0	; 0x00000000
   1da70:	strh	r0, [r4, #128]	; 0x80
   1da74:	str	r0, [r4, #136]	; 0x88
   1da78:	str	r0, [r4, #140]	; 0x8c
   1da7c:	str	r0, [r4, #32]
   1da80:	add	r1, r4, #148	; 0x94
   1da84:	vst1.32	{d16-d17}, [r1]
   1da88:	ldr	r1, [r4, #52]	; 0x34
   1da8c:	ldr	r2, [r4, #60]	; 0x3c
   1da90:	ldr	r3, [r4, #76]	; 0x4c
   1da94:	str	r2, [r4, #16]
   1da98:	str	r0, [r4, #20]
   1da9c:	str	r0, [r4, #24]
   1daa0:	str	r3, [r4]
   1daa4:	str	r1, [r4, #4]
   1daa8:	cmp	r8, #0
   1daac:	movne	r0, #0
   1dab0:	strne	r0, [r4, #172]	; 0xac
   1dab4:	strne	r0, [r4, #176]	; 0xb0
   1dab8:	strne	r0, [r4, #180]	; 0xb4
   1dabc:	ldr	r0, [r4, #184]	; 0xb8
   1dac0:	mov	r5, #0
   1dac4:	cmp	r0, #0
   1dac8:	beq	1dadc <flatcc_builder_custom_reset@@Base+0x110>
   1dacc:	add	r0, r4, #188	; 0xbc
   1dad0:	bl	20be8 <flatcc_emitter_reset@@Base>
   1dad4:	b	1dadc <flatcc_builder_custom_reset@@Base+0x110>
   1dad8:	mvn	r5, #0
   1dadc:	mov	r0, r5
   1dae0:	sub	sp, fp, #24
   1dae4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1dae8:	movw	r0, #29680	; 0x73f0
   1daec:	movt	r0, #2
   1daf0:	movw	r1, #29698	; 0x7402
   1daf4:	movt	r1, #2
   1daf8:	movw	r3, #29768	; 0x7448
   1dafc:	movt	r3, #2
   1db00:	movw	r2, #434	; 0x1b2
   1db04:	bl	12f88 <__assert_fail@plt>

0001db08 <flatcc_builder_reset@@Base>:
   1db08:	mov	r1, #0
   1db0c:	mov	r2, #0
   1db10:	b	1d9cc <flatcc_builder_custom_reset@@Base>

0001db14 <flatcc_builder_clear@@Base>:
   1db14:	push	{r4, r5, r6, r7, fp, lr}
   1db18:	add	fp, sp, #16
   1db1c:	sub	sp, sp, #8
   1db20:	mov	r7, r0
   1db24:	add	r5, r0, #52	; 0x34
   1db28:	mov	r6, #0
   1db2c:	ldr	r0, [r7, #40]	; 0x28
   1db30:	ldr	r4, [r7, #48]	; 0x30
   1db34:	str	r6, [sp]
   1db38:	mov	r1, r5
   1db3c:	mov	r2, #0
   1db40:	mov	r3, #0
   1db44:	blx	r4
   1db48:	add	r5, r5, #8
   1db4c:	add	r6, r6, #1
   1db50:	cmp	r6, #8
   1db54:	bne	1db2c <flatcc_builder_clear@@Base+0x18>
   1db58:	ldr	r0, [r7, #184]	; 0xb8
   1db5c:	cmp	r0, #0
   1db60:	beq	1db6c <flatcc_builder_clear@@Base+0x58>
   1db64:	add	r0, r7, #188	; 0xbc
   1db68:	bl	20ca4 <flatcc_emitter_clear@@Base>
   1db6c:	mov	r0, r7
   1db70:	mov	r1, #0
   1db74:	mov	r2, #232	; 0xe8
   1db78:	sub	sp, fp, #16
   1db7c:	pop	{r4, r5, r6, r7, fp, lr}
   1db80:	b	12f40 <memset@plt>

0001db84 <flatcc_builder_enter_user_frame_ptr@@Base>:
   1db84:	push	{r4, r5, r6, r7, fp, lr}
   1db88:	add	fp, sp, #16
   1db8c:	sub	sp, sp, #8
   1db90:	mov	r4, r0
   1db94:	ldr	r2, [r0, #228]	; 0xe4
   1db98:	mov	r7, #0
   1db9c:	str	r7, [sp]
   1dba0:	add	r0, r1, #7
   1dba4:	bic	r5, r0, #3
   1dba8:	mov	r0, r4
   1dbac:	mov	r1, #7
   1dbb0:	mov	r3, r5
   1dbb4:	bl	1dbfc <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   1dbb8:	cmp	r0, #0
   1dbbc:	beq	1dbf0 <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   1dbc0:	mov	r6, r0
   1dbc4:	mov	r1, #0
   1dbc8:	mov	r2, r5
   1dbcc:	bl	12f40 <memset@plt>
   1dbd0:	ldr	r0, [r4, #224]	; 0xe0
   1dbd4:	str	r0, [r6], #4
   1dbd8:	ldr	r0, [r4, #228]	; 0xe4
   1dbdc:	add	r1, r0, #4
   1dbe0:	add	r0, r0, r5
   1dbe4:	str	r1, [r4, #224]	; 0xe0
   1dbe8:	str	r0, [r4, #228]	; 0xe4
   1dbec:	mov	r7, r6
   1dbf0:	mov	r0, r7
   1dbf4:	sub	sp, fp, #16
   1dbf8:	pop	{r4, r5, r6, r7, fp, pc}
   1dbfc:	push	{r4, r5, fp, lr}
   1dc00:	add	fp, sp, #8
   1dc04:	sub	sp, sp, #8
   1dc08:	mov	r4, r2
   1dc0c:	add	r2, r3, r2
   1dc10:	add	r3, r0, r1, lsl #3
   1dc14:	add	r5, r3, #52	; 0x34
   1dc18:	ldr	r3, [r3, #56]	; 0x38
   1dc1c:	cmp	r2, r3
   1dc20:	bls	1dc48 <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   1dc24:	ldr	r3, [fp, #8]
   1dc28:	ldr	ip, [r0, #40]	; 0x28
   1dc2c:	ldr	lr, [r0, #48]	; 0x30
   1dc30:	str	r1, [sp]
   1dc34:	mov	r0, ip
   1dc38:	mov	r1, r5
   1dc3c:	blx	lr
   1dc40:	cmp	r0, #0
   1dc44:	bne	1dc58 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   1dc48:	ldr	r0, [r5]
   1dc4c:	add	r0, r0, r4
   1dc50:	sub	sp, fp, #8
   1dc54:	pop	{r4, r5, fp, pc}
   1dc58:	movw	r0, #34216	; 0x85a8
   1dc5c:	movt	r0, #2
   1dc60:	movw	r1, #29698	; 0x7402
   1dc64:	movt	r1, #2
   1dc68:	movw	r3, #33762	; 0x83e2
   1dc6c:	movt	r3, #2
   1dc70:	mov	r2, #308	; 0x134
   1dc74:	bl	12f88 <__assert_fail@plt>

0001dc78 <flatcc_builder_enter_user_frame@@Base>:
   1dc78:	push	{r4, r5, r6, r7, fp, lr}
   1dc7c:	add	fp, sp, #16
   1dc80:	sub	sp, sp, #8
   1dc84:	mov	r4, r0
   1dc88:	ldr	r2, [r0, #228]	; 0xe4
   1dc8c:	mov	r6, #0
   1dc90:	str	r6, [sp]
   1dc94:	add	r0, r1, #7
   1dc98:	bic	r5, r0, #3
   1dc9c:	mov	r0, r4
   1dca0:	mov	r1, #7
   1dca4:	mov	r3, r5
   1dca8:	bl	1dbfc <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   1dcac:	cmp	r0, #0
   1dcb0:	beq	1dce0 <flatcc_builder_enter_user_frame@@Base+0x68>
   1dcb4:	mov	r7, r0
   1dcb8:	mov	r1, #0
   1dcbc:	mov	r2, r5
   1dcc0:	bl	12f40 <memset@plt>
   1dcc4:	ldr	r0, [r4, #224]	; 0xe0
   1dcc8:	str	r0, [r7]
   1dccc:	ldr	r0, [r4, #228]	; 0xe4
   1dcd0:	add	r6, r0, #4
   1dcd4:	add	r0, r0, r5
   1dcd8:	str	r6, [r4, #224]	; 0xe0
   1dcdc:	str	r0, [r4, #228]	; 0xe4
   1dce0:	mov	r0, r6
   1dce4:	sub	sp, fp, #16
   1dce8:	pop	{r4, r5, r6, r7, fp, pc}

0001dcec <flatcc_builder_exit_user_frame@@Base>:
   1dcec:	ldr	r1, [r0, #224]	; 0xe0
   1dcf0:	cmp	r1, #0
   1dcf4:	subne	r2, r1, #4
   1dcf8:	strne	r2, [r0, #228]	; 0xe4
   1dcfc:	ldrne	r2, [r0, #108]	; 0x6c
   1dd00:	addne	r1, r2, r1
   1dd04:	ldrne	r1, [r1, #-4]
   1dd08:	strne	r1, [r0, #224]	; 0xe0
   1dd0c:	movne	r0, r1
   1dd10:	bxne	lr
   1dd14:	push	{fp, lr}
   1dd18:	mov	fp, sp
   1dd1c:	movw	r0, #29830	; 0x7486
   1dd20:	movt	r0, #2
   1dd24:	movw	r1, #29698	; 0x7402
   1dd28:	movt	r1, #2
   1dd2c:	movw	r3, #29855	; 0x749f
   1dd30:	movt	r3, #2
   1dd34:	movw	r2, #542	; 0x21e
   1dd38:	bl	12f88 <__assert_fail@plt>

0001dd3c <flatcc_builder_exit_user_frame_at@@Base>:
   1dd3c:	ldr	r2, [r0, #224]	; 0xe0
   1dd40:	cmp	r2, r1
   1dd44:	bcc	1dd50 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   1dd48:	str	r1, [r0, #224]	; 0xe0
   1dd4c:	b	1dcec <flatcc_builder_exit_user_frame@@Base>
   1dd50:	push	{fp, lr}
   1dd54:	mov	fp, sp
   1dd58:	movw	r0, #29913	; 0x74d9
   1dd5c:	movt	r0, #2
   1dd60:	movw	r1, #29698	; 0x7402
   1dd64:	movt	r1, #2
   1dd68:	movw	r3, #29944	; 0x74f8
   1dd6c:	movt	r3, #2
   1dd70:	movw	r2, #551	; 0x227
   1dd74:	bl	12f88 <__assert_fail@plt>

0001dd78 <flatcc_builder_get_current_user_frame@@Base>:
   1dd78:	ldr	r0, [r0, #224]	; 0xe0
   1dd7c:	bx	lr

0001dd80 <flatcc_builder_get_user_frame_ptr@@Base>:
   1dd80:	ldr	r0, [r0, #108]	; 0x6c
   1dd84:	add	r0, r0, r1
   1dd88:	bx	lr

0001dd8c <flatcc_builder_embed_buffer@@Base>:
   1dd8c:	push	{r4, r5, r6, r7, fp, lr}
   1dd90:	add	fp, sp, #16
   1dd94:	sub	sp, sp, #80	; 0x50
   1dd98:	mov	r5, r3
   1dd9c:	mov	r6, r2
   1dda0:	mov	r2, r1
   1dda4:	mov	r4, r0
   1dda8:	ldr	r0, [fp, #8]
   1ddac:	strh	r0, [fp, #-18]	; 0xffffffee
   1ddb0:	ldr	r3, [r4, #152]	; 0x98
   1ddb4:	cmp	r3, #0
   1ddb8:	movwne	r3, #1
   1ddbc:	sub	r1, fp, #18
   1ddc0:	mov	r0, r4
   1ddc4:	bl	1de98 <flatcc_builder_embed_buffer@@Base+0x10c>
   1ddc8:	ldr	r0, [fp, #12]
   1ddcc:	and	r0, r0, #2
   1ddd0:	add	r1, r5, r0, lsl #1
   1ddd4:	ldrh	r2, [fp, #-18]	; 0xffffffee
   1ddd8:	mov	r0, r4
   1dddc:	bl	1df54 <flatcc_builder_embed_buffer@@Base+0x1c8>
   1dde0:	mov	r7, r0
   1dde4:	add	r0, r0, r5
   1dde8:	bl	1df68 <flatcc_builder_embed_buffer@@Base+0x1dc>
   1ddec:	mov	r1, #0
   1ddf0:	str	r1, [sp]
   1ddf4:	str	r0, [fp, #-24]	; 0xffffffe8
   1ddf8:	str	r1, [sp, #4]
   1ddfc:	ldr	r0, [r4, #152]	; 0x98
   1de00:	cmp	r0, #0
   1de04:	beq	1de24 <flatcc_builder_embed_buffer@@Base+0x98>
   1de08:	sub	r0, fp, #24
   1de0c:	str	r0, [sp, #8]
   1de10:	mov	r0, #4
   1de14:	str	r0, [sp]
   1de18:	str	r0, [sp, #12]
   1de1c:	mov	r0, #1
   1de20:	str	r0, [sp, #4]
   1de24:	cmp	r5, #0
   1de28:	beq	1de50 <flatcc_builder_embed_buffer@@Base+0xc4>
   1de2c:	ldm	sp, {r0, r1}
   1de30:	add	r0, r0, r5
   1de34:	str	r0, [sp]
   1de38:	mov	r0, sp
   1de3c:	add	r0, r0, r1, lsl #3
   1de40:	str	r6, [r0, #8]
   1de44:	str	r5, [r0, #12]
   1de48:	add	r0, r1, #1
   1de4c:	str	r0, [sp, #4]
   1de50:	cmp	r7, #0
   1de54:	beq	1de84 <flatcc_builder_embed_buffer@@Base+0xf8>
   1de58:	ldm	sp, {r0, r1}
   1de5c:	add	r0, r0, r7
   1de60:	str	r0, [sp]
   1de64:	mov	r0, sp
   1de68:	add	r0, r0, r1, lsl #3
   1de6c:	movw	r2, #29168	; 0x71f0
   1de70:	movt	r2, #2
   1de74:	str	r2, [r0, #8]
   1de78:	str	r7, [r0, #12]
   1de7c:	add	r0, r1, #1
   1de80:	str	r0, [sp, #4]
   1de84:	mov	r1, sp
   1de88:	mov	r0, r4
   1de8c:	bl	1df6c <flatcc_builder_embed_buffer@@Base+0x1e0>
   1de90:	sub	sp, fp, #16
   1de94:	pop	{r4, r5, r6, r7, fp, pc}
   1de98:	push	{r4, r5, r6, r7, fp, lr}
   1de9c:	add	fp, sp, #16
   1dea0:	sub	sp, sp, #72	; 0x48
   1dea4:	mov	r6, r3
   1dea8:	mov	r5, r2
   1deac:	mov	r7, r1
   1deb0:	mov	r4, r0
   1deb4:	cmp	r2, #0
   1deb8:	bne	1dec8 <flatcc_builder_embed_buffer@@Base+0x13c>
   1debc:	ldrh	r5, [r4, #132]	; 0x84
   1dec0:	cmp	r5, #0
   1dec4:	movweq	r5, #1
   1dec8:	mov	r0, r7
   1decc:	mov	r1, #4
   1ded0:	bl	1ed40 <flatcc_builder_start_vector@@Base+0x80>
   1ded4:	mov	r0, r7
   1ded8:	mov	r1, r5
   1dedc:	bl	1ed40 <flatcc_builder_start_vector@@Base+0x80>
   1dee0:	cmp	r6, #0
   1dee4:	bne	1df2c <flatcc_builder_embed_buffer@@Base+0x1a0>
   1dee8:	mov	r0, r4
   1deec:	mov	r1, r5
   1def0:	bl	20a3c <flatcc_builder_get_emit_context@@Base+0x8>
   1def4:	cmp	r0, #0
   1def8:	beq	1df2c <flatcc_builder_embed_buffer@@Base+0x1a0>
   1defc:	movw	r1, #29168	; 0x71f0
   1df00:	movt	r1, #2
   1df04:	str	r1, [sp, #8]
   1df08:	str	r0, [sp]
   1df0c:	str	r0, [sp, #12]
   1df10:	mov	r0, #1
   1df14:	str	r0, [sp, #4]
   1df18:	mov	r1, sp
   1df1c:	mov	r0, r4
   1df20:	bl	1f0cc <flatcc_builder_create_vtable@@Base+0x80>
   1df24:	cmp	r0, #0
   1df28:	beq	1df34 <flatcc_builder_embed_buffer@@Base+0x1a8>
   1df2c:	sub	sp, fp, #16
   1df30:	pop	{r4, r5, r6, r7, fp, pc}
   1df34:	movw	r0, #34216	; 0x85a8
   1df38:	movt	r0, #2
   1df3c:	movw	r1, #29698	; 0x7402
   1df40:	movt	r1, #2
   1df44:	movw	r3, #33829	; 0x8425
   1df48:	movt	r3, #2
   1df4c:	movw	r2, #702	; 0x2be
   1df50:	bl	12f88 <__assert_fail@plt>
   1df54:	ldr	r0, [r0, #136]	; 0x88
   1df58:	sub	r0, r0, r1
   1df5c:	sub	r1, r2, #1
   1df60:	and	r0, r0, r1
   1df64:	bx	lr
   1df68:	bx	lr
   1df6c:	push	{r4, r5, fp, lr}
   1df70:	add	fp, sp, #8
   1df74:	sub	sp, sp, #8
   1df78:	ldr	r3, [r1]
   1df7c:	cmp	r3, #0
   1df80:	ble	1dfe0 <flatcc_builder_embed_buffer@@Base+0x254>
   1df84:	mov	r4, r0
   1df88:	ldr	r0, [r0, #136]	; 0x88
   1df8c:	sub	r5, r0, r3
   1df90:	ldr	r2, [r1, #4]
   1df94:	ldr	r0, [r4, #36]	; 0x24
   1df98:	ldr	ip, [r4, #44]	; 0x2c
   1df9c:	str	r3, [sp]
   1dfa0:	add	r1, r1, #8
   1dfa4:	mov	r3, r5
   1dfa8:	blx	ip
   1dfac:	cmp	r0, #0
   1dfb0:	streq	r5, [r4, #136]	; 0x88
   1dfb4:	moveq	r0, r5
   1dfb8:	subeq	sp, fp, #8
   1dfbc:	popeq	{r4, r5, fp, pc}
   1dfc0:	movw	r0, #34216	; 0x85a8
   1dfc4:	movt	r0, #2
   1dfc8:	movw	r1, #29698	; 0x7402
   1dfcc:	movt	r1, #2
   1dfd0:	movw	r3, #33895	; 0x8467
   1dfd4:	movt	r3, #2
   1dfd8:	movw	r2, #651	; 0x28b
   1dfdc:	bl	12f88 <__assert_fail@plt>
   1dfe0:	movw	r0, #34216	; 0x85a8
   1dfe4:	movt	r0, #2
   1dfe8:	movw	r1, #29698	; 0x7402
   1dfec:	movt	r1, #2
   1dff0:	movw	r3, #33895	; 0x8467
   1dff4:	movt	r3, #2
   1dff8:	movw	r2, #647	; 0x287
   1dffc:	bl	12f88 <__assert_fail@plt>

0001e000 <flatcc_builder_create_buffer@@Base>:
   1e000:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e004:	add	fp, sp, #28
   1e008:	sub	sp, sp, #92	; 0x5c
   1e00c:	mov	r6, r3
   1e010:	mov	r7, r1
   1e014:	mov	r4, r0
   1e018:	ldr	r0, [fp, #8]
   1e01c:	strh	r0, [fp, #-30]	; 0xffffffe2
   1e020:	mov	r0, #0
   1e024:	str	r0, [sp, #4]
   1e028:	ldr	sl, [fp, #12]
   1e02c:	and	r9, sl, #1
   1e030:	sub	r1, fp, #30
   1e034:	mov	r0, r4
   1e038:	mov	r3, r9
   1e03c:	bl	1de98 <flatcc_builder_embed_buffer@@Base+0x10c>
   1e040:	ldrh	r5, [fp, #-30]	; 0xffffffe2
   1e044:	mov	r0, r4
   1e048:	mov	r1, r5
   1e04c:	bl	1e1d0 <flatcc_builder_create_buffer@@Base+0x1d0>
   1e050:	cmp	r7, #0
   1e054:	str	r6, [sp]
   1e058:	beq	1e074 <flatcc_builder_create_buffer@@Base+0x74>
   1e05c:	ldr	r7, [r7]
   1e060:	mov	r0, r7
   1e064:	bl	1e1e0 <flatcc_builder_create_buffer@@Base+0x1e0>
   1e068:	bl	1df68 <flatcc_builder_embed_buffer@@Base+0x1dc>
   1e06c:	str	r7, [sp, #4]
   1e070:	b	1e078 <flatcc_builder_create_buffer@@Base+0x78>
   1e074:	ldr	r7, [sp, #4]
   1e078:	mov	r8, #4
   1e07c:	and	r0, r8, sl, lsl #1
   1e080:	cmp	r7, #0
   1e084:	mov	r6, r7
   1e088:	movwne	r6, #1
   1e08c:	add	r0, r0, r6, lsl #2
   1e090:	add	r1, r0, #4
   1e094:	mov	r0, r4
   1e098:	mov	r2, r5
   1e09c:	bl	1df54 <flatcc_builder_embed_buffer@@Base+0x1c8>
   1e0a0:	mov	r1, #0
   1e0a4:	str	r1, [sp, #8]
   1e0a8:	str	r1, [sp, #12]
   1e0ac:	ands	ip, sl, #3
   1e0b0:	beq	1e0cc <flatcc_builder_create_buffer@@Base+0xcc>
   1e0b4:	sub	r1, fp, #40	; 0x28
   1e0b8:	str	r1, [sp, #16]
   1e0bc:	str	r8, [sp, #8]
   1e0c0:	str	r8, [sp, #20]
   1e0c4:	mov	r1, #1
   1e0c8:	str	r1, [sp, #12]
   1e0cc:	ldr	r1, [sp, #8]
   1e0d0:	ldr	r3, [sp, #12]
   1e0d4:	add	r5, r1, #4
   1e0d8:	str	r5, [sp, #8]
   1e0dc:	add	lr, sp, #8
   1e0e0:	add	r1, lr, r3, lsl #3
   1e0e4:	sub	r2, fp, #36	; 0x24
   1e0e8:	str	r2, [r1, #8]
   1e0ec:	str	r8, [r1, #12]
   1e0f0:	add	r1, r3, #1
   1e0f4:	str	r1, [sp, #12]
   1e0f8:	cmp	r7, #0
   1e0fc:	beq	1e124 <flatcc_builder_create_buffer@@Base+0x124>
   1e100:	lsl	r2, r6, #2
   1e104:	add	r5, r5, r2
   1e108:	str	r5, [sp, #8]
   1e10c:	add	r1, lr, r1, lsl #3
   1e110:	add	r5, sp, #4
   1e114:	str	r5, [r1, #8]
   1e118:	str	r2, [r1, #12]
   1e11c:	add	r1, r3, #2
   1e120:	str	r1, [sp, #12]
   1e124:	cmp	r0, #0
   1e128:	beq	1e158 <flatcc_builder_create_buffer@@Base+0x158>
   1e12c:	ldr	r1, [sp, #8]
   1e130:	ldr	r2, [sp, #12]
   1e134:	add	r1, r1, r0
   1e138:	str	r1, [sp, #8]
   1e13c:	add	r1, lr, r2, lsl #3
   1e140:	movw	r3, #29168	; 0x71f0
   1e144:	movt	r3, #2
   1e148:	str	r3, [r1, #8]
   1e14c:	str	r0, [r1, #12]
   1e150:	add	r0, r2, #1
   1e154:	str	r0, [sp, #12]
   1e158:	ldr	r0, [r4, #136]	; 0x88
   1e15c:	ldr	r1, [sp, #8]
   1e160:	sub	r5, r0, r1
   1e164:	cmp	ip, #0
   1e168:	addne	r5, r5, #4
   1e16c:	mov	r0, #144	; 0x90
   1e170:	cmp	r9, #0
   1e174:	movweq	r0, #140	; 0x8c
   1e178:	ldr	r0, [r4, r0]
   1e17c:	sub	r0, r0, r5
   1e180:	bl	1df68 <flatcc_builder_embed_buffer@@Base+0x1dc>
   1e184:	str	r0, [fp, #-40]	; 0xffffffd8
   1e188:	ldr	r0, [sp]
   1e18c:	sub	r0, r0, r5
   1e190:	bl	1df68 <flatcc_builder_embed_buffer@@Base+0x1dc>
   1e194:	str	r0, [fp, #-36]	; 0xffffffdc
   1e198:	add	r1, sp, #8
   1e19c:	mov	r0, r4
   1e1a0:	bl	1df6c <flatcc_builder_embed_buffer@@Base+0x1e0>
   1e1a4:	cmp	r0, #0
   1e1a8:	subne	sp, fp, #28
   1e1ac:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e1b0:	movw	r0, #34216	; 0x85a8
   1e1b4:	movt	r0, #2
   1e1b8:	movw	r1, #29698	; 0x7402
   1e1bc:	movt	r1, #2
   1e1c0:	movw	r3, #30013	; 0x753d
   1e1c4:	movt	r3, #2
   1e1c8:	mov	r2, #772	; 0x304
   1e1cc:	bl	12f88 <__assert_fail@plt>
   1e1d0:	ldrh	r2, [r0, #128]	; 0x80
   1e1d4:	cmp	r2, r1
   1e1d8:	strhcc	r1, [r0, #128]	; 0x80
   1e1dc:	bx	lr
   1e1e0:	bx	lr

0001e1e4 <flatcc_builder_create_struct@@Base>:
   1e1e4:	push	{r4, r5, r6, r7, fp, lr}
   1e1e8:	add	fp, sp, #16
   1e1ec:	sub	sp, sp, #72	; 0x48
   1e1f0:	cmp	r3, #0
   1e1f4:	beq	1e28c <flatcc_builder_create_struct@@Base+0xa8>
   1e1f8:	mov	r7, r3
   1e1fc:	mov	r5, r2
   1e200:	mov	r6, r1
   1e204:	mov	r4, r0
   1e208:	mov	r1, r3
   1e20c:	bl	1e1d0 <flatcc_builder_create_buffer@@Base+0x1d0>
   1e210:	mov	r0, r4
   1e214:	mov	r1, r5
   1e218:	mov	r2, r7
   1e21c:	bl	1df54 <flatcc_builder_embed_buffer@@Base+0x1c8>
   1e220:	mov	r1, #0
   1e224:	str	r1, [sp]
   1e228:	str	r1, [sp, #4]
   1e22c:	cmp	r5, #0
   1e230:	strne	r6, [sp, #8]
   1e234:	strne	r5, [sp]
   1e238:	strne	r5, [sp, #12]
   1e23c:	movne	r1, #1
   1e240:	strne	r1, [sp, #4]
   1e244:	cmp	r0, #0
   1e248:	beq	1e278 <flatcc_builder_create_struct@@Base+0x94>
   1e24c:	ldm	sp, {r1, r2}
   1e250:	add	r1, r1, r0
   1e254:	str	r1, [sp]
   1e258:	mov	r1, sp
   1e25c:	add	r1, r1, r2, lsl #3
   1e260:	movw	r3, #29168	; 0x71f0
   1e264:	movt	r3, #2
   1e268:	str	r3, [r1, #8]
   1e26c:	str	r0, [r1, #12]
   1e270:	add	r0, r2, #1
   1e274:	str	r0, [sp, #4]
   1e278:	mov	r1, sp
   1e27c:	mov	r0, r4
   1e280:	bl	1df6c <flatcc_builder_embed_buffer@@Base+0x1e0>
   1e284:	sub	sp, fp, #16
   1e288:	pop	{r4, r5, r6, r7, fp, pc}
   1e28c:	movw	r0, #30144	; 0x75c0
   1e290:	movt	r0, #2
   1e294:	movw	r1, #29698	; 0x7402
   1e298:	movt	r1, #2
   1e29c:	movw	r3, #30155	; 0x75cb
   1e2a0:	movt	r3, #2
   1e2a4:	movw	r2, #783	; 0x30f
   1e2a8:	bl	12f88 <__assert_fail@plt>

0001e2ac <flatcc_builder_start_buffer@@Base>:
   1e2ac:	push	{r4, r5, r6, r7, fp, lr}
   1e2b0:	add	fp, sp, #16
   1e2b4:	mov	r6, r3
   1e2b8:	mov	r7, r2
   1e2bc:	mov	r5, r1
   1e2c0:	mov	r4, r0
   1e2c4:	ldrh	r1, [r0, #128]	; 0x80
   1e2c8:	bl	1e368 <flatcc_builder_start_buffer@@Base+0xbc>
   1e2cc:	mov	r1, r0
   1e2d0:	mvn	r0, #0
   1e2d4:	cmp	r1, #0
   1e2d8:	popne	{r4, r5, r6, r7, fp, pc}
   1e2dc:	mov	r0, #1
   1e2e0:	strh	r0, [r4, #128]	; 0x80
   1e2e4:	ldrh	r1, [r4, #132]	; 0x84
   1e2e8:	ldr	r2, [r4, #32]
   1e2ec:	strh	r1, [r2, #34]	; 0x22
   1e2f0:	strh	r7, [r4, #132]	; 0x84
   1e2f4:	ldrh	r1, [r4, #164]	; 0xa4
   1e2f8:	ldr	r2, [r4, #32]
   1e2fc:	strh	r1, [r2, #32]
   1e300:	strh	r6, [r4, #164]	; 0xa4
   1e304:	ldr	r1, [r4, #32]
   1e308:	ldr	r2, [r4, #144]	; 0x90
   1e30c:	str	r2, [r1, #20]
   1e310:	ldr	r1, [r4, #32]
   1e314:	ldr	r2, [r4, #152]	; 0x98
   1e318:	str	r2, [r1, #28]
   1e31c:	ldr	r1, [r4, #32]
   1e320:	ldr	r2, [r4, #136]	; 0x88
   1e324:	ldr	r3, [r4, #148]	; 0x94
   1e328:	ldr	r7, [r4, #168]	; 0xa8
   1e32c:	add	r6, r3, #1
   1e330:	str	r2, [r4, #144]	; 0x90
   1e334:	str	r6, [r4, #148]	; 0x94
   1e338:	str	r3, [r4, #152]	; 0x98
   1e33c:	str	r7, [r1, #16]
   1e340:	movw	r1, #29168	; 0x71f0
   1e344:	movt	r1, #2
   1e348:	cmp	r5, #0
   1e34c:	movne	r1, r5
   1e350:	ldr	r1, [r1]
   1e354:	str	r1, [r4, #168]	; 0xa8
   1e358:	ldr	r1, [r4, #32]
   1e35c:	strh	r0, [r1, #14]
   1e360:	mov	r0, #0
   1e364:	pop	{r4, r5, r6, r7, fp, pc}
   1e368:	push	{r4, r5, r6, sl, fp, lr}
   1e36c:	add	fp, sp, #16
   1e370:	sub	sp, sp, #8
   1e374:	mov	r5, r1
   1e378:	mov	r4, r0
   1e37c:	ldr	r1, [r0, #156]	; 0x9c
   1e380:	ldr	r2, [r0, #160]	; 0xa0
   1e384:	add	r0, r1, #1
   1e388:	str	r0, [r4, #156]	; 0x9c
   1e38c:	cmp	r1, r2
   1e390:	bge	1e3a4 <flatcc_builder_start_buffer@@Base+0xf8>
   1e394:	ldr	r0, [r4, #32]
   1e398:	add	r0, r0, #36	; 0x24
   1e39c:	str	r0, [r4, #32]
   1e3a0:	b	1e418 <flatcc_builder_start_buffer@@Base+0x16c>
   1e3a4:	ldr	r2, [r4, #176]	; 0xb0
   1e3a8:	mvn	r6, #0
   1e3ac:	cmp	r2, #1
   1e3b0:	cmpge	r1, r2
   1e3b4:	bge	1e454 <flatcc_builder_start_buffer@@Base+0x1a8>
   1e3b8:	mov	r1, #0
   1e3bc:	str	r1, [sp]
   1e3c0:	add	r0, r0, r0, lsl #3
   1e3c4:	mvn	r1, #35	; 0x23
   1e3c8:	add	r2, r1, r0, lsl #2
   1e3cc:	mov	r0, r4
   1e3d0:	mov	r1, #4
   1e3d4:	mov	r3, #36	; 0x24
   1e3d8:	bl	1dbfc <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   1e3dc:	str	r0, [r4, #32]
   1e3e0:	cmp	r0, #0
   1e3e4:	beq	1e454 <flatcc_builder_start_buffer@@Base+0x1a8>
   1e3e8:	ldr	r0, [r4, #88]	; 0x58
   1e3ec:	ldr	r1, [r4, #176]	; 0xb0
   1e3f0:	movw	r2, #36409	; 0x8e39
   1e3f4:	movt	r2, #14563	; 0x38e3
   1e3f8:	umull	r0, r2, r0, r2
   1e3fc:	lsr	r0, r2, #3
   1e400:	cmp	r1, r2, lsr #3
   1e404:	mov	r2, r0
   1e408:	movlt	r2, r1
   1e40c:	cmp	r1, #0
   1e410:	movle	r2, r0
   1e414:	str	r2, [r4, #160]	; 0xa0
   1e418:	ldr	r0, [r4, #20]
   1e41c:	ldr	r1, [r4, #32]
   1e420:	str	r0, [r1, #8]
   1e424:	ldrh	r2, [r4, #130]	; 0x82
   1e428:	strh	r2, [r1, #12]
   1e42c:	strh	r5, [r4, #130]	; 0x82
   1e430:	ldr	r2, [r4, #28]
   1e434:	mvn	r3, #3
   1e438:	stm	r1, {r2, r3}
   1e43c:	mov	r6, #0
   1e440:	str	r6, [r4, #20]
   1e444:	add	r0, r0, r2
   1e448:	add	r0, r0, #7
   1e44c:	bic	r0, r0, #7
   1e450:	str	r0, [r4, #28]
   1e454:	mov	r0, r6
   1e458:	sub	sp, fp, #16
   1e45c:	pop	{r4, r5, r6, sl, fp, pc}

0001e460 <flatcc_builder_end_buffer@@Base>:
   1e460:	push	{r4, r5, r6, r7, fp, lr}
   1e464:	add	fp, sp, #16
   1e468:	sub	sp, sp, #8
   1e46c:	mov	r4, r0
   1e470:	ldr	r0, [r0, #32]
   1e474:	ldrh	r0, [r0, #14]
   1e478:	cmp	r0, #1
   1e47c:	bne	1e508 <flatcc_builder_end_buffer@@Base+0xa8>
   1e480:	mov	r5, r1
   1e484:	ldr	r6, [r4, #152]	; 0x98
   1e488:	ldrh	r7, [r4, #164]	; 0xa4
   1e48c:	ldrh	r1, [r4, #132]	; 0x84
   1e490:	mov	r0, r4
   1e494:	bl	1e1d0 <flatcc_builder_create_buffer@@Base+0x1d0>
   1e498:	and	r0, r7, #2
   1e49c:	cmp	r6, #0
   1e4a0:	orrne	r0, r0, #1
   1e4a4:	ldrh	r2, [r4, #132]	; 0x84
   1e4a8:	ldrh	r1, [r4, #128]	; 0x80
   1e4ac:	str	r1, [sp]
   1e4b0:	str	r0, [sp, #4]
   1e4b4:	add	r1, r4, #168	; 0xa8
   1e4b8:	mov	r0, r4
   1e4bc:	mov	r3, r5
   1e4c0:	bl	1e000 <flatcc_builder_create_buffer@@Base>
   1e4c4:	mov	r5, r0
   1e4c8:	cmp	r0, #0
   1e4cc:	beq	1e4fc <flatcc_builder_end_buffer@@Base+0x9c>
   1e4d0:	ldr	r0, [r4, #32]
   1e4d4:	ldr	r1, [r0, #20]
   1e4d8:	str	r1, [r4, #144]	; 0x90
   1e4dc:	ldr	r1, [r0, #28]
   1e4e0:	str	r1, [r4, #152]	; 0x98
   1e4e4:	ldr	r1, [r0, #16]
   1e4e8:	str	r1, [r4, #168]	; 0xa8
   1e4ec:	ldrh	r0, [r0, #32]
   1e4f0:	strh	r0, [r4, #164]	; 0xa4
   1e4f4:	mov	r0, r4
   1e4f8:	bl	1e528 <flatcc_builder_end_buffer@@Base+0xc8>
   1e4fc:	mov	r0, r5
   1e500:	sub	sp, fp, #16
   1e504:	pop	{r4, r5, r6, r7, fp, pc}
   1e508:	movw	r0, #30257	; 0x7631
   1e50c:	movt	r0, #2
   1e510:	movw	r1, #29698	; 0x7402
   1e514:	movt	r1, #2
   1e518:	movw	r3, #30301	; 0x765d
   1e51c:	movt	r3, #2
   1e520:	movw	r2, #838	; 0x346
   1e524:	bl	12f88 <__assert_fail@plt>
   1e528:	push	{r4, sl, fp, lr}
   1e52c:	add	fp, sp, #8
   1e530:	mov	r4, r0
   1e534:	ldr	r0, [r0, #16]
   1e538:	ldr	r2, [r4, #20]
   1e53c:	mov	r1, #0
   1e540:	bl	12f40 <memset@plt>
   1e544:	ldr	r0, [r4, #32]
   1e548:	ldr	r1, [r0, #8]
   1e54c:	str	r1, [r4, #20]
   1e550:	ldr	r1, [r0]
   1e554:	str	r1, [r4, #28]
   1e558:	ldr	r1, [r0, #4]
   1e55c:	mov	r0, r4
   1e560:	bl	1e5e0 <flatcc_builder_start_struct@@Base+0x4c>
   1e564:	ldrh	r1, [r4, #130]	; 0x82
   1e568:	mov	r0, r4
   1e56c:	bl	1e1d0 <flatcc_builder_create_buffer@@Base+0x1d0>
   1e570:	ldr	r0, [r4, #32]
   1e574:	ldr	r1, [r4, #156]	; 0x9c
   1e578:	ldrh	r2, [r0, #12]
   1e57c:	sub	r0, r0, #36	; 0x24
   1e580:	str	r0, [r4, #32]
   1e584:	sub	r0, r1, #1
   1e588:	str	r0, [r4, #156]	; 0x9c
   1e58c:	strh	r2, [r4, #130]	; 0x82
   1e590:	pop	{r4, sl, fp, pc}

0001e594 <flatcc_builder_start_struct@@Base>:
   1e594:	push	{r4, r5, fp, lr}
   1e598:	add	fp, sp, #8
   1e59c:	mov	r4, r1
   1e5a0:	mov	r5, r0
   1e5a4:	mov	r1, r2
   1e5a8:	bl	1e368 <flatcc_builder_start_buffer@@Base+0xbc>
   1e5ac:	cmp	r0, #0
   1e5b0:	movne	r0, #0
   1e5b4:	popne	{r4, r5, fp, pc}
   1e5b8:	ldr	r0, [r5, #32]
   1e5bc:	mov	r1, #2
   1e5c0:	strh	r1, [r0, #14]
   1e5c4:	mov	r0, r5
   1e5c8:	mvn	r1, #3
   1e5cc:	bl	1e5e0 <flatcc_builder_start_struct@@Base+0x4c>
   1e5d0:	mov	r0, r5
   1e5d4:	mov	r1, r4
   1e5d8:	pop	{r4, r5, fp, lr}
   1e5dc:	b	1e618 <flatcc_builder_start_struct@@Base+0x84>
   1e5e0:	push	{fp, lr}
   1e5e4:	mov	fp, sp
   1e5e8:	ldr	r2, [r0, #28]
   1e5ec:	ldr	ip, [r0, #32]
   1e5f0:	ldr	r3, [r0, #60]	; 0x3c
   1e5f4:	ldr	lr, [r0, #64]	; 0x40
   1e5f8:	add	r3, r3, r2
   1e5fc:	str	r3, [r0, #16]
   1e600:	sub	r2, lr, r2
   1e604:	cmp	r2, r1
   1e608:	movhi	r2, r1
   1e60c:	str	r2, [r0, #24]
   1e610:	str	r1, [ip, #4]
   1e614:	pop	{fp, pc}
   1e618:	push	{r4, r5, fp, lr}
   1e61c:	add	fp, sp, #8
   1e620:	mov	r4, r0
   1e624:	ldr	r5, [r0, #20]
   1e628:	ldr	r2, [r0, #24]
   1e62c:	add	r0, r5, r1
   1e630:	str	r0, [r4, #20]
   1e634:	cmp	r0, r2
   1e638:	bcc	1e65c <flatcc_builder_start_struct@@Base+0xc8>
   1e63c:	add	r1, r0, #1
   1e640:	mov	r0, r4
   1e644:	mvn	r2, #3
   1e648:	bl	20a4c <flatcc_builder_get_emit_context@@Base+0x18>
   1e64c:	mov	r1, r0
   1e650:	mov	r0, #0
   1e654:	cmp	r1, #0
   1e658:	popne	{r4, r5, fp, pc}
   1e65c:	ldr	r0, [r4, #16]
   1e660:	add	r0, r0, r5
   1e664:	pop	{r4, r5, fp, pc}

0001e668 <flatcc_builder_struct_edit@@Base>:
   1e668:	ldr	r0, [r0, #16]
   1e66c:	bx	lr

0001e670 <flatcc_builder_end_struct@@Base>:
   1e670:	push	{r4, r5, fp, lr}
   1e674:	add	fp, sp, #8
   1e678:	mov	r4, r0
   1e67c:	ldr	r0, [r0, #32]
   1e680:	ldrh	r0, [r0, #14]
   1e684:	cmp	r0, #2
   1e688:	bne	1e6b8 <flatcc_builder_end_struct@@Base+0x48>
   1e68c:	ldrh	r3, [r4, #130]	; 0x82
   1e690:	ldr	r1, [r4, #16]
   1e694:	ldr	r2, [r4, #20]
   1e698:	mov	r0, r4
   1e69c:	bl	1e1e4 <flatcc_builder_create_struct@@Base>
   1e6a0:	mov	r5, r0
   1e6a4:	cmp	r0, #0
   1e6a8:	movne	r0, r4
   1e6ac:	blne	1e528 <flatcc_builder_end_buffer@@Base+0xc8>
   1e6b0:	mov	r0, r5
   1e6b4:	pop	{r4, r5, fp, pc}
   1e6b8:	movw	r0, #30390	; 0x76b6
   1e6bc:	movt	r0, #2
   1e6c0:	movw	r1, #29698	; 0x7402
   1e6c4:	movt	r1, #2
   1e6c8:	movw	r3, #30434	; 0x76e2
   1e6cc:	movt	r3, #2
   1e6d0:	mov	r2, #872	; 0x368
   1e6d4:	bl	12f88 <__assert_fail@plt>

0001e6d8 <flatcc_builder_extend_vector@@Base>:
   1e6d8:	push	{r4, r5, fp, lr}
   1e6dc:	add	fp, sp, #8
   1e6e0:	mov	r5, r1
   1e6e4:	mov	r4, r0
   1e6e8:	ldr	r0, [r0, #32]
   1e6ec:	ldr	r2, [r0, #24]
   1e6f0:	mov	r0, r4
   1e6f4:	bl	1e71c <flatcc_builder_extend_vector@@Base+0x44>
   1e6f8:	cmp	r0, #0
   1e6fc:	movne	r0, #0
   1e700:	popne	{r4, r5, fp, pc}
   1e704:	ldr	r0, [r4, #32]
   1e708:	ldr	r0, [r0, #16]
   1e70c:	mul	r1, r0, r5
   1e710:	mov	r0, r4
   1e714:	pop	{r4, r5, fp, lr}
   1e718:	b	1e618 <flatcc_builder_start_struct@@Base+0x84>
   1e71c:	ldr	r0, [r0, #32]
   1e720:	ldr	r3, [r0, #20]
   1e724:	adds	r1, r3, r1
   1e728:	bcs	1e73c <flatcc_builder_extend_vector@@Base+0x64>
   1e72c:	cmp	r1, r2
   1e730:	strls	r1, [r0, #20]
   1e734:	movls	r0, #0
   1e738:	bxls	lr
   1e73c:	push	{fp, lr}
   1e740:	mov	fp, sp
   1e744:	movw	r0, #33969	; 0x84b1
   1e748:	movt	r0, #2
   1e74c:	movw	r1, #29698	; 0x7402
   1e750:	movt	r1, #2
   1e754:	movw	r3, #33996	; 0x84cc
   1e758:	movt	r3, #2
   1e75c:	mov	r2, #892	; 0x37c
   1e760:	bl	12f88 <__assert_fail@plt>

0001e764 <flatcc_builder_vector_push@@Base>:
   1e764:	push	{fp, lr}
   1e768:	mov	fp, sp
   1e76c:	ldr	r2, [r0, #32]
   1e770:	ldrh	r3, [r2, #14]
   1e774:	cmp	r3, #4
   1e778:	bne	1e7a4 <flatcc_builder_vector_push@@Base+0x40>
   1e77c:	ldr	ip, [r2, #20]
   1e780:	ldr	r3, [r2, #24]
   1e784:	cmp	ip, r3
   1e788:	bhi	1e7c4 <flatcc_builder_vector_push@@Base+0x60>
   1e78c:	add	r3, ip, #1
   1e790:	str	r3, [r2, #20]
   1e794:	ldr	r2, [r0, #32]
   1e798:	ldr	r2, [r2, #16]
   1e79c:	pop	{fp, lr}
   1e7a0:	b	1e7e4 <flatcc_builder_vector_push@@Base+0x80>
   1e7a4:	movw	r0, #30501	; 0x7725
   1e7a8:	movt	r0, #2
   1e7ac:	movw	r1, #29698	; 0x7402
   1e7b0:	movt	r1, #2
   1e7b4:	movw	r3, #30545	; 0x7751
   1e7b8:	movt	r3, #2
   1e7bc:	movw	r2, #907	; 0x38b
   1e7c0:	bl	12f88 <__assert_fail@plt>
   1e7c4:	movw	r0, #30612	; 0x7794
   1e7c8:	movt	r0, #2
   1e7cc:	movw	r1, #29698	; 0x7402
   1e7d0:	movt	r1, #2
   1e7d4:	movw	r3, #30545	; 0x7751
   1e7d8:	movt	r3, #2
   1e7dc:	mov	r2, #908	; 0x38c
   1e7e0:	bl	12f88 <__assert_fail@plt>
   1e7e4:	push	{r4, r5, r6, sl, fp, lr}
   1e7e8:	add	fp, sp, #16
   1e7ec:	mov	r4, r2
   1e7f0:	mov	r5, r1
   1e7f4:	mov	r1, r2
   1e7f8:	bl	1e618 <flatcc_builder_start_struct@@Base+0x84>
   1e7fc:	mov	r6, r0
   1e800:	cmp	r0, #0
   1e804:	beq	1e818 <flatcc_builder_vector_push@@Base+0xb4>
   1e808:	mov	r0, r6
   1e80c:	mov	r1, r5
   1e810:	mov	r2, r4
   1e814:	bl	12eb0 <memcpy@plt>
   1e818:	mov	r0, r6
   1e81c:	pop	{r4, r5, r6, sl, fp, pc}

0001e820 <flatcc_builder_append_vector@@Base>:
   1e820:	push	{r4, r5, r6, sl, fp, lr}
   1e824:	add	fp, sp, #16
   1e828:	mov	r4, r1
   1e82c:	mov	r6, r0
   1e830:	ldr	r0, [r0, #32]
   1e834:	ldrh	r1, [r0, #14]
   1e838:	cmp	r1, #4
   1e83c:	bne	1e87c <flatcc_builder_append_vector@@Base+0x5c>
   1e840:	mov	r5, r2
   1e844:	ldr	r2, [r0, #24]
   1e848:	mov	r0, r6
   1e84c:	mov	r1, r5
   1e850:	bl	1e71c <flatcc_builder_extend_vector@@Base+0x44>
   1e854:	cmp	r0, #0
   1e858:	movne	r0, #0
   1e85c:	popne	{r4, r5, r6, sl, fp, pc}
   1e860:	ldr	r0, [r6, #32]
   1e864:	ldr	r0, [r0, #16]
   1e868:	mul	r2, r0, r5
   1e86c:	mov	r0, r6
   1e870:	mov	r1, r4
   1e874:	pop	{r4, r5, r6, sl, fp, lr}
   1e878:	b	1e7e4 <flatcc_builder_vector_push@@Base+0x80>
   1e87c:	movw	r0, #30501	; 0x7725
   1e880:	movt	r0, #2
   1e884:	movw	r1, #29698	; 0x7402
   1e888:	movt	r1, #2
   1e88c:	movw	r3, #30673	; 0x77d1
   1e890:	movt	r3, #2
   1e894:	movw	r2, #915	; 0x393
   1e898:	bl	12f88 <__assert_fail@plt>

0001e89c <flatcc_builder_extend_offset_vector@@Base>:
   1e89c:	push	{r4, r5, fp, lr}
   1e8a0:	add	fp, sp, #8
   1e8a4:	mov	r5, r1
   1e8a8:	mov	r4, r0
   1e8ac:	mvn	r2, #-1073741824	; 0xc0000000
   1e8b0:	bl	1e71c <flatcc_builder_extend_vector@@Base+0x44>
   1e8b4:	mov	r1, r0
   1e8b8:	mov	r0, #0
   1e8bc:	cmp	r1, #0
   1e8c0:	popne	{r4, r5, fp, pc}
   1e8c4:	lsl	r1, r5, #2
   1e8c8:	mov	r0, r4
   1e8cc:	bl	1e618 <flatcc_builder_start_struct@@Base+0x84>
   1e8d0:	pop	{r4, r5, fp, pc}

0001e8d4 <flatcc_builder_offset_vector_push@@Base>:
   1e8d4:	push	{r4, r5, fp, lr}
   1e8d8:	add	fp, sp, #8
   1e8dc:	mov	r4, r1
   1e8e0:	ldr	r1, [r0, #32]
   1e8e4:	ldrh	r2, [r1, #14]
   1e8e8:	cmp	r2, #5
   1e8ec:	bne	1e924 <flatcc_builder_offset_vector_push@@Base+0x50>
   1e8f0:	ldr	r2, [r1, #20]
   1e8f4:	mov	r5, #0
   1e8f8:	cmn	r2, #-1073741823	; 0xc0000001
   1e8fc:	beq	1e91c <flatcc_builder_offset_vector_push@@Base+0x48>
   1e900:	add	r2, r2, #1
   1e904:	str	r2, [r1, #20]
   1e908:	mov	r1, #4
   1e90c:	bl	1e618 <flatcc_builder_start_struct@@Base+0x84>
   1e910:	cmp	r0, #0
   1e914:	strne	r4, [r0]
   1e918:	movne	r5, r0
   1e91c:	mov	r0, r5
   1e920:	pop	{r4, r5, fp, pc}
   1e924:	movw	r0, #30750	; 0x781e
   1e928:	movt	r0, #2
   1e92c:	movw	r1, #29698	; 0x7402
   1e930:	movt	r1, #2
   1e934:	movw	r3, #30801	; 0x7851
   1e938:	movt	r3, #2
   1e93c:	movw	r2, #934	; 0x3a6
   1e940:	bl	12f88 <__assert_fail@plt>

0001e944 <flatcc_builder_append_offset_vector@@Base>:
   1e944:	push	{r4, r5, r6, sl, fp, lr}
   1e948:	add	fp, sp, #16
   1e94c:	mov	r6, r0
   1e950:	ldr	r0, [r0, #32]
   1e954:	ldrh	r0, [r0, #14]
   1e958:	cmp	r0, #5
   1e95c:	bne	1e99c <flatcc_builder_append_offset_vector@@Base+0x58>
   1e960:	mov	r5, r2
   1e964:	mov	r4, r1
   1e968:	mov	r0, r6
   1e96c:	mov	r1, r2
   1e970:	mvn	r2, #-1073741824	; 0xc0000000
   1e974:	bl	1e71c <flatcc_builder_extend_vector@@Base+0x44>
   1e978:	mov	r1, r0
   1e97c:	mov	r0, #0
   1e980:	cmp	r1, #0
   1e984:	popne	{r4, r5, r6, sl, fp, pc}
   1e988:	lsl	r2, r5, #2
   1e98c:	mov	r0, r6
   1e990:	mov	r1, r4
   1e994:	bl	1e7e4 <flatcc_builder_vector_push@@Base+0x80>
   1e998:	pop	{r4, r5, r6, sl, fp, pc}
   1e99c:	movw	r0, #30750	; 0x781e
   1e9a0:	movt	r0, #2
   1e9a4:	movw	r1, #29698	; 0x7402
   1e9a8:	movt	r1, #2
   1e9ac:	movw	r3, #30899	; 0x78b3
   1e9b0:	movt	r3, #2
   1e9b4:	mov	r2, #948	; 0x3b4
   1e9b8:	bl	12f88 <__assert_fail@plt>

0001e9bc <flatcc_builder_extend_string@@Base>:
   1e9bc:	push	{r4, r5, fp, lr}
   1e9c0:	add	fp, sp, #8
   1e9c4:	mov	r5, r0
   1e9c8:	ldr	r0, [r0, #32]
   1e9cc:	ldrh	r0, [r0, #14]
   1e9d0:	cmp	r0, #6
   1e9d4:	bne	1ea04 <flatcc_builder_extend_string@@Base+0x48>
   1e9d8:	mov	r4, r1
   1e9dc:	mov	r0, r5
   1e9e0:	mvn	r2, #0
   1e9e4:	bl	1e71c <flatcc_builder_extend_vector@@Base+0x44>
   1e9e8:	cmp	r0, #0
   1e9ec:	movne	r0, #0
   1e9f0:	popne	{r4, r5, fp, pc}
   1e9f4:	mov	r0, r5
   1e9f8:	mov	r1, r4
   1e9fc:	pop	{r4, r5, fp, lr}
   1ea00:	b	1e618 <flatcc_builder_start_struct@@Base+0x84>
   1ea04:	movw	r0, #31015	; 0x7927
   1ea08:	movt	r0, #2
   1ea0c:	movw	r1, #29698	; 0x7402
   1ea10:	movt	r1, #2
   1ea14:	movw	r3, #31059	; 0x7953
   1ea18:	movt	r3, #2
   1ea1c:	movw	r2, #957	; 0x3bd
   1ea20:	bl	12f88 <__assert_fail@plt>

0001ea24 <flatcc_builder_append_string@@Base>:
   1ea24:	push	{r4, r5, r6, sl, fp, lr}
   1ea28:	add	fp, sp, #16
   1ea2c:	mov	r6, r0
   1ea30:	ldr	r0, [r0, #32]
   1ea34:	ldrh	r0, [r0, #14]
   1ea38:	cmp	r0, #6
   1ea3c:	bne	1ea78 <flatcc_builder_append_string@@Base+0x54>
   1ea40:	mov	r4, r2
   1ea44:	mov	r5, r1
   1ea48:	mov	r0, r6
   1ea4c:	mov	r1, r2
   1ea50:	mvn	r2, #0
   1ea54:	bl	1e71c <flatcc_builder_extend_vector@@Base+0x44>
   1ea58:	cmp	r0, #0
   1ea5c:	movne	r0, #0
   1ea60:	popne	{r4, r5, r6, sl, fp, pc}
   1ea64:	mov	r0, r6
   1ea68:	mov	r1, r5
   1ea6c:	mov	r2, r4
   1ea70:	pop	{r4, r5, r6, sl, fp, lr}
   1ea74:	b	1e7e4 <flatcc_builder_vector_push@@Base+0x80>
   1ea78:	movw	r0, #31015	; 0x7927
   1ea7c:	movt	r0, #2
   1ea80:	movw	r1, #29698	; 0x7402
   1ea84:	movt	r1, #2
   1ea88:	movw	r3, #31122	; 0x7992
   1ea8c:	movt	r3, #2
   1ea90:	movw	r2, #966	; 0x3c6
   1ea94:	bl	12f88 <__assert_fail@plt>

0001ea98 <flatcc_builder_append_string_str@@Base>:
   1ea98:	push	{r4, r5, fp, lr}
   1ea9c:	add	fp, sp, #8
   1eaa0:	mov	r4, r1
   1eaa4:	mov	r5, r0
   1eaa8:	mov	r0, r1
   1eaac:	bl	12f1c <strlen@plt>
   1eab0:	mov	r2, r0
   1eab4:	mov	r0, r5
   1eab8:	mov	r1, r4
   1eabc:	pop	{r4, r5, fp, lr}
   1eac0:	b	1ea24 <flatcc_builder_append_string@@Base>

0001eac4 <flatcc_builder_append_string_strn@@Base>:
   1eac4:	push	{r4, r5, fp, lr}
   1eac8:	add	fp, sp, #8
   1eacc:	mov	r4, r1
   1ead0:	mov	r5, r0
   1ead4:	mov	r0, r1
   1ead8:	mov	r1, r2
   1eadc:	bl	1eaf4 <flatcc_builder_append_string_strn@@Base+0x30>
   1eae0:	mov	r2, r0
   1eae4:	mov	r0, r5
   1eae8:	mov	r1, r4
   1eaec:	pop	{r4, r5, fp, lr}
   1eaf0:	b	1ea24 <flatcc_builder_append_string@@Base>
   1eaf4:	push	{r4, r5, fp, lr}
   1eaf8:	add	fp, sp, #8
   1eafc:	mov	r4, r1
   1eb00:	mov	r5, r0
   1eb04:	mov	r1, #0
   1eb08:	mov	r2, r4
   1eb0c:	bl	12f58 <memchr@plt>
   1eb10:	cmp	r0, #0
   1eb14:	subne	r4, r0, r5
   1eb18:	mov	r0, r4
   1eb1c:	pop	{r4, r5, fp, pc}

0001eb20 <flatcc_builder_truncate_vector@@Base>:
   1eb20:	push	{fp, lr}
   1eb24:	mov	fp, sp
   1eb28:	ldr	r2, [r0, #32]
   1eb2c:	ldrh	r3, [r2, #14]
   1eb30:	cmp	r3, #4
   1eb34:	bne	1eb64 <flatcc_builder_truncate_vector@@Base+0x44>
   1eb38:	ldr	r3, [r2, #20]
   1eb3c:	cmp	r3, r1
   1eb40:	bcc	1eb84 <flatcc_builder_truncate_vector@@Base+0x64>
   1eb44:	sub	r3, r3, r1
   1eb48:	str	r3, [r2, #20]
   1eb4c:	ldr	r2, [r0, #32]
   1eb50:	ldr	r2, [r2, #16]
   1eb54:	mul	r1, r2, r1
   1eb58:	bl	1eba4 <flatcc_builder_truncate_vector@@Base+0x84>
   1eb5c:	mov	r0, #0
   1eb60:	pop	{fp, pc}
   1eb64:	movw	r0, #30501	; 0x7725
   1eb68:	movt	r0, #2
   1eb6c:	movw	r1, #29698	; 0x7402
   1eb70:	movt	r1, #2
   1eb74:	movw	r3, #31199	; 0x79df
   1eb78:	movt	r3, #2
   1eb7c:	movw	r2, #985	; 0x3d9
   1eb80:	bl	12f88 <__assert_fail@plt>
   1eb84:	movw	r0, #31262	; 0x7a1e
   1eb88:	movt	r0, #2
   1eb8c:	movw	r1, #29698	; 0x7402
   1eb90:	movt	r1, #2
   1eb94:	movw	r3, #31199	; 0x79df
   1eb98:	movt	r3, #2
   1eb9c:	movw	r2, #986	; 0x3da
   1eba0:	bl	12f88 <__assert_fail@plt>
   1eba4:	mov	r2, r1
   1eba8:	ldr	r1, [r0, #16]
   1ebac:	ldr	r3, [r0, #20]
   1ebb0:	sub	r3, r3, r2
   1ebb4:	str	r3, [r0, #20]
   1ebb8:	add	r0, r1, r3
   1ebbc:	mov	r1, #0
   1ebc0:	b	12f40 <memset@plt>

0001ebc4 <flatcc_builder_truncate_offset_vector@@Base>:
   1ebc4:	push	{fp, lr}
   1ebc8:	mov	fp, sp
   1ebcc:	ldr	r2, [r0, #32]
   1ebd0:	ldrh	r3, [r2, #14]
   1ebd4:	cmp	r3, #5
   1ebd8:	bne	1ec08 <flatcc_builder_truncate_offset_vector@@Base+0x44>
   1ebdc:	ldr	r3, [r2, #20]
   1ebe0:	cmp	r3, r1
   1ebe4:	bcc	1ec28 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   1ebe8:	sub	r3, r3, r1
   1ebec:	str	r3, [r2, #20]
   1ebf0:	ldr	r2, [r0, #32]
   1ebf4:	ldr	r2, [r2, #16]
   1ebf8:	mul	r1, r2, r1
   1ebfc:	bl	1eba4 <flatcc_builder_truncate_vector@@Base+0x84>
   1ec00:	mov	r0, #0
   1ec04:	pop	{fp, pc}
   1ec08:	movw	r0, #30750	; 0x781e
   1ec0c:	movt	r0, #2
   1ec10:	movw	r1, #29698	; 0x7402
   1ec14:	movt	r1, #2
   1ec18:	movw	r3, #31298	; 0x7a42
   1ec1c:	movt	r3, #2
   1ec20:	movw	r2, #994	; 0x3e2
   1ec24:	bl	12f88 <__assert_fail@plt>
   1ec28:	movw	r0, #31368	; 0x7a88
   1ec2c:	movt	r0, #2
   1ec30:	movw	r1, #29698	; 0x7402
   1ec34:	movt	r1, #2
   1ec38:	movw	r3, #31298	; 0x7a42
   1ec3c:	movt	r3, #2
   1ec40:	movw	r2, #995	; 0x3e3
   1ec44:	bl	12f88 <__assert_fail@plt>

0001ec48 <flatcc_builder_truncate_string@@Base>:
   1ec48:	push	{fp, lr}
   1ec4c:	mov	fp, sp
   1ec50:	ldr	r2, [r0, #32]
   1ec54:	ldrh	r3, [r2, #14]
   1ec58:	cmp	r3, #6
   1ec5c:	bne	1ec80 <flatcc_builder_truncate_string@@Base+0x38>
   1ec60:	ldr	r3, [r2, #20]
   1ec64:	cmp	r3, r1
   1ec68:	bcc	1eca0 <flatcc_builder_truncate_string@@Base+0x58>
   1ec6c:	sub	r3, r3, r1
   1ec70:	str	r3, [r2, #20]
   1ec74:	bl	1eba4 <flatcc_builder_truncate_vector@@Base+0x84>
   1ec78:	mov	r0, #0
   1ec7c:	pop	{fp, pc}
   1ec80:	movw	r0, #31015	; 0x7927
   1ec84:	movt	r0, #2
   1ec88:	movw	r1, #29698	; 0x7402
   1ec8c:	movt	r1, #2
   1ec90:	movw	r3, #31427	; 0x7ac3
   1ec94:	movt	r3, #2
   1ec98:	movw	r2, #1003	; 0x3eb
   1ec9c:	bl	12f88 <__assert_fail@plt>
   1eca0:	movw	r0, #31490	; 0x7b02
   1eca4:	movt	r0, #2
   1eca8:	movw	r1, #29698	; 0x7402
   1ecac:	movt	r1, #2
   1ecb0:	movw	r3, #31427	; 0x7ac3
   1ecb4:	movt	r3, #2
   1ecb8:	mov	r2, #1004	; 0x3ec
   1ecbc:	bl	12f88 <__assert_fail@plt>

0001ecc0 <flatcc_builder_start_vector@@Base>:
   1ecc0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ecc4:	add	fp, sp, #24
   1ecc8:	sub	sp, sp, #8
   1eccc:	mov	r5, r3
   1ecd0:	mov	r6, r1
   1ecd4:	mov	r4, r0
   1ecd8:	strh	r2, [sp, #6]
   1ecdc:	add	r0, sp, #6
   1ece0:	mov	r8, #4
   1ece4:	mov	r1, #4
   1ece8:	bl	1ed40 <flatcc_builder_start_vector@@Base+0x80>
   1ecec:	ldrh	r1, [sp, #6]
   1ecf0:	mov	r0, r4
   1ecf4:	bl	1e368 <flatcc_builder_start_buffer@@Base+0xbc>
   1ecf8:	mvn	r7, #0
   1ecfc:	cmp	r0, #0
   1ed00:	bne	1ed34 <flatcc_builder_start_vector@@Base+0x74>
   1ed04:	ldr	r0, [r4, #32]
   1ed08:	str	r6, [r0, #16]
   1ed0c:	ldr	r0, [r4, #32]
   1ed10:	mov	r7, #0
   1ed14:	str	r7, [r0, #20]
   1ed18:	ldr	r0, [r4, #32]
   1ed1c:	str	r5, [r0, #24]
   1ed20:	ldr	r0, [r4, #32]
   1ed24:	strh	r8, [r0, #14]
   1ed28:	mov	r0, r4
   1ed2c:	mvn	r1, #3
   1ed30:	bl	1e5e0 <flatcc_builder_start_struct@@Base+0x4c>
   1ed34:	mov	r0, r7
   1ed38:	sub	sp, fp, #24
   1ed3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ed40:	ldrh	r2, [r0]
   1ed44:	cmp	r2, r1
   1ed48:	strhcc	r1, [r0]
   1ed4c:	bx	lr

0001ed50 <flatcc_builder_start_offset_vector@@Base>:
   1ed50:	push	{r4, r5, r6, sl, fp, lr}
   1ed54:	add	fp, sp, #16
   1ed58:	mov	r4, r0
   1ed5c:	mov	r6, #4
   1ed60:	mov	r1, #4
   1ed64:	bl	1e368 <flatcc_builder_start_buffer@@Base+0xbc>
   1ed68:	mvn	r5, #0
   1ed6c:	cmp	r0, #0
   1ed70:	beq	1ed7c <flatcc_builder_start_offset_vector@@Base+0x2c>
   1ed74:	mov	r0, r5
   1ed78:	pop	{r4, r5, r6, sl, fp, pc}
   1ed7c:	ldr	r0, [r4, #32]
   1ed80:	str	r6, [r0, #16]
   1ed84:	ldr	r0, [r4, #32]
   1ed88:	mov	r5, #0
   1ed8c:	str	r5, [r0, #20]
   1ed90:	ldr	r0, [r4, #32]
   1ed94:	mov	r1, #5
   1ed98:	strh	r1, [r0, #14]
   1ed9c:	mov	r0, r4
   1eda0:	mvn	r1, #3
   1eda4:	bl	1e5e0 <flatcc_builder_start_struct@@Base+0x4c>
   1eda8:	mov	r0, r5
   1edac:	pop	{r4, r5, r6, sl, fp, pc}

0001edb0 <flatcc_builder_create_offset_vector@@Base>:
   1edb0:	push	{r4, r5, r6, sl, fp, lr}
   1edb4:	add	fp, sp, #16
   1edb8:	mov	r6, r2
   1edbc:	mov	r5, r1
   1edc0:	mov	r4, r0
   1edc4:	bl	1ed50 <flatcc_builder_start_offset_vector@@Base>
   1edc8:	cmp	r0, #0
   1edcc:	beq	1edd8 <flatcc_builder_create_offset_vector@@Base+0x28>
   1edd0:	mov	r0, #0
   1edd4:	pop	{r4, r5, r6, sl, fp, pc}
   1edd8:	mov	r0, r4
   1eddc:	mov	r1, r6
   1ede0:	bl	1e89c <flatcc_builder_extend_offset_vector@@Base>
   1ede4:	cmp	r0, #0
   1ede8:	beq	1edd0 <flatcc_builder_create_offset_vector@@Base+0x20>
   1edec:	lsl	r2, r6, #2
   1edf0:	mov	r1, r5
   1edf4:	bl	12eb0 <memcpy@plt>
   1edf8:	mov	r0, r4
   1edfc:	pop	{r4, r5, r6, sl, fp, lr}
   1ee00:	b	1ee04 <flatcc_builder_end_offset_vector@@Base>

0001ee04 <flatcc_builder_end_offset_vector@@Base>:
   1ee04:	push	{r4, r5, fp, lr}
   1ee08:	add	fp, sp, #8
   1ee0c:	mov	r4, r0
   1ee10:	ldr	r0, [r0, #32]
   1ee14:	ldrh	r1, [r0, #14]
   1ee18:	cmp	r1, #5
   1ee1c:	bne	1ee48 <flatcc_builder_end_offset_vector@@Base+0x44>
   1ee20:	ldr	r2, [r0, #20]
   1ee24:	ldr	r1, [r4, #16]
   1ee28:	mov	r0, r4
   1ee2c:	bl	1f9a4 <flatcc_builder_create_offset_vector_direct@@Base>
   1ee30:	mov	r5, r0
   1ee34:	cmp	r0, #0
   1ee38:	movne	r0, r4
   1ee3c:	blne	1e528 <flatcc_builder_end_buffer@@Base+0xc8>
   1ee40:	mov	r0, r5
   1ee44:	pop	{r4, r5, fp, pc}
   1ee48:	movw	r0, #30750	; 0x781e
   1ee4c:	movt	r0, #2
   1ee50:	movw	r1, #29698	; 0x7402
   1ee54:	movt	r1, #2
   1ee58:	movw	r3, #32333	; 0x7e4d
   1ee5c:	movt	r3, #2
   1ee60:	movw	r2, #1480	; 0x5c8
   1ee64:	bl	12f88 <__assert_fail@plt>

0001ee68 <flatcc_builder_start_string@@Base>:
   1ee68:	push	{r4, r5, r6, sl, fp, lr}
   1ee6c:	add	fp, sp, #16
   1ee70:	mov	r4, r0
   1ee74:	mov	r6, #1
   1ee78:	mov	r1, #1
   1ee7c:	bl	1e368 <flatcc_builder_start_buffer@@Base+0xbc>
   1ee80:	mvn	r5, #0
   1ee84:	cmp	r0, #0
   1ee88:	beq	1ee94 <flatcc_builder_start_string@@Base+0x2c>
   1ee8c:	mov	r0, r5
   1ee90:	pop	{r4, r5, r6, sl, fp, pc}
   1ee94:	ldr	r0, [r4, #32]
   1ee98:	str	r6, [r0, #16]
   1ee9c:	ldr	r0, [r4, #32]
   1eea0:	mov	r5, #0
   1eea4:	str	r5, [r0, #20]
   1eea8:	ldr	r0, [r4, #32]
   1eeac:	mov	r1, #6
   1eeb0:	strh	r1, [r0, #14]
   1eeb4:	mov	r0, r4
   1eeb8:	mvn	r1, #3
   1eebc:	bl	1e5e0 <flatcc_builder_start_struct@@Base+0x4c>
   1eec0:	mov	r0, r5
   1eec4:	pop	{r4, r5, r6, sl, fp, pc}

0001eec8 <flatcc_builder_reserve_table@@Base>:
   1eec8:	cmn	r1, #1
   1eecc:	ble	1eed4 <flatcc_builder_reserve_table@@Base+0xc>
   1eed0:	b	1eefc <flatcc_builder_reserve_table@@Base+0x34>
   1eed4:	push	{fp, lr}
   1eed8:	mov	fp, sp
   1eedc:	movw	r0, #31589	; 0x7b65
   1eee0:	movt	r0, #2
   1eee4:	movw	r1, #29698	; 0x7402
   1eee8:	movt	r1, #2
   1eeec:	movw	r3, #31524	; 0x7b24
   1eef0:	movt	r3, #2
   1eef4:	movw	r2, #1065	; 0x429
   1eef8:	bl	12f88 <__assert_fail@plt>
   1eefc:	push	{r4, r5, r6, sl, fp, lr}
   1ef00:	add	fp, sp, #16
   1ef04:	sub	sp, sp, #8
   1ef08:	mov	r6, r1
   1ef0c:	mov	r4, r0
   1ef10:	ldr	r0, [r0, #32]
   1ef14:	ldrh	r1, [r0, #28]
   1ef18:	ldr	r0, [r0, #16]
   1ef1c:	mov	r2, #1
   1ef20:	str	r2, [sp]
   1ef24:	mov	r2, #4
   1ef28:	add	r3, r2, r6, lsl #1
   1ef2c:	add	r2, r0, r1, lsl #1
   1ef30:	mov	r5, #0
   1ef34:	mov	r0, r4
   1ef38:	mov	r1, #0
   1ef3c:	bl	1dbfc <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   1ef40:	str	r0, [r4, #4]
   1ef44:	cmp	r0, #0
   1ef48:	beq	1ef84 <flatcc_builder_reserve_table@@Base+0xbc>
   1ef4c:	lsl	r1, r6, #1
   1ef50:	add	r0, r0, #4
   1ef54:	str	r0, [r4, #4]
   1ef58:	ldr	r0, [r4, #32]
   1ef5c:	ldr	r2, [r0, #20]
   1ef60:	str	r5, [sp]
   1ef64:	orr	r3, r1, #1
   1ef68:	mov	r0, r4
   1ef6c:	mov	r1, #3
   1ef70:	bl	1dbfc <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   1ef74:	str	r0, [r4]
   1ef78:	cmp	r0, #0
   1ef7c:	mvneq	r5, #0
   1ef80:	b	1ef88 <flatcc_builder_reserve_table@@Base+0xc0>
   1ef84:	mvn	r5, #0
   1ef88:	mov	r0, r5
   1ef8c:	sub	sp, fp, #16
   1ef90:	pop	{r4, r5, r6, sl, fp, pc}

0001ef94 <flatcc_builder_start_table@@Base>:
   1ef94:	push	{r4, r5, r6, sl, fp, lr}
   1ef98:	add	fp, sp, #16
   1ef9c:	mov	r6, r1
   1efa0:	mov	r4, r0
   1efa4:	mov	r1, #4
   1efa8:	bl	1e368 <flatcc_builder_start_buffer@@Base+0xbc>
   1efac:	mvn	r5, #0
   1efb0:	cmp	r0, #0
   1efb4:	bne	1f02c <flatcc_builder_start_table@@Base+0x98>
   1efb8:	ldr	r0, [r4, #4]
   1efbc:	ldr	r1, [r4, #32]
   1efc0:	ldr	r2, [r4, #52]	; 0x34
   1efc4:	sub	r0, r0, r2
   1efc8:	str	r0, [r1, #16]
   1efcc:	ldr	r0, [r4]
   1efd0:	ldr	r1, [r4, #32]
   1efd4:	ldr	r2, [r4, #76]	; 0x4c
   1efd8:	sub	r0, r0, r2
   1efdc:	str	r0, [r1, #20]
   1efe0:	ldr	r0, [r4, #12]
   1efe4:	ldr	r1, [r4, #32]
   1efe8:	str	r0, [r1, #24]
   1efec:	ldr	r0, [r4, #32]
   1eff0:	ldrh	r1, [r4, #8]
   1eff4:	strh	r1, [r0, #28]
   1eff8:	mov	r0, #0
   1effc:	strh	r0, [r4, #8]
   1f000:	movw	r0, #15186	; 0x3b52
   1f004:	movt	r0, #12137	; 0x2f69
   1f008:	str	r0, [r4, #12]
   1f00c:	ldr	r0, [r4, #32]
   1f010:	mov	r1, #3
   1f014:	strh	r1, [r0, #14]
   1f018:	mov	r0, r4
   1f01c:	mov	r1, r6
   1f020:	bl	1eefc <flatcc_builder_reserve_table@@Base+0x34>
   1f024:	cmp	r0, #0
   1f028:	beq	1f034 <flatcc_builder_start_table@@Base+0xa0>
   1f02c:	mov	r0, r5
   1f030:	pop	{r4, r5, r6, sl, fp, pc}
   1f034:	mov	r0, r4
   1f038:	movw	r1, #65532	; 0xfffc
   1f03c:	bl	1e5e0 <flatcc_builder_start_struct@@Base+0x4c>
   1f040:	mov	r5, #0
   1f044:	mov	r0, r5
   1f048:	pop	{r4, r5, r6, sl, fp, pc}

0001f04c <flatcc_builder_create_vtable@@Base>:
   1f04c:	push	{fp, lr}
   1f050:	mov	fp, sp
   1f054:	sub	sp, sp, #72	; 0x48
   1f058:	mov	r3, #0
   1f05c:	str	r3, [sp, #4]
   1f060:	str	r3, [sp]
   1f064:	cmp	r2, #0
   1f068:	strne	r1, [sp, #8]
   1f06c:	strne	r2, [sp]
   1f070:	strne	r2, [sp, #12]
   1f074:	movne	r1, #1
   1f078:	strne	r1, [sp, #4]
   1f07c:	ldr	r1, [r0, #152]	; 0x98
   1f080:	cmp	r1, #0
   1f084:	bne	1f094 <flatcc_builder_create_vtable@@Base+0x48>
   1f088:	ldr	r1, [r0, #180]	; 0xb4
   1f08c:	cmp	r1, #0
   1f090:	beq	1f0b0 <flatcc_builder_create_vtable@@Base+0x64>
   1f094:	mov	r1, sp
   1f098:	bl	1df6c <flatcc_builder_embed_buffer@@Base+0x1e0>
   1f09c:	cmp	r0, #0
   1f0a0:	beq	1f0c0 <flatcc_builder_create_vtable@@Base+0x74>
   1f0a4:	add	r0, r0, #1
   1f0a8:	mov	sp, fp
   1f0ac:	pop	{fp, pc}
   1f0b0:	mov	r1, sp
   1f0b4:	bl	1f0cc <flatcc_builder_create_vtable@@Base+0x80>
   1f0b8:	cmp	r0, #0
   1f0bc:	bne	1f0a8 <flatcc_builder_create_vtable@@Base+0x5c>
   1f0c0:	mov	r0, #0
   1f0c4:	mov	sp, fp
   1f0c8:	pop	{fp, pc}
   1f0cc:	push	{r4, sl, fp, lr}
   1f0d0:	add	fp, sp, #8
   1f0d4:	sub	sp, sp, #8
   1f0d8:	ldr	r4, [r0, #140]	; 0x8c
   1f0dc:	ldr	r3, [r1]
   1f0e0:	add	r2, r3, r4
   1f0e4:	str	r2, [r0, #140]	; 0x8c
   1f0e8:	cmn	r3, #1
   1f0ec:	ble	1f140 <flatcc_builder_create_vtable@@Base+0xf4>
   1f0f0:	ldr	r2, [r1, #4]
   1f0f4:	ldr	ip, [r0, #36]	; 0x24
   1f0f8:	ldr	lr, [r0, #44]	; 0x2c
   1f0fc:	str	r3, [sp]
   1f100:	add	r1, r1, #8
   1f104:	mov	r0, ip
   1f108:	mov	r3, r4
   1f10c:	blx	lr
   1f110:	cmp	r0, #0
   1f114:	addeq	r0, r4, #1
   1f118:	subeq	sp, fp, #8
   1f11c:	popeq	{r4, sl, fp, pc}
   1f120:	movw	r0, #34216	; 0x85a8
   1f124:	movt	r0, #2
   1f128:	movw	r1, #29698	; 0x7402
   1f12c:	movt	r1, #2
   1f130:	movw	r3, #34083	; 0x8523
   1f134:	movt	r3, #2
   1f138:	movw	r2, #677	; 0x2a5
   1f13c:	bl	12f88 <__assert_fail@plt>
   1f140:	movw	r0, #34216	; 0x85a8
   1f144:	movt	r0, #2
   1f148:	movw	r1, #29698	; 0x7402
   1f14c:	movt	r1, #2
   1f150:	movw	r3, #34083	; 0x8523
   1f154:	movt	r3, #2
   1f158:	movw	r2, #673	; 0x2a1
   1f15c:	bl	12f88 <__assert_fail@plt>

0001f160 <flatcc_builder_create_cached_vtable@@Base>:
   1f160:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f164:	add	fp, sp, #28
   1f168:	sub	sp, sp, #20
   1f16c:	mov	r4, r2
   1f170:	mov	r9, r1
   1f174:	mov	sl, r0
   1f178:	mov	r1, r3
   1f17c:	bl	1f354 <flatcc_builder_create_cached_vtable@@Base+0x1f4>
   1f180:	cmp	r0, #0
   1f184:	beq	1f2a8 <flatcc_builder_create_cached_vtable@@Base+0x148>
   1f188:	mov	r7, r0
   1f18c:	ldr	r6, [r0]
   1f190:	mov	r5, #0
   1f194:	cmp	r6, #0
   1f198:	mov	r8, #0
   1f19c:	beq	1f234 <flatcc_builder_create_cached_vtable@@Base+0xd4>
   1f1a0:	ldr	r5, [sl, #68]	; 0x44
   1f1a4:	str	sl, [sp, #16]
   1f1a8:	ldr	sl, [sl, #100]	; 0x64
   1f1ac:	mov	r0, #0
   1f1b0:	str	r7, [sp, #8]
   1f1b4:	str	r0, [sp, #12]
   1f1b8:	add	r8, sl, r6
   1f1bc:	ldr	r0, [r8, #8]
   1f1c0:	mov	r1, r5
   1f1c4:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   1f1c8:	cmp	r0, r4
   1f1cc:	bne	1f1e4 <flatcc_builder_create_cached_vtable@@Base+0x84>
   1f1d0:	mov	r0, r9
   1f1d4:	mov	r2, r4
   1f1d8:	bl	12ebc <memcmp@plt>
   1f1dc:	cmp	r0, #0
   1f1e0:	beq	1f1f8 <flatcc_builder_create_cached_vtable@@Base+0x98>
   1f1e4:	ldr	r6, [r8, #12]!
   1f1e8:	cmp	r6, #0
   1f1ec:	mov	r7, r8
   1f1f0:	bne	1f1b8 <flatcc_builder_create_cached_vtable@@Base+0x58>
   1f1f4:	b	1f224 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   1f1f8:	ldr	r0, [sp, #16]
   1f1fc:	ldr	r0, [r0, #152]	; 0x98
   1f200:	ldr	r1, [r8, #4]
   1f204:	cmp	r1, r0
   1f208:	beq	1f330 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   1f20c:	mov	r7, r8
   1f210:	ldr	r6, [r7, #12]!
   1f214:	cmp	r6, #0
   1f218:	mov	r0, r8
   1f21c:	bne	1f1b4 <flatcc_builder_create_cached_vtable@@Base+0x54>
   1f220:	b	1f228 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   1f224:	ldr	r8, [sp, #12]
   1f228:	ldr	sl, [sp, #16]
   1f22c:	mov	r5, #0
   1f230:	ldr	r7, [sp, #8]
   1f234:	ldr	r2, [sl, #124]	; 0x7c
   1f238:	str	r5, [sp]
   1f23c:	mov	r0, sl
   1f240:	mov	r1, #6
   1f244:	mov	r3, #16
   1f248:	bl	1dbfc <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   1f24c:	cmp	r0, #0
   1f250:	beq	1f31c <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   1f254:	mov	r6, r0
   1f258:	ldr	r0, [sl, #124]	; 0x7c
   1f25c:	ldr	r1, [sl, #152]	; 0x98
   1f260:	add	r2, r0, #16
   1f264:	str	r2, [sl, #124]	; 0x7c
   1f268:	str	r1, [r6, #4]
   1f26c:	ldr	r1, [r7]
   1f270:	str	r1, [r6, #12]
   1f274:	str	r0, [r7]
   1f278:	mov	r0, sl
   1f27c:	mov	r1, r9
   1f280:	mov	r2, r4
   1f284:	bl	1f04c <flatcc_builder_create_vtable@@Base>
   1f288:	str	r0, [r6]
   1f28c:	cmp	r0, #0
   1f290:	beq	1f31c <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   1f294:	cmp	r8, #0
   1f298:	beq	1f2b0 <flatcc_builder_create_cached_vtable@@Base+0x150>
   1f29c:	ldr	r0, [r8, #8]
   1f2a0:	str	r0, [r6, #8]
   1f2a4:	b	1f318 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   1f2a8:	mov	r5, #0
   1f2ac:	b	1f31c <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   1f2b0:	ldr	r0, [sl, #172]	; 0xac
   1f2b4:	cmp	r0, #0
   1f2b8:	beq	1f2d8 <flatcc_builder_create_cached_vtable@@Base+0x178>
   1f2bc:	ldr	r1, [sl, #120]	; 0x78
   1f2c0:	add	r1, r1, r4
   1f2c4:	cmp	r0, r1
   1f2c8:	bcs	1f2d8 <flatcc_builder_create_cached_vtable@@Base+0x178>
   1f2cc:	mov	r0, sl
   1f2d0:	bl	1d8f4 <flatcc_builder_flush_vtable_cache@@Base>
   1f2d4:	b	1f318 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   1f2d8:	ldr	r2, [sl, #120]	; 0x78
   1f2dc:	mov	r0, #0
   1f2e0:	str	r0, [sp]
   1f2e4:	mov	r0, sl
   1f2e8:	mov	r1, #2
   1f2ec:	mov	r3, r4
   1f2f0:	bl	1dbfc <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   1f2f4:	cmp	r0, #0
   1f2f8:	beq	1f328 <flatcc_builder_create_cached_vtable@@Base+0x1c8>
   1f2fc:	ldr	r1, [sl, #120]	; 0x78
   1f300:	str	r1, [r6, #8]
   1f304:	add	r1, r1, r4
   1f308:	str	r1, [sl, #120]	; 0x78
   1f30c:	mov	r1, r9
   1f310:	mov	r2, r4
   1f314:	bl	12eb0 <memcpy@plt>
   1f318:	ldr	r5, [r6]
   1f31c:	mov	r0, r5
   1f320:	sub	sp, fp, #28
   1f324:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f328:	mvn	r5, #0
   1f32c:	b	1f31c <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   1f330:	ldr	r1, [sp, #8]
   1f334:	cmp	r7, r1
   1f338:	ldrne	r0, [r8, #12]
   1f33c:	strne	r0, [r7]
   1f340:	ldrne	r0, [r1]
   1f344:	strne	r0, [r8, #12]
   1f348:	strne	r6, [r1]
   1f34c:	ldr	r5, [r8]
   1f350:	b	1f31c <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   1f354:	push	{r4, r5, fp, lr}
   1f358:	add	fp, sp, #8
   1f35c:	mov	r4, r1
   1f360:	mov	r5, r0
   1f364:	ldr	r0, [r0, #116]	; 0x74
   1f368:	cmp	r0, #0
   1f36c:	bne	1f388 <flatcc_builder_create_cached_vtable@@Base+0x228>
   1f370:	mov	r0, r5
   1f374:	bl	20ab4 <flatcc_builder_get_emit_context@@Base+0x80>
   1f378:	mov	r1, r0
   1f37c:	mov	r0, #0
   1f380:	cmp	r1, #0
   1f384:	popne	{r4, r5, fp, pc}
   1f388:	ldr	r0, [r5, #92]	; 0x5c
   1f38c:	ldr	r1, [r5, #116]	; 0x74
   1f390:	rsb	r1, r1, #32
   1f394:	lsr	r1, r4, r1
   1f398:	add	r0, r0, r1, lsl #2
   1f39c:	pop	{r4, r5, fp, pc}

0001f3a0 <flatcc_builder_create_table@@Base>:
   1f3a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3a4:	add	fp, sp, #28
   1f3a8:	sub	sp, sp, #84	; 0x54
   1f3ac:	strh	r3, [fp, #-30]	; 0xffffffe2
   1f3b0:	ldr	r4, [fp, #12]
   1f3b4:	cmn	r4, #1
   1f3b8:	ble	1f4e8 <flatcc_builder_create_table@@Base+0x148>
   1f3bc:	ldr	r8, [fp, #16]
   1f3c0:	tst	r8, #1
   1f3c4:	beq	1f508 <flatcc_builder_create_table@@Base+0x168>
   1f3c8:	mov	sl, r2
   1f3cc:	mov	r6, r1
   1f3d0:	mov	r5, r0
   1f3d4:	sub	r0, fp, #30
   1f3d8:	mov	r1, #4
   1f3dc:	bl	1ed40 <flatcc_builder_start_vector@@Base+0x80>
   1f3e0:	ldrh	r7, [fp, #-30]	; 0xffffffe2
   1f3e4:	mov	r0, r5
   1f3e8:	mov	r1, r7
   1f3ec:	bl	1e1d0 <flatcc_builder_create_buffer@@Base+0x1d0>
   1f3f0:	mov	r0, r5
   1f3f4:	mov	r1, sl
   1f3f8:	mov	r2, r7
   1f3fc:	bl	1df54 <flatcc_builder_embed_buffer@@Base+0x1c8>
   1f400:	mov	r9, r0
   1f404:	mvn	r0, #3
   1f408:	sub	r0, r0, sl
   1f40c:	sub	r0, r0, r9
   1f410:	str	r5, [sp]
   1f414:	ldr	r1, [r5, #136]	; 0x88
   1f418:	add	r5, r0, r1
   1f41c:	rsb	r0, r8, #1
   1f420:	add	r0, r0, r5
   1f424:	bl	1df68 <flatcc_builder_embed_buffer@@Base+0x1dc>
   1f428:	str	r0, [fp, #-36]	; 0xffffffdc
   1f42c:	cmp	r4, #1
   1f430:	blt	1f460 <flatcc_builder_create_table@@Base+0xc0>
   1f434:	mvn	r0, #3
   1f438:	ldr	r7, [fp, #8]
   1f43c:	sub	r5, r0, r5
   1f440:	ldrh	r8, [r7], #2
   1f444:	ldr	r0, [r8, r6]
   1f448:	add	r0, r5, r0
   1f44c:	sub	r0, r0, r8
   1f450:	bl	1df68 <flatcc_builder_embed_buffer@@Base+0x1dc>
   1f454:	str	r0, [r8, r6]
   1f458:	subs	r4, r4, #1
   1f45c:	bne	1f440 <flatcc_builder_create_table@@Base+0xa0>
   1f460:	sub	r0, fp, #36	; 0x24
   1f464:	str	r0, [sp, #12]
   1f468:	mov	r0, #4
   1f46c:	str	r0, [sp, #4]
   1f470:	str	r0, [sp, #16]
   1f474:	mov	r0, #1
   1f478:	str	r0, [sp, #8]
   1f47c:	cmp	sl, #0
   1f480:	beq	1f49c <flatcc_builder_create_table@@Base+0xfc>
   1f484:	str	r6, [sp, #20]
   1f488:	str	sl, [sp, #24]
   1f48c:	mov	r0, #2
   1f490:	str	r0, [sp, #8]
   1f494:	add	r0, sl, #4
   1f498:	str	r0, [sp, #4]
   1f49c:	cmp	r9, #0
   1f4a0:	ldr	r0, [sp]
   1f4a4:	beq	1f4d8 <flatcc_builder_create_table@@Base+0x138>
   1f4a8:	ldr	r2, [sp, #4]
   1f4ac:	ldr	r1, [sp, #8]
   1f4b0:	add	r2, r2, r9
   1f4b4:	str	r2, [sp, #4]
   1f4b8:	add	r2, sp, #4
   1f4bc:	add	r3, r2, r1, lsl #3
   1f4c0:	movw	r2, #29168	; 0x71f0
   1f4c4:	movt	r2, #2
   1f4c8:	str	r2, [r3, #8]
   1f4cc:	str	r9, [r3, #12]
   1f4d0:	add	r1, r1, #1
   1f4d4:	str	r1, [sp, #8]
   1f4d8:	add	r1, sp, #4
   1f4dc:	bl	1df6c <flatcc_builder_embed_buffer@@Base+0x1e0>
   1f4e0:	sub	sp, fp, #28
   1f4e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4e8:	movw	r0, #31582	; 0x7b5e
   1f4ec:	movt	r0, #2
   1f4f0:	movw	r1, #29698	; 0x7402
   1f4f4:	movt	r1, #2
   1f4f8:	movw	r3, #31600	; 0x7b70
   1f4fc:	movt	r3, #2
   1f500:	movw	r2, #1237	; 0x4d5
   1f504:	bl	12f88 <__assert_fail@plt>
   1f508:	movw	r0, #31756	; 0x7c0c
   1f50c:	movt	r0, #2
   1f510:	movw	r1, #29698	; 0x7402
   1f514:	movt	r1, #2
   1f518:	movw	r3, #31600	; 0x7b70
   1f51c:	movt	r3, #2
   1f520:	movw	r2, #1243	; 0x4db
   1f524:	bl	12f88 <__assert_fail@plt>

0001f528 <flatcc_builder_check_required_field@@Base>:
   1f528:	ldr	r2, [r0, #32]
   1f52c:	ldrh	r2, [r2, #14]
   1f530:	cmp	r2, #3
   1f534:	bne	1f564 <flatcc_builder_check_required_field@@Base+0x3c>
   1f538:	ldrh	r3, [r0, #8]
   1f53c:	mov	r2, #0
   1f540:	cmp	r3, r1
   1f544:	bls	1f55c <flatcc_builder_check_required_field@@Base+0x34>
   1f548:	ldr	r0, [r0, #4]
   1f54c:	add	r0, r0, r1, lsl #1
   1f550:	ldrh	r2, [r0]
   1f554:	cmp	r2, #0
   1f558:	movwne	r2, #1
   1f55c:	mov	r0, r2
   1f560:	bx	lr
   1f564:	push	{fp, lr}
   1f568:	mov	fp, sp
   1f56c:	movw	r0, #31767	; 0x7c17
   1f570:	movt	r0, #2
   1f574:	movw	r1, #29698	; 0x7402
   1f578:	movt	r1, #2
   1f57c:	movw	r3, #31810	; 0x7c42
   1f580:	movt	r3, #2
   1f584:	movw	r2, #1272	; 0x4f8
   1f588:	bl	12f88 <__assert_fail@plt>

0001f58c <flatcc_builder_check_union_field@@Base>:
   1f58c:	mov	r2, r0
   1f590:	ldr	r0, [r0, #32]
   1f594:	ldrh	r0, [r0, #14]
   1f598:	cmp	r0, #3
   1f59c:	bne	1f5fc <flatcc_builder_check_union_field@@Base+0x70>
   1f5a0:	mov	r0, #0
   1f5a4:	cmp	r1, #0
   1f5a8:	ldrhne	r3, [r2, #8]
   1f5ac:	cmpne	r3, r1
   1f5b0:	bhi	1f5b8 <flatcc_builder_check_union_field@@Base+0x2c>
   1f5b4:	bx	lr
   1f5b8:	ldr	r0, [r2, #4]
   1f5bc:	add	r0, r0, r1, lsl #1
   1f5c0:	ldrh	r1, [r0, #-2]
   1f5c4:	cmp	r1, #0
   1f5c8:	beq	1f5ec <flatcc_builder_check_union_field@@Base+0x60>
   1f5cc:	ldr	r2, [r2, #16]
   1f5d0:	ldrb	r1, [r2, r1]
   1f5d4:	ldrh	r0, [r0]
   1f5d8:	cmp	r1, #0
   1f5dc:	beq	1f5f0 <flatcc_builder_check_union_field@@Base+0x64>
   1f5e0:	cmp	r0, #0
   1f5e4:	movwne	r0, #1
   1f5e8:	bx	lr
   1f5ec:	ldrh	r0, [r0]
   1f5f0:	clz	r0, r0
   1f5f4:	lsr	r0, r0, #5
   1f5f8:	bx	lr
   1f5fc:	push	{fp, lr}
   1f600:	mov	fp, sp
   1f604:	movw	r0, #31767	; 0x7c17
   1f608:	movt	r0, #2
   1f60c:	movw	r1, #29698	; 0x7402
   1f610:	movt	r1, #2
   1f614:	movw	r3, #31893	; 0x7c95
   1f618:	movt	r3, #2
   1f61c:	movw	r2, #1279	; 0x4ff
   1f620:	bl	12f88 <__assert_fail@plt>

0001f624 <flatcc_builder_check_required@@Base>:
   1f624:	push	{fp, lr}
   1f628:	mov	fp, sp
   1f62c:	mov	r3, r0
   1f630:	ldr	r0, [r0, #32]
   1f634:	ldrh	r0, [r0, #14]
   1f638:	cmp	r0, #3
   1f63c:	bne	1f694 <flatcc_builder_check_required@@Base+0x70>
   1f640:	ldrh	ip, [r3, #8]
   1f644:	mov	r0, #0
   1f648:	cmp	ip, r2
   1f64c:	movge	r0, #1
   1f650:	cmpge	r2, #1
   1f654:	bge	1f65c <flatcc_builder_check_required@@Base+0x38>
   1f658:	pop	{fp, pc}
   1f65c:	ldr	ip, [r3, #4]
   1f660:	mov	lr, #0
   1f664:	b	1f678 <flatcc_builder_check_required@@Base+0x54>
   1f668:	add	lr, lr, #1
   1f66c:	add	r1, r1, #2
   1f670:	cmp	lr, r2
   1f674:	popge	{fp, pc}
   1f678:	ldrh	r3, [r1]
   1f67c:	add	r3, ip, r3, lsl #1
   1f680:	ldrh	r3, [r3]
   1f684:	cmp	r3, #0
   1f688:	bne	1f668 <flatcc_builder_check_required@@Base+0x44>
   1f68c:	mov	r0, #0
   1f690:	pop	{fp, pc}
   1f694:	movw	r0, #31767	; 0x7c17
   1f698:	movt	r0, #2
   1f69c:	movw	r1, #29698	; 0x7402
   1f6a0:	movt	r1, #2
   1f6a4:	movw	r3, #31973	; 0x7ce5
   1f6a8:	movt	r3, #2
   1f6ac:	movw	r2, #1297	; 0x511
   1f6b0:	bl	12f88 <__assert_fail@plt>

0001f6b4 <flatcc_builder_end_table@@Base>:
   1f6b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f6b8:	add	fp, sp, #24
   1f6bc:	sub	sp, sp, #16
   1f6c0:	mov	r4, r0
   1f6c4:	ldr	r0, [r0, #32]
   1f6c8:	ldrh	r0, [r0, #14]
   1f6cc:	cmp	r0, #3
   1f6d0:	bne	1f7e0 <flatcc_builder_end_table@@Base+0x12c>
   1f6d4:	ldrh	r0, [r4, #8]
   1f6d8:	mov	r1, #4
   1f6dc:	add	r0, r1, r0, lsl #1
   1f6e0:	ldr	r6, [r4, #4]
   1f6e4:	strh	r0, [r6, #-4]!
   1f6e8:	ldrh	r1, [r4, #20]
   1f6ec:	add	r1, r1, #4
   1f6f0:	strh	r1, [r6, #2]
   1f6f4:	uxth	r5, r0
   1f6f8:	ldr	r0, [r4, #12]
   1f6fc:	eor	r0, r0, r5
   1f700:	movw	r2, #31153	; 0x79b1
   1f704:	movt	r2, #40503	; 0x9e37
   1f708:	mul	r0, r0, r2
   1f70c:	uxth	r1, r1
   1f710:	eor	r0, r0, r1
   1f714:	mul	r3, r0, r2
   1f718:	str	r3, [r4, #12]
   1f71c:	mov	r0, r4
   1f720:	mov	r1, r6
   1f724:	mov	r2, r5
   1f728:	bl	1f160 <flatcc_builder_create_cached_vtable@@Base>
   1f72c:	cmp	r0, #0
   1f730:	beq	1f7d0 <flatcc_builder_end_table@@Base+0x11c>
   1f734:	mov	r7, r0
   1f738:	mov	r8, #0
   1f73c:	mov	r0, r6
   1f740:	mov	r1, #0
   1f744:	mov	r2, r5
   1f748:	bl	12f40 <memset@plt>
   1f74c:	ldrh	r3, [r4, #130]	; 0x82
   1f750:	ldr	r0, [r4, #76]	; 0x4c
   1f754:	ldr	r6, [r4]
   1f758:	ldr	r1, [r4, #16]
   1f75c:	ldr	r2, [r4, #20]
   1f760:	ldr	r5, [r4, #32]
   1f764:	ldr	r5, [r5, #20]
   1f768:	add	r0, r0, r5
   1f76c:	sub	r6, r6, r0
   1f770:	asr	r6, r6, #1
   1f774:	stm	sp, {r0, r6, r7}
   1f778:	mov	r0, r4
   1f77c:	bl	1f3a0 <flatcc_builder_create_table@@Base>
   1f780:	cmp	r0, #0
   1f784:	beq	1f7d4 <flatcc_builder_end_table@@Base+0x120>
   1f788:	mov	r5, r0
   1f78c:	ldr	r0, [r4, #32]
   1f790:	ldr	r1, [r4, #52]	; 0x34
   1f794:	ldr	r2, [r4, #76]	; 0x4c
   1f798:	ldr	r3, [r0, #24]
   1f79c:	str	r3, [r4, #12]
   1f7a0:	ldrh	r3, [r0, #28]
   1f7a4:	strh	r3, [r4, #8]
   1f7a8:	ldr	r3, [r0, #16]
   1f7ac:	add	r1, r1, r3
   1f7b0:	str	r1, [r4, #4]
   1f7b4:	ldr	r0, [r0, #20]
   1f7b8:	add	r0, r2, r0
   1f7bc:	str	r0, [r4]
   1f7c0:	mov	r0, r4
   1f7c4:	bl	1e528 <flatcc_builder_end_buffer@@Base+0xc8>
   1f7c8:	mov	r8, r5
   1f7cc:	b	1f7d4 <flatcc_builder_end_table@@Base+0x120>
   1f7d0:	mov	r8, #0
   1f7d4:	mov	r0, r8
   1f7d8:	sub	sp, fp, #24
   1f7dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f7e0:	movw	r0, #31767	; 0x7c17
   1f7e4:	movt	r0, #2
   1f7e8:	movw	r1, #29698	; 0x7402
   1f7ec:	movt	r1, #2
   1f7f0:	movw	r3, #32063	; 0x7d3f
   1f7f4:	movt	r3, #2
   1f7f8:	movw	r2, #1317	; 0x525
   1f7fc:	bl	12f88 <__assert_fail@plt>

0001f800 <flatcc_builder_create_vector@@Base>:
   1f800:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1f804:	add	fp, sp, #24
   1f808:	sub	sp, sp, #80	; 0x50
   1f80c:	mov	r4, r0
   1f810:	ldr	r0, [fp, #8]
   1f814:	strh	r0, [fp, #-26]	; 0xffffffe6
   1f818:	ldr	r0, [fp, #12]
   1f81c:	cmp	r2, r0
   1f820:	bhi	1f8f0 <flatcc_builder_create_vector@@Base+0xf0>
   1f824:	mov	r6, r3
   1f828:	mov	r7, r2
   1f82c:	mov	r8, r1
   1f830:	sub	r0, fp, #26
   1f834:	mov	r9, #4
   1f838:	mov	r1, #4
   1f83c:	bl	1ed40 <flatcc_builder_start_vector@@Base+0x80>
   1f840:	ldrh	r5, [fp, #-26]	; 0xffffffe6
   1f844:	mov	r0, r4
   1f848:	mov	r1, r5
   1f84c:	bl	1e1d0 <flatcc_builder_create_buffer@@Base+0x1d0>
   1f850:	mov	r0, r7
   1f854:	bl	1df68 <flatcc_builder_embed_buffer@@Base+0x1dc>
   1f858:	str	r7, [fp, #-32]	; 0xffffffe0
   1f85c:	mul	r6, r6, r7
   1f860:	mov	r0, r4
   1f864:	mov	r1, r6
   1f868:	mov	r2, r5
   1f86c:	bl	1df54 <flatcc_builder_embed_buffer@@Base+0x1c8>
   1f870:	str	r9, [sp]
   1f874:	sub	r1, fp, #32
   1f878:	str	r1, [sp, #8]
   1f87c:	str	r9, [sp, #12]
   1f880:	mov	r1, #1
   1f884:	str	r1, [sp, #4]
   1f888:	cmp	r6, #0
   1f88c:	beq	1f8a8 <flatcc_builder_create_vector@@Base+0xa8>
   1f890:	str	r8, [sp, #16]
   1f894:	str	r6, [sp, #20]
   1f898:	mov	r1, #2
   1f89c:	str	r1, [sp, #4]
   1f8a0:	add	r1, r6, #4
   1f8a4:	str	r1, [sp]
   1f8a8:	cmp	r0, #0
   1f8ac:	beq	1f8dc <flatcc_builder_create_vector@@Base+0xdc>
   1f8b0:	ldm	sp, {r1, r2}
   1f8b4:	add	r1, r1, r0
   1f8b8:	str	r1, [sp]
   1f8bc:	mov	r1, sp
   1f8c0:	add	r1, r1, r2, lsl #3
   1f8c4:	movw	r3, #29168	; 0x71f0
   1f8c8:	movt	r3, #2
   1f8cc:	str	r3, [r1, #8]
   1f8d0:	str	r0, [r1, #12]
   1f8d4:	add	r0, r2, #1
   1f8d8:	str	r0, [sp, #4]
   1f8dc:	mov	r1, sp
   1f8e0:	mov	r0, r4
   1f8e4:	bl	1df6c <flatcc_builder_embed_buffer@@Base+0x1e0>
   1f8e8:	sub	sp, fp, #24
   1f8ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f8f0:	movw	r0, #32129	; 0x7d81
   1f8f4:	movt	r0, #2
   1f8f8:	movw	r1, #29698	; 0x7402
   1f8fc:	movt	r1, #2
   1f900:	movw	r3, #32148	; 0x7d94
   1f904:	movt	r3, #2
   1f908:	movw	r2, #1365	; 0x555
   1f90c:	bl	12f88 <__assert_fail@plt>

0001f910 <flatcc_builder_end_vector@@Base>:
   1f910:	push	{r4, r5, fp, lr}
   1f914:	add	fp, sp, #8
   1f918:	sub	sp, sp, #8
   1f91c:	mov	r4, r0
   1f920:	ldr	r0, [r0, #32]
   1f924:	ldrh	r1, [r0, #14]
   1f928:	cmp	r1, #4
   1f92c:	bne	1f970 <flatcc_builder_end_vector@@Base+0x60>
   1f930:	ldr	r1, [r4, #16]
   1f934:	ldrh	r5, [r4, #130]	; 0x82
   1f938:	ldr	r3, [r0, #16]
   1f93c:	ldr	r2, [r0, #20]
   1f940:	ldr	r0, [r0, #24]
   1f944:	str	r5, [sp]
   1f948:	str	r0, [sp, #4]
   1f94c:	mov	r0, r4
   1f950:	bl	1f800 <flatcc_builder_create_vector@@Base>
   1f954:	mov	r5, r0
   1f958:	cmp	r0, #0
   1f95c:	movne	r0, r4
   1f960:	blne	1e528 <flatcc_builder_end_buffer@@Base+0xc8>
   1f964:	mov	r0, r5
   1f968:	sub	sp, fp, #8
   1f96c:	pop	{r4, r5, fp, pc}
   1f970:	movw	r0, #30501	; 0x7725
   1f974:	movt	r0, #2
   1f978:	movw	r1, #29698	; 0x7402
   1f97c:	movt	r1, #2
   1f980:	movw	r3, #32266	; 0x7e0a
   1f984:	movt	r3, #2
   1f988:	movw	r2, #1400	; 0x578
   1f98c:	bl	12f88 <__assert_fail@plt>

0001f990 <flatcc_builder_vector_count@@Base>:
   1f990:	ldr	r0, [r0, #32]
   1f994:	ldr	r0, [r0, #20]
   1f998:	bx	lr

0001f99c <flatcc_builder_vector_edit@@Base>:
   1f99c:	ldr	r0, [r0, #16]
   1f9a0:	bx	lr

0001f9a4 <flatcc_builder_create_offset_vector_direct@@Base>:
   1f9a4:	mov	r3, #0
   1f9a8:	b	1f9ac <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1f9ac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1f9b0:	add	fp, sp, #24
   1f9b4:	sub	sp, sp, #80	; 0x50
   1f9b8:	mov	r8, r0
   1f9bc:	mov	r0, #0
   1f9c0:	cmn	r2, #-1073741823	; 0xc0000001
   1f9c4:	bhi	1faf4 <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   1f9c8:	mov	r5, r3
   1f9cc:	mov	r9, r2
   1f9d0:	mov	r7, r1
   1f9d4:	mov	r6, #4
   1f9d8:	mov	r0, r8
   1f9dc:	mov	r1, #4
   1f9e0:	bl	1e1d0 <flatcc_builder_create_buffer@@Base+0x1d0>
   1f9e4:	mov	r0, r9
   1f9e8:	bl	1df68 <flatcc_builder_embed_buffer@@Base+0x1dc>
   1f9ec:	str	r9, [fp, #-28]	; 0xffffffe4
   1f9f0:	lsl	r4, r9, #2
   1f9f4:	mov	r0, r8
   1f9f8:	mov	r1, r4
   1f9fc:	mov	r2, #4
   1fa00:	bl	1df54 <flatcc_builder_embed_buffer@@Base+0x1c8>
   1fa04:	str	r6, [sp, #4]
   1fa08:	sub	r1, fp, #28
   1fa0c:	str	r1, [sp, #12]
   1fa10:	str	r6, [sp, #16]
   1fa14:	mov	r1, #1
   1fa18:	str	r1, [sp, #8]
   1fa1c:	mov	r1, #0
   1fa20:	cmp	r1, r9, lsl #2
   1fa24:	beq	1fa40 <flatcc_builder_create_offset_vector_direct@@Base+0x9c>
   1fa28:	str	r7, [sp, #20]
   1fa2c:	str	r4, [sp, #24]
   1fa30:	mov	r1, #2
   1fa34:	str	r1, [sp, #8]
   1fa38:	add	r1, r4, #4
   1fa3c:	str	r1, [sp, #4]
   1fa40:	cmp	r0, #0
   1fa44:	beq	1fa74 <flatcc_builder_create_offset_vector_direct@@Base+0xd0>
   1fa48:	ldmib	sp, {r1, r2}
   1fa4c:	add	r1, r1, r0
   1fa50:	str	r1, [sp, #4]
   1fa54:	add	r1, sp, #4
   1fa58:	add	r1, r1, r2, lsl #3
   1fa5c:	movw	r3, #29168	; 0x71f0
   1fa60:	movt	r3, #2
   1fa64:	str	r3, [r1, #8]
   1fa68:	str	r0, [r1, #12]
   1fa6c:	add	r0, r2, #1
   1fa70:	str	r0, [sp, #8]
   1fa74:	cmp	r9, #0
   1fa78:	beq	1fae8 <flatcc_builder_create_offset_vector_direct@@Base+0x144>
   1fa7c:	ldr	r0, [r8, #136]	; 0x88
   1fa80:	mvn	r1, #3
   1fa84:	sub	r0, r1, r0
   1fa88:	ldr	r1, [sp, #4]
   1fa8c:	add	r4, r0, r1
   1fa90:	mov	r6, #0
   1fa94:	ldr	r0, [r7, r6, lsl #2]
   1fa98:	cmp	r0, #0
   1fa9c:	beq	1fac4 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   1faa0:	add	r0, r4, r0
   1faa4:	bl	1df68 <flatcc_builder_embed_buffer@@Base+0x1dc>
   1faa8:	str	r0, [r7, r6, lsl #2]
   1faac:	cmp	r5, #0
   1fab0:	beq	1fad8 <flatcc_builder_create_offset_vector_direct@@Base+0x134>
   1fab4:	ldrb	r0, [r5, r6]
   1fab8:	cmp	r0, #0
   1fabc:	bne	1fad8 <flatcc_builder_create_offset_vector_direct@@Base+0x134>
   1fac0:	b	1fafc <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   1fac4:	cmp	r5, #0
   1fac8:	beq	1fb1c <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   1facc:	ldrb	r0, [r5, r6]
   1fad0:	cmp	r0, #0
   1fad4:	bne	1fb3c <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   1fad8:	sub	r4, r4, #4
   1fadc:	add	r6, r6, #1
   1fae0:	cmp	r6, r9
   1fae4:	bcc	1fa94 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   1fae8:	add	r1, sp, #4
   1faec:	mov	r0, r8
   1faf0:	bl	1df6c <flatcc_builder_embed_buffer@@Base+0x1e0>
   1faf4:	sub	sp, fp, #24
   1faf8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fafc:	movw	r0, #34204	; 0x859c
   1fb00:	movt	r0, #2
   1fb04:	movw	r1, #29698	; 0x7402
   1fb08:	movt	r1, #2
   1fb0c:	movw	r3, #34218	; 0x85aa
   1fb10:	movt	r3, #2
   1fb14:	movw	r2, #1457	; 0x5b1
   1fb18:	bl	12f88 <__assert_fail@plt>
   1fb1c:	movw	r0, #34216	; 0x85a8
   1fb20:	movt	r0, #2
   1fb24:	movw	r1, #29698	; 0x7402
   1fb28:	movt	r1, #2
   1fb2c:	movw	r3, #34218	; 0x85aa
   1fb30:	movt	r3, #2
   1fb34:	movw	r2, #1463	; 0x5b7
   1fb38:	bl	12f88 <__assert_fail@plt>
   1fb3c:	movw	r0, #34349	; 0x862d
   1fb40:	movt	r0, #2
   1fb44:	movw	r1, #29698	; 0x7402
   1fb48:	movt	r1, #2
   1fb4c:	movw	r3, #34218	; 0x85aa
   1fb50:	movt	r3, #2
   1fb54:	movw	r2, #1461	; 0x5b5
   1fb58:	bl	12f88 <__assert_fail@plt>

0001fb5c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   1fb5c:	push	{r4, r5, fp, lr}
   1fb60:	add	fp, sp, #8
   1fb64:	mov	r3, r1
   1fb68:	mov	r4, r0
   1fb6c:	ldr	r0, [r0, #32]
   1fb70:	ldrh	r1, [r0, #14]
   1fb74:	cmp	r1, #5
   1fb78:	bne	1fba4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x48>
   1fb7c:	ldr	r2, [r0, #20]
   1fb80:	ldr	r1, [r4, #16]
   1fb84:	mov	r0, r4
   1fb88:	bl	1f9ac <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1fb8c:	mov	r5, r0
   1fb90:	cmp	r0, #0
   1fb94:	movne	r0, r4
   1fb98:	blne	1e528 <flatcc_builder_end_buffer@@Base+0xc8>
   1fb9c:	mov	r0, r5
   1fba0:	pop	{r4, r5, fp, pc}
   1fba4:	movw	r0, #30750	; 0x781e
   1fba8:	movt	r0, #2
   1fbac:	movw	r1, #29698	; 0x7402
   1fbb0:	movt	r1, #2
   1fbb4:	movw	r3, #32407	; 0x7e97
   1fbb8:	movt	r3, #2
   1fbbc:	movw	r2, #1493	; 0x5d5
   1fbc0:	bl	12f88 <__assert_fail@plt>

0001fbc4 <flatcc_builder_offset_vector_edit@@Base>:
   1fbc4:	ldr	r0, [r0, #16]
   1fbc8:	bx	lr

0001fbcc <flatcc_builder_offset_vector_count@@Base>:
   1fbcc:	ldr	r0, [r0, #32]
   1fbd0:	ldr	r0, [r0, #20]
   1fbd4:	bx	lr

0001fbd8 <flatcc_builder_table_add_union@@Base>:
   1fbd8:	push	{r4, r5, r6, r7, fp, lr}
   1fbdc:	add	fp, sp, #16
   1fbe0:	mov	r5, r0
   1fbe4:	ldr	r0, [r0, #32]
   1fbe8:	ldrh	r0, [r0, #14]
   1fbec:	cmp	r0, #3
   1fbf0:	bne	1fc64 <flatcc_builder_table_add_union@@Base+0x8c>
   1fbf4:	mov	r7, r3
   1fbf8:	mov	r6, r1
   1fbfc:	uxtb	r4, r2
   1fc00:	cmp	r3, #0
   1fc04:	beq	1fc10 <flatcc_builder_table_add_union@@Base+0x38>
   1fc08:	cmp	r4, #0
   1fc0c:	beq	1fc84 <flatcc_builder_table_add_union@@Base+0xac>
   1fc10:	cmp	r7, #0
   1fc14:	beq	1fc30 <flatcc_builder_table_add_union@@Base+0x58>
   1fc18:	mov	r0, r5
   1fc1c:	mov	r1, r6
   1fc20:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   1fc24:	cmp	r0, #0
   1fc28:	beq	1fcc4 <flatcc_builder_table_add_union@@Base+0xec>
   1fc2c:	str	r7, [r0]
   1fc30:	sub	r1, r6, #1
   1fc34:	mov	r0, r5
   1fc38:	mov	r2, #1
   1fc3c:	mov	r3, #1
   1fc40:	bl	1fda8 <flatcc_builder_table_add@@Base>
   1fc44:	cmp	r0, #0
   1fc48:	beq	1fca4 <flatcc_builder_table_add_union@@Base+0xcc>
   1fc4c:	mov	r5, r0
   1fc50:	mov	r0, r4
   1fc54:	bl	1fe88 <flatcc_builder_table_add@@Base+0xe0>
   1fc58:	strb	r4, [r5]
   1fc5c:	mov	r0, #0
   1fc60:	pop	{r4, r5, r6, r7, fp, pc}
   1fc64:	movw	r0, #31767	; 0x7c17
   1fc68:	movt	r0, #2
   1fc6c:	movw	r1, #29698	; 0x7402
   1fc70:	movt	r1, #2
   1fc74:	movw	r3, #32521	; 0x7f09
   1fc78:	movt	r3, #2
   1fc7c:	movw	r2, #1518	; 0x5ee
   1fc80:	bl	12f88 <__assert_fail@plt>
   1fc84:	movw	r0, #32609	; 0x7f61
   1fc88:	movt	r0, #2
   1fc8c:	movw	r1, #29698	; 0x7402
   1fc90:	movt	r1, #2
   1fc94:	movw	r3, #32521	; 0x7f09
   1fc98:	movt	r3, #2
   1fc9c:	movw	r2, #1519	; 0x5ef
   1fca0:	bl	12f88 <__assert_fail@plt>
   1fca4:	movw	r0, #32653	; 0x7f8d
   1fca8:	movt	r0, #2
   1fcac:	movw	r1, #29698	; 0x7402
   1fcb0:	movt	r1, #2
   1fcb4:	movw	r3, #32521	; 0x7f09
   1fcb8:	movt	r3, #2
   1fcbc:	movw	r2, #1526	; 0x5f6
   1fcc0:	bl	12f88 <__assert_fail@plt>
   1fcc4:	movw	r0, #32643	; 0x7f83
   1fcc8:	movt	r0, #2
   1fccc:	movw	r1, #29698	; 0x7402
   1fcd0:	movt	r1, #2
   1fcd4:	movw	r3, #32521	; 0x7f09
   1fcd8:	movt	r3, #2
   1fcdc:	movw	r2, #1522	; 0x5f2
   1fce0:	bl	12f88 <__assert_fail@plt>

0001fce4 <flatcc_builder_table_add_offset@@Base>:
   1fce4:	push	{fp, lr}
   1fce8:	mov	fp, sp
   1fcec:	ldr	r2, [r0, #32]
   1fcf0:	ldrh	r2, [r2, #14]
   1fcf4:	cmp	r2, #3
   1fcf8:	bne	1fd48 <flatcc_builder_table_add_offset@@Base+0x64>
   1fcfc:	movw	r2, #32765	; 0x7ffd
   1fd00:	cmp	r1, r2
   1fd04:	bcs	1fd68 <flatcc_builder_table_add_offset@@Base+0x84>
   1fd08:	ldr	r2, [r0, #4]
   1fd0c:	add	r2, r2, r1, lsl #1
   1fd10:	ldrh	r2, [r2]
   1fd14:	cmp	r2, #0
   1fd18:	bne	1fd88 <flatcc_builder_table_add_offset@@Base+0xa4>
   1fd1c:	ldr	r2, [r0, #12]
   1fd20:	eor	r2, r2, r1
   1fd24:	movw	r3, #31153	; 0x79b1
   1fd28:	movt	r3, #40503	; 0x9e37
   1fd2c:	mul	r2, r2, r3
   1fd30:	eor	r2, r2, #4
   1fd34:	mul	r2, r2, r3
   1fd38:	str	r2, [r0, #12]
   1fd3c:	uxth	r1, r1
   1fd40:	pop	{fp, lr}
   1fd44:	b	206b4 <flatcc_builder_table_add_copy@@Base+0x40>
   1fd48:	movw	r0, #31767	; 0x7c17
   1fd4c:	movt	r0, #2
   1fd50:	movw	r1, #29698	; 0x7402
   1fd54:	movt	r1, #2
   1fd58:	movw	r3, #33547	; 0x830b
   1fd5c:	movt	r3, #2
   1fd60:	movw	r2, #1811	; 0x713
   1fd64:	bl	12f88 <__assert_fail@plt>
   1fd68:	movw	r0, #33419	; 0x828b
   1fd6c:	movt	r0, #2
   1fd70:	movw	r1, #29698	; 0x7402
   1fd74:	movt	r1, #2
   1fd78:	movw	r3, #33547	; 0x830b
   1fd7c:	movt	r3, #2
   1fd80:	movw	r2, #1812	; 0x714
   1fd84:	bl	12f88 <__assert_fail@plt>
   1fd88:	movw	r0, #34216	; 0x85a8
   1fd8c:	movt	r0, #2
   1fd90:	movw	r1, #29698	; 0x7402
   1fd94:	movt	r1, #2
   1fd98:	movw	r3, #33547	; 0x830b
   1fd9c:	movt	r3, #2
   1fda0:	movw	r2, #1819	; 0x71b
   1fda4:	bl	12f88 <__assert_fail@plt>

0001fda8 <flatcc_builder_table_add@@Base>:
   1fda8:	push	{fp, lr}
   1fdac:	mov	fp, sp
   1fdb0:	mov	ip, r3
   1fdb4:	ldr	r3, [r0, #32]
   1fdb8:	ldrh	r3, [r3, #14]
   1fdbc:	cmp	r3, #3
   1fdc0:	bne	1fe28 <flatcc_builder_table_add@@Base+0x80>
   1fdc4:	movw	r3, #32765	; 0x7ffd
   1fdc8:	cmp	r1, r3
   1fdcc:	bcs	1fe48 <flatcc_builder_table_add@@Base+0xa0>
   1fdd0:	mov	lr, r2
   1fdd4:	ldrh	r3, [r0, #130]	; 0x82
   1fdd8:	cmp	r3, ip
   1fddc:	strhcc	ip, [r0, #130]	; 0x82
   1fde0:	ldr	r3, [r0, #4]
   1fde4:	add	r3, r3, r1, lsl #1
   1fde8:	ldrh	r3, [r3]
   1fdec:	cmp	r3, #0
   1fdf0:	bne	1fe68 <flatcc_builder_table_add@@Base+0xc0>
   1fdf4:	ldr	r3, [r0, #12]
   1fdf8:	eor	r3, r3, r1
   1fdfc:	movw	r2, #31153	; 0x79b1
   1fe00:	movt	r2, #40503	; 0x9e37
   1fe04:	mul	r3, r3, r2
   1fe08:	eor	r3, r3, lr
   1fe0c:	mul	r2, r3, r2
   1fe10:	str	r2, [r0, #12]
   1fe14:	uxth	r3, r1
   1fe18:	mov	r1, lr
   1fe1c:	mov	r2, ip
   1fe20:	pop	{fp, lr}
   1fe24:	b	205a8 <flatcc_builder_string_len@@Base+0xc>
   1fe28:	movw	r0, #31767	; 0x7c17
   1fe2c:	movt	r0, #2
   1fe30:	movw	r1, #29698	; 0x7402
   1fe34:	movt	r1, #2
   1fe38:	movw	r3, #33345	; 0x8241
   1fe3c:	movt	r3, #2
   1fe40:	movw	r2, #1773	; 0x6ed
   1fe44:	bl	12f88 <__assert_fail@plt>
   1fe48:	movw	r0, #33419	; 0x828b
   1fe4c:	movt	r0, #2
   1fe50:	movw	r1, #29698	; 0x7402
   1fe54:	movt	r1, #2
   1fe58:	movw	r3, #33345	; 0x8241
   1fe5c:	movt	r3, #2
   1fe60:	movw	r2, #1774	; 0x6ee
   1fe64:	bl	12f88 <__assert_fail@plt>
   1fe68:	movw	r0, #34216	; 0x85a8
   1fe6c:	movt	r0, #2
   1fe70:	movw	r1, #29698	; 0x7402
   1fe74:	movt	r1, #2
   1fe78:	movw	r3, #33345	; 0x8241
   1fe7c:	movt	r3, #2
   1fe80:	movw	r2, #1784	; 0x6f8
   1fe84:	bl	12f88 <__assert_fail@plt>
   1fe88:	bx	lr

0001fe8c <flatcc_builder_table_add_union_vector@@Base>:
   1fe8c:	push	{r4, r5, r6, r7, fp, lr}
   1fe90:	add	fp, sp, #16
   1fe94:	mov	r6, r0
   1fe98:	ldr	r0, [r0, #32]
   1fe9c:	ldrh	r0, [r0, #14]
   1fea0:	cmp	r0, #3
   1fea4:	bne	1ff0c <flatcc_builder_table_add_union_vector@@Base+0x80>
   1fea8:	mov	r4, r3
   1feac:	mov	r7, r2
   1feb0:	mov	r5, r1
   1feb4:	clz	r0, r3
   1feb8:	lsr	r0, r0, #5
   1febc:	clz	r1, r2
   1fec0:	lsr	r1, r1, #5
   1fec4:	cmp	r1, r0
   1fec8:	bne	1ff2c <flatcc_builder_table_add_union_vector@@Base+0xa0>
   1fecc:	cmp	r7, #0
   1fed0:	beq	1ff04 <flatcc_builder_table_add_union_vector@@Base+0x78>
   1fed4:	sub	r1, r5, #1
   1fed8:	mov	r0, r6
   1fedc:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   1fee0:	cmp	r0, #0
   1fee4:	beq	1ff4c <flatcc_builder_table_add_union_vector@@Base+0xc0>
   1fee8:	str	r7, [r0]
   1feec:	mov	r0, r6
   1fef0:	mov	r1, r5
   1fef4:	bl	1fce4 <flatcc_builder_table_add_offset@@Base>
   1fef8:	cmp	r0, #0
   1fefc:	beq	1ff6c <flatcc_builder_table_add_union_vector@@Base+0xe0>
   1ff00:	str	r4, [r0]
   1ff04:	mov	r0, #0
   1ff08:	pop	{r4, r5, r6, r7, fp, pc}
   1ff0c:	movw	r0, #31767	; 0x7c17
   1ff10:	movt	r0, #2
   1ff14:	movw	r1, #29698	; 0x7402
   1ff18:	movt	r1, #2
   1ff1c:	movw	r3, #32665	; 0x7f99
   1ff20:	movt	r3, #2
   1ff24:	mov	r2, #1536	; 0x600
   1ff28:	bl	12f88 <__assert_fail@plt>
   1ff2c:	movw	r0, #32764	; 0x7ffc
   1ff30:	movt	r0, #2
   1ff34:	movw	r1, #29698	; 0x7402
   1ff38:	movt	r1, #2
   1ff3c:	movw	r3, #32665	; 0x7f99
   1ff40:	movt	r3, #2
   1ff44:	movw	r2, #1537	; 0x601
   1ff48:	bl	12f88 <__assert_fail@plt>
   1ff4c:	movw	r0, #32643	; 0x7f83
   1ff50:	movt	r0, #2
   1ff54:	movw	r1, #29698	; 0x7402
   1ff58:	movt	r1, #2
   1ff5c:	movw	r3, #32665	; 0x7f99
   1ff60:	movt	r3, #2
   1ff64:	movw	r2, #1540	; 0x604
   1ff68:	bl	12f88 <__assert_fail@plt>
   1ff6c:	movw	r0, #32643	; 0x7f83
   1ff70:	movt	r0, #2
   1ff74:	movw	r1, #29698	; 0x7402
   1ff78:	movt	r1, #2
   1ff7c:	movw	r3, #32665	; 0x7f99
   1ff80:	movt	r3, #2
   1ff84:	movw	r2, #1544	; 0x608
   1ff88:	bl	12f88 <__assert_fail@plt>

0001ff8c <flatcc_builder_create_union_vector@@Base>:
   1ff8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ff90:	add	fp, sp, #24
   1ff94:	sub	sp, sp, #16
   1ff98:	mov	r6, r3
   1ff9c:	mov	r7, r2
   1ffa0:	mov	r4, r1
   1ffa4:	mov	r5, r0
   1ffa8:	mov	r0, #0
   1ffac:	str	r0, [r5]
   1ffb0:	str	r0, [r5, #4]
   1ffb4:	mov	r0, r1
   1ffb8:	bl	1ed50 <flatcc_builder_start_offset_vector@@Base>
   1ffbc:	cmp	r0, #0
   1ffc0:	beq	1ffcc <flatcc_builder_create_union_vector@@Base+0x40>
   1ffc4:	sub	sp, fp, #24
   1ffc8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ffcc:	mov	r0, r4
   1ffd0:	mov	r1, r6
   1ffd4:	bl	1e89c <flatcc_builder_extend_offset_vector@@Base>
   1ffd8:	cmp	r0, #0
   1ffdc:	beq	1ffc4 <flatcc_builder_create_union_vector@@Base+0x38>
   1ffe0:	mov	r0, r4
   1ffe4:	mov	r1, r6
   1ffe8:	bl	1e618 <flatcc_builder_start_struct@@Base+0x84>
   1ffec:	cmp	r0, #0
   1fff0:	beq	1ffc4 <flatcc_builder_create_union_vector@@Base+0x38>
   1fff4:	mov	r8, r0
   1fff8:	mov	r0, r4
   1fffc:	bl	1fbc4 <flatcc_builder_offset_vector_edit@@Base>
   20000:	mov	ip, r0
   20004:	cmp	r6, #0
   20008:	beq	20038 <flatcc_builder_create_union_vector@@Base+0xac>
   2000c:	add	r0, r7, #4
   20010:	mov	r1, r6
   20014:	mov	r2, ip
   20018:	mov	r7, r8
   2001c:	ldrb	r3, [r0, #-4]
   20020:	strb	r3, [r7], #1
   20024:	ldr	r3, [r0]
   20028:	str	r3, [r2], #4
   2002c:	add	r0, r0, #8
   20030:	subs	r1, r1, #1
   20034:	bne	2001c <flatcc_builder_create_union_vector@@Base+0x90>
   20038:	str	r6, [sp]
   2003c:	add	r0, sp, #8
   20040:	mov	r1, r4
   20044:	mov	r2, r8
   20048:	mov	r3, ip
   2004c:	bl	2006c <flatcc_builder_create_union_vector_direct@@Base>
   20050:	ldr	r0, [sp, #8]
   20054:	ldr	r1, [sp, #12]
   20058:	stm	r5, {r0, r1}
   2005c:	mov	r0, r4
   20060:	bl	1e528 <flatcc_builder_end_buffer@@Base+0xc8>
   20064:	sub	sp, fp, #24
   20068:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002006c <flatcc_builder_create_union_vector_direct@@Base>:
   2006c:	push	{r4, r5, r6, r7, fp, lr}
   20070:	add	fp, sp, #16
   20074:	sub	sp, sp, #8
   20078:	mov	r5, r2
   2007c:	mov	r6, r1
   20080:	mov	r4, r0
   20084:	mov	r0, #0
   20088:	str	r0, [r4]
   2008c:	str	r0, [r4, #4]
   20090:	ldr	r7, [fp, #8]
   20094:	mov	r0, r1
   20098:	mov	r1, r3
   2009c:	mov	r2, r7
   200a0:	mov	r3, r5
   200a4:	bl	1f9ac <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   200a8:	str	r0, [r4, #4]
   200ac:	cmp	r0, #0
   200b0:	beq	200dc <flatcc_builder_create_union_vector_direct@@Base+0x70>
   200b4:	mvn	r0, #0
   200b8:	mov	r1, #1
   200bc:	str	r1, [sp]
   200c0:	str	r0, [sp, #4]
   200c4:	mov	r0, r6
   200c8:	mov	r1, r5
   200cc:	mov	r2, r7
   200d0:	mov	r3, #1
   200d4:	bl	1f800 <flatcc_builder_create_vector@@Base>
   200d8:	str	r0, [r4]
   200dc:	sub	sp, fp, #16
   200e0:	pop	{r4, r5, r6, r7, fp, pc}

000200e4 <flatcc_builder_start_union_vector@@Base>:
   200e4:	push	{r4, r5, fp, lr}
   200e8:	add	fp, sp, #8
   200ec:	mov	r4, r0
   200f0:	mov	r1, #4
   200f4:	bl	1e368 <flatcc_builder_start_buffer@@Base+0xbc>
   200f8:	mvn	r5, #0
   200fc:	cmp	r0, #0
   20100:	beq	2010c <flatcc_builder_start_union_vector@@Base+0x28>
   20104:	mov	r0, r5
   20108:	pop	{r4, r5, fp, pc}
   2010c:	ldr	r0, [r4, #32]
   20110:	mov	r1, #8
   20114:	str	r1, [r0, #16]
   20118:	ldr	r0, [r4, #32]
   2011c:	mov	r5, #0
   20120:	str	r5, [r0, #20]
   20124:	ldr	r0, [r4, #32]
   20128:	mov	r1, #7
   2012c:	strh	r1, [r0, #14]
   20130:	mov	r0, r4
   20134:	mvn	r1, #3
   20138:	bl	1e5e0 <flatcc_builder_start_struct@@Base+0x4c>
   2013c:	mov	r0, r5
   20140:	pop	{r4, r5, fp, pc}

00020144 <flatcc_builder_end_union_vector@@Base>:
   20144:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20148:	add	fp, sp, #24
   2014c:	sub	sp, sp, #16
   20150:	mov	r9, r0
   20154:	mov	r0, #0
   20158:	str	r0, [r9]
   2015c:	str	r0, [r9, #4]
   20160:	ldr	r0, [r1, #32]
   20164:	ldrh	r0, [r0, #14]
   20168:	cmp	r0, #7
   2016c:	bne	2020c <flatcc_builder_end_union_vector@@Base+0xc8>
   20170:	mov	r4, r1
   20174:	mov	r0, r1
   20178:	bl	2022c <flatcc_builder_union_vector_count@@Base>
   2017c:	mov	r6, r0
   20180:	add	r1, r0, r0, lsl #2
   20184:	mov	r0, r4
   20188:	bl	1e618 <flatcc_builder_start_struct@@Base+0x84>
   2018c:	cmp	r0, #0
   20190:	beq	20204 <flatcc_builder_end_union_vector@@Base+0xc0>
   20194:	mov	r7, r0
   20198:	add	r8, r0, r6, lsl #2
   2019c:	mov	r0, r4
   201a0:	bl	20238 <flatcc_builder_union_vector_edit@@Base>
   201a4:	cmp	r6, #0
   201a8:	beq	201d8 <flatcc_builder_end_union_vector@@Base+0x94>
   201ac:	add	r0, r0, #4
   201b0:	mov	r1, r6
   201b4:	mov	r2, r7
   201b8:	mov	r3, r8
   201bc:	ldrb	r5, [r0, #-4]
   201c0:	strb	r5, [r3], #1
   201c4:	ldr	r5, [r0]
   201c8:	str	r5, [r2], #4
   201cc:	add	r0, r0, #8
   201d0:	subs	r1, r1, #1
   201d4:	bne	201bc <flatcc_builder_end_union_vector@@Base+0x78>
   201d8:	str	r6, [sp]
   201dc:	add	r0, sp, #8
   201e0:	mov	r1, r4
   201e4:	mov	r2, r8
   201e8:	mov	r3, r7
   201ec:	bl	2006c <flatcc_builder_create_union_vector_direct@@Base>
   201f0:	ldr	r0, [sp, #8]
   201f4:	ldr	r1, [sp, #12]
   201f8:	stm	r9, {r0, r1}
   201fc:	mov	r0, r4
   20200:	bl	1e528 <flatcc_builder_end_buffer@@Base+0xc8>
   20204:	sub	sp, fp, #24
   20208:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2020c:	movw	r0, #32804	; 0x8024
   20210:	movt	r0, #2
   20214:	movw	r1, #29698	; 0x7402
   20218:	movt	r1, #2
   2021c:	movw	r3, #32854	; 0x8056
   20220:	movt	r3, #2
   20224:	movw	r2, #1617	; 0x651
   20228:	bl	12f88 <__assert_fail@plt>

0002022c <flatcc_builder_union_vector_count@@Base>:
   2022c:	ldr	r0, [r0, #32]
   20230:	ldr	r0, [r0, #20]
   20234:	bx	lr

00020238 <flatcc_builder_union_vector_edit@@Base>:
   20238:	ldr	r0, [r0, #16]
   2023c:	bx	lr

00020240 <flatcc_builder_extend_union_vector@@Base>:
   20240:	push	{r4, r5, fp, lr}
   20244:	add	fp, sp, #8
   20248:	mov	r5, r1
   2024c:	mov	r4, r0
   20250:	mvn	r2, #-536870912	; 0xe0000000
   20254:	bl	1e71c <flatcc_builder_extend_vector@@Base+0x44>
   20258:	mov	r1, r0
   2025c:	mov	r0, #0
   20260:	cmp	r1, #0
   20264:	popne	{r4, r5, fp, pc}
   20268:	lsl	r1, r5, #3
   2026c:	mov	r0, r4
   20270:	bl	1e618 <flatcc_builder_start_struct@@Base+0x84>
   20274:	pop	{r4, r5, fp, pc}

00020278 <flatcc_builder_truncate_union_vector@@Base>:
   20278:	push	{fp, lr}
   2027c:	mov	fp, sp
   20280:	ldr	r2, [r0, #32]
   20284:	ldrh	r3, [r2, #14]
   20288:	cmp	r3, #7
   2028c:	bne	202bc <flatcc_builder_truncate_union_vector@@Base+0x44>
   20290:	ldr	r3, [r2, #20]
   20294:	cmp	r3, r1
   20298:	bcc	202dc <flatcc_builder_truncate_union_vector@@Base+0x64>
   2029c:	sub	r3, r3, r1
   202a0:	str	r3, [r2, #20]
   202a4:	ldr	r2, [r0, #32]
   202a8:	ldr	r2, [r2, #16]
   202ac:	mul	r1, r2, r1
   202b0:	bl	1eba4 <flatcc_builder_truncate_vector@@Base+0x84>
   202b4:	mov	r0, #0
   202b8:	pop	{fp, pc}
   202bc:	movw	r0, #32804	; 0x8024
   202c0:	movt	r0, #2
   202c4:	movw	r1, #29698	; 0x7402
   202c8:	movt	r1, #2
   202cc:	movw	r3, #32937	; 0x80a9
   202d0:	movt	r3, #2
   202d4:	movw	r2, #1665	; 0x681
   202d8:	bl	12f88 <__assert_fail@plt>
   202dc:	movw	r0, #31368	; 0x7a88
   202e0:	movt	r0, #2
   202e4:	movw	r1, #29698	; 0x7402
   202e8:	movt	r1, #2
   202ec:	movw	r3, #32937	; 0x80a9
   202f0:	movt	r3, #2
   202f4:	movw	r2, #1666	; 0x682
   202f8:	bl	12f88 <__assert_fail@plt>

000202fc <flatcc_builder_union_vector_push@@Base>:
   202fc:	push	{r4, r5, r6, sl, fp, lr}
   20300:	add	fp, sp, #16
   20304:	mov	r4, r2
   20308:	mov	r5, r1
   2030c:	ldr	r1, [r0, #32]
   20310:	ldrh	r2, [r1, #14]
   20314:	cmp	r2, #7
   20318:	bne	20354 <flatcc_builder_union_vector_push@@Base+0x58>
   2031c:	ldr	r2, [r1, #20]
   20320:	mov	r6, #0
   20324:	cmn	r2, #-536870911	; 0xe0000001
   20328:	beq	2034c <flatcc_builder_union_vector_push@@Base+0x50>
   2032c:	add	r2, r2, #1
   20330:	str	r2, [r1, #20]
   20334:	mov	r1, #8
   20338:	bl	1e618 <flatcc_builder_start_struct@@Base+0x84>
   2033c:	cmp	r0, #0
   20340:	strne	r5, [r0]
   20344:	strne	r4, [r0, #4]
   20348:	movne	r6, r0
   2034c:	mov	r0, r6
   20350:	pop	{r4, r5, r6, sl, fp, pc}
   20354:	movw	r0, #32804	; 0x8024
   20358:	movt	r0, #2
   2035c:	movw	r1, #29698	; 0x7402
   20360:	movt	r1, #2
   20364:	movw	r3, #33006	; 0x80ee
   20368:	movt	r3, #2
   2036c:	movw	r2, #1677	; 0x68d
   20370:	bl	12f88 <__assert_fail@plt>

00020374 <flatcc_builder_append_union_vector@@Base>:
   20374:	push	{r4, r5, r6, sl, fp, lr}
   20378:	add	fp, sp, #16
   2037c:	mov	r6, r0
   20380:	ldr	r0, [r0, #32]
   20384:	ldrh	r0, [r0, #14]
   20388:	cmp	r0, #7
   2038c:	bne	203cc <flatcc_builder_append_union_vector@@Base+0x58>
   20390:	mov	r5, r2
   20394:	mov	r4, r1
   20398:	mov	r0, r6
   2039c:	mov	r1, r2
   203a0:	mvn	r2, #-536870912	; 0xe0000000
   203a4:	bl	1e71c <flatcc_builder_extend_vector@@Base+0x44>
   203a8:	mov	r1, r0
   203ac:	mov	r0, #0
   203b0:	cmp	r1, #0
   203b4:	popne	{r4, r5, r6, sl, fp, pc}
   203b8:	lsl	r2, r5, #3
   203bc:	mov	r0, r6
   203c0:	mov	r1, r4
   203c4:	bl	1e7e4 <flatcc_builder_vector_push@@Base+0x80>
   203c8:	pop	{r4, r5, r6, sl, fp, pc}
   203cc:	movw	r0, #32804	; 0x8024
   203d0:	movt	r0, #2
   203d4:	movw	r1, #29698	; 0x7402
   203d8:	movt	r1, #2
   203dc:	movw	r3, #33115	; 0x815b
   203e0:	movt	r3, #2
   203e4:	movw	r2, #1692	; 0x69c
   203e8:	bl	12f88 <__assert_fail@plt>

000203ec <flatcc_builder_create_string@@Base>:
   203ec:	push	{r4, r5, r6, r7, fp, lr}
   203f0:	add	fp, sp, #16
   203f4:	sub	sp, sp, #80	; 0x50
   203f8:	mov	r5, r2
   203fc:	mov	r6, r1
   20400:	mov	r4, r0
   20404:	mov	r0, r2
   20408:	bl	1df68 <flatcc_builder_embed_buffer@@Base+0x1dc>
   2040c:	str	r5, [fp, #-20]	; 0xffffffec
   20410:	add	r1, r5, #1
   20414:	mov	r7, #4
   20418:	mov	r0, r4
   2041c:	mov	r2, #4
   20420:	bl	1df54 <flatcc_builder_embed_buffer@@Base+0x1c8>
   20424:	str	r7, [sp, #4]
   20428:	sub	r1, fp, #20
   2042c:	str	r1, [sp, #12]
   20430:	str	r7, [sp, #16]
   20434:	mov	r1, #1
   20438:	str	r1, [sp, #8]
   2043c:	add	r0, r0, #1
   20440:	cmp	r5, #0
   20444:	beq	20460 <flatcc_builder_create_string@@Base+0x74>
   20448:	str	r6, [sp, #20]
   2044c:	str	r5, [sp, #24]
   20450:	mov	r1, #2
   20454:	str	r1, [sp, #8]
   20458:	add	r1, r5, #4
   2045c:	str	r1, [sp, #4]
   20460:	cmp	r0, #0
   20464:	beq	20494 <flatcc_builder_create_string@@Base+0xa8>
   20468:	ldmib	sp, {r1, r2}
   2046c:	add	r1, r1, r0
   20470:	str	r1, [sp, #4]
   20474:	add	r1, sp, #4
   20478:	add	r1, r1, r2, lsl #3
   2047c:	movw	r3, #29168	; 0x71f0
   20480:	movt	r3, #2
   20484:	str	r3, [r1, #8]
   20488:	str	r0, [r1, #12]
   2048c:	add	r0, r2, #1
   20490:	str	r0, [sp, #8]
   20494:	add	r1, sp, #4
   20498:	mov	r0, r4
   2049c:	bl	1df6c <flatcc_builder_embed_buffer@@Base+0x1e0>
   204a0:	sub	sp, fp, #16
   204a4:	pop	{r4, r5, r6, r7, fp, pc}

000204a8 <flatcc_builder_create_string_str@@Base>:
   204a8:	push	{r4, r5, fp, lr}
   204ac:	add	fp, sp, #8
   204b0:	mov	r4, r1
   204b4:	mov	r5, r0
   204b8:	mov	r0, r1
   204bc:	bl	12f1c <strlen@plt>
   204c0:	mov	r2, r0
   204c4:	mov	r0, r5
   204c8:	mov	r1, r4
   204cc:	pop	{r4, r5, fp, lr}
   204d0:	b	203ec <flatcc_builder_create_string@@Base>

000204d4 <flatcc_builder_create_string_strn@@Base>:
   204d4:	push	{r4, r5, fp, lr}
   204d8:	add	fp, sp, #8
   204dc:	mov	r4, r1
   204e0:	mov	r5, r0
   204e4:	mov	r0, r1
   204e8:	mov	r1, r2
   204ec:	bl	1eaf4 <flatcc_builder_append_string_strn@@Base+0x30>
   204f0:	mov	r2, r0
   204f4:	mov	r0, r5
   204f8:	mov	r1, r4
   204fc:	pop	{r4, r5, fp, lr}
   20500:	b	203ec <flatcc_builder_create_string@@Base>

00020504 <flatcc_builder_end_string@@Base>:
   20504:	push	{r4, r5, fp, lr}
   20508:	add	fp, sp, #8
   2050c:	mov	r4, r0
   20510:	ldr	r0, [r0, #32]
   20514:	ldrh	r1, [r0, #14]
   20518:	cmp	r1, #6
   2051c:	bne	20554 <flatcc_builder_end_string@@Base+0x50>
   20520:	ldr	r2, [r4, #20]
   20524:	ldr	r0, [r0, #20]
   20528:	cmp	r0, r2
   2052c:	bne	20574 <flatcc_builder_end_string@@Base+0x70>
   20530:	ldr	r1, [r4, #16]
   20534:	mov	r0, r4
   20538:	bl	203ec <flatcc_builder_create_string@@Base>
   2053c:	mov	r5, r0
   20540:	cmp	r0, #0
   20544:	movne	r0, r4
   20548:	blne	1e528 <flatcc_builder_end_buffer@@Base+0xc8>
   2054c:	mov	r0, r5
   20550:	pop	{r4, r5, fp, pc}
   20554:	movw	r0, #31015	; 0x7927
   20558:	movt	r0, #2
   2055c:	movw	r1, #29698	; 0x7402
   20560:	movt	r1, #2
   20564:	movw	r3, #33242	; 0x81da
   20568:	movt	r3, #2
   2056c:	movw	r2, #1732	; 0x6c4
   20570:	bl	12f88 <__assert_fail@plt>
   20574:	movw	r0, #33309	; 0x821d
   20578:	movt	r0, #2
   2057c:	movw	r1, #29698	; 0x7402
   20580:	movt	r1, #2
   20584:	movw	r3, #33242	; 0x81da
   20588:	movt	r3, #2
   2058c:	movw	r2, #1733	; 0x6c5
   20590:	bl	12f88 <__assert_fail@plt>

00020594 <flatcc_builder_string_edit@@Base>:
   20594:	ldr	r0, [r0, #16]
   20598:	bx	lr

0002059c <flatcc_builder_string_len@@Base>:
   2059c:	ldr	r0, [r0, #32]
   205a0:	ldr	r0, [r0, #20]
   205a4:	bx	lr
   205a8:	push	{r4, r5, r6, sl, fp, lr}
   205ac:	add	fp, sp, #16
   205b0:	mov	r5, r3
   205b4:	mov	r4, r0
   205b8:	ldr	r0, [r0, #20]
   205bc:	ldr	r3, [r4, #24]
   205c0:	add	r0, r2, r0
   205c4:	sub	r0, r0, #1
   205c8:	rsb	r2, r2, #0
   205cc:	and	r6, r0, r2
   205d0:	add	r0, r6, r1
   205d4:	str	r0, [r4, #20]
   205d8:	cmp	r0, r3
   205dc:	bcc	20600 <flatcc_builder_string_len@@Base+0x64>
   205e0:	add	r1, r0, #1
   205e4:	mov	r0, r4
   205e8:	movw	r2, #65532	; 0xfffc
   205ec:	bl	20a4c <flatcc_builder_get_emit_context@@Base+0x18>
   205f0:	mov	r1, r0
   205f4:	mov	r0, #0
   205f8:	cmp	r1, #0
   205fc:	popne	{r4, r5, r6, sl, fp, pc}
   20600:	ldr	r0, [r4, #4]
   20604:	add	r0, r0, r5, lsl #1
   20608:	add	r1, r6, #4
   2060c:	strh	r1, [r0]
   20610:	ldrh	r0, [r4, #8]
   20614:	cmp	r0, r5
   20618:	addls	r0, r5, #1
   2061c:	strhls	r0, [r4, #8]
   20620:	ldr	r0, [r4, #16]
   20624:	add	r0, r0, r6
   20628:	pop	{r4, r5, r6, sl, fp, pc}

0002062c <flatcc_builder_table_edit@@Base>:
   2062c:	ldr	r2, [r0, #32]
   20630:	ldrh	r2, [r2, #14]
   20634:	cmp	r2, #3
   20638:	ldreq	r2, [r0, #16]
   2063c:	ldreq	r0, [r0, #20]
   20640:	addeq	r0, r2, r0
   20644:	subeq	r0, r0, r1
   20648:	bxeq	lr
   2064c:	push	{fp, lr}
   20650:	mov	fp, sp
   20654:	movw	r0, #31767	; 0x7c17
   20658:	movt	r0, #2
   2065c:	movw	r1, #29698	; 0x7402
   20660:	movt	r1, #2
   20664:	movw	r3, #33487	; 0x82cf
   20668:	movt	r3, #2
   2066c:	movw	r2, #1794	; 0x702
   20670:	bl	12f88 <__assert_fail@plt>

00020674 <flatcc_builder_table_add_copy@@Base>:
   20674:	push	{r4, r5, r6, sl, fp, lr}
   20678:	add	fp, sp, #16
   2067c:	mov	r4, r3
   20680:	mov	r5, r2
   20684:	ldr	r3, [fp, #8]
   20688:	mov	r2, r4
   2068c:	bl	1fda8 <flatcc_builder_table_add@@Base>
   20690:	mov	r6, r0
   20694:	cmp	r0, #0
   20698:	beq	206ac <flatcc_builder_table_add_copy@@Base+0x38>
   2069c:	mov	r0, r6
   206a0:	mov	r1, r5
   206a4:	mov	r2, r4
   206a8:	bl	12eb0 <memcpy@plt>
   206ac:	mov	r0, r6
   206b0:	pop	{r4, r5, r6, sl, fp, pc}
   206b4:	push	{r4, r5, r6, r7, fp, lr}
   206b8:	add	fp, sp, #16
   206bc:	mov	r5, r1
   206c0:	mov	r4, r0
   206c4:	ldr	r0, [r0, #20]
   206c8:	ldr	r1, [r4, #24]
   206cc:	add	r0, r0, #3
   206d0:	bic	r7, r0, #3
   206d4:	add	r6, r7, #4
   206d8:	str	r6, [r4, #20]
   206dc:	cmp	r6, r1
   206e0:	bls	20704 <flatcc_builder_table_add_copy@@Base+0x90>
   206e4:	mov	r0, r4
   206e8:	mov	r1, r6
   206ec:	movw	r2, #65532	; 0xfffc
   206f0:	bl	20a4c <flatcc_builder_get_emit_context@@Base+0x18>
   206f4:	mov	r1, r0
   206f8:	mov	r0, #0
   206fc:	cmp	r1, #0
   20700:	popne	{r4, r5, r6, r7, fp, pc}
   20704:	ldr	r0, [r4, #4]
   20708:	add	r0, r0, r5, lsl #1
   2070c:	strh	r6, [r0]
   20710:	ldrh	r0, [r4, #8]
   20714:	cmp	r0, r5
   20718:	addls	r0, r5, #1
   2071c:	strhls	r0, [r4, #8]
   20720:	ldr	r0, [r4]
   20724:	add	r1, r0, #2
   20728:	str	r1, [r4]
   2072c:	strh	r7, [r0]
   20730:	ldr	r0, [r4, #16]
   20734:	add	r0, r0, r7
   20738:	pop	{r4, r5, r6, r7, fp, pc}

0002073c <flatcc_builder_push_buffer_alignment@@Base>:
   2073c:	ldrh	r1, [r0, #128]	; 0x80
   20740:	mov	r2, #4
   20744:	strh	r2, [r0, #128]	; 0x80
   20748:	mov	r0, r1
   2074c:	bx	lr

00020750 <flatcc_builder_pop_buffer_alignment@@Base>:
   20750:	b	1e1d0 <flatcc_builder_create_buffer@@Base+0x1d0>

00020754 <flatcc_builder_get_buffer_alignment@@Base>:
   20754:	ldrh	r0, [r0, #128]	; 0x80
   20758:	bx	lr

0002075c <flatcc_builder_set_vtable_clustering@@Base>:
   2075c:	clz	r1, r1
   20760:	lsr	r1, r1, #5
   20764:	str	r1, [r0, #180]	; 0xb4
   20768:	bx	lr

0002076c <flatcc_builder_set_block_align@@Base>:
   2076c:	strh	r1, [r0, #132]	; 0x84
   20770:	bx	lr

00020774 <flatcc_builder_get_level@@Base>:
   20774:	ldr	r0, [r0, #156]	; 0x9c
   20778:	bx	lr

0002077c <flatcc_builder_set_max_level@@Base>:
   2077c:	str	r1, [r0, #176]	; 0xb0
   20780:	ldr	r2, [r0, #160]	; 0xa0
   20784:	cmp	r2, r1
   20788:	strlt	r1, [r0, #160]	; 0xa0
   2078c:	bx	lr

00020790 <flatcc_builder_get_buffer_size@@Base>:
   20790:	ldr	r1, [r0, #136]	; 0x88
   20794:	ldr	r0, [r0, #140]	; 0x8c
   20798:	sub	r0, r0, r1
   2079c:	bx	lr

000207a0 <flatcc_builder_get_buffer_start@@Base>:
   207a0:	ldr	r0, [r0, #136]	; 0x88
   207a4:	bx	lr

000207a8 <flatcc_builder_get_buffer_end@@Base>:
   207a8:	ldr	r0, [r0, #140]	; 0x8c
   207ac:	bx	lr

000207b0 <flatcc_builder_set_vtable_cache_limit@@Base>:
   207b0:	str	r1, [r0, #172]	; 0xac
   207b4:	bx	lr

000207b8 <flatcc_builder_set_identifier@@Base>:
   207b8:	movw	r2, #29168	; 0x71f0
   207bc:	movt	r2, #2
   207c0:	cmp	r1, #0
   207c4:	movne	r2, r1
   207c8:	ldr	r1, [r2]
   207cc:	str	r1, [r0, #168]	; 0xa8
   207d0:	bx	lr

000207d4 <flatcc_builder_get_type@@Base>:
   207d4:	ldr	r0, [r0, #32]
   207d8:	cmp	r0, #0
   207dc:	ldrhne	r0, [r0, #14]
   207e0:	moveq	r0, #0
   207e4:	bx	lr

000207e8 <flatcc_builder_get_type_at@@Base>:
   207e8:	mov	r2, r0
   207ec:	mov	r0, #0
   207f0:	cmp	r1, #1
   207f4:	ldrge	r3, [r2, #156]	; 0x9c
   207f8:	cmpge	r3, r1
   207fc:	bge	20804 <flatcc_builder_get_type_at@@Base+0x1c>
   20800:	bx	lr
   20804:	sub	r0, r1, r3
   20808:	add	r0, r0, r0, lsl #3
   2080c:	ldr	r1, [r2, #32]
   20810:	add	r0, r1, r0, lsl #2
   20814:	ldrh	r0, [r0, #14]
   20818:	bx	lr

0002081c <flatcc_builder_get_direct_buffer@@Base>:
   2081c:	ldr	r2, [r0, #184]	; 0xb8
   20820:	cmp	r2, #0
   20824:	beq	20830 <flatcc_builder_get_direct_buffer@@Base+0x14>
   20828:	add	r0, r0, #188	; 0xbc
   2082c:	b	20844 <flatcc_builder_get_direct_buffer@@Base+0x28>
   20830:	cmp	r1, #0
   20834:	movne	r0, #0
   20838:	strne	r0, [r1]
   2083c:	mov	r0, #0
   20840:	bx	lr
   20844:	ldm	r0, {r2, r3}
   20848:	cmp	r2, r3
   2084c:	beq	20860 <flatcc_builder_get_direct_buffer@@Base+0x44>
   20850:	mov	r0, #0
   20854:	cmp	r1, #0
   20858:	strne	r0, [r1]
   2085c:	bx	lr
   20860:	cmp	r1, #0
   20864:	ldrne	r2, [r0, #24]
   20868:	strne	r2, [r1]
   2086c:	ldr	r0, [r0, #8]
   20870:	bx	lr

00020874 <flatcc_builder_copy_buffer@@Base>:
   20874:	push	{fp, lr}
   20878:	mov	fp, sp
   2087c:	ldr	r3, [r0, #184]	; 0xb8
   20880:	cmp	r3, #0
   20884:	beq	208b8 <flatcc_builder_copy_buffer@@Base+0x44>
   20888:	add	r0, r0, #188	; 0xbc
   2088c:	bl	20f90 <flatcc_emitter_copy_buffer@@Base>
   20890:	cmp	r0, #0
   20894:	popne	{fp, pc}
   20898:	movw	r0, #11121	; 0x2b71
   2089c:	movt	r0, #2
   208a0:	movw	r1, #29698	; 0x7402
   208a4:	movt	r1, #2
   208a8:	movw	r3, #33626	; 0x835a
   208ac:	movt	r3, #2
   208b0:	movw	r2, #1926	; 0x786
   208b4:	bl	12f88 <__assert_fail@plt>
   208b8:	mov	r0, #0
   208bc:	pop	{fp, pc}

000208c0 <flatcc_builder_finalize_buffer@@Base>:
   208c0:	push	{r4, r5, r6, sl, fp, lr}
   208c4:	add	fp, sp, #16
   208c8:	mov	r6, r1
   208cc:	mov	r4, r0
   208d0:	bl	20790 <flatcc_builder_get_buffer_size@@Base>
   208d4:	mov	r5, r0
   208d8:	cmp	r6, #0
   208dc:	strne	r5, [r6]
   208e0:	mov	r0, r5
   208e4:	bl	12ef8 <malloc@plt>
   208e8:	cmp	r0, #0
   208ec:	beq	20930 <flatcc_builder_finalize_buffer@@Base+0x70>
   208f0:	mov	r6, r0
   208f4:	mov	r0, r4
   208f8:	mov	r1, r6
   208fc:	mov	r2, r5
   20900:	bl	20874 <flatcc_builder_copy_buffer@@Base>
   20904:	cmp	r0, #0
   20908:	movne	r0, r6
   2090c:	popne	{r4, r5, r6, sl, fp, pc}
   20910:	movw	r0, #34216	; 0x85a8
   20914:	movt	r0, #2
   20918:	movw	r1, #29698	; 0x7402
   2091c:	movt	r1, #2
   20920:	movw	r3, #33695	; 0x839f
   20924:	movt	r3, #2
   20928:	movw	r2, #1948	; 0x79c
   2092c:	bl	12f88 <__assert_fail@plt>
   20930:	movw	r0, #34216	; 0x85a8
   20934:	movt	r0, #2
   20938:	movw	r1, #29698	; 0x7402
   2093c:	movt	r1, #2
   20940:	movw	r3, #33695	; 0x839f
   20944:	movt	r3, #2
   20948:	movw	r2, #1944	; 0x798
   2094c:	bl	12f88 <__assert_fail@plt>

00020950 <flatcc_builder_finalize_aligned_buffer@@Base>:
   20950:	push	{r4, r5, r6, r7, fp, lr}
   20954:	add	fp, sp, #16
   20958:	mov	r4, r1
   2095c:	mov	r5, r0
   20960:	bl	20790 <flatcc_builder_get_buffer_size@@Base>
   20964:	mov	r6, r0
   20968:	cmp	r4, #0
   2096c:	strne	r6, [r4]
   20970:	mov	r0, r5
   20974:	bl	20754 <flatcc_builder_get_buffer_alignment@@Base>
   20978:	add	r1, r6, r0
   2097c:	sub	r1, r1, #1
   20980:	rsb	r2, r0, #0
   20984:	and	r7, r1, r2
   20988:	mov	r1, r7
   2098c:	bl	209d8 <flatcc_builder_finalize_aligned_buffer@@Base+0x88>
   20990:	cmp	r0, #0
   20994:	beq	209c4 <flatcc_builder_finalize_aligned_buffer@@Base+0x74>
   20998:	mov	r6, r0
   2099c:	mov	r0, r5
   209a0:	mov	r1, r6
   209a4:	mov	r2, r7
   209a8:	bl	20874 <flatcc_builder_copy_buffer@@Base>
   209ac:	cmp	r0, #0
   209b0:	beq	209bc <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
   209b4:	mov	r0, r6
   209b8:	pop	{r4, r5, r6, r7, fp, pc}
   209bc:	mov	r0, r6
   209c0:	bl	12ea4 <free@plt>
   209c4:	mov	r6, #0
   209c8:	cmp	r4, #0
   209cc:	strne	r6, [r4]
   209d0:	mov	r0, r6
   209d4:	pop	{r4, r5, r6, r7, fp, pc}
   209d8:	push	{fp, lr}
   209dc:	mov	fp, sp
   209e0:	sub	sp, sp, #8
   209e4:	mov	r2, r1
   209e8:	mov	r1, r0
   209ec:	mov	r0, #0
   209f0:	str	r0, [sp, #4]
   209f4:	cmp	r1, #4
   209f8:	movls	r1, #4
   209fc:	add	r0, sp, #4
   20a00:	bl	12f34 <posix_memalign@plt>
   20a04:	cmp	r0, #0
   20a08:	ldrne	r0, [sp, #4]
   20a0c:	cmpne	r0, #0
   20a10:	beq	20a20 <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   20a14:	bl	12ea4 <free@plt>
   20a18:	mov	r0, #0
   20a1c:	str	r0, [sp, #4]
   20a20:	ldr	r0, [sp, #4]
   20a24:	mov	sp, fp
   20a28:	pop	{fp, pc}

00020a2c <flatcc_builder_aligned_alloc@@Base>:
   20a2c:	b	209d8 <flatcc_builder_finalize_aligned_buffer@@Base+0x88>

00020a30 <flatcc_builder_aligned_free@@Base>:
   20a30:	b	12ea4 <free@plt>

00020a34 <flatcc_builder_get_emit_context@@Base>:
   20a34:	ldr	r0, [r0, #36]	; 0x24
   20a38:	bx	lr
   20a3c:	ldr	r0, [r0, #140]	; 0x8c
   20a40:	sub	r1, r1, #1
   20a44:	and	r0, r0, r1
   20a48:	bx	lr
   20a4c:	push	{r4, r5, r6, sl, fp, lr}
   20a50:	add	fp, sp, #16
   20a54:	sub	sp, sp, #8
   20a58:	mov	r6, r2
   20a5c:	mov	r5, r0
   20a60:	ldr	r2, [r0, #28]
   20a64:	ldr	r0, [r0, #40]	; 0x28
   20a68:	ldr	r4, [r5, #48]	; 0x30
   20a6c:	mov	r3, #1
   20a70:	str	r3, [sp]
   20a74:	add	r2, r2, r1
   20a78:	add	r1, r5, #60	; 0x3c
   20a7c:	mov	r3, #1
   20a80:	blx	r4
   20a84:	mov	r1, r0
   20a88:	mvn	r0, #0
   20a8c:	cmp	r1, #0
   20a90:	beq	20a9c <flatcc_builder_get_emit_context@@Base+0x68>
   20a94:	sub	sp, fp, #16
   20a98:	pop	{r4, r5, r6, sl, fp, pc}
   20a9c:	mov	r0, r5
   20aa0:	mov	r1, r6
   20aa4:	bl	1e5e0 <flatcc_builder_start_struct@@Base+0x4c>
   20aa8:	mov	r0, #0
   20aac:	sub	sp, fp, #16
   20ab0:	pop	{r4, r5, r6, sl, fp, pc}
   20ab4:	push	{r4, r5, r6, sl, fp, lr}
   20ab8:	add	fp, sp, #16
   20abc:	sub	sp, sp, #8
   20ac0:	ldr	r2, [r0, #124]	; 0x7c
   20ac4:	cmp	r2, #0
   20ac8:	bne	20b68 <flatcc_builder_get_emit_context@@Base+0x134>
   20acc:	mov	r4, r0
   20ad0:	mov	r0, #0
   20ad4:	str	r0, [sp]
   20ad8:	mov	r6, #16
   20adc:	mov	r0, r4
   20ae0:	mov	r1, #6
   20ae4:	mov	r3, #16
   20ae8:	bl	1dbfc <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   20aec:	mvn	r5, #0
   20af0:	cmp	r0, #0
   20af4:	beq	20b5c <flatcc_builder_get_emit_context@@Base+0x128>
   20af8:	add	r1, r4, #92	; 0x5c
   20afc:	str	r6, [r4, #124]	; 0x7c
   20b00:	ldr	r0, [r4, #40]	; 0x28
   20b04:	ldr	ip, [r4, #48]	; 0x30
   20b08:	mov	r2, #5
   20b0c:	str	r2, [sp]
   20b10:	mov	r6, #256	; 0x100
   20b14:	mov	r2, #256	; 0x100
   20b18:	mov	r3, #1
   20b1c:	blx	ip
   20b20:	cmp	r0, #0
   20b24:	bne	20b5c <flatcc_builder_get_emit_context@@Base+0x128>
   20b28:	ldr	r0, [r4, #96]	; 0x60
   20b2c:	mov	r1, r6
   20b30:	lsl	r6, r6, #1
   20b34:	cmp	r0, r1, lsl #1
   20b38:	bcs	20b2c <flatcc_builder_get_emit_context@@Base+0xf8>
   20b3c:	lsr	r1, r1, #2
   20b40:	mvn	r0, #0
   20b44:	mov	r2, #1
   20b48:	add	r0, r0, #1
   20b4c:	cmp	r1, r2, lsl r0
   20b50:	bhi	20b48 <flatcc_builder_get_emit_context@@Base+0x114>
   20b54:	str	r0, [r4, #116]	; 0x74
   20b58:	mov	r5, #0
   20b5c:	mov	r0, r5
   20b60:	sub	sp, fp, #16
   20b64:	pop	{r4, r5, r6, sl, fp, pc}
   20b68:	movw	r0, #34156	; 0x856c
   20b6c:	movt	r0, #2
   20b70:	movw	r1, #29698	; 0x7402
   20b74:	movt	r1, #2
   20b78:	movw	r3, #34171	; 0x857b
   20b7c:	movt	r3, #2
   20b80:	movw	r2, #342	; 0x156
   20b84:	bl	12f88 <__assert_fail@plt>

00020b88 <flatcc_emitter_recycle_page@@Base>:
   20b88:	ldr	ip, [r0]
   20b8c:	mvn	r2, #0
   20b90:	cmp	ip, r1
   20b94:	ldrne	r3, [r0, #4]
   20b98:	cmpne	r3, r1
   20b9c:	bne	20ba8 <flatcc_emitter_recycle_page@@Base+0x20>
   20ba0:	mov	r0, r2
   20ba4:	bx	lr
   20ba8:	ldr	r2, [r1, #2944]	; 0xb80
   20bac:	ldr	r3, [r1, #2948]	; 0xb84
   20bb0:	str	r3, [r2, #2948]	; 0xb84
   20bb4:	ldr	r2, [r1, #2944]	; 0xb80
   20bb8:	ldr	r3, [r1, #2948]	; 0xb84
   20bbc:	str	r2, [r3, #2944]	; 0xb80
   20bc0:	ldr	r2, [ip, #2948]	; 0xb84
   20bc4:	str	r2, [r1, #2948]	; 0xb84
   20bc8:	ldr	r0, [r0]
   20bcc:	str	r0, [r1, #2944]	; 0xb80
   20bd0:	str	r1, [r2, #2944]	; 0xb80
   20bd4:	ldr	r0, [r1, #2944]	; 0xb80
   20bd8:	str	r1, [r0, #2948]	; 0xb84
   20bdc:	mov	r2, #0
   20be0:	mov	r0, r2
   20be4:	bx	lr

00020be8 <flatcc_emitter_reset@@Base>:
   20be8:	push	{r4, sl, fp, lr}
   20bec:	add	fp, sp, #8
   20bf0:	mov	r4, r0
   20bf4:	ldr	r0, [r0]
   20bf8:	cmp	r0, #0
   20bfc:	beq	20ca0 <flatcc_emitter_reset@@Base+0xb8>
   20c00:	mov	r1, #1472	; 0x5c0
   20c04:	add	r2, r0, #1472	; 0x5c0
   20c08:	stmib	r4, {r0, r2}
   20c0c:	str	r1, [r4, #12]
   20c10:	str	r2, [r4, #16]
   20c14:	str	r1, [r4, #20]
   20c18:	movw	r1, #64064	; 0xfa40
   20c1c:	movt	r1, #65535	; 0xffff
   20c20:	str	r1, [r0, #2952]	; 0xb88
   20c24:	ldr	r0, [r4, #32]
   20c28:	cmp	r0, #0
   20c2c:	ldreq	r0, [r4, #24]
   20c30:	streq	r0, [r4, #32]
   20c34:	add	r2, r4, #24
   20c38:	ldm	r2, {r0, r1, r2}
   20c3c:	mov	r3, #0
   20c40:	str	r3, [r4, #24]
   20c44:	add	r2, r2, r2, lsl #1
   20c48:	lsr	r2, r2, #2
   20c4c:	add	r0, r2, r0, lsr #2
   20c50:	str	r0, [r4, #32]
   20c54:	cmp	r1, r0, lsl #1
   20c58:	bls	20ca0 <flatcc_emitter_reset@@Base+0xb8>
   20c5c:	ldr	r2, [r4]
   20c60:	ldr	r1, [r4, #4]
   20c64:	ldr	r0, [r1, #2944]	; 0xb80
   20c68:	cmp	r0, r2
   20c6c:	popeq	{r4, sl, fp, pc}
   20c70:	ldr	r2, [r0, #2944]	; 0xb80
   20c74:	str	r2, [r1, #2944]	; 0xb80
   20c78:	ldr	r1, [r0, #2944]	; 0xb80
   20c7c:	ldr	r2, [r4, #4]
   20c80:	str	r2, [r1, #2948]	; 0xb84
   20c84:	bl	12ea4 <free@plt>
   20c88:	ldr	r0, [r4, #28]
   20c8c:	ldr	r1, [r4, #32]
   20c90:	sub	r0, r0, #2944	; 0xb80
   20c94:	str	r0, [r4, #28]
   20c98:	cmp	r0, r1, lsl #1
   20c9c:	bhi	20c5c <flatcc_emitter_reset@@Base+0x74>
   20ca0:	pop	{r4, sl, fp, pc}

00020ca4 <flatcc_emitter_clear@@Base>:
   20ca4:	push	{r4, r5, r6, sl, fp, lr}
   20ca8:	add	fp, sp, #16
   20cac:	ldr	r5, [r0]
   20cb0:	cmp	r5, #0
   20cb4:	popeq	{r4, r5, r6, sl, fp, pc}
   20cb8:	mov	r4, r0
   20cbc:	ldr	r0, [r5, #2948]	; 0xb84
   20cc0:	mov	r6, #0
   20cc4:	str	r6, [r0, #2944]	; 0xb80
   20cc8:	b	20cd8 <flatcc_emitter_clear@@Base+0x34>
   20ccc:	mov	r5, r0
   20cd0:	ldr	r0, [r0, #2948]	; 0xb84
   20cd4:	bl	12ea4 <free@plt>
   20cd8:	ldr	r0, [r5, #2944]	; 0xb80
   20cdc:	cmp	r0, #0
   20ce0:	bne	20ccc <flatcc_emitter_clear@@Base+0x28>
   20ce4:	mov	r0, r5
   20ce8:	bl	12ea4 <free@plt>
   20cec:	vmov.i32	q8, #0	; 0x00000000
   20cf0:	add	r0, r4, #16
   20cf4:	vst1.32	{d16-d17}, [r0]
   20cf8:	mov	r0, #32
   20cfc:	vst1.32	{d16-d17}, [r4], r0
   20d00:	str	r6, [r4]
   20d04:	pop	{r4, r5, r6, sl, fp, pc}

00020d08 <flatcc_emitter@@Base>:
   20d08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20d0c:	add	fp, sp, #24
   20d10:	mov	r4, r2
   20d14:	mov	r5, r1
   20d18:	mov	r6, r0
   20d1c:	ldr	r1, [r0, #24]
   20d20:	ldr	r0, [fp, #8]
   20d24:	add	r1, r1, r0
   20d28:	str	r1, [r6, #24]
   20d2c:	mov	r1, r6
   20d30:	cmn	r3, #1
   20d34:	ble	20d74 <flatcc_emitter@@Base+0x6c>
   20d38:	ldr	r2, [r1, #20]!
   20d3c:	cmp	r2, r0
   20d40:	bcs	20dbc <flatcc_emitter@@Base+0xb4>
   20d44:	mov	r8, #0
   20d48:	cmp	r4, #0
   20d4c:	beq	20e0c <flatcc_emitter@@Base+0x104>
   20d50:	ldm	r5, {r1, r2}
   20d54:	mov	r0, r6
   20d58:	bl	20ed8 <flatcc_emitter@@Base+0x1d0>
   20d5c:	cmp	r0, #0
   20d60:	bne	20db0 <flatcc_emitter@@Base+0xa8>
   20d64:	subs	r4, r4, #1
   20d68:	add	r5, r5, #8
   20d6c:	bne	20d50 <flatcc_emitter@@Base+0x48>
   20d70:	b	20e0c <flatcc_emitter@@Base+0x104>
   20d74:	ldr	r2, [r1, #12]!
   20d78:	cmp	r2, r0
   20d7c:	bcs	20dcc <flatcc_emitter@@Base+0xc4>
   20d80:	add	r0, r5, r4, lsl #3
   20d84:	sub	r5, r0, #4
   20d88:	rsb	r4, r4, #1
   20d8c:	cmp	r4, #1
   20d90:	beq	20e14 <flatcc_emitter@@Base+0x10c>
   20d94:	ldmda	r5, {r1, r2}
   20d98:	mov	r0, r6
   20d9c:	bl	20e20 <flatcc_emitter@@Base+0x118>
   20da0:	sub	r5, r5, #8
   20da4:	add	r4, r4, #1
   20da8:	cmp	r0, #0
   20dac:	beq	20d8c <flatcc_emitter@@Base+0x84>
   20db0:	mvn	r8, #0
   20db4:	mov	r0, r8
   20db8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20dbc:	ldr	r7, [r6, #16]
   20dc0:	add	r3, r7, r0
   20dc4:	str	r3, [r6, #16]
   20dc8:	b	20dd8 <flatcc_emitter@@Base+0xd0>
   20dcc:	ldr	r3, [r6, #8]
   20dd0:	sub	r7, r3, r0
   20dd4:	str	r7, [r6, #8]
   20dd8:	sub	r0, r2, r0
   20ddc:	str	r0, [r1]
   20de0:	mov	r8, #0
   20de4:	cmp	r4, #0
   20de8:	beq	20e0c <flatcc_emitter@@Base+0x104>
   20dec:	ldm	r5, {r1, r2}
   20df0:	mov	r0, r7
   20df4:	bl	12eb0 <memcpy@plt>
   20df8:	ldr	r0, [r5, #4]
   20dfc:	add	r7, r7, r0
   20e00:	add	r5, r5, #8
   20e04:	subs	r4, r4, #1
   20e08:	bne	20dec <flatcc_emitter@@Base+0xe4>
   20e0c:	mov	r0, r8
   20e10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20e14:	mov	r8, #0
   20e18:	mov	r0, r8
   20e1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20e20:	push	{r4, r5, r6, r7, fp, lr}
   20e24:	add	fp, sp, #16
   20e28:	cmp	r2, #0
   20e2c:	moveq	r0, #0
   20e30:	popeq	{r4, r5, r6, r7, fp, pc}
   20e34:	mov	r4, r2
   20e38:	mov	r5, r0
   20e3c:	clz	r0, r2
   20e40:	lsr	r7, r0, #5
   20e44:	add	r6, r1, r2
   20e48:	b	20e84 <flatcc_emitter@@Base+0x17c>
   20e4c:	sub	r0, r0, r7
   20e50:	str	r0, [r5, #12]
   20e54:	ldr	r0, [r5, #8]
   20e58:	sub	r0, r0, r7
   20e5c:	str	r0, [r5, #8]
   20e60:	sub	r6, r6, r7
   20e64:	mov	r1, r6
   20e68:	mov	r2, r7
   20e6c:	bl	12eb0 <memcpy@plt>
   20e70:	subs	r4, r4, r7
   20e74:	clz	r0, r4
   20e78:	lsr	r7, r0, #5
   20e7c:	moveq	r0, #0
   20e80:	popeq	{r4, r5, r6, r7, fp, pc}
   20e84:	ldr	r0, [r5, #12]
   20e88:	cmp	r4, r0
   20e8c:	bls	20ebc <flatcc_emitter@@Base+0x1b4>
   20e90:	cmp	r0, #0
   20e94:	bne	20ec4 <flatcc_emitter@@Base+0x1bc>
   20e98:	mov	r0, r5
   20e9c:	bl	2104c <flatcc_emitter_copy_buffer@@Base+0xbc>
   20ea0:	cmp	r0, #0
   20ea4:	mov	r1, r0
   20ea8:	movwne	r1, #1
   20eac:	orr	r1, r1, r7
   20eb0:	tst	r1, #1
   20eb4:	beq	20e84 <flatcc_emitter@@Base+0x17c>
   20eb8:	b	20ecc <flatcc_emitter@@Base+0x1c4>
   20ebc:	mov	r7, r4
   20ec0:	b	20e4c <flatcc_emitter@@Base+0x144>
   20ec4:	mov	r7, r0
   20ec8:	b	20e4c <flatcc_emitter@@Base+0x144>
   20ecc:	cmp	r0, #0
   20ed0:	mvnne	r0, #0
   20ed4:	pop	{r4, r5, r6, r7, fp, pc}
   20ed8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20edc:	add	fp, sp, #24
   20ee0:	cmp	r2, #0
   20ee4:	moveq	r0, #0
   20ee8:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   20eec:	mov	r4, r2
   20ef0:	mov	r8, r1
   20ef4:	mov	r6, r0
   20ef8:	clz	r0, r2
   20efc:	lsr	r5, r0, #5
   20f00:	b	20f44 <flatcc_emitter@@Base+0x23c>
   20f04:	ldr	r0, [r6, #16]
   20f08:	mov	r1, r8
   20f0c:	mov	r2, r7
   20f10:	bl	12eb0 <memcpy@plt>
   20f14:	ldr	r0, [r6, #16]
   20f18:	ldr	r1, [r6, #20]
   20f1c:	add	r0, r0, r7
   20f20:	sub	r1, r1, r7
   20f24:	str	r0, [r6, #16]
   20f28:	str	r1, [r6, #20]
   20f2c:	add	r8, r8, r7
   20f30:	subs	r4, r4, r7
   20f34:	clz	r0, r4
   20f38:	lsr	r5, r0, #5
   20f3c:	moveq	r0, #0
   20f40:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   20f44:	ldr	r7, [r6, #20]
   20f48:	cmp	r4, r7
   20f4c:	bls	20f7c <flatcc_emitter@@Base+0x274>
   20f50:	cmp	r7, #0
   20f54:	bne	20f04 <flatcc_emitter@@Base+0x1fc>
   20f58:	mov	r0, r6
   20f5c:	bl	21138 <flatcc_emitter_copy_buffer@@Base+0x1a8>
   20f60:	cmp	r0, #0
   20f64:	mov	r1, r0
   20f68:	movwne	r1, #1
   20f6c:	orr	r1, r1, r5
   20f70:	tst	r1, #1
   20f74:	beq	20f44 <flatcc_emitter@@Base+0x23c>
   20f78:	b	20f84 <flatcc_emitter@@Base+0x27c>
   20f7c:	mov	r7, r4
   20f80:	b	20f04 <flatcc_emitter@@Base+0x1fc>
   20f84:	cmp	r0, #0
   20f88:	mvnne	r0, #0
   20f8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00020f90 <flatcc_emitter_copy_buffer@@Base>:
   20f90:	push	{r4, r5, r6, sl, fp, lr}
   20f94:	add	fp, sp, #16
   20f98:	mov	r3, r2
   20f9c:	ldr	r2, [r0, #24]
   20fa0:	mov	r5, #0
   20fa4:	cmp	r2, r3
   20fa8:	bhi	21030 <flatcc_emitter_copy_buffer@@Base+0xa0>
   20fac:	mov	r4, r0
   20fb0:	ldr	r0, [r0]
   20fb4:	cmp	r0, #0
   20fb8:	beq	21030 <flatcc_emitter_copy_buffer@@Base+0xa0>
   20fbc:	mov	r6, r1
   20fc0:	ldr	r1, [r4, #4]
   20fc4:	cmp	r0, r1
   20fc8:	beq	21038 <flatcc_emitter_copy_buffer@@Base+0xa8>
   20fcc:	ldr	r1, [r4, #8]
   20fd0:	ldr	r0, [r4, #12]
   20fd4:	rsb	r5, r0, #2944	; 0xb80
   20fd8:	mov	r0, r6
   20fdc:	mov	r2, r5
   20fe0:	bl	12eb0 <memcpy@plt>
   20fe4:	add	r5, r6, r5
   20fe8:	ldm	r4, {r0, r1}
   20fec:	ldr	r6, [r0, #2944]	; 0xb80
   20ff0:	cmp	r6, r1
   20ff4:	beq	2101c <flatcc_emitter_copy_buffer@@Base+0x8c>
   20ff8:	mov	r0, r5
   20ffc:	mov	r1, r6
   21000:	mov	r2, #2944	; 0xb80
   21004:	bl	12eb0 <memcpy@plt>
   21008:	add	r5, r5, #2944	; 0xb80
   2100c:	ldr	r6, [r6, #2944]	; 0xb80
   21010:	ldr	r0, [r4, #4]
   21014:	cmp	r6, r0
   21018:	bne	20ff8 <flatcc_emitter_copy_buffer@@Base+0x68>
   2101c:	ldr	r0, [r4, #20]
   21020:	rsb	r2, r0, #2944	; 0xb80
   21024:	mov	r0, r5
   21028:	mov	r1, r6
   2102c:	bl	12eb0 <memcpy@plt>
   21030:	mov	r0, r5
   21034:	pop	{r4, r5, r6, sl, fp, pc}
   21038:	ldr	r1, [r4, #8]
   2103c:	mov	r0, r6
   21040:	bl	12eb0 <memcpy@plt>
   21044:	mov	r0, r6
   21048:	pop	{r4, r5, r6, sl, fp, pc}
   2104c:	push	{r4, r5, fp, lr}
   21050:	add	fp, sp, #8
   21054:	mov	r4, r0
   21058:	ldr	r5, [r0]
   2105c:	cmp	r5, #0
   21060:	beq	21088 <flatcc_emitter_copy_buffer@@Base+0xf8>
   21064:	ldr	r0, [r5, #2948]	; 0xb84
   21068:	ldr	r1, [r4, #4]
   2106c:	cmp	r0, r1
   21070:	beq	21088 <flatcc_emitter_copy_buffer@@Base+0xf8>
   21074:	ldr	r1, [r5, #2952]	; 0xb88
   21078:	sub	r1, r1, #2944	; 0xb80
   2107c:	str	r1, [r0, #2952]	; 0xb88
   21080:	ldr	r0, [r5, #2948]	; 0xb84
   21084:	b	210c8 <flatcc_emitter_copy_buffer@@Base+0x138>
   21088:	movw	r0, #2956	; 0xb8c
   2108c:	bl	12ef8 <malloc@plt>
   21090:	cmp	r0, #0
   21094:	mvneq	r0, #0
   21098:	popeq	{r4, r5, fp, pc}
   2109c:	ldr	r1, [r4, #28]
   210a0:	add	r1, r1, #2944	; 0xb80
   210a4:	str	r1, [r4, #28]
   210a8:	cmp	r5, #0
   210ac:	beq	210f8 <flatcc_emitter_copy_buffer@@Base+0x168>
   210b0:	ldm	r4, {r1, r2}
   210b4:	str	r1, [r0, #2944]	; 0xb80
   210b8:	str	r2, [r0, #2948]	; 0xb84
   210bc:	str	r0, [r1, #2948]	; 0xb84
   210c0:	ldr	r1, [r4, #4]
   210c4:	str	r0, [r1, #2944]	; 0xb80
   210c8:	str	r0, [r4]
   210cc:	mov	r0, #2944	; 0xb80
   210d0:	ldr	r1, [r4]
   210d4:	add	r2, r1, #2944	; 0xb80
   210d8:	str	r2, [r4, #8]
   210dc:	str	r0, [r4, #12]
   210e0:	ldr	r0, [r1, #2944]	; 0xb80
   210e4:	ldr	r0, [r0, #2952]	; 0xb88
   210e8:	sub	r0, r0, #2944	; 0xb80
   210ec:	str	r0, [r1, #2952]	; 0xb88
   210f0:	mov	r0, #0
   210f4:	pop	{r4, r5, fp, pc}
   210f8:	str	r0, [r4, #4]
   210fc:	str	r0, [r4]
   21100:	mov	r1, #1472	; 0x5c0
   21104:	str	r1, [r4, #12]
   21108:	str	r1, [r4, #20]
   2110c:	ldr	r1, [r4]
   21110:	add	r1, r1, #1472	; 0x5c0
   21114:	str	r1, [r4, #8]
   21118:	str	r1, [r4, #16]
   2111c:	movw	r1, #64064	; 0xfa40
   21120:	movt	r1, #65535	; 0xffff
   21124:	str	r0, [r0, #2944]	; 0xb80
   21128:	str	r0, [r0, #2948]	; 0xb84
   2112c:	str	r1, [r0, #2952]	; 0xb88
   21130:	mov	r0, #0
   21134:	pop	{r4, r5, fp, pc}
   21138:	push	{r4, r5, fp, lr}
   2113c:	add	fp, sp, #8
   21140:	mov	r4, r0
   21144:	ldr	r5, [r0, #4]
   21148:	cmp	r5, #0
   2114c:	beq	21160 <flatcc_emitter_copy_buffer@@Base+0x1d0>
   21150:	ldr	r0, [r5, #2944]	; 0xb80
   21154:	ldr	r1, [r4]
   21158:	cmp	r0, r1
   2115c:	bne	2119c <flatcc_emitter_copy_buffer@@Base+0x20c>
   21160:	movw	r0, #2956	; 0xb8c
   21164:	bl	12ef8 <malloc@plt>
   21168:	cmp	r0, #0
   2116c:	mvneq	r0, #0
   21170:	popeq	{r4, r5, fp, pc}
   21174:	ldr	r1, [r4, #28]
   21178:	add	r1, r1, #2944	; 0xb80
   2117c:	str	r1, [r4, #28]
   21180:	cmp	r5, #0
   21184:	beq	211c8 <flatcc_emitter_copy_buffer@@Base+0x238>
   21188:	ldr	r1, [r4]
   2118c:	str	r1, [r0, #2944]	; 0xb80
   21190:	str	r5, [r0, #2948]	; 0xb84
   21194:	str	r0, [r1, #2948]	; 0xb84
   21198:	str	r0, [r5, #2944]	; 0xb80
   2119c:	str	r0, [r4, #4]
   211a0:	mov	r0, #2944	; 0xb80
   211a4:	ldr	r1, [r4, #4]
   211a8:	str	r1, [r4, #16]
   211ac:	str	r0, [r4, #20]
   211b0:	ldr	r0, [r1, #2948]	; 0xb84
   211b4:	ldr	r0, [r0, #2952]	; 0xb88
   211b8:	add	r0, r0, #2944	; 0xb80
   211bc:	str	r0, [r1, #2952]	; 0xb88
   211c0:	mov	r0, #0
   211c4:	pop	{r4, r5, fp, pc}
   211c8:	str	r0, [r4, #4]
   211cc:	str	r0, [r4]
   211d0:	mov	r1, #1472	; 0x5c0
   211d4:	str	r1, [r4, #12]
   211d8:	str	r1, [r4, #20]
   211dc:	ldr	r1, [r4]
   211e0:	add	r1, r1, #1472	; 0x5c0
   211e4:	str	r1, [r4, #8]
   211e8:	str	r1, [r4, #16]
   211ec:	movw	r1, #64064	; 0xfa40
   211f0:	movt	r1, #65535	; 0xffff
   211f4:	str	r0, [r0, #2944]	; 0xb80
   211f8:	str	r0, [r0, #2948]	; 0xb84
   211fc:	str	r1, [r0, #2952]	; 0xb88
   21200:	mov	r0, #0
   21204:	pop	{r4, r5, fp, pc}

00021208 <flatcc_verify_error_string@@Base>:
   21208:	cmp	r0, #36	; 0x24
   2120c:	movwhi	r0, #35430	; 0x8a66
   21210:	movthi	r0, #2
   21214:	bxhi	lr
   21218:	movw	r1, #35440	; 0x8a70
   2121c:	movt	r1, #2
   21220:	ldr	r0, [r1, r0, lsl #2]
   21224:	bx	lr

00021228 <flatcc_verify_field@@Base>:
   21228:	b	2122c <flatcc_verify_field@@Base+0x4>
   2122c:	push	{r4, r5, r6, r7, fp, lr}
   21230:	add	fp, sp, #16
   21234:	mov	r4, r3
   21238:	mov	r6, r2
   2123c:	mov	r5, r0
   21240:	ldr	r7, [r0]
   21244:	bl	21f44 <flatcc_verify_union_field@@Base+0x130>
   21248:	movw	r1, #65535	; 0xffff
   2124c:	tst	r0, r1
   21250:	beq	21288 <flatcc_verify_field@@Base+0x60>
   21254:	uxtah	r2, r6, r0
   21258:	ldrh	r3, [r5, #20]
   2125c:	mov	r1, #13
   21260:	cmp	r2, r3
   21264:	bhi	2128c <flatcc_verify_field@@Base+0x64>
   21268:	uxth	r0, r0
   2126c:	add	r0, r0, r7
   21270:	ldr	r1, [r5, #16]
   21274:	add	r0, r0, r1
   21278:	sub	r1, r4, #1
   2127c:	ands	r0, r0, r1
   21280:	movwne	r0, #12
   21284:	pop	{r4, r5, r6, r7, fp, pc}
   21288:	mov	r1, #0
   2128c:	mov	r0, r1
   21290:	pop	{r4, r5, r6, r7, fp, pc}

00021294 <flatcc_verify_string_field@@Base>:
   21294:	push	{r4, r5, r6, sl, fp, lr}
   21298:	add	fp, sp, #16
   2129c:	sub	sp, sp, #8
   212a0:	mov	r4, r0
   212a4:	add	r3, sp, #4
   212a8:	bl	212f0 <flatcc_verify_string_field@@Base+0x5c>
   212ac:	cmp	r0, #0
   212b0:	bne	212e8 <flatcc_verify_string_field@@Base+0x54>
   212b4:	ldr	r5, [sp, #4]
   212b8:	cmp	r5, #0
   212bc:	beq	212e8 <flatcc_verify_string_field@@Base+0x54>
   212c0:	ldr	r6, [r4]
   212c4:	ldr	r4, [r4, #4]
   212c8:	mov	r0, r6
   212cc:	mov	r1, r5
   212d0:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   212d4:	mov	r3, r0
   212d8:	mov	r0, r6
   212dc:	mov	r1, r4
   212e0:	mov	r2, r5
   212e4:	bl	21368 <flatcc_verify_string_field@@Base+0xd4>
   212e8:	sub	sp, fp, #16
   212ec:	pop	{r4, r5, r6, sl, fp, pc}
   212f0:	push	{r4, r5, r6, sl, fp, lr}
   212f4:	add	fp, sp, #16
   212f8:	mov	r4, r3
   212fc:	mov	r5, r2
   21300:	mov	r6, r0
   21304:	bl	21f44 <flatcc_verify_union_field@@Base+0x130>
   21308:	movw	r1, #65535	; 0xffff
   2130c:	tst	r0, r1
   21310:	beq	21350 <flatcc_verify_string_field@@Base+0xbc>
   21314:	mov	r1, #4
   21318:	uxtah	r1, r1, r0
   2131c:	ldrh	r2, [r6, #20]
   21320:	mov	r5, #13
   21324:	cmp	r1, r2
   21328:	bhi	21348 <flatcc_verify_string_field@@Base+0xb4>
   2132c:	uxth	r0, r0
   21330:	ldr	r1, [r6, #16]
   21334:	add	r0, r1, r0
   21338:	mov	r5, #12
   2133c:	tst	r0, #3
   21340:	streq	r0, [r4]
   21344:	moveq	r5, #0
   21348:	mov	r0, r5
   2134c:	pop	{r4, r5, r6, sl, fp, pc}
   21350:	mov	r0, #0
   21354:	str	r0, [r4]
   21358:	cmp	r5, #0
   2135c:	movwne	r5, #4
   21360:	mov	r0, r5
   21364:	pop	{r4, r5, r6, sl, fp, pc}
   21368:	push	{r4, r5, r6, r7, fp, lr}
   2136c:	add	fp, sp, #16
   21370:	mov	r6, r3
   21374:	mov	r7, r2
   21378:	mov	r5, r1
   2137c:	mov	r4, r0
   21380:	mov	r0, r1
   21384:	mov	r1, r2
   21388:	mov	r2, r3
   2138c:	bl	22210 <flatcc_verify_union_vector_field@@Base+0x290>
   21390:	cmp	r0, #0
   21394:	beq	213d4 <flatcc_verify_string_field@@Base+0x140>
   21398:	add	r6, r6, r7
   2139c:	mov	r0, r4
   213a0:	mov	r1, r6
   213a4:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   213a8:	add	r2, r6, #4
   213ac:	sub	r3, r5, r2
   213b0:	add	r7, r0, #1
   213b4:	mov	r1, #8
   213b8:	cmp	r3, r7
   213bc:	bcc	213d8 <flatcc_verify_string_field@@Base+0x144>
   213c0:	add	r1, r4, r2
   213c4:	ldrb	r0, [r1, r0]
   213c8:	cmp	r0, #0
   213cc:	movwne	r0, #7
   213d0:	pop	{r4, r5, r6, r7, fp, pc}
   213d4:	mov	r1, #17
   213d8:	mov	r0, r1
   213dc:	pop	{r4, r5, r6, r7, fp, pc}
   213e0:	add	r0, r0, r1
   213e4:	b	22248 <flatcc_verify_union_vector_field@@Base+0x2c8>

000213e8 <flatcc_verify_vector_field@@Base>:
   213e8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   213ec:	add	fp, sp, #24
   213f0:	sub	sp, sp, #16
   213f4:	mov	r4, r3
   213f8:	mov	r6, r0
   213fc:	add	r3, sp, #12
   21400:	bl	212f0 <flatcc_verify_string_field@@Base+0x5c>
   21404:	cmp	r0, #0
   21408:	bne	21450 <flatcc_verify_vector_field@@Base+0x68>
   2140c:	ldr	r5, [sp, #12]
   21410:	cmp	r5, #0
   21414:	beq	21450 <flatcc_verify_vector_field@@Base+0x68>
   21418:	ldr	r8, [fp, #12]
   2141c:	ldr	r9, [fp, #8]
   21420:	ldr	r7, [r6]
   21424:	ldr	r6, [r6, #4]
   21428:	mov	r0, r7
   2142c:	mov	r1, r5
   21430:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   21434:	mov	r3, r0
   21438:	stm	sp, {r4, r9}
   2143c:	str	r8, [sp, #8]
   21440:	mov	r0, r7
   21444:	mov	r1, r6
   21448:	mov	r2, r5
   2144c:	bl	21458 <flatcc_verify_vector_field@@Base+0x70>
   21450:	sub	sp, fp, #24
   21454:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21458:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2145c:	add	fp, sp, #24
   21460:	mov	r5, r3
   21464:	mov	r7, r2
   21468:	mov	r4, r1
   2146c:	mov	r6, r0
   21470:	ldr	r3, [fp, #12]
   21474:	mov	r0, r1
   21478:	mov	r1, r2
   2147c:	mov	r2, r5
   21480:	bl	22254 <flatcc_verify_union_vector_field@@Base+0x2d4>
   21484:	cmp	r0, #0
   21488:	moveq	r0, #16
   2148c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   21490:	ldr	r8, [fp, #16]
   21494:	add	r5, r5, r7
   21498:	mov	r0, r6
   2149c:	mov	r1, r5
   214a0:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   214a4:	mov	r1, r0
   214a8:	mov	r0, #25
   214ac:	cmp	r1, r8
   214b0:	pophi	{r4, r5, r6, r7, r8, sl, fp, pc}
   214b4:	ldr	r0, [fp, #8]
   214b8:	mul	r1, r1, r0
   214bc:	sub	r0, r4, #4
   214c0:	sub	r2, r0, r5
   214c4:	mov	r0, #0
   214c8:	cmp	r2, r1
   214cc:	movwcc	r0, #26
   214d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000214d4 <flatcc_verify_string_vector_field@@Base>:
   214d4:	push	{r4, r5, r6, sl, fp, lr}
   214d8:	add	fp, sp, #16
   214dc:	sub	sp, sp, #8
   214e0:	mov	r4, r0
   214e4:	add	r3, sp, #4
   214e8:	bl	212f0 <flatcc_verify_string_field@@Base+0x5c>
   214ec:	cmp	r0, #0
   214f0:	bne	21528 <flatcc_verify_string_vector_field@@Base+0x54>
   214f4:	ldr	r5, [sp, #4]
   214f8:	cmp	r5, #0
   214fc:	beq	21528 <flatcc_verify_string_vector_field@@Base+0x54>
   21500:	ldr	r6, [r4]
   21504:	ldr	r4, [r4, #4]
   21508:	mov	r0, r6
   2150c:	mov	r1, r5
   21510:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   21514:	mov	r3, r0
   21518:	mov	r0, r6
   2151c:	mov	r1, r4
   21520:	mov	r2, r5
   21524:	bl	21530 <flatcc_verify_string_vector_field@@Base+0x5c>
   21528:	sub	sp, fp, #16
   2152c:	pop	{r4, r5, r6, sl, fp, pc}
   21530:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21534:	add	fp, sp, #24
   21538:	sub	sp, sp, #16
   2153c:	mov	r6, r3
   21540:	mov	r7, r2
   21544:	mov	r8, r1
   21548:	mov	r5, r0
   2154c:	mvn	r0, #-1073741824	; 0xc0000000
   21550:	mov	r1, #4
   21554:	str	r1, [sp]
   21558:	str	r1, [sp, #4]
   2155c:	str	r0, [sp, #8]
   21560:	mov	r0, r5
   21564:	mov	r1, r8
   21568:	bl	21458 <flatcc_verify_vector_field@@Base+0x70>
   2156c:	cmp	r0, #0
   21570:	beq	2157c <flatcc_verify_string_vector_field@@Base+0xa8>
   21574:	sub	sp, fp, #24
   21578:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2157c:	add	r7, r6, r7
   21580:	mov	r0, r5
   21584:	mov	r1, r7
   21588:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   2158c:	cmp	r0, #0
   21590:	beq	215d8 <flatcc_verify_string_vector_field@@Base+0x104>
   21594:	mov	r6, r0
   21598:	add	r7, r7, #4
   2159c:	mov	r4, #0
   215a0:	mov	r0, r5
   215a4:	mov	r1, r7
   215a8:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   215ac:	mov	r3, r0
   215b0:	mov	r0, r5
   215b4:	mov	r1, r8
   215b8:	mov	r2, r7
   215bc:	bl	21368 <flatcc_verify_string_field@@Base+0xd4>
   215c0:	cmp	r0, #0
   215c4:	bne	21574 <flatcc_verify_string_vector_field@@Base+0xa0>
   215c8:	add	r4, r4, #1
   215cc:	add	r7, r7, #4
   215d0:	cmp	r4, r6
   215d4:	bcc	215a0 <flatcc_verify_string_vector_field@@Base+0xcc>
   215d8:	mov	r0, #0
   215dc:	sub	sp, fp, #24
   215e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000215e4 <flatcc_verify_table_field@@Base>:
   215e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   215e8:	add	fp, sp, #24
   215ec:	sub	sp, sp, #16
   215f0:	mov	r8, r3
   215f4:	mov	r5, r0
   215f8:	add	r3, sp, #12
   215fc:	bl	212f0 <flatcc_verify_string_field@@Base+0x5c>
   21600:	cmp	r0, #0
   21604:	bne	21644 <flatcc_verify_table_field@@Base+0x60>
   21608:	ldr	r6, [sp, #12]
   2160c:	cmp	r6, #0
   21610:	beq	21644 <flatcc_verify_table_field@@Base+0x60>
   21614:	ldr	r7, [r5]
   21618:	ldr	r4, [r5, #4]
   2161c:	mov	r0, r7
   21620:	mov	r1, r6
   21624:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   21628:	mov	r3, r0
   2162c:	ldr	r0, [r5, #8]
   21630:	stm	sp, {r0, r8}
   21634:	mov	r0, r7
   21638:	mov	r1, r4
   2163c:	mov	r2, r6
   21640:	bl	2164c <flatcc_verify_table_field@@Base+0x68>
   21644:	sub	sp, fp, #24
   21648:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2164c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21650:	add	fp, sp, #24
   21654:	sub	sp, sp, #24
   21658:	mov	r4, r0
   2165c:	ldr	r0, [fp, #8]
   21660:	subs	r0, r0, #1
   21664:	str	r0, [sp, #8]
   21668:	moveq	r0, #3
   2166c:	subeq	sp, fp, #24
   21670:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   21674:	mov	r6, r3
   21678:	mov	r7, r2
   2167c:	mov	r5, r1
   21680:	mov	r0, r1
   21684:	mov	r1, r2
   21688:	mov	r2, r3
   2168c:	bl	22210 <flatcc_verify_union_vector_field@@Base+0x290>
   21690:	cmp	r0, #0
   21694:	moveq	r0, #15
   21698:	subeq	sp, fp, #24
   2169c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   216a0:	add	r7, r6, r7
   216a4:	str	r7, [sp, #16]
   216a8:	mov	r0, r4
   216ac:	mov	r1, r7
   216b0:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   216b4:	sub	r6, r7, r0
   216b8:	mov	r0, #29
   216bc:	tst	r6, #-2147483647	; 0x80000001
   216c0:	bne	21748 <flatcc_verify_table_field@@Base+0x164>
   216c4:	add	r8, r6, #2
   216c8:	mov	r0, #27
   216cc:	cmp	r8, r5
   216d0:	bhi	21748 <flatcc_verify_table_field@@Base+0x164>
   216d4:	mov	r0, r4
   216d8:	mov	r1, r6
   216dc:	bl	22294 <flatcc_verify_union_vector_field@@Base+0x314>
   216e0:	mov	r1, r0
   216e4:	strh	r0, [sp, #22]
   216e8:	mov	r0, #30
   216ec:	tst	r1, #1
   216f0:	bne	21748 <flatcc_verify_table_field@@Base+0x164>
   216f4:	add	r2, r6, r1
   216f8:	cmp	r2, r5
   216fc:	bhi	21748 <flatcc_verify_table_field@@Base+0x164>
   21700:	mov	r0, #28
   21704:	cmp	r1, #4
   21708:	bcc	21748 <flatcc_verify_table_field@@Base+0x164>
   2170c:	mov	r0, r4
   21710:	mov	r1, r8
   21714:	bl	22294 <flatcc_verify_union_vector_field@@Base+0x314>
   21718:	mov	r1, r0
   2171c:	strh	r0, [sp, #20]
   21720:	sub	r2, r5, r7
   21724:	mov	r0, #20
   21728:	cmp	r2, r1
   2172c:	bcc	21748 <flatcc_verify_table_field@@Base+0x164>
   21730:	ldr	r1, [fp, #12]
   21734:	stm	sp, {r4, r5}
   21738:	add	r0, r4, r6
   2173c:	str	r0, [sp, #12]
   21740:	mov	r0, sp
   21744:	blx	r1
   21748:	sub	sp, fp, #24
   2174c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00021750 <flatcc_verify_table_vector_field@@Base>:
   21750:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21754:	add	fp, sp, #24
   21758:	sub	sp, sp, #16
   2175c:	mov	r8, r3
   21760:	mov	r5, r0
   21764:	add	r3, sp, #12
   21768:	bl	212f0 <flatcc_verify_string_field@@Base+0x5c>
   2176c:	cmp	r0, #0
   21770:	bne	217b0 <flatcc_verify_table_vector_field@@Base+0x60>
   21774:	ldr	r6, [sp, #12]
   21778:	cmp	r6, #0
   2177c:	beq	217b0 <flatcc_verify_table_vector_field@@Base+0x60>
   21780:	ldr	r7, [r5]
   21784:	ldr	r4, [r5, #4]
   21788:	mov	r0, r7
   2178c:	mov	r1, r6
   21790:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   21794:	mov	r3, r0
   21798:	ldr	r0, [r5, #8]
   2179c:	stm	sp, {r0, r8}
   217a0:	mov	r0, r7
   217a4:	mov	r1, r4
   217a8:	mov	r2, r6
   217ac:	bl	217b8 <flatcc_verify_table_vector_field@@Base+0x68>
   217b0:	sub	sp, fp, #24
   217b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   217b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   217bc:	add	fp, sp, #28
   217c0:	sub	sp, sp, #12
   217c4:	ldr	r8, [fp, #8]
   217c8:	cmp	r8, #1
   217cc:	movlt	r0, #3
   217d0:	sublt	sp, fp, #28
   217d4:	poplt	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217d8:	mov	r6, r3
   217dc:	mov	r7, r2
   217e0:	mov	sl, r1
   217e4:	mov	r5, r0
   217e8:	mvn	r0, #-1073741824	; 0xc0000000
   217ec:	mov	r1, #4
   217f0:	str	r1, [sp]
   217f4:	str	r1, [sp, #4]
   217f8:	str	r0, [sp, #8]
   217fc:	mov	r0, r5
   21800:	mov	r1, sl
   21804:	bl	21458 <flatcc_verify_vector_field@@Base+0x70>
   21808:	cmp	r0, #0
   2180c:	beq	21818 <flatcc_verify_table_vector_field@@Base+0xc8>
   21810:	sub	sp, fp, #28
   21814:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21818:	add	r6, r6, r7
   2181c:	mov	r0, r5
   21820:	mov	r1, r6
   21824:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   21828:	cmp	r0, #0
   2182c:	beq	21880 <flatcc_verify_table_vector_field@@Base+0x130>
   21830:	mov	r7, r0
   21834:	sub	r8, r8, #1
   21838:	ldr	r9, [fp, #12]
   2183c:	add	r6, r6, #4
   21840:	mov	r4, #0
   21844:	mov	r0, r5
   21848:	mov	r1, r6
   2184c:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   21850:	mov	r3, r0
   21854:	stm	sp, {r8, r9}
   21858:	mov	r0, r5
   2185c:	mov	r1, sl
   21860:	mov	r2, r6
   21864:	bl	2164c <flatcc_verify_table_field@@Base+0x68>
   21868:	cmp	r0, #0
   2186c:	bne	2188c <flatcc_verify_table_vector_field@@Base+0x13c>
   21870:	add	r4, r4, #1
   21874:	add	r6, r6, #4
   21878:	cmp	r4, r7
   2187c:	bcc	21844 <flatcc_verify_table_vector_field@@Base+0xf4>
   21880:	mov	r0, #0
   21884:	sub	sp, fp, #28
   21888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2188c:	mov	r0, r5
   21890:	mov	r1, r6
   21894:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   21898:	mov	r3, r0
   2189c:	stm	sp, {r8, r9}
   218a0:	mov	r0, r5
   218a4:	mov	r1, sl
   218a8:	mov	r2, r6
   218ac:	bl	2164c <flatcc_verify_table_field@@Base+0x68>
   218b0:	sub	sp, fp, #28
   218b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000218b8 <flatcc_verify_union_table@@Base>:
   218b8:	push	{fp, lr}
   218bc:	mov	fp, sp
   218c0:	sub	sp, sp, #8
   218c4:	ldr	r2, [r0, #16]
   218c8:	ldr	r3, [r0, #20]
   218cc:	ldm	r0, {ip, lr}
   218d0:	ldr	r0, [r0, #8]
   218d4:	stm	sp, {r0, r1}
   218d8:	mov	r0, ip
   218dc:	mov	r1, lr
   218e0:	bl	2164c <flatcc_verify_table_field@@Base+0x68>
   218e4:	mov	sp, fp
   218e8:	pop	{fp, pc}

000218ec <flatcc_verify_union_struct@@Base>:
   218ec:	push	{fp, lr}
   218f0:	mov	fp, sp
   218f4:	sub	sp, sp, #8
   218f8:	mov	ip, r1
   218fc:	ldr	r3, [r0, #4]
   21900:	ldr	r1, [r0, #16]
   21904:	ldr	lr, [r0, #20]
   21908:	str	r2, [sp]
   2190c:	mov	r0, r3
   21910:	mov	r2, lr
   21914:	mov	r3, ip
   21918:	bl	21924 <flatcc_verify_union_struct@@Base+0x38>
   2191c:	mov	sp, fp
   21920:	pop	{fp, pc}
   21924:	mov	ip, r0
   21928:	mov	r0, #18
   2192c:	cmp	r2, #0
   21930:	beq	21968 <flatcc_verify_union_struct@@Base+0x7c>
   21934:	add	r1, r2, r1
   21938:	cmp	r1, ip
   2193c:	bhi	21968 <flatcc_verify_union_struct@@Base+0x7c>
   21940:	adds	r2, r1, r3
   21944:	mov	r0, #10
   21948:	bcs	21968 <flatcc_verify_union_struct@@Base+0x7c>
   2194c:	mov	r0, #9
   21950:	cmp	r2, ip
   21954:	bxhi	lr
   21958:	ldr	r0, [sp]
   2195c:	sub	r0, r0, #1
   21960:	ands	r0, r0, r1
   21964:	movwne	r0, #11
   21968:	bx	lr

0002196c <flatcc_verify_union_string@@Base>:
   2196c:	ldr	ip, [r0]
   21970:	ldr	r1, [r0, #4]
   21974:	ldr	r2, [r0, #16]
   21978:	ldr	r3, [r0, #20]
   2197c:	mov	r0, ip
   21980:	b	21368 <flatcc_verify_string_field@@Base+0xd4>

00021984 <flatcc_verify_buffer_header@@Base>:
   21984:	push	{r4, r5, fp, lr}
   21988:	add	fp, sp, #8
   2198c:	mov	r4, r0
   21990:	mov	r0, #5
   21994:	tst	r4, #3
   21998:	bne	219e4 <flatcc_verify_buffer_header@@Base+0x60>
   2199c:	mov	r0, #6
   219a0:	cmn	r1, #9
   219a4:	bhi	219e4 <flatcc_verify_buffer_header@@Base+0x60>
   219a8:	mov	r0, #1
   219ac:	cmp	r1, #8
   219b0:	popcc	{r4, r5, fp, pc}
   219b4:	cmp	r2, #0
   219b8:	beq	219e8 <flatcc_verify_buffer_header@@Base+0x64>
   219bc:	mov	r0, r2
   219c0:	bl	219f0 <flatcc_verify_buffer_header@@Base+0x6c>
   219c4:	mov	r5, r0
   219c8:	mov	r0, r4
   219cc:	bl	21a24 <flatcc_verify_buffer_header@@Base+0xa0>
   219d0:	cmp	r5, #0
   219d4:	movne	r1, r0
   219d8:	movne	r0, #2
   219dc:	cmpne	r1, r5
   219e0:	moveq	r0, #0
   219e4:	pop	{r4, r5, fp, pc}
   219e8:	mov	r0, #0
   219ec:	pop	{r4, r5, fp, pc}
   219f0:	push	{fp, lr}
   219f4:	mov	fp, sp
   219f8:	sub	sp, sp, #8
   219fc:	mov	r1, r0
   21a00:	mov	r0, #0
   21a04:	str	r0, [sp, #4]
   21a08:	add	r0, sp, #4
   21a0c:	mov	r2, #4
   21a10:	bl	12f4c <strncpy@plt>
   21a14:	ldr	r0, [sp, #4]
   21a18:	bl	222a8 <flatcc_verify_union_vector_field@@Base+0x328>
   21a1c:	mov	sp, fp
   21a20:	pop	{fp, pc}
   21a24:	add	r0, r0, #4
   21a28:	b	222ac <flatcc_verify_union_vector_field@@Base+0x32c>

00021a2c <flatcc_verify_typed_buffer_header@@Base>:
   21a2c:	push	{r4, sl, fp, lr}
   21a30:	add	fp, sp, #8
   21a34:	mov	r4, r2
   21a38:	mov	r2, #5
   21a3c:	tst	r0, #3
   21a40:	bne	21a74 <flatcc_verify_typed_buffer_header@@Base+0x48>
   21a44:	mov	r2, #6
   21a48:	cmn	r1, #9
   21a4c:	bhi	21a74 <flatcc_verify_typed_buffer_header@@Base+0x48>
   21a50:	mov	r2, #1
   21a54:	cmp	r1, #8
   21a58:	bcc	21a74 <flatcc_verify_typed_buffer_header@@Base+0x48>
   21a5c:	cmp	r4, #0
   21a60:	beq	21a7c <flatcc_verify_typed_buffer_header@@Base+0x50>
   21a64:	bl	21a24 <flatcc_verify_buffer_header@@Base+0xa0>
   21a68:	mov	r2, #2
   21a6c:	cmp	r0, r4
   21a70:	moveq	r2, #0
   21a74:	mov	r0, r2
   21a78:	pop	{r4, sl, fp, pc}
   21a7c:	mov	r2, #0
   21a80:	mov	r0, r2
   21a84:	pop	{r4, sl, fp, pc}

00021a88 <flatcc_verify_struct_as_root@@Base>:
   21a88:	push	{r4, r5, r6, r7, fp, lr}
   21a8c:	add	fp, sp, #16
   21a90:	sub	sp, sp, #8
   21a94:	mov	r4, r3
   21a98:	mov	r7, r2
   21a9c:	mov	r5, r1
   21aa0:	mov	r6, r0
   21aa4:	bl	21984 <flatcc_verify_buffer_header@@Base>
   21aa8:	cmp	r0, #0
   21aac:	beq	21ac8 <flatcc_verify_struct_as_root@@Base+0x40>
   21ab0:	mov	r0, r6
   21ab4:	mov	r1, r5
   21ab8:	mov	r2, r7
   21abc:	sub	sp, fp, #16
   21ac0:	pop	{r4, r5, r6, r7, fp, lr}
   21ac4:	b	21984 <flatcc_verify_buffer_header@@Base>
   21ac8:	ldr	r7, [fp, #8]
   21acc:	mov	r0, r6
   21ad0:	mov	r1, #0
   21ad4:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   21ad8:	mov	r2, r0
   21adc:	str	r7, [sp]
   21ae0:	mov	r0, r5
   21ae4:	mov	r1, #0
   21ae8:	mov	r3, r4
   21aec:	bl	21924 <flatcc_verify_union_struct@@Base+0x38>
   21af0:	sub	sp, fp, #16
   21af4:	pop	{r4, r5, r6, r7, fp, pc}

00021af8 <flatcc_verify_struct_as_typed_root@@Base>:
   21af8:	push	{r4, r5, r6, r7, fp, lr}
   21afc:	add	fp, sp, #16
   21b00:	sub	sp, sp, #8
   21b04:	mov	r4, r3
   21b08:	mov	r5, r1
   21b0c:	mov	r6, r0
   21b10:	bl	21a2c <flatcc_verify_typed_buffer_header@@Base>
   21b14:	cmp	r0, #0
   21b18:	beq	21b24 <flatcc_verify_struct_as_typed_root@@Base+0x2c>
   21b1c:	sub	sp, fp, #16
   21b20:	pop	{r4, r5, r6, r7, fp, pc}
   21b24:	ldr	r7, [fp, #8]
   21b28:	mov	r0, r6
   21b2c:	mov	r1, #0
   21b30:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   21b34:	mov	r2, r0
   21b38:	str	r7, [sp]
   21b3c:	mov	r0, r5
   21b40:	mov	r1, #0
   21b44:	mov	r3, r4
   21b48:	bl	21924 <flatcc_verify_union_struct@@Base+0x38>
   21b4c:	sub	sp, fp, #16
   21b50:	pop	{r4, r5, r6, r7, fp, pc}

00021b54 <flatcc_verify_table_as_root@@Base>:
   21b54:	push	{r4, r5, r6, r7, fp, lr}
   21b58:	add	fp, sp, #16
   21b5c:	sub	sp, sp, #8
   21b60:	mov	r5, r3
   21b64:	mov	r7, r2
   21b68:	mov	r4, r1
   21b6c:	mov	r6, r0
   21b70:	bl	21984 <flatcc_verify_buffer_header@@Base>
   21b74:	cmp	r0, #0
   21b78:	beq	21b94 <flatcc_verify_table_as_root@@Base+0x40>
   21b7c:	mov	r0, r6
   21b80:	mov	r1, r4
   21b84:	mov	r2, r7
   21b88:	sub	sp, fp, #16
   21b8c:	pop	{r4, r5, r6, r7, fp, lr}
   21b90:	b	21984 <flatcc_verify_buffer_header@@Base>
   21b94:	mov	r0, r6
   21b98:	mov	r1, #0
   21b9c:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   21ba0:	mov	r3, r0
   21ba4:	mov	r0, #100	; 0x64
   21ba8:	stm	sp, {r0, r5}
   21bac:	mov	r0, r6
   21bb0:	mov	r1, r4
   21bb4:	mov	r2, #0
   21bb8:	bl	2164c <flatcc_verify_table_field@@Base+0x68>
   21bbc:	sub	sp, fp, #16
   21bc0:	pop	{r4, r5, r6, r7, fp, pc}

00021bc4 <flatcc_verify_table_as_typed_root@@Base>:
   21bc4:	push	{r4, r5, r6, sl, fp, lr}
   21bc8:	add	fp, sp, #16
   21bcc:	sub	sp, sp, #8
   21bd0:	mov	r5, r3
   21bd4:	mov	r4, r1
   21bd8:	mov	r6, r0
   21bdc:	bl	21a2c <flatcc_verify_typed_buffer_header@@Base>
   21be0:	cmp	r0, #0
   21be4:	beq	21bf0 <flatcc_verify_table_as_typed_root@@Base+0x2c>
   21be8:	sub	sp, fp, #16
   21bec:	pop	{r4, r5, r6, sl, fp, pc}
   21bf0:	mov	r0, r6
   21bf4:	mov	r1, #0
   21bf8:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   21bfc:	mov	r3, r0
   21c00:	mov	r0, #100	; 0x64
   21c04:	stm	sp, {r0, r5}
   21c08:	mov	r0, r6
   21c0c:	mov	r1, r4
   21c10:	mov	r2, #0
   21c14:	bl	2164c <flatcc_verify_table_field@@Base+0x68>
   21c18:	sub	sp, fp, #16
   21c1c:	pop	{r4, r5, r6, sl, fp, pc}

00021c20 <flatcc_verify_struct_as_nested_root@@Base>:
   21c20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c24:	add	fp, sp, #28
   21c28:	sub	sp, sp, #12
   21c2c:	mov	r8, r3
   21c30:	mov	r7, r2
   21c34:	mov	r6, r1
   21c38:	mov	r4, r0
   21c3c:	mvn	sl, #0
   21c40:	mov	r5, #1
   21c44:	stm	sp, {r5, sl}
   21c48:	ldr	r9, [fp, #12]
   21c4c:	mov	r3, r9
   21c50:	bl	213e8 <flatcc_verify_vector_field@@Base>
   21c54:	cmp	r0, #0
   21c58:	beq	21c7c <flatcc_verify_struct_as_nested_root@@Base+0x5c>
   21c5c:	stm	sp, {r5, sl}
   21c60:	mov	r0, r4
   21c64:	mov	r1, r6
   21c68:	mov	r2, r7
   21c6c:	mov	r3, r9
   21c70:	bl	213e8 <flatcc_verify_vector_field@@Base>
   21c74:	sub	sp, fp, #28
   21c78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c7c:	mov	r0, r4
   21c80:	mov	r1, r6
   21c84:	bl	21cd8 <flatcc_verify_struct_as_nested_root@@Base+0xb8>
   21c88:	cmp	r0, #0
   21c8c:	moveq	r0, #0
   21c90:	subeq	sp, fp, #28
   21c94:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c98:	mov	r4, r0
   21c9c:	ldr	r6, [fp, #8]
   21ca0:	mov	r1, #0
   21ca4:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   21ca8:	add	r4, r0, r4
   21cac:	mov	r0, r4
   21cb0:	mov	r1, #0
   21cb4:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   21cb8:	mov	r1, r0
   21cbc:	str	r9, [sp]
   21cc0:	add	r0, r4, #4
   21cc4:	mov	r2, r8
   21cc8:	mov	r3, r6
   21ccc:	bl	21a88 <flatcc_verify_struct_as_root@@Base>
   21cd0:	sub	sp, fp, #28
   21cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21cd8:	push	{r4, sl, fp, lr}
   21cdc:	add	fp, sp, #8
   21ce0:	mov	r4, r0
   21ce4:	bl	21f44 <flatcc_verify_union_field@@Base+0x130>
   21ce8:	uxth	r0, r0
   21cec:	cmp	r0, #0
   21cf0:	ldrne	r1, [r4]
   21cf4:	ldrne	r2, [r4, #16]
   21cf8:	addne	r1, r1, r2
   21cfc:	addne	r0, r1, r0
   21d00:	popne	{r4, sl, fp, pc}
   21d04:	mov	r0, #0
   21d08:	pop	{r4, sl, fp, pc}

00021d0c <flatcc_verify_table_as_nested_root@@Base>:
   21d0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d10:	add	fp, sp, #28
   21d14:	sub	sp, sp, #12
   21d18:	mov	r8, r3
   21d1c:	mov	r7, r2
   21d20:	mov	r6, r1
   21d24:	mov	r4, r0
   21d28:	mvn	r9, #0
   21d2c:	mov	sl, #1
   21d30:	str	sl, [sp]
   21d34:	str	r9, [sp, #4]
   21d38:	ldr	r5, [fp, #8]
   21d3c:	mov	r3, r5
   21d40:	bl	213e8 <flatcc_verify_vector_field@@Base>
   21d44:	cmp	r0, #0
   21d48:	beq	21d70 <flatcc_verify_table_as_nested_root@@Base+0x64>
   21d4c:	str	sl, [sp]
   21d50:	str	r9, [sp, #4]
   21d54:	mov	r0, r4
   21d58:	mov	r1, r6
   21d5c:	mov	r2, r7
   21d60:	mov	r3, r5
   21d64:	bl	213e8 <flatcc_verify_vector_field@@Base>
   21d68:	sub	sp, fp, #28
   21d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d70:	ldr	r9, [fp, #12]
   21d74:	mov	r0, r4
   21d78:	mov	r1, r6
   21d7c:	bl	21cd8 <flatcc_verify_struct_as_nested_root@@Base+0xb8>
   21d80:	cmp	r0, #0
   21d84:	moveq	r0, #0
   21d88:	subeq	sp, fp, #28
   21d8c:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d90:	mov	r5, r0
   21d94:	mov	r1, #0
   21d98:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   21d9c:	add	r5, r0, r5
   21da0:	mov	r0, r5
   21da4:	mov	r1, #0
   21da8:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   21dac:	mov	r6, r0
   21db0:	add	r7, r5, #4
   21db4:	mov	r0, r7
   21db8:	mov	r1, r6
   21dbc:	mov	r2, r8
   21dc0:	bl	21984 <flatcc_verify_buffer_header@@Base>
   21dc4:	cmp	r0, #0
   21dc8:	beq	21de4 <flatcc_verify_table_as_nested_root@@Base+0xd8>
   21dcc:	mov	r0, r7
   21dd0:	mov	r1, r6
   21dd4:	mov	r2, r8
   21dd8:	sub	sp, fp, #28
   21ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21de0:	b	21984 <flatcc_verify_buffer_header@@Base>
   21de4:	mov	r0, r7
   21de8:	mov	r1, #0
   21dec:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   21df0:	mov	r3, r0
   21df4:	ldr	r0, [r4, #8]
   21df8:	stm	sp, {r0, r9}
   21dfc:	mov	r0, r7
   21e00:	mov	r1, r6
   21e04:	mov	r2, #0
   21e08:	bl	2164c <flatcc_verify_table_field@@Base+0x68>
   21e0c:	sub	sp, fp, #28
   21e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00021e14 <flatcc_verify_union_field@@Base>:
   21e14:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21e18:	add	fp, sp, #24
   21e1c:	sub	sp, sp, #32
   21e20:	mov	r8, r3
   21e24:	mov	r9, r2
   21e28:	mov	r7, r1
   21e2c:	mov	r5, r0
   21e30:	sub	r0, r1, #1
   21e34:	uxth	r4, r0
   21e38:	mov	r0, r5
   21e3c:	mov	r1, r4
   21e40:	bl	21f44 <flatcc_verify_union_field@@Base+0x130>
   21e44:	uxth	r6, r0
   21e48:	cmp	r6, #0
   21e4c:	beq	21f08 <flatcc_verify_union_field@@Base+0xf4>
   21e50:	mov	r0, r5
   21e54:	mov	r1, r4
   21e58:	mov	r2, #1
   21e5c:	mov	r3, #1
   21e60:	bl	2122c <flatcc_verify_field@@Base+0x4>
   21e64:	cmp	r0, #0
   21e68:	bne	21f28 <flatcc_verify_union_field@@Base+0x114>
   21e6c:	mov	r0, r5
   21e70:	mov	r1, r7
   21e74:	bl	21f44 <flatcc_verify_union_field@@Base+0x130>
   21e78:	ldr	r1, [r5]
   21e7c:	ldr	r2, [r5, #16]
   21e80:	add	r4, r1, r2
   21e84:	ldrb	r1, [r4, r6]
   21e88:	movw	r2, #65535	; 0xffff
   21e8c:	tst	r0, r2
   21e90:	beq	21ea0 <flatcc_verify_union_field@@Base+0x8c>
   21e94:	mov	r0, #24
   21e98:	cmp	r1, #0
   21e9c:	beq	21f28 <flatcc_verify_union_field@@Base+0x114>
   21ea0:	cmp	r1, #0
   21ea4:	moveq	r0, #0
   21ea8:	subeq	sp, fp, #24
   21eac:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   21eb0:	add	r3, sp, #28
   21eb4:	mov	r0, r5
   21eb8:	mov	r1, r7
   21ebc:	mov	r2, r9
   21ec0:	bl	212f0 <flatcc_verify_string_field@@Base+0x5c>
   21ec4:	cmp	r0, #0
   21ec8:	bne	21f28 <flatcc_verify_union_field@@Base+0x114>
   21ecc:	ldr	r1, [sp, #28]
   21ed0:	cmp	r1, #0
   21ed4:	beq	21f28 <flatcc_verify_union_field@@Base+0x114>
   21ed8:	ldm	r5, {r0, r2, r3}
   21edc:	str	r1, [sp, #20]
   21ee0:	stmib	sp, {r0, r2, r3}
   21ee4:	ldr	r0, [r5]
   21ee8:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   21eec:	str	r0, [sp, #24]
   21ef0:	ldrb	r0, [r4, r6]
   21ef4:	strb	r0, [sp, #16]
   21ef8:	add	r0, sp, #4
   21efc:	blx	r8
   21f00:	sub	sp, fp, #24
   21f04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21f08:	mov	r0, r5
   21f0c:	mov	r1, r7
   21f10:	bl	21f44 <flatcc_verify_union_field@@Base+0x130>
   21f14:	mov	r1, r0
   21f18:	mov	r0, #23
   21f1c:	movw	r2, #65535	; 0xffff
   21f20:	tst	r1, r2
   21f24:	beq	21f30 <flatcc_verify_union_field@@Base+0x11c>
   21f28:	sub	sp, fp, #24
   21f2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21f30:	cmp	r9, #0
   21f34:	movwne	r9, #21
   21f38:	mov	r0, r9
   21f3c:	sub	sp, fp, #24
   21f40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21f44:	mov	r2, #4
   21f48:	add	r1, r2, r1, lsl #1
   21f4c:	uxth	r1, r1
   21f50:	ldrh	r3, [r0, #22]
   21f54:	mov	r2, #0
   21f58:	cmp	r1, r3
   21f5c:	bcs	21f78 <flatcc_verify_union_field@@Base+0x164>
   21f60:	push	{fp, lr}
   21f64:	mov	fp, sp
   21f68:	ldr	r0, [r0, #12]
   21f6c:	bl	22294 <flatcc_verify_union_vector_field@@Base+0x314>
   21f70:	mov	r2, r0
   21f74:	pop	{fp, lr}
   21f78:	mov	r0, r2
   21f7c:	bx	lr

00021f80 <flatcc_verify_union_vector_field@@Base>:
   21f80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f84:	add	fp, sp, #28
   21f88:	sub	sp, sp, #20
   21f8c:	mov	r8, r3
   21f90:	mov	r6, r2
   21f94:	mov	sl, r1
   21f98:	mov	r5, r0
   21f9c:	sub	r0, r1, #1
   21fa0:	uxth	r4, r0
   21fa4:	mov	r0, r5
   21fa8:	mov	r1, r4
   21fac:	bl	21f44 <flatcc_verify_union_field@@Base+0x130>
   21fb0:	movw	r1, #65535	; 0xffff
   21fb4:	tst	r0, r1
   21fb8:	beq	22004 <flatcc_verify_union_vector_field@@Base+0x84>
   21fbc:	mvn	r9, #0
   21fc0:	mov	r7, #1
   21fc4:	stm	sp, {r7, r9}
   21fc8:	mov	r0, r5
   21fcc:	mov	r1, r4
   21fd0:	mov	r2, r6
   21fd4:	mov	r3, #1
   21fd8:	bl	213e8 <flatcc_verify_vector_field@@Base>
   21fdc:	cmp	r0, #0
   21fe0:	beq	2202c <flatcc_verify_union_vector_field@@Base+0xac>
   21fe4:	stm	sp, {r7, r9}
   21fe8:	mov	r0, r5
   21fec:	mov	r1, r4
   21ff0:	mov	r2, r6
   21ff4:	mov	r3, #1
   21ff8:	bl	213e8 <flatcc_verify_vector_field@@Base>
   21ffc:	sub	sp, fp, #28
   22000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22004:	mov	r0, r5
   22008:	mov	r1, sl
   2200c:	bl	21f44 <flatcc_verify_union_field@@Base+0x130>
   22010:	cmp	r6, #0
   22014:	beq	21fbc <flatcc_verify_union_vector_field@@Base+0x3c>
   22018:	uxth	r1, r0
   2201c:	mov	r0, #22
   22020:	cmp	r1, #0
   22024:	beq	220cc <flatcc_verify_union_vector_field@@Base+0x14c>
   22028:	b	21fbc <flatcc_verify_union_vector_field@@Base+0x3c>
   2202c:	mov	r0, r5
   22030:	mov	r1, r4
   22034:	bl	21cd8 <flatcc_verify_struct_as_nested_root@@Base+0xb8>
   22038:	cmp	r0, #0
   2203c:	moveq	r0, #0
   22040:	subeq	sp, fp, #28
   22044:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22048:	mov	r4, r0
   2204c:	mov	r1, #0
   22050:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   22054:	add	r4, r0, r4
   22058:	mov	r0, r4
   2205c:	mov	r1, #0
   22060:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   22064:	mov	r9, r0
   22068:	add	r3, sp, #16
   2206c:	mov	r0, r5
   22070:	mov	r1, sl
   22074:	mov	r2, r6
   22078:	bl	212f0 <flatcc_verify_string_field@@Base+0x5c>
   2207c:	cmp	r0, #0
   22080:	bne	220cc <flatcc_verify_union_vector_field@@Base+0x14c>
   22084:	ldr	r6, [sp, #16]
   22088:	cmp	r6, #0
   2208c:	beq	220cc <flatcc_verify_union_vector_field@@Base+0x14c>
   22090:	ldm	r5, {r7, sl}
   22094:	mov	r0, r7
   22098:	mov	r1, r6
   2209c:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   220a0:	mov	r3, r0
   220a4:	ldr	r0, [r5, #8]
   220a8:	add	r1, r4, #4
   220ac:	str	r9, [sp]
   220b0:	str	r1, [sp, #4]
   220b4:	str	r0, [sp, #8]
   220b8:	str	r8, [sp, #12]
   220bc:	mov	r0, r7
   220c0:	mov	r1, sl
   220c4:	mov	r2, r6
   220c8:	bl	220d4 <flatcc_verify_union_vector_field@@Base+0x154>
   220cc:	sub	sp, fp, #28
   220d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   220d8:	add	fp, sp, #28
   220dc:	sub	sp, sp, #36	; 0x24
   220e0:	ldr	r8, [fp, #16]
   220e4:	cmp	r8, #1
   220e8:	movlt	r0, #3
   220ec:	sublt	sp, fp, #28
   220f0:	poplt	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220f4:	mov	r5, r3
   220f8:	mov	r7, r2
   220fc:	mov	r6, r1
   22100:	mov	r4, r0
   22104:	mvn	r0, #-1073741824	; 0xc0000000
   22108:	mov	r1, #4
   2210c:	str	r1, [sp]
   22110:	str	r1, [sp, #4]
   22114:	str	r0, [sp, #8]
   22118:	mov	r0, r4
   2211c:	mov	r1, r6
   22120:	bl	21458 <flatcc_verify_vector_field@@Base+0x70>
   22124:	cmp	r0, #0
   22128:	bne	221e0 <flatcc_verify_union_vector_field@@Base+0x260>
   2212c:	ldr	r9, [fp, #8]
   22130:	add	r7, r5, r7
   22134:	mov	r0, r4
   22138:	mov	r1, r7
   2213c:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   22140:	mov	r5, r0
   22144:	mov	r0, #34	; 0x22
   22148:	cmp	r5, r9
   2214c:	bne	221e0 <flatcc_verify_union_vector_field@@Base+0x260>
   22150:	sub	r0, r8, #1
   22154:	str	r6, [sp, #16]
   22158:	str	r4, [sp, #12]
   2215c:	str	r0, [sp, #20]
   22160:	cmp	r5, #0
   22164:	moveq	r0, #0
   22168:	subeq	sp, fp, #28
   2216c:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22170:	ldr	r8, [fp, #20]
   22174:	ldr	r9, [fp, #12]
   22178:	add	r6, r7, #4
   2217c:	mov	r7, #0
   22180:	add	sl, sp, #12
   22184:	mov	r0, r4
   22188:	mov	r1, r6
   2218c:	bl	213e0 <flatcc_verify_string_field@@Base+0x14c>
   22190:	ldrb	r1, [r9, r7]
   22194:	cmp	r0, #0
   22198:	beq	221c4 <flatcc_verify_union_vector_field@@Base+0x244>
   2219c:	cmp	r1, #0
   221a0:	beq	221e8 <flatcc_verify_union_vector_field@@Base+0x268>
   221a4:	str	r6, [sp, #28]
   221a8:	strb	r1, [sp, #24]
   221ac:	str	r0, [sp, #32]
   221b0:	mov	r0, sl
   221b4:	blx	r8
   221b8:	cmp	r0, #0
   221bc:	beq	221cc <flatcc_verify_union_vector_field@@Base+0x24c>
   221c0:	b	221f4 <flatcc_verify_union_vector_field@@Base+0x274>
   221c4:	cmp	r1, #0
   221c8:	bne	22204 <flatcc_verify_union_vector_field@@Base+0x284>
   221cc:	add	r6, r6, #4
   221d0:	add	r7, r7, #1
   221d4:	mov	r0, #0
   221d8:	cmp	r7, r5
   221dc:	bcc	22184 <flatcc_verify_union_vector_field@@Base+0x204>
   221e0:	sub	sp, fp, #28
   221e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   221e8:	mov	r0, #33	; 0x21
   221ec:	sub	sp, fp, #28
   221f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   221f4:	add	r0, sp, #12
   221f8:	blx	r8
   221fc:	sub	sp, fp, #28
   22200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22204:	mov	r0, #32
   22208:	sub	sp, fp, #28
   2220c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22210:	add	ip, r2, r1
   22214:	mov	r3, #0
   22218:	cmp	ip, r1
   2221c:	mov	r1, #0
   22220:	movwhi	r1, #1
   22224:	add	r2, ip, #4
   22228:	cmp	r2, r0
   2222c:	movwls	r3, #1
   22230:	and	r0, r1, r3
   22234:	and	r1, ip, #3
   22238:	clz	r1, r1
   2223c:	lsr	r1, r1, #5
   22240:	and	r0, r1, r0
   22244:	bx	lr
   22248:	ldr	r0, [r0]
   2224c:	b	22250 <flatcc_verify_union_vector_field@@Base+0x2d0>
   22250:	bx	lr
   22254:	mov	ip, r0
   22258:	cmp	r3, #4
   2225c:	movls	r3, #4
   22260:	add	r2, r2, r1
   22264:	mov	r0, #0
   22268:	cmp	r2, r1
   2226c:	bls	22290 <flatcc_verify_union_vector_field@@Base+0x310>
   22270:	add	r1, r2, #4
   22274:	cmp	r1, ip
   22278:	bxhi	lr
   2227c:	sub	r0, r3, #1
   22280:	orr	r0, r0, #3
   22284:	and	r0, r0, r1
   22288:	clz	r0, r0
   2228c:	lsr	r0, r0, #5
   22290:	bx	lr
   22294:	add	r0, r0, r1
   22298:	b	2229c <flatcc_verify_union_vector_field@@Base+0x31c>
   2229c:	ldrh	r0, [r0]
   222a0:	b	222a4 <flatcc_verify_union_vector_field@@Base+0x324>
   222a4:	bx	lr
   222a8:	bx	lr
   222ac:	ldr	r0, [r0]
   222b0:	b	222b4 <flatcc_verify_union_vector_field@@Base+0x334>
   222b4:	bx	lr

000222b8 <__libc_csu_init@@Base>:
   222b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   222bc:	mov	r7, r0
   222c0:	ldr	r6, [pc, #72]	; 22310 <__libc_csu_init@@Base+0x58>
   222c4:	ldr	r5, [pc, #72]	; 22314 <__libc_csu_init@@Base+0x5c>
   222c8:	add	r6, pc, r6
   222cc:	add	r5, pc, r5
   222d0:	sub	r6, r6, r5
   222d4:	mov	r8, r1
   222d8:	mov	r9, r2
   222dc:	bl	12e6c <strcmp@plt-0x20>
   222e0:	asrs	r6, r6, #2
   222e4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   222e8:	mov	r4, #0
   222ec:	add	r4, r4, #1
   222f0:	ldr	r3, [r5], #4
   222f4:	mov	r2, r9
   222f8:	mov	r1, r8
   222fc:	mov	r0, r7
   22300:	blx	r3
   22304:	cmp	r6, r4
   22308:	bne	222ec <__libc_csu_init@@Base+0x34>
   2230c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22310:	andeq	r6, r1, ip, lsr ip
   22314:	andeq	r6, r1, r4, lsr ip

00022318 <__libc_csu_fini@@Base>:
   22318:	bx	lr

Disassembly of section .fini:

0002231c <.fini>:
   2231c:	push	{r3, lr}
   22320:	pop	{r3, pc}
