
../repos/coreutils/src/sort:     file format elf32-littlearm


Disassembly of section .init:

00011a84 <.init>:
   11a84:	push	{r3, lr}
   11a88:	bl	15370 <__assert_fail@plt+0x3368>
   11a8c:	pop	{r3, pc}

Disassembly of section .plt:

00011a90 <pthread_mutex_unlock@plt-0x14>:
   11a90:	push	{lr}		; (str lr, [sp, #-4]!)
   11a94:	ldr	lr, [pc, #4]	; 11aa0 <pthread_mutex_unlock@plt-0x4>
   11a98:	add	lr, pc, lr
   11a9c:	ldr	pc, [lr, #8]!
   11aa0:	andeq	sl, r2, r0, ror #10

00011aa4 <pthread_mutex_unlock@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #172032	; 0x2a000
   11aac:	ldr	pc, [ip, #1376]!	; 0x560

00011ab0 <fdopen@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #172032	; 0x2a000
   11ab8:	ldr	pc, [ip, #1368]!	; 0x558

00011abc <calloc@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #172032	; 0x2a000
   11ac4:	ldr	pc, [ip, #1360]!	; 0x550

00011ac8 <fputs_unlocked@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #172032	; 0x2a000
   11ad0:	ldr	pc, [ip, #1352]!	; 0x548

00011ad4 <raise@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #172032	; 0x2a000
   11adc:	ldr	pc, [ip, #1344]!	; 0x540

00011ae0 <strcmp@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #172032	; 0x2a000
   11ae8:	ldr	pc, [ip, #1336]!	; 0x538

00011aec <strtol@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #172032	; 0x2a000
   11af4:	ldr	pc, [ip, #1328]!	; 0x530

00011af8 <posix_fadvise64@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #172032	; 0x2a000
   11b00:	ldr	pc, [ip, #1320]!	; 0x528

00011b04 <pause@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #172032	; 0x2a000
   11b0c:	ldr	pc, [ip, #1312]!	; 0x520

00011b10 <pthread_mutex_destroy@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #172032	; 0x2a000
   11b18:	ldr	pc, [ip, #1304]!	; 0x518

00011b1c <fflush@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #172032	; 0x2a000
   11b24:	ldr	pc, [ip, #1296]!	; 0x510

00011b28 <wcwidth@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #172032	; 0x2a000
   11b30:	ldr	pc, [ip, #1288]!	; 0x508

00011b34 <memmove@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #172032	; 0x2a000
   11b3c:	ldr	pc, [ip, #1280]!	; 0x500

00011b40 <free@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #172032	; 0x2a000
   11b48:	ldr	pc, [ip, #1272]!	; 0x4f8

00011b4c <pthread_mutex_lock@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #172032	; 0x2a000
   11b54:	ldr	pc, [ip, #1264]!	; 0x4f0

00011b58 <nanosleep@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #172032	; 0x2a000
   11b60:	ldr	pc, [ip, #1256]!	; 0x4e8

00011b64 <ferror@plt>:
   11b64:	add	ip, pc, #0, 12
   11b68:	add	ip, ip, #172032	; 0x2a000
   11b6c:	ldr	pc, [ip, #1248]!	; 0x4e0

00011b70 <_exit@plt>:
   11b70:	add	ip, pc, #0, 12
   11b74:	add	ip, ip, #172032	; 0x2a000
   11b78:	ldr	pc, [ip, #1240]!	; 0x4d8

00011b7c <memcpy@plt>:
   11b7c:	add	ip, pc, #0, 12
   11b80:	add	ip, ip, #172032	; 0x2a000
   11b84:	ldr	pc, [ip, #1232]!	; 0x4d0

00011b88 <execlp@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #172032	; 0x2a000
   11b90:	ldr	pc, [ip, #1224]!	; 0x4c8

00011b94 <pthread_mutex_init@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #172032	; 0x2a000
   11b9c:	ldr	pc, [ip, #1216]!	; 0x4c0

00011ba0 <__strtoull_internal@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #172032	; 0x2a000
   11ba8:	ldr	pc, [ip, #1208]!	; 0x4b8

00011bac <mbsinit@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #172032	; 0x2a000
   11bb4:	ldr	pc, [ip, #1200]!	; 0x4b0

00011bb8 <signal@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #172032	; 0x2a000
   11bc0:	ldr	pc, [ip, #1192]!	; 0x4a8

00011bc4 <__sched_cpucount@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #172032	; 0x2a000
   11bcc:	ldr	pc, [ip, #1184]!	; 0x4a0

00011bd0 <strtold@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #172032	; 0x2a000
   11bd8:	ldr	pc, [ip, #1176]!	; 0x498

00011bdc <ftruncate64@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #172032	; 0x2a000
   11be4:	ldr	pc, [ip, #1168]!	; 0x490

00011be8 <fwrite_unlocked@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #172032	; 0x2a000
   11bf0:	ldr	pc, [ip, #1160]!	; 0x488

00011bf4 <memcmp@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #172032	; 0x2a000
   11bfc:	ldr	pc, [ip, #1152]!	; 0x480

00011c00 <fputc_unlocked@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #172032	; 0x2a000
   11c08:	ldr	pc, [ip, #1144]!	; 0x478

00011c0c <dcgettext@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #172032	; 0x2a000
   11c14:	ldr	pc, [ip, #1136]!	; 0x470

00011c18 <pthread_cond_init@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #172032	; 0x2a000
   11c20:	ldr	pc, [ip, #1128]!	; 0x468

00011c24 <sysconf@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #172032	; 0x2a000
   11c2c:	ldr	pc, [ip, #1120]!	; 0x460

00011c30 <unlink@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #172032	; 0x2a000
   11c38:	ldr	pc, [ip, #1112]!	; 0x458

00011c3c <dup2@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #172032	; 0x2a000
   11c44:	ldr	pc, [ip, #1104]!	; 0x450

00011c48 <getrlimit64@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #172032	; 0x2a000
   11c50:	ldr	pc, [ip, #1096]!	; 0x448

00011c54 <realloc@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #172032	; 0x2a000
   11c5c:	ldr	pc, [ip, #1088]!	; 0x440

00011c60 <sigismember@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #172032	; 0x2a000
   11c68:	ldr	pc, [ip, #1080]!	; 0x438

00011c6c <textdomain@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #172032	; 0x2a000
   11c74:	ldr	pc, [ip, #1072]!	; 0x430

00011c78 <iswcntrl@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #172032	; 0x2a000
   11c80:	ldr	pc, [ip, #1064]!	; 0x428

00011c84 <pthread_cond_destroy@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #172032	; 0x2a000
   11c8c:	ldr	pc, [ip, #1056]!	; 0x420

00011c90 <fflush_unlocked@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #172032	; 0x2a000
   11c98:	ldr	pc, [ip, #1048]!	; 0x418

00011c9c <iswprint@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #172032	; 0x2a000
   11ca4:	ldr	pc, [ip, #1040]!	; 0x410

00011ca8 <__fxstat64@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #172032	; 0x2a000
   11cb0:	ldr	pc, [ip, #1032]!	; 0x408

00011cb4 <sigaction@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #172032	; 0x2a000
   11cbc:	ldr	pc, [ip, #1024]!	; 0x400

00011cc0 <__memcpy_chk@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #172032	; 0x2a000
   11cc8:	ldr	pc, [ip, #1016]!	; 0x3f8

00011ccc <mkostemp64@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #172032	; 0x2a000
   11cd4:	ldr	pc, [ip, #1008]!	; 0x3f0

00011cd8 <fwrite@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #172032	; 0x2a000
   11ce0:	ldr	pc, [ip, #1000]!	; 0x3e8

00011ce4 <lseek64@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #172032	; 0x2a000
   11cec:	ldr	pc, [ip, #992]!	; 0x3e0

00011cf0 <__stpcpy_chk@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #172032	; 0x2a000
   11cf8:	ldr	pc, [ip, #984]!	; 0x3d8

00011cfc <waitpid@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #172032	; 0x2a000
   11d04:	ldr	pc, [ip, #976]!	; 0x3d0

00011d08 <__ctype_get_mb_cur_max@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #172032	; 0x2a000
   11d10:	ldr	pc, [ip, #968]!	; 0x3c8

00011d14 <strcpy@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #172032	; 0x2a000
   11d1c:	ldr	pc, [ip, #960]!	; 0x3c0

00011d20 <pthread_sigmask@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #172032	; 0x2a000
   11d28:	ldr	pc, [ip, #952]!	; 0x3b8

00011d2c <pthread_create@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #172032	; 0x2a000
   11d34:	ldr	pc, [ip, #944]!	; 0x3b0

00011d38 <__fpending@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #172032	; 0x2a000
   11d40:	ldr	pc, [ip, #936]!	; 0x3a8

00011d44 <mbrtowc@plt>:
   11d44:	add	ip, pc, #0, 12
   11d48:	add	ip, ip, #172032	; 0x2a000
   11d4c:	ldr	pc, [ip, #928]!	; 0x3a0

00011d50 <error@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #172032	; 0x2a000
   11d58:	ldr	pc, [ip, #920]!	; 0x398

00011d5c <open64@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #172032	; 0x2a000
   11d64:	ldr	pc, [ip, #912]!	; 0x390

00011d68 <strcoll@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #172032	; 0x2a000
   11d70:	ldr	pc, [ip, #904]!	; 0x388

00011d74 <getenv@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #172032	; 0x2a000
   11d7c:	ldr	pc, [ip, #896]!	; 0x380

00011d80 <mkstemp64@plt>:
   11d80:	add	ip, pc, #0, 12
   11d84:	add	ip, ip, #172032	; 0x2a000
   11d88:	ldr	pc, [ip, #888]!	; 0x378

00011d8c <sysinfo@plt>:
   11d8c:	add	ip, pc, #0, 12
   11d90:	add	ip, ip, #172032	; 0x2a000
   11d94:	ldr	pc, [ip, #880]!	; 0x370

00011d98 <malloc@plt>:
   11d98:	add	ip, pc, #0, 12
   11d9c:	add	ip, ip, #172032	; 0x2a000
   11da0:	ldr	pc, [ip, #872]!	; 0x368

00011da4 <sigaddset@plt>:
   11da4:	add	ip, pc, #0, 12
   11da8:	add	ip, ip, #172032	; 0x2a000
   11dac:	ldr	pc, [ip, #864]!	; 0x360

00011db0 <__libc_start_main@plt>:
   11db0:	add	ip, pc, #0, 12
   11db4:	add	ip, ip, #172032	; 0x2a000
   11db8:	ldr	pc, [ip, #856]!	; 0x358

00011dbc <__freading@plt>:
   11dbc:	add	ip, pc, #0, 12
   11dc0:	add	ip, ip, #172032	; 0x2a000
   11dc4:	ldr	pc, [ip, #848]!	; 0x350

00011dc8 <__ctype_toupper_loc@plt>:
   11dc8:	add	ip, pc, #0, 12
   11dcc:	add	ip, ip, #172032	; 0x2a000
   11dd0:	ldr	pc, [ip, #840]!	; 0x348

00011dd4 <__gmon_start__@plt>:
   11dd4:	add	ip, pc, #0, 12
   11dd8:	add	ip, ip, #172032	; 0x2a000
   11ddc:	ldr	pc, [ip, #832]!	; 0x340

00011de0 <getopt_long@plt>:
   11de0:	add	ip, pc, #0, 12
   11de4:	add	ip, ip, #172032	; 0x2a000
   11de8:	ldr	pc, [ip, #824]!	; 0x338

00011dec <__ctype_b_loc@plt>:
   11dec:	add	ip, pc, #0, 12
   11df0:	add	ip, ip, #172032	; 0x2a000
   11df4:	ldr	pc, [ip, #816]!	; 0x330

00011df8 <exit@plt>:
   11df8:	add	ip, pc, #0, 12
   11dfc:	add	ip, ip, #172032	; 0x2a000
   11e00:	ldr	pc, [ip, #808]!	; 0x328

00011e04 <strtoul@plt>:
   11e04:	add	ip, pc, #0, 12
   11e08:	add	ip, ip, #172032	; 0x2a000
   11e0c:	ldr	pc, [ip, #800]!	; 0x320

00011e10 <strlen@plt>:
   11e10:	add	ip, pc, #0, 12
   11e14:	add	ip, ip, #172032	; 0x2a000
   11e18:	ldr	pc, [ip, #792]!	; 0x318

00011e1c <strchr@plt>:
   11e1c:	add	ip, pc, #0, 12
   11e20:	add	ip, ip, #172032	; 0x2a000
   11e24:	ldr	pc, [ip, #784]!	; 0x310

00011e28 <strxfrm@plt>:
   11e28:	add	ip, pc, #0, 12
   11e2c:	add	ip, ip, #172032	; 0x2a000
   11e30:	ldr	pc, [ip, #776]!	; 0x308

00011e34 <__errno_location@plt>:
   11e34:	add	ip, pc, #0, 12
   11e38:	add	ip, ip, #172032	; 0x2a000
   11e3c:	ldr	pc, [ip, #768]!	; 0x300

00011e40 <__cxa_atexit@plt>:
   11e40:	add	ip, pc, #0, 12
   11e44:	add	ip, ip, #172032	; 0x2a000
   11e48:	ldr	pc, [ip, #760]!	; 0x2f8

00011e4c <setvbuf@plt>:
   11e4c:	add	ip, pc, #0, 12
   11e50:	add	ip, ip, #172032	; 0x2a000
   11e54:	ldr	pc, [ip, #752]!	; 0x2f0

00011e58 <memset@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #172032	; 0x2a000
   11e60:	ldr	pc, [ip, #744]!	; 0x2e8

00011e64 <fgetc@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #172032	; 0x2a000
   11e6c:	ldr	pc, [ip, #736]!	; 0x2e0

00011e70 <__printf_chk@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #172032	; 0x2a000
   11e78:	ldr	pc, [ip, #728]!	; 0x2d8

00011e7c <write@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #172032	; 0x2a000
   11e84:	ldr	pc, [ip, #720]!	; 0x2d0

00011e88 <fileno@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #172032	; 0x2a000
   11e90:	ldr	pc, [ip, #712]!	; 0x2c8

00011e94 <__fprintf_chk@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #172032	; 0x2a000
   11e9c:	ldr	pc, [ip, #704]!	; 0x2c0

00011ea0 <memchr@plt>:
   11ea0:	add	ip, pc, #0, 12
   11ea4:	add	ip, ip, #172032	; 0x2a000
   11ea8:	ldr	pc, [ip, #696]!	; 0x2b8

00011eac <fclose@plt>:
   11eac:	add	ip, pc, #0, 12
   11eb0:	add	ip, ip, #172032	; 0x2a000
   11eb4:	ldr	pc, [ip, #688]!	; 0x2b0

00011eb8 <pipe@plt>:
   11eb8:	add	ip, pc, #0, 12
   11ebc:	add	ip, ip, #172032	; 0x2a000
   11ec0:	ldr	pc, [ip, #680]!	; 0x2a8

00011ec4 <fseeko64@plt>:
   11ec4:	add	ip, pc, #0, 12
   11ec8:	add	ip, ip, #172032	; 0x2a000
   11ecc:	ldr	pc, [ip, #672]!	; 0x2a0

00011ed0 <fcntl64@plt>:
   11ed0:	add	ip, pc, #0, 12
   11ed4:	add	ip, ip, #172032	; 0x2a000
   11ed8:	ldr	pc, [ip, #664]!	; 0x298

00011edc <__overflow@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #172032	; 0x2a000
   11ee4:	ldr	pc, [ip, #656]!	; 0x290

00011ee8 <setlocale@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #172032	; 0x2a000
   11ef0:	ldr	pc, [ip, #648]!	; 0x288

00011ef4 <sigemptyset@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #172032	; 0x2a000
   11efc:	ldr	pc, [ip, #640]!	; 0x280

00011f00 <fork@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #172032	; 0x2a000
   11f08:	ldr	pc, [ip, #632]!	; 0x278

00011f0c <__explicit_bzero_chk@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #172032	; 0x2a000
   11f14:	ldr	pc, [ip, #624]!	; 0x270

00011f18 <strrchr@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #172032	; 0x2a000
   11f20:	ldr	pc, [ip, #616]!	; 0x268

00011f24 <pthread_join@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #172032	; 0x2a000
   11f2c:	ldr	pc, [ip, #608]!	; 0x260

00011f30 <nl_langinfo@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #172032	; 0x2a000
   11f38:	ldr	pc, [ip, #600]!	; 0x258

00011f3c <localeconv@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #172032	; 0x2a000
   11f44:	ldr	pc, [ip, #592]!	; 0x250

00011f48 <clearerr_unlocked@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #172032	; 0x2a000
   11f50:	ldr	pc, [ip, #584]!	; 0x248

00011f54 <fopen64@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #172032	; 0x2a000
   11f5c:	ldr	pc, [ip, #576]!	; 0x240

00011f60 <qsort@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #172032	; 0x2a000
   11f68:	ldr	pc, [ip, #568]!	; 0x238

00011f6c <pipe2@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #172032	; 0x2a000
   11f74:	ldr	pc, [ip, #560]!	; 0x230

00011f78 <pthread_cond_wait@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #172032	; 0x2a000
   11f80:	ldr	pc, [ip, #552]!	; 0x228

00011f84 <euidaccess@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #172032	; 0x2a000
   11f8c:	ldr	pc, [ip, #544]!	; 0x220

00011f90 <sched_getaffinity@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #172032	; 0x2a000
   11f98:	ldr	pc, [ip, #536]!	; 0x218

00011f9c <bindtextdomain@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #172032	; 0x2a000
   11fa4:	ldr	pc, [ip, #528]!	; 0x210

00011fa8 <fread_unlocked@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #172032	; 0x2a000
   11fb0:	ldr	pc, [ip, #520]!	; 0x208

00011fb4 <getrandom@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #172032	; 0x2a000
   11fbc:	ldr	pc, [ip, #512]!	; 0x200

00011fc0 <__xstat64@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #172032	; 0x2a000
   11fc8:	ldr	pc, [ip, #504]!	; 0x1f8

00011fcc <strncmp@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #172032	; 0x2a000
   11fd4:	ldr	pc, [ip, #496]!	; 0x1f0

00011fd8 <pthread_cond_signal@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #172032	; 0x2a000
   11fe0:	ldr	pc, [ip, #488]!	; 0x1e8

00011fe4 <abort@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #172032	; 0x2a000
   11fec:	ldr	pc, [ip, #480]!	; 0x1e0

00011ff0 <close@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #172032	; 0x2a000
   11ff8:	ldr	pc, [ip, #472]!	; 0x1d8

00011ffc <dcngettext@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #172032	; 0x2a000
   12004:	ldr	pc, [ip, #464]!	; 0x1d0

00012008 <__assert_fail@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #172032	; 0x2a000
   12010:	ldr	pc, [ip, #456]!	; 0x1c8

Disassembly of section .text:

00012018 <_obstack_begin@@Base-0x160b8>:
   12018:	push	{r4, lr}
   1201c:	mov	r2, #5
   12020:	mov	r4, r0
   12024:	ldr	r1, [pc, #12]	; 12038 <__assert_fail@plt+0x30>
   12028:	mov	r0, #0
   1202c:	bl	11c0c <dcgettext@plt>
   12030:	mov	r1, r4
   12034:	bl	15c10 <__assert_fail@plt+0x3c08>
   12038:	andeq	r9, r2, r4, asr #7
   1203c:	andeq	r0, r0, r0
   12040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12044:	vpush	{d8-d11}
   12048:	mov	r7, r1
   1204c:	ldr	r6, [pc, #1044]	; 12468 <__assert_fail@plt+0x460>
   12050:	mov	r4, #2
   12054:	sub	sp, sp, #548	; 0x224
   12058:	str	r0, [sp, #24]
   1205c:	ldr	r0, [pc, #1032]	; 1246c <__assert_fail@plt+0x464>
   12060:	bl	11d74 <getenv@plt>
   12064:	str	r6, [sp, #32]
   12068:	adds	r3, r0, #0
   1206c:	movne	r3, #1
   12070:	str	r3, [sp, #16]
   12074:	str	r0, [sp, #56]	; 0x38
   12078:	bl	205c8 <__assert_fail@plt+0xe5c0>
   1207c:	sub	r3, r0, #199680	; 0x30c00
   12080:	sub	r3, r3, #432	; 0x1b0
   12084:	cmp	r3, #696	; 0x2b8
   12088:	movls	r3, #0
   1208c:	movhi	r3, #1
   12090:	ldr	r0, [r7]
   12094:	str	r3, [sp, #28]
   12098:	bl	20628 <__assert_fail@plt+0xe620>
   1209c:	ldr	r1, [pc, #1108]	; 124f8 <__assert_fail@plt+0x4f0>
   120a0:	mov	r0, #6
   120a4:	bl	11ee8 <setlocale@plt>
   120a8:	ldr	r1, [pc, #960]	; 12470 <__assert_fail@plt+0x468>
   120ac:	str	r0, [sp, #60]	; 0x3c
   120b0:	ldr	r0, [pc, #956]	; 12474 <__assert_fail@plt+0x46c>
   120b4:	bl	11f9c <bindtextdomain@plt>
   120b8:	ldr	r0, [pc, #948]	; 12474 <__assert_fail@plt+0x46c>
   120bc:	bl	11c6c <textdomain@plt>
   120c0:	ldr	r3, [pc, #944]	; 12478 <__assert_fail@plt+0x470>
   120c4:	mov	r0, #3
   120c8:	str	r4, [r3]
   120cc:	bl	1e1a8 <__assert_fail@plt+0xc1a0>
   120d0:	strb	r0, [r6, #1305]	; 0x519
   120d4:	mov	r0, r4
   120d8:	bl	1e1a8 <__assert_fail@plt+0xc1a0>
   120dc:	mov	r5, r0
   120e0:	strb	r0, [r6, #1492]	; 0x5d4
   120e4:	bl	11f3c <localeconv@plt>
   120e8:	ldr	r2, [r0]
   120ec:	ldrb	r3, [r2]
   120f0:	cmp	r3, #0
   120f4:	strb	r3, [r6, #1172]	; 0x494
   120f8:	beq	12444 <__assert_fail@plt+0x43c>
   120fc:	ldrb	r3, [r2, #1]
   12100:	cmp	r3, #0
   12104:	bne	12444 <__assert_fail@plt+0x43c>
   12108:	ldr	r2, [r0, #4]
   1210c:	ldr	r1, [sp, #32]
   12110:	ldrb	r3, [r2]
   12114:	cmp	r3, #0
   12118:	str	r3, [r1, #1168]	; 0x490
   1211c:	beq	12a40 <__assert_fail@plt+0xa38>
   12120:	ldrb	r3, [r2, #1]
   12124:	cmp	r3, #0
   12128:	bne	12a38 <__assert_fail@plt+0xa30>
   1212c:	ldr	r3, [sp, #32]
   12130:	mov	r8, #0
   12134:	ldr	fp, [pc, #812]	; 12468 <__assert_fail@plt+0x460>
   12138:	strb	r8, [r3, #1304]	; 0x518
   1213c:	bl	11dc8 <__ctype_toupper_loc@plt>
   12140:	str	fp, [sp, #32]
   12144:	mov	sl, r8
   12148:	mov	r6, r0
   1214c:	bl	11dec <__ctype_b_loc@plt>
   12150:	ldr	ip, [pc, #804]	; 1247c <__assert_fail@plt+0x474>
   12154:	mov	r3, r8
   12158:	sub	r9, ip, #272	; 0x110
   1215c:	sub	r8, ip, #528	; 0x210
   12160:	mov	lr, fp
   12164:	mov	r4, r0
   12168:	ldr	r1, [r4]
   1216c:	lsl	r2, r3, #1
   12170:	ldrh	r0, [r1, r2]
   12174:	and	r1, r0, #1
   12178:	lsr	r2, r0, #14
   1217c:	eor	r2, r2, #1
   12180:	and	r2, r2, #1
   12184:	strb	r2, [r8, #1]!
   12188:	ldr	r2, [r6]
   1218c:	cmp	r3, #10
   12190:	orreq	r1, r1, #1
   12194:	tst	r0, #8
   12198:	strb	r1, [ip, #1]!
   1219c:	ldr	r2, [r2, r3, lsl #2]
   121a0:	eoreq	r1, r1, #1
   121a4:	add	r3, r3, #1
   121a8:	strbeq	r1, [lr], #1
   121ac:	strbne	sl, [lr], #1
   121b0:	cmp	r3, #256	; 0x100
   121b4:	strb	r2, [r9, #1]!
   121b8:	bne	12168 <__assert_fail@plt+0x160>
   121bc:	cmp	r5, #0
   121c0:	beq	12274 <__assert_fail@plt+0x26c>
   121c4:	str	r7, [sp, #36]	; 0x24
   121c8:	ldr	fp, [pc, #688]	; 12480 <__assert_fail@plt+0x478>
   121cc:	ldr	r8, [pc, #688]	; 12484 <__assert_fail@plt+0x47c>
   121d0:	ldr	r6, [pc, #688]	; 12488 <__assert_fail@plt+0x480>
   121d4:	ldr	r7, [sp, #32]
   121d8:	mov	r5, #0
   121dc:	mov	r0, fp
   121e0:	bl	11f30 <nl_langinfo@plt>
   121e4:	mov	r9, r0
   121e8:	bl	11e10 <strlen@plt>
   121ec:	mov	sl, r0
   121f0:	add	r0, r0, #1
   121f4:	bl	261d8 <__assert_fail@plt+0x141d0>
   121f8:	add	r1, r8, fp, lsl #3
   121fc:	sub	r1, r1, #1048576	; 0x100000
   12200:	sub	r3, fp, #131072	; 0x20000
   12204:	sub	r3, r3, #13
   12208:	cmp	sl, #0
   1220c:	str	r3, [r1, #-108]	; 0xffffff94
   12210:	str	r0, [r1, #-112]	; 0xffffff90
   12214:	beq	1224c <__assert_fail@plt+0x244>
   12218:	ldr	ip, [r4]
   1221c:	add	r1, r9, sl
   12220:	mov	sl, r5
   12224:	ldrb	r3, [r9], #1
   12228:	lsl	r2, r3, #1
   1222c:	ldrh	r2, [ip, r2]
   12230:	tst	r2, #1
   12234:	addeq	r3, r7, r3
   12238:	ldrbeq	r3, [r3, #512]	; 0x200
   1223c:	strbeq	r3, [r0, sl]
   12240:	addeq	sl, sl, #1
   12244:	cmp	r1, r9
   12248:	bne	12224 <__assert_fail@plt+0x21c>
   1224c:	add	fp, fp, #1
   12250:	cmp	fp, r6
   12254:	strb	r5, [r0, sl]
   12258:	bne	121dc <__assert_fail@plt+0x1d4>
   1225c:	ldr	r3, [pc, #552]	; 1248c <__assert_fail@plt+0x484>
   12260:	mov	r2, #8
   12264:	mov	r1, #12
   12268:	ldr	r0, [pc, #532]	; 12484 <__assert_fail@plt+0x47c>
   1226c:	ldr	r7, [sp, #36]	; 0x24
   12270:	bl	11f60 <qsort@plt>
   12274:	ldr	r3, [pc, #532]	; 12490 <__assert_fail@plt+0x488>
   12278:	ldr	r6, [pc, #532]	; 12494 <__assert_fail@plt+0x48c>
   1227c:	add	r0, r3, #8
   12280:	bl	11ef4 <sigemptyset@plt>
   12284:	ldr	r3, [pc, #516]	; 12490 <__assert_fail@plt+0x488>
   12288:	add	sl, r6, #44	; 0x2c
   1228c:	add	fp, r3, #8
   12290:	mov	r5, r6
   12294:	mov	r9, #0
   12298:	ldr	r8, [r5, #4]!
   1229c:	add	r2, sp, #400	; 0x190
   122a0:	mov	r0, r8
   122a4:	mov	r1, r9
   122a8:	bl	11cb4 <sigaction@plt>
   122ac:	ldr	r3, [sp, #400]	; 0x190
   122b0:	cmp	r3, #1
   122b4:	beq	122c4 <__assert_fail@plt+0x2bc>
   122b8:	mov	r1, r8
   122bc:	mov	r0, fp
   122c0:	bl	11da4 <sigaddset@plt>
   122c4:	cmp	r5, sl
   122c8:	bne	12298 <__assert_fail@plt+0x290>
   122cc:	ldr	r3, [pc, #444]	; 12490 <__assert_fail@plt+0x488>
   122d0:	mov	r2, #128	; 0x80
   122d4:	add	r8, r3, #8
   122d8:	ldr	r3, [pc, #440]	; 12498 <__assert_fail@plt+0x490>
   122dc:	mov	r1, r8
   122e0:	add	r0, sp, #404	; 0x194
   122e4:	str	r3, [sp, #400]	; 0x190
   122e8:	bl	11b7c <memcpy@plt>
   122ec:	mov	r3, #0
   122f0:	mov	r9, r3
   122f4:	str	r3, [sp, #532]	; 0x214
   122f8:	b	12304 <__assert_fail@plt+0x2fc>
   122fc:	cmp	r5, r6
   12300:	beq	12334 <__assert_fail@plt+0x32c>
   12304:	ldr	sl, [r6, #4]!
   12308:	mov	r0, r8
   1230c:	mov	r1, sl
   12310:	bl	11c60 <sigismember@plt>
   12314:	cmp	r0, #0
   12318:	beq	122fc <__assert_fail@plt+0x2f4>
   1231c:	mov	r0, sl
   12320:	mov	r2, r9
   12324:	add	r1, sp, #400	; 0x190
   12328:	bl	11cb4 <sigaction@plt>
   1232c:	cmp	r5, r6
   12330:	bne	12304 <__assert_fail@plt+0x2fc>
   12334:	mov	r1, #0
   12338:	mov	r0, #17
   1233c:	bl	11bb8 <signal@plt>
   12340:	ldr	r0, [pc, #340]	; 1249c <__assert_fail@plt+0x494>
   12344:	bl	28f3c <_obstack_memory_used@@Base+0xab0>
   12348:	mov	r2, #40	; 0x28
   1234c:	mov	r1, #0
   12350:	add	r0, sp, #256	; 0x100
   12354:	bl	11e58 <memset@plt>
   12358:	ldr	sl, [sp, #24]
   1235c:	mov	r6, #0
   12360:	mvn	r3, #0
   12364:	mov	r1, #4
   12368:	mov	r0, sl
   1236c:	str	r3, [sp, #264]	; 0x108
   12370:	str	r3, [sp, #256]	; 0x100
   12374:	str	r6, [sp, #40]	; 0x28
   12378:	bl	262bc <__assert_fail@plt+0x142b4>
   1237c:	ldr	r3, [pc, #344]	; 124dc <__assert_fail@plt+0x4d4>
   12380:	mov	r8, r4
   12384:	add	r3, r3, #572	; 0x23c
   12388:	vldr	d9, [pc, #200]	; 12458 <__assert_fail@plt+0x450>
   1238c:	vldr	d8, [pc, #204]	; 12460 <__assert_fail@plt+0x458>
   12390:	str	r3, [sp, #72]	; 0x48
   12394:	str	r6, [sp, #36]	; 0x24
   12398:	mov	r5, r6
   1239c:	str	r6, [sp, #52]	; 0x34
   123a0:	str	r6, [sp, #44]	; 0x2c
   123a4:	str	r6, [sp, #48]	; 0x30
   123a8:	str	r6, [sp, #24]
   123ac:	mov	r9, sl
   123b0:	mov	r4, r0
   123b4:	b	12428 <__assert_fail@plt+0x420>
   123b8:	ldr	r3, [sp, #16]
   123bc:	cmp	r5, #0
   123c0:	moveq	r3, #0
   123c4:	andne	r3, r3, #1
   123c8:	cmp	r3, #0
   123cc:	beq	12550 <__assert_fail@plt+0x548>
   123d0:	ldr	r3, [sp, #28]
   123d4:	eor	r2, r3, #1
   123d8:	ldr	r3, [sp, #24]
   123dc:	cmp	r3, #0
   123e0:	orrne	r2, r2, #1
   123e4:	ldr	r3, [pc, #272]	; 124fc <__assert_fail@plt+0x4f4>
   123e8:	cmp	r2, #0
   123ec:	ldr	r1, [r3]
   123f0:	bne	1240c <__assert_fail@plt+0x404>
   123f4:	cmp	r9, r1
   123f8:	beq	129b8 <__assert_fail@plt+0x9b0>
   123fc:	ldr	r2, [r7, r1, lsl #2]
   12400:	ldrb	r0, [r2]
   12404:	cmp	r0, #45	; 0x2d
   12408:	beq	1252c <__assert_fail@plt+0x524>
   1240c:	cmp	r9, r1
   12410:	ble	14ca0 <__assert_fail@plt+0x2c98>
   12414:	ldr	r2, [r7, r1, lsl #2]
   12418:	add	r1, r1, #1
   1241c:	str	r2, [r4, r5, lsl #2]
   12420:	add	r5, r5, #1
   12424:	str	r1, [r3]
   12428:	mvn	r3, #0
   1242c:	cmn	r6, #1
   12430:	str	r3, [sp, #152]	; 0x98
   12434:	bne	123b8 <__assert_fail@plt+0x3b0>
   12438:	ldr	r3, [pc, #188]	; 124fc <__assert_fail@plt+0x4f4>
   1243c:	ldr	r1, [r3]
   12440:	b	1240c <__assert_fail@plt+0x404>
   12444:	ldr	r2, [sp, #32]
   12448:	mov	r3, #46	; 0x2e
   1244c:	strb	r3, [r2, #1172]	; 0x494
   12450:	b	12108 <__assert_fail@plt+0x100>
   12454:	nop			; (mov r0, r0)
   12458:	andeq	r0, r0, r0
   1245c:	subsmi	r0, r9, r0
   12460:	andeq	r0, r0, r0
   12464:	mvnsmi	r0, #0
   12468:	andeq	ip, r3, r8, ror #5
   1246c:	andeq	sl, r2, r4, ror #12
   12470:	andeq	sl, r2, r4, ror r6
   12474:			; <UNDEFINED> instruction: 0x0002a5b0
   12478:	andeq	ip, r3, r4, ror r2
   1247c:	strdeq	ip, [r3], -r7
   12480:	andeq	r0, r2, lr
   12484:	strdeq	ip, [r3], -r4
   12488:	andeq	r0, r2, sl, lsl r0
   1248c:	andeq	r5, r1, r8, lsr #22
   12490:	andeq	ip, r3, r8, ror r7
   12494:	andeq	r9, r2, r0, lsr #1
   12498:	andeq	r5, r1, r0, asr #23
   1249c:	strdeq	r6, [r1], -r8
   124a0:	andeq	r0, r0, sl, lsl #2
   124a4:	andeq	r9, r2, ip, ror #10
   124a8:	andeq	sl, r2, r0, lsr r9
   124ac:	andeq	r9, r2, r8, ror #5
   124b0:	andeq	sl, r2, r4, ror #13
   124b4:	andeq	ip, r3, r0, ror r2
   124b8:	andeq	sl, r2, ip, ror #13
   124bc:	andeq	r9, r2, r0, lsl r3
   124c0:	andeq	sl, r2, r8, ror #17
   124c4:	ldrdeq	ip, [r3], -r0
   124c8:	strdeq	sl, [r2], -ip
   124cc:	andeq	fp, r2, ip, lsl #5
   124d0:	andeq	sl, r2, ip, asr r8
   124d4:	andeq	sl, r2, r8, ror r8
   124d8:	andeq	sl, r2, r0, lsr #14
   124dc:	ldrdeq	r9, [r2], -r0
   124e0:	andeq	ip, r3, ip, ror #4
   124e4:	ldrdeq	ip, [r3], -ip	; <UNPREDICTABLE>
   124e8:	andeq	sl, r2, ip, asr #17
   124ec:	ldrdeq	sl, [r2], -r8
   124f0:	andeq	sl, r2, ip, lsr #11
   124f4:	andeq	sl, r2, r4, lsr #29
   124f8:	andeq	r9, r2, r8, asr fp
   124fc:	andeq	ip, r3, r8, asr #5
   12500:	andeq	ip, r3, r0, ror #5
   12504:	muleq	r2, r0, r7
   12508:	andeq	r8, r2, r0, ror #30
   1250c:	andeq	sl, r2, ip, lsr #15
   12510:	andeq	r9, r2, r0, ror r4
   12514:			; <UNDEFINED> instruction: 0x0002abb4
   12518:	andeq	sl, r2, r0, ror ip
   1251c:	andeq	sl, r2, ip, lsl #25
   12520:	andeq	sl, r2, r4, lsr #25
   12524:	andeq	ip, r3, r8, ror #3
   12528:	andeq	sl, r2, r0, ror #25
   1252c:	ldrb	r0, [r2, #1]
   12530:	cmp	r0, #111	; 0x6f
   12534:	bne	1240c <__assert_fail@plt+0x404>
   12538:	ldrb	r2, [r2, #2]
   1253c:	cmp	r2, #0
   12540:	bne	12550 <__assert_fail@plt+0x548>
   12544:	add	r2, r1, #1
   12548:	cmp	r9, r2
   1254c:	beq	1240c <__assert_fail@plt+0x404>
   12550:	add	r3, sp, #152	; 0x98
   12554:	str	r3, [sp]
   12558:	ldr	r3, [pc, #-132]	; 124dc <__assert_fail@plt+0x4d4>
   1255c:	mov	r1, r7
   12560:	add	r2, r3, #496	; 0x1f0
   12564:	mov	r0, r9
   12568:	bl	11de0 <getopt_long@plt>
   1256c:	cmn	r0, #1
   12570:	mov	r6, r0
   12574:	beq	12438 <__assert_fail@plt+0x430>
   12578:	ldr	r2, [pc, #-224]	; 124a0 <__assert_fail@plt+0x498>
   1257c:	add	r3, r0, #3
   12580:	cmp	r3, r2
   12584:	ldrls	pc, [pc, r3, lsl #2]
   12588:	b	12b74 <__assert_fail@plt+0xb6c>
   1258c:	andeq	r2, r1, r4, lsr #29
   12590:	andeq	r2, r1, r0, ror #29
   12594:	andeq	r2, r1, r4, ror fp
   12598:	andeq	r2, r1, r4, ror fp
   1259c:	andeq	r2, r1, r4, lsr #31
   125a0:	andeq	r2, r1, r4, ror fp
   125a4:	andeq	r2, r1, r4, ror fp
   125a8:	andeq	r2, r1, r4, ror fp
   125ac:	andeq	r2, r1, r4, ror fp
   125b0:	andeq	r2, r1, r4, ror fp
   125b4:	andeq	r2, r1, r4, ror fp
   125b8:	andeq	r2, r1, r4, ror fp
   125bc:	andeq	r2, r1, r4, ror fp
   125c0:	andeq	r2, r1, r4, ror fp
   125c4:	andeq	r2, r1, r4, ror fp
   125c8:	andeq	r2, r1, r4, ror fp
   125cc:	andeq	r2, r1, r4, ror fp
   125d0:	andeq	r2, r1, r4, ror fp
   125d4:	andeq	r2, r1, r4, ror fp
   125d8:	andeq	r2, r1, r4, ror fp
   125dc:	andeq	r2, r1, r4, ror fp
   125e0:	andeq	r2, r1, r4, ror fp
   125e4:	andeq	r2, r1, r4, ror fp
   125e8:	andeq	r2, r1, r4, ror fp
   125ec:	andeq	r2, r1, r4, ror fp
   125f0:	andeq	r2, r1, r4, ror fp
   125f4:	andeq	r2, r1, r4, ror fp
   125f8:	andeq	r2, r1, r4, ror fp
   125fc:	andeq	r2, r1, r4, ror fp
   12600:	andeq	r2, r1, r4, ror fp
   12604:	andeq	r2, r1, r4, ror fp
   12608:	andeq	r2, r1, r4, ror fp
   1260c:	andeq	r2, r1, r4, ror fp
   12610:	andeq	r2, r1, r4, ror fp
   12614:	andeq	r2, r1, r4, ror fp
   12618:	andeq	r2, r1, r4, ror fp
   1261c:	andeq	r2, r1, r4, ror fp
   12620:	andeq	r2, r1, r4, ror fp
   12624:	andeq	r2, r1, r4, ror fp
   12628:	andeq	r2, r1, r4, ror fp
   1262c:	andeq	r2, r1, r4, ror fp
   12630:	andeq	r2, r1, r4, ror fp
   12634:	andeq	r2, r1, r4, ror fp
   12638:	andeq	r2, r1, r4, ror fp
   1263c:	andeq	r2, r1, r4, ror fp
   12640:	andeq	r2, r1, r4, ror fp
   12644:	andeq	r2, r1, r4, ror fp
   12648:	andeq	r2, r1, r4, ror fp
   1264c:	andeq	r2, r1, r4, ror fp
   12650:	andeq	r2, r1, r4, ror fp
   12654:	andeq	r2, r1, r4, ror fp
   12658:	andeq	r2, r1, r4, ror fp
   1265c:	andeq	r2, r1, r4, ror fp
   12660:	andeq	r2, r1, r4, ror fp
   12664:	andeq	r2, r1, r4, ror fp
   12668:	andeq	r2, r1, r4, ror fp
   1266c:	andeq	r2, r1, r4, ror fp
   12670:	andeq	r2, r1, r4, ror fp
   12674:	andeq	r2, r1, r4, ror fp
   12678:	andeq	r2, r1, r4, ror fp
   1267c:	andeq	r2, r1, r4, ror fp
   12680:	andeq	r2, r1, r4, ror fp
   12684:	andeq	r2, r1, r4, ror fp
   12688:	andeq	r2, r1, r4, ror fp
   1268c:	andeq	r2, r1, r4, ror fp
   12690:	andeq	r2, r1, r4, ror fp
   12694:	andeq	r2, r1, r4, ror fp
   12698:	andeq	r2, r1, r4, ror fp
   1269c:	andeq	r2, r1, r4, ror fp
   126a0:	andeq	r2, r1, r4, ror fp
   126a4:	strdeq	r2, [r1], -r4
   126a8:	andeq	r2, r1, r4, ror fp
   126ac:	andeq	r2, r1, r4, ror fp
   126b0:	andeq	r2, r1, r4, ror fp
   126b4:	andeq	r2, r1, r4, ror fp
   126b8:	andeq	r2, r1, r4, ror fp
   126bc:	andeq	r2, r1, r4, ror fp
   126c0:	andeq	r2, r1, r4, ror fp
   126c4:	andeq	r2, r1, r4, ror fp
   126c8:	andeq	r2, r1, r4, ror fp
   126cc:	muleq	r1, r0, sl
   126d0:	andeq	r2, r1, r4, ror fp
   126d4:	andeq	r2, r1, r4, ror fp
   126d8:	andeq	r2, r1, r4, ror fp
   126dc:	andeq	r2, r1, r4, ror fp
   126e0:	muleq	r1, r0, sl
   126e4:	andeq	r2, r1, ip, ror fp
   126e8:	ldrdeq	r2, [r1], -r8
   126ec:	andeq	r2, r1, r4, ror fp
   126f0:	muleq	r1, r0, sl
   126f4:	andeq	r2, r1, r4, ror fp
   126f8:	andeq	r2, r1, r4, ror fp
   126fc:	andeq	r2, r1, r4, ror fp
   12700:	andeq	r2, r1, r4, ror fp
   12704:	andeq	r2, r1, r4, ror fp
   12708:	andeq	r2, r1, r4, ror fp
   1270c:	andeq	r2, r1, r4, ror fp
   12710:	andeq	r2, r1, r4, ror fp
   12714:	andeq	r2, r1, r4, ror fp
   12718:	andeq	r2, r1, r4, ror fp
   1271c:	andeq	r2, r1, r4, ror fp
   12720:	muleq	r1, r0, sl
   12724:	strdeq	r2, [r1], -r4
   12728:	muleq	r1, r0, sl
   1272c:	andeq	r2, r1, r4, ror fp
   12730:	muleq	r1, r0, sl
   12734:	muleq	r1, r0, sl
   12738:	muleq	r1, r0, sl
   1273c:	muleq	r1, r0, sl
   12740:	andeq	r2, r1, r4, ror fp
   12744:	muleq	r1, r4, ip
   12748:	andeq	r2, r1, r4, ror fp
   1274c:	andeq	r2, r1, r4, lsl #27
   12750:	muleq	r1, r0, sl
   12754:	andeq	r2, r1, r8, ror #23
   12758:	andeq	r2, r1, r4, ror fp
   1275c:	andeq	r2, r1, r4, ror fp
   12760:	muleq	r1, r0, sl
   12764:	andeq	r2, r1, ip, lsl ip
   12768:	andeq	r2, r1, ip, lsr #24
   1276c:	andeq	r2, r1, r4, lsl #25
   12770:	andeq	r2, r1, r4, ror fp
   12774:	andeq	r2, r1, r4, ror fp
   12778:	andeq	r2, r1, r4, ror fp
   1277c:	andeq	r2, r1, r8, asr pc
   12780:	ldrdeq	r2, [r1], -r0
   12784:	andeq	r2, r1, r4, ror fp
   12788:	andeq	r2, r1, r4, ror fp
   1278c:	andeq	r2, r1, r4, ror fp
   12790:	andeq	r2, r1, r4, ror fp
   12794:	andeq	r2, r1, r4, ror fp
   12798:	andeq	r2, r1, r4, ror fp
   1279c:	andeq	r2, r1, r4, ror fp
   127a0:	andeq	r2, r1, r4, ror fp
   127a4:	andeq	r2, r1, r4, ror fp
   127a8:	andeq	r2, r1, r4, ror fp
   127ac:	andeq	r2, r1, r4, ror fp
   127b0:	andeq	r2, r1, r4, ror fp
   127b4:	andeq	r2, r1, r4, ror fp
   127b8:	andeq	r2, r1, r4, ror fp
   127bc:	andeq	r2, r1, r4, ror fp
   127c0:	andeq	r2, r1, r4, ror fp
   127c4:	andeq	r2, r1, r4, ror fp
   127c8:	andeq	r2, r1, r4, ror fp
   127cc:	andeq	r2, r1, r4, ror fp
   127d0:	andeq	r2, r1, r4, ror fp
   127d4:	andeq	r2, r1, r4, ror fp
   127d8:	andeq	r2, r1, r4, ror fp
   127dc:	andeq	r2, r1, r4, ror fp
   127e0:	andeq	r2, r1, r4, ror fp
   127e4:	andeq	r2, r1, r4, ror fp
   127e8:	andeq	r2, r1, r4, ror fp
   127ec:	andeq	r2, r1, r4, ror fp
   127f0:	andeq	r2, r1, r4, ror fp
   127f4:	andeq	r2, r1, r4, ror fp
   127f8:	andeq	r2, r1, r4, ror fp
   127fc:	andeq	r2, r1, r4, ror fp
   12800:	andeq	r2, r1, r4, ror fp
   12804:	andeq	r2, r1, r4, ror fp
   12808:	andeq	r2, r1, r4, ror fp
   1280c:	andeq	r2, r1, r4, ror fp
   12810:	andeq	r2, r1, r4, ror fp
   12814:	andeq	r2, r1, r4, ror fp
   12818:	andeq	r2, r1, r4, ror fp
   1281c:	andeq	r2, r1, r4, ror fp
   12820:	andeq	r2, r1, r4, ror fp
   12824:	andeq	r2, r1, r4, ror fp
   12828:	andeq	r2, r1, r4, ror fp
   1282c:	andeq	r2, r1, r4, ror fp
   12830:	andeq	r2, r1, r4, ror fp
   12834:	andeq	r2, r1, r4, ror fp
   12838:	andeq	r2, r1, r4, ror fp
   1283c:	andeq	r2, r1, r4, ror fp
   12840:	andeq	r2, r1, r4, ror fp
   12844:	andeq	r2, r1, r4, ror fp
   12848:	andeq	r2, r1, r4, ror fp
   1284c:	andeq	r2, r1, r4, ror fp
   12850:	andeq	r2, r1, r4, ror fp
   12854:	andeq	r2, r1, r4, ror fp
   12858:	andeq	r2, r1, r4, ror fp
   1285c:	andeq	r2, r1, r4, ror fp
   12860:	andeq	r2, r1, r4, ror fp
   12864:	andeq	r2, r1, r4, ror fp
   12868:	andeq	r2, r1, r4, ror fp
   1286c:	andeq	r2, r1, r4, ror fp
   12870:	andeq	r2, r1, r4, ror fp
   12874:	andeq	r2, r1, r4, ror fp
   12878:	andeq	r2, r1, r4, ror fp
   1287c:	andeq	r2, r1, r4, ror fp
   12880:	andeq	r2, r1, r4, ror fp
   12884:	andeq	r2, r1, r4, ror fp
   12888:	andeq	r2, r1, r4, ror fp
   1288c:	andeq	r2, r1, r4, ror fp
   12890:	andeq	r2, r1, r4, ror fp
   12894:	andeq	r2, r1, r4, ror fp
   12898:	andeq	r2, r1, r4, ror fp
   1289c:	andeq	r2, r1, r4, ror fp
   128a0:	andeq	r2, r1, r4, ror fp
   128a4:	andeq	r2, r1, r4, ror fp
   128a8:	andeq	r2, r1, r4, ror fp
   128ac:	andeq	r2, r1, r4, ror fp
   128b0:	andeq	r2, r1, r4, ror fp
   128b4:	andeq	r2, r1, r4, ror fp
   128b8:	andeq	r2, r1, r4, ror fp
   128bc:	andeq	r2, r1, r4, ror fp
   128c0:	andeq	r2, r1, r4, ror fp
   128c4:	andeq	r2, r1, r4, ror fp
   128c8:	andeq	r2, r1, r4, ror fp
   128cc:	andeq	r2, r1, r4, ror fp
   128d0:	andeq	r2, r1, r4, ror fp
   128d4:	andeq	r2, r1, r4, ror fp
   128d8:	andeq	r2, r1, r4, ror fp
   128dc:	andeq	r2, r1, r4, ror fp
   128e0:	andeq	r2, r1, r4, ror fp
   128e4:	andeq	r2, r1, r4, ror fp
   128e8:	andeq	r2, r1, r4, ror fp
   128ec:	andeq	r2, r1, r4, ror fp
   128f0:	andeq	r2, r1, r4, ror fp
   128f4:	andeq	r2, r1, r4, ror fp
   128f8:	andeq	r2, r1, r4, ror fp
   128fc:	andeq	r2, r1, r4, ror fp
   12900:	andeq	r2, r1, r4, ror fp
   12904:	andeq	r2, r1, r4, ror fp
   12908:	andeq	r2, r1, r4, ror fp
   1290c:	andeq	r2, r1, r4, ror fp
   12910:	andeq	r2, r1, r4, ror fp
   12914:	andeq	r2, r1, r4, ror fp
   12918:	andeq	r2, r1, r4, ror fp
   1291c:	andeq	r2, r1, r4, ror fp
   12920:	andeq	r2, r1, r4, ror fp
   12924:	andeq	r2, r1, r4, ror fp
   12928:	andeq	r2, r1, r4, ror fp
   1292c:	andeq	r2, r1, r4, ror fp
   12930:	andeq	r2, r1, r4, ror fp
   12934:	andeq	r2, r1, r4, ror fp
   12938:	andeq	r2, r1, r4, ror fp
   1293c:	andeq	r2, r1, r4, ror fp
   12940:	andeq	r2, r1, r4, ror fp
   12944:	andeq	r2, r1, r4, ror fp
   12948:	andeq	r2, r1, r4, ror fp
   1294c:	andeq	r2, r1, r4, ror fp
   12950:	andeq	r2, r1, r4, ror fp
   12954:	andeq	r2, r1, r4, ror fp
   12958:	andeq	r2, r1, r4, ror fp
   1295c:	andeq	r2, r1, r4, ror fp
   12960:	andeq	r2, r1, r4, ror fp
   12964:	andeq	r2, r1, r4, ror fp
   12968:	andeq	r2, r1, r4, ror fp
   1296c:	andeq	r2, r1, r4, ror fp
   12970:	andeq	r2, r1, r4, ror fp
   12974:	andeq	r2, r1, r4, ror fp
   12978:	andeq	r2, r1, r4, ror fp
   1297c:	andeq	r2, r1, r4, ror fp
   12980:	andeq	r2, r1, r4, ror fp
   12984:	andeq	r2, r1, r4, ror fp
   12988:	andeq	r2, r1, r4, ror fp
   1298c:	andeq	r2, r1, r4, ror fp
   12990:	andeq	r2, r1, r4, ror fp
   12994:	andeq	r2, r1, r4, ror fp
   12998:			; <UNDEFINED> instruction: 0x00012ab0
   1299c:	andeq	r2, r1, r4, asr #27
   129a0:	strdeq	r2, [r1], -ip
   129a4:	andeq	r2, r1, ip, lsl #28
   129a8:	andeq	r2, r1, ip, lsl lr
   129ac:	muleq	r1, r0, sp
   129b0:	andeq	r2, r1, r0, asr sl
   129b4:	andeq	r2, r1, r8, ror #29
   129b8:	mov	r9, r4
   129bc:	mov	fp, r2
   129c0:	mov	r4, r8
   129c4:	ldr	r3, [sp, #36]	; 0x24
   129c8:	cmp	r3, #0
   129cc:	beq	13154 <__assert_fail@plt+0x114c>
   129d0:	cmp	r5, #0
   129d4:	bne	12b14 <__assert_fail@plt+0xb0c>
   129d8:	ldr	r1, [pc, #-1340]	; 124a4 <__assert_fail@plt+0x49c>
   129dc:	ldr	r0, [sp, #36]	; 0x24
   129e0:	bl	172fc <__assert_fail@plt+0x52f4>
   129e4:	subs	r6, r0, #0
   129e8:	beq	13d78 <__assert_fail@plt+0x1d70>
   129ec:	add	r0, sp, #400	; 0x190
   129f0:	bl	24ec0 <__assert_fail@plt+0x12eb8>
   129f4:	add	r1, sp, #400	; 0x190
   129f8:	mov	r0, r6
   129fc:	bl	24f6c <__assert_fail@plt+0x12f64>
   12a00:	cmp	r0, #0
   12a04:	bne	130f0 <__assert_fail@plt+0x10e8>
   12a08:	ldr	r1, [pc, #-1384]	; 124a8 <__assert_fail@plt+0x4a0>
   12a0c:	mov	r2, #5
   12a10:	bl	11c0c <dcgettext@plt>
   12a14:	ldr	r1, [sp, #36]	; 0x24
   12a18:	mov	r4, r0
   12a1c:	mov	r0, #4
   12a20:	bl	22b84 <__assert_fail@plt+0x10b7c>
   12a24:	mov	r3, r0
   12a28:	mov	r2, r4
   12a2c:	mov	r1, #0
   12a30:	mov	r0, #2
   12a34:	bl	11d50 <error@plt>
   12a38:	mov	r3, #1
   12a3c:	strb	r3, [r1, #1493]	; 0x5d5
   12a40:	ldr	r2, [sp, #32]
   12a44:	mov	r3, #256	; 0x100
   12a48:	str	r3, [r2, #1168]	; 0x490
   12a4c:	b	1212c <__assert_fail@plt+0x124>
   12a50:	ldr	r2, [pc, #-1444]	; 124b4 <__assert_fail@plt+0x4ac>
   12a54:	ldr	r3, [pc, #-1372]	; 12500 <__assert_fail@plt+0x4f8>
   12a58:	mov	r0, #1
   12a5c:	ldr	r2, [r2]
   12a60:	mov	r1, r3
   12a64:	ldr	r3, [pc, #-1472]	; 124ac <__assert_fail@plt+0x4a4>
   12a68:	str	r2, [sp, #4]
   12a6c:	add	r2, r3, #8
   12a70:	ldr	r1, [r1]
   12a74:	str	r0, [sp, #8]
   12a78:	str	r0, [sp]
   12a7c:	ldr	r0, [pc, #-1492]	; 124b0 <__assert_fail@plt+0x4a8>
   12a80:	bl	1c574 <__assert_fail@plt+0xa56c>
   12a84:	ldr	r3, [pc, #-1412]	; 12508 <__assert_fail@plt+0x500>
   12a88:	add	r0, r3, r0
   12a8c:	ldrb	r6, [r0, #904]	; 0x388
   12a90:	mov	r3, #0
   12a94:	mov	r2, #2
   12a98:	add	r1, sp, #256	; 0x100
   12a9c:	add	r0, sp, #400	; 0x190
   12aa0:	strb	r6, [sp, #400]	; 0x190
   12aa4:	strb	r3, [sp, #401]	; 0x191
   12aa8:	bl	155f8 <__assert_fail@plt+0x35f0>
   12aac:	b	12428 <__assert_fail@plt+0x420>
   12ab0:	ldr	r3, [pc, #-1464]	; 12500 <__assert_fail@plt+0x4f8>
   12ab4:	ldr	r1, [r3]
   12ab8:	cmp	r1, #0
   12abc:	moveq	r6, #99	; 0x63
   12ac0:	beq	12af4 <__assert_fail@plt+0xaec>
   12ac4:	ldr	r2, [pc, #-1560]	; 124b4 <__assert_fail@plt+0x4ac>
   12ac8:	mov	r3, #1
   12acc:	ldr	r0, [pc, #-1564]	; 124b8 <__assert_fail@plt+0x4b0>
   12ad0:	ldr	r2, [r2]
   12ad4:	str	r3, [sp]
   12ad8:	stmib	sp, {r2, r3}
   12adc:	ldr	r3, [sp, #72]	; 0x48
   12ae0:	ldr	r2, [pc, #-1580]	; 124bc <__assert_fail@plt+0x4b4>
   12ae4:	bl	1c574 <__assert_fail@plt+0xa56c>
   12ae8:	ldr	r3, [pc, #-1512]	; 12508 <__assert_fail@plt+0x500>
   12aec:	add	r0, r3, r0
   12af0:	ldrb	r6, [r0, #940]	; 0x3ac
   12af4:	ldr	r3, [sp, #24]
   12af8:	cmp	r3, #0
   12afc:	beq	12b08 <__assert_fail@plt+0xb00>
   12b00:	cmp	r6, r3
   12b04:	bne	14f6c <__assert_fail@plt+0x2f64>
   12b08:	uxtb	r3, r6
   12b0c:	str	r3, [sp, #24]
   12b10:	b	12428 <__assert_fail@plt+0x420>
   12b14:	mov	r2, #5
   12b18:	ldr	r1, [pc, #-1632]	; 124c0 <__assert_fail@plt+0x4b8>
   12b1c:	mov	r0, #0
   12b20:	bl	11c0c <dcgettext@plt>
   12b24:	ldr	r1, [r9]
   12b28:	mov	r4, r0
   12b2c:	mov	r0, #4
   12b30:	bl	22b84 <__assert_fail@plt+0x10b7c>
   12b34:	mov	r1, #0
   12b38:	mov	r2, r4
   12b3c:	mov	r3, r0
   12b40:	mov	r0, r1
   12b44:	bl	11d50 <error@plt>
   12b48:	ldr	r3, [pc, #-1676]	; 124c4 <__assert_fail@plt+0x4bc>
   12b4c:	mov	r2, #5
   12b50:	ldr	r1, [pc, #-1680]	; 124c8 <__assert_fail@plt+0x4c0>
   12b54:	mov	r0, #0
   12b58:	ldr	r4, [r3]
   12b5c:	bl	11c0c <dcgettext@plt>
   12b60:	ldr	r2, [pc, #-1692]	; 124cc <__assert_fail@plt+0x4c4>
   12b64:	mov	r1, #1
   12b68:	mov	r3, r0
   12b6c:	mov	r0, r4
   12b70:	bl	11e94 <__fprintf_chk@plt>
   12b74:	mov	r0, #2
   12b78:	bl	1bd8c <__assert_fail@plt+0x9d84>
   12b7c:	ldr	r3, [pc, #-1668]	; 12500 <__assert_fail@plt+0x4f8>
   12b80:	ldr	r2, [pc, #-1720]	; 124d0 <__assert_fail@plt+0x4c8>
   12b84:	mov	r1, r3
   12b88:	ldr	ip, [sp, #152]	; 0x98
   12b8c:	ldr	r1, [r1]
   12b90:	add	r3, sp, #400	; 0x190
   12b94:	str	r2, [sp]
   12b98:	mov	r0, r1
   12b9c:	mov	sl, r1
   12ba0:	mov	r2, #10
   12ba4:	add	r1, sp, #296	; 0x128
   12ba8:	mov	fp, ip
   12bac:	bl	26b88 <__assert_fail@plt+0x14b80>
   12bb0:	cmp	r0, #0
   12bb4:	beq	13078 <__assert_fail@plt+0x1070>
   12bb8:	cmp	r0, #2
   12bbc:	beq	13820 <__assert_fail@plt+0x1818>
   12bc0:	mov	r8, sl
   12bc4:	str	r8, [sp]
   12bc8:	mov	r1, fp
   12bcc:	ldr	r3, [pc, #-1784]	; 124dc <__assert_fail@plt+0x4d4>
   12bd0:	mov	r2, #83	; 0x53
   12bd4:	bl	26ad8 <__assert_fail@plt+0x14ad0>
   12bd8:	ldr	r3, [pc, #-1760]	; 12500 <__assert_fail@plt+0x4f8>
   12bdc:	ldr	r0, [r3]
   12be0:	bl	15c78 <__assert_fail@plt+0x3c70>
   12be4:	b	12428 <__assert_fail@plt+0x420>
   12be8:	ldr	r3, [sp, #40]	; 0x28
   12bec:	cmp	r3, #0
   12bf0:	ldr	r3, [pc, #-1784]	; 12500 <__assert_fail@plt+0x4f8>
   12bf4:	mov	fp, r3
   12bf8:	beq	12c10 <__assert_fail@plt+0xc08>
   12bfc:	ldr	r0, [sp, #40]	; 0x28
   12c00:	ldr	r1, [r3]
   12c04:	bl	11ae0 <strcmp@plt>
   12c08:	cmp	r0, #0
   12c0c:	bne	14b88 <__assert_fail@plt+0x2b80>
   12c10:	ldr	r3, [fp]
   12c14:	str	r3, [sp, #40]	; 0x28
   12c18:	b	12428 <__assert_fail@plt+0x420>
   12c1c:	ldr	r2, [sp, #32]
   12c20:	mov	r3, #1
   12c24:	strb	r3, [r2, #1174]	; 0x496
   12c28:	b	12428 <__assert_fail@plt+0x420>
   12c2c:	ldr	r3, [pc, #-1844]	; 12500 <__assert_fail@plt+0x4f8>
   12c30:	mov	fp, r3
   12c34:	ldr	r0, [r3]
   12c38:	ldrb	r2, [r0]
   12c3c:	cmp	r2, #0
   12c40:	beq	14b7c <__assert_fail@plt+0x2b74>
   12c44:	ldrb	r3, [r0, #1]
   12c48:	cmp	r3, #0
   12c4c:	beq	12c64 <__assert_fail@plt+0xc5c>
   12c50:	ldr	r1, [pc, #-1924]	; 124d4 <__assert_fail@plt+0x4cc>
   12c54:	bl	11ae0 <strcmp@plt>
   12c58:	cmp	r0, #0
   12c5c:	bne	14b5c <__assert_fail@plt+0x2b54>
   12c60:	mov	r2, r0
   12c64:	ldr	ip, [pc, #-1864]	; 12524 <__assert_fail@plt+0x51c>
   12c68:	ldr	r3, [ip]
   12c6c:	cmp	r3, #256	; 0x100
   12c70:	beq	12c7c <__assert_fail@plt+0xc74>
   12c74:	cmp	r3, r2
   12c78:	bne	14b3c <__assert_fail@plt+0x2b34>
   12c7c:	str	r2, [ip]
   12c80:	b	12428 <__assert_fail@plt+0x420>
   12c84:	ldr	r2, [sp, #32]
   12c88:	mov	r3, #1
   12c8c:	strb	r3, [r2, #1173]	; 0x495
   12c90:	b	12428 <__assert_fail@plt+0x420>
   12c94:	ldr	r3, [pc, #-1948]	; 12500 <__assert_fail@plt+0x4f8>
   12c98:	mov	r2, #40	; 0x28
   12c9c:	mov	fp, r3
   12ca0:	add	r3, sp, #216	; 0xd8
   12ca4:	mov	sl, r3
   12ca8:	mov	r0, r3
   12cac:	mov	r1, #0
   12cb0:	bl	11e58 <memset@plt>
   12cb4:	mvn	r3, #0
   12cb8:	mov	r1, sl
   12cbc:	ldr	r0, [fp]
   12cc0:	ldr	r2, [pc, #-2032]	; 124d8 <__assert_fail@plt+0x4d0>
   12cc4:	str	r3, [sp, #224]	; 0xe0
   12cc8:	bl	163d0 <__assert_fail@plt+0x43c8>
   12ccc:	ldr	r3, [sp, #216]	; 0xd8
   12cd0:	cmp	r3, #0
   12cd4:	sub	r3, r3, #1
   12cd8:	str	r3, [sp, #216]	; 0xd8
   12cdc:	beq	15150 <__assert_fail@plt+0x3148>
   12ce0:	ldrb	r2, [r0]
   12ce4:	cmp	r2, #46	; 0x2e
   12ce8:	beq	13dc0 <__assert_fail@plt+0x1db8>
   12cec:	cmp	r3, #0
   12cf0:	bne	12d04 <__assert_fail@plt+0xcfc>
   12cf4:	ldr	r3, [sp, #220]	; 0xdc
   12cf8:	cmp	r3, #0
   12cfc:	mvneq	r3, #0
   12d00:	streq	r3, [sp, #216]	; 0xd8
   12d04:	mov	r2, #0
   12d08:	mov	r1, sl
   12d0c:	bl	155f8 <__assert_fail@plt+0x35f0>
   12d10:	ldrb	r3, [r0]
   12d14:	cmp	r3, #44	; 0x2c
   12d18:	beq	13d80 <__assert_fail@plt+0x1d78>
   12d1c:	mvn	r2, #0
   12d20:	mov	r3, #0
   12d24:	str	r2, [sp, #224]	; 0xe0
   12d28:	str	r3, [sp, #228]	; 0xe4
   12d2c:	ldrb	r3, [r0]
   12d30:	cmp	r3, #0
   12d34:	bne	15144 <__assert_fail@plt+0x313c>
   12d38:	mov	r0, sl
   12d3c:	mov	r1, #40	; 0x28
   12d40:	bl	26744 <__assert_fail@plt+0x1473c>
   12d44:	ldr	r3, [sp, #32]
   12d48:	ldr	r2, [r3, #1040]	; 0x410
   12d4c:	cmp	r2, #0
   12d50:	ldrne	fp, [sp, #24]
   12d54:	bne	12d60 <__assert_fail@plt+0xd58>
   12d58:	b	13890 <__assert_fail@plt+0x1888>
   12d5c:	mov	r2, r3
   12d60:	ldr	r3, [r2, #36]	; 0x24
   12d64:	cmp	r3, #0
   12d68:	bne	12d5c <__assert_fail@plt+0xd54>
   12d6c:	add	r2, r2, #36	; 0x24
   12d70:	str	fp, [sp, #24]
   12d74:	mov	r3, #0
   12d78:	str	r0, [r2]
   12d7c:	str	r3, [r0, #36]	; 0x24
   12d80:	b	12428 <__assert_fail@plt+0x420>
   12d84:	mov	r3, #1
   12d88:	str	r3, [sp, #48]	; 0x30
   12d8c:	b	12428 <__assert_fail@plt+0x420>
   12d90:	ldr	r3, [sp, #44]	; 0x2c
   12d94:	cmp	r3, #0
   12d98:	ldr	r3, [pc, #-2208]	; 12500 <__assert_fail@plt+0x4f8>
   12d9c:	mov	fp, r3
   12da0:	beq	12db8 <__assert_fail@plt+0xdb0>
   12da4:	ldr	r0, [sp, #44]	; 0x2c
   12da8:	ldr	r1, [r3]
   12dac:	bl	11ae0 <strcmp@plt>
   12db0:	cmp	r0, #0
   12db4:	bne	14f74 <__assert_fail@plt+0x2f6c>
   12db8:	ldr	r3, [fp]
   12dbc:	str	r3, [sp, #44]	; 0x2c
   12dc0:	b	12428 <__assert_fail@plt+0x420>
   12dc4:	ldr	r3, [sp, #32]
   12dc8:	ldr	r0, [r3, #1152]	; 0x480
   12dcc:	ldr	r3, [pc, #-2260]	; 12500 <__assert_fail@plt+0x4f8>
   12dd0:	cmp	r0, #0
   12dd4:	mov	fp, r3
   12dd8:	beq	12dec <__assert_fail@plt+0xde4>
   12ddc:	ldr	r1, [r3]
   12de0:	bl	11ae0 <strcmp@plt>
   12de4:	cmp	r0, #0
   12de8:	bne	14f60 <__assert_fail@plt+0x2f58>
   12dec:	ldr	r2, [sp, #32]
   12df0:	ldr	r3, [fp]
   12df4:	str	r3, [r2, #1152]	; 0x480
   12df8:	b	12428 <__assert_fail@plt+0x420>
   12dfc:	ldr	r2, [sp, #32]
   12e00:	mov	r3, #1
   12e04:	strb	r3, [r2, #1164]	; 0x48c
   12e08:	b	12428 <__assert_fail@plt+0x420>
   12e0c:	ldr	r3, [pc, #-2324]	; 12500 <__assert_fail@plt+0x4f8>
   12e10:	ldr	r3, [r3]
   12e14:	str	r3, [sp, #36]	; 0x24
   12e18:	b	12428 <__assert_fail@plt+0x420>
   12e1c:	ldr	r3, [pc, #-2340]	; 12500 <__assert_fail@plt+0x4f8>
   12e20:	ldr	r2, [pc, #-2352]	; 124f8 <__assert_fail@plt+0x4f0>
   12e24:	mov	r1, r3
   12e28:	ldr	ip, [sp, #152]	; 0x98
   12e2c:	ldr	r1, [r1]
   12e30:	add	r3, sp, #184	; 0xb8
   12e34:	str	r2, [sp]
   12e38:	mov	r0, r1
   12e3c:	mov	r2, #10
   12e40:	mov	fp, r1
   12e44:	mov	r1, #0
   12e48:	mov	sl, ip
   12e4c:	bl	26b88 <__assert_fail@plt+0x14b80>
   12e50:	add	r1, sp, #400	; 0x190
   12e54:	str	r0, [sp, #76]	; 0x4c
   12e58:	mov	r0, #7
   12e5c:	bl	11c48 <getrlimit64@plt>
   12e60:	ldr	r3, [sp, #76]	; 0x4c
   12e64:	cmp	r0, #0
   12e68:	movne	lr, #17
   12e6c:	ldreq	lr, [sp, #400]	; 0x190
   12e70:	subeq	lr, lr, #3
   12e74:	cmp	r3, #0
   12e78:	beq	12fe0 <__assert_fail@plt+0xfd8>
   12e7c:	ldr	r8, [sp, #76]	; 0x4c
   12e80:	mov	r6, lr
   12e84:	cmp	r8, #1
   12e88:	beq	13000 <__assert_fail@plt+0xff8>
   12e8c:	str	fp, [sp]
   12e90:	mov	r1, sl
   12e94:	mov	r0, r8
   12e98:	ldr	r3, [pc, #-2500]	; 124dc <__assert_fail@plt+0x4d4>
   12e9c:	mov	r2, #4
   12ea0:	bl	26ad8 <__assert_fail@plt+0x14ad0>
   12ea4:	ldr	r3, [pc, #-2508]	; 124e0 <__assert_fail@plt+0x4d8>
   12ea8:	ldr	r0, [pc, #-2508]	; 124e4 <__assert_fail@plt+0x4dc>
   12eac:	ldr	r1, [pc, #-2508]	; 124e8 <__assert_fail@plt+0x4e0>
   12eb0:	ldr	r2, [pc, #-2508]	; 124ec <__assert_fail@plt+0x4e4>
   12eb4:	mov	r4, #0
   12eb8:	ldr	r0, [r0]
   12ebc:	ldr	r3, [r3]
   12ec0:	str	r1, [sp, #4]
   12ec4:	str	r2, [sp]
   12ec8:	str	r4, [sp, #8]
   12ecc:	ldr	r2, [pc, #-2532]	; 124f0 <__assert_fail@plt+0x4e8>
   12ed0:	ldr	r1, [pc, #-2532]	; 124f4 <__assert_fail@plt+0x4ec>
   12ed4:	bl	25ff0 <__assert_fail@plt+0x13fe8>
   12ed8:	mov	r0, r4
   12edc:	bl	11df8 <exit@plt>
   12ee0:	mov	r0, #0
   12ee4:	bl	1bd8c <__assert_fail@plt+0x9d84>
   12ee8:	ldr	r3, [pc, #-2544]	; 12500 <__assert_fail@plt+0x4f8>
   12eec:	ldr	r2, [pc, #-2556]	; 124f8 <__assert_fail@plt+0x4f0>
   12ef0:	mov	r1, r3
   12ef4:	ldr	ip, [sp, #152]	; 0x98
   12ef8:	ldr	r1, [r1]
   12efc:	add	r3, sp, #400	; 0x190
   12f00:	str	r2, [sp]
   12f04:	mov	r0, r1
   12f08:	mov	fp, r1
   12f0c:	mov	r2, #10
   12f10:	mov	r1, #0
   12f14:	mov	sl, ip
   12f18:	bl	26b88 <__assert_fail@plt+0x14b80>
   12f1c:	cmp	r0, #1
   12f20:	beq	130e4 <__assert_fail@plt+0x10dc>
   12f24:	cmp	r0, #0
   12f28:	bne	14ce4 <__assert_fail@plt+0x2cdc>
   12f2c:	add	r3, sp, #400	; 0x190
   12f30:	mov	fp, #0
   12f34:	ldrd	r2, [r3]
   12f38:	mvn	sl, #0
   12f3c:	cmp	r3, fp
   12f40:	cmpeq	r2, sl
   12f44:	bhi	13560 <__assert_fail@plt+0x1558>
   12f48:	orrs	ip, r2, r3
   12f4c:	beq	14cf8 <__assert_fail@plt+0x2cf0>
   12f50:	str	r2, [sp, #52]	; 0x34
   12f54:	b	12428 <__assert_fail@plt+0x420>
   12f58:	ldr	r3, [pc, #-2660]	; 124fc <__assert_fail@plt+0x4f4>
   12f5c:	ldr	r2, [pc, #-2660]	; 12500 <__assert_fail@plt+0x4f8>
   12f60:	ldr	r1, [r3]
   12f64:	ldr	r0, [r2]
   12f68:	sub	r2, r1, #-1073741823	; 0xc0000001
   12f6c:	ldr	r2, [r7, r2, lsl #2]
   12f70:	cmp	r2, r0
   12f74:	bne	12428 <__assert_fail@plt+0x420>
   12f78:	ldr	fp, [sp, #24]
   12f7c:	sub	r2, r2, #1
   12f80:	ldrb	r0, [r2, #1]!
   12f84:	sub	ip, r0, #48	; 0x30
   12f88:	cmp	ip, #9
   12f8c:	bls	12f80 <__assert_fail@plt+0xf78>
   12f90:	cmp	r0, #0
   12f94:	subne	r1, r1, #1
   12f98:	str	fp, [sp, #24]
   12f9c:	str	r1, [r3]
   12fa0:	b	12428 <__assert_fail@plt+0x420>
   12fa4:	ldr	r3, [pc, #-2732]	; 12500 <__assert_fail@plt+0x4f8>
   12fa8:	mov	fp, r3
   12fac:	ldr	r3, [r3]
   12fb0:	str	r3, [sp, #88]	; 0x58
   12fb4:	ldrb	r3, [r3]
   12fb8:	cmp	r3, #43	; 0x2b
   12fbc:	beq	13678 <__assert_fail@plt+0x1670>
   12fc0:	ldr	r3, [fp]
   12fc4:	str	r3, [r4, r5, lsl #2]
   12fc8:	add	r5, r5, #1
   12fcc:	b	12428 <__assert_fail@plt+0x420>
   12fd0:	ldr	ip, [pc, #-2740]	; 12524 <__assert_fail@plt+0x51c>
   12fd4:	mov	r3, #0
   12fd8:	strb	r3, [ip, #4]
   12fdc:	b	12428 <__assert_fail@plt+0x420>
   12fe0:	ldrd	r2, [sp, #184]	; 0xb8
   12fe4:	ldr	ip, [pc, #-2760]	; 12524 <__assert_fail@plt+0x51c>
   12fe8:	mov	r1, #0
   12fec:	cmp	r3, r1
   12ff0:	cmpeq	r2, r2
   12ff4:	str	r2, [ip, #112]	; 0x70
   12ff8:	beq	13858 <__assert_fail@plt+0x1850>
   12ffc:	mov	r6, lr
   13000:	mov	r2, #5
   13004:	ldr	r1, [pc, #-2824]	; 12504 <__assert_fail@plt+0x4fc>
   13008:	mov	r0, #0
   1300c:	bl	11c0c <dcgettext@plt>
   13010:	ldr	r3, [pc, #-2832]	; 12508 <__assert_fail@plt+0x500>
   13014:	mov	r5, r0
   13018:	mov	r0, fp
   1301c:	add	fp, r3, sl, lsl #4
   13020:	ldr	r4, [fp, #368]	; 0x170
   13024:	bl	244f4 <__assert_fail@plt+0x124ec>
   13028:	mov	r1, #0
   1302c:	mov	r2, r5
   13030:	mov	r3, r4
   13034:	str	r0, [sp]
   13038:	mov	r0, r1
   1303c:	bl	11d50 <error@plt>
   13040:	ldr	r1, [pc, #-2876]	; 1250c <__assert_fail@plt+0x504>
   13044:	mov	r2, #5
   13048:	mov	r0, #0
   1304c:	bl	11c0c <dcgettext@plt>
   13050:	add	r1, sp, #296	; 0x128
   13054:	mov	r5, r0
   13058:	mov	r0, r6
   1305c:	bl	1fd20 <__assert_fail@plt+0xdd18>
   13060:	str	r0, [sp]
   13064:	mov	r3, r4
   13068:	mov	r2, r5
   1306c:	mov	r1, #0
   13070:	mov	r0, #2
   13074:	bl	11d50 <error@plt>
   13078:	ldr	r3, [sp, #296]	; 0x128
   1307c:	ldrb	r3, [r3, #-1]
   13080:	sub	r3, r3, #48	; 0x30
   13084:	cmp	r3, #9
   13088:	bls	1352c <__assert_fail@plt+0x1524>
   1308c:	add	r3, sp, #400	; 0x190
   13090:	ldr	ip, [sp, #32]
   13094:	ldrd	r2, [r3]
   13098:	mov	r1, #0
   1309c:	ldr	r0, [ip, #1488]	; 0x5d0
   130a0:	cmp	r1, r3
   130a4:	cmpeq	r0, r2
   130a8:	bhi	12428 <__assert_fail@plt+0x420>
   130ac:	mov	r1, #0
   130b0:	cmp	r3, r1
   130b4:	cmpeq	r2, r2
   130b8:	mov	r0, ip
   130bc:	str	r2, [ip, #1488]	; 0x5d0
   130c0:	bne	1386c <__assert_fail@plt+0x1864>
   130c4:	ldr	ip, [pc, #-2984]	; 12524 <__assert_fail@plt+0x51c>
   130c8:	mov	r3, #18
   130cc:	ldr	r1, [ip, #112]	; 0x70
   130d0:	mul	r3, r3, r1
   130d4:	cmp	r3, r2
   130d8:	movcc	r3, r2
   130dc:	str	r3, [r0, #1488]	; 0x5d0
   130e0:	b	12428 <__assert_fail@plt+0x420>
   130e4:	mvn	r3, #0
   130e8:	str	r3, [sp, #52]	; 0x34
   130ec:	b	12428 <__assert_fail@plt+0x420>
   130f0:	mov	r0, r6
   130f4:	ldr	r1, [sp, #36]	; 0x24
   130f8:	bl	164c8 <__assert_fail@plt+0x44c0>
   130fc:	ldr	r3, [sp, #400]	; 0x190
   13100:	cmp	r3, #0
   13104:	beq	13568 <__assert_fail@plt+0x1560>
   13108:	mov	r0, r9
   1310c:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   13110:	ldr	r9, [sp, #404]	; 0x194
   13114:	ldr	r6, [sp, #400]	; 0x190
   13118:	mov	sl, r9
   1311c:	b	1314c <__assert_fail@plt+0x1144>
   13120:	mov	r8, sl
   13124:	ldr	r7, [sl], #4
   13128:	ldr	r1, [pc, #-3104]	; 12510 <__assert_fail@plt+0x508>
   1312c:	mov	r0, r7
   13130:	bl	11ae0 <strcmp@plt>
   13134:	subs	r3, r0, #0
   13138:	beq	14980 <__assert_fail@plt+0x2978>
   1313c:	ldrb	r7, [r7]
   13140:	cmp	r7, #0
   13144:	beq	14940 <__assert_fail@plt+0x2938>
   13148:	add	r5, r5, #1
   1314c:	cmp	r5, r6
   13150:	bne	13120 <__assert_fail@plt+0x1118>
   13154:	ldr	r3, [sp, #32]
   13158:	ldr	r1, [r3, #1040]	; 0x410
   1315c:	cmp	r1, #0
   13160:	beq	1489c <__assert_fail@plt+0x2894>
   13164:	mov	r3, #0
   13168:	mov	r6, r3
   1316c:	mov	r0, r1
   13170:	bl	1548c <__assert_fail@plt+0x3484>
   13174:	cmp	r0, #0
   13178:	beq	131e0 <__assert_fail@plt+0x11d8>
   1317c:	ldrb	r3, [r1, #31]
   13180:	cmp	r3, #0
   13184:	bne	131e0 <__assert_fail@plt+0x11d8>
   13188:	ldrb	r3, [sp, #286]	; 0x11e
   1318c:	ldrb	r2, [sp, #281]	; 0x119
   13190:	ldrb	r0, [sp, #280]	; 0x118
   13194:	strb	r3, [r1, #30]
   13198:	ldrb	r3, [sp, #285]	; 0x11d
   1319c:	strb	r0, [r1, #24]
   131a0:	ldrb	r0, [sp, #282]	; 0x11a
   131a4:	strb	r2, [r1, #25]
   131a8:	ldrb	r2, [sp, #284]	; 0x11c
   131ac:	strb	r0, [r1, #26]
   131b0:	ldrb	r0, [sp, #288]	; 0x120
   131b4:	strb	r2, [r1, #28]
   131b8:	strb	r3, [r1, #29]
   131bc:	ldrb	r2, [sp, #283]	; 0x11b
   131c0:	ldrb	r3, [sp, #287]	; 0x11f
   131c4:	strb	r0, [r1, #32]
   131c8:	strb	r2, [r1, #27]
   131cc:	strb	r3, [r1, #31]
   131d0:	ldr	r2, [sp, #272]	; 0x110
   131d4:	ldr	r3, [sp, #276]	; 0x114
   131d8:	str	r2, [r1, #16]
   131dc:	str	r3, [r1, #20]
   131e0:	ldrb	r3, [r1, #27]
   131e4:	ldr	r1, [r1, #36]	; 0x24
   131e8:	cmp	r1, #0
   131ec:	orr	r6, r6, r3
   131f0:	bne	1316c <__assert_fail@plt+0x1164>
   131f4:	ldr	r3, [sp, #32]
   131f8:	str	r6, [sp, #72]	; 0x48
   131fc:	str	r1, [sp, #28]
   13200:	ldr	r0, [r3, #1040]	; 0x410
   13204:	ldrb	r3, [r0, #28]
   13208:	ldrb	r1, [r0, #26]
   1320c:	b	13218 <__assert_fail@plt+0x1210>
   13210:	ldrb	r3, [r0, #26]
   13214:	ldrb	r1, [r0, #28]
   13218:	ldrb	ip, [r0, #29]
   1321c:	add	r3, r3, r1
   13220:	ldrb	r2, [r0, #32]
   13224:	ldrb	r1, [r0, #27]
   13228:	add	r3, r3, ip
   1322c:	ldrb	ip, [r0, #30]
   13230:	orr	r2, r2, r1
   13234:	ldr	r1, [r0, #16]
   13238:	add	r3, r3, ip
   1323c:	cmp	r1, #0
   13240:	orrne	r2, r2, #1
   13244:	add	r3, r3, r2
   13248:	cmp	r3, #1
   1324c:	bgt	14cc4 <__assert_fail@plt+0x2cbc>
   13250:	ldr	r0, [r0, #36]	; 0x24
   13254:	cmp	r0, #0
   13258:	bne	13210 <__assert_fail@plt+0x1208>
   1325c:	ldr	r3, [sp, #32]
   13260:	ldrb	r3, [r3, #1164]	; 0x48c
   13264:	cmp	r3, #0
   13268:	beq	13488 <__assert_fail@plt+0x1480>
   1326c:	ldr	r3, [sp, #40]	; 0x28
   13270:	cmp	r3, #0
   13274:	cmpeq	fp, #0
   13278:	movne	r3, #1
   1327c:	moveq	r3, #0
   13280:	str	r3, [sp, #16]
   13284:	beq	13898 <__assert_fail@plt+0x1890>
   13288:	ldr	r0, [pc, #-3436]	; 12524 <__assert_fail@plt+0x51c>
   1328c:	cmp	fp, #0
   13290:	moveq	fp, #111	; 0x6f
   13294:	strb	fp, [r0, #116]!	; 0x74
   13298:	bl	15b34 <__assert_fail@plt+0x3b2c>
   1329c:	ldr	r3, [sp, #60]	; 0x3c
   132a0:	ldr	r4, [sp, #100]	; 0x64
   132a4:	cmp	r3, #0
   132a8:	beq	13dec <__assert_fail@plt+0x1de4>
   132ac:	ldr	r6, [pc, #-3472]	; 12524 <__assert_fail@plt+0x51c>
   132b0:	ldr	r3, [r6]
   132b4:	cmp	r3, #256	; 0x100
   132b8:	beq	14f34 <__assert_fail@plt+0x2f2c>
   132bc:	ldr	r2, [sp, #32]
   132c0:	ldr	r2, [r2, #1168]	; 0x490
   132c4:	sub	r3, r2, r3
   132c8:	clz	r3, r3
   132cc:	lsr	r3, r3, #5
   132d0:	str	r3, [sp, #16]
   132d4:	ldr	r3, [sp, #16]
   132d8:	cmp	r3, #0
   132dc:	bne	14eec <__assert_fail@plt+0x2ee4>
   132e0:	ldr	r3, [sp, #16]
   132e4:	str	r3, [sp, #60]	; 0x3c
   132e8:	ldr	r7, [r6]
   132ec:	cmp	r7, #256	; 0x100
   132f0:	beq	14e68 <__assert_fail@plt+0x2e60>
   132f4:	ldr	r3, [sp, #32]
   132f8:	ldrb	r3, [r3, #1172]	; 0x494
   132fc:	cmp	r7, r3
   13300:	beq	14e90 <__assert_fail@plt+0x2e88>
   13304:	cmp	r7, #45	; 0x2d
   13308:	beq	14e28 <__assert_fail@plt+0x2e20>
   1330c:	ldr	r3, [sp, #76]	; 0x4c
   13310:	cmp	r7, #43	; 0x2b
   13314:	movne	r3, #0
   13318:	andeq	r3, r3, #1
   1331c:	cmp	r3, #0
   13320:	beq	13364 <__assert_fail@plt+0x135c>
   13324:	mov	r2, #5
   13328:	ldr	r1, [pc, #-3612]	; 12514 <__assert_fail@plt+0x50c>
   1332c:	mov	r0, #0
   13330:	bl	11c0c <dcgettext@plt>
   13334:	mov	r4, #0
   13338:	mov	r3, #43	; 0x2b
   1333c:	strb	r3, [sp, #116]	; 0x74
   13340:	strb	r4, [sp, #117]	; 0x75
   13344:	mov	r7, r0
   13348:	add	r0, sp, #116	; 0x74
   1334c:	bl	244f4 <__assert_fail@plt+0x124ec>
   13350:	mov	r2, r7
   13354:	mov	r1, r4
   13358:	mov	r3, r0
   1335c:	mov	r0, r4
   13360:	bl	11d50 <error@plt>
   13364:	ldr	r3, [sp, #24]
   13368:	ldr	r2, [sp, #56]	; 0x38
   1336c:	orr	r3, r3, r2
   13370:	tst	r3, #255	; 0xff
   13374:	beq	133a0 <__assert_fail@plt+0x1398>
   13378:	ldr	r3, [sp, #60]	; 0x3c
   1337c:	cmp	r3, #0
   13380:	beq	13e10 <__assert_fail@plt+0x1e08>
   13384:	ldr	r3, [sp, #24]
   13388:	cmp	r3, #0
   1338c:	beq	133a0 <__assert_fail@plt+0x1398>
   13390:	ldr	r3, [sp, #32]
   13394:	ldrb	r3, [r3, #1493]	; 0x5d5
   13398:	cmp	r3, #0
   1339c:	bne	14e04 <__assert_fail@plt+0x2dfc>
   133a0:	ldr	r0, [sp, #36]	; 0x24
   133a4:	bl	1548c <__assert_fail@plt+0x3484>
   133a8:	cmp	r0, #0
   133ac:	beq	13e80 <__assert_fail@plt+0x1e78>
   133b0:	ldrb	r3, [sp, #327]	; 0x147
   133b4:	cmp	r3, #0
   133b8:	beq	13488 <__assert_fail@plt+0x1480>
   133bc:	ldr	r3, [sp, #32]
   133c0:	ldrb	r6, [r3, #1174]	; 0x496
   133c4:	cmp	r6, #0
   133c8:	bne	133d8 <__assert_fail@plt+0x13d0>
   133cc:	ldrb	r6, [r3, #1173]	; 0x495
   133d0:	cmp	r6, #0
   133d4:	beq	1344c <__assert_fail@plt+0x1444>
   133d8:	ldr	r3, [sp, #32]
   133dc:	ldr	r3, [r3, #1040]	; 0x410
   133e0:	cmp	r3, #0
   133e4:	beq	1343c <__assert_fail@plt+0x1434>
   133e8:	add	r4, sp, #184	; 0xb8
   133ec:	mov	r1, r4
   133f0:	ldr	r0, [sp, #36]	; 0x24
   133f4:	bl	15500 <__assert_fail@plt+0x34f8>
   133f8:	mov	r0, r4
   133fc:	bl	11e10 <strlen@plt>
   13400:	mov	r3, #5
   13404:	str	r3, [sp]
   13408:	ldr	r2, [pc, #-3832]	; 12518 <__assert_fail@plt+0x510>
   1340c:	ldr	r1, [pc, #-3832]	; 1251c <__assert_fail@plt+0x514>
   13410:	mov	r3, r0
   13414:	mov	r0, #0
   13418:	bl	11ffc <dcngettext@plt>
   1341c:	mov	r1, #0
   13420:	mov	r3, r4
   13424:	mov	r2, r0
   13428:	mov	r0, r1
   1342c:	bl	11d50 <error@plt>
   13430:	cmp	r6, #0
   13434:	strb	r6, [sp, #327]	; 0x147
   13438:	beq	13488 <__assert_fail@plt+0x1480>
   1343c:	ldr	r3, [sp, #32]
   13440:	ldrb	r3, [r3, #1174]	; 0x496
   13444:	cmp	r3, #0
   13448:	bne	13488 <__assert_fail@plt+0x1480>
   1344c:	ldr	r3, [sp, #32]
   13450:	ldrb	r4, [r3, #1173]	; 0x495
   13454:	cmp	r4, #0
   13458:	bne	13488 <__assert_fail@plt+0x1480>
   1345c:	ldr	r3, [r3, #1040]	; 0x410
   13460:	cmp	r3, #0
   13464:	beq	13488 <__assert_fail@plt+0x1480>
   13468:	mov	r2, #5
   1346c:	ldr	r1, [pc, #-3924]	; 12520 <__assert_fail@plt+0x518>
   13470:	mov	r0, r4
   13474:	bl	11c0c <dcgettext@plt>
   13478:	mov	r1, r4
   1347c:	mov	r2, r0
   13480:	mov	r0, r4
   13484:	bl	11d50 <error@plt>
   13488:	ldr	r2, [sp, #72]	; 0x48
   1348c:	ldrb	r3, [sp, #287]	; 0x11f
   13490:	cmp	r2, #0
   13494:	ldr	r2, [sp, #32]
   13498:	strb	r3, [r2, #1464]	; 0x5b8
   1349c:	bne	13578 <__assert_fail@plt+0x1570>
   134a0:	ldr	r3, [sp, #32]
   134a4:	ldr	r3, [r3, #772]	; 0x304
   134a8:	cmp	r3, #0
   134ac:	beq	135f0 <__assert_fail@plt+0x15e8>
   134b0:	cmp	r5, #0
   134b4:	beq	135cc <__assert_fail@plt+0x15c4>
   134b8:	ldr	r0, [sp, #32]
   134bc:	ldr	r2, [r0, #1488]	; 0x5d0
   134c0:	cmp	r2, #0
   134c4:	beq	134e4 <__assert_fail@plt+0x14dc>
   134c8:	ldr	r1, [pc, #-4012]	; 12524 <__assert_fail@plt+0x51c>
   134cc:	mov	r3, #18
   134d0:	ldr	r1, [r1, #112]	; 0x70
   134d4:	mul	r3, r3, r1
   134d8:	cmp	r3, r2
   134dc:	movcc	r3, r2
   134e0:	str	r3, [r0, #1488]	; 0x5d0
   134e4:	cmp	fp, #0
   134e8:	beq	1360c <__assert_fail@plt+0x1604>
   134ec:	cmp	r5, #1
   134f0:	bls	13878 <__assert_fail@plt+0x1870>
   134f4:	mov	r2, #5
   134f8:	ldr	r1, [pc, #-4056]	; 12528 <__assert_fail@plt+0x520>
   134fc:	mov	r0, #0
   13500:	bl	11c0c <dcgettext@plt>
   13504:	ldr	r1, [r9, #4]
   13508:	mov	r4, r0
   1350c:	mov	r0, #4
   13510:	bl	22b84 <__assert_fail@plt+0x10b7c>
   13514:	mov	r2, r4
   13518:	str	fp, [sp]
   1351c:	mov	r1, #0
   13520:	mov	r3, r0
   13524:	mov	r0, #2
   13528:	bl	11d50 <error@plt>
   1352c:	add	r3, sp, #400	; 0x190
   13530:	ldr	r1, [pc, #3544]	; 14310 <__assert_fail@plt+0x2308>
   13534:	ldrd	r2, [r3]
   13538:	mvn	r0, #0
   1353c:	cmp	r3, r1
   13540:	cmpeq	r2, r0
   13544:	bhi	1386c <__assert_fail@plt+0x1864>
   13548:	lsl	r3, r3, #10
   1354c:	orr	r3, r3, r2, lsr #22
   13550:	lsl	r2, r2, #10
   13554:	str	r3, [sp, #404]	; 0x194
   13558:	str	r2, [sp, #400]	; 0x190
   1355c:	b	1308c <__assert_fail@plt+0x1084>
   13560:	mvn	r2, #0
   13564:	b	12f50 <__assert_fail@plt+0xf48>
   13568:	mov	r2, #5
   1356c:	ldr	r1, [pc, #3488]	; 14314 <__assert_fail@plt+0x230c>
   13570:	mov	r0, r5
   13574:	b	12a10 <__assert_fail@plt+0xa08>
   13578:	mov	r1, #16
   1357c:	ldr	r0, [sp, #44]	; 0x2c
   13580:	bl	246dc <__assert_fail@plt+0x126d4>
   13584:	subs	r4, r0, #0
   13588:	beq	149b8 <__assert_fail@plt+0x29b0>
   1358c:	add	r3, sp, #296	; 0x128
   13590:	mov	r1, r3
   13594:	mov	r2, #16
   13598:	str	r3, [sp, #36]	; 0x24
   1359c:	bl	24844 <__assert_fail@plt+0x1283c>
   135a0:	mov	r0, r4
   135a4:	bl	2499c <__assert_fail@plt+0x12994>
   135a8:	cmp	r0, #0
   135ac:	bne	149a0 <__assert_fail@plt+0x2998>
   135b0:	ldr	r0, [pc, #3424]	; 14318 <__assert_fail@plt+0x2310>
   135b4:	bl	1c920 <__assert_fail@plt+0xa918>
   135b8:	ldr	r0, [sp, #36]	; 0x24
   135bc:	ldr	r2, [pc, #3412]	; 14318 <__assert_fail@plt+0x2310>
   135c0:	mov	r1, #16
   135c4:	bl	1d4cc <__assert_fail@plt+0xb4c4>
   135c8:	b	134a0 <__assert_fail@plt+0x1498>
   135cc:	mov	r0, r9
   135d0:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   135d4:	mov	r0, #4
   135d8:	bl	261d8 <__assert_fail@plt+0x141d0>
   135dc:	ldr	r3, [pc, #3508]	; 14398 <__assert_fail@plt+0x2390>
   135e0:	mov	r5, #1
   135e4:	mov	r9, r0
   135e8:	str	r3, [r0]
   135ec:	b	134b8 <__assert_fail@plt+0x14b0>
   135f0:	ldr	r0, [pc, #3364]	; 1431c <__assert_fail@plt+0x2314>
   135f4:	bl	11d74 <getenv@plt>
   135f8:	ldr	r3, [pc, #3360]	; 14320 <__assert_fail@plt+0x2318>
   135fc:	cmp	r0, #0
   13600:	moveq	r0, r3
   13604:	bl	15c78 <__assert_fail@plt+0x3c70>
   13608:	b	134b0 <__assert_fail@plt+0x14a8>
   1360c:	mov	sl, fp
   13610:	str	r9, [sp, #100]	; 0x64
   13614:	mov	r8, r9
   13618:	ldr	r6, [pc, #3448]	; 14398 <__assert_fail@plt+0x2390>
   1361c:	mov	r7, #4
   13620:	b	13628 <__assert_fail@plt+0x1620>
   13624:	add	sl, sl, #1
   13628:	cmp	r5, sl
   1362c:	beq	13ea4 <__assert_fail@plt+0x1e9c>
   13630:	mov	r4, r8
   13634:	ldr	fp, [r8], #4
   13638:	mov	r1, r6
   1363c:	mov	r0, fp
   13640:	bl	11ae0 <strcmp@plt>
   13644:	cmp	r0, #0
   13648:	beq	13624 <__assert_fail@plt+0x161c>
   1364c:	mov	r0, fp
   13650:	mov	r1, r7
   13654:	bl	11f84 <euidaccess@plt>
   13658:	cmp	r0, #0
   1365c:	beq	13624 <__assert_fail@plt+0x161c>
   13660:	ldr	r1, [pc, #3260]	; 14324 <__assert_fail@plt+0x231c>
   13664:	mov	r2, #5
   13668:	mov	r0, #0
   1366c:	bl	11c0c <dcgettext@plt>
   13670:	ldr	r1, [r4]
   13674:	bl	15c10 <__assert_fail@plt+0x3c08>
   13678:	ldr	r3, [pc, #3240]	; 14328 <__assert_fail@plt+0x2320>
   1367c:	ldr	r2, [r3]
   13680:	cmp	r9, r2
   13684:	beq	13698 <__assert_fail@plt+0x1690>
   13688:	ldr	r2, [r7, r2, lsl #2]
   1368c:	ldrb	r1, [r2]
   13690:	cmp	r1, #45	; 0x2d
   13694:	beq	148cc <__assert_fail@plt+0x28c4>
   13698:	mov	r2, #0
   1369c:	str	r2, [sp, #76]	; 0x4c
   136a0:	ldr	r1, [sp, #56]	; 0x38
   136a4:	ldr	r2, [sp, #76]	; 0x4c
   136a8:	cmp	r1, #0
   136ac:	movne	r2, #0
   136b0:	andeq	r2, r2, #1
   136b4:	ldr	r1, [sp, #28]
   136b8:	orrs	r2, r1, r2
   136bc:	str	r2, [sp, #28]
   136c0:	beq	12fc0 <__assert_fail@plt+0xfb8>
   136c4:	str	r3, [sp, #92]	; 0x5c
   136c8:	add	r3, sp, #216	; 0xd8
   136cc:	mov	r0, r3
   136d0:	mov	r2, #40	; 0x28
   136d4:	mov	r1, #0
   136d8:	mov	sl, r3
   136dc:	bl	11e58 <memset@plt>
   136e0:	ldr	r3, [sp, #88]	; 0x58
   136e4:	mov	r1, sl
   136e8:	add	r0, r3, #1
   136ec:	mov	r2, #0
   136f0:	mvn	r3, #0
   136f4:	str	r3, [sp, #224]	; 0xe0
   136f8:	bl	163d0 <__assert_fail@plt+0x43c8>
   136fc:	cmp	r0, #0
   13700:	beq	14c24 <__assert_fail@plt+0x2c1c>
   13704:	ldrb	r2, [r0]
   13708:	ldr	r3, [sp, #92]	; 0x5c
   1370c:	cmp	r2, #46	; 0x2e
   13710:	beq	14dd0 <__assert_fail@plt+0x2dc8>
   13714:	ldr	r2, [sp, #216]	; 0xd8
   13718:	cmp	r2, #0
   1371c:	bne	1373c <__assert_fail@plt+0x1734>
   13720:	ldr	r2, [sp, #220]	; 0xdc
   13724:	cmp	r2, #0
   13728:	bne	1373c <__assert_fail@plt+0x1734>
   1372c:	mvn	r2, #0
   13730:	str	r2, [sp, #216]	; 0xd8
   13734:	cmp	r0, #0
   13738:	beq	12fc0 <__assert_fail@plt+0xfb8>
   1373c:	mov	r2, #0
   13740:	mov	r1, sl
   13744:	str	r3, [sp, #88]	; 0x58
   13748:	bl	155f8 <__assert_fail@plt+0x35f0>
   1374c:	ldrb	r2, [r0]
   13750:	cmp	r2, #0
   13754:	bne	12fc0 <__assert_fail@plt+0xfb8>
   13758:	ldr	r3, [sp, #76]	; 0x4c
   1375c:	cmp	r3, #0
   13760:	beq	137e8 <__assert_fail@plt+0x17e0>
   13764:	ldr	r3, [sp, #88]	; 0x58
   13768:	ldr	r2, [pc, #3004]	; 1432c <__assert_fail@plt+0x2324>
   1376c:	ldr	r1, [r3]
   13770:	add	r0, r1, #1
   13774:	ldr	r1, [r7, r1, lsl #2]
   13778:	str	r0, [r3]
   1377c:	mov	ip, r1
   13780:	mov	fp, r1
   13784:	add	r0, ip, #1
   13788:	add	r1, sp, #224	; 0xe0
   1378c:	bl	163d0 <__assert_fail@plt+0x43c8>
   13790:	cmp	r0, #0
   13794:	beq	14dbc <__assert_fail@plt+0x2db4>
   13798:	ldrb	r3, [r0]
   1379c:	cmp	r3, #46	; 0x2e
   137a0:	bne	137b4 <__assert_fail@plt+0x17ac>
   137a4:	add	r0, r0, #1
   137a8:	ldr	r2, [pc, #3172]	; 14414 <__assert_fail@plt+0x240c>
   137ac:	add	r1, sp, #228	; 0xe4
   137b0:	bl	163d0 <__assert_fail@plt+0x43c8>
   137b4:	ldr	r3, [sp, #228]	; 0xe4
   137b8:	cmp	r3, #0
   137bc:	bne	137d0 <__assert_fail@plt+0x17c8>
   137c0:	ldr	r3, [sp, #224]	; 0xe0
   137c4:	cmp	r3, #0
   137c8:	subne	r3, r3, #1
   137cc:	strne	r3, [sp, #224]	; 0xe0
   137d0:	mov	r2, #1
   137d4:	mov	r1, sl
   137d8:	bl	155f8 <__assert_fail@plt+0x35f0>
   137dc:	ldrb	r3, [r0]
   137e0:	cmp	r3, #0
   137e4:	bne	14d4c <__assert_fail@plt+0x2d44>
   137e8:	mov	r3, #1
   137ec:	mov	r0, sl
   137f0:	mov	r1, #40	; 0x28
   137f4:	strb	r3, [sp, #249]	; 0xf9
   137f8:	bl	26744 <__assert_fail@plt+0x1473c>
   137fc:	ldr	r3, [sp, #32]
   13800:	ldr	r2, [pc, #2992]	; 143b8 <__assert_fail@plt+0x23b0>
   13804:	ldr	fp, [sp, #24]
   13808:	ldr	r3, [r3, #1040]	; 0x410
   1380c:	cmp	r3, #0
   13810:	beq	15134 <__assert_fail@plt+0x312c>
   13814:	add	r2, r3, #36	; 0x24
   13818:	ldr	r3, [r3, #36]	; 0x24
   1381c:	b	1380c <__assert_fail@plt+0x1804>
   13820:	ldr	r3, [sp, #296]	; 0x128
   13824:	ldrb	r2, [r3, #-1]
   13828:	sub	r2, r2, #48	; 0x30
   1382c:	cmp	r2, #9
   13830:	bhi	12bc0 <__assert_fail@plt+0xbb8>
   13834:	ldrb	r2, [r3, #1]
   13838:	cmp	r2, #0
   1383c:	bne	12bc0 <__assert_fail@plt+0xbb8>
   13840:	ldrb	r3, [r3]
   13844:	cmp	r3, #37	; 0x25
   13848:	beq	14d0c <__assert_fail@plt+0x2d04>
   1384c:	cmp	r3, #98	; 0x62
   13850:	beq	1308c <__assert_fail@plt+0x1084>
   13854:	b	12bc0 <__assert_fail@plt+0xbb8>
   13858:	cmp	r2, #1
   1385c:	bls	14d58 <__assert_fail@plt+0x2d50>
   13860:	cmp	r2, lr
   13864:	bhi	12ffc <__assert_fail@plt+0xff4>
   13868:	b	12428 <__assert_fail@plt+0x420>
   1386c:	mov	r8, sl
   13870:	mov	r0, #1
   13874:	b	12bc4 <__assert_fail@plt+0xbbc>
   13878:	ldr	r3, [sp, #40]	; 0x28
   1387c:	cmp	r3, #0
   13880:	beq	14f80 <__assert_fail@plt+0x2f78>
   13884:	ldr	r0, [pc, #2940]	; 14408 <__assert_fail@plt+0x2400>
   13888:	strb	fp, [r0, #128]!	; 0x80
   1388c:	bl	15b34 <__assert_fail@plt+0x3b2c>
   13890:	ldr	r2, [pc, #2848]	; 143b8 <__assert_fail@plt+0x23b0>
   13894:	b	12d74 <__assert_fail@plt+0xd6c>
   13898:	ldr	r3, [sp, #60]	; 0x3c
   1389c:	cmp	r3, #0
   138a0:	beq	14918 <__assert_fail@plt+0x2910>
   138a4:	ldr	r1, [pc, #2692]	; 14330 <__assert_fail@plt+0x2328>
   138a8:	mov	r0, #3
   138ac:	bl	11ee8 <setlocale@plt>
   138b0:	cmp	r0, #0
   138b4:	beq	14918 <__assert_fail@plt+0x2910>
   138b8:	ldr	r3, [sp, #32]
   138bc:	mov	r2, #5
   138c0:	ldrb	r6, [r3, #1305]	; 0x519
   138c4:	cmp	r6, #0
   138c8:	beq	148f4 <__assert_fail@plt+0x28ec>
   138cc:	ldr	r1, [pc, #2656]	; 14334 <__assert_fail@plt+0x232c>
   138d0:	mov	r0, #0
   138d4:	bl	11c0c <dcgettext@plt>
   138d8:	mov	r1, #0
   138dc:	mov	r6, r0
   138e0:	mov	r0, #3
   138e4:	bl	11ee8 <setlocale@plt>
   138e8:	bl	244f4 <__assert_fail@plt+0x124ec>
   138ec:	mov	r1, #0
   138f0:	mov	r2, r6
   138f4:	mov	r3, r0
   138f8:	mov	r0, r1
   138fc:	bl	11d50 <error@plt>
   13900:	add	lr, sp, #256	; 0x100
   13904:	add	r3, sp, #296	; 0x128
   13908:	mov	ip, r3
   1390c:	str	r3, [sp, #36]	; 0x24
   13910:	ldm	lr!, {r0, r1, r2, r3}
   13914:	add	r6, sp, #187	; 0xbb
   13918:	str	r6, [sp, #96]	; 0x60
   1391c:	ldr	r6, [sp, #32]
   13920:	stmia	ip!, {r0, r1, r2, r3}
   13924:	add	r3, sp, #153	; 0x99
   13928:	str	r3, [sp, #92]	; 0x5c
   1392c:	ldm	lr!, {r0, r1, r2, r3}
   13930:	ldr	sl, [r6, #1040]	; 0x410
   13934:	ldr	r6, [sp, #16]
   13938:	stmia	ip!, {r0, r1, r2, r3}
   1393c:	mov	r3, #1
   13940:	ldm	lr, {r0, r1}
   13944:	str	r4, [sp, #100]	; 0x64
   13948:	str	r6, [sp, #76]	; 0x4c
   1394c:	str	r6, [sp, #60]	; 0x3c
   13950:	str	r6, [sp, #56]	; 0x38
   13954:	str	r6, [sp, #24]
   13958:	stm	ip, {r0, r1}
   1395c:	mov	r4, r3
   13960:	b	13a80 <__assert_fail@plt+0x1a78>
   13964:	ldr	r1, [sl, #12]
   13968:	cmp	r1, #0
   1396c:	beq	13c70 <__assert_fail@plt+0x1c68>
   13970:	tst	r3, #255	; 0xff
   13974:	beq	13ce8 <__assert_fail@plt+0x1ce0>
   13978:	ldr	r3, [sp, #28]
   1397c:	cmp	r3, #0
   13980:	beq	13ce8 <__assert_fail@plt+0x1ce0>
   13984:	ldrb	r3, [sl, #28]
   13988:	ldr	r1, [sp, #312]	; 0x138
   1398c:	cmp	r1, #0
   13990:	beq	139a4 <__assert_fail@plt+0x199c>
   13994:	ldr	r0, [sl, #16]
   13998:	cmp	r1, r0
   1399c:	moveq	r1, #0
   139a0:	streq	r1, [sp, #312]	; 0x138
   139a4:	ldr	r1, [sp, #316]	; 0x13c
   139a8:	cmp	r1, #0
   139ac:	beq	139c0 <__assert_fail@plt+0x19b8>
   139b0:	ldr	r0, [sl, #20]
   139b4:	cmp	r1, r0
   139b8:	moveq	r1, #0
   139bc:	streq	r1, [sp, #316]	; 0x13c
   139c0:	ldrb	r6, [sp, #322]	; 0x142
   139c4:	eor	r2, r2, #1
   139c8:	ldrb	r0, [sl, #24]
   139cc:	and	r6, r6, r2
   139d0:	eor	r3, r3, #1
   139d4:	ldrb	r7, [sl, #25]
   139d8:	ldrb	lr, [sl, #30]
   139dc:	ldrb	ip, [sl, #29]
   139e0:	ldrb	r1, [sl, #27]
   139e4:	ldrb	r2, [sl, #32]
   139e8:	ldrb	r8, [sl, #31]
   139ec:	str	r3, [sp, #88]	; 0x58
   139f0:	ldr	sl, [sl, #36]	; 0x24
   139f4:	ldrb	r3, [sp, #321]	; 0x141
   139f8:	strb	r6, [sp, #322]	; 0x142
   139fc:	ldrb	r6, [sp, #320]	; 0x140
   13a00:	eor	r0, r0, #1
   13a04:	eor	r7, r7, #1
   13a08:	and	r0, r0, r6
   13a0c:	mov	r6, r3
   13a10:	and	r6, r6, r7
   13a14:	strb	r0, [sp, #320]	; 0x140
   13a18:	strb	r6, [sp, #321]	; 0x141
   13a1c:	ldrb	r0, [sp, #326]	; 0x146
   13a20:	ldrb	r6, [sp, #324]	; 0x144
   13a24:	ldr	r3, [sp, #88]	; 0x58
   13a28:	eor	lr, lr, #1
   13a2c:	and	r0, r0, lr
   13a30:	and	r3, r3, r6
   13a34:	ldrb	lr, [sp, #325]	; 0x145
   13a38:	ldrb	r6, [sp, #323]	; 0x143
   13a3c:	eor	ip, ip, #1
   13a40:	eor	r1, r1, #1
   13a44:	and	ip, ip, lr
   13a48:	and	r1, r1, r6
   13a4c:	ldrb	lr, [sp, #328]	; 0x148
   13a50:	ldrb	r6, [sp, #327]	; 0x147
   13a54:	eor	r2, r2, #1
   13a58:	eor	r8, r8, #1
   13a5c:	add	r4, r4, #1
   13a60:	and	r2, r2, lr
   13a64:	and	r6, r6, r8
   13a68:	strb	r0, [sp, #326]	; 0x146
   13a6c:	strb	r3, [sp, #324]	; 0x144
   13a70:	strb	ip, [sp, #325]	; 0x145
   13a74:	strb	r1, [sp, #323]	; 0x143
   13a78:	strb	r2, [sp, #328]	; 0x148
   13a7c:	strb	r6, [sp, #327]	; 0x147
   13a80:	cmp	sl, #0
   13a84:	beq	1329c <__assert_fail@plt+0x1294>
   13a88:	ldrb	r3, [sl, #26]
   13a8c:	cmp	r3, #0
   13a90:	bne	13aa0 <__assert_fail@plt+0x1a98>
   13a94:	ldrh	r3, [sl, #28]
   13a98:	cmp	r3, #0
   13a9c:	beq	13ac0 <__assert_fail@plt+0x1ab8>
   13aa0:	ldrb	r3, [sl, #28]
   13aa4:	ldr	r2, [sp, #56]	; 0x38
   13aa8:	cmp	r3, #0
   13aac:	movne	r2, r3
   13ab0:	ldr	r3, [sp, #24]
   13ab4:	moveq	r3, #1
   13ab8:	str	r2, [sp, #56]	; 0x38
   13abc:	str	r3, [sp, #24]
   13ac0:	ldrb	r3, [sl, #33]	; 0x21
   13ac4:	cmp	r3, #0
   13ac8:	beq	13bfc <__assert_fail@plt+0x1bf4>
   13acc:	ldr	r6, [sl]
   13ad0:	mov	r3, #43	; 0x2b
   13ad4:	cmn	r6, #1
   13ad8:	moveq	r6, #0
   13adc:	mov	r0, r6
   13ae0:	add	r2, sp, #128	; 0x80
   13ae4:	mov	r1, #0
   13ae8:	ldr	r7, [sl, #8]
   13aec:	strh	r3, [sp, #152]	; 0x98
   13af0:	bl	1fd5c <__assert_fail@plt+0xdd54>
   13af4:	mov	r2, #25
   13af8:	mov	r1, r0
   13afc:	ldr	r0, [sp, #92]	; 0x5c
   13b00:	bl	11cf0 <__stpcpy_chk@plt>
   13b04:	ldr	r3, [pc, #2092]	; 14338 <__assert_fail@plt+0x2330>
   13b08:	add	r2, sp, #128	; 0x80
   13b0c:	mov	r1, #0
   13b10:	str	r3, [sp, #184]	; 0xb8
   13b14:	str	r0, [sp, #88]	; 0x58
   13b18:	add	r0, r6, #1
   13b1c:	bl	1fd5c <__assert_fail@plt+0xdd54>
   13b20:	mov	r2, #24
   13b24:	mov	r1, r0
   13b28:	ldr	r0, [sp, #96]	; 0x60
   13b2c:	bl	11cf0 <__stpcpy_chk@plt>
   13b30:	ldr	r2, [sl, #8]
   13b34:	cmn	r2, #1
   13b38:	mov	r6, r0
   13b3c:	beq	13bb4 <__assert_fail@plt+0x1bac>
   13b40:	ldr	r3, [pc, #2036]	; 1433c <__assert_fail@plt+0x2334>
   13b44:	add	r7, r7, #1
   13b48:	mov	r0, r7
   13b4c:	ldrh	r1, [r3]
   13b50:	ldrb	r2, [r3, #2]
   13b54:	ldr	r3, [sp, #88]	; 0x58
   13b58:	mov	r8, r3
   13b5c:	strh	r1, [r3]
   13b60:	strb	r2, [r8, #2]!
   13b64:	mov	r1, #0
   13b68:	add	r2, sp, #128	; 0x80
   13b6c:	bl	1fd5c <__assert_fail@plt+0xdd54>
   13b70:	mov	r1, r0
   13b74:	mov	r0, r8
   13b78:	bl	11d14 <strcpy@plt>
   13b7c:	ldr	r3, [pc, #1980]	; 14340 <__assert_fail@plt+0x2338>
   13b80:	mov	r1, #0
   13b84:	add	r2, sp, #128	; 0x80
   13b88:	ldrh	r3, [r3]
   13b8c:	strh	r3, [r6], #1
   13b90:	ldr	r0, [sl, #12]
   13b94:	cmn	r0, #1
   13b98:	movne	r0, #0
   13b9c:	moveq	r0, #1
   13ba0:	add	r0, r0, r7
   13ba4:	bl	1fd5c <__assert_fail@plt+0xdd54>
   13ba8:	mov	r1, r0
   13bac:	mov	r0, r6
   13bb0:	bl	11d14 <strcpy@plt>
   13bb4:	mov	r2, #5
   13bb8:	ldr	r1, [pc, #1924]	; 14344 <__assert_fail@plt+0x233c>
   13bbc:	mov	r0, #0
   13bc0:	bl	11c0c <dcgettext@plt>
   13bc4:	add	r1, sp, #152	; 0x98
   13bc8:	mov	r6, r0
   13bcc:	mov	r0, #0
   13bd0:	bl	24340 <__assert_fail@plt+0x12338>
   13bd4:	add	r1, sp, #184	; 0xb8
   13bd8:	mov	r7, r0
   13bdc:	mov	r0, #1
   13be0:	bl	24340 <__assert_fail@plt+0x12338>
   13be4:	mov	r1, #0
   13be8:	mov	r3, r7
   13bec:	mov	r2, r6
   13bf0:	str	r0, [sp]
   13bf4:	mov	r0, r1
   13bf8:	bl	11d50 <error@plt>
   13bfc:	ldr	r3, [sl]
   13c00:	ldr	r1, [sl, #8]
   13c04:	cmn	r3, #1
   13c08:	beq	13d70 <__assert_fail@plt+0x1d68>
   13c0c:	cmp	r3, r1
   13c10:	bls	13d70 <__assert_fail@plt+0x1d68>
   13c14:	mov	r2, #5
   13c18:	ldr	r1, [pc, #1832]	; 14348 <__assert_fail@plt+0x2340>
   13c1c:	mov	r0, #0
   13c20:	bl	11c0c <dcgettext@plt>
   13c24:	mov	r1, #0
   13c28:	mov	r3, r4
   13c2c:	mov	r2, r0
   13c30:	mov	r0, r1
   13c34:	bl	11d50 <error@plt>
   13c38:	ldr	r1, [sl, #8]
   13c3c:	mov	r3, #1
   13c40:	ldrb	r2, [sl, #26]
   13c44:	cmp	r2, #0
   13c48:	bne	13c5c <__assert_fail@plt+0x1c54>
   13c4c:	ldrh	r0, [sl, #28]
   13c50:	cmp	r0, #0
   13c54:	ldrbeq	r0, [sl, #30]
   13c58:	beq	13c60 <__assert_fail@plt+0x1c58>
   13c5c:	mov	r0, #1
   13c60:	cmp	r1, #0
   13c64:	ldr	r1, [sp, #28]
   13c68:	orr	r3, r1, r3
   13c6c:	beq	13964 <__assert_fail@plt+0x195c>
   13c70:	tst	r3, #255	; 0xff
   13c74:	bne	13978 <__assert_fail@plt+0x1970>
   13c78:	ldr	r3, [pc, #1928]	; 14408 <__assert_fail@plt+0x2400>
   13c7c:	ldr	r3, [r3]
   13c80:	cmp	r3, #256	; 0x100
   13c84:	bne	13ce8 <__assert_fail@plt+0x1ce0>
   13c88:	ldrb	r3, [sl, #24]
   13c8c:	cmp	r3, #0
   13c90:	bne	13ca8 <__assert_fail@plt+0x1ca0>
   13c94:	cmp	r0, #0
   13c98:	beq	13cc0 <__assert_fail@plt+0x1cb8>
   13c9c:	ldr	r3, [sl, #4]
   13ca0:	cmp	r3, #0
   13ca4:	bne	13cc0 <__assert_fail@plt+0x1cb8>
   13ca8:	ldrb	r3, [sl, #25]
   13cac:	cmp	r3, #0
   13cb0:	bne	13ce8 <__assert_fail@plt+0x1ce0>
   13cb4:	ldr	r3, [sl, #12]
   13cb8:	cmp	r3, #0
   13cbc:	beq	13ce8 <__assert_fail@plt+0x1ce0>
   13cc0:	mov	r2, #5
   13cc4:	ldr	r1, [pc, #1664]	; 1434c <__assert_fail@plt+0x2344>
   13cc8:	mov	r0, #0
   13ccc:	bl	11c0c <dcgettext@plt>
   13cd0:	mov	r1, #0
   13cd4:	mov	r3, r4
   13cd8:	mov	r2, r0
   13cdc:	mov	r0, r1
   13ce0:	bl	11d50 <error@plt>
   13ce4:	ldrb	r2, [sl, #26]
   13ce8:	cmp	r2, #0
   13cec:	bne	13cfc <__assert_fail@plt+0x1cf4>
   13cf0:	ldrh	r3, [sl, #28]
   13cf4:	cmp	r3, #0
   13cf8:	beq	13984 <__assert_fail@plt+0x197c>
   13cfc:	ldr	r3, [sl]
   13d00:	ldr	r1, [sl, #8]
   13d04:	adds	r3, r3, #1
   13d08:	moveq	r3, #1
   13d0c:	cmn	r1, #1
   13d10:	add	r6, r1, #1
   13d14:	movne	r1, #0
   13d18:	moveq	r1, #1
   13d1c:	cmp	r6, r3
   13d20:	movls	r6, r1
   13d24:	orrhi	r6, r1, #1
   13d28:	cmp	r6, #0
   13d2c:	beq	13984 <__assert_fail@plt+0x197c>
   13d30:	mov	r2, #5
   13d34:	ldr	r1, [pc, #1556]	; 14350 <__assert_fail@plt+0x2348>
   13d38:	mov	r0, #0
   13d3c:	bl	11c0c <dcgettext@plt>
   13d40:	mov	r1, #0
   13d44:	mov	r3, r4
   13d48:	mov	r2, r0
   13d4c:	mov	r0, r1
   13d50:	bl	11d50 <error@plt>
   13d54:	ldrb	r3, [sl, #28]
   13d58:	cmp	r3, #0
   13d5c:	strne	r3, [sp, #76]	; 0x4c
   13d60:	ldrbne	r2, [sl, #26]
   13d64:	ldrbeq	r2, [sl, #26]
   13d68:	streq	r6, [sp, #60]	; 0x3c
   13d6c:	b	13988 <__assert_fail@plt+0x1980>
   13d70:	ldr	r3, [sp, #16]
   13d74:	b	13c40 <__assert_fail@plt+0x1c38>
   13d78:	ldr	r0, [sp, #36]	; 0x24
   13d7c:	bl	164a4 <__assert_fail@plt+0x449c>
   13d80:	add	r0, r0, #1
   13d84:	ldr	r2, [pc, #1480]	; 14354 <__assert_fail@plt+0x234c>
   13d88:	add	r1, sp, #224	; 0xe0
   13d8c:	bl	163d0 <__assert_fail@plt+0x43c8>
   13d90:	ldr	r3, [sp, #224]	; 0xe0
   13d94:	cmp	r3, #0
   13d98:	sub	r3, r3, #1
   13d9c:	str	r3, [sp, #224]	; 0xe0
   13da0:	beq	15150 <__assert_fail@plt+0x3148>
   13da4:	ldrb	r3, [r0]
   13da8:	cmp	r3, #46	; 0x2e
   13dac:	beq	1515c <__assert_fail@plt+0x3154>
   13db0:	mov	r2, #1
   13db4:	mov	r1, sl
   13db8:	bl	155f8 <__assert_fail@plt+0x35f0>
   13dbc:	b	12d2c <__assert_fail@plt+0xd24>
   13dc0:	add	r0, r0, #1
   13dc4:	ldr	r2, [pc, #1608]	; 14414 <__assert_fail@plt+0x240c>
   13dc8:	add	r1, sp, #220	; 0xdc
   13dcc:	bl	163d0 <__assert_fail@plt+0x43c8>
   13dd0:	ldr	r3, [sp, #220]	; 0xdc
   13dd4:	cmp	r3, #0
   13dd8:	sub	r3, r3, #1
   13ddc:	str	r3, [sp, #220]	; 0xdc
   13de0:	beq	14cb0 <__assert_fail@plt+0x2ca8>
   13de4:	ldr	r3, [sp, #216]	; 0xd8
   13de8:	b	12cec <__assert_fail@plt+0xce4>
   13dec:	ldr	r3, [sp, #76]	; 0x4c
   13df0:	cmp	r3, #0
   13df4:	bne	14d04 <__assert_fail@plt+0x2cfc>
   13df8:	ldr	r3, [sp, #24]
   13dfc:	ldr	r2, [sp, #56]	; 0x38
   13e00:	orr	r3, r3, r2
   13e04:	tst	r3, #255	; 0xff
   13e08:	ldrne	r6, [pc, #1528]	; 14408 <__assert_fail@plt+0x2400>
   13e0c:	beq	133a0 <__assert_fail@plt+0x1398>
   13e10:	mov	r2, #5
   13e14:	ldr	r1, [pc, #1340]	; 14358 <__assert_fail@plt+0x2350>
   13e18:	mov	r0, #0
   13e1c:	bl	11c0c <dcgettext@plt>
   13e20:	ldr	r3, [sp, #32]
   13e24:	ldrb	r7, [r3, #1172]	; 0x494
   13e28:	ldr	r3, [r6]
   13e2c:	cmp	r7, r3
   13e30:	ldreq	r8, [pc, #1272]	; 14330 <__assert_fail@plt+0x2328>
   13e34:	mov	r4, r0
   13e38:	beq	13e50 <__assert_fail@plt+0x1e48>
   13e3c:	mov	r2, #5
   13e40:	ldr	r1, [pc, #1300]	; 1435c <__assert_fail@plt+0x2354>
   13e44:	mov	r0, #0
   13e48:	bl	11c0c <dcgettext@plt>
   13e4c:	mov	r8, r0
   13e50:	mov	r6, #0
   13e54:	add	r0, sp, #112	; 0x70
   13e58:	strb	r7, [sp, #112]	; 0x70
   13e5c:	strb	r6, [sp, #113]	; 0x71
   13e60:	bl	244f4 <__assert_fail@plt+0x124ec>
   13e64:	mov	r3, r8
   13e68:	mov	r2, r4
   13e6c:	mov	r1, r6
   13e70:	str	r0, [sp]
   13e74:	mov	r0, r6
   13e78:	bl	11d50 <error@plt>
   13e7c:	b	13384 <__assert_fail@plt+0x137c>
   13e80:	ldr	r2, [sp, #32]
   13e84:	ldrb	r6, [sp, #327]	; 0x147
   13e88:	ldrb	r3, [r2, #1174]	; 0x496
   13e8c:	cmp	r3, #0
   13e90:	bne	133e8 <__assert_fail@plt+0x13e0>
   13e94:	ldrb	r3, [r2, #1173]	; 0x495
   13e98:	cmp	r3, #0
   13e9c:	strbeq	r3, [sp, #327]	; 0x147
   13ea0:	b	133e8 <__assert_fail@plt+0x13e0>
   13ea4:	ldr	r3, [sp, #40]	; 0x28
   13ea8:	str	sl, [sp, #36]	; 0x24
   13eac:	cmp	r3, #0
   13eb0:	beq	13edc <__assert_fail@plt+0x1ed4>
   13eb4:	mov	r0, r3
   13eb8:	ldr	r2, [pc, #1184]	; 14360 <__assert_fail@plt+0x2358>
   13ebc:	ldr	r1, [pc, #1184]	; 14364 <__assert_fail@plt+0x235c>
   13ec0:	bl	11d5c <open64@plt>
   13ec4:	subs	r3, r0, #0
   13ec8:	blt	14b14 <__assert_fail@plt+0x2b0c>
   13ecc:	cmp	r3, #1
   13ed0:	beq	13edc <__assert_fail@plt+0x1ed4>
   13ed4:	mov	r1, #1
   13ed8:	bl	16538 <__assert_fail@plt+0x4530>
   13edc:	ldr	r3, [sp, #48]	; 0x30
   13ee0:	cmp	r3, #0
   13ee4:	bne	14ae8 <__assert_fail@plt+0x2ae0>
   13ee8:	ldr	r3, [sp, #52]	; 0x34
   13eec:	cmp	r3, #0
   13ef0:	beq	14acc <__assert_fail@plt+0x2ac4>
   13ef4:	ldr	r3, [pc, #1132]	; 14368 <__assert_fail@plt+0x2360>
   13ef8:	ldr	r1, [sp, #52]	; 0x34
   13efc:	mov	r2, #144	; 0x90
   13f00:	cmp	r1, r3
   13f04:	movcc	r3, r1
   13f08:	mov	r1, r3
   13f0c:	vldr	d10, [pc, #1004]	; 14300 <__assert_fail@plt+0x22f8>
   13f10:	vldr	d9, [pc, #1008]	; 14308 <__assert_fail@plt+0x2300>
   13f14:	str	r3, [sp, #56]	; 0x38
   13f18:	mul	r2, r2, r1
   13f1c:	lsl	r3, r3, #1
   13f20:	mov	r0, r3
   13f24:	str	r3, [sp, #72]	; 0x48
   13f28:	sub	r0, r0, #1
   13f2c:	mov	r3, #0
   13f30:	str	r0, [sp, #108]	; 0x6c
   13f34:	str	r2, [sp, #104]	; 0x68
   13f38:	str	r3, [sp, #196]	; 0xc4
   13f3c:	str	r3, [sp, #28]
   13f40:	ldr	r3, [sp, #36]	; 0x24
   13f44:	cmp	r3, #0
   13f48:	ldr	r3, [sp, #100]	; 0x64
   13f4c:	str	r3, [sp, #24]
   13f50:	beq	14a64 <__assert_fail@plt+0x2a5c>
   13f54:	ldr	r3, [sp, #100]	; 0x64
   13f58:	ldr	r1, [pc, #1188]	; 14404 <__assert_fail@plt+0x23fc>
   13f5c:	ldr	r2, [r3], #4
   13f60:	mov	r0, r2
   13f64:	str	r3, [sp, #100]	; 0x64
   13f68:	str	r2, [sp, #60]	; 0x3c
   13f6c:	bl	172fc <__assert_fail@plt+0x52f4>
   13f70:	subs	r3, r0, #0
   13f74:	str	r3, [sp, #44]	; 0x2c
   13f78:	beq	14cbc <__assert_fail@plt+0x2cb4>
   13f7c:	ldr	r3, [sp, #56]	; 0x38
   13f80:	cmp	r3, #1
   13f84:	bls	1486c <__assert_fail@plt+0x2864>
   13f88:	mov	r3, #1
   13f8c:	mov	r2, r3
   13f90:	ldr	r1, [sp, #56]	; 0x38
   13f94:	lsl	r2, r2, #1
   13f98:	cmp	r1, r2
   13f9c:	add	r3, r3, #1
   13fa0:	bhi	13f90 <__assert_fail@plt+0x1f88>
   13fa4:	lsl	r3, r3, #4
   13fa8:	str	r3, [sp, #76]	; 0x4c
   13fac:	ldr	r9, [sp, #196]	; 0xc4
   13fb0:	cmp	r9, #0
   13fb4:	beq	145d4 <__assert_fail@plt+0x25cc>
   13fb8:	ldr	r2, [sp, #36]	; 0x24
   13fbc:	mov	r3, #0
   13fc0:	sub	r2, r2, #1
   13fc4:	strb	r3, [sp, #208]	; 0xd0
   13fc8:	add	r3, sp, #184	; 0xb8
   13fcc:	str	r2, [sp, #36]	; 0x24
   13fd0:	str	r3, [sp, #96]	; 0x60
   13fd4:	ldr	r2, [sp, #60]	; 0x3c
   13fd8:	ldr	r1, [sp, #44]	; 0x2c
   13fdc:	ldr	r0, [sp, #96]	; 0x60
   13fe0:	bl	1607c <__assert_fail@plt+0x4074>
   13fe4:	cmp	r0, #0
   13fe8:	beq	14570 <__assert_fail@plt+0x2568>
   13fec:	ldrb	r3, [sp, #208]	; 0xd0
   13ff0:	cmp	r3, #0
   13ff4:	str	r3, [sp, #24]
   13ff8:	beq	142c4 <__assert_fail@plt+0x22bc>
   13ffc:	ldr	r3, [sp, #36]	; 0x24
   14000:	cmp	r3, #0
   14004:	beq	1402c <__assert_fail@plt+0x2024>
   14008:	add	r1, sp, #188	; 0xbc
   1400c:	ldr	r0, [sp, #76]	; 0x4c
   14010:	ldm	r1, {r1, r2, r3}
   14014:	mul	r2, r2, r0
   14018:	sub	r3, r3, r1
   1401c:	sub	r3, r3, r2
   14020:	add	r2, r0, #1
   14024:	cmp	r2, r3
   14028:	bcc	1456c <__assert_fail@plt+0x2564>
   1402c:	ldr	r1, [sp, #184]	; 0xb8
   14030:	ldr	r2, [sp, #196]	; 0xc4
   14034:	ldr	r3, [sp, #36]	; 0x24
   14038:	add	r2, r1, r2
   1403c:	ldr	r0, [sp, #28]
   14040:	str	r2, [sp, #16]
   14044:	ldr	r2, [sp, #32]
   14048:	orrs	r3, r3, r0
   1404c:	mov	r3, #0
   14050:	str	r3, [r2, #1468]	; 0x5bc
   14054:	bne	14064 <__assert_fail@plt+0x205c>
   14058:	ldr	r4, [sp, #200]	; 0xc8
   1405c:	cmp	r4, #0
   14060:	beq	14500 <__assert_fail@plt+0x24f8>
   14064:	add	r0, sp, #152	; 0x98
   14068:	bl	1a5d4 <__assert_fail@plt+0x85cc>
   1406c:	ldr	r3, [sp, #28]
   14070:	add	r3, r3, #1
   14074:	str	r3, [sp, #28]
   14078:	ldr	r3, [sp, #48]	; 0x30
   1407c:	str	r3, [sp, #24]
   14080:	add	r3, r0, #9
   14084:	str	r3, [sp, #52]	; 0x34
   14088:	ldr	r3, [sp, #192]	; 0xc0
   1408c:	cmp	r3, #1
   14090:	bls	14434 <__assert_fail@plt+0x242c>
   14094:	ldr	r1, [sp, #72]	; 0x48
   14098:	ldr	r0, [pc, #716]	; 1436c <__assert_fail@plt+0x2364>
   1409c:	bl	1fa9c <__assert_fail@plt+0xda94>
   140a0:	mov	r1, #0
   140a4:	mov	r4, r1
   140a8:	mov	r8, r1
   140ac:	ldr	r6, [sp, #56]	; 0x38
   140b0:	ldr	r5, [sp, #16]
   140b4:	str	r0, [sp, #296]	; 0x128
   140b8:	add	r0, sp, #300	; 0x12c
   140bc:	bl	11b94 <pthread_mutex_init@plt>
   140c0:	mov	r1, r4
   140c4:	add	r0, sp, #328	; 0x148
   140c8:	bl	11c18 <pthread_cond_init@plt>
   140cc:	ldr	r0, [sp, #104]	; 0x68
   140d0:	ldr	sl, [sp, #192]	; 0xc0
   140d4:	bl	261d8 <__assert_fail@plt+0x141d0>
   140d8:	mov	r1, r4
   140dc:	lsl	r9, sl, #4
   140e0:	rsb	r9, r9, #0
   140e4:	mov	r7, r0
   140e8:	add	r0, r0, #48	; 0x30
   140ec:	str	r4, [r7, #12]
   140f0:	str	r4, [r7, #8]
   140f4:	str	r4, [r7, #4]
   140f8:	str	r4, [r7]
   140fc:	str	r4, [r7, #16]
   14100:	str	r4, [r7, #28]
   14104:	str	r4, [r7, #40]	; 0x28
   14108:	strb	r4, [r7, #44]	; 0x2c
   1410c:	str	sl, [r7, #24]
   14110:	str	sl, [r7, #20]
   14114:	add	r4, r7, #72	; 0x48
   14118:	str	r0, [sp, #92]	; 0x5c
   1411c:	str	r4, [sp, #88]	; 0x58
   14120:	bl	11b94 <pthread_mutex_init@plt>
   14124:	mov	r3, r7
   14128:	b	14160 <__assert_fail@plt+0x2158>
   1412c:	lsr	ip, r6, #1
   14130:	mov	r3, #1
   14134:	str	r1, [r4, #32]
   14138:	mov	r0, r4
   1413c:	str	r3, [sp, #4]
   14140:	mov	r2, fp
   14144:	mov	r3, ip
   14148:	str	sl, [sp]
   1414c:	sub	r6, r6, ip
   14150:	bl	19a7c <__assert_fail@plt+0x7a74>
   14154:	mov	r3, r4
   14158:	str	r0, [r4, #36]	; 0x24
   1415c:	mov	r4, r0
   14160:	ldr	r1, [r3, #24]
   14164:	ldr	r2, [r3, #40]	; 0x28
   14168:	add	fp, r5, r9
   1416c:	lsr	r0, r1, #1
   14170:	sub	r1, r1, r0
   14174:	sub	r5, fp, r0, lsl #4
   14178:	add	r2, r2, #1
   1417c:	str	r3, [r4, #28]
   14180:	add	r3, r3, #12
   14184:	str	r1, [r4, #24]
   14188:	str	r0, [r4, #20]
   1418c:	mov	r1, #0
   14190:	str	fp, [r4, #8]
   14194:	str	fp, [r4]
   14198:	strb	r8, [r4, #44]	; 0x2c
   1419c:	str	r5, [r4, #12]
   141a0:	str	r5, [r4, #4]
   141a4:	str	r2, [r4, #40]	; 0x28
   141a8:	str	r3, [r4, #16]
   141ac:	add	r0, r4, #48	; 0x30
   141b0:	bl	11b94 <pthread_mutex_init@plt>
   141b4:	cmp	r6, #1
   141b8:	add	r1, r4, #72	; 0x48
   141bc:	bhi	1412c <__assert_fail@plt+0x2124>
   141c0:	ldr	r1, [sp, #52]	; 0x34
   141c4:	ldr	r2, [sp, #152]	; 0x98
   141c8:	str	r8, [r4, #32]
   141cc:	str	r8, [r4, #36]	; 0x24
   141d0:	str	r1, [sp, #8]
   141d4:	add	r1, sp, #296	; 0x128
   141d8:	ldr	r3, [sp, #88]	; 0x58
   141dc:	str	r1, [sp]
   141e0:	str	r2, [sp, #4]
   141e4:	ldr	r0, [sp, #16]
   141e8:	ldr	r2, [sp, #192]	; 0xc0
   141ec:	ldr	r1, [sp, #56]	; 0x38
   141f0:	bl	18c1c <__assert_fail@plt+0x6c14>
   141f4:	ldr	r3, [sp, #72]	; 0x48
   141f8:	cmp	r3, #0
   141fc:	ldrne	r4, [sp, #92]	; 0x5c
   14200:	ldrne	r5, [sp, #108]	; 0x6c
   14204:	beq	14220 <__assert_fail@plt+0x2218>
   14208:	mov	r0, r4
   1420c:	sub	r5, r5, #1
   14210:	bl	11b10 <pthread_mutex_destroy@plt>
   14214:	cmn	r5, #1
   14218:	add	r4, r4, #72	; 0x48
   1421c:	bne	14208 <__assert_fail@plt+0x2200>
   14220:	mov	r0, r7
   14224:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   14228:	ldr	r0, [sp, #296]	; 0x128
   1422c:	bl	1faf4 <__assert_fail@plt+0xdaec>
   14230:	add	r0, sp, #328	; 0x148
   14234:	bl	11c84 <pthread_cond_destroy@plt>
   14238:	add	r0, sp, #300	; 0x12c
   1423c:	bl	11b10 <pthread_mutex_destroy@plt>
   14240:	ldr	r4, [sp, #152]	; 0x98
   14244:	mov	r0, r4
   14248:	bl	11e88 <fileno@plt>
   1424c:	cmp	r0, #0
   14250:	beq	14428 <__assert_fail@plt+0x2420>
   14254:	cmp	r0, #1
   14258:	bne	142e4 <__assert_fail@plt+0x22dc>
   1425c:	mov	r0, r4
   14260:	bl	11c90 <fflush_unlocked@plt>
   14264:	cmp	r0, #0
   14268:	bne	149dc <__assert_fail@plt+0x29d4>
   1426c:	ldr	r3, [sp, #24]
   14270:	cmp	r3, #0
   14274:	beq	13fd4 <__assert_fail@plt+0x1fcc>
   14278:	ldr	r0, [sp, #184]	; 0xb8
   1427c:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   14280:	ldr	r4, [sp, #32]
   14284:	b	1428c <__assert_fail@plt+0x2284>
   14288:	bl	16620 <__assert_fail@plt+0x4618>
   1428c:	ldr	r3, [r4, #1160]	; 0x488
   14290:	cmp	r3, #0
   14294:	bgt	14288 <__assert_fail@plt+0x2280>
   14298:	ldr	r3, [sp, #32]
   1429c:	ldrb	r3, [r3, #1304]	; 0x518
   142a0:	cmp	r3, #0
   142a4:	beq	142bc <__assert_fail@plt+0x22b4>
   142a8:	ldr	r3, [pc, #192]	; 14370 <__assert_fail@plt+0x2368>
   142ac:	ldr	r0, [r3]
   142b0:	bl	1d95c <__assert_fail@plt+0xb954>
   142b4:	cmn	r0, #1
   142b8:	beq	149f4 <__assert_fail@plt+0x29ec>
   142bc:	mov	r0, #0
   142c0:	bl	11df8 <exit@plt>
   142c4:	ldr	r2, [sp, #184]	; 0xb8
   142c8:	ldr	r3, [sp, #196]	; 0xc4
   142cc:	ldr	r1, [sp, #32]
   142d0:	ldr	r0, [sp, #24]
   142d4:	add	r3, r2, r3
   142d8:	str	r0, [r1, #1468]	; 0x5bc
   142dc:	str	r3, [sp, #16]
   142e0:	b	14064 <__assert_fail@plt+0x205c>
   142e4:	mov	r0, r4
   142e8:	bl	1d95c <__assert_fail@plt+0xb954>
   142ec:	cmp	r0, #0
   142f0:	beq	1426c <__assert_fail@plt+0x2264>
   142f4:	ldr	r0, [sp, #52]	; 0x34
   142f8:	bl	12018 <__assert_fail@plt+0x10>
   142fc:	nop			; (mov r0, r0)
   14300:	andeq	r0, r0, r0
   14304:	svccc	0x00c00000
   14308:	andeq	r0, r0, r0
   1430c:	svccc	0x00e80000
   14310:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   14314:			; <UNDEFINED> instruction: 0x0002a9b8
   14318:	andeq	ip, r3, r4, lsl #16
   1431c:	ldrdeq	sl, [r2], -r8
   14320:	andeq	sl, r2, r8, ror r1
   14324:	andeq	sl, r2, r0, lsr sp
   14328:	andeq	ip, r3, r8, asr #5
   1432c:	andeq	sl, r2, ip, lsl #13
   14330:	andeq	r9, r2, r8, asr fp
   14334:	andeq	sl, r2, r4, ror #19
   14338:	eoreq	r6, r0, sp, lsr #22
   1433c:	andeq	sl, r2, ip, asr #20
   14340:	andeq	sl, r2, r0, asr sl
   14344:	andeq	sl, r2, r4, asr sl
   14348:	andeq	sl, r2, r8, asr #26
   1434c:	andeq	sl, r2, r4, lsl #21
   14350:	andeq	sl, r2, ip, asr #21
   14354:	andeq	sl, r2, r4, ror r7
   14358:	andeq	sl, r2, ip, ror #23
   1435c:	andeq	sl, r2, r0, lsr #24
   14360:			; <UNDEFINED> instruction: 0x000001b6
   14364:	andeq	r0, r8, r1, asr #32
   14368:	biceq	r1, r7, r1, ror ip
   1436c:	andeq	r6, r1, ip, lsl #7
   14370:	ldrdeq	ip, [r3], -r8
   14374:	andeq	ip, r3, r4, lsr #17
   14378:	muleq	r3, r8, r8
   1437c:	andeq	sl, r2, r4, lsl sl
   14380:	andeq	sl, r2, ip, asr #19
   14384:	andeq	r9, r2, ip, ror #8
   14388:	muleq	r2, r0, r9
   1438c:	andeq	sl, r2, r0, asr r9
   14390:	andeq	sl, r2, r8, asr r6
   14394:	andeq	r9, r2, r4, asr #7
   14398:	andeq	r9, r2, r0, ror r4
   1439c:	ldrdeq	r9, [r2], -r4
   143a0:			; <UNDEFINED> instruction: 0x000293b8
   143a4:	muleq	r2, r4, r8
   143a8:	andeq	sl, r2, ip, ror r8
   143ac:	andeq	sl, r2, ip, ror #16
   143b0:	andeq	sl, r2, r8, lsl r8
   143b4:	andeq	sl, r2, ip, lsr sp
   143b8:	strdeq	ip, [r3], -r8
   143bc:	andeq	sl, r2, r8, asr r7
   143c0:	ldrdeq	r9, [r2], -r0
   143c4:	andeq	sl, r2, r8, lsr #17
   143c8:	ldrdeq	sl, [r2], -ip
   143cc:	andeq	r8, r2, r0, ror #30
   143d0:	strdeq	sl, [r2], -r8
   143d4:	andeq	sl, r2, r4, lsl r8
   143d8:	andeq	r9, r2, r0, ror #5
   143dc:	andeq	r1, r0, r1, ror #2
   143e0:	andeq	r9, r2, r4, ror r4
   143e4:	andeq	sl, r2, r4, lsr #17
   143e8:	andeq	sl, r2, r8, lsr #24
   143ec:	andeq	sl, r2, r8, ror fp
   143f0:	andeq	sl, r2, ip, lsr fp
   143f4:	strdeq	sl, [r2], -ip
   143f8:	strdeq	sl, [r2], -r8
   143fc:	strdeq	sl, [r2], -r4
   14400:	andeq	sl, r2, r8, lsr r8
   14404:	andeq	r9, r2, ip, ror #10
   14408:	andeq	ip, r3, r8, ror #3
   1440c:	andeq	sl, r2, r4, asr #13
   14410:	andeq	sl, r2, r0, asr #14
   14414:	andeq	sl, r2, r8, lsr #13
   14418:	ldrdeq	ip, [r3], -r0
   1441c:	andeq	sl, r2, r8, lsl #26
   14420:	ldrdeq	ip, [r3], -r0
   14424:	andeq	sl, r2, r0, lsr #26
   14428:	mov	r0, r4
   1442c:	bl	11f48 <clearerr_unlocked@plt>
   14430:	b	1426c <__assert_fail@plt+0x2264>
   14434:	ldr	r2, [sp, #32]
   14438:	ldr	r1, [sp, #16]
   1443c:	ldr	r7, [sp, #152]	; 0x98
   14440:	ldrb	r3, [r2, #1173]	; 0x495
   14444:	sub	r4, r1, #16
   14448:	cmp	r3, #0
   1444c:	beq	144ec <__assert_fail@plt+0x24e4>
   14450:	ldr	r3, [r2, #1468]	; 0x5bc
   14454:	cmp	r3, #0
   14458:	beq	144dc <__assert_fail@plt+0x24d4>
   1445c:	ldr	r3, [sp, #32]
   14460:	ldr	r3, [r3, #1040]	; 0x410
   14464:	cmp	r3, #0
   14468:	beq	1449c <__assert_fail@plt+0x2494>
   1446c:	ldr	r1, [pc, #-256]	; 14374 <__assert_fail@plt+0x236c>
   14470:	mov	r0, r4
   14474:	bl	17478 <__assert_fail@plt+0x5470>
   14478:	cmp	r0, #0
   1447c:	bne	144dc <__assert_fail@plt+0x24d4>
   14480:	ldr	r2, [sp, #32]
   14484:	ldrb	r3, [r2, #1173]	; 0x495
   14488:	cmp	r3, #0
   1448c:	bne	14240 <__assert_fail@plt+0x2238>
   14490:	ldrb	r3, [r2, #1174]	; 0x496
   14494:	cmp	r3, #0
   14498:	bne	14240 <__assert_fail@plt+0x2238>
   1449c:	ldr	r3, [sp, #16]
   144a0:	ldr	r1, [r3, #-12]
   144a4:	ldr	r3, [sp, #32]
   144a8:	subs	r6, r1, #1
   144ac:	ldr	r3, [r3, #1472]	; 0x5c0
   144b0:	sub	r5, r3, #1
   144b4:	bne	1454c <__assert_fail@plt+0x2544>
   144b8:	adds	r0, r5, #0
   144bc:	mvnne	r0, #0
   144c0:	ldr	r3, [sp, #32]
   144c4:	ldrb	r3, [r3, #1464]	; 0x5b8
   144c8:	cmp	r3, #0
   144cc:	beq	144d4 <__assert_fail@plt+0x24cc>
   144d0:	rsb	r0, r0, #0
   144d4:	cmp	r0, #0
   144d8:	beq	14240 <__assert_fail@plt+0x2238>
   144dc:	ldm	r4, {r0, r1, r2, r3}
   144e0:	ldr	ip, [pc, #-368]	; 14378 <__assert_fail@plt+0x2370>
   144e4:	add	ip, ip, #12
   144e8:	stm	ip, {r0, r1, r2, r3}
   144ec:	mov	r1, r7
   144f0:	mov	r0, r4
   144f4:	ldr	r2, [sp, #52]	; 0x34
   144f8:	bl	16718 <__assert_fail@plt+0x4710>
   144fc:	b	14240 <__assert_fail@plt+0x2238>
   14500:	ldr	r0, [sp, #44]	; 0x2c
   14504:	bl	11e88 <fileno@plt>
   14508:	cmp	r0, #0
   1450c:	beq	14890 <__assert_fail@plt+0x2888>
   14510:	cmp	r0, #1
   14514:	bne	14878 <__assert_fail@plt+0x2870>
   14518:	ldr	r0, [sp, #44]	; 0x2c
   1451c:	bl	11c90 <fflush_unlocked@plt>
   14520:	cmp	r0, #0
   14524:	bne	14a14 <__assert_fail@plt+0x2a0c>
   14528:	ldr	r0, [sp, #40]	; 0x28
   1452c:	bl	16550 <__assert_fail@plt+0x4548>
   14530:	cmp	r0, #0
   14534:	beq	14a0c <__assert_fail@plt+0x2a04>
   14538:	ldr	r3, [sp, #40]	; 0x28
   1453c:	str	r0, [sp, #152]	; 0x98
   14540:	str	r4, [sp, #28]
   14544:	str	r3, [sp, #52]	; 0x34
   14548:	b	14088 <__assert_fail@plt+0x2080>
   1454c:	cmp	r5, #0
   14550:	bne	14580 <__assert_fail@plt+0x2578>
   14554:	ldr	r3, [sp, #32]
   14558:	ldrb	r3, [r3, #1464]	; 0x5b8
   1455c:	cmp	r3, #0
   14560:	movne	r0, #1
   14564:	bne	144d0 <__assert_fail@plt+0x24c8>
   14568:	b	144dc <__assert_fail@plt+0x24d4>
   1456c:	str	r1, [sp, #200]	; 0xc8
   14570:	ldr	r1, [sp, #60]	; 0x3c
   14574:	ldr	r0, [sp, #44]	; 0x2c
   14578:	bl	164c8 <__assert_fail@plt+0x44c0>
   1457c:	b	13f40 <__assert_fail@plt+0x1f38>
   14580:	ldr	r2, [sp, #32]
   14584:	ldrb	r2, [r2, #1305]	; 0x519
   14588:	cmp	r2, #0
   1458c:	bne	14a4c <__assert_fail@plt+0x2a44>
   14590:	ldr	r3, [sp, #16]
   14594:	ldr	r8, [sp, #32]
   14598:	cmp	r6, r5
   1459c:	movcc	r2, r6
   145a0:	movcs	r2, r5
   145a4:	ldr	r0, [r3, #-16]
   145a8:	ldr	r1, [r8, #1468]	; 0x5bc
   145ac:	bl	11bf4 <memcmp@plt>
   145b0:	cmp	r0, #0
   145b4:	bne	14a38 <__assert_fail@plt+0x2a30>
   145b8:	cmp	r6, r5
   145bc:	bcs	14a2c <__assert_fail@plt+0x2a24>
   145c0:	ldrb	r3, [r8, #1464]	; 0x5b8
   145c4:	cmp	r3, #0
   145c8:	mvnne	r0, #0
   145cc:	bne	144d0 <__assert_fail@plt+0x24c8>
   145d0:	b	144dc <__assert_fail@plt+0x24d4>
   145d4:	ldr	r3, [sp, #76]	; 0x4c
   145d8:	ldr	fp, [pc, #-472]	; 14408 <__assert_fail@plt+0x2400>
   145dc:	add	sl, r3, #1
   145e0:	add	r7, r3, #2
   145e4:	str	sl, [sp, #16]
   145e8:	add	r8, sp, #296	; 0x128
   145ec:	mov	sl, r7
   145f0:	ldr	r7, [sp, #32]
   145f4:	b	14690 <__assert_fail@plt+0x2688>
   145f8:	mov	r2, r8
   145fc:	mov	r0, #3
   14600:	bl	11ca8 <__fxstat64@plt>
   14604:	adds	r0, r0, #0
   14608:	movne	r0, #1
   1460c:	cmp	r0, #0
   14610:	bne	14b94 <__assert_fail@plt+0x2b8c>
   14614:	ldr	r3, [sp, #312]	; 0x138
   14618:	and	r3, r3, #61440	; 0xf000
   1461c:	cmp	r3, #32768	; 0x8000
   14620:	beq	146f4 <__assert_fail@plt+0x26ec>
   14624:	ldr	r3, [r7, #1488]	; 0x5d0
   14628:	cmp	r3, #0
   1462c:	bne	14bb0 <__assert_fail@plt+0x2ba8>
   14630:	ldr	r3, [r7, #1496]	; 0x5d8
   14634:	mov	r4, #131072	; 0x20000
   14638:	cmp	r3, #0
   1463c:	mov	r5, #0
   14640:	beq	14718 <__assert_fail@plt+0x2710>
   14644:	ldr	r3, [sp, #16]
   14648:	mov	r1, r3
   1464c:	mul	r6, r4, r3
   14650:	add	r6, r6, #1
   14654:	mov	r0, r6
   14658:	bl	28518 <_obstack_memory_used@@Base+0x8c>
   1465c:	mov	r1, #0
   14660:	cmp	r5, r1
   14664:	cmpeq	r4, r0
   14668:	bne	14c14 <__assert_fail@plt+0x2c0c>
   1466c:	ldr	r3, [r7, #1496]	; 0x5d8
   14670:	sub	r3, r3, sl
   14674:	cmp	r6, r3
   14678:	bcs	14c14 <__assert_fail@plt+0x2c0c>
   1467c:	ldr	r3, [sp, #36]	; 0x24
   14680:	add	r9, r9, #1
   14684:	cmp	r3, r9
   14688:	add	sl, sl, r6
   1468c:	beq	14c08 <__assert_fail@plt+0x2c00>
   14690:	cmp	r9, #0
   14694:	beq	146d0 <__assert_fail@plt+0x26c8>
   14698:	ldr	r3, [sp, #24]
   1469c:	ldr	r1, [pc, #-780]	; 14398 <__assert_fail@plt+0x2390>
   146a0:	ldr	r4, [r3, r9, lsl #2]
   146a4:	mov	r0, r4
   146a8:	bl	11ae0 <strcmp@plt>
   146ac:	subs	r1, r0, #0
   146b0:	beq	145f8 <__assert_fail@plt+0x25f0>
   146b4:	mov	r1, r4
   146b8:	mov	r2, r8
   146bc:	mov	r0, #3
   146c0:	bl	11fc0 <__xstat64@plt>
   146c4:	adds	r0, r0, #0
   146c8:	movne	r0, #1
   146cc:	b	1460c <__assert_fail@plt+0x2604>
   146d0:	ldr	r0, [sp, #44]	; 0x2c
   146d4:	bl	11e88 <fileno@plt>
   146d8:	mov	r2, r8
   146dc:	mov	r1, r0
   146e0:	mov	r0, #3
   146e4:	bl	11ca8 <__fxstat64@plt>
   146e8:	adds	r0, r0, #0
   146ec:	movne	r0, #1
   146f0:	b	1460c <__assert_fail@plt+0x2604>
   146f4:	ldr	r3, [r7, #1496]	; 0x5d8
   146f8:	add	r2, sp, #344	; 0x158
   146fc:	cmp	r3, #0
   14700:	ldrd	r4, [r2]
   14704:	bne	14644 <__assert_fail@plt+0x263c>
   14708:	ldr	r3, [r7, #1488]	; 0x5d0
   1470c:	cmp	r3, #0
   14710:	str	r3, [r7, #1496]	; 0x5d8
   14714:	bne	14644 <__assert_fail@plt+0x263c>
   14718:	add	r1, sp, #152	; 0x98
   1471c:	mov	r0, #2
   14720:	bl	11c48 <getrlimit64@plt>
   14724:	cmp	r0, #0
   14728:	mvnne	r6, #0
   1472c:	bne	1474c <__assert_fail@plt+0x2744>
   14730:	ldrd	r2, [sp, #152]	; 0x98
   14734:	mov	r1, #0
   14738:	mvn	r0, #1
   1473c:	cmp	r3, r1
   14740:	cmpeq	r2, r0
   14744:	movls	r6, r2
   14748:	mvnhi	r6, #0
   1474c:	add	r1, sp, #152	; 0x98
   14750:	mov	r0, #9
   14754:	bl	11c48 <getrlimit64@plt>
   14758:	cmp	r0, #0
   1475c:	bne	14774 <__assert_fail@plt+0x276c>
   14760:	ldrd	r2, [sp, #152]	; 0x98
   14764:	mov	r1, #0
   14768:	cmp	r3, r1
   1476c:	cmpeq	r2, r6
   14770:	movcc	r6, r2
   14774:	add	r1, sp, #152	; 0x98
   14778:	mov	r0, #5
   1477c:	bl	11c48 <getrlimit64@plt>
   14780:	lsr	r6, r6, #1
   14784:	cmp	r0, #0
   14788:	bne	14804 <__assert_fail@plt+0x27fc>
   1478c:	ldr	r2, [sp, #152]	; 0x98
   14790:	ldr	r3, [sp, #156]	; 0x9c
   14794:	lsr	r2, r2, #4
   14798:	orr	r2, r2, r3, lsl #28
   1479c:	lsr	r3, r3, #4
   147a0:	str	r2, [sp, #64]	; 0x40
   147a4:	str	r3, [sp, #68]	; 0x44
   147a8:	ldrd	r0, [sp, #64]	; 0x40
   147ac:	adds	r2, r0, r0
   147b0:	adc	r3, r1, r1
   147b4:	adds	r0, r0, r2
   147b8:	adc	r1, r1, r3
   147bc:	mov	r3, r1
   147c0:	lsl	r1, r1, #2
   147c4:	orr	r1, r1, r0, lsr #30
   147c8:	str	r1, [sp, #84]	; 0x54
   147cc:	lsl	r1, r0, #2
   147d0:	str	r1, [sp, #80]	; 0x50
   147d4:	mov	r2, r0
   147d8:	ldrd	r0, [sp, #80]	; 0x50
   147dc:	adds	r0, r0, r2
   147e0:	adc	r1, r1, r3
   147e4:	mov	r3, r1
   147e8:	mov	r1, #0
   147ec:	cmp	r3, r1
   147f0:	mov	r2, r0
   147f4:	cmpeq	r2, r6
   147f8:	movcc	r6, #15
   147fc:	ldrcc	r3, [sp, #64]	; 0x40
   14800:	mulcc	r6, r6, r3
   14804:	bl	20308 <__assert_fail@plt+0xe300>
   14808:	vmov.f64	d11, d0
   1480c:	bl	20268 <__assert_fail@plt+0xe260>
   14810:	vmov	s15, r6
   14814:	ldr	r2, [fp, #112]	; 0x70
   14818:	mov	r3, #18
   1481c:	vcvt.f64.u32	d5, s15
   14820:	mul	r3, r3, r2
   14824:	vmul.f64	d7, d0, d10
   14828:	vmul.f64	d0, d0, d9
   1482c:	vcmp.f64	d11, d7
   14830:	vmrs	APSR_nzcv, fpscr
   14834:	vcmpe.f64	d0, d5
   14838:	vmovgt.f64	d7, d11
   1483c:	vmrs	APSR_nzcv, fpscr
   14840:	vcvtmi.u32.f64	s13, d0
   14844:	vcvtmi.f64.u32	d5, s13
   14848:	vmovmi	r6, s13
   1484c:	vcmpe.f64	d5, d7
   14850:	vmrs	APSR_nzcv, fpscr
   14854:	vcvtgt.u32.f64	s15, d7
   14858:	vmovgt	r6, s15
   1485c:	cmp	r3, r6
   14860:	movcs	r6, r3
   14864:	str	r6, [r7, #1496]	; 0x5d8
   14868:	b	14644 <__assert_fail@plt+0x263c>
   1486c:	mov	r3, #24
   14870:	str	r3, [sp, #76]	; 0x4c
   14874:	b	13fac <__assert_fail@plt+0x1fa4>
   14878:	ldr	r0, [sp, #44]	; 0x2c
   1487c:	bl	1d95c <__assert_fail@plt+0xb954>
   14880:	cmp	r0, #0
   14884:	beq	14528 <__assert_fail@plt+0x2520>
   14888:	ldr	r0, [sp, #60]	; 0x3c
   1488c:	bl	12018 <__assert_fail@plt+0x10>
   14890:	ldr	r0, [sp, #44]	; 0x2c
   14894:	bl	11f48 <clearerr_unlocked@plt>
   14898:	b	14528 <__assert_fail@plt+0x2520>
   1489c:	add	r0, sp, #256	; 0x100
   148a0:	bl	1548c <__assert_fail@plt+0x3484>
   148a4:	cmp	r0, #0
   148a8:	beq	14c44 <__assert_fail@plt+0x2c3c>
   148ac:	ldr	r3, [sp, #32]
   148b0:	ldrb	r3, [r3, #1164]	; 0x48c
   148b4:	cmp	r3, #0
   148b8:	bne	148e8 <__assert_fail@plt+0x28e0>
   148bc:	ldrb	r3, [sp, #287]	; 0x11f
   148c0:	ldr	r2, [sp, #32]
   148c4:	strb	r3, [r2, #1464]	; 0x5b8
   148c8:	b	134a0 <__assert_fail@plt+0x1498>
   148cc:	ldrb	r2, [r2, #1]
   148d0:	sub	r2, r2, #48	; 0x30
   148d4:	cmp	r2, #9
   148d8:	movhi	r2, #0
   148dc:	movls	r2, #1
   148e0:	str	r2, [sp, #76]	; 0x4c
   148e4:	b	136a0 <__assert_fail@plt+0x1698>
   148e8:	str	r1, [sp, #28]
   148ec:	str	r1, [sp, #72]	; 0x48
   148f0:	b	1326c <__assert_fail@plt+0x1264>
   148f4:	ldr	r1, [pc, #-1408]	; 1437c <__assert_fail@plt+0x2374>
   148f8:	mov	r0, r6
   148fc:	bl	11c0c <dcgettext@plt>
   14900:	ldr	r2, [pc, #-1412]	; 14384 <__assert_fail@plt+0x237c>
   14904:	mov	r1, r6
   14908:	mov	r3, r0
   1490c:	mov	r0, r6
   14910:	bl	11d50 <error@plt>
   14914:	b	13900 <__assert_fail@plt+0x18f8>
   14918:	mov	r2, #5
   1491c:	ldr	r1, [pc, #-1444]	; 14380 <__assert_fail@plt+0x2378>
   14920:	mov	r0, #0
   14924:	bl	11c0c <dcgettext@plt>
   14928:	mov	r1, #0
   1492c:	ldr	r2, [pc, #-1456]	; 14384 <__assert_fail@plt+0x237c>
   14930:	mov	r3, r0
   14934:	mov	r0, r1
   14938:	bl	11d50 <error@plt>
   1493c:	b	138b8 <__assert_fail@plt+0x18b0>
   14940:	mov	r2, #5
   14944:	ldr	r1, [pc, #-1476]	; 14388 <__assert_fail@plt+0x2380>
   14948:	mov	r0, r7
   1494c:	bl	11c0c <dcgettext@plt>
   14950:	ldr	r2, [sp, #36]	; 0x24
   14954:	mov	r1, #3
   14958:	add	r5, r5, #1
   1495c:	mov	r4, r0
   14960:	mov	r0, r7
   14964:	bl	23600 <__assert_fail@plt+0x115f8>
   14968:	mov	r2, r4
   1496c:	str	r5, [sp]
   14970:	mov	r1, r7
   14974:	mov	r3, r0
   14978:	mov	r0, #2
   1497c:	bl	11d50 <error@plt>
   14980:	mov	r2, #5
   14984:	ldr	r1, [pc, #-1536]	; 1438c <__assert_fail@plt+0x2384>
   14988:	bl	11c0c <dcgettext@plt>
   1498c:	ldr	r1, [r8]
   14990:	mov	r4, r0
   14994:	mov	r0, #4
   14998:	bl	22b84 <__assert_fail@plt+0x10b7c>
   1499c:	b	12a24 <__assert_fail@plt+0xa1c>
   149a0:	ldr	r1, [pc, #-1556]	; 14394 <__assert_fail@plt+0x238c>
   149a4:	mov	r2, #5
   149a8:	mov	r0, #0
   149ac:	bl	11c0c <dcgettext@plt>
   149b0:	ldr	r1, [sp, #44]	; 0x2c
   149b4:	bl	15c10 <__assert_fail@plt+0x3c08>
   149b8:	ldr	r1, [pc, #-1568]	; 143a0 <__assert_fail@plt+0x2398>
   149bc:	mov	r2, #5
   149c0:	bl	11c0c <dcgettext@plt>
   149c4:	ldr	r3, [sp, #44]	; 0x2c
   149c8:	ldr	r1, [pc, #-1600]	; 14390 <__assert_fail@plt+0x2388>
   149cc:	cmp	r3, #0
   149d0:	moveq	r3, r1
   149d4:	mov	r1, r3
   149d8:	bl	15c10 <__assert_fail@plt+0x3c08>
   149dc:	ldr	r1, [pc, #-1608]	; 1439c <__assert_fail@plt+0x2394>
   149e0:	mov	r2, #5
   149e4:	mov	r0, #0
   149e8:	bl	11c0c <dcgettext@plt>
   149ec:	ldr	r1, [sp, #52]	; 0x34
   149f0:	bl	15c10 <__assert_fail@plt+0x3c08>
   149f4:	ldr	r1, [pc, #-1640]	; 14394 <__assert_fail@plt+0x238c>
   149f8:	mov	r2, #5
   149fc:	mov	r0, #0
   14a00:	bl	11c0c <dcgettext@plt>
   14a04:	ldr	r1, [pc, #-1652]	; 14398 <__assert_fail@plt+0x2390>
   14a08:	bl	15c10 <__assert_fail@plt+0x3c08>
   14a0c:	ldr	r0, [sp, #40]	; 0x28
   14a10:	bl	164a4 <__assert_fail@plt+0x449c>
   14a14:	ldr	r1, [pc, #-1664]	; 1439c <__assert_fail@plt+0x2394>
   14a18:	mov	r0, r4
   14a1c:	mov	r2, #5
   14a20:	bl	11c0c <dcgettext@plt>
   14a24:	ldr	r1, [sp, #60]	; 0x3c
   14a28:	bl	15c10 <__assert_fail@plt+0x3c08>
   14a2c:	movne	r0, #1
   14a30:	moveq	r0, #0
   14a34:	b	144c0 <__assert_fail@plt+0x24b8>
   14a38:	ldr	r3, [sp, #32]
   14a3c:	ldrb	r3, [r3, #1464]	; 0x5b8
   14a40:	cmp	r3, #0
   14a44:	bne	144d0 <__assert_fail@plt+0x24c8>
   14a48:	b	144dc <__assert_fail@plt+0x24d4>
   14a4c:	ldr	r2, [sp, #16]
   14a50:	ldr	r0, [r2, #-16]
   14a54:	ldr	r2, [sp, #32]
   14a58:	ldr	r2, [r2, #1468]	; 0x5bc
   14a5c:	bl	2694c <__assert_fail@plt+0x14944>
   14a60:	b	144c0 <__assert_fail@plt+0x24b8>
   14a64:	ldr	r0, [sp, #184]	; 0xb8
   14a68:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   14a6c:	ldr	r3, [sp, #32]
   14a70:	mov	r1, #8
   14a74:	ldr	r0, [sp, #28]
   14a78:	ldr	r4, [r3, #768]	; 0x300
   14a7c:	bl	262bc <__assert_fail@plt+0x142b4>
   14a80:	mov	r5, r0
   14a84:	mov	r3, r0
   14a88:	b	14a9c <__assert_fail@plt+0x2a94>
   14a8c:	add	r2, r4, #9
   14a90:	str	r4, [r3, #-4]
   14a94:	ldr	r4, [r4]
   14a98:	str	r2, [r3, #-8]
   14a9c:	cmp	r4, #0
   14aa0:	add	r3, r3, #8
   14aa4:	bne	14a8c <__assert_fail@plt+0x2a84>
   14aa8:	ldr	r2, [sp, #28]
   14aac:	ldr	r3, [sp, #40]	; 0x28
   14ab0:	mov	r1, r2
   14ab4:	mov	r0, r5
   14ab8:	bl	1b2c0 <__assert_fail@plt+0x92b8>
   14abc:	mov	r0, r5
   14ac0:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   14ac4:	ldr	r4, [sp, #32]
   14ac8:	b	1428c <__assert_fail@plt+0x2284>
   14acc:	mov	r0, #2
   14ad0:	bl	2012c <__assert_fail@plt+0xe124>
   14ad4:	cmp	r0, #8
   14ad8:	movcc	r3, r0
   14adc:	movcs	r3, #8
   14ae0:	str	r3, [sp, #52]	; 0x34
   14ae4:	b	13ef4 <__assert_fail@plt+0x1eec>
   14ae8:	mov	r1, #8
   14aec:	ldr	r0, [sp, #36]	; 0x24
   14af0:	bl	2671c <__assert_fail@plt+0x14714>
   14af4:	mov	r2, #0
   14af8:	ldr	r3, [sp, #36]	; 0x24
   14afc:	cmp	r2, r3
   14b00:	beq	14b2c <__assert_fail@plt+0x2b24>
   14b04:	ldr	r3, [r9, r2, lsl #2]
   14b08:	str	r3, [r0, r2, lsl #3]
   14b0c:	add	r2, r2, #1
   14b10:	b	14af8 <__assert_fail@plt+0x2af0>
   14b14:	ldr	r1, [pc, #-1916]	; 143a0 <__assert_fail@plt+0x2398>
   14b18:	mov	r2, #5
   14b1c:	mov	r0, #0
   14b20:	bl	11c0c <dcgettext@plt>
   14b24:	ldr	r1, [sp, #40]	; 0x28
   14b28:	bl	15c10 <__assert_fail@plt+0x3c08>
   14b2c:	ldr	r3, [sp, #40]	; 0x28
   14b30:	mov	r1, #0
   14b34:	bl	1b2c0 <__assert_fail@plt+0x92b8>
   14b38:	b	14298 <__assert_fail@plt+0x2290>
   14b3c:	ldr	r1, [pc, #-1952]	; 143a4 <__assert_fail@plt+0x239c>
   14b40:	mov	r2, #5
   14b44:	mov	r0, #0
   14b48:	bl	11c0c <dcgettext@plt>
   14b4c:	mov	r1, #0
   14b50:	mov	r2, r0
   14b54:	mov	r0, #2
   14b58:	bl	11d50 <error@plt>
   14b5c:	mov	r2, #5
   14b60:	ldr	r1, [pc, #-1984]	; 143a8 <__assert_fail@plt+0x23a0>
   14b64:	mov	r0, #0
   14b68:	bl	11c0c <dcgettext@plt>
   14b6c:	mov	r4, r0
   14b70:	ldr	r0, [fp]
   14b74:	bl	244f4 <__assert_fail@plt+0x124ec>
   14b78:	b	12a24 <__assert_fail@plt+0xa1c>
   14b7c:	mov	r2, #5
   14b80:	ldr	r1, [pc, #-2012]	; 143ac <__assert_fail@plt+0x23a4>
   14b84:	b	14b44 <__assert_fail@plt+0x2b3c>
   14b88:	mov	r2, #5
   14b8c:	ldr	r1, [pc, #-2020]	; 143b0 <__assert_fail@plt+0x23a8>
   14b90:	b	14b44 <__assert_fail@plt+0x2b3c>
   14b94:	ldr	r1, [pc, #-2024]	; 143b4 <__assert_fail@plt+0x23ac>
   14b98:	mov	r2, #5
   14b9c:	mov	r0, #0
   14ba0:	bl	11c0c <dcgettext@plt>
   14ba4:	ldr	r3, [sp, #24]
   14ba8:	ldr	r1, [r3, r9, lsl #2]
   14bac:	bl	15c10 <__assert_fail@plt+0x3c08>
   14bb0:	ldr	sl, [sp, #16]
   14bb4:	mov	r7, r3
   14bb8:	b	14bc8 <__assert_fail@plt+0x2bc0>
   14bbc:	lsr	r7, r7, #1
   14bc0:	cmp	r7, sl
   14bc4:	bls	14c04 <__assert_fail@plt+0x2bfc>
   14bc8:	bic	r7, r7, #15
   14bcc:	add	r7, r7, #16
   14bd0:	mov	r0, r7
   14bd4:	bl	2799c <__assert_fail@plt+0x15994>
   14bd8:	cmp	r0, #0
   14bdc:	str	r0, [sp, #184]	; 0xb8
   14be0:	beq	14bbc <__assert_fail@plt+0x2bb4>
   14be4:	ldr	r2, [sp, #76]	; 0x4c
   14be8:	mov	r3, #0
   14bec:	str	r2, [sp, #204]	; 0xcc
   14bf0:	str	r7, [sp, #196]	; 0xc4
   14bf4:	str	r3, [sp, #192]	; 0xc0
   14bf8:	str	r3, [sp, #200]	; 0xc8
   14bfc:	str	r3, [sp, #188]	; 0xbc
   14c00:	b	13fb8 <__assert_fail@plt+0x1fb0>
   14c04:	bl	26820 <__assert_fail@plt+0x14818>
   14c08:	mov	r7, sl
   14c0c:	ldr	sl, [sp, #16]
   14c10:	b	14bc8 <__assert_fail@plt+0x2bc0>
   14c14:	ldr	r3, [sp, #32]
   14c18:	ldr	sl, [sp, #16]
   14c1c:	ldr	r3, [r3, #1496]	; 0x5d8
   14c20:	b	14bb4 <__assert_fail@plt+0x2bac>
   14c24:	ldr	r3, [sp, #216]	; 0xd8
   14c28:	cmp	r3, #0
   14c2c:	bne	12fc0 <__assert_fail@plt+0xfb8>
   14c30:	ldr	r3, [sp, #220]	; 0xdc
   14c34:	cmp	r3, #0
   14c38:	mvneq	r3, #0
   14c3c:	streq	r3, [sp, #216]	; 0xd8
   14c40:	b	12fc0 <__assert_fail@plt+0xfb8>
   14c44:	mov	r1, #40	; 0x28
   14c48:	add	r0, sp, #256	; 0x100
   14c4c:	bl	26744 <__assert_fail@plt+0x1473c>
   14c50:	ldr	r3, [sp, #32]
   14c54:	ldr	r1, [pc, #-2212]	; 143b8 <__assert_fail@plt+0x23b0>
   14c58:	ldr	r3, [r3, #1040]	; 0x410
   14c5c:	mov	r2, r0
   14c60:	b	14c6c <__assert_fail@plt+0x2c64>
   14c64:	add	r1, r3, #36	; 0x24
   14c68:	ldr	r3, [r3, #36]	; 0x24
   14c6c:	cmp	r3, #0
   14c70:	bne	14c64 <__assert_fail@plt+0x2c5c>
   14c74:	str	r2, [r1]
   14c78:	ldr	r1, [sp, #32]
   14c7c:	str	r3, [r2, #36]	; 0x24
   14c80:	ldrb	r3, [sp, #283]	; 0x11b
   14c84:	ldr	r0, [r1, #1040]	; 0x410
   14c88:	str	r3, [sp, #72]	; 0x48
   14c8c:	cmp	r0, #0
   14c90:	mov	r3, #1
   14c94:	str	r3, [sp, #28]
   14c98:	bne	13204 <__assert_fail@plt+0x11fc>
   14c9c:	b	1325c <__assert_fail@plt+0x1254>
   14ca0:	mov	r9, r4
   14ca4:	ldr	fp, [sp, #24]
   14ca8:	mov	r4, r8
   14cac:	b	129c4 <__assert_fail@plt+0x9bc>
   14cb0:	ldr	r0, [fp]
   14cb4:	ldr	r1, [pc, #-2304]	; 143bc <__assert_fail@plt+0x23b4>
   14cb8:	bl	15b64 <__assert_fail@plt+0x3b5c>
   14cbc:	ldr	r0, [sp, #60]	; 0x3c
   14cc0:	bl	164a4 <__assert_fail@plt+0x449c>
   14cc4:	mov	r3, #0
   14cc8:	strb	r3, [r0, #31]
   14ccc:	strb	r3, [r0, #25]
   14cd0:	strb	r3, [r0, #24]
   14cd4:	add	r1, sp, #296	; 0x128
   14cd8:	bl	15500 <__assert_fail@plt+0x34f8>
   14cdc:	add	r0, sp, #296	; 0x128
   14ce0:	bl	15b34 <__assert_fail@plt+0x3b2c>
   14ce4:	str	fp, [sp]
   14ce8:	mov	r1, sl
   14cec:	ldr	r3, [pc, #-2356]	; 143c0 <__assert_fail@plt+0x23b8>
   14cf0:	mov	r2, #7
   14cf4:	bl	26ad8 <__assert_fail@plt+0x14ad0>
   14cf8:	mov	r2, #5
   14cfc:	ldr	r1, [pc, #-2368]	; 143c4 <__assert_fail@plt+0x23bc>
   14d00:	b	14b48 <__assert_fail@plt+0x2b40>
   14d04:	ldr	r6, [pc, #-2308]	; 14408 <__assert_fail@plt+0x2400>
   14d08:	b	132e8 <__assert_fail@plt+0x12e0>
   14d0c:	bl	20268 <__assert_fail@plt+0xe260>
   14d10:	add	r3, sp, #400	; 0x190
   14d14:	ldrd	r0, [r3]
   14d18:	vmov.f64	d10, d0
   14d1c:	bl	28ca8 <_obstack_memory_used@@Base+0x81c>
   14d20:	vmov	d7, r0, r1
   14d24:	vmul.f64	d10, d7, d10
   14d28:	vdiv.f64	d7, d10, d9
   14d2c:	vcmpe.f64	d7, d8
   14d30:	vmrs	APSR_nzcv, fpscr
   14d34:	bpl	1386c <__assert_fail@plt+0x1864>
   14d38:	vmov	r0, r1, d7
   14d3c:	bl	28d68 <_obstack_memory_used@@Base+0x8dc>
   14d40:	add	r3, sp, #400	; 0x190
   14d44:	strd	r0, [r3]
   14d48:	b	1308c <__assert_fail@plt+0x1084>
   14d4c:	mov	r0, fp
   14d50:	ldr	r1, [pc, #-2380]	; 1440c <__assert_fail@plt+0x2404>
   14d54:	bl	15b64 <__assert_fail@plt+0x3b5c>
   14d58:	ldr	r8, [sp, #76]	; 0x4c
   14d5c:	mov	r2, #5
   14d60:	ldr	r1, [pc, #-2464]	; 143c8 <__assert_fail@plt+0x23c0>
   14d64:	mov	r0, r8
   14d68:	bl	11c0c <dcgettext@plt>
   14d6c:	ldr	r3, [pc, #-2472]	; 143cc <__assert_fail@plt+0x23c4>
   14d70:	mov	r5, r0
   14d74:	mov	r0, fp
   14d78:	add	fp, r3, sl, lsl #4
   14d7c:	ldr	r4, [fp, #368]	; 0x170
   14d80:	bl	244f4 <__assert_fail@plt+0x124ec>
   14d84:	mov	r2, r5
   14d88:	mov	r3, r4
   14d8c:	mov	r1, r8
   14d90:	str	r0, [sp]
   14d94:	mov	r0, r8
   14d98:	bl	11d50 <error@plt>
   14d9c:	mov	r2, #5
   14da0:	ldr	r1, [pc, #-2520]	; 143d0 <__assert_fail@plt+0x23c8>
   14da4:	mov	r0, r8
   14da8:	bl	11c0c <dcgettext@plt>
   14dac:	mov	r5, r0
   14db0:	ldr	r0, [pc, #-2532]	; 143d4 <__assert_fail@plt+0x23cc>
   14db4:	bl	244f4 <__assert_fail@plt+0x124ec>
   14db8:	b	13060 <__assert_fail@plt+0x1058>
   14dbc:	ldr	r3, [pc, #-2540]	; 143d8 <__assert_fail@plt+0x23d0>
   14dc0:	ldr	r2, [pc, #-2540]	; 143dc <__assert_fail@plt+0x23d4>
   14dc4:	ldr	r1, [pc, #-2540]	; 143e0 <__assert_fail@plt+0x23d8>
   14dc8:	ldr	r0, [pc, #-2540]	; 143e4 <__assert_fail@plt+0x23dc>
   14dcc:	bl	12008 <__assert_fail@plt>
   14dd0:	mov	r2, #0
   14dd4:	add	r0, r0, #1
   14dd8:	add	r1, sp, #220	; 0xdc
   14ddc:	str	r3, [sp, #88]	; 0x58
   14de0:	bl	163d0 <__assert_fail@plt+0x43c8>
   14de4:	ldr	r2, [sp, #216]	; 0xd8
   14de8:	ldr	r3, [sp, #88]	; 0x58
   14dec:	cmp	r2, #0
   14df0:	bne	13734 <__assert_fail@plt+0x172c>
   14df4:	ldr	r2, [sp, #220]	; 0xdc
   14df8:	cmp	r2, #0
   14dfc:	bne	13734 <__assert_fail@plt+0x172c>
   14e00:	b	1372c <__assert_fail@plt+0x1724>
   14e04:	mov	r2, #5
   14e08:	ldr	r1, [pc, #-2600]	; 143e8 <__assert_fail@plt+0x23e0>
   14e0c:	mov	r0, #0
   14e10:	bl	11c0c <dcgettext@plt>
   14e14:	mov	r1, #0
   14e18:	mov	r2, r0
   14e1c:	mov	r0, r1
   14e20:	bl	11d50 <error@plt>
   14e24:	b	133a0 <__assert_fail@plt+0x1398>
   14e28:	mov	r2, #5
   14e2c:	ldr	r1, [pc, #-2632]	; 143ec <__assert_fail@plt+0x23e4>
   14e30:	mov	r0, #0
   14e34:	bl	11c0c <dcgettext@plt>
   14e38:	mov	r4, #0
   14e3c:	strb	r7, [sp, #120]	; 0x78
   14e40:	strb	r4, [sp, #121]	; 0x79
   14e44:	mov	r8, r0
   14e48:	add	r0, sp, #120	; 0x78
   14e4c:	bl	244f4 <__assert_fail@plt+0x124ec>
   14e50:	mov	r2, r8
   14e54:	mov	r1, r4
   14e58:	mov	r3, r0
   14e5c:	mov	r0, r4
   14e60:	bl	11d50 <error@plt>
   14e64:	b	13364 <__assert_fail@plt+0x135c>
   14e68:	ldr	r2, [sp, #32]
   14e6c:	ldr	r3, [r2, #1168]	; 0x490
   14e70:	cmp	r3, #256	; 0x100
   14e74:	beq	1330c <__assert_fail@plt+0x1304>
   14e78:	ldrb	r3, [r2, #1172]	; 0x494
   14e7c:	ldr	r2, [r4]
   14e80:	lsl	r3, r3, #1
   14e84:	ldrh	r3, [r2, r3]
   14e88:	tst	r3, #1
   14e8c:	beq	13364 <__assert_fail@plt+0x135c>
   14e90:	mov	r2, #5
   14e94:	ldr	r1, [pc, #-2732]	; 143f0 <__assert_fail@plt+0x23e8>
   14e98:	mov	r0, #0
   14e9c:	bl	11c0c <dcgettext@plt>
   14ea0:	ldr	r3, [sp, #32]
   14ea4:	mov	r4, #0
   14ea8:	strb	r4, [sp, #125]	; 0x7d
   14eac:	ldrb	r3, [r3, #1172]	; 0x494
   14eb0:	strb	r3, [sp, #124]	; 0x7c
   14eb4:	mov	r6, r0
   14eb8:	add	r0, sp, #124	; 0x7c
   14ebc:	bl	244f4 <__assert_fail@plt+0x124ec>
   14ec0:	mov	r2, r6
   14ec4:	mov	r1, r4
   14ec8:	mov	r3, r0
   14ecc:	mov	r0, r4
   14ed0:	bl	11d50 <error@plt>
   14ed4:	ldr	r3, [sp, #24]
   14ed8:	ldr	r2, [sp, #56]	; 0x38
   14edc:	orr	r3, r3, r2
   14ee0:	tst	r3, #255	; 0xff
   14ee4:	bne	13384 <__assert_fail@plt+0x137c>
   14ee8:	b	133a0 <__assert_fail@plt+0x1398>
   14eec:	mov	r2, #5
   14ef0:	ldr	r1, [pc, #-2820]	; 143f4 <__assert_fail@plt+0x23ec>
   14ef4:	mov	r0, #0
   14ef8:	bl	11c0c <dcgettext@plt>
   14efc:	ldr	r3, [sp, #32]
   14f00:	mov	r7, #0
   14f04:	strb	r7, [sp, #129]	; 0x81
   14f08:	ldr	r3, [r3, #1168]	; 0x490
   14f0c:	strb	r3, [sp, #128]	; 0x80
   14f10:	mov	r8, r0
   14f14:	add	r0, sp, #128	; 0x80
   14f18:	bl	244f4 <__assert_fail@plt+0x124ec>
   14f1c:	mov	r2, r8
   14f20:	mov	r1, r7
   14f24:	mov	r3, r0
   14f28:	mov	r0, r7
   14f2c:	bl	11d50 <error@plt>
   14f30:	b	132e0 <__assert_fail@plt+0x12d8>
   14f34:	ldr	r3, [sp, #32]
   14f38:	ldr	r3, [r3, #1168]	; 0x490
   14f3c:	cmp	r3, #256	; 0x100
   14f40:	beq	132e0 <__assert_fail@plt+0x12d8>
   14f44:	uxtb	r3, r3
   14f48:	ldr	r2, [r4]
   14f4c:	lsl	r3, r3, #1
   14f50:	ldrh	r3, [r2, r3]
   14f54:	and	r3, r3, #1
   14f58:	str	r3, [sp, #16]
   14f5c:	b	132d4 <__assert_fail@plt+0x12cc>
   14f60:	mov	r2, #5
   14f64:	ldr	r1, [pc, #-2932]	; 143f8 <__assert_fail@plt+0x23f0>
   14f68:	b	14b44 <__assert_fail@plt+0x2b3c>
   14f6c:	ldr	r0, [pc, #-2936]	; 143fc <__assert_fail@plt+0x23f4>
   14f70:	bl	15b34 <__assert_fail@plt+0x3b2c>
   14f74:	mov	r2, #5
   14f78:	ldr	r1, [pc, #-2944]	; 14400 <__assert_fail@plt+0x23f8>
   14f7c:	b	14b44 <__assert_fail@plt+0x2b3c>
   14f80:	ldr	r6, [r9]
   14f84:	ldr	r1, [pc, #-2952]	; 14404 <__assert_fail@plt+0x23fc>
   14f88:	mov	r0, r6
   14f8c:	bl	172fc <__assert_fail@plt+0x52f4>
   14f90:	subs	sl, r0, #0
   14f94:	beq	15280 <__assert_fail@plt+0x3278>
   14f98:	ldr	r1, [sp, #32]
   14f9c:	ldr	r3, [pc, #-2972]	; 14408 <__assert_fail@plt+0x2400>
   14fa0:	ldr	r4, [r1, #1488]	; 0x5d0
   14fa4:	ldrb	r2, [r1, #1173]	; 0x495
   14fa8:	ldr	r3, [r3, #8]
   14fac:	ldr	r1, [r1, #1040]	; 0x410
   14fb0:	cmp	r4, r3
   14fb4:	str	r1, [sp, #24]
   14fb8:	movcc	r4, r3
   14fbc:	eor	r8, r2, #1
   14fc0:	b	14fd0 <__assert_fail@plt+0x2fc8>
   14fc4:	lsr	r4, r4, #1
   14fc8:	cmp	r4, #17
   14fcc:	bls	14c04 <__assert_fail@plt+0x2bfc>
   14fd0:	bic	r4, r4, #15
   14fd4:	add	r4, r4, #16
   14fd8:	mov	r0, r4
   14fdc:	bl	2799c <__assert_fail@plt+0x15994>
   14fe0:	cmp	r0, #0
   14fe4:	str	r0, [sp, #296]	; 0x128
   14fe8:	beq	14fc4 <__assert_fail@plt+0x2fbc>
   14fec:	mov	r3, #16
   14ff0:	str	r3, [sp, #316]	; 0x13c
   14ff4:	mov	r2, #0
   14ff8:	mov	r3, #0
   14ffc:	ldr	r7, [sp, #32]
   15000:	mov	r5, #0
   15004:	strd	r2, [sp, #16]
   15008:	add	r3, sp, #296	; 0x128
   1500c:	str	r4, [sp, #308]	; 0x134
   15010:	str	r5, [sp, #304]	; 0x130
   15014:	str	r5, [sp, #312]	; 0x138
   15018:	str	r5, [sp, #300]	; 0x12c
   1501c:	strb	r5, [sp, #320]	; 0x140
   15020:	str	r5, [sp, #152]	; 0x98
   15024:	str	r3, [sp, #36]	; 0x24
   15028:	mov	r2, r6
   1502c:	mov	r1, sl
   15030:	ldr	r0, [sp, #36]	; 0x24
   15034:	bl	1607c <__assert_fail@plt+0x4074>
   15038:	cmp	r0, #0
   1503c:	beq	15258 <__assert_fail@plt+0x3250>
   15040:	ldr	r4, [sp, #296]	; 0x128
   15044:	ldr	r2, [sp, #308]	; 0x134
   15048:	ldr	r3, [sp, #304]	; 0x130
   1504c:	add	r4, r4, r2
   15050:	cmp	r5, #0
   15054:	sub	r3, r4, r3, lsl #4
   15058:	str	r3, [sp, #28]
   1505c:	beq	15084 <__assert_fail@plt+0x307c>
   15060:	b	15248 <__assert_fail@plt+0x3240>
   15064:	adds	r0, r9, #0
   15068:	mvnne	r0, #0
   1506c:	ldrb	r3, [r7, #1464]	; 0x5b8
   15070:	cmp	r3, #0
   15074:	beq	1507c <__assert_fail@plt+0x3074>
   15078:	rsb	r0, r0, #0
   1507c:	cmp	r8, r0
   15080:	ble	15288 <__assert_fail@plt+0x3280>
   15084:	ldr	r2, [sp, #28]
   15088:	mov	r3, r4
   1508c:	sub	r4, r4, #16
   15090:	cmp	r2, r4
   15094:	bcs	15184 <__assert_fail@plt+0x317c>
   15098:	ldr	r2, [r7, #1040]	; 0x410
   1509c:	sub	r1, r3, #32
   150a0:	cmp	r2, #0
   150a4:	beq	150d0 <__assert_fail@plt+0x30c8>
   150a8:	mov	r0, r4
   150ac:	bl	17478 <__assert_fail@plt+0x5470>
   150b0:	cmp	r0, #0
   150b4:	bne	1507c <__assert_fail@plt+0x3074>
   150b8:	ldrb	r3, [r7, #1173]	; 0x495
   150bc:	cmp	r3, #0
   150c0:	bne	1507c <__assert_fail@plt+0x3074>
   150c4:	ldrb	r3, [r7, #1174]	; 0x496
   150c8:	cmp	r3, #0
   150cc:	bne	1507c <__assert_fail@plt+0x3074>
   150d0:	ldr	r1, [r4, #4]
   150d4:	ldr	r2, [r4, #-12]
   150d8:	subs	r3, r1, #1
   150dc:	sub	r9, r2, #1
   150e0:	beq	15064 <__assert_fail@plt+0x305c>
   150e4:	cmp	r9, #0
   150e8:	beq	15170 <__assert_fail@plt+0x3168>
   150ec:	ldrb	r0, [r7, #1305]	; 0x519
   150f0:	cmp	r0, #0
   150f4:	bne	15234 <__assert_fail@plt+0x322c>
   150f8:	cmp	r3, r9
   150fc:	movcc	r2, r3
   15100:	movcs	r2, r9
   15104:	ldr	r1, [r4, #-16]
   15108:	ldr	r0, [r4]
   1510c:	str	r3, [sp, #32]
   15110:	bl	11bf4 <memcmp@plt>
   15114:	cmp	r0, #0
   15118:	bne	1506c <__assert_fail@plt+0x3064>
   1511c:	ldr	r3, [sp, #32]
   15120:	cmp	r3, r9
   15124:	bcc	15220 <__assert_fail@plt+0x3218>
   15128:	movne	r0, #1
   1512c:	moveq	r0, #0
   15130:	b	1506c <__assert_fail@plt+0x3064>
   15134:	str	fp, [sp, #24]
   15138:	str	r0, [r2]
   1513c:	str	r3, [r0, #36]	; 0x24
   15140:	b	12428 <__assert_fail@plt+0x420>
   15144:	ldr	r0, [fp]
   15148:	ldr	r1, [pc, #-3396]	; 1440c <__assert_fail@plt+0x2404>
   1514c:	bl	15b64 <__assert_fail@plt+0x3b5c>
   15150:	ldr	r0, [fp]
   15154:	ldr	r1, [pc, #-3404]	; 14410 <__assert_fail@plt+0x2408>
   15158:	bl	15b64 <__assert_fail@plt+0x3b5c>
   1515c:	ldr	r2, [pc, #-3408]	; 14414 <__assert_fail@plt+0x240c>
   15160:	add	r1, sp, #228	; 0xe4
   15164:	add	r0, r0, #1
   15168:	bl	163d0 <__assert_fail@plt+0x43c8>
   1516c:	b	13db0 <__assert_fail@plt+0x1da8>
   15170:	ldrb	r3, [r7, #1464]	; 0x5b8
   15174:	cmp	r3, #0
   15178:	beq	15288 <__assert_fail@plt+0x3280>
   1517c:	mov	r0, #1
   15180:	b	15078 <__assert_fail@plt+0x3070>
   15184:	ldrd	r0, [sp, #16]
   15188:	ldr	r3, [sp, #304]	; 0x130
   1518c:	ldr	r2, [r4, #4]
   15190:	adds	r0, r0, r3
   15194:	adc	r1, r1, #0
   15198:	cmp	r5, r2
   1519c:	strd	r0, [sp, #16]
   151a0:	bcc	151f8 <__assert_fail@plt+0x31f0>
   151a4:	ldr	r1, [r4]
   151a8:	ldr	r0, [sp, #152]	; 0x98
   151ac:	bl	11b7c <memcpy@plt>
   151b0:	ldr	r2, [sp, #24]
   151b4:	ldr	r3, [r4, #4]
   151b8:	cmp	r2, #0
   151bc:	str	r3, [sp, #156]	; 0x9c
   151c0:	beq	15028 <__assert_fail@plt+0x3020>
   151c4:	ldr	r0, [r4]
   151c8:	ldr	r3, [r4, #8]
   151cc:	ldr	r1, [r4, #12]
   151d0:	ldr	r2, [sp, #152]	; 0x98
   151d4:	sub	r3, r3, r0
   151d8:	sub	r1, r1, r0
   151dc:	add	r3, r2, r3
   151e0:	add	r2, r2, r1
   151e4:	str	r3, [sp, #160]	; 0xa0
   151e8:	str	r2, [sp, #164]	; 0xa4
   151ec:	b	15028 <__assert_fail@plt+0x3020>
   151f0:	cmp	r2, r5
   151f4:	bls	15204 <__assert_fail@plt+0x31fc>
   151f8:	lsls	r5, r5, #1
   151fc:	bne	151f0 <__assert_fail@plt+0x31e8>
   15200:	mov	r5, r2
   15204:	ldr	r0, [sp, #152]	; 0x98
   15208:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   1520c:	mov	r0, r5
   15210:	bl	261d8 <__assert_fail@plt+0x141d0>
   15214:	ldr	r2, [r4, #4]
   15218:	str	r0, [sp, #152]	; 0x98
   1521c:	b	151a4 <__assert_fail@plt+0x319c>
   15220:	ldrb	r3, [r7, #1464]	; 0x5b8
   15224:	cmp	r3, #0
   15228:	beq	15084 <__assert_fail@plt+0x307c>
   1522c:	mvn	r0, #0
   15230:	b	15078 <__assert_fail@plt+0x3070>
   15234:	mov	r3, r2
   15238:	ldr	r0, [r4]
   1523c:	ldr	r2, [r4, #-16]
   15240:	bl	2694c <__assert_fail@plt+0x14944>
   15244:	b	1506c <__assert_fail@plt+0x3064>
   15248:	sub	r1, r4, #16
   1524c:	add	r0, sp, #152	; 0x98
   15250:	bl	18860 <__assert_fail@plt+0x6858>
   15254:	b	1507c <__assert_fail@plt+0x3074>
   15258:	mov	r7, #1
   1525c:	mov	r1, r6
   15260:	mov	r0, sl
   15264:	bl	164c8 <__assert_fail@plt+0x44c0>
   15268:	ldr	r0, [sp, #296]	; 0x128
   1526c:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   15270:	ldr	r0, [sp, #152]	; 0x98
   15274:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   15278:	eor	r0, r7, #1
   1527c:	bl	11df8 <exit@plt>
   15280:	mov	r0, r6
   15284:	bl	164a4 <__assert_fail@plt+0x449c>
   15288:	cmp	fp, #99	; 0x63
   1528c:	movne	r7, #0
   15290:	bne	1525c <__assert_fail@plt+0x3254>
   15294:	ldr	r2, [sp, #308]	; 0x134
   15298:	ldr	r3, [sp, #296]	; 0x128
   1529c:	sub	r4, r4, #16
   152a0:	add	r3, r3, r2
   152a4:	ldrd	r8, [sp, #16]
   152a8:	sub	r3, r3, r4
   152ac:	ldr	r5, [pc, #-3740]	; 14418 <__assert_fail@plt+0x2410>
   152b0:	asr	r3, r3, #4
   152b4:	adds	r8, r8, r3
   152b8:	adc	r9, r9, r3, asr #31
   152bc:	mov	r2, #5
   152c0:	ldr	r1, [pc, #-3756]	; 1441c <__assert_fail@plt+0x2414>
   152c4:	mov	r0, #0
   152c8:	strd	r8, [sp, #16]
   152cc:	ldr	r8, [r5]
   152d0:	bl	11c0c <dcgettext@plt>
   152d4:	ldr	r3, [pc, #-3772]	; 14420 <__assert_fail@plt+0x2418>
   152d8:	add	r2, sp, #184	; 0xb8
   152dc:	ldr	r9, [r3]
   152e0:	mov	r7, r0
   152e4:	ldrd	r0, [sp, #16]
   152e8:	bl	1fd5c <__assert_fail@plt+0xdd54>
   152ec:	mov	r3, r9
   152f0:	mov	r2, r7
   152f4:	str	r6, [sp]
   152f8:	mov	r1, #1
   152fc:	mov	r7, #0
   15300:	str	r0, [sp, #4]
   15304:	mov	r0, r8
   15308:	bl	11e94 <__fprintf_chk@plt>
   1530c:	mov	r2, #5
   15310:	ldr	r1, [pc, #-3828]	; 14424 <__assert_fail@plt+0x241c>
   15314:	mov	r0, r7
   15318:	ldr	r5, [r5]
   1531c:	bl	11c0c <dcgettext@plt>
   15320:	mov	r1, r5
   15324:	mov	r2, r0
   15328:	mov	r0, r4
   1532c:	bl	16718 <__assert_fail@plt+0x4710>
   15330:	b	1525c <__assert_fail@plt+0x3254>
   15334:	mov	fp, #0
   15338:	mov	lr, #0
   1533c:	pop	{r1}		; (ldr r1, [sp], #4)
   15340:	mov	r2, sp
   15344:	push	{r2}		; (str r2, [sp, #-4]!)
   15348:	push	{r0}		; (str r0, [sp, #-4]!)
   1534c:	ldr	ip, [pc, #16]	; 15364 <__assert_fail@plt+0x335c>
   15350:	push	{ip}		; (str ip, [sp, #-4]!)
   15354:	ldr	r0, [pc, #12]	; 15368 <__assert_fail@plt+0x3360>
   15358:	ldr	r3, [pc, #12]	; 1536c <__assert_fail@plt+0x3364>
   1535c:	bl	11db0 <__libc_start_main@plt>
   15360:	bl	11fe4 <abort@plt>
   15364:	andeq	r8, r2, r8, lsr pc
   15368:	andeq	r2, r1, r0, asr #32
   1536c:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   15370:	ldr	r3, [pc, #20]	; 1538c <__assert_fail@plt+0x3384>
   15374:	ldr	r2, [pc, #20]	; 15390 <__assert_fail@plt+0x3388>
   15378:	add	r3, pc, r3
   1537c:	ldr	r2, [r3, r2]
   15380:	cmp	r2, #0
   15384:	bxeq	lr
   15388:	b	11dd4 <__gmon_start__@plt>
   1538c:	andeq	r6, r2, r0, lsl #25
   15390:	ldrdeq	r0, [r0], -ip
   15394:	ldr	r3, [pc, #28]	; 153b8 <__assert_fail@plt+0x33b0>
   15398:	ldr	r0, [pc, #28]	; 153bc <__assert_fail@plt+0x33b4>
   1539c:	sub	r3, r3, r0
   153a0:	cmp	r3, #6
   153a4:	bxls	lr
   153a8:	ldr	r3, [pc, #16]	; 153c0 <__assert_fail@plt+0x33b8>
   153ac:	cmp	r3, #0
   153b0:	bxeq	lr
   153b4:	bx	r3
   153b8:			; <UNDEFINED> instruction: 0x0003c2bf
   153bc:			; <UNDEFINED> instruction: 0x0003c2bc
   153c0:	andeq	r0, r0, r0
   153c4:	ldr	r1, [pc, #36]	; 153f0 <__assert_fail@plt+0x33e8>
   153c8:	ldr	r0, [pc, #36]	; 153f4 <__assert_fail@plt+0x33ec>
   153cc:	sub	r1, r1, r0
   153d0:	asr	r1, r1, #2
   153d4:	add	r1, r1, r1, lsr #31
   153d8:	asrs	r1, r1, #1
   153dc:	bxeq	lr
   153e0:	ldr	r3, [pc, #16]	; 153f8 <__assert_fail@plt+0x33f0>
   153e4:	cmp	r3, #0
   153e8:	bxeq	lr
   153ec:	bx	r3
   153f0:			; <UNDEFINED> instruction: 0x0003c2bc
   153f4:			; <UNDEFINED> instruction: 0x0003c2bc
   153f8:	andeq	r0, r0, r0
   153fc:	push	{r4, lr}
   15400:	ldr	r4, [pc, #24]	; 15420 <__assert_fail@plt+0x3418>
   15404:	ldrb	r3, [r4]
   15408:	cmp	r3, #0
   1540c:	popne	{r4, pc}
   15410:	bl	15394 <__assert_fail@plt+0x338c>
   15414:	mov	r3, #1
   15418:	strb	r3, [r4]
   1541c:	pop	{r4, pc}
   15420:	andeq	ip, r3, r4, ror #5
   15424:	ldr	r0, [pc, #40]	; 15454 <__assert_fail@plt+0x344c>
   15428:	ldr	r3, [r0]
   1542c:	cmp	r3, #0
   15430:	bne	15438 <__assert_fail@plt+0x3430>
   15434:	b	153c4 <__assert_fail@plt+0x33bc>
   15438:	ldr	r3, [pc, #24]	; 15458 <__assert_fail@plt+0x3450>
   1543c:	cmp	r3, #0
   15440:	beq	15434 <__assert_fail@plt+0x342c>
   15444:	push	{r4, lr}
   15448:	blx	r3
   1544c:	pop	{r4, lr}
   15450:	b	153c4 <__assert_fail@plt+0x33bc>
   15454:	andeq	fp, r3, ip, lsl #30
	...
   15460:	push	{r4, lr}
   15464:	ldr	r0, [r0, #4]
   15468:	bl	28704 <_obstack_memory_used@@Base+0x278>
   1546c:	mov	r0, r1
   15470:	pop	{r4, pc}
   15474:	ldr	r0, [r0, #4]
   15478:	ldr	r3, [r1, #4]
   1547c:	sub	r0, r0, r3
   15480:	clz	r0, r0
   15484:	lsr	r0, r0, #5
   15488:	bx	lr
   1548c:	ldr	r3, [r0, #16]
   15490:	cmp	r3, #0
   15494:	beq	154a4 <__assert_fail@plt+0x349c>
   15498:	mov	r3, #0
   1549c:	mov	r0, r3
   154a0:	bx	lr
   154a4:	ldr	r2, [r0, #20]
   154a8:	cmp	r2, #0
   154ac:	bne	1549c <__assert_fail@plt+0x3494>
   154b0:	ldrb	r3, [r0, #24]
   154b4:	cmp	r3, #0
   154b8:	bne	15498 <__assert_fail@plt+0x3490>
   154bc:	ldrb	r2, [r0, #25]
   154c0:	cmp	r2, #0
   154c4:	bne	1549c <__assert_fail@plt+0x3494>
   154c8:	ldrb	r3, [r0, #26]
   154cc:	cmp	r3, #0
   154d0:	bne	15498 <__assert_fail@plt+0x3490>
   154d4:	ldrh	r2, [r0, #28]
   154d8:	cmp	r2, #0
   154dc:	bne	1549c <__assert_fail@plt+0x3494>
   154e0:	ldrb	r2, [r0, #30]
   154e4:	cmp	r2, #0
   154e8:	bne	1549c <__assert_fail@plt+0x3494>
   154ec:	ldrb	r2, [r0, #32]
   154f0:	cmp	r2, #0
   154f4:	ldrbeq	r3, [r0, #27]
   154f8:	eoreq	r3, r3, #1
   154fc:	b	1549c <__assert_fail@plt+0x3494>
   15500:	ldrh	r3, [r0, #24]
   15504:	cmp	r3, #0
   15508:	movne	r3, #98	; 0x62
   1550c:	strbne	r3, [r1]
   15510:	ldr	r3, [pc, #216]	; 155f0 <__assert_fail@plt+0x35e8>
   15514:	ldr	r2, [r0, #16]
   15518:	addne	r1, r1, #1
   1551c:	cmp	r2, r3
   15520:	moveq	r3, #100	; 0x64
   15524:	strbeq	r3, [r1]
   15528:	ldr	r3, [r0, #20]
   1552c:	addeq	r1, r1, #1
   15530:	cmp	r3, #0
   15534:	movne	r3, #102	; 0x66
   15538:	strbne	r3, [r1]
   1553c:	ldrb	r3, [r0, #28]
   15540:	addne	r1, r1, #1
   15544:	cmp	r3, #0
   15548:	movne	r3, #103	; 0x67
   1554c:	strbne	r3, [r1]
   15550:	ldrb	r3, [r0, #29]
   15554:	addne	r1, r1, #1
   15558:	cmp	r3, #0
   1555c:	movne	r3, #104	; 0x68
   15560:	strbne	r3, [r1]
   15564:	ldr	r3, [pc, #136]	; 155f4 <__assert_fail@plt+0x35ec>
   15568:	ldr	r2, [r0, #16]
   1556c:	addne	r1, r1, #1
   15570:	cmp	r2, r3
   15574:	moveq	r3, #105	; 0x69
   15578:	strbeq	r3, [r1]
   1557c:	ldrb	r3, [r0, #30]
   15580:	addeq	r1, r1, #1
   15584:	cmp	r3, #0
   15588:	movne	r3, #77	; 0x4d
   1558c:	strbne	r3, [r1]
   15590:	ldrb	r3, [r0, #26]
   15594:	addne	r1, r1, #1
   15598:	cmp	r3, #0
   1559c:	movne	r3, #110	; 0x6e
   155a0:	strbne	r3, [r1]
   155a4:	ldrb	r3, [r0, #27]
   155a8:	addne	r1, r1, #1
   155ac:	cmp	r3, #0
   155b0:	movne	r3, #82	; 0x52
   155b4:	strbne	r3, [r1]
   155b8:	ldrb	r3, [r0, #31]
   155bc:	addne	r1, r1, #1
   155c0:	cmp	r3, #0
   155c4:	movne	r3, #114	; 0x72
   155c8:	strbne	r3, [r1]
   155cc:	ldrb	r3, [r0, #32]
   155d0:	addne	r1, r1, #1
   155d4:	cmp	r3, #0
   155d8:	movne	r3, #86	; 0x56
   155dc:	strbne	r3, [r1]
   155e0:	addne	r1, r1, #1
   155e4:	mov	r3, #0
   155e8:	strb	r3, [r1]
   155ec:	bx	lr
   155f0:	andeq	ip, r3, r8, ror #5
   155f4:	andeq	ip, r3, r8, ror #7
   155f8:	ldrb	r3, [r0]
   155fc:	cmp	r3, #0
   15600:	bxeq	lr
   15604:	sub	ip, r2, #1
   15608:	cmp	ip, #1
   1560c:	push	{r4, lr}
   15610:	bic	r2, r2, #2
   15614:	bls	158e0 <__assert_fail@plt+0x38d8>
   15618:	cmp	r2, #0
   1561c:	beq	156d8 <__assert_fail@plt+0x36d0>
   15620:	ldr	ip, [pc, #1272]	; 15b20 <__assert_fail@plt+0x3b18>
   15624:	mov	r2, #1
   15628:	add	r4, ip, #256	; 0x100
   1562c:	sub	lr, ip, #256	; 0x100
   15630:	sub	r3, r3, #77	; 0x4d
   15634:	cmp	r3, #37	; 0x25
   15638:	ldrls	pc, [pc, r3, lsl #2]
   1563c:	b	158dc <__assert_fail@plt+0x38d4>
   15640:			; <UNDEFINED> instruction: 0x000157b8
   15644:	ldrdeq	r5, [r1], -ip
   15648:	ldrdeq	r5, [r1], -ip
   1564c:	ldrdeq	r5, [r1], -ip
   15650:	ldrdeq	r5, [r1], -ip
   15654:	andeq	r5, r1, r4, lsr #15
   15658:	ldrdeq	r5, [r1], -ip
   1565c:	ldrdeq	r5, [r1], -ip
   15660:	ldrdeq	r5, [r1], -ip
   15664:	muleq	r1, r0, r7
   15668:	ldrdeq	r5, [r1], -ip
   1566c:	ldrdeq	r5, [r1], -ip
   15670:	ldrdeq	r5, [r1], -ip
   15674:	ldrdeq	r5, [r1], -ip
   15678:	ldrdeq	r5, [r1], -ip
   1567c:	ldrdeq	r5, [r1], -ip
   15680:	ldrdeq	r5, [r1], -ip
   15684:	ldrdeq	r5, [r1], -ip
   15688:	ldrdeq	r5, [r1], -ip
   1568c:	ldrdeq	r5, [r1], -ip
   15690:	ldrdeq	r5, [r1], -ip
   15694:	muleq	r1, r4, r7
   15698:	ldrdeq	r5, [r1], -ip
   1569c:			; <UNDEFINED> instruction: 0x000158b8
   156a0:	ldrdeq	r5, [r1], -ip
   156a4:	andeq	r5, r1, r4, lsr #17
   156a8:	muleq	r1, r0, r8
   156ac:	andeq	r5, r1, ip, ror r8
   156b0:	andeq	r5, r1, r0, ror #16
   156b4:	ldrdeq	r5, [r1], -ip
   156b8:	ldrdeq	r5, [r1], -ip
   156bc:	ldrdeq	r5, [r1], -ip
   156c0:	ldrdeq	r5, [r1], -ip
   156c4:	andeq	r5, r1, ip, asr #16
   156c8:	ldrdeq	r5, [r1], -ip
   156cc:	ldrdeq	r5, [r1], -ip
   156d0:	ldrdeq	r5, [r1], -ip
   156d4:	andeq	r5, r1, r8, lsr r8
   156d8:	ldr	ip, [pc, #1092]	; 15b24 <__assert_fail@plt+0x3b1c>
   156dc:	mov	r2, #1
   156e0:	add	lr, ip, #512	; 0x200
   156e4:	add	r4, ip, #256	; 0x100
   156e8:	sub	r3, r3, #77	; 0x4d
   156ec:	cmp	r3, #37	; 0x25
   156f0:	ldrls	pc, [pc, r3, lsl #2]
   156f4:	b	158dc <__assert_fail@plt+0x38d4>
   156f8:	andeq	r5, r1, r0, lsr r8
   156fc:	ldrdeq	r5, [r1], -ip
   15700:	ldrdeq	r5, [r1], -ip
   15704:	ldrdeq	r5, [r1], -ip
   15708:	ldrdeq	r5, [r1], -ip
   1570c:	andeq	r5, r1, r8, lsr #16
   15710:	ldrdeq	r5, [r1], -ip
   15714:	ldrdeq	r5, [r1], -ip
   15718:	ldrdeq	r5, [r1], -ip
   1571c:	andeq	r5, r1, r0, lsr #16
   15720:	ldrdeq	r5, [r1], -ip
   15724:	ldrdeq	r5, [r1], -ip
   15728:	ldrdeq	r5, [r1], -ip
   1572c:	ldrdeq	r5, [r1], -ip
   15730:	ldrdeq	r5, [r1], -ip
   15734:	ldrdeq	r5, [r1], -ip
   15738:	ldrdeq	r5, [r1], -ip
   1573c:	ldrdeq	r5, [r1], -ip
   15740:	ldrdeq	r5, [r1], -ip
   15744:	ldrdeq	r5, [r1], -ip
   15748:	ldrdeq	r5, [r1], -ip
   1574c:	andeq	r5, r1, r8, lsl r8
   15750:	ldrdeq	r5, [r1], -ip
   15754:	andeq	r5, r1, r0, lsl r8
   15758:	ldrdeq	r5, [r1], -ip
   1575c:	andeq	r5, r1, r8, lsl #16
   15760:	andeq	r5, r1, r0, lsl #16
   15764:	strdeq	r5, [r1], -r8
   15768:	andeq	r5, r1, r8, ror #15
   1576c:	ldrdeq	r5, [r1], -ip
   15770:	ldrdeq	r5, [r1], -ip
   15774:	ldrdeq	r5, [r1], -ip
   15778:	ldrdeq	r5, [r1], -ip
   1577c:	andeq	r5, r1, r0, ror #15
   15780:	ldrdeq	r5, [r1], -ip
   15784:	ldrdeq	r5, [r1], -ip
   15788:	ldrdeq	r5, [r1], -ip
   1578c:	andeq	r5, r1, ip, asr #15
   15790:	strb	r2, [r1, #32]
   15794:	ldrb	r3, [r0, #1]!
   15798:	cmp	r3, #0
   1579c:	bne	15630 <__assert_fail@plt+0x3628>
   157a0:	pop	{r4, pc}
   157a4:	strb	r2, [r1, #27]
   157a8:	ldrb	r3, [r0, #1]!
   157ac:	cmp	r3, #0
   157b0:	bne	15630 <__assert_fail@plt+0x3628>
   157b4:	b	157a0 <__assert_fail@plt+0x3798>
   157b8:	strb	r2, [r1, #30]
   157bc:	ldrb	r3, [r0, #1]!
   157c0:	cmp	r3, #0
   157c4:	bne	15630 <__assert_fail@plt+0x3628>
   157c8:	b	157a0 <__assert_fail@plt+0x3798>
   157cc:	strb	r2, [r1, #31]
   157d0:	ldrb	r3, [r0, #1]!
   157d4:	cmp	r3, #0
   157d8:	bne	156e8 <__assert_fail@plt+0x36e0>
   157dc:	pop	{r4, pc}
   157e0:	strb	r2, [r1, #26]
   157e4:	b	157d0 <__assert_fail@plt+0x37c8>
   157e8:	ldr	r3, [r1, #16]
   157ec:	cmp	r3, #0
   157f0:	streq	r4, [r1, #16]
   157f4:	b	157d0 <__assert_fail@plt+0x37c8>
   157f8:	strb	r2, [r1, #29]
   157fc:	b	157d0 <__assert_fail@plt+0x37c8>
   15800:	strb	r2, [r1, #28]
   15804:	b	157d0 <__assert_fail@plt+0x37c8>
   15808:	str	lr, [r1, #20]
   1580c:	b	157d0 <__assert_fail@plt+0x37c8>
   15810:	str	ip, [r1, #16]
   15814:	b	157d0 <__assert_fail@plt+0x37c8>
   15818:	strb	r2, [r1, #24]
   1581c:	b	157d0 <__assert_fail@plt+0x37c8>
   15820:	strb	r2, [r1, #32]
   15824:	b	157d0 <__assert_fail@plt+0x37c8>
   15828:	strb	r2, [r1, #27]
   1582c:	b	157d0 <__assert_fail@plt+0x37c8>
   15830:	strb	r2, [r1, #30]
   15834:	b	157d0 <__assert_fail@plt+0x37c8>
   15838:	strb	r2, [r1, #31]
   1583c:	ldrb	r3, [r0, #1]!
   15840:	cmp	r3, #0
   15844:	bne	15630 <__assert_fail@plt+0x3628>
   15848:	b	157a0 <__assert_fail@plt+0x3798>
   1584c:	strb	r2, [r1, #26]
   15850:	ldrb	r3, [r0, #1]!
   15854:	cmp	r3, #0
   15858:	bne	15630 <__assert_fail@plt+0x3628>
   1585c:	b	157a0 <__assert_fail@plt+0x3798>
   15860:	ldr	r3, [r1, #16]
   15864:	cmp	r3, #0
   15868:	streq	ip, [r1, #16]
   1586c:	ldrb	r3, [r0, #1]!
   15870:	cmp	r3, #0
   15874:	bne	15630 <__assert_fail@plt+0x3628>
   15878:	b	157a0 <__assert_fail@plt+0x3798>
   1587c:	strb	r2, [r1, #29]
   15880:	ldrb	r3, [r0, #1]!
   15884:	cmp	r3, #0
   15888:	bne	15630 <__assert_fail@plt+0x3628>
   1588c:	b	157a0 <__assert_fail@plt+0x3798>
   15890:	strb	r2, [r1, #28]
   15894:	ldrb	r3, [r0, #1]!
   15898:	cmp	r3, #0
   1589c:	bne	15630 <__assert_fail@plt+0x3628>
   158a0:	b	157a0 <__assert_fail@plt+0x3798>
   158a4:	str	r4, [r1, #20]
   158a8:	ldrb	r3, [r0, #1]!
   158ac:	cmp	r3, #0
   158b0:	bne	15630 <__assert_fail@plt+0x3628>
   158b4:	b	157a0 <__assert_fail@plt+0x3798>
   158b8:	str	lr, [r1, #16]
   158bc:	ldrb	r3, [r0, #1]!
   158c0:	cmp	r3, #0
   158c4:	bne	15630 <__assert_fail@plt+0x3628>
   158c8:	b	157a0 <__assert_fail@plt+0x3798>
   158cc:	strb	r2, [r1, #27]
   158d0:	ldrb	r3, [r0, #1]!
   158d4:	cmp	r3, #0
   158d8:	bne	159b0 <__assert_fail@plt+0x39a8>
   158dc:	pop	{r4, pc}
   158e0:	cmp	r2, #0
   158e4:	beq	159a0 <__assert_fail@plt+0x3998>
   158e8:	ldr	ip, [pc, #564]	; 15b24 <__assert_fail@plt+0x3b1c>
   158ec:	mov	r2, #1
   158f0:	add	lr, ip, #512	; 0x200
   158f4:	add	r4, ip, #256	; 0x100
   158f8:	sub	r3, r3, #77	; 0x4d
   158fc:	cmp	r3, #37	; 0x25
   15900:	ldrls	pc, [pc, r3, lsl #2]
   15904:	b	158dc <__assert_fail@plt+0x38d4>
   15908:	andeq	r5, r1, r8, lsl fp
   1590c:	ldrdeq	r5, [r1], -ip
   15910:	ldrdeq	r5, [r1], -ip
   15914:	ldrdeq	r5, [r1], -ip
   15918:	ldrdeq	r5, [r1], -ip
   1591c:	andeq	r5, r1, r0, lsl fp
   15920:	ldrdeq	r5, [r1], -ip
   15924:	ldrdeq	r5, [r1], -ip
   15928:	ldrdeq	r5, [r1], -ip
   1592c:	andeq	r5, r1, r8, lsl #22
   15930:	ldrdeq	r5, [r1], -ip
   15934:	ldrdeq	r5, [r1], -ip
   15938:	ldrdeq	r5, [r1], -ip
   1593c:	ldrdeq	r5, [r1], -ip
   15940:	ldrdeq	r5, [r1], -ip
   15944:	ldrdeq	r5, [r1], -ip
   15948:	ldrdeq	r5, [r1], -ip
   1594c:	ldrdeq	r5, [r1], -ip
   15950:	ldrdeq	r5, [r1], -ip
   15954:	ldrdeq	r5, [r1], -ip
   15958:	ldrdeq	r5, [r1], -ip
   1595c:	andeq	r5, r1, r0, lsl #22
   15960:	ldrdeq	r5, [r1], -ip
   15964:	strdeq	r5, [r1], -r8
   15968:	ldrdeq	r5, [r1], -ip
   1596c:	strdeq	r5, [r1], -r0
   15970:	andeq	r5, r1, r8, ror #21
   15974:	andeq	r5, r1, r0, ror #21
   15978:	andeq	r5, r1, ip, lsr #21
   1597c:	ldrdeq	r5, [r1], -ip
   15980:	ldrdeq	r5, [r1], -ip
   15984:	ldrdeq	r5, [r1], -ip
   15988:	ldrdeq	r5, [r1], -ip
   1598c:	andeq	r5, r1, r4, lsr #21
   15990:	ldrdeq	r5, [r1], -ip
   15994:	ldrdeq	r5, [r1], -ip
   15998:	ldrdeq	r5, [r1], -ip
   1599c:	muleq	r1, r0, sl
   159a0:	ldr	ip, [pc, #376]	; 15b20 <__assert_fail@plt+0x3b18>
   159a4:	mov	r2, #1
   159a8:	add	r4, ip, #256	; 0x100
   159ac:	sub	lr, ip, #256	; 0x100
   159b0:	sub	r3, r3, #77	; 0x4d
   159b4:	cmp	r3, #37	; 0x25
   159b8:	ldrls	pc, [pc, r3, lsl #2]
   159bc:	b	158dc <__assert_fail@plt+0x38d4>
   159c0:	andeq	r5, r1, r8, asr sl
   159c4:	ldrdeq	r5, [r1], -ip
   159c8:	ldrdeq	r5, [r1], -ip
   159cc:	ldrdeq	r5, [r1], -ip
   159d0:	ldrdeq	r5, [r1], -ip
   159d4:	andeq	r5, r1, ip, asr #17
   159d8:	ldrdeq	r5, [r1], -ip
   159dc:	ldrdeq	r5, [r1], -ip
   159e0:	ldrdeq	r5, [r1], -ip
   159e4:	ldrdeq	r5, [r1], -r8
   159e8:	ldrdeq	r5, [r1], -ip
   159ec:	ldrdeq	r5, [r1], -ip
   159f0:	ldrdeq	r5, [r1], -ip
   159f4:	ldrdeq	r5, [r1], -ip
   159f8:	ldrdeq	r5, [r1], -ip
   159fc:	ldrdeq	r5, [r1], -ip
   15a00:	ldrdeq	r5, [r1], -ip
   15a04:	ldrdeq	r5, [r1], -ip
   15a08:	ldrdeq	r5, [r1], -ip
   15a0c:	ldrdeq	r5, [r1], -ip
   15a10:	ldrdeq	r5, [r1], -ip
   15a14:	andeq	r5, r1, ip, asr #21
   15a18:	ldrdeq	r5, [r1], -ip
   15a1c:	andeq	r5, r1, r4, asr #21
   15a20:	ldrdeq	r5, [r1], -ip
   15a24:			; <UNDEFINED> instruction: 0x00015abc
   15a28:	andeq	r5, r1, r0, lsl #21
   15a2c:	andeq	r5, r1, r8, ror sl
   15a30:	andeq	r5, r1, r8, ror #20
   15a34:	ldrdeq	r5, [r1], -ip
   15a38:	ldrdeq	r5, [r1], -ip
   15a3c:	ldrdeq	r5, [r1], -ip
   15a40:	ldrdeq	r5, [r1], -ip
   15a44:	andeq	r5, r1, r0, ror #20
   15a48:	ldrdeq	r5, [r1], -ip
   15a4c:	ldrdeq	r5, [r1], -ip
   15a50:	ldrdeq	r5, [r1], -ip
   15a54:	andeq	r5, r1, r8, lsl #21
   15a58:	strb	r2, [r1, #30]
   15a5c:	b	158d0 <__assert_fail@plt+0x38c8>
   15a60:	strb	r2, [r1, #26]
   15a64:	b	158d0 <__assert_fail@plt+0x38c8>
   15a68:	ldr	r3, [r1, #16]
   15a6c:	cmp	r3, #0
   15a70:	streq	ip, [r1, #16]
   15a74:	b	158d0 <__assert_fail@plt+0x38c8>
   15a78:	strb	r2, [r1, #29]
   15a7c:	b	158d0 <__assert_fail@plt+0x38c8>
   15a80:	strb	r2, [r1, #28]
   15a84:	b	158d0 <__assert_fail@plt+0x38c8>
   15a88:	strb	r2, [r1, #31]
   15a8c:	b	158d0 <__assert_fail@plt+0x38c8>
   15a90:	strb	r2, [r1, #31]
   15a94:	ldrb	r3, [r0, #1]!
   15a98:	cmp	r3, #0
   15a9c:	bne	158f8 <__assert_fail@plt+0x38f0>
   15aa0:	pop	{r4, pc}
   15aa4:	strb	r2, [r1, #26]
   15aa8:	b	15a94 <__assert_fail@plt+0x3a8c>
   15aac:	ldr	r3, [r1, #16]
   15ab0:	cmp	r3, #0
   15ab4:	streq	r4, [r1, #16]
   15ab8:	b	15a94 <__assert_fail@plt+0x3a8c>
   15abc:	str	r4, [r1, #20]
   15ac0:	b	158d0 <__assert_fail@plt+0x38c8>
   15ac4:	str	lr, [r1, #16]
   15ac8:	b	158d0 <__assert_fail@plt+0x38c8>
   15acc:	strb	r2, [r1, #24]
   15ad0:	strb	r2, [r1, #25]
   15ad4:	b	158d0 <__assert_fail@plt+0x38c8>
   15ad8:	strb	r2, [r1, #32]
   15adc:	b	158d0 <__assert_fail@plt+0x38c8>
   15ae0:	strb	r2, [r1, #29]
   15ae4:	b	15a94 <__assert_fail@plt+0x3a8c>
   15ae8:	strb	r2, [r1, #28]
   15aec:	b	15a94 <__assert_fail@plt+0x3a8c>
   15af0:	str	lr, [r1, #20]
   15af4:	b	15a94 <__assert_fail@plt+0x3a8c>
   15af8:	str	ip, [r1, #16]
   15afc:	b	15a94 <__assert_fail@plt+0x3a8c>
   15b00:	strb	r2, [r1, #25]
   15b04:	b	15a94 <__assert_fail@plt+0x3a8c>
   15b08:	strb	r2, [r1, #32]
   15b0c:	b	15a94 <__assert_fail@plt+0x3a8c>
   15b10:	strb	r2, [r1, #27]
   15b14:	b	15a94 <__assert_fail@plt+0x3a8c>
   15b18:	strb	r2, [r1, #30]
   15b1c:	b	15a94 <__assert_fail@plt+0x3a8c>
   15b20:	andeq	ip, r3, r8, ror #7
   15b24:	andeq	ip, r3, r8, ror #5
   15b28:	ldr	r1, [r1]
   15b2c:	ldr	r0, [r0]
   15b30:	b	11ae0 <strcmp@plt>
   15b34:	push	{r4, lr}
   15b38:	mov	r2, #5
   15b3c:	mov	r4, r0
   15b40:	ldr	r1, [pc, #24]	; 15b60 <__assert_fail@plt+0x3b58>
   15b44:	mov	r0, #0
   15b48:	bl	11c0c <dcgettext@plt>
   15b4c:	mov	r3, r4
   15b50:	mov	r1, #0
   15b54:	mov	r2, r0
   15b58:	mov	r0, #2
   15b5c:	bl	11d50 <error@plt>
   15b60:	andeq	r9, r2, r0, lsr #6
   15b64:	push	{lr}		; (str lr, [sp, #-4]!)
   15b68:	mov	r5, r1
   15b6c:	sub	sp, sp, #12
   15b70:	mov	r6, r0
   15b74:	mov	r2, #5
   15b78:	ldr	r1, [pc, #60]	; 15bbc <__assert_fail@plt+0x3bb4>
   15b7c:	mov	r0, #0
   15b80:	bl	11c0c <dcgettext@plt>
   15b84:	mov	r1, r5
   15b88:	mov	r2, #5
   15b8c:	mov	r4, r0
   15b90:	mov	r0, #0
   15b94:	bl	11c0c <dcgettext@plt>
   15b98:	mov	r5, r0
   15b9c:	mov	r0, r6
   15ba0:	bl	244f4 <__assert_fail@plt+0x124ec>
   15ba4:	mov	r3, r5
   15ba8:	mov	r2, r4
   15bac:	mov	r1, #0
   15bb0:	str	r0, [sp]
   15bb4:	mov	r0, #2
   15bb8:	bl	11d50 <error@plt>
   15bbc:	andeq	r9, r2, r0, asr #6
   15bc0:	push	{r4, r5, r6, lr}
   15bc4:	mov	r5, r0
   15bc8:	ldr	r6, [pc, #60]	; 15c0c <__assert_fail@plt+0x3c04>
   15bcc:	ldr	r4, [r6, #768]	; 0x300
   15bd0:	cmp	r4, #0
   15bd4:	beq	15bec <__assert_fail@plt+0x3be4>
   15bd8:	add	r0, r4, #9
   15bdc:	bl	11c30 <unlink@plt>
   15be0:	ldr	r4, [r4]
   15be4:	cmp	r4, #0
   15be8:	bne	15bd8 <__assert_fail@plt+0x3bd0>
   15bec:	mov	r3, #0
   15bf0:	mov	r0, r5
   15bf4:	mov	r1, r3
   15bf8:	str	r3, [r6, #768]	; 0x300
   15bfc:	bl	11bb8 <signal@plt>
   15c00:	mov	r0, r5
   15c04:	pop	{r4, r5, r6, lr}
   15c08:	b	11ad4 <raise@plt>
   15c0c:	andeq	ip, r3, r8, ror #5
   15c10:	push	{lr}		; (str lr, [sp, #-4]!)
   15c14:	sub	sp, sp, #12
   15c18:	mov	r4, r1
   15c1c:	mov	r6, r0
   15c20:	bl	11e34 <__errno_location@plt>
   15c24:	cmp	r4, #0
   15c28:	ldr	r5, [r0]
   15c2c:	beq	15c58 <__assert_fail@plt+0x3c50>
   15c30:	mov	r2, r4
   15c34:	mov	r1, #3
   15c38:	mov	r0, #0
   15c3c:	bl	23600 <__assert_fail@plt+0x115f8>
   15c40:	mov	r3, r6
   15c44:	mov	r1, r5
   15c48:	ldr	r2, [pc, #32]	; 15c70 <__assert_fail@plt+0x3c68>
   15c4c:	str	r0, [sp]
   15c50:	mov	r0, #2
   15c54:	bl	11d50 <error@plt>
   15c58:	mov	r0, r4
   15c5c:	mov	r2, #5
   15c60:	ldr	r1, [pc, #12]	; 15c74 <__assert_fail@plt+0x3c6c>
   15c64:	bl	11c0c <dcgettext@plt>
   15c68:	mov	r4, r0
   15c6c:	b	15c30 <__assert_fail@plt+0x3c28>
   15c70:	andeq	r9, r2, r4, ror r3
   15c74:	andeq	r9, r2, r4, ror #6
   15c78:	push	{r4, r5, r6, lr}
   15c7c:	mov	r5, r0
   15c80:	ldr	r4, [pc, #64]	; 15cc8 <__assert_fail@plt+0x3cc0>
   15c84:	ldr	r3, [r4, #772]	; 0x304
   15c88:	ldr	r2, [r4, #776]	; 0x308
   15c8c:	cmp	r3, r2
   15c90:	beq	15ca8 <__assert_fail@plt+0x3ca0>
   15c94:	ldr	r1, [r4, #780]	; 0x30c
   15c98:	add	r2, r3, #1
   15c9c:	str	r5, [r1, r3, lsl #2]
   15ca0:	str	r2, [r4, #772]	; 0x304
   15ca4:	pop	{r4, r5, r6, pc}
   15ca8:	add	r1, r4, #776	; 0x308
   15cac:	mov	r2, #4
   15cb0:	ldr	r0, [r4, #780]	; 0x30c
   15cb4:	bl	26388 <__assert_fail@plt+0x14380>
   15cb8:	ldr	r3, [r4, #772]	; 0x304
   15cbc:	mov	r1, r0
   15cc0:	str	r0, [r4, #780]	; 0x30c
   15cc4:	b	15c98 <__assert_fail@plt+0x3c90>
   15cc8:	andeq	ip, r3, r8, ror #5
   15ccc:	push	{lr}		; (str lr, [sp, #-4]!)
   15cd0:	mov	r5, r0
   15cd4:	sub	sp, sp, #20
   15cd8:	mov	r0, r1
   15cdc:	mov	r4, r1
   15ce0:	bl	11e10 <strlen@plt>
   15ce4:	mov	r1, r4
   15ce8:	mov	r2, r0
   15cec:	mov	r0, #2
   15cf0:	bl	11e7c <write@plt>
   15cf4:	cmp	r5, #0
   15cf8:	bne	15d14 <__assert_fail@plt+0x3d0c>
   15cfc:	mov	r2, #1
   15d00:	ldr	r1, [pc, #72]	; 15d50 <__assert_fail@plt+0x3d48>
   15d04:	mov	r0, #2
   15d08:	bl	11e7c <write@plt>
   15d0c:	mov	r0, #2
   15d10:	bl	11b70 <_exit@plt>
   15d14:	add	r1, sp, #4
   15d18:	mov	r0, r5
   15d1c:	bl	1fc94 <__assert_fail@plt+0xdc8c>
   15d20:	mov	r2, #8
   15d24:	ldr	r1, [pc, #40]	; 15d54 <__assert_fail@plt+0x3d4c>
   15d28:	mov	r4, r0
   15d2c:	mov	r0, #2
   15d30:	bl	11e7c <write@plt>
   15d34:	mov	r0, r4
   15d38:	bl	11e10 <strlen@plt>
   15d3c:	mov	r1, r4
   15d40:	mov	r2, r0
   15d44:	mov	r0, #2
   15d48:	bl	11e7c <write@plt>
   15d4c:	b	15cfc <__assert_fail@plt+0x3cf4>
   15d50:	andeq	r9, r2, r4, asr #22
   15d54:	andeq	r9, r2, ip, ror r3
   15d58:	ldr	r3, [pc, #368]	; 15ed0 <__assert_fail@plt+0x3ec8>
   15d5c:	push	{r4, r5, lr}
   15d60:	sub	r1, r1, #1
   15d64:	ldr	lr, [r3]
   15d68:	add	r1, r0, r1
   15d6c:	cmp	lr, #256	; 0x100
   15d70:	ldr	r5, [r2]
   15d74:	ldr	r4, [r2, #4]
   15d78:	beq	15e38 <__assert_fail@plt+0x3e30>
   15d7c:	cmp	r1, r0
   15d80:	bls	15e20 <__assert_fail@plt+0x3e18>
   15d84:	cmp	r5, #0
   15d88:	sub	r5, r5, #1
   15d8c:	beq	15dd0 <__assert_fail@plt+0x3dc8>
   15d90:	ldrb	r3, [r0]
   15d94:	cmp	lr, r3
   15d98:	addne	r3, r0, #1
   15d9c:	bne	15db4 <__assert_fail@plt+0x3dac>
   15da0:	b	15e30 <__assert_fail@plt+0x3e28>
   15da4:	ldrb	ip, [r3]
   15da8:	add	r3, r3, #1
   15dac:	cmp	lr, ip
   15db0:	beq	15e30 <__assert_fail@plt+0x3e28>
   15db4:	cmp	r1, r3
   15db8:	mov	r0, r3
   15dbc:	bne	15da4 <__assert_fail@plt+0x3d9c>
   15dc0:	cmp	r1, r0
   15dc4:	bls	15e20 <__assert_fail@plt+0x3e18>
   15dc8:	subs	r5, r5, #1
   15dcc:	bcs	15d90 <__assert_fail@plt+0x3d88>
   15dd0:	ldrb	r3, [r2, #24]
   15dd4:	cmp	r3, #0
   15dd8:	beq	15e20 <__assert_fail@plt+0x3e18>
   15ddc:	ldrb	r3, [r0]
   15de0:	ldr	lr, [pc, #236]	; 15ed4 <__assert_fail@plt+0x3ecc>
   15de4:	add	r3, lr, r3
   15de8:	ldrb	r3, [r3, #784]	; 0x310
   15dec:	cmp	r3, #0
   15df0:	beq	15e20 <__assert_fail@plt+0x3e18>
   15df4:	add	r3, r0, #1
   15df8:	b	15e14 <__assert_fail@plt+0x3e0c>
   15dfc:	ldrb	r2, [r3]
   15e00:	add	r3, r3, #1
   15e04:	add	r2, lr, r2
   15e08:	ldrb	r2, [r2, #784]	; 0x310
   15e0c:	cmp	r2, #0
   15e10:	beq	15e20 <__assert_fail@plt+0x3e18>
   15e14:	cmp	r1, r3
   15e18:	mov	r0, r3
   15e1c:	bhi	15dfc <__assert_fail@plt+0x3df4>
   15e20:	add	r0, r0, r4
   15e24:	cmp	r1, r0
   15e28:	movcc	r0, r1
   15e2c:	pop	{r4, r5, pc}
   15e30:	add	r0, r0, #1
   15e34:	b	15dc0 <__assert_fail@plt+0x3db8>
   15e38:	cmp	r1, r0
   15e3c:	bls	15e20 <__assert_fail@plt+0x3e18>
   15e40:	cmp	r5, #0
   15e44:	sub	r5, r5, #1
   15e48:	ldrne	lr, [pc, #132]	; 15ed4 <__assert_fail@plt+0x3ecc>
   15e4c:	beq	15dd0 <__assert_fail@plt+0x3dc8>
   15e50:	ldrb	r3, [r0]
   15e54:	add	r3, lr, r3
   15e58:	ldrb	r3, [r3, #784]	; 0x310
   15e5c:	cmp	r3, #0
   15e60:	addne	r3, r0, #1
   15e64:	bne	15e84 <__assert_fail@plt+0x3e7c>
   15e68:	b	15e94 <__assert_fail@plt+0x3e8c>
   15e6c:	ldrb	ip, [r3]
   15e70:	add	r3, r3, #1
   15e74:	add	ip, lr, ip
   15e78:	ldrb	ip, [ip, #784]	; 0x310
   15e7c:	cmp	ip, #0
   15e80:	beq	15e94 <__assert_fail@plt+0x3e8c>
   15e84:	cmp	r3, r1
   15e88:	mov	r0, r3
   15e8c:	bne	15e6c <__assert_fail@plt+0x3e64>
   15e90:	b	15e20 <__assert_fail@plt+0x3e18>
   15e94:	add	ip, r0, #1
   15e98:	b	15eb4 <__assert_fail@plt+0x3eac>
   15e9c:	ldrb	r3, [ip]
   15ea0:	add	ip, ip, #1
   15ea4:	add	r3, lr, r3
   15ea8:	ldrb	r3, [r3, #784]	; 0x310
   15eac:	cmp	r3, #0
   15eb0:	bne	15ec4 <__assert_fail@plt+0x3ebc>
   15eb4:	cmp	r1, ip
   15eb8:	mov	r0, ip
   15ebc:	bhi	15e9c <__assert_fail@plt+0x3e94>
   15ec0:	b	15e20 <__assert_fail@plt+0x3e18>
   15ec4:	subs	r5, r5, #1
   15ec8:	bcs	15e50 <__assert_fail@plt+0x3e48>
   15ecc:	b	15dd0 <__assert_fail@plt+0x3dc8>
   15ed0:	andeq	ip, r3, r8, ror #3
   15ed4:	andeq	ip, r3, r8, ror #5
   15ed8:	ldr	r3, [pc, #404]	; 16074 <__assert_fail@plt+0x406c>
   15edc:	push	{r4, r5, lr}
   15ee0:	sub	r1, r1, #1
   15ee4:	ldr	r4, [r2, #12]
   15ee8:	ldr	r5, [r2, #8]
   15eec:	ldr	lr, [r3]
   15ef0:	cmp	r4, #0
   15ef4:	addeq	r5, r5, #1
   15ef8:	cmp	lr, #256	; 0x100
   15efc:	add	r1, r0, r1
   15f00:	beq	15fdc <__assert_fail@plt+0x3fd4>
   15f04:	cmp	r1, r0
   15f08:	bls	15f58 <__assert_fail@plt+0x3f50>
   15f0c:	cmp	r5, #0
   15f10:	sub	r5, r5, #1
   15f14:	beq	15f58 <__assert_fail@plt+0x3f50>
   15f18:	ldrb	r3, [r0]
   15f1c:	cmp	lr, r3
   15f20:	addne	r3, r0, #1
   15f24:	bne	15f3c <__assert_fail@plt+0x3f34>
   15f28:	b	15fc8 <__assert_fail@plt+0x3fc0>
   15f2c:	ldrb	ip, [r3]
   15f30:	add	r3, r3, #1
   15f34:	cmp	lr, ip
   15f38:	beq	15fc8 <__assert_fail@plt+0x3fc0>
   15f3c:	cmp	r1, r3
   15f40:	mov	r0, r3
   15f44:	bne	15f2c <__assert_fail@plt+0x3f24>
   15f48:	cmp	r1, r0
   15f4c:	bls	15f58 <__assert_fail@plt+0x3f50>
   15f50:	subs	r5, r5, #1
   15f54:	bcs	15f18 <__assert_fail@plt+0x3f10>
   15f58:	cmp	r4, #0
   15f5c:	popeq	{r4, r5, pc}
   15f60:	ldrb	r3, [r2, #25]
   15f64:	cmp	r3, #0
   15f68:	beq	15fb8 <__assert_fail@plt+0x3fb0>
   15f6c:	cmp	r1, r0
   15f70:	bls	15fb8 <__assert_fail@plt+0x3fb0>
   15f74:	ldrb	r3, [r0]
   15f78:	ldr	lr, [pc, #248]	; 16078 <__assert_fail@plt+0x4070>
   15f7c:	add	r3, lr, r3
   15f80:	ldrb	r3, [r3, #784]	; 0x310
   15f84:	cmp	r3, #0
   15f88:	beq	15fb8 <__assert_fail@plt+0x3fb0>
   15f8c:	add	r3, r0, #1
   15f90:	b	15fac <__assert_fail@plt+0x3fa4>
   15f94:	ldrb	r2, [r3]
   15f98:	add	r3, r3, #1
   15f9c:	add	r2, lr, r2
   15fa0:	ldrb	r2, [r2, #784]	; 0x310
   15fa4:	cmp	r2, #0
   15fa8:	beq	15fb8 <__assert_fail@plt+0x3fb0>
   15fac:	cmp	r1, r3
   15fb0:	mov	r0, r3
   15fb4:	bne	15f94 <__assert_fail@plt+0x3f8c>
   15fb8:	add	r0, r0, r4
   15fbc:	cmp	r1, r0
   15fc0:	movcc	r0, r1
   15fc4:	pop	{r4, r5, pc}
   15fc8:	orrs	r3, r4, r5
   15fcc:	bne	15fd4 <__assert_fail@plt+0x3fcc>
   15fd0:	pop	{r4, r5, pc}
   15fd4:	add	r0, r0, #1
   15fd8:	b	15f48 <__assert_fail@plt+0x3f40>
   15fdc:	cmp	r1, r0
   15fe0:	bls	15f58 <__assert_fail@plt+0x3f50>
   15fe4:	cmp	r5, #0
   15fe8:	sub	r5, r5, #1
   15fec:	ldrne	lr, [pc, #132]	; 16078 <__assert_fail@plt+0x4070>
   15ff0:	beq	15f58 <__assert_fail@plt+0x3f50>
   15ff4:	ldrb	r3, [r0]
   15ff8:	add	r3, lr, r3
   15ffc:	ldrb	r3, [r3, #784]	; 0x310
   16000:	cmp	r3, #0
   16004:	addne	r3, r0, #1
   16008:	bne	16028 <__assert_fail@plt+0x4020>
   1600c:	b	16038 <__assert_fail@plt+0x4030>
   16010:	ldrb	ip, [r3]
   16014:	add	r3, r3, #1
   16018:	add	ip, lr, ip
   1601c:	ldrb	ip, [ip, #784]	; 0x310
   16020:	cmp	ip, #0
   16024:	beq	16038 <__assert_fail@plt+0x4030>
   16028:	cmp	r3, r1
   1602c:	mov	r0, r3
   16030:	bne	16010 <__assert_fail@plt+0x4008>
   16034:	b	15f58 <__assert_fail@plt+0x3f50>
   16038:	add	ip, r0, #1
   1603c:	b	16058 <__assert_fail@plt+0x4050>
   16040:	ldrb	r3, [ip]
   16044:	add	ip, ip, #1
   16048:	add	r3, lr, r3
   1604c:	ldrb	r3, [r3, #784]	; 0x310
   16050:	cmp	r3, #0
   16054:	bne	16068 <__assert_fail@plt+0x4060>
   16058:	cmp	r1, ip
   1605c:	mov	r0, ip
   16060:	bhi	16040 <__assert_fail@plt+0x4038>
   16064:	b	15f58 <__assert_fail@plt+0x3f50>
   16068:	subs	r5, r5, #1
   1606c:	bcs	15ff4 <__assert_fail@plt+0x3fec>
   16070:	b	15f58 <__assert_fail@plt+0x3f50>
   16074:	andeq	ip, r3, r8, ror #3
   16078:	andeq	ip, r3, r8, ror #5
   1607c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16080:	sub	sp, sp, #44	; 0x2c
   16084:	ldrb	r5, [r0, #24]
   16088:	cmp	r5, #0
   1608c:	bne	162b0 <__assert_fail@plt+0x42a8>
   16090:	ldr	r3, [r0, #4]
   16094:	str	r2, [sp, #28]
   16098:	str	r1, [sp, #24]
   1609c:	ldr	r2, [r0, #16]
   160a0:	mov	r1, r0
   160a4:	str	r0, [sp, #16]
   160a8:	ldr	r0, [pc, #720]	; 16380 <__assert_fail@plt+0x4378>
   160ac:	cmp	r3, r2
   160b0:	ldr	r6, [r0, #1040]	; 0x410
   160b4:	ldr	r0, [pc, #712]	; 16384 <__assert_fail@plt+0x437c>
   160b8:	ldrb	r0, [r0, #4]
   160bc:	str	r0, [sp, #4]
   160c0:	ldr	r0, [pc, #700]	; 16384 <__assert_fail@plt+0x437c>
   160c4:	ldr	r7, [r0, #8]
   160c8:	ldr	r0, [r1, #20]
   160cc:	str	r0, [sp, #8]
   160d0:	beq	162bc <__assert_fail@plt+0x42b4>
   160d4:	ldr	r0, [r1]
   160d8:	sub	r3, r3, r2
   160dc:	mov	r4, r1
   160e0:	add	r1, r0, r3
   160e4:	bl	11b34 <memmove@plt>
   160e8:	ldr	r2, [r4, #16]
   160ec:	ldr	r1, [sp, #16]
   160f0:	mov	r3, r5
   160f4:	stmib	r4, {r2, r5}
   160f8:	ldr	fp, [r1, #12]
   160fc:	ldr	r5, [r1]
   16100:	ldr	r1, [sp, #8]
   16104:	sub	r7, r7, #18
   16108:	mov	sl, fp
   1610c:	add	r1, r1, #1
   16110:	str	r1, [sp, #12]
   16114:	ldr	r1, [sp, #8]
   16118:	add	sl, r5, sl
   1611c:	add	r4, r5, r2
   16120:	mul	r8, r3, r1
   16124:	cmp	r3, #0
   16128:	sub	r8, sl, r8
   1612c:	sub	r8, r8, r4
   16130:	sub	sl, sl, r3, lsl #4
   16134:	ldmne	sl, {r3, r5}
   16138:	addne	r5, r5, r3
   1613c:	ldr	r3, [sp, #12]
   16140:	cmp	r8, r3
   16144:	bls	1633c <__assert_fail@plt+0x4334>
   16148:	mov	r1, r3
   1614c:	sub	r0, r8, #1
   16150:	bl	28518 <_obstack_memory_used@@Base+0x8c>
   16154:	ldr	fp, [sp, #24]
   16158:	mov	r1, #1
   1615c:	mov	r3, fp
   16160:	mov	r9, r0
   16164:	mov	r2, r0
   16168:	mov	r0, r4
   1616c:	bl	11fa8 <fread_unlocked@plt>
   16170:	cmp	r9, r0
   16174:	sub	r8, r8, r0
   16178:	add	r9, r4, r0
   1617c:	beq	161cc <__assert_fail@plt+0x41c4>
   16180:	ldr	r3, [fp]
   16184:	tst	r3, #32
   16188:	bne	16368 <__assert_fail@plt+0x4360>
   1618c:	tst	r3, #16
   16190:	beq	161cc <__assert_fail@plt+0x41c4>
   16194:	ldr	r2, [sp, #16]
   16198:	mov	r1, #1
   1619c:	ldr	r3, [r2]
   161a0:	strb	r1, [r2, #24]
   161a4:	cmp	r9, r3
   161a8:	beq	162b0 <__assert_fail@plt+0x42a8>
   161ac:	cmp	r5, r9
   161b0:	beq	161cc <__assert_fail@plt+0x41c4>
   161b4:	ldrb	r3, [r9, #-1]
   161b8:	ldr	r2, [sp, #4]
   161bc:	cmp	r3, r2
   161c0:	movne	r3, r2
   161c4:	strbne	r3, [r9]
   161c8:	addne	r9, r9, #1
   161cc:	mov	fp, sl
   161d0:	str	r9, [sp, #20]
   161d4:	b	161f4 <__assert_fail@plt+0x41ec>
   161d8:	mov	r1, sl
   161dc:	mov	r0, r5
   161e0:	mov	r2, r6
   161e4:	bl	15d58 <__assert_fail@plt+0x3d50>
   161e8:	str	r0, [fp, #-8]
   161ec:	sub	fp, fp, #16
   161f0:	mov	r5, r4
   161f4:	sub	r2, r9, r4
   161f8:	mov	r0, r4
   161fc:	ldr	r1, [sp, #4]
   16200:	bl	11ea0 <memchr@plt>
   16204:	mov	sl, fp
   16208:	cmp	r0, #0
   1620c:	beq	162c4 <__assert_fail@plt+0x42bc>
   16210:	ldr	r3, [sp, #8]
   16214:	mov	r4, r0
   16218:	sub	r8, r8, r3
   1621c:	mov	r3, #0
   16220:	strb	r3, [r4], #1
   16224:	sub	sl, r4, r5
   16228:	cmp	r7, sl
   1622c:	movcc	r7, sl
   16230:	cmp	r6, #0
   16234:	str	r5, [fp, #-16]
   16238:	str	sl, [fp, #-12]
   1623c:	beq	161ec <__assert_fail@plt+0x41e4>
   16240:	ldr	r2, [r6, #8]
   16244:	cmn	r2, #1
   16248:	beq	1625c <__assert_fail@plt+0x4254>
   1624c:	mov	r2, r6
   16250:	mov	r1, sl
   16254:	mov	r0, r5
   16258:	bl	15ed8 <__assert_fail@plt+0x3ed0>
   1625c:	ldr	r2, [r6]
   16260:	str	r0, [fp, #-4]
   16264:	cmn	r2, #1
   16268:	bne	161d8 <__assert_fail@plt+0x41d0>
   1626c:	ldrb	r2, [r6, #24]
   16270:	cmp	r2, #0
   16274:	beq	162a8 <__assert_fail@plt+0x42a0>
   16278:	ldrb	r2, [r5]
   1627c:	ldr	r3, [pc, #252]	; 16380 <__assert_fail@plt+0x4378>
   16280:	add	r2, r3, r2
   16284:	ldrb	r2, [r2, #784]	; 0x310
   16288:	cmp	r2, #0
   1628c:	beq	162a8 <__assert_fail@plt+0x42a0>
   16290:	ldrb	r3, [r5, #1]!
   16294:	ldr	r2, [pc, #228]	; 16380 <__assert_fail@plt+0x4378>
   16298:	add	r3, r2, r3
   1629c:	ldrb	r3, [r3, #784]	; 0x310
   162a0:	cmp	r3, #0
   162a4:	bne	16290 <__assert_fail@plt+0x4288>
   162a8:	str	r5, [fp, #-8]
   162ac:	b	161ec <__assert_fail@plt+0x41e4>
   162b0:	mov	r0, #0
   162b4:	add	sp, sp, #44	; 0x2c
   162b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162bc:	ldr	r3, [r1, #8]
   162c0:	b	160f8 <__assert_fail@plt+0x40f0>
   162c4:	ldr	r3, [sp, #16]
   162c8:	mov	r4, r9
   162cc:	ldrb	r3, [r3, #24]
   162d0:	cmp	r3, #0
   162d4:	beq	1613c <__assert_fail@plt+0x4134>
   162d8:	ldr	ip, [sp, #16]
   162dc:	ldr	r3, [sp, #20]
   162e0:	ldr	r0, [ip]
   162e4:	ldr	r2, [ip, #12]
   162e8:	sub	r1, r3, r0
   162ec:	add	r3, r0, r2
   162f0:	sub	r3, r3, sl
   162f4:	str	r1, [ip, #4]
   162f8:	asr	r3, r3, #4
   162fc:	cmp	r3, #0
   16300:	str	r3, [ip, #8]
   16304:	bne	16344 <__assert_fail@plt+0x433c>
   16308:	lsr	r3, r2, #4
   1630c:	add	r1, sp, #36	; 0x24
   16310:	mov	r2, #16
   16314:	str	r3, [sp, #36]	; 0x24
   16318:	bl	26388 <__assert_fail@plt+0x14380>
   1631c:	ldr	sl, [sp, #36]	; 0x24
   16320:	ldr	r3, [sp, #16]
   16324:	lsl	sl, sl, #4
   16328:	str	sl, [r3, #12]
   1632c:	str	r0, [r3]
   16330:	mov	r5, r0
   16334:	ldmib	r3, {r2, r3}
   16338:	b	16114 <__assert_fail@plt+0x410c>
   1633c:	str	r4, [sp, #20]
   16340:	b	162d8 <__assert_fail@plt+0x42d0>
   16344:	ldr	r3, [sp, #20]
   16348:	add	r7, r7, #18
   1634c:	sub	r5, r3, r5
   16350:	ldr	r3, [pc, #44]	; 16384 <__assert_fail@plt+0x437c>
   16354:	mov	r0, #1
   16358:	str	r5, [ip, #16]
   1635c:	str	r7, [r3, #8]
   16360:	add	sp, sp, #44	; 0x2c
   16364:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16368:	ldr	r1, [pc, #24]	; 16388 <__assert_fail@plt+0x4380>
   1636c:	mov	r2, #5
   16370:	mov	r0, #0
   16374:	bl	11c0c <dcgettext@plt>
   16378:	ldr	r1, [sp, #28]
   1637c:	bl	15c10 <__assert_fail@plt+0x3c08>
   16380:	andeq	ip, r3, r8, ror #5
   16384:	andeq	ip, r3, r8, ror #3
   16388:	andeq	r9, r2, r8, lsl #7
   1638c:	ldr	r2, [r0, #40]	; 0x28
   16390:	ldr	r3, [r1, #40]	; 0x28
   16394:	cmp	r2, r3
   16398:	beq	163a8 <__assert_fail@plt+0x43a0>
   1639c:	movcc	r0, #1
   163a0:	movcs	r0, #0
   163a4:	bx	lr
   163a8:	ldr	r3, [r0, #20]
   163ac:	ldr	r2, [r1, #20]
   163b0:	ldr	r0, [r0, #24]
   163b4:	ldr	r1, [r1, #24]
   163b8:	add	r0, r3, r0
   163bc:	add	r3, r2, r1
   163c0:	cmp	r0, r3
   163c4:	movcs	r0, #0
   163c8:	movcc	r0, #1
   163cc:	bx	lr
   163d0:	push	{r4, r5, r6, lr}
   163d4:	sub	sp, sp, #24
   163d8:	ldr	r3, [pc, #188]	; 1649c <__assert_fail@plt+0x4494>
   163dc:	mov	r5, r1
   163e0:	mov	r4, r2
   163e4:	str	r3, [sp]
   163e8:	mov	r2, #10
   163ec:	add	r3, sp, #16
   163f0:	add	r1, sp, #12
   163f4:	mov	r6, r0
   163f8:	bl	26b88 <__assert_fail@plt+0x14b80>
   163fc:	cmp	r0, #4
   16400:	ldrls	pc, [pc, r0, lsl #2]
   16404:	b	1643c <__assert_fail@plt+0x4434>
   16408:	andeq	r6, r1, ip, lsl r4
   1640c:	andeq	r6, r1, r4, lsr r4
   16410:	andeq	r6, r1, ip, lsl r4
   16414:	andeq	r6, r1, r4, lsr r4
   16418:	andeq	r6, r1, r8, asr #8
   1641c:	ldrd	r2, [sp, #16]
   16420:	mov	r1, #0
   16424:	cmp	r3, r1
   16428:	cmpeq	r2, r2
   1642c:	str	r2, [r5]
   16430:	beq	1643c <__assert_fail@plt+0x4434>
   16434:	mvn	r3, #0
   16438:	str	r3, [r5]
   1643c:	ldr	r0, [sp, #12]
   16440:	add	sp, sp, #24
   16444:	pop	{r4, r5, r6, pc}
   16448:	cmp	r4, #0
   1644c:	moveq	r0, r4
   16450:	beq	16440 <__assert_fail@plt+0x4438>
   16454:	mov	r2, #5
   16458:	ldr	r1, [pc, #64]	; 164a0 <__assert_fail@plt+0x4498>
   1645c:	mov	r0, #0
   16460:	bl	11c0c <dcgettext@plt>
   16464:	mov	r1, r4
   16468:	mov	r2, #5
   1646c:	mov	r5, r0
   16470:	mov	r0, #0
   16474:	bl	11c0c <dcgettext@plt>
   16478:	mov	r4, r0
   1647c:	mov	r0, r6
   16480:	bl	244f4 <__assert_fail@plt+0x124ec>
   16484:	mov	r3, r4
   16488:	mov	r2, r5
   1648c:	mov	r1, #0
   16490:	str	r0, [sp]
   16494:	mov	r0, #2
   16498:	bl	11d50 <error@plt>
   1649c:	andeq	r9, r2, r8, asr fp
   164a0:	muleq	r2, r4, r3
   164a4:	push	{r4, lr}
   164a8:	mov	r2, #5
   164ac:	mov	r4, r0
   164b0:	ldr	r1, [pc, #12]	; 164c4 <__assert_fail@plt+0x44bc>
   164b4:	mov	r0, #0
   164b8:	bl	11c0c <dcgettext@plt>
   164bc:	mov	r1, r4
   164c0:	bl	15c10 <__assert_fail@plt+0x3c08>
   164c4:			; <UNDEFINED> instruction: 0x000293b8
   164c8:	push	{r4, r5, r6, lr}
   164cc:	mov	r5, r1
   164d0:	mov	r4, r0
   164d4:	bl	11e88 <fileno@plt>
   164d8:	cmp	r0, #0
   164dc:	beq	16528 <__assert_fail@plt+0x4520>
   164e0:	cmp	r0, #1
   164e4:	bne	16510 <__assert_fail@plt+0x4508>
   164e8:	mov	r0, r4
   164ec:	bl	11c90 <fflush_unlocked@plt>
   164f0:	cmp	r0, #0
   164f4:	popeq	{r4, r5, r6, pc}
   164f8:	ldr	r1, [pc, #52]	; 16534 <__assert_fail@plt+0x452c>
   164fc:	mov	r2, #5
   16500:	mov	r0, #0
   16504:	bl	11c0c <dcgettext@plt>
   16508:	mov	r1, r5
   1650c:	bl	15c10 <__assert_fail@plt+0x3c08>
   16510:	mov	r0, r4
   16514:	bl	1d95c <__assert_fail@plt+0xb954>
   16518:	cmp	r0, #0
   1651c:	popeq	{r4, r5, r6, pc}
   16520:	mov	r0, r5
   16524:	bl	12018 <__assert_fail@plt+0x10>
   16528:	mov	r0, r4
   1652c:	pop	{r4, r5, r6, lr}
   16530:	b	11f48 <clearerr_unlocked@plt>
   16534:	ldrdeq	r9, [r2], -r4
   16538:	push	{r4, lr}
   1653c:	mov	r4, r0
   16540:	bl	11c3c <dup2@plt>
   16544:	mov	r0, r4
   16548:	pop	{r4, lr}
   1654c:	b	11ff0 <close@plt>
   16550:	push	{r4, r5, r6, r7, r8, lr}
   16554:	subs	r4, r0, #0
   16558:	beq	16574 <__assert_fail@plt+0x456c>
   1655c:	mov	r2, #0
   16560:	mov	r3, #0
   16564:	mov	r0, #1
   16568:	bl	11bdc <ftruncate64@plt>
   1656c:	cmp	r0, #0
   16570:	bne	16580 <__assert_fail@plt+0x4578>
   16574:	ldr	r3, [pc, #148]	; 16610 <__assert_fail@plt+0x4608>
   16578:	ldr	r0, [r3]
   1657c:	pop	{r4, r5, r6, r7, r8, pc}
   16580:	bl	11e34 <__errno_location@plt>
   16584:	ldr	r5, [pc, #136]	; 16614 <__assert_fail@plt+0x460c>
   16588:	ldr	r3, [r5, #1044]	; 0x414
   1658c:	cmp	r3, #0
   16590:	mov	r6, r0
   16594:	ldr	r7, [r0]
   16598:	beq	165ec <__assert_fail@plt+0x45e4>
   1659c:	cmp	r3, #0
   165a0:	bge	165b4 <__assert_fail@plt+0x45ac>
   165a4:	ldr	r3, [r5, #1064]	; 0x428
   165a8:	and	r3, r3, #61440	; 0xf000
   165ac:	cmp	r3, #32768	; 0x8000
   165b0:	bne	16574 <__assert_fail@plt+0x456c>
   165b4:	mov	r2, #5
   165b8:	ldr	r1, [pc, #88]	; 16618 <__assert_fail@plt+0x4610>
   165bc:	mov	r0, #0
   165c0:	bl	11c0c <dcgettext@plt>
   165c4:	mov	r2, r4
   165c8:	mov	r1, #3
   165cc:	mov	r5, r0
   165d0:	mov	r0, #0
   165d4:	bl	23600 <__assert_fail@plt+0x115f8>
   165d8:	mov	r2, r5
   165dc:	mov	r1, r7
   165e0:	mov	r3, r0
   165e4:	mov	r0, #2
   165e8:	bl	11d50 <error@plt>
   165ec:	ldr	r2, [pc, #40]	; 1661c <__assert_fail@plt+0x4614>
   165f0:	mov	r1, #1
   165f4:	mov	r0, #3
   165f8:	bl	11ca8 <__fxstat64@plt>
   165fc:	cmp	r0, #0
   16600:	mvneq	r3, #0
   16604:	ldrne	r3, [r6]
   16608:	str	r3, [r5, #1044]	; 0x414
   1660c:	b	1659c <__assert_fail@plt+0x4594>
   16610:	ldrdeq	ip, [r3], -ip	; <UNPREDICTABLE>
   16614:	andeq	ip, r3, r8, ror #5
   16618:	andeq	r9, r2, r4, ror #7
   1661c:	andeq	ip, r3, r0, lsl #14
   16620:	push	{r4, r5, lr}
   16624:	sub	sp, sp, #20
   16628:	mov	r2, #0
   1662c:	mov	r1, sp
   16630:	mvn	r0, #0
   16634:	bl	11cfc <waitpid@plt>
   16638:	subs	r4, r0, #0
   1663c:	blt	166cc <__assert_fail@plt+0x46c4>
   16640:	beq	1668c <__assert_fail@plt+0x4684>
   16644:	ldr	r5, [pc, #192]	; 1670c <__assert_fail@plt+0x4704>
   16648:	add	r1, sp, #4
   1664c:	str	r4, [sp, #8]
   16650:	ldr	r0, [r5, #1156]	; 0x484
   16654:	bl	1f5b4 <__assert_fail@plt+0xd5ac>
   16658:	cmp	r0, #0
   1665c:	beq	1668c <__assert_fail@plt+0x4684>
   16660:	ldr	r3, [sp]
   16664:	mov	r2, #2
   16668:	tst	r3, #127	; 0x7f
   1666c:	strb	r2, [r0, #8]
   16670:	bne	16698 <__assert_fail@plt+0x4690>
   16674:	asr	r3, r3, #8
   16678:	tst	r3, #255	; 0xff
   1667c:	bne	16698 <__assert_fail@plt+0x4690>
   16680:	ldr	r3, [r5, #1160]	; 0x488
   16684:	sub	r3, r3, #1
   16688:	str	r3, [r5, #1160]	; 0x488
   1668c:	mov	r0, r4
   16690:	add	sp, sp, #20
   16694:	pop	{r4, r5, pc}
   16698:	mov	r2, #5
   1669c:	ldr	r1, [pc, #108]	; 16710 <__assert_fail@plt+0x4708>
   166a0:	mov	r0, #0
   166a4:	bl	11c0c <dcgettext@plt>
   166a8:	ldr	r1, [r5, #1152]	; 0x480
   166ac:	mov	r4, r0
   166b0:	mov	r0, #4
   166b4:	bl	22b84 <__assert_fail@plt+0x10b7c>
   166b8:	mov	r2, r4
   166bc:	mov	r1, #0
   166c0:	mov	r3, r0
   166c4:	mov	r0, #2
   166c8:	bl	11d50 <error@plt>
   166cc:	bl	11e34 <__errno_location@plt>
   166d0:	mov	r2, #5
   166d4:	ldr	r1, [pc, #56]	; 16714 <__assert_fail@plt+0x470c>
   166d8:	ldr	r4, [r0]
   166dc:	mov	r0, #0
   166e0:	bl	11c0c <dcgettext@plt>
   166e4:	ldr	r3, [pc, #32]	; 1670c <__assert_fail@plt+0x4704>
   166e8:	ldr	r1, [r3, #1152]	; 0x480
   166ec:	mov	r5, r0
   166f0:	mov	r0, #4
   166f4:	bl	22b84 <__assert_fail@plt+0x10b7c>
   166f8:	mov	r2, r5
   166fc:	mov	r1, r4
   16700:	mov	r3, r0
   16704:	mov	r0, #2
   16708:	bl	11d50 <error@plt>
   1670c:	andeq	ip, r3, r8, ror #5
   16710:	andeq	r9, r2, r0, lsl r4
   16714:	strdeq	r9, [r2], -ip
   16718:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1671c:	sub	sp, sp, #28
   16720:	ldr	r6, [r0]
   16724:	ldr	r5, [r0, #4]
   16728:	subs	r7, r2, #0
   1672c:	str	r0, [sp, #4]
   16730:	mov	r3, r1
   16734:	add	r4, r6, r5
   16738:	beq	16770 <__assert_fail@plt+0x4768>
   1673c:	ldr	r2, [pc, #1436]	; 16ce0 <__assert_fail@plt+0x4cd8>
   16740:	mov	r0, r6
   16744:	mov	r1, #1
   16748:	ldrb	ip, [r2, #4]
   1674c:	mov	r2, r5
   16750:	strb	ip, [r4, #-1]
   16754:	bl	11be8 <fwrite_unlocked@plt>
   16758:	cmp	r5, r0
   1675c:	moveq	r3, #0
   16760:	strbeq	r3, [r4, #-1]
   16764:	bne	16cbc <__assert_fail@plt+0x4cb4>
   16768:	add	sp, sp, #28
   1676c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16770:	ldr	r9, [pc, #1388]	; 16ce4 <__assert_fail@plt+0x4cdc>
   16774:	ldrb	r2, [r9, #1164]	; 0x48c
   16778:	cmp	r2, #0
   1677c:	str	r2, [sp, #8]
   16780:	beq	1673c <__assert_fail@plt+0x4734>
   16784:	cmp	r6, r4
   16788:	bcs	16818 <__assert_fail@plt+0x4810>
   1678c:	mov	r7, #62	; 0x3e
   16790:	mov	r5, #10
   16794:	mov	r8, r1
   16798:	b	167cc <__assert_fail@plt+0x47c4>
   1679c:	cmp	r4, r6
   167a0:	beq	16cd4 <__assert_fail@plt+0x4ccc>
   167a4:	mov	r1, r2
   167a8:	ldr	r0, [r8, #20]
   167ac:	ldr	r3, [r8, #24]
   167b0:	cmp	r0, r3
   167b4:	addcc	r3, r0, #1
   167b8:	strcc	r3, [r8, #20]
   167bc:	strbcc	r2, [r0]
   167c0:	bcs	167e4 <__assert_fail@plt+0x47dc>
   167c4:	cmp	r4, r6
   167c8:	beq	1680c <__assert_fail@plt+0x4804>
   167cc:	ldrb	r2, [r6], #1
   167d0:	cmp	r2, #9
   167d4:	bne	1679c <__assert_fail@plt+0x4794>
   167d8:	mov	r1, r7
   167dc:	mov	r2, #62	; 0x3e
   167e0:	b	167a8 <__assert_fail@plt+0x47a0>
   167e4:	mov	r0, r8
   167e8:	bl	11edc <__overflow@plt>
   167ec:	cmn	r0, #1
   167f0:	bne	167c4 <__assert_fail@plt+0x47bc>
   167f4:	ldr	r1, [pc, #1260]	; 16ce8 <__assert_fail@plt+0x4ce0>
   167f8:	mov	r2, #5
   167fc:	mov	r0, #0
   16800:	bl	11c0c <dcgettext@plt>
   16804:	mov	r1, #0
   16808:	bl	15c10 <__assert_fail@plt+0x3c08>
   1680c:	ldr	r3, [sp, #4]
   16810:	ldr	r6, [r3]
   16814:	ldr	r5, [r3, #4]
   16818:	ldr	fp, [r9, #1040]	; 0x410
   1681c:	sub	r7, r5, #1
   16820:	cmp	fp, #0
   16824:	ldr	r8, [pc, #1216]	; 16cec <__assert_fail@plt+0x4ce4>
   16828:	add	r7, r6, r7
   1682c:	beq	16ae0 <__assert_fail@plt+0x4ad8>
   16830:	ldr	sl, [fp]
   16834:	cmn	sl, #1
   16838:	beq	16b28 <__assert_fail@plt+0x4b20>
   1683c:	mov	r2, fp
   16840:	mov	r1, r5
   16844:	mov	r0, r6
   16848:	bl	15d58 <__assert_fail@plt+0x3d50>
   1684c:	ldr	r2, [fp, #8]
   16850:	cmn	r2, #1
   16854:	mov	r4, r0
   16858:	beq	16888 <__assert_fail@plt+0x4880>
   1685c:	mov	r1, r5
   16860:	mov	r2, fp
   16864:	mov	r0, r6
   16868:	bl	15ed8 <__assert_fail@plt+0x3ed0>
   1686c:	mov	r7, r0
   16870:	ldrb	r2, [fp, #24]
   16874:	cmn	sl, #1
   16878:	movne	sl, #0
   1687c:	moveq	sl, #1
   16880:	tst	sl, r2
   16884:	bne	168ac <__assert_fail@plt+0x48a4>
   16888:	ldrb	r2, [fp, #30]
   1688c:	cmp	r2, #0
   16890:	bne	168ac <__assert_fail@plt+0x48a4>
   16894:	ldrb	r2, [fp, #26]
   16898:	cmp	r2, #0
   1689c:	bne	168ac <__assert_fail@plt+0x48a4>
   168a0:	ldrh	r2, [fp, #28]
   168a4:	cmp	r2, #0
   168a8:	beq	169d4 <__assert_fail@plt+0x49cc>
   168ac:	mov	r2, #0
   168b0:	ldrb	r3, [r7]
   168b4:	strb	r2, [r7]
   168b8:	ldrb	r2, [r4]
   168bc:	add	r2, r9, r2
   168c0:	ldrb	r2, [r2, #784]	; 0x310
   168c4:	cmp	r2, #0
   168c8:	beq	168e0 <__assert_fail@plt+0x48d8>
   168cc:	ldrb	r2, [r4, #1]!
   168d0:	add	r2, r9, r2
   168d4:	ldrb	r2, [r2, #784]	; 0x310
   168d8:	cmp	r2, #0
   168dc:	bne	168cc <__assert_fail@plt+0x48c4>
   168e0:	cmp	r4, r7
   168e4:	str	r4, [sp, #20]
   168e8:	bhi	16b20 <__assert_fail@plt+0x4b18>
   168ec:	ldrb	r2, [fp, #30]
   168f0:	cmp	r2, #0
   168f4:	bne	16b8c <__assert_fail@plt+0x4b84>
   168f8:	ldrb	lr, [fp, #28]
   168fc:	cmp	lr, #0
   16900:	bne	16c68 <__assert_fail@plt+0x4c60>
   16904:	ldrb	r2, [fp, #26]
   16908:	cmp	r2, #0
   1690c:	bne	1691c <__assert_fail@plt+0x4914>
   16910:	ldrb	r2, [fp, #29]
   16914:	cmp	r2, #0
   16918:	beq	16b20 <__assert_fail@plt+0x4b18>
   1691c:	cmp	r4, r7
   16920:	movcs	r1, lr
   16924:	ldrbcc	r1, [r4]
   16928:	ldr	sl, [r9, #1168]	; 0x490
   1692c:	mov	r5, lr
   16930:	subcc	r1, r1, #45	; 0x2d
   16934:	clzcc	r1, r1
   16938:	lsrcc	r1, r1, #5
   1693c:	mov	r0, #0
   16940:	ldrb	r2, [r4, r1]
   16944:	add	r1, r4, r1
   16948:	b	16970 <__assert_fail@plt+0x4968>
   1694c:	cmp	r0, r2
   16950:	movcc	r0, r2
   16954:	ldrb	r2, [r1, #1]
   16958:	cmp	r2, sl
   1695c:	addeq	ip, r1, #2
   16960:	ldreq	r5, [sp, #8]
   16964:	ldrbeq	r2, [r1, #2]
   16968:	movne	r5, lr
   1696c:	mov	r1, ip
   16970:	sub	ip, r2, #48	; 0x30
   16974:	cmp	ip, #9
   16978:	add	ip, r1, #1
   1697c:	bls	1694c <__assert_fail@plt+0x4944>
   16980:	cmp	r5, #0
   16984:	subne	r1, r1, #1
   16988:	bne	1699c <__assert_fail@plt+0x4994>
   1698c:	ldrb	lr, [r9, #1172]	; 0x494
   16990:	cmp	lr, r2
   16994:	beq	16c80 <__assert_fail@plt+0x4c78>
   16998:	sub	r1, ip, #1
   1699c:	cmp	r0, #47	; 0x2f
   169a0:	bls	169cc <__assert_fail@plt+0x49c4>
   169a4:	ldrb	r2, [fp, #29]
   169a8:	cmp	r2, #0
   169ac:	beq	169c4 <__assert_fail@plt+0x49bc>
   169b0:	ldrb	r2, [r1]
   169b4:	ldr	r0, [pc, #820]	; 16cf0 <__assert_fail@plt+0x4ce8>
   169b8:	ldrb	r2, [r0, r2]
   169bc:	adds	r2, r2, #0
   169c0:	movne	r2, #1
   169c4:	add	r1, r1, r2
   169c8:	str	r1, [sp, #20]
   169cc:	strb	r3, [r7]
   169d0:	ldr	r7, [sp, #20]
   169d4:	mov	sl, #32
   169d8:	mov	r2, #0
   169dc:	sub	r1, r4, r6
   169e0:	mov	r0, r6
   169e4:	bl	1fdc4 <__assert_fail@plt+0xddbc>
   169e8:	cmp	r4, r6
   169ec:	mov	r5, r0
   169f0:	bls	16a0c <__assert_fail@plt+0x4a04>
   169f4:	mov	r0, r6
   169f8:	ldrb	r3, [r0], #1
   169fc:	cmp	r3, #9
   16a00:	addeq	r5, r5, #1
   16a04:	cmp	r4, r0
   16a08:	bne	169f8 <__assert_fail@plt+0x49f0>
   16a0c:	mov	r2, #0
   16a10:	sub	r1, r7, r4
   16a14:	mov	r0, r4
   16a18:	bl	1fdc4 <__assert_fail@plt+0xddbc>
   16a1c:	cmp	r4, r7
   16a20:	mov	r6, r0
   16a24:	bcs	16af4 <__assert_fail@plt+0x4aec>
   16a28:	ldrb	r3, [r4], #1
   16a2c:	cmp	r3, #9
   16a30:	addeq	r6, r6, #1
   16a34:	cmp	r7, r4
   16a38:	bne	16a28 <__assert_fail@plt+0x4a20>
   16a3c:	cmp	r5, #0
   16a40:	bne	16afc <__assert_fail@plt+0x4af4>
   16a44:	cmp	r6, #0
   16a48:	movne	r4, #95	; 0x5f
   16a4c:	bne	16a68 <__assert_fail@plt+0x4a60>
   16a50:	b	16b3c <__assert_fail@plt+0x4b34>
   16a54:	add	r2, r3, #1
   16a58:	subs	r6, r6, #1
   16a5c:	str	r2, [r0, #20]
   16a60:	strb	r4, [r3]
   16a64:	beq	16a8c <__assert_fail@plt+0x4a84>
   16a68:	ldr	r0, [r8]
   16a6c:	ldr	r3, [r0, #20]
   16a70:	ldr	r2, [r0, #24]
   16a74:	cmp	r3, r2
   16a78:	bcc	16a54 <__assert_fail@plt+0x4a4c>
   16a7c:	mov	r1, r4
   16a80:	bl	11edc <__overflow@plt>
   16a84:	subs	r6, r6, #1
   16a88:	bne	16a68 <__assert_fail@plt+0x4a60>
   16a8c:	ldr	r0, [r8]
   16a90:	ldr	r3, [r0, #20]
   16a94:	ldr	r2, [r0, #24]
   16a98:	cmp	r3, r2
   16a9c:	addcc	r1, r3, #1
   16aa0:	movcc	r2, #10
   16aa4:	strcc	r1, [r0, #20]
   16aa8:	strbcc	r2, [r3]
   16aac:	bcs	16c5c <__assert_fail@plt+0x4c54>
   16ab0:	cmp	fp, #0
   16ab4:	beq	16768 <__assert_fail@plt+0x4760>
   16ab8:	ldr	fp, [fp, #36]	; 0x24
   16abc:	cmp	fp, #0
   16ac0:	beq	16b5c <__assert_fail@plt+0x4b54>
   16ac4:	ldr	r3, [sp, #4]
   16ac8:	cmp	fp, #0
   16acc:	ldr	r5, [r3, #4]
   16ad0:	ldr	r6, [r3]
   16ad4:	sub	r7, r5, #1
   16ad8:	add	r7, r6, r7
   16adc:	bne	16830 <__assert_fail@plt+0x4828>
   16ae0:	mov	r4, r6
   16ae4:	b	169d4 <__assert_fail@plt+0x49cc>
   16ae8:	mov	r1, sl
   16aec:	bl	11edc <__overflow@plt>
   16af0:	sub	r5, r5, #1
   16af4:	cmp	r5, #0
   16af8:	beq	16a44 <__assert_fail@plt+0x4a3c>
   16afc:	ldr	r0, [r8]
   16b00:	ldr	r3, [r0, #20]
   16b04:	ldr	r2, [r0, #24]
   16b08:	cmp	r3, r2
   16b0c:	addcc	r2, r3, #1
   16b10:	strcc	r2, [r0, #20]
   16b14:	strbcc	sl, [r3]
   16b18:	bcc	16af0 <__assert_fail@plt+0x4ae8>
   16b1c:	b	16ae8 <__assert_fail@plt+0x4ae0>
   16b20:	str	r7, [sp, #20]
   16b24:	b	169cc <__assert_fail@plt+0x49c4>
   16b28:	ldr	r2, [fp, #8]
   16b2c:	mov	r4, r6
   16b30:	cmn	r2, #1
   16b34:	bne	1685c <__assert_fail@plt+0x4854>
   16b38:	b	16870 <__assert_fail@plt+0x4868>
   16b3c:	mov	r2, #5
   16b40:	ldr	r1, [pc, #428]	; 16cf4 <__assert_fail@plt+0x4cec>
   16b44:	mov	r0, #0
   16b48:	bl	11c0c <dcgettext@plt>
   16b4c:	mov	r1, r0
   16b50:	mov	r0, #1
   16b54:	bl	11e70 <__printf_chk@plt>
   16b58:	b	16ab0 <__assert_fail@plt+0x4aa8>
   16b5c:	ldrb	r3, [r9, #1173]	; 0x495
   16b60:	cmp	r3, #0
   16b64:	bne	16768 <__assert_fail@plt+0x4760>
   16b68:	ldrb	r3, [r9, #1174]	; 0x496
   16b6c:	cmp	r3, #0
   16b70:	bne	16768 <__assert_fail@plt+0x4760>
   16b74:	ldr	r3, [sp, #4]
   16b78:	ldm	r3, {r4, r7}
   16b7c:	sub	r7, r7, #1
   16b80:	add	r7, r4, r7
   16b84:	mov	r6, r4
   16b88:	b	169d8 <__assert_fail@plt+0x49d0>
   16b8c:	ldrb	r2, [r4]
   16b90:	mov	lr, r4
   16b94:	add	r2, r9, r2
   16b98:	ldrb	r2, [r2, #784]	; 0x310
   16b9c:	cmp	r2, #0
   16ba0:	beq	16bb8 <__assert_fail@plt+0x4bb0>
   16ba4:	ldrb	r2, [lr, #1]!
   16ba8:	add	r2, r9, r2
   16bac:	ldrb	r2, [r2, #784]	; 0x310
   16bb0:	cmp	r2, #0
   16bb4:	bne	16ba4 <__assert_fail@plt+0x4b9c>
   16bb8:	mov	r2, #0
   16bbc:	str	r3, [sp, #12]
   16bc0:	mov	sl, #12
   16bc4:	mov	r3, r2
   16bc8:	add	r5, r3, sl
   16bcc:	ldr	r2, [pc, #268]	; 16ce0 <__assert_fail@plt+0x4cd8>
   16bd0:	lsr	r5, r5, #1
   16bd4:	add	r2, r2, r5, lsl #3
   16bd8:	ldr	ip, [r2, #12]
   16bdc:	ldrb	r1, [ip]
   16be0:	cmp	r1, #0
   16be4:	beq	16cb0 <__assert_fail@plt+0x4ca8>
   16be8:	ldrb	r2, [lr]
   16bec:	add	r2, r9, r2
   16bf0:	ldrb	r2, [r2, #512]	; 0x200
   16bf4:	cmp	r2, r1
   16bf8:	bcc	16c40 <__assert_fail@plt+0x4c38>
   16bfc:	addls	r1, lr, #1
   16c00:	bls	16c24 <__assert_fail@plt+0x4c1c>
   16c04:	b	16c54 <__assert_fail@plt+0x4c4c>
   16c08:	ldrb	r2, [r2]
   16c0c:	add	r1, r1, #1
   16c10:	add	r2, r9, r2
   16c14:	ldrb	r2, [r2, #512]	; 0x200
   16c18:	cmp	r0, r2
   16c1c:	bhi	16c40 <__assert_fail@plt+0x4c38>
   16c20:	bcc	16c54 <__assert_fail@plt+0x4c4c>
   16c24:	ldrb	r0, [ip, #1]!
   16c28:	mov	r2, r1
   16c2c:	cmp	r0, #0
   16c30:	bne	16c08 <__assert_fail@plt+0x4c00>
   16c34:	ldr	r3, [sp, #12]
   16c38:	str	r2, [sp, #20]
   16c3c:	b	169cc <__assert_fail@plt+0x49c4>
   16c40:	mov	sl, r5
   16c44:	cmp	r3, sl
   16c48:	bcc	16bc8 <__assert_fail@plt+0x4bc0>
   16c4c:	ldr	r3, [sp, #12]
   16c50:	b	169cc <__assert_fail@plt+0x49c4>
   16c54:	add	r3, r5, #1
   16c58:	b	16c44 <__assert_fail@plt+0x4c3c>
   16c5c:	mov	r1, #10
   16c60:	bl	11edc <__overflow@plt>
   16c64:	b	16ab0 <__assert_fail@plt+0x4aa8>
   16c68:	add	r1, sp, #20
   16c6c:	mov	r0, r4
   16c70:	str	r3, [sp, #12]
   16c74:	bl	11bd0 <strtold@plt>
   16c78:	ldr	r3, [sp, #12]
   16c7c:	b	169cc <__assert_fail@plt+0x49c4>
   16c80:	ldrb	r2, [r1, #1]
   16c84:	add	ip, r1, #2
   16c88:	sub	r1, r2, #48	; 0x30
   16c8c:	cmp	r1, #9
   16c90:	bhi	16998 <__assert_fail@plt+0x4990>
   16c94:	cmp	r2, r0
   16c98:	movcs	r0, r2
   16c9c:	ldrb	r2, [ip], #1
   16ca0:	sub	r1, r2, #48	; 0x30
   16ca4:	cmp	r1, #9
   16ca8:	bls	16c94 <__assert_fail@plt+0x4c8c>
   16cac:	b	16998 <__assert_fail@plt+0x4990>
   16cb0:	ldr	r3, [sp, #12]
   16cb4:	mov	r2, lr
   16cb8:	b	16c38 <__assert_fail@plt+0x4c30>
   16cbc:	ldr	r1, [pc, #36]	; 16ce8 <__assert_fail@plt+0x4ce0>
   16cc0:	mov	r2, #5
   16cc4:	mov	r0, #0
   16cc8:	bl	11c0c <dcgettext@plt>
   16ccc:	mov	r1, r7
   16cd0:	bl	15c10 <__assert_fail@plt+0x3c08>
   16cd4:	mov	r1, r5
   16cd8:	mov	r2, #10
   16cdc:	b	167a8 <__assert_fail@plt+0x47a0>
   16ce0:	andeq	ip, r3, r8, ror #3
   16ce4:	andeq	ip, r3, r8, ror #5
   16ce8:	andeq	r9, r2, r0, lsr r4
   16cec:	ldrdeq	ip, [r3], -ip	; <UNPREDICTABLE>
   16cf0:	andeq	r8, r2, r0, ror #30
   16cf4:	andeq	r9, r2, r0, asr #8
   16cf8:	push	{r4, r5, lr}
   16cfc:	sub	sp, sp, #140	; 0x8c
   16d00:	ldr	r5, [pc, #124]	; 16d84 <__assert_fail@plt+0x4d7c>
   16d04:	ldr	r3, [r5, #768]	; 0x300
   16d08:	cmp	r3, #0
   16d0c:	beq	16d60 <__assert_fail@plt+0x4d58>
   16d10:	add	r2, sp, #8
   16d14:	ldr	r1, [pc, #108]	; 16d88 <__assert_fail@plt+0x4d80>
   16d18:	mov	r0, #0
   16d1c:	bl	11d20 <pthread_sigmask@plt>
   16d20:	ldr	r4, [r5, #768]	; 0x300
   16d24:	cmp	r4, #0
   16d28:	clz	r0, r0
   16d2c:	lsr	r0, r0, #5
   16d30:	strb	r0, [sp, #4]
   16d34:	beq	16d50 <__assert_fail@plt+0x4d48>
   16d38:	add	r0, r4, #9
   16d3c:	bl	11c30 <unlink@plt>
   16d40:	ldr	r4, [r4]
   16d44:	cmp	r4, #0
   16d48:	bne	16d38 <__assert_fail@plt+0x4d30>
   16d4c:	ldrb	r0, [sp, #4]
   16d50:	mov	r2, #0
   16d54:	cmp	r0, #0
   16d58:	str	r2, [r5, #768]	; 0x300
   16d5c:	bne	16d6c <__assert_fail@plt+0x4d64>
   16d60:	bl	1c83c <__assert_fail@plt+0xa834>
   16d64:	add	sp, sp, #140	; 0x8c
   16d68:	pop	{r4, r5, pc}
   16d6c:	add	r1, sp, #8
   16d70:	mov	r0, #2
   16d74:	bl	11d20 <pthread_sigmask@plt>
   16d78:	bl	1c83c <__assert_fail@plt+0xa834>
   16d7c:	add	sp, sp, #140	; 0x8c
   16d80:	pop	{r4, r5, pc}
   16d84:	andeq	ip, r3, r8, ror #5
   16d88:	andeq	ip, r3, r0, lsl #15
   16d8c:	push	{r4, r5, r6, r7, lr}
   16d90:	sub	sp, sp, #20
   16d94:	ldr	r5, [pc, #268]	; 16ea8 <__assert_fail@plt+0x4ea0>
   16d98:	mov	r4, r0
   16d9c:	add	r1, sp, #4
   16da0:	ldr	r0, [r5, #1156]	; 0x484
   16da4:	str	r4, [sp, #8]
   16da8:	bl	1f5b4 <__assert_fail@plt+0xd5ac>
   16dac:	subs	r3, r0, #0
   16db0:	beq	16e10 <__assert_fail@plt+0x4e08>
   16db4:	cmp	r4, #0
   16db8:	mov	r6, #2
   16dbc:	moveq	r2, #1
   16dc0:	movne	r2, #0
   16dc4:	movne	r0, r4
   16dc8:	mvneq	r0, #0
   16dcc:	strb	r6, [r3, #8]
   16dd0:	mov	r1, sp
   16dd4:	bl	11cfc <waitpid@plt>
   16dd8:	subs	r3, r0, #0
   16ddc:	blt	16e6c <__assert_fail@plt+0x4e64>
   16de0:	beq	16e10 <__assert_fail@plt+0x4e08>
   16de4:	cmp	r4, #0
   16de8:	ble	16e18 <__assert_fail@plt+0x4e10>
   16dec:	ldr	r3, [sp]
   16df0:	tst	r3, #127	; 0x7f
   16df4:	bne	16e38 <__assert_fail@plt+0x4e30>
   16df8:	asr	r3, r3, #8
   16dfc:	tst	r3, #255	; 0xff
   16e00:	bne	16e38 <__assert_fail@plt+0x4e30>
   16e04:	ldr	r3, [r5, #1160]	; 0x488
   16e08:	sub	r3, r3, #1
   16e0c:	str	r3, [r5, #1160]	; 0x488
   16e10:	add	sp, sp, #20
   16e14:	pop	{r4, r5, r6, r7, pc}
   16e18:	add	r1, sp, #4
   16e1c:	ldr	r0, [r5, #1156]	; 0x484
   16e20:	str	r3, [sp, #8]
   16e24:	bl	1f5b4 <__assert_fail@plt+0xd5ac>
   16e28:	cmp	r0, #0
   16e2c:	beq	16e10 <__assert_fail@plt+0x4e08>
   16e30:	strb	r6, [r0, #8]
   16e34:	b	16dec <__assert_fail@plt+0x4de4>
   16e38:	mov	r2, #5
   16e3c:	ldr	r1, [pc, #104]	; 16eac <__assert_fail@plt+0x4ea4>
   16e40:	mov	r0, #0
   16e44:	bl	11c0c <dcgettext@plt>
   16e48:	ldr	r1, [r5, #1152]	; 0x480
   16e4c:	mov	r4, r0
   16e50:	mov	r0, #4
   16e54:	bl	22b84 <__assert_fail@plt+0x10b7c>
   16e58:	mov	r2, r4
   16e5c:	mov	r1, #0
   16e60:	mov	r3, r0
   16e64:	mov	r0, #2
   16e68:	bl	11d50 <error@plt>
   16e6c:	bl	11e34 <__errno_location@plt>
   16e70:	mov	r2, #5
   16e74:	ldr	r1, [pc, #52]	; 16eb0 <__assert_fail@plt+0x4ea8>
   16e78:	ldr	r4, [r0]
   16e7c:	mov	r0, #0
   16e80:	bl	11c0c <dcgettext@plt>
   16e84:	ldr	r1, [r5, #1152]	; 0x480
   16e88:	mov	r7, r0
   16e8c:	mov	r0, #4
   16e90:	bl	22b84 <__assert_fail@plt+0x10b7c>
   16e94:	mov	r2, r7
   16e98:	mov	r1, r4
   16e9c:	mov	r3, r0
   16ea0:	mov	r0, r6
   16ea4:	bl	11d50 <error@plt>
   16ea8:	andeq	ip, r3, r8, ror #5
   16eac:	andeq	r9, r2, r0, lsl r4
   16eb0:	strdeq	r9, [r2], -ip
   16eb4:	push	{r4, r5, r6, r7, r8, r9, lr}
   16eb8:	mov	r6, r0
   16ebc:	ldr	r5, [pc, #276]	; 16fd8 <__assert_fail@plt+0x4fd0>
   16ec0:	sub	sp, sp, #140	; 0x8c
   16ec4:	ldr	r3, [r5, #768]	; 0x300
   16ec8:	add	r2, r3, #9
   16ecc:	cmp	r0, r2
   16ed0:	bne	16edc <__assert_fail@plt+0x4ed4>
   16ed4:	b	16fb8 <__assert_fail@plt+0x4fb0>
   16ed8:	mov	r3, r4
   16edc:	ldr	r4, [r3]
   16ee0:	add	r2, r4, #9
   16ee4:	cmp	r2, r6
   16ee8:	bne	16ed8 <__assert_fail@plt+0x4ed0>
   16eec:	mov	r5, r3
   16ef0:	ldrb	r3, [r4, #8]
   16ef4:	cmp	r3, #1
   16ef8:	beq	16fcc <__assert_fail@plt+0x4fc4>
   16efc:	add	r2, sp, #8
   16f00:	ldr	r1, [pc, #212]	; 16fdc <__assert_fail@plt+0x4fd4>
   16f04:	mov	r0, #0
   16f08:	ldr	r7, [r4]
   16f0c:	bl	11d20 <pthread_sigmask@plt>
   16f10:	clz	r3, r0
   16f14:	mov	r0, r6
   16f18:	lsr	r3, r3, #5
   16f1c:	strb	r3, [sp, #4]
   16f20:	bl	11c30 <unlink@plt>
   16f24:	mov	r8, r0
   16f28:	bl	11e34 <__errno_location@plt>
   16f2c:	ldrb	r3, [sp, #4]
   16f30:	cmp	r3, #0
   16f34:	ldr	r9, [r0]
   16f38:	str	r7, [r5]
   16f3c:	bne	16f64 <__assert_fail@plt+0x4f5c>
   16f40:	cmp	r8, #0
   16f44:	bne	16f7c <__assert_fail@plt+0x4f74>
   16f48:	cmp	r7, #0
   16f4c:	mov	r0, r4
   16f50:	ldreq	r3, [pc, #136]	; 16fe0 <__assert_fail@plt+0x4fd8>
   16f54:	streq	r5, [r3, #108]	; 0x6c
   16f58:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   16f5c:	add	sp, sp, #140	; 0x8c
   16f60:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16f64:	add	r1, sp, #8
   16f68:	mov	r2, #0
   16f6c:	mov	r0, #2
   16f70:	bl	11d20 <pthread_sigmask@plt>
   16f74:	cmp	r8, #0
   16f78:	beq	16f48 <__assert_fail@plt+0x4f40>
   16f7c:	mov	r2, #5
   16f80:	ldr	r1, [pc, #92]	; 16fe4 <__assert_fail@plt+0x4fdc>
   16f84:	mov	r0, #0
   16f88:	bl	11c0c <dcgettext@plt>
   16f8c:	mov	r2, r6
   16f90:	mov	r1, #3
   16f94:	mov	r8, r0
   16f98:	mov	r0, #0
   16f9c:	bl	23600 <__assert_fail@plt+0x115f8>
   16fa0:	mov	r2, r8
   16fa4:	mov	r1, r9
   16fa8:	mov	r3, r0
   16fac:	mov	r0, #0
   16fb0:	bl	11d50 <error@plt>
   16fb4:	b	16f48 <__assert_fail@plt+0x4f40>
   16fb8:	mov	r4, r3
   16fbc:	add	r5, r5, #768	; 0x300
   16fc0:	ldrb	r3, [r4, #8]
   16fc4:	cmp	r3, #1
   16fc8:	bne	16efc <__assert_fail@plt+0x4ef4>
   16fcc:	ldr	r0, [r4, #4]
   16fd0:	bl	16d8c <__assert_fail@plt+0x4d84>
   16fd4:	b	16efc <__assert_fail@plt+0x4ef4>
   16fd8:	andeq	ip, r3, r8, ror #5
   16fdc:	andeq	ip, r3, r0, lsl #15
   16fe0:	andeq	ip, r3, r8, ror #3
   16fe4:	andeq	r9, r2, r4, asr r4
   16fe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fec:	vpush	{d8}
   16ff0:	mov	r5, r1
   16ff4:	mov	r1, #524288	; 0x80000
   16ff8:	sub	sp, sp, #164	; 0xa4
   16ffc:	str	r0, [sp, #4]
   17000:	bl	20428 <__assert_fail@plt+0xe420>
   17004:	cmp	r0, #0
   17008:	blt	17250 <__assert_fail@plt+0x5248>
   1700c:	ldr	r3, [pc, #724]	; 172e8 <__assert_fail@plt+0x52e0>
   17010:	ldr	r4, [pc, #724]	; 172ec <__assert_fail@plt+0x52e4>
   17014:	ldr	r3, [r3, #112]	; 0x70
   17018:	ldr	r2, [r4, #1160]	; 0x488
   1701c:	add	r3, r3, #1
   17020:	cmp	r3, r2
   17024:	bcc	171c4 <__assert_fail@plt+0x51bc>
   17028:	bl	11e34 <__errno_location@plt>
   1702c:	cmp	r5, #0
   17030:	vldr	d8, [pc, #680]	; 172e0 <__assert_fail@plt+0x52d8>
   17034:	mov	r8, #0
   17038:	mov	fp, #2
   1703c:	mov	r9, r0
   17040:	beq	1712c <__assert_fail@plt+0x5124>
   17044:	add	r2, sp, #32
   17048:	ldr	r1, [pc, #672]	; 172f0 <__assert_fail@plt+0x52e8>
   1704c:	mov	r0, r8
   17050:	bl	11d20 <pthread_sigmask@plt>
   17054:	ldr	r6, [r4, #768]	; 0x300
   17058:	str	r8, [r4, #768]	; 0x300
   1705c:	clz	r0, r0
   17060:	lsr	r0, r0, #5
   17064:	strb	r0, [sp, #28]
   17068:	bl	11f00 <fork@plt>
   1706c:	ldr	r7, [r9]
   17070:	ldrb	r3, [sp, #28]
   17074:	subs	sl, r0, #0
   17078:	beq	17160 <__assert_fail@plt+0x5158>
   1707c:	cmp	r3, #0
   17080:	str	r6, [r4, #768]	; 0x300
   17084:	bne	17168 <__assert_fail@plt+0x5160>
   17088:	cmp	sl, #0
   1708c:	str	r7, [r9]
   17090:	bge	1717c <__assert_fail@plt+0x5174>
   17094:	cmp	r7, #11
   17098:	bne	17130 <__assert_fail@plt+0x5128>
   1709c:	vmov.f64	d0, d8
   170a0:	bl	26a38 <__assert_fail@plt+0x14a30>
   170a4:	vadd.f64	d8, d8, d8
   170a8:	ldr	r3, [r4, #1160]	; 0x488
   170ac:	mov	r7, #1
   170b0:	mvn	r6, #0
   170b4:	cmp	r3, #0
   170b8:	ble	17120 <__assert_fail@plt+0x5118>
   170bc:	mov	r2, r7
   170c0:	add	r1, sp, #12
   170c4:	mov	r0, r6
   170c8:	bl	11cfc <waitpid@plt>
   170cc:	subs	r3, r0, #0
   170d0:	blt	17258 <__assert_fail@plt+0x5250>
   170d4:	beq	17120 <__assert_fail@plt+0x5118>
   170d8:	add	r1, sp, #16
   170dc:	ldr	r0, [r4, #1156]	; 0x484
   170e0:	str	r3, [sp, #20]
   170e4:	bl	1f5b4 <__assert_fail@plt+0xd5ac>
   170e8:	cmp	r0, #0
   170ec:	beq	17158 <__assert_fail@plt+0x5150>
   170f0:	ldr	r3, [sp, #12]
   170f4:	strb	fp, [r0, #8]
   170f8:	tst	r3, #127	; 0x7f
   170fc:	bne	17290 <__assert_fail@plt+0x5288>
   17100:	asr	r3, r3, #8
   17104:	tst	r3, #255	; 0xff
   17108:	bne	17290 <__assert_fail@plt+0x5288>
   1710c:	ldr	r3, [r4, #1160]	; 0x488
   17110:	sub	r3, r3, #1
   17114:	cmp	r3, #0
   17118:	str	r3, [r4, #1160]	; 0x488
   1711c:	bgt	170bc <__assert_fail@plt+0x50b4>
   17120:	sub	r5, r5, #1
   17124:	cmp	r5, #0
   17128:	bne	17044 <__assert_fail@plt+0x503c>
   1712c:	ldr	r7, [r9]
   17130:	ldr	r4, [sp, #4]
   17134:	ldr	r0, [r4]
   17138:	bl	11ff0 <close@plt>
   1713c:	ldr	r0, [r4, #4]
   17140:	bl	11ff0 <close@plt>
   17144:	str	r7, [r9]
   17148:	mov	r0, sl
   1714c:	add	sp, sp, #164	; 0xa4
   17150:	vpop	{d8}
   17154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17158:	ldr	r3, [r4, #1160]	; 0x488
   1715c:	b	170b4 <__assert_fail@plt+0x50ac>
   17160:	cmp	r3, #0
   17164:	beq	1719c <__assert_fail@plt+0x5194>
   17168:	mov	r2, r8
   1716c:	add	r1, sp, #32
   17170:	mov	r0, fp
   17174:	bl	11d20 <pthread_sigmask@plt>
   17178:	b	17088 <__assert_fail@plt+0x5080>
   1717c:	beq	171a0 <__assert_fail@plt+0x5198>
   17180:	ldr	r3, [r4, #1160]	; 0x488
   17184:	mov	r0, sl
   17188:	add	r3, r3, #1
   1718c:	str	r3, [r4, #1160]	; 0x488
   17190:	add	sp, sp, #164	; 0xa4
   17194:	vpop	{d8}
   17198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1719c:	str	r7, [r9]
   171a0:	mov	r0, #0
   171a4:	bl	11ff0 <close@plt>
   171a8:	mov	r0, #1
   171ac:	bl	11ff0 <close@plt>
   171b0:	mov	sl, #0
   171b4:	mov	r0, sl
   171b8:	add	sp, sp, #164	; 0xa4
   171bc:	vpop	{d8}
   171c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171c4:	bl	16620 <__assert_fail@plt+0x4618>
   171c8:	ldr	r3, [r4, #1160]	; 0x488
   171cc:	mov	r7, #1
   171d0:	mvn	r6, #0
   171d4:	mov	r8, #2
   171d8:	cmp	r3, #0
   171dc:	ble	17028 <__assert_fail@plt+0x5020>
   171e0:	mov	r2, r7
   171e4:	add	r1, sp, #16
   171e8:	mov	r0, r6
   171ec:	bl	11cfc <waitpid@plt>
   171f0:	subs	r3, r0, #0
   171f4:	blt	172c4 <__assert_fail@plt+0x52bc>
   171f8:	beq	17028 <__assert_fail@plt+0x5020>
   171fc:	add	r1, sp, #28
   17200:	ldr	r0, [r4, #1156]	; 0x484
   17204:	str	r3, [sp, #32]
   17208:	bl	1f5b4 <__assert_fail@plt+0xd5ac>
   1720c:	cmp	r0, #0
   17210:	beq	17248 <__assert_fail@plt+0x5240>
   17214:	strb	r8, [r0, #8]
   17218:	ldr	r3, [sp, #16]
   1721c:	tst	r3, #127	; 0x7f
   17220:	bne	17290 <__assert_fail@plt+0x5288>
   17224:	asr	r3, r3, #8
   17228:	tst	r3, #255	; 0xff
   1722c:	bne	17290 <__assert_fail@plt+0x5288>
   17230:	ldr	r3, [r4, #1160]	; 0x488
   17234:	sub	r3, r3, #1
   17238:	cmp	r3, #0
   1723c:	str	r3, [r4, #1160]	; 0x488
   17240:	bgt	171e0 <__assert_fail@plt+0x51d8>
   17244:	b	17028 <__assert_fail@plt+0x5020>
   17248:	ldr	r3, [r4, #1160]	; 0x488
   1724c:	b	171d8 <__assert_fail@plt+0x51d0>
   17250:	mvn	sl, #0
   17254:	b	17148 <__assert_fail@plt+0x5140>
   17258:	ldr	r1, [pc, #148]	; 172f4 <__assert_fail@plt+0x52ec>
   1725c:	ldr	r5, [r9]
   17260:	mov	r2, #5
   17264:	mov	r0, #0
   17268:	bl	11c0c <dcgettext@plt>
   1726c:	ldr	r1, [r4, #1152]	; 0x480
   17270:	mov	r6, r0
   17274:	mov	r0, #4
   17278:	bl	22b84 <__assert_fail@plt+0x10b7c>
   1727c:	mov	r2, r6
   17280:	mov	r1, r5
   17284:	mov	r3, r0
   17288:	mov	r0, #2
   1728c:	bl	11d50 <error@plt>
   17290:	mov	r2, #5
   17294:	ldr	r1, [pc, #92]	; 172f8 <__assert_fail@plt+0x52f0>
   17298:	mov	r0, #0
   1729c:	bl	11c0c <dcgettext@plt>
   172a0:	ldr	r1, [r4, #1152]	; 0x480
   172a4:	mov	r5, r0
   172a8:	mov	r0, #4
   172ac:	bl	22b84 <__assert_fail@plt+0x10b7c>
   172b0:	mov	r2, r5
   172b4:	mov	r1, #0
   172b8:	mov	r3, r0
   172bc:	mov	r0, #2
   172c0:	bl	11d50 <error@plt>
   172c4:	bl	11e34 <__errno_location@plt>
   172c8:	mov	r2, #5
   172cc:	ldr	r1, [pc, #32]	; 172f4 <__assert_fail@plt+0x52ec>
   172d0:	ldr	r5, [r0]
   172d4:	mov	r0, #0
   172d8:	b	17268 <__assert_fail@plt+0x5260>
   172dc:	nop			; (mov r0, r0)
   172e0:	andeq	r0, r0, r0
   172e4:	svccc	0x00d00000
   172e8:	andeq	ip, r3, r8, ror #3
   172ec:	andeq	ip, r3, r8, ror #5
   172f0:	andeq	ip, r3, r0, lsl #15
   172f4:	strdeq	r9, [r2], -ip
   172f8:	andeq	r9, r2, r0, lsl r4
   172fc:	push	{r4, r5, r6, r7, r8, lr}
   17300:	mov	r5, r0
   17304:	ldrb	r3, [r1]
   17308:	cmp	r3, #114	; 0x72
   1730c:	beq	173b4 <__assert_fail@plt+0x53ac>
   17310:	cmp	r3, #119	; 0x77
   17314:	bne	1743c <__assert_fail@plt+0x5434>
   17318:	cmp	r0, #0
   1731c:	beq	17338 <__assert_fail@plt+0x5330>
   17320:	mov	r2, #0
   17324:	mov	r3, #0
   17328:	mov	r0, #1
   1732c:	bl	11bdc <ftruncate64@plt>
   17330:	cmp	r0, #0
   17334:	bne	17348 <__assert_fail@plt+0x5340>
   17338:	ldr	r3, [pc, #272]	; 17450 <__assert_fail@plt+0x5448>
   1733c:	ldr	r4, [r3]
   17340:	mov	r0, r4
   17344:	pop	{r4, r5, r6, r7, r8, pc}
   17348:	bl	11e34 <__errno_location@plt>
   1734c:	ldr	r4, [pc, #256]	; 17454 <__assert_fail@plt+0x544c>
   17350:	ldr	r3, [r4, #1044]	; 0x414
   17354:	cmp	r3, #0
   17358:	mov	r6, r0
   1735c:	ldr	r7, [r0]
   17360:	beq	17418 <__assert_fail@plt+0x5410>
   17364:	cmp	r3, #0
   17368:	bge	1737c <__assert_fail@plt+0x5374>
   1736c:	ldr	r3, [r4, #1064]	; 0x428
   17370:	and	r3, r3, #61440	; 0xf000
   17374:	cmp	r3, #32768	; 0x8000
   17378:	bne	17338 <__assert_fail@plt+0x5330>
   1737c:	mov	r2, #5
   17380:	ldr	r1, [pc, #208]	; 17458 <__assert_fail@plt+0x5450>
   17384:	mov	r0, #0
   17388:	bl	11c0c <dcgettext@plt>
   1738c:	mov	r2, r5
   17390:	mov	r1, #3
   17394:	mov	r4, r0
   17398:	mov	r0, #0
   1739c:	bl	23600 <__assert_fail@plt+0x115f8>
   173a0:	mov	r2, r4
   173a4:	mov	r1, r7
   173a8:	mov	r3, r0
   173ac:	mov	r0, #2
   173b0:	bl	11d50 <error@plt>
   173b4:	mov	r4, r1
   173b8:	ldr	r1, [pc, #156]	; 1745c <__assert_fail@plt+0x5454>
   173bc:	bl	11ae0 <strcmp@plt>
   173c0:	cmp	r0, #0
   173c4:	bne	173f0 <__assert_fail@plt+0x53e8>
   173c8:	ldr	r3, [pc, #144]	; 17460 <__assert_fail@plt+0x5458>
   173cc:	ldr	r2, [pc, #128]	; 17454 <__assert_fail@plt+0x544c>
   173d0:	mov	r1, #1
   173d4:	ldr	r4, [r3]
   173d8:	strb	r1, [r2, #1304]	; 0x518
   173dc:	mov	r0, r4
   173e0:	mov	r1, #2
   173e4:	bl	1d928 <__assert_fail@plt+0xb920>
   173e8:	mov	r0, r4
   173ec:	pop	{r4, r5, r6, r7, r8, pc}
   173f0:	mov	r0, r5
   173f4:	mov	r1, #524288	; 0x80000
   173f8:	bl	11d5c <open64@plt>
   173fc:	cmp	r0, #0
   17400:	movlt	r4, #0
   17404:	blt	173dc <__assert_fail@plt+0x53d4>
   17408:	mov	r1, r4
   1740c:	bl	11ab0 <fdopen@plt>
   17410:	mov	r4, r0
   17414:	b	173dc <__assert_fail@plt+0x53d4>
   17418:	ldr	r2, [pc, #68]	; 17464 <__assert_fail@plt+0x545c>
   1741c:	mov	r1, #1
   17420:	mov	r0, #3
   17424:	bl	11ca8 <__fxstat64@plt>
   17428:	cmp	r0, #0
   1742c:	mvneq	r3, #0
   17430:	ldrne	r3, [r6]
   17434:	str	r3, [r4, #1044]	; 0x414
   17438:	b	17364 <__assert_fail@plt+0x535c>
   1743c:	ldr	r3, [pc, #36]	; 17468 <__assert_fail@plt+0x5460>
   17440:	ldr	r2, [pc, #36]	; 1746c <__assert_fail@plt+0x5464>
   17444:	ldr	r1, [pc, #36]	; 17470 <__assert_fail@plt+0x5468>
   17448:	ldr	r0, [pc, #36]	; 17474 <__assert_fail@plt+0x546c>
   1744c:	bl	12008 <__assert_fail@plt>
   17450:	ldrdeq	ip, [r3], -ip	; <UNPREDICTABLE>
   17454:	andeq	ip, r3, r8, ror #5
   17458:	andeq	r9, r2, r4, ror #7
   1745c:	andeq	r9, r2, r0, ror r4
   17460:	ldrdeq	ip, [r3], -r8
   17464:	andeq	ip, r3, r0, lsl #14
   17468:	andeq	r9, r2, r0, rrx
   1746c:	ldrdeq	r0, [r0], -r5
   17470:	andeq	r9, r2, r4, ror r4
   17474:	andeq	r9, r2, r0, lsl #9
   17478:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1747c:	vpush	{d8}
   17480:	ldr	r5, [pc, #3972]	; 1840c <__assert_fail@plt+0x6404>
   17484:	mov	r2, r0
   17488:	ldr	sl, [r1, #8]
   1748c:	sub	sp, sp, #8384	; 0x20c0
   17490:	sub	sp, sp, #52	; 0x34
   17494:	ldr	r7, [r5, #1040]	; 0x410
   17498:	str	r0, [sp, #32]
   1749c:	ldr	r0, [r0, #8]
   174a0:	ldr	r9, [r2, #12]
   174a4:	ldr	r6, [r1, #12]
   174a8:	add	r3, r5, #1296	; 0x510
   174ac:	mov	fp, r0
   174b0:	add	r3, r3, #12
   174b4:	str	r1, [sp, #36]	; 0x24
   174b8:	str	r3, [sp, #76]	; 0x4c
   174bc:	ldrb	r3, [r5, #1305]	; 0x519
   174c0:	cmp	fp, r9
   174c4:	movcs	r9, fp
   174c8:	cmp	sl, r6
   174cc:	movcs	r6, sl
   174d0:	cmp	r3, #0
   174d4:	sub	r3, r6, sl
   174d8:	str	r3, [sp, #8]
   174dc:	sub	r4, r9, fp
   174e0:	ldr	r3, [r7, #20]
   174e4:	ldr	r8, [r7, #16]
   174e8:	bne	17648 <__assert_fail@plt+0x5640>
   174ec:	ldrb	r2, [r7, #26]
   174f0:	cmp	r2, #0
   174f4:	bne	17648 <__assert_fail@plt+0x5640>
   174f8:	ldrh	r2, [r7, #28]
   174fc:	cmp	r2, #0
   17500:	bne	17648 <__assert_fail@plt+0x5640>
   17504:	ldrb	r2, [r7, #30]
   17508:	cmp	r2, #0
   1750c:	bne	17648 <__assert_fail@plt+0x5640>
   17510:	ldrb	r2, [r7, #27]
   17514:	cmp	r2, #0
   17518:	bne	17648 <__assert_fail@plt+0x5640>
   1751c:	ldrb	r2, [r7, #32]
   17520:	cmp	r2, #0
   17524:	bne	17648 <__assert_fail@plt+0x5640>
   17528:	cmp	r8, #0
   1752c:	beq	1865c <__assert_fail@plt+0x6654>
   17530:	cmp	r3, #0
   17534:	moveq	r1, fp
   17538:	movne	r0, fp
   1753c:	beq	175ec <__assert_fail@plt+0x55e4>
   17540:	cmp	r0, r9
   17544:	bcs	17558 <__assert_fail@plt+0x5550>
   17548:	ldrb	r2, [r0]
   1754c:	ldrb	r2, [r8, r2]
   17550:	cmp	r2, #0
   17554:	bne	175c0 <__assert_fail@plt+0x55b8>
   17558:	cmp	sl, r6
   1755c:	bcs	183dc <__assert_fail@plt+0x63d4>
   17560:	ldrb	r2, [sl]
   17564:	ldrb	r2, [r8, r2]
   17568:	cmp	r2, #0
   1756c:	addne	r2, sl, #1
   17570:	bne	1758c <__assert_fail@plt+0x5584>
   17574:	b	17598 <__assert_fail@plt+0x5590>
   17578:	ldrb	r1, [r2]
   1757c:	add	r2, r2, #1
   17580:	ldrb	r1, [r8, r1]
   17584:	cmp	r1, #0
   17588:	beq	17598 <__assert_fail@plt+0x5590>
   1758c:	cmp	r6, r2
   17590:	mov	sl, r2
   17594:	bne	17578 <__assert_fail@plt+0x5570>
   17598:	cmp	r6, sl
   1759c:	cmphi	r9, r0
   175a0:	bls	183dc <__assert_fail@plt+0x63d4>
   175a4:	ldrb	r2, [r0]
   175a8:	ldrb	r1, [sl]
   175ac:	ldrb	r2, [r3, r2]
   175b0:	ldrb	r1, [r3, r1]
   175b4:	subs	r2, r2, r1
   175b8:	bne	183c8 <__assert_fail@plt+0x63c0>
   175bc:	add	sl, sl, #1
   175c0:	add	r0, r0, #1
   175c4:	b	17540 <__assert_fail@plt+0x5538>
   175c8:	cmp	r6, sl
   175cc:	cmphi	r9, r1
   175d0:	bls	186b8 <__assert_fail@plt+0x66b0>
   175d4:	ldrb	r3, [r1]
   175d8:	ldrb	r2, [sl]
   175dc:	subs	r3, r3, r2
   175e0:	bne	1867c <__assert_fail@plt+0x6674>
   175e4:	add	sl, sl, #1
   175e8:	add	r1, r1, #1
   175ec:	cmp	r1, r9
   175f0:	bcs	17604 <__assert_fail@plt+0x55fc>
   175f4:	ldrb	r3, [r1]
   175f8:	ldrb	r3, [r8, r3]
   175fc:	cmp	r3, #0
   17600:	bne	175e8 <__assert_fail@plt+0x55e0>
   17604:	cmp	sl, r6
   17608:	bcs	186b8 <__assert_fail@plt+0x66b0>
   1760c:	ldrb	r3, [sl]
   17610:	ldrb	r3, [r8, r3]
   17614:	cmp	r3, #0
   17618:	addne	r3, sl, #1
   1761c:	bne	17638 <__assert_fail@plt+0x5630>
   17620:	b	175c8 <__assert_fail@plt+0x55c0>
   17624:	ldrb	r2, [r3]
   17628:	add	r3, r3, #1
   1762c:	ldrb	r2, [r8, r2]
   17630:	cmp	r2, #0
   17634:	beq	175c8 <__assert_fail@plt+0x55c0>
   17638:	cmp	r6, r3
   1763c:	mov	sl, r3
   17640:	bne	17624 <__assert_fail@plt+0x561c>
   17644:	b	175c8 <__assert_fail@plt+0x55c0>
   17648:	cmp	r3, #0
   1764c:	cmpeq	r8, #0
   17650:	movne	r2, #1
   17654:	moveq	r2, #0
   17658:	str	r2, [sp, #16]
   1765c:	beq	17a74 <__assert_fail@plt+0x5a6c>
   17660:	ldr	r2, [sp, #8]
   17664:	add	r0, r4, r2
   17668:	add	r0, r0, #2
   1766c:	cmp	r0, #4000	; 0xfa0
   17670:	movls	r2, #0
   17674:	strls	r2, [sp, #40]	; 0x28
   17678:	addls	r0, sp, #432	; 0x1b0
   1767c:	bhi	17c20 <__assert_fail@plt+0x5c18>
   17680:	add	lr, r4, #1
   17684:	add	r2, r0, lr
   17688:	cmp	r4, #0
   1768c:	str	r2, [sp, #4]
   17690:	beq	17e74 <__assert_fail@plt+0x5e6c>
   17694:	cmp	r8, #0
   17698:	beq	17c34 <__assert_fail@plt+0x5c2c>
   1769c:	cmp	r3, #0
   176a0:	movne	r1, #0
   176a4:	mov	r2, fp
   176a8:	movne	fp, r1
   176ac:	beq	17cb4 <__assert_fail@plt+0x5cac>
   176b0:	ldrb	r1, [r2], #1
   176b4:	ldrb	ip, [r8, r1]
   176b8:	cmp	ip, #0
   176bc:	ldrbeq	r1, [r3, r1]
   176c0:	strbeq	r1, [r0, fp]
   176c4:	addeq	fp, fp, #1
   176c8:	cmp	r9, r2
   176cc:	bne	176b0 <__assert_fail@plt+0x56a8>
   176d0:	mov	r2, fp
   176d4:	str	fp, [sp, #20]
   176d8:	add	r1, r0, r2
   176dc:	ldr	r2, [sp, #8]
   176e0:	cmp	r2, #0
   176e4:	mov	r2, #0
   176e8:	strb	r2, [r1]
   176ec:	beq	1772c <__assert_fail@plt+0x5724>
   176f0:	cmp	r8, r2
   176f4:	beq	17c64 <__assert_fail@plt+0x5c5c>
   176f8:	cmp	r3, r2
   176fc:	beq	17c88 <__assert_fail@plt+0x5c80>
   17700:	ldr	lr, [sp, #4]
   17704:	mov	ip, r2
   17708:	ldrb	r2, [sl], #1
   1770c:	ldrb	r1, [r8, r2]
   17710:	cmp	r1, #0
   17714:	ldrbeq	r2, [r3, r2]
   17718:	strbeq	r2, [lr, ip]
   1771c:	addeq	ip, ip, #1
   17720:	cmp	r6, sl
   17724:	bne	17708 <__assert_fail@plt+0x5700>
   17728:	str	ip, [sp, #8]
   1772c:	ldr	r2, [sp, #4]
   17730:	ldr	r1, [sp, #8]
   17734:	mov	fp, r0
   17738:	mov	r3, #0
   1773c:	strb	r3, [r2, r1]
   17740:	ldrb	r4, [r7, #26]
   17744:	cmp	r4, #0
   17748:	beq	17878 <__assert_fail@plt+0x5870>
   1774c:	ldrb	r3, [fp]
   17750:	mov	r0, fp
   17754:	add	r3, r5, r3
   17758:	ldrb	r3, [r3, #784]	; 0x310
   1775c:	cmp	r3, #0
   17760:	beq	17778 <__assert_fail@plt+0x5770>
   17764:	ldrb	r3, [r0, #1]!
   17768:	add	r3, r5, r3
   1776c:	ldrb	r3, [r3, #784]	; 0x310
   17770:	cmp	r3, #0
   17774:	bne	17764 <__assert_fail@plt+0x575c>
   17778:	ldr	r1, [sp, #4]
   1777c:	ldrb	r3, [r1]
   17780:	add	r3, r5, r3
   17784:	ldrb	r3, [r3, #784]	; 0x310
   17788:	cmp	r3, #0
   1778c:	beq	177a4 <__assert_fail@plt+0x579c>
   17790:	ldrb	r3, [r1, #1]!
   17794:	add	r3, r5, r3
   17798:	ldrb	r3, [r3, #784]	; 0x310
   1779c:	cmp	r3, #0
   177a0:	bne	17790 <__assert_fail@plt+0x5788>
   177a4:	ldr	r3, [r5, #1168]	; 0x490
   177a8:	ldrb	r2, [r5, #1172]	; 0x494
   177ac:	bl	251c4 <__assert_fail@plt+0x131bc>
   177b0:	str	r0, [sp, #12]
   177b4:	ldr	r3, [sp, #16]
   177b8:	cmp	r3, #0
   177bc:	bne	17a34 <__assert_fail@plt+0x5a2c>
   177c0:	ldr	r3, [sp, #20]
   177c4:	ldrb	r2, [sp, #24]
   177c8:	ldrb	r1, [sp, #28]
   177cc:	strb	r2, [fp, r3]
   177d0:	ldr	r3, [sp, #4]
   177d4:	ldr	r2, [sp, #8]
   177d8:	strb	r1, [r3, r2]
   177dc:	ldr	r3, [sp, #12]
   177e0:	cmp	r3, #0
   177e4:	bne	17a48 <__assert_fail@plt+0x5a40>
   177e8:	ldr	r7, [r7, #36]	; 0x24
   177ec:	cmp	r7, #0
   177f0:	beq	17a60 <__assert_fail@plt+0x5a58>
   177f4:	ldr	r3, [r7, #8]
   177f8:	cmn	r3, #1
   177fc:	ldr	r3, [sp, #32]
   17800:	beq	17a9c <__assert_fail@plt+0x5a94>
   17804:	ldr	fp, [r3]
   17808:	ldr	r8, [r3, #4]
   1780c:	mov	r2, r7
   17810:	mov	r1, r8
   17814:	mov	r0, fp
   17818:	bl	15ed8 <__assert_fail@plt+0x3ed0>
   1781c:	ldr	r3, [sp, #36]	; 0x24
   17820:	mov	r2, r7
   17824:	ldr	sl, [r3]
   17828:	ldr	r4, [r3, #4]
   1782c:	mov	r1, r4
   17830:	mov	r9, r0
   17834:	mov	r0, sl
   17838:	bl	15ed8 <__assert_fail@plt+0x3ed0>
   1783c:	ldr	r3, [r7]
   17840:	cmn	r3, #1
   17844:	mov	r6, r0
   17848:	beq	17acc <__assert_fail@plt+0x5ac4>
   1784c:	mov	r1, r8
   17850:	mov	r0, fp
   17854:	mov	r2, r7
   17858:	bl	15d58 <__assert_fail@plt+0x3d50>
   1785c:	mov	r2, r7
   17860:	mov	r1, r4
   17864:	mov	fp, r0
   17868:	mov	r0, sl
   1786c:	bl	15d58 <__assert_fail@plt+0x3d50>
   17870:	mov	sl, r0
   17874:	b	174bc <__assert_fail@plt+0x54b4>
   17878:	ldrb	r9, [r7, #28]
   1787c:	cmp	r9, #0
   17880:	bne	17ba4 <__assert_fail@plt+0x5b9c>
   17884:	ldrb	r3, [r7, #29]
   17888:	cmp	r3, #0
   1788c:	str	r3, [sp, #12]
   17890:	beq	17b6c <__assert_fail@plt+0x5b64>
   17894:	ldrb	r8, [fp]
   17898:	mov	r0, fp
   1789c:	add	r3, r5, r8
   178a0:	ldrb	r3, [r3, #784]	; 0x310
   178a4:	cmp	r3, #0
   178a8:	beq	178c0 <__assert_fail@plt+0x58b8>
   178ac:	ldrb	r8, [r0, #1]!
   178b0:	add	r3, r5, r8
   178b4:	ldrb	r3, [r3, #784]	; 0x310
   178b8:	cmp	r3, #0
   178bc:	bne	178ac <__assert_fail@plt+0x58a4>
   178c0:	ldr	r1, [sp, #4]
   178c4:	ldrb	r6, [r1]
   178c8:	add	r3, r5, r6
   178cc:	ldrb	r3, [r3, #784]	; 0x310
   178d0:	cmp	r3, #0
   178d4:	beq	178ec <__assert_fail@plt+0x58e4>
   178d8:	ldrb	r6, [r1, #1]!
   178dc:	add	r3, r5, r6
   178e0:	ldrb	r3, [r3, #784]	; 0x310
   178e4:	cmp	r3, #0
   178e8:	bne	178d8 <__assert_fail@plt+0x58d0>
   178ec:	sub	r3, r8, #45	; 0x2d
   178f0:	clz	r3, r3
   178f4:	lsr	r3, r3, #5
   178f8:	add	ip, r0, r3
   178fc:	ldrb	r2, [r0, r3]
   17900:	mov	sl, r9
   17904:	ldr	r3, [r5, #1168]	; 0x490
   17908:	mov	lr, #0
   1790c:	b	17934 <__assert_fail@plt+0x592c>
   17910:	cmp	lr, r2
   17914:	movcc	lr, r2
   17918:	ldrb	r2, [ip, #1]
   1791c:	cmp	r2, r3
   17920:	addeq	r4, ip, #2
   17924:	ldreq	sl, [sp, #12]
   17928:	ldrbeq	r2, [ip, #2]
   1792c:	movne	sl, r9
   17930:	mov	ip, r4
   17934:	sub	r4, r2, #48	; 0x30
   17938:	cmp	r4, #9
   1793c:	add	r4, ip, #1
   17940:	bls	17910 <__assert_fail@plt+0x5908>
   17944:	cmp	sl, #0
   17948:	subne	r4, ip, #1
   1794c:	bne	17960 <__assert_fail@plt+0x5958>
   17950:	ldrb	sl, [r5, #1172]	; 0x494
   17954:	cmp	sl, r2
   17958:	beq	18170 <__assert_fail@plt+0x6168>
   1795c:	sub	r4, r4, #1
   17960:	cmp	lr, #48	; 0x30
   17964:	movls	sl, #0
   17968:	bls	17980 <__assert_fail@plt+0x5978>
   1796c:	ldrb	r2, [r4]
   17970:	ldr	ip, [pc, #2712]	; 18410 <__assert_fail@plt+0x6408>
   17974:	cmp	r8, #45	; 0x2d
   17978:	ldrb	sl, [ip, r2]
   1797c:	rsbeq	sl, sl, #0
   17980:	sub	r2, r6, #45	; 0x2d
   17984:	clz	r2, r2
   17988:	lsr	r2, r2, #5
   1798c:	add	ip, r1, r2
   17990:	mov	r8, r9
   17994:	ldrb	r2, [r1, r2]
   17998:	mov	lr, #0
   1799c:	b	179c4 <__assert_fail@plt+0x59bc>
   179a0:	cmp	lr, r2
   179a4:	movcc	lr, r2
   179a8:	ldrb	r2, [ip, #1]
   179ac:	cmp	r3, r2
   179b0:	addeq	r4, ip, #2
   179b4:	ldreq	r8, [sp, #12]
   179b8:	ldrbeq	r2, [ip, #2]
   179bc:	movne	r8, r9
   179c0:	mov	ip, r4
   179c4:	sub	r4, r2, #48	; 0x30
   179c8:	cmp	r4, #9
   179cc:	add	r4, ip, #1
   179d0:	bls	179a0 <__assert_fail@plt+0x5998>
   179d4:	cmp	r8, #0
   179d8:	subne	r4, ip, #1
   179dc:	bne	179f0 <__assert_fail@plt+0x59e8>
   179e0:	ldrb	r8, [r5, #1172]	; 0x494
   179e4:	cmp	r8, r2
   179e8:	beq	181a0 <__assert_fail@plt+0x6198>
   179ec:	sub	r4, r4, #1
   179f0:	cmp	lr, #48	; 0x30
   179f4:	movls	r4, #0
   179f8:	bls	17a10 <__assert_fail@plt+0x5a08>
   179fc:	ldrb	r2, [r4]
   17a00:	ldr	ip, [pc, #2568]	; 18410 <__assert_fail@plt+0x6408>
   17a04:	cmp	r6, #45	; 0x2d
   17a08:	ldrb	r4, [ip, r2]
   17a0c:	rsbeq	r4, r4, #0
   17a10:	subs	r2, sl, r4
   17a14:	str	r2, [sp, #12]
   17a18:	bne	177b4 <__assert_fail@plt+0x57ac>
   17a1c:	ldrb	r2, [r5, #1172]	; 0x494
   17a20:	bl	251c4 <__assert_fail@plt+0x131bc>
   17a24:	ldr	r3, [sp, #16]
   17a28:	cmp	r3, #0
   17a2c:	str	r0, [sp, #12]
   17a30:	beq	177c0 <__assert_fail@plt+0x57b8>
   17a34:	ldr	r0, [sp, #40]	; 0x28
   17a38:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   17a3c:	ldr	r3, [sp, #12]
   17a40:	cmp	r3, #0
   17a44:	beq	177e8 <__assert_fail@plt+0x57e0>
   17a48:	ldrb	r3, [r7, #31]
   17a4c:	cmp	r3, #0
   17a50:	beq	17a60 <__assert_fail@plt+0x5a58>
   17a54:	ldr	r3, [sp, #12]
   17a58:	rsb	r3, r3, #0
   17a5c:	str	r3, [sp, #12]
   17a60:	ldr	r0, [sp, #12]
   17a64:	add	sp, sp, #8384	; 0x20c0
   17a68:	add	sp, sp, #52	; 0x34
   17a6c:	vpop	{d8}
   17a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a74:	ldrb	r3, [r9]
   17a78:	str	r4, [sp, #20]
   17a7c:	str	sl, [sp, #4]
   17a80:	str	r3, [sp, #24]
   17a84:	ldr	r3, [sp, #16]
   17a88:	strb	r3, [r9]
   17a8c:	ldrb	r2, [r6]
   17a90:	strb	r3, [r6]
   17a94:	str	r2, [sp, #28]
   17a98:	b	17740 <__assert_fail@plt+0x5738>
   17a9c:	ldr	r2, [sp, #36]	; 0x24
   17aa0:	ldr	r8, [r3, #4]
   17aa4:	ldr	fp, [r3]
   17aa8:	ldr	r4, [r2, #4]
   17aac:	ldr	r3, [r7]
   17ab0:	ldr	sl, [r2]
   17ab4:	sub	r9, r8, #1
   17ab8:	sub	r6, r4, #1
   17abc:	cmn	r3, #1
   17ac0:	add	r9, fp, r9
   17ac4:	add	r6, sl, r6
   17ac8:	bne	1784c <__assert_fail@plt+0x5844>
   17acc:	ldrb	r3, [r7, #24]
   17ad0:	cmp	r3, #0
   17ad4:	beq	174bc <__assert_fail@plt+0x54b4>
   17ad8:	cmp	r9, fp
   17adc:	bls	17b20 <__assert_fail@plt+0x5b18>
   17ae0:	ldrb	r3, [fp]
   17ae4:	add	r3, r5, r3
   17ae8:	ldrb	r3, [r3, #784]	; 0x310
   17aec:	cmp	r3, #0
   17af0:	beq	17b20 <__assert_fail@plt+0x5b18>
   17af4:	add	r3, fp, #1
   17af8:	b	17b14 <__assert_fail@plt+0x5b0c>
   17afc:	ldrb	r2, [r3]
   17b00:	add	r3, r3, #1
   17b04:	add	r2, r5, r2
   17b08:	ldrb	r2, [r2, #784]	; 0x310
   17b0c:	cmp	r2, #0
   17b10:	beq	17b20 <__assert_fail@plt+0x5b18>
   17b14:	cmp	r3, r9
   17b18:	mov	fp, r3
   17b1c:	bne	17afc <__assert_fail@plt+0x5af4>
   17b20:	cmp	r6, sl
   17b24:	bls	174bc <__assert_fail@plt+0x54b4>
   17b28:	ldrb	r3, [sl]
   17b2c:	add	r3, r5, r3
   17b30:	ldrb	r3, [r3, #784]	; 0x310
   17b34:	cmp	r3, #0
   17b38:	addne	r3, sl, #1
   17b3c:	bne	17b5c <__assert_fail@plt+0x5b54>
   17b40:	b	174bc <__assert_fail@plt+0x54b4>
   17b44:	ldrb	r2, [r3]
   17b48:	add	r3, r3, #1
   17b4c:	add	r2, r5, r2
   17b50:	ldrb	r2, [r2, #784]	; 0x310
   17b54:	cmp	r2, #0
   17b58:	beq	174bc <__assert_fail@plt+0x54b4>
   17b5c:	cmp	r6, r3
   17b60:	mov	sl, r3
   17b64:	bne	17b44 <__assert_fail@plt+0x5b3c>
   17b68:	b	174bc <__assert_fail@plt+0x54b4>
   17b6c:	ldrb	r4, [r7, #30]
   17b70:	cmp	r4, #0
   17b74:	bne	17cd8 <__assert_fail@plt+0x5cd0>
   17b78:	ldrb	r3, [r7, #27]
   17b7c:	cmp	r3, #0
   17b80:	bne	17e90 <__assert_fail@plt+0x5e88>
   17b84:	ldrb	r3, [r7, #32]
   17b88:	cmp	r3, #0
   17b8c:	beq	17e54 <__assert_fail@plt+0x5e4c>
   17b90:	ldr	r1, [sp, #4]
   17b94:	mov	r0, fp
   17b98:	bl	1da5c <__assert_fail@plt+0xba54>
   17b9c:	str	r0, [sp, #12]
   17ba0:	b	177b4 <__assert_fail@plt+0x57ac>
   17ba4:	add	r1, sp, #84	; 0x54
   17ba8:	mov	r0, fp
   17bac:	bl	11bd0 <strtold@plt>
   17bb0:	add	r1, sp, #88	; 0x58
   17bb4:	ldr	r0, [sp, #4]
   17bb8:	vmov.f64	d8, d0
   17bbc:	bl	11bd0 <strtold@plt>
   17bc0:	ldr	r3, [sp, #84]	; 0x54
   17bc4:	cmp	fp, r3
   17bc8:	beq	183b0 <__assert_fail@plt+0x63a8>
   17bcc:	ldr	r3, [sp, #88]	; 0x58
   17bd0:	ldr	r2, [sp, #4]
   17bd4:	cmp	r2, r3
   17bd8:	beq	17c14 <__assert_fail@plt+0x5c0c>
   17bdc:	vcmpe.f64	d8, d0
   17be0:	vmrs	APSR_nzcv, fpscr
   17be4:	bmi	18650 <__assert_fail@plt+0x6648>
   17be8:	bgt	17c14 <__assert_fail@plt+0x5c0c>
   17bec:	vcmp.f64	d8, d0
   17bf0:	vmrs	APSR_nzcv, fpscr
   17bf4:	streq	r4, [sp, #12]
   17bf8:	beq	177b4 <__assert_fail@plt+0x57ac>
   17bfc:	vcmp.f64	d0, d0
   17c00:	vmrs	APSR_nzcv, fpscr
   17c04:	beq	18650 <__assert_fail@plt+0x6648>
   17c08:	vcmp.f64	d8, d8
   17c0c:	vmrs	APSR_nzcv, fpscr
   17c10:	bne	182b4 <__assert_fail@plt+0x62ac>
   17c14:	mov	r3, #1
   17c18:	str	r3, [sp, #12]
   17c1c:	b	177b4 <__assert_fail@plt+0x57ac>
   17c20:	str	r3, [sp, #4]
   17c24:	bl	261d8 <__assert_fail@plt+0x141d0>
   17c28:	ldr	r3, [sp, #4]
   17c2c:	str	r0, [sp, #40]	; 0x28
   17c30:	b	17680 <__assert_fail@plt+0x5678>
   17c34:	cmp	r3, #0
   17c38:	movne	r2, fp
   17c3c:	subne	r1, r0, #1
   17c40:	beq	1851c <__assert_fail@plt+0x6514>
   17c44:	ldrb	ip, [r2], #1
   17c48:	cmp	r9, r2
   17c4c:	ldrb	ip, [r3, ip]
   17c50:	strb	ip, [r1, #1]!
   17c54:	bne	17c44 <__assert_fail@plt+0x5c3c>
   17c58:	str	r4, [sp, #20]
   17c5c:	mov	r2, r4
   17c60:	b	176d8 <__assert_fail@plt+0x56d0>
   17c64:	cmp	r3, #0
   17c68:	addne	fp, r0, r4
   17c6c:	beq	18428 <__assert_fail@plt+0x6420>
   17c70:	ldrb	r2, [sl], #1
   17c74:	cmp	r6, sl
   17c78:	ldrb	r2, [r3, r2]
   17c7c:	strb	r2, [fp, #1]!
   17c80:	bne	17c70 <__assert_fail@plt+0x5c68>
   17c84:	b	1772c <__assert_fail@plt+0x5724>
   17c88:	ldr	ip, [sp, #4]
   17c8c:	mov	r1, r3
   17c90:	ldrb	r3, [sl], #1
   17c94:	ldrb	r2, [r8, r3]
   17c98:	cmp	r2, #0
   17c9c:	strbeq	r3, [ip, r1]
   17ca0:	addeq	r1, r1, #1
   17ca4:	cmp	sl, r6
   17ca8:	bne	17c90 <__assert_fail@plt+0x5c88>
   17cac:	str	r1, [sp, #8]
   17cb0:	b	1772c <__assert_fail@plt+0x5724>
   17cb4:	mov	fp, r3
   17cb8:	ldrb	r1, [r2], #1
   17cbc:	ldrb	ip, [r8, r1]
   17cc0:	cmp	ip, #0
   17cc4:	strbeq	r1, [r0, fp]
   17cc8:	addeq	fp, fp, #1
   17ccc:	cmp	r9, r2
   17cd0:	bne	17cb8 <__assert_fail@plt+0x5cb0>
   17cd4:	b	176d0 <__assert_fail@plt+0x56c8>
   17cd8:	ldrb	r9, [fp]
   17cdc:	mov	ip, fp
   17ce0:	add	r3, r5, r9
   17ce4:	ldrb	r3, [r3, #784]	; 0x310
   17ce8:	cmp	r3, #0
   17cec:	beq	17d04 <__assert_fail@plt+0x5cfc>
   17cf0:	ldrb	r9, [ip, #1]!
   17cf4:	add	r3, r5, r9
   17cf8:	ldrb	r3, [r3, #784]	; 0x310
   17cfc:	cmp	r3, #0
   17d00:	bne	17cf0 <__assert_fail@plt+0x5ce8>
   17d04:	add	r9, r5, r9
   17d08:	mov	r8, #12
   17d0c:	mov	r6, #0
   17d10:	add	lr, r6, r8
   17d14:	ldr	r3, [pc, #1784]	; 18414 <__assert_fail@plt+0x640c>
   17d18:	lsr	lr, lr, #1
   17d1c:	lsl	r4, lr, #3
   17d20:	add	r3, r3, r4
   17d24:	ldr	r1, [r3, #12]
   17d28:	ldrb	r3, [r1]
   17d2c:	cmp	r3, #0
   17d30:	beq	17d70 <__assert_fail@plt+0x5d68>
   17d34:	ldrb	r2, [r9, #512]	; 0x200
   17d38:	cmp	r3, r2
   17d3c:	bhi	17e40 <__assert_fail@plt+0x5e38>
   17d40:	movcs	r0, ip
   17d44:	bcs	17d64 <__assert_fail@plt+0x5d5c>
   17d48:	b	17e88 <__assert_fail@plt+0x5e80>
   17d4c:	ldrb	r3, [r0, #1]!
   17d50:	add	r3, r5, r3
   17d54:	ldrb	r3, [r3, #512]	; 0x200
   17d58:	cmp	r2, r3
   17d5c:	bhi	17e40 <__assert_fail@plt+0x5e38>
   17d60:	bcc	17e88 <__assert_fail@plt+0x5e80>
   17d64:	ldrb	r2, [r1, #1]!
   17d68:	cmp	r2, #0
   17d6c:	bne	17d4c <__assert_fail@plt+0x5d44>
   17d70:	ldr	r3, [pc, #1692]	; 18414 <__assert_fail@plt+0x640c>
   17d74:	add	r4, r3, r4
   17d78:	ldr	sl, [r4, #16]
   17d7c:	ldr	ip, [sp, #4]
   17d80:	ldrb	r9, [ip]
   17d84:	add	r3, r5, r9
   17d88:	ldrb	r3, [r3, #784]	; 0x310
   17d8c:	cmp	r3, #0
   17d90:	beq	17da8 <__assert_fail@plt+0x5da0>
   17d94:	ldrb	r9, [ip, #1]!
   17d98:	add	r3, r5, r9
   17d9c:	ldrb	r3, [r3, #784]	; 0x310
   17da0:	cmp	r3, #0
   17da4:	bne	17d94 <__assert_fail@plt+0x5d8c>
   17da8:	add	r9, r5, r9
   17dac:	mov	r8, #12
   17db0:	mov	r6, #0
   17db4:	add	lr, r6, r8
   17db8:	ldr	r3, [pc, #1620]	; 18414 <__assert_fail@plt+0x640c>
   17dbc:	lsr	lr, lr, #1
   17dc0:	lsl	r4, lr, #3
   17dc4:	add	r3, r3, r4
   17dc8:	ldr	r1, [r3, #12]
   17dcc:	ldrb	r3, [r1]
   17dd0:	cmp	r3, #0
   17dd4:	beq	17e14 <__assert_fail@plt+0x5e0c>
   17dd8:	ldrb	r2, [r9, #512]	; 0x200
   17ddc:	cmp	r2, r3
   17de0:	bcc	17e2c <__assert_fail@plt+0x5e24>
   17de4:	movls	r0, ip
   17de8:	bls	17e08 <__assert_fail@plt+0x5e00>
   17dec:	b	17e80 <__assert_fail@plt+0x5e78>
   17df0:	ldrb	r3, [r0, #1]!
   17df4:	add	r3, r5, r3
   17df8:	ldrb	r3, [r3, #512]	; 0x200
   17dfc:	cmp	r2, r3
   17e00:	bhi	17e2c <__assert_fail@plt+0x5e24>
   17e04:	bcc	17e80 <__assert_fail@plt+0x5e78>
   17e08:	ldrb	r2, [r1, #1]!
   17e0c:	cmp	r2, #0
   17e10:	bne	17df0 <__assert_fail@plt+0x5de8>
   17e14:	ldr	r3, [pc, #1528]	; 18414 <__assert_fail@plt+0x640c>
   17e18:	add	r4, r3, r4
   17e1c:	ldr	r4, [r4, #16]
   17e20:	sub	r3, sl, r4
   17e24:	str	r3, [sp, #12]
   17e28:	b	177b4 <__assert_fail@plt+0x57ac>
   17e2c:	mov	r8, lr
   17e30:	cmp	r6, r8
   17e34:	bcc	17db4 <__assert_fail@plt+0x5dac>
   17e38:	mov	r4, #0
   17e3c:	b	17e20 <__assert_fail@plt+0x5e18>
   17e40:	mov	r8, lr
   17e44:	cmp	r6, r8
   17e48:	bcc	17d10 <__assert_fail@plt+0x5d08>
   17e4c:	mov	sl, #0
   17e50:	b	17d7c <__assert_fail@plt+0x5d74>
   17e54:	ldr	r3, [sp, #20]
   17e58:	cmp	r3, #0
   17e5c:	ldr	r3, [sp, #8]
   17e60:	bne	181d0 <__assert_fail@plt+0x61c8>
   17e64:	adds	r3, r3, #0
   17e68:	mvnne	r3, #0
   17e6c:	str	r3, [sp, #12]
   17e70:	b	177b4 <__assert_fail@plt+0x57ac>
   17e74:	mov	r1, r0
   17e78:	str	r4, [sp, #20]
   17e7c:	b	176dc <__assert_fail@plt+0x56d4>
   17e80:	add	r6, lr, #1
   17e84:	b	17e30 <__assert_fail@plt+0x5e28>
   17e88:	add	r6, lr, #1
   17e8c:	b	17e44 <__assert_fail@plt+0x5e3c>
   17e90:	add	r3, sp, #276	; 0x114
   17e94:	mov	r0, r3
   17e98:	mov	r2, #156	; 0x9c
   17e9c:	ldr	r1, [sp, #76]	; 0x4c
   17ea0:	bl	11b7c <memcpy@plt>
   17ea4:	mov	r2, #156	; 0x9c
   17ea8:	mov	r1, r0
   17eac:	add	r0, sp, #120	; 0x78
   17eb0:	bl	11b7c <memcpy@plt>
   17eb4:	ldrb	r8, [r5, #1305]	; 0x519
   17eb8:	cmp	r8, #0
   17ebc:	beq	181f8 <__assert_fail@plt+0x61f0>
   17ec0:	ldr	r2, [sp, #20]
   17ec4:	ldr	r1, [sp, #8]
   17ec8:	mov	r9, #4000	; 0xfa0
   17ecc:	add	r3, r2, r1
   17ed0:	mov	sl, fp
   17ed4:	add	r3, r3, r3, lsl #1
   17ed8:	add	r3, r3, #2
   17edc:	str	r3, [sp, #56]	; 0x38
   17ee0:	add	r3, sp, #4416	; 0x1140
   17ee4:	add	r3, r3, #16
   17ee8:	str	r3, [sp, #44]	; 0x2c
   17eec:	add	r3, sp, #120	; 0x78
   17ef0:	str	r3, [sp, #60]	; 0x3c
   17ef4:	add	r3, sp, #276	; 0x114
   17ef8:	str	r3, [sp, #64]	; 0x40
   17efc:	ldr	r3, [sp, #4]
   17f00:	str	r4, [sp, #48]	; 0x30
   17f04:	mov	r8, r3
   17f08:	str	r4, [sp, #12]
   17f0c:	add	r4, fp, r2
   17f10:	add	r2, r3, r1
   17f14:	str	r2, [sp, #52]	; 0x34
   17f18:	str	r7, [sp, #68]	; 0x44
   17f1c:	str	fp, [sp, #72]	; 0x48
   17f20:	ldr	r3, [sp, #56]	; 0x38
   17f24:	cmp	r9, r3
   17f28:	bcc	17ffc <__assert_fail@plt+0x5ff4>
   17f2c:	cmp	r4, sl
   17f30:	bhi	1803c <__assert_fail@plt+0x6034>
   17f34:	ldr	r3, [sp, #52]	; 0x34
   17f38:	cmp	r3, r8
   17f3c:	movls	r6, #0
   17f40:	movls	r7, r6
   17f44:	bhi	18370 <__assert_fail@plt+0x6368>
   17f48:	ldr	r3, [sp, #44]	; 0x2c
   17f4c:	add	fp, r3, r6
   17f50:	cmp	r4, sl
   17f54:	bhi	18314 <__assert_fail@plt+0x630c>
   17f58:	ldr	r3, [sp, #52]	; 0x34
   17f5c:	cmp	r3, r8
   17f60:	bls	18768 <__assert_fail@plt+0x6760>
   17f64:	mov	r0, r8
   17f68:	bl	11e10 <strlen@plt>
   17f6c:	ldr	r3, [sp, #52]	; 0x34
   17f70:	add	r0, r0, #1
   17f74:	add	r8, r8, r0
   17f78:	cmp	r4, sl
   17f7c:	cmpls	r3, r8
   17f80:	bls	18768 <__assert_fail@plt+0x6760>
   17f84:	ldr	r2, [sp, #60]	; 0x3c
   17f88:	mov	r1, r6
   17f8c:	ldr	r0, [sp, #44]	; 0x2c
   17f90:	bl	1d4cc <__assert_fail@plt+0xb4c4>
   17f94:	ldr	r2, [sp, #64]	; 0x40
   17f98:	mov	r1, r7
   17f9c:	mov	r0, fp
   17fa0:	bl	1d4cc <__assert_fail@plt+0xb4c4>
   17fa4:	ldr	r3, [sp, #12]
   17fa8:	cmp	r3, #0
   17fac:	bne	17f20 <__assert_fail@plt+0x5f18>
   17fb0:	cmp	r7, r6
   17fb4:	movcc	r2, r7
   17fb8:	movcs	r2, r6
   17fbc:	mov	r1, fp
   17fc0:	ldr	r0, [sp, #44]	; 0x2c
   17fc4:	bl	11bf4 <memcmp@plt>
   17fc8:	subs	r3, r0, #0
   17fcc:	str	r3, [sp, #12]
   17fd0:	bne	17f20 <__assert_fail@plt+0x5f18>
   17fd4:	cmp	r7, r6
   17fd8:	movls	r3, #0
   17fdc:	movhi	r3, #1
   17fe0:	cmp	r7, r6
   17fe4:	rsbcs	r3, r3, #0
   17fe8:	rsbcc	r3, r3, #1
   17fec:	str	r3, [sp, #12]
   17ff0:	ldr	r3, [sp, #56]	; 0x38
   17ff4:	cmp	r9, r3
   17ff8:	bcs	17f2c <__assert_fail@plt+0x5f24>
   17ffc:	add	r9, r9, r9, lsl #1
   18000:	ldr	r0, [sp, #48]	; 0x30
   18004:	lsr	r9, r9, #1
   18008:	cmp	r9, r3
   1800c:	movcc	r9, r3
   18010:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   18014:	mov	r0, r9
   18018:	bl	2799c <__assert_fail@plt+0x15994>
   1801c:	subs	r3, r0, #0
   18020:	str	r3, [sp, #48]	; 0x30
   18024:	addeq	r3, sp, #4416	; 0x1140
   18028:	addeq	r3, r3, #16
   1802c:	moveq	r9, #4000	; 0xfa0
   18030:	cmp	r4, sl
   18034:	str	r3, [sp, #44]	; 0x2c
   18038:	bls	17f34 <__assert_fail@plt+0x5f2c>
   1803c:	bl	11e34 <__errno_location@plt>
   18040:	mov	r3, #0
   18044:	mov	r2, r9
   18048:	mov	r1, sl
   1804c:	mov	fp, r0
   18050:	str	r3, [r0]
   18054:	ldr	r0, [sp, #44]	; 0x2c
   18058:	bl	11e28 <strxfrm@plt>
   1805c:	ldr	r2, [fp]
   18060:	cmp	r2, #0
   18064:	bne	18780 <__assert_fail@plt+0x6778>
   18068:	ldr	r3, [sp, #52]	; 0x34
   1806c:	add	r6, r0, #1
   18070:	cmp	r3, r8
   18074:	bls	18630 <__assert_fail@plt+0x6628>
   18078:	cmp	r9, r6
   1807c:	bcs	1837c <__assert_fail@plt+0x6374>
   18080:	mov	r0, #0
   18084:	mov	r3, #0
   18088:	str	r3, [fp]
   1808c:	mov	r1, r8
   18090:	bl	11e28 <strxfrm@plt>
   18094:	ldr	r3, [fp]
   18098:	cmp	r3, #0
   1809c:	bne	18800 <__assert_fail@plt+0x67f8>
   180a0:	cmp	r9, r6
   180a4:	add	r7, r0, #1
   180a8:	bcs	1863c <__assert_fail@plt+0x6634>
   180ac:	add	r9, r7, r6
   180b0:	ldr	r3, [pc, #864]	; 18418 <__assert_fail@plt+0x6410>
   180b4:	ldr	r0, [sp, #48]	; 0x30
   180b8:	cmp	r9, r3
   180bc:	addls	r9, r9, r9, lsl #1
   180c0:	lsrls	r9, r9, #1
   180c4:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   180c8:	mov	r0, r9
   180cc:	bl	261d8 <__assert_fail@plt+0x141d0>
   180d0:	cmp	r4, sl
   180d4:	str	r0, [sp, #48]	; 0x30
   180d8:	bhi	18334 <__assert_fail@plt+0x632c>
   180dc:	ldr	r3, [sp, #52]	; 0x34
   180e0:	cmp	r3, r8
   180e4:	bhi	1838c <__assert_fail@plt+0x6384>
   180e8:	mov	r4, r7
   180ec:	add	r2, r0, r6
   180f0:	ldr	fp, [sp, #72]	; 0x48
   180f4:	ldr	r7, [sp, #68]	; 0x44
   180f8:	mov	sl, r2
   180fc:	str	r0, [sp, #44]	; 0x2c
   18100:	add	r2, sp, #120	; 0x78
   18104:	mov	r1, r6
   18108:	bl	1d4cc <__assert_fail@plt+0xb4c4>
   1810c:	add	r9, sp, #276	; 0x114
   18110:	add	r1, sp, #88	; 0x58
   18114:	add	r0, sp, #120	; 0x78
   18118:	bl	1d40c <__assert_fail@plt+0xb404>
   1811c:	add	r8, sp, #104	; 0x68
   18120:	mov	r2, r9
   18124:	mov	r1, r4
   18128:	mov	r0, sl
   1812c:	bl	1d4cc <__assert_fail@plt+0xb4c4>
   18130:	mov	r1, r8
   18134:	mov	r0, r9
   18138:	bl	1d40c <__assert_fail@plt+0xb404>
   1813c:	mov	r1, r8
   18140:	add	r0, sp, #88	; 0x58
   18144:	mov	r2, #16
   18148:	bl	11bf4 <memcmp@plt>
   1814c:	cmp	r0, #0
   18150:	strne	r0, [sp, #12]
   18154:	bne	18164 <__assert_fail@plt+0x615c>
   18158:	ldr	r3, [sp, #12]
   1815c:	cmp	r3, #0
   18160:	beq	18400 <__assert_fail@plt+0x63f8>
   18164:	ldr	r0, [sp, #48]	; 0x30
   18168:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   1816c:	b	177b4 <__assert_fail@plt+0x57ac>
   18170:	ldrb	r2, [ip, #1]
   18174:	add	r4, ip, #2
   18178:	sub	ip, r2, #48	; 0x30
   1817c:	cmp	ip, #9
   18180:	bhi	1795c <__assert_fail@plt+0x5954>
   18184:	cmp	r2, lr
   18188:	movcs	lr, r2
   1818c:	ldrb	r2, [r4], #1
   18190:	sub	ip, r2, #48	; 0x30
   18194:	cmp	ip, #9
   18198:	bls	18184 <__assert_fail@plt+0x617c>
   1819c:	b	1795c <__assert_fail@plt+0x5954>
   181a0:	ldrb	r2, [ip, #1]
   181a4:	add	r4, ip, #2
   181a8:	sub	ip, r2, #48	; 0x30
   181ac:	cmp	ip, #9
   181b0:	bhi	179ec <__assert_fail@plt+0x59e4>
   181b4:	cmp	lr, r2
   181b8:	movcc	lr, r2
   181bc:	ldrb	r2, [r4], #1
   181c0:	sub	ip, r2, #48	; 0x30
   181c4:	cmp	ip, #9
   181c8:	bls	181b4 <__assert_fail@plt+0x61ac>
   181cc:	b	179ec <__assert_fail@plt+0x59e4>
   181d0:	cmp	r3, #0
   181d4:	beq	17c14 <__assert_fail@plt+0x5c0c>
   181d8:	ldr	r1, [sp, #20]
   181dc:	add	r3, r3, #1
   181e0:	ldr	r2, [sp, #4]
   181e4:	add	r1, r1, #1
   181e8:	mov	r0, fp
   181ec:	bl	2694c <__assert_fail@plt+0x14944>
   181f0:	str	r0, [sp, #12]
   181f4:	b	177b4 <__assert_fail@plt+0x57ac>
   181f8:	add	r2, sp, #120	; 0x78
   181fc:	ldr	r1, [sp, #20]
   18200:	mov	r0, fp
   18204:	bl	1d4cc <__assert_fail@plt+0xb4c4>
   18208:	add	r6, sp, #276	; 0x114
   1820c:	add	r1, sp, #88	; 0x58
   18210:	add	r0, sp, #120	; 0x78
   18214:	bl	1d40c <__assert_fail@plt+0xb404>
   18218:	add	r4, sp, #104	; 0x68
   1821c:	mov	r2, r6
   18220:	ldmib	sp, {r0, r1}
   18224:	bl	1d4cc <__assert_fail@plt+0xb4c4>
   18228:	mov	r1, r4
   1822c:	mov	r0, r6
   18230:	bl	1d40c <__assert_fail@plt+0xb404>
   18234:	mov	r1, r4
   18238:	add	r0, sp, #88	; 0x58
   1823c:	mov	r2, #16
   18240:	bl	11bf4 <memcmp@plt>
   18244:	subs	r3, r0, #0
   18248:	str	r3, [sp, #12]
   1824c:	strne	r8, [sp, #48]	; 0x30
   18250:	bne	18164 <__assert_fail@plt+0x615c>
   18254:	str	r3, [sp, #48]	; 0x30
   18258:	ldr	r3, [sp, #8]
   1825c:	ldr	r1, [sp, #4]
   18260:	ldr	r6, [sp, #20]
   18264:	mov	r4, r3
   18268:	mov	r0, fp
   1826c:	cmp	r6, r4
   18270:	movcc	r2, r6
   18274:	movcs	r2, r4
   18278:	bl	11bf4 <memcmp@plt>
   1827c:	subs	r3, r0, #0
   18280:	str	r3, [sp, #12]
   18284:	bne	18164 <__assert_fail@plt+0x615c>
   18288:	cmp	r6, r4
   1828c:	mov	r3, r4
   18290:	movcs	r4, #0
   18294:	movcc	r4, #1
   18298:	cmp	r6, r3
   1829c:	rsbls	r4, r4, #0
   182a0:	rsbhi	r4, r4, #1
   182a4:	ldr	r0, [sp, #48]	; 0x30
   182a8:	str	r4, [sp, #12]
   182ac:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   182b0:	b	177b4 <__assert_fail@plt+0x57ac>
   182b4:	mov	r1, r4
   182b8:	mov	r0, fp
   182bc:	str	r4, [sp, #120]	; 0x78
   182c0:	str	r4, [sp, #124]	; 0x7c
   182c4:	bl	11bd0 <strtold@plt>
   182c8:	add	r3, sp, #4416	; 0x1140
   182cc:	add	r3, r3, #16
   182d0:	str	r4, [r3]
   182d4:	add	r3, sp, #4416	; 0x1140
   182d8:	add	r3, r3, #20
   182dc:	mov	r1, r4
   182e0:	str	r4, [r3]
   182e4:	ldr	r0, [sp, #4]
   182e8:	add	r4, sp, #4416	; 0x1140
   182ec:	add	r4, r4, #16
   182f0:	vstr	d0, [sp, #120]	; 0x78
   182f4:	bl	11bd0 <strtold@plt>
   182f8:	add	r0, sp, #120	; 0x78
   182fc:	mov	r1, r4
   18300:	mov	r2, #8
   18304:	vstr	d0, [r4]
   18308:	bl	11bf4 <memcmp@plt>
   1830c:	str	r0, [sp, #12]
   18310:	b	177b4 <__assert_fail@plt+0x57ac>
   18314:	mov	r0, sl
   18318:	bl	11e10 <strlen@plt>
   1831c:	ldr	r3, [sp, #52]	; 0x34
   18320:	cmp	r3, r8
   18324:	add	r0, r0, #1
   18328:	add	sl, sl, r0
   1832c:	bls	17f78 <__assert_fail@plt+0x5f70>
   18330:	b	17f64 <__assert_fail@plt+0x5f5c>
   18334:	mov	r2, r6
   18338:	mov	r1, sl
   1833c:	bl	11e28 <strxfrm@plt>
   18340:	ldr	r3, [sp, #52]	; 0x34
   18344:	cmp	r3, r8
   18348:	bhi	1838c <__assert_fail@plt+0x6384>
   1834c:	mov	r0, sl
   18350:	bl	11e10 <strlen@plt>
   18354:	ldr	r3, [sp, #48]	; 0x30
   18358:	add	fp, r3, r6
   1835c:	str	r3, [sp, #44]	; 0x2c
   18360:	ldr	r3, [sp, #52]	; 0x34
   18364:	add	r0, r0, #1
   18368:	add	sl, sl, r0
   1836c:	b	17f78 <__assert_fail@plt+0x5f70>
   18370:	bl	11e34 <__errno_location@plt>
   18374:	mov	r6, #0
   18378:	mov	fp, r0
   1837c:	ldr	r3, [sp, #44]	; 0x2c
   18380:	sub	r2, r9, r6
   18384:	add	r0, r3, r6
   18388:	b	18084 <__assert_fail@plt+0x607c>
   1838c:	ldr	r3, [sp, #48]	; 0x30
   18390:	mov	r2, r7
   18394:	add	fp, r3, r6
   18398:	mov	r0, fp
   1839c:	mov	r1, r8
   183a0:	bl	11e28 <strxfrm@plt>
   183a4:	ldr	r3, [sp, #48]	; 0x30
   183a8:	str	r3, [sp, #44]	; 0x2c
   183ac:	b	17f50 <__assert_fail@plt+0x5f48>
   183b0:	ldr	r4, [sp, #88]	; 0x58
   183b4:	ldr	r3, [sp, #4]
   183b8:	subs	r3, r4, r3
   183bc:	mvnne	r3, #0
   183c0:	str	r3, [sp, #12]
   183c4:	b	177b4 <__assert_fail@plt+0x57ac>
   183c8:	ldrb	r3, [r7, #31]
   183cc:	str	r2, [sp, #12]
   183d0:	cmp	r3, #0
   183d4:	bne	17a54 <__assert_fail@plt+0x5a4c>
   183d8:	b	17a60 <__assert_fail@plt+0x5a58>
   183dc:	cmp	r6, sl
   183e0:	movls	r4, #0
   183e4:	movhi	r4, #1
   183e8:	cmp	r9, r0
   183ec:	rsbls	r4, r4, #0
   183f0:	rsbhi	r4, r4, #1
   183f4:	str	r4, [sp, #12]
   183f8:	mov	r3, r4
   183fc:	b	177e0 <__assert_fail@plt+0x57d8>
   18400:	mov	r1, sl
   18404:	ldr	r0, [sp, #44]	; 0x2c
   18408:	b	1826c <__assert_fail@plt+0x6264>
   1840c:	andeq	ip, r3, r8, ror #5
   18410:	andeq	r8, r2, r0, ror #30
   18414:	andeq	ip, r3, r8, ror #3
   18418:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   1841c:	andeq	r9, r2, ip, lsr #9
   18420:	andeq	r9, r2, ip, asr #9
   18424:	strdeq	r9, [r2], -r8
   18428:	add	r2, r4, #5
   1842c:	ldr	ip, [sp, #4]
   18430:	add	r2, r0, r2
   18434:	add	r1, sl, #4
   18438:	cmp	ip, r1
   1843c:	cmpcc	sl, r2
   18440:	ldr	r1, [sp, #8]
   18444:	movcs	r2, #1
   18448:	movcc	r2, #0
   1844c:	cmp	r1, #11
   18450:	movls	r2, #0
   18454:	andhi	r2, r2, #1
   18458:	cmp	r2, #0
   1845c:	beq	18684 <__assert_fail@plt+0x667c>
   18460:	rsb	r1, sl, #0
   18464:	ands	r1, r1, #3
   18468:	beq	1849c <__assert_fail@plt+0x6494>
   1846c:	ldrb	r3, [sl]
   18470:	cmp	r1, #1
   18474:	strb	r3, [ip]
   18478:	moveq	r3, r1
   1847c:	beq	1849c <__assert_fail@plt+0x6494>
   18480:	ldrb	r3, [sl, #1]
   18484:	cmp	r1, #3
   18488:	strb	r3, [ip, #1]
   1848c:	ldrbeq	r2, [sl, #2]
   18490:	moveq	r3, r1
   18494:	movne	r3, #2
   18498:	strbeq	r2, [ip, #2]
   1849c:	ldr	r2, [sp, #8]
   184a0:	sub	r8, r2, r1
   184a4:	sub	ip, r8, #4
   184a8:	add	r2, lr, r1
   184ac:	lsr	ip, ip, #2
   184b0:	add	ip, ip, #1
   184b4:	add	r2, r0, r2
   184b8:	add	r1, sl, r1
   184bc:	lsl	r6, ip, #2
   184c0:	mov	lr, #0
   184c4:	add	lr, lr, #1
   184c8:	ldr	r4, [r1], #4
   184cc:	cmp	lr, ip
   184d0:	str	r4, [r2], #4
   184d4:	bcc	184c4 <__assert_fail@plt+0x64bc>
   184d8:	cmp	r6, r8
   184dc:	add	r3, r3, r6
   184e0:	beq	1772c <__assert_fail@plt+0x5724>
   184e4:	ldrb	r1, [sl, r3]
   184e8:	ldr	ip, [sp, #8]
   184ec:	ldr	lr, [sp, #4]
   184f0:	add	r2, r3, #1
   184f4:	cmp	ip, r2
   184f8:	strb	r1, [lr, r3]
   184fc:	bls	1772c <__assert_fail@plt+0x5724>
   18500:	ldrb	r1, [sl, r2]
   18504:	add	r3, r3, #2
   18508:	cmp	ip, r3
   1850c:	strb	r1, [lr, r2]
   18510:	ldrbhi	r2, [sl, r3]
   18514:	strbhi	r2, [lr, r3]
   18518:	b	1772c <__assert_fail@plt+0x5724>
   1851c:	add	r2, r0, #4
   18520:	add	r1, fp, #4
   18524:	cmp	r0, r1
   18528:	cmpcc	fp, r2
   1852c:	movcs	r2, #1
   18530:	movcc	r2, #0
   18534:	cmp	r4, #11
   18538:	movls	r2, #0
   1853c:	andhi	r2, r2, #1
   18540:	cmp	r2, #0
   18544:	beq	1869c <__assert_fail@plt+0x6694>
   18548:	rsb	r2, fp, #0
   1854c:	ands	r1, r2, #3
   18550:	moveq	ip, r3
   18554:	beq	18588 <__assert_fail@plt+0x6580>
   18558:	ldrb	r2, [fp]
   1855c:	cmp	r1, #1
   18560:	moveq	ip, r1
   18564:	strb	r2, [r0]
   18568:	beq	18588 <__assert_fail@plt+0x6580>
   1856c:	ldrb	r2, [fp, #1]
   18570:	cmp	r1, #3
   18574:	movne	ip, #2
   18578:	strb	r2, [r0, #1]
   1857c:	ldrbeq	r2, [fp, #2]
   18580:	moveq	ip, r1
   18584:	strbeq	r2, [r0, #2]
   18588:	sub	r2, r4, r1
   1858c:	str	r2, [sp, #48]	; 0x30
   18590:	sub	r2, r2, #4
   18594:	add	r9, fp, r1
   18598:	lsr	r2, r2, #2
   1859c:	add	r2, r2, #1
   185a0:	str	r2, [sp, #44]	; 0x2c
   185a4:	lsl	r2, r2, #2
   185a8:	str	r2, [sp, #20]
   185ac:	mov	r2, #0
   185b0:	add	r1, r0, r1
   185b4:	str	r3, [sp, #52]	; 0x34
   185b8:	str	r1, [sp, #12]
   185bc:	ldr	r1, [sp, #44]	; 0x2c
   185c0:	add	r2, r2, #1
   185c4:	cmp	r2, r1
   185c8:	ldr	r1, [sp, #12]
   185cc:	ldr	r3, [r9], #4
   185d0:	str	r3, [r1], #4
   185d4:	str	r1, [sp, #12]
   185d8:	bcc	185bc <__assert_fail@plt+0x65b4>
   185dc:	ldr	r2, [sp, #20]
   185e0:	ldr	r1, [sp, #48]	; 0x30
   185e4:	ldr	r3, [sp, #52]	; 0x34
   185e8:	cmp	r2, r1
   185ec:	add	r2, r2, ip
   185f0:	beq	17c58 <__assert_fail@plt+0x5c50>
   185f4:	ldrb	r1, [fp, r2]
   185f8:	add	ip, r2, #1
   185fc:	cmp	r4, ip
   18600:	strb	r1, [r0, r2]
   18604:	bls	17c58 <__assert_fail@plt+0x5c50>
   18608:	ldrb	r1, [fp, ip]
   1860c:	add	r2, r2, #2
   18610:	cmp	r4, r2
   18614:	strb	r1, [r0, ip]
   18618:	bls	17c58 <__assert_fail@plt+0x5c50>
   1861c:	ldrb	r1, [fp, r2]
   18620:	str	r4, [sp, #20]
   18624:	strb	r1, [r0, r2]
   18628:	mov	r2, r4
   1862c:	b	176d8 <__assert_fail@plt+0x56d0>
   18630:	cmp	r9, r6
   18634:	mov	r7, #0
   18638:	bcc	180ac <__assert_fail@plt+0x60a4>
   1863c:	add	r3, r7, r6
   18640:	cmp	r9, r3
   18644:	bcs	17f48 <__assert_fail@plt+0x5f40>
   18648:	mov	r9, r3
   1864c:	b	180b0 <__assert_fail@plt+0x60a8>
   18650:	mvn	r3, #0
   18654:	str	r3, [sp, #12]
   18658:	b	177b4 <__assert_fail@plt+0x57ac>
   1865c:	cmp	r4, #0
   18660:	bne	186dc <__assert_fail@plt+0x66d4>
   18664:	ldr	r3, [sp, #8]
   18668:	adds	r3, r3, #0
   1866c:	mvnne	r3, #0
   18670:	str	r3, [sp, #12]
   18674:	b	177e0 <__assert_fail@plt+0x57d8>
   18678:	mvn	r3, #0
   1867c:	str	r3, [sp, #12]
   18680:	b	17a48 <__assert_fail@plt+0x5a40>
   18684:	add	fp, r0, r4
   18688:	ldrb	r3, [sl], #1
   1868c:	cmp	sl, r6
   18690:	strb	r3, [fp, #1]!
   18694:	bne	18688 <__assert_fail@plt+0x6680>
   18698:	b	1772c <__assert_fail@plt+0x5724>
   1869c:	mov	r2, fp
   186a0:	sub	r1, r0, #1
   186a4:	ldrb	ip, [r2], #1
   186a8:	cmp	r9, r2
   186ac:	strb	ip, [r1, #1]!
   186b0:	bne	186a4 <__assert_fail@plt+0x669c>
   186b4:	b	17c58 <__assert_fail@plt+0x5c50>
   186b8:	cmp	r6, sl
   186bc:	movls	r4, #0
   186c0:	movhi	r4, #1
   186c4:	cmp	r9, r1
   186c8:	rsbls	r4, r4, #0
   186cc:	rsbhi	r4, r4, #1
   186d0:	str	r4, [sp, #12]
   186d4:	mov	r3, r4
   186d8:	b	177e0 <__assert_fail@plt+0x57d8>
   186dc:	sub	r2, r6, sl
   186e0:	cmp	r2, #0
   186e4:	beq	1875c <__assert_fail@plt+0x6754>
   186e8:	cmp	r3, #0
   186ec:	bne	1874c <__assert_fail@plt+0x6744>
   186f0:	ldr	r3, [sp, #8]
   186f4:	mov	r1, sl
   186f8:	cmp	r4, r3
   186fc:	movcc	r2, r4
   18700:	movcs	r2, r3
   18704:	mov	r0, fp
   18708:	bl	11bf4 <memcmp@plt>
   1870c:	subs	r3, r0, #0
   18710:	str	r3, [sp, #12]
   18714:	bne	17a48 <__assert_fail@plt+0x5a40>
   18718:	ldr	r3, [sp, #8]
   1871c:	cmp	r4, r3
   18720:	bcc	18678 <__assert_fail@plt+0x6670>
   18724:	movne	r3, #1
   18728:	moveq	r3, #0
   1872c:	str	r3, [sp, #12]
   18730:	b	177e0 <__assert_fail@plt+0x57d8>
   18734:	ldrb	r2, [fp], #1
   18738:	ldrb	r1, [sl], #1
   1873c:	ldrb	r2, [r3, r2]
   18740:	ldrb	r1, [r3, r1]
   18744:	subs	r2, r2, r1
   18748:	bne	183c8 <__assert_fail@plt+0x63c0>
   1874c:	cmp	fp, r9
   18750:	cmpcc	sl, r6
   18754:	bcc	18734 <__assert_fail@plt+0x672c>
   18758:	b	18718 <__assert_fail@plt+0x6710>
   1875c:	mov	r3, #1
   18760:	str	r3, [sp, #12]
   18764:	b	17a48 <__assert_fail@plt+0x5a40>
   18768:	mov	r4, r7
   1876c:	mov	sl, fp
   18770:	ldr	r7, [sp, #68]	; 0x44
   18774:	ldr	fp, [sp, #72]	; 0x48
   18778:	ldr	r0, [sp, #44]	; 0x2c
   1877c:	b	18100 <__assert_fail@plt+0x60f8>
   18780:	str	r2, [sp, #4]
   18784:	ldr	r1, [pc, #-880]	; 1841c <__assert_fail@plt+0x6414>
   18788:	mov	r2, #5
   1878c:	mov	r0, #0
   18790:	bl	11c0c <dcgettext@plt>
   18794:	ldr	r3, [sp, #4]
   18798:	mov	r1, r3
   1879c:	mov	r2, r0
   187a0:	mov	r0, #0
   187a4:	bl	11d50 <error@plt>
   187a8:	mov	r2, #5
   187ac:	ldr	r1, [pc, #-916]	; 18420 <__assert_fail@plt+0x6418>
   187b0:	mov	r0, #0
   187b4:	bl	11c0c <dcgettext@plt>
   187b8:	mov	r1, #0
   187bc:	mov	r2, r0
   187c0:	mov	r0, r1
   187c4:	bl	11d50 <error@plt>
   187c8:	mov	r2, #5
   187cc:	ldr	r1, [pc, #-944]	; 18424 <__assert_fail@plt+0x641c>
   187d0:	mov	r0, #0
   187d4:	bl	11c0c <dcgettext@plt>
   187d8:	mov	r2, sl
   187dc:	mov	r4, r0
   187e0:	mov	r1, #8
   187e4:	mov	r0, #0
   187e8:	bl	227a4 <__assert_fail@plt+0x1079c>
   187ec:	mov	r2, r4
   187f0:	mov	r1, #0
   187f4:	mov	r3, r0
   187f8:	mov	r0, #2
   187fc:	bl	11d50 <error@plt>
   18800:	mov	r2, #5
   18804:	ldr	r1, [pc, #-1008]	; 1841c <__assert_fail@plt+0x6414>
   18808:	mov	r0, #0
   1880c:	mov	sl, r3
   18810:	bl	11c0c <dcgettext@plt>
   18814:	mov	r1, sl
   18818:	mov	r2, r0
   1881c:	mov	r0, #0
   18820:	bl	11d50 <error@plt>
   18824:	mov	r2, #5
   18828:	ldr	r1, [pc, #-1040]	; 18420 <__assert_fail@plt+0x6418>
   1882c:	mov	r0, #0
   18830:	bl	11c0c <dcgettext@plt>
   18834:	mov	r1, #0
   18838:	mov	r2, r0
   1883c:	mov	r0, r1
   18840:	bl	11d50 <error@plt>
   18844:	mov	r2, #5
   18848:	ldr	r1, [pc, #-1068]	; 18424 <__assert_fail@plt+0x641c>
   1884c:	mov	r0, #0
   18850:	bl	11c0c <dcgettext@plt>
   18854:	mov	r2, r8
   18858:	mov	r4, r0
   1885c:	b	187e0 <__assert_fail@plt+0x67d8>
   18860:	push	{r4, r5, r6, r7, r8, lr}
   18864:	mov	r5, r0
   18868:	ldr	r4, [pc, #192]	; 18930 <__assert_fail@plt+0x6928>
   1886c:	mov	r6, r1
   18870:	ldr	r3, [r4, #1040]	; 0x410
   18874:	cmp	r3, #0
   18878:	beq	188a0 <__assert_fail@plt+0x6898>
   1887c:	bl	17478 <__assert_fail@plt+0x5470>
   18880:	cmp	r0, #0
   18884:	popne	{r4, r5, r6, r7, r8, pc}
   18888:	ldrb	r3, [r4, #1173]	; 0x495
   1888c:	cmp	r3, #0
   18890:	popne	{r4, r5, r6, r7, r8, pc}
   18894:	ldrb	r3, [r4, #1174]	; 0x496
   18898:	cmp	r3, #0
   1889c:	bne	1891c <__assert_fail@plt+0x6914>
   188a0:	ldr	r1, [r5, #4]
   188a4:	ldr	r3, [r6, #4]
   188a8:	subs	r8, r1, #1
   188ac:	sub	r7, r3, #1
   188b0:	bne	188cc <__assert_fail@plt+0x68c4>
   188b4:	adds	r0, r7, #0
   188b8:	mvnne	r0, #0
   188bc:	ldrb	r3, [r4, #1464]	; 0x5b8
   188c0:	cmp	r3, #0
   188c4:	rsbne	r0, r0, #0
   188c8:	pop	{r4, r5, r6, r7, r8, pc}
   188cc:	cmp	r7, #0
   188d0:	moveq	r0, #1
   188d4:	beq	188bc <__assert_fail@plt+0x68b4>
   188d8:	ldrb	r2, [r4, #1305]	; 0x519
   188dc:	cmp	r2, #0
   188e0:	bne	18920 <__assert_fail@plt+0x6918>
   188e4:	cmp	r8, r7
   188e8:	movcc	r2, r8
   188ec:	movcs	r2, r7
   188f0:	ldr	r1, [r6]
   188f4:	ldr	r0, [r5]
   188f8:	bl	11bf4 <memcmp@plt>
   188fc:	cmp	r0, #0
   18900:	bne	188bc <__assert_fail@plt+0x68b4>
   18904:	cmp	r8, r7
   18908:	mvncc	r0, #0
   1890c:	bcc	188bc <__assert_fail@plt+0x68b4>
   18910:	movne	r0, #1
   18914:	moveq	r0, #0
   18918:	b	188bc <__assert_fail@plt+0x68b4>
   1891c:	pop	{r4, r5, r6, r7, r8, pc}
   18920:	ldr	r2, [r6]
   18924:	ldr	r0, [r5]
   18928:	bl	2694c <__assert_fail@plt+0x14944>
   1892c:	b	188bc <__assert_fail@plt+0x68b4>
   18930:	andeq	ip, r3, r8, ror #5
   18934:	cmp	r1, #2
   18938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1893c:	mov	r4, r0
   18940:	sub	sp, sp, #12
   18944:	mov	r5, r2
   18948:	mov	r6, r3
   1894c:	beq	18ba0 <__assert_fail@plt+0x6b98>
   18950:	lsr	r7, r1, #1
   18954:	cmp	r3, #0
   18958:	lsl	sl, r7, #4
   1895c:	rsb	sl, sl, #0
   18960:	sub	r8, r1, r7
   18964:	add	r6, r0, sl
   18968:	bne	18a74 <__assert_fail@plt+0x6a6c>
   1896c:	mov	r1, r8
   18970:	mov	r0, r6
   18974:	bl	18934 <__assert_fail@plt+0x692c>
   18978:	cmp	r7, #1
   1897c:	bls	18b8c <__assert_fail@plt+0x6b84>
   18980:	mov	r3, #1
   18984:	mov	r2, r5
   18988:	mov	r1, r7
   1898c:	mov	r0, r4
   18990:	bl	18934 <__assert_fail@plt+0x692c>
   18994:	mov	sl, r6
   18998:	mov	ip, r5
   1899c:	mov	fp, ip
   189a0:	sub	r4, r4, #16
   189a4:	sub	r6, ip, #16
   189a8:	sub	r5, sl, #16
   189ac:	ldr	r9, [pc, #612]	; 18c18 <__assert_fail@plt+0x6c10>
   189b0:	str	r7, [sp]
   189b4:	b	189f0 <__assert_fail@plt+0x69e8>
   189b8:	ldrb	r3, [r9, #1464]	; 0x5b8
   189bc:	cmp	r3, #0
   189c0:	beq	18a50 <__assert_fail@plt+0x6a48>
   189c4:	adds	r0, r7, #0
   189c8:	movne	r0, #1
   189cc:	cmp	r0, #0
   189d0:	ble	18a50 <__assert_fail@plt+0x6a48>
   189d4:	ldm	r5, {r0, r1, r2, r3}
   189d8:	subs	r8, r8, #1
   189dc:	stm	r4, {r0, r1, r2, r3}
   189e0:	beq	18b14 <__assert_fail@plt+0x6b0c>
   189e4:	mov	sl, r5
   189e8:	sub	r5, r5, #16
   189ec:	sub	r4, r4, #16
   189f0:	ldr	r3, [r9, #1040]	; 0x410
   189f4:	cmp	r3, #0
   189f8:	beq	18a28 <__assert_fail@plt+0x6a20>
   189fc:	mov	r1, r5
   18a00:	mov	r0, r6
   18a04:	bl	17478 <__assert_fail@plt+0x5470>
   18a08:	cmp	r0, #0
   18a0c:	bne	189cc <__assert_fail@plt+0x69c4>
   18a10:	ldrb	r3, [r9, #1173]	; 0x495
   18a14:	cmp	r3, #0
   18a18:	bne	18a50 <__assert_fail@plt+0x6a48>
   18a1c:	ldrb	r3, [r9, #1174]	; 0x496
   18a20:	cmp	r3, #0
   18a24:	bne	18a50 <__assert_fail@plt+0x6a48>
   18a28:	ldr	r1, [fp, #-12]
   18a2c:	ldr	r2, [sl, #-12]
   18a30:	subs	r3, r1, #1
   18a34:	sub	r7, r2, #1
   18a38:	beq	189b8 <__assert_fail@plt+0x69b0>
   18a3c:	cmp	r7, #0
   18a40:	bne	18abc <__assert_fail@plt+0x6ab4>
   18a44:	ldrb	r3, [r9, #1464]	; 0x5b8
   18a48:	cmp	r3, #0
   18a4c:	beq	189d4 <__assert_fail@plt+0x69cc>
   18a50:	ldm	r6, {r0, r1, r2, r3}
   18a54:	ldr	ip, [sp]
   18a58:	subs	ip, ip, #1
   18a5c:	str	ip, [sp]
   18a60:	stm	r4, {r0, r1, r2, r3}
   18a64:	beq	18b4c <__assert_fail@plt+0x6b44>
   18a68:	mov	fp, r6
   18a6c:	sub	r6, r6, #16
   18a70:	b	189ec <__assert_fail@plt+0x69e4>
   18a74:	add	sl, r2, sl
   18a78:	mov	r0, r6
   18a7c:	mov	r2, sl
   18a80:	mov	r3, #1
   18a84:	mov	r1, r8
   18a88:	bl	18934 <__assert_fail@plt+0x692c>
   18a8c:	cmp	r7, #1
   18a90:	movls	ip, r4
   18a94:	movls	r4, r5
   18a98:	bls	1899c <__assert_fail@plt+0x6994>
   18a9c:	mov	r0, r4
   18aa0:	mov	r3, #0
   18aa4:	mov	r2, r5
   18aa8:	mov	r1, r7
   18aac:	bl	18934 <__assert_fail@plt+0x692c>
   18ab0:	mov	ip, r4
   18ab4:	mov	r4, r5
   18ab8:	b	1899c <__assert_fail@plt+0x6994>
   18abc:	ldrb	r0, [r9, #1305]	; 0x519
   18ac0:	cmp	r0, #0
   18ac4:	bne	18b6c <__assert_fail@plt+0x6b64>
   18ac8:	cmp	r3, r7
   18acc:	movcc	r2, r3
   18ad0:	movcs	r2, r7
   18ad4:	ldr	r1, [sl, #-16]
   18ad8:	ldr	r0, [fp, #-16]
   18adc:	str	r3, [sp, #4]
   18ae0:	bl	11bf4 <memcmp@plt>
   18ae4:	cmp	r0, #0
   18ae8:	bne	18b5c <__assert_fail@plt+0x6b54>
   18aec:	ldr	r3, [sp, #4]
   18af0:	cmp	r3, r7
   18af4:	bcs	18b54 <__assert_fail@plt+0x6b4c>
   18af8:	ldrb	r3, [r9, #1464]	; 0x5b8
   18afc:	cmp	r3, #0
   18b00:	beq	18a50 <__assert_fail@plt+0x6a48>
   18b04:	ldm	r5, {r0, r1, r2, r3}
   18b08:	subs	r8, r8, #1
   18b0c:	stm	r4, {r0, r1, r2, r3}
   18b10:	bne	189e4 <__assert_fail@plt+0x69dc>
   18b14:	ldr	r7, [sp]
   18b18:	rsb	r3, r7, r7, lsl #28
   18b1c:	sub	r7, r7, #1
   18b20:	lsl	r3, r3, #4
   18b24:	add	lr, fp, r3
   18b28:	add	r4, r4, r3
   18b2c:	lsl	ip, r7, #4
   18b30:	add	r3, lr, ip
   18b34:	sub	r7, r7, #1
   18b38:	ldm	r3, {r0, r1, r2, r3}
   18b3c:	add	ip, r4, ip
   18b40:	cmn	r7, #1
   18b44:	stm	ip, {r0, r1, r2, r3}
   18b48:	bne	18b2c <__assert_fail@plt+0x6b24>
   18b4c:	add	sp, sp, #12
   18b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b54:	movne	r0, #1
   18b58:	moveq	r0, #0
   18b5c:	ldrb	r3, [r9, #1464]	; 0x5b8
   18b60:	cmp	r3, #0
   18b64:	rsbne	r0, r0, #0
   18b68:	b	189cc <__assert_fail@plt+0x69c4>
   18b6c:	mov	r3, r2
   18b70:	ldr	r0, [fp, #-16]
   18b74:	ldr	r2, [sl, #-16]
   18b78:	bl	2694c <__assert_fail@plt+0x14944>
   18b7c:	ldrb	r3, [r9, #1464]	; 0x5b8
   18b80:	cmp	r3, #0
   18b84:	rsbne	r0, r0, #0
   18b88:	b	189cc <__assert_fail@plt+0x69c4>
   18b8c:	ldmdb	r4, {r0, r1, r2, r3}
   18b90:	mov	sl, r6
   18b94:	mov	ip, r5
   18b98:	stmdb	r5, {r0, r1, r2, r3}
   18b9c:	b	1899c <__assert_fail@plt+0x6994>
   18ba0:	sub	r7, r0, #32
   18ba4:	sub	r8, r0, #16
   18ba8:	mov	r1, r7
   18bac:	mov	r0, r8
   18bb0:	bl	18860 <__assert_fail@plt+0x6858>
   18bb4:	cmp	r6, #0
   18bb8:	bne	18be4 <__assert_fail@plt+0x6bdc>
   18bbc:	cmp	r0, #0
   18bc0:	ble	18b4c <__assert_fail@plt+0x6b44>
   18bc4:	ldm	r8, {r0, r1, r2, r3}
   18bc8:	sub	r5, r5, #16
   18bcc:	stm	r5, {r0, r1, r2, r3}
   18bd0:	ldm	r7, {r0, r1, r2, r3}
   18bd4:	stm	r8, {r0, r1, r2, r3}
   18bd8:	ldm	r5, {r0, r1, r2, r3}
   18bdc:	stm	r7, {r0, r1, r2, r3}
   18be0:	b	18b4c <__assert_fail@plt+0x6b44>
   18be4:	cmp	r0, #0
   18be8:	movle	r0, #0
   18bec:	movgt	r0, #1
   18bf0:	mvn	r3, r0
   18bf4:	sub	r0, r0, #2
   18bf8:	add	r3, r4, r3, lsl #4
   18bfc:	add	r4, r4, r0, lsl #4
   18c00:	ldm	r3, {r0, r1, r2, r3}
   18c04:	sub	ip, r5, #32
   18c08:	stmdb	r5, {r0, r1, r2, r3}
   18c0c:	ldm	r4, {r0, r1, r2, r3}
   18c10:	stm	ip, {r0, r1, r2, r3}
   18c14:	b	18b4c <__assert_fail@plt+0x6b44>
   18c18:	andeq	ip, r3, r8, ror #5
   18c1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c20:	mov	r4, r3
   18c24:	sub	sp, sp, #92	; 0x5c
   18c28:	ldr	r7, [r3, #20]
   18c2c:	ldr	r9, [r3, #24]
   18c30:	ldr	r3, [r3, #32]
   18c34:	mov	r5, r1
   18c38:	str	r3, [sp, #72]	; 0x48
   18c3c:	ldr	r3, [sp, #128]	; 0x80
   18c40:	add	r1, r7, r9
   18c44:	str	r3, [sp, #76]	; 0x4c
   18c48:	ldr	r3, [sp, #132]	; 0x84
   18c4c:	lsr	r8, r5, #1
   18c50:	str	r3, [sp, #80]	; 0x50
   18c54:	ldr	r3, [sp, #136]	; 0x88
   18c58:	cmp	r1, #131072	; 0x20000
   18c5c:	cmpcs	r5, #1
   18c60:	mov	r6, r0
   18c64:	str	r2, [sp, #44]	; 0x2c
   18c68:	str	r0, [sp, #60]	; 0x3c
   18c6c:	str	r2, [sp, #68]	; 0x44
   18c70:	str	r8, [sp, #64]	; 0x40
   18c74:	str	r3, [sp, #84]	; 0x54
   18c78:	bhi	19954 <__assert_fail@plt+0x794c>
   18c7c:	ldr	r3, [sp, #44]	; 0x2c
   18c80:	lsl	r5, r7, #4
   18c84:	rsb	r5, r5, #0
   18c88:	cmp	r9, #1
   18c8c:	sub	sl, r6, r3, lsl #4
   18c90:	addls	r8, r6, r5
   18c94:	bls	18cb4 <__assert_fail@plt+0x6cac>
   18c98:	lsr	r2, r7, #1
   18c9c:	add	r8, r6, r5
   18ca0:	mov	r0, r8
   18ca4:	sub	r2, sl, r2, lsl #4
   18ca8:	mov	r3, #0
   18cac:	mov	r1, r9
   18cb0:	bl	18934 <__assert_fail@plt+0x692c>
   18cb4:	cmp	r7, #1
   18cb8:	bls	18cd0 <__assert_fail@plt+0x6cc8>
   18cbc:	mov	r2, sl
   18cc0:	mov	r1, r7
   18cc4:	mov	r3, #0
   18cc8:	mov	r0, r6
   18ccc:	bl	18934 <__assert_fail@plt+0x692c>
   18cd0:	ldr	r2, [sp, #128]	; 0x80
   18cd4:	sub	r3, r5, r9, lsl #4
   18cd8:	add	r2, r2, #4
   18cdc:	mov	fp, r2
   18ce0:	str	r2, [sp, #52]	; 0x34
   18ce4:	ldr	r2, [sp, #128]	; 0x80
   18ce8:	add	r3, r6, r3
   18cec:	str	r3, [r4, #12]
   18cf0:	mov	r5, r2
   18cf4:	stm	r4, {r6, r8}
   18cf8:	str	r8, [r4, #8]
   18cfc:	mov	r0, fp
   18d00:	bl	11b4c <pthread_mutex_lock@plt>
   18d04:	mov	r2, r5
   18d08:	mov	r1, r4
   18d0c:	ldr	r0, [r2], #32
   18d10:	mov	r5, #1
   18d14:	mov	r6, r2
   18d18:	str	r2, [sp, #32]
   18d1c:	ldr	r7, [pc, #3348]	; 19a38 <__assert_fail@plt+0x7a30>
   18d20:	bl	1fb10 <__assert_fail@plt+0xdb08>
   18d24:	mov	r0, r6
   18d28:	strb	r5, [r4, #44]	; 0x2c
   18d2c:	bl	11fd8 <pthread_cond_signal@plt>
   18d30:	mov	r0, fp
   18d34:	bl	11aa4 <pthread_mutex_unlock@plt>
   18d38:	add	r3, r7, #1456	; 0x5b0
   18d3c:	add	r3, r3, #12
   18d40:	str	r5, [sp, #48]	; 0x30
   18d44:	str	r3, [sp, #36]	; 0x24
   18d48:	mov	r0, fp
   18d4c:	bl	11b4c <pthread_mutex_lock@plt>
   18d50:	ldr	r4, [sp, #32]
   18d54:	ldr	r5, [sp, #128]	; 0x80
   18d58:	b	18d60 <__assert_fail@plt+0x6d58>
   18d5c:	bl	11f78 <pthread_cond_wait@plt>
   18d60:	ldr	r0, [r5]
   18d64:	bl	1fbb8 <__assert_fail@plt+0xdbb0>
   18d68:	mov	r1, fp
   18d6c:	subs	r9, r0, #0
   18d70:	mov	r0, r4
   18d74:	beq	18d5c <__assert_fail@plt+0x6d54>
   18d78:	add	r3, r9, #48	; 0x30
   18d7c:	mov	r4, r3
   18d80:	mov	r0, fp
   18d84:	str	r3, [sp, #28]
   18d88:	bl	11aa4 <pthread_mutex_unlock@plt>
   18d8c:	mov	r0, r4
   18d90:	bl	11b4c <pthread_mutex_lock@plt>
   18d94:	ldr	r3, [r9, #40]	; 0x28
   18d98:	mov	r2, #0
   18d9c:	cmp	r3, #0
   18da0:	strb	r2, [r9, #44]	; 0x2c
   18da4:	beq	19670 <__assert_fail@plt+0x7668>
   18da8:	add	r6, r3, #1
   18dac:	cmp	r3, #1
   18db0:	ldr	r3, [r9]
   18db4:	lsl	r6, r6, #1
   18db8:	mov	r5, r3
   18dbc:	str	r3, [sp, #20]
   18dc0:	ldr	r3, [sp, #44]	; 0x2c
   18dc4:	lsr	r6, r3, r6
   18dc8:	ldr	r3, [r9, #4]
   18dcc:	add	r6, r6, #1
   18dd0:	mov	r4, r3
   18dd4:	str	r3, [sp, #16]
   18dd8:	bls	19090 <__assert_fail@plt+0x7088>
   18ddc:	ldr	r3, [r9, #16]
   18de0:	ldr	r8, [r3]
   18de4:	b	18e24 <__assert_fail@plt+0x6e1c>
   18de8:	ldrb	r3, [r7, #1464]	; 0x5b8
   18dec:	cmp	r3, #0
   18df0:	beq	18ea8 <__assert_fail@plt+0x6ea0>
   18df4:	adds	r0, sl, #0
   18df8:	movne	r0, #1
   18dfc:	cmp	r0, #0
   18e00:	ble	18ea8 <__assert_fail@plt+0x6ea0>
   18e04:	ldr	r4, [r9, #4]
   18e08:	sub	r8, r8, #16
   18e0c:	sub	r4, r4, #16
   18e10:	str	r4, [r9, #4]
   18e14:	ldm	r4, {r0, r1, r2, r3}
   18e18:	ldr	r5, [r9]
   18e1c:	stm	r8, {r0, r1, r2, r3}
   18e20:	sub	r6, r6, #1
   18e24:	ldr	lr, [r9, #8]
   18e28:	mov	ip, r8
   18e2c:	cmp	lr, r5
   18e30:	beq	18f18 <__assert_fail@plt+0x6f10>
   18e34:	ldr	r3, [r9, #12]
   18e38:	cmp	r3, r4
   18e3c:	beq	18f18 <__assert_fail@plt+0x6f10>
   18e40:	cmp	r6, #0
   18e44:	beq	18f14 <__assert_fail@plt+0x6f0c>
   18e48:	ldr	r3, [r7, #1040]	; 0x410
   18e4c:	cmp	r3, #0
   18e50:	beq	18e80 <__assert_fail@plt+0x6e78>
   18e54:	sub	r1, r4, #16
   18e58:	sub	r0, r5, #16
   18e5c:	bl	17478 <__assert_fail@plt+0x5470>
   18e60:	cmp	r0, #0
   18e64:	bne	18dfc <__assert_fail@plt+0x6df4>
   18e68:	ldrb	r3, [r7, #1173]	; 0x495
   18e6c:	cmp	r3, #0
   18e70:	bne	18ea8 <__assert_fail@plt+0x6ea0>
   18e74:	ldrb	r3, [r7, #1174]	; 0x496
   18e78:	cmp	r3, #0
   18e7c:	bne	18ea8 <__assert_fail@plt+0x6ea0>
   18e80:	ldr	r1, [r5, #-12]
   18e84:	ldr	r2, [r4, #-12]
   18e88:	subs	r3, r1, #1
   18e8c:	sub	sl, r2, #1
   18e90:	beq	18de8 <__assert_fail@plt+0x6de0>
   18e94:	cmp	sl, #0
   18e98:	bne	18ec8 <__assert_fail@plt+0x6ec0>
   18e9c:	ldrb	r3, [r7, #1464]	; 0x5b8
   18ea0:	cmp	r3, #0
   18ea4:	beq	18e04 <__assert_fail@plt+0x6dfc>
   18ea8:	ldr	r5, [r9]
   18eac:	sub	r8, r8, #16
   18eb0:	sub	r5, r5, #16
   18eb4:	str	r5, [r9]
   18eb8:	ldm	r5, {r0, r1, r2, r3}
   18ebc:	ldr	r4, [r9, #4]
   18ec0:	stm	r8, {r0, r1, r2, r3}
   18ec4:	b	18e20 <__assert_fail@plt+0x6e18>
   18ec8:	ldrb	r0, [r7, #1305]	; 0x519
   18ecc:	cmp	r0, #0
   18ed0:	bne	19384 <__assert_fail@plt+0x737c>
   18ed4:	cmp	r3, sl
   18ed8:	movcc	r2, r3
   18edc:	movcs	r2, sl
   18ee0:	ldr	r1, [r4, #-16]
   18ee4:	ldr	r0, [r5, #-16]
   18ee8:	str	r3, [sp, #24]
   18eec:	bl	11bf4 <memcmp@plt>
   18ef0:	cmp	r0, #0
   18ef4:	bne	18fc0 <__assert_fail@plt+0x6fb8>
   18ef8:	ldr	r3, [sp, #24]
   18efc:	cmp	r3, sl
   18f00:	bcs	18fb8 <__assert_fail@plt+0x6fb0>
   18f04:	ldrb	r3, [r7, #1464]	; 0x5b8
   18f08:	cmp	r3, #0
   18f0c:	bne	18e04 <__assert_fail@plt+0x6dfc>
   18f10:	b	18ea8 <__assert_fail@plt+0x6ea0>
   18f14:	mvn	r6, #0
   18f18:	ldr	r2, [sp, #16]
   18f1c:	ldr	r1, [sp, #20]
   18f20:	sub	r2, r2, r4
   18f24:	ldr	r3, [r9, #24]
   18f28:	asr	r2, r2, #4
   18f2c:	sub	sl, r1, r5
   18f30:	cmp	r2, r3
   18f34:	str	r4, [sp, #40]	; 0x28
   18f38:	str	r3, [sp, #24]
   18f3c:	mov	r8, r5
   18f40:	asr	sl, sl, #4
   18f44:	beq	1940c <__assert_fail@plt+0x7404>
   18f48:	ldr	lr, [r9, #20]
   18f4c:	cmp	sl, lr
   18f50:	beq	19470 <__assert_fail@plt+0x7468>
   18f54:	ldr	r3, [r9, #16]
   18f58:	ldr	r1, [sp, #24]
   18f5c:	str	ip, [r3]
   18f60:	ldrb	r3, [r9, #44]	; 0x2c
   18f64:	sub	sl, lr, sl
   18f68:	sub	r2, r1, r2
   18f6c:	cmp	r3, #0
   18f70:	str	sl, [r9, #20]
   18f74:	str	r2, [r9, #24]
   18f78:	beq	19018 <__assert_fail@plt+0x7010>
   18f7c:	ldr	r3, [r9, #40]	; 0x28
   18f80:	cmp	r3, #1
   18f84:	bls	18fd0 <__assert_fail@plt+0x6fc8>
   18f88:	ldr	r0, [r9, #28]
   18f8c:	add	r0, r0, #48	; 0x30
   18f90:	bl	11b4c <pthread_mutex_lock@plt>
   18f94:	ldr	r4, [r9, #28]
   18f98:	ldrb	r3, [r4, #44]	; 0x2c
   18f9c:	cmp	r3, #0
   18fa0:	beq	193a4 <__assert_fail@plt+0x739c>
   18fa4:	add	r0, r4, #48	; 0x30
   18fa8:	bl	11aa4 <pthread_mutex_unlock@plt>
   18fac:	ldr	r0, [sp, #28]
   18fb0:	bl	11aa4 <pthread_mutex_unlock@plt>
   18fb4:	b	18d48 <__assert_fail@plt+0x6d40>
   18fb8:	movne	r0, #1
   18fbc:	moveq	r0, #0
   18fc0:	ldrb	r3, [r7, #1464]	; 0x5b8
   18fc4:	cmp	r3, #0
   18fc8:	rsbne	r0, r0, #0
   18fcc:	b	18dfc <__assert_fail@plt+0x6df4>
   18fd0:	ldr	r3, [r9, #20]
   18fd4:	ldr	r2, [r9, #24]
   18fd8:	cmn	r3, r2
   18fdc:	bne	18fac <__assert_fail@plt+0x6fa4>
   18fe0:	mov	r0, fp
   18fe4:	ldr	r4, [r9, #28]
   18fe8:	bl	11b4c <pthread_mutex_lock@plt>
   18fec:	ldr	r3, [sp, #128]	; 0x80
   18ff0:	mov	r1, r4
   18ff4:	ldr	r0, [r3]
   18ff8:	bl	1fb10 <__assert_fail@plt+0xdb08>
   18ffc:	ldrb	r3, [sp, #48]	; 0x30
   19000:	ldr	r0, [sp, #32]
   19004:	strb	r3, [r4, #44]	; 0x2c
   19008:	bl	11fd8 <pthread_cond_signal@plt>
   1900c:	mov	r0, fp
   19010:	bl	11aa4 <pthread_mutex_unlock@plt>
   19014:	b	18fac <__assert_fail@plt+0x6fa4>
   19018:	ldr	r1, [r9, #8]
   1901c:	ldr	r3, [r9, #12]
   19020:	sub	r8, r8, r1
   19024:	ldr	r1, [sp, #40]	; 0x28
   19028:	add	r8, r8, #15
   1902c:	sub	r3, r1, r3
   19030:	cmp	r8, #30
   19034:	add	r3, r3, #15
   19038:	bls	19644 <__assert_fail@plt+0x763c>
   1903c:	cmp	r3, #30
   19040:	movls	r3, #0
   19044:	movhi	r3, #1
   19048:	cmp	r2, #0
   1904c:	movne	sl, r3
   19050:	orreq	sl, r3, #1
   19054:	cmp	sl, #0
   19058:	beq	18f7c <__assert_fail@plt+0x6f74>
   1905c:	mov	r0, fp
   19060:	bl	11b4c <pthread_mutex_lock@plt>
   19064:	ldr	r3, [sp, #128]	; 0x80
   19068:	mov	r1, r9
   1906c:	ldr	r0, [r3]
   19070:	bl	1fb10 <__assert_fail@plt+0xdb08>
   19074:	ldrb	r3, [sp, #48]	; 0x30
   19078:	ldr	r0, [sp, #32]
   1907c:	strb	r3, [r9, #44]	; 0x2c
   19080:	bl	11fd8 <pthread_cond_signal@plt>
   19084:	mov	r0, fp
   19088:	bl	11aa4 <pthread_mutex_unlock@plt>
   1908c:	b	18f7c <__assert_fail@plt+0x6f74>
   19090:	mov	r8, r5
   19094:	str	fp, [sp, #24]
   19098:	ldr	r5, [sp, #136]	; 0x88
   1909c:	b	19158 <__assert_fail@plt+0x7150>
   190a0:	ldrb	r3, [r7, #1464]	; 0x5b8
   190a4:	cmp	r3, #0
   190a8:	beq	191d8 <__assert_fail@plt+0x71d0>
   190ac:	adds	r0, sl, #0
   190b0:	movne	r0, #1
   190b4:	cmp	r0, #0
   190b8:	ble	191d8 <__assert_fail@plt+0x71d0>
   190bc:	ldrb	r3, [r7, #1173]	; 0x495
   190c0:	ldr	r8, [r9, #4]
   190c4:	cmp	r3, #0
   190c8:	sub	r4, r8, #16
   190cc:	str	r4, [r9, #4]
   190d0:	beq	192e0 <__assert_fail@plt+0x72d8>
   190d4:	ldr	r3, [r7, #1468]	; 0x5bc
   190d8:	cmp	r3, #0
   190dc:	beq	192d0 <__assert_fail@plt+0x72c8>
   190e0:	ldr	r3, [r7, #1040]	; 0x410
   190e4:	cmp	r3, #0
   190e8:	beq	19118 <__assert_fail@plt+0x7110>
   190ec:	ldr	r1, [sp, #36]	; 0x24
   190f0:	mov	r0, r4
   190f4:	bl	17478 <__assert_fail@plt+0x5470>
   190f8:	cmp	r0, #0
   190fc:	bne	192d0 <__assert_fail@plt+0x72c8>
   19100:	ldrb	r3, [r7, #1173]	; 0x495
   19104:	cmp	r3, #0
   19108:	bne	1914c <__assert_fail@plt+0x7144>
   1910c:	ldrb	r3, [r7, #1174]	; 0x496
   19110:	cmp	r3, #0
   19114:	bne	1914c <__assert_fail@plt+0x7144>
   19118:	ldr	r1, [r8, #-12]
   1911c:	ldr	r3, [r7, #1472]	; 0x5c0
   19120:	subs	fp, r1, #1
   19124:	sub	sl, r3, #1
   19128:	bne	19290 <__assert_fail@plt+0x7288>
   1912c:	adds	r0, sl, #0
   19130:	mvnne	r0, #0
   19134:	ldrb	r3, [r7, #1464]	; 0x5b8
   19138:	cmp	r3, #0
   1913c:	beq	19144 <__assert_fail@plt+0x713c>
   19140:	rsb	r0, r0, #0
   19144:	cmp	r0, #0
   19148:	bne	192d0 <__assert_fail@plt+0x72c8>
   1914c:	ldr	r8, [r9]
   19150:	ldr	r4, [r9, #4]
   19154:	sub	r6, r6, #1
   19158:	ldr	r3, [r9, #8]
   1915c:	cmp	r3, r8
   19160:	beq	194dc <__assert_fail@plt+0x74d4>
   19164:	ldr	r2, [r9, #12]
   19168:	cmp	r2, r4
   1916c:	beq	194dc <__assert_fail@plt+0x74d4>
   19170:	cmp	r6, #0
   19174:	beq	196d0 <__assert_fail@plt+0x76c8>
   19178:	ldr	r3, [r7, #1040]	; 0x410
   1917c:	cmp	r3, #0
   19180:	beq	191b0 <__assert_fail@plt+0x71a8>
   19184:	sub	r1, r4, #16
   19188:	sub	r0, r8, #16
   1918c:	bl	17478 <__assert_fail@plt+0x5470>
   19190:	cmp	r0, #0
   19194:	bne	190b4 <__assert_fail@plt+0x70ac>
   19198:	ldrb	r3, [r7, #1173]	; 0x495
   1919c:	cmp	r3, #0
   191a0:	bne	192f4 <__assert_fail@plt+0x72ec>
   191a4:	ldrb	r3, [r7, #1174]	; 0x496
   191a8:	cmp	r3, #0
   191ac:	bne	1934c <__assert_fail@plt+0x7344>
   191b0:	ldr	r1, [r8, #-12]
   191b4:	ldr	r3, [r4, #-12]
   191b8:	subs	fp, r1, #1
   191bc:	sub	sl, r3, #1
   191c0:	beq	190a0 <__assert_fail@plt+0x7098>
   191c4:	cmp	sl, #0
   191c8:	bne	19308 <__assert_fail@plt+0x7300>
   191cc:	ldrb	r3, [r7, #1464]	; 0x5b8
   191d0:	cmp	r3, #0
   191d4:	beq	190bc <__assert_fail@plt+0x70b4>
   191d8:	ldrb	r3, [r7, #1173]	; 0x495
   191dc:	ldr	sl, [r9]
   191e0:	cmp	r3, #0
   191e4:	sub	r4, sl, #16
   191e8:	str	r4, [r9]
   191ec:	mov	r8, r4
   191f0:	beq	1927c <__assert_fail@plt+0x7274>
   191f4:	ldr	r3, [r7, #1468]	; 0x5bc
   191f8:	cmp	r3, #0
   191fc:	beq	1926c <__assert_fail@plt+0x7264>
   19200:	ldr	r3, [r7, #1040]	; 0x410
   19204:	cmp	r3, #0
   19208:	beq	19238 <__assert_fail@plt+0x7230>
   1920c:	ldr	r1, [sp, #36]	; 0x24
   19210:	mov	r0, r4
   19214:	bl	17478 <__assert_fail@plt+0x5470>
   19218:	cmp	r0, #0
   1921c:	bne	1926c <__assert_fail@plt+0x7264>
   19220:	ldrb	r3, [r7, #1173]	; 0x495
   19224:	cmp	r3, #0
   19228:	bne	1914c <__assert_fail@plt+0x7144>
   1922c:	ldrb	r3, [r7, #1174]	; 0x496
   19230:	cmp	r3, #0
   19234:	bne	1914c <__assert_fail@plt+0x7144>
   19238:	ldr	r1, [sl, #-12]
   1923c:	ldr	r2, [r7, #1472]	; 0x5c0
   19240:	subs	r3, r1, #1
   19244:	sub	fp, r2, #1
   19248:	bne	196dc <__assert_fail@plt+0x76d4>
   1924c:	adds	r0, fp, #0
   19250:	mvnne	r0, #0
   19254:	ldrb	r3, [r7, #1464]	; 0x5b8
   19258:	cmp	r3, #0
   1925c:	beq	19264 <__assert_fail@plt+0x725c>
   19260:	rsb	r0, r0, #0
   19264:	cmp	r0, #0
   19268:	beq	1914c <__assert_fail@plt+0x7144>
   1926c:	ldm	r4, {r0, r1, r2, r3}
   19270:	ldr	ip, [pc, #1988]	; 19a3c <__assert_fail@plt+0x7a34>
   19274:	add	ip, ip, #12
   19278:	stm	ip, {r0, r1, r2, r3}
   1927c:	mov	r0, r8
   19280:	mov	r2, r5
   19284:	ldr	r1, [sp, #132]	; 0x84
   19288:	bl	16718 <__assert_fail@plt+0x4710>
   1928c:	b	1914c <__assert_fail@plt+0x7144>
   19290:	cmp	sl, #0
   19294:	beq	192d0 <__assert_fail@plt+0x72c8>
   19298:	ldrb	r2, [r7, #1305]	; 0x519
   1929c:	cmp	r2, #0
   192a0:	bne	19944 <__assert_fail@plt+0x793c>
   192a4:	cmp	fp, sl
   192a8:	movcc	r2, fp
   192ac:	movcs	r2, sl
   192b0:	ldr	r0, [r8, #-16]
   192b4:	ldr	r1, [r7, #1468]	; 0x5bc
   192b8:	bl	11bf4 <memcmp@plt>
   192bc:	cmp	r0, #0
   192c0:	beq	198f8 <__assert_fail@plt+0x78f0>
   192c4:	ldrb	r3, [r7, #1464]	; 0x5b8
   192c8:	cmp	r3, #0
   192cc:	bne	19140 <__assert_fail@plt+0x7138>
   192d0:	ldm	r4, {r0, r1, r2, r3}
   192d4:	ldr	ip, [pc, #1888]	; 19a3c <__assert_fail@plt+0x7a34>
   192d8:	add	ip, ip, #12
   192dc:	stm	ip, {r0, r1, r2, r3}
   192e0:	mov	r0, r4
   192e4:	mov	r2, r5
   192e8:	ldr	r1, [sp, #132]	; 0x84
   192ec:	bl	16718 <__assert_fail@plt+0x4710>
   192f0:	b	1914c <__assert_fail@plt+0x7144>
   192f4:	ldr	sl, [r9]
   192f8:	sub	r4, sl, #16
   192fc:	str	r4, [r9]
   19300:	mov	r8, r4
   19304:	b	191f4 <__assert_fail@plt+0x71ec>
   19308:	ldrb	r2, [r7, #1305]	; 0x519
   1930c:	cmp	r2, #0
   19310:	bne	196b4 <__assert_fail@plt+0x76ac>
   19314:	cmp	fp, sl
   19318:	movcc	r2, fp
   1931c:	movcs	r2, sl
   19320:	ldr	r1, [r4, #-16]
   19324:	ldr	r0, [r8, #-16]
   19328:	bl	11bf4 <memcmp@plt>
   1932c:	cmp	r0, #0
   19330:	bne	19374 <__assert_fail@plt+0x736c>
   19334:	cmp	fp, sl
   19338:	bcs	1936c <__assert_fail@plt+0x7364>
   1933c:	ldrb	r3, [r7, #1464]	; 0x5b8
   19340:	cmp	r3, #0
   19344:	bne	190bc <__assert_fail@plt+0x70b4>
   19348:	b	191d8 <__assert_fail@plt+0x71d0>
   1934c:	ldr	r8, [r9]
   19350:	mov	r2, r5
   19354:	sub	r8, r8, #16
   19358:	str	r8, [r9]
   1935c:	mov	r0, r8
   19360:	ldr	r1, [sp, #132]	; 0x84
   19364:	bl	16718 <__assert_fail@plt+0x4710>
   19368:	b	1914c <__assert_fail@plt+0x7144>
   1936c:	movne	r0, #1
   19370:	moveq	r0, #0
   19374:	ldrb	r3, [r7, #1464]	; 0x5b8
   19378:	cmp	r3, #0
   1937c:	rsbne	r0, r0, #0
   19380:	b	190b4 <__assert_fail@plt+0x70ac>
   19384:	mov	r3, r2
   19388:	ldr	r0, [r5, #-16]
   1938c:	ldr	r2, [r4, #-16]
   19390:	bl	2694c <__assert_fail@plt+0x14944>
   19394:	ldrb	r3, [r7, #1464]	; 0x5b8
   19398:	cmp	r3, #0
   1939c:	rsbne	r0, r0, #0
   193a0:	b	18dfc <__assert_fail@plt+0x6df4>
   193a4:	ldr	r1, [r4, #8]
   193a8:	ldr	r2, [r4]
   193ac:	ldr	r3, [r4, #4]
   193b0:	sub	r2, r2, r1
   193b4:	ldr	r1, [r4, #12]
   193b8:	add	r2, r2, #15
   193bc:	sub	r3, r3, r1
   193c0:	cmp	r2, #30
   193c4:	add	r3, r3, #15
   193c8:	bls	19658 <__assert_fail@plt+0x7650>
   193cc:	cmp	r3, #30
   193d0:	bls	19858 <__assert_fail@plt+0x7850>
   193d4:	mov	r0, fp
   193d8:	bl	11b4c <pthread_mutex_lock@plt>
   193dc:	ldr	r3, [sp, #128]	; 0x80
   193e0:	mov	r1, r4
   193e4:	ldr	r0, [r3]
   193e8:	bl	1fb10 <__assert_fail@plt+0xdb08>
   193ec:	ldrb	r3, [sp, #48]	; 0x30
   193f0:	ldr	r0, [sp, #32]
   193f4:	strb	r3, [r4, #44]	; 0x2c
   193f8:	bl	11fd8 <pthread_cond_signal@plt>
   193fc:	mov	r0, fp
   19400:	bl	11aa4 <pthread_mutex_unlock@plt>
   19404:	ldr	r4, [r9, #28]
   19408:	b	18fa4 <__assert_fail@plt+0x6f9c>
   1940c:	cmp	lr, r5
   19410:	beq	199ac <__assert_fail@plt+0x79a4>
   19414:	cmp	r6, #0
   19418:	subne	r8, r5, #16
   1941c:	sub	r6, r6, #1
   19420:	bne	19438 <__assert_fail@plt+0x7430>
   19424:	b	199ac <__assert_fail@plt+0x79a4>
   19428:	cmn	r6, #1
   1942c:	sub	r3, r8, #16
   19430:	beq	19458 <__assert_fail@plt+0x7450>
   19434:	mov	r8, r3
   19438:	ldm	r8, {r0, r1, r2, r3}
   1943c:	sub	ip, ip, #16
   19440:	cmp	lr, r8
   19444:	str	r8, [r9]
   19448:	sub	r6, r6, #1
   1944c:	stm	ip, {r0, r1, r2, r3}
   19450:	bne	19428 <__assert_fail@plt+0x7420>
   19454:	mov	r8, lr
   19458:	ldr	r3, [sp, #20]
   1945c:	ldr	lr, [r9, #20]
   19460:	sub	sl, r3, r8
   19464:	ldr	r2, [sp, #24]
   19468:	asr	sl, sl, #4
   1946c:	b	18f54 <__assert_fail@plt+0x6f4c>
   19470:	ldr	r5, [r9, #12]
   19474:	cmp	r5, r4
   19478:	beq	199b4 <__assert_fail@plt+0x79ac>
   1947c:	cmp	r6, #0
   19480:	sub	r6, r6, #1
   19484:	beq	199b4 <__assert_fail@plt+0x79ac>
   19488:	sub	r4, r4, #16
   1948c:	b	194a0 <__assert_fail@plt+0x7498>
   19490:	cmn	r6, #1
   19494:	sub	r3, r4, #16
   19498:	beq	194bc <__assert_fail@plt+0x74b4>
   1949c:	mov	r4, r3
   194a0:	ldm	r4, {r0, r1, r2, r3}
   194a4:	sub	ip, ip, #16
   194a8:	cmp	r4, r5
   194ac:	str	r4, [r9, #4]
   194b0:	sub	r6, r6, #1
   194b4:	stm	ip, {r0, r1, r2, r3}
   194b8:	bne	19490 <__assert_fail@plt+0x7488>
   194bc:	ldr	r2, [sp, #16]
   194c0:	mov	r3, lr
   194c4:	sub	r2, r2, r4
   194c8:	mov	lr, sl
   194cc:	str	r4, [sp, #40]	; 0x28
   194d0:	asr	r2, r2, #4
   194d4:	mov	sl, r3
   194d8:	b	18f54 <__assert_fail@plt+0x6f4c>
   194dc:	ldr	fp, [sp, #24]
   194e0:	ldr	r2, [sp, #16]
   194e4:	ldr	r1, [r9, #24]
   194e8:	sub	r2, r2, r4
   194ec:	str	r1, [sp, #24]
   194f0:	asr	r2, r2, #4
   194f4:	cmp	r2, r1
   194f8:	str	r4, [sp, #40]	; 0x28
   194fc:	beq	1972c <__assert_fail@plt+0x7724>
   19500:	ldr	r3, [sp, #20]
   19504:	ldr	lr, [r9, #20]
   19508:	sub	sl, r3, r8
   1950c:	asr	sl, sl, #4
   19510:	cmp	sl, lr
   19514:	bne	18f60 <__assert_fail@plt+0x6f58>
   19518:	ldr	r3, [r9, #12]
   1951c:	str	fp, [sp, #24]
   19520:	cmp	r3, r4
   19524:	ldr	r8, [sp, #132]	; 0x84
   19528:	ldr	sl, [sp, #136]	; 0x88
   1952c:	beq	195d8 <__assert_fail@plt+0x75d0>
   19530:	cmp	r6, #0
   19534:	beq	1990c <__assert_fail@plt+0x7904>
   19538:	ldrb	r3, [r7, #1173]	; 0x495
   1953c:	sub	r5, r4, #16
   19540:	str	r5, [r9, #4]
   19544:	cmp	r3, #0
   19548:	beq	19628 <__assert_fail@plt+0x7620>
   1954c:	ldr	r3, [r7, #1468]	; 0x5bc
   19550:	cmp	r3, #0
   19554:	beq	19618 <__assert_fail@plt+0x7610>
   19558:	ldr	r3, [r7, #1040]	; 0x410
   1955c:	cmp	r3, #0
   19560:	beq	19590 <__assert_fail@plt+0x7588>
   19564:	ldr	r1, [sp, #36]	; 0x24
   19568:	mov	r0, r5
   1956c:	bl	17478 <__assert_fail@plt+0x5470>
   19570:	cmp	r0, #0
   19574:	bne	19618 <__assert_fail@plt+0x7610>
   19578:	ldrb	r3, [r7, #1173]	; 0x495
   1957c:	cmp	r3, #0
   19580:	bne	195c4 <__assert_fail@plt+0x75bc>
   19584:	ldrb	r3, [r7, #1174]	; 0x496
   19588:	cmp	r3, #0
   1958c:	bne	195c4 <__assert_fail@plt+0x75bc>
   19590:	ldr	r1, [r4, #-12]
   19594:	ldr	r2, [r7, #1472]	; 0x5c0
   19598:	subs	r3, r1, #1
   1959c:	sub	fp, r2, #1
   195a0:	bne	19610 <__assert_fail@plt+0x7608>
   195a4:	adds	r0, fp, #0
   195a8:	mvnne	r0, #0
   195ac:	ldrb	r3, [r7, #1464]	; 0x5b8
   195b0:	cmp	r3, #0
   195b4:	beq	195bc <__assert_fail@plt+0x75b4>
   195b8:	rsb	r0, r0, #0
   195bc:	cmp	r0, #0
   195c0:	bne	19618 <__assert_fail@plt+0x7610>
   195c4:	ldr	r4, [r9, #4]
   195c8:	sub	r6, r6, #1
   195cc:	ldr	r3, [r9, #12]
   195d0:	cmp	r3, r4
   195d4:	bne	19530 <__assert_fail@plt+0x7528>
   195d8:	ldr	r3, [sp, #20]
   195dc:	ldr	r8, [r9]
   195e0:	ldr	r2, [sp, #16]
   195e4:	sub	sl, r3, r8
   195e8:	sub	r2, r2, r4
   195ec:	ldr	r3, [r9, #24]
   195f0:	ldr	fp, [sp, #24]
   195f4:	str	r4, [sp, #40]	; 0x28
   195f8:	asr	r2, r2, #4
   195fc:	asr	sl, sl, #4
   19600:	ldr	lr, [r9, #20]
   19604:	str	r3, [sp, #24]
   19608:	mov	r1, r3
   1960c:	b	18f60 <__assert_fail@plt+0x6f58>
   19610:	cmp	fp, #0
   19614:	bne	198b0 <__assert_fail@plt+0x78a8>
   19618:	ldm	r5, {r0, r1, r2, r3}
   1961c:	ldr	ip, [pc, #1048]	; 19a3c <__assert_fail@plt+0x7a34>
   19620:	add	ip, ip, #12
   19624:	stm	ip, {r0, r1, r2, r3}
   19628:	mov	r0, r5
   1962c:	mov	r2, sl
   19630:	mov	r1, r8
   19634:	bl	16718 <__assert_fail@plt+0x4710>
   19638:	sub	r6, r6, #1
   1963c:	ldr	r4, [r9, #4]
   19640:	b	195cc <__assert_fail@plt+0x75c4>
   19644:	cmp	r3, #30
   19648:	clz	sl, sl
   1964c:	lsr	sl, sl, #5
   19650:	movls	sl, #0
   19654:	b	19054 <__assert_fail@plt+0x704c>
   19658:	cmp	r3, #30
   1965c:	bls	18fa4 <__assert_fail@plt+0x6f9c>
   19660:	ldr	r3, [r4, #20]
   19664:	cmp	r3, #0
   19668:	bne	18fa4 <__assert_fail@plt+0x6f9c>
   1966c:	b	193d4 <__assert_fail@plt+0x73cc>
   19670:	ldr	r0, [sp, #28]
   19674:	bl	11aa4 <pthread_mutex_unlock@plt>
   19678:	ldr	r4, [sp, #52]	; 0x34
   1967c:	mov	r0, r4
   19680:	bl	11b4c <pthread_mutex_lock@plt>
   19684:	ldr	r3, [sp, #128]	; 0x80
   19688:	mov	r1, r9
   1968c:	ldr	r0, [r3]
   19690:	bl	1fb10 <__assert_fail@plt+0xdb08>
   19694:	mov	r3, #1
   19698:	ldr	r0, [sp, #32]
   1969c:	strb	r3, [r9, #44]	; 0x2c
   196a0:	bl	11fd8 <pthread_cond_signal@plt>
   196a4:	mov	r0, r4
   196a8:	bl	11aa4 <pthread_mutex_unlock@plt>
   196ac:	add	sp, sp, #92	; 0x5c
   196b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196b4:	ldr	r2, [r4, #-16]
   196b8:	ldr	r0, [r8, #-16]
   196bc:	bl	2694c <__assert_fail@plt+0x14944>
   196c0:	ldrb	r3, [r7, #1464]	; 0x5b8
   196c4:	cmp	r3, #0
   196c8:	rsbne	r0, r0, #0
   196cc:	b	190b4 <__assert_fail@plt+0x70ac>
   196d0:	ldr	fp, [sp, #24]
   196d4:	mvn	r6, #0
   196d8:	b	194e0 <__assert_fail@plt+0x74d8>
   196dc:	cmp	fp, #0
   196e0:	beq	1926c <__assert_fail@plt+0x7264>
   196e4:	ldrb	r0, [r7, #1305]	; 0x519
   196e8:	cmp	r0, #0
   196ec:	bne	199e4 <__assert_fail@plt+0x79dc>
   196f0:	cmp	r3, fp
   196f4:	movcc	r2, r3
   196f8:	movcs	r2, fp
   196fc:	ldr	r0, [sl, #-16]
   19700:	ldr	r1, [r7, #1468]	; 0x5bc
   19704:	str	r3, [sp, #40]	; 0x28
   19708:	bl	11bf4 <memcmp@plt>
   1970c:	cmp	r0, #0
   19710:	bne	1998c <__assert_fail@plt+0x7984>
   19714:	ldr	r3, [sp, #40]	; 0x28
   19718:	cmp	r3, fp
   1971c:	bcc	1926c <__assert_fail@plt+0x7264>
   19720:	movne	r0, #1
   19724:	moveq	r0, #0
   19728:	b	19254 <__assert_fail@plt+0x724c>
   1972c:	cmp	r8, r3
   19730:	str	fp, [sp, #24]
   19734:	ldr	r5, [sp, #132]	; 0x84
   19738:	ldr	sl, [sp, #136]	; 0x88
   1973c:	beq	197e8 <__assert_fail@plt+0x77e0>
   19740:	cmp	r6, #0
   19744:	beq	197e8 <__assert_fail@plt+0x77e0>
   19748:	ldrb	r3, [r7, #1173]	; 0x495
   1974c:	sub	r4, r8, #16
   19750:	str	r4, [r9]
   19754:	cmp	r3, #0
   19758:	beq	19838 <__assert_fail@plt+0x7830>
   1975c:	ldr	r3, [r7, #1468]	; 0x5bc
   19760:	cmp	r3, #0
   19764:	beq	19828 <__assert_fail@plt+0x7820>
   19768:	ldr	r3, [r7, #1040]	; 0x410
   1976c:	cmp	r3, #0
   19770:	beq	197a0 <__assert_fail@plt+0x7798>
   19774:	ldr	r1, [sp, #36]	; 0x24
   19778:	mov	r0, r4
   1977c:	bl	17478 <__assert_fail@plt+0x5470>
   19780:	cmp	r0, #0
   19784:	bne	19828 <__assert_fail@plt+0x7820>
   19788:	ldrb	r3, [r7, #1173]	; 0x495
   1978c:	cmp	r3, #0
   19790:	bne	197d4 <__assert_fail@plt+0x77cc>
   19794:	ldrb	r3, [r7, #1174]	; 0x496
   19798:	cmp	r3, #0
   1979c:	bne	197d4 <__assert_fail@plt+0x77cc>
   197a0:	ldr	r1, [r8, #-12]
   197a4:	ldr	r2, [r7, #1472]	; 0x5c0
   197a8:	subs	r3, r1, #1
   197ac:	sub	fp, r2, #1
   197b0:	bne	19820 <__assert_fail@plt+0x7818>
   197b4:	adds	r0, fp, #0
   197b8:	mvnne	r0, #0
   197bc:	ldrb	r3, [r7, #1464]	; 0x5b8
   197c0:	cmp	r3, #0
   197c4:	beq	197cc <__assert_fail@plt+0x77c4>
   197c8:	rsb	r0, r0, #0
   197cc:	cmp	r0, #0
   197d0:	bne	19828 <__assert_fail@plt+0x7820>
   197d4:	ldr	r8, [r9]
   197d8:	ldr	r3, [r9, #8]
   197dc:	sub	r6, r6, #1
   197e0:	cmp	r8, r3
   197e4:	bne	19740 <__assert_fail@plt+0x7738>
   197e8:	ldr	r2, [sp, #20]
   197ec:	ldr	r3, [r9, #4]
   197f0:	sub	sl, r2, r8
   197f4:	ldr	r2, [sp, #16]
   197f8:	str	r3, [sp, #40]	; 0x28
   197fc:	sub	r2, r2, r3
   19800:	ldr	r3, [r9, #24]
   19804:	ldr	fp, [sp, #24]
   19808:	asr	sl, sl, #4
   1980c:	asr	r2, r2, #4
   19810:	ldr	lr, [r9, #20]
   19814:	str	r3, [sp, #24]
   19818:	mov	r1, r3
   1981c:	b	18f60 <__assert_fail@plt+0x6f58>
   19820:	cmp	fp, #0
   19824:	bne	19868 <__assert_fail@plt+0x7860>
   19828:	ldm	r4, {r0, r1, r2, r3}
   1982c:	ldr	ip, [pc, #520]	; 19a3c <__assert_fail@plt+0x7a34>
   19830:	add	ip, ip, #12
   19834:	stm	ip, {r0, r1, r2, r3}
   19838:	mov	r0, r4
   1983c:	mov	r2, sl
   19840:	mov	r1, r5
   19844:	bl	16718 <__assert_fail@plt+0x4710>
   19848:	sub	r6, r6, #1
   1984c:	ldr	r8, [r9]
   19850:	ldr	r3, [r9, #8]
   19854:	b	197e0 <__assert_fail@plt+0x77d8>
   19858:	ldr	r3, [r4, #24]
   1985c:	cmp	r3, #0
   19860:	bne	18fa4 <__assert_fail@plt+0x6f9c>
   19864:	b	193d4 <__assert_fail@plt+0x73cc>
   19868:	ldrb	r0, [r7, #1305]	; 0x519
   1986c:	cmp	r0, #0
   19870:	bne	199bc <__assert_fail@plt+0x79b4>
   19874:	cmp	r3, fp
   19878:	movcc	r2, r3
   1987c:	movcs	r2, fp
   19880:	ldr	r0, [r8, #-16]
   19884:	ldr	r1, [r7, #1468]	; 0x5bc
   19888:	str	r3, [sp, #40]	; 0x28
   1988c:	bl	11bf4 <memcmp@plt>
   19890:	cmp	r0, #0
   19894:	bne	1999c <__assert_fail@plt+0x7994>
   19898:	ldr	r3, [sp, #40]	; 0x28
   1989c:	cmp	r3, fp
   198a0:	bcc	19828 <__assert_fail@plt+0x7820>
   198a4:	movne	r0, #1
   198a8:	moveq	r0, #0
   198ac:	b	197bc <__assert_fail@plt+0x77b4>
   198b0:	ldrb	r0, [r7, #1305]	; 0x519
   198b4:	cmp	r0, #0
   198b8:	bne	199d0 <__assert_fail@plt+0x79c8>
   198bc:	cmp	r3, fp
   198c0:	movcc	r2, r3
   198c4:	movcs	r2, fp
   198c8:	ldr	r0, [r4, #-16]
   198cc:	ldr	r1, [r7, #1468]	; 0x5bc
   198d0:	str	r3, [sp, #40]	; 0x28
   198d4:	bl	11bf4 <memcmp@plt>
   198d8:	cmp	r0, #0
   198dc:	bne	1997c <__assert_fail@plt+0x7974>
   198e0:	ldr	r3, [sp, #40]	; 0x28
   198e4:	cmp	r3, fp
   198e8:	bcc	19618 <__assert_fail@plt+0x7610>
   198ec:	movne	r0, #1
   198f0:	moveq	r0, #0
   198f4:	b	195ac <__assert_fail@plt+0x75a4>
   198f8:	cmp	fp, sl
   198fc:	bcc	192d0 <__assert_fail@plt+0x72c8>
   19900:	movne	r0, #1
   19904:	moveq	r0, #0
   19908:	b	19134 <__assert_fail@plt+0x712c>
   1990c:	ldr	r3, [sp, #20]
   19910:	ldr	r8, [r9]
   19914:	ldr	r2, [sp, #16]
   19918:	sub	sl, r3, r8
   1991c:	sub	r2, r2, r4
   19920:	ldr	r3, [r9, #24]
   19924:	ldr	fp, [sp, #24]
   19928:	str	r4, [sp, #40]	; 0x28
   1992c:	ldr	lr, [r9, #20]
   19930:	str	r3, [sp, #24]
   19934:	asr	r2, r2, #4
   19938:	asr	sl, sl, #4
   1993c:	mov	r1, r3
   19940:	b	18f60 <__assert_fail@plt+0x6f58>
   19944:	ldr	r0, [r8, #-16]
   19948:	ldr	r2, [r7, #1468]	; 0x5bc
   1994c:	bl	2694c <__assert_fail@plt+0x14944>
   19950:	b	19134 <__assert_fail@plt+0x712c>
   19954:	add	r3, sp, #60	; 0x3c
   19958:	ldr	r2, [pc, #224]	; 19a40 <__assert_fail@plt+0x7a38>
   1995c:	mov	r1, #0
   19960:	add	r0, sp, #56	; 0x38
   19964:	bl	11d2c <pthread_create@plt>
   19968:	subs	r7, r0, #0
   1996c:	beq	199f8 <__assert_fail@plt+0x79f0>
   19970:	ldr	r7, [r4, #20]
   19974:	ldr	r9, [r4, #24]
   19978:	b	18c7c <__assert_fail@plt+0x6c74>
   1997c:	ldrb	r3, [r7, #1464]	; 0x5b8
   19980:	cmp	r3, #0
   19984:	bne	195b8 <__assert_fail@plt+0x75b0>
   19988:	b	19618 <__assert_fail@plt+0x7610>
   1998c:	ldrb	r3, [r7, #1464]	; 0x5b8
   19990:	cmp	r3, #0
   19994:	bne	19260 <__assert_fail@plt+0x7258>
   19998:	b	1926c <__assert_fail@plt+0x7264>
   1999c:	ldrb	r3, [r7, #1464]	; 0x5b8
   199a0:	cmp	r3, #0
   199a4:	bne	197c8 <__assert_fail@plt+0x77c0>
   199a8:	b	19828 <__assert_fail@plt+0x7820>
   199ac:	ldr	lr, [r9, #20]
   199b0:	b	18f54 <__assert_fail@plt+0x6f4c>
   199b4:	mov	lr, sl
   199b8:	b	18f54 <__assert_fail@plt+0x6f4c>
   199bc:	mov	r3, r2
   199c0:	ldr	r0, [r8, #-16]
   199c4:	ldr	r2, [r7, #1468]	; 0x5bc
   199c8:	bl	2694c <__assert_fail@plt+0x14944>
   199cc:	b	197bc <__assert_fail@plt+0x77b4>
   199d0:	mov	r3, r2
   199d4:	ldr	r0, [r4, #-16]
   199d8:	ldr	r2, [r7, #1468]	; 0x5bc
   199dc:	bl	2694c <__assert_fail@plt+0x14944>
   199e0:	b	195ac <__assert_fail@plt+0x75a4>
   199e4:	mov	r3, r2
   199e8:	ldr	r0, [sl, #-16]
   199ec:	ldr	r2, [r7, #1468]	; 0x5bc
   199f0:	bl	2694c <__assert_fail@plt+0x14944>
   199f4:	b	19254 <__assert_fail@plt+0x724c>
   199f8:	ldr	r2, [sp, #136]	; 0x88
   199fc:	ldr	r0, [r4, #20]
   19a00:	ldr	r3, [r4, #36]	; 0x24
   19a04:	str	r2, [sp, #8]
   19a08:	ldr	r2, [sp, #132]	; 0x84
   19a0c:	sub	r1, r5, r8
   19a10:	str	r2, [sp, #4]
   19a14:	ldr	r2, [sp, #128]	; 0x80
   19a18:	sub	r0, r6, r0, lsl #4
   19a1c:	str	r2, [sp]
   19a20:	ldr	r2, [sp, #44]	; 0x2c
   19a24:	bl	18c1c <__assert_fail@plt+0x6c14>
   19a28:	mov	r1, r7
   19a2c:	ldr	r0, [sp, #56]	; 0x38
   19a30:	bl	11f24 <pthread_join@plt>
   19a34:	b	196ac <__assert_fail@plt+0x76a4>
   19a38:	andeq	ip, r3, r8, ror #5
   19a3c:	muleq	r3, r8, r8
   19a40:	andeq	r9, r1, r4, asr #20
   19a44:	push	{r4, r5, lr}
   19a48:	sub	sp, sp, #20
   19a4c:	ldr	lr, [r0, #20]
   19a50:	ldr	ip, [r0, #16]
   19a54:	ldr	r5, [r0]
   19a58:	ldr	r4, [r0, #24]
   19a5c:	ldmib	r0, {r1, r2, r3}
   19a60:	mov	r0, r5
   19a64:	str	r4, [sp, #8]
   19a68:	stm	sp, {ip, lr}
   19a6c:	bl	18c1c <__assert_fail@plt+0x6c14>
   19a70:	mov	r0, #0
   19a74:	add	sp, sp, #20
   19a78:	pop	{r4, r5, pc}
   19a7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a80:	sub	sp, sp, #108	; 0x6c
   19a84:	mov	r8, #0
   19a88:	ldrb	ip, [sp, #148]	; 0x94
   19a8c:	ldr	lr, [sp, #144]	; 0x90
   19a90:	str	r1, [sp, #72]	; 0x48
   19a94:	cmp	ip, #0
   19a98:	lsl	r9, lr, #4
   19a9c:	str	r2, [sp, #76]	; 0x4c
   19aa0:	str	r3, [sp, #100]	; 0x64
   19aa4:	rsb	r9, r9, #0
   19aa8:	mov	sl, #1
   19aac:	beq	1a1f8 <__assert_fail@plt+0x81f0>
   19ab0:	ldr	r3, [r0, #20]
   19ab4:	add	r2, r2, r9
   19ab8:	mov	ip, r2
   19abc:	str	r2, [sp, #32]
   19ac0:	lsr	r2, r3, sl
   19ac4:	add	r1, r0, #8
   19ac8:	sub	r3, r3, r2
   19acc:	sub	ip, ip, r2, lsl #4
   19ad0:	str	ip, [sp, #76]	; 0x4c
   19ad4:	ldr	lr, [sp, #72]	; 0x48
   19ad8:	ldr	ip, [r0, #40]	; 0x28
   19adc:	ldr	r4, [sp, #76]	; 0x4c
   19ae0:	ldr	r5, [sp, #32]
   19ae4:	add	ip, ip, #1
   19ae8:	str	r4, [lr, #12]
   19aec:	str	r4, [lr, #4]
   19af0:	str	r1, [lr, #16]
   19af4:	str	r2, [lr, #20]
   19af8:	str	r3, [lr, #24]
   19afc:	str	r0, [lr, #28]
   19b00:	str	r5, [lr, #8]
   19b04:	str	r5, [lr]
   19b08:	str	ip, [lr, #40]	; 0x28
   19b0c:	strb	r8, [lr, #44]	; 0x2c
   19b10:	mov	r1, #0
   19b14:	add	r0, lr, #48	; 0x30
   19b18:	mov	r4, lr
   19b1c:	bl	11b94 <pthread_mutex_init@plt>
   19b20:	ldr	r3, [sp, #100]	; 0x64
   19b24:	add	r2, r4, #72	; 0x48
   19b28:	cmp	r3, #1
   19b2c:	mov	lr, r4
   19b30:	mov	r1, r2
   19b34:	str	r2, [sp, #52]	; 0x34
   19b38:	bls	1a2b0 <__assert_fail@plt+0x82a8>
   19b3c:	lsr	r2, r3, #1
   19b40:	sub	r3, r3, r2
   19b44:	cmp	sl, #0
   19b48:	str	r1, [r4, #32]
   19b4c:	str	r2, [sp, #80]	; 0x50
   19b50:	str	r3, [sp, #100]	; 0x64
   19b54:	mov	r1, r4
   19b58:	beq	1a284 <__assert_fail@plt+0x827c>
   19b5c:	ldr	r3, [r4, #20]
   19b60:	add	r2, r5, r9
   19b64:	mov	ip, r2
   19b68:	str	r2, [sp, #40]	; 0x28
   19b6c:	lsr	r2, r3, #1
   19b70:	add	r0, lr, #8
   19b74:	sub	r3, r3, r2
   19b78:	sub	ip, ip, r2, lsl #4
   19b7c:	str	ip, [sp, #32]
   19b80:	ldr	lr, [sp, #52]	; 0x34
   19b84:	ldr	ip, [r1, #40]	; 0x28
   19b88:	ldr	r4, [sp, #32]
   19b8c:	ldr	r5, [sp, #40]	; 0x28
   19b90:	add	ip, ip, #1
   19b94:	str	r4, [lr, #12]
   19b98:	str	r4, [lr, #4]
   19b9c:	str	r0, [lr, #16]
   19ba0:	str	r2, [lr, #20]
   19ba4:	str	r3, [lr, #24]
   19ba8:	str	r1, [lr, #28]
   19bac:	str	r5, [lr, #8]
   19bb0:	str	r5, [lr]
   19bb4:	str	ip, [lr, #40]	; 0x28
   19bb8:	strb	r8, [lr, #44]	; 0x2c
   19bbc:	mov	r1, #0
   19bc0:	add	r0, lr, #48	; 0x30
   19bc4:	mov	r4, lr
   19bc8:	bl	11b94 <pthread_mutex_init@plt>
   19bcc:	ldr	r3, [sp, #80]	; 0x50
   19bd0:	add	r2, r4, #72	; 0x48
   19bd4:	cmp	r3, #1
   19bd8:	mov	lr, r4
   19bdc:	mov	r1, r2
   19be0:	str	r2, [sp, #56]	; 0x38
   19be4:	bls	1a1d8 <__assert_fail@plt+0x81d0>
   19be8:	lsr	r2, r3, #1
   19bec:	sub	r3, r3, r2
   19bf0:	cmp	sl, #0
   19bf4:	str	r1, [r4, #32]
   19bf8:	str	r2, [sp, #84]	; 0x54
   19bfc:	str	r3, [sp, #80]	; 0x50
   19c00:	mov	r1, r4
   19c04:	beq	1a1ac <__assert_fail@plt+0x81a4>
   19c08:	ldr	r3, [r4, #20]
   19c0c:	add	r2, r5, r9
   19c10:	mov	ip, r2
   19c14:	str	r2, [sp, #44]	; 0x2c
   19c18:	lsr	r2, r3, #1
   19c1c:	add	r0, lr, #8
   19c20:	sub	r3, r3, r2
   19c24:	sub	ip, ip, r2, lsl #4
   19c28:	str	ip, [sp, #40]	; 0x28
   19c2c:	ldr	lr, [sp, #56]	; 0x38
   19c30:	ldr	ip, [r1, #40]	; 0x28
   19c34:	ldr	r4, [sp, #40]	; 0x28
   19c38:	ldr	r5, [sp, #44]	; 0x2c
   19c3c:	add	ip, ip, #1
   19c40:	str	r4, [lr, #12]
   19c44:	str	r4, [lr, #4]
   19c48:	str	r0, [lr, #16]
   19c4c:	str	r2, [lr, #20]
   19c50:	str	r3, [lr, #24]
   19c54:	str	r1, [lr, #28]
   19c58:	str	r5, [lr, #8]
   19c5c:	str	r5, [lr]
   19c60:	str	ip, [lr, #40]	; 0x28
   19c64:	strb	r8, [lr, #44]	; 0x2c
   19c68:	mov	r1, #0
   19c6c:	add	r0, lr, #48	; 0x30
   19c70:	mov	r4, lr
   19c74:	bl	11b94 <pthread_mutex_init@plt>
   19c78:	ldr	r3, [sp, #84]	; 0x54
   19c7c:	add	r2, r4, #72	; 0x48
   19c80:	cmp	r3, #1
   19c84:	mov	lr, r4
   19c88:	mov	r1, r2
   19c8c:	str	r2, [sp, #60]	; 0x3c
   19c90:	bls	1a268 <__assert_fail@plt+0x8260>
   19c94:	lsr	r2, r3, #1
   19c98:	sub	r3, r3, r2
   19c9c:	cmp	sl, #0
   19ca0:	str	r1, [r4, #32]
   19ca4:	str	r2, [sp, #88]	; 0x58
   19ca8:	str	r3, [sp, #84]	; 0x54
   19cac:	mov	r1, r4
   19cb0:	beq	1a23c <__assert_fail@plt+0x8234>
   19cb4:	ldr	r3, [r4, #20]
   19cb8:	add	r2, r5, r9
   19cbc:	mov	ip, r2
   19cc0:	str	r2, [sp, #48]	; 0x30
   19cc4:	lsr	r2, r3, #1
   19cc8:	add	r0, lr, #8
   19ccc:	sub	r3, r3, r2
   19cd0:	sub	ip, ip, r2, lsl #4
   19cd4:	str	ip, [sp, #44]	; 0x2c
   19cd8:	ldr	lr, [sp, #60]	; 0x3c
   19cdc:	ldr	ip, [r1, #40]	; 0x28
   19ce0:	ldr	r4, [sp, #44]	; 0x2c
   19ce4:	ldr	r5, [sp, #48]	; 0x30
   19ce8:	add	ip, ip, #1
   19cec:	str	r4, [lr, #12]
   19cf0:	str	r4, [lr, #4]
   19cf4:	str	r0, [lr, #16]
   19cf8:	str	r2, [lr, #20]
   19cfc:	str	r3, [lr, #24]
   19d00:	str	r1, [lr, #28]
   19d04:	str	r5, [lr, #8]
   19d08:	str	r5, [lr]
   19d0c:	str	ip, [lr, #40]	; 0x28
   19d10:	strb	r8, [lr, #44]	; 0x2c
   19d14:	mov	r1, #0
   19d18:	add	r0, lr, #48	; 0x30
   19d1c:	mov	r4, lr
   19d20:	bl	11b94 <pthread_mutex_init@plt>
   19d24:	ldr	r3, [sp, #88]	; 0x58
   19d28:	add	r2, r4, #72	; 0x48
   19d2c:	cmp	r3, #1
   19d30:	mov	lr, r4
   19d34:	mov	r1, r2
   19d38:	str	r2, [sp, #64]	; 0x40
   19d3c:	bls	1a190 <__assert_fail@plt+0x8188>
   19d40:	lsr	r2, r3, #1
   19d44:	sub	r3, r3, r2
   19d48:	cmp	sl, #0
   19d4c:	str	r1, [r4, #32]
   19d50:	str	r2, [sp, #92]	; 0x5c
   19d54:	str	r3, [sp, #88]	; 0x58
   19d58:	mov	r1, r4
   19d5c:	beq	1a164 <__assert_fail@plt+0x815c>
   19d60:	ldr	r3, [r4, #20]
   19d64:	add	r2, r5, r9
   19d68:	mov	ip, r2
   19d6c:	str	r2, [sp, #36]	; 0x24
   19d70:	lsr	r2, r3, #1
   19d74:	add	r0, lr, #8
   19d78:	sub	r3, r3, r2
   19d7c:	sub	ip, ip, r2, lsl #4
   19d80:	str	ip, [sp, #48]	; 0x30
   19d84:	ldr	lr, [sp, #64]	; 0x40
   19d88:	ldr	ip, [r1, #40]	; 0x28
   19d8c:	ldr	r4, [sp, #48]	; 0x30
   19d90:	ldr	r5, [sp, #36]	; 0x24
   19d94:	add	ip, ip, #1
   19d98:	str	r4, [lr, #12]
   19d9c:	str	r4, [lr, #4]
   19da0:	str	r0, [lr, #16]
   19da4:	str	r2, [lr, #20]
   19da8:	str	r3, [lr, #24]
   19dac:	str	r1, [lr, #28]
   19db0:	str	r5, [lr, #8]
   19db4:	str	r5, [lr]
   19db8:	str	ip, [lr, #40]	; 0x28
   19dbc:	strb	r8, [lr, #44]	; 0x2c
   19dc0:	mov	r1, #0
   19dc4:	add	r0, lr, #48	; 0x30
   19dc8:	mov	r4, lr
   19dcc:	bl	11b94 <pthread_mutex_init@plt>
   19dd0:	ldr	r3, [sp, #92]	; 0x5c
   19dd4:	add	r2, r4, #72	; 0x48
   19dd8:	cmp	r3, #1
   19ddc:	mov	lr, r4
   19de0:	mov	r1, r2
   19de4:	str	r2, [sp, #68]	; 0x44
   19de8:	bls	1a220 <__assert_fail@plt+0x8218>
   19dec:	lsr	r2, r3, #1
   19df0:	sub	r3, r3, r2
   19df4:	cmp	sl, #0
   19df8:	str	r1, [r4, #32]
   19dfc:	str	r2, [sp, #96]	; 0x60
   19e00:	str	r3, [sp, #92]	; 0x5c
   19e04:	mov	r1, r4
   19e08:	beq	1a11c <__assert_fail@plt+0x8114>
   19e0c:	ldr	r3, [r4, #20]
   19e10:	add	r2, r5, r9
   19e14:	mov	ip, r2
   19e18:	str	r2, [sp, #24]
   19e1c:	lsr	r2, r3, #1
   19e20:	add	r0, lr, #8
   19e24:	sub	r3, r3, r2
   19e28:	sub	ip, ip, r2, lsl #4
   19e2c:	str	ip, [sp, #36]	; 0x24
   19e30:	ldr	lr, [sp, #68]	; 0x44
   19e34:	ldr	ip, [r1, #40]	; 0x28
   19e38:	ldr	r4, [sp, #36]	; 0x24
   19e3c:	ldr	r5, [sp, #24]
   19e40:	add	ip, ip, #1
   19e44:	str	r4, [lr, #12]
   19e48:	str	r4, [lr, #4]
   19e4c:	str	r0, [lr, #16]
   19e50:	str	r2, [lr, #20]
   19e54:	str	r3, [lr, #24]
   19e58:	str	r1, [lr, #28]
   19e5c:	str	r5, [lr, #8]
   19e60:	str	r5, [lr]
   19e64:	str	ip, [lr, #40]	; 0x28
   19e68:	strb	r8, [lr, #44]	; 0x2c
   19e6c:	mov	r1, #0
   19e70:	add	r0, lr, #48	; 0x30
   19e74:	mov	r4, lr
   19e78:	bl	11b94 <pthread_mutex_init@plt>
   19e7c:	ldr	r3, [sp, #96]	; 0x60
   19e80:	add	r2, r4, #72	; 0x48
   19e84:	cmp	r3, #1
   19e88:	mov	lr, r4
   19e8c:	mov	r1, r2
   19e90:	str	r2, [sp, #20]
   19e94:	bls	1a148 <__assert_fail@plt+0x8140>
   19e98:	lsr	r2, r3, #1
   19e9c:	sub	r3, r3, r2
   19ea0:	cmp	sl, #0
   19ea4:	str	r2, [sp, #28]
   19ea8:	str	r1, [r4, #32]
   19eac:	str	r3, [sp, #96]	; 0x60
   19eb0:	mov	r2, r4
   19eb4:	beq	1a0d4 <__assert_fail@plt+0x80cc>
   19eb8:	ldr	r3, [r4, #20]
   19ebc:	add	r1, r5, r9
   19ec0:	mov	ip, r1
   19ec4:	str	r1, [sp, #12]
   19ec8:	lsr	r1, r3, #1
   19ecc:	add	r0, lr, #8
   19ed0:	sub	r3, r3, r1
   19ed4:	sub	ip, ip, r1, lsl #4
   19ed8:	str	ip, [sp, #24]
   19edc:	ldr	lr, [sp, #20]
   19ee0:	ldr	ip, [r2, #40]	; 0x28
   19ee4:	ldr	r4, [sp, #24]
   19ee8:	ldr	r5, [sp, #12]
   19eec:	add	ip, ip, #1
   19ef0:	str	r4, [lr, #12]
   19ef4:	str	r4, [lr, #4]
   19ef8:	str	r0, [lr, #16]
   19efc:	str	r1, [lr, #20]
   19f00:	str	r3, [lr, #24]
   19f04:	str	r5, [lr, #8]
   19f08:	str	r5, [lr]
   19f0c:	str	r2, [lr, #28]
   19f10:	str	ip, [lr, #40]	; 0x28
   19f14:	strb	r8, [lr, #44]	; 0x2c
   19f18:	add	r0, lr, #48	; 0x30
   19f1c:	mov	r1, #0
   19f20:	mov	r4, lr
   19f24:	bl	11b94 <pthread_mutex_init@plt>
   19f28:	ldr	r3, [sp, #28]
   19f2c:	mov	lr, r4
   19f30:	cmp	r3, #1
   19f34:	add	r7, r4, #72	; 0x48
   19f38:	bls	1a100 <__assert_fail@plt+0x80f8>
   19f3c:	lsr	r2, r3, #1
   19f40:	sub	r3, r3, r2
   19f44:	cmp	sl, #0
   19f48:	str	r2, [sp, #16]
   19f4c:	str	r7, [r4, #32]
   19f50:	str	r3, [sp, #28]
   19f54:	mov	r2, r4
   19f58:	beq	1a0a8 <__assert_fail@plt+0x80a0>
   19f5c:	ldr	r3, [r4, #20]
   19f60:	add	r5, r5, r9
   19f64:	add	r0, lr, #8
   19f68:	lsr	r1, r3, #1
   19f6c:	sub	r3, r3, r1
   19f70:	sub	ip, r5, r1, lsl #4
   19f74:	mov	lr, ip
   19f78:	str	ip, [sp, #12]
   19f7c:	ldr	ip, [r2, #40]	; 0x28
   19f80:	str	r0, [r7, #16]
   19f84:	add	ip, ip, #1
   19f88:	str	r1, [r7, #20]
   19f8c:	str	r3, [r7, #24]
   19f90:	str	r5, [r7, #8]
   19f94:	str	r5, [r7]
   19f98:	str	lr, [r7, #12]
   19f9c:	str	lr, [r7, #4]
   19fa0:	str	r2, [r7, #28]
   19fa4:	str	ip, [r7, #40]	; 0x28
   19fa8:	strb	r8, [r7, #44]	; 0x2c
   19fac:	mov	r1, #0
   19fb0:	add	r0, r7, #48	; 0x30
   19fb4:	bl	11b94 <pthread_mutex_init@plt>
   19fb8:	ldr	r3, [sp, #16]
   19fbc:	add	r4, r7, #72	; 0x48
   19fc0:	cmp	r3, #1
   19fc4:	bls	1a0bc <__assert_fail@plt+0x80b4>
   19fc8:	lsr	r6, r3, #1
   19fcc:	sub	r3, r3, r6
   19fd0:	cmp	sl, #0
   19fd4:	str	r4, [r7, #32]
   19fd8:	str	r3, [sp, #16]
   19fdc:	mov	r1, r7
   19fe0:	beq	1a078 <__assert_fail@plt+0x8070>
   19fe4:	ldr	r3, [r7, #20]
   19fe8:	add	fp, r5, r9
   19fec:	add	lr, r7, #8
   19ff0:	lsr	ip, r3, #1
   19ff4:	sub	r3, r3, ip
   19ff8:	sub	r5, fp, ip, lsl #4
   19ffc:	ldr	r0, [r1, #40]	; 0x28
   1a000:	str	r1, [r4, #28]
   1a004:	add	r0, r0, #1
   1a008:	str	r0, [r4, #40]	; 0x28
   1a00c:	mov	r1, #0
   1a010:	str	fp, [r4, #8]
   1a014:	str	fp, [r4]
   1a018:	str	r5, [r4, #12]
   1a01c:	str	r5, [r4, #4]
   1a020:	str	lr, [r4, #16]
   1a024:	str	ip, [r4, #20]
   1a028:	str	r3, [r4, #24]
   1a02c:	strb	r8, [r4, #44]	; 0x2c
   1a030:	add	r0, r4, #48	; 0x30
   1a034:	bl	11b94 <pthread_mutex_init@plt>
   1a038:	cmp	r6, #1
   1a03c:	add	r1, r4, #72	; 0x48
   1a040:	bls	1a094 <__assert_fail@plt+0x808c>
   1a044:	ldr	r3, [sp, #144]	; 0x90
   1a048:	lsr	ip, r6, #1
   1a04c:	str	r1, [r4, #32]
   1a050:	mov	r0, r4
   1a054:	str	r3, [sp]
   1a058:	mov	r2, fp
   1a05c:	str	sl, [sp, #4]
   1a060:	mov	r3, ip
   1a064:	sub	r6, r6, ip
   1a068:	bl	19a7c <__assert_fail@plt+0x7a74>
   1a06c:	mov	r1, r4
   1a070:	str	r0, [r4, #36]	; 0x24
   1a074:	mov	r4, r0
   1a078:	ldr	r3, [r1, #24]
   1a07c:	add	fp, r5, r9
   1a080:	add	lr, r1, #12
   1a084:	lsr	ip, r3, #1
   1a088:	sub	r3, r3, ip
   1a08c:	sub	r5, fp, ip, lsl #4
   1a090:	b	19ffc <__assert_fail@plt+0x7ff4>
   1a094:	str	r8, [r4, #32]
   1a098:	str	r8, [r4, #36]	; 0x24
   1a09c:	mov	r2, r7
   1a0a0:	str	r1, [r7, #36]	; 0x24
   1a0a4:	mov	r7, r1
   1a0a8:	ldr	r1, [sp, #12]
   1a0ac:	ldr	r3, [r2, #24]
   1a0b0:	add	r5, r1, r9
   1a0b4:	add	r0, r2, #12
   1a0b8:	b	19f68 <__assert_fail@plt+0x7f60>
   1a0bc:	ldr	r3, [sp, #20]
   1a0c0:	str	r8, [r7, #32]
   1a0c4:	mov	r2, r3
   1a0c8:	str	r8, [r7, #36]	; 0x24
   1a0cc:	str	r4, [sp, #20]
   1a0d0:	str	r4, [r3, #36]	; 0x24
   1a0d4:	ldr	r3, [r2, #24]
   1a0d8:	ldr	r1, [sp, #24]
   1a0dc:	add	r0, r2, #12
   1a0e0:	add	r1, r1, r9
   1a0e4:	mov	ip, r1
   1a0e8:	str	r1, [sp, #12]
   1a0ec:	lsr	r1, r3, #1
   1a0f0:	sub	r3, r3, r1
   1a0f4:	sub	ip, ip, r1, lsl #4
   1a0f8:	str	ip, [sp, #24]
   1a0fc:	b	19edc <__assert_fail@plt+0x7ed4>
   1a100:	ldr	r3, [sp, #20]
   1a104:	str	r8, [r3, #36]	; 0x24
   1a108:	str	r8, [r3, #32]
   1a10c:	ldr	r3, [sp, #68]	; 0x44
   1a110:	str	r7, [sp, #68]	; 0x44
   1a114:	mov	r1, r3
   1a118:	str	r7, [r3, #36]	; 0x24
   1a11c:	ldr	r3, [r1, #24]
   1a120:	ldr	r2, [sp, #36]	; 0x24
   1a124:	add	r0, r1, #12
   1a128:	add	r2, r2, r9
   1a12c:	mov	ip, r2
   1a130:	str	r2, [sp, #24]
   1a134:	lsr	r2, r3, #1
   1a138:	sub	r3, r3, r2
   1a13c:	sub	ip, ip, r2, lsl #4
   1a140:	str	ip, [sp, #36]	; 0x24
   1a144:	b	19e30 <__assert_fail@plt+0x7e28>
   1a148:	ldr	r3, [sp, #68]	; 0x44
   1a14c:	str	r8, [r3, #36]	; 0x24
   1a150:	str	r8, [r3, #32]
   1a154:	ldr	r3, [sp, #64]	; 0x40
   1a158:	str	r2, [sp, #64]	; 0x40
   1a15c:	mov	r1, r3
   1a160:	str	r2, [r3, #36]	; 0x24
   1a164:	ldr	r3, [r1, #24]
   1a168:	ldr	r2, [sp, #48]	; 0x30
   1a16c:	add	r0, r1, #12
   1a170:	add	r2, r2, r9
   1a174:	mov	ip, r2
   1a178:	str	r2, [sp, #36]	; 0x24
   1a17c:	lsr	r2, r3, #1
   1a180:	sub	r3, r3, r2
   1a184:	sub	ip, ip, r2, lsl #4
   1a188:	str	ip, [sp, #48]	; 0x30
   1a18c:	b	19d84 <__assert_fail@plt+0x7d7c>
   1a190:	ldr	r3, [sp, #60]	; 0x3c
   1a194:	str	r8, [r3, #36]	; 0x24
   1a198:	str	r8, [r3, #32]
   1a19c:	ldr	r3, [sp, #56]	; 0x38
   1a1a0:	str	r2, [sp, #56]	; 0x38
   1a1a4:	mov	r1, r3
   1a1a8:	str	r2, [r3, #36]	; 0x24
   1a1ac:	ldr	r3, [r1, #24]
   1a1b0:	ldr	r2, [sp, #40]	; 0x28
   1a1b4:	add	r0, r1, #12
   1a1b8:	add	r2, r2, r9
   1a1bc:	mov	ip, r2
   1a1c0:	str	r2, [sp, #44]	; 0x2c
   1a1c4:	lsr	r2, r3, #1
   1a1c8:	sub	r3, r3, r2
   1a1cc:	sub	ip, ip, r2, lsl #4
   1a1d0:	str	ip, [sp, #40]	; 0x28
   1a1d4:	b	19c2c <__assert_fail@plt+0x7c24>
   1a1d8:	ldr	r3, [sp, #52]	; 0x34
   1a1dc:	str	r8, [r3, #36]	; 0x24
   1a1e0:	str	r8, [r3, #32]
   1a1e4:	ldr	r3, [sp, #72]	; 0x48
   1a1e8:	str	r2, [sp, #72]	; 0x48
   1a1ec:	mov	r0, r3
   1a1f0:	str	r2, [r3, #36]	; 0x24
   1a1f4:	ldr	r2, [sp, #76]	; 0x4c
   1a1f8:	ldr	r3, [r0, #24]
   1a1fc:	add	r2, r2, r9
   1a200:	mov	ip, r2
   1a204:	str	r2, [sp, #32]
   1a208:	lsr	r2, r3, #1
   1a20c:	add	r1, r0, #12
   1a210:	sub	ip, ip, r2, lsl #4
   1a214:	sub	r3, r3, r2
   1a218:	str	ip, [sp, #76]	; 0x4c
   1a21c:	b	19ad4 <__assert_fail@plt+0x7acc>
   1a220:	ldr	r3, [sp, #64]	; 0x40
   1a224:	str	r8, [r3, #36]	; 0x24
   1a228:	str	r8, [r3, #32]
   1a22c:	ldr	r3, [sp, #60]	; 0x3c
   1a230:	str	r2, [sp, #60]	; 0x3c
   1a234:	mov	r1, r3
   1a238:	str	r2, [r3, #36]	; 0x24
   1a23c:	ldr	r3, [r1, #24]
   1a240:	ldr	r2, [sp, #44]	; 0x2c
   1a244:	add	r0, r1, #12
   1a248:	add	r2, r2, r9
   1a24c:	mov	ip, r2
   1a250:	str	r2, [sp, #48]	; 0x30
   1a254:	lsr	r2, r3, #1
   1a258:	sub	r3, r3, r2
   1a25c:	sub	ip, ip, r2, lsl #4
   1a260:	str	ip, [sp, #44]	; 0x2c
   1a264:	b	19cd8 <__assert_fail@plt+0x7cd0>
   1a268:	ldr	r3, [sp, #56]	; 0x38
   1a26c:	str	r8, [r3, #36]	; 0x24
   1a270:	str	r8, [r3, #32]
   1a274:	ldr	r3, [sp, #52]	; 0x34
   1a278:	str	r2, [sp, #52]	; 0x34
   1a27c:	mov	r1, r3
   1a280:	str	r2, [r3, #36]	; 0x24
   1a284:	ldr	r3, [r1, #24]
   1a288:	ldr	r2, [sp, #32]
   1a28c:	add	r0, r1, #12
   1a290:	add	r2, r2, r9
   1a294:	mov	ip, r2
   1a298:	str	r2, [sp, #40]	; 0x28
   1a29c:	lsr	r2, r3, #1
   1a2a0:	sub	r3, r3, r2
   1a2a4:	sub	ip, ip, r2, lsl #4
   1a2a8:	str	ip, [sp, #32]
   1a2ac:	b	19b80 <__assert_fail@plt+0x7b78>
   1a2b0:	ldr	r3, [sp, #72]	; 0x48
   1a2b4:	mov	r0, r2
   1a2b8:	str	r8, [r3, #32]
   1a2bc:	str	r8, [r3, #36]	; 0x24
   1a2c0:	add	sp, sp, #108	; 0x6c
   1a2c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2cc:	mov	r9, r1
   1a2d0:	sub	sp, sp, #28
   1a2d4:	mov	sl, r0
   1a2d8:	mov	r0, r1
   1a2dc:	mov	r1, #4
   1a2e0:	mov	r4, r2
   1a2e4:	bl	262bc <__assert_fail@plt+0x142b4>
   1a2e8:	cmp	r9, #0
   1a2ec:	str	r0, [r4]
   1a2f0:	beq	1a570 <__assert_fail@plt+0x8568>
   1a2f4:	ldr	fp, [pc, #692]	; 1a5b0 <__assert_fail@plt+0x85a8>
   1a2f8:	mov	r5, r0
   1a2fc:	mov	r7, sl
   1a300:	mov	r4, #0
   1a304:	b	1a364 <__assert_fail@plt+0x835c>
   1a308:	ldr	r6, [sl, r4, lsl #3]
   1a30c:	mov	r1, fp
   1a310:	mov	r0, r6
   1a314:	bl	11ae0 <strcmp@plt>
   1a318:	cmp	r0, #0
   1a31c:	bne	1a4d0 <__assert_fail@plt+0x84c8>
   1a320:	ldr	r2, [pc, #652]	; 1a5b4 <__assert_fail@plt+0x85ac>
   1a324:	mov	r3, #1
   1a328:	strb	r3, [r2, #1304]	; 0x518
   1a32c:	ldr	r3, [pc, #644]	; 1a5b8 <__assert_fail@plt+0x85b0>
   1a330:	ldr	r6, [r3]
   1a334:	mov	r1, #2
   1a338:	mov	r0, r6
   1a33c:	bl	1d928 <__assert_fail@plt+0xb920>
   1a340:	cmp	r6, #0
   1a344:	str	r6, [r5]
   1a348:	beq	1a448 <__assert_fail@plt+0x8440>
   1a34c:	add	r4, r4, #1
   1a350:	cmp	r4, r9
   1a354:	add	r7, r7, #8
   1a358:	add	r5, r5, #4
   1a35c:	mov	r8, r4
   1a360:	beq	1a448 <__assert_fail@plt+0x8440>
   1a364:	ldr	r6, [r7, #4]
   1a368:	mov	r8, r4
   1a36c:	cmp	r6, #0
   1a370:	beq	1a308 <__assert_fail@plt+0x8300>
   1a374:	ldrb	r3, [r6, #8]
   1a378:	cmp	r3, #0
   1a37c:	beq	1a308 <__assert_fail@plt+0x8300>
   1a380:	cmp	r3, #1
   1a384:	beq	1a520 <__assert_fail@plt+0x8518>
   1a388:	mov	r1, #0
   1a38c:	add	r0, r6, #9
   1a390:	bl	11d5c <open64@plt>
   1a394:	subs	r3, r0, #0
   1a398:	str	r3, [sp, #8]
   1a39c:	blt	1a460 <__assert_fail@plt+0x8458>
   1a3a0:	mov	r1, #9
   1a3a4:	add	r0, sp, #16
   1a3a8:	bl	16fe8 <__assert_fail@plt+0x4fe0>
   1a3ac:	cmn	r0, #1
   1a3b0:	beq	1a420 <__assert_fail@plt+0x8418>
   1a3b4:	cmp	r0, #0
   1a3b8:	bne	1a474 <__assert_fail@plt+0x846c>
   1a3bc:	str	r0, [sp, #12]
   1a3c0:	ldr	r0, [sp, #16]
   1a3c4:	bl	11ff0 <close@plt>
   1a3c8:	ldr	r3, [sp, #8]
   1a3cc:	ldr	r1, [sp, #12]
   1a3d0:	cmp	r3, #0
   1a3d4:	bne	1a52c <__assert_fail@plt+0x8524>
   1a3d8:	ldr	r4, [sp, #20]
   1a3dc:	cmp	r4, #1
   1a3e0:	beq	1a3f8 <__assert_fail@plt+0x83f0>
   1a3e4:	mov	r1, #1
   1a3e8:	mov	r0, r4
   1a3ec:	bl	11c3c <dup2@plt>
   1a3f0:	mov	r0, r4
   1a3f4:	bl	11ff0 <close@plt>
   1a3f8:	ldr	r1, [pc, #436]	; 1a5b4 <__assert_fail@plt+0x85ac>
   1a3fc:	mov	r3, #0
   1a400:	ldr	r2, [pc, #436]	; 1a5bc <__assert_fail@plt+0x85b4>
   1a404:	ldr	r1, [r1, #1152]	; 0x480
   1a408:	mov	r0, r1
   1a40c:	bl	11b88 <execlp@plt>
   1a410:	bl	11e34 <__errno_location@plt>
   1a414:	ldr	r1, [pc, #420]	; 1a5c0 <__assert_fail@plt+0x85b8>
   1a418:	ldr	r0, [r0]
   1a41c:	bl	15ccc <__assert_fail@plt+0x3cc4>
   1a420:	bl	11e34 <__errno_location@plt>
   1a424:	ldr	r4, [r0]
   1a428:	mov	r6, r0
   1a42c:	cmp	r4, #24
   1a430:	bne	1a578 <__assert_fail@plt+0x8570>
   1a434:	ldr	r0, [sp, #8]
   1a438:	bl	11ff0 <close@plt>
   1a43c:	mov	r3, #0
   1a440:	str	r4, [r6]
   1a444:	str	r3, [r5]
   1a448:	mov	r0, r8
   1a44c:	add	sp, sp, #28
   1a450:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a454:	mov	r1, #2
   1a458:	mov	r0, #0
   1a45c:	bl	1d928 <__assert_fail@plt+0xb920>
   1a460:	mov	r3, #0
   1a464:	mov	r0, r8
   1a468:	str	r3, [r5]
   1a46c:	add	sp, sp, #28
   1a470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a474:	ldr	r3, [pc, #312]	; 1a5b4 <__assert_fail@plt+0x85ac>
   1a478:	str	r0, [r6, #4]
   1a47c:	ldr	r1, [r3, #1156]	; 0x484
   1a480:	cmp	r1, #0
   1a484:	beq	1a544 <__assert_fail@plt+0x853c>
   1a488:	mov	r3, #1
   1a48c:	mov	r0, r1
   1a490:	strb	r3, [r6, #8]
   1a494:	mov	r1, r6
   1a498:	bl	1f2f0 <__assert_fail@plt+0xd2e8>
   1a49c:	cmp	r0, #0
   1a4a0:	beq	1a56c <__assert_fail@plt+0x8564>
   1a4a4:	ldr	r0, [sp, #8]
   1a4a8:	bl	11ff0 <close@plt>
   1a4ac:	ldr	r0, [sp, #20]
   1a4b0:	bl	11ff0 <close@plt>
   1a4b4:	ldr	r1, [pc, #264]	; 1a5c4 <__assert_fail@plt+0x85bc>
   1a4b8:	ldr	r0, [sp, #16]
   1a4bc:	bl	11ab0 <fdopen@plt>
   1a4c0:	cmp	r0, #0
   1a4c4:	beq	1a4f4 <__assert_fail@plt+0x84ec>
   1a4c8:	str	r0, [r5]
   1a4cc:	b	1a34c <__assert_fail@plt+0x8344>
   1a4d0:	mov	r0, r6
   1a4d4:	mov	r1, #524288	; 0x80000
   1a4d8:	bl	11d5c <open64@plt>
   1a4dc:	cmp	r0, #0
   1a4e0:	blt	1a454 <__assert_fail@plt+0x844c>
   1a4e4:	ldr	r1, [pc, #216]	; 1a5c4 <__assert_fail@plt+0x85bc>
   1a4e8:	bl	11ab0 <fdopen@plt>
   1a4ec:	mov	r6, r0
   1a4f0:	b	1a334 <__assert_fail@plt+0x832c>
   1a4f4:	mov	r6, r0
   1a4f8:	bl	11e34 <__errno_location@plt>
   1a4fc:	mov	r4, r0
   1a500:	ldr	r0, [sp, #16]
   1a504:	ldr	r7, [r4]
   1a508:	bl	11ff0 <close@plt>
   1a50c:	mov	r0, r8
   1a510:	str	r7, [r4]
   1a514:	str	r6, [r5]
   1a518:	add	sp, sp, #28
   1a51c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a520:	ldr	r0, [r6, #4]
   1a524:	bl	16d8c <__assert_fail@plt+0x4d84>
   1a528:	b	1a388 <__assert_fail@plt+0x8380>
   1a52c:	mov	r4, r3
   1a530:	mov	r0, r3
   1a534:	bl	11c3c <dup2@plt>
   1a538:	mov	r0, r4
   1a53c:	bl	11ff0 <close@plt>
   1a540:	b	1a3d8 <__assert_fail@plt+0x83d0>
   1a544:	str	r1, [sp]
   1a548:	ldr	r3, [pc, #120]	; 1a5c8 <__assert_fail@plt+0x85c0>
   1a54c:	ldr	r2, [pc, #120]	; 1a5cc <__assert_fail@plt+0x85c4>
   1a550:	mov	r0, #47	; 0x2f
   1a554:	bl	1e988 <__assert_fail@plt+0xc980>
   1a558:	ldr	r3, [pc, #84]	; 1a5b4 <__assert_fail@plt+0x85ac>
   1a55c:	cmp	r0, #0
   1a560:	mov	r1, r0
   1a564:	str	r0, [r3, #1156]	; 0x484
   1a568:	bne	1a488 <__assert_fail@plt+0x8480>
   1a56c:	bl	26820 <__assert_fail@plt+0x14818>
   1a570:	mov	r8, r9
   1a574:	b	1a448 <__assert_fail@plt+0x8440>
   1a578:	mov	r2, #5
   1a57c:	ldr	r1, [pc, #76]	; 1a5d0 <__assert_fail@plt+0x85c8>
   1a580:	mov	r0, #0
   1a584:	bl	11c0c <dcgettext@plt>
   1a588:	ldr	r3, [pc, #36]	; 1a5b4 <__assert_fail@plt+0x85ac>
   1a58c:	ldr	r1, [r3, #1152]	; 0x480
   1a590:	mov	r5, r0
   1a594:	mov	r0, #4
   1a598:	bl	22b84 <__assert_fail@plt+0x10b7c>
   1a59c:	mov	r2, r5
   1a5a0:	mov	r1, r4
   1a5a4:	mov	r3, r0
   1a5a8:	mov	r0, #2
   1a5ac:	bl	11d50 <error@plt>
   1a5b0:	andeq	r9, r2, r0, ror r4
   1a5b4:	andeq	ip, r3, r8, ror #5
   1a5b8:	ldrdeq	ip, [r3], -r8
   1a5bc:	andeq	r9, r2, ip, lsr r5
   1a5c0:	andeq	r9, r2, r0, asr #10
   1a5c4:	andeq	r9, r2, ip, ror #10
   1a5c8:	andeq	r5, r1, r4, ror r4
   1a5cc:	andeq	r5, r1, r0, ror #8
   1a5d0:	andeq	r9, r2, r8, lsl r5
   1a5d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a5d8:	mov	r9, r0
   1a5dc:	ldr	r4, [pc, #604]	; 1a840 <__assert_fail@plt+0x8838>
   1a5e0:	sub	sp, sp, #144	; 0x90
   1a5e4:	ldr	r3, [r4, #780]	; 0x30c
   1a5e8:	ldr	r2, [r4, #1484]	; 0x5cc
   1a5ec:	ldr	r8, [r3, r2, lsl #2]
   1a5f0:	mov	r0, r8
   1a5f4:	bl	11e10 <strlen@plt>
   1a5f8:	mov	r7, r0
   1a5fc:	add	r0, r0, #24
   1a600:	bic	r0, r0, #3
   1a604:	bl	261d8 <__assert_fail@plt+0x141d0>
   1a608:	mov	r2, r7
   1a60c:	mov	r1, r8
   1a610:	add	r6, r0, #9
   1a614:	mov	r5, r0
   1a618:	mov	r0, r6
   1a61c:	bl	11b7c <memcpy@plt>
   1a620:	ldr	r3, [pc, #540]	; 1a844 <__assert_fail@plt+0x883c>
   1a624:	ldr	ip, [r4, #1484]	; 0x5cc
   1a628:	ldm	r3!, {r0, r1, r2}
   1a62c:	add	r3, ip, #1
   1a630:	ldr	ip, [r4, #772]	; 0x304
   1a634:	str	r3, [r4, #1484]	; 0x5cc
   1a638:	cmp	r3, ip
   1a63c:	add	r3, r6, r7
   1a640:	str	r0, [r6, r7]
   1a644:	mov	r0, #0
   1a648:	str	r1, [r3, #4]
   1a64c:	str	r2, [r3, #8]
   1a650:	streq	r0, [r4, #1484]	; 0x5cc
   1a654:	str	r0, [r5]
   1a658:	add	r2, sp, #16
   1a65c:	ldr	r1, [pc, #484]	; 1a848 <__assert_fail@plt+0x8840>
   1a660:	mov	r0, #0
   1a664:	bl	11d20 <pthread_sigmask@plt>
   1a668:	mov	r1, #524288	; 0x80000
   1a66c:	clz	r3, r0
   1a670:	mov	r0, r6
   1a674:	lsr	r3, r3, #5
   1a678:	strb	r3, [sp, #12]
   1a67c:	bl	251ac <__assert_fail@plt+0x131a4>
   1a680:	subs	r7, r0, #0
   1a684:	blt	1a780 <__assert_fail@plt+0x8778>
   1a688:	ldr	r3, [pc, #444]	; 1a84c <__assert_fail@plt+0x8844>
   1a68c:	ldr	r2, [r3, #108]	; 0x6c
   1a690:	str	r5, [r3, #108]	; 0x6c
   1a694:	str	r5, [r2]
   1a698:	bl	11e34 <__errno_location@plt>
   1a69c:	ldrb	r3, [sp, #12]
   1a6a0:	cmp	r3, #0
   1a6a4:	mov	r8, r0
   1a6a8:	ldr	sl, [r0]
   1a6ac:	bne	1a7e0 <__assert_fail@plt+0x87d8>
   1a6b0:	ldr	r2, [r4, #1152]	; 0x480
   1a6b4:	mov	r3, #0
   1a6b8:	cmp	r2, r3
   1a6bc:	strb	r3, [r5, #8]
   1a6c0:	beq	1a714 <__assert_fail@plt+0x870c>
   1a6c4:	mov	r1, #4
   1a6c8:	add	r0, sp, #12
   1a6cc:	bl	16fe8 <__assert_fail@plt+0x4fe0>
   1a6d0:	cmp	r0, #0
   1a6d4:	str	r0, [r5, #4]
   1a6d8:	ble	1a738 <__assert_fail@plt+0x8730>
   1a6dc:	mov	r0, r7
   1a6e0:	bl	11ff0 <close@plt>
   1a6e4:	ldr	r0, [sp, #12]
   1a6e8:	bl	11ff0 <close@plt>
   1a6ec:	ldr	r0, [r4, #1156]	; 0x484
   1a6f0:	ldr	r7, [sp, #16]
   1a6f4:	cmp	r0, #0
   1a6f8:	beq	1a7f8 <__assert_fail@plt+0x87f0>
   1a6fc:	mov	r3, #1
   1a700:	mov	r1, r5
   1a704:	strb	r3, [r5, #8]
   1a708:	bl	1f2f0 <__assert_fail@plt+0xd2e8>
   1a70c:	cmp	r0, #0
   1a710:	beq	1a81c <__assert_fail@plt+0x8814>
   1a714:	mov	r0, r7
   1a718:	ldr	r1, [pc, #304]	; 1a850 <__assert_fail@plt+0x8848>
   1a71c:	bl	11ab0 <fdopen@plt>
   1a720:	cmp	r0, #0
   1a724:	str	r0, [r9]
   1a728:	beq	1a820 <__assert_fail@plt+0x8818>
   1a72c:	mov	r0, r5
   1a730:	add	sp, sp, #144	; 0x90
   1a734:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a738:	bne	1a714 <__assert_fail@plt+0x870c>
   1a73c:	ldr	r0, [sp, #16]
   1a740:	bl	11ff0 <close@plt>
   1a744:	cmp	r7, #1
   1a748:	beq	1a758 <__assert_fail@plt+0x8750>
   1a74c:	mov	r0, r7
   1a750:	mov	r1, #1
   1a754:	bl	16538 <__assert_fail@plt+0x4530>
   1a758:	ldr	r0, [sp, #12]
   1a75c:	cmp	r0, #0
   1a760:	bne	1a834 <__assert_fail@plt+0x882c>
   1a764:	ldr	r1, [r4, #1152]	; 0x480
   1a768:	mov	r2, #0
   1a76c:	mov	r0, r1
   1a770:	bl	11b88 <execlp@plt>
   1a774:	ldr	r0, [r8]
   1a778:	ldr	r1, [pc, #212]	; 1a854 <__assert_fail@plt+0x884c>
   1a77c:	bl	15ccc <__assert_fail@plt+0x3cc4>
   1a780:	bl	11e34 <__errno_location@plt>
   1a784:	ldrb	r3, [sp, #12]
   1a788:	cmp	r3, #0
   1a78c:	mov	r5, r0
   1a790:	ldr	r4, [r0]
   1a794:	beq	1a7ac <__assert_fail@plt+0x87a4>
   1a798:	add	r1, sp, #16
   1a79c:	mov	r2, #0
   1a7a0:	mov	r0, #2
   1a7a4:	bl	11d20 <pthread_sigmask@plt>
   1a7a8:	str	r4, [r5]
   1a7ac:	mov	r2, #5
   1a7b0:	ldr	r1, [pc, #160]	; 1a858 <__assert_fail@plt+0x8850>
   1a7b4:	mov	r0, #0
   1a7b8:	bl	11c0c <dcgettext@plt>
   1a7bc:	mov	r1, r8
   1a7c0:	mov	r5, r0
   1a7c4:	mov	r0, #4
   1a7c8:	bl	22b84 <__assert_fail@plt+0x10b7c>
   1a7cc:	mov	r2, r5
   1a7d0:	mov	r1, r4
   1a7d4:	mov	r3, r0
   1a7d8:	mov	r0, #2
   1a7dc:	bl	11d50 <error@plt>
   1a7e0:	add	r1, sp, #16
   1a7e4:	mov	r2, #0
   1a7e8:	mov	r0, #2
   1a7ec:	bl	11d20 <pthread_sigmask@plt>
   1a7f0:	str	sl, [r8]
   1a7f4:	b	1a6b0 <__assert_fail@plt+0x86a8>
   1a7f8:	str	r0, [sp]
   1a7fc:	mov	r1, r0
   1a800:	ldr	r3, [pc, #84]	; 1a85c <__assert_fail@plt+0x8854>
   1a804:	ldr	r2, [pc, #84]	; 1a860 <__assert_fail@plt+0x8858>
   1a808:	mov	r0, #47	; 0x2f
   1a80c:	bl	1e988 <__assert_fail@plt+0xc980>
   1a810:	cmp	r0, #0
   1a814:	str	r0, [r4, #1156]	; 0x484
   1a818:	bne	1a6fc <__assert_fail@plt+0x86f4>
   1a81c:	bl	26820 <__assert_fail@plt+0x14818>
   1a820:	ldr	r1, [pc, #60]	; 1a864 <__assert_fail@plt+0x885c>
   1a824:	mov	r2, #5
   1a828:	bl	11c0c <dcgettext@plt>
   1a82c:	mov	r1, r6
   1a830:	bl	15c10 <__assert_fail@plt+0x3c08>
   1a834:	mov	r1, #0
   1a838:	bl	16538 <__assert_fail@plt+0x4530>
   1a83c:	b	1a764 <__assert_fail@plt+0x875c>
   1a840:	andeq	ip, r3, r8, ror #5
   1a844:	ldrdeq	r9, [r2], -ip
   1a848:	andeq	ip, r3, r0, lsl #15
   1a84c:	andeq	ip, r3, r8, ror #3
   1a850:			; <UNDEFINED> instruction: 0x000295b8
   1a854:	muleq	r2, r4, r5
   1a858:	andeq	r9, r2, r0, ror r5
   1a85c:	andeq	r5, r1, r4, ror r4
   1a860:	andeq	r5, r1, r0, ror #8
   1a864:			; <UNDEFINED> instruction: 0x000295bc
   1a868:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a86c:	sub	sp, sp, #76	; 0x4c
   1a870:	mov	r8, r2
   1a874:	str	r0, [sp, #12]
   1a878:	str	r1, [sp, #44]	; 0x2c
   1a87c:	mov	r0, r2
   1a880:	mov	r1, #28
   1a884:	str	r3, [sp, #40]	; 0x28
   1a888:	bl	262bc <__assert_fail@plt+0x142b4>
   1a88c:	mov	r1, #4
   1a890:	ldr	r9, [pc, #2588]	; 1b2b4 <__assert_fail@plt+0x92ac>
   1a894:	mov	r7, #0
   1a898:	str	r0, [sp, #16]
   1a89c:	mov	r0, r8
   1a8a0:	bl	262bc <__assert_fail@plt+0x142b4>
   1a8a4:	mov	r1, #4
   1a8a8:	str	r0, [sp]
   1a8ac:	mov	r0, r8
   1a8b0:	bl	262bc <__assert_fail@plt+0x142b4>
   1a8b4:	mov	r1, #4
   1a8b8:	str	r0, [sp, #24]
   1a8bc:	mov	r0, r8
   1a8c0:	bl	262bc <__assert_fail@plt+0x142b4>
   1a8c4:	ldr	r3, [r9, #1040]	; 0x410
   1a8c8:	cmp	r8, #0
   1a8cc:	str	r3, [sp, #52]	; 0x34
   1a8d0:	str	r7, [sp, #56]	; 0x38
   1a8d4:	mov	fp, r0
   1a8d8:	beq	1aac0 <__assert_fail@plt+0x8ab8>
   1a8dc:	mov	sl, r7
   1a8e0:	str	r7, [sp, #4]
   1a8e4:	str	r0, [sp, #28]
   1a8e8:	mov	r1, r8
   1a8ec:	ldr	r0, [r9, #1488]	; 0x5d0
   1a8f0:	bl	28518 <_obstack_memory_used@@Base+0x8c>
   1a8f4:	ldr	r3, [pc, #2492]	; 1b2b8 <__assert_fail@plt+0x92b0>
   1a8f8:	ldr	r5, [r3, #8]
   1a8fc:	ldr	r3, [sp, #4]
   1a900:	sub	fp, r3, r7
   1a904:	ldr	r3, [sp, #16]
   1a908:	add	r4, r3, fp, lsl #2
   1a90c:	cmp	r0, r5
   1a910:	movcs	r5, r0
   1a914:	b	1a924 <__assert_fail@plt+0x891c>
   1a918:	lsr	r5, r5, #1
   1a91c:	cmp	r5, #17
   1a920:	bls	1b288 <__assert_fail@plt+0x9280>
   1a924:	bic	r5, r5, #15
   1a928:	add	r5, r5, #16
   1a92c:	mov	r0, r5
   1a930:	bl	2799c <__assert_fail@plt+0x15994>
   1a934:	cmp	r0, #0
   1a938:	str	r0, [r4]
   1a93c:	beq	1a918 <__assert_fail@plt+0x8910>
   1a940:	ldr	r3, [sp, #12]
   1a944:	ldr	r2, [sp, #4]
   1a948:	ldr	r1, [sp, #116]	; 0x74
   1a94c:	mov	ip, #16
   1a950:	ldr	r2, [r3, r2]
   1a954:	ldr	r1, [r1, r7, lsl #2]
   1a958:	str	r5, [r4, #12]
   1a95c:	mov	r0, r4
   1a960:	str	ip, [r4, #20]
   1a964:	str	sl, [r4, #8]
   1a968:	str	sl, [r4, #16]
   1a96c:	str	sl, [r4, #4]
   1a970:	strb	sl, [r4, #24]
   1a974:	bl	1607c <__assert_fail@plt+0x4074>
   1a978:	ldr	r3, [sp, #12]
   1a97c:	ldr	r2, [sp, #4]
   1a980:	ldr	r1, [sp, #116]	; 0x74
   1a984:	add	r5, r3, r2
   1a988:	add	r6, r1, r7, lsl #2
   1a98c:	subs	r3, r0, #0
   1a990:	beq	1a9d8 <__assert_fail@plt+0x89d0>
   1a994:	ldr	r3, [sp, #16]
   1a998:	ldr	r2, [r4, #12]
   1a99c:	ldr	r1, [r4, #8]
   1a9a0:	ldr	r3, [r3, fp, lsl #2]
   1a9a4:	add	r3, r3, r2
   1a9a8:	sub	r2, r3, #16
   1a9ac:	sub	r3, r3, r1, lsl #4
   1a9b0:	ldr	r1, [sp, #24]
   1a9b4:	str	r3, [r1, r7, lsl #2]
   1a9b8:	ldr	r3, [sp]
   1a9bc:	str	r2, [r3, r7, lsl #2]
   1a9c0:	add	r7, r7, #1
   1a9c4:	cmp	r7, r8
   1a9c8:	bcs	1ab58 <__assert_fail@plt+0x8b50>
   1a9cc:	lsl	r3, r7, #3
   1a9d0:	str	r3, [sp, #4]
   1a9d4:	b	1a8e8 <__assert_fail@plt+0x88e0>
   1a9d8:	str	r3, [sp, #8]
   1a9dc:	ldr	r3, [sp, #116]	; 0x74
   1a9e0:	ldr	r4, [r3, r7, lsl #2]
   1a9e4:	ldr	r3, [sp, #12]
   1a9e8:	mov	r0, r4
   1a9ec:	ldr	r3, [r3, r2]
   1a9f0:	str	r3, [sp, #20]
   1a9f4:	bl	11e88 <fileno@plt>
   1a9f8:	cmp	r0, #0
   1a9fc:	beq	1ab30 <__assert_fail@plt+0x8b28>
   1aa00:	cmp	r0, #1
   1aa04:	ldr	r3, [sp, #8]
   1aa08:	bne	1ab18 <__assert_fail@plt+0x8b10>
   1aa0c:	mov	r0, r4
   1aa10:	str	r3, [sp, #8]
   1aa14:	bl	11c90 <fflush_unlocked@plt>
   1aa18:	ldr	r3, [sp, #8]
   1aa1c:	cmp	r0, #0
   1aa20:	bne	1b294 <__assert_fail@plt+0x928c>
   1aa24:	ldr	r3, [sp, #44]	; 0x2c
   1aa28:	cmp	r3, r7
   1aa2c:	bhi	1ab44 <__assert_fail@plt+0x8b3c>
   1aa30:	ldr	r3, [sp, #16]
   1aa34:	ldr	r0, [r3, fp, lsl #2]
   1aa38:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   1aa3c:	sub	r2, r8, #1
   1aa40:	cmp	r2, r7
   1aa44:	bls	1b250 <__assert_fail@plt+0x9248>
   1aa48:	sub	ip, r8, #-1073741823	; 0xc0000001
   1aa4c:	ldr	r3, [sp, #116]	; 0x74
   1aa50:	add	ip, r3, ip, lsl #2
   1aa54:	add	r3, r5, #8
   1aa58:	ldr	lr, [r6, #4]
   1aa5c:	ldm	r3, {r0, r1}
   1aa60:	stm	r5, {r0, r1}
   1aa64:	str	lr, [r6], #4
   1aa68:	cmp	r6, ip
   1aa6c:	mov	r5, r3
   1aa70:	bne	1aa54 <__assert_fail@plt+0x8a4c>
   1aa74:	mov	r8, r2
   1aa78:	b	1a8e8 <__assert_fail@plt+0x88e0>
   1aa7c:	cmp	r3, #0
   1aa80:	ldr	r3, [sp, #8]
   1aa84:	str	r3, [fp]
   1aa88:	bne	1ac68 <__assert_fail@plt+0x8c60>
   1aa8c:	ldrb	r3, [r9, #1173]	; 0x495
   1aa90:	ldr	r2, [sp, #32]
   1aa94:	cmp	r2, #0
   1aa98:	moveq	r3, #0
   1aa9c:	andne	r3, r3, #1
   1aaa0:	cmp	r3, #0
   1aaa4:	beq	1aac0 <__assert_fail@plt+0x8ab8>
   1aaa8:	add	r0, sp, #56	; 0x38
   1aaac:	ldr	r2, [sp, #112]	; 0x70
   1aab0:	ldr	r1, [sp, #40]	; 0x28
   1aab4:	bl	16718 <__assert_fail@plt+0x4710>
   1aab8:	ldr	r0, [sp, #56]	; 0x38
   1aabc:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   1aac0:	ldr	r0, [sp, #40]	; 0x28
   1aac4:	bl	11e88 <fileno@plt>
   1aac8:	cmp	r0, #0
   1aacc:	beq	1b244 <__assert_fail@plt+0x923c>
   1aad0:	cmp	r0, #1
   1aad4:	beq	1b1c4 <__assert_fail@plt+0x91bc>
   1aad8:	ldr	r0, [sp, #40]	; 0x28
   1aadc:	bl	1d95c <__assert_fail@plt+0xb954>
   1aae0:	cmp	r0, #0
   1aae4:	bne	1b28c <__assert_fail@plt+0x9284>
   1aae8:	ldr	r0, [sp, #116]	; 0x74
   1aaec:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   1aaf0:	ldr	r0, [sp, #16]
   1aaf4:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   1aaf8:	mov	r0, fp
   1aafc:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   1ab00:	ldr	r0, [sp, #24]
   1ab04:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   1ab08:	ldr	r0, [sp]
   1ab0c:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   1ab10:	add	sp, sp, #76	; 0x4c
   1ab14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab18:	mov	r0, r4
   1ab1c:	bl	1d95c <__assert_fail@plt+0xb954>
   1ab20:	cmp	r0, #0
   1ab24:	beq	1aa24 <__assert_fail@plt+0x8a1c>
   1ab28:	ldr	r0, [sp, #20]
   1ab2c:	bl	12018 <__assert_fail@plt+0x10>
   1ab30:	mov	r0, r4
   1ab34:	bl	11f48 <clearerr_unlocked@plt>
   1ab38:	ldr	r3, [sp, #44]	; 0x2c
   1ab3c:	cmp	r3, r7
   1ab40:	bls	1aa30 <__assert_fail@plt+0x8a28>
   1ab44:	sub	r3, r3, #1
   1ab48:	ldr	r0, [r5]
   1ab4c:	str	r3, [sp, #44]	; 0x2c
   1ab50:	bl	16eb4 <__assert_fail@plt+0x4eac>
   1ab54:	b	1aa30 <__assert_fail@plt+0x8a28>
   1ab58:	ldr	fp, [sp, #28]
   1ab5c:	cmp	r8, #0
   1ab60:	beq	1aac0 <__assert_fail@plt+0x8ab8>
   1ab64:	sub	r3, fp, #4
   1ab68:	mov	r2, #0
   1ab6c:	str	r2, [r3, #4]!
   1ab70:	add	r2, r2, #1
   1ab74:	cmp	r2, r8
   1ab78:	bne	1ab6c <__assert_fail@plt+0x8b64>
   1ab7c:	cmp	r2, #1
   1ab80:	str	r2, [sp, #20]
   1ab84:	beq	1ac50 <__assert_fail@plt+0x8c48>
   1ab88:	mov	r6, #1
   1ab8c:	sub	r5, r6, #-1073741823	; 0xc0000001
   1ab90:	ldr	r1, [r9, #1040]	; 0x410
   1ab94:	lsl	r4, r5, #2
   1ab98:	add	r4, r4, #4
   1ab9c:	ldr	r2, [fp, r5, lsl #2]
   1aba0:	ldr	r3, [fp, r4]
   1aba4:	cmp	r1, #0
   1aba8:	ldr	r1, [sp]
   1abac:	ldr	r7, [r1, r2, lsl #2]
   1abb0:	ldr	r8, [r1, r3, lsl #2]
   1abb4:	beq	1abe4 <__assert_fail@plt+0x8bdc>
   1abb8:	mov	r1, r8
   1abbc:	mov	r0, r7
   1abc0:	bl	17478 <__assert_fail@plt+0x5470>
   1abc4:	cmp	r0, #0
   1abc8:	bne	1ac0c <__assert_fail@plt+0x8c04>
   1abcc:	ldrb	r3, [r9, #1173]	; 0x495
   1abd0:	cmp	r3, #0
   1abd4:	bne	1ac40 <__assert_fail@plt+0x8c38>
   1abd8:	ldrb	r3, [r9, #1174]	; 0x496
   1abdc:	cmp	r3, #0
   1abe0:	bne	1ac40 <__assert_fail@plt+0x8c38>
   1abe4:	ldr	r1, [r7, #4]
   1abe8:	ldr	r2, [r8, #4]
   1abec:	subs	r3, r1, #1
   1abf0:	sub	sl, r2, #1
   1abf4:	bne	1ac2c <__assert_fail@plt+0x8c24>
   1abf8:	ldrb	r3, [r9, #1464]	; 0x5b8
   1abfc:	cmp	r3, #0
   1ac00:	beq	1ac40 <__assert_fail@plt+0x8c38>
   1ac04:	adds	r0, sl, #0
   1ac08:	movne	r0, #1
   1ac0c:	cmp	r0, #0
   1ac10:	ble	1ac40 <__assert_fail@plt+0x8c38>
   1ac14:	ldr	r3, [fp, r5, lsl #2]
   1ac18:	ldr	r2, [fp, r4]
   1ac1c:	mov	r6, #1
   1ac20:	str	r2, [fp, r5, lsl #2]
   1ac24:	str	r3, [fp, r4]
   1ac28:	b	1ab8c <__assert_fail@plt+0x8b84>
   1ac2c:	cmp	sl, #0
   1ac30:	bne	1b148 <__assert_fail@plt+0x9140>
   1ac34:	ldrb	r3, [r9, #1464]	; 0x5b8
   1ac38:	cmp	r3, #0
   1ac3c:	beq	1ac14 <__assert_fail@plt+0x8c0c>
   1ac40:	ldr	r3, [sp, #20]
   1ac44:	add	r6, r6, #1
   1ac48:	cmp	r3, r6
   1ac4c:	bhi	1ab8c <__assert_fail@plt+0x8b84>
   1ac50:	mov	r3, #0
   1ac54:	str	r3, [sp, #48]	; 0x30
   1ac58:	str	r3, [sp, #32]
   1ac5c:	add	r3, fp, #4
   1ac60:	str	r3, [sp, #36]	; 0x24
   1ac64:	ldr	r3, [fp]
   1ac68:	ldrb	r2, [r9, #1173]	; 0x495
   1ac6c:	cmp	r2, #0
   1ac70:	ldr	r2, [sp]
   1ac74:	ldr	r4, [r2, r3, lsl #2]
   1ac78:	beq	1b0c0 <__assert_fail@plt+0x90b8>
   1ac7c:	ldr	r3, [sp, #32]
   1ac80:	cmp	r3, #0
   1ac84:	beq	1ae60 <__assert_fail@plt+0x8e58>
   1ac88:	mov	r1, r4
   1ac8c:	mov	r0, r3
   1ac90:	bl	18860 <__assert_fail@plt+0x6858>
   1ac94:	cmp	r0, #0
   1ac98:	bne	1ae50 <__assert_fail@plt+0x8e48>
   1ac9c:	ldr	r3, [fp]
   1aca0:	ldr	r2, [sp, #24]
   1aca4:	mov	r1, r3
   1aca8:	str	r3, [sp, #8]
   1acac:	ldr	r3, [r2, r3, lsl #2]
   1acb0:	lsl	r2, r1, #2
   1acb4:	cmp	r4, r3
   1acb8:	bls	1aefc <__assert_fail@plt+0x8ef4>
   1acbc:	ldr	r0, [sp]
   1acc0:	sub	r4, r4, #16
   1acc4:	add	r3, r0, r2
   1acc8:	str	r4, [r0, r1, lsl #2]
   1accc:	str	r3, [sp, #4]
   1acd0:	ldr	r3, [sp, #20]
   1acd4:	cmp	r3, #1
   1acd8:	bls	1aa7c <__assert_fail@plt+0x8a74>
   1acdc:	mov	r4, #1
   1ace0:	mov	r6, r3
   1ace4:	mov	r5, r4
   1ace8:	b	1ad68 <__assert_fail@plt+0x8d60>
   1acec:	ldrb	r3, [r9, #1173]	; 0x495
   1acf0:	cmp	r3, #0
   1acf4:	bne	1ad44 <__assert_fail@plt+0x8d3c>
   1acf8:	ldrb	r3, [r9, #1174]	; 0x496
   1acfc:	cmp	r3, #0
   1ad00:	bne	1ad44 <__assert_fail@plt+0x8d3c>
   1ad04:	ldr	r1, [r7, #4]
   1ad08:	ldr	r2, [r8, #4]
   1ad0c:	subs	r3, r1, #1
   1ad10:	mov	ip, r3
   1ad14:	sub	r3, r2, #1
   1ad18:	bne	1ade8 <__assert_fail@plt+0x8de0>
   1ad1c:	adds	r0, r3, #0
   1ad20:	mvnne	r0, #0
   1ad24:	ldrb	r3, [r9, #1464]	; 0x5b8
   1ad28:	cmp	r3, #0
   1ad2c:	beq	1ad34 <__assert_fail@plt+0x8d2c>
   1ad30:	rsb	r0, r0, #0
   1ad34:	cmp	r0, #0
   1ad38:	blt	1ad54 <__assert_fail@plt+0x8d4c>
   1ad3c:	cmp	r0, #0
   1ad40:	bne	1ada4 <__assert_fail@plt+0x8d9c>
   1ad44:	ldr	r3, [fp, sl]
   1ad48:	ldr	r2, [sp, #8]
   1ad4c:	cmp	r3, r2
   1ad50:	bls	1ada4 <__assert_fail@plt+0x8d9c>
   1ad54:	mov	r6, r4
   1ad58:	add	r4, r5, r6
   1ad5c:	cmp	r5, r6
   1ad60:	lsr	r4, r4, #1
   1ad64:	bcs	1adb8 <__assert_fail@plt+0x8db0>
   1ad68:	ldr	r2, [r9, #1040]	; 0x410
   1ad6c:	ldr	r3, [fp, r4, lsl #2]
   1ad70:	ldr	r1, [sp, #4]
   1ad74:	cmp	r2, #0
   1ad78:	ldr	r2, [sp]
   1ad7c:	ldr	r7, [r1]
   1ad80:	lsl	sl, r4, #2
   1ad84:	ldr	r8, [r2, r3, lsl #2]
   1ad88:	beq	1ad04 <__assert_fail@plt+0x8cfc>
   1ad8c:	mov	r1, r8
   1ad90:	mov	r0, r7
   1ad94:	bl	17478 <__assert_fail@plt+0x5470>
   1ad98:	cmp	r0, #0
   1ad9c:	beq	1acec <__assert_fail@plt+0x8ce4>
   1ada0:	blt	1ad54 <__assert_fail@plt+0x8d4c>
   1ada4:	add	r5, r4, #1
   1ada8:	add	r4, r5, r6
   1adac:	cmp	r5, r6
   1adb0:	lsr	r4, r4, #1
   1adb4:	bcc	1ad68 <__assert_fail@plt+0x8d60>
   1adb8:	subs	r4, r5, #1
   1adbc:	beq	1add8 <__assert_fail@plt+0x8dd0>
   1adc0:	sub	r2, r5, #-1073741823	; 0xc0000001
   1adc4:	ldr	r1, [sp, #36]	; 0x24
   1adc8:	lsl	r2, r2, #2
   1adcc:	mov	r0, fp
   1add0:	lsl	r4, r4, #2
   1add4:	bl	11b34 <memmove@plt>
   1add8:	ldr	r3, [sp, #8]
   1addc:	str	r3, [fp, r4]
   1ade0:	ldr	r3, [fp]
   1ade4:	b	1ac68 <__assert_fail@plt+0x8c60>
   1ade8:	cmp	r3, #0
   1adec:	bne	1ae00 <__assert_fail@plt+0x8df8>
   1adf0:	ldrb	r3, [r9, #1464]	; 0x5b8
   1adf4:	cmp	r3, #0
   1adf8:	bne	1ad54 <__assert_fail@plt+0x8d4c>
   1adfc:	b	1ada4 <__assert_fail@plt+0x8d9c>
   1ae00:	ldrb	r0, [r9, #1305]	; 0x519
   1ae04:	cmp	r0, #0
   1ae08:	bne	1b0d4 <__assert_fail@plt+0x90cc>
   1ae0c:	cmp	ip, r3
   1ae10:	mov	r2, ip
   1ae14:	ldr	r0, [r7]
   1ae18:	movcs	r2, r3
   1ae1c:	ldr	r1, [r8]
   1ae20:	mov	r7, ip
   1ae24:	str	r3, [sp, #28]
   1ae28:	bl	11bf4 <memcmp@plt>
   1ae2c:	cmp	r0, #0
   1ae30:	bne	1ad24 <__assert_fail@plt+0x8d1c>
   1ae34:	ldr	r3, [sp, #28]
   1ae38:	cmp	r7, r3
   1ae3c:	ldrb	r3, [r9, #1464]	; 0x5b8
   1ae40:	bcs	1b0e8 <__assert_fail@plt+0x90e0>
   1ae44:	cmp	r3, #0
   1ae48:	bne	1ada4 <__assert_fail@plt+0x8d9c>
   1ae4c:	b	1ad54 <__assert_fail@plt+0x8d4c>
   1ae50:	ldr	r2, [sp, #112]	; 0x70
   1ae54:	ldr	r1, [sp, #40]	; 0x28
   1ae58:	add	r0, sp, #56	; 0x38
   1ae5c:	bl	16718 <__assert_fail@plt+0x4710>
   1ae60:	ldr	r5, [r4, #4]
   1ae64:	ldr	r3, [sp, #48]	; 0x30
   1ae68:	cmp	r5, r3
   1ae6c:	bhi	1aec4 <__assert_fail@plt+0x8ebc>
   1ae70:	ldr	r0, [sp, #56]	; 0x38
   1ae74:	ldr	r1, [r4]
   1ae78:	mov	r2, r5
   1ae7c:	str	r5, [sp, #60]	; 0x3c
   1ae80:	bl	11b7c <memcpy@plt>
   1ae84:	ldr	r3, [sp, #52]	; 0x34
   1ae88:	cmp	r3, #0
   1ae8c:	beq	1b27c <__assert_fail@plt+0x9274>
   1ae90:	ldr	r0, [r4]
   1ae94:	ldr	r3, [r4, #8]
   1ae98:	ldr	r1, [r4, #12]
   1ae9c:	ldr	r2, [sp, #56]	; 0x38
   1aea0:	sub	r3, r3, r0
   1aea4:	add	r3, r2, r3
   1aea8:	sub	r1, r1, r0
   1aeac:	add	r2, r2, r1
   1aeb0:	str	r3, [sp, #64]	; 0x40
   1aeb4:	add	r3, sp, #56	; 0x38
   1aeb8:	str	r2, [sp, #68]	; 0x44
   1aebc:	str	r3, [sp, #32]
   1aec0:	b	1ac9c <__assert_fail@plt+0x8c94>
   1aec4:	cmp	r3, #0
   1aec8:	beq	1aedc <__assert_fail@plt+0x8ed4>
   1aecc:	lsl	r3, r3, #1
   1aed0:	cmp	r5, r3
   1aed4:	bhi	1aec4 <__assert_fail@plt+0x8ebc>
   1aed8:	mov	r5, r3
   1aedc:	ldr	r0, [sp, #56]	; 0x38
   1aee0:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   1aee4:	mov	r0, r5
   1aee8:	bl	261d8 <__assert_fail@plt+0x141d0>
   1aeec:	str	r5, [sp, #48]	; 0x30
   1aef0:	ldr	r5, [r4, #4]
   1aef4:	str	r0, [sp, #56]	; 0x38
   1aef8:	b	1ae74 <__assert_fail@plt+0x8e6c>
   1aefc:	ldr	r2, [sp, #12]
   1af00:	mov	r3, r1
   1af04:	rsb	r0, r1, r1, lsl #3
   1af08:	ldr	r2, [r2, r1, lsl #3]
   1af0c:	ldr	r1, [sp, #16]
   1af10:	add	r0, r1, r0, lsl #2
   1af14:	ldr	r1, [sp, #116]	; 0x74
   1af18:	ldr	r1, [r1, r3, lsl #2]
   1af1c:	bl	1607c <__assert_fail@plt+0x4074>
   1af20:	cmp	r0, #0
   1af24:	bne	1b0fc <__assert_fail@plt+0x90f4>
   1af28:	ldr	r3, [sp, #20]
   1af2c:	cmp	r3, #1
   1af30:	ldrls	r1, [fp]
   1af34:	bls	1af68 <__assert_fail@plt+0x8f60>
   1af38:	mov	r2, r3
   1af3c:	mov	r3, fp
   1af40:	add	r0, fp, r2, lsl #2
   1af44:	ldr	r1, [r3], #4
   1af48:	ldr	r2, [r3]
   1af4c:	add	r3, r3, #4
   1af50:	cmp	r2, r1
   1af54:	subhi	r2, r2, #1
   1af58:	strhi	r2, [r3, #-4]
   1af5c:	ldrhi	r1, [fp]
   1af60:	cmp	r3, r0
   1af64:	bne	1af48 <__assert_fail@plt+0x8f40>
   1af68:	ldr	r3, [sp, #116]	; 0x74
   1af6c:	ldr	r6, [r3, r1, lsl #2]
   1af70:	ldr	r3, [sp, #12]
   1af74:	mov	r0, r6
   1af78:	ldr	r4, [r3, r1, lsl #3]
   1af7c:	bl	11e88 <fileno@plt>
   1af80:	ldr	r3, [sp, #20]
   1af84:	sub	r5, r3, #1
   1af88:	cmp	r0, #0
   1af8c:	beq	1b1ec <__assert_fail@plt+0x91e4>
   1af90:	cmp	r0, #1
   1af94:	beq	1b19c <__assert_fail@plt+0x9194>
   1af98:	mov	r0, r6
   1af9c:	bl	1d95c <__assert_fail@plt+0xb954>
   1afa0:	cmp	r0, #0
   1afa4:	bne	1b2ac <__assert_fail@plt+0x92a4>
   1afa8:	ldr	r3, [fp]
   1afac:	ldr	r2, [sp, #44]	; 0x2c
   1afb0:	cmp	r3, r2
   1afb4:	bcc	1b204 <__assert_fail@plt+0x91fc>
   1afb8:	ldr	r2, [sp, #16]
   1afbc:	rsb	r3, r3, r3, lsl #3
   1afc0:	ldr	r0, [r2, r3, lsl #2]
   1afc4:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   1afc8:	ldr	r4, [fp]
   1afcc:	cmp	r5, r4
   1afd0:	bls	1b08c <__assert_fail@plt+0x9084>
   1afd4:	ldr	r3, [sp, #20]
   1afd8:	ldr	r2, [sp, #116]	; 0x74
   1afdc:	sub	lr, r3, #-536870911	; 0xe0000001
   1afe0:	ldr	r3, [sp, #12]
   1afe4:	lsl	r6, r4, #2
   1afe8:	lsl	r7, r4, #3
   1afec:	add	lr, r3, lr, lsl #3
   1aff0:	add	ip, r2, r6
   1aff4:	add	r3, r3, r7
   1aff8:	add	r2, r3, #8
   1affc:	ldr	r8, [ip, #4]
   1b000:	ldm	r2, {r0, r1}
   1b004:	cmp	lr, r2
   1b008:	str	r8, [ip], #4
   1b00c:	stm	r3, {r0, r1}
   1b010:	mov	r3, r2
   1b014:	bne	1aff8 <__assert_fail@plt+0x8ff0>
   1b018:	ldr	r8, [sp, #20]
   1b01c:	sub	r0, r7, r4
   1b020:	sub	r3, r8, r4
   1b024:	rsb	r4, r4, #1069547520	; 0x3fc00000
   1b028:	rsb	r3, r3, r3, lsl #3
   1b02c:	add	r4, r4, #4177920	; 0x3fc000
   1b030:	lsl	r0, r0, #2
   1b034:	lsl	r2, r3, #2
   1b038:	add	r4, r4, #16320	; 0x3fc0
   1b03c:	ldr	r3, [sp, #16]
   1b040:	add	r1, r0, #28
   1b044:	add	r4, r4, #63	; 0x3f
   1b048:	add	r1, r3, r1
   1b04c:	add	r0, r3, r0
   1b050:	sub	r2, r2, #28
   1b054:	add	r4, r4, r8
   1b058:	bl	11b34 <memmove@plt>
   1b05c:	ldr	r3, [sp]
   1b060:	add	r7, r6, #4
   1b064:	lsl	r4, r4, #2
   1b068:	add	r1, r3, r7
   1b06c:	mov	r2, r4
   1b070:	add	r0, r3, r6
   1b074:	bl	11b34 <memmove@plt>
   1b078:	ldr	r3, [sp, #24]
   1b07c:	mov	r2, r4
   1b080:	add	r1, r3, r7
   1b084:	add	r0, r3, r6
   1b088:	bl	11b34 <memmove@plt>
   1b08c:	cmp	r5, #0
   1b090:	beq	1aa8c <__assert_fail@plt+0x8a84>
   1b094:	ldr	r3, [sp, #20]
   1b098:	ldr	r1, [sp, #36]	; 0x24
   1b09c:	sub	r2, r3, #-1073741823	; 0xc0000001
   1b0a0:	cmp	r3, #1
   1b0a4:	lslne	r2, r2, #2
   1b0a8:	moveq	r2, #4
   1b0ac:	mov	r0, fp
   1b0b0:	str	r5, [sp, #20]
   1b0b4:	bl	11b34 <memmove@plt>
   1b0b8:	ldr	r3, [fp]
   1b0bc:	b	1ac68 <__assert_fail@plt+0x8c60>
   1b0c0:	ldr	r2, [sp, #112]	; 0x70
   1b0c4:	ldr	r1, [sp, #40]	; 0x28
   1b0c8:	mov	r0, r4
   1b0cc:	bl	16718 <__assert_fail@plt+0x4710>
   1b0d0:	b	1ac9c <__assert_fail@plt+0x8c94>
   1b0d4:	mov	r3, r2
   1b0d8:	ldr	r0, [r7]
   1b0dc:	ldr	r2, [r8]
   1b0e0:	bl	2694c <__assert_fail@plt+0x14944>
   1b0e4:	b	1ad24 <__assert_fail@plt+0x8d1c>
   1b0e8:	movne	r0, #1
   1b0ec:	moveq	r0, #0
   1b0f0:	cmp	r3, #0
   1b0f4:	bne	1ad30 <__assert_fail@plt+0x8d28>
   1b0f8:	b	1ad3c <__assert_fail@plt+0x8d34>
   1b0fc:	ldr	r3, [fp]
   1b100:	ldr	lr, [sp]
   1b104:	mov	ip, r3
   1b108:	ldr	r1, [sp, #16]
   1b10c:	str	r3, [sp, #8]
   1b110:	rsb	r3, r3, r3, lsl #3
   1b114:	add	r2, lr, ip, lsl #2
   1b118:	str	r2, [sp, #4]
   1b11c:	add	r2, r1, r3, lsl #2
   1b120:	ldr	r3, [r1, r3, lsl #2]
   1b124:	ldr	r0, [r2, #12]
   1b128:	ldr	r1, [r2, #8]
   1b12c:	add	r3, r3, r0
   1b130:	sub	r2, r3, #16
   1b134:	str	r2, [lr, ip, lsl #2]
   1b138:	ldr	r2, [sp, #24]
   1b13c:	sub	r3, r3, r1, lsl #4
   1b140:	str	r3, [r2, ip, lsl #2]
   1b144:	b	1acd0 <__assert_fail@plt+0x8cc8>
   1b148:	ldrb	r0, [r9, #1305]	; 0x519
   1b14c:	cmp	r0, #0
   1b150:	bne	1b224 <__assert_fail@plt+0x921c>
   1b154:	cmp	r3, sl
   1b158:	movcc	r2, r3
   1b15c:	movcs	r2, sl
   1b160:	ldr	r1, [r8]
   1b164:	ldr	r0, [r7]
   1b168:	str	r3, [sp, #4]
   1b16c:	bl	11bf4 <memcmp@plt>
   1b170:	cmp	r0, #0
   1b174:	bne	1b18c <__assert_fail@plt+0x9184>
   1b178:	ldr	r3, [sp, #4]
   1b17c:	cmp	r3, sl
   1b180:	bcc	1b25c <__assert_fail@plt+0x9254>
   1b184:	movne	r0, #1
   1b188:	moveq	r0, #0
   1b18c:	ldrb	r3, [r9, #1464]	; 0x5b8
   1b190:	cmp	r3, #0
   1b194:	rsbne	r0, r0, #0
   1b198:	b	1ac0c <__assert_fail@plt+0x8c04>
   1b19c:	mov	r0, r6
   1b1a0:	bl	11c90 <fflush_unlocked@plt>
   1b1a4:	cmp	r0, #0
   1b1a8:	beq	1afa8 <__assert_fail@plt+0x8fa0>
   1b1ac:	ldr	r1, [pc, #264]	; 1b2bc <__assert_fail@plt+0x92b4>
   1b1b0:	mov	r2, #5
   1b1b4:	mov	r0, #0
   1b1b8:	bl	11c0c <dcgettext@plt>
   1b1bc:	mov	r1, r4
   1b1c0:	bl	15c10 <__assert_fail@plt+0x3c08>
   1b1c4:	ldr	r0, [sp, #40]	; 0x28
   1b1c8:	bl	11c90 <fflush_unlocked@plt>
   1b1cc:	cmp	r0, #0
   1b1d0:	beq	1aae8 <__assert_fail@plt+0x8ae0>
   1b1d4:	ldr	r1, [pc, #224]	; 1b2bc <__assert_fail@plt+0x92b4>
   1b1d8:	mov	r2, #5
   1b1dc:	mov	r0, #0
   1b1e0:	bl	11c0c <dcgettext@plt>
   1b1e4:	ldr	r1, [sp, #112]	; 0x70
   1b1e8:	bl	15c10 <__assert_fail@plt+0x3c08>
   1b1ec:	mov	r0, r6
   1b1f0:	bl	11f48 <clearerr_unlocked@plt>
   1b1f4:	ldr	r3, [fp]
   1b1f8:	ldr	r2, [sp, #44]	; 0x2c
   1b1fc:	cmp	r3, r2
   1b200:	bcs	1afb8 <__assert_fail@plt+0x8fb0>
   1b204:	ldr	r2, [sp, #12]
   1b208:	ldr	r0, [r2, r3, lsl #3]
   1b20c:	bl	16eb4 <__assert_fail@plt+0x4eac>
   1b210:	ldr	r2, [sp, #44]	; 0x2c
   1b214:	ldr	r3, [fp]
   1b218:	sub	r2, r2, #1
   1b21c:	str	r2, [sp, #44]	; 0x2c
   1b220:	b	1afb8 <__assert_fail@plt+0x8fb0>
   1b224:	mov	r3, r2
   1b228:	ldr	r0, [r7]
   1b22c:	ldr	r2, [r8]
   1b230:	bl	2694c <__assert_fail@plt+0x14944>
   1b234:	ldrb	r3, [r9, #1464]	; 0x5b8
   1b238:	cmp	r3, #0
   1b23c:	rsbne	r0, r0, #0
   1b240:	b	1ac0c <__assert_fail@plt+0x8c04>
   1b244:	ldr	r0, [sp, #40]	; 0x28
   1b248:	bl	11f48 <clearerr_unlocked@plt>
   1b24c:	b	1aae8 <__assert_fail@plt+0x8ae0>
   1b250:	ldr	fp, [sp, #28]
   1b254:	mov	r8, r2
   1b258:	b	1ab5c <__assert_fail@plt+0x8b54>
   1b25c:	ldrb	r3, [r9, #1464]	; 0x5b8
   1b260:	cmp	r3, #0
   1b264:	bne	1ac14 <__assert_fail@plt+0x8c0c>
   1b268:	ldr	r3, [sp, #20]
   1b26c:	add	r6, r6, #1
   1b270:	cmp	r3, r6
   1b274:	bhi	1ab8c <__assert_fail@plt+0x8b84>
   1b278:	b	1ac50 <__assert_fail@plt+0x8c48>
   1b27c:	add	r3, sp, #56	; 0x38
   1b280:	str	r3, [sp, #32]
   1b284:	b	1ac9c <__assert_fail@plt+0x8c94>
   1b288:	bl	26820 <__assert_fail@plt+0x14818>
   1b28c:	ldr	r0, [sp, #112]	; 0x70
   1b290:	bl	12018 <__assert_fail@plt+0x10>
   1b294:	ldr	r1, [pc, #32]	; 1b2bc <__assert_fail@plt+0x92b4>
   1b298:	mov	r0, r3
   1b29c:	mov	r2, #5
   1b2a0:	bl	11c0c <dcgettext@plt>
   1b2a4:	ldr	r1, [sp, #20]
   1b2a8:	bl	15c10 <__assert_fail@plt+0x3c08>
   1b2ac:	mov	r0, r4
   1b2b0:	bl	12018 <__assert_fail@plt+0x10>
   1b2b4:	andeq	ip, r3, r8, ror #5
   1b2b8:	andeq	ip, r3, r8, ror #3
   1b2bc:	ldrdeq	r9, [r2], -r4
   1b2c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2c4:	mov	fp, r0
   1b2c8:	ldr	r0, [pc, #2680]	; 1bd48 <__assert_fail@plt+0x9d40>
   1b2cc:	sub	sp, sp, #204	; 0xcc
   1b2d0:	mov	r9, r1
   1b2d4:	ldr	r8, [r0, #112]	; 0x70
   1b2d8:	str	r3, [sp, #32]
   1b2dc:	cmp	r2, r8
   1b2e0:	str	r2, [sp, #12]
   1b2e4:	movls	r3, r2
   1b2e8:	bls	1b424 <__assert_fail@plt+0x941c>
   1b2ec:	mov	r3, r2
   1b2f0:	str	fp, [sp, #20]
   1b2f4:	cmp	r8, r3
   1b2f8:	bhi	1ba54 <__assert_fail@plt+0x9a4c>
   1b2fc:	mov	r7, #0
   1b300:	ldr	r6, [sp, #20]
   1b304:	mov	r5, r7
   1b308:	add	r0, sp, #56	; 0x38
   1b30c:	bl	1a5d4 <__assert_fail@plt+0x85cc>
   1b310:	ldr	r2, [pc, #2608]	; 1bd48 <__assert_fail@plt+0x9d40>
   1b314:	ldr	r3, [sp, #56]	; 0x38
   1b318:	ldr	sl, [r2, #112]	; 0x70
   1b31c:	ldr	r2, [sp, #20]
   1b320:	cmp	sl, r9
   1b324:	add	r8, r2, r5, lsl #3
   1b328:	mov	r1, sl
   1b32c:	add	r2, sp, #64	; 0x40
   1b330:	movcc	fp, sl
   1b334:	movcs	fp, r9
   1b338:	str	r3, [sp, #24]
   1b33c:	str	r0, [sp, #16]
   1b340:	mov	r0, r8
   1b344:	bl	1a2c8 <__assert_fail@plt+0x82c0>
   1b348:	ldr	r3, [sp, #16]
   1b34c:	cmp	sl, r0
   1b350:	movhi	sl, #1
   1b354:	movls	sl, #0
   1b358:	cmp	r0, #1
   1b35c:	movhi	sl, #0
   1b360:	cmp	sl, #0
   1b364:	mov	r4, r0
   1b368:	add	sl, r3, #9
   1b36c:	ldr	r3, [sp, #24]
   1b370:	bne	1bc58 <__assert_fail@plt+0x9c50>
   1b374:	ldr	r2, [sp, #64]	; 0x40
   1b378:	mov	r1, fp
   1b37c:	mov	r0, r8
   1b380:	str	r2, [sp, #4]
   1b384:	str	sl, [sp]
   1b388:	mov	r2, r4
   1b38c:	bl	1a868 <__assert_fail@plt+0x8860>
   1b390:	ldr	r3, [pc, #2480]	; 1bd48 <__assert_fail@plt+0x9d40>
   1b394:	add	r5, r5, r4
   1b398:	cmp	r9, r4
   1b39c:	ldr	r8, [r3, #112]	; 0x70
   1b3a0:	ldr	r3, [sp, #12]
   1b3a4:	subls	r9, r9, r9
   1b3a8:	sub	fp, r3, r5
   1b3ac:	ldr	r3, [sp, #20]
   1b3b0:	subhi	r9, r9, r4
   1b3b4:	cmp	fp, r8
   1b3b8:	str	sl, [r3, r7, lsl #3]
   1b3bc:	ldr	r3, [sp, #16]
   1b3c0:	add	r7, r7, #1
   1b3c4:	str	r3, [r6, #4]
   1b3c8:	add	r6, r6, #8
   1b3cc:	bcs	1b308 <__assert_fail@plt+0x9300>
   1b3d0:	mov	r1, r8
   1b3d4:	mov	r0, r7
   1b3d8:	bl	28704 <_obstack_memory_used@@Base+0x278>
   1b3dc:	lsl	r0, r5, #3
   1b3e0:	sub	r3, r8, r1
   1b3e4:	cmp	r3, fp
   1b3e8:	bcc	1b5c4 <__assert_fail@plt+0x95bc>
   1b3ec:	ldr	r4, [sp, #12]
   1b3f0:	ldr	r3, [sp, #20]
   1b3f4:	sub	r2, r4, r5
   1b3f8:	add	r1, r3, r0
   1b3fc:	lsl	r2, r2, #3
   1b400:	add	r0, r3, r7, lsl #3
   1b404:	sub	r5, r7, r5
   1b408:	bl	11b34 <memmove@plt>
   1b40c:	add	r3, r4, r5
   1b410:	cmp	r3, r8
   1b414:	str	r3, [sp, #12]
   1b418:	add	r9, r9, r7
   1b41c:	bhi	1b2f4 <__assert_fail@plt+0x92ec>
   1b420:	ldr	fp, [sp, #20]
   1b424:	cmp	r9, r3
   1b428:	bcs	1b680 <__assert_fail@plt+0x9678>
   1b42c:	ldr	r7, [pc, #2328]	; 1bd4c <__assert_fail@plt+0x9d44>
   1b430:	add	r8, fp, r9, lsl #3
   1b434:	add	r3, r7, #1040	; 0x410
   1b438:	add	r3, r3, #8
   1b43c:	str	r3, [sp, #20]
   1b440:	mov	r4, r9
   1b444:	mov	sl, #0
   1b448:	str	r9, [sp, #36]	; 0x24
   1b44c:	ldr	r5, [sp, #32]
   1b450:	b	1b47c <__assert_fail@plt+0x9474>
   1b454:	cmp	sl, #0
   1b458:	addne	r9, sl, #9
   1b45c:	beq	1b52c <__assert_fail@plt+0x9524>
   1b460:	str	r9, [fp, r4, lsl #3]
   1b464:	str	sl, [r8, #4]
   1b468:	ldr	r3, [sp, #12]
   1b46c:	add	r4, r4, #1
   1b470:	cmp	r4, r3
   1b474:	add	r8, r8, #8
   1b478:	beq	1b67c <__assert_fail@plt+0x9674>
   1b47c:	ldr	r9, [fp, r4, lsl #3]
   1b480:	ldr	r1, [pc, #2248]	; 1bd50 <__assert_fail@plt+0x9d48>
   1b484:	mov	r0, r9
   1b488:	bl	11ae0 <strcmp@plt>
   1b48c:	cmp	r5, #0
   1b490:	mov	r6, r0
   1b494:	beq	1b4bc <__assert_fail@plt+0x94b4>
   1b498:	mov	r1, r9
   1b49c:	mov	r0, r5
   1b4a0:	bl	11ae0 <strcmp@plt>
   1b4a4:	cmp	r6, #0
   1b4a8:	clz	r0, r0
   1b4ac:	lsr	r0, r0, #5
   1b4b0:	moveq	r0, #0
   1b4b4:	cmp	r0, #0
   1b4b8:	bne	1b454 <__assert_fail@plt+0x944c>
   1b4bc:	ldr	r3, [r7, #1044]	; 0x414
   1b4c0:	cmp	r3, #0
   1b4c4:	beq	1ba24 <__assert_fail@plt+0x9a1c>
   1b4c8:	cmp	r3, #0
   1b4cc:	bge	1b67c <__assert_fail@plt+0x9674>
   1b4d0:	cmp	r6, #0
   1b4d4:	bne	1b5a8 <__assert_fail@plt+0x95a0>
   1b4d8:	mov	r1, r6
   1b4dc:	add	r2, sp, #64	; 0x40
   1b4e0:	mov	r0, #3
   1b4e4:	bl	11ca8 <__fxstat64@plt>
   1b4e8:	cmp	r0, #0
   1b4ec:	bne	1b468 <__assert_fail@plt+0x9460>
   1b4f0:	ldr	r3, [pc, #2140]	; 1bd54 <__assert_fail@plt+0x9d4c>
   1b4f4:	ldrd	r0, [sp, #160]	; 0xa0
   1b4f8:	ldrd	r2, [r3, #88]	; 0x58
   1b4fc:	cmp	r1, r3
   1b500:	cmpeq	r0, r2
   1b504:	bne	1b468 <__assert_fail@plt+0x9460>
   1b508:	ldr	r3, [pc, #2116]	; 1bd54 <__assert_fail@plt+0x9d4c>
   1b50c:	ldrd	r0, [sp, #64]	; 0x40
   1b510:	ldrd	r2, [r3, #-8]
   1b514:	cmp	r1, r3
   1b518:	cmpeq	r0, r2
   1b51c:	bne	1b468 <__assert_fail@plt+0x9460>
   1b520:	cmp	sl, #0
   1b524:	addne	r9, sl, #9
   1b528:	bne	1b460 <__assert_fail@plt+0x9458>
   1b52c:	add	r0, sp, #44	; 0x2c
   1b530:	bl	1a5d4 <__assert_fail@plt+0x85cc>
   1b534:	ldr	r3, [sp, #44]	; 0x2c
   1b538:	mov	r1, #4
   1b53c:	str	r3, [sp, #28]
   1b540:	mov	sl, r0
   1b544:	mov	r0, #1
   1b548:	bl	262bc <__assert_fail@plt+0x142b4>
   1b54c:	ldr	r6, [r8, #4]
   1b550:	add	r9, sl, #9
   1b554:	cmp	r6, #0
   1b558:	str	r0, [sp, #16]
   1b55c:	beq	1b56c <__assert_fail@plt+0x9564>
   1b560:	ldrb	r3, [r6, #8]
   1b564:	cmp	r3, #0
   1b568:	bne	1ba6c <__assert_fail@plt+0x9a64>
   1b56c:	ldr	r1, [pc, #2020]	; 1bd58 <__assert_fail@plt+0x9d50>
   1b570:	ldr	r0, [fp, r4, lsl #3]
   1b574:	bl	172fc <__assert_fail@plt+0x52f4>
   1b578:	ldr	r3, [sp, #16]
   1b57c:	cmp	r0, #0
   1b580:	str	r0, [r3]
   1b584:	beq	1bb18 <__assert_fail@plt+0x9b10>
   1b588:	str	r3, [sp, #4]
   1b58c:	str	r9, [sp]
   1b590:	ldr	r3, [sp, #28]
   1b594:	mov	r2, #1
   1b598:	mov	r1, #0
   1b59c:	mov	r0, r8
   1b5a0:	bl	1a868 <__assert_fail@plt+0x8860>
   1b5a4:	b	1b460 <__assert_fail@plt+0x9458>
   1b5a8:	add	r2, sp, #64	; 0x40
   1b5ac:	ldr	r1, [fp, r4, lsl #3]
   1b5b0:	mov	r0, #3
   1b5b4:	bl	11fc0 <__xstat64@plt>
   1b5b8:	cmp	r0, #0
   1b5bc:	beq	1b4f0 <__assert_fail@plt+0x94e8>
   1b5c0:	b	1b468 <__assert_fail@plt+0x9460>
   1b5c4:	add	r4, fp, #1
   1b5c8:	sub	r4, r4, r3
   1b5cc:	ldr	r3, [sp, #20]
   1b5d0:	add	r8, r3, r0
   1b5d4:	add	r0, sp, #56	; 0x38
   1b5d8:	bl	1a5d4 <__assert_fail@plt+0x85cc>
   1b5dc:	cmp	r4, r9
   1b5e0:	movcc	r3, r4
   1b5e4:	mov	r1, r4
   1b5e8:	movcs	r3, r9
   1b5ec:	add	r2, sp, #64	; 0x40
   1b5f0:	ldr	r6, [sp, #56]	; 0x38
   1b5f4:	mov	fp, r0
   1b5f8:	mov	r0, r8
   1b5fc:	str	r3, [sp, #16]
   1b600:	bl	1a2c8 <__assert_fail@plt+0x82c0>
   1b604:	cmp	r4, r0
   1b608:	movhi	r4, #1
   1b60c:	movls	r4, #0
   1b610:	cmp	r0, #1
   1b614:	movhi	r4, #0
   1b618:	cmp	r4, #0
   1b61c:	mov	sl, r0
   1b620:	add	r4, fp, #9
   1b624:	bne	1bcd8 <__assert_fail@plt+0x9cd0>
   1b628:	ldr	r2, [sp, #64]	; 0x40
   1b62c:	mov	r0, r8
   1b630:	mov	r3, r6
   1b634:	str	r2, [sp, #4]
   1b638:	str	r4, [sp]
   1b63c:	ldr	r1, [sp, #16]
   1b640:	mov	r2, sl
   1b644:	bl	1a868 <__assert_fail@plt+0x8860>
   1b648:	ldr	r3, [pc, #1784]	; 1bd48 <__assert_fail@plt+0x9d40>
   1b64c:	add	r5, r5, sl
   1b650:	cmp	sl, r9
   1b654:	ldr	r8, [r3, #112]	; 0x70
   1b658:	ldr	r3, [sp, #20]
   1b65c:	subls	r9, r9, sl
   1b660:	subhi	r9, r9, r9
   1b664:	str	r4, [r3, r7, lsl #3]
   1b668:	add	r3, r3, r7, lsl #3
   1b66c:	lsl	r0, r5, #3
   1b670:	str	fp, [r3, #4]
   1b674:	add	r7, r7, #1
   1b678:	b	1b3ec <__assert_fail@plt+0x93e4>
   1b67c:	ldr	r9, [sp, #36]	; 0x24
   1b680:	ldr	r6, [pc, #1732]	; 1bd4c <__assert_fail@plt+0x9d44>
   1b684:	ldr	r4, [sp, #12]
   1b688:	add	r3, r6, #1168	; 0x490
   1b68c:	add	r3, r3, #8
   1b690:	str	r3, [sp, #20]
   1b694:	b	1b740 <__assert_fail@plt+0x9738>
   1b698:	mov	r0, r7
   1b69c:	bl	11ff0 <close@plt>
   1b6a0:	ldr	r0, [sp, #56]	; 0x38
   1b6a4:	bl	11ff0 <close@plt>
   1b6a8:	ldr	r0, [r6, #1156]	; 0x484
   1b6ac:	ldr	r7, [sp, #60]	; 0x3c
   1b6b0:	cmp	r0, #0
   1b6b4:	beq	1b9ac <__assert_fail@plt+0x99a4>
   1b6b8:	mov	r3, #1
   1b6bc:	mov	r1, r4
   1b6c0:	strb	r3, [r4, #8]
   1b6c4:	bl	1f2f0 <__assert_fail@plt+0xd2e8>
   1b6c8:	cmp	r0, #0
   1b6cc:	beq	1b9d0 <__assert_fail@plt+0x99c8>
   1b6d0:	mov	r0, r7
   1b6d4:	ldr	r1, [pc, #1664]	; 1bd5c <__assert_fail@plt+0x9d54>
   1b6d8:	bl	11ab0 <fdopen@plt>
   1b6dc:	subs	r3, r0, #0
   1b6e0:	beq	1bb30 <__assert_fail@plt+0x9b28>
   1b6e4:	ldr	r2, [sp, #12]
   1b6e8:	cmp	r9, sl
   1b6ec:	ldr	r0, [sp, #40]	; 0x28
   1b6f0:	movcc	r7, r9
   1b6f4:	movcs	r7, sl
   1b6f8:	sub	r8, r2, sl
   1b6fc:	mov	r1, r7
   1b700:	mov	r2, sl
   1b704:	str	r0, [sp, #4]
   1b708:	str	r5, [sp]
   1b70c:	mov	r0, fp
   1b710:	bl	1a868 <__assert_fail@plt+0x8860>
   1b714:	str	r4, [fp, #4]
   1b718:	str	r5, [fp]
   1b71c:	ldr	r1, [sp, #16]
   1b720:	lsl	r2, r8, #3
   1b724:	add	r0, fp, #8
   1b728:	bl	11b34 <memmove@plt>
   1b72c:	rsb	r7, r7, #1
   1b730:	add	r3, r8, #1
   1b734:	add	r9, r9, r7
   1b738:	mov	r4, r3
   1b73c:	str	r3, [sp, #12]
   1b740:	add	r2, sp, #40	; 0x28
   1b744:	mov	r1, r4
   1b748:	mov	r0, fp
   1b74c:	bl	1a2c8 <__assert_fail@plt+0x82c0>
   1b750:	cmp	r4, r0
   1b754:	mov	sl, r0
   1b758:	beq	1b9d4 <__assert_fail@plt+0x99cc>
   1b75c:	cmp	r0, #2
   1b760:	bls	1bcc0 <__assert_fail@plt+0x9cb8>
   1b764:	sub	r2, sl, #-1073741823	; 0xc0000001
   1b768:	sub	r3, sl, #-536870911	; 0xe0000001
   1b76c:	lsl	r2, r2, #2
   1b770:	mov	r7, r2
   1b774:	add	r3, fp, r3, lsl #3
   1b778:	str	r3, [sp, #16]
   1b77c:	str	r9, [sp, #24]
   1b780:	ldr	r3, [sp, #40]	; 0x28
   1b784:	sub	sl, sl, #1
   1b788:	ldr	r5, [r3, r7]
   1b78c:	ldr	r4, [fp, sl, lsl #3]
   1b790:	mov	r0, r5
   1b794:	bl	11e88 <fileno@plt>
   1b798:	cmp	r0, #0
   1b79c:	beq	1b920 <__assert_fail@plt+0x9918>
   1b7a0:	cmp	r0, #1
   1b7a4:	bne	1b908 <__assert_fail@plt+0x9900>
   1b7a8:	mov	r0, r5
   1b7ac:	bl	11c90 <fflush_unlocked@plt>
   1b7b0:	cmp	r0, #0
   1b7b4:	bne	1bc70 <__assert_fail@plt+0x9c68>
   1b7b8:	ldr	r3, [r6, #780]	; 0x30c
   1b7bc:	ldr	r2, [r6, #1484]	; 0x5cc
   1b7c0:	ldr	r8, [r3, r2, lsl #2]
   1b7c4:	mov	r0, r8
   1b7c8:	bl	11e10 <strlen@plt>
   1b7cc:	mov	r9, r0
   1b7d0:	add	r0, r0, #24
   1b7d4:	bic	r0, r0, #3
   1b7d8:	bl	261d8 <__assert_fail@plt+0x141d0>
   1b7dc:	mov	r1, r8
   1b7e0:	mov	r2, r9
   1b7e4:	add	r5, r0, #9
   1b7e8:	mov	r4, r0
   1b7ec:	mov	r0, r5
   1b7f0:	bl	11b7c <memcpy@plt>
   1b7f4:	ldr	ip, [pc, #1380]	; 1bd60 <__assert_fail@plt+0x9d58>
   1b7f8:	ldr	lr, [r6, #1484]	; 0x5cc
   1b7fc:	mov	r3, #0
   1b800:	ldm	ip!, {r0, r1, r2}
   1b804:	add	ip, lr, #1
   1b808:	ldr	lr, [r6, #772]	; 0x304
   1b80c:	str	ip, [r6, #1484]	; 0x5cc
   1b810:	cmp	ip, lr
   1b814:	add	ip, r5, r9
   1b818:	str	r0, [r5, r9]
   1b81c:	str	r1, [ip, #4]
   1b820:	str	r2, [ip, #8]
   1b824:	ldr	r1, [sp, #20]
   1b828:	str	r3, [r4]
   1b82c:	add	r2, sp, #68	; 0x44
   1b830:	mov	r0, #0
   1b834:	streq	r3, [r6, #1484]	; 0x5cc
   1b838:	bl	11d20 <pthread_sigmask@plt>
   1b83c:	mov	r1, #524288	; 0x80000
   1b840:	clz	r3, r0
   1b844:	mov	r0, r5
   1b848:	lsr	r3, r3, #5
   1b84c:	strb	r3, [sp, #64]	; 0x40
   1b850:	bl	251ac <__assert_fail@plt+0x131a4>
   1b854:	cmp	r0, #0
   1b858:	blt	1b92c <__assert_fail@plt+0x9924>
   1b85c:	ldr	r3, [pc, #1252]	; 1bd48 <__assert_fail@plt+0x9d40>
   1b860:	ldr	r2, [pc, #1248]	; 1bd48 <__assert_fail@plt+0x9d40>
   1b864:	mov	r7, r0
   1b868:	ldr	r3, [r3, #108]	; 0x6c
   1b86c:	str	r4, [r2, #108]	; 0x6c
   1b870:	ldr	r9, [sp, #24]
   1b874:	str	r4, [r3]
   1b878:	bl	11e34 <__errno_location@plt>
   1b87c:	ldrb	r3, [sp, #64]	; 0x40
   1b880:	cmp	r3, #0
   1b884:	ldr	r2, [r0]
   1b888:	mov	r8, r0
   1b88c:	str	r2, [sp, #24]
   1b890:	bne	1b990 <__assert_fail@plt+0x9988>
   1b894:	ldr	r2, [r6, #1152]	; 0x480
   1b898:	mov	r3, #0
   1b89c:	cmp	r2, r3
   1b8a0:	strb	r3, [r4, #8]
   1b8a4:	beq	1b6d0 <__assert_fail@plt+0x96c8>
   1b8a8:	mov	r1, #4
   1b8ac:	add	r0, sp, #56	; 0x38
   1b8b0:	bl	16fe8 <__assert_fail@plt+0x4fe0>
   1b8b4:	cmp	r0, #0
   1b8b8:	str	r0, [r4, #4]
   1b8bc:	bgt	1b698 <__assert_fail@plt+0x9690>
   1b8c0:	bne	1b6d0 <__assert_fail@plt+0x96c8>
   1b8c4:	ldr	r0, [sp, #60]	; 0x3c
   1b8c8:	bl	11ff0 <close@plt>
   1b8cc:	cmp	r7, #1
   1b8d0:	beq	1b8e0 <__assert_fail@plt+0x98d8>
   1b8d4:	mov	r0, r7
   1b8d8:	mov	r1, #1
   1b8dc:	bl	16538 <__assert_fail@plt+0x4530>
   1b8e0:	ldr	r0, [sp, #56]	; 0x38
   1b8e4:	cmp	r0, #0
   1b8e8:	bne	1bcf0 <__assert_fail@plt+0x9ce8>
   1b8ec:	ldr	r1, [r6, #1152]	; 0x480
   1b8f0:	mov	r2, #0
   1b8f4:	mov	r0, r1
   1b8f8:	bl	11b88 <execlp@plt>
   1b8fc:	ldr	r0, [r8]
   1b900:	ldr	r1, [pc, #1116]	; 1bd64 <__assert_fail@plt+0x9d5c>
   1b904:	bl	15ccc <__assert_fail@plt+0x3cc4>
   1b908:	mov	r0, r5
   1b90c:	bl	1d95c <__assert_fail@plt+0xb954>
   1b910:	cmp	r0, #0
   1b914:	beq	1b7b8 <__assert_fail@plt+0x97b0>
   1b918:	mov	r0, r4
   1b91c:	bl	12018 <__assert_fail@plt+0x10>
   1b920:	mov	r0, r5
   1b924:	bl	11f48 <clearerr_unlocked@plt>
   1b928:	b	1b7b8 <__assert_fail@plt+0x97b0>
   1b92c:	bl	11e34 <__errno_location@plt>
   1b930:	ldrb	r2, [sp, #64]	; 0x40
   1b934:	cmp	r2, #0
   1b938:	ldr	r5, [r0]
   1b93c:	beq	1b95c <__assert_fail@plt+0x9954>
   1b940:	str	r0, [sp, #28]
   1b944:	mov	r2, #0
   1b948:	add	r1, sp, #68	; 0x44
   1b94c:	mov	r0, #2
   1b950:	bl	11d20 <pthread_sigmask@plt>
   1b954:	ldr	r3, [sp, #28]
   1b958:	str	r5, [r3]
   1b95c:	subs	r3, r5, #24
   1b960:	movne	r3, #1
   1b964:	cmp	sl, #2
   1b968:	orrls	r3, r3, #1
   1b96c:	cmp	r3, #0
   1b970:	ldr	r3, [sp, #16]
   1b974:	sub	r7, r7, #4
   1b978:	sub	r3, r3, #8
   1b97c:	str	r3, [sp, #16]
   1b980:	bne	1bc18 <__assert_fail@plt+0x9c10>
   1b984:	mov	r0, r4
   1b988:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   1b98c:	b	1b780 <__assert_fail@plt+0x9778>
   1b990:	add	r1, sp, #68	; 0x44
   1b994:	mov	r2, #0
   1b998:	mov	r0, #2
   1b99c:	bl	11d20 <pthread_sigmask@plt>
   1b9a0:	ldr	r3, [sp, #24]
   1b9a4:	str	r3, [r8]
   1b9a8:	b	1b894 <__assert_fail@plt+0x988c>
   1b9ac:	str	r0, [sp]
   1b9b0:	mov	r1, r0
   1b9b4:	ldr	r3, [pc, #940]	; 1bd68 <__assert_fail@plt+0x9d60>
   1b9b8:	ldr	r2, [pc, #940]	; 1bd6c <__assert_fail@plt+0x9d64>
   1b9bc:	mov	r0, #47	; 0x2f
   1b9c0:	bl	1e988 <__assert_fail@plt+0xc980>
   1b9c4:	cmp	r0, #0
   1b9c8:	str	r0, [r6, #1156]	; 0x484
   1b9cc:	bne	1b6b8 <__assert_fail@plt+0x96b0>
   1b9d0:	bl	26820 <__assert_fail@plt+0x14818>
   1b9d4:	ldr	r0, [sp, #32]
   1b9d8:	bl	16550 <__assert_fail@plt+0x4548>
   1b9dc:	subs	r4, r0, #0
   1b9e0:	bne	1bb90 <__assert_fail@plt+0x9b88>
   1b9e4:	bl	11e34 <__errno_location@plt>
   1b9e8:	ldr	r3, [sp, #12]
   1b9ec:	cmp	r3, #2
   1b9f0:	movhi	r3, #0
   1b9f4:	movls	r3, #1
   1b9f8:	ldr	r2, [r0]
   1b9fc:	cmp	r2, #24
   1ba00:	orrne	r3, r3, #1
   1ba04:	cmp	r3, #0
   1ba08:	beq	1b764 <__assert_fail@plt+0x975c>
   1ba0c:	ldr	r1, [pc, #860]	; 1bd70 <__assert_fail@plt+0x9d68>
   1ba10:	mov	r0, r4
   1ba14:	mov	r2, #5
   1ba18:	bl	11c0c <dcgettext@plt>
   1ba1c:	ldr	r1, [sp, #32]
   1ba20:	bl	15c10 <__assert_fail@plt+0x3c08>
   1ba24:	ldr	r2, [sp, #20]
   1ba28:	mov	r1, #1
   1ba2c:	mov	r0, #3
   1ba30:	bl	11ca8 <__fxstat64@plt>
   1ba34:	cmp	r0, #0
   1ba38:	mvneq	r3, #0
   1ba3c:	streq	r3, [r7, #1044]	; 0x414
   1ba40:	beq	1b4d0 <__assert_fail@plt+0x94c8>
   1ba44:	bl	11e34 <__errno_location@plt>
   1ba48:	ldr	r3, [r0]
   1ba4c:	str	r3, [r7, #1044]	; 0x414
   1ba50:	b	1b4c8 <__assert_fail@plt+0x94c0>
   1ba54:	mov	r1, #0
   1ba58:	mov	r7, r1
   1ba5c:	mov	r5, r1
   1ba60:	mov	fp, r3
   1ba64:	mov	r0, r1
   1ba68:	b	1b3e0 <__assert_fail@plt+0x93d8>
   1ba6c:	cmp	r3, #1
   1ba70:	beq	1bc4c <__assert_fail@plt+0x9c44>
   1ba74:	mov	r1, #0
   1ba78:	add	r0, r6, #9
   1ba7c:	bl	11d5c <open64@plt>
   1ba80:	subs	r3, r0, #0
   1ba84:	str	r3, [sp, #24]
   1ba88:	blt	1bb0c <__assert_fail@plt+0x9b04>
   1ba8c:	mov	r1, #9
   1ba90:	add	r0, sp, #48	; 0x30
   1ba94:	bl	16fe8 <__assert_fail@plt+0x4fe0>
   1ba98:	cmn	r0, #1
   1ba9c:	beq	1bb60 <__assert_fail@plt+0x9b58>
   1baa0:	cmp	r0, #0
   1baa4:	bne	1bbbc <__assert_fail@plt+0x9bb4>
   1baa8:	str	r0, [sp, #12]
   1baac:	ldr	r0, [sp, #48]	; 0x30
   1bab0:	bl	11ff0 <close@plt>
   1bab4:	ldr	r3, [sp, #24]
   1bab8:	cmp	r3, #0
   1babc:	ldr	r3, [sp, #12]
   1bac0:	bne	1bb44 <__assert_fail@plt+0x9b3c>
   1bac4:	ldr	r4, [sp, #52]	; 0x34
   1bac8:	cmp	r4, #1
   1bacc:	beq	1bae4 <__assert_fail@plt+0x9adc>
   1bad0:	mov	r1, #1
   1bad4:	mov	r0, r4
   1bad8:	bl	11c3c <dup2@plt>
   1badc:	mov	r0, r4
   1bae0:	bl	11ff0 <close@plt>
   1bae4:	ldr	r1, [pc, #608]	; 1bd4c <__assert_fail@plt+0x9d44>
   1bae8:	mov	r3, #0
   1baec:	ldr	r2, [pc, #640]	; 1bd74 <__assert_fail@plt+0x9d6c>
   1baf0:	ldr	r1, [r1, #1152]	; 0x480
   1baf4:	mov	r0, r1
   1baf8:	bl	11b88 <execlp@plt>
   1bafc:	bl	11e34 <__errno_location@plt>
   1bb00:	ldr	r1, [pc, #624]	; 1bd78 <__assert_fail@plt+0x9d70>
   1bb04:	ldr	r0, [r0]
   1bb08:	bl	15ccc <__assert_fail@plt+0x3cc4>
   1bb0c:	ldr	r2, [sp, #16]
   1bb10:	mov	r3, #0
   1bb14:	str	r3, [r2]
   1bb18:	ldr	r1, [pc, #592]	; 1bd70 <__assert_fail@plt+0x9d68>
   1bb1c:	mov	r2, #5
   1bb20:	mov	r0, #0
   1bb24:	bl	11c0c <dcgettext@plt>
   1bb28:	ldr	r1, [r8]
   1bb2c:	bl	15c10 <__assert_fail@plt+0x3c08>
   1bb30:	ldr	r1, [pc, #580]	; 1bd7c <__assert_fail@plt+0x9d74>
   1bb34:	mov	r2, #5
   1bb38:	bl	11c0c <dcgettext@plt>
   1bb3c:	mov	r1, r5
   1bb40:	bl	15c10 <__assert_fail@plt+0x3c08>
   1bb44:	ldr	r4, [sp, #24]
   1bb48:	mov	r1, r3
   1bb4c:	mov	r0, r4
   1bb50:	bl	11c3c <dup2@plt>
   1bb54:	mov	r0, r4
   1bb58:	bl	11ff0 <close@plt>
   1bb5c:	b	1bac4 <__assert_fail@plt+0x9abc>
   1bb60:	bl	11e34 <__errno_location@plt>
   1bb64:	ldr	r4, [r0]
   1bb68:	mov	r5, r0
   1bb6c:	cmp	r4, #24
   1bb70:	bne	1bc88 <__assert_fail@plt+0x9c80>
   1bb74:	ldr	r0, [sp, #24]
   1bb78:	bl	11ff0 <close@plt>
   1bb7c:	ldr	r2, [sp, #16]
   1bb80:	mov	r3, #0
   1bb84:	str	r4, [r5]
   1bb88:	str	r3, [r2]
   1bb8c:	b	1bb18 <__assert_fail@plt+0x9b10>
   1bb90:	ldr	r3, [sp, #32]
   1bb94:	ldr	ip, [sp, #40]	; 0x28
   1bb98:	str	r3, [sp]
   1bb9c:	ldr	r2, [sp, #12]
   1bba0:	mov	r3, r4
   1bba4:	mov	r1, r9
   1bba8:	mov	r0, fp
   1bbac:	str	ip, [sp, #4]
   1bbb0:	bl	1a868 <__assert_fail@plt+0x8860>
   1bbb4:	add	sp, sp, #204	; 0xcc
   1bbb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bbbc:	ldr	r1, [r7, #1156]	; 0x484
   1bbc0:	str	r0, [r6, #4]
   1bbc4:	cmp	r1, #0
   1bbc8:	beq	1bd24 <__assert_fail@plt+0x9d1c>
   1bbcc:	mov	r3, #1
   1bbd0:	strb	r3, [r6, #8]
   1bbd4:	mov	r1, r6
   1bbd8:	ldr	r0, [r7, #1156]	; 0x484
   1bbdc:	bl	1f2f0 <__assert_fail@plt+0xd2e8>
   1bbe0:	cmp	r0, #0
   1bbe4:	beq	1b9d0 <__assert_fail@plt+0x99c8>
   1bbe8:	ldr	r0, [sp, #24]
   1bbec:	bl	11ff0 <close@plt>
   1bbf0:	ldr	r0, [sp, #52]	; 0x34
   1bbf4:	bl	11ff0 <close@plt>
   1bbf8:	ldr	r1, [pc, #344]	; 1bd58 <__assert_fail@plt+0x9d50>
   1bbfc:	ldr	r0, [sp, #48]	; 0x30
   1bc00:	bl	11ab0 <fdopen@plt>
   1bc04:	cmp	r0, #0
   1bc08:	beq	1bcfc <__assert_fail@plt+0x9cf4>
   1bc0c:	ldr	r3, [sp, #16]
   1bc10:	str	r0, [r3]
   1bc14:	b	1b588 <__assert_fail@plt+0x9580>
   1bc18:	mov	r2, #5
   1bc1c:	ldr	r1, [pc, #348]	; 1bd80 <__assert_fail@plt+0x9d78>
   1bc20:	mov	r0, #0
   1bc24:	bl	11c0c <dcgettext@plt>
   1bc28:	mov	r1, r8
   1bc2c:	mov	r4, r0
   1bc30:	mov	r0, #4
   1bc34:	bl	22b84 <__assert_fail@plt+0x10b7c>
   1bc38:	mov	r2, r4
   1bc3c:	mov	r1, r5
   1bc40:	mov	r3, r0
   1bc44:	mov	r0, #2
   1bc48:	bl	11d50 <error@plt>
   1bc4c:	ldr	r0, [r6, #4]
   1bc50:	bl	16d8c <__assert_fail@plt+0x4d84>
   1bc54:	b	1ba74 <__assert_fail@plt+0x9a6c>
   1bc58:	ldr	r1, [pc, #272]	; 1bd70 <__assert_fail@plt+0x9d68>
   1bc5c:	mov	r2, #5
   1bc60:	mov	r0, #0
   1bc64:	bl	11c0c <dcgettext@plt>
   1bc68:	ldr	r1, [r8, r4, lsl #3]
   1bc6c:	bl	15c10 <__assert_fail@plt+0x3c08>
   1bc70:	ldr	r1, [pc, #268]	; 1bd84 <__assert_fail@plt+0x9d7c>
   1bc74:	mov	r2, #5
   1bc78:	mov	r0, #0
   1bc7c:	bl	11c0c <dcgettext@plt>
   1bc80:	mov	r1, r4
   1bc84:	bl	15c10 <__assert_fail@plt+0x3c08>
   1bc88:	mov	r2, #5
   1bc8c:	ldr	r1, [pc, #244]	; 1bd88 <__assert_fail@plt+0x9d80>
   1bc90:	mov	r0, #0
   1bc94:	bl	11c0c <dcgettext@plt>
   1bc98:	ldr	r3, [pc, #172]	; 1bd4c <__assert_fail@plt+0x9d44>
   1bc9c:	ldr	r1, [r3, #1152]	; 0x480
   1bca0:	mov	r5, r0
   1bca4:	mov	r0, #4
   1bca8:	bl	22b84 <__assert_fail@plt+0x10b7c>
   1bcac:	mov	r2, r5
   1bcb0:	mov	r1, r4
   1bcb4:	mov	r3, r0
   1bcb8:	mov	r0, #2
   1bcbc:	bl	11d50 <error@plt>
   1bcc0:	ldr	r1, [pc, #168]	; 1bd70 <__assert_fail@plt+0x9d68>
   1bcc4:	mov	r2, #5
   1bcc8:	mov	r0, #0
   1bccc:	bl	11c0c <dcgettext@plt>
   1bcd0:	ldr	r1, [fp, sl, lsl #3]
   1bcd4:	bl	15c10 <__assert_fail@plt+0x3c08>
   1bcd8:	ldr	r1, [pc, #144]	; 1bd70 <__assert_fail@plt+0x9d68>
   1bcdc:	mov	r2, #5
   1bce0:	mov	r0, #0
   1bce4:	bl	11c0c <dcgettext@plt>
   1bce8:	ldr	r1, [r8, sl, lsl #3]
   1bcec:	bl	15c10 <__assert_fail@plt+0x3c08>
   1bcf0:	mov	r1, #0
   1bcf4:	bl	16538 <__assert_fail@plt+0x4530>
   1bcf8:	b	1b8ec <__assert_fail@plt+0x98e4>
   1bcfc:	mov	r6, r0
   1bd00:	bl	11e34 <__errno_location@plt>
   1bd04:	mov	r4, r0
   1bd08:	ldr	r0, [sp, #48]	; 0x30
   1bd0c:	ldr	r5, [r4]
   1bd10:	bl	11ff0 <close@plt>
   1bd14:	ldr	r3, [sp, #16]
   1bd18:	str	r5, [r4]
   1bd1c:	str	r6, [r3]
   1bd20:	b	1bb18 <__assert_fail@plt+0x9b10>
   1bd24:	str	r1, [sp]
   1bd28:	ldr	r3, [pc, #56]	; 1bd68 <__assert_fail@plt+0x9d60>
   1bd2c:	ldr	r2, [pc, #56]	; 1bd6c <__assert_fail@plt+0x9d64>
   1bd30:	mov	r0, #47	; 0x2f
   1bd34:	bl	1e988 <__assert_fail@plt+0xc980>
   1bd38:	cmp	r0, #0
   1bd3c:	str	r0, [r7, #1156]	; 0x484
   1bd40:	bne	1bbcc <__assert_fail@plt+0x9bc4>
   1bd44:	b	1b9d0 <__assert_fail@plt+0x99c8>
   1bd48:	andeq	ip, r3, r8, ror #3
   1bd4c:	andeq	ip, r3, r8, ror #5
   1bd50:	andeq	r9, r2, r0, ror r4
   1bd54:	andeq	ip, r3, r8, lsl #14
   1bd58:	andeq	r9, r2, ip, ror #10
   1bd5c:			; <UNDEFINED> instruction: 0x000295b8
   1bd60:	ldrdeq	r9, [r2], -ip
   1bd64:	muleq	r2, r4, r5
   1bd68:	andeq	r5, r1, r4, ror r4
   1bd6c:	andeq	r5, r1, r0, ror #8
   1bd70:			; <UNDEFINED> instruction: 0x000293b8
   1bd74:	andeq	r9, r2, ip, lsr r5
   1bd78:	andeq	r9, r2, r0, asr #10
   1bd7c:			; <UNDEFINED> instruction: 0x000295bc
   1bd80:	andeq	r9, r2, r0, ror r5
   1bd84:	ldrdeq	r9, [r2], -r4
   1bd88:	andeq	r9, r2, r8, lsl r5
   1bd8c:	subs	r5, r0, #0
   1bd90:	push	{r7, lr}
   1bd94:	sub	sp, sp, #56	; 0x38
   1bd98:	beq	1bdd4 <__assert_fail@plt+0x9dcc>
   1bd9c:	ldr	r3, [pc, #1056]	; 1c1c4 <__assert_fail@plt+0xa1bc>
   1bda0:	mov	r2, #5
   1bda4:	ldr	r1, [pc, #1052]	; 1c1c8 <__assert_fail@plt+0xa1c0>
   1bda8:	mov	r0, #0
   1bdac:	ldr	r4, [r3]
   1bdb0:	bl	11c0c <dcgettext@plt>
   1bdb4:	ldr	r3, [pc, #1040]	; 1c1cc <__assert_fail@plt+0xa1c4>
   1bdb8:	mov	r1, #1
   1bdbc:	ldr	r3, [r3]
   1bdc0:	mov	r2, r0
   1bdc4:	mov	r0, r4
   1bdc8:	bl	11e94 <__fprintf_chk@plt>
   1bdcc:	mov	r0, r5
   1bdd0:	bl	11df8 <exit@plt>
   1bdd4:	mov	r2, #5
   1bdd8:	ldr	r1, [pc, #1008]	; 1c1d0 <__assert_fail@plt+0xa1c8>
   1bddc:	bl	11c0c <dcgettext@plt>
   1bde0:	ldr	r3, [pc, #996]	; 1c1cc <__assert_fail@plt+0xa1c4>
   1bde4:	ldr	r6, [pc, #1000]	; 1c1d4 <__assert_fail@plt+0xa1cc>
   1bde8:	ldr	r4, [pc, #1000]	; 1c1d8 <__assert_fail@plt+0xa1d0>
   1bdec:	ldr	r3, [r3]
   1bdf0:	mov	r2, r3
   1bdf4:	mov	r1, r0
   1bdf8:	mov	r0, #1
   1bdfc:	bl	11e70 <__printf_chk@plt>
   1be00:	mov	r2, #5
   1be04:	ldr	r1, [pc, #976]	; 1c1dc <__assert_fail@plt+0xa1d4>
   1be08:	mov	r0, r5
   1be0c:	bl	11c0c <dcgettext@plt>
   1be10:	ldr	r1, [r6]
   1be14:	bl	11ac8 <fputs_unlocked@plt>
   1be18:	mov	r2, #5
   1be1c:	ldr	r1, [pc, #956]	; 1c1e0 <__assert_fail@plt+0xa1d8>
   1be20:	mov	r0, r5
   1be24:	bl	11c0c <dcgettext@plt>
   1be28:	ldr	r1, [r6]
   1be2c:	bl	11ac8 <fputs_unlocked@plt>
   1be30:	mov	r2, #5
   1be34:	ldr	r1, [pc, #936]	; 1c1e4 <__assert_fail@plt+0xa1dc>
   1be38:	mov	r0, r5
   1be3c:	bl	11c0c <dcgettext@plt>
   1be40:	ldr	r1, [r6]
   1be44:	bl	11ac8 <fputs_unlocked@plt>
   1be48:	mov	r2, #5
   1be4c:	ldr	r1, [pc, #916]	; 1c1e8 <__assert_fail@plt+0xa1e0>
   1be50:	mov	r0, r5
   1be54:	bl	11c0c <dcgettext@plt>
   1be58:	ldr	r1, [r6]
   1be5c:	bl	11ac8 <fputs_unlocked@plt>
   1be60:	mov	r2, #5
   1be64:	ldr	r1, [pc, #896]	; 1c1ec <__assert_fail@plt+0xa1e4>
   1be68:	mov	r0, r5
   1be6c:	bl	11c0c <dcgettext@plt>
   1be70:	ldr	r1, [r6]
   1be74:	bl	11ac8 <fputs_unlocked@plt>
   1be78:	mov	r2, #5
   1be7c:	ldr	r1, [pc, #876]	; 1c1f0 <__assert_fail@plt+0xa1e8>
   1be80:	mov	r0, r5
   1be84:	bl	11c0c <dcgettext@plt>
   1be88:	ldr	r1, [r6]
   1be8c:	bl	11ac8 <fputs_unlocked@plt>
   1be90:	mov	r2, #5
   1be94:	ldr	r1, [pc, #856]	; 1c1f4 <__assert_fail@plt+0xa1ec>
   1be98:	mov	r0, r5
   1be9c:	bl	11c0c <dcgettext@plt>
   1bea0:	ldr	r1, [r6]
   1bea4:	bl	11ac8 <fputs_unlocked@plt>
   1bea8:	mov	r2, #5
   1beac:	ldr	r1, [pc, #836]	; 1c1f8 <__assert_fail@plt+0xa1f0>
   1beb0:	mov	r0, r5
   1beb4:	bl	11c0c <dcgettext@plt>
   1beb8:	ldr	r1, [r6]
   1bebc:	bl	11ac8 <fputs_unlocked@plt>
   1bec0:	mov	r2, #5
   1bec4:	ldr	r1, [pc, #816]	; 1c1fc <__assert_fail@plt+0xa1f4>
   1bec8:	mov	r0, r5
   1becc:	bl	11c0c <dcgettext@plt>
   1bed0:	ldr	r1, [r6]
   1bed4:	bl	11ac8 <fputs_unlocked@plt>
   1bed8:	mov	r2, #5
   1bedc:	ldr	r1, [pc, #796]	; 1c200 <__assert_fail@plt+0xa1f8>
   1bee0:	mov	r0, r5
   1bee4:	bl	11c0c <dcgettext@plt>
   1bee8:	ldr	r1, [r6]
   1beec:	bl	11ac8 <fputs_unlocked@plt>
   1bef0:	mov	r2, #5
   1bef4:	ldr	r1, [pc, #776]	; 1c204 <__assert_fail@plt+0xa1fc>
   1bef8:	mov	r0, r5
   1befc:	bl	11c0c <dcgettext@plt>
   1bf00:	ldr	r1, [r6]
   1bf04:	bl	11ac8 <fputs_unlocked@plt>
   1bf08:	mov	r2, #5
   1bf0c:	ldr	r1, [pc, #756]	; 1c208 <__assert_fail@plt+0xa200>
   1bf10:	mov	r0, r5
   1bf14:	bl	11c0c <dcgettext@plt>
   1bf18:	ldr	r1, [r6]
   1bf1c:	bl	11ac8 <fputs_unlocked@plt>
   1bf20:	mov	r2, #5
   1bf24:	ldr	r1, [pc, #736]	; 1c20c <__assert_fail@plt+0xa204>
   1bf28:	mov	r0, r5
   1bf2c:	bl	11c0c <dcgettext@plt>
   1bf30:	ldr	r1, [r6]
   1bf34:	bl	11ac8 <fputs_unlocked@plt>
   1bf38:	mov	r2, #5
   1bf3c:	ldr	r1, [pc, #716]	; 1c210 <__assert_fail@plt+0xa208>
   1bf40:	mov	r0, r5
   1bf44:	bl	11c0c <dcgettext@plt>
   1bf48:	ldr	r1, [r6]
   1bf4c:	bl	11ac8 <fputs_unlocked@plt>
   1bf50:	mov	r2, #5
   1bf54:	ldr	r1, [pc, #696]	; 1c214 <__assert_fail@plt+0xa20c>
   1bf58:	mov	r0, r5
   1bf5c:	bl	11c0c <dcgettext@plt>
   1bf60:	ldr	r1, [r6]
   1bf64:	bl	11ac8 <fputs_unlocked@plt>
   1bf68:	mov	r2, #5
   1bf6c:	ldr	r1, [pc, #676]	; 1c218 <__assert_fail@plt+0xa210>
   1bf70:	mov	r0, r5
   1bf74:	bl	11c0c <dcgettext@plt>
   1bf78:	ldr	r2, [pc, #668]	; 1c21c <__assert_fail@plt+0xa214>
   1bf7c:	mov	r1, r0
   1bf80:	mov	r0, #1
   1bf84:	bl	11e70 <__printf_chk@plt>
   1bf88:	mov	r2, #5
   1bf8c:	ldr	r1, [pc, #652]	; 1c220 <__assert_fail@plt+0xa218>
   1bf90:	mov	r0, r5
   1bf94:	bl	11c0c <dcgettext@plt>
   1bf98:	ldr	r1, [r6]
   1bf9c:	bl	11ac8 <fputs_unlocked@plt>
   1bfa0:	mov	r2, #5
   1bfa4:	ldr	r1, [pc, #632]	; 1c224 <__assert_fail@plt+0xa21c>
   1bfa8:	mov	r0, r5
   1bfac:	bl	11c0c <dcgettext@plt>
   1bfb0:	ldr	r1, [r6]
   1bfb4:	bl	11ac8 <fputs_unlocked@plt>
   1bfb8:	mov	r2, #5
   1bfbc:	ldr	r1, [pc, #612]	; 1c228 <__assert_fail@plt+0xa220>
   1bfc0:	mov	r0, r5
   1bfc4:	bl	11c0c <dcgettext@plt>
   1bfc8:	ldr	r1, [r6]
   1bfcc:	bl	11ac8 <fputs_unlocked@plt>
   1bfd0:	mov	r2, #5
   1bfd4:	ldr	r1, [pc, #592]	; 1c22c <__assert_fail@plt+0xa224>
   1bfd8:	mov	r0, r5
   1bfdc:	bl	11c0c <dcgettext@plt>
   1bfe0:	ldr	r1, [r6]
   1bfe4:	bl	11ac8 <fputs_unlocked@plt>
   1bfe8:	mov	r2, #5
   1bfec:	ldr	r1, [pc, #572]	; 1c230 <__assert_fail@plt+0xa228>
   1bff0:	mov	r0, r5
   1bff4:	bl	11c0c <dcgettext@plt>
   1bff8:	ldr	r1, [r6]
   1bffc:	bl	11ac8 <fputs_unlocked@plt>
   1c000:	ldm	r4!, {r0, r1, r2, r3}
   1c004:	mov	lr, sp
   1c008:	stmia	lr!, {r0, r1, r2, r3}
   1c00c:	ldm	r4!, {r0, r1, r2, r3}
   1c010:	ldr	ip, [sp]
   1c014:	stmia	lr!, {r0, r1, r2, r3}
   1c018:	cmp	ip, #0
   1c01c:	ldm	r4!, {r0, r1, r2, r3}
   1c020:	stmia	lr!, {r0, r1, r2, r3}
   1c024:	ldm	r4, {r0, r1}
   1c028:	moveq	r4, sp
   1c02c:	stm	lr, {r0, r1}
   1c030:	beq	1c060 <__assert_fail@plt+0xa058>
   1c034:	ldr	r7, [pc, #504]	; 1c234 <__assert_fail@plt+0xa22c>
   1c038:	mov	r4, sp
   1c03c:	b	1c04c <__assert_fail@plt+0xa044>
   1c040:	ldr	ip, [r4, #8]!
   1c044:	cmp	ip, #0
   1c048:	beq	1c060 <__assert_fail@plt+0xa058>
   1c04c:	mov	r1, ip
   1c050:	mov	r0, r7
   1c054:	bl	11ae0 <strcmp@plt>
   1c058:	cmp	r0, #0
   1c05c:	bne	1c040 <__assert_fail@plt+0xa038>
   1c060:	ldr	r4, [r4, #4]
   1c064:	mov	r2, #5
   1c068:	cmp	r4, #0
   1c06c:	ldr	r1, [pc, #452]	; 1c238 <__assert_fail@plt+0xa230>
   1c070:	beq	1c118 <__assert_fail@plt+0xa110>
   1c074:	mov	r0, #0
   1c078:	bl	11c0c <dcgettext@plt>
   1c07c:	ldr	r3, [pc, #440]	; 1c23c <__assert_fail@plt+0xa234>
   1c080:	ldr	r2, [pc, #440]	; 1c240 <__assert_fail@plt+0xa238>
   1c084:	mov	r1, r0
   1c088:	mov	r0, #1
   1c08c:	bl	11e70 <__printf_chk@plt>
   1c090:	mov	r1, #0
   1c094:	mov	r0, #5
   1c098:	bl	11ee8 <setlocale@plt>
   1c09c:	cmp	r0, #0
   1c0a0:	ldreq	r7, [pc, #396]	; 1c234 <__assert_fail@plt+0xa22c>
   1c0a4:	beq	1c0c0 <__assert_fail@plt+0xa0b8>
   1c0a8:	mov	r2, #3
   1c0ac:	ldr	r1, [pc, #400]	; 1c244 <__assert_fail@plt+0xa23c>
   1c0b0:	bl	11fcc <strncmp@plt>
   1c0b4:	ldr	r7, [pc, #376]	; 1c234 <__assert_fail@plt+0xa22c>
   1c0b8:	cmp	r0, #0
   1c0bc:	bne	1c1a8 <__assert_fail@plt+0xa1a0>
   1c0c0:	mov	r2, #5
   1c0c4:	ldr	r1, [pc, #380]	; 1c248 <__assert_fail@plt+0xa240>
   1c0c8:	mov	r0, #0
   1c0cc:	bl	11c0c <dcgettext@plt>
   1c0d0:	ldr	r3, [pc, #348]	; 1c234 <__assert_fail@plt+0xa22c>
   1c0d4:	ldr	r2, [pc, #352]	; 1c23c <__assert_fail@plt+0xa234>
   1c0d8:	mov	r1, r0
   1c0dc:	mov	r0, #1
   1c0e0:	bl	11e70 <__printf_chk@plt>
   1c0e4:	mov	r2, #5
   1c0e8:	ldr	r1, [pc, #348]	; 1c24c <__assert_fail@plt+0xa244>
   1c0ec:	mov	r0, #0
   1c0f0:	bl	11c0c <dcgettext@plt>
   1c0f4:	ldr	r2, [pc, #340]	; 1c250 <__assert_fail@plt+0xa248>
   1c0f8:	cmp	r4, r7
   1c0fc:	ldr	r3, [pc, #336]	; 1c254 <__assert_fail@plt+0xa24c>
   1c100:	movne	r3, r2
   1c104:	mov	r1, r0
   1c108:	mov	r2, r4
   1c10c:	mov	r0, #1
   1c110:	bl	11e70 <__printf_chk@plt>
   1c114:	b	1bdcc <__assert_fail@plt+0x9dc4>
   1c118:	mov	r0, r4
   1c11c:	bl	11c0c <dcgettext@plt>
   1c120:	ldr	r3, [pc, #276]	; 1c23c <__assert_fail@plt+0xa234>
   1c124:	ldr	r2, [pc, #276]	; 1c240 <__assert_fail@plt+0xa238>
   1c128:	mov	r1, r0
   1c12c:	mov	r0, #1
   1c130:	bl	11e70 <__printf_chk@plt>
   1c134:	mov	r1, r4
   1c138:	mov	r0, #5
   1c13c:	bl	11ee8 <setlocale@plt>
   1c140:	cmp	r0, #0
   1c144:	beq	1c15c <__assert_fail@plt+0xa154>
   1c148:	mov	r2, #3
   1c14c:	ldr	r1, [pc, #240]	; 1c244 <__assert_fail@plt+0xa23c>
   1c150:	bl	11fcc <strncmp@plt>
   1c154:	cmp	r0, #0
   1c158:	bne	1c1a0 <__assert_fail@plt+0xa198>
   1c15c:	mov	r2, #5
   1c160:	ldr	r1, [pc, #224]	; 1c248 <__assert_fail@plt+0xa240>
   1c164:	mov	r0, #0
   1c168:	bl	11c0c <dcgettext@plt>
   1c16c:	ldr	r3, [pc, #192]	; 1c234 <__assert_fail@plt+0xa22c>
   1c170:	ldr	r2, [pc, #196]	; 1c23c <__assert_fail@plt+0xa234>
   1c174:	mov	r4, r3
   1c178:	mov	r1, r0
   1c17c:	mov	r0, #1
   1c180:	bl	11e70 <__printf_chk@plt>
   1c184:	ldr	r1, [pc, #192]	; 1c24c <__assert_fail@plt+0xa244>
   1c188:	mov	r2, #5
   1c18c:	mov	r0, #0
   1c190:	bl	11c0c <dcgettext@plt>
   1c194:	ldr	r3, [pc, #184]	; 1c254 <__assert_fail@plt+0xa24c>
   1c198:	mov	r1, r0
   1c19c:	b	1c108 <__assert_fail@plt+0xa100>
   1c1a0:	ldr	r7, [pc, #140]	; 1c234 <__assert_fail@plt+0xa22c>
   1c1a4:	mov	r4, r7
   1c1a8:	mov	r2, #5
   1c1ac:	ldr	r1, [pc, #164]	; 1c258 <__assert_fail@plt+0xa250>
   1c1b0:	mov	r0, #0
   1c1b4:	bl	11c0c <dcgettext@plt>
   1c1b8:	ldr	r1, [r6]
   1c1bc:	bl	11ac8 <fputs_unlocked@plt>
   1c1c0:	b	1c0c0 <__assert_fail@plt+0xa0b8>
   1c1c4:	ldrdeq	ip, [r3], -r0
   1c1c8:	andeq	r9, r2, r8, ror #11
   1c1cc:	ldrdeq	ip, [r3], -r0
   1c1d0:	andeq	r9, r2, r0, lsl r6
   1c1d4:	ldrdeq	ip, [r3], -ip	; <UNPREDICTABLE>
   1c1d8:	andeq	r9, r2, ip, rrx
   1c1dc:	andeq	r9, r2, r8, asr r6
   1c1e0:	muleq	r2, r8, r6
   1c1e4:	ldrdeq	r9, [r2], -r0
   1c1e8:	andeq	r9, r2, ip, lsl r7
   1c1ec:	andeq	r9, r2, r0, lsr r7
   1c1f0:	strdeq	r9, [r2], -ip
   1c1f4:	ldrdeq	r9, [r2], -r0
   1c1f8:	andeq	r9, r2, ip, lsl r9
   1c1fc:	andeq	r9, r2, r0, lsr sl
   1c200:	andeq	r9, r2, r8, asr #22
   1c204:	andeq	r9, r2, ip, asr fp
   1c208:	ldrdeq	r9, [r2], -r4
   1c20c:	andeq	r9, r2, ip, ror #25
   1c210:	andeq	r9, r2, r8, asr #28
   1c214:	ldrdeq	r9, [r2], -r8
   1c218:			; <UNDEFINED> instruction: 0x00029fb0
   1c21c:	andeq	sl, r2, r8, ror r1
   1c220:	andeq	sl, r2, r0, lsl #3
   1c224:	andeq	sl, r2, r0, asr #3
   1c228:	strdeq	sl, [r2], -r0
   1c22c:	andeq	sl, r2, r8, lsr #4
   1c230:	andeq	sl, r2, r4, lsl #9
   1c234:	andeq	sl, r2, r4, lsr #29
   1c238:	andeq	sl, r2, ip, ror #10
   1c23c:	andeq	sl, r2, r4, lsl #11
   1c240:	andeq	sl, r2, ip, lsr #11
   1c244:			; <UNDEFINED> instruction: 0x0002a5bc
   1c248:	andeq	sl, r2, r8, lsl #12
   1c24c:	andeq	sl, r2, r4, lsr #12
   1c250:	andeq	r9, r2, r8, asr fp
   1c254:	andeq	sl, r2, ip, ror sp
   1c258:	andeq	sl, r2, r0, asr #11
   1c25c:	mov	r0, #1
   1c260:	b	1bd8c <__assert_fail@plt+0x9d84>
   1c264:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c268:	mov	r4, r1
   1c26c:	sub	sp, sp, #12
   1c270:	mov	r5, r2
   1c274:	str	r2, [sp, #4]
   1c278:	mov	r7, r3
   1c27c:	mov	sl, r0
   1c280:	bl	11e10 <strlen@plt>
   1c284:	ldr	fp, [r4]
   1c288:	cmp	fp, #0
   1c28c:	beq	1c3a0 <__assert_fail@plt+0xa398>
   1c290:	cmp	r5, #0
   1c294:	mov	r8, r0
   1c298:	mov	r3, r5
   1c29c:	beq	1c348 <__assert_fail@plt+0xa340>
   1c2a0:	mov	r2, #0
   1c2a4:	mov	r5, r2
   1c2a8:	mov	r6, r3
   1c2ac:	mvn	r9, #0
   1c2b0:	str	r2, [sp]
   1c2b4:	mov	r2, r8
   1c2b8:	mov	r1, sl
   1c2bc:	mov	r0, fp
   1c2c0:	bl	11fcc <strncmp@plt>
   1c2c4:	cmp	r0, #0
   1c2c8:	mov	r0, fp
   1c2cc:	bne	1c30c <__assert_fail@plt+0xa304>
   1c2d0:	bl	11e10 <strlen@plt>
   1c2d4:	ldr	r3, [sp, #4]
   1c2d8:	mov	r2, r7
   1c2dc:	mov	r1, r6
   1c2e0:	cmp	r8, r0
   1c2e4:	mla	r0, r7, r9, r3
   1c2e8:	beq	1c338 <__assert_fail@plt+0xa330>
   1c2ec:	cmn	r9, #1
   1c2f0:	moveq	r9, r5
   1c2f4:	beq	1c30c <__assert_fail@plt+0xa304>
   1c2f8:	bl	11bf4 <memcmp@plt>
   1c2fc:	ldr	r3, [sp]
   1c300:	cmp	r0, #0
   1c304:	movne	r3, #1
   1c308:	str	r3, [sp]
   1c30c:	ldr	fp, [r4, #4]!
   1c310:	add	r5, r5, #1
   1c314:	cmp	fp, #0
   1c318:	add	r6, r6, r7
   1c31c:	bne	1c2b4 <__assert_fail@plt+0xa2ac>
   1c320:	ldr	r3, [sp]
   1c324:	cmp	r3, #0
   1c328:	mvnne	r9, #1
   1c32c:	mov	r0, r9
   1c330:	add	sp, sp, #12
   1c334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c338:	mov	r9, r5
   1c33c:	mov	r0, r9
   1c340:	add	sp, sp, #12
   1c344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c348:	mov	r6, r5
   1c34c:	mvn	r9, #0
   1c350:	mov	r2, r8
   1c354:	mov	r1, sl
   1c358:	mov	r0, fp
   1c35c:	bl	11fcc <strncmp@plt>
   1c360:	cmp	r0, #0
   1c364:	mov	r0, fp
   1c368:	bne	1c384 <__assert_fail@plt+0xa37c>
   1c36c:	bl	11e10 <strlen@plt>
   1c370:	cmp	r8, r0
   1c374:	beq	1c338 <__assert_fail@plt+0xa330>
   1c378:	cmn	r9, #1
   1c37c:	moveq	r9, r5
   1c380:	movne	r6, #1
   1c384:	ldr	fp, [r4, #4]!
   1c388:	add	r5, r5, #1
   1c38c:	cmp	fp, #0
   1c390:	bne	1c350 <__assert_fail@plt+0xa348>
   1c394:	str	r6, [sp]
   1c398:	mov	r3, r6
   1c39c:	b	1c324 <__assert_fail@plt+0xa31c>
   1c3a0:	mvn	r9, #0
   1c3a4:	b	1c32c <__assert_fail@plt+0xa324>
   1c3a8:	push	{r4, r5, r6, lr}
   1c3ac:	mov	r6, r0
   1c3b0:	ldr	r0, [r1]
   1c3b4:	cmp	r0, #0
   1c3b8:	beq	1c3f0 <__assert_fail@plt+0xa3e8>
   1c3bc:	mov	r4, r1
   1c3c0:	mov	r5, #0
   1c3c4:	b	1c3d8 <__assert_fail@plt+0xa3d0>
   1c3c8:	ldr	r0, [r4, #4]!
   1c3cc:	add	r5, r5, #1
   1c3d0:	cmp	r0, #0
   1c3d4:	beq	1c3f0 <__assert_fail@plt+0xa3e8>
   1c3d8:	mov	r1, r6
   1c3dc:	bl	11ae0 <strcmp@plt>
   1c3e0:	cmp	r0, #0
   1c3e4:	bne	1c3c8 <__assert_fail@plt+0xa3c0>
   1c3e8:	mov	r0, r5
   1c3ec:	pop	{r4, r5, r6, pc}
   1c3f0:	mvn	r0, #0
   1c3f4:	pop	{r4, r5, r6, pc}
   1c3f8:	cmn	r2, #1
   1c3fc:	push	{r4, r5, r6, lr}
   1c400:	mov	r2, #5
   1c404:	sub	sp, sp, #8
   1c408:	mov	r4, r1
   1c40c:	mov	r5, r0
   1c410:	ldreq	r1, [pc, #76]	; 1c464 <__assert_fail@plt+0xa45c>
   1c414:	ldrne	r1, [pc, #76]	; 1c468 <__assert_fail@plt+0xa460>
   1c418:	mov	r0, #0
   1c41c:	bl	11c0c <dcgettext@plt>
   1c420:	mov	r2, r4
   1c424:	mov	r1, #8
   1c428:	mov	r6, r0
   1c42c:	mov	r0, #0
   1c430:	bl	227a4 <__assert_fail@plt+0x1079c>
   1c434:	mov	r1, r5
   1c438:	mov	r4, r0
   1c43c:	mov	r0, #1
   1c440:	bl	24340 <__assert_fail@plt+0x12338>
   1c444:	mov	r1, #0
   1c448:	mov	r3, r4
   1c44c:	mov	r2, r6
   1c450:	str	r0, [sp]
   1c454:	mov	r0, r1
   1c458:	bl	11d50 <error@plt>
   1c45c:	add	sp, sp, #8
   1c460:	pop	{r4, r5, r6, pc}
   1c464:	ldrdeq	sl, [r2], -r8
   1c468:	strdeq	sl, [r2], -r4
   1c46c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c470:	mov	r6, r0
   1c474:	ldr	r9, [pc, #232]	; 1c564 <__assert_fail@plt+0xa55c>
   1c478:	mov	r4, r1
   1c47c:	mov	r7, r2
   1c480:	ldr	r1, [pc, #224]	; 1c568 <__assert_fail@plt+0xa560>
   1c484:	mov	r2, #5
   1c488:	mov	r0, #0
   1c48c:	bl	11c0c <dcgettext@plt>
   1c490:	ldr	r1, [r9]
   1c494:	bl	11ac8 <fputs_unlocked@plt>
   1c498:	ldr	fp, [r6]
   1c49c:	cmp	fp, #0
   1c4a0:	movne	r8, #0
   1c4a4:	movne	r5, r8
   1c4a8:	movne	sl, #1
   1c4ac:	bne	1c4ec <__assert_fail@plt+0xa4e4>
   1c4b0:	b	1c530 <__assert_fail@plt+0xa528>
   1c4b4:	mov	r0, fp
   1c4b8:	ldr	r8, [r9]
   1c4bc:	bl	244f4 <__assert_fail@plt+0x124ec>
   1c4c0:	ldr	r2, [pc, #164]	; 1c56c <__assert_fail@plt+0xa564>
   1c4c4:	mov	r1, sl
   1c4c8:	mov	r3, r0
   1c4cc:	mov	r0, r8
   1c4d0:	bl	11e94 <__fprintf_chk@plt>
   1c4d4:	mov	r8, r4
   1c4d8:	ldr	fp, [r6, #4]!
   1c4dc:	add	r5, r5, #1
   1c4e0:	cmp	fp, #0
   1c4e4:	add	r4, r4, r7
   1c4e8:	beq	1c530 <__assert_fail@plt+0xa528>
   1c4ec:	cmp	r5, #0
   1c4f0:	mov	r1, r4
   1c4f4:	mov	r2, r7
   1c4f8:	mov	r0, r8
   1c4fc:	beq	1c4b4 <__assert_fail@plt+0xa4ac>
   1c500:	bl	11bf4 <memcmp@plt>
   1c504:	cmp	r0, #0
   1c508:	bne	1c4b4 <__assert_fail@plt+0xa4ac>
   1c50c:	mov	r0, fp
   1c510:	ldr	fp, [r9]
   1c514:	bl	244f4 <__assert_fail@plt+0x124ec>
   1c518:	ldr	r2, [pc, #80]	; 1c570 <__assert_fail@plt+0xa568>
   1c51c:	mov	r1, sl
   1c520:	mov	r3, r0
   1c524:	mov	r0, fp
   1c528:	bl	11e94 <__fprintf_chk@plt>
   1c52c:	b	1c4d8 <__assert_fail@plt+0xa4d0>
   1c530:	ldr	r0, [r9]
   1c534:	ldr	r3, [r0, #20]
   1c538:	ldr	r2, [r0, #24]
   1c53c:	cmp	r3, r2
   1c540:	bcs	1c558 <__assert_fail@plt+0xa550>
   1c544:	add	r1, r3, #1
   1c548:	mov	r2, #10
   1c54c:	str	r1, [r0, #20]
   1c550:	strb	r2, [r3]
   1c554:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c558:	mov	r1, #10
   1c55c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c560:	b	11edc <__overflow@plt>
   1c564:	ldrdeq	ip, [r3], -r0
   1c568:	andeq	fp, r2, r4, lsl r0
   1c56c:	andeq	fp, r2, ip, lsr #32
   1c570:	andeq	fp, r2, r4, lsr r0
   1c574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c578:	sub	sp, sp, #36	; 0x24
   1c57c:	mov	r6, r1
   1c580:	ldrb	ip, [sp, #80]	; 0x50
   1c584:	str	r0, [sp, #28]
   1c588:	str	r2, [sp, #24]
   1c58c:	cmp	ip, #0
   1c590:	str	ip, [sp, #20]
   1c594:	str	r3, [sp, #12]
   1c598:	ldr	r7, [sp, #72]	; 0x48
   1c59c:	bne	1c654 <__assert_fail@plt+0xa64c>
   1c5a0:	ldr	r0, [r2]
   1c5a4:	cmp	r0, #0
   1c5a8:	movne	sl, ip
   1c5ac:	movne	r4, r2
   1c5b0:	bne	1c638 <__assert_fail@plt+0xa630>
   1c5b4:	mov	r2, #5
   1c5b8:	ldr	r1, [pc, #512]	; 1c7c0 <__assert_fail@plt+0xa7b8>
   1c5bc:	mov	r0, #0
   1c5c0:	bl	11c0c <dcgettext@plt>
   1c5c4:	mov	r4, r0
   1c5c8:	mov	r2, r6
   1c5cc:	mov	r1, #8
   1c5d0:	mov	r0, #0
   1c5d4:	bl	227a4 <__assert_fail@plt+0x1079c>
   1c5d8:	ldr	r1, [sp, #28]
   1c5dc:	mvn	sl, #0
   1c5e0:	mov	r5, r0
   1c5e4:	mov	r0, #1
   1c5e8:	bl	24340 <__assert_fail@plt+0x12338>
   1c5ec:	mov	r1, #0
   1c5f0:	mov	r3, r5
   1c5f4:	mov	r2, r4
   1c5f8:	str	r0, [sp]
   1c5fc:	mov	r0, r1
   1c600:	bl	11d50 <error@plt>
   1c604:	ldr	r0, [sp, #24]
   1c608:	mov	r2, r7
   1c60c:	ldr	r1, [sp, #12]
   1c610:	bl	1c46c <__assert_fail@plt+0xa464>
   1c614:	ldr	r3, [sp, #76]	; 0x4c
   1c618:	blx	r3
   1c61c:	mov	r0, sl
   1c620:	add	sp, sp, #36	; 0x24
   1c624:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c628:	ldr	r0, [r4, #4]!
   1c62c:	add	sl, sl, #1
   1c630:	cmp	r0, #0
   1c634:	beq	1c5b4 <__assert_fail@plt+0xa5ac>
   1c638:	mov	r1, r6
   1c63c:	bl	11ae0 <strcmp@plt>
   1c640:	cmp	r0, #0
   1c644:	bne	1c628 <__assert_fail@plt+0xa620>
   1c648:	mov	r0, sl
   1c64c:	add	sp, sp, #36	; 0x24
   1c650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c654:	mov	r0, r1
   1c658:	bl	11e10 <strlen@plt>
   1c65c:	ldr	r3, [sp, #24]
   1c660:	ldr	fp, [r3]
   1c664:	cmp	fp, #0
   1c668:	mov	r9, r0
   1c66c:	beq	1c5b4 <__assert_fail@plt+0xa5ac>
   1c670:	ldr	r2, [sp, #12]
   1c674:	cmp	r2, #0
   1c678:	beq	1c734 <__assert_fail@plt+0xa72c>
   1c67c:	mov	r1, #0
   1c680:	mov	r4, r1
   1c684:	mov	r8, r3
   1c688:	mov	r5, r2
   1c68c:	mvn	sl, #0
   1c690:	str	r1, [sp, #16]
   1c694:	mov	r2, r9
   1c698:	mov	r1, r6
   1c69c:	mov	r0, fp
   1c6a0:	bl	11fcc <strncmp@plt>
   1c6a4:	cmp	r0, #0
   1c6a8:	mov	r0, fp
   1c6ac:	bne	1c6f0 <__assert_fail@plt+0xa6e8>
   1c6b0:	bl	11e10 <strlen@plt>
   1c6b4:	ldr	r3, [sp, #12]
   1c6b8:	mov	r2, r7
   1c6bc:	mov	r1, r5
   1c6c0:	cmp	r9, r0
   1c6c4:	mla	r0, r7, sl, r3
   1c6c8:	beq	1c724 <__assert_fail@plt+0xa71c>
   1c6cc:	cmn	sl, #1
   1c6d0:	moveq	sl, r4
   1c6d4:	beq	1c6f0 <__assert_fail@plt+0xa6e8>
   1c6d8:	bl	11bf4 <memcmp@plt>
   1c6dc:	ldr	r2, [sp, #20]
   1c6e0:	ldr	r3, [sp, #16]
   1c6e4:	cmp	r0, #0
   1c6e8:	movne	r3, r2
   1c6ec:	str	r3, [sp, #16]
   1c6f0:	ldr	fp, [r8, #4]!
   1c6f4:	add	r4, r4, #1
   1c6f8:	cmp	fp, #0
   1c6fc:	add	r5, r5, r7
   1c700:	bne	1c694 <__assert_fail@plt+0xa68c>
   1c704:	ldr	r3, [sp, #16]
   1c708:	cmp	r3, #0
   1c70c:	bne	1c7a8 <__assert_fail@plt+0xa7a0>
   1c710:	cmn	sl, #1
   1c714:	beq	1c5b4 <__assert_fail@plt+0xa5ac>
   1c718:	mov	r0, sl
   1c71c:	add	sp, sp, #36	; 0x24
   1c720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c724:	mov	sl, r4
   1c728:	mov	r0, sl
   1c72c:	add	sp, sp, #36	; 0x24
   1c730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c734:	mov	r5, r3
   1c738:	ldr	r3, [sp, #12]
   1c73c:	str	r7, [sp, #72]	; 0x48
   1c740:	mov	r7, fp
   1c744:	ldr	fp, [sp, #20]
   1c748:	mov	r8, r3
   1c74c:	mvn	sl, #0
   1c750:	mov	r4, r3
   1c754:	mov	r2, r9
   1c758:	mov	r1, r6
   1c75c:	mov	r0, r7
   1c760:	bl	11fcc <strncmp@plt>
   1c764:	cmp	r0, #0
   1c768:	mov	r0, r7
   1c76c:	bne	1c788 <__assert_fail@plt+0xa780>
   1c770:	bl	11e10 <strlen@plt>
   1c774:	cmp	r9, r0
   1c778:	beq	1c724 <__assert_fail@plt+0xa71c>
   1c77c:	cmn	sl, #1
   1c780:	moveq	sl, r4
   1c784:	movne	r8, fp
   1c788:	ldr	r7, [r5, #4]!
   1c78c:	add	r4, r4, #1
   1c790:	cmp	r7, #0
   1c794:	bne	1c754 <__assert_fail@plt+0xa74c>
   1c798:	str	r8, [sp, #16]
   1c79c:	ldr	r7, [sp, #72]	; 0x48
   1c7a0:	mov	r3, r8
   1c7a4:	b	1c708 <__assert_fail@plt+0xa700>
   1c7a8:	mov	r2, #5
   1c7ac:	ldr	r1, [pc, #16]	; 1c7c4 <__assert_fail@plt+0xa7bc>
   1c7b0:	mov	r0, #0
   1c7b4:	bl	11c0c <dcgettext@plt>
   1c7b8:	mov	r4, r0
   1c7bc:	b	1c5c8 <__assert_fail@plt+0xa5c0>
   1c7c0:	ldrdeq	sl, [r2], -r8
   1c7c4:	strdeq	sl, [r2], -r4
   1c7c8:	push	{r4, r5, r6, r7, r8, lr}
   1c7cc:	ldr	r7, [r1]
   1c7d0:	cmp	r7, #0
   1c7d4:	beq	1c814 <__assert_fail@plt+0xa80c>
   1c7d8:	mov	r6, r3
   1c7dc:	mov	r8, r0
   1c7e0:	mov	r4, r2
   1c7e4:	mov	r5, r1
   1c7e8:	b	1c7f8 <__assert_fail@plt+0xa7f0>
   1c7ec:	ldr	r7, [r5, #4]!
   1c7f0:	cmp	r7, #0
   1c7f4:	beq	1c814 <__assert_fail@plt+0xa80c>
   1c7f8:	mov	r1, r4
   1c7fc:	mov	r2, r6
   1c800:	mov	r0, r8
   1c804:	bl	11bf4 <memcmp@plt>
   1c808:	add	r4, r4, r6
   1c80c:	cmp	r0, #0
   1c810:	bne	1c7ec <__assert_fail@plt+0xa7e4>
   1c814:	mov	r0, r7
   1c818:	pop	{r4, r5, r6, r7, r8, pc}
   1c81c:	ldr	r3, [pc, #4]	; 1c828 <__assert_fail@plt+0xa820>
   1c820:	str	r0, [r3]
   1c824:	bx	lr
   1c828:	andeq	ip, r3, r4, asr #17
   1c82c:	ldr	r3, [pc, #4]	; 1c838 <__assert_fail@plt+0xa830>
   1c830:	strb	r0, [r3, #4]
   1c834:	bx	lr
   1c838:	andeq	ip, r3, r4, asr #17
   1c83c:	ldr	r3, [pc, #192]	; 1c904 <__assert_fail@plt+0xa8fc>
   1c840:	push	{r4, r5, r6, lr}
   1c844:	sub	sp, sp, #8
   1c848:	ldr	r0, [r3]
   1c84c:	bl	27a24 <__assert_fail@plt+0x15a1c>
   1c850:	cmp	r0, #0
   1c854:	beq	1c878 <__assert_fail@plt+0xa870>
   1c858:	ldr	r4, [pc, #168]	; 1c908 <__assert_fail@plt+0xa900>
   1c85c:	ldrb	r3, [r4, #4]
   1c860:	cmp	r3, #0
   1c864:	beq	1c894 <__assert_fail@plt+0xa88c>
   1c868:	bl	11e34 <__errno_location@plt>
   1c86c:	ldr	r3, [r0]
   1c870:	cmp	r3, #32
   1c874:	bne	1c894 <__assert_fail@plt+0xa88c>
   1c878:	ldr	r3, [pc, #140]	; 1c90c <__assert_fail@plt+0xa904>
   1c87c:	ldr	r0, [r3]
   1c880:	bl	27a24 <__assert_fail@plt+0x15a1c>
   1c884:	cmp	r0, #0
   1c888:	bne	1c8dc <__assert_fail@plt+0xa8d4>
   1c88c:	add	sp, sp, #8
   1c890:	pop	{r4, r5, r6, pc}
   1c894:	mov	r2, #5
   1c898:	ldr	r1, [pc, #112]	; 1c910 <__assert_fail@plt+0xa908>
   1c89c:	mov	r0, #0
   1c8a0:	bl	11c0c <dcgettext@plt>
   1c8a4:	ldr	r4, [r4]
   1c8a8:	cmp	r4, #0
   1c8ac:	mov	r5, r0
   1c8b0:	beq	1c8e8 <__assert_fail@plt+0xa8e0>
   1c8b4:	bl	11e34 <__errno_location@plt>
   1c8b8:	ldr	r6, [r0]
   1c8bc:	mov	r0, r4
   1c8c0:	bl	23294 <__assert_fail@plt+0x1128c>
   1c8c4:	mov	r1, r6
   1c8c8:	str	r5, [sp]
   1c8cc:	ldr	r2, [pc, #64]	; 1c914 <__assert_fail@plt+0xa90c>
   1c8d0:	mov	r3, r0
   1c8d4:	mov	r0, #0
   1c8d8:	bl	11d50 <error@plt>
   1c8dc:	ldr	r3, [pc, #52]	; 1c918 <__assert_fail@plt+0xa910>
   1c8e0:	ldr	r0, [r3]
   1c8e4:	bl	11b70 <_exit@plt>
   1c8e8:	bl	11e34 <__errno_location@plt>
   1c8ec:	mov	r3, r5
   1c8f0:	ldr	r2, [pc, #36]	; 1c91c <__assert_fail@plt+0xa914>
   1c8f4:	ldr	r1, [r0]
   1c8f8:	mov	r0, r4
   1c8fc:	bl	11d50 <error@plt>
   1c900:	b	1c8dc <__assert_fail@plt+0xa8d4>
   1c904:	ldrdeq	ip, [r3], -ip	; <UNPREDICTABLE>
   1c908:	andeq	ip, r3, r4, asr #17
   1c90c:	ldrdeq	ip, [r3], -r0
   1c910:	andeq	fp, r2, ip, lsr r0
   1c914:	andeq	r9, r2, r4, ror r3
   1c918:	andeq	ip, r3, r4, ror r2
   1c91c:	andeq	r9, r2, ip, ror #8
   1c920:	push	{lr}		; (str lr, [sp, #-4]!)
   1c924:	mov	r3, #0
   1c928:	ldr	lr, [pc, #40]	; 1c958 <__assert_fail@plt+0xa950>
   1c92c:	ldr	ip, [pc, #40]	; 1c95c <__assert_fail@plt+0xa954>
   1c930:	ldr	r1, [pc, #40]	; 1c960 <__assert_fail@plt+0xa958>
   1c934:	ldr	r2, [pc, #40]	; 1c964 <__assert_fail@plt+0xa95c>
   1c938:	str	lr, [r0]
   1c93c:	str	ip, [r0, #4]
   1c940:	str	r1, [r0, #8]
   1c944:	str	r2, [r0, #12]
   1c948:	str	r3, [r0, #20]
   1c94c:	str	r3, [r0, #16]
   1c950:	str	r3, [r0, #24]
   1c954:	pop	{pc}		; (ldr pc, [sp], #4)
   1c958:	strbvs	r2, [r5, -r1, lsl #6]
   1c95c:	svc	0x00cdab89
   1c960:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   1c964:	eorsne	r5, r2, r6, ror r4
   1c968:	ldr	r2, [r0]
   1c96c:	mov	r3, r0
   1c970:	str	r2, [r1]
   1c974:	ldr	r2, [r3, #4]
   1c978:	mov	r0, r1
   1c97c:	str	r2, [r1, #4]
   1c980:	ldr	r2, [r3, #8]
   1c984:	str	r2, [r1, #8]
   1c988:	ldr	r3, [r3, #12]
   1c98c:	str	r3, [r1, #12]
   1c990:	bx	lr
   1c994:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c998:	sub	sp, sp, #20
   1c99c:	ldr	r3, [r2, #16]
   1c9a0:	mov	lr, r2
   1c9a4:	str	r2, [sp, #12]
   1c9a8:	ldr	r2, [r2, #20]
   1c9ac:	add	r3, r1, r3
   1c9b0:	bic	ip, r1, #3
   1c9b4:	add	ip, r0, ip
   1c9b8:	cmp	r1, r3
   1c9bc:	movls	r1, r2
   1c9c0:	addhi	r1, r2, #1
   1c9c4:	str	r3, [lr, #16]
   1c9c8:	ldr	r3, [lr]
   1c9cc:	cmp	r0, ip
   1c9d0:	str	r1, [lr, #20]
   1c9d4:	str	r3, [sp, #4]
   1c9d8:	str	ip, [sp, #8]
   1c9dc:	ldr	r3, [lr, #4]
   1c9e0:	ldr	r1, [lr, #8]
   1c9e4:	ldr	r2, [lr, #12]
   1c9e8:	bcs	1d31c <__assert_fail@plt+0xb314>
   1c9ec:	mov	lr, r3
   1c9f0:	ldr	r3, [sp, #4]
   1c9f4:	mov	r9, r0
   1c9f8:	mov	r4, r1
   1c9fc:	mov	r6, r2
   1ca00:	add	r3, r3, #-687865856	; 0xd7000000
   1ca04:	add	r3, r3, #6946816	; 0x6a0000
   1ca08:	ldr	r2, [r9]
   1ca0c:	eor	r8, r4, r6
   1ca10:	add	r3, r3, #41984	; 0xa400
   1ca14:	and	r8, r8, lr
   1ca18:	add	r3, r3, #120	; 0x78
   1ca1c:	add	r3, r3, r2
   1ca20:	eor	r8, r8, r6
   1ca24:	add	r8, r8, r3
   1ca28:	ldr	r5, [pc, #2296]	; 1d328 <__assert_fail@plt+0xb320>
   1ca2c:	add	r8, lr, r8, ror #25
   1ca30:	ldr	r2, [r9, #4]
   1ca34:	eor	r7, lr, r4
   1ca38:	and	r7, r7, r8
   1ca3c:	add	r5, r6, r5
   1ca40:	add	r5, r5, r2
   1ca44:	eor	r7, r7, r4
   1ca48:	add	r7, r7, r5
   1ca4c:	ldr	r0, [pc, #2264]	; 1d32c <__assert_fail@plt+0xb324>
   1ca50:	add	r7, r8, r7, ror #20
   1ca54:	ldr	r2, [r9, #8]
   1ca58:	eor	ip, r8, lr
   1ca5c:	and	ip, ip, r7
   1ca60:	add	r0, r4, r0
   1ca64:	add	r0, r0, r2
   1ca68:	eor	ip, ip, lr
   1ca6c:	add	ip, ip, r0
   1ca70:	ldr	r2, [pc, #2232]	; 1d330 <__assert_fail@plt+0xb328>
   1ca74:	add	ip, r7, ip, ror #15
   1ca78:	ldr	r0, [r9, #12]
   1ca7c:	eor	r1, r8, r7
   1ca80:	and	r1, r1, ip
   1ca84:	add	r2, lr, r2
   1ca88:	add	r2, r2, r0
   1ca8c:	eor	r1, r1, r8
   1ca90:	ldr	r0, [r9, #16]
   1ca94:	add	r1, r1, r2
   1ca98:	ldr	r3, [pc, #2196]	; 1d334 <__assert_fail@plt+0xb32c>
   1ca9c:	add	r1, ip, r1, ror #10
   1caa0:	eor	r2, r7, ip
   1caa4:	add	r3, r0, r3
   1caa8:	ldr	r0, [r9, #20]
   1caac:	and	r2, r2, r1
   1cab0:	add	r8, r3, r8
   1cab4:	add	r0, r0, #1191182336	; 0x47000000
   1cab8:	eor	r3, r2, r7
   1cabc:	add	r3, r3, r8
   1cac0:	add	r0, r0, #8847360	; 0x870000
   1cac4:	add	r0, r0, #50688	; 0xc600
   1cac8:	add	r3, r1, r3, ror #25
   1cacc:	eor	r2, ip, r1
   1cad0:	add	r0, r0, #42	; 0x2a
   1cad4:	and	r2, r2, r3
   1cad8:	add	r7, r0, r7
   1cadc:	ldr	r0, [r9, #24]
   1cae0:	eor	r5, r2, ip
   1cae4:	add	r5, r5, r7
   1cae8:	add	r0, r0, #-1476395008	; 0xa8000000
   1caec:	add	r0, r0, #3162112	; 0x304000
   1caf0:	add	r5, r3, r5, ror #20
   1caf4:	eor	r2, r1, r3
   1caf8:	add	r0, r0, #1552	; 0x610
   1cafc:	and	r2, r2, r5
   1cb00:	add	r0, r0, #3
   1cb04:	add	ip, r0, ip
   1cb08:	eor	r0, r2, r1
   1cb0c:	ldr	r2, [r9, #28]
   1cb10:	add	r0, r0, ip
   1cb14:	add	r2, r2, #-50331648	; 0xfd000000
   1cb18:	add	r2, r2, #4587520	; 0x460000
   1cb1c:	add	r0, r5, r0, ror #15
   1cb20:	eor	ip, r3, r5
   1cb24:	add	r2, r2, #38144	; 0x9500
   1cb28:	and	ip, ip, r0
   1cb2c:	add	r2, r2, #1
   1cb30:	add	r1, r2, r1
   1cb34:	eor	r2, ip, r3
   1cb38:	ldr	ip, [r9, #32]
   1cb3c:	add	r2, r2, r1
   1cb40:	add	ip, ip, #1761607680	; 0x69000000
   1cb44:	add	ip, ip, #8388608	; 0x800000
   1cb48:	add	r2, r0, r2, ror #10
   1cb4c:	eor	r1, r5, r0
   1cb50:	add	ip, ip, #38912	; 0x9800
   1cb54:	and	r1, r1, r2
   1cb58:	add	ip, ip, #216	; 0xd8
   1cb5c:	add	r3, ip, r3
   1cb60:	eor	sl, r1, r5
   1cb64:	add	sl, sl, r3
   1cb68:	ldr	ip, [r9, #36]	; 0x24
   1cb6c:	ldr	r1, [pc, #1988]	; 1d338 <__assert_fail@plt+0xb330>
   1cb70:	add	sl, r2, sl, ror #25
   1cb74:	eor	r3, r0, r2
   1cb78:	add	r1, ip, r1
   1cb7c:	and	r3, r3, sl
   1cb80:	add	r5, r1, r5
   1cb84:	eor	r7, r3, r0
   1cb88:	ldr	r1, [r9, #40]	; 0x28
   1cb8c:	add	r7, r7, r5
   1cb90:	sub	r1, r1, #41984	; 0xa400
   1cb94:	add	r7, sl, r7, ror #20
   1cb98:	eor	r3, r2, sl
   1cb9c:	sub	r1, r1, #79	; 0x4f
   1cba0:	and	r3, r3, r7
   1cba4:	add	r0, r1, r0
   1cba8:	ldr	r1, [r9, #44]	; 0x2c
   1cbac:	eor	r3, r3, r2
   1cbb0:	add	r0, r3, r0
   1cbb4:	add	r1, r1, #-1996488704	; 0x89000000
   1cbb8:	add	r1, r1, #6029312	; 0x5c0000
   1cbbc:	add	ip, r7, r0, ror #15
   1cbc0:	eor	r3, sl, r7
   1cbc4:	add	r1, r1, #55040	; 0xd700
   1cbc8:	and	r3, r3, ip
   1cbcc:	add	r1, r1, #190	; 0xbe
   1cbd0:	add	r2, r1, r2
   1cbd4:	eor	r1, r3, sl
   1cbd8:	add	r1, r1, r2
   1cbdc:	ldr	r8, [r9, #48]	; 0x30
   1cbe0:	ldr	r0, [pc, #1876]	; 1d33c <__assert_fail@plt+0xb334>
   1cbe4:	add	r1, ip, r1, ror #10
   1cbe8:	eor	r2, r7, ip
   1cbec:	add	r0, r8, r0
   1cbf0:	and	r2, r2, r1
   1cbf4:	add	sl, r0, sl
   1cbf8:	eor	r3, r2, r7
   1cbfc:	add	r3, r3, sl
   1cc00:	ldr	r5, [r9, #52]	; 0x34
   1cc04:	ldr	r0, [pc, #1844]	; 1d340 <__assert_fail@plt+0xb338>
   1cc08:	add	r3, r1, r3, ror #25
   1cc0c:	eor	r2, ip, r1
   1cc10:	add	r0, r5, r0
   1cc14:	and	r2, r2, r3
   1cc18:	add	r7, r0, r7
   1cc1c:	eor	r5, r2, ip
   1cc20:	add	r5, r5, r7
   1cc24:	ldr	sl, [r9, #56]	; 0x38
   1cc28:	ldr	r7, [pc, #1812]	; 1d344 <__assert_fail@plt+0xb33c>
   1cc2c:	add	r5, r3, r5, ror #20
   1cc30:	eor	r2, r1, r3
   1cc34:	add	r7, sl, r7
   1cc38:	and	r2, r2, r5
   1cc3c:	add	ip, r7, ip
   1cc40:	eor	r0, r2, r1
   1cc44:	add	r0, r0, ip
   1cc48:	ldr	r7, [r9, #60]	; 0x3c
   1cc4c:	ldr	r2, [pc, #1780]	; 1d348 <__assert_fail@plt+0xb340>
   1cc50:	add	r0, r5, r0, ror #15
   1cc54:	eor	ip, r3, r5
   1cc58:	add	r2, r7, r2
   1cc5c:	and	ip, ip, r0
   1cc60:	add	r1, r2, r1
   1cc64:	eor	r2, ip, r3
   1cc68:	add	r2, r2, r1
   1cc6c:	ldr	ip, [pc, #1752]	; 1d34c <__assert_fail@plt+0xb344>
   1cc70:	ldr	r1, [r9, #4]
   1cc74:	add	r2, r0, r2, ror #10
   1cc78:	add	ip, r1, ip
   1cc7c:	eor	r1, r0, r2
   1cc80:	and	r1, r1, r5
   1cc84:	add	r3, ip, r3
   1cc88:	eor	fp, r1, r0
   1cc8c:	add	fp, fp, r3
   1cc90:	ldr	ip, [r9, #24]
   1cc94:	add	fp, r2, fp, ror #27
   1cc98:	ldr	r1, [pc, #1712]	; 1d350 <__assert_fail@plt+0xb348>
   1cc9c:	eor	r3, r2, fp
   1cca0:	add	r1, ip, r1
   1cca4:	and	r3, r3, r0
   1cca8:	eor	r3, r3, r2
   1ccac:	add	r5, r1, r5
   1ccb0:	add	r5, r3, r5
   1ccb4:	ldr	r1, [r9, #44]	; 0x2c
   1ccb8:	add	r5, fp, r5, ror #23
   1ccbc:	ldr	ip, [pc, #1680]	; 1d354 <__assert_fail@plt+0xb34c>
   1ccc0:	eor	r3, fp, r5
   1ccc4:	add	ip, r1, ip
   1ccc8:	and	r3, r3, r2
   1cccc:	add	r0, ip, r0
   1ccd0:	eor	ip, r3, fp
   1ccd4:	add	ip, ip, r0
   1ccd8:	ldr	r1, [pc, #1656]	; 1d358 <__assert_fail@plt+0xb350>
   1ccdc:	add	ip, r5, ip, ror #18
   1cce0:	ldr	r0, [r9]
   1cce4:	eor	r3, r5, ip
   1cce8:	add	r1, r0, r1
   1ccec:	and	r3, r3, fp
   1ccf0:	eor	r3, r3, r5
   1ccf4:	add	r2, r1, r2
   1ccf8:	add	r2, r3, r2
   1ccfc:	ldr	r0, [r9, #20]
   1cd00:	add	r2, ip, r2, ror #12
   1cd04:	ldr	r3, [pc, #1616]	; 1d35c <__assert_fail@plt+0xb354>
   1cd08:	eor	r1, ip, r2
   1cd0c:	add	r3, r0, r3
   1cd10:	and	r1, r1, r5
   1cd14:	add	fp, r3, fp
   1cd18:	eor	r3, r1, ip
   1cd1c:	add	r3, r3, fp
   1cd20:	ldr	r1, [pc, #1592]	; 1d360 <__assert_fail@plt+0xb358>
   1cd24:	add	r3, r2, r3, ror #27
   1cd28:	ldr	fp, [r9, #40]	; 0x28
   1cd2c:	eor	r0, r2, r3
   1cd30:	add	r1, fp, r1
   1cd34:	and	r0, r0, ip
   1cd38:	add	r5, r1, r5
   1cd3c:	eor	r1, r0, r2
   1cd40:	add	r1, r1, r5
   1cd44:	ldr	r0, [pc, #1560]	; 1d364 <__assert_fail@plt+0xb35c>
   1cd48:	add	r1, r3, r1, ror #23
   1cd4c:	eor	r5, r3, r1
   1cd50:	add	r0, r7, r0
   1cd54:	and	r5, r5, r2
   1cd58:	add	ip, r0, ip
   1cd5c:	eor	r0, r5, r3
   1cd60:	add	r0, r0, ip
   1cd64:	ldr	fp, [r9, #16]
   1cd68:	add	r0, r1, r0, ror #18
   1cd6c:	ldr	r5, [pc, #1524]	; 1d368 <__assert_fail@plt+0xb360>
   1cd70:	eor	ip, r1, r0
   1cd74:	add	r5, fp, r5
   1cd78:	and	ip, ip, r3
   1cd7c:	eor	ip, ip, r1
   1cd80:	add	r2, r5, r2
   1cd84:	add	r2, ip, r2
   1cd88:	ldr	fp, [r9, #36]	; 0x24
   1cd8c:	add	r2, r0, r2, ror #12
   1cd90:	ldr	r5, [pc, #1492]	; 1d36c <__assert_fail@plt+0xb364>
   1cd94:	eor	ip, r0, r2
   1cd98:	add	r5, fp, r5
   1cd9c:	and	ip, ip, r1
   1cda0:	add	r3, r5, r3
   1cda4:	eor	fp, ip, r0
   1cda8:	add	fp, fp, r3
   1cdac:	ldr	ip, [pc, #1468]	; 1d370 <__assert_fail@plt+0xb368>
   1cdb0:	add	fp, r2, fp, ror #27
   1cdb4:	eor	r3, r2, fp
   1cdb8:	add	ip, sl, ip
   1cdbc:	and	r3, r3, r0
   1cdc0:	add	r1, ip, r1
   1cdc4:	eor	r5, r3, r2
   1cdc8:	add	r5, r5, r1
   1cdcc:	ldr	ip, [pc, #1440]	; 1d374 <__assert_fail@plt+0xb36c>
   1cdd0:	add	r5, fp, r5, ror #23
   1cdd4:	ldr	r1, [r9, #12]
   1cdd8:	eor	r3, fp, r5
   1cddc:	add	ip, r1, ip
   1cde0:	and	r3, r3, r2
   1cde4:	add	r0, ip, r0
   1cde8:	eor	ip, r3, fp
   1cdec:	add	ip, ip, r0
   1cdf0:	ldr	r1, [pc, #1408]	; 1d378 <__assert_fail@plt+0xb370>
   1cdf4:	add	ip, r5, ip, ror #18
   1cdf8:	ldr	r0, [r9, #32]
   1cdfc:	eor	r3, r5, ip
   1ce00:	add	r1, r0, r1
   1ce04:	and	r3, r3, fp
   1ce08:	eor	r3, r3, r5
   1ce0c:	add	r2, r1, r2
   1ce10:	add	r2, r3, r2
   1ce14:	ldr	r0, [r9, #52]	; 0x34
   1ce18:	add	r2, ip, r2, ror #12
   1ce1c:	ldr	r3, [pc, #1368]	; 1d37c <__assert_fail@plt+0xb374>
   1ce20:	eor	r1, ip, r2
   1ce24:	add	r3, r0, r3
   1ce28:	and	r1, r1, r5
   1ce2c:	add	fp, r3, fp
   1ce30:	eor	r3, r1, ip
   1ce34:	add	r3, r3, fp
   1ce38:	ldr	r1, [pc, #1344]	; 1d380 <__assert_fail@plt+0xb378>
   1ce3c:	add	r3, r2, r3, ror #27
   1ce40:	ldr	fp, [r9, #8]
   1ce44:	eor	r0, r2, r3
   1ce48:	add	r1, fp, r1
   1ce4c:	and	r0, r0, ip
   1ce50:	add	r5, r1, r5
   1ce54:	eor	r1, r0, r2
   1ce58:	add	r1, r1, r5
   1ce5c:	ldr	fp, [r9, #28]
   1ce60:	add	r1, r3, r1, ror #23
   1ce64:	ldr	r0, [pc, #1304]	; 1d384 <__assert_fail@plt+0xb37c>
   1ce68:	eor	r5, r3, r1
   1ce6c:	add	r0, fp, r0
   1ce70:	and	r5, r5, r2
   1ce74:	add	ip, r0, ip
   1ce78:	eor	r0, r5, r3
   1ce7c:	add	r0, r0, ip
   1ce80:	ldr	r5, [pc, #1280]	; 1d388 <__assert_fail@plt+0xb380>
   1ce84:	add	r0, r1, r0, ror #18
   1ce88:	eor	fp, r1, r0
   1ce8c:	add	r5, r8, r5
   1ce90:	and	ip, r3, fp
   1ce94:	eor	ip, ip, r1
   1ce98:	add	r2, r5, r2
   1ce9c:	add	r2, ip, r2
   1cea0:	ldr	r5, [pc, #1252]	; 1d38c <__assert_fail@plt+0xb384>
   1cea4:	ldr	ip, [r9, #20]
   1cea8:	add	r2, r0, r2, ror #12
   1ceac:	add	r5, ip, r5
   1ceb0:	eor	fp, fp, r2
   1ceb4:	add	r3, r5, r3
   1ceb8:	ldr	ip, [r9, #32]
   1cebc:	add	r3, fp, r3
   1cec0:	ldr	fp, [pc, #1224]	; 1d390 <__assert_fail@plt+0xb388>
   1cec4:	add	r3, r2, r3, ror #28
   1cec8:	add	fp, ip, fp
   1cecc:	eor	ip, r0, r2
   1ced0:	eor	ip, ip, r3
   1ced4:	add	r1, fp, r1
   1ced8:	add	r1, ip, r1
   1cedc:	ldr	r5, [pc, #1200]	; 1d394 <__assert_fail@plt+0xb38c>
   1cee0:	ldr	ip, [r9, #44]	; 0x2c
   1cee4:	add	r1, r3, r1, ror #21
   1cee8:	add	r5, ip, r5
   1ceec:	eor	ip, r2, r3
   1cef0:	eor	ip, ip, r1
   1cef4:	add	r0, r5, r0
   1cef8:	add	r0, ip, r0
   1cefc:	ldr	r5, [pc, #1172]	; 1d398 <__assert_fail@plt+0xb390>
   1cf00:	add	r0, r1, r0, ror #16
   1cf04:	add	r5, sl, r5
   1cf08:	eor	fp, r3, r1
   1cf0c:	eor	fp, fp, r0
   1cf10:	add	r2, r5, r2
   1cf14:	ldr	ip, [r9, #4]
   1cf18:	add	r2, fp, r2
   1cf1c:	ldr	fp, [pc, #1144]	; 1d39c <__assert_fail@plt+0xb394>
   1cf20:	add	r2, r0, r2, ror #9
   1cf24:	add	fp, ip, fp
   1cf28:	eor	ip, r1, r0
   1cf2c:	add	r3, fp, r3
   1cf30:	eor	fp, ip, r2
   1cf34:	ldr	r5, [r9, #16]
   1cf38:	add	fp, fp, r3
   1cf3c:	ldr	ip, [pc, #1116]	; 1d3a0 <__assert_fail@plt+0xb398>
   1cf40:	add	fp, r2, fp, ror #28
   1cf44:	add	ip, r5, ip
   1cf48:	eor	r3, r0, r2
   1cf4c:	eor	r3, r3, fp
   1cf50:	add	r1, ip, r1
   1cf54:	ldr	r5, [r9, #28]
   1cf58:	add	r1, r3, r1
   1cf5c:	ldr	ip, [pc, #1088]	; 1d3a4 <__assert_fail@plt+0xb39c>
   1cf60:	add	r1, fp, r1, ror #21
   1cf64:	add	ip, r5, ip
   1cf68:	eor	r3, r2, fp
   1cf6c:	eor	r3, r3, r1
   1cf70:	add	r0, ip, r0
   1cf74:	add	r0, r3, r0
   1cf78:	ldr	ip, [r9, #40]	; 0x28
   1cf7c:	ldr	r5, [pc, #1060]	; 1d3a8 <__assert_fail@plt+0xb3a0>
   1cf80:	add	r0, r1, r0, ror #16
   1cf84:	eor	r3, fp, r1
   1cf88:	add	r5, ip, r5
   1cf8c:	add	r2, r5, r2
   1cf90:	eor	r5, r3, r0
   1cf94:	ldr	ip, [r9, #52]	; 0x34
   1cf98:	add	r5, r5, r2
   1cf9c:	ldr	r2, [pc, #1032]	; 1d3ac <__assert_fail@plt+0xb3a4>
   1cfa0:	add	r5, r0, r5, ror #9
   1cfa4:	add	r2, ip, r2
   1cfa8:	eor	ip, r1, r0
   1cfac:	add	fp, r2, fp
   1cfb0:	eor	r2, ip, r5
   1cfb4:	add	r2, r2, fp
   1cfb8:	ldr	ip, [pc, #1008]	; 1d3b0 <__assert_fail@plt+0xb3a8>
   1cfbc:	ldr	fp, [r9]
   1cfc0:	add	r2, r5, r2, ror #28
   1cfc4:	eor	r3, r0, r5
   1cfc8:	add	ip, fp, ip
   1cfcc:	add	r1, ip, r1
   1cfd0:	eor	fp, r3, r2
   1cfd4:	add	fp, fp, r1
   1cfd8:	ldr	ip, [pc, #980]	; 1d3b4 <__assert_fail@plt+0xb3ac>
   1cfdc:	ldr	r1, [r9, #12]
   1cfe0:	add	fp, r2, fp, ror #21
   1cfe4:	eor	r3, r5, r2
   1cfe8:	add	ip, r1, ip
   1cfec:	add	r0, ip, r0
   1cff0:	eor	ip, r3, fp
   1cff4:	ldr	r1, [r9, #24]
   1cff8:	add	ip, ip, r0
   1cffc:	ldr	r3, [pc, #948]	; 1d3b8 <__assert_fail@plt+0xb3b0>
   1d000:	add	ip, fp, ip, ror #16
   1d004:	add	r3, r1, r3
   1d008:	eor	r1, r2, fp
   1d00c:	add	r5, r3, r5
   1d010:	eor	r3, r1, ip
   1d014:	add	r3, r3, r5
   1d018:	ldr	r1, [r9, #36]	; 0x24
   1d01c:	ldr	r0, [pc, #920]	; 1d3bc <__assert_fail@plt+0xb3b4>
   1d020:	add	r3, ip, r3, ror #9
   1d024:	add	r0, r1, r0
   1d028:	eor	r1, fp, ip
   1d02c:	add	r2, r0, r2
   1d030:	eor	r5, r1, r3
   1d034:	add	r5, r5, r2
   1d038:	ldr	r0, [pc, #896]	; 1d3c0 <__assert_fail@plt+0xb3b8>
   1d03c:	add	r5, r3, r5, ror #28
   1d040:	eor	r2, ip, r3
   1d044:	add	r0, r8, r0
   1d048:	add	fp, r0, fp
   1d04c:	eor	r0, r2, r5
   1d050:	add	r0, r0, fp
   1d054:	ldr	r1, [pc, #872]	; 1d3c4 <__assert_fail@plt+0xb3bc>
   1d058:	add	r0, r5, r0, ror #21
   1d05c:	eor	r2, r3, r5
   1d060:	add	r1, r7, r1
   1d064:	add	ip, r1, ip
   1d068:	eor	r1, r2, r0
   1d06c:	add	r1, r1, ip
   1d070:	ldr	r2, [r9, #8]
   1d074:	ldr	ip, [pc, #844]	; 1d3c8 <__assert_fail@plt+0xb3c0>
   1d078:	add	r1, r0, r1, ror #16
   1d07c:	add	ip, r2, ip
   1d080:	eor	r2, r5, r0
   1d084:	add	r3, ip, r3
   1d088:	eor	ip, r2, r1
   1d08c:	add	ip, ip, r3
   1d090:	ldr	fp, [r9]
   1d094:	ldr	r2, [pc, #816]	; 1d3cc <__assert_fail@plt+0xb3c4>
   1d098:	add	ip, r1, ip, ror #9
   1d09c:	mvn	r3, r0
   1d0a0:	add	r2, fp, r2
   1d0a4:	orr	r3, r3, ip
   1d0a8:	add	r5, r2, r5
   1d0ac:	eor	r2, r3, r1
   1d0b0:	add	r2, r2, r5
   1d0b4:	ldr	fp, [pc, #788]	; 1d3d0 <__assert_fail@plt+0xb3c8>
   1d0b8:	ldr	r5, [r9, #28]
   1d0bc:	add	r2, ip, r2, ror #26
   1d0c0:	mvn	r3, r1
   1d0c4:	add	fp, r5, fp
   1d0c8:	orr	r3, r3, r2
   1d0cc:	eor	r3, r3, ip
   1d0d0:	add	r0, fp, r0
   1d0d4:	add	r0, r3, r0
   1d0d8:	ldr	fp, [pc, #756]	; 1d3d4 <__assert_fail@plt+0xb3cc>
   1d0dc:	add	r0, r2, r0, ror #22
   1d0e0:	mvn	r5, ip
   1d0e4:	add	fp, sl, fp
   1d0e8:	orr	r5, r5, r0
   1d0ec:	eor	r5, r5, r2
   1d0f0:	add	r1, fp, r1
   1d0f4:	add	r1, r5, r1
   1d0f8:	ldr	r3, [pc, #728]	; 1d3d8 <__assert_fail@plt+0xb3d0>
   1d0fc:	ldr	r5, [r9, #20]
   1d100:	add	r1, r0, r1, ror #17
   1d104:	mvn	sl, r2
   1d108:	add	r3, r5, r3
   1d10c:	orr	sl, sl, r1
   1d110:	add	ip, r3, ip
   1d114:	eor	sl, sl, r0
   1d118:	add	ip, sl, ip
   1d11c:	ldr	fp, [pc, #696]	; 1d3dc <__assert_fail@plt+0xb3d4>
   1d120:	add	ip, r1, ip, ror #11
   1d124:	mvn	r5, r0
   1d128:	add	fp, r8, fp
   1d12c:	orr	r5, r5, ip
   1d130:	eor	r5, r5, r1
   1d134:	add	r2, fp, r2
   1d138:	add	r2, r5, r2
   1d13c:	ldr	r8, [pc, #668]	; 1d3e0 <__assert_fail@plt+0xb3d8>
   1d140:	ldr	r5, [r9, #12]
   1d144:	add	r2, ip, r2, ror #26
   1d148:	mvn	r3, r1
   1d14c:	add	r8, r5, r8
   1d150:	orr	r3, r3, r2
   1d154:	eor	r3, r3, ip
   1d158:	add	r0, r8, r0
   1d15c:	add	r0, r3, r0
   1d160:	ldr	r8, [r9, #40]	; 0x28
   1d164:	ldr	fp, [pc, #632]	; 1d3e4 <__assert_fail@plt+0xb3dc>
   1d168:	add	r0, r2, r0, ror #22
   1d16c:	mvn	r5, ip
   1d170:	add	fp, r8, fp
   1d174:	orr	r5, r5, r0
   1d178:	eor	r5, r5, r2
   1d17c:	add	r1, fp, r1
   1d180:	add	r1, r5, r1
   1d184:	ldr	r8, [r9, #4]
   1d188:	ldr	r3, [pc, #600]	; 1d3e8 <__assert_fail@plt+0xb3e0>
   1d18c:	add	r1, r0, r1, ror #17
   1d190:	mvn	r5, r2
   1d194:	add	r3, r8, r3
   1d198:	orr	r5, r5, r1
   1d19c:	eor	r5, r5, r0
   1d1a0:	add	ip, r3, ip
   1d1a4:	add	ip, r5, ip
   1d1a8:	ldr	fp, [pc, #572]	; 1d3ec <__assert_fail@plt+0xb3e4>
   1d1ac:	ldr	r5, [r9, #32]
   1d1b0:	add	ip, r1, ip, ror #11
   1d1b4:	mvn	r3, r0
   1d1b8:	add	fp, r5, fp
   1d1bc:	orr	r3, r3, ip
   1d1c0:	eor	r3, r3, r1
   1d1c4:	add	r2, fp, r2
   1d1c8:	add	r2, r3, r2
   1d1cc:	ldr	r8, [pc, #540]	; 1d3f0 <__assert_fail@plt+0xb3e8>
   1d1d0:	add	r2, ip, r2, ror #26
   1d1d4:	mvn	r5, r1
   1d1d8:	add	r8, r7, r8
   1d1dc:	orr	r5, r5, r2
   1d1e0:	eor	r5, r5, ip
   1d1e4:	add	r0, r8, r0
   1d1e8:	add	r0, r5, r0
   1d1ec:	ldr	fp, [pc, #512]	; 1d3f4 <__assert_fail@plt+0xb3ec>
   1d1f0:	ldr	r5, [r9, #24]
   1d1f4:	add	r0, r2, r0, ror #22
   1d1f8:	mvn	r3, ip
   1d1fc:	add	fp, r5, fp
   1d200:	orr	r3, r3, r0
   1d204:	eor	r3, r3, r2
   1d208:	add	r1, fp, r1
   1d20c:	add	r1, r3, r1
   1d210:	ldr	r8, [r9, #52]	; 0x34
   1d214:	ldr	r7, [pc, #476]	; 1d3f8 <__assert_fail@plt+0xb3f0>
   1d218:	add	r1, r0, r1, ror #17
   1d21c:	mvn	r5, r2
   1d220:	add	r7, r8, r7
   1d224:	orr	r5, r5, r1
   1d228:	eor	r5, r5, r0
   1d22c:	add	ip, r7, ip
   1d230:	add	ip, r5, ip
   1d234:	ldr	fp, [pc, #448]	; 1d3fc <__assert_fail@plt+0xb3f4>
   1d238:	ldr	r5, [r9, #16]
   1d23c:	add	ip, r1, ip, ror #11
   1d240:	mvn	r3, r0
   1d244:	add	fp, r5, fp
   1d248:	orr	r3, r3, ip
   1d24c:	eor	r3, r3, r1
   1d250:	add	r2, fp, r2
   1d254:	add	r2, r3, r2
   1d258:	ldr	r5, [r9, #44]	; 0x2c
   1d25c:	ldr	r8, [pc, #412]	; 1d400 <__assert_fail@plt+0xb3f8>
   1d260:	add	r2, ip, r2, ror #26
   1d264:	mvn	r3, r1
   1d268:	add	r8, r5, r8
   1d26c:	orr	r3, r3, r2
   1d270:	add	r8, r8, r0
   1d274:	eor	r0, r3, ip
   1d278:	add	r0, r0, r8
   1d27c:	ldr	r5, [r9, #8]
   1d280:	ldr	fp, [pc, #380]	; 1d404 <__assert_fail@plt+0xb3fc>
   1d284:	add	r0, r2, r0, ror #22
   1d288:	mvn	r3, ip
   1d28c:	add	fp, r5, fp
   1d290:	orr	r3, r3, r0
   1d294:	add	fp, fp, r1
   1d298:	eor	r1, r3, r2
   1d29c:	add	r1, r1, fp
   1d2a0:	ldr	r5, [r9, #36]	; 0x24
   1d2a4:	ldr	r7, [pc, #348]	; 1d408 <__assert_fail@plt+0xb400>
   1d2a8:	add	r1, r0, r1, ror #17
   1d2ac:	mvn	r3, r2
   1d2b0:	add	r7, r5, r7
   1d2b4:	orr	r3, r3, r1
   1d2b8:	eor	r3, r3, r0
   1d2bc:	add	ip, r7, ip
   1d2c0:	add	ip, r3, ip
   1d2c4:	ldr	r5, [sp, #8]
   1d2c8:	ldr	r3, [sp, #4]
   1d2cc:	add	r9, r9, #64	; 0x40
   1d2d0:	add	ip, r1, ip, ror #11
   1d2d4:	add	r3, r3, r2
   1d2d8:	cmp	r5, r9
   1d2dc:	str	r3, [sp, #4]
   1d2e0:	add	r6, r6, r0
   1d2e4:	add	r4, r4, r1
   1d2e8:	add	lr, lr, ip
   1d2ec:	bhi	1ca00 <__assert_fail@plt+0xa9f8>
   1d2f0:	mov	ip, lr
   1d2f4:	mov	r1, r4
   1d2f8:	mov	lr, r6
   1d2fc:	ldr	r3, [sp, #12]
   1d300:	ldr	r2, [sp, #4]
   1d304:	str	ip, [r3, #4]
   1d308:	str	r2, [r3]
   1d30c:	str	r1, [r3, #8]
   1d310:	str	lr, [r3, #12]
   1d314:	add	sp, sp, #20
   1d318:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d31c:	mov	ip, r3
   1d320:	mov	lr, r2
   1d324:	b	1d2fc <__assert_fail@plt+0xb2f4>
   1d328:	stmia	r7, {r1, r2, r4, r6, r8, r9, sl, ip, sp, pc}^
   1d32c:	strtcs	r7, [r0], #-219	; 0xffffff25
   1d330:			; <UNDEFINED> instruction: 0xc1bdceee
   1d334:			; <UNDEFINED> instruction: 0xf57c0faf
   1d338:	blhi	115b1fc <optarg@@GLIBC_2.4+0x111ef1c>
   1d33c:	blvs	fe4217cc <optarg@@GLIBC_2.4+0xfe3e54ec>
   1d340:	ldc2	1, cr7, [r8, #588]	; 0x24c
   1d344:	ldrbtge	r4, [r9], -lr, lsl #7
   1d348:	ldmibmi	r4!, {r0, r5, fp}
   1d34c:			; <UNDEFINED> instruction: 0xf61e2562
   1d350:	subgt	fp, r0, r0, asr #6
   1d354:			; <UNDEFINED> instruction: 0x265e5a51
   1d358:	ldmib	r6!, {r1, r3, r5, r7, r8, r9, sl, lr, pc}
   1d35c:			; <UNDEFINED> instruction: 0xd62f105d
   1d360:	subeq	r1, r4, #1392508928	; 0x53000000
   1d364:	stmiale	r1!, {r0, r7, r9, sl, sp, lr, pc}
   1d368:	ldrb	pc, [r3, r8, asr #23]	; <UNPREDICTABLE>
   1d36c:	mvncs	ip, r6, ror #27
   1d370:	teqgt	r7, #56098816	; 0x3580000
   1d374:			; <UNDEFINED> instruction: 0xf4d50d87
   1d378:	ldrbmi	r1, [sl, #-1261]	; 0xfffffb13
   1d37c:	stmibge	r3!, {r0, r2, r8, fp, sp, lr, pc}^
   1d380:	stc2l	3, cr10, [pc], #992	; 1d768 <__assert_fail@plt+0xb760>
   1d384:			; <UNDEFINED> instruction: 0x676f02d9
   1d388:	stchi	12, cr4, [sl, #-552]!	; 0xfffffdd8
   1d38c:			; <UNDEFINED> instruction: 0xfffa3942
   1d390:	ldrbhi	pc, [r1, -r1, lsl #13]!	; <UNPREDICTABLE>
   1d394:	ldfvss	f6, [sp, #136]	; 0x88
   1d398:	vcmla.f16	d19, d5, d12, #270
   1d39c:	ldrtge	lr, [lr], #2628	; 0xa44
   1d3a0:	blmi	ff7d124c <optarg@@GLIBC_2.4+0xff794f6c>
   1d3a4:			; <UNDEFINED> instruction: 0xf6bb4b60
   1d3a8:	mrclt	12, 5, fp, cr15, cr0, {3}
   1d3ac:	ldmcs	fp, {r1, r2, r6, r7, r9, sl, fp, ip, sp, lr}
   1d3b0:	b	fe8673a0 <optarg@@GLIBC_2.4+0xfe82b0c0>
   1d3b4:	strbtle	r3, [pc], #133	; 1d3bc <__assert_fail@plt+0xb3b4>
   1d3b8:	streq	r1, [r8], #3333	; 0xd05
   1d3bc:	ldmible	r4, {r0, r3, r4, r5, ip, lr, pc}^
   1d3c0:	ldrb	r9, [fp], r5, ror #19
   1d3c4:	svcne	0x00a27cf8
   1d3c8:	strtgt	r5, [ip], #1637	; 0x665
   1d3cc:	vld1.16	{d2-d5}, [r9], r4
   1d3d0:	msrmi	CPSR_fx, #604	; 0x25c
   1d3d4:	blge	fe526278 <optarg@@GLIBC_2.4+0xfe4e9f98>
   1d3d8:	ldc2	0, cr10, [r3], {57}	; 0x39
   1d3dc:	ldrbvs	r5, [fp, #-2499]	; 0xfffff63d
   1d3e0:	svchi	0x000ccc92
   1d3e4:			; <UNDEFINED> instruction: 0xffeff47d
   1d3e8:	strhi	r5, [r4, #3537]	; 0xdd1
   1d3ec:	svcvs	0x00a87e4f
   1d3f0:	cdp2	6, 2, cr14, cr12, cr0, {7}
   1d3f4:	movwge	r4, #4884	; 0x1314
   1d3f8:	adfmi<illegal precision>p	f1, f0, f1
   1d3fc:			; <UNDEFINED> instruction: 0xf7537e82
   1d400:	lfmlt	f7, 1, [sl, #-212]!	; 0xffffff2c
   1d404:	bcs	ff611ef8 <optarg@@GLIBC_2.4+0xff5d5c18>
   1d408:	bl	fe1d2254 <optarg@@GLIBC_2.4+0xfe195f74>
   1d40c:	push	{r4, r5, r6, r7, r8, lr}
   1d410:	mov	r4, r0
   1d414:	ldr	r0, [r0, #24]
   1d418:	ldr	r3, [r4, #16]
   1d41c:	cmp	r0, #55	; 0x37
   1d420:	add	r3, r0, r3
   1d424:	mov	r5, r1
   1d428:	movhi	r6, #128	; 0x80
   1d42c:	movls	r6, #64	; 0x40
   1d430:	movhi	r2, #120	; 0x78
   1d434:	movls	r2, #56	; 0x38
   1d438:	movhi	r1, #31
   1d43c:	movls	r1, #15
   1d440:	movhi	lr, #30
   1d444:	movls	lr, #14
   1d448:	cmp	r0, r3
   1d44c:	add	lr, r4, lr, lsl #2
   1d450:	ldrhi	ip, [r4, #20]
   1d454:	ldrls	r7, [r4, #20]
   1d458:	addhi	r7, ip, #1
   1d45c:	add	r1, r4, r1, lsl #2
   1d460:	lsr	ip, r3, #29
   1d464:	strhi	r7, [r4, #20]
   1d468:	str	r3, [r4, #16]
   1d46c:	orr	ip, ip, r7, lsl #3
   1d470:	lsl	r3, r3, #3
   1d474:	add	r7, r4, #28
   1d478:	str	r3, [lr, #28]
   1d47c:	sub	r2, r2, r0
   1d480:	str	ip, [r1, #28]
   1d484:	add	r0, r7, r0
   1d488:	ldr	r1, [pc, #56]	; 1d4c8 <__assert_fail@plt+0xb4c0>
   1d48c:	bl	11b7c <memcpy@plt>
   1d490:	mov	r0, r7
   1d494:	mov	r2, r4
   1d498:	mov	r1, r6
   1d49c:	bl	1c994 <__assert_fail@plt+0xa98c>
   1d4a0:	ldr	r3, [r4]
   1d4a4:	mov	r0, r5
   1d4a8:	str	r3, [r5]
   1d4ac:	ldr	r3, [r4, #4]
   1d4b0:	str	r3, [r5, #4]
   1d4b4:	ldr	r3, [r4, #8]
   1d4b8:	str	r3, [r5, #8]
   1d4bc:	ldr	r3, [r4, #12]
   1d4c0:	str	r3, [r5, #12]
   1d4c4:	pop	{r4, r5, r6, r7, r8, pc}
   1d4c8:	andeq	fp, r2, r8, asr #32
   1d4cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d4d0:	mov	r6, r2
   1d4d4:	ldr	r4, [r2, #24]
   1d4d8:	mov	r8, r0
   1d4dc:	cmp	r4, #0
   1d4e0:	mov	r5, r1
   1d4e4:	bne	1d5d4 <__assert_fail@plt+0xb5cc>
   1d4e8:	cmp	r5, #63	; 0x3f
   1d4ec:	bls	1d5c4 <__assert_fail@plt+0xb5bc>
   1d4f0:	tst	r8, #3
   1d4f4:	beq	1d5a8 <__assert_fail@plt+0xb5a0>
   1d4f8:	cmp	r5, #64	; 0x40
   1d4fc:	add	r7, r6, #28
   1d500:	beq	1d580 <__assert_fail@plt+0xb578>
   1d504:	mov	sl, r5
   1d508:	mov	r4, r8
   1d50c:	mov	r9, #64	; 0x40
   1d510:	add	r2, r4, #64	; 0x40
   1d514:	mov	r3, r7
   1d518:	ldr	lr, [r4]
   1d51c:	ldr	ip, [r4, #4]
   1d520:	ldr	r0, [r4, #8]
   1d524:	ldr	r1, [r4, #12]
   1d528:	add	r4, r4, #16
   1d52c:	cmp	r4, r2
   1d530:	str	lr, [r3]
   1d534:	str	ip, [r3, #4]
   1d538:	str	r0, [r3, #8]
   1d53c:	str	r1, [r3, #12]
   1d540:	add	r3, r3, #16
   1d544:	bne	1d518 <__assert_fail@plt+0xb510>
   1d548:	sub	sl, sl, #64	; 0x40
   1d54c:	mov	r2, r6
   1d550:	mov	r1, r9
   1d554:	mov	r0, r7
   1d558:	bl	1c994 <__assert_fail@plt+0xa98c>
   1d55c:	cmp	sl, #64	; 0x40
   1d560:	bhi	1d510 <__assert_fail@plt+0xb508>
   1d564:	sub	r3, r5, #65	; 0x41
   1d568:	bic	r2, r3, #63	; 0x3f
   1d56c:	mov	r3, r2
   1d570:	sub	r5, r5, #64	; 0x40
   1d574:	add	r2, r2, #64	; 0x40
   1d578:	sub	r5, r5, r3
   1d57c:	add	r8, r8, r2
   1d580:	ldr	r4, [r6, #24]
   1d584:	mov	r1, r8
   1d588:	add	r0, r7, r4
   1d58c:	mov	r2, r5
   1d590:	add	r4, r4, r5
   1d594:	bl	11b7c <memcpy@plt>
   1d598:	cmp	r4, #63	; 0x3f
   1d59c:	bhi	1d614 <__assert_fail@plt+0xb60c>
   1d5a0:	str	r4, [r6, #24]
   1d5a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d5a8:	bic	r4, r5, #63	; 0x3f
   1d5ac:	mov	r0, r8
   1d5b0:	mov	r1, r4
   1d5b4:	mov	r2, r6
   1d5b8:	bl	1c994 <__assert_fail@plt+0xa98c>
   1d5bc:	and	r5, r5, #63	; 0x3f
   1d5c0:	add	r8, r8, r4
   1d5c4:	cmp	r5, #0
   1d5c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d5cc:	add	r7, r6, #28
   1d5d0:	b	1d580 <__assert_fail@plt+0xb578>
   1d5d4:	rsb	r7, r4, #128	; 0x80
   1d5d8:	cmp	r7, r1
   1d5dc:	movcs	r7, r1
   1d5e0:	add	r9, r2, #28
   1d5e4:	mov	r1, r8
   1d5e8:	mov	r2, r7
   1d5ec:	add	r0, r9, r4
   1d5f0:	bl	11b7c <memcpy@plt>
   1d5f4:	ldr	r1, [r6, #24]
   1d5f8:	add	r1, r7, r1
   1d5fc:	cmp	r1, #64	; 0x40
   1d600:	str	r1, [r6, #24]
   1d604:	bhi	1d640 <__assert_fail@plt+0xb638>
   1d608:	add	r8, r8, r7
   1d60c:	sub	r5, r5, r7
   1d610:	b	1d4e8 <__assert_fail@plt+0xb4e0>
   1d614:	sub	r4, r4, #64	; 0x40
   1d618:	mov	r2, r6
   1d61c:	mov	r1, #64	; 0x40
   1d620:	mov	r0, r7
   1d624:	bl	1c994 <__assert_fail@plt+0xa98c>
   1d628:	mov	r0, r7
   1d62c:	mov	r2, r4
   1d630:	add	r1, r6, #92	; 0x5c
   1d634:	bl	11b7c <memcpy@plt>
   1d638:	str	r4, [r6, #24]
   1d63c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d640:	mov	r2, r6
   1d644:	mov	r0, r9
   1d648:	bic	r1, r1, #63	; 0x3f
   1d64c:	bl	1c994 <__assert_fail@plt+0xa98c>
   1d650:	ldr	r2, [r6, #24]
   1d654:	add	r1, r4, r7
   1d658:	and	r2, r2, #63	; 0x3f
   1d65c:	bic	r1, r1, #63	; 0x3f
   1d660:	add	r1, r9, r1
   1d664:	mov	r0, r9
   1d668:	str	r2, [r6, #24]
   1d66c:	bl	11b7c <memcpy@plt>
   1d670:	b	1d608 <__assert_fail@plt+0xb600>
   1d674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d678:	mov	r5, r1
   1d67c:	sub	sp, sp, #164	; 0xa4
   1d680:	ldr	lr, [pc, #640]	; 1d908 <__assert_fail@plt+0xb900>
   1d684:	ldr	ip, [pc, #640]	; 1d90c <__assert_fail@plt+0xb904>
   1d688:	ldr	r1, [pc, #640]	; 1d910 <__assert_fail@plt+0xb908>
   1d68c:	ldr	r3, [pc, #640]	; 1d914 <__assert_fail@plt+0xb90c>
   1d690:	mov	r4, #0
   1d694:	cmp	r5, #63	; 0x3f
   1d698:	mov	r7, r2
   1d69c:	str	lr, [sp, #4]
   1d6a0:	str	ip, [sp, #8]
   1d6a4:	str	r1, [sp, #12]
   1d6a8:	str	r3, [sp, #16]
   1d6ac:	str	r4, [sp, #24]
   1d6b0:	str	r4, [sp, #20]
   1d6b4:	str	r4, [sp, #28]
   1d6b8:	mov	sl, r0
   1d6bc:	bls	1d7b4 <__assert_fail@plt+0xb7ac>
   1d6c0:	tst	r0, #3
   1d6c4:	beq	1d83c <__assert_fail@plt+0xb834>
   1d6c8:	cmp	r5, #64	; 0x40
   1d6cc:	beq	1d884 <__assert_fail@plt+0xb87c>
   1d6d0:	mov	r9, r5
   1d6d4:	mov	r4, r0
   1d6d8:	add	r6, sp, #32
   1d6dc:	add	r8, sp, #4
   1d6e0:	add	fp, r4, #64	; 0x40
   1d6e4:	mov	lr, r6
   1d6e8:	ldr	r0, [r4]
   1d6ec:	ldr	r1, [r4, #4]
   1d6f0:	ldr	r2, [r4, #8]
   1d6f4:	ldr	r3, [r4, #12]
   1d6f8:	mov	ip, lr
   1d6fc:	add	r4, r4, #16
   1d700:	cmp	r4, fp
   1d704:	stmia	ip!, {r0, r1, r2, r3}
   1d708:	mov	lr, ip
   1d70c:	bne	1d6e8 <__assert_fail@plt+0xb6e0>
   1d710:	sub	r9, r9, #64	; 0x40
   1d714:	mov	r2, r8
   1d718:	mov	r1, #64	; 0x40
   1d71c:	mov	r0, r6
   1d720:	bl	1c994 <__assert_fail@plt+0xa98c>
   1d724:	cmp	r9, #64	; 0x40
   1d728:	bhi	1d6e0 <__assert_fail@plt+0xb6d8>
   1d72c:	sub	r2, r5, #65	; 0x41
   1d730:	bic	r1, r2, #63	; 0x3f
   1d734:	mov	r2, r1
   1d738:	sub	r5, r5, #64	; 0x40
   1d73c:	add	r1, r1, #64	; 0x40
   1d740:	sub	r2, r5, r2
   1d744:	add	r1, sl, r1
   1d748:	ldr	r5, [sp, #28]
   1d74c:	add	r0, r6, r5
   1d750:	add	r5, r2, r5
   1d754:	bl	11b7c <memcpy@plt>
   1d758:	cmp	r5, #63	; 0x3f
   1d75c:	bhi	1d8bc <__assert_fail@plt+0xb8b4>
   1d760:	ldr	sl, [sp, #20]
   1d764:	ldr	r4, [sp, #24]
   1d768:	add	sl, r5, sl
   1d76c:	add	r0, r6, r5
   1d770:	lsl	lr, sl, #3
   1d774:	lsr	r1, sl, #29
   1d778:	str	r5, [sp, #28]
   1d77c:	cmp	r5, #55	; 0x37
   1d780:	movhi	r9, #128	; 0x80
   1d784:	movls	r9, #64	; 0x40
   1d788:	movhi	r2, #120	; 0x78
   1d78c:	movls	r2, #56	; 0x38
   1d790:	movhi	ip, #31
   1d794:	movls	ip, #15
   1d798:	movhi	r3, #30
   1d79c:	movls	r3, #14
   1d7a0:	cmp	sl, r5
   1d7a4:	str	sl, [sp, #20]
   1d7a8:	addcc	r4, r4, #1
   1d7ac:	strcc	r4, [sp, #24]
   1d7b0:	b	1d7e8 <__assert_fail@plt+0xb7e0>
   1d7b4:	cmp	r5, #0
   1d7b8:	bne	1d8e8 <__assert_fail@plt+0xb8e0>
   1d7bc:	add	r6, sp, #32
   1d7c0:	mov	r0, r6
   1d7c4:	mov	r9, #64	; 0x40
   1d7c8:	mov	r2, #56	; 0x38
   1d7cc:	mov	r1, r5
   1d7d0:	mov	lr, r5
   1d7d4:	mov	ip, #15
   1d7d8:	mov	r3, #14
   1d7dc:	mov	r4, r5
   1d7e0:	add	r8, sp, #4
   1d7e4:	str	r5, [sp, #20]
   1d7e8:	add	sl, sp, #160	; 0xa0
   1d7ec:	add	r3, sl, r3, lsl #2
   1d7f0:	add	ip, sl, ip, lsl #2
   1d7f4:	orr	r4, r1, r4, lsl #3
   1d7f8:	sub	r2, r2, r5
   1d7fc:	ldr	r1, [pc, #276]	; 1d918 <__assert_fail@plt+0xb910>
   1d800:	str	lr, [r3, #-128]	; 0xffffff80
   1d804:	str	r4, [ip, #-128]	; 0xffffff80
   1d808:	bl	11b7c <memcpy@plt>
   1d80c:	mov	r2, r8
   1d810:	mov	r1, r9
   1d814:	mov	r0, r6
   1d818:	bl	1c994 <__assert_fail@plt+0xa98c>
   1d81c:	ldmib	sp, {r0, r1, r2, r3}
   1d820:	str	r0, [r7]
   1d824:	str	r1, [r7, #4]
   1d828:	mov	r0, r7
   1d82c:	str	r2, [r7, #8]
   1d830:	str	r3, [r7, #12]
   1d834:	add	sp, sp, #164	; 0xa4
   1d838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d83c:	bic	r4, r5, #63	; 0x3f
   1d840:	add	r8, sp, #4
   1d844:	mov	r1, r4
   1d848:	mov	r2, r8
   1d84c:	bl	1c994 <__assert_fail@plt+0xa98c>
   1d850:	ands	r2, r5, #63	; 0x3f
   1d854:	addne	r1, sl, r4
   1d858:	addne	r6, sp, #32
   1d85c:	bne	1d748 <__assert_fail@plt+0xb740>
   1d860:	ldr	r5, [sp, #28]
   1d864:	ldr	sl, [sp, #20]
   1d868:	add	r6, sp, #32
   1d86c:	add	sl, r5, sl
   1d870:	add	r0, r6, r5
   1d874:	lsl	lr, sl, #3
   1d878:	lsr	r1, sl, #29
   1d87c:	ldr	r4, [sp, #24]
   1d880:	b	1d77c <__assert_fail@plt+0xb774>
   1d884:	add	r6, sp, #32
   1d888:	add	r4, r0, #64	; 0x40
   1d88c:	mov	lr, r6
   1d890:	ldr	r0, [sl]
   1d894:	ldr	r1, [sl, #4]
   1d898:	ldr	r2, [sl, #8]
   1d89c:	ldr	r3, [sl, #12]
   1d8a0:	mov	ip, lr
   1d8a4:	add	sl, sl, #16
   1d8a8:	cmp	sl, r4
   1d8ac:	stmia	ip!, {r0, r1, r2, r3}
   1d8b0:	mov	lr, ip
   1d8b4:	bne	1d890 <__assert_fail@plt+0xb888>
   1d8b8:	add	r8, sp, #4
   1d8bc:	mov	r2, r8
   1d8c0:	mov	r0, r6
   1d8c4:	sub	r5, r5, #64	; 0x40
   1d8c8:	mov	r1, #64	; 0x40
   1d8cc:	bl	1c994 <__assert_fail@plt+0xa98c>
   1d8d0:	mov	r2, r5
   1d8d4:	mov	r3, #128	; 0x80
   1d8d8:	add	r1, sp, #96	; 0x60
   1d8dc:	mov	r0, r6
   1d8e0:	bl	11cc0 <__memcpy_chk@plt>
   1d8e4:	b	1d760 <__assert_fail@plt+0xb758>
   1d8e8:	add	r6, sp, #32
   1d8ec:	mov	r1, sl
   1d8f0:	mov	r0, r6
   1d8f4:	mov	r2, r5
   1d8f8:	bl	11b7c <memcpy@plt>
   1d8fc:	mov	sl, r4
   1d900:	add	r8, sp, #4
   1d904:	b	1d768 <__assert_fail@plt+0xb760>
   1d908:	strbvs	r2, [r5, -r1, lsl #6]
   1d90c:	svc	0x00cdab89
   1d910:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   1d914:	eorsne	r5, r2, r6, ror r4
   1d918:	andeq	fp, r2, r8, asr #32
   1d91c:	push	{r4, r5}
   1d920:	pop	{r4, r5}
   1d924:	b	11af8 <posix_fadvise64@plt>
   1d928:	cmp	r0, #0
   1d92c:	bxeq	lr
   1d930:	push	{r4, lr}
   1d934:	sub	sp, sp, #16
   1d938:	mov	r4, r1
   1d93c:	bl	11e88 <fileno@plt>
   1d940:	mov	r2, #0
   1d944:	mov	r3, #0
   1d948:	str	r4, [sp, #8]
   1d94c:	strd	r2, [sp]
   1d950:	bl	11af8 <posix_fadvise64@plt>
   1d954:	add	sp, sp, #16
   1d958:	pop	{r4, pc}
   1d95c:	push	{r4, r5, lr}
   1d960:	sub	sp, sp, #12
   1d964:	mov	r4, r0
   1d968:	bl	11e88 <fileno@plt>
   1d96c:	cmp	r0, #0
   1d970:	mov	r0, r4
   1d974:	blt	1d9f0 <__assert_fail@plt+0xb9e8>
   1d978:	bl	11dbc <__freading@plt>
   1d97c:	cmp	r0, #0
   1d980:	bne	1d9bc <__assert_fail@plt+0xb9b4>
   1d984:	mov	r0, r4
   1d988:	bl	1d9fc <__assert_fail@plt+0xb9f4>
   1d98c:	cmp	r0, #0
   1d990:	beq	1d9ec <__assert_fail@plt+0xb9e4>
   1d994:	bl	11e34 <__errno_location@plt>
   1d998:	mov	r5, r0
   1d99c:	mov	r0, r4
   1d9a0:	ldr	r4, [r5]
   1d9a4:	bl	11eac <fclose@plt>
   1d9a8:	cmp	r4, #0
   1d9ac:	mvnne	r0, #0
   1d9b0:	strne	r4, [r5]
   1d9b4:	add	sp, sp, #12
   1d9b8:	pop	{r4, r5, pc}
   1d9bc:	mov	r0, r4
   1d9c0:	bl	11e88 <fileno@plt>
   1d9c4:	mov	r3, #1
   1d9c8:	str	r3, [sp]
   1d9cc:	mov	r2, #0
   1d9d0:	mov	r3, #0
   1d9d4:	bl	11ce4 <lseek64@plt>
   1d9d8:	mvn	r3, #0
   1d9dc:	mvn	r2, #0
   1d9e0:	cmp	r1, r3
   1d9e4:	cmpeq	r0, r2
   1d9e8:	bne	1d984 <__assert_fail@plt+0xb97c>
   1d9ec:	mov	r0, r4
   1d9f0:	add	sp, sp, #12
   1d9f4:	pop	{r4, r5, lr}
   1d9f8:	b	11eac <fclose@plt>
   1d9fc:	push	{r4, lr}
   1da00:	subs	r4, r0, #0
   1da04:	sub	sp, sp, #8
   1da08:	beq	1da24 <__assert_fail@plt+0xba1c>
   1da0c:	bl	11dbc <__freading@plt>
   1da10:	cmp	r0, #0
   1da14:	beq	1da24 <__assert_fail@plt+0xba1c>
   1da18:	ldr	r3, [r4]
   1da1c:	tst	r3, #256	; 0x100
   1da20:	bne	1da34 <__assert_fail@plt+0xba2c>
   1da24:	mov	r0, r4
   1da28:	add	sp, sp, #8
   1da2c:	pop	{r4, lr}
   1da30:	b	11b1c <fflush@plt>
   1da34:	mov	r3, #1
   1da38:	str	r3, [sp]
   1da3c:	mov	r2, #0
   1da40:	mov	r3, #0
   1da44:	mov	r0, r4
   1da48:	bl	1e108 <__assert_fail@plt+0xc100>
   1da4c:	mov	r0, r4
   1da50:	add	sp, sp, #8
   1da54:	pop	{r4, lr}
   1da58:	b	11b1c <fflush@plt>
   1da5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da60:	sub	sp, sp, #12
   1da64:	mov	r6, r0
   1da68:	mov	fp, r1
   1da6c:	bl	11ae0 <strcmp@plt>
   1da70:	subs	r7, r0, #0
   1da74:	beq	1dc6c <__assert_fail@plt+0xbc64>
   1da78:	ldrb	r5, [r6]
   1da7c:	cmp	r5, #0
   1da80:	beq	1dd3c <__assert_fail@plt+0xbd34>
   1da84:	ldrb	r8, [fp]
   1da88:	cmp	r8, #0
   1da8c:	beq	1dc78 <__assert_fail@plt+0xbc70>
   1da90:	mov	r1, r6
   1da94:	ldr	r0, [pc, #1548]	; 1e0a8 <__assert_fail@plt+0xc0a0>
   1da98:	bl	11ae0 <strcmp@plt>
   1da9c:	cmp	r0, #0
   1daa0:	beq	1dd3c <__assert_fail@plt+0xbd34>
   1daa4:	mov	r1, fp
   1daa8:	ldr	r0, [pc, #1528]	; 1e0a8 <__assert_fail@plt+0xc0a0>
   1daac:	bl	11ae0 <strcmp@plt>
   1dab0:	cmp	r0, #0
   1dab4:	beq	1dc78 <__assert_fail@plt+0xbc70>
   1dab8:	mov	r1, r6
   1dabc:	ldr	r0, [pc, #1512]	; 1e0ac <__assert_fail@plt+0xc0a4>
   1dac0:	bl	11ae0 <strcmp@plt>
   1dac4:	cmp	r0, #0
   1dac8:	beq	1dd3c <__assert_fail@plt+0xbd34>
   1dacc:	mov	r1, fp
   1dad0:	ldr	r0, [pc, #1492]	; 1e0ac <__assert_fail@plt+0xc0a4>
   1dad4:	bl	11ae0 <strcmp@plt>
   1dad8:	cmp	r0, #0
   1dadc:	beq	1dc78 <__assert_fail@plt+0xbc70>
   1dae0:	cmp	r5, #46	; 0x2e
   1dae4:	beq	1dfcc <__assert_fail@plt+0xbfc4>
   1dae8:	cmp	r8, #46	; 0x2e
   1daec:	beq	1dc78 <__assert_fail@plt+0xbc70>
   1daf0:	mov	r9, r6
   1daf4:	mov	r4, #0
   1daf8:	cmp	r5, #46	; 0x2e
   1dafc:	beq	1dccc <__assert_fail@plt+0xbcc4>
   1db00:	mov	r3, r9
   1db04:	cmp	r5, #90	; 0x5a
   1db08:	sub	r2, r5, #48	; 0x30
   1db0c:	sub	r1, r5, #97	; 0x61
   1db10:	bhi	1dc88 <__assert_fail@plt+0xbc80>
   1db14:	cmp	r5, #65	; 0x41
   1db18:	bcs	1dc90 <__assert_fail@plt+0xbc88>
   1db1c:	cmp	r2, #9
   1db20:	bls	1dc90 <__assert_fail@plt+0xbc88>
   1db24:	cmp	r5, #126	; 0x7e
   1db28:	beq	1dc90 <__assert_fail@plt+0xbc88>
   1db2c:	ldrb	r5, [r9, #1]!
   1db30:	mov	r4, #0
   1db34:	cmp	r5, r4
   1db38:	beq	1dff4 <__assert_fail@plt+0xbfec>
   1db3c:	cmp	r5, #46	; 0x2e
   1db40:	mov	r3, r9
   1db44:	bne	1db04 <__assert_fail@plt+0xbafc>
   1db48:	ldrb	r3, [r9, #1]
   1db4c:	add	r2, r9, #1
   1db50:	mov	r4, r9
   1db54:	cmp	r3, #0
   1db58:	bne	1dce4 <__assert_fail@plt+0xbcdc>
   1db5c:	mov	r9, r2
   1db60:	cmp	r8, #0
   1db64:	mov	r1, #1
   1db68:	beq	1dcb8 <__assert_fail@plt+0xbcb0>
   1db6c:	mov	r5, #0
   1db70:	mov	r0, r5
   1db74:	mov	sl, fp
   1db78:	cmp	r8, #46	; 0x2e
   1db7c:	beq	1df9c <__assert_fail@plt+0xbf94>
   1db80:	mov	r3, sl
   1db84:	cmp	r8, #90	; 0x5a
   1db88:	sub	r2, r8, #48	; 0x30
   1db8c:	sub	ip, r8, #97	; 0x61
   1db90:	bhi	1df3c <__assert_fail@plt+0xbf34>
   1db94:	cmp	r8, #65	; 0x41
   1db98:	bcs	1df44 <__assert_fail@plt+0xbf3c>
   1db9c:	cmp	r2, #9
   1dba0:	bls	1df44 <__assert_fail@plt+0xbf3c>
   1dba4:	cmp	r8, #126	; 0x7e
   1dba8:	beq	1df44 <__assert_fail@plt+0xbf3c>
   1dbac:	ldrb	r8, [sl, #1]!
   1dbb0:	mov	r5, r0
   1dbb4:	cmp	r8, #0
   1dbb8:	beq	1e00c <__assert_fail@plt+0xc004>
   1dbbc:	cmp	r8, #46	; 0x2e
   1dbc0:	mov	r3, sl
   1dbc4:	bne	1db84 <__assert_fail@plt+0xbb7c>
   1dbc8:	b	1dd74 <__assert_fail@plt+0xbd6c>
   1dbcc:	ldrb	r2, [fp, r3]
   1dbd0:	ldrb	ip, [r6, r1]
   1dbd4:	add	lr, r6, r1
   1dbd8:	cmp	ip, #48	; 0x30
   1dbdc:	mov	ip, r1
   1dbe0:	bne	1dbf4 <__assert_fail@plt+0xbbec>
   1dbe4:	ldrb	r1, [lr, #1]!
   1dbe8:	add	ip, ip, #1
   1dbec:	cmp	r1, #48	; 0x30
   1dbf0:	beq	1dbe4 <__assert_fail@plt+0xbbdc>
   1dbf4:	cmp	r2, #48	; 0x30
   1dbf8:	bne	1dc10 <__assert_fail@plt+0xbc08>
   1dbfc:	add	r2, fp, r3
   1dc00:	ldrb	r1, [r2, #1]!
   1dc04:	add	r3, r3, #1
   1dc08:	cmp	r1, #48	; 0x30
   1dc0c:	beq	1dc00 <__assert_fail@plt+0xbbf8>
   1dc10:	mov	r1, ip
   1dc14:	sub	r9, r3, r1
   1dc18:	add	ip, r6, ip
   1dc1c:	add	r2, fp, r3
   1dc20:	mov	sl, #0
   1dc24:	mov	r8, r5
   1dc28:	str	r4, [sp, #4]
   1dc2c:	ldrb	r5, [ip], #1
   1dc30:	add	r3, r9, r1
   1dc34:	sub	lr, r5, #48	; 0x30
   1dc38:	cmp	lr, #9
   1dc3c:	bls	1df60 <__assert_fail@plt+0xbf58>
   1dc40:	cmp	lr, #9
   1dc44:	mov	r5, r8
   1dc48:	ldr	r4, [sp, #4]
   1dc4c:	bls	1e038 <__assert_fail@plt+0xc030>
   1dc50:	ldrb	r2, [fp, r3]
   1dc54:	sub	r2, r2, #48	; 0x30
   1dc58:	cmp	r2, #9
   1dc5c:	bls	1e040 <__assert_fail@plt+0xc038>
   1dc60:	cmp	sl, #0
   1dc64:	beq	1ddec <__assert_fail@plt+0xbde4>
   1dc68:	mov	r7, sl
   1dc6c:	mov	r0, r7
   1dc70:	add	sp, sp, #12
   1dc74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc78:	mov	r7, #1
   1dc7c:	mov	r0, r7
   1dc80:	add	sp, sp, #12
   1dc84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc88:	cmp	r1, #25
   1dc8c:	bhi	1db24 <__assert_fail@plt+0xbb1c>
   1dc90:	ldrb	r5, [r3, #1]
   1dc94:	add	r9, r9, #1
   1dc98:	cmp	r5, #0
   1dc9c:	bne	1daf8 <__assert_fail@plt+0xbaf0>
   1dca0:	adds	r1, r4, #0
   1dca4:	movne	r1, #1
   1dca8:	cmp	r8, #0
   1dcac:	bne	1db6c <__assert_fail@plt+0xbb64>
   1dcb0:	cmp	r4, #0
   1dcb4:	beq	1e070 <__assert_fail@plt+0xc068>
   1dcb8:	sub	r4, r4, r6
   1dcbc:	mov	sl, fp
   1dcc0:	mov	r3, #0
   1dcc4:	sub	r5, sl, fp
   1dcc8:	b	1ddc4 <__assert_fail@plt+0xbdbc>
   1dccc:	cmp	r4, #0
   1dcd0:	beq	1db48 <__assert_fail@plt+0xbb40>
   1dcd4:	ldrb	r3, [r9, #1]
   1dcd8:	add	r2, r9, #1
   1dcdc:	cmp	r3, #0
   1dce0:	beq	1db5c <__assert_fail@plt+0xbb54>
   1dce4:	cmp	r3, #65	; 0x41
   1dce8:	bcc	1dd00 <__assert_fail@plt+0xbcf8>
   1dcec:	cmp	r3, #90	; 0x5a
   1dcf0:	bls	1dd28 <__assert_fail@plt+0xbd20>
   1dcf4:	sub	r1, r3, #97	; 0x61
   1dcf8:	cmp	r1, #25
   1dcfc:	bls	1dd28 <__assert_fail@plt+0xbd20>
   1dd00:	cmp	r3, #126	; 0x7e
   1dd04:	beq	1dd28 <__assert_fail@plt+0xbd20>
   1dd08:	ldrb	r5, [r2, #1]
   1dd0c:	add	r9, r2, #1
   1dd10:	cmp	r5, #0
   1dd14:	beq	1dff4 <__assert_fail@plt+0xbfec>
   1dd18:	cmp	r5, #46	; 0x2e
   1dd1c:	movne	r4, #0
   1dd20:	bne	1db00 <__assert_fail@plt+0xbaf8>
   1dd24:	b	1db48 <__assert_fail@plt+0xbb40>
   1dd28:	ldrb	r5, [r2, #1]
   1dd2c:	add	r9, r2, #1
   1dd30:	cmp	r5, #0
   1dd34:	bne	1daf8 <__assert_fail@plt+0xbaf0>
   1dd38:	b	1db60 <__assert_fail@plt+0xbb58>
   1dd3c:	mvn	r7, #0
   1dd40:	b	1dc6c <__assert_fail@plt+0xbc64>
   1dd44:	sub	ip, r3, #97	; 0x61
   1dd48:	cmp	ip, #25
   1dd4c:	bls	1dd98 <__assert_fail@plt+0xbd90>
   1dd50:	cmp	r3, #126	; 0x7e
   1dd54:	beq	1dd98 <__assert_fail@plt+0xbd90>
   1dd58:	ldrb	r8, [r2, #1]
   1dd5c:	add	sl, r2, #1
   1dd60:	cmp	r8, #0
   1dd64:	beq	1e00c <__assert_fail@plt+0xc004>
   1dd68:	cmp	r8, #46	; 0x2e
   1dd6c:	movne	r5, r0
   1dd70:	bne	1db80 <__assert_fail@plt+0xbb78>
   1dd74:	ldrb	r3, [sl, #1]
   1dd78:	add	r2, sl, #1
   1dd7c:	mov	r5, sl
   1dd80:	cmp	r3, #0
   1dd84:	beq	1e050 <__assert_fail@plt+0xc048>
   1dd88:	cmp	r3, #65	; 0x41
   1dd8c:	bcc	1dd50 <__assert_fail@plt+0xbd48>
   1dd90:	cmp	r3, #90	; 0x5a
   1dd94:	bhi	1dd44 <__assert_fail@plt+0xbd3c>
   1dd98:	ldrb	r8, [r2, #1]
   1dd9c:	add	sl, r2, #1
   1dda0:	cmp	r8, #0
   1dda4:	bne	1db78 <__assert_fail@plt+0xbb70>
   1dda8:	mov	r3, #1
   1ddac:	cmp	r4, #0
   1ddb0:	moveq	r4, r9
   1ddb4:	cmp	r5, #0
   1ddb8:	sub	r4, r4, r6
   1ddbc:	beq	1dcc4 <__assert_fail@plt+0xbcbc>
   1ddc0:	sub	r5, r5, fp
   1ddc4:	orr	r3, r3, r1
   1ddc8:	cmp	r5, r4
   1ddcc:	movne	r3, #0
   1ddd0:	andeq	r3, r3, #1
   1ddd4:	cmp	r3, #0
   1ddd8:	bne	1e018 <__assert_fail@plt+0xc010>
   1dddc:	mov	r3, #0
   1dde0:	mov	r1, r3
   1dde4:	mov	r0, r3
   1dde8:	str	r7, [sp]
   1ddec:	cmp	r5, r3
   1ddf0:	cmpls	r4, r1
   1ddf4:	bls	1e048 <__assert_fail@plt+0xc040>
   1ddf8:	add	lr, fp, r3
   1ddfc:	add	ip, r6, r1
   1de00:	b	1de3c <__assert_fail@plt+0xbe34>
   1de04:	mov	r8, r0
   1de08:	cmp	r5, r3
   1de0c:	beq	1de20 <__assert_fail@plt+0xbe18>
   1de10:	ldrb	r2, [lr]
   1de14:	sub	r7, r2, #48	; 0x30
   1de18:	cmp	r7, #9
   1de1c:	bhi	1df18 <__assert_fail@plt+0xbf10>
   1de20:	mov	r9, r0
   1de24:	cmp	r9, r8
   1de28:	bne	1e094 <__assert_fail@plt+0xc08c>
   1de2c:	add	r1, r1, #1
   1de30:	add	r3, r3, #1
   1de34:	add	lr, lr, #1
   1de38:	add	ip, ip, #1
   1de3c:	cmp	r4, r1
   1de40:	bls	1de54 <__assert_fail@plt+0xbe4c>
   1de44:	ldrb	r2, [ip]
   1de48:	sub	r2, r2, #48	; 0x30
   1de4c:	cmp	r2, #9
   1de50:	bhi	1de6c <__assert_fail@plt+0xbe64>
   1de54:	cmp	r5, r3
   1de58:	bls	1dbcc <__assert_fail@plt+0xbbc4>
   1de5c:	ldrb	r2, [lr]
   1de60:	sub	r7, r2, #48	; 0x30
   1de64:	cmp	r7, #9
   1de68:	bls	1dbd0 <__assert_fail@plt+0xbbc8>
   1de6c:	cmp	r4, r1
   1de70:	beq	1defc <__assert_fail@plt+0xbef4>
   1de74:	ldrb	r2, [ip]
   1de78:	sub	r7, r2, #48	; 0x30
   1de7c:	cmp	r7, #9
   1de80:	bls	1de04 <__assert_fail@plt+0xbdfc>
   1de84:	cmp	r2, #65	; 0x41
   1de88:	mov	r8, r2
   1de8c:	bcc	1dea4 <__assert_fail@plt+0xbe9c>
   1de90:	cmp	r2, #90	; 0x5a
   1de94:	bls	1de08 <__assert_fail@plt+0xbe00>
   1de98:	sub	r7, r2, #97	; 0x61
   1de9c:	cmp	r7, #25
   1dea0:	bls	1de08 <__assert_fail@plt+0xbe00>
   1dea4:	cmp	r2, #126	; 0x7e
   1dea8:	addne	r8, r2, #256	; 0x100
   1deac:	bne	1de08 <__assert_fail@plt+0xbe00>
   1deb0:	cmp	r5, r3
   1deb4:	beq	1e084 <__assert_fail@plt+0xc07c>
   1deb8:	ldrb	r2, [lr]
   1debc:	sub	r7, r2, #48	; 0x30
   1dec0:	cmp	r7, #9
   1dec4:	bls	1df80 <__assert_fail@plt+0xbf78>
   1dec8:	cmp	r2, #65	; 0x41
   1decc:	mov	r9, r2
   1ded0:	bcc	1dee8 <__assert_fail@plt+0xbee0>
   1ded4:	cmp	r2, #90	; 0x5a
   1ded8:	bls	1e09c <__assert_fail@plt+0xc094>
   1dedc:	sub	r7, r2, #97	; 0x61
   1dee0:	cmp	r7, #25
   1dee4:	bls	1e09c <__assert_fail@plt+0xc094>
   1dee8:	mvn	r8, #0
   1deec:	cmp	r2, #126	; 0x7e
   1def0:	addne	r9, r2, #256	; 0x100
   1def4:	mvneq	r9, #0
   1def8:	b	1de24 <__assert_fail@plt+0xbe1c>
   1defc:	cmp	r5, r3
   1df00:	beq	1de2c <__assert_fail@plt+0xbe24>
   1df04:	ldrb	r2, [lr]
   1df08:	sub	r7, r2, #48	; 0x30
   1df0c:	cmp	r7, #9
   1df10:	bls	1de2c <__assert_fail@plt+0xbe24>
   1df14:	mov	r8, r0
   1df18:	cmp	r2, #65	; 0x41
   1df1c:	mov	r9, r2
   1df20:	bcc	1deec <__assert_fail@plt+0xbee4>
   1df24:	cmp	r2, #90	; 0x5a
   1df28:	bls	1de24 <__assert_fail@plt+0xbe1c>
   1df2c:	sub	r7, r2, #97	; 0x61
   1df30:	cmp	r7, #25
   1df34:	bls	1de24 <__assert_fail@plt+0xbe1c>
   1df38:	b	1deec <__assert_fail@plt+0xbee4>
   1df3c:	cmp	ip, #25
   1df40:	bhi	1dba4 <__assert_fail@plt+0xbb9c>
   1df44:	ldrb	r8, [r3, #1]
   1df48:	add	sl, sl, #1
   1df4c:	cmp	r8, #0
   1df50:	bne	1db78 <__assert_fail@plt+0xbb70>
   1df54:	adds	r3, r5, #0
   1df58:	movne	r3, #1
   1df5c:	b	1ddac <__assert_fail@plt+0xbda4>
   1df60:	ldrb	r7, [r2], #1
   1df64:	sub	r4, r7, #48	; 0x30
   1df68:	cmp	r4, #9
   1df6c:	bhi	1dc40 <__assert_fail@plt+0xbc38>
   1df70:	cmp	sl, #0
   1df74:	subeq	sl, r5, r7
   1df78:	add	r1, r1, #1
   1df7c:	b	1dc2c <__assert_fail@plt+0xbc24>
   1df80:	ldr	r7, [sp]
   1df84:	mvn	r8, #0
   1df88:	mov	r9, #0
   1df8c:	subs	r8, r8, r9
   1df90:	beq	1dc6c <__assert_fail@plt+0xbc64>
   1df94:	mov	r7, r8
   1df98:	b	1dc6c <__assert_fail@plt+0xbc64>
   1df9c:	cmp	r5, #0
   1dfa0:	beq	1dd74 <__assert_fail@plt+0xbd6c>
   1dfa4:	ldrb	r3, [sl, #1]
   1dfa8:	add	r2, sl, #1
   1dfac:	cmp	r3, #0
   1dfb0:	bne	1dd88 <__assert_fail@plt+0xbd80>
   1dfb4:	cmp	r4, #0
   1dfb8:	beq	1e05c <__assert_fail@plt+0xc054>
   1dfbc:	sub	r4, r4, r6
   1dfc0:	mov	sl, r2
   1dfc4:	mov	r3, #1
   1dfc8:	b	1ddc0 <__assert_fail@plt+0xbdb8>
   1dfcc:	cmp	r8, #46	; 0x2e
   1dfd0:	bne	1dd3c <__assert_fail@plt+0xbd34>
   1dfd4:	ldrb	r5, [r6, #1]
   1dfd8:	add	r9, r6, #1
   1dfdc:	add	r3, fp, #1
   1dfe0:	cmp	r5, #0
   1dfe4:	ldrb	r8, [fp, #1]
   1dfe8:	mov	r6, r9
   1dfec:	mov	fp, r3
   1dff0:	bne	1daf0 <__assert_fail@plt+0xbae8>
   1dff4:	cmp	r8, #0
   1dff8:	moveq	r1, r8
   1dffc:	beq	1e070 <__assert_fail@plt+0xc068>
   1e000:	mov	r1, #0
   1e004:	mov	r4, r1
   1e008:	b	1db6c <__assert_fail@plt+0xbb64>
   1e00c:	mov	r5, r8
   1e010:	mov	r3, r8
   1e014:	b	1ddac <__assert_fail@plt+0xbda4>
   1e018:	mov	r2, r4
   1e01c:	mov	r1, fp
   1e020:	mov	r0, r6
   1e024:	bl	11fcc <strncmp@plt>
   1e028:	cmp	r0, #0
   1e02c:	subeq	r4, r9, r6
   1e030:	subeq	r5, sl, fp
   1e034:	b	1dddc <__assert_fail@plt+0xbdd4>
   1e038:	mov	r8, #1
   1e03c:	b	1df94 <__assert_fail@plt+0xbf8c>
   1e040:	mvn	r8, #0
   1e044:	b	1df94 <__assert_fail@plt+0xbf8c>
   1e048:	ldr	r7, [sp]
   1e04c:	b	1dc6c <__assert_fail@plt+0xbc64>
   1e050:	mov	r3, #1
   1e054:	mov	sl, r2
   1e058:	b	1ddac <__assert_fail@plt+0xbda4>
   1e05c:	sub	r5, r5, fp
   1e060:	mov	sl, r2
   1e064:	sub	r4, r9, r6
   1e068:	mov	r3, #1
   1e06c:	b	1ddc4 <__assert_fail@plt+0xbdbc>
   1e070:	mov	r3, #0
   1e074:	mov	r5, r3
   1e078:	sub	r4, r9, r6
   1e07c:	mov	sl, fp
   1e080:	b	1ddc4 <__assert_fail@plt+0xbdbc>
   1e084:	ldr	r7, [sp]
   1e088:	mov	r9, #0
   1e08c:	mvn	r8, #0
   1e090:	b	1df8c <__assert_fail@plt+0xbf84>
   1e094:	ldr	r7, [sp]
   1e098:	b	1df8c <__assert_fail@plt+0xbf84>
   1e09c:	ldr	r7, [sp]
   1e0a0:	mvn	r8, #0
   1e0a4:	b	1df8c <__assert_fail@plt+0xbf84>
   1e0a8:	andeq	fp, r2, r8, lsl #1
   1e0ac:	andeq	fp, r2, ip, lsl #1
   1e0b0:	push	{r4, r5, lr}
   1e0b4:	sub	sp, sp, #12
   1e0b8:	mov	r5, r0
   1e0bc:	bl	11e34 <__errno_location@plt>
   1e0c0:	mov	r2, #0
   1e0c4:	mov	r4, r0
   1e0c8:	ldr	r3, [r0]
   1e0cc:	str	r2, [r4]
   1e0d0:	mov	r0, r5
   1e0d4:	str	r3, [sp]
   1e0d8:	str	r3, [sp, #4]
   1e0dc:	bl	11b40 <free@plt>
   1e0e0:	ldr	r3, [r4]
   1e0e4:	add	r2, sp, #8
   1e0e8:	cmp	r3, #0
   1e0ec:	moveq	r3, #4
   1e0f0:	movne	r3, #0
   1e0f4:	add	r3, r2, r3
   1e0f8:	ldr	r3, [r3, #-8]
   1e0fc:	str	r3, [r4]
   1e100:	add	sp, sp, #12
   1e104:	pop	{r4, r5, pc}
   1e108:	push	{r4, r5, r6, r7, r8, lr}
   1e10c:	sub	sp, sp, #8
   1e110:	ldmib	r0, {ip, lr}
   1e114:	mov	r4, r0
   1e118:	ldr	r5, [sp, #32]
   1e11c:	cmp	lr, ip
   1e120:	beq	1e138 <__assert_fail@plt+0xc130>
   1e124:	str	r5, [sp, #32]
   1e128:	mov	r0, r4
   1e12c:	add	sp, sp, #8
   1e130:	pop	{r4, r5, r6, r7, r8, lr}
   1e134:	b	11ec4 <fseeko64@plt>
   1e138:	ldr	lr, [r0, #20]
   1e13c:	ldr	ip, [r0, #16]
   1e140:	cmp	lr, ip
   1e144:	bne	1e124 <__assert_fail@plt+0xc11c>
   1e148:	ldr	r8, [r0, #36]	; 0x24
   1e14c:	cmp	r8, #0
   1e150:	bne	1e124 <__assert_fail@plt+0xc11c>
   1e154:	mov	r6, r2
   1e158:	mov	r7, r3
   1e15c:	bl	11e88 <fileno@plt>
   1e160:	mov	r2, r6
   1e164:	mov	r3, r7
   1e168:	str	r5, [sp]
   1e16c:	bl	11ce4 <lseek64@plt>
   1e170:	mvn	r3, #0
   1e174:	mvn	r2, #0
   1e178:	cmp	r1, r3
   1e17c:	cmpeq	r0, r2
   1e180:	beq	1e1a0 <__assert_fail@plt+0xc198>
   1e184:	ldr	r3, [r4]
   1e188:	strd	r0, [r4, #80]	; 0x50
   1e18c:	mov	r0, r8
   1e190:	bic	r3, r3, #16
   1e194:	str	r3, [r4]
   1e198:	add	sp, sp, #8
   1e19c:	pop	{r4, r5, r6, r7, r8, pc}
   1e1a0:	mvn	r0, #0
   1e1a4:	b	1e198 <__assert_fail@plt+0xc190>
   1e1a8:	push	{lr}		; (str lr, [sp, #-4]!)
   1e1ac:	sub	sp, sp, #268	; 0x10c
   1e1b0:	add	r1, sp, #4
   1e1b4:	ldr	r2, [pc, #60]	; 1e1f8 <__assert_fail@plt+0xc1f0>
   1e1b8:	bl	25104 <__assert_fail@plt+0x130fc>
   1e1bc:	cmp	r0, #0
   1e1c0:	movne	r0, #0
   1e1c4:	bne	1e1f0 <__assert_fail@plt+0xc1e8>
   1e1c8:	ldr	r1, [pc, #44]	; 1e1fc <__assert_fail@plt+0xc1f4>
   1e1cc:	add	r0, sp, #4
   1e1d0:	bl	11ae0 <strcmp@plt>
   1e1d4:	cmp	r0, #0
   1e1d8:	beq	1e1f0 <__assert_fail@plt+0xc1e8>
   1e1dc:	add	r0, sp, #4
   1e1e0:	ldr	r1, [pc, #24]	; 1e200 <__assert_fail@plt+0xc1f8>
   1e1e4:	bl	11ae0 <strcmp@plt>
   1e1e8:	adds	r0, r0, #0
   1e1ec:	movne	r0, #1
   1e1f0:	add	sp, sp, #268	; 0x10c
   1e1f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e1f8:	andeq	r0, r0, r1, lsl #2
   1e1fc:	muleq	r2, r0, r0
   1e200:	muleq	r2, r4, r0
   1e204:	andeq	r0, r0, r0
   1e208:	push	{r4, lr}
   1e20c:	ror	r0, r0, #3
   1e210:	bl	28704 <_obstack_memory_used@@Base+0x278>
   1e214:	mov	r0, r1
   1e218:	pop	{r4, pc}
   1e21c:	sub	r0, r1, r0
   1e220:	clz	r0, r0
   1e224:	lsr	r0, r0, #5
   1e228:	bx	lr
   1e22c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e230:	mov	r5, r1
   1e234:	mov	r6, r0
   1e238:	ldr	r4, [r0, #24]
   1e23c:	ldr	r1, [r0, #8]
   1e240:	mov	r0, r5
   1e244:	mov	r8, r3
   1e248:	mov	sl, r2
   1e24c:	blx	r4
   1e250:	ldr	r3, [r6, #8]
   1e254:	cmp	r0, r3
   1e258:	bcs	1e348 <__assert_fail@plt+0xc340>
   1e25c:	ldr	r9, [r6]
   1e260:	mov	r7, r0
   1e264:	add	r4, r9, r0, lsl #3
   1e268:	str	r4, [sl]
   1e26c:	ldr	r3, [r9, r0, lsl #3]
   1e270:	cmp	r3, #0
   1e274:	beq	1e308 <__assert_fail@plt+0xc300>
   1e278:	cmp	r5, r3
   1e27c:	beq	1e29c <__assert_fail@plt+0xc294>
   1e280:	mov	r1, r3
   1e284:	mov	r0, r5
   1e288:	ldr	r3, [r6, #28]
   1e28c:	blx	r3
   1e290:	cmp	r0, #0
   1e294:	beq	1e2fc <__assert_fail@plt+0xc2f4>
   1e298:	ldr	r3, [r9, r7, lsl #3]
   1e29c:	cmp	r8, #0
   1e2a0:	beq	1e2cc <__assert_fail@plt+0xc2c4>
   1e2a4:	ldr	r2, [r4, #4]
   1e2a8:	cmp	r2, #0
   1e2ac:	movne	ip, #0
   1e2b0:	ldmne	r2, {r0, r1}
   1e2b4:	streq	r2, [r9, r7, lsl #3]
   1e2b8:	stmne	r4, {r0, r1}
   1e2bc:	strne	ip, [r2]
   1e2c0:	ldrne	r1, [r6, #36]	; 0x24
   1e2c4:	strne	r1, [r2, #4]
   1e2c8:	strne	r2, [r6, #36]	; 0x24
   1e2cc:	mov	r0, r3
   1e2d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e2d4:	ldr	r3, [r2]
   1e2d8:	cmp	r5, r3
   1e2dc:	beq	1e31c <__assert_fail@plt+0xc314>
   1e2e0:	mov	r1, r3
   1e2e4:	mov	r0, r5
   1e2e8:	ldr	r3, [r6, #28]
   1e2ec:	blx	r3
   1e2f0:	cmp	r0, #0
   1e2f4:	bne	1e314 <__assert_fail@plt+0xc30c>
   1e2f8:	ldr	r4, [r4, #4]
   1e2fc:	ldr	r2, [r4, #4]
   1e300:	cmp	r2, #0
   1e304:	bne	1e2d4 <__assert_fail@plt+0xc2cc>
   1e308:	mov	r3, #0
   1e30c:	mov	r0, r3
   1e310:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e314:	ldr	r2, [r4, #4]
   1e318:	ldr	r3, [r2]
   1e31c:	cmp	r8, #0
   1e320:	beq	1e2cc <__assert_fail@plt+0xc2c4>
   1e324:	ldr	r0, [r2, #4]
   1e328:	mov	r1, #0
   1e32c:	str	r0, [r4, #4]
   1e330:	str	r1, [r2]
   1e334:	ldr	r1, [r6, #36]	; 0x24
   1e338:	mov	r0, r3
   1e33c:	str	r1, [r2, #4]
   1e340:	str	r2, [r6, #36]	; 0x24
   1e344:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e348:	bl	11fe4 <abort@plt>
   1e34c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e350:	ldr	r6, [r1]
   1e354:	ldr	r3, [r1, #4]
   1e358:	cmp	r6, r3
   1e35c:	bcs	1e42c <__assert_fail@plt+0xc424>
   1e360:	mov	r9, r2
   1e364:	mov	r5, r0
   1e368:	mov	r8, r1
   1e36c:	add	r6, r6, #8
   1e370:	mov	sl, #0
   1e374:	ldr	fp, [r6, #-8]
   1e378:	mov	r7, r6
   1e37c:	cmp	fp, #0
   1e380:	beq	1e420 <__assert_fail@plt+0xc418>
   1e384:	ldr	r4, [r6, #-4]
   1e388:	cmp	r4, #0
   1e38c:	beq	1e410 <__assert_fail@plt+0xc408>
   1e390:	ldr	r1, [r5, #8]
   1e394:	b	1e3b0 <__assert_fail@plt+0xc3a8>
   1e398:	ldr	r3, [ip, #4]
   1e39c:	cmp	r2, #0
   1e3a0:	str	r3, [r4, #4]
   1e3a4:	str	r4, [ip, #4]
   1e3a8:	beq	1e40c <__assert_fail@plt+0xc404>
   1e3ac:	mov	r4, r2
   1e3b0:	ldr	fp, [r4]
   1e3b4:	ldr	r3, [r5, #24]
   1e3b8:	mov	r0, fp
   1e3bc:	blx	r3
   1e3c0:	ldr	r1, [r5, #8]
   1e3c4:	cmp	r0, r1
   1e3c8:	bcs	1e4cc <__assert_fail@plt+0xc4c4>
   1e3cc:	ldr	r3, [r5]
   1e3d0:	ldr	r2, [r4, #4]
   1e3d4:	add	ip, r3, r0, lsl #3
   1e3d8:	ldr	lr, [r3, r0, lsl #3]
   1e3dc:	cmp	lr, #0
   1e3e0:	bne	1e398 <__assert_fail@plt+0xc390>
   1e3e4:	ldr	ip, [r5, #12]
   1e3e8:	str	fp, [r3, r0, lsl #3]
   1e3ec:	add	r3, ip, #1
   1e3f0:	str	r3, [r5, #12]
   1e3f4:	str	lr, [r4]
   1e3f8:	ldr	r3, [r5, #36]	; 0x24
   1e3fc:	cmp	r2, #0
   1e400:	str	r3, [r4, #4]
   1e404:	str	r4, [r5, #36]	; 0x24
   1e408:	bne	1e3ac <__assert_fail@plt+0xc3a4>
   1e40c:	ldr	fp, [r6, #-8]
   1e410:	cmp	r9, #0
   1e414:	str	sl, [r6, #-4]
   1e418:	beq	1e434 <__assert_fail@plt+0xc42c>
   1e41c:	ldr	r3, [r8, #4]
   1e420:	cmp	r3, r7
   1e424:	add	r6, r6, #8
   1e428:	bhi	1e374 <__assert_fail@plt+0xc36c>
   1e42c:	mov	r0, #1
   1e430:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e434:	ldr	r3, [r5, #24]
   1e438:	ldr	r1, [r5, #8]
   1e43c:	mov	r0, fp
   1e440:	blx	r3
   1e444:	ldr	r3, [r5, #8]
   1e448:	cmp	r0, r3
   1e44c:	bcs	1e4cc <__assert_fail@plt+0xc4c4>
   1e450:	ldr	r3, [r5]
   1e454:	add	r4, r3, r0, lsl #3
   1e458:	ldr	r2, [r3, r0, lsl #3]
   1e45c:	cmp	r2, #0
   1e460:	beq	1e4a0 <__assert_fail@plt+0xc498>
   1e464:	ldr	r0, [r5, #36]	; 0x24
   1e468:	cmp	r0, #0
   1e46c:	beq	1e4b4 <__assert_fail@plt+0xc4ac>
   1e470:	ldr	r3, [r0, #4]
   1e474:	str	r3, [r5, #36]	; 0x24
   1e478:	ldr	r3, [r4, #4]
   1e47c:	str	fp, [r0]
   1e480:	str	r3, [r0, #4]
   1e484:	str	r0, [r4, #4]
   1e488:	ldr	r2, [r8, #12]
   1e48c:	str	sl, [r6, #-8]
   1e490:	sub	r2, r2, #1
   1e494:	ldr	r3, [r8, #4]
   1e498:	str	r2, [r8, #12]
   1e49c:	b	1e420 <__assert_fail@plt+0xc418>
   1e4a0:	ldr	r2, [r5, #12]
   1e4a4:	str	fp, [r3, r0, lsl #3]
   1e4a8:	add	r3, r2, #1
   1e4ac:	str	r3, [r5, #12]
   1e4b0:	b	1e488 <__assert_fail@plt+0xc480>
   1e4b4:	mov	r0, #8
   1e4b8:	bl	2799c <__assert_fail@plt+0x15994>
   1e4bc:	cmp	r0, #0
   1e4c0:	bne	1e478 <__assert_fail@plt+0xc470>
   1e4c4:	mov	r0, r9
   1e4c8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e4cc:	bl	11fe4 <abort@plt>
   1e4d0:	ldr	r0, [r0, #8]
   1e4d4:	bx	lr
   1e4d8:	ldr	r0, [r0, #12]
   1e4dc:	bx	lr
   1e4e0:	ldr	r0, [r0, #16]
   1e4e4:	bx	lr
   1e4e8:	ldm	r0, {r1, ip}
   1e4ec:	mov	r0, #0
   1e4f0:	cmp	r1, ip
   1e4f4:	bcs	1e53c <__assert_fail@plt+0xc534>
   1e4f8:	ldr	r3, [r1]
   1e4fc:	cmp	r3, #0
   1e500:	beq	1e52c <__assert_fail@plt+0xc524>
   1e504:	ldr	r3, [r1, #4]
   1e508:	mov	r2, #1
   1e50c:	cmp	r3, #0
   1e510:	beq	1e524 <__assert_fail@plt+0xc51c>
   1e514:	ldr	r3, [r3, #4]
   1e518:	add	r2, r2, #1
   1e51c:	cmp	r3, #0
   1e520:	bne	1e514 <__assert_fail@plt+0xc50c>
   1e524:	cmp	r0, r2
   1e528:	movcc	r0, r2
   1e52c:	add	r1, r1, #8
   1e530:	cmp	r1, ip
   1e534:	bcc	1e4f8 <__assert_fail@plt+0xc4f0>
   1e538:	bx	lr
   1e53c:	bx	lr
   1e540:	push	{lr}		; (str lr, [sp, #-4]!)
   1e544:	mov	r2, #0
   1e548:	ldm	r0, {r1, lr}
   1e54c:	mov	ip, r2
   1e550:	cmp	r1, lr
   1e554:	bcs	1e594 <__assert_fail@plt+0xc58c>
   1e558:	ldr	r3, [r1]
   1e55c:	cmp	r3, #0
   1e560:	beq	1e588 <__assert_fail@plt+0xc580>
   1e564:	ldr	r3, [r1, #4]
   1e568:	add	ip, ip, #1
   1e56c:	cmp	r3, #0
   1e570:	add	r2, r2, #1
   1e574:	beq	1e588 <__assert_fail@plt+0xc580>
   1e578:	ldr	r3, [r3, #4]
   1e57c:	add	r2, r2, #1
   1e580:	cmp	r3, #0
   1e584:	bne	1e578 <__assert_fail@plt+0xc570>
   1e588:	add	r1, r1, #8
   1e58c:	cmp	r1, lr
   1e590:	bcc	1e558 <__assert_fail@plt+0xc550>
   1e594:	ldr	r3, [r0, #12]
   1e598:	cmp	r3, ip
   1e59c:	ldreq	r0, [r0, #16]
   1e5a0:	subeq	r0, r0, r2
   1e5a4:	clzeq	r0, r0
   1e5a8:	lsreq	r0, r0, #5
   1e5ac:	movne	r0, #0
   1e5b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1e5b4:	push	{r4, r5, r6, r7, lr}
   1e5b8:	mov	r5, r1
   1e5bc:	ldm	r0, {ip, lr}
   1e5c0:	sub	sp, sp, #12
   1e5c4:	ldr	r3, [r0, #16]
   1e5c8:	cmp	ip, lr
   1e5cc:	mov	r4, #0
   1e5d0:	ldr	r6, [r0, #8]
   1e5d4:	ldr	r7, [r0, #12]
   1e5d8:	bcs	1e61c <__assert_fail@plt+0xc614>
   1e5dc:	ldr	r2, [ip]
   1e5e0:	cmp	r2, #0
   1e5e4:	beq	1e610 <__assert_fail@plt+0xc608>
   1e5e8:	ldr	r2, [ip, #4]
   1e5ec:	mov	r1, #1
   1e5f0:	cmp	r2, #0
   1e5f4:	beq	1e608 <__assert_fail@plt+0xc600>
   1e5f8:	ldr	r2, [r2, #4]
   1e5fc:	add	r1, r1, #1
   1e600:	cmp	r2, #0
   1e604:	bne	1e5f8 <__assert_fail@plt+0xc5f0>
   1e608:	cmp	r4, r1
   1e60c:	movcc	r4, r1
   1e610:	add	ip, ip, #8
   1e614:	cmp	ip, lr
   1e618:	bcc	1e5dc <__assert_fail@plt+0xc5d4>
   1e61c:	ldr	r2, [pc, #116]	; 1e698 <__assert_fail@plt+0xc690>
   1e620:	mov	r1, #1
   1e624:	mov	r0, r5
   1e628:	bl	11e94 <__fprintf_chk@plt>
   1e62c:	mov	r3, r6
   1e630:	ldr	r2, [pc, #100]	; 1e69c <__assert_fail@plt+0xc694>
   1e634:	mov	r1, #1
   1e638:	mov	r0, r5
   1e63c:	bl	11e94 <__fprintf_chk@plt>
   1e640:	vmov	s15, r7
   1e644:	vldr	d5, [pc, #68]	; 1e690 <__assert_fail@plt+0xc688>
   1e648:	mov	r3, r7
   1e64c:	ldr	r2, [pc, #76]	; 1e6a0 <__assert_fail@plt+0xc698>
   1e650:	vcvt.f64.u32	d6, s15
   1e654:	vmov	s15, r6
   1e658:	mov	r1, #1
   1e65c:	mov	r0, r5
   1e660:	vcvt.f64.u32	d7, s15
   1e664:	vmul.f64	d6, d6, d5
   1e668:	vdiv.f64	d5, d6, d7
   1e66c:	vstr	d5, [sp]
   1e670:	bl	11e94 <__fprintf_chk@plt>
   1e674:	mov	r3, r4
   1e678:	mov	r0, r5
   1e67c:	ldr	r2, [pc, #32]	; 1e6a4 <__assert_fail@plt+0xc69c>
   1e680:	mov	r1, #1
   1e684:	add	sp, sp, #12
   1e688:	pop	{r4, r5, r6, r7, lr}
   1e68c:	b	11e94 <__fprintf_chk@plt>
   1e690:	andeq	r0, r0, r0
   1e694:	subsmi	r0, r9, r0
   1e698:	strheq	fp, [r2], -r0
   1e69c:	andeq	fp, r2, r8, asr #1
   1e6a0:	andeq	fp, r2, r0, ror #1
   1e6a4:	andeq	fp, r2, r4, lsl #2
   1e6a8:	push	{r4, r5, r6, lr}
   1e6ac:	mov	r5, r1
   1e6b0:	ldr	r3, [r0, #24]
   1e6b4:	mov	r6, r0
   1e6b8:	ldr	r1, [r0, #8]
   1e6bc:	mov	r0, r5
   1e6c0:	blx	r3
   1e6c4:	ldr	r3, [r6, #8]
   1e6c8:	cmp	r0, r3
   1e6cc:	bcs	1e72c <__assert_fail@plt+0xc724>
   1e6d0:	ldr	r3, [r6]
   1e6d4:	add	r4, r3, r0, lsl #3
   1e6d8:	ldr	r1, [r3, r0, lsl #3]
   1e6dc:	cmp	r1, #0
   1e6e0:	bne	1e6ec <__assert_fail@plt+0xc6e4>
   1e6e4:	b	1e714 <__assert_fail@plt+0xc70c>
   1e6e8:	ldr	r1, [r4]
   1e6ec:	cmp	r5, r1
   1e6f0:	beq	1e71c <__assert_fail@plt+0xc714>
   1e6f4:	ldr	r3, [r6, #28]
   1e6f8:	mov	r0, r5
   1e6fc:	blx	r3
   1e700:	cmp	r0, #0
   1e704:	bne	1e724 <__assert_fail@plt+0xc71c>
   1e708:	ldr	r4, [r4, #4]
   1e70c:	cmp	r4, #0
   1e710:	bne	1e6e8 <__assert_fail@plt+0xc6e0>
   1e714:	mov	r0, #0
   1e718:	pop	{r4, r5, r6, pc}
   1e71c:	mov	r0, r5
   1e720:	pop	{r4, r5, r6, pc}
   1e724:	ldr	r0, [r4]
   1e728:	pop	{r4, r5, r6, pc}
   1e72c:	bl	11fe4 <abort@plt>
   1e730:	ldr	r3, [r0, #16]
   1e734:	cmp	r3, #0
   1e738:	beq	1e76c <__assert_fail@plt+0xc764>
   1e73c:	ldr	r3, [r0]
   1e740:	ldr	r2, [r0, #4]
   1e744:	cmp	r3, r2
   1e748:	bcc	1e75c <__assert_fail@plt+0xc754>
   1e74c:	b	1e774 <__assert_fail@plt+0xc76c>
   1e750:	add	r3, r3, #8
   1e754:	cmp	r3, r2
   1e758:	bcs	1e774 <__assert_fail@plt+0xc76c>
   1e75c:	ldr	r0, [r3]
   1e760:	cmp	r0, #0
   1e764:	beq	1e750 <__assert_fail@plt+0xc748>
   1e768:	bx	lr
   1e76c:	mov	r0, r3
   1e770:	bx	lr
   1e774:	push	{r4, lr}
   1e778:	bl	11fe4 <abort@plt>
   1e77c:	push	{r4, r5, r6, lr}
   1e780:	mov	r4, r1
   1e784:	ldr	r3, [r0, #24]
   1e788:	mov	r5, r0
   1e78c:	ldr	r1, [r0, #8]
   1e790:	mov	r0, r4
   1e794:	blx	r3
   1e798:	ldr	r3, [r5, #8]
   1e79c:	cmp	r0, r3
   1e7a0:	bcs	1e804 <__assert_fail@plt+0xc7fc>
   1e7a4:	ldr	r3, [r5]
   1e7a8:	add	r0, r3, r0, lsl #3
   1e7ac:	mov	r3, r0
   1e7b0:	b	1e7bc <__assert_fail@plt+0xc7b4>
   1e7b4:	cmp	r3, #0
   1e7b8:	beq	1e7d0 <__assert_fail@plt+0xc7c8>
   1e7bc:	ldm	r3, {r2, r3}
   1e7c0:	cmp	r4, r2
   1e7c4:	bne	1e7b4 <__assert_fail@plt+0xc7ac>
   1e7c8:	cmp	r3, #0
   1e7cc:	bne	1e7fc <__assert_fail@plt+0xc7f4>
   1e7d0:	ldr	r2, [r5, #4]
   1e7d4:	mov	r3, r0
   1e7d8:	b	1e7e8 <__assert_fail@plt+0xc7e0>
   1e7dc:	ldr	r0, [r3]
   1e7e0:	cmp	r0, #0
   1e7e4:	popne	{r4, r5, r6, pc}
   1e7e8:	add	r3, r3, #8
   1e7ec:	cmp	r3, r2
   1e7f0:	bcc	1e7dc <__assert_fail@plt+0xc7d4>
   1e7f4:	mov	r0, #0
   1e7f8:	pop	{r4, r5, r6, pc}
   1e7fc:	ldr	r0, [r3]
   1e800:	pop	{r4, r5, r6, pc}
   1e804:	bl	11fe4 <abort@plt>
   1e808:	push	{r4, r5, r6, lr}
   1e80c:	mov	r5, r0
   1e810:	ldr	r4, [r0]
   1e814:	ldr	r0, [r0, #4]
   1e818:	cmp	r4, r0
   1e81c:	bcs	1e898 <__assert_fail@plt+0xc890>
   1e820:	add	r4, r4, #8
   1e824:	mov	ip, #0
   1e828:	ldr	r3, [r4, #-8]
   1e82c:	mov	r6, r4
   1e830:	cmp	r3, #0
   1e834:	beq	1e880 <__assert_fail@plt+0xc878>
   1e838:	cmp	r2, ip
   1e83c:	bls	1e88c <__assert_fail@plt+0xc884>
   1e840:	str	r3, [r1, ip, lsl #2]
   1e844:	ldr	r3, [r4, #-4]
   1e848:	add	r0, ip, #1
   1e84c:	cmp	r3, #0
   1e850:	add	ip, r1, ip, lsl #2
   1e854:	beq	1e878 <__assert_fail@plt+0xc870>
   1e858:	cmp	r2, r0
   1e85c:	beq	1e894 <__assert_fail@plt+0xc88c>
   1e860:	ldr	lr, [r3]
   1e864:	add	r0, r0, #1
   1e868:	str	lr, [ip, #4]!
   1e86c:	ldr	r3, [r3, #4]
   1e870:	cmp	r3, #0
   1e874:	bne	1e858 <__assert_fail@plt+0xc850>
   1e878:	mov	ip, r0
   1e87c:	ldr	r0, [r5, #4]
   1e880:	cmp	r0, r6
   1e884:	add	r4, r4, #8
   1e888:	bhi	1e828 <__assert_fail@plt+0xc820>
   1e88c:	mov	r0, ip
   1e890:	pop	{r4, r5, r6, pc}
   1e894:	pop	{r4, r5, r6, pc}
   1e898:	mov	r0, #0
   1e89c:	pop	{r4, r5, r6, pc}
   1e8a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e8a4:	ldr	r3, [r0, #4]
   1e8a8:	ldr	r8, [r0]
   1e8ac:	cmp	r8, r3
   1e8b0:	bcs	1e914 <__assert_fail@plt+0xc90c>
   1e8b4:	mov	r7, r2
   1e8b8:	mov	r6, r1
   1e8bc:	mov	r9, r0
   1e8c0:	mov	r5, #0
   1e8c4:	ldr	r0, [r8]
   1e8c8:	cmp	r0, #0
   1e8cc:	beq	1e900 <__assert_fail@plt+0xc8f8>
   1e8d0:	mov	r4, r8
   1e8d4:	b	1e8dc <__assert_fail@plt+0xc8d4>
   1e8d8:	ldr	r0, [r4]
   1e8dc:	mov	r1, r7
   1e8e0:	blx	r6
   1e8e4:	cmp	r0, #0
   1e8e8:	beq	1e90c <__assert_fail@plt+0xc904>
   1e8ec:	ldr	r4, [r4, #4]
   1e8f0:	add	r5, r5, #1
   1e8f4:	cmp	r4, #0
   1e8f8:	bne	1e8d8 <__assert_fail@plt+0xc8d0>
   1e8fc:	ldr	r3, [r9, #4]
   1e900:	add	r8, r8, #8
   1e904:	cmp	r3, r8
   1e908:	bhi	1e8c4 <__assert_fail@plt+0xc8bc>
   1e90c:	mov	r0, r5
   1e910:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e914:	mov	r5, #0
   1e918:	b	1e90c <__assert_fail@plt+0xc904>
   1e91c:	push	{r4, r5, r6, lr}
   1e920:	mov	r4, r0
   1e924:	ldrb	r0, [r0]
   1e928:	cmp	r0, #0
   1e92c:	beq	1e95c <__assert_fail@plt+0xc954>
   1e930:	mov	r5, r1
   1e934:	mov	r1, #0
   1e938:	rsb	r1, r1, r1, lsl #5
   1e93c:	add	r0, r1, r0
   1e940:	mov	r1, r5
   1e944:	bl	28704 <_obstack_memory_used@@Base+0x278>
   1e948:	ldrb	r0, [r4, #1]!
   1e94c:	cmp	r0, #0
   1e950:	bne	1e938 <__assert_fail@plt+0xc930>
   1e954:	mov	r0, r1
   1e958:	pop	{r4, r5, r6, pc}
   1e95c:	mov	r1, r0
   1e960:	b	1e954 <__assert_fail@plt+0xc94c>
   1e964:	push	{lr}		; (str lr, [sp, #-4]!)
   1e968:	mov	ip, r0
   1e96c:	ldr	lr, [pc, #16]	; 1e984 <__assert_fail@plt+0xc97c>
   1e970:	ldm	lr!, {r0, r1, r2, r3}
   1e974:	ldr	lr, [lr]
   1e978:	stmia	ip!, {r0, r1, r2, r3}
   1e97c:	str	lr, [ip]
   1e980:	pop	{pc}		; (ldr pc, [sp], #4)
   1e984:	muleq	r2, ip, r0
   1e988:	cmp	r2, #0
   1e98c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e990:	mov	r4, r0
   1e994:	ldr	sl, [pc, #548]	; 1ebc0 <__assert_fail@plt+0xcbb8>
   1e998:	mov	r0, #40	; 0x28
   1e99c:	movne	sl, r2
   1e9a0:	cmp	r3, #0
   1e9a4:	ldr	fp, [pc, #536]	; 1ebc4 <__assert_fail@plt+0xcbbc>
   1e9a8:	mov	r5, r1
   1e9ac:	movne	fp, r3
   1e9b0:	bl	2799c <__assert_fail@plt+0x15994>
   1e9b4:	subs	r8, r0, #0
   1e9b8:	beq	1ea50 <__assert_fail@plt+0xca48>
   1e9bc:	cmp	r5, #0
   1e9c0:	ldr	r3, [pc, #512]	; 1ebc8 <__assert_fail@plt+0xcbc0>
   1e9c4:	beq	1ea58 <__assert_fail@plt+0xca50>
   1e9c8:	cmp	r5, r3
   1e9cc:	str	r5, [r8, #20]
   1e9d0:	beq	1ea5c <__assert_fail@plt+0xca54>
   1e9d4:	vldr	s15, [r5, #8]
   1e9d8:	vldr	s14, [pc, #456]	; 1eba8 <__assert_fail@plt+0xcba0>
   1e9dc:	vcmpe.f32	s15, s14
   1e9e0:	vmrs	APSR_nzcv, fpscr
   1e9e4:	ble	1ea40 <__assert_fail@plt+0xca38>
   1e9e8:	vldr	s13, [pc, #444]	; 1ebac <__assert_fail@plt+0xcba4>
   1e9ec:	vcmpe.f32	s15, s13
   1e9f0:	vmrs	APSR_nzcv, fpscr
   1e9f4:	bpl	1ea40 <__assert_fail@plt+0xca38>
   1e9f8:	vldr	s13, [pc, #432]	; 1ebb0 <__assert_fail@plt+0xcba8>
   1e9fc:	vldr	s12, [r5, #12]
   1ea00:	vcmpe.f32	s12, s13
   1ea04:	vmrs	APSR_nzcv, fpscr
   1ea08:	ble	1ea40 <__assert_fail@plt+0xca38>
   1ea0c:	vldr	s13, [r5]
   1ea10:	vcmpe.f32	s13, #0.0
   1ea14:	vmrs	APSR_nzcv, fpscr
   1ea18:	blt	1ea40 <__assert_fail@plt+0xca38>
   1ea1c:	vadd.f32	s14, s13, s14
   1ea20:	vldr	s13, [r5, #4]
   1ea24:	vcmpe.f32	s14, s13
   1ea28:	vmrs	APSR_nzcv, fpscr
   1ea2c:	bpl	1ea40 <__assert_fail@plt+0xca38>
   1ea30:	vldr	s12, [pc, #380]	; 1ebb4 <__assert_fail@plt+0xcbac>
   1ea34:	vcmpe.f32	s13, s12
   1ea38:	vmrs	APSR_nzcv, fpscr
   1ea3c:	bls	1eb8c <__assert_fail@plt+0xcb84>
   1ea40:	str	r3, [r8, #20]
   1ea44:	mov	r0, r8
   1ea48:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   1ea4c:	mov	r8, #0
   1ea50:	mov	r0, r8
   1ea54:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea58:	str	r3, [r8, #20]
   1ea5c:	vldr	s15, [pc, #340]	; 1ebb8 <__assert_fail@plt+0xcbb0>
   1ea60:	vmov	s14, r4
   1ea64:	vldr	s13, [pc, #336]	; 1ebbc <__assert_fail@plt+0xcbb4>
   1ea68:	vcvt.f32.u32	s12, s14
   1ea6c:	vdiv.f32	s14, s12, s15
   1ea70:	vcmpe.f32	s14, s13
   1ea74:	vmrs	APSR_nzcv, fpscr
   1ea78:	bge	1eb78 <__assert_fail@plt+0xcb70>
   1ea7c:	vcvt.u32.f32	s15, s14
   1ea80:	vmov	r4, s15
   1ea84:	cmp	r4, #10
   1ea88:	movcc	r4, #10
   1ea8c:	orr	r7, r4, #1
   1ea90:	cmn	r7, #1
   1ea94:	ldrne	r9, [pc, #304]	; 1ebcc <__assert_fail@plt+0xcbc4>
   1ea98:	beq	1eb10 <__assert_fail@plt+0xcb08>
   1ea9c:	cmp	r7, #9
   1eaa0:	bls	1eb84 <__assert_fail@plt+0xcb7c>
   1eaa4:	umull	r2, r3, r9, r7
   1eaa8:	lsr	r3, r3, #1
   1eaac:	add	r3, r3, r3, lsl #1
   1eab0:	cmp	r7, r3
   1eab4:	beq	1eb04 <__assert_fail@plt+0xcafc>
   1eab8:	mov	r6, #16
   1eabc:	mov	r5, #9
   1eac0:	mov	r4, #3
   1eac4:	b	1ead8 <__assert_fail@plt+0xcad0>
   1eac8:	bl	28704 <_obstack_memory_used@@Base+0x278>
   1eacc:	add	r6, r6, #8
   1ead0:	cmp	r1, #0
   1ead4:	beq	1eb04 <__assert_fail@plt+0xcafc>
   1ead8:	add	r5, r5, r6
   1eadc:	add	r4, r4, #2
   1eae0:	cmp	r5, r7
   1eae4:	mov	r0, r7
   1eae8:	mov	r1, r4
   1eaec:	bcc	1eac8 <__assert_fail@plt+0xcac0>
   1eaf0:	mov	r1, r4
   1eaf4:	mov	r0, r7
   1eaf8:	bl	28704 <_obstack_memory_used@@Base+0x278>
   1eafc:	cmp	r1, #0
   1eb00:	bne	1eb10 <__assert_fail@plt+0xcb08>
   1eb04:	add	r7, r7, #2
   1eb08:	cmn	r7, #1
   1eb0c:	bne	1ea9c <__assert_fail@plt+0xca94>
   1eb10:	lsrs	r3, r7, #30
   1eb14:	movne	r4, #1
   1eb18:	moveq	r4, #0
   1eb1c:	tst	r7, #536870912	; 0x20000000
   1eb20:	bne	1eb78 <__assert_fail@plt+0xcb70>
   1eb24:	cmp	r4, #0
   1eb28:	bne	1eb78 <__assert_fail@plt+0xcb70>
   1eb2c:	str	r7, [r8, #8]
   1eb30:	mov	r0, r7
   1eb34:	mov	r1, #8
   1eb38:	bl	27954 <__assert_fail@plt+0x1594c>
   1eb3c:	cmp	r0, #0
   1eb40:	str	r0, [r8]
   1eb44:	beq	1ea44 <__assert_fail@plt+0xca3c>
   1eb48:	ldr	r3, [r8, #8]
   1eb4c:	str	r4, [r8, #12]
   1eb50:	str	r4, [r8, #16]
   1eb54:	add	r0, r0, r3, lsl #3
   1eb58:	ldr	r3, [sp, #40]	; 0x28
   1eb5c:	str	r0, [r8, #4]
   1eb60:	str	sl, [r8, #24]
   1eb64:	str	fp, [r8, #28]
   1eb68:	str	r3, [r8, #32]
   1eb6c:	str	r4, [r8, #36]	; 0x24
   1eb70:	mov	r0, r8
   1eb74:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb78:	mov	r3, #0
   1eb7c:	str	r3, [r8, #8]
   1eb80:	b	1ea44 <__assert_fail@plt+0xca3c>
   1eb84:	mov	r4, #3
   1eb88:	b	1eaf0 <__assert_fail@plt+0xcae8>
   1eb8c:	vcmpe.f32	s15, s14
   1eb90:	vmrs	APSR_nzcv, fpscr
   1eb94:	ble	1ea40 <__assert_fail@plt+0xca38>
   1eb98:	ldrb	r3, [r5, #16]
   1eb9c:	cmp	r3, #0
   1eba0:	bne	1ea84 <__assert_fail@plt+0xca7c>
   1eba4:	b	1ea60 <__assert_fail@plt+0xca58>
   1eba8:	stclcc	12, cr12, [ip, #820]	; 0x334
   1ebac:	svccc	0x00666666
   1ebb0:	svccc	0x008ccccd
   1ebb4:	svccc	0x00800000
   1ebb8:	svccc	0x004ccccd
   1ebbc:	svcmi	0x00800000
   1ebc0:	andeq	lr, r1, r8, lsl #4
   1ebc4:	andeq	lr, r1, ip, lsl r2
   1ebc8:	muleq	r2, ip, r0
   1ebcc:	bge	feac9680 <optarg@@GLIBC_2.4+0xfea8d3a0>
   1ebd0:	push	{r4, r5, r6, r7, r8, lr}
   1ebd4:	mov	r5, r0
   1ebd8:	ldr	r7, [r0]
   1ebdc:	ldr	r3, [r0, #4]
   1ebe0:	cmp	r7, r3
   1ebe4:	addcc	r7, r7, #8
   1ebe8:	movcc	r6, #0
   1ebec:	bcs	1ec68 <__assert_fail@plt+0xcc60>
   1ebf0:	ldr	r2, [r7, #-8]
   1ebf4:	mov	r8, r7
   1ebf8:	cmp	r2, #0
   1ebfc:	beq	1ec5c <__assert_fail@plt+0xcc54>
   1ec00:	ldr	r4, [r7, #-4]
   1ec04:	ldr	r2, [r5, #32]
   1ec08:	cmp	r4, #0
   1ec0c:	beq	1ec40 <__assert_fail@plt+0xcc38>
   1ec10:	cmp	r2, #0
   1ec14:	beq	1ec24 <__assert_fail@plt+0xcc1c>
   1ec18:	ldr	r0, [r4]
   1ec1c:	blx	r2
   1ec20:	ldr	r2, [r5, #32]
   1ec24:	ldr	r3, [r4, #4]
   1ec28:	ldr	r1, [r5, #36]	; 0x24
   1ec2c:	str	r6, [r4]
   1ec30:	str	r1, [r4, #4]
   1ec34:	str	r4, [r5, #36]	; 0x24
   1ec38:	subs	r4, r3, #0
   1ec3c:	bne	1ec10 <__assert_fail@plt+0xcc08>
   1ec40:	cmp	r2, #0
   1ec44:	beq	1ec50 <__assert_fail@plt+0xcc48>
   1ec48:	ldr	r0, [r7, #-8]
   1ec4c:	blx	r2
   1ec50:	str	r6, [r7, #-8]
   1ec54:	str	r6, [r7, #-4]
   1ec58:	ldr	r3, [r5, #4]
   1ec5c:	cmp	r3, r8
   1ec60:	add	r7, r7, #8
   1ec64:	bhi	1ebf0 <__assert_fail@plt+0xcbe8>
   1ec68:	mov	r3, #0
   1ec6c:	str	r3, [r5, #12]
   1ec70:	str	r3, [r5, #16]
   1ec74:	pop	{r4, r5, r6, r7, r8, pc}
   1ec78:	ldr	r3, [r0, #32]
   1ec7c:	push	{r4, r5, r6, lr}
   1ec80:	cmp	r3, #0
   1ec84:	mov	r5, r0
   1ec88:	beq	1ece8 <__assert_fail@plt+0xcce0>
   1ec8c:	ldr	r3, [r0, #16]
   1ec90:	cmp	r3, #0
   1ec94:	beq	1ece8 <__assert_fail@plt+0xcce0>
   1ec98:	ldr	r6, [r0]
   1ec9c:	ldr	r3, [r0, #4]
   1eca0:	cmp	r6, r3
   1eca4:	bcs	1ed24 <__assert_fail@plt+0xcd1c>
   1eca8:	ldr	r0, [r6]
   1ecac:	cmp	r0, #0
   1ecb0:	beq	1ecd8 <__assert_fail@plt+0xccd0>
   1ecb4:	mov	r4, r6
   1ecb8:	b	1ecc0 <__assert_fail@plt+0xccb8>
   1ecbc:	ldr	r0, [r4]
   1ecc0:	ldr	r3, [r5, #32]
   1ecc4:	blx	r3
   1ecc8:	ldr	r4, [r4, #4]
   1eccc:	cmp	r4, #0
   1ecd0:	bne	1ecbc <__assert_fail@plt+0xccb4>
   1ecd4:	ldr	r3, [r5, #4]
   1ecd8:	add	r6, r6, #8
   1ecdc:	cmp	r3, r6
   1ece0:	bhi	1eca8 <__assert_fail@plt+0xcca0>
   1ece4:	b	1ecec <__assert_fail@plt+0xcce4>
   1ece8:	ldr	r3, [r5, #4]
   1ecec:	ldr	r6, [r5]
   1ecf0:	cmp	r6, r3
   1ecf4:	bcs	1ed24 <__assert_fail@plt+0xcd1c>
   1ecf8:	ldr	r0, [r6, #4]
   1ecfc:	cmp	r0, #0
   1ed00:	beq	1ed18 <__assert_fail@plt+0xcd10>
   1ed04:	ldr	r4, [r0, #4]
   1ed08:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   1ed0c:	subs	r0, r4, #0
   1ed10:	bne	1ed04 <__assert_fail@plt+0xccfc>
   1ed14:	ldr	r3, [r5, #4]
   1ed18:	add	r6, r6, #8
   1ed1c:	cmp	r3, r6
   1ed20:	bhi	1ecf8 <__assert_fail@plt+0xccf0>
   1ed24:	ldr	r0, [r5, #36]	; 0x24
   1ed28:	cmp	r0, #0
   1ed2c:	beq	1ed40 <__assert_fail@plt+0xcd38>
   1ed30:	ldr	r4, [r0, #4]
   1ed34:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   1ed38:	subs	r0, r4, #0
   1ed3c:	bne	1ed30 <__assert_fail@plt+0xcd28>
   1ed40:	ldr	r0, [r5]
   1ed44:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   1ed48:	mov	r0, r5
   1ed4c:	pop	{r4, r5, r6, lr}
   1ed50:	b	1e0b0 <__assert_fail@plt+0xc0a8>
   1ed54:	ldr	r3, [r0, #20]
   1ed58:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ed5c:	mov	r8, r0
   1ed60:	ldrb	r2, [r3, #16]
   1ed64:	sub	sp, sp, #40	; 0x28
   1ed68:	cmp	r2, #0
   1ed6c:	bne	1ed98 <__assert_fail@plt+0xcd90>
   1ed70:	vmov	s15, r1
   1ed74:	vldr	s13, [r3, #8]
   1ed78:	vldr	s14, [pc, #648]	; 1f008 <__assert_fail@plt+0xd000>
   1ed7c:	vcvt.f32.u32	s12, s15
   1ed80:	vdiv.f32	s15, s12, s13
   1ed84:	vcmpe.f32	s15, s14
   1ed88:	vmrs	APSR_nzcv, fpscr
   1ed8c:	bge	1efc0 <__assert_fail@plt+0xcfb8>
   1ed90:	vcvt.u32.f32	s15, s15
   1ed94:	vmov	r1, s15
   1ed98:	cmp	r1, #10
   1ed9c:	movcc	r1, #10
   1eda0:	orr	r7, r1, #1
   1eda4:	cmn	r7, #1
   1eda8:	ldrne	r9, [pc, #604]	; 1f00c <__assert_fail@plt+0xd004>
   1edac:	beq	1ee24 <__assert_fail@plt+0xce1c>
   1edb0:	cmp	r7, #9
   1edb4:	bls	1efd0 <__assert_fail@plt+0xcfc8>
   1edb8:	umull	r2, r3, r9, r7
   1edbc:	lsr	r3, r3, #1
   1edc0:	add	r3, r3, r3, lsl #1
   1edc4:	cmp	r7, r3
   1edc8:	beq	1ee18 <__assert_fail@plt+0xce10>
   1edcc:	mov	r6, #16
   1edd0:	mov	r5, #9
   1edd4:	mov	r4, #3
   1edd8:	b	1edf4 <__assert_fail@plt+0xcdec>
   1eddc:	mov	r1, r4
   1ede0:	mov	r0, r7
   1ede4:	bl	28704 <_obstack_memory_used@@Base+0x278>
   1ede8:	add	r6, r6, #8
   1edec:	cmp	r1, #0
   1edf0:	beq	1ee18 <__assert_fail@plt+0xce10>
   1edf4:	add	r5, r5, r6
   1edf8:	cmp	r5, r7
   1edfc:	add	r4, r4, #2
   1ee00:	bcc	1eddc <__assert_fail@plt+0xcdd4>
   1ee04:	mov	r1, r4
   1ee08:	mov	r0, r7
   1ee0c:	bl	28704 <_obstack_memory_used@@Base+0x278>
   1ee10:	cmp	r1, #0
   1ee14:	bne	1ee24 <__assert_fail@plt+0xce1c>
   1ee18:	add	r7, r7, #2
   1ee1c:	cmn	r7, #1
   1ee20:	bne	1edb0 <__assert_fail@plt+0xcda8>
   1ee24:	lsrs	r3, r7, #30
   1ee28:	movne	r4, #1
   1ee2c:	moveq	r4, #0
   1ee30:	tst	r7, #536870912	; 0x20000000
   1ee34:	bne	1efc0 <__assert_fail@plt+0xcfb8>
   1ee38:	cmp	r4, #0
   1ee3c:	bne	1efc0 <__assert_fail@plt+0xcfb8>
   1ee40:	ldr	r3, [r8, #8]
   1ee44:	cmp	r3, r7
   1ee48:	beq	1efb0 <__assert_fail@plt+0xcfa8>
   1ee4c:	mov	r1, #8
   1ee50:	mov	r0, r7
   1ee54:	bl	27954 <__assert_fail@plt+0x1594c>
   1ee58:	cmp	r0, #0
   1ee5c:	str	r0, [sp]
   1ee60:	beq	1efc0 <__assert_fail@plt+0xcfb8>
   1ee64:	ldr	r1, [r8, #24]
   1ee68:	ldr	r5, [r8, #20]
   1ee6c:	ldr	lr, [r8, #28]
   1ee70:	ldr	ip, [r8, #32]
   1ee74:	add	r0, r0, r7, lsl #3
   1ee78:	ldr	r3, [r8, #36]	; 0x24
   1ee7c:	str	r0, [sp, #4]
   1ee80:	str	r1, [sp, #24]
   1ee84:	mov	r2, r4
   1ee88:	mov	r0, sp
   1ee8c:	mov	r1, r8
   1ee90:	str	r7, [sp, #8]
   1ee94:	str	r4, [sp, #12]
   1ee98:	str	r4, [sp, #16]
   1ee9c:	str	r5, [sp, #20]
   1eea0:	str	lr, [sp, #28]
   1eea4:	str	ip, [sp, #32]
   1eea8:	str	r3, [sp, #36]	; 0x24
   1eeac:	bl	1e34c <__assert_fail@plt+0xc344>
   1eeb0:	subs	r9, r0, #0
   1eeb4:	bne	1efd8 <__assert_fail@plt+0xcfd0>
   1eeb8:	ldr	r5, [sp]
   1eebc:	ldr	r2, [sp, #4]
   1eec0:	ldr	r3, [sp, #36]	; 0x24
   1eec4:	cmp	r5, r2
   1eec8:	str	r3, [r8, #36]	; 0x24
   1eecc:	addcc	r5, r5, #8
   1eed0:	movcc	r7, r9
   1eed4:	bcs	1ef84 <__assert_fail@plt+0xcf7c>
   1eed8:	ldr	r3, [r5, #-8]
   1eedc:	mov	r6, r5
   1eee0:	cmp	r3, #0
   1eee4:	beq	1ef78 <__assert_fail@plt+0xcf70>
   1eee8:	ldr	r4, [r5, #-4]
   1eeec:	cmp	r4, #0
   1eef0:	beq	1ef74 <__assert_fail@plt+0xcf6c>
   1eef4:	ldr	r1, [r8, #8]
   1eef8:	b	1ef14 <__assert_fail@plt+0xcf0c>
   1eefc:	ldr	r3, [ip, #4]
   1ef00:	cmp	r2, #0
   1ef04:	str	r3, [r4, #4]
   1ef08:	str	r4, [ip, #4]
   1ef0c:	beq	1ef70 <__assert_fail@plt+0xcf68>
   1ef10:	mov	r4, r2
   1ef14:	ldr	sl, [r4]
   1ef18:	ldr	r3, [r8, #24]
   1ef1c:	mov	r0, sl
   1ef20:	blx	r3
   1ef24:	ldr	r1, [r8, #8]
   1ef28:	cmp	r0, r1
   1ef2c:	bcs	1f004 <__assert_fail@plt+0xcffc>
   1ef30:	ldr	r3, [r8]
   1ef34:	ldr	r2, [r4, #4]
   1ef38:	add	ip, r3, r0, lsl #3
   1ef3c:	ldr	lr, [r3, r0, lsl #3]
   1ef40:	cmp	lr, #0
   1ef44:	bne	1eefc <__assert_fail@plt+0xcef4>
   1ef48:	ldr	ip, [r8, #12]
   1ef4c:	str	sl, [r3, r0, lsl #3]
   1ef50:	add	r3, ip, #1
   1ef54:	str	r3, [r8, #12]
   1ef58:	str	lr, [r4]
   1ef5c:	ldr	r3, [r8, #36]	; 0x24
   1ef60:	cmp	r2, #0
   1ef64:	str	r3, [r4, #4]
   1ef68:	str	r4, [r8, #36]	; 0x24
   1ef6c:	bne	1ef10 <__assert_fail@plt+0xcf08>
   1ef70:	ldr	r2, [sp, #4]
   1ef74:	str	r7, [r5, #-4]
   1ef78:	cmp	r6, r2
   1ef7c:	add	r5, r5, #8
   1ef80:	bcc	1eed8 <__assert_fail@plt+0xced0>
   1ef84:	mov	r1, sp
   1ef88:	mov	r0, r8
   1ef8c:	mov	r2, #0
   1ef90:	bl	1e34c <__assert_fail@plt+0xc344>
   1ef94:	cmp	r0, #0
   1ef98:	beq	1f004 <__assert_fail@plt+0xcffc>
   1ef9c:	ldr	r0, [sp]
   1efa0:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   1efa4:	mov	r0, r9
   1efa8:	add	sp, sp, #40	; 0x28
   1efac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1efb0:	mov	r9, #1
   1efb4:	mov	r0, r9
   1efb8:	add	sp, sp, #40	; 0x28
   1efbc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1efc0:	mov	r9, #0
   1efc4:	mov	r0, r9
   1efc8:	add	sp, sp, #40	; 0x28
   1efcc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1efd0:	mov	r4, #3
   1efd4:	b	1ee04 <__assert_fail@plt+0xcdfc>
   1efd8:	ldr	r0, [r8]
   1efdc:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   1efe0:	ldmib	sp, {r0, r1, r2}
   1efe4:	ldr	ip, [sp]
   1efe8:	ldr	r3, [sp, #36]	; 0x24
   1efec:	stmib	r8, {r0, r1, r2}
   1eff0:	mov	r0, r9
   1eff4:	str	ip, [r8]
   1eff8:	str	r3, [r8, #36]	; 0x24
   1effc:	add	sp, sp, #40	; 0x28
   1f000:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f004:	bl	11fe4 <abort@plt>
   1f008:	svcmi	0x00800000
   1f00c:	bge	feac9ac0 <optarg@@GLIBC_2.4+0xfea8d7e0>
   1f010:	push	{r4, r5, r6, r7, r8, r9, lr}
   1f014:	subs	r5, r1, #0
   1f018:	sub	sp, sp, #12
   1f01c:	beq	1f238 <__assert_fail@plt+0xd230>
   1f020:	ldr	r3, [r0, #24]
   1f024:	mov	r6, r0
   1f028:	ldr	r1, [r0, #8]
   1f02c:	mov	r0, r5
   1f030:	mov	r7, r2
   1f034:	blx	r3
   1f038:	ldr	r3, [r6, #8]
   1f03c:	cmp	r0, r3
   1f040:	mov	r8, r0
   1f044:	bcs	1f238 <__assert_fail@plt+0xd230>
   1f048:	ldr	r9, [r6]
   1f04c:	add	r4, r9, r0, lsl #3
   1f050:	ldr	r1, [r9, r0, lsl #3]
   1f054:	str	r4, [sp, #4]
   1f058:	cmp	r1, #0
   1f05c:	beq	1f23c <__assert_fail@plt+0xd234>
   1f060:	cmp	r5, r1
   1f064:	beq	1f0bc <__assert_fail@plt+0xd0b4>
   1f068:	ldr	r3, [r6, #28]
   1f06c:	mov	r0, r5
   1f070:	blx	r3
   1f074:	cmp	r0, #0
   1f078:	bne	1f0d0 <__assert_fail@plt+0xd0c8>
   1f07c:	ldr	r3, [r4, #4]
   1f080:	cmp	r3, #0
   1f084:	bne	1f0b0 <__assert_fail@plt+0xd0a8>
   1f088:	b	1f0dc <__assert_fail@plt+0xd0d4>
   1f08c:	ldr	r3, [r6, #28]
   1f090:	mov	r0, r5
   1f094:	blx	r3
   1f098:	cmp	r0, #0
   1f09c:	bne	1f150 <__assert_fail@plt+0xd148>
   1f0a0:	ldr	r4, [r4, #4]
   1f0a4:	ldr	r3, [r4, #4]
   1f0a8:	cmp	r3, #0
   1f0ac:	beq	1f0dc <__assert_fail@plt+0xd0d4>
   1f0b0:	ldr	r1, [r3]
   1f0b4:	cmp	r5, r1
   1f0b8:	bne	1f08c <__assert_fail@plt+0xd084>
   1f0bc:	mov	r0, #0
   1f0c0:	cmp	r7, #0
   1f0c4:	strne	r1, [r7]
   1f0c8:	add	sp, sp, #12
   1f0cc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f0d0:	ldr	r1, [r9, r8, lsl #3]
   1f0d4:	cmp	r1, #0
   1f0d8:	bne	1f0bc <__assert_fail@plt+0xd0b4>
   1f0dc:	vldr	s15, [r6, #8]
   1f0e0:	ldr	r3, [r6, #20]
   1f0e4:	vldr	s14, [r6, #12]
   1f0e8:	vcvt.f32.u32	s15, s15
   1f0ec:	vldr	s13, [r3, #8]
   1f0f0:	vcvt.f32.u32	s14, s14
   1f0f4:	vmul.f32	s12, s13, s15
   1f0f8:	vcmpe.f32	s14, s12
   1f0fc:	vmrs	APSR_nzcv, fpscr
   1f100:	bgt	1f15c <__assert_fail@plt+0xd154>
   1f104:	ldr	r4, [sp, #4]
   1f108:	ldr	r3, [r4]
   1f10c:	cmp	r3, #0
   1f110:	beq	1f2a0 <__assert_fail@plt+0xd298>
   1f114:	ldr	r3, [r6, #36]	; 0x24
   1f118:	cmp	r3, #0
   1f11c:	beq	1f288 <__assert_fail@plt+0xd280>
   1f120:	ldr	r2, [r3, #4]
   1f124:	str	r2, [r6, #36]	; 0x24
   1f128:	ldr	r2, [r6, #16]
   1f12c:	ldr	r1, [r4, #4]
   1f130:	add	r2, r2, #1
   1f134:	str	r5, [r3]
   1f138:	str	r1, [r3, #4]
   1f13c:	mov	r0, #1
   1f140:	str	r3, [r4, #4]
   1f144:	str	r2, [r6, #16]
   1f148:	add	sp, sp, #12
   1f14c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f150:	ldr	r3, [r4, #4]
   1f154:	ldr	r1, [r3]
   1f158:	b	1f0d4 <__assert_fail@plt+0xd0cc>
   1f15c:	ldr	r2, [pc, #392]	; 1f2ec <__assert_fail@plt+0xd2e4>
   1f160:	cmp	r3, r2
   1f164:	beq	1f1e8 <__assert_fail@plt+0xd1e0>
   1f168:	vldr	s12, [pc, #352]	; 1f2d0 <__assert_fail@plt+0xd2c8>
   1f16c:	vcmpe.f32	s13, s12
   1f170:	vmrs	APSR_nzcv, fpscr
   1f174:	ble	1f1d0 <__assert_fail@plt+0xd1c8>
   1f178:	vldr	s11, [pc, #340]	; 1f2d4 <__assert_fail@plt+0xd2cc>
   1f17c:	vcmpe.f32	s13, s11
   1f180:	vmrs	APSR_nzcv, fpscr
   1f184:	bpl	1f1d0 <__assert_fail@plt+0xd1c8>
   1f188:	vldr	s11, [r3, #12]
   1f18c:	vldr	s10, [pc, #324]	; 1f2d8 <__assert_fail@plt+0xd2d0>
   1f190:	vcmpe.f32	s11, s10
   1f194:	vmrs	APSR_nzcv, fpscr
   1f198:	ble	1f1d0 <__assert_fail@plt+0xd1c8>
   1f19c:	vldr	s10, [r3]
   1f1a0:	vcmpe.f32	s10, #0.0
   1f1a4:	vmrs	APSR_nzcv, fpscr
   1f1a8:	blt	1f1d0 <__assert_fail@plt+0xd1c8>
   1f1ac:	vadd.f32	s12, s10, s12
   1f1b0:	vldr	s10, [r3, #4]
   1f1b4:	vcmpe.f32	s12, s10
   1f1b8:	vmrs	APSR_nzcv, fpscr
   1f1bc:	bpl	1f1d0 <__assert_fail@plt+0xd1c8>
   1f1c0:	vldr	s9, [pc, #276]	; 1f2dc <__assert_fail@plt+0xd2d4>
   1f1c4:	vcmpe.f32	s10, s9
   1f1c8:	vmrs	APSR_nzcv, fpscr
   1f1cc:	bls	1f2b0 <__assert_fail@plt+0xd2a8>
   1f1d0:	vldr	s13, [pc, #264]	; 1f2e0 <__assert_fail@plt+0xd2d8>
   1f1d4:	str	r2, [r6, #20]
   1f1d8:	vmul.f32	s12, s15, s13
   1f1dc:	vcmpe.f32	s12, s14
   1f1e0:	vmrs	APSR_nzcv, fpscr
   1f1e4:	bpl	1f104 <__assert_fail@plt+0xd0fc>
   1f1e8:	vldr	s11, [pc, #244]	; 1f2e4 <__assert_fail@plt+0xd2dc>
   1f1ec:	vmul.f32	s15, s15, s11
   1f1f0:	vmul.f32	s15, s15, s13
   1f1f4:	vldr	s14, [pc, #236]	; 1f2e8 <__assert_fail@plt+0xd2e0>
   1f1f8:	vcmpe.f32	s15, s14
   1f1fc:	vmrs	APSR_nzcv, fpscr
   1f200:	bge	1f2a8 <__assert_fail@plt+0xd2a0>
   1f204:	vcvt.u32.f32	s15, s15
   1f208:	mov	r0, r6
   1f20c:	vmov	r1, s15
   1f210:	bl	1ed54 <__assert_fail@plt+0xcd4c>
   1f214:	cmp	r0, #0
   1f218:	beq	1f2a8 <__assert_fail@plt+0xd2a0>
   1f21c:	mov	r3, #0
   1f220:	add	r2, sp, #4
   1f224:	mov	r1, r5
   1f228:	mov	r0, r6
   1f22c:	bl	1e22c <__assert_fail@plt+0xc224>
   1f230:	cmp	r0, #0
   1f234:	beq	1f104 <__assert_fail@plt+0xd0fc>
   1f238:	bl	11fe4 <abort@plt>
   1f23c:	vmov	s15, r3
   1f240:	ldr	r2, [r6, #12]
   1f244:	ldr	r3, [r6, #20]
   1f248:	vcvt.f32.u32	s15, s15
   1f24c:	vldr	s13, [r3, #8]
   1f250:	vmov	s14, r2
   1f254:	vcvt.f32.u32	s14, s14
   1f258:	vmul.f32	s12, s13, s15
   1f25c:	vcmpe.f32	s14, s12
   1f260:	vmrs	APSR_nzcv, fpscr
   1f264:	bgt	1f15c <__assert_fail@plt+0xd154>
   1f268:	ldr	r3, [r6, #16]
   1f26c:	add	r2, r2, #1
   1f270:	add	r3, r3, #1
   1f274:	str	r5, [r4]
   1f278:	mov	r0, #1
   1f27c:	str	r2, [r6, #12]
   1f280:	str	r3, [r6, #16]
   1f284:	b	1f0c8 <__assert_fail@plt+0xd0c0>
   1f288:	mov	r0, #8
   1f28c:	bl	2799c <__assert_fail@plt+0x15994>
   1f290:	subs	r3, r0, #0
   1f294:	beq	1f2a8 <__assert_fail@plt+0xd2a0>
   1f298:	ldr	r4, [sp, #4]
   1f29c:	b	1f128 <__assert_fail@plt+0xd120>
   1f2a0:	ldr	r2, [r6, #12]
   1f2a4:	b	1f268 <__assert_fail@plt+0xd260>
   1f2a8:	mvn	r0, #0
   1f2ac:	b	1f0c8 <__assert_fail@plt+0xd0c0>
   1f2b0:	vcmpe.f32	s12, s13
   1f2b4:	vmrs	APSR_nzcv, fpscr
   1f2b8:	bpl	1f1d0 <__assert_fail@plt+0xd1c8>
   1f2bc:	ldrb	r3, [r3, #16]
   1f2c0:	cmp	r3, #0
   1f2c4:	vmulne.f32	s15, s11, s15
   1f2c8:	bne	1f1f4 <__assert_fail@plt+0xd1ec>
   1f2cc:	b	1f1ec <__assert_fail@plt+0xd1e4>
   1f2d0:	stclcc	12, cr12, [ip, #820]	; 0x334
   1f2d4:	svccc	0x00666666
   1f2d8:	svccc	0x008ccccd
   1f2dc:	svccc	0x00800000
   1f2e0:	svccc	0x004ccccd
   1f2e4:	svccc	0x00b4fdf4
   1f2e8:	svcmi	0x00800000
   1f2ec:	muleq	r2, ip, r0
   1f2f0:	push	{r4, r5, r6, r7, r8, lr}
   1f2f4:	subs	r5, r1, #0
   1f2f8:	sub	sp, sp, #8
   1f2fc:	beq	1f500 <__assert_fail@plt+0xd4f8>
   1f300:	ldr	r3, [r0, #24]
   1f304:	mov	r6, r0
   1f308:	ldr	r1, [r0, #8]
   1f30c:	mov	r0, r5
   1f310:	blx	r3
   1f314:	ldr	r3, [r6, #8]
   1f318:	cmp	r0, r3
   1f31c:	mov	r7, r0
   1f320:	bcs	1f500 <__assert_fail@plt+0xd4f8>
   1f324:	ldr	r8, [r6]
   1f328:	add	r4, r8, r0, lsl #3
   1f32c:	ldr	r1, [r8, r0, lsl #3]
   1f330:	str	r4, [sp, #4]
   1f334:	cmp	r1, #0
   1f338:	beq	1f504 <__assert_fail@plt+0xd4fc>
   1f33c:	cmp	r5, r1
   1f340:	beq	1f364 <__assert_fail@plt+0xd35c>
   1f344:	ldr	r3, [r6, #28]
   1f348:	mov	r0, r5
   1f34c:	blx	r3
   1f350:	cmp	r0, #0
   1f354:	beq	1f394 <__assert_fail@plt+0xd38c>
   1f358:	ldr	r1, [r8, r7, lsl #3]
   1f35c:	cmp	r1, #0
   1f360:	beq	1f3a0 <__assert_fail@plt+0xd398>
   1f364:	mov	r0, r1
   1f368:	add	sp, sp, #8
   1f36c:	pop	{r4, r5, r6, r7, r8, pc}
   1f370:	ldr	r1, [r3]
   1f374:	cmp	r5, r1
   1f378:	beq	1f364 <__assert_fail@plt+0xd35c>
   1f37c:	ldr	r3, [r6, #28]
   1f380:	mov	r0, r5
   1f384:	blx	r3
   1f388:	cmp	r0, #0
   1f38c:	bne	1f418 <__assert_fail@plt+0xd410>
   1f390:	ldr	r4, [r4, #4]
   1f394:	ldr	r3, [r4, #4]
   1f398:	cmp	r3, #0
   1f39c:	bne	1f370 <__assert_fail@plt+0xd368>
   1f3a0:	vldr	s15, [r6, #8]
   1f3a4:	ldr	r3, [r6, #20]
   1f3a8:	vldr	s14, [r6, #12]
   1f3ac:	vcvt.f32.u32	s15, s15
   1f3b0:	vldr	s13, [r3, #8]
   1f3b4:	vcvt.f32.u32	s14, s14
   1f3b8:	vmul.f32	s12, s13, s15
   1f3bc:	vcmpe.f32	s14, s12
   1f3c0:	vmrs	APSR_nzcv, fpscr
   1f3c4:	bgt	1f424 <__assert_fail@plt+0xd41c>
   1f3c8:	ldr	r4, [sp, #4]
   1f3cc:	ldr	r3, [r4]
   1f3d0:	cmp	r3, #0
   1f3d4:	beq	1f564 <__assert_fail@plt+0xd55c>
   1f3d8:	ldr	r0, [r6, #36]	; 0x24
   1f3dc:	cmp	r0, #0
   1f3e0:	beq	1f54c <__assert_fail@plt+0xd544>
   1f3e4:	ldr	r3, [r0, #4]
   1f3e8:	str	r3, [r6, #36]	; 0x24
   1f3ec:	ldr	r3, [r6, #16]
   1f3f0:	ldr	r2, [r4, #4]
   1f3f4:	add	r3, r3, #1
   1f3f8:	str	r5, [r0]
   1f3fc:	str	r2, [r0, #4]
   1f400:	str	r0, [r4, #4]
   1f404:	str	r3, [r6, #16]
   1f408:	mov	r1, r5
   1f40c:	mov	r0, r1
   1f410:	add	sp, sp, #8
   1f414:	pop	{r4, r5, r6, r7, r8, pc}
   1f418:	ldr	r3, [r4, #4]
   1f41c:	ldr	r1, [r3]
   1f420:	b	1f35c <__assert_fail@plt+0xd354>
   1f424:	ldr	r2, [pc, #388]	; 1f5b0 <__assert_fail@plt+0xd5a8>
   1f428:	cmp	r3, r2
   1f42c:	beq	1f4b0 <__assert_fail@plt+0xd4a8>
   1f430:	vldr	s12, [pc, #348]	; 1f594 <__assert_fail@plt+0xd58c>
   1f434:	vcmpe.f32	s13, s12
   1f438:	vmrs	APSR_nzcv, fpscr
   1f43c:	ble	1f498 <__assert_fail@plt+0xd490>
   1f440:	vldr	s11, [pc, #336]	; 1f598 <__assert_fail@plt+0xd590>
   1f444:	vcmpe.f32	s13, s11
   1f448:	vmrs	APSR_nzcv, fpscr
   1f44c:	bpl	1f498 <__assert_fail@plt+0xd490>
   1f450:	vldr	s11, [r3, #12]
   1f454:	vldr	s10, [pc, #320]	; 1f59c <__assert_fail@plt+0xd594>
   1f458:	vcmpe.f32	s11, s10
   1f45c:	vmrs	APSR_nzcv, fpscr
   1f460:	ble	1f498 <__assert_fail@plt+0xd490>
   1f464:	vldr	s10, [r3]
   1f468:	vcmpe.f32	s10, #0.0
   1f46c:	vmrs	APSR_nzcv, fpscr
   1f470:	blt	1f498 <__assert_fail@plt+0xd490>
   1f474:	vadd.f32	s12, s10, s12
   1f478:	vldr	s10, [r3, #4]
   1f47c:	vcmpe.f32	s12, s10
   1f480:	vmrs	APSR_nzcv, fpscr
   1f484:	bpl	1f498 <__assert_fail@plt+0xd490>
   1f488:	vldr	s9, [pc, #272]	; 1f5a0 <__assert_fail@plt+0xd598>
   1f48c:	vcmpe.f32	s10, s9
   1f490:	vmrs	APSR_nzcv, fpscr
   1f494:	bls	1f574 <__assert_fail@plt+0xd56c>
   1f498:	vldr	s13, [pc, #260]	; 1f5a4 <__assert_fail@plt+0xd59c>
   1f49c:	str	r2, [r6, #20]
   1f4a0:	vmul.f32	s12, s15, s13
   1f4a4:	vcmpe.f32	s12, s14
   1f4a8:	vmrs	APSR_nzcv, fpscr
   1f4ac:	bpl	1f3c8 <__assert_fail@plt+0xd3c0>
   1f4b0:	vldr	s11, [pc, #240]	; 1f5a8 <__assert_fail@plt+0xd5a0>
   1f4b4:	vmul.f32	s15, s15, s11
   1f4b8:	vmul.f32	s15, s15, s13
   1f4bc:	vldr	s14, [pc, #232]	; 1f5ac <__assert_fail@plt+0xd5a4>
   1f4c0:	vcmpe.f32	s15, s14
   1f4c4:	vmrs	APSR_nzcv, fpscr
   1f4c8:	bge	1f56c <__assert_fail@plt+0xd564>
   1f4cc:	vcvt.u32.f32	s15, s15
   1f4d0:	mov	r0, r6
   1f4d4:	vmov	r1, s15
   1f4d8:	bl	1ed54 <__assert_fail@plt+0xcd4c>
   1f4dc:	cmp	r0, #0
   1f4e0:	beq	1f56c <__assert_fail@plt+0xd564>
   1f4e4:	mov	r3, #0
   1f4e8:	add	r2, sp, #4
   1f4ec:	mov	r1, r5
   1f4f0:	mov	r0, r6
   1f4f4:	bl	1e22c <__assert_fail@plt+0xc224>
   1f4f8:	cmp	r0, #0
   1f4fc:	beq	1f3c8 <__assert_fail@plt+0xd3c0>
   1f500:	bl	11fe4 <abort@plt>
   1f504:	vmov	s15, r3
   1f508:	ldr	r2, [r6, #12]
   1f50c:	ldr	r3, [r6, #20]
   1f510:	vcvt.f32.u32	s15, s15
   1f514:	vldr	s13, [r3, #8]
   1f518:	vmov	s14, r2
   1f51c:	vcvt.f32.u32	s14, s14
   1f520:	vmul.f32	s12, s15, s13
   1f524:	vcmpe.f32	s12, s14
   1f528:	vmrs	APSR_nzcv, fpscr
   1f52c:	bmi	1f424 <__assert_fail@plt+0xd41c>
   1f530:	ldr	r3, [r6, #16]
   1f534:	add	r2, r2, #1
   1f538:	add	r3, r3, #1
   1f53c:	str	r5, [r4]
   1f540:	str	r2, [r6, #12]
   1f544:	str	r3, [r6, #16]
   1f548:	b	1f408 <__assert_fail@plt+0xd400>
   1f54c:	mov	r0, #8
   1f550:	bl	2799c <__assert_fail@plt+0x15994>
   1f554:	cmp	r0, #0
   1f558:	beq	1f56c <__assert_fail@plt+0xd564>
   1f55c:	ldr	r4, [sp, #4]
   1f560:	b	1f3ec <__assert_fail@plt+0xd3e4>
   1f564:	ldr	r2, [r6, #12]
   1f568:	b	1f530 <__assert_fail@plt+0xd528>
   1f56c:	mov	r1, #0
   1f570:	b	1f364 <__assert_fail@plt+0xd35c>
   1f574:	vcmpe.f32	s12, s13
   1f578:	vmrs	APSR_nzcv, fpscr
   1f57c:	bpl	1f498 <__assert_fail@plt+0xd490>
   1f580:	ldrb	r3, [r3, #16]
   1f584:	cmp	r3, #0
   1f588:	vmulne.f32	s15, s11, s15
   1f58c:	bne	1f4bc <__assert_fail@plt+0xd4b4>
   1f590:	b	1f4b4 <__assert_fail@plt+0xd4ac>
   1f594:	stclcc	12, cr12, [ip, #820]	; 0x334
   1f598:	svccc	0x00666666
   1f59c:	svccc	0x008ccccd
   1f5a0:	svccc	0x00800000
   1f5a4:	svccc	0x004ccccd
   1f5a8:	svccc	0x00b4fdf4
   1f5ac:	svcmi	0x00800000
   1f5b0:	muleq	r2, ip, r0
   1f5b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f5b8:	mov	r7, r1
   1f5bc:	ldr	r3, [r0, #24]
   1f5c0:	mov	r6, r0
   1f5c4:	ldr	r1, [r0, #8]
   1f5c8:	mov	r0, r7
   1f5cc:	blx	r3
   1f5d0:	ldr	r3, [r6, #8]
   1f5d4:	cmp	r0, r3
   1f5d8:	bcs	1f804 <__assert_fail@plt+0xd7fc>
   1f5dc:	ldr	r9, [r6]
   1f5e0:	mov	r8, r0
   1f5e4:	add	r5, r9, r0, lsl #3
   1f5e8:	ldr	r4, [r9, r0, lsl #3]
   1f5ec:	cmp	r4, #0
   1f5f0:	beq	1f69c <__assert_fail@plt+0xd694>
   1f5f4:	cmp	r7, r4
   1f5f8:	beq	1f618 <__assert_fail@plt+0xd610>
   1f5fc:	mov	r1, r4
   1f600:	ldr	r3, [r6, #28]
   1f604:	mov	r0, r7
   1f608:	blx	r3
   1f60c:	cmp	r0, #0
   1f610:	beq	1f690 <__assert_fail@plt+0xd688>
   1f614:	ldr	r4, [r9, r8, lsl #3]
   1f618:	ldr	r3, [r5, #4]
   1f61c:	cmp	r3, #0
   1f620:	movne	r2, #0
   1f624:	ldmne	r3, {r0, r1}
   1f628:	streq	r3, [r9, r8, lsl #3]
   1f62c:	stmne	r5, {r0, r1}
   1f630:	strne	r2, [r3]
   1f634:	ldrne	r2, [r6, #36]	; 0x24
   1f638:	strne	r2, [r3, #4]
   1f63c:	strne	r3, [r6, #36]	; 0x24
   1f640:	cmp	r4, #0
   1f644:	beq	1f69c <__assert_fail@plt+0xd694>
   1f648:	ldr	r2, [r9, r8, lsl #3]
   1f64c:	ldr	r3, [r6, #16]
   1f650:	cmp	r2, #0
   1f654:	sub	r3, r3, #1
   1f658:	str	r3, [r6, #16]
   1f65c:	beq	1f6d0 <__assert_fail@plt+0xd6c8>
   1f660:	mov	r0, r4
   1f664:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f668:	ldr	r4, [r3]
   1f66c:	cmp	r7, r4
   1f670:	beq	1f6b0 <__assert_fail@plt+0xd6a8>
   1f674:	mov	r1, r4
   1f678:	ldr	r3, [r6, #28]
   1f67c:	mov	r0, r7
   1f680:	blx	r3
   1f684:	cmp	r0, #0
   1f688:	bne	1f6a8 <__assert_fail@plt+0xd6a0>
   1f68c:	ldr	r5, [r5, #4]
   1f690:	ldr	r3, [r5, #4]
   1f694:	cmp	r3, #0
   1f698:	bne	1f668 <__assert_fail@plt+0xd660>
   1f69c:	mov	r4, #0
   1f6a0:	mov	r0, r4
   1f6a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f6a8:	ldr	r3, [r5, #4]
   1f6ac:	ldr	r4, [r3]
   1f6b0:	ldr	r1, [r3, #4]
   1f6b4:	mov	r2, #0
   1f6b8:	str	r1, [r5, #4]
   1f6bc:	str	r2, [r3]
   1f6c0:	ldr	r2, [r6, #36]	; 0x24
   1f6c4:	str	r2, [r3, #4]
   1f6c8:	str	r3, [r6, #36]	; 0x24
   1f6cc:	b	1f640 <__assert_fail@plt+0xd638>
   1f6d0:	vldr	s15, [r6, #8]
   1f6d4:	ldr	r3, [r6, #12]
   1f6d8:	ldr	r2, [r6, #20]
   1f6dc:	sub	r3, r3, #1
   1f6e0:	vcvt.f32.u32	s14, s15
   1f6e4:	vldr	s13, [r2]
   1f6e8:	vmov	s15, r3
   1f6ec:	str	r3, [r6, #12]
   1f6f0:	vcvt.f32.u32	s15, s15
   1f6f4:	vmul.f32	s12, s13, s14
   1f6f8:	vcmpe.f32	s15, s12
   1f6fc:	vmrs	APSR_nzcv, fpscr
   1f700:	bpl	1f660 <__assert_fail@plt+0xd658>
   1f704:	ldr	r3, [pc, #276]	; 1f820 <__assert_fail@plt+0xd818>
   1f708:	cmp	r2, r3
   1f70c:	beq	1f7ec <__assert_fail@plt+0xd7e4>
   1f710:	vldr	s12, [r2, #8]
   1f714:	vldr	s11, [pc, #236]	; 1f808 <__assert_fail@plt+0xd800>
   1f718:	vcmpe.f32	s12, s11
   1f71c:	vmrs	APSR_nzcv, fpscr
   1f720:	ble	1f7d4 <__assert_fail@plt+0xd7cc>
   1f724:	vldr	s10, [pc, #224]	; 1f80c <__assert_fail@plt+0xd804>
   1f728:	vcmpe.f32	s12, s10
   1f72c:	vmrs	APSR_nzcv, fpscr
   1f730:	bpl	1f7d4 <__assert_fail@plt+0xd7cc>
   1f734:	vldr	s10, [pc, #212]	; 1f810 <__assert_fail@plt+0xd808>
   1f738:	vldr	s9, [r2, #12]
   1f73c:	vcmpe.f32	s9, s10
   1f740:	vmrs	APSR_nzcv, fpscr
   1f744:	ble	1f7d4 <__assert_fail@plt+0xd7cc>
   1f748:	vcmpe.f32	s13, #0.0
   1f74c:	vmrs	APSR_nzcv, fpscr
   1f750:	blt	1f7d4 <__assert_fail@plt+0xd7cc>
   1f754:	vadd.f32	s13, s13, s11
   1f758:	vldr	s11, [r2, #4]
   1f75c:	vcmpe.f32	s13, s11
   1f760:	vmrs	APSR_nzcv, fpscr
   1f764:	bpl	1f7d4 <__assert_fail@plt+0xd7cc>
   1f768:	vldr	s10, [pc, #164]	; 1f814 <__assert_fail@plt+0xd80c>
   1f76c:	vcmpe.f32	s11, s10
   1f770:	vmrs	APSR_nzcv, fpscr
   1f774:	bhi	1f7d4 <__assert_fail@plt+0xd7cc>
   1f778:	vcmpe.f32	s12, s13
   1f77c:	vmrs	APSR_nzcv, fpscr
   1f780:	ble	1f7d4 <__assert_fail@plt+0xd7cc>
   1f784:	ldrb	r3, [r2, #16]
   1f788:	cmp	r3, #0
   1f78c:	beq	1f7f4 <__assert_fail@plt+0xd7ec>
   1f790:	vmul.f32	s15, s14, s11
   1f794:	vcvt.u32.f32	s15, s15
   1f798:	vmov	r1, s15
   1f79c:	mov	r0, r6
   1f7a0:	bl	1ed54 <__assert_fail@plt+0xcd4c>
   1f7a4:	cmp	r0, #0
   1f7a8:	bne	1f660 <__assert_fail@plt+0xd658>
   1f7ac:	ldr	r0, [r6, #36]	; 0x24
   1f7b0:	cmp	r0, #0
   1f7b4:	beq	1f7c8 <__assert_fail@plt+0xd7c0>
   1f7b8:	ldr	r5, [r0, #4]
   1f7bc:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   1f7c0:	subs	r0, r5, #0
   1f7c4:	bne	1f7b8 <__assert_fail@plt+0xd7b0>
   1f7c8:	mov	r3, #0
   1f7cc:	str	r3, [r6, #36]	; 0x24
   1f7d0:	b	1f660 <__assert_fail@plt+0xd658>
   1f7d4:	vldr	s13, [pc, #60]	; 1f818 <__assert_fail@plt+0xd810>
   1f7d8:	str	r3, [r6, #20]
   1f7dc:	vmul.f32	s13, s14, s13
   1f7e0:	vcmpe.f32	s15, s13
   1f7e4:	vmrs	APSR_nzcv, fpscr
   1f7e8:	bpl	1f660 <__assert_fail@plt+0xd658>
   1f7ec:	vldr	s12, [pc, #40]	; 1f81c <__assert_fail@plt+0xd814>
   1f7f0:	vldr	s11, [pc, #28]	; 1f814 <__assert_fail@plt+0xd80c>
   1f7f4:	vmul.f32	s15, s14, s11
   1f7f8:	vmul.f32	s15, s15, s12
   1f7fc:	vcvt.u32.f32	s15, s15
   1f800:	b	1f798 <__assert_fail@plt+0xd790>
   1f804:	bl	11fe4 <abort@plt>
   1f808:	stclcc	12, cr12, [ip, #820]	; 0x334
   1f80c:	svccc	0x00666666
   1f810:	svccc	0x008ccccd
   1f814:	svccc	0x00800000
   1f818:	andeq	r0, r0, r0
   1f81c:	svccc	0x004ccccd
   1f820:	muleq	r2, ip, r0
   1f824:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f828:	mov	r7, r1
   1f82c:	ldr	r3, [r0, #24]
   1f830:	mov	r6, r0
   1f834:	ldr	r1, [r0, #8]
   1f838:	mov	r0, r7
   1f83c:	blx	r3
   1f840:	ldr	r3, [r6, #8]
   1f844:	cmp	r0, r3
   1f848:	bcs	1fa74 <__assert_fail@plt+0xda6c>
   1f84c:	ldr	r9, [r6]
   1f850:	mov	r8, r0
   1f854:	add	r5, r9, r0, lsl #3
   1f858:	ldr	r4, [r9, r0, lsl #3]
   1f85c:	cmp	r4, #0
   1f860:	beq	1f90c <__assert_fail@plt+0xd904>
   1f864:	cmp	r7, r4
   1f868:	beq	1f888 <__assert_fail@plt+0xd880>
   1f86c:	mov	r1, r4
   1f870:	ldr	r3, [r6, #28]
   1f874:	mov	r0, r7
   1f878:	blx	r3
   1f87c:	cmp	r0, #0
   1f880:	beq	1f900 <__assert_fail@plt+0xd8f8>
   1f884:	ldr	r4, [r9, r8, lsl #3]
   1f888:	ldr	r3, [r5, #4]
   1f88c:	cmp	r3, #0
   1f890:	movne	r2, #0
   1f894:	ldmne	r3, {r0, r1}
   1f898:	streq	r3, [r9, r8, lsl #3]
   1f89c:	stmne	r5, {r0, r1}
   1f8a0:	strne	r2, [r3]
   1f8a4:	ldrne	r2, [r6, #36]	; 0x24
   1f8a8:	strne	r2, [r3, #4]
   1f8ac:	strne	r3, [r6, #36]	; 0x24
   1f8b0:	cmp	r4, #0
   1f8b4:	beq	1f90c <__assert_fail@plt+0xd904>
   1f8b8:	ldr	r2, [r9, r8, lsl #3]
   1f8bc:	ldr	r3, [r6, #16]
   1f8c0:	cmp	r2, #0
   1f8c4:	sub	r3, r3, #1
   1f8c8:	str	r3, [r6, #16]
   1f8cc:	beq	1f940 <__assert_fail@plt+0xd938>
   1f8d0:	mov	r0, r4
   1f8d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f8d8:	ldr	r4, [r3]
   1f8dc:	cmp	r7, r4
   1f8e0:	beq	1f920 <__assert_fail@plt+0xd918>
   1f8e4:	mov	r1, r4
   1f8e8:	ldr	r3, [r6, #28]
   1f8ec:	mov	r0, r7
   1f8f0:	blx	r3
   1f8f4:	cmp	r0, #0
   1f8f8:	bne	1f918 <__assert_fail@plt+0xd910>
   1f8fc:	ldr	r5, [r5, #4]
   1f900:	ldr	r3, [r5, #4]
   1f904:	cmp	r3, #0
   1f908:	bne	1f8d8 <__assert_fail@plt+0xd8d0>
   1f90c:	mov	r4, #0
   1f910:	mov	r0, r4
   1f914:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f918:	ldr	r3, [r5, #4]
   1f91c:	ldr	r4, [r3]
   1f920:	ldr	r1, [r3, #4]
   1f924:	mov	r2, #0
   1f928:	str	r1, [r5, #4]
   1f92c:	str	r2, [r3]
   1f930:	ldr	r2, [r6, #36]	; 0x24
   1f934:	str	r2, [r3, #4]
   1f938:	str	r3, [r6, #36]	; 0x24
   1f93c:	b	1f8b0 <__assert_fail@plt+0xd8a8>
   1f940:	vldr	s15, [r6, #8]
   1f944:	ldr	r3, [r6, #12]
   1f948:	ldr	r2, [r6, #20]
   1f94c:	sub	r3, r3, #1
   1f950:	vcvt.f32.u32	s14, s15
   1f954:	vldr	s13, [r2]
   1f958:	vmov	s15, r3
   1f95c:	str	r3, [r6, #12]
   1f960:	vcvt.f32.u32	s15, s15
   1f964:	vmul.f32	s12, s13, s14
   1f968:	vcmpe.f32	s15, s12
   1f96c:	vmrs	APSR_nzcv, fpscr
   1f970:	bpl	1f8d0 <__assert_fail@plt+0xd8c8>
   1f974:	ldr	r3, [pc, #276]	; 1fa90 <__assert_fail@plt+0xda88>
   1f978:	cmp	r2, r3
   1f97c:	beq	1fa5c <__assert_fail@plt+0xda54>
   1f980:	vldr	s12, [r2, #8]
   1f984:	vldr	s11, [pc, #236]	; 1fa78 <__assert_fail@plt+0xda70>
   1f988:	vcmpe.f32	s12, s11
   1f98c:	vmrs	APSR_nzcv, fpscr
   1f990:	ble	1fa44 <__assert_fail@plt+0xda3c>
   1f994:	vldr	s10, [pc, #224]	; 1fa7c <__assert_fail@plt+0xda74>
   1f998:	vcmpe.f32	s12, s10
   1f99c:	vmrs	APSR_nzcv, fpscr
   1f9a0:	bpl	1fa44 <__assert_fail@plt+0xda3c>
   1f9a4:	vldr	s10, [pc, #212]	; 1fa80 <__assert_fail@plt+0xda78>
   1f9a8:	vldr	s9, [r2, #12]
   1f9ac:	vcmpe.f32	s9, s10
   1f9b0:	vmrs	APSR_nzcv, fpscr
   1f9b4:	ble	1fa44 <__assert_fail@plt+0xda3c>
   1f9b8:	vcmpe.f32	s13, #0.0
   1f9bc:	vmrs	APSR_nzcv, fpscr
   1f9c0:	blt	1fa44 <__assert_fail@plt+0xda3c>
   1f9c4:	vadd.f32	s13, s13, s11
   1f9c8:	vldr	s11, [r2, #4]
   1f9cc:	vcmpe.f32	s13, s11
   1f9d0:	vmrs	APSR_nzcv, fpscr
   1f9d4:	bpl	1fa44 <__assert_fail@plt+0xda3c>
   1f9d8:	vldr	s10, [pc, #164]	; 1fa84 <__assert_fail@plt+0xda7c>
   1f9dc:	vcmpe.f32	s11, s10
   1f9e0:	vmrs	APSR_nzcv, fpscr
   1f9e4:	bhi	1fa44 <__assert_fail@plt+0xda3c>
   1f9e8:	vcmpe.f32	s12, s13
   1f9ec:	vmrs	APSR_nzcv, fpscr
   1f9f0:	ble	1fa44 <__assert_fail@plt+0xda3c>
   1f9f4:	ldrb	r3, [r2, #16]
   1f9f8:	cmp	r3, #0
   1f9fc:	beq	1fa64 <__assert_fail@plt+0xda5c>
   1fa00:	vmul.f32	s15, s14, s11
   1fa04:	vcvt.u32.f32	s15, s15
   1fa08:	vmov	r1, s15
   1fa0c:	mov	r0, r6
   1fa10:	bl	1ed54 <__assert_fail@plt+0xcd4c>
   1fa14:	cmp	r0, #0
   1fa18:	bne	1f8d0 <__assert_fail@plt+0xd8c8>
   1fa1c:	ldr	r0, [r6, #36]	; 0x24
   1fa20:	cmp	r0, #0
   1fa24:	beq	1fa38 <__assert_fail@plt+0xda30>
   1fa28:	ldr	r5, [r0, #4]
   1fa2c:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   1fa30:	subs	r0, r5, #0
   1fa34:	bne	1fa28 <__assert_fail@plt+0xda20>
   1fa38:	mov	r3, #0
   1fa3c:	str	r3, [r6, #36]	; 0x24
   1fa40:	b	1f8d0 <__assert_fail@plt+0xd8c8>
   1fa44:	vldr	s13, [pc, #60]	; 1fa88 <__assert_fail@plt+0xda80>
   1fa48:	str	r3, [r6, #20]
   1fa4c:	vmul.f32	s13, s14, s13
   1fa50:	vcmpe.f32	s15, s13
   1fa54:	vmrs	APSR_nzcv, fpscr
   1fa58:	bpl	1f8d0 <__assert_fail@plt+0xd8c8>
   1fa5c:	vldr	s12, [pc, #40]	; 1fa8c <__assert_fail@plt+0xda84>
   1fa60:	vldr	s11, [pc, #28]	; 1fa84 <__assert_fail@plt+0xda7c>
   1fa64:	vmul.f32	s15, s14, s11
   1fa68:	vmul.f32	s15, s15, s12
   1fa6c:	vcvt.u32.f32	s15, s15
   1fa70:	b	1fa08 <__assert_fail@plt+0xda00>
   1fa74:	bl	11fe4 <abort@plt>
   1fa78:	stclcc	12, cr12, [ip, #820]	; 0x334
   1fa7c:	svccc	0x00666666
   1fa80:	svccc	0x008ccccd
   1fa84:	svccc	0x00800000
   1fa88:	andeq	r0, r0, r0
   1fa8c:	svccc	0x004ccccd
   1fa90:	muleq	r2, ip, r0
   1fa94:	mov	r0, #0
   1fa98:	bx	lr
   1fa9c:	push	{r4, r5, r6, lr}
   1faa0:	cmp	r1, #0
   1faa4:	mov	r6, r0
   1faa8:	mov	r0, #16
   1faac:	mov	r5, r1
   1fab0:	moveq	r5, #1
   1fab4:	bl	261d8 <__assert_fail@plt+0x141d0>
   1fab8:	mov	r1, #4
   1fabc:	mov	r4, r0
   1fac0:	mov	r0, r5
   1fac4:	bl	262bc <__assert_fail@plt+0x142b4>
   1fac8:	mov	r3, #0
   1facc:	ldr	r2, [pc, #28]	; 1faf0 <__assert_fail@plt+0xdae8>
   1fad0:	cmp	r6, r3
   1fad4:	moveq	r6, r2
   1fad8:	str	r6, [r4, #12]
   1fadc:	str	r3, [r4, #8]
   1fae0:	stm	r4, {r0, r5}
   1fae4:	str	r3, [r0]
   1fae8:	mov	r0, r4
   1faec:	pop	{r4, r5, r6, pc}
   1faf0:	muleq	r1, r4, sl
   1faf4:	push	{r4, lr}
   1faf8:	mov	r4, r0
   1fafc:	ldr	r0, [r0]
   1fb00:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   1fb04:	mov	r0, r4
   1fb08:	pop	{r4, lr}
   1fb0c:	b	1e0b0 <__assert_fail@plt+0xc0a8>
   1fb10:	push	{r4, r5, r6, r7, r8, lr}
   1fb14:	mov	r5, r0
   1fb18:	ldmib	r0, {r3, r4}
   1fb1c:	mov	r6, r1
   1fb20:	sub	r3, r3, #1
   1fb24:	cmp	r3, r4
   1fb28:	bls	1fb98 <__assert_fail@plt+0xdb90>
   1fb2c:	ldr	r3, [r0]
   1fb30:	add	r4, r4, #1
   1fb34:	str	r4, [r5, #8]
   1fb38:	str	r6, [r3, r4, lsl #2]
   1fb3c:	ldr	r6, [r5]
   1fb40:	cmp	r4, #1
   1fb44:	ldr	r8, [r5, #12]
   1fb48:	ldr	r7, [r6, r4, lsl #2]
   1fb4c:	bne	1fb68 <__assert_fail@plt+0xdb60>
   1fb50:	b	1fb88 <__assert_fail@plt+0xdb80>
   1fb54:	ldr	r3, [r6, r5, lsl #2]
   1fb58:	cmp	r5, #1
   1fb5c:	str	r3, [r6, r4, lsl #2]
   1fb60:	mov	r4, r5
   1fb64:	beq	1fb88 <__assert_fail@plt+0xdb80>
   1fb68:	lsr	r5, r4, #1
   1fb6c:	mov	r1, r7
   1fb70:	ldr	r0, [r6, r5, lsl #2]
   1fb74:	blx	r8
   1fb78:	cmp	r0, #0
   1fb7c:	ble	1fb54 <__assert_fail@plt+0xdb4c>
   1fb80:	lsl	r4, r4, #2
   1fb84:	b	1fb8c <__assert_fail@plt+0xdb84>
   1fb88:	mov	r4, #4
   1fb8c:	str	r7, [r6, r4]
   1fb90:	mov	r0, #0
   1fb94:	pop	{r4, r5, r6, r7, r8, pc}
   1fb98:	mov	r2, #4
   1fb9c:	add	r1, r0, r2
   1fba0:	ldr	r0, [r0]
   1fba4:	bl	26388 <__assert_fail@plt+0x14380>
   1fba8:	ldr	r4, [r5, #8]
   1fbac:	mov	r3, r0
   1fbb0:	str	r0, [r5]
   1fbb4:	b	1fb30 <__assert_fail@plt+0xdb28>
   1fbb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fbbc:	sub	sp, sp, #12
   1fbc0:	ldr	fp, [r0, #8]
   1fbc4:	cmp	fp, #0
   1fbc8:	beq	1fc84 <__assert_fail@plt+0xdc7c>
   1fbcc:	ldr	r3, [r0]
   1fbd0:	sub	r8, fp, #1
   1fbd4:	ldr	r2, [r3, fp, lsl #2]
   1fbd8:	ldr	r1, [r3, #4]
   1fbdc:	str	r8, [r0, #8]
   1fbe0:	str	r2, [r3, #4]
   1fbe4:	ldr	fp, [r0]
   1fbe8:	lsrs	sl, r8, #1
   1fbec:	str	r1, [sp, #4]
   1fbf0:	ldr	r7, [r0, #12]
   1fbf4:	ldr	r9, [fp, #4]
   1fbf8:	addeq	r6, fp, #4
   1fbfc:	beq	1fc74 <__assert_fail@plt+0xdc6c>
   1fc00:	mov	r4, #1
   1fc04:	b	1fc30 <__assert_fail@plt+0xdc28>
   1fc08:	mov	r1, r9
   1fc0c:	ldr	r0, [r6]
   1fc10:	blx	r7
   1fc14:	cmp	r0, #0
   1fc18:	ble	1fc70 <__assert_fail@plt+0xdc68>
   1fc1c:	ldr	r2, [r6]
   1fc20:	cmp	r5, sl
   1fc24:	str	r2, [fp, r4, lsl #2]
   1fc28:	mov	r4, r5
   1fc2c:	bhi	1fc74 <__assert_fail@plt+0xdc6c>
   1fc30:	lsl	r5, r4, #1
   1fc34:	cmp	r8, r5
   1fc38:	addls	r6, fp, r4, lsl #3
   1fc3c:	bls	1fc08 <__assert_fail@plt+0xdc00>
   1fc40:	add	r2, r5, #1
   1fc44:	ldr	r0, [fp, r4, lsl #3]
   1fc48:	ldr	r1, [fp, r2, lsl #2]
   1fc4c:	str	r2, [sp]
   1fc50:	blx	r7
   1fc54:	ldr	r2, [sp]
   1fc58:	add	r6, fp, r4, lsl #3
   1fc5c:	add	r1, fp, r2, lsl #2
   1fc60:	cmp	r0, #0
   1fc64:	movlt	r5, r2
   1fc68:	movlt	r6, r1
   1fc6c:	b	1fc08 <__assert_fail@plt+0xdc00>
   1fc70:	add	r6, fp, r4, lsl #2
   1fc74:	ldr	r0, [sp, #4]
   1fc78:	str	r9, [r6]
   1fc7c:	add	sp, sp, #12
   1fc80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc84:	mov	r0, fp
   1fc88:	str	fp, [sp, #4]
   1fc8c:	add	sp, sp, #12
   1fc90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc94:	subs	ip, r0, #0
   1fc98:	mov	r3, #0
   1fc9c:	strb	r3, [r1, #11]
   1fca0:	add	r0, r1, #11
   1fca4:	blt	1fcd4 <__assert_fail@plt+0xdccc>
   1fca8:	ldr	r1, [pc, #108]	; 1fd1c <__assert_fail@plt+0xdd14>
   1fcac:	smull	r3, r2, r1, ip
   1fcb0:	asr	r3, ip, #31
   1fcb4:	rsb	r3, r3, r2, asr #2
   1fcb8:	add	r2, r3, r3, lsl #2
   1fcbc:	sub	r2, ip, r2, lsl #1
   1fcc0:	add	r2, r2, #48	; 0x30
   1fcc4:	subs	ip, r3, #0
   1fcc8:	strb	r2, [r0, #-1]!
   1fccc:	bne	1fcac <__assert_fail@plt+0xdca4>
   1fcd0:	bx	lr
   1fcd4:	push	{lr}		; (str lr, [sp, #-4]!)
   1fcd8:	ldr	lr, [pc, #60]	; 1fd1c <__assert_fail@plt+0xdd14>
   1fcdc:	b	1fce4 <__assert_fail@plt+0xdcdc>
   1fce0:	mov	r0, r1
   1fce4:	smull	r3, r2, lr, ip
   1fce8:	asr	r3, ip, #31
   1fcec:	rsb	r3, r3, r2, asr #2
   1fcf0:	sub	r1, r0, #1
   1fcf4:	add	r2, r3, r3, lsl #2
   1fcf8:	sub	r2, ip, r2, lsl #1
   1fcfc:	rsb	r2, r2, #48	; 0x30
   1fd00:	subs	ip, r3, #0
   1fd04:	strb	r2, [r0, #-1]
   1fd08:	bne	1fce0 <__assert_fail@plt+0xdcd8>
   1fd0c:	mov	r3, #45	; 0x2d
   1fd10:	sub	r0, r0, #2
   1fd14:	strb	r3, [r1, #-1]
   1fd18:	pop	{pc}		; (ldr pc, [sp], #4)
   1fd1c:	strbtvs	r6, [r6], -r7, ror #12
   1fd20:	ldr	ip, [pc, #48]	; 1fd58 <__assert_fail@plt+0xdd50>
   1fd24:	mov	r2, r0
   1fd28:	add	r0, r1, #10
   1fd2c:	mov	r3, #0
   1fd30:	strb	r3, [r1, #10]
   1fd34:	umull	r1, r3, ip, r2
   1fd38:	lsr	r3, r3, #3
   1fd3c:	add	r1, r3, r3, lsl #2
   1fd40:	sub	r2, r2, r1, lsl #1
   1fd44:	add	r1, r2, #48	; 0x30
   1fd48:	subs	r2, r3, #0
   1fd4c:	strb	r1, [r0, #-1]!
   1fd50:	bne	1fd34 <__assert_fail@plt+0xdd2c>
   1fd54:	bx	lr
   1fd58:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1fd5c:	push	{r4, r5, r6, r8, r9, lr}
   1fd60:	mov	r4, r0
   1fd64:	mov	r5, r1
   1fd68:	add	r6, r2, #20
   1fd6c:	mov	r8, #10
   1fd70:	mov	r9, #0
   1fd74:	mov	r3, #0
   1fd78:	strb	r3, [r2, #20]
   1fd7c:	mov	r0, r4
   1fd80:	mov	r1, r5
   1fd84:	mov	r2, r8
   1fd88:	mov	r3, r9
   1fd8c:	bl	28d1c <_obstack_memory_used@@Base+0x890>
   1fd90:	mov	r0, r4
   1fd94:	mov	r1, r5
   1fd98:	mov	r3, r9
   1fd9c:	add	r2, r2, #48	; 0x30
   1fda0:	strb	r2, [r6, #-1]!
   1fda4:	mov	r2, r8
   1fda8:	bl	28d1c <_obstack_memory_used@@Base+0x890>
   1fdac:	mov	r4, r0
   1fdb0:	mov	r5, r1
   1fdb4:	orrs	r3, r4, r5
   1fdb8:	bne	1fd7c <__assert_fail@plt+0xdd74>
   1fdbc:	mov	r0, r6
   1fdc0:	pop	{r4, r5, r6, r8, r9, pc}
   1fdc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fdc8:	sub	sp, sp, #20
   1fdcc:	mov	r5, r0
   1fdd0:	add	r7, r0, r1
   1fdd4:	mov	sl, r2
   1fdd8:	bl	11d08 <__ctype_get_mb_cur_max@plt>
   1fddc:	cmp	r0, #1
   1fde0:	bls	1ff84 <__assert_fail@plt+0xdf7c>
   1fde4:	cmp	r5, r7
   1fde8:	mov	r6, #0
   1fdec:	bcs	1fee8 <__assert_fail@plt+0xdee0>
   1fdf0:	and	fp, sl, #2
   1fdf4:	mov	r9, r6
   1fdf8:	and	sl, sl, #1
   1fdfc:	mvn	r8, #-2147483648	; 0x80000000
   1fe00:	b	1fe28 <__assert_fail@plt+0xde20>
   1fe04:	cmp	r3, #37	; 0x25
   1fe08:	bcs	1fe18 <__assert_fail@plt+0xde10>
   1fe0c:	sub	r3, r3, #32
   1fe10:	cmp	r3, #3
   1fe14:	bhi	1fe50 <__assert_fail@plt+0xde48>
   1fe18:	add	r5, r5, #1
   1fe1c:	add	r6, r6, #1
   1fe20:	cmp	r7, r5
   1fe24:	bls	1fee8 <__assert_fail@plt+0xdee0>
   1fe28:	ldrb	r3, [r5]
   1fe2c:	cmp	r3, #63	; 0x3f
   1fe30:	bls	1fe04 <__assert_fail@plt+0xddfc>
   1fe34:	cmp	r3, #65	; 0x41
   1fe38:	bcc	1fe50 <__assert_fail@plt+0xde48>
   1fe3c:	cmp	r3, #95	; 0x5f
   1fe40:	bls	1fe18 <__assert_fail@plt+0xde10>
   1fe44:	sub	r3, r3, #97	; 0x61
   1fe48:	cmp	r3, #29
   1fe4c:	bls	1fe18 <__assert_fail@plt+0xde10>
   1fe50:	cmp	fp, #0
   1fe54:	str	r9, [sp, #8]
   1fe58:	str	r9, [sp, #12]
   1fe5c:	beq	1fe84 <__assert_fail@plt+0xde7c>
   1fe60:	b	1ff30 <__assert_fail@plt+0xdf28>
   1fe64:	cmp	r0, r3
   1fe68:	bgt	1fee4 <__assert_fail@plt+0xdedc>
   1fe6c:	add	r6, r6, r0
   1fe70:	add	r0, sp, #8
   1fe74:	bl	11bac <mbsinit@plt>
   1fe78:	add	r5, r5, r4
   1fe7c:	cmp	r0, #0
   1fe80:	bne	1fe20 <__assert_fail@plt+0xde18>
   1fe84:	add	r3, sp, #8
   1fe88:	sub	r2, r7, r5
   1fe8c:	mov	r1, r5
   1fe90:	add	r0, sp, #4
   1fe94:	bl	27e60 <__assert_fail@plt+0x15e58>
   1fe98:	cmn	r0, #1
   1fe9c:	mov	r4, r0
   1fea0:	beq	1ff6c <__assert_fail@plt+0xdf64>
   1fea4:	cmn	r0, #2
   1fea8:	beq	1ff58 <__assert_fail@plt+0xdf50>
   1feac:	ldr	r0, [sp, #4]
   1feb0:	bl	11b28 <wcwidth@plt>
   1feb4:	cmp	r4, #0
   1feb8:	moveq	r4, #1
   1febc:	sub	r3, r8, r6
   1fec0:	cmp	r0, #0
   1fec4:	bge	1fe64 <__assert_fail@plt+0xde5c>
   1fec8:	ldr	r0, [sp, #4]
   1fecc:	bl	11c78 <iswcntrl@plt>
   1fed0:	cmp	r0, #0
   1fed4:	bne	1fe70 <__assert_fail@plt+0xde68>
   1fed8:	cmn	r6, #-2147483647	; 0x80000001
   1fedc:	add	r6, r6, #1
   1fee0:	bne	1fe70 <__assert_fail@plt+0xde68>
   1fee4:	mvn	r6, #-2147483648	; 0x80000000
   1fee8:	mov	r0, r6
   1feec:	add	sp, sp, #20
   1fef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fef4:	ldr	r0, [sp, #4]
   1fef8:	bl	11b28 <wcwidth@plt>
   1fefc:	cmp	r4, #0
   1ff00:	moveq	r4, #1
   1ff04:	sub	r2, r8, r6
   1ff08:	add	r5, r5, r4
   1ff0c:	subs	r3, r0, #0
   1ff10:	add	r6, r6, r3
   1ff14:	add	r0, sp, #8
   1ff18:	blt	1ff74 <__assert_fail@plt+0xdf6c>
   1ff1c:	cmp	r3, r2
   1ff20:	bgt	1fee4 <__assert_fail@plt+0xdedc>
   1ff24:	bl	11bac <mbsinit@plt>
   1ff28:	cmp	r0, #0
   1ff2c:	bne	1fe20 <__assert_fail@plt+0xde18>
   1ff30:	add	r3, sp, #8
   1ff34:	sub	r2, r7, r5
   1ff38:	mov	r1, r5
   1ff3c:	add	r0, sp, #4
   1ff40:	bl	27e60 <__assert_fail@plt+0x15e58>
   1ff44:	cmn	r0, #1
   1ff48:	mov	r4, r0
   1ff4c:	beq	1ff6c <__assert_fail@plt+0xdf64>
   1ff50:	cmn	r0, #2
   1ff54:	bne	1fef4 <__assert_fail@plt+0xdeec>
   1ff58:	cmp	sl, #0
   1ff5c:	bne	1ff74 <__assert_fail@plt+0xdf6c>
   1ff60:	add	r6, r6, #1
   1ff64:	mov	r5, r7
   1ff68:	b	1fe20 <__assert_fail@plt+0xde18>
   1ff6c:	cmp	sl, #0
   1ff70:	beq	1fe18 <__assert_fail@plt+0xde10>
   1ff74:	mvn	r6, #0
   1ff78:	mov	r0, r6
   1ff7c:	add	sp, sp, #20
   1ff80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff84:	cmp	r5, r7
   1ff88:	movcs	r6, #0
   1ff8c:	bcs	1fee8 <__assert_fail@plt+0xdee0>
   1ff90:	bl	11dec <__ctype_b_loc@plt>
   1ff94:	ands	r6, sl, #2
   1ff98:	ldr	r2, [r0]
   1ff9c:	bne	1ffdc <__assert_fail@plt+0xdfd4>
   1ffa0:	ldrb	r3, [r5], #1
   1ffa4:	lsl	r3, r3, #1
   1ffa8:	ldrh	r3, [r2, r3]
   1ffac:	tst	r3, #16384	; 0x4000
   1ffb0:	bne	1ffbc <__assert_fail@plt+0xdfb4>
   1ffb4:	tst	r3, #2
   1ffb8:	bne	1ffc8 <__assert_fail@plt+0xdfc0>
   1ffbc:	cmn	r6, #-2147483647	; 0x80000001
   1ffc0:	beq	1fee8 <__assert_fail@plt+0xdee0>
   1ffc4:	add	r6, r6, #1
   1ffc8:	cmp	r7, r5
   1ffcc:	bne	1ffa0 <__assert_fail@plt+0xdf98>
   1ffd0:	mov	r0, r6
   1ffd4:	add	sp, sp, #20
   1ffd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ffdc:	mov	r6, #0
   1ffe0:	b	1fff8 <__assert_fail@plt+0xdff0>
   1ffe4:	cmn	r6, #-2147483647	; 0x80000001
   1ffe8:	beq	1fee8 <__assert_fail@plt+0xdee0>
   1ffec:	cmp	r7, r5
   1fff0:	add	r6, r6, #1
   1fff4:	beq	1fee8 <__assert_fail@plt+0xdee0>
   1fff8:	ldrb	r3, [r5], #1
   1fffc:	lsl	r3, r3, #1
   20000:	ldrh	r3, [r2, r3]
   20004:	tst	r3, #16384	; 0x4000
   20008:	beq	1ff74 <__assert_fail@plt+0xdf6c>
   2000c:	b	1ffe4 <__assert_fail@plt+0xdfdc>
   20010:	push	{r4, r5, r6, lr}
   20014:	mov	r5, r1
   20018:	mov	r4, r0
   2001c:	bl	11e10 <strlen@plt>
   20020:	mov	r2, r5
   20024:	mov	r1, r0
   20028:	mov	r0, r4
   2002c:	pop	{r4, r5, r6, lr}
   20030:	b	1fdc4 <__assert_fail@plt+0xddbc>
   20034:	cmp	r0, #0
   20038:	bxeq	lr
   2003c:	ldrb	r3, [r0]
   20040:	cmp	r3, #0
   20044:	beq	200f4 <__assert_fail@plt+0xe0ec>
   20048:	sub	r2, r3, #9
   2004c:	cmp	r2, #23
   20050:	bhi	20084 <__assert_fail@plt+0xe07c>
   20054:	mov	ip, #1
   20058:	ldr	r1, [pc, #200]	; 20128 <__assert_fail@plt+0xe120>
   2005c:	ands	r2, r1, ip, lsl r2
   20060:	beq	20084 <__assert_fail@plt+0xe07c>
   20064:	ldrb	r3, [r0, #1]!
   20068:	cmp	r3, #0
   2006c:	sub	r2, r3, #9
   20070:	beq	200f4 <__assert_fail@plt+0xe0ec>
   20074:	cmp	r2, #23
   20078:	bhi	20084 <__assert_fail@plt+0xe07c>
   2007c:	ands	r2, r1, ip, lsl r2
   20080:	bne	20064 <__assert_fail@plt+0xe05c>
   20084:	sub	r3, r3, #48	; 0x30
   20088:	cmp	r3, #9
   2008c:	bhi	200f4 <__assert_fail@plt+0xe0ec>
   20090:	push	{lr}		; (str lr, [sp, #-4]!)
   20094:	sub	sp, sp, #12
   20098:	add	r1, sp, #8
   2009c:	mov	r3, #0
   200a0:	str	r3, [r1, #-4]!
   200a4:	mov	r2, #10
   200a8:	bl	11e04 <strtoul@plt>
   200ac:	ldr	r3, [sp, #4]
   200b0:	cmp	r3, #0
   200b4:	beq	200e8 <__assert_fail@plt+0xe0e0>
   200b8:	ldrb	r2, [r3]
   200bc:	cmp	r2, #0
   200c0:	beq	200ec <__assert_fail@plt+0xe0e4>
   200c4:	sub	r1, r2, #9
   200c8:	cmp	r1, #23
   200cc:	bhi	200e0 <__assert_fail@plt+0xe0d8>
   200d0:	mov	lr, #1
   200d4:	ldr	ip, [pc, #76]	; 20128 <__assert_fail@plt+0xe120>
   200d8:	ands	r1, ip, lr, lsl r1
   200dc:	bne	200fc <__assert_fail@plt+0xe0f4>
   200e0:	cmp	r2, #44	; 0x2c
   200e4:	beq	200ec <__assert_fail@plt+0xe0e4>
   200e8:	mov	r0, #0
   200ec:	add	sp, sp, #12
   200f0:	pop	{pc}		; (ldr pc, [sp], #4)
   200f4:	mov	r0, #0
   200f8:	bx	lr
   200fc:	add	r3, r3, #1
   20100:	str	r3, [sp, #4]
   20104:	ldrb	r2, [r3]
   20108:	cmp	r2, #0
   2010c:	sub	r1, r2, #9
   20110:	beq	200ec <__assert_fail@plt+0xe0e4>
   20114:	cmp	r1, #23
   20118:	bhi	200e0 <__assert_fail@plt+0xe0d8>
   2011c:	ands	r1, ip, lr, lsl r1
   20120:	bne	200fc <__assert_fail@plt+0xe0f4>
   20124:	b	200e0 <__assert_fail@plt+0xe0d8>
   20128:	addeq	r0, r0, pc, lsl r0
   2012c:	cmp	r0, #2
   20130:	push	{r4, r5, lr}
   20134:	sub	sp, sp, #132	; 0x84
   20138:	beq	20178 <__assert_fail@plt+0xe170>
   2013c:	cmp	r0, #1
   20140:	beq	20230 <__assert_fail@plt+0xe228>
   20144:	mov	r0, #83	; 0x53
   20148:	bl	11c24 <sysconf@plt>
   2014c:	sub	r3, r0, #1
   20150:	cmp	r3, #1
   20154:	mov	r4, r0
   20158:	bls	20210 <__assert_fail@plt+0xe208>
   2015c:	cmp	r4, #0
   20160:	ble	201d8 <__assert_fail@plt+0xe1d0>
   20164:	mvn	r3, #0
   20168:	cmp	r0, r3
   2016c:	movcs	r0, r3
   20170:	add	sp, sp, #132	; 0x84
   20174:	pop	{r4, r5, pc}
   20178:	ldr	r0, [pc, #220]	; 2025c <__assert_fail@plt+0xe254>
   2017c:	bl	11d74 <getenv@plt>
   20180:	bl	20034 <__assert_fail@plt+0xe02c>
   20184:	mov	r5, r0
   20188:	ldr	r0, [pc, #208]	; 20260 <__assert_fail@plt+0xe258>
   2018c:	bl	11d74 <getenv@plt>
   20190:	bl	20034 <__assert_fail@plt+0xe02c>
   20194:	subs	r4, r0, #0
   20198:	mvneq	r4, #0
   2019c:	cmp	r5, #0
   201a0:	bne	201e4 <__assert_fail@plt+0xe1dc>
   201a4:	mov	r2, sp
   201a8:	mov	r1, #128	; 0x80
   201ac:	mov	r0, #0
   201b0:	bl	11f90 <sched_getaffinity@plt>
   201b4:	cmp	r0, #0
   201b8:	beq	201f8 <__assert_fail@plt+0xe1f0>
   201bc:	mov	r0, #84	; 0x54
   201c0:	bl	11c24 <sysconf@plt>
   201c4:	cmp	r0, #0
   201c8:	ble	201d8 <__assert_fail@plt+0xe1d0>
   201cc:	cmp	r0, r4
   201d0:	movcs	r0, r4
   201d4:	b	20170 <__assert_fail@plt+0xe168>
   201d8:	mov	r0, #1
   201dc:	add	sp, sp, #132	; 0x84
   201e0:	pop	{r4, r5, pc}
   201e4:	cmp	r4, r5
   201e8:	movcc	r0, r4
   201ec:	movcs	r0, r5
   201f0:	add	sp, sp, #132	; 0x84
   201f4:	pop	{r4, r5, pc}
   201f8:	mov	r1, sp
   201fc:	mov	r0, #128	; 0x80
   20200:	bl	11bc4 <__sched_cpucount@plt>
   20204:	cmp	r0, #0
   20208:	beq	201bc <__assert_fail@plt+0xe1b4>
   2020c:	b	201cc <__assert_fail@plt+0xe1c4>
   20210:	mov	r2, sp
   20214:	mov	r1, #128	; 0x80
   20218:	mov	r0, #0
   2021c:	bl	11f90 <sched_getaffinity@plt>
   20220:	cmp	r0, #0
   20224:	beq	20238 <__assert_fail@plt+0xe230>
   20228:	mov	r0, r4
   2022c:	b	20164 <__assert_fail@plt+0xe15c>
   20230:	mvn	r4, #0
   20234:	b	201a4 <__assert_fail@plt+0xe19c>
   20238:	mov	r1, sp
   2023c:	mov	r0, #128	; 0x80
   20240:	bl	11bc4 <__sched_cpucount@plt>
   20244:	cmp	r0, #0
   20248:	beq	20228 <__assert_fail@plt+0xe220>
   2024c:	cmp	r4, r0
   20250:	movcc	r4, r0
   20254:	bcc	2015c <__assert_fail@plt+0xe154>
   20258:	b	20228 <__assert_fail@plt+0xe220>
   2025c:	andeq	fp, r2, ip, lsl r1
   20260:	andeq	fp, r2, ip, lsr #2
   20264:	andeq	r0, r0, r0
   20268:	push	{lr}		; (str lr, [sp, #-4]!)
   2026c:	vpush	{d8}
   20270:	mov	r0, #85	; 0x55
   20274:	sub	sp, sp, #68	; 0x44
   20278:	bl	11c24 <sysconf@plt>
   2027c:	vmov	s15, r0
   20280:	mov	r0, #30
   20284:	vcvt.f64.s32	d8, s15
   20288:	bl	11c24 <sysconf@plt>
   2028c:	vldr	d7, [pc, #100]	; 202f8 <__assert_fail@plt+0xe2f0>
   20290:	vcmpe.f64	d8, d7
   20294:	vmrs	APSR_nzcv, fpscr
   20298:	blt	202c0 <__assert_fail@plt+0xe2b8>
   2029c:	vmov	s13, r0
   202a0:	vcvt.f64.s32	d0, s13
   202a4:	vcmpe.f64	d0, d7
   202a8:	vmrs	APSR_nzcv, fpscr
   202ac:	blt	202c0 <__assert_fail@plt+0xe2b8>
   202b0:	vmul.f64	d0, d0, d8
   202b4:	add	sp, sp, #68	; 0x44
   202b8:	vpop	{d8}
   202bc:	pop	{pc}		; (ldr pc, [sp], #4)
   202c0:	mov	r0, sp
   202c4:	bl	11d8c <sysinfo@plt>
   202c8:	cmp	r0, #0
   202cc:	beq	202e0 <__assert_fail@plt+0xe2d8>
   202d0:	vldr	d0, [pc, #40]	; 20300 <__assert_fail@plt+0xe2f8>
   202d4:	add	sp, sp, #68	; 0x44
   202d8:	vpop	{d8}
   202dc:	pop	{pc}		; (ldr pc, [sp], #4)
   202e0:	vldr	s15, [sp, #16]
   202e4:	vcvt.f64.u32	d0, s15
   202e8:	vldr	s15, [sp, #52]	; 0x34
   202ec:	vcvt.f64.u32	d8, s15
   202f0:	b	202b0 <__assert_fail@plt+0xe2a8>
   202f4:	nop			; (mov r0, r0)
	...
   20304:	orrsmi	r0, r0, r0
   20308:	push	{lr}		; (str lr, [sp, #-4]!)
   2030c:	vpush	{d8}
   20310:	mov	r0, #86	; 0x56
   20314:	sub	sp, sp, #68	; 0x44
   20318:	bl	11c24 <sysconf@plt>
   2031c:	vmov	s15, r0
   20320:	mov	r0, #30
   20324:	vcvt.f64.s32	d8, s15
   20328:	bl	11c24 <sysconf@plt>
   2032c:	vldr	d7, [pc, #220]	; 20410 <__assert_fail@plt+0xe408>
   20330:	vcmpe.f64	d8, d7
   20334:	vmrs	APSR_nzcv, fpscr
   20338:	blt	20360 <__assert_fail@plt+0xe358>
   2033c:	vmov	s13, r0
   20340:	vcvt.f64.s32	d0, s13
   20344:	vcmpe.f64	d0, d7
   20348:	vmrs	APSR_nzcv, fpscr
   2034c:	blt	20360 <__assert_fail@plt+0xe358>
   20350:	vmul.f64	d0, d8, d0
   20354:	add	sp, sp, #68	; 0x44
   20358:	vpop	{d8}
   2035c:	pop	{pc}		; (ldr pc, [sp], #4)
   20360:	mov	r0, sp
   20364:	bl	11d8c <sysinfo@plt>
   20368:	cmp	r0, #0
   2036c:	bne	2039c <__assert_fail@plt+0xe394>
   20370:	vldr	s15, [sp, #20]
   20374:	vldr	s13, [sp, #52]	; 0x34
   20378:	vcvt.f64.u32	d0, s15
   2037c:	vldr	s15, [sp, #28]
   20380:	vcvt.f64.u32	d8, s13
   20384:	vcvt.f64.u32	d7, s15
   20388:	vadd.f64	d0, d0, d7
   2038c:	vmul.f64	d0, d0, d8
   20390:	add	sp, sp, #68	; 0x44
   20394:	vpop	{d8}
   20398:	pop	{pc}		; (ldr pc, [sp], #4)
   2039c:	mov	r0, #85	; 0x55
   203a0:	bl	11c24 <sysconf@plt>
   203a4:	vmov	s15, r0
   203a8:	mov	r0, #30
   203ac:	vcvt.f64.s32	d8, s15
   203b0:	bl	11c24 <sysconf@plt>
   203b4:	vldr	d7, [pc, #84]	; 20410 <__assert_fail@plt+0xe408>
   203b8:	vcmpe.f64	d8, d7
   203bc:	vmrs	APSR_nzcv, fpscr
   203c0:	vmov	s13, r0
   203c4:	vcvt.f64.s32	d0, s13
   203c8:	blt	203e0 <__assert_fail@plt+0xe3d8>
   203cc:	vcmpe.f64	d0, d7
   203d0:	vmrs	APSR_nzcv, fpscr
   203d4:	vmulge.f64	d8, d8, d0
   203d8:	vldrge	d0, [pc, #56]	; 20418 <__assert_fail@plt+0xe410>
   203dc:	bge	20350 <__assert_fail@plt+0xe348>
   203e0:	mov	r0, sp
   203e4:	bl	11d8c <sysinfo@plt>
   203e8:	cmp	r0, #0
   203ec:	vldreq	s13, [sp, #16]
   203f0:	vldreq	d7, [pc, #32]	; 20418 <__assert_fail@plt+0xe410>
   203f4:	vldrne	d0, [pc, #36]	; 20420 <__assert_fail@plt+0xe418>
   203f8:	vcvteq.f64.u32	d0, s13
   203fc:	vldreq	s13, [sp, #52]	; 0x34
   20400:	vcvteq.f64.u32	d8, s13
   20404:	vmuleq.f64	d0, d0, d8
   20408:	vmuleq.f64	d0, d0, d7
   2040c:	b	20354 <__assert_fail@plt+0xe34c>
	...
   2041c:	svccc	0x00d00000
   20420:	andeq	r0, r0, r0
   20424:	cmnmi	r0, r0
   20428:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2042c:	mov	r4, r0
   20430:	ldr	r6, [pc, #396]	; 205c4 <__assert_fail@plt+0xe5bc>
   20434:	mov	r7, r1
   20438:	ldr	r8, [r0]
   2043c:	ldr	r3, [r6]
   20440:	ldr	r9, [r0, #4]
   20444:	cmp	r3, #0
   20448:	blt	20480 <__assert_fail@plt+0xe478>
   2044c:	bl	11f6c <pipe2@plt>
   20450:	subs	r5, r0, #0
   20454:	blt	20468 <__assert_fail@plt+0xe460>
   20458:	mov	r3, #1
   2045c:	str	r3, [r6]
   20460:	mov	r0, r5
   20464:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20468:	bl	11e34 <__errno_location@plt>
   2046c:	ldr	r3, [r0]
   20470:	cmp	r3, #38	; 0x26
   20474:	bne	20458 <__assert_fail@plt+0xe450>
   20478:	mvn	r3, #0
   2047c:	str	r3, [r6]
   20480:	bic	r5, r7, #524288	; 0x80000
   20484:	bic	r5, r5, #2048	; 0x800
   20488:	cmp	r5, #0
   2048c:	bne	204b8 <__assert_fail@plt+0xe4b0>
   20490:	mov	r0, r4
   20494:	bl	11eb8 <pipe@plt>
   20498:	cmp	r0, #0
   2049c:	blt	205bc <__assert_fail@plt+0xe5b4>
   204a0:	tst	r7, #2048	; 0x800
   204a4:	bne	20558 <__assert_fail@plt+0xe550>
   204a8:	tst	r7, #524288	; 0x80000
   204ac:	bne	204cc <__assert_fail@plt+0xe4c4>
   204b0:	mov	r0, r5
   204b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   204b8:	bl	11e34 <__errno_location@plt>
   204bc:	mov	r3, #22
   204c0:	mvn	r5, #0
   204c4:	str	r3, [r0]
   204c8:	b	204b0 <__assert_fail@plt+0xe4a8>
   204cc:	mov	r2, #0
   204d0:	mov	r1, #1
   204d4:	ldr	r0, [r4, #4]
   204d8:	bl	27b6c <__assert_fail@plt+0x15b64>
   204dc:	cmp	r0, #0
   204e0:	blt	2052c <__assert_fail@plt+0xe524>
   204e4:	orr	r2, r0, #1
   204e8:	mov	r1, #2
   204ec:	ldr	r0, [r4, #4]
   204f0:	bl	27b6c <__assert_fail@plt+0x15b64>
   204f4:	cmn	r0, #1
   204f8:	beq	2052c <__assert_fail@plt+0xe524>
   204fc:	mov	r2, #0
   20500:	mov	r1, #1
   20504:	ldr	r0, [r4]
   20508:	bl	27b6c <__assert_fail@plt+0x15b64>
   2050c:	cmp	r0, #0
   20510:	blt	2052c <__assert_fail@plt+0xe524>
   20514:	orr	r2, r0, #1
   20518:	mov	r1, #2
   2051c:	ldr	r0, [r4]
   20520:	bl	27b6c <__assert_fail@plt+0x15b64>
   20524:	cmn	r0, #1
   20528:	bne	204b0 <__assert_fail@plt+0xe4a8>
   2052c:	bl	11e34 <__errno_location@plt>
   20530:	mvn	r5, #0
   20534:	mov	r6, r0
   20538:	ldr	r0, [r4]
   2053c:	ldr	r7, [r6]
   20540:	bl	11ff0 <close@plt>
   20544:	ldr	r0, [r4, #4]
   20548:	bl	11ff0 <close@plt>
   2054c:	stm	r4, {r8, r9}
   20550:	str	r7, [r6]
   20554:	b	204b0 <__assert_fail@plt+0xe4a8>
   20558:	mov	r2, r5
   2055c:	mov	r1, #3
   20560:	ldr	r0, [r4, #4]
   20564:	bl	27b6c <__assert_fail@plt+0x15b64>
   20568:	subs	r2, r0, #0
   2056c:	blt	2052c <__assert_fail@plt+0xe524>
   20570:	orr	r2, r2, #2048	; 0x800
   20574:	mov	r1, #4
   20578:	ldr	r0, [r4, #4]
   2057c:	bl	27b6c <__assert_fail@plt+0x15b64>
   20580:	cmn	r0, #1
   20584:	beq	2052c <__assert_fail@plt+0xe524>
   20588:	mov	r2, r5
   2058c:	mov	r1, #3
   20590:	ldr	r0, [r4]
   20594:	bl	27b6c <__assert_fail@plt+0x15b64>
   20598:	cmp	r0, #0
   2059c:	blt	2052c <__assert_fail@plt+0xe524>
   205a0:	orr	r2, r0, #2048	; 0x800
   205a4:	mov	r1, #4
   205a8:	ldr	r0, [r4]
   205ac:	bl	27b6c <__assert_fail@plt+0x15b64>
   205b0:	cmn	r0, #1
   205b4:	bne	204a8 <__assert_fail@plt+0xe4a0>
   205b8:	b	2052c <__assert_fail@plt+0xe524>
   205bc:	mvn	r5, #0
   205c0:	b	204b0 <__assert_fail@plt+0xe4a8>
   205c4:	andeq	ip, r3, ip, asr #17
   205c8:	push	{lr}		; (str lr, [sp, #-4]!)
   205cc:	sub	sp, sp, #12
   205d0:	ldr	r0, [pc, #72]	; 20620 <__assert_fail@plt+0xe618>
   205d4:	bl	11d74 <getenv@plt>
   205d8:	subs	r3, r0, #0
   205dc:	beq	205ec <__assert_fail@plt+0xe5e4>
   205e0:	ldrb	r3, [r3]
   205e4:	cmp	r3, #0
   205e8:	bne	205f8 <__assert_fail@plt+0xe5f0>
   205ec:	ldr	r0, [pc, #48]	; 20624 <__assert_fail@plt+0xe61c>
   205f0:	add	sp, sp, #12
   205f4:	pop	{pc}		; (ldr pc, [sp], #4)
   205f8:	mov	r2, #10
   205fc:	add	r1, sp, #4
   20600:	bl	11aec <strtol@plt>
   20604:	ldr	r2, [sp, #4]
   20608:	ldr	r3, [pc, #20]	; 20624 <__assert_fail@plt+0xe61c>
   2060c:	ldrb	r2, [r2]
   20610:	cmp	r2, #0
   20614:	movne	r0, r3
   20618:	add	sp, sp, #12
   2061c:	pop	{pc}		; (ldr pc, [sp], #4)
   20620:	andeq	fp, r2, r0, asr #2
   20624:	andeq	r1, r3, r9, rrx
   20628:	push	{r4, r5, r6, lr}
   2062c:	subs	r4, r0, #0
   20630:	beq	206a4 <__assert_fail@plt+0xe69c>
   20634:	mov	r1, #47	; 0x2f
   20638:	bl	11f18 <strrchr@plt>
   2063c:	subs	r5, r0, #0
   20640:	beq	20690 <__assert_fail@plt+0xe688>
   20644:	add	r6, r5, #1
   20648:	sub	r3, r6, r4
   2064c:	cmp	r3, #6
   20650:	ble	20690 <__assert_fail@plt+0xe688>
   20654:	mov	r2, #7
   20658:	ldr	r1, [pc, #96]	; 206c0 <__assert_fail@plt+0xe6b8>
   2065c:	sub	r0, r5, #6
   20660:	bl	11fcc <strncmp@plt>
   20664:	cmp	r0, #0
   20668:	bne	20690 <__assert_fail@plt+0xe688>
   2066c:	mov	r2, #3
   20670:	ldr	r1, [pc, #76]	; 206c4 <__assert_fail@plt+0xe6bc>
   20674:	mov	r0, r6
   20678:	bl	11fcc <strncmp@plt>
   2067c:	cmp	r0, #0
   20680:	movne	r4, r6
   20684:	ldreq	r3, [pc, #60]	; 206c8 <__assert_fail@plt+0xe6c0>
   20688:	addeq	r4, r5, #4
   2068c:	streq	r4, [r3]
   20690:	ldr	r2, [pc, #52]	; 206cc <__assert_fail@plt+0xe6c4>
   20694:	ldr	r3, [pc, #52]	; 206d0 <__assert_fail@plt+0xe6c8>
   20698:	str	r4, [r2]
   2069c:	str	r4, [r3]
   206a0:	pop	{r4, r5, r6, pc}
   206a4:	ldr	r3, [pc, #40]	; 206d4 <__assert_fail@plt+0xe6cc>
   206a8:	mov	r2, #55	; 0x37
   206ac:	mov	r1, #1
   206b0:	ldr	r3, [r3]
   206b4:	ldr	r0, [pc, #28]	; 206d8 <__assert_fail@plt+0xe6d0>
   206b8:	bl	11cd8 <fwrite@plt>
   206bc:	bl	11fe4 <abort@plt>
   206c0:	andeq	fp, r2, r8, lsl #3
   206c4:	muleq	r2, r0, r1
   206c8:	andeq	ip, r3, r0, asr #5
   206cc:	ldrdeq	ip, [r3], -r0
   206d0:	andeq	ip, r3, r4, asr #5
   206d4:	ldrdeq	ip, [r3], -r0
   206d8:	andeq	fp, r2, r0, asr r1
   206dc:	push	{r4, r5, r6, lr}
   206e0:	mov	r4, r0
   206e4:	mov	r5, r1
   206e8:	bl	27e2c <__assert_fail@plt+0x15e24>
   206ec:	ldrb	r3, [r0]
   206f0:	bic	r3, r3, #32
   206f4:	cmp	r3, #85	; 0x55
   206f8:	bne	20758 <__assert_fail@plt+0xe750>
   206fc:	ldrb	r3, [r0, #1]
   20700:	bic	r3, r3, #32
   20704:	cmp	r3, #84	; 0x54
   20708:	bne	20794 <__assert_fail@plt+0xe78c>
   2070c:	ldrb	r3, [r0, #2]
   20710:	bic	r3, r3, #32
   20714:	cmp	r3, #70	; 0x46
   20718:	bne	20794 <__assert_fail@plt+0xe78c>
   2071c:	ldrb	r3, [r0, #3]
   20720:	cmp	r3, #45	; 0x2d
   20724:	bne	20794 <__assert_fail@plt+0xe78c>
   20728:	ldrb	r3, [r0, #4]
   2072c:	cmp	r3, #56	; 0x38
   20730:	bne	20794 <__assert_fail@plt+0xe78c>
   20734:	ldrb	r3, [r0, #5]
   20738:	cmp	r3, #0
   2073c:	bne	20794 <__assert_fail@plt+0xe78c>
   20740:	ldrb	r2, [r4]
   20744:	ldr	r3, [pc, #152]	; 207e4 <__assert_fail@plt+0xe7dc>
   20748:	ldr	r0, [pc, #152]	; 207e8 <__assert_fail@plt+0xe7e0>
   2074c:	cmp	r2, #96	; 0x60
   20750:	movne	r0, r3
   20754:	pop	{r4, r5, r6, pc}
   20758:	cmp	r3, #71	; 0x47
   2075c:	bne	20794 <__assert_fail@plt+0xe78c>
   20760:	ldrb	r3, [r0, #1]
   20764:	bic	r3, r3, #32
   20768:	cmp	r3, #66	; 0x42
   2076c:	bne	20794 <__assert_fail@plt+0xe78c>
   20770:	ldrb	r3, [r0, #2]
   20774:	cmp	r3, #49	; 0x31
   20778:	bne	20794 <__assert_fail@plt+0xe78c>
   2077c:	ldrb	r3, [r0, #3]
   20780:	cmp	r3, #56	; 0x38
   20784:	bne	20794 <__assert_fail@plt+0xe78c>
   20788:	ldrb	r3, [r0, #4]
   2078c:	cmp	r3, #48	; 0x30
   20790:	beq	207a8 <__assert_fail@plt+0xe7a0>
   20794:	ldr	r3, [pc, #80]	; 207ec <__assert_fail@plt+0xe7e4>
   20798:	cmp	r5, #9
   2079c:	ldr	r0, [pc, #76]	; 207f0 <__assert_fail@plt+0xe7e8>
   207a0:	movne	r0, r3
   207a4:	pop	{r4, r5, r6, pc}
   207a8:	ldrb	r3, [r0, #5]
   207ac:	cmp	r3, #51	; 0x33
   207b0:	bne	20794 <__assert_fail@plt+0xe78c>
   207b4:	ldrb	r3, [r0, #6]
   207b8:	cmp	r3, #48	; 0x30
   207bc:	bne	20794 <__assert_fail@plt+0xe78c>
   207c0:	ldrb	r3, [r0, #7]
   207c4:	cmp	r3, #0
   207c8:	bne	20794 <__assert_fail@plt+0xe78c>
   207cc:	ldrb	r2, [r4]
   207d0:	ldr	r3, [pc, #28]	; 207f4 <__assert_fail@plt+0xe7ec>
   207d4:	ldr	r0, [pc, #28]	; 207f8 <__assert_fail@plt+0xe7f0>
   207d8:	cmp	r2, #96	; 0x60
   207dc:	movne	r0, r3
   207e0:	pop	{r4, r5, r6, pc}
   207e4:	andeq	fp, r2, ip, ror #3
   207e8:	andeq	fp, r2, r8, ror #3
   207ec:	strdeq	fp, [r2], -ip
   207f0:	strdeq	fp, [r2], -r8
   207f4:	strdeq	fp, [r2], -r4
   207f8:	strdeq	fp, [r2], -r0
   207fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20800:	sub	sp, sp, #140	; 0x8c
   20804:	mov	r9, r1
   20808:	str	r3, [sp, #24]
   2080c:	mov	r3, #1
   20810:	mov	sl, r0
   20814:	str	r2, [sp, #44]	; 0x2c
   20818:	str	r3, [sp, #28]
   2081c:	bl	11d08 <__ctype_get_mb_cur_max@plt>
   20820:	ldr	r3, [sp, #180]	; 0xb4
   20824:	mov	fp, r9
   20828:	mov	r9, sl
   2082c:	lsr	r3, r3, #1
   20830:	and	r3, r3, #1
   20834:	str	r3, [sp, #40]	; 0x28
   20838:	ldr	r3, [sp, #180]	; 0xb4
   2083c:	mov	r2, #0
   20840:	and	r3, r3, #4
   20844:	str	r3, [sp, #100]	; 0x64
   20848:	ldr	r3, [sp, #180]	; 0xb4
   2084c:	str	r2, [sp, #76]	; 0x4c
   20850:	and	r3, r3, #1
   20854:	str	r3, [sp, #96]	; 0x60
   20858:	str	r2, [sp, #36]	; 0x24
   2085c:	str	r2, [sp, #56]	; 0x38
   20860:	str	r2, [sp, #68]	; 0x44
   20864:	str	r2, [sp, #72]	; 0x48
   20868:	str	r2, [sp, #84]	; 0x54
   2086c:	str	r0, [sp, #80]	; 0x50
   20870:	ldr	r3, [sp, #176]	; 0xb0
   20874:	cmp	r3, #10
   20878:	ldrls	pc, [pc, r3, lsl #2]
   2087c:	b	21a54 <__assert_fail@plt+0xfa4c>
   20880:	andeq	r0, r2, ip, lsr #17
   20884:	andeq	r0, r2, ip, asr #23
   20888:	andeq	r0, r2, r4, lsr #26
   2088c:	andeq	r0, r2, r0, lsl #24
   20890:	andeq	r0, r2, r8, ror sp
   20894:	andeq	r0, r2, r8, asr sp
   20898:	andeq	r0, r2, r0, lsr #24
   2089c:	andeq	r0, r2, r4, asr #24
   208a0:	andeq	r0, r2, ip, ror #24
   208a4:	andeq	r0, r2, ip, ror #24
   208a8:	andeq	r0, r2, ip, ror #24
   208ac:	mov	r3, #0
   208b0:	ldr	r1, [sp, #56]	; 0x38
   208b4:	ldr	r2, [sp, #176]	; 0xb0
   208b8:	ldr	lr, [sp, #176]	; 0xb0
   208bc:	mov	r8, r3
   208c0:	mov	ip, r3
   208c4:	str	r3, [sp, #40]	; 0x28
   208c8:	mov	r3, r1
   208cc:	cmp	r2, #2
   208d0:	moveq	r3, #0
   208d4:	andne	r3, r3, #1
   208d8:	mov	r0, r3
   208dc:	str	r3, [sp, #92]	; 0x5c
   208e0:	ldr	r3, [sp, #68]	; 0x44
   208e4:	sub	lr, lr, #2
   208e8:	adds	r2, r3, #0
   208ec:	movne	r2, #1
   208f0:	and	r3, r1, ip
   208f4:	and	r3, r2, r3
   208f8:	clz	lr, lr
   208fc:	str	r3, [sp, #88]	; 0x58
   20900:	lsr	lr, lr, #5
   20904:	mov	r3, ip
   20908:	and	r3, r3, lr
   2090c:	mov	sl, #0
   20910:	and	r0, r2, r0
   20914:	str	r3, [sp, #64]	; 0x40
   20918:	eor	r3, r1, #1
   2091c:	str	lr, [sp, #52]	; 0x34
   20920:	str	r0, [sp, #48]	; 0x30
   20924:	str	r3, [sp, #60]	; 0x3c
   20928:	ldr	r3, [sp, #24]
   2092c:	cmn	r3, #1
   20930:	beq	20e60 <__assert_fail@plt+0xee58>
   20934:	subs	r7, r3, sl
   20938:	movne	r7, #1
   2093c:	cmp	r7, #0
   20940:	beq	20e78 <__assert_fail@plt+0xee70>
   20944:	ldr	r3, [sp, #48]	; 0x30
   20948:	cmp	r3, #0
   2094c:	beq	211e4 <__assert_fail@plt+0xf1dc>
   20950:	ldr	r2, [sp, #68]	; 0x44
   20954:	ldr	r1, [sp, #24]
   20958:	cmp	r2, #1
   2095c:	mov	r3, r2
   20960:	movls	r3, #0
   20964:	movhi	r3, #1
   20968:	cmn	r1, #1
   2096c:	movne	r3, #0
   20970:	cmp	r3, #0
   20974:	add	r4, sl, r2
   20978:	beq	20988 <__assert_fail@plt+0xe980>
   2097c:	ldr	r0, [sp, #44]	; 0x2c
   20980:	bl	11e10 <strlen@plt>
   20984:	str	r0, [sp, #24]
   20988:	ldr	r3, [sp, #24]
   2098c:	cmp	r3, r4
   20990:	ldr	r3, [sp, #44]	; 0x2c
   20994:	add	r5, r3, sl
   20998:	bcc	211ec <__assert_fail@plt+0xf1e4>
   2099c:	mov	r0, r5
   209a0:	ldr	r2, [sp, #68]	; 0x44
   209a4:	ldr	r1, [sp, #72]	; 0x48
   209a8:	bl	11bf4 <memcmp@plt>
   209ac:	cmp	r0, #0
   209b0:	bne	211ec <__assert_fail@plt+0xf1e4>
   209b4:	ldr	r3, [sp, #40]	; 0x28
   209b8:	cmp	r3, #0
   209bc:	bne	21ba8 <__assert_fail@plt+0xfba0>
   209c0:	ldrb	r4, [r5]
   209c4:	cmp	r4, #126	; 0x7e
   209c8:	ldrls	pc, [pc, r4, lsl #2]
   209cc:	b	21ae4 <__assert_fail@plt+0xfadc>
   209d0:	andeq	r1, r2, r4, lsr #1
   209d4:	andeq	r1, r2, r4, ror #21
   209d8:	andeq	r1, r2, r4, ror #21
   209dc:	andeq	r1, r2, r4, ror #21
   209e0:	andeq	r1, r2, r4, ror #21
   209e4:	andeq	r1, r2, r4, ror #21
   209e8:	andeq	r1, r2, r4, ror #21
   209ec:	muleq	r2, r0, r0
   209f0:	andeq	r1, r2, ip, ror r0
   209f4:	andeq	r1, r2, r8, asr r0
   209f8:	andeq	r1, r2, r8, lsr r0
   209fc:	andeq	r1, r2, r8, rrx
   20a00:	andeq	r0, r2, r0, lsr #31
   20a04:	ldrdeq	r1, [r2], -r4
   20a08:	andeq	r1, r2, r4, ror #21
   20a0c:	andeq	r1, r2, r4, ror #21
   20a10:	andeq	r1, r2, r4, ror #21
   20a14:	andeq	r1, r2, r4, ror #21
   20a18:	andeq	r1, r2, r4, ror #21
   20a1c:	andeq	r1, r2, r4, ror #21
   20a20:	andeq	r1, r2, r4, ror #21
   20a24:	andeq	r1, r2, r4, ror #21
   20a28:	andeq	r1, r2, r4, ror #21
   20a2c:	andeq	r1, r2, r4, ror #21
   20a30:	andeq	r1, r2, r4, ror #21
   20a34:	andeq	r1, r2, r4, ror #21
   20a38:	andeq	r1, r2, r4, ror #21
   20a3c:	andeq	r1, r2, r4, ror #21
   20a40:	andeq	r1, r2, r4, ror #21
   20a44:	andeq	r1, r2, r4, ror #21
   20a48:	andeq	r1, r2, r4, ror #21
   20a4c:	andeq	r1, r2, r4, ror #21
   20a50:	andeq	r1, r2, r4, asr #3
   20a54:	andeq	r1, r2, r4, lsr #3
   20a58:	andeq	r1, r2, r4, lsr #3
   20a5c:	andeq	r1, r2, r4, lsl #3
   20a60:	andeq	r1, r2, r4, lsr #3
   20a64:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20a68:	andeq	r1, r2, r4, lsr #3
   20a6c:	andeq	r0, r2, ip, ror #30
   20a70:	andeq	r1, r2, r4, lsr #3
   20a74:	andeq	r1, r2, r4, lsr #3
   20a78:	andeq	r1, r2, r4, lsr #3
   20a7c:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20a80:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20a84:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20a88:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20a8c:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20a90:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20a94:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20a98:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20a9c:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20aa0:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20aa4:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20aa8:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20aac:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20ab0:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20ab4:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20ab8:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20abc:	andeq	r1, r2, r4, lsr #3
   20ac0:	andeq	r1, r2, r4, lsr #3
   20ac4:	andeq	r1, r2, r4, lsr #3
   20ac8:	andeq	r1, r2, r4, lsr #3
   20acc:	andeq	r0, r2, ip, lsl pc
   20ad0:	andeq	r1, r2, r4, ror #21
   20ad4:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20ad8:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20adc:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20ae0:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20ae4:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20ae8:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20aec:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20af0:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20af4:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20af8:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20afc:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b00:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b04:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b08:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b0c:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b10:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b14:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b18:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b1c:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b20:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b24:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b28:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b2c:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b30:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b34:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b38:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b3c:	andeq	r1, r2, r4, lsr #3
   20b40:	andeq	r0, r2, r8, ror #29
   20b44:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b48:	andeq	r1, r2, r4, lsr #3
   20b4c:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b50:	andeq	r1, r2, r4, lsr #3
   20b54:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b58:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b5c:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b60:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b64:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b68:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b6c:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b70:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b74:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b78:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b7c:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b80:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b84:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b88:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b8c:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b90:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b94:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b98:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20b9c:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20ba0:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20ba4:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20ba8:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20bac:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20bb0:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20bb4:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20bb8:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20bbc:	andeq	r0, r2, r0, lsr #27
   20bc0:	andeq	r1, r2, r4, lsr #3
   20bc4:	andeq	r0, r2, r0, lsr #27
   20bc8:	andeq	r1, r2, r4, lsl #3
   20bcc:	mov	r3, #1
   20bd0:	str	r3, [sp, #40]	; 0x28
   20bd4:	str	r3, [sp, #68]	; 0x44
   20bd8:	mov	r8, #0
   20bdc:	ldr	r3, [pc, #4056]	; 21bbc <__assert_fail@plt+0xfbb4>
   20be0:	str	r3, [sp, #72]	; 0x48
   20be4:	mov	r3, #2
   20be8:	str	r3, [sp, #176]	; 0xb0
   20bec:	ldr	r1, [sp, #56]	; 0x38
   20bf0:	mov	r2, r3
   20bf4:	ldr	ip, [sp, #40]	; 0x28
   20bf8:	mov	lr, r3
   20bfc:	b	208c8 <__assert_fail@plt+0xe8c0>
   20c00:	mov	r3, #1
   20c04:	str	r3, [sp, #56]	; 0x38
   20c08:	str	r3, [sp, #68]	; 0x44
   20c0c:	str	r3, [sp, #40]	; 0x28
   20c10:	ldr	r3, [pc, #4004]	; 21bbc <__assert_fail@plt+0xfbb4>
   20c14:	mov	r8, #0
   20c18:	str	r3, [sp, #72]	; 0x48
   20c1c:	b	20be4 <__assert_fail@plt+0xebdc>
   20c20:	mov	r3, #1
   20c24:	str	r3, [sp, #56]	; 0x38
   20c28:	str	r3, [sp, #68]	; 0x44
   20c2c:	str	r3, [sp, #40]	; 0x28
   20c30:	ldr	r3, [pc, #3976]	; 21bc0 <__assert_fail@plt+0xfbb8>
   20c34:	mov	r8, #0
   20c38:	str	r3, [sp, #72]	; 0x48
   20c3c:	mov	r3, #5
   20c40:	b	20be8 <__assert_fail@plt+0xebe0>
   20c44:	mov	r3, #0
   20c48:	str	r3, [sp, #40]	; 0x28
   20c4c:	mov	r3, #1
   20c50:	str	r3, [sp, #56]	; 0x38
   20c54:	mov	r8, #0
   20c58:	mov	r1, r3
   20c5c:	ldr	r2, [sp, #176]	; 0xb0
   20c60:	ldr	ip, [sp, #40]	; 0x28
   20c64:	ldr	lr, [sp, #176]	; 0xb0
   20c68:	b	208c8 <__assert_fail@plt+0xe8c0>
   20c6c:	ldr	r3, [sp, #176]	; 0xb0
   20c70:	cmp	r3, #10
   20c74:	beq	20cb8 <__assert_fail@plt+0xecb0>
   20c78:	mov	r2, #5
   20c7c:	ldr	r1, [pc, #3904]	; 21bc4 <__assert_fail@plt+0xfbbc>
   20c80:	mov	r0, #0
   20c84:	bl	11c0c <dcgettext@plt>
   20c88:	ldr	r2, [pc, #3892]	; 21bc4 <__assert_fail@plt+0xfbbc>
   20c8c:	cmp	r0, r2
   20c90:	str	r0, [sp, #188]	; 0xbc
   20c94:	beq	21d50 <__assert_fail@plt+0xfd48>
   20c98:	mov	r2, #5
   20c9c:	ldr	r1, [pc, #3864]	; 21bbc <__assert_fail@plt+0xfbb4>
   20ca0:	mov	r0, #0
   20ca4:	bl	11c0c <dcgettext@plt>
   20ca8:	ldr	r2, [pc, #3852]	; 21bbc <__assert_fail@plt+0xfbb4>
   20cac:	cmp	r0, r2
   20cb0:	str	r0, [sp, #192]	; 0xc0
   20cb4:	beq	21d40 <__assert_fail@plt+0xfd38>
   20cb8:	ldr	r8, [sp, #40]	; 0x28
   20cbc:	cmp	r8, #0
   20cc0:	movne	r8, #0
   20cc4:	bne	20cf4 <__assert_fail@plt+0xecec>
   20cc8:	ldr	r3, [sp, #188]	; 0xbc
   20ccc:	ldrb	r3, [r3]
   20cd0:	cmp	r3, #0
   20cd4:	beq	20cf4 <__assert_fail@plt+0xecec>
   20cd8:	ldr	r2, [sp, #188]	; 0xbc
   20cdc:	cmp	fp, r8
   20ce0:	strbhi	r3, [r9, r8]
   20ce4:	ldrb	r3, [r2, #1]!
   20ce8:	add	r8, r8, #1
   20cec:	cmp	r3, #0
   20cf0:	bne	20cdc <__assert_fail@plt+0xecd4>
   20cf4:	ldr	r0, [sp, #192]	; 0xc0
   20cf8:	bl	11e10 <strlen@plt>
   20cfc:	ldr	r3, [sp, #192]	; 0xc0
   20d00:	ldr	r2, [sp, #176]	; 0xb0
   20d04:	str	r3, [sp, #72]	; 0x48
   20d08:	mov	r3, #1
   20d0c:	str	r3, [sp, #56]	; 0x38
   20d10:	mov	r1, r3
   20d14:	ldr	ip, [sp, #40]	; 0x28
   20d18:	ldr	lr, [sp, #176]	; 0xb0
   20d1c:	str	r0, [sp, #68]	; 0x44
   20d20:	b	208c8 <__assert_fail@plt+0xe8c0>
   20d24:	ldr	r3, [sp, #40]	; 0x28
   20d28:	cmp	r3, #0
   20d2c:	beq	219d4 <__assert_fail@plt+0xf9cc>
   20d30:	mov	r3, #1
   20d34:	str	r3, [sp, #68]	; 0x44
   20d38:	ldr	r3, [pc, #3708]	; 21bbc <__assert_fail@plt+0xfbb4>
   20d3c:	str	r3, [sp, #72]	; 0x48
   20d40:	mov	r8, #0
   20d44:	ldr	r1, [sp, #56]	; 0x38
   20d48:	ldr	r2, [sp, #176]	; 0xb0
   20d4c:	ldr	ip, [sp, #40]	; 0x28
   20d50:	ldr	lr, [sp, #176]	; 0xb0
   20d54:	b	208c8 <__assert_fail@plt+0xe8c0>
   20d58:	ldr	r3, [sp, #40]	; 0x28
   20d5c:	cmp	r3, #0
   20d60:	beq	21a58 <__assert_fail@plt+0xfa50>
   20d64:	str	r3, [sp, #56]	; 0x38
   20d68:	mov	r3, #1
   20d6c:	str	r3, [sp, #68]	; 0x44
   20d70:	ldr	r3, [pc, #3656]	; 21bc0 <__assert_fail@plt+0xfbb8>
   20d74:	b	20d3c <__assert_fail@plt+0xed34>
   20d78:	ldr	r3, [sp, #40]	; 0x28
   20d7c:	cmp	r3, #0
   20d80:	mov	r3, #1
   20d84:	streq	r3, [sp, #56]	; 0x38
   20d88:	beq	219d4 <__assert_fail@plt+0xf9cc>
   20d8c:	str	r3, [sp, #68]	; 0x44
   20d90:	ldr	r3, [pc, #3620]	; 21bbc <__assert_fail@plt+0xfbb4>
   20d94:	mov	r8, #0
   20d98:	str	r3, [sp, #72]	; 0x48
   20d9c:	b	20be4 <__assert_fail@plt+0xebdc>
   20da0:	ldr	r3, [sp, #24]
   20da4:	ldr	r6, [sp, #48]	; 0x30
   20da8:	cmn	r3, #1
   20dac:	beq	21408 <__assert_fail@plt+0xf400>
   20db0:	subs	r3, r3, #1
   20db4:	movne	r3, #1
   20db8:	cmp	r3, #0
   20dbc:	beq	21188 <__assert_fail@plt+0xf180>
   20dc0:	ldr	r1, [sp, #52]	; 0x34
   20dc4:	mov	r7, r3
   20dc8:	mov	r3, #0
   20dcc:	str	r3, [sp, #32]
   20dd0:	ldr	r3, [sp, #60]	; 0x3c
   20dd4:	orr	r2, r1, r3
   20dd8:	ldr	r3, [sp, #40]	; 0x28
   20ddc:	eor	r2, r2, #1
   20de0:	orr	r2, r3, r2
   20de4:	tst	r2, #255	; 0xff
   20de8:	bne	2170c <__assert_fail@plt+0xf704>
   20dec:	cmp	r6, #0
   20df0:	bne	20fcc <__assert_fail@plt+0xefc4>
   20df4:	ldr	r3, [sp, #36]	; 0x24
   20df8:	add	sl, sl, #1
   20dfc:	and	r3, r3, r7
   20e00:	uxtb	r6, r3
   20e04:	cmp	r6, #0
   20e08:	beq	20e34 <__assert_fail@plt+0xee2c>
   20e0c:	cmp	fp, r8
   20e10:	movhi	r3, #39	; 0x27
   20e14:	strbhi	r3, [r9, r8]
   20e18:	add	r3, r8, #1
   20e1c:	cmp	fp, r3
   20e20:	movhi	r2, #39	; 0x27
   20e24:	add	r8, r8, #2
   20e28:	strbhi	r2, [r9, r3]
   20e2c:	mov	r3, #0
   20e30:	str	r3, [sp, #36]	; 0x24
   20e34:	ldr	r2, [sp, #32]
   20e38:	cmp	r8, fp
   20e3c:	ldr	r3, [sp, #28]
   20e40:	strbcc	r4, [r9, r8]
   20e44:	cmp	r2, #0
   20e48:	moveq	r3, #0
   20e4c:	str	r3, [sp, #28]
   20e50:	ldr	r3, [sp, #24]
   20e54:	add	r8, r8, #1
   20e58:	cmn	r3, #1
   20e5c:	bne	20934 <__assert_fail@plt+0xe92c>
   20e60:	ldr	r3, [sp, #44]	; 0x2c
   20e64:	ldrb	r3, [r3, sl]
   20e68:	adds	r7, r3, #0
   20e6c:	movne	r7, #1
   20e70:	cmp	r7, #0
   20e74:	bne	20944 <__assert_fail@plt+0xe93c>
   20e78:	ldr	r3, [sp, #64]	; 0x40
   20e7c:	cmp	r8, #0
   20e80:	movne	r3, #0
   20e84:	andeq	r3, r3, #1
   20e88:	cmp	r3, #0
   20e8c:	str	r3, [sp, #64]	; 0x40
   20e90:	bne	21934 <__assert_fail@plt+0xf92c>
   20e94:	ldr	r3, [sp, #40]	; 0x28
   20e98:	ldr	r2, [sp, #52]	; 0x34
   20e9c:	eor	r3, r3, #1
   20ea0:	ands	r2, r2, r3
   20ea4:	beq	21d60 <__assert_fail@plt+0xfd58>
   20ea8:	ldr	r3, [sp, #76]	; 0x4c
   20eac:	cmp	r3, #0
   20eb0:	beq	21d30 <__assert_fail@plt+0xfd28>
   20eb4:	ldr	r3, [sp, #28]
   20eb8:	cmp	r3, #0
   20ebc:	bne	21cec <__assert_fail@plt+0xfce4>
   20ec0:	ldr	r2, [sp, #84]	; 0x54
   20ec4:	clz	r3, fp
   20ec8:	cmp	r2, #0
   20ecc:	lsr	r3, r3, #5
   20ed0:	moveq	r3, #0
   20ed4:	cmp	r3, #0
   20ed8:	beq	21c8c <__assert_fail@plt+0xfc84>
   20edc:	mov	fp, r2
   20ee0:	str	r3, [sp, #76]	; 0x4c
   20ee4:	b	20870 <__assert_fail@plt+0xe868>
   20ee8:	ldr	r3, [sp, #176]	; 0xb0
   20eec:	ldr	r6, [sp, #48]	; 0x30
   20ef0:	cmp	r3, #2
   20ef4:	beq	2142c <__assert_fail@plt+0xf424>
   20ef8:	ldr	r3, [sp, #88]	; 0x58
   20efc:	cmp	r3, #0
   20f00:	beq	219b0 <__assert_fail@plt+0xf9a8>
   20f04:	mov	r3, #0
   20f08:	add	sl, sl, #1
   20f0c:	ldr	r6, [sp, #36]	; 0x24
   20f10:	str	r3, [sp, #32]
   20f14:	mov	r4, #92	; 0x5c
   20f18:	b	20e04 <__assert_fail@plt+0xedfc>
   20f1c:	ldr	r3, [sp, #176]	; 0xb0
   20f20:	ldr	r6, [sp, #48]	; 0x30
   20f24:	cmp	r3, #2
   20f28:	beq	2145c <__assert_fail@plt+0xf454>
   20f2c:	cmp	r3, #5
   20f30:	bne	219c0 <__assert_fail@plt+0xf9b8>
   20f34:	ldr	r3, [sp, #100]	; 0x64
   20f38:	cmp	r3, #0
   20f3c:	beq	21a24 <__assert_fail@plt+0xfa1c>
   20f40:	ldr	r2, [sp, #24]
   20f44:	add	r3, sl, #2
   20f48:	cmp	r2, r3
   20f4c:	bls	20f5c <__assert_fail@plt+0xef54>
   20f50:	ldrb	r4, [r5, #1]
   20f54:	cmp	r4, #63	; 0x3f
   20f58:	beq	21bcc <__assert_fail@plt+0xfbc4>
   20f5c:	mov	r1, #0
   20f60:	str	r1, [sp, #32]
   20f64:	mov	r4, #63	; 0x3f
   20f68:	b	20dd0 <__assert_fail@plt+0xedc8>
   20f6c:	ldr	r3, [sp, #176]	; 0xb0
   20f70:	ldr	r6, [sp, #48]	; 0x30
   20f74:	cmp	r3, #2
   20f78:	beq	21488 <__assert_fail@plt+0xf480>
   20f7c:	str	r7, [sp, #32]
   20f80:	str	r7, [sp, #76]	; 0x4c
   20f84:	mov	r1, #0
   20f88:	mov	r4, #39	; 0x27
   20f8c:	b	20dd0 <__assert_fail@plt+0xedc8>
   20f90:	ldr	r6, [sp, #48]	; 0x30
   20f94:	ldr	r1, [sp, #52]	; 0x34
   20f98:	str	r7, [sp, #32]
   20f9c:	b	20dd0 <__assert_fail@plt+0xedc8>
   20fa0:	ldr	r6, [sp, #48]	; 0x30
   20fa4:	ldr	r1, [sp, #52]	; 0x34
   20fa8:	mov	r4, #12
   20fac:	mov	r3, #102	; 0x66
   20fb0:	ldr	r2, [sp, #56]	; 0x38
   20fb4:	cmp	r2, #0
   20fb8:	streq	r2, [sp, #32]
   20fbc:	beq	20dd0 <__assert_fail@plt+0xedc8>
   20fc0:	mov	r4, r3
   20fc4:	mov	r3, #0
   20fc8:	str	r3, [sp, #32]
   20fcc:	ldr	r3, [sp, #40]	; 0x28
   20fd0:	cmp	r3, #0
   20fd4:	bne	21744 <__assert_fail@plt+0xf73c>
   20fd8:	ldr	r3, [sp, #36]	; 0x24
   20fdc:	eor	r3, r3, #1
   20fe0:	and	r3, r3, r1
   20fe4:	ands	r3, r3, #255	; 0xff
   20fe8:	beq	21020 <__assert_fail@plt+0xf018>
   20fec:	cmp	fp, r8
   20ff0:	movhi	r2, #39	; 0x27
   20ff4:	strbhi	r2, [r9, r8]
   20ff8:	add	r2, r8, #1
   20ffc:	cmp	fp, r2
   21000:	movhi	r1, #36	; 0x24
   21004:	strbhi	r1, [r9, r2]
   21008:	add	r2, r8, #2
   2100c:	cmp	fp, r2
   21010:	add	r8, r8, #3
   21014:	movhi	r1, #39	; 0x27
   21018:	strbhi	r1, [r9, r2]
   2101c:	str	r3, [sp, #36]	; 0x24
   21020:	cmp	fp, r8
   21024:	movhi	r3, #92	; 0x5c
   21028:	strbhi	r3, [r9, r8]
   2102c:	add	sl, sl, #1
   21030:	add	r8, r8, #1
   21034:	b	20e34 <__assert_fail@plt+0xee2c>
   21038:	ldr	r6, [sp, #48]	; 0x30
   2103c:	mov	r4, #10
   21040:	mov	r3, #110	; 0x6e
   21044:	ldr	r2, [sp, #64]	; 0x40
   21048:	cmp	r2, #0
   2104c:	bne	21acc <__assert_fail@plt+0xfac4>
   21050:	ldr	r1, [sp, #52]	; 0x34
   21054:	b	20fb0 <__assert_fail@plt+0xefa8>
   21058:	ldr	r6, [sp, #48]	; 0x30
   2105c:	ldr	r1, [sp, #52]	; 0x34
   21060:	mov	r3, #116	; 0x74
   21064:	b	20fb0 <__assert_fail@plt+0xefa8>
   21068:	ldr	r6, [sp, #48]	; 0x30
   2106c:	ldr	r1, [sp, #52]	; 0x34
   21070:	mov	r4, #11
   21074:	mov	r3, #118	; 0x76
   21078:	b	20fb0 <__assert_fail@plt+0xefa8>
   2107c:	ldr	r6, [sp, #48]	; 0x30
   21080:	ldr	r1, [sp, #52]	; 0x34
   21084:	mov	r4, #8
   21088:	mov	r3, #98	; 0x62
   2108c:	b	20fb0 <__assert_fail@plt+0xefa8>
   21090:	ldr	r6, [sp, #48]	; 0x30
   21094:	ldr	r1, [sp, #52]	; 0x34
   21098:	mov	r4, #7
   2109c:	mov	r3, #97	; 0x61
   210a0:	b	20fb0 <__assert_fail@plt+0xefa8>
   210a4:	ldr	r3, [sp, #56]	; 0x38
   210a8:	ldr	r6, [sp, #48]	; 0x30
   210ac:	cmp	r3, #0
   210b0:	beq	21574 <__assert_fail@plt+0xf56c>
   210b4:	ldr	r3, [sp, #40]	; 0x28
   210b8:	cmp	r3, #0
   210bc:	bne	21ba8 <__assert_fail@plt+0xfba0>
   210c0:	ldr	r3, [sp, #36]	; 0x24
   210c4:	ldr	r2, [sp, #52]	; 0x34
   210c8:	eor	r3, r3, #1
   210cc:	ands	r3, r2, r3
   210d0:	moveq	r2, r8
   210d4:	beq	2110c <__assert_fail@plt+0xf104>
   210d8:	cmp	fp, r8
   210dc:	movhi	r2, #39	; 0x27
   210e0:	strbhi	r2, [r9, r8]
   210e4:	add	r2, r8, #1
   210e8:	cmp	fp, r2
   210ec:	movhi	r1, #36	; 0x24
   210f0:	strbhi	r1, [r9, r2]
   210f4:	add	r2, r8, #2
   210f8:	cmp	fp, r2
   210fc:	movhi	r1, #39	; 0x27
   21100:	strbhi	r1, [r9, r2]
   21104:	add	r2, r8, #3
   21108:	str	r3, [sp, #36]	; 0x24
   2110c:	cmp	fp, r2
   21110:	movhi	r3, #92	; 0x5c
   21114:	strbhi	r3, [r9, r2]
   21118:	ldr	r3, [sp, #92]	; 0x5c
   2111c:	add	r8, r2, #1
   21120:	cmp	r3, #0
   21124:	beq	21aa8 <__assert_fail@plt+0xfaa0>
   21128:	ldr	r1, [sp, #24]
   2112c:	add	r3, sl, #1
   21130:	cmp	r1, r3
   21134:	bls	2116c <__assert_fail@plt+0xf164>
   21138:	ldr	r1, [sp, #44]	; 0x2c
   2113c:	ldrb	r3, [r1, r3]
   21140:	sub	r3, r3, #48	; 0x30
   21144:	cmp	r3, #9
   21148:	bhi	2116c <__assert_fail@plt+0xf164>
   2114c:	cmp	fp, r8
   21150:	movhi	r3, #48	; 0x30
   21154:	strbhi	r3, [r9, r8]
   21158:	add	r3, r2, #2
   2115c:	cmp	fp, r3
   21160:	add	r8, r2, #3
   21164:	movhi	r1, #48	; 0x30
   21168:	strbhi	r1, [r9, r3]
   2116c:	ldr	r3, [sp, #40]	; 0x28
   21170:	ldr	r1, [sp, #52]	; 0x34
   21174:	mov	r7, r3
   21178:	str	r3, [sp, #32]
   2117c:	mov	r4, #48	; 0x30
   21180:	b	20dd0 <__assert_fail@plt+0xedc8>
   21184:	ldr	r6, [sp, #48]	; 0x30
   21188:	cmp	sl, #0
   2118c:	streq	r7, [sp, #32]
   21190:	beq	211b0 <__assert_fail@plt+0xf1a8>
   21194:	mov	r3, #0
   21198:	ldr	r1, [sp, #52]	; 0x34
   2119c:	str	r3, [sp, #32]
   211a0:	b	20dd0 <__assert_fail@plt+0xedc8>
   211a4:	ldr	r6, [sp, #48]	; 0x30
   211a8:	mov	r3, #0
   211ac:	str	r3, [sp, #32]
   211b0:	ldr	r3, [sp, #64]	; 0x40
   211b4:	cmp	r3, #0
   211b8:	bne	21934 <__assert_fail@plt+0xf92c>
   211bc:	ldr	r1, [sp, #52]	; 0x34
   211c0:	b	20dd0 <__assert_fail@plt+0xedc8>
   211c4:	ldr	r3, [sp, #48]	; 0x30
   211c8:	mov	r6, r3
   211cc:	str	r3, [sp, #32]
   211d0:	b	211b0 <__assert_fail@plt+0xf1a8>
   211d4:	ldr	r6, [sp, #48]	; 0x30
   211d8:	mov	r4, #13
   211dc:	mov	r3, #114	; 0x72
   211e0:	b	21044 <__assert_fail@plt+0xf03c>
   211e4:	ldr	r3, [sp, #44]	; 0x2c
   211e8:	add	r5, r3, sl
   211ec:	ldrb	r4, [r5]
   211f0:	cmp	r4, #126	; 0x7e
   211f4:	ldrls	pc, [pc, r4, lsl #2]
   211f8:	b	21594 <__assert_fail@plt+0xf58c>
   211fc:	andeq	r1, r2, r4, ror #10
   21200:	muleq	r2, r4, r5
   21204:	muleq	r2, r4, r5
   21208:	muleq	r2, r4, r5
   2120c:	muleq	r2, r4, r5
   21210:	muleq	r2, r4, r5
   21214:	muleq	r2, r4, r5
   21218:	andeq	r1, r2, ip, asr r5
   2121c:	andeq	r1, r2, r4, asr r5
   21220:	andeq	r1, r2, r8, asr #10
   21224:	andeq	r1, r2, r0, asr #10
   21228:	andeq	r1, r2, r8, lsr r5
   2122c:	andeq	r1, r2, r0, lsr r5
   21230:	andeq	r1, r2, r8, lsr #10
   21234:	muleq	r2, r4, r5
   21238:	muleq	r2, r4, r5
   2123c:	muleq	r2, r4, r5
   21240:	muleq	r2, r4, r5
   21244:	muleq	r2, r4, r5
   21248:	muleq	r2, r4, r5
   2124c:	muleq	r2, r4, r5
   21250:	muleq	r2, r4, r5
   21254:	muleq	r2, r4, r5
   21258:	muleq	r2, r4, r5
   2125c:	muleq	r2, r4, r5
   21260:	muleq	r2, r4, r5
   21264:	muleq	r2, r4, r5
   21268:	muleq	r2, r4, r5
   2126c:	muleq	r2, r4, r5
   21270:	muleq	r2, r4, r5
   21274:	muleq	r2, r4, r5
   21278:	muleq	r2, r4, r5
   2127c:	andeq	r1, r2, ip, lsl r5
   21280:	andeq	r1, r2, r4, lsl r5
   21284:	andeq	r1, r2, r4, lsl r5
   21288:	andeq	r1, r2, ip, lsl #10
   2128c:	andeq	r1, r2, r4, lsl r5
   21290:	andeq	r1, r2, r4, lsl #10
   21294:	andeq	r1, r2, r4, lsl r5
   21298:	andeq	r1, r2, r8, ror r4
   2129c:	andeq	r1, r2, r4, lsl r5
   212a0:	andeq	r1, r2, r4, lsl r5
   212a4:	andeq	r1, r2, r4, lsl r5
   212a8:	andeq	r1, r2, r4, lsl #10
   212ac:	andeq	r1, r2, r4, lsl #10
   212b0:	andeq	r1, r2, r4, lsl #10
   212b4:	andeq	r1, r2, r4, lsl #10
   212b8:	andeq	r1, r2, r4, lsl #10
   212bc:	andeq	r1, r2, r4, lsl #10
   212c0:	andeq	r1, r2, r4, lsl #10
   212c4:	andeq	r1, r2, r4, lsl #10
   212c8:	andeq	r1, r2, r4, lsl #10
   212cc:	andeq	r1, r2, r4, lsl #10
   212d0:	andeq	r1, r2, r4, lsl #10
   212d4:	andeq	r1, r2, r4, lsl #10
   212d8:	andeq	r1, r2, r4, lsl #10
   212dc:	andeq	r1, r2, r4, lsl #10
   212e0:	andeq	r1, r2, r4, lsl #10
   212e4:	andeq	r1, r2, r4, lsl #10
   212e8:	andeq	r1, r2, r4, lsl r5
   212ec:	andeq	r1, r2, r4, lsl r5
   212f0:	andeq	r1, r2, r4, lsl r5
   212f4:	andeq	r1, r2, r4, lsl r5
   212f8:	andeq	r1, r2, ip, asr #8
   212fc:	muleq	r2, r4, r5
   21300:	andeq	r1, r2, r4, lsl #10
   21304:	andeq	r1, r2, r4, lsl #10
   21308:	andeq	r1, r2, r4, lsl #10
   2130c:	andeq	r1, r2, r4, lsl #10
   21310:	andeq	r1, r2, r4, lsl #10
   21314:	andeq	r1, r2, r4, lsl #10
   21318:	andeq	r1, r2, r4, lsl #10
   2131c:	andeq	r1, r2, r4, lsl #10
   21320:	andeq	r1, r2, r4, lsl #10
   21324:	andeq	r1, r2, r4, lsl #10
   21328:	andeq	r1, r2, r4, lsl #10
   2132c:	andeq	r1, r2, r4, lsl #10
   21330:	andeq	r1, r2, r4, lsl #10
   21334:	andeq	r1, r2, r4, lsl #10
   21338:	andeq	r1, r2, r4, lsl #10
   2133c:	andeq	r1, r2, r4, lsl #10
   21340:	andeq	r1, r2, r4, lsl #10
   21344:	andeq	r1, r2, r4, lsl #10
   21348:	andeq	r1, r2, r4, lsl #10
   2134c:	andeq	r1, r2, r4, lsl #10
   21350:	andeq	r1, r2, r4, lsl #10
   21354:	andeq	r1, r2, r4, lsl #10
   21358:	andeq	r1, r2, r4, lsl #10
   2135c:	andeq	r1, r2, r4, lsl #10
   21360:	andeq	r1, r2, r4, lsl #10
   21364:	andeq	r1, r2, r4, lsl #10
   21368:	andeq	r1, r2, r4, lsl r5
   2136c:	andeq	r1, r2, ip, lsl r4
   21370:	andeq	r1, r2, r4, lsl #10
   21374:	andeq	r1, r2, r4, lsl r5
   21378:	andeq	r1, r2, r4, lsl #10
   2137c:	andeq	r1, r2, r4, lsl r5
   21380:	andeq	r1, r2, r4, lsl #10
   21384:	andeq	r1, r2, r4, lsl #10
   21388:	andeq	r1, r2, r4, lsl #10
   2138c:	andeq	r1, r2, r4, lsl #10
   21390:	andeq	r1, r2, r4, lsl #10
   21394:	andeq	r1, r2, r4, lsl #10
   21398:	andeq	r1, r2, r4, lsl #10
   2139c:	andeq	r1, r2, r4, lsl #10
   213a0:	andeq	r1, r2, r4, lsl #10
   213a4:	andeq	r1, r2, r4, lsl #10
   213a8:	andeq	r1, r2, r4, lsl #10
   213ac:	andeq	r1, r2, r4, lsl #10
   213b0:	andeq	r1, r2, r4, lsl #10
   213b4:	andeq	r1, r2, r4, lsl #10
   213b8:	andeq	r1, r2, r4, lsl #10
   213bc:	andeq	r1, r2, r4, lsl #10
   213c0:	andeq	r1, r2, r4, lsl #10
   213c4:	andeq	r1, r2, r4, lsl #10
   213c8:	andeq	r1, r2, r4, lsl #10
   213cc:	andeq	r1, r2, r4, lsl #10
   213d0:	andeq	r1, r2, r4, lsl #10
   213d4:	andeq	r1, r2, r4, lsl #10
   213d8:	andeq	r1, r2, r4, lsl #10
   213dc:	andeq	r1, r2, r4, lsl #10
   213e0:	andeq	r1, r2, r4, lsl #10
   213e4:	andeq	r1, r2, r4, lsl #10
   213e8:	strdeq	r1, [r2], -r8
   213ec:	andeq	r1, r2, r4, lsl r5
   213f0:	strdeq	r1, [r2], -r8
   213f4:	andeq	r1, r2, ip, lsl #10
   213f8:	ldr	r3, [sp, #24]
   213fc:	mov	r6, #0
   21400:	cmn	r3, #1
   21404:	bne	20db0 <__assert_fail@plt+0xeda8>
   21408:	ldr	r3, [sp, #44]	; 0x2c
   2140c:	ldrb	r3, [r3, #1]
   21410:	adds	r3, r3, #0
   21414:	movne	r3, #1
   21418:	b	20db8 <__assert_fail@plt+0xedb0>
   2141c:	ldr	r3, [sp, #176]	; 0xb0
   21420:	mov	r6, #0
   21424:	cmp	r3, #2
   21428:	bne	20ef8 <__assert_fail@plt+0xeef0>
   2142c:	ldr	r3, [sp, #64]	; 0x40
   21430:	cmp	r3, #0
   21434:	bne	21c6c <__assert_fail@plt+0xfc64>
   21438:	add	sl, sl, #1
   2143c:	ldr	r6, [sp, #36]	; 0x24
   21440:	str	r3, [sp, #32]
   21444:	mov	r4, #92	; 0x5c
   21448:	b	20e04 <__assert_fail@plt+0xedfc>
   2144c:	ldr	r3, [sp, #176]	; 0xb0
   21450:	mov	r6, #0
   21454:	cmp	r3, #2
   21458:	bne	20f2c <__assert_fail@plt+0xef24>
   2145c:	ldr	r3, [sp, #40]	; 0x28
   21460:	cmp	r3, #0
   21464:	bne	21748 <__assert_fail@plt+0xf740>
   21468:	mov	r1, r7
   2146c:	str	r3, [sp, #32]
   21470:	mov	r4, #63	; 0x3f
   21474:	b	20dd0 <__assert_fail@plt+0xedc8>
   21478:	ldr	r3, [sp, #176]	; 0xb0
   2147c:	mov	r6, #0
   21480:	cmp	r3, #2
   21484:	bne	20f7c <__assert_fail@plt+0xef74>
   21488:	ldr	r3, [sp, #64]	; 0x40
   2148c:	cmp	r3, #0
   21490:	bne	21c6c <__assert_fail@plt+0xfc64>
   21494:	ldr	r2, [sp, #84]	; 0x54
   21498:	adds	r3, fp, #0
   2149c:	movne	r3, #1
   214a0:	cmp	r2, #0
   214a4:	movne	r3, #0
   214a8:	cmp	r3, #0
   214ac:	strne	fp, [sp, #84]	; 0x54
   214b0:	movne	fp, #0
   214b4:	bne	214e4 <__assert_fail@plt+0xf4dc>
   214b8:	cmp	fp, r8
   214bc:	movhi	r3, #39	; 0x27
   214c0:	strbhi	r3, [r9, r8]
   214c4:	add	r3, r8, #1
   214c8:	cmp	fp, r3
   214cc:	movhi	r2, #92	; 0x5c
   214d0:	strbhi	r2, [r9, r3]
   214d4:	add	r3, r8, #2
   214d8:	cmp	fp, r3
   214dc:	movhi	r2, #39	; 0x27
   214e0:	strbhi	r2, [r9, r3]
   214e4:	ldr	r3, [sp, #64]	; 0x40
   214e8:	add	r8, r8, #3
   214ec:	mov	r1, r7
   214f0:	str	r7, [sp, #32]
   214f4:	str	r7, [sp, #76]	; 0x4c
   214f8:	str	r3, [sp, #36]	; 0x24
   214fc:	mov	r4, #39	; 0x27
   21500:	b	20dd0 <__assert_fail@plt+0xedc8>
   21504:	mov	r6, #0
   21508:	b	20f94 <__assert_fail@plt+0xef8c>
   2150c:	mov	r6, #0
   21510:	b	21188 <__assert_fail@plt+0xf180>
   21514:	mov	r6, #0
   21518:	b	211a8 <__assert_fail@plt+0xf1a0>
   2151c:	str	r7, [sp, #32]
   21520:	mov	r6, #0
   21524:	b	211b0 <__assert_fail@plt+0xf1a8>
   21528:	mov	r6, #0
   2152c:	b	211d8 <__assert_fail@plt+0xf1d0>
   21530:	mov	r6, #0
   21534:	b	20fa4 <__assert_fail@plt+0xef9c>
   21538:	mov	r6, #0
   2153c:	b	2106c <__assert_fail@plt+0xf064>
   21540:	mov	r6, #0
   21544:	b	2103c <__assert_fail@plt+0xf034>
   21548:	mov	r6, #0
   2154c:	mov	r3, #116	; 0x74
   21550:	b	21044 <__assert_fail@plt+0xf03c>
   21554:	mov	r6, #0
   21558:	b	21080 <__assert_fail@plt+0xf078>
   2155c:	mov	r6, #0
   21560:	b	21094 <__assert_fail@plt+0xf08c>
   21564:	ldr	r3, [sp, #56]	; 0x38
   21568:	mov	r6, #0
   2156c:	cmp	r3, #0
   21570:	bne	210b4 <__assert_fail@plt+0xf0ac>
   21574:	ldr	r3, [sp, #96]	; 0x60
   21578:	cmp	r3, #0
   2157c:	addne	sl, sl, #1
   21580:	bne	20928 <__assert_fail@plt+0xe920>
   21584:	ldr	r1, [sp, #52]	; 0x34
   21588:	str	r3, [sp, #32]
   2158c:	mov	r4, r3
   21590:	b	20dd0 <__assert_fail@plt+0xedc8>
   21594:	mov	r6, #0
   21598:	ldr	r3, [sp, #80]	; 0x50
   2159c:	cmp	r3, #1
   215a0:	bne	21790 <__assert_fail@plt+0xf788>
   215a4:	bl	11dec <__ctype_b_loc@plt>
   215a8:	ldr	r2, [sp, #80]	; 0x50
   215ac:	sxth	r3, r4
   215b0:	mov	r1, r2
   215b4:	lsl	r3, r3, #1
   215b8:	ldr	r2, [r0]
   215bc:	ldrh	r3, [r2, r3]
   215c0:	and	r3, r3, #16384	; 0x4000
   215c4:	cmp	r3, #0
   215c8:	movne	r3, #1
   215cc:	moveq	r3, #0
   215d0:	str	r3, [sp, #32]
   215d4:	moveq	r3, #1
   215d8:	movne	r3, #0
   215dc:	ldr	r2, [sp, #56]	; 0x38
   215e0:	and	r3, r3, r2
   215e4:	ands	r3, r3, #255	; 0xff
   215e8:	beq	211bc <__assert_fail@plt+0xf1b4>
   215ec:	add	r1, sl, r1
   215f0:	mov	r0, #0
   215f4:	ldr	r7, [sp, #40]	; 0x28
   215f8:	ldr	r2, [sp, #36]	; 0x24
   215fc:	ldr	lr, [sp, #52]	; 0x34
   21600:	b	216b0 <__assert_fail@plt+0xf6a8>
   21604:	cmp	r7, #0
   21608:	bne	21a04 <__assert_fail@plt+0xf9fc>
   2160c:	eor	r0, r2, #1
   21610:	ands	r0, lr, r0
   21614:	beq	2164c <__assert_fail@plt+0xf644>
   21618:	cmp	fp, r8
   2161c:	movhi	r2, #39	; 0x27
   21620:	strbhi	r2, [r9, r8]
   21624:	add	r2, r8, #1
   21628:	cmp	fp, r2
   2162c:	movhi	ip, #36	; 0x24
   21630:	strbhi	ip, [r9, r2]
   21634:	add	r2, r8, #2
   21638:	cmp	fp, r2
   2163c:	movhi	ip, #39	; 0x27
   21640:	strbhi	ip, [r9, r2]
   21644:	add	r8, r8, #3
   21648:	mov	r2, r0
   2164c:	cmp	fp, r8
   21650:	movhi	r0, #92	; 0x5c
   21654:	strbhi	r0, [r9, r8]
   21658:	add	r0, r8, #1
   2165c:	cmp	fp, r0
   21660:	lsrhi	ip, r4, #6
   21664:	addhi	ip, ip, #48	; 0x30
   21668:	strbhi	ip, [r9, r0]
   2166c:	add	ip, r8, #2
   21670:	cmp	fp, ip
   21674:	lsrhi	r0, r4, #3
   21678:	andhi	r0, r0, #7
   2167c:	addhi	r0, r0, #48	; 0x30
   21680:	add	sl, sl, #1
   21684:	strbhi	r0, [r9, ip]
   21688:	and	r4, r4, #7
   2168c:	cmp	sl, r1
   21690:	add	r4, r4, #48	; 0x30
   21694:	add	r8, r8, #3
   21698:	bcs	21a1c <__assert_fail@plt+0xfa14>
   2169c:	mov	r0, r3
   216a0:	cmp	fp, r8
   216a4:	strbhi	r4, [r9, r8]
   216a8:	ldrb	r4, [r5, #1]!
   216ac:	add	r8, r8, #1
   216b0:	cmp	r3, #0
   216b4:	bne	21604 <__assert_fail@plt+0xf5fc>
   216b8:	cmp	r6, #0
   216bc:	bne	21760 <__assert_fail@plt+0xf758>
   216c0:	eor	r6, r0, #1
   216c4:	and	r6, r6, r2
   216c8:	add	sl, sl, #1
   216cc:	cmp	r1, sl
   216d0:	uxtb	r6, r6
   216d4:	bls	21788 <__assert_fail@plt+0xf780>
   216d8:	cmp	r6, #0
   216dc:	beq	216a0 <__assert_fail@plt+0xf698>
   216e0:	cmp	fp, r8
   216e4:	movhi	r2, #39	; 0x27
   216e8:	strbhi	r2, [r9, r8]
   216ec:	add	r2, r8, #1
   216f0:	cmp	fp, r2
   216f4:	movhi	ip, #39	; 0x27
   216f8:	strbhi	ip, [r9, r2]
   216fc:	add	r8, r8, #2
   21700:	mov	r6, r3
   21704:	mov	r2, r3
   21708:	b	216a0 <__assert_fail@plt+0xf698>
   2170c:	ldr	r3, [sp, #184]	; 0xb8
   21710:	cmp	r3, #0
   21714:	beq	20dec <__assert_fail@plt+0xede4>
   21718:	lsr	r2, r4, #5
   2171c:	mov	r0, r3
   21720:	uxtb	r2, r2
   21724:	and	r3, r4, #31
   21728:	ldr	r2, [r0, r2, lsl #2]
   2172c:	lsr	r3, r2, r3
   21730:	tst	r3, #1
   21734:	beq	20dec <__assert_fail@plt+0xede4>
   21738:	ldr	r3, [sp, #40]	; 0x28
   2173c:	cmp	r3, #0
   21740:	beq	20fd8 <__assert_fail@plt+0xefd0>
   21744:	mov	r3, r1
   21748:	str	r3, [sp, #64]	; 0x40
   2174c:	mov	sl, r9
   21750:	ldr	r3, [sp, #56]	; 0x38
   21754:	mov	r9, fp
   21758:	ldr	r2, [sp, #64]	; 0x40
   2175c:	b	2194c <__assert_fail@plt+0xf944>
   21760:	cmp	fp, r8
   21764:	eor	r6, r0, #1
   21768:	movhi	ip, #92	; 0x5c
   2176c:	and	r6, r6, r2
   21770:	add	sl, sl, #1
   21774:	strbhi	ip, [r9, r8]
   21778:	cmp	r1, sl
   2177c:	add	r8, r8, #1
   21780:	uxtb	r6, r6
   21784:	bhi	216d8 <__assert_fail@plt+0xf6d0>
   21788:	str	r2, [sp, #36]	; 0x24
   2178c:	b	20e04 <__assert_fail@plt+0xedfc>
   21790:	ldr	r3, [sp, #24]
   21794:	cmn	r3, #1
   21798:	mov	r3, #0
   2179c:	str	r3, [sp, #128]	; 0x80
   217a0:	str	r3, [sp, #132]	; 0x84
   217a4:	beq	21a98 <__assert_fail@plt+0xfa90>
   217a8:	mov	r2, r7
   217ac:	mov	r3, #0
   217b0:	str	r7, [sp, #104]	; 0x68
   217b4:	str	r5, [sp, #116]	; 0x74
   217b8:	mov	r7, r3
   217bc:	mov	r5, r2
   217c0:	str	r4, [sp, #32]
   217c4:	str	r6, [sp, #108]	; 0x6c
   217c8:	str	r8, [sp, #112]	; 0x70
   217cc:	ldr	r3, [sp, #44]	; 0x2c
   217d0:	add	r6, sl, r7
   217d4:	add	r4, r3, r6
   217d8:	ldr	r3, [sp, #24]
   217dc:	mov	r1, r4
   217e0:	sub	r2, r3, r6
   217e4:	add	r0, sp, #124	; 0x7c
   217e8:	add	r3, sp, #128	; 0x80
   217ec:	bl	27e60 <__assert_fail@plt+0x15e58>
   217f0:	subs	r8, r0, #0
   217f4:	beq	21b7c <__assert_fail@plt+0xfb74>
   217f8:	cmn	r8, #1
   217fc:	beq	21b54 <__assert_fail@plt+0xfb4c>
   21800:	cmn	r8, #2
   21804:	beq	21aec <__assert_fail@plt+0xfae4>
   21808:	ldr	r3, [sp, #64]	; 0x40
   2180c:	cmp	r3, #0
   21810:	beq	218d0 <__assert_fail@plt+0xf8c8>
   21814:	cmp	r8, #1
   21818:	beq	218d0 <__assert_fail@plt+0xf8c8>
   2181c:	sub	r3, r8, #1
   21820:	add	r6, r3, r6
   21824:	ldr	r3, [sp, #44]	; 0x2c
   21828:	add	r6, r3, r6
   2182c:	ldrb	r3, [r4, #1]!
   21830:	sub	r3, r3, #91	; 0x5b
   21834:	cmp	r3, #33	; 0x21
   21838:	ldrls	pc, [pc, r3, lsl #2]
   2183c:	b	218c8 <__assert_fail@plt+0xf8c0>
   21840:	andeq	r1, r2, r4, lsr r9
   21844:	andeq	r1, r2, r4, lsr r9
   21848:	andeq	r1, r2, r8, asr #17
   2184c:	andeq	r1, r2, r4, lsr r9
   21850:	andeq	r1, r2, r8, asr #17
   21854:	andeq	r1, r2, r4, lsr r9
   21858:	andeq	r1, r2, r8, asr #17
   2185c:	andeq	r1, r2, r8, asr #17
   21860:	andeq	r1, r2, r8, asr #17
   21864:	andeq	r1, r2, r8, asr #17
   21868:	andeq	r1, r2, r8, asr #17
   2186c:	andeq	r1, r2, r8, asr #17
   21870:	andeq	r1, r2, r8, asr #17
   21874:	andeq	r1, r2, r8, asr #17
   21878:	andeq	r1, r2, r8, asr #17
   2187c:	andeq	r1, r2, r8, asr #17
   21880:	andeq	r1, r2, r8, asr #17
   21884:	andeq	r1, r2, r8, asr #17
   21888:	andeq	r1, r2, r8, asr #17
   2188c:	andeq	r1, r2, r8, asr #17
   21890:	andeq	r1, r2, r8, asr #17
   21894:	andeq	r1, r2, r8, asr #17
   21898:	andeq	r1, r2, r8, asr #17
   2189c:	andeq	r1, r2, r8, asr #17
   218a0:	andeq	r1, r2, r8, asr #17
   218a4:	andeq	r1, r2, r8, asr #17
   218a8:	andeq	r1, r2, r8, asr #17
   218ac:	andeq	r1, r2, r8, asr #17
   218b0:	andeq	r1, r2, r8, asr #17
   218b4:	andeq	r1, r2, r8, asr #17
   218b8:	andeq	r1, r2, r8, asr #17
   218bc:	andeq	r1, r2, r8, asr #17
   218c0:	andeq	r1, r2, r8, asr #17
   218c4:	andeq	r1, r2, r4, lsr r9
   218c8:	cmp	r6, r4
   218cc:	bne	2182c <__assert_fail@plt+0xf824>
   218d0:	ldr	r0, [sp, #124]	; 0x7c
   218d4:	bl	11c9c <iswprint@plt>
   218d8:	add	r7, r7, r8
   218dc:	cmp	r0, #0
   218e0:	add	r0, sp, #128	; 0x80
   218e4:	moveq	r5, #0
   218e8:	bl	11bac <mbsinit@plt>
   218ec:	cmp	r0, #0
   218f0:	beq	217cc <__assert_fail@plt+0xf7c4>
   218f4:	ldr	r4, [sp, #32]
   218f8:	str	r5, [sp, #32]
   218fc:	ldr	r3, [sp, #32]
   21900:	mov	r1, r7
   21904:	eor	r3, r3, #1
   21908:	ldr	r7, [sp, #104]	; 0x68
   2190c:	ldr	r6, [sp, #108]	; 0x6c
   21910:	ldr	r8, [sp, #112]	; 0x70
   21914:	ldr	r5, [sp, #116]	; 0x74
   21918:	uxtb	r3, r3
   2191c:	cmp	r1, #1
   21920:	bls	215dc <__assert_fail@plt+0xf5d4>
   21924:	ldr	r2, [sp, #56]	; 0x38
   21928:	and	r3, r3, r2
   2192c:	uxtb	r3, r3
   21930:	b	215ec <__assert_fail@plt+0xf5e4>
   21934:	mov	r3, #2
   21938:	str	r3, [sp, #176]	; 0xb0
   2193c:	ldr	r2, [sp, #64]	; 0x40
   21940:	ldr	r3, [sp, #56]	; 0x38
   21944:	mov	sl, r9
   21948:	mov	r9, fp
   2194c:	and	r3, r3, r2
   21950:	tst	r3, #255	; 0xff
   21954:	ldr	r3, [sp, #176]	; 0xb0
   21958:	movne	r3, #4
   2195c:	str	r3, [sp, #176]	; 0xb0
   21960:	ldr	r3, [sp, #180]	; 0xb4
   21964:	mov	ip, #0
   21968:	bic	r3, r3, #2
   2196c:	str	r3, [sp, #4]
   21970:	ldr	r3, [sp, #192]	; 0xc0
   21974:	ldr	r2, [sp, #44]	; 0x2c
   21978:	str	r3, [sp, #16]
   2197c:	ldr	r3, [sp, #188]	; 0xbc
   21980:	mov	r1, r9
   21984:	str	r3, [sp, #12]
   21988:	ldr	r3, [sp, #176]	; 0xb0
   2198c:	mov	r0, sl
   21990:	str	r3, [sp]
   21994:	str	ip, [sp, #8]
   21998:	ldr	r3, [sp, #24]
   2199c:	bl	207fc <__assert_fail@plt+0xe7f4>
   219a0:	mov	fp, r0
   219a4:	mov	r0, fp
   219a8:	add	sp, sp, #140	; 0x8c
   219ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   219b0:	mov	r4, #92	; 0x5c
   219b4:	mov	r1, #0
   219b8:	mov	r3, r4
   219bc:	b	20fb0 <__assert_fail@plt+0xefa8>
   219c0:	mov	r3, #0
   219c4:	ldr	r1, [sp, #52]	; 0x34
   219c8:	str	r3, [sp, #32]
   219cc:	mov	r4, #63	; 0x3f
   219d0:	b	20dd0 <__assert_fail@plt+0xedc8>
   219d4:	cmp	fp, #0
   219d8:	beq	21a34 <__assert_fail@plt+0xfa2c>
   219dc:	mov	r3, #39	; 0x27
   219e0:	strb	r3, [r9]
   219e4:	mov	r3, #0
   219e8:	str	r3, [sp, #40]	; 0x28
   219ec:	mov	r3, #1
   219f0:	str	r3, [sp, #68]	; 0x44
   219f4:	ldr	r3, [pc, #448]	; 21bbc <__assert_fail@plt+0xfbb4>
   219f8:	mov	r8, #1
   219fc:	str	r3, [sp, #72]	; 0x48
   21a00:	b	20be4 <__assert_fail@plt+0xebdc>
   21a04:	ldr	r3, [sp, #40]	; 0x28
   21a08:	mov	sl, r9
   21a0c:	str	r3, [sp, #56]	; 0x38
   21a10:	mov	r9, fp
   21a14:	ldr	r2, [sp, #64]	; 0x40
   21a18:	b	2194c <__assert_fail@plt+0xf944>
   21a1c:	str	r2, [sp, #36]	; 0x24
   21a20:	b	20e34 <__assert_fail@plt+0xee2c>
   21a24:	mov	r1, #0
   21a28:	str	r3, [sp, #32]
   21a2c:	mov	r4, #63	; 0x3f
   21a30:	b	20dd0 <__assert_fail@plt+0xedc8>
   21a34:	ldr	r3, [pc, #384]	; 21bbc <__assert_fail@plt+0xfbb4>
   21a38:	str	r3, [sp, #72]	; 0x48
   21a3c:	mov	r3, #0
   21a40:	str	r3, [sp, #40]	; 0x28
   21a44:	mov	r3, #1
   21a48:	str	r3, [sp, #68]	; 0x44
   21a4c:	mov	r8, r3
   21a50:	b	20be4 <__assert_fail@plt+0xebdc>
   21a54:	bl	11fe4 <abort@plt>
   21a58:	cmp	fp, #0
   21a5c:	beq	21abc <__assert_fail@plt+0xfab4>
   21a60:	mov	r2, #1
   21a64:	mov	r3, #34	; 0x22
   21a68:	strb	r3, [r9]
   21a6c:	mov	r8, r2
   21a70:	mov	r3, r2
   21a74:	str	r2, [sp, #68]	; 0x44
   21a78:	str	r3, [sp, #56]	; 0x38
   21a7c:	ldr	r3, [pc, #316]	; 21bc0 <__assert_fail@plt+0xfbb8>
   21a80:	ldr	r1, [sp, #56]	; 0x38
   21a84:	str	r3, [sp, #72]	; 0x48
   21a88:	ldr	r2, [sp, #176]	; 0xb0
   21a8c:	ldr	ip, [sp, #40]	; 0x28
   21a90:	ldr	lr, [sp, #176]	; 0xb0
   21a94:	b	208c8 <__assert_fail@plt+0xe8c0>
   21a98:	ldr	r0, [sp, #44]	; 0x2c
   21a9c:	bl	11e10 <strlen@plt>
   21aa0:	str	r0, [sp, #24]
   21aa4:	b	217a8 <__assert_fail@plt+0xf7a0>
   21aa8:	mov	r7, #0
   21aac:	ldr	r1, [sp, #52]	; 0x34
   21ab0:	str	r3, [sp, #32]
   21ab4:	mov	r4, #48	; 0x30
   21ab8:	b	20dd0 <__assert_fail@plt+0xedc8>
   21abc:	mov	r3, #1
   21ac0:	str	r3, [sp, #68]	; 0x44
   21ac4:	mov	r8, r3
   21ac8:	b	21a78 <__assert_fail@plt+0xfa70>
   21acc:	mov	r3, #2
   21ad0:	mov	sl, r9
   21ad4:	str	r3, [sp, #176]	; 0xb0
   21ad8:	mov	r9, fp
   21adc:	ldr	r3, [sp, #56]	; 0x38
   21ae0:	b	2194c <__assert_fail@plt+0xf944>
   21ae4:	ldr	r6, [sp, #48]	; 0x30
   21ae8:	b	21598 <__assert_fail@plt+0xf590>
   21aec:	ldr	r0, [sp, #24]
   21af0:	mov	ip, r6
   21af4:	cmp	r0, ip
   21af8:	mov	r1, r7
   21afc:	mov	r2, r4
   21b00:	ldr	r7, [sp, #104]	; 0x68
   21b04:	ldr	r4, [sp, #32]
   21b08:	ldr	r6, [sp, #108]	; 0x6c
   21b0c:	ldr	r8, [sp, #112]	; 0x70
   21b10:	ldr	r5, [sp, #116]	; 0x74
   21b14:	bls	21b44 <__assert_fail@plt+0xfb3c>
   21b18:	ldrb	r3, [r2]
   21b1c:	cmp	r3, #0
   21b20:	bne	21b34 <__assert_fail@plt+0xfb2c>
   21b24:	b	21c54 <__assert_fail@plt+0xfc4c>
   21b28:	ldrb	r3, [r2, #1]!
   21b2c:	cmp	r3, #0
   21b30:	beq	21c54 <__assert_fail@plt+0xfc4c>
   21b34:	add	r1, r1, #1
   21b38:	add	r3, sl, r1
   21b3c:	cmp	r0, r3
   21b40:	bhi	21b28 <__assert_fail@plt+0xfb20>
   21b44:	mov	r2, #0
   21b48:	mov	r3, r7
   21b4c:	str	r2, [sp, #32]
   21b50:	b	2191c <__assert_fail@plt+0xf914>
   21b54:	mov	r1, r7
   21b58:	ldr	r7, [sp, #104]	; 0x68
   21b5c:	mov	r2, #0
   21b60:	ldr	r4, [sp, #32]
   21b64:	ldr	r6, [sp, #108]	; 0x6c
   21b68:	ldr	r8, [sp, #112]	; 0x70
   21b6c:	ldr	r5, [sp, #116]	; 0x74
   21b70:	mov	r3, r7
   21b74:	str	r2, [sp, #32]
   21b78:	b	2191c <__assert_fail@plt+0xf914>
   21b7c:	mov	r3, r5
   21b80:	eor	r3, r3, #1
   21b84:	ldr	r4, [sp, #32]
   21b88:	mov	r1, r7
   21b8c:	str	r5, [sp, #32]
   21b90:	ldr	r7, [sp, #104]	; 0x68
   21b94:	ldr	r6, [sp, #108]	; 0x6c
   21b98:	ldr	r8, [sp, #112]	; 0x70
   21b9c:	ldr	r5, [sp, #116]	; 0x74
   21ba0:	uxtb	r3, r3
   21ba4:	b	2191c <__assert_fail@plt+0xf914>
   21ba8:	mov	sl, r9
   21bac:	str	r3, [sp, #56]	; 0x38
   21bb0:	mov	r9, fp
   21bb4:	ldr	r2, [sp, #64]	; 0x40
   21bb8:	b	2194c <__assert_fail@plt+0xf944>
   21bbc:	strdeq	fp, [r2], -ip
   21bc0:	strdeq	fp, [r2], -r8
   21bc4:	andeq	fp, r2, r0, lsl #4
   21bc8:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   21bcc:	ldr	r2, [sp, #44]	; 0x2c
   21bd0:	ldrb	r1, [r2, r3]
   21bd4:	sub	r2, r1, #33	; 0x21
   21bd8:	uxtb	r2, r2
   21bdc:	cmp	r2, #29
   21be0:	bhi	21c60 <__assert_fail@plt+0xfc58>
   21be4:	ldr	r0, [pc, #-36]	; 21bc8 <__assert_fail@plt+0xfbc0>
   21be8:	mov	ip, #1
   21bec:	ands	r2, r0, ip, lsl r2
   21bf0:	beq	21c80 <__assert_fail@plt+0xfc78>
   21bf4:	ldr	r2, [sp, #40]	; 0x28
   21bf8:	cmp	r2, #0
   21bfc:	bne	21d74 <__assert_fail@plt+0xfd6c>
   21c00:	add	r2, r8, #1
   21c04:	cmp	fp, r8
   21c08:	strbhi	r4, [r9, r8]
   21c0c:	cmp	fp, r2
   21c10:	movhi	r0, #34	; 0x22
   21c14:	strbhi	r0, [r9, r2]
   21c18:	add	r2, r8, #2
   21c1c:	cmp	fp, r2
   21c20:	movhi	r0, #34	; 0x22
   21c24:	strbhi	r0, [r9, r2]
   21c28:	add	r2, r8, #3
   21c2c:	cmp	fp, r2
   21c30:	mov	sl, r3
   21c34:	ldr	r3, [sp, #40]	; 0x28
   21c38:	movhi	r0, #63	; 0x3f
   21c3c:	mov	r4, r1
   21c40:	strbhi	r0, [r9, r2]
   21c44:	add	r8, r8, #4
   21c48:	mov	r1, r3
   21c4c:	str	r3, [sp, #32]
   21c50:	b	20dd0 <__assert_fail@plt+0xedc8>
   21c54:	str	r3, [sp, #32]
   21c58:	mov	r3, r7
   21c5c:	b	2191c <__assert_fail@plt+0xf914>
   21c60:	mov	r1, #0
   21c64:	str	r1, [sp, #32]
   21c68:	b	20dd0 <__assert_fail@plt+0xedc8>
   21c6c:	mov	sl, r9
   21c70:	ldr	r3, [sp, #56]	; 0x38
   21c74:	mov	r9, fp
   21c78:	ldr	r2, [sp, #64]	; 0x40
   21c7c:	b	2194c <__assert_fail@plt+0xf944>
   21c80:	str	r2, [sp, #32]
   21c84:	mov	r1, #0
   21c88:	b	20dd0 <__assert_fail@plt+0xedc8>
   21c8c:	ldr	r2, [sp, #76]	; 0x4c
   21c90:	mov	sl, r9
   21c94:	mov	r9, fp
   21c98:	mov	fp, r8
   21c9c:	ldr	r1, [sp, #72]	; 0x48
   21ca0:	cmp	r1, #0
   21ca4:	moveq	r3, #0
   21ca8:	andne	r3, r2, #1
   21cac:	cmp	r3, #0
   21cb0:	beq	21cdc <__assert_fail@plt+0xfcd4>
   21cb4:	ldrb	r3, [r1]
   21cb8:	cmp	r3, #0
   21cbc:	beq	21cdc <__assert_fail@plt+0xfcd4>
   21cc0:	mov	r2, r1
   21cc4:	cmp	r9, fp
   21cc8:	strbhi	r3, [sl, fp]
   21ccc:	ldrb	r3, [r2, #1]!
   21cd0:	add	fp, fp, #1
   21cd4:	cmp	r3, #0
   21cd8:	bne	21cc4 <__assert_fail@plt+0xfcbc>
   21cdc:	cmp	r9, fp
   21ce0:	movhi	r3, #0
   21ce4:	strbhi	r3, [sl, fp]
   21ce8:	b	219a4 <__assert_fail@plt+0xf99c>
   21cec:	ldr	r3, [sp, #192]	; 0xc0
   21cf0:	mov	ip, #5
   21cf4:	str	r3, [sp, #16]
   21cf8:	ldr	r3, [sp, #188]	; 0xbc
   21cfc:	ldr	r2, [sp, #44]	; 0x2c
   21d00:	str	r3, [sp, #12]
   21d04:	ldr	r3, [sp, #184]	; 0xb8
   21d08:	ldr	r1, [sp, #84]	; 0x54
   21d0c:	str	r3, [sp, #8]
   21d10:	ldr	r3, [sp, #180]	; 0xb4
   21d14:	mov	r0, r9
   21d18:	str	r3, [sp, #4]
   21d1c:	str	ip, [sp]
   21d20:	ldr	r3, [sp, #24]
   21d24:	bl	207fc <__assert_fail@plt+0xe7f4>
   21d28:	mov	fp, r0
   21d2c:	b	219a4 <__assert_fail@plt+0xf99c>
   21d30:	mov	sl, r9
   21d34:	mov	r9, fp
   21d38:	mov	fp, r8
   21d3c:	b	21c9c <__assert_fail@plt+0xfc94>
   21d40:	ldr	r1, [sp, #176]	; 0xb0
   21d44:	bl	206dc <__assert_fail@plt+0xe6d4>
   21d48:	str	r0, [sp, #192]	; 0xc0
   21d4c:	b	20cb8 <__assert_fail@plt+0xecb0>
   21d50:	ldr	r1, [sp, #176]	; 0xb0
   21d54:	bl	206dc <__assert_fail@plt+0xe6d4>
   21d58:	str	r0, [sp, #188]	; 0xbc
   21d5c:	b	20c98 <__assert_fail@plt+0xec90>
   21d60:	mov	sl, r9
   21d64:	mov	r2, r3
   21d68:	mov	r9, fp
   21d6c:	mov	fp, r8
   21d70:	b	21c9c <__assert_fail@plt+0xfc94>
   21d74:	mov	sl, r9
   21d78:	mov	r9, fp
   21d7c:	b	21960 <__assert_fail@plt+0xf958>
   21d80:	push	{r4, r5, r6, lr}
   21d84:	mov	r5, r0
   21d88:	bl	11e34 <__errno_location@plt>
   21d8c:	cmp	r5, #0
   21d90:	mov	r1, #48	; 0x30
   21d94:	mov	r4, r0
   21d98:	ldr	r0, [pc, #16]	; 21db0 <__assert_fail@plt+0xfda8>
   21d9c:	ldr	r6, [r4]
   21da0:	movne	r0, r5
   21da4:	bl	26744 <__assert_fail@plt+0x1473c>
   21da8:	str	r6, [r4]
   21dac:	pop	{r4, r5, r6, pc}
   21db0:	ldrdeq	ip, [r3], -r4
   21db4:	ldr	r3, [pc, #12]	; 21dc8 <__assert_fail@plt+0xfdc0>
   21db8:	cmp	r0, #0
   21dbc:	moveq	r0, r3
   21dc0:	ldr	r0, [r0]
   21dc4:	bx	lr
   21dc8:	ldrdeq	ip, [r3], -r4
   21dcc:	ldr	r3, [pc, #12]	; 21de0 <__assert_fail@plt+0xfdd8>
   21dd0:	cmp	r0, #0
   21dd4:	moveq	r0, r3
   21dd8:	str	r1, [r0]
   21ddc:	bx	lr
   21de0:	ldrdeq	ip, [r3], -r4
   21de4:	ldr	r3, [pc, #52]	; 21e20 <__assert_fail@plt+0xfe18>
   21de8:	cmp	r0, #0
   21dec:	moveq	r0, r3
   21df0:	add	r3, r0, #8
   21df4:	push	{lr}		; (str lr, [sp, #-4]!)
   21df8:	lsr	lr, r1, #5
   21dfc:	and	r1, r1, #31
   21e00:	ldr	ip, [r3, lr, lsl #2]
   21e04:	lsr	r0, ip, r1
   21e08:	eor	r2, r2, r0
   21e0c:	and	r2, r2, #1
   21e10:	and	r0, r0, #1
   21e14:	eor	r1, ip, r2, lsl r1
   21e18:	str	r1, [r3, lr, lsl #2]
   21e1c:	pop	{pc}		; (ldr pc, [sp], #4)
   21e20:	ldrdeq	ip, [r3], -r4
   21e24:	ldr	r3, [pc, #16]	; 21e3c <__assert_fail@plt+0xfe34>
   21e28:	cmp	r0, #0
   21e2c:	movne	r3, r0
   21e30:	ldr	r0, [r3, #4]
   21e34:	str	r1, [r3, #4]
   21e38:	bx	lr
   21e3c:	ldrdeq	ip, [r3], -r4
   21e40:	ldr	r3, [pc, #44]	; 21e74 <__assert_fail@plt+0xfe6c>
   21e44:	cmp	r0, #0
   21e48:	moveq	r0, r3
   21e4c:	mov	ip, #10
   21e50:	cmp	r2, #0
   21e54:	cmpne	r1, #0
   21e58:	str	ip, [r0]
   21e5c:	beq	21e6c <__assert_fail@plt+0xfe64>
   21e60:	str	r1, [r0, #40]	; 0x28
   21e64:	str	r2, [r0, #44]	; 0x2c
   21e68:	bx	lr
   21e6c:	push	{r4, lr}
   21e70:	bl	11fe4 <abort@plt>
   21e74:	ldrdeq	ip, [r3], -r4
   21e78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21e7c:	sub	sp, sp, #24
   21e80:	ldr	ip, [pc, #108]	; 21ef4 <__assert_fail@plt+0xfeec>
   21e84:	ldr	r4, [sp, #56]	; 0x38
   21e88:	mov	r9, r2
   21e8c:	cmp	r4, #0
   21e90:	moveq	r4, ip
   21e94:	mov	sl, r3
   21e98:	mov	r7, r0
   21e9c:	mov	r8, r1
   21ea0:	bl	11e34 <__errno_location@plt>
   21ea4:	ldr	r3, [r4, #44]	; 0x2c
   21ea8:	mov	r1, r8
   21eac:	ldr	r6, [r0]
   21eb0:	str	r3, [sp, #16]
   21eb4:	ldr	r2, [r4, #40]	; 0x28
   21eb8:	add	r3, r4, #8
   21ebc:	str	r3, [sp, #8]
   21ec0:	str	r2, [sp, #12]
   21ec4:	ldr	r2, [r4, #4]
   21ec8:	mov	r5, r0
   21ecc:	str	r2, [sp, #4]
   21ed0:	ldr	ip, [r4]
   21ed4:	mov	r3, sl
   21ed8:	mov	r2, r9
   21edc:	mov	r0, r7
   21ee0:	str	ip, [sp]
   21ee4:	bl	207fc <__assert_fail@plt+0xe7f4>
   21ee8:	str	r6, [r5]
   21eec:	add	sp, sp, #24
   21ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21ef4:	ldrdeq	ip, [r3], -r4
   21ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21efc:	cmp	r2, #0
   21f00:	sub	sp, sp, #36	; 0x24
   21f04:	ldr	r4, [pc, #164]	; 21fb0 <__assert_fail@plt+0xffa8>
   21f08:	mov	r8, r1
   21f0c:	movne	r4, r2
   21f10:	mov	r7, r0
   21f14:	bl	11e34 <__errno_location@plt>
   21f18:	ldr	r3, [r4, #44]	; 0x2c
   21f1c:	ldr	r5, [r4, #4]
   21f20:	add	r9, r4, #8
   21f24:	orr	r5, r5, #1
   21f28:	mov	r1, #0
   21f2c:	mov	r2, r7
   21f30:	ldr	fp, [r0]
   21f34:	str	r3, [sp, #16]
   21f38:	ldr	r3, [r4, #40]	; 0x28
   21f3c:	stmib	sp, {r5, r9}
   21f40:	str	r3, [sp, #12]
   21f44:	ldr	r3, [r4]
   21f48:	mov	r6, r0
   21f4c:	str	r3, [sp]
   21f50:	mov	r0, r1
   21f54:	mov	r3, r8
   21f58:	bl	207fc <__assert_fail@plt+0xe7f4>
   21f5c:	add	r1, r0, #1
   21f60:	mov	r0, r1
   21f64:	str	r1, [sp, #28]
   21f68:	bl	26200 <__assert_fail@plt+0x141f8>
   21f6c:	ldr	r3, [r4, #44]	; 0x2c
   21f70:	ldr	r1, [sp, #28]
   21f74:	str	r3, [sp, #16]
   21f78:	ldr	r3, [r4, #40]	; 0x28
   21f7c:	str	r5, [sp, #4]
   21f80:	str	r3, [sp, #12]
   21f84:	str	r9, [sp, #8]
   21f88:	ldr	ip, [r4]
   21f8c:	mov	r3, r8
   21f90:	mov	r2, r7
   21f94:	str	ip, [sp]
   21f98:	mov	sl, r0
   21f9c:	bl	207fc <__assert_fail@plt+0xe7f4>
   21fa0:	mov	r0, sl
   21fa4:	str	fp, [r6]
   21fa8:	add	sp, sp, #36	; 0x24
   21fac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21fb0:	ldrdeq	ip, [r3], -r4
   21fb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21fb8:	cmp	r3, #0
   21fbc:	sub	sp, sp, #44	; 0x2c
   21fc0:	ldr	r4, [pc, #192]	; 22088 <__assert_fail@plt+0x10080>
   21fc4:	mov	r6, r2
   21fc8:	movne	r4, r3
   21fcc:	mov	r9, r1
   21fd0:	mov	r8, r0
   21fd4:	bl	11e34 <__errno_location@plt>
   21fd8:	ldr	r3, [r4, #44]	; 0x2c
   21fdc:	ldr	r5, [r4, #4]
   21fe0:	add	sl, r4, #8
   21fe4:	cmp	r6, #0
   21fe8:	orreq	r5, r5, #1
   21fec:	mov	r1, #0
   21ff0:	ldr	r2, [r0]
   21ff4:	str	r3, [sp, #16]
   21ff8:	ldr	r3, [r4, #40]	; 0x28
   21ffc:	stmib	sp, {r5, sl}
   22000:	str	r3, [sp, #12]
   22004:	ldr	r3, [r4]
   22008:	mov	r7, r0
   2200c:	str	r2, [sp, #28]
   22010:	str	r3, [sp]
   22014:	mov	r2, r8
   22018:	mov	r3, r9
   2201c:	mov	r0, r1
   22020:	bl	207fc <__assert_fail@plt+0xe7f4>
   22024:	add	r1, r0, #1
   22028:	mov	fp, r0
   2202c:	mov	r0, r1
   22030:	str	r1, [sp, #36]	; 0x24
   22034:	bl	26200 <__assert_fail@plt+0x141f8>
   22038:	ldr	r3, [r4, #44]	; 0x2c
   2203c:	mov	r2, r8
   22040:	str	r3, [sp, #16]
   22044:	ldr	r3, [r4, #40]	; 0x28
   22048:	str	r5, [sp, #4]
   2204c:	str	r3, [sp, #12]
   22050:	str	sl, [sp, #8]
   22054:	ldr	ip, [r4]
   22058:	ldr	r1, [sp, #36]	; 0x24
   2205c:	mov	r3, r9
   22060:	str	ip, [sp]
   22064:	str	r0, [sp, #32]
   22068:	bl	207fc <__assert_fail@plt+0xe7f4>
   2206c:	ldr	r2, [sp, #28]
   22070:	cmp	r6, #0
   22074:	str	r2, [r7]
   22078:	ldr	r0, [sp, #32]
   2207c:	strne	fp, [r6]
   22080:	add	sp, sp, #44	; 0x2c
   22084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22088:	ldrdeq	ip, [r3], -r4
   2208c:	push	{r4, r5, r6, r7, r8, lr}
   22090:	ldr	r6, [pc, #116]	; 2210c <__assert_fail@plt+0x10104>
   22094:	ldr	r3, [r6, #4]
   22098:	ldr	r7, [r6]
   2209c:	cmp	r3, #1
   220a0:	movgt	r5, r7
   220a4:	movgt	r4, #1
   220a8:	ble	220c8 <__assert_fail@plt+0x100c0>
   220ac:	ldr	r0, [r5, #12]
   220b0:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   220b4:	ldr	r3, [r6, #4]
   220b8:	add	r4, r4, #1
   220bc:	cmp	r3, r4
   220c0:	add	r5, r5, #8
   220c4:	bgt	220ac <__assert_fail@plt+0x100a4>
   220c8:	ldr	r0, [r7, #4]
   220cc:	ldr	r4, [pc, #60]	; 22110 <__assert_fail@plt+0x10108>
   220d0:	cmp	r0, r4
   220d4:	beq	220e8 <__assert_fail@plt+0x100e0>
   220d8:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   220dc:	mov	r3, #256	; 0x100
   220e0:	str	r4, [r6, #12]
   220e4:	str	r3, [r6, #8]
   220e8:	ldr	r4, [pc, #36]	; 22114 <__assert_fail@plt+0x1010c>
   220ec:	cmp	r7, r4
   220f0:	beq	22100 <__assert_fail@plt+0x100f8>
   220f4:	mov	r0, r7
   220f8:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   220fc:	str	r4, [r6]
   22100:	mov	r3, #1
   22104:	str	r3, [r6, #4]
   22108:	pop	{r4, r5, r6, r7, r8, pc}
   2210c:	andeq	ip, r3, r8, ror r2
   22110:	andeq	ip, r3, r4, lsl #18
   22114:	andeq	ip, r3, r0, lsl #5
   22118:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2211c:	sub	sp, sp, #44	; 0x2c
   22120:	mov	r5, r0
   22124:	mov	sl, r1
   22128:	bl	11e34 <__errno_location@plt>
   2212c:	ldr	r4, [pc, #400]	; 222c4 <__assert_fail@plt+0x102bc>
   22130:	cmn	r5, #-2147483647	; 0x80000001
   22134:	ldr	r6, [r4]
   22138:	mov	r8, r0
   2213c:	movne	r0, #0
   22140:	moveq	r0, #1
   22144:	ldr	r3, [r8]
   22148:	orrs	r0, r0, r5, lsr #31
   2214c:	str	r3, [sp, #24]
   22150:	bne	222c0 <__assert_fail@plt+0x102b8>
   22154:	ldr	r2, [r4, #4]
   22158:	cmp	r5, r2
   2215c:	blt	221bc <__assert_fail@plt+0x101b4>
   22160:	add	r7, r4, #8
   22164:	cmp	r6, r7
   22168:	str	r2, [sp, #36]	; 0x24
   2216c:	beq	22290 <__assert_fail@plt+0x10288>
   22170:	mov	r3, #8
   22174:	sub	r2, r5, r2
   22178:	mov	r0, r6
   2217c:	str	r3, [sp]
   22180:	add	r2, r2, #1
   22184:	mvn	r3, #-2147483648	; 0x80000000
   22188:	add	r1, sp, #36	; 0x24
   2218c:	bl	2641c <__assert_fail@plt+0x14414>
   22190:	mov	r6, r0
   22194:	str	r0, [r4]
   22198:	ldr	r0, [r4, #4]
   2219c:	ldr	r2, [sp, #36]	; 0x24
   221a0:	mov	r1, #0
   221a4:	sub	r2, r2, r0
   221a8:	add	r0, r6, r0, lsl #3
   221ac:	lsl	r2, r2, #3
   221b0:	bl	11e58 <memset@plt>
   221b4:	ldr	r3, [sp, #36]	; 0x24
   221b8:	str	r3, [r4, #4]
   221bc:	ldr	r4, [pc, #260]	; 222c8 <__assert_fail@plt+0x102c0>
   221c0:	add	fp, r6, r5, lsl #3
   221c4:	ldr	r9, [r6, r5, lsl #3]
   221c8:	ldr	r0, [r4, #4]
   221cc:	ldr	r3, [r4]
   221d0:	ldr	r7, [fp, #4]
   221d4:	ldr	r1, [r4, #44]	; 0x2c
   221d8:	ldr	r2, [r4, #40]	; 0x28
   221dc:	orr	r0, r0, #1
   221e0:	str	r3, [sp]
   221e4:	add	r3, r4, #8
   221e8:	str	r0, [sp, #28]
   221ec:	str	r0, [sp, #4]
   221f0:	str	r1, [sp, #16]
   221f4:	str	r2, [sp, #12]
   221f8:	str	r3, [sp, #8]
   221fc:	mov	r0, r7
   22200:	mov	r1, r9
   22204:	mvn	r3, #0
   22208:	mov	r2, sl
   2220c:	bl	207fc <__assert_fail@plt+0xe7f4>
   22210:	cmp	r9, r0
   22214:	bhi	2227c <__assert_fail@plt+0x10274>
   22218:	add	r3, r4, #48	; 0x30
   2221c:	add	r9, r0, #1
   22220:	cmp	r7, r3
   22224:	str	r9, [r6, r5, lsl #3]
   22228:	beq	22234 <__assert_fail@plt+0x1022c>
   2222c:	mov	r0, r7
   22230:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   22234:	mov	r0, r9
   22238:	bl	26200 <__assert_fail@plt+0x141f8>
   2223c:	ldr	ip, [r4, #44]	; 0x2c
   22240:	ldr	r3, [r4]
   22244:	ldr	lr, [r4, #40]	; 0x28
   22248:	ldr	r4, [pc, #124]	; 222cc <__assert_fail@plt+0x102c4>
   2224c:	mov	r2, sl
   22250:	mov	r1, r9
   22254:	str	r0, [fp, #4]
   22258:	str	r4, [sp, #8]
   2225c:	ldr	r4, [sp, #28]
   22260:	str	r3, [sp]
   22264:	str	r4, [sp, #4]
   22268:	str	ip, [sp, #16]
   2226c:	str	lr, [sp, #12]
   22270:	mvn	r3, #0
   22274:	mov	r7, r0
   22278:	bl	207fc <__assert_fail@plt+0xe7f4>
   2227c:	ldr	r3, [sp, #24]
   22280:	mov	r0, r7
   22284:	str	r3, [r8]
   22288:	add	sp, sp, #44	; 0x2c
   2228c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22290:	mov	r3, #8
   22294:	sub	r2, r5, r2
   22298:	str	r3, [sp]
   2229c:	add	r1, sp, #36	; 0x24
   222a0:	add	r2, r2, #1
   222a4:	mvn	r3, #-2147483648	; 0x80000000
   222a8:	bl	2641c <__assert_fail@plt+0x14414>
   222ac:	mov	r6, r0
   222b0:	ldm	r7, {r0, r1}
   222b4:	str	r6, [r4]
   222b8:	stm	r6, {r0, r1}
   222bc:	b	22198 <__assert_fail@plt+0x10190>
   222c0:	bl	11fe4 <abort@plt>
   222c4:	andeq	ip, r3, r8, ror r2
   222c8:	ldrdeq	ip, [r3], -r4
   222cc:	ldrdeq	ip, [r3], -ip	; <UNPREDICTABLE>
   222d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   222d4:	sub	sp, sp, #52	; 0x34
   222d8:	mov	r5, r0
   222dc:	mov	sl, r1
   222e0:	mov	fp, r2
   222e4:	bl	11e34 <__errno_location@plt>
   222e8:	ldr	r4, [pc, #408]	; 22488 <__assert_fail@plt+0x10480>
   222ec:	cmn	r5, #-2147483647	; 0x80000001
   222f0:	ldr	r6, [r4]
   222f4:	mov	r8, r0
   222f8:	movne	r0, #0
   222fc:	moveq	r0, #1
   22300:	ldr	r3, [r8]
   22304:	orrs	r0, r0, r5, lsr #31
   22308:	str	r3, [sp, #28]
   2230c:	bne	22484 <__assert_fail@plt+0x1047c>
   22310:	ldr	r2, [r4, #4]
   22314:	cmp	r5, r2
   22318:	blt	22378 <__assert_fail@plt+0x10370>
   2231c:	add	r7, r4, #8
   22320:	cmp	r6, r7
   22324:	str	r2, [sp, #44]	; 0x2c
   22328:	beq	22454 <__assert_fail@plt+0x1044c>
   2232c:	mov	r3, #8
   22330:	sub	r2, r5, r2
   22334:	mov	r0, r6
   22338:	str	r3, [sp]
   2233c:	add	r2, r2, #1
   22340:	mvn	r3, #-2147483648	; 0x80000000
   22344:	add	r1, sp, #44	; 0x2c
   22348:	bl	2641c <__assert_fail@plt+0x14414>
   2234c:	mov	r6, r0
   22350:	str	r0, [r4]
   22354:	ldr	r0, [r4, #4]
   22358:	ldr	r2, [sp, #44]	; 0x2c
   2235c:	mov	r1, #0
   22360:	sub	r2, r2, r0
   22364:	add	r0, r6, r0, lsl #3
   22368:	lsl	r2, r2, #3
   2236c:	bl	11e58 <memset@plt>
   22370:	ldr	r3, [sp, #44]	; 0x2c
   22374:	str	r3, [r4, #4]
   22378:	ldr	r4, [pc, #268]	; 2248c <__assert_fail@plt+0x10484>
   2237c:	add	r3, r6, r5, lsl #3
   22380:	str	r3, [sp, #32]
   22384:	ldr	r7, [r3, #4]
   22388:	ldr	r0, [r4, #4]
   2238c:	ldr	r3, [r4]
   22390:	ldr	r9, [r6, r5, lsl #3]
   22394:	ldr	r1, [r4, #44]	; 0x2c
   22398:	ldr	r2, [r4, #40]	; 0x28
   2239c:	orr	r0, r0, #1
   223a0:	str	r3, [sp]
   223a4:	add	r3, r4, #8
   223a8:	str	r0, [sp, #36]	; 0x24
   223ac:	str	r0, [sp, #4]
   223b0:	str	r1, [sp, #16]
   223b4:	str	r2, [sp, #12]
   223b8:	str	r3, [sp, #8]
   223bc:	mov	r0, r7
   223c0:	mov	r1, r9
   223c4:	mov	r3, fp
   223c8:	mov	r2, sl
   223cc:	bl	207fc <__assert_fail@plt+0xe7f4>
   223d0:	cmp	r9, r0
   223d4:	bhi	22440 <__assert_fail@plt+0x10438>
   223d8:	add	r3, r4, #48	; 0x30
   223dc:	add	r9, r0, #1
   223e0:	cmp	r7, r3
   223e4:	str	r9, [r6, r5, lsl #3]
   223e8:	beq	223f4 <__assert_fail@plt+0x103ec>
   223ec:	mov	r0, r7
   223f0:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   223f4:	mov	r0, r9
   223f8:	bl	26200 <__assert_fail@plt+0x141f8>
   223fc:	ldr	ip, [sp, #32]
   22400:	ldr	lr, [r4, #44]	; 0x2c
   22404:	ldr	r5, [r4, #40]	; 0x28
   22408:	mov	r3, fp
   2240c:	mov	r2, sl
   22410:	mov	r1, r9
   22414:	str	r0, [ip, #4]
   22418:	ldr	ip, [r4]
   2241c:	ldr	r4, [pc, #108]	; 22490 <__assert_fail@plt+0x10488>
   22420:	str	lr, [sp, #16]
   22424:	str	r4, [sp, #8]
   22428:	ldr	r4, [sp, #36]	; 0x24
   2242c:	str	r5, [sp, #12]
   22430:	str	r4, [sp, #4]
   22434:	str	ip, [sp]
   22438:	mov	r7, r0
   2243c:	bl	207fc <__assert_fail@plt+0xe7f4>
   22440:	ldr	r3, [sp, #28]
   22444:	mov	r0, r7
   22448:	str	r3, [r8]
   2244c:	add	sp, sp, #52	; 0x34
   22450:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22454:	mov	r3, #8
   22458:	sub	r2, r5, r2
   2245c:	str	r3, [sp]
   22460:	add	r1, sp, #44	; 0x2c
   22464:	add	r2, r2, #1
   22468:	mvn	r3, #-2147483648	; 0x80000000
   2246c:	bl	2641c <__assert_fail@plt+0x14414>
   22470:	mov	r6, r0
   22474:	ldm	r7, {r0, r1}
   22478:	str	r6, [r4]
   2247c:	stm	r6, {r0, r1}
   22480:	b	22354 <__assert_fail@plt+0x1034c>
   22484:	bl	11fe4 <abort@plt>
   22488:	andeq	ip, r3, r8, ror r2
   2248c:	ldrdeq	ip, [r3], -r4
   22490:	ldrdeq	ip, [r3], -ip	; <UNPREDICTABLE>
   22494:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22498:	sub	sp, sp, #44	; 0x2c
   2249c:	mov	sl, r0
   224a0:	bl	11e34 <__errno_location@plt>
   224a4:	ldr	r4, [pc, #352]	; 2260c <__assert_fail@plt+0x10604>
   224a8:	ldr	r2, [r4, #4]
   224ac:	ldr	r5, [r4]
   224b0:	cmp	r2, #0
   224b4:	ldr	r3, [r0]
   224b8:	mov	r8, r0
   224bc:	str	r3, [sp, #28]
   224c0:	bgt	2251c <__assert_fail@plt+0x10514>
   224c4:	add	r6, r4, #8
   224c8:	cmp	r5, r6
   224cc:	str	r2, [sp, #36]	; 0x24
   224d0:	beq	225dc <__assert_fail@plt+0x105d4>
   224d4:	mov	r3, #8
   224d8:	mov	r0, r5
   224dc:	str	r3, [sp]
   224e0:	rsb	r2, r2, #1
   224e4:	mvn	r3, #-2147483648	; 0x80000000
   224e8:	add	r1, sp, #36	; 0x24
   224ec:	bl	2641c <__assert_fail@plt+0x14414>
   224f0:	mov	r5, r0
   224f4:	str	r0, [r4]
   224f8:	ldr	r0, [r4, #4]
   224fc:	ldr	r2, [sp, #36]	; 0x24
   22500:	mov	r1, #0
   22504:	sub	r2, r2, r0
   22508:	add	r0, r5, r0, lsl #3
   2250c:	lsl	r2, r2, #3
   22510:	bl	11e58 <memset@plt>
   22514:	ldr	r3, [sp, #36]	; 0x24
   22518:	str	r3, [r4, #4]
   2251c:	ldr	r4, [pc, #236]	; 22610 <__assert_fail@plt+0x10608>
   22520:	ldr	r9, [r5]
   22524:	ldr	r6, [r5, #4]
   22528:	ldr	r7, [r4, #4]
   2252c:	ldr	r1, [r4, #44]	; 0x2c
   22530:	ldr	r2, [r4, #40]	; 0x28
   22534:	ldr	r3, [r4]
   22538:	orr	r7, r7, #1
   2253c:	add	fp, r4, #8
   22540:	str	r1, [sp, #16]
   22544:	str	r2, [sp, #12]
   22548:	str	r3, [sp]
   2254c:	str	r7, [sp, #4]
   22550:	str	fp, [sp, #8]
   22554:	mov	r1, r9
   22558:	mov	r0, r6
   2255c:	mvn	r3, #0
   22560:	mov	r2, sl
   22564:	bl	207fc <__assert_fail@plt+0xe7f4>
   22568:	cmp	r9, r0
   2256c:	bhi	225c8 <__assert_fail@plt+0x105c0>
   22570:	add	r3, r4, #48	; 0x30
   22574:	add	r9, r0, #1
   22578:	cmp	r6, r3
   2257c:	str	r9, [r5]
   22580:	beq	2258c <__assert_fail@plt+0x10584>
   22584:	mov	r0, r6
   22588:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   2258c:	mov	r0, r9
   22590:	bl	26200 <__assert_fail@plt+0x141f8>
   22594:	ldr	ip, [r4, #44]	; 0x2c
   22598:	ldr	r3, [r4]
   2259c:	ldr	lr, [r4, #40]	; 0x28
   225a0:	mov	r2, sl
   225a4:	mov	r1, r9
   225a8:	str	r0, [r5, #4]
   225ac:	str	r3, [sp]
   225b0:	stmib	sp, {r7, fp}
   225b4:	str	ip, [sp, #16]
   225b8:	str	lr, [sp, #12]
   225bc:	mvn	r3, #0
   225c0:	mov	r6, r0
   225c4:	bl	207fc <__assert_fail@plt+0xe7f4>
   225c8:	ldr	r3, [sp, #28]
   225cc:	mov	r0, r6
   225d0:	str	r3, [r8]
   225d4:	add	sp, sp, #44	; 0x2c
   225d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   225dc:	mov	r3, #8
   225e0:	str	r3, [sp]
   225e4:	add	r1, sp, #36	; 0x24
   225e8:	rsb	r2, r2, #1
   225ec:	mvn	r3, #-2147483648	; 0x80000000
   225f0:	mov	r0, #0
   225f4:	bl	2641c <__assert_fail@plt+0x14414>
   225f8:	mov	r5, r0
   225fc:	ldm	r6, {r0, r1}
   22600:	str	r5, [r4]
   22604:	stm	r5, {r0, r1}
   22608:	b	224f8 <__assert_fail@plt+0x104f0>
   2260c:	andeq	ip, r3, r8, ror r2
   22610:	ldrdeq	ip, [r3], -r4
   22614:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22618:	sub	sp, sp, #44	; 0x2c
   2261c:	mov	r9, r0
   22620:	mov	sl, r1
   22624:	bl	11e34 <__errno_location@plt>
   22628:	ldr	r4, [pc, #364]	; 2279c <__assert_fail@plt+0x10794>
   2262c:	ldr	r2, [r4, #4]
   22630:	ldr	r5, [r4]
   22634:	cmp	r2, #0
   22638:	ldr	r3, [r0]
   2263c:	mov	r7, r0
   22640:	str	r3, [sp, #24]
   22644:	bgt	226a0 <__assert_fail@plt+0x10698>
   22648:	add	r6, r4, #8
   2264c:	cmp	r5, r6
   22650:	str	r2, [sp, #36]	; 0x24
   22654:	beq	2276c <__assert_fail@plt+0x10764>
   22658:	mov	r3, #8
   2265c:	mov	r0, r5
   22660:	str	r3, [sp]
   22664:	rsb	r2, r2, #1
   22668:	mvn	r3, #-2147483648	; 0x80000000
   2266c:	add	r1, sp, #36	; 0x24
   22670:	bl	2641c <__assert_fail@plt+0x14414>
   22674:	mov	r5, r0
   22678:	str	r0, [r4]
   2267c:	ldr	r0, [r4, #4]
   22680:	ldr	r2, [sp, #36]	; 0x24
   22684:	mov	r1, #0
   22688:	sub	r2, r2, r0
   2268c:	add	r0, r5, r0, lsl #3
   22690:	lsl	r2, r2, #3
   22694:	bl	11e58 <memset@plt>
   22698:	ldr	r3, [sp, #36]	; 0x24
   2269c:	str	r3, [r4, #4]
   226a0:	ldr	r4, [pc, #248]	; 227a0 <__assert_fail@plt+0x10798>
   226a4:	ldr	r8, [r5]
   226a8:	ldr	r6, [r5, #4]
   226ac:	ldr	r0, [r4, #4]
   226b0:	ldr	r1, [r4, #44]	; 0x2c
   226b4:	ldr	r2, [r4, #40]	; 0x28
   226b8:	ldr	r3, [r4]
   226bc:	orr	r0, r0, #1
   226c0:	add	fp, r4, #8
   226c4:	str	r0, [sp, #28]
   226c8:	str	r0, [sp, #4]
   226cc:	str	r1, [sp, #16]
   226d0:	str	r2, [sp, #12]
   226d4:	str	r3, [sp]
   226d8:	str	fp, [sp, #8]
   226dc:	mov	r1, r8
   226e0:	mov	r0, r6
   226e4:	mov	r3, sl
   226e8:	mov	r2, r9
   226ec:	bl	207fc <__assert_fail@plt+0xe7f4>
   226f0:	cmp	r8, r0
   226f4:	bhi	22758 <__assert_fail@plt+0x10750>
   226f8:	add	r3, r4, #48	; 0x30
   226fc:	add	r8, r0, #1
   22700:	cmp	r6, r3
   22704:	str	r8, [r5]
   22708:	beq	22714 <__assert_fail@plt+0x1070c>
   2270c:	mov	r0, r6
   22710:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   22714:	mov	r0, r8
   22718:	bl	26200 <__assert_fail@plt+0x141f8>
   2271c:	ldr	lr, [r4, #44]	; 0x2c
   22720:	ldr	ip, [r4]
   22724:	mov	r3, sl
   22728:	mov	r2, r9
   2272c:	mov	r1, r8
   22730:	str	r0, [r5, #4]
   22734:	ldr	r5, [r4, #40]	; 0x28
   22738:	ldr	r4, [sp, #28]
   2273c:	str	fp, [sp, #8]
   22740:	str	r4, [sp, #4]
   22744:	str	lr, [sp, #16]
   22748:	str	r5, [sp, #12]
   2274c:	str	ip, [sp]
   22750:	mov	r6, r0
   22754:	bl	207fc <__assert_fail@plt+0xe7f4>
   22758:	ldr	r3, [sp, #24]
   2275c:	mov	r0, r6
   22760:	str	r3, [r7]
   22764:	add	sp, sp, #44	; 0x2c
   22768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2276c:	mov	r3, #8
   22770:	str	r3, [sp]
   22774:	add	r1, sp, #36	; 0x24
   22778:	rsb	r2, r2, #1
   2277c:	mvn	r3, #-2147483648	; 0x80000000
   22780:	mov	r0, #0
   22784:	bl	2641c <__assert_fail@plt+0x14414>
   22788:	mov	r5, r0
   2278c:	ldm	r6, {r0, r1}
   22790:	str	r5, [r4]
   22794:	stm	r5, {r0, r1}
   22798:	b	2267c <__assert_fail@plt+0x10674>
   2279c:	andeq	ip, r3, r8, ror r2
   227a0:	ldrdeq	ip, [r3], -r4
   227a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   227a8:	sub	sp, sp, #132	; 0x84
   227ac:	mov	r5, r1
   227b0:	mov	r4, r0
   227b4:	mov	r9, r2
   227b8:	add	r0, sp, #80	; 0x50
   227bc:	mov	r2, #48	; 0x30
   227c0:	mov	r1, #0
   227c4:	bl	11e58 <memset@plt>
   227c8:	cmp	r5, #10
   227cc:	beq	22984 <__assert_fail@plt+0x1097c>
   227d0:	add	lr, sp, #80	; 0x50
   227d4:	str	r5, [sp, #80]	; 0x50
   227d8:	ldm	lr!, {r0, r1, r2, r3}
   227dc:	add	ip, sp, #32
   227e0:	ldr	r6, [pc, #416]	; 22988 <__assert_fail@plt+0x10980>
   227e4:	stmia	ip!, {r0, r1, r2, r3}
   227e8:	ldm	lr!, {r0, r1, r2, r3}
   227ec:	stmia	ip!, {r0, r1, r2, r3}
   227f0:	ldm	lr, {r0, r1, r2, r3}
   227f4:	stm	ip, {r0, r1, r2, r3}
   227f8:	bl	11e34 <__errno_location@plt>
   227fc:	cmn	r4, #-2147483647	; 0x80000001
   22800:	ldr	r5, [r6]
   22804:	mov	r7, r0
   22808:	movne	r0, #0
   2280c:	moveq	r0, #1
   22810:	ldr	r3, [r7]
   22814:	orrs	r0, r0, r4, lsr #31
   22818:	str	r3, [sp, #24]
   2281c:	bne	22984 <__assert_fail@plt+0x1097c>
   22820:	ldr	r2, [r6, #4]
   22824:	cmp	r4, r2
   22828:	blt	22888 <__assert_fail@plt+0x10880>
   2282c:	add	r8, r6, #8
   22830:	cmp	r5, r8
   22834:	str	r2, [sp, #80]	; 0x50
   22838:	beq	22954 <__assert_fail@plt+0x1094c>
   2283c:	mov	r3, #8
   22840:	sub	r2, r4, r2
   22844:	mov	r0, r5
   22848:	str	r3, [sp]
   2284c:	add	r2, r2, #1
   22850:	add	r1, sp, #80	; 0x50
   22854:	mvn	r3, #-2147483648	; 0x80000000
   22858:	bl	2641c <__assert_fail@plt+0x14414>
   2285c:	mov	r5, r0
   22860:	str	r0, [r6]
   22864:	ldr	r0, [r6, #4]
   22868:	ldr	r2, [sp, #80]	; 0x50
   2286c:	mov	r1, #0
   22870:	sub	r2, r2, r0
   22874:	add	r0, r5, r0, lsl #3
   22878:	lsl	r2, r2, #3
   2287c:	bl	11e58 <memset@plt>
   22880:	ldr	r3, [sp, #80]	; 0x50
   22884:	str	r3, [r6, #4]
   22888:	add	fp, r5, r4, lsl #3
   2288c:	ldr	r1, [sp, #36]	; 0x24
   22890:	ldr	r8, [r5, r4, lsl #3]
   22894:	ldr	r6, [fp, #4]
   22898:	ldr	r2, [sp, #72]	; 0x48
   2289c:	ldr	r3, [sp, #32]
   228a0:	ldr	ip, [sp, #76]	; 0x4c
   228a4:	orr	r1, r1, #1
   228a8:	add	sl, sp, #40	; 0x28
   228ac:	str	r1, [sp, #28]
   228b0:	str	r1, [sp, #4]
   228b4:	str	r2, [sp, #12]
   228b8:	str	r3, [sp]
   228bc:	mov	r0, r6
   228c0:	mov	r1, r8
   228c4:	str	ip, [sp, #16]
   228c8:	str	sl, [sp, #8]
   228cc:	mvn	r3, #0
   228d0:	mov	r2, r9
   228d4:	bl	207fc <__assert_fail@plt+0xe7f4>
   228d8:	cmp	r8, r0
   228dc:	bhi	22940 <__assert_fail@plt+0x10938>
   228e0:	ldr	r3, [pc, #164]	; 2298c <__assert_fail@plt+0x10984>
   228e4:	add	r8, r0, #1
   228e8:	cmp	r6, r3
   228ec:	str	r8, [r5, r4, lsl #3]
   228f0:	beq	228fc <__assert_fail@plt+0x108f4>
   228f4:	mov	r0, r6
   228f8:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   228fc:	mov	r0, r8
   22900:	bl	26200 <__assert_fail@plt+0x141f8>
   22904:	ldr	lr, [sp, #76]	; 0x4c
   22908:	ldr	r3, [sp, #32]
   2290c:	ldr	ip, [sp, #72]	; 0x48
   22910:	ldr	r4, [sp, #28]
   22914:	mov	r2, r9
   22918:	mov	r1, r8
   2291c:	str	r0, [fp, #4]
   22920:	str	r3, [sp]
   22924:	str	sl, [sp, #8]
   22928:	str	r4, [sp, #4]
   2292c:	str	lr, [sp, #16]
   22930:	str	ip, [sp, #12]
   22934:	mvn	r3, #0
   22938:	mov	r6, r0
   2293c:	bl	207fc <__assert_fail@plt+0xe7f4>
   22940:	ldr	r3, [sp, #24]
   22944:	mov	r0, r6
   22948:	str	r3, [r7]
   2294c:	add	sp, sp, #132	; 0x84
   22950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22954:	mov	r3, #8
   22958:	sub	r2, r4, r2
   2295c:	add	r1, sp, #80	; 0x50
   22960:	str	r3, [sp]
   22964:	add	r2, r2, #1
   22968:	mvn	r3, #-2147483648	; 0x80000000
   2296c:	bl	2641c <__assert_fail@plt+0x14414>
   22970:	mov	r5, r0
   22974:	ldm	r8, {r0, r1}
   22978:	str	r5, [r6]
   2297c:	stm	r5, {r0, r1}
   22980:	b	22864 <__assert_fail@plt+0x1085c>
   22984:	bl	11fe4 <abort@plt>
   22988:	andeq	ip, r3, r8, ror r2
   2298c:	andeq	ip, r3, r4, lsl #18
   22990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22994:	sub	sp, sp, #132	; 0x84
   22998:	mov	r5, r1
   2299c:	mov	r4, r0
   229a0:	mov	r9, r2
   229a4:	add	r0, sp, #80	; 0x50
   229a8:	mov	r2, #48	; 0x30
   229ac:	mov	r1, #0
   229b0:	mov	sl, r3
   229b4:	bl	11e58 <memset@plt>
   229b8:	cmp	r5, #10
   229bc:	beq	22b78 <__assert_fail@plt+0x10b70>
   229c0:	add	lr, sp, #80	; 0x50
   229c4:	str	r5, [sp, #80]	; 0x50
   229c8:	ldm	lr!, {r0, r1, r2, r3}
   229cc:	add	ip, sp, #32
   229d0:	ldr	r6, [pc, #420]	; 22b7c <__assert_fail@plt+0x10b74>
   229d4:	stmia	ip!, {r0, r1, r2, r3}
   229d8:	ldm	lr!, {r0, r1, r2, r3}
   229dc:	stmia	ip!, {r0, r1, r2, r3}
   229e0:	ldm	lr, {r0, r1, r2, r3}
   229e4:	stm	ip, {r0, r1, r2, r3}
   229e8:	bl	11e34 <__errno_location@plt>
   229ec:	cmn	r4, #-2147483647	; 0x80000001
   229f0:	ldr	r5, [r6]
   229f4:	mov	r7, r0
   229f8:	movne	r0, #0
   229fc:	moveq	r0, #1
   22a00:	ldr	r3, [r7]
   22a04:	orrs	r0, r0, r4, lsr #31
   22a08:	str	r3, [sp, #24]
   22a0c:	bne	22b78 <__assert_fail@plt+0x10b70>
   22a10:	ldr	r2, [r6, #4]
   22a14:	cmp	r4, r2
   22a18:	blt	22a78 <__assert_fail@plt+0x10a70>
   22a1c:	add	r8, r6, #8
   22a20:	cmp	r5, r8
   22a24:	str	r2, [sp, #80]	; 0x50
   22a28:	beq	22b48 <__assert_fail@plt+0x10b40>
   22a2c:	mov	r3, #8
   22a30:	sub	r2, r4, r2
   22a34:	mov	r0, r5
   22a38:	str	r3, [sp]
   22a3c:	add	r2, r2, #1
   22a40:	add	r1, sp, #80	; 0x50
   22a44:	mvn	r3, #-2147483648	; 0x80000000
   22a48:	bl	2641c <__assert_fail@plt+0x14414>
   22a4c:	mov	r5, r0
   22a50:	str	r0, [r6]
   22a54:	ldr	r0, [r6, #4]
   22a58:	ldr	r2, [sp, #80]	; 0x50
   22a5c:	mov	r1, #0
   22a60:	sub	r2, r2, r0
   22a64:	add	r0, r5, r0, lsl #3
   22a68:	lsl	r2, r2, #3
   22a6c:	bl	11e58 <memset@plt>
   22a70:	ldr	r3, [sp, #80]	; 0x50
   22a74:	str	r3, [r6, #4]
   22a78:	add	fp, r5, r4, lsl #3
   22a7c:	ldr	r3, [sp, #32]
   22a80:	ldr	r1, [sp, #36]	; 0x24
   22a84:	ldr	r8, [r5, r4, lsl #3]
   22a88:	ldr	r6, [fp, #4]
   22a8c:	ldr	r2, [sp, #72]	; 0x48
   22a90:	ldr	ip, [sp, #76]	; 0x4c
   22a94:	orr	r1, r1, #1
   22a98:	str	r3, [sp]
   22a9c:	add	r3, sp, #40	; 0x28
   22aa0:	str	r1, [sp, #28]
   22aa4:	str	r1, [sp, #4]
   22aa8:	str	r2, [sp, #12]
   22aac:	str	r3, [sp, #8]
   22ab0:	mov	r0, r6
   22ab4:	mov	r1, r8
   22ab8:	str	ip, [sp, #16]
   22abc:	mov	r3, sl
   22ac0:	mov	r2, r9
   22ac4:	bl	207fc <__assert_fail@plt+0xe7f4>
   22ac8:	cmp	r8, r0
   22acc:	bhi	22b34 <__assert_fail@plt+0x10b2c>
   22ad0:	ldr	r3, [pc, #168]	; 22b80 <__assert_fail@plt+0x10b78>
   22ad4:	add	r8, r0, #1
   22ad8:	cmp	r6, r3
   22adc:	str	r8, [r5, r4, lsl #3]
   22ae0:	beq	22aec <__assert_fail@plt+0x10ae4>
   22ae4:	mov	r0, r6
   22ae8:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   22aec:	mov	r0, r8
   22af0:	bl	26200 <__assert_fail@plt+0x141f8>
   22af4:	add	lr, sp, #40	; 0x28
   22af8:	ldr	ip, [sp, #76]	; 0x4c
   22afc:	ldr	r4, [sp, #72]	; 0x48
   22b00:	ldr	r5, [sp, #28]
   22b04:	mov	r3, sl
   22b08:	mov	r2, r9
   22b0c:	mov	r1, r8
   22b10:	str	r0, [fp, #4]
   22b14:	str	lr, [sp, #8]
   22b18:	ldr	lr, [sp, #32]
   22b1c:	str	r5, [sp, #4]
   22b20:	str	ip, [sp, #16]
   22b24:	str	r4, [sp, #12]
   22b28:	str	lr, [sp]
   22b2c:	mov	r6, r0
   22b30:	bl	207fc <__assert_fail@plt+0xe7f4>
   22b34:	ldr	r3, [sp, #24]
   22b38:	mov	r0, r6
   22b3c:	str	r3, [r7]
   22b40:	add	sp, sp, #132	; 0x84
   22b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22b48:	mov	r3, #8
   22b4c:	sub	r2, r4, r2
   22b50:	add	r1, sp, #80	; 0x50
   22b54:	str	r3, [sp]
   22b58:	add	r2, r2, #1
   22b5c:	mvn	r3, #-2147483648	; 0x80000000
   22b60:	bl	2641c <__assert_fail@plt+0x14414>
   22b64:	mov	r5, r0
   22b68:	ldm	r8, {r0, r1}
   22b6c:	str	r5, [r6]
   22b70:	stm	r5, {r0, r1}
   22b74:	b	22a54 <__assert_fail@plt+0x10a4c>
   22b78:	bl	11fe4 <abort@plt>
   22b7c:	andeq	ip, r3, r8, ror r2
   22b80:	andeq	ip, r3, r4, lsl #18
   22b84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b88:	sub	sp, sp, #124	; 0x7c
   22b8c:	mov	r4, r0
   22b90:	mov	r9, r1
   22b94:	add	r0, sp, #72	; 0x48
   22b98:	mov	r2, #48	; 0x30
   22b9c:	mov	r1, #0
   22ba0:	bl	11e58 <memset@plt>
   22ba4:	cmp	r4, #10
   22ba8:	beq	22d34 <__assert_fail@plt+0x10d2c>
   22bac:	add	lr, sp, #72	; 0x48
   22bb0:	str	r4, [sp, #72]	; 0x48
   22bb4:	ldm	lr!, {r0, r1, r2, r3}
   22bb8:	add	ip, sp, #24
   22bbc:	ldr	r5, [pc, #372]	; 22d38 <__assert_fail@plt+0x10d30>
   22bc0:	stmia	ip!, {r0, r1, r2, r3}
   22bc4:	ldm	lr!, {r0, r1, r2, r3}
   22bc8:	stmia	ip!, {r0, r1, r2, r3}
   22bcc:	ldm	lr, {r0, r1, r2, r3}
   22bd0:	stm	ip, {r0, r1, r2, r3}
   22bd4:	bl	11e34 <__errno_location@plt>
   22bd8:	ldr	r2, [r5, #4]
   22bdc:	ldr	r4, [r5]
   22be0:	cmp	r2, #0
   22be4:	mov	r7, r0
   22be8:	ldr	fp, [r0]
   22bec:	bgt	22c48 <__assert_fail@plt+0x10c40>
   22bf0:	add	r6, r5, #8
   22bf4:	cmp	r4, r6
   22bf8:	str	r2, [sp, #72]	; 0x48
   22bfc:	beq	22d04 <__assert_fail@plt+0x10cfc>
   22c00:	mov	r3, #8
   22c04:	mov	r0, r4
   22c08:	str	r3, [sp]
   22c0c:	rsb	r2, r2, #1
   22c10:	add	r1, sp, #72	; 0x48
   22c14:	mvn	r3, #-2147483648	; 0x80000000
   22c18:	bl	2641c <__assert_fail@plt+0x14414>
   22c1c:	mov	r4, r0
   22c20:	str	r0, [r5]
   22c24:	ldr	r0, [r5, #4]
   22c28:	ldr	r2, [sp, #72]	; 0x48
   22c2c:	mov	r1, #0
   22c30:	sub	r2, r2, r0
   22c34:	add	r0, r4, r0, lsl #3
   22c38:	lsl	r2, r2, #3
   22c3c:	bl	11e58 <memset@plt>
   22c40:	ldr	r3, [sp, #72]	; 0x48
   22c44:	str	r3, [r5, #4]
   22c48:	ldr	r6, [sp, #28]
   22c4c:	ldr	r8, [r4]
   22c50:	ldr	r5, [r4, #4]
   22c54:	ldr	r2, [sp, #64]	; 0x40
   22c58:	ldr	r3, [sp, #24]
   22c5c:	ldr	ip, [sp, #68]	; 0x44
   22c60:	orr	r6, r6, #1
   22c64:	add	sl, sp, #32
   22c68:	str	r2, [sp, #12]
   22c6c:	str	r3, [sp]
   22c70:	str	r6, [sp, #4]
   22c74:	mov	r1, r8
   22c78:	mov	r0, r5
   22c7c:	str	ip, [sp, #16]
   22c80:	str	sl, [sp, #8]
   22c84:	mvn	r3, #0
   22c88:	mov	r2, r9
   22c8c:	bl	207fc <__assert_fail@plt+0xe7f4>
   22c90:	cmp	r8, r0
   22c94:	bhi	22cf4 <__assert_fail@plt+0x10cec>
   22c98:	ldr	r3, [pc, #156]	; 22d3c <__assert_fail@plt+0x10d34>
   22c9c:	add	r8, r0, #1
   22ca0:	cmp	r5, r3
   22ca4:	str	r8, [r4]
   22ca8:	beq	22cb4 <__assert_fail@plt+0x10cac>
   22cac:	mov	r0, r5
   22cb0:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   22cb4:	mov	r0, r8
   22cb8:	bl	26200 <__assert_fail@plt+0x141f8>
   22cbc:	ldr	lr, [sp, #68]	; 0x44
   22cc0:	ldr	r3, [sp, #24]
   22cc4:	ldr	ip, [sp, #64]	; 0x40
   22cc8:	mov	r2, r9
   22ccc:	mov	r1, r8
   22cd0:	str	r0, [r4, #4]
   22cd4:	str	r3, [sp]
   22cd8:	str	sl, [sp, #8]
   22cdc:	str	r6, [sp, #4]
   22ce0:	str	lr, [sp, #16]
   22ce4:	str	ip, [sp, #12]
   22ce8:	mvn	r3, #0
   22cec:	mov	r5, r0
   22cf0:	bl	207fc <__assert_fail@plt+0xe7f4>
   22cf4:	mov	r0, r5
   22cf8:	str	fp, [r7]
   22cfc:	add	sp, sp, #124	; 0x7c
   22d00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22d04:	mov	r3, #8
   22d08:	add	r1, sp, #72	; 0x48
   22d0c:	str	r3, [sp]
   22d10:	rsb	r2, r2, #1
   22d14:	mvn	r3, #-2147483648	; 0x80000000
   22d18:	mov	r0, #0
   22d1c:	bl	2641c <__assert_fail@plt+0x14414>
   22d20:	mov	r4, r0
   22d24:	ldm	r6, {r0, r1}
   22d28:	str	r4, [r5]
   22d2c:	stm	r4, {r0, r1}
   22d30:	b	22c24 <__assert_fail@plt+0x10c1c>
   22d34:	bl	11fe4 <abort@plt>
   22d38:	andeq	ip, r3, r8, ror r2
   22d3c:	andeq	ip, r3, r4, lsl #18
   22d40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22d44:	sub	sp, sp, #132	; 0x84
   22d48:	mov	r4, r0
   22d4c:	mov	r9, r1
   22d50:	mov	sl, r2
   22d54:	add	r0, sp, #80	; 0x50
   22d58:	mov	r2, #48	; 0x30
   22d5c:	mov	r1, #0
   22d60:	bl	11e58 <memset@plt>
   22d64:	cmp	r4, #10
   22d68:	beq	22efc <__assert_fail@plt+0x10ef4>
   22d6c:	add	lr, sp, #80	; 0x50
   22d70:	str	r4, [sp, #80]	; 0x50
   22d74:	ldm	lr!, {r0, r1, r2, r3}
   22d78:	add	ip, sp, #32
   22d7c:	ldr	r5, [pc, #380]	; 22f00 <__assert_fail@plt+0x10ef8>
   22d80:	stmia	ip!, {r0, r1, r2, r3}
   22d84:	ldm	lr!, {r0, r1, r2, r3}
   22d88:	stmia	ip!, {r0, r1, r2, r3}
   22d8c:	ldm	lr, {r0, r1, r2, r3}
   22d90:	stm	ip, {r0, r1, r2, r3}
   22d94:	bl	11e34 <__errno_location@plt>
   22d98:	ldr	r2, [r5, #4]
   22d9c:	ldr	r4, [r5]
   22da0:	cmp	r2, #0
   22da4:	ldr	r3, [r0]
   22da8:	mov	r7, r0
   22dac:	str	r3, [sp, #28]
   22db0:	bgt	22e0c <__assert_fail@plt+0x10e04>
   22db4:	add	r6, r5, #8
   22db8:	cmp	r4, r6
   22dbc:	str	r2, [sp, #80]	; 0x50
   22dc0:	beq	22ecc <__assert_fail@plt+0x10ec4>
   22dc4:	mov	r3, #8
   22dc8:	mov	r0, r4
   22dcc:	str	r3, [sp]
   22dd0:	rsb	r2, r2, #1
   22dd4:	add	r1, sp, #80	; 0x50
   22dd8:	mvn	r3, #-2147483648	; 0x80000000
   22ddc:	bl	2641c <__assert_fail@plt+0x14414>
   22de0:	mov	r4, r0
   22de4:	str	r0, [r5]
   22de8:	ldr	r0, [r5, #4]
   22dec:	ldr	r2, [sp, #80]	; 0x50
   22df0:	mov	r1, #0
   22df4:	sub	r2, r2, r0
   22df8:	add	r0, r4, r0, lsl #3
   22dfc:	lsl	r2, r2, #3
   22e00:	bl	11e58 <memset@plt>
   22e04:	ldr	r3, [sp, #80]	; 0x50
   22e08:	str	r3, [r5, #4]
   22e0c:	ldr	r6, [sp, #36]	; 0x24
   22e10:	ldr	r8, [r4]
   22e14:	ldr	r5, [r4, #4]
   22e18:	ldr	r2, [sp, #72]	; 0x48
   22e1c:	ldr	r3, [sp, #32]
   22e20:	ldr	ip, [sp, #76]	; 0x4c
   22e24:	orr	r6, r6, #1
   22e28:	add	fp, sp, #40	; 0x28
   22e2c:	str	r2, [sp, #12]
   22e30:	str	r3, [sp]
   22e34:	str	r6, [sp, #4]
   22e38:	mov	r1, r8
   22e3c:	mov	r0, r5
   22e40:	str	ip, [sp, #16]
   22e44:	str	fp, [sp, #8]
   22e48:	mov	r3, sl
   22e4c:	mov	r2, r9
   22e50:	bl	207fc <__assert_fail@plt+0xe7f4>
   22e54:	cmp	r8, r0
   22e58:	bhi	22eb8 <__assert_fail@plt+0x10eb0>
   22e5c:	ldr	r3, [pc, #160]	; 22f04 <__assert_fail@plt+0x10efc>
   22e60:	add	r8, r0, #1
   22e64:	cmp	r5, r3
   22e68:	str	r8, [r4]
   22e6c:	beq	22e78 <__assert_fail@plt+0x10e70>
   22e70:	mov	r0, r5
   22e74:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   22e78:	mov	r0, r8
   22e7c:	bl	26200 <__assert_fail@plt+0x141f8>
   22e80:	ldr	ip, [sp, #76]	; 0x4c
   22e84:	ldr	lr, [sp, #32]
   22e88:	mov	r3, sl
   22e8c:	mov	r2, r9
   22e90:	mov	r1, r8
   22e94:	str	r0, [r4, #4]
   22e98:	ldr	r4, [sp, #72]	; 0x48
   22e9c:	str	fp, [sp, #8]
   22ea0:	str	r6, [sp, #4]
   22ea4:	str	ip, [sp, #16]
   22ea8:	str	r4, [sp, #12]
   22eac:	str	lr, [sp]
   22eb0:	mov	r5, r0
   22eb4:	bl	207fc <__assert_fail@plt+0xe7f4>
   22eb8:	ldr	r3, [sp, #28]
   22ebc:	mov	r0, r5
   22ec0:	str	r3, [r7]
   22ec4:	add	sp, sp, #132	; 0x84
   22ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ecc:	mov	r3, #8
   22ed0:	add	r1, sp, #80	; 0x50
   22ed4:	str	r3, [sp]
   22ed8:	rsb	r2, r2, #1
   22edc:	mvn	r3, #-2147483648	; 0x80000000
   22ee0:	mov	r0, #0
   22ee4:	bl	2641c <__assert_fail@plt+0x14414>
   22ee8:	mov	r4, r0
   22eec:	ldm	r6, {r0, r1}
   22ef0:	str	r4, [r5]
   22ef4:	stm	r4, {r0, r1}
   22ef8:	b	22de8 <__assert_fail@plt+0x10de0>
   22efc:	bl	11fe4 <abort@plt>
   22f00:	andeq	ip, r3, r8, ror r2
   22f04:	andeq	ip, r3, r4, lsl #18
   22f08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f0c:	mov	r4, r2
   22f10:	ldr	lr, [pc, #432]	; 230c8 <__assert_fail@plt+0x110c0>
   22f14:	mov	sl, r0
   22f18:	mov	fp, r1
   22f1c:	ldm	lr!, {r0, r1, r2, r3}
   22f20:	sub	sp, sp, #92	; 0x5c
   22f24:	add	ip, sp, #40	; 0x28
   22f28:	lsr	r7, r4, #5
   22f2c:	stmia	ip!, {r0, r1, r2, r3}
   22f30:	add	r6, sp, #48	; 0x30
   22f34:	ldm	lr!, {r0, r1, r2, r3}
   22f38:	and	r4, r4, #31
   22f3c:	ldr	r5, [pc, #392]	; 230cc <__assert_fail@plt+0x110c4>
   22f40:	stmia	ip!, {r0, r1, r2, r3}
   22f44:	ldm	lr, {r0, r1, r2, r3}
   22f48:	stm	ip, {r0, r1, r2, r3}
   22f4c:	ldr	r2, [r6, r7, lsl #2]
   22f50:	lsr	r3, r2, r4
   22f54:	eor	r3, r3, #1
   22f58:	and	r3, r3, #1
   22f5c:	eor	r4, r2, r3, lsl r4
   22f60:	str	r4, [r6, r7, lsl #2]
   22f64:	bl	11e34 <__errno_location@plt>
   22f68:	ldr	r2, [r5, #4]
   22f6c:	ldr	r4, [r5]
   22f70:	cmp	r2, #0
   22f74:	ldr	r3, [r0]
   22f78:	mov	r8, r0
   22f7c:	str	r3, [sp, #28]
   22f80:	bgt	22fdc <__assert_fail@plt+0x10fd4>
   22f84:	add	r7, r5, #8
   22f88:	cmp	r4, r7
   22f8c:	str	r2, [sp, #36]	; 0x24
   22f90:	beq	23098 <__assert_fail@plt+0x11090>
   22f94:	mov	r3, #8
   22f98:	mov	r0, r4
   22f9c:	str	r3, [sp]
   22fa0:	rsb	r2, r2, #1
   22fa4:	mvn	r3, #-2147483648	; 0x80000000
   22fa8:	add	r1, sp, #36	; 0x24
   22fac:	bl	2641c <__assert_fail@plt+0x14414>
   22fb0:	mov	r4, r0
   22fb4:	str	r0, [r5]
   22fb8:	ldr	r0, [r5, #4]
   22fbc:	ldr	r2, [sp, #36]	; 0x24
   22fc0:	mov	r1, #0
   22fc4:	sub	r2, r2, r0
   22fc8:	add	r0, r4, r0, lsl #3
   22fcc:	lsl	r2, r2, #3
   22fd0:	bl	11e58 <memset@plt>
   22fd4:	ldr	r3, [sp, #36]	; 0x24
   22fd8:	str	r3, [r5, #4]
   22fdc:	ldr	r7, [sp, #44]	; 0x2c
   22fe0:	ldr	r9, [r4]
   22fe4:	ldr	r5, [r4, #4]
   22fe8:	ldr	r2, [sp, #80]	; 0x50
   22fec:	ldr	r3, [sp, #40]	; 0x28
   22ff0:	ldr	ip, [sp, #84]	; 0x54
   22ff4:	orr	r7, r7, #1
   22ff8:	str	r2, [sp, #12]
   22ffc:	str	r3, [sp]
   23000:	str	r7, [sp, #4]
   23004:	str	r6, [sp, #8]
   23008:	mov	r1, r9
   2300c:	mov	r0, r5
   23010:	str	ip, [sp, #16]
   23014:	mov	r3, fp
   23018:	mov	r2, sl
   2301c:	bl	207fc <__assert_fail@plt+0xe7f4>
   23020:	cmp	r9, r0
   23024:	bhi	23084 <__assert_fail@plt+0x1107c>
   23028:	ldr	r3, [pc, #160]	; 230d0 <__assert_fail@plt+0x110c8>
   2302c:	add	r9, r0, #1
   23030:	cmp	r5, r3
   23034:	str	r9, [r4]
   23038:	beq	23044 <__assert_fail@plt+0x1103c>
   2303c:	mov	r0, r5
   23040:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   23044:	mov	r0, r9
   23048:	bl	26200 <__assert_fail@plt+0x141f8>
   2304c:	ldr	ip, [sp, #84]	; 0x54
   23050:	ldr	lr, [sp, #40]	; 0x28
   23054:	mov	r3, fp
   23058:	mov	r2, sl
   2305c:	mov	r1, r9
   23060:	str	r0, [r4, #4]
   23064:	ldr	r4, [sp, #80]	; 0x50
   23068:	str	r6, [sp, #8]
   2306c:	str	r7, [sp, #4]
   23070:	str	ip, [sp, #16]
   23074:	str	r4, [sp, #12]
   23078:	str	lr, [sp]
   2307c:	mov	r5, r0
   23080:	bl	207fc <__assert_fail@plt+0xe7f4>
   23084:	ldr	r3, [sp, #28]
   23088:	mov	r0, r5
   2308c:	str	r3, [r8]
   23090:	add	sp, sp, #92	; 0x5c
   23094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23098:	mov	r3, #8
   2309c:	str	r3, [sp]
   230a0:	add	r1, sp, #36	; 0x24
   230a4:	rsb	r2, r2, #1
   230a8:	mvn	r3, #-2147483648	; 0x80000000
   230ac:	mov	r0, #0
   230b0:	bl	2641c <__assert_fail@plt+0x14414>
   230b4:	mov	r4, r0
   230b8:	ldm	r7, {r0, r1}
   230bc:	str	r4, [r5]
   230c0:	stm	r4, {r0, r1}
   230c4:	b	22fb8 <__assert_fail@plt+0x10fb0>
   230c8:	ldrdeq	ip, [r3], -r4
   230cc:	andeq	ip, r3, r8, ror r2
   230d0:	andeq	ip, r3, r4, lsl #18
   230d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   230d8:	mov	r4, r1
   230dc:	ldr	lr, [pc, #420]	; 23288 <__assert_fail@plt+0x11280>
   230e0:	mov	r6, r0
   230e4:	sub	sp, sp, #84	; 0x54
   230e8:	ldm	lr!, {r0, r1, r2, r3}
   230ec:	add	ip, sp, #32
   230f0:	lsr	r8, r4, #5
   230f4:	add	r5, sp, #40	; 0x28
   230f8:	stmia	ip!, {r0, r1, r2, r3}
   230fc:	and	r4, r4, #31
   23100:	ldm	lr!, {r0, r1, r2, r3}
   23104:	ldr	r7, [pc, #384]	; 2328c <__assert_fail@plt+0x11284>
   23108:	stmia	ip!, {r0, r1, r2, r3}
   2310c:	ldm	lr, {r0, r1, r2, r3}
   23110:	stm	ip, {r0, r1, r2, r3}
   23114:	ldr	r2, [r5, r8, lsl #2]
   23118:	lsr	r3, r2, r4
   2311c:	eor	r3, r3, #1
   23120:	and	r3, r3, #1
   23124:	eor	r4, r2, r3, lsl r4
   23128:	str	r4, [r5, r8, lsl #2]
   2312c:	bl	11e34 <__errno_location@plt>
   23130:	ldr	r2, [r7, #4]
   23134:	ldr	r4, [r7]
   23138:	cmp	r2, #0
   2313c:	mov	r9, r0
   23140:	ldr	sl, [r0]
   23144:	bgt	231a0 <__assert_fail@plt+0x11198>
   23148:	add	r8, r7, #8
   2314c:	cmp	r4, r8
   23150:	str	r2, [sp, #28]
   23154:	beq	23258 <__assert_fail@plt+0x11250>
   23158:	mov	r3, #8
   2315c:	mov	r0, r4
   23160:	str	r3, [sp]
   23164:	rsb	r2, r2, #1
   23168:	mvn	r3, #-2147483648	; 0x80000000
   2316c:	add	r1, sp, #28
   23170:	bl	2641c <__assert_fail@plt+0x14414>
   23174:	mov	r4, r0
   23178:	str	r0, [r7]
   2317c:	ldr	r0, [r7, #4]
   23180:	ldr	r2, [sp, #28]
   23184:	mov	r1, #0
   23188:	sub	r2, r2, r0
   2318c:	add	r0, r4, r0, lsl #3
   23190:	lsl	r2, r2, #3
   23194:	bl	11e58 <memset@plt>
   23198:	ldr	r3, [sp, #28]
   2319c:	str	r3, [r7, #4]
   231a0:	ldr	r8, [sp, #36]	; 0x24
   231a4:	ldr	fp, [r4]
   231a8:	ldr	r7, [r4, #4]
   231ac:	ldr	r2, [sp, #72]	; 0x48
   231b0:	ldr	r3, [sp, #32]
   231b4:	ldr	ip, [sp, #76]	; 0x4c
   231b8:	orr	r8, r8, #1
   231bc:	str	r2, [sp, #12]
   231c0:	str	r3, [sp]
   231c4:	str	r8, [sp, #4]
   231c8:	str	r5, [sp, #8]
   231cc:	mov	r1, fp
   231d0:	mov	r0, r7
   231d4:	str	ip, [sp, #16]
   231d8:	mvn	r3, #0
   231dc:	mov	r2, r6
   231e0:	bl	207fc <__assert_fail@plt+0xe7f4>
   231e4:	cmp	fp, r0
   231e8:	bhi	23248 <__assert_fail@plt+0x11240>
   231ec:	ldr	r3, [pc, #156]	; 23290 <__assert_fail@plt+0x11288>
   231f0:	add	fp, r0, #1
   231f4:	cmp	r7, r3
   231f8:	str	fp, [r4]
   231fc:	beq	23208 <__assert_fail@plt+0x11200>
   23200:	mov	r0, r7
   23204:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   23208:	mov	r0, fp
   2320c:	bl	26200 <__assert_fail@plt+0x141f8>
   23210:	ldr	lr, [sp, #76]	; 0x4c
   23214:	ldr	r3, [sp, #32]
   23218:	ldr	ip, [sp, #72]	; 0x48
   2321c:	mov	r2, r6
   23220:	mov	r1, fp
   23224:	str	r0, [r4, #4]
   23228:	str	r3, [sp]
   2322c:	str	r5, [sp, #8]
   23230:	str	r8, [sp, #4]
   23234:	str	lr, [sp, #16]
   23238:	str	ip, [sp, #12]
   2323c:	mvn	r3, #0
   23240:	mov	r7, r0
   23244:	bl	207fc <__assert_fail@plt+0xe7f4>
   23248:	mov	r0, r7
   2324c:	str	sl, [r9]
   23250:	add	sp, sp, #84	; 0x54
   23254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23258:	mov	r3, #8
   2325c:	str	r3, [sp]
   23260:	add	r1, sp, #28
   23264:	rsb	r2, r2, #1
   23268:	mvn	r3, #-2147483648	; 0x80000000
   2326c:	mov	r0, #0
   23270:	bl	2641c <__assert_fail@plt+0x14414>
   23274:	mov	r4, r0
   23278:	ldm	r8, {r0, r1}
   2327c:	str	r4, [r7]
   23280:	stm	r4, {r0, r1}
   23284:	b	2317c <__assert_fail@plt+0x11174>
   23288:	ldrdeq	ip, [r3], -r4
   2328c:	andeq	ip, r3, r8, ror r2
   23290:	andeq	ip, r3, r4, lsl #18
   23294:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23298:	mov	r6, r0
   2329c:	ldr	lr, [pc, #404]	; 23438 <__assert_fail@plt+0x11430>
   232a0:	sub	sp, sp, #84	; 0x54
   232a4:	add	ip, sp, #32
   232a8:	ldm	lr!, {r0, r1, r2, r3}
   232ac:	ldr	r5, [pc, #392]	; 2343c <__assert_fail@plt+0x11434>
   232b0:	stmia	ip!, {r0, r1, r2, r3}
   232b4:	ldm	lr!, {r0, r1, r2, r3}
   232b8:	ldr	r4, [sp, #44]	; 0x2c
   232bc:	stmia	ip!, {r0, r1, r2, r3}
   232c0:	ldm	lr, {r0, r1, r2, r3}
   232c4:	mvn	lr, r4
   232c8:	and	lr, lr, #67108864	; 0x4000000
   232cc:	eor	lr, lr, r4
   232d0:	stm	ip, {r0, r1, r2, r3}
   232d4:	str	lr, [sp, #44]	; 0x2c
   232d8:	bl	11e34 <__errno_location@plt>
   232dc:	ldr	r2, [r5, #4]
   232e0:	ldr	r4, [r5]
   232e4:	cmp	r2, #0
   232e8:	mov	r8, r0
   232ec:	ldr	sl, [r0]
   232f0:	bgt	2334c <__assert_fail@plt+0x11344>
   232f4:	add	r7, r5, #8
   232f8:	cmp	r4, r7
   232fc:	str	r2, [sp, #28]
   23300:	beq	23408 <__assert_fail@plt+0x11400>
   23304:	mov	r3, #8
   23308:	mov	r0, r4
   2330c:	str	r3, [sp]
   23310:	rsb	r2, r2, #1
   23314:	mvn	r3, #-2147483648	; 0x80000000
   23318:	add	r1, sp, #28
   2331c:	bl	2641c <__assert_fail@plt+0x14414>
   23320:	mov	r4, r0
   23324:	str	r0, [r5]
   23328:	ldr	r0, [r5, #4]
   2332c:	ldr	r2, [sp, #28]
   23330:	mov	r1, #0
   23334:	sub	r2, r2, r0
   23338:	add	r0, r4, r0, lsl #3
   2333c:	lsl	r2, r2, #3
   23340:	bl	11e58 <memset@plt>
   23344:	ldr	r3, [sp, #28]
   23348:	str	r3, [r5, #4]
   2334c:	ldr	r7, [sp, #36]	; 0x24
   23350:	ldr	r9, [r4]
   23354:	ldr	r5, [r4, #4]
   23358:	ldr	r2, [sp, #72]	; 0x48
   2335c:	ldr	r3, [sp, #32]
   23360:	ldr	ip, [sp, #76]	; 0x4c
   23364:	orr	r7, r7, #1
   23368:	add	fp, sp, #40	; 0x28
   2336c:	str	r2, [sp, #12]
   23370:	str	r3, [sp]
   23374:	str	r7, [sp, #4]
   23378:	mov	r1, r9
   2337c:	mov	r0, r5
   23380:	str	ip, [sp, #16]
   23384:	str	fp, [sp, #8]
   23388:	mvn	r3, #0
   2338c:	mov	r2, r6
   23390:	bl	207fc <__assert_fail@plt+0xe7f4>
   23394:	cmp	r9, r0
   23398:	bhi	233f8 <__assert_fail@plt+0x113f0>
   2339c:	ldr	r3, [pc, #156]	; 23440 <__assert_fail@plt+0x11438>
   233a0:	add	r9, r0, #1
   233a4:	cmp	r5, r3
   233a8:	str	r9, [r4]
   233ac:	beq	233b8 <__assert_fail@plt+0x113b0>
   233b0:	mov	r0, r5
   233b4:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   233b8:	mov	r0, r9
   233bc:	bl	26200 <__assert_fail@plt+0x141f8>
   233c0:	ldr	lr, [sp, #76]	; 0x4c
   233c4:	ldr	r3, [sp, #32]
   233c8:	ldr	ip, [sp, #72]	; 0x48
   233cc:	mov	r2, r6
   233d0:	mov	r1, r9
   233d4:	str	r0, [r4, #4]
   233d8:	str	r3, [sp]
   233dc:	str	fp, [sp, #8]
   233e0:	str	r7, [sp, #4]
   233e4:	str	lr, [sp, #16]
   233e8:	str	ip, [sp, #12]
   233ec:	mvn	r3, #0
   233f0:	mov	r5, r0
   233f4:	bl	207fc <__assert_fail@plt+0xe7f4>
   233f8:	mov	r0, r5
   233fc:	str	sl, [r8]
   23400:	add	sp, sp, #84	; 0x54
   23404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23408:	mov	r3, #8
   2340c:	str	r3, [sp]
   23410:	add	r1, sp, #28
   23414:	rsb	r2, r2, #1
   23418:	mvn	r3, #-2147483648	; 0x80000000
   2341c:	mov	r0, #0
   23420:	bl	2641c <__assert_fail@plt+0x14414>
   23424:	mov	r4, r0
   23428:	ldm	r7, {r0, r1}
   2342c:	str	r4, [r5]
   23430:	stm	r4, {r0, r1}
   23434:	b	23328 <__assert_fail@plt+0x11320>
   23438:	ldrdeq	ip, [r3], -r4
   2343c:	andeq	ip, r3, r8, ror r2
   23440:	andeq	ip, r3, r4, lsl #18
   23444:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23448:	mov	r9, r0
   2344c:	ldr	lr, [pc, #416]	; 235f4 <__assert_fail@plt+0x115ec>
   23450:	mov	sl, r1
   23454:	sub	sp, sp, #92	; 0x5c
   23458:	ldm	lr!, {r0, r1, r2, r3}
   2345c:	add	ip, sp, #40	; 0x28
   23460:	ldr	r5, [pc, #400]	; 235f8 <__assert_fail@plt+0x115f0>
   23464:	stmia	ip!, {r0, r1, r2, r3}
   23468:	ldm	lr!, {r0, r1, r2, r3}
   2346c:	ldr	r4, [sp, #52]	; 0x34
   23470:	stmia	ip!, {r0, r1, r2, r3}
   23474:	ldm	lr, {r0, r1, r2, r3}
   23478:	mvn	lr, r4
   2347c:	and	lr, lr, #67108864	; 0x4000000
   23480:	eor	lr, lr, r4
   23484:	stm	ip, {r0, r1, r2, r3}
   23488:	str	lr, [sp, #52]	; 0x34
   2348c:	bl	11e34 <__errno_location@plt>
   23490:	ldr	r2, [r5, #4]
   23494:	ldr	r4, [r5]
   23498:	cmp	r2, #0
   2349c:	ldr	r3, [r0]
   234a0:	mov	r7, r0
   234a4:	str	r3, [sp, #28]
   234a8:	bgt	23504 <__assert_fail@plt+0x114fc>
   234ac:	add	r6, r5, #8
   234b0:	cmp	r4, r6
   234b4:	str	r2, [sp, #36]	; 0x24
   234b8:	beq	235c4 <__assert_fail@plt+0x115bc>
   234bc:	mov	r3, #8
   234c0:	mov	r0, r4
   234c4:	str	r3, [sp]
   234c8:	rsb	r2, r2, #1
   234cc:	mvn	r3, #-2147483648	; 0x80000000
   234d0:	add	r1, sp, #36	; 0x24
   234d4:	bl	2641c <__assert_fail@plt+0x14414>
   234d8:	mov	r4, r0
   234dc:	str	r0, [r5]
   234e0:	ldr	r0, [r5, #4]
   234e4:	ldr	r2, [sp, #36]	; 0x24
   234e8:	mov	r1, #0
   234ec:	sub	r2, r2, r0
   234f0:	add	r0, r4, r0, lsl #3
   234f4:	lsl	r2, r2, #3
   234f8:	bl	11e58 <memset@plt>
   234fc:	ldr	r3, [sp, #36]	; 0x24
   23500:	str	r3, [r5, #4]
   23504:	ldr	r6, [sp, #44]	; 0x2c
   23508:	ldr	r8, [r4]
   2350c:	ldr	r5, [r4, #4]
   23510:	ldr	r2, [sp, #80]	; 0x50
   23514:	ldr	r3, [sp, #40]	; 0x28
   23518:	ldr	ip, [sp, #84]	; 0x54
   2351c:	orr	r6, r6, #1
   23520:	add	fp, sp, #48	; 0x30
   23524:	str	r2, [sp, #12]
   23528:	str	r3, [sp]
   2352c:	str	r6, [sp, #4]
   23530:	mov	r1, r8
   23534:	mov	r0, r5
   23538:	str	ip, [sp, #16]
   2353c:	str	fp, [sp, #8]
   23540:	mov	r3, sl
   23544:	mov	r2, r9
   23548:	bl	207fc <__assert_fail@plt+0xe7f4>
   2354c:	cmp	r8, r0
   23550:	bhi	235b0 <__assert_fail@plt+0x115a8>
   23554:	ldr	r3, [pc, #160]	; 235fc <__assert_fail@plt+0x115f4>
   23558:	add	r8, r0, #1
   2355c:	cmp	r5, r3
   23560:	str	r8, [r4]
   23564:	beq	23570 <__assert_fail@plt+0x11568>
   23568:	mov	r0, r5
   2356c:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   23570:	mov	r0, r8
   23574:	bl	26200 <__assert_fail@plt+0x141f8>
   23578:	ldr	ip, [sp, #84]	; 0x54
   2357c:	ldr	lr, [sp, #40]	; 0x28
   23580:	mov	r3, sl
   23584:	mov	r2, r9
   23588:	mov	r1, r8
   2358c:	str	r0, [r4, #4]
   23590:	ldr	r4, [sp, #80]	; 0x50
   23594:	str	fp, [sp, #8]
   23598:	str	r6, [sp, #4]
   2359c:	str	ip, [sp, #16]
   235a0:	str	r4, [sp, #12]
   235a4:	str	lr, [sp]
   235a8:	mov	r5, r0
   235ac:	bl	207fc <__assert_fail@plt+0xe7f4>
   235b0:	ldr	r3, [sp, #28]
   235b4:	mov	r0, r5
   235b8:	str	r3, [r7]
   235bc:	add	sp, sp, #92	; 0x5c
   235c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   235c4:	mov	r3, #8
   235c8:	str	r3, [sp]
   235cc:	add	r1, sp, #36	; 0x24
   235d0:	rsb	r2, r2, #1
   235d4:	mvn	r3, #-2147483648	; 0x80000000
   235d8:	mov	r0, #0
   235dc:	bl	2641c <__assert_fail@plt+0x14414>
   235e0:	mov	r4, r0
   235e4:	ldm	r6, {r0, r1}
   235e8:	str	r4, [r5]
   235ec:	stm	r4, {r0, r1}
   235f0:	b	234e0 <__assert_fail@plt+0x114d8>
   235f4:	ldrdeq	ip, [r3], -r4
   235f8:	andeq	ip, r3, r8, ror r2
   235fc:	andeq	ip, r3, r4, lsl #18
   23600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23604:	sub	sp, sp, #180	; 0xb4
   23608:	mov	r6, r1
   2360c:	mov	r4, r0
   23610:	mov	r9, r2
   23614:	add	r0, sp, #80	; 0x50
   23618:	mov	r2, #48	; 0x30
   2361c:	mov	r1, #0
   23620:	bl	11e58 <memset@plt>
   23624:	cmp	r6, #10
   23628:	beq	23808 <__assert_fail@plt+0x11800>
   2362c:	add	r5, sp, #80	; 0x50
   23630:	str	r6, [sp, #80]	; 0x50
   23634:	ldm	r5!, {r0, r1, r2, r3}
   23638:	add	ip, sp, #128	; 0x80
   2363c:	mov	r7, ip
   23640:	add	lr, sp, #32
   23644:	stmia	ip!, {r0, r1, r2, r3}
   23648:	mov	r8, #67108864	; 0x4000000
   2364c:	ldm	r5!, {r0, r1, r2, r3}
   23650:	ldr	r6, [pc, #436]	; 2380c <__assert_fail@plt+0x11804>
   23654:	stmia	ip!, {r0, r1, r2, r3}
   23658:	ldm	r5, {r0, r1, r2, r3}
   2365c:	stm	ip, {r0, r1, r2, r3}
   23660:	ldm	r7!, {r0, r1, r2, r3}
   23664:	stmia	lr!, {r0, r1, r2, r3}
   23668:	ldm	r7!, {r0, r1, r2, r3}
   2366c:	str	r8, [sp, #44]	; 0x2c
   23670:	stmia	lr!, {r0, r1, r2, r3}
   23674:	ldm	ip, {r0, r1, r2, r3}
   23678:	stm	lr, {r0, r1, r2, r3}
   2367c:	bl	11e34 <__errno_location@plt>
   23680:	cmn	r4, #-2147483647	; 0x80000001
   23684:	ldr	r5, [r6]
   23688:	mov	r7, r0
   2368c:	movne	r0, #0
   23690:	moveq	r0, #1
   23694:	ldr	r3, [r7]
   23698:	orrs	r0, r0, r4, lsr #31
   2369c:	str	r3, [sp, #24]
   236a0:	bne	23808 <__assert_fail@plt+0x11800>
   236a4:	ldr	r2, [r6, #4]
   236a8:	cmp	r4, r2
   236ac:	blt	2370c <__assert_fail@plt+0x11704>
   236b0:	add	r8, r6, #8
   236b4:	cmp	r5, r8
   236b8:	str	r2, [sp, #80]	; 0x50
   236bc:	beq	237d8 <__assert_fail@plt+0x117d0>
   236c0:	mov	r3, #8
   236c4:	sub	r2, r4, r2
   236c8:	mov	r0, r5
   236cc:	str	r3, [sp]
   236d0:	add	r2, r2, #1
   236d4:	add	r1, sp, #80	; 0x50
   236d8:	mvn	r3, #-2147483648	; 0x80000000
   236dc:	bl	2641c <__assert_fail@plt+0x14414>
   236e0:	mov	r5, r0
   236e4:	str	r0, [r6]
   236e8:	ldr	r0, [r6, #4]
   236ec:	ldr	r2, [sp, #80]	; 0x50
   236f0:	mov	r1, #0
   236f4:	sub	r2, r2, r0
   236f8:	add	r0, r5, r0, lsl #3
   236fc:	lsl	r2, r2, #3
   23700:	bl	11e58 <memset@plt>
   23704:	ldr	r3, [sp, #80]	; 0x50
   23708:	str	r3, [r6, #4]
   2370c:	add	fp, r5, r4, lsl #3
   23710:	ldr	r1, [sp, #36]	; 0x24
   23714:	ldr	r8, [r5, r4, lsl #3]
   23718:	ldr	r6, [fp, #4]
   2371c:	ldr	r2, [sp, #72]	; 0x48
   23720:	ldr	r3, [sp, #32]
   23724:	ldr	ip, [sp, #76]	; 0x4c
   23728:	orr	r1, r1, #1
   2372c:	add	sl, sp, #40	; 0x28
   23730:	str	r1, [sp, #28]
   23734:	str	r1, [sp, #4]
   23738:	str	r2, [sp, #12]
   2373c:	str	r3, [sp]
   23740:	mov	r0, r6
   23744:	mov	r1, r8
   23748:	str	ip, [sp, #16]
   2374c:	str	sl, [sp, #8]
   23750:	mvn	r3, #0
   23754:	mov	r2, r9
   23758:	bl	207fc <__assert_fail@plt+0xe7f4>
   2375c:	cmp	r8, r0
   23760:	bhi	237c4 <__assert_fail@plt+0x117bc>
   23764:	ldr	r3, [pc, #164]	; 23810 <__assert_fail@plt+0x11808>
   23768:	add	r8, r0, #1
   2376c:	cmp	r6, r3
   23770:	str	r8, [r5, r4, lsl #3]
   23774:	beq	23780 <__assert_fail@plt+0x11778>
   23778:	mov	r0, r6
   2377c:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   23780:	mov	r0, r8
   23784:	bl	26200 <__assert_fail@plt+0x141f8>
   23788:	ldr	lr, [sp, #76]	; 0x4c
   2378c:	ldr	r3, [sp, #32]
   23790:	ldr	ip, [sp, #72]	; 0x48
   23794:	ldr	r4, [sp, #28]
   23798:	mov	r2, r9
   2379c:	mov	r1, r8
   237a0:	str	r0, [fp, #4]
   237a4:	str	r3, [sp]
   237a8:	str	sl, [sp, #8]
   237ac:	str	r4, [sp, #4]
   237b0:	str	lr, [sp, #16]
   237b4:	str	ip, [sp, #12]
   237b8:	mvn	r3, #0
   237bc:	mov	r6, r0
   237c0:	bl	207fc <__assert_fail@plt+0xe7f4>
   237c4:	ldr	r3, [sp, #24]
   237c8:	mov	r0, r6
   237cc:	str	r3, [r7]
   237d0:	add	sp, sp, #180	; 0xb4
   237d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   237d8:	mov	r3, #8
   237dc:	sub	r2, r4, r2
   237e0:	add	r1, sp, #80	; 0x50
   237e4:	str	r3, [sp]
   237e8:	add	r2, r2, #1
   237ec:	mvn	r3, #-2147483648	; 0x80000000
   237f0:	bl	2641c <__assert_fail@plt+0x14414>
   237f4:	mov	r5, r0
   237f8:	ldm	r8, {r0, r1}
   237fc:	str	r5, [r6]
   23800:	stm	r5, {r0, r1}
   23804:	b	236e8 <__assert_fail@plt+0x116e0>
   23808:	bl	11fe4 <abort@plt>
   2380c:	andeq	ip, r3, r8, ror r2
   23810:	andeq	ip, r3, r4, lsl #18
   23814:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23818:	mov	r7, r1
   2381c:	ldr	lr, [pc, #492]	; 23a10 <__assert_fail@plt+0x11a08>
   23820:	mov	r8, r2
   23824:	mov	r4, r0
   23828:	mov	fp, r3
   2382c:	ldm	lr!, {r0, r1, r2, r3}
   23830:	sub	sp, sp, #100	; 0x64
   23834:	add	ip, sp, #48	; 0x30
   23838:	mov	sl, #10
   2383c:	stmia	ip!, {r0, r1, r2, r3}
   23840:	cmp	r8, #0
   23844:	cmpne	r7, #0
   23848:	ldm	lr!, {r0, r1, r2, r3}
   2384c:	str	sl, [sp, #48]	; 0x30
   23850:	stmia	ip!, {r0, r1, r2, r3}
   23854:	ldm	lr, {r0, r1, r2, r3}
   23858:	stm	ip, {r0, r1, r2, r3}
   2385c:	beq	23a0c <__assert_fail@plt+0x11a04>
   23860:	str	r7, [sp, #88]	; 0x58
   23864:	str	r8, [sp, #92]	; 0x5c
   23868:	bl	11e34 <__errno_location@plt>
   2386c:	ldr	r6, [pc, #416]	; 23a14 <__assert_fail@plt+0x11a0c>
   23870:	cmn	r4, #-2147483647	; 0x80000001
   23874:	ldr	r5, [r6]
   23878:	mov	r9, r0
   2387c:	movne	r0, #0
   23880:	moveq	r0, #1
   23884:	ldr	r3, [r9]
   23888:	orrs	r0, r0, r4, lsr #31
   2388c:	str	r3, [sp, #28]
   23890:	bne	23a0c <__assert_fail@plt+0x11a04>
   23894:	ldr	r2, [r6, #4]
   23898:	cmp	r4, r2
   2389c:	movlt	r3, sl
   238a0:	blt	2390c <__assert_fail@plt+0x11904>
   238a4:	add	r7, r6, #8
   238a8:	cmp	r5, r7
   238ac:	str	r2, [sp, #44]	; 0x2c
   238b0:	beq	239dc <__assert_fail@plt+0x119d4>
   238b4:	mov	r3, #8
   238b8:	sub	r2, r4, r2
   238bc:	mov	r0, r5
   238c0:	str	r3, [sp]
   238c4:	add	r2, r2, #1
   238c8:	mvn	r3, #-2147483648	; 0x80000000
   238cc:	add	r1, sp, #44	; 0x2c
   238d0:	bl	2641c <__assert_fail@plt+0x14414>
   238d4:	mov	r5, r0
   238d8:	str	r0, [r6]
   238dc:	ldr	r0, [r6, #4]
   238e0:	ldr	r2, [sp, #44]	; 0x2c
   238e4:	mov	r1, #0
   238e8:	sub	r2, r2, r0
   238ec:	add	r0, r5, r0, lsl #3
   238f0:	lsl	r2, r2, #3
   238f4:	bl	11e58 <memset@plt>
   238f8:	ldr	r3, [sp, #48]	; 0x30
   238fc:	ldr	r7, [sp, #88]	; 0x58
   23900:	ldr	r8, [sp, #92]	; 0x5c
   23904:	ldr	r2, [sp, #44]	; 0x2c
   23908:	str	r2, [r6, #4]
   2390c:	add	r2, r5, r4, lsl #3
   23910:	mov	r1, r2
   23914:	str	r2, [sp, #32]
   23918:	ldr	r2, [sp, #52]	; 0x34
   2391c:	ldr	r6, [r1, #4]
   23920:	ldr	sl, [r5, r4, lsl #3]
   23924:	orr	r2, r2, #1
   23928:	str	r3, [sp]
   2392c:	add	r3, sp, #56	; 0x38
   23930:	str	r2, [sp, #36]	; 0x24
   23934:	str	r2, [sp, #4]
   23938:	str	r3, [sp, #8]
   2393c:	mov	r0, r6
   23940:	str	r8, [sp, #16]
   23944:	str	r7, [sp, #12]
   23948:	mov	r1, sl
   2394c:	mvn	r3, #0
   23950:	mov	r2, fp
   23954:	bl	207fc <__assert_fail@plt+0xe7f4>
   23958:	cmp	sl, r0
   2395c:	bhi	239c8 <__assert_fail@plt+0x119c0>
   23960:	ldr	r3, [pc, #176]	; 23a18 <__assert_fail@plt+0x11a10>
   23964:	add	r7, r0, #1
   23968:	cmp	r6, r3
   2396c:	str	r7, [r5, r4, lsl #3]
   23970:	beq	2397c <__assert_fail@plt+0x11974>
   23974:	mov	r0, r6
   23978:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   2397c:	mov	r0, r7
   23980:	bl	26200 <__assert_fail@plt+0x141f8>
   23984:	ldr	r3, [sp, #32]
   23988:	ldr	lr, [sp, #92]	; 0x5c
   2398c:	ldr	ip, [sp, #88]	; 0x58
   23990:	ldr	r4, [sp, #36]	; 0x24
   23994:	mov	r2, fp
   23998:	mov	r1, r7
   2399c:	str	r0, [r3, #4]
   239a0:	add	r3, sp, #56	; 0x38
   239a4:	str	r3, [sp, #8]
   239a8:	ldr	r3, [sp, #48]	; 0x30
   239ac:	str	r4, [sp, #4]
   239b0:	str	r3, [sp]
   239b4:	str	lr, [sp, #16]
   239b8:	str	ip, [sp, #12]
   239bc:	mvn	r3, #0
   239c0:	mov	r6, r0
   239c4:	bl	207fc <__assert_fail@plt+0xe7f4>
   239c8:	ldr	r3, [sp, #28]
   239cc:	mov	r0, r6
   239d0:	str	r3, [r9]
   239d4:	add	sp, sp, #100	; 0x64
   239d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   239dc:	mov	r3, #8
   239e0:	sub	r2, r4, r2
   239e4:	str	r3, [sp]
   239e8:	add	r1, sp, #44	; 0x2c
   239ec:	add	r2, r2, #1
   239f0:	mvn	r3, #-2147483648	; 0x80000000
   239f4:	bl	2641c <__assert_fail@plt+0x14414>
   239f8:	mov	r5, r0
   239fc:	ldm	r7, {r0, r1}
   23a00:	str	r5, [r6]
   23a04:	stm	r5, {r0, r1}
   23a08:	b	238dc <__assert_fail@plt+0x118d4>
   23a0c:	bl	11fe4 <abort@plt>
   23a10:	ldrdeq	ip, [r3], -r4
   23a14:	andeq	ip, r3, r8, ror r2
   23a18:	andeq	ip, r3, r4, lsl #18
   23a1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23a20:	mov	r7, r1
   23a24:	ldr	lr, [pc, #492]	; 23c18 <__assert_fail@plt+0x11c10>
   23a28:	mov	r8, r2
   23a2c:	mov	r4, r0
   23a30:	mov	fp, r3
   23a34:	ldm	lr!, {r0, r1, r2, r3}
   23a38:	sub	sp, sp, #100	; 0x64
   23a3c:	add	ip, sp, #48	; 0x30
   23a40:	mov	sl, #10
   23a44:	stmia	ip!, {r0, r1, r2, r3}
   23a48:	cmp	r8, #0
   23a4c:	cmpne	r7, #0
   23a50:	ldm	lr!, {r0, r1, r2, r3}
   23a54:	str	sl, [sp, #48]	; 0x30
   23a58:	stmia	ip!, {r0, r1, r2, r3}
   23a5c:	ldm	lr, {r0, r1, r2, r3}
   23a60:	stm	ip, {r0, r1, r2, r3}
   23a64:	beq	23c14 <__assert_fail@plt+0x11c0c>
   23a68:	str	r7, [sp, #88]	; 0x58
   23a6c:	str	r8, [sp, #92]	; 0x5c
   23a70:	bl	11e34 <__errno_location@plt>
   23a74:	ldr	r6, [pc, #416]	; 23c1c <__assert_fail@plt+0x11c14>
   23a78:	cmn	r4, #-2147483647	; 0x80000001
   23a7c:	ldr	r5, [r6]
   23a80:	mov	r9, r0
   23a84:	movne	r0, #0
   23a88:	moveq	r0, #1
   23a8c:	ldr	r3, [r9]
   23a90:	orrs	r0, r0, r4, lsr #31
   23a94:	str	r3, [sp, #28]
   23a98:	bne	23c14 <__assert_fail@plt+0x11c0c>
   23a9c:	ldr	r2, [r6, #4]
   23aa0:	cmp	r4, r2
   23aa4:	movlt	r3, sl
   23aa8:	blt	23b14 <__assert_fail@plt+0x11b0c>
   23aac:	add	r7, r6, #8
   23ab0:	cmp	r5, r7
   23ab4:	str	r2, [sp, #44]	; 0x2c
   23ab8:	beq	23be4 <__assert_fail@plt+0x11bdc>
   23abc:	mov	r3, #8
   23ac0:	sub	r2, r4, r2
   23ac4:	mov	r0, r5
   23ac8:	str	r3, [sp]
   23acc:	add	r2, r2, #1
   23ad0:	mvn	r3, #-2147483648	; 0x80000000
   23ad4:	add	r1, sp, #44	; 0x2c
   23ad8:	bl	2641c <__assert_fail@plt+0x14414>
   23adc:	mov	r5, r0
   23ae0:	str	r0, [r6]
   23ae4:	ldr	r0, [r6, #4]
   23ae8:	ldr	r2, [sp, #44]	; 0x2c
   23aec:	mov	r1, #0
   23af0:	sub	r2, r2, r0
   23af4:	add	r0, r5, r0, lsl #3
   23af8:	lsl	r2, r2, #3
   23afc:	bl	11e58 <memset@plt>
   23b00:	ldr	r3, [sp, #48]	; 0x30
   23b04:	ldr	r7, [sp, #88]	; 0x58
   23b08:	ldr	r8, [sp, #92]	; 0x5c
   23b0c:	ldr	r2, [sp, #44]	; 0x2c
   23b10:	str	r2, [r6, #4]
   23b14:	add	r2, r5, r4, lsl #3
   23b18:	mov	r1, r2
   23b1c:	str	r2, [sp, #32]
   23b20:	ldr	r2, [sp, #52]	; 0x34
   23b24:	ldr	r6, [r1, #4]
   23b28:	ldr	sl, [r5, r4, lsl #3]
   23b2c:	orr	r2, r2, #1
   23b30:	str	r3, [sp]
   23b34:	add	r3, sp, #56	; 0x38
   23b38:	str	r2, [sp, #36]	; 0x24
   23b3c:	str	r2, [sp, #4]
   23b40:	str	r3, [sp, #8]
   23b44:	mov	r0, r6
   23b48:	str	r8, [sp, #16]
   23b4c:	str	r7, [sp, #12]
   23b50:	mov	r1, sl
   23b54:	ldr	r3, [sp, #136]	; 0x88
   23b58:	mov	r2, fp
   23b5c:	bl	207fc <__assert_fail@plt+0xe7f4>
   23b60:	cmp	sl, r0
   23b64:	bhi	23bd0 <__assert_fail@plt+0x11bc8>
   23b68:	ldr	r3, [pc, #176]	; 23c20 <__assert_fail@plt+0x11c18>
   23b6c:	add	r7, r0, #1
   23b70:	cmp	r6, r3
   23b74:	str	r7, [r5, r4, lsl #3]
   23b78:	beq	23b84 <__assert_fail@plt+0x11b7c>
   23b7c:	mov	r0, r6
   23b80:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   23b84:	mov	r0, r7
   23b88:	bl	26200 <__assert_fail@plt+0x141f8>
   23b8c:	ldr	r3, [sp, #32]
   23b90:	ldr	lr, [sp, #92]	; 0x5c
   23b94:	ldr	ip, [sp, #88]	; 0x58
   23b98:	ldr	r4, [sp, #36]	; 0x24
   23b9c:	mov	r2, fp
   23ba0:	mov	r1, r7
   23ba4:	str	r0, [r3, #4]
   23ba8:	add	r3, sp, #56	; 0x38
   23bac:	str	r3, [sp, #8]
   23bb0:	ldr	r3, [sp, #48]	; 0x30
   23bb4:	str	r4, [sp, #4]
   23bb8:	str	r3, [sp]
   23bbc:	str	lr, [sp, #16]
   23bc0:	str	ip, [sp, #12]
   23bc4:	ldr	r3, [sp, #136]	; 0x88
   23bc8:	mov	r6, r0
   23bcc:	bl	207fc <__assert_fail@plt+0xe7f4>
   23bd0:	ldr	r3, [sp, #28]
   23bd4:	mov	r0, r6
   23bd8:	str	r3, [r9]
   23bdc:	add	sp, sp, #100	; 0x64
   23be0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23be4:	mov	r3, #8
   23be8:	sub	r2, r4, r2
   23bec:	str	r3, [sp]
   23bf0:	add	r1, sp, #44	; 0x2c
   23bf4:	add	r2, r2, #1
   23bf8:	mvn	r3, #-2147483648	; 0x80000000
   23bfc:	bl	2641c <__assert_fail@plt+0x14414>
   23c00:	mov	r5, r0
   23c04:	ldm	r7, {r0, r1}
   23c08:	str	r5, [r6]
   23c0c:	stm	r5, {r0, r1}
   23c10:	b	23ae4 <__assert_fail@plt+0x11adc>
   23c14:	bl	11fe4 <abort@plt>
   23c18:	ldrdeq	ip, [r3], -r4
   23c1c:	andeq	ip, r3, r8, ror r2
   23c20:	andeq	ip, r3, r4, lsl #18
   23c24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c28:	mov	r5, r0
   23c2c:	ldr	lr, [pc, #452]	; 23df8 <__assert_fail@plt+0x11df0>
   23c30:	mov	r6, r1
   23c34:	mov	sl, r2
   23c38:	ldm	lr!, {r0, r1, r2, r3}
   23c3c:	sub	sp, sp, #92	; 0x5c
   23c40:	add	ip, sp, #40	; 0x28
   23c44:	cmp	r6, #0
   23c48:	cmpne	r5, #0
   23c4c:	stmia	ip!, {r0, r1, r2, r3}
   23c50:	mov	r9, #10
   23c54:	ldm	lr!, {r0, r1, r2, r3}
   23c58:	moveq	fp, #1
   23c5c:	movne	fp, #0
   23c60:	str	r9, [sp, #40]	; 0x28
   23c64:	stmia	ip!, {r0, r1, r2, r3}
   23c68:	ldm	lr, {r0, r1, r2, r3}
   23c6c:	stm	ip, {r0, r1, r2, r3}
   23c70:	beq	23df4 <__assert_fail@plt+0x11dec>
   23c74:	str	r5, [sp, #80]	; 0x50
   23c78:	str	r6, [sp, #84]	; 0x54
   23c7c:	bl	11e34 <__errno_location@plt>
   23c80:	ldr	r7, [pc, #372]	; 23dfc <__assert_fail@plt+0x11df4>
   23c84:	ldr	r2, [r7, #4]
   23c88:	ldr	r4, [r7]
   23c8c:	cmp	r2, #0
   23c90:	ldr	r3, [r0]
   23c94:	mov	r8, r0
   23c98:	str	r3, [sp, #24]
   23c9c:	movgt	r3, r9
   23ca0:	bgt	23d08 <__assert_fail@plt+0x11d00>
   23ca4:	add	r5, r7, #8
   23ca8:	cmp	r4, r5
   23cac:	str	r2, [sp, #36]	; 0x24
   23cb0:	beq	23dc4 <__assert_fail@plt+0x11dbc>
   23cb4:	mov	r3, #8
   23cb8:	mov	r0, r4
   23cbc:	str	r3, [sp]
   23cc0:	rsb	r2, r2, #1
   23cc4:	mvn	r3, #-2147483648	; 0x80000000
   23cc8:	add	r1, sp, #36	; 0x24
   23ccc:	bl	2641c <__assert_fail@plt+0x14414>
   23cd0:	mov	r4, r0
   23cd4:	str	r0, [r7]
   23cd8:	ldr	r0, [r7, #4]
   23cdc:	ldr	r2, [sp, #36]	; 0x24
   23ce0:	mov	r1, #0
   23ce4:	sub	r2, r2, r0
   23ce8:	add	r0, r4, r0, lsl #3
   23cec:	lsl	r2, r2, #3
   23cf0:	bl	11e58 <memset@plt>
   23cf4:	ldr	r3, [sp, #40]	; 0x28
   23cf8:	ldr	r5, [sp, #80]	; 0x50
   23cfc:	ldr	r6, [sp, #84]	; 0x54
   23d00:	ldr	r2, [sp, #36]	; 0x24
   23d04:	str	r2, [r7, #4]
   23d08:	ldr	r2, [sp, #44]	; 0x2c
   23d0c:	ldr	r9, [r4]
   23d10:	ldr	r7, [r4, #4]
   23d14:	orr	r2, r2, #1
   23d18:	add	fp, sp, #48	; 0x30
   23d1c:	str	r2, [sp, #28]
   23d20:	str	r2, [sp, #4]
   23d24:	str	r3, [sp]
   23d28:	str	r6, [sp, #16]
   23d2c:	str	r5, [sp, #12]
   23d30:	mov	r1, r9
   23d34:	mov	r0, r7
   23d38:	str	fp, [sp, #8]
   23d3c:	mvn	r3, #0
   23d40:	mov	r2, sl
   23d44:	bl	207fc <__assert_fail@plt+0xe7f4>
   23d48:	cmp	r9, r0
   23d4c:	bhi	23db0 <__assert_fail@plt+0x11da8>
   23d50:	ldr	r3, [pc, #168]	; 23e00 <__assert_fail@plt+0x11df8>
   23d54:	add	r5, r0, #1
   23d58:	cmp	r7, r3
   23d5c:	str	r5, [r4]
   23d60:	beq	23d6c <__assert_fail@plt+0x11d64>
   23d64:	mov	r0, r7
   23d68:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   23d6c:	mov	r0, r5
   23d70:	bl	26200 <__assert_fail@plt+0x141f8>
   23d74:	ldr	lr, [sp, #84]	; 0x54
   23d78:	ldr	r3, [sp, #40]	; 0x28
   23d7c:	ldr	ip, [sp, #80]	; 0x50
   23d80:	mov	r2, sl
   23d84:	mov	r1, r5
   23d88:	str	r0, [r4, #4]
   23d8c:	ldr	r4, [sp, #28]
   23d90:	str	r3, [sp]
   23d94:	str	fp, [sp, #8]
   23d98:	str	r4, [sp, #4]
   23d9c:	str	lr, [sp, #16]
   23da0:	str	ip, [sp, #12]
   23da4:	mvn	r3, #0
   23da8:	mov	r7, r0
   23dac:	bl	207fc <__assert_fail@plt+0xe7f4>
   23db0:	ldr	r3, [sp, #24]
   23db4:	mov	r0, r7
   23db8:	str	r3, [r8]
   23dbc:	add	sp, sp, #92	; 0x5c
   23dc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23dc4:	mov	r3, #8
   23dc8:	str	r3, [sp]
   23dcc:	add	r1, sp, #36	; 0x24
   23dd0:	rsb	r2, r2, #1
   23dd4:	mov	r0, fp
   23dd8:	mvn	r3, #-2147483648	; 0x80000000
   23ddc:	bl	2641c <__assert_fail@plt+0x14414>
   23de0:	mov	r4, r0
   23de4:	ldm	r5, {r0, r1}
   23de8:	str	r4, [r7]
   23dec:	stm	r4, {r0, r1}
   23df0:	b	23cd8 <__assert_fail@plt+0x11cd0>
   23df4:	bl	11fe4 <abort@plt>
   23df8:	ldrdeq	ip, [r3], -r4
   23dfc:	andeq	ip, r3, r8, ror r2
   23e00:	andeq	ip, r3, r4, lsl #18
   23e04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e08:	mov	r5, r0
   23e0c:	ldr	lr, [pc, #464]	; 23fe4 <__assert_fail@plt+0x11fdc>
   23e10:	mov	r6, r1
   23e14:	mov	sl, r2
   23e18:	mov	fp, r3
   23e1c:	ldm	lr!, {r0, r1, r2, r3}
   23e20:	sub	sp, sp, #92	; 0x5c
   23e24:	add	ip, sp, #40	; 0x28
   23e28:	cmp	r6, #0
   23e2c:	cmpne	r5, #0
   23e30:	stmia	ip!, {r0, r1, r2, r3}
   23e34:	moveq	r4, #1
   23e38:	ldm	lr!, {r0, r1, r2, r3}
   23e3c:	movne	r4, #0
   23e40:	mov	r9, #10
   23e44:	str	r4, [sp, #28]
   23e48:	stmia	ip!, {r0, r1, r2, r3}
   23e4c:	ldm	lr, {r0, r1, r2, r3}
   23e50:	str	r9, [sp, #40]	; 0x28
   23e54:	stm	ip, {r0, r1, r2, r3}
   23e58:	beq	23fe0 <__assert_fail@plt+0x11fd8>
   23e5c:	str	r5, [sp, #80]	; 0x50
   23e60:	str	r6, [sp, #84]	; 0x54
   23e64:	bl	11e34 <__errno_location@plt>
   23e68:	ldr	r7, [pc, #376]	; 23fe8 <__assert_fail@plt+0x11fe0>
   23e6c:	ldr	r2, [r7, #4]
   23e70:	ldr	r4, [r7]
   23e74:	cmp	r2, #0
   23e78:	ldr	r3, [r0]
   23e7c:	mov	r8, r0
   23e80:	str	r3, [sp, #24]
   23e84:	movgt	r3, r9
   23e88:	bgt	23ef0 <__assert_fail@plt+0x11ee8>
   23e8c:	add	r5, r7, #8
   23e90:	cmp	r4, r5
   23e94:	str	r2, [sp, #36]	; 0x24
   23e98:	beq	23fb0 <__assert_fail@plt+0x11fa8>
   23e9c:	mov	r3, #8
   23ea0:	mov	r0, r4
   23ea4:	str	r3, [sp]
   23ea8:	rsb	r2, r2, #1
   23eac:	mvn	r3, #-2147483648	; 0x80000000
   23eb0:	add	r1, sp, #36	; 0x24
   23eb4:	bl	2641c <__assert_fail@plt+0x14414>
   23eb8:	mov	r4, r0
   23ebc:	str	r0, [r7]
   23ec0:	ldr	r0, [r7, #4]
   23ec4:	ldr	r2, [sp, #36]	; 0x24
   23ec8:	mov	r1, #0
   23ecc:	sub	r2, r2, r0
   23ed0:	add	r0, r4, r0, lsl #3
   23ed4:	lsl	r2, r2, #3
   23ed8:	bl	11e58 <memset@plt>
   23edc:	ldr	r3, [sp, #40]	; 0x28
   23ee0:	ldr	r5, [sp, #80]	; 0x50
   23ee4:	ldr	r6, [sp, #84]	; 0x54
   23ee8:	ldr	r2, [sp, #36]	; 0x24
   23eec:	str	r2, [r7, #4]
   23ef0:	ldr	r2, [sp, #44]	; 0x2c
   23ef4:	ldr	r9, [r4]
   23ef8:	ldr	r7, [r4, #4]
   23efc:	orr	r2, r2, #1
   23f00:	str	r3, [sp]
   23f04:	add	r3, sp, #48	; 0x30
   23f08:	str	r2, [sp, #28]
   23f0c:	str	r2, [sp, #4]
   23f10:	str	r3, [sp, #8]
   23f14:	str	r6, [sp, #16]
   23f18:	str	r5, [sp, #12]
   23f1c:	mov	r1, r9
   23f20:	mov	r0, r7
   23f24:	mov	r3, fp
   23f28:	mov	r2, sl
   23f2c:	bl	207fc <__assert_fail@plt+0xe7f4>
   23f30:	cmp	r9, r0
   23f34:	bhi	23f9c <__assert_fail@plt+0x11f94>
   23f38:	ldr	r3, [pc, #172]	; 23fec <__assert_fail@plt+0x11fe4>
   23f3c:	add	r5, r0, #1
   23f40:	cmp	r7, r3
   23f44:	str	r5, [r4]
   23f48:	beq	23f54 <__assert_fail@plt+0x11f4c>
   23f4c:	mov	r0, r7
   23f50:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   23f54:	mov	r0, r5
   23f58:	bl	26200 <__assert_fail@plt+0x141f8>
   23f5c:	add	lr, sp, #48	; 0x30
   23f60:	ldr	ip, [sp, #84]	; 0x54
   23f64:	mov	r1, r5
   23f68:	ldr	r5, [sp, #28]
   23f6c:	mov	r3, fp
   23f70:	mov	r2, sl
   23f74:	str	r0, [r4, #4]
   23f78:	ldr	r4, [sp, #80]	; 0x50
   23f7c:	str	lr, [sp, #8]
   23f80:	ldr	lr, [sp, #40]	; 0x28
   23f84:	str	r5, [sp, #4]
   23f88:	str	ip, [sp, #16]
   23f8c:	str	r4, [sp, #12]
   23f90:	str	lr, [sp]
   23f94:	mov	r7, r0
   23f98:	bl	207fc <__assert_fail@plt+0xe7f4>
   23f9c:	ldr	r3, [sp, #24]
   23fa0:	mov	r0, r7
   23fa4:	str	r3, [r8]
   23fa8:	add	sp, sp, #92	; 0x5c
   23fac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23fb0:	mov	r3, #8
   23fb4:	str	r3, [sp]
   23fb8:	add	r1, sp, #36	; 0x24
   23fbc:	rsb	r2, r2, #1
   23fc0:	ldr	r0, [sp, #28]
   23fc4:	mvn	r3, #-2147483648	; 0x80000000
   23fc8:	bl	2641c <__assert_fail@plt+0x14414>
   23fcc:	mov	r4, r0
   23fd0:	ldm	r5, {r0, r1}
   23fd4:	str	r4, [r7]
   23fd8:	stm	r4, {r0, r1}
   23fdc:	b	23ec0 <__assert_fail@plt+0x11eb8>
   23fe0:	bl	11fe4 <abort@plt>
   23fe4:	ldrdeq	ip, [r3], -r4
   23fe8:	andeq	ip, r3, r8, ror r2
   23fec:	andeq	ip, r3, r4, lsl #18
   23ff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ff4:	sub	sp, sp, #52	; 0x34
   23ff8:	mov	r5, r0
   23ffc:	mov	sl, r1
   24000:	mov	fp, r2
   24004:	bl	11e34 <__errno_location@plt>
   24008:	ldr	r4, [pc, #404]	; 241a4 <__assert_fail@plt+0x1219c>
   2400c:	cmn	r5, #-2147483647	; 0x80000001
   24010:	ldr	r6, [r4]
   24014:	mov	r8, r0
   24018:	movne	r0, #0
   2401c:	moveq	r0, #1
   24020:	ldr	r3, [r8]
   24024:	orrs	r0, r0, r5, lsr #31
   24028:	str	r3, [sp, #28]
   2402c:	bne	241a0 <__assert_fail@plt+0x12198>
   24030:	ldr	r2, [r4, #4]
   24034:	cmp	r5, r2
   24038:	blt	24098 <__assert_fail@plt+0x12090>
   2403c:	add	r7, r4, #8
   24040:	cmp	r6, r7
   24044:	str	r2, [sp, #44]	; 0x2c
   24048:	beq	24170 <__assert_fail@plt+0x12168>
   2404c:	mov	r3, #8
   24050:	sub	r2, r5, r2
   24054:	mov	r0, r6
   24058:	str	r3, [sp]
   2405c:	add	r2, r2, #1
   24060:	mvn	r3, #-2147483648	; 0x80000000
   24064:	add	r1, sp, #44	; 0x2c
   24068:	bl	2641c <__assert_fail@plt+0x14414>
   2406c:	mov	r6, r0
   24070:	str	r0, [r4]
   24074:	ldr	r0, [r4, #4]
   24078:	ldr	r2, [sp, #44]	; 0x2c
   2407c:	mov	r1, #0
   24080:	sub	r2, r2, r0
   24084:	add	r0, r6, r0, lsl #3
   24088:	lsl	r2, r2, #3
   2408c:	bl	11e58 <memset@plt>
   24090:	ldr	r3, [sp, #44]	; 0x2c
   24094:	str	r3, [r4, #4]
   24098:	ldr	r2, [r4, #56]	; 0x38
   2409c:	add	r3, r6, r5, lsl #3
   240a0:	ldr	r1, [r4, #20]
   240a4:	ldr	r7, [r3, #4]
   240a8:	ldr	r9, [r6, r5, lsl #3]
   240ac:	ldr	ip, [r4, #60]	; 0x3c
   240b0:	str	r3, [sp, #32]
   240b4:	ldr	r3, [r4, #16]
   240b8:	str	r2, [sp, #12]
   240bc:	ldr	r2, [pc, #228]	; 241a8 <__assert_fail@plt+0x121a0>
   240c0:	orr	r1, r1, #1
   240c4:	str	r1, [sp, #36]	; 0x24
   240c8:	str	r1, [sp, #4]
   240cc:	str	r2, [sp, #8]
   240d0:	str	r3, [sp]
   240d4:	mov	r0, r7
   240d8:	mov	r1, r9
   240dc:	str	ip, [sp, #16]
   240e0:	mov	r3, fp
   240e4:	mov	r2, sl
   240e8:	bl	207fc <__assert_fail@plt+0xe7f4>
   240ec:	cmp	r9, r0
   240f0:	bhi	2415c <__assert_fail@plt+0x12154>
   240f4:	ldr	r3, [pc, #176]	; 241ac <__assert_fail@plt+0x121a4>
   240f8:	add	r9, r0, #1
   240fc:	cmp	r7, r3
   24100:	str	r9, [r6, r5, lsl #3]
   24104:	beq	24110 <__assert_fail@plt+0x12108>
   24108:	mov	r0, r7
   2410c:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   24110:	mov	r0, r9
   24114:	bl	26200 <__assert_fail@plt+0x141f8>
   24118:	ldr	ip, [sp, #32]
   2411c:	ldr	lr, [r4, #60]	; 0x3c
   24120:	ldr	r5, [r4, #56]	; 0x38
   24124:	mov	r3, fp
   24128:	mov	r2, sl
   2412c:	mov	r1, r9
   24130:	str	r0, [ip, #4]
   24134:	ldr	ip, [r4, #16]
   24138:	ldr	r4, [pc, #104]	; 241a8 <__assert_fail@plt+0x121a0>
   2413c:	str	lr, [sp, #16]
   24140:	str	r4, [sp, #8]
   24144:	ldr	r4, [sp, #36]	; 0x24
   24148:	str	r5, [sp, #12]
   2414c:	str	r4, [sp, #4]
   24150:	str	ip, [sp]
   24154:	mov	r7, r0
   24158:	bl	207fc <__assert_fail@plt+0xe7f4>
   2415c:	ldr	r3, [sp, #28]
   24160:	mov	r0, r7
   24164:	str	r3, [r8]
   24168:	add	sp, sp, #52	; 0x34
   2416c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24170:	mov	r3, #8
   24174:	sub	r2, r5, r2
   24178:	str	r3, [sp]
   2417c:	add	r1, sp, #44	; 0x2c
   24180:	add	r2, r2, #1
   24184:	mvn	r3, #-2147483648	; 0x80000000
   24188:	bl	2641c <__assert_fail@plt+0x14414>
   2418c:	mov	r6, r0
   24190:	ldm	r7, {r0, r1}
   24194:	str	r6, [r4]
   24198:	stm	r6, {r0, r1}
   2419c:	b	24074 <__assert_fail@plt+0x1206c>
   241a0:	bl	11fe4 <abort@plt>
   241a4:	andeq	ip, r3, r8, ror r2
   241a8:	muleq	r3, r0, r2
   241ac:	andeq	ip, r3, r4, lsl #18
   241b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   241b4:	sub	sp, sp, #44	; 0x2c
   241b8:	mov	r9, r0
   241bc:	mov	sl, r1
   241c0:	bl	11e34 <__errno_location@plt>
   241c4:	ldr	r4, [pc, #360]	; 24334 <__assert_fail@plt+0x1232c>
   241c8:	ldr	r2, [r4, #4]
   241cc:	ldr	r5, [r4]
   241d0:	cmp	r2, #0
   241d4:	ldr	r3, [r0]
   241d8:	mov	r7, r0
   241dc:	str	r3, [sp, #24]
   241e0:	bgt	2423c <__assert_fail@plt+0x12234>
   241e4:	add	r6, r4, #8
   241e8:	cmp	r5, r6
   241ec:	str	r2, [sp, #36]	; 0x24
   241f0:	beq	24304 <__assert_fail@plt+0x122fc>
   241f4:	mov	r3, #8
   241f8:	mov	r0, r5
   241fc:	str	r3, [sp]
   24200:	rsb	r2, r2, #1
   24204:	mvn	r3, #-2147483648	; 0x80000000
   24208:	add	r1, sp, #36	; 0x24
   2420c:	bl	2641c <__assert_fail@plt+0x14414>
   24210:	mov	r5, r0
   24214:	str	r0, [r4]
   24218:	ldr	r0, [r4, #4]
   2421c:	ldr	r2, [sp, #36]	; 0x24
   24220:	mov	r1, #0
   24224:	sub	r2, r2, r0
   24228:	add	r0, r5, r0, lsl #3
   2422c:	lsl	r2, r2, #3
   24230:	bl	11e58 <memset@plt>
   24234:	ldr	r3, [sp, #36]	; 0x24
   24238:	str	r3, [r4, #4]
   2423c:	ldr	r1, [r4, #20]
   24240:	ldr	r8, [r5]
   24244:	ldr	r6, [r5, #4]
   24248:	ldr	r2, [r4, #56]	; 0x38
   2424c:	ldr	r3, [r4, #16]
   24250:	ldr	ip, [r4, #60]	; 0x3c
   24254:	ldr	fp, [pc, #220]	; 24338 <__assert_fail@plt+0x12330>
   24258:	orr	r1, r1, #1
   2425c:	str	r1, [sp, #28]
   24260:	str	r1, [sp, #4]
   24264:	str	r2, [sp, #12]
   24268:	str	r3, [sp]
   2426c:	mov	r1, r8
   24270:	mov	r0, r6
   24274:	str	ip, [sp, #16]
   24278:	str	fp, [sp, #8]
   2427c:	mov	r3, sl
   24280:	mov	r2, r9
   24284:	bl	207fc <__assert_fail@plt+0xe7f4>
   24288:	cmp	r8, r0
   2428c:	bhi	242f0 <__assert_fail@plt+0x122e8>
   24290:	ldr	r3, [pc, #164]	; 2433c <__assert_fail@plt+0x12334>
   24294:	add	r8, r0, #1
   24298:	cmp	r6, r3
   2429c:	str	r8, [r5]
   242a0:	beq	242ac <__assert_fail@plt+0x122a4>
   242a4:	mov	r0, r6
   242a8:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   242ac:	mov	r0, r8
   242b0:	bl	26200 <__assert_fail@plt+0x141f8>
   242b4:	ldr	lr, [r4, #60]	; 0x3c
   242b8:	ldr	ip, [r4, #16]
   242bc:	mov	r3, sl
   242c0:	mov	r2, r9
   242c4:	mov	r1, r8
   242c8:	str	r0, [r5, #4]
   242cc:	ldr	r5, [r4, #56]	; 0x38
   242d0:	ldr	r4, [sp, #28]
   242d4:	str	fp, [sp, #8]
   242d8:	str	r4, [sp, #4]
   242dc:	str	lr, [sp, #16]
   242e0:	str	r5, [sp, #12]
   242e4:	str	ip, [sp]
   242e8:	mov	r6, r0
   242ec:	bl	207fc <__assert_fail@plt+0xe7f4>
   242f0:	ldr	r3, [sp, #24]
   242f4:	mov	r0, r6
   242f8:	str	r3, [r7]
   242fc:	add	sp, sp, #44	; 0x2c
   24300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24304:	mov	r3, #8
   24308:	str	r3, [sp]
   2430c:	add	r1, sp, #36	; 0x24
   24310:	rsb	r2, r2, #1
   24314:	mvn	r3, #-2147483648	; 0x80000000
   24318:	mov	r0, #0
   2431c:	bl	2641c <__assert_fail@plt+0x14414>
   24320:	mov	r5, r0
   24324:	ldm	r6, {r0, r1}
   24328:	str	r5, [r4]
   2432c:	stm	r5, {r0, r1}
   24330:	b	24218 <__assert_fail@plt+0x12210>
   24334:	andeq	ip, r3, r8, ror r2
   24338:	muleq	r3, r0, r2
   2433c:	andeq	ip, r3, r4, lsl #18
   24340:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24344:	sub	sp, sp, #44	; 0x2c
   24348:	mov	r5, r0
   2434c:	mov	sl, r1
   24350:	bl	11e34 <__errno_location@plt>
   24354:	ldr	r4, [pc, #396]	; 244e8 <__assert_fail@plt+0x124e0>
   24358:	cmn	r5, #-2147483647	; 0x80000001
   2435c:	ldr	r6, [r4]
   24360:	mov	r8, r0
   24364:	movne	r0, #0
   24368:	moveq	r0, #1
   2436c:	ldr	r3, [r8]
   24370:	orrs	r0, r0, r5, lsr #31
   24374:	str	r3, [sp, #24]
   24378:	bne	244e4 <__assert_fail@plt+0x124dc>
   2437c:	ldr	r2, [r4, #4]
   24380:	cmp	r5, r2
   24384:	blt	243e4 <__assert_fail@plt+0x123dc>
   24388:	add	r7, r4, #8
   2438c:	cmp	r6, r7
   24390:	str	r2, [sp, #36]	; 0x24
   24394:	beq	244b4 <__assert_fail@plt+0x124ac>
   24398:	mov	r3, #8
   2439c:	sub	r2, r5, r2
   243a0:	mov	r0, r6
   243a4:	str	r3, [sp]
   243a8:	add	r2, r2, #1
   243ac:	mvn	r3, #-2147483648	; 0x80000000
   243b0:	add	r1, sp, #36	; 0x24
   243b4:	bl	2641c <__assert_fail@plt+0x14414>
   243b8:	mov	r6, r0
   243bc:	str	r0, [r4]
   243c0:	ldr	r0, [r4, #4]
   243c4:	ldr	r2, [sp, #36]	; 0x24
   243c8:	mov	r1, #0
   243cc:	sub	r2, r2, r0
   243d0:	add	r0, r6, r0, lsl #3
   243d4:	lsl	r2, r2, #3
   243d8:	bl	11e58 <memset@plt>
   243dc:	ldr	r3, [sp, #36]	; 0x24
   243e0:	str	r3, [r4, #4]
   243e4:	ldr	r2, [r4, #56]	; 0x38
   243e8:	add	fp, r6, r5, lsl #3
   243ec:	ldr	r1, [r4, #20]
   243f0:	ldr	r9, [r6, r5, lsl #3]
   243f4:	ldr	r7, [fp, #4]
   243f8:	ldr	r3, [r4, #16]
   243fc:	ldr	ip, [r4, #60]	; 0x3c
   24400:	str	r2, [sp, #12]
   24404:	ldr	r2, [pc, #224]	; 244ec <__assert_fail@plt+0x124e4>
   24408:	orr	r1, r1, #1
   2440c:	str	r1, [sp, #28]
   24410:	str	r1, [sp, #4]
   24414:	str	r2, [sp, #8]
   24418:	str	r3, [sp]
   2441c:	mov	r0, r7
   24420:	mov	r1, r9
   24424:	str	ip, [sp, #16]
   24428:	mvn	r3, #0
   2442c:	mov	r2, sl
   24430:	bl	207fc <__assert_fail@plt+0xe7f4>
   24434:	cmp	r9, r0
   24438:	bhi	244a0 <__assert_fail@plt+0x12498>
   2443c:	ldr	r3, [pc, #172]	; 244f0 <__assert_fail@plt+0x124e8>
   24440:	add	r9, r0, #1
   24444:	cmp	r7, r3
   24448:	str	r9, [r6, r5, lsl #3]
   2444c:	beq	24458 <__assert_fail@plt+0x12450>
   24450:	mov	r0, r7
   24454:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   24458:	mov	r0, r9
   2445c:	bl	26200 <__assert_fail@plt+0x141f8>
   24460:	ldr	ip, [r4, #60]	; 0x3c
   24464:	ldr	r3, [r4, #16]
   24468:	ldr	lr, [r4, #56]	; 0x38
   2446c:	ldr	r4, [pc, #120]	; 244ec <__assert_fail@plt+0x124e4>
   24470:	mov	r2, sl
   24474:	mov	r1, r9
   24478:	str	r0, [fp, #4]
   2447c:	str	r4, [sp, #8]
   24480:	ldr	r4, [sp, #28]
   24484:	str	r3, [sp]
   24488:	str	r4, [sp, #4]
   2448c:	str	ip, [sp, #16]
   24490:	str	lr, [sp, #12]
   24494:	mvn	r3, #0
   24498:	mov	r7, r0
   2449c:	bl	207fc <__assert_fail@plt+0xe7f4>
   244a0:	ldr	r3, [sp, #24]
   244a4:	mov	r0, r7
   244a8:	str	r3, [r8]
   244ac:	add	sp, sp, #44	; 0x2c
   244b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   244b4:	mov	r3, #8
   244b8:	sub	r2, r5, r2
   244bc:	str	r3, [sp]
   244c0:	add	r1, sp, #36	; 0x24
   244c4:	add	r2, r2, #1
   244c8:	mvn	r3, #-2147483648	; 0x80000000
   244cc:	bl	2641c <__assert_fail@plt+0x14414>
   244d0:	mov	r6, r0
   244d4:	ldm	r7, {r0, r1}
   244d8:	str	r6, [r4]
   244dc:	stm	r6, {r0, r1}
   244e0:	b	243c0 <__assert_fail@plt+0x123b8>
   244e4:	bl	11fe4 <abort@plt>
   244e8:	andeq	ip, r3, r8, ror r2
   244ec:	muleq	r3, r0, r2
   244f0:	andeq	ip, r3, r4, lsl #18
   244f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   244f8:	sub	sp, sp, #44	; 0x2c
   244fc:	mov	sl, r0
   24500:	bl	11e34 <__errno_location@plt>
   24504:	ldr	r4, [pc, #348]	; 24668 <__assert_fail@plt+0x12660>
   24508:	ldr	r2, [r4, #4]
   2450c:	ldr	r5, [r4]
   24510:	cmp	r2, #0
   24514:	ldr	r3, [r0]
   24518:	mov	r8, r0
   2451c:	str	r3, [sp, #28]
   24520:	bgt	2457c <__assert_fail@plt+0x12574>
   24524:	add	r6, r4, #8
   24528:	cmp	r5, r6
   2452c:	str	r2, [sp, #36]	; 0x24
   24530:	beq	24638 <__assert_fail@plt+0x12630>
   24534:	mov	r3, #8
   24538:	mov	r0, r5
   2453c:	str	r3, [sp]
   24540:	rsb	r2, r2, #1
   24544:	mvn	r3, #-2147483648	; 0x80000000
   24548:	add	r1, sp, #36	; 0x24
   2454c:	bl	2641c <__assert_fail@plt+0x14414>
   24550:	mov	r5, r0
   24554:	str	r0, [r4]
   24558:	ldr	r0, [r4, #4]
   2455c:	ldr	r2, [sp, #36]	; 0x24
   24560:	mov	r1, #0
   24564:	sub	r2, r2, r0
   24568:	add	r0, r5, r0, lsl #3
   2456c:	lsl	r2, r2, #3
   24570:	bl	11e58 <memset@plt>
   24574:	ldr	r3, [sp, #36]	; 0x24
   24578:	str	r3, [r4, #4]
   2457c:	ldr	r7, [r4, #20]
   24580:	ldr	r9, [r5]
   24584:	ldr	r6, [r5, #4]
   24588:	ldr	r2, [r4, #56]	; 0x38
   2458c:	ldr	r3, [r4, #16]
   24590:	ldr	ip, [r4, #60]	; 0x3c
   24594:	ldr	fp, [pc, #208]	; 2466c <__assert_fail@plt+0x12664>
   24598:	orr	r7, r7, #1
   2459c:	str	r2, [sp, #12]
   245a0:	str	r3, [sp]
   245a4:	str	r7, [sp, #4]
   245a8:	mov	r1, r9
   245ac:	mov	r0, r6
   245b0:	str	ip, [sp, #16]
   245b4:	str	fp, [sp, #8]
   245b8:	mvn	r3, #0
   245bc:	mov	r2, sl
   245c0:	bl	207fc <__assert_fail@plt+0xe7f4>
   245c4:	cmp	r9, r0
   245c8:	bhi	24624 <__assert_fail@plt+0x1261c>
   245cc:	ldr	r3, [pc, #156]	; 24670 <__assert_fail@plt+0x12668>
   245d0:	add	r9, r0, #1
   245d4:	cmp	r6, r3
   245d8:	str	r9, [r5]
   245dc:	beq	245e8 <__assert_fail@plt+0x125e0>
   245e0:	mov	r0, r6
   245e4:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   245e8:	mov	r0, r9
   245ec:	bl	26200 <__assert_fail@plt+0x141f8>
   245f0:	ldr	ip, [r4, #60]	; 0x3c
   245f4:	ldr	r3, [r4, #16]
   245f8:	ldr	lr, [r4, #56]	; 0x38
   245fc:	mov	r2, sl
   24600:	mov	r1, r9
   24604:	str	r0, [r5, #4]
   24608:	str	r3, [sp]
   2460c:	stmib	sp, {r7, fp}
   24610:	str	ip, [sp, #16]
   24614:	str	lr, [sp, #12]
   24618:	mvn	r3, #0
   2461c:	mov	r6, r0
   24620:	bl	207fc <__assert_fail@plt+0xe7f4>
   24624:	ldr	r3, [sp, #28]
   24628:	mov	r0, r6
   2462c:	str	r3, [r8]
   24630:	add	sp, sp, #44	; 0x2c
   24634:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24638:	mov	r3, #8
   2463c:	str	r3, [sp]
   24640:	add	r1, sp, #36	; 0x24
   24644:	rsb	r2, r2, #1
   24648:	mvn	r3, #-2147483648	; 0x80000000
   2464c:	mov	r0, #0
   24650:	bl	2641c <__assert_fail@plt+0x14414>
   24654:	mov	r5, r0
   24658:	ldm	r6, {r0, r1}
   2465c:	str	r5, [r4]
   24660:	stm	r5, {r0, r1}
   24664:	b	24558 <__assert_fail@plt+0x12550>
   24668:	andeq	ip, r3, r8, ror r2
   2466c:	muleq	r3, r0, r2
   24670:	andeq	ip, r3, r4, lsl #18
   24674:	subs	r5, r0, #0
   24678:	push	{r7, lr}
   2467c:	beq	246cc <__assert_fail@plt+0x126c4>
   24680:	ldr	r3, [pc, #72]	; 246d0 <__assert_fail@plt+0x126c8>
   24684:	ldr	r6, [r3]
   24688:	bl	11e34 <__errno_location@plt>
   2468c:	mov	r2, #5
   24690:	ldr	r4, [r0]
   24694:	cmp	r4, #0
   24698:	moveq	r0, r4
   2469c:	ldreq	r1, [pc, #48]	; 246d4 <__assert_fail@plt+0x126cc>
   246a0:	ldrne	r1, [pc, #48]	; 246d8 <__assert_fail@plt+0x126d0>
   246a4:	movne	r0, #0
   246a8:	bl	11c0c <dcgettext@plt>
   246ac:	mov	r7, r0
   246b0:	mov	r0, r5
   246b4:	bl	244f4 <__assert_fail@plt+0x124ec>
   246b8:	mov	r2, r7
   246bc:	mov	r1, r4
   246c0:	mov	r3, r0
   246c4:	mov	r0, r6
   246c8:	bl	11d50 <error@plt>
   246cc:	bl	11fe4 <abort@plt>
   246d0:	andeq	ip, r3, r4, ror r2
   246d4:	andeq	fp, r2, r0, ror #4
   246d8:	andeq	fp, r2, r0, ror r2
   246dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   246e0:	subs	r5, r1, #0
   246e4:	beq	24744 <__assert_fail@plt+0x1273c>
   246e8:	cmp	r0, #0
   246ec:	mov	r4, r0
   246f0:	beq	24764 <__assert_fail@plt+0x1275c>
   246f4:	ldr	r1, [pc, #300]	; 24828 <__assert_fail@plt+0x12820>
   246f8:	bl	27d94 <__assert_fail@plt+0x15d8c>
   246fc:	subs	r6, r0, #0
   24700:	beq	24810 <__assert_fail@plt+0x12808>
   24704:	ldr	r0, [pc, #288]	; 2482c <__assert_fail@plt+0x12824>
   24708:	bl	261d8 <__assert_fail@plt+0x141d0>
   2470c:	ldr	r2, [pc, #284]	; 24830 <__assert_fail@plt+0x12828>
   24710:	cmp	r5, #2048	; 0x800
   24714:	movcc	r3, r5
   24718:	movcs	r3, #2048	; 0x800
   2471c:	mov	r7, r0
   24720:	str	r6, [r0]
   24724:	str	r4, [r0, #8]
   24728:	add	r1, r7, #12
   2472c:	str	r2, [r7, #4]
   24730:	mov	r0, r6
   24734:	mov	r2, #0
   24738:	bl	11e4c <setvbuf@plt>
   2473c:	mov	r0, r7
   24740:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24744:	ldr	r0, [pc, #224]	; 2482c <__assert_fail@plt+0x12824>
   24748:	bl	261d8 <__assert_fail@plt+0x141d0>
   2474c:	ldr	r3, [pc, #220]	; 24830 <__assert_fail@plt+0x12828>
   24750:	mov	r7, r0
   24754:	str	r5, [r0]
   24758:	stmib	r0, {r3, r5}
   2475c:	mov	r0, r7
   24760:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24764:	ldr	r0, [pc, #192]	; 2482c <__assert_fail@plt+0x12824>
   24768:	bl	261d8 <__assert_fail@plt+0x141d0>
   2476c:	ldr	r3, [pc, #188]	; 24830 <__assert_fail@plt+0x12828>
   24770:	add	r8, r0, #16
   24774:	cmp	r5, #1024	; 0x400
   24778:	addls	r5, r8, r5
   2477c:	addhi	r5, r8, #1024	; 0x400
   24780:	cmp	r8, r5
   24784:	mov	r7, r0
   24788:	str	r4, [r0]
   2478c:	str	r4, [r0, #8]
   24790:	str	r4, [r0, #12]
   24794:	str	r3, [r0, #4]
   24798:	bcs	24818 <__assert_fail@plt+0x12810>
   2479c:	mov	r6, r4
   247a0:	mov	r4, r8
   247a4:	b	247b0 <__assert_fail@plt+0x127a8>
   247a8:	cmp	r5, r4
   247ac:	bls	24818 <__assert_fail@plt+0x12810>
   247b0:	sub	r1, r5, r4
   247b4:	mov	r0, r4
   247b8:	mov	r2, r6
   247bc:	bl	11fb4 <getrandom@plt>
   247c0:	cmp	r0, #0
   247c4:	addge	r4, r4, r0
   247c8:	bge	247a8 <__assert_fail@plt+0x127a0>
   247cc:	bl	11e34 <__errno_location@plt>
   247d0:	ldr	sl, [r0]
   247d4:	mov	r9, r0
   247d8:	cmp	sl, #4
   247dc:	beq	247a8 <__assert_fail@plt+0x127a0>
   247e0:	ldr	r2, [pc, #68]	; 2482c <__assert_fail@plt+0x12824>
   247e4:	ldr	r4, [r7]
   247e8:	mov	r1, r2
   247ec:	mov	r0, r7
   247f0:	bl	11f0c <__explicit_bzero_chk@plt>
   247f4:	mov	r0, r7
   247f8:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   247fc:	cmp	r4, #0
   24800:	beq	2480c <__assert_fail@plt+0x12804>
   24804:	mov	r0, r4
   24808:	bl	1d95c <__assert_fail@plt+0xb954>
   2480c:	str	sl, [r9]
   24810:	mov	r7, #0
   24814:	b	2473c <__assert_fail@plt+0x12734>
   24818:	mov	r0, r8
   2481c:	bl	24bf8 <__assert_fail@plt+0x12bf0>
   24820:	mov	r0, r7
   24824:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24828:	andeq	fp, r2, r0, lsl #5
   2482c:	andeq	r0, r0, ip, lsl r8
   24830:	andeq	r4, r2, r4, ror r6
   24834:	str	r1, [r0, #4]
   24838:	bx	lr
   2483c:	str	r1, [r0, #8]
   24840:	bx	lr
   24844:	ldr	r3, [r0]
   24848:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2484c:	sub	sp, sp, #8
   24850:	cmp	r3, #0
   24854:	mov	r6, r0
   24858:	mov	r5, r1
   2485c:	mov	r4, r2
   24860:	str	r3, [sp, #4]
   24864:	beq	248c8 <__assert_fail@plt+0x128c0>
   24868:	bl	11e34 <__errno_location@plt>
   2486c:	mov	r8, #1
   24870:	ldr	r3, [sp, #4]
   24874:	mov	r7, r0
   24878:	b	248a0 <__assert_fail@plt+0x12898>
   2487c:	ldr	r3, [r6]
   24880:	ldr	r1, [r6, #4]
   24884:	ldr	r0, [r6, #8]
   24888:	ldr	r3, [r3]
   2488c:	ands	r3, r3, #32
   24890:	movne	r3, r2
   24894:	str	r3, [r7]
   24898:	blx	r1
   2489c:	ldr	r3, [r6]
   248a0:	mov	r2, r4
   248a4:	mov	r0, r5
   248a8:	mov	r1, r8
   248ac:	bl	11fa8 <fread_unlocked@plt>
   248b0:	ldr	r2, [r7]
   248b4:	subs	r4, r4, r0
   248b8:	add	r5, r5, r0
   248bc:	bne	2487c <__assert_fail@plt+0x12874>
   248c0:	add	sp, sp, #8
   248c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   248c8:	ldr	r7, [r0, #12]
   248cc:	add	r9, r0, #12
   248d0:	cmp	r2, r7
   248d4:	add	r9, r9, #1040	; 0x410
   248d8:	addhi	r8, r0, #16
   248dc:	movhi	sl, #1024	; 0x400
   248e0:	bls	24990 <__assert_fail@plt+0x12988>
   248e4:	rsb	r1, r7, #1024	; 0x400
   248e8:	mov	r0, r5
   248ec:	add	r1, r9, r1
   248f0:	mov	r2, r7
   248f4:	add	r5, r5, r7
   248f8:	bl	11b7c <memcpy@plt>
   248fc:	tst	r5, #3
   24900:	sub	r4, r4, r7
   24904:	bne	24974 <__assert_fail@plt+0x1296c>
   24908:	ldr	r7, [pc, #136]	; 24998 <__assert_fail@plt+0x12990>
   2490c:	cmp	r4, r7
   24910:	bhi	24920 <__assert_fail@plt+0x12918>
   24914:	b	24944 <__assert_fail@plt+0x1293c>
   24918:	cmp	r4, r7
   2491c:	bls	24944 <__assert_fail@plt+0x1293c>
   24920:	mov	r1, r5
   24924:	mov	r0, r8
   24928:	bl	249d4 <__assert_fail@plt+0x129cc>
   2492c:	subs	r4, r4, #1024	; 0x400
   24930:	add	r5, r5, #1024	; 0x400
   24934:	bne	24918 <__assert_fail@plt+0x12910>
   24938:	str	r4, [r6, #12]
   2493c:	add	sp, sp, #8
   24940:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24944:	mov	r0, r8
   24948:	mov	r1, r9
   2494c:	bl	249d4 <__assert_fail@plt+0x129cc>
   24950:	mov	r1, #0
   24954:	mov	r7, #1024	; 0x400
   24958:	mov	r2, r4
   2495c:	add	r1, r9, r1
   24960:	mov	r0, r5
   24964:	sub	r4, r7, r4
   24968:	bl	11b7c <memcpy@plt>
   2496c:	str	r4, [r6, #12]
   24970:	b	248c0 <__assert_fail@plt+0x128b8>
   24974:	mov	r1, r9
   24978:	mov	r0, r8
   2497c:	bl	249d4 <__assert_fail@plt+0x129cc>
   24980:	cmp	r4, #1024	; 0x400
   24984:	mov	r7, sl
   24988:	bhi	248e4 <__assert_fail@plt+0x128dc>
   2498c:	b	24950 <__assert_fail@plt+0x12948>
   24990:	rsb	r1, r7, #1024	; 0x400
   24994:	b	24958 <__assert_fail@plt+0x12950>
   24998:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2499c:	push	{r4, r5, r6, lr}
   249a0:	mvn	r2, #0
   249a4:	ldr	r5, [r0]
   249a8:	mov	r4, r0
   249ac:	ldr	r1, [pc, #28]	; 249d0 <__assert_fail@plt+0x129c8>
   249b0:	bl	11f0c <__explicit_bzero_chk@plt>
   249b4:	mov	r0, r4
   249b8:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   249bc:	subs	r0, r5, #0
   249c0:	beq	249cc <__assert_fail@plt+0x129c4>
   249c4:	pop	{r4, r5, r6, lr}
   249c8:	b	1d95c <__assert_fail@plt+0xb954>
   249cc:	pop	{r4, r5, r6, pc}
   249d0:	andeq	r0, r0, ip, lsl r8
   249d4:	ldr	r2, [r0, #1032]	; 0x408
   249d8:	push	{r4, r5, r6, r7, r8, lr}
   249dc:	add	r2, r2, #1
   249e0:	ldr	r5, [r0, #1028]	; 0x404
   249e4:	ldr	r3, [r0, #1024]	; 0x400
   249e8:	add	r1, r1, #16
   249ec:	add	r5, r5, r2
   249f0:	add	r4, r0, #512	; 0x200
   249f4:	add	ip, r0, #16
   249f8:	str	r2, [r0, #1032]	; 0x408
   249fc:	ldr	lr, [ip, #-16]
   24a00:	ldr	r6, [ip, #496]	; 0x1f0
   24a04:	and	r2, lr, #1020	; 0x3fc
   24a08:	eor	r3, r3, r3, lsl #13
   24a0c:	ldr	r2, [r0, r2]
   24a10:	add	r3, r3, r6
   24a14:	add	r2, r3, r2
   24a18:	add	r5, r2, r5
   24a1c:	str	r5, [ip, #-16]
   24a20:	lsr	r5, r5, #8
   24a24:	and	r5, r5, #1020	; 0x3fc
   24a28:	eor	r3, r3, r3, lsr #6
   24a2c:	ldr	r6, [r0, r5]
   24a30:	cmp	r4, ip
   24a34:	add	r6, lr, r6
   24a38:	str	r6, [r1, #-16]
   24a3c:	ldr	r5, [ip, #-12]
   24a40:	ldr	r7, [ip, #500]	; 0x1f4
   24a44:	and	lr, r5, #1020	; 0x3fc
   24a48:	add	r3, r3, r7
   24a4c:	ldr	r7, [r0, lr]
   24a50:	eor	lr, r3, r3, lsl #2
   24a54:	add	r3, r3, r7
   24a58:	add	r3, r3, r6
   24a5c:	str	r3, [ip, #-12]
   24a60:	lsr	r3, r3, #8
   24a64:	and	r3, r3, #1020	; 0x3fc
   24a68:	mov	r2, ip
   24a6c:	ldr	r3, [r0, r3]
   24a70:	add	ip, ip, #16
   24a74:	add	r5, r5, r3
   24a78:	str	r5, [r1, #-12]
   24a7c:	ldr	r7, [ip, #-24]	; 0xffffffe8
   24a80:	ldr	r8, [ip, #488]	; 0x1e8
   24a84:	and	r3, r7, #1020	; 0x3fc
   24a88:	add	lr, lr, r8
   24a8c:	ldr	r8, [r0, r3]
   24a90:	eor	r3, lr, lr, lsr #16
   24a94:	add	lr, lr, r8
   24a98:	add	lr, lr, r5
   24a9c:	str	lr, [ip, #-24]	; 0xffffffe8
   24aa0:	lsr	lr, lr, #8
   24aa4:	and	lr, lr, #1020	; 0x3fc
   24aa8:	add	r1, r1, #16
   24aac:	ldr	lr, [r0, lr]
   24ab0:	add	r7, r7, lr
   24ab4:	str	r7, [r1, #-24]	; 0xffffffe8
   24ab8:	ldr	r5, [ip, #-20]	; 0xffffffec
   24abc:	ldr	r8, [ip, #492]	; 0x1ec
   24ac0:	and	lr, r5, #1020	; 0x3fc
   24ac4:	add	r3, r3, r8
   24ac8:	ldr	lr, [r0, lr]
   24acc:	add	lr, r3, lr
   24ad0:	add	lr, lr, r7
   24ad4:	str	lr, [ip, #-20]	; 0xffffffec
   24ad8:	lsr	lr, lr, #8
   24adc:	and	lr, lr, #1020	; 0x3fc
   24ae0:	ldr	lr, [r0, lr]
   24ae4:	add	r5, r5, lr
   24ae8:	str	r5, [r1, #-20]	; 0xffffffec
   24aec:	bhi	249fc <__assert_fail@plt+0x129f4>
   24af0:	mov	ip, r1
   24af4:	add	r2, r2, #16
   24af8:	add	lr, r0, #1024	; 0x400
   24afc:	ldr	r4, [r2, #-16]
   24b00:	ldr	r6, [r2, #-528]	; 0xfffffdf0
   24b04:	and	r1, r4, #1020	; 0x3fc
   24b08:	eor	r3, r3, r3, lsl #13
   24b0c:	ldr	r1, [r0, r1]
   24b10:	add	r3, r3, r6
   24b14:	add	r1, r3, r1
   24b18:	add	r5, r1, r5
   24b1c:	str	r5, [r2, #-16]
   24b20:	lsr	r5, r5, #8
   24b24:	and	r5, r5, #1020	; 0x3fc
   24b28:	eor	r3, r3, r3, lsr #6
   24b2c:	ldr	r1, [r0, r5]
   24b30:	cmp	r2, lr
   24b34:	add	r4, r4, r1
   24b38:	str	r4, [ip, #-16]
   24b3c:	ldr	r5, [r2, #-12]
   24b40:	ldr	r7, [r2, #-524]	; 0xfffffdf4
   24b44:	and	r1, r5, #1020	; 0x3fc
   24b48:	add	r3, r3, r7
   24b4c:	ldr	r7, [r0, r1]
   24b50:	eor	r1, r3, r3, lsl #2
   24b54:	add	r3, r3, r7
   24b58:	add	r3, r3, r4
   24b5c:	str	r3, [r2, #-12]
   24b60:	lsr	r3, r3, #8
   24b64:	and	r3, r3, #1020	; 0x3fc
   24b68:	add	r2, r2, #16
   24b6c:	ldr	r3, [r0, r3]
   24b70:	add	ip, ip, #16
   24b74:	add	r5, r5, r3
   24b78:	str	r5, [ip, #-28]	; 0xffffffe4
   24b7c:	ldr	r4, [r2, #-24]	; 0xffffffe8
   24b80:	ldr	r6, [r2, #-536]	; 0xfffffde8
   24b84:	and	r3, r4, #1020	; 0x3fc
   24b88:	add	r1, r1, r6
   24b8c:	ldr	r6, [r0, r3]
   24b90:	eor	r3, r1, r1, lsr #16
   24b94:	add	r1, r1, r6
   24b98:	add	r1, r1, r5
   24b9c:	str	r1, [r2, #-24]	; 0xffffffe8
   24ba0:	lsr	r1, r1, #8
   24ba4:	and	r1, r1, #1020	; 0x3fc
   24ba8:	ldr	r1, [r0, r1]
   24bac:	add	r4, r4, r1
   24bb0:	str	r4, [ip, #-24]	; 0xffffffe8
   24bb4:	ldr	r5, [r2, #-20]	; 0xffffffec
   24bb8:	ldr	r6, [r2, #-532]	; 0xfffffdec
   24bbc:	and	r1, r5, #1020	; 0x3fc
   24bc0:	add	r3, r3, r6
   24bc4:	ldr	r1, [r0, r1]
   24bc8:	add	r1, r3, r1
   24bcc:	add	r1, r1, r4
   24bd0:	str	r1, [r2, #-20]	; 0xffffffec
   24bd4:	lsr	r1, r1, #8
   24bd8:	and	r1, r1, #1020	; 0x3fc
   24bdc:	ldr	r1, [r0, r1]
   24be0:	add	r5, r5, r1
   24be4:	str	r5, [ip, #-20]	; 0xffffffec
   24be8:	bcc	24afc <__assert_fail@plt+0x12af4>
   24bec:	str	r3, [r0, #1024]	; 0x400
   24bf0:	str	r5, [r0, #1028]	; 0x404
   24bf4:	pop	{r4, r5, r6, r7, r8, pc}
   24bf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24bfc:	mov	r2, r0
   24c00:	ldr	r8, [pc, #452]	; 24dcc <__assert_fail@plt+0x12dc4>
   24c04:	ldr	r7, [pc, #452]	; 24dd0 <__assert_fail@plt+0x12dc8>
   24c08:	ldr	r6, [pc, #452]	; 24dd4 <__assert_fail@plt+0x12dcc>
   24c0c:	ldr	r4, [pc, #452]	; 24dd8 <__assert_fail@plt+0x12dd0>
   24c10:	ldr	lr, [pc, #452]	; 24ddc <__assert_fail@plt+0x12dd4>
   24c14:	ldr	ip, [pc, #452]	; 24de0 <__assert_fail@plt+0x12dd8>
   24c18:	ldr	r1, [pc, #452]	; 24de4 <__assert_fail@plt+0x12ddc>
   24c1c:	ldr	r9, [pc, #452]	; 24de8 <__assert_fail@plt+0x12de0>
   24c20:	add	fp, r0, #1024	; 0x400
   24c24:	mov	r3, r0
   24c28:	ldm	r3, {r5, sl}
   24c2c:	add	r3, r3, #32
   24c30:	add	r1, r1, sl
   24c34:	add	r9, r9, r5
   24c38:	ldr	sl, [r3, #-24]	; 0xffffffe8
   24c3c:	ldr	r5, [r3, #-20]	; 0xffffffec
   24c40:	eor	r9, r9, r1, lsl #11
   24c44:	add	ip, ip, sl
   24c48:	add	r5, r9, r5
   24c4c:	ldr	sl, [r3, #-16]
   24c50:	add	lr, r5, lr
   24c54:	add	r1, r1, ip
   24c58:	ldr	r5, [r3, #-12]
   24c5c:	eor	r1, r1, ip, lsr #2
   24c60:	add	ip, ip, lr
   24c64:	add	sl, r1, sl
   24c68:	eor	ip, ip, lr, lsl #8
   24c6c:	add	r4, sl, r4
   24c70:	add	r5, ip, r5
   24c74:	add	r6, r5, r6
   24c78:	add	lr, lr, r4
   24c7c:	ldr	r5, [r3, #-8]
   24c80:	eor	lr, lr, r4, lsr #16
   24c84:	ldr	sl, [r3, #-4]
   24c88:	add	r4, r4, r6
   24c8c:	add	r5, lr, r5
   24c90:	eor	r4, r4, r6, lsl #10
   24c94:	add	r7, r5, r7
   24c98:	add	r6, r6, r7
   24c9c:	add	sl, r4, sl
   24ca0:	add	r8, sl, r8
   24ca4:	eor	r6, r6, r7, lsr #4
   24ca8:	add	r9, r9, r6
   24cac:	add	r7, r7, r8
   24cb0:	eor	r7, r7, r8, lsl #8
   24cb4:	add	r8, r8, r9
   24cb8:	eor	r8, r8, r9, lsr #9
   24cbc:	add	r1, r1, r7
   24cc0:	add	r9, r9, r1
   24cc4:	add	ip, ip, r8
   24cc8:	str	r4, [r3, #-16]
   24ccc:	str	lr, [r3, #-20]	; 0xffffffec
   24cd0:	str	r1, [r3, #-28]	; 0xffffffe4
   24cd4:	str	r9, [r3, #-32]	; 0xffffffe0
   24cd8:	str	ip, [r3, #-24]	; 0xffffffe8
   24cdc:	str	r7, [r3, #-8]
   24ce0:	str	r8, [r3, #-4]
   24ce4:	str	r6, [r3, #-12]
   24ce8:	cmp	fp, r3
   24cec:	bne	24c28 <__assert_fail@plt+0x12c20>
   24cf0:	ldm	r2, {r5, sl}
   24cf4:	add	r2, r2, #32
   24cf8:	add	r1, r1, sl
   24cfc:	ldr	sl, [r2, #-24]	; 0xffffffe8
   24d00:	add	r9, r9, r5
   24d04:	ldr	r5, [r2, #-20]	; 0xffffffec
   24d08:	add	ip, ip, sl
   24d0c:	eor	r9, r9, r1, lsl #11
   24d10:	ldr	sl, [r2, #-16]
   24d14:	add	r5, r9, r5
   24d18:	add	r1, r1, ip
   24d1c:	add	lr, r5, lr
   24d20:	eor	r1, r1, ip, lsr #2
   24d24:	ldr	r5, [r2, #-12]
   24d28:	add	sl, r1, sl
   24d2c:	add	ip, ip, lr
   24d30:	add	r4, sl, r4
   24d34:	eor	ip, ip, lr, lsl #8
   24d38:	ldr	sl, [r2, #-8]
   24d3c:	add	r5, ip, r5
   24d40:	add	lr, lr, r4
   24d44:	add	r6, r5, r6
   24d48:	eor	lr, lr, r4, lsr #16
   24d4c:	ldr	r5, [r2, #-4]
   24d50:	add	r4, r4, r6
   24d54:	add	sl, lr, sl
   24d58:	eor	r4, r4, r6, lsl #10
   24d5c:	add	r7, sl, r7
   24d60:	add	r6, r6, r7
   24d64:	add	r5, r4, r5
   24d68:	add	r8, r5, r8
   24d6c:	eor	r6, r6, r7, lsr #4
   24d70:	add	r9, r9, r6
   24d74:	add	r7, r7, r8
   24d78:	eor	r7, r7, r8, lsl #8
   24d7c:	add	r8, r8, r9
   24d80:	eor	r8, r8, r9, lsr #9
   24d84:	add	r1, r1, r7
   24d88:	add	r9, r9, r1
   24d8c:	add	ip, ip, r8
   24d90:	str	r4, [r2, #-16]
   24d94:	str	lr, [r2, #-20]	; 0xffffffec
   24d98:	str	r1, [r2, #-28]	; 0xffffffe4
   24d9c:	str	r9, [r2, #-32]	; 0xffffffe0
   24da0:	str	ip, [r2, #-24]	; 0xffffffe8
   24da4:	str	r7, [r2, #-8]
   24da8:	str	r8, [r2, #-4]
   24dac:	str	r6, [r2, #-12]
   24db0:	cmp	r3, r2
   24db4:	bne	24cf0 <__assert_fail@plt+0x12ce8>
   24db8:	mov	r3, #0
   24dbc:	str	r3, [r0, #1032]	; 0x408
   24dc0:	str	r3, [r0, #1028]	; 0x404
   24dc4:	str	r3, [r0, #1024]	; 0x400
   24dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24dcc:	rsbcc	r9, r0, r9, lsl r1
   24dd0:	strbtgt	lr, [pc], #2587	; 24dd8 <__assert_fail@plt+0x12dd0>
   24dd4:	ldrge	r3, [sl, #-3145]	; 0xfffff3b7
   24dd8:	stmdble	sl!, {r3, r4, r5, r6, r9, fp, lr}
   24ddc:	svceq	0x00421ad8
   24de0:	tstgt	r6, #1200	; 0x4b0
   24de4:	ldrbls	r0, [r9, #89]	; 0x59
   24de8:	cmnne	r7, #360	; 0x168
   24dec:	push	{r4, r5, r6, lr}
   24df0:	mov	r4, r0
   24df4:	ldr	r3, [r0, #24]
   24df8:	ldr	r6, [r0, #20]
   24dfc:	cmp	r3, r6
   24e00:	sub	r5, r3, r6
   24e04:	ldrbeq	r2, [r0, #52]	; 0x34
   24e08:	sub	r5, r5, #1
   24e0c:	orreq	r2, r2, #2
   24e10:	strbeq	r2, [r0, #52]	; 0x34
   24e14:	ldr	r0, [r0, #36]	; 0x24
   24e18:	ldr	r1, [r4, #28]
   24e1c:	ldr	r2, [r4, #16]
   24e20:	add	r3, r3, r0
   24e24:	bic	r3, r3, r0
   24e28:	sub	r0, r3, r2
   24e2c:	sub	r2, r1, r2
   24e30:	cmp	r0, r2
   24e34:	str	r3, [r4, #24]
   24e38:	ldr	r2, [r4, #72]	; 0x48
   24e3c:	movhi	r3, r1
   24e40:	strhi	r1, [r4, #24]
   24e44:	ldr	r1, [r4, #68]	; 0x44
   24e48:	str	r3, [r4, #20]
   24e4c:	sub	r3, r2, r1
   24e50:	cmp	r3, #3
   24e54:	bls	24eac <__assert_fail@plt+0x12ea4>
   24e58:	str	r6, [r1]
   24e5c:	ldr	r1, [r4, #112]	; 0x70
   24e60:	ldr	r2, [r4, #116]	; 0x74
   24e64:	ldr	r3, [r4, #68]	; 0x44
   24e68:	sub	r2, r2, r1
   24e6c:	add	r3, r3, #4
   24e70:	cmp	r2, #3
   24e74:	str	r3, [r4, #68]	; 0x44
   24e78:	bhi	24e8c <__assert_fail@plt+0x12e84>
   24e7c:	mov	r1, #4
   24e80:	add	r0, r4, #100	; 0x64
   24e84:	bl	28264 <_obstack_newchunk@@Base>
   24e88:	ldr	r1, [r4, #112]	; 0x70
   24e8c:	str	r5, [r1]
   24e90:	ldr	r2, [r4, #112]	; 0x70
   24e94:	ldr	r3, [r4]
   24e98:	add	r2, r2, #4
   24e9c:	add	r3, r3, #1
   24ea0:	str	r2, [r4, #112]	; 0x70
   24ea4:	str	r3, [r4]
   24ea8:	pop	{r4, r5, r6, pc}
   24eac:	mov	r1, #4
   24eb0:	add	r0, r4, #56	; 0x38
   24eb4:	bl	28264 <_obstack_newchunk@@Base>
   24eb8:	ldr	r1, [r4, #68]	; 0x44
   24ebc:	b	24e58 <__assert_fail@plt+0x12e50>
   24ec0:	push	{r4, r5, r6, r7, lr}
   24ec4:	sub	sp, sp, #12
   24ec8:	ldr	r6, [pc, #100]	; 24f34 <__assert_fail@plt+0x12f2c>
   24ecc:	ldr	r7, [pc, #100]	; 24f38 <__assert_fail@plt+0x12f30>
   24ed0:	mov	r4, #0
   24ed4:	mov	r5, r0
   24ed8:	str	r4, [r0]
   24edc:	str	r4, [r0, #4]
   24ee0:	str	r4, [r0, #8]
   24ee4:	mov	r2, r4
   24ee8:	mov	r1, r4
   24eec:	mov	r3, r6
   24ef0:	str	r7, [sp]
   24ef4:	add	r0, r0, #12
   24ef8:	bl	280d0 <_obstack_begin@@Base>
   24efc:	mov	r3, r6
   24f00:	mov	r2, r4
   24f04:	mov	r1, r4
   24f08:	str	r7, [sp]
   24f0c:	add	r0, r5, #56	; 0x38
   24f10:	bl	280d0 <_obstack_begin@@Base>
   24f14:	str	r7, [sp]
   24f18:	mov	r3, r6
   24f1c:	add	r0, r5, #100	; 0x64
   24f20:	mov	r2, r4
   24f24:	mov	r1, r4
   24f28:	bl	280d0 <_obstack_begin@@Base>
   24f2c:	add	sp, sp, #12
   24f30:	pop	{r4, r5, r6, r7, pc}
   24f34:	muleq	r2, ip, r9
   24f38:	strheq	lr, [r1], -r0
   24f3c:	push	{r4, lr}
   24f40:	mov	r1, #0
   24f44:	mov	r4, r0
   24f48:	add	r0, r0, #12
   24f4c:	bl	283f4 <_obstack_free@@Base>
   24f50:	add	r0, r4, #56	; 0x38
   24f54:	mov	r1, #0
   24f58:	bl	283f4 <_obstack_free@@Base>
   24f5c:	add	r0, r4, #100	; 0x64
   24f60:	mov	r1, #0
   24f64:	pop	{r4, lr}
   24f68:	b	283f4 <_obstack_free@@Base>
   24f6c:	push	{r4, r5, r6, r7, r8, lr}
   24f70:	mov	r4, r1
   24f74:	mov	r6, r0
   24f78:	add	r8, r1, #12
   24f7c:	mov	r7, #1
   24f80:	b	24f98 <__assert_fail@plt+0x12f90>
   24f84:	add	r2, r3, #1
   24f88:	cmp	r5, #0
   24f8c:	str	r2, [r4, #24]
   24f90:	strb	r5, [r3]
   24f94:	beq	250d0 <__assert_fail@plt+0x130c8>
   24f98:	mov	r0, r6
   24f9c:	bl	11e64 <fgetc@plt>
   24fa0:	ldr	r3, [r4, #24]
   24fa4:	cmn	r0, #1
   24fa8:	mov	r5, r0
   24fac:	beq	24fd0 <__assert_fail@plt+0x12fc8>
   24fb0:	ldr	r2, [r4, #28]
   24fb4:	cmp	r2, r3
   24fb8:	bne	24f84 <__assert_fail@plt+0x12f7c>
   24fbc:	mov	r1, r7
   24fc0:	mov	r0, r8
   24fc4:	bl	28264 <_obstack_newchunk@@Base>
   24fc8:	ldr	r3, [r4, #24]
   24fcc:	b	24f84 <__assert_fail@plt+0x12f7c>
   24fd0:	ldr	r2, [r4, #20]
   24fd4:	cmp	r2, r3
   24fd8:	beq	25000 <__assert_fail@plt+0x12ff8>
   24fdc:	ldr	r2, [r4, #28]
   24fe0:	cmp	r2, r3
   24fe4:	beq	250f0 <__assert_fail@plt+0x130e8>
   24fe8:	add	r1, r3, #1
   24fec:	mov	r2, #0
   24ff0:	str	r1, [r4, #24]
   24ff4:	mov	r0, r4
   24ff8:	strb	r2, [r3]
   24ffc:	bl	24dec <__assert_fail@plt+0x12de4>
   25000:	ldr	r2, [r4, #68]	; 0x44
   25004:	ldr	r3, [r4, #72]	; 0x48
   25008:	sub	r3, r3, r2
   2500c:	cmp	r3, #3
   25010:	bls	250dc <__assert_fail@plt+0x130d4>
   25014:	mov	r3, #0
   25018:	str	r3, [r2]
   2501c:	ldr	r3, [r4, #68]	; 0x44
   25020:	ldr	r1, [r4, #64]	; 0x40
   25024:	add	r3, r3, #4
   25028:	cmp	r3, r1
   2502c:	ldr	r0, [r4, #80]	; 0x50
   25030:	ldrbeq	r2, [r4, #96]	; 0x60
   25034:	ldr	ip, [r4, #72]	; 0x48
   25038:	str	r3, [r4, #68]	; 0x44
   2503c:	orreq	r2, r2, #2
   25040:	strbeq	r2, [r4, #96]	; 0x60
   25044:	add	r3, r3, r0
   25048:	ldr	r2, [r4, #60]	; 0x3c
   2504c:	bic	r3, r3, r0
   25050:	sub	r0, r3, r2
   25054:	sub	r2, ip, r2
   25058:	cmp	r0, r2
   2505c:	ldr	r2, [r4, #112]	; 0x70
   25060:	ldr	r0, [r4, #108]	; 0x6c
   25064:	str	r3, [r4, #68]	; 0x44
   25068:	movhi	r3, ip
   2506c:	strhi	ip, [r4, #68]	; 0x44
   25070:	cmp	r0, r2
   25074:	str	r3, [r4, #64]	; 0x40
   25078:	ldrbeq	r3, [r4, #140]	; 0x8c
   2507c:	ldr	ip, [r4, #124]	; 0x7c
   25080:	str	r1, [r4, #4]
   25084:	orreq	r3, r3, #2
   25088:	strbeq	r3, [r4, #140]	; 0x8c
   2508c:	ldr	r1, [r4, #104]	; 0x68
   25090:	add	r3, r2, ip
   25094:	ldr	r2, [r4, #116]	; 0x74
   25098:	bic	r3, r3, ip
   2509c:	sub	ip, r3, r1
   250a0:	sub	r1, r2, r1
   250a4:	cmp	ip, r1
   250a8:	str	r3, [r4, #112]	; 0x70
   250ac:	movhi	r3, r2
   250b0:	str	r0, [r4, #8]
   250b4:	strhi	r2, [r4, #112]	; 0x70
   250b8:	str	r3, [r4, #108]	; 0x6c
   250bc:	mov	r0, r6
   250c0:	bl	11b64 <ferror@plt>
   250c4:	clz	r0, r0
   250c8:	lsr	r0, r0, #5
   250cc:	pop	{r4, r5, r6, r7, r8, pc}
   250d0:	mov	r0, r4
   250d4:	bl	24dec <__assert_fail@plt+0x12de4>
   250d8:	b	24f98 <__assert_fail@plt+0x12f90>
   250dc:	mov	r1, #4
   250e0:	add	r0, r4, #56	; 0x38
   250e4:	bl	28264 <_obstack_newchunk@@Base>
   250e8:	ldr	r2, [r4, #68]	; 0x44
   250ec:	b	25014 <__assert_fail@plt+0x1300c>
   250f0:	mov	r1, #1
   250f4:	add	r0, r4, #12
   250f8:	bl	28264 <_obstack_newchunk@@Base>
   250fc:	ldr	r3, [r4, #24]
   25100:	b	24fe8 <__assert_fail@plt+0x12fe0>
   25104:	push	{r4, r5, r6, lr}
   25108:	mov	r5, r1
   2510c:	mov	r1, #0
   25110:	mov	r4, r2
   25114:	bl	11ee8 <setlocale@plt>
   25118:	subs	r6, r0, #0
   2511c:	beq	25178 <__assert_fail@plt+0x13170>
   25120:	bl	11e10 <strlen@plt>
   25124:	cmp	r4, r0
   25128:	bhi	25160 <__assert_fail@plt+0x13158>
   2512c:	cmp	r4, #0
   25130:	bne	2513c <__assert_fail@plt+0x13134>
   25134:	mov	r0, #34	; 0x22
   25138:	pop	{r4, r5, r6, pc}
   2513c:	sub	r4, r4, #1
   25140:	mov	r1, r6
   25144:	mov	r2, r4
   25148:	mov	r0, r5
   2514c:	bl	11b7c <memcpy@plt>
   25150:	mov	r3, #0
   25154:	strb	r3, [r5, r4]
   25158:	mov	r0, #34	; 0x22
   2515c:	pop	{r4, r5, r6, pc}
   25160:	add	r2, r0, #1
   25164:	mov	r1, r6
   25168:	mov	r0, r5
   2516c:	bl	11b7c <memcpy@plt>
   25170:	mov	r0, #0
   25174:	pop	{r4, r5, r6, pc}
   25178:	cmp	r4, #0
   2517c:	beq	2518c <__assert_fail@plt+0x13184>
   25180:	strb	r6, [r5]
   25184:	mov	r0, #22
   25188:	pop	{r4, r5, r6, pc}
   2518c:	mov	r0, #22
   25190:	pop	{r4, r5, r6, pc}
   25194:	mov	r1, #0
   25198:	b	11ee8 <setlocale@plt>
   2519c:	push	{r4, lr}
   251a0:	bl	11d80 <mkstemp64@plt>
   251a4:	pop	{r4, lr}
   251a8:	b	25760 <__assert_fail@plt+0x13758>
   251ac:	push	{r4, lr}
   251b0:	mov	r4, r1
   251b4:	bl	11ccc <mkostemp64@plt>
   251b8:	mov	r1, r4
   251bc:	pop	{r4, lr}
   251c0:	b	27d40 <__assert_fail@plt+0x15d38>
   251c4:	push	{r4, r5, r6, lr}
   251c8:	ldrb	ip, [r0]
   251cc:	ldrb	r4, [r1]
   251d0:	cmp	ip, #45	; 0x2d
   251d4:	beq	25268 <__assert_fail@plt+0x13260>
   251d8:	cmp	r4, #45	; 0x2d
   251dc:	bne	251e8 <__assert_fail@plt+0x131e0>
   251e0:	b	252d4 <__assert_fail@plt+0x132cc>
   251e4:	ldrb	ip, [r0, #1]!
   251e8:	cmp	ip, #48	; 0x30
   251ec:	beq	251e4 <__assert_fail@plt+0x131dc>
   251f0:	cmp	r3, ip
   251f4:	mov	r5, ip
   251f8:	beq	251e4 <__assert_fail@plt+0x131dc>
   251fc:	cmp	r4, #48	; 0x30
   25200:	mov	lr, r4
   25204:	bne	25218 <__assert_fail@plt+0x13210>
   25208:	ldrb	r4, [r1, #1]!
   2520c:	cmp	r4, #48	; 0x30
   25210:	mov	lr, r4
   25214:	beq	25208 <__assert_fail@plt+0x13200>
   25218:	cmp	r3, r4
   2521c:	beq	25208 <__assert_fail@plt+0x13200>
   25220:	cmp	ip, lr
   25224:	bne	253d4 <__assert_fail@plt+0x133cc>
   25228:	sub	r6, ip, #48	; 0x30
   2522c:	cmp	r6, #9
   25230:	bhi	25454 <__assert_fail@plt+0x1344c>
   25234:	ldrb	ip, [r0, #1]!
   25238:	cmp	r3, ip
   2523c:	mov	r5, ip
   25240:	beq	25234 <__assert_fail@plt+0x1322c>
   25244:	ldrb	lr, [r1, #1]!
   25248:	cmp	r3, lr
   2524c:	mov	r4, lr
   25250:	bne	25220 <__assert_fail@plt+0x13218>
   25254:	ldrb	lr, [r1, #1]!
   25258:	cmp	r3, lr
   2525c:	mov	r4, lr
   25260:	beq	25244 <__assert_fail@plt+0x1323c>
   25264:	b	25220 <__assert_fail@plt+0x13218>
   25268:	ldrb	ip, [r0, #1]!
   2526c:	cmp	ip, #48	; 0x30
   25270:	beq	25268 <__assert_fail@plt+0x13260>
   25274:	cmp	r3, ip
   25278:	mov	r5, ip
   2527c:	beq	25268 <__assert_fail@plt+0x13260>
   25280:	cmp	r4, #45	; 0x2d
   25284:	beq	25308 <__assert_fail@plt+0x13300>
   25288:	cmp	r2, ip
   2528c:	beq	25368 <__assert_fail@plt+0x13360>
   25290:	sub	ip, ip, #48	; 0x30
   25294:	cmp	ip, #9
   25298:	bhi	252a4 <__assert_fail@plt+0x1329c>
   2529c:	b	2544c <__assert_fail@plt+0x13444>
   252a0:	ldrb	r4, [r1, #1]!
   252a4:	cmp	r4, #48	; 0x30
   252a8:	beq	252a0 <__assert_fail@plt+0x13298>
   252ac:	cmp	r3, r4
   252b0:	beq	252a0 <__assert_fail@plt+0x13298>
   252b4:	cmp	r2, r4
   252b8:	beq	25484 <__assert_fail@plt+0x1347c>
   252bc:	sub	r5, r4, #48	; 0x30
   252c0:	cmp	r5, #9
   252c4:	movhi	r5, #0
   252c8:	mvnls	r5, #0
   252cc:	mov	r0, r5
   252d0:	pop	{r4, r5, r6, pc}
   252d4:	ldrb	lr, [r1, #1]!
   252d8:	cmp	lr, #48	; 0x30
   252dc:	beq	252d4 <__assert_fail@plt+0x132cc>
   252e0:	cmp	r3, lr
   252e4:	beq	252d4 <__assert_fail@plt+0x132cc>
   252e8:	cmp	r2, lr
   252ec:	beq	25384 <__assert_fail@plt+0x1337c>
   252f0:	sub	lr, lr, #48	; 0x30
   252f4:	cmp	lr, #9
   252f8:	bhi	253a4 <__assert_fail@plt+0x1339c>
   252fc:	mov	r5, #1
   25300:	mov	r0, r5
   25304:	pop	{r4, r5, r6, pc}
   25308:	ldrb	r6, [r1, #1]!
   2530c:	cmp	r6, #48	; 0x30
   25310:	mov	r4, r6
   25314:	beq	25308 <__assert_fail@plt+0x13300>
   25318:	cmp	r3, r6
   2531c:	beq	25308 <__assert_fail@plt+0x13300>
   25320:	cmp	ip, r4
   25324:	bne	25578 <__assert_fail@plt+0x13570>
   25328:	sub	lr, ip, #48	; 0x30
   2532c:	cmp	lr, #9
   25330:	bhi	254fc <__assert_fail@plt+0x134f4>
   25334:	ldrb	ip, [r0, #1]!
   25338:	cmp	r3, ip
   2533c:	mov	r5, ip
   25340:	beq	25334 <__assert_fail@plt+0x1332c>
   25344:	ldrb	r4, [r1, #1]!
   25348:	cmp	r3, r4
   2534c:	mov	r6, r4
   25350:	bne	25320 <__assert_fail@plt+0x13318>
   25354:	ldrb	r4, [r1, #1]!
   25358:	cmp	r3, r4
   2535c:	mov	r6, r4
   25360:	beq	25344 <__assert_fail@plt+0x1333c>
   25364:	b	25320 <__assert_fail@plt+0x13318>
   25368:	ldrb	ip, [r0, #1]!
   2536c:	cmp	ip, #48	; 0x30
   25370:	bne	25290 <__assert_fail@plt+0x13288>
   25374:	ldrb	ip, [r0, #1]!
   25378:	cmp	ip, #48	; 0x30
   2537c:	beq	25368 <__assert_fail@plt+0x13360>
   25380:	b	25290 <__assert_fail@plt+0x13288>
   25384:	ldrb	lr, [r1, #1]!
   25388:	cmp	lr, #48	; 0x30
   2538c:	bne	252f0 <__assert_fail@plt+0x132e8>
   25390:	ldrb	lr, [r1, #1]!
   25394:	cmp	lr, #48	; 0x30
   25398:	beq	25384 <__assert_fail@plt+0x1337c>
   2539c:	b	252f0 <__assert_fail@plt+0x132e8>
   253a0:	ldrb	ip, [r0, #1]!
   253a4:	cmp	ip, #48	; 0x30
   253a8:	beq	253a0 <__assert_fail@plt+0x13398>
   253ac:	cmp	r3, ip
   253b0:	beq	253a0 <__assert_fail@plt+0x13398>
   253b4:	cmp	r2, ip
   253b8:	beq	254a0 <__assert_fail@plt+0x13498>
   253bc:	sub	r5, ip, #48	; 0x30
   253c0:	cmp	r5, #9
   253c4:	movhi	r5, #0
   253c8:	movls	r5, #1
   253cc:	mov	r0, r5
   253d0:	pop	{r4, r5, r6, pc}
   253d4:	cmp	r2, ip
   253d8:	subne	r6, ip, #48	; 0x30
   253dc:	beq	254bc <__assert_fail@plt+0x134b4>
   253e0:	cmp	r2, lr
   253e4:	beq	254d4 <__assert_fail@plt+0x134cc>
   253e8:	cmp	r6, #9
   253ec:	sub	r5, r5, lr
   253f0:	bhi	255d8 <__assert_fail@plt+0x135d0>
   253f4:	mov	ip, #0
   253f8:	ldrb	r2, [r0, #1]!
   253fc:	cmp	r3, r2
   25400:	beq	253f8 <__assert_fail@plt+0x133f0>
   25404:	sub	r2, r2, #48	; 0x30
   25408:	cmp	r2, #9
   2540c:	add	ip, ip, #1
   25410:	bls	253f8 <__assert_fail@plt+0x133f0>
   25414:	sub	r4, r4, #48	; 0x30
   25418:	cmp	r4, #9
   2541c:	bhi	255ec <__assert_fail@plt+0x135e4>
   25420:	mov	r0, #0
   25424:	ldrb	r2, [r1, #1]!
   25428:	cmp	r3, r2
   2542c:	beq	25424 <__assert_fail@plt+0x1341c>
   25430:	sub	r2, r2, #48	; 0x30
   25434:	cmp	r2, #9
   25438:	add	r0, r0, #1
   2543c:	bls	25424 <__assert_fail@plt+0x1341c>
   25440:	cmp	r0, ip
   25444:	beq	254e4 <__assert_fail@plt+0x134dc>
   25448:	bls	252fc <__assert_fail@plt+0x132f4>
   2544c:	mvn	r5, #0
   25450:	b	25300 <__assert_fail@plt+0x132f8>
   25454:	cmp	r2, ip
   25458:	beq	254f4 <__assert_fail@plt+0x134ec>
   2545c:	cmp	r2, lr
   25460:	mov	r4, ip
   25464:	bne	253e8 <__assert_fail@plt+0x133e0>
   25468:	uxtb	r2, r2
   2546c:	cmp	r2, ip
   25470:	beq	25614 <__assert_fail@plt+0x1360c>
   25474:	cmp	r2, r4
   25478:	beq	255f8 <__assert_fail@plt+0x135f0>
   2547c:	mov	r5, #0
   25480:	b	25300 <__assert_fail@plt+0x132f8>
   25484:	ldrb	r4, [r1, #1]!
   25488:	cmp	r4, #48	; 0x30
   2548c:	bne	252bc <__assert_fail@plt+0x132b4>
   25490:	ldrb	r4, [r1, #1]!
   25494:	cmp	r4, #48	; 0x30
   25498:	beq	25484 <__assert_fail@plt+0x1347c>
   2549c:	b	252bc <__assert_fail@plt+0x132b4>
   254a0:	ldrb	ip, [r0, #1]!
   254a4:	cmp	ip, #48	; 0x30
   254a8:	bne	253bc <__assert_fail@plt+0x133b4>
   254ac:	ldrb	ip, [r0, #1]!
   254b0:	cmp	ip, #48	; 0x30
   254b4:	beq	254a0 <__assert_fail@plt+0x13498>
   254b8:	b	253bc <__assert_fail@plt+0x133b4>
   254bc:	sub	r5, r4, #48	; 0x30
   254c0:	cmp	r5, #9
   254c4:	bhi	25468 <__assert_fail@plt+0x13460>
   254c8:	sub	r6, r2, #48	; 0x30
   254cc:	mov	r5, r2
   254d0:	b	253e0 <__assert_fail@plt+0x133d8>
   254d4:	cmp	r6, #9
   254d8:	subls	r5, r5, r2
   254dc:	bls	253f4 <__assert_fail@plt+0x133ec>
   254e0:	b	25468 <__assert_fail@plt+0x13460>
   254e4:	cmp	r0, #0
   254e8:	moveq	r5, #0
   254ec:	mov	r0, r5
   254f0:	pop	{r4, r5, r6, pc}
   254f4:	mov	r4, r2
   254f8:	b	25468 <__assert_fail@plt+0x13460>
   254fc:	cmp	r2, ip
   25500:	beq	25660 <__assert_fail@plt+0x13658>
   25504:	cmp	r2, r4
   25508:	mov	r6, ip
   2550c:	beq	25598 <__assert_fail@plt+0x13590>
   25510:	cmp	lr, #9
   25514:	sub	r5, r4, r5
   25518:	bhi	25668 <__assert_fail@plt+0x13660>
   2551c:	mov	ip, #0
   25520:	ldrb	r2, [r0, #1]!
   25524:	cmp	r3, r2
   25528:	beq	25520 <__assert_fail@plt+0x13518>
   2552c:	sub	r2, r2, #48	; 0x30
   25530:	cmp	r2, #9
   25534:	add	ip, ip, #1
   25538:	bls	25520 <__assert_fail@plt+0x13518>
   2553c:	sub	r6, r6, #48	; 0x30
   25540:	cmp	r6, #9
   25544:	bhi	2567c <__assert_fail@plt+0x13674>
   25548:	mov	r0, #0
   2554c:	ldrb	r2, [r1, #1]!
   25550:	cmp	r3, r2
   25554:	beq	2554c <__assert_fail@plt+0x13544>
   25558:	sub	r2, r2, #48	; 0x30
   2555c:	cmp	r2, #9
   25560:	add	r0, r0, #1
   25564:	bls	2554c <__assert_fail@plt+0x13544>
   25568:	cmp	r0, ip
   2556c:	beq	254e4 <__assert_fail@plt+0x134dc>
   25570:	bhi	252fc <__assert_fail@plt+0x132f4>
   25574:	b	2544c <__assert_fail@plt+0x13444>
   25578:	cmp	r2, ip
   2557c:	subne	lr, ip, #48	; 0x30
   25580:	beq	25648 <__assert_fail@plt+0x13640>
   25584:	cmp	r2, r4
   25588:	bne	25510 <__assert_fail@plt+0x13508>
   2558c:	cmp	lr, #9
   25590:	subls	r5, r2, r5
   25594:	bls	2551c <__assert_fail@plt+0x13514>
   25598:	uxtb	r2, r2
   2559c:	cmp	r2, r6
   255a0:	beq	256cc <__assert_fail@plt+0x136c4>
   255a4:	cmp	r2, ip
   255a8:	bne	2547c <__assert_fail@plt+0x13474>
   255ac:	add	r3, r0, #1
   255b0:	ldrb	r5, [r0, #1]
   255b4:	b	255bc <__assert_fail@plt+0x135b4>
   255b8:	ldrb	r5, [r3, #1]!
   255bc:	cmp	r5, #48	; 0x30
   255c0:	beq	255b8 <__assert_fail@plt+0x135b0>
   255c4:	sub	r5, r5, #48	; 0x30
   255c8:	cmp	r5, #9
   255cc:	movhi	r5, #0
   255d0:	mvnls	r5, #0
   255d4:	b	25300 <__assert_fail@plt+0x132f8>
   255d8:	sub	r4, r4, #48	; 0x30
   255dc:	cmp	r4, #9
   255e0:	movls	ip, #0
   255e4:	bls	25420 <__assert_fail@plt+0x13418>
   255e8:	b	2547c <__assert_fail@plt+0x13474>
   255ec:	adds	r5, ip, #0
   255f0:	movne	r5, #1
   255f4:	b	25300 <__assert_fail@plt+0x132f8>
   255f8:	add	r2, r1, #1
   255fc:	ldrb	r5, [r1, #1]
   25600:	b	25608 <__assert_fail@plt+0x13600>
   25604:	ldrb	r5, [r2, #1]!
   25608:	cmp	r5, #48	; 0x30
   2560c:	beq	25604 <__assert_fail@plt+0x135fc>
   25610:	b	255c4 <__assert_fail@plt+0x135bc>
   25614:	cmp	ip, r4
   25618:	beq	2568c <__assert_fail@plt+0x13684>
   2561c:	ldrb	r3, [r0, #1]
   25620:	add	r0, r0, #1
   25624:	b	2562c <__assert_fail@plt+0x13624>
   25628:	ldrb	r3, [r0, #1]!
   2562c:	cmp	r3, #48	; 0x30
   25630:	beq	25628 <__assert_fail@plt+0x13620>
   25634:	sub	r5, r3, #48	; 0x30
   25638:	cmp	r5, #9
   2563c:	movhi	r5, #0
   25640:	movls	r5, #1
   25644:	b	25300 <__assert_fail@plt+0x132f8>
   25648:	sub	lr, r6, #48	; 0x30
   2564c:	cmp	lr, #9
   25650:	bhi	25598 <__assert_fail@plt+0x13590>
   25654:	sub	lr, r2, #48	; 0x30
   25658:	mov	r5, r2
   2565c:	b	25584 <__assert_fail@plt+0x1357c>
   25660:	mov	r6, r2
   25664:	b	25598 <__assert_fail@plt+0x13590>
   25668:	sub	r6, r6, #48	; 0x30
   2566c:	cmp	r6, #9
   25670:	movls	ip, #0
   25674:	bls	25548 <__assert_fail@plt+0x13540>
   25678:	b	2547c <__assert_fail@plt+0x13474>
   2567c:	cmp	ip, #0
   25680:	mvnne	r5, #0
   25684:	moveq	r5, #0
   25688:	b	25300 <__assert_fail@plt+0x132f8>
   2568c:	mov	r2, r1
   25690:	b	2569c <__assert_fail@plt+0x13694>
   25694:	cmp	r1, #9
   25698:	bhi	2547c <__assert_fail@plt+0x13474>
   2569c:	ldrb	r3, [r0, #1]!
   256a0:	ldrb	r5, [r2, #1]!
   256a4:	sub	r1, r3, #48	; 0x30
   256a8:	cmp	r3, r5
   256ac:	beq	25694 <__assert_fail@plt+0x1368c>
   256b0:	cmp	r1, #9
   256b4:	bhi	25740 <__assert_fail@plt+0x13738>
   256b8:	sub	r2, r5, #48	; 0x30
   256bc:	cmp	r2, #9
   256c0:	subls	r5, r3, r5
   256c4:	bhi	2562c <__assert_fail@plt+0x13624>
   256c8:	b	25300 <__assert_fail@plt+0x132f8>
   256cc:	cmp	r6, ip
   256d0:	beq	25700 <__assert_fail@plt+0x136f8>
   256d4:	ldrb	lr, [r1, #1]
   256d8:	add	r1, r1, #1
   256dc:	b	256e4 <__assert_fail@plt+0x136dc>
   256e0:	ldrb	lr, [r1, #1]!
   256e4:	cmp	lr, #48	; 0x30
   256e8:	beq	256e0 <__assert_fail@plt+0x136d8>
   256ec:	sub	r5, lr, #48	; 0x30
   256f0:	cmp	r5, #9
   256f4:	movhi	r5, #0
   256f8:	movls	r5, #1
   256fc:	b	25300 <__assert_fail@plt+0x132f8>
   25700:	mov	r3, r0
   25704:	b	25710 <__assert_fail@plt+0x13708>
   25708:	cmp	r2, #9
   2570c:	bhi	2547c <__assert_fail@plt+0x13474>
   25710:	ldrb	lr, [r1, #1]!
   25714:	ldrb	r5, [r3, #1]!
   25718:	sub	r2, lr, #48	; 0x30
   2571c:	cmp	lr, r5
   25720:	beq	25708 <__assert_fail@plt+0x13700>
   25724:	cmp	r2, #9
   25728:	bhi	25750 <__assert_fail@plt+0x13748>
   2572c:	sub	r3, r5, #48	; 0x30
   25730:	cmp	r3, #9
   25734:	subls	r5, lr, r5
   25738:	bhi	256e4 <__assert_fail@plt+0x136dc>
   2573c:	b	25300 <__assert_fail@plt+0x132f8>
   25740:	sub	r3, r5, #48	; 0x30
   25744:	cmp	r3, #9
   25748:	bls	25608 <__assert_fail@plt+0x13600>
   2574c:	b	2547c <__assert_fail@plt+0x13474>
   25750:	sub	r2, r5, #48	; 0x30
   25754:	cmp	r2, #9
   25758:	bls	255bc <__assert_fail@plt+0x135b4>
   2575c:	b	2547c <__assert_fail@plt+0x13474>
   25760:	cmp	r0, #2
   25764:	push	{r4, r5, r6, r7, r8, lr}
   25768:	mov	r4, r0
   2576c:	bhi	25794 <__assert_fail@plt+0x1378c>
   25770:	bl	2850c <_obstack_memory_used@@Base+0x80>
   25774:	mov	r7, r0
   25778:	bl	11e34 <__errno_location@plt>
   2577c:	mov	r5, r0
   25780:	mov	r0, r4
   25784:	ldr	r6, [r5]
   25788:	mov	r4, r7
   2578c:	bl	11ff0 <close@plt>
   25790:	str	r6, [r5]
   25794:	mov	r0, r4
   25798:	pop	{r4, r5, r6, r7, r8, pc}
   2579c:	push	{r4, r5, r6, lr}
   257a0:	sub	sp, sp, #32
   257a4:	cmp	r1, #0
   257a8:	mov	r4, r0
   257ac:	ldr	r5, [sp, #48]	; 0x30
   257b0:	ldr	r6, [sp, #52]	; 0x34
   257b4:	beq	25acc <__assert_fail@plt+0x13ac4>
   257b8:	stm	sp, {r2, r3}
   257bc:	mov	r3, r1
   257c0:	ldr	r2, [pc, #808]	; 25af0 <__assert_fail@plt+0x13ae8>
   257c4:	mov	r1, #1
   257c8:	bl	11e94 <__fprintf_chk@plt>
   257cc:	mov	r2, #5
   257d0:	ldr	r1, [pc, #796]	; 25af4 <__assert_fail@plt+0x13aec>
   257d4:	mov	r0, #0
   257d8:	bl	11c0c <dcgettext@plt>
   257dc:	ldr	r3, [pc, #788]	; 25af8 <__assert_fail@plt+0x13af0>
   257e0:	ldr	r2, [pc, #788]	; 25afc <__assert_fail@plt+0x13af4>
   257e4:	str	r3, [sp]
   257e8:	mov	r1, #1
   257ec:	mov	r3, r0
   257f0:	mov	r0, r4
   257f4:	bl	11e94 <__fprintf_chk@plt>
   257f8:	mov	r1, r4
   257fc:	mov	r0, #10
   25800:	bl	11c00 <fputc_unlocked@plt>
   25804:	mov	r2, #5
   25808:	ldr	r1, [pc, #752]	; 25b00 <__assert_fail@plt+0x13af8>
   2580c:	mov	r0, #0
   25810:	bl	11c0c <dcgettext@plt>
   25814:	mov	r1, #1
   25818:	ldr	r3, [pc, #740]	; 25b04 <__assert_fail@plt+0x13afc>
   2581c:	mov	r2, r0
   25820:	mov	r0, r4
   25824:	bl	11e94 <__fprintf_chk@plt>
   25828:	mov	r1, r4
   2582c:	mov	r0, #10
   25830:	bl	11c00 <fputc_unlocked@plt>
   25834:	cmp	r6, #9
   25838:	ldrls	pc, [pc, r6, lsl #2]
   2583c:	b	25ae4 <__assert_fail@plt+0x13adc>
   25840:	andeq	r5, r2, r4, asr #17
   25844:	andeq	r5, r2, ip, asr #17
   25848:	strdeq	r5, [r2], -r8
   2584c:	andeq	r5, r2, ip, lsr #18
   25850:	andeq	r5, r2, r8, ror #18
   25854:	andeq	r5, r2, r4, lsr #19
   25858:	andeq	r5, r2, r0, ror #19
   2585c:	andeq	r5, r2, r4, lsr #20
   25860:	andeq	r5, r2, r4, ror sl
   25864:	andeq	r5, r2, r8, ror #16
   25868:	ldr	r1, [pc, #664]	; 25b08 <__assert_fail@plt+0x13b00>
   2586c:	mov	r2, #5
   25870:	mov	r0, #0
   25874:	bl	11c0c <dcgettext@plt>
   25878:	ldr	ip, [r5, #32]
   2587c:	ldr	r1, [r5, #28]
   25880:	ldr	r2, [r5, #24]
   25884:	ldr	r3, [r5]
   25888:	ldr	r6, [r5, #20]
   2588c:	str	ip, [sp, #28]
   25890:	ldr	lr, [r5, #16]
   25894:	str	r1, [sp, #24]
   25898:	ldr	ip, [r5, #12]
   2589c:	str	r2, [sp, #20]
   258a0:	ldr	r1, [r5, #8]
   258a4:	ldr	r2, [r5, #4]
   258a8:	str	r6, [sp, #16]
   258ac:	stmib	sp, {r1, ip, lr}
   258b0:	mov	r1, #1
   258b4:	str	r2, [sp]
   258b8:	mov	r2, r0
   258bc:	mov	r0, r4
   258c0:	bl	11e94 <__fprintf_chk@plt>
   258c4:	add	sp, sp, #32
   258c8:	pop	{r4, r5, r6, pc}
   258cc:	mov	r2, #5
   258d0:	ldr	r1, [pc, #564]	; 25b0c <__assert_fail@plt+0x13b04>
   258d4:	mov	r0, #0
   258d8:	bl	11c0c <dcgettext@plt>
   258dc:	ldr	r3, [r5]
   258e0:	mov	r1, #1
   258e4:	mov	r2, r0
   258e8:	mov	r0, r4
   258ec:	add	sp, sp, #32
   258f0:	pop	{r4, r5, r6, lr}
   258f4:	b	11e94 <__fprintf_chk@plt>
   258f8:	mov	r2, #5
   258fc:	ldr	r1, [pc, #524]	; 25b10 <__assert_fail@plt+0x13b08>
   25900:	mov	r0, #0
   25904:	bl	11c0c <dcgettext@plt>
   25908:	ldr	r2, [r5, #4]
   2590c:	ldr	r3, [r5]
   25910:	mov	r1, #1
   25914:	str	r2, [sp, #48]	; 0x30
   25918:	mov	r2, r0
   2591c:	mov	r0, r4
   25920:	add	sp, sp, #32
   25924:	pop	{r4, r5, r6, lr}
   25928:	b	11e94 <__fprintf_chk@plt>
   2592c:	mov	r2, #5
   25930:	ldr	r1, [pc, #476]	; 25b14 <__assert_fail@plt+0x13b0c>
   25934:	mov	r0, #0
   25938:	bl	11c0c <dcgettext@plt>
   2593c:	ldr	r1, [r5, #8]
   25940:	ldr	r2, [r5, #4]
   25944:	ldr	r3, [r5]
   25948:	str	r1, [sp, #52]	; 0x34
   2594c:	str	r2, [sp, #48]	; 0x30
   25950:	mov	r1, #1
   25954:	mov	r2, r0
   25958:	mov	r0, r4
   2595c:	add	sp, sp, #32
   25960:	pop	{r4, r5, r6, lr}
   25964:	b	11e94 <__fprintf_chk@plt>
   25968:	mov	r2, #5
   2596c:	ldr	r1, [pc, #420]	; 25b18 <__assert_fail@plt+0x13b10>
   25970:	mov	r0, #0
   25974:	bl	11c0c <dcgettext@plt>
   25978:	ldr	r1, [r5, #8]
   2597c:	ldr	ip, [r5, #12]
   25980:	ldr	r2, [r5, #4]
   25984:	ldr	r3, [r5]
   25988:	stmib	sp, {r1, ip}
   2598c:	str	r2, [sp]
   25990:	mov	r1, #1
   25994:	mov	r2, r0
   25998:	mov	r0, r4
   2599c:	bl	11e94 <__fprintf_chk@plt>
   259a0:	b	258c4 <__assert_fail@plt+0x138bc>
   259a4:	mov	r2, #5
   259a8:	ldr	r1, [pc, #364]	; 25b1c <__assert_fail@plt+0x13b14>
   259ac:	mov	r0, #0
   259b0:	bl	11c0c <dcgettext@plt>
   259b4:	add	r1, r5, #8
   259b8:	ldr	r2, [r5, #4]
   259bc:	ldm	r1, {r1, ip, lr}
   259c0:	ldr	r3, [r5]
   259c4:	str	r2, [sp]
   259c8:	stmib	sp, {r1, ip, lr}
   259cc:	mov	r1, #1
   259d0:	mov	r2, r0
   259d4:	mov	r0, r4
   259d8:	bl	11e94 <__fprintf_chk@plt>
   259dc:	b	258c4 <__assert_fail@plt+0x138bc>
   259e0:	mov	r2, #5
   259e4:	ldr	r1, [pc, #308]	; 25b20 <__assert_fail@plt+0x13b18>
   259e8:	mov	r0, #0
   259ec:	bl	11c0c <dcgettext@plt>
   259f0:	add	r1, r5, #8
   259f4:	ldr	r2, [r5, #4]
   259f8:	ldm	r1, {r1, ip, lr}
   259fc:	ldr	r6, [r5, #20]
   25a00:	ldr	r3, [r5]
   25a04:	stmib	sp, {r1, ip, lr}
   25a08:	mov	r1, #1
   25a0c:	str	r2, [sp]
   25a10:	str	r6, [sp, #16]
   25a14:	mov	r2, r0
   25a18:	mov	r0, r4
   25a1c:	bl	11e94 <__fprintf_chk@plt>
   25a20:	b	258c4 <__assert_fail@plt+0x138bc>
   25a24:	mov	r2, #5
   25a28:	ldr	r1, [pc, #244]	; 25b24 <__assert_fail@plt+0x13b1c>
   25a2c:	mov	r0, #0
   25a30:	bl	11c0c <dcgettext@plt>
   25a34:	ldr	r2, [r5, #24]
   25a38:	ldr	r3, [r5]
   25a3c:	ldr	r6, [r5, #20]
   25a40:	ldr	lr, [r5, #16]
   25a44:	ldr	ip, [r5, #12]
   25a48:	str	r2, [sp, #20]
   25a4c:	ldr	r1, [r5, #8]
   25a50:	ldr	r2, [r5, #4]
   25a54:	str	r6, [sp, #16]
   25a58:	stmib	sp, {r1, ip, lr}
   25a5c:	mov	r1, #1
   25a60:	str	r2, [sp]
   25a64:	mov	r2, r0
   25a68:	mov	r0, r4
   25a6c:	bl	11e94 <__fprintf_chk@plt>
   25a70:	b	258c4 <__assert_fail@plt+0x138bc>
   25a74:	mov	r2, #5
   25a78:	ldr	r1, [pc, #168]	; 25b28 <__assert_fail@plt+0x13b20>
   25a7c:	mov	r0, #0
   25a80:	bl	11c0c <dcgettext@plt>
   25a84:	ldr	r1, [r5, #28]
   25a88:	ldr	r2, [r5, #24]
   25a8c:	ldr	r3, [r5]
   25a90:	ldr	r6, [r5, #20]
   25a94:	ldr	lr, [r5, #16]
   25a98:	str	r1, [sp, #24]
   25a9c:	ldr	ip, [r5, #12]
   25aa0:	str	r2, [sp, #20]
   25aa4:	ldr	r1, [r5, #8]
   25aa8:	ldr	r2, [r5, #4]
   25aac:	str	r6, [sp, #16]
   25ab0:	stmib	sp, {r1, ip, lr}
   25ab4:	mov	r1, #1
   25ab8:	str	r2, [sp]
   25abc:	mov	r2, r0
   25ac0:	mov	r0, r4
   25ac4:	bl	11e94 <__fprintf_chk@plt>
   25ac8:	b	258c4 <__assert_fail@plt+0x138bc>
   25acc:	str	r3, [sp]
   25ad0:	mov	r1, #1
   25ad4:	mov	r3, r2
   25ad8:	ldr	r2, [pc, #76]	; 25b2c <__assert_fail@plt+0x13b24>
   25adc:	bl	11e94 <__fprintf_chk@plt>
   25ae0:	b	257cc <__assert_fail@plt+0x137c4>
   25ae4:	mov	r2, #5
   25ae8:	ldr	r1, [pc, #64]	; 25b30 <__assert_fail@plt+0x13b28>
   25aec:	b	25870 <__assert_fail@plt+0x13868>
   25af0:	andeq	fp, r2, r4, lsl #5
   25af4:	muleq	r2, r8, r2
   25af8:	andeq	r0, r0, r6, ror #15
   25afc:	andeq	fp, r2, r0, ror r5
   25b00:	muleq	r2, ip, r2
   25b04:	andeq	fp, r2, r8, asr #6
   25b08:	andeq	fp, r2, r8, ror r4
   25b0c:	andeq	fp, r2, ip, ror #6
   25b10:	andeq	fp, r2, ip, ror r3
   25b14:	muleq	r2, r4, r3
   25b18:			; <UNDEFINED> instruction: 0x0002b3b0
   25b1c:	ldrdeq	fp, [r2], -r0
   25b20:	strdeq	fp, [r2], -r4
   25b24:	andeq	fp, r2, ip, lsl r4
   25b28:	andeq	fp, r2, r8, asr #8
   25b2c:	muleq	r2, r0, r2
   25b30:	andeq	fp, r2, ip, lsr #9
   25b34:	push	{r4, r5, lr}
   25b38:	sub	sp, sp, #12
   25b3c:	ldr	r5, [sp, #24]
   25b40:	ldr	ip, [r5]
   25b44:	cmp	ip, #0
   25b48:	beq	25b64 <__assert_fail@plt+0x13b5c>
   25b4c:	mov	lr, r5
   25b50:	mov	ip, #0
   25b54:	ldr	r4, [lr, #4]!
   25b58:	add	ip, ip, #1
   25b5c:	cmp	r4, #0
   25b60:	bne	25b54 <__assert_fail@plt+0x13b4c>
   25b64:	stm	sp, {r5, ip}
   25b68:	bl	2579c <__assert_fail@plt+0x13794>
   25b6c:	add	sp, sp, #12
   25b70:	pop	{r4, r5, pc}
   25b74:	push	{r4, r5, lr}
   25b78:	sub	sp, sp, #76	; 0x4c
   25b7c:	mov	r5, r0
   25b80:	ldr	ip, [sp, #88]	; 0x58
   25b84:	ldr	r0, [ip]
   25b88:	cmp	r0, #0
   25b8c:	str	r0, [sp, #32]
   25b90:	beq	25f64 <__assert_fail@plt+0x13f5c>
   25b94:	ldr	r0, [ip, #4]
   25b98:	cmp	r0, #0
   25b9c:	str	r0, [sp, #36]	; 0x24
   25ba0:	beq	25f6c <__assert_fail@plt+0x13f64>
   25ba4:	ldr	r0, [ip, #8]
   25ba8:	cmp	r0, #0
   25bac:	str	r0, [sp, #40]	; 0x28
   25bb0:	beq	25f74 <__assert_fail@plt+0x13f6c>
   25bb4:	ldr	r0, [ip, #12]
   25bb8:	cmp	r0, #0
   25bbc:	str	r0, [sp, #44]	; 0x2c
   25bc0:	beq	25f7c <__assert_fail@plt+0x13f74>
   25bc4:	ldr	r0, [ip, #16]
   25bc8:	cmp	r0, #0
   25bcc:	str	r0, [sp, #48]	; 0x30
   25bd0:	beq	25f84 <__assert_fail@plt+0x13f7c>
   25bd4:	ldr	r0, [ip, #20]
   25bd8:	cmp	r0, #0
   25bdc:	str	r0, [sp, #52]	; 0x34
   25be0:	beq	25f8c <__assert_fail@plt+0x13f84>
   25be4:	ldr	r0, [ip, #24]
   25be8:	cmp	r0, #0
   25bec:	str	r0, [sp, #56]	; 0x38
   25bf0:	beq	25f94 <__assert_fail@plt+0x13f8c>
   25bf4:	ldr	r0, [ip, #28]
   25bf8:	cmp	r0, #0
   25bfc:	str	r0, [sp, #60]	; 0x3c
   25c00:	beq	25f9c <__assert_fail@plt+0x13f94>
   25c04:	ldr	r0, [ip, #32]
   25c08:	cmp	r0, #0
   25c0c:	str	r0, [sp, #64]	; 0x40
   25c10:	beq	25fa4 <__assert_fail@plt+0x13f9c>
   25c14:	ldr	r0, [ip, #36]	; 0x24
   25c18:	cmp	r0, #0
   25c1c:	movne	r4, #10
   25c20:	moveq	r4, #9
   25c24:	cmp	r1, #0
   25c28:	beq	25f3c <__assert_fail@plt+0x13f34>
   25c2c:	stm	sp, {r2, r3}
   25c30:	mov	r0, r5
   25c34:	mov	r3, r1
   25c38:	ldr	r2, [pc, #876]	; 25fac <__assert_fail@plt+0x13fa4>
   25c3c:	mov	r1, #1
   25c40:	bl	11e94 <__fprintf_chk@plt>
   25c44:	mov	r2, #5
   25c48:	ldr	r1, [pc, #864]	; 25fb0 <__assert_fail@plt+0x13fa8>
   25c4c:	mov	r0, #0
   25c50:	bl	11c0c <dcgettext@plt>
   25c54:	ldr	r3, [pc, #856]	; 25fb4 <__assert_fail@plt+0x13fac>
   25c58:	ldr	r2, [pc, #856]	; 25fb8 <__assert_fail@plt+0x13fb0>
   25c5c:	str	r3, [sp]
   25c60:	mov	r1, #1
   25c64:	mov	r3, r0
   25c68:	mov	r0, r5
   25c6c:	bl	11e94 <__fprintf_chk@plt>
   25c70:	mov	r1, r5
   25c74:	mov	r0, #10
   25c78:	bl	11c00 <fputc_unlocked@plt>
   25c7c:	mov	r2, #5
   25c80:	ldr	r1, [pc, #820]	; 25fbc <__assert_fail@plt+0x13fb4>
   25c84:	mov	r0, #0
   25c88:	bl	11c0c <dcgettext@plt>
   25c8c:	mov	r1, #1
   25c90:	ldr	r3, [pc, #808]	; 25fc0 <__assert_fail@plt+0x13fb8>
   25c94:	mov	r2, r0
   25c98:	mov	r0, r5
   25c9c:	bl	11e94 <__fprintf_chk@plt>
   25ca0:	mov	r1, r5
   25ca4:	mov	r0, #10
   25ca8:	bl	11c00 <fputc_unlocked@plt>
   25cac:	cmp	r4, #9
   25cb0:	ldrls	pc, [pc, r4, lsl #2]
   25cb4:	b	25f58 <__assert_fail@plt+0x13f50>
   25cb8:	andeq	r5, r2, ip, lsr sp
   25cbc:	andeq	r5, r2, r4, asr #26
   25cc0:	andeq	r5, r2, r0, ror sp
   25cc4:	andeq	r5, r2, r4, lsr #27
   25cc8:	ldrdeq	r5, [r2], -ip
   25ccc:	andeq	r5, r2, r8, lsl lr
   25cd0:	andeq	r5, r2, r4, asr lr
   25cd4:	muleq	r2, r8, lr
   25cd8:	andeq	r5, r2, r4, ror #29
   25cdc:	andeq	r5, r2, r0, ror #25
   25ce0:	ldr	r1, [pc, #732]	; 25fc4 <__assert_fail@plt+0x13fbc>
   25ce4:	mov	r2, #5
   25ce8:	mov	r0, #0
   25cec:	bl	11c0c <dcgettext@plt>
   25cf0:	ldr	ip, [sp, #64]	; 0x40
   25cf4:	ldr	r1, [sp, #60]	; 0x3c
   25cf8:	ldr	r2, [sp, #56]	; 0x38
   25cfc:	ldr	lr, [sp, #48]	; 0x30
   25d00:	str	ip, [sp, #28]
   25d04:	str	r1, [sp, #24]
   25d08:	ldr	ip, [sp, #44]	; 0x2c
   25d0c:	ldr	r1, [sp, #40]	; 0x28
   25d10:	ldr	r4, [sp, #52]	; 0x34
   25d14:	str	r2, [sp, #20]
   25d18:	ldr	r2, [sp, #36]	; 0x24
   25d1c:	stmib	sp, {r1, ip, lr}
   25d20:	mov	r1, #1
   25d24:	str	r2, [sp]
   25d28:	ldr	r3, [sp, #32]
   25d2c:	str	r4, [sp, #16]
   25d30:	mov	r2, r0
   25d34:	mov	r0, r5
   25d38:	bl	11e94 <__fprintf_chk@plt>
   25d3c:	add	sp, sp, #76	; 0x4c
   25d40:	pop	{r4, r5, pc}
   25d44:	mov	r2, #5
   25d48:	ldr	r1, [pc, #632]	; 25fc8 <__assert_fail@plt+0x13fc0>
   25d4c:	mov	r0, #0
   25d50:	bl	11c0c <dcgettext@plt>
   25d54:	ldr	r3, [sp, #32]
   25d58:	mov	r1, #1
   25d5c:	mov	r2, r0
   25d60:	mov	r0, r5
   25d64:	add	sp, sp, #76	; 0x4c
   25d68:	pop	{r4, r5, lr}
   25d6c:	b	11e94 <__fprintf_chk@plt>
   25d70:	mov	r2, #5
   25d74:	ldr	r1, [pc, #592]	; 25fcc <__assert_fail@plt+0x13fc4>
   25d78:	mov	r0, #0
   25d7c:	bl	11c0c <dcgettext@plt>
   25d80:	ldr	r2, [sp, #36]	; 0x24
   25d84:	ldr	r3, [sp, #32]
   25d88:	str	r2, [sp, #88]	; 0x58
   25d8c:	mov	r1, #1
   25d90:	mov	r2, r0
   25d94:	mov	r0, r5
   25d98:	add	sp, sp, #76	; 0x4c
   25d9c:	pop	{r4, r5, lr}
   25da0:	b	11e94 <__fprintf_chk@plt>
   25da4:	mov	r2, #5
   25da8:	ldr	r1, [pc, #544]	; 25fd0 <__assert_fail@plt+0x13fc8>
   25dac:	mov	r0, #0
   25db0:	bl	11c0c <dcgettext@plt>
   25db4:	ldr	r1, [sp, #40]	; 0x28
   25db8:	ldr	r2, [sp, #36]	; 0x24
   25dbc:	str	r1, [sp, #4]
   25dc0:	str	r2, [sp]
   25dc4:	ldr	r3, [sp, #32]
   25dc8:	mov	r1, #1
   25dcc:	mov	r2, r0
   25dd0:	mov	r0, r5
   25dd4:	bl	11e94 <__fprintf_chk@plt>
   25dd8:	b	25d3c <__assert_fail@plt+0x13d34>
   25ddc:	mov	r2, #5
   25de0:	ldr	r1, [pc, #492]	; 25fd4 <__assert_fail@plt+0x13fcc>
   25de4:	mov	r0, #0
   25de8:	bl	11c0c <dcgettext@plt>
   25dec:	ldr	r1, [sp, #40]	; 0x28
   25df0:	ldr	ip, [sp, #44]	; 0x2c
   25df4:	ldr	r2, [sp, #36]	; 0x24
   25df8:	ldr	r3, [sp, #32]
   25dfc:	stmib	sp, {r1, ip}
   25e00:	str	r2, [sp]
   25e04:	mov	r1, #1
   25e08:	mov	r2, r0
   25e0c:	mov	r0, r5
   25e10:	bl	11e94 <__fprintf_chk@plt>
   25e14:	b	25d3c <__assert_fail@plt+0x13d34>
   25e18:	mov	r2, #5
   25e1c:	ldr	r1, [pc, #436]	; 25fd8 <__assert_fail@plt+0x13fd0>
   25e20:	mov	r0, #0
   25e24:	bl	11c0c <dcgettext@plt>
   25e28:	add	r1, sp, #40	; 0x28
   25e2c:	ldr	r2, [sp, #36]	; 0x24
   25e30:	ldm	r1, {r1, ip, lr}
   25e34:	ldr	r3, [sp, #32]
   25e38:	str	r2, [sp]
   25e3c:	stmib	sp, {r1, ip, lr}
   25e40:	mov	r1, #1
   25e44:	mov	r2, r0
   25e48:	mov	r0, r5
   25e4c:	bl	11e94 <__fprintf_chk@plt>
   25e50:	b	25d3c <__assert_fail@plt+0x13d34>
   25e54:	mov	r2, #5
   25e58:	ldr	r1, [pc, #380]	; 25fdc <__assert_fail@plt+0x13fd4>
   25e5c:	mov	r0, #0
   25e60:	bl	11c0c <dcgettext@plt>
   25e64:	add	r1, sp, #40	; 0x28
   25e68:	ldr	r2, [sp, #36]	; 0x24
   25e6c:	ldm	r1, {r1, ip, lr}
   25e70:	ldr	r4, [sp, #52]	; 0x34
   25e74:	str	r2, [sp]
   25e78:	stmib	sp, {r1, ip, lr}
   25e7c:	mov	r1, #1
   25e80:	ldr	r3, [sp, #32]
   25e84:	str	r4, [sp, #16]
   25e88:	mov	r2, r0
   25e8c:	mov	r0, r5
   25e90:	bl	11e94 <__fprintf_chk@plt>
   25e94:	b	25d3c <__assert_fail@plt+0x13d34>
   25e98:	mov	r2, #5
   25e9c:	ldr	r1, [pc, #316]	; 25fe0 <__assert_fail@plt+0x13fd8>
   25ea0:	mov	r0, #0
   25ea4:	bl	11c0c <dcgettext@plt>
   25ea8:	add	r1, sp, #40	; 0x28
   25eac:	ldr	r2, [sp, #56]	; 0x38
   25eb0:	ldm	r1, {r1, ip, lr}
   25eb4:	ldr	r4, [sp, #52]	; 0x34
   25eb8:	str	r2, [sp, #20]
   25ebc:	ldr	r2, [sp, #36]	; 0x24
   25ec0:	stmib	sp, {r1, ip, lr}
   25ec4:	mov	r1, #1
   25ec8:	str	r2, [sp]
   25ecc:	ldr	r3, [sp, #32]
   25ed0:	str	r4, [sp, #16]
   25ed4:	mov	r2, r0
   25ed8:	mov	r0, r5
   25edc:	bl	11e94 <__fprintf_chk@plt>
   25ee0:	b	25d3c <__assert_fail@plt+0x13d34>
   25ee4:	mov	r2, #5
   25ee8:	ldr	r1, [pc, #244]	; 25fe4 <__assert_fail@plt+0x13fdc>
   25eec:	mov	r0, #0
   25ef0:	bl	11c0c <dcgettext@plt>
   25ef4:	ldr	r1, [sp, #60]	; 0x3c
   25ef8:	ldr	r2, [sp, #56]	; 0x38
   25efc:	ldr	lr, [sp, #48]	; 0x30
   25f00:	ldr	ip, [sp, #44]	; 0x2c
   25f04:	str	r1, [sp, #24]
   25f08:	ldr	r1, [sp, #40]	; 0x28
   25f0c:	ldr	r4, [sp, #52]	; 0x34
   25f10:	str	r2, [sp, #20]
   25f14:	ldr	r2, [sp, #36]	; 0x24
   25f18:	stmib	sp, {r1, ip, lr}
   25f1c:	mov	r1, #1
   25f20:	str	r2, [sp]
   25f24:	ldr	r3, [sp, #32]
   25f28:	str	r4, [sp, #16]
   25f2c:	mov	r2, r0
   25f30:	mov	r0, r5
   25f34:	bl	11e94 <__fprintf_chk@plt>
   25f38:	b	25d3c <__assert_fail@plt+0x13d34>
   25f3c:	str	r3, [sp]
   25f40:	mov	r1, #1
   25f44:	mov	r3, r2
   25f48:	mov	r0, r5
   25f4c:	ldr	r2, [pc, #148]	; 25fe8 <__assert_fail@plt+0x13fe0>
   25f50:	bl	11e94 <__fprintf_chk@plt>
   25f54:	b	25c44 <__assert_fail@plt+0x13c3c>
   25f58:	mov	r2, #5
   25f5c:	ldr	r1, [pc, #136]	; 25fec <__assert_fail@plt+0x13fe4>
   25f60:	b	25ce8 <__assert_fail@plt+0x13ce0>
   25f64:	mov	r4, r0
   25f68:	b	25c24 <__assert_fail@plt+0x13c1c>
   25f6c:	mov	r4, #1
   25f70:	b	25c24 <__assert_fail@plt+0x13c1c>
   25f74:	mov	r4, #2
   25f78:	b	25c24 <__assert_fail@plt+0x13c1c>
   25f7c:	mov	r4, #3
   25f80:	b	25c24 <__assert_fail@plt+0x13c1c>
   25f84:	mov	r4, #4
   25f88:	b	25c24 <__assert_fail@plt+0x13c1c>
   25f8c:	mov	r4, #5
   25f90:	b	25c24 <__assert_fail@plt+0x13c1c>
   25f94:	mov	r4, #6
   25f98:	b	25c24 <__assert_fail@plt+0x13c1c>
   25f9c:	mov	r4, #7
   25fa0:	b	25c24 <__assert_fail@plt+0x13c1c>
   25fa4:	mov	r4, #8
   25fa8:	b	25c24 <__assert_fail@plt+0x13c1c>
   25fac:	andeq	fp, r2, r4, lsl #5
   25fb0:	muleq	r2, r8, r2
   25fb4:	andeq	r0, r0, r6, ror #15
   25fb8:	andeq	fp, r2, r0, ror r5
   25fbc:	muleq	r2, ip, r2
   25fc0:	andeq	fp, r2, r8, asr #6
   25fc4:	andeq	fp, r2, r8, ror r4
   25fc8:	andeq	fp, r2, ip, ror #6
   25fcc:	andeq	fp, r2, ip, ror r3
   25fd0:	muleq	r2, r4, r3
   25fd4:			; <UNDEFINED> instruction: 0x0002b3b0
   25fd8:	ldrdeq	fp, [r2], -r0
   25fdc:	strdeq	fp, [r2], -r4
   25fe0:	andeq	fp, r2, ip, lsl r4
   25fe4:	andeq	fp, r2, r8, asr #8
   25fe8:	muleq	r2, r0, r2
   25fec:	andeq	fp, r2, ip, lsr #9
   25ff0:	push	{r3}		; (str r3, [sp, #-4]!)
   25ff4:	push	{lr}		; (str lr, [sp, #-4]!)
   25ff8:	sub	sp, sp, #56	; 0x38
   25ffc:	add	r3, sp, #64	; 0x40
   26000:	ldr	ip, [sp, #64]	; 0x40
   26004:	str	r3, [sp, #12]
   26008:	cmp	ip, #0
   2600c:	str	ip, [sp, #16]
   26010:	beq	260a8 <__assert_fail@plt+0x140a0>
   26014:	ldr	ip, [sp, #68]	; 0x44
   26018:	cmp	ip, #0
   2601c:	str	ip, [sp, #20]
   26020:	beq	260c8 <__assert_fail@plt+0x140c0>
   26024:	ldr	ip, [sp, #72]	; 0x48
   26028:	cmp	ip, #0
   2602c:	str	ip, [sp, #24]
   26030:	beq	260d0 <__assert_fail@plt+0x140c8>
   26034:	ldr	ip, [sp, #76]	; 0x4c
   26038:	cmp	ip, #0
   2603c:	str	ip, [sp, #28]
   26040:	beq	260d8 <__assert_fail@plt+0x140d0>
   26044:	ldr	ip, [sp, #80]	; 0x50
   26048:	cmp	ip, #0
   2604c:	str	ip, [sp, #32]
   26050:	beq	260e0 <__assert_fail@plt+0x140d8>
   26054:	ldr	ip, [sp, #84]	; 0x54
   26058:	cmp	ip, #0
   2605c:	str	ip, [sp, #36]	; 0x24
   26060:	beq	260e8 <__assert_fail@plt+0x140e0>
   26064:	ldr	ip, [sp, #88]	; 0x58
   26068:	cmp	ip, #0
   2606c:	str	ip, [sp, #40]	; 0x28
   26070:	beq	260f0 <__assert_fail@plt+0x140e8>
   26074:	ldr	ip, [sp, #92]	; 0x5c
   26078:	cmp	ip, #0
   2607c:	str	ip, [sp, #44]	; 0x2c
   26080:	beq	260f8 <__assert_fail@plt+0x140f0>
   26084:	ldr	ip, [sp, #96]	; 0x60
   26088:	cmp	ip, #0
   2608c:	str	ip, [sp, #48]	; 0x30
   26090:	beq	26100 <__assert_fail@plt+0x140f8>
   26094:	ldr	ip, [sp, #100]	; 0x64
   26098:	cmp	ip, #0
   2609c:	str	ip, [sp, #52]	; 0x34
   260a0:	movne	ip, #10
   260a4:	moveq	ip, #9
   260a8:	add	r3, sp, #16
   260ac:	stm	sp, {r3, ip}
   260b0:	ldr	r3, [sp, #60]	; 0x3c
   260b4:	bl	2579c <__assert_fail@plt+0x13794>
   260b8:	add	sp, sp, #56	; 0x38
   260bc:	pop	{lr}		; (ldr lr, [sp], #4)
   260c0:	add	sp, sp, #4
   260c4:	bx	lr
   260c8:	mov	ip, #1
   260cc:	b	260a8 <__assert_fail@plt+0x140a0>
   260d0:	mov	ip, #2
   260d4:	b	260a8 <__assert_fail@plt+0x140a0>
   260d8:	mov	ip, #3
   260dc:	b	260a8 <__assert_fail@plt+0x140a0>
   260e0:	mov	ip, #4
   260e4:	b	260a8 <__assert_fail@plt+0x140a0>
   260e8:	mov	ip, #5
   260ec:	b	260a8 <__assert_fail@plt+0x140a0>
   260f0:	mov	ip, #6
   260f4:	b	260a8 <__assert_fail@plt+0x140a0>
   260f8:	mov	ip, #7
   260fc:	b	260a8 <__assert_fail@plt+0x140a0>
   26100:	mov	ip, #8
   26104:	b	260a8 <__assert_fail@plt+0x140a0>
   26108:	ldr	r3, [pc, #116]	; 26184 <__assert_fail@plt+0x1417c>
   2610c:	push	{r4, lr}
   26110:	mov	r0, #10
   26114:	ldr	r1, [r3]
   26118:	bl	11c00 <fputc_unlocked@plt>
   2611c:	mov	r2, #5
   26120:	ldr	r1, [pc, #96]	; 26188 <__assert_fail@plt+0x14180>
   26124:	mov	r0, #0
   26128:	bl	11c0c <dcgettext@plt>
   2612c:	ldr	r2, [pc, #88]	; 2618c <__assert_fail@plt+0x14184>
   26130:	mov	r1, r0
   26134:	mov	r0, #1
   26138:	bl	11e70 <__printf_chk@plt>
   2613c:	mov	r2, #5
   26140:	ldr	r1, [pc, #72]	; 26190 <__assert_fail@plt+0x14188>
   26144:	mov	r0, #0
   26148:	bl	11c0c <dcgettext@plt>
   2614c:	ldr	r3, [pc, #64]	; 26194 <__assert_fail@plt+0x1418c>
   26150:	ldr	r2, [pc, #64]	; 26198 <__assert_fail@plt+0x14190>
   26154:	mov	r1, r0
   26158:	mov	r0, #1
   2615c:	bl	11e70 <__printf_chk@plt>
   26160:	mov	r2, #5
   26164:	ldr	r1, [pc, #48]	; 2619c <__assert_fail@plt+0x14194>
   26168:	mov	r0, #0
   2616c:	bl	11c0c <dcgettext@plt>
   26170:	ldr	r2, [pc, #40]	; 261a0 <__assert_fail@plt+0x14198>
   26174:	pop	{r4, lr}
   26178:	mov	r1, r0
   2617c:	mov	r0, #1
   26180:	b	11e70 <__printf_chk@plt>
   26184:	ldrdeq	ip, [r3], -ip	; <UNPREDICTABLE>
   26188:	andeq	fp, r2, r8, ror #9
   2618c:	strdeq	fp, [r2], -ip
   26190:	andeq	fp, r2, r4, lsl r5
   26194:	andeq	sl, r2, r4, lsl #11
   26198:	andeq	sl, r2, ip, lsr #11
   2619c:	andeq	fp, r2, r8, lsr #10
   261a0:	andeq	fp, r2, r0, asr r5
   261a4:	push	{r4, r5, r6, lr}
   261a8:	mov	r6, r0
   261ac:	mov	r5, r1
   261b0:	mov	r4, r2
   261b4:	bl	284c0 <_obstack_memory_used@@Base+0x34>
   261b8:	cmp	r0, #0
   261bc:	popne	{r4, r5, r6, pc}
   261c0:	cmp	r6, #0
   261c4:	beq	261d4 <__assert_fail@plt+0x141cc>
   261c8:	cmp	r5, #0
   261cc:	cmpne	r4, #0
   261d0:	popeq	{r4, r5, r6, pc}
   261d4:	bl	26820 <__assert_fail@plt+0x14818>
   261d8:	push	{r4, lr}
   261dc:	bl	2799c <__assert_fail@plt+0x15994>
   261e0:	cmp	r0, #0
   261e4:	popne	{r4, pc}
   261e8:	bl	26820 <__assert_fail@plt+0x14818>
   261ec:	push	{r4, lr}
   261f0:	bl	2799c <__assert_fail@plt+0x15994>
   261f4:	cmp	r0, #0
   261f8:	popne	{r4, pc}
   261fc:	bl	26820 <__assert_fail@plt+0x14818>
   26200:	push	{r4, lr}
   26204:	bl	2799c <__assert_fail@plt+0x15994>
   26208:	cmp	r0, #0
   2620c:	popne	{r4, pc}
   26210:	bl	26820 <__assert_fail@plt+0x14818>
   26214:	push	{r4, r5, r6, lr}
   26218:	mov	r5, r0
   2621c:	mov	r4, r1
   26220:	bl	279c8 <__assert_fail@plt+0x159c0>
   26224:	cmp	r0, #0
   26228:	popne	{r4, r5, r6, pc}
   2622c:	adds	r4, r4, #0
   26230:	movne	r4, #1
   26234:	cmp	r5, #0
   26238:	orreq	r4, r4, #1
   2623c:	cmp	r4, #0
   26240:	popeq	{r4, r5, r6, pc}
   26244:	bl	26820 <__assert_fail@plt+0x14818>
   26248:	push	{r4, lr}
   2624c:	cmp	r1, #0
   26250:	orreq	r1, r1, #1
   26254:	bl	279c8 <__assert_fail@plt+0x159c0>
   26258:	cmp	r0, #0
   2625c:	popne	{r4, pc}
   26260:	bl	26820 <__assert_fail@plt+0x14818>
   26264:	push	{r4, r5, r6, lr}
   26268:	mov	r6, r0
   2626c:	mov	r5, r1
   26270:	mov	r4, r2
   26274:	bl	284c0 <_obstack_memory_used@@Base+0x34>
   26278:	cmp	r0, #0
   2627c:	popne	{r4, r5, r6, pc}
   26280:	cmp	r6, #0
   26284:	beq	26294 <__assert_fail@plt+0x1428c>
   26288:	cmp	r5, #0
   2628c:	cmpne	r4, #0
   26290:	popeq	{r4, r5, r6, pc}
   26294:	bl	26820 <__assert_fail@plt+0x14818>
   26298:	cmp	r2, #0
   2629c:	cmpne	r1, #0
   262a0:	moveq	r2, #1
   262a4:	moveq	r1, r2
   262a8:	push	{r4, lr}
   262ac:	bl	284c0 <_obstack_memory_used@@Base+0x34>
   262b0:	cmp	r0, #0
   262b4:	popne	{r4, pc}
   262b8:	bl	26820 <__assert_fail@plt+0x14818>
   262bc:	push	{r4, lr}
   262c0:	mov	r2, r1
   262c4:	mov	r1, r0
   262c8:	mov	r0, #0
   262cc:	bl	284c0 <_obstack_memory_used@@Base+0x34>
   262d0:	cmp	r0, #0
   262d4:	popne	{r4, pc}
   262d8:	bl	26820 <__assert_fail@plt+0x14818>
   262dc:	cmp	r1, #0
   262e0:	cmpne	r0, #0
   262e4:	moveq	r2, #1
   262e8:	movne	r2, r1
   262ec:	moveq	r1, r2
   262f0:	movne	r1, r0
   262f4:	push	{r4, lr}
   262f8:	mov	r0, #0
   262fc:	bl	284c0 <_obstack_memory_used@@Base+0x34>
   26300:	cmp	r0, #0
   26304:	popne	{r4, pc}
   26308:	bl	26820 <__assert_fail@plt+0x14818>
   2630c:	cmp	r0, #0
   26310:	push	{r4, r5, r6, lr}
   26314:	mov	r5, r1
   26318:	ldr	r4, [r1]
   2631c:	beq	26358 <__assert_fail@plt+0x14350>
   26320:	lsr	r2, r4, #1
   26324:	add	r3, r2, #1
   26328:	mvn	r3, r3
   2632c:	cmp	r4, r3
   26330:	bhi	26374 <__assert_fail@plt+0x1436c>
   26334:	add	r4, r4, #1
   26338:	add	r4, r4, r2
   2633c:	mov	r1, r4
   26340:	mov	r2, #1
   26344:	bl	284c0 <_obstack_memory_used@@Base+0x34>
   26348:	cmp	r0, #0
   2634c:	beq	26378 <__assert_fail@plt+0x14370>
   26350:	str	r4, [r5]
   26354:	pop	{r4, r5, r6, pc}
   26358:	cmp	r4, #0
   2635c:	moveq	r4, #64	; 0x40
   26360:	mov	r1, r4
   26364:	mov	r2, #1
   26368:	bl	284c0 <_obstack_memory_used@@Base+0x34>
   2636c:	cmp	r0, #0
   26370:	bne	26350 <__assert_fail@plt+0x14348>
   26374:	bl	26820 <__assert_fail@plt+0x14818>
   26378:	cmp	r4, #0
   2637c:	bne	26374 <__assert_fail@plt+0x1436c>
   26380:	str	r4, [r5]
   26384:	pop	{r4, r5, r6, pc}
   26388:	cmp	r0, #0
   2638c:	push	{r4, r5, r6, lr}
   26390:	mov	r5, r1
   26394:	ldr	r4, [r1]
   26398:	mov	r6, r2
   2639c:	beq	263e0 <__assert_fail@plt+0x143d8>
   263a0:	lsr	r1, r4, #1
   263a4:	add	r3, r1, #1
   263a8:	mvn	r3, r3
   263ac:	cmp	r4, r3
   263b0:	bhi	26418 <__assert_fail@plt+0x14410>
   263b4:	add	r4, r4, #1
   263b8:	add	r4, r4, r1
   263bc:	mov	r1, r4
   263c0:	bl	284c0 <_obstack_memory_used@@Base+0x34>
   263c4:	cmp	r0, #0
   263c8:	bne	263d8 <__assert_fail@plt+0x143d0>
   263cc:	cmp	r4, #0
   263d0:	cmpne	r6, #0
   263d4:	bne	26418 <__assert_fail@plt+0x14410>
   263d8:	str	r4, [r5]
   263dc:	pop	{r4, r5, r6, pc}
   263e0:	cmp	r4, #0
   263e4:	bne	26400 <__assert_fail@plt+0x143f8>
   263e8:	mov	r1, r2
   263ec:	mov	r0, #64	; 0x40
   263f0:	bl	28518 <_obstack_memory_used@@Base+0x8c>
   263f4:	cmp	r0, #0
   263f8:	movne	r4, r0
   263fc:	addeq	r4, r0, #1
   26400:	mov	r2, r6
   26404:	mov	r1, r4
   26408:	mov	r0, #0
   2640c:	bl	284c0 <_obstack_memory_used@@Base+0x34>
   26410:	cmp	r0, #0
   26414:	bne	263d8 <__assert_fail@plt+0x143d0>
   26418:	bl	26820 <__assert_fail@plt+0x14818>
   2641c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26420:	sub	sp, sp, #12
   26424:	ldr	r6, [r1]
   26428:	mov	r8, r1
   2642c:	mov	r9, r0
   26430:	asrs	r4, r6, #1
   26434:	mov	sl, r2
   26438:	mov	fp, r3
   2643c:	ldr	r7, [sp, #48]	; 0x30
   26440:	bmi	265bc <__assert_fail@plt+0x145b4>
   26444:	mvn	r1, #-2147483648	; 0x80000000
   26448:	sub	r1, r1, r4
   2644c:	cmp	r6, r1
   26450:	movle	r1, #0
   26454:	movgt	r1, #1
   26458:	mvn	r3, fp
   2645c:	cmp	r1, #0
   26460:	addeq	r4, r4, r6
   26464:	mvnne	r4, #-2147483648	; 0x80000000
   26468:	lsr	r3, r3, #31
   2646c:	cmp	fp, r4
   26470:	movge	r2, #0
   26474:	andlt	r2, r3, #1
   26478:	cmp	r2, #0
   2647c:	beq	2656c <__assert_fail@plt+0x14564>
   26480:	cmp	r7, #0
   26484:	blt	26654 <__assert_fail@plt+0x1464c>
   26488:	bne	2664c <__assert_fail@plt+0x14644>
   2648c:	mov	r5, #64	; 0x40
   26490:	mov	r1, r7
   26494:	mov	r0, r5
   26498:	str	r3, [sp, #4]
   2649c:	bl	28724 <_obstack_memory_used@@Base+0x298>
   264a0:	mov	r1, r7
   264a4:	mov	r4, r0
   264a8:	mov	r0, r5
   264ac:	bl	28944 <_obstack_memory_used@@Base+0x4b8>
   264b0:	ldr	r3, [sp, #4]
   264b4:	sub	r5, r5, r1
   264b8:	cmp	r9, #0
   264bc:	sub	r2, r4, r6
   264c0:	streq	r9, [r8]
   264c4:	cmp	r2, sl
   264c8:	bge	2654c <__assert_fail@plt+0x14544>
   264cc:	cmp	sl, #0
   264d0:	blt	265ec <__assert_fail@plt+0x145e4>
   264d4:	cmp	r6, #0
   264d8:	blt	264f8 <__assert_fail@plt+0x144f0>
   264dc:	mvn	r2, #-2147483648	; 0x80000000
   264e0:	sub	r2, r2, sl
   264e4:	cmp	r6, r2
   264e8:	movle	r2, #0
   264ec:	movgt	r2, #1
   264f0:	cmp	r2, #0
   264f4:	bne	265e8 <__assert_fail@plt+0x145e0>
   264f8:	add	r6, r6, sl
   264fc:	cmp	fp, r6
   26500:	movge	r3, #0
   26504:	andlt	r3, r3, #1
   26508:	cmp	r3, #0
   2650c:	mov	r4, r6
   26510:	bne	265e8 <__assert_fail@plt+0x145e0>
   26514:	cmp	r7, #0
   26518:	blt	26600 <__assert_fail@plt+0x145f8>
   2651c:	beq	26548 <__assert_fail@plt+0x14540>
   26520:	cmp	r6, #0
   26524:	blt	266a4 <__assert_fail@plt+0x1469c>
   26528:	mov	r1, r7
   2652c:	mvn	r0, #-2147483648	; 0x80000000
   26530:	bl	28724 <_obstack_memory_used@@Base+0x298>
   26534:	cmp	r6, r0
   26538:	movle	r0, #0
   2653c:	movgt	r0, #1
   26540:	cmp	r0, #0
   26544:	bne	265e8 <__assert_fail@plt+0x145e0>
   26548:	mul	r5, r6, r7
   2654c:	mov	r1, r5
   26550:	mov	r0, r9
   26554:	bl	279c8 <__assert_fail@plt+0x159c0>
   26558:	cmp	r0, #0
   2655c:	beq	265d0 <__assert_fail@plt+0x145c8>
   26560:	str	r4, [r8]
   26564:	add	sp, sp, #12
   26568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2656c:	cmp	r7, #0
   26570:	blt	2662c <__assert_fail@plt+0x14624>
   26574:	beq	2648c <__assert_fail@plt+0x14484>
   26578:	cmp	r4, #0
   2657c:	blt	2665c <__assert_fail@plt+0x14654>
   26580:	mov	r1, r7
   26584:	mvn	r0, #-2147483648	; 0x80000000
   26588:	str	r3, [sp, #4]
   2658c:	bl	28724 <_obstack_memory_used@@Base+0x298>
   26590:	ldr	r3, [sp, #4]
   26594:	cmp	r0, r4
   26598:	movge	r0, #0
   2659c:	movlt	r0, #1
   265a0:	cmp	r0, #0
   265a4:	mvnne	r5, #-2147483648	; 0x80000000
   265a8:	bne	26490 <__assert_fail@plt+0x14488>
   265ac:	mul	r5, r7, r4
   265b0:	cmp	r5, #63	; 0x3f
   265b4:	bgt	264b8 <__assert_fail@plt+0x144b0>
   265b8:	b	2648c <__assert_fail@plt+0x14484>
   265bc:	rsb	r1, r4, #-2147483648	; 0x80000000
   265c0:	cmp	r6, r1
   265c4:	movge	r1, #0
   265c8:	movlt	r1, #1
   265cc:	b	26458 <__assert_fail@plt+0x14450>
   265d0:	adds	r5, r5, #0
   265d4:	movne	r5, #1
   265d8:	cmp	r9, #0
   265dc:	orreq	r5, r5, #1
   265e0:	cmp	r5, #0
   265e4:	beq	26560 <__assert_fail@plt+0x14558>
   265e8:	bl	26820 <__assert_fail@plt+0x14818>
   265ec:	rsb	r2, sl, #-2147483648	; 0x80000000
   265f0:	cmp	r6, r2
   265f4:	movge	r2, #0
   265f8:	movlt	r2, #1
   265fc:	b	264f0 <__assert_fail@plt+0x144e8>
   26600:	cmp	r6, #0
   26604:	blt	26688 <__assert_fail@plt+0x14680>
   26608:	cmn	r7, #1
   2660c:	beq	26548 <__assert_fail@plt+0x14540>
   26610:	mov	r1, r7
   26614:	mov	r0, #-2147483648	; 0x80000000
   26618:	bl	28724 <_obstack_memory_used@@Base+0x298>
   2661c:	cmp	r6, r0
   26620:	movle	r0, #0
   26624:	movgt	r0, #1
   26628:	b	26540 <__assert_fail@plt+0x14538>
   2662c:	cmp	r4, #0
   26630:	blt	266c8 <__assert_fail@plt+0x146c0>
   26634:	cmn	r7, #1
   26638:	beq	265ac <__assert_fail@plt+0x145a4>
   2663c:	str	r3, [sp, #4]
   26640:	mov	r1, r7
   26644:	mov	r0, #-2147483648	; 0x80000000
   26648:	b	2658c <__assert_fail@plt+0x14584>
   2664c:	mov	r4, fp
   26650:	b	26580 <__assert_fail@plt+0x14578>
   26654:	mov	r4, fp
   26658:	b	26634 <__assert_fail@plt+0x1462c>
   2665c:	cmn	r4, #1
   26660:	beq	265ac <__assert_fail@plt+0x145a4>
   26664:	mov	r1, r4
   26668:	mov	r0, #-2147483648	; 0x80000000
   2666c:	str	r3, [sp, #4]
   26670:	bl	28724 <_obstack_memory_used@@Base+0x298>
   26674:	ldr	r3, [sp, #4]
   26678:	cmp	r7, r0
   2667c:	movle	r0, #0
   26680:	movgt	r0, #1
   26684:	b	265a0 <__assert_fail@plt+0x14598>
   26688:	mov	r1, r7
   2668c:	mvn	r0, #-2147483648	; 0x80000000
   26690:	bl	28724 <_obstack_memory_used@@Base+0x298>
   26694:	cmp	r6, r0
   26698:	movge	r0, #0
   2669c:	movlt	r0, #1
   266a0:	b	26540 <__assert_fail@plt+0x14538>
   266a4:	cmn	r6, #1
   266a8:	beq	26548 <__assert_fail@plt+0x14540>
   266ac:	mov	r1, r6
   266b0:	mov	r0, #-2147483648	; 0x80000000
   266b4:	bl	28724 <_obstack_memory_used@@Base+0x298>
   266b8:	cmp	r7, r0
   266bc:	movle	r0, #0
   266c0:	movgt	r0, #1
   266c4:	b	26540 <__assert_fail@plt+0x14538>
   266c8:	mov	r1, r7
   266cc:	mvn	r0, #-2147483648	; 0x80000000
   266d0:	str	r3, [sp, #4]
   266d4:	bl	28724 <_obstack_memory_used@@Base+0x298>
   266d8:	ldr	r3, [sp, #4]
   266dc:	cmp	r0, r4
   266e0:	movle	r0, #0
   266e4:	movgt	r0, #1
   266e8:	b	265a0 <__assert_fail@plt+0x14598>
   266ec:	push	{r4, lr}
   266f0:	mov	r1, #1
   266f4:	bl	27954 <__assert_fail@plt+0x1594c>
   266f8:	cmp	r0, #0
   266fc:	popne	{r4, pc}
   26700:	bl	26820 <__assert_fail@plt+0x14818>
   26704:	push	{r4, lr}
   26708:	mov	r1, #1
   2670c:	bl	27954 <__assert_fail@plt+0x1594c>
   26710:	cmp	r0, #0
   26714:	popne	{r4, pc}
   26718:	bl	26820 <__assert_fail@plt+0x14818>
   2671c:	push	{r4, lr}
   26720:	bl	27954 <__assert_fail@plt+0x1594c>
   26724:	cmp	r0, #0
   26728:	popne	{r4, pc}
   2672c:	bl	26820 <__assert_fail@plt+0x14818>
   26730:	push	{r4, lr}
   26734:	bl	27954 <__assert_fail@plt+0x1594c>
   26738:	cmp	r0, #0
   2673c:	popne	{r4, pc}
   26740:	bl	26820 <__assert_fail@plt+0x14818>
   26744:	push	{r4, r5, r6, lr}
   26748:	mov	r6, r0
   2674c:	mov	r0, r1
   26750:	mov	r4, r1
   26754:	bl	2799c <__assert_fail@plt+0x15994>
   26758:	subs	r5, r0, #0
   2675c:	beq	26774 <__assert_fail@plt+0x1476c>
   26760:	mov	r2, r4
   26764:	mov	r1, r6
   26768:	bl	11b7c <memcpy@plt>
   2676c:	mov	r0, r5
   26770:	pop	{r4, r5, r6, pc}
   26774:	bl	26820 <__assert_fail@plt+0x14818>
   26778:	push	{r4, r5, r6, lr}
   2677c:	mov	r6, r0
   26780:	mov	r0, r1
   26784:	mov	r4, r1
   26788:	bl	2799c <__assert_fail@plt+0x15994>
   2678c:	subs	r5, r0, #0
   26790:	beq	267a8 <__assert_fail@plt+0x147a0>
   26794:	mov	r2, r4
   26798:	mov	r1, r6
   2679c:	bl	11b7c <memcpy@plt>
   267a0:	mov	r0, r5
   267a4:	pop	{r4, r5, r6, pc}
   267a8:	bl	26820 <__assert_fail@plt+0x14818>
   267ac:	push	{r4, r5, r6, lr}
   267b0:	mov	r6, r0
   267b4:	add	r0, r1, #1
   267b8:	mov	r4, r1
   267bc:	bl	2799c <__assert_fail@plt+0x15994>
   267c0:	subs	r5, r0, #0
   267c4:	beq	267e4 <__assert_fail@plt+0x147dc>
   267c8:	mov	r3, #0
   267cc:	mov	r1, r6
   267d0:	strb	r3, [r5, r4]
   267d4:	mov	r2, r4
   267d8:	bl	11b7c <memcpy@plt>
   267dc:	mov	r0, r5
   267e0:	pop	{r4, r5, r6, pc}
   267e4:	bl	26820 <__assert_fail@plt+0x14818>
   267e8:	push	{r4, r5, r6, lr}
   267ec:	mov	r6, r0
   267f0:	bl	11e10 <strlen@plt>
   267f4:	add	r4, r0, #1
   267f8:	mov	r0, r4
   267fc:	bl	2799c <__assert_fail@plt+0x15994>
   26800:	subs	r5, r0, #0
   26804:	beq	2681c <__assert_fail@plt+0x14814>
   26808:	mov	r2, r4
   2680c:	mov	r1, r6
   26810:	bl	11b7c <memcpy@plt>
   26814:	mov	r0, r5
   26818:	pop	{r4, r5, r6, pc}
   2681c:	bl	26820 <__assert_fail@plt+0x14818>
   26820:	ldr	r3, [pc, #44]	; 26854 <__assert_fail@plt+0x1484c>
   26824:	push	{r4, lr}
   26828:	mov	r2, #5
   2682c:	ldr	r1, [pc, #36]	; 26858 <__assert_fail@plt+0x14850>
   26830:	mov	r0, #0
   26834:	ldr	r4, [r3]
   26838:	bl	11c0c <dcgettext@plt>
   2683c:	ldr	r2, [pc, #24]	; 2685c <__assert_fail@plt+0x14854>
   26840:	mov	r1, #0
   26844:	mov	r3, r0
   26848:	mov	r0, r4
   2684c:	bl	11d50 <error@plt>
   26850:	bl	11fe4 <abort@plt>
   26854:	andeq	ip, r3, r4, ror r2
   26858:	andeq	fp, r2, r0, lsr #11
   2685c:	andeq	r9, r2, ip, ror #8
   26860:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   26864:	sub	sp, sp, #8
   26868:	mov	r9, r1
   2686c:	mov	r6, r2
   26870:	mov	r7, r3
   26874:	mov	r8, r0
   26878:	bl	27eb4 <__assert_fail@plt+0x15eac>
   2687c:	mov	r5, r0
   26880:	bl	11e34 <__errno_location@plt>
   26884:	ldr	r4, [r0]
   26888:	cmp	r4, #0
   2688c:	beq	26930 <__assert_fail@plt+0x14928>
   26890:	mov	r2, #5
   26894:	ldr	r1, [pc, #160]	; 2693c <__assert_fail@plt+0x14934>
   26898:	mov	r0, #0
   2689c:	bl	11c0c <dcgettext@plt>
   268a0:	mov	r1, r4
   268a4:	mov	r2, r0
   268a8:	mov	r0, #0
   268ac:	bl	11d50 <error@plt>
   268b0:	mov	r2, #5
   268b4:	ldr	r1, [pc, #132]	; 26940 <__assert_fail@plt+0x14938>
   268b8:	mov	r0, #0
   268bc:	bl	11c0c <dcgettext@plt>
   268c0:	mov	r1, #0
   268c4:	mov	r2, r0
   268c8:	mov	r0, r1
   268cc:	bl	11d50 <error@plt>
   268d0:	ldr	r3, [pc, #108]	; 26944 <__assert_fail@plt+0x1493c>
   268d4:	mov	r2, #5
   268d8:	ldr	r1, [pc, #104]	; 26948 <__assert_fail@plt+0x14940>
   268dc:	mov	r0, #0
   268e0:	ldr	r4, [r3]
   268e4:	bl	11c0c <dcgettext@plt>
   268e8:	mov	r2, r8
   268ec:	mov	r3, r9
   268f0:	mov	r1, #8
   268f4:	mov	sl, r0
   268f8:	mov	r0, #0
   268fc:	bl	22990 <__assert_fail@plt+0x10988>
   26900:	mov	r3, r7
   26904:	mov	r2, r6
   26908:	mov	r1, #8
   2690c:	mov	r8, r0
   26910:	mov	r0, #1
   26914:	bl	22990 <__assert_fail@plt+0x10988>
   26918:	mov	r3, r8
   2691c:	mov	r2, sl
   26920:	mov	r1, #0
   26924:	str	r0, [sp]
   26928:	mov	r0, r4
   2692c:	bl	11d50 <error@plt>
   26930:	mov	r0, r5
   26934:	add	sp, sp, #8
   26938:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2693c:			; <UNDEFINED> instruction: 0x0002b5b4
   26940:	ldrdeq	fp, [r2], -r0
   26944:	andeq	ip, r3, r4, ror r2
   26948:	strdeq	fp, [r2], -ip
   2694c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   26950:	sub	sp, sp, #8
   26954:	mov	r9, r1
   26958:	mov	r6, r2
   2695c:	mov	r7, r3
   26960:	mov	r8, r0
   26964:	bl	27fc4 <__assert_fail@plt+0x15fbc>
   26968:	mov	r5, r0
   2696c:	bl	11e34 <__errno_location@plt>
   26970:	ldr	r4, [r0]
   26974:	cmp	r4, #0
   26978:	beq	26a1c <__assert_fail@plt+0x14a14>
   2697c:	mov	r2, #5
   26980:	ldr	r1, [pc, #160]	; 26a28 <__assert_fail@plt+0x14a20>
   26984:	mov	r0, #0
   26988:	bl	11c0c <dcgettext@plt>
   2698c:	mov	r1, r4
   26990:	mov	r2, r0
   26994:	mov	r0, #0
   26998:	bl	11d50 <error@plt>
   2699c:	mov	r2, #5
   269a0:	ldr	r1, [pc, #132]	; 26a2c <__assert_fail@plt+0x14a24>
   269a4:	mov	r0, #0
   269a8:	bl	11c0c <dcgettext@plt>
   269ac:	mov	r1, #0
   269b0:	mov	r2, r0
   269b4:	mov	r0, r1
   269b8:	bl	11d50 <error@plt>
   269bc:	ldr	r3, [pc, #108]	; 26a30 <__assert_fail@plt+0x14a28>
   269c0:	mov	r2, #5
   269c4:	ldr	r1, [pc, #104]	; 26a34 <__assert_fail@plt+0x14a2c>
   269c8:	mov	r0, #0
   269cc:	ldr	r4, [r3]
   269d0:	bl	11c0c <dcgettext@plt>
   269d4:	mov	r2, r8
   269d8:	sub	r3, r9, #1
   269dc:	mov	r1, #8
   269e0:	mov	sl, r0
   269e4:	mov	r0, #0
   269e8:	bl	22990 <__assert_fail@plt+0x10988>
   269ec:	sub	r3, r7, #1
   269f0:	mov	r2, r6
   269f4:	mov	r1, #8
   269f8:	mov	r8, r0
   269fc:	mov	r0, #1
   26a00:	bl	22990 <__assert_fail@plt+0x10988>
   26a04:	mov	r3, r8
   26a08:	mov	r2, sl
   26a0c:	mov	r1, #0
   26a10:	str	r0, [sp]
   26a14:	mov	r0, r4
   26a18:	bl	11d50 <error@plt>
   26a1c:	mov	r0, r5
   26a20:	add	sp, sp, #8
   26a24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26a28:			; <UNDEFINED> instruction: 0x0002b5b4
   26a2c:	ldrdeq	fp, [r2], -r0
   26a30:	andeq	ip, r3, r4, ror r2
   26a34:	strdeq	fp, [r2], -ip
   26a38:	vldr	d7, [pc, #144]	; 26ad0 <__assert_fail@plt+0x14ac8>
   26a3c:	push	{r4, r5, lr}
   26a40:	vpush	{d8}
   26a44:	vmov.f64	d8, d0
   26a48:	vcmpe.f64	d0, d7
   26a4c:	sub	sp, sp, #12
   26a50:	vmrs	APSR_nzcv, fpscr
   26a54:	bge	26aa4 <__assert_fail@plt+0x14a9c>
   26a58:	bl	11e34 <__errno_location@plt>
   26a5c:	mov	r4, r0
   26a60:	vmov.f64	d0, d8
   26a64:	mov	r0, sp
   26a68:	bl	27aa0 <__assert_fail@plt+0x15a98>
   26a6c:	mov	r5, #0
   26a70:	b	26a80 <__assert_fail@plt+0x14a78>
   26a74:	ldr	r3, [r4]
   26a78:	bics	r3, r3, #4
   26a7c:	bne	26ac0 <__assert_fail@plt+0x14ab8>
   26a80:	str	r5, [r4]
   26a84:	mov	r1, sp
   26a88:	mov	r0, sp
   26a8c:	bl	11b58 <nanosleep@plt>
   26a90:	cmp	r0, #0
   26a94:	bne	26a74 <__assert_fail@plt+0x14a6c>
   26a98:	add	sp, sp, #12
   26a9c:	vpop	{d8}
   26aa0:	pop	{r4, r5, pc}
   26aa4:	bl	11e34 <__errno_location@plt>
   26aa8:	mov	r4, r0
   26aac:	bl	11b04 <pause@plt>
   26ab0:	ldr	r3, [r4]
   26ab4:	cmp	r3, #4
   26ab8:	beq	26aac <__assert_fail@plt+0x14aa4>
   26abc:	b	26a60 <__assert_fail@plt+0x14a58>
   26ac0:	mvn	r0, #0
   26ac4:	add	sp, sp, #12
   26ac8:	vpop	{d8}
   26acc:	pop	{r4, r5, pc}
   26ad0:	andeq	r0, r0, r0
   26ad4:	mvnmi	r0, r0
   26ad8:	ldr	ip, [pc, #148]	; 26b74 <__assert_fail@plt+0x14b6c>
   26adc:	sub	r0, r0, #1
   26ae0:	push	{lr}		; (str lr, [sp, #-4]!)
   26ae4:	sub	sp, sp, #20
   26ae8:	ldr	r5, [ip]
   26aec:	cmp	r0, #3
   26af0:	ldrls	pc, [pc, r0, lsl #2]
   26af4:	b	26b60 <__assert_fail@plt+0x14b58>
   26af8:	andeq	r6, r2, ip, ror #22
   26afc:	andeq	r6, r2, r4, ror #22
   26b00:	andeq	r6, r2, r4, ror #22
   26b04:	andeq	r6, r2, r8, lsl #22
   26b08:	ldr	r0, [pc, #104]	; 26b78 <__assert_fail@plt+0x14b70>
   26b0c:	cmp	r1, #0
   26b10:	movlt	r3, #0
   26b14:	ldrlt	r4, [pc, #96]	; 26b7c <__assert_fail@plt+0x14b74>
   26b18:	ldrge	r6, [r3, r1, lsl #4]
   26b1c:	sublt	r4, r4, r1
   26b20:	strblt	r2, [sp, #12]
   26b24:	mov	r1, r0
   26b28:	mov	r2, #5
   26b2c:	mov	r0, #0
   26b30:	strblt	r3, [sp, #13]
   26b34:	addlt	r6, sp, #12
   26b38:	ldrge	r4, [pc, #60]	; 26b7c <__assert_fail@plt+0x14b74>
   26b3c:	bl	11c0c <dcgettext@plt>
   26b40:	ldr	r3, [sp, #24]
   26b44:	str	r6, [sp]
   26b48:	str	r3, [sp, #4]
   26b4c:	mov	r1, #0
   26b50:	mov	r3, r4
   26b54:	mov	r2, r0
   26b58:	mov	r0, r5
   26b5c:	bl	11d50 <error@plt>
   26b60:	bl	11fe4 <abort@plt>
   26b64:	ldr	r0, [pc, #20]	; 26b80 <__assert_fail@plt+0x14b78>
   26b68:	b	26b0c <__assert_fail@plt+0x14b04>
   26b6c:	ldr	r0, [pc, #16]	; 26b84 <__assert_fail@plt+0x14b7c>
   26b70:	b	26b0c <__assert_fail@plt+0x14b04>
   26b74:	andeq	ip, r3, r4, ror r2
   26b78:	andeq	fp, r2, r4, lsr #12
   26b7c:	andeq	fp, r2, r8, lsl #13
   26b80:	andeq	fp, r2, r0, asr #12
   26b84:	andeq	fp, r2, r8, ror #12
   26b88:	cmp	r2, #36	; 0x24
   26b8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b90:	sub	sp, sp, #52	; 0x34
   26b94:	bhi	27924 <__assert_fail@plt+0x1591c>
   26b98:	cmp	r1, #0
   26b9c:	mov	r6, r2
   26ba0:	mov	sl, r0
   26ba4:	mov	r5, r1
   26ba8:	mov	r8, r3
   26bac:	addeq	r5, sp, #44	; 0x2c
   26bb0:	bl	11e34 <__errno_location@plt>
   26bb4:	mov	r3, #0
   26bb8:	str	r3, [r0]
   26bbc:	mov	fp, r0
   26bc0:	bl	11dec <__ctype_b_loc@plt>
   26bc4:	ldrb	r3, [sl]
   26bc8:	mov	r2, sl
   26bcc:	ldr	r0, [r0]
   26bd0:	b	26bd8 <__assert_fail@plt+0x14bd0>
   26bd4:	ldrb	r3, [r2, #1]!
   26bd8:	lsl	r1, r3, #1
   26bdc:	ldrh	r4, [r0, r1]
   26be0:	ands	r4, r4, #8192	; 0x2000
   26be4:	bne	26bd4 <__assert_fail@plt+0x14bcc>
   26be8:	cmp	r3, #45	; 0x2d
   26bec:	bne	26c00 <__assert_fail@plt+0x14bf8>
   26bf0:	mov	r4, #4
   26bf4:	mov	r0, r4
   26bf8:	add	sp, sp, #52	; 0x34
   26bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26c00:	mov	r2, r6
   26c04:	mov	r3, r4
   26c08:	mov	r1, r5
   26c0c:	mov	r0, sl
   26c10:	bl	11ba0 <__strtoull_internal@plt>
   26c14:	ldr	r9, [r5]
   26c18:	cmp	sl, r9
   26c1c:	mov	r6, r0
   26c20:	mov	r7, r1
   26c24:	beq	26c6c <__assert_fail@plt+0x14c64>
   26c28:	ldr	r4, [fp]
   26c2c:	cmp	r4, #0
   26c30:	bne	26c5c <__assert_fail@plt+0x14c54>
   26c34:	ldr	r3, [sp, #88]	; 0x58
   26c38:	cmp	r3, #0
   26c3c:	beq	26c4c <__assert_fail@plt+0x14c44>
   26c40:	ldrb	sl, [r9]
   26c44:	cmp	sl, #0
   26c48:	bne	26ca0 <__assert_fail@plt+0x14c98>
   26c4c:	mov	r0, r4
   26c50:	strd	r6, [r8]
   26c54:	add	sp, sp, #52	; 0x34
   26c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26c5c:	cmp	r4, #34	; 0x22
   26c60:	bne	26bf0 <__assert_fail@plt+0x14be8>
   26c64:	mov	r4, #1
   26c68:	b	26c34 <__assert_fail@plt+0x14c2c>
   26c6c:	ldr	r3, [sp, #88]	; 0x58
   26c70:	cmp	r3, #0
   26c74:	beq	26bf0 <__assert_fail@plt+0x14be8>
   26c78:	ldrb	sl, [r9]
   26c7c:	cmp	sl, #0
   26c80:	beq	26bf0 <__assert_fail@plt+0x14be8>
   26c84:	mov	r1, sl
   26c88:	mov	r0, r3
   26c8c:	bl	11e1c <strchr@plt>
   26c90:	cmp	r0, #0
   26c94:	movne	r6, #1
   26c98:	movne	r7, #0
   26c9c:	beq	26bf0 <__assert_fail@plt+0x14be8>
   26ca0:	mov	r1, sl
   26ca4:	ldr	r0, [sp, #88]	; 0x58
   26ca8:	bl	11e1c <strchr@plt>
   26cac:	cmp	r0, #0
   26cb0:	beq	27810 <__assert_fail@plt+0x15808>
   26cb4:	sub	r3, sl, #69	; 0x45
   26cb8:	cmp	r3, #47	; 0x2f
   26cbc:	ldrls	pc, [pc, r3, lsl #2]
   26cc0:	b	26db4 <__assert_fail@plt+0x14dac>
   26cc4:	andeq	r6, r2, r4, lsl #27
   26cc8:			; <UNDEFINED> instruction: 0x00026db4
   26ccc:	andeq	r6, r2, r4, lsl #27
   26cd0:			; <UNDEFINED> instruction: 0x00026db4
   26cd4:			; <UNDEFINED> instruction: 0x00026db4
   26cd8:			; <UNDEFINED> instruction: 0x00026db4
   26cdc:	andeq	r6, r2, r4, lsl #27
   26ce0:			; <UNDEFINED> instruction: 0x00026db4
   26ce4:	andeq	r6, r2, r4, lsl #27
   26ce8:			; <UNDEFINED> instruction: 0x00026db4
   26cec:			; <UNDEFINED> instruction: 0x00026db4
   26cf0:	andeq	r6, r2, r4, lsl #27
   26cf4:			; <UNDEFINED> instruction: 0x00026db4
   26cf8:			; <UNDEFINED> instruction: 0x00026db4
   26cfc:			; <UNDEFINED> instruction: 0x00026db4
   26d00:	andeq	r6, r2, r4, lsl #27
   26d04:			; <UNDEFINED> instruction: 0x00026db4
   26d08:			; <UNDEFINED> instruction: 0x00026db4
   26d0c:			; <UNDEFINED> instruction: 0x00026db4
   26d10:			; <UNDEFINED> instruction: 0x00026db4
   26d14:	andeq	r6, r2, r4, lsl #27
   26d18:	andeq	r6, r2, r4, lsl #27
   26d1c:			; <UNDEFINED> instruction: 0x00026db4
   26d20:			; <UNDEFINED> instruction: 0x00026db4
   26d24:			; <UNDEFINED> instruction: 0x00026db4
   26d28:			; <UNDEFINED> instruction: 0x00026db4
   26d2c:			; <UNDEFINED> instruction: 0x00026db4
   26d30:			; <UNDEFINED> instruction: 0x00026db4
   26d34:			; <UNDEFINED> instruction: 0x00026db4
   26d38:			; <UNDEFINED> instruction: 0x00026db4
   26d3c:			; <UNDEFINED> instruction: 0x00026db4
   26d40:			; <UNDEFINED> instruction: 0x00026db4
   26d44:			; <UNDEFINED> instruction: 0x00026db4
   26d48:			; <UNDEFINED> instruction: 0x00026db4
   26d4c:	andeq	r6, r2, r4, lsl #27
   26d50:			; <UNDEFINED> instruction: 0x00026db4
   26d54:			; <UNDEFINED> instruction: 0x00026db4
   26d58:			; <UNDEFINED> instruction: 0x00026db4
   26d5c:	andeq	r6, r2, r4, lsl #27
   26d60:			; <UNDEFINED> instruction: 0x00026db4
   26d64:	andeq	r6, r2, r4, lsl #27
   26d68:			; <UNDEFINED> instruction: 0x00026db4
   26d6c:			; <UNDEFINED> instruction: 0x00026db4
   26d70:			; <UNDEFINED> instruction: 0x00026db4
   26d74:			; <UNDEFINED> instruction: 0x00026db4
   26d78:			; <UNDEFINED> instruction: 0x00026db4
   26d7c:			; <UNDEFINED> instruction: 0x00026db4
   26d80:	andeq	r6, r2, r4, lsl #27
   26d84:	mov	r1, #48	; 0x30
   26d88:	ldr	r0, [sp, #88]	; 0x58
   26d8c:	bl	11e1c <strchr@plt>
   26d90:	cmp	r0, #0
   26d94:	beq	278a4 <__assert_fail@plt+0x1589c>
   26d98:	ldrb	r3, [r9, #1]
   26d9c:	cmp	r3, #68	; 0x44
   26da0:	beq	27884 <__assert_fail@plt+0x1587c>
   26da4:	cmp	r3, #105	; 0x69
   26da8:	beq	27854 <__assert_fail@plt+0x1584c>
   26dac:	cmp	r3, #66	; 0x42
   26db0:	beq	27884 <__assert_fail@plt+0x1587c>
   26db4:	ldr	r3, [pc, #2948]	; 27940 <__assert_fail@plt+0x15938>
   26db8:	mvn	r2, #0
   26dbc:	mov	r1, #1024	; 0x400
   26dc0:	mov	lr, #0
   26dc4:	strd	r2, [sp]
   26dc8:	mov	r3, #1
   26dcc:	str	r3, [sp, #12]
   26dd0:	sub	sl, sl, #66	; 0x42
   26dd4:	cmp	sl, #53	; 0x35
   26dd8:	ldrls	pc, [pc, sl, lsl #2]
   26ddc:	b	27810 <__assert_fail@plt+0x15808>
   26de0:	andeq	r7, r2, r0, ror #15
   26de4:	andeq	r7, r2, r0, lsl r8
   26de8:	andeq	r7, r2, r0, lsl r8
   26dec:	andeq	r7, r2, ip, asr r6
   26df0:	andeq	r7, r2, r0, lsl r8
   26df4:	muleq	r2, r8, r5
   26df8:	andeq	r7, r2, r0, lsl r8
   26dfc:	andeq	r7, r2, r0, lsl r8
   26e00:	andeq	r7, r2, r0, lsl r8
   26e04:	andeq	r7, r2, ip, lsl r8
   26e08:	andeq	r7, r2, r0, lsl r8
   26e0c:			; <UNDEFINED> instruction: 0x00026eb8
   26e10:	andeq	r7, r2, r0, lsl r8
   26e14:	andeq	r7, r2, r0, lsl r8
   26e18:	andeq	r6, r2, r4, asr #30
   26e1c:	andeq	r7, r2, r0, lsl r8
   26e20:	andeq	r7, r2, r0, lsl r8
   26e24:	andeq	r7, r2, r0, lsl r8
   26e28:	andeq	r7, r2, r4, asr #5
   26e2c:	andeq	r7, r2, r0, lsl r8
   26e30:	andeq	r7, r2, r0, lsl r8
   26e34:	andeq	r7, r2, r0, lsl r8
   26e38:	andeq	r7, r2, r0, lsl r8
   26e3c:	muleq	r2, ip, r0
   26e40:	strdeq	r7, [r2], -r8
   26e44:	andeq	r7, r2, r0, lsl r8
   26e48:	andeq	r7, r2, r0, lsl r8
   26e4c:	andeq	r7, r2, r0, lsl r8
   26e50:	andeq	r7, r2, r0, lsl r8
   26e54:	andeq	r7, r2, r0, lsl r8
   26e58:	andeq	r7, r2, r0, lsl r8
   26e5c:	andeq	r7, r2, r0, lsl r8
   26e60:	andeq	r7, r2, r8, asr #7
   26e64:	andeq	r7, r2, r0, asr #7
   26e68:	andeq	r7, r2, r0, lsl r8
   26e6c:	andeq	r7, r2, r0, lsl r8
   26e70:	andeq	r7, r2, r0, lsl r8
   26e74:	muleq	r2, r8, r5
   26e78:	andeq	r7, r2, r0, lsl r8
   26e7c:	andeq	r7, r2, r0, lsl r8
   26e80:	andeq	r7, r2, r0, lsl r8
   26e84:	andeq	r7, r2, ip, lsl r8
   26e88:	andeq	r7, r2, r0, lsl r8
   26e8c:			; <UNDEFINED> instruction: 0x00026eb8
   26e90:	andeq	r7, r2, r0, lsl r8
   26e94:	andeq	r7, r2, r0, lsl r8
   26e98:	andeq	r7, r2, r0, lsl r8
   26e9c:	andeq	r7, r2, r0, lsl r8
   26ea0:	andeq	r7, r2, r0, lsl r8
   26ea4:	andeq	r7, r2, r0, lsl r8
   26ea8:	andeq	r7, r2, r4, asr #5
   26eac:	andeq	r7, r2, r0, lsl r8
   26eb0:	andeq	r7, r2, r0, lsl r8
   26eb4:	andeq	r7, r2, r4, lsr #7
   26eb8:	mul	r0, r6, lr
   26ebc:	ldrd	sl, [sp]
   26ec0:	umull	r2, r3, r6, r1
   26ec4:	mla	r0, r1, r7, r0
   26ec8:	cmp	r7, fp
   26ecc:	cmpeq	r6, sl
   26ed0:	add	r3, r0, r3
   26ed4:	mvnhi	r3, #0
   26ed8:	mvnhi	r2, #0
   26edc:	mul	r6, r1, r3
   26ee0:	umull	r0, r1, r1, r2
   26ee4:	mla	lr, lr, r2, r6
   26ee8:	ldrd	r6, [sp]
   26eec:	movhi	ip, #1
   26ef0:	movls	ip, #0
   26ef4:	cmp	r7, r3
   26ef8:	cmpeq	r6, r2
   26efc:	mvncc	r0, #0
   26f00:	add	r1, lr, r1
   26f04:	mov	sl, r6
   26f08:	movcc	r1, r0
   26f0c:	mov	fp, r7
   26f10:	cmp	fp, r3
   26f14:	cmpeq	sl, r2
   26f18:	mov	r6, r0
   26f1c:	mov	r7, r1
   26f20:	orrcc	ip, ip, #1
   26f24:	ldr	r2, [sp, #12]
   26f28:	orr	r4, r4, ip
   26f2c:	add	r3, r9, r2
   26f30:	str	r3, [r5]
   26f34:	ldrb	r3, [r9, r2]
   26f38:	cmp	r3, #0
   26f3c:	orrne	r4, r4, #2
   26f40:	b	26c4c <__assert_fail@plt+0x14c44>
   26f44:	ldrd	sl, [sp]
   26f48:	umull	r2, r3, r6, r1
   26f4c:	mul	r0, r6, lr
   26f50:	cmp	r7, fp
   26f54:	cmpeq	r6, sl
   26f58:	mvnhi	r2, #0
   26f5c:	mla	r0, r1, r7, r0
   26f60:	umull	sl, fp, r2, r1
   26f64:	add	r3, r0, r3
   26f68:	mul	r0, lr, r2
   26f6c:	mvnhi	r3, #0
   26f70:	strd	sl, [sp, #16]
   26f74:	ldrd	sl, [sp]
   26f78:	mla	r0, r1, r3, r0
   26f7c:	ldr	ip, [sp, #20]
   26f80:	cmp	r3, fp
   26f84:	add	r0, r0, ip
   26f88:	cmpeq	r2, sl
   26f8c:	str	r0, [sp, #20]
   26f90:	bls	26fa8 <__assert_fail@plt+0x14fa0>
   26f94:	mvn	sl, #0
   26f98:	mvn	fp, #0
   26f9c:	strd	sl, [sp, #16]
   26fa0:	ldr	r0, [sp, #20]
   26fa4:	ldrd	sl, [sp]
   26fa8:	cmp	r7, fp
   26fac:	cmpeq	r6, sl
   26fb0:	mul	r0, r1, r0
   26fb4:	ldrd	r6, [sp, #16]
   26fb8:	mla	ip, lr, r6, r0
   26fbc:	mov	r0, r6
   26fc0:	movhi	r0, #1
   26fc4:	movls	r0, #0
   26fc8:	cmp	r3, fp
   26fcc:	cmpeq	r2, sl
   26fd0:	ldrd	r2, [sp, #16]
   26fd4:	umull	r6, r7, r1, r6
   26fd8:	orrhi	r0, r0, #1
   26fdc:	cmp	fp, r3
   26fe0:	cmpeq	sl, r2
   26fe4:	add	r7, ip, r7
   26fe8:	bcc	278f4 <__assert_fail@plt+0x158ec>
   26fec:	mov	sl, r6
   26ff0:	mov	fp, r7
   26ff4:	strd	r6, [sp, #24]
   26ff8:	mul	r3, r1, fp
   26ffc:	umull	r6, r7, r1, sl
   27000:	mla	ip, lr, sl, r3
   27004:	ldrd	sl, [sp]
   27008:	ldrd	r2, [sp, #16]
   2700c:	add	r7, ip, r7
   27010:	cmp	fp, r3
   27014:	cmpeq	sl, r2
   27018:	mov	r3, fp
   2701c:	mov	r2, sl
   27020:	ldrd	sl, [sp, #24]
   27024:	orrcc	r0, r0, #1
   27028:	str	r0, [sp, #16]
   2702c:	cmp	r3, fp
   27030:	cmpeq	r2, sl
   27034:	bcs	2758c <__assert_fail@plt+0x15584>
   27038:	mvn	r2, #0
   2703c:	mvn	r3, #0
   27040:	mul	ip, lr, r2
   27044:	ldrd	sl, [sp]
   27048:	mla	ip, r1, r3, ip
   2704c:	umull	r6, r7, r2, r1
   27050:	ldrd	r0, [sp, #24]
   27054:	add	r7, ip, r7
   27058:	cmp	fp, r1
   2705c:	ldr	r1, [sp, #16]
   27060:	cmpeq	sl, r0
   27064:	orrcc	r1, r1, #1
   27068:	cmp	r3, fp
   2706c:	cmpeq	r2, sl
   27070:	mvnhi	r0, #0
   27074:	movls	ip, r7
   27078:	movhi	ip, r0
   2707c:	movls	r0, r6
   27080:	cmp	r3, fp
   27084:	cmpeq	r2, sl
   27088:	mov	r7, ip
   2708c:	mov	r6, r0
   27090:	movls	ip, r1
   27094:	orrhi	ip, r1, #1
   27098:	b	26f24 <__assert_fail@plt+0x14f1c>
   2709c:	ldrd	sl, [sp]
   270a0:	umull	r2, r3, r6, r1
   270a4:	mul	r0, r6, lr
   270a8:	cmp	r7, fp
   270ac:	cmpeq	r6, sl
   270b0:	mvnhi	r2, #0
   270b4:	mla	r0, r1, r7, r0
   270b8:	umull	sl, fp, r2, r1
   270bc:	add	r3, r0, r3
   270c0:	mul	r0, lr, r2
   270c4:	mvnhi	r3, #0
   270c8:	strd	sl, [sp, #16]
   270cc:	ldrd	sl, [sp]
   270d0:	mla	r0, r1, r3, r0
   270d4:	ldr	ip, [sp, #20]
   270d8:	cmp	r3, fp
   270dc:	add	r0, r0, ip
   270e0:	cmpeq	r2, sl
   270e4:	str	r0, [sp, #20]
   270e8:	mvnhi	sl, #0
   270ec:	mvnhi	fp, #0
   270f0:	strdhi	sl, [sp, #16]
   270f4:	ldrdhi	sl, [sp]
   270f8:	ldr	r0, [sp, #16]
   270fc:	cmp	r3, fp
   27100:	ldr	r3, [sp, #20]
   27104:	mul	r0, lr, r0
   27108:	cmpeq	r2, sl
   2710c:	mla	r0, r1, r3, r0
   27110:	ldr	r3, [sp, #16]
   27114:	umull	r2, r3, r3, r1
   27118:	strd	r2, [sp, #24]
   2711c:	movhi	r3, #1
   27120:	movls	r3, #0
   27124:	cmp	r7, fp
   27128:	cmpeq	r6, sl
   2712c:	ldrd	r6, [sp, #16]
   27130:	ldr	r2, [sp, #28]
   27134:	movls	ip, r3
   27138:	orrhi	ip, r3, #1
   2713c:	cmp	r7, fp
   27140:	add	r2, r0, r2
   27144:	cmpeq	r6, sl
   27148:	str	r2, [sp, #28]
   2714c:	mvnhi	r2, #0
   27150:	mvnhi	r3, #0
   27154:	strdhi	r2, [sp, #24]
   27158:	ldrd	r6, [sp, #24]
   2715c:	mul	r2, r1, r7
   27160:	umull	sl, fp, r1, r6
   27164:	mla	r3, lr, r6, r2
   27168:	ldrd	r6, [sp]
   2716c:	str	r3, [sp, #32]
   27170:	ldrd	r2, [sp, #16]
   27174:	cmp	r3, r7
   27178:	cmpeq	r2, r6
   2717c:	ldrd	r2, [sp, #24]
   27180:	orrhi	ip, ip, #1
   27184:	cmp	r3, r7
   27188:	ldr	r3, [sp, #32]
   2718c:	cmpeq	r2, r6
   27190:	add	r2, r3, fp
   27194:	mov	fp, r2
   27198:	bhi	278dc <__assert_fail@plt+0x158d4>
   2719c:	strd	sl, [sp, #16]
   271a0:	mul	r2, r1, fp
   271a4:	umull	r6, r7, r1, sl
   271a8:	mla	r3, lr, sl, r2
   271ac:	ldrd	sl, [sp]
   271b0:	str	r3, [sp, #32]
   271b4:	ldrd	r2, [sp, #24]
   271b8:	cmp	r3, fp
   271bc:	cmpeq	r2, sl
   271c0:	ldrd	r2, [sp, #16]
   271c4:	orrhi	ip, ip, #1
   271c8:	cmp	fp, r3
   271cc:	ldr	r3, [sp, #32]
   271d0:	cmpeq	sl, r2
   271d4:	add	r2, r3, r7
   271d8:	mov	r7, r2
   271dc:	mvncc	r7, #0
   271e0:	mvncc	r6, #0
   271e4:	mul	r2, r1, r7
   271e8:	mov	sl, r6
   271ec:	strd	r6, [sp, #24]
   271f0:	mla	r0, lr, sl, r2
   271f4:	ldrd	r2, [sp, #16]
   271f8:	ldrd	sl, [sp]
   271fc:	umull	r6, r7, r1, r6
   27200:	cmp	fp, r3
   27204:	cmpeq	sl, r2
   27208:	mov	r3, fp
   2720c:	mov	r2, sl
   27210:	ldrd	sl, [sp, #24]
   27214:	orrcc	ip, ip, #1
   27218:	add	r7, r0, r7
   2721c:	cmp	r3, fp
   27220:	cmpeq	r2, sl
   27224:	mvncc	r6, #0
   27228:	mvncc	r7, #0
   2722c:	umull	sl, fp, r1, r6
   27230:	mul	r3, r1, r7
   27234:	strd	sl, [sp, #16]
   27238:	mla	r0, lr, r6, r3
   2723c:	ldrd	sl, [sp, #24]
   27240:	ldrd	r2, [sp]
   27244:	cmp	r3, fp
   27248:	cmpeq	r2, sl
   2724c:	orrcc	ip, ip, #1
   27250:	cmp	r3, r7
   27254:	ldr	r3, [sp, #20]
   27258:	cmpeq	r2, r6
   2725c:	add	r3, r0, r3
   27260:	str	r3, [sp, #20]
   27264:	mvncc	r2, #0
   27268:	mvncc	r3, #0
   2726c:	ldrdcs	r2, [sp, #16]
   27270:	ldrd	sl, [sp]
   27274:	mul	r0, r1, r3
   27278:	cmp	fp, r7
   2727c:	str	r0, [sp, #16]
   27280:	cmpeq	sl, r6
   27284:	ldr	r6, [sp, #16]
   27288:	umull	r0, r1, r1, r2
   2728c:	mla	lr, lr, r2, r6
   27290:	orrcc	ip, ip, #1
   27294:	cmp	r3, fp
   27298:	cmpeq	r2, sl
   2729c:	add	r1, lr, r1
   272a0:	bls	272ac <__assert_fail@plt+0x152a4>
   272a4:	mvn	r0, #0
   272a8:	mov	r1, r0
   272ac:	cmp	r3, fp
   272b0:	cmpeq	r2, sl
   272b4:	mov	r6, r0
   272b8:	mov	r7, r1
   272bc:	orrhi	ip, ip, #1
   272c0:	b	26f24 <__assert_fail@plt+0x14f1c>
   272c4:	ldrd	sl, [sp]
   272c8:	umull	r2, r3, r6, r1
   272cc:	mul	r0, r6, lr
   272d0:	cmp	r7, fp
   272d4:	cmpeq	r6, sl
   272d8:	mvnhi	r2, #0
   272dc:	mla	r0, r1, r7, r0
   272e0:	umull	sl, fp, r1, r2
   272e4:	add	r3, r0, r3
   272e8:	mvnhi	r3, #0
   272ec:	strd	sl, [sp, #16]
   272f0:	mul	r0, r1, r3
   272f4:	ldrd	sl, [sp]
   272f8:	mla	r0, lr, r2, r0
   272fc:	ldr	ip, [sp, #20]
   27300:	cmp	fp, r3
   27304:	add	r0, r0, ip
   27308:	cmpeq	sl, r2
   2730c:	str	r0, [sp, #20]
   27310:	mvncc	sl, #0
   27314:	mvncc	fp, #0
   27318:	strdcc	sl, [sp, #16]
   2731c:	ldrdcc	sl, [sp]
   27320:	ldr	r0, [sp, #16]
   27324:	cmp	fp, r3
   27328:	cmpeq	sl, r2
   2732c:	mul	r0, lr, r0
   27330:	ldr	r2, [sp, #20]
   27334:	ldr	r3, [sp, #16]
   27338:	movcc	ip, #1
   2733c:	movcs	ip, #0
   27340:	cmp	r7, fp
   27344:	cmpeq	r6, sl
   27348:	ldrd	r6, [sp, #16]
   2734c:	mla	r0, r1, r2, r0
   27350:	umull	r2, r3, r3, r1
   27354:	orrhi	ip, ip, #1
   27358:	cmp	r7, fp
   2735c:	cmpeq	r6, sl
   27360:	add	r3, r0, r3
   27364:	mvnhi	r3, #0
   27368:	mvnhi	r2, #0
   2736c:	mul	r0, r1, r3
   27370:	cmp	r7, fp
   27374:	str	r0, [sp, #24]
   27378:	cmpeq	r6, sl
   2737c:	ldr	r6, [sp, #24]
   27380:	umull	r0, r1, r1, r2
   27384:	mla	lr, lr, r2, r6
   27388:	orrhi	ip, ip, #1
   2738c:	cmp	fp, r3
   27390:	cmpeq	sl, r2
   27394:	mvncc	r0, #0
   27398:	add	r1, lr, r1
   2739c:	movcc	r1, r0
   273a0:	b	26f10 <__assert_fail@plt+0x14f08>
   273a4:	cmp	r6, #0
   273a8:	sbcs	r3, r7, #0
   273ac:	blt	27844 <__assert_fail@plt+0x1583c>
   273b0:	adds	r6, r6, r6
   273b4:	adc	r7, r7, r7
   273b8:	mov	ip, #0
   273bc:	b	26f24 <__assert_fail@plt+0x14f1c>
   273c0:	mov	ip, #0
   273c4:	b	26f24 <__assert_fail@plt+0x14f1c>
   273c8:	ldr	r3, [pc, #1396]	; 27944 <__assert_fail@plt+0x1593c>
   273cc:	mvn	r2, #0
   273d0:	cmp	r7, r3
   273d4:	cmpeq	r6, r2
   273d8:	bhi	27844 <__assert_fail@plt+0x1583c>
   273dc:	lsl	r3, r7, #9
   273e0:	orr	r3, r3, r6, lsr #23
   273e4:	lsl	r2, r6, #9
   273e8:	mov	r6, r2
   273ec:	mov	r7, r3
   273f0:	mov	ip, #0
   273f4:	b	26f24 <__assert_fail@plt+0x14f1c>
   273f8:	ldrd	sl, [sp]
   273fc:	umull	r2, r3, r6, r1
   27400:	mul	r0, r6, lr
   27404:	cmp	r7, fp
   27408:	cmpeq	r6, sl
   2740c:	mvnhi	r2, #0
   27410:	mla	r0, r1, r7, r0
   27414:	umull	sl, fp, r2, r1
   27418:	add	r3, r0, r3
   2741c:	mul	r0, lr, r2
   27420:	mvnhi	r3, #0
   27424:	strd	sl, [sp, #16]
   27428:	ldrd	sl, [sp]
   2742c:	mla	r0, r1, r3, r0
   27430:	ldr	ip, [sp, #20]
   27434:	cmp	r3, fp
   27438:	add	r0, r0, ip
   2743c:	cmpeq	r2, sl
   27440:	str	r0, [sp, #20]
   27444:	mvnhi	sl, #0
   27448:	mvnhi	fp, #0
   2744c:	strdhi	sl, [sp, #16]
   27450:	ldrdhi	sl, [sp]
   27454:	ldr	r0, [sp, #16]
   27458:	cmp	r3, fp
   2745c:	ldr	r3, [sp, #20]
   27460:	mul	r0, lr, r0
   27464:	cmpeq	r2, sl
   27468:	mla	r0, r1, r3, r0
   2746c:	ldr	r3, [sp, #16]
   27470:	umull	r2, r3, r3, r1
   27474:	strd	r2, [sp, #24]
   27478:	movhi	r3, #1
   2747c:	movls	r3, #0
   27480:	cmp	r7, fp
   27484:	cmpeq	r6, sl
   27488:	ldrd	r6, [sp, #16]
   2748c:	ldr	r2, [sp, #28]
   27490:	movls	ip, r3
   27494:	orrhi	ip, r3, #1
   27498:	cmp	r7, fp
   2749c:	add	r2, r0, r2
   274a0:	cmpeq	r6, sl
   274a4:	str	r2, [sp, #28]
   274a8:	mvnhi	r2, #0
   274ac:	mvnhi	r3, #0
   274b0:	strdhi	r2, [sp, #24]
   274b4:	ldrd	r6, [sp, #24]
   274b8:	mul	r2, lr, r6
   274bc:	umull	sl, fp, r6, r1
   274c0:	mla	r3, r1, r7, r2
   274c4:	ldrd	r6, [sp]
   274c8:	str	r3, [sp, #32]
   274cc:	ldrd	r2, [sp, #16]
   274d0:	cmp	r3, r7
   274d4:	cmpeq	r2, r6
   274d8:	ldrd	r2, [sp, #24]
   274dc:	orrhi	ip, ip, #1
   274e0:	cmp	r3, r7
   274e4:	ldr	r3, [sp, #32]
   274e8:	cmpeq	r2, r6
   274ec:	add	r2, r3, fp
   274f0:	mov	fp, r2
   274f4:	bhi	2790c <__assert_fail@plt+0x15904>
   274f8:	strd	sl, [sp, #16]
   274fc:	mul	r2, lr, sl
   27500:	umull	r6, r7, sl, r1
   27504:	mla	r3, r1, fp, r2
   27508:	ldrd	sl, [sp]
   2750c:	str	r3, [sp, #32]
   27510:	ldrd	r2, [sp, #24]
   27514:	cmp	r3, fp
   27518:	cmpeq	r2, sl
   2751c:	ldrd	r2, [sp, #16]
   27520:	orrhi	ip, ip, #1
   27524:	cmp	r3, fp
   27528:	ldr	r3, [sp, #32]
   2752c:	cmpeq	r2, sl
   27530:	add	r2, r3, r7
   27534:	mov	r7, r2
   27538:	mvnhi	r7, #0
   2753c:	mvnhi	r6, #0
   27540:	mul	r2, r1, r7
   27544:	mov	sl, r6
   27548:	strd	r6, [sp, #24]
   2754c:	mla	r0, lr, sl, r2
   27550:	ldrd	sl, [sp]
   27554:	ldrd	r2, [sp, #16]
   27558:	umull	r6, r7, r1, r6
   2755c:	cmp	r3, fp
   27560:	cmpeq	r2, sl
   27564:	mov	r3, ip
   27568:	orrhi	r3, r3, #1
   2756c:	mov	r2, sl
   27570:	str	r3, [sp, #16]
   27574:	mov	r3, fp
   27578:	ldrd	sl, [sp, #24]
   2757c:	add	r7, r0, r7
   27580:	cmp	r3, fp
   27584:	cmpeq	r2, sl
   27588:	bcc	27038 <__assert_fail@plt+0x15030>
   2758c:	mov	r2, r6
   27590:	mov	r3, r7
   27594:	b	27040 <__assert_fail@plt+0x15038>
   27598:	ldrd	sl, [sp]
   2759c:	umull	r2, r3, r6, r1
   275a0:	mul	r0, r6, lr
   275a4:	cmp	r7, fp
   275a8:	cmpeq	r6, sl
   275ac:	mvnhi	r2, #0
   275b0:	mla	r0, r1, r7, r0
   275b4:	umull	sl, fp, r2, r1
   275b8:	add	r3, r0, r3
   275bc:	mul	r0, lr, r2
   275c0:	mvnhi	r3, #0
   275c4:	strd	sl, [sp, #16]
   275c8:	ldrd	sl, [sp]
   275cc:	mla	r0, r1, r3, r0
   275d0:	ldr	ip, [sp, #20]
   275d4:	cmp	r3, fp
   275d8:	add	r0, r0, ip
   275dc:	cmpeq	r2, sl
   275e0:	str	r0, [sp, #20]
   275e4:	mvnhi	sl, #0
   275e8:	mvnhi	fp, #0
   275ec:	strdhi	sl, [sp, #16]
   275f0:	ldrdhi	sl, [sp]
   275f4:	ldr	r0, [sp, #16]
   275f8:	cmp	r3, fp
   275fc:	ldr	ip, [sp, #20]
   27600:	mul	r0, lr, r0
   27604:	ldr	r3, [sp, #16]
   27608:	cmpeq	r2, sl
   2760c:	mla	r0, r1, ip, r0
   27610:	umull	r2, r3, r3, r1
   27614:	movhi	r1, #1
   27618:	movls	r1, #0
   2761c:	cmp	r7, fp
   27620:	cmpeq	r6, sl
   27624:	ldrd	r6, [sp, #16]
   27628:	movls	ip, r1
   2762c:	orrhi	ip, r1, #1
   27630:	cmp	r7, fp
   27634:	cmpeq	r6, sl
   27638:	mvnhi	r2, #0
   2763c:	add	r3, r0, r3
   27640:	movhi	r3, r2
   27644:	cmp	r7, fp
   27648:	cmpeq	r6, sl
   2764c:	mov	r7, r3
   27650:	mov	r6, r2
   27654:	orrhi	ip, ip, #1
   27658:	b	26f24 <__assert_fail@plt+0x14f1c>
   2765c:	ldrd	sl, [sp]
   27660:	umull	r2, r3, r6, r1
   27664:	mul	r0, r6, lr
   27668:	cmp	r7, fp
   2766c:	cmpeq	r6, sl
   27670:	mvnhi	r2, #0
   27674:	mla	r0, r1, r7, r0
   27678:	umull	sl, fp, r1, r2
   2767c:	add	r3, r0, r3
   27680:	mvnhi	r3, #0
   27684:	strd	sl, [sp, #16]
   27688:	mul	r0, r1, r3
   2768c:	ldrd	sl, [sp]
   27690:	mla	r0, lr, r2, r0
   27694:	ldr	ip, [sp, #20]
   27698:	cmp	fp, r3
   2769c:	add	r0, r0, ip
   276a0:	cmpeq	sl, r2
   276a4:	str	r0, [sp, #20]
   276a8:	mvncc	sl, #0
   276ac:	mvncc	fp, #0
   276b0:	strdcc	sl, [sp, #16]
   276b4:	ldrdcc	sl, [sp]
   276b8:	ldr	r0, [sp, #16]
   276bc:	cmp	fp, r3
   276c0:	ldr	r3, [sp, #20]
   276c4:	mul	r0, lr, r0
   276c8:	cmpeq	sl, r2
   276cc:	mla	r0, r1, r3, r0
   276d0:	ldr	r3, [sp, #16]
   276d4:	umull	r2, r3, r3, r1
   276d8:	strd	r2, [sp, #24]
   276dc:	movcc	r3, #1
   276e0:	movcs	r3, #0
   276e4:	cmp	r7, fp
   276e8:	cmpeq	r6, sl
   276ec:	movls	ip, r3
   276f0:	orrhi	ip, r3, #1
   276f4:	ldrd	r2, [sp, #16]
   276f8:	cmp	r3, fp
   276fc:	ldr	r3, [sp, #28]
   27700:	cmpeq	r2, sl
   27704:	add	r3, r0, r3
   27708:	str	r3, [sp, #28]
   2770c:	bhi	278c4 <__assert_fail@plt+0x158bc>
   27710:	ldrd	r2, [sp, #24]
   27714:	mov	sl, r2
   27718:	mov	fp, r3
   2771c:	mul	r2, lr, sl
   27720:	umull	r6, r7, sl, r1
   27724:	mla	r0, r1, fp, r2
   27728:	ldrd	r2, [sp]
   2772c:	add	r7, r0, r7
   27730:	mov	sl, r2
   27734:	mov	fp, r3
   27738:	strd	r2, [sp, #32]
   2773c:	ldrd	r2, [sp, #16]
   27740:	cmp	r3, fp
   27744:	cmpeq	r2, sl
   27748:	ldrd	r2, [sp, #32]
   2774c:	ldrd	sl, [sp, #24]
   27750:	orrhi	ip, ip, #1
   27754:	cmp	fp, r3
   27758:	cmpeq	sl, r2
   2775c:	mvnhi	r6, #0
   27760:	mvnhi	r7, #0
   27764:	umull	sl, fp, r6, r1
   27768:	mul	r3, lr, r6
   2776c:	strd	sl, [sp, #16]
   27770:	mla	r0, r1, r7, r3
   27774:	ldrd	sl, [sp, #24]
   27778:	ldrd	r2, [sp]
   2777c:	cmp	fp, r3
   27780:	cmpeq	sl, r2
   27784:	orrhi	ip, ip, #1
   27788:	cmp	r7, r3
   2778c:	ldr	r3, [sp, #20]
   27790:	cmpeq	r6, r2
   27794:	add	r3, r0, r3
   27798:	str	r3, [sp, #20]
   2779c:	mvnhi	r2, #0
   277a0:	mvnhi	r3, #0
   277a4:	ldrdls	r2, [sp, #16]
   277a8:	ldrd	sl, [sp]
   277ac:	mul	r0, r1, r3
   277b0:	cmp	r7, fp
   277b4:	str	r0, [sp, #16]
   277b8:	cmpeq	r6, sl
   277bc:	ldr	r6, [sp, #16]
   277c0:	umull	r0, r1, r1, r2
   277c4:	mla	lr, lr, r2, r6
   277c8:	orrhi	ip, ip, #1
   277cc:	cmp	r3, fp
   277d0:	cmpeq	r2, sl
   277d4:	add	r1, lr, r1
   277d8:	bls	272ac <__assert_fail@plt+0x152a4>
   277dc:	b	272a4 <__assert_fail@plt+0x1529c>
   277e0:	ldr	r3, [pc, #344]	; 27940 <__assert_fail@plt+0x15938>
   277e4:	mvn	r2, #0
   277e8:	cmp	r7, r3
   277ec:	cmpeq	r6, r2
   277f0:	bhi	27844 <__assert_fail@plt+0x1583c>
   277f4:	lsl	r3, r7, #10
   277f8:	orr	r3, r3, r6, lsr #22
   277fc:	lsl	r2, r6, #10
   27800:	mov	r6, r2
   27804:	mov	r7, r3
   27808:	mov	ip, #0
   2780c:	b	26f24 <__assert_fail@plt+0x14f1c>
   27810:	strd	r6, [r8]
   27814:	orr	r4, r4, #2
   27818:	b	26bf4 <__assert_fail@plt+0x14bec>
   2781c:	ldrd	r2, [sp]
   27820:	cmp	r7, r3
   27824:	cmpeq	r6, r2
   27828:	bhi	27844 <__assert_fail@plt+0x1583c>
   2782c:	mul	r3, r6, lr
   27830:	mov	ip, #0
   27834:	mla	r3, r1, r7, r3
   27838:	umull	r6, r7, r6, r1
   2783c:	add	r7, r3, r7
   27840:	b	26f24 <__assert_fail@plt+0x14f1c>
   27844:	mvn	r6, #0
   27848:	mvn	r7, #0
   2784c:	mov	ip, #1
   27850:	b	26f24 <__assert_fail@plt+0x14f1c>
   27854:	ldrb	r3, [r9, #2]
   27858:	mvn	r2, #0
   2785c:	mov	r1, #1024	; 0x400
   27860:	cmp	r3, #66	; 0x42
   27864:	ldr	r3, [pc, #212]	; 27940 <__assert_fail@plt+0x15938>
   27868:	mov	lr, #0
   2786c:	strd	r2, [sp]
   27870:	moveq	r3, #3
   27874:	streq	r3, [sp, #12]
   27878:	movne	r3, #1
   2787c:	strne	r3, [sp, #12]
   27880:	b	26dd0 <__assert_fail@plt+0x14dc8>
   27884:	add	r3, pc, #172	; 0xac
   27888:	ldrd	r2, [r3]
   2788c:	mov	r1, #1000	; 0x3e8
   27890:	mov	lr, #0
   27894:	strd	r2, [sp]
   27898:	mov	r3, #2
   2789c:	str	r3, [sp, #12]
   278a0:	b	26dd0 <__assert_fail@plt+0x14dc8>
   278a4:	ldr	r3, [pc, #148]	; 27940 <__assert_fail@plt+0x15938>
   278a8:	mvn	r2, #0
   278ac:	mov	lr, r0
   278b0:	strd	r2, [sp]
   278b4:	mov	r3, #1
   278b8:	mov	r1, #1024	; 0x400
   278bc:	str	r3, [sp, #12]
   278c0:	b	26dd0 <__assert_fail@plt+0x14dc8>
   278c4:	mvn	r2, #0
   278c8:	mvn	r3, #0
   278cc:	mov	sl, r2
   278d0:	strd	r2, [sp, #24]
   278d4:	mov	fp, r3
   278d8:	b	2771c <__assert_fail@plt+0x15714>
   278dc:	mvn	r2, #0
   278e0:	mvn	r3, #0
   278e4:	mov	sl, r2
   278e8:	strd	r2, [sp, #16]
   278ec:	mov	fp, r3
   278f0:	b	271a0 <__assert_fail@plt+0x15198>
   278f4:	mvn	r2, #0
   278f8:	mvn	r3, #0
   278fc:	mov	sl, r2
   27900:	strd	r2, [sp, #24]
   27904:	mov	fp, r3
   27908:	b	26ff8 <__assert_fail@plt+0x14ff0>
   2790c:	mvn	r2, #0
   27910:	mvn	r3, #0
   27914:	mov	sl, r2
   27918:	strd	r2, [sp, #16]
   2791c:	mov	fp, r3
   27920:	b	274fc <__assert_fail@plt+0x154f4>
   27924:	ldr	r3, [pc, #28]	; 27948 <__assert_fail@plt+0x15940>
   27928:	mov	r2, #85	; 0x55
   2792c:	ldr	r1, [pc, #24]	; 2794c <__assert_fail@plt+0x15944>
   27930:	ldr	r0, [pc, #24]	; 27950 <__assert_fail@plt+0x15948>
   27934:	bl	12008 <__assert_fail@plt>
   27938:	blmi	ff1d18fc <optarg@@GLIBC_2.4+0xff19561c>
   2793c:	subeq	r8, r1, r7, lsr r9
   27940:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   27944:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   27948:	andeq	fp, r2, ip, lsl #13
   2794c:	muleq	r2, r8, r6
   27950:	andeq	fp, r2, r8, lsr #13
   27954:	cmp	r1, #0
   27958:	cmpne	r0, #0
   2795c:	moveq	r1, #1
   27960:	moveq	r0, r1
   27964:	umull	r2, r3, r0, r1
   27968:	adds	r3, r3, #0
   2796c:	movne	r3, #1
   27970:	cmp	r2, #0
   27974:	blt	27984 <__assert_fail@plt+0x1597c>
   27978:	cmp	r3, #0
   2797c:	bne	27984 <__assert_fail@plt+0x1597c>
   27980:	b	11abc <calloc@plt>
   27984:	push	{r4, lr}
   27988:	bl	11e34 <__errno_location@plt>
   2798c:	mov	r3, #12
   27990:	str	r3, [r0]
   27994:	mov	r0, #0
   27998:	pop	{r4, pc}
   2799c:	cmp	r0, #0
   279a0:	moveq	r0, #1
   279a4:	cmp	r0, #0
   279a8:	blt	279b0 <__assert_fail@plt+0x159a8>
   279ac:	b	11d98 <malloc@plt>
   279b0:	push	{r4, lr}
   279b4:	bl	11e34 <__errno_location@plt>
   279b8:	mov	r3, #12
   279bc:	str	r3, [r0]
   279c0:	mov	r0, #0
   279c4:	pop	{r4, pc}
   279c8:	cmp	r0, #0
   279cc:	beq	279f0 <__assert_fail@plt+0x159e8>
   279d0:	cmp	r1, #0
   279d4:	push	{lr}		; (str lr, [sp, #-4]!)
   279d8:	sub	sp, sp, #12
   279dc:	beq	279f8 <__assert_fail@plt+0x159f0>
   279e0:	blt	27a10 <__assert_fail@plt+0x15a08>
   279e4:	add	sp, sp, #12
   279e8:	pop	{lr}		; (ldr lr, [sp], #4)
   279ec:	b	11c54 <realloc@plt>
   279f0:	mov	r0, r1
   279f4:	b	2799c <__assert_fail@plt+0x15994>
   279f8:	str	r1, [sp, #4]
   279fc:	bl	1e0b0 <__assert_fail@plt+0xc0a8>
   27a00:	ldr	r3, [sp, #4]
   27a04:	mov	r0, r3
   27a08:	add	sp, sp, #12
   27a0c:	pop	{pc}		; (ldr pc, [sp], #4)
   27a10:	bl	11e34 <__errno_location@plt>
   27a14:	mov	r2, #12
   27a18:	mov	r3, #0
   27a1c:	str	r2, [r0]
   27a20:	b	27a04 <__assert_fail@plt+0x159fc>
   27a24:	push	{r4, r5, r6, lr}
   27a28:	mov	r4, r0
   27a2c:	bl	11d38 <__fpending@plt>
   27a30:	ldr	r5, [r4]
   27a34:	and	r5, r5, #32
   27a38:	mov	r6, r0
   27a3c:	mov	r0, r4
   27a40:	bl	1d95c <__assert_fail@plt+0xb954>
   27a44:	cmp	r5, #0
   27a48:	mov	r4, r0
   27a4c:	bne	27a6c <__assert_fail@plt+0x15a64>
   27a50:	cmp	r0, #0
   27a54:	beq	27a64 <__assert_fail@plt+0x15a5c>
   27a58:	cmp	r6, #0
   27a5c:	beq	27a88 <__assert_fail@plt+0x15a80>
   27a60:	mvn	r4, #0
   27a64:	mov	r0, r4
   27a68:	pop	{r4, r5, r6, pc}
   27a6c:	cmp	r0, #0
   27a70:	bne	27a60 <__assert_fail@plt+0x15a58>
   27a74:	bl	11e34 <__errno_location@plt>
   27a78:	str	r4, [r0]
   27a7c:	mvn	r4, #0
   27a80:	mov	r0, r4
   27a84:	pop	{r4, r5, r6, pc}
   27a88:	bl	11e34 <__errno_location@plt>
   27a8c:	ldr	r4, [r0]
   27a90:	subs	r4, r4, #9
   27a94:	mvnne	r4, #0
   27a98:	mov	r0, r4
   27a9c:	pop	{r4, r5, r6, pc}
   27aa0:	vldr	d7, [pc, #160]	; 27b48 <__assert_fail@plt+0x15b40>
   27aa4:	vcmpe.f64	d0, d7
   27aa8:	vmrs	APSR_nzcv, fpscr
   27aac:	ble	27b38 <__assert_fail@plt+0x15b30>
   27ab0:	vldr	d7, [pc, #152]	; 27b50 <__assert_fail@plt+0x15b48>
   27ab4:	vcmpe.f64	d0, d7
   27ab8:	vmrs	APSR_nzcv, fpscr
   27abc:	bpl	27b28 <__assert_fail@plt+0x15b20>
   27ac0:	vcvt.s32.f64	s14, d0
   27ac4:	vldr	d6, [pc, #140]	; 27b58 <__assert_fail@plt+0x15b50>
   27ac8:	ldr	r2, [pc, #144]	; 27b60 <__assert_fail@plt+0x15b58>
   27acc:	ldr	ip, [pc, #144]	; 27b64 <__assert_fail@plt+0x15b5c>
   27ad0:	vcvt.f64.s32	d5, s14
   27ad4:	vsub.f64	d0, d0, d5
   27ad8:	vmul.f64	d0, d0, d6
   27adc:	vcvt.s32.f64	s15, d0
   27ae0:	vcvt.f64.s32	d6, s15
   27ae4:	vmov	r1, s15
   27ae8:	vcmpe.f64	d0, d6
   27aec:	vmrs	APSR_nzcv, fpscr
   27af0:	movgt	r3, #1
   27af4:	movle	r3, #0
   27af8:	add	r3, r1, r3
   27afc:	smull	r2, r1, r2, r3
   27b00:	asr	r2, r3, #31
   27b04:	rsb	r2, r2, r1, asr #28
   27b08:	vmov	r1, s14
   27b0c:	add	r1, r2, r1
   27b10:	mul	r2, ip, r2
   27b14:	subs	r3, r3, r2
   27b18:	submi	r1, r1, #1
   27b1c:	addmi	r3, r3, ip
   27b20:	stm	r0, {r1, r3}
   27b24:	bx	lr
   27b28:	ldr	r3, [pc, #56]	; 27b68 <__assert_fail@plt+0x15b60>
   27b2c:	mvn	r2, #-2147483648	; 0x80000000
   27b30:	stm	r0, {r2, r3}
   27b34:	bx	lr
   27b38:	mov	r2, #-2147483648	; 0x80000000
   27b3c:	mov	r3, #0
   27b40:	stm	r0, {r2, r3}
   27b44:	bx	lr
   27b48:	andeq	r0, r0, r0
   27b4c:	mvngt	r0, r0
   27b50:	andeq	r0, r0, r0
   27b54:	mvnmi	r0, r0
   27b58:	andeq	r0, r0, r0
   27b5c:	bicmi	ip, sp, r5, ror #26
   27b60:	ldrtmi	r2, [r8], #4001	; 0xfa1
   27b64:	blcc	fe6da36c <optarg@@GLIBC_2.4+0xfe69e08c>
   27b68:	blcc	fe6da36c <optarg@@GLIBC_2.4+0xfe69e08c>
   27b6c:	push	{r1, r2, r3}
   27b70:	push	{r4, r5, r6, r7, lr}
   27b74:	sub	sp, sp, #8
   27b78:	add	r3, sp, #32
   27b7c:	ldr	r1, [sp, #28]
   27b80:	str	r3, [sp, #4]
   27b84:	cmp	r1, #0
   27b88:	beq	27c20 <__assert_fail@plt+0x15c18>
   27b8c:	ldr	r2, [pc, #412]	; 27d30 <__assert_fail@plt+0x15d28>
   27b90:	mov	r5, r0
   27b94:	cmp	r1, r2
   27b98:	bne	27be4 <__assert_fail@plt+0x15bdc>
   27b9c:	ldr	r6, [pc, #400]	; 27d34 <__assert_fail@plt+0x15d2c>
   27ba0:	ldr	r7, [r3]
   27ba4:	add	r2, sp, #36	; 0x24
   27ba8:	ldr	r3, [r6]
   27bac:	str	r2, [sp, #4]
   27bb0:	cmp	r3, #0
   27bb4:	mov	r2, r7
   27bb8:	blt	27ce4 <__assert_fail@plt+0x15cdc>
   27bbc:	bl	11ed0 <fcntl64@plt>
   27bc0:	subs	r4, r0, #0
   27bc4:	blt	27c68 <__assert_fail@plt+0x15c60>
   27bc8:	mov	r3, #1
   27bcc:	str	r3, [r6]
   27bd0:	mov	r0, r4
   27bd4:	add	sp, sp, #8
   27bd8:	pop	{r4, r5, r6, r7, lr}
   27bdc:	add	sp, sp, #12
   27be0:	bx	lr
   27be4:	cmp	r1, #11
   27be8:	beq	27c10 <__assert_fail@plt+0x15c08>
   27bec:	bgt	27c30 <__assert_fail@plt+0x15c28>
   27bf0:	cmp	r1, #3
   27bf4:	beq	27c10 <__assert_fail@plt+0x15c08>
   27bf8:	ble	27d24 <__assert_fail@plt+0x15d1c>
   27bfc:	cmp	r1, #8
   27c00:	beq	27c50 <__assert_fail@plt+0x15c48>
   27c04:	ble	27c50 <__assert_fail@plt+0x15c48>
   27c08:	cmp	r1, #9
   27c0c:	bne	27c50 <__assert_fail@plt+0x15c48>
   27c10:	mov	r0, r5
   27c14:	bl	11ed0 <fcntl64@plt>
   27c18:	mov	r4, r0
   27c1c:	b	27bd0 <__assert_fail@plt+0x15bc8>
   27c20:	ldr	r2, [sp, #32]
   27c24:	bl	11ed0 <fcntl64@plt>
   27c28:	mov	r4, r0
   27c2c:	b	27bd0 <__assert_fail@plt+0x15bc8>
   27c30:	ldr	r3, [pc, #256]	; 27d38 <__assert_fail@plt+0x15d30>
   27c34:	cmp	r1, r3
   27c38:	bgt	27d04 <__assert_fail@plt+0x15cfc>
   27c3c:	cmp	r1, r2
   27c40:	bge	27c50 <__assert_fail@plt+0x15c48>
   27c44:	sub	r3, r3, #6
   27c48:	cmp	r1, r3
   27c4c:	beq	27c10 <__assert_fail@plt+0x15c08>
   27c50:	ldr	r3, [sp, #4]
   27c54:	mov	r0, r5
   27c58:	ldr	r2, [r3]
   27c5c:	bl	11ed0 <fcntl64@plt>
   27c60:	mov	r4, r0
   27c64:	b	27bd0 <__assert_fail@plt+0x15bc8>
   27c68:	bl	11e34 <__errno_location@plt>
   27c6c:	ldr	r3, [r0]
   27c70:	cmp	r3, #22
   27c74:	bne	27bc8 <__assert_fail@plt+0x15bc0>
   27c78:	mov	r2, r7
   27c7c:	mov	r0, r5
   27c80:	mov	r1, #0
   27c84:	bl	11ed0 <fcntl64@plt>
   27c88:	subs	r4, r0, #0
   27c8c:	blt	27bd0 <__assert_fail@plt+0x15bc8>
   27c90:	mvn	r3, #0
   27c94:	str	r3, [r6]
   27c98:	mov	r1, #1
   27c9c:	mov	r0, r4
   27ca0:	bl	11ed0 <fcntl64@plt>
   27ca4:	subs	r2, r0, #0
   27ca8:	blt	27cc4 <__assert_fail@plt+0x15cbc>
   27cac:	orr	r2, r2, #1
   27cb0:	mov	r1, #2
   27cb4:	mov	r0, r4
   27cb8:	bl	11ed0 <fcntl64@plt>
   27cbc:	cmn	r0, #1
   27cc0:	bne	27bd0 <__assert_fail@plt+0x15bc8>
   27cc4:	bl	11e34 <__errno_location@plt>
   27cc8:	mov	r5, r0
   27ccc:	mov	r0, r4
   27cd0:	ldr	r6, [r5]
   27cd4:	mvn	r4, #0
   27cd8:	bl	11ff0 <close@plt>
   27cdc:	str	r6, [r5]
   27ce0:	b	27bd0 <__assert_fail@plt+0x15bc8>
   27ce4:	mov	r1, #0
   27ce8:	bl	11ed0 <fcntl64@plt>
   27cec:	subs	r4, r0, #0
   27cf0:	blt	27bd0 <__assert_fail@plt+0x15bc8>
   27cf4:	ldr	r3, [r6]
   27cf8:	cmn	r3, #1
   27cfc:	beq	27c98 <__assert_fail@plt+0x15c90>
   27d00:	b	27bd0 <__assert_fail@plt+0x15bc8>
   27d04:	ldr	r3, [pc, #48]	; 27d3c <__assert_fail@plt+0x15d34>
   27d08:	cmp	r1, r3
   27d0c:	beq	27c50 <__assert_fail@plt+0x15c48>
   27d10:	blt	27c10 <__assert_fail@plt+0x15c08>
   27d14:	add	r3, r3, #1
   27d18:	cmp	r1, r3
   27d1c:	bne	27c50 <__assert_fail@plt+0x15c48>
   27d20:	b	27c10 <__assert_fail@plt+0x15c08>
   27d24:	cmp	r1, #1
   27d28:	bne	27c50 <__assert_fail@plt+0x15c48>
   27d2c:	b	27c10 <__assert_fail@plt+0x15c08>
   27d30:	andeq	r0, r0, r6, lsl #8
   27d34:	andeq	ip, r3, r4, lsl #20
   27d38:	andeq	r0, r0, r7, lsl #8
   27d3c:	andeq	r0, r0, r9, lsl #8
   27d40:	cmp	r0, #2
   27d44:	push	{r4, r5, r6, r7, r8, lr}
   27d48:	mov	r4, r0
   27d4c:	bhi	27d74 <__assert_fail@plt+0x15d6c>
   27d50:	bl	27d7c <__assert_fail@plt+0x15d74>
   27d54:	mov	r7, r0
   27d58:	bl	11e34 <__errno_location@plt>
   27d5c:	mov	r5, r0
   27d60:	mov	r0, r4
   27d64:	ldr	r6, [r5]
   27d68:	mov	r4, r7
   27d6c:	bl	11ff0 <close@plt>
   27d70:	str	r6, [r5]
   27d74:	mov	r0, r4
   27d78:	pop	{r4, r5, r6, r7, r8, pc}
   27d7c:	ldr	r3, [pc, #12]	; 27d90 <__assert_fail@plt+0x15d88>
   27d80:	ands	r1, r1, #524288	; 0x80000
   27d84:	movne	r1, r3
   27d88:	mov	r2, #3
   27d8c:	b	27b6c <__assert_fail@plt+0x15b64>
   27d90:	andeq	r0, r0, r6, lsl #8
   27d94:	push	{r4, r5, r6, lr}
   27d98:	mov	r5, r1
   27d9c:	bl	11f54 <fopen64@plt>
   27da0:	subs	r4, r0, #0
   27da4:	beq	27db4 <__assert_fail@plt+0x15dac>
   27da8:	bl	11e88 <fileno@plt>
   27dac:	cmp	r0, #2
   27db0:	bls	27dbc <__assert_fail@plt+0x15db4>
   27db4:	mov	r0, r4
   27db8:	pop	{r4, r5, r6, pc}
   27dbc:	bl	2850c <_obstack_memory_used@@Base+0x80>
   27dc0:	subs	r6, r0, #0
   27dc4:	blt	27e0c <__assert_fail@plt+0x15e04>
   27dc8:	mov	r0, r4
   27dcc:	bl	1d95c <__assert_fail@plt+0xb954>
   27dd0:	cmp	r0, #0
   27dd4:	bne	27dec <__assert_fail@plt+0x15de4>
   27dd8:	mov	r1, r5
   27ddc:	mov	r0, r6
   27de0:	bl	11ab0 <fdopen@plt>
   27de4:	subs	r4, r0, #0
   27de8:	bne	27db4 <__assert_fail@plt+0x15dac>
   27dec:	bl	11e34 <__errno_location@plt>
   27df0:	mov	r4, #0
   27df4:	mov	r5, r0
   27df8:	mov	r0, r6
   27dfc:	ldr	r6, [r5]
   27e00:	bl	11ff0 <close@plt>
   27e04:	str	r6, [r5]
   27e08:	b	27db4 <__assert_fail@plt+0x15dac>
   27e0c:	bl	11e34 <__errno_location@plt>
   27e10:	mov	r5, r0
   27e14:	mov	r0, r4
   27e18:	ldr	r6, [r5]
   27e1c:	mov	r4, #0
   27e20:	bl	1d95c <__assert_fail@plt+0xb954>
   27e24:	str	r6, [r5]
   27e28:	b	27db4 <__assert_fail@plt+0x15dac>
   27e2c:	push	{r4, lr}
   27e30:	mov	r0, #14
   27e34:	bl	11f30 <nl_langinfo@plt>
   27e38:	cmp	r0, #0
   27e3c:	beq	27e54 <__assert_fail@plt+0x15e4c>
   27e40:	ldrb	r2, [r0]
   27e44:	ldr	r3, [pc, #16]	; 27e5c <__assert_fail@plt+0x15e54>
   27e48:	cmp	r2, #0
   27e4c:	moveq	r0, r3
   27e50:	pop	{r4, pc}
   27e54:	ldr	r0, [pc]	; 27e5c <__assert_fail@plt+0x15e54>
   27e58:	pop	{r4, pc}
   27e5c:	ldrdeq	fp, [r2], -r0
   27e60:	push	{r4, r5, r6, r7, lr}
   27e64:	subs	r6, r0, #0
   27e68:	sub	sp, sp, #12
   27e6c:	addeq	r6, sp, #4
   27e70:	mov	r0, r6
   27e74:	mov	r5, r2
   27e78:	mov	r7, r1
   27e7c:	bl	11d44 <mbrtowc@plt>
   27e80:	cmp	r5, #0
   27e84:	cmnne	r0, #3
   27e88:	mov	r4, r0
   27e8c:	bls	27ea8 <__assert_fail@plt+0x15ea0>
   27e90:	mov	r0, #0
   27e94:	bl	1e1a8 <__assert_fail@plt+0xc1a0>
   27e98:	cmp	r0, #0
   27e9c:	moveq	r4, #1
   27ea0:	ldrbeq	r3, [r7]
   27ea4:	streq	r3, [r6]
   27ea8:	mov	r0, r4
   27eac:	add	sp, sp, #12
   27eb0:	pop	{r4, r5, r6, r7, pc}
   27eb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27eb8:	sub	sp, sp, #28
   27ebc:	cmp	r1, r3
   27ec0:	mov	r9, r1
   27ec4:	str	r3, [sp, #12]
   27ec8:	stmib	sp, {r0, r2}
   27ecc:	beq	27f80 <__assert_fail@plt+0x15f78>
   27ed0:	ldr	r6, [sp, #12]
   27ed4:	ldr	fp, [sp, #4]
   27ed8:	ldr	r4, [sp, #8]
   27edc:	mov	r7, #0
   27ee0:	ldrb	r2, [fp, r9]
   27ee4:	ldrb	r0, [r4, r6]
   27ee8:	strb	r7, [fp, r9]
   27eec:	strb	r7, [r4, r6]
   27ef0:	str	r2, [sp, #16]
   27ef4:	str	r0, [sp, #20]
   27ef8:	bl	11e34 <__errno_location@plt>
   27efc:	add	r5, r9, #1
   27f00:	add	r6, r6, #1
   27f04:	mov	r8, r0
   27f08:	b	27f3c <__assert_fail@plt+0x15f34>
   27f0c:	bl	11e10 <strlen@plt>
   27f10:	add	sl, r0, #1
   27f14:	mov	r0, r4
   27f18:	bl	11e10 <strlen@plt>
   27f1c:	subs	r5, r5, sl
   27f20:	add	fp, fp, sl
   27f24:	add	r0, r0, #1
   27f28:	add	r4, r4, r0
   27f2c:	sub	r6, r6, r0
   27f30:	beq	27fb0 <__assert_fail@plt+0x15fa8>
   27f34:	cmp	r6, #0
   27f38:	beq	27fbc <__assert_fail@plt+0x15fb4>
   27f3c:	str	r7, [r8]
   27f40:	mov	r1, r4
   27f44:	mov	r0, fp
   27f48:	bl	11d68 <strcoll@plt>
   27f4c:	subs	r2, r0, #0
   27f50:	mov	r0, fp
   27f54:	beq	27f0c <__assert_fail@plt+0x15f04>
   27f58:	ldr	r3, [sp, #4]
   27f5c:	ldrb	r1, [sp, #16]
   27f60:	ldrb	r0, [sp, #20]
   27f64:	strb	r1, [r3, r9]
   27f68:	ldr	r3, [sp, #8]
   27f6c:	ldr	r1, [sp, #12]
   27f70:	strb	r0, [r3, r1]
   27f74:	mov	r0, r2
   27f78:	add	sp, sp, #28
   27f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27f80:	mov	r1, r2
   27f84:	mov	r2, r9
   27f88:	bl	11bf4 <memcmp@plt>
   27f8c:	subs	r2, r0, #0
   27f90:	bne	27ed0 <__assert_fail@plt+0x15ec8>
   27f94:	str	r2, [sp, #4]
   27f98:	bl	11e34 <__errno_location@plt>
   27f9c:	ldr	r2, [sp, #4]
   27fa0:	str	r2, [r0]
   27fa4:	mov	r0, r2
   27fa8:	add	sp, sp, #28
   27fac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27fb0:	adds	r2, r6, #0
   27fb4:	mvnne	r2, #0
   27fb8:	b	27f58 <__assert_fail@plt+0x15f50>
   27fbc:	mov	r2, #1
   27fc0:	b	27f58 <__assert_fail@plt+0x15f50>
   27fc4:	cmp	r1, r3
   27fc8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27fcc:	mov	r7, r1
   27fd0:	mov	r8, r3
   27fd4:	mov	r4, r2
   27fd8:	mov	r5, r0
   27fdc:	beq	28044 <__assert_fail@plt+0x1603c>
   27fe0:	bl	11e34 <__errno_location@plt>
   27fe4:	mov	r9, #0
   27fe8:	mov	sl, r0
   27fec:	b	28020 <__assert_fail@plt+0x16018>
   27ff0:	bl	11e10 <strlen@plt>
   27ff4:	add	r6, r0, #1
   27ff8:	mov	r0, r4
   27ffc:	bl	11e10 <strlen@plt>
   28000:	subs	r7, r7, r6
   28004:	add	r5, r5, r6
   28008:	add	r0, r0, #1
   2800c:	add	r4, r4, r0
   28010:	sub	r8, r8, r0
   28014:	beq	28068 <__assert_fail@plt+0x16060>
   28018:	cmp	r8, #0
   2801c:	beq	28078 <__assert_fail@plt+0x16070>
   28020:	str	r9, [sl]
   28024:	mov	r1, r4
   28028:	mov	r0, r5
   2802c:	bl	11d68 <strcoll@plt>
   28030:	subs	r6, r0, #0
   28034:	mov	r0, r5
   28038:	beq	27ff0 <__assert_fail@plt+0x15fe8>
   2803c:	mov	r0, r6
   28040:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   28044:	mov	r2, r1
   28048:	mov	r1, r4
   2804c:	bl	11bf4 <memcmp@plt>
   28050:	subs	r6, r0, #0
   28054:	bne	27fe0 <__assert_fail@plt+0x15fd8>
   28058:	bl	11e34 <__errno_location@plt>
   2805c:	str	r6, [r0]
   28060:	mov	r0, r6
   28064:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   28068:	adds	r6, r8, #0
   2806c:	mvnne	r6, #0
   28070:	mov	r0, r6
   28074:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   28078:	mov	r6, #1
   2807c:	mov	r0, r6
   28080:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   28084:	ldr	r3, [pc, #52]	; 280c0 <__assert_fail@plt+0x160b8>
   28088:	push	{r4, lr}
   2808c:	mov	r2, #5
   28090:	ldr	r1, [pc, #44]	; 280c4 <__assert_fail@plt+0x160bc>
   28094:	mov	r0, #0
   28098:	ldr	r4, [r3]
   2809c:	bl	11c0c <dcgettext@plt>
   280a0:	ldr	r2, [pc, #32]	; 280c8 <__assert_fail@plt+0x160c0>
   280a4:	mov	r1, #1
   280a8:	mov	r3, r0
   280ac:	mov	r0, r4
   280b0:	bl	11e94 <__fprintf_chk@plt>
   280b4:	ldr	r3, [pc, #16]	; 280cc <__assert_fail@plt+0x160c4>
   280b8:	ldr	r0, [r3]
   280bc:	bl	11df8 <exit@plt>
   280c0:	ldrdeq	ip, [r3], -r0
   280c4:	andeq	fp, r2, r0, lsr #11
   280c8:	andeq	fp, r2, ip, lsl #5
   280cc:	andeq	ip, r3, r4, ror r2

000280d0 <_obstack_begin@@Base>:
   280d0:	push	{r4, r5, r6, lr}
   280d4:	mov	r4, r0
   280d8:	ldrb	r0, [r0, #40]	; 0x28
   280dc:	subs	r5, r2, #0
   280e0:	subne	r6, r5, #1
   280e4:	bic	r0, r0, #1
   280e8:	strb	r0, [r4, #40]	; 0x28
   280ec:	ldrb	r2, [r4, #40]	; 0x28
   280f0:	ldr	r0, [pc, #152]	; 28190 <_obstack_begin@@Base+0xc0>
   280f4:	moveq	r6, #7
   280f8:	ldr	ip, [sp, #16]
   280fc:	moveq	r5, #8
   28100:	cmp	r1, #0
   28104:	moveq	r1, r0
   28108:	tst	r2, #1
   2810c:	str	r3, [r4, #28]
   28110:	str	ip, [r4, #32]
   28114:	str	r6, [r4, #24]
   28118:	str	r1, [r4]
   2811c:	bne	28178 <_obstack_begin@@Base+0xa8>
   28120:	mov	r0, r1
   28124:	blx	r3
   28128:	cmp	r0, #0
   2812c:	str	r0, [r4, #4]
   28130:	beq	28184 <_obstack_begin@@Base+0xb4>
   28134:	ldr	r3, [r4]
   28138:	add	r2, r0, #8
   2813c:	rsb	r5, r5, #0
   28140:	add	r2, r2, r6
   28144:	add	r3, r0, r3
   28148:	and	r2, r2, r5
   2814c:	mov	r1, #0
   28150:	str	r2, [r4, #8]
   28154:	str	r2, [r4, #12]
   28158:	str	r3, [r0]
   2815c:	str	r3, [r4, #16]
   28160:	str	r1, [r0, #4]
   28164:	ldrb	r3, [r4, #40]	; 0x28
   28168:	mov	r0, #1
   2816c:	and	r3, r3, #249	; 0xf9
   28170:	strb	r3, [r4, #40]	; 0x28
   28174:	pop	{r4, r5, r6, pc}
   28178:	ldr	r0, [r4, #36]	; 0x24
   2817c:	blx	r3
   28180:	b	28128 <_obstack_begin@@Base+0x58>
   28184:	ldr	r3, [pc, #8]	; 28194 <_obstack_begin@@Base+0xc4>
   28188:	ldr	r3, [r3]
   2818c:	blx	r3
   28190:	andeq	r0, r0, r8, ror #31
   28194:			; <UNDEFINED> instruction: 0x0003c2b8

00028198 <_obstack_begin_1@@Base>:
   28198:	ldrb	ip, [r0, #40]	; 0x28
   2819c:	push	{r4, r5, r6, lr}
   281a0:	mov	r4, r0
   281a4:	orr	ip, ip, #1
   281a8:	subs	r5, r2, #0
   281ac:	strb	ip, [r4, #40]	; 0x28
   281b0:	ldrb	r2, [r4, #40]	; 0x28
   281b4:	ldr	ip, [pc, #160]	; 2825c <_obstack_begin_1@@Base+0xc4>
   281b8:	subne	r6, r5, #1
   281bc:	moveq	r6, #7
   281c0:	ldr	lr, [sp, #16]
   281c4:	ldr	r0, [sp, #20]
   281c8:	moveq	r5, #8
   281cc:	cmp	r1, #0
   281d0:	moveq	r1, ip
   281d4:	tst	r2, #1
   281d8:	str	r3, [r4, #28]
   281dc:	str	lr, [r4, #32]
   281e0:	str	r0, [r4, #36]	; 0x24
   281e4:	str	r6, [r4, #24]
   281e8:	str	r1, [r4]
   281ec:	bne	28248 <_obstack_begin_1@@Base+0xb0>
   281f0:	mov	r0, r1
   281f4:	blx	r3
   281f8:	cmp	r0, #0
   281fc:	str	r0, [r4, #4]
   28200:	beq	28250 <_obstack_begin_1@@Base+0xb8>
   28204:	ldr	r3, [r4]
   28208:	add	r2, r0, #8
   2820c:	rsb	r5, r5, #0
   28210:	add	r2, r2, r6
   28214:	add	r3, r0, r3
   28218:	and	r2, r2, r5
   2821c:	mov	r1, #0
   28220:	str	r2, [r4, #8]
   28224:	str	r2, [r4, #12]
   28228:	str	r3, [r0]
   2822c:	str	r3, [r4, #16]
   28230:	str	r1, [r0, #4]
   28234:	ldrb	r3, [r4, #40]	; 0x28
   28238:	mov	r0, #1
   2823c:	and	r3, r3, #249	; 0xf9
   28240:	strb	r3, [r4, #40]	; 0x28
   28244:	pop	{r4, r5, r6, pc}
   28248:	blx	r3
   2824c:	b	281f8 <_obstack_begin_1@@Base+0x60>
   28250:	ldr	r3, [pc, #8]	; 28260 <_obstack_begin_1@@Base+0xc8>
   28254:	ldr	r3, [r3]
   28258:	blx	r3
   2825c:	andeq	r0, r0, r8, ror #31
   28260:			; <UNDEFINED> instruction: 0x0003c2b8

00028264 <_obstack_newchunk@@Base>:
   28264:	ldr	r2, [r0, #8]
   28268:	push	{r4, r5, r6, r7, r8, lr}
   2826c:	ldr	r6, [r0, #12]
   28270:	ldr	r3, [r0, #24]
   28274:	sub	r6, r6, r2
   28278:	add	r1, r6, r1
   2827c:	adds	r3, r1, r3
   28280:	movcc	r2, #1
   28284:	movcs	r2, #0
   28288:	cmp	r6, r1
   2828c:	movhi	r1, #0
   28290:	andls	r1, r2, #1
   28294:	cmp	r1, #0
   28298:	bne	282a8 <_obstack_newchunk@@Base+0x44>
   2829c:	ldr	r3, [pc, #272]	; 283b4 <_obstack_newchunk@@Base+0x150>
   282a0:	ldr	r3, [r3]
   282a4:	blx	r3
   282a8:	ldr	r5, [r0]
   282ac:	add	r1, r3, r6, lsr #3
   282b0:	cmp	r3, r5
   282b4:	ldrb	r2, [r0, #40]	; 0x28
   282b8:	movcc	r3, r5
   282bc:	add	r1, r1, #100	; 0x64
   282c0:	cmp	r3, r1
   282c4:	movcs	r5, r3
   282c8:	movcc	r5, r1
   282cc:	tst	r2, #1
   282d0:	mov	r4, r0
   282d4:	ldr	r7, [r0, #4]
   282d8:	ldr	r3, [r0, #28]
   282dc:	bne	2836c <_obstack_newchunk@@Base+0x108>
   282e0:	mov	r0, r5
   282e4:	blx	r3
   282e8:	mov	r8, r0
   282ec:	cmp	r8, #0
   282f0:	beq	2829c <_obstack_newchunk@@Base+0x38>
   282f4:	ldr	r2, [r4, #24]
   282f8:	mov	r3, r8
   282fc:	add	r1, r8, r5
   28300:	str	r8, [r4, #4]
   28304:	str	r7, [r8, #4]
   28308:	str	r1, [r4, #16]
   2830c:	str	r1, [r3], #8
   28310:	add	r3, r3, r2
   28314:	bic	r5, r3, r2
   28318:	mov	r0, r5
   2831c:	mov	r2, r6
   28320:	ldr	r1, [r4, #8]
   28324:	bl	11b7c <memcpy@plt>
   28328:	ldrb	r2, [r4, #40]	; 0x28
   2832c:	tst	r2, #2
   28330:	bne	28350 <_obstack_newchunk@@Base+0xec>
   28334:	ldr	r1, [r4, #24]
   28338:	add	r3, r7, #8
   2833c:	add	r3, r3, r1
   28340:	ldr	r0, [r4, #8]
   28344:	bic	r3, r3, r1
   28348:	cmp	r0, r3
   2834c:	beq	28380 <_obstack_newchunk@@Base+0x11c>
   28350:	ldrb	r3, [r4, #40]	; 0x28
   28354:	add	r2, r5, r6
   28358:	str	r2, [r4, #12]
   2835c:	bic	r3, r3, #2
   28360:	str	r5, [r4, #8]
   28364:	strb	r3, [r4, #40]	; 0x28
   28368:	pop	{r4, r5, r6, r7, r8, pc}
   2836c:	mov	r1, r5
   28370:	ldr	r0, [r0, #36]	; 0x24
   28374:	blx	r3
   28378:	mov	r8, r0
   2837c:	b	282ec <_obstack_newchunk@@Base+0x88>
   28380:	ldr	r3, [r7, #4]
   28384:	tst	r2, #1
   28388:	str	r3, [r8, #4]
   2838c:	bne	283a0 <_obstack_newchunk@@Base+0x13c>
   28390:	mov	r0, r7
   28394:	ldr	r3, [r4, #32]
   28398:	blx	r3
   2839c:	b	28350 <_obstack_newchunk@@Base+0xec>
   283a0:	mov	r1, r7
   283a4:	ldr	r3, [r4, #32]
   283a8:	ldr	r0, [r4, #36]	; 0x24
   283ac:	blx	r3
   283b0:	b	28350 <_obstack_newchunk@@Base+0xec>
   283b4:			; <UNDEFINED> instruction: 0x0003c2b8

000283b8 <_obstack_allocated_p@@Base>:
   283b8:	ldr	r0, [r0, #4]
   283bc:	cmp	r0, #0
   283c0:	bne	283d4 <_obstack_allocated_p@@Base+0x1c>
   283c4:	b	283f0 <_obstack_allocated_p@@Base+0x38>
   283c8:	ldr	r0, [r0, #4]
   283cc:	cmp	r0, #0
   283d0:	bxeq	lr
   283d4:	cmp	r1, r0
   283d8:	bls	283c8 <_obstack_allocated_p@@Base+0x10>
   283dc:	ldr	r3, [r0]
   283e0:	cmp	r1, r3
   283e4:	bhi	283c8 <_obstack_allocated_p@@Base+0x10>
   283e8:	mov	r0, #1
   283ec:	bx	lr
   283f0:	bx	lr

000283f4 <_obstack_free@@Base>:
   283f4:	push	{r4, r5, r6, lr}
   283f8:	mov	r4, r0
   283fc:	ldr	r0, [r0, #4]
   28400:	mov	r6, r1
   28404:	cmp	r0, #0
   28408:	bne	28430 <_obstack_free@@Base+0x3c>
   2840c:	b	2847c <_obstack_free@@Base+0x88>
   28410:	ldr	r3, [r4, #32]
   28414:	blx	r3
   28418:	ldrb	r3, [r4, #40]	; 0x28
   2841c:	cmp	r5, #0
   28420:	orr	r3, r3, #2
   28424:	strb	r3, [r4, #40]	; 0x28
   28428:	beq	2847c <_obstack_free@@Base+0x88>
   2842c:	mov	r0, r5
   28430:	cmp	r6, r0
   28434:	bls	28444 <_obstack_free@@Base+0x50>
   28438:	ldr	r3, [r0]
   2843c:	cmp	r6, r3
   28440:	bls	28468 <_obstack_free@@Base+0x74>
   28444:	ldrb	r3, [r4, #40]	; 0x28
   28448:	ldr	r5, [r0, #4]
   2844c:	tst	r3, #1
   28450:	beq	28410 <_obstack_free@@Base+0x1c>
   28454:	mov	r1, r0
   28458:	ldr	r3, [r4, #32]
   2845c:	ldr	r0, [r4, #36]	; 0x24
   28460:	blx	r3
   28464:	b	28418 <_obstack_free@@Base+0x24>
   28468:	str	r6, [r4, #12]
   2846c:	str	r6, [r4, #8]
   28470:	str	r3, [r4, #16]
   28474:	str	r0, [r4, #4]
   28478:	pop	{r4, r5, r6, pc}
   2847c:	cmp	r6, #0
   28480:	bne	28488 <_obstack_free@@Base+0x94>
   28484:	pop	{r4, r5, r6, pc}
   28488:	bl	11fe4 <abort@plt>

0002848c <_obstack_memory_used@@Base>:
   2848c:	ldr	r3, [r0, #4]
   28490:	cmp	r3, #0
   28494:	beq	284b8 <_obstack_memory_used@@Base+0x2c>
   28498:	mov	r0, #0
   2849c:	ldr	r2, [r3]
   284a0:	sub	r2, r2, r3
   284a4:	ldr	r3, [r3, #4]
   284a8:	add	r0, r0, r2
   284ac:	cmp	r3, #0
   284b0:	bne	2849c <_obstack_memory_used@@Base+0x10>
   284b4:	bx	lr
   284b8:	mov	r0, r3
   284bc:	bx	lr
   284c0:	push	{r4, r5, r6, lr}
   284c4:	subs	r4, r2, #0
   284c8:	mov	r6, r0
   284cc:	mov	r5, r1
   284d0:	beq	284fc <_obstack_memory_used@@Base+0x70>
   284d4:	mov	r1, r4
   284d8:	mvn	r0, #0
   284dc:	bl	28518 <_obstack_memory_used@@Base+0x8c>
   284e0:	cmp	r0, r5
   284e4:	bcs	284fc <_obstack_memory_used@@Base+0x70>
   284e8:	bl	11e34 <__errno_location@plt>
   284ec:	mov	r3, #12
   284f0:	str	r3, [r0]
   284f4:	mov	r0, #0
   284f8:	pop	{r4, r5, r6, pc}
   284fc:	mul	r1, r5, r4
   28500:	mov	r0, r6
   28504:	pop	{r4, r5, r6, lr}
   28508:	b	279c8 <__assert_fail@plt+0x159c0>
   2850c:	mov	r2, #3
   28510:	mov	r1, #0
   28514:	b	27b6c <__assert_fail@plt+0x15b64>
   28518:	subs	r2, r1, #1
   2851c:	bxeq	lr
   28520:	bcc	286f8 <_obstack_memory_used@@Base+0x26c>
   28524:	cmp	r0, r1
   28528:	bls	286dc <_obstack_memory_used@@Base+0x250>
   2852c:	tst	r1, r2
   28530:	beq	286e8 <_obstack_memory_used@@Base+0x25c>
   28534:	clz	r3, r0
   28538:	clz	r2, r1
   2853c:	sub	r3, r2, r3
   28540:	rsbs	r3, r3, #31
   28544:	addne	r3, r3, r3, lsl #1
   28548:	mov	r2, #0
   2854c:	addne	pc, pc, r3, lsl #2
   28550:	nop			; (mov r0, r0)
   28554:	cmp	r0, r1, lsl #31
   28558:	adc	r2, r2, r2
   2855c:	subcs	r0, r0, r1, lsl #31
   28560:	cmp	r0, r1, lsl #30
   28564:	adc	r2, r2, r2
   28568:	subcs	r0, r0, r1, lsl #30
   2856c:	cmp	r0, r1, lsl #29
   28570:	adc	r2, r2, r2
   28574:	subcs	r0, r0, r1, lsl #29
   28578:	cmp	r0, r1, lsl #28
   2857c:	adc	r2, r2, r2
   28580:	subcs	r0, r0, r1, lsl #28
   28584:	cmp	r0, r1, lsl #27
   28588:	adc	r2, r2, r2
   2858c:	subcs	r0, r0, r1, lsl #27
   28590:	cmp	r0, r1, lsl #26
   28594:	adc	r2, r2, r2
   28598:	subcs	r0, r0, r1, lsl #26
   2859c:	cmp	r0, r1, lsl #25
   285a0:	adc	r2, r2, r2
   285a4:	subcs	r0, r0, r1, lsl #25
   285a8:	cmp	r0, r1, lsl #24
   285ac:	adc	r2, r2, r2
   285b0:	subcs	r0, r0, r1, lsl #24
   285b4:	cmp	r0, r1, lsl #23
   285b8:	adc	r2, r2, r2
   285bc:	subcs	r0, r0, r1, lsl #23
   285c0:	cmp	r0, r1, lsl #22
   285c4:	adc	r2, r2, r2
   285c8:	subcs	r0, r0, r1, lsl #22
   285cc:	cmp	r0, r1, lsl #21
   285d0:	adc	r2, r2, r2
   285d4:	subcs	r0, r0, r1, lsl #21
   285d8:	cmp	r0, r1, lsl #20
   285dc:	adc	r2, r2, r2
   285e0:	subcs	r0, r0, r1, lsl #20
   285e4:	cmp	r0, r1, lsl #19
   285e8:	adc	r2, r2, r2
   285ec:	subcs	r0, r0, r1, lsl #19
   285f0:	cmp	r0, r1, lsl #18
   285f4:	adc	r2, r2, r2
   285f8:	subcs	r0, r0, r1, lsl #18
   285fc:	cmp	r0, r1, lsl #17
   28600:	adc	r2, r2, r2
   28604:	subcs	r0, r0, r1, lsl #17
   28608:	cmp	r0, r1, lsl #16
   2860c:	adc	r2, r2, r2
   28610:	subcs	r0, r0, r1, lsl #16
   28614:	cmp	r0, r1, lsl #15
   28618:	adc	r2, r2, r2
   2861c:	subcs	r0, r0, r1, lsl #15
   28620:	cmp	r0, r1, lsl #14
   28624:	adc	r2, r2, r2
   28628:	subcs	r0, r0, r1, lsl #14
   2862c:	cmp	r0, r1, lsl #13
   28630:	adc	r2, r2, r2
   28634:	subcs	r0, r0, r1, lsl #13
   28638:	cmp	r0, r1, lsl #12
   2863c:	adc	r2, r2, r2
   28640:	subcs	r0, r0, r1, lsl #12
   28644:	cmp	r0, r1, lsl #11
   28648:	adc	r2, r2, r2
   2864c:	subcs	r0, r0, r1, lsl #11
   28650:	cmp	r0, r1, lsl #10
   28654:	adc	r2, r2, r2
   28658:	subcs	r0, r0, r1, lsl #10
   2865c:	cmp	r0, r1, lsl #9
   28660:	adc	r2, r2, r2
   28664:	subcs	r0, r0, r1, lsl #9
   28668:	cmp	r0, r1, lsl #8
   2866c:	adc	r2, r2, r2
   28670:	subcs	r0, r0, r1, lsl #8
   28674:	cmp	r0, r1, lsl #7
   28678:	adc	r2, r2, r2
   2867c:	subcs	r0, r0, r1, lsl #7
   28680:	cmp	r0, r1, lsl #6
   28684:	adc	r2, r2, r2
   28688:	subcs	r0, r0, r1, lsl #6
   2868c:	cmp	r0, r1, lsl #5
   28690:	adc	r2, r2, r2
   28694:	subcs	r0, r0, r1, lsl #5
   28698:	cmp	r0, r1, lsl #4
   2869c:	adc	r2, r2, r2
   286a0:	subcs	r0, r0, r1, lsl #4
   286a4:	cmp	r0, r1, lsl #3
   286a8:	adc	r2, r2, r2
   286ac:	subcs	r0, r0, r1, lsl #3
   286b0:	cmp	r0, r1, lsl #2
   286b4:	adc	r2, r2, r2
   286b8:	subcs	r0, r0, r1, lsl #2
   286bc:	cmp	r0, r1, lsl #1
   286c0:	adc	r2, r2, r2
   286c4:	subcs	r0, r0, r1, lsl #1
   286c8:	cmp	r0, r1
   286cc:	adc	r2, r2, r2
   286d0:	subcs	r0, r0, r1
   286d4:	mov	r0, r2
   286d8:	bx	lr
   286dc:	moveq	r0, #1
   286e0:	movne	r0, #0
   286e4:	bx	lr
   286e8:	clz	r2, r1
   286ec:	rsb	r2, r2, #31
   286f0:	lsr	r0, r0, r2
   286f4:	bx	lr
   286f8:	cmp	r0, #0
   286fc:	mvnne	r0, #0
   28700:	b	28d58 <_obstack_memory_used@@Base+0x8cc>
   28704:	cmp	r1, #0
   28708:	beq	286f8 <_obstack_memory_used@@Base+0x26c>
   2870c:	push	{r0, r1, lr}
   28710:	bl	28518 <_obstack_memory_used@@Base+0x8c>
   28714:	pop	{r1, r2, lr}
   28718:	mul	r3, r2, r0
   2871c:	sub	r1, r1, r3
   28720:	bx	lr
   28724:	cmp	r1, #0
   28728:	beq	28934 <_obstack_memory_used@@Base+0x4a8>
   2872c:	eor	ip, r0, r1
   28730:	rsbmi	r1, r1, #0
   28734:	subs	r2, r1, #1
   28738:	beq	28900 <_obstack_memory_used@@Base+0x474>
   2873c:	movs	r3, r0
   28740:	rsbmi	r3, r0, #0
   28744:	cmp	r3, r1
   28748:	bls	2890c <_obstack_memory_used@@Base+0x480>
   2874c:	tst	r1, r2
   28750:	beq	2891c <_obstack_memory_used@@Base+0x490>
   28754:	clz	r2, r3
   28758:	clz	r0, r1
   2875c:	sub	r2, r0, r2
   28760:	rsbs	r2, r2, #31
   28764:	addne	r2, r2, r2, lsl #1
   28768:	mov	r0, #0
   2876c:	addne	pc, pc, r2, lsl #2
   28770:	nop			; (mov r0, r0)
   28774:	cmp	r3, r1, lsl #31
   28778:	adc	r0, r0, r0
   2877c:	subcs	r3, r3, r1, lsl #31
   28780:	cmp	r3, r1, lsl #30
   28784:	adc	r0, r0, r0
   28788:	subcs	r3, r3, r1, lsl #30
   2878c:	cmp	r3, r1, lsl #29
   28790:	adc	r0, r0, r0
   28794:	subcs	r3, r3, r1, lsl #29
   28798:	cmp	r3, r1, lsl #28
   2879c:	adc	r0, r0, r0
   287a0:	subcs	r3, r3, r1, lsl #28
   287a4:	cmp	r3, r1, lsl #27
   287a8:	adc	r0, r0, r0
   287ac:	subcs	r3, r3, r1, lsl #27
   287b0:	cmp	r3, r1, lsl #26
   287b4:	adc	r0, r0, r0
   287b8:	subcs	r3, r3, r1, lsl #26
   287bc:	cmp	r3, r1, lsl #25
   287c0:	adc	r0, r0, r0
   287c4:	subcs	r3, r3, r1, lsl #25
   287c8:	cmp	r3, r1, lsl #24
   287cc:	adc	r0, r0, r0
   287d0:	subcs	r3, r3, r1, lsl #24
   287d4:	cmp	r3, r1, lsl #23
   287d8:	adc	r0, r0, r0
   287dc:	subcs	r3, r3, r1, lsl #23
   287e0:	cmp	r3, r1, lsl #22
   287e4:	adc	r0, r0, r0
   287e8:	subcs	r3, r3, r1, lsl #22
   287ec:	cmp	r3, r1, lsl #21
   287f0:	adc	r0, r0, r0
   287f4:	subcs	r3, r3, r1, lsl #21
   287f8:	cmp	r3, r1, lsl #20
   287fc:	adc	r0, r0, r0
   28800:	subcs	r3, r3, r1, lsl #20
   28804:	cmp	r3, r1, lsl #19
   28808:	adc	r0, r0, r0
   2880c:	subcs	r3, r3, r1, lsl #19
   28810:	cmp	r3, r1, lsl #18
   28814:	adc	r0, r0, r0
   28818:	subcs	r3, r3, r1, lsl #18
   2881c:	cmp	r3, r1, lsl #17
   28820:	adc	r0, r0, r0
   28824:	subcs	r3, r3, r1, lsl #17
   28828:	cmp	r3, r1, lsl #16
   2882c:	adc	r0, r0, r0
   28830:	subcs	r3, r3, r1, lsl #16
   28834:	cmp	r3, r1, lsl #15
   28838:	adc	r0, r0, r0
   2883c:	subcs	r3, r3, r1, lsl #15
   28840:	cmp	r3, r1, lsl #14
   28844:	adc	r0, r0, r0
   28848:	subcs	r3, r3, r1, lsl #14
   2884c:	cmp	r3, r1, lsl #13
   28850:	adc	r0, r0, r0
   28854:	subcs	r3, r3, r1, lsl #13
   28858:	cmp	r3, r1, lsl #12
   2885c:	adc	r0, r0, r0
   28860:	subcs	r3, r3, r1, lsl #12
   28864:	cmp	r3, r1, lsl #11
   28868:	adc	r0, r0, r0
   2886c:	subcs	r3, r3, r1, lsl #11
   28870:	cmp	r3, r1, lsl #10
   28874:	adc	r0, r0, r0
   28878:	subcs	r3, r3, r1, lsl #10
   2887c:	cmp	r3, r1, lsl #9
   28880:	adc	r0, r0, r0
   28884:	subcs	r3, r3, r1, lsl #9
   28888:	cmp	r3, r1, lsl #8
   2888c:	adc	r0, r0, r0
   28890:	subcs	r3, r3, r1, lsl #8
   28894:	cmp	r3, r1, lsl #7
   28898:	adc	r0, r0, r0
   2889c:	subcs	r3, r3, r1, lsl #7
   288a0:	cmp	r3, r1, lsl #6
   288a4:	adc	r0, r0, r0
   288a8:	subcs	r3, r3, r1, lsl #6
   288ac:	cmp	r3, r1, lsl #5
   288b0:	adc	r0, r0, r0
   288b4:	subcs	r3, r3, r1, lsl #5
   288b8:	cmp	r3, r1, lsl #4
   288bc:	adc	r0, r0, r0
   288c0:	subcs	r3, r3, r1, lsl #4
   288c4:	cmp	r3, r1, lsl #3
   288c8:	adc	r0, r0, r0
   288cc:	subcs	r3, r3, r1, lsl #3
   288d0:	cmp	r3, r1, lsl #2
   288d4:	adc	r0, r0, r0
   288d8:	subcs	r3, r3, r1, lsl #2
   288dc:	cmp	r3, r1, lsl #1
   288e0:	adc	r0, r0, r0
   288e4:	subcs	r3, r3, r1, lsl #1
   288e8:	cmp	r3, r1
   288ec:	adc	r0, r0, r0
   288f0:	subcs	r3, r3, r1
   288f4:	cmp	ip, #0
   288f8:	rsbmi	r0, r0, #0
   288fc:	bx	lr
   28900:	teq	ip, r0
   28904:	rsbmi	r0, r0, #0
   28908:	bx	lr
   2890c:	movcc	r0, #0
   28910:	asreq	r0, ip, #31
   28914:	orreq	r0, r0, #1
   28918:	bx	lr
   2891c:	clz	r2, r1
   28920:	rsb	r2, r2, #31
   28924:	cmp	ip, #0
   28928:	lsr	r0, r3, r2
   2892c:	rsbmi	r0, r0, #0
   28930:	bx	lr
   28934:	cmp	r0, #0
   28938:	mvngt	r0, #-2147483648	; 0x80000000
   2893c:	movlt	r0, #-2147483648	; 0x80000000
   28940:	b	28d58 <_obstack_memory_used@@Base+0x8cc>
   28944:	cmp	r1, #0
   28948:	beq	28934 <_obstack_memory_used@@Base+0x4a8>
   2894c:	push	{r0, r1, lr}
   28950:	bl	2872c <_obstack_memory_used@@Base+0x2a0>
   28954:	pop	{r1, r2, lr}
   28958:	mul	r3, r2, r0
   2895c:	sub	r1, r1, r3
   28960:	bx	lr
   28964:	eor	r1, r1, #-2147483648	; 0x80000000
   28968:	b	28970 <_obstack_memory_used@@Base+0x4e4>
   2896c:	eor	r3, r3, #-2147483648	; 0x80000000
   28970:	push	{r4, r5, lr}
   28974:	lsl	r4, r1, #1
   28978:	lsl	r5, r3, #1
   2897c:	teq	r4, r5
   28980:	teqeq	r0, r2
   28984:	orrsne	ip, r4, r0
   28988:	orrsne	ip, r5, r2
   2898c:	mvnsne	ip, r4, asr #21
   28990:	mvnsne	ip, r5, asr #21
   28994:	beq	28b80 <_obstack_memory_used@@Base+0x6f4>
   28998:	lsr	r4, r4, #21
   2899c:	rsbs	r5, r4, r5, lsr #21
   289a0:	rsblt	r5, r5, #0
   289a4:	ble	289c4 <_obstack_memory_used@@Base+0x538>
   289a8:	add	r4, r4, r5
   289ac:	eor	r2, r0, r2
   289b0:	eor	r3, r1, r3
   289b4:	eor	r0, r2, r0
   289b8:	eor	r1, r3, r1
   289bc:	eor	r2, r0, r2
   289c0:	eor	r3, r1, r3
   289c4:	cmp	r5, #54	; 0x36
   289c8:	pophi	{r4, r5, pc}
   289cc:	tst	r1, #-2147483648	; 0x80000000
   289d0:	lsl	r1, r1, #12
   289d4:	mov	ip, #1048576	; 0x100000
   289d8:	orr	r1, ip, r1, lsr #12
   289dc:	beq	289e8 <_obstack_memory_used@@Base+0x55c>
   289e0:	rsbs	r0, r0, #0
   289e4:	rsc	r1, r1, #0
   289e8:	tst	r3, #-2147483648	; 0x80000000
   289ec:	lsl	r3, r3, #12
   289f0:	orr	r3, ip, r3, lsr #12
   289f4:	beq	28a00 <_obstack_memory_used@@Base+0x574>
   289f8:	rsbs	r2, r2, #0
   289fc:	rsc	r3, r3, #0
   28a00:	teq	r4, r5
   28a04:	beq	28b68 <_obstack_memory_used@@Base+0x6dc>
   28a08:	sub	r4, r4, #1
   28a0c:	rsbs	lr, r5, #32
   28a10:	blt	28a2c <_obstack_memory_used@@Base+0x5a0>
   28a14:	lsl	ip, r2, lr
   28a18:	adds	r0, r0, r2, lsr r5
   28a1c:	adc	r1, r1, #0
   28a20:	adds	r0, r0, r3, lsl lr
   28a24:	adcs	r1, r1, r3, asr r5
   28a28:	b	28a48 <_obstack_memory_used@@Base+0x5bc>
   28a2c:	sub	r5, r5, #32
   28a30:	add	lr, lr, #32
   28a34:	cmp	r2, #1
   28a38:	lsl	ip, r3, lr
   28a3c:	orrcs	ip, ip, #2
   28a40:	adds	r0, r0, r3, asr r5
   28a44:	adcs	r1, r1, r3, asr #31
   28a48:	and	r5, r1, #-2147483648	; 0x80000000
   28a4c:	bpl	28a5c <_obstack_memory_used@@Base+0x5d0>
   28a50:	rsbs	ip, ip, #0
   28a54:	rscs	r0, r0, #0
   28a58:	rsc	r1, r1, #0
   28a5c:	cmp	r1, #1048576	; 0x100000
   28a60:	bcc	28aa0 <_obstack_memory_used@@Base+0x614>
   28a64:	cmp	r1, #2097152	; 0x200000
   28a68:	bcc	28a88 <_obstack_memory_used@@Base+0x5fc>
   28a6c:	lsrs	r1, r1, #1
   28a70:	rrxs	r0, r0
   28a74:	rrx	ip, ip
   28a78:	add	r4, r4, #1
   28a7c:	lsl	r2, r4, #21
   28a80:	cmn	r2, #4194304	; 0x400000
   28a84:	bcs	28be0 <_obstack_memory_used@@Base+0x754>
   28a88:	cmp	ip, #-2147483648	; 0x80000000
   28a8c:	lsrseq	ip, r0, #1
   28a90:	adcs	r0, r0, #0
   28a94:	adc	r1, r1, r4, lsl #20
   28a98:	orr	r1, r1, r5
   28a9c:	pop	{r4, r5, pc}
   28aa0:	lsls	ip, ip, #1
   28aa4:	adcs	r0, r0, r0
   28aa8:	adc	r1, r1, r1
   28aac:	tst	r1, #1048576	; 0x100000
   28ab0:	sub	r4, r4, #1
   28ab4:	bne	28a88 <_obstack_memory_used@@Base+0x5fc>
   28ab8:	teq	r1, #0
   28abc:	moveq	r1, r0
   28ac0:	moveq	r0, #0
   28ac4:	clz	r3, r1
   28ac8:	addeq	r3, r3, #32
   28acc:	sub	r3, r3, #11
   28ad0:	subs	r2, r3, #32
   28ad4:	bge	28af8 <_obstack_memory_used@@Base+0x66c>
   28ad8:	adds	r2, r2, #12
   28adc:	ble	28af4 <_obstack_memory_used@@Base+0x668>
   28ae0:	add	ip, r2, #20
   28ae4:	rsb	r2, r2, #12
   28ae8:	lsl	r0, r1, ip
   28aec:	lsr	r1, r1, r2
   28af0:	b	28b08 <_obstack_memory_used@@Base+0x67c>
   28af4:	add	r2, r2, #20
   28af8:	rsble	ip, r2, #32
   28afc:	lsl	r1, r1, r2
   28b00:	orrle	r1, r1, r0, lsr ip
   28b04:	lslle	r0, r0, r2
   28b08:	subs	r4, r4, r3
   28b0c:	addge	r1, r1, r4, lsl #20
   28b10:	orrge	r1, r1, r5
   28b14:	popge	{r4, r5, pc}
   28b18:	mvn	r4, r4
   28b1c:	subs	r4, r4, #31
   28b20:	bge	28b5c <_obstack_memory_used@@Base+0x6d0>
   28b24:	adds	r4, r4, #12
   28b28:	bgt	28b44 <_obstack_memory_used@@Base+0x6b8>
   28b2c:	add	r4, r4, #20
   28b30:	rsb	r2, r4, #32
   28b34:	lsr	r0, r0, r4
   28b38:	orr	r0, r0, r1, lsl r2
   28b3c:	orr	r1, r5, r1, lsr r4
   28b40:	pop	{r4, r5, pc}
   28b44:	rsb	r4, r4, #12
   28b48:	rsb	r2, r4, #32
   28b4c:	lsr	r0, r0, r2
   28b50:	orr	r0, r0, r1, lsl r4
   28b54:	mov	r1, r5
   28b58:	pop	{r4, r5, pc}
   28b5c:	lsr	r0, r1, r4
   28b60:	mov	r1, r5
   28b64:	pop	{r4, r5, pc}
   28b68:	teq	r4, #0
   28b6c:	eor	r3, r3, #1048576	; 0x100000
   28b70:	eoreq	r1, r1, #1048576	; 0x100000
   28b74:	addeq	r4, r4, #1
   28b78:	subne	r5, r5, #1
   28b7c:	b	28a08 <_obstack_memory_used@@Base+0x57c>
   28b80:	mvns	ip, r4, asr #21
   28b84:	mvnsne	ip, r5, asr #21
   28b88:	beq	28bf0 <_obstack_memory_used@@Base+0x764>
   28b8c:	teq	r4, r5
   28b90:	teqeq	r0, r2
   28b94:	beq	28ba8 <_obstack_memory_used@@Base+0x71c>
   28b98:	orrs	ip, r4, r0
   28b9c:	moveq	r1, r3
   28ba0:	moveq	r0, r2
   28ba4:	pop	{r4, r5, pc}
   28ba8:	teq	r1, r3
   28bac:	movne	r1, #0
   28bb0:	movne	r0, #0
   28bb4:	popne	{r4, r5, pc}
   28bb8:	lsrs	ip, r4, #21
   28bbc:	bne	28bd0 <_obstack_memory_used@@Base+0x744>
   28bc0:	lsls	r0, r0, #1
   28bc4:	adcs	r1, r1, r1
   28bc8:	orrcs	r1, r1, #-2147483648	; 0x80000000
   28bcc:	pop	{r4, r5, pc}
   28bd0:	adds	r4, r4, #4194304	; 0x400000
   28bd4:	addcc	r1, r1, #1048576	; 0x100000
   28bd8:	popcc	{r4, r5, pc}
   28bdc:	and	r5, r1, #-2147483648	; 0x80000000
   28be0:	orr	r1, r5, #2130706432	; 0x7f000000
   28be4:	orr	r1, r1, #15728640	; 0xf00000
   28be8:	mov	r0, #0
   28bec:	pop	{r4, r5, pc}
   28bf0:	mvns	ip, r4, asr #21
   28bf4:	movne	r1, r3
   28bf8:	movne	r0, r2
   28bfc:	mvnseq	ip, r5, asr #21
   28c00:	movne	r3, r1
   28c04:	movne	r2, r0
   28c08:	orrs	r4, r0, r1, lsl #12
   28c0c:	orrseq	r5, r2, r3, lsl #12
   28c10:	teqeq	r1, r3
   28c14:	orrne	r1, r1, #524288	; 0x80000
   28c18:	pop	{r4, r5, pc}
   28c1c:	teq	r0, #0
   28c20:	moveq	r1, #0
   28c24:	bxeq	lr
   28c28:	push	{r4, r5, lr}
   28c2c:	mov	r4, #1024	; 0x400
   28c30:	add	r4, r4, #50	; 0x32
   28c34:	mov	r5, #0
   28c38:	mov	r1, #0
   28c3c:	b	28ab8 <_obstack_memory_used@@Base+0x62c>
   28c40:	teq	r0, #0
   28c44:	moveq	r1, #0
   28c48:	bxeq	lr
   28c4c:	push	{r4, r5, lr}
   28c50:	mov	r4, #1024	; 0x400
   28c54:	add	r4, r4, #50	; 0x32
   28c58:	ands	r5, r0, #-2147483648	; 0x80000000
   28c5c:	rsbmi	r0, r0, #0
   28c60:	mov	r1, #0
   28c64:	b	28ab8 <_obstack_memory_used@@Base+0x62c>
   28c68:	lsls	r2, r0, #1
   28c6c:	asr	r1, r2, #3
   28c70:	rrx	r1, r1
   28c74:	lsl	r0, r2, #28
   28c78:	andsne	r3, r2, #-16777216	; 0xff000000
   28c7c:	teqne	r3, #-16777216	; 0xff000000
   28c80:	eorne	r1, r1, #939524096	; 0x38000000
   28c84:	bxne	lr
   28c88:	teq	r2, #0
   28c8c:	teqne	r3, #-16777216	; 0xff000000
   28c90:	bxeq	lr
   28c94:	push	{r4, r5, lr}
   28c98:	mov	r4, #896	; 0x380
   28c9c:	and	r5, r1, #-2147483648	; 0x80000000
   28ca0:	bic	r1, r1, #-2147483648	; 0x80000000
   28ca4:	b	28ab8 <_obstack_memory_used@@Base+0x62c>
   28ca8:	orrs	r2, r0, r1
   28cac:	bxeq	lr
   28cb0:	push	{r4, r5, lr}
   28cb4:	mov	r5, #0
   28cb8:	b	28cd8 <_obstack_memory_used@@Base+0x84c>
   28cbc:	orrs	r2, r0, r1
   28cc0:	bxeq	lr
   28cc4:	push	{r4, r5, lr}
   28cc8:	ands	r5, r1, #-2147483648	; 0x80000000
   28ccc:	bpl	28cd8 <_obstack_memory_used@@Base+0x84c>
   28cd0:	rsbs	r0, r0, #0
   28cd4:	rsc	r1, r1, #0
   28cd8:	mov	r4, #1024	; 0x400
   28cdc:	add	r4, r4, #50	; 0x32
   28ce0:	lsrs	ip, r1, #22
   28ce4:	beq	28a5c <_obstack_memory_used@@Base+0x5d0>
   28ce8:	mov	r2, #3
   28cec:	lsrs	ip, ip, #3
   28cf0:	addne	r2, r2, #3
   28cf4:	lsrs	ip, ip, #3
   28cf8:	addne	r2, r2, #3
   28cfc:	add	r2, r2, ip, lsr #3
   28d00:	rsb	r3, r2, #32
   28d04:	lsl	ip, r0, r3
   28d08:	lsr	r0, r0, r2
   28d0c:	orr	r0, r0, r1, lsl r3
   28d10:	lsr	r1, r1, r2
   28d14:	add	r4, r4, r2
   28d18:	b	28a5c <_obstack_memory_used@@Base+0x5d0>
   28d1c:	cmp	r3, #0
   28d20:	cmpeq	r2, #0
   28d24:	bne	28d3c <_obstack_memory_used@@Base+0x8b0>
   28d28:	cmp	r1, #0
   28d2c:	cmpeq	r0, #0
   28d30:	mvnne	r1, #0
   28d34:	mvnne	r0, #0
   28d38:	b	28d58 <_obstack_memory_used@@Base+0x8cc>
   28d3c:	sub	sp, sp, #8
   28d40:	push	{sp, lr}
   28d44:	bl	28db0 <_obstack_memory_used@@Base+0x924>
   28d48:	ldr	lr, [sp, #4]
   28d4c:	add	sp, sp, #8
   28d50:	pop	{r2, r3}
   28d54:	bx	lr
   28d58:	push	{r1, lr}
   28d5c:	mov	r0, #8
   28d60:	bl	11ad4 <raise@plt>
   28d64:	pop	{r1, pc}
   28d68:	vmov	d7, r0, r1
   28d6c:	vldr	d6, [pc, #44]	; 28da0 <_obstack_memory_used@@Base+0x914>
   28d70:	vldr	d5, [pc, #48]	; 28da8 <_obstack_memory_used@@Base+0x91c>
   28d74:	mov	r0, #0
   28d78:	vmul.f64	d6, d7, d6
   28d7c:	vcvt.u32.f64	s12, d6
   28d80:	vcvt.f64.u32	d4, s12
   28d84:	vmov	r1, s12
   28d88:	vmls.f64	d7, d4, d5
   28d8c:	vcvt.u32.f64	s14, d7
   28d90:	vmov	r3, s14
   28d94:	orr	r0, r0, r3
   28d98:	bx	lr
   28d9c:	nop			; (mov r0, r0)
   28da0:	andeq	r0, r0, r0
   28da4:	ldclcc	0, cr0, [r0]
   28da8:	andeq	r0, r0, r0
   28dac:	mvnsmi	r0, r0
   28db0:	cmp	r1, r3
   28db4:	push	{r4, r5, r6, r7, r8, r9, lr}
   28db8:	cmpeq	r0, r2
   28dbc:	mov	r4, r0
   28dc0:	mov	r5, r1
   28dc4:	ldr	r9, [sp, #28]
   28dc8:	movcc	r0, #0
   28dcc:	movcc	r1, #0
   28dd0:	bcc	28ec8 <_obstack_memory_used@@Base+0xa3c>
   28dd4:	cmp	r3, #0
   28dd8:	clzeq	ip, r2
   28ddc:	clzne	ip, r3
   28de0:	addeq	ip, ip, #32
   28de4:	cmp	r5, #0
   28de8:	clzeq	r1, r4
   28dec:	addeq	r1, r1, #32
   28df0:	clzne	r1, r5
   28df4:	sub	ip, ip, r1
   28df8:	sub	lr, ip, #32
   28dfc:	lsl	r7, r3, ip
   28e00:	rsb	r8, ip, #32
   28e04:	orr	r7, r7, r2, lsl lr
   28e08:	orr	r7, r7, r2, lsr r8
   28e0c:	lsl	r6, r2, ip
   28e10:	cmp	r5, r7
   28e14:	cmpeq	r4, r6
   28e18:	movcc	r0, #0
   28e1c:	movcc	r1, #0
   28e20:	bcc	28e3c <_obstack_memory_used@@Base+0x9b0>
   28e24:	mov	r3, #1
   28e28:	subs	r4, r4, r6
   28e2c:	lsl	r1, r3, lr
   28e30:	lsl	r0, r3, ip
   28e34:	orr	r1, r1, r3, lsr r8
   28e38:	sbc	r5, r5, r7
   28e3c:	cmp	ip, #0
   28e40:	beq	28ec8 <_obstack_memory_used@@Base+0xa3c>
   28e44:	lsrs	r3, r7, #1
   28e48:	rrx	r2, r6
   28e4c:	mov	r6, ip
   28e50:	b	28e74 <_obstack_memory_used@@Base+0x9e8>
   28e54:	subs	r4, r4, r2
   28e58:	sbc	r5, r5, r3
   28e5c:	adds	r4, r4, r4
   28e60:	adc	r5, r5, r5
   28e64:	adds	r4, r4, #1
   28e68:	adc	r5, r5, #0
   28e6c:	subs	r6, r6, #1
   28e70:	beq	28e90 <_obstack_memory_used@@Base+0xa04>
   28e74:	cmp	r5, r3
   28e78:	cmpeq	r4, r2
   28e7c:	bcs	28e54 <_obstack_memory_used@@Base+0x9c8>
   28e80:	adds	r4, r4, r4
   28e84:	adc	r5, r5, r5
   28e88:	subs	r6, r6, #1
   28e8c:	bne	28e74 <_obstack_memory_used@@Base+0x9e8>
   28e90:	lsr	r6, r4, ip
   28e94:	lsr	r7, r5, ip
   28e98:	orr	r6, r6, r5, lsl r8
   28e9c:	adds	r2, r0, r4
   28ea0:	orr	r6, r6, r5, lsr lr
   28ea4:	adc	r3, r1, r5
   28ea8:	lsl	r1, r7, ip
   28eac:	orr	r1, r1, r6, lsl lr
   28eb0:	lsl	r0, r6, ip
   28eb4:	orr	r1, r1, r6, lsr r8
   28eb8:	subs	r0, r2, r0
   28ebc:	mov	r4, r6
   28ec0:	mov	r5, r7
   28ec4:	sbc	r1, r3, r1
   28ec8:	cmp	r9, #0
   28ecc:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   28ed0:	strd	r4, [r9]
   28ed4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   28ed8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   28edc:	mov	r7, r0
   28ee0:	ldr	r6, [pc, #72]	; 28f30 <_obstack_memory_used@@Base+0xaa4>
   28ee4:	ldr	r5, [pc, #72]	; 28f34 <_obstack_memory_used@@Base+0xaa8>
   28ee8:	add	r6, pc, r6
   28eec:	add	r5, pc, r5
   28ef0:	sub	r6, r6, r5
   28ef4:	mov	r8, r1
   28ef8:	mov	r9, r2
   28efc:	bl	11a84 <pthread_mutex_unlock@plt-0x20>
   28f00:	asrs	r6, r6, #2
   28f04:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   28f08:	mov	r4, #0
   28f0c:	add	r4, r4, #1
   28f10:	ldr	r3, [r5], #4
   28f14:	mov	r2, r9
   28f18:	mov	r1, r8
   28f1c:	mov	r0, r7
   28f20:	blx	r3
   28f24:	cmp	r6, r4
   28f28:	bne	28f0c <_obstack_memory_used@@Base+0xa80>
   28f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   28f30:	andeq	r3, r1, r8, lsl r0
   28f34:	andeq	r3, r1, r0, lsl r0
   28f38:	bx	lr
   28f3c:	ldr	r3, [pc, #12]	; 28f50 <_obstack_memory_used@@Base+0xac4>
   28f40:	mov	r1, #0
   28f44:	add	r3, pc, r3
   28f48:	ldr	r2, [r3]
   28f4c:	b	11e40 <__cxa_atexit@plt>
   28f50:	muleq	r1, r8, r2

Disassembly of section .fini:

00028f54 <.fini>:
   28f54:	push	{r3, lr}
   28f58:	pop	{r3, pc}
