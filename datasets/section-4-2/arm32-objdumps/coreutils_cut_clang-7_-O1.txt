
../repos/coreutils/src/cut:     file format elf32-littlearm


Disassembly of section .init:

00010f80 <.init>:
   10f80:	push	{r3, lr}
   10f84:	bl	11294 <__assert_fail@plt+0x48>
   10f88:	pop	{r3, pc}

Disassembly of section .plt:

00010f8c <calloc@plt-0x14>:
   10f8c:	push	{lr}		; (str lr, [sp, #-4]!)
   10f90:	ldr	lr, [pc, #4]	; 10f9c <calloc@plt-0x4>
   10f94:	add	lr, pc, lr
   10f98:	ldr	pc, [lr, #8]!
   10f9c:	andeq	r7, r1, r4, rrx

00010fa0 <calloc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #94208	; 0x17000
   10fa8:	ldr	pc, [ip, #100]!	; 0x64

00010fac <fputs_unlocked@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #94208	; 0x17000
   10fb4:	ldr	pc, [ip, #92]!	; 0x5c

00010fb8 <strcmp@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #94208	; 0x17000
   10fc0:	ldr	pc, [ip, #84]!	; 0x54

00010fc4 <posix_fadvise64@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #94208	; 0x17000
   10fcc:	ldr	pc, [ip, #76]!	; 0x4c

00010fd0 <fflush@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #94208	; 0x17000
   10fd8:	ldr	pc, [ip, #68]!	; 0x44

00010fdc <memmove@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #94208	; 0x17000
   10fe4:	ldr	pc, [ip, #60]!	; 0x3c

00010fe8 <free@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #94208	; 0x17000
   10ff0:	ldr	pc, [ip, #52]!	; 0x34

00010ff4 <ferror@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #94208	; 0x17000
   10ffc:	ldr	pc, [ip, #44]!	; 0x2c

00011000 <_exit@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #94208	; 0x17000
   11008:	ldr	pc, [ip, #36]!	; 0x24

0001100c <memcpy@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #94208	; 0x17000
   11014:	ldr	pc, [ip, #28]!

00011018 <mbsinit@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #94208	; 0x17000
   11020:	ldr	pc, [ip, #20]!

00011024 <fwrite_unlocked@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #94208	; 0x17000
   1102c:	ldr	pc, [ip, #12]!

00011030 <memcmp@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #94208	; 0x17000
   11038:	ldr	pc, [ip, #4]!

0001103c <getc_unlocked@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #90112	; 0x16000
   11044:	ldr	pc, [ip, #4092]!	; 0xffc

00011048 <dcgettext@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #90112	; 0x16000
   11050:	ldr	pc, [ip, #4084]!	; 0xff4

00011054 <realloc@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #90112	; 0x16000
   1105c:	ldr	pc, [ip, #4076]!	; 0xfec

00011060 <textdomain@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #90112	; 0x16000
   11068:	ldr	pc, [ip, #4068]!	; 0xfe4

0001106c <iswprint@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #90112	; 0x16000
   11074:	ldr	pc, [ip, #4060]!	; 0xfdc

00011078 <fwrite@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #90112	; 0x16000
   11080:	ldr	pc, [ip, #4052]!	; 0xfd4

00011084 <lseek64@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #90112	; 0x16000
   1108c:	ldr	pc, [ip, #4044]!	; 0xfcc

00011090 <__ctype_get_mb_cur_max@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #90112	; 0x16000
   11098:	ldr	pc, [ip, #4036]!	; 0xfc4

0001109c <fread@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #90112	; 0x16000
   110a4:	ldr	pc, [ip, #4028]!	; 0xfbc

000110a8 <__fpending@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #90112	; 0x16000
   110b0:	ldr	pc, [ip, #4020]!	; 0xfb4

000110b4 <ferror_unlocked@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #90112	; 0x16000
   110bc:	ldr	pc, [ip, #4012]!	; 0xfac

000110c0 <mbrtowc@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #90112	; 0x16000
   110c8:	ldr	pc, [ip, #4004]!	; 0xfa4

000110cc <error@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #90112	; 0x16000
   110d4:	ldr	pc, [ip, #3996]!	; 0xf9c

000110d8 <malloc@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #90112	; 0x16000
   110e0:	ldr	pc, [ip, #3988]!	; 0xf94

000110e4 <__libc_start_main@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #90112	; 0x16000
   110ec:	ldr	pc, [ip, #3980]!	; 0xf8c

000110f0 <__freading@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #90112	; 0x16000
   110f8:	ldr	pc, [ip, #3972]!	; 0xf84

000110fc <__gmon_start__@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #90112	; 0x16000
   11104:	ldr	pc, [ip, #3964]!	; 0xf7c

00011108 <getopt_long@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #90112	; 0x16000
   11110:	ldr	pc, [ip, #3956]!	; 0xf74

00011114 <__ctype_b_loc@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #90112	; 0x16000
   1111c:	ldr	pc, [ip, #3948]!	; 0xf6c

00011120 <exit@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #90112	; 0x16000
   11128:	ldr	pc, [ip, #3940]!	; 0xf64

0001112c <strlen@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #90112	; 0x16000
   11134:	ldr	pc, [ip, #3932]!	; 0xf5c

00011138 <ungetc@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #90112	; 0x16000
   11140:	ldr	pc, [ip, #3924]!	; 0xf54

00011144 <__errno_location@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #90112	; 0x16000
   1114c:	ldr	pc, [ip, #3916]!	; 0xf4c

00011150 <__cxa_atexit@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #90112	; 0x16000
   11158:	ldr	pc, [ip, #3908]!	; 0xf44

0001115c <memset@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #90112	; 0x16000
   11164:	ldr	pc, [ip, #3900]!	; 0xf3c

00011168 <fgetc@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #90112	; 0x16000
   11170:	ldr	pc, [ip, #3892]!	; 0xf34

00011174 <__printf_chk@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #90112	; 0x16000
   1117c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011180 <fileno@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #90112	; 0x16000
   11188:	ldr	pc, [ip, #3876]!	; 0xf24

0001118c <__fprintf_chk@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #90112	; 0x16000
   11194:	ldr	pc, [ip, #3868]!	; 0xf1c

00011198 <memchr@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #90112	; 0x16000
   111a0:	ldr	pc, [ip, #3860]!	; 0xf14

000111a4 <fclose@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #90112	; 0x16000
   111ac:	ldr	pc, [ip, #3852]!	; 0xf0c

000111b0 <fseeko64@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #90112	; 0x16000
   111b8:	ldr	pc, [ip, #3844]!	; 0xf04

000111bc <setlocale@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #90112	; 0x16000
   111c4:	ldr	pc, [ip, #3836]!	; 0xefc

000111c8 <strrchr@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #90112	; 0x16000
   111d0:	ldr	pc, [ip, #3828]!	; 0xef4

000111d4 <nl_langinfo@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #90112	; 0x16000
   111dc:	ldr	pc, [ip, #3820]!	; 0xeec

000111e0 <clearerr_unlocked@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #90112	; 0x16000
   111e8:	ldr	pc, [ip, #3812]!	; 0xee4

000111ec <fopen64@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #90112	; 0x16000
   111f4:	ldr	pc, [ip, #3804]!	; 0xedc

000111f8 <qsort@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #90112	; 0x16000
   11200:	ldr	pc, [ip, #3796]!	; 0xed4

00011204 <bindtextdomain@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #90112	; 0x16000
   1120c:	ldr	pc, [ip, #3788]!	; 0xecc

00011210 <strncmp@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #90112	; 0x16000
   11218:	ldr	pc, [ip, #3780]!	; 0xec4

0001121c <abort@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #90112	; 0x16000
   11224:	ldr	pc, [ip, #3772]!	; 0xebc

00011228 <feof_unlocked@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #90112	; 0x16000
   11230:	ldr	pc, [ip, #3764]!	; 0xeb4

00011234 <putchar_unlocked@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #90112	; 0x16000
   1123c:	ldr	pc, [ip, #3756]!	; 0xeac

00011240 <strspn@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #90112	; 0x16000
   11248:	ldr	pc, [ip, #3748]!	; 0xea4

0001124c <__assert_fail@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #90112	; 0x16000
   11254:	ldr	pc, [ip, #3740]!	; 0xe9c

Disassembly of section .text:

00011258 <.text>:
   11258:	mov	fp, #0
   1125c:	mov	lr, #0
   11260:	pop	{r1}		; (ldr r1, [sp], #4)
   11264:	mov	r2, sp
   11268:	push	{r2}		; (str r2, [sp, #-4]!)
   1126c:	push	{r0}		; (str r0, [sp, #-4]!)
   11270:	ldr	ip, [pc, #16]	; 11288 <__assert_fail@plt+0x3c>
   11274:	push	{ip}		; (str ip, [sp, #-4]!)
   11278:	ldr	r0, [pc, #12]	; 1128c <__assert_fail@plt+0x40>
   1127c:	ldr	r3, [pc, #12]	; 11290 <__assert_fail@plt+0x44>
   11280:	bl	110e4 <__libc_start_main@plt>
   11284:	bl	1121c <abort@plt>
   11288:	andeq	r5, r1, r4, ror pc
   1128c:	andeq	r1, r1, r4, ror #13
   11290:	andeq	r5, r1, r4, lsl pc
   11294:	ldr	r3, [pc, #20]	; 112b0 <__assert_fail@plt+0x64>
   11298:	ldr	r2, [pc, #20]	; 112b4 <__assert_fail@plt+0x68>
   1129c:	add	r3, pc, r3
   112a0:	ldr	r2, [r3, r2]
   112a4:	cmp	r2, #0
   112a8:	bxeq	lr
   112ac:	b	110fc <__gmon_start__@plt>
   112b0:	andeq	r6, r1, ip, asr sp
   112b4:	strdeq	r0, [r0], -r4
   112b8:	ldr	r0, [pc, #24]	; 112d8 <__assert_fail@plt+0x8c>
   112bc:	ldr	r3, [pc, #24]	; 112dc <__assert_fail@plt+0x90>
   112c0:	cmp	r3, r0
   112c4:	bxeq	lr
   112c8:	ldr	r3, [pc, #16]	; 112e0 <__assert_fail@plt+0x94>
   112cc:	cmp	r3, #0
   112d0:	bxeq	lr
   112d4:	bx	r3
   112d8:	andeq	r8, r2, r8, asr #2
   112dc:	andeq	r8, r2, r8, asr #2
   112e0:	andeq	r0, r0, r0
   112e4:	ldr	r0, [pc, #36]	; 11310 <__assert_fail@plt+0xc4>
   112e8:	ldr	r1, [pc, #36]	; 11314 <__assert_fail@plt+0xc8>
   112ec:	sub	r1, r1, r0
   112f0:	asr	r1, r1, #2
   112f4:	add	r1, r1, r1, lsr #31
   112f8:	asrs	r1, r1, #1
   112fc:	bxeq	lr
   11300:	ldr	r3, [pc, #16]	; 11318 <__assert_fail@plt+0xcc>
   11304:	cmp	r3, #0
   11308:	bxeq	lr
   1130c:	bx	r3
   11310:	andeq	r8, r2, r8, asr #2
   11314:	andeq	r8, r2, r8, asr #2
   11318:	andeq	r0, r0, r0
   1131c:	push	{r4, lr}
   11320:	ldr	r4, [pc, #24]	; 11340 <__assert_fail@plt+0xf4>
   11324:	ldrb	r3, [r4]
   11328:	cmp	r3, #0
   1132c:	popne	{r4, pc}
   11330:	bl	112b8 <__assert_fail@plt+0x6c>
   11334:	mov	r3, #1
   11338:	strb	r3, [r4]
   1133c:	pop	{r4, pc}
   11340:	andeq	r8, r2, ip, ror #2
   11344:	b	112e4 <__assert_fail@plt+0x98>
   11348:	push	{fp, lr}
   1134c:	mov	fp, sp
   11350:	mov	r4, r0
   11354:	cmp	r0, #0
   11358:	bne	114bc <__assert_fail@plt+0x270>
   1135c:	movw	r1, #24515	; 0x5fc3
   11360:	movt	r1, #1
   11364:	mov	r0, #0
   11368:	mov	r2, #5
   1136c:	bl	11048 <dcgettext@plt>
   11370:	mov	r1, r0
   11374:	movw	r0, #33180	; 0x819c
   11378:	movt	r0, #2
   1137c:	ldr	r2, [r0]
   11380:	mov	r0, #1
   11384:	bl	11174 <__printf_chk@plt>
   11388:	movw	r1, #24546	; 0x5fe2
   1138c:	movt	r1, #1
   11390:	mov	r0, #0
   11394:	mov	r2, #5
   11398:	bl	11048 <dcgettext@plt>
   1139c:	movw	r5, #33124	; 0x8164
   113a0:	movt	r5, #2
   113a4:	ldr	r1, [r5]
   113a8:	bl	10fac <fputs_unlocked@plt>
   113ac:	bl	11500 <__assert_fail@plt+0x2b4>
   113b0:	bl	11530 <__assert_fail@plt+0x2e4>
   113b4:	movw	r1, #24612	; 0x6024
   113b8:	movt	r1, #1
   113bc:	mov	r0, #0
   113c0:	mov	r2, #5
   113c4:	bl	11048 <dcgettext@plt>
   113c8:	ldr	r1, [r5]
   113cc:	bl	10fac <fputs_unlocked@plt>
   113d0:	movw	r1, #24789	; 0x60d5
   113d4:	movt	r1, #1
   113d8:	mov	r0, #0
   113dc:	mov	r2, #5
   113e0:	bl	11048 <dcgettext@plt>
   113e4:	ldr	r1, [r5]
   113e8:	bl	10fac <fputs_unlocked@plt>
   113ec:	movw	r1, #25027	; 0x61c3
   113f0:	movt	r1, #1
   113f4:	mov	r0, #0
   113f8:	mov	r2, #5
   113fc:	bl	11048 <dcgettext@plt>
   11400:	ldr	r1, [r5]
   11404:	bl	10fac <fputs_unlocked@plt>
   11408:	movw	r1, #25141	; 0x6235
   1140c:	movt	r1, #1
   11410:	mov	r0, #0
   11414:	mov	r2, #5
   11418:	bl	11048 <dcgettext@plt>
   1141c:	ldr	r1, [r5]
   11420:	bl	10fac <fputs_unlocked@plt>
   11424:	movw	r1, #25351	; 0x6307
   11428:	movt	r1, #1
   1142c:	mov	r0, #0
   11430:	mov	r2, #5
   11434:	bl	11048 <dcgettext@plt>
   11438:	ldr	r1, [r5]
   1143c:	bl	10fac <fputs_unlocked@plt>
   11440:	movw	r1, #25414	; 0x6346
   11444:	movt	r1, #1
   11448:	mov	r0, #0
   1144c:	mov	r2, #5
   11450:	bl	11048 <dcgettext@plt>
   11454:	ldr	r1, [r5]
   11458:	bl	10fac <fputs_unlocked@plt>
   1145c:	movw	r1, #25459	; 0x6373
   11460:	movt	r1, #1
   11464:	mov	r0, #0
   11468:	mov	r2, #5
   1146c:	bl	11048 <dcgettext@plt>
   11470:	ldr	r1, [r5]
   11474:	bl	10fac <fputs_unlocked@plt>
   11478:	movw	r1, #25513	; 0x63a9
   1147c:	movt	r1, #1
   11480:	mov	r0, #0
   11484:	mov	r2, #5
   11488:	bl	11048 <dcgettext@plt>
   1148c:	ldr	r1, [r5]
   11490:	bl	10fac <fputs_unlocked@plt>
   11494:	movw	r1, #25717	; 0x6475
   11498:	movt	r1, #1
   1149c:	mov	r0, #0
   114a0:	mov	r2, #5
   114a4:	bl	11048 <dcgettext@plt>
   114a8:	ldr	r1, [r5]
   114ac:	bl	10fac <fputs_unlocked@plt>
   114b0:	bl	11560 <__assert_fail@plt+0x314>
   114b4:	mov	r0, r4
   114b8:	bl	11120 <exit@plt>
   114bc:	movw	r0, #33112	; 0x8158
   114c0:	movt	r0, #2
   114c4:	ldr	r5, [r0]
   114c8:	movw	r1, #24476	; 0x5f9c
   114cc:	movt	r1, #1
   114d0:	mov	r0, #0
   114d4:	mov	r2, #5
   114d8:	bl	11048 <dcgettext@plt>
   114dc:	mov	r2, r0
   114e0:	movw	r0, #33180	; 0x819c
   114e4:	movt	r0, #2
   114e8:	ldr	r3, [r0]
   114ec:	mov	r0, r5
   114f0:	mov	r1, #1
   114f4:	bl	1118c <__fprintf_chk@plt>
   114f8:	mov	r0, r4
   114fc:	bl	11120 <exit@plt>
   11500:	push	{fp, lr}
   11504:	mov	fp, sp
   11508:	movw	r1, #26346	; 0x66ea
   1150c:	movt	r1, #1
   11510:	mov	r0, #0
   11514:	mov	r2, #5
   11518:	bl	11048 <dcgettext@plt>
   1151c:	movw	r1, #33124	; 0x8164
   11520:	movt	r1, #2
   11524:	ldr	r1, [r1]
   11528:	pop	{fp, lr}
   1152c:	b	10fac <fputs_unlocked@plt>
   11530:	push	{fp, lr}
   11534:	mov	fp, sp
   11538:	movw	r1, #26402	; 0x6722
   1153c:	movt	r1, #1
   11540:	mov	r0, #0
   11544:	mov	r2, #5
   11548:	bl	11048 <dcgettext@plt>
   1154c:	movw	r1, #33124	; 0x8164
   11550:	movt	r1, #2
   11554:	ldr	r1, [r1]
   11558:	pop	{fp, lr}
   1155c:	b	10fac <fputs_unlocked@plt>
   11560:	push	{r4, r5, fp, lr}
   11564:	add	fp, sp, #8
   11568:	sub	sp, sp, #56	; 0x38
   1156c:	movw	r0, #27104	; 0x69e0
   11570:	movt	r0, #1
   11574:	add	r1, r0, #32
   11578:	mov	r5, sp
   1157c:	mov	r2, #48	; 0x30
   11580:	vld1.64	{d16-d17}, [r1]
   11584:	add	r1, r5, #32
   11588:	add	r3, r0, #16
   1158c:	vld1.64	{d18-d19}, [r0], r2
   11590:	vld1.64	{d20-d21}, [r3]
   11594:	vldr	d22, [r0]
   11598:	vst1.64	{d16-d17}, [r1]
   1159c:	add	r0, r5, #16
   115a0:	vst1.64	{d20-d21}, [r0]
   115a4:	mov	r0, r5
   115a8:	vst1.64	{d18-d19}, [r0], r2
   115ac:	vstr	d22, [r0]
   115b0:	ldr	r1, [sp]
   115b4:	cmp	r1, #0
   115b8:	beq	115e0 <__assert_fail@plt+0x394>
   115bc:	mov	r5, sp
   115c0:	movw	r4, #25979	; 0x657b
   115c4:	movt	r4, #1
   115c8:	mov	r0, r4
   115cc:	bl	10fb8 <strcmp@plt>
   115d0:	cmp	r0, #0
   115d4:	ldrne	r1, [r5, #8]!
   115d8:	cmpne	r1, #0
   115dc:	bne	115c8 <__assert_fail@plt+0x37c>
   115e0:	ldr	r4, [r5, #4]
   115e4:	movw	r1, #26572	; 0x67cc
   115e8:	movt	r1, #1
   115ec:	mov	r0, #0
   115f0:	mov	r2, #5
   115f4:	bl	11048 <dcgettext@plt>
   115f8:	mov	r1, r0
   115fc:	movw	r2, #26091	; 0x65eb
   11600:	movt	r2, #1
   11604:	movw	r3, #26595	; 0x67e3
   11608:	movt	r3, #1
   1160c:	mov	r0, #1
   11610:	bl	11174 <__printf_chk@plt>
   11614:	movw	r5, #25979	; 0x657b
   11618:	movt	r5, #1
   1161c:	cmp	r4, #0
   11620:	moveq	r4, r5
   11624:	mov	r0, #5
   11628:	mov	r1, #0
   1162c:	bl	111bc <setlocale@plt>
   11630:	cmp	r0, #0
   11634:	beq	11674 <__assert_fail@plt+0x428>
   11638:	movw	r1, #26635	; 0x680b
   1163c:	movt	r1, #1
   11640:	mov	r2, #3
   11644:	bl	11210 <strncmp@plt>
   11648:	cmp	r0, #0
   1164c:	beq	11674 <__assert_fail@plt+0x428>
   11650:	movw	r1, #26639	; 0x680f
   11654:	movt	r1, #1
   11658:	mov	r0, #0
   1165c:	mov	r2, #5
   11660:	bl	11048 <dcgettext@plt>
   11664:	movw	r1, #33124	; 0x8164
   11668:	movt	r1, #2
   1166c:	ldr	r1, [r1]
   11670:	bl	10fac <fputs_unlocked@plt>
   11674:	movw	r1, #26710	; 0x6856
   11678:	movt	r1, #1
   1167c:	mov	r0, #0
   11680:	mov	r2, #5
   11684:	bl	11048 <dcgettext@plt>
   11688:	mov	r1, r0
   1168c:	movw	r2, #26595	; 0x67e3
   11690:	movt	r2, #1
   11694:	mov	r0, #1
   11698:	mov	r3, r5
   1169c:	bl	11174 <__printf_chk@plt>
   116a0:	movw	r1, #26737	; 0x6871
   116a4:	movt	r1, #1
   116a8:	mov	r0, #0
   116ac:	mov	r2, #5
   116b0:	bl	11048 <dcgettext@plt>
   116b4:	mov	r1, r0
   116b8:	movw	r0, #26505	; 0x6789
   116bc:	movt	r0, #1
   116c0:	movw	r3, #26787	; 0x68a3
   116c4:	movt	r3, #1
   116c8:	cmp	r4, r5
   116cc:	moveq	r3, r0
   116d0:	mov	r0, #1
   116d4:	mov	r2, r4
   116d8:	bl	11174 <__printf_chk@plt>
   116dc:	sub	sp, fp, #8
   116e0:	pop	{r4, r5, fp, pc}
   116e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116e8:	add	fp, sp, #28
   116ec:	sub	sp, sp, #20
   116f0:	mov	sl, r1
   116f4:	mov	r5, r0
   116f8:	ldr	r0, [r1]
   116fc:	bl	1319c <__assert_fail@plt+0x1f50>
   11700:	movw	r1, #26787	; 0x68a3
   11704:	movt	r1, #1
   11708:	mov	r0, #6
   1170c:	bl	111bc <setlocale@plt>
   11710:	movw	r6, #26095	; 0x65ef
   11714:	movt	r6, #1
   11718:	movw	r1, #25983	; 0x657f
   1171c:	movt	r1, #1
   11720:	mov	r0, r6
   11724:	bl	11204 <bindtextdomain@plt>
   11728:	mov	r0, r6
   1172c:	bl	11060 <textdomain@plt>
   11730:	movw	r0, #10944	; 0x2ac0
   11734:	movt	r0, #1
   11738:	bl	15f78 <__assert_fail@plt+0x4d2c>
   1173c:	movw	r0, #33136	; 0x8170
   11740:	movt	r0, #2
   11744:	mov	r8, #0
   11748:	strb	r8, [r0]
   1174c:	movw	r0, #33137	; 0x8171
   11750:	movt	r0, #2
   11754:	strb	r8, [r0]
   11758:	movw	r0, #33138	; 0x8172
   1175c:	movt	r0, #2
   11760:	strb	r8, [r0]
   11764:	movw	r2, #26007	; 0x6597
   11768:	movt	r2, #1
   1176c:	movw	r3, #26928	; 0x6930
   11770:	movt	r3, #1
   11774:	mov	r4, #0
   11778:	mov	r9, #0
   1177c:	mov	r6, #0
   11780:	b	11790 <__assert_fail@plt+0x544>
   11784:	movw	r0, #33128	; 0x8168
   11788:	movt	r0, #2
   1178c:	ldr	r6, [r0]
   11790:	str	r8, [sp]
   11794:	mov	r0, r5
   11798:	mov	r1, sl
   1179c:	bl	11108 <getopt_long@plt>
   117a0:	cmp	r0, #97	; 0x61
   117a4:	ble	11928 <__assert_fail@plt+0x6dc>
   117a8:	sub	r1, r0, #98	; 0x62
   117ac:	cmp	r1, #24
   117b0:	bhi	11840 <__assert_fail@plt+0x5f4>
   117b4:	add	r0, pc, #16
   117b8:	movw	r2, #26007	; 0x6597
   117bc:	movt	r2, #1
   117c0:	movw	r3, #26928	; 0x6930
   117c4:	movt	r3, #1
   117c8:	ldr	pc, [r0, r1, lsl #2]
   117cc:	andeq	r1, r1, r0, lsr r8
   117d0:	andeq	r1, r1, r0, lsr r8
   117d4:	muleq	r1, ip, r8
   117d8:	andeq	r1, r1, r8, lsr fp
   117dc:	andeq	r1, r1, r4, lsr r8
   117e0:	andeq	r1, r1, r8, lsr fp
   117e4:	andeq	r1, r1, r8, lsr fp
   117e8:	andeq	r1, r1, r8, lsr fp
   117ec:	andeq	r1, r1, r8, lsr fp
   117f0:	andeq	r1, r1, r8, lsr fp
   117f4:	andeq	r1, r1, r8, lsr fp
   117f8:	andeq	r1, r1, r8, lsr fp
   117fc:	muleq	r1, r0, r7
   11800:	andeq	r1, r1, r8, lsr fp
   11804:	andeq	r1, r1, r8, lsr fp
   11808:	andeq	r1, r1, r8, lsr fp
   1180c:	andeq	r1, r1, r8, lsr fp
   11810:	ldrdeq	r1, [r1], -r0
   11814:	andeq	r1, r1, r8, lsr fp
   11818:	andeq	r1, r1, r8, lsr fp
   1181c:	andeq	r1, r1, r8, lsr fp
   11820:	andeq	r1, r1, r8, lsr fp
   11824:	andeq	r1, r1, r8, lsr fp
   11828:	andeq	r1, r1, r8, lsr fp
   1182c:	andeq	r1, r1, r8, lsl #17
   11830:	mov	r9, #1
   11834:	cmp	r6, #0
   11838:	beq	11784 <__assert_fail@plt+0x538>
   1183c:	b	11b14 <__assert_fail@plt+0x8c8>
   11840:	cmp	r0, #256	; 0x100
   11844:	movw	r2, #26007	; 0x6597
   11848:	movt	r2, #1
   1184c:	movw	r3, #26928	; 0x6930
   11850:	movt	r3, #1
   11854:	bne	118dc <__assert_fail@plt+0x690>
   11858:	movw	r0, #33128	; 0x8168
   1185c:	movt	r0, #2
   11860:	ldr	r0, [r0]
   11864:	ldrb	r1, [r0]
   11868:	cmp	r1, #0
   1186c:	beq	118fc <__assert_fail@plt+0x6b0>
   11870:	bl	1112c <strlen@plt>
   11874:	movw	r3, #26928	; 0x6930
   11878:	movt	r3, #1
   1187c:	movw	r2, #26007	; 0x6597
   11880:	movt	r2, #1
   11884:	b	11900 <__assert_fail@plt+0x6b4>
   11888:	mov	r0, #1
   1188c:	movw	r1, #33148	; 0x817c
   11890:	movt	r1, #2
   11894:	strb	r0, [r1]
   11898:	b	11790 <__assert_fail@plt+0x544>
   1189c:	movw	r0, #33128	; 0x8168
   118a0:	movt	r0, #2
   118a4:	ldr	r1, [r0]
   118a8:	ldrb	r0, [r1]
   118ac:	cmp	r0, #0
   118b0:	ldrbne	r1, [r1, #1]
   118b4:	cmpne	r1, #0
   118b8:	bne	11b20 <__assert_fail@plt+0x8d4>
   118bc:	movw	r1, #33137	; 0x8171
   118c0:	movt	r1, #2
   118c4:	strb	r0, [r1]
   118c8:	mov	r4, #1
   118cc:	b	11790 <__assert_fail@plt+0x544>
   118d0:	movw	r0, #33136	; 0x8170
   118d4:	movt	r0, #2
   118d8:	b	118f0 <__assert_fail@plt+0x6a4>
   118dc:	movw	r1, #257	; 0x101
   118e0:	cmp	r0, r1
   118e4:	bne	11b38 <__assert_fail@plt+0x8ec>
   118e8:	movw	r0, #33149	; 0x817d
   118ec:	movt	r0, #2
   118f0:	mov	r1, #1
   118f4:	strb	r1, [r0]
   118f8:	b	11790 <__assert_fail@plt+0x544>
   118fc:	mov	r0, #1
   11900:	movw	r1, #33140	; 0x8174
   11904:	movt	r1, #2
   11908:	str	r0, [r1]
   1190c:	movw	r0, #33128	; 0x8168
   11910:	movt	r0, #2
   11914:	ldr	r0, [r0]
   11918:	movw	r1, #33144	; 0x8178
   1191c:	movt	r1, #2
   11920:	str	r0, [r1]
   11924:	b	11790 <__assert_fail@plt+0x544>
   11928:	cmn	r0, #1
   1192c:	bne	11aa0 <__assert_fail@plt+0x854>
   11930:	cmp	r6, #0
   11934:	beq	11b2c <__assert_fail@plt+0x8e0>
   11938:	tst	r9, #1
   1193c:	beq	1195c <__assert_fail@plt+0x710>
   11940:	tst	r4, #1
   11944:	bne	11b40 <__assert_fail@plt+0x8f4>
   11948:	movw	r0, #33136	; 0x8170
   1194c:	movt	r0, #2
   11950:	ldrb	r0, [r0]
   11954:	cmp	r0, #1
   11958:	beq	11b4c <__assert_fail@plt+0x900>
   1195c:	movw	r0, #33149	; 0x817d
   11960:	movt	r0, #2
   11964:	ldrb	r0, [r0]
   11968:	ands	r1, r9, #1
   1196c:	movwne	r1, #4
   11970:	bfi	r1, r0, #1, #1
   11974:	mov	r0, r6
   11978:	bl	123e0 <__assert_fail@plt+0x1194>
   1197c:	tst	r4, #1
   11980:	moveq	r0, #9
   11984:	movweq	r1, #33137	; 0x8171
   11988:	movteq	r1, #2
   1198c:	strbeq	r0, [r1]
   11990:	movw	r1, #33144	; 0x8178
   11994:	movt	r1, #2
   11998:	ldr	r0, [r1]
   1199c:	cmp	r0, #0
   119a0:	bne	119d0 <__assert_fail@plt+0x784>
   119a4:	movw	r0, #33488	; 0x82d0
   119a8:	movt	r0, #2
   119ac:	str	r0, [r1]
   119b0:	mov	r1, #1
   119b4:	movw	r2, #33140	; 0x8174
   119b8:	movt	r2, #2
   119bc:	str	r1, [r2]
   119c0:	movw	r1, #33137	; 0x8171
   119c4:	movt	r1, #2
   119c8:	ldrb	r1, [r1]
   119cc:	strb	r1, [r0]
   119d0:	movw	r0, #7032	; 0x1b78
   119d4:	movt	r0, #1
   119d8:	movw	r7, #7388	; 0x1cdc
   119dc:	movt	r7, #1
   119e0:	tst	r9, #1
   119e4:	movne	r7, r0
   119e8:	movw	r4, #33104	; 0x8150
   119ec:	movt	r4, #2
   119f0:	ldr	r0, [r4]
   119f4:	cmp	r0, r5
   119f8:	bne	11a14 <__assert_fail@plt+0x7c8>
   119fc:	movw	r0, #27316	; 0x6ab4
   11a00:	movt	r0, #1
   11a04:	mov	r1, r7
   11a08:	bl	12238 <__assert_fail@plt+0xfec>
   11a0c:	mov	r6, r0
   11a10:	b	11a4c <__assert_fail@plt+0x800>
   11a14:	ldr	r1, [r4]
   11a18:	mov	r6, #1
   11a1c:	cmp	r1, r5
   11a20:	bge	11a4c <__assert_fail@plt+0x800>
   11a24:	mov	r6, #1
   11a28:	ldr	r0, [sl, r1, lsl #2]
   11a2c:	mov	r1, r7
   11a30:	bl	12238 <__assert_fail@plt+0xfec>
   11a34:	ldr	r1, [r4]
   11a38:	add	r1, r1, #1
   11a3c:	str	r1, [r4]
   11a40:	and	r6, r6, r0
   11a44:	cmp	r1, r5
   11a48:	blt	11a28 <__assert_fail@plt+0x7dc>
   11a4c:	movw	r0, #33138	; 0x8172
   11a50:	movt	r0, #2
   11a54:	ldrb	r0, [r0]
   11a58:	cmp	r0, #1
   11a5c:	bne	11a94 <__assert_fail@plt+0x848>
   11a60:	movw	r0, #33120	; 0x8160
   11a64:	movt	r0, #2
   11a68:	ldr	r0, [r0]
   11a6c:	bl	12be8 <__assert_fail@plt+0x199c>
   11a70:	cmn	r0, #1
   11a74:	bne	11a94 <__assert_fail@plt+0x848>
   11a78:	bl	11144 <__errno_location@plt>
   11a7c:	ldr	r1, [r0]
   11a80:	mov	r6, #0
   11a84:	movw	r2, #27316	; 0x6ab4
   11a88:	movt	r2, #1
   11a8c:	mov	r0, #0
   11a90:	bl	110cc <error@plt>
   11a94:	eor	r0, r6, #1
   11a98:	sub	sp, fp, #28
   11a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11aa0:	cmn	r0, #3
   11aa4:	bne	11b04 <__assert_fail@plt+0x8b8>
   11aa8:	movw	r0, #33024	; 0x8100
   11aac:	movt	r0, #2
   11ab0:	ldr	r3, [r0]
   11ab4:	movw	r0, #33124	; 0x8164
   11ab8:	movt	r0, #2
   11abc:	ldr	r0, [r0]
   11ac0:	mov	r1, #0
   11ac4:	movw	r2, #26136	; 0x6618
   11ac8:	movt	r2, #1
   11acc:	movw	r7, #26120	; 0x6608
   11ad0:	movt	r7, #1
   11ad4:	movw	r6, #26105	; 0x65f9
   11ad8:	movt	r6, #1
   11adc:	stm	sp, {r6, r7}
   11ae0:	str	r2, [sp, #8]
   11ae4:	str	r1, [sp, #12]
   11ae8:	movw	r1, #25979	; 0x657b
   11aec:	movt	r1, #1
   11af0:	movw	r2, #26091	; 0x65eb
   11af4:	movt	r2, #1
   11af8:	bl	151a4 <__assert_fail@plt+0x3f58>
   11afc:	mov	r0, #0
   11b00:	bl	11120 <exit@plt>
   11b04:	cmn	r0, #2
   11b08:	bne	11b38 <__assert_fail@plt+0x8ec>
   11b0c:	mov	r0, #0
   11b10:	bl	11348 <__assert_fail@plt+0xfc>
   11b14:	movw	r1, #26019	; 0x65a3
   11b18:	movt	r1, #1
   11b1c:	b	11b54 <__assert_fail@plt+0x908>
   11b20:	movw	r1, #26050	; 0x65c2
   11b24:	movt	r1, #1
   11b28:	b	11b54 <__assert_fail@plt+0x908>
   11b2c:	movw	r1, #26149	; 0x6625
   11b30:	movt	r1, #1
   11b34:	b	11b54 <__assert_fail@plt+0x908>
   11b38:	mov	r0, #1
   11b3c:	bl	11348 <__assert_fail@plt+0xfc>
   11b40:	movw	r1, #26205	; 0x665d
   11b44:	movt	r1, #1
   11b48:	b	11b54 <__assert_fail@plt+0x908>
   11b4c:	movw	r1, #26271	; 0x669f
   11b50:	movt	r1, #1
   11b54:	mov	r0, #0
   11b58:	mov	r2, #5
   11b5c:	bl	11048 <dcgettext@plt>
   11b60:	mov	r2, r0
   11b64:	mov	r0, #0
   11b68:	mov	r1, #0
   11b6c:	bl	110cc <error@plt>
   11b70:	mov	r0, #1
   11b74:	bl	11348 <__assert_fail@plt+0xfc>
   11b78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b7c:	add	fp, sp, #28
   11b80:	sub	sp, sp, #12
   11b84:	mov	r4, r0
   11b88:	movw	r0, #33492	; 0x82d4
   11b8c:	movt	r0, #2
   11b90:	ldr	r0, [r0]
   11b94:	movw	r1, #33152	; 0x8180
   11b98:	movt	r1, #2
   11b9c:	str	r0, [r1]
   11ba0:	mov	r8, #0
   11ba4:	str	r8, [sp, #4]
   11ba8:	str	r8, [sp]
   11bac:	movw	sl, #33148	; 0x817c
   11bb0:	movt	sl, #2
   11bb4:	mov	r9, sp
   11bb8:	b	11be8 <__assert_fail@plt+0x99c>
   11bbc:	mov	r0, r6
   11bc0:	bl	11234 <putchar_unlocked@plt>
   11bc4:	movw	r0, #33492	; 0x82d4
   11bc8:	movt	r0, #2
   11bcc:	ldr	r0, [r0]
   11bd0:	movw	r1, #33152	; 0x8180
   11bd4:	movt	r1, #2
   11bd8:	str	r0, [r1]
   11bdc:	mov	r8, #0
   11be0:	str	r8, [sp, #4]
   11be4:	str	r8, [sp]
   11be8:	mov	r0, r4
   11bec:	bl	1103c <getc_unlocked@plt>
   11bf0:	mov	r6, r0
   11bf4:	ldrb	r0, [sl]
   11bf8:	cmp	r0, #0
   11bfc:	mov	r0, #10
   11c00:	movwne	r0, #0
   11c04:	cmp	r6, r0
   11c08:	beq	11bbc <__assert_fail@plt+0x970>
   11c0c:	cmn	r6, #1
   11c10:	beq	11cc4 <__assert_fail@plt+0xa78>
   11c14:	mov	r0, r9
   11c18:	bl	12348 <__assert_fail@plt+0x10fc>
   11c1c:	ldr	r7, [sp]
   11c20:	ldr	r5, [sp, #4]
   11c24:	mov	r0, r7
   11c28:	mov	r1, r5
   11c2c:	bl	12384 <__assert_fail@plt+0x1138>
   11c30:	cmp	r0, #0
   11c34:	beq	11be8 <__assert_fail@plt+0x99c>
   11c38:	movw	r0, #33144	; 0x8178
   11c3c:	movt	r0, #2
   11c40:	ldr	r2, [r0]
   11c44:	movw	r0, #33488	; 0x82d0
   11c48:	movt	r0, #2
   11c4c:	subs	r0, r2, r0
   11c50:	movwne	r0, #1
   11c54:	orr	r0, r8, r0
   11c58:	beq	11cb4 <__assert_fail@plt+0xa68>
   11c5c:	eor	r1, r8, #1
   11c60:	tst	r1, #1
   11c64:	mov	r8, r0
   11c68:	bne	11cb8 <__assert_fail@plt+0xa6c>
   11c6c:	mov	r0, r7
   11c70:	mov	r1, r5
   11c74:	mov	r5, r2
   11c78:	bl	123b4 <__assert_fail@plt+0x1168>
   11c7c:	mov	r8, #1
   11c80:	cmp	r0, #0
   11c84:	beq	11cb8 <__assert_fail@plt+0xa6c>
   11c88:	movw	r0, #33124	; 0x8164
   11c8c:	movt	r0, #2
   11c90:	ldr	r3, [r0]
   11c94:	movw	r0, #33140	; 0x8174
   11c98:	movt	r0, #2
   11c9c:	ldr	r2, [r0]
   11ca0:	mov	r8, #1
   11ca4:	mov	r0, r5
   11ca8:	mov	r1, #1
   11cac:	bl	11024 <fwrite_unlocked@plt>
   11cb0:	b	11cb8 <__assert_fail@plt+0xa6c>
   11cb4:	mov	r8, r0
   11cb8:	mov	r0, r6
   11cbc:	bl	11234 <putchar_unlocked@plt>
   11cc0:	b	11be8 <__assert_fail@plt+0x99c>
   11cc4:	ldm	sp, {r1, r2}
   11cc8:	orrs	r1, r1, r2
   11ccc:	beq	11cd4 <__assert_fail@plt+0xa88>
   11cd0:	bl	11234 <putchar_unlocked@plt>
   11cd4:	sub	sp, fp, #28
   11cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ce0:	add	fp, sp, #28
   11ce4:	sub	sp, sp, #36	; 0x24
   11ce8:	mov	r4, r0
   11cec:	movw	r0, #33492	; 0x82d4
   11cf0:	movt	r0, #2
   11cf4:	ldr	r0, [r0]
   11cf8:	movw	r1, #33152	; 0x8180
   11cfc:	movt	r1, #2
   11d00:	str	r0, [r1]
   11d04:	mov	r0, #0
   11d08:	str	r0, [sp, #28]
   11d0c:	mov	r0, #1
   11d10:	str	r0, [sp, #24]
   11d14:	mov	r0, r4
   11d18:	bl	1103c <getc_unlocked@plt>
   11d1c:	cmn	r0, #1
   11d20:	beq	1220c <__assert_fail@plt+0xfc0>
   11d24:	mov	r1, #0
   11d28:	str	r1, [sp, #20]
   11d2c:	mov	r1, r4
   11d30:	bl	11138 <ungetc@plt>
   11d34:	movw	r0, #33136	; 0x8170
   11d38:	movt	r0, #2
   11d3c:	ldrb	r5, [r0]
   11d40:	mov	r0, #1
   11d44:	mov	r1, #0
   11d48:	bl	12384 <__assert_fail@plt+0x1138>
   11d4c:	eor	r3, r5, r0
   11d50:	movw	r9, #33137	; 0x8171
   11d54:	movt	r9, #2
   11d58:	mov	r8, #0
   11d5c:	str	r3, [sp, #16]
   11d60:	b	11d70 <__assert_fail@plt+0xb24>
   11d64:	add	r0, sp, #24
   11d68:	bl	12348 <__assert_fail@plt+0x10fc>
   11d6c:	ldr	r3, [sp, #16]
   11d70:	ldr	r0, [sp, #24]
   11d74:	ldr	r1, [sp, #28]
   11d78:	eor	r0, r0, #1
   11d7c:	orrs	r0, r0, r1
   11d80:	movwne	r0, #1
   11d84:	orr	r0, r3, r0
   11d88:	tst	r0, #1
   11d8c:	bne	11f2c <__assert_fail@plt+0xce0>
   11d90:	ldr	r0, [sp, #24]
   11d94:	ldr	r1, [sp, #28]
   11d98:	eor	r0, r0, #1
   11d9c:	orrs	r0, r0, r1
   11da0:	movwne	r0, #1
   11da4:	orr	sl, r3, r0
   11da8:	movw	r0, #33148	; 0x817c
   11dac:	movt	r0, #2
   11db0:	ldrb	r0, [r0]
   11db4:	ldrb	r1, [r9]
   11db8:	cmp	r0, #0
   11dbc:	mov	r0, #10
   11dc0:	movwne	r0, #0
   11dc4:	str	r1, [sp]
   11dc8:	stmib	sp, {r0, r4}
   11dcc:	movw	r0, #33156	; 0x8184
   11dd0:	movt	r0, #2
   11dd4:	movw	r1, #33160	; 0x8188
   11dd8:	movt	r1, #2
   11ddc:	mov	r2, #0
   11de0:	mvn	r3, #0
   11de4:	bl	12dbc <__assert_fail@plt+0x1b70>
   11de8:	cmn	r0, #1
   11dec:	ble	121d0 <__assert_fail@plt+0xf84>
   11df0:	mov	r5, r0
   11df4:	cmp	r0, #0
   11df8:	beq	12214 <__assert_fail@plt+0xfc8>
   11dfc:	movw	r0, #33156	; 0x8184
   11e00:	movt	r0, #2
   11e04:	ldr	r7, [r0]
   11e08:	sub	r6, r5, #1
   11e0c:	ldrb	r0, [r7, r6]
   11e10:	bl	123dc <__assert_fail@plt+0x1190>
   11e14:	ldrb	r1, [r9]
   11e18:	cmp	r0, r1
   11e1c:	beq	11eac <__assert_fail@plt+0xc60>
   11e20:	movw	r0, #33136	; 0x8170
   11e24:	movt	r0, #2
   11e28:	ldrb	r0, [r0]
   11e2c:	mov	r8, #0
   11e30:	cmp	r0, #0
   11e34:	bne	11ea0 <__assert_fail@plt+0xc54>
   11e38:	movw	r0, #33124	; 0x8164
   11e3c:	movt	r0, #2
   11e40:	ldr	r3, [r0]
   11e44:	mov	r0, r7
   11e48:	mov	r1, #1
   11e4c:	mov	r2, r5
   11e50:	bl	11024 <fwrite_unlocked@plt>
   11e54:	movw	r0, #33148	; 0x817c
   11e58:	movt	r0, #2
   11e5c:	ldrb	r0, [r0]
   11e60:	cmp	r0, #0
   11e64:	mov	r0, #10
   11e68:	movwne	r0, #0
   11e6c:	movw	r1, #33156	; 0x8184
   11e70:	movt	r1, #2
   11e74:	ldr	r1, [r1]
   11e78:	ldrb	r1, [r1, r6]
   11e7c:	cmp	r0, r1
   11e80:	beq	11e88 <__assert_fail@plt+0xc3c>
   11e84:	bl	11234 <putchar_unlocked@plt>
   11e88:	movw	r0, #33148	; 0x817c
   11e8c:	movt	r0, #2
   11e90:	ldrb	r0, [r0]
   11e94:	cmp	r0, #0
   11e98:	mov	r8, #10
   11e9c:	movwne	r8, #0
   11ea0:	tst	sl, #1
   11ea4:	beq	11da8 <__assert_fail@plt+0xb5c>
   11ea8:	b	11f2c <__assert_fail@plt+0xce0>
   11eac:	mov	r0, #1
   11eb0:	mov	r1, #0
   11eb4:	bl	12384 <__assert_fail@plt+0x1138>
   11eb8:	cmp	r0, #0
   11ebc:	beq	11f20 <__assert_fail@plt+0xcd4>
   11ec0:	movw	r0, #33124	; 0x8164
   11ec4:	movt	r0, #2
   11ec8:	ldr	r3, [r0]
   11ecc:	mov	r0, r7
   11ed0:	mov	r1, #1
   11ed4:	mov	r2, r6
   11ed8:	bl	11024 <fwrite_unlocked@plt>
   11edc:	movw	r0, #33148	; 0x817c
   11ee0:	movt	r0, #2
   11ee4:	ldrb	r0, [r0]
   11ee8:	cmp	r0, #0
   11eec:	mov	r0, #10
   11ef0:	movwne	r0, #0
   11ef4:	ldrb	r1, [r9]
   11ef8:	cmp	r0, r1
   11efc:	bne	11f18 <__assert_fail@plt+0xccc>
   11f00:	mov	r0, r4
   11f04:	bl	1103c <getc_unlocked@plt>
   11f08:	cmn	r0, #1
   11f0c:	beq	11f20 <__assert_fail@plt+0xcd4>
   11f10:	mov	r1, r4
   11f14:	bl	11138 <ungetc@plt>
   11f18:	mov	r0, #1
   11f1c:	str	r0, [sp, #20]
   11f20:	add	r0, sp, #24
   11f24:	bl	12348 <__assert_fail@plt+0x10fc>
   11f28:	mov	r8, #0
   11f2c:	ldr	sl, [sp, #24]
   11f30:	ldr	r7, [sp, #28]
   11f34:	mov	r0, sl
   11f38:	mov	r1, r7
   11f3c:	bl	12384 <__assert_fail@plt+0x1138>
   11f40:	cmp	r0, #0
   11f44:	beq	12008 <__assert_fail@plt+0xdbc>
   11f48:	ldr	r0, [sp, #20]
   11f4c:	tst	r0, #1
   11f50:	beq	11f80 <__assert_fail@plt+0xd34>
   11f54:	movw	r0, #33124	; 0x8164
   11f58:	movt	r0, #2
   11f5c:	ldr	r3, [r0]
   11f60:	movw	r0, #33140	; 0x8174
   11f64:	movt	r0, #2
   11f68:	ldr	r2, [r0]
   11f6c:	movw	r0, #33144	; 0x8178
   11f70:	movt	r0, #2
   11f74:	ldr	r0, [r0]
   11f78:	mov	r1, #1
   11f7c:	bl	11024 <fwrite_unlocked@plt>
   11f80:	mov	r0, r4
   11f84:	bl	1103c <getc_unlocked@plt>
   11f88:	ldrb	r1, [r9]
   11f8c:	mov	r2, #1
   11f90:	str	r2, [sp, #20]
   11f94:	cmp	r0, r1
   11f98:	beq	12040 <__assert_fail@plt+0xdf4>
   11f9c:	movw	r1, #33148	; 0x817c
   11fa0:	movt	r1, #2
   11fa4:	ldrb	r1, [r1]
   11fa8:	cmp	r1, #0
   11fac:	mov	r1, #10
   11fb0:	movwne	r1, #0
   11fb4:	cmn	r0, #1
   11fb8:	beq	12040 <__assert_fail@plt+0xdf4>
   11fbc:	cmp	r0, r1
   11fc0:	beq	12040 <__assert_fail@plt+0xdf4>
   11fc4:	mov	r6, r0
   11fc8:	bl	11234 <putchar_unlocked@plt>
   11fcc:	mov	r0, r4
   11fd0:	bl	1103c <getc_unlocked@plt>
   11fd4:	ldrb	r1, [r9]
   11fd8:	cmp	r0, r1
   11fdc:	beq	12044 <__assert_fail@plt+0xdf8>
   11fe0:	movw	r1, #33148	; 0x817c
   11fe4:	movt	r1, #2
   11fe8:	ldrb	r1, [r1]
   11fec:	cmp	r1, #0
   11ff0:	mov	r1, #10
   11ff4:	movwne	r1, #0
   11ff8:	cmn	r0, #1
   11ffc:	cmpne	r0, r1
   12000:	beq	12044 <__assert_fail@plt+0xdf8>
   12004:	b	11fc4 <__assert_fail@plt+0xd78>
   12008:	mov	r0, r4
   1200c:	bl	1103c <getc_unlocked@plt>
   12010:	ldrb	r1, [r9]
   12014:	cmp	r0, r1
   12018:	beq	12040 <__assert_fail@plt+0xdf4>
   1201c:	movw	r1, #33148	; 0x817c
   12020:	movt	r1, #2
   12024:	ldrb	r1, [r1]
   12028:	cmp	r1, #0
   1202c:	mov	r1, #10
   12030:	movwne	r1, #0
   12034:	cmn	r0, #1
   12038:	cmpne	r0, r1
   1203c:	bne	120b8 <__assert_fail@plt+0xe6c>
   12040:	mov	r6, r8
   12044:	mov	r8, r0
   12048:	movw	r0, #33148	; 0x817c
   1204c:	movt	r0, #2
   12050:	ldrb	r0, [r0]
   12054:	cmp	r0, #0
   12058:	mov	r0, #10
   1205c:	movwne	r0, #0
   12060:	ldrb	r1, [r9]
   12064:	cmp	r8, r1
   12068:	cmpeq	r0, r1
   1206c:	beq	120fc <__assert_fail@plt+0xeb0>
   12070:	ldrb	r1, [r9]
   12074:	cmp	r8, r1
   12078:	beq	11d64 <__assert_fail@plt+0xb18>
   1207c:	movw	r0, #33148	; 0x817c
   12080:	movt	r0, #2
   12084:	ldrb	r0, [r0]
   12088:	cmp	r0, #0
   1208c:	mov	r0, #10
   12090:	movwne	r0, #0
   12094:	add	r2, r8, #1
   12098:	clz	r2, r2
   1209c:	lsr	r5, r2, #5
   120a0:	cmn	r8, #1
   120a4:	beq	1213c <__assert_fail@plt+0xef0>
   120a8:	cmp	r8, r0
   120ac:	ldr	r3, [sp, #16]
   120b0:	bne	11d70 <__assert_fail@plt+0xb24>
   120b4:	b	12140 <__assert_fail@plt+0xef4>
   120b8:	mov	r6, r0
   120bc:	mov	r0, r4
   120c0:	bl	1103c <getc_unlocked@plt>
   120c4:	ldrb	r1, [r9]
   120c8:	cmp	r0, r1
   120cc:	beq	12044 <__assert_fail@plt+0xdf8>
   120d0:	movw	r1, #33148	; 0x817c
   120d4:	movt	r1, #2
   120d8:	ldrb	r1, [r1]
   120dc:	cmp	r1, #0
   120e0:	mov	r1, #10
   120e4:	movwne	r1, #0
   120e8:	cmn	r0, #1
   120ec:	beq	12044 <__assert_fail@plt+0xdf8>
   120f0:	cmp	r0, r1
   120f4:	bne	120b8 <__assert_fail@plt+0xe6c>
   120f8:	b	12044 <__assert_fail@plt+0xdf8>
   120fc:	mov	r0, r4
   12100:	bl	1103c <getc_unlocked@plt>
   12104:	cmn	r0, #1
   12108:	beq	12118 <__assert_fail@plt+0xecc>
   1210c:	mov	r1, r4
   12110:	bl	11138 <ungetc@plt>
   12114:	b	12070 <__assert_fail@plt+0xe24>
   12118:	movw	r0, #33148	; 0x817c
   1211c:	movt	r0, #2
   12120:	ldrb	r0, [r0]
   12124:	cmp	r0, #0
   12128:	mov	r0, #10
   1212c:	movwne	r0, #0
   12130:	ldrb	r1, [r9]
   12134:	mvn	r8, #0
   12138:	mov	r5, #1
   1213c:	ldr	r3, [sp, #16]
   12140:	ldr	r2, [sp, #20]
   12144:	tst	r2, #1
   12148:	eoreq	r2, sl, #1
   1214c:	orrseq	r2, r2, r7
   12150:	beq	12180 <__assert_fail@plt+0xf34>
   12154:	cmp	r0, r1
   12158:	beq	1216c <__assert_fail@plt+0xf20>
   1215c:	cmp	r6, r0
   12160:	bne	1216c <__assert_fail@plt+0xf20>
   12164:	cmp	r8, r0
   12168:	bne	12194 <__assert_fail@plt+0xf48>
   1216c:	bl	11234 <putchar_unlocked@plt>
   12170:	ldr	r3, [sp, #16]
   12174:	cmp	r5, #0
   12178:	beq	1219c <__assert_fail@plt+0xf50>
   1217c:	b	1220c <__assert_fail@plt+0xfc0>
   12180:	movw	r2, #33136	; 0x8170
   12184:	movt	r2, #2
   12188:	ldrb	r2, [r2]
   1218c:	cmp	r2, #0
   12190:	beq	12154 <__assert_fail@plt+0xf08>
   12194:	cmp	r5, #0
   12198:	bne	1220c <__assert_fail@plt+0xfc0>
   1219c:	movw	r0, #33492	; 0x82d4
   121a0:	movt	r0, #2
   121a4:	ldr	r0, [r0]
   121a8:	movw	r1, #33152	; 0x8180
   121ac:	movt	r1, #2
   121b0:	str	r0, [r1]
   121b4:	mov	r1, #0
   121b8:	mov	r0, #0
   121bc:	str	r0, [sp, #20]
   121c0:	str	r1, [sp, #28]
   121c4:	mov	r0, #1
   121c8:	str	r0, [sp, #24]
   121cc:	b	11d70 <__assert_fail@plt+0xb24>
   121d0:	movw	r0, #33156	; 0x8184
   121d4:	movt	r0, #2
   121d8:	mov	r5, r0
   121dc:	ldr	r0, [r0]
   121e0:	bl	12cf0 <__assert_fail@plt+0x1aa4>
   121e4:	mov	r0, #0
   121e8:	str	r0, [r5]
   121ec:	mov	r0, r4
   121f0:	bl	110b4 <ferror_unlocked@plt>
   121f4:	cmp	r0, #0
   121f8:	bne	1220c <__assert_fail@plt+0xfc0>
   121fc:	mov	r0, r4
   12200:	bl	11228 <feof_unlocked@plt>
   12204:	cmp	r0, #0
   12208:	beq	12234 <__assert_fail@plt+0xfe8>
   1220c:	sub	sp, fp, #28
   12210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12214:	movw	r0, #26877	; 0x68fd
   12218:	movt	r0, #1
   1221c:	movw	r1, #26890	; 0x690a
   12220:	movt	r1, #1
   12224:	movw	r3, #26900	; 0x6914
   12228:	movt	r3, #1
   1222c:	movw	r2, #315	; 0x13b
   12230:	bl	1124c <__assert_fail@plt>
   12234:	bl	1565c <__assert_fail@plt+0x4410>
   12238:	push	{r4, r5, r6, r7, fp, lr}
   1223c:	add	fp, sp, #16
   12240:	mov	r5, r1
   12244:	mov	r4, r0
   12248:	movw	r1, #27316	; 0x6ab4
   1224c:	movt	r1, #1
   12250:	bl	10fb8 <strcmp@plt>
   12254:	cmp	r0, #0
   12258:	beq	12284 <__assert_fail@plt+0x1038>
   1225c:	movw	r1, #26089	; 0x65e9
   12260:	movt	r1, #1
   12264:	mov	r0, r4
   12268:	bl	111ec <fopen64@plt>
   1226c:	mov	r6, r0
   12270:	cmp	r0, #0
   12274:	bne	122a0 <__assert_fail@plt+0x1054>
   12278:	bl	11144 <__errno_location@plt>
   1227c:	ldr	r5, [r0]
   12280:	b	12314 <__assert_fail@plt+0x10c8>
   12284:	movw	r0, #33138	; 0x8172
   12288:	movt	r0, #2
   1228c:	mov	r1, #1
   12290:	strb	r1, [r0]
   12294:	movw	r0, #33120	; 0x8160
   12298:	movt	r0, #2
   1229c:	ldr	r6, [r0]
   122a0:	mov	r0, r6
   122a4:	mov	r1, #2
   122a8:	bl	12bac <__assert_fail@plt+0x1960>
   122ac:	mov	r0, r6
   122b0:	blx	r5
   122b4:	bl	11144 <__errno_location@plt>
   122b8:	mov	r7, r0
   122bc:	ldr	r5, [r0]
   122c0:	mov	r0, r6
   122c4:	bl	110b4 <ferror_unlocked@plt>
   122c8:	cmp	r0, #0
   122cc:	moveq	r5, r0
   122d0:	movw	r1, #27316	; 0x6ab4
   122d4:	movt	r1, #1
   122d8:	mov	r0, r4
   122dc:	bl	10fb8 <strcmp@plt>
   122e0:	cmp	r0, #0
   122e4:	beq	122fc <__assert_fail@plt+0x10b0>
   122e8:	mov	r0, r6
   122ec:	bl	12be8 <__assert_fail@plt+0x199c>
   122f0:	cmn	r0, #1
   122f4:	ldreq	r5, [r7]
   122f8:	b	12304 <__assert_fail@plt+0x10b8>
   122fc:	mov	r0, r6
   12300:	bl	111e0 <clearerr_unlocked@plt>
   12304:	cmp	r5, #0
   12308:	moveq	r6, #1
   1230c:	moveq	r0, r6
   12310:	popeq	{r4, r5, r6, r7, fp, pc}
   12314:	mov	r6, #0
   12318:	mov	r0, #0
   1231c:	mov	r1, #3
   12320:	mov	r2, r4
   12324:	bl	14894 <__assert_fail@plt+0x3648>
   12328:	mov	r3, r0
   1232c:	movw	r2, #27574	; 0x6bb6
   12330:	movt	r2, #1
   12334:	mov	r0, #0
   12338:	mov	r1, r5
   1233c:	bl	110cc <error@plt>
   12340:	mov	r0, r6
   12344:	pop	{r4, r5, r6, r7, fp, pc}
   12348:	push	{r4, r5, fp, lr}
   1234c:	add	fp, sp, #8
   12350:	ldrd	r2, [r0]
   12354:	adds	r2, r2, #1
   12358:	adc	r3, r3, #0
   1235c:	strd	r2, [r0]
   12360:	movw	r0, #33152	; 0x8180
   12364:	movt	r0, #2
   12368:	ldr	r1, [r0]
   1236c:	ldrd	r4, [r1, #8]
   12370:	subs	r2, r4, r2
   12374:	sbcs	r2, r5, r3
   12378:	addcc	r1, r1, #16
   1237c:	strcc	r1, [r0]
   12380:	pop	{r4, r5, fp, pc}
   12384:	push	{r4, r5, fp, lr}
   12388:	add	fp, sp, #8
   1238c:	movw	r2, #33152	; 0x8180
   12390:	movt	r2, #2
   12394:	ldr	r2, [r2]
   12398:	ldrd	r4, [r2]
   1239c:	mov	r2, #0
   123a0:	subs	r0, r0, r4
   123a4:	sbcs	r0, r1, r5
   123a8:	movwcs	r2, #1
   123ac:	mov	r0, r2
   123b0:	pop	{r4, r5, fp, pc}
   123b4:	movw	r2, #33152	; 0x8180
   123b8:	movt	r2, #2
   123bc:	ldr	r2, [r2]
   123c0:	ldrd	r2, [r2]
   123c4:	eor	r1, r3, r1
   123c8:	eor	r0, r2, r0
   123cc:	orr	r0, r0, r1
   123d0:	clz	r0, r0
   123d4:	lsr	r0, r0, #5
   123d8:	bx	lr
   123dc:	bx	lr
   123e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123e4:	add	fp, sp, #28
   123e8:	sub	sp, sp, #28
   123ec:	mov	r9, r0
   123f0:	str	r1, [sp, #4]
   123f4:	ands	r0, r1, #1
   123f8:	str	r0, [sp, #8]
   123fc:	mov	ip, #0
   12400:	beq	12434 <__assert_fail@plt+0x11e8>
   12404:	movw	r1, #27316	; 0x6ab4
   12408:	movt	r1, #1
   1240c:	mov	r0, r9
   12410:	bl	10fb8 <strcmp@plt>
   12414:	mov	ip, #0
   12418:	cmp	r0, #0
   1241c:	addeq	r9, r9, #1
   12420:	clz	r0, r0
   12424:	lsr	r2, r0, #5
   12428:	mov	r3, #0
   1242c:	mov	lr, r2
   12430:	b	12440 <__assert_fail@plt+0x11f4>
   12434:	mov	r2, #0
   12438:	mov	r3, #0
   1243c:	mov	lr, #0
   12440:	mov	sl, #1
   12444:	mov	r1, lr
   12448:	mov	r6, #0
   1244c:	mov	r8, #0
   12450:	b	12478 <__assert_fail@plt+0x122c>
   12454:	mov	r2, #0
   12458:	mov	r3, #0
   1245c:	mov	lr, #0
   12460:	mov	ip, #0
   12464:	mov	r1, #0
   12468:	mov	r6, #0
   1246c:	mov	sl, r5
   12470:	mov	r8, r4
   12474:	add	r9, r9, #1
   12478:	ldrb	r4, [r9]
   1247c:	cmp	r4, #44	; 0x2c
   12480:	beq	125f4 <__assert_fail@plt+0x13a8>
   12484:	cmp	r4, #45	; 0x2d
   12488:	bne	124cc <__assert_fail@plt+0x1280>
   1248c:	tst	r1, #1
   12490:	bne	1286c <__assert_fail@plt+0x1620>
   12494:	orrs	r0, r2, r3
   12498:	eoreq	r0, lr, #1
   1249c:	tsteq	r0, #1
   124a0:	beq	127d4 <__assert_fail@plt+0x1588>
   124a4:	ands	r8, lr, #1
   124a8:	mov	r1, #1
   124ac:	mov	sl, r2
   124b0:	moveq	sl, r1
   124b4:	movne	r8, r3
   124b8:	mov	r2, #0
   124bc:	mov	r3, #0
   124c0:	mov	r6, #0
   124c4:	add	r9, r9, #1
   124c8:	b	12478 <__assert_fail@plt+0x122c>
   124cc:	str	r8, [sp, #20]
   124d0:	str	r9, [sp, #16]
   124d4:	mov	r9, sl
   124d8:	mov	r8, ip
   124dc:	mov	r7, r2
   124e0:	mov	r5, r3
   124e4:	str	r1, [sp, #24]
   124e8:	mov	sl, lr
   124ec:	bl	11114 <__ctype_b_loc@plt>
   124f0:	ldr	r0, [r0]
   124f4:	str	r0, [sp, #12]
   124f8:	mov	r0, r4
   124fc:	bl	12928 <__assert_fail@plt+0x16dc>
   12500:	mov	lr, sl
   12504:	ldr	r1, [sp, #24]
   12508:	mov	r3, r5
   1250c:	mov	r2, r7
   12510:	mov	ip, r8
   12514:	mov	sl, r9
   12518:	ldr	r9, [sp, #16]
   1251c:	ldr	r8, [sp, #20]
   12520:	cmp	r4, #0
   12524:	beq	125f4 <__assert_fail@plt+0x13a8>
   12528:	ldr	r0, [sp, #12]
   1252c:	add	r0, r0, r4, lsl #1
   12530:	ldrh	r0, [r0]
   12534:	ands	r0, r0, #1
   12538:	bne	125f4 <__assert_fail@plt+0x13a8>
   1253c:	sub	r0, r4, #48	; 0x30
   12540:	cmp	r0, #9
   12544:	bhi	12898 <__assert_fail@plt+0x164c>
   12548:	movw	r1, #33164	; 0x818c
   1254c:	movt	r1, #2
   12550:	ldr	r1, [r1]
   12554:	cmp	r1, #0
   12558:	movwne	r1, #1
   1255c:	tst	r6, r1
   12560:	movweq	r1, #33164	; 0x818c
   12564:	movteq	r1, #2
   12568:	streq	r9, [r1]
   1256c:	movw	r1, #39321	; 0x9999
   12570:	movt	r1, #39321	; 0x9999
   12574:	subs	r1, r1, r2
   12578:	movw	r1, #39321	; 0x9999
   1257c:	movt	r1, #6553	; 0x1999
   12580:	sbcs	r1, r1, r3
   12584:	bcc	127e8 <__assert_fail@plt+0x159c>
   12588:	mov	r1, #10
   1258c:	umull	r1, r7, r2, r1
   12590:	add	r6, r3, r3, lsl #2
   12594:	add	r7, r7, r6, lsl #1
   12598:	adds	r1, r1, r0
   1259c:	adc	r0, r7, r0, asr #31
   125a0:	subs	r7, r1, r2
   125a4:	sbcs	r7, r0, r3
   125a8:	mov	r7, #0
   125ac:	movwcc	r7, #1
   125b0:	cmp	r7, #0
   125b4:	moveq	r3, r0
   125b8:	moveq	r2, r1
   125bc:	cmp	r7, #0
   125c0:	bne	127e8 <__assert_fail@plt+0x159c>
   125c4:	mvn	r1, #0
   125c8:	eor	r0, r2, r1
   125cc:	eor	r1, r3, r1
   125d0:	orrs	r0, r0, r1
   125d4:	beq	127e8 <__assert_fail@plt+0x159c>
   125d8:	ldr	r1, [sp, #24]
   125dc:	orr	ip, ip, r1
   125e0:	eor	r0, r1, #1
   125e4:	orr	lr, lr, r0
   125e8:	mov	r6, #1
   125ec:	add	r9, r9, #1
   125f0:	b	12478 <__assert_fail@plt+0x122c>
   125f4:	tst	r1, #1
   125f8:	beq	12640 <__assert_fail@plt+0x13f4>
   125fc:	orr	r0, lr, ip
   12600:	ands	r4, r0, #1
   12604:	mov	r5, #1
   12608:	movne	r5, sl
   1260c:	movne	r4, r8
   12610:	ldr	r1, [sp, #8]
   12614:	cmp	r1, #0
   12618:	tsteq	r0, #1
   1261c:	beq	1288c <__assert_fail@plt+0x1640>
   12620:	tst	ip, #1
   12624:	beq	12660 <__assert_fail@plt+0x1414>
   12628:	subs	r0, r2, r5
   1262c:	sbcs	r0, r3, r4
   12630:	bcc	128e8 <__assert_fail@plt+0x169c>
   12634:	mov	r0, r5
   12638:	mov	r1, r4
   1263c:	b	12650 <__assert_fail@plt+0x1404>
   12640:	orrs	r0, r2, r3
   12644:	beq	127d4 <__assert_fail@plt+0x1588>
   12648:	mov	r0, r2
   1264c:	mov	r1, r3
   12650:	bl	1292c <__assert_fail@plt+0x16e0>
   12654:	mov	r5, sl
   12658:	mov	r4, r8
   1265c:	b	12674 <__assert_fail@plt+0x1428>
   12660:	mov	r0, r5
   12664:	mov	r1, r4
   12668:	mvn	r2, #0
   1266c:	mvn	r3, #0
   12670:	bl	1292c <__assert_fail@plt+0x16e0>
   12674:	ldrb	r0, [r9]
   12678:	cmp	r0, #0
   1267c:	bne	12454 <__assert_fail@plt+0x1208>
   12680:	movw	r7, #33496	; 0x82d8
   12684:	movt	r7, #2
   12688:	ldr	r1, [r7]
   1268c:	cmp	r1, #0
   12690:	beq	12914 <__assert_fail@plt+0x16c8>
   12694:	movw	r0, #33492	; 0x82d4
   12698:	movt	r0, #2
   1269c:	ldr	r0, [r0]
   126a0:	movw	r3, #10672	; 0x29b0
   126a4:	movt	r3, #1
   126a8:	mov	r2, #16
   126ac:	bl	111f8 <qsort@plt>
   126b0:	ldr	r0, [r7]
   126b4:	cmp	r0, #0
   126b8:	beq	12770 <__assert_fail@plt+0x1524>
   126bc:	mov	r9, #0
   126c0:	mov	sl, r9
   126c4:	add	r9, r9, #1
   126c8:	ldr	r4, [r7]
   126cc:	cmp	r9, r4
   126d0:	bcs	12764 <__assert_fail@plt+0x1518>
   126d4:	mvn	r0, #-268435455	; 0xf0000001
   126d8:	sub	r8, r0, sl
   126dc:	movw	r0, #33492	; 0x82d4
   126e0:	movt	r0, #2
   126e4:	ldr	r5, [r0]
   126e8:	add	r1, r5, sl, lsl #4
   126ec:	ldr	r2, [r1, #8]!
   126f0:	ldr	r3, [r1, #4]
   126f4:	mov	r0, r5
   126f8:	ldr	r6, [r0, r9, lsl #4]!
   126fc:	ldr	r0, [r0, #4]
   12700:	subs	r6, r2, r6
   12704:	sbcs	r0, r3, r0
   12708:	bcc	12764 <__assert_fail@plt+0x1518>
   1270c:	add	r0, r5, r9, lsl #4
   12710:	ldr	r6, [r0, #8]
   12714:	ldr	r5, [r0, #12]
   12718:	mov	ip, r7
   1271c:	subs	r7, r2, r6
   12720:	sbcs	r7, r3, r5
   12724:	mov	r7, #0
   12728:	movwcc	r7, #1
   1272c:	cmp	r7, #0
   12730:	mov	r7, ip
   12734:	movne	r3, r5
   12738:	movne	r2, r6
   1273c:	strd	r2, [r1]
   12740:	add	r1, r0, #16
   12744:	add	r2, r8, r4
   12748:	lsl	r2, r2, #4
   1274c:	bl	10fdc <memmove@plt>
   12750:	ldr	r0, [r7]
   12754:	sub	r4, r0, #1
   12758:	str	r4, [r7]
   1275c:	cmp	r9, r4
   12760:	bcc	126dc <__assert_fail@plt+0x1490>
   12764:	ldr	r0, [r7]
   12768:	cmp	r9, r0
   1276c:	bcc	126c0 <__assert_fail@plt+0x1474>
   12770:	ldr	r0, [sp, #4]
   12774:	tst	r0, #2
   12778:	blne	129cc <__assert_fail@plt+0x1780>
   1277c:	ldr	r0, [r7]
   12780:	add	r1, r0, #1
   12784:	str	r1, [r7]
   12788:	movw	r0, #33492	; 0x82d4
   1278c:	movt	r0, #2
   12790:	mov	r4, r0
   12794:	ldr	r0, [r0]
   12798:	lsl	r1, r1, #4
   1279c:	bl	152ec <__assert_fail@plt+0x40a0>
   127a0:	str	r0, [r4]
   127a4:	ldr	r1, [r7]
   127a8:	mvn	r2, #15
   127ac:	add	r1, r2, r1, lsl #4
   127b0:	add	r0, r0, r1
   127b4:	mvn	r2, #0
   127b8:	str	r2, [r0, #8]
   127bc:	str	r2, [r0, #12]
   127c0:	ldr	r0, [r4]
   127c4:	str	r2, [r0, r1]!
   127c8:	str	r2, [r0, #4]
   127cc:	sub	sp, fp, #28
   127d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127d4:	movw	r0, #27257	; 0x6a79
   127d8:	movt	r0, #1
   127dc:	movw	r1, #27212	; 0x6a4c
   127e0:	movt	r1, #1
   127e4:	b	1287c <__assert_fail@plt+0x1630>
   127e8:	movw	r0, #33164	; 0x818c
   127ec:	movt	r0, #2
   127f0:	ldr	r4, [r0]
   127f4:	movw	r1, #27343	; 0x6acf
   127f8:	movt	r1, #1
   127fc:	mov	r0, r4
   12800:	bl	11240 <strspn@plt>
   12804:	mov	r1, r0
   12808:	mov	r0, r4
   1280c:	bl	15600 <__assert_fail@plt+0x43b4>
   12810:	mov	r4, r0
   12814:	movw	r0, #27392	; 0x6b00
   12818:	movt	r0, #1
   1281c:	movw	r1, #27354	; 0x6ada
   12820:	movt	r1, #1
   12824:	ldr	r2, [sp, #4]
   12828:	tst	r2, #4
   1282c:	moveq	r1, r0
   12830:	mov	r0, #0
   12834:	mov	r2, #5
   12838:	bl	11048 <dcgettext@plt>
   1283c:	mov	r5, r0
   12840:	mov	r0, r4
   12844:	bl	149d4 <__assert_fail@plt+0x3788>
   12848:	mov	r3, r0
   1284c:	mov	r0, #0
   12850:	mov	r1, #0
   12854:	mov	r2, r5
   12858:	bl	110cc <error@plt>
   1285c:	mov	r0, r4
   12860:	bl	12cf0 <__assert_fail@plt+0x1aa4>
   12864:	mov	r0, #1
   12868:	bl	11348 <__assert_fail@plt+0xfc>
   1286c:	movw	r0, #27192	; 0x6a38
   12870:	movt	r0, #1
   12874:	movw	r1, #27160	; 0x6a18
   12878:	movt	r1, #1
   1287c:	ldr	r2, [sp, #4]
   12880:	tst	r2, #4
   12884:	moveq	r1, r0
   12888:	b	128f0 <__assert_fail@plt+0x16a4>
   1288c:	movw	r1, #27284	; 0x6a94
   12890:	movt	r1, #1
   12894:	b	128f0 <__assert_fail@plt+0x16a4>
   12898:	movw	r0, #27456	; 0x6b40
   1289c:	movt	r0, #1
   128a0:	movw	r1, #27421	; 0x6b1d
   128a4:	movt	r1, #1
   128a8:	ldr	r2, [sp, #4]
   128ac:	tst	r2, #4
   128b0:	moveq	r1, r0
   128b4:	mov	r0, #0
   128b8:	mov	r2, #5
   128bc:	bl	11048 <dcgettext@plt>
   128c0:	mov	r4, r0
   128c4:	mov	r0, r9
   128c8:	bl	149d4 <__assert_fail@plt+0x3788>
   128cc:	mov	r3, r0
   128d0:	mov	r0, #0
   128d4:	mov	r1, #0
   128d8:	mov	r2, r4
   128dc:	bl	110cc <error@plt>
   128e0:	mov	r0, #1
   128e4:	bl	11348 <__assert_fail@plt+0xfc>
   128e8:	movw	r1, #27318	; 0x6ab6
   128ec:	movt	r1, #1
   128f0:	mov	r0, #0
   128f4:	mov	r2, #5
   128f8:	bl	11048 <dcgettext@plt>
   128fc:	mov	r2, r0
   12900:	mov	r0, #0
   12904:	mov	r1, #0
   12908:	bl	110cc <error@plt>
   1290c:	mov	r0, #1
   12910:	bl	11348 <__assert_fail@plt+0xfc>
   12914:	movw	r0, #27520	; 0x6b80
   12918:	movt	r0, #1
   1291c:	movw	r1, #27479	; 0x6b57
   12920:	movt	r1, #1
   12924:	b	1287c <__assert_fail@plt+0x1630>
   12928:	bx	lr
   1292c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12930:	add	fp, sp, #24
   12934:	mov	r8, r3
   12938:	mov	r5, r2
   1293c:	mov	r6, r1
   12940:	mov	r7, r0
   12944:	movw	r0, #33168	; 0x8190
   12948:	movt	r0, #2
   1294c:	ldr	r0, [r0]
   12950:	movw	r4, #33496	; 0x82d8
   12954:	movt	r4, #2
   12958:	ldr	r1, [r4]
   1295c:	cmp	r1, r0
   12960:	bne	12984 <__assert_fail@plt+0x1738>
   12964:	movw	r9, #33492	; 0x82d4
   12968:	movt	r9, #2
   1296c:	ldr	r0, [r9]
   12970:	movw	r1, #33168	; 0x8190
   12974:	movt	r1, #2
   12978:	mov	r2, #16
   1297c:	bl	1537c <__assert_fail@plt+0x4130>
   12980:	str	r0, [r9]
   12984:	ldr	r0, [r4]
   12988:	movw	r1, #33492	; 0x82d4
   1298c:	movt	r1, #2
   12990:	ldr	r1, [r1]
   12994:	str	r7, [r1, r0, lsl #4]!
   12998:	str	r6, [r1, #4]
   1299c:	str	r5, [r1, #8]
   129a0:	str	r8, [r1, #12]
   129a4:	add	r0, r0, #1
   129a8:	str	r0, [r4]
   129ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   129b0:	ldr	r1, [r1]
   129b4:	ldr	r2, [r0]
   129b8:	mov	r0, #0
   129bc:	cmp	r2, r1
   129c0:	movwgt	r0, #1
   129c4:	mvnlt	r0, #0
   129c8:	bx	lr
   129cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   129d0:	add	fp, sp, #24
   129d4:	movw	r0, #33168	; 0x8190
   129d8:	movt	r0, #2
   129dc:	mov	r1, #0
   129e0:	str	r1, [r0]
   129e4:	movw	r0, #33492	; 0x82d4
   129e8:	movt	r0, #2
   129ec:	ldr	r9, [r0]
   129f0:	str	r1, [r0]
   129f4:	movw	r0, #33496	; 0x82d8
   129f8:	movt	r0, #2
   129fc:	ldr	r8, [r0]
   12a00:	str	r1, [r0]
   12a04:	ldrd	r0, [r9]
   12a08:	subs	r2, r0, #2
   12a0c:	sbcs	r2, r1, #0
   12a10:	bcc	12a28 <__assert_fail@plt+0x17dc>
   12a14:	subs	r2, r0, #1
   12a18:	sbc	r3, r1, #0
   12a1c:	mov	r0, #1
   12a20:	mov	r1, #0
   12a24:	bl	1292c <__assert_fail@plt+0x16e0>
   12a28:	cmp	r8, #2
   12a2c:	bcc	12a6c <__assert_fail@plt+0x1820>
   12a30:	add	r6, r9, #8
   12a34:	sub	r7, r8, #1
   12a38:	ldm	r6, {r0, r1, r2, r3}
   12a3c:	adds	r0, r0, #1
   12a40:	eor	r5, r0, r2
   12a44:	adc	r1, r1, #0
   12a48:	eor	r4, r1, r3
   12a4c:	orrs	r5, r5, r4
   12a50:	beq	12a60 <__assert_fail@plt+0x1814>
   12a54:	subs	r2, r2, #1
   12a58:	sbc	r3, r3, #0
   12a5c:	bl	1292c <__assert_fail@plt+0x16e0>
   12a60:	add	r6, r6, #16
   12a64:	subs	r7, r7, #1
   12a68:	bne	12a38 <__assert_fail@plt+0x17ec>
   12a6c:	add	r0, r9, r8, lsl #4
   12a70:	ldrd	r0, [r0, #-8]
   12a74:	and	r2, r0, r1
   12a78:	cmn	r2, #1
   12a7c:	beq	12a94 <__assert_fail@plt+0x1848>
   12a80:	adds	r0, r0, #1
   12a84:	adc	r1, r1, #0
   12a88:	mvn	r2, #0
   12a8c:	mvn	r3, #0
   12a90:	bl	1292c <__assert_fail@plt+0x16e0>
   12a94:	mov	r0, r9
   12a98:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   12a9c:	b	12cf0 <__assert_fail@plt+0x1aa4>
   12aa0:	movw	r1, #33172	; 0x8194
   12aa4:	movt	r1, #2
   12aa8:	str	r0, [r1]
   12aac:	bx	lr
   12ab0:	movw	r1, #33176	; 0x8198
   12ab4:	movt	r1, #2
   12ab8:	strb	r0, [r1]
   12abc:	bx	lr
   12ac0:	push	{r4, r5, r6, sl, fp, lr}
   12ac4:	add	fp, sp, #16
   12ac8:	sub	sp, sp, #8
   12acc:	movw	r0, #33124	; 0x8164
   12ad0:	movt	r0, #2
   12ad4:	ldr	r0, [r0]
   12ad8:	bl	15a9c <__assert_fail@plt+0x4850>
   12adc:	cmp	r0, #0
   12ae0:	beq	12b08 <__assert_fail@plt+0x18bc>
   12ae4:	movw	r0, #33176	; 0x8198
   12ae8:	movt	r0, #2
   12aec:	ldrb	r0, [r0]
   12af0:	cmp	r0, #0
   12af4:	beq	12b28 <__assert_fail@plt+0x18dc>
   12af8:	bl	11144 <__errno_location@plt>
   12afc:	ldr	r0, [r0]
   12b00:	cmp	r0, #32
   12b04:	bne	12b28 <__assert_fail@plt+0x18dc>
   12b08:	movw	r0, #33112	; 0x8158
   12b0c:	movt	r0, #2
   12b10:	ldr	r0, [r0]
   12b14:	bl	15a9c <__assert_fail@plt+0x4850>
   12b18:	cmp	r0, #0
   12b1c:	subeq	sp, fp, #16
   12b20:	popeq	{r4, r5, r6, sl, fp, pc}
   12b24:	b	12b98 <__assert_fail@plt+0x194c>
   12b28:	movw	r1, #27558	; 0x6ba6
   12b2c:	movt	r1, #1
   12b30:	mov	r0, #0
   12b34:	mov	r2, #5
   12b38:	bl	11048 <dcgettext@plt>
   12b3c:	mov	r4, r0
   12b40:	movw	r0, #33172	; 0x8194
   12b44:	movt	r0, #2
   12b48:	ldr	r6, [r0]
   12b4c:	bl	11144 <__errno_location@plt>
   12b50:	ldr	r5, [r0]
   12b54:	cmp	r6, #0
   12b58:	bne	12b74 <__assert_fail@plt+0x1928>
   12b5c:	movw	r2, #27574	; 0x6bb6
   12b60:	movt	r2, #1
   12b64:	mov	r0, #0
   12b68:	mov	r1, r5
   12b6c:	mov	r3, r4
   12b70:	b	12b94 <__assert_fail@plt+0x1948>
   12b74:	mov	r0, r6
   12b78:	bl	14884 <__assert_fail@plt+0x3638>
   12b7c:	mov	r3, r0
   12b80:	str	r4, [sp]
   12b84:	movw	r2, #27570	; 0x6bb2
   12b88:	movt	r2, #1
   12b8c:	mov	r0, #0
   12b90:	mov	r1, r5
   12b94:	bl	110cc <error@plt>
   12b98:	movw	r0, #33028	; 0x8104
   12b9c:	movt	r0, #2
   12ba0:	ldr	r0, [r0]
   12ba4:	bl	11000 <_exit@plt>
   12ba8:	b	10fc4 <posix_fadvise64@plt>
   12bac:	cmp	r0, #0
   12bb0:	bxeq	lr
   12bb4:	push	{r4, sl, fp, lr}
   12bb8:	add	fp, sp, #8
   12bbc:	sub	sp, sp, #16
   12bc0:	mov	r4, r1
   12bc4:	bl	11180 <fileno@plt>
   12bc8:	mov	r1, #0
   12bcc:	str	r1, [sp]
   12bd0:	stmib	sp, {r1, r4}
   12bd4:	mov	r2, #0
   12bd8:	mov	r3, #0
   12bdc:	bl	12ba8 <__assert_fail@plt+0x195c>
   12be0:	sub	sp, fp, #8
   12be4:	pop	{r4, sl, fp, pc}
   12be8:	push	{r4, r5, fp, lr}
   12bec:	add	fp, sp, #8
   12bf0:	sub	sp, sp, #8
   12bf4:	mov	r4, r0
   12bf8:	bl	11180 <fileno@plt>
   12bfc:	cmn	r0, #1
   12c00:	ble	12c78 <__assert_fail@plt+0x1a2c>
   12c04:	mov	r0, r4
   12c08:	bl	110f0 <__freading@plt>
   12c0c:	cmp	r0, #0
   12c10:	beq	12c3c <__assert_fail@plt+0x19f0>
   12c14:	mov	r0, r4
   12c18:	bl	11180 <fileno@plt>
   12c1c:	mov	r1, #1
   12c20:	str	r1, [sp]
   12c24:	mov	r2, #0
   12c28:	mov	r3, #0
   12c2c:	bl	11084 <lseek64@plt>
   12c30:	and	r0, r0, r1
   12c34:	cmn	r0, #1
   12c38:	beq	12c78 <__assert_fail@plt+0x1a2c>
   12c3c:	mov	r0, r4
   12c40:	bl	12c88 <__assert_fail@plt+0x1a3c>
   12c44:	cmp	r0, #0
   12c48:	beq	12c78 <__assert_fail@plt+0x1a2c>
   12c4c:	bl	11144 <__errno_location@plt>
   12c50:	ldr	r5, [r0]
   12c54:	mov	r0, r4
   12c58:	bl	111a4 <fclose@plt>
   12c5c:	cmp	r5, #0
   12c60:	beq	12c70 <__assert_fail@plt+0x1a24>
   12c64:	bl	11144 <__errno_location@plt>
   12c68:	str	r5, [r0]
   12c6c:	mvn	r0, #0
   12c70:	sub	sp, fp, #8
   12c74:	pop	{r4, r5, fp, pc}
   12c78:	mov	r0, r4
   12c7c:	sub	sp, fp, #8
   12c80:	pop	{r4, r5, fp, lr}
   12c84:	b	111a4 <fclose@plt>
   12c88:	push	{r4, sl, fp, lr}
   12c8c:	add	fp, sp, #8
   12c90:	mov	r4, r0
   12c94:	cmp	r0, #0
   12c98:	beq	12cb0 <__assert_fail@plt+0x1a64>
   12c9c:	mov	r0, r4
   12ca0:	bl	110f0 <__freading@plt>
   12ca4:	cmp	r0, #0
   12ca8:	movne	r0, r4
   12cac:	blne	12cbc <__assert_fail@plt+0x1a70>
   12cb0:	mov	r0, r4
   12cb4:	pop	{r4, sl, fp, lr}
   12cb8:	b	10fd0 <fflush@plt>
   12cbc:	ldrb	r1, [r0, #1]
   12cc0:	tst	r1, #1
   12cc4:	bxeq	lr
   12cc8:	push	{fp, lr}
   12ccc:	mov	fp, sp
   12cd0:	sub	sp, sp, #8
   12cd4:	mov	r1, #1
   12cd8:	str	r1, [sp]
   12cdc:	mov	r2, #0
   12ce0:	mov	r3, #0
   12ce4:	bl	12d18 <__assert_fail@plt+0x1acc>
   12ce8:	mov	sp, fp
   12cec:	pop	{fp, pc}
   12cf0:	push	{r4, r5, r6, sl, fp, lr}
   12cf4:	add	fp, sp, #16
   12cf8:	mov	r4, r0
   12cfc:	bl	11144 <__errno_location@plt>
   12d00:	mov	r5, r0
   12d04:	ldr	r6, [r0]
   12d08:	mov	r0, r4
   12d0c:	bl	10fe8 <free@plt>
   12d10:	str	r6, [r5]
   12d14:	pop	{r4, r5, r6, sl, fp, pc}
   12d18:	push	{r4, r5, r6, r7, fp, lr}
   12d1c:	add	fp, sp, #16
   12d20:	sub	sp, sp, #8
   12d24:	mov	r5, r3
   12d28:	mov	r6, r2
   12d2c:	mov	r4, r0
   12d30:	ldr	r0, [r0, #4]
   12d34:	ldr	r1, [r4, #8]
   12d38:	cmp	r1, r0
   12d3c:	bne	12d58 <__assert_fail@plt+0x1b0c>
   12d40:	ldrd	r0, [r4, #16]
   12d44:	cmp	r1, r0
   12d48:	bne	12d58 <__assert_fail@plt+0x1b0c>
   12d4c:	ldr	r0, [r4, #36]	; 0x24
   12d50:	cmp	r0, #0
   12d54:	beq	12d70 <__assert_fail@plt+0x1b24>
   12d58:	mov	r0, r4
   12d5c:	mov	r2, r6
   12d60:	mov	r3, r5
   12d64:	sub	sp, fp, #16
   12d68:	pop	{r4, r5, r6, r7, fp, lr}
   12d6c:	b	111b0 <fseeko64@plt>
   12d70:	ldr	r7, [fp, #8]
   12d74:	mov	r0, r4
   12d78:	bl	11180 <fileno@plt>
   12d7c:	str	r7, [sp]
   12d80:	mov	r2, r6
   12d84:	mov	r3, r5
   12d88:	bl	11084 <lseek64@plt>
   12d8c:	and	r2, r0, r1
   12d90:	cmn	r2, #1
   12d94:	mvneq	r0, #0
   12d98:	subeq	sp, fp, #16
   12d9c:	popeq	{r4, r5, r6, r7, fp, pc}
   12da0:	strd	r0, [r4, #80]	; 0x50
   12da4:	ldr	r0, [r4]
   12da8:	bic	r0, r0, #16
   12dac:	str	r0, [r4]
   12db0:	mov	r0, #0
   12db4:	sub	sp, fp, #16
   12db8:	pop	{r4, r5, r6, r7, fp, pc}
   12dbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dc0:	add	fp, sp, #28
   12dc4:	sub	sp, sp, #44	; 0x2c
   12dc8:	mov	r6, r2
   12dcc:	mov	r4, r1
   12dd0:	mov	r5, r0
   12dd4:	ldr	r0, [r0]
   12dd8:	cmp	r0, #0
   12ddc:	str	r3, [sp, #20]
   12de0:	beq	12dec <__assert_fail@plt+0x1ba0>
   12de4:	ldr	r8, [r4]
   12de8:	b	12e08 <__assert_fail@plt+0x1bbc>
   12dec:	cmp	r3, #64	; 0x40
   12df0:	mov	r8, r3
   12df4:	movcs	r8, #64	; 0x40
   12df8:	mov	r0, r8
   12dfc:	bl	156f4 <__assert_fail@plt+0x44a8>
   12e00:	cmp	r0, #0
   12e04:	beq	12e48 <__assert_fail@plt+0x1bfc>
   12e08:	cmp	r8, r6
   12e0c:	str	r4, [sp, #12]
   12e10:	str	r5, [sp, #8]
   12e14:	str	r0, [sp, #28]
   12e18:	bcc	12e34 <__assert_fail@plt+0x1be8>
   12e1c:	sub	r7, r8, r6
   12e20:	ldr	r4, [sp, #20]
   12e24:	cmp	r8, r4
   12e28:	bcc	12e54 <__assert_fail@plt+0x1c08>
   12e2c:	cmp	r7, #0
   12e30:	bne	12e54 <__assert_fail@plt+0x1c08>
   12e34:	ldr	r0, [sp, #8]
   12e38:	ldr	r1, [sp, #28]
   12e3c:	str	r1, [r0]
   12e40:	ldr	r0, [sp, #12]
   12e44:	str	r8, [r0]
   12e48:	mvn	r0, #0
   12e4c:	sub	sp, fp, #28
   12e50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e54:	ldr	r2, [fp, #16]
   12e58:	ldr	r5, [fp, #12]
   12e5c:	ldr	r3, [fp, #8]
   12e60:	cmn	r5, #1
   12e64:	mov	r1, r5
   12e68:	moveq	r1, r3
   12e6c:	cmn	r3, #1
   12e70:	moveq	r1, r5
   12e74:	str	r1, [sp, #16]
   12e78:	moveq	r3, r5
   12e7c:	str	r3, [sp, #24]
   12e80:	add	r9, r0, r6
   12e84:	str	r6, [sp, #4]
   12e88:	eor	r0, r6, #-2147483648	; 0x80000000
   12e8c:	str	r0, [sp]
   12e90:	mov	r6, r2
   12e94:	mov	r0, r6
   12e98:	sub	r1, fp, #32
   12e9c:	bl	15b24 <__assert_fail@plt+0x48d8>
   12ea0:	mov	sl, r0
   12ea4:	cmp	r0, #0
   12ea8:	beq	12f10 <__assert_fail@plt+0x1cc4>
   12eac:	str	r5, [sp, #36]	; 0x24
   12eb0:	ldr	r1, [sp, #24]
   12eb4:	cmn	r1, #1
   12eb8:	beq	12ee8 <__assert_fail@plt+0x1c9c>
   12ebc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12ec0:	mov	r0, sl
   12ec4:	ldr	r2, [sp, #16]
   12ec8:	bl	130b4 <__assert_fail@plt+0x1e68>
   12ecc:	cmp	r0, #0
   12ed0:	beq	12ee8 <__assert_fail@plt+0x1c9c>
   12ed4:	rsb	r1, sl, #1
   12ed8:	add	r0, r1, r0
   12edc:	str	r0, [fp, #-32]	; 0xffffffe0
   12ee0:	mov	r0, #1
   12ee4:	b	12eec <__assert_fail@plt+0x1ca0>
   12ee8:	mov	r0, #0
   12eec:	str	r0, [sp, #32]
   12ef0:	mov	r5, r4
   12ef4:	cmp	r8, r5
   12ef8:	bcc	12f68 <__assert_fail@plt+0x1d1c>
   12efc:	cmp	r7, #2
   12f00:	bcs	12ffc <__assert_fail@plt+0x1db0>
   12f04:	cmp	sl, #0
   12f08:	bne	13044 <__assert_fail@plt+0x1df8>
   12f0c:	b	13058 <__assert_fail@plt+0x1e0c>
   12f10:	mov	r0, r6
   12f14:	bl	1103c <getc_unlocked@plt>
   12f18:	cmn	r0, #1
   12f1c:	beq	130a4 <__assert_fail@plt+0x1e58>
   12f20:	mov	r2, r0
   12f24:	mov	r5, r4
   12f28:	mov	r0, #1
   12f2c:	str	r0, [fp, #-32]	; 0xffffffe0
   12f30:	ldr	r0, [sp, #16]
   12f34:	sub	r0, r2, r0
   12f38:	clz	r0, r0
   12f3c:	lsr	r0, r0, #5
   12f40:	ldr	r1, [sp, #24]
   12f44:	mov	r3, r2
   12f48:	str	r2, [sp, #36]	; 0x24
   12f4c:	sub	r1, r2, r1
   12f50:	clz	r1, r1
   12f54:	lsr	r1, r1, #5
   12f58:	orr	r0, r1, r0
   12f5c:	str	r0, [sp, #32]
   12f60:	cmp	r8, r5
   12f64:	bcs	12efc <__assert_fail@plt+0x1cb0>
   12f68:	ldr	r6, [fp, #-32]	; 0xffffffe0
   12f6c:	add	r1, r6, #1
   12f70:	cmp	r7, r1
   12f74:	bcs	12ff0 <__assert_fail@plt+0x1da4>
   12f78:	lsl	r2, r8, #1
   12f7c:	cmp	r8, #64	; 0x40
   12f80:	addcc	r2, r8, #64	; 0x40
   12f84:	ldr	r0, [sp, #28]
   12f88:	sub	r4, r9, r0
   12f8c:	sub	r3, r2, r4
   12f90:	add	r7, r6, r4
   12f94:	cmp	r3, r1
   12f98:	addcc	r2, r7, #1
   12f9c:	cmp	r2, r5
   12fa0:	mov	r6, r2
   12fa4:	movhi	r6, r5
   12fa8:	cmp	r8, r2
   12fac:	movcs	r6, r5
   12fb0:	ldr	r1, [sp, #4]
   12fb4:	sub	r1, r6, r1
   12fb8:	cmn	r1, #1
   12fbc:	bgt	12fcc <__assert_fail@plt+0x1d80>
   12fc0:	ldr	r6, [sp]
   12fc4:	cmp	r8, r6
   12fc8:	beq	12e34 <__assert_fail@plt+0x1be8>
   12fcc:	mov	r1, r6
   12fd0:	bl	15724 <__assert_fail@plt+0x44d8>
   12fd4:	cmp	r0, #0
   12fd8:	beq	12e34 <__assert_fail@plt+0x1be8>
   12fdc:	sub	r7, r6, r4
   12fe0:	add	r9, r0, r4
   12fe4:	str	r0, [sp, #28]
   12fe8:	mov	r8, r6
   12fec:	ldr	r5, [sp, #20]
   12ff0:	ldr	r6, [fp, #16]
   12ff4:	cmp	r7, #2
   12ff8:	bcc	12f04 <__assert_fail@plt+0x1cb8>
   12ffc:	sub	r6, r7, #1
   13000:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13004:	cmp	r0, r6
   13008:	movcc	r6, r0
   1300c:	cmp	sl, #0
   13010:	beq	13028 <__assert_fail@plt+0x1ddc>
   13014:	mov	r0, r9
   13018:	mov	r1, sl
   1301c:	mov	r2, r6
   13020:	bl	1100c <memcpy@plt>
   13024:	b	13030 <__assert_fail@plt+0x1de4>
   13028:	ldr	r0, [sp, #36]	; 0x24
   1302c:	strb	r0, [r9]
   13030:	sub	r7, r7, r6
   13034:	add	r9, r9, r6
   13038:	ldr	r6, [fp, #16]
   1303c:	cmp	sl, #0
   13040:	beq	13058 <__assert_fail@plt+0x1e0c>
   13044:	ldr	r1, [fp, #-32]	; 0xffffffe0
   13048:	mov	r0, r6
   1304c:	bl	15b54 <__assert_fail@plt+0x4908>
   13050:	cmp	r0, #0
   13054:	bne	12e34 <__assert_fail@plt+0x1be8>
   13058:	mov	r4, r5
   1305c:	ldr	r0, [sp, #32]
   13060:	cmp	r0, #0
   13064:	ldr	r5, [sp, #36]	; 0x24
   13068:	beq	12e94 <__assert_fail@plt+0x1c48>
   1306c:	ldr	r2, [sp, #28]
   13070:	ldr	r0, [sp, #4]
   13074:	add	r0, r2, r0
   13078:	mov	r1, #0
   1307c:	strb	r1, [r9], -r0
   13080:	ldr	r0, [sp, #8]
   13084:	str	r2, [r0]
   13088:	ldr	r0, [sp, #12]
   1308c:	str	r8, [r0]
   13090:	cmp	r9, #0
   13094:	mvneq	r9, #0
   13098:	mov	r0, r9
   1309c:	sub	sp, fp, #28
   130a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130a4:	ldr	r0, [sp, #28]
   130a8:	cmp	r9, r0
   130ac:	bne	1306c <__assert_fail@plt+0x1e20>
   130b0:	b	12e34 <__assert_fail@plt+0x1be8>
   130b4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   130b8:	add	fp, sp, #24
   130bc:	uxtb	ip, r2
   130c0:	uxtb	r1, r1
   130c4:	cmp	r1, ip
   130c8:	bne	130d8 <__assert_fail@plt+0x1e8c>
   130cc:	mov	r2, r3
   130d0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   130d4:	b	11198 <memchr@plt>
   130d8:	cmp	r3, #0
   130dc:	beq	13104 <__assert_fail@plt+0x1eb8>
   130e0:	ands	r2, r0, #3
   130e4:	beq	13104 <__assert_fail@plt+0x1eb8>
   130e8:	ldrb	r2, [r0]
   130ec:	cmp	r1, r2
   130f0:	cmpne	ip, r2
   130f4:	beq	13198 <__assert_fail@plt+0x1f4c>
   130f8:	subs	r3, r3, #1
   130fc:	add	r0, r0, #1
   13100:	bne	130e0 <__assert_fail@plt+0x1e94>
   13104:	cmp	r3, #4
   13108:	bcc	13170 <__assert_fail@plt+0x1f24>
   1310c:	orr	r2, ip, ip, lsl #8
   13110:	orr	lr, r2, r2, lsl #16
   13114:	orr	r2, r1, r1, lsl #8
   13118:	orr	r8, r2, r2, lsl #16
   1311c:	movw	r4, #32896	; 0x8080
   13120:	movt	r4, #32896	; 0x8080
   13124:	movw	r9, #65279	; 0xfeff
   13128:	movt	r9, #65278	; 0xfefe
   1312c:	mov	r6, r0
   13130:	ldr	r7, [r6], #4
   13134:	eor	r2, r7, lr
   13138:	eor	r5, r2, r4
   1313c:	add	r2, r2, r9
   13140:	and	r2, r2, r5
   13144:	eor	r5, r7, r8
   13148:	eor	r7, r5, r4
   1314c:	add	r5, r5, r9
   13150:	and	r5, r5, r7
   13154:	orr	r2, r5, r2
   13158:	ands	r2, r2, r4
   1315c:	subeq	r3, r3, #4
   13160:	moveq	r0, r6
   13164:	bne	13170 <__assert_fail@plt+0x1f24>
   13168:	cmp	r3, #3
   1316c:	bhi	1312c <__assert_fail@plt+0x1ee0>
   13170:	cmp	r3, #0
   13174:	beq	13194 <__assert_fail@plt+0x1f48>
   13178:	ldrb	r2, [r0]
   1317c:	cmp	r1, r2
   13180:	cmpne	ip, r2
   13184:	beq	13198 <__assert_fail@plt+0x1f4c>
   13188:	add	r0, r0, #1
   1318c:	subs	r3, r3, #1
   13190:	bne	13178 <__assert_fail@plt+0x1f2c>
   13194:	mov	r0, #0
   13198:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1319c:	push	{r4, r5, fp, lr}
   131a0:	add	fp, sp, #8
   131a4:	cmp	r0, #0
   131a8:	beq	1323c <__assert_fail@plt+0x1ff0>
   131ac:	mov	r4, r0
   131b0:	mov	r1, #47	; 0x2f
   131b4:	bl	111c8 <strrchr@plt>
   131b8:	cmp	r0, #0
   131bc:	mov	r5, r4
   131c0:	addne	r5, r0, #1
   131c4:	sub	r0, r5, r4
   131c8:	cmp	r0, #7
   131cc:	blt	13220 <__assert_fail@plt+0x1fd4>
   131d0:	sub	r0, r5, #7
   131d4:	movw	r1, #27633	; 0x6bf1
   131d8:	movt	r1, #1
   131dc:	mov	r2, #7
   131e0:	bl	11210 <strncmp@plt>
   131e4:	cmp	r0, #0
   131e8:	bne	13220 <__assert_fail@plt+0x1fd4>
   131ec:	movw	r1, #27641	; 0x6bf9
   131f0:	movt	r1, #1
   131f4:	mov	r0, r5
   131f8:	mov	r2, #3
   131fc:	bl	11210 <strncmp@plt>
   13200:	cmp	r0, #0
   13204:	beq	13210 <__assert_fail@plt+0x1fc4>
   13208:	mov	r4, r5
   1320c:	b	13220 <__assert_fail@plt+0x1fd4>
   13210:	add	r4, r5, #3
   13214:	movw	r0, #33096	; 0x8148
   13218:	movt	r0, #2
   1321c:	str	r4, [r0]
   13220:	movw	r0, #33100	; 0x814c
   13224:	movt	r0, #2
   13228:	str	r4, [r0]
   1322c:	movw	r0, #33180	; 0x819c
   13230:	movt	r0, #2
   13234:	str	r4, [r0]
   13238:	pop	{r4, r5, fp, pc}
   1323c:	movw	r0, #33112	; 0x8158
   13240:	movt	r0, #2
   13244:	ldr	r3, [r0]
   13248:	movw	r0, #27577	; 0x6bb9
   1324c:	movt	r0, #1
   13250:	mov	r1, #55	; 0x37
   13254:	mov	r2, #1
   13258:	bl	11078 <fwrite@plt>
   1325c:	bl	1121c <abort@plt>
   13260:	push	{r4, r5, r6, sl, fp, lr}
   13264:	add	fp, sp, #16
   13268:	mov	r4, r0
   1326c:	movw	r0, #33184	; 0x81a0
   13270:	movt	r0, #2
   13274:	cmp	r4, #0
   13278:	moveq	r4, r0
   1327c:	bl	11144 <__errno_location@plt>
   13280:	mov	r5, r0
   13284:	ldr	r6, [r0]
   13288:	mov	r0, r4
   1328c:	mov	r1, #48	; 0x30
   13290:	bl	155a0 <__assert_fail@plt+0x4354>
   13294:	str	r6, [r5]
   13298:	pop	{r4, r5, r6, sl, fp, pc}
   1329c:	movw	r1, #33184	; 0x81a0
   132a0:	movt	r1, #2
   132a4:	cmp	r0, #0
   132a8:	movne	r1, r0
   132ac:	ldr	r0, [r1]
   132b0:	bx	lr
   132b4:	movw	r2, #33184	; 0x81a0
   132b8:	movt	r2, #2
   132bc:	cmp	r0, #0
   132c0:	movne	r2, r0
   132c4:	str	r1, [r2]
   132c8:	bx	lr
   132cc:	movw	r3, #33184	; 0x81a0
   132d0:	movt	r3, #2
   132d4:	cmp	r0, #0
   132d8:	movne	r3, r0
   132dc:	ubfx	r0, r1, #5, #3
   132e0:	add	r0, r3, r0, lsl #2
   132e4:	ldr	r3, [r0, #8]
   132e8:	and	r1, r1, #31
   132ec:	eor	r2, r2, r3, lsr r1
   132f0:	and	r2, r2, #1
   132f4:	eor	r2, r3, r2, lsl r1
   132f8:	str	r2, [r0, #8]
   132fc:	mov	r0, #1
   13300:	and	r0, r0, r3, lsr r1
   13304:	bx	lr
   13308:	movw	r2, #33184	; 0x81a0
   1330c:	movt	r2, #2
   13310:	cmp	r0, #0
   13314:	movne	r2, r0
   13318:	ldr	r0, [r2, #4]
   1331c:	str	r1, [r2, #4]
   13320:	bx	lr
   13324:	movw	r3, #33184	; 0x81a0
   13328:	movt	r3, #2
   1332c:	cmp	r0, #0
   13330:	movne	r3, r0
   13334:	mov	r0, #10
   13338:	str	r0, [r3]
   1333c:	cmp	r1, #0
   13340:	cmpne	r2, #0
   13344:	bne	13354 <__assert_fail@plt+0x2108>
   13348:	push	{fp, lr}
   1334c:	mov	fp, sp
   13350:	bl	1121c <abort@plt>
   13354:	str	r1, [r3, #40]	; 0x28
   13358:	str	r2, [r3, #44]	; 0x2c
   1335c:	bx	lr
   13360:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13364:	add	fp, sp, #28
   13368:	sub	sp, sp, #20
   1336c:	mov	r8, r3
   13370:	mov	r9, r2
   13374:	mov	sl, r1
   13378:	mov	r7, r0
   1337c:	ldr	r0, [fp, #8]
   13380:	movw	r5, #33184	; 0x81a0
   13384:	movt	r5, #2
   13388:	cmp	r0, #0
   1338c:	movne	r5, r0
   13390:	bl	11144 <__errno_location@plt>
   13394:	mov	r4, r0
   13398:	ldm	r5, {r0, r1}
   1339c:	ldr	r2, [r5, #40]	; 0x28
   133a0:	ldr	r3, [r5, #44]	; 0x2c
   133a4:	ldr	r6, [r4]
   133a8:	add	r5, r5, #8
   133ac:	stm	sp, {r0, r1, r5}
   133b0:	str	r2, [sp, #12]
   133b4:	str	r3, [sp, #16]
   133b8:	mov	r0, r7
   133bc:	mov	r1, sl
   133c0:	mov	r2, r9
   133c4:	mov	r3, r8
   133c8:	bl	133d8 <__assert_fail@plt+0x218c>
   133cc:	str	r6, [r4]
   133d0:	sub	sp, fp, #28
   133d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133dc:	add	fp, sp, #28
   133e0:	sub	sp, sp, #156	; 0x9c
   133e4:	mov	r9, r3
   133e8:	str	r2, [fp, #-84]	; 0xffffffac
   133ec:	mov	r6, r1
   133f0:	mov	r7, r0
   133f4:	ldr	r0, [fp, #12]
   133f8:	and	r1, r0, #4
   133fc:	str	r1, [sp, #32]
   13400:	and	r1, r0, #1
   13404:	str	r1, [sp, #36]	; 0x24
   13408:	ubfx	sl, r0, #1, #1
   1340c:	bl	11090 <__ctype_get_mb_cur_max@plt>
   13410:	str	r0, [sp, #40]	; 0x28
   13414:	ldr	r0, [fp, #24]
   13418:	str	r0, [sp, #76]	; 0x4c
   1341c:	ldr	r0, [fp, #20]
   13420:	str	r0, [sp, #68]	; 0x44
   13424:	ldr	r0, [fp, #8]
   13428:	str	r0, [fp, #-60]	; 0xffffffc4
   1342c:	mov	r0, #0
   13430:	str	r0, [sp, #72]	; 0x48
   13434:	mov	r0, #0
   13438:	str	r0, [sp, #92]	; 0x5c
   1343c:	mov	r0, #0
   13440:	str	r0, [fp, #-72]	; 0xffffffb8
   13444:	mov	r0, #0
   13448:	mov	r1, #0
   1344c:	str	r1, [fp, #-56]	; 0xffffffc8
   13450:	mov	r1, #0
   13454:	str	r1, [sp, #56]	; 0x38
   13458:	mov	r5, #1
   1345c:	str	r7, [sp, #80]	; 0x50
   13460:	mov	r4, r6
   13464:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13468:	cmp	r6, #10
   1346c:	bhi	143d4 <__assert_fail@plt+0x3188>
   13470:	add	r1, pc, #20
   13474:	mov	r8, #0
   13478:	mov	r2, #1
   1347c:	mov	r3, #0
   13480:	ldr	ip, [fp, #-84]	; 0xffffffac
   13484:	mov	lr, r9
   13488:	ldr	pc, [r1, r6, lsl #2]
   1348c:	andeq	r3, r1, r4, ror #10
   13490:	muleq	r1, r4, r5
   13494:	andeq	r3, r1, r4, asr r5
   13498:	andeq	r3, r1, ip, asr #10
   1349c:	andeq	r3, r1, r8, lsl #11
   134a0:	andeq	r3, r1, r8, ror #11
   134a4:	andeq	r3, r1, r4, ror r5
   134a8:	andeq	r3, r1, r4, asr #12
   134ac:			; <UNDEFINED> instruction: 0x000134b8
   134b0:			; <UNDEFINED> instruction: 0x000134b8
   134b4:	andeq	r3, r1, r0, ror #9
   134b8:	movw	r0, #27723	; 0x6c4b
   134bc:	movt	r0, #1
   134c0:	mov	r1, r6
   134c4:	bl	149e0 <__assert_fail@plt+0x3794>
   134c8:	str	r0, [sp, #68]	; 0x44
   134cc:	movw	r0, #27725	; 0x6c4d
   134d0:	movt	r0, #1
   134d4:	mov	r1, r6
   134d8:	bl	149e0 <__assert_fail@plt+0x3794>
   134dc:	str	r0, [sp, #76]	; 0x4c
   134e0:	mov	r8, #0
   134e4:	tst	sl, #1
   134e8:	bne	13520 <__assert_fail@plt+0x22d4>
   134ec:	ldr	r0, [sp, #68]	; 0x44
   134f0:	ldrb	r0, [r0]
   134f4:	cmp	r0, #0
   134f8:	beq	13520 <__assert_fail@plt+0x22d4>
   134fc:	ldr	r1, [sp, #68]	; 0x44
   13500:	add	r1, r1, #1
   13504:	mov	r8, #0
   13508:	cmp	r8, r4
   1350c:	strbcc	r0, [r7, r8]
   13510:	ldrb	r0, [r1, r8]
   13514:	add	r8, r8, #1
   13518:	cmp	r0, #0
   1351c:	bne	13508 <__assert_fail@plt+0x22bc>
   13520:	ldr	r6, [sp, #76]	; 0x4c
   13524:	mov	r0, r6
   13528:	bl	1112c <strlen@plt>
   1352c:	str	r0, [fp, #-72]	; 0xffffffb8
   13530:	str	r6, [sp, #92]	; 0x5c
   13534:	mov	r2, #1
   13538:	mov	r3, sl
   1353c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13540:	mov	lr, r9
   13544:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13548:	b	13644 <__assert_fail@plt+0x23f8>
   1354c:	mov	r0, #1
   13550:	b	13594 <__assert_fail@plt+0x2348>
   13554:	tst	sl, #1
   13558:	bne	13594 <__assert_fail@plt+0x2348>
   1355c:	mov	r2, r0
   13560:	b	135bc <__assert_fail@plt+0x2370>
   13564:	mov	r6, #0
   13568:	mov	r8, #0
   1356c:	mov	r2, r0
   13570:	b	13640 <__assert_fail@plt+0x23f4>
   13574:	mov	r0, #1
   13578:	str	r0, [fp, #-72]	; 0xffffffb8
   1357c:	mov	r8, #0
   13580:	mov	r6, #5
   13584:	b	13600 <__assert_fail@plt+0x23b4>
   13588:	mov	r2, #1
   1358c:	tst	sl, #1
   13590:	beq	135bc <__assert_fail@plt+0x2370>
   13594:	mov	r1, #1
   13598:	str	r1, [fp, #-72]	; 0xffffffb8
   1359c:	mov	r8, #0
   135a0:	mov	r6, #2
   135a4:	movw	r1, #27725	; 0x6c4d
   135a8:	movt	r1, #1
   135ac:	str	r1, [sp, #92]	; 0x5c
   135b0:	mov	r2, r0
   135b4:	mov	r3, #1
   135b8:	b	13644 <__assert_fail@plt+0x23f8>
   135bc:	mov	r8, #1
   135c0:	mov	r6, #2
   135c4:	cmp	r4, #0
   135c8:	movne	r0, #39	; 0x27
   135cc:	strbne	r0, [r7]
   135d0:	movw	r0, #27725	; 0x6c4d
   135d4:	movt	r0, #1
   135d8:	str	r0, [sp, #92]	; 0x5c
   135dc:	mov	r0, #1
   135e0:	str	r0, [fp, #-72]	; 0xffffffb8
   135e4:	b	13640 <__assert_fail@plt+0x23f4>
   135e8:	mov	r6, #5
   135ec:	tst	sl, #1
   135f0:	beq	13618 <__assert_fail@plt+0x23cc>
   135f4:	mov	r0, #1
   135f8:	str	r0, [fp, #-72]	; 0xffffffb8
   135fc:	mov	r8, #0
   13600:	movw	r0, #27721	; 0x6c49
   13604:	movt	r0, #1
   13608:	str	r0, [sp, #92]	; 0x5c
   1360c:	mov	r2, #1
   13610:	mov	r3, #1
   13614:	b	13644 <__assert_fail@plt+0x23f8>
   13618:	cmp	r4, #0
   1361c:	movne	r0, #34	; 0x22
   13620:	strbne	r0, [r7]
   13624:	mov	r8, #1
   13628:	movw	r0, #27721	; 0x6c49
   1362c:	movt	r0, #1
   13630:	str	r0, [sp, #92]	; 0x5c
   13634:	mov	r0, #1
   13638:	str	r0, [fp, #-72]	; 0xffffffb8
   1363c:	mov	r2, #1
   13640:	mov	r3, #0
   13644:	ldr	r0, [fp, #16]
   13648:	cmp	r0, #0
   1364c:	movwne	r0, #1
   13650:	and	r0, r0, r3
   13654:	str	r0, [fp, #-88]	; 0xffffffa8
   13658:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1365c:	cmp	r0, #0
   13660:	movwne	r0, #1
   13664:	and	r1, r0, r3
   13668:	and	r1, r2, r1
   1366c:	str	r1, [sp, #48]	; 0x30
   13670:	str	r6, [fp, #-60]	; 0xffffffc4
   13674:	subs	r6, r6, #2
   13678:	clz	r1, r6
   1367c:	lsr	r1, r1, #5
   13680:	and	r1, r1, r3
   13684:	str	r1, [sp, #60]	; 0x3c
   13688:	str	r6, [fp, #-80]	; 0xffffffb0
   1368c:	mov	r1, r6
   13690:	movwne	r1, #1
   13694:	str	r3, [fp, #-76]	; 0xffffffb4
   13698:	eor	r3, r3, #1
   1369c:	str	r3, [sp, #88]	; 0x58
   136a0:	orr	r3, r1, r3
   136a4:	str	r3, [sp, #64]	; 0x40
   136a8:	and	r1, r1, r2
   136ac:	str	r1, [fp, #-68]	; 0xffffffbc
   136b0:	and	r0, r0, r1
   136b4:	str	r0, [fp, #-64]	; 0xffffffc0
   136b8:	str	r2, [sp, #84]	; 0x54
   136bc:	eor	r0, r2, #1
   136c0:	str	r0, [sp, #52]	; 0x34
   136c4:	mov	r6, #0
   136c8:	cmn	lr, #1
   136cc:	beq	136dc <__assert_fail@plt+0x2490>
   136d0:	cmp	r6, lr
   136d4:	bne	136e8 <__assert_fail@plt+0x249c>
   136d8:	b	14254 <__assert_fail@plt+0x3008>
   136dc:	ldrb	r0, [ip, r6]
   136e0:	cmp	r0, #0
   136e4:	beq	14254 <__assert_fail@plt+0x3008>
   136e8:	str	r5, [fp, #-48]	; 0xffffffd0
   136ec:	mov	sl, #0
   136f0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   136f4:	cmp	r0, #0
   136f8:	beq	1372c <__assert_fail@plt+0x24e0>
   136fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13700:	add	r5, r6, r0
   13704:	cmp	r0, #2
   13708:	bcc	13724 <__assert_fail@plt+0x24d8>
   1370c:	cmn	lr, #1
   13710:	bne	13724 <__assert_fail@plt+0x24d8>
   13714:	mov	r0, ip
   13718:	bl	1112c <strlen@plt>
   1371c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13720:	mov	lr, r0
   13724:	cmp	r5, lr
   13728:	bls	13738 <__assert_fail@plt+0x24ec>
   1372c:	mov	r0, #0
   13730:	str	r0, [fp, #-52]	; 0xffffffcc
   13734:	b	13784 <__assert_fail@plt+0x2538>
   13738:	mov	r5, r4
   1373c:	mov	r4, lr
   13740:	add	r0, ip, r6
   13744:	ldr	r1, [sp, #92]	; 0x5c
   13748:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1374c:	bl	11030 <memcmp@plt>
   13750:	cmp	r0, #0
   13754:	mov	r1, r0
   13758:	movwne	r1, #1
   1375c:	ldr	r2, [sp, #88]	; 0x58
   13760:	orr	r1, r1, r2
   13764:	tst	r1, #1
   13768:	beq	14318 <__assert_fail@plt+0x30cc>
   1376c:	clz	r0, r0
   13770:	lsr	r0, r0, #5
   13774:	str	r0, [fp, #-52]	; 0xffffffcc
   13778:	ldr	ip, [fp, #-84]	; 0xffffffac
   1377c:	mov	lr, r4
   13780:	mov	r4, r5
   13784:	ldrb	r5, [ip, r6]
   13788:	cmp	r5, #126	; 0x7e
   1378c:	bhi	13b48 <__assert_fail@plt+0x28fc>
   13790:	mov	r9, #1
   13794:	mov	r2, #110	; 0x6e
   13798:	mov	r0, #97	; 0x61
   1379c:	add	r3, pc, #4
   137a0:	mov	r1, #0
   137a4:	ldr	pc, [r3, r5, lsl #2]
   137a8:	andeq	r3, r1, r0, asr #20
   137ac:	andeq	r3, r1, r8, asr #22
   137b0:	andeq	r3, r1, r8, asr #22
   137b4:	andeq	r3, r1, r8, asr #22
   137b8:	andeq	r3, r1, r8, asr #22
   137bc:	andeq	r3, r1, r8, asr #22
   137c0:	andeq	r3, r1, r8, asr #22
   137c4:	andeq	r3, r1, ip, lsl #24
   137c8:	andeq	r3, r1, r0, lsr #20
   137cc:	andeq	r3, r1, r8, lsl sl
   137d0:	andeq	r3, r1, ip, lsr #20
   137d4:			; <UNDEFINED> instruction: 0x00013ab0
   137d8:	andeq	r3, r1, r0, lsl sl
   137dc:	andeq	r3, r1, r8, lsr #20
   137e0:	andeq	r3, r1, r8, asr #22
   137e4:	andeq	r3, r1, r8, asr #22
   137e8:	andeq	r3, r1, r8, asr #22
   137ec:	andeq	r3, r1, r8, asr #22
   137f0:	andeq	r3, r1, r8, asr #22
   137f4:	andeq	r3, r1, r8, asr #22
   137f8:	andeq	r3, r1, r8, asr #22
   137fc:	andeq	r3, r1, r8, asr #22
   13800:	andeq	r3, r1, r8, asr #22
   13804:	andeq	r3, r1, r8, asr #22
   13808:	andeq	r3, r1, r8, asr #22
   1380c:	andeq	r3, r1, r8, asr #22
   13810:	andeq	r3, r1, r8, asr #22
   13814:	andeq	r3, r1, r8, asr #22
   13818:	andeq	r3, r1, r8, asr #22
   1381c:	andeq	r3, r1, r8, asr #22
   13820:	andeq	r3, r1, r8, asr #22
   13824:	andeq	r3, r1, r8, asr #22
   13828:			; <UNDEFINED> instruction: 0x00013bbc
   1382c:	andeq	r3, r1, r0, asr #23
   13830:	andeq	r3, r1, r0, asr #23
   13834:			; <UNDEFINED> instruction: 0x000139b8
   13838:	andeq	r3, r1, r0, asr #23
   1383c:	andeq	r3, r1, r4, lsr #19
   13840:	andeq	r3, r1, r0, asr #23
   13844:			; <UNDEFINED> instruction: 0x00013ab8
   13848:	andeq	r3, r1, r0, asr #23
   1384c:	andeq	r3, r1, r0, asr #23
   13850:	andeq	r3, r1, r0, asr #23
   13854:	andeq	r3, r1, r4, lsr #19
   13858:	andeq	r3, r1, r4, lsr #19
   1385c:	andeq	r3, r1, r4, lsr #19
   13860:	andeq	r3, r1, r4, lsr #19
   13864:	andeq	r3, r1, r4, lsr #19
   13868:	andeq	r3, r1, r4, lsr #19
   1386c:	andeq	r3, r1, r4, lsr #19
   13870:	andeq	r3, r1, r4, lsr #19
   13874:	andeq	r3, r1, r4, lsr #19
   13878:	andeq	r3, r1, r4, lsr #19
   1387c:	andeq	r3, r1, r4, lsr #19
   13880:	andeq	r3, r1, r4, lsr #19
   13884:	andeq	r3, r1, r4, lsr #19
   13888:	andeq	r3, r1, r4, lsr #19
   1388c:	andeq	r3, r1, r4, lsr #19
   13890:	andeq	r3, r1, r4, lsr #19
   13894:	andeq	r3, r1, r0, asr #23
   13898:	andeq	r3, r1, r0, asr #23
   1389c:	andeq	r3, r1, r0, asr #23
   138a0:	andeq	r3, r1, r0, asr #23
   138a4:	andeq	r3, r1, r0, lsl #21
   138a8:	andeq	r3, r1, r8, asr #22
   138ac:	andeq	r3, r1, r4, lsr #19
   138b0:	andeq	r3, r1, r4, lsr #19
   138b4:	andeq	r3, r1, r4, lsr #19
   138b8:	andeq	r3, r1, r4, lsr #19
   138bc:	andeq	r3, r1, r4, lsr #19
   138c0:	andeq	r3, r1, r4, lsr #19
   138c4:	andeq	r3, r1, r4, lsr #19
   138c8:	andeq	r3, r1, r4, lsr #19
   138cc:	andeq	r3, r1, r4, lsr #19
   138d0:	andeq	r3, r1, r4, lsr #19
   138d4:	andeq	r3, r1, r4, lsr #19
   138d8:	andeq	r3, r1, r4, lsr #19
   138dc:	andeq	r3, r1, r4, lsr #19
   138e0:	andeq	r3, r1, r4, lsr #19
   138e4:	andeq	r3, r1, r4, lsr #19
   138e8:	andeq	r3, r1, r4, lsr #19
   138ec:	andeq	r3, r1, r4, lsr #19
   138f0:	andeq	r3, r1, r4, lsr #19
   138f4:	andeq	r3, r1, r4, lsr #19
   138f8:	andeq	r3, r1, r4, lsr #19
   138fc:	andeq	r3, r1, r4, lsr #19
   13900:	andeq	r3, r1, r4, lsr #19
   13904:	andeq	r3, r1, r4, lsr #19
   13908:	andeq	r3, r1, r4, lsr #19
   1390c:	andeq	r3, r1, r4, lsr #19
   13910:	andeq	r3, r1, r4, lsr #19
   13914:	andeq	r3, r1, r0, asr #23
   13918:	andeq	r3, r1, ip, ror #19
   1391c:	andeq	r3, r1, r4, lsr #19
   13920:	andeq	r3, r1, r0, asr #23
   13924:	andeq	r3, r1, r4, lsr #19
   13928:	andeq	r3, r1, r0, asr #23
   1392c:	andeq	r3, r1, r4, lsr #19
   13930:	andeq	r3, r1, r4, lsr #19
   13934:	andeq	r3, r1, r4, lsr #19
   13938:	andeq	r3, r1, r4, lsr #19
   1393c:	andeq	r3, r1, r4, lsr #19
   13940:	andeq	r3, r1, r4, lsr #19
   13944:	andeq	r3, r1, r4, lsr #19
   13948:	andeq	r3, r1, r4, lsr #19
   1394c:	andeq	r3, r1, r4, lsr #19
   13950:	andeq	r3, r1, r4, lsr #19
   13954:	andeq	r3, r1, r4, lsr #19
   13958:	andeq	r3, r1, r4, lsr #19
   1395c:	andeq	r3, r1, r4, lsr #19
   13960:	andeq	r3, r1, r4, lsr #19
   13964:	andeq	r3, r1, r4, lsr #19
   13968:	andeq	r3, r1, r4, lsr #19
   1396c:	andeq	r3, r1, r4, lsr #19
   13970:	andeq	r3, r1, r4, lsr #19
   13974:	andeq	r3, r1, r4, lsr #19
   13978:	andeq	r3, r1, r4, lsr #19
   1397c:	andeq	r3, r1, r4, lsr #19
   13980:	andeq	r3, r1, r4, lsr #19
   13984:	andeq	r3, r1, r4, lsr #19
   13988:	andeq	r3, r1, r4, lsr #19
   1398c:	andeq	r3, r1, r4, lsr #19
   13990:	andeq	r3, r1, r4, lsr #19
   13994:	andeq	r3, r1, ip, asr #19
   13998:	andeq	r3, r1, r0, asr #23
   1399c:	andeq	r3, r1, ip, asr #19
   139a0:			; <UNDEFINED> instruction: 0x000139b8
   139a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   139a8:	cmp	r0, #0
   139ac:	beq	13c20 <__assert_fail@plt+0x29d4>
   139b0:	ldr	r0, [fp, #16]
   139b4:	b	13c24 <__assert_fail@plt+0x29d8>
   139b8:	mov	r9, #0
   139bc:	cmp	r6, #0
   139c0:	beq	13bbc <__assert_fail@plt+0x2970>
   139c4:	mov	sl, #0
   139c8:	b	139a4 <__assert_fail@plt+0x2758>
   139cc:	mov	r9, #0
   139d0:	cmn	lr, #1
   139d4:	beq	13ba0 <__assert_fail@plt+0x2954>
   139d8:	cmp	r6, #0
   139dc:	bne	139c4 <__assert_fail@plt+0x2778>
   139e0:	cmp	lr, #1
   139e4:	beq	13bbc <__assert_fail@plt+0x2970>
   139e8:	b	139c4 <__assert_fail@plt+0x2778>
   139ec:	ldr	r0, [fp, #-60]	; 0xffffffc4
   139f0:	cmp	r0, #2
   139f4:	bne	13be8 <__assert_fail@plt+0x299c>
   139f8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   139fc:	tst	r0, #1
   13a00:	bne	14330 <__assert_fail@plt+0x30e4>
   13a04:	mov	sl, #0
   13a08:	mov	r0, #92	; 0x5c
   13a0c:	b	13bfc <__assert_fail@plt+0x29b0>
   13a10:	mov	r0, #102	; 0x66
   13a14:	b	13c0c <__assert_fail@plt+0x29c0>
   13a18:	mov	r2, #116	; 0x74
   13a1c:	b	13a2c <__assert_fail@plt+0x27e0>
   13a20:	mov	r0, #98	; 0x62
   13a24:	b	13c0c <__assert_fail@plt+0x29c0>
   13a28:	mov	r2, #114	; 0x72
   13a2c:	ldr	r0, [sp, #64]	; 0x40
   13a30:	tst	r0, #1
   13a34:	mov	r0, r2
   13a38:	bne	13c0c <__assert_fail@plt+0x29c0>
   13a3c:	b	14330 <__assert_fail@plt+0x30e4>
   13a40:	ldr	r0, [sp, #84]	; 0x54
   13a44:	tst	r0, #1
   13a48:	beq	13cfc <__assert_fail@plt+0x2ab0>
   13a4c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13a50:	tst	r0, #1
   13a54:	bne	14330 <__assert_fail@plt+0x30e4>
   13a58:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13a5c:	cmp	r0, #2
   13a60:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13a64:	movwne	r0, #1
   13a68:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13a6c:	orr	r0, r0, r2
   13a70:	tst	r0, #1
   13a74:	beq	140f0 <__assert_fail@plt+0x2ea4>
   13a78:	mov	r0, r8
   13a7c:	b	14124 <__assert_fail@plt+0x2ed8>
   13a80:	mov	sl, #0
   13a84:	mov	r5, #63	; 0x3f
   13a88:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13a8c:	cmp	r0, #5
   13a90:	beq	13eb0 <__assert_fail@plt+0x2c64>
   13a94:	cmp	r0, #2
   13a98:	bne	13f50 <__assert_fail@plt+0x2d04>
   13a9c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13aa0:	tst	r0, #1
   13aa4:	mov	r9, #0
   13aa8:	beq	139a4 <__assert_fail@plt+0x2758>
   13aac:	b	14330 <__assert_fail@plt+0x30e4>
   13ab0:	mov	r0, #118	; 0x76
   13ab4:	b	13c0c <__assert_fail@plt+0x29c0>
   13ab8:	mov	r5, #39	; 0x27
   13abc:	mov	r0, #1
   13ac0:	str	r0, [sp, #56]	; 0x38
   13ac4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13ac8:	cmp	r0, #2
   13acc:	bne	13d1c <__assert_fail@plt+0x2ad0>
   13ad0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13ad4:	tst	r0, #1
   13ad8:	bne	14330 <__assert_fail@plt+0x30e4>
   13adc:	ldr	r2, [sp, #72]	; 0x48
   13ae0:	cmp	r2, #0
   13ae4:	mov	r0, r2
   13ae8:	movwne	r0, #1
   13aec:	clz	r1, r4
   13af0:	lsr	r1, r1, #5
   13af4:	orrs	r0, r0, r1
   13af8:	moveq	r2, r4
   13afc:	str	r2, [sp, #72]	; 0x48
   13b00:	moveq	r4, r0
   13b04:	cmp	r8, r4
   13b08:	movcc	r0, #39	; 0x27
   13b0c:	strbcc	r0, [r7, r8]
   13b10:	add	r0, r8, #1
   13b14:	cmp	r0, r4
   13b18:	movcc	r1, #92	; 0x5c
   13b1c:	strbcc	r1, [r7, r0]
   13b20:	add	r0, r8, #2
   13b24:	cmp	r0, r4
   13b28:	movcc	r1, #39	; 0x27
   13b2c:	strbcc	r1, [r7, r0]
   13b30:	add	r8, r8, #3
   13b34:	mov	r0, #0
   13b38:	str	r0, [fp, #-56]	; 0xffffffc8
   13b3c:	mov	sl, #0
   13b40:	mov	r9, #1
   13b44:	b	139a4 <__assert_fail@plt+0x2758>
   13b48:	str	r4, [sp, #24]
   13b4c:	ldr	r0, [sp, #40]	; 0x28
   13b50:	cmp	r0, #1
   13b54:	bne	13d24 <__assert_fail@plt+0x2ad8>
   13b58:	str	lr, [sp, #28]
   13b5c:	bl	11114 <__ctype_b_loc@plt>
   13b60:	ldr	ip, [fp, #-84]	; 0xffffffac
   13b64:	ldr	r0, [r0]
   13b68:	add	r0, r0, r5, lsl #1
   13b6c:	ldrb	r0, [r0, #1]
   13b70:	ubfx	r9, r0, #6, #1
   13b74:	mov	r1, #1
   13b78:	ldr	r4, [sp, #24]
   13b7c:	ldr	r0, [sp, #52]	; 0x34
   13b80:	orr	r0, r9, r0
   13b84:	mov	r2, r1
   13b88:	cmp	r1, #1
   13b8c:	bhi	13f58 <__assert_fail@plt+0x2d0c>
   13b90:	tst	r0, #1
   13b94:	beq	13f58 <__assert_fail@plt+0x2d0c>
   13b98:	ldr	lr, [sp, #28]
   13b9c:	b	139a4 <__assert_fail@plt+0x2758>
   13ba0:	cmp	r6, #0
   13ba4:	ldrbeq	r0, [ip, #1]
   13ba8:	cmpeq	r0, #0
   13bac:	beq	13bbc <__assert_fail@plt+0x2970>
   13bb0:	mvn	lr, #0
   13bb4:	mov	sl, #0
   13bb8:	b	139a4 <__assert_fail@plt+0x2758>
   13bbc:	mov	r1, #1
   13bc0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13bc4:	cmp	r0, #2
   13bc8:	bne	13be0 <__assert_fail@plt+0x2994>
   13bcc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13bd0:	tst	r0, #1
   13bd4:	mov	r9, r1
   13bd8:	beq	139a4 <__assert_fail@plt+0x2758>
   13bdc:	b	14330 <__assert_fail@plt+0x30e4>
   13be0:	mov	r9, r1
   13be4:	b	139a4 <__assert_fail@plt+0x2758>
   13be8:	mov	sl, #0
   13bec:	mov	r0, #92	; 0x5c
   13bf0:	ldr	r1, [sp, #48]	; 0x30
   13bf4:	cmp	r1, #0
   13bf8:	beq	13c0c <__assert_fail@plt+0x29c0>
   13bfc:	mov	r9, #0
   13c00:	cmp	sl, #0
   13c04:	beq	141bc <__assert_fail@plt+0x2f70>
   13c08:	b	141f8 <__assert_fail@plt+0x2fac>
   13c0c:	mov	r9, #0
   13c10:	ldr	r1, [sp, #84]	; 0x54
   13c14:	tst	r1, #1
   13c18:	mov	sl, #0
   13c1c:	bne	13c5c <__assert_fail@plt+0x2a10>
   13c20:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13c24:	cmp	r0, #0
   13c28:	mov	r0, r5
   13c2c:	beq	13c50 <__assert_fail@plt+0x2a04>
   13c30:	ubfx	r0, r5, #5, #3
   13c34:	ldr	r1, [fp, #16]
   13c38:	ldr	r0, [r1, r0, lsl #2]
   13c3c:	and	r1, r5, #31
   13c40:	mov	r2, #1
   13c44:	tst	r0, r2, lsl r1
   13c48:	mov	r0, r5
   13c4c:	bne	13c5c <__assert_fail@plt+0x2a10>
   13c50:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13c54:	cmp	r1, #0
   13c58:	beq	141b4 <__assert_fail@plt+0x2f68>
   13c5c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13c60:	tst	r1, #1
   13c64:	bne	14330 <__assert_fail@plt+0x30e4>
   13c68:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13c6c:	cmp	r1, #2
   13c70:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13c74:	movwne	r1, #1
   13c78:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13c7c:	orr	r1, r1, r2
   13c80:	tst	r1, #1
   13c84:	beq	13c90 <__assert_fail@plt+0x2a44>
   13c88:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13c8c:	b	13ccc <__assert_fail@plt+0x2a80>
   13c90:	cmp	r8, r4
   13c94:	movcc	r1, #39	; 0x27
   13c98:	strbcc	r1, [r7, r8]
   13c9c:	add	r1, r8, #1
   13ca0:	cmp	r1, r4
   13ca4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13ca8:	movcc	r2, #36	; 0x24
   13cac:	strbcc	r2, [r7, r1]
   13cb0:	add	r1, r8, #2
   13cb4:	cmp	r1, r4
   13cb8:	movcc	r2, #39	; 0x27
   13cbc:	strbcc	r2, [r7, r1]
   13cc0:	add	r8, r8, #3
   13cc4:	mov	r1, #1
   13cc8:	str	r1, [fp, #-56]	; 0xffffffc8
   13ccc:	cmp	r8, r4
   13cd0:	movcc	r1, #92	; 0x5c
   13cd4:	strbcc	r1, [r7, r8]
   13cd8:	add	r8, r8, #1
   13cdc:	cmp	r8, r4
   13ce0:	strbcc	r0, [r7, r8]
   13ce4:	and	r5, r5, r9
   13ce8:	add	r8, r8, #1
   13cec:	add	r6, r6, #1
   13cf0:	cmn	lr, #1
   13cf4:	bne	136d0 <__assert_fail@plt+0x2484>
   13cf8:	b	136dc <__assert_fail@plt+0x2490>
   13cfc:	mov	r9, #0
   13d00:	ldr	r0, [sp, #36]	; 0x24
   13d04:	cmp	r0, #0
   13d08:	mov	sl, #0
   13d0c:	mov	r5, #0
   13d10:	beq	13c20 <__assert_fail@plt+0x29d4>
   13d14:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13d18:	b	13cec <__assert_fail@plt+0x2aa0>
   13d1c:	mov	r9, #1
   13d20:	b	139a4 <__assert_fail@plt+0x2758>
   13d24:	mov	r0, #0
   13d28:	str	r0, [fp, #-36]	; 0xffffffdc
   13d2c:	str	r0, [fp, #-40]	; 0xffffffd8
   13d30:	cmn	lr, #1
   13d34:	bne	13d48 <__assert_fail@plt+0x2afc>
   13d38:	mov	r0, ip
   13d3c:	bl	1112c <strlen@plt>
   13d40:	ldr	ip, [fp, #-84]	; 0xffffffac
   13d44:	mov	lr, r0
   13d48:	add	r0, ip, r6
   13d4c:	str	r0, [sp, #20]
   13d50:	mov	r9, #1
   13d54:	mov	r7, #0
   13d58:	sub	r4, fp, #40	; 0x28
   13d5c:	str	lr, [sp, #28]
   13d60:	str	r7, [sp, #44]	; 0x2c
   13d64:	add	r7, r7, r6
   13d68:	add	r1, ip, r7
   13d6c:	sub	r2, lr, r7
   13d70:	sub	r0, fp, #44	; 0x2c
   13d74:	mov	r3, r4
   13d78:	bl	15d30 <__assert_fail@plt+0x4ae4>
   13d7c:	cmp	r0, #0
   13d80:	beq	14240 <__assert_fail@plt+0x2ff4>
   13d84:	cmn	r0, #1
   13d88:	beq	14200 <__assert_fail@plt+0x2fb4>
   13d8c:	cmn	r0, #2
   13d90:	ldr	lr, [sp, #28]
   13d94:	beq	14208 <__assert_fail@plt+0x2fbc>
   13d98:	cmp	r0, #2
   13d9c:	mov	r1, #0
   13da0:	movwcc	r1, #1
   13da4:	ldr	r2, [sp, #60]	; 0x3c
   13da8:	eor	r2, r2, #1
   13dac:	orrs	r1, r2, r1
   13db0:	ldr	r4, [sp, #24]
   13db4:	bne	13e74 <__assert_fail@plt+0x2c28>
   13db8:	ldr	r1, [sp, #44]	; 0x2c
   13dbc:	ldr	r2, [sp, #20]
   13dc0:	add	r1, r2, r1
   13dc4:	mov	r2, #1
   13dc8:	ldrb	r3, [r1, r2]
   13dcc:	sub	r3, r3, #91	; 0x5b
   13dd0:	cmp	r3, #33	; 0x21
   13dd4:	bhi	13e68 <__assert_fail@plt+0x2c1c>
   13dd8:	add	r7, pc, #0
   13ddc:	ldr	pc, [r7, r3, lsl #2]
   13de0:	andeq	r4, r1, r8, lsr #6
   13de4:	andeq	r4, r1, r8, lsr #6
   13de8:	andeq	r3, r1, r8, ror #28
   13dec:	andeq	r4, r1, r8, lsr #6
   13df0:	andeq	r3, r1, r8, ror #28
   13df4:	andeq	r4, r1, r8, lsr #6
   13df8:	andeq	r3, r1, r8, ror #28
   13dfc:	andeq	r3, r1, r8, ror #28
   13e00:	andeq	r3, r1, r8, ror #28
   13e04:	andeq	r3, r1, r8, ror #28
   13e08:	andeq	r3, r1, r8, ror #28
   13e0c:	andeq	r3, r1, r8, ror #28
   13e10:	andeq	r3, r1, r8, ror #28
   13e14:	andeq	r3, r1, r8, ror #28
   13e18:	andeq	r3, r1, r8, ror #28
   13e1c:	andeq	r3, r1, r8, ror #28
   13e20:	andeq	r3, r1, r8, ror #28
   13e24:	andeq	r3, r1, r8, ror #28
   13e28:	andeq	r3, r1, r8, ror #28
   13e2c:	andeq	r3, r1, r8, ror #28
   13e30:	andeq	r3, r1, r8, ror #28
   13e34:	andeq	r3, r1, r8, ror #28
   13e38:	andeq	r3, r1, r8, ror #28
   13e3c:	andeq	r3, r1, r8, ror #28
   13e40:	andeq	r3, r1, r8, ror #28
   13e44:	andeq	r3, r1, r8, ror #28
   13e48:	andeq	r3, r1, r8, ror #28
   13e4c:	andeq	r3, r1, r8, ror #28
   13e50:	andeq	r3, r1, r8, ror #28
   13e54:	andeq	r3, r1, r8, ror #28
   13e58:	andeq	r3, r1, r8, ror #28
   13e5c:	andeq	r3, r1, r8, ror #28
   13e60:	andeq	r3, r1, r8, ror #28
   13e64:	andeq	r4, r1, r8, lsr #6
   13e68:	add	r2, r2, #1
   13e6c:	cmp	r2, r0
   13e70:	bcc	13dc8 <__assert_fail@plt+0x2b7c>
   13e74:	ldr	r7, [sp, #44]	; 0x2c
   13e78:	add	r7, r0, r7
   13e7c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13e80:	bl	1106c <iswprint@plt>
   13e84:	cmp	r0, #0
   13e88:	movwne	r0, #1
   13e8c:	and	r9, r9, r0
   13e90:	sub	r4, fp, #40	; 0x28
   13e94:	mov	r0, r4
   13e98:	bl	11018 <mbsinit@plt>
   13e9c:	ldr	lr, [sp, #28]
   13ea0:	cmp	r0, #0
   13ea4:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ea8:	beq	13d60 <__assert_fail@plt+0x2b14>
   13eac:	b	14248 <__assert_fail@plt+0x2ffc>
   13eb0:	ldr	r0, [sp, #32]
   13eb4:	cmp	r0, #0
   13eb8:	beq	13f50 <__assert_fail@plt+0x2d04>
   13ebc:	add	r0, r6, #2
   13ec0:	cmp	r0, lr
   13ec4:	bcs	13f50 <__assert_fail@plt+0x2d04>
   13ec8:	add	r1, ip, r6
   13ecc:	ldrb	r1, [r1, #1]
   13ed0:	cmp	r1, #63	; 0x3f
   13ed4:	bne	13f50 <__assert_fail@plt+0x2d04>
   13ed8:	ldrb	r9, [ip, r0]
   13edc:	sub	r2, r9, #33	; 0x21
   13ee0:	cmp	r2, #29
   13ee4:	bhi	13f50 <__assert_fail@plt+0x2d04>
   13ee8:	mov	r3, #1
   13eec:	movw	r1, #20929	; 0x51c1
   13ef0:	movt	r1, #14336	; 0x3800
   13ef4:	tst	r1, r3, lsl r2
   13ef8:	beq	13f50 <__assert_fail@plt+0x2d04>
   13efc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13f00:	tst	r1, #1
   13f04:	bne	14330 <__assert_fail@plt+0x30e4>
   13f08:	cmp	r8, r4
   13f0c:	movcc	r1, #63	; 0x3f
   13f10:	strbcc	r1, [r7, r8]
   13f14:	add	r2, r8, #1
   13f18:	cmp	r2, r4
   13f1c:	movcc	r1, #34	; 0x22
   13f20:	strbcc	r1, [r7, r2]
   13f24:	add	r2, r8, #2
   13f28:	cmp	r2, r4
   13f2c:	movcc	r1, #34	; 0x22
   13f30:	strbcc	r1, [r7, r2]
   13f34:	add	r2, r8, #3
   13f38:	cmp	r2, r4
   13f3c:	movcc	r1, #63	; 0x3f
   13f40:	strbcc	r1, [r7, r2]
   13f44:	add	r8, r8, #4
   13f48:	mov	r6, r0
   13f4c:	mov	r5, r9
   13f50:	mov	r9, #0
   13f54:	b	139a4 <__assert_fail@plt+0x2758>
   13f58:	add	r1, r2, r6
   13f5c:	str	r1, [sp, #44]	; 0x2c
   13f60:	add	r1, r6, #1
   13f64:	mov	r3, #0
   13f68:	ldr	lr, [sp, #28]
   13f6c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13f70:	tst	r0, #1
   13f74:	bne	14068 <__assert_fail@plt+0x2e1c>
   13f78:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13f7c:	tst	r2, #1
   13f80:	bne	14330 <__assert_fail@plt+0x30e4>
   13f84:	cmp	r6, #2
   13f88:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13f8c:	movwne	r3, #1
   13f90:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13f94:	orr	r3, r3, r2
   13f98:	tst	r3, #1
   13f9c:	bne	13fd8 <__assert_fail@plt+0x2d8c>
   13fa0:	cmp	r8, r4
   13fa4:	movcc	r2, #39	; 0x27
   13fa8:	strbcc	r2, [r7, r8]
   13fac:	add	r3, r8, #1
   13fb0:	cmp	r3, r4
   13fb4:	movcc	r2, #36	; 0x24
   13fb8:	strbcc	r2, [r7, r3]
   13fbc:	add	r3, r8, #2
   13fc0:	cmp	r3, r4
   13fc4:	movcc	r2, #39	; 0x27
   13fc8:	strbcc	r2, [r7, r3]
   13fcc:	add	r8, r8, #3
   13fd0:	mov	r2, #1
   13fd4:	str	r2, [fp, #-56]	; 0xffffffc8
   13fd8:	cmp	r8, r4
   13fdc:	movcc	r2, #92	; 0x5c
   13fe0:	strbcc	r2, [r7, r8]
   13fe4:	add	r3, r8, #1
   13fe8:	cmp	r3, r4
   13fec:	bcs	1400c <__assert_fail@plt+0x2dc0>
   13ff0:	and	r7, r5, #192	; 0xc0
   13ff4:	mov	r2, #48	; 0x30
   13ff8:	orr	r7, r2, r7, lsr #6
   13ffc:	ldr	r6, [sp, #80]	; 0x50
   14000:	strb	r7, [r6, r3]
   14004:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14008:	ldr	r7, [sp, #80]	; 0x50
   1400c:	add	r3, r8, #2
   14010:	cmp	r3, r4
   14014:	bcs	14034 <__assert_fail@plt+0x2de8>
   14018:	lsr	r7, r5, #3
   1401c:	mov	r2, #6
   14020:	bfi	r7, r2, #3, #29
   14024:	ldr	r6, [sp, #80]	; 0x50
   14028:	strb	r7, [r6, r3]
   1402c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14030:	ldr	r7, [sp, #80]	; 0x50
   14034:	mov	r2, #6
   14038:	bfi	r5, r2, #3, #29
   1403c:	add	r8, r8, #3
   14040:	mov	r3, #1
   14044:	b	1408c <__assert_fail@plt+0x2e40>
   14048:	ldr	r7, [sp, #80]	; 0x50
   1404c:	cmp	r8, r4
   14050:	strbcc	r5, [r7, r8]
   14054:	ldrb	r5, [ip, r1]
   14058:	add	r1, r1, #1
   1405c:	add	r8, r8, #1
   14060:	tst	r0, #1
   14064:	beq	13f78 <__assert_fail@plt+0x2d2c>
   14068:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1406c:	tst	r2, #1
   14070:	beq	14084 <__assert_fail@plt+0x2e38>
   14074:	cmp	r8, r4
   14078:	movcc	r2, #92	; 0x5c
   1407c:	strbcc	r2, [r7, r8]
   14080:	add	r8, r8, #1
   14084:	mov	r2, #0
   14088:	str	r2, [fp, #-52]	; 0xffffffcc
   1408c:	and	sl, r3, #1
   14090:	ldr	r2, [sp, #44]	; 0x2c
   14094:	cmp	r2, r1
   14098:	bls	141a4 <__assert_fail@plt+0x2f58>
   1409c:	cmp	sl, #0
   140a0:	movwne	sl, #1
   140a4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   140a8:	mvn	r7, r2
   140ac:	orr	r7, r7, sl
   140b0:	tst	r7, #1
   140b4:	bne	14048 <__assert_fail@plt+0x2dfc>
   140b8:	cmp	r8, r4
   140bc:	ldrcc	r7, [sp, #80]	; 0x50
   140c0:	movcc	r2, #39	; 0x27
   140c4:	strbcc	r2, [r7, r8]
   140c8:	add	r7, r8, #1
   140cc:	cmp	r7, r4
   140d0:	ldrcc	r6, [sp, #80]	; 0x50
   140d4:	movcc	r2, #39	; 0x27
   140d8:	strbcc	r2, [r6, r7]
   140dc:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   140e0:	add	r8, r8, #2
   140e4:	mov	r2, #0
   140e8:	str	r2, [fp, #-56]	; 0xffffffc8
   140ec:	b	14048 <__assert_fail@plt+0x2dfc>
   140f0:	cmp	r8, r4
   140f4:	movcc	r0, #39	; 0x27
   140f8:	strbcc	r0, [r7, r8]
   140fc:	add	r0, r8, #1
   14100:	cmp	r0, r4
   14104:	movcc	r1, #36	; 0x24
   14108:	strbcc	r1, [r7, r0]
   1410c:	add	r0, r8, #2
   14110:	cmp	r0, r4
   14114:	movcc	r1, #39	; 0x27
   14118:	strbcc	r1, [r7, r0]
   1411c:	add	r0, r8, #3
   14120:	mov	r2, #1
   14124:	cmp	r0, r4
   14128:	movcc	r1, #92	; 0x5c
   1412c:	strbcc	r1, [r7, r0]
   14130:	str	r2, [fp, #-56]	; 0xffffffc8
   14134:	add	r8, r0, #1
   14138:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1413c:	cmp	r1, #2
   14140:	beq	14194 <__assert_fail@plt+0x2f48>
   14144:	add	r1, r6, #1
   14148:	mov	r9, #0
   1414c:	mov	sl, #1
   14150:	mov	r5, #48	; 0x30
   14154:	cmp	r1, lr
   14158:	bcs	139a4 <__assert_fail@plt+0x2758>
   1415c:	ldrb	r1, [ip, r1]
   14160:	sub	r1, r1, #48	; 0x30
   14164:	uxtb	r1, r1
   14168:	cmp	r1, #9
   1416c:	bhi	139a4 <__assert_fail@plt+0x2758>
   14170:	cmp	r8, r4
   14174:	movcc	r1, #48	; 0x30
   14178:	strbcc	r1, [r7, r8]
   1417c:	add	r1, r0, #2
   14180:	cmp	r1, r4
   14184:	movcc	r2, #48	; 0x30
   14188:	strbcc	r2, [r7, r1]
   1418c:	add	r8, r0, #3
   14190:	b	139a4 <__assert_fail@plt+0x2758>
   14194:	mov	r0, #48	; 0x30
   14198:	mov	sl, #1
   1419c:	mov	r9, #0
   141a0:	b	13c50 <__assert_fail@plt+0x2a04>
   141a4:	sub	r6, r1, #1
   141a8:	cmp	sl, #0
   141ac:	movwne	sl, #1
   141b0:	mov	r0, r5
   141b4:	cmp	sl, #0
   141b8:	bne	141f8 <__assert_fail@plt+0x2fac>
   141bc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   141c0:	tst	r1, #1
   141c4:	beq	141f8 <__assert_fail@plt+0x2fac>
   141c8:	cmp	r8, r4
   141cc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   141d0:	movcc	r1, #39	; 0x27
   141d4:	strbcc	r1, [r7, r8]
   141d8:	add	r1, r8, #1
   141dc:	cmp	r1, r4
   141e0:	movcc	r2, #39	; 0x27
   141e4:	strbcc	r2, [r7, r1]
   141e8:	add	r8, r8, #2
   141ec:	mov	r1, #0
   141f0:	str	r1, [fp, #-56]	; 0xffffffc8
   141f4:	b	13cdc <__assert_fail@plt+0x2a90>
   141f8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   141fc:	b	13cdc <__assert_fail@plt+0x2a90>
   14200:	mov	r9, #0
   14204:	b	14240 <__assert_fail@plt+0x2ff4>
   14208:	mov	r9, #0
   1420c:	cmp	r7, lr
   14210:	bcs	14240 <__assert_fail@plt+0x2ff4>
   14214:	ldr	ip, [fp, #-84]	; 0xffffffac
   14218:	ldr	r7, [sp, #44]	; 0x2c
   1421c:	ldr	r0, [sp, #20]
   14220:	ldrb	r0, [r0, r7]
   14224:	cmp	r0, #0
   14228:	beq	14248 <__assert_fail@plt+0x2ffc>
   1422c:	add	r7, r7, #1
   14230:	add	r0, r6, r7
   14234:	cmp	r0, lr
   14238:	bcc	1421c <__assert_fail@plt+0x2fd0>
   1423c:	b	14248 <__assert_fail@plt+0x2ffc>
   14240:	ldr	ip, [fp, #-84]	; 0xffffffac
   14244:	ldr	r7, [sp, #44]	; 0x2c
   14248:	mov	r1, r7
   1424c:	ldr	r7, [sp, #80]	; 0x50
   14250:	b	13b78 <__assert_fail@plt+0x292c>
   14254:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14258:	eor	r0, r1, #2
   1425c:	orr	r0, r0, r8
   14260:	clz	r0, r0
   14264:	lsr	r0, r0, #5
   14268:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1426c:	tst	r2, r0
   14270:	bne	14330 <__assert_fail@plt+0x30e4>
   14274:	cmp	r1, #2
   14278:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1427c:	movwne	r0, #1
   14280:	orr	r0, r2, r0
   14284:	tst	r0, #1
   14288:	ldreq	r0, [sp, #56]	; 0x38
   1428c:	eoreq	r0, r0, #1
   14290:	tsteq	r0, #1
   14294:	bne	142c8 <__assert_fail@plt+0x307c>
   14298:	mov	r9, lr
   1429c:	tst	r5, #1
   142a0:	bne	14398 <__assert_fail@plt+0x314c>
   142a4:	ldr	r0, [sp, #72]	; 0x48
   142a8:	cmp	r0, #0
   142ac:	beq	142c8 <__assert_fail@plt+0x307c>
   142b0:	mov	r5, #0
   142b4:	cmp	r4, #0
   142b8:	ldr	r0, [sp, #84]	; 0x54
   142bc:	mov	sl, r2
   142c0:	ldr	r6, [sp, #72]	; 0x48
   142c4:	beq	13460 <__assert_fail@plt+0x2214>
   142c8:	ldr	r1, [sp, #92]	; 0x5c
   142cc:	clz	r0, r1
   142d0:	lsr	r0, r0, #5
   142d4:	orr	r0, r0, r2
   142d8:	tst	r0, #1
   142dc:	bne	14308 <__assert_fail@plt+0x30bc>
   142e0:	ldrb	r0, [r1]
   142e4:	cmp	r0, #0
   142e8:	beq	14308 <__assert_fail@plt+0x30bc>
   142ec:	add	r1, r1, #1
   142f0:	cmp	r8, r4
   142f4:	strbcc	r0, [r7, r8]
   142f8:	add	r8, r8, #1
   142fc:	ldrb	r0, [r1], #1
   14300:	cmp	r0, #0
   14304:	bne	142f0 <__assert_fail@plt+0x30a4>
   14308:	cmp	r8, r4
   1430c:	movcc	r0, #0
   14310:	strbcc	r0, [r7, r8]
   14314:	b	1438c <__assert_fail@plt+0x3140>
   14318:	ldr	ip, [fp, #-84]	; 0xffffffac
   1431c:	mov	lr, r4
   14320:	mov	r4, r5
   14324:	b	14330 <__assert_fail@plt+0x30e4>
   14328:	ldr	r7, [sp, #80]	; 0x50
   1432c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14330:	mov	r0, #0
   14334:	ldr	r1, [fp, #12]
   14338:	bic	r1, r1, #2
   1433c:	ldr	r2, [sp, #84]	; 0x54
   14340:	tst	r2, #1
   14344:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14348:	mov	r2, r3
   1434c:	movwne	r2, #4
   14350:	cmp	r3, #2
   14354:	movne	r2, r3
   14358:	str	r2, [sp]
   1435c:	str	r1, [sp, #4]
   14360:	str	r0, [sp, #8]
   14364:	ldr	r0, [sp, #68]	; 0x44
   14368:	str	r0, [sp, #12]
   1436c:	ldr	r0, [sp, #76]	; 0x4c
   14370:	str	r0, [sp, #16]
   14374:	mov	r0, r7
   14378:	mov	r1, r4
   1437c:	mov	r2, ip
   14380:	mov	r3, lr
   14384:	bl	133d8 <__assert_fail@plt+0x218c>
   14388:	mov	r8, r0
   1438c:	mov	r0, r8
   14390:	sub	sp, fp, #28
   14394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14398:	mov	r0, #5
   1439c:	str	r0, [sp]
   143a0:	ldr	r0, [fp, #12]
   143a4:	str	r0, [sp, #4]
   143a8:	ldr	r0, [fp, #16]
   143ac:	str	r0, [sp, #8]
   143b0:	ldr	r0, [sp, #68]	; 0x44
   143b4:	str	r0, [sp, #12]
   143b8:	ldr	r0, [sp, #76]	; 0x4c
   143bc:	str	r0, [sp, #16]
   143c0:	mov	r0, r7
   143c4:	ldr	r1, [sp, #72]	; 0x48
   143c8:	ldr	r2, [fp, #-84]	; 0xffffffac
   143cc:	mov	r3, r9
   143d0:	b	14384 <__assert_fail@plt+0x3138>
   143d4:	bl	1121c <abort@plt>
   143d8:	mov	r3, r2
   143dc:	mov	r2, #0
   143e0:	b	143e4 <__assert_fail@plt+0x3198>
   143e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143e8:	add	fp, sp, #28
   143ec:	sub	sp, sp, #36	; 0x24
   143f0:	mov	r4, r2
   143f4:	str	r2, [sp, #24]
   143f8:	mov	r5, r1
   143fc:	mov	r6, r0
   14400:	str	r0, [sp, #20]
   14404:	movw	r8, #33184	; 0x81a0
   14408:	movt	r8, #2
   1440c:	cmp	r3, #0
   14410:	movne	r8, r3
   14414:	bl	11144 <__errno_location@plt>
   14418:	str	r0, [sp, #28]
   1441c:	ldm	r8, {r3, r9}
   14420:	ldr	r1, [r8, #40]	; 0x28
   14424:	ldr	r2, [r8, #44]	; 0x2c
   14428:	ldr	r7, [r0]
   1442c:	str	r7, [sp, #32]
   14430:	add	sl, r8, #8
   14434:	cmp	r4, #0
   14438:	orreq	r9, r9, #1
   1443c:	stm	sp, {r3, r9, sl}
   14440:	str	r1, [sp, #12]
   14444:	str	r2, [sp, #16]
   14448:	mov	r0, #0
   1444c:	mov	r1, #0
   14450:	mov	r2, r6
   14454:	mov	r3, r5
   14458:	mov	r7, r5
   1445c:	bl	133d8 <__assert_fail@plt+0x218c>
   14460:	mov	r5, r0
   14464:	add	r4, r0, #1
   14468:	mov	r0, r4
   1446c:	bl	152e8 <__assert_fail@plt+0x409c>
   14470:	mov	r6, r0
   14474:	ldr	r0, [r8]
   14478:	ldr	r1, [r8, #40]	; 0x28
   1447c:	ldr	r2, [r8, #44]	; 0x2c
   14480:	stm	sp, {r0, r9, sl}
   14484:	str	r1, [sp, #12]
   14488:	str	r2, [sp, #16]
   1448c:	mov	r0, r6
   14490:	mov	r1, r4
   14494:	ldr	r2, [sp, #20]
   14498:	mov	r3, r7
   1449c:	bl	133d8 <__assert_fail@plt+0x218c>
   144a0:	ldr	r0, [sp, #24]
   144a4:	ldr	r1, [sp, #32]
   144a8:	ldr	r2, [sp, #28]
   144ac:	str	r1, [r2]
   144b0:	cmp	r0, #0
   144b4:	strne	r5, [r0]
   144b8:	mov	r0, r6
   144bc:	sub	sp, fp, #28
   144c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   144c8:	add	fp, sp, #24
   144cc:	movw	r8, #33032	; 0x8108
   144d0:	movt	r8, #2
   144d4:	ldr	r4, [r8]
   144d8:	movw	r5, #33036	; 0x810c
   144dc:	movt	r5, #2
   144e0:	ldr	r0, [r5]
   144e4:	cmp	r0, #2
   144e8:	blt	14514 <__assert_fail@plt+0x32c8>
   144ec:	add	r7, r4, #12
   144f0:	mov	r6, #0
   144f4:	ldr	r0, [r7, r6, lsl #3]
   144f8:	bl	12cf0 <__assert_fail@plt+0x1aa4>
   144fc:	add	r0, r6, #1
   14500:	ldr	r1, [r5]
   14504:	add	r2, r6, #2
   14508:	cmp	r2, r1
   1450c:	mov	r6, r0
   14510:	blt	144f4 <__assert_fail@plt+0x32a8>
   14514:	ldr	r0, [r4, #4]
   14518:	movw	r7, #33232	; 0x81d0
   1451c:	movt	r7, #2
   14520:	cmp	r0, r7
   14524:	beq	1453c <__assert_fail@plt+0x32f0>
   14528:	bl	12cf0 <__assert_fail@plt+0x1aa4>
   1452c:	movw	r0, #33040	; 0x8110
   14530:	movt	r0, #2
   14534:	mov	r6, #256	; 0x100
   14538:	strd	r6, [r0]
   1453c:	movw	r6, #33040	; 0x8110
   14540:	movt	r6, #2
   14544:	cmp	r4, r6
   14548:	beq	14558 <__assert_fail@plt+0x330c>
   1454c:	mov	r0, r4
   14550:	bl	12cf0 <__assert_fail@plt+0x1aa4>
   14554:	str	r6, [r8]
   14558:	mov	r0, #1
   1455c:	str	r0, [r5]
   14560:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14564:	movw	r3, #33184	; 0x81a0
   14568:	movt	r3, #2
   1456c:	mvn	r2, #0
   14570:	b	14574 <__assert_fail@plt+0x3328>
   14574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14578:	add	fp, sp, #28
   1457c:	sub	sp, sp, #44	; 0x2c
   14580:	mov	r7, r3
   14584:	str	r2, [sp, #36]	; 0x24
   14588:	str	r1, [sp, #32]
   1458c:	mov	r5, r0
   14590:	bl	11144 <__errno_location@plt>
   14594:	cmp	r5, #0
   14598:	blt	14704 <__assert_fail@plt+0x34b8>
   1459c:	cmn	r5, #-2147483647	; 0x80000001
   145a0:	beq	14704 <__assert_fail@plt+0x34b8>
   145a4:	movw	r4, #33032	; 0x8108
   145a8:	movt	r4, #2
   145ac:	ldr	r6, [r4]
   145b0:	str	r0, [sp, #28]
   145b4:	ldr	r0, [r0]
   145b8:	str	r0, [sp, #24]
   145bc:	movw	r8, #33036	; 0x810c
   145c0:	movt	r8, #2
   145c4:	ldr	r1, [r8]
   145c8:	cmp	r1, r5
   145cc:	ble	145d8 <__assert_fail@plt+0x338c>
   145d0:	mov	sl, r6
   145d4:	b	14640 <__assert_fail@plt+0x33f4>
   145d8:	str	r1, [fp, #-32]	; 0xffffffe0
   145dc:	mov	r0, #8
   145e0:	str	r0, [sp]
   145e4:	movw	r9, #33040	; 0x8110
   145e8:	movt	r9, #2
   145ec:	subs	r0, r6, r9
   145f0:	movne	r0, r6
   145f4:	add	r2, r5, #1
   145f8:	sub	r2, r2, r1
   145fc:	sub	r1, fp, #32
   14600:	mvn	r3, #-2147483648	; 0x80000000
   14604:	bl	153d0 <__assert_fail@plt+0x4184>
   14608:	mov	sl, r0
   1460c:	str	r0, [r4]
   14610:	cmp	r6, r9
   14614:	ldrdeq	r0, [r9]
   14618:	stmeq	sl, {r0, r1}
   1461c:	ldr	r1, [r8]
   14620:	add	r0, sl, r1, lsl #3
   14624:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14628:	sub	r1, r2, r1
   1462c:	lsl	r2, r1, #3
   14630:	mov	r1, #0
   14634:	bl	1115c <memset@plt>
   14638:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1463c:	str	r0, [r8]
   14640:	mov	r9, sl
   14644:	ldr	r6, [r9, r5, lsl #3]!
   14648:	ldr	r4, [r9, #4]!
   1464c:	ldm	r7, {r0, r1}
   14650:	ldr	r2, [r7, #40]	; 0x28
   14654:	ldr	r3, [r7, #44]	; 0x2c
   14658:	orr	r8, r1, #1
   1465c:	add	r1, r7, #8
   14660:	stm	sp, {r0, r8}
   14664:	str	r1, [sp, #20]
   14668:	add	r0, sp, #8
   1466c:	stm	r0, {r1, r2, r3}
   14670:	mov	r0, r4
   14674:	mov	r1, r6
   14678:	ldr	r2, [sp, #32]
   1467c:	ldr	r3, [sp, #36]	; 0x24
   14680:	bl	133d8 <__assert_fail@plt+0x218c>
   14684:	cmp	r6, r0
   14688:	bhi	146ec <__assert_fail@plt+0x34a0>
   1468c:	add	r6, r0, #1
   14690:	str	r6, [sl, r5, lsl #3]
   14694:	movw	r0, #33232	; 0x81d0
   14698:	movt	r0, #2
   1469c:	cmp	r4, r0
   146a0:	beq	146ac <__assert_fail@plt+0x3460>
   146a4:	mov	r0, r4
   146a8:	bl	12cf0 <__assert_fail@plt+0x1aa4>
   146ac:	mov	r0, r6
   146b0:	bl	152e8 <__assert_fail@plt+0x409c>
   146b4:	mov	r4, r0
   146b8:	str	r0, [r9]
   146bc:	ldr	r0, [r7]
   146c0:	ldr	r1, [r7, #40]	; 0x28
   146c4:	ldr	r2, [r7, #44]	; 0x2c
   146c8:	stm	sp, {r0, r8}
   146cc:	ldr	r0, [sp, #20]
   146d0:	add	r3, sp, #8
   146d4:	stm	r3, {r0, r1, r2}
   146d8:	mov	r0, r4
   146dc:	mov	r1, r6
   146e0:	ldr	r2, [sp, #32]
   146e4:	ldr	r3, [sp, #36]	; 0x24
   146e8:	bl	133d8 <__assert_fail@plt+0x218c>
   146ec:	ldr	r0, [sp, #28]
   146f0:	ldr	r1, [sp, #24]
   146f4:	str	r1, [r0]
   146f8:	mov	r0, r4
   146fc:	sub	sp, fp, #28
   14700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14704:	bl	1121c <abort@plt>
   14708:	movw	r3, #33184	; 0x81a0
   1470c:	movt	r3, #2
   14710:	b	14574 <__assert_fail@plt+0x3328>
   14714:	mov	r1, r0
   14718:	mov	r0, #0
   1471c:	b	14564 <__assert_fail@plt+0x3318>
   14720:	mov	r2, r1
   14724:	mov	r1, r0
   14728:	mov	r0, #0
   1472c:	b	14708 <__assert_fail@plt+0x34bc>
   14730:	push	{r4, r5, r6, sl, fp, lr}
   14734:	add	fp, sp, #16
   14738:	sub	sp, sp, #48	; 0x30
   1473c:	mov	r4, r2
   14740:	mov	r5, r0
   14744:	mov	r6, sp
   14748:	mov	r0, r6
   1474c:	bl	1476c <__assert_fail@plt+0x3520>
   14750:	mov	r0, r5
   14754:	mov	r1, r4
   14758:	mvn	r2, #0
   1475c:	mov	r3, r6
   14760:	bl	14574 <__assert_fail@plt+0x3328>
   14764:	sub	sp, fp, #16
   14768:	pop	{r4, r5, r6, sl, fp, pc}
   1476c:	vmov.i32	q8, #0	; 0x00000000
   14770:	mov	r2, #32
   14774:	mov	r3, r0
   14778:	vst1.32	{d16-d17}, [r3], r2
   1477c:	vst1.32	{d16-d17}, [r3]
   14780:	add	r2, r0, #16
   14784:	vst1.32	{d16-d17}, [r2]
   14788:	cmp	r1, #10
   1478c:	strne	r1, [r0]
   14790:	bxne	lr
   14794:	push	{fp, lr}
   14798:	mov	fp, sp
   1479c:	bl	1121c <abort@plt>
   147a0:	push	{r4, r5, r6, r7, fp, lr}
   147a4:	add	fp, sp, #16
   147a8:	sub	sp, sp, #48	; 0x30
   147ac:	mov	r4, r3
   147b0:	mov	r5, r2
   147b4:	mov	r6, r0
   147b8:	mov	r7, sp
   147bc:	mov	r0, r7
   147c0:	bl	1476c <__assert_fail@plt+0x3520>
   147c4:	mov	r0, r6
   147c8:	mov	r1, r5
   147cc:	mov	r2, r4
   147d0:	mov	r3, r7
   147d4:	bl	14574 <__assert_fail@plt+0x3328>
   147d8:	sub	sp, fp, #16
   147dc:	pop	{r4, r5, r6, r7, fp, pc}
   147e0:	mov	r2, r1
   147e4:	mov	r1, r0
   147e8:	mov	r0, #0
   147ec:	b	14730 <__assert_fail@plt+0x34e4>
   147f0:	mov	r3, r2
   147f4:	mov	r2, r1
   147f8:	mov	r1, r0
   147fc:	mov	r0, #0
   14800:	b	147a0 <__assert_fail@plt+0x3554>
   14804:	push	{r4, r5, r6, sl, fp, lr}
   14808:	add	fp, sp, #16
   1480c:	sub	sp, sp, #48	; 0x30
   14810:	mov	r4, r1
   14814:	mov	r5, r0
   14818:	mov	r0, #32
   1481c:	movw	r1, #33184	; 0x81a0
   14820:	movt	r1, #2
   14824:	add	r3, r1, #16
   14828:	vld1.64	{d16-d17}, [r1], r0
   1482c:	mov	r6, sp
   14830:	vld1.64	{d18-d19}, [r3]
   14834:	add	r3, r6, #16
   14838:	vld1.64	{d20-d21}, [r1]
   1483c:	vst1.64	{d18-d19}, [r3]
   14840:	mov	r1, r6
   14844:	vst1.64	{d16-d17}, [r1], r0
   14848:	vst1.64	{d20-d21}, [r1]
   1484c:	mov	r0, r6
   14850:	mov	r1, r2
   14854:	mov	r2, #1
   14858:	bl	132cc <__assert_fail@plt+0x2080>
   1485c:	mov	r0, #0
   14860:	mov	r1, r5
   14864:	mov	r2, r4
   14868:	mov	r3, r6
   1486c:	bl	14574 <__assert_fail@plt+0x3328>
   14870:	sub	sp, fp, #16
   14874:	pop	{r4, r5, r6, sl, fp, pc}
   14878:	mov	r2, r1
   1487c:	mvn	r1, #0
   14880:	b	14804 <__assert_fail@plt+0x35b8>
   14884:	mov	r1, #58	; 0x3a
   14888:	b	14878 <__assert_fail@plt+0x362c>
   1488c:	mov	r2, #58	; 0x3a
   14890:	b	14804 <__assert_fail@plt+0x35b8>
   14894:	push	{r4, r5, r6, sl, fp, lr}
   14898:	add	fp, sp, #16
   1489c:	sub	sp, sp, #48	; 0x30
   148a0:	mov	r4, r2
   148a4:	mov	r5, r0
   148a8:	mov	r6, sp
   148ac:	mov	r0, r6
   148b0:	bl	1476c <__assert_fail@plt+0x3520>
   148b4:	mov	r0, r6
   148b8:	mov	r1, #58	; 0x3a
   148bc:	mov	r2, #1
   148c0:	bl	132cc <__assert_fail@plt+0x2080>
   148c4:	mov	r0, r5
   148c8:	mov	r1, r4
   148cc:	mvn	r2, #0
   148d0:	mov	r3, r6
   148d4:	bl	14574 <__assert_fail@plt+0x3328>
   148d8:	sub	sp, fp, #16
   148dc:	pop	{r4, r5, r6, sl, fp, pc}
   148e0:	push	{fp, lr}
   148e4:	mov	fp, sp
   148e8:	sub	sp, sp, #8
   148ec:	mvn	ip, #0
   148f0:	str	ip, [sp]
   148f4:	bl	14900 <__assert_fail@plt+0x36b4>
   148f8:	mov	sp, fp
   148fc:	pop	{fp, pc}
   14900:	push	{r4, r5, r6, r7, fp, lr}
   14904:	add	fp, sp, #16
   14908:	sub	sp, sp, #48	; 0x30
   1490c:	mov	r7, r3
   14910:	mov	r5, r0
   14914:	mov	r0, #32
   14918:	movw	r3, #33184	; 0x81a0
   1491c:	movt	r3, #2
   14920:	add	r4, r3, #16
   14924:	vld1.64	{d16-d17}, [r3], r0
   14928:	mov	r6, sp
   1492c:	vld1.64	{d18-d19}, [r4]
   14930:	add	r4, r6, #16
   14934:	vld1.64	{d20-d21}, [r3]
   14938:	vst1.64	{d18-d19}, [r4]
   1493c:	mov	r3, r6
   14940:	vst1.64	{d16-d17}, [r3], r0
   14944:	vst1.64	{d20-d21}, [r3]
   14948:	mov	r0, r6
   1494c:	bl	13324 <__assert_fail@plt+0x20d8>
   14950:	ldr	r2, [fp, #8]
   14954:	mov	r0, r5
   14958:	mov	r1, r7
   1495c:	mov	r3, r6
   14960:	bl	14574 <__assert_fail@plt+0x3328>
   14964:	sub	sp, fp, #16
   14968:	pop	{r4, r5, r6, r7, fp, pc}
   1496c:	mov	r3, r2
   14970:	mov	r2, r1
   14974:	mov	r1, r0
   14978:	mov	r0, #0
   1497c:	b	148e0 <__assert_fail@plt+0x3694>
   14980:	push	{fp, lr}
   14984:	mov	fp, sp
   14988:	sub	sp, sp, #8
   1498c:	mov	ip, r2
   14990:	mov	r2, r1
   14994:	mov	r1, r0
   14998:	str	r3, [sp]
   1499c:	mov	r0, #0
   149a0:	mov	r3, ip
   149a4:	bl	14900 <__assert_fail@plt+0x36b4>
   149a8:	mov	sp, fp
   149ac:	pop	{fp, pc}
   149b0:	movw	r3, #33048	; 0x8118
   149b4:	movt	r3, #2
   149b8:	b	14574 <__assert_fail@plt+0x3328>
   149bc:	mov	r2, r1
   149c0:	mov	r1, r0
   149c4:	mov	r0, #0
   149c8:	b	149b0 <__assert_fail@plt+0x3764>
   149cc:	mvn	r2, #0
   149d0:	b	149b0 <__assert_fail@plt+0x3764>
   149d4:	mov	r1, r0
   149d8:	mov	r0, #0
   149dc:	b	149cc <__assert_fail@plt+0x3780>
   149e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   149e4:	add	fp, sp, #24
   149e8:	sub	sp, sp, #16
   149ec:	mov	r4, r1
   149f0:	mov	r5, r0
   149f4:	mov	r7, #0
   149f8:	mov	r0, #0
   149fc:	mov	r1, r5
   14a00:	mov	r2, #5
   14a04:	bl	11048 <dcgettext@plt>
   14a08:	cmp	r0, r5
   14a0c:	beq	14a18 <__assert_fail@plt+0x37cc>
   14a10:	sub	sp, fp, #24
   14a14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a18:	bl	15cf8 <__assert_fail@plt+0x4aac>
   14a1c:	mov	r6, r0
   14a20:	mov	r8, #56	; 0x38
   14a24:	mov	r0, #45	; 0x2d
   14a28:	stm	sp, {r0, r8}
   14a2c:	str	r7, [sp, #8]
   14a30:	str	r7, [sp, #12]
   14a34:	mov	r0, r6
   14a38:	mov	r1, #85	; 0x55
   14a3c:	mov	r2, #84	; 0x54
   14a40:	mov	r3, #70	; 0x46
   14a44:	bl	14adc <__assert_fail@plt+0x3890>
   14a48:	cmp	r0, #0
   14a4c:	beq	14a68 <__assert_fail@plt+0x381c>
   14a50:	ldrb	r1, [r5]
   14a54:	movw	r2, #27727	; 0x6c4f
   14a58:	movt	r2, #1
   14a5c:	movw	r0, #27731	; 0x6c53
   14a60:	movt	r0, #1
   14a64:	b	14aac <__assert_fail@plt+0x3860>
   14a68:	mov	r0, #48	; 0x30
   14a6c:	mov	r1, #51	; 0x33
   14a70:	str	r8, [sp]
   14a74:	stmib	sp, {r0, r1}
   14a78:	str	r0, [sp, #12]
   14a7c:	mov	r0, r6
   14a80:	mov	r1, #71	; 0x47
   14a84:	mov	r2, #66	; 0x42
   14a88:	mov	r3, #49	; 0x31
   14a8c:	bl	14adc <__assert_fail@plt+0x3890>
   14a90:	cmp	r0, #0
   14a94:	beq	14abc <__assert_fail@plt+0x3870>
   14a98:	ldrb	r1, [r5]
   14a9c:	movw	r2, #27735	; 0x6c57
   14aa0:	movt	r2, #1
   14aa4:	movw	r0, #27739	; 0x6c5b
   14aa8:	movt	r0, #1
   14aac:	cmp	r1, #96	; 0x60
   14ab0:	moveq	r0, r2
   14ab4:	sub	sp, fp, #24
   14ab8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14abc:	movw	r1, #27721	; 0x6c49
   14ac0:	movt	r1, #1
   14ac4:	movw	r0, #27725	; 0x6c4d
   14ac8:	movt	r0, #1
   14acc:	cmp	r4, #9
   14ad0:	moveq	r0, r1
   14ad4:	sub	sp, fp, #24
   14ad8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14adc:	push	{r4, r5, r6, r7, fp, lr}
   14ae0:	add	fp, sp, #16
   14ae4:	sub	sp, sp, #16
   14ae8:	mov	r4, r3
   14aec:	mov	r5, r2
   14af0:	mov	r7, r1
   14af4:	mov	r6, r0
   14af8:	mov	r0, r1
   14afc:	bl	15a2c <__assert_fail@plt+0x47e0>
   14b00:	ldrb	r1, [r6]
   14b04:	cmp	r0, #0
   14b08:	andne	r1, r1, #223	; 0xdf
   14b0c:	mov	r0, #0
   14b10:	cmp	r1, r7
   14b14:	bne	14b54 <__assert_fail@plt+0x3908>
   14b18:	cmp	r7, #0
   14b1c:	moveq	r0, #1
   14b20:	subeq	sp, fp, #16
   14b24:	popeq	{r4, r5, r6, r7, fp, pc}
   14b28:	ldr	r0, [fp, #20]
   14b2c:	ldr	r1, [fp, #16]
   14b30:	ldr	r2, [fp, #12]
   14b34:	ldr	r3, [fp, #8]
   14b38:	str	r2, [sp]
   14b3c:	str	r1, [sp, #4]
   14b40:	str	r0, [sp, #8]
   14b44:	mov	r0, r6
   14b48:	mov	r1, r5
   14b4c:	mov	r2, r4
   14b50:	bl	14b5c <__assert_fail@plt+0x3910>
   14b54:	sub	sp, fp, #16
   14b58:	pop	{r4, r5, r6, r7, fp, pc}
   14b5c:	push	{r4, r5, r6, r7, fp, lr}
   14b60:	add	fp, sp, #16
   14b64:	sub	sp, sp, #8
   14b68:	mov	r4, r3
   14b6c:	mov	r5, r2
   14b70:	mov	r7, r1
   14b74:	mov	r6, r0
   14b78:	mov	r0, r1
   14b7c:	bl	15a2c <__assert_fail@plt+0x47e0>
   14b80:	ldrb	r1, [r6, #1]
   14b84:	cmp	r0, #0
   14b88:	andne	r1, r1, #223	; 0xdf
   14b8c:	mov	r0, #0
   14b90:	cmp	r1, r7
   14b94:	bne	14bcc <__assert_fail@plt+0x3980>
   14b98:	cmp	r7, #0
   14b9c:	moveq	r0, #1
   14ba0:	subeq	sp, fp, #16
   14ba4:	popeq	{r4, r5, r6, r7, fp, pc}
   14ba8:	ldr	r0, [fp, #16]
   14bac:	ldr	r1, [fp, #12]
   14bb0:	ldr	r3, [fp, #8]
   14bb4:	str	r1, [sp]
   14bb8:	str	r0, [sp, #4]
   14bbc:	mov	r0, r6
   14bc0:	mov	r1, r5
   14bc4:	mov	r2, r4
   14bc8:	bl	14bd4 <__assert_fail@plt+0x3988>
   14bcc:	sub	sp, fp, #16
   14bd0:	pop	{r4, r5, r6, r7, fp, pc}
   14bd4:	push	{r4, r5, r6, r7, fp, lr}
   14bd8:	add	fp, sp, #16
   14bdc:	sub	sp, sp, #8
   14be0:	mov	r4, r3
   14be4:	mov	r5, r2
   14be8:	mov	r7, r1
   14bec:	mov	r6, r0
   14bf0:	mov	r0, r1
   14bf4:	bl	15a2c <__assert_fail@plt+0x47e0>
   14bf8:	ldrb	r1, [r6, #2]
   14bfc:	cmp	r0, #0
   14c00:	andne	r1, r1, #223	; 0xdf
   14c04:	mov	r0, #0
   14c08:	cmp	r1, r7
   14c0c:	bne	14c3c <__assert_fail@plt+0x39f0>
   14c10:	cmp	r7, #0
   14c14:	moveq	r0, #1
   14c18:	subeq	sp, fp, #16
   14c1c:	popeq	{r4, r5, r6, r7, fp, pc}
   14c20:	ldr	r0, [fp, #12]
   14c24:	ldr	r3, [fp, #8]
   14c28:	str	r0, [sp]
   14c2c:	mov	r0, r6
   14c30:	mov	r1, r5
   14c34:	mov	r2, r4
   14c38:	bl	14c44 <__assert_fail@plt+0x39f8>
   14c3c:	sub	sp, fp, #16
   14c40:	pop	{r4, r5, r6, r7, fp, pc}
   14c44:	push	{r4, r5, r6, r7, fp, lr}
   14c48:	add	fp, sp, #16
   14c4c:	mov	r4, r3
   14c50:	mov	r5, r2
   14c54:	mov	r7, r1
   14c58:	mov	r6, r0
   14c5c:	mov	r0, r1
   14c60:	bl	15a2c <__assert_fail@plt+0x47e0>
   14c64:	ldrb	r1, [r6, #3]
   14c68:	ldr	r3, [fp, #8]
   14c6c:	cmp	r0, #0
   14c70:	andne	r1, r1, #223	; 0xdf
   14c74:	mov	r0, #0
   14c78:	cmp	r1, r7
   14c7c:	popne	{r4, r5, r6, r7, fp, pc}
   14c80:	cmp	r7, #0
   14c84:	beq	14c9c <__assert_fail@plt+0x3a50>
   14c88:	mov	r0, r6
   14c8c:	mov	r1, r5
   14c90:	mov	r2, r4
   14c94:	pop	{r4, r5, r6, r7, fp, lr}
   14c98:	b	14ca4 <__assert_fail@plt+0x3a58>
   14c9c:	mov	r0, #1
   14ca0:	pop	{r4, r5, r6, r7, fp, pc}
   14ca4:	push	{r4, r5, r6, r7, fp, lr}
   14ca8:	add	fp, sp, #16
   14cac:	mov	r4, r3
   14cb0:	mov	r5, r2
   14cb4:	mov	r7, r1
   14cb8:	mov	r6, r0
   14cbc:	mov	r0, r1
   14cc0:	bl	15a2c <__assert_fail@plt+0x47e0>
   14cc4:	ldrb	r1, [r6, #4]
   14cc8:	cmp	r0, #0
   14ccc:	andne	r1, r1, #223	; 0xdf
   14cd0:	mov	r0, #0
   14cd4:	cmp	r1, r7
   14cd8:	popne	{r4, r5, r6, r7, fp, pc}
   14cdc:	cmp	r7, #0
   14ce0:	beq	14cf8 <__assert_fail@plt+0x3aac>
   14ce4:	mov	r0, r6
   14ce8:	mov	r1, r5
   14cec:	mov	r2, r4
   14cf0:	pop	{r4, r5, r6, r7, fp, lr}
   14cf4:	b	14d00 <__assert_fail@plt+0x3ab4>
   14cf8:	mov	r0, #1
   14cfc:	pop	{r4, r5, r6, r7, fp, pc}
   14d00:	push	{r4, r5, r6, sl, fp, lr}
   14d04:	add	fp, sp, #16
   14d08:	mov	r4, r2
   14d0c:	mov	r6, r1
   14d10:	mov	r5, r0
   14d14:	mov	r0, r1
   14d18:	bl	15a2c <__assert_fail@plt+0x47e0>
   14d1c:	ldrb	r1, [r5, #5]
   14d20:	cmp	r0, #0
   14d24:	andne	r1, r1, #223	; 0xdf
   14d28:	mov	r0, #0
   14d2c:	cmp	r1, r6
   14d30:	popne	{r4, r5, r6, sl, fp, pc}
   14d34:	cmp	r6, #0
   14d38:	beq	14d4c <__assert_fail@plt+0x3b00>
   14d3c:	mov	r0, r5
   14d40:	mov	r1, r4
   14d44:	pop	{r4, r5, r6, sl, fp, lr}
   14d48:	b	14d54 <__assert_fail@plt+0x3b08>
   14d4c:	mov	r0, #1
   14d50:	pop	{r4, r5, r6, sl, fp, pc}
   14d54:	push	{r4, r5, fp, lr}
   14d58:	add	fp, sp, #8
   14d5c:	mov	r5, r1
   14d60:	mov	r4, r0
   14d64:	mov	r0, r1
   14d68:	bl	15a2c <__assert_fail@plt+0x47e0>
   14d6c:	ldrb	r1, [r4, #6]
   14d70:	cmp	r0, #0
   14d74:	andne	r1, r1, #223	; 0xdf
   14d78:	mov	r0, #0
   14d7c:	cmp	r1, r5
   14d80:	popne	{r4, r5, fp, pc}
   14d84:	cmp	r5, #0
   14d88:	beq	14d98 <__assert_fail@plt+0x3b4c>
   14d8c:	mov	r0, r4
   14d90:	pop	{r4, r5, fp, lr}
   14d94:	b	14da0 <__assert_fail@plt+0x3b54>
   14d98:	mov	r0, #1
   14d9c:	pop	{r4, r5, fp, pc}
   14da0:	push	{r4, sl, fp, lr}
   14da4:	add	fp, sp, #8
   14da8:	mov	r4, r0
   14dac:	mov	r0, #0
   14db0:	bl	15a2c <__assert_fail@plt+0x47e0>
   14db4:	ldrb	r1, [r4, #7]
   14db8:	cmp	r0, #0
   14dbc:	beq	14dd4 <__assert_fail@plt+0x3b88>
   14dc0:	tst	r1, #223	; 0xdf
   14dc4:	moveq	r0, #1
   14dc8:	popeq	{r4, sl, fp, pc}
   14dcc:	mov	r0, #0
   14dd0:	pop	{r4, sl, fp, pc}
   14dd4:	cmp	r1, #0
   14dd8:	moveq	r0, #1
   14ddc:	popeq	{r4, sl, fp, pc}
   14de0:	mov	r0, #0
   14de4:	pop	{r4, sl, fp, pc}
   14de8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14dec:	add	fp, sp, #24
   14df0:	sub	sp, sp, #32
   14df4:	mov	r4, r2
   14df8:	mov	r8, r0
   14dfc:	ldr	r6, [fp, #12]
   14e00:	ldr	r7, [fp, #8]
   14e04:	cmp	r1, #0
   14e08:	beq	14e30 <__assert_fail@plt+0x3be4>
   14e0c:	mov	r5, r1
   14e10:	str	r4, [sp]
   14e14:	str	r3, [sp, #4]
   14e18:	movw	r2, #27828	; 0x6cb4
   14e1c:	movt	r2, #1
   14e20:	mov	r0, r8
   14e24:	mov	r1, #1
   14e28:	mov	r3, r5
   14e2c:	b	14e48 <__assert_fail@plt+0x3bfc>
   14e30:	str	r3, [sp]
   14e34:	movw	r2, #27840	; 0x6cc0
   14e38:	movt	r2, #1
   14e3c:	mov	r0, r8
   14e40:	mov	r1, #1
   14e44:	mov	r3, r4
   14e48:	bl	1118c <__fprintf_chk@plt>
   14e4c:	movw	r1, #27847	; 0x6cc7
   14e50:	movt	r1, #1
   14e54:	mov	r0, #0
   14e58:	mov	r2, #5
   14e5c:	bl	11048 <dcgettext@plt>
   14e60:	mov	r3, r0
   14e64:	movw	r0, #2022	; 0x7e6
   14e68:	str	r0, [sp]
   14e6c:	movw	r2, #28565	; 0x6f95
   14e70:	movt	r2, #1
   14e74:	mov	r0, r8
   14e78:	mov	r1, #1
   14e7c:	bl	1118c <__fprintf_chk@plt>
   14e80:	movw	r4, #26786	; 0x68a2
   14e84:	movt	r4, #1
   14e88:	mov	r0, r4
   14e8c:	mov	r1, r8
   14e90:	bl	10fac <fputs_unlocked@plt>
   14e94:	movw	r1, #27851	; 0x6ccb
   14e98:	movt	r1, #1
   14e9c:	mov	r0, #0
   14ea0:	mov	r2, #5
   14ea4:	bl	11048 <dcgettext@plt>
   14ea8:	mov	r2, r0
   14eac:	movw	r3, #28022	; 0x6d76
   14eb0:	movt	r3, #1
   14eb4:	mov	r0, r8
   14eb8:	mov	r1, #1
   14ebc:	bl	1118c <__fprintf_chk@plt>
   14ec0:	mov	r0, r4
   14ec4:	mov	r1, r8
   14ec8:	bl	10fac <fputs_unlocked@plt>
   14ecc:	cmp	r6, #9
   14ed0:	bhi	14f0c <__assert_fail@plt+0x3cc0>
   14ed4:	add	r0, pc, #0
   14ed8:	ldr	pc, [r0, r6, lsl #2]
   14edc:	andeq	r4, r1, r4, lsl #30
   14ee0:	andeq	r4, r1, r8, lsl pc
   14ee4:	andeq	r4, r1, r8, asr #30
   14ee8:	andeq	r4, r1, r0, ror pc
   14eec:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14ef0:	andeq	r4, r1, r0, asr #31
   14ef4:	andeq	r4, r1, r8, ror #31
   14ef8:	andeq	r5, r1, r0, lsr #32
   14efc:	andeq	r5, r1, r0, asr #1
   14f00:	andeq	r5, r1, r8, rrx
   14f04:	sub	sp, fp, #24
   14f08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f0c:	movw	r1, #28375	; 0x6ed7
   14f10:	movt	r1, #1
   14f14:	b	15070 <__assert_fail@plt+0x3e24>
   14f18:	movw	r1, #28056	; 0x6d98
   14f1c:	movt	r1, #1
   14f20:	mov	r0, #0
   14f24:	mov	r2, #5
   14f28:	bl	11048 <dcgettext@plt>
   14f2c:	mov	r2, r0
   14f30:	ldr	r3, [r7]
   14f34:	mov	r0, r8
   14f38:	mov	r1, #1
   14f3c:	sub	sp, fp, #24
   14f40:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f44:	b	1118c <__fprintf_chk@plt>
   14f48:	movw	r1, #28072	; 0x6da8
   14f4c:	movt	r1, #1
   14f50:	mov	r0, #0
   14f54:	mov	r2, #5
   14f58:	bl	11048 <dcgettext@plt>
   14f5c:	mov	r2, r0
   14f60:	ldr	r3, [r7]
   14f64:	ldr	r0, [r7, #4]
   14f68:	str	r0, [sp]
   14f6c:	b	1505c <__assert_fail@plt+0x3e10>
   14f70:	movw	r1, #28095	; 0x6dbf
   14f74:	movt	r1, #1
   14f78:	mov	r0, #0
   14f7c:	mov	r2, #5
   14f80:	bl	11048 <dcgettext@plt>
   14f84:	mov	r2, r0
   14f88:	ldr	r3, [r7]
   14f8c:	ldmib	r7, {r0, r1}
   14f90:	stm	sp, {r0, r1}
   14f94:	b	1505c <__assert_fail@plt+0x3e10>
   14f98:	movw	r1, #28123	; 0x6ddb
   14f9c:	movt	r1, #1
   14fa0:	mov	r0, #0
   14fa4:	mov	r2, #5
   14fa8:	bl	11048 <dcgettext@plt>
   14fac:	mov	r2, r0
   14fb0:	ldr	r3, [r7]
   14fb4:	ldmib	r7, {r0, r1, r7}
   14fb8:	stm	sp, {r0, r1, r7}
   14fbc:	b	1505c <__assert_fail@plt+0x3e10>
   14fc0:	movw	r1, #28155	; 0x6dfb
   14fc4:	movt	r1, #1
   14fc8:	mov	r0, #0
   14fcc:	mov	r2, #5
   14fd0:	bl	11048 <dcgettext@plt>
   14fd4:	mov	r2, r0
   14fd8:	ldr	r3, [r7]
   14fdc:	ldmib	r7, {r0, r1, r6, r7}
   14fe0:	stm	sp, {r0, r1, r6, r7}
   14fe4:	b	1505c <__assert_fail@plt+0x3e10>
   14fe8:	movw	r1, #28191	; 0x6e1f
   14fec:	movt	r1, #1
   14ff0:	mov	r0, #0
   14ff4:	mov	r2, #5
   14ff8:	bl	11048 <dcgettext@plt>
   14ffc:	mov	r2, r0
   15000:	ldr	r3, [r7]
   15004:	ldmib	r7, {r0, r1, r6}
   15008:	ldr	r5, [r7, #16]
   1500c:	ldr	r7, [r7, #20]
   15010:	stm	sp, {r0, r1, r6}
   15014:	str	r5, [sp, #12]
   15018:	str	r7, [sp, #16]
   1501c:	b	1505c <__assert_fail@plt+0x3e10>
   15020:	movw	r1, #28231	; 0x6e47
   15024:	movt	r1, #1
   15028:	mov	r0, #0
   1502c:	mov	r2, #5
   15030:	bl	11048 <dcgettext@plt>
   15034:	mov	r2, r0
   15038:	ldr	r3, [r7]
   1503c:	ldmib	r7, {r0, r1, r6}
   15040:	ldr	r5, [r7, #16]
   15044:	ldr	r4, [r7, #20]
   15048:	ldr	r7, [r7, #24]
   1504c:	stm	sp, {r0, r1, r6}
   15050:	str	r5, [sp, #12]
   15054:	str	r4, [sp, #16]
   15058:	str	r7, [sp, #20]
   1505c:	mov	r0, r8
   15060:	mov	r1, #1
   15064:	b	15110 <__assert_fail@plt+0x3ec4>
   15068:	movw	r1, #28323	; 0x6ea3
   1506c:	movt	r1, #1
   15070:	mov	r0, #0
   15074:	mov	r2, #5
   15078:	bl	11048 <dcgettext@plt>
   1507c:	mov	ip, r0
   15080:	ldr	r3, [r7]
   15084:	ldr	r0, [r7, #4]
   15088:	ldr	r1, [r7, #8]
   1508c:	ldr	r6, [r7, #12]
   15090:	ldr	r5, [r7, #16]
   15094:	ldr	r4, [r7, #20]
   15098:	ldr	r2, [r7, #24]
   1509c:	ldr	lr, [r7, #28]
   150a0:	ldr	r7, [r7, #32]
   150a4:	stm	sp, {r0, r1, r6}
   150a8:	str	r5, [sp, #12]
   150ac:	str	r4, [sp, #16]
   150b0:	str	r2, [sp, #20]
   150b4:	str	lr, [sp, #24]
   150b8:	str	r7, [sp, #28]
   150bc:	b	15104 <__assert_fail@plt+0x3eb8>
   150c0:	movw	r1, #28275	; 0x6e73
   150c4:	movt	r1, #1
   150c8:	mov	r0, #0
   150cc:	mov	r2, #5
   150d0:	bl	11048 <dcgettext@plt>
   150d4:	mov	ip, r0
   150d8:	ldr	r3, [r7]
   150dc:	ldmib	r7, {r0, r1, r6}
   150e0:	ldr	r5, [r7, #16]
   150e4:	ldr	r4, [r7, #20]
   150e8:	ldr	r2, [r7, #24]
   150ec:	ldr	r7, [r7, #28]
   150f0:	stm	sp, {r0, r1, r6}
   150f4:	str	r5, [sp, #12]
   150f8:	str	r4, [sp, #16]
   150fc:	str	r2, [sp, #20]
   15100:	str	r7, [sp, #24]
   15104:	mov	r0, r8
   15108:	mov	r1, #1
   1510c:	mov	r2, ip
   15110:	bl	1118c <__fprintf_chk@plt>
   15114:	sub	sp, fp, #24
   15118:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1511c:	push	{r4, sl, fp, lr}
   15120:	add	fp, sp, #8
   15124:	sub	sp, sp, #8
   15128:	mov	lr, #0
   1512c:	ldr	ip, [fp, #8]
   15130:	ldr	r4, [ip, lr, lsl #2]
   15134:	add	lr, lr, #1
   15138:	cmp	r4, #0
   1513c:	bne	15130 <__assert_fail@plt+0x3ee4>
   15140:	sub	r4, lr, #1
   15144:	str	ip, [sp]
   15148:	str	r4, [sp, #4]
   1514c:	bl	14de8 <__assert_fail@plt+0x3b9c>
   15150:	sub	sp, fp, #8
   15154:	pop	{r4, sl, fp, pc}
   15158:	push	{r4, r5, fp, lr}
   1515c:	add	fp, sp, #8
   15160:	sub	sp, sp, #48	; 0x30
   15164:	mov	ip, #0
   15168:	ldr	r4, [fp, #8]
   1516c:	add	lr, sp, #8
   15170:	ldr	r5, [r4]
   15174:	str	r5, [lr, ip, lsl #2]
   15178:	cmp	r5, #0
   1517c:	beq	15190 <__assert_fail@plt+0x3f44>
   15180:	add	ip, ip, #1
   15184:	add	r4, r4, #4
   15188:	cmp	ip, #10
   1518c:	bcc	15170 <__assert_fail@plt+0x3f24>
   15190:	str	lr, [sp]
   15194:	str	ip, [sp, #4]
   15198:	bl	14de8 <__assert_fail@plt+0x3b9c>
   1519c:	sub	sp, fp, #8
   151a0:	pop	{r4, r5, fp, pc}
   151a4:	push	{fp, lr}
   151a8:	mov	fp, sp
   151ac:	sub	sp, sp, #8
   151b0:	add	ip, fp, #8
   151b4:	str	ip, [sp, #4]
   151b8:	str	ip, [sp]
   151bc:	bl	15158 <__assert_fail@plt+0x3f0c>
   151c0:	mov	sp, fp
   151c4:	pop	{fp, pc}
   151c8:	push	{fp, lr}
   151cc:	mov	fp, sp
   151d0:	movw	r0, #33124	; 0x8164
   151d4:	movt	r0, #2
   151d8:	ldr	r1, [r0]
   151dc:	movw	r0, #26786	; 0x68a2
   151e0:	movt	r0, #1
   151e4:	bl	10fac <fputs_unlocked@plt>
   151e8:	movw	r1, #28435	; 0x6f13
   151ec:	movt	r1, #1
   151f0:	mov	r0, #0
   151f4:	mov	r2, #5
   151f8:	bl	11048 <dcgettext@plt>
   151fc:	mov	r1, r0
   15200:	movw	r2, #28455	; 0x6f27
   15204:	movt	r2, #1
   15208:	mov	r0, #1
   1520c:	bl	11174 <__printf_chk@plt>
   15210:	movw	r1, #28477	; 0x6f3d
   15214:	movt	r1, #1
   15218:	mov	r0, #0
   1521c:	mov	r2, #5
   15220:	bl	11048 <dcgettext@plt>
   15224:	mov	r1, r0
   15228:	movw	r2, #26091	; 0x65eb
   1522c:	movt	r2, #1
   15230:	movw	r3, #26595	; 0x67e3
   15234:	movt	r3, #1
   15238:	mov	r0, #1
   1523c:	bl	11174 <__printf_chk@plt>
   15240:	movw	r1, #28497	; 0x6f51
   15244:	movt	r1, #1
   15248:	mov	r0, #0
   1524c:	mov	r2, #5
   15250:	bl	11048 <dcgettext@plt>
   15254:	mov	r1, r0
   15258:	movw	r2, #28536	; 0x6f78
   1525c:	movt	r2, #1
   15260:	mov	r0, #1
   15264:	pop	{fp, lr}
   15268:	b	11174 <__printf_chk@plt>
   1526c:	b	15270 <__assert_fail@plt+0x4024>
   15270:	push	{r4, r5, r6, sl, fp, lr}
   15274:	add	fp, sp, #16
   15278:	mov	r4, r2
   1527c:	mov	r5, r1
   15280:	mov	r6, r0
   15284:	bl	15d90 <__assert_fail@plt+0x4b44>
   15288:	cmp	r0, #0
   1528c:	popne	{r4, r5, r6, sl, fp, pc}
   15290:	cmp	r6, #0
   15294:	beq	152a8 <__assert_fail@plt+0x405c>
   15298:	cmp	r5, #0
   1529c:	cmpne	r4, #0
   152a0:	bne	152a8 <__assert_fail@plt+0x405c>
   152a4:	pop	{r4, r5, r6, sl, fp, pc}
   152a8:	bl	1565c <__assert_fail@plt+0x4410>
   152ac:	push	{fp, lr}
   152b0:	mov	fp, sp
   152b4:	bl	156f4 <__assert_fail@plt+0x44a8>
   152b8:	bl	152c0 <__assert_fail@plt+0x4074>
   152bc:	pop	{fp, pc}
   152c0:	cmp	r0, #0
   152c4:	bxne	lr
   152c8:	push	{fp, lr}
   152cc:	mov	fp, sp
   152d0:	bl	1565c <__assert_fail@plt+0x4410>
   152d4:	push	{fp, lr}
   152d8:	mov	fp, sp
   152dc:	bl	15cc4 <__assert_fail@plt+0x4a78>
   152e0:	bl	152c0 <__assert_fail@plt+0x4074>
   152e4:	pop	{fp, pc}
   152e8:	b	152ac <__assert_fail@plt+0x4060>
   152ec:	push	{r4, r5, fp, lr}
   152f0:	add	fp, sp, #8
   152f4:	mov	r4, r1
   152f8:	mov	r5, r0
   152fc:	bl	15724 <__assert_fail@plt+0x44d8>
   15300:	cmp	r0, #0
   15304:	popne	{r4, r5, fp, pc}
   15308:	cmp	r5, #0
   1530c:	beq	1531c <__assert_fail@plt+0x40d0>
   15310:	cmp	r4, #0
   15314:	bne	1531c <__assert_fail@plt+0x40d0>
   15318:	pop	{r4, r5, fp, pc}
   1531c:	bl	1565c <__assert_fail@plt+0x4410>
   15320:	push	{fp, lr}
   15324:	mov	fp, sp
   15328:	bl	15cc8 <__assert_fail@plt+0x4a7c>
   1532c:	bl	152c0 <__assert_fail@plt+0x4074>
   15330:	pop	{fp, pc}
   15334:	push	{fp, lr}
   15338:	mov	fp, sp
   1533c:	bl	15cd8 <__assert_fail@plt+0x4a8c>
   15340:	bl	152c0 <__assert_fail@plt+0x4074>
   15344:	pop	{fp, pc}
   15348:	push	{fp, lr}
   1534c:	mov	fp, sp
   15350:	mov	r2, r1
   15354:	mov	r1, r0
   15358:	mov	r0, #0
   1535c:	bl	15270 <__assert_fail@plt+0x4024>
   15360:	pop	{fp, pc}
   15364:	mov	r2, r1
   15368:	mov	r1, r0
   1536c:	mov	r0, #0
   15370:	b	15334 <__assert_fail@plt+0x40e8>
   15374:	mov	r2, #1
   15378:	b	1537c <__assert_fail@plt+0x4130>
   1537c:	push	{r4, r5, fp, lr}
   15380:	add	fp, sp, #8
   15384:	mov	r4, r1
   15388:	ldr	r5, [r1]
   1538c:	cmp	r0, #0
   15390:	beq	153a8 <__assert_fail@plt+0x415c>
   15394:	mov	r1, #1
   15398:	add	r1, r1, r5, lsr #1
   1539c:	adds	r5, r5, r1
   153a0:	bcc	153c0 <__assert_fail@plt+0x4174>
   153a4:	bl	1565c <__assert_fail@plt+0x4410>
   153a8:	cmp	r5, #0
   153ac:	bne	153c0 <__assert_fail@plt+0x4174>
   153b0:	mov	r1, #64	; 0x40
   153b4:	udiv	r5, r1, r2
   153b8:	cmp	r2, #64	; 0x40
   153bc:	addhi	r5, r5, #1
   153c0:	mov	r1, r5
   153c4:	bl	15270 <__assert_fail@plt+0x4024>
   153c8:	str	r5, [r4]
   153cc:	pop	{r4, r5, fp, pc}
   153d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   153d4:	add	fp, sp, #24
   153d8:	mov	r8, r1
   153dc:	ldr	r6, [r1]
   153e0:	add	r1, r6, r6, asr #1
   153e4:	cmp	r1, r6
   153e8:	mvnvs	r1, #-2147483648	; 0x80000000
   153ec:	cmp	r1, r3
   153f0:	mov	r5, r1
   153f4:	movgt	r5, r3
   153f8:	cmn	r3, #1
   153fc:	movle	r5, r1
   15400:	ldr	r4, [fp, #8]
   15404:	cmn	r4, #1
   15408:	ble	15430 <__assert_fail@plt+0x41e4>
   1540c:	cmp	r4, #0
   15410:	beq	15484 <__assert_fail@plt+0x4238>
   15414:	cmn	r5, #1
   15418:	ble	15458 <__assert_fail@plt+0x420c>
   1541c:	mvn	r7, #-2147483648	; 0x80000000
   15420:	udiv	r1, r7, r4
   15424:	cmp	r1, r5
   15428:	bge	15484 <__assert_fail@plt+0x4238>
   1542c:	b	15494 <__assert_fail@plt+0x4248>
   15430:	cmn	r5, #1
   15434:	ble	15474 <__assert_fail@plt+0x4228>
   15438:	cmn	r4, #1
   1543c:	beq	15484 <__assert_fail@plt+0x4238>
   15440:	mov	r1, #-2147483648	; 0x80000000
   15444:	sdiv	r1, r1, r4
   15448:	mvn	r7, #-2147483648	; 0x80000000
   1544c:	cmp	r1, r5
   15450:	bge	15484 <__assert_fail@plt+0x4238>
   15454:	b	15494 <__assert_fail@plt+0x4248>
   15458:	beq	15484 <__assert_fail@plt+0x4238>
   1545c:	mov	r1, #-2147483648	; 0x80000000
   15460:	sdiv	r1, r1, r5
   15464:	mvn	r7, #-2147483648	; 0x80000000
   15468:	cmp	r1, r4
   1546c:	bge	15484 <__assert_fail@plt+0x4238>
   15470:	b	15494 <__assert_fail@plt+0x4248>
   15474:	mvn	r7, #-2147483648	; 0x80000000
   15478:	sdiv	r1, r7, r4
   1547c:	cmp	r5, r1
   15480:	blt	15494 <__assert_fail@plt+0x4248>
   15484:	mul	r1, r5, r4
   15488:	mov	r7, #64	; 0x40
   1548c:	cmp	r1, #63	; 0x3f
   15490:	bgt	1549c <__assert_fail@plt+0x4250>
   15494:	sdiv	r5, r7, r4
   15498:	mul	r1, r5, r4
   1549c:	cmp	r0, #0
   154a0:	moveq	r7, #0
   154a4:	streq	r7, [r8]
   154a8:	sub	r7, r5, r6
   154ac:	cmp	r7, r2
   154b0:	bge	1555c <__assert_fail@plt+0x4310>
   154b4:	add	r5, r6, r2
   154b8:	mov	r1, #0
   154bc:	cmp	r5, r3
   154c0:	mov	r2, #0
   154c4:	movwgt	r2, #1
   154c8:	cmn	r3, #1
   154cc:	movwgt	r1, #1
   154d0:	cmp	r5, r6
   154d4:	bvs	15544 <__assert_fail@plt+0x42f8>
   154d8:	ands	r1, r1, r2
   154dc:	bne	15544 <__assert_fail@plt+0x42f8>
   154e0:	cmn	r4, #1
   154e4:	ble	1550c <__assert_fail@plt+0x42c0>
   154e8:	cmp	r4, #0
   154ec:	beq	15558 <__assert_fail@plt+0x430c>
   154f0:	cmn	r5, #1
   154f4:	ble	15530 <__assert_fail@plt+0x42e4>
   154f8:	mvn	r1, #-2147483648	; 0x80000000
   154fc:	udiv	r1, r1, r4
   15500:	cmp	r1, r5
   15504:	bge	15558 <__assert_fail@plt+0x430c>
   15508:	b	15544 <__assert_fail@plt+0x42f8>
   1550c:	cmn	r5, #1
   15510:	ble	15548 <__assert_fail@plt+0x42fc>
   15514:	cmn	r4, #1
   15518:	beq	15558 <__assert_fail@plt+0x430c>
   1551c:	mov	r1, #-2147483648	; 0x80000000
   15520:	sdiv	r1, r1, r4
   15524:	cmp	r1, r5
   15528:	bge	15558 <__assert_fail@plt+0x430c>
   1552c:	b	15544 <__assert_fail@plt+0x42f8>
   15530:	beq	15558 <__assert_fail@plt+0x430c>
   15534:	mov	r1, #-2147483648	; 0x80000000
   15538:	sdiv	r1, r1, r5
   1553c:	cmp	r1, r4
   15540:	bge	15558 <__assert_fail@plt+0x430c>
   15544:	bl	1565c <__assert_fail@plt+0x4410>
   15548:	mvn	r1, #-2147483648	; 0x80000000
   1554c:	sdiv	r1, r1, r4
   15550:	cmp	r5, r1
   15554:	blt	15544 <__assert_fail@plt+0x42f8>
   15558:	mul	r1, r5, r4
   1555c:	bl	152ec <__assert_fail@plt+0x40a0>
   15560:	str	r5, [r8]
   15564:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15568:	mov	r1, #1
   1556c:	b	15570 <__assert_fail@plt+0x4324>
   15570:	push	{fp, lr}
   15574:	mov	fp, sp
   15578:	bl	156a0 <__assert_fail@plt+0x4454>
   1557c:	bl	152c0 <__assert_fail@plt+0x4074>
   15580:	pop	{fp, pc}
   15584:	mov	r1, #1
   15588:	b	1558c <__assert_fail@plt+0x4340>
   1558c:	push	{fp, lr}
   15590:	mov	fp, sp
   15594:	bl	15cd4 <__assert_fail@plt+0x4a88>
   15598:	bl	152c0 <__assert_fail@plt+0x4074>
   1559c:	pop	{fp, pc}
   155a0:	push	{r4, r5, r6, sl, fp, lr}
   155a4:	add	fp, sp, #16
   155a8:	mov	r4, r1
   155ac:	mov	r5, r0
   155b0:	mov	r0, r1
   155b4:	bl	152ac <__assert_fail@plt+0x4060>
   155b8:	mov	r6, r0
   155bc:	mov	r1, r5
   155c0:	mov	r2, r4
   155c4:	bl	1100c <memcpy@plt>
   155c8:	mov	r0, r6
   155cc:	pop	{r4, r5, r6, sl, fp, pc}
   155d0:	push	{r4, r5, r6, sl, fp, lr}
   155d4:	add	fp, sp, #16
   155d8:	mov	r4, r1
   155dc:	mov	r5, r0
   155e0:	mov	r0, r1
   155e4:	bl	152d4 <__assert_fail@plt+0x4088>
   155e8:	mov	r6, r0
   155ec:	mov	r1, r5
   155f0:	mov	r2, r4
   155f4:	bl	1100c <memcpy@plt>
   155f8:	mov	r0, r6
   155fc:	pop	{r4, r5, r6, sl, fp, pc}
   15600:	push	{r4, r5, r6, sl, fp, lr}
   15604:	add	fp, sp, #16
   15608:	mov	r4, r1
   1560c:	mov	r5, r0
   15610:	add	r0, r1, #1
   15614:	bl	152d4 <__assert_fail@plt+0x4088>
   15618:	mov	r6, r0
   1561c:	mov	r0, #0
   15620:	strb	r0, [r6, r4]
   15624:	mov	r0, r6
   15628:	mov	r1, r5
   1562c:	mov	r2, r4
   15630:	bl	1100c <memcpy@plt>
   15634:	mov	r0, r6
   15638:	pop	{r4, r5, r6, sl, fp, pc}
   1563c:	push	{r4, sl, fp, lr}
   15640:	add	fp, sp, #8
   15644:	mov	r4, r0
   15648:	bl	1112c <strlen@plt>
   1564c:	add	r1, r0, #1
   15650:	mov	r0, r4
   15654:	pop	{r4, sl, fp, lr}
   15658:	b	155a0 <__assert_fail@plt+0x4354>
   1565c:	push	{fp, lr}
   15660:	mov	fp, sp
   15664:	movw	r0, #33028	; 0x8104
   15668:	movt	r0, #2
   1566c:	ldr	r4, [r0]
   15670:	movw	r1, #28612	; 0x6fc4
   15674:	movt	r1, #1
   15678:	mov	r0, #0
   1567c:	mov	r2, #5
   15680:	bl	11048 <dcgettext@plt>
   15684:	mov	r3, r0
   15688:	movw	r2, #27574	; 0x6bb6
   1568c:	movt	r2, #1
   15690:	mov	r0, r4
   15694:	mov	r1, #0
   15698:	bl	110cc <error@plt>
   1569c:	bl	1121c <abort@plt>
   156a0:	clz	r2, r1
   156a4:	lsr	r2, r2, #5
   156a8:	clz	r3, r0
   156ac:	lsr	r3, r3, #5
   156b0:	orrs	r2, r3, r2
   156b4:	movwne	r1, #1
   156b8:	movwne	r0, #1
   156bc:	cmp	r1, #0
   156c0:	beq	156f0 <__assert_fail@plt+0x44a4>
   156c4:	mvn	r2, #-2147483648	; 0x80000000
   156c8:	udiv	r2, r2, r1
   156cc:	cmp	r2, r0
   156d0:	bcs	156f0 <__assert_fail@plt+0x44a4>
   156d4:	push	{fp, lr}
   156d8:	mov	fp, sp
   156dc:	bl	11144 <__errno_location@plt>
   156e0:	mov	r1, #12
   156e4:	str	r1, [r0]
   156e8:	mov	r0, #0
   156ec:	pop	{fp, pc}
   156f0:	b	10fa0 <calloc@plt>
   156f4:	cmp	r0, #0
   156f8:	movweq	r0, #1
   156fc:	cmn	r0, #1
   15700:	ble	15708 <__assert_fail@plt+0x44bc>
   15704:	b	110d8 <malloc@plt>
   15708:	push	{fp, lr}
   1570c:	mov	fp, sp
   15710:	bl	11144 <__errno_location@plt>
   15714:	mov	r1, #12
   15718:	str	r1, [r0]
   1571c:	mov	r0, #0
   15720:	pop	{fp, pc}
   15724:	push	{fp, lr}
   15728:	mov	fp, sp
   1572c:	cmp	r0, #0
   15730:	beq	1574c <__assert_fail@plt+0x4500>
   15734:	cmp	r1, #0
   15738:	beq	15758 <__assert_fail@plt+0x450c>
   1573c:	cmn	r1, #1
   15740:	ble	15764 <__assert_fail@plt+0x4518>
   15744:	pop	{fp, lr}
   15748:	b	11054 <realloc@plt>
   1574c:	mov	r0, r1
   15750:	pop	{fp, lr}
   15754:	b	156f4 <__assert_fail@plt+0x44a8>
   15758:	bl	12cf0 <__assert_fail@plt+0x1aa4>
   1575c:	mov	r0, #0
   15760:	pop	{fp, pc}
   15764:	bl	11144 <__errno_location@plt>
   15768:	mov	r1, #12
   1576c:	str	r1, [r0]
   15770:	mov	r0, #0
   15774:	pop	{fp, pc}
   15778:	mov	r1, r0
   1577c:	sub	r2, r0, #65	; 0x41
   15780:	mov	r0, #1
   15784:	cmp	r2, #26
   15788:	subcs	r2, r1, #97	; 0x61
   1578c:	cmpcs	r2, #26
   15790:	bcs	15798 <__assert_fail@plt+0x454c>
   15794:	bx	lr
   15798:	sub	r1, r1, #48	; 0x30
   1579c:	cmp	r1, #10
   157a0:	movcs	r0, #0
   157a4:	bx	lr
   157a8:	mov	r1, r0
   157ac:	sub	r2, r0, #65	; 0x41
   157b0:	mov	r0, #1
   157b4:	cmp	r2, #26
   157b8:	subcs	r1, r1, #97	; 0x61
   157bc:	cmpcs	r1, #26
   157c0:	movcs	r0, #0
   157c4:	bx	lr
   157c8:	mov	r1, #0
   157cc:	cmp	r0, #128	; 0x80
   157d0:	movwcc	r1, #1
   157d4:	mov	r0, r1
   157d8:	bx	lr
   157dc:	sub	r1, r0, #9
   157e0:	clz	r1, r1
   157e4:	lsr	r1, r1, #5
   157e8:	sub	r0, r0, #32
   157ec:	clz	r0, r0
   157f0:	lsr	r0, r0, #5
   157f4:	orr	r0, r0, r1
   157f8:	bx	lr
   157fc:	mov	r1, r0
   15800:	mov	r0, #1
   15804:	cmp	r1, #32
   15808:	bxcc	lr
   1580c:	cmp	r1, #127	; 0x7f
   15810:	movne	r0, #0
   15814:	bx	lr
   15818:	sub	r1, r0, #48	; 0x30
   1581c:	mov	r0, #0
   15820:	cmp	r1, #10
   15824:	movwcc	r0, #1
   15828:	bx	lr
   1582c:	sub	r1, r0, #33	; 0x21
   15830:	mov	r0, #0
   15834:	cmp	r1, #94	; 0x5e
   15838:	movwcc	r0, #1
   1583c:	bx	lr
   15840:	sub	r1, r0, #97	; 0x61
   15844:	mov	r0, #0
   15848:	cmp	r1, #26
   1584c:	movwcc	r0, #1
   15850:	bx	lr
   15854:	sub	r1, r0, #32
   15858:	mov	r0, #0
   1585c:	cmp	r1, #95	; 0x5f
   15860:	movwcc	r0, #1
   15864:	bx	lr
   15868:	sub	r1, r0, #33	; 0x21
   1586c:	cmp	r1, #93	; 0x5d
   15870:	bhi	159fc <__assert_fail@plt+0x47b0>
   15874:	mov	r0, #1
   15878:	add	r2, pc, #0
   1587c:	ldr	pc, [r2, r1, lsl #2]
   15880:	strdeq	r5, [r1], -r8
   15884:	strdeq	r5, [r1], -r8
   15888:	strdeq	r5, [r1], -r8
   1588c:	strdeq	r5, [r1], -r8
   15890:	strdeq	r5, [r1], -r8
   15894:	strdeq	r5, [r1], -r8
   15898:	strdeq	r5, [r1], -r8
   1589c:	strdeq	r5, [r1], -r8
   158a0:	strdeq	r5, [r1], -r8
   158a4:	strdeq	r5, [r1], -r8
   158a8:	strdeq	r5, [r1], -r8
   158ac:	strdeq	r5, [r1], -r8
   158b0:	strdeq	r5, [r1], -r8
   158b4:	strdeq	r5, [r1], -r8
   158b8:	strdeq	r5, [r1], -r8
   158bc:	strdeq	r5, [r1], -ip
   158c0:	strdeq	r5, [r1], -ip
   158c4:	strdeq	r5, [r1], -ip
   158c8:	strdeq	r5, [r1], -ip
   158cc:	strdeq	r5, [r1], -ip
   158d0:	strdeq	r5, [r1], -ip
   158d4:	strdeq	r5, [r1], -ip
   158d8:	strdeq	r5, [r1], -ip
   158dc:	strdeq	r5, [r1], -ip
   158e0:	strdeq	r5, [r1], -ip
   158e4:	strdeq	r5, [r1], -r8
   158e8:	strdeq	r5, [r1], -r8
   158ec:	strdeq	r5, [r1], -r8
   158f0:	strdeq	r5, [r1], -r8
   158f4:	strdeq	r5, [r1], -r8
   158f8:	strdeq	r5, [r1], -r8
   158fc:	strdeq	r5, [r1], -r8
   15900:	strdeq	r5, [r1], -ip
   15904:	strdeq	r5, [r1], -ip
   15908:	strdeq	r5, [r1], -ip
   1590c:	strdeq	r5, [r1], -ip
   15910:	strdeq	r5, [r1], -ip
   15914:	strdeq	r5, [r1], -ip
   15918:	strdeq	r5, [r1], -ip
   1591c:	strdeq	r5, [r1], -ip
   15920:	strdeq	r5, [r1], -ip
   15924:	strdeq	r5, [r1], -ip
   15928:	strdeq	r5, [r1], -ip
   1592c:	strdeq	r5, [r1], -ip
   15930:	strdeq	r5, [r1], -ip
   15934:	strdeq	r5, [r1], -ip
   15938:	strdeq	r5, [r1], -ip
   1593c:	strdeq	r5, [r1], -ip
   15940:	strdeq	r5, [r1], -ip
   15944:	strdeq	r5, [r1], -ip
   15948:	strdeq	r5, [r1], -ip
   1594c:	strdeq	r5, [r1], -ip
   15950:	strdeq	r5, [r1], -ip
   15954:	strdeq	r5, [r1], -ip
   15958:	strdeq	r5, [r1], -ip
   1595c:	strdeq	r5, [r1], -ip
   15960:	strdeq	r5, [r1], -ip
   15964:	strdeq	r5, [r1], -ip
   15968:	strdeq	r5, [r1], -r8
   1596c:	strdeq	r5, [r1], -r8
   15970:	strdeq	r5, [r1], -r8
   15974:	strdeq	r5, [r1], -r8
   15978:	strdeq	r5, [r1], -r8
   1597c:	strdeq	r5, [r1], -r8
   15980:	strdeq	r5, [r1], -ip
   15984:	strdeq	r5, [r1], -ip
   15988:	strdeq	r5, [r1], -ip
   1598c:	strdeq	r5, [r1], -ip
   15990:	strdeq	r5, [r1], -ip
   15994:	strdeq	r5, [r1], -ip
   15998:	strdeq	r5, [r1], -ip
   1599c:	strdeq	r5, [r1], -ip
   159a0:	strdeq	r5, [r1], -ip
   159a4:	strdeq	r5, [r1], -ip
   159a8:	strdeq	r5, [r1], -ip
   159ac:	strdeq	r5, [r1], -ip
   159b0:	strdeq	r5, [r1], -ip
   159b4:	strdeq	r5, [r1], -ip
   159b8:	strdeq	r5, [r1], -ip
   159bc:	strdeq	r5, [r1], -ip
   159c0:	strdeq	r5, [r1], -ip
   159c4:	strdeq	r5, [r1], -ip
   159c8:	strdeq	r5, [r1], -ip
   159cc:	strdeq	r5, [r1], -ip
   159d0:	strdeq	r5, [r1], -ip
   159d4:	strdeq	r5, [r1], -ip
   159d8:	strdeq	r5, [r1], -ip
   159dc:	strdeq	r5, [r1], -ip
   159e0:	strdeq	r5, [r1], -ip
   159e4:	strdeq	r5, [r1], -ip
   159e8:	strdeq	r5, [r1], -r8
   159ec:	strdeq	r5, [r1], -r8
   159f0:	strdeq	r5, [r1], -r8
   159f4:	strdeq	r5, [r1], -r8
   159f8:	bx	lr
   159fc:	mov	r0, #0
   15a00:	bx	lr
   15a04:	sub	r0, r0, #9
   15a08:	cmp	r0, #23
   15a0c:	movhi	r0, #0
   15a10:	bxhi	lr
   15a14:	bic	r0, r0, #-16777216	; 0xff000000
   15a18:	movw	r1, #31
   15a1c:	movt	r1, #128	; 0x80
   15a20:	mov	r2, #1
   15a24:	and	r0, r2, r1, lsr r0
   15a28:	bx	lr
   15a2c:	sub	r1, r0, #65	; 0x41
   15a30:	mov	r0, #0
   15a34:	cmp	r1, #26
   15a38:	movwcc	r0, #1
   15a3c:	bx	lr
   15a40:	mov	r1, r0
   15a44:	sub	r2, r0, #48	; 0x30
   15a48:	mov	r0, #1
   15a4c:	cmp	r2, #22
   15a50:	bhi	15a68 <__assert_fail@plt+0x481c>
   15a54:	mov	ip, #1
   15a58:	movw	r3, #1023	; 0x3ff
   15a5c:	movt	r3, #126	; 0x7e
   15a60:	tst	r3, ip, lsl r2
   15a64:	bxne	lr
   15a68:	sub	r1, r1, #97	; 0x61
   15a6c:	cmp	r1, #6
   15a70:	movcs	r0, #0
   15a74:	bxcs	lr
   15a78:	bx	lr
   15a7c:	sub	r1, r0, #65	; 0x41
   15a80:	cmp	r1, #26
   15a84:	addcc	r0, r0, #32
   15a88:	bx	lr
   15a8c:	sub	r1, r0, #97	; 0x61
   15a90:	cmp	r1, #26
   15a94:	subcc	r0, r0, #32
   15a98:	bx	lr
   15a9c:	push	{r4, r5, r6, sl, fp, lr}
   15aa0:	add	fp, sp, #16
   15aa4:	mov	r4, r0
   15aa8:	bl	110a8 <__fpending@plt>
   15aac:	mov	r5, r0
   15ab0:	mov	r0, r4
   15ab4:	bl	110b4 <ferror_unlocked@plt>
   15ab8:	mov	r6, r0
   15abc:	mov	r0, r4
   15ac0:	bl	12be8 <__assert_fail@plt+0x199c>
   15ac4:	cmp	r6, #0
   15ac8:	beq	15ae8 <__assert_fail@plt+0x489c>
   15acc:	mvn	r4, #0
   15ad0:	cmp	r0, #0
   15ad4:	bne	15b1c <__assert_fail@plt+0x48d0>
   15ad8:	bl	11144 <__errno_location@plt>
   15adc:	mov	r1, #0
   15ae0:	str	r1, [r0]
   15ae4:	b	15b1c <__assert_fail@plt+0x48d0>
   15ae8:	cmp	r0, #0
   15aec:	mov	r4, r0
   15af0:	mvnne	r4, #0
   15af4:	cmp	r5, #0
   15af8:	bne	15b1c <__assert_fail@plt+0x48d0>
   15afc:	cmp	r0, #0
   15b00:	beq	15b1c <__assert_fail@plt+0x48d0>
   15b04:	bl	11144 <__errno_location@plt>
   15b08:	ldr	r0, [r0]
   15b0c:	subs	r4, r0, #9
   15b10:	mvnne	r4, #0
   15b14:	mov	r0, r4
   15b18:	pop	{r4, r5, r6, sl, fp, pc}
   15b1c:	mov	r0, r4
   15b20:	pop	{r4, r5, r6, sl, fp, pc}
   15b24:	push	{r4, r5, fp, lr}
   15b28:	add	fp, sp, #8
   15b2c:	mov	r2, r0
   15b30:	ldrd	r4, [r0, #16]
   15b34:	mov	r0, #0
   15b38:	cmp	r5, r4
   15b3c:	pophi	{r4, r5, fp, pc}
   15b40:	ldmib	r2, {r3, r5}
   15b44:	subs	r3, r5, r3
   15b48:	strne	r3, [r1]
   15b4c:	ldrne	r0, [r2, #4]
   15b50:	pop	{r4, r5, fp, pc}
   15b54:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15b58:	add	fp, sp, #24
   15b5c:	sub	sp, sp, #8
   15b60:	sub	sp, sp, #4096	; 0x1000
   15b64:	mov	r8, #0
   15b68:	cmp	r1, #0
   15b6c:	beq	15c8c <__assert_fail@plt+0x4a40>
   15b70:	mov	r6, r1
   15b74:	mov	r5, r0
   15b78:	bl	15dcc <__assert_fail@plt+0x4b80>
   15b7c:	mov	r7, r0
   15b80:	add	r9, sp, #4
   15b84:	cmp	r7, #0
   15b88:	beq	15bf4 <__assert_fail@plt+0x49a8>
   15b8c:	mov	r0, r5
   15b90:	mov	r1, r9
   15b94:	bl	15b24 <__assert_fail@plt+0x48d8>
   15b98:	cmp	r0, #0
   15b9c:	ldrne	r4, [sp, #4]
   15ba0:	cmpne	r4, #0
   15ba4:	beq	15bcc <__assert_fail@plt+0x4980>
   15ba8:	cmp	r4, r6
   15bac:	movcs	r4, r6
   15bb0:	mov	r0, r5
   15bb4:	mov	r1, r4
   15bb8:	bl	15c98 <__assert_fail@plt+0x4a4c>
   15bbc:	subs	r6, r6, r4
   15bc0:	beq	15c8c <__assert_fail@plt+0x4a40>
   15bc4:	subs	r7, r7, r4
   15bc8:	beq	15bf4 <__assert_fail@plt+0x49a8>
   15bcc:	mov	r0, r5
   15bd0:	bl	11168 <fgetc@plt>
   15bd4:	cmn	r0, #1
   15bd8:	beq	15c78 <__assert_fail@plt+0x4a2c>
   15bdc:	subs	r6, r6, #1
   15be0:	mov	r0, r6
   15be4:	movwne	r0, #1
   15be8:	sub	r7, r7, r0
   15bec:	bne	15b84 <__assert_fail@plt+0x4938>
   15bf0:	b	15c8c <__assert_fail@plt+0x4a40>
   15bf4:	mov	r0, r5
   15bf8:	bl	11180 <fileno@plt>
   15bfc:	cmp	r0, #0
   15c00:	blt	15c3c <__assert_fail@plt+0x49f0>
   15c04:	mov	r4, #1
   15c08:	str	r4, [sp]
   15c0c:	mov	r2, #0
   15c10:	mov	r3, #0
   15c14:	bl	11084 <lseek64@plt>
   15c18:	cmp	r1, #0
   15c1c:	blt	15c3c <__assert_fail@plt+0x49f0>
   15c20:	str	r4, [sp]
   15c24:	mov	r0, r5
   15c28:	mov	r2, r6
   15c2c:	mov	r3, #0
   15c30:	bl	12d18 <__assert_fail@plt+0x1acc>
   15c34:	mov	r8, r0
   15c38:	b	15c8c <__assert_fail@plt+0x4a40>
   15c3c:	add	r4, sp, #4
   15c40:	cmp	r6, #4096	; 0x1000
   15c44:	mov	r7, r6
   15c48:	movcs	r7, #4096	; 0x1000
   15c4c:	mov	r0, r4
   15c50:	mov	r1, #1
   15c54:	mov	r2, r7
   15c58:	mov	r3, r5
   15c5c:	bl	1109c <fread@plt>
   15c60:	cmp	r0, r7
   15c64:	subcs	r6, r6, r7
   15c68:	bcc	15c78 <__assert_fail@plt+0x4a2c>
   15c6c:	cmp	r6, #0
   15c70:	bne	15c40 <__assert_fail@plt+0x49f4>
   15c74:	b	15c8c <__assert_fail@plt+0x4a40>
   15c78:	mov	r0, r5
   15c7c:	bl	10ff4 <ferror@plt>
   15c80:	mov	r8, r0
   15c84:	cmp	r0, #0
   15c88:	mvnne	r8, #0
   15c8c:	mov	r0, r8
   15c90:	sub	sp, fp, #24
   15c94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15c98:	ldr	r2, [r0, #4]
   15c9c:	add	r1, r2, r1
   15ca0:	str	r1, [r0, #4]
   15ca4:	bx	lr
   15ca8:	push	{fp, lr}
   15cac:	mov	fp, sp
   15cb0:	bl	11144 <__errno_location@plt>
   15cb4:	mov	r1, #12
   15cb8:	str	r1, [r0]
   15cbc:	mov	r0, #0
   15cc0:	pop	{fp, pc}
   15cc4:	b	156f4 <__assert_fail@plt+0x44a8>
   15cc8:	cmp	r1, #0
   15ccc:	orreq	r1, r1, #1
   15cd0:	b	15724 <__assert_fail@plt+0x44d8>
   15cd4:	b	156a0 <__assert_fail@plt+0x4454>
   15cd8:	clz	r3, r2
   15cdc:	lsr	ip, r3, #5
   15ce0:	clz	r3, r1
   15ce4:	lsr	r3, r3, #5
   15ce8:	orrs	r3, r3, ip
   15cec:	movwne	r1, #1
   15cf0:	movwne	r2, #1
   15cf4:	b	15d90 <__assert_fail@plt+0x4b44>
   15cf8:	push	{fp, lr}
   15cfc:	mov	fp, sp
   15d00:	mov	r0, #14
   15d04:	bl	111d4 <nl_langinfo@plt>
   15d08:	movw	r1, #26787	; 0x68a3
   15d0c:	movt	r1, #1
   15d10:	cmp	r0, #0
   15d14:	movne	r1, r0
   15d18:	ldrb	r2, [r1]
   15d1c:	movw	r0, #28629	; 0x6fd5
   15d20:	movt	r0, #1
   15d24:	cmp	r2, #0
   15d28:	movne	r0, r1
   15d2c:	pop	{fp, pc}
   15d30:	push	{r4, r5, r6, r7, fp, lr}
   15d34:	add	fp, sp, #16
   15d38:	sub	sp, sp, #8
   15d3c:	mov	r7, r2
   15d40:	mov	r4, r1
   15d44:	add	r5, sp, #4
   15d48:	cmp	r0, #0
   15d4c:	movne	r5, r0
   15d50:	mov	r0, r5
   15d54:	bl	110c0 <mbrtowc@plt>
   15d58:	mov	r6, r0
   15d5c:	cmp	r7, #0
   15d60:	beq	15d84 <__assert_fail@plt+0x4b38>
   15d64:	cmn	r6, #2
   15d68:	bcc	15d84 <__assert_fail@plt+0x4b38>
   15d6c:	mov	r0, #0
   15d70:	bl	15e08 <__assert_fail@plt+0x4bbc>
   15d74:	cmp	r0, #0
   15d78:	ldrbeq	r0, [r4]
   15d7c:	streq	r0, [r5]
   15d80:	moveq	r6, #1
   15d84:	mov	r0, r6
   15d88:	sub	sp, fp, #16
   15d8c:	pop	{r4, r5, r6, r7, fp, pc}
   15d90:	cmp	r2, #0
   15d94:	beq	15dc4 <__assert_fail@plt+0x4b78>
   15d98:	mvn	r3, #0
   15d9c:	udiv	r3, r3, r2
   15da0:	cmp	r3, r1
   15da4:	bcs	15dc4 <__assert_fail@plt+0x4b78>
   15da8:	push	{fp, lr}
   15dac:	mov	fp, sp
   15db0:	bl	11144 <__errno_location@plt>
   15db4:	mov	r1, #12
   15db8:	str	r1, [r0]
   15dbc:	mov	r0, #0
   15dc0:	pop	{fp, pc}
   15dc4:	mul	r1, r2, r1
   15dc8:	b	15724 <__assert_fail@plt+0x44d8>
   15dcc:	ldrd	r2, [r0, #16]
   15dd0:	mov	r1, #0
   15dd4:	cmp	r3, r2
   15dd8:	bhi	15e00 <__assert_fail@plt+0x4bb4>
   15ddc:	ldmib	r0, {r1, r2}
   15de0:	sub	r1, r2, r1
   15de4:	ldrb	r3, [r0, #1]
   15de8:	mov	r2, #0
   15dec:	tst	r3, #1
   15df0:	ldrne	r2, [r0, #36]	; 0x24
   15df4:	ldrne	r0, [r0, #44]	; 0x2c
   15df8:	subne	r2, r0, r2
   15dfc:	add	r1, r1, r2
   15e00:	mov	r0, r1
   15e04:	bx	lr
   15e08:	push	{r4, sl, fp, lr}
   15e0c:	add	fp, sp, #8
   15e10:	sub	sp, sp, #264	; 0x108
   15e14:	add	r1, sp, #7
   15e18:	movw	r2, #257	; 0x101
   15e1c:	bl	15e6c <__assert_fail@plt+0x4c20>
   15e20:	mov	r4, #0
   15e24:	cmp	r0, #0
   15e28:	bne	15e60 <__assert_fail@plt+0x4c14>
   15e2c:	add	r0, sp, #7
   15e30:	movw	r1, #28635	; 0x6fdb
   15e34:	movt	r1, #1
   15e38:	bl	10fb8 <strcmp@plt>
   15e3c:	cmp	r0, #0
   15e40:	beq	15e60 <__assert_fail@plt+0x4c14>
   15e44:	add	r0, sp, #7
   15e48:	movw	r1, #28637	; 0x6fdd
   15e4c:	movt	r1, #1
   15e50:	bl	10fb8 <strcmp@plt>
   15e54:	mov	r4, r0
   15e58:	cmp	r0, #0
   15e5c:	movwne	r4, #1
   15e60:	mov	r0, r4
   15e64:	sub	sp, fp, #8
   15e68:	pop	{r4, sl, fp, pc}
   15e6c:	b	15e70 <__assert_fail@plt+0x4c24>
   15e70:	push	{r4, r5, r6, r7, fp, lr}
   15e74:	add	fp, sp, #16
   15e78:	mov	r6, r2
   15e7c:	mov	r4, r1
   15e80:	bl	15f0c <__assert_fail@plt+0x4cc0>
   15e84:	cmp	r0, #0
   15e88:	beq	15eb8 <__assert_fail@plt+0x4c6c>
   15e8c:	mov	r7, r0
   15e90:	bl	1112c <strlen@plt>
   15e94:	cmp	r0, r6
   15e98:	bcs	15ed8 <__assert_fail@plt+0x4c8c>
   15e9c:	add	r2, r0, #1
   15ea0:	mov	r0, r4
   15ea4:	mov	r1, r7
   15ea8:	bl	1100c <memcpy@plt>
   15eac:	mov	r5, #0
   15eb0:	mov	r0, r5
   15eb4:	pop	{r4, r5, r6, r7, fp, pc}
   15eb8:	mov	r5, #22
   15ebc:	cmp	r6, #0
   15ec0:	movne	r0, #0
   15ec4:	strbne	r0, [r4]
   15ec8:	movne	r0, r5
   15ecc:	popne	{r4, r5, r6, r7, fp, pc}
   15ed0:	mov	r0, r5
   15ed4:	pop	{r4, r5, r6, r7, fp, pc}
   15ed8:	mov	r5, #34	; 0x22
   15edc:	cmp	r6, #0
   15ee0:	beq	15f00 <__assert_fail@plt+0x4cb4>
   15ee4:	sub	r6, r6, #1
   15ee8:	mov	r0, r4
   15eec:	mov	r1, r7
   15ef0:	mov	r2, r6
   15ef4:	bl	1100c <memcpy@plt>
   15ef8:	mov	r0, #0
   15efc:	strb	r0, [r4, r6]
   15f00:	mov	r0, r5
   15f04:	pop	{r4, r5, r6, r7, fp, pc}
   15f08:	b	15f0c <__assert_fail@plt+0x4cc0>
   15f0c:	mov	r1, #0
   15f10:	b	111bc <setlocale@plt>
   15f14:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15f18:	mov	r7, r0
   15f1c:	ldr	r6, [pc, #72]	; 15f6c <__assert_fail@plt+0x4d20>
   15f20:	ldr	r5, [pc, #72]	; 15f70 <__assert_fail@plt+0x4d24>
   15f24:	add	r6, pc, r6
   15f28:	add	r5, pc, r5
   15f2c:	sub	r6, r6, r5
   15f30:	mov	r8, r1
   15f34:	mov	r9, r2
   15f38:	bl	10f80 <calloc@plt-0x20>
   15f3c:	asrs	r6, r6, #2
   15f40:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f44:	mov	r4, #0
   15f48:	add	r4, r4, #1
   15f4c:	ldr	r3, [r5], #4
   15f50:	mov	r2, r9
   15f54:	mov	r1, r8
   15f58:	mov	r0, r7
   15f5c:	blx	r3
   15f60:	cmp	r6, r4
   15f64:	bne	15f48 <__assert_fail@plt+0x4cfc>
   15f68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f6c:	andeq	r1, r1, r0, ror #31
   15f70:	ldrdeq	r1, [r1], -r8
   15f74:	bx	lr
   15f78:	ldr	r3, [pc, #12]	; 15f8c <__assert_fail@plt+0x4d40>
   15f7c:	mov	r1, #0
   15f80:	add	r3, pc, r3
   15f84:	ldr	r2, [r3]
   15f88:	b	11150 <__cxa_atexit@plt>
   15f8c:	andeq	r2, r1, r4, ror r1

Disassembly of section .fini:

00015f90 <.fini>:
   15f90:	push	{r3, lr}
   15f94:	pop	{r3, pc}
