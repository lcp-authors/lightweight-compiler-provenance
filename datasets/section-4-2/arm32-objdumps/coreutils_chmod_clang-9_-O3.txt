
../repos/coreutils/src/chmod:     file format elf32-littlearm


Disassembly of section .init:

0001109c <.init>:
   1109c:	push	{r3, lr}
   110a0:	bl	113ec <__assert_fail@plt+0x48>
   110a4:	pop	{r3, pc}

Disassembly of section .plt:

000110a8 <fstatfs64@plt-0x14>:
   110a8:	push	{lr}		; (str lr, [sp, #-4]!)
   110ac:	ldr	lr, [pc, #4]	; 110b8 <fstatfs64@plt-0x4>
   110b0:	add	lr, pc, lr
   110b4:	ldr	pc, [lr, #8]!
   110b8:	andeq	sl, r1, r8, asr #30

000110bc <fstatfs64@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #106496	; 0x1a000
   110c4:	ldr	pc, [ip, #3912]!	; 0xf48

000110c8 <calloc@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #106496	; 0x1a000
   110d0:	ldr	pc, [ip, #3904]!	; 0xf40

000110d4 <fputs_unlocked@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #106496	; 0x1a000
   110dc:	ldr	pc, [ip, #3896]!	; 0xf38

000110e0 <raise@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #106496	; 0x1a000
   110e8:	ldr	pc, [ip, #3888]!	; 0xf30

000110ec <strcmp@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #106496	; 0x1a000
   110f4:	ldr	pc, [ip, #3880]!	; 0xf28

000110f8 <fflush@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #106496	; 0x1a000
   11100:	ldr	pc, [ip, #3872]!	; 0xf20

00011104 <memmove@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #106496	; 0x1a000
   1110c:	ldr	pc, [ip, #3864]!	; 0xf18

00011110 <free@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #106496	; 0x1a000
   11118:	ldr	pc, [ip, #3856]!	; 0xf10

0001111c <_exit@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #106496	; 0x1a000
   11124:	ldr	pc, [ip, #3848]!	; 0xf08

00011128 <memcpy@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #106496	; 0x1a000
   11130:	ldr	pc, [ip, #3840]!	; 0xf00

00011134 <mbsinit@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #106496	; 0x1a000
   1113c:	ldr	pc, [ip, #3832]!	; 0xef8

00011140 <dcgettext@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #106496	; 0x1a000
   11148:	ldr	pc, [ip, #3824]!	; 0xef0

0001114c <realloc@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #106496	; 0x1a000
   11154:	ldr	pc, [ip, #3816]!	; 0xee8

00011158 <textdomain@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #106496	; 0x1a000
   11160:	ldr	pc, [ip, #3808]!	; 0xee0

00011164 <__fxstatat64@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #106496	; 0x1a000
   1116c:	ldr	pc, [ip, #3800]!	; 0xed8

00011170 <iswprint@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #106496	; 0x1a000
   11178:	ldr	pc, [ip, #3792]!	; 0xed0

0001117c <__fxstat64@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #106496	; 0x1a000
   11184:	ldr	pc, [ip, #3784]!	; 0xec8

00011188 <fwrite@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #106496	; 0x1a000
   11190:	ldr	pc, [ip, #3776]!	; 0xec0

00011194 <lseek64@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #106496	; 0x1a000
   1119c:	ldr	pc, [ip, #3768]!	; 0xeb8

000111a0 <__ctype_get_mb_cur_max@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #106496	; 0x1a000
   111a8:	ldr	pc, [ip, #3760]!	; 0xeb0

000111ac <__fpending@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #106496	; 0x1a000
   111b4:	ldr	pc, [ip, #3752]!	; 0xea8

000111b8 <mbrtowc@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #106496	; 0x1a000
   111c0:	ldr	pc, [ip, #3744]!	; 0xea0

000111c4 <error@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #106496	; 0x1a000
   111cc:	ldr	pc, [ip, #3736]!	; 0xe98

000111d0 <open64@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #106496	; 0x1a000
   111d8:	ldr	pc, [ip, #3728]!	; 0xe90

000111dc <malloc@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #106496	; 0x1a000
   111e4:	ldr	pc, [ip, #3720]!	; 0xe88

000111e8 <__libc_start_main@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #106496	; 0x1a000
   111f0:	ldr	pc, [ip, #3712]!	; 0xe80

000111f4 <__freading@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #106496	; 0x1a000
   111fc:	ldr	pc, [ip, #3704]!	; 0xe78

00011200 <__gmon_start__@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #106496	; 0x1a000
   11208:	ldr	pc, [ip, #3696]!	; 0xe70

0001120c <getopt_long@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #106496	; 0x1a000
   11214:	ldr	pc, [ip, #3688]!	; 0xe68

00011218 <__ctype_b_loc@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #106496	; 0x1a000
   11220:	ldr	pc, [ip, #3680]!	; 0xe60

00011224 <exit@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #106496	; 0x1a000
   1122c:	ldr	pc, [ip, #3672]!	; 0xe58

00011230 <bcmp@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #106496	; 0x1a000
   11238:	ldr	pc, [ip, #3664]!	; 0xe50

0001123c <strlen@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #106496	; 0x1a000
   11244:	ldr	pc, [ip, #3656]!	; 0xe48

00011248 <openat64@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #106496	; 0x1a000
   11250:	ldr	pc, [ip, #3648]!	; 0xe40

00011254 <fchmodat@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #106496	; 0x1a000
   1125c:	ldr	pc, [ip, #3640]!	; 0xe38

00011260 <__errno_location@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #106496	; 0x1a000
   11268:	ldr	pc, [ip, #3632]!	; 0xe30

0001126c <__sprintf_chk@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #106496	; 0x1a000
   11274:	ldr	pc, [ip, #3624]!	; 0xe28

00011278 <__cxa_atexit@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #106496	; 0x1a000
   11280:	ldr	pc, [ip, #3616]!	; 0xe20

00011284 <memset@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #106496	; 0x1a000
   1128c:	ldr	pc, [ip, #3608]!	; 0xe18

00011290 <__printf_chk@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #106496	; 0x1a000
   11298:	ldr	pc, [ip, #3600]!	; 0xe10

0001129c <fileno@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #106496	; 0x1a000
   112a4:	ldr	pc, [ip, #3592]!	; 0xe08

000112a8 <__fprintf_chk@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #106496	; 0x1a000
   112b0:	ldr	pc, [ip, #3584]!	; 0xe00

000112b4 <fclose@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #106496	; 0x1a000
   112bc:	ldr	pc, [ip, #3576]!	; 0xdf8

000112c0 <fseeko64@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #106496	; 0x1a000
   112c8:	ldr	pc, [ip, #3568]!	; 0xdf0

000112cc <fcntl64@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #106496	; 0x1a000
   112d4:	ldr	pc, [ip, #3560]!	; 0xde8

000112d8 <setlocale@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #106496	; 0x1a000
   112e0:	ldr	pc, [ip, #3552]!	; 0xde0

000112e4 <strrchr@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #106496	; 0x1a000
   112ec:	ldr	pc, [ip, #3544]!	; 0xdd8

000112f0 <nl_langinfo@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #106496	; 0x1a000
   112f8:	ldr	pc, [ip, #3536]!	; 0xdd0

000112fc <readdir64@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #106496	; 0x1a000
   11304:	ldr	pc, [ip, #3528]!	; 0xdc8

00011308 <fdopendir@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #106496	; 0x1a000
   11310:	ldr	pc, [ip, #3520]!	; 0xdc0

00011314 <dirfd@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #106496	; 0x1a000
   1131c:	ldr	pc, [ip, #3512]!	; 0xdb8

00011320 <fchdir@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #106496	; 0x1a000
   11328:	ldr	pc, [ip, #3504]!	; 0xdb0

0001132c <qsort@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #106496	; 0x1a000
   11334:	ldr	pc, [ip, #3496]!	; 0xda8

00011338 <bindtextdomain@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #106496	; 0x1a000
   11340:	ldr	pc, [ip, #3488]!	; 0xda0

00011344 <umask@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #106496	; 0x1a000
   1134c:	ldr	pc, [ip, #3480]!	; 0xd98

00011350 <chmod@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #106496	; 0x1a000
   11358:	ldr	pc, [ip, #3472]!	; 0xd90

0001135c <__xstat64@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #106496	; 0x1a000
   11364:	ldr	pc, [ip, #3464]!	; 0xd88

00011368 <strncmp@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #106496	; 0x1a000
   11370:	ldr	pc, [ip, #3456]!	; 0xd80

00011374 <abort@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #106496	; 0x1a000
   1137c:	ldr	pc, [ip, #3448]!	; 0xd78

00011380 <close@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #106496	; 0x1a000
   11388:	ldr	pc, [ip, #3440]!	; 0xd70

0001138c <__lxstat64@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #106496	; 0x1a000
   11394:	ldr	pc, [ip, #3432]!	; 0xd68

00011398 <closedir@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #106496	; 0x1a000
   113a0:	ldr	pc, [ip, #3424]!	; 0xd60

000113a4 <__assert_fail@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #106496	; 0x1a000
   113ac:	ldr	pc, [ip, #3416]!	; 0xd58

Disassembly of section .text:

000113b0 <.text>:
   113b0:	mov	fp, #0
   113b4:	mov	lr, #0
   113b8:	pop	{r1}		; (ldr r1, [sp], #4)
   113bc:	mov	r2, sp
   113c0:	push	{r2}		; (str r2, [sp, #-4]!)
   113c4:	push	{r0}		; (str r0, [sp, #-4]!)
   113c8:	ldr	ip, [pc, #16]	; 113e0 <__assert_fail@plt+0x3c>
   113cc:	push	{ip}		; (str ip, [sp, #-4]!)
   113d0:	ldr	r0, [pc, #12]	; 113e4 <__assert_fail@plt+0x40>
   113d4:	ldr	r3, [pc, #12]	; 113e8 <__assert_fail@plt+0x44>
   113d8:	bl	111e8 <__libc_start_main@plt>
   113dc:	bl	11374 <abort@plt>
   113e0:	andeq	sl, r1, r4, lsr #14
   113e4:	andeq	r1, r1, r8, ror r7
   113e8:	andeq	sl, r1, r4, asr #13
   113ec:	ldr	r3, [pc, #20]	; 11408 <__assert_fail@plt+0x64>
   113f0:	ldr	r2, [pc, #20]	; 1140c <__assert_fail@plt+0x68>
   113f4:	add	r3, pc, r3
   113f8:	ldr	r2, [r3, r2]
   113fc:	cmp	r2, #0
   11400:	bxeq	lr
   11404:	b	11200 <__gmon_start__@plt>
   11408:	andeq	sl, r1, r4, lsl #24
   1140c:	andeq	r0, r0, r8, lsl #2
   11410:	ldr	r0, [pc, #24]	; 11430 <__assert_fail@plt+0x8c>
   11414:	ldr	r3, [pc, #24]	; 11434 <__assert_fail@plt+0x90>
   11418:	cmp	r3, r0
   1141c:	bxeq	lr
   11420:	ldr	r3, [pc, #16]	; 11438 <__assert_fail@plt+0x94>
   11424:	cmp	r3, #0
   11428:	bxeq	lr
   1142c:	bx	r3
   11430:	andeq	ip, r2, r8, ror #2
   11434:	andeq	ip, r2, r8, ror #2
   11438:	andeq	r0, r0, r0
   1143c:	ldr	r0, [pc, #36]	; 11468 <__assert_fail@plt+0xc4>
   11440:	ldr	r1, [pc, #36]	; 1146c <__assert_fail@plt+0xc8>
   11444:	sub	r1, r1, r0
   11448:	asr	r1, r1, #2
   1144c:	add	r1, r1, r1, lsr #31
   11450:	asrs	r1, r1, #1
   11454:	bxeq	lr
   11458:	ldr	r3, [pc, #16]	; 11470 <__assert_fail@plt+0xcc>
   1145c:	cmp	r3, #0
   11460:	bxeq	lr
   11464:	bx	r3
   11468:	andeq	ip, r2, r8, ror #2
   1146c:	andeq	ip, r2, r8, ror #2
   11470:	andeq	r0, r0, r0
   11474:	push	{r4, lr}
   11478:	ldr	r4, [pc, #24]	; 11498 <__assert_fail@plt+0xf4>
   1147c:	ldrb	r3, [r4]
   11480:	cmp	r3, #0
   11484:	popne	{r4, pc}
   11488:	bl	11410 <__assert_fail@plt+0x6c>
   1148c:	mov	r3, #1
   11490:	strb	r3, [r4]
   11494:	pop	{r4, pc}
   11498:	andeq	ip, r2, r4, lsl #3
   1149c:	b	1143c <__assert_fail@plt+0x98>
   114a0:	push	{fp, lr}
   114a4:	mov	fp, sp
   114a8:	sub	sp, sp, #64	; 0x40
   114ac:	mov	r4, r0
   114b0:	cmp	r0, #0
   114b4:	bne	11734 <__assert_fail@plt+0x390>
   114b8:	movw	r1, #42867	; 0xa773
   114bc:	mov	r0, #0
   114c0:	mov	r2, #5
   114c4:	movt	r1, #1
   114c8:	bl	11140 <dcgettext@plt>
   114cc:	mov	r1, r0
   114d0:	movw	r0, #49584	; 0xc1b0
   114d4:	movt	r0, #2
   114d8:	ldr	r2, [r0]
   114dc:	mov	r0, #1
   114e0:	mov	r3, r2
   114e4:	str	r2, [sp]
   114e8:	bl	11290 <__printf_chk@plt>
   114ec:	movw	r1, #43002	; 0xa7fa
   114f0:	mov	r0, #0
   114f4:	mov	r2, #5
   114f8:	movt	r1, #1
   114fc:	bl	11140 <dcgettext@plt>
   11500:	movw	r7, #49532	; 0xc17c
   11504:	movt	r7, #2
   11508:	ldr	r1, [r7]
   1150c:	bl	110d4 <fputs_unlocked@plt>
   11510:	movw	r1, #43107	; 0xa863
   11514:	mov	r0, #0
   11518:	mov	r2, #5
   1151c:	movt	r1, #1
   11520:	bl	11140 <dcgettext@plt>
   11524:	ldr	r1, [r7]
   11528:	bl	110d4 <fputs_unlocked@plt>
   1152c:	movw	r1, #43308	; 0xa92c
   11530:	mov	r0, #0
   11534:	mov	r2, #5
   11538:	movt	r1, #1
   1153c:	bl	11140 <dcgettext@plt>
   11540:	ldr	r1, [r7]
   11544:	bl	110d4 <fputs_unlocked@plt>
   11548:	movw	r1, #43436	; 0xa9ac
   1154c:	mov	r0, #0
   11550:	mov	r2, #5
   11554:	movt	r1, #1
   11558:	bl	11140 <dcgettext@plt>
   1155c:	ldr	r1, [r7]
   11560:	bl	110d4 <fputs_unlocked@plt>
   11564:	movw	r1, #43502	; 0xa9ee
   11568:	mov	r0, #0
   1156c:	mov	r2, #5
   11570:	movt	r1, #1
   11574:	bl	11140 <dcgettext@plt>
   11578:	ldr	r1, [r7]
   1157c:	bl	110d4 <fputs_unlocked@plt>
   11580:	movw	r1, #43569	; 0xaa31
   11584:	mov	r0, #0
   11588:	mov	r2, #5
   1158c:	movt	r1, #1
   11590:	bl	11140 <dcgettext@plt>
   11594:	ldr	r1, [r7]
   11598:	bl	110d4 <fputs_unlocked@plt>
   1159c:	movw	r1, #43614	; 0xaa5e
   115a0:	mov	r0, #0
   115a4:	mov	r2, #5
   115a8:	movt	r1, #1
   115ac:	bl	11140 <dcgettext@plt>
   115b0:	ldr	r1, [r7]
   115b4:	bl	110d4 <fputs_unlocked@plt>
   115b8:	movw	r1, #43668	; 0xaa94
   115bc:	mov	r0, #0
   115c0:	mov	r2, #5
   115c4:	movt	r1, #1
   115c8:	bl	11140 <dcgettext@plt>
   115cc:	ldr	r1, [r7]
   115d0:	bl	110d4 <fputs_unlocked@plt>
   115d4:	movw	r0, #45352	; 0xb128
   115d8:	mov	r2, #48	; 0x30
   115dc:	add	r6, sp, #8
   115e0:	movw	r5, #43743	; 0xaadf
   115e4:	movt	r0, #1
   115e8:	movt	r5, #1
   115ec:	add	r1, r0, #32
   115f0:	add	r3, r0, #16
   115f4:	vld1.64	{d18-d19}, [r0], r2
   115f8:	vld1.64	{d16-d17}, [r1]
   115fc:	vld1.64	{d20-d21}, [r3]
   11600:	vldr	d22, [r0]
   11604:	add	r1, r6, #32
   11608:	add	r0, r6, #16
   1160c:	vst1.64	{d16-d17}, [r1]
   11610:	movw	r1, #44017	; 0xabf1
   11614:	vst1.64	{d20-d21}, [r0]
   11618:	mov	r0, r6
   1161c:	movt	r1, #1
   11620:	vst1.64	{d18-d19}, [r0], r2
   11624:	vstr	d22, [r0]
   11628:	mov	r0, r5
   1162c:	bl	110ec <strcmp@plt>
   11630:	cmp	r0, #0
   11634:	ldrne	r1, [r6, #8]!
   11638:	cmpne	r1, #0
   1163c:	bne	11628 <__assert_fail@plt+0x284>
   11640:	movw	r1, #44112	; 0xac50
   11644:	ldr	r6, [r6, #4]
   11648:	mov	r0, #0
   1164c:	mov	r2, #5
   11650:	movt	r1, #1
   11654:	bl	11140 <dcgettext@plt>
   11658:	movw	r2, #43841	; 0xab41
   1165c:	movw	r3, #44135	; 0xac67
   11660:	mov	r1, r0
   11664:	mov	r0, #1
   11668:	movt	r2, #1
   1166c:	movt	r3, #1
   11670:	bl	11290 <__printf_chk@plt>
   11674:	cmp	r6, #0
   11678:	mov	r0, #5
   1167c:	mov	r1, #0
   11680:	moveq	r6, r5
   11684:	bl	112d8 <setlocale@plt>
   11688:	cmp	r0, #0
   1168c:	beq	116c4 <__assert_fail@plt+0x320>
   11690:	movw	r1, #44175	; 0xac8f
   11694:	mov	r2, #3
   11698:	movt	r1, #1
   1169c:	bl	11368 <strncmp@plt>
   116a0:	cmp	r0, #0
   116a4:	beq	116c4 <__assert_fail@plt+0x320>
   116a8:	movw	r1, #44179	; 0xac93
   116ac:	mov	r0, #0
   116b0:	mov	r2, #5
   116b4:	movt	r1, #1
   116b8:	bl	11140 <dcgettext@plt>
   116bc:	ldr	r1, [r7]
   116c0:	bl	110d4 <fputs_unlocked@plt>
   116c4:	movw	r1, #44250	; 0xacda
   116c8:	mov	r0, #0
   116cc:	mov	r2, #5
   116d0:	movt	r1, #1
   116d4:	bl	11140 <dcgettext@plt>
   116d8:	movw	r2, #44135	; 0xac67
   116dc:	mov	r1, r0
   116e0:	mov	r0, #1
   116e4:	mov	r3, r5
   116e8:	movt	r2, #1
   116ec:	bl	11290 <__printf_chk@plt>
   116f0:	movw	r1, #44277	; 0xacf5
   116f4:	mov	r0, #0
   116f8:	mov	r2, #5
   116fc:	movt	r1, #1
   11700:	bl	11140 <dcgettext@plt>
   11704:	mov	r1, r0
   11708:	movw	r0, #44045	; 0xac0d
   1170c:	movw	r3, #43106	; 0xa862
   11710:	cmp	r6, r5
   11714:	mov	r2, r6
   11718:	movt	r0, #1
   1171c:	movt	r3, #1
   11720:	moveq	r3, r0
   11724:	mov	r0, #1
   11728:	bl	11290 <__printf_chk@plt>
   1172c:	mov	r0, r4
   11730:	bl	11224 <exit@plt>
   11734:	movw	r0, #49528	; 0xc178
   11738:	movw	r1, #42828	; 0xa74c
   1173c:	mov	r2, #5
   11740:	movt	r0, #2
   11744:	movt	r1, #1
   11748:	ldr	r5, [r0]
   1174c:	mov	r0, #0
   11750:	bl	11140 <dcgettext@plt>
   11754:	mov	r2, r0
   11758:	movw	r0, #49584	; 0xc1b0
   1175c:	mov	r1, #1
   11760:	movt	r0, #2
   11764:	ldr	r3, [r0]
   11768:	mov	r0, r5
   1176c:	bl	112a8 <__fprintf_chk@plt>
   11770:	mov	r0, r4
   11774:	bl	11224 <exit@plt>
   11778:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1177c:	add	fp, sp, #28
   11780:	sub	sp, sp, #156	; 0x9c
   11784:	mov	r4, #0
   11788:	mov	r7, r0
   1178c:	mov	r5, r1
   11790:	str	r4, [sp, #36]	; 0x24
   11794:	ldr	r0, [r1]
   11798:	bl	16ff8 <__assert_fail@plt+0x5c54>
   1179c:	movw	r1, #43106	; 0xa862
   117a0:	mov	r0, #6
   117a4:	movt	r1, #1
   117a8:	bl	112d8 <setlocale@plt>
   117ac:	movw	r6, #43845	; 0xab45
   117b0:	movw	r1, #43749	; 0xaae5
   117b4:	movt	r6, #1
   117b8:	movt	r1, #1
   117bc:	mov	r0, r6
   117c0:	bl	11338 <bindtextdomain@plt>
   117c4:	mov	r0, r6
   117c8:	bl	11158 <textdomain@plt>
   117cc:	movw	r0, #10432	; 0x28c0
   117d0:	movt	r0, #1
   117d4:	bl	1a728 <__assert_fail@plt+0x9384>
   117d8:	movw	r0, #49544	; 0xc188
   117dc:	mov	r1, #0
   117e0:	str	r7, [sp, #28]
   117e4:	movt	r0, #2
   117e8:	str	r1, [sp, #32]
   117ec:	strb	r4, [r0, #2]
   117f0:	strh	r4, [r0]
   117f4:	mov	r0, #0
   117f8:	mov	r4, #0
   117fc:	str	r0, [sp, #24]
   11800:	mov	r0, #0
   11804:	b	1185c <__assert_fail@plt+0x4b8>
   11808:	add	r0, r6, #1
   1180c:	add	r1, sp, #36	; 0x24
   11810:	str	r0, [sp, #36]	; 0x24
   11814:	ldr	r0, [sp, #32]
   11818:	bl	19868 <__assert_fail@plt+0x84c4>
   1181c:	mov	r1, r0
   11820:	mov	r0, #44	; 0x2c
   11824:	str	r1, [sp, #32]
   11828:	add	r2, r9, #1
   1182c:	strb	r0, [r1, r4]
   11830:	add	r0, r1, r5
   11834:	mov	r1, r8
   11838:	bl	11128 <memcpy@plt>
   1183c:	movw	r0, #49544	; 0xc188
   11840:	mov	r5, r7
   11844:	ldr	r7, [sp, #28]
   11848:	mov	r1, #1
   1184c:	mov	r4, r6
   11850:	movt	r0, #2
   11854:	strb	r1, [r0]
   11858:	mov	r0, sl
   1185c:	movw	r2, #43773	; 0xaafd
   11860:	movw	r3, #45176	; 0xb078
   11864:	mov	sl, r0
   11868:	mov	r0, #0
   1186c:	mov	r1, r5
   11870:	movt	r2, #1
   11874:	movt	r3, #1
   11878:	str	r0, [sp]
   1187c:	mov	r0, r7
   11880:	bl	1120c <getopt_long@plt>
   11884:	add	r1, r0, #3
   11888:	lsr	r0, r1, #1
   1188c:	cmp	r0, #130	; 0x82
   11890:	bhi	127f0 <__assert_fail@plt+0x144c>
   11894:	add	r2, pc, #4
   11898:	mov	r0, #0
   1189c:	ldr	pc, [r2, r1, lsl #2]
   118a0:	andeq	r2, r1, r0, asr #14
   118a4:	muleq	r1, r4, r7
   118a8:	andeq	r1, r1, r4, ror sp
   118ac:	strdeq	r2, [r1], -r0
   118b0:	strdeq	r2, [r1], -r0
   118b4:	strdeq	r2, [r1], -r0
   118b8:	strdeq	r2, [r1], -r0
   118bc:	strdeq	r2, [r1], -r0
   118c0:	strdeq	r2, [r1], -r0
   118c4:	strdeq	r2, [r1], -r0
   118c8:	strdeq	r2, [r1], -r0
   118cc:	strdeq	r2, [r1], -r0
   118d0:	strdeq	r2, [r1], -r0
   118d4:	strdeq	r2, [r1], -r0
   118d8:	strdeq	r2, [r1], -r0
   118dc:	strdeq	r2, [r1], -r0
   118e0:	strdeq	r2, [r1], -r0
   118e4:	strdeq	r2, [r1], -r0
   118e8:	strdeq	r2, [r1], -r0
   118ec:	strdeq	r2, [r1], -r0
   118f0:	strdeq	r2, [r1], -r0
   118f4:	strdeq	r2, [r1], -r0
   118f8:	strdeq	r2, [r1], -r0
   118fc:	strdeq	r2, [r1], -r0
   11900:	strdeq	r2, [r1], -r0
   11904:	strdeq	r2, [r1], -r0
   11908:	strdeq	r2, [r1], -r0
   1190c:	strdeq	r2, [r1], -r0
   11910:	strdeq	r2, [r1], -r0
   11914:	strdeq	r2, [r1], -r0
   11918:	strdeq	r2, [r1], -r0
   1191c:	strdeq	r2, [r1], -r0
   11920:	strdeq	r2, [r1], -r0
   11924:	strdeq	r2, [r1], -r0
   11928:	strdeq	r2, [r1], -r0
   1192c:	strdeq	r2, [r1], -r0
   11930:	strdeq	r2, [r1], -r0
   11934:	strdeq	r2, [r1], -r0
   11938:	strdeq	r2, [r1], -r0
   1193c:	strdeq	r2, [r1], -r0
   11940:	strdeq	r2, [r1], -r0
   11944:	strdeq	r2, [r1], -r0
   11948:	strdeq	r2, [r1], -r0
   1194c:	strdeq	r2, [r1], -r0
   11950:	strdeq	r2, [r1], -r0
   11954:	strdeq	r2, [r1], -r0
   11958:			; <UNDEFINED> instruction: 0x00011cb8
   1195c:			; <UNDEFINED> instruction: 0x00011cb8
   11960:	strdeq	r2, [r1], -r0
   11964:	strdeq	r2, [r1], -r0
   11968:	strdeq	r2, [r1], -r0
   1196c:			; <UNDEFINED> instruction: 0x00011cb8
   11970:			; <UNDEFINED> instruction: 0x00011cb8
   11974:			; <UNDEFINED> instruction: 0x00011cb8
   11978:			; <UNDEFINED> instruction: 0x00011cb8
   1197c:			; <UNDEFINED> instruction: 0x00011cb8
   11980:			; <UNDEFINED> instruction: 0x00011cb8
   11984:			; <UNDEFINED> instruction: 0x00011cb8
   11988:			; <UNDEFINED> instruction: 0x00011cb8
   1198c:	strdeq	r2, [r1], -r0
   11990:	strdeq	r2, [r1], -r0
   11994:	strdeq	r2, [r1], -r0
   11998:	strdeq	r2, [r1], -r0
   1199c:	strdeq	r2, [r1], -r0
   119a0:			; <UNDEFINED> instruction: 0x00011cb8
   119a4:	strdeq	r2, [r1], -r0
   119a8:	strdeq	r2, [r1], -r0
   119ac:	strdeq	r2, [r1], -r0
   119b0:	strdeq	r2, [r1], -r0
   119b4:	strdeq	r2, [r1], -r0
   119b8:	strdeq	r2, [r1], -r0
   119bc:	strdeq	r2, [r1], -r0
   119c0:	strdeq	r2, [r1], -r0
   119c4:	strdeq	r2, [r1], -r0
   119c8:	strdeq	r2, [r1], -r0
   119cc:	strdeq	r2, [r1], -r0
   119d0:	strdeq	r2, [r1], -r0
   119d4:	strdeq	r2, [r1], -r0
   119d8:	strdeq	r2, [r1], -r0
   119dc:	strdeq	r2, [r1], -r0
   119e0:	strdeq	r2, [r1], -r0
   119e4:	strdeq	r2, [r1], -r0
   119e8:	strdeq	r2, [r1], -r0
   119ec:	strdeq	r2, [r1], -r0
   119f0:	strdeq	r2, [r1], -r0
   119f4:	andeq	r1, r1, r4, lsr #26
   119f8:	strdeq	r2, [r1], -r0
   119fc:	strdeq	r2, [r1], -r0
   11a00:	strdeq	r2, [r1], -r0
   11a04:	strdeq	r2, [r1], -r0
   11a08:	strdeq	r2, [r1], -r0
   11a0c:			; <UNDEFINED> instruction: 0x00011cb8
   11a10:	strdeq	r2, [r1], -r0
   11a14:	strdeq	r2, [r1], -r0
   11a18:	strdeq	r2, [r1], -r0
   11a1c:	strdeq	r2, [r1], -r0
   11a20:	strdeq	r2, [r1], -r0
   11a24:	strdeq	r2, [r1], -r0
   11a28:	strdeq	r2, [r1], -r0
   11a2c:	strdeq	r2, [r1], -r0
   11a30:			; <UNDEFINED> instruction: 0x00011cb8
   11a34:	strdeq	r2, [r1], -r0
   11a38:	andeq	r1, r1, ip, lsr sp
   11a3c:	strdeq	r2, [r1], -r0
   11a40:	strdeq	r2, [r1], -r0
   11a44:	andeq	r1, r1, ip, lsl #26
   11a48:			; <UNDEFINED> instruction: 0x00011cb8
   11a4c:	strdeq	r2, [r1], -r0
   11a50:	strdeq	r2, [r1], -r0
   11a54:	strdeq	r2, [r1], -r0
   11a58:	strdeq	r2, [r1], -r0
   11a5c:	strdeq	r2, [r1], -r0
   11a60:	strdeq	r2, [r1], -r0
   11a64:	strdeq	r2, [r1], -r0
   11a68:			; <UNDEFINED> instruction: 0x00011cb8
   11a6c:	strdeq	r2, [r1], -r0
   11a70:	strdeq	r2, [r1], -r0
   11a74:			; <UNDEFINED> instruction: 0x00011cb8
   11a78:			; <UNDEFINED> instruction: 0x00011cb8
   11a7c:			; <UNDEFINED> instruction: 0x00011cb8
   11a80:			; <UNDEFINED> instruction: 0x00011cb8
   11a84:	andeq	r1, r1, r0, lsl #26
   11a88:			; <UNDEFINED> instruction: 0x00011cb8
   11a8c:			; <UNDEFINED> instruction: 0x00011cb8
   11a90:	strdeq	r2, [r1], -r0
   11a94:	strdeq	r2, [r1], -r0
   11a98:	strdeq	r2, [r1], -r0
   11a9c:	strdeq	r2, [r1], -r0
   11aa0:	strdeq	r2, [r1], -r0
   11aa4:	strdeq	r2, [r1], -r0
   11aa8:	strdeq	r2, [r1], -r0
   11aac:	strdeq	r2, [r1], -r0
   11ab0:	strdeq	r2, [r1], -r0
   11ab4:	strdeq	r2, [r1], -r0
   11ab8:	strdeq	r2, [r1], -r0
   11abc:	strdeq	r2, [r1], -r0
   11ac0:	strdeq	r2, [r1], -r0
   11ac4:	strdeq	r2, [r1], -r0
   11ac8:	strdeq	r2, [r1], -r0
   11acc:	strdeq	r2, [r1], -r0
   11ad0:	strdeq	r2, [r1], -r0
   11ad4:	strdeq	r2, [r1], -r0
   11ad8:	strdeq	r2, [r1], -r0
   11adc:	strdeq	r2, [r1], -r0
   11ae0:	strdeq	r2, [r1], -r0
   11ae4:	strdeq	r2, [r1], -r0
   11ae8:	strdeq	r2, [r1], -r0
   11aec:	strdeq	r2, [r1], -r0
   11af0:	strdeq	r2, [r1], -r0
   11af4:	strdeq	r2, [r1], -r0
   11af8:	strdeq	r2, [r1], -r0
   11afc:	strdeq	r2, [r1], -r0
   11b00:	strdeq	r2, [r1], -r0
   11b04:	strdeq	r2, [r1], -r0
   11b08:	strdeq	r2, [r1], -r0
   11b0c:	strdeq	r2, [r1], -r0
   11b10:	strdeq	r2, [r1], -r0
   11b14:	strdeq	r2, [r1], -r0
   11b18:	strdeq	r2, [r1], -r0
   11b1c:	strdeq	r2, [r1], -r0
   11b20:	strdeq	r2, [r1], -r0
   11b24:	strdeq	r2, [r1], -r0
   11b28:	strdeq	r2, [r1], -r0
   11b2c:	strdeq	r2, [r1], -r0
   11b30:	strdeq	r2, [r1], -r0
   11b34:	strdeq	r2, [r1], -r0
   11b38:	strdeq	r2, [r1], -r0
   11b3c:	strdeq	r2, [r1], -r0
   11b40:	strdeq	r2, [r1], -r0
   11b44:	strdeq	r2, [r1], -r0
   11b48:	strdeq	r2, [r1], -r0
   11b4c:	strdeq	r2, [r1], -r0
   11b50:	strdeq	r2, [r1], -r0
   11b54:	strdeq	r2, [r1], -r0
   11b58:	strdeq	r2, [r1], -r0
   11b5c:	strdeq	r2, [r1], -r0
   11b60:	strdeq	r2, [r1], -r0
   11b64:	strdeq	r2, [r1], -r0
   11b68:	strdeq	r2, [r1], -r0
   11b6c:	strdeq	r2, [r1], -r0
   11b70:	strdeq	r2, [r1], -r0
   11b74:	strdeq	r2, [r1], -r0
   11b78:	strdeq	r2, [r1], -r0
   11b7c:	strdeq	r2, [r1], -r0
   11b80:	strdeq	r2, [r1], -r0
   11b84:	strdeq	r2, [r1], -r0
   11b88:	strdeq	r2, [r1], -r0
   11b8c:	strdeq	r2, [r1], -r0
   11b90:	strdeq	r2, [r1], -r0
   11b94:	strdeq	r2, [r1], -r0
   11b98:	strdeq	r2, [r1], -r0
   11b9c:	strdeq	r2, [r1], -r0
   11ba0:	strdeq	r2, [r1], -r0
   11ba4:	strdeq	r2, [r1], -r0
   11ba8:	strdeq	r2, [r1], -r0
   11bac:	strdeq	r2, [r1], -r0
   11bb0:	strdeq	r2, [r1], -r0
   11bb4:	strdeq	r2, [r1], -r0
   11bb8:	strdeq	r2, [r1], -r0
   11bbc:	strdeq	r2, [r1], -r0
   11bc0:	strdeq	r2, [r1], -r0
   11bc4:	strdeq	r2, [r1], -r0
   11bc8:	strdeq	r2, [r1], -r0
   11bcc:	strdeq	r2, [r1], -r0
   11bd0:	strdeq	r2, [r1], -r0
   11bd4:	strdeq	r2, [r1], -r0
   11bd8:	strdeq	r2, [r1], -r0
   11bdc:	strdeq	r2, [r1], -r0
   11be0:	strdeq	r2, [r1], -r0
   11be4:	strdeq	r2, [r1], -r0
   11be8:	strdeq	r2, [r1], -r0
   11bec:	strdeq	r2, [r1], -r0
   11bf0:	strdeq	r2, [r1], -r0
   11bf4:	strdeq	r2, [r1], -r0
   11bf8:	strdeq	r2, [r1], -r0
   11bfc:	strdeq	r2, [r1], -r0
   11c00:	strdeq	r2, [r1], -r0
   11c04:	strdeq	r2, [r1], -r0
   11c08:	strdeq	r2, [r1], -r0
   11c0c:	strdeq	r2, [r1], -r0
   11c10:	strdeq	r2, [r1], -r0
   11c14:	strdeq	r2, [r1], -r0
   11c18:	strdeq	r2, [r1], -r0
   11c1c:	strdeq	r2, [r1], -r0
   11c20:	strdeq	r2, [r1], -r0
   11c24:	strdeq	r2, [r1], -r0
   11c28:	strdeq	r2, [r1], -r0
   11c2c:	strdeq	r2, [r1], -r0
   11c30:	strdeq	r2, [r1], -r0
   11c34:	strdeq	r2, [r1], -r0
   11c38:	strdeq	r2, [r1], -r0
   11c3c:	strdeq	r2, [r1], -r0
   11c40:	strdeq	r2, [r1], -r0
   11c44:	strdeq	r2, [r1], -r0
   11c48:	strdeq	r2, [r1], -r0
   11c4c:	strdeq	r2, [r1], -r0
   11c50:	strdeq	r2, [r1], -r0
   11c54:	strdeq	r2, [r1], -r0
   11c58:	strdeq	r2, [r1], -r0
   11c5c:	strdeq	r2, [r1], -r0
   11c60:	strdeq	r2, [r1], -r0
   11c64:	strdeq	r2, [r1], -r0
   11c68:	strdeq	r2, [r1], -r0
   11c6c:	strdeq	r2, [r1], -r0
   11c70:	strdeq	r2, [r1], -r0
   11c74:	strdeq	r2, [r1], -r0
   11c78:	strdeq	r2, [r1], -r0
   11c7c:	strdeq	r2, [r1], -r0
   11c80:	strdeq	r2, [r1], -r0
   11c84:	strdeq	r2, [r1], -r0
   11c88:	strdeq	r2, [r1], -r0
   11c8c:	strdeq	r2, [r1], -r0
   11c90:	strdeq	r2, [r1], -r0
   11c94:	strdeq	r2, [r1], -r0
   11c98:	strdeq	r2, [r1], -r0
   11c9c:	strdeq	r2, [r1], -r0
   11ca0:	strdeq	r2, [r1], -r0
   11ca4:	strdeq	r2, [r1], -r0
   11ca8:	strdeq	r2, [r1], -r0
   11cac:	andeq	r1, r1, ip, asr r8
   11cb0:	andeq	r1, r1, r4, asr sp
   11cb4:	andeq	r1, r1, ip, asr sp
   11cb8:	movw	r0, #49520	; 0xc170
   11cbc:	mov	r7, r5
   11cc0:	movt	r0, #2
   11cc4:	ldr	r0, [r0]
   11cc8:	add	r0, r5, r0, lsl #2
   11ccc:	ldr	r8, [r0, #-4]
   11cd0:	mov	r0, r8
   11cd4:	bl	1123c <strlen@plt>
   11cd8:	cmp	r4, #0
   11cdc:	mov	r5, r4
   11ce0:	mov	r9, r0
   11ce4:	addne	r5, r5, #1
   11ce8:	add	r6, r0, r5
   11cec:	ldr	r0, [sp, #36]	; 0x24
   11cf0:	cmp	r0, r6
   11cf4:	bls	11808 <__assert_fail@plt+0x464>
   11cf8:	ldr	r1, [sp, #32]
   11cfc:	b	11820 <__assert_fail@plt+0x47c>
   11d00:	movw	r0, #49432	; 0xc118
   11d04:	mov	r1, #0
   11d08:	b	11d44 <__assert_fail@plt+0x9a0>
   11d0c:	movw	r0, #49544	; 0xc188
   11d10:	mov	r1, #1
   11d14:	movt	r0, #2
   11d18:	strb	r1, [r0, #1]
   11d1c:	mov	r0, sl
   11d20:	b	1185c <__assert_fail@plt+0x4b8>
   11d24:	movw	r0, #49544	; 0xc188
   11d28:	mov	r1, #1
   11d2c:	movt	r0, #2
   11d30:	strb	r1, [r0, #2]
   11d34:	mov	r0, sl
   11d38:	b	1185c <__assert_fail@plt+0x4b8>
   11d3c:	movw	r0, #49432	; 0xc118
   11d40:	mov	r1, #1
   11d44:	movt	r0, #2
   11d48:	str	r1, [r0]
   11d4c:	mov	r0, sl
   11d50:	b	1185c <__assert_fail@plt+0x4b8>
   11d54:	mov	r0, #1
   11d58:	b	1185c <__assert_fail@plt+0x4b8>
   11d5c:	movw	r0, #49536	; 0xc180
   11d60:	movt	r0, #2
   11d64:	ldr	r0, [r0]
   11d68:	str	r0, [sp, #24]
   11d6c:	mov	r0, sl
   11d70:	b	1185c <__assert_fail@plt+0x4b8>
   11d74:	ldr	r6, [sp, #24]
   11d78:	cmp	r6, #0
   11d7c:	beq	11d9c <__assert_fail@plt+0x9f8>
   11d80:	ldr	r0, [sp, #32]
   11d84:	mov	r8, #0
   11d88:	cmp	r0, #0
   11d8c:	beq	11dc4 <__assert_fail@plt+0xa20>
   11d90:	movw	r1, #43884	; 0xab6c
   11d94:	movt	r1, #1
   11d98:	b	12800 <__assert_fail@plt+0x145c>
   11d9c:	ldr	r8, [sp, #32]
   11da0:	cmp	r8, #0
   11da4:	bne	11dc4 <__assert_fail@plt+0xa20>
   11da8:	movw	r0, #49520	; 0xc170
   11dac:	movt	r0, #2
   11db0:	mov	r2, r0
   11db4:	ldr	r0, [r0]
   11db8:	add	r1, r0, #1
   11dbc:	str	r1, [r2]
   11dc0:	ldr	r8, [r5, r0, lsl #2]
   11dc4:	movw	r0, #49520	; 0xc170
   11dc8:	movt	r0, #2
   11dcc:	ldr	r0, [r0]
   11dd0:	cmp	r0, r7
   11dd4:	bge	127a0 <__assert_fail@plt+0x13fc>
   11dd8:	cmp	r6, #0
   11ddc:	beq	11e54 <__assert_fail@plt+0xab0>
   11de0:	mov	r0, r6
   11de4:	bl	16df4 <__assert_fail@plt+0x5a50>
   11de8:	movw	r4, #49544	; 0xc188
   11dec:	cmp	r0, #0
   11df0:	movt	r4, #2
   11df4:	str	r0, [r4, #4]
   11df8:	beq	12824 <__assert_fail@plt+0x1480>
   11dfc:	ldrb	r0, [r4, #2]
   11e00:	and	r0, sl, r0
   11e04:	tst	r0, #1
   11e08:	beq	11e8c <__assert_fail@plt+0xae8>
   11e0c:	add	r0, r4, #16
   11e10:	bl	18fd4 <__assert_fail@plt+0x7c30>
   11e14:	cmp	r0, #0
   11e18:	mov	sl, r4
   11e1c:	str	r0, [r4, #12]
   11e20:	bne	11e98 <__assert_fail@plt+0xaf4>
   11e24:	bl	11260 <__errno_location@plt>
   11e28:	movw	r1, #43969	; 0xabc1
   11e2c:	ldr	r4, [r0]
   11e30:	mov	r0, #0
   11e34:	mov	r2, #5
   11e38:	movt	r1, #1
   11e3c:	bl	11140 <dcgettext@plt>
   11e40:	movw	r1, #46631	; 0xb627
   11e44:	mov	r5, r0
   11e48:	mov	r0, #4
   11e4c:	movt	r1, #1
   11e50:	b	1284c <__assert_fail@plt+0x14a8>
   11e54:	mov	r0, r8
   11e58:	bl	16998 <__assert_fail@plt+0x55f4>
   11e5c:	movw	r4, #49544	; 0xc188
   11e60:	cmp	r0, #0
   11e64:	movt	r4, #2
   11e68:	str	r0, [r4, #4]
   11e6c:	beq	12864 <__assert_fail@plt+0x14c0>
   11e70:	mov	r0, #0
   11e74:	bl	11344 <umask@plt>
   11e78:	str	r0, [r4, #8]
   11e7c:	ldrb	r0, [r4, #2]
   11e80:	and	r0, sl, r0
   11e84:	tst	r0, #1
   11e88:	bne	11e0c <__assert_fail@plt+0xa68>
   11e8c:	mov	r0, #0
   11e90:	mov	sl, r4
   11e94:	str	r0, [r4, #12]
   11e98:	movw	r0, #49520	; 0xc170
   11e9c:	movw	r1, #1041	; 0x411
   11ea0:	mov	r2, #0
   11ea4:	movt	r0, #2
   11ea8:	ldr	r0, [r0]
   11eac:	add	r0, r5, r0, lsl #2
   11eb0:	bl	19cb4 <__assert_fail@plt+0x8910>
   11eb4:	str	r0, [sp, #32]
   11eb8:	bl	137a8 <__assert_fail@plt+0x2404>
   11ebc:	cmp	r0, #0
   11ec0:	beq	126a8 <__assert_fail@plt+0x1304>
   11ec4:	mov	r8, r0
   11ec8:	sub	r0, fp, #40	; 0x28
   11ecc:	mov	r4, #1
   11ed0:	add	r0, r0, #1
   11ed4:	str	r0, [sp, #20]
   11ed8:	add	r0, sp, #40	; 0x28
   11edc:	add	r0, r0, #1
   11ee0:	str	r0, [sp, #24]
   11ee4:	b	11f0c <__assert_fail@plt+0xb68>
   11ee8:	cmp	r6, #1
   11eec:	mov	r6, #0
   11ef0:	movwhi	r6, #1
   11ef4:	ldr	r0, [sp, #32]
   11ef8:	and	r4, r4, r6
   11efc:	bl	137a8 <__assert_fail@plt+0x2404>
   11f00:	mov	r8, r0
   11f04:	cmp	r0, #0
   11f08:	beq	126ac <__assert_fail@plt+0x1308>
   11f0c:	ldrh	r0, [r8, #56]	; 0x38
   11f10:	ldr	r9, [r8, #24]
   11f14:	ldr	r7, [r8, #28]
   11f18:	sub	r0, r0, #2
   11f1c:	cmp	r0, #11
   11f20:	bhi	11fb8 <__assert_fail@plt+0xc14>
   11f24:	add	r1, pc, #4
   11f28:	mov	r6, #1
   11f2c:	ldr	pc, [r1, r0, lsl #2]
   11f30:	andeq	r1, r1, r0, ror #30
   11f34:			; <UNDEFINED> instruction: 0x00011fb8
   11f38:	muleq	r1, r8, r0
   11f3c:			; <UNDEFINED> instruction: 0x00011fb8
   11f40:	strdeq	r1, [r1], -r4
   11f44:	andeq	r2, r1, r4, lsr #2
   11f48:			; <UNDEFINED> instruction: 0x00011fb8
   11f4c:			; <UNDEFINED> instruction: 0x00011fb8
   11f50:	andeq	r2, r1, r0, ror r1
   11f54:			; <UNDEFINED> instruction: 0x00011fb8
   11f58:			; <UNDEFINED> instruction: 0x00011fb8
   11f5c:	andeq	r2, r1, ip, asr #1
   11f60:	ldr	r0, [sp, #32]
   11f64:	mov	r1, r8
   11f68:	bl	19d00 <__assert_fail@plt+0x895c>
   11f6c:	cmp	r0, #0
   11f70:	beq	11fb8 <__assert_fail@plt+0xc14>
   11f74:	movw	r1, #44520	; 0xade8
   11f78:	mov	r0, #0
   11f7c:	mov	r2, #5
   11f80:	mov	r6, #0
   11f84:	movt	r1, #1
   11f88:	bl	11140 <dcgettext@plt>
   11f8c:	mov	r5, r0
   11f90:	mov	r0, #0
   11f94:	mov	r1, #3
   11f98:	mov	r2, r7
   11f9c:	bl	18d10 <__assert_fail@plt+0x796c>
   11fa0:	mov	r3, r0
   11fa4:	mov	r0, #0
   11fa8:	mov	r1, #0
   11fac:	mov	r2, r5
   11fb0:	bl	111c4 <error@plt>
   11fb4:	b	11ef4 <__assert_fail@plt+0xb50>
   11fb8:	ldr	r0, [sl, #12]
   11fbc:	str	r7, [sp, #28]
   11fc0:	cmp	r0, #0
   11fc4:	beq	1207c <__assert_fail@plt+0xcd8>
   11fc8:	add	r1, r8, #160	; 0xa0
   11fcc:	ldrd	r2, [r0]
   11fd0:	ldrd	r6, [r1]
   11fd4:	eor	r1, r7, r3
   11fd8:	eor	r2, r6, r2
   11fdc:	orrs	r1, r2, r1
   11fe0:	bne	1207c <__assert_fail@plt+0xcd8>
   11fe4:	add	r1, r8, #64	; 0x40
   11fe8:	ldr	r3, [r0, #12]
   11fec:	ldr	r0, [r0, #8]
   11ff0:	ldr	r2, [r1]
   11ff4:	ldr	r1, [r1, #4]
   11ff8:	eor	r1, r1, r3
   11ffc:	eor	r0, r2, r0
   12000:	orrs	r0, r0, r1
   12004:	bne	1207c <__assert_fail@plt+0xcd8>
   12008:	ldr	r7, [sp, #28]
   1200c:	movw	r6, #46631	; 0xb627
   12010:	movt	r6, #1
   12014:	mov	r1, r6
   12018:	mov	r0, r7
   1201c:	bl	110ec <strcmp@plt>
   12020:	cmp	r0, #0
   12024:	beq	12628 <__assert_fail@plt+0x1284>
   12028:	movw	r1, #44751	; 0xaecf
   1202c:	mov	r0, #0
   12030:	mov	r2, #5
   12034:	movt	r1, #1
   12038:	bl	11140 <dcgettext@plt>
   1203c:	mov	r5, r0
   12040:	mov	r0, #0
   12044:	mov	r1, #4
   12048:	mov	r2, r7
   1204c:	bl	189ec <__assert_fail@plt+0x7648>
   12050:	mov	r7, r0
   12054:	mov	r0, #1
   12058:	mov	r1, #4
   1205c:	mov	r2, r6
   12060:	bl	189ec <__assert_fail@plt+0x7648>
   12064:	str	r0, [sp]
   12068:	mov	r0, #0
   1206c:	mov	r1, #0
   12070:	mov	r2, r5
   12074:	mov	r3, r7
   12078:	b	1265c <__assert_fail@plt+0x12b8>
   1207c:	ldr	r7, [r8, #80]	; 0x50
   12080:	and	r0, r7, #61440	; 0xf000
   12084:	cmp	r0, #40960	; 0xa000
   12088:	bne	12294 <__assert_fail@plt+0xef0>
   1208c:	mov	r7, #0
   12090:	mov	r6, #2
   12094:	b	121e8 <__assert_fail@plt+0xe44>
   12098:	ldrb	r0, [sl, #1]
   1209c:	str	r7, [sp, #28]
   120a0:	mov	r6, #0
   120a4:	mov	r7, #0
   120a8:	mov	r5, #0
   120ac:	cmp	r0, #0
   120b0:	bne	121ec <__assert_fail@plt+0xe48>
   120b4:	ldr	r5, [r8, #32]
   120b8:	movw	r1, #44457	; 0xada9
   120bc:	mov	r6, #0
   120c0:	mov	r0, #0
   120c4:	movt	r1, #1
   120c8:	b	121b8 <__assert_fail@plt+0xe14>
   120cc:	ldrb	r0, [sl, #1]
   120d0:	str	r7, [sp, #28]
   120d4:	mov	r6, #0
   120d8:	mov	r7, #0
   120dc:	mov	r5, #0
   120e0:	cmp	r0, #0
   120e4:	bne	121ec <__assert_fail@plt+0xe48>
   120e8:	movw	r1, #44482	; 0xadc2
   120ec:	mov	r0, #0
   120f0:	mov	r2, #5
   120f4:	mov	r6, #0
   120f8:	movt	r1, #1
   120fc:	bl	11140 <dcgettext@plt>
   12100:	ldr	r1, [sp, #28]
   12104:	mov	r5, r0
   12108:	mov	r0, #4
   1210c:	bl	18a94 <__assert_fail@plt+0x76f0>
   12110:	mov	r3, r0
   12114:	mov	r0, #0
   12118:	mov	r1, #0
   1211c:	mov	r2, r5
   12120:	b	121e0 <__assert_fail@plt+0xe3c>
   12124:	ldrb	r0, [sl, #1]
   12128:	str	r7, [sp, #28]
   1212c:	mov	r6, #0
   12130:	mov	r7, #0
   12134:	mov	r5, #0
   12138:	cmp	r0, #0
   1213c:	bne	121ec <__assert_fail@plt+0xe48>
   12140:	ldr	r2, [sp, #28]
   12144:	ldr	r5, [r8, #32]
   12148:	mov	r0, #0
   1214c:	mov	r1, #3
   12150:	mov	r6, #0
   12154:	bl	18d10 <__assert_fail@plt+0x796c>
   12158:	movw	r2, #44014	; 0xabee
   1215c:	mov	r3, r0
   12160:	mov	r0, #0
   12164:	mov	r1, r5
   12168:	movt	r2, #1
   1216c:	b	121e0 <__assert_fail@plt+0xe3c>
   12170:	ldr	r0, [r8, #48]	; 0x30
   12174:	cmp	r0, #0
   12178:	bne	12188 <__assert_fail@plt+0xde4>
   1217c:	ldr	r0, [r8, #16]
   12180:	cmp	r0, #0
   12184:	beq	1260c <__assert_fail@plt+0x1268>
   12188:	ldrb	r0, [sl, #1]
   1218c:	str	r7, [sp, #28]
   12190:	mov	r6, #0
   12194:	mov	r7, #0
   12198:	mov	r5, #0
   1219c:	cmp	r0, #0
   121a0:	bne	121ec <__assert_fail@plt+0xe48>
   121a4:	ldr	r5, [r8, #32]
   121a8:	movw	r1, #44440	; 0xad98
   121ac:	mov	r6, #0
   121b0:	mov	r0, #0
   121b4:	movt	r1, #1
   121b8:	mov	r2, #5
   121bc:	bl	11140 <dcgettext@plt>
   121c0:	ldr	r1, [sp, #28]
   121c4:	mov	r7, r0
   121c8:	mov	r0, #4
   121cc:	bl	18a94 <__assert_fail@plt+0x76f0>
   121d0:	mov	r3, r0
   121d4:	mov	r0, #0
   121d8:	mov	r1, r5
   121dc:	mov	r2, r7
   121e0:	bl	111c4 <error@plt>
   121e4:	mov	r7, #0
   121e8:	mov	r5, #0
   121ec:	movw	r0, #49432	; 0xc118
   121f0:	movt	r0, #2
   121f4:	ldr	r0, [r0]
   121f8:	cmp	r0, #2
   121fc:	beq	123bc <__assert_fail@plt+0x1018>
   12200:	cmp	r6, #4
   12204:	bne	123a0 <__assert_fail@plt+0xffc>
   12208:	tst	r5, #3584	; 0xe00
   1220c:	mov	r0, r5
   12210:	beq	12340 <__assert_fail@plt+0xf9c>
   12214:	ldr	r0, [sp, #32]
   12218:	mov	r2, r9
   1221c:	add	r3, sp, #40	; 0x28
   12220:	ldr	r1, [r0, #32]
   12224:	mov	r0, #0
   12228:	str	r0, [sp]
   1222c:	mov	r0, #3
   12230:	bl	11164 <__fxstatat64@plt>
   12234:	cmp	r0, #0
   12238:	beq	1233c <__assert_fail@plt+0xf98>
   1223c:	ldrb	r0, [sl, #1]
   12240:	cmp	r0, #0
   12244:	bne	1239c <__assert_fail@plt+0xff8>
   12248:	bl	11260 <__errno_location@plt>
   1224c:	movw	r1, #44920	; 0xaf78
   12250:	ldr	r9, [r0]
   12254:	mov	r0, #0
   12258:	mov	r2, #5
   1225c:	movt	r1, #1
   12260:	bl	11140 <dcgettext@plt>
   12264:	ldr	r1, [sp, #28]
   12268:	mov	sl, r0
   1226c:	mov	r0, #4
   12270:	bl	18a94 <__assert_fail@plt+0x76f0>
   12274:	mov	r3, r0
   12278:	mov	r2, sl
   1227c:	movw	sl, #49544	; 0xc188
   12280:	mov	r0, #0
   12284:	mov	r1, r9
   12288:	movt	sl, #2
   1228c:	bl	111c4 <error@plt>
   12290:	b	1239c <__assert_fail@plt+0xff8>
   12294:	ldr	r3, [sl, #4]
   12298:	ldr	r2, [sl, #8]
   1229c:	sub	r0, r0, #16384	; 0x4000
   122a0:	mov	r1, #0
   122a4:	clz	r0, r0
   122a8:	str	r1, [sp]
   122ac:	lsr	r1, r0, #5
   122b0:	mov	r0, r7
   122b4:	bl	16e58 <__assert_fail@plt+0x5ab4>
   122b8:	mov	r5, r0
   122bc:	ldr	r0, [sp, #32]
   122c0:	mov	r1, r9
   122c4:	mov	r3, #0
   122c8:	mov	r2, r5
   122cc:	ldr	r0, [r0, #32]
   122d0:	bl	129ac <__assert_fail@plt+0x1608>
   122d4:	cmp	r0, #0
   122d8:	beq	125b4 <__assert_fail@plt+0x1210>
   122dc:	ldrb	r0, [sl, #1]
   122e0:	mov	r6, #1
   122e4:	cmp	r0, #0
   122e8:	bne	121ec <__assert_fail@plt+0xe48>
   122ec:	bl	11260 <__errno_location@plt>
   122f0:	ldr	r0, [r0]
   122f4:	movw	r1, #44858	; 0xaf3a
   122f8:	mov	r2, #5
   122fc:	movt	r1, #1
   12300:	str	r0, [sp, #16]
   12304:	mov	r0, #0
   12308:	bl	11140 <dcgettext@plt>
   1230c:	ldr	r1, [sp, #28]
   12310:	mov	sl, r0
   12314:	mov	r0, #4
   12318:	bl	18a94 <__assert_fail@plt+0x76f0>
   1231c:	ldr	r1, [sp, #16]
   12320:	mov	r3, r0
   12324:	mov	r2, sl
   12328:	movw	sl, #49544	; 0xc188
   1232c:	mov	r0, #0
   12330:	movt	sl, #2
   12334:	bl	111c4 <error@plt>
   12338:	b	121ec <__assert_fail@plt+0xe48>
   1233c:	ldr	r0, [sp, #56]	; 0x38
   12340:	eor	r0, r0, r7
   12344:	movw	r1, #4095	; 0xfff
   12348:	tst	r0, r1
   1234c:	beq	1239c <__assert_fail@plt+0xff8>
   12350:	ldr	r1, [sp, #28]
   12354:	mov	r0, #4
   12358:	mov	r6, #4
   1235c:	bl	18a94 <__assert_fail@plt+0x76f0>
   12360:	mov	r9, r0
   12364:	mov	r0, r5
   12368:	add	r1, sp, #40	; 0x28
   1236c:	bl	12b04 <__assert_fail@plt+0x1760>
   12370:	mov	sl, #0
   12374:	mov	r0, r7
   12378:	sub	r1, fp, #40	; 0x28
   1237c:	strb	sl, [sp, #50]	; 0x32
   12380:	bl	12b04 <__assert_fail@plt+0x1760>
   12384:	movw	r1, #45031	; 0xafe7
   12388:	strb	sl, [fp, #-30]	; 0xffffffe2
   1238c:	mov	sl, r5
   12390:	bfc	sl, #12, #20
   12394:	movt	r1, #1
   12398:	b	125c4 <__assert_fail@plt+0x1220>
   1239c:	mov	r6, #3
   123a0:	cmp	r6, #4
   123a4:	beq	1248c <__assert_fail@plt+0x10e8>
   123a8:	movw	r0, #49432	; 0xc118
   123ac:	movt	r0, #2
   123b0:	ldr	r0, [r0]
   123b4:	cmp	r0, #0
   123b8:	beq	1248c <__assert_fail@plt+0x10e8>
   123bc:	cmp	r6, #3
   123c0:	bcc	124dc <__assert_fail@plt+0x1138>
   123c4:	ldrb	r0, [sl]
   123c8:	cmp	r0, #1
   123cc:	bne	124dc <__assert_fail@plt+0x1138>
   123d0:	mov	r0, #0
   123d4:	ldr	r3, [sl, #4]
   123d8:	mov	r2, #0
   123dc:	str	r0, [sp]
   123e0:	and	r0, r7, #61440	; 0xf000
   123e4:	sub	r0, r0, #16384	; 0x4000
   123e8:	clz	r0, r0
   123ec:	lsr	r1, r0, #5
   123f0:	mov	r0, r7
   123f4:	bl	16e58 <__assert_fail@plt+0x5ab4>
   123f8:	mov	r7, r0
   123fc:	mvn	r0, r0
   12400:	tst	r5, r0
   12404:	beq	124dc <__assert_fail@plt+0x1138>
   12408:	mov	r0, r5
   1240c:	add	r1, sp, #40	; 0x28
   12410:	bl	12b04 <__assert_fail@plt+0x1760>
   12414:	mov	r0, r7
   12418:	sub	r1, fp, #40	; 0x28
   1241c:	bl	12b04 <__assert_fail@plt+0x1760>
   12420:	movw	r1, #44885	; 0xaf55
   12424:	mov	r0, #0
   12428:	mov	r2, #5
   1242c:	movt	r1, #1
   12430:	strb	r0, [sp, #50]	; 0x32
   12434:	strb	r0, [fp, #-30]	; 0xffffffe2
   12438:	mov	r0, #0
   1243c:	bl	11140 <dcgettext@plt>
   12440:	ldr	r2, [sp, #28]
   12444:	mov	r5, r0
   12448:	mov	r0, #0
   1244c:	mov	r1, #3
   12450:	bl	18d10 <__assert_fail@plt+0x796c>
   12454:	mov	r3, r0
   12458:	ldr	r0, [sp, #24]
   1245c:	mov	r1, #0
   12460:	mov	r2, r5
   12464:	str	r0, [sp]
   12468:	ldr	r0, [sp, #20]
   1246c:	str	r0, [sp, #4]
   12470:	mov	r0, #0
   12474:	bl	111c4 <error@plt>
   12478:	mov	r6, #1
   1247c:	ldrb	r0, [sl, #2]
   12480:	cmp	r0, #0
   12484:	bne	11ee8 <__assert_fail@plt+0xb44>
   12488:	b	124e8 <__assert_fail@plt+0x1144>
   1248c:	ldr	r1, [sp, #28]
   12490:	mov	r0, #4
   12494:	bl	18a94 <__assert_fail@plt+0x76f0>
   12498:	mov	r9, r0
   1249c:	cmp	r6, #0
   124a0:	beq	124fc <__assert_fail@plt+0x1158>
   124a4:	cmp	r6, #2
   124a8:	bne	12530 <__assert_fail@plt+0x118c>
   124ac:	movw	r1, #44949	; 0xaf95
   124b0:	mov	r0, #0
   124b4:	mov	r2, #5
   124b8:	movt	r1, #1
   124bc:	bl	11140 <dcgettext@plt>
   124c0:	mov	r1, r0
   124c4:	mov	r0, #1
   124c8:	mov	r2, r9
   124cc:	bl	11290 <__printf_chk@plt>
   124d0:	mov	r6, #2
   124d4:	cmp	r6, #3
   124d8:	bcs	123c4 <__assert_fail@plt+0x1020>
   124dc:	ldrb	r0, [sl, #2]
   124e0:	cmp	r0, #0
   124e4:	bne	11ee8 <__assert_fail@plt+0xb44>
   124e8:	ldr	r0, [sp, #32]
   124ec:	mov	r1, r8
   124f0:	mov	r2, #4
   124f4:	bl	15008 <__assert_fail@plt+0x3c64>
   124f8:	b	11ee8 <__assert_fail@plt+0xb44>
   124fc:	movw	r1, #45005	; 0xafcd
   12500:	mov	r0, #0
   12504:	mov	r2, #5
   12508:	mov	r6, #0
   1250c:	movt	r1, #1
   12510:	bl	11140 <dcgettext@plt>
   12514:	mov	r1, r0
   12518:	mov	r0, #1
   1251c:	mov	r2, r9
   12520:	bl	11290 <__printf_chk@plt>
   12524:	cmp	r6, #3
   12528:	bcs	123c4 <__assert_fail@plt+0x1020>
   1252c:	b	124dc <__assert_fail@plt+0x1138>
   12530:	mov	r0, r5
   12534:	add	r1, sp, #40	; 0x28
   12538:	bl	12b04 <__assert_fail@plt+0x1760>
   1253c:	mov	sl, #0
   12540:	mov	r0, r7
   12544:	sub	r1, fp, #40	; 0x28
   12548:	strb	sl, [sp, #50]	; 0x32
   1254c:	bl	12b04 <__assert_fail@plt+0x1760>
   12550:	strb	sl, [fp, #-30]	; 0xffffffe2
   12554:	mov	sl, r5
   12558:	cmp	r6, #1
   1255c:	bfc	sl, #12, #20
   12560:	beq	125bc <__assert_fail@plt+0x1218>
   12564:	cmp	r6, #3
   12568:	bne	1279c <__assert_fail@plt+0x13f8>
   1256c:	movw	r1, #45140	; 0xb054
   12570:	mov	r0, #0
   12574:	mov	r2, #5
   12578:	movt	r1, #1
   1257c:	bl	11140 <dcgettext@plt>
   12580:	mov	r1, r0
   12584:	ldr	r0, [sp, #24]
   12588:	mov	r2, r9
   1258c:	mov	r3, sl
   12590:	str	r0, [sp]
   12594:	mov	r0, #1
   12598:	bl	11290 <__printf_chk@plt>
   1259c:	mov	r6, #3
   125a0:	movw	sl, #49544	; 0xc188
   125a4:	movt	sl, #2
   125a8:	cmp	r6, #3
   125ac:	bcs	123c4 <__assert_fail@plt+0x1020>
   125b0:	b	124dc <__assert_fail@plt+0x1138>
   125b4:	mov	r6, #4
   125b8:	b	121ec <__assert_fail@plt+0xe48>
   125bc:	movw	r1, #45081	; 0xb019
   125c0:	movt	r1, #1
   125c4:	mov	r0, #0
   125c8:	mov	r2, #5
   125cc:	bl	11140 <dcgettext@plt>
   125d0:	mov	r1, r0
   125d4:	ldr	r0, [sp, #20]
   125d8:	mov	r3, r7
   125dc:	mov	r2, r9
   125e0:	bfc	r3, #12, #20
   125e4:	stm	sp, {r0, sl}
   125e8:	ldr	r0, [sp, #24]
   125ec:	str	r0, [sp, #8]
   125f0:	mov	r0, #1
   125f4:	bl	11290 <__printf_chk@plt>
   125f8:	movw	sl, #49544	; 0xc188
   125fc:	movt	sl, #2
   12600:	cmp	r6, #3
   12604:	bcs	123c4 <__assert_fail@plt+0x1020>
   12608:	b	124dc <__assert_fail@plt+0x1138>
   1260c:	ldr	r0, [sp, #32]
   12610:	mov	r6, #1
   12614:	mov	r1, r8
   12618:	mov	r2, #1
   1261c:	str	r6, [r8, #16]
   12620:	bl	15008 <__assert_fail@plt+0x3c64>
   12624:	b	11ef4 <__assert_fail@plt+0xb50>
   12628:	movw	r1, #44706	; 0xaea2
   1262c:	mov	r0, #0
   12630:	mov	r2, #5
   12634:	movt	r1, #1
   12638:	bl	11140 <dcgettext@plt>
   1263c:	mov	r5, r0
   12640:	mov	r0, #4
   12644:	mov	r1, r7
   12648:	bl	18a94 <__assert_fail@plt+0x76f0>
   1264c:	mov	r3, r0
   12650:	mov	r0, #0
   12654:	mov	r1, #0
   12658:	mov	r2, r5
   1265c:	bl	111c4 <error@plt>
   12660:	movw	r1, #44809	; 0xaf09
   12664:	mov	r0, #0
   12668:	mov	r2, #5
   1266c:	mov	r6, #0
   12670:	movt	r1, #1
   12674:	bl	11140 <dcgettext@plt>
   12678:	mov	r2, r0
   1267c:	mov	r0, #0
   12680:	mov	r1, #0
   12684:	bl	111c4 <error@plt>
   12688:	ldr	r5, [sp, #32]
   1268c:	mov	r1, r8
   12690:	mov	r2, #4
   12694:	mov	r0, r5
   12698:	bl	15008 <__assert_fail@plt+0x3c64>
   1269c:	mov	r0, r5
   126a0:	bl	137a8 <__assert_fail@plt+0x2404>
   126a4:	b	11ef4 <__assert_fail@plt+0xb50>
   126a8:	mov	r4, #1
   126ac:	bl	11260 <__errno_location@plt>
   126b0:	ldr	r6, [r0]
   126b4:	mov	r5, r0
   126b8:	cmp	r6, #0
   126bc:	beq	126f8 <__assert_fail@plt+0x1354>
   126c0:	ldrb	r0, [sl, #1]
   126c4:	mov	r4, #0
   126c8:	cmp	r0, #0
   126cc:	bne	126f8 <__assert_fail@plt+0x1354>
   126d0:	movw	r1, #44407	; 0xad77
   126d4:	mov	r0, #0
   126d8:	mov	r2, #5
   126dc:	mov	r4, #0
   126e0:	movt	r1, #1
   126e4:	bl	11140 <dcgettext@plt>
   126e8:	mov	r2, r0
   126ec:	mov	r0, #0
   126f0:	mov	r1, r6
   126f4:	bl	111c4 <error@plt>
   126f8:	ldr	r0, [sp, #32]
   126fc:	bl	135e0 <__assert_fail@plt+0x223c>
   12700:	cmp	r0, #0
   12704:	beq	12734 <__assert_fail@plt+0x1390>
   12708:	movw	r1, #44423	; 0xad87
   1270c:	ldr	r5, [r5]
   12710:	mov	r0, #0
   12714:	mov	r2, #5
   12718:	mov	r4, #0
   1271c:	movt	r1, #1
   12720:	bl	11140 <dcgettext@plt>
   12724:	mov	r2, r0
   12728:	mov	r0, #0
   1272c:	mov	r1, r5
   12730:	bl	111c4 <error@plt>
   12734:	eor	r0, r4, #1
   12738:	sub	sp, fp, #28
   1273c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12740:	movw	r0, #49436	; 0xc11c
   12744:	movw	r2, #43871	; 0xab5f
   12748:	mov	r1, #0
   1274c:	movw	r7, #43855	; 0xab4f
   12750:	movt	r0, #2
   12754:	movt	r2, #1
   12758:	str	r1, [sp, #8]
   1275c:	movw	r1, #43743	; 0xaadf
   12760:	movt	r7, #1
   12764:	movt	r1, #1
   12768:	ldr	r3, [r0]
   1276c:	movw	r0, #49532	; 0xc17c
   12770:	str	r2, [sp, #4]
   12774:	movw	r2, #43841	; 0xab41
   12778:	str	r7, [sp]
   1277c:	movt	r0, #2
   12780:	movt	r2, #1
   12784:	ldr	r0, [r0]
   12788:	bl	19500 <__assert_fail@plt+0x815c>
   1278c:	mov	r0, #0
   12790:	bl	11224 <exit@plt>
   12794:	mov	r0, #0
   12798:	bl	114a0 <__assert_fail@plt+0xfc>
   1279c:	bl	11374 <abort@plt>
   127a0:	cmp	r8, #0
   127a4:	beq	127f8 <__assert_fail@plt+0x1454>
   127a8:	add	r0, r5, r0, lsl #2
   127ac:	ldr	r0, [r0, #-4]
   127b0:	cmp	r8, r0
   127b4:	bne	127f8 <__assert_fail@plt+0x1454>
   127b8:	movw	r1, #43944	; 0xaba8
   127bc:	mov	r0, #0
   127c0:	mov	r2, #5
   127c4:	movt	r1, #1
   127c8:	bl	11140 <dcgettext@plt>
   127cc:	mov	r6, r0
   127d0:	add	r0, r5, r7, lsl #2
   127d4:	ldr	r0, [r0, #-4]
   127d8:	bl	18fbc <__assert_fail@plt+0x7c18>
   127dc:	mov	r3, r0
   127e0:	mov	r0, #0
   127e4:	mov	r1, #0
   127e8:	mov	r2, r6
   127ec:	bl	111c4 <error@plt>
   127f0:	mov	r0, #1
   127f4:	bl	114a0 <__assert_fail@plt+0xfc>
   127f8:	movw	r1, #43928	; 0xab98
   127fc:	movt	r1, #1
   12800:	mov	r0, #0
   12804:	mov	r2, #5
   12808:	bl	11140 <dcgettext@plt>
   1280c:	mov	r2, r0
   12810:	mov	r0, #0
   12814:	mov	r1, #0
   12818:	bl	111c4 <error@plt>
   1281c:	mov	r0, #1
   12820:	bl	114a0 <__assert_fail@plt+0xfc>
   12824:	bl	11260 <__errno_location@plt>
   12828:	movw	r1, #43969	; 0xabc1
   1282c:	ldr	r4, [r0]
   12830:	mov	r0, #0
   12834:	mov	r2, #5
   12838:	movt	r1, #1
   1283c:	bl	11140 <dcgettext@plt>
   12840:	mov	r5, r0
   12844:	mov	r0, #4
   12848:	mov	r1, r6
   1284c:	bl	18a94 <__assert_fail@plt+0x76f0>
   12850:	mov	r3, r0
   12854:	mov	r0, #1
   12858:	mov	r1, r4
   1285c:	mov	r2, r5
   12860:	bl	111c4 <error@plt>
   12864:	movw	r1, #44000	; 0xabe0
   12868:	mov	r0, #0
   1286c:	mov	r2, #5
   12870:	movt	r1, #1
   12874:	bl	11140 <dcgettext@plt>
   12878:	mov	r4, r0
   1287c:	mov	r0, r8
   12880:	bl	18fbc <__assert_fail@plt+0x7c18>
   12884:	mov	r3, r0
   12888:	mov	r0, #0
   1288c:	mov	r1, #0
   12890:	mov	r2, r4
   12894:	bl	111c4 <error@plt>
   12898:	mov	r0, #1
   1289c:	bl	114a0 <__assert_fail@plt+0xfc>
   128a0:	movw	r1, #49576	; 0xc1a8
   128a4:	movt	r1, #2
   128a8:	str	r0, [r1, #4]
   128ac:	bx	lr
   128b0:	movw	r1, #49576	; 0xc1a8
   128b4:	movt	r1, #2
   128b8:	strb	r0, [r1]
   128bc:	bx	lr
   128c0:	push	{r4, r5, r6, sl, fp, lr}
   128c4:	add	fp, sp, #16
   128c8:	sub	sp, sp, #8
   128cc:	movw	r0, #49532	; 0xc17c
   128d0:	movt	r0, #2
   128d4:	ldr	r0, [r0]
   128d8:	bl	19e08 <__assert_fail@plt+0x8a64>
   128dc:	cmp	r0, #0
   128e0:	beq	12908 <__assert_fail@plt+0x1564>
   128e4:	movw	r5, #49576	; 0xc1a8
   128e8:	movt	r5, #2
   128ec:	ldrb	r0, [r5]
   128f0:	cmp	r0, #0
   128f4:	beq	12934 <__assert_fail@plt+0x1590>
   128f8:	bl	11260 <__errno_location@plt>
   128fc:	ldr	r0, [r0]
   12900:	cmp	r0, #32
   12904:	bne	12934 <__assert_fail@plt+0x1590>
   12908:	movw	r0, #49528	; 0xc178
   1290c:	movt	r0, #2
   12910:	ldr	r0, [r0]
   12914:	bl	19e08 <__assert_fail@plt+0x8a64>
   12918:	cmp	r0, #0
   1291c:	subeq	sp, fp, #16
   12920:	popeq	{r4, r5, r6, sl, fp, pc}
   12924:	movw	r0, #49440	; 0xc120
   12928:	movt	r0, #2
   1292c:	ldr	r0, [r0]
   12930:	bl	1111c <_exit@plt>
   12934:	movw	r1, #45423	; 0xb16f
   12938:	mov	r0, #0
   1293c:	mov	r2, #5
   12940:	movt	r1, #1
   12944:	bl	11140 <dcgettext@plt>
   12948:	ldr	r6, [r5, #4]
   1294c:	mov	r4, r0
   12950:	bl	11260 <__errno_location@plt>
   12954:	ldr	r5, [r0]
   12958:	cmp	r6, #0
   1295c:	bne	12978 <__assert_fail@plt+0x15d4>
   12960:	movw	r2, #44014	; 0xabee
   12964:	mov	r0, #0
   12968:	mov	r1, r5
   1296c:	mov	r3, r4
   12970:	movt	r2, #1
   12974:	b	12998 <__assert_fail@plt+0x15f4>
   12978:	mov	r0, r6
   1297c:	bl	18c34 <__assert_fail@plt+0x7890>
   12980:	movw	r2, #45435	; 0xb17b
   12984:	mov	r3, r0
   12988:	str	r4, [sp]
   1298c:	mov	r0, #0
   12990:	mov	r1, r5
   12994:	movt	r2, #1
   12998:	bl	111c4 <error@plt>
   1299c:	movw	r0, #49440	; 0xc120
   129a0:	movt	r0, #2
   129a4:	ldr	r0, [r0]
   129a8:	bl	1111c <_exit@plt>
   129ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129b0:	add	fp, sp, #28
   129b4:	sub	sp, sp, #140	; 0x8c
   129b8:	mov	r8, r2
   129bc:	mov	r5, r1
   129c0:	mov	r6, r0
   129c4:	cmp	r3, #256	; 0x100
   129c8:	bne	12ad4 <__assert_fail@plt+0x1730>
   129cc:	mov	r0, r6
   129d0:	mov	r1, r5
   129d4:	mov	r2, #2654208	; 0x288000
   129d8:	bl	11248 <openat64@plt>
   129dc:	mov	r4, r0
   129e0:	cmp	r0, #0
   129e4:	bmi	12a38 <__assert_fail@plt+0x1694>
   129e8:	movw	r2, #43106	; 0xa862
   129ec:	mov	r0, #4096	; 0x1000
   129f0:	add	r3, sp, #32
   129f4:	mov	r1, r4
   129f8:	movt	r2, #1
   129fc:	str	r0, [sp]
   12a00:	mov	r0, #3
   12a04:	bl	11164 <__fxstatat64@plt>
   12a08:	cmp	r0, #0
   12a0c:	beq	12a48 <__assert_fail@plt+0x16a4>
   12a10:	bl	11260 <__errno_location@plt>
   12a14:	ldr	r6, [r0]
   12a18:	mov	r5, r0
   12a1c:	mov	r0, r4
   12a20:	bl	11380 <close@plt>
   12a24:	str	r6, [r5]
   12a28:	mvn	r7, #0
   12a2c:	mov	r0, r7
   12a30:	sub	sp, fp, #28
   12a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a38:	mov	r7, r4
   12a3c:	mov	r0, r7
   12a40:	sub	sp, fp, #28
   12a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a48:	ldr	r0, [sp, #48]	; 0x30
   12a4c:	and	r0, r0, #61440	; 0xf000
   12a50:	cmp	r0, #40960	; 0xa000
   12a54:	bne	12a7c <__assert_fail@plt+0x16d8>
   12a58:	mov	r0, r4
   12a5c:	bl	11380 <close@plt>
   12a60:	bl	11260 <__errno_location@plt>
   12a64:	mov	r1, #95	; 0x5f
   12a68:	mvn	r7, #0
   12a6c:	str	r1, [r0]
   12a70:	mov	r0, r7
   12a74:	sub	sp, fp, #28
   12a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a7c:	movw	r3, #45442	; 0xb182
   12a80:	add	r7, sp, #6
   12a84:	mov	r1, #1
   12a88:	mov	r2, #26
   12a8c:	str	r4, [sp]
   12a90:	movt	r3, #1
   12a94:	mov	r0, r7
   12a98:	bl	1126c <__sprintf_chk@plt>
   12a9c:	mov	r0, r7
   12aa0:	mov	r1, r8
   12aa4:	bl	11350 <chmod@plt>
   12aa8:	mov	r7, r0
   12aac:	bl	11260 <__errno_location@plt>
   12ab0:	ldr	sl, [r0]
   12ab4:	mov	r9, r0
   12ab8:	mov	r0, r4
   12abc:	bl	11380 <close@plt>
   12ac0:	cmp	r7, #0
   12ac4:	beq	12ae8 <__assert_fail@plt+0x1744>
   12ac8:	cmp	sl, #2
   12acc:	bne	12af4 <__assert_fail@plt+0x1750>
   12ad0:	mov	r3, #0
   12ad4:	mov	r0, r6
   12ad8:	mov	r1, r5
   12adc:	mov	r2, r8
   12ae0:	bl	11254 <fchmodat@plt>
   12ae4:	mov	r7, r0
   12ae8:	mov	r0, r7
   12aec:	sub	sp, fp, #28
   12af0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12af4:	str	sl, [r9]
   12af8:	mov	r0, r7
   12afc:	sub	sp, fp, #28
   12b00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b04:	push	{fp, lr}
   12b08:	mov	fp, sp
   12b0c:	and	r2, r0, #61440	; 0xf000
   12b10:	sub	r2, r2, #4096	; 0x1000
   12b14:	lsr	r3, r2, #12
   12b18:	cmp	r3, #11
   12b1c:	bhi	12b6c <__assert_fail@plt+0x17c8>
   12b20:	add	r2, pc, #4
   12b24:	mov	ip, #45	; 0x2d
   12b28:	ldr	pc, [r2, r3, lsl #2]
   12b2c:	andeq	r2, r1, ip, asr fp
   12b30:	andeq	r2, r1, r4, ror #22
   12b34:	andeq	r2, r1, ip, ror #22
   12b38:	andeq	r2, r1, r4, ror fp
   12b3c:	andeq	r2, r1, ip, ror #22
   12b40:	andeq	r2, r1, ip, lsl #23
   12b44:	andeq	r2, r1, ip, ror #22
   12b48:	muleq	r1, r0, fp
   12b4c:	andeq	r2, r1, ip, ror #22
   12b50:	andeq	r2, r1, ip, ror fp
   12b54:	andeq	r2, r1, ip, ror #22
   12b58:	andeq	r2, r1, r4, lsl #23
   12b5c:	mov	ip, #112	; 0x70
   12b60:	b	12b90 <__assert_fail@plt+0x17ec>
   12b64:	mov	ip, #99	; 0x63
   12b68:	b	12b90 <__assert_fail@plt+0x17ec>
   12b6c:	mov	ip, #63	; 0x3f
   12b70:	b	12b90 <__assert_fail@plt+0x17ec>
   12b74:	mov	ip, #100	; 0x64
   12b78:	b	12b90 <__assert_fail@plt+0x17ec>
   12b7c:	mov	ip, #108	; 0x6c
   12b80:	b	12b90 <__assert_fail@plt+0x17ec>
   12b84:	mov	ip, #115	; 0x73
   12b88:	b	12b90 <__assert_fail@plt+0x17ec>
   12b8c:	mov	ip, #98	; 0x62
   12b90:	tst	r0, #2
   12b94:	mov	r3, #119	; 0x77
   12b98:	mov	r2, #32
   12b9c:	mov	lr, #45	; 0x2d
   12ba0:	movweq	r3, #45	; 0x2d
   12ba4:	tst	r0, #4
   12ba8:	strh	r2, [r1, #10]
   12bac:	mov	r2, #114	; 0x72
   12bb0:	strb	ip, [r1]
   12bb4:	mov	ip, #119	; 0x77
   12bb8:	movweq	r2, #45	; 0x2d
   12bbc:	tst	r0, #16
   12bc0:	strb	r3, [r1, #8]
   12bc4:	mov	r3, #114	; 0x72
   12bc8:	strb	r2, [r1, #7]
   12bcc:	mov	r2, #119	; 0x77
   12bd0:	movweq	r2, #45	; 0x2d
   12bd4:	tst	r0, #32
   12bd8:	strb	r2, [r1, #5]
   12bdc:	mov	r2, #114	; 0x72
   12be0:	movweq	r2, #45	; 0x2d
   12be4:	tst	r0, #128	; 0x80
   12be8:	movweq	ip, #45	; 0x2d
   12bec:	tst	r0, #256	; 0x100
   12bf0:	strb	r2, [r1, #4]
   12bf4:	movweq	r3, #45	; 0x2d
   12bf8:	ands	r2, r0, #1
   12bfc:	strb	ip, [r1, #2]
   12c00:	mov	r2, #84	; 0x54
   12c04:	mov	ip, #45	; 0x2d
   12c08:	strb	r3, [r1, #1]
   12c0c:	mov	r3, #45	; 0x2d
   12c10:	movwne	r3, #120	; 0x78
   12c14:	movwne	r2, #116	; 0x74
   12c18:	tst	r0, #512	; 0x200
   12c1c:	moveq	r2, r3
   12c20:	mov	r3, #83	; 0x53
   12c24:	strb	r2, [r1, #9]
   12c28:	ands	r2, r0, #8
   12c2c:	mov	r2, #83	; 0x53
   12c30:	movwne	lr, #120	; 0x78
   12c34:	movwne	r2, #115	; 0x73
   12c38:	tst	r0, #1024	; 0x400
   12c3c:	moveq	r2, lr
   12c40:	strb	r2, [r1, #6]
   12c44:	ands	r2, r0, #64	; 0x40
   12c48:	movwne	ip, #120	; 0x78
   12c4c:	movwne	r3, #115	; 0x73
   12c50:	tst	r0, #2048	; 0x800
   12c54:	moveq	r3, ip
   12c58:	strb	r3, [r1, #3]
   12c5c:	pop	{fp, pc}
   12c60:	ldr	r0, [r0, #16]
   12c64:	b	12b04 <__assert_fail@plt+0x1760>
   12c68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c6c:	add	fp, sp, #28
   12c70:	sub	sp, sp, #28
   12c74:	cmp	r1, #4096	; 0x1000
   12c78:	bcs	12c94 <__assert_fail@plt+0x18f0>
   12c7c:	mov	sl, r0
   12c80:	and	r0, r1, #516	; 0x204
   12c84:	mov	r6, r1
   12c88:	cmp	r0, #516	; 0x204
   12c8c:	tstne	r6, #18
   12c90:	bne	12cb0 <__assert_fail@plt+0x190c>
   12c94:	bl	11260 <__errno_location@plt>
   12c98:	mov	r1, #22
   12c9c:	mov	r4, #0
   12ca0:	str	r1, [r0]
   12ca4:	mov	r0, r4
   12ca8:	sub	sp, fp, #28
   12cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cb0:	mov	r0, #1
   12cb4:	mov	r1, #96	; 0x60
   12cb8:	mov	r5, r2
   12cbc:	bl	19d30 <__assert_fail@plt+0x898c>
   12cc0:	cmp	r0, #0
   12cc4:	beq	132a4 <__assert_fail@plt+0x1f00>
   12cc8:	mov	r4, r0
   12ccc:	mvn	r0, #99	; 0x63
   12cd0:	tst	r6, #2
   12cd4:	mov	r1, r6
   12cd8:	str	r0, [r4, #32]
   12cdc:	bic	r0, r6, #516	; 0x204
   12ce0:	str	r5, [r4, #44]	; 0x2c
   12ce4:	str	r4, [sp, #24]
   12ce8:	orrne	r1, r0, #4
   12cec:	str	r1, [r4, #48]	; 0x30
   12cf0:	ldr	r0, [sl]
   12cf4:	cmp	r0, #0
   12cf8:	beq	12d5c <__assert_fail@plt+0x19b8>
   12cfc:	add	r7, sl, #4
   12d00:	mov	r4, #0
   12d04:	bl	1123c <strlen@plt>
   12d08:	cmp	r0, r4
   12d0c:	movhi	r4, r0
   12d10:	ldr	r0, [r7], #4
   12d14:	cmp	r0, #0
   12d18:	bne	12d04 <__assert_fail@plt+0x1960>
   12d1c:	add	r0, r4, #1
   12d20:	ldr	r4, [sp, #24]
   12d24:	cmp	r0, #4096	; 0x1000
   12d28:	movls	r0, #4096	; 0x1000
   12d2c:	ldr	r1, [r4, #36]	; 0x24
   12d30:	add	r0, r0, #256	; 0x100
   12d34:	adds	r1, r0, r1
   12d38:	bcc	12d70 <__assert_fail@plt+0x19cc>
   12d3c:	ldr	r0, [r4, #24]
   12d40:	bl	1a290 <__assert_fail@plt+0x8eec>
   12d44:	mov	r0, #0
   12d48:	str	r0, [r4, #24]
   12d4c:	bl	11260 <__errno_location@plt>
   12d50:	mov	r1, #36	; 0x24
   12d54:	str	r1, [r0]
   12d58:	b	1329c <__assert_fail@plt+0x1ef8>
   12d5c:	mov	r0, #4096	; 0x1000
   12d60:	ldr	r1, [r4, #36]	; 0x24
   12d64:	add	r0, r0, #256	; 0x100
   12d68:	adds	r1, r0, r1
   12d6c:	bcs	12d3c <__assert_fail@plt+0x1998>
   12d70:	str	r1, [r4, #36]	; 0x24
   12d74:	ldr	r0, [r4, #24]
   12d78:	bl	19db4 <__assert_fail@plt+0x8a10>
   12d7c:	cmp	r0, #0
   12d80:	beq	12f7c <__assert_fail@plt+0x1bd8>
   12d84:	str	r0, [r4, #24]
   12d88:	ldr	r0, [sl]
   12d8c:	cmp	r0, #0
   12d90:	beq	12f90 <__assert_fail@plt+0x1bec>
   12d94:	mov	r0, #176	; 0xb0
   12d98:	bl	19d84 <__assert_fail@plt+0x89e0>
   12d9c:	cmp	r0, #0
   12da0:	beq	13294 <__assert_fail@plt+0x1ef0>
   12da4:	ldr	r1, [r4, #24]
   12da8:	mov	r7, r0
   12dac:	mov	r0, #0
   12db0:	mov	r2, #196608	; 0x30000
   12db4:	strb	r0, [r7, #168]	; 0xa8
   12db8:	str	r2, [r7, #58]	; 0x3a
   12dbc:	mvn	r2, #0
   12dc0:	str	r4, [r7, #44]	; 0x2c
   12dc4:	str	r2, [r7, #48]	; 0x30
   12dc8:	str	r0, [r7, #52]	; 0x34
   12dcc:	str	r0, [r7, #12]
   12dd0:	str	r0, [r7, #16]
   12dd4:	str	r0, [r7, #20]
   12dd8:	str	r1, [r7, #28]
   12ddc:	str	r0, [r7, #32]
   12de0:	cmp	r5, #0
   12de4:	beq	12f9c <__assert_fail@plt+0x1bf8>
   12de8:	ldrb	r0, [r4, #49]	; 0x31
   12dec:	ubfx	r0, r0, #2, #1
   12df0:	ldr	r4, [sl]
   12df4:	str	r0, [sp, #12]
   12df8:	cmp	r4, #0
   12dfc:	beq	12fb0 <__assert_fail@plt+0x1c0c>
   12e00:	tst	r6, #2048	; 0x800
   12e04:	str	r5, [sp, #16]
   12e08:	str	r7, [sp, #20]
   12e0c:	bne	12fd4 <__assert_fail@plt+0x1c30>
   12e10:	mov	r0, #0
   12e14:	mov	r8, #0
   12e18:	mov	r5, #0
   12e1c:	str	r0, [sp, #8]
   12e20:	b	12e74 <__assert_fail@plt+0x1ad0>
   12e24:	cmp	r8, #0
   12e28:	str	r4, [r7, #8]
   12e2c:	beq	12e50 <__assert_fail@plt+0x1aac>
   12e30:	ldr	r0, [sp, #8]
   12e34:	str	r7, [sp, #8]
   12e38:	str	r7, [r0, #8]
   12e3c:	ldr	r4, [sl, #4]!
   12e40:	add	r5, r5, #1
   12e44:	cmp	r4, #0
   12e48:	bne	12e74 <__assert_fail@plt+0x1ad0>
   12e4c:	b	13128 <__assert_fail@plt+0x1d84>
   12e50:	mov	r0, r7
   12e54:	str	r7, [sp, #8]
   12e58:	b	12e60 <__assert_fail@plt+0x1abc>
   12e5c:	str	r8, [r7, #8]
   12e60:	mov	r8, r7
   12e64:	ldr	r4, [sl, #4]!
   12e68:	add	r5, r5, #1
   12e6c:	cmp	r4, #0
   12e70:	beq	13128 <__assert_fail@plt+0x1d84>
   12e74:	mov	r0, r4
   12e78:	bl	1123c <strlen@plt>
   12e7c:	mov	r9, r0
   12e80:	cmp	r0, #3
   12e84:	bcc	12eb4 <__assert_fail@plt+0x1b10>
   12e88:	add	r0, r9, r4
   12e8c:	ldrb	r0, [r0, #-1]
   12e90:	cmp	r0, #47	; 0x2f
   12e94:	bne	12eb4 <__assert_fail@plt+0x1b10>
   12e98:	sub	r0, r4, #2
   12e9c:	ldrb	r1, [r0, r9]
   12ea0:	cmp	r1, #47	; 0x2f
   12ea4:	bne	12eb4 <__assert_fail@plt+0x1b10>
   12ea8:	sub	r9, r9, #1
   12eac:	cmp	r9, #1
   12eb0:	bhi	12e9c <__assert_fail@plt+0x1af8>
   12eb4:	add	r0, r9, #176	; 0xb0
   12eb8:	bic	r0, r0, #7
   12ebc:	bl	19d84 <__assert_fail@plt+0x89e0>
   12ec0:	cmp	r0, #0
   12ec4:	beq	13118 <__assert_fail@plt+0x1d74>
   12ec8:	add	r6, r0, #168	; 0xa8
   12ecc:	mov	r7, r0
   12ed0:	mov	r1, r4
   12ed4:	mov	r2, r9
   12ed8:	mov	r0, r6
   12edc:	bl	11128 <memcpy@plt>
   12ee0:	ldr	r0, [sp, #24]
   12ee4:	ldr	r1, [sp, #20]
   12ee8:	mov	r4, #0
   12eec:	cmp	r8, #0
   12ef0:	strb	r4, [r6, r9]
   12ef4:	ldr	r2, [r0, #24]
   12ef8:	str	r1, [r7, #4]
   12efc:	add	r1, r7, #44	; 0x2c
   12f00:	stm	r1, {r0, r4, r9}
   12f04:	mov	r1, #196608	; 0x30000
   12f08:	str	r1, [r7, #58]	; 0x3a
   12f0c:	str	r4, [r7, #12]
   12f10:	str	r4, [r7, #16]
   12f14:	str	r4, [r7, #20]
   12f18:	str	r6, [r7, #24]
   12f1c:	mov	r1, r8
   12f20:	movwne	r1, #1
   12f24:	str	r2, [r7, #28]
   12f28:	ldr	r2, [sp, #12]
   12f2c:	str	r4, [r7, #32]
   12f30:	tst	r2, r1
   12f34:	beq	12f5c <__assert_fail@plt+0x1bb8>
   12f38:	mov	r0, #2
   12f3c:	str	r0, [r7, #112]	; 0x70
   12f40:	mov	r0, #11
   12f44:	str	r4, [r7, #116]	; 0x74
   12f48:	strh	r0, [r7, #56]	; 0x38
   12f4c:	ldr	r0, [sp, #16]
   12f50:	cmp	r0, #0
   12f54:	bne	12e5c <__assert_fail@plt+0x1ab8>
   12f58:	b	12e24 <__assert_fail@plt+0x1a80>
   12f5c:	mov	r1, r7
   12f60:	mov	r2, #0
   12f64:	bl	13318 <__assert_fail@plt+0x1f74>
   12f68:	strh	r0, [r7, #56]	; 0x38
   12f6c:	ldr	r0, [sp, #16]
   12f70:	cmp	r0, #0
   12f74:	bne	12e5c <__assert_fail@plt+0x1ab8>
   12f78:	b	12e24 <__assert_fail@plt+0x1a80>
   12f7c:	ldr	r0, [r4, #24]
   12f80:	bl	1a290 <__assert_fail@plt+0x8eec>
   12f84:	mov	r0, #0
   12f88:	str	r0, [r4, #24]
   12f8c:	b	1329c <__assert_fail@plt+0x1ef8>
   12f90:	mov	r7, #0
   12f94:	cmp	r5, #0
   12f98:	bne	12de8 <__assert_fail@plt+0x1a44>
   12f9c:	mov	r0, #1
   12fa0:	ldr	r4, [sl]
   12fa4:	str	r0, [sp, #12]
   12fa8:	cmp	r4, #0
   12fac:	bne	12e00 <__assert_fail@plt+0x1a5c>
   12fb0:	ldr	r4, [sp, #24]
   12fb4:	mov	r8, #0
   12fb8:	mov	r0, #176	; 0xb0
   12fbc:	bl	19d84 <__assert_fail@plt+0x89e0>
   12fc0:	cmp	r0, #0
   12fc4:	bne	13180 <__assert_fail@plt+0x1ddc>
   12fc8:	mov	r0, #0
   12fcc:	str	r0, [r4]
   12fd0:	b	13250 <__assert_fail@plt+0x1eac>
   12fd4:	add	r0, sl, #4
   12fd8:	mov	r9, #0
   12fdc:	mov	r8, #0
   12fe0:	mov	r5, #0
   12fe4:	str	r0, [sp, #8]
   12fe8:	ldr	r0, [sp, #12]
   12fec:	eor	r0, r0, #1
   12ff0:	str	r0, [sp, #12]
   12ff4:	mov	r0, #0
   12ff8:	str	r0, [sp, #4]
   12ffc:	b	13030 <__assert_fail@plt+0x1c8c>
   13000:	cmp	r8, #0
   13004:	str	r9, [r5, #8]
   13008:	beq	1310c <__assert_fail@plt+0x1d68>
   1300c:	ldr	r0, [sp, #4]
   13010:	str	r5, [sp, #4]
   13014:	str	r5, [r0, #8]
   13018:	ldr	r0, [sp, #8]
   1301c:	mov	r5, sl
   13020:	add	r5, sl, #1
   13024:	ldr	r4, [r0, sl, lsl #2]
   13028:	cmp	r4, #0
   1302c:	beq	13128 <__assert_fail@plt+0x1d84>
   13030:	mov	r0, r4
   13034:	mov	sl, r5
   13038:	bl	1123c <strlen@plt>
   1303c:	mov	r7, r0
   13040:	add	r0, r0, #176	; 0xb0
   13044:	bic	r0, r0, #7
   13048:	bl	19d84 <__assert_fail@plt+0x89e0>
   1304c:	cmp	r0, #0
   13050:	beq	13118 <__assert_fail@plt+0x1d74>
   13054:	add	r6, r0, #168	; 0xa8
   13058:	mov	r5, r0
   1305c:	mov	r1, r4
   13060:	mov	r2, r7
   13064:	mov	r0, r6
   13068:	bl	11128 <memcpy@plt>
   1306c:	ldr	r0, [sp, #24]
   13070:	ldr	r1, [sp, #20]
   13074:	strb	r9, [r6, r7]
   13078:	ldr	r2, [r0, #24]
   1307c:	str	r1, [r5, #4]
   13080:	mov	r1, #196608	; 0x30000
   13084:	str	r0, [r5, #44]	; 0x2c
   13088:	str	r9, [r5, #48]	; 0x30
   1308c:	str	r7, [r5, #52]	; 0x34
   13090:	str	r1, [r5, #58]	; 0x3a
   13094:	str	r9, [r5, #12]
   13098:	str	r9, [r5, #16]
   1309c:	str	r9, [r5, #20]
   130a0:	str	r6, [r5, #24]
   130a4:	clz	r1, r8
   130a8:	lsr	r1, r1, #5
   130ac:	str	r2, [r5, #28]
   130b0:	ldr	r2, [sp, #12]
   130b4:	str	r9, [r5, #32]
   130b8:	orrs	r1, r2, r1
   130bc:	bne	130e4 <__assert_fail@plt+0x1d40>
   130c0:	mov	r0, #2
   130c4:	str	r0, [r5, #112]	; 0x70
   130c8:	str	r9, [r5, #116]	; 0x74
   130cc:	mov	r0, #11
   130d0:	strh	r0, [r5, #56]	; 0x38
   130d4:	ldr	r0, [sp, #16]
   130d8:	cmp	r0, #0
   130dc:	bne	13100 <__assert_fail@plt+0x1d5c>
   130e0:	b	13000 <__assert_fail@plt+0x1c5c>
   130e4:	mov	r1, r5
   130e8:	mov	r2, #0
   130ec:	bl	13318 <__assert_fail@plt+0x1f74>
   130f0:	strh	r0, [r5, #56]	; 0x38
   130f4:	ldr	r0, [sp, #16]
   130f8:	cmp	r0, #0
   130fc:	beq	13000 <__assert_fail@plt+0x1c5c>
   13100:	str	r8, [r5, #8]
   13104:	mov	r8, r5
   13108:	b	13018 <__assert_fail@plt+0x1c74>
   1310c:	mov	r0, r5
   13110:	str	r5, [sp, #4]
   13114:	b	13104 <__assert_fail@plt+0x1d60>
   13118:	ldr	r7, [sp, #20]
   1311c:	cmp	r8, #0
   13120:	bne	13270 <__assert_fail@plt+0x1ecc>
   13124:	b	13288 <__assert_fail@plt+0x1ee4>
   13128:	ldr	r0, [sp, #16]
   1312c:	ldr	r7, [sp, #20]
   13130:	cmp	r0, #0
   13134:	beq	1316c <__assert_fail@plt+0x1dc8>
   13138:	ldr	r4, [sp, #24]
   1313c:	cmp	r5, #2
   13140:	bcc	13170 <__assert_fail@plt+0x1dcc>
   13144:	mov	r0, r4
   13148:	mov	r1, r8
   1314c:	mov	r2, r5
   13150:	bl	134b0 <__assert_fail@plt+0x210c>
   13154:	mov	r8, r0
   13158:	mov	r0, #176	; 0xb0
   1315c:	bl	19d84 <__assert_fail@plt+0x89e0>
   13160:	cmp	r0, #0
   13164:	bne	13180 <__assert_fail@plt+0x1ddc>
   13168:	b	12fc8 <__assert_fail@plt+0x1c24>
   1316c:	ldr	r4, [sp, #24]
   13170:	mov	r0, #176	; 0xb0
   13174:	bl	19d84 <__assert_fail@plt+0x89e0>
   13178:	cmp	r0, #0
   1317c:	beq	12fc8 <__assert_fail@plt+0x1c24>
   13180:	ldr	r2, [r4, #24]
   13184:	mov	r1, #0
   13188:	mov	r3, #196608	; 0x30000
   1318c:	str	r0, [r4]
   13190:	str	r1, [r0, #52]	; 0x34
   13194:	strb	r1, [r0, #168]	; 0xa8
   13198:	str	r4, [r0, #44]	; 0x2c
   1319c:	str	r3, [r0, #58]	; 0x3a
   131a0:	str	r2, [r0, #28]
   131a4:	mov	r2, #9
   131a8:	str	r1, [r0, #32]
   131ac:	strh	r2, [r0, #56]	; 0x38
   131b0:	str	r8, [r0, #8]
   131b4:	str	r1, [r0, #12]
   131b8:	str	r1, [r0, #16]
   131bc:	str	r1, [r0, #20]
   131c0:	mov	r1, #1
   131c4:	str	r1, [r0, #48]	; 0x30
   131c8:	ldrh	r0, [r4, #48]	; 0x30
   131cc:	movw	r1, #258	; 0x102
   131d0:	tst	r0, r1
   131d4:	beq	13210 <__assert_fail@plt+0x1e6c>
   131d8:	movw	r0, #41616	; 0xa290
   131dc:	movw	r2, #21088	; 0x5260
   131e0:	movw	r3, #21120	; 0x5280
   131e4:	mov	r1, #0
   131e8:	movt	r0, #1
   131ec:	movt	r2, #1
   131f0:	movt	r3, #1
   131f4:	str	r0, [sp]
   131f8:	mov	r0, #31
   131fc:	bl	15974 <__assert_fail@plt+0x45d0>
   13200:	cmp	r0, #0
   13204:	str	r0, [r4, #56]	; 0x38
   13208:	bne	13228 <__assert_fail@plt+0x1e84>
   1320c:	b	13250 <__assert_fail@plt+0x1eac>
   13210:	mov	r0, #32
   13214:	bl	19d84 <__assert_fail@plt+0x89e0>
   13218:	cmp	r0, #0
   1321c:	str	r0, [r4, #56]	; 0x38
   13220:	beq	13250 <__assert_fail@plt+0x1eac>
   13224:	bl	19e8c <__assert_fail@plt+0x8ae8>
   13228:	ldr	r4, [sp, #24]
   1322c:	ldr	r0, [r4, #48]	; 0x30
   13230:	tst	r0, #516	; 0x204
   13234:	beq	132b4 <__assert_fail@plt+0x1f10>
   13238:	add	r0, r4, #60	; 0x3c
   1323c:	mvn	r1, #0
   13240:	bl	168d0 <__assert_fail@plt+0x552c>
   13244:	mov	r0, r4
   13248:	sub	sp, fp, #28
   1324c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13250:	cmp	r8, #0
   13254:	bne	13270 <__assert_fail@plt+0x1ecc>
   13258:	b	13288 <__assert_fail@plt+0x1ee4>
   1325c:	mov	r0, r8
   13260:	bl	1a290 <__assert_fail@plt+0x8eec>
   13264:	cmp	r4, #0
   13268:	mov	r8, r4
   1326c:	beq	13288 <__assert_fail@plt+0x1ee4>
   13270:	ldrd	r4, [r8, #8]
   13274:	cmp	r5, #0
   13278:	beq	1325c <__assert_fail@plt+0x1eb8>
   1327c:	mov	r0, r5
   13280:	bl	11398 <closedir@plt>
   13284:	b	1325c <__assert_fail@plt+0x1eb8>
   13288:	mov	r0, r7
   1328c:	bl	1a290 <__assert_fail@plt+0x8eec>
   13290:	ldr	r4, [sp, #24]
   13294:	ldr	r0, [r4, #24]
   13298:	bl	1a290 <__assert_fail@plt+0x8eec>
   1329c:	mov	r0, r4
   132a0:	bl	1a290 <__assert_fail@plt+0x8eec>
   132a4:	mov	r4, #0
   132a8:	mov	r0, r4
   132ac:	sub	sp, fp, #28
   132b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132b4:	mov	r1, #32768	; 0x8000
   132b8:	tst	r0, #512	; 0x200
   132bc:	and	r1, r1, r0, lsl #11
   132c0:	orr	r1, r1, #18688	; 0x4900
   132c4:	orr	r2, r1, #524288	; 0x80000
   132c8:	bne	132ec <__assert_fail@plt+0x1f48>
   132cc:	movw	r0, #45460	; 0xb194
   132d0:	mov	r1, r2
   132d4:	movt	r0, #1
   132d8:	bl	1a1f8 <__assert_fail@plt+0x8e54>
   132dc:	cmn	r0, #1
   132e0:	str	r0, [r4, #28]
   132e4:	bgt	13238 <__assert_fail@plt+0x1e94>
   132e8:	b	13308 <__assert_fail@plt+0x1f64>
   132ec:	ldr	r0, [r4, #32]
   132f0:	movw	r1, #45460	; 0xb194
   132f4:	movt	r1, #1
   132f8:	bl	16f60 <__assert_fail@plt+0x5bbc>
   132fc:	cmn	r0, #1
   13300:	str	r0, [r4, #28]
   13304:	bgt	13238 <__assert_fail@plt+0x1e94>
   13308:	ldr	r0, [r4, #48]	; 0x30
   1330c:	orr	r0, r0, #4
   13310:	str	r0, [r4, #48]	; 0x30
   13314:	b	13238 <__assert_fail@plt+0x1e94>
   13318:	push	{r4, r5, r6, sl, fp, lr}
   1331c:	add	fp, sp, #16
   13320:	sub	sp, sp, #8
   13324:	mov	r4, r1
   13328:	ldr	r1, [r0, #48]	; 0x30
   1332c:	ldr	r3, [r4, #48]	; 0x30
   13330:	add	r5, r4, #64	; 0x40
   13334:	cmp	r3, #0
   13338:	andeq	r3, r1, #1
   1333c:	orreq	r2, r3, r2
   13340:	cmp	r2, #0
   13344:	andseq	r1, r1, #2
   13348:	beq	133a4 <__assert_fail@plt+0x2000>
   1334c:	ldr	r1, [r4, #24]
   13350:	mov	r0, #3
   13354:	mov	r2, r5
   13358:	bl	1135c <__xstat64@plt>
   1335c:	cmp	r0, #0
   13360:	beq	13424 <__assert_fail@plt+0x2080>
   13364:	bl	11260 <__errno_location@plt>
   13368:	mov	r6, r0
   1336c:	ldr	r0, [r0]
   13370:	cmp	r0, #2
   13374:	bne	133d4 <__assert_fail@plt+0x2030>
   13378:	ldr	r1, [r4, #24]
   1337c:	mov	r0, #3
   13380:	mov	r2, r5
   13384:	bl	1138c <__lxstat64@plt>
   13388:	cmp	r0, #0
   1338c:	bne	133d0 <__assert_fail@plt+0x202c>
   13390:	mov	r0, #0
   13394:	str	r0, [r6]
   13398:	mov	r0, #13
   1339c:	sub	sp, fp, #16
   133a0:	pop	{r4, r5, r6, sl, fp, pc}
   133a4:	ldr	r1, [r0, #32]
   133a8:	ldr	r2, [r4, #24]
   133ac:	mov	r0, #256	; 0x100
   133b0:	mov	r3, r5
   133b4:	str	r0, [sp]
   133b8:	mov	r0, #3
   133bc:	bl	11164 <__fxstatat64@plt>
   133c0:	cmp	r0, #0
   133c4:	beq	13424 <__assert_fail@plt+0x2080>
   133c8:	bl	11260 <__errno_location@plt>
   133cc:	mov	r6, r0
   133d0:	ldr	r0, [r6]
   133d4:	vmov.i32	q8, #0	; 0x00000000
   133d8:	add	r1, r5, #80	; 0x50
   133dc:	str	r0, [r4, #32]
   133e0:	mov	r0, #0
   133e4:	str	r0, [r5, #96]	; 0x60
   133e8:	vst1.64	{d16-d17}, [r1]
   133ec:	add	r1, r5, #64	; 0x40
   133f0:	vst1.64	{d16-d17}, [r1]
   133f4:	add	r1, r5, #48	; 0x30
   133f8:	vst1.64	{d16-d17}, [r1]
   133fc:	add	r1, r5, #32
   13400:	vst1.64	{d16-d17}, [r1]
   13404:	add	r1, r5, #16
   13408:	vst1.64	{d16-d17}, [r1]
   1340c:	mov	r1, #100	; 0x64
   13410:	vst1.64	{d16-d17}, [r5], r1
   13414:	str	r0, [r5]
   13418:	mov	r0, #10
   1341c:	sub	sp, fp, #16
   13420:	pop	{r4, r5, r6, sl, fp, pc}
   13424:	ldr	r0, [r4, #80]	; 0x50
   13428:	and	r0, r0, #61440	; 0xf000
   1342c:	cmp	r0, #40960	; 0xa000
   13430:	beq	13498 <__assert_fail@plt+0x20f4>
   13434:	cmp	r0, #32768	; 0x8000
   13438:	beq	1348c <__assert_fail@plt+0x20e8>
   1343c:	cmp	r0, #16384	; 0x4000
   13440:	bne	134a4 <__assert_fail@plt+0x2100>
   13444:	ldrb	r1, [r4, #168]	; 0xa8
   13448:	mov	r0, #1
   1344c:	cmp	r1, #46	; 0x2e
   13450:	bne	134a8 <__assert_fail@plt+0x2104>
   13454:	ldrb	r1, [r4, #169]	; 0xa9
   13458:	cmp	r1, #0
   1345c:	beq	13474 <__assert_fail@plt+0x20d0>
   13460:	cmp	r1, #46	; 0x2e
   13464:	bne	134a8 <__assert_fail@plt+0x2104>
   13468:	ldrb	r1, [r4, #170]	; 0xaa
   1346c:	cmp	r1, #0
   13470:	bne	134a8 <__assert_fail@plt+0x2104>
   13474:	ldr	r1, [r4, #48]	; 0x30
   13478:	mov	r0, #5
   1347c:	cmp	r1, #0
   13480:	movweq	r0, #1
   13484:	sub	sp, fp, #16
   13488:	pop	{r4, r5, r6, sl, fp, pc}
   1348c:	mov	r0, #8
   13490:	sub	sp, fp, #16
   13494:	pop	{r4, r5, r6, sl, fp, pc}
   13498:	mov	r0, #12
   1349c:	sub	sp, fp, #16
   134a0:	pop	{r4, r5, r6, sl, fp, pc}
   134a4:	mov	r0, #3
   134a8:	sub	sp, fp, #16
   134ac:	pop	{r4, r5, r6, sl, fp, pc}
   134b0:	push	{r4, r5, r6, r7, fp, lr}
   134b4:	add	fp, sp, #16
   134b8:	mov	r6, r0
   134bc:	ldr	r7, [r0, #44]	; 0x2c
   134c0:	ldr	r0, [r0, #40]	; 0x28
   134c4:	mov	r5, r2
   134c8:	mov	r4, r1
   134cc:	cmp	r0, r2
   134d0:	bcs	13508 <__assert_fail@plt+0x2164>
   134d4:	add	r1, r5, #40	; 0x28
   134d8:	cmn	r1, #-1073741823	; 0xc0000001
   134dc:	str	r1, [r6, #40]	; 0x28
   134e0:	bhi	135ac <__assert_fail@plt+0x2208>
   134e4:	ldr	r0, [r6, #8]
   134e8:	lsl	r1, r1, #2
   134ec:	bl	19db4 <__assert_fail@plt+0x8a10>
   134f0:	cmp	r0, #0
   134f4:	beq	135ac <__assert_fail@plt+0x2208>
   134f8:	str	r0, [r6, #8]
   134fc:	cmp	r4, #0
   13500:	bne	13514 <__assert_fail@plt+0x2170>
   13504:	b	13528 <__assert_fail@plt+0x2184>
   13508:	ldr	r0, [r6, #8]
   1350c:	cmp	r4, #0
   13510:	beq	13528 <__assert_fail@plt+0x2184>
   13514:	str	r4, [r0], #4
   13518:	ldr	r4, [r4, #8]
   1351c:	cmp	r4, #0
   13520:	bne	13514 <__assert_fail@plt+0x2170>
   13524:	ldr	r0, [r6, #8]
   13528:	mov	r1, r5
   1352c:	mov	r2, #4
   13530:	mov	r3, r7
   13534:	bl	1132c <qsort@plt>
   13538:	ldr	r0, [r6, #8]
   1353c:	cmp	r5, #1
   13540:	ldr	r4, [r0]
   13544:	mov	r1, r4
   13548:	beq	135d0 <__assert_fail@plt+0x222c>
   1354c:	mov	r2, r0
   13550:	ldr	r1, [r2, #4]!
   13554:	str	r1, [r4, #8]
   13558:	subs	r1, r5, #2
   1355c:	beq	135c8 <__assert_fail@plt+0x2224>
   13560:	tst	r1, #1
   13564:	beq	1357c <__assert_fail@plt+0x21d8>
   13568:	ldr	r1, [r0, #8]!
   1356c:	ldr	r2, [r0, #-4]
   13570:	str	r1, [r2, #8]
   13574:	sub	r1, r5, #3
   13578:	mov	r2, r0
   1357c:	cmp	r5, #3
   13580:	beq	135cc <__assert_fail@plt+0x2228>
   13584:	mov	r0, r2
   13588:	ldm	r2, {r3, r7}
   1358c:	subs	r1, r1, #2
   13590:	str	r7, [r3, #8]
   13594:	ldr	r3, [r0, #8]!
   13598:	ldr	r2, [r2, #4]
   1359c:	str	r3, [r2, #8]
   135a0:	mov	r2, r0
   135a4:	bne	13588 <__assert_fail@plt+0x21e4>
   135a8:	b	135cc <__assert_fail@plt+0x2228>
   135ac:	ldr	r0, [r6, #8]
   135b0:	bl	1a290 <__assert_fail@plt+0x8eec>
   135b4:	mov	r0, #0
   135b8:	str	r0, [r6, #40]	; 0x28
   135bc:	str	r0, [r6, #8]
   135c0:	mov	r0, r4
   135c4:	pop	{r4, r5, r6, r7, fp, pc}
   135c8:	mov	r0, r2
   135cc:	ldr	r1, [r0]
   135d0:	mov	r0, #0
   135d4:	str	r0, [r1, #8]
   135d8:	mov	r0, r4
   135dc:	pop	{r4, r5, r6, r7, fp, pc}
   135e0:	push	{r4, r5, r6, r7, fp, lr}
   135e4:	add	fp, sp, #16
   135e8:	mov	r4, r0
   135ec:	ldr	r0, [r0]
   135f0:	cmp	r0, #0
   135f4:	beq	13634 <__assert_fail@plt+0x2290>
   135f8:	ldr	r1, [r0, #48]	; 0x30
   135fc:	cmp	r1, #0
   13600:	bmi	13628 <__assert_fail@plt+0x2284>
   13604:	ldr	r5, [r0, #8]
   13608:	cmp	r5, #0
   1360c:	ldreq	r5, [r0, #4]
   13610:	bl	1a290 <__assert_fail@plt+0x8eec>
   13614:	ldr	r0, [r5, #48]	; 0x30
   13618:	cmn	r0, #1
   1361c:	mov	r0, r5
   13620:	bgt	13604 <__assert_fail@plt+0x2260>
   13624:	b	1362c <__assert_fail@plt+0x2288>
   13628:	mov	r5, r0
   1362c:	mov	r0, r5
   13630:	bl	1a290 <__assert_fail@plt+0x8eec>
   13634:	ldr	r5, [r4, #4]
   13638:	cmp	r5, #0
   1363c:	bne	13658 <__assert_fail@plt+0x22b4>
   13640:	b	13670 <__assert_fail@plt+0x22cc>
   13644:	mov	r0, r5
   13648:	bl	1a290 <__assert_fail@plt+0x8eec>
   1364c:	cmp	r6, #0
   13650:	mov	r5, r6
   13654:	beq	13670 <__assert_fail@plt+0x22cc>
   13658:	ldrd	r6, [r5, #8]
   1365c:	cmp	r7, #0
   13660:	beq	13644 <__assert_fail@plt+0x22a0>
   13664:	mov	r0, r7
   13668:	bl	11398 <closedir@plt>
   1366c:	b	13644 <__assert_fail@plt+0x22a0>
   13670:	ldr	r0, [r4, #8]
   13674:	bl	1a290 <__assert_fail@plt+0x8eec>
   13678:	ldr	r0, [r4, #24]
   1367c:	bl	1a290 <__assert_fail@plt+0x8eec>
   13680:	ldr	r0, [r4, #48]	; 0x30
   13684:	tst	r0, #512	; 0x200
   13688:	bne	136c4 <__assert_fail@plt+0x2320>
   1368c:	mov	r6, #0
   13690:	tst	r0, #4
   13694:	bne	136e8 <__assert_fail@plt+0x2344>
   13698:	ldr	r0, [r4, #28]
   1369c:	bl	11320 <fchdir@plt>
   136a0:	cmp	r0, #0
   136a4:	beq	13790 <__assert_fail@plt+0x23ec>
   136a8:	bl	11260 <__errno_location@plt>
   136ac:	ldr	r6, [r0]
   136b0:	ldr	r0, [r4, #28]
   136b4:	bl	11380 <close@plt>
   136b8:	cmp	r6, #0
   136bc:	beq	136d8 <__assert_fail@plt+0x2334>
   136c0:	b	136e8 <__assert_fail@plt+0x2344>
   136c4:	ldr	r0, [r4, #32]
   136c8:	mov	r6, #0
   136cc:	cmp	r0, #0
   136d0:	bmi	136e8 <__assert_fail@plt+0x2344>
   136d4:	bl	11380 <close@plt>
   136d8:	cmp	r0, #0
   136dc:	beq	136e8 <__assert_fail@plt+0x2344>
   136e0:	bl	11260 <__errno_location@plt>
   136e4:	ldr	r6, [r0]
   136e8:	add	r5, r4, #60	; 0x3c
   136ec:	mov	r0, r5
   136f0:	bl	168f4 <__assert_fail@plt+0x5550>
   136f4:	cmp	r0, #0
   136f8:	bne	13720 <__assert_fail@plt+0x237c>
   136fc:	mov	r0, r5
   13700:	bl	16948 <__assert_fail@plt+0x55a4>
   13704:	cmp	r0, #0
   13708:	bmi	136ec <__assert_fail@plt+0x2348>
   1370c:	bl	11380 <close@plt>
   13710:	mov	r0, r5
   13714:	bl	168f4 <__assert_fail@plt+0x5550>
   13718:	cmp	r0, #0
   1371c:	beq	136fc <__assert_fail@plt+0x2358>
   13720:	ldr	r0, [r4, #52]	; 0x34
   13724:	cmp	r0, #0
   13728:	beq	13730 <__assert_fail@plt+0x238c>
   1372c:	bl	15c90 <__assert_fail@plt+0x48ec>
   13730:	ldrh	r0, [r4, #48]	; 0x30
   13734:	movw	r1, #258	; 0x102
   13738:	tst	r0, r1
   1373c:	beq	13770 <__assert_fail@plt+0x23cc>
   13740:	ldr	r0, [r4, #56]	; 0x38
   13744:	cmp	r0, #0
   13748:	beq	13750 <__assert_fail@plt+0x23ac>
   1374c:	bl	15c90 <__assert_fail@plt+0x48ec>
   13750:	mov	r0, r4
   13754:	bl	1a290 <__assert_fail@plt+0x8eec>
   13758:	cmp	r6, #0
   1375c:	beq	13788 <__assert_fail@plt+0x23e4>
   13760:	bl	11260 <__errno_location@plt>
   13764:	str	r6, [r0]
   13768:	mvn	r0, #0
   1376c:	pop	{r4, r5, r6, r7, fp, pc}
   13770:	ldr	r0, [r4, #56]	; 0x38
   13774:	bl	1a290 <__assert_fail@plt+0x8eec>
   13778:	mov	r0, r4
   1377c:	bl	1a290 <__assert_fail@plt+0x8eec>
   13780:	cmp	r6, #0
   13784:	bne	13760 <__assert_fail@plt+0x23bc>
   13788:	mov	r0, #0
   1378c:	pop	{r4, r5, r6, r7, fp, pc}
   13790:	mov	r6, #0
   13794:	ldr	r0, [r4, #28]
   13798:	bl	11380 <close@plt>
   1379c:	cmp	r6, #0
   137a0:	beq	136d8 <__assert_fail@plt+0x2334>
   137a4:	b	136e8 <__assert_fail@plt+0x2344>
   137a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   137ac:	add	fp, sp, #24
   137b0:	sub	sp, sp, #8
   137b4:	ldr	r6, [r0]
   137b8:	mov	r5, #0
   137bc:	cmp	r6, #0
   137c0:	beq	13f68 <__assert_fail@plt+0x2bc4>
   137c4:	mov	r4, r0
   137c8:	ldr	r0, [r0, #48]	; 0x30
   137cc:	tst	r0, #8192	; 0x2000
   137d0:	bne	13f68 <__assert_fail@plt+0x2bc4>
   137d4:	ldrh	r1, [r6, #60]	; 0x3c
   137d8:	mov	r2, #3
   137dc:	strh	r2, [r6, #60]	; 0x3c
   137e0:	cmp	r1, #1
   137e4:	beq	13884 <__assert_fail@plt+0x24e0>
   137e8:	cmp	r1, #2
   137ec:	bne	138a8 <__assert_fail@plt+0x2504>
   137f0:	ldrh	r2, [r6, #56]	; 0x38
   137f4:	bic	r3, r2, #1
   137f8:	cmp	r3, #12
   137fc:	bne	138ac <__assert_fail@plt+0x2508>
   13800:	mov	r0, r4
   13804:	mov	r1, r6
   13808:	mov	r2, #1
   1380c:	bl	13318 <__assert_fail@plt+0x1f74>
   13810:	cmp	r0, #1
   13814:	strh	r0, [r6, #56]	; 0x38
   13818:	bne	13e7c <__assert_fail@plt+0x2ad8>
   1381c:	ldr	r0, [r4, #48]	; 0x30
   13820:	tst	r0, #4
   13824:	bne	13e7c <__assert_fail@plt+0x2ad8>
   13828:	mov	r1, #32768	; 0x8000
   1382c:	tst	r0, #512	; 0x200
   13830:	and	r1, r1, r0, lsl #11
   13834:	orr	r1, r1, #18688	; 0x4900
   13838:	orr	r2, r1, #524288	; 0x80000
   1383c:	bne	13bb0 <__assert_fail@plt+0x280c>
   13840:	movw	r0, #45460	; 0xb194
   13844:	mov	r1, r2
   13848:	movt	r0, #1
   1384c:	bl	1a1f8 <__assert_fail@plt+0x8e54>
   13850:	cmn	r0, #1
   13854:	str	r0, [r6, #36]	; 0x24
   13858:	bgt	13bcc <__assert_fail@plt+0x2828>
   1385c:	bl	11260 <__errno_location@plt>
   13860:	ldr	r0, [r0]
   13864:	mov	r1, #7
   13868:	strh	r1, [r6, #56]	; 0x38
   1386c:	str	r0, [r6, #32]
   13870:	str	r6, [r4]
   13874:	ldrh	r0, [r6, #56]	; 0x38
   13878:	cmp	r0, #11
   1387c:	beq	13e8c <__assert_fail@plt+0x2ae8>
   13880:	b	13ec0 <__assert_fail@plt+0x2b1c>
   13884:	mov	r0, r4
   13888:	mov	r1, r6
   1388c:	mov	r2, #0
   13890:	bl	13318 <__assert_fail@plt+0x1f74>
   13894:	strh	r0, [r6, #56]	; 0x38
   13898:	mov	r5, r6
   1389c:	mov	r0, r5
   138a0:	sub	sp, fp, #24
   138a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   138a8:	ldrh	r2, [r6, #56]	; 0x38
   138ac:	cmp	r2, #1
   138b0:	bne	1390c <__assert_fail@plt+0x2568>
   138b4:	cmp	r1, #4
   138b8:	bne	139c0 <__assert_fail@plt+0x261c>
   138bc:	ldrb	r0, [r6, #58]	; 0x3a
   138c0:	tst	r0, #2
   138c4:	beq	138d0 <__assert_fail@plt+0x252c>
   138c8:	ldr	r0, [r6, #36]	; 0x24
   138cc:	bl	11380 <close@plt>
   138d0:	ldr	r5, [r4, #4]
   138d4:	cmp	r5, #0
   138d8:	bne	138f4 <__assert_fail@plt+0x2550>
   138dc:	b	13a58 <__assert_fail@plt+0x26b4>
   138e0:	mov	r0, r5
   138e4:	bl	1a290 <__assert_fail@plt+0x8eec>
   138e8:	cmp	r8, #0
   138ec:	mov	r5, r8
   138f0:	beq	13a50 <__assert_fail@plt+0x26ac>
   138f4:	ldrd	r8, [r5, #8]
   138f8:	cmp	r9, #0
   138fc:	beq	138e0 <__assert_fail@plt+0x253c>
   13900:	mov	r0, r9
   13904:	bl	11398 <closedir@plt>
   13908:	b	138e0 <__assert_fail@plt+0x253c>
   1390c:	mov	r7, r6
   13910:	ldr	r6, [r7, #8]
   13914:	cmp	r6, #0
   13918:	beq	13a7c <__assert_fail@plt+0x26d8>
   1391c:	mov	r0, r7
   13920:	str	r6, [r4]
   13924:	bl	1a290 <__assert_fail@plt+0x8eec>
   13928:	ldr	r0, [r6, #48]	; 0x30
   1392c:	cmp	r0, #0
   13930:	beq	13ac4 <__assert_fail@plt+0x2720>
   13934:	ldrh	r0, [r6, #60]	; 0x3c
   13938:	mov	r7, r6
   1393c:	cmp	r0, #4
   13940:	beq	13910 <__assert_fail@plt+0x256c>
   13944:	cmp	r0, #2
   13948:	bne	13e40 <__assert_fail@plt+0x2a9c>
   1394c:	mov	r0, r4
   13950:	mov	r1, r6
   13954:	mov	r2, #1
   13958:	bl	13318 <__assert_fail@plt+0x1f74>
   1395c:	cmp	r0, #1
   13960:	strh	r0, [r6, #56]	; 0x38
   13964:	bne	13e38 <__assert_fail@plt+0x2a94>
   13968:	ldr	r0, [r4, #48]	; 0x30
   1396c:	tst	r0, #4
   13970:	bne	13e38 <__assert_fail@plt+0x2a94>
   13974:	mov	r1, #32768	; 0x8000
   13978:	tst	r0, #512	; 0x200
   1397c:	and	r1, r1, r0, lsl #11
   13980:	orr	r1, r1, #18688	; 0x4900
   13984:	orr	r2, r1, #524288	; 0x80000
   13988:	bne	13e10 <__assert_fail@plt+0x2a6c>
   1398c:	movw	r0, #45460	; 0xb194
   13990:	mov	r1, r2
   13994:	movt	r0, #1
   13998:	bl	1a1f8 <__assert_fail@plt+0x8e54>
   1399c:	cmn	r0, #1
   139a0:	str	r0, [r6, #36]	; 0x24
   139a4:	bgt	13e2c <__assert_fail@plt+0x2a88>
   139a8:	bl	11260 <__errno_location@plt>
   139ac:	ldr	r0, [r0]
   139b0:	mov	r1, #7
   139b4:	strh	r1, [r6, #56]	; 0x38
   139b8:	str	r0, [r6, #32]
   139bc:	b	13e38 <__assert_fail@plt+0x2a94>
   139c0:	tst	r0, #64	; 0x40
   139c4:	beq	139e0 <__assert_fail@plt+0x263c>
   139c8:	ldrd	r2, [r4, #16]
   139cc:	ldrd	r8, [r6, #64]	; 0x40
   139d0:	eor	r1, r9, r3
   139d4:	eor	r2, r8, r2
   139d8:	orrs	r1, r2, r1
   139dc:	bne	138bc <__assert_fail@plt+0x2518>
   139e0:	ldr	r7, [r4, #4]
   139e4:	cmp	r7, #0
   139e8:	beq	13b5c <__assert_fail@plt+0x27b8>
   139ec:	tst	r0, #4096	; 0x1000
   139f0:	bne	13b14 <__assert_fail@plt+0x2770>
   139f4:	ldr	r3, [r6, #24]
   139f8:	mov	r0, r4
   139fc:	mov	r1, r6
   13a00:	mvn	r2, #0
   13a04:	bl	14124 <__assert_fail@plt+0x2d80>
   13a08:	cmp	r0, #0
   13a0c:	beq	13b74 <__assert_fail@plt+0x27d0>
   13a10:	bl	11260 <__errno_location@plt>
   13a14:	ldr	r0, [r0]
   13a18:	str	r0, [r6, #32]
   13a1c:	ldrh	r0, [r6, #58]	; 0x3a
   13a20:	orr	r0, r0, #1
   13a24:	strh	r0, [r6, #58]	; 0x3a
   13a28:	ldr	r0, [r4, #4]
   13a2c:	cmp	r0, #0
   13a30:	beq	13b74 <__assert_fail@plt+0x27d0>
   13a34:	ldmib	r0, {r1, r2}
   13a38:	cmp	r2, #0
   13a3c:	ldr	r1, [r1, #24]
   13a40:	str	r1, [r0, #24]
   13a44:	mov	r0, r2
   13a48:	bne	13a34 <__assert_fail@plt+0x2690>
   13a4c:	b	13b74 <__assert_fail@plt+0x27d0>
   13a50:	mov	r0, #0
   13a54:	str	r0, [r4, #4]
   13a58:	mov	r0, #6
   13a5c:	strh	r0, [r6, #56]	; 0x38
   13a60:	mov	r0, r4
   13a64:	mov	r1, r6
   13a68:	bl	14048 <__assert_fail@plt+0x2ca4>
   13a6c:	mov	r5, r6
   13a70:	mov	r0, r5
   13a74:	sub	sp, fp, #24
   13a78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13a7c:	ldr	r0, [r7, #4]
   13a80:	ldr	r1, [r0, #12]
   13a84:	cmp	r1, #0
   13a88:	beq	13aec <__assert_fail@plt+0x2748>
   13a8c:	str	r0, [r4]
   13a90:	mov	r2, #0
   13a94:	ldr	r1, [r4, #24]
   13a98:	ldr	r0, [r0, #40]	; 0x28
   13a9c:	strb	r2, [r1, r0]
   13aa0:	mov	r0, r4
   13aa4:	mov	r1, #3
   13aa8:	bl	143d4 <__assert_fail@plt+0x3030>
   13aac:	cmp	r0, #0
   13ab0:	beq	13bec <__assert_fail@plt+0x2848>
   13ab4:	mov	r6, r0
   13ab8:	mov	r0, r7
   13abc:	bl	1a290 <__assert_fail@plt+0x8eec>
   13ac0:	b	13e40 <__assert_fail@plt+0x2a9c>
   13ac4:	mov	r0, r4
   13ac8:	bl	14f6c <__assert_fail@plt+0x3bc8>
   13acc:	ldr	r1, [r4, #48]	; 0x30
   13ad0:	cmp	r0, #0
   13ad4:	beq	13af4 <__assert_fail@plt+0x2750>
   13ad8:	orr	r0, r1, #8192	; 0x2000
   13adc:	str	r0, [r4, #48]	; 0x30
   13ae0:	mov	r0, r5
   13ae4:	sub	sp, fp, #24
   13ae8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13aec:	mov	r5, r0
   13af0:	b	13c00 <__assert_fail@plt+0x285c>
   13af4:	movw	r0, #258	; 0x102
   13af8:	tst	r1, r0
   13afc:	beq	13c9c <__assert_fail@plt+0x28f8>
   13b00:	ldr	r0, [r4, #56]	; 0x38
   13b04:	cmp	r0, #0
   13b08:	beq	13ca4 <__assert_fail@plt+0x2900>
   13b0c:	bl	15c90 <__assert_fail@plt+0x48ec>
   13b10:	b	13ca4 <__assert_fail@plt+0x2900>
   13b14:	bic	r0, r0, #4096	; 0x1000
   13b18:	str	r0, [r4, #48]	; 0x30
   13b1c:	ldrd	r8, [r7, #8]
   13b20:	cmp	r9, #0
   13b24:	bne	13b48 <__assert_fail@plt+0x27a4>
   13b28:	mov	r0, r7
   13b2c:	bl	1a290 <__assert_fail@plt+0x8eec>
   13b30:	cmp	r8, #0
   13b34:	mov	r7, r8
   13b38:	beq	13b54 <__assert_fail@plt+0x27b0>
   13b3c:	ldrd	r8, [r7, #8]
   13b40:	cmp	r9, #0
   13b44:	beq	13b28 <__assert_fail@plt+0x2784>
   13b48:	mov	r0, r9
   13b4c:	bl	11398 <closedir@plt>
   13b50:	b	13b28 <__assert_fail@plt+0x2784>
   13b54:	mov	r0, #0
   13b58:	str	r0, [r4, #4]
   13b5c:	mov	r0, r4
   13b60:	mov	r1, #3
   13b64:	bl	143d4 <__assert_fail@plt+0x3030>
   13b68:	cmp	r0, #0
   13b6c:	str	r0, [r4, #4]
   13b70:	beq	13b84 <__assert_fail@plt+0x27e0>
   13b74:	ldr	r6, [r4, #4]
   13b78:	mov	r0, #0
   13b7c:	str	r0, [r4, #4]
   13b80:	b	13e40 <__assert_fail@plt+0x2a9c>
   13b84:	ldrb	r0, [r4, #49]	; 0x31
   13b88:	tst	r0, #32
   13b8c:	bne	13f68 <__assert_fail@plt+0x2bc4>
   13b90:	ldr	r0, [r6, #32]
   13b94:	cmp	r0, #0
   13b98:	beq	13a60 <__assert_fail@plt+0x26bc>
   13b9c:	ldrh	r0, [r6, #56]	; 0x38
   13ba0:	cmp	r0, #4
   13ba4:	beq	13a60 <__assert_fail@plt+0x26bc>
   13ba8:	mov	r0, #7
   13bac:	b	13a5c <__assert_fail@plt+0x26b8>
   13bb0:	ldr	r0, [r4, #32]
   13bb4:	movw	r1, #45460	; 0xb194
   13bb8:	movt	r1, #1
   13bbc:	bl	16f60 <__assert_fail@plt+0x5bbc>
   13bc0:	cmn	r0, #1
   13bc4:	str	r0, [r6, #36]	; 0x24
   13bc8:	ble	1385c <__assert_fail@plt+0x24b8>
   13bcc:	ldrh	r0, [r6, #58]	; 0x3a
   13bd0:	orr	r0, r0, #2
   13bd4:	strh	r0, [r6, #58]	; 0x3a
   13bd8:	str	r6, [r4]
   13bdc:	ldrh	r0, [r6, #56]	; 0x38
   13be0:	cmp	r0, #11
   13be4:	beq	13e8c <__assert_fail@plt+0x2ae8>
   13be8:	b	13ec0 <__assert_fail@plt+0x2b1c>
   13bec:	ldrb	r0, [r4, #49]	; 0x31
   13bf0:	mov	r5, #0
   13bf4:	tst	r0, #32
   13bf8:	bne	13f68 <__assert_fail@plt+0x2bc4>
   13bfc:	ldr	r5, [r7, #4]
   13c00:	mov	r0, r7
   13c04:	str	r5, [r4]
   13c08:	bl	1a290 <__assert_fail@plt+0x8eec>
   13c0c:	ldr	r0, [r5, #48]	; 0x30
   13c10:	cmn	r0, #1
   13c14:	beq	13c78 <__assert_fail@plt+0x28d4>
   13c18:	ldrh	r0, [r5, #56]	; 0x38
   13c1c:	cmp	r0, #11
   13c20:	beq	14044 <__assert_fail@plt+0x2ca0>
   13c24:	ldr	r0, [r5, #40]	; 0x28
   13c28:	ldr	r1, [r4, #24]
   13c2c:	mov	r2, #0
   13c30:	strb	r2, [r1, r0]
   13c34:	ldr	r0, [r5, #48]	; 0x30
   13c38:	cmp	r0, #0
   13c3c:	beq	13d94 <__assert_fail@plt+0x29f0>
   13c40:	ldrh	r0, [r5, #58]	; 0x3a
   13c44:	tst	r0, #2
   13c48:	bne	13dcc <__assert_fail@plt+0x2a28>
   13c4c:	tst	r0, #1
   13c50:	bne	13ffc <__assert_fail@plt+0x2c58>
   13c54:	ldr	r1, [r5, #4]
   13c58:	movw	r3, #45459	; 0xb193
   13c5c:	mov	r0, r4
   13c60:	mvn	r2, #0
   13c64:	movt	r3, #1
   13c68:	bl	14124 <__assert_fail@plt+0x2d80>
   13c6c:	cmp	r0, #0
   13c70:	bne	13da4 <__assert_fail@plt+0x2a00>
   13c74:	b	13ffc <__assert_fail@plt+0x2c58>
   13c78:	mov	r0, r5
   13c7c:	bl	1a290 <__assert_fail@plt+0x8eec>
   13c80:	bl	11260 <__errno_location@plt>
   13c84:	mov	r5, #0
   13c88:	str	r5, [r0]
   13c8c:	str	r5, [r4]
   13c90:	mov	r0, r5
   13c94:	sub	sp, fp, #24
   13c98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13c9c:	ldr	r0, [r4, #56]	; 0x38
   13ca0:	bl	1a290 <__assert_fail@plt+0x8eec>
   13ca4:	ldr	r1, [r6, #52]	; 0x34
   13ca8:	add	r7, r6, #168	; 0xa8
   13cac:	str	r1, [r6, #40]	; 0x28
   13cb0:	add	r2, r1, #1
   13cb4:	mov	r1, r7
   13cb8:	ldr	r0, [r4, #24]
   13cbc:	bl	11104 <memmove@plt>
   13cc0:	mov	r0, r7
   13cc4:	mov	r1, #47	; 0x2f
   13cc8:	bl	112e4 <strrchr@plt>
   13ccc:	cmp	r0, #0
   13cd0:	beq	13d0c <__assert_fail@plt+0x2968>
   13cd4:	cmp	r0, r7
   13cd8:	bne	13ce8 <__assert_fail@plt+0x2944>
   13cdc:	ldrb	r1, [r6, #169]	; 0xa9
   13ce0:	cmp	r1, #0
   13ce4:	beq	13d0c <__assert_fail@plt+0x2968>
   13ce8:	add	r8, r0, #1
   13cec:	mov	r0, r8
   13cf0:	bl	1123c <strlen@plt>
   13cf4:	mov	r9, r0
   13cf8:	add	r2, r0, #1
   13cfc:	mov	r0, r7
   13d00:	mov	r1, r8
   13d04:	bl	11104 <memmove@plt>
   13d08:	str	r9, [r6, #52]	; 0x34
   13d0c:	ldr	r0, [r4, #24]
   13d10:	movw	r1, #258	; 0x102
   13d14:	str	r0, [r6, #24]
   13d18:	str	r0, [r6, #28]
   13d1c:	ldrh	r0, [r4, #48]	; 0x30
   13d20:	tst	r0, r1
   13d24:	beq	13d68 <__assert_fail@plt+0x29c4>
   13d28:	movw	r0, #41616	; 0xa290
   13d2c:	movw	r2, #21088	; 0x5260
   13d30:	movw	r3, #21120	; 0x5280
   13d34:	mov	r1, #0
   13d38:	movt	r0, #1
   13d3c:	movt	r2, #1
   13d40:	movt	r3, #1
   13d44:	str	r0, [sp]
   13d48:	mov	r0, #31
   13d4c:	bl	15974 <__assert_fail@plt+0x45d0>
   13d50:	str	r0, [r4, #56]	; 0x38
   13d54:	str	r6, [r4]
   13d58:	ldrh	r0, [r6, #56]	; 0x38
   13d5c:	cmp	r0, #11
   13d60:	beq	13e8c <__assert_fail@plt+0x2ae8>
   13d64:	b	13ec0 <__assert_fail@plt+0x2b1c>
   13d68:	mov	r0, #32
   13d6c:	bl	19d84 <__assert_fail@plt+0x89e0>
   13d70:	cmp	r0, #0
   13d74:	str	r0, [r4, #56]	; 0x38
   13d78:	beq	13e7c <__assert_fail@plt+0x2ad8>
   13d7c:	bl	19e8c <__assert_fail@plt+0x8ae8>
   13d80:	str	r6, [r4]
   13d84:	ldrh	r0, [r6, #56]	; 0x38
   13d88:	cmp	r0, #11
   13d8c:	beq	13e8c <__assert_fail@plt+0x2ae8>
   13d90:	b	13ec0 <__assert_fail@plt+0x2b1c>
   13d94:	mov	r0, r4
   13d98:	bl	14f6c <__assert_fail@plt+0x3bc8>
   13d9c:	cmp	r0, #0
   13da0:	beq	13ffc <__assert_fail@plt+0x2c58>
   13da4:	bl	11260 <__errno_location@plt>
   13da8:	ldr	r0, [r0]
   13dac:	str	r0, [r5, #32]
   13db0:	ldr	r0, [r4, #48]	; 0x30
   13db4:	orr	r0, r0, #8192	; 0x2000
   13db8:	str	r0, [r4, #48]	; 0x30
   13dbc:	ldrh	r0, [r5, #56]	; 0x38
   13dc0:	cmp	r0, #2
   13dc4:	bne	14008 <__assert_fail@plt+0x2c64>
   13dc8:	b	1402c <__assert_fail@plt+0x2c88>
   13dcc:	ldr	r0, [r4, #48]	; 0x30
   13dd0:	tst	r0, #4
   13dd4:	bne	13ff4 <__assert_fail@plt+0x2c50>
   13dd8:	ldr	r6, [r5, #36]	; 0x24
   13ddc:	tst	r0, #512	; 0x200
   13de0:	bne	13fc8 <__assert_fail@plt+0x2c24>
   13de4:	mov	r0, r6
   13de8:	bl	11320 <fchdir@plt>
   13dec:	cmp	r0, #0
   13df0:	beq	13ff4 <__assert_fail@plt+0x2c50>
   13df4:	bl	11260 <__errno_location@plt>
   13df8:	ldr	r0, [r0]
   13dfc:	str	r0, [r5, #32]
   13e00:	ldr	r0, [r4, #48]	; 0x30
   13e04:	orr	r0, r0, #8192	; 0x2000
   13e08:	str	r0, [r4, #48]	; 0x30
   13e0c:	b	13ff4 <__assert_fail@plt+0x2c50>
   13e10:	ldr	r0, [r4, #32]
   13e14:	movw	r1, #45460	; 0xb194
   13e18:	movt	r1, #1
   13e1c:	bl	16f60 <__assert_fail@plt+0x5bbc>
   13e20:	cmn	r0, #1
   13e24:	str	r0, [r6, #36]	; 0x24
   13e28:	ble	139a8 <__assert_fail@plt+0x2604>
   13e2c:	ldrh	r0, [r6, #58]	; 0x3a
   13e30:	orr	r0, r0, #2
   13e34:	strh	r0, [r6, #58]	; 0x3a
   13e38:	mov	r0, #3
   13e3c:	strh	r0, [r6, #60]	; 0x3c
   13e40:	ldr	r0, [r6, #4]
   13e44:	ldr	r1, [r0, #28]
   13e48:	ldr	r0, [r0, #40]	; 0x28
   13e4c:	sub	r2, r0, #1
   13e50:	ldrb	r1, [r1, r2]
   13e54:	cmp	r1, #47	; 0x2f
   13e58:	ldr	r1, [r4, #24]
   13e5c:	moveq	r0, r2
   13e60:	mov	r2, #47	; 0x2f
   13e64:	strb	r2, [r1, r0]!
   13e68:	ldr	r2, [r6, #52]	; 0x34
   13e6c:	add	r0, r1, #1
   13e70:	add	r1, r6, #168	; 0xa8
   13e74:	add	r2, r2, #1
   13e78:	bl	11104 <memmove@plt>
   13e7c:	str	r6, [r4]
   13e80:	ldrh	r0, [r6, #56]	; 0x38
   13e84:	cmp	r0, #11
   13e88:	bne	13ec0 <__assert_fail@plt+0x2b1c>
   13e8c:	add	r0, r6, #112	; 0x70
   13e90:	ldrd	r0, [r0]
   13e94:	eor	r2, r0, #1
   13e98:	orrs	r2, r2, r1
   13e9c:	beq	13f74 <__assert_fail@plt+0x2bd0>
   13ea0:	eor	r0, r0, #2
   13ea4:	orrs	r0, r0, r1
   13ea8:	bne	14044 <__assert_fail@plt+0x2ca0>
   13eac:	mov	r0, r4
   13eb0:	mov	r1, r6
   13eb4:	mov	r2, #0
   13eb8:	bl	13318 <__assert_fail@plt+0x1f74>
   13ebc:	strh	r0, [r6, #56]	; 0x38
   13ec0:	cmp	r0, #1
   13ec4:	bne	13f64 <__assert_fail@plt+0x2bc0>
   13ec8:	ldr	r0, [r6, #48]	; 0x30
   13ecc:	add	r8, r6, #64	; 0x40
   13ed0:	cmp	r0, #0
   13ed4:	bne	13ee0 <__assert_fail@plt+0x2b3c>
   13ed8:	ldrd	r0, [r8]
   13edc:	strd	r0, [r4, #16]
   13ee0:	ldrh	r0, [r4, #48]	; 0x30
   13ee4:	movw	r1, #258	; 0x102
   13ee8:	tst	r0, r1
   13eec:	beq	13f84 <__assert_fail@plt+0x2be0>
   13ef0:	mov	r0, #24
   13ef4:	bl	19d84 <__assert_fail@plt+0x89e0>
   13ef8:	cmp	r0, #0
   13efc:	beq	13fb0 <__assert_fail@plt+0x2c0c>
   13f00:	ldrd	r2, [r8]
   13f04:	mov	r7, r0
   13f08:	add	r0, r6, #160	; 0xa0
   13f0c:	stm	r7, {r2, r3}
   13f10:	add	r2, r7, #8
   13f14:	ldrd	r0, [r0]
   13f18:	stm	r2, {r0, r1, r6}
   13f1c:	mov	r1, r7
   13f20:	ldr	r0, [r4, #56]	; 0x38
   13f24:	bl	165d0 <__assert_fail@plt+0x522c>
   13f28:	cmp	r0, r7
   13f2c:	beq	13f74 <__assert_fail@plt+0x2bd0>
   13f30:	mov	r4, r0
   13f34:	mov	r0, r7
   13f38:	bl	1a290 <__assert_fail@plt+0x8eec>
   13f3c:	cmp	r4, #0
   13f40:	beq	13fb0 <__assert_fail@plt+0x2c0c>
   13f44:	ldr	r0, [r4, #16]
   13f48:	mov	r1, #2
   13f4c:	mov	r5, r6
   13f50:	strh	r1, [r6, #56]	; 0x38
   13f54:	str	r0, [r6]
   13f58:	mov	r0, r5
   13f5c:	sub	sp, fp, #24
   13f60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13f64:	mov	r5, r6
   13f68:	mov	r0, r5
   13f6c:	sub	sp, fp, #24
   13f70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13f74:	mov	r5, r6
   13f78:	mov	r0, r5
   13f7c:	sub	sp, fp, #24
   13f80:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13f84:	ldr	r0, [r4, #56]	; 0x38
   13f88:	mov	r1, r8
   13f8c:	bl	19ea8 <__assert_fail@plt+0x8b04>
   13f90:	cmp	r0, #0
   13f94:	mov	r5, r6
   13f98:	movne	r0, #2
   13f9c:	strhne	r0, [r6, #56]	; 0x38
   13fa0:	strne	r6, [r6]
   13fa4:	mov	r0, r5
   13fa8:	sub	sp, fp, #24
   13fac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13fb0:	bl	11260 <__errno_location@plt>
   13fb4:	mov	r1, #12
   13fb8:	str	r1, [r0]
   13fbc:	mov	r0, r5
   13fc0:	sub	sp, fp, #24
   13fc4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13fc8:	ldr	r1, [r4, #32]
   13fcc:	cmp	r1, r6
   13fd0:	bne	13fdc <__assert_fail@plt+0x2c38>
   13fd4:	cmn	r1, #100	; 0x64
   13fd8:	bne	14044 <__assert_fail@plt+0x2ca0>
   13fdc:	add	r0, r4, #60	; 0x3c
   13fe0:	bl	168fc <__assert_fail@plt+0x5558>
   13fe4:	cmp	r0, #0
   13fe8:	bmi	13ff0 <__assert_fail@plt+0x2c4c>
   13fec:	bl	11380 <close@plt>
   13ff0:	str	r6, [r4, #32]
   13ff4:	ldr	r0, [r5, #36]	; 0x24
   13ff8:	bl	11380 <close@plt>
   13ffc:	ldrh	r0, [r5, #56]	; 0x38
   14000:	cmp	r0, #2
   14004:	beq	1402c <__assert_fail@plt+0x2c88>
   14008:	ldr	r0, [r5, #32]
   1400c:	mov	r1, #7
   14010:	cmp	r0, #0
   14014:	movweq	r1, #6
   14018:	strh	r1, [r5, #56]	; 0x38
   1401c:	bne	1402c <__assert_fail@plt+0x2c88>
   14020:	mov	r0, r4
   14024:	mov	r1, r5
   14028:	bl	14048 <__assert_fail@plt+0x2ca4>
   1402c:	ldrb	r0, [r4, #49]	; 0x31
   14030:	tst	r0, #32
   14034:	movne	r5, #0
   14038:	mov	r0, r5
   1403c:	sub	sp, fp, #24
   14040:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14044:	bl	11374 <abort@plt>
   14048:	push	{r4, r5, r7, sl, fp, lr}
   1404c:	add	fp, sp, #16
   14050:	sub	sp, sp, #24
   14054:	ldrh	r2, [r0, #48]	; 0x30
   14058:	movw	r3, #258	; 0x102
   1405c:	add	lr, r1, #64	; 0x40
   14060:	add	r4, r1, #160	; 0xa0
   14064:	tst	r2, r3
   14068:	beq	140a0 <__assert_fail@plt+0x2cfc>
   1406c:	ldrd	r2, [lr]
   14070:	mov	r1, sp
   14074:	stm	sp, {r2, r3}
   14078:	ldrd	r2, [r4]
   1407c:	str	r3, [sp, #12]
   14080:	str	r2, [sp, #8]
   14084:	ldr	r0, [r0, #56]	; 0x38
   14088:	bl	16618 <__assert_fail@plt+0x5274>
   1408c:	cmp	r0, #0
   14090:	beq	14120 <__assert_fail@plt+0x2d7c>
   14094:	bl	1a290 <__assert_fail@plt+0x8eec>
   14098:	sub	sp, fp, #16
   1409c:	pop	{r4, r5, r7, sl, fp, pc}
   140a0:	ldr	r1, [r1, #4]
   140a4:	cmp	r1, #0
   140a8:	beq	14118 <__assert_fail@plt+0x2d74>
   140ac:	ldr	r2, [r1, #48]	; 0x30
   140b0:	cmp	r2, #0
   140b4:	bmi	14118 <__assert_fail@plt+0x2d74>
   140b8:	ldr	ip, [r0, #56]	; 0x38
   140bc:	ldrd	r2, [ip, #16]
   140c0:	orrs	r2, r2, r3
   140c4:	beq	14120 <__assert_fail@plt+0x2d7c>
   140c8:	ldrd	r2, [r4]
   140cc:	ldrd	r4, [ip]
   140d0:	eor	r3, r5, r3
   140d4:	eor	r2, r4, r2
   140d8:	orrs	r2, r2, r3
   140dc:	bne	14118 <__assert_fail@plt+0x2d74>
   140e0:	add	r3, ip, #8
   140e4:	ldm	lr, {r2, r5}
   140e8:	ldm	r3, {r4, r7}
   140ec:	eor	r7, r7, r5
   140f0:	eor	r2, r4, r2
   140f4:	orrs	r2, r2, r7
   140f8:	bne	14118 <__assert_fail@plt+0x2d74>
   140fc:	add	r2, r1, #64	; 0x40
   14100:	add	r1, r1, #160	; 0xa0
   14104:	ldm	r2, {r2, r5}
   14108:	stm	r3, {r2, r5}
   1410c:	ldr	r0, [r0, #56]	; 0x38
   14110:	ldrd	r2, [r1]
   14114:	strd	r2, [r0]
   14118:	sub	sp, fp, #16
   1411c:	pop	{r4, r5, r7, sl, fp, pc}
   14120:	bl	11374 <abort@plt>
   14124:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14128:	add	fp, sp, #28
   1412c:	sub	sp, sp, #108	; 0x6c
   14130:	mov	r7, r3
   14134:	mov	r4, r2
   14138:	mov	r8, r1
   1413c:	mov	sl, r0
   14140:	cmp	r3, #0
   14144:	beq	141d0 <__assert_fail@plt+0x2e2c>
   14148:	movw	r1, #45459	; 0xb193
   1414c:	mov	r0, r7
   14150:	movt	r1, #1
   14154:	bl	110ec <strcmp@plt>
   14158:	cmp	r0, #0
   1415c:	mov	r6, r0
   14160:	movwne	r6, #1
   14164:	ldr	r0, [sl, #48]	; 0x30
   14168:	tst	r0, #4
   1416c:	bne	141e0 <__assert_fail@plt+0x2e3c>
   14170:	cmn	r4, #1
   14174:	mov	r1, #0
   14178:	mov	r9, #0
   1417c:	movwgt	r1, #1
   14180:	orrs	r1, r1, r6
   14184:	bne	14208 <__assert_fail@plt+0x2e64>
   14188:	ands	r0, r0, #512	; 0x200
   1418c:	beq	14208 <__assert_fail@plt+0x2e64>
   14190:	add	r4, sl, #60	; 0x3c
   14194:	mov	r0, r4
   14198:	bl	168f4 <__assert_fail@plt+0x5550>
   1419c:	cmp	r0, #0
   141a0:	bne	14210 <__assert_fail@plt+0x2e6c>
   141a4:	mov	r0, r4
   141a8:	bl	16948 <__assert_fail@plt+0x55a4>
   141ac:	cmn	r0, #1
   141b0:	ble	14210 <__assert_fail@plt+0x2e6c>
   141b4:	mov	r4, r0
   141b8:	mov	r9, #0
   141bc:	mov	r7, #0
   141c0:	ldr	r5, [sl, #48]	; 0x30
   141c4:	tst	r5, #2
   141c8:	beq	14254 <__assert_fail@plt+0x2eb0>
   141cc:	b	1429c <__assert_fail@plt+0x2ef8>
   141d0:	mov	r6, #1
   141d4:	ldr	r0, [sl, #48]	; 0x30
   141d8:	tst	r0, #4
   141dc:	beq	14170 <__assert_fail@plt+0x2dcc>
   141e0:	mov	r5, #0
   141e4:	cmp	r4, #0
   141e8:	bmi	14290 <__assert_fail@plt+0x2eec>
   141ec:	ands	r0, r0, #512	; 0x200
   141f0:	beq	14290 <__assert_fail@plt+0x2eec>
   141f4:	mov	r0, r4
   141f8:	bl	11380 <close@plt>
   141fc:	mov	r0, r5
   14200:	sub	sp, fp, #28
   14204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14208:	cmn	r4, #1
   1420c:	bgt	14248 <__assert_fail@plt+0x2ea4>
   14210:	ldr	r0, [sl, #48]	; 0x30
   14214:	mov	r1, #32768	; 0x8000
   14218:	and	r1, r1, r0, lsl #11
   1421c:	tst	r0, #512	; 0x200
   14220:	orr	r1, r1, #18688	; 0x4900
   14224:	orr	r2, r1, #524288	; 0x80000
   14228:	bne	142c4 <__assert_fail@plt+0x2f20>
   1422c:	mov	r0, r7
   14230:	mov	r1, r2
   14234:	bl	1a1f8 <__assert_fail@plt+0x8e54>
   14238:	mov	r4, r0
   1423c:	mov	r9, #1
   14240:	cmp	r0, #0
   14244:	bmi	142e0 <__assert_fail@plt+0x2f3c>
   14248:	ldr	r5, [sl, #48]	; 0x30
   1424c:	tst	r5, #2
   14250:	bne	1429c <__assert_fail@plt+0x2ef8>
   14254:	cmp	r7, #0
   14258:	beq	14274 <__assert_fail@plt+0x2ed0>
   1425c:	movw	r1, #45459	; 0xb193
   14260:	mov	r0, r7
   14264:	movt	r1, #1
   14268:	bl	110ec <strcmp@plt>
   1426c:	cmp	r0, #0
   14270:	beq	1429c <__assert_fail@plt+0x2ef8>
   14274:	tst	r5, #512	; 0x200
   14278:	bne	14338 <__assert_fail@plt+0x2f94>
   1427c:	mov	r0, r4
   14280:	bl	11320 <fchdir@plt>
   14284:	mov	r5, r0
   14288:	cmp	r9, #0
   1428c:	bne	14380 <__assert_fail@plt+0x2fdc>
   14290:	mov	r0, r5
   14294:	sub	sp, fp, #28
   14298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1429c:	mov	r2, sp
   142a0:	mov	r0, #3
   142a4:	mov	r1, r4
   142a8:	bl	1117c <__fxstat64@plt>
   142ac:	cmp	r0, #0
   142b0:	beq	142f0 <__assert_fail@plt+0x2f4c>
   142b4:	mvn	r5, #0
   142b8:	cmp	r9, #0
   142bc:	beq	14290 <__assert_fail@plt+0x2eec>
   142c0:	b	14380 <__assert_fail@plt+0x2fdc>
   142c4:	ldr	r0, [sl, #32]
   142c8:	mov	r1, r7
   142cc:	bl	16f60 <__assert_fail@plt+0x5bbc>
   142d0:	mov	r4, r0
   142d4:	mov	r9, #1
   142d8:	cmp	r0, #0
   142dc:	bpl	14248 <__assert_fail@plt+0x2ea4>
   142e0:	mvn	r5, #0
   142e4:	mov	r0, r5
   142e8:	sub	sp, fp, #28
   142ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142f0:	add	r0, r8, #64	; 0x40
   142f4:	ldm	sp, {r2, r3}
   142f8:	ldrd	r0, [r0]
   142fc:	eor	r1, r1, r3
   14300:	eor	r0, r0, r2
   14304:	orrs	r0, r0, r1
   14308:	bne	14368 <__assert_fail@plt+0x2fc4>
   1430c:	add	r0, r8, #160	; 0xa0
   14310:	ldr	r2, [sp, #96]	; 0x60
   14314:	ldr	r3, [sp, #100]	; 0x64
   14318:	ldrd	r0, [r0]
   1431c:	eor	r1, r1, r3
   14320:	eor	r0, r0, r2
   14324:	orrs	r0, r0, r1
   14328:	bne	14368 <__assert_fail@plt+0x2fc4>
   1432c:	ldr	r5, [sl, #48]	; 0x30
   14330:	tst	r5, #512	; 0x200
   14334:	beq	1427c <__assert_fail@plt+0x2ed8>
   14338:	ldr	r1, [sl, #32]
   1433c:	cmp	r1, r4
   14340:	bne	1434c <__assert_fail@plt+0x2fa8>
   14344:	cmn	r1, #100	; 0x64
   14348:	bne	143d0 <__assert_fail@plt+0x302c>
   1434c:	cmp	r6, #0
   14350:	beq	143a4 <__assert_fail@plt+0x3000>
   14354:	add	r0, sl, #60	; 0x3c
   14358:	bl	168fc <__assert_fail@plt+0x5558>
   1435c:	cmp	r0, #0
   14360:	bpl	143b8 <__assert_fail@plt+0x3014>
   14364:	b	143bc <__assert_fail@plt+0x3018>
   14368:	bl	11260 <__errno_location@plt>
   1436c:	mov	r1, #2
   14370:	str	r1, [r0]
   14374:	mvn	r5, #0
   14378:	cmp	r9, #0
   1437c:	beq	14290 <__assert_fail@plt+0x2eec>
   14380:	bl	11260 <__errno_location@plt>
   14384:	ldr	r7, [r0]
   14388:	mov	r6, r0
   1438c:	mov	r0, r4
   14390:	bl	11380 <close@plt>
   14394:	str	r7, [r6]
   14398:	mov	r0, r5
   1439c:	sub	sp, fp, #28
   143a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143a4:	tst	r5, #4
   143a8:	bne	143bc <__assert_fail@plt+0x3018>
   143ac:	cmp	r1, #0
   143b0:	bmi	143bc <__assert_fail@plt+0x3018>
   143b4:	mov	r0, r1
   143b8:	bl	11380 <close@plt>
   143bc:	str	r4, [sl, #32]
   143c0:	mov	r5, #0
   143c4:	mov	r0, r5
   143c8:	sub	sp, fp, #28
   143cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143d0:	bl	11374 <abort@plt>
   143d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143d8:	add	fp, sp, #28
   143dc:	sub	sp, sp, #68	; 0x44
   143e0:	ldr	sl, [r0]
   143e4:	mov	r4, r1
   143e8:	mov	r5, r0
   143ec:	str	r0, [fp, #-44]	; 0xffffffd4
   143f0:	ldr	r6, [sl, #12]
   143f4:	cmp	r6, #0
   143f8:	beq	14440 <__assert_fail@plt+0x309c>
   143fc:	mov	r0, r6
   14400:	bl	11314 <dirfd@plt>
   14404:	cmn	r0, #1
   14408:	str	r0, [fp, #-32]	; 0xffffffe0
   1440c:	ble	14474 <__assert_fail@plt+0x30d0>
   14410:	mov	r1, r5
   14414:	str	r6, [sp, #12]
   14418:	str	r4, [sp, #4]
   1441c:	mov	r7, #0
   14420:	ldr	r0, [r1, #44]!	; 0x2c
   14424:	str	r1, [sp, #20]
   14428:	mvn	r1, #0
   1442c:	cmp	r0, #0
   14430:	movweq	r1, #34464	; 0x86a0
   14434:	movteq	r1, #1
   14438:	str	r1, [sp, #32]
   1443c:	b	1476c <__assert_fail@plt+0x33c8>
   14440:	ldr	r3, [r5, #48]	; 0x30
   14444:	mvn	r0, #99	; 0x63
   14448:	mov	r2, #0
   1444c:	and	r1, r3, #516	; 0x204
   14450:	cmp	r1, #512	; 0x200
   14454:	ldr	r1, [sl, #24]
   14458:	ldreq	r0, [r5, #32]
   1445c:	tst	r3, #16
   14460:	beq	1449c <__assert_fail@plt+0x30f8>
   14464:	tst	r3, #1
   14468:	bne	14490 <__assert_fail@plt+0x30ec>
   1446c:	mov	r2, #32768	; 0x8000
   14470:	b	1449c <__assert_fail@plt+0x30f8>
   14474:	ldr	r0, [sl, #12]
   14478:	bl	11398 <closedir@plt>
   1447c:	mov	r6, #0
   14480:	str	r6, [sl, #12]
   14484:	cmp	r4, #3
   14488:	beq	144e4 <__assert_fail@plt+0x3140>
   1448c:	b	14e7c <__assert_fail@plt+0x3ad8>
   14490:	ldr	r3, [sl, #48]	; 0x30
   14494:	cmp	r3, #0
   14498:	movne	r2, #32768	; 0x8000
   1449c:	sub	r3, fp, #32
   144a0:	bl	16f98 <__assert_fail@plt+0x5bf4>
   144a4:	cmp	r0, #0
   144a8:	str	r0, [sl, #12]
   144ac:	beq	144d8 <__assert_fail@plt+0x3134>
   144b0:	ldrh	r0, [sl, #56]	; 0x38
   144b4:	cmp	r0, #11
   144b8:	bne	14504 <__assert_fail@plt+0x3160>
   144bc:	mov	r0, r5
   144c0:	mov	r1, sl
   144c4:	mov	r2, #0
   144c8:	bl	13318 <__assert_fail@plt+0x1f74>
   144cc:	strh	r0, [sl, #56]	; 0x38
   144d0:	mov	r7, r5
   144d4:	b	145d0 <__assert_fail@plt+0x322c>
   144d8:	mov	r6, #0
   144dc:	cmp	r4, #3
   144e0:	bne	14e7c <__assert_fail@plt+0x3ad8>
   144e4:	mov	r0, #4
   144e8:	strh	r0, [sl, #56]	; 0x38
   144ec:	bl	11260 <__errno_location@plt>
   144f0:	ldr	r0, [r0]
   144f4:	str	r0, [sl, #32]
   144f8:	mov	r0, r6
   144fc:	sub	sp, fp, #28
   14500:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14504:	ldrb	r0, [r5, #49]	; 0x31
   14508:	mov	r7, r5
   1450c:	tst	r0, #1
   14510:	beq	145d0 <__assert_fail@plt+0x322c>
   14514:	mov	r0, r7
   14518:	mov	r1, sl
   1451c:	add	r8, sl, #64	; 0x40
   14520:	bl	14048 <__assert_fail@plt+0x2ca4>
   14524:	mov	r0, r7
   14528:	mov	r1, sl
   1452c:	mov	r2, #0
   14530:	bl	13318 <__assert_fail@plt+0x1f74>
   14534:	ldrh	r0, [r7, #48]	; 0x30
   14538:	movw	r1, #258	; 0x102
   1453c:	tst	r0, r1
   14540:	beq	145b4 <__assert_fail@plt+0x3210>
   14544:	mov	r0, #24
   14548:	bl	19d84 <__assert_fail@plt+0x89e0>
   1454c:	cmp	r0, #0
   14550:	beq	14678 <__assert_fail@plt+0x32d4>
   14554:	ldrd	r2, [r8]
   14558:	mov	r5, r0
   1455c:	add	r0, sl, #160	; 0xa0
   14560:	ldr	r7, [fp, #-44]	; 0xffffffd4
   14564:	stm	r5, {r2, r3}
   14568:	add	r2, r5, #8
   1456c:	ldrd	r0, [r0]
   14570:	stm	r2, {r0, r1, sl}
   14574:	mov	r1, r5
   14578:	ldr	r0, [r7, #56]	; 0x38
   1457c:	bl	165d0 <__assert_fail@plt+0x522c>
   14580:	cmp	r0, r5
   14584:	beq	145d0 <__assert_fail@plt+0x322c>
   14588:	mov	r8, r0
   1458c:	mov	r0, r5
   14590:	bl	1a290 <__assert_fail@plt+0x8eec>
   14594:	cmp	r8, #0
   14598:	beq	14678 <__assert_fail@plt+0x32d4>
   1459c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   145a0:	ldr	r0, [r8, #16]
   145a4:	mov	r1, #2
   145a8:	strh	r1, [sl, #56]	; 0x38
   145ac:	str	r0, [sl]
   145b0:	b	145d0 <__assert_fail@plt+0x322c>
   145b4:	ldr	r0, [r7, #56]	; 0x38
   145b8:	mov	r1, r8
   145bc:	bl	19ea8 <__assert_fail@plt+0x8b04>
   145c0:	cmp	r0, #0
   145c4:	movne	r0, #2
   145c8:	strhne	r0, [sl, #56]	; 0x38
   145cc:	strne	sl, [sl]
   145d0:	mov	r1, r7
   145d4:	mov	r5, r7
   145d8:	str	r4, [sp, #4]
   145dc:	str	r6, [sp, #12]
   145e0:	ldr	r0, [r1, #44]!	; 0x2c
   145e4:	str	r1, [sp, #20]
   145e8:	mvn	r1, #0
   145ec:	cmp	r0, #0
   145f0:	movweq	r1, #34464	; 0x86a0
   145f4:	movteq	r1, #1
   145f8:	cmp	r4, #2
   145fc:	str	r1, [sp, #32]
   14600:	bne	1461c <__assert_fail@plt+0x3278>
   14604:	mov	r7, #1
   14608:	cmp	r4, #3
   1460c:	bne	1476c <__assert_fail@plt+0x33c8>
   14610:	sub	r0, r4, #3
   14614:	mov	r5, #0
   14618:	b	146b0 <__assert_fail@plt+0x330c>
   1461c:	ldr	r0, [r5, #48]	; 0x30
   14620:	and	r0, r0, #56	; 0x38
   14624:	cmp	r0, #24
   14628:	bne	146a8 <__assert_fail@plt+0x3304>
   1462c:	ldr	r0, [sl, #84]	; 0x54
   14630:	cmp	r0, #2
   14634:	bne	146a8 <__assert_fail@plt+0x3304>
   14638:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1463c:	mov	r0, sl
   14640:	bl	15300 <__assert_fail@plt+0x3f5c>
   14644:	movw	r1, #26984	; 0x6968
   14648:	cmp	r0, r1
   1464c:	ble	14694 <__assert_fail@plt+0x32f0>
   14650:	movw	r1, #26985	; 0x6969
   14654:	cmp	r0, r1
   14658:	movwne	r1, #16719	; 0x414f
   1465c:	movtne	r1, #21318	; 0x5346
   14660:	cmpne	r0, r1
   14664:	beq	146a8 <__assert_fail@plt+0x3304>
   14668:	movw	r1, #40864	; 0x9fa0
   1466c:	cmp	r0, r1
   14670:	beq	146a8 <__assert_fail@plt+0x3304>
   14674:	b	14604 <__assert_fail@plt+0x3260>
   14678:	bl	11260 <__errno_location@plt>
   1467c:	mov	r1, #12
   14680:	mov	r6, #0
   14684:	str	r1, [r0]
   14688:	mov	r0, r6
   1468c:	sub	sp, fp, #28
   14690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14694:	movw	r1, #19778	; 0x4d42
   14698:	movt	r1, #65363	; 0xff53
   1469c:	cmp	r0, r1
   146a0:	cmpne	r0, #0
   146a4:	bne	14604 <__assert_fail@plt+0x3260>
   146a8:	sub	r0, r4, #3
   146ac:	mov	r5, #1
   146b0:	clz	r0, r0
   146b4:	lsr	r7, r0, #5
   146b8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   146bc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   146c0:	ldrb	r0, [r0, #49]	; 0x31
   146c4:	tst	r0, #2
   146c8:	beq	146e4 <__assert_fail@plt+0x3340>
   146cc:	mov	r0, r2
   146d0:	movw	r1, #1030	; 0x406
   146d4:	mov	r2, #3
   146d8:	bl	1a018 <__assert_fail@plt+0x8c74>
   146dc:	mov	r2, r0
   146e0:	str	r0, [fp, #-32]	; 0xffffffe0
   146e4:	cmp	r2, #0
   146e8:	bmi	14704 <__assert_fail@plt+0x3360>
   146ec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   146f0:	mov	r1, sl
   146f4:	mov	r3, #0
   146f8:	bl	14124 <__assert_fail@plt+0x2d80>
   146fc:	cmp	r0, #0
   14700:	beq	14764 <__assert_fail@plt+0x33c0>
   14704:	and	r0, r7, r5
   14708:	cmp	r0, #1
   1470c:	bne	1471c <__assert_fail@plt+0x3378>
   14710:	bl	11260 <__errno_location@plt>
   14714:	ldr	r0, [r0]
   14718:	str	r0, [sl, #32]
   1471c:	ldrh	r0, [sl, #58]	; 0x3a
   14720:	orr	r0, r0, #1
   14724:	strh	r0, [sl, #58]	; 0x3a
   14728:	ldr	r0, [sl, #12]
   1472c:	bl	11398 <closedir@plt>
   14730:	ldr	r5, [fp, #-44]	; 0xffffffd4
   14734:	mov	r4, #0
   14738:	str	r4, [sl, #12]
   1473c:	ldrb	r0, [r5, #49]	; 0x31
   14740:	tst	r0, #2
   14744:	beq	14758 <__assert_fail@plt+0x33b4>
   14748:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1474c:	cmp	r0, #0
   14750:	bmi	14758 <__assert_fail@plt+0x33b4>
   14754:	bl	11380 <close@plt>
   14758:	mov	r7, #1
   1475c:	str	r4, [sl, #12]
   14760:	b	1476c <__assert_fail@plt+0x33c8>
   14764:	ldr	r5, [fp, #-44]	; 0xffffffd4
   14768:	mov	r7, #0
   1476c:	ldr	r0, [sl, #40]	; 0x28
   14770:	ldr	r1, [sl, #28]
   14774:	mov	r9, #0
   14778:	sub	r2, r0, #1
   1477c:	ldrb	r1, [r1, r2]
   14780:	cmp	r1, #47	; 0x2f
   14784:	ldrb	r1, [r5, #48]	; 0x30
   14788:	moveq	r0, r2
   1478c:	tst	r1, #4
   14790:	mov	r1, #0
   14794:	str	r1, [sp, #40]	; 0x28
   14798:	beq	147b0 <__assert_fail@plt+0x340c>
   1479c:	ldr	r1, [r5, #24]
   147a0:	mov	r2, #47	; 0x2f
   147a4:	strb	r2, [r1, r0]!
   147a8:	add	r1, r1, #1
   147ac:	str	r1, [sp, #40]	; 0x28
   147b0:	ldr	r6, [sl, #12]
   147b4:	add	r1, r0, #1
   147b8:	str	r1, [fp, #-40]	; 0xffffffd8
   147bc:	cmp	r6, #0
   147c0:	beq	14b88 <__assert_fail@plt+0x37e4>
   147c4:	ldr	r0, [sl, #48]	; 0x30
   147c8:	str	r7, [sp]
   147cc:	mov	r7, #0
   147d0:	add	r0, r0, #1
   147d4:	str	r0, [sp, #24]
   147d8:	ldr	r0, [r5, #36]	; 0x24
   147dc:	sub	r0, r0, r1
   147e0:	str	r0, [sp, #44]	; 0x2c
   147e4:	bl	11260 <__errno_location@plt>
   147e8:	str	r0, [sp, #36]	; 0x24
   147ec:	mov	r0, #0
   147f0:	mov	r9, #0
   147f4:	mov	r4, #0
   147f8:	str	sl, [sp, #28]
   147fc:	str	r0, [sp, #48]	; 0x30
   14800:	mov	r0, #0
   14804:	str	r0, [sp, #8]
   14808:	mov	r0, #0
   1480c:	str	r0, [sp, #16]
   14810:	ldr	r0, [sp, #36]	; 0x24
   14814:	str	r7, [r0]
   14818:	mov	r0, r6
   1481c:	bl	112fc <readdir64@plt>
   14820:	cmp	r0, #0
   14824:	beq	14c04 <__assert_fail@plt+0x3860>
   14828:	mov	r8, r0
   1482c:	ldrb	r0, [r5, #48]	; 0x30
   14830:	tst	r0, #32
   14834:	bne	14864 <__assert_fail@plt+0x34c0>
   14838:	ldrb	r0, [r8, #19]
   1483c:	cmp	r0, #46	; 0x2e
   14840:	bne	14864 <__assert_fail@plt+0x34c0>
   14844:	ldrb	r0, [r8, #20]
   14848:	cmp	r0, #0
   1484c:	beq	14b20 <__assert_fail@plt+0x377c>
   14850:	cmp	r0, #46	; 0x2e
   14854:	bne	14864 <__assert_fail@plt+0x34c0>
   14858:	ldrb	r0, [r8, #21]
   1485c:	cmp	r0, #0
   14860:	beq	14b20 <__assert_fail@plt+0x377c>
   14864:	str	r4, [fp, #-36]	; 0xffffffdc
   14868:	add	r4, r8, #19
   1486c:	mov	r0, r4
   14870:	bl	1123c <strlen@plt>
   14874:	mov	r5, r0
   14878:	add	r0, r0, #176	; 0xb0
   1487c:	bic	r0, r0, #7
   14880:	bl	19d84 <__assert_fail@plt+0x89e0>
   14884:	mov	r6, r0
   14888:	cmp	r0, #0
   1488c:	beq	14ee8 <__assert_fail@plt+0x3b44>
   14890:	add	sl, r6, #168	; 0xa8
   14894:	mov	r1, r4
   14898:	mov	r2, r5
   1489c:	mov	r0, sl
   148a0:	bl	11128 <memcpy@plt>
   148a4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   148a8:	strb	r7, [sl, r5]
   148ac:	str	r5, [r6, #52]	; 0x34
   148b0:	mov	r0, #196608	; 0x30000
   148b4:	ldr	r1, [sp, #44]	; 0x2c
   148b8:	str	r2, [r6, #44]	; 0x2c
   148bc:	cmp	r5, r1
   148c0:	ldr	r4, [r2, #24]
   148c4:	str	r7, [r6, #12]
   148c8:	str	r7, [r6, #16]
   148cc:	str	r7, [r6, #20]
   148d0:	str	r0, [r6, #58]	; 0x3a
   148d4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   148d8:	str	r4, [r6, #28]
   148dc:	str	r7, [r6, #32]
   148e0:	add	r7, r5, r0
   148e4:	bcs	148f8 <__assert_fail@plt+0x3554>
   148e8:	mov	r5, r2
   148ec:	cmp	r7, r0
   148f0:	bcs	14970 <__assert_fail@plt+0x35cc>
   148f4:	b	14dc8 <__assert_fail@plt+0x3a24>
   148f8:	ldr	r1, [r2, #36]	; 0x24
   148fc:	movw	r0, #257	; 0x101
   14900:	mov	r5, r2
   14904:	add	r0, r7, r0
   14908:	adds	r1, r0, r1
   1490c:	bcs	14eb4 <__assert_fail@plt+0x3b10>
   14910:	mov	r0, r4
   14914:	str	r1, [r5, #36]	; 0x24
   14918:	bl	19db4 <__assert_fail@plt+0x8a10>
   1491c:	cmp	r0, #0
   14920:	beq	14ed4 <__assert_fail@plt+0x3b30>
   14924:	cmp	r0, r4
   14928:	str	r0, [r5, #24]
   1492c:	beq	14954 <__assert_fail@plt+0x35b0>
   14930:	ldrb	r1, [r5, #48]	; 0x30
   14934:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14938:	tst	r1, #4
   1493c:	ldr	r1, [sp, #40]	; 0x28
   14940:	addne	r1, r0, r2
   14944:	mov	r0, #1
   14948:	str	r1, [sp, #40]	; 0x28
   1494c:	str	r0, [sp, #16]
   14950:	b	14958 <__assert_fail@plt+0x35b4>
   14954:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14958:	ldr	r0, [r5, #36]	; 0x24
   1495c:	sub	r0, r0, r2
   14960:	str	r0, [sp, #44]	; 0x2c
   14964:	mov	r0, r2
   14968:	cmp	r7, r0
   1496c:	bcc	14dc8 <__assert_fail@plt+0x3a24>
   14970:	ldr	r0, [sp, #24]
   14974:	add	r4, r6, #112	; 0x70
   14978:	str	r0, [r6, #48]	; 0x30
   1497c:	ldr	r0, [r5]
   14980:	str	r7, [r6, #40]	; 0x28
   14984:	str	r0, [r6, #4]
   14988:	ldrd	r0, [r8]
   1498c:	strd	r0, [r4, #48]	; 0x30
   14990:	ldrb	r0, [r5, #48]	; 0x30
   14994:	tst	r0, #4
   14998:	bne	149a4 <__assert_fail@plt+0x3600>
   1499c:	str	sl, [r6, #24]
   149a0:	b	149c0 <__assert_fail@plt+0x361c>
   149a4:	ldr	r0, [r6, #28]
   149a8:	ldr	r1, [r6, #52]	; 0x34
   149ac:	str	r0, [r6, #24]
   149b0:	ldr	r0, [sp, #40]	; 0x28
   149b4:	add	r2, r1, #1
   149b8:	mov	r1, sl
   149bc:	bl	11104 <memmove@plt>
   149c0:	ldr	r0, [r5, #44]	; 0x2c
   149c4:	ldr	r2, [r5, #48]	; 0x30
   149c8:	ldr	sl, [sp, #28]
   149cc:	mov	r7, #0
   149d0:	cmp	r0, #0
   149d4:	beq	14a7c <__assert_fail@plt+0x36d8>
   149d8:	ands	r0, r2, #1024	; 0x400
   149dc:	bne	14a7c <__assert_fail@plt+0x36d8>
   149e0:	mov	r0, r5
   149e4:	mov	r1, r6
   149e8:	mov	r2, #0
   149ec:	bl	13318 <__assert_fail@plt+0x1f74>
   149f0:	strh	r0, [r6, #56]	; 0x38
   149f4:	ldr	r4, [fp, #-36]	; 0xffffffdc
   149f8:	cmp	r9, #0
   149fc:	str	r7, [r6, #8]
   14a00:	beq	14afc <__assert_fail@plt+0x3758>
   14a04:	ldr	r0, [sp, #48]	; 0x30
   14a08:	str	r6, [r0, #8]
   14a0c:	movw	r0, #10000	; 0x2710
   14a10:	cmp	r4, r0
   14a14:	bne	14b0c <__assert_fail@plt+0x3768>
   14a18:	ldr	r0, [sp, #20]
   14a1c:	ldr	r0, [r0]
   14a20:	cmp	r0, #0
   14a24:	bne	14b0c <__assert_fail@plt+0x3768>
   14a28:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14a2c:	mov	r0, sl
   14a30:	bl	15300 <__assert_fail@plt+0x3f5c>
   14a34:	mov	r1, #0
   14a38:	str	r1, [sp, #8]
   14a3c:	movw	r1, #19778	; 0x4d42
   14a40:	movt	r1, #65363	; 0xff53
   14a44:	cmp	r0, r1
   14a48:	movwne	r1, #26985	; 0x6969
   14a4c:	cmpne	r0, r1
   14a50:	beq	14b0c <__assert_fail@plt+0x3768>
   14a54:	movw	r1, #6548	; 0x1994
   14a58:	movt	r1, #258	; 0x102
   14a5c:	cmp	r0, r1
   14a60:	movne	r0, #1
   14a64:	strne	r0, [sp, #8]
   14a68:	ldr	r0, [sp, #32]
   14a6c:	add	r4, r4, #1
   14a70:	cmp	r0, r4
   14a74:	bhi	14b1c <__assert_fail@plt+0x3778>
   14a78:	b	14b2c <__assert_fail@plt+0x3788>
   14a7c:	ldrb	r3, [r8, #18]
   14a80:	mov	r0, #0
   14a84:	tst	r2, #8
   14a88:	mov	r1, #0
   14a8c:	beq	14ab0 <__assert_fail@plt+0x370c>
   14a90:	orr	r1, r3, #4
   14a94:	cmp	r1, #4
   14a98:	mov	r1, #0
   14a9c:	beq	14ab0 <__assert_fail@plt+0x370c>
   14aa0:	eor	r1, r3, #10
   14aa4:	and	r2, r2, #16
   14aa8:	orrs	r1, r2, r1
   14aac:	movwne	r1, #1
   14ab0:	mov	r2, #11
   14ab4:	strh	r2, [r6, #56]	; 0x38
   14ab8:	sub	r2, r3, #1
   14abc:	uxtb	r3, r2
   14ac0:	cmp	r3, #11
   14ac4:	bhi	14ad8 <__assert_fail@plt+0x3734>
   14ac8:	sxtb	r0, r2
   14acc:	movw	r2, #45464	; 0xb198
   14ad0:	movt	r2, #1
   14ad4:	ldr	r0, [r2, r0, lsl #2]
   14ad8:	cmp	r1, #0
   14adc:	str	r0, [r6, #80]	; 0x50
   14ae0:	mov	r0, #2
   14ae4:	movwne	r0, #1
   14ae8:	stm	r4, {r0, r7}
   14aec:	ldr	r4, [fp, #-36]	; 0xffffffdc
   14af0:	cmp	r9, #0
   14af4:	str	r7, [r6, #8]
   14af8:	bne	14a04 <__assert_fail@plt+0x3660>
   14afc:	mov	r9, r6
   14b00:	movw	r0, #10000	; 0x2710
   14b04:	cmp	r4, r0
   14b08:	beq	14a18 <__assert_fail@plt+0x3674>
   14b0c:	ldr	r0, [sp, #32]
   14b10:	add	r4, r4, #1
   14b14:	cmp	r0, r4
   14b18:	bls	14b2c <__assert_fail@plt+0x3788>
   14b1c:	str	r6, [sp, #48]	; 0x30
   14b20:	ldr	r6, [sl, #12]
   14b24:	cmp	r6, #0
   14b28:	bne	14810 <__assert_fail@plt+0x346c>
   14b2c:	ldr	r0, [sp, #16]
   14b30:	ldr	r7, [sp]
   14b34:	ldr	r6, [sp, #8]
   14b38:	tst	r0, #1
   14b3c:	beq	14c58 <__assert_fail@plt+0x38b4>
   14b40:	ldr	r1, [r5, #4]
   14b44:	ldr	r0, [r5, #24]
   14b48:	cmp	r1, #0
   14b4c:	bne	14b64 <__assert_fail@plt+0x37c0>
   14b50:	b	14ba0 <__assert_fail@plt+0x37fc>
   14b54:	str	r0, [r1, #28]
   14b58:	ldr	r1, [r1, #8]
   14b5c:	cmp	r1, #0
   14b60:	beq	14ba0 <__assert_fail@plt+0x37fc>
   14b64:	ldr	r2, [r1, #24]
   14b68:	add	r3, r1, #168	; 0xa8
   14b6c:	cmp	r2, r3
   14b70:	beq	14b54 <__assert_fail@plt+0x37b0>
   14b74:	ldr	r3, [r1, #28]
   14b78:	sub	r2, r2, r3
   14b7c:	add	r2, r0, r2
   14b80:	str	r2, [r1, #24]
   14b84:	b	14b54 <__assert_fail@plt+0x37b0>
   14b88:	mov	r4, #0
   14b8c:	mov	r6, #0
   14b90:	ldrb	r0, [r5, #48]	; 0x30
   14b94:	tst	r0, #4
   14b98:	bne	14c64 <__assert_fail@plt+0x38c0>
   14b9c:	b	14c8c <__assert_fail@plt+0x38e8>
   14ba0:	ldr	r1, [r9, #48]	; 0x30
   14ba4:	cmp	r1, #0
   14ba8:	bmi	14c58 <__assert_fail@plt+0x38b4>
   14bac:	mov	r1, r9
   14bb0:	ldr	r2, [r1, #24]
   14bb4:	add	r3, r1, #168	; 0xa8
   14bb8:	cmp	r2, r3
   14bbc:	bne	14bf0 <__assert_fail@plt+0x384c>
   14bc0:	str	r0, [r1, #28]
   14bc4:	ldr	r2, [r1, #8]
   14bc8:	cmp	r2, #0
   14bcc:	ldreq	r2, [r1, #4]
   14bd0:	ldr	r1, [r2, #48]	; 0x30
   14bd4:	cmn	r1, #1
   14bd8:	mov	r1, r2
   14bdc:	ble	14c58 <__assert_fail@plt+0x38b4>
   14be0:	ldr	r2, [r1, #24]
   14be4:	add	r3, r1, #168	; 0xa8
   14be8:	cmp	r2, r3
   14bec:	beq	14bc0 <__assert_fail@plt+0x381c>
   14bf0:	ldr	r3, [r1, #28]
   14bf4:	sub	r2, r2, r3
   14bf8:	add	r2, r0, r2
   14bfc:	str	r2, [r1, #24]
   14c00:	b	14bc0 <__assert_fail@plt+0x381c>
   14c04:	ldr	r0, [sp, #36]	; 0x24
   14c08:	ldr	r0, [r0]
   14c0c:	cmp	r0, #0
   14c10:	beq	14c2c <__assert_fail@plt+0x3888>
   14c14:	str	r0, [sl, #32]
   14c18:	ldr	r0, [sp, #12]
   14c1c:	orrs	r0, r0, r4
   14c20:	mov	r0, #4
   14c24:	movwne	r0, #7
   14c28:	strh	r0, [sl, #56]	; 0x38
   14c2c:	ldr	r0, [sl, #12]
   14c30:	ldr	r6, [sp, #8]
   14c34:	cmp	r0, #0
   14c38:	beq	14c48 <__assert_fail@plt+0x38a4>
   14c3c:	bl	11398 <closedir@plt>
   14c40:	mov	r0, #0
   14c44:	str	r0, [sl, #12]
   14c48:	ldr	r0, [sp, #16]
   14c4c:	ldr	r7, [sp]
   14c50:	tst	r0, #1
   14c54:	bne	14b40 <__assert_fail@plt+0x379c>
   14c58:	ldrb	r0, [r5, #48]	; 0x30
   14c5c:	tst	r0, #4
   14c60:	beq	14c8c <__assert_fail@plt+0x38e8>
   14c64:	ldr	r2, [sp, #40]	; 0x28
   14c68:	ldr	r0, [r5, #36]	; 0x24
   14c6c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14c70:	cmp	r3, r0
   14c74:	sub	r1, r2, #1
   14c78:	mov	r0, #0
   14c7c:	moveq	r2, r1
   14c80:	cmp	r4, #0
   14c84:	moveq	r2, r1
   14c88:	strb	r0, [r2]
   14c8c:	ldr	r0, [sp, #12]
   14c90:	cmp	r0, #0
   14c94:	movwne	r0, #1
   14c98:	orrs	r0, r0, r7
   14c9c:	beq	14d04 <__assert_fail@plt+0x3960>
   14ca0:	cmp	r4, #0
   14ca4:	bne	14d44 <__assert_fail@plt+0x39a0>
   14ca8:	ldr	r0, [sp, #4]
   14cac:	cmp	r0, #3
   14cb0:	bne	14cc8 <__assert_fail@plt+0x3924>
   14cb4:	ldrh	r0, [sl, #56]	; 0x38
   14cb8:	cmp	r0, #4
   14cbc:	cmpne	r0, #7
   14cc0:	movne	r0, #6
   14cc4:	strhne	r0, [sl, #56]	; 0x38
   14cc8:	mov	r6, #0
   14ccc:	cmp	r9, #0
   14cd0:	bne	14cec <__assert_fail@plt+0x3948>
   14cd4:	b	14e7c <__assert_fail@plt+0x3ad8>
   14cd8:	mov	r0, r9
   14cdc:	bl	1a290 <__assert_fail@plt+0x8eec>
   14ce0:	cmp	r4, #0
   14ce4:	mov	r9, r4
   14ce8:	beq	14e7c <__assert_fail@plt+0x3ad8>
   14cec:	ldrd	r4, [r9, #8]
   14cf0:	cmp	r5, #0
   14cf4:	beq	14cd8 <__assert_fail@plt+0x3934>
   14cf8:	mov	r0, r5
   14cfc:	bl	11398 <closedir@plt>
   14d00:	b	14cd8 <__assert_fail@plt+0x3934>
   14d04:	ldr	r0, [sp, #4]
   14d08:	cmp	r0, #1
   14d0c:	cmpne	r4, #0
   14d10:	bne	14d44 <__assert_fail@plt+0x39a0>
   14d14:	ldr	r0, [sl, #48]	; 0x30
   14d18:	cmp	r0, #0
   14d1c:	beq	14e4c <__assert_fail@plt+0x3aa8>
   14d20:	ldr	r1, [sl, #4]
   14d24:	movw	r3, #45459	; 0xb193
   14d28:	mov	r0, r5
   14d2c:	mvn	r2, #0
   14d30:	movt	r3, #1
   14d34:	bl	14124 <__assert_fail@plt+0x2d80>
   14d38:	cmp	r0, #0
   14d3c:	bne	14e5c <__assert_fail@plt+0x3ab8>
   14d40:	b	14ca0 <__assert_fail@plt+0x38fc>
   14d44:	tst	r6, #1
   14d48:	beq	14d80 <__assert_fail@plt+0x39dc>
   14d4c:	movw	r0, #21192	; 0x52c8
   14d50:	mov	r1, r9
   14d54:	mov	r2, r4
   14d58:	movt	r0, #1
   14d5c:	str	r0, [r5, #44]	; 0x2c
   14d60:	mov	r0, r5
   14d64:	bl	134b0 <__assert_fail@plt+0x210c>
   14d68:	mov	r6, r0
   14d6c:	mov	r0, #0
   14d70:	str	r0, [r5, #44]	; 0x2c
   14d74:	mov	r0, r6
   14d78:	sub	sp, fp, #28
   14d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d80:	cmp	r4, #2
   14d84:	bcc	14db8 <__assert_fail@plt+0x3a14>
   14d88:	ldr	r0, [sp, #20]
   14d8c:	ldr	r0, [r0]
   14d90:	cmp	r0, #0
   14d94:	beq	14db8 <__assert_fail@plt+0x3a14>
   14d98:	mov	r0, r5
   14d9c:	mov	r1, r9
   14da0:	mov	r2, r4
   14da4:	bl	134b0 <__assert_fail@plt+0x210c>
   14da8:	mov	r6, r0
   14dac:	mov	r0, r6
   14db0:	sub	sp, fp, #28
   14db4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14db8:	mov	r6, r9
   14dbc:	mov	r0, r6
   14dc0:	sub	sp, fp, #28
   14dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14dc8:	mov	r0, r6
   14dcc:	bl	1a290 <__assert_fail@plt+0x8eec>
   14dd0:	ldr	r7, [sp, #28]
   14dd4:	cmp	r9, #0
   14dd8:	bne	14df4 <__assert_fail@plt+0x3a50>
   14ddc:	b	14e0c <__assert_fail@plt+0x3a68>
   14de0:	mov	r0, r9
   14de4:	bl	1a290 <__assert_fail@plt+0x8eec>
   14de8:	cmp	r4, #0
   14dec:	mov	r9, r4
   14df0:	beq	14e0c <__assert_fail@plt+0x3a68>
   14df4:	ldrd	r4, [r9, #8]
   14df8:	cmp	r5, #0
   14dfc:	beq	14de0 <__assert_fail@plt+0x3a3c>
   14e00:	mov	r0, r5
   14e04:	bl	11398 <closedir@plt>
   14e08:	b	14de0 <__assert_fail@plt+0x3a3c>
   14e0c:	ldr	r0, [r7, #12]
   14e10:	bl	11398 <closedir@plt>
   14e14:	ldr	r1, [fp, #-44]	; 0xffffffd4
   14e18:	mov	r0, #7
   14e1c:	mov	r6, #0
   14e20:	strh	r0, [r7, #56]	; 0x38
   14e24:	str	r6, [r7, #12]
   14e28:	ldr	r0, [r1, #48]	; 0x30
   14e2c:	orr	r0, r0, #8192	; 0x2000
   14e30:	str	r0, [r1, #48]	; 0x30
   14e34:	ldr	r1, [sp, #36]	; 0x24
   14e38:	mov	r0, #36	; 0x24
   14e3c:	str	r0, [r1]
   14e40:	mov	r0, r6
   14e44:	sub	sp, fp, #28
   14e48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e4c:	mov	r0, r5
   14e50:	bl	14f6c <__assert_fail@plt+0x3bc8>
   14e54:	cmp	r0, #0
   14e58:	beq	14ca0 <__assert_fail@plt+0x38fc>
   14e5c:	mov	r0, #7
   14e60:	mov	r6, #0
   14e64:	cmp	r9, #0
   14e68:	strh	r0, [sl, #56]	; 0x38
   14e6c:	ldr	r0, [r5, #48]	; 0x30
   14e70:	orr	r0, r0, #8192	; 0x2000
   14e74:	str	r0, [r5, #48]	; 0x30
   14e78:	bne	14e9c <__assert_fail@plt+0x3af8>
   14e7c:	mov	r0, r6
   14e80:	sub	sp, fp, #28
   14e84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e88:	mov	r0, r9
   14e8c:	bl	1a290 <__assert_fail@plt+0x8eec>
   14e90:	cmp	r4, #0
   14e94:	mov	r9, r4
   14e98:	beq	14e7c <__assert_fail@plt+0x3ad8>
   14e9c:	ldrd	r4, [r9, #8]
   14ea0:	cmp	r5, #0
   14ea4:	beq	14e88 <__assert_fail@plt+0x3ae4>
   14ea8:	mov	r0, r5
   14eac:	bl	11398 <closedir@plt>
   14eb0:	b	14e88 <__assert_fail@plt+0x3ae4>
   14eb4:	mov	r0, r4
   14eb8:	bl	1a290 <__assert_fail@plt+0x8eec>
   14ebc:	ldr	r1, [sp, #36]	; 0x24
   14ec0:	mov	r0, #0
   14ec4:	str	r0, [r5, #24]
   14ec8:	mov	r0, #36	; 0x24
   14ecc:	str	r0, [r1]
   14ed0:	b	14ee4 <__assert_fail@plt+0x3b40>
   14ed4:	ldr	r0, [r5, #24]
   14ed8:	bl	1a290 <__assert_fail@plt+0x8eec>
   14edc:	mov	r0, #0
   14ee0:	str	r0, [r5, #24]
   14ee4:	ldr	sl, [sp, #28]
   14ee8:	ldr	r0, [sp, #36]	; 0x24
   14eec:	ldr	r4, [r0]
   14ef0:	mov	r0, r6
   14ef4:	bl	1a290 <__assert_fail@plt+0x8eec>
   14ef8:	ldr	r5, [fp, #-44]	; 0xffffffd4
   14efc:	cmp	r9, #0
   14f00:	bne	14f1c <__assert_fail@plt+0x3b78>
   14f04:	b	14f34 <__assert_fail@plt+0x3b90>
   14f08:	mov	r0, r9
   14f0c:	bl	1a290 <__assert_fail@plt+0x8eec>
   14f10:	cmp	r6, #0
   14f14:	mov	r9, r6
   14f18:	beq	14f34 <__assert_fail@plt+0x3b90>
   14f1c:	ldrd	r6, [r9, #8]
   14f20:	cmp	r7, #0
   14f24:	beq	14f08 <__assert_fail@plt+0x3b64>
   14f28:	mov	r0, r7
   14f2c:	bl	11398 <closedir@plt>
   14f30:	b	14f08 <__assert_fail@plt+0x3b64>
   14f34:	ldr	r0, [sl, #12]
   14f38:	bl	11398 <closedir@plt>
   14f3c:	mov	r0, #7
   14f40:	mov	r6, #0
   14f44:	strh	r0, [sl, #56]	; 0x38
   14f48:	str	r6, [sl, #12]
   14f4c:	ldr	r0, [r5, #48]	; 0x30
   14f50:	orr	r0, r0, #8192	; 0x2000
   14f54:	str	r0, [r5, #48]	; 0x30
   14f58:	ldr	r0, [sp, #36]	; 0x24
   14f5c:	str	r4, [r0]
   14f60:	mov	r0, r6
   14f64:	sub	sp, fp, #28
   14f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f6c:	push	{r4, r5, fp, lr}
   14f70:	add	fp, sp, #8
   14f74:	mov	r5, r0
   14f78:	ldr	r0, [r0, #48]	; 0x30
   14f7c:	mov	r4, #0
   14f80:	tst	r0, #4
   14f84:	bne	14fc8 <__assert_fail@plt+0x3c24>
   14f88:	tst	r0, #512	; 0x200
   14f8c:	bne	14fa8 <__assert_fail@plt+0x3c04>
   14f90:	ldr	r0, [r5, #28]
   14f94:	bl	11320 <fchdir@plt>
   14f98:	cmp	r0, #0
   14f9c:	mov	r4, r0
   14fa0:	movwne	r4, #1
   14fa4:	b	14fc8 <__assert_fail@plt+0x3c24>
   14fa8:	ldr	r1, [r5, #32]
   14fac:	add	r0, r5, #60	; 0x3c
   14fb0:	bl	168fc <__assert_fail@plt+0x5558>
   14fb4:	cmp	r0, #0
   14fb8:	bmi	14fc0 <__assert_fail@plt+0x3c1c>
   14fbc:	bl	11380 <close@plt>
   14fc0:	mvn	r0, #99	; 0x63
   14fc4:	str	r0, [r5, #32]
   14fc8:	add	r5, r5, #60	; 0x3c
   14fcc:	mov	r0, r5
   14fd0:	bl	168f4 <__assert_fail@plt+0x5550>
   14fd4:	cmp	r0, #0
   14fd8:	bne	15000 <__assert_fail@plt+0x3c5c>
   14fdc:	mov	r0, r5
   14fe0:	bl	16948 <__assert_fail@plt+0x55a4>
   14fe4:	cmp	r0, #0
   14fe8:	bmi	14fcc <__assert_fail@plt+0x3c28>
   14fec:	bl	11380 <close@plt>
   14ff0:	mov	r0, r5
   14ff4:	bl	168f4 <__assert_fail@plt+0x5550>
   14ff8:	cmp	r0, #0
   14ffc:	beq	14fdc <__assert_fail@plt+0x3c38>
   15000:	mov	r0, r4
   15004:	pop	{r4, r5, fp, pc}
   15008:	push	{fp, lr}
   1500c:	mov	fp, sp
   15010:	cmp	r2, #5
   15014:	bcc	1502c <__assert_fail@plt+0x3c88>
   15018:	bl	11260 <__errno_location@plt>
   1501c:	mov	r1, #22
   15020:	str	r1, [r0]
   15024:	mov	r0, #1
   15028:	pop	{fp, pc}
   1502c:	mov	r0, #0
   15030:	strh	r2, [r1, #60]	; 0x3c
   15034:	pop	{fp, pc}
   15038:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1503c:	add	fp, sp, #28
   15040:	sub	sp, sp, #4
   15044:	mov	r9, r0
   15048:	mvn	r0, #4096	; 0x1000
   1504c:	tst	r1, r0
   15050:	beq	15070 <__assert_fail@plt+0x3ccc>
   15054:	bl	11260 <__errno_location@plt>
   15058:	mov	r1, #22
   1505c:	mov	r5, #0
   15060:	str	r1, [r0]
   15064:	mov	r0, r5
   15068:	sub	sp, fp, #28
   1506c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15070:	ldr	r8, [r9]
   15074:	mov	r7, r1
   15078:	bl	11260 <__errno_location@plt>
   1507c:	mov	r5, #0
   15080:	mov	sl, r0
   15084:	str	r5, [r0]
   15088:	ldrb	r0, [r9, #49]	; 0x31
   1508c:	tst	r0, #32
   15090:	bne	150a8 <__assert_fail@plt+0x3d04>
   15094:	ldrh	r0, [r8, #56]	; 0x38
   15098:	cmp	r0, #1
   1509c:	beq	150b4 <__assert_fail@plt+0x3d10>
   150a0:	cmp	r0, #9
   150a4:	ldreq	r5, [r8, #8]
   150a8:	mov	r0, r5
   150ac:	sub	sp, fp, #28
   150b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150b4:	ldr	r6, [r9, #4]
   150b8:	cmp	r6, #0
   150bc:	bne	150d8 <__assert_fail@plt+0x3d34>
   150c0:	b	150f4 <__assert_fail@plt+0x3d50>
   150c4:	mov	r0, r6
   150c8:	bl	1a290 <__assert_fail@plt+0x8eec>
   150cc:	cmp	r4, #0
   150d0:	mov	r6, r4
   150d4:	beq	150f4 <__assert_fail@plt+0x3d50>
   150d8:	ldr	r1, [r6, #12]
   150dc:	ldr	r4, [r6, #8]
   150e0:	cmp	r1, #0
   150e4:	beq	150c4 <__assert_fail@plt+0x3d20>
   150e8:	mov	r0, r1
   150ec:	bl	11398 <closedir@plt>
   150f0:	b	150c4 <__assert_fail@plt+0x3d20>
   150f4:	mov	r4, #1
   150f8:	cmp	r7, #4096	; 0x1000
   150fc:	bne	15110 <__assert_fail@plt+0x3d6c>
   15100:	ldr	r0, [r9, #48]	; 0x30
   15104:	mov	r4, #2
   15108:	orr	r0, r0, #4096	; 0x1000
   1510c:	str	r0, [r9, #48]	; 0x30
   15110:	ldr	r0, [r8, #48]	; 0x30
   15114:	cmp	r0, #0
   15118:	bne	15170 <__assert_fail@plt+0x3dcc>
   1511c:	ldr	r0, [r8, #24]
   15120:	ldrb	r0, [r0]
   15124:	cmp	r0, #47	; 0x2f
   15128:	beq	15170 <__assert_fail@plt+0x3dcc>
   1512c:	ldr	r0, [r9, #48]	; 0x30
   15130:	tst	r0, #4
   15134:	bne	15170 <__assert_fail@plt+0x3dcc>
   15138:	mov	r1, #32768	; 0x8000
   1513c:	tst	r0, #512	; 0x200
   15140:	and	r1, r1, r0, lsl #11
   15144:	orr	r1, r1, #18688	; 0x4900
   15148:	orr	r2, r1, #524288	; 0x80000
   1514c:	bne	15190 <__assert_fail@plt+0x3dec>
   15150:	movw	r0, #45460	; 0xb194
   15154:	mov	r1, r2
   15158:	movt	r0, #1
   1515c:	bl	1a1f8 <__assert_fail@plt+0x8e54>
   15160:	mov	r8, r0
   15164:	cmn	r0, #1
   15168:	bgt	151ac <__assert_fail@plt+0x3e08>
   1516c:	b	151f4 <__assert_fail@plt+0x3e50>
   15170:	mov	r0, r9
   15174:	mov	r1, r4
   15178:	bl	143d4 <__assert_fail@plt+0x3030>
   1517c:	mov	r5, r0
   15180:	str	r0, [r9, #4]
   15184:	mov	r0, r5
   15188:	sub	sp, fp, #28
   1518c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15190:	ldr	r0, [r9, #32]
   15194:	movw	r1, #45460	; 0xb194
   15198:	movt	r1, #1
   1519c:	bl	16f60 <__assert_fail@plt+0x5bbc>
   151a0:	mov	r8, r0
   151a4:	cmn	r0, #1
   151a8:	ble	151f4 <__assert_fail@plt+0x3e50>
   151ac:	mov	r0, r9
   151b0:	mov	r1, r4
   151b4:	bl	143d4 <__assert_fail@plt+0x3030>
   151b8:	str	r0, [r9, #4]
   151bc:	ldrb	r0, [r9, #49]	; 0x31
   151c0:	tst	r0, #2
   151c4:	bne	15208 <__assert_fail@plt+0x3e64>
   151c8:	mov	r0, r8
   151cc:	bl	11320 <fchdir@plt>
   151d0:	cmp	r0, #0
   151d4:	beq	15244 <__assert_fail@plt+0x3ea0>
   151d8:	ldr	r4, [sl]
   151dc:	mov	r0, r8
   151e0:	bl	11380 <close@plt>
   151e4:	str	r4, [sl]
   151e8:	mov	r0, r5
   151ec:	sub	sp, fp, #28
   151f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151f4:	mov	r5, #0
   151f8:	str	r5, [r9, #4]
   151fc:	mov	r0, r5
   15200:	sub	sp, fp, #28
   15204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15208:	ldr	r1, [r9, #32]
   1520c:	cmp	r1, r8
   15210:	bne	1521c <__assert_fail@plt+0x3e78>
   15214:	cmn	r1, #100	; 0x64
   15218:	bne	1525c <__assert_fail@plt+0x3eb8>
   1521c:	add	r0, r9, #60	; 0x3c
   15220:	bl	168fc <__assert_fail@plt+0x5558>
   15224:	cmp	r0, #0
   15228:	bmi	15230 <__assert_fail@plt+0x3e8c>
   1522c:	bl	11380 <close@plt>
   15230:	str	r8, [r9, #32]
   15234:	ldr	r5, [r9, #4]
   15238:	mov	r0, r5
   1523c:	sub	sp, fp, #28
   15240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15244:	mov	r0, r8
   15248:	bl	11380 <close@plt>
   1524c:	ldr	r5, [r9, #4]
   15250:	mov	r0, r5
   15254:	sub	sp, fp, #28
   15258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1525c:	bl	11374 <abort@plt>
   15260:	push	{fp, lr}
   15264:	mov	fp, sp
   15268:	mov	r2, r1
   1526c:	ldrd	r0, [r0, #8]
   15270:	mov	r3, #0
   15274:	bl	1a550 <__assert_fail@plt+0x91ac>
   15278:	mov	r0, r2
   1527c:	pop	{fp, pc}
   15280:	push	{r4, r5, fp, lr}
   15284:	add	fp, sp, #8
   15288:	ldrd	r2, [r1, #8]
   1528c:	ldrd	r4, [r0, #8]
   15290:	eor	r3, r5, r3
   15294:	eor	r2, r4, r2
   15298:	orrs	r2, r2, r3
   1529c:	mov	r2, #0
   152a0:	bne	152c0 <__assert_fail@plt+0x3f1c>
   152a4:	ldrd	r2, [r1]
   152a8:	ldrd	r0, [r0]
   152ac:	eor	r1, r1, r3
   152b0:	eor	r0, r0, r2
   152b4:	orr	r0, r0, r1
   152b8:	clz	r0, r0
   152bc:	lsr	r2, r0, #5
   152c0:	mov	r0, r2
   152c4:	pop	{r4, r5, fp, pc}
   152c8:	push	{r4, r5, fp, lr}
   152cc:	add	fp, sp, #8
   152d0:	ldr	r0, [r0]
   152d4:	ldrd	r2, [r0, #160]	; 0xa0
   152d8:	ldr	r0, [r1]
   152dc:	ldrd	r4, [r0, #160]	; 0xa0
   152e0:	mov	r0, #0
   152e4:	subs	r1, r4, r2
   152e8:	sbcs	r1, r5, r3
   152ec:	movwcc	r0, #1
   152f0:	subs	r1, r2, r4
   152f4:	sbcs	r1, r3, r5
   152f8:	subcc	r0, r0, #1
   152fc:	pop	{r4, r5, fp, pc}
   15300:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15304:	add	fp, sp, #24
   15308:	sub	sp, sp, #96	; 0x60
   1530c:	ldr	r7, [r0, #44]	; 0x2c
   15310:	mov	r4, r0
   15314:	mov	r5, #0
   15318:	ldrb	r0, [r7, #49]	; 0x31
   1531c:	tst	r0, #2
   15320:	beq	153d0 <__assert_fail@plt+0x402c>
   15324:	ldr	r6, [r7, #52]	; 0x34
   15328:	mov	r9, r1
   1532c:	cmp	r6, #0
   15330:	bne	15370 <__assert_fail@plt+0x3fcc>
   15334:	movw	r0, #41616	; 0xa290
   15338:	movw	r2, #21564	; 0x543c
   1533c:	movw	r3, #21596	; 0x545c
   15340:	mov	r1, #0
   15344:	mov	r8, #0
   15348:	movt	r0, #1
   1534c:	movt	r2, #1
   15350:	movt	r3, #1
   15354:	str	r0, [sp]
   15358:	mov	r0, #13
   1535c:	bl	15974 <__assert_fail@plt+0x45d0>
   15360:	mov	r6, r0
   15364:	cmp	r0, #0
   15368:	str	r0, [r7, #52]	; 0x34
   1536c:	beq	153b0 <__assert_fail@plt+0x400c>
   15370:	ldrd	r0, [r4, #64]	; 0x40
   15374:	str	r1, [sp, #12]
   15378:	str	r0, [sp, #8]
   1537c:	add	r1, sp, #8
   15380:	mov	r0, r6
   15384:	bl	156a0 <__assert_fail@plt+0x42fc>
   15388:	cmp	r0, #0
   1538c:	beq	153a0 <__assert_fail@plt+0x3ffc>
   15390:	ldr	r5, [r0, #8]
   15394:	mov	r0, r5
   15398:	sub	sp, fp, #24
   1539c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   153a0:	mov	r8, #1
   153a4:	cmp	r9, #0
   153a8:	bpl	153bc <__assert_fail@plt+0x4018>
   153ac:	b	153d0 <__assert_fail@plt+0x402c>
   153b0:	mov	r6, #0
   153b4:	cmp	r9, #0
   153b8:	bmi	153d0 <__assert_fail@plt+0x402c>
   153bc:	add	r1, sp, #8
   153c0:	mov	r0, r9
   153c4:	bl	110bc <fstatfs64@plt>
   153c8:	cmp	r0, #0
   153cc:	beq	153dc <__assert_fail@plt+0x4038>
   153d0:	mov	r0, r5
   153d4:	sub	sp, fp, #24
   153d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   153dc:	cmp	r8, #0
   153e0:	beq	1542c <__assert_fail@plt+0x4088>
   153e4:	mov	r0, #16
   153e8:	bl	19d84 <__assert_fail@plt+0x89e0>
   153ec:	cmp	r0, #0
   153f0:	beq	1542c <__assert_fail@plt+0x4088>
   153f4:	mov	r5, r0
   153f8:	ldrd	r0, [r4, #64]	; 0x40
   153fc:	ldr	r2, [sp, #8]
   15400:	stm	r5, {r0, r1, r2}
   15404:	mov	r0, r6
   15408:	mov	r1, r5
   1540c:	bl	165d0 <__assert_fail@plt+0x522c>
   15410:	cmp	r0, #0
   15414:	beq	15424 <__assert_fail@plt+0x4080>
   15418:	cmp	r0, r5
   1541c:	beq	1542c <__assert_fail@plt+0x4088>
   15420:	bl	11374 <abort@plt>
   15424:	mov	r0, r5
   15428:	bl	1a290 <__assert_fail@plt+0x8eec>
   1542c:	ldr	r5, [sp, #8]
   15430:	mov	r0, r5
   15434:	sub	sp, fp, #24
   15438:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1543c:	push	{fp, lr}
   15440:	mov	fp, sp
   15444:	mov	r2, r1
   15448:	ldrd	r0, [r0]
   1544c:	mov	r3, #0
   15450:	bl	1a550 <__assert_fail@plt+0x91ac>
   15454:	mov	r0, r2
   15458:	pop	{fp, pc}
   1545c:	ldrd	r2, [r1]
   15460:	ldrd	r0, [r0]
   15464:	eor	r1, r1, r3
   15468:	eor	r0, r0, r2
   1546c:	orr	r0, r0, r1
   15470:	clz	r0, r0
   15474:	lsr	r0, r0, #5
   15478:	bx	lr
   1547c:	andeq	r0, r0, r0
   15480:	ldr	r0, [r0, #8]
   15484:	bx	lr
   15488:	ldr	r0, [r0, #12]
   1548c:	bx	lr
   15490:	ldr	r0, [r0, #16]
   15494:	bx	lr
   15498:	ldm	r0, {r2, ip}
   1549c:	mov	r0, #0
   154a0:	cmp	r2, ip
   154a4:	bxcs	lr
   154a8:	mov	r0, #0
   154ac:	ldr	r1, [r2]
   154b0:	cmp	r1, #0
   154b4:	bne	154d0 <__assert_fail@plt+0x412c>
   154b8:	add	r2, r2, #8
   154bc:	cmp	r2, ip
   154c0:	bcs	154fc <__assert_fail@plt+0x4158>
   154c4:	ldr	r1, [r2]
   154c8:	cmp	r1, #0
   154cc:	beq	154b8 <__assert_fail@plt+0x4114>
   154d0:	mov	r3, #0
   154d4:	mov	r1, r2
   154d8:	ldr	r1, [r1, #4]
   154dc:	add	r3, r3, #1
   154e0:	cmp	r1, #0
   154e4:	bne	154d8 <__assert_fail@plt+0x4134>
   154e8:	cmp	r3, r0
   154ec:	movhi	r0, r3
   154f0:	add	r2, r2, #8
   154f4:	cmp	r2, ip
   154f8:	bcc	154c4 <__assert_fail@plt+0x4120>
   154fc:	bx	lr
   15500:	push	{fp, lr}
   15504:	mov	fp, sp
   15508:	ldm	r0, {r3, ip}
   1550c:	mov	lr, #0
   15510:	mov	r1, #0
   15514:	cmp	r3, ip
   15518:	bcs	1556c <__assert_fail@plt+0x41c8>
   1551c:	mov	r1, #0
   15520:	mov	lr, #0
   15524:	ldr	r2, [r3]
   15528:	cmp	r2, #0
   1552c:	bne	15548 <__assert_fail@plt+0x41a4>
   15530:	add	r3, r3, #8
   15534:	cmp	r3, ip
   15538:	bcs	1556c <__assert_fail@plt+0x41c8>
   1553c:	ldr	r2, [r3]
   15540:	cmp	r2, #0
   15544:	beq	15530 <__assert_fail@plt+0x418c>
   15548:	mov	r2, r3
   1554c:	ldr	r2, [r2, #4]
   15550:	add	r1, r1, #1
   15554:	cmp	r2, #0
   15558:	bne	1554c <__assert_fail@plt+0x41a8>
   1555c:	add	lr, lr, #1
   15560:	add	r3, r3, #8
   15564:	cmp	r3, ip
   15568:	bcc	1553c <__assert_fail@plt+0x4198>
   1556c:	ldr	r2, [r0, #12]
   15570:	cmp	lr, r2
   15574:	bne	1558c <__assert_fail@plt+0x41e8>
   15578:	ldr	r2, [r0, #16]
   1557c:	mov	r0, #1
   15580:	cmp	r1, r2
   15584:	movne	r0, #0
   15588:	pop	{fp, pc}
   1558c:	mov	r0, #0
   15590:	pop	{fp, pc}
   15594:	nop	{0}
   15598:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1559c:	add	fp, sp, #24
   155a0:	sub	sp, sp, #8
   155a4:	ldr	r6, [r0]
   155a8:	ldmib	r0, {r2, r7, r8}
   155ac:	ldr	r3, [r0, #16]
   155b0:	mov	r4, r1
   155b4:	mov	r5, #0
   155b8:	cmp	r6, r2
   155bc:	bcs	15614 <__assert_fail@plt+0x4270>
   155c0:	mov	r5, #0
   155c4:	ldr	r0, [r6]
   155c8:	cmp	r0, #0
   155cc:	bne	155e8 <__assert_fail@plt+0x4244>
   155d0:	add	r6, r6, #8
   155d4:	cmp	r6, r2
   155d8:	bcs	15614 <__assert_fail@plt+0x4270>
   155dc:	ldr	r0, [r6]
   155e0:	cmp	r0, #0
   155e4:	beq	155d0 <__assert_fail@plt+0x422c>
   155e8:	mov	r0, #0
   155ec:	mov	r1, r6
   155f0:	ldr	r1, [r1, #4]
   155f4:	add	r0, r0, #1
   155f8:	cmp	r1, #0
   155fc:	bne	155f0 <__assert_fail@plt+0x424c>
   15600:	cmp	r0, r5
   15604:	movhi	r5, r0
   15608:	add	r6, r6, #8
   1560c:	cmp	r6, r2
   15610:	bcc	155dc <__assert_fail@plt+0x4238>
   15614:	movw	r2, #45512	; 0xb1c8
   15618:	mov	r0, r4
   1561c:	mov	r1, #1
   15620:	movt	r2, #1
   15624:	bl	112a8 <__fprintf_chk@plt>
   15628:	movw	r2, #45536	; 0xb1e0
   1562c:	mov	r0, r4
   15630:	mov	r1, #1
   15634:	mov	r3, r7
   15638:	movt	r2, #1
   1563c:	bl	112a8 <__fprintf_chk@plt>
   15640:	vmov	s0, r8
   15644:	vldr	d16, [pc, #76]	; 15698 <__assert_fail@plt+0x42f4>
   15648:	movw	r2, #45560	; 0xb1f8
   1564c:	mov	r0, r4
   15650:	mov	r1, #1
   15654:	mov	r3, r8
   15658:	movt	r2, #1
   1565c:	vcvt.f64.u32	d17, s0
   15660:	vmov	s0, r7
   15664:	vcvt.f64.u32	d18, s0
   15668:	vmul.f64	d16, d17, d16
   1566c:	vdiv.f64	d16, d16, d18
   15670:	vstr	d16, [sp]
   15674:	bl	112a8 <__fprintf_chk@plt>
   15678:	movw	r2, #45593	; 0xb219
   1567c:	mov	r0, r4
   15680:	mov	r1, #1
   15684:	mov	r3, r5
   15688:	movt	r2, #1
   1568c:	sub	sp, fp, #24
   15690:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15694:	b	112a8 <__fprintf_chk@plt>
   15698:	andeq	r0, r0, r0
   1569c:	subsmi	r0, r9, r0
   156a0:	push	{r4, r5, r6, r7, fp, lr}
   156a4:	add	fp, sp, #16
   156a8:	mov	r4, r1
   156ac:	ldr	r1, [r0, #8]
   156b0:	ldr	r2, [r0, #24]
   156b4:	mov	r5, r0
   156b8:	mov	r0, r4
   156bc:	blx	r2
   156c0:	ldr	r1, [r5, #8]
   156c4:	cmp	r0, r1
   156c8:	bcs	15730 <__assert_fail@plt+0x438c>
   156cc:	ldr	r7, [r5]
   156d0:	mov	r6, #0
   156d4:	ldr	r1, [r7, r0, lsl #3]!
   156d8:	cmp	r1, #0
   156dc:	cmpne	r7, #0
   156e0:	bne	15710 <__assert_fail@plt+0x436c>
   156e4:	mov	r0, r6
   156e8:	pop	{r4, r5, r6, r7, fp, pc}
   156ec:	ldr	r2, [r5, #28]
   156f0:	mov	r0, r4
   156f4:	blx	r2
   156f8:	cmp	r0, #0
   156fc:	bne	15724 <__assert_fail@plt+0x4380>
   15700:	ldr	r7, [r7, #4]
   15704:	cmp	r7, #0
   15708:	beq	156e4 <__assert_fail@plt+0x4340>
   1570c:	ldr	r1, [r7]
   15710:	cmp	r1, r4
   15714:	bne	156ec <__assert_fail@plt+0x4348>
   15718:	mov	r6, r4
   1571c:	mov	r0, r6
   15720:	pop	{r4, r5, r6, r7, fp, pc}
   15724:	ldr	r6, [r7]
   15728:	mov	r0, r6
   1572c:	pop	{r4, r5, r6, r7, fp, pc}
   15730:	bl	11374 <abort@plt>
   15734:	push	{fp, lr}
   15738:	mov	fp, sp
   1573c:	ldr	r1, [r0, #16]
   15740:	cmp	r1, #0
   15744:	beq	15764 <__assert_fail@plt+0x43c0>
   15748:	ldm	r0, {r1, r2}
   1574c:	cmp	r1, r2
   15750:	bcs	1576c <__assert_fail@plt+0x43c8>
   15754:	ldr	r0, [r1], #8
   15758:	cmp	r0, #0
   1575c:	beq	1574c <__assert_fail@plt+0x43a8>
   15760:	pop	{fp, pc}
   15764:	mov	r0, #0
   15768:	pop	{fp, pc}
   1576c:	bl	11374 <abort@plt>
   15770:	push	{r4, r5, fp, lr}
   15774:	add	fp, sp, #8
   15778:	mov	r5, r1
   1577c:	ldr	r1, [r0, #8]
   15780:	ldr	r2, [r0, #24]
   15784:	mov	r4, r0
   15788:	mov	r0, r5
   1578c:	blx	r2
   15790:	ldr	r1, [r4, #8]
   15794:	cmp	r0, r1
   15798:	bcs	157fc <__assert_fail@plt+0x4458>
   1579c:	ldr	r1, [r4]
   157a0:	add	r2, r1, r0, lsl #3
   157a4:	ldr	r3, [r2]
   157a8:	ldr	r2, [r2, #4]
   157ac:	cmp	r3, r5
   157b0:	beq	157c0 <__assert_fail@plt+0x441c>
   157b4:	cmp	r2, #0
   157b8:	bne	157a4 <__assert_fail@plt+0x4400>
   157bc:	b	157d0 <__assert_fail@plt+0x442c>
   157c0:	cmp	r2, #0
   157c4:	beq	157d0 <__assert_fail@plt+0x442c>
   157c8:	ldr	r0, [r2]
   157cc:	pop	{r4, r5, fp, pc}
   157d0:	ldr	r2, [r4, #4]
   157d4:	add	r0, r1, r0, lsl #3
   157d8:	add	r1, r0, #8
   157dc:	cmp	r1, r2
   157e0:	bcs	157f4 <__assert_fail@plt+0x4450>
   157e4:	ldr	r0, [r1], #8
   157e8:	cmp	r0, #0
   157ec:	beq	157dc <__assert_fail@plt+0x4438>
   157f0:	pop	{r4, r5, fp, pc}
   157f4:	mov	r0, #0
   157f8:	pop	{r4, r5, fp, pc}
   157fc:	bl	11374 <abort@plt>
   15800:	push	{r4, r5, fp, lr}
   15804:	add	fp, sp, #8
   15808:	ldm	r0, {r5, lr}
   1580c:	mov	ip, r0
   15810:	mov	r0, #0
   15814:	cmp	r5, lr
   15818:	popcs	{r4, r5, fp, pc}
   1581c:	mov	r0, #0
   15820:	ldr	r3, [r5]
   15824:	cmp	r3, #0
   15828:	cmpne	r5, #0
   1582c:	beq	15838 <__assert_fail@plt+0x4494>
   15830:	b	15854 <__assert_fail@plt+0x44b0>
   15834:	ldr	lr, [ip, #4]
   15838:	add	r5, r5, #8
   1583c:	cmp	r5, lr
   15840:	bcs	1587c <__assert_fail@plt+0x44d8>
   15844:	ldr	r3, [r5]
   15848:	cmp	r3, #0
   1584c:	cmpne	r5, #0
   15850:	beq	15838 <__assert_fail@plt+0x4494>
   15854:	mov	r3, r5
   15858:	cmp	r0, r2
   1585c:	bcs	1587c <__assert_fail@plt+0x44d8>
   15860:	ldr	r4, [r3]
   15864:	str	r4, [r1, r0, lsl #2]
   15868:	add	r0, r0, #1
   1586c:	ldr	r3, [r3, #4]
   15870:	cmp	r3, #0
   15874:	bne	15858 <__assert_fail@plt+0x44b4>
   15878:	b	15834 <__assert_fail@plt+0x4490>
   1587c:	pop	{r4, r5, fp, pc}
   15880:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15884:	add	fp, sp, #24
   15888:	mov	r5, r1
   1588c:	ldr	r4, [r0]
   15890:	ldr	r1, [r0, #4]
   15894:	mov	r6, #0
   15898:	cmp	r4, r1
   1589c:	bcs	15918 <__assert_fail@plt+0x4574>
   158a0:	mov	r9, r2
   158a4:	mov	r8, r0
   158a8:	mov	r6, #0
   158ac:	ldr	r0, [r4]
   158b0:	cmp	r0, #0
   158b4:	cmpne	r4, #0
   158b8:	beq	158c4 <__assert_fail@plt+0x4520>
   158bc:	b	158e0 <__assert_fail@plt+0x453c>
   158c0:	ldr	r1, [r8, #4]
   158c4:	add	r4, r4, #8
   158c8:	cmp	r4, r1
   158cc:	bcs	15918 <__assert_fail@plt+0x4574>
   158d0:	ldr	r0, [r4]
   158d4:	cmp	r0, #0
   158d8:	cmpne	r4, #0
   158dc:	beq	158c4 <__assert_fail@plt+0x4520>
   158e0:	mov	r1, r9
   158e4:	blx	r5
   158e8:	cmp	r0, #0
   158ec:	beq	15918 <__assert_fail@plt+0x4574>
   158f0:	mov	r7, r4
   158f4:	ldr	r7, [r7, #4]
   158f8:	add	r6, r6, #1
   158fc:	cmp	r7, #0
   15900:	beq	158c0 <__assert_fail@plt+0x451c>
   15904:	ldr	r0, [r7]
   15908:	mov	r1, r9
   1590c:	blx	r5
   15910:	cmp	r0, #0
   15914:	bne	158f4 <__assert_fail@plt+0x4550>
   15918:	mov	r0, r6
   1591c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15920:	ldrb	r2, [r0]
   15924:	cmp	r2, #0
   15928:	moveq	r0, #0
   1592c:	bxeq	lr
   15930:	add	r3, r0, #1
   15934:	mov	r0, #0
   15938:	rsb	r0, r0, r0, lsl #5
   1593c:	uxtab	r0, r0, r2
   15940:	udiv	r2, r0, r1
   15944:	mls	r0, r2, r1, r0
   15948:	ldrb	r2, [r3], #1
   1594c:	cmp	r2, #0
   15950:	bne	15938 <__assert_fail@plt+0x4594>
   15954:	bx	lr
   15958:	movw	r1, #45624	; 0xb238
   1595c:	movt	r1, #1
   15960:	vld1.32	{d16-d17}, [r1]!
   15964:	ldr	r1, [r1]
   15968:	vst1.32	{d16-d17}, [r0]!
   1596c:	str	r1, [r0]
   15970:	bx	lr
   15974:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15978:	add	fp, sp, #24
   1597c:	movw	r9, #23464	; 0x5ba8
   15980:	cmp	r3, #0
   15984:	movw	r5, #23444	; 0x5b94
   15988:	mov	r6, r0
   1598c:	mov	r0, #40	; 0x28
   15990:	mov	r7, r1
   15994:	movt	r9, #1
   15998:	movne	r9, r3
   1599c:	cmp	r2, #0
   159a0:	movt	r5, #1
   159a4:	movne	r5, r2
   159a8:	bl	19d84 <__assert_fail@plt+0x89e0>
   159ac:	mov	r8, #0
   159b0:	cmp	r0, #0
   159b4:	beq	15b7c <__assert_fail@plt+0x47d8>
   159b8:	mov	r4, r0
   159bc:	movw	r0, #45624	; 0xb238
   159c0:	cmp	r7, #0
   159c4:	movt	r0, #1
   159c8:	moveq	r7, r0
   159cc:	cmp	r7, r0
   159d0:	str	r7, [r4, #20]
   159d4:	beq	15a50 <__assert_fail@plt+0x46ac>
   159d8:	vldr	s2, [pc, #420]	; 15b84 <__assert_fail@plt+0x47e0>
   159dc:	vldr	s0, [r7, #8]
   159e0:	vcmpe.f32	s0, s2
   159e4:	vmrs	APSR_nzcv, fpscr
   159e8:	ble	15afc <__assert_fail@plt+0x4758>
   159ec:	vldr	s4, [pc, #404]	; 15b88 <__assert_fail@plt+0x47e4>
   159f0:	vcmpe.f32	s0, s4
   159f4:	vmrs	APSR_nzcv, fpscr
   159f8:	bpl	15afc <__assert_fail@plt+0x4758>
   159fc:	vldr	s4, [pc, #392]	; 15b8c <__assert_fail@plt+0x47e8>
   15a00:	vldr	s6, [r7, #12]
   15a04:	vcmpe.f32	s6, s4
   15a08:	vmrs	APSR_nzcv, fpscr
   15a0c:	ble	15afc <__assert_fail@plt+0x4758>
   15a10:	vldr	s4, [r7]
   15a14:	vcmpe.f32	s4, #0.0
   15a18:	vmrs	APSR_nzcv, fpscr
   15a1c:	blt	15afc <__assert_fail@plt+0x4758>
   15a20:	vadd.f32	s2, s4, s2
   15a24:	vcmpe.f32	s2, s0
   15a28:	vmrs	APSR_nzcv, fpscr
   15a2c:	bpl	15afc <__assert_fail@plt+0x4758>
   15a30:	vldr	s0, [r7, #4]
   15a34:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15a38:	vcmpe.f32	s0, s4
   15a3c:	vmrs	APSR_nzcv, fpscr
   15a40:	bhi	15afc <__assert_fail@plt+0x4758>
   15a44:	vcmpe.f32	s2, s0
   15a48:	vmrs	APSR_nzcv, fpscr
   15a4c:	bpl	15afc <__assert_fail@plt+0x4758>
   15a50:	ldrb	r0, [r7, #16]
   15a54:	cmp	r0, #0
   15a58:	bne	15a84 <__assert_fail@plt+0x46e0>
   15a5c:	vmov	s2, r6
   15a60:	vldr	s0, [r7, #8]
   15a64:	vldr	s4, [pc, #292]	; 15b90 <__assert_fail@plt+0x47ec>
   15a68:	vcvt.f32.u32	s2, s2
   15a6c:	vdiv.f32	s2, s2, s0
   15a70:	vcvt.u32.f32	s0, s2
   15a74:	vcmpe.f32	s2, s4
   15a78:	vmrs	APSR_nzcv, fpscr
   15a7c:	bge	15b18 <__assert_fail@plt+0x4774>
   15a80:	vmov	r6, s0
   15a84:	cmp	r6, #10
   15a88:	movls	r6, #10
   15a8c:	orr	r0, r6, #1
   15a90:	cmn	r0, #1
   15a94:	beq	15b18 <__assert_fail@plt+0x4774>
   15a98:	ldr	r6, [fp, #8]
   15a9c:	mov	r1, #3
   15aa0:	cmp	r0, #10
   15aa4:	bcc	15adc <__assert_fail@plt+0x4738>
   15aa8:	mov	r1, #3
   15aac:	mov	r3, #9
   15ab0:	mov	r2, #12
   15ab4:	udiv	r7, r0, r1
   15ab8:	mls	r7, r7, r1, r0
   15abc:	cmp	r7, #0
   15ac0:	beq	15adc <__assert_fail@plt+0x4738>
   15ac4:	add	r3, r3, r2
   15ac8:	add	r2, r2, #8
   15acc:	add	r1, r1, #2
   15ad0:	add	r3, r3, #4
   15ad4:	cmp	r3, r0
   15ad8:	bcc	15ab4 <__assert_fail@plt+0x4710>
   15adc:	udiv	r2, r0, r1
   15ae0:	mls	r1, r2, r1, r0
   15ae4:	cmp	r1, #0
   15ae8:	bne	15b10 <__assert_fail@plt+0x476c>
   15aec:	add	r0, r0, #2
   15af0:	cmn	r0, #1
   15af4:	bne	15a9c <__assert_fail@plt+0x46f8>
   15af8:	b	15b18 <__assert_fail@plt+0x4774>
   15afc:	str	r0, [r4, #20]
   15b00:	mov	r0, r4
   15b04:	bl	1a290 <__assert_fail@plt+0x8eec>
   15b08:	mov	r0, r8
   15b0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15b10:	cmp	r0, #536870912	; 0x20000000
   15b14:	bcc	15b30 <__assert_fail@plt+0x478c>
   15b18:	mov	r0, #0
   15b1c:	str	r0, [r4, #8]
   15b20:	mov	r0, r4
   15b24:	bl	1a290 <__assert_fail@plt+0x8eec>
   15b28:	mov	r0, r8
   15b2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15b30:	cmp	r0, #0
   15b34:	str	r0, [r4, #8]
   15b38:	beq	15b20 <__assert_fail@plt+0x477c>
   15b3c:	mov	r1, #8
   15b40:	bl	19d30 <__assert_fail@plt+0x898c>
   15b44:	cmp	r0, #0
   15b48:	str	r0, [r4]
   15b4c:	beq	15b20 <__assert_fail@plt+0x477c>
   15b50:	mov	r1, #0
   15b54:	str	r5, [r4, #24]
   15b58:	str	r9, [r4, #28]
   15b5c:	str	r6, [r4, #32]
   15b60:	mov	r8, r4
   15b64:	str	r1, [r4, #36]	; 0x24
   15b68:	str	r1, [r4, #12]
   15b6c:	str	r1, [r4, #16]
   15b70:	ldr	r1, [r4, #8]
   15b74:	add	r0, r0, r1, lsl #3
   15b78:	str	r0, [r4, #4]
   15b7c:	mov	r0, r8
   15b80:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15b84:	stclcc	12, cr12, [ip, #820]	; 0x334
   15b88:	svccc	0x00666666
   15b8c:	svccc	0x008ccccd
   15b90:	svcmi	0x00800000
   15b94:	ror	r2, r0, #3
   15b98:	udiv	r2, r2, r1
   15b9c:	mul	r1, r2, r1
   15ba0:	rsb	r0, r1, r0, ror #3
   15ba4:	bx	lr
   15ba8:	sub	r0, r0, r1
   15bac:	clz	r0, r0
   15bb0:	lsr	r0, r0, #5
   15bb4:	bx	lr
   15bb8:	push	{r4, r5, r6, r7, fp, lr}
   15bbc:	add	fp, sp, #16
   15bc0:	mov	r4, r0
   15bc4:	ldr	r5, [r0]
   15bc8:	ldr	r0, [r0, #4]
   15bcc:	cmp	r5, r0
   15bd0:	bcs	15c80 <__assert_fail@plt+0x48dc>
   15bd4:	mov	r6, #0
   15bd8:	ldr	r1, [r5]
   15bdc:	cmp	r1, #0
   15be0:	bne	15c0c <__assert_fail@plt+0x4868>
   15be4:	b	15bf4 <__assert_fail@plt+0x4850>
   15be8:	str	r6, [r5]
   15bec:	str	r6, [r5, #4]
   15bf0:	ldr	r0, [r4, #4]
   15bf4:	add	r5, r5, #8
   15bf8:	cmp	r5, r0
   15bfc:	bcs	15c80 <__assert_fail@plt+0x48dc>
   15c00:	ldr	r1, [r5]
   15c04:	cmp	r1, #0
   15c08:	beq	15bf4 <__assert_fail@plt+0x4850>
   15c0c:	ldr	r1, [r4, #32]
   15c10:	ldr	r7, [r5, #4]
   15c14:	cmp	r1, #0
   15c18:	mov	r0, r1
   15c1c:	movwne	r0, #1
   15c20:	cmp	r7, #0
   15c24:	bne	15c68 <__assert_fail@plt+0x48c4>
   15c28:	cmp	r0, #0
   15c2c:	beq	15be8 <__assert_fail@plt+0x4844>
   15c30:	ldr	r0, [r5]
   15c34:	blx	r1
   15c38:	b	15be8 <__assert_fail@plt+0x4844>
   15c3c:	str	r6, [r7]
   15c40:	cmp	r1, #0
   15c44:	ldr	r2, [r7, #4]
   15c48:	ldr	r0, [r4, #36]	; 0x24
   15c4c:	str	r0, [r7, #4]
   15c50:	mov	r0, r1
   15c54:	str	r7, [r4, #36]	; 0x24
   15c58:	movwne	r0, #1
   15c5c:	cmp	r2, #0
   15c60:	mov	r7, r2
   15c64:	beq	15c28 <__assert_fail@plt+0x4884>
   15c68:	tst	r0, #1
   15c6c:	beq	15c3c <__assert_fail@plt+0x4898>
   15c70:	ldr	r0, [r7]
   15c74:	blx	r1
   15c78:	ldr	r1, [r4, #32]
   15c7c:	b	15c3c <__assert_fail@plt+0x4898>
   15c80:	mov	r0, #0
   15c84:	str	r0, [r4, #12]
   15c88:	str	r0, [r4, #16]
   15c8c:	pop	{r4, r5, r6, r7, fp, pc}
   15c90:	push	{r4, r5, r6, sl, fp, lr}
   15c94:	add	fp, sp, #16
   15c98:	mov	r4, r0
   15c9c:	ldr	r0, [r0, #32]
   15ca0:	cmp	r0, #0
   15ca4:	beq	15d18 <__assert_fail@plt+0x4974>
   15ca8:	ldr	r0, [r4, #16]
   15cac:	cmp	r0, #0
   15cb0:	beq	15d18 <__assert_fail@plt+0x4974>
   15cb4:	ldr	r5, [r4]
   15cb8:	ldr	r1, [r4, #4]
   15cbc:	cmp	r5, r1
   15cc0:	bcc	15cd8 <__assert_fail@plt+0x4934>
   15cc4:	b	15d18 <__assert_fail@plt+0x4974>
   15cc8:	ldr	r1, [r4, #4]
   15ccc:	add	r5, r5, #8
   15cd0:	cmp	r5, r1
   15cd4:	bcs	15d18 <__assert_fail@plt+0x4974>
   15cd8:	ldr	r0, [r5]
   15cdc:	cmp	r0, #0
   15ce0:	cmpne	r5, #0
   15ce4:	beq	15ccc <__assert_fail@plt+0x4928>
   15ce8:	ldr	r1, [r4, #32]
   15cec:	blx	r1
   15cf0:	ldr	r6, [r5, #4]
   15cf4:	cmp	r6, #0
   15cf8:	beq	15cc8 <__assert_fail@plt+0x4924>
   15cfc:	ldr	r1, [r4, #32]
   15d00:	ldr	r0, [r6]
   15d04:	blx	r1
   15d08:	ldr	r6, [r6, #4]
   15d0c:	cmp	r6, #0
   15d10:	bne	15cfc <__assert_fail@plt+0x4958>
   15d14:	b	15cc8 <__assert_fail@plt+0x4924>
   15d18:	ldr	r5, [r4]
   15d1c:	ldr	r1, [r4, #4]
   15d20:	cmp	r5, r1
   15d24:	bcc	15d38 <__assert_fail@plt+0x4994>
   15d28:	b	15d60 <__assert_fail@plt+0x49bc>
   15d2c:	add	r5, r5, #8
   15d30:	cmp	r5, r1
   15d34:	bcs	15d60 <__assert_fail@plt+0x49bc>
   15d38:	ldr	r0, [r5, #4]
   15d3c:	cmp	r0, #0
   15d40:	beq	15d2c <__assert_fail@plt+0x4988>
   15d44:	ldr	r6, [r0, #4]
   15d48:	bl	1a290 <__assert_fail@plt+0x8eec>
   15d4c:	cmp	r6, #0
   15d50:	mov	r0, r6
   15d54:	bne	15d44 <__assert_fail@plt+0x49a0>
   15d58:	ldr	r1, [r4, #4]
   15d5c:	b	15d2c <__assert_fail@plt+0x4988>
   15d60:	ldr	r0, [r4, #36]	; 0x24
   15d64:	cmp	r0, #0
   15d68:	beq	15d80 <__assert_fail@plt+0x49dc>
   15d6c:	ldr	r5, [r0, #4]
   15d70:	bl	1a290 <__assert_fail@plt+0x8eec>
   15d74:	cmp	r5, #0
   15d78:	mov	r0, r5
   15d7c:	bne	15d6c <__assert_fail@plt+0x49c8>
   15d80:	ldr	r0, [r4]
   15d84:	bl	1a290 <__assert_fail@plt+0x8eec>
   15d88:	mov	r0, r4
   15d8c:	pop	{r4, r5, r6, sl, fp, lr}
   15d90:	b	1a290 <__assert_fail@plt+0x8eec>
   15d94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d98:	add	fp, sp, #28
   15d9c:	sub	sp, sp, #44	; 0x2c
   15da0:	mov	r7, r0
   15da4:	mov	r4, r0
   15da8:	ldr	r0, [r7, #20]!
   15dac:	ldrb	r2, [r0, #16]
   15db0:	cmp	r2, #0
   15db4:	bne	15de4 <__assert_fail@plt+0x4a40>
   15db8:	vmov	s2, r1
   15dbc:	vldr	s0, [r0, #8]
   15dc0:	vldr	s4, [pc, #592]	; 16018 <__assert_fail@plt+0x4c74>
   15dc4:	mov	r5, #0
   15dc8:	vcvt.f32.u32	s2, s2
   15dcc:	vdiv.f32	s2, s2, s0
   15dd0:	vcvt.u32.f32	s0, s2
   15dd4:	vcmpe.f32	s2, s4
   15dd8:	vmrs	APSR_nzcv, fpscr
   15ddc:	bge	15f08 <__assert_fail@plt+0x4b64>
   15de0:	vmov	r1, s0
   15de4:	cmp	r1, #10
   15de8:	mov	r5, #0
   15dec:	movls	r1, #10
   15df0:	orr	r6, r1, #1
   15df4:	cmn	r6, #1
   15df8:	beq	15f08 <__assert_fail@plt+0x4b64>
   15dfc:	mov	r0, #3
   15e00:	cmp	r6, #10
   15e04:	bcc	15e3c <__assert_fail@plt+0x4a98>
   15e08:	mov	r0, #3
   15e0c:	mov	r2, #9
   15e10:	mov	r1, #12
   15e14:	udiv	r3, r6, r0
   15e18:	mls	r3, r3, r0, r6
   15e1c:	cmp	r3, #0
   15e20:	beq	15e3c <__assert_fail@plt+0x4a98>
   15e24:	add	r2, r2, r1
   15e28:	add	r1, r1, #8
   15e2c:	add	r0, r0, #2
   15e30:	add	r2, r2, #4
   15e34:	cmp	r2, r6
   15e38:	bcc	15e14 <__assert_fail@plt+0x4a70>
   15e3c:	udiv	r1, r6, r0
   15e40:	mls	r0, r1, r0, r6
   15e44:	cmp	r0, #0
   15e48:	bne	15e5c <__assert_fail@plt+0x4ab8>
   15e4c:	add	r6, r6, #2
   15e50:	cmn	r6, #1
   15e54:	bne	15dfc <__assert_fail@plt+0x4a58>
   15e58:	b	15f08 <__assert_fail@plt+0x4b64>
   15e5c:	sub	r0, r6, #1
   15e60:	cmn	r0, #-536870910	; 0xe0000002
   15e64:	bhi	15f08 <__assert_fail@plt+0x4b64>
   15e68:	ldr	r0, [r4, #8]
   15e6c:	cmp	r6, r0
   15e70:	bne	15e84 <__assert_fail@plt+0x4ae0>
   15e74:	mov	r5, #1
   15e78:	mov	r0, r5
   15e7c:	sub	sp, fp, #28
   15e80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e84:	mov	r0, r6
   15e88:	mov	r1, #8
   15e8c:	bl	19d30 <__assert_fail@plt+0x898c>
   15e90:	cmp	r0, #0
   15e94:	str	r0, [sp, #4]
   15e98:	beq	15f08 <__assert_fail@plt+0x4b64>
   15e9c:	add	r0, r0, r6, lsl #3
   15ea0:	mov	r1, #0
   15ea4:	add	r5, sp, #4
   15ea8:	mov	sl, r4
   15eac:	mov	r2, #0
   15eb0:	str	r1, [sp, #20]
   15eb4:	str	r1, [sp, #16]
   15eb8:	str	r6, [sp, #12]
   15ebc:	mov	r1, r4
   15ec0:	str	r0, [sp, #8]
   15ec4:	add	r0, r5, #20
   15ec8:	vld1.32	{d16-d17}, [r7]
   15ecc:	vst1.32	{d16-d17}, [r0]
   15ed0:	ldr	r0, [sl, #36]!	; 0x24
   15ed4:	str	r0, [sp, #40]	; 0x28
   15ed8:	mov	r0, r5
   15edc:	bl	1601c <__assert_fail@plt+0x4c78>
   15ee0:	cmp	r0, #0
   15ee4:	beq	15f14 <__assert_fail@plt+0x4b70>
   15ee8:	ldr	r0, [r4]
   15eec:	bl	1a290 <__assert_fail@plt+0x8eec>
   15ef0:	mov	r0, #36	; 0x24
   15ef4:	vld1.32	{d16-d17}, [r5], r0
   15ef8:	vst1.32	{d16-d17}, [r4], r0
   15efc:	ldr	r0, [r5]
   15f00:	mov	r5, #1
   15f04:	str	r0, [r4]
   15f08:	mov	r0, r5
   15f0c:	sub	sp, fp, #28
   15f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f14:	ldr	r0, [sp, #40]	; 0x28
   15f18:	str	r0, [sl]
   15f1c:	ldr	r0, [sp, #8]
   15f20:	ldr	r8, [sp, #4]
   15f24:	cmp	r8, r0
   15f28:	str	r0, [sp]
   15f2c:	bcs	15fe4 <__assert_fail@plt+0x4c40>
   15f30:	mov	r9, #0
   15f34:	ldr	r0, [r8]
   15f38:	cmp	r0, #0
   15f3c:	bne	15f64 <__assert_fail@plt+0x4bc0>
   15f40:	b	15f48 <__assert_fail@plt+0x4ba4>
   15f44:	str	r9, [r8, #4]
   15f48:	ldr	r0, [sp]
   15f4c:	add	r8, r8, #8
   15f50:	cmp	r8, r0
   15f54:	bcs	15fe4 <__assert_fail@plt+0x4c40>
   15f58:	ldr	r0, [r8]
   15f5c:	cmp	r0, #0
   15f60:	beq	15f48 <__assert_fail@plt+0x4ba4>
   15f64:	ldr	r6, [r8, #4]
   15f68:	cmp	r6, #0
   15f6c:	beq	15f44 <__assert_fail@plt+0x4ba0>
   15f70:	ldr	r1, [r4, #8]
   15f74:	b	15f98 <__assert_fail@plt+0x4bf4>
   15f78:	add	r0, r3, r0, lsl #3
   15f7c:	add	r0, r0, #4
   15f80:	ldr	r3, [r0]
   15f84:	cmp	r2, #0
   15f88:	str	r3, [r6, #4]
   15f8c:	str	r6, [r0]
   15f90:	mov	r6, r2
   15f94:	beq	15f44 <__assert_fail@plt+0x4ba0>
   15f98:	ldr	r5, [r6]
   15f9c:	ldr	r2, [r4, #24]
   15fa0:	mov	r0, r5
   15fa4:	blx	r2
   15fa8:	ldr	r1, [r4, #8]
   15fac:	cmp	r0, r1
   15fb0:	bcs	16014 <__assert_fail@plt+0x4c70>
   15fb4:	ldr	r3, [r4]
   15fb8:	ldr	r2, [r6, #4]
   15fbc:	ldr	r7, [r3, r0, lsl #3]
   15fc0:	cmp	r7, #0
   15fc4:	bne	15f78 <__assert_fail@plt+0x4bd4>
   15fc8:	str	r5, [r3, r0, lsl #3]
   15fcc:	ldr	r0, [r4, #12]
   15fd0:	add	r0, r0, #1
   15fd4:	str	r0, [r4, #12]
   15fd8:	mov	r0, sl
   15fdc:	str	r9, [r6]
   15fe0:	b	15f80 <__assert_fail@plt+0x4bdc>
   15fe4:	add	r1, sp, #4
   15fe8:	mov	r0, r4
   15fec:	mov	r2, #0
   15ff0:	mov	r5, #0
   15ff4:	bl	1601c <__assert_fail@plt+0x4c78>
   15ff8:	cmp	r0, #0
   15ffc:	beq	16014 <__assert_fail@plt+0x4c70>
   16000:	ldr	r0, [sp, #4]
   16004:	bl	1a290 <__assert_fail@plt+0x8eec>
   16008:	mov	r0, r5
   1600c:	sub	sp, fp, #28
   16010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16014:	bl	11374 <abort@plt>
   16018:	svcmi	0x00800000
   1601c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16020:	add	fp, sp, #28
   16024:	sub	sp, sp, #4
   16028:	ldr	r8, [r1]
   1602c:	ldr	r3, [r1, #4]
   16030:	mov	r6, r0
   16034:	mov	r0, #1
   16038:	str	r1, [sp]
   1603c:	cmp	r8, r3
   16040:	bcs	16254 <__assert_fail@plt+0x4eb0>
   16044:	add	sl, r6, #36	; 0x24
   16048:	cmp	r2, #0
   1604c:	beq	16108 <__assert_fail@plt+0x4d64>
   16050:	mov	r9, #0
   16054:	ldr	r1, [r8]
   16058:	cmp	r1, #0
   1605c:	bne	16088 <__assert_fail@plt+0x4ce4>
   16060:	b	16070 <__assert_fail@plt+0x4ccc>
   16064:	ldr	r0, [sp]
   16068:	ldr	r3, [r0, #4]
   1606c:	str	r9, [r8, #4]
   16070:	add	r8, r8, #8
   16074:	cmp	r8, r3
   16078:	bcs	16250 <__assert_fail@plt+0x4eac>
   1607c:	ldr	r1, [r8]
   16080:	cmp	r1, #0
   16084:	beq	16070 <__assert_fail@plt+0x4ccc>
   16088:	ldr	r7, [r8, #4]
   1608c:	cmp	r7, #0
   16090:	beq	1606c <__assert_fail@plt+0x4cc8>
   16094:	ldr	r1, [r6, #8]
   16098:	b	160cc <__assert_fail@plt+0x4d28>
   1609c:	str	r4, [r3, r0, lsl #3]
   160a0:	ldr	r0, [r6, #12]
   160a4:	add	r0, r0, #1
   160a8:	str	r0, [r6, #12]
   160ac:	mov	r0, sl
   160b0:	str	r9, [r7]
   160b4:	ldr	r3, [r0]
   160b8:	cmp	r2, #0
   160bc:	str	r3, [r7, #4]
   160c0:	str	r7, [r0]
   160c4:	mov	r7, r2
   160c8:	beq	16064 <__assert_fail@plt+0x4cc0>
   160cc:	ldr	r4, [r7]
   160d0:	ldr	r2, [r6, #24]
   160d4:	mov	r0, r4
   160d8:	blx	r2
   160dc:	ldr	r1, [r6, #8]
   160e0:	cmp	r0, r1
   160e4:	bcs	16268 <__assert_fail@plt+0x4ec4>
   160e8:	ldr	r3, [r6]
   160ec:	ldr	r2, [r7, #4]
   160f0:	ldr	r5, [r3, r0, lsl #3]
   160f4:	cmp	r5, #0
   160f8:	beq	1609c <__assert_fail@plt+0x4cf8>
   160fc:	add	r0, r3, r0, lsl #3
   16100:	add	r0, r0, #4
   16104:	b	160b4 <__assert_fail@plt+0x4d10>
   16108:	mov	r5, #0
   1610c:	ldr	r7, [r8]
   16110:	cmp	r7, #0
   16114:	bne	1615c <__assert_fail@plt+0x4db8>
   16118:	b	16144 <__assert_fail@plt+0x4da0>
   1611c:	str	r7, [r9, r4, lsl #3]
   16120:	ldr	r0, [r6, #12]
   16124:	add	r0, r0, #1
   16128:	str	r0, [r6, #12]
   1612c:	ldr	r0, [sp]
   16130:	str	r5, [r8]
   16134:	ldr	r1, [r0, #12]
   16138:	ldr	r3, [r0, #4]
   1613c:	sub	r1, r1, #1
   16140:	str	r1, [r0, #12]
   16144:	add	r8, r8, #8
   16148:	cmp	r8, r3
   1614c:	bcs	16250 <__assert_fail@plt+0x4eac>
   16150:	ldr	r7, [r8]
   16154:	cmp	r7, #0
   16158:	beq	16144 <__assert_fail@plt+0x4da0>
   1615c:	ldr	r9, [r8, #4]
   16160:	ldr	r1, [r6, #8]
   16164:	cmp	r9, #0
   16168:	bne	16190 <__assert_fail@plt+0x4dec>
   1616c:	b	161e0 <__assert_fail@plt+0x4e3c>
   16170:	add	r0, r3, r0, lsl #3
   16174:	add	r0, r0, #4
   16178:	ldr	r3, [r0]
   1617c:	cmp	r2, #0
   16180:	str	r3, [r9, #4]
   16184:	str	r9, [r0]
   16188:	mov	r9, r2
   1618c:	beq	161dc <__assert_fail@plt+0x4e38>
   16190:	ldr	r4, [r9]
   16194:	ldr	r2, [r6, #24]
   16198:	mov	r0, r4
   1619c:	blx	r2
   161a0:	ldr	r1, [r6, #8]
   161a4:	cmp	r0, r1
   161a8:	bcs	16268 <__assert_fail@plt+0x4ec4>
   161ac:	ldr	r3, [r6]
   161b0:	ldr	r2, [r9, #4]
   161b4:	ldr	r7, [r3, r0, lsl #3]
   161b8:	cmp	r7, #0
   161bc:	bne	16170 <__assert_fail@plt+0x4dcc>
   161c0:	str	r4, [r3, r0, lsl #3]
   161c4:	ldr	r0, [r6, #12]
   161c8:	add	r0, r0, #1
   161cc:	str	r0, [r6, #12]
   161d0:	mov	r0, sl
   161d4:	str	r5, [r9]
   161d8:	b	16178 <__assert_fail@plt+0x4dd4>
   161dc:	ldr	r7, [r8]
   161e0:	str	r5, [r8, #4]
   161e4:	mov	r0, r7
   161e8:	ldr	r2, [r6, #24]
   161ec:	blx	r2
   161f0:	mov	r4, r0
   161f4:	ldr	r0, [r6, #8]
   161f8:	cmp	r4, r0
   161fc:	bcs	16268 <__assert_fail@plt+0x4ec4>
   16200:	ldr	r9, [r6]
   16204:	ldr	r0, [r9, r4, lsl #3]
   16208:	cmp	r0, #0
   1620c:	beq	1611c <__assert_fail@plt+0x4d78>
   16210:	ldr	r0, [sl]
   16214:	cmp	r0, #0
   16218:	beq	16228 <__assert_fail@plt+0x4e84>
   1621c:	ldr	r1, [r0, #4]
   16220:	str	r1, [sl]
   16224:	b	16238 <__assert_fail@plt+0x4e94>
   16228:	mov	r0, #8
   1622c:	bl	19d84 <__assert_fail@plt+0x89e0>
   16230:	cmp	r0, #0
   16234:	beq	1625c <__assert_fail@plt+0x4eb8>
   16238:	add	r1, r9, r4, lsl #3
   1623c:	str	r7, [r0]
   16240:	ldr	r2, [r1, #4]
   16244:	str	r2, [r0, #4]
   16248:	str	r0, [r1, #4]
   1624c:	b	1612c <__assert_fail@plt+0x4d88>
   16250:	mov	r0, #1
   16254:	sub	sp, fp, #28
   16258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1625c:	mov	r0, #0
   16260:	sub	sp, fp, #28
   16264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16268:	bl	11374 <abort@plt>
   1626c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16270:	add	fp, sp, #28
   16274:	sub	sp, sp, #4
   16278:	cmp	r1, #0
   1627c:	beq	165b8 <__assert_fail@plt+0x5214>
   16280:	mov	r8, r2
   16284:	mov	sl, r1
   16288:	ldr	r1, [r0, #8]
   1628c:	ldr	r2, [r0, #24]
   16290:	mov	r4, r0
   16294:	mov	r0, sl
   16298:	blx	r2
   1629c:	mov	r7, r0
   162a0:	ldr	r0, [r4, #8]
   162a4:	cmp	r7, r0
   162a8:	bcs	165b8 <__assert_fail@plt+0x5214>
   162ac:	ldr	r5, [r4]
   162b0:	mov	r9, r5
   162b4:	ldr	r1, [r9, r7, lsl #3]!
   162b8:	cmp	r1, #0
   162bc:	beq	16350 <__assert_fail@plt+0x4fac>
   162c0:	cmp	r1, sl
   162c4:	beq	162f0 <__assert_fail@plt+0x4f4c>
   162c8:	ldr	r2, [r4, #28]
   162cc:	mov	r0, sl
   162d0:	blx	r2
   162d4:	cmp	r0, #0
   162d8:	mov	r6, r9
   162dc:	beq	1630c <__assert_fail@plt+0x4f68>
   162e0:	ldr	r0, [r6]
   162e4:	cmp	r0, #0
   162e8:	bne	162f4 <__assert_fail@plt+0x4f50>
   162ec:	b	16350 <__assert_fail@plt+0x4fac>
   162f0:	mov	r0, sl
   162f4:	cmp	r8, #0
   162f8:	mov	r7, #0
   162fc:	strne	r0, [r8]
   16300:	mov	r0, r7
   16304:	sub	sp, fp, #28
   16308:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1630c:	add	r6, r5, r7, lsl #3
   16310:	ldr	r0, [r6, #4]!
   16314:	cmp	r0, #0
   16318:	beq	16350 <__assert_fail@plt+0x4fac>
   1631c:	ldr	r1, [r0]
   16320:	cmp	r1, sl
   16324:	beq	16344 <__assert_fail@plt+0x4fa0>
   16328:	ldr	r2, [r4, #28]
   1632c:	mov	r0, sl
   16330:	blx	r2
   16334:	ldr	r6, [r6]
   16338:	cmp	r0, #0
   1633c:	beq	16310 <__assert_fail@plt+0x4f6c>
   16340:	b	162e0 <__assert_fail@plt+0x4f3c>
   16344:	mov	r0, sl
   16348:	cmp	r0, #0
   1634c:	bne	162f4 <__assert_fail@plt+0x4f50>
   16350:	vldr	s0, [r4, #8]
   16354:	vldr	s2, [r4, #12]
   16358:	ldr	r0, [r4, #20]
   1635c:	vcvt.f32.u32	s0, s0
   16360:	vcvt.f32.u32	s4, s2
   16364:	vldr	s2, [r0, #8]
   16368:	vmul.f32	s6, s2, s0
   1636c:	vcmpe.f32	s6, s4
   16370:	vmrs	APSR_nzcv, fpscr
   16374:	bpl	164d8 <__assert_fail@plt+0x5134>
   16378:	movw	r1, #45624	; 0xb238
   1637c:	movt	r1, #1
   16380:	cmp	r0, r1
   16384:	beq	16420 <__assert_fail@plt+0x507c>
   16388:	vldr	s6, [pc, #556]	; 165bc <__assert_fail@plt+0x5218>
   1638c:	vcmpe.f32	s2, s6
   16390:	vmrs	APSR_nzcv, fpscr
   16394:	ble	163fc <__assert_fail@plt+0x5058>
   16398:	vldr	s8, [pc, #544]	; 165c0 <__assert_fail@plt+0x521c>
   1639c:	vcmpe.f32	s2, s8
   163a0:	vmrs	APSR_nzcv, fpscr
   163a4:	bpl	163fc <__assert_fail@plt+0x5058>
   163a8:	vldr	s8, [pc, #532]	; 165c4 <__assert_fail@plt+0x5220>
   163ac:	vldr	s10, [r0, #12]
   163b0:	vcmpe.f32	s10, s8
   163b4:	vmrs	APSR_nzcv, fpscr
   163b8:	ble	163fc <__assert_fail@plt+0x5058>
   163bc:	vldr	s8, [r0]
   163c0:	vcmpe.f32	s8, #0.0
   163c4:	vmrs	APSR_nzcv, fpscr
   163c8:	blt	163fc <__assert_fail@plt+0x5058>
   163cc:	vadd.f32	s6, s8, s6
   163d0:	vcmpe.f32	s6, s2
   163d4:	vmrs	APSR_nzcv, fpscr
   163d8:	bpl	163fc <__assert_fail@plt+0x5058>
   163dc:	vldr	s8, [r0, #4]
   163e0:	vmov.f32	s10, #112	; 0x3f800000  1.0
   163e4:	vcmpe.f32	s8, s10
   163e8:	vmrs	APSR_nzcv, fpscr
   163ec:	bhi	163fc <__assert_fail@plt+0x5058>
   163f0:	vcmpe.f32	s6, s8
   163f4:	vmrs	APSR_nzcv, fpscr
   163f8:	bmi	1640c <__assert_fail@plt+0x5068>
   163fc:	vldr	s2, [pc, #452]	; 165c8 <__assert_fail@plt+0x5224>
   16400:	movw	r0, #45624	; 0xb238
   16404:	movt	r0, #1
   16408:	str	r0, [r4, #20]
   1640c:	vmul.f32	s6, s2, s0
   16410:	vcmpe.f32	s6, s4
   16414:	vmrs	APSR_nzcv, fpscr
   16418:	bmi	16434 <__assert_fail@plt+0x5090>
   1641c:	b	164d8 <__assert_fail@plt+0x5134>
   16420:	mov	r0, r1
   16424:	vmul.f32	s6, s2, s0
   16428:	vcmpe.f32	s6, s4
   1642c:	vmrs	APSR_nzcv, fpscr
   16430:	bpl	164d8 <__assert_fail@plt+0x5134>
   16434:	vldr	s4, [r0, #12]
   16438:	ldrb	r0, [r0, #16]
   1643c:	mvn	r7, #0
   16440:	cmp	r0, #0
   16444:	vmul.f32	s0, s4, s0
   16448:	vldr	s4, [pc, #380]	; 165cc <__assert_fail@plt+0x5228>
   1644c:	vmul.f32	s2, s2, s0
   16450:	vseleq.f32	s0, s2, s0
   16454:	vcmpe.f32	s0, s4
   16458:	vmrs	APSR_nzcv, fpscr
   1645c:	bge	1654c <__assert_fail@plt+0x51a8>
   16460:	vcvt.u32.f32	s0, s0
   16464:	mov	r0, r4
   16468:	vmov	r1, s0
   1646c:	bl	15d94 <__assert_fail@plt+0x49f0>
   16470:	cmp	r0, #0
   16474:	beq	1654c <__assert_fail@plt+0x51a8>
   16478:	ldr	r1, [r4, #8]
   1647c:	ldr	r2, [r4, #24]
   16480:	mov	r0, sl
   16484:	blx	r2
   16488:	mov	r7, r0
   1648c:	ldr	r0, [r4, #8]
   16490:	cmp	r7, r0
   16494:	bcs	165b8 <__assert_fail@plt+0x5214>
   16498:	ldr	r5, [r4]
   1649c:	mov	r9, r5
   164a0:	ldr	r1, [r9, r7, lsl #3]!
   164a4:	cmp	r1, #0
   164a8:	beq	164d8 <__assert_fail@plt+0x5134>
   164ac:	cmp	r1, sl
   164b0:	mov	r0, sl
   164b4:	beq	164d0 <__assert_fail@plt+0x512c>
   164b8:	ldr	r2, [r4, #28]
   164bc:	mov	r0, sl
   164c0:	blx	r2
   164c4:	cmp	r0, #0
   164c8:	beq	16568 <__assert_fail@plt+0x51c4>
   164cc:	ldr	r0, [r9]
   164d0:	cmp	r0, #0
   164d4:	bne	165b8 <__assert_fail@plt+0x5214>
   164d8:	ldr	r0, [r9]
   164dc:	cmp	r0, #0
   164e0:	beq	164fc <__assert_fail@plt+0x5158>
   164e4:	ldr	r0, [r4, #36]	; 0x24
   164e8:	cmp	r0, #0
   164ec:	beq	1651c <__assert_fail@plt+0x5178>
   164f0:	ldr	r1, [r0, #4]
   164f4:	str	r1, [r4, #36]	; 0x24
   164f8:	b	1652c <__assert_fail@plt+0x5188>
   164fc:	str	sl, [r9]
   16500:	ldr	r0, [r4, #12]
   16504:	ldr	r1, [r4, #16]
   16508:	add	r0, r0, #1
   1650c:	add	r1, r1, #1
   16510:	str	r0, [r4, #12]
   16514:	str	r1, [r4, #16]
   16518:	b	16548 <__assert_fail@plt+0x51a4>
   1651c:	mov	r0, #8
   16520:	bl	19d84 <__assert_fail@plt+0x89e0>
   16524:	cmp	r0, #0
   16528:	beq	16558 <__assert_fail@plt+0x51b4>
   1652c:	str	sl, [r0]
   16530:	ldr	r1, [r9, #4]
   16534:	str	r1, [r0, #4]
   16538:	str	r0, [r9, #4]
   1653c:	ldr	r0, [r4, #16]
   16540:	add	r0, r0, #1
   16544:	str	r0, [r4, #16]
   16548:	mov	r7, #1
   1654c:	mov	r0, r7
   16550:	sub	sp, fp, #28
   16554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16558:	mvn	r7, #0
   1655c:	mov	r0, r7
   16560:	sub	sp, fp, #28
   16564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16568:	add	r6, r5, r7, lsl #3
   1656c:	ldr	r0, [r6, #4]!
   16570:	cmp	r0, #0
   16574:	beq	164d8 <__assert_fail@plt+0x5134>
   16578:	ldr	r1, [r0]
   1657c:	cmp	r1, sl
   16580:	beq	165ac <__assert_fail@plt+0x5208>
   16584:	ldr	r2, [r4, #28]
   16588:	mov	r0, sl
   1658c:	blx	r2
   16590:	ldr	r6, [r6]
   16594:	cmp	r0, #0
   16598:	beq	1656c <__assert_fail@plt+0x51c8>
   1659c:	ldr	r0, [r6]
   165a0:	cmp	r0, #0
   165a4:	beq	164d8 <__assert_fail@plt+0x5134>
   165a8:	b	165b8 <__assert_fail@plt+0x5214>
   165ac:	mov	r0, sl
   165b0:	cmp	r0, #0
   165b4:	beq	164d8 <__assert_fail@plt+0x5134>
   165b8:	bl	11374 <abort@plt>
   165bc:	stclcc	12, cr12, [ip, #820]	; 0x334
   165c0:	svccc	0x00666666
   165c4:	svccc	0x008ccccd
   165c8:	svccc	0x004ccccd
   165cc:	svcmi	0x00800000
   165d0:	push	{r4, sl, fp, lr}
   165d4:	add	fp, sp, #8
   165d8:	sub	sp, sp, #8
   165dc:	add	r2, sp, #4
   165e0:	mov	r4, r1
   165e4:	bl	1626c <__assert_fail@plt+0x4ec8>
   165e8:	cmn	r0, #1
   165ec:	beq	16608 <__assert_fail@plt+0x5264>
   165f0:	ldr	r1, [sp, #4]
   165f4:	cmp	r0, #0
   165f8:	moveq	r4, r1
   165fc:	mov	r0, r4
   16600:	sub	sp, fp, #8
   16604:	pop	{r4, sl, fp, pc}
   16608:	mov	r4, #0
   1660c:	mov	r0, r4
   16610:	sub	sp, fp, #8
   16614:	pop	{r4, sl, fp, pc}
   16618:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1661c:	add	fp, sp, #24
   16620:	mov	r9, r1
   16624:	ldr	r1, [r0, #8]
   16628:	ldr	r2, [r0, #24]
   1662c:	mov	r5, r0
   16630:	mov	r0, r9
   16634:	blx	r2
   16638:	mov	r7, r0
   1663c:	ldr	r0, [r5, #8]
   16640:	cmp	r7, r0
   16644:	bcs	168b8 <__assert_fail@plt+0x5514>
   16648:	ldr	r6, [r5]
   1664c:	mov	r8, #0
   16650:	mov	r4, r6
   16654:	ldr	r1, [r4, r7, lsl #3]!
   16658:	cmp	r1, #0
   1665c:	beq	16710 <__assert_fail@plt+0x536c>
   16660:	cmp	r1, r9
   16664:	beq	16680 <__assert_fail@plt+0x52dc>
   16668:	ldr	r2, [r5, #28]
   1666c:	mov	r0, r9
   16670:	blx	r2
   16674:	cmp	r0, #0
   16678:	beq	166b8 <__assert_fail@plt+0x5314>
   1667c:	ldr	r9, [r4]
   16680:	add	r0, r6, r7, lsl #3
   16684:	ldr	r0, [r0, #4]
   16688:	cmp	r0, #0
   1668c:	beq	16700 <__assert_fail@plt+0x535c>
   16690:	ldm	r0, {r1, r2}
   16694:	stm	r4, {r1, r2}
   16698:	mov	r1, #0
   1669c:	str	r1, [r0]
   166a0:	ldr	r1, [r5, #36]	; 0x24
   166a4:	str	r1, [r0, #4]
   166a8:	str	r0, [r5, #36]	; 0x24
   166ac:	cmp	r9, #0
   166b0:	bne	16748 <__assert_fail@plt+0x53a4>
   166b4:	b	16710 <__assert_fail@plt+0x536c>
   166b8:	add	r7, r6, r7, lsl #3
   166bc:	ldr	r0, [r7, #4]!
   166c0:	cmp	r0, #0
   166c4:	beq	16710 <__assert_fail@plt+0x536c>
   166c8:	ldr	r1, [r0]
   166cc:	cmp	r1, r9
   166d0:	beq	16718 <__assert_fail@plt+0x5374>
   166d4:	ldr	r2, [r5, #28]
   166d8:	mov	r0, r9
   166dc:	blx	r2
   166e0:	ldr	r1, [r7]
   166e4:	cmp	r0, #0
   166e8:	bne	16720 <__assert_fail@plt+0x537c>
   166ec:	ldr	r0, [r1, #4]!
   166f0:	mov	r7, r1
   166f4:	cmp	r0, #0
   166f8:	bne	166c8 <__assert_fail@plt+0x5324>
   166fc:	b	16710 <__assert_fail@plt+0x536c>
   16700:	mov	r0, #0
   16704:	str	r0, [r4]
   16708:	cmp	r9, #0
   1670c:	bne	16748 <__assert_fail@plt+0x53a4>
   16710:	mov	r0, r8
   16714:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16718:	mov	r1, r0
   1671c:	b	16724 <__assert_fail@plt+0x5380>
   16720:	ldr	r9, [r1]
   16724:	ldr	r0, [r1, #4]
   16728:	str	r0, [r7]
   1672c:	mov	r0, #0
   16730:	str	r0, [r1]
   16734:	ldr	r0, [r5, #36]	; 0x24
   16738:	str	r0, [r1, #4]
   1673c:	str	r1, [r5, #36]	; 0x24
   16740:	cmp	r9, #0
   16744:	beq	16710 <__assert_fail@plt+0x536c>
   16748:	ldr	r0, [r5, #16]
   1674c:	sub	r0, r0, #1
   16750:	str	r0, [r5, #16]
   16754:	ldr	r0, [r4]
   16758:	cmp	r0, #0
   1675c:	bne	168ac <__assert_fail@plt+0x5508>
   16760:	ldr	r0, [r5, #12]
   16764:	vldr	s0, [r5, #8]
   16768:	sub	r1, r0, #1
   1676c:	str	r1, [r5, #12]
   16770:	vmov	s2, r1
   16774:	ldr	r0, [r5, #20]
   16778:	vcvt.f32.u32	s0, s0
   1677c:	vcvt.f32.u32	s2, s2
   16780:	vldr	s4, [r0]
   16784:	vmul.f32	s6, s4, s0
   16788:	vcmpe.f32	s6, s2
   1678c:	vmrs	APSR_nzcv, fpscr
   16790:	ble	168ac <__assert_fail@plt+0x5508>
   16794:	movw	r1, #45624	; 0xb238
   16798:	movt	r1, #1
   1679c:	cmp	r0, r1
   167a0:	beq	1683c <__assert_fail@plt+0x5498>
   167a4:	vldr	s8, [pc, #272]	; 168bc <__assert_fail@plt+0x5518>
   167a8:	vldr	s6, [r0, #8]
   167ac:	vcmpe.f32	s6, s8
   167b0:	vmrs	APSR_nzcv, fpscr
   167b4:	ble	16818 <__assert_fail@plt+0x5474>
   167b8:	vldr	s10, [pc, #256]	; 168c0 <__assert_fail@plt+0x551c>
   167bc:	vcmpe.f32	s6, s10
   167c0:	vmrs	APSR_nzcv, fpscr
   167c4:	bpl	16818 <__assert_fail@plt+0x5474>
   167c8:	vcmpe.f32	s4, #0.0
   167cc:	vmrs	APSR_nzcv, fpscr
   167d0:	blt	16818 <__assert_fail@plt+0x5474>
   167d4:	vldr	s10, [r0, #12]
   167d8:	vldr	s12, [pc, #228]	; 168c4 <__assert_fail@plt+0x5520>
   167dc:	vcmpe.f32	s10, s12
   167e0:	vmrs	APSR_nzcv, fpscr
   167e4:	ble	16818 <__assert_fail@plt+0x5474>
   167e8:	vadd.f32	s8, s4, s8
   167ec:	vcmpe.f32	s8, s6
   167f0:	vmrs	APSR_nzcv, fpscr
   167f4:	bpl	16818 <__assert_fail@plt+0x5474>
   167f8:	vldr	s6, [r0, #4]
   167fc:	vmov.f32	s10, #112	; 0x3f800000  1.0
   16800:	vcmpe.f32	s6, s10
   16804:	vmrs	APSR_nzcv, fpscr
   16808:	bhi	16818 <__assert_fail@plt+0x5474>
   1680c:	vcmpe.f32	s8, s6
   16810:	vmrs	APSR_nzcv, fpscr
   16814:	bmi	16828 <__assert_fail@plt+0x5484>
   16818:	vldr	s4, [pc, #168]	; 168c8 <__assert_fail@plt+0x5524>
   1681c:	movw	r0, #45624	; 0xb238
   16820:	movt	r0, #1
   16824:	str	r0, [r5, #20]
   16828:	vmul.f32	s4, s4, s0
   1682c:	vcmpe.f32	s4, s2
   16830:	vmrs	APSR_nzcv, fpscr
   16834:	bgt	16850 <__assert_fail@plt+0x54ac>
   16838:	b	168ac <__assert_fail@plt+0x5508>
   1683c:	mov	r0, r1
   16840:	vmul.f32	s4, s4, s0
   16844:	vcmpe.f32	s4, s2
   16848:	vmrs	APSR_nzcv, fpscr
   1684c:	ble	168ac <__assert_fail@plt+0x5508>
   16850:	vldr	s2, [r0, #4]
   16854:	ldrb	r1, [r0, #16]
   16858:	cmp	r1, #0
   1685c:	vmul.f32	s0, s2, s0
   16860:	bne	1686c <__assert_fail@plt+0x54c8>
   16864:	vldr	s2, [r0, #8]
   16868:	vmul.f32	s0, s0, s2
   1686c:	vcvt.u32.f32	s0, s0
   16870:	mov	r0, r5
   16874:	vmov	r1, s0
   16878:	bl	15d94 <__assert_fail@plt+0x49f0>
   1687c:	cmp	r0, #0
   16880:	bne	168ac <__assert_fail@plt+0x5508>
   16884:	ldr	r0, [r5, #36]	; 0x24
   16888:	cmp	r0, #0
   1688c:	beq	168a4 <__assert_fail@plt+0x5500>
   16890:	ldr	r4, [r0, #4]
   16894:	bl	1a290 <__assert_fail@plt+0x8eec>
   16898:	cmp	r4, #0
   1689c:	mov	r0, r4
   168a0:	bne	16890 <__assert_fail@plt+0x54ec>
   168a4:	mov	r0, #0
   168a8:	str	r0, [r5, #36]	; 0x24
   168ac:	mov	r8, r9
   168b0:	mov	r0, r8
   168b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   168b8:	bl	11374 <abort@plt>
   168bc:	stclcc	12, cr12, [ip, #820]	; 0x334
   168c0:	svccc	0x00666666
   168c4:	svccc	0x008ccccd
   168c8:	andeq	r0, r0, r0
   168cc:	b	16618 <__assert_fail@plt+0x5274>
   168d0:	vdup.32	q8, r1
   168d4:	mov	r2, #0
   168d8:	str	r2, [r0, #20]
   168dc:	str	r2, [r0, #24]
   168e0:	mov	r2, #1
   168e4:	strb	r2, [r0, #28]
   168e8:	vst1.32	{d16-d17}, [r0]!
   168ec:	str	r1, [r0]
   168f0:	bx	lr
   168f4:	ldrb	r0, [r0, #28]
   168f8:	bx	lr
   168fc:	push	{fp, lr}
   16900:	mov	fp, sp
   16904:	ldrb	r3, [r0, #28]
   16908:	ldr	r2, [r0, #20]
   1690c:	eor	lr, r3, #1
   16910:	add	r2, r2, lr
   16914:	and	r3, r2, #3
   16918:	ldr	ip, [r0, r3, lsl #2]
   1691c:	str	r1, [r0, r3, lsl #2]
   16920:	str	r3, [r0, #20]
   16924:	ldr	r1, [r0, #24]
   16928:	cmp	r3, r1
   1692c:	addeq	r1, r2, lr
   16930:	andeq	r1, r1, #3
   16934:	streq	r1, [r0, #24]
   16938:	mov	r1, #0
   1693c:	strb	r1, [r0, #28]
   16940:	mov	r0, ip
   16944:	pop	{fp, pc}
   16948:	push	{fp, lr}
   1694c:	mov	fp, sp
   16950:	ldrb	r1, [r0, #28]
   16954:	cmp	r1, #0
   16958:	bne	16994 <__assert_fail@plt+0x55f0>
   1695c:	ldr	r3, [r0, #20]
   16960:	ldr	r2, [r0, #16]
   16964:	ldr	r1, [r0, r3, lsl #2]
   16968:	str	r2, [r0, r3, lsl #2]
   1696c:	ldr	r2, [r0, #20]
   16970:	ldr	r3, [r0, #24]
   16974:	cmp	r2, r3
   16978:	moveq	r2, #1
   1697c:	strbeq	r2, [r0, #28]
   16980:	subne	r2, r2, #1
   16984:	andne	r2, r2, #3
   16988:	strne	r2, [r0, #20]
   1698c:	mov	r0, r1
   16990:	pop	{fp, pc}
   16994:	bl	11374 <abort@plt>
   16998:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1699c:	add	fp, sp, #28
   169a0:	sub	sp, sp, #4
   169a4:	ldrb	r1, [r0]
   169a8:	mov	r4, r0
   169ac:	and	r0, r1, #248	; 0xf8
   169b0:	cmp	r0, #48	; 0x30
   169b4:	bne	16a00 <__assert_fail@plt+0x565c>
   169b8:	mov	r0, #0
   169bc:	mov	r5, #0
   169c0:	mov	r2, r4
   169c4:	lsl	r3, r5, #3
   169c8:	uxtab	r1, r3, r1
   169cc:	sub	r5, r1, #48	; 0x30
   169d0:	cmp	r0, r5, lsr #12
   169d4:	bne	169f8 <__assert_fail@plt+0x5654>
   169d8:	ldrb	r1, [r2, #1]
   169dc:	add	r6, r2, #1
   169e0:	and	r2, r1, #248	; 0xf8
   169e4:	cmp	r2, #48	; 0x30
   169e8:	mov	r2, r6
   169ec:	beq	169c4 <__assert_fail@plt+0x5620>
   169f0:	cmp	r1, #0
   169f4:	beq	16d84 <__assert_fail@plt+0x59e0>
   169f8:	sub	sp, fp, #28
   169fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a00:	movw	sl, #5
   16a04:	mov	r2, #1
   16a08:	mvn	r3, #42	; 0x2a
   16a0c:	mov	r7, #1
   16a10:	mov	r0, #1
   16a14:	movt	sl, #4
   16a18:	uxtab	r6, r3, r1
   16a1c:	uxtb	r1, r1
   16a20:	cmp	r6, #18
   16a24:	bls	16a50 <__assert_fail@plt+0x56ac>
   16a28:	cmp	r1, #0
   16a2c:	beq	16a60 <__assert_fail@plt+0x56bc>
   16a30:	mov	r6, #0
   16a34:	ldrb	r1, [r4, r7]
   16a38:	add	r0, r6, r0
   16a3c:	add	r7, r7, #1
   16a40:	uxtab	r6, r3, r1
   16a44:	uxtb	r1, r1
   16a48:	cmp	r6, #18
   16a4c:	bhi	16a28 <__assert_fail@plt+0x5684>
   16a50:	tst	sl, r2, lsl r6
   16a54:	mov	r6, #1
   16a58:	bne	16a34 <__assert_fail@plt+0x5690>
   16a5c:	b	16a28 <__assert_fail@plt+0x5684>
   16a60:	mov	r1, #16
   16a64:	bl	19804 <__assert_fail@plt+0x8460>
   16a68:	mov	r9, #0
   16a6c:	mov	ip, #1
   16a70:	mvn	lr, #87	; 0x57
   16a74:	mov	r8, #0
   16a78:	mov	r2, #0
   16a7c:	ldrb	r6, [r4]
   16a80:	sub	r3, r6, #97	; 0x61
   16a84:	cmp	r3, #20
   16a88:	bls	16aac <__assert_fail@plt+0x5708>
   16a8c:	b	16b1c <__assert_fail@plt+0x5778>
   16a90:	movw	r1, #4095	; 0xfff
   16a94:	orr	r2, r2, r1
   16a98:	add	r4, r4, #1
   16a9c:	ldrb	r6, [r4]
   16aa0:	sub	r3, r6, #97	; 0x61
   16aa4:	cmp	r3, #20
   16aa8:	bhi	16b1c <__assert_fail@plt+0x5778>
   16aac:	add	r5, pc, #4
   16ab0:	mov	r1, #2496	; 0x9c0
   16ab4:	ldr	pc, [r5, r3, lsl #2]
   16ab8:	muleq	r1, r0, sl
   16abc:	andeq	r6, r1, r4, ror #27
   16ac0:	andeq	r6, r1, r4, ror #27
   16ac4:	andeq	r6, r1, r4, ror #27
   16ac8:	andeq	r6, r1, r4, ror #27
   16acc:	andeq	r6, r1, r4, ror #27
   16ad0:	andeq	r6, r1, ip, lsl #22
   16ad4:	andeq	r6, r1, r4, ror #27
   16ad8:	andeq	r6, r1, r4, ror #27
   16adc:	andeq	r6, r1, r4, ror #27
   16ae0:	andeq	r6, r1, r4, ror #27
   16ae4:	andeq	r6, r1, r4, ror #27
   16ae8:	andeq	r6, r1, r4, ror #27
   16aec:	andeq	r6, r1, r4, ror #27
   16af0:	andeq	r6, r1, r4, lsl fp
   16af4:	andeq	r6, r1, r4, ror #27
   16af8:	andeq	r6, r1, r4, ror #27
   16afc:	andeq	r6, r1, r4, ror #27
   16b00:	andeq	r6, r1, r4, ror #27
   16b04:	andeq	r6, r1, r4, ror #27
   16b08:	muleq	r1, r4, sl
   16b0c:	movw	r1, #1080	; 0x438
   16b10:	b	16a94 <__assert_fail@plt+0x56f0>
   16b14:	movw	r1, #519	; 0x207
   16b18:	b	16a94 <__assert_fail@plt+0x56f0>
   16b1c:	sub	r1, r6, #43	; 0x2b
   16b20:	cmp	r1, #18
   16b24:	bhi	16de4 <__assert_fail@plt+0x5a40>
   16b28:	tst	sl, ip, lsl r1
   16b2c:	beq	16de4 <__assert_fail@plt+0x5a40>
   16b30:	ldrb	r1, [r4, #1]
   16b34:	sub	r3, r1, #48	; 0x30
   16b38:	cmp	r3, #8
   16b3c:	bcs	16b98 <__assert_fail@plt+0x57f4>
   16b40:	add	r3, r4, #2
   16b44:	mov	r7, #0
   16b48:	lsl	r4, r7, #3
   16b4c:	uxtab	r1, r4, r1
   16b50:	sub	r7, r1, #48	; 0x30
   16b54:	cmp	r9, r7, lsr #12
   16b58:	bne	16de4 <__assert_fail@plt+0x5a40>
   16b5c:	ldrb	r1, [r3], #1
   16b60:	and	r4, r1, #248	; 0xf8
   16b64:	cmp	r4, #48	; 0x30
   16b68:	beq	16b48 <__assert_fail@plt+0x57a4>
   16b6c:	cmp	r2, #0
   16b70:	bne	16de4 <__assert_fail@plt+0x5a40>
   16b74:	sub	r4, r3, #1
   16b78:	mov	r5, #1
   16b7c:	movw	r2, #4095	; 0xfff
   16b80:	cmp	r1, #0
   16b84:	beq	16bc4 <__assert_fail@plt+0x5820>
   16b88:	cmp	r1, #44	; 0x2c
   16b8c:	movw	r1, #4095	; 0xfff
   16b90:	beq	16ce0 <__assert_fail@plt+0x593c>
   16b94:	b	16de4 <__assert_fail@plt+0x5a40>
   16b98:	add	r4, r4, #2
   16b9c:	cmp	r1, #103	; 0x67
   16ba0:	beq	16bcc <__assert_fail@plt+0x5828>
   16ba4:	cmp	r1, #111	; 0x6f
   16ba8:	beq	16bdc <__assert_fail@plt+0x5838>
   16bac:	cmp	r1, #117	; 0x75
   16bb0:	bne	16bec <__assert_fail@plt+0x5848>
   16bb4:	mov	r5, #3
   16bb8:	mov	r1, #0
   16bbc:	mov	r7, #448	; 0x1c0
   16bc0:	b	16ce0 <__assert_fail@plt+0x593c>
   16bc4:	movw	r1, #4095	; 0xfff
   16bc8:	b	16ce0 <__assert_fail@plt+0x593c>
   16bcc:	mov	r5, #3
   16bd0:	mov	r1, #0
   16bd4:	mov	r7, #56	; 0x38
   16bd8:	b	16ce0 <__assert_fail@plt+0x593c>
   16bdc:	mov	r5, #3
   16be0:	mov	r1, #0
   16be4:	mov	r7, #7
   16be8:	b	16ce0 <__assert_fail@plt+0x593c>
   16bec:	mov	r3, #1
   16bf0:	mov	r7, #0
   16bf4:	uxtab	r1, lr, r1
   16bf8:	mov	r5, r3
   16bfc:	cmp	r1, #32
   16c00:	bls	16c24 <__assert_fail@plt+0x5880>
   16c04:	b	16cd4 <__assert_fail@plt+0x5930>
   16c08:	orr	r7, r7, #512	; 0x200
   16c0c:	mov	r3, r5
   16c10:	ldrb	r1, [r4], #1
   16c14:	uxtab	r1, lr, r1
   16c18:	mov	r5, r3
   16c1c:	cmp	r1, #32
   16c20:	bhi	16cd4 <__assert_fail@plt+0x5930>
   16c24:	add	ip, pc, #4
   16c28:	mov	r3, #2
   16c2c:	ldr	pc, [ip, r1, lsl #2]
   16c30:	andeq	r6, r1, r0, lsl ip
   16c34:	ldrdeq	r6, [r1], -r4
   16c38:	ldrdeq	r6, [r1], -r4
   16c3c:	ldrdeq	r6, [r1], -r4
   16c40:	ldrdeq	r6, [r1], -r4
   16c44:	ldrdeq	r6, [r1], -r4
   16c48:	ldrdeq	r6, [r1], -r4
   16c4c:	ldrdeq	r6, [r1], -r4
   16c50:	ldrdeq	r6, [r1], -r4
   16c54:	ldrdeq	r6, [r1], -r4
   16c58:	ldrdeq	r6, [r1], -r4
   16c5c:	ldrdeq	r6, [r1], -r4
   16c60:	ldrdeq	r6, [r1], -r4
   16c64:	ldrdeq	r6, [r1], -r4
   16c68:	ldrdeq	r6, [r1], -r4
   16c6c:	ldrdeq	r6, [r1], -r4
   16c70:	ldrdeq	r6, [r1], -r4
   16c74:	ldrdeq	r6, [r1], -r4
   16c78:	ldrdeq	r6, [r1], -r4
   16c7c:	ldrdeq	r6, [r1], -r4
   16c80:	ldrdeq	r6, [r1], -r4
   16c84:	ldrdeq	r6, [r1], -r4
   16c88:	ldrdeq	r6, [r1], -r4
   16c8c:	ldrdeq	r6, [r1], -r4
   16c90:	ldrdeq	r6, [r1], -r4
   16c94:	ldrdeq	r6, [r1], -r4
   16c98:			; <UNDEFINED> instruction: 0x00016cb4
   16c9c:			; <UNDEFINED> instruction: 0x00016cbc
   16ca0:	andeq	r6, r1, r8, lsl #24
   16ca4:	ldrdeq	r6, [r1], -r4
   16ca8:	ldrdeq	r6, [r1], -r4
   16cac:	andeq	r6, r1, r4, asr #25
   16cb0:	andeq	r6, r1, ip, asr #25
   16cb4:	orr	r7, r7, #292	; 0x124
   16cb8:	b	16c0c <__assert_fail@plt+0x5868>
   16cbc:	orr	r7, r7, #3072	; 0xc00
   16cc0:	b	16c0c <__assert_fail@plt+0x5868>
   16cc4:	orr	r7, r7, #146	; 0x92
   16cc8:	b	16c0c <__assert_fail@plt+0x5868>
   16ccc:	orr	r7, r7, #73	; 0x49
   16cd0:	b	16c0c <__assert_fail@plt+0x5868>
   16cd4:	sub	r4, r4, #1
   16cd8:	mov	r1, #0
   16cdc:	mov	ip, #1
   16ce0:	mov	r3, r0
   16ce4:	cmp	r1, #0
   16ce8:	strb	r6, [r3, r8, lsl #4]!
   16cec:	stmib	r3, {r2, r7}
   16cf0:	strb	r5, [r3, #1]
   16cf4:	bne	16d04 <__assert_fail@plt+0x5960>
   16cf8:	cmp	r2, #0
   16cfc:	andne	r7, r7, r2
   16d00:	mov	r1, r7
   16d04:	add	r7, r0, r8, lsl #4
   16d08:	add	r3, r8, #1
   16d0c:	str	r1, [r7, #12]
   16d10:	ldrb	r6, [r4]
   16d14:	sub	r1, r6, #43	; 0x2b
   16d18:	cmp	r1, #18
   16d1c:	bhi	16dc8 <__assert_fail@plt+0x5a24>
   16d20:	add	r7, pc, #4
   16d24:	mov	r8, r3
   16d28:	ldr	pc, [r7, r1, lsl #2]
   16d2c:	andeq	r6, r1, r0, lsr fp
   16d30:	andeq	r6, r1, r8, ror sp
   16d34:	andeq	r6, r1, r0, lsr fp
   16d38:	andeq	r6, r1, r4, ror #27
   16d3c:	andeq	r6, r1, r4, ror #27
   16d40:	andeq	r6, r1, r4, ror #27
   16d44:	andeq	r6, r1, r4, ror #27
   16d48:	andeq	r6, r1, r4, ror #27
   16d4c:	andeq	r6, r1, r4, ror #27
   16d50:	andeq	r6, r1, r4, ror #27
   16d54:	andeq	r6, r1, r4, ror #27
   16d58:	andeq	r6, r1, r4, ror #27
   16d5c:	andeq	r6, r1, r4, ror #27
   16d60:	andeq	r6, r1, r4, ror #27
   16d64:	andeq	r6, r1, r4, ror #27
   16d68:	andeq	r6, r1, r4, ror #27
   16d6c:	andeq	r6, r1, r4, ror #27
   16d70:	andeq	r6, r1, r4, ror #27
   16d74:	andeq	r6, r1, r0, lsr fp
   16d78:	add	r4, r4, #1
   16d7c:	mov	r8, r3
   16d80:	b	16a78 <__assert_fail@plt+0x56d4>
   16d84:	mov	r0, #32
   16d88:	bl	19734 <__assert_fail@plt+0x8390>
   16d8c:	mov	r1, #0
   16d90:	movw	r2, #317	; 0x13d
   16d94:	and	r3, r5, #3072	; 0xc00
   16d98:	movw	r7, #1023	; 0x3ff
   16d9c:	strb	r1, [r0, #17]
   16da0:	strh	r2, [r0]
   16da4:	sub	r2, r6, r4
   16da8:	movw	r1, #4095	; 0xfff
   16dac:	cmp	r2, #5
   16db0:	str	r1, [r0, #4]
   16db4:	str	r5, [r0, #8]
   16db8:	orrlt	r1, r3, r7
   16dbc:	str	r1, [r0, #12]
   16dc0:	sub	sp, fp, #28
   16dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dc8:	cmp	r6, #0
   16dcc:	bne	16de4 <__assert_fail@plt+0x5a40>
   16dd0:	add	r1, r0, r3, lsl #4
   16dd4:	mov	r2, #0
   16dd8:	strb	r2, [r1, #1]
   16ddc:	sub	sp, fp, #28
   16de0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16de4:	bl	1a290 <__assert_fail@plt+0x8eec>
   16de8:	mov	r0, #0
   16dec:	sub	sp, fp, #28
   16df0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16df4:	push	{r4, sl, fp, lr}
   16df8:	add	fp, sp, #8
   16dfc:	sub	sp, sp, #104	; 0x68
   16e00:	mov	r1, r0
   16e04:	mov	r2, sp
   16e08:	mov	r0, #3
   16e0c:	bl	1135c <__xstat64@plt>
   16e10:	mov	r1, r0
   16e14:	mov	r0, #0
   16e18:	cmp	r1, #0
   16e1c:	beq	16e28 <__assert_fail@plt+0x5a84>
   16e20:	sub	sp, fp, #8
   16e24:	pop	{r4, sl, fp, pc}
   16e28:	ldr	r4, [sp, #16]
   16e2c:	mov	r0, #32
   16e30:	bl	19734 <__assert_fail@plt+0x8390>
   16e34:	mov	r1, #0
   16e38:	strb	r1, [r0, #17]
   16e3c:	movw	r1, #4095	; 0xfff
   16e40:	stmib	r0, {r1, r4}
   16e44:	str	r1, [r0, #12]
   16e48:	movw	r1, #317	; 0x13d
   16e4c:	strh	r1, [r0]
   16e50:	sub	sp, fp, #8
   16e54:	pop	{r4, sl, fp, pc}
   16e58:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16e5c:	add	fp, sp, #24
   16e60:	ldrb	r4, [r3, #1]
   16e64:	ldr	ip, [fp, #8]
   16e68:	bfc	r0, #12, #20
   16e6c:	cmp	r4, #0
   16e70:	beq	16f50 <__assert_fail@plt+0x5bac>
   16e74:	cmp	r1, #0
   16e78:	mov	lr, r1
   16e7c:	add	r3, r3, #8
   16e80:	mov	r9, #0
   16e84:	movw	r8, #4095	; 0xfff
   16e88:	movwne	lr, #3072	; 0xc00
   16e8c:	b	16ea8 <__assert_fail@plt+0x5b04>
   16e90:	bic	r0, r0, r3
   16e94:	orr	r9, r3, r9
   16e98:	ldrb	r4, [r5, #9]
   16e9c:	add	r3, r5, #16
   16ea0:	cmp	r4, #0
   16ea4:	beq	16f54 <__assert_fail@plt+0x5bb0>
   16ea8:	mov	r5, r3
   16eac:	ldr	r7, [r3, #-4]
   16eb0:	ldr	r3, [r3]
   16eb4:	uxtb	r4, r4
   16eb8:	ldr	r6, [r5, #4]
   16ebc:	cmp	r4, #2
   16ec0:	bic	r6, lr, r6
   16ec4:	beq	16ef0 <__assert_fail@plt+0x5b4c>
   16ec8:	cmp	r4, #3
   16ecc:	bne	16efc <__assert_fail@plt+0x5b58>
   16ed0:	and	r4, r3, r0
   16ed4:	tst	r4, #146	; 0x92
   16ed8:	mov	r3, r4
   16edc:	orrne	r3, r3, #146	; 0x92
   16ee0:	tst	r4, #292	; 0x124
   16ee4:	orrne	r3, r3, #292	; 0x124
   16ee8:	tst	r4, #73	; 0x49
   16eec:	b	16ef8 <__assert_fail@plt+0x5b54>
   16ef0:	and	r4, r0, #73	; 0x49
   16ef4:	orrs	r4, r4, r1
   16ef8:	orrne	r3, r3, #73	; 0x49
   16efc:	cmp	r7, #0
   16f00:	mov	r4, r7
   16f04:	mvneq	r4, r2
   16f08:	bic	r4, r4, r6
   16f0c:	and	r3, r4, r3
   16f10:	ldrb	r4, [r5, #-8]
   16f14:	cmp	r4, #43	; 0x2b
   16f18:	beq	16f48 <__assert_fail@plt+0x5ba4>
   16f1c:	cmp	r4, #45	; 0x2d
   16f20:	beq	16e90 <__assert_fail@plt+0x5aec>
   16f24:	cmp	r4, #61	; 0x3d
   16f28:	bne	16e98 <__assert_fail@plt+0x5af4>
   16f2c:	mvn	r4, r7
   16f30:	cmp	r7, #0
   16f34:	orrne	r6, r6, r4
   16f38:	and	r0, r6, r0
   16f3c:	orr	r0, r3, r0
   16f40:	bic	r3, r8, r6
   16f44:	b	16e94 <__assert_fail@plt+0x5af0>
   16f48:	orr	r0, r3, r0
   16f4c:	b	16e94 <__assert_fail@plt+0x5af0>
   16f50:	mov	r9, #0
   16f54:	cmp	ip, #0
   16f58:	strne	r9, [ip]
   16f5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16f60:	sub	sp, sp, #4
   16f64:	push	{fp, lr}
   16f68:	mov	fp, sp
   16f6c:	sub	sp, sp, #4
   16f70:	str	r3, [fp, #8]
   16f74:	tst	r2, #64	; 0x40
   16f78:	mov	r3, #0
   16f7c:	ldrne	r3, [fp, #8]
   16f80:	bl	11248 <openat64@plt>
   16f84:	bl	1902c <__assert_fail@plt+0x7c88>
   16f88:	mov	sp, fp
   16f8c:	pop	{fp, lr}
   16f90:	add	sp, sp, #4
   16f94:	bx	lr
   16f98:	push	{r4, r5, r6, sl, fp, lr}
   16f9c:	add	fp, sp, #16
   16fa0:	orr	r2, r2, #18688	; 0x4900
   16fa4:	mov	r4, r3
   16fa8:	orr	r2, r2, #524288	; 0x80000
   16fac:	bl	16f60 <__assert_fail@plt+0x5bbc>
   16fb0:	mov	r5, r0
   16fb4:	mov	r0, #0
   16fb8:	cmp	r5, #0
   16fbc:	bmi	16ff4 <__assert_fail@plt+0x5c50>
   16fc0:	mov	r0, r5
   16fc4:	bl	11308 <fdopendir@plt>
   16fc8:	cmp	r0, #0
   16fcc:	beq	16fd8 <__assert_fail@plt+0x5c34>
   16fd0:	str	r5, [r4]
   16fd4:	pop	{r4, r5, r6, sl, fp, pc}
   16fd8:	bl	11260 <__errno_location@plt>
   16fdc:	ldr	r6, [r0]
   16fe0:	mov	r4, r0
   16fe4:	mov	r0, r5
   16fe8:	bl	11380 <close@plt>
   16fec:	mov	r0, #0
   16ff0:	str	r6, [r4]
   16ff4:	pop	{r4, r5, r6, sl, fp, pc}
   16ff8:	push	{r4, r5, fp, lr}
   16ffc:	add	fp, sp, #8
   17000:	cmp	r0, #0
   17004:	beq	17098 <__assert_fail@plt+0x5cf4>
   17008:	mov	r1, #47	; 0x2f
   1700c:	mov	r4, r0
   17010:	bl	112e4 <strrchr@plt>
   17014:	cmp	r0, #0
   17018:	mov	r5, r4
   1701c:	addne	r5, r0, #1
   17020:	sub	r0, r5, r4
   17024:	cmp	r0, #7
   17028:	blt	1707c <__assert_fail@plt+0x5cd8>
   1702c:	movw	r1, #45700	; 0xb284
   17030:	sub	r0, r5, #7
   17034:	mov	r2, #7
   17038:	movt	r1, #1
   1703c:	bl	11368 <strncmp@plt>
   17040:	cmp	r0, #0
   17044:	bne	1707c <__assert_fail@plt+0x5cd8>
   17048:	movw	r1, #45708	; 0xb28c
   1704c:	mov	r0, r5
   17050:	mov	r2, #3
   17054:	movt	r1, #1
   17058:	bl	11368 <strncmp@plt>
   1705c:	cmp	r0, #0
   17060:	beq	1706c <__assert_fail@plt+0x5cc8>
   17064:	mov	r4, r5
   17068:	b	1707c <__assert_fail@plt+0x5cd8>
   1706c:	movw	r0, #49512	; 0xc168
   17070:	add	r4, r5, #3
   17074:	movt	r0, #2
   17078:	str	r4, [r0]
   1707c:	movw	r0, #49516	; 0xc16c
   17080:	movt	r0, #2
   17084:	str	r4, [r0]
   17088:	movw	r0, #49584	; 0xc1b0
   1708c:	movt	r0, #2
   17090:	str	r4, [r0]
   17094:	pop	{r4, r5, fp, pc}
   17098:	movw	r0, #49528	; 0xc178
   1709c:	mov	r1, #55	; 0x37
   170a0:	mov	r2, #1
   170a4:	movt	r0, #2
   170a8:	ldr	r3, [r0]
   170ac:	movw	r0, #45644	; 0xb24c
   170b0:	movt	r0, #1
   170b4:	bl	11188 <fwrite@plt>
   170b8:	bl	11374 <abort@plt>
   170bc:	push	{r4, r5, r6, sl, fp, lr}
   170c0:	add	fp, sp, #16
   170c4:	mov	r4, r0
   170c8:	movw	r0, #49592	; 0xc1b8
   170cc:	movt	r0, #2
   170d0:	cmp	r4, #0
   170d4:	moveq	r4, r0
   170d8:	bl	11260 <__errno_location@plt>
   170dc:	ldr	r6, [r0]
   170e0:	mov	r5, r0
   170e4:	mov	r0, r4
   170e8:	mov	r1, #48	; 0x30
   170ec:	bl	19b94 <__assert_fail@plt+0x87f0>
   170f0:	str	r6, [r5]
   170f4:	pop	{r4, r5, r6, sl, fp, pc}
   170f8:	movw	r1, #49592	; 0xc1b8
   170fc:	cmp	r0, #0
   17100:	movt	r1, #2
   17104:	movne	r1, r0
   17108:	ldr	r0, [r1]
   1710c:	bx	lr
   17110:	movw	r2, #49592	; 0xc1b8
   17114:	cmp	r0, #0
   17118:	movt	r2, #2
   1711c:	movne	r2, r0
   17120:	str	r1, [r2]
   17124:	bx	lr
   17128:	movw	r3, #49592	; 0xc1b8
   1712c:	cmp	r0, #0
   17130:	and	r2, r2, #1
   17134:	movt	r3, #2
   17138:	movne	r3, r0
   1713c:	ubfx	r0, r1, #5, #3
   17140:	and	r1, r1, #31
   17144:	add	ip, r3, r0, lsl #2
   17148:	mov	r0, #1
   1714c:	ldr	r3, [ip, #8]
   17150:	and	r0, r0, r3, lsr r1
   17154:	eor	r2, r0, r2
   17158:	eor	r1, r3, r2, lsl r1
   1715c:	str	r1, [ip, #8]
   17160:	bx	lr
   17164:	movw	r2, #49592	; 0xc1b8
   17168:	cmp	r0, #0
   1716c:	movt	r2, #2
   17170:	movne	r2, r0
   17174:	ldr	r0, [r2, #4]
   17178:	str	r1, [r2, #4]
   1717c:	bx	lr
   17180:	push	{fp, lr}
   17184:	mov	fp, sp
   17188:	movw	r3, #49592	; 0xc1b8
   1718c:	cmp	r0, #0
   17190:	movt	r3, #2
   17194:	movne	r3, r0
   17198:	cmp	r1, #0
   1719c:	mov	r0, #10
   171a0:	cmpne	r2, #0
   171a4:	str	r0, [r3]
   171a8:	bne	171b0 <__assert_fail@plt+0x5e0c>
   171ac:	bl	11374 <abort@plt>
   171b0:	str	r1, [r3, #40]	; 0x28
   171b4:	str	r2, [r3, #44]	; 0x2c
   171b8:	pop	{fp, pc}
   171bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171c0:	add	fp, sp, #28
   171c4:	sub	sp, sp, #20
   171c8:	mov	r7, r0
   171cc:	ldr	r0, [fp, #8]
   171d0:	movw	r5, #49592	; 0xc1b8
   171d4:	mov	r8, r3
   171d8:	mov	r9, r2
   171dc:	mov	sl, r1
   171e0:	movt	r5, #2
   171e4:	cmp	r0, #0
   171e8:	movne	r5, r0
   171ec:	bl	11260 <__errno_location@plt>
   171f0:	ldr	r2, [r5, #40]	; 0x28
   171f4:	ldr	r3, [r5, #44]	; 0x2c
   171f8:	mov	r4, r0
   171fc:	ldm	r5, {r0, r1}
   17200:	add	r5, r5, #8
   17204:	ldr	r6, [r4]
   17208:	stm	sp, {r0, r1, r5}
   1720c:	mov	r0, r7
   17210:	mov	r1, sl
   17214:	str	r2, [sp, #12]
   17218:	str	r3, [sp, #16]
   1721c:	mov	r2, r9
   17220:	mov	r3, r8
   17224:	bl	17234 <__assert_fail@plt+0x5e90>
   17228:	str	r6, [r4]
   1722c:	sub	sp, fp, #28
   17230:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17234:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17238:	add	fp, sp, #28
   1723c:	sub	sp, sp, #156	; 0x9c
   17240:	str	r0, [fp, #-84]	; 0xffffffac
   17244:	add	r0, r2, #1
   17248:	mov	r6, r1
   1724c:	mov	r7, r3
   17250:	str	r2, [fp, #-80]	; 0xffffffb0
   17254:	str	r0, [sp, #80]	; 0x50
   17258:	ldr	r0, [fp, #12]
   1725c:	and	r1, r0, #1
   17260:	str	r1, [sp, #36]	; 0x24
   17264:	and	r1, r0, #4
   17268:	str	r1, [sp, #32]
   1726c:	ubfx	r8, r0, #1, #1
   17270:	bl	111a0 <__ctype_get_mb_cur_max@plt>
   17274:	str	r0, [sp, #40]	; 0x28
   17278:	ldr	r0, [fp, #24]
   1727c:	ldr	r4, [fp, #8]
   17280:	mov	r1, #0
   17284:	str	r1, [fp, #-52]	; 0xffffffcc
   17288:	mov	r1, #0
   1728c:	str	r1, [sp, #60]	; 0x3c
   17290:	mov	r1, #1
   17294:	str	r1, [sp, #84]	; 0x54
   17298:	str	r0, [sp, #76]	; 0x4c
   1729c:	ldr	r0, [fp, #20]
   172a0:	str	r0, [sp, #72]	; 0x48
   172a4:	mov	r0, #0
   172a8:	str	r0, [sp, #56]	; 0x38
   172ac:	mov	r0, #0
   172b0:	str	r0, [fp, #-88]	; 0xffffffa8
   172b4:	mov	r0, #0
   172b8:	str	r0, [fp, #-72]	; 0xffffffb8
   172bc:	mov	r0, #0
   172c0:	cmp	r4, #10
   172c4:	bhi	185e0 <__assert_fail@plt+0x723c>
   172c8:	add	r1, pc, #24
   172cc:	ldr	ip, [fp, #-84]	; 0xffffffac
   172d0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   172d4:	mov	r5, r6
   172d8:	mov	r9, #0
   172dc:	mov	r2, #1
   172e0:	mov	r3, #0
   172e4:	ldr	pc, [r1, r4, lsl #2]
   172e8:			; <UNDEFINED> instruction: 0x000173b0
   172ec:	andeq	r7, r1, ip, ror #7
   172f0:	andeq	r7, r1, r0, asr #7
   172f4:	andeq	r7, r1, r8, lsr #7
   172f8:	andeq	r7, r1, r0, ror #7
   172fc:	andeq	r7, r1, r4, asr #8
   17300:	ldrdeq	r7, [r1], -r0
   17304:			; <UNDEFINED> instruction: 0x000176bc
   17308:	andeq	r7, r1, r4, lsl r3
   1730c:	andeq	r7, r1, r4, lsl r3
   17310:	andeq	r7, r1, ip, asr #10
   17314:	movw	r6, #45790	; 0xb2de
   17318:	mov	r0, #0
   1731c:	mov	r2, #5
   17320:	movt	r6, #1
   17324:	mov	r1, r6
   17328:	bl	11140 <dcgettext@plt>
   1732c:	cmp	r0, r6
   17330:	str	r0, [sp, #72]	; 0x48
   17334:	bne	17524 <__assert_fail@plt+0x6180>
   17338:	bl	1a360 <__assert_fail@plt+0x8fbc>
   1733c:	ldrb	r1, [r0]
   17340:	and	r1, r1, #223	; 0xdf
   17344:	cmp	r1, #71	; 0x47
   17348:	beq	174a4 <__assert_fail@plt+0x6100>
   1734c:	cmp	r1, #85	; 0x55
   17350:	bne	17508 <__assert_fail@plt+0x6164>
   17354:	ldrb	r1, [r0, #1]
   17358:	and	r1, r1, #223	; 0xdf
   1735c:	cmp	r1, #84	; 0x54
   17360:	bne	17508 <__assert_fail@plt+0x6164>
   17364:	ldrb	r1, [r0, #2]
   17368:	and	r1, r1, #223	; 0xdf
   1736c:	cmp	r1, #70	; 0x46
   17370:	bne	17508 <__assert_fail@plt+0x6164>
   17374:	ldrb	r1, [r0, #3]
   17378:	cmp	r1, #45	; 0x2d
   1737c:	bne	17508 <__assert_fail@plt+0x6164>
   17380:	ldrb	r1, [r0, #4]
   17384:	cmp	r1, #56	; 0x38
   17388:	bne	17508 <__assert_fail@plt+0x6164>
   1738c:	ldrb	r0, [r0, #5]
   17390:	cmp	r0, #0
   17394:	movw	r0, #45794	; 0xb2e2
   17398:	movt	r0, #1
   1739c:	str	r0, [sp, #72]	; 0x48
   173a0:	bne	17508 <__assert_fail@plt+0x6164>
   173a4:	b	17524 <__assert_fail@plt+0x6180>
   173a8:	mov	r0, #1
   173ac:	b	173ec <__assert_fail@plt+0x6048>
   173b0:	mov	r4, #0
   173b4:	mov	r9, #0
   173b8:	mov	r2, r0
   173bc:	b	1743c <__assert_fail@plt+0x6098>
   173c0:	tst	r8, #1
   173c4:	bne	173ec <__assert_fail@plt+0x6048>
   173c8:	mov	r2, r0
   173cc:	b	17414 <__assert_fail@plt+0x6070>
   173d0:	mov	r0, #1
   173d4:	mov	r9, #0
   173d8:	mov	r4, #5
   173dc:	b	17458 <__assert_fail@plt+0x60b4>
   173e0:	mov	r2, #1
   173e4:	tst	r8, #1
   173e8:	beq	17414 <__assert_fail@plt+0x6070>
   173ec:	mov	r1, #1
   173f0:	mov	r9, #0
   173f4:	mov	r4, #2
   173f8:	mov	r2, r0
   173fc:	mov	r3, #1
   17400:	str	r1, [fp, #-72]	; 0xffffffb8
   17404:	movw	r1, #45792	; 0xb2e0
   17408:	movt	r1, #1
   1740c:	str	r1, [fp, #-88]	; 0xffffffa8
   17410:	b	176bc <__assert_fail@plt+0x6318>
   17414:	cmp	r5, #0
   17418:	mov	r9, #1
   1741c:	mov	r4, #2
   17420:	movne	r0, #39	; 0x27
   17424:	strbne	r0, [ip]
   17428:	movw	r0, #45792	; 0xb2e0
   1742c:	movt	r0, #1
   17430:	str	r0, [fp, #-88]	; 0xffffffa8
   17434:	mov	r0, #1
   17438:	str	r0, [fp, #-72]	; 0xffffffb8
   1743c:	mov	r3, #0
   17440:	b	176bc <__assert_fail@plt+0x6318>
   17444:	mov	r4, #5
   17448:	tst	r8, #1
   1744c:	beq	17474 <__assert_fail@plt+0x60d0>
   17450:	mov	r0, #1
   17454:	mov	r9, #0
   17458:	str	r0, [fp, #-72]	; 0xffffffb8
   1745c:	movw	r0, #45788	; 0xb2dc
   17460:	mov	r2, #1
   17464:	mov	r3, #1
   17468:	movt	r0, #1
   1746c:	str	r0, [fp, #-88]	; 0xffffffa8
   17470:	b	176bc <__assert_fail@plt+0x6318>
   17474:	cmp	r5, #0
   17478:	mov	r3, #0
   1747c:	mov	r9, #1
   17480:	mov	r2, #1
   17484:	movne	r0, #34	; 0x22
   17488:	strbne	r0, [ip]
   1748c:	movw	r0, #45788	; 0xb2dc
   17490:	movt	r0, #1
   17494:	str	r0, [fp, #-88]	; 0xffffffa8
   17498:	mov	r0, #1
   1749c:	str	r0, [fp, #-72]	; 0xffffffb8
   174a0:	b	176bc <__assert_fail@plt+0x6318>
   174a4:	ldrb	r1, [r0, #1]
   174a8:	and	r1, r1, #223	; 0xdf
   174ac:	cmp	r1, #66	; 0x42
   174b0:	bne	17508 <__assert_fail@plt+0x6164>
   174b4:	ldrb	r1, [r0, #2]
   174b8:	cmp	r1, #49	; 0x31
   174bc:	bne	17508 <__assert_fail@plt+0x6164>
   174c0:	ldrb	r1, [r0, #3]
   174c4:	cmp	r1, #56	; 0x38
   174c8:	bne	17508 <__assert_fail@plt+0x6164>
   174cc:	ldrb	r1, [r0, #4]
   174d0:	cmp	r1, #48	; 0x30
   174d4:	bne	17508 <__assert_fail@plt+0x6164>
   174d8:	ldrb	r1, [r0, #5]
   174dc:	cmp	r1, #51	; 0x33
   174e0:	bne	17508 <__assert_fail@plt+0x6164>
   174e4:	ldrb	r1, [r0, #6]
   174e8:	cmp	r1, #48	; 0x30
   174ec:	bne	17508 <__assert_fail@plt+0x6164>
   174f0:	ldrb	r0, [r0, #7]
   174f4:	cmp	r0, #0
   174f8:	movw	r0, #45802	; 0xb2ea
   174fc:	movt	r0, #1
   17500:	str	r0, [sp, #72]	; 0x48
   17504:	beq	17524 <__assert_fail@plt+0x6180>
   17508:	movw	r1, #45788	; 0xb2dc
   1750c:	movw	r0, #45792	; 0xb2e0
   17510:	cmp	r4, #9
   17514:	movt	r1, #1
   17518:	movt	r0, #1
   1751c:	moveq	r0, r1
   17520:	str	r0, [sp, #72]	; 0x48
   17524:	movw	r6, #45792	; 0xb2e0
   17528:	mov	r0, #0
   1752c:	mov	r2, #5
   17530:	movt	r6, #1
   17534:	mov	r1, r6
   17538:	bl	11140 <dcgettext@plt>
   1753c:	cmp	r0, r6
   17540:	str	r0, [sp, #76]	; 0x4c
   17544:	beq	17590 <__assert_fail@plt+0x61ec>
   17548:	ldr	ip, [fp, #-84]	; 0xffffffac
   1754c:	mov	r9, #0
   17550:	tst	r8, #1
   17554:	bne	17698 <__assert_fail@plt+0x62f4>
   17558:	ldr	r0, [sp, #72]	; 0x48
   1755c:	ldrb	r0, [r0]
   17560:	cmp	r0, #0
   17564:	beq	17698 <__assert_fail@plt+0x62f4>
   17568:	ldr	r1, [sp, #72]	; 0x48
   1756c:	mov	r9, #0
   17570:	add	r1, r1, #1
   17574:	cmp	r9, r5
   17578:	strbcc	r0, [ip, r9]
   1757c:	ldrb	r0, [r1, r9]
   17580:	add	r9, r9, #1
   17584:	cmp	r0, #0
   17588:	bne	17574 <__assert_fail@plt+0x61d0>
   1758c:	b	17698 <__assert_fail@plt+0x62f4>
   17590:	bl	1a360 <__assert_fail@plt+0x8fbc>
   17594:	ldrb	r1, [r0]
   17598:	and	r1, r1, #223	; 0xdf
   1759c:	cmp	r1, #71	; 0x47
   175a0:	beq	17610 <__assert_fail@plt+0x626c>
   175a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   175a8:	cmp	r1, #85	; 0x55
   175ac:	bne	1766c <__assert_fail@plt+0x62c8>
   175b0:	ldrb	r1, [r0, #1]
   175b4:	and	r1, r1, #223	; 0xdf
   175b8:	cmp	r1, #84	; 0x54
   175bc:	bne	1766c <__assert_fail@plt+0x62c8>
   175c0:	ldrb	r1, [r0, #2]
   175c4:	and	r1, r1, #223	; 0xdf
   175c8:	cmp	r1, #70	; 0x46
   175cc:	bne	1766c <__assert_fail@plt+0x62c8>
   175d0:	ldrb	r1, [r0, #3]
   175d4:	cmp	r1, #45	; 0x2d
   175d8:	bne	1766c <__assert_fail@plt+0x62c8>
   175dc:	ldrb	r1, [r0, #4]
   175e0:	cmp	r1, #56	; 0x38
   175e4:	bne	1766c <__assert_fail@plt+0x62c8>
   175e8:	ldrb	r0, [r0, #5]
   175ec:	cmp	r0, #0
   175f0:	bne	1766c <__assert_fail@plt+0x62c8>
   175f4:	movw	r0, #45798	; 0xb2e6
   175f8:	movt	r0, #1
   175fc:	str	r0, [sp, #76]	; 0x4c
   17600:	mov	r9, #0
   17604:	tst	r8, #1
   17608:	beq	17558 <__assert_fail@plt+0x61b4>
   1760c:	b	17698 <__assert_fail@plt+0x62f4>
   17610:	ldrb	r1, [r0, #1]
   17614:	ldr	ip, [fp, #-84]	; 0xffffffac
   17618:	and	r1, r1, #223	; 0xdf
   1761c:	cmp	r1, #66	; 0x42
   17620:	bne	1766c <__assert_fail@plt+0x62c8>
   17624:	ldrb	r1, [r0, #2]
   17628:	cmp	r1, #49	; 0x31
   1762c:	bne	1766c <__assert_fail@plt+0x62c8>
   17630:	ldrb	r1, [r0, #3]
   17634:	cmp	r1, #56	; 0x38
   17638:	bne	1766c <__assert_fail@plt+0x62c8>
   1763c:	ldrb	r1, [r0, #4]
   17640:	cmp	r1, #48	; 0x30
   17644:	bne	1766c <__assert_fail@plt+0x62c8>
   17648:	ldrb	r1, [r0, #5]
   1764c:	cmp	r1, #51	; 0x33
   17650:	bne	1766c <__assert_fail@plt+0x62c8>
   17654:	ldrb	r1, [r0, #6]
   17658:	cmp	r1, #48	; 0x30
   1765c:	bne	1766c <__assert_fail@plt+0x62c8>
   17660:	ldrb	r0, [r0, #7]
   17664:	cmp	r0, #0
   17668:	beq	18480 <__assert_fail@plt+0x70dc>
   1766c:	movw	r0, #45792	; 0xb2e0
   17670:	cmp	r4, #9
   17674:	movt	r0, #1
   17678:	mov	r1, r0
   1767c:	movw	r0, #45788	; 0xb2dc
   17680:	movt	r0, #1
   17684:	moveq	r1, r0
   17688:	str	r1, [sp, #76]	; 0x4c
   1768c:	mov	r9, #0
   17690:	tst	r8, #1
   17694:	beq	17558 <__assert_fail@plt+0x61b4>
   17698:	ldr	r6, [sp, #76]	; 0x4c
   1769c:	mov	r0, r6
   176a0:	bl	1123c <strlen@plt>
   176a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   176a8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   176ac:	str	r0, [fp, #-72]	; 0xffffffb8
   176b0:	str	r6, [fp, #-88]	; 0xffffffa8
   176b4:	mov	r2, #1
   176b8:	mov	r3, r8
   176bc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   176c0:	str	r4, [fp, #-64]	; 0xffffffc0
   176c4:	mov	sl, #0
   176c8:	str	r3, [fp, #-76]	; 0xffffffb4
   176cc:	str	r2, [sp, #88]	; 0x58
   176d0:	cmp	r0, #0
   176d4:	movwne	r0, #1
   176d8:	and	r1, r0, r3
   176dc:	and	r1, r2, r1
   176e0:	str	r1, [sp, #48]	; 0x30
   176e4:	sub	r1, r4, #2
   176e8:	clz	r1, r1
   176ec:	lsr	r1, r1, #5
   176f0:	and	r1, r1, r3
   176f4:	str	r1, [sp, #44]	; 0x2c
   176f8:	subs	r1, r4, #2
   176fc:	eor	r4, r3, #1
   17700:	movwne	r1, #1
   17704:	str	r4, [sp, #92]	; 0x5c
   17708:	orr	r4, r1, r4
   1770c:	and	r1, r1, r2
   17710:	and	r0, r0, r1
   17714:	str	r4, [sp, #64]	; 0x40
   17718:	ldr	r4, [sp, #84]	; 0x54
   1771c:	str	r0, [fp, #-60]	; 0xffffffc4
   17720:	orr	r0, r1, r3
   17724:	ldr	r1, [fp, #16]
   17728:	eor	r0, r0, #1
   1772c:	clz	r1, r1
   17730:	lsr	r1, r1, #5
   17734:	orr	r0, r1, r0
   17738:	str	r0, [fp, #-68]	; 0xffffffbc
   1773c:	eor	r0, r2, #1
   17740:	str	r0, [sp, #52]	; 0x34
   17744:	cmn	r7, #1
   17748:	beq	17758 <__assert_fail@plt+0x63b4>
   1774c:	cmp	sl, r7
   17750:	bne	17764 <__assert_fail@plt+0x63c0>
   17754:	b	183f8 <__assert_fail@plt+0x7054>
   17758:	ldrb	r0, [lr, sl]
   1775c:	cmp	r0, #0
   17760:	beq	18400 <__assert_fail@plt+0x705c>
   17764:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17768:	cmp	r0, #0
   1776c:	beq	177cc <__assert_fail@plt+0x6428>
   17770:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17774:	mov	r6, r5
   17778:	add	r5, sl, r0
   1777c:	cmp	r0, #2
   17780:	bcc	177ec <__assert_fail@plt+0x6448>
   17784:	mov	r0, #0
   17788:	cmn	r7, #1
   1778c:	str	r0, [fp, #-56]	; 0xffffffc8
   17790:	bne	177a8 <__assert_fail@plt+0x6404>
   17794:	mov	r0, lr
   17798:	bl	1123c <strlen@plt>
   1779c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   177a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   177a4:	mov	r7, r0
   177a8:	cmp	r5, r7
   177ac:	bls	177fc <__assert_fail@plt+0x6458>
   177b0:	mov	r0, #0
   177b4:	mov	r5, r6
   177b8:	str	r0, [fp, #-48]	; 0xffffffd0
   177bc:	ldrb	r6, [lr, sl]
   177c0:	cmp	r6, #126	; 0x7e
   177c4:	bls	1784c <__assert_fail@plt+0x64a8>
   177c8:	b	17da8 <__assert_fail@plt+0x6a04>
   177cc:	mov	r0, #0
   177d0:	str	r0, [fp, #-56]	; 0xffffffc8
   177d4:	mov	r0, #0
   177d8:	str	r0, [fp, #-48]	; 0xffffffd0
   177dc:	ldrb	r6, [lr, sl]
   177e0:	cmp	r6, #126	; 0x7e
   177e4:	bls	1784c <__assert_fail@plt+0x64a8>
   177e8:	b	17da8 <__assert_fail@plt+0x6a04>
   177ec:	mov	r0, #0
   177f0:	str	r0, [fp, #-56]	; 0xffffffc8
   177f4:	cmp	r5, r7
   177f8:	bhi	177b0 <__assert_fail@plt+0x640c>
   177fc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   17800:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17804:	add	r0, lr, sl
   17808:	bl	11230 <bcmp@plt>
   1780c:	ldr	r2, [sp, #92]	; 0x5c
   17810:	cmp	r0, #0
   17814:	mov	r1, r0
   17818:	mov	r5, r6
   1781c:	movwne	r1, #1
   17820:	orr	r1, r1, r2
   17824:	tst	r1, #1
   17828:	beq	184c0 <__assert_fail@plt+0x711c>
   1782c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17830:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17834:	clz	r0, r0
   17838:	lsr	r0, r0, #5
   1783c:	str	r0, [fp, #-48]	; 0xffffffd0
   17840:	ldrb	r6, [lr, sl]
   17844:	cmp	r6, #126	; 0x7e
   17848:	bhi	17da8 <__assert_fail@plt+0x6a04>
   1784c:	add	r3, pc, #16
   17850:	mov	r8, #1
   17854:	mov	r2, #110	; 0x6e
   17858:	mov	r0, #97	; 0x61
   1785c:	mov	r1, #0
   17860:	ldr	pc, [r3, r6, lsl #2]
   17864:	andeq	r7, r1, r0, ror #22
   17868:	andeq	r7, r1, r8, lsr #27
   1786c:	andeq	r7, r1, r8, lsr #27
   17870:	andeq	r7, r1, r8, lsr #27
   17874:	andeq	r7, r1, r8, lsr #27
   17878:	andeq	r7, r1, r8, lsr #27
   1787c:	andeq	r7, r1, r8, lsr #27
   17880:	andeq	r7, r1, ip, asr lr
   17884:	andeq	r7, r1, r0, asr #22
   17888:	andeq	r7, r1, r8, lsr fp
   1788c:	andeq	r7, r1, ip, asr #22
   17890:	andeq	r7, r1, ip, ror ip
   17894:	andeq	r7, r1, r0, lsr fp
   17898:	andeq	r7, r1, r8, asr #22
   1789c:	andeq	r7, r1, r8, lsr #27
   178a0:	andeq	r7, r1, r8, lsr #27
   178a4:	andeq	r7, r1, r8, lsr #27
   178a8:	andeq	r7, r1, r8, lsr #27
   178ac:	andeq	r7, r1, r8, lsr #27
   178b0:	andeq	r7, r1, r8, lsr #27
   178b4:	andeq	r7, r1, r8, lsr #27
   178b8:	andeq	r7, r1, r8, lsr #27
   178bc:	andeq	r7, r1, r8, lsr #27
   178c0:	andeq	r7, r1, r8, lsr #27
   178c4:	andeq	r7, r1, r8, lsr #27
   178c8:	andeq	r7, r1, r8, lsr #27
   178cc:	andeq	r7, r1, r8, lsr #27
   178d0:	andeq	r7, r1, r8, lsr #27
   178d4:	andeq	r7, r1, r8, lsr #27
   178d8:	andeq	r7, r1, r8, lsr #27
   178dc:	andeq	r7, r1, r8, lsr #27
   178e0:	andeq	r7, r1, r8, lsr #27
   178e4:	ldrdeq	r7, [r1], -r4
   178e8:	ldrdeq	r7, [r1], -r8
   178ec:	ldrdeq	r7, [r1], -r8
   178f0:	andeq	r7, r1, r8, asr #21
   178f4:	ldrdeq	r7, [r1], -r8
   178f8:	andeq	r7, r1, r0, ror #20
   178fc:	ldrdeq	r7, [r1], -r8
   17900:	andeq	r7, r1, r4, lsl #25
   17904:	ldrdeq	r7, [r1], -r8
   17908:	ldrdeq	r7, [r1], -r8
   1790c:	ldrdeq	r7, [r1], -r8
   17910:	andeq	r7, r1, r0, ror #20
   17914:	andeq	r7, r1, r0, ror #20
   17918:	andeq	r7, r1, r0, ror #20
   1791c:	andeq	r7, r1, r0, ror #20
   17920:	andeq	r7, r1, r0, ror #20
   17924:	andeq	r7, r1, r0, ror #20
   17928:	andeq	r7, r1, r0, ror #20
   1792c:	andeq	r7, r1, r0, ror #20
   17930:	andeq	r7, r1, r0, ror #20
   17934:	andeq	r7, r1, r0, ror #20
   17938:	andeq	r7, r1, r0, ror #20
   1793c:	andeq	r7, r1, r0, ror #20
   17940:	andeq	r7, r1, r0, ror #20
   17944:	andeq	r7, r1, r0, ror #20
   17948:	andeq	r7, r1, r0, ror #20
   1794c:	andeq	r7, r1, r0, ror #20
   17950:	ldrdeq	r7, [r1], -r8
   17954:	ldrdeq	r7, [r1], -r8
   17958:	ldrdeq	r7, [r1], -r8
   1795c:	ldrdeq	r7, [r1], -r8
   17960:	andeq	r7, r1, r8, asr #24
   17964:	andeq	r7, r1, r8, lsr #27
   17968:	andeq	r7, r1, r0, ror #20
   1796c:	andeq	r7, r1, r0, ror #20
   17970:	andeq	r7, r1, r0, ror #20
   17974:	andeq	r7, r1, r0, ror #20
   17978:	andeq	r7, r1, r0, ror #20
   1797c:	andeq	r7, r1, r0, ror #20
   17980:	andeq	r7, r1, r0, ror #20
   17984:	andeq	r7, r1, r0, ror #20
   17988:	andeq	r7, r1, r0, ror #20
   1798c:	andeq	r7, r1, r0, ror #20
   17990:	andeq	r7, r1, r0, ror #20
   17994:	andeq	r7, r1, r0, ror #20
   17998:	andeq	r7, r1, r0, ror #20
   1799c:	andeq	r7, r1, r0, ror #20
   179a0:	andeq	r7, r1, r0, ror #20
   179a4:	andeq	r7, r1, r0, ror #20
   179a8:	andeq	r7, r1, r0, ror #20
   179ac:	andeq	r7, r1, r0, ror #20
   179b0:	andeq	r7, r1, r0, ror #20
   179b4:	andeq	r7, r1, r0, ror #20
   179b8:	andeq	r7, r1, r0, ror #20
   179bc:	andeq	r7, r1, r0, ror #20
   179c0:	andeq	r7, r1, r0, ror #20
   179c4:	andeq	r7, r1, r0, ror #20
   179c8:	andeq	r7, r1, r0, ror #20
   179cc:	andeq	r7, r1, r0, ror #20
   179d0:	ldrdeq	r7, [r1], -r8
   179d4:	andeq	r7, r1, ip, lsl #22
   179d8:	andeq	r7, r1, r0, ror #20
   179dc:	ldrdeq	r7, [r1], -r8
   179e0:	andeq	r7, r1, r0, ror #20
   179e4:	ldrdeq	r7, [r1], -r8
   179e8:	andeq	r7, r1, r0, ror #20
   179ec:	andeq	r7, r1, r0, ror #20
   179f0:	andeq	r7, r1, r0, ror #20
   179f4:	andeq	r7, r1, r0, ror #20
   179f8:	andeq	r7, r1, r0, ror #20
   179fc:	andeq	r7, r1, r0, ror #20
   17a00:	andeq	r7, r1, r0, ror #20
   17a04:	andeq	r7, r1, r0, ror #20
   17a08:	andeq	r7, r1, r0, ror #20
   17a0c:	andeq	r7, r1, r0, ror #20
   17a10:	andeq	r7, r1, r0, ror #20
   17a14:	andeq	r7, r1, r0, ror #20
   17a18:	andeq	r7, r1, r0, ror #20
   17a1c:	andeq	r7, r1, r0, ror #20
   17a20:	andeq	r7, r1, r0, ror #20
   17a24:	andeq	r7, r1, r0, ror #20
   17a28:	andeq	r7, r1, r0, ror #20
   17a2c:	andeq	r7, r1, r0, ror #20
   17a30:	andeq	r7, r1, r0, ror #20
   17a34:	andeq	r7, r1, r0, ror #20
   17a38:	andeq	r7, r1, r0, ror #20
   17a3c:	andeq	r7, r1, r0, ror #20
   17a40:	andeq	r7, r1, r0, ror #20
   17a44:	andeq	r7, r1, r0, ror #20
   17a48:	andeq	r7, r1, r0, ror #20
   17a4c:	andeq	r7, r1, r0, ror #20
   17a50:	andeq	r7, r1, r0, lsr #21
   17a54:	ldrdeq	r7, [r1], -r8
   17a58:	andeq	r7, r1, r0, lsr #21
   17a5c:	andeq	r7, r1, r8, asr #21
   17a60:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17a64:	tst	r0, #1
   17a68:	bne	17d20 <__assert_fail@plt+0x697c>
   17a6c:	ldr	r1, [fp, #16]
   17a70:	ubfx	r0, r6, #5, #3
   17a74:	mov	r2, #1
   17a78:	ldr	r0, [r1, r0, lsl #2]
   17a7c:	and	r1, r6, #31
   17a80:	tst	r0, r2, lsl r1
   17a84:	beq	17d20 <__assert_fail@plt+0x697c>
   17a88:	mov	r0, r6
   17a8c:	mov	r1, r8
   17a90:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17a94:	tst	r2, #1
   17a98:	beq	17d40 <__assert_fail@plt+0x699c>
   17a9c:	b	1849c <__assert_fail@plt+0x70f8>
   17aa0:	cmp	r7, #1
   17aa4:	beq	17ac8 <__assert_fail@plt+0x6724>
   17aa8:	mov	r8, #0
   17aac:	cmn	r7, #1
   17ab0:	bne	17d0c <__assert_fail@plt+0x6968>
   17ab4:	ldrb	r0, [lr, #1]
   17ab8:	cmp	r0, #0
   17abc:	beq	17ac8 <__assert_fail@plt+0x6724>
   17ac0:	mvn	r7, #0
   17ac4:	b	17d0c <__assert_fail@plt+0x6968>
   17ac8:	mov	r8, #0
   17acc:	cmp	sl, #0
   17ad0:	bne	17d0c <__assert_fail@plt+0x6968>
   17ad4:	mov	r1, #1
   17ad8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17adc:	cmp	r0, #2
   17ae0:	bne	17af8 <__assert_fail@plt+0x6754>
   17ae4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17ae8:	mov	r8, r1
   17aec:	tst	r0, #1
   17af0:	beq	17a60 <__assert_fail@plt+0x66bc>
   17af4:	b	1849c <__assert_fail@plt+0x70f8>
   17af8:	mov	r8, r1
   17afc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17b00:	tst	r0, #1
   17b04:	beq	17a6c <__assert_fail@plt+0x66c8>
   17b08:	b	17d20 <__assert_fail@plt+0x697c>
   17b0c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17b10:	cmp	r0, #2
   17b14:	bne	17dd4 <__assert_fail@plt+0x6a30>
   17b18:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17b1c:	tst	r0, #1
   17b20:	bne	1849c <__assert_fail@plt+0x70f8>
   17b24:	mov	r0, #0
   17b28:	str	r0, [fp, #-56]	; 0xffffffc8
   17b2c:	b	17dec <__assert_fail@plt+0x6a48>
   17b30:	mov	r0, #102	; 0x66
   17b34:	b	17e5c <__assert_fail@plt+0x6ab8>
   17b38:	mov	r2, #116	; 0x74
   17b3c:	b	17b4c <__assert_fail@plt+0x67a8>
   17b40:	mov	r0, #98	; 0x62
   17b44:	b	17e5c <__assert_fail@plt+0x6ab8>
   17b48:	mov	r2, #114	; 0x72
   17b4c:	ldr	r0, [sp, #64]	; 0x40
   17b50:	tst	r0, #1
   17b54:	mov	r0, r2
   17b58:	bne	17e5c <__assert_fail@plt+0x6ab8>
   17b5c:	b	1849c <__assert_fail@plt+0x70f8>
   17b60:	ldr	r0, [sp, #88]	; 0x58
   17b64:	tst	r0, #1
   17b68:	beq	17e7c <__assert_fail@plt+0x6ad8>
   17b6c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17b70:	tst	r0, #1
   17b74:	bne	185d8 <__assert_fail@plt+0x7234>
   17b78:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17b7c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17b80:	subs	r0, r0, #2
   17b84:	movwne	r0, #1
   17b88:	orr	r0, r0, r1
   17b8c:	tst	r0, #1
   17b90:	bne	17bcc <__assert_fail@plt+0x6828>
   17b94:	cmp	r9, r5
   17b98:	movcc	r0, #39	; 0x27
   17b9c:	strbcc	r0, [ip, r9]
   17ba0:	add	r0, r9, #1
   17ba4:	cmp	r0, r5
   17ba8:	movcc	r1, #36	; 0x24
   17bac:	strbcc	r1, [ip, r0]
   17bb0:	add	r0, r9, #2
   17bb4:	add	r9, r9, #3
   17bb8:	cmp	r0, r5
   17bbc:	movcc	r1, #39	; 0x27
   17bc0:	strbcc	r1, [ip, r0]
   17bc4:	mov	r0, #1
   17bc8:	str	r0, [fp, #-52]	; 0xffffffcc
   17bcc:	mov	r1, #1
   17bd0:	cmp	r9, r5
   17bd4:	mov	r8, #0
   17bd8:	mov	r6, #48	; 0x30
   17bdc:	str	r1, [fp, #-56]	; 0xffffffc8
   17be0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17be4:	movcc	r0, #92	; 0x5c
   17be8:	strbcc	r0, [ip, r9]
   17bec:	add	r0, r9, #1
   17bf0:	cmp	r1, #2
   17bf4:	beq	18048 <__assert_fail@plt+0x6ca4>
   17bf8:	add	r1, sl, #1
   17bfc:	cmp	r1, r7
   17c00:	bcs	18048 <__assert_fail@plt+0x6ca4>
   17c04:	ldrb	r1, [lr, r1]
   17c08:	sub	r1, r1, #48	; 0x30
   17c0c:	uxtb	r1, r1
   17c10:	cmp	r1, #9
   17c14:	bhi	18048 <__assert_fail@plt+0x6ca4>
   17c18:	cmp	r0, r5
   17c1c:	movcc	r1, #48	; 0x30
   17c20:	strbcc	r1, [ip, r0]
   17c24:	add	r0, r9, #2
   17c28:	add	r9, r9, #3
   17c2c:	cmp	r0, r5
   17c30:	movcc	r1, #48	; 0x30
   17c34:	strbcc	r1, [ip, r0]
   17c38:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17c3c:	tst	r0, #1
   17c40:	beq	17a6c <__assert_fail@plt+0x66c8>
   17c44:	b	17d20 <__assert_fail@plt+0x697c>
   17c48:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17c4c:	mov	r6, #63	; 0x3f
   17c50:	cmp	r0, #5
   17c54:	beq	1805c <__assert_fail@plt+0x6cb8>
   17c58:	mov	r1, #0
   17c5c:	cmp	r0, #2
   17c60:	str	r1, [fp, #-56]	; 0xffffffc8
   17c64:	bne	18124 <__assert_fail@plt+0x6d80>
   17c68:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17c6c:	mov	r8, #0
   17c70:	tst	r0, #1
   17c74:	beq	17a60 <__assert_fail@plt+0x66bc>
   17c78:	b	1849c <__assert_fail@plt+0x70f8>
   17c7c:	mov	r0, #118	; 0x76
   17c80:	b	17e5c <__assert_fail@plt+0x6ab8>
   17c84:	mov	r0, #1
   17c88:	mov	r6, #39	; 0x27
   17c8c:	str	r0, [sp, #60]	; 0x3c
   17c90:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17c94:	cmp	r0, #2
   17c98:	bne	17e9c <__assert_fail@plt+0x6af8>
   17c9c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17ca0:	tst	r0, #1
   17ca4:	bne	1849c <__assert_fail@plt+0x70f8>
   17ca8:	ldr	r2, [sp, #56]	; 0x38
   17cac:	clz	r1, r5
   17cb0:	mov	r8, #1
   17cb4:	lsr	r1, r1, #5
   17cb8:	cmp	r2, #0
   17cbc:	mov	r0, r2
   17cc0:	movwne	r0, #1
   17cc4:	orrs	r0, r0, r1
   17cc8:	moveq	r2, r5
   17ccc:	moveq	r5, r0
   17cd0:	cmp	r9, r5
   17cd4:	str	r2, [sp, #56]	; 0x38
   17cd8:	movcc	r0, #39	; 0x27
   17cdc:	strbcc	r0, [ip, r9]
   17ce0:	add	r0, r9, #1
   17ce4:	cmp	r0, r5
   17ce8:	movcc	r1, #92	; 0x5c
   17cec:	strbcc	r1, [ip, r0]
   17cf0:	add	r0, r9, #2
   17cf4:	add	r9, r9, #3
   17cf8:	cmp	r0, r5
   17cfc:	movcc	r1, #39	; 0x27
   17d00:	strbcc	r1, [ip, r0]
   17d04:	mov	r0, #0
   17d08:	str	r0, [fp, #-52]	; 0xffffffcc
   17d0c:	mov	r0, #0
   17d10:	str	r0, [fp, #-56]	; 0xffffffc8
   17d14:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17d18:	tst	r0, #1
   17d1c:	beq	17a6c <__assert_fail@plt+0x66c8>
   17d20:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17d24:	mov	r1, r8
   17d28:	cmp	r0, #0
   17d2c:	mov	r0, r6
   17d30:	beq	17df4 <__assert_fail@plt+0x6a50>
   17d34:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17d38:	tst	r2, #1
   17d3c:	bne	1849c <__assert_fail@plt+0x70f8>
   17d40:	ldr	r2, [fp, #-64]	; 0xffffffc0
   17d44:	ldr	r3, [fp, #-52]	; 0xffffffcc
   17d48:	subs	r2, r2, #2
   17d4c:	movwne	r2, #1
   17d50:	orr	r2, r2, r3
   17d54:	tst	r2, #1
   17d58:	bne	17d94 <__assert_fail@plt+0x69f0>
   17d5c:	cmp	r9, r5
   17d60:	movcc	r2, #39	; 0x27
   17d64:	strbcc	r2, [ip, r9]
   17d68:	add	r2, r9, #1
   17d6c:	cmp	r2, r5
   17d70:	movcc	r3, #36	; 0x24
   17d74:	strbcc	r3, [ip, r2]
   17d78:	add	r2, r9, #2
   17d7c:	add	r9, r9, #3
   17d80:	cmp	r2, r5
   17d84:	movcc	r3, #39	; 0x27
   17d88:	strbcc	r3, [ip, r2]
   17d8c:	mov	r2, #1
   17d90:	str	r2, [fp, #-52]	; 0xffffffcc
   17d94:	cmp	r9, r5
   17d98:	movcc	r2, #92	; 0x5c
   17d9c:	strbcc	r2, [ip, r9]
   17da0:	add	r9, r9, #1
   17da4:	b	17e3c <__assert_fail@plt+0x6a98>
   17da8:	ldr	r0, [sp, #40]	; 0x28
   17dac:	cmp	r0, #1
   17db0:	bne	17eb0 <__assert_fail@plt+0x6b0c>
   17db4:	bl	11218 <__ctype_b_loc@plt>
   17db8:	ldr	r0, [r0]
   17dbc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17dc0:	mov	r1, #1
   17dc4:	add	r0, r0, r6, lsl #1
   17dc8:	ldrb	r0, [r0, #1]
   17dcc:	ubfx	r8, r0, #6, #1
   17dd0:	b	18208 <__assert_fail@plt+0x6e64>
   17dd4:	ldr	r1, [sp, #48]	; 0x30
   17dd8:	mov	r0, #0
   17ddc:	str	r0, [fp, #-56]	; 0xffffffc8
   17de0:	mov	r0, #92	; 0x5c
   17de4:	cmp	r1, #0
   17de8:	beq	17e5c <__assert_fail@plt+0x6ab8>
   17dec:	mov	r6, #92	; 0x5c
   17df0:	mov	r8, #0
   17df4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17df8:	cmp	r0, #0
   17dfc:	bne	17e34 <__assert_fail@plt+0x6a90>
   17e00:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17e04:	tst	r0, #1
   17e08:	beq	17e34 <__assert_fail@plt+0x6a90>
   17e0c:	cmp	r9, r5
   17e10:	movcc	r0, #39	; 0x27
   17e14:	strbcc	r0, [ip, r9]
   17e18:	add	r0, r9, #1
   17e1c:	add	r9, r9, #2
   17e20:	cmp	r0, r5
   17e24:	movcc	r1, #39	; 0x27
   17e28:	strbcc	r1, [ip, r0]
   17e2c:	mov	r0, #0
   17e30:	str	r0, [fp, #-52]	; 0xffffffcc
   17e34:	mov	r1, r8
   17e38:	mov	r0, r6
   17e3c:	cmp	r9, r5
   17e40:	and	r4, r4, r1
   17e44:	strbcc	r0, [ip, r9]
   17e48:	add	r9, r9, #1
   17e4c:	add	sl, sl, #1
   17e50:	cmn	r7, #1
   17e54:	bne	1774c <__assert_fail@plt+0x63a8>
   17e58:	b	17758 <__assert_fail@plt+0x63b4>
   17e5c:	mov	r1, #0
   17e60:	mov	r8, #0
   17e64:	str	r1, [fp, #-56]	; 0xffffffc8
   17e68:	ldr	r1, [sp, #88]	; 0x58
   17e6c:	tst	r1, #1
   17e70:	mov	r1, #0
   17e74:	beq	17a60 <__assert_fail@plt+0x66bc>
   17e78:	b	17d34 <__assert_fail@plt+0x6990>
   17e7c:	ldr	r0, [sp, #36]	; 0x24
   17e80:	mov	r6, #0
   17e84:	mov	r8, #0
   17e88:	cmp	r0, #0
   17e8c:	mov	r0, #0
   17e90:	str	r0, [fp, #-56]	; 0xffffffc8
   17e94:	bne	17e4c <__assert_fail@plt+0x6aa8>
   17e98:	b	17a60 <__assert_fail@plt+0x66bc>
   17e9c:	mov	r8, #1
   17ea0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17ea4:	tst	r0, #1
   17ea8:	beq	17a6c <__assert_fail@plt+0x66c8>
   17eac:	b	17d20 <__assert_fail@plt+0x697c>
   17eb0:	mov	r0, #0
   17eb4:	cmn	r7, #1
   17eb8:	str	r0, [fp, #-36]	; 0xffffffdc
   17ebc:	str	r0, [fp, #-40]	; 0xffffffd8
   17ec0:	bne	17ed4 <__assert_fail@plt+0x6b30>
   17ec4:	mov	r0, lr
   17ec8:	bl	1123c <strlen@plt>
   17ecc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17ed0:	mov	r7, r0
   17ed4:	ldr	r0, [sp, #44]	; 0x2c
   17ed8:	str	r4, [sp, #84]	; 0x54
   17edc:	str	r5, [sp, #28]
   17ee0:	cmp	r0, #0
   17ee4:	beq	18138 <__assert_fail@plt+0x6d94>
   17ee8:	ldr	r0, [sp, #80]	; 0x50
   17eec:	mov	r8, #1
   17ef0:	mov	r5, #0
   17ef4:	add	r0, r0, sl
   17ef8:	str	r0, [sp, #24]
   17efc:	sub	r0, fp, #40	; 0x28
   17f00:	mov	r3, r0
   17f04:	b	17f40 <__assert_fail@plt+0x6b9c>
   17f08:	ldr	r5, [sp, #68]	; 0x44
   17f0c:	add	r5, r0, r5
   17f10:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17f14:	bl	11170 <iswprint@plt>
   17f18:	cmp	r0, #0
   17f1c:	sub	r4, fp, #40	; 0x28
   17f20:	movwne	r0, #1
   17f24:	and	r8, r8, r0
   17f28:	mov	r0, r4
   17f2c:	bl	11134 <mbsinit@plt>
   17f30:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17f34:	mov	r3, r4
   17f38:	cmp	r0, #0
   17f3c:	bne	181fc <__assert_fail@plt+0x6e58>
   17f40:	str	r5, [sp, #68]	; 0x44
   17f44:	add	r5, r5, sl
   17f48:	sub	r0, fp, #44	; 0x2c
   17f4c:	add	r1, lr, r5
   17f50:	sub	r2, r7, r5
   17f54:	bl	1a398 <__assert_fail@plt+0x8ff4>
   17f58:	cmn	r0, #2
   17f5c:	beq	181bc <__assert_fail@plt+0x6e18>
   17f60:	ldr	ip, [fp, #-84]	; 0xffffffac
   17f64:	cmn	r0, #1
   17f68:	beq	181b0 <__assert_fail@plt+0x6e0c>
   17f6c:	cmp	r0, #0
   17f70:	beq	181b4 <__assert_fail@plt+0x6e10>
   17f74:	cmp	r0, #2
   17f78:	bcc	17f08 <__assert_fail@plt+0x6b64>
   17f7c:	ldr	r1, [sp, #68]	; 0x44
   17f80:	ldr	r2, [sp, #24]
   17f84:	add	r1, r2, r1
   17f88:	sub	r2, r0, #1
   17f8c:	ldrb	r3, [r1]
   17f90:	sub	r3, r3, #91	; 0x5b
   17f94:	cmp	r3, #33	; 0x21
   17f98:	bls	17fb8 <__assert_fail@plt+0x6c14>
   17f9c:	add	r1, r1, #1
   17fa0:	subs	r2, r2, #1
   17fa4:	beq	17f08 <__assert_fail@plt+0x6b64>
   17fa8:	ldrb	r3, [r1]
   17fac:	sub	r3, r3, #91	; 0x5b
   17fb0:	cmp	r3, #33	; 0x21
   17fb4:	bhi	17f9c <__assert_fail@plt+0x6bf8>
   17fb8:	add	r5, pc, #0
   17fbc:	ldr	pc, [r5, r3, lsl #2]
   17fc0:	ldrdeq	r8, [r1], -r4
   17fc4:	ldrdeq	r8, [r1], -r4
   17fc8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17fcc:	ldrdeq	r8, [r1], -r4
   17fd0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17fd4:	ldrdeq	r8, [r1], -r4
   17fd8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17fdc:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17fe0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17fe4:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17fe8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17fec:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17ff0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17ff4:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17ff8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17ffc:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18000:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18004:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18008:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1800c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18010:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18014:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18018:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1801c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18020:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18024:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18028:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1802c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18030:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18034:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18038:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1803c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18040:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18044:	ldrdeq	r8, [r1], -r4
   18048:	mov	r9, r0
   1804c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18050:	tst	r0, #1
   18054:	beq	17a6c <__assert_fail@plt+0x66c8>
   18058:	b	17d20 <__assert_fail@plt+0x697c>
   1805c:	mov	r0, #0
   18060:	str	r0, [fp, #-56]	; 0xffffffc8
   18064:	ldr	r0, [sp, #32]
   18068:	cmp	r0, #0
   1806c:	beq	18124 <__assert_fail@plt+0x6d80>
   18070:	add	r0, sl, #2
   18074:	mov	r1, r7
   18078:	cmp	r0, r7
   1807c:	bcs	18124 <__assert_fail@plt+0x6d80>
   18080:	add	r1, sl, lr
   18084:	ldrb	r1, [r1, #1]
   18088:	cmp	r1, #63	; 0x3f
   1808c:	bne	18124 <__assert_fail@plt+0x6d80>
   18090:	ldrb	r8, [lr, r0]
   18094:	sub	r2, r8, #33	; 0x21
   18098:	cmp	r2, #29
   1809c:	bhi	18124 <__assert_fail@plt+0x6d80>
   180a0:	mov	r1, r4
   180a4:	movw	r4, #20929	; 0x51c1
   180a8:	mov	r3, #1
   180ac:	movt	r4, #14336	; 0x3800
   180b0:	tst	r4, r3, lsl r2
   180b4:	beq	183e0 <__assert_fail@plt+0x703c>
   180b8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   180bc:	tst	r2, #1
   180c0:	bne	1849c <__assert_fail@plt+0x70f8>
   180c4:	cmp	r9, r5
   180c8:	mov	r6, r8
   180cc:	mov	r4, r1
   180d0:	mov	sl, r0
   180d4:	mov	r8, #0
   180d8:	movcc	r2, #63	; 0x3f
   180dc:	strbcc	r2, [ip, r9]
   180e0:	add	r2, r9, #1
   180e4:	cmp	r2, r5
   180e8:	movcc	r3, #34	; 0x22
   180ec:	strbcc	r3, [ip, r2]
   180f0:	add	r2, r9, #2
   180f4:	cmp	r2, r5
   180f8:	movcc	r3, #34	; 0x22
   180fc:	strbcc	r3, [ip, r2]
   18100:	add	r2, r9, #3
   18104:	add	r9, r9, #4
   18108:	cmp	r2, r5
   1810c:	movcc	r3, #63	; 0x3f
   18110:	strbcc	r3, [ip, r2]
   18114:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18118:	tst	r0, #1
   1811c:	beq	17a6c <__assert_fail@plt+0x66c8>
   18120:	b	17d20 <__assert_fail@plt+0x697c>
   18124:	mov	r8, #0
   18128:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1812c:	tst	r0, #1
   18130:	beq	17a6c <__assert_fail@plt+0x66c8>
   18134:	b	17d20 <__assert_fail@plt+0x697c>
   18138:	mov	r8, #1
   1813c:	mov	r5, #0
   18140:	sub	r4, fp, #40	; 0x28
   18144:	str	r5, [sp, #68]	; 0x44
   18148:	add	r5, r5, sl
   1814c:	sub	r0, fp, #44	; 0x2c
   18150:	mov	r3, r4
   18154:	add	r1, lr, r5
   18158:	sub	r2, r7, r5
   1815c:	bl	1a398 <__assert_fail@plt+0x8ff4>
   18160:	cmn	r0, #2
   18164:	beq	181bc <__assert_fail@plt+0x6e18>
   18168:	cmn	r0, #1
   1816c:	beq	181b0 <__assert_fail@plt+0x6e0c>
   18170:	ldr	r5, [sp, #68]	; 0x44
   18174:	cmp	r0, #0
   18178:	beq	181f8 <__assert_fail@plt+0x6e54>
   1817c:	add	r5, r0, r5
   18180:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18184:	bl	11170 <iswprint@plt>
   18188:	cmp	r0, #0
   1818c:	sub	r4, fp, #40	; 0x28
   18190:	movwne	r0, #1
   18194:	and	r8, r8, r0
   18198:	mov	r0, r4
   1819c:	bl	11134 <mbsinit@plt>
   181a0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   181a4:	cmp	r0, #0
   181a8:	beq	18144 <__assert_fail@plt+0x6da0>
   181ac:	b	181fc <__assert_fail@plt+0x6e58>
   181b0:	mov	r8, #0
   181b4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   181b8:	b	181f0 <__assert_fail@plt+0x6e4c>
   181bc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   181c0:	mov	r8, #0
   181c4:	cmp	r5, r7
   181c8:	bcs	181f0 <__assert_fail@plt+0x6e4c>
   181cc:	ldrb	r0, [lr, r5]
   181d0:	cmp	r0, #0
   181d4:	beq	181f0 <__assert_fail@plt+0x6e4c>
   181d8:	ldr	r0, [sp, #68]	; 0x44
   181dc:	add	r0, r0, #1
   181e0:	add	r5, r0, sl
   181e4:	str	r0, [sp, #68]	; 0x44
   181e8:	cmp	r5, r7
   181ec:	bcc	181cc <__assert_fail@plt+0x6e28>
   181f0:	ldr	r5, [sp, #68]	; 0x44
   181f4:	b	181fc <__assert_fail@plt+0x6e58>
   181f8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   181fc:	mov	r1, r5
   18200:	ldr	r5, [sp, #28]
   18204:	ldr	r4, [sp, #84]	; 0x54
   18208:	ldr	r0, [sp, #52]	; 0x34
   1820c:	ldr	ip, [fp, #-84]	; 0xffffffac
   18210:	cmp	r1, #1
   18214:	orr	r2, r8, r0
   18218:	mov	r0, r1
   1821c:	bhi	18228 <__assert_fail@plt+0x6e84>
   18220:	tst	r2, #1
   18224:	bne	17a60 <__assert_fail@plt+0x66bc>
   18228:	add	r0, r0, sl
   1822c:	str	r2, [sp, #84]	; 0x54
   18230:	str	r0, [fp, #-56]	; 0xffffffc8
   18234:	mov	r0, #0
   18238:	tst	r2, #1
   1823c:	bne	1831c <__assert_fail@plt+0x6f78>
   18240:	ldr	r1, [fp, #-76]	; 0xffffffb4
   18244:	tst	r1, #1
   18248:	bne	1849c <__assert_fail@plt+0x70f8>
   1824c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18250:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18254:	subs	r2, r1, #2
   18258:	movwne	r2, #1
   1825c:	orr	r2, r2, r0
   18260:	tst	r2, #1
   18264:	bne	182a0 <__assert_fail@plt+0x6efc>
   18268:	cmp	r9, r5
   1826c:	add	r2, r9, #1
   18270:	mov	r0, #1
   18274:	movcc	r1, #39	; 0x27
   18278:	str	r0, [fp, #-52]	; 0xffffffcc
   1827c:	strbcc	r1, [ip, r9]
   18280:	cmp	r2, r5
   18284:	movcc	r1, #36	; 0x24
   18288:	strbcc	r1, [ip, r2]
   1828c:	add	r2, r9, #2
   18290:	add	r9, r9, #3
   18294:	cmp	r2, r5
   18298:	movcc	r1, #39	; 0x27
   1829c:	strbcc	r1, [ip, r2]
   182a0:	cmp	r9, r5
   182a4:	add	r2, r9, #1
   182a8:	movcc	r1, #92	; 0x5c
   182ac:	strbcc	r1, [ip, r9]
   182b0:	cmp	r2, r5
   182b4:	bcs	182c8 <__assert_fail@plt+0x6f24>
   182b8:	uxtb	r3, r6
   182bc:	mov	r1, #48	; 0x30
   182c0:	orr	r3, r1, r3, lsr #6
   182c4:	strb	r3, [ip, r2]
   182c8:	add	r2, r9, #2
   182cc:	add	r9, r9, #3
   182d0:	cmp	r2, r5
   182d4:	lsrcc	r3, r6, #3
   182d8:	movcc	r1, #6
   182dc:	bficc	r3, r1, #3, #29
   182e0:	mov	r1, #6
   182e4:	bfi	r6, r1, #3, #29
   182e8:	strbcc	r3, [ip, r2]
   182ec:	mov	r2, #1
   182f0:	b	18350 <__assert_fail@plt+0x6fac>
   182f4:	ldr	r1, [sp, #80]	; 0x50
   182f8:	cmp	r9, r2
   182fc:	mov	r5, r2
   18300:	ldr	r2, [sp, #84]	; 0x54
   18304:	strbcc	r6, [ip, r9]
   18308:	add	r9, r9, #1
   1830c:	ldrb	r6, [r1, sl]
   18310:	mov	sl, r3
   18314:	tst	r2, #1
   18318:	beq	18240 <__assert_fail@plt+0x6e9c>
   1831c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   18320:	tst	r1, #1
   18324:	beq	18344 <__assert_fail@plt+0x6fa0>
   18328:	cmp	r9, r5
   1832c:	mov	r2, r0
   18330:	movcc	r1, #92	; 0x5c
   18334:	strbcc	r1, [ip, r9]
   18338:	add	r9, r9, #1
   1833c:	mov	r1, #0
   18340:	b	1834c <__assert_fail@plt+0x6fa8>
   18344:	mov	r1, #0
   18348:	mov	r2, r0
   1834c:	str	r1, [fp, #-48]	; 0xffffffd0
   18350:	mov	r0, r2
   18354:	and	r1, r2, #1
   18358:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1835c:	add	r3, sl, #1
   18360:	cmp	r2, r3
   18364:	bls	183c4 <__assert_fail@plt+0x7020>
   18368:	mov	r2, r5
   1836c:	ldr	r5, [fp, #-52]	; 0xffffffcc
   18370:	cmp	r1, #0
   18374:	movwne	r1, #1
   18378:	mvn	r5, r5
   1837c:	orr	r5, r5, r1
   18380:	tst	r5, #1
   18384:	bne	182f4 <__assert_fail@plt+0x6f50>
   18388:	cmp	r9, r2
   1838c:	movcc	r5, r4
   18390:	movcc	r4, #39	; 0x27
   18394:	strbcc	r4, [ip, r9]
   18398:	movcc	r4, r5
   1839c:	add	r5, r9, #1
   183a0:	add	r9, r9, #2
   183a4:	cmp	r5, r2
   183a8:	movcc	r1, r4
   183ac:	movcc	r4, #39	; 0x27
   183b0:	strbcc	r4, [ip, r5]
   183b4:	movcc	r4, r1
   183b8:	mov	r1, #0
   183bc:	str	r1, [fp, #-52]	; 0xffffffcc
   183c0:	b	182f4 <__assert_fail@plt+0x6f50>
   183c4:	cmp	r1, #0
   183c8:	movwne	r1, #1
   183cc:	str	r1, [fp, #-56]	; 0xffffffc8
   183d0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   183d4:	cmp	r0, #0
   183d8:	beq	17e00 <__assert_fail@plt+0x6a5c>
   183dc:	b	17e34 <__assert_fail@plt+0x6a90>
   183e0:	mov	r8, #0
   183e4:	mov	r4, r1
   183e8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   183ec:	tst	r0, #1
   183f0:	beq	17a6c <__assert_fail@plt+0x66c8>
   183f4:	b	17d20 <__assert_fail@plt+0x697c>
   183f8:	mov	r7, sl
   183fc:	b	18404 <__assert_fail@plt+0x7060>
   18400:	mvn	r7, #0
   18404:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18408:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1840c:	ldr	r2, [sp, #88]	; 0x58
   18410:	eor	r0, r1, #2
   18414:	orr	r0, r0, r9
   18418:	clz	r0, r0
   1841c:	lsr	r0, r0, #5
   18420:	tst	r3, r0
   18424:	bne	1849c <__assert_fail@plt+0x70f8>
   18428:	subs	r0, r1, #2
   1842c:	movwne	r0, #1
   18430:	orr	r0, r3, r0
   18434:	tst	r0, #1
   18438:	ldreq	r0, [sp, #60]	; 0x3c
   1843c:	eoreq	r0, r0, #1
   18440:	tsteq	r0, #1
   18444:	bne	18578 <__assert_fail@plt+0x71d4>
   18448:	tst	r4, #1
   1844c:	bne	1853c <__assert_fail@plt+0x7198>
   18450:	ldr	r6, [sp, #56]	; 0x38
   18454:	mov	r8, #0
   18458:	cmp	r6, #0
   1845c:	beq	18574 <__assert_fail@plt+0x71d0>
   18460:	mov	r1, #0
   18464:	mov	r4, #2
   18468:	cmp	r5, #0
   1846c:	mov	r0, r2
   18470:	mov	r3, #0
   18474:	str	r1, [sp, #84]	; 0x54
   18478:	beq	172c0 <__assert_fail@plt+0x5f1c>
   1847c:	b	18578 <__assert_fail@plt+0x71d4>
   18480:	movw	r0, #45806	; 0xb2ee
   18484:	movt	r0, #1
   18488:	str	r0, [sp, #76]	; 0x4c
   1848c:	mov	r9, #0
   18490:	tst	r8, #1
   18494:	beq	17558 <__assert_fail@plt+0x61b4>
   18498:	b	17698 <__assert_fail@plt+0x62f4>
   1849c:	ldr	r1, [sp, #88]	; 0x58
   184a0:	mov	r0, #2
   184a4:	tst	r1, #1
   184a8:	movwne	r0, #4
   184ac:	ldr	r2, [fp, #-64]	; 0xffffffc0
   184b0:	ldr	r1, [fp, #12]
   184b4:	cmp	r2, #2
   184b8:	moveq	r2, r0
   184bc:	b	184f4 <__assert_fail@plt+0x7150>
   184c0:	ldr	ip, [fp, #-84]	; 0xffffffac
   184c4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   184c8:	ldr	r1, [fp, #12]
   184cc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   184d0:	b	184f4 <__assert_fail@plt+0x7150>
   184d4:	ldr	r1, [sp, #88]	; 0x58
   184d8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   184dc:	ldr	r5, [sp, #28]
   184e0:	mov	r0, #2
   184e4:	tst	r1, #1
   184e8:	ldr	r1, [fp, #12]
   184ec:	movwne	r0, #4
   184f0:	mov	r2, r0
   184f4:	mov	r0, #0
   184f8:	bic	r1, r1, #2
   184fc:	str	r2, [sp]
   18500:	mov	r2, lr
   18504:	str	r0, [sp, #8]
   18508:	ldr	r0, [sp, #72]	; 0x48
   1850c:	str	r1, [sp, #4]
   18510:	mov	r1, r5
   18514:	str	r0, [sp, #12]
   18518:	ldr	r0, [sp, #76]	; 0x4c
   1851c:	str	r0, [sp, #16]
   18520:	mov	r0, ip
   18524:	mov	r3, r7
   18528:	bl	17234 <__assert_fail@plt+0x5e90>
   1852c:	mov	r9, r0
   18530:	mov	r0, r9
   18534:	sub	sp, fp, #28
   18538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1853c:	mov	r0, #5
   18540:	ldr	r1, [sp, #56]	; 0x38
   18544:	ldr	r2, [fp, #-80]	; 0xffffffb0
   18548:	str	r0, [sp]
   1854c:	ldr	r0, [fp, #12]
   18550:	str	r0, [sp, #4]
   18554:	ldr	r0, [fp, #16]
   18558:	str	r0, [sp, #8]
   1855c:	ldr	r0, [sp, #72]	; 0x48
   18560:	str	r0, [sp, #12]
   18564:	ldr	r0, [sp, #76]	; 0x4c
   18568:	str	r0, [sp, #16]
   1856c:	ldr	r0, [fp, #-84]	; 0xffffffac
   18570:	b	18524 <__assert_fail@plt+0x7180>
   18574:	mov	r3, #0
   18578:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1857c:	cmp	r1, #0
   18580:	beq	185bc <__assert_fail@plt+0x7218>
   18584:	ldr	r2, [fp, #-84]	; 0xffffffac
   18588:	tst	r3, #1
   1858c:	bne	185c0 <__assert_fail@plt+0x721c>
   18590:	ldrb	r0, [r1]
   18594:	cmp	r0, #0
   18598:	beq	185c0 <__assert_fail@plt+0x721c>
   1859c:	add	r1, r1, #1
   185a0:	cmp	r9, r5
   185a4:	strbcc	r0, [r2, r9]
   185a8:	add	r9, r9, #1
   185ac:	ldrb	r0, [r1], #1
   185b0:	cmp	r0, #0
   185b4:	bne	185a0 <__assert_fail@plt+0x71fc>
   185b8:	b	185c0 <__assert_fail@plt+0x721c>
   185bc:	ldr	r2, [fp, #-84]	; 0xffffffac
   185c0:	cmp	r9, r5
   185c4:	movcc	r0, #0
   185c8:	strbcc	r0, [r2, r9]
   185cc:	mov	r0, r9
   185d0:	sub	sp, fp, #28
   185d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185d8:	mov	r0, #4
   185dc:	b	184ac <__assert_fail@plt+0x7108>
   185e0:	bl	11374 <abort@plt>
   185e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185e8:	add	fp, sp, #28
   185ec:	sub	sp, sp, #28
   185f0:	movw	r5, #49592	; 0xc1b8
   185f4:	cmp	r2, #0
   185f8:	mov	r4, r1
   185fc:	mov	r7, r0
   18600:	str	r0, [sp, #20]
   18604:	movt	r5, #2
   18608:	movne	r5, r2
   1860c:	bl	11260 <__errno_location@plt>
   18610:	mov	sl, r0
   18614:	ldr	r2, [r5, #40]	; 0x28
   18618:	ldr	r3, [r5, #44]	; 0x2c
   1861c:	ldm	r5, {r0, r1}
   18620:	orr	r8, r1, #1
   18624:	add	r9, r5, #8
   18628:	mov	r1, #0
   1862c:	ldr	r6, [sl]
   18630:	stm	sp, {r0, r8, r9}
   18634:	mov	r0, #0
   18638:	str	r2, [sp, #12]
   1863c:	str	r3, [sp, #16]
   18640:	mov	r2, r7
   18644:	mov	r3, r4
   18648:	str	r6, [sp, #24]
   1864c:	mov	r6, r4
   18650:	bl	17234 <__assert_fail@plt+0x5e90>
   18654:	add	r7, r0, #1
   18658:	mov	r0, r7
   1865c:	bl	19764 <__assert_fail@plt+0x83c0>
   18660:	mov	r4, r0
   18664:	ldr	r0, [r5]
   18668:	ldr	r2, [r5, #44]	; 0x2c
   1866c:	ldr	r1, [r5, #40]	; 0x28
   18670:	mov	r3, r6
   18674:	stm	sp, {r0, r8, r9}
   18678:	str	r2, [sp, #16]
   1867c:	ldr	r2, [sp, #20]
   18680:	str	r1, [sp, #12]
   18684:	mov	r0, r4
   18688:	mov	r1, r7
   1868c:	bl	17234 <__assert_fail@plt+0x5e90>
   18690:	ldr	r0, [sp, #24]
   18694:	str	r0, [sl]
   18698:	mov	r0, r4
   1869c:	sub	sp, fp, #28
   186a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186a8:	add	fp, sp, #28
   186ac:	sub	sp, sp, #36	; 0x24
   186b0:	movw	r8, #49592	; 0xc1b8
   186b4:	cmp	r3, #0
   186b8:	mov	r4, r2
   186bc:	str	r2, [sp, #24]
   186c0:	mov	r5, r1
   186c4:	mov	r6, r0
   186c8:	str	r0, [sp, #20]
   186cc:	movt	r8, #2
   186d0:	movne	r8, r3
   186d4:	bl	11260 <__errno_location@plt>
   186d8:	str	r0, [sp, #28]
   186dc:	ldr	r1, [r8, #40]	; 0x28
   186e0:	ldr	r2, [r8, #44]	; 0x2c
   186e4:	ldr	r7, [r0]
   186e8:	cmp	r4, #0
   186ec:	add	sl, r8, #8
   186f0:	mov	r0, #0
   186f4:	ldm	r8, {r3, r9}
   186f8:	orreq	r9, r9, #1
   186fc:	stm	sp, {r3, r9, sl}
   18700:	str	r1, [sp, #12]
   18704:	str	r2, [sp, #16]
   18708:	mov	r1, #0
   1870c:	mov	r2, r6
   18710:	mov	r3, r5
   18714:	str	r7, [sp, #32]
   18718:	mov	r7, r5
   1871c:	bl	17234 <__assert_fail@plt+0x5e90>
   18720:	add	r4, r0, #1
   18724:	mov	r5, r0
   18728:	mov	r0, r4
   1872c:	bl	19764 <__assert_fail@plt+0x83c0>
   18730:	mov	r6, r0
   18734:	ldr	r0, [r8]
   18738:	ldr	r2, [r8, #44]	; 0x2c
   1873c:	ldr	r1, [r8, #40]	; 0x28
   18740:	mov	r3, r7
   18744:	stm	sp, {r0, r9, sl}
   18748:	str	r2, [sp, #16]
   1874c:	ldr	r2, [sp, #20]
   18750:	str	r1, [sp, #12]
   18754:	mov	r0, r6
   18758:	mov	r1, r4
   1875c:	bl	17234 <__assert_fail@plt+0x5e90>
   18760:	ldr	r0, [sp, #24]
   18764:	ldr	r1, [sp, #32]
   18768:	ldr	r2, [sp, #28]
   1876c:	cmp	r0, #0
   18770:	str	r1, [r2]
   18774:	strne	r5, [r0]
   18778:	mov	r0, r6
   1877c:	sub	sp, fp, #28
   18780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18784:	push	{r4, r5, r6, r7, fp, lr}
   18788:	add	fp, sp, #16
   1878c:	movw	r4, #49496	; 0xc158
   18790:	movt	r4, #2
   18794:	ldrd	r6, [r4]
   18798:	cmp	r7, #2
   1879c:	blt	187c8 <__assert_fail@plt+0x7424>
   187a0:	add	r5, r6, #12
   187a4:	mov	r7, #0
   187a8:	ldr	r0, [r5, r7, lsl #3]
   187ac:	bl	1a290 <__assert_fail@plt+0x8eec>
   187b0:	ldr	r1, [r4, #4]
   187b4:	add	r2, r7, #2
   187b8:	add	r0, r7, #1
   187bc:	mov	r7, r0
   187c0:	cmp	r2, r1
   187c4:	blt	187a8 <__assert_fail@plt+0x7404>
   187c8:	ldr	r0, [r6, #4]
   187cc:	movw	r5, #49640	; 0xc1e8
   187d0:	movt	r5, #2
   187d4:	cmp	r0, r5
   187d8:	beq	187ec <__assert_fail@plt+0x7448>
   187dc:	bl	1a290 <__assert_fail@plt+0x8eec>
   187e0:	mov	r0, #256	; 0x100
   187e4:	str	r0, [r4, #8]
   187e8:	str	r5, [r4, #12]
   187ec:	add	r5, r4, #8
   187f0:	cmp	r6, r5
   187f4:	beq	18804 <__assert_fail@plt+0x7460>
   187f8:	mov	r0, r6
   187fc:	bl	1a290 <__assert_fail@plt+0x8eec>
   18800:	str	r5, [r4]
   18804:	mov	r0, #1
   18808:	str	r0, [r4, #4]
   1880c:	pop	{r4, r5, r6, r7, fp, pc}
   18810:	movw	r3, #49592	; 0xc1b8
   18814:	mvn	r2, #0
   18818:	movt	r3, #2
   1881c:	b	18820 <__assert_fail@plt+0x747c>
   18820:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18824:	add	fp, sp, #28
   18828:	sub	sp, sp, #44	; 0x2c
   1882c:	mov	r7, r3
   18830:	str	r2, [sp, #36]	; 0x24
   18834:	str	r1, [sp, #32]
   18838:	mov	r5, r0
   1883c:	bl	11260 <__errno_location@plt>
   18840:	cmp	r5, #0
   18844:	bmi	189ac <__assert_fail@plt+0x7608>
   18848:	cmn	r5, #-2147483647	; 0x80000001
   1884c:	beq	189ac <__assert_fail@plt+0x7608>
   18850:	movw	r8, #49496	; 0xc158
   18854:	mov	r4, r0
   18858:	ldr	r0, [r0]
   1885c:	movt	r8, #2
   18860:	str	r4, [sp, #28]
   18864:	ldr	r1, [r8, #4]
   18868:	ldr	r6, [r8]
   1886c:	str	r0, [sp, #24]
   18870:	cmp	r1, r5
   18874:	ble	18880 <__assert_fail@plt+0x74dc>
   18878:	mov	sl, r6
   1887c:	b	188e8 <__assert_fail@plt+0x7544>
   18880:	mov	r0, #8
   18884:	add	r9, r8, #8
   18888:	str	r1, [fp, #-32]	; 0xffffffe0
   1888c:	sub	r1, r5, r1
   18890:	mvn	r3, #-2147483648	; 0x80000000
   18894:	str	r0, [sp]
   18898:	subs	r0, r6, r9
   1889c:	add	r2, r1, #1
   188a0:	sub	r1, fp, #32
   188a4:	movne	r0, r6
   188a8:	bl	19964 <__assert_fail@plt+0x85c0>
   188ac:	mov	sl, r0
   188b0:	cmp	r6, r9
   188b4:	str	r0, [r8]
   188b8:	bne	188c4 <__assert_fail@plt+0x7520>
   188bc:	ldrd	r0, [r8, #8]
   188c0:	stm	sl, {r0, r1}
   188c4:	ldr	r1, [r8, #4]
   188c8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   188cc:	add	r0, sl, r1, lsl #3
   188d0:	sub	r1, r2, r1
   188d4:	lsl	r2, r1, #3
   188d8:	mov	r1, #0
   188dc:	bl	11284 <memset@plt>
   188e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   188e4:	str	r0, [r8, #4]
   188e8:	mov	r9, sl
   188ec:	ldm	r7, {r0, r1}
   188f0:	orr	r8, r1, #1
   188f4:	add	r1, r7, #8
   188f8:	ldr	r2, [r7, #40]	; 0x28
   188fc:	ldr	r3, [r7, #44]	; 0x2c
   18900:	ldr	r6, [r9, r5, lsl #3]!
   18904:	str	r1, [sp, #20]
   18908:	ldr	r4, [r9, #4]!
   1890c:	stm	sp, {r0, r8}
   18910:	add	r0, sp, #8
   18914:	stm	r0, {r1, r2, r3}
   18918:	ldr	r2, [sp, #32]
   1891c:	ldr	r3, [sp, #36]	; 0x24
   18920:	mov	r1, r6
   18924:	mov	r0, r4
   18928:	bl	17234 <__assert_fail@plt+0x5e90>
   1892c:	cmp	r6, r0
   18930:	bhi	18994 <__assert_fail@plt+0x75f0>
   18934:	add	r6, r0, #1
   18938:	movw	r0, #49640	; 0xc1e8
   1893c:	movt	r0, #2
   18940:	str	r6, [sl, r5, lsl #3]
   18944:	cmp	r4, r0
   18948:	beq	18954 <__assert_fail@plt+0x75b0>
   1894c:	mov	r0, r4
   18950:	bl	1a290 <__assert_fail@plt+0x8eec>
   18954:	mov	r0, r6
   18958:	bl	19764 <__assert_fail@plt+0x83c0>
   1895c:	str	r0, [r9]
   18960:	mov	r4, r0
   18964:	add	r3, sp, #8
   18968:	ldr	r0, [r7]
   1896c:	ldr	r1, [r7, #40]	; 0x28
   18970:	ldr	r2, [r7, #44]	; 0x2c
   18974:	stm	sp, {r0, r8}
   18978:	ldr	r0, [sp, #20]
   1897c:	stm	r3, {r0, r1, r2}
   18980:	ldr	r2, [sp, #32]
   18984:	ldr	r3, [sp, #36]	; 0x24
   18988:	mov	r0, r4
   1898c:	mov	r1, r6
   18990:	bl	17234 <__assert_fail@plt+0x5e90>
   18994:	ldr	r1, [sp, #24]
   18998:	ldr	r0, [sp, #28]
   1899c:	str	r1, [r0]
   189a0:	mov	r0, r4
   189a4:	sub	sp, fp, #28
   189a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189ac:	bl	11374 <abort@plt>
   189b0:	movw	r3, #49592	; 0xc1b8
   189b4:	movt	r3, #2
   189b8:	b	18820 <__assert_fail@plt+0x747c>
   189bc:	movw	r3, #49592	; 0xc1b8
   189c0:	mov	r1, r0
   189c4:	mov	r0, #0
   189c8:	mvn	r2, #0
   189cc:	movt	r3, #2
   189d0:	b	18820 <__assert_fail@plt+0x747c>
   189d4:	movw	r3, #49592	; 0xc1b8
   189d8:	mov	r2, r1
   189dc:	mov	r1, r0
   189e0:	mov	r0, #0
   189e4:	movt	r3, #2
   189e8:	b	18820 <__assert_fail@plt+0x747c>
   189ec:	push	{fp, lr}
   189f0:	mov	fp, sp
   189f4:	sub	sp, sp, #48	; 0x30
   189f8:	vmov.i32	q8, #0	; 0x00000000
   189fc:	mov	ip, #32
   18a00:	mov	r3, sp
   18a04:	mov	lr, r2
   18a08:	cmp	r1, #10
   18a0c:	add	r2, r3, #16
   18a10:	vst1.64	{d16-d17}, [r3], ip
   18a14:	vst1.64	{d16-d17}, [r2]
   18a18:	vst1.64	{d16-d17}, [r3]
   18a1c:	beq	18a3c <__assert_fail@plt+0x7698>
   18a20:	str	r1, [sp]
   18a24:	mov	r3, sp
   18a28:	mov	r1, lr
   18a2c:	mvn	r2, #0
   18a30:	bl	18820 <__assert_fail@plt+0x747c>
   18a34:	mov	sp, fp
   18a38:	pop	{fp, pc}
   18a3c:	bl	11374 <abort@plt>
   18a40:	push	{r4, sl, fp, lr}
   18a44:	add	fp, sp, #8
   18a48:	sub	sp, sp, #48	; 0x30
   18a4c:	vmov.i32	q8, #0	; 0x00000000
   18a50:	mov	ip, r3
   18a54:	mov	r3, sp
   18a58:	mov	lr, #32
   18a5c:	cmp	r1, #10
   18a60:	add	r4, r3, #16
   18a64:	vst1.64	{d16-d17}, [r3], lr
   18a68:	vst1.64	{d16-d17}, [r4]
   18a6c:	vst1.64	{d16-d17}, [r3]
   18a70:	beq	18a90 <__assert_fail@plt+0x76ec>
   18a74:	str	r1, [sp]
   18a78:	mov	r1, r2
   18a7c:	mov	r3, sp
   18a80:	mov	r2, ip
   18a84:	bl	18820 <__assert_fail@plt+0x747c>
   18a88:	sub	sp, fp, #8
   18a8c:	pop	{r4, sl, fp, pc}
   18a90:	bl	11374 <abort@plt>
   18a94:	push	{fp, lr}
   18a98:	mov	fp, sp
   18a9c:	sub	sp, sp, #48	; 0x30
   18aa0:	vmov.i32	q8, #0	; 0x00000000
   18aa4:	mov	r3, sp
   18aa8:	mov	ip, #32
   18aac:	cmp	r0, #10
   18ab0:	add	r2, r3, #16
   18ab4:	vst1.64	{d16-d17}, [r3], ip
   18ab8:	vst1.64	{d16-d17}, [r2]
   18abc:	vst1.64	{d16-d17}, [r3]
   18ac0:	beq	18ae0 <__assert_fail@plt+0x773c>
   18ac4:	str	r0, [sp]
   18ac8:	mov	r3, sp
   18acc:	mov	r0, #0
   18ad0:	mvn	r2, #0
   18ad4:	bl	18820 <__assert_fail@plt+0x747c>
   18ad8:	mov	sp, fp
   18adc:	pop	{fp, pc}
   18ae0:	bl	11374 <abort@plt>
   18ae4:	push	{fp, lr}
   18ae8:	mov	fp, sp
   18aec:	sub	sp, sp, #48	; 0x30
   18af0:	vmov.i32	q8, #0	; 0x00000000
   18af4:	mov	r3, sp
   18af8:	mov	ip, #32
   18afc:	cmp	r0, #10
   18b00:	add	lr, r3, #16
   18b04:	vst1.64	{d16-d17}, [r3], ip
   18b08:	vst1.64	{d16-d17}, [lr]
   18b0c:	vst1.64	{d16-d17}, [r3]
   18b10:	beq	18b2c <__assert_fail@plt+0x7788>
   18b14:	str	r0, [sp]
   18b18:	mov	r3, sp
   18b1c:	mov	r0, #0
   18b20:	bl	18820 <__assert_fail@plt+0x747c>
   18b24:	mov	sp, fp
   18b28:	pop	{fp, pc}
   18b2c:	bl	11374 <abort@plt>
   18b30:	push	{r4, sl, fp, lr}
   18b34:	add	fp, sp, #8
   18b38:	sub	sp, sp, #48	; 0x30
   18b3c:	mov	lr, r0
   18b40:	movw	r0, #49592	; 0xc1b8
   18b44:	mov	ip, r1
   18b48:	mov	r1, #32
   18b4c:	mov	r4, #1
   18b50:	movt	r0, #2
   18b54:	add	r3, r0, #16
   18b58:	vld1.64	{d16-d17}, [r0], r1
   18b5c:	vld1.64	{d20-d21}, [r0]
   18b60:	vld1.64	{d18-d19}, [r3]
   18b64:	mov	r3, sp
   18b68:	add	r0, r3, #32
   18b6c:	add	r1, r3, #16
   18b70:	vst1.64	{d20-d21}, [r0]
   18b74:	mov	r0, #28
   18b78:	vst1.64	{d18-d19}, [r1]
   18b7c:	mov	r1, r3
   18b80:	and	r0, r0, r2, lsr #3
   18b84:	and	r2, r2, #31
   18b88:	vst1.64	{d16-d17}, [r1], r0
   18b8c:	ldr	r0, [r1, #8]
   18b90:	bic	r4, r4, r0, lsr r2
   18b94:	eor	r0, r0, r4, lsl r2
   18b98:	mov	r2, ip
   18b9c:	str	r0, [r1, #8]
   18ba0:	mov	r0, #0
   18ba4:	mov	r1, lr
   18ba8:	bl	18820 <__assert_fail@plt+0x747c>
   18bac:	sub	sp, fp, #8
   18bb0:	pop	{r4, sl, fp, pc}
   18bb4:	push	{fp, lr}
   18bb8:	mov	fp, sp
   18bbc:	sub	sp, sp, #48	; 0x30
   18bc0:	mov	ip, r0
   18bc4:	movw	r0, #49592	; 0xc1b8
   18bc8:	mov	r2, #32
   18bcc:	movt	r0, #2
   18bd0:	add	r3, r0, #16
   18bd4:	vld1.64	{d16-d17}, [r0], r2
   18bd8:	vld1.64	{d20-d21}, [r0]
   18bdc:	vld1.64	{d18-d19}, [r3]
   18be0:	mov	r3, sp
   18be4:	add	r0, r3, #32
   18be8:	add	r2, r3, #16
   18bec:	vst1.64	{d20-d21}, [r0]
   18bf0:	mov	r0, #28
   18bf4:	vst1.64	{d18-d19}, [r2]
   18bf8:	mov	r2, r3
   18bfc:	and	r0, r0, r1, lsr #3
   18c00:	and	r1, r1, #31
   18c04:	vst1.64	{d16-d17}, [r2], r0
   18c08:	mov	r0, #1
   18c0c:	ldr	lr, [r2, #8]
   18c10:	bic	r0, r0, lr, lsr r1
   18c14:	eor	r0, lr, r0, lsl r1
   18c18:	mov	r1, ip
   18c1c:	str	r0, [r2, #8]
   18c20:	mov	r0, #0
   18c24:	mvn	r2, #0
   18c28:	bl	18820 <__assert_fail@plt+0x747c>
   18c2c:	mov	sp, fp
   18c30:	pop	{fp, pc}
   18c34:	push	{fp, lr}
   18c38:	mov	fp, sp
   18c3c:	sub	sp, sp, #48	; 0x30
   18c40:	mov	r1, r0
   18c44:	movw	r0, #49592	; 0xc1b8
   18c48:	mov	r3, #32
   18c4c:	movt	r0, #2
   18c50:	add	r2, r0, #16
   18c54:	vld1.64	{d16-d17}, [r0], r3
   18c58:	mov	r3, sp
   18c5c:	vld1.64	{d18-d19}, [r2]
   18c60:	vld1.64	{d20-d21}, [r0]
   18c64:	add	r2, r3, #16
   18c68:	add	r0, r3, #32
   18c6c:	vst1.64	{d18-d19}, [r2]
   18c70:	vst1.64	{d20-d21}, [r0]
   18c74:	mov	r0, #12
   18c78:	mov	r2, r3
   18c7c:	vst1.64	{d16-d17}, [r2], r0
   18c80:	ldr	r0, [r2]
   18c84:	orr	r0, r0, #67108864	; 0x4000000
   18c88:	str	r0, [r2]
   18c8c:	mov	r0, #0
   18c90:	mvn	r2, #0
   18c94:	bl	18820 <__assert_fail@plt+0x747c>
   18c98:	mov	sp, fp
   18c9c:	pop	{fp, pc}
   18ca0:	push	{fp, lr}
   18ca4:	mov	fp, sp
   18ca8:	sub	sp, sp, #48	; 0x30
   18cac:	mov	ip, r1
   18cb0:	mov	r1, r0
   18cb4:	movw	r0, #49592	; 0xc1b8
   18cb8:	mov	r2, #32
   18cbc:	movt	r0, #2
   18cc0:	add	r3, r0, #16
   18cc4:	vld1.64	{d16-d17}, [r0], r2
   18cc8:	vld1.64	{d18-d19}, [r3]
   18ccc:	vld1.64	{d20-d21}, [r0]
   18cd0:	mov	r3, sp
   18cd4:	add	r2, r3, #16
   18cd8:	add	r0, r3, #32
   18cdc:	vst1.64	{d18-d19}, [r2]
   18ce0:	vst1.64	{d20-d21}, [r0]
   18ce4:	mov	r0, #12
   18ce8:	mov	r2, r3
   18cec:	vst1.64	{d16-d17}, [r2], r0
   18cf0:	ldr	r0, [r2]
   18cf4:	orr	r0, r0, #67108864	; 0x4000000
   18cf8:	str	r0, [r2]
   18cfc:	mov	r0, #0
   18d00:	mov	r2, ip
   18d04:	bl	18820 <__assert_fail@plt+0x747c>
   18d08:	mov	sp, fp
   18d0c:	pop	{fp, pc}
   18d10:	push	{r4, sl, fp, lr}
   18d14:	add	fp, sp, #8
   18d18:	sub	sp, sp, #96	; 0x60
   18d1c:	vmov.i32	q8, #0	; 0x00000000
   18d20:	mov	ip, r2
   18d24:	mov	r2, sp
   18d28:	mov	r4, #28
   18d2c:	cmp	r1, #10
   18d30:	mov	r3, r2
   18d34:	add	lr, r2, #16
   18d38:	vst1.64	{d16-d17}, [r3], r4
   18d3c:	vst1.64	{d16-d17}, [lr]
   18d40:	vst1.32	{d16-d17}, [r3]
   18d44:	beq	18d94 <__assert_fail@plt+0x79f0>
   18d48:	vld1.64	{d16-d17}, [r2], r4
   18d4c:	vld1.64	{d18-d19}, [lr]
   18d50:	add	r3, sp, #48	; 0x30
   18d54:	vld1.32	{d20-d21}, [r2]
   18d58:	add	r2, r3, #20
   18d5c:	add	r4, r3, #4
   18d60:	vst1.32	{d18-d19}, [r2]
   18d64:	add	r2, r3, #32
   18d68:	vst1.32	{d16-d17}, [r4]
   18d6c:	vst1.32	{d20-d21}, [r2]
   18d70:	str	r1, [sp, #48]	; 0x30
   18d74:	mvn	r2, #0
   18d78:	ldr	r1, [sp, #60]	; 0x3c
   18d7c:	orr	r1, r1, #67108864	; 0x4000000
   18d80:	str	r1, [sp, #60]	; 0x3c
   18d84:	mov	r1, ip
   18d88:	bl	18820 <__assert_fail@plt+0x747c>
   18d8c:	sub	sp, fp, #8
   18d90:	pop	{r4, sl, fp, pc}
   18d94:	bl	11374 <abort@plt>
   18d98:	push	{r4, r5, r6, sl, fp, lr}
   18d9c:	add	fp, sp, #16
   18da0:	sub	sp, sp, #48	; 0x30
   18da4:	mov	ip, r3
   18da8:	movw	r3, #49592	; 0xc1b8
   18dac:	mov	r6, #32
   18db0:	cmp	r1, #0
   18db4:	mov	r4, sp
   18db8:	movt	r3, #2
   18dbc:	cmpne	r2, #0
   18dc0:	add	r5, r4, #16
   18dc4:	add	lr, r3, #16
   18dc8:	vld1.64	{d16-d17}, [r3], r6
   18dcc:	vld1.64	{d18-d19}, [lr]
   18dd0:	vld1.64	{d20-d21}, [r3]
   18dd4:	mov	r3, #10
   18dd8:	vst1.64	{d16-d17}, [r4], r6
   18ddc:	vst1.64	{d18-d19}, [r5]
   18de0:	vst1.64	{d20-d21}, [r4]
   18de4:	str	r3, [sp]
   18de8:	bne	18df0 <__assert_fail@plt+0x7a4c>
   18dec:	bl	11374 <abort@plt>
   18df0:	str	r2, [sp, #44]	; 0x2c
   18df4:	str	r1, [sp, #40]	; 0x28
   18df8:	mov	r3, sp
   18dfc:	mov	r1, ip
   18e00:	mvn	r2, #0
   18e04:	bl	18820 <__assert_fail@plt+0x747c>
   18e08:	sub	sp, fp, #16
   18e0c:	pop	{r4, r5, r6, sl, fp, pc}
   18e10:	push	{r4, r5, r6, sl, fp, lr}
   18e14:	add	fp, sp, #16
   18e18:	sub	sp, sp, #48	; 0x30
   18e1c:	mov	lr, r3
   18e20:	movw	r3, #49592	; 0xc1b8
   18e24:	mov	r6, #32
   18e28:	cmp	r1, #0
   18e2c:	mov	r4, sp
   18e30:	movt	r3, #2
   18e34:	cmpne	r2, #0
   18e38:	add	r5, r4, #16
   18e3c:	add	ip, r3, #16
   18e40:	vld1.64	{d16-d17}, [r3], r6
   18e44:	vld1.64	{d18-d19}, [ip]
   18e48:	vld1.64	{d20-d21}, [r3]
   18e4c:	mov	r3, #10
   18e50:	vst1.64	{d16-d17}, [r4], r6
   18e54:	vst1.64	{d18-d19}, [r5]
   18e58:	vst1.64	{d20-d21}, [r4]
   18e5c:	str	r3, [sp]
   18e60:	bne	18e68 <__assert_fail@plt+0x7ac4>
   18e64:	bl	11374 <abort@plt>
   18e68:	ldr	ip, [fp, #8]
   18e6c:	str	r2, [sp, #44]	; 0x2c
   18e70:	str	r1, [sp, #40]	; 0x28
   18e74:	mov	r3, sp
   18e78:	mov	r1, lr
   18e7c:	mov	r2, ip
   18e80:	bl	18820 <__assert_fail@plt+0x747c>
   18e84:	sub	sp, fp, #16
   18e88:	pop	{r4, r5, r6, sl, fp, pc}
   18e8c:	push	{r4, sl, fp, lr}
   18e90:	add	fp, sp, #8
   18e94:	sub	sp, sp, #48	; 0x30
   18e98:	movw	r3, #49592	; 0xc1b8
   18e9c:	mov	lr, #32
   18ea0:	mov	ip, r2
   18ea4:	cmp	r0, #0
   18ea8:	movt	r3, #2
   18eac:	cmpne	r1, #0
   18eb0:	add	r2, r3, #16
   18eb4:	vld1.64	{d16-d17}, [r3], lr
   18eb8:	vld1.64	{d20-d21}, [r3]
   18ebc:	vld1.64	{d18-d19}, [r2]
   18ec0:	mov	r2, sp
   18ec4:	add	r4, r2, #16
   18ec8:	vst1.64	{d16-d17}, [r2], lr
   18ecc:	vst1.64	{d20-d21}, [r2]
   18ed0:	mov	r2, #10
   18ed4:	vst1.64	{d18-d19}, [r4]
   18ed8:	str	r2, [sp]
   18edc:	bne	18ee4 <__assert_fail@plt+0x7b40>
   18ee0:	bl	11374 <abort@plt>
   18ee4:	str	r1, [sp, #44]	; 0x2c
   18ee8:	str	r0, [sp, #40]	; 0x28
   18eec:	mov	r3, sp
   18ef0:	mov	r0, #0
   18ef4:	mov	r1, ip
   18ef8:	mvn	r2, #0
   18efc:	bl	18820 <__assert_fail@plt+0x747c>
   18f00:	sub	sp, fp, #8
   18f04:	pop	{r4, sl, fp, pc}
   18f08:	push	{r4, r5, fp, lr}
   18f0c:	add	fp, sp, #8
   18f10:	sub	sp, sp, #48	; 0x30
   18f14:	mov	ip, r3
   18f18:	movw	r3, #49592	; 0xc1b8
   18f1c:	mov	r4, #32
   18f20:	mov	lr, r2
   18f24:	cmp	r0, #0
   18f28:	movt	r3, #2
   18f2c:	cmpne	r1, #0
   18f30:	add	r2, r3, #16
   18f34:	vld1.64	{d16-d17}, [r3], r4
   18f38:	vld1.64	{d20-d21}, [r3]
   18f3c:	vld1.64	{d18-d19}, [r2]
   18f40:	mov	r2, sp
   18f44:	add	r5, r2, #16
   18f48:	vst1.64	{d16-d17}, [r2], r4
   18f4c:	vst1.64	{d20-d21}, [r2]
   18f50:	mov	r2, #10
   18f54:	vst1.64	{d18-d19}, [r5]
   18f58:	str	r2, [sp]
   18f5c:	bne	18f64 <__assert_fail@plt+0x7bc0>
   18f60:	bl	11374 <abort@plt>
   18f64:	str	r1, [sp, #44]	; 0x2c
   18f68:	str	r0, [sp, #40]	; 0x28
   18f6c:	mov	r3, sp
   18f70:	mov	r0, #0
   18f74:	mov	r1, lr
   18f78:	mov	r2, ip
   18f7c:	bl	18820 <__assert_fail@plt+0x747c>
   18f80:	sub	sp, fp, #8
   18f84:	pop	{r4, r5, fp, pc}
   18f88:	movw	r3, #49448	; 0xc128
   18f8c:	movt	r3, #2
   18f90:	b	18820 <__assert_fail@plt+0x747c>
   18f94:	movw	r3, #49448	; 0xc128
   18f98:	mov	r2, r1
   18f9c:	mov	r1, r0
   18fa0:	mov	r0, #0
   18fa4:	movt	r3, #2
   18fa8:	b	18820 <__assert_fail@plt+0x747c>
   18fac:	movw	r3, #49448	; 0xc128
   18fb0:	mvn	r2, #0
   18fb4:	movt	r3, #2
   18fb8:	b	18820 <__assert_fail@plt+0x747c>
   18fbc:	movw	r3, #49448	; 0xc128
   18fc0:	mov	r1, r0
   18fc4:	mov	r0, #0
   18fc8:	mvn	r2, #0
   18fcc:	movt	r3, #2
   18fd0:	b	18820 <__assert_fail@plt+0x747c>
   18fd4:	push	{r4, sl, fp, lr}
   18fd8:	add	fp, sp, #8
   18fdc:	sub	sp, sp, #104	; 0x68
   18fe0:	movw	r1, #46631	; 0xb627
   18fe4:	mov	r4, r0
   18fe8:	mov	r2, sp
   18fec:	mov	r0, #3
   18ff0:	movt	r1, #1
   18ff4:	bl	1138c <__lxstat64@plt>
   18ff8:	mov	r1, r0
   18ffc:	mov	r0, #0
   19000:	cmp	r1, #0
   19004:	beq	19010 <__assert_fail@plt+0x7c6c>
   19008:	sub	sp, fp, #8
   1900c:	pop	{r4, sl, fp, pc}
   19010:	ldr	r0, [sp, #96]	; 0x60
   19014:	ldr	r1, [sp, #100]	; 0x64
   19018:	ldm	sp, {r2, r3}
   1901c:	stm	r4, {r0, r1, r2, r3}
   19020:	mov	r0, r4
   19024:	sub	sp, fp, #8
   19028:	pop	{r4, sl, fp, pc}
   1902c:	push	{r4, r5, r6, r7, fp, lr}
   19030:	add	fp, sp, #16
   19034:	mov	r4, r0
   19038:	cmp	r0, #2
   1903c:	bhi	1906c <__assert_fail@plt+0x7cc8>
   19040:	mov	r0, r4
   19044:	bl	1a438 <__assert_fail@plt+0x9094>
   19048:	mov	r5, r0
   1904c:	bl	11260 <__errno_location@plt>
   19050:	ldr	r7, [r0]
   19054:	mov	r6, r0
   19058:	mov	r0, r4
   1905c:	bl	11380 <close@plt>
   19060:	mov	r0, r5
   19064:	str	r7, [r6]
   19068:	pop	{r4, r5, r6, r7, fp, pc}
   1906c:	mov	r0, r4
   19070:	pop	{r4, r5, r6, r7, fp, pc}
   19074:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19078:	add	fp, sp, #24
   1907c:	sub	sp, sp, #32
   19080:	ldr	r6, [fp, #12]
   19084:	ldr	r7, [fp, #8]
   19088:	mov	r4, r2
   1908c:	mov	r8, r0
   19090:	cmp	r1, #0
   19094:	beq	190bc <__assert_fail@plt+0x7d18>
   19098:	movw	r2, #45896	; 0xb348
   1909c:	mov	r5, r1
   190a0:	str	r3, [sp, #4]
   190a4:	str	r4, [sp]
   190a8:	mov	r0, r8
   190ac:	mov	r1, #1
   190b0:	movt	r2, #1
   190b4:	mov	r3, r5
   190b8:	b	190d4 <__assert_fail@plt+0x7d30>
   190bc:	movw	r2, #45908	; 0xb354
   190c0:	str	r3, [sp]
   190c4:	mov	r0, r8
   190c8:	mov	r1, #1
   190cc:	mov	r3, r4
   190d0:	movt	r2, #1
   190d4:	bl	112a8 <__fprintf_chk@plt>
   190d8:	movw	r1, #45915	; 0xb35b
   190dc:	mov	r0, #0
   190e0:	mov	r2, #5
   190e4:	movt	r1, #1
   190e8:	bl	11140 <dcgettext@plt>
   190ec:	movw	r2, #46633	; 0xb629
   190f0:	mov	r3, r0
   190f4:	movw	r0, #2022	; 0x7e6
   190f8:	mov	r1, #1
   190fc:	movt	r2, #1
   19100:	str	r0, [sp]
   19104:	mov	r0, r8
   19108:	bl	112a8 <__fprintf_chk@plt>
   1910c:	movw	r4, #43105	; 0xa861
   19110:	mov	r1, r8
   19114:	movt	r4, #1
   19118:	mov	r0, r4
   1911c:	bl	110d4 <fputs_unlocked@plt>
   19120:	movw	r1, #45919	; 0xb35f
   19124:	mov	r0, #0
   19128:	mov	r2, #5
   1912c:	movt	r1, #1
   19130:	bl	11140 <dcgettext@plt>
   19134:	movw	r3, #46090	; 0xb40a
   19138:	mov	r2, r0
   1913c:	mov	r0, r8
   19140:	mov	r1, #1
   19144:	movt	r3, #1
   19148:	bl	112a8 <__fprintf_chk@plt>
   1914c:	mov	r0, r4
   19150:	mov	r1, r8
   19154:	bl	110d4 <fputs_unlocked@plt>
   19158:	cmp	r6, #9
   1915c:	bhi	19198 <__assert_fail@plt+0x7df4>
   19160:	add	r0, pc, #0
   19164:	ldr	pc, [r0, r6, lsl #2]
   19168:	muleq	r1, r0, r1
   1916c:	andeq	r9, r1, r4, lsr #3
   19170:	ldrdeq	r9, [r1], -r4
   19174:	strdeq	r9, [r1], -ip
   19178:	andeq	r9, r1, r4, lsr #4
   1917c:	andeq	r9, r1, ip, asr #4
   19180:	andeq	r9, r1, r4, ror r2
   19184:	andeq	r9, r1, ip, lsr #5
   19188:	andeq	r9, r1, r4, asr r3
   1918c:	strdeq	r9, [r1], -ip
   19190:	sub	sp, fp, #24
   19194:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19198:	movw	r1, #46443	; 0xb56b
   1919c:	movt	r1, #1
   191a0:	b	19304 <__assert_fail@plt+0x7f60>
   191a4:	movw	r1, #46124	; 0xb42c
   191a8:	mov	r0, #0
   191ac:	mov	r2, #5
   191b0:	movt	r1, #1
   191b4:	bl	11140 <dcgettext@plt>
   191b8:	ldr	r3, [r7]
   191bc:	mov	r2, r0
   191c0:	mov	r0, r8
   191c4:	mov	r1, #1
   191c8:	sub	sp, fp, #24
   191cc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   191d0:	b	112a8 <__fprintf_chk@plt>
   191d4:	movw	r1, #46140	; 0xb43c
   191d8:	mov	r0, #0
   191dc:	mov	r2, #5
   191e0:	movt	r1, #1
   191e4:	bl	11140 <dcgettext@plt>
   191e8:	mov	r2, r0
   191ec:	ldr	r3, [r7]
   191f0:	ldr	r0, [r7, #4]
   191f4:	str	r0, [sp]
   191f8:	b	192e8 <__assert_fail@plt+0x7f44>
   191fc:	movw	r1, #46163	; 0xb453
   19200:	mov	r0, #0
   19204:	mov	r2, #5
   19208:	movt	r1, #1
   1920c:	bl	11140 <dcgettext@plt>
   19210:	mov	r2, r0
   19214:	ldr	r3, [r7]
   19218:	ldmib	r7, {r0, r1}
   1921c:	stm	sp, {r0, r1}
   19220:	b	192e8 <__assert_fail@plt+0x7f44>
   19224:	movw	r1, #46191	; 0xb46f
   19228:	mov	r0, #0
   1922c:	mov	r2, #5
   19230:	movt	r1, #1
   19234:	bl	11140 <dcgettext@plt>
   19238:	ldr	r3, [r7]
   1923c:	mov	r2, r0
   19240:	ldmib	r7, {r0, r1, r7}
   19244:	stm	sp, {r0, r1, r7}
   19248:	b	192e8 <__assert_fail@plt+0x7f44>
   1924c:	movw	r1, #46223	; 0xb48f
   19250:	mov	r0, #0
   19254:	mov	r2, #5
   19258:	movt	r1, #1
   1925c:	bl	11140 <dcgettext@plt>
   19260:	ldr	r3, [r7]
   19264:	mov	r2, r0
   19268:	ldmib	r7, {r0, r1, r6, r7}
   1926c:	stm	sp, {r0, r1, r6, r7}
   19270:	b	192e8 <__assert_fail@plt+0x7f44>
   19274:	movw	r1, #46259	; 0xb4b3
   19278:	mov	r0, #0
   1927c:	mov	r2, #5
   19280:	movt	r1, #1
   19284:	bl	11140 <dcgettext@plt>
   19288:	mov	r2, r0
   1928c:	ldr	r3, [r7]
   19290:	ldmib	r7, {r0, r1, r6}
   19294:	ldr	r5, [r7, #16]
   19298:	ldr	r7, [r7, #20]
   1929c:	stm	sp, {r0, r1, r6}
   192a0:	str	r5, [sp, #12]
   192a4:	str	r7, [sp, #16]
   192a8:	b	192e8 <__assert_fail@plt+0x7f44>
   192ac:	movw	r1, #46299	; 0xb4db
   192b0:	mov	r0, #0
   192b4:	mov	r2, #5
   192b8:	movt	r1, #1
   192bc:	bl	11140 <dcgettext@plt>
   192c0:	mov	r2, r0
   192c4:	ldr	r3, [r7]
   192c8:	ldmib	r7, {r0, r1, r6}
   192cc:	ldr	r5, [r7, #16]
   192d0:	ldr	r4, [r7, #20]
   192d4:	ldr	r7, [r7, #24]
   192d8:	stm	sp, {r0, r1, r6}
   192dc:	str	r5, [sp, #12]
   192e0:	str	r4, [sp, #16]
   192e4:	str	r7, [sp, #20]
   192e8:	mov	r0, r8
   192ec:	mov	r1, #1
   192f0:	bl	112a8 <__fprintf_chk@plt>
   192f4:	sub	sp, fp, #24
   192f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   192fc:	movw	r1, #46391	; 0xb537
   19300:	movt	r1, #1
   19304:	mov	r0, #0
   19308:	mov	r2, #5
   1930c:	bl	11140 <dcgettext@plt>
   19310:	mov	ip, r0
   19314:	ldr	r3, [r7]
   19318:	ldr	r0, [r7, #4]
   1931c:	ldr	r1, [r7, #8]
   19320:	ldr	r6, [r7, #12]
   19324:	ldr	r5, [r7, #16]
   19328:	ldr	r4, [r7, #20]
   1932c:	ldr	r2, [r7, #24]
   19330:	ldr	lr, [r7, #28]
   19334:	ldr	r7, [r7, #32]
   19338:	stm	sp, {r0, r1, r6}
   1933c:	str	r5, [sp, #12]
   19340:	str	r4, [sp, #16]
   19344:	str	r2, [sp, #20]
   19348:	str	lr, [sp, #24]
   1934c:	str	r7, [sp, #28]
   19350:	b	19398 <__assert_fail@plt+0x7ff4>
   19354:	movw	r1, #46343	; 0xb507
   19358:	mov	r0, #0
   1935c:	mov	r2, #5
   19360:	movt	r1, #1
   19364:	bl	11140 <dcgettext@plt>
   19368:	mov	ip, r0
   1936c:	ldr	r3, [r7]
   19370:	ldmib	r7, {r0, r1, r6}
   19374:	ldr	r5, [r7, #16]
   19378:	ldr	r4, [r7, #20]
   1937c:	ldr	r2, [r7, #24]
   19380:	ldr	r7, [r7, #28]
   19384:	stm	sp, {r0, r1, r6}
   19388:	str	r5, [sp, #12]
   1938c:	str	r4, [sp, #16]
   19390:	str	r2, [sp, #20]
   19394:	str	r7, [sp, #24]
   19398:	mov	r0, r8
   1939c:	mov	r1, #1
   193a0:	mov	r2, ip
   193a4:	bl	112a8 <__fprintf_chk@plt>
   193a8:	sub	sp, fp, #24
   193ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   193b0:	push	{r4, sl, fp, lr}
   193b4:	add	fp, sp, #8
   193b8:	sub	sp, sp, #8
   193bc:	ldr	ip, [fp, #8]
   193c0:	mov	lr, #0
   193c4:	ldr	r4, [ip, lr, lsl #2]
   193c8:	add	lr, lr, #1
   193cc:	cmp	r4, #0
   193d0:	bne	193c4 <__assert_fail@plt+0x8020>
   193d4:	sub	r4, lr, #1
   193d8:	str	ip, [sp]
   193dc:	str	r4, [sp, #4]
   193e0:	bl	19074 <__assert_fail@plt+0x7cd0>
   193e4:	sub	sp, fp, #8
   193e8:	pop	{r4, sl, fp, pc}
   193ec:	push	{fp, lr}
   193f0:	mov	fp, sp
   193f4:	sub	sp, sp, #48	; 0x30
   193f8:	ldr	ip, [fp, #8]
   193fc:	ldr	lr, [ip]
   19400:	cmp	lr, #0
   19404:	str	lr, [sp, #8]
   19408:	beq	194a4 <__assert_fail@plt+0x8100>
   1940c:	ldr	lr, [ip, #4]
   19410:	cmp	lr, #0
   19414:	str	lr, [sp, #12]
   19418:	beq	194ac <__assert_fail@plt+0x8108>
   1941c:	ldr	lr, [ip, #8]
   19420:	cmp	lr, #0
   19424:	str	lr, [sp, #16]
   19428:	beq	194b4 <__assert_fail@plt+0x8110>
   1942c:	ldr	lr, [ip, #12]
   19430:	cmp	lr, #0
   19434:	str	lr, [sp, #20]
   19438:	beq	194bc <__assert_fail@plt+0x8118>
   1943c:	ldr	lr, [ip, #16]
   19440:	cmp	lr, #0
   19444:	str	lr, [sp, #24]
   19448:	beq	194c4 <__assert_fail@plt+0x8120>
   1944c:	ldr	lr, [ip, #20]
   19450:	cmp	lr, #0
   19454:	str	lr, [sp, #28]
   19458:	beq	194cc <__assert_fail@plt+0x8128>
   1945c:	ldr	lr, [ip, #24]
   19460:	cmp	lr, #0
   19464:	str	lr, [sp, #32]
   19468:	beq	194d4 <__assert_fail@plt+0x8130>
   1946c:	ldr	lr, [ip, #28]
   19470:	cmp	lr, #0
   19474:	str	lr, [sp, #36]	; 0x24
   19478:	beq	194dc <__assert_fail@plt+0x8138>
   1947c:	ldr	lr, [ip, #32]
   19480:	cmp	lr, #0
   19484:	str	lr, [sp, #40]	; 0x28
   19488:	beq	194e4 <__assert_fail@plt+0x8140>
   1948c:	ldr	lr, [ip, #36]	; 0x24
   19490:	mov	ip, #10
   19494:	cmp	lr, #0
   19498:	str	lr, [sp, #44]	; 0x2c
   1949c:	movweq	ip, #9
   194a0:	b	194e8 <__assert_fail@plt+0x8144>
   194a4:	mov	ip, #0
   194a8:	b	194e8 <__assert_fail@plt+0x8144>
   194ac:	mov	ip, #1
   194b0:	b	194e8 <__assert_fail@plt+0x8144>
   194b4:	mov	ip, #2
   194b8:	b	194e8 <__assert_fail@plt+0x8144>
   194bc:	mov	ip, #3
   194c0:	b	194e8 <__assert_fail@plt+0x8144>
   194c4:	mov	ip, #4
   194c8:	b	194e8 <__assert_fail@plt+0x8144>
   194cc:	mov	ip, #5
   194d0:	b	194e8 <__assert_fail@plt+0x8144>
   194d4:	mov	ip, #6
   194d8:	b	194e8 <__assert_fail@plt+0x8144>
   194dc:	mov	ip, #7
   194e0:	b	194e8 <__assert_fail@plt+0x8144>
   194e4:	mov	ip, #8
   194e8:	add	lr, sp, #8
   194ec:	str	ip, [sp, #4]
   194f0:	str	lr, [sp]
   194f4:	bl	19074 <__assert_fail@plt+0x7cd0>
   194f8:	mov	sp, fp
   194fc:	pop	{fp, pc}
   19500:	push	{fp, lr}
   19504:	mov	fp, sp
   19508:	sub	sp, sp, #56	; 0x38
   1950c:	add	ip, fp, #8
   19510:	str	ip, [sp, #12]
   19514:	ldr	lr, [fp, #8]
   19518:	cmp	lr, #0
   1951c:	str	lr, [sp, #16]
   19520:	beq	195bc <__assert_fail@plt+0x8218>
   19524:	ldr	lr, [ip, #4]
   19528:	cmp	lr, #0
   1952c:	str	lr, [sp, #20]
   19530:	beq	195c4 <__assert_fail@plt+0x8220>
   19534:	ldr	lr, [ip, #8]
   19538:	cmp	lr, #0
   1953c:	str	lr, [sp, #24]
   19540:	beq	195cc <__assert_fail@plt+0x8228>
   19544:	ldr	lr, [ip, #12]
   19548:	cmp	lr, #0
   1954c:	str	lr, [sp, #28]
   19550:	beq	195d4 <__assert_fail@plt+0x8230>
   19554:	ldr	lr, [ip, #16]
   19558:	cmp	lr, #0
   1955c:	str	lr, [sp, #32]
   19560:	beq	195dc <__assert_fail@plt+0x8238>
   19564:	ldr	lr, [ip, #20]
   19568:	cmp	lr, #0
   1956c:	str	lr, [sp, #36]	; 0x24
   19570:	beq	195e4 <__assert_fail@plt+0x8240>
   19574:	ldr	lr, [ip, #24]
   19578:	cmp	lr, #0
   1957c:	str	lr, [sp, #40]	; 0x28
   19580:	beq	195ec <__assert_fail@plt+0x8248>
   19584:	ldr	lr, [ip, #28]
   19588:	cmp	lr, #0
   1958c:	str	lr, [sp, #44]	; 0x2c
   19590:	beq	195f4 <__assert_fail@plt+0x8250>
   19594:	ldr	lr, [ip, #32]
   19598:	cmp	lr, #0
   1959c:	str	lr, [sp, #48]	; 0x30
   195a0:	beq	195fc <__assert_fail@plt+0x8258>
   195a4:	ldr	lr, [ip, #36]	; 0x24
   195a8:	mov	ip, #10
   195ac:	cmp	lr, #0
   195b0:	str	lr, [sp, #52]	; 0x34
   195b4:	movweq	ip, #9
   195b8:	b	19600 <__assert_fail@plt+0x825c>
   195bc:	mov	ip, #0
   195c0:	b	19600 <__assert_fail@plt+0x825c>
   195c4:	mov	ip, #1
   195c8:	b	19600 <__assert_fail@plt+0x825c>
   195cc:	mov	ip, #2
   195d0:	b	19600 <__assert_fail@plt+0x825c>
   195d4:	mov	ip, #3
   195d8:	b	19600 <__assert_fail@plt+0x825c>
   195dc:	mov	ip, #4
   195e0:	b	19600 <__assert_fail@plt+0x825c>
   195e4:	mov	ip, #5
   195e8:	b	19600 <__assert_fail@plt+0x825c>
   195ec:	mov	ip, #6
   195f0:	b	19600 <__assert_fail@plt+0x825c>
   195f4:	mov	ip, #7
   195f8:	b	19600 <__assert_fail@plt+0x825c>
   195fc:	mov	ip, #8
   19600:	add	lr, sp, #16
   19604:	str	ip, [sp, #4]
   19608:	str	lr, [sp]
   1960c:	bl	19074 <__assert_fail@plt+0x7cd0>
   19610:	mov	sp, fp
   19614:	pop	{fp, pc}
   19618:	push	{fp, lr}
   1961c:	mov	fp, sp
   19620:	movw	r0, #49532	; 0xc17c
   19624:	movt	r0, #2
   19628:	ldr	r1, [r0]
   1962c:	movw	r0, #43105	; 0xa861
   19630:	movt	r0, #1
   19634:	bl	110d4 <fputs_unlocked@plt>
   19638:	movw	r1, #46503	; 0xb5a7
   1963c:	mov	r0, #0
   19640:	mov	r2, #5
   19644:	movt	r1, #1
   19648:	bl	11140 <dcgettext@plt>
   1964c:	movw	r2, #46523	; 0xb5bb
   19650:	mov	r1, r0
   19654:	mov	r0, #1
   19658:	movt	r2, #1
   1965c:	bl	11290 <__printf_chk@plt>
   19660:	movw	r1, #46545	; 0xb5d1
   19664:	mov	r0, #0
   19668:	mov	r2, #5
   1966c:	movt	r1, #1
   19670:	bl	11140 <dcgettext@plt>
   19674:	movw	r2, #43841	; 0xab41
   19678:	movw	r3, #44135	; 0xac67
   1967c:	mov	r1, r0
   19680:	mov	r0, #1
   19684:	movt	r2, #1
   19688:	movt	r3, #1
   1968c:	bl	11290 <__printf_chk@plt>
   19690:	movw	r1, #46565	; 0xb5e5
   19694:	mov	r0, #0
   19698:	mov	r2, #5
   1969c:	movt	r1, #1
   196a0:	bl	11140 <dcgettext@plt>
   196a4:	movw	r2, #46604	; 0xb60c
   196a8:	mov	r1, r0
   196ac:	mov	r0, #1
   196b0:	movt	r2, #1
   196b4:	pop	{fp, lr}
   196b8:	b	11290 <__printf_chk@plt>
   196bc:	push	{r4, r5, r6, sl, fp, lr}
   196c0:	add	fp, sp, #16
   196c4:	mov	r4, r2
   196c8:	mov	r5, r1
   196cc:	mov	r6, r0
   196d0:	bl	1a3fc <__assert_fail@plt+0x9058>
   196d4:	cmp	r0, #0
   196d8:	popne	{r4, r5, r6, sl, fp, pc}
   196dc:	cmp	r6, #0
   196e0:	beq	196f4 <__assert_fail@plt+0x8350>
   196e4:	cmp	r5, #0
   196e8:	cmpne	r4, #0
   196ec:	bne	196f4 <__assert_fail@plt+0x8350>
   196f0:	pop	{r4, r5, r6, sl, fp, pc}
   196f4:	bl	19c70 <__assert_fail@plt+0x88cc>
   196f8:	push	{r4, r5, r6, sl, fp, lr}
   196fc:	add	fp, sp, #16
   19700:	mov	r4, r2
   19704:	mov	r5, r1
   19708:	mov	r6, r0
   1970c:	bl	1a3fc <__assert_fail@plt+0x9058>
   19710:	cmp	r0, #0
   19714:	popne	{r4, r5, r6, sl, fp, pc}
   19718:	cmp	r6, #0
   1971c:	beq	19730 <__assert_fail@plt+0x838c>
   19720:	cmp	r5, #0
   19724:	cmpne	r4, #0
   19728:	bne	19730 <__assert_fail@plt+0x838c>
   1972c:	pop	{r4, r5, r6, sl, fp, pc}
   19730:	bl	19c70 <__assert_fail@plt+0x88cc>
   19734:	push	{fp, lr}
   19738:	mov	fp, sp
   1973c:	bl	19d84 <__assert_fail@plt+0x89e0>
   19740:	cmp	r0, #0
   19744:	popne	{fp, pc}
   19748:	bl	19c70 <__assert_fail@plt+0x88cc>
   1974c:	push	{fp, lr}
   19750:	mov	fp, sp
   19754:	bl	19d84 <__assert_fail@plt+0x89e0>
   19758:	cmp	r0, #0
   1975c:	popne	{fp, pc}
   19760:	bl	19c70 <__assert_fail@plt+0x88cc>
   19764:	push	{fp, lr}
   19768:	mov	fp, sp
   1976c:	bl	19d84 <__assert_fail@plt+0x89e0>
   19770:	cmp	r0, #0
   19774:	popne	{fp, pc}
   19778:	bl	19c70 <__assert_fail@plt+0x88cc>
   1977c:	push	{r4, r5, fp, lr}
   19780:	add	fp, sp, #8
   19784:	mov	r4, r1
   19788:	mov	r5, r0
   1978c:	bl	19db4 <__assert_fail@plt+0x8a10>
   19790:	cmp	r0, #0
   19794:	popne	{r4, r5, fp, pc}
   19798:	cmp	r5, #0
   1979c:	beq	197ac <__assert_fail@plt+0x8408>
   197a0:	cmp	r4, #0
   197a4:	bne	197ac <__assert_fail@plt+0x8408>
   197a8:	pop	{r4, r5, fp, pc}
   197ac:	bl	19c70 <__assert_fail@plt+0x88cc>
   197b0:	push	{fp, lr}
   197b4:	mov	fp, sp
   197b8:	cmp	r1, #0
   197bc:	orreq	r1, r1, #1
   197c0:	bl	19db4 <__assert_fail@plt+0x8a10>
   197c4:	cmp	r0, #0
   197c8:	popne	{fp, pc}
   197cc:	bl	19c70 <__assert_fail@plt+0x88cc>
   197d0:	push	{fp, lr}
   197d4:	mov	fp, sp
   197d8:	clz	r3, r2
   197dc:	lsr	ip, r3, #5
   197e0:	clz	r3, r1
   197e4:	lsr	r3, r3, #5
   197e8:	orrs	r3, r3, ip
   197ec:	movwne	r1, #1
   197f0:	movwne	r2, #1
   197f4:	bl	1a3fc <__assert_fail@plt+0x9058>
   197f8:	cmp	r0, #0
   197fc:	popne	{fp, pc}
   19800:	bl	19c70 <__assert_fail@plt+0x88cc>
   19804:	push	{fp, lr}
   19808:	mov	fp, sp
   1980c:	mov	r2, r1
   19810:	mov	r1, r0
   19814:	mov	r0, #0
   19818:	bl	1a3fc <__assert_fail@plt+0x9058>
   1981c:	cmp	r0, #0
   19820:	popne	{fp, pc}
   19824:	bl	19c70 <__assert_fail@plt+0x88cc>
   19828:	push	{fp, lr}
   1982c:	mov	fp, sp
   19830:	mov	r2, r1
   19834:	mov	r1, r0
   19838:	clz	r0, r2
   1983c:	clz	r3, r1
   19840:	lsr	r0, r0, #5
   19844:	lsr	r3, r3, #5
   19848:	orrs	r0, r3, r0
   1984c:	mov	r0, #0
   19850:	movwne	r1, #1
   19854:	movwne	r2, #1
   19858:	bl	1a3fc <__assert_fail@plt+0x9058>
   1985c:	cmp	r0, #0
   19860:	popne	{fp, pc}
   19864:	bl	19c70 <__assert_fail@plt+0x88cc>
   19868:	push	{r4, r5, r6, sl, fp, lr}
   1986c:	add	fp, sp, #16
   19870:	ldr	r5, [r1]
   19874:	mov	r4, r1
   19878:	mov	r6, r0
   1987c:	cmp	r0, #0
   19880:	beq	19898 <__assert_fail@plt+0x84f4>
   19884:	mov	r0, #1
   19888:	add	r0, r0, r5, lsr #1
   1988c:	adds	r5, r5, r0
   19890:	bcc	198a0 <__assert_fail@plt+0x84fc>
   19894:	b	198dc <__assert_fail@plt+0x8538>
   19898:	cmp	r5, #0
   1989c:	movweq	r5, #64	; 0x40
   198a0:	mov	r0, r6
   198a4:	mov	r1, r5
   198a8:	mov	r2, #1
   198ac:	bl	1a3fc <__assert_fail@plt+0x9058>
   198b0:	cmp	r5, #0
   198b4:	mov	r1, r5
   198b8:	movwne	r1, #1
   198bc:	cmp	r0, #0
   198c0:	bne	198d4 <__assert_fail@plt+0x8530>
   198c4:	clz	r2, r6
   198c8:	lsr	r2, r2, #5
   198cc:	orrs	r1, r2, r1
   198d0:	bne	198dc <__assert_fail@plt+0x8538>
   198d4:	str	r5, [r4]
   198d8:	pop	{r4, r5, r6, sl, fp, pc}
   198dc:	bl	19c70 <__assert_fail@plt+0x88cc>
   198e0:	push	{r4, r5, r6, r7, fp, lr}
   198e4:	add	fp, sp, #16
   198e8:	ldr	r5, [r1]
   198ec:	mov	r6, r2
   198f0:	mov	r4, r1
   198f4:	mov	r7, r0
   198f8:	cmp	r0, #0
   198fc:	beq	19914 <__assert_fail@plt+0x8570>
   19900:	mov	r0, #1
   19904:	add	r0, r0, r5, lsr #1
   19908:	adds	r5, r5, r0
   1990c:	bcc	1992c <__assert_fail@plt+0x8588>
   19910:	b	19960 <__assert_fail@plt+0x85bc>
   19914:	cmp	r5, #0
   19918:	bne	1992c <__assert_fail@plt+0x8588>
   1991c:	mov	r0, #64	; 0x40
   19920:	cmp	r6, #64	; 0x40
   19924:	udiv	r5, r0, r6
   19928:	addhi	r5, r5, #1
   1992c:	mov	r0, r7
   19930:	mov	r1, r5
   19934:	mov	r2, r6
   19938:	bl	1a3fc <__assert_fail@plt+0x9058>
   1993c:	cmp	r0, #0
   19940:	bne	19958 <__assert_fail@plt+0x85b4>
   19944:	cmp	r7, #0
   19948:	beq	19960 <__assert_fail@plt+0x85bc>
   1994c:	cmp	r6, #0
   19950:	cmpne	r5, #0
   19954:	bne	19960 <__assert_fail@plt+0x85bc>
   19958:	str	r5, [r4]
   1995c:	pop	{r4, r5, r6, r7, fp, pc}
   19960:	bl	19c70 <__assert_fail@plt+0x88cc>
   19964:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19968:	add	fp, sp, #24
   1996c:	mov	r8, r1
   19970:	ldr	r1, [r1]
   19974:	mov	r5, r0
   19978:	add	r0, r1, r1, asr #1
   1997c:	cmp	r0, r1
   19980:	mvnvs	r0, #-2147483648	; 0x80000000
   19984:	cmp	r0, r3
   19988:	mov	r7, r0
   1998c:	movgt	r7, r3
   19990:	cmn	r3, #1
   19994:	movle	r7, r0
   19998:	ldr	r0, [fp, #8]
   1999c:	cmn	r0, #1
   199a0:	ble	199c8 <__assert_fail@plt+0x8624>
   199a4:	cmp	r0, #0
   199a8:	beq	19a1c <__assert_fail@plt+0x8678>
   199ac:	cmn	r7, #1
   199b0:	ble	199f0 <__assert_fail@plt+0x864c>
   199b4:	mvn	r4, #-2147483648	; 0x80000000
   199b8:	udiv	r6, r4, r0
   199bc:	cmp	r6, r7
   199c0:	bge	19a1c <__assert_fail@plt+0x8678>
   199c4:	b	19a2c <__assert_fail@plt+0x8688>
   199c8:	cmn	r7, #1
   199cc:	ble	19a0c <__assert_fail@plt+0x8668>
   199d0:	cmn	r0, #1
   199d4:	beq	19a1c <__assert_fail@plt+0x8678>
   199d8:	mov	r6, #-2147483648	; 0x80000000
   199dc:	mvn	r4, #-2147483648	; 0x80000000
   199e0:	sdiv	r6, r6, r0
   199e4:	cmp	r6, r7
   199e8:	bge	19a1c <__assert_fail@plt+0x8678>
   199ec:	b	19a2c <__assert_fail@plt+0x8688>
   199f0:	beq	19a1c <__assert_fail@plt+0x8678>
   199f4:	mov	r6, #-2147483648	; 0x80000000
   199f8:	mvn	r4, #-2147483648	; 0x80000000
   199fc:	sdiv	r6, r6, r7
   19a00:	cmp	r6, r0
   19a04:	bge	19a1c <__assert_fail@plt+0x8678>
   19a08:	b	19a2c <__assert_fail@plt+0x8688>
   19a0c:	mvn	r4, #-2147483648	; 0x80000000
   19a10:	sdiv	r6, r4, r0
   19a14:	cmp	r7, r6
   19a18:	blt	19a2c <__assert_fail@plt+0x8688>
   19a1c:	mul	r6, r7, r0
   19a20:	mov	r4, #64	; 0x40
   19a24:	cmp	r6, #63	; 0x3f
   19a28:	bgt	19a34 <__assert_fail@plt+0x8690>
   19a2c:	sdiv	r7, r4, r0
   19a30:	mul	r6, r7, r0
   19a34:	cmp	r5, #0
   19a38:	moveq	r4, #0
   19a3c:	streq	r4, [r8]
   19a40:	sub	r4, r7, r1
   19a44:	cmp	r4, r2
   19a48:	bge	19af4 <__assert_fail@plt+0x8750>
   19a4c:	add	r7, r1, r2
   19a50:	mov	r6, #0
   19a54:	mov	r2, #0
   19a58:	cmp	r7, r3
   19a5c:	movwgt	r6, #1
   19a60:	cmn	r3, #1
   19a64:	movwgt	r2, #1
   19a68:	cmp	r7, r1
   19a6c:	bvs	19b28 <__assert_fail@plt+0x8784>
   19a70:	ands	r1, r2, r6
   19a74:	bne	19b28 <__assert_fail@plt+0x8784>
   19a78:	cmn	r0, #1
   19a7c:	ble	19aa4 <__assert_fail@plt+0x8700>
   19a80:	cmp	r0, #0
   19a84:	beq	19af0 <__assert_fail@plt+0x874c>
   19a88:	cmn	r7, #1
   19a8c:	ble	19ac8 <__assert_fail@plt+0x8724>
   19a90:	mvn	r1, #-2147483648	; 0x80000000
   19a94:	udiv	r1, r1, r0
   19a98:	cmp	r1, r7
   19a9c:	bge	19af0 <__assert_fail@plt+0x874c>
   19aa0:	b	19b28 <__assert_fail@plt+0x8784>
   19aa4:	cmn	r7, #1
   19aa8:	ble	19ae0 <__assert_fail@plt+0x873c>
   19aac:	cmn	r0, #1
   19ab0:	beq	19af0 <__assert_fail@plt+0x874c>
   19ab4:	mov	r1, #-2147483648	; 0x80000000
   19ab8:	sdiv	r1, r1, r0
   19abc:	cmp	r1, r7
   19ac0:	bge	19af0 <__assert_fail@plt+0x874c>
   19ac4:	b	19b28 <__assert_fail@plt+0x8784>
   19ac8:	beq	19af0 <__assert_fail@plt+0x874c>
   19acc:	mov	r1, #-2147483648	; 0x80000000
   19ad0:	sdiv	r1, r1, r7
   19ad4:	cmp	r1, r0
   19ad8:	bge	19af0 <__assert_fail@plt+0x874c>
   19adc:	b	19b28 <__assert_fail@plt+0x8784>
   19ae0:	mvn	r1, #-2147483648	; 0x80000000
   19ae4:	sdiv	r1, r1, r0
   19ae8:	cmp	r7, r1
   19aec:	blt	19b28 <__assert_fail@plt+0x8784>
   19af0:	mul	r6, r7, r0
   19af4:	mov	r0, r5
   19af8:	mov	r1, r6
   19afc:	bl	19db4 <__assert_fail@plt+0x8a10>
   19b00:	cmp	r6, #0
   19b04:	movwne	r6, #1
   19b08:	cmp	r0, #0
   19b0c:	bne	19b20 <__assert_fail@plt+0x877c>
   19b10:	clz	r1, r5
   19b14:	lsr	r1, r1, #5
   19b18:	orrs	r1, r1, r6
   19b1c:	bne	19b28 <__assert_fail@plt+0x8784>
   19b20:	str	r7, [r8]
   19b24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19b28:	bl	19c70 <__assert_fail@plt+0x88cc>
   19b2c:	push	{fp, lr}
   19b30:	mov	fp, sp
   19b34:	mov	r1, #1
   19b38:	bl	19d30 <__assert_fail@plt+0x898c>
   19b3c:	cmp	r0, #0
   19b40:	popne	{fp, pc}
   19b44:	bl	19c70 <__assert_fail@plt+0x88cc>
   19b48:	push	{fp, lr}
   19b4c:	mov	fp, sp
   19b50:	bl	19d30 <__assert_fail@plt+0x898c>
   19b54:	cmp	r0, #0
   19b58:	popne	{fp, pc}
   19b5c:	bl	19c70 <__assert_fail@plt+0x88cc>
   19b60:	push	{fp, lr}
   19b64:	mov	fp, sp
   19b68:	mov	r1, #1
   19b6c:	bl	19d30 <__assert_fail@plt+0x898c>
   19b70:	cmp	r0, #0
   19b74:	popne	{fp, pc}
   19b78:	bl	19c70 <__assert_fail@plt+0x88cc>
   19b7c:	push	{fp, lr}
   19b80:	mov	fp, sp
   19b84:	bl	19d30 <__assert_fail@plt+0x898c>
   19b88:	cmp	r0, #0
   19b8c:	popne	{fp, pc}
   19b90:	bl	19c70 <__assert_fail@plt+0x88cc>
   19b94:	push	{r4, r5, fp, lr}
   19b98:	add	fp, sp, #8
   19b9c:	mov	r5, r0
   19ba0:	mov	r0, r1
   19ba4:	mov	r4, r1
   19ba8:	bl	19d84 <__assert_fail@plt+0x89e0>
   19bac:	cmp	r0, #0
   19bb0:	beq	19bc4 <__assert_fail@plt+0x8820>
   19bb4:	mov	r1, r5
   19bb8:	mov	r2, r4
   19bbc:	pop	{r4, r5, fp, lr}
   19bc0:	b	11128 <memcpy@plt>
   19bc4:	bl	19c70 <__assert_fail@plt+0x88cc>
   19bc8:	push	{r4, r5, fp, lr}
   19bcc:	add	fp, sp, #8
   19bd0:	mov	r5, r0
   19bd4:	mov	r0, r1
   19bd8:	mov	r4, r1
   19bdc:	bl	19d84 <__assert_fail@plt+0x89e0>
   19be0:	cmp	r0, #0
   19be4:	beq	19bf8 <__assert_fail@plt+0x8854>
   19be8:	mov	r1, r5
   19bec:	mov	r2, r4
   19bf0:	pop	{r4, r5, fp, lr}
   19bf4:	b	11128 <memcpy@plt>
   19bf8:	bl	19c70 <__assert_fail@plt+0x88cc>
   19bfc:	push	{r4, r5, fp, lr}
   19c00:	add	fp, sp, #8
   19c04:	mov	r5, r0
   19c08:	add	r0, r1, #1
   19c0c:	mov	r4, r1
   19c10:	bl	19d84 <__assert_fail@plt+0x89e0>
   19c14:	cmp	r0, #0
   19c18:	beq	19c34 <__assert_fail@plt+0x8890>
   19c1c:	mov	r1, #0
   19c20:	mov	r2, r4
   19c24:	strb	r1, [r0, r4]
   19c28:	mov	r1, r5
   19c2c:	pop	{r4, r5, fp, lr}
   19c30:	b	11128 <memcpy@plt>
   19c34:	bl	19c70 <__assert_fail@plt+0x88cc>
   19c38:	push	{r4, r5, fp, lr}
   19c3c:	add	fp, sp, #8
   19c40:	mov	r4, r0
   19c44:	bl	1123c <strlen@plt>
   19c48:	add	r5, r0, #1
   19c4c:	mov	r0, r5
   19c50:	bl	19d84 <__assert_fail@plt+0x89e0>
   19c54:	cmp	r0, #0
   19c58:	beq	19c6c <__assert_fail@plt+0x88c8>
   19c5c:	mov	r1, r4
   19c60:	mov	r2, r5
   19c64:	pop	{r4, r5, fp, lr}
   19c68:	b	11128 <memcpy@plt>
   19c6c:	bl	19c70 <__assert_fail@plt+0x88cc>
   19c70:	push	{fp, lr}
   19c74:	mov	fp, sp
   19c78:	movw	r0, #49440	; 0xc120
   19c7c:	movw	r1, #46680	; 0xb658
   19c80:	mov	r2, #5
   19c84:	movt	r0, #2
   19c88:	movt	r1, #1
   19c8c:	ldr	r4, [r0]
   19c90:	mov	r0, #0
   19c94:	bl	11140 <dcgettext@plt>
   19c98:	movw	r2, #44014	; 0xabee
   19c9c:	mov	r3, r0
   19ca0:	mov	r0, r4
   19ca4:	mov	r1, #0
   19ca8:	movt	r2, #1
   19cac:	bl	111c4 <error@plt>
   19cb0:	bl	11374 <abort@plt>
   19cb4:	push	{fp, lr}
   19cb8:	mov	fp, sp
   19cbc:	orr	r1, r1, #512	; 0x200
   19cc0:	bl	12c68 <__assert_fail@plt+0x18c4>
   19cc4:	cmp	r0, #0
   19cc8:	popne	{fp, pc}
   19ccc:	bl	11260 <__errno_location@plt>
   19cd0:	ldr	r0, [r0]
   19cd4:	cmp	r0, #22
   19cd8:	bne	19cfc <__assert_fail@plt+0x8958>
   19cdc:	movw	r0, #46697	; 0xb669
   19ce0:	movw	r1, #46713	; 0xb679
   19ce4:	movw	r3, #46724	; 0xb684
   19ce8:	mov	r2, #41	; 0x29
   19cec:	movt	r0, #1
   19cf0:	movt	r1, #1
   19cf4:	movt	r3, #1
   19cf8:	bl	113a4 <__assert_fail@plt>
   19cfc:	bl	19c70 <__assert_fail@plt+0x88cc>
   19d00:	ldr	r0, [r0, #48]	; 0x30
   19d04:	and	r0, r0, #17
   19d08:	cmp	r0, #16
   19d0c:	moveq	r0, #1
   19d10:	bxeq	lr
   19d14:	cmp	r0, #17
   19d18:	movne	r0, #0
   19d1c:	bxne	lr
   19d20:	ldr	r0, [r1, #48]	; 0x30
   19d24:	cmp	r0, #0
   19d28:	movwne	r0, #1
   19d2c:	bx	lr
   19d30:	clz	r2, r1
   19d34:	clz	r3, r0
   19d38:	lsr	r2, r2, #5
   19d3c:	lsr	r3, r3, #5
   19d40:	orrs	r2, r3, r2
   19d44:	movwne	r1, #1
   19d48:	movwne	r0, #1
   19d4c:	cmp	r1, #0
   19d50:	beq	19d80 <__assert_fail@plt+0x89dc>
   19d54:	mvn	r2, #-2147483648	; 0x80000000
   19d58:	udiv	r2, r2, r1
   19d5c:	cmp	r2, r0
   19d60:	bcs	19d80 <__assert_fail@plt+0x89dc>
   19d64:	push	{fp, lr}
   19d68:	mov	fp, sp
   19d6c:	bl	11260 <__errno_location@plt>
   19d70:	mov	r1, #12
   19d74:	str	r1, [r0]
   19d78:	mov	r0, #0
   19d7c:	pop	{fp, pc}
   19d80:	b	110c8 <calloc@plt>
   19d84:	cmp	r0, #0
   19d88:	movweq	r0, #1
   19d8c:	cmn	r0, #1
   19d90:	ble	19d98 <__assert_fail@plt+0x89f4>
   19d94:	b	111dc <malloc@plt>
   19d98:	push	{fp, lr}
   19d9c:	mov	fp, sp
   19da0:	bl	11260 <__errno_location@plt>
   19da4:	mov	r1, #12
   19da8:	str	r1, [r0]
   19dac:	mov	r0, #0
   19db0:	pop	{fp, pc}
   19db4:	push	{fp, lr}
   19db8:	mov	fp, sp
   19dbc:	cmp	r0, #0
   19dc0:	beq	19ddc <__assert_fail@plt+0x8a38>
   19dc4:	cmp	r1, #0
   19dc8:	beq	19de8 <__assert_fail@plt+0x8a44>
   19dcc:	cmn	r1, #1
   19dd0:	ble	19df4 <__assert_fail@plt+0x8a50>
   19dd4:	pop	{fp, lr}
   19dd8:	b	1114c <realloc@plt>
   19ddc:	mov	r0, r1
   19de0:	pop	{fp, lr}
   19de4:	b	19d84 <__assert_fail@plt+0x89e0>
   19de8:	bl	1a290 <__assert_fail@plt+0x8eec>
   19dec:	mov	r0, #0
   19df0:	pop	{fp, pc}
   19df4:	bl	11260 <__errno_location@plt>
   19df8:	mov	r1, #12
   19dfc:	str	r1, [r0]
   19e00:	mov	r0, #0
   19e04:	pop	{fp, pc}
   19e08:	push	{r4, r5, r6, sl, fp, lr}
   19e0c:	add	fp, sp, #16
   19e10:	mov	r4, r0
   19e14:	bl	111ac <__fpending@plt>
   19e18:	ldr	r6, [r4]
   19e1c:	mov	r5, r0
   19e20:	mov	r0, r4
   19e24:	bl	19f7c <__assert_fail@plt+0x8bd8>
   19e28:	tst	r6, #32
   19e2c:	bne	19e64 <__assert_fail@plt+0x8ac0>
   19e30:	cmp	r0, #0
   19e34:	mov	r4, r0
   19e38:	mvnne	r4, #0
   19e3c:	cmp	r5, #0
   19e40:	bne	19e70 <__assert_fail@plt+0x8acc>
   19e44:	cmp	r0, #0
   19e48:	beq	19e70 <__assert_fail@plt+0x8acc>
   19e4c:	bl	11260 <__errno_location@plt>
   19e50:	ldr	r0, [r0]
   19e54:	subs	r4, r0, #9
   19e58:	mvnne	r4, #0
   19e5c:	mov	r0, r4
   19e60:	pop	{r4, r5, r6, sl, fp, pc}
   19e64:	mvn	r4, #0
   19e68:	cmp	r0, #0
   19e6c:	beq	19e78 <__assert_fail@plt+0x8ad4>
   19e70:	mov	r0, r4
   19e74:	pop	{r4, r5, r6, sl, fp, pc}
   19e78:	bl	11260 <__errno_location@plt>
   19e7c:	mov	r1, #0
   19e80:	str	r1, [r0]
   19e84:	mov	r0, r4
   19e88:	pop	{r4, r5, r6, sl, fp, pc}
   19e8c:	movw	r2, #62998	; 0xf616
   19e90:	mov	r1, #0
   19e94:	movt	r2, #149	; 0x95
   19e98:	str	r1, [r0, #16]
   19e9c:	str	r1, [r0, #20]
   19ea0:	str	r2, [r0, #24]
   19ea4:	bx	lr
   19ea8:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   19eac:	add	fp, sp, #24
   19eb0:	ldr	r2, [r0, #24]
   19eb4:	movw	r3, #62998	; 0xf616
   19eb8:	movt	r3, #149	; 0x95
   19ebc:	cmp	r2, r3
   19ec0:	bne	19f5c <__assert_fail@plt+0x8bb8>
   19ec4:	add	r3, r0, #16
   19ec8:	add	ip, r0, #8
   19ecc:	ldrd	r4, [r3]
   19ed0:	orrs	r2, r4, r5
   19ed4:	beq	19f10 <__assert_fail@plt+0x8b6c>
   19ed8:	ldr	r6, [r1, #96]	; 0x60
   19edc:	ldr	r9, [r1, #100]	; 0x64
   19ee0:	ldm	r0, {r2, r7}
   19ee4:	eor	r7, r9, r7
   19ee8:	eor	r2, r6, r2
   19eec:	orrs	r2, r2, r7
   19ef0:	bne	19f10 <__assert_fail@plt+0x8b6c>
   19ef4:	ldm	ip, {r2, r7}
   19ef8:	ldm	r1, {r6, r9}
   19efc:	eor	r7, r9, r7
   19f00:	eor	r2, r6, r2
   19f04:	orrs	r2, r2, r7
   19f08:	mov	r2, #1
   19f0c:	beq	19f48 <__assert_fail@plt+0x8ba4>
   19f10:	adds	r6, r4, #1
   19f14:	adc	r7, r5, #0
   19f18:	and	r2, r6, r4
   19f1c:	strd	r6, [r3]
   19f20:	and	r3, r7, r5
   19f24:	orrs	r2, r2, r3
   19f28:	mov	r2, #0
   19f2c:	bne	19f48 <__assert_fail@plt+0x8ba4>
   19f30:	orrs	r3, r6, r7
   19f34:	beq	19f50 <__assert_fail@plt+0x8bac>
   19f38:	ldrd	r4, [r1]
   19f3c:	strd	r4, [ip]
   19f40:	ldrd	r4, [r1, #96]	; 0x60
   19f44:	strd	r4, [r0]
   19f48:	mov	r0, r2
   19f4c:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   19f50:	mov	r2, #1
   19f54:	mov	r0, r2
   19f58:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   19f5c:	movw	r0, #46802	; 0xb6d2
   19f60:	movw	r1, #46826	; 0xb6ea
   19f64:	movw	r3, #46844	; 0xb6fc
   19f68:	mov	r2, #60	; 0x3c
   19f6c:	movt	r0, #1
   19f70:	movt	r1, #1
   19f74:	movt	r3, #1
   19f78:	bl	113a4 <__assert_fail@plt>
   19f7c:	push	{r4, r5, r6, sl, fp, lr}
   19f80:	add	fp, sp, #16
   19f84:	sub	sp, sp, #8
   19f88:	mov	r4, r0
   19f8c:	bl	1129c <fileno@plt>
   19f90:	cmn	r0, #1
   19f94:	ble	1a008 <__assert_fail@plt+0x8c64>
   19f98:	mov	r0, r4
   19f9c:	bl	111f4 <__freading@plt>
   19fa0:	cmp	r0, #0
   19fa4:	beq	19fd0 <__assert_fail@plt+0x8c2c>
   19fa8:	mov	r0, r4
   19fac:	bl	1129c <fileno@plt>
   19fb0:	mov	r1, #1
   19fb4:	mov	r2, #0
   19fb8:	mov	r3, #0
   19fbc:	str	r1, [sp]
   19fc0:	bl	11194 <lseek64@plt>
   19fc4:	and	r0, r0, r1
   19fc8:	cmn	r0, #1
   19fcc:	beq	1a008 <__assert_fail@plt+0x8c64>
   19fd0:	mov	r0, r4
   19fd4:	bl	1a234 <__assert_fail@plt+0x8e90>
   19fd8:	cmp	r0, #0
   19fdc:	beq	1a008 <__assert_fail@plt+0x8c64>
   19fe0:	bl	11260 <__errno_location@plt>
   19fe4:	ldr	r6, [r0]
   19fe8:	mov	r5, r0
   19fec:	mov	r0, r4
   19ff0:	bl	112b4 <fclose@plt>
   19ff4:	cmp	r6, #0
   19ff8:	strne	r6, [r5]
   19ffc:	mvnne	r0, #0
   1a000:	sub	sp, fp, #16
   1a004:	pop	{r4, r5, r6, sl, fp, pc}
   1a008:	mov	r0, r4
   1a00c:	sub	sp, fp, #16
   1a010:	pop	{r4, r5, r6, sl, fp, lr}
   1a014:	b	112b4 <fclose@plt>
   1a018:	sub	sp, sp, #8
   1a01c:	push	{r4, r5, r6, r7, fp, lr}
   1a020:	add	fp, sp, #16
   1a024:	sub	sp, sp, #8
   1a028:	mov	r5, r0
   1a02c:	add	r0, fp, #8
   1a030:	cmp	r1, #11
   1a034:	str	r2, [fp, #8]
   1a038:	str	r3, [fp, #12]
   1a03c:	str	r0, [sp, #4]
   1a040:	bhi	1a07c <__assert_fail@plt+0x8cd8>
   1a044:	mov	r0, #1
   1a048:	movw	r2, #1300	; 0x514
   1a04c:	tst	r2, r0, lsl r1
   1a050:	bne	1a13c <__assert_fail@plt+0x8d98>
   1a054:	movw	r2, #2570	; 0xa0a
   1a058:	tst	r2, r0, lsl r1
   1a05c:	bne	1a0a4 <__assert_fail@plt+0x8d00>
   1a060:	cmp	r1, #0
   1a064:	bne	1a07c <__assert_fail@plt+0x8cd8>
   1a068:	ldr	r0, [sp, #4]
   1a06c:	add	r1, r0, #4
   1a070:	str	r1, [sp, #4]
   1a074:	mov	r1, #0
   1a078:	b	1a148 <__assert_fail@plt+0x8da4>
   1a07c:	sub	r0, r1, #1024	; 0x400
   1a080:	cmp	r0, #10
   1a084:	bhi	1a13c <__assert_fail@plt+0x8d98>
   1a088:	mov	r2, #1
   1a08c:	movw	r3, #645	; 0x285
   1a090:	tst	r3, r2, lsl r0
   1a094:	bne	1a13c <__assert_fail@plt+0x8d98>
   1a098:	movw	r3, #1282	; 0x502
   1a09c:	tst	r3, r2, lsl r0
   1a0a0:	beq	1a0b0 <__assert_fail@plt+0x8d0c>
   1a0a4:	mov	r0, r5
   1a0a8:	bl	112cc <fcntl64@plt>
   1a0ac:	b	1a154 <__assert_fail@plt+0x8db0>
   1a0b0:	cmp	r0, #6
   1a0b4:	bne	1a13c <__assert_fail@plt+0x8d98>
   1a0b8:	ldr	r0, [sp, #4]
   1a0bc:	movw	r7, #49896	; 0xc2e8
   1a0c0:	movt	r7, #2
   1a0c4:	add	r1, r0, #4
   1a0c8:	str	r1, [sp, #4]
   1a0cc:	ldr	r6, [r0]
   1a0d0:	ldr	r0, [r7]
   1a0d4:	cmp	r0, #0
   1a0d8:	bmi	1a178 <__assert_fail@plt+0x8dd4>
   1a0dc:	mov	r0, r5
   1a0e0:	movw	r1, #1030	; 0x406
   1a0e4:	mov	r2, r6
   1a0e8:	bl	112cc <fcntl64@plt>
   1a0ec:	mov	r4, r0
   1a0f0:	cmn	r0, #1
   1a0f4:	bgt	1a16c <__assert_fail@plt+0x8dc8>
   1a0f8:	bl	11260 <__errno_location@plt>
   1a0fc:	ldr	r0, [r0]
   1a100:	cmp	r0, #22
   1a104:	bne	1a16c <__assert_fail@plt+0x8dc8>
   1a108:	mov	r0, r5
   1a10c:	mov	r1, #0
   1a110:	mov	r2, r6
   1a114:	bl	112cc <fcntl64@plt>
   1a118:	mov	r4, r0
   1a11c:	cmp	r0, #0
   1a120:	bmi	1a158 <__assert_fail@plt+0x8db4>
   1a124:	mvn	r0, #0
   1a128:	str	r0, [r7]
   1a12c:	mov	r0, #1
   1a130:	cmp	r0, #0
   1a134:	bne	1a1a4 <__assert_fail@plt+0x8e00>
   1a138:	b	1a158 <__assert_fail@plt+0x8db4>
   1a13c:	ldr	r0, [sp, #4]
   1a140:	add	r2, r0, #4
   1a144:	str	r2, [sp, #4]
   1a148:	ldr	r2, [r0]
   1a14c:	mov	r0, r5
   1a150:	bl	112cc <fcntl64@plt>
   1a154:	mov	r4, r0
   1a158:	mov	r0, r4
   1a15c:	sub	sp, fp, #16
   1a160:	pop	{r4, r5, r6, r7, fp, lr}
   1a164:	add	sp, sp, #8
   1a168:	bx	lr
   1a16c:	mov	r0, #1
   1a170:	str	r0, [r7]
   1a174:	b	1a158 <__assert_fail@plt+0x8db4>
   1a178:	mov	r0, r5
   1a17c:	mov	r1, #0
   1a180:	mov	r2, r6
   1a184:	bl	112cc <fcntl64@plt>
   1a188:	mov	r4, r0
   1a18c:	ldr	r0, [r7]
   1a190:	add	r0, r0, #1
   1a194:	clz	r0, r0
   1a198:	lsr	r0, r0, #5
   1a19c:	cmp	r0, #0
   1a1a0:	beq	1a158 <__assert_fail@plt+0x8db4>
   1a1a4:	cmp	r4, #0
   1a1a8:	bmi	1a158 <__assert_fail@plt+0x8db4>
   1a1ac:	mov	r0, r4
   1a1b0:	mov	r1, #1
   1a1b4:	bl	112cc <fcntl64@plt>
   1a1b8:	cmp	r0, #0
   1a1bc:	bmi	1a1d8 <__assert_fail@plt+0x8e34>
   1a1c0:	orr	r2, r0, #1
   1a1c4:	mov	r0, r4
   1a1c8:	mov	r1, #2
   1a1cc:	bl	112cc <fcntl64@plt>
   1a1d0:	cmn	r0, #1
   1a1d4:	bne	1a158 <__assert_fail@plt+0x8db4>
   1a1d8:	bl	11260 <__errno_location@plt>
   1a1dc:	ldr	r6, [r0]
   1a1e0:	mov	r5, r0
   1a1e4:	mov	r0, r4
   1a1e8:	bl	11380 <close@plt>
   1a1ec:	str	r6, [r5]
   1a1f0:	mvn	r4, #0
   1a1f4:	b	1a158 <__assert_fail@plt+0x8db4>
   1a1f8:	sub	sp, sp, #8
   1a1fc:	push	{fp, lr}
   1a200:	mov	fp, sp
   1a204:	sub	sp, sp, #8
   1a208:	str	r2, [fp, #8]
   1a20c:	str	r3, [fp, #12]
   1a210:	tst	r1, #64	; 0x40
   1a214:	mov	r2, #0
   1a218:	ldrne	r2, [fp, #8]
   1a21c:	bl	111d0 <open64@plt>
   1a220:	bl	1902c <__assert_fail@plt+0x7c88>
   1a224:	mov	sp, fp
   1a228:	pop	{fp, lr}
   1a22c:	add	sp, sp, #8
   1a230:	bx	lr
   1a234:	push	{r4, sl, fp, lr}
   1a238:	add	fp, sp, #8
   1a23c:	sub	sp, sp, #8
   1a240:	mov	r4, r0
   1a244:	cmp	r0, #0
   1a248:	beq	1a280 <__assert_fail@plt+0x8edc>
   1a24c:	mov	r0, r4
   1a250:	bl	111f4 <__freading@plt>
   1a254:	cmp	r0, #0
   1a258:	beq	1a280 <__assert_fail@plt+0x8edc>
   1a25c:	ldrb	r0, [r4, #1]
   1a260:	tst	r0, #1
   1a264:	beq	1a280 <__assert_fail@plt+0x8edc>
   1a268:	mov	r0, #1
   1a26c:	mov	r2, #0
   1a270:	mov	r3, #0
   1a274:	str	r0, [sp]
   1a278:	mov	r0, r4
   1a27c:	bl	1a2b8 <__assert_fail@plt+0x8f14>
   1a280:	mov	r0, r4
   1a284:	sub	sp, fp, #8
   1a288:	pop	{r4, sl, fp, lr}
   1a28c:	b	110f8 <fflush@plt>
   1a290:	push	{r4, r5, r6, sl, fp, lr}
   1a294:	add	fp, sp, #16
   1a298:	mov	r4, r0
   1a29c:	bl	11260 <__errno_location@plt>
   1a2a0:	ldr	r6, [r0]
   1a2a4:	mov	r5, r0
   1a2a8:	mov	r0, r4
   1a2ac:	bl	11110 <free@plt>
   1a2b0:	str	r6, [r5]
   1a2b4:	pop	{r4, r5, r6, sl, fp, pc}
   1a2b8:	push	{r4, r5, r6, r7, fp, lr}
   1a2bc:	add	fp, sp, #16
   1a2c0:	sub	sp, sp, #8
   1a2c4:	mov	r4, r0
   1a2c8:	ldr	r0, [r0, #4]
   1a2cc:	mov	r5, r3
   1a2d0:	mov	r6, r2
   1a2d4:	ldr	r1, [r4, #8]
   1a2d8:	cmp	r1, r0
   1a2dc:	bne	1a2f8 <__assert_fail@plt+0x8f54>
   1a2e0:	ldrd	r0, [r4, #16]
   1a2e4:	cmp	r1, r0
   1a2e8:	bne	1a2f8 <__assert_fail@plt+0x8f54>
   1a2ec:	ldr	r0, [r4, #36]	; 0x24
   1a2f0:	cmp	r0, #0
   1a2f4:	beq	1a310 <__assert_fail@plt+0x8f6c>
   1a2f8:	mov	r0, r4
   1a2fc:	mov	r2, r6
   1a300:	mov	r3, r5
   1a304:	sub	sp, fp, #16
   1a308:	pop	{r4, r5, r6, r7, fp, lr}
   1a30c:	b	112c0 <fseeko64@plt>
   1a310:	ldr	r7, [fp, #8]
   1a314:	mov	r0, r4
   1a318:	bl	1129c <fileno@plt>
   1a31c:	mov	r2, r6
   1a320:	mov	r3, r5
   1a324:	str	r7, [sp]
   1a328:	bl	11194 <lseek64@plt>
   1a32c:	and	r2, r0, r1
   1a330:	cmn	r2, #1
   1a334:	beq	1a354 <__assert_fail@plt+0x8fb0>
   1a338:	strd	r0, [r4, #80]	; 0x50
   1a33c:	ldr	r0, [r4]
   1a340:	bic	r0, r0, #16
   1a344:	str	r0, [r4]
   1a348:	mov	r0, #0
   1a34c:	sub	sp, fp, #16
   1a350:	pop	{r4, r5, r6, r7, fp, pc}
   1a354:	mvn	r0, #0
   1a358:	sub	sp, fp, #16
   1a35c:	pop	{r4, r5, r6, r7, fp, pc}
   1a360:	push	{fp, lr}
   1a364:	mov	fp, sp
   1a368:	mov	r0, #14
   1a36c:	bl	112f0 <nl_langinfo@plt>
   1a370:	movw	r1, #43106	; 0xa862
   1a374:	cmp	r0, #0
   1a378:	movt	r1, #1
   1a37c:	movne	r1, r0
   1a380:	movw	r0, #46911	; 0xb73f
   1a384:	ldrb	r2, [r1]
   1a388:	movt	r0, #1
   1a38c:	cmp	r2, #0
   1a390:	movne	r0, r1
   1a394:	pop	{fp, pc}
   1a398:	push	{r4, r5, r6, r7, fp, lr}
   1a39c:	add	fp, sp, #16
   1a3a0:	sub	sp, sp, #8
   1a3a4:	cmp	r0, #0
   1a3a8:	add	r5, sp, #4
   1a3ac:	mov	r7, r2
   1a3b0:	mov	r4, r1
   1a3b4:	movne	r5, r0
   1a3b8:	mov	r0, r5
   1a3bc:	bl	111b8 <mbrtowc@plt>
   1a3c0:	mov	r6, r0
   1a3c4:	cmp	r7, #0
   1a3c8:	beq	1a3f0 <__assert_fail@plt+0x904c>
   1a3cc:	cmn	r6, #2
   1a3d0:	bcc	1a3f0 <__assert_fail@plt+0x904c>
   1a3d4:	mov	r0, #0
   1a3d8:	bl	1a444 <__assert_fail@plt+0x90a0>
   1a3dc:	cmp	r0, #0
   1a3e0:	bne	1a3f0 <__assert_fail@plt+0x904c>
   1a3e4:	ldrb	r0, [r4]
   1a3e8:	mov	r6, #1
   1a3ec:	str	r0, [r5]
   1a3f0:	mov	r0, r6
   1a3f4:	sub	sp, fp, #16
   1a3f8:	pop	{r4, r5, r6, r7, fp, pc}
   1a3fc:	cmp	r2, #0
   1a400:	beq	1a430 <__assert_fail@plt+0x908c>
   1a404:	mvn	r3, #0
   1a408:	udiv	r3, r3, r2
   1a40c:	cmp	r3, r1
   1a410:	bcs	1a430 <__assert_fail@plt+0x908c>
   1a414:	push	{fp, lr}
   1a418:	mov	fp, sp
   1a41c:	bl	11260 <__errno_location@plt>
   1a420:	mov	r1, #12
   1a424:	str	r1, [r0]
   1a428:	mov	r0, #0
   1a42c:	pop	{fp, pc}
   1a430:	mul	r1, r2, r1
   1a434:	b	19db4 <__assert_fail@plt+0x8a10>
   1a438:	mov	r1, #0
   1a43c:	mov	r2, #3
   1a440:	b	1a018 <__assert_fail@plt+0x8c74>
   1a444:	push	{r4, sl, fp, lr}
   1a448:	add	fp, sp, #8
   1a44c:	sub	sp, sp, #264	; 0x108
   1a450:	add	r1, sp, #7
   1a454:	movw	r2, #257	; 0x101
   1a458:	bl	1a4b0 <__assert_fail@plt+0x910c>
   1a45c:	mov	r4, #0
   1a460:	cmp	r0, #0
   1a464:	bne	1a4a4 <__assert_fail@plt+0x9100>
   1a468:	movw	r1, #46917	; 0xb745
   1a46c:	add	r0, sp, #7
   1a470:	mov	r2, #2
   1a474:	movt	r1, #1
   1a478:	bl	11230 <bcmp@plt>
   1a47c:	cmp	r0, #0
   1a480:	beq	1a4a4 <__assert_fail@plt+0x9100>
   1a484:	movw	r1, #46919	; 0xb747
   1a488:	add	r0, sp, #7
   1a48c:	mov	r2, #6
   1a490:	movt	r1, #1
   1a494:	bl	11230 <bcmp@plt>
   1a498:	cmp	r0, #0
   1a49c:	mov	r4, r0
   1a4a0:	movwne	r4, #1
   1a4a4:	mov	r0, r4
   1a4a8:	sub	sp, fp, #8
   1a4ac:	pop	{r4, sl, fp, pc}
   1a4b0:	push	{r4, r5, r6, r7, fp, lr}
   1a4b4:	add	fp, sp, #16
   1a4b8:	mov	r4, r1
   1a4bc:	mov	r1, #0
   1a4c0:	mov	r6, r2
   1a4c4:	bl	112d8 <setlocale@plt>
   1a4c8:	cmp	r0, #0
   1a4cc:	beq	1a4fc <__assert_fail@plt+0x9158>
   1a4d0:	mov	r7, r0
   1a4d4:	bl	1123c <strlen@plt>
   1a4d8:	cmp	r0, r6
   1a4dc:	bcs	1a518 <__assert_fail@plt+0x9174>
   1a4e0:	add	r2, r0, #1
   1a4e4:	mov	r0, r4
   1a4e8:	mov	r1, r7
   1a4ec:	bl	11128 <memcpy@plt>
   1a4f0:	mov	r5, #0
   1a4f4:	mov	r0, r5
   1a4f8:	pop	{r4, r5, r6, r7, fp, pc}
   1a4fc:	mov	r5, #22
   1a500:	cmp	r6, #0
   1a504:	beq	1a540 <__assert_fail@plt+0x919c>
   1a508:	mov	r0, #0
   1a50c:	strb	r0, [r4]
   1a510:	mov	r0, r5
   1a514:	pop	{r4, r5, r6, r7, fp, pc}
   1a518:	mov	r5, #34	; 0x22
   1a51c:	cmp	r6, #0
   1a520:	beq	1a540 <__assert_fail@plt+0x919c>
   1a524:	sub	r6, r6, #1
   1a528:	mov	r0, r4
   1a52c:	mov	r1, r7
   1a530:	mov	r2, r6
   1a534:	bl	11128 <memcpy@plt>
   1a538:	mov	r0, #0
   1a53c:	strb	r0, [r4, r6]
   1a540:	mov	r0, r5
   1a544:	pop	{r4, r5, r6, r7, fp, pc}
   1a548:	mov	r1, #0
   1a54c:	b	112d8 <setlocale@plt>
   1a550:	cmp	r3, #0
   1a554:	cmpeq	r2, #0
   1a558:	bne	1a570 <__assert_fail@plt+0x91cc>
   1a55c:	cmp	r1, #0
   1a560:	cmpeq	r0, #0
   1a564:	mvnne	r1, #0
   1a568:	mvnne	r0, #0
   1a56c:	b	1a58c <__assert_fail@plt+0x91e8>
   1a570:	sub	sp, sp, #8
   1a574:	push	{sp, lr}
   1a578:	bl	1a59c <__assert_fail@plt+0x91f8>
   1a57c:	ldr	lr, [sp, #4]
   1a580:	add	sp, sp, #8
   1a584:	pop	{r2, r3}
   1a588:	bx	lr
   1a58c:	push	{r1, lr}
   1a590:	mov	r0, #8
   1a594:	bl	110e0 <raise@plt>
   1a598:	pop	{r1, pc}
   1a59c:	cmp	r1, r3
   1a5a0:	cmpeq	r0, r2
   1a5a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5a8:	mov	r4, r0
   1a5ac:	movcc	r0, #0
   1a5b0:	mov	r5, r1
   1a5b4:	ldr	lr, [sp, #36]	; 0x24
   1a5b8:	movcc	r1, r0
   1a5bc:	bcc	1a6b8 <__assert_fail@plt+0x9314>
   1a5c0:	cmp	r3, #0
   1a5c4:	clzeq	ip, r2
   1a5c8:	clzne	ip, r3
   1a5cc:	addeq	ip, ip, #32
   1a5d0:	cmp	r5, #0
   1a5d4:	clzeq	r1, r4
   1a5d8:	addeq	r1, r1, #32
   1a5dc:	clzne	r1, r5
   1a5e0:	sub	ip, ip, r1
   1a5e4:	sub	sl, ip, #32
   1a5e8:	lsl	r9, r3, ip
   1a5ec:	rsb	fp, ip, #32
   1a5f0:	orr	r9, r9, r2, lsl sl
   1a5f4:	orr	r9, r9, r2, lsr fp
   1a5f8:	lsl	r8, r2, ip
   1a5fc:	cmp	r5, r9
   1a600:	cmpeq	r4, r8
   1a604:	movcc	r0, #0
   1a608:	movcc	r1, r0
   1a60c:	bcc	1a628 <__assert_fail@plt+0x9284>
   1a610:	mov	r0, #1
   1a614:	subs	r4, r4, r8
   1a618:	lsl	r1, r0, sl
   1a61c:	orr	r1, r1, r0, lsr fp
   1a620:	lsl	r0, r0, ip
   1a624:	sbc	r5, r5, r9
   1a628:	cmp	ip, #0
   1a62c:	beq	1a6b8 <__assert_fail@plt+0x9314>
   1a630:	lsr	r6, r8, #1
   1a634:	orr	r6, r6, r9, lsl #31
   1a638:	lsr	r7, r9, #1
   1a63c:	mov	r2, ip
   1a640:	b	1a664 <__assert_fail@plt+0x92c0>
   1a644:	subs	r3, r4, r6
   1a648:	sbc	r8, r5, r7
   1a64c:	adds	r3, r3, r3
   1a650:	adc	r8, r8, r8
   1a654:	adds	r4, r3, #1
   1a658:	adc	r5, r8, #0
   1a65c:	subs	r2, r2, #1
   1a660:	beq	1a680 <__assert_fail@plt+0x92dc>
   1a664:	cmp	r5, r7
   1a668:	cmpeq	r4, r6
   1a66c:	bcs	1a644 <__assert_fail@plt+0x92a0>
   1a670:	adds	r4, r4, r4
   1a674:	adc	r5, r5, r5
   1a678:	subs	r2, r2, #1
   1a67c:	bne	1a664 <__assert_fail@plt+0x92c0>
   1a680:	lsr	r3, r4, ip
   1a684:	orr	r3, r3, r5, lsl fp
   1a688:	lsr	r2, r5, ip
   1a68c:	orr	r3, r3, r5, lsr sl
   1a690:	adds	r0, r0, r4
   1a694:	mov	r4, r3
   1a698:	lsl	r3, r2, ip
   1a69c:	orr	r3, r3, r4, lsl sl
   1a6a0:	lsl	ip, r4, ip
   1a6a4:	orr	r3, r3, r4, lsr fp
   1a6a8:	adc	r1, r1, r5
   1a6ac:	subs	r0, r0, ip
   1a6b0:	mov	r5, r2
   1a6b4:	sbc	r1, r1, r3
   1a6b8:	cmp	lr, #0
   1a6bc:	strdne	r4, [lr]
   1a6c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a6c8:	mov	r7, r0
   1a6cc:	ldr	r6, [pc, #72]	; 1a71c <__assert_fail@plt+0x9378>
   1a6d0:	ldr	r5, [pc, #72]	; 1a720 <__assert_fail@plt+0x937c>
   1a6d4:	add	r6, pc, r6
   1a6d8:	add	r5, pc, r5
   1a6dc:	sub	r6, r6, r5
   1a6e0:	mov	r8, r1
   1a6e4:	mov	r9, r2
   1a6e8:	bl	1109c <fstatfs64@plt-0x20>
   1a6ec:	asrs	r6, r6, #2
   1a6f0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a6f4:	mov	r4, #0
   1a6f8:	add	r4, r4, #1
   1a6fc:	ldr	r3, [r5], #4
   1a700:	mov	r2, r9
   1a704:	mov	r1, r8
   1a708:	mov	r0, r7
   1a70c:	blx	r3
   1a710:	cmp	r6, r4
   1a714:	bne	1a6f8 <__assert_fail@plt+0x9354>
   1a718:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a71c:	andeq	r1, r1, r0, lsr r8
   1a720:	andeq	r1, r1, r8, lsr #16
   1a724:	bx	lr
   1a728:	ldr	r3, [pc, #12]	; 1a73c <__assert_fail@plt+0x9398>
   1a72c:	mov	r1, #0
   1a730:	add	r3, pc, r3
   1a734:	ldr	r2, [r3]
   1a738:	b	11278 <__cxa_atexit@plt>
   1a73c:	ldrdeq	r1, [r1], -ip

Disassembly of section .fini:

0001a740 <.fini>:
   1a740:	push	{r3, lr}
   1a744:	pop	{r3, pc}
