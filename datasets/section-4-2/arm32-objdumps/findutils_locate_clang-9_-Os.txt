
../repos/findutils/locate/locate:     file format elf32-littlearm


Disassembly of section .init:

000117d8 <.init>:
   117d8:	push	{r3, lr}
   117dc:	bl	11ce4 <__assert_fail@plt+0x48>
   117e0:	pop	{r3, pc}

Disassembly of section .plt:

000117e4 <pthread_mutex_unlock@plt-0x14>:
   117e4:	push	{lr}		; (str lr, [sp, #-4]!)
   117e8:	ldr	lr, [pc, #4]	; 117f4 <pthread_mutex_unlock@plt-0x4>
   117ec:	add	lr, pc, lr
   117f0:	ldr	pc, [lr, #8]!
   117f4:	andeq	r9, r2, ip, lsl #16

000117f8 <pthread_mutex_unlock@plt>:
   117f8:	add	ip, pc, #0, 12
   117fc:	add	ip, ip, #167936	; 0x29000
   11800:	ldr	pc, [ip, #2060]!	; 0x80c

00011804 <fdopen@plt>:
   11804:	add	ip, pc, #0, 12
   11808:	add	ip, ip, #167936	; 0x29000
   1180c:	ldr	pc, [ip, #2052]!	; 0x804

00011810 <calloc@plt>:
   11810:	add	ip, pc, #0, 12
   11814:	add	ip, ip, #167936	; 0x29000
   11818:	ldr	pc, [ip, #2044]!	; 0x7fc

0001181c <wctype@plt>:
   1181c:	add	ip, pc, #0, 12
   11820:	add	ip, ip, #167936	; 0x29000
   11824:	ldr	pc, [ip, #2036]!	; 0x7f4

00011828 <raise@plt>:
   11828:	add	ip, pc, #0, 12
   1182c:	add	ip, ip, #167936	; 0x29000
   11830:	ldr	pc, [ip, #2028]!	; 0x7ec

00011834 <wcrtomb@plt>:
   11834:	add	ip, pc, #0, 12
   11838:	add	ip, ip, #167936	; 0x29000
   1183c:	ldr	pc, [ip, #2020]!	; 0x7e4

00011840 <iswctype@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #167936	; 0x29000
   11848:	ldr	pc, [ip, #2012]!	; 0x7dc

0001184c <strcmp@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #167936	; 0x29000
   11854:	ldr	pc, [ip, #2004]!	; 0x7d4

00011858 <printf@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #167936	; 0x29000
   11860:	ldr	pc, [ip, #1996]!	; 0x7cc

00011864 <pthread_mutex_destroy@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #167936	; 0x29000
   1186c:	ldr	pc, [ip, #1988]!	; 0x7c4

00011870 <fflush@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #167936	; 0x29000
   11878:	ldr	pc, [ip, #1980]!	; 0x7bc

0001187c <wcwidth@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #167936	; 0x29000
   11884:	ldr	pc, [ip, #1972]!	; 0x7b4

00011888 <getuid@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #167936	; 0x29000
   11890:	ldr	pc, [ip, #1964]!	; 0x7ac

00011894 <memmove@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #167936	; 0x29000
   1189c:	ldr	pc, [ip, #1956]!	; 0x7a4

000118a0 <free@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #167936	; 0x29000
   118a8:	ldr	pc, [ip, #1948]!	; 0x79c

000118ac <pthread_mutex_lock@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #167936	; 0x29000
   118b4:	ldr	pc, [ip, #1940]!	; 0x794

000118b8 <ferror@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #167936	; 0x29000
   118c0:	ldr	pc, [ip, #1932]!	; 0x78c

000118c4 <strndup@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #167936	; 0x29000
   118cc:	ldr	pc, [ip, #1924]!	; 0x784

000118d0 <_exit@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #167936	; 0x29000
   118d8:	ldr	pc, [ip, #1916]!	; 0x77c

000118dc <memcpy@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #167936	; 0x29000
   118e4:	ldr	pc, [ip, #1908]!	; 0x774

000118e8 <tolower@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #167936	; 0x29000
   118f0:	ldr	pc, [ip, #1900]!	; 0x76c

000118f4 <pthread_mutex_init@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #167936	; 0x29000
   118fc:	ldr	pc, [ip, #1892]!	; 0x764

00011900 <towlower@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #167936	; 0x29000
   11908:	ldr	pc, [ip, #1884]!	; 0x75c

0001190c <mbsinit@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #167936	; 0x29000
   11914:	ldr	pc, [ip, #1876]!	; 0x754

00011918 <time@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #167936	; 0x29000
   11920:	ldr	pc, [ip, #1868]!	; 0x74c

00011924 <dcgettext@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #167936	; 0x29000
   1192c:	ldr	pc, [ip, #1860]!	; 0x744

00011930 <realloc@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #167936	; 0x29000
   11938:	ldr	pc, [ip, #1852]!	; 0x73c

0001193c <textdomain@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #167936	; 0x29000
   11944:	ldr	pc, [ip, #1844]!	; 0x734

00011948 <iswcntrl@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #167936	; 0x29000
   11950:	ldr	pc, [ip, #1836]!	; 0x72c

00011954 <geteuid@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #167936	; 0x29000
   1195c:	ldr	pc, [ip, #1828]!	; 0x724

00011960 <iswprint@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #167936	; 0x29000
   11968:	ldr	pc, [ip, #1820]!	; 0x71c

0001196c <setgroups@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #167936	; 0x29000
   11974:	ldr	pc, [ip, #1812]!	; 0x714

00011978 <__fxstat64@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #167936	; 0x29000
   11980:	ldr	pc, [ip, #1804]!	; 0x70c

00011984 <lseek64@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #167936	; 0x29000
   1198c:	ldr	pc, [ip, #1796]!	; 0x704

00011990 <__ctype_get_mb_cur_max@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #167936	; 0x29000
   11998:	ldr	pc, [ip, #1788]!	; 0x6fc

0001199c <fread@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #167936	; 0x29000
   119a4:	ldr	pc, [ip, #1780]!	; 0x6f4

000119a8 <__fpending@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #167936	; 0x29000
   119b0:	ldr	pc, [ip, #1772]!	; 0x6ec

000119b4 <mbrtowc@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #167936	; 0x29000
   119bc:	ldr	pc, [ip, #1764]!	; 0x6e4

000119c0 <error@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #167936	; 0x29000
   119c8:	ldr	pc, [ip, #1756]!	; 0x6dc

000119cc <fnmatch@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #167936	; 0x29000
   119d4:	ldr	pc, [ip, #1748]!	; 0x6d4

000119d8 <open64@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #167936	; 0x29000
   119e0:	ldr	pc, [ip, #1740]!	; 0x6cc

000119e4 <getenv@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #167936	; 0x29000
   119ec:	ldr	pc, [ip, #1732]!	; 0x6c4

000119f0 <setgid@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #167936	; 0x29000
   119f8:	ldr	pc, [ip, #1724]!	; 0x6bc

000119fc <malloc@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #167936	; 0x29000
   11a04:	ldr	pc, [ip, #1716]!	; 0x6b4

00011a08 <__libc_start_main@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #167936	; 0x29000
   11a10:	ldr	pc, [ip, #1708]!	; 0x6ac

00011a14 <strftime@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #167936	; 0x29000
   11a1c:	ldr	pc, [ip, #1700]!	; 0x6a4

00011a20 <__freading@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #167936	; 0x29000
   11a28:	ldr	pc, [ip, #1692]!	; 0x69c

00011a2c <localtime@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #167936	; 0x29000
   11a34:	ldr	pc, [ip, #1684]!	; 0x694

00011a38 <__ctype_tolower_loc@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #167936	; 0x29000
   11a40:	ldr	pc, [ip, #1676]!	; 0x68c

00011a44 <__gmon_start__@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #167936	; 0x29000
   11a4c:	ldr	pc, [ip, #1668]!	; 0x684

00011a50 <getopt_long@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #167936	; 0x29000
   11a58:	ldr	pc, [ip, #1660]!	; 0x67c

00011a5c <__ctype_b_loc@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #167936	; 0x29000
   11a64:	ldr	pc, [ip, #1652]!	; 0x674

00011a68 <exit@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #167936	; 0x29000
   11a70:	ldr	pc, [ip, #1644]!	; 0x66c

00011a74 <feof@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #167936	; 0x29000
   11a7c:	ldr	pc, [ip, #1636]!	; 0x664

00011a80 <bcmp@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #167936	; 0x29000
   11a88:	ldr	pc, [ip, #1628]!	; 0x65c

00011a8c <strtoul@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #167936	; 0x29000
   11a94:	ldr	pc, [ip, #1620]!	; 0x654

00011a98 <strlen@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #167936	; 0x29000
   11aa0:	ldr	pc, [ip, #1612]!	; 0x64c

00011aa4 <strchr@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #167936	; 0x29000
   11aac:	ldr	pc, [ip, #1604]!	; 0x644

00011ab0 <fprintf@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #167936	; 0x29000
   11ab8:	ldr	pc, [ip, #1596]!	; 0x63c

00011abc <ungetc@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #167936	; 0x29000
   11ac4:	ldr	pc, [ip, #1588]!	; 0x634

00011ac8 <__errno_location@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #167936	; 0x29000
   11ad0:	ldr	pc, [ip, #1580]!	; 0x62c

00011ad4 <iswalnum@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #167936	; 0x29000
   11adc:	ldr	pc, [ip, #1572]!	; 0x624

00011ae0 <strncasecmp@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #167936	; 0x29000
   11ae8:	ldr	pc, [ip, #1564]!	; 0x61c

00011aec <__cxa_atexit@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #167936	; 0x29000
   11af4:	ldr	pc, [ip, #1556]!	; 0x614

00011af8 <getgid@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #167936	; 0x29000
   11b00:	ldr	pc, [ip, #1548]!	; 0x60c

00011b04 <memset@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #167936	; 0x29000
   11b0c:	ldr	pc, [ip, #1540]!	; 0x604

00011b10 <putchar@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #167936	; 0x29000
   11b18:	ldr	pc, [ip, #1532]!	; 0x5fc

00011b1c <btowc@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #167936	; 0x29000
   11b24:	ldr	pc, [ip, #1524]!	; 0x5f4

00011b28 <fgetc@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #167936	; 0x29000
   11b30:	ldr	pc, [ip, #1516]!	; 0x5ec

00011b34 <fileno@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #167936	; 0x29000
   11b3c:	ldr	pc, [ip, #1508]!	; 0x5e4

00011b40 <difftime@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #167936	; 0x29000
   11b48:	ldr	pc, [ip, #1500]!	; 0x5dc

00011b4c <strtoumax@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #167936	; 0x29000
   11b54:	ldr	pc, [ip, #1492]!	; 0x5d4

00011b58 <memchr@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #167936	; 0x29000
   11b60:	ldr	pc, [ip, #1484]!	; 0x5cc

00011b64 <fclose@plt>:
   11b64:	add	ip, pc, #0, 12
   11b68:	add	ip, ip, #167936	; 0x29000
   11b6c:	ldr	pc, [ip, #1476]!	; 0x5c4

00011b70 <strnlen@plt>:
   11b70:	add	ip, pc, #0, 12
   11b74:	add	ip, ip, #167936	; 0x29000
   11b78:	ldr	pc, [ip, #1468]!	; 0x5bc

00011b7c <fseeko64@plt>:
   11b7c:	add	ip, pc, #0, 12
   11b80:	add	ip, ip, #167936	; 0x29000
   11b84:	ldr	pc, [ip, #1460]!	; 0x5b4

00011b88 <fcntl64@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #167936	; 0x29000
   11b90:	ldr	pc, [ip, #1452]!	; 0x5ac

00011b94 <setlocale@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #167936	; 0x29000
   11b9c:	ldr	pc, [ip, #1444]!	; 0x5a4

00011ba0 <toupper@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #167936	; 0x29000
   11ba8:	ldr	pc, [ip, #1436]!	; 0x59c

00011bac <strrchr@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #167936	; 0x29000
   11bb4:	ldr	pc, [ip, #1428]!	; 0x594

00011bb8 <nl_langinfo@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #167936	; 0x29000
   11bc0:	ldr	pc, [ip, #1420]!	; 0x58c

00011bc4 <setuid@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #167936	; 0x29000
   11bcc:	ldr	pc, [ip, #1412]!	; 0x584

00011bd0 <localeconv@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #167936	; 0x29000
   11bd8:	ldr	pc, [ip, #1404]!	; 0x57c

00011bdc <clearerr@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #167936	; 0x29000
   11be4:	ldr	pc, [ip, #1396]!	; 0x574

00011be8 <sprintf@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #167936	; 0x29000
   11bf0:	ldr	pc, [ip, #1388]!	; 0x56c

00011bf4 <putc@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #167936	; 0x29000
   11bfc:	ldr	pc, [ip, #1380]!	; 0x564

00011c00 <strpbrk@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #167936	; 0x29000
   11c08:	ldr	pc, [ip, #1372]!	; 0x55c

00011c0c <bindtextdomain@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #167936	; 0x29000
   11c14:	ldr	pc, [ip, #1364]!	; 0x554

00011c18 <getdelim@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #167936	; 0x29000
   11c20:	ldr	pc, [ip, #1356]!	; 0x54c

00011c24 <__xstat64@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #167936	; 0x29000
   11c2c:	ldr	pc, [ip, #1348]!	; 0x544

00011c30 <isatty@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #167936	; 0x29000
   11c38:	ldr	pc, [ip, #1340]!	; 0x53c

00011c3c <towupper@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #167936	; 0x29000
   11c44:	ldr	pc, [ip, #1332]!	; 0x534

00011c48 <fputs@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #167936	; 0x29000
   11c50:	ldr	pc, [ip, #1324]!	; 0x52c

00011c54 <strncmp@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #167936	; 0x29000
   11c5c:	ldr	pc, [ip, #1316]!	; 0x524

00011c60 <abort@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #167936	; 0x29000
   11c68:	ldr	pc, [ip, #1308]!	; 0x51c

00011c6c <getc@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #167936	; 0x29000
   11c74:	ldr	pc, [ip, #1300]!	; 0x514

00011c78 <close@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #167936	; 0x29000
   11c80:	ldr	pc, [ip, #1292]!	; 0x50c

00011c84 <__lxstat64@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #167936	; 0x29000
   11c8c:	ldr	pc, [ip, #1284]!	; 0x504

00011c90 <dcngettext@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #167936	; 0x29000
   11c98:	ldr	pc, [ip, #1276]!	; 0x4fc

00011c9c <__assert_fail@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #167936	; 0x29000
   11ca4:	ldr	pc, [ip, #1268]!	; 0x4f4

Disassembly of section .text:

00011ca8 <.text>:
   11ca8:	mov	fp, #0
   11cac:	mov	lr, #0
   11cb0:	pop	{r1}		; (ldr r1, [sp], #4)
   11cb4:	mov	r2, sp
   11cb8:	push	{r2}		; (str r2, [sp, #-4]!)
   11cbc:	push	{r0}		; (str r0, [sp, #-4]!)
   11cc0:	ldr	ip, [pc, #16]	; 11cd8 <__assert_fail@plt+0x3c>
   11cc4:	push	{ip}		; (str ip, [sp, #-4]!)
   11cc8:	ldr	r0, [pc, #12]	; 11cdc <__assert_fail@plt+0x40>
   11ccc:	ldr	r3, [pc, #12]	; 11ce0 <__assert_fail@plt+0x44>
   11cd0:	bl	11a08 <__libc_start_main@plt>
   11cd4:	bl	11c60 <abort@plt>
   11cd8:	andeq	r8, r2, r0, asr #25
   11cdc:	muleq	r1, r8, sp
   11ce0:	andeq	r8, r2, r0, ror #24
   11ce4:	ldr	r3, [pc, #20]	; 11d00 <__assert_fail@plt+0x64>
   11ce8:	ldr	r2, [pc, #20]	; 11d04 <__assert_fail@plt+0x68>
   11cec:	add	r3, pc, r3
   11cf0:	ldr	r2, [r3, r2]
   11cf4:	cmp	r2, #0
   11cf8:	bxeq	lr
   11cfc:	b	11a44 <__gmon_start__@plt>
   11d00:	andeq	r9, r2, ip, lsl #6
   11d04:	muleq	r0, ip, r1
   11d08:	ldr	r0, [pc, #24]	; 11d28 <__assert_fail@plt+0x8c>
   11d0c:	ldr	r3, [pc, #24]	; 11d2c <__assert_fail@plt+0x90>
   11d10:	cmp	r3, r0
   11d14:	bxeq	lr
   11d18:	ldr	r3, [pc, #16]	; 11d30 <__assert_fail@plt+0x94>
   11d1c:	cmp	r3, #0
   11d20:	bxeq	lr
   11d24:	bx	r3
   11d28:	strdeq	fp, [r3], -ip
   11d2c:	strdeq	fp, [r3], -ip
   11d30:	andeq	r0, r0, r0
   11d34:	ldr	r0, [pc, #36]	; 11d60 <__assert_fail@plt+0xc4>
   11d38:	ldr	r1, [pc, #36]	; 11d64 <__assert_fail@plt+0xc8>
   11d3c:	sub	r1, r1, r0
   11d40:	asr	r1, r1, #2
   11d44:	add	r1, r1, r1, lsr #31
   11d48:	asrs	r1, r1, #1
   11d4c:	bxeq	lr
   11d50:	ldr	r3, [pc, #16]	; 11d68 <__assert_fail@plt+0xcc>
   11d54:	cmp	r3, #0
   11d58:	bxeq	lr
   11d5c:	bx	r3
   11d60:	strdeq	fp, [r3], -ip
   11d64:	strdeq	fp, [r3], -ip
   11d68:	andeq	r0, r0, r0
   11d6c:	push	{r4, lr}
   11d70:	ldr	r4, [pc, #24]	; 11d90 <__assert_fail@plt+0xf4>
   11d74:	ldrb	r3, [r4]
   11d78:	cmp	r3, #0
   11d7c:	popne	{r4, pc}
   11d80:	bl	11d08 <__assert_fail@plt+0x6c>
   11d84:	mov	r3, #1
   11d88:	strb	r3, [r4]
   11d8c:	pop	{r4, pc}
   11d90:	andeq	fp, r3, ip, lsl r2
   11d94:	b	11d34 <__assert_fail@plt+0x98>
   11d98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d9c:	add	fp, sp, #28
   11da0:	sub	sp, sp, #4
   11da4:	vpush	{d8-d12}
   11da8:	sub	sp, sp, #104	; 0x68
   11dac:	sub	sp, sp, #3072	; 0xc00
   11db0:	movw	r6, #39360	; 0x99c0
   11db4:	str	r0, [sp, #140]	; 0x8c
   11db8:	add	r0, sp, #160	; 0xa0
   11dbc:	str	r1, [sp, #60]	; 0x3c
   11dc0:	mov	r5, #0
   11dc4:	movt	r6, #2
   11dc8:	add	r1, r0, #48	; 0x30
   11dcc:	add	r0, r0, #80	; 0x50
   11dd0:	str	r1, [sp, #40]	; 0x28
   11dd4:	str	r0, [sp, #36]	; 0x24
   11dd8:	ldr	r4, [r6, r5, lsl #2]
   11ddc:	mov	r0, r4
   11de0:	bl	13704 <__assert_fail@plt+0x1a68>
   11de4:	cmp	r0, #0
   11de8:	bpl	11e04 <__assert_fail@plt+0x168>
   11dec:	add	r5, r5, #1
   11df0:	cmp	r5, #2
   11df4:	bne	11dd8 <__assert_fail@plt+0x13c>
   11df8:	mvn	r0, #0
   11dfc:	str	r0, [sp, #48]	; 0x30
   11e00:	b	11e14 <__assert_fail@plt+0x178>
   11e04:	str	r0, [sp, #48]	; 0x30
   11e08:	movw	r0, #45600	; 0xb220
   11e0c:	movt	r0, #3
   11e10:	str	r4, [r0]
   11e14:	bl	11954 <geteuid@plt>
   11e18:	mov	r5, r0
   11e1c:	bl	11888 <getuid@plt>
   11e20:	mov	r6, r0
   11e24:	bl	11af8 <getgid@plt>
   11e28:	mov	r4, r0
   11e2c:	cmp	r5, #0
   11e30:	bne	11e4c <__assert_fail@plt+0x1b0>
   11e34:	sub	r1, fp, #728	; 0x2d8
   11e38:	mov	r0, #1
   11e3c:	str	r4, [fp, #-728]	; 0xfffffd28
   11e40:	bl	1196c <setgroups@plt>
   11e44:	cmp	r0, #0
   11e48:	bne	1364c <__assert_fail@plt+0x19b0>
   11e4c:	bl	11ac8 <__errno_location@plt>
   11e50:	cmp	r6, r5
   11e54:	str	r0, [sp, #112]	; 0x70
   11e58:	cmpne	r6, #0
   11e5c:	beq	11e90 <__assert_fail@plt+0x1f4>
   11e60:	ldr	r1, [sp, #112]	; 0x70
   11e64:	mov	r0, #0
   11e68:	str	r0, [r1]
   11e6c:	bl	11888 <getuid@plt>
   11e70:	bl	11bc4 <setuid@plt>
   11e74:	cmp	r0, #0
   11e78:	bne	13670 <__assert_fail@plt+0x19d4>
   11e7c:	mov	r0, #0
   11e80:	mov	r5, #0
   11e84:	bl	11bc4 <setuid@plt>
   11e88:	cmp	r0, #0
   11e8c:	beq	1368c <__assert_fail@plt+0x19f0>
   11e90:	ldr	r1, [sp, #112]	; 0x70
   11e94:	mov	r0, #0
   11e98:	str	r0, [r1]
   11e9c:	mov	r0, r4
   11ea0:	bl	119f0 <setgid@plt>
   11ea4:	cmp	r0, #0
   11ea8:	bne	135b0 <__assert_fail@plt+0x1914>
   11eac:	ldr	r6, [sp, #60]	; 0x3c
   11eb0:	ldr	r0, [r6]
   11eb4:	cmp	r0, #0
   11eb8:	movweq	r0, #37666	; 0x9322
   11ebc:	movteq	r0, #2
   11ec0:	bl	17264 <__assert_fail@plt+0x55c8>
   11ec4:	movw	r1, #39327	; 0x999f
   11ec8:	mov	r0, #6
   11ecc:	movt	r1, #2
   11ed0:	bl	11b94 <setlocale@plt>
   11ed4:	movw	r4, #39889	; 0x9bd1
   11ed8:	movw	r1, #36306	; 0x8dd2
   11edc:	movt	r4, #2
   11ee0:	movt	r1, #2
   11ee4:	mov	r0, r4
   11ee8:	bl	11c0c <bindtextdomain@plt>
   11eec:	mov	r0, r4
   11ef0:	bl	1193c <textdomain@plt>
   11ef4:	mov	r0, #0
   11ef8:	bl	17320 <__assert_fail@plt+0x5684>
   11efc:	movw	r1, #45604	; 0xb224
   11f00:	movt	r1, #3
   11f04:	str	r0, [r1]
   11f08:	movw	r0, #19416	; 0x4bd8
   11f0c:	movt	r0, #1
   11f10:	bl	28cc4 <__assert_fail@plt+0x17028>
   11f14:	cmp	r0, #0
   11f18:	bne	13584 <__assert_fail@plt+0x18e8>
   11f1c:	movw	r0, #14156	; 0x374c
   11f20:	movt	r0, #1
   11f24:	bl	28cc4 <__assert_fail@plt+0x17028>
   11f28:	cmp	r0, #0
   11f2c:	bne	13584 <__assert_fail@plt+0x18e8>
   11f30:	movw	r0, #45624	; 0xb238
   11f34:	mov	r7, #1
   11f38:	vmov.i32	q8, #0	; 0x00000000
   11f3c:	movt	r0, #3
   11f40:	strb	r7, [r0]
   11f44:	movw	r0, #45608	; 0xb228
   11f48:	movt	r0, #3
   11f4c:	vst1.64	{d16-d17}, [r0]
   11f50:	movw	r0, #36365	; 0x8e0d
   11f54:	movt	r0, #2
   11f58:	bl	119e4 <getenv@plt>
   11f5c:	str	r0, [sp, #80]	; 0x50
   11f60:	movw	r0, #45628	; 0xb23c
   11f64:	mov	r4, #0
   11f68:	movw	r9, #36377	; 0x8e19
   11f6c:	movw	r5, #39372	; 0x99cc
   11f70:	sub	lr, fp, #1024	; 0x400
   11f74:	mvn	r8, #0
   11f78:	movt	r0, #3
   11f7c:	movt	r9, #2
   11f80:	movt	r5, #2
   11f84:	sub	sl, lr, #356	; 0x164
   11f88:	str	r4, [r0]
   11f8c:	mov	r0, #0
   11f90:	str	r0, [sp, #136]	; 0x88
   11f94:	mov	r0, #0
   11f98:	str	r0, [sp, #100]	; 0x64
   11f9c:	mov	r0, #0
   11fa0:	str	r0, [sp, #44]	; 0x2c
   11fa4:	mov	r0, #0
   11fa8:	str	r0, [sp, #68]	; 0x44
   11fac:	mov	r0, #0
   11fb0:	str	r0, [sp, #124]	; 0x7c
   11fb4:	mov	r0, #0
   11fb8:	str	r0, [sp, #148]	; 0x94
   11fbc:	mov	r0, #0
   11fc0:	str	r0, [sp, #144]	; 0x90
   11fc4:	mov	r0, #0
   11fc8:	str	r0, [sp, #76]	; 0x4c
   11fcc:	mov	r0, #0
   11fd0:	str	r0, [sp, #132]	; 0x84
   11fd4:	ldr	r0, [sp, #140]	; 0x8c
   11fd8:	mov	r1, r6
   11fdc:	mov	r2, r9
   11fe0:	mov	r3, r5
   11fe4:	str	r8, [fp, #-1380]	; 0xfffffa9c
   11fe8:	str	sl, [sp]
   11fec:	bl	11a50 <getopt_long@plt>
   11ff0:	cmp	r0, #97	; 0x61
   11ff4:	ble	12070 <__assert_fail@plt+0x3d4>
   11ff8:	sub	r1, r0, #98	; 0x62
   11ffc:	cmp	r1, #21
   12000:	bhi	120d4 <__assert_fail@plt+0x438>
   12004:	add	r0, pc, #0
   12008:	ldr	pc, [r0, r1, lsl #2]
   1200c:	andeq	r2, r1, r4, rrx
   12010:			; <UNDEFINED> instruction: 0x000121b0
   12014:			; <UNDEFINED> instruction: 0x000121bc
   12018:	ldrdeq	r2, [r1], -r8
   1201c:	strdeq	r3, [r1], -ip
   12020:	strdeq	r3, [r1], -ip
   12024:	andeq	r3, r1, r0, ror r4
   12028:	andeq	r2, r1, r8, ror #3
   1202c:	strdeq	r3, [r1], -ip
   12030:	strdeq	r3, [r1], -ip
   12034:	strdeq	r2, [r1], -r4
   12038:	ldrdeq	r1, [r1], -r4
   1203c:	strdeq	r3, [r1], -ip
   12040:	strdeq	r3, [r1], -ip
   12044:	andeq	r2, r1, r0, lsr r1
   12048:	strdeq	r3, [r1], -ip
   1204c:	andeq	r2, r1, r0, lsr r2
   12050:	ldrdeq	r1, [r1], -r4
   12054:	strdeq	r3, [r1], -ip
   12058:	strdeq	r3, [r1], -ip
   1205c:	andeq	r2, r1, r4, lsl #5
   12060:	andeq	r2, r1, ip, lsr r2
   12064:	mov	r0, #1
   12068:	str	r0, [sp, #68]	; 0x44
   1206c:	b	11fd4 <__assert_fail@plt+0x338>
   12070:	cmp	r0, #71	; 0x47
   12074:	bgt	120ac <__assert_fail@plt+0x410>
   12078:	cmp	r0, #64	; 0x40
   1207c:	bgt	120f4 <__assert_fail@plt+0x458>
   12080:	cmn	r0, #1
   12084:	beq	12294 <__assert_fail@plt+0x5f8>
   12088:	cmp	r0, #48	; 0x30
   1208c:	bne	136fc <__assert_fail@plt+0x1a60>
   12090:	movw	r0, #45624	; 0xb238
   12094:	movt	r0, #3
   12098:	strb	r4, [r0]
   1209c:	movw	r0, #45632	; 0xb240
   120a0:	movt	r0, #3
   120a4:	strb	r7, [r0]
   120a8:	b	11fd4 <__assert_fail@plt+0x338>
   120ac:	cmp	r0, #79	; 0x4f
   120b0:	bgt	12118 <__assert_fail@plt+0x47c>
   120b4:	cmp	r0, #72	; 0x48
   120b8:	beq	12120 <__assert_fail@plt+0x484>
   120bc:	cmp	r0, #76	; 0x4c
   120c0:	bne	136fc <__assert_fail@plt+0x1a60>
   120c4:	movw	r0, #45636	; 0xb244
   120c8:	movt	r0, #3
   120cc:	strb	r4, [r0]
   120d0:	b	11fd4 <__assert_fail@plt+0x338>
   120d4:	cmp	r0, #256	; 0x100
   120d8:	bne	1213c <__assert_fail@plt+0x4a0>
   120dc:	movw	r0, #45592	; 0xb218
   120e0:	movt	r0, #3
   120e4:	ldr	r0, [r0]
   120e8:	bl	14854 <__assert_fail@plt+0x2bb8>
   120ec:	str	r0, [sp, #144]	; 0x90
   120f0:	b	11fd4 <__assert_fail@plt+0x338>
   120f4:	cmp	r0, #65	; 0x41
   120f8:	beq	1227c <__assert_fail@plt+0x5e0>
   120fc:	cmp	r0, #69	; 0x45
   12100:	bne	136fc <__assert_fail@plt+0x1a60>
   12104:	movw	r0, #45628	; 0xb23c
   12108:	mov	r1, #2
   1210c:	movt	r0, #3
   12110:	str	r1, [r0]
   12114:	b	11fd4 <__assert_fail@plt+0x338>
   12118:	cmp	r0, #80	; 0x50
   1211c:	bne	1219c <__assert_fail@plt+0x500>
   12120:	movw	r0, #45636	; 0xb244
   12124:	movt	r0, #3
   12128:	strb	r7, [r0]
   1212c:	b	11fd4 <__assert_fail@plt+0x338>
   12130:	mov	r0, #1
   12134:	str	r0, [sp, #100]	; 0x64
   12138:	b	11fd4 <__assert_fail@plt+0x338>
   1213c:	movw	r1, #257	; 0x101
   12140:	cmp	r0, r1
   12144:	bne	136fc <__assert_fail@plt+0x1a60>
   12148:	movw	r0, #45592	; 0xb218
   1214c:	movt	r0, #3
   12150:	ldr	r6, [r0]
   12154:	ldrb	r0, [r6]
   12158:	cmp	r0, #0
   1215c:	beq	13478 <__assert_fail@plt+0x17dc>
   12160:	ldr	r0, [sp, #112]	; 0x70
   12164:	sub	r1, fp, #728	; 0x2d8
   12168:	mov	r2, #10
   1216c:	str	r4, [r0]
   12170:	mov	r0, r6
   12174:	bl	11a8c <strtoul@plt>
   12178:	cmp	r0, #0
   1217c:	beq	12248 <__assert_fail@plt+0x5ac>
   12180:	cmn	r0, #1
   12184:	bne	12258 <__assert_fail@plt+0x5bc>
   12188:	ldr	r1, [sp, #112]	; 0x70
   1218c:	ldr	r1, [r1]
   12190:	cmp	r1, #34	; 0x22
   12194:	bne	12258 <__assert_fail@plt+0x5bc>
   12198:	b	1349c <__assert_fail@plt+0x1800>
   1219c:	cmp	r0, #83	; 0x53
   121a0:	bne	136fc <__assert_fail@plt+0x1a60>
   121a4:	mov	r0, #1
   121a8:	str	r0, [sp, #76]	; 0x4c
   121ac:	b	11fd4 <__assert_fail@plt+0x338>
   121b0:	mov	r0, #1
   121b4:	str	r0, [sp, #44]	; 0x2c
   121b8:	b	11fd4 <__assert_fail@plt+0x338>
   121bc:	movw	r0, #45592	; 0xb218
   121c0:	movt	r0, #3
   121c4:	ldr	r0, [r0]
   121c8:	cmp	r0, #0
   121cc:	str	r0, [sp, #80]	; 0x50
   121d0:	bne	11fd4 <__assert_fail@plt+0x338>
   121d4:	b	134a4 <__assert_fail@plt+0x1808>
   121d8:	movw	r0, #45628	; 0xb23c
   121dc:	movt	r0, #3
   121e0:	str	r7, [r0]
   121e4:	b	11fd4 <__assert_fail@plt+0x338>
   121e8:	mov	r0, #1
   121ec:	str	r0, [sp, #136]	; 0x88
   121f0:	b	11fd4 <__assert_fail@plt+0x338>
   121f4:	movw	r0, #45592	; 0xb218
   121f8:	movw	r3, #45608	; 0xb228
   121fc:	sub	r1, fp, #728	; 0x2d8
   12200:	mov	r2, #10
   12204:	str	r4, [sp]
   12208:	movt	r0, #3
   1220c:	movt	r3, #3
   12210:	ldr	r0, [r0]
   12214:	str	r0, [fp, #-728]	; 0xfffffd28
   12218:	bl	197e8 <__assert_fail@plt+0x7b4c>
   1221c:	cmp	r0, #0
   12220:	bne	134c4 <__assert_fail@plt+0x1828>
   12224:	mov	r0, #1
   12228:	str	r0, [sp, #124]	; 0x7c
   1222c:	b	11fd4 <__assert_fail@plt+0x338>
   12230:	mov	r0, #1
   12234:	str	r0, [sp, #148]	; 0x94
   12238:	b	11fd4 <__assert_fail@plt+0x338>
   1223c:	mov	r0, #0
   12240:	str	r0, [sp, #68]	; 0x44
   12244:	b	11fd4 <__assert_fail@plt+0x338>
   12248:	ldr	r1, [sp, #112]	; 0x70
   1224c:	ldr	r1, [r1]
   12250:	cmp	r1, #22
   12254:	beq	134e8 <__assert_fail@plt+0x184c>
   12258:	ldr	r1, [fp, #-728]	; 0xfffffd28
   1225c:	ldrb	r1, [r1]
   12260:	cmp	r1, #0
   12264:	bne	13528 <__assert_fail@plt+0x188c>
   12268:	movw	r1, #45480	; 0xb1a8
   1226c:	ldr	r6, [sp, #60]	; 0x3c
   12270:	movt	r1, #3
   12274:	str	r0, [r1]
   12278:	b	11fd4 <__assert_fail@plt+0x338>
   1227c:	mov	r0, #1
   12280:	b	11fd0 <__assert_fail@plt+0x334>
   12284:	movw	r0, #37666	; 0x9322
   12288:	movt	r0, #2
   1228c:	bl	143f8 <__assert_fail@plt+0x275c>
   12290:	b	1341c <__assert_fail@plt+0x1780>
   12294:	ldr	r0, [sp, #48]	; 0x30
   12298:	cmp	r0, #0
   1229c:	bmi	122c0 <__assert_fail@plt+0x624>
   122a0:	ldr	r5, [sp, #80]	; 0x50
   122a4:	ldr	r4, [sp, #76]	; 0x4c
   122a8:	cmp	r5, #0
   122ac:	beq	122c8 <__assert_fail@plt+0x62c>
   122b0:	bl	11c78 <close@plt>
   122b4:	mvn	r0, #0
   122b8:	str	r0, [sp, #48]	; 0x30
   122bc:	b	122c8 <__assert_fail@plt+0x62c>
   122c0:	ldr	r4, [sp, #76]	; 0x4c
   122c4:	ldr	r5, [sp, #80]	; 0x50
   122c8:	ldr	r0, [sp, #44]	; 0x2c
   122cc:	orrs	r0, r4, r0
   122d0:	ldr	r0, [sp, #100]	; 0x64
   122d4:	movweq	r0, #1
   122d8:	cmp	r4, #0
   122dc:	str	r0, [sp, #100]	; 0x64
   122e0:	movw	r0, #45576	; 0xb208
   122e4:	movt	r0, #3
   122e8:	beq	12308 <__assert_fail@plt+0x66c>
   122ec:	ldr	r0, [r0]
   122f0:	ldr	r1, [sp, #140]	; 0x8c
   122f4:	subs	r0, r0, r1
   122f8:	ldr	r1, [sp, #124]	; 0x7c
   122fc:	moveq	r1, r0
   12300:	str	r1, [sp, #124]	; 0x7c
   12304:	b	12324 <__assert_fail@plt+0x688>
   12308:	ldr	r0, [r0]
   1230c:	ldr	r1, [sp, #140]	; 0x8c
   12310:	cmp	r0, r1
   12314:	bne	12324 <__assert_fail@plt+0x688>
   12318:	ldr	r0, [sp, #44]	; 0x2c
   1231c:	cmp	r0, #0
   12320:	beq	136d8 <__assert_fail@plt+0x1a3c>
   12324:	mov	r0, #1
   12328:	bl	11c30 <isatty@plt>
   1232c:	sub	r0, r0, #1
   12330:	movw	r1, #45637	; 0xb245
   12334:	cmp	r5, #0
   12338:	clz	r0, r0
   1233c:	movt	r1, #3
   12340:	lsr	r0, r0, #5
   12344:	strb	r0, [r1]
   12348:	beq	1236c <__assert_fail@plt+0x6d0>
   1234c:	movw	r1, #42752	; 0xa700
   12350:	add	r0, sp, #264	; 0x108
   12354:	add	r3, sp, #268	; 0x10c
   12358:	mov	r2, #1
   1235c:	movt	r1, #2
   12360:	str	r0, [sp]
   12364:	mov	r0, r5
   12368:	bl	14a3c <__assert_fail@plt+0x2da0>
   1236c:	ldr	r2, [sp, #132]	; 0x84
   12370:	movw	r0, #16776	; 0x4188
   12374:	movw	r1, #16608	; 0x40e0
   12378:	vldr	d9, [pc, #832]	; 126c0 <__assert_fail@plt+0xa24>
   1237c:	vldr	d12, [pc, #836]	; 126c8 <__assert_fail@plt+0xa2c>
   12380:	movw	r6, #45640	; 0xb248
   12384:	movw	r9, #45688	; 0xb278
   12388:	vmov.i32	q5, #0	; 0x00000000
   1238c:	mov	r7, #0
   12390:	sub	r8, fp, #728	; 0x2d8
   12394:	movt	r0, #1
   12398:	movt	r1, #1
   1239c:	movt	r6, #3
   123a0:	movt	r9, #3
   123a4:	cmp	r2, #0
   123a8:	movw	r2, #15844	; 0x3de4
   123ac:	moveq	r1, r0
   123b0:	movw	r0, #15808	; 0x3dc0
   123b4:	movt	r2, #1
   123b8:	str	r1, [sp, #32]
   123bc:	ldr	r1, [sp, #136]	; 0x88
   123c0:	movt	r0, #1
   123c4:	cmp	r1, #0
   123c8:	movne	r2, r0
   123cc:	movw	r0, #15624	; 0x3d08
   123d0:	movt	r0, #1
   123d4:	str	r2, [sp, #120]	; 0x78
   123d8:	movw	r2, #15716	; 0x3d64
   123dc:	movt	r2, #1
   123e0:	movne	r2, r0
   123e4:	ldr	r0, [sp, #144]	; 0x90
   123e8:	cmp	r1, #0
   123ec:	str	r2, [sp, #116]	; 0x74
   123f0:	orrne	r0, r0, #4194304	; 0x400000
   123f4:	str	r0, [sp, #144]	; 0x90
   123f8:	ldr	r0, [sp, #100]	; 0x64
   123fc:	orr	r0, r0, r4
   12400:	mov	r4, #0
   12404:	str	r0, [sp, #20]
   12408:	add	r0, sp, #272	; 0x110
   1240c:	add	r0, r0, #16
   12410:	str	r0, [sp, #28]
   12414:	mov	r0, #0
   12418:	str	r0, [sp, #24]
   1241c:	ldr	r0, [sp, #124]	; 0x7c
   12420:	cmp	r0, #0
   12424:	beq	12448 <__assert_fail@plt+0x7ac>
   12428:	movw	r0, #45608	; 0xb228
   1242c:	movt	r0, #3
   12430:	mov	r3, r0
   12434:	ldr	r0, [r0]
   12438:	ldmib	r3, {r1, r2, r3}
   1243c:	subs	r0, r2, r0
   12440:	sbcs	r0, r3, r1
   12444:	bcs	1338c <__assert_fail@plt+0x16f0>
   12448:	mov	r1, #32
   1244c:	add	r0, r6, #16
   12450:	cmp	r5, #0
   12454:	vst1.64	{d10-d11}, [r6], r1
   12458:	vst1.64	{d10-d11}, [r0]
   1245c:	vst1.64	{d10-d11}, [r6]
   12460:	beq	124d0 <__assert_fail@plt+0x834>
   12464:	ldr	r1, [sp, #264]	; 0x108
   12468:	mov	r6, #0
   1246c:	cmp	r1, #0
   12470:	beq	12504 <__assert_fail@plt+0x868>
   12474:	movw	r4, #45692	; 0xb27c
   12478:	cmp	r1, #1
   1247c:	movt	r4, #3
   12480:	bne	12518 <__assert_fail@plt+0x87c>
   12484:	ldr	r0, [sp, #268]	; 0x10c
   12488:	movw	sl, #36124	; 0x8d1c
   1248c:	movt	sl, #2
   12490:	ldrb	r2, [r5, r0]
   12494:	cmp	r2, #46	; 0x2e
   12498:	beq	1252c <__assert_fail@plt+0x890>
   1249c:	cmp	r2, #45	; 0x2d
   124a0:	bne	1251c <__assert_fail@plt+0x880>
   124a4:	ldr	r0, [sp, #24]
   124a8:	tst	r0, #1
   124ac:	bne	13430 <__assert_fail@plt+0x1794>
   124b0:	mov	r0, #0
   124b4:	movw	sl, #36543	; 0x8ebf
   124b8:	mov	r5, #0
   124bc:	str	r0, [sp, #96]	; 0x60
   124c0:	mov	r0, #1
   124c4:	movt	sl, #2
   124c8:	str	r0, [sp, #24]
   124cc:	b	12544 <__assert_fail@plt+0x8a8>
   124d0:	ldr	r5, [sp, #48]	; 0x30
   124d4:	cmn	r5, #1
   124d8:	beq	1338c <__assert_fail@plt+0x16f0>
   124dc:	movw	r0, #45600	; 0xb220
   124e0:	movw	r4, #45692	; 0xb27c
   124e4:	movt	r0, #3
   124e8:	movt	r4, #3
   124ec:	ldr	sl, [r0]
   124f0:	mov	r0, #0
   124f4:	str	r0, [sp, #96]	; 0x60
   124f8:	mvn	r0, #0
   124fc:	str	r0, [sp, #48]	; 0x30
   12500:	b	12544 <__assert_fail@plt+0x8a8>
   12504:	movw	sl, #36124	; 0x8d1c
   12508:	movw	r4, #45692	; 0xb27c
   1250c:	movt	sl, #2
   12510:	movt	r4, #3
   12514:	b	1252c <__assert_fail@plt+0x890>
   12518:	ldr	r0, [sp, #268]	; 0x10c
   1251c:	add	r0, r5, r0
   12520:	bl	118c4 <strndup@plt>
   12524:	mov	sl, r0
   12528:	mov	r6, r0
   1252c:	mov	r0, sl
   12530:	str	r6, [sp, #96]	; 0x60
   12534:	bl	13704 <__assert_fail@plt+0x1a68>
   12538:	cmn	r0, #1
   1253c:	ble	133ec <__assert_fail@plt+0x1750>
   12540:	mov	r5, r0
   12544:	mov	r0, r5
   12548:	add	r1, sp, #160	; 0xa0
   1254c:	bl	28cec <__assert_fail@plt+0x17050>
   12550:	cmp	r0, #0
   12554:	str	sl, [sp, #108]	; 0x6c
   12558:	beq	125a8 <__assert_fail@plt+0x90c>
   1255c:	ldr	r0, [sp, #112]	; 0x70
   12560:	mov	r1, #8
   12564:	mov	r2, sl
   12568:	ldr	r6, [r0]
   1256c:	mov	r0, #0
   12570:	str	r0, [sp, #104]	; 0x68
   12574:	mov	r0, #0
   12578:	bl	18870 <__assert_fail@plt+0x6bd4>
   1257c:	movw	r2, #42764	; 0xa70c
   12580:	mov	r3, r0
   12584:	mov	r0, #0
   12588:	mov	r1, r6
   1258c:	movt	r2, #2
   12590:	bl	119c0 <error@plt>
   12594:	mov	r0, #0
   12598:	str	r0, [sp, #92]	; 0x5c
   1259c:	mov	r0, #0
   125a0:	str	r0, [sp, #64]	; 0x40
   125a4:	b	12708 <__assert_fail@plt+0xa6c>
   125a8:	ldr	r0, [sp, #40]	; 0x28
   125ac:	ldrd	r0, [r0]
   125b0:	str	r0, [sp, #92]	; 0x5c
   125b4:	ldr	r0, [sp, #36]	; 0x24
   125b8:	str	r1, [sp, #64]	; 0x40
   125bc:	ldrd	r6, [r0]
   125c0:	mov	r0, r8
   125c4:	str	r7, [sp, #156]	; 0x9c
   125c8:	str	r6, [sp, #152]	; 0x98
   125cc:	bl	11918 <time@plt>
   125d0:	cmn	r0, #1
   125d4:	beq	126d0 <__assert_fail@plt+0xa34>
   125d8:	ldr	r0, [fp, #-728]	; 0xfffffd28
   125dc:	mov	r1, r6
   125e0:	bl	11b40 <difftime@plt>
   125e4:	movw	r0, #45480	; 0xb1a8
   125e8:	movw	r1, #20864	; 0x5180
   125ec:	vmov.f64	d8, d0
   125f0:	mov	r7, #0
   125f4:	movt	r0, #3
   125f8:	movt	r1, #1
   125fc:	ldr	r0, [r0]
   12600:	mul	r0, r0, r1
   12604:	vmov	s0, r0
   12608:	vcvt.f64.u32	d16, s0
   1260c:	vcmpe.f64	d8, d16
   12610:	vmrs	APSR_nzcv, fpscr
   12614:	ble	12700 <__assert_fail@plt+0xa64>
   12618:	movw	r1, #36575	; 0x8edf
   1261c:	mov	r0, #0
   12620:	mov	r2, #5
   12624:	movt	r1, #2
   12628:	bl	11924 <dcgettext@plt>
   1262c:	mov	r9, r0
   12630:	mov	r0, #0
   12634:	mov	r1, #8
   12638:	mov	r2, sl
   1263c:	bl	18870 <__assert_fail@plt+0x6bd4>
   12640:	mov	sl, r0
   12644:	movw	r0, #45480	; 0xb1a8
   12648:	movw	r4, #39740	; 0x9b3c
   1264c:	mov	r2, #5
   12650:	movt	r0, #3
   12654:	movt	r4, #2
   12658:	ldr	r7, [r0]
   1265c:	mov	r0, #0
   12660:	mov	r1, r4
   12664:	bl	11924 <dcgettext@plt>
   12668:	mov	r6, r0
   1266c:	mov	r1, r4
   12670:	movw	r4, #45692	; 0xb27c
   12674:	mov	r0, #0
   12678:	mov	r2, #5
   1267c:	movt	r4, #3
   12680:	bl	11924 <dcgettext@plt>
   12684:	vdiv.f64	d16, d8, d9
   12688:	mov	r3, sl
   1268c:	ldr	sl, [sp, #108]	; 0x6c
   12690:	str	r0, [sp, #16]
   12694:	mov	r2, r9
   12698:	movw	r9, #45688	; 0xb278
   1269c:	mov	r0, #0
   126a0:	mov	r1, #0
   126a4:	str	r7, [sp]
   126a8:	mov	r7, #0
   126ac:	str	r6, [sp, #4]
   126b0:	movt	r9, #3
   126b4:	vstr	d16, [sp, #8]
   126b8:	bl	119c0 <error@plt>
   126bc:	b	12700 <__assert_fail@plt+0xa64>
   126c0:	andeq	r0, r0, r0
   126c4:	rscsmi	r1, r5, r0, lsl #16
   126c8:	andeq	r0, r0, r0
   126cc:	subsmi	r0, r9, r0
   126d0:	ldr	r0, [sp, #112]	; 0x70
   126d4:	movw	r1, #36551	; 0x8ec7
   126d8:	mov	r2, #5
   126dc:	movt	r1, #2
   126e0:	ldr	r6, [r0]
   126e4:	mov	r0, #0
   126e8:	bl	11924 <dcgettext@plt>
   126ec:	mov	r2, r0
   126f0:	mov	r0, #0
   126f4:	mov	r1, r6
   126f8:	bl	119c0 <error@plt>
   126fc:	mov	r7, #0
   12700:	mov	r0, #1
   12704:	str	r0, [sp, #104]	; 0x68
   12708:	movw	r1, #39869	; 0x9bbd
   1270c:	mov	r0, r5
   12710:	movt	r1, #2
   12714:	bl	11804 <fdopen@plt>
   12718:	cmp	r0, #0
   1271c:	beq	133ec <__assert_fail@plt+0x1750>
   12720:	mov	r1, r0
   12724:	movw	r0, #45696	; 0xb280
   12728:	str	r7, [r9]
   1272c:	str	r7, [sp, #304]	; 0x130
   12730:	str	sl, [sp, #300]	; 0x12c
   12734:	str	r7, [sp, #280]	; 0x118
   12738:	str	r7, [sp, #276]	; 0x114
   1273c:	str	r7, [r4]
   12740:	movt	r0, #3
   12744:	str	r1, [sp, #296]	; 0x128
   12748:	str	r7, [r0]
   1274c:	movw	r0, #45700	; 0xb284
   12750:	movt	r0, #3
   12754:	strb	r7, [r0]
   12758:	movw	r0, #45576	; 0xb208
   1275c:	mov	r7, r1
   12760:	movt	r0, #3
   12764:	ldr	r9, [r0]
   12768:	mov	r0, #128	; 0x80
   1276c:	str	r0, [sp, #288]	; 0x120
   12770:	movw	r0, #45628	; 0xb23c
   12774:	movt	r0, #3
   12778:	ldr	r6, [r0]
   1277c:	mov	r0, #128	; 0x80
   12780:	bl	192b4 <__assert_fail@plt+0x7618>
   12784:	mov	r1, #1
   12788:	mov	r2, #2
   1278c:	mov	r3, r7
   12790:	mov	r5, r0
   12794:	str	r0, [sp, #284]	; 0x11c
   12798:	str	r7, [sp, #128]	; 0x80
   1279c:	bl	1199c <fread@plt>
   127a0:	mov	r7, r0
   127a4:	ldr	r0, [sp, #104]	; 0x68
   127a8:	cmp	r0, #0
   127ac:	mov	r1, r0
   127b0:	add	r0, sp, #152	; 0x98
   127b4:	movne	r1, r0
   127b8:	cmp	r7, #3
   127bc:	str	r1, [sp, #72]	; 0x48
   127c0:	bcs	13564 <__assert_fail@plt+0x18c8>
   127c4:	cmp	r7, #2
   127c8:	bne	127f4 <__assert_fail@plt+0xb58>
   127cc:	ldrb	r0, [r5, #1]
   127d0:	cmp	r0, #0
   127d4:	bne	127f4 <__assert_fail@plt+0xb58>
   127d8:	bl	11a5c <__ctype_b_loc@plt>
   127dc:	ldrb	r1, [r5]
   127e0:	ldr	r0, [r0]
   127e4:	add	r0, r0, r1, lsl #1
   127e8:	ldrb	r0, [r0, #1]
   127ec:	tst	r0, #8
   127f0:	bne	12d84 <__assert_fail@plt+0x10e8>
   127f4:	ldr	r3, [sp, #128]	; 0x80
   127f8:	add	r0, r5, r7
   127fc:	rsb	r2, r7, #10
   12800:	mov	r1, #1
   12804:	bl	1199c <fread@plt>
   12808:	ldr	r5, [sp, #284]	; 0x11c
   1280c:	add	r7, r0, r7
   12810:	cmp	r7, #10
   12814:	bcc	12834 <__assert_fail@plt+0xb98>
   12818:	movw	r1, #39745	; 0x9b41
   1281c:	mov	r0, r5
   12820:	mov	r2, #10
   12824:	movt	r1, #2
   12828:	bl	11a80 <bcmp@plt>
   1282c:	cmp	r0, #0
   12830:	beq	128f4 <__assert_fail@plt+0xc58>
   12834:	ldr	r0, [sp, #288]	; 0x120
   12838:	cmp	r0, #255	; 0xff
   1283c:	bhi	12860 <__assert_fail@plt+0xbc4>
   12840:	ldr	r1, [sp, #28]
   12844:	mov	r0, #256	; 0x100
   12848:	mov	r2, #1
   1284c:	str	r0, [sp, #288]	; 0x120
   12850:	mov	r0, r5
   12854:	bl	193c0 <__assert_fail@plt+0x7724>
   12858:	mov	r5, r0
   1285c:	str	r0, [sp, #284]	; 0x11c
   12860:	cmp	r7, #255	; 0xff
   12864:	add	r4, sp, #272	; 0x110
   12868:	bgt	12890 <__assert_fail@plt+0xbf4>
   1286c:	ldr	r3, [sp, #296]	; 0x128
   12870:	add	r0, r5, r7
   12874:	rsb	r2, r7, #256	; 0x100
   12878:	mov	r1, #1
   1287c:	bl	1199c <fread@plt>
   12880:	add	r0, r0, r7
   12884:	cmp	r0, #256	; 0x100
   12888:	bne	135bc <__assert_fail@plt+0x1920>
   1288c:	ldr	r5, [sp, #284]	; 0x11c
   12890:	mov	r1, #0
   12894:	mov	r7, #0
   12898:	add	r0, r5, #1
   1289c:	str	r1, [sp, #88]	; 0x58
   128a0:	mov	r1, #0
   128a4:	ldrb	r3, [r0, #-1]
   128a8:	add	r2, r4, r1
   128ac:	add	r1, r1, #1
   128b0:	cmp	r1, #128	; 0x80
   128b4:	strb	r3, [r2, #36]	; 0x24
   128b8:	ldrb	r3, [r0]
   128bc:	add	r0, r0, #2
   128c0:	strb	r3, [r2, #164]	; 0xa4
   128c4:	bne	128a4 <__assert_fail@plt+0xc08>
   128c8:	mov	r0, #1
   128cc:	movw	r5, #14992	; 0x3a90
   128d0:	movw	r4, #45692	; 0xb27c
   128d4:	str	r6, [sp, #84]	; 0x54
   128d8:	str	r0, [sp, #56]	; 0x38
   128dc:	movw	r0, #37741	; 0x936d
   128e0:	movt	r5, #1
   128e4:	movt	r4, #3
   128e8:	movt	r0, #2
   128ec:	str	r0, [sp, #52]	; 0x34
   128f0:	b	12920 <__assert_fail@plt+0xc84>
   128f4:	mov	r0, #0
   128f8:	movw	r5, #14332	; 0x37fc
   128fc:	str	r6, [sp, #84]	; 0x54
   12900:	str	r0, [sp, #88]	; 0x58
   12904:	movw	r0, #37673	; 0x9329
   12908:	movt	r5, #1
   1290c:	movt	r0, #2
   12910:	str	r0, [sp, #52]	; 0x34
   12914:	mov	r0, #0
   12918:	str	r0, [sp, #56]	; 0x38
   1291c:	mov	r7, #0
   12920:	ldr	r0, [sp, #140]	; 0x8c
   12924:	sub	r0, r0, r9
   12928:	str	r0, [sp, #132]	; 0x84
   1292c:	mov	r0, #12
   12930:	bl	192b4 <__assert_fail@plt+0x7618>
   12934:	stm	r0, {r5, r7}
   12938:	mov	sl, r0
   1293c:	str	r7, [r0, #8]
   12940:	ldr	r0, [r4]
   12944:	mov	r5, r4
   12948:	movw	r4, #45688	; 0xb278
   1294c:	movt	r4, #3
   12950:	mov	r1, r4
   12954:	cmp	r0, #0
   12958:	addne	r1, r0, #8
   1295c:	ldr	r0, [sp, #68]	; 0x44
   12960:	str	sl, [r1]
   12964:	str	sl, [r5]
   12968:	cmp	r0, #0
   1296c:	beq	129a4 <__assert_fail@plt+0xd08>
   12970:	mov	r0, #12
   12974:	bl	192b4 <__assert_fail@plt+0x7618>
   12978:	mov	sl, r0
   1297c:	movw	r0, #15412	; 0x3c34
   12980:	mov	r1, r4
   12984:	movt	r0, #1
   12988:	stm	sl, {r0, r7}
   1298c:	ldr	r0, [r5]
   12990:	str	r7, [sl, #8]
   12994:	cmp	r0, #0
   12998:	addne	r1, r0, #8
   1299c:	str	sl, [r1]
   129a0:	str	sl, [r5]
   129a4:	ldr	r0, [sp, #132]	; 0x84
   129a8:	mov	r4, r5
   129ac:	cmp	r0, #1
   129b0:	blt	12b18 <__assert_fail@plt+0xe7c>
   129b4:	ldr	r0, [sp, #60]	; 0x3c
   129b8:	ldr	r8, [sp, #132]	; 0x84
   129bc:	add	r6, r0, r9, lsl #2
   129c0:	movw	r1, #45700	; 0xb284
   129c4:	mov	r0, #1
   129c8:	movt	r1, #3
   129cc:	strb	r0, [r1]
   129d0:	ldr	r0, [sp, #148]	; 0x94
   129d4:	ldr	r9, [r6]
   129d8:	cmp	r0, #0
   129dc:	beq	12a70 <__assert_fail@plt+0xdd4>
   129e0:	mov	r0, #32
   129e4:	bl	192b4 <__assert_fail@plt+0x7618>
   129e8:	ldr	r7, [sp, #144]	; 0x90
   129ec:	mov	r5, r0
   129f0:	add	r0, r0, #16
   129f4:	mov	sl, #0
   129f8:	vst1.32	{d10-d11}, [r0]
   129fc:	mov	r4, r5
   12a00:	mov	r0, #20
   12a04:	vst1.32	{d10-d11}, [r4], r0
   12a08:	mov	r0, r7
   12a0c:	bl	1afdc <__assert_fail@plt+0x9340>
   12a10:	mov	r0, #100	; 0x64
   12a14:	str	r0, [r5, #4]
   12a18:	mov	r0, #100	; 0x64
   12a1c:	bl	192b4 <__assert_fail@plt+0x7618>
   12a20:	str	r0, [r5]
   12a24:	str	sl, [r4]
   12a28:	str	r7, [r5, #12]
   12a2c:	mov	r7, #0
   12a30:	mov	r0, r9
   12a34:	str	r7, [r5, #16]
   12a38:	bl	11a98 <strlen@plt>
   12a3c:	mov	r1, r0
   12a40:	mov	r0, r9
   12a44:	mov	r2, r5
   12a48:	bl	1a318 <__assert_fail@plt+0x867c>
   12a4c:	cmp	r0, #0
   12a50:	bne	13458 <__assert_fail@plt+0x17bc>
   12a54:	mov	r0, #12
   12a58:	bl	192b4 <__assert_fail@plt+0x7618>
   12a5c:	mov	sl, r0
   12a60:	movw	r0, #15444	; 0x3c54
   12a64:	movt	r0, #1
   12a68:	str	r0, [sl]
   12a6c:	b	12ae4 <__assert_fail@plt+0xe48>
   12a70:	movw	r1, #38526	; 0x967e
   12a74:	mov	r0, r9
   12a78:	movt	r1, #2
   12a7c:	bl	11c00 <strpbrk@plt>
   12a80:	cmp	r0, #0
   12a84:	beq	12aac <__assert_fail@plt+0xe10>
   12a88:	mov	r0, #12
   12a8c:	bl	192b4 <__assert_fail@plt+0x7618>
   12a90:	mov	sl, r0
   12a94:	ldr	r0, [sp, #136]	; 0x88
   12a98:	cmp	r0, #0
   12a9c:	beq	12ad4 <__assert_fail@plt+0xe38>
   12aa0:	movw	r0, #15528	; 0x3ca8
   12aa4:	movt	r0, #1
   12aa8:	b	12adc <__assert_fail@plt+0xe40>
   12aac:	bl	11990 <__ctype_get_mb_cur_max@plt>
   12ab0:	cmp	r0, #1
   12ab4:	ldr	r0, [sp, #116]	; 0x74
   12ab8:	ldr	r4, [sp, #120]	; 0x78
   12abc:	moveq	r4, r0
   12ac0:	mov	r0, #12
   12ac4:	bl	192b4 <__assert_fail@plt+0x7618>
   12ac8:	mov	sl, r0
   12acc:	str	r4, [r0]
   12ad0:	b	12ae0 <__assert_fail@plt+0xe44>
   12ad4:	movw	r0, #15576	; 0x3cd8
   12ad8:	movt	r0, #1
   12adc:	str	r0, [sl]
   12ae0:	mov	r5, r9
   12ae4:	movw	r4, #45692	; 0xb27c
   12ae8:	movw	r1, #45688	; 0xb278
   12aec:	add	r6, r6, #4
   12af0:	stmib	sl, {r5, r7}
   12af4:	movt	r4, #3
   12af8:	movt	r1, #3
   12afc:	ldr	r0, [r4]
   12b00:	cmp	r0, #0
   12b04:	addne	r1, r0, #8
   12b08:	subs	r8, r8, #1
   12b0c:	str	sl, [r1]
   12b10:	str	sl, [r4]
   12b14:	bne	129c0 <__assert_fail@plt+0xd24>
   12b18:	ldr	r0, [sp, #84]	; 0x54
   12b1c:	cmp	r0, #2
   12b20:	beq	12b78 <__assert_fail@plt+0xedc>
   12b24:	ldr	r5, [sp, #76]	; 0x4c
   12b28:	movw	r8, #45640	; 0xb248
   12b2c:	movw	r9, #45688	; 0xb278
   12b30:	cmp	r0, #1
   12b34:	movt	r8, #3
   12b38:	movt	r9, #3
   12b3c:	bne	12c08 <__assert_fail@plt+0xf6c>
   12b40:	movw	r1, #45700	; 0xb284
   12b44:	mov	r0, #1
   12b48:	movt	r1, #3
   12b4c:	strb	r0, [r1]
   12b50:	movw	r0, #45636	; 0xb244
   12b54:	movt	r0, #3
   12b58:	ldrb	r4, [r0]
   12b5c:	mov	r0, #12
   12b60:	bl	192b4 <__assert_fail@plt+0x7618>
   12b64:	cmp	r4, #0
   12b68:	beq	12bbc <__assert_fail@plt+0xf20>
   12b6c:	movw	r1, #15928	; 0x3e38
   12b70:	movt	r1, #1
   12b74:	b	12bc4 <__assert_fail@plt+0xf28>
   12b78:	movw	r1, #45700	; 0xb284
   12b7c:	mov	r0, #1
   12b80:	movt	r1, #3
   12b84:	strb	r0, [r1]
   12b88:	movw	r0, #45636	; 0xb244
   12b8c:	movt	r0, #3
   12b90:	ldrb	r4, [r0]
   12b94:	mov	r0, #12
   12b98:	bl	192b4 <__assert_fail@plt+0x7618>
   12b9c:	ldr	r5, [sp, #76]	; 0x4c
   12ba0:	movw	r8, #45640	; 0xb248
   12ba4:	cmp	r4, #0
   12ba8:	movt	r8, #3
   12bac:	beq	12bcc <__assert_fail@plt+0xf30>
   12bb0:	movw	r1, #16024	; 0x3e98
   12bb4:	movt	r1, #1
   12bb8:	b	12bd4 <__assert_fail@plt+0xf38>
   12bbc:	movw	r1, #15880	; 0x3e08
   12bc0:	movt	r1, #1
   12bc4:	str	r1, [r0]
   12bc8:	b	12be0 <__assert_fail@plt+0xf44>
   12bcc:	movw	r1, #15976	; 0x3e68
   12bd0:	movt	r1, #1
   12bd4:	movw	r9, #45688	; 0xb278
   12bd8:	str	r1, [r0]
   12bdc:	movt	r9, #3
   12be0:	movw	r4, #45692	; 0xb27c
   12be4:	mov	r2, r9
   12be8:	str	r7, [r0, #4]
   12bec:	str	r7, [r0, #8]
   12bf0:	movt	r4, #3
   12bf4:	ldr	r1, [r4]
   12bf8:	cmp	r1, #0
   12bfc:	addne	r2, r1, #8
   12c00:	str	r0, [r2]
   12c04:	str	r0, [r4]
   12c08:	cmp	r5, #0
   12c0c:	beq	12c40 <__assert_fail@plt+0xfa4>
   12c10:	mov	r0, #12
   12c14:	bl	192b4 <__assert_fail@plt+0x7618>
   12c18:	movw	r1, #16072	; 0x3ec8
   12c1c:	mov	r2, r9
   12c20:	movt	r1, #1
   12c24:	stm	r0, {r1, r8}
   12c28:	ldr	r1, [r4]
   12c2c:	str	r7, [r0, #8]
   12c30:	cmp	r1, #0
   12c34:	addne	r2, r1, #8
   12c38:	str	r0, [r2]
   12c3c:	str	r0, [r4]
   12c40:	ldr	r0, [sp, #100]	; 0x64
   12c44:	cmp	r0, #0
   12c48:	beq	12ca0 <__assert_fail@plt+0x1004>
   12c4c:	movw	r0, #45624	; 0xb238
   12c50:	movt	r0, #3
   12c54:	ldrb	r4, [r0]
   12c58:	mov	r0, #12
   12c5c:	bl	192b4 <__assert_fail@plt+0x7618>
   12c60:	movw	r2, #16344	; 0x3fd8
   12c64:	cmp	r4, #0
   12c68:	movw	r4, #45692	; 0xb27c
   12c6c:	movw	r1, #16456	; 0x4048
   12c70:	movt	r2, #1
   12c74:	movt	r4, #3
   12c78:	movt	r1, #1
   12c7c:	movne	r1, r2
   12c80:	mov	r2, r9
   12c84:	stm	r0, {r1, r7}
   12c88:	ldr	r1, [r4]
   12c8c:	str	r7, [r0, #8]
   12c90:	cmp	r1, #0
   12c94:	addne	r2, r1, #8
   12c98:	str	r0, [r2]
   12c9c:	str	r0, [r4]
   12ca0:	mov	r0, #12
   12ca4:	bl	192b4 <__assert_fail@plt+0x7618>
   12ca8:	ldr	r1, [sp, #124]	; 0x7c
   12cac:	cmp	r1, #0
   12cb0:	beq	12cc0 <__assert_fail@plt+0x1024>
   12cb4:	movw	r1, #16520	; 0x4088
   12cb8:	movt	r1, #1
   12cbc:	b	12cc8 <__assert_fail@plt+0x102c>
   12cc0:	movw	r1, #16576	; 0x40c0
   12cc4:	movt	r1, #1
   12cc8:	ldr	r2, [r4]
   12ccc:	str	r1, [r0]
   12cd0:	movw	r1, #45608	; 0xb228
   12cd4:	movt	r1, #3
   12cd8:	str	r1, [r0, #4]
   12cdc:	mov	r1, r9
   12ce0:	str	r7, [r0, #8]
   12ce4:	cmp	r2, #0
   12ce8:	addne	r1, r2, #8
   12cec:	str	r0, [r1]
   12cf0:	str	r0, [r4]
   12cf4:	ldr	r0, [sp, #132]	; 0x84
   12cf8:	cmp	r0, #2
   12cfc:	movw	r0, #16952	; 0x4238
   12d00:	movt	r0, #1
   12d04:	blt	12d1c <__assert_fail@plt+0x1080>
   12d08:	ldr	r0, [sl, #8]
   12d0c:	movw	r1, #45696	; 0xb280
   12d10:	movt	r1, #3
   12d14:	str	r0, [r1]
   12d18:	ldr	r0, [sp, #32]
   12d1c:	movw	r6, #45704	; 0xb288
   12d20:	cmp	r5, #0
   12d24:	movt	r6, #3
   12d28:	str	r0, [r6]
   12d2c:	beq	12d50 <__assert_fail@plt+0x10b4>
   12d30:	movw	r1, #37745	; 0x9371
   12d34:	mov	r0, #0
   12d38:	mov	r2, #5
   12d3c:	movt	r1, #2
   12d40:	bl	11924 <dcgettext@plt>
   12d44:	ldr	r1, [sp, #300]	; 0x12c
   12d48:	ldr	r2, [sp, #52]	; 0x34
   12d4c:	bl	11858 <printf@plt>
   12d50:	ldr	r0, [sp, #296]	; 0x128
   12d54:	bl	11c6c <getc@plt>
   12d58:	ldr	r1, [sp, #88]	; 0x58
   12d5c:	ldr	sl, [sp, #108]	; 0x6c
   12d60:	add	r4, sp, #272	; 0x110
   12d64:	str	r0, [sp, #272]	; 0x110
   12d68:	cmp	r1, #0
   12d6c:	cmnne	r0, #1
   12d70:	beq	12f34 <__assert_fail@plt+0x1298>
   12d74:	ldr	r1, [sp, #296]	; 0x128
   12d78:	bl	11abc <ungetc@plt>
   12d7c:	str	r7, [sp, #272]	; 0x110
   12d80:	b	12f3c <__assert_fail@plt+0x12a0>
   12d84:	sub	r7, r1, #48	; 0x30
   12d88:	cmp	r7, #2
   12d8c:	blt	12e34 <__assert_fail@plt+0x1198>
   12d90:	movw	r1, #38028	; 0x948c
   12d94:	mov	r0, #0
   12d98:	mov	r2, #5
   12d9c:	mov	r4, #0
   12da0:	movt	r1, #2
   12da4:	bl	11924 <dcgettext@plt>
   12da8:	mov	r9, r0
   12dac:	mov	r0, #0
   12db0:	mov	r1, #8
   12db4:	mov	r2, sl
   12db8:	bl	18870 <__assert_fail@plt+0x6bd4>
   12dbc:	mov	r3, r0
   12dc0:	ldrb	r0, [r5, #1]
   12dc4:	mov	r1, #0
   12dc8:	mov	r2, r9
   12dcc:	str	r0, [sp]
   12dd0:	mov	r0, #0
   12dd4:	bl	119c0 <error@plt>
   12dd8:	movw	r1, #37364	; 0x91f4
   12ddc:	mov	r0, #0
   12de0:	mov	r2, #5
   12de4:	movt	r1, #2
   12de8:	bl	11924 <dcgettext@plt>
   12dec:	mov	r5, r0
   12df0:	mov	r0, #0
   12df4:	mov	r1, #8
   12df8:	mov	r2, sl
   12dfc:	bl	18870 <__assert_fail@plt+0x6bd4>
   12e00:	mov	r3, r0
   12e04:	mov	r0, #0
   12e08:	mov	r1, #0
   12e0c:	mov	r2, r5
   12e10:	str	r7, [sp]
   12e14:	bl	119c0 <error@plt>
   12e18:	ldr	r5, [sp, #80]	; 0x50
   12e1c:	movw	r6, #45640	; 0xb248
   12e20:	movw	r9, #45688	; 0xb278
   12e24:	mov	r7, #0
   12e28:	movt	r6, #3
   12e2c:	movt	r9, #3
   12e30:	b	1333c <__assert_fail@plt+0x16a0>
   12e34:	cmp	r7, #1
   12e38:	bne	12e7c <__assert_fail@plt+0x11e0>
   12e3c:	movw	r0, #45628	; 0xb23c
   12e40:	movt	r0, #3
   12e44:	ldr	r0, [r0]
   12e48:	cmp	r0, #2
   12e4c:	bne	12ea8 <__assert_fail@plt+0x120c>
   12e50:	movw	r1, #37437	; 0x923d
   12e54:	mov	r0, #0
   12e58:	mov	r2, #5
   12e5c:	mov	r4, #0
   12e60:	movt	r1, #2
   12e64:	bl	11924 <dcgettext@plt>
   12e68:	mov	r2, r0
   12e6c:	mov	r0, #0
   12e70:	mov	r1, #0
   12e74:	bl	119c0 <error@plt>
   12e78:	b	12e18 <__assert_fail@plt+0x117c>
   12e7c:	mov	r0, #1
   12e80:	movw	r5, #14332	; 0x37fc
   12e84:	str	r6, [sp, #84]	; 0x54
   12e88:	str	r0, [sp, #88]	; 0x58
   12e8c:	mov	r0, #0
   12e90:	movt	r5, #1
   12e94:	str	r0, [sp, #56]	; 0x38
   12e98:	movw	r0, #37665	; 0x9321
   12e9c:	movt	r0, #2
   12ea0:	str	r0, [sp, #52]	; 0x34
   12ea4:	b	1291c <__assert_fail@plt+0xc80>
   12ea8:	mov	r0, #1
   12eac:	mov	r7, #0
   12eb0:	str	r0, [sp, #84]	; 0x54
   12eb4:	ldr	r0, [sp, #20]
   12eb8:	cmp	r0, #0
   12ebc:	cmpne	r6, #1
   12ec0:	bne	12ed0 <__assert_fail@plt+0x1234>
   12ec4:	mov	r0, #0
   12ec8:	str	r0, [sp, #56]	; 0x38
   12ecc:	b	12f14 <__assert_fail@plt+0x1278>
   12ed0:	movw	r1, #37609	; 0x92e9
   12ed4:	mov	r0, #0
   12ed8:	mov	r2, #5
   12edc:	movt	r1, #2
   12ee0:	str	r0, [sp, #56]	; 0x38
   12ee4:	mov	r0, #0
   12ee8:	bl	11924 <dcgettext@plt>
   12eec:	mov	r5, r0
   12ef0:	mov	r0, #0
   12ef4:	mov	r1, #8
   12ef8:	mov	r2, sl
   12efc:	bl	18870 <__assert_fail@plt+0x6bd4>
   12f00:	mov	r3, r0
   12f04:	mov	r0, #0
   12f08:	mov	r1, #0
   12f0c:	mov	r2, r5
   12f10:	bl	119c0 <error@plt>
   12f14:	movw	r0, #37665	; 0x9321
   12f18:	movw	r5, #14332	; 0x37fc
   12f1c:	movt	r0, #2
   12f20:	movt	r5, #1
   12f24:	str	r0, [sp, #52]	; 0x34
   12f28:	mov	r0, #1
   12f2c:	str	r0, [sp, #88]	; 0x58
   12f30:	b	12920 <__assert_fail@plt+0xc84>
   12f34:	cmn	r0, #1
   12f38:	beq	12f58 <__assert_fail@plt+0x12bc>
   12f3c:	ldr	r1, [r6]
   12f40:	mov	r0, r4
   12f44:	blx	r1
   12f48:	cmp	r0, #8
   12f4c:	beq	12f58 <__assert_fail@plt+0x12bc>
   12f50:	ldr	r0, [sp, #272]	; 0x110
   12f54:	b	12f34 <__assert_fail@plt+0x1298>
   12f58:	ldr	r4, [sp, #92]	; 0x5c
   12f5c:	mov	r6, r8
   12f60:	cmp	r5, #0
   12f64:	sub	r8, fp, #728	; 0x2d8
   12f68:	beq	132e4 <__assert_fail@plt+0x1648>
   12f6c:	ldr	r0, [sp, #56]	; 0x38
   12f70:	cmp	r0, #0
   12f74:	beq	12ff0 <__assert_fail@plt+0x1354>
   12f78:	movw	r1, #37779	; 0x9393
   12f7c:	mov	r0, #0
   12f80:	mov	r2, #5
   12f84:	movt	r1, #2
   12f88:	bl	11924 <dcgettext@plt>
   12f8c:	movw	r1, #37834	; 0x93ca
   12f90:	mov	r5, r0
   12f94:	mov	r0, #0
   12f98:	mov	r2, #5
   12f9c:	movt	r1, #2
   12fa0:	bl	11924 <dcgettext@plt>
   12fa4:	mov	r1, r0
   12fa8:	ldr	r0, [sp, #304]	; 0x130
   12fac:	cmp	r0, #2
   12fb0:	beq	12fc8 <__assert_fail@plt+0x132c>
   12fb4:	cmp	r0, #1
   12fb8:	bne	12fd8 <__assert_fail@plt+0x133c>
   12fbc:	movw	r0, #42764	; 0xa70c
   12fc0:	mov	r1, r5
   12fc4:	b	12fcc <__assert_fail@plt+0x1330>
   12fc8:	movw	r0, #42764	; 0xa70c
   12fcc:	movt	r0, #2
   12fd0:	bl	11858 <printf@plt>
   12fd4:	b	12ff0 <__assert_fail@plt+0x1354>
   12fd8:	movw	r1, #37886	; 0x93fe
   12fdc:	mov	r0, #0
   12fe0:	mov	r2, #5
   12fe4:	movt	r1, #2
   12fe8:	bl	11924 <dcgettext@plt>
   12fec:	bl	11858 <printf@plt>
   12ff0:	ldr	r0, [sp, #64]	; 0x40
   12ff4:	orrs	r0, r4, r0
   12ff8:	ldreq	r0, [sp, #72]	; 0x48
   12ffc:	cmpeq	r0, #0
   13000:	beq	132e4 <__assert_fail@plt+0x1648>
   13004:	ldr	r0, [sp, #104]	; 0x68
   13008:	cmp	r0, #0
   1300c:	beq	130b0 <__assert_fail@plt+0x1414>
   13010:	ldr	r0, [sp, #72]	; 0x48
   13014:	bl	11a2c <localtime@plt>
   13018:	cmp	r0, #0
   1301c:	beq	130b0 <__assert_fail@plt+0x1414>
   13020:	movw	r2, #38696	; 0x9728
   13024:	mov	r5, r0
   13028:	mov	r0, r8
   1302c:	mov	r1, #20
   13030:	movt	r2, #2
   13034:	mov	r3, r5
   13038:	bl	11a14 <strftime@plt>
   1303c:	cmp	r0, #19
   13040:	bne	135e4 <__assert_fail@plt+0x1948>
   13044:	ldrb	r0, [fp, #-709]	; 0xfffffd3b
   13048:	cmp	r0, #0
   1304c:	bne	135fc <__assert_fail@plt+0x1960>
   13050:	ldrb	r0, [fp, #-710]	; 0xfffffd3a
   13054:	cmp	r0, #0
   13058:	beq	13614 <__assert_fail@plt+0x1978>
   1305c:	movw	r1, #38853	; 0x97c5
   13060:	mov	r0, #0
   13064:	mov	r2, #5
   13068:	movt	r1, #2
   1306c:	bl	11924 <dcgettext@plt>
   13070:	ldr	r1, [sp, #72]	; 0x48
   13074:	ldr	r2, [r1, #4]
   13078:	mov	r1, r8
   1307c:	bl	11858 <printf@plt>
   13080:	movw	r2, #38892	; 0x97ec
   13084:	mov	r0, r8
   13088:	mov	r1, #20
   1308c:	mov	r3, r5
   13090:	movt	r2, #2
   13094:	bl	11a14 <strftime@plt>
   13098:	cmp	r0, #5
   1309c:	bne	1362c <__assert_fail@plt+0x1990>
   130a0:	movw	r0, #41095	; 0xa087
   130a4:	mov	r1, r8
   130a8:	movt	r0, #2
   130ac:	bl	11858 <printf@plt>
   130b0:	movw	r1, #38908	; 0x97fc
   130b4:	movw	r2, #38939	; 0x981b
   130b8:	mov	r0, #5
   130bc:	mov	r3, r4
   130c0:	movt	r1, #2
   130c4:	movt	r2, #2
   130c8:	str	r0, [sp]
   130cc:	mov	r0, #0
   130d0:	bl	11c90 <dcngettext@plt>
   130d4:	mov	r5, r0
   130d8:	mov	r0, r4
   130dc:	mov	r4, #1
   130e0:	mov	r1, #0
   130e4:	mov	r2, r8
   130e8:	mov	r3, #0
   130ec:	stm	sp, {r4, r7}
   130f0:	str	r4, [sp, #8]
   130f4:	str	r7, [sp, #12]
   130f8:	bl	14d00 <__assert_fail@plt+0x3064>
   130fc:	mov	r1, r0
   13100:	mov	r0, r5
   13104:	bl	11858 <printf@plt>
   13108:	movw	r0, #45700	; 0xb284
   1310c:	movw	r1, #38995	; 0x9853
   13110:	mov	r2, #5
   13114:	movt	r0, #3
   13118:	movt	r1, #2
   1311c:	ldrb	r0, [r0]
   13120:	cmp	r0, #0
   13124:	movw	r0, #38971	; 0x983b
   13128:	movt	r0, #2
   1312c:	movne	r1, r0
   13130:	mov	r0, #0
   13134:	bl	11924 <dcgettext@plt>
   13138:	mov	r5, r0
   1313c:	ldrd	r0, [r6, #8]
   13140:	mov	r2, r8
   13144:	mov	r3, #0
   13148:	stm	sp, {r4, r7}
   1314c:	str	r4, [sp, #8]
   13150:	str	r7, [sp, #12]
   13154:	bl	14d00 <__assert_fail@plt+0x3064>
   13158:	mov	r1, r0
   1315c:	mov	r0, r5
   13160:	bl	11858 <printf@plt>
   13164:	movw	r1, #39014	; 0x9866
   13168:	mov	r0, #0
   1316c:	mov	r2, #5
   13170:	movt	r1, #2
   13174:	bl	11924 <dcgettext@plt>
   13178:	mov	r9, r0
   1317c:	ldrd	r0, [r6, #16]
   13180:	mov	r2, r8
   13184:	mov	r3, #0
   13188:	stm	sp, {r4, r7}
   1318c:	str	r4, [sp, #8]
   13190:	str	r7, [sp, #12]
   13194:	bl	14d00 <__assert_fail@plt+0x3064>
   13198:	mov	sl, r0
   1319c:	ldrd	r0, [r6, #24]
   131a0:	sub	lr, fp, #1024	; 0x400
   131a4:	mov	r3, #0
   131a8:	stm	sp, {r4, r7}
   131ac:	str	r4, [sp, #8]
   131b0:	str	r7, [sp, #12]
   131b4:	sub	r2, lr, #356	; 0x164
   131b8:	bl	14d00 <__assert_fail@plt+0x3064>
   131bc:	mov	r7, r0
   131c0:	ldrd	r0, [r6, #32]
   131c4:	mov	r8, #0
   131c8:	add	r2, sp, #1216	; 0x4c0
   131cc:	mov	r3, #0
   131d0:	stm	sp, {r4, r8}
   131d4:	str	r4, [sp, #8]
   131d8:	str	r8, [sp, #12]
   131dc:	bl	14d00 <__assert_fail@plt+0x3064>
   131e0:	mov	r5, r0
   131e4:	ldrd	r0, [r6, #40]	; 0x28
   131e8:	add	r2, sp, #564	; 0x234
   131ec:	mov	r3, #0
   131f0:	stm	sp, {r4, r8}
   131f4:	str	r4, [sp, #8]
   131f8:	str	r8, [sp, #12]
   131fc:	bl	14d00 <__assert_fail@plt+0x3064>
   13200:	mov	r1, sl
   13204:	ldr	sl, [sp, #108]	; 0x6c
   13208:	str	r0, [sp]
   1320c:	mov	r0, r9
   13210:	movw	r9, #45688	; 0xb278
   13214:	mov	r2, r7
   13218:	mov	r3, r5
   1321c:	movt	r9, #3
   13220:	bl	11858 <printf@plt>
   13224:	ldr	r0, [sp, #132]	; 0x84
   13228:	cmp	r0, #0
   1322c:	bne	132cc <__assert_fail@plt+0x1630>
   13230:	movw	r0, #45700	; 0xb284
   13234:	movt	r0, #3
   13238:	ldrb	r0, [r0]
   1323c:	cmp	r0, #1
   13240:	bne	13254 <__assert_fail@plt+0x15b8>
   13244:	movw	r1, #39194	; 0x991a
   13248:	mov	r0, #0
   1324c:	movt	r1, #2
   13250:	b	132c0 <__assert_fail@plt+0x1624>
   13254:	movw	r4, #45640	; 0xb248
   13258:	movt	r4, #3
   1325c:	ldrd	r0, [r4, #16]
   13260:	orrs	r0, r0, r1
   13264:	beq	132b4 <__assert_fail@plt+0x1618>
   13268:	movw	r1, #39282	; 0x9972
   1326c:	mov	r0, #0
   13270:	mov	r2, #5
   13274:	movt	r1, #2
   13278:	bl	11924 <dcgettext@plt>
   1327c:	mov	r5, r0
   13280:	ldrd	r0, [r4, #16]
   13284:	bl	28a34 <__assert_fail@plt+0x16d98>
   13288:	ldr	r2, [sp, #92]	; 0x5c
   1328c:	vmov	d17, r0, r1
   13290:	mov	r0, r5
   13294:	vmov	s0, r2
   13298:	vcvt.f64.u32	d16, s0
   1329c:	vsub.f64	d16, d17, d16
   132a0:	vmul.f64	d16, d16, d12
   132a4:	vdiv.f64	d16, d16, d17
   132a8:	vmov	r2, r3, d16
   132ac:	bl	11858 <printf@plt>
   132b0:	b	132cc <__assert_fail@plt+0x1630>
   132b4:	movw	r1, #39328	; 0x99a0
   132b8:	mov	r0, #0
   132bc:	movt	r1, #2
   132c0:	mov	r2, #5
   132c4:	bl	11924 <dcgettext@plt>
   132c8:	bl	11858 <printf@plt>
   132cc:	mov	r0, #10
   132d0:	bl	11b10 <putchar@plt>
   132d4:	movw	r6, #45640	; 0xb248
   132d8:	mov	r7, #0
   132dc:	sub	r8, fp, #728	; 0x2d8
   132e0:	movt	r6, #3
   132e4:	ldr	r0, [sp, #296]	; 0x128
   132e8:	bl	118b8 <ferror@plt>
   132ec:	cmp	r0, #0
   132f0:	beq	1332c <__assert_fail@plt+0x1690>
   132f4:	ldr	r0, [sp, #112]	; 0x70
   132f8:	ldr	r2, [sp, #300]	; 0x12c
   132fc:	mov	r1, #8
   13300:	mov	r4, #0
   13304:	ldr	r5, [r0]
   13308:	mov	r0, #0
   1330c:	bl	18870 <__assert_fail@plt+0x6bd4>
   13310:	movw	r2, #42764	; 0xa70c
   13314:	mov	r3, r0
   13318:	mov	r0, #0
   1331c:	mov	r1, r5
   13320:	movt	r2, #2
   13324:	bl	119c0 <error@plt>
   13328:	b	13338 <__assert_fail@plt+0x169c>
   1332c:	movw	r0, #45608	; 0xb228
   13330:	movt	r0, #3
   13334:	ldr	r4, [r0, #8]
   13338:	ldr	r5, [sp, #80]	; 0x50
   1333c:	ldr	r0, [sp, #128]	; 0x80
   13340:	bl	11b64 <fclose@plt>
   13344:	cmn	r0, #1
   13348:	beq	133ec <__assert_fail@plt+0x1750>
   1334c:	ldr	r0, [sp, #96]	; 0x60
   13350:	cmp	r0, #0
   13354:	beq	1335c <__assert_fail@plt+0x16c0>
   13358:	bl	1a12c <__assert_fail@plt+0x8490>
   1335c:	cmp	r5, #0
   13360:	beq	1338c <__assert_fail@plt+0x16f0>
   13364:	movw	r1, #42752	; 0xa700
   13368:	add	r0, sp, #264	; 0x108
   1336c:	mov	r2, #0
   13370:	add	r3, sp, #268	; 0x10c
   13374:	movt	r1, #2
   13378:	str	r0, [sp]
   1337c:	mov	r0, r5
   13380:	bl	14a3c <__assert_fail@plt+0x2da0>
   13384:	cmp	r0, #0
   13388:	bne	1241c <__assert_fail@plt+0x780>
   1338c:	ldr	r0, [sp, #44]	; 0x2c
   13390:	cmp	r0, #0
   13394:	beq	133a8 <__assert_fail@plt+0x170c>
   13398:	movw	r0, #36643	; 0x8f23
   1339c:	mov	r1, r4
   133a0:	movt	r0, #2
   133a4:	bl	11858 <printf@plt>
   133a8:	mov	r0, #0
   133ac:	cmp	r4, #0
   133b0:	bne	13420 <__assert_fail@plt+0x1784>
   133b4:	movw	r1, #45608	; 0xb228
   133b8:	ldr	r0, [sp, #124]	; 0x7c
   133bc:	movt	r1, #3
   133c0:	ldrd	r2, [r1]
   133c4:	clz	r0, r0
   133c8:	lsr	r0, r0, #5
   133cc:	orrs	r1, r2, r3
   133d0:	movwne	r1, #1
   133d4:	orr	r0, r0, r1
   133d8:	ldr	r1, [sp, #76]	; 0x4c
   133dc:	clz	r1, r1
   133e0:	lsr	r1, r1, #5
   133e4:	and	r0, r1, r0
   133e8:	b	13420 <__assert_fail@plt+0x1784>
   133ec:	ldr	r0, [sp, #112]	; 0x70
   133f0:	mov	r1, #8
   133f4:	mov	r2, sl
   133f8:	ldr	r4, [r0]
   133fc:	mov	r0, #0
   13400:	bl	18870 <__assert_fail@plt+0x6bd4>
   13404:	movw	r2, #42764	; 0xa70c
   13408:	mov	r3, r0
   1340c:	mov	r0, #0
   13410:	mov	r1, r4
   13414:	movt	r2, #2
   13418:	bl	119c0 <error@plt>
   1341c:	mov	r0, #0
   13420:	sub	sp, fp, #72	; 0x48
   13424:	vpop	{d8-d12}
   13428:	add	sp, sp, #4
   1342c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13430:	movw	r1, #36480	; 0x8e80
   13434:	mov	r0, #0
   13438:	mov	r2, #5
   1343c:	movt	r1, #2
   13440:	bl	11924 <dcgettext@plt>
   13444:	mov	r2, r0
   13448:	mov	r0, #0
   1344c:	mov	r1, #0
   13450:	bl	119c0 <error@plt>
   13454:	b	1341c <__assert_fail@plt+0x1780>
   13458:	movw	r2, #42764	; 0xa70c
   1345c:	mov	r3, r0
   13460:	mov	r0, #1
   13464:	mov	r1, #0
   13468:	movt	r2, #2
   1346c:	bl	119c0 <error@plt>
   13470:	mov	r0, #0
   13474:	bl	1375c <__assert_fail@plt+0x1ac0>
   13478:	movw	r1, #37253	; 0x9185
   1347c:	mov	r0, #0
   13480:	mov	r2, #5
   13484:	movt	r1, #2
   13488:	bl	11924 <dcgettext@plt>
   1348c:	mov	r2, r0
   13490:	mov	r0, #1
   13494:	mov	r1, #0
   13498:	bl	119c0 <error@plt>
   1349c:	mov	r4, #34	; 0x22
   134a0:	b	134ec <__assert_fail@plt+0x1850>
   134a4:	movw	r0, #36398	; 0x8e2e
   134a8:	movw	r1, #36413	; 0x8e3d
   134ac:	movw	r3, #36422	; 0x8e46
   134b0:	movw	r2, #1613	; 0x64d
   134b4:	movt	r0, #2
   134b8:	movt	r1, #2
   134bc:	movt	r3, #2
   134c0:	bl	11c9c <__assert_fail@plt>
   134c4:	movw	r1, #45592	; 0xb218
   134c8:	movw	r3, #39372	; 0x99cc
   134cc:	movt	r1, #3
   134d0:	movt	r3, #2
   134d4:	ldr	r2, [r1]
   134d8:	ldr	r1, [fp, #-1380]	; 0xfffffa9c
   134dc:	str	r2, [sp]
   134e0:	mov	r2, #108	; 0x6c
   134e4:	bl	19724 <__assert_fail@plt+0x7a88>
   134e8:	mov	r4, #22
   134ec:	movw	r1, #37314	; 0x91c2
   134f0:	mov	r0, #0
   134f4:	mov	r2, #5
   134f8:	movt	r1, #2
   134fc:	bl	11924 <dcgettext@plt>
   13500:	mov	r5, r0
   13504:	mov	r0, #0
   13508:	mov	r1, #8
   1350c:	mov	r2, r6
   13510:	bl	18870 <__assert_fail@plt+0x6bd4>
   13514:	mov	r3, r0
   13518:	mov	r0, #1
   1351c:	mov	r1, r4
   13520:	mov	r2, r5
   13524:	bl	119c0 <error@plt>
   13528:	movw	r1, #37314	; 0x91c2
   1352c:	mov	r0, #0
   13530:	mov	r2, #5
   13534:	movt	r1, #2
   13538:	bl	11924 <dcgettext@plt>
   1353c:	mov	r4, r0
   13540:	mov	r0, #0
   13544:	mov	r1, #8
   13548:	mov	r2, r6
   1354c:	bl	18870 <__assert_fail@plt+0x6bd4>
   13550:	mov	r3, r0
   13554:	mov	r0, #1
   13558:	mov	r1, #0
   1355c:	mov	r2, r4
   13560:	bl	119c0 <error@plt>
   13564:	movw	r0, #37944	; 0x9438
   13568:	movw	r1, #36413	; 0x8e3d
   1356c:	movw	r3, #37953	; 0x9441
   13570:	movw	r2, #935	; 0x3a7
   13574:	movt	r0, #2
   13578:	movt	r1, #2
   1357c:	movt	r3, #2
   13580:	bl	11c9c <__assert_fail@plt>
   13584:	ldr	r0, [sp, #112]	; 0x70
   13588:	movw	r1, #36330	; 0x8dea
   1358c:	mov	r2, #5
   13590:	movt	r1, #2
   13594:	ldr	r4, [r0]
   13598:	mov	r0, #0
   1359c:	bl	11924 <dcgettext@plt>
   135a0:	mov	r2, r0
   135a4:	mov	r0, #1
   135a8:	mov	r1, r4
   135ac:	bl	119c0 <error@plt>
   135b0:	movw	r1, #36273	; 0x8db1
   135b4:	movt	r1, #2
   135b8:	b	13678 <__assert_fail@plt+0x19dc>
   135bc:	movw	r1, #37686	; 0x9336
   135c0:	mov	r0, #0
   135c4:	mov	r2, #5
   135c8:	movt	r1, #2
   135cc:	bl	11924 <dcgettext@plt>
   135d0:	mov	r4, r0
   135d4:	mov	r0, #0
   135d8:	mov	r1, #8
   135dc:	mov	r2, sl
   135e0:	b	1354c <__assert_fail@plt+0x18b0>
   135e4:	movw	r0, #38714	; 0x973a
   135e8:	movw	r1, #36413	; 0x8e3d
   135ec:	movw	r3, #38740	; 0x9754
   135f0:	movw	r2, #845	; 0x34d
   135f4:	movt	r0, #2
   135f8:	b	13640 <__assert_fail@plt+0x19a4>
   135fc:	movw	r0, #38795	; 0x978b
   13600:	movw	r1, #36413	; 0x8e3d
   13604:	movw	r3, #38740	; 0x9754
   13608:	movw	r2, #846	; 0x34e
   1360c:	movt	r0, #2
   13610:	b	13640 <__assert_fail@plt+0x19a4>
   13614:	movw	r0, #38824	; 0x97a8
   13618:	movw	r1, #36413	; 0x8e3d
   1361c:	movw	r3, #38740	; 0x9754
   13620:	movw	r2, #847	; 0x34f
   13624:	movt	r0, #2
   13628:	b	13640 <__assert_fail@plt+0x19a4>
   1362c:	movw	r0, #38895	; 0x97ef
   13630:	movw	r1, #36413	; 0x8e3d
   13634:	movw	r3, #38740	; 0x9754
   13638:	movw	r2, #851	; 0x353
   1363c:	movt	r0, #2
   13640:	movt	r1, #2
   13644:	movt	r3, #2
   13648:	bl	11c9c <__assert_fail@plt>
   1364c:	movw	r1, #36176	; 0x8d50
   13650:	mov	r0, #0
   13654:	mov	r2, #5
   13658:	movt	r1, #2
   1365c:	bl	11924 <dcgettext@plt>
   13660:	mov	r4, r0
   13664:	bl	11ac8 <__errno_location@plt>
   13668:	str	r0, [sp, #112]	; 0x70
   1366c:	b	136ac <__assert_fail@plt+0x1a10>
   13670:	movw	r1, #36208	; 0x8d70
   13674:	movt	r1, #2
   13678:	mov	r0, #0
   1367c:	mov	r2, #5
   13680:	bl	11924 <dcgettext@plt>
   13684:	mov	r4, r0
   13688:	b	136ac <__assert_fail@plt+0x1a10>
   1368c:	movw	r1, #36241	; 0x8d91
   13690:	mov	r0, #0
   13694:	mov	r2, #5
   13698:	movt	r1, #2
   1369c:	bl	11924 <dcgettext@plt>
   136a0:	mov	r4, r0
   136a4:	ldr	r0, [sp, #112]	; 0x70
   136a8:	str	r5, [r0]
   136ac:	ldr	r0, [sp, #112]	; 0x70
   136b0:	mov	r1, #8
   136b4:	mov	r2, r4
   136b8:	ldr	r5, [r0]
   136bc:	mov	r0, #0
   136c0:	bl	18870 <__assert_fail@plt+0x6bd4>
   136c4:	movw	r2, #42764	; 0xa70c
   136c8:	mov	r3, r0
   136cc:	mov	r0, #1
   136d0:	mov	r1, r5
   136d4:	b	13468 <__assert_fail@plt+0x17cc>
   136d8:	movw	r1, #36454	; 0x8e66
   136dc:	mov	r0, #0
   136e0:	mov	r2, #5
   136e4:	movt	r1, #2
   136e8:	bl	11924 <dcgettext@plt>
   136ec:	mov	r2, r0
   136f0:	mov	r0, #0
   136f4:	mov	r1, #0
   136f8:	bl	119c0 <error@plt>
   136fc:	mov	r0, #1
   13700:	bl	1375c <__assert_fail@plt+0x1ac0>
   13704:	push	{r4, sl, fp, lr}
   13708:	add	fp, sp, #8
   1370c:	mov	r1, #131072	; 0x20000
   13710:	bl	14cc0 <__assert_fail@plt+0x3024>
   13714:	mov	r4, r0
   13718:	cmp	r0, #0
   1371c:	bmi	13744 <__assert_fail@plt+0x1aa8>
   13720:	mov	r0, r4
   13724:	mov	r1, #2
   13728:	mov	r2, #1
   1372c:	bl	19ef8 <__assert_fail@plt+0x825c>
   13730:	cmp	r0, #0
   13734:	beq	13744 <__assert_fail@plt+0x1aa8>
   13738:	mov	r0, r4
   1373c:	bl	11c78 <close@plt>
   13740:	mvn	r4, #0
   13744:	mov	r0, r4
   13748:	pop	{r4, sl, fp, pc}
   1374c:	movw	r0, #45604	; 0xb224
   13750:	movt	r0, #3
   13754:	ldr	r0, [r0]
   13758:	b	1a12c <__assert_fail@plt+0x8490>
   1375c:	push	{fp, lr}
   13760:	mov	fp, sp
   13764:	cmp	r0, #0
   13768:	bne	137b8 <__assert_fail@plt+0x1b1c>
   1376c:	movw	r5, #45588	; 0xb214
   13770:	movw	r1, #36837	; 0x8fe5
   13774:	mov	r0, #0
   13778:	mov	r2, #5
   1377c:	movt	r5, #3
   13780:	movt	r1, #2
   13784:	ldr	r4, [r5]
   13788:	bl	11924 <dcgettext@plt>
   1378c:	movw	r6, #45716	; 0xb294
   13790:	mov	r1, r0
   13794:	mov	r0, r4
   13798:	movt	r6, #3
   1379c:	ldr	r2, [r6]
   137a0:	bl	11ab0 <fprintf@plt>
   137a4:	ldr	r0, [r5]
   137a8:	ldr	r1, [r6]
   137ac:	bl	14acc <__assert_fail@plt+0x2e30>
   137b0:	mov	r0, #0
   137b4:	bl	11a68 <exit@plt>
   137b8:	mov	r4, r0
   137bc:	movw	r0, #45584	; 0xb210
   137c0:	movw	r1, #36798	; 0x8fbe
   137c4:	mov	r2, #5
   137c8:	movt	r0, #3
   137cc:	movt	r1, #2
   137d0:	ldr	r5, [r0]
   137d4:	mov	r0, #0
   137d8:	bl	11924 <dcgettext@plt>
   137dc:	mov	r1, r0
   137e0:	movw	r0, #45716	; 0xb294
   137e4:	movt	r0, #3
   137e8:	ldr	r2, [r0]
   137ec:	mov	r0, r5
   137f0:	bl	11ab0 <fprintf@plt>
   137f4:	mov	r0, r4
   137f8:	bl	11a68 <exit@plt>
   137fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13800:	add	fp, sp, #24
   13804:	sub	sp, sp, #8
   13808:	mov	r4, r0
   1380c:	ldr	r0, [r0]
   13810:	cmp	r0, #128	; 0x80
   13814:	bne	13844 <__assert_fail@plt+0x1ba8>
   13818:	ldr	r5, [r4, #24]
   1381c:	mov	r0, r5
   13820:	bl	11b28 <fgetc@plt>
   13824:	mov	r6, r0
   13828:	mov	r0, r5
   1382c:	bl	11b28 <fgetc@plt>
   13830:	uxtb	r0, r0
   13834:	ldr	r1, [r4, #4]
   13838:	orr	r0, r0, r6, lsl #8
   1383c:	sxtah	r6, r1, r0
   13840:	b	13854 <__assert_fail@plt+0x1bb8>
   13844:	ldr	r1, [r4, #4]
   13848:	addlt	r6, r1, r0
   1384c:	addge	r0, r0, r1
   13850:	subge	r6, r0, #256	; 0x100
   13854:	cmp	r6, #0
   13858:	str	r6, [r4, #4]
   1385c:	bmi	13998 <__assert_fail@plt+0x1cfc>
   13860:	ldr	r0, [r4, #8]
   13864:	cmp	r6, r0
   13868:	bgt	13998 <__assert_fail@plt+0x1cfc>
   1386c:	ldr	r3, [r4, #24]
   13870:	mov	r0, #0
   13874:	mov	r1, sp
   13878:	mov	r2, #0
   1387c:	str	r0, [sp, #4]
   13880:	str	r0, [sp]
   13884:	add	r0, sp, #4
   13888:	bl	11c18 <getdelim@plt>
   1388c:	cmp	r0, #0
   13890:	bmi	1398c <__assert_fail@plt+0x1cf0>
   13894:	ldr	r1, [sp, #4]
   13898:	cmp	r1, #0
   1389c:	beq	139d4 <__assert_fail@plt+0x1d38>
   138a0:	ldr	r2, [r4, #16]
   138a4:	add	r8, r0, #1
   138a8:	mov	r5, r0
   138ac:	ldr	r0, [r4, #12]
   138b0:	add	r7, r8, r6
   138b4:	cmp	r7, r2
   138b8:	bls	138d8 <__assert_fail@plt+0x1c3c>
   138bc:	mov	r1, r7
   138c0:	bl	1a28c <__assert_fail@plt+0x85f0>
   138c4:	cmp	r0, #0
   138c8:	beq	1398c <__assert_fail@plt+0x1cf0>
   138cc:	str	r0, [r4, #12]
   138d0:	str	r7, [r4, #16]
   138d4:	ldr	r1, [sp, #4]
   138d8:	add	r0, r0, r6
   138dc:	mov	r2, r8
   138e0:	bl	118dc <memcpy@plt>
   138e4:	ldr	r0, [sp, #4]
   138e8:	bl	1a12c <__assert_fail@plt+0x8490>
   138ec:	cmp	r5, #1
   138f0:	blt	1398c <__assert_fail@plt+0x1cf0>
   138f4:	ldr	r0, [r4, #24]
   138f8:	bl	11c6c <getc@plt>
   138fc:	str	r0, [r4]
   13900:	ldr	r0, [r4, #4]
   13904:	add	r0, r0, r5
   13908:	subs	r1, r0, #1
   1390c:	str	r1, [r4, #8]
   13910:	bgt	13954 <__assert_fail@plt+0x1cb8>
   13914:	movw	r1, #38165	; 0x9515
   13918:	mov	r0, #0
   1391c:	mov	r2, #5
   13920:	movt	r1, #2
   13924:	bl	11924 <dcgettext@plt>
   13928:	ldr	r2, [r4, #28]
   1392c:	mov	r5, r0
   13930:	mov	r0, #0
   13934:	mov	r1, #8
   13938:	bl	18870 <__assert_fail@plt+0x6bd4>
   1393c:	mov	r3, r0
   13940:	mov	r0, #1
   13944:	mov	r1, #0
   13948:	mov	r2, r5
   1394c:	bl	119c0 <error@plt>
   13950:	ldr	r1, [r4, #8]
   13954:	ldr	r0, [r4, #12]
   13958:	add	r2, r0, r1
   1395c:	ldrb	r3, [r2, #-1]
   13960:	cmp	r3, #0
   13964:	beq	139f4 <__assert_fail@plt+0x1d58>
   13968:	ldrb	r1, [r0, r1]
   1396c:	cmp	r1, #0
   13970:	bne	13a0c <__assert_fail@plt+0x1d70>
   13974:	ldrb	r1, [r2, #1]
   13978:	cmp	r1, #0
   1397c:	bne	13a24 <__assert_fail@plt+0x1d88>
   13980:	str	r0, [r4, #20]
   13984:	mov	r0, #1
   13988:	b	13990 <__assert_fail@plt+0x1cf4>
   1398c:	mov	r0, #8
   13990:	sub	sp, fp, #24
   13994:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13998:	movw	r1, #38165	; 0x9515
   1399c:	mov	r0, #0
   139a0:	mov	r2, #5
   139a4:	movt	r1, #2
   139a8:	bl	11924 <dcgettext@plt>
   139ac:	ldr	r2, [r4, #28]
   139b0:	mov	r5, r0
   139b4:	mov	r0, #0
   139b8:	mov	r1, #8
   139bc:	bl	18870 <__assert_fail@plt+0x6bd4>
   139c0:	mov	r3, r0
   139c4:	mov	r0, #1
   139c8:	mov	r1, #0
   139cc:	mov	r2, r5
   139d0:	bl	119c0 <error@plt>
   139d4:	movw	r0, #38302	; 0x959e
   139d8:	movw	r1, #36413	; 0x8e3d
   139dc:	movw	r3, #38312	; 0x95a8
   139e0:	mov	r2, #245	; 0xf5
   139e4:	movt	r0, #2
   139e8:	movt	r1, #2
   139ec:	movt	r3, #2
   139f0:	bl	11c9c <__assert_fail@plt>
   139f4:	movw	r0, #38206	; 0x953e
   139f8:	movw	r1, #36413	; 0x8e3d
   139fc:	movw	r3, #38219	; 0x954b
   13a00:	mov	r2, #568	; 0x238
   13a04:	movt	r0, #2
   13a08:	b	13a38 <__assert_fail@plt+0x1d9c>
   13a0c:	movw	r0, #38276	; 0x9584
   13a10:	movw	r1, #36413	; 0x8e3d
   13a14:	movw	r3, #38219	; 0x954b
   13a18:	movw	r2, #569	; 0x239
   13a1c:	movt	r0, #2
   13a20:	b	13a38 <__assert_fail@plt+0x1d9c>
   13a24:	movw	r0, #38289	; 0x9591
   13a28:	movw	r1, #36413	; 0x8e3d
   13a2c:	movw	r3, #38219	; 0x954b
   13a30:	movw	r2, #570	; 0x23a
   13a34:	movt	r0, #2
   13a38:	movt	r1, #2
   13a3c:	movt	r3, #2
   13a40:	bl	11c9c <__assert_fail@plt>
   13a44:	push	{r4, sl, fp, lr}
   13a48:	add	fp, sp, #8
   13a4c:	mov	r4, r0
   13a50:	mvn	r0, r1
   13a54:	cmp	r0, r2
   13a58:	bcc	13a88 <__assert_fail@plt+0x1dec>
   13a5c:	add	r0, r2, r1
   13a60:	mov	r1, r4
   13a64:	ldr	r2, [r1, #16]!
   13a68:	cmp	r2, r0
   13a6c:	popcs	{r4, sl, fp, pc}
   13a70:	str	r0, [r4, #16]
   13a74:	mov	r2, #1
   13a78:	ldr	r0, [r4, #12]
   13a7c:	bl	193c0 <__assert_fail@plt+0x7724>
   13a80:	str	r0, [r4, #12]
   13a84:	pop	{r4, sl, fp, pc}
   13a88:	mov	r0, r4
   13a8c:	bl	14284 <__assert_fail@plt+0x25e8>
   13a90:	push	{r4, r5, r6, sl, fp, lr}
   13a94:	add	fp, sp, #16
   13a98:	mov	r4, r0
   13a9c:	ldr	r0, [r0]
   13aa0:	cmn	r0, #1
   13aa4:	beq	13b0c <__assert_fail@plt+0x1e70>
   13aa8:	cmp	r0, #30
   13aac:	bne	13b14 <__assert_fail@plt+0x1e78>
   13ab0:	ldr	r5, [r4, #4]
   13ab4:	ldr	r2, [r4, #8]
   13ab8:	ldr	r0, [r4, #24]
   13abc:	ldr	r1, [r4, #28]
   13ac0:	sub	r3, r5, #14
   13ac4:	cmp	r3, #0
   13ac8:	str	r3, [r4, #4]
   13acc:	subgt	r2, r2, r3
   13ad0:	add	r3, r4, #32
   13ad4:	bl	142b8 <__assert_fail@plt+0x261c>
   13ad8:	rsb	r1, r5, #14
   13adc:	cmp	r0, r1
   13ae0:	blt	13bfc <__assert_fail@plt+0x1f60>
   13ae4:	ldr	r1, [r4, #4]
   13ae8:	add	r5, r1, r0
   13aec:	cmn	r5, #1
   13af0:	str	r5, [r4, #4]
   13af4:	bgt	13b2c <__assert_fail@plt+0x1e90>
   13af8:	movw	r0, #38505	; 0x9669
   13afc:	movw	r1, #36413	; 0x8e3d
   13b00:	movw	r3, #38453	; 0x9635
   13b04:	mov	r2, #480	; 0x1e0
   13b08:	b	13c24 <__assert_fail@plt+0x1f88>
   13b0c:	mov	r6, #8
   13b10:	b	13bf4 <__assert_fail@plt+0x1f58>
   13b14:	ldr	r1, [r4, #4]
   13b18:	add	r0, r0, r1
   13b1c:	sub	r5, r0, #14
   13b20:	cmn	r5, #1
   13b24:	str	r5, [r4, #4]
   13b28:	ble	13c14 <__assert_fail@plt+0x1f78>
   13b2c:	ldr	r0, [r4, #24]
   13b30:	bl	11c6c <getc@plt>
   13b34:	cmp	r0, #31
   13b38:	str	r0, [r4]
   13b3c:	blt	13bc8 <__assert_fail@plt+0x1f2c>
   13b40:	cmp	r0, #127	; 0x7f
   13b44:	bgt	13b68 <__assert_fail@plt+0x1ecc>
   13b48:	mov	r0, r4
   13b4c:	mov	r1, r5
   13b50:	mov	r2, #1
   13b54:	mov	r6, #1
   13b58:	bl	13a44 <__assert_fail@plt+0x1da8>
   13b5c:	ldr	r0, [r4]
   13b60:	mov	r1, r5
   13b64:	b	13ba8 <__assert_fail@plt+0x1f0c>
   13b68:	mov	r0, r4
   13b6c:	mov	r1, r5
   13b70:	mov	r2, #2
   13b74:	mov	r6, #2
   13b78:	bl	13a44 <__assert_fail@plt+0x1da8>
   13b7c:	ldr	r0, [r4]
   13b80:	ldr	r1, [r4, #12]
   13b84:	and	r0, r0, #127	; 0x7f
   13b88:	str	r0, [r4]
   13b8c:	add	r0, r4, r0
   13b90:	ldrb	r0, [r0, #36]	; 0x24
   13b94:	strb	r0, [r1, r5]
   13b98:	add	r1, r5, #1
   13b9c:	ldr	r0, [r4]
   13ba0:	add	r0, r4, r0
   13ba4:	ldrb	r0, [r0, #164]	; 0xa4
   13ba8:	ldr	r2, [r4, #12]
   13bac:	strb	r0, [r2, r1]
   13bb0:	ldr	r0, [r4, #24]
   13bb4:	bl	11c6c <getc@plt>
   13bb8:	add	r5, r5, r6
   13bbc:	cmp	r0, #30
   13bc0:	str	r0, [r4]
   13bc4:	bgt	13b40 <__assert_fail@plt+0x1ea4>
   13bc8:	mov	r0, r4
   13bcc:	mov	r1, r5
   13bd0:	mov	r2, #1
   13bd4:	mov	r6, #1
   13bd8:	bl	13a44 <__assert_fail@plt+0x1da8>
   13bdc:	ldr	r0, [r4, #12]
   13be0:	mov	r1, #0
   13be4:	strb	r1, [r0, r5]
   13be8:	str	r5, [r4, #8]
   13bec:	ldr	r0, [r4, #12]
   13bf0:	str	r0, [r4, #20]
   13bf4:	mov	r0, r6
   13bf8:	pop	{r4, r5, r6, sl, fp, pc}
   13bfc:	movw	r0, #38438	; 0x9626
   13c00:	movw	r1, #36413	; 0x8e3d
   13c04:	movw	r3, #38453	; 0x9635
   13c08:	movw	r2, #478	; 0x1de
   13c0c:	movt	r0, #2
   13c10:	b	13c28 <__assert_fail@plt+0x1f8c>
   13c14:	movw	r0, #38505	; 0x9669
   13c18:	movw	r1, #36413	; 0x8e3d
   13c1c:	movw	r3, #38453	; 0x9635
   13c20:	movw	r2, #485	; 0x1e5
   13c24:	movt	r0, #2
   13c28:	movt	r1, #2
   13c2c:	movt	r3, #2
   13c30:	bl	11c9c <__assert_fail@plt>
   13c34:	push	{r4, sl, fp, lr}
   13c38:	add	fp, sp, #8
   13c3c:	mov	r4, r0
   13c40:	ldr	r0, [r0, #12]
   13c44:	bl	14b38 <__assert_fail@plt+0x2e9c>
   13c48:	str	r0, [r4, #20]
   13c4c:	mov	r0, #1
   13c50:	pop	{r4, sl, fp, pc}
   13c54:	push	{r4, r5, fp, lr}
   13c58:	add	fp, sp, #8
   13c5c:	sub	sp, sp, #8
   13c60:	ldr	r5, [r0, #20]
   13c64:	mov	r4, r1
   13c68:	mov	r0, r5
   13c6c:	bl	11a98 <strlen@plt>
   13c70:	mov	r2, r0
   13c74:	mov	r0, #0
   13c78:	mov	r1, r5
   13c7c:	mov	r3, #0
   13c80:	str	r0, [sp, #4]
   13c84:	mov	r0, r4
   13c88:	str	r2, [sp]
   13c8c:	bl	1d40c <__assert_fail@plt+0xb770>
   13c90:	cmp	r0, #0
   13c94:	mov	r1, #2
   13c98:	movwmi	r1, #4
   13c9c:	mov	r0, r1
   13ca0:	sub	sp, fp, #8
   13ca4:	pop	{r4, r5, fp, pc}
   13ca8:	push	{fp, lr}
   13cac:	mov	fp, sp
   13cb0:	mov	r2, r1
   13cb4:	ldr	r1, [r0, #20]
   13cb8:	mov	r0, r2
   13cbc:	mov	r2, #16
   13cc0:	bl	119cc <fnmatch@plt>
   13cc4:	cmp	r0, #0
   13cc8:	mov	r1, #4
   13ccc:	movweq	r1, #2
   13cd0:	mov	r0, r1
   13cd4:	pop	{fp, pc}
   13cd8:	push	{fp, lr}
   13cdc:	mov	fp, sp
   13ce0:	mov	r2, r1
   13ce4:	ldr	r1, [r0, #20]
   13ce8:	mov	r0, r2
   13cec:	mov	r2, #0
   13cf0:	bl	119cc <fnmatch@plt>
   13cf4:	cmp	r0, #0
   13cf8:	mov	r1, #4
   13cfc:	movweq	r1, #2
   13d00:	mov	r0, r1
   13d04:	pop	{fp, pc}
   13d08:	push	{r4, r5, fp, lr}
   13d0c:	add	fp, sp, #8
   13d10:	mov	r4, r1
   13d14:	mov	r5, r0
   13d18:	bl	11990 <__ctype_get_mb_cur_max@plt>
   13d1c:	cmp	r0, #1
   13d20:	bne	13d44 <__assert_fail@plt+0x20a8>
   13d24:	ldr	r0, [r5, #20]
   13d28:	mov	r1, r4
   13d2c:	bl	26c4c <__assert_fail@plt+0x14fb0>
   13d30:	cmp	r0, #0
   13d34:	mov	r1, #2
   13d38:	movweq	r1, #4
   13d3c:	mov	r0, r1
   13d40:	pop	{r4, r5, fp, pc}
   13d44:	movw	r0, #38532	; 0x9684
   13d48:	movw	r1, #36413	; 0x8e3d
   13d4c:	movw	r3, #38548	; 0x9694
   13d50:	movw	r2, #714	; 0x2ca
   13d54:	movt	r0, #2
   13d58:	movt	r1, #2
   13d5c:	movt	r3, #2
   13d60:	bl	11c9c <__assert_fail@plt>
   13d64:	push	{r4, r5, fp, lr}
   13d68:	add	fp, sp, #8
   13d6c:	mov	r4, r1
   13d70:	mov	r5, r0
   13d74:	bl	11990 <__ctype_get_mb_cur_max@plt>
   13d78:	cmp	r0, #1
   13d7c:	bne	13da0 <__assert_fail@plt+0x2104>
   13d80:	ldr	r0, [r5, #20]
   13d84:	mov	r1, r4
   13d88:	bl	27828 <__assert_fail@plt+0x15b8c>
   13d8c:	cmp	r0, #0
   13d90:	mov	r1, #2
   13d94:	movweq	r1, #4
   13d98:	mov	r0, r1
   13d9c:	pop	{r4, r5, fp, pc}
   13da0:	movw	r0, #38532	; 0x9684
   13da4:	movw	r1, #36413	; 0x8e3d
   13da8:	movw	r3, #38621	; 0x96dd
   13dac:	movw	r2, #690	; 0x2b2
   13db0:	movt	r0, #2
   13db4:	movt	r1, #2
   13db8:	movt	r3, #2
   13dbc:	bl	11c9c <__assert_fail@plt>
   13dc0:	push	{fp, lr}
   13dc4:	mov	fp, sp
   13dc8:	ldr	r0, [r0, #20]
   13dcc:	bl	15858 <__assert_fail@plt+0x3bbc>
   13dd0:	cmp	r0, #0
   13dd4:	mov	r1, #2
   13dd8:	movweq	r1, #4
   13ddc:	mov	r0, r1
   13de0:	pop	{fp, pc}
   13de4:	push	{fp, lr}
   13de8:	mov	fp, sp
   13dec:	ldr	r0, [r0, #20]
   13df0:	bl	16608 <__assert_fail@plt+0x496c>
   13df4:	cmp	r0, #0
   13df8:	mov	r1, #2
   13dfc:	movweq	r1, #4
   13e00:	mov	r0, r1
   13e04:	pop	{fp, pc}
   13e08:	push	{fp, lr}
   13e0c:	mov	fp, sp
   13e10:	sub	sp, sp, #104	; 0x68
   13e14:	ldr	r0, [r0, #12]
   13e18:	mov	r1, sp
   13e1c:	bl	28cdc <__assert_fail@plt+0x17040>
   13e20:	cmp	r0, #0
   13e24:	mov	r1, #4
   13e28:	movweq	r1, #1
   13e2c:	mov	r0, r1
   13e30:	mov	sp, fp
   13e34:	pop	{fp, pc}
   13e38:	push	{fp, lr}
   13e3c:	mov	fp, sp
   13e40:	sub	sp, sp, #104	; 0x68
   13e44:	ldr	r0, [r0, #12]
   13e48:	mov	r1, sp
   13e4c:	bl	28cfc <__assert_fail@plt+0x17060>
   13e50:	cmp	r0, #0
   13e54:	mov	r1, #4
   13e58:	movweq	r1, #1
   13e5c:	mov	r0, r1
   13e60:	mov	sp, fp
   13e64:	pop	{fp, pc}
   13e68:	push	{fp, lr}
   13e6c:	mov	fp, sp
   13e70:	sub	sp, sp, #104	; 0x68
   13e74:	ldr	r0, [r0, #12]
   13e78:	mov	r1, sp
   13e7c:	bl	28cdc <__assert_fail@plt+0x17040>
   13e80:	cmp	r0, #0
   13e84:	mov	r1, #1
   13e88:	movweq	r1, #4
   13e8c:	mov	r0, r1
   13e90:	mov	sp, fp
   13e94:	pop	{fp, pc}
   13e98:	push	{fp, lr}
   13e9c:	mov	fp, sp
   13ea0:	sub	sp, sp, #104	; 0x68
   13ea4:	ldr	r0, [r0, #12]
   13ea8:	mov	r1, sp
   13eac:	bl	28cfc <__assert_fail@plt+0x17060>
   13eb0:	cmp	r0, #0
   13eb4:	mov	r1, #1
   13eb8:	movweq	r1, #4
   13ebc:	mov	r0, r1
   13ec0:	mov	sp, fp
   13ec4:	pop	{fp, pc}
   13ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ecc:	add	fp, sp, #28
   13ed0:	sub	sp, sp, #4
   13ed4:	vpush	{d8-d9}
   13ed8:	ldr	r4, [r0, #12]
   13edc:	vldr	s17, [pc, #236]	; 13fd0 <__assert_fail@plt+0x2334>
   13ee0:	vldr	s16, [pc, #236]	; 13fd4 <__assert_fail@plt+0x2338>
   13ee4:	add	r8, r1, #8
   13ee8:	mov	r0, r4
   13eec:	bl	11a98 <strlen@plt>
   13ef0:	vld1.64	{d16-d17}, [r8]
   13ef4:	vmov	s18, r0
   13ef8:	vmov.f32	s19, s17
   13efc:	vadd.i64	q8, q8, q4
   13f00:	vst1.64	{d16-d17}, [r8]
   13f04:	ldrb	r1, [r4]
   13f08:	cmp	r1, #0
   13f0c:	beq	13fc0 <__assert_fail@plt+0x2324>
   13f10:	add	r4, r4, #1
   13f14:	mov	r5, #0
   13f18:	mov	r9, #1
   13f1c:	mov	r6, #0
   13f20:	mov	sl, #0
   13f24:	sxtb	r0, r1
   13f28:	uxtb	r7, r1
   13f2c:	mov	r2, #1
   13f30:	cmp	r0, #0
   13f34:	mov	r0, #1
   13f38:	movwmi	sl, #1
   13f3c:	cmp	r7, #10
   13f40:	beq	13f64 <__assert_fail@plt+0x22c8>
   13f44:	bl	11a5c <__ctype_b_loc@plt>
   13f48:	ldr	r0, [r0]
   13f4c:	add	r0, r0, r7, lsl #1
   13f50:	ldrb	r0, [r0, #1]
   13f54:	tst	r0, #32
   13f58:	mov	r0, r5
   13f5c:	movne	r6, r9
   13f60:	mov	r2, r6
   13f64:	ldrb	r1, [r4], #1
   13f68:	mov	r5, r0
   13f6c:	mov	r6, r2
   13f70:	cmp	r1, #0
   13f74:	bne	13f24 <__assert_fail@plt+0x2288>
   13f78:	cmp	sl, #0
   13f7c:	beq	13f90 <__assert_fail@plt+0x22f4>
   13f80:	ldrd	r4, [r8, #32]
   13f84:	adds	r4, r4, #1
   13f88:	adc	r5, r5, #0
   13f8c:	strd	r4, [r8, #32]
   13f90:	cmp	r2, #0
   13f94:	beq	13fa8 <__assert_fail@plt+0x230c>
   13f98:	ldrd	r2, [r8, #16]
   13f9c:	adds	r2, r2, #1
   13fa0:	adc	r3, r3, #0
   13fa4:	strd	r2, [r8, #16]
   13fa8:	cmp	r0, #0
   13fac:	beq	13fc0 <__assert_fail@plt+0x2324>
   13fb0:	ldrd	r0, [r8, #24]
   13fb4:	adds	r0, r0, #1
   13fb8:	adc	r1, r1, #0
   13fbc:	strd	r0, [r8, #24]
   13fc0:	mov	r0, #1
   13fc4:	vpop	{d8-d9}
   13fc8:	add	sp, sp, #4
   13fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fd0:	andeq	r0, r0, r0
   13fd4:	andeq	r0, r0, r1
   13fd8:	push	{fp, lr}
   13fdc:	mov	fp, sp
   13fe0:	sub	sp, sp, #8
   13fe4:	movw	r1, #45637	; 0xb245
   13fe8:	movw	r3, #45588	; 0xb214
   13fec:	ldr	r0, [r0, #12]
   13ff0:	movt	r1, #3
   13ff4:	movt	r3, #3
   13ff8:	ldrb	r2, [r1]
   13ffc:	movw	r1, #45604	; 0xb224
   14000:	ldr	ip, [r3]
   14004:	movw	r3, #42764	; 0xa70c
   14008:	movt	r1, #3
   1400c:	movt	r3, #2
   14010:	str	r0, [sp]
   14014:	ldr	r1, [r1]
   14018:	mov	r0, ip
   1401c:	bl	144a8 <__assert_fail@plt+0x280c>
   14020:	movw	r0, #45632	; 0xb240
   14024:	movt	r0, #3
   14028:	ldrb	r1, [r0]
   1402c:	mov	r0, #10
   14030:	cmp	r1, #0
   14034:	movwne	r0, #0
   14038:	bl	11b10 <putchar@plt>
   1403c:	mov	r0, #1
   14040:	mov	sp, fp
   14044:	pop	{fp, pc}
   14048:	push	{fp, lr}
   1404c:	mov	fp, sp
   14050:	movw	r1, #45588	; 0xb214
   14054:	ldr	r0, [r0, #12]
   14058:	movt	r1, #3
   1405c:	ldr	r1, [r1]
   14060:	bl	11c48 <fputs@plt>
   14064:	movw	r0, #45632	; 0xb240
   14068:	movt	r0, #3
   1406c:	ldrb	r1, [r0]
   14070:	mov	r0, #10
   14074:	cmp	r1, #0
   14078:	movwne	r0, #0
   1407c:	bl	11b10 <putchar@plt>
   14080:	mov	r0, #1
   14084:	pop	{fp, pc}
   14088:	push	{r4, r5, fp, lr}
   1408c:	add	fp, sp, #8
   14090:	ldr	r0, [r1, #8]
   14094:	ldr	r2, [r1, #12]
   14098:	ldr	ip, [r1]
   1409c:	ldr	r3, [r1, #4]
   140a0:	adds	r4, r0, #1
   140a4:	mov	r0, #8
   140a8:	adc	r5, r2, #0
   140ac:	strd	r4, [r1, #8]
   140b0:	subs	r1, r4, ip
   140b4:	sbcs	r1, r5, r3
   140b8:	movwcc	r0, #1
   140bc:	pop	{r4, r5, fp, pc}
   140c0:	ldr	r0, [r1, #8]
   140c4:	ldr	r3, [r1, #12]
   140c8:	adds	r0, r0, #1
   140cc:	str	r0, [r1, #8]
   140d0:	adc	r3, r3, #0
   140d4:	mov	r0, #1
   140d8:	str	r3, [r1, #12]
   140dc:	bx	lr
   140e0:	push	{r4, r5, r6, r7, fp, lr}
   140e4:	add	fp, sp, #16
   140e8:	movw	r6, #45696	; 0xb280
   140ec:	mov	r4, r0
   140f0:	movw	r0, #45688	; 0xb278
   140f4:	movt	r6, #3
   140f8:	movt	r0, #3
   140fc:	ldr	r7, [r6]
   14100:	ldr	r5, [r0]
   14104:	cmp	r5, r7
   14108:	beq	1414c <__assert_fail@plt+0x24b0>
   1410c:	ldr	r2, [r5]
   14110:	ldr	r1, [r5, #4]
   14114:	mov	r0, r4
   14118:	blx	r2
   1411c:	ldr	r5, [r5, #8]
   14120:	mov	r1, r0
   14124:	cmp	r5, r7
   14128:	andsne	r0, r1, #3
   1412c:	bne	1410c <__assert_fail@plt+0x2470>
   14130:	mov	r0, #4
   14134:	cmp	r1, #1
   14138:	beq	1417c <__assert_fail@plt+0x24e0>
   1413c:	tst	r1, #12
   14140:	mov	r0, r1
   14144:	popne	{r4, r5, r6, r7, fp, pc}
   14148:	ldr	r5, [r6]
   1414c:	cmp	r5, #0
   14150:	beq	14180 <__assert_fail@plt+0x24e4>
   14154:	ldr	r2, [r5]
   14158:	ldr	r1, [r5, #4]
   1415c:	mov	r0, r4
   14160:	blx	r2
   14164:	ldr	r5, [r5, #8]
   14168:	cmp	r5, #0
   1416c:	andsne	r1, r0, #1
   14170:	bne	14154 <__assert_fail@plt+0x24b8>
   14174:	cmp	r0, #1
   14178:	moveq	r0, #2
   1417c:	pop	{r4, r5, r6, r7, fp, pc}
   14180:	mov	r0, #2
   14184:	pop	{r4, r5, r6, r7, fp, pc}
   14188:	push	{r4, r5, r6, r7, fp, lr}
   1418c:	add	fp, sp, #16
   14190:	movw	r5, #45696	; 0xb280
   14194:	mov	r4, r0
   14198:	movw	r0, #45688	; 0xb278
   1419c:	movt	r5, #3
   141a0:	movt	r0, #3
   141a4:	ldr	r6, [r5]
   141a8:	ldr	r7, [r0]
   141ac:	cmp	r7, r6
   141b0:	beq	14228 <__assert_fail@plt+0x258c>
   141b4:	ldr	r2, [r7]
   141b8:	ldr	r1, [r7, #4]
   141bc:	mov	r0, r4
   141c0:	blx	r2
   141c4:	ldr	r7, [r7, #8]
   141c8:	mov	r1, r0
   141cc:	cmp	r7, r6
   141d0:	andsne	r0, r1, #5
   141d4:	bne	141b4 <__assert_fail@plt+0x2518>
   141d8:	mov	r0, #4
   141dc:	cmp	r1, #1
   141e0:	beq	14224 <__assert_fail@plt+0x2588>
   141e4:	tst	r1, #12
   141e8:	mov	r0, r1
   141ec:	popne	{r4, r5, r6, r7, fp, pc}
   141f0:	ldr	r5, [r5]
   141f4:	cmp	r5, #0
   141f8:	beq	14230 <__assert_fail@plt+0x2594>
   141fc:	ldr	r2, [r5]
   14200:	ldr	r1, [r5, #4]
   14204:	mov	r0, r4
   14208:	blx	r2
   1420c:	ldr	r5, [r5, #8]
   14210:	cmp	r5, #0
   14214:	andsne	r1, r0, #1
   14218:	bne	141fc <__assert_fail@plt+0x2560>
   1421c:	cmp	r0, #1
   14220:	moveq	r0, #2
   14224:	pop	{r4, r5, r6, r7, fp, pc}
   14228:	mov	r0, #5
   1422c:	pop	{r4, r5, r6, r7, fp, pc}
   14230:	mov	r0, #2
   14234:	pop	{r4, r5, r6, r7, fp, pc}
   14238:	push	{r4, r5, fp, lr}
   1423c:	add	fp, sp, #8
   14240:	mov	r4, r0
   14244:	movw	r0, #45688	; 0xb278
   14248:	movt	r0, #3
   1424c:	ldr	r5, [r0]
   14250:	cmp	r5, #0
   14254:	beq	1427c <__assert_fail@plt+0x25e0>
   14258:	ldr	r2, [r5]
   1425c:	ldr	r1, [r5, #4]
   14260:	mov	r0, r4
   14264:	blx	r2
   14268:	ldr	r5, [r5, #8]
   1426c:	cmp	r5, #0
   14270:	andsne	r1, r0, #3
   14274:	bne	14258 <__assert_fail@plt+0x25bc>
   14278:	pop	{r4, r5, fp, pc}
   1427c:	mov	r0, #3
   14280:	pop	{r4, r5, fp, pc}
   14284:	push	{fp, lr}
   14288:	mov	fp, sp
   1428c:	movw	r1, #38369	; 0x95e1
   14290:	mov	r4, r0
   14294:	mov	r0, #0
   14298:	mov	r2, #5
   1429c:	movt	r1, #2
   142a0:	bl	11924 <dcgettext@plt>
   142a4:	ldr	r3, [r4, #28]
   142a8:	mov	r2, r0
   142ac:	mov	r0, #1
   142b0:	mov	r1, #0
   142b4:	bl	119c0 <error@plt>
   142b8:	push	{r4, r5, r6, r7, fp, lr}
   142bc:	add	fp, sp, #16
   142c0:	sub	sp, sp, #8
   142c4:	mov	r4, r3
   142c8:	mov	r6, r2
   142cc:	mov	r5, r1
   142d0:	mov	r7, r0
   142d4:	bl	11bdc <clearerr@plt>
   142d8:	add	r0, sp, #4
   142dc:	mov	r1, #4
   142e0:	mov	r2, #1
   142e4:	mov	r3, r7
   142e8:	bl	1199c <fread@plt>
   142ec:	cmp	r0, #1
   142f0:	bne	14380 <__assert_fail@plt+0x26e4>
   142f4:	ldr	r1, [r4]
   142f8:	ldr	r0, [sp, #4]
   142fc:	rev	r7, r0
   14300:	cmp	r1, #2
   14304:	beq	14364 <__assert_fail@plt+0x26c8>
   14308:	cmp	r1, #0
   1430c:	bne	14378 <__assert_fail@plt+0x26dc>
   14310:	cmp	r0, r6
   14314:	ble	1436c <__assert_fail@plt+0x26d0>
   14318:	cmp	r7, r6
   1431c:	bgt	14378 <__assert_fail@plt+0x26dc>
   14320:	movw	r1, #39805	; 0x9b7d
   14324:	mov	r0, #0
   14328:	mov	r2, #5
   1432c:	movt	r1, #2
   14330:	bl	11924 <dcgettext@plt>
   14334:	mov	r6, r0
   14338:	mov	r0, #0
   1433c:	mov	r1, #8
   14340:	mov	r2, r5
   14344:	bl	18870 <__assert_fail@plt+0x6bd4>
   14348:	mov	r3, r0
   1434c:	mov	r0, #0
   14350:	mov	r1, #0
   14354:	mov	r2, r6
   14358:	bl	119c0 <error@plt>
   1435c:	mov	r0, #2
   14360:	str	r0, [r4]
   14364:	mov	r0, r7
   14368:	b	14378 <__assert_fail@plt+0x26dc>
   1436c:	cmp	r7, r6
   14370:	movgt	r1, #1
   14374:	strgt	r1, [r4]
   14378:	sub	sp, fp, #16
   1437c:	pop	{r4, r5, r6, r7, fp, pc}
   14380:	mov	r0, #0
   14384:	mov	r1, #8
   14388:	mov	r2, r5
   1438c:	bl	18870 <__assert_fail@plt+0x6bd4>
   14390:	mov	r4, r0
   14394:	mov	r0, r7
   14398:	bl	11a74 <feof@plt>
   1439c:	cmp	r0, #0
   143a0:	bne	143d0 <__assert_fail@plt+0x2734>
   143a4:	bl	11ac8 <__errno_location@plt>
   143a8:	movw	r1, #39776	; 0x9b60
   143ac:	ldr	r5, [r0]
   143b0:	mov	r0, #0
   143b4:	mov	r2, #5
   143b8:	movt	r1, #2
   143bc:	bl	11924 <dcgettext@plt>
   143c0:	mov	r2, r0
   143c4:	mov	r0, #1
   143c8:	mov	r1, r5
   143cc:	b	143f0 <__assert_fail@plt+0x2754>
   143d0:	movw	r1, #39755	; 0x9b4b
   143d4:	mov	r0, #0
   143d8:	mov	r2, #5
   143dc:	movt	r1, #2
   143e0:	bl	11924 <dcgettext@plt>
   143e4:	mov	r2, r0
   143e8:	mov	r0, #1
   143ec:	mov	r1, #0
   143f0:	mov	r3, r4
   143f4:	bl	119c0 <error@plt>
   143f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   143fc:	add	fp, sp, #24
   14400:	sub	sp, sp, #16
   14404:	mov	r8, r0
   14408:	movw	r0, #45584	; 0xb210
   1440c:	movt	r0, #3
   14410:	ldr	r0, [r0]
   14414:	bl	1a0d0 <__assert_fail@plt+0x8434>
   14418:	movw	r0, #45588	; 0xb214
   1441c:	movw	r1, #39899	; 0x9bdb
   14420:	mov	r2, #5
   14424:	mov	r9, #0
   14428:	movt	r0, #3
   1442c:	movt	r1, #2
   14430:	ldr	r6, [r0]
   14434:	movw	r0, #45484	; 0xb1ac
   14438:	movt	r0, #3
   1443c:	ldr	r5, [r0]
   14440:	mov	r0, #0
   14444:	bl	11924 <dcgettext@plt>
   14448:	movw	r1, #39914	; 0x9bea
   1444c:	mov	r7, r0
   14450:	mov	r0, #0
   14454:	mov	r2, #5
   14458:	movt	r1, #2
   1445c:	bl	11924 <dcgettext@plt>
   14460:	movw	r1, #39929	; 0x9bf9
   14464:	mov	r4, r0
   14468:	mov	r0, #0
   1446c:	mov	r2, #5
   14470:	movt	r1, #2
   14474:	bl	11924 <dcgettext@plt>
   14478:	movw	r2, #39885	; 0x9bcd
   1447c:	str	r0, [sp, #8]
   14480:	mov	r0, r6
   14484:	mov	r1, r8
   14488:	mov	r3, r5
   1448c:	str	r7, [sp]
   14490:	str	r4, [sp, #4]
   14494:	str	r9, [sp, #12]
   14498:	movt	r2, #2
   1449c:	bl	191c4 <__assert_fail@plt+0x7528>
   144a0:	sub	sp, fp, #24
   144a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   144a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144ac:	add	fp, sp, #28
   144b0:	sub	sp, sp, #12
   144b4:	sub	sp, sp, #8192	; 0x2000
   144b8:	ldr	r7, [fp, #8]
   144bc:	mov	r9, r3
   144c0:	mov	sl, r0
   144c4:	cmp	r2, #0
   144c8:	beq	14568 <__assert_fail@plt+0x28cc>
   144cc:	add	r4, sp, #8
   144d0:	mov	r8, r1
   144d4:	str	r1, [sp]
   144d8:	mov	r1, #8192	; 0x2000
   144dc:	mov	r2, r7
   144e0:	mvn	r3, #0
   144e4:	mov	r0, r4
   144e8:	bl	17420 <__assert_fail@plt+0x5784>
   144ec:	mov	r5, r0
   144f0:	cmp	r0, #8192	; 0x2000
   144f4:	mov	r6, r4
   144f8:	bcc	14524 <__assert_fail@plt+0x2888>
   144fc:	add	r4, r5, #1
   14500:	mov	r0, r4
   14504:	bl	192b4 <__assert_fail@plt+0x7618>
   14508:	mov	r1, r4
   1450c:	mov	r2, r7
   14510:	mvn	r3, #0
   14514:	mov	r6, r0
   14518:	str	r8, [sp]
   1451c:	add	r4, sp, #8
   14520:	bl	17420 <__assert_fail@plt+0x5784>
   14524:	mov	r0, r6
   14528:	mov	r1, r5
   1452c:	bl	14580 <__assert_fail@plt+0x28e4>
   14530:	mov	r1, #0
   14534:	mov	r2, r6
   14538:	strb	r1, [r6, r0]
   1453c:	mov	r0, sl
   14540:	mov	r1, r9
   14544:	bl	11ab0 <fprintf@plt>
   14548:	mov	r5, r0
   1454c:	cmp	r6, r4
   14550:	beq	1455c <__assert_fail@plt+0x28c0>
   14554:	mov	r0, r6
   14558:	bl	1a12c <__assert_fail@plt+0x8490>
   1455c:	mov	r0, r5
   14560:	sub	sp, fp, #28
   14564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14568:	mov	r0, sl
   1456c:	mov	r1, r9
   14570:	mov	r2, r7
   14574:	sub	sp, fp, #28
   14578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1457c:	b	11ab0 <fprintf@plt>
   14580:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14584:	add	fp, sp, #28
   14588:	sub	sp, sp, #20
   1458c:	mov	r5, r1
   14590:	mov	r6, r0
   14594:	add	sl, r0, r1
   14598:	bl	11990 <__ctype_get_mb_cur_max@plt>
   1459c:	cmp	r0, #2
   145a0:	bcs	145dc <__assert_fail@plt+0x2940>
   145a4:	cmp	r5, #1
   145a8:	blt	14848 <__assert_fail@plt+0x2bac>
   145ac:	bl	11a5c <__ctype_b_loc@plt>
   145b0:	mov	r1, #63	; 0x3f
   145b4:	ldrb	r2, [r6]
   145b8:	ldr	r3, [r0]
   145bc:	add	r2, r3, r2, lsl #1
   145c0:	ldrb	r2, [r2, #1]
   145c4:	tst	r2, #64	; 0x40
   145c8:	strbeq	r1, [r6]
   145cc:	add	r6, r6, #1
   145d0:	cmp	r6, sl
   145d4:	bcc	145b4 <__assert_fail@plt+0x2918>
   145d8:	b	14848 <__assert_fail@plt+0x2bac>
   145dc:	cmp	r5, #1
   145e0:	mov	r4, r6
   145e4:	blt	14844 <__assert_fail@plt+0x2ba8>
   145e8:	mov	r3, #0
   145ec:	add	r8, sp, #4
   145f0:	add	r9, sp, #8
   145f4:	mov	r4, r6
   145f8:	mov	r7, r6
   145fc:	ldrb	r0, [r7]
   14600:	sub	r1, r0, #32
   14604:	cmp	r1, #94	; 0x5e
   14608:	bhi	147a4 <__assert_fail@plt+0x2b08>
   1460c:	add	r2, pc, #0
   14610:	ldr	pc, [r2, r1, lsl #2]
   14614:	muleq	r1, r0, r7
   14618:	muleq	r1, r0, r7
   1461c:	muleq	r1, r0, r7
   14620:	muleq	r1, r0, r7
   14624:	andeq	r4, r1, r4, lsr #15
   14628:	muleq	r1, r0, r7
   1462c:	muleq	r1, r0, r7
   14630:	muleq	r1, r0, r7
   14634:	muleq	r1, r0, r7
   14638:	muleq	r1, r0, r7
   1463c:	muleq	r1, r0, r7
   14640:	muleq	r1, r0, r7
   14644:	muleq	r1, r0, r7
   14648:	muleq	r1, r0, r7
   1464c:	muleq	r1, r0, r7
   14650:	muleq	r1, r0, r7
   14654:	muleq	r1, r0, r7
   14658:	muleq	r1, r0, r7
   1465c:	muleq	r1, r0, r7
   14660:	muleq	r1, r0, r7
   14664:	muleq	r1, r0, r7
   14668:	muleq	r1, r0, r7
   1466c:	muleq	r1, r0, r7
   14670:	muleq	r1, r0, r7
   14674:	muleq	r1, r0, r7
   14678:	muleq	r1, r0, r7
   1467c:	muleq	r1, r0, r7
   14680:	muleq	r1, r0, r7
   14684:	muleq	r1, r0, r7
   14688:	muleq	r1, r0, r7
   1468c:	muleq	r1, r0, r7
   14690:	muleq	r1, r0, r7
   14694:	andeq	r4, r1, r4, lsr #15
   14698:	muleq	r1, r0, r7
   1469c:	muleq	r1, r0, r7
   146a0:	muleq	r1, r0, r7
   146a4:	muleq	r1, r0, r7
   146a8:	muleq	r1, r0, r7
   146ac:	muleq	r1, r0, r7
   146b0:	muleq	r1, r0, r7
   146b4:	muleq	r1, r0, r7
   146b8:	muleq	r1, r0, r7
   146bc:	muleq	r1, r0, r7
   146c0:	muleq	r1, r0, r7
   146c4:	muleq	r1, r0, r7
   146c8:	muleq	r1, r0, r7
   146cc:	muleq	r1, r0, r7
   146d0:	muleq	r1, r0, r7
   146d4:	muleq	r1, r0, r7
   146d8:	muleq	r1, r0, r7
   146dc:	muleq	r1, r0, r7
   146e0:	muleq	r1, r0, r7
   146e4:	muleq	r1, r0, r7
   146e8:	muleq	r1, r0, r7
   146ec:	muleq	r1, r0, r7
   146f0:	muleq	r1, r0, r7
   146f4:	muleq	r1, r0, r7
   146f8:	muleq	r1, r0, r7
   146fc:	muleq	r1, r0, r7
   14700:	muleq	r1, r0, r7
   14704:	muleq	r1, r0, r7
   14708:	muleq	r1, r0, r7
   1470c:	muleq	r1, r0, r7
   14710:	muleq	r1, r0, r7
   14714:	andeq	r4, r1, r4, lsr #15
   14718:	muleq	r1, r0, r7
   1471c:	muleq	r1, r0, r7
   14720:	muleq	r1, r0, r7
   14724:	muleq	r1, r0, r7
   14728:	muleq	r1, r0, r7
   1472c:	muleq	r1, r0, r7
   14730:	muleq	r1, r0, r7
   14734:	muleq	r1, r0, r7
   14738:	muleq	r1, r0, r7
   1473c:	muleq	r1, r0, r7
   14740:	muleq	r1, r0, r7
   14744:	muleq	r1, r0, r7
   14748:	muleq	r1, r0, r7
   1474c:	muleq	r1, r0, r7
   14750:	muleq	r1, r0, r7
   14754:	muleq	r1, r0, r7
   14758:	muleq	r1, r0, r7
   1475c:	muleq	r1, r0, r7
   14760:	muleq	r1, r0, r7
   14764:	muleq	r1, r0, r7
   14768:	muleq	r1, r0, r7
   1476c:	muleq	r1, r0, r7
   14770:	muleq	r1, r0, r7
   14774:	muleq	r1, r0, r7
   14778:	muleq	r1, r0, r7
   1477c:	muleq	r1, r0, r7
   14780:	muleq	r1, r0, r7
   14784:	muleq	r1, r0, r7
   14788:	muleq	r1, r0, r7
   1478c:	muleq	r1, r0, r7
   14790:	strb	r0, [r4], #1
   14794:	add	r7, r7, #1
   14798:	cmp	r7, sl
   1479c:	bcc	145fc <__assert_fail@plt+0x2960>
   147a0:	b	14844 <__assert_fail@plt+0x2ba8>
   147a4:	str	r3, [sp, #12]
   147a8:	str	r3, [sp, #8]
   147ac:	sub	r2, sl, r7
   147b0:	mov	r0, r8
   147b4:	mov	r1, r7
   147b8:	mov	r3, r9
   147bc:	bl	1a228 <__assert_fail@plt+0x858c>
   147c0:	cmp	r0, #0
   147c4:	beq	147e0 <__assert_fail@plt+0x2b44>
   147c8:	mov	r5, r0
   147cc:	cmn	r0, #2
   147d0:	beq	14828 <__assert_fail@plt+0x2b8c>
   147d4:	cmn	r5, #1
   147d8:	bne	147e4 <__assert_fail@plt+0x2b48>
   147dc:	b	14830 <__assert_fail@plt+0x2b94>
   147e0:	mov	r5, #1
   147e4:	ldr	r0, [sp, #4]
   147e8:	bl	1187c <wcwidth@plt>
   147ec:	cmp	r0, #0
   147f0:	bmi	14808 <__assert_fail@plt+0x2b6c>
   147f4:	ldrb	r0, [r7], #1
   147f8:	subs	r5, r5, #1
   147fc:	strb	r0, [r4], #1
   14800:	bne	147f4 <__assert_fail@plt+0x2b58>
   14804:	b	14814 <__assert_fail@plt+0x2b78>
   14808:	mov	r0, #63	; 0x3f
   1480c:	add	r7, r7, r5
   14810:	strb	r0, [r4], #1
   14814:	mov	r0, r9
   14818:	bl	1190c <mbsinit@plt>
   1481c:	cmp	r0, #0
   14820:	beq	147ac <__assert_fail@plt+0x2b10>
   14824:	b	1483c <__assert_fail@plt+0x2ba0>
   14828:	mov	r7, sl
   1482c:	b	14834 <__assert_fail@plt+0x2b98>
   14830:	add	r7, r7, #1
   14834:	mov	r0, #63	; 0x3f
   14838:	strb	r0, [r4], #1
   1483c:	mov	r3, #0
   14840:	b	14798 <__assert_fail@plt+0x2afc>
   14844:	sub	r5, r4, r6
   14848:	mov	r0, r5
   1484c:	sub	sp, fp, #28
   14850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14854:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14858:	add	fp, sp, #28
   1485c:	sub	sp, sp, #12
   14860:	movw	sl, #39944	; 0x9c08
   14864:	mov	r7, r0
   14868:	mov	r4, #0
   1486c:	mov	r6, #0
   14870:	movt	sl, #2
   14874:	ldr	r5, [sl, r4]
   14878:	mov	r1, r7
   1487c:	mov	r0, r5
   14880:	bl	1184c <strcmp@plt>
   14884:	cmp	r0, #0
   14888:	beq	14948 <__assert_fail@plt+0x2cac>
   1488c:	mov	r0, r5
   14890:	bl	18c50 <__assert_fail@plt+0x6fb4>
   14894:	bl	11a98 <strlen@plt>
   14898:	add	r0, r6, r0
   1489c:	add	r4, r4, #12
   148a0:	add	r6, r0, #2
   148a4:	cmp	r4, #156	; 0x9c
   148a8:	bne	14874 <__assert_fail@plt+0x2bd8>
   148ac:	add	r0, r6, #1
   148b0:	str	r7, [sp, #8]
   148b4:	bl	192b4 <__assert_fail@plt+0x7618>
   148b8:	mov	r6, r0
   148bc:	mov	r4, #0
   148c0:	movw	r8, #8236	; 0x202c
   148c4:	mov	r9, #0
   148c8:	str	r0, [sp, #4]
   148cc:	ldr	r0, [sl, -r9]
   148d0:	cmp	r9, #0
   148d4:	strhne	r8, [r6]
   148d8:	strbne	r4, [r6, #2]!
   148dc:	bl	18c50 <__assert_fail@plt+0x6fb4>
   148e0:	mov	r7, r0
   148e4:	bl	11a98 <strlen@plt>
   148e8:	mov	r5, r0
   148ec:	add	r2, r0, #1
   148f0:	mov	r0, r6
   148f4:	mov	r1, r7
   148f8:	bl	118dc <memcpy@plt>
   148fc:	sub	r9, r9, #12
   14900:	add	r6, r6, r5
   14904:	cmn	r9, #156	; 0x9c
   14908:	bne	148cc <__assert_fail@plt+0x2c30>
   1490c:	movw	r1, #40103	; 0x9ca7
   14910:	mov	r0, #0
   14914:	mov	r2, #5
   14918:	movt	r1, #2
   1491c:	bl	11924 <dcgettext@plt>
   14920:	mov	r5, r0
   14924:	ldr	r0, [sp, #8]
   14928:	bl	18c50 <__assert_fail@plt+0x6fb4>
   1492c:	mov	r3, r0
   14930:	ldr	r0, [sp, #4]
   14934:	mov	r1, #0
   14938:	mov	r2, r5
   1493c:	str	r0, [sp]
   14940:	mov	r0, #1
   14944:	bl	119c0 <error@plt>
   14948:	add	r0, sl, r4
   1494c:	ldr	r0, [r0, #8]
   14950:	sub	sp, fp, #28
   14954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14958:	mov	r1, r0
   1495c:	mov	r0, #0
   14960:	cmp	r1, #12
   14964:	bxhi	lr
   14968:	add	r0, r1, r1, lsl #1
   1496c:	movw	r1, #39944	; 0x9c08
   14970:	movt	r1, #2
   14974:	ldr	r0, [r1, r0, lsl #2]
   14978:	bx	lr
   1497c:	mov	r1, r0
   14980:	mvn	r0, #0
   14984:	cmp	r1, #12
   14988:	bxhi	lr
   1498c:	add	r0, r1, r1, lsl #1
   14990:	movw	r1, #39944	; 0x9c08
   14994:	movt	r1, #2
   14998:	add	r0, r1, r0, lsl #2
   1499c:	ldr	r0, [r0, #8]
   149a0:	bx	lr
   149a4:	mov	r1, r0
   149a8:	mov	r0, #0
   149ac:	cmp	r1, #12
   149b0:	bxhi	lr
   149b4:	add	r0, r1, r1, lsl #1
   149b8:	movw	r1, #39944	; 0x9c08
   149bc:	movt	r1, #2
   149c0:	add	r0, r1, r0, lsl #2
   149c4:	ldr	r0, [r0, #4]
   149c8:	bx	lr
   149cc:	push	{r4, sl, fp, lr}
   149d0:	add	fp, sp, #8
   149d4:	mov	lr, r0
   149d8:	mvn	r0, #0
   149dc:	cmp	lr, #12
   149e0:	pophi	{r4, sl, fp, pc}
   149e4:	cmp	lr, #0
   149e8:	beq	14a30 <__assert_fail@plt+0x2d94>
   149ec:	movw	r3, #39944	; 0x9c08
   149f0:	add	r2, lr, lr, lsl #1
   149f4:	movt	r3, #2
   149f8:	add	r2, r3, r2, lsl #2
   149fc:	ldr	ip, [r2, #8]
   14a00:	add	r2, r3, #4
   14a04:	mov	r3, #0
   14a08:	ldr	r4, [r2]
   14a0c:	tst	r4, r1
   14a10:	beq	14a20 <__assert_fail@plt+0x2d84>
   14a14:	ldr	r4, [r2, #4]
   14a18:	cmp	ip, r4
   14a1c:	beq	14a34 <__assert_fail@plt+0x2d98>
   14a20:	add	r3, r3, #1
   14a24:	add	r2, r2, #12
   14a28:	cmp	lr, r3
   14a2c:	bne	14a08 <__assert_fail@plt+0x2d6c>
   14a30:	pop	{r4, sl, fp, pc}
   14a34:	mov	r0, r3
   14a38:	pop	{r4, sl, fp, pc}
   14a3c:	push	{r4, r5, fp, lr}
   14a40:	add	fp, sp, #8
   14a44:	ldr	r5, [fp, #8]
   14a48:	cmp	r2, #0
   14a4c:	beq	14a64 <__assert_fail@plt+0x2dc8>
   14a50:	mov	r2, #0
   14a54:	str	r2, [r3]
   14a58:	str	r2, [r5]
   14a5c:	ldr	r2, [r3]
   14a60:	b	14a88 <__assert_fail@plt+0x2dec>
   14a64:	ldr	r2, [r5]
   14a68:	ldr	r4, [r3]
   14a6c:	add	r2, r4, r2
   14a70:	str	r2, [r3]
   14a74:	ldrb	r4, [r0, r2]
   14a78:	cmp	r4, #0
   14a7c:	beq	14ac4 <__assert_fail@plt+0x2e28>
   14a80:	add	r2, r2, #1
   14a84:	str	r2, [r3]
   14a88:	add	r4, r0, r2
   14a8c:	ldrb	r0, [r1]
   14a90:	cmp	r0, #0
   14a94:	beq	14ab0 <__assert_fail@plt+0x2e14>
   14a98:	mov	r0, r4
   14a9c:	bl	11c00 <strpbrk@plt>
   14aa0:	cmp	r0, #0
   14aa4:	beq	14ab0 <__assert_fail@plt+0x2e14>
   14aa8:	sub	r0, r0, r4
   14aac:	b	14ab8 <__assert_fail@plt+0x2e1c>
   14ab0:	mov	r0, r4
   14ab4:	bl	11a98 <strlen@plt>
   14ab8:	str	r0, [r5]
   14abc:	mov	r0, #1
   14ac0:	pop	{r4, r5, fp, pc}
   14ac4:	mov	r0, #0
   14ac8:	pop	{r4, r5, fp, pc}
   14acc:	push	{r4, r5, fp, lr}
   14ad0:	add	fp, sp, #8
   14ad4:	sub	sp, sp, #16
   14ad8:	mov	r4, r1
   14adc:	movw	r1, #40264	; 0x9d48
   14ae0:	mov	r5, r0
   14ae4:	mov	r0, #0
   14ae8:	mov	r2, #5
   14aec:	movt	r1, #2
   14af0:	bl	11924 <dcgettext@plt>
   14af4:	movw	r2, #40509	; 0x9e3d
   14af8:	movw	r3, #39885	; 0x9bcd
   14afc:	mov	r1, r0
   14b00:	movw	r0, #40556	; 0x9e6c
   14b04:	movt	r2, #2
   14b08:	movt	r0, #2
   14b0c:	movt	r3, #2
   14b10:	str	r2, [sp, #4]
   14b14:	movw	r2, #40470	; 0x9e16
   14b18:	str	r3, [sp]
   14b1c:	str	r0, [sp, #8]
   14b20:	mov	r0, r5
   14b24:	mov	r3, r4
   14b28:	movt	r2, #2
   14b2c:	bl	11ab0 <fprintf@plt>
   14b30:	sub	sp, fp, #8
   14b34:	pop	{r4, r5, fp, pc}
   14b38:	sub	r0, r0, #1
   14b3c:	ldrb	r3, [r0, #1]!
   14b40:	cmp	r3, #47	; 0x2f
   14b44:	beq	14b3c <__assert_fail@plt+0x2ea0>
   14b48:	mov	r2, #0
   14b4c:	mov	r1, r0
   14b50:	uxtb	r3, r3
   14b54:	cmp	r3, #47	; 0x2f
   14b58:	beq	14b74 <__assert_fail@plt+0x2ed8>
   14b5c:	cmp	r3, #0
   14b60:	bxeq	lr
   14b64:	tst	r2, #1
   14b68:	mov	r2, #0
   14b6c:	movne	r0, r1
   14b70:	b	14b78 <__assert_fail@plt+0x2edc>
   14b74:	mov	r2, #1
   14b78:	ldrb	r3, [r1, #1]!
   14b7c:	b	14b50 <__assert_fail@plt+0x2eb4>
   14b80:	push	{r4, sl, fp, lr}
   14b84:	add	fp, sp, #8
   14b88:	mov	r4, r0
   14b8c:	bl	11a98 <strlen@plt>
   14b90:	mov	r1, r0
   14b94:	sub	r2, r4, #1
   14b98:	mov	r0, r1
   14b9c:	cmp	r1, #2
   14ba0:	bcc	14bb4 <__assert_fail@plt+0x2f18>
   14ba4:	ldrb	r3, [r2, r0]
   14ba8:	sub	r1, r0, #1
   14bac:	cmp	r3, #47	; 0x2f
   14bb0:	beq	14b98 <__assert_fail@plt+0x2efc>
   14bb4:	pop	{r4, sl, fp, pc}
   14bb8:	movw	r1, #45708	; 0xb28c
   14bbc:	movt	r1, #3
   14bc0:	str	r0, [r1]
   14bc4:	bx	lr
   14bc8:	movw	r1, #45712	; 0xb290
   14bcc:	movt	r1, #3
   14bd0:	strb	r0, [r1]
   14bd4:	bx	lr
   14bd8:	push	{r4, r5, r6, sl, fp, lr}
   14bdc:	add	fp, sp, #16
   14be0:	sub	sp, sp, #8
   14be4:	movw	r0, #45588	; 0xb214
   14be8:	movt	r0, #3
   14bec:	ldr	r0, [r0]
   14bf0:	bl	28324 <__assert_fail@plt+0x16688>
   14bf4:	cmp	r0, #0
   14bf8:	beq	14c20 <__assert_fail@plt+0x2f84>
   14bfc:	movw	r0, #45712	; 0xb290
   14c00:	movt	r0, #3
   14c04:	ldrb	r0, [r0]
   14c08:	cmp	r0, #0
   14c0c:	beq	14c40 <__assert_fail@plt+0x2fa4>
   14c10:	bl	11ac8 <__errno_location@plt>
   14c14:	ldr	r0, [r0]
   14c18:	cmp	r0, #32
   14c1c:	bne	14c40 <__assert_fail@plt+0x2fa4>
   14c20:	movw	r0, #45584	; 0xb210
   14c24:	movt	r0, #3
   14c28:	ldr	r0, [r0]
   14c2c:	bl	28324 <__assert_fail@plt+0x16688>
   14c30:	cmp	r0, #0
   14c34:	subeq	sp, fp, #16
   14c38:	popeq	{r4, r5, r6, sl, fp, pc}
   14c3c:	b	14cb0 <__assert_fail@plt+0x3014>
   14c40:	movw	r1, #40578	; 0x9e82
   14c44:	mov	r0, #0
   14c48:	mov	r2, #5
   14c4c:	movt	r1, #2
   14c50:	bl	11924 <dcgettext@plt>
   14c54:	mov	r4, r0
   14c58:	movw	r0, #45708	; 0xb28c
   14c5c:	movt	r0, #3
   14c60:	ldr	r6, [r0]
   14c64:	bl	11ac8 <__errno_location@plt>
   14c68:	ldr	r5, [r0]
   14c6c:	cmp	r6, #0
   14c70:	bne	14c8c <__assert_fail@plt+0x2ff0>
   14c74:	movw	r2, #42764	; 0xa70c
   14c78:	mov	r0, #0
   14c7c:	mov	r1, r5
   14c80:	mov	r3, r4
   14c84:	movt	r2, #2
   14c88:	b	14cac <__assert_fail@plt+0x3010>
   14c8c:	mov	r0, r6
   14c90:	bl	18a10 <__assert_fail@plt+0x6d74>
   14c94:	movw	r2, #40590	; 0x9e8e
   14c98:	mov	r3, r0
   14c9c:	str	r4, [sp]
   14ca0:	mov	r0, #0
   14ca4:	mov	r1, r5
   14ca8:	movt	r2, #2
   14cac:	bl	119c0 <error@plt>
   14cb0:	movw	r0, #45488	; 0xb1b0
   14cb4:	movt	r0, #3
   14cb8:	ldr	r0, [r0]
   14cbc:	bl	118d0 <_exit@plt>
   14cc0:	sub	sp, sp, #8
   14cc4:	push	{fp, lr}
   14cc8:	mov	fp, sp
   14ccc:	sub	sp, sp, #8
   14cd0:	str	r2, [fp, #8]
   14cd4:	str	r3, [fp, #12]
   14cd8:	tst	r1, #64	; 0x40
   14cdc:	mov	r2, #0
   14ce0:	ldrne	r2, [fp, #8]
   14ce4:	bl	119d8 <open64@plt>
   14ce8:	bl	18dcc <__assert_fail@plt+0x7130>
   14cec:	mov	sp, fp
   14cf0:	pop	{fp, lr}
   14cf4:	add	sp, sp, #8
   14cf8:	bx	lr
   14cfc:	andeq	r0, r0, r0
   14d00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d04:	add	fp, sp, #28
   14d08:	sub	sp, sp, #4
   14d0c:	vpush	{d8-d9}
   14d10:	sub	sp, sp, #96	; 0x60
   14d14:	mov	r7, r3
   14d18:	mov	r6, r2
   14d1c:	mov	r9, r1
   14d20:	str	r0, [sp, #36]	; 0x24
   14d24:	bl	11bd0 <localeconv@plt>
   14d28:	ldr	r5, [r0]
   14d2c:	mov	r4, r0
   14d30:	mov	r0, r5
   14d34:	bl	11a98 <strlen@plt>
   14d38:	sub	r1, r0, #1
   14d3c:	movw	r2, #36541	; 0x8ebd
   14d40:	cmp	r1, #16
   14d44:	movt	r2, #2
   14d48:	movcc	r2, r5
   14d4c:	ldr	r5, [r4, #4]
   14d50:	ldr	r4, [r4, #8]
   14d54:	movcs	r0, #1
   14d58:	str	r0, [sp, #8]
   14d5c:	str	r2, [sp, #4]
   14d60:	mov	r0, r5
   14d64:	bl	11a98 <strlen@plt>
   14d68:	movw	r3, #39327	; 0x999f
   14d6c:	cmp	r0, #17
   14d70:	movw	r0, #647	; 0x287
   14d74:	ldr	r2, [fp, #16]
   14d78:	ldr	sl, [fp, #8]
   14d7c:	ldr	r8, [fp, #12]
   14d80:	str	r6, [sp, #20]
   14d84:	str	r7, [sp, #28]
   14d88:	str	r4, [sp, #12]
   14d8c:	movt	r3, #2
   14d90:	movcc	r3, r5
   14d94:	add	r1, r6, r0
   14d98:	ands	r0, r7, #32
   14d9c:	ldr	r5, [fp, #20]
   14da0:	str	r0, [sp, #16]
   14da4:	mov	r0, #1000	; 0x3e8
   14da8:	movwne	r0, #1024	; 0x400
   14dac:	str	r1, [sp, #24]
   14db0:	str	r3, [sp, #44]	; 0x2c
   14db4:	str	r0, [sp, #32]
   14db8:	and	r0, r7, #3
   14dbc:	str	r0, [sp, #40]	; 0x28
   14dc0:	subs	r0, sl, r2
   14dc4:	sbcs	r0, r8, r5
   14dc8:	bcs	14ebc <__assert_fail@plt+0x3220>
   14dcc:	orrs	r0, sl, r8
   14dd0:	mov	r4, r9
   14dd4:	beq	14fa4 <__assert_fail@plt+0x3308>
   14dd8:	ldr	r5, [fp, #20]
   14ddc:	mov	r0, r2
   14de0:	mov	r2, sl
   14de4:	mov	r3, r8
   14de8:	mov	r1, r5
   14dec:	bl	28aa8 <__assert_fail@plt+0x16e0c>
   14df0:	mov	r6, r0
   14df4:	mov	r3, r1
   14df8:	umull	r0, r1, r0, sl
   14dfc:	ldr	r2, [fp, #16]
   14e00:	mla	r1, r6, r8, r1
   14e04:	mla	r1, r3, sl, r1
   14e08:	subs	r0, r2, r0
   14e0c:	sbc	r1, r5, r1
   14e10:	orrs	r0, r0, r1
   14e14:	bne	14fa4 <__assert_fail@plt+0x3308>
   14e18:	ldr	r5, [sp, #36]	; 0x24
   14e1c:	mov	r1, r4
   14e20:	mov	r2, r6
   14e24:	mov	r8, r3
   14e28:	mov	r0, r5
   14e2c:	bl	28aa8 <__assert_fail@plt+0x16e0c>
   14e30:	mov	r7, r0
   14e34:	mov	r9, r1
   14e38:	umull	r0, r1, r0, r6
   14e3c:	mov	r2, #10
   14e40:	mov	r3, r8
   14e44:	mla	r1, r7, r8, r1
   14e48:	mla	r1, r9, r6, r1
   14e4c:	subs	r0, r5, r0
   14e50:	umull	sl, r0, r0, r2
   14e54:	mov	r2, r6
   14e58:	sbc	r1, r4, r1
   14e5c:	add	r1, r1, r1, lsl #2
   14e60:	add	r5, r0, r1, lsl #1
   14e64:	mov	r0, sl
   14e68:	mov	r1, r5
   14e6c:	bl	28aa8 <__assert_fail@plt+0x16e0c>
   14e70:	mov	r4, r0
   14e74:	umull	r0, r2, r0, r6
   14e78:	mla	r2, r4, r8, r2
   14e7c:	mla	r1, r1, r6, r2
   14e80:	mov	r2, #2
   14e84:	subs	r0, sl, r0
   14e88:	sbc	r1, r5, r1
   14e8c:	subs	r3, r6, r0, lsl #1
   14e90:	lsl	r1, r1, #1
   14e94:	orr	r1, r1, r0, lsr #31
   14e98:	orr	r5, r1, r0, lsl #1
   14e9c:	sbcs	r3, r8, r1
   14ea0:	movwcc	r2, #3
   14ea4:	cmp	r5, #0
   14ea8:	movwne	r5, #1
   14eac:	rsbs	r0, r6, r0, lsl #1
   14eb0:	sbcs	r0, r1, r8
   14eb4:	movcs	r5, r2
   14eb8:	b	14f34 <__assert_fail@plt+0x3298>
   14ebc:	mov	r0, sl
   14ec0:	mov	r1, r8
   14ec4:	mov	r3, r5
   14ec8:	bl	28aa8 <__assert_fail@plt+0x16e0c>
   14ecc:	ldr	r2, [fp, #16]
   14ed0:	mov	r6, r0
   14ed4:	mov	r3, r1
   14ed8:	mov	r4, r9
   14edc:	umull	r0, r1, r0, r2
   14ee0:	mla	r1, r6, r5, r1
   14ee4:	mla	r1, r3, r2, r1
   14ee8:	subs	r0, sl, r0
   14eec:	sbc	r1, r8, r1
   14ef0:	orrs	r0, r0, r1
   14ef4:	bne	14fa4 <__assert_fail@plt+0x3308>
   14ef8:	ldr	r5, [sp, #36]	; 0x24
   14efc:	mov	r2, r6
   14f00:	umull	r7, r0, r6, r5
   14f04:	mla	r0, r6, r4, r0
   14f08:	mla	r9, r3, r5, r0
   14f0c:	mov	r0, r7
   14f10:	mov	r1, r9
   14f14:	bl	28aa8 <__assert_fail@plt+0x16e0c>
   14f18:	ldr	r2, [fp, #16]
   14f1c:	eor	r1, r1, r4
   14f20:	eor	r0, r0, r5
   14f24:	orrs	r0, r0, r1
   14f28:	bne	14fa4 <__assert_fail@plt+0x3308>
   14f2c:	mov	r5, #0
   14f30:	mov	r4, #0
   14f34:	ldr	r0, [sp, #28]
   14f38:	ldr	r2, [sp, #32]
   14f3c:	mvn	r6, #0
   14f40:	ands	r8, r0, #16
   14f44:	beq	14f58 <__assert_fail@plt+0x32bc>
   14f48:	subs	r0, r7, r2
   14f4c:	mov	r6, #0
   14f50:	sbcs	r0, r9, #0
   14f54:	bcs	154bc <__assert_fail@plt+0x3820>
   14f58:	ldr	r0, [sp, #24]
   14f5c:	mov	sl, r7
   14f60:	str	r0, [sp, #36]	; 0x24
   14f64:	ldr	r0, [sp, #40]	; 0x28
   14f68:	cmp	r0, #0
   14f6c:	beq	1527c <__assert_fail@plt+0x35e0>
   14f70:	cmp	r0, #1
   14f74:	bne	152ec <__assert_fail@plt+0x3650>
   14f78:	rsbs	r1, r5, #0
   14f7c:	mov	r0, #0
   14f80:	and	r3, sl, #1
   14f84:	ldr	r5, [sp, #36]	; 0x24
   14f88:	sbc	r0, r0, #0
   14f8c:	eor	r1, r3, r1
   14f90:	orrs	r0, r1, r0
   14f94:	addne	r4, r4, #1
   14f98:	cmp	r4, #5
   14f9c:	bgt	1528c <__assert_fail@plt+0x35f0>
   14fa0:	b	152e4 <__assert_fail@plt+0x3648>
   14fa4:	ldr	r9, [fp, #20]
   14fa8:	mov	r0, r2
   14fac:	mov	r1, r9
   14fb0:	bl	28a34 <__assert_fail@plt+0x16d98>
   14fb4:	vmov	d8, r0, r1
   14fb8:	ldr	r0, [sp, #36]	; 0x24
   14fbc:	mov	r1, r4
   14fc0:	bl	28a34 <__assert_fail@plt+0x16d98>
   14fc4:	mov	r6, r0
   14fc8:	mov	r7, r1
   14fcc:	mov	r0, sl
   14fd0:	mov	r1, r8
   14fd4:	bl	28a34 <__assert_fail@plt+0x16d98>
   14fd8:	vmov	d16, r0, r1
   14fdc:	vmov	d17, r6, r7
   14fe0:	ldr	r7, [sp, #28]
   14fe4:	tst	r7, #16
   14fe8:	vdiv.f64	d16, d16, d8
   14fec:	vmul.f64	d8, d16, d17
   14ff0:	bne	15074 <__assert_fail@plt+0x33d8>
   14ff4:	ldr	r0, [sp, #40]	; 0x28
   14ff8:	ldr	sl, [sp, #20]
   14ffc:	cmp	r0, #1
   15000:	beq	15238 <__assert_fail@plt+0x359c>
   15004:	vldr	d16, [pc, #836]	; 15350 <__assert_fail@plt+0x36b4>
   15008:	ldr	r8, [sp, #24]
   1500c:	vcmpe.f64	d8, d16
   15010:	vmrs	APSR_nzcv, fpscr
   15014:	bpl	1523c <__assert_fail@plt+0x35a0>
   15018:	mov	r6, r0
   1501c:	vmov	r0, r1, d8
   15020:	bl	28af8 <__assert_fail@plt+0x16e5c>
   15024:	mov	r4, r0
   15028:	mov	r5, r1
   1502c:	mov	r0, #0
   15030:	cmp	r6, #0
   15034:	mov	r2, #0
   15038:	bne	15060 <__assert_fail@plt+0x33c4>
   1503c:	mov	r0, r4
   15040:	mov	r1, r5
   15044:	bl	28a34 <__assert_fail@plt+0x16d98>
   15048:	vmov	d16, r0, r1
   1504c:	mov	r2, #0
   15050:	mov	r0, #0
   15054:	vcmp.f64	d8, d16
   15058:	vmrs	APSR_nzcv, fpscr
   1505c:	movwne	r0, #1
   15060:	adds	r0, r0, r4
   15064:	adc	r1, r2, r5
   15068:	bl	28a34 <__assert_fail@plt+0x16d98>
   1506c:	vmov	d8, r0, r1
   15070:	b	1523c <__assert_fail@plt+0x35a0>
   15074:	ldr	r0, [sp, #32]
   15078:	vmov.f64	d16, #112	; 0x3f800000  1.0
   1507c:	mov	r6, #0
   15080:	vmov	s0, r0
   15084:	vcvt.f64.u32	d17, s0
   15088:	ldr	sl, [sp, #20]
   1508c:	vmul.f64	d16, d16, d17
   15090:	add	r6, r6, #1
   15094:	cmp	r6, #7
   15098:	vmulls.f64	d18, d16, d17
   1509c:	vcmpels.f64	d18, d8
   150a0:	vmrsls	APSR_nzcv, fpscr
   150a4:	bls	1508c <__assert_fail@plt+0x33f0>
   150a8:	vdiv.f64	d8, d8, d16
   150ac:	ldr	r0, [sp, #40]	; 0x28
   150b0:	ldr	r8, [sp, #24]
   150b4:	ldr	r5, [sp, #8]
   150b8:	cmp	r0, #1
   150bc:	vmov.f64	d16, d8
   150c0:	beq	15134 <__assert_fail@plt+0x3498>
   150c4:	vldr	d16, [pc, #644]	; 15350 <__assert_fail@plt+0x36b4>
   150c8:	vcmpe.f64	d8, d16
   150cc:	vmov.f64	d16, d8
   150d0:	vmrs	APSR_nzcv, fpscr
   150d4:	bpl	15134 <__assert_fail@plt+0x3498>
   150d8:	vmov	r0, r1, d8
   150dc:	bl	28af8 <__assert_fail@plt+0x16e5c>
   150e0:	mov	r5, r1
   150e4:	ldr	r1, [sp, #40]	; 0x28
   150e8:	mov	r4, r0
   150ec:	mov	r0, #0
   150f0:	mov	r2, #0
   150f4:	cmp	r1, #0
   150f8:	bne	15120 <__assert_fail@plt+0x3484>
   150fc:	mov	r0, r4
   15100:	mov	r1, r5
   15104:	bl	28a34 <__assert_fail@plt+0x16d98>
   15108:	vmov	d16, r0, r1
   1510c:	mov	r2, #0
   15110:	mov	r0, #0
   15114:	vcmp.f64	d8, d16
   15118:	vmrs	APSR_nzcv, fpscr
   1511c:	movwne	r0, #1
   15120:	adds	r0, r0, r4
   15124:	adc	r1, r2, r5
   15128:	bl	28a34 <__assert_fail@plt+0x16d98>
   1512c:	vmov	d16, r0, r1
   15130:	ldr	r5, [sp, #8]
   15134:	vmov	r2, r3, d16
   15138:	movw	r1, #40603	; 0x9e9b
   1513c:	mov	r0, sl
   15140:	movt	r1, #2
   15144:	bl	11be8 <sprintf@plt>
   15148:	ldr	r1, [sp, #16]
   1514c:	mov	r0, #3
   15150:	cmp	r1, #0
   15154:	movwne	r0, #2
   15158:	add	r4, r0, r5
   1515c:	mov	r0, sl
   15160:	bl	11a98 <strlen@plt>
   15164:	cmp	r4, r0
   15168:	bcc	1518c <__assert_fail@plt+0x34f0>
   1516c:	mov	r2, r0
   15170:	add	r5, r5, #1
   15174:	tst	r7, #8
   15178:	beq	15264 <__assert_fail@plt+0x35c8>
   1517c:	add	r0, r2, sl
   15180:	ldrb	r0, [r0, #-1]
   15184:	cmp	r0, #48	; 0x30
   15188:	bne	15264 <__assert_fail@plt+0x35c8>
   1518c:	vmov.f64	d9, #36	; 0x41200000  10.0
   15190:	ldr	r4, [sp, #40]	; 0x28
   15194:	vmul.f64	d8, d8, d9
   15198:	cmp	r4, #1
   1519c:	beq	1520c <__assert_fail@plt+0x3570>
   151a0:	vldr	d16, [pc, #424]	; 15350 <__assert_fail@plt+0x36b4>
   151a4:	vcmpe.f64	d8, d16
   151a8:	vmrs	APSR_nzcv, fpscr
   151ac:	bpl	1520c <__assert_fail@plt+0x3570>
   151b0:	vmov	r0, r1, d8
   151b4:	bl	28af8 <__assert_fail@plt+0x16e5c>
   151b8:	mov	r3, r0
   151bc:	mov	r5, r1
   151c0:	mov	r0, #0
   151c4:	cmp	r4, #0
   151c8:	mov	r2, #0
   151cc:	bne	151fc <__assert_fail@plt+0x3560>
   151d0:	mov	r0, r3
   151d4:	mov	r1, r5
   151d8:	mov	r4, r3
   151dc:	bl	28a34 <__assert_fail@plt+0x16d98>
   151e0:	vmov	d16, r0, r1
   151e4:	mov	r3, r4
   151e8:	mov	r2, #0
   151ec:	mov	r0, #0
   151f0:	vcmp.f64	d8, d16
   151f4:	vmrs	APSR_nzcv, fpscr
   151f8:	movwne	r0, #1
   151fc:	adds	r0, r0, r3
   15200:	adc	r1, r2, r5
   15204:	bl	28a34 <__assert_fail@plt+0x16d98>
   15208:	vmov	d8, r0, r1
   1520c:	vdiv.f64	d16, d8, d9
   15210:	movw	r1, #40597	; 0x9e95
   15214:	mov	r0, sl
   15218:	movt	r1, #2
   1521c:	vmov	r2, r3, d16
   15220:	bl	11be8 <sprintf@plt>
   15224:	mov	r0, sl
   15228:	bl	11a98 <strlen@plt>
   1522c:	mov	r2, r0
   15230:	mov	r5, #0
   15234:	b	15264 <__assert_fail@plt+0x35c8>
   15238:	ldr	r8, [sp, #24]
   1523c:	vmov	r2, r3, d8
   15240:	movw	r1, #40597	; 0x9e95
   15244:	mov	r0, sl
   15248:	movt	r1, #2
   1524c:	bl	11be8 <sprintf@plt>
   15250:	mov	r0, sl
   15254:	bl	11a98 <strlen@plt>
   15258:	mov	r2, r0
   1525c:	mov	r5, #0
   15260:	mvn	r6, #0
   15264:	sub	r4, r8, r2
   15268:	mov	r1, sl
   1526c:	mov	r0, r4
   15270:	bl	11894 <memmove@plt>
   15274:	sub	r5, r8, r5
   15278:	b	1533c <__assert_fail@plt+0x36a0>
   1527c:	add	r0, r4, r5
   15280:	ldr	r5, [sp, #36]	; 0x24
   15284:	cmp	r0, #1
   15288:	blt	152e4 <__assert_fail@plt+0x3648>
   1528c:	adds	sl, sl, #1
   15290:	adc	r9, r9, #0
   15294:	cmp	r6, #7
   15298:	bgt	152e4 <__assert_fail@plt+0x3648>
   1529c:	cmp	r8, #0
   152a0:	beq	152e4 <__assert_fail@plt+0x3648>
   152a4:	eor	r0, sl, r2
   152a8:	orrs	r0, r0, r9
   152ac:	bne	152e4 <__assert_fail@plt+0x3648>
   152b0:	ldr	r0, [sp, #28]
   152b4:	add	r6, r6, #1
   152b8:	mov	r9, #0
   152bc:	mov	sl, #1
   152c0:	tst	r0, #8
   152c4:	bne	152e4 <__assert_fail@plt+0x3648>
   152c8:	ldr	r2, [sp, #8]
   152cc:	mov	r0, #48	; 0x30
   152d0:	ldr	r1, [sp, #4]
   152d4:	strb	r0, [r5, #-1]!
   152d8:	sub	r5, r5, r2
   152dc:	mov	r0, r5
   152e0:	bl	118dc <memcpy@plt>
   152e4:	ldr	r8, [sp, #24]
   152e8:	b	152f4 <__assert_fail@plt+0x3658>
   152ec:	ldr	r8, [sp, #24]
   152f0:	ldr	r5, [sp, #36]	; 0x24
   152f4:	mov	r4, r5
   152f8:	mov	r0, sl
   152fc:	mov	r1, r9
   15300:	mov	r2, #10
   15304:	mov	r3, #0
   15308:	bl	28aa8 <__assert_fail@plt+0x16e0c>
   1530c:	add	r2, r0, r0, lsl #2
   15310:	sub	r2, sl, r2, lsl #1
   15314:	orr	r2, r2, #48	; 0x30
   15318:	strb	r2, [r4, #-1]!
   1531c:	rsbs	r2, sl, #9
   15320:	mov	sl, r0
   15324:	rscs	r2, r9, #0
   15328:	mov	r9, r1
   1532c:	bcc	152f8 <__assert_fail@plt+0x365c>
   15330:	ldr	r7, [sp, #28]
   15334:	ldr	r9, [fp, #20]
   15338:	ldr	sl, [sp, #20]
   1533c:	tst	r7, #4
   15340:	bne	15358 <__assert_fail@plt+0x36bc>
   15344:	ldr	r3, [sp, #32]
   15348:	ldr	r5, [fp, #16]
   1534c:	b	1546c <__assert_fail@plt+0x37d0>
   15350:	andeq	r0, r0, r0
   15354:	mvnsmi	r0, #0
   15358:	ldr	r0, [sp, #44]	; 0x2c
   1535c:	mov	r7, r5
   15360:	str	r6, [sp, #8]
   15364:	sub	r5, r5, r4
   15368:	bl	11a98 <strlen@plt>
   1536c:	add	r8, sp, #48	; 0x30
   15370:	str	r0, [sp, #40]	; 0x28
   15374:	mov	r1, r4
   15378:	mov	r2, r5
   1537c:	mov	r0, r8
   15380:	bl	118dc <memcpy@plt>
   15384:	ldr	r0, [sp, #12]
   15388:	ldrb	r6, [r0]
   1538c:	cmp	r6, #255	; 0xff
   15390:	mov	r9, r6
   15394:	moveq	r9, r5
   15398:	cmp	r6, #0
   1539c:	mvneq	r9, #0
   153a0:	cmp	r9, r5
   153a4:	movhi	r9, r5
   153a8:	sub	r4, r7, r9
   153ac:	sub	r7, r5, r9
   153b0:	mov	r2, r9
   153b4:	add	r1, r8, r7
   153b8:	mov	r0, r4
   153bc:	bl	118dc <memcpy@plt>
   153c0:	cmp	r7, #0
   153c4:	beq	15450 <__assert_fail@plt+0x37b4>
   153c8:	clz	r0, r6
   153cc:	ldr	r8, [sp, #12]
   153d0:	lsr	sl, r0, #5
   153d4:	ldr	r0, [sp, #40]	; 0x28
   153d8:	rsb	r0, r0, #0
   153dc:	str	r0, [sp, #36]	; 0x24
   153e0:	ldr	r0, [sp, #36]	; 0x24
   153e4:	ldr	r1, [sp, #44]	; 0x2c
   153e8:	ldr	r2, [sp, #40]	; 0x28
   153ec:	add	r4, r4, r0
   153f0:	mov	r0, r4
   153f4:	bl	118dc <memcpy@plt>
   153f8:	tst	sl, #1
   153fc:	add	r0, sp, #48	; 0x30
   15400:	addeq	r8, r8, #1
   15404:	ldrb	r6, [r8]
   15408:	cmp	r6, #255	; 0xff
   1540c:	mov	r5, r6
   15410:	moveq	r5, r7
   15414:	cmp	r6, #0
   15418:	moveq	r5, r9
   1541c:	cmp	r7, r5
   15420:	movcc	r5, r7
   15424:	sub	r7, r7, r5
   15428:	sub	r4, r4, r5
   1542c:	mov	r2, r5
   15430:	add	r1, r0, r7
   15434:	mov	r0, r4
   15438:	bl	118dc <memcpy@plt>
   1543c:	clz	r0, r6
   15440:	cmp	r7, #0
   15444:	mov	r9, r5
   15448:	lsr	sl, r0, #5
   1544c:	bne	153e0 <__assert_fail@plt+0x3744>
   15450:	ldr	r8, [sp, #24]
   15454:	ldr	sl, [sp, #20]
   15458:	ldr	r7, [sp, #28]
   1545c:	ldr	r3, [sp, #32]
   15460:	ldr	r9, [fp, #20]
   15464:	ldr	r5, [fp, #16]
   15468:	ldr	r6, [sp, #8]
   1546c:	tst	r7, #128	; 0x80
   15470:	beq	155d4 <__assert_fail@plt+0x3938>
   15474:	cmn	r6, #1
   15478:	bgt	1556c <__assert_fail@plt+0x38d0>
   1547c:	subs	r0, r5, #2
   15480:	mov	r6, #0
   15484:	sbcs	r0, r9, #0
   15488:	bcc	1556c <__assert_fail@plt+0x38d0>
   1548c:	mov	r0, #0
   15490:	mov	r1, #1
   15494:	mov	r6, #0
   15498:	cmp	r6, #7
   1549c:	beq	15568 <__assert_fail@plt+0x38cc>
   154a0:	umull	r1, r2, r1, r3
   154a4:	add	r6, r6, #1
   154a8:	mla	r0, r0, r3, r2
   154ac:	subs	r2, r1, r5
   154b0:	sbcs	r2, r0, r9
   154b4:	bcc	15498 <__assert_fail@plt+0x37fc>
   154b8:	b	1556c <__assert_fail@plt+0x38d0>
   154bc:	mov	r6, #0
   154c0:	mov	r0, r7
   154c4:	mov	r1, r9
   154c8:	mov	r3, #0
   154cc:	bl	28aa8 <__assert_fail@plt+0x16e0c>
   154d0:	ldr	r2, [sp, #32]
   154d4:	mov	sl, r0
   154d8:	mov	r9, r1
   154dc:	mls	r0, r0, r2, r7
   154e0:	add	r0, r0, r0, lsl #2
   154e4:	add	r0, r4, r0, lsl #1
   154e8:	udiv	r4, r0, r2
   154ec:	mls	r0, r4, r2, r0
   154f0:	lsl	r0, r0, #1
   154f4:	add	r0, r0, r5, lsr #1
   154f8:	cmp	r0, r2
   154fc:	bcs	15510 <__assert_fail@plt+0x3874>
   15500:	rsb	r1, r5, #0
   15504:	subs	r5, r0, r1
   15508:	movwne	r5, #1
   1550c:	b	15520 <__assert_fail@plt+0x3884>
   15510:	add	r0, r0, r5
   15514:	mov	r5, #2
   15518:	cmp	r2, r0
   1551c:	movwcc	r5, #3
   15520:	add	r6, r6, #1
   15524:	cmp	r6, #7
   15528:	bhi	1553c <__assert_fail@plt+0x38a0>
   1552c:	subs	r0, sl, r2
   15530:	mov	r7, sl
   15534:	sbcs	r0, r9, #0
   15538:	bcs	154c0 <__assert_fail@plt+0x3824>
   1553c:	rsbs	r0, sl, #9
   15540:	rscs	r0, r9, #0
   15544:	bcc	155f0 <__assert_fail@plt+0x3954>
   15548:	ldr	r0, [sp, #40]	; 0x28
   1554c:	cmp	r0, #1
   15550:	bne	155f8 <__assert_fail@plt+0x395c>
   15554:	and	r0, r4, #1
   15558:	add	r0, r5, r0
   1555c:	cmp	r0, #2
   15560:	bhi	15608 <__assert_fail@plt+0x396c>
   15564:	b	1563c <__assert_fail@plt+0x39a0>
   15568:	mov	r6, #8
   1556c:	and	r0, r7, #256	; 0x100
   15570:	tst	r7, #64	; 0x40
   15574:	orrsne	r1, r6, r0
   15578:	movne	r1, #32
   1557c:	addne	r8, sl, #648	; 0x288
   15580:	strbne	r1, [sl, #647]	; 0x287
   15584:	cmp	r6, #0
   15588:	beq	155b0 <__assert_fail@plt+0x3914>
   1558c:	ldr	r1, [sp, #16]
   15590:	cmp	r1, #0
   15594:	moveq	r1, #107	; 0x6b
   15598:	cmpeq	r6, #1
   1559c:	beq	155ac <__assert_fail@plt+0x3910>
   155a0:	movw	r1, #40684	; 0x9eec
   155a4:	movt	r1, #2
   155a8:	ldrb	r1, [r1, r6]
   155ac:	strb	r1, [r8], #1
   155b0:	cmp	r0, #0
   155b4:	beq	155d4 <__assert_fail@plt+0x3938>
   155b8:	ldr	r0, [sp, #16]
   155bc:	cmp	r0, #0
   155c0:	cmpne	r6, #0
   155c4:	movne	r0, #105	; 0x69
   155c8:	strbne	r0, [r8], #1
   155cc:	mov	r0, #66	; 0x42
   155d0:	strb	r0, [r8], #1
   155d4:	mov	r0, #0
   155d8:	strb	r0, [r8]
   155dc:	mov	r0, r4
   155e0:	sub	sp, fp, #48	; 0x30
   155e4:	vpop	{d8-d9}
   155e8:	add	sp, sp, #4
   155ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155f0:	ldr	r0, [sp, #24]
   155f4:	b	14f60 <__assert_fail@plt+0x32c4>
   155f8:	cmp	r0, #0
   155fc:	bne	1563c <__assert_fail@plt+0x39a0>
   15600:	cmp	r5, #0
   15604:	beq	1563c <__assert_fail@plt+0x39a0>
   15608:	adds	r0, sl, #1
   1560c:	add	r4, r4, #1
   15610:	mov	r5, #0
   15614:	adc	r1, r9, #0
   15618:	cmp	r4, #10
   1561c:	bne	1563c <__assert_fail@plt+0x39a0>
   15620:	rsbs	r3, r0, #9
   15624:	mov	r4, #0
   15628:	mov	sl, r0
   1562c:	mov	r9, r1
   15630:	mov	r5, #0
   15634:	rscs	r3, r1, #0
   15638:	bcc	1568c <__assert_fail@plt+0x39f0>
   1563c:	ldr	r0, [sp, #28]
   15640:	tst	r0, #8
   15644:	beq	1565c <__assert_fail@plt+0x39c0>
   15648:	cmp	r4, #0
   1564c:	bne	1565c <__assert_fail@plt+0x39c0>
   15650:	ldr	r0, [sp, #24]
   15654:	str	r0, [sp, #36]	; 0x24
   15658:	b	15684 <__assert_fail@plt+0x39e8>
   1565c:	ldr	r1, [sp, #20]
   15660:	ldr	r2, [sp, #8]
   15664:	add	r0, r4, #48	; 0x30
   15668:	strb	r0, [r1, #646]!	; 0x286
   1566c:	sub	r0, r1, r2
   15670:	ldr	r1, [sp, #4]
   15674:	str	r0, [sp, #36]	; 0x24
   15678:	bl	118dc <memcpy@plt>
   1567c:	ldr	r2, [sp, #32]
   15680:	mov	r5, #0
   15684:	mov	r4, #0
   15688:	b	14f64 <__assert_fail@plt+0x32c8>
   1568c:	ldr	r0, [sp, #24]
   15690:	mov	r5, #0
   15694:	mov	sl, #10
   15698:	mov	r9, #0
   1569c:	b	14f60 <__assert_fail@plt+0x32c4>
   156a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   156a4:	add	fp, sp, #24
   156a8:	sub	sp, sp, #8
   156ac:	mov	r4, r2
   156b0:	mov	r8, r1
   156b4:	cmp	r0, #0
   156b8:	bne	156e4 <__assert_fail@plt+0x3a48>
   156bc:	movw	r0, #40609	; 0x9ea1
   156c0:	movt	r0, #2
   156c4:	bl	119e4 <getenv@plt>
   156c8:	cmp	r0, #0
   156cc:	bne	156e4 <__assert_fail@plt+0x3a48>
   156d0:	movw	r0, #40620	; 0x9eac
   156d4:	movt	r0, #2
   156d8:	bl	119e4 <getenv@plt>
   156dc:	cmp	r0, #0
   156e0:	beq	15800 <__assert_fail@plt+0x3b64>
   156e4:	mov	r6, r0
   156e8:	movw	r7, #40708	; 0x9f04
   156ec:	movw	r1, #40696	; 0x9ef8
   156f0:	mov	r3, #4
   156f4:	ldrb	r5, [r6], #1
   156f8:	movt	r7, #2
   156fc:	movt	r1, #2
   15700:	mov	r2, r7
   15704:	cmp	r5, #39	; 0x27
   15708:	movne	r6, r0
   1570c:	mov	r0, r6
   15710:	bl	27fbc <__assert_fail@plt+0x16320>
   15714:	sub	r1, r5, #39	; 0x27
   15718:	cmp	r0, #0
   1571c:	clz	r1, r1
   15720:	lsr	r1, r1, #5
   15724:	lsl	r5, r1, #2
   15728:	bmi	15750 <__assert_fail@plt+0x3ab4>
   1572c:	ldr	r0, [r7, r0, lsl #2]
   15730:	mov	r2, #1
   15734:	mov	r1, #0
   15738:	str	r2, [r4]
   1573c:	str	r1, [r4, #4]
   15740:	orr	r1, r0, r5
   15744:	mov	r0, #0
   15748:	str	r1, [r8]
   1574c:	b	15780 <__assert_fail@plt+0x3ae4>
   15750:	movw	r0, #40630	; 0x9eb6
   15754:	add	r1, sp, #4
   15758:	mov	r2, #0
   1575c:	mov	r3, r4
   15760:	mov	r7, #0
   15764:	movt	r0, #2
   15768:	str	r0, [sp]
   1576c:	mov	r0, r6
   15770:	bl	197e8 <__assert_fail@plt+0x7b4c>
   15774:	cmp	r0, #0
   15778:	beq	157bc <__assert_fail@plt+0x3b20>
   1577c:	str	r7, [r8]
   15780:	ldrd	r2, [r4]
   15784:	orrs	r1, r2, r3
   15788:	bne	157b4 <__assert_fail@plt+0x3b18>
   1578c:	movw	r0, #40666	; 0x9eda
   15790:	movt	r0, #2
   15794:	bl	119e4 <getenv@plt>
   15798:	cmp	r0, #0
   1579c:	mov	r2, #512	; 0x200
   157a0:	mov	r0, #4
   157a4:	mov	r1, #0
   157a8:	movweq	r2, #1024	; 0x400
   157ac:	str	r2, [r4]
   157b0:	str	r1, [r4, #4]
   157b4:	sub	sp, fp, #24
   157b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   157bc:	ldrb	r0, [r6]
   157c0:	sub	r0, r0, #48	; 0x30
   157c4:	uxtb	r0, r0
   157c8:	cmp	r0, #10
   157cc:	bcc	157f8 <__assert_fail@plt+0x3b5c>
   157d0:	ldr	r0, [sp, #4]
   157d4:	cmp	r0, r6
   157d8:	beq	15828 <__assert_fail@plt+0x3b8c>
   157dc:	ldrb	r2, [r6, #1]
   157e0:	add	r1, r6, #1
   157e4:	mov	r6, r1
   157e8:	sub	r2, r2, #48	; 0x30
   157ec:	uxtb	r2, r2
   157f0:	cmp	r2, #10
   157f4:	bcs	157d4 <__assert_fail@plt+0x3b38>
   157f8:	mov	r1, r5
   157fc:	b	15744 <__assert_fail@plt+0x3aa8>
   15800:	movw	r0, #40666	; 0x9eda
   15804:	movt	r0, #2
   15808:	bl	119e4 <getenv@plt>
   1580c:	cmp	r0, #0
   15810:	mov	r2, #512	; 0x200
   15814:	mov	r1, #0
   15818:	movweq	r2, #1024	; 0x400
   1581c:	str	r2, [r4]
   15820:	str	r1, [r4, #4]
   15824:	b	15744 <__assert_fail@plt+0x3aa8>
   15828:	ldrb	r2, [r0, #-1]
   1582c:	orr	r1, r5, #384	; 0x180
   15830:	cmp	r2, #66	; 0x42
   15834:	mov	r2, r1
   15838:	orrne	r2, r5, #128	; 0x80
   1583c:	bne	15850 <__assert_fail@plt+0x3bb4>
   15840:	ldrb	r0, [r0, #-2]
   15844:	cmp	r0, #105	; 0x69
   15848:	orreq	r1, r2, #32
   1584c:	b	15744 <__assert_fail@plt+0x3aa8>
   15850:	orr	r1, r2, #32
   15854:	b	15744 <__assert_fail@plt+0x3aa8>
   15858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1585c:	add	fp, sp, #28
   15860:	sub	sp, sp, #396	; 0x18c
   15864:	mov	sl, r1
   15868:	str	r0, [sp, #28]
   1586c:	bl	11990 <__ctype_get_mb_cur_max@plt>
   15870:	cmp	r0, #2
   15874:	str	sl, [sp, #24]
   15878:	bcc	158e4 <__assert_fail@plt+0x3c48>
   1587c:	sub	r6, fp, #88	; 0x58
   15880:	mov	r7, #0
   15884:	mov	r0, r6
   15888:	str	r7, [fp, #-80]	; 0xffffffb0
   1588c:	str	r7, [fp, #-84]	; 0xffffffac
   15890:	strb	r7, [fp, #-76]	; 0xffffffb4
   15894:	strb	r7, [fp, #-88]	; 0xffffffa8
   15898:	str	sl, [fp, #-72]	; 0xffffffb8
   1589c:	bl	17040 <__assert_fail@plt+0x53a4>
   158a0:	ldrb	r5, [fp, #-64]	; 0xffffffc0
   158a4:	ldr	r4, [fp, #-60]	; 0xffffffc4
   158a8:	cmp	r5, #0
   158ac:	beq	158b8 <__assert_fail@plt+0x3c1c>
   158b0:	cmp	r4, #0
   158b4:	beq	15ab0 <__assert_fail@plt+0x3e14>
   158b8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   158bc:	add	r0, r6, #32
   158c0:	str	r7, [fp, #-136]	; 0xffffff78
   158c4:	str	r7, [fp, #-140]	; 0xffffff74
   158c8:	str	sl, [fp, #-128]	; 0xffffff80
   158cc:	strb	r7, [fp, #-132]	; 0xffffff7c
   158d0:	strb	r7, [fp, #-144]	; 0xffffff70
   158d4:	cmp	r1, r0
   158d8:	beq	15ab8 <__assert_fail@plt+0x3e1c>
   158dc:	ldr	r6, [fp, #-68]	; 0xffffffbc
   158e0:	b	15ad4 <__assert_fail@plt+0x3e38>
   158e4:	ldrb	r6, [sl]
   158e8:	cmp	r6, #0
   158ec:	beq	15ab0 <__assert_fail@plt+0x3e14>
   158f0:	bl	11a5c <__ctype_b_loc@plt>
   158f4:	ldr	r8, [r0]
   158f8:	str	r0, [sp, #4]
   158fc:	ldr	r4, [sp, #28]
   15900:	add	r0, r8, r6, lsl #1
   15904:	ldrb	r0, [r0, #1]
   15908:	tst	r0, #1
   1590c:	beq	1591c <__assert_fail@plt+0x3c80>
   15910:	bl	11a38 <__ctype_tolower_loc@plt>
   15914:	ldr	r0, [r0]
   15918:	ldrb	r6, [r0, r6, lsl #2]
   1591c:	ldrb	sl, [r4]
   15920:	cmp	sl, #0
   15924:	beq	15eb4 <__assert_fail@plt+0x4218>
   15928:	mov	r0, #0
   1592c:	mov	r7, #0
   15930:	mov	r9, #0
   15934:	str	r6, [sp]
   15938:	str	r0, [sp, #8]
   1593c:	mov	r0, #1
   15940:	str	r0, [sp, #12]
   15944:	ldr	r0, [sp, #24]
   15948:	str	r0, [sp, #16]
   1594c:	add	r0, r9, r9, lsl #2
   15950:	cmp	r7, r0
   15954:	cmpcs	r9, #10
   15958:	bcs	15a28 <__assert_fail@plt+0x3d8c>
   1595c:	uxtb	r4, sl
   15960:	str	r7, [sp, #20]
   15964:	add	r0, r8, r4, lsl #1
   15968:	ldrb	r0, [r0, #1]
   1596c:	tst	r0, #1
   15970:	beq	15980 <__assert_fail@plt+0x3ce4>
   15974:	bl	11a38 <__ctype_tolower_loc@plt>
   15978:	ldr	r0, [r0]
   1597c:	ldr	r4, [r0, r4, lsl #2]
   15980:	ldr	sl, [sp, #28]
   15984:	ldr	r7, [sp, #24]
   15988:	cmp	r4, r6
   1598c:	bne	15a00 <__assert_fail@plt+0x3d64>
   15990:	mov	r4, #1
   15994:	ldrb	r6, [r7, r4]
   15998:	cmp	r6, #0
   1599c:	beq	15ebc <__assert_fail@plt+0x4220>
   159a0:	ldrb	r5, [sl, r4]
   159a4:	cmp	r5, #0
   159a8:	beq	15eb4 <__assert_fail@plt+0x4218>
   159ac:	add	r0, r8, r5, lsl #1
   159b0:	ldrb	r0, [r0, #1]
   159b4:	tst	r0, #1
   159b8:	beq	159c8 <__assert_fail@plt+0x3d2c>
   159bc:	bl	11a38 <__ctype_tolower_loc@plt>
   159c0:	ldr	r0, [r0]
   159c4:	ldr	r5, [r0, r5, lsl #2]
   159c8:	add	r0, r8, r6, lsl #1
   159cc:	ldrb	r0, [r0, #1]
   159d0:	tst	r0, #1
   159d4:	beq	159e4 <__assert_fail@plt+0x3d48>
   159d8:	bl	11a38 <__ctype_tolower_loc@plt>
   159dc:	ldr	r0, [r0]
   159e0:	ldr	r6, [r0, r6, lsl #2]
   159e4:	add	r4, r4, #1
   159e8:	cmp	r5, r6
   159ec:	beq	15994 <__assert_fail@plt+0x3cf8>
   159f0:	ldr	r7, [sp, #20]
   159f4:	ldr	r6, [sp]
   159f8:	add	r7, r7, r4
   159fc:	b	15a08 <__assert_fail@plt+0x3d6c>
   15a00:	ldr	r7, [sp, #20]
   15a04:	add	r7, r7, #1
   15a08:	mov	r0, sl
   15a0c:	add	r9, r9, #1
   15a10:	mov	r4, #0
   15a14:	ldrb	sl, [r0, #1]!
   15a18:	str	r0, [sp, #28]
   15a1c:	cmp	sl, #0
   15a20:	bne	1594c <__assert_fail@plt+0x3cb0>
   15a24:	b	15ec8 <__assert_fail@plt+0x422c>
   15a28:	ldr	r0, [sp, #12]
   15a2c:	tst	r0, #1
   15a30:	beq	1595c <__assert_fail@plt+0x3cc0>
   15a34:	ldr	r4, [sp, #16]
   15a38:	cmp	r4, #0
   15a3c:	beq	15a64 <__assert_fail@plt+0x3dc8>
   15a40:	ldr	r0, [sp, #8]
   15a44:	sub	r1, r7, r0
   15a48:	mov	r0, r4
   15a4c:	bl	11b70 <strnlen@plt>
   15a50:	ldrb	r0, [r4, r0]!
   15a54:	str	r7, [sp, #8]
   15a58:	str	r4, [sp, #16]
   15a5c:	cmp	r0, #0
   15a60:	bne	1595c <__assert_fail@plt+0x3cc0>
   15a64:	ldr	r4, [sp, #24]
   15a68:	mov	r0, r4
   15a6c:	bl	11a98 <strlen@plt>
   15a70:	ldr	r5, [sp, #28]
   15a74:	mov	r2, r0
   15a78:	mov	r1, r4
   15a7c:	sub	r3, fp, #88	; 0x58
   15a80:	mov	r0, r5
   15a84:	bl	1634c <__assert_fail@plt+0x46b0>
   15a88:	cmp	r0, #0
   15a8c:	bne	15edc <__assert_fail@plt+0x4240>
   15a90:	ldr	r0, [sp, #4]
   15a94:	ldrb	sl, [r5]
   15a98:	ldr	r8, [r0]
   15a9c:	mov	r0, #0
   15aa0:	str	r0, [sp, #16]
   15aa4:	mov	r0, #0
   15aa8:	str	r0, [sp, #12]
   15aac:	b	1595c <__assert_fail@plt+0x3cc0>
   15ab0:	ldr	r4, [sp, #28]
   15ab4:	b	15ec8 <__assert_fail@plt+0x422c>
   15ab8:	ldr	r6, [fp, #-68]	; 0xffffffbc
   15abc:	sub	r0, fp, #184	; 0xb8
   15ac0:	add	r7, r0, #16
   15ac4:	mov	r0, r7
   15ac8:	mov	r2, r6
   15acc:	bl	118dc <memcpy@plt>
   15ad0:	mov	r1, r7
   15ad4:	cmp	r5, #0
   15ad8:	strb	r5, [fp, #-176]	; 0xffffff50
   15adc:	str	r6, [fp, #-180]	; 0xffffff4c
   15ae0:	str	r1, [fp, #-184]	; 0xffffff48
   15ae4:	beq	15af8 <__assert_fail@plt+0x3e5c>
   15ae8:	mov	r0, r4
   15aec:	str	r4, [fp, #-172]	; 0xffffff54
   15af0:	bl	11900 <towlower@plt>
   15af4:	str	r0, [fp, #-172]	; 0xffffff54
   15af8:	ldr	r0, [sp, #28]
   15afc:	mov	r4, #0
   15b00:	str	r4, [sp, #192]	; 0xc0
   15b04:	str	r4, [sp, #188]	; 0xbc
   15b08:	strb	r4, [sp, #196]	; 0xc4
   15b0c:	strb	r4, [sp, #184]	; 0xb8
   15b10:	str	r0, [sp, #200]	; 0xc8
   15b14:	add	r0, sp, #184	; 0xb8
   15b18:	bl	17040 <__assert_fail@plt+0x53a4>
   15b1c:	ldrb	r0, [sp, #208]	; 0xd0
   15b20:	cmp	r0, #0
   15b24:	beq	15b34 <__assert_fail@plt+0x3e98>
   15b28:	ldr	r0, [sp, #212]	; 0xd4
   15b2c:	cmp	r0, #0
   15b30:	beq	15ec8 <__assert_fail@plt+0x422c>
   15b34:	add	r0, sp, #32
   15b38:	mov	r9, #0
   15b3c:	mov	r6, #0
   15b40:	mov	r8, #0
   15b44:	add	r0, r0, #4
   15b48:	str	r0, [sp]
   15b4c:	add	r0, sp, #144	; 0x90
   15b50:	add	r0, r0, #16
   15b54:	str	r0, [sp, #8]
   15b58:	add	r0, sp, #184	; 0xb8
   15b5c:	add	r0, r0, #32
   15b60:	str	r0, [sp, #20]
   15b64:	mov	r0, #1
   15b68:	str	r0, [sp, #12]
   15b6c:	mov	r0, #0
   15b70:	str	r0, [sp, #16]
   15b74:	add	r0, r6, r6, lsl #2
   15b78:	mov	r7, r8
   15b7c:	cmp	r8, r0
   15b80:	bcc	15c44 <__assert_fail@plt+0x3fa8>
   15b84:	ldr	r0, [sp, #12]
   15b88:	mov	r5, r6
   15b8c:	sub	r6, fp, #144	; 0x90
   15b90:	tst	r0, #1
   15b94:	beq	15c40 <__assert_fail@plt+0x3fa4>
   15b98:	cmp	r5, #10
   15b9c:	bcc	15c40 <__assert_fail@plt+0x3fa4>
   15ba0:	ldr	r1, [sp, #16]
   15ba4:	subs	r0, r7, r1
   15ba8:	beq	15bec <__assert_fail@plt+0x3f50>
   15bac:	sub	r4, r1, r7
   15bb0:	mov	r0, r6
   15bb4:	bl	17040 <__assert_fail@plt+0x53a4>
   15bb8:	ldrb	r0, [fp, #-120]	; 0xffffff88
   15bbc:	cmp	r0, #0
   15bc0:	beq	15bd0 <__assert_fail@plt+0x3f34>
   15bc4:	ldr	r0, [fp, #-116]	; 0xffffff8c
   15bc8:	cmp	r0, #0
   15bcc:	beq	15bec <__assert_fail@plt+0x3f50>
   15bd0:	strb	r9, [fp, #-132]	; 0xffffff7c
   15bd4:	adds	r4, r4, #1
   15bd8:	ldr	r0, [fp, #-128]	; 0xffffff80
   15bdc:	ldr	r1, [fp, #-124]	; 0xffffff84
   15be0:	add	r0, r0, r1
   15be4:	str	r0, [fp, #-128]	; 0xffffff80
   15be8:	bcc	15bb0 <__assert_fail@plt+0x3f14>
   15bec:	mov	r0, r6
   15bf0:	bl	17040 <__assert_fail@plt+0x53a4>
   15bf4:	ldrb	r0, [fp, #-120]	; 0xffffff88
   15bf8:	cmp	r0, #0
   15bfc:	beq	15c3c <__assert_fail@plt+0x3fa0>
   15c00:	ldr	r0, [fp, #-116]	; 0xffffff8c
   15c04:	mov	r6, r5
   15c08:	str	r7, [sp, #16]
   15c0c:	cmp	r0, #0
   15c10:	bne	15c44 <__assert_fail@plt+0x3fa8>
   15c14:	ldr	r0, [sp, #28]
   15c18:	mov	r1, sl
   15c1c:	add	r2, sp, #88	; 0x58
   15c20:	bl	15ee8 <__assert_fail@plt+0x424c>
   15c24:	mov	r1, #0
   15c28:	cmp	r0, #0
   15c2c:	str	r7, [sp, #16]
   15c30:	str	r1, [sp, #12]
   15c34:	beq	15c44 <__assert_fail@plt+0x3fa8>
   15c38:	b	15ed4 <__assert_fail@plt+0x4238>
   15c3c:	str	r7, [sp, #16]
   15c40:	mov	r6, r5
   15c44:	ldr	r5, [sp, #200]	; 0xc8
   15c48:	ldr	r1, [sp, #20]
   15c4c:	ldr	r4, [sp, #204]	; 0xcc
   15c50:	cmp	r5, r1
   15c54:	bne	15c6c <__assert_fail@plt+0x3fd0>
   15c58:	ldr	r5, [sp, #8]
   15c5c:	ldr	r1, [sp, #20]
   15c60:	mov	r2, r4
   15c64:	mov	r0, r5
   15c68:	bl	118dc <memcpy@plt>
   15c6c:	ldrb	r0, [sp, #208]	; 0xd0
   15c70:	add	r8, r7, #1
   15c74:	str	r4, [sp, #148]	; 0x94
   15c78:	str	r5, [sp, #144]	; 0x90
   15c7c:	cmp	r0, #0
   15c80:	strb	r0, [sp, #152]	; 0x98
   15c84:	beq	15cac <__assert_fail@plt+0x4010>
   15c88:	ldr	r0, [sp, #212]	; 0xd4
   15c8c:	str	r0, [sp, #156]	; 0x9c
   15c90:	bl	11900 <towlower@plt>
   15c94:	str	r0, [sp, #156]	; 0x9c
   15c98:	ldrb	r0, [sp, #152]	; 0x98
   15c9c:	cmp	r0, #0
   15ca0:	ldrbne	r0, [fp, #-176]	; 0xffffff50
   15ca4:	cmpne	r0, #0
   15ca8:	bne	15cd4 <__assert_fail@plt+0x4038>
   15cac:	ldr	r2, [sp, #148]	; 0x94
   15cb0:	ldr	r0, [fp, #-180]	; 0xffffff4c
   15cb4:	cmp	r2, r0
   15cb8:	bne	15e74 <__assert_fail@plt+0x41d8>
   15cbc:	ldr	r1, [fp, #-184]	; 0xffffff48
   15cc0:	ldr	r0, [sp, #144]	; 0x90
   15cc4:	bl	11a80 <bcmp@plt>
   15cc8:	cmp	r0, #0
   15ccc:	bne	15e74 <__assert_fail@plt+0x41d8>
   15cd0:	b	15ce4 <__assert_fail@plt+0x4048>
   15cd4:	ldr	r0, [fp, #-172]	; 0xffffff54
   15cd8:	ldr	r1, [sp, #156]	; 0x9c
   15cdc:	cmp	r1, r0
   15ce0:	bne	15e74 <__assert_fail@plt+0x41d8>
   15ce4:	str	r6, [sp, #4]
   15ce8:	add	r0, sp, #184	; 0xb8
   15cec:	add	r1, sp, #88	; 0x58
   15cf0:	mov	r9, #0
   15cf4:	ldm	r0!, {r2, r3, r4, r5}
   15cf8:	stmia	r1!, {r2, r3, r4, r5}
   15cfc:	ldm	r0!, {r2, r3, r4, r5, r6}
   15d00:	stmia	r1!, {r2, r3, r4, r5, r6}
   15d04:	ldm	r0, {r2, r3, r4, r5, r6}
   15d08:	add	r0, sp, #32
   15d0c:	stm	r1, {r2, r3, r4, r5, r6}
   15d10:	mov	r2, #0
   15d14:	str	sl, [sp, #48]	; 0x30
   15d18:	strb	r2, [sp, #100]	; 0x64
   15d1c:	strb	r2, [sp, #32]
   15d20:	ldr	r3, [sp, #104]	; 0x68
   15d24:	ldr	r1, [sp, #108]	; 0x6c
   15d28:	add	r1, r3, r1
   15d2c:	str	r1, [sp, #104]	; 0x68
   15d30:	ldr	r1, [sp]
   15d34:	str	r2, [r1]
   15d38:	str	r2, [r1, #4]
   15d3c:	strb	r2, [sp, #44]	; 0x2c
   15d40:	bl	17040 <__assert_fail@plt+0x53a4>
   15d44:	ldrb	r0, [sp, #56]	; 0x38
   15d48:	cmp	r0, #0
   15d4c:	beq	15d5c <__assert_fail@plt+0x40c0>
   15d50:	ldr	r0, [sp, #60]	; 0x3c
   15d54:	cmp	r0, #0
   15d58:	beq	15ee4 <__assert_fail@plt+0x4248>
   15d5c:	strb	r9, [sp, #44]	; 0x2c
   15d60:	ldr	r0, [sp, #48]	; 0x30
   15d64:	ldr	r1, [sp, #52]	; 0x34
   15d68:	add	r0, r0, r1
   15d6c:	str	r0, [sp, #48]	; 0x30
   15d70:	add	r0, sp, #32
   15d74:	bl	17040 <__assert_fail@plt+0x53a4>
   15d78:	ldrb	r0, [sp, #56]	; 0x38
   15d7c:	ldr	r6, [sp, #4]
   15d80:	cmp	r0, #0
   15d84:	beq	15d94 <__assert_fail@plt+0x40f8>
   15d88:	ldr	r0, [sp, #60]	; 0x3c
   15d8c:	cmp	r0, #0
   15d90:	beq	15ec4 <__assert_fail@plt+0x4228>
   15d94:	add	r8, r7, #2
   15d98:	add	r0, sp, #88	; 0x58
   15d9c:	bl	17040 <__assert_fail@plt+0x53a4>
   15da0:	ldr	r0, [sp, #116]	; 0x74
   15da4:	ldrb	r1, [sp, #112]	; 0x70
   15da8:	cmp	r0, #0
   15dac:	bne	15db8 <__assert_fail@plt+0x411c>
   15db0:	cmp	r1, #0
   15db4:	bne	15eb4 <__assert_fail@plt+0x4218>
   15db8:	cmp	r1, #0
   15dbc:	ldrbne	r1, [sp, #56]	; 0x38
   15dc0:	cmpne	r1, #0
   15dc4:	bne	15e00 <__assert_fail@plt+0x4164>
   15dc8:	ldr	r4, [sp, #108]	; 0x6c
   15dcc:	ldr	r0, [sp, #52]	; 0x34
   15dd0:	cmp	r4, r0
   15dd4:	bne	15e70 <__assert_fail@plt+0x41d4>
   15dd8:	ldr	sl, [sp, #48]	; 0x30
   15ddc:	ldr	r7, [sp, #104]	; 0x68
   15de0:	mov	r2, r4
   15de4:	mov	r0, r7
   15de8:	mov	r1, sl
   15dec:	bl	11a80 <bcmp@plt>
   15df0:	cmp	r0, #0
   15df4:	mov	r0, r4
   15df8:	beq	15e28 <__assert_fail@plt+0x418c>
   15dfc:	b	15e70 <__assert_fail@plt+0x41d4>
   15e00:	bl	11900 <towlower@plt>
   15e04:	mov	r4, r0
   15e08:	ldr	r0, [sp, #60]	; 0x3c
   15e0c:	bl	11900 <towlower@plt>
   15e10:	cmp	r4, r0
   15e14:	bne	15e70 <__assert_fail@plt+0x41d4>
   15e18:	ldr	sl, [sp, #48]	; 0x30
   15e1c:	ldr	r4, [sp, #52]	; 0x34
   15e20:	ldr	r7, [sp, #104]	; 0x68
   15e24:	ldr	r0, [sp, #108]	; 0x6c
   15e28:	mov	r1, #0
   15e2c:	add	r0, r7, r0
   15e30:	mov	r9, #0
   15e34:	strb	r1, [sp, #100]	; 0x64
   15e38:	str	r0, [sp, #104]	; 0x68
   15e3c:	add	r0, sl, r4
   15e40:	strb	r1, [sp, #44]	; 0x2c
   15e44:	str	r0, [sp, #48]	; 0x30
   15e48:	add	r0, sp, #32
   15e4c:	bl	17040 <__assert_fail@plt+0x53a4>
   15e50:	ldrb	r0, [sp, #56]	; 0x38
   15e54:	add	r8, r8, #1
   15e58:	cmp	r0, #0
   15e5c:	beq	15d98 <__assert_fail@plt+0x40fc>
   15e60:	ldr	r0, [sp, #60]	; 0x3c
   15e64:	cmp	r0, #0
   15e68:	bne	15d98 <__assert_fail@plt+0x40fc>
   15e6c:	b	15ec4 <__assert_fail@plt+0x4228>
   15e70:	ldr	sl, [sp, #24]
   15e74:	mov	r4, #0
   15e78:	add	r6, r6, #1
   15e7c:	strb	r4, [sp, #196]	; 0xc4
   15e80:	ldr	r0, [sp, #200]	; 0xc8
   15e84:	ldr	r1, [sp, #204]	; 0xcc
   15e88:	add	r0, r0, r1
   15e8c:	str	r0, [sp, #200]	; 0xc8
   15e90:	add	r0, sp, #184	; 0xb8
   15e94:	bl	17040 <__assert_fail@plt+0x53a4>
   15e98:	ldrb	r0, [sp, #208]	; 0xd0
   15e9c:	cmp	r0, #0
   15ea0:	beq	15b74 <__assert_fail@plt+0x3ed8>
   15ea4:	ldr	r0, [sp, #212]	; 0xd4
   15ea8:	cmp	r0, #0
   15eac:	bne	15b74 <__assert_fail@plt+0x3ed8>
   15eb0:	b	15ec8 <__assert_fail@plt+0x422c>
   15eb4:	mov	r4, #0
   15eb8:	b	15ec8 <__assert_fail@plt+0x422c>
   15ebc:	mov	r4, sl
   15ec0:	b	15ec8 <__assert_fail@plt+0x422c>
   15ec4:	ldr	r4, [sp, #200]	; 0xc8
   15ec8:	mov	r0, r4
   15ecc:	sub	sp, fp, #28
   15ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ed4:	ldr	r4, [sp, #88]	; 0x58
   15ed8:	b	15ec8 <__assert_fail@plt+0x422c>
   15edc:	ldr	r4, [fp, #-88]	; 0xffffffa8
   15ee0:	b	15ec8 <__assert_fail@plt+0x422c>
   15ee4:	bl	11c60 <abort@plt>
   15ee8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15eec:	add	fp, sp, #28
   15ef0:	sub	sp, sp, #180	; 0xb4
   15ef4:	mov	r7, r0
   15ef8:	mov	r0, r1
   15efc:	mov	sl, r2
   15f00:	mov	r4, r1
   15f04:	bl	16554 <__assert_fail@plt+0x48b8>
   15f08:	mov	r6, r0
   15f0c:	movw	r0, #47662	; 0xba2e
   15f10:	mov	r5, #0
   15f14:	movt	r0, #744	; 0x2e8
   15f18:	cmp	r6, r0
   15f1c:	bhi	1633c <__assert_fail@plt+0x46a0>
   15f20:	mov	r0, #44	; 0x2c
   15f24:	mul	r0, r6, r0
   15f28:	cmp	r0, #4016	; 0xfb0
   15f2c:	bhi	15f4c <__assert_fail@plt+0x42b0>
   15f30:	add	r0, r0, #22
   15f34:	bic	r0, r0, #7
   15f38:	sub	r0, sp, r0
   15f3c:	add	r1, r0, #15
   15f40:	bic	r8, r1, #15
   15f44:	mov	sp, r0
   15f48:	b	15f54 <__assert_fail@plt+0x42b8>
   15f4c:	bl	28504 <__assert_fail@plt+0x16868>
   15f50:	mov	r8, r0
   15f54:	cmp	r8, #0
   15f58:	beq	1633c <__assert_fail@plt+0x46a0>
   15f5c:	mov	r9, #0
   15f60:	str	r7, [fp, #-196]	; 0xffffff3c
   15f64:	str	r9, [fp, #-80]	; 0xffffffb0
   15f68:	str	r9, [fp, #-84]	; 0xffffffac
   15f6c:	strb	r9, [fp, #-76]	; 0xffffffb4
   15f70:	strb	r9, [fp, #-88]	; 0xffffffa8
   15f74:	str	r4, [fp, #-72]	; 0xffffffb8
   15f78:	sub	r4, fp, #88	; 0x58
   15f7c:	mov	r0, r4
   15f80:	bl	17040 <__assert_fail@plt+0x53a4>
   15f84:	add	r0, r6, r6, lsl #2
   15f88:	add	r3, r8, r0, lsl #3
   15f8c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   15f90:	str	r3, [fp, #-188]	; 0xffffff44
   15f94:	cmp	r0, #0
   15f98:	beq	15fa8 <__assert_fail@plt+0x430c>
   15f9c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15fa0:	cmp	r0, #0
   15fa4:	beq	16038 <__assert_fail@plt+0x439c>
   15fa8:	add	r7, r8, #16
   15fac:	add	r5, r4, #32
   15fb0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15fb4:	cmp	r0, r5
   15fb8:	bne	15fd0 <__assert_fail@plt+0x4334>
   15fbc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15fc0:	mov	r0, r7
   15fc4:	mov	r1, r5
   15fc8:	bl	118dc <memcpy@plt>
   15fcc:	mov	r0, r7
   15fd0:	str	r0, [r7, #-16]
   15fd4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15fd8:	str	r0, [r7, #-12]
   15fdc:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   15fe0:	cmp	r0, #0
   15fe4:	strb	r0, [r7, #-8]
   15fe8:	beq	15ffc <__assert_fail@plt+0x4360>
   15fec:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15ff0:	str	r0, [r7, #-4]
   15ff4:	bl	11900 <towlower@plt>
   15ff8:	str	r0, [r7, #-4]
   15ffc:	strb	r9, [fp, #-76]	; 0xffffffb4
   16000:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16004:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16008:	add	r0, r0, r1
   1600c:	str	r0, [fp, #-72]	; 0xffffffb8
   16010:	mov	r0, r4
   16014:	bl	17040 <__assert_fail@plt+0x53a4>
   16018:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   1601c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16020:	ldr	r3, [fp, #-188]	; 0xffffff44
   16024:	add	r7, r7, #40	; 0x28
   16028:	cmp	r1, #0
   1602c:	beq	15fb0 <__assert_fail@plt+0x4314>
   16030:	cmp	r0, #0
   16034:	bne	15fb0 <__assert_fail@plt+0x4314>
   16038:	mov	r0, #1
   1603c:	cmp	r6, #3
   16040:	str	sl, [fp, #-204]	; 0xffffff34
   16044:	str	r6, [fp, #-192]	; 0xffffff40
   16048:	str	r0, [r3, #4]
   1604c:	bcc	1610c <__assert_fail@plt+0x4470>
   16050:	mov	r4, #2
   16054:	mov	r5, #0
   16058:	add	r0, r4, r4, lsl #2
   1605c:	add	r0, r8, r0, lsl #3
   16060:	ldrb	sl, [r0, #-32]	; 0xffffffe0
   16064:	sub	r9, r0, #40	; 0x28
   16068:	sub	r6, r0, #36	; 0x24
   1606c:	sub	r7, r0, #28
   16070:	cmp	sl, #0
   16074:	beq	160a0 <__assert_fail@plt+0x4404>
   16078:	add	r0, r5, r5, lsl #2
   1607c:	add	r0, r8, r0, lsl #3
   16080:	ldrb	r1, [r0, #8]
   16084:	cmp	r1, #0
   16088:	beq	160a0 <__assert_fail@plt+0x4404>
   1608c:	ldr	r0, [r0, #12]
   16090:	ldr	r1, [r7]
   16094:	cmp	r1, r0
   16098:	bne	160d0 <__assert_fail@plt+0x4434>
   1609c:	b	160f0 <__assert_fail@plt+0x4454>
   160a0:	add	r0, r5, r5, lsl #2
   160a4:	ldr	r2, [r6]
   160a8:	add	r1, r8, r0, lsl #3
   160ac:	ldr	r1, [r1, #4]
   160b0:	cmp	r2, r1
   160b4:	bne	160d0 <__assert_fail@plt+0x4434>
   160b8:	ldr	r1, [r8, r0, lsl #3]
   160bc:	ldr	r0, [r9]
   160c0:	bl	11a80 <bcmp@plt>
   160c4:	ldr	r3, [fp, #-188]	; 0xffffff44
   160c8:	cmp	r0, #0
   160cc:	beq	160f0 <__assert_fail@plt+0x4454>
   160d0:	cmp	r5, #0
   160d4:	beq	160e4 <__assert_fail@plt+0x4448>
   160d8:	ldr	r0, [r3, r5, lsl #2]
   160dc:	sub	r5, r5, r0
   160e0:	b	16070 <__assert_fail@plt+0x43d4>
   160e4:	mov	r5, #0
   160e8:	mov	r0, r4
   160ec:	b	160f8 <__assert_fail@plt+0x445c>
   160f0:	add	r5, r5, #1
   160f4:	sub	r0, r4, r5
   160f8:	str	r0, [r3, r4, lsl #2]
   160fc:	ldr	r0, [fp, #-192]	; 0xffffff40
   16100:	add	r4, r4, #1
   16104:	cmp	r4, r0
   16108:	bne	16058 <__assert_fail@plt+0x43bc>
   1610c:	ldr	r0, [fp, #-204]	; 0xffffff34
   16110:	mov	r1, #0
   16114:	str	r1, [r0]
   16118:	ldr	r0, [fp, #-196]	; 0xffffff3c
   1611c:	str	r1, [fp, #-80]	; 0xffffffb0
   16120:	str	r1, [fp, #-84]	; 0xffffffac
   16124:	strb	r1, [fp, #-76]	; 0xffffffb4
   16128:	strb	r1, [fp, #-88]	; 0xffffffa8
   1612c:	str	r1, [fp, #-136]	; 0xffffff78
   16130:	str	r1, [fp, #-140]	; 0xffffff74
   16134:	str	r0, [fp, #-128]	; 0xffffff80
   16138:	str	r0, [fp, #-72]	; 0xffffffb8
   1613c:	sub	r0, fp, #144	; 0x90
   16140:	strb	r1, [fp, #-132]	; 0xffffff7c
   16144:	strb	r1, [fp, #-144]	; 0xffffff70
   16148:	bl	17040 <__assert_fail@plt+0x53a4>
   1614c:	ldrb	r9, [fp, #-120]	; 0xffffff88
   16150:	ldr	r6, [fp, #-116]	; 0xffffff8c
   16154:	cmp	r9, #0
   16158:	beq	16164 <__assert_fail@plt+0x44c8>
   1615c:	cmp	r6, #0
   16160:	beq	16330 <__assert_fail@plt+0x4694>
   16164:	sub	r0, fp, #184	; 0xb8
   16168:	sub	r4, fp, #88	; 0x58
   1616c:	mov	r7, #0
   16170:	add	r0, r0, #16
   16174:	str	r0, [fp, #-200]	; 0xffffff38
   16178:	sub	r0, fp, #144	; 0x90
   1617c:	add	r0, r0, #32
   16180:	str	r0, [fp, #-196]	; 0xffffff3c
   16184:	ldr	sl, [fp, #-128]	; 0xffffff80
   16188:	ldr	r1, [fp, #-196]	; 0xffffff3c
   1618c:	ldr	r5, [fp, #-124]	; 0xffffff84
   16190:	cmp	sl, r1
   16194:	bne	161ac <__assert_fail@plt+0x4510>
   16198:	ldr	sl, [fp, #-200]	; 0xffffff38
   1619c:	ldr	r1, [fp, #-196]	; 0xffffff3c
   161a0:	mov	r2, r5
   161a4:	mov	r0, sl
   161a8:	bl	118dc <memcpy@plt>
   161ac:	tst	r9, #255	; 0xff
   161b0:	strb	r9, [fp, #-176]	; 0xffffff50
   161b4:	str	r5, [fp, #-180]	; 0xffffff4c
   161b8:	str	sl, [fp, #-184]	; 0xffffff48
   161bc:	beq	161ec <__assert_fail@plt+0x4550>
   161c0:	mov	r0, r6
   161c4:	str	r6, [fp, #-172]	; 0xffffff54
   161c8:	bl	11900 <towlower@plt>
   161cc:	str	r0, [fp, #-172]	; 0xffffff54
   161d0:	add	r0, r7, r7, lsl #2
   161d4:	add	r0, r8, r0, lsl #3
   161d8:	ldrb	r1, [r0, #8]
   161dc:	cmp	r1, #0
   161e0:	ldrbne	r1, [fp, #-176]	; 0xffffff50
   161e4:	cmpne	r1, #0
   161e8:	bne	162c8 <__assert_fail@plt+0x462c>
   161ec:	add	r0, r7, r7, lsl #2
   161f0:	add	r1, r8, r0, lsl #3
   161f4:	ldr	r2, [r1, #4]
   161f8:	ldr	r1, [fp, #-180]	; 0xffffff4c
   161fc:	cmp	r2, r1
   16200:	bne	16218 <__assert_fail@plt+0x457c>
   16204:	ldr	r0, [r8, r0, lsl #3]
   16208:	ldr	r1, [fp, #-184]	; 0xffffff48
   1620c:	bl	11a80 <bcmp@plt>
   16210:	cmp	r0, #0
   16214:	beq	162d8 <__assert_fail@plt+0x463c>
   16218:	cmp	r7, #0
   1621c:	mov	r6, #0
   16220:	beq	16278 <__assert_fail@plt+0x45dc>
   16224:	ldr	r0, [fp, #-188]	; 0xffffff44
   16228:	ldr	r5, [r0, r7, lsl #2]
   1622c:	sub	r7, r7, r5
   16230:	cmp	r5, #0
   16234:	beq	16300 <__assert_fail@plt+0x4664>
   16238:	mov	r0, r4
   1623c:	bl	17040 <__assert_fail@plt+0x53a4>
   16240:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16244:	cmp	r0, #0
   16248:	beq	16258 <__assert_fail@plt+0x45bc>
   1624c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16250:	cmp	r0, #0
   16254:	beq	16348 <__assert_fail@plt+0x46ac>
   16258:	strb	r6, [fp, #-76]	; 0xffffffb4
   1625c:	subs	r5, r5, #1
   16260:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16264:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16268:	add	r0, r0, r1
   1626c:	str	r0, [fp, #-72]	; 0xffffffb8
   16270:	bne	16238 <__assert_fail@plt+0x459c>
   16274:	b	16300 <__assert_fail@plt+0x4664>
   16278:	mov	r0, r4
   1627c:	bl	17040 <__assert_fail@plt+0x53a4>
   16280:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16284:	cmp	r0, #0
   16288:	beq	16298 <__assert_fail@plt+0x45fc>
   1628c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16290:	cmp	r0, #0
   16294:	beq	16348 <__assert_fail@plt+0x46ac>
   16298:	mov	r7, #0
   1629c:	strb	r7, [fp, #-76]	; 0xffffffb4
   162a0:	strb	r7, [fp, #-132]	; 0xffffff7c
   162a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   162a8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   162ac:	add	r0, r0, r1
   162b0:	ldr	r1, [fp, #-124]	; 0xffffff84
   162b4:	str	r0, [fp, #-72]	; 0xffffffb8
   162b8:	ldr	r0, [fp, #-128]	; 0xffffff80
   162bc:	add	r0, r0, r1
   162c0:	str	r0, [fp, #-128]	; 0xffffff80
   162c4:	b	16300 <__assert_fail@plt+0x4664>
   162c8:	ldr	r0, [r0, #12]
   162cc:	ldr	r1, [fp, #-172]	; 0xffffff54
   162d0:	cmp	r0, r1
   162d4:	bne	16218 <__assert_fail@plt+0x457c>
   162d8:	mov	r0, #0
   162dc:	add	r7, r7, #1
   162e0:	strb	r0, [fp, #-132]	; 0xffffff7c
   162e4:	ldr	r0, [fp, #-128]	; 0xffffff80
   162e8:	ldr	r1, [fp, #-124]	; 0xffffff84
   162ec:	add	r0, r0, r1
   162f0:	str	r0, [fp, #-128]	; 0xffffff80
   162f4:	ldr	r0, [fp, #-192]	; 0xffffff40
   162f8:	cmp	r7, r0
   162fc:	beq	16324 <__assert_fail@plt+0x4688>
   16300:	sub	r0, fp, #144	; 0x90
   16304:	bl	17040 <__assert_fail@plt+0x53a4>
   16308:	ldrb	r9, [fp, #-120]	; 0xffffff88
   1630c:	ldr	r6, [fp, #-116]	; 0xffffff8c
   16310:	cmp	r9, #0
   16314:	beq	16184 <__assert_fail@plt+0x44e8>
   16318:	cmp	r6, #0
   1631c:	bne	16184 <__assert_fail@plt+0x44e8>
   16320:	b	16330 <__assert_fail@plt+0x4694>
   16324:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16328:	ldr	r1, [fp, #-204]	; 0xffffff34
   1632c:	str	r0, [r1]
   16330:	mov	r0, r8
   16334:	bl	2856c <__assert_fail@plt+0x168d0>
   16338:	mov	r5, #1
   1633c:	mov	r0, r5
   16340:	sub	sp, fp, #28
   16344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16348:	bl	11c60 <abort@plt>
   1634c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16350:	add	fp, sp, #28
   16354:	sub	sp, sp, #28
   16358:	mov	r4, #0
   1635c:	cmn	r2, #-536870911	; 0xe0000001
   16360:	bhi	16548 <__assert_fail@plt+0x48ac>
   16364:	str	r0, [fp, #-48]	; 0xffffffd0
   16368:	lsl	r0, r2, #2
   1636c:	mov	r5, r3
   16370:	mov	r8, r2
   16374:	mov	r9, r1
   16378:	cmp	r0, #4016	; 0xfb0
   1637c:	bhi	1639c <__assert_fail@plt+0x4700>
   16380:	add	r0, r0, #22
   16384:	bic	r0, r0, #7
   16388:	sub	r0, sp, r0
   1638c:	add	r1, r0, #15
   16390:	bic	sl, r1, #15
   16394:	mov	sp, r0
   16398:	b	163a4 <__assert_fail@plt+0x4708>
   1639c:	bl	28504 <__assert_fail@plt+0x16868>
   163a0:	mov	sl, r0
   163a4:	cmp	sl, #0
   163a8:	beq	16548 <__assert_fail@plt+0x48ac>
   163ac:	mov	r0, #1
   163b0:	cmp	r8, #3
   163b4:	str	r5, [fp, #-52]	; 0xffffffcc
   163b8:	str	r0, [sl, #4]
   163bc:	bcc	1645c <__assert_fail@plt+0x47c0>
   163c0:	bl	11a5c <__ctype_b_loc@plt>
   163c4:	ldr	r5, [r0]
   163c8:	mov	r4, #0
   163cc:	mov	r7, #2
   163d0:	str	r8, [fp, #-36]	; 0xffffffdc
   163d4:	add	r0, r7, r9
   163d8:	ldrb	r6, [r0, #-1]
   163dc:	add	r0, r5, r6, lsl #1
   163e0:	ldrb	r0, [r0, #1]
   163e4:	tst	r0, #1
   163e8:	beq	163f8 <__assert_fail@plt+0x475c>
   163ec:	bl	11a38 <__ctype_tolower_loc@plt>
   163f0:	ldr	r0, [r0]
   163f4:	ldrb	r6, [r0, r6, lsl #2]
   163f8:	ldrb	r8, [r9, r4]
   163fc:	add	r0, r5, r8, lsl #1
   16400:	ldrb	r0, [r0, #1]
   16404:	tst	r0, #1
   16408:	beq	16418 <__assert_fail@plt+0x477c>
   1640c:	bl	11a38 <__ctype_tolower_loc@plt>
   16410:	ldr	r0, [r0]
   16414:	ldr	r8, [r0, r8, lsl #2]
   16418:	cmp	r6, r8
   1641c:	beq	16434 <__assert_fail@plt+0x4798>
   16420:	cmp	r4, #0
   16424:	beq	16440 <__assert_fail@plt+0x47a4>
   16428:	ldr	r0, [sl, r4, lsl #2]
   1642c:	sub	r4, r4, r0
   16430:	b	163f8 <__assert_fail@plt+0x475c>
   16434:	add	r4, r4, #1
   16438:	sub	r0, r7, r4
   1643c:	b	16448 <__assert_fail@plt+0x47ac>
   16440:	mov	r4, #0
   16444:	mov	r0, r7
   16448:	ldr	r8, [fp, #-36]	; 0xffffffdc
   1644c:	str	r0, [sl, r7, lsl #2]
   16450:	add	r7, r7, #1
   16454:	cmp	r7, r8
   16458:	bne	163d4 <__assert_fail@plt+0x4738>
   1645c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16460:	ldr	r7, [fp, #-48]	; 0xffffffd0
   16464:	mov	r5, #0
   16468:	str	r5, [r0]
   1646c:	ldrb	r6, [r7]
   16470:	cmp	r6, #0
   16474:	beq	1653c <__assert_fail@plt+0x48a0>
   16478:	bl	11a5c <__ctype_b_loc@plt>
   1647c:	ldr	r1, [r0]
   16480:	str	r7, [fp, #-40]	; 0xffffffd8
   16484:	str	r1, [fp, #-44]	; 0xffffffd4
   16488:	ldrb	r4, [r9, r5]
   1648c:	add	r0, r1, r4, lsl #1
   16490:	ldrb	r0, [r0, #1]
   16494:	tst	r0, #1
   16498:	beq	164ac <__assert_fail@plt+0x4810>
   1649c:	bl	11a38 <__ctype_tolower_loc@plt>
   164a0:	ldr	r0, [r0]
   164a4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   164a8:	ldr	r4, [r0, r4, lsl #2]
   164ac:	uxtb	r6, r6
   164b0:	add	r0, r1, r6, lsl #1
   164b4:	ldrb	r0, [r0, #1]
   164b8:	tst	r0, #1
   164bc:	beq	164d0 <__assert_fail@plt+0x4834>
   164c0:	bl	11a38 <__ctype_tolower_loc@plt>
   164c4:	ldr	r0, [r0]
   164c8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   164cc:	ldr	r6, [r0, r6, lsl #2]
   164d0:	cmp	r4, r6
   164d4:	bne	164ec <__assert_fail@plt+0x4850>
   164d8:	add	r5, r5, #1
   164dc:	cmp	r5, r8
   164e0:	beq	16530 <__assert_fail@plt+0x4894>
   164e4:	add	r7, r7, #1
   164e8:	b	16520 <__assert_fail@plt+0x4884>
   164ec:	cmp	r5, #0
   164f0:	beq	1650c <__assert_fail@plt+0x4870>
   164f4:	ldr	r0, [sl, r5, lsl #2]
   164f8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   164fc:	add	r2, r2, r0
   16500:	sub	r5, r5, r0
   16504:	str	r2, [fp, #-40]	; 0xffffffd8
   16508:	b	16520 <__assert_fail@plt+0x4884>
   1650c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16510:	add	r7, r7, #1
   16514:	mov	r5, #0
   16518:	add	r0, r0, #1
   1651c:	str	r0, [fp, #-40]	; 0xffffffd8
   16520:	ldrb	r6, [r7]
   16524:	cmp	r6, #0
   16528:	bne	16488 <__assert_fail@plt+0x47ec>
   1652c:	b	1653c <__assert_fail@plt+0x48a0>
   16530:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16534:	ldr	r1, [fp, #-40]	; 0xffffffd8
   16538:	str	r1, [r0]
   1653c:	mov	r0, sl
   16540:	bl	2856c <__assert_fail@plt+0x168d0>
   16544:	mov	r4, #1
   16548:	mov	r0, r4
   1654c:	sub	sp, fp, #28
   16550:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16554:	push	{r4, r5, r6, sl, fp, lr}
   16558:	add	fp, sp, #16
   1655c:	sub	sp, sp, #56	; 0x38
   16560:	mov	r5, r0
   16564:	bl	11990 <__ctype_get_mb_cur_max@plt>
   16568:	cmp	r0, #2
   1656c:	bcc	165f8 <__assert_fail@plt+0x495c>
   16570:	mov	r4, #0
   16574:	mov	r0, sp
   16578:	str	r4, [sp, #8]
   1657c:	str	r4, [sp, #4]
   16580:	strb	r4, [sp, #12]
   16584:	strb	r4, [sp]
   16588:	str	r5, [sp, #16]
   1658c:	bl	17040 <__assert_fail@plt+0x53a4>
   16590:	ldrb	r0, [sp, #24]
   16594:	cmp	r0, #0
   16598:	beq	165a8 <__assert_fail@plt+0x490c>
   1659c:	ldr	r0, [sp, #28]
   165a0:	cmp	r0, #0
   165a4:	beq	165ec <__assert_fail@plt+0x4950>
   165a8:	mov	r6, #0
   165ac:	mov	r5, sp
   165b0:	mov	r4, #0
   165b4:	strb	r6, [sp, #12]
   165b8:	ldr	r0, [sp, #16]
   165bc:	ldr	r1, [sp, #20]
   165c0:	add	r0, r0, r1
   165c4:	str	r0, [sp, #16]
   165c8:	mov	r0, r5
   165cc:	bl	17040 <__assert_fail@plt+0x53a4>
   165d0:	ldrb	r1, [sp, #24]
   165d4:	ldr	r0, [sp, #28]
   165d8:	add	r4, r4, #1
   165dc:	cmp	r1, #0
   165e0:	beq	165b4 <__assert_fail@plt+0x4918>
   165e4:	cmp	r0, #0
   165e8:	bne	165b4 <__assert_fail@plt+0x4918>
   165ec:	mov	r0, r4
   165f0:	sub	sp, fp, #16
   165f4:	pop	{r4, r5, r6, sl, fp, pc}
   165f8:	mov	r0, r5
   165fc:	sub	sp, fp, #16
   16600:	pop	{r4, r5, r6, sl, fp, lr}
   16604:	b	11a98 <strlen@plt>
   16608:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1660c:	add	fp, sp, #28
   16610:	sub	sp, sp, #308	; 0x134
   16614:	mov	r7, r1
   16618:	mov	sl, r0
   1661c:	bl	11990 <__ctype_get_mb_cur_max@plt>
   16620:	cmp	r0, #2
   16624:	bcc	169b0 <__assert_fail@plt+0x4d14>
   16628:	mov	r4, #0
   1662c:	sub	r0, fp, #88	; 0x58
   16630:	str	r4, [fp, #-80]	; 0xffffffb0
   16634:	str	r4, [fp, #-84]	; 0xffffffac
   16638:	strb	r4, [fp, #-76]	; 0xffffffb4
   1663c:	strb	r4, [fp, #-88]	; 0xffffffa8
   16640:	str	r7, [fp, #-72]	; 0xffffffb8
   16644:	bl	17040 <__assert_fail@plt+0x53a4>
   16648:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1664c:	cmp	r0, #0
   16650:	beq	16660 <__assert_fail@plt+0x49c4>
   16654:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16658:	cmp	r0, #0
   1665c:	beq	16acc <__assert_fail@plt+0x4e30>
   16660:	add	r0, sp, #136	; 0x88
   16664:	str	r4, [fp, #-136]	; 0xffffff78
   16668:	str	r4, [fp, #-140]	; 0xffffff74
   1666c:	str	r7, [fp, #-128]	; 0xffffff80
   16670:	strb	r4, [fp, #-132]	; 0xffffff7c
   16674:	str	r7, [sp, #12]
   16678:	strb	r4, [fp, #-144]	; 0xffffff70
   1667c:	str	r4, [sp, #144]	; 0x90
   16680:	str	r4, [sp, #140]	; 0x8c
   16684:	str	sl, [sp, #152]	; 0x98
   16688:	strb	r4, [sp, #148]	; 0x94
   1668c:	strb	r4, [sp, #136]	; 0x88
   16690:	bl	17040 <__assert_fail@plt+0x53a4>
   16694:	ldrb	r0, [sp, #160]	; 0xa0
   16698:	cmp	r0, #0
   1669c:	beq	166ac <__assert_fail@plt+0x4a10>
   166a0:	ldr	r0, [sp, #164]	; 0xa4
   166a4:	cmp	r0, #0
   166a8:	beq	16ad8 <__assert_fail@plt+0x4e3c>
   166ac:	add	r0, sp, #24
   166b0:	mov	r5, #0
   166b4:	sub	r7, fp, #144	; 0x90
   166b8:	mov	r1, #0
   166bc:	mov	r6, #0
   166c0:	mov	r9, #0
   166c4:	add	r0, r0, #4
   166c8:	str	r0, [sp, #8]
   166cc:	mov	r0, #1
   166d0:	str	r0, [sp, #16]
   166d4:	add	r0, r9, r9, lsl #2
   166d8:	mov	r8, r6
   166dc:	cmp	r6, r0
   166e0:	bcc	16790 <__assert_fail@plt+0x4af4>
   166e4:	ldr	r0, [sp, #16]
   166e8:	tst	r0, #1
   166ec:	beq	16790 <__assert_fail@plt+0x4af4>
   166f0:	cmp	r9, #10
   166f4:	bcc	16790 <__assert_fail@plt+0x4af4>
   166f8:	subs	r0, r8, r1
   166fc:	beq	16740 <__assert_fail@plt+0x4aa4>
   16700:	sub	r6, r1, r8
   16704:	mov	r0, r7
   16708:	bl	17040 <__assert_fail@plt+0x53a4>
   1670c:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16710:	cmp	r0, #0
   16714:	beq	16724 <__assert_fail@plt+0x4a88>
   16718:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1671c:	cmp	r0, #0
   16720:	beq	16740 <__assert_fail@plt+0x4aa4>
   16724:	strb	r5, [fp, #-132]	; 0xffffff7c
   16728:	adds	r6, r6, #1
   1672c:	ldr	r0, [fp, #-128]	; 0xffffff80
   16730:	ldr	r1, [fp, #-124]	; 0xffffff84
   16734:	add	r0, r0, r1
   16738:	str	r0, [fp, #-128]	; 0xffffff80
   1673c:	bcc	16704 <__assert_fail@plt+0x4a68>
   16740:	mov	r0, r7
   16744:	bl	17040 <__assert_fail@plt+0x53a4>
   16748:	ldrb	r0, [fp, #-120]	; 0xffffff88
   1674c:	cmp	r0, #0
   16750:	beq	1678c <__assert_fail@plt+0x4af0>
   16754:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16758:	mov	r1, r8
   1675c:	cmp	r0, #0
   16760:	bne	16790 <__assert_fail@plt+0x4af4>
   16764:	ldr	r1, [sp, #12]
   16768:	mov	r0, sl
   1676c:	add	r2, sp, #80	; 0x50
   16770:	bl	16b00 <__assert_fail@plt+0x4e64>
   16774:	mov	r1, #0
   16778:	cmp	r0, #0
   1677c:	str	r1, [sp, #16]
   16780:	mov	r1, r8
   16784:	beq	16790 <__assert_fail@plt+0x4af4>
   16788:	b	16af4 <__assert_fail@plt+0x4e58>
   1678c:	mov	r1, r8
   16790:	ldrb	r0, [sp, #160]	; 0xa0
   16794:	add	r6, r8, #1
   16798:	str	r1, [sp, #20]
   1679c:	cmp	r0, #0
   167a0:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   167a4:	cmpne	r0, #0
   167a8:	bne	167d4 <__assert_fail@plt+0x4b38>
   167ac:	ldr	r2, [sp, #156]	; 0x9c
   167b0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   167b4:	cmp	r2, r0
   167b8:	bne	1696c <__assert_fail@plt+0x4cd0>
   167bc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   167c0:	ldr	r0, [sp, #152]	; 0x98
   167c4:	bl	11a80 <bcmp@plt>
   167c8:	cmp	r0, #0
   167cc:	bne	1696c <__assert_fail@plt+0x4cd0>
   167d0:	b	167e4 <__assert_fail@plt+0x4b48>
   167d4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   167d8:	ldr	r1, [sp, #164]	; 0xa4
   167dc:	cmp	r1, r0
   167e0:	bne	1696c <__assert_fail@plt+0x4cd0>
   167e4:	str	r9, [sp, #4]
   167e8:	add	r1, sp, #136	; 0x88
   167ec:	add	r0, sp, #80	; 0x50
   167f0:	mov	ip, #0
   167f4:	ldm	r1!, {r2, r3, r5, r6}
   167f8:	stmia	r0!, {r2, r3, r5, r6}
   167fc:	ldm	r1!, {r2, r3, r4, r5, r6}
   16800:	stmia	r0!, {r2, r3, r4, r5, r6}
   16804:	ldm	r1, {r2, r3, r4, r5, r6}
   16808:	stm	r0, {r2, r3, r4, r5, r6}
   1680c:	strb	ip, [sp, #92]	; 0x5c
   16810:	mov	r4, #0
   16814:	ldr	r0, [sp, #12]
   16818:	ldr	r1, [sp, #100]	; 0x64
   1681c:	str	r0, [sp, #40]	; 0x28
   16820:	ldr	r0, [sp, #96]	; 0x60
   16824:	strb	ip, [sp, #24]
   16828:	add	r0, r0, r1
   1682c:	str	r0, [sp, #96]	; 0x60
   16830:	ldr	r0, [sp, #8]
   16834:	str	ip, [r0]
   16838:	str	ip, [r0, #4]
   1683c:	add	r0, sp, #24
   16840:	strb	ip, [sp, #36]	; 0x24
   16844:	bl	17040 <__assert_fail@plt+0x53a4>
   16848:	ldrb	r0, [sp, #48]	; 0x30
   1684c:	cmp	r0, #0
   16850:	beq	16860 <__assert_fail@plt+0x4bc4>
   16854:	ldr	r0, [sp, #52]	; 0x34
   16858:	cmp	r0, #0
   1685c:	beq	16afc <__assert_fail@plt+0x4e60>
   16860:	strb	r4, [sp, #36]	; 0x24
   16864:	ldr	r0, [sp, #40]	; 0x28
   16868:	ldr	r1, [sp, #44]	; 0x2c
   1686c:	add	r0, r0, r1
   16870:	str	r0, [sp, #40]	; 0x28
   16874:	add	r0, sp, #24
   16878:	bl	17040 <__assert_fail@plt+0x53a4>
   1687c:	ldrb	r0, [sp, #48]	; 0x30
   16880:	add	r5, sp, #80	; 0x50
   16884:	cmp	r0, #0
   16888:	beq	16898 <__assert_fail@plt+0x4bfc>
   1688c:	ldr	r0, [sp, #52]	; 0x34
   16890:	cmp	r0, #0
   16894:	beq	16ae4 <__assert_fail@plt+0x4e48>
   16898:	add	r6, r8, #2
   1689c:	mov	r0, r5
   168a0:	bl	17040 <__assert_fail@plt+0x53a4>
   168a4:	ldr	r0, [sp, #108]	; 0x6c
   168a8:	ldrb	r1, [sp, #104]	; 0x68
   168ac:	cmp	r0, #0
   168b0:	bne	168bc <__assert_fail@plt+0x4c20>
   168b4:	cmp	r1, #0
   168b8:	bne	16ad4 <__assert_fail@plt+0x4e38>
   168bc:	cmp	r1, #0
   168c0:	ldrbne	r1, [sp, #48]	; 0x30
   168c4:	cmpne	r1, #0
   168c8:	bne	16904 <__assert_fail@plt+0x4c68>
   168cc:	ldr	r4, [sp, #100]	; 0x64
   168d0:	ldr	r0, [sp, #44]	; 0x2c
   168d4:	cmp	r4, r0
   168d8:	bne	16964 <__assert_fail@plt+0x4cc8>
   168dc:	ldr	r8, [sp, #40]	; 0x28
   168e0:	ldr	r9, [sp, #96]	; 0x60
   168e4:	mov	r2, r4
   168e8:	mov	r0, r9
   168ec:	mov	r1, r8
   168f0:	bl	11a80 <bcmp@plt>
   168f4:	cmp	r0, #0
   168f8:	mov	r0, r4
   168fc:	beq	16920 <__assert_fail@plt+0x4c84>
   16900:	b	16964 <__assert_fail@plt+0x4cc8>
   16904:	ldr	r1, [sp, #52]	; 0x34
   16908:	cmp	r0, r1
   1690c:	bne	16964 <__assert_fail@plt+0x4cc8>
   16910:	ldr	r8, [sp, #40]	; 0x28
   16914:	ldr	r4, [sp, #44]	; 0x2c
   16918:	ldr	r9, [sp, #96]	; 0x60
   1691c:	ldr	r0, [sp, #100]	; 0x64
   16920:	mov	r1, #0
   16924:	add	r0, r9, r0
   16928:	strb	r1, [sp, #92]	; 0x5c
   1692c:	str	r0, [sp, #96]	; 0x60
   16930:	add	r0, r8, r4
   16934:	strb	r1, [sp, #36]	; 0x24
   16938:	str	r0, [sp, #40]	; 0x28
   1693c:	add	r0, sp, #24
   16940:	bl	17040 <__assert_fail@plt+0x53a4>
   16944:	ldrb	r0, [sp, #48]	; 0x30
   16948:	add	r6, r6, #1
   1694c:	cmp	r0, #0
   16950:	beq	1689c <__assert_fail@plt+0x4c00>
   16954:	ldr	r0, [sp, #52]	; 0x34
   16958:	cmp	r0, #0
   1695c:	bne	1689c <__assert_fail@plt+0x4c00>
   16960:	b	16ae4 <__assert_fail@plt+0x4e48>
   16964:	ldr	r9, [sp, #4]
   16968:	mov	r5, #0
   1696c:	mov	r4, #0
   16970:	add	r9, r9, #1
   16974:	strb	r4, [sp, #148]	; 0x94
   16978:	ldr	r0, [sp, #152]	; 0x98
   1697c:	ldr	r1, [sp, #156]	; 0x9c
   16980:	add	r0, r0, r1
   16984:	str	r0, [sp, #152]	; 0x98
   16988:	add	r0, sp, #136	; 0x88
   1698c:	bl	17040 <__assert_fail@plt+0x53a4>
   16990:	ldrb	r0, [sp, #160]	; 0xa0
   16994:	ldr	r1, [sp, #20]
   16998:	cmp	r0, #0
   1699c:	beq	166d4 <__assert_fail@plt+0x4a38>
   169a0:	ldr	r0, [sp, #164]	; 0xa4
   169a4:	cmp	r0, #0
   169a8:	bne	166d4 <__assert_fail@plt+0x4a38>
   169ac:	b	16ad8 <__assert_fail@plt+0x4e3c>
   169b0:	ldrb	r5, [r7]
   169b4:	cmp	r5, #0
   169b8:	beq	16acc <__assert_fail@plt+0x4e30>
   169bc:	ldrb	r9, [sl]
   169c0:	cmp	r9, #0
   169c4:	beq	16ad4 <__assert_fail@plt+0x4e38>
   169c8:	mov	lr, #1
   169cc:	mov	ip, #0
   169d0:	mov	r3, r7
   169d4:	mov	r6, #0
   169d8:	mov	r8, #0
   169dc:	add	r0, r8, r8, lsl #2
   169e0:	cmp	r6, r0
   169e4:	bcc	16a74 <__assert_fail@plt+0x4dd8>
   169e8:	tst	lr, #1
   169ec:	beq	16a74 <__assert_fail@plt+0x4dd8>
   169f0:	cmp	r8, #10
   169f4:	bcc	16a74 <__assert_fail@plt+0x4dd8>
   169f8:	cmp	r3, #0
   169fc:	beq	16a3c <__assert_fail@plt+0x4da0>
   16a00:	sub	r1, r6, ip
   16a04:	mov	r0, r3
   16a08:	str	r6, [sp, #20]
   16a0c:	mov	r6, r5
   16a10:	mov	r4, lr
   16a14:	mov	r5, r3
   16a18:	bl	11b70 <strnlen@plt>
   16a1c:	mov	r3, r5
   16a20:	mov	r5, r6
   16a24:	ldr	r6, [sp, #20]
   16a28:	mov	lr, r4
   16a2c:	ldrb	r0, [r3, r0]!
   16a30:	mov	ip, r6
   16a34:	cmp	r0, #0
   16a38:	bne	16a74 <__assert_fail@plt+0x4dd8>
   16a3c:	mov	r0, r7
   16a40:	mov	r4, ip
   16a44:	bl	11a98 <strlen@plt>
   16a48:	mov	r2, r0
   16a4c:	mov	r0, sl
   16a50:	mov	r1, r7
   16a54:	sub	r3, fp, #88	; 0x58
   16a58:	bl	16ef8 <__assert_fail@plt+0x525c>
   16a5c:	cmp	r0, #0
   16a60:	bne	16aec <__assert_fail@plt+0x4e50>
   16a64:	ldrb	r9, [sl]
   16a68:	mov	lr, #0
   16a6c:	mov	r3, #0
   16a70:	mov	ip, r4
   16a74:	uxtb	r0, r9
   16a78:	cmp	r0, r5
   16a7c:	bne	16ab0 <__assert_fail@plt+0x4e14>
   16a80:	mov	r0, #1
   16a84:	ldrb	r1, [r7, r0]
   16a88:	cmp	r1, #0
   16a8c:	beq	16acc <__assert_fail@plt+0x4e30>
   16a90:	ldrb	r2, [sl, r0]
   16a94:	cmp	r2, #0
   16a98:	beq	16ad4 <__assert_fail@plt+0x4e38>
   16a9c:	add	r0, r0, #1
   16aa0:	cmp	r2, r1
   16aa4:	beq	16a84 <__assert_fail@plt+0x4de8>
   16aa8:	add	r6, r6, r0
   16aac:	b	16ab4 <__assert_fail@plt+0x4e18>
   16ab0:	add	r6, r6, #1
   16ab4:	ldrb	r9, [sl, #1]!
   16ab8:	add	r8, r8, #1
   16abc:	mov	r4, #0
   16ac0:	cmp	r9, #0
   16ac4:	bne	169dc <__assert_fail@plt+0x4d40>
   16ac8:	b	16ad8 <__assert_fail@plt+0x4e3c>
   16acc:	mov	r4, sl
   16ad0:	b	16ad8 <__assert_fail@plt+0x4e3c>
   16ad4:	mov	r4, #0
   16ad8:	mov	r0, r4
   16adc:	sub	sp, fp, #28
   16ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ae4:	ldr	r4, [sp, #152]	; 0x98
   16ae8:	b	16ad8 <__assert_fail@plt+0x4e3c>
   16aec:	ldr	r4, [fp, #-88]	; 0xffffffa8
   16af0:	b	16ad8 <__assert_fail@plt+0x4e3c>
   16af4:	ldr	r4, [sp, #80]	; 0x50
   16af8:	b	16ad8 <__assert_fail@plt+0x4e3c>
   16afc:	bl	11c60 <abort@plt>
   16b00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b04:	add	fp, sp, #28
   16b08:	sub	sp, sp, #132	; 0x84
   16b0c:	mov	r4, r0
   16b10:	mov	r0, r1
   16b14:	mov	r8, r2
   16b18:	mov	r7, r1
   16b1c:	bl	16554 <__assert_fail@plt+0x48b8>
   16b20:	mov	sl, r0
   16b24:	movw	r0, #47662	; 0xba2e
   16b28:	mov	r5, #0
   16b2c:	movt	r0, #744	; 0x2e8
   16b30:	cmp	sl, r0
   16b34:	bhi	16ee8 <__assert_fail@plt+0x524c>
   16b38:	mov	r0, #44	; 0x2c
   16b3c:	mul	r0, sl, r0
   16b40:	cmp	r0, #4016	; 0xfb0
   16b44:	bhi	16b64 <__assert_fail@plt+0x4ec8>
   16b48:	add	r0, r0, #22
   16b4c:	bic	r0, r0, #7
   16b50:	sub	r0, sp, r0
   16b54:	add	r1, r0, #15
   16b58:	bic	r9, r1, #15
   16b5c:	mov	sp, r0
   16b60:	b	16b6c <__assert_fail@plt+0x4ed0>
   16b64:	bl	28504 <__assert_fail@plt+0x16868>
   16b68:	mov	r9, r0
   16b6c:	cmp	r9, #0
   16b70:	beq	16ee8 <__assert_fail@plt+0x524c>
   16b74:	sub	r6, fp, #88	; 0x58
   16b78:	str	r4, [fp, #-160]	; 0xffffff60
   16b7c:	mov	r4, #0
   16b80:	mov	r0, r6
   16b84:	str	r4, [fp, #-80]	; 0xffffffb0
   16b88:	str	r4, [fp, #-84]	; 0xffffffac
   16b8c:	strb	r4, [fp, #-76]	; 0xffffffb4
   16b90:	strb	r4, [fp, #-88]	; 0xffffffa8
   16b94:	str	r7, [fp, #-72]	; 0xffffffb8
   16b98:	bl	17040 <__assert_fail@plt+0x53a4>
   16b9c:	add	r0, sl, sl, lsl #2
   16ba0:	add	r3, r9, r0, lsl #3
   16ba4:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16ba8:	str	r3, [fp, #-148]	; 0xffffff6c
   16bac:	cmp	r0, #0
   16bb0:	beq	16bc0 <__assert_fail@plt+0x4f24>
   16bb4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16bb8:	cmp	r0, #0
   16bbc:	beq	16c44 <__assert_fail@plt+0x4fa8>
   16bc0:	add	r7, r9, #16
   16bc4:	add	r5, r6, #32
   16bc8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16bcc:	cmp	r0, r5
   16bd0:	bne	16be8 <__assert_fail@plt+0x4f4c>
   16bd4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16bd8:	mov	r0, r7
   16bdc:	mov	r1, r5
   16be0:	bl	118dc <memcpy@plt>
   16be4:	mov	r0, r7
   16be8:	str	r0, [r7, #-16]
   16bec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16bf0:	str	r0, [r7, #-12]
   16bf4:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16bf8:	strb	r0, [r7, #-8]
   16bfc:	cmp	r0, #0
   16c00:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   16c04:	strne	r0, [r7, #-4]
   16c08:	strb	r4, [fp, #-76]	; 0xffffffb4
   16c0c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16c10:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16c14:	add	r0, r0, r1
   16c18:	str	r0, [fp, #-72]	; 0xffffffb8
   16c1c:	mov	r0, r6
   16c20:	bl	17040 <__assert_fail@plt+0x53a4>
   16c24:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   16c28:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16c2c:	ldr	r3, [fp, #-148]	; 0xffffff6c
   16c30:	add	r7, r7, #40	; 0x28
   16c34:	cmp	r1, #0
   16c38:	beq	16bc8 <__assert_fail@plt+0x4f2c>
   16c3c:	cmp	r0, #0
   16c40:	bne	16bc8 <__assert_fail@plt+0x4f2c>
   16c44:	mov	r0, #1
   16c48:	cmp	sl, #3
   16c4c:	str	r8, [fp, #-156]	; 0xffffff64
   16c50:	str	sl, [fp, #-152]	; 0xffffff68
   16c54:	str	r0, [r3, #4]
   16c58:	bcc	16d18 <__assert_fail@plt+0x507c>
   16c5c:	mov	r4, #2
   16c60:	mov	r5, #0
   16c64:	add	r0, r4, r4, lsl #2
   16c68:	add	r0, r9, r0, lsl #3
   16c6c:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   16c70:	sub	sl, r0, #40	; 0x28
   16c74:	sub	r6, r0, #36	; 0x24
   16c78:	sub	r7, r0, #28
   16c7c:	cmp	r8, #0
   16c80:	beq	16cac <__assert_fail@plt+0x5010>
   16c84:	add	r0, r5, r5, lsl #2
   16c88:	add	r0, r9, r0, lsl #3
   16c8c:	ldrb	r1, [r0, #8]
   16c90:	cmp	r1, #0
   16c94:	beq	16cac <__assert_fail@plt+0x5010>
   16c98:	ldr	r0, [r0, #12]
   16c9c:	ldr	r1, [r7]
   16ca0:	cmp	r1, r0
   16ca4:	bne	16cdc <__assert_fail@plt+0x5040>
   16ca8:	b	16cfc <__assert_fail@plt+0x5060>
   16cac:	add	r0, r5, r5, lsl #2
   16cb0:	ldr	r2, [r6]
   16cb4:	add	r1, r9, r0, lsl #3
   16cb8:	ldr	r1, [r1, #4]
   16cbc:	cmp	r2, r1
   16cc0:	bne	16cdc <__assert_fail@plt+0x5040>
   16cc4:	ldr	r1, [r9, r0, lsl #3]
   16cc8:	ldr	r0, [sl]
   16ccc:	bl	11a80 <bcmp@plt>
   16cd0:	ldr	r3, [fp, #-148]	; 0xffffff6c
   16cd4:	cmp	r0, #0
   16cd8:	beq	16cfc <__assert_fail@plt+0x5060>
   16cdc:	cmp	r5, #0
   16ce0:	beq	16cf0 <__assert_fail@plt+0x5054>
   16ce4:	ldr	r0, [r3, r5, lsl #2]
   16ce8:	sub	r5, r5, r0
   16cec:	b	16c7c <__assert_fail@plt+0x4fe0>
   16cf0:	mov	r5, #0
   16cf4:	mov	r0, r4
   16cf8:	b	16d04 <__assert_fail@plt+0x5068>
   16cfc:	add	r5, r5, #1
   16d00:	sub	r0, r4, r5
   16d04:	str	r0, [r3, r4, lsl #2]
   16d08:	ldr	r0, [fp, #-152]	; 0xffffff68
   16d0c:	add	r4, r4, #1
   16d10:	cmp	r4, r0
   16d14:	bne	16c64 <__assert_fail@plt+0x4fc8>
   16d18:	ldr	r8, [fp, #-156]	; 0xffffff64
   16d1c:	ldr	r0, [fp, #-160]	; 0xffffff60
   16d20:	mov	r6, #0
   16d24:	str	r6, [r8]
   16d28:	str	r6, [fp, #-80]	; 0xffffffb0
   16d2c:	str	r6, [fp, #-84]	; 0xffffffac
   16d30:	strb	r6, [fp, #-76]	; 0xffffffb4
   16d34:	strb	r6, [fp, #-88]	; 0xffffffa8
   16d38:	str	r6, [fp, #-136]	; 0xffffff78
   16d3c:	str	r6, [fp, #-140]	; 0xffffff74
   16d40:	str	r0, [fp, #-128]	; 0xffffff80
   16d44:	str	r0, [fp, #-72]	; 0xffffffb8
   16d48:	sub	r0, fp, #144	; 0x90
   16d4c:	strb	r6, [fp, #-132]	; 0xffffff7c
   16d50:	strb	r6, [fp, #-144]	; 0xffffff70
   16d54:	bl	17040 <__assert_fail@plt+0x53a4>
   16d58:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16d5c:	ldrb	r1, [fp, #-120]	; 0xffffff88
   16d60:	cmp	r0, #0
   16d64:	bne	16d70 <__assert_fail@plt+0x50d4>
   16d68:	cmp	r1, #0
   16d6c:	bne	16edc <__assert_fail@plt+0x5240>
   16d70:	clz	r1, r1
   16d74:	sub	r4, fp, #88	; 0x58
   16d78:	mov	sl, #0
   16d7c:	lsr	r1, r1, #5
   16d80:	add	r2, sl, sl, lsl #2
   16d84:	tst	r1, #1
   16d88:	add	r3, r9, r2, lsl #3
   16d8c:	bne	16db4 <__assert_fail@plt+0x5118>
   16d90:	ldrb	r1, [r3, #8]
   16d94:	cmp	r1, #0
   16d98:	beq	16db4 <__assert_fail@plt+0x5118>
   16d9c:	ldr	r1, [r3, #12]
   16da0:	cmp	r1, r0
   16da4:	bne	16de0 <__assert_fail@plt+0x5144>
   16da8:	ldr	r7, [fp, #-128]	; 0xffffff80
   16dac:	ldr	r5, [fp, #-124]	; 0xffffff84
   16db0:	b	16e3c <__assert_fail@plt+0x51a0>
   16db4:	ldr	r5, [r3, #4]
   16db8:	ldr	r0, [fp, #-124]	; 0xffffff84
   16dbc:	cmp	r5, r0
   16dc0:	bne	16de0 <__assert_fail@plt+0x5144>
   16dc4:	ldr	r0, [r9, r2, lsl #3]
   16dc8:	ldr	r7, [fp, #-128]	; 0xffffff80
   16dcc:	mov	r2, r5
   16dd0:	mov	r1, r7
   16dd4:	bl	11a80 <bcmp@plt>
   16dd8:	cmp	r0, #0
   16ddc:	beq	16e3c <__assert_fail@plt+0x51a0>
   16de0:	cmp	sl, #0
   16de4:	beq	16e5c <__assert_fail@plt+0x51c0>
   16de8:	ldr	r0, [fp, #-148]	; 0xffffff6c
   16dec:	ldr	r5, [r0, sl, lsl #2]
   16df0:	sub	sl, sl, r5
   16df4:	cmp	r5, #0
   16df8:	beq	16ea8 <__assert_fail@plt+0x520c>
   16dfc:	mov	r0, r4
   16e00:	bl	17040 <__assert_fail@plt+0x53a4>
   16e04:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16e08:	cmp	r0, #0
   16e0c:	beq	16e1c <__assert_fail@plt+0x5180>
   16e10:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16e14:	cmp	r0, #0
   16e18:	beq	16ef4 <__assert_fail@plt+0x5258>
   16e1c:	strb	r6, [fp, #-76]	; 0xffffffb4
   16e20:	subs	r5, r5, #1
   16e24:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16e28:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16e2c:	add	r0, r0, r1
   16e30:	str	r0, [fp, #-72]	; 0xffffffb8
   16e34:	bne	16dfc <__assert_fail@plt+0x5160>
   16e38:	b	16ea8 <__assert_fail@plt+0x520c>
   16e3c:	add	r0, r7, r5
   16e40:	strb	r6, [fp, #-132]	; 0xffffff7c
   16e44:	add	sl, sl, #1
   16e48:	str	r0, [fp, #-128]	; 0xffffff80
   16e4c:	ldr	r0, [fp, #-152]	; 0xffffff68
   16e50:	cmp	sl, r0
   16e54:	bne	16ea8 <__assert_fail@plt+0x520c>
   16e58:	b	16ed4 <__assert_fail@plt+0x5238>
   16e5c:	mov	r0, r4
   16e60:	bl	17040 <__assert_fail@plt+0x53a4>
   16e64:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16e68:	cmp	r0, #0
   16e6c:	beq	16e7c <__assert_fail@plt+0x51e0>
   16e70:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16e74:	cmp	r0, #0
   16e78:	beq	16ef4 <__assert_fail@plt+0x5258>
   16e7c:	mov	sl, #0
   16e80:	strb	sl, [fp, #-76]	; 0xffffffb4
   16e84:	strb	sl, [fp, #-132]	; 0xffffff7c
   16e88:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16e8c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16e90:	add	r0, r0, r1
   16e94:	ldr	r1, [fp, #-124]	; 0xffffff84
   16e98:	str	r0, [fp, #-72]	; 0xffffffb8
   16e9c:	ldr	r0, [fp, #-128]	; 0xffffff80
   16ea0:	add	r0, r0, r1
   16ea4:	str	r0, [fp, #-128]	; 0xffffff80
   16ea8:	sub	r0, fp, #144	; 0x90
   16eac:	bl	17040 <__assert_fail@plt+0x53a4>
   16eb0:	ldrb	r2, [fp, #-120]	; 0xffffff88
   16eb4:	clz	r0, r2
   16eb8:	lsr	r1, r0, #5
   16ebc:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16ec0:	cmp	r0, #0
   16ec4:	bne	16d80 <__assert_fail@plt+0x50e4>
   16ec8:	cmp	r2, #0
   16ecc:	beq	16d80 <__assert_fail@plt+0x50e4>
   16ed0:	b	16edc <__assert_fail@plt+0x5240>
   16ed4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16ed8:	str	r0, [r8]
   16edc:	mov	r0, r9
   16ee0:	bl	2856c <__assert_fail@plt+0x168d0>
   16ee4:	mov	r5, #1
   16ee8:	mov	r0, r5
   16eec:	sub	sp, fp, #28
   16ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ef4:	bl	11c60 <abort@plt>
   16ef8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16efc:	add	fp, sp, #24
   16f00:	mov	r4, #0
   16f04:	cmn	r2, #-536870911	; 0xe0000001
   16f08:	bhi	17034 <__assert_fail@plt+0x5398>
   16f0c:	mov	r7, r0
   16f10:	lsl	r0, r2, #2
   16f14:	mov	r8, r3
   16f18:	mov	r5, r2
   16f1c:	mov	r6, r1
   16f20:	cmp	r0, #4016	; 0xfb0
   16f24:	bhi	16f44 <__assert_fail@plt+0x52a8>
   16f28:	add	r0, r0, #22
   16f2c:	bic	r0, r0, #7
   16f30:	sub	r1, sp, r0
   16f34:	add	r0, r1, #15
   16f38:	bic	r0, r0, #15
   16f3c:	mov	sp, r1
   16f40:	b	16f48 <__assert_fail@plt+0x52ac>
   16f44:	bl	28504 <__assert_fail@plt+0x16868>
   16f48:	cmp	r0, #0
   16f4c:	beq	17034 <__assert_fail@plt+0x5398>
   16f50:	mov	r1, #1
   16f54:	cmp	r5, #3
   16f58:	str	r1, [r0, #4]
   16f5c:	bcc	16fb8 <__assert_fail@plt+0x531c>
   16f60:	mov	r1, #2
   16f64:	mov	r2, #0
   16f68:	add	r3, r1, r6
   16f6c:	ldrb	r4, [r6, r2]
   16f70:	ldrb	r3, [r3, #-1]
   16f74:	cmp	r3, r4
   16f78:	beq	16f94 <__assert_fail@plt+0x52f8>
   16f7c:	cmp	r2, #0
   16f80:	beq	16fa0 <__assert_fail@plt+0x5304>
   16f84:	ldr	r4, [r0, r2, lsl #2]
   16f88:	sub	r2, r2, r4
   16f8c:	ldrb	r4, [r6, r2]
   16f90:	b	16f74 <__assert_fail@plt+0x52d8>
   16f94:	add	r2, r2, #1
   16f98:	sub	r3, r1, r2
   16f9c:	b	16fa8 <__assert_fail@plt+0x530c>
   16fa0:	mov	r2, #0
   16fa4:	mov	r3, r1
   16fa8:	str	r3, [r0, r1, lsl #2]
   16fac:	add	r1, r1, #1
   16fb0:	cmp	r1, r5
   16fb4:	bne	16f68 <__assert_fail@plt+0x52cc>
   16fb8:	mov	r1, #0
   16fbc:	str	r1, [r8]
   16fc0:	ldrb	r3, [r7]
   16fc4:	cmp	r3, #0
   16fc8:	beq	1702c <__assert_fail@plt+0x5390>
   16fcc:	mov	r2, r7
   16fd0:	ldrb	r4, [r6, r1]
   16fd4:	uxtb	r3, r3
   16fd8:	cmp	r4, r3
   16fdc:	bne	16ff4 <__assert_fail@plt+0x5358>
   16fe0:	add	r1, r1, #1
   16fe4:	cmp	r1, r5
   16fe8:	beq	17028 <__assert_fail@plt+0x538c>
   16fec:	add	r7, r7, #1
   16ff0:	b	17018 <__assert_fail@plt+0x537c>
   16ff4:	cmp	r1, #0
   16ff8:	beq	1700c <__assert_fail@plt+0x5370>
   16ffc:	ldr	r3, [r0, r1, lsl #2]
   17000:	sub	r1, r1, r3
   17004:	add	r2, r2, r3
   17008:	b	17018 <__assert_fail@plt+0x537c>
   1700c:	add	r7, r7, #1
   17010:	add	r2, r2, #1
   17014:	mov	r1, #0
   17018:	ldrb	r3, [r7]
   1701c:	cmp	r3, #0
   17020:	bne	16fd0 <__assert_fail@plt+0x5334>
   17024:	b	1702c <__assert_fail@plt+0x5390>
   17028:	str	r2, [r8]
   1702c:	bl	2856c <__assert_fail@plt+0x168d0>
   17030:	mov	r4, #1
   17034:	mov	r0, r4
   17038:	sub	sp, fp, #24
   1703c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17040:	push	{r4, r5, r6, r7, fp, lr}
   17044:	add	fp, sp, #16
   17048:	mov	r4, r0
   1704c:	ldrb	r0, [r0, #12]
   17050:	cmp	r0, #0
   17054:	popne	{r4, r5, r6, r7, fp, pc}
   17058:	ldrb	r0, [r4]
   1705c:	ldr	r5, [r4, #16]
   17060:	cmp	r0, #0
   17064:	beq	170c0 <__assert_fail@plt+0x5424>
   17068:	bl	11990 <__ctype_get_mb_cur_max@plt>
   1706c:	mov	r1, r0
   17070:	mov	r0, r5
   17074:	bl	18d9c <__assert_fail@plt+0x7100>
   17078:	add	r6, r4, #4
   1707c:	add	r7, r4, #28
   17080:	mov	r2, r0
   17084:	mov	r1, r5
   17088:	mov	r0, r7
   1708c:	mov	r3, r6
   17090:	bl	1a228 <__assert_fail@plt+0x858c>
   17094:	cmn	r0, #2
   17098:	str	r0, [r4, #20]
   1709c:	beq	1713c <__assert_fail@plt+0x54a0>
   170a0:	cmp	r0, #0
   170a4:	beq	170f8 <__assert_fail@plt+0x545c>
   170a8:	cmn	r0, #1
   170ac:	bne	1711c <__assert_fail@plt+0x5480>
   170b0:	mov	r0, #0
   170b4:	strb	r0, [r4, #24]
   170b8:	mov	r0, #1
   170bc:	b	1714c <__assert_fail@plt+0x54b0>
   170c0:	ldrb	r0, [r5]
   170c4:	movw	r2, #42784	; 0xa720
   170c8:	movt	r2, #2
   170cc:	ubfx	r1, r0, #5, #3
   170d0:	ldr	r1, [r2, r1, lsl #2]
   170d4:	and	r2, r0, #31
   170d8:	mov	r0, #1
   170dc:	tst	r1, r0, lsl r2
   170e0:	beq	1715c <__assert_fail@plt+0x54c0>
   170e4:	str	r0, [r4, #20]
   170e8:	ldrb	r1, [r5]
   170ec:	strb	r0, [r4, #24]
   170f0:	str	r1, [r4, #28]
   170f4:	b	17150 <__assert_fail@plt+0x54b4>
   170f8:	mov	r0, #1
   170fc:	str	r0, [r4, #20]
   17100:	ldr	r0, [r4, #16]
   17104:	ldrb	r0, [r0]
   17108:	cmp	r0, #0
   1710c:	bne	17178 <__assert_fail@plt+0x54dc>
   17110:	ldr	r0, [r7]
   17114:	cmp	r0, #0
   17118:	bne	17190 <__assert_fail@plt+0x54f4>
   1711c:	mov	r0, #1
   17120:	strb	r0, [r4, #24]
   17124:	mov	r0, r6
   17128:	bl	1190c <mbsinit@plt>
   1712c:	cmp	r0, #0
   17130:	movne	r0, #0
   17134:	strbne	r0, [r4]
   17138:	b	17150 <__assert_fail@plt+0x54b4>
   1713c:	ldr	r0, [r4, #16]
   17140:	bl	11a98 <strlen@plt>
   17144:	mov	r1, #0
   17148:	strb	r1, [r4, #24]
   1714c:	str	r0, [r4, #20]
   17150:	mov	r0, #1
   17154:	strb	r0, [r4, #12]
   17158:	pop	{r4, r5, r6, r7, fp, pc}
   1715c:	add	r0, r4, #4
   17160:	bl	1190c <mbsinit@plt>
   17164:	cmp	r0, #0
   17168:	beq	171a8 <__assert_fail@plt+0x550c>
   1716c:	mov	r0, #1
   17170:	strb	r0, [r4]
   17174:	b	17068 <__assert_fail@plt+0x53cc>
   17178:	movw	r0, #40799	; 0x9f5f
   1717c:	movw	r1, #40739	; 0x9f23
   17180:	movw	r3, #40751	; 0x9f2f
   17184:	mov	r2, #171	; 0xab
   17188:	movt	r0, #2
   1718c:	b	171bc <__assert_fail@plt+0x5520>
   17190:	movw	r0, #40822	; 0x9f76
   17194:	movw	r1, #40739	; 0x9f23
   17198:	movw	r3, #40751	; 0x9f2f
   1719c:	mov	r2, #172	; 0xac
   171a0:	movt	r0, #2
   171a4:	b	171bc <__assert_fail@plt+0x5520>
   171a8:	movw	r0, #40716	; 0x9f0c
   171ac:	movw	r1, #40739	; 0x9f23
   171b0:	movw	r3, #40751	; 0x9f2f
   171b4:	mov	r2, #143	; 0x8f
   171b8:	movt	r0, #2
   171bc:	movt	r1, #2
   171c0:	movt	r3, #2
   171c4:	bl	11c9c <__assert_fail@plt>
   171c8:	ldr	r2, [r0, #16]
   171cc:	add	r1, r2, r1
   171d0:	str	r1, [r0, #16]
   171d4:	bx	lr
   171d8:	push	{r4, r5, r6, sl, fp, lr}
   171dc:	add	fp, sp, #16
   171e0:	mov	r5, r1
   171e4:	ldrb	r1, [r1]
   171e8:	mov	r4, r0
   171ec:	strb	r1, [r0], #4
   171f0:	cmp	r1, #0
   171f4:	beq	17204 <__assert_fail@plt+0x5568>
   171f8:	ldmib	r5, {r1, r2}
   171fc:	stm	r0, {r1, r2}
   17200:	b	17210 <__assert_fail@plt+0x5574>
   17204:	mov	r1, #0
   17208:	str	r1, [r0]
   1720c:	str	r1, [r0, #4]
   17210:	ldrb	r0, [r5, #12]
   17214:	strb	r0, [r4, #12]
   17218:	add	r0, r5, #32
   1721c:	ldr	r1, [r5, #16]
   17220:	cmp	r1, r0
   17224:	beq	17230 <__assert_fail@plt+0x5594>
   17228:	mov	r6, r1
   1722c:	b	17240 <__assert_fail@plt+0x55a4>
   17230:	ldr	r2, [r5, #20]
   17234:	add	r6, r4, #32
   17238:	mov	r0, r6
   1723c:	bl	118dc <memcpy@plt>
   17240:	str	r6, [r4, #16]
   17244:	ldr	r0, [r5, #20]
   17248:	str	r0, [r4, #20]
   1724c:	ldrb	r0, [r5, #24]
   17250:	strb	r0, [r4, #24]
   17254:	cmp	r0, #0
   17258:	ldrne	r0, [r5, #28]
   1725c:	strne	r0, [r4, #28]
   17260:	pop	{r4, r5, r6, sl, fp, pc}
   17264:	push	{r4, r5, fp, lr}
   17268:	add	fp, sp, #8
   1726c:	cmp	r0, #0
   17270:	beq	17304 <__assert_fail@plt+0x5668>
   17274:	mov	r1, #47	; 0x2f
   17278:	mov	r4, r0
   1727c:	bl	11bac <strrchr@plt>
   17280:	cmp	r0, #0
   17284:	mov	r5, r4
   17288:	addne	r5, r0, #1
   1728c:	sub	r0, r5, r4
   17290:	cmp	r0, #7
   17294:	blt	172e8 <__assert_fail@plt+0x564c>
   17298:	movw	r1, #40896	; 0x9fc0
   1729c:	sub	r0, r5, #7
   172a0:	mov	r2, #7
   172a4:	movt	r1, #2
   172a8:	bl	11c54 <strncmp@plt>
   172ac:	cmp	r0, #0
   172b0:	bne	172e8 <__assert_fail@plt+0x564c>
   172b4:	movw	r1, #40904	; 0x9fc8
   172b8:	mov	r0, r5
   172bc:	mov	r2, #3
   172c0:	movt	r1, #2
   172c4:	bl	11c54 <strncmp@plt>
   172c8:	cmp	r0, #0
   172cc:	beq	172d8 <__assert_fail@plt+0x563c>
   172d0:	mov	r4, r5
   172d4:	b	172e8 <__assert_fail@plt+0x564c>
   172d8:	movw	r0, #45568	; 0xb200
   172dc:	add	r4, r5, #3
   172e0:	movt	r0, #3
   172e4:	str	r4, [r0]
   172e8:	movw	r0, #45572	; 0xb204
   172ec:	movt	r0, #3
   172f0:	str	r4, [r0]
   172f4:	movw	r0, #45716	; 0xb294
   172f8:	movt	r0, #3
   172fc:	str	r4, [r0]
   17300:	pop	{r4, r5, fp, pc}
   17304:	movw	r0, #45584	; 0xb210
   17308:	movt	r0, #3
   1730c:	ldr	r1, [r0]
   17310:	movw	r0, #40840	; 0x9f88
   17314:	movt	r0, #2
   17318:	bl	11c48 <fputs@plt>
   1731c:	bl	11c60 <abort@plt>
   17320:	push	{r4, r5, r6, sl, fp, lr}
   17324:	add	fp, sp, #16
   17328:	mov	r4, r0
   1732c:	movw	r0, #45720	; 0xb298
   17330:	movt	r0, #3
   17334:	cmp	r4, #0
   17338:	moveq	r4, r0
   1733c:	bl	11ac8 <__errno_location@plt>
   17340:	ldr	r6, [r0]
   17344:	mov	r5, r0
   17348:	mov	r0, r4
   1734c:	mov	r1, #48	; 0x30
   17350:	bl	19604 <__assert_fail@plt+0x7968>
   17354:	str	r6, [r5]
   17358:	pop	{r4, r5, r6, sl, fp, pc}
   1735c:	movw	r1, #45720	; 0xb298
   17360:	cmp	r0, #0
   17364:	movt	r1, #3
   17368:	movne	r1, r0
   1736c:	ldr	r0, [r1]
   17370:	bx	lr
   17374:	movw	r2, #45720	; 0xb298
   17378:	cmp	r0, #0
   1737c:	movt	r2, #3
   17380:	movne	r2, r0
   17384:	str	r1, [r2]
   17388:	bx	lr
   1738c:	movw	r3, #45720	; 0xb298
   17390:	cmp	r0, #0
   17394:	and	r2, r2, #1
   17398:	movt	r3, #3
   1739c:	movne	r3, r0
   173a0:	ubfx	r0, r1, #5, #3
   173a4:	and	r1, r1, #31
   173a8:	add	ip, r3, r0, lsl #2
   173ac:	mov	r0, #1
   173b0:	ldr	r3, [ip, #8]
   173b4:	and	r0, r0, r3, lsr r1
   173b8:	eor	r2, r0, r2
   173bc:	eor	r1, r3, r2, lsl r1
   173c0:	str	r1, [ip, #8]
   173c4:	bx	lr
   173c8:	movw	r2, #45720	; 0xb298
   173cc:	cmp	r0, #0
   173d0:	movt	r2, #3
   173d4:	movne	r2, r0
   173d8:	ldr	r0, [r2, #4]
   173dc:	str	r1, [r2, #4]
   173e0:	bx	lr
   173e4:	push	{fp, lr}
   173e8:	mov	fp, sp
   173ec:	movw	r3, #45720	; 0xb298
   173f0:	cmp	r0, #0
   173f4:	movt	r3, #3
   173f8:	movne	r3, r0
   173fc:	cmp	r1, #0
   17400:	mov	r0, #10
   17404:	cmpne	r2, #0
   17408:	str	r0, [r3]
   1740c:	bne	17414 <__assert_fail@plt+0x5778>
   17410:	bl	11c60 <abort@plt>
   17414:	str	r1, [r3, #40]	; 0x28
   17418:	str	r2, [r3, #44]	; 0x2c
   1741c:	pop	{fp, pc}
   17420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17424:	add	fp, sp, #28
   17428:	sub	sp, sp, #20
   1742c:	mov	r7, r0
   17430:	ldr	r0, [fp, #8]
   17434:	movw	r5, #45720	; 0xb298
   17438:	mov	r8, r3
   1743c:	mov	r9, r2
   17440:	mov	sl, r1
   17444:	movt	r5, #3
   17448:	cmp	r0, #0
   1744c:	movne	r5, r0
   17450:	bl	11ac8 <__errno_location@plt>
   17454:	ldr	r2, [r5, #40]	; 0x28
   17458:	ldr	r3, [r5, #44]	; 0x2c
   1745c:	mov	r4, r0
   17460:	ldm	r5, {r0, r1}
   17464:	add	r5, r5, #8
   17468:	ldr	r6, [r4]
   1746c:	stm	sp, {r0, r1, r5}
   17470:	mov	r0, r7
   17474:	mov	r1, sl
   17478:	str	r2, [sp, #12]
   1747c:	str	r3, [sp, #16]
   17480:	mov	r2, r9
   17484:	mov	r3, r8
   17488:	bl	17498 <__assert_fail@plt+0x57fc>
   1748c:	str	r6, [r4]
   17490:	sub	sp, fp, #28
   17494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17498:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1749c:	add	fp, sp, #28
   174a0:	sub	sp, sp, #156	; 0x9c
   174a4:	mov	r5, r0
   174a8:	add	r0, r2, #1
   174ac:	mov	r6, r1
   174b0:	mov	sl, r3
   174b4:	str	r2, [fp, #-80]	; 0xffffffb0
   174b8:	str	r0, [sp, #72]	; 0x48
   174bc:	ldr	r0, [fp, #12]
   174c0:	and	r1, r0, #1
   174c4:	str	r1, [sp, #32]
   174c8:	and	r1, r0, #4
   174cc:	str	r1, [sp, #28]
   174d0:	ubfx	r9, r0, #1, #1
   174d4:	bl	11990 <__ctype_get_mb_cur_max@plt>
   174d8:	str	r0, [sp, #40]	; 0x28
   174dc:	ldr	r0, [fp, #24]
   174e0:	ldr	r7, [fp, #8]
   174e4:	mov	r1, #0
   174e8:	mov	lr, #0
   174ec:	str	r5, [fp, #-84]	; 0xffffffac
   174f0:	str	r1, [sp, #60]	; 0x3c
   174f4:	mov	r1, #1
   174f8:	str	r1, [fp, #-48]	; 0xffffffd0
   174fc:	str	r0, [sp, #80]	; 0x50
   17500:	ldr	r0, [fp, #20]
   17504:	str	r0, [sp, #76]	; 0x4c
   17508:	mov	r0, #0
   1750c:	str	r0, [sp, #56]	; 0x38
   17510:	mov	r0, #0
   17514:	str	r0, [fp, #-88]	; 0xffffffa8
   17518:	mov	r0, #0
   1751c:	str	r0, [fp, #-72]	; 0xffffffb8
   17520:	mov	r0, #0
   17524:	cmp	r7, #10
   17528:	bhi	18504 <__assert_fail@plt+0x6868>
   1752c:	add	r1, pc, #24
   17530:	ldr	r4, [fp, #-80]	; 0xffffffb0
   17534:	mov	ip, r6
   17538:	mov	r8, #0
   1753c:	mov	r2, #1
   17540:	mov	r6, #0
   17544:	mov	r3, sl
   17548:	ldr	pc, [r1, r7, lsl #2]
   1754c:	andeq	r7, r1, r8, lsr r6
   17550:	andeq	r7, r1, ip, lsl #13
   17554:	andeq	r7, r1, ip, asr #12
   17558:	andeq	r7, r1, r0, lsr r6
   1755c:	andeq	r7, r1, r0, lsl #13
   17560:			; <UNDEFINED> instruction: 0x000176b4
   17564:	andeq	r7, r1, ip, asr r6
   17568:	andeq	r7, r1, r8, lsr r7
   1756c:	andeq	r7, r1, r8, ror r5
   17570:	andeq	r7, r1, r8, ror r5
   17574:			; <UNDEFINED> instruction: 0x000175b8
   17578:	movw	r0, #40986	; 0xa01a
   1757c:	mov	r1, r7
   17580:	mov	r6, r5
   17584:	mov	r4, ip
   17588:	mov	r5, lr
   1758c:	movt	r0, #2
   17590:	bl	18c68 <__assert_fail@plt+0x6fcc>
   17594:	str	r0, [sp, #76]	; 0x4c
   17598:	movw	r0, #38217	; 0x9549
   1759c:	mov	r1, r7
   175a0:	movt	r0, #2
   175a4:	bl	18c68 <__assert_fail@plt+0x6fcc>
   175a8:	mov	lr, r5
   175ac:	mov	r5, r6
   175b0:	mov	ip, r4
   175b4:	str	r0, [sp, #80]	; 0x50
   175b8:	mov	r8, #0
   175bc:	tst	r9, #1
   175c0:	str	lr, [sp, #44]	; 0x2c
   175c4:	bne	175fc <__assert_fail@plt+0x5960>
   175c8:	ldr	r0, [sp, #76]	; 0x4c
   175cc:	ldrb	r0, [r0]
   175d0:	cmp	r0, #0
   175d4:	beq	175fc <__assert_fail@plt+0x5960>
   175d8:	ldr	r1, [sp, #76]	; 0x4c
   175dc:	mov	r8, #0
   175e0:	add	r1, r1, #1
   175e4:	cmp	r8, ip
   175e8:	strbcc	r0, [r5, r8]
   175ec:	ldrb	r0, [r1, r8]
   175f0:	add	r8, r8, #1
   175f4:	cmp	r0, #0
   175f8:	bne	175e4 <__assert_fail@plt+0x5948>
   175fc:	ldr	r6, [sp, #80]	; 0x50
   17600:	mov	r4, ip
   17604:	mov	r0, r6
   17608:	bl	11a98 <strlen@plt>
   1760c:	mov	ip, r4
   17610:	ldr	r4, [fp, #-80]	; 0xffffffb0
   17614:	ldr	lr, [sp, #44]	; 0x2c
   17618:	str	r6, [fp, #-88]	; 0xffffffa8
   1761c:	str	r0, [fp, #-72]	; 0xffffffb8
   17620:	mov	r2, #1
   17624:	mov	r6, r9
   17628:	mov	r3, sl
   1762c:	b	17738 <__assert_fail@plt+0x5a9c>
   17630:	mov	r0, #1
   17634:	b	1768c <__assert_fail@plt+0x59f0>
   17638:	mov	r7, #0
   1763c:	mov	r8, #0
   17640:	mov	r2, r0
   17644:	mov	r6, #0
   17648:	b	17738 <__assert_fail@plt+0x5a9c>
   1764c:	tst	r9, #1
   17650:	bne	1768c <__assert_fail@plt+0x59f0>
   17654:	mov	r2, r0
   17658:	b	176e4 <__assert_fail@plt+0x5a48>
   1765c:	mov	r0, #1
   17660:	mov	r8, #0
   17664:	mov	r7, #5
   17668:	mov	r2, #1
   1766c:	str	r0, [fp, #-72]	; 0xffffffb8
   17670:	movw	r0, #40984	; 0xa018
   17674:	movt	r0, #2
   17678:	str	r0, [fp, #-88]	; 0xffffffa8
   1767c:	b	176ac <__assert_fail@plt+0x5a10>
   17680:	mov	r2, #1
   17684:	tst	r9, #1
   17688:	beq	176e4 <__assert_fail@plt+0x5a48>
   1768c:	mov	r1, #1
   17690:	mov	r8, #0
   17694:	mov	r7, #2
   17698:	mov	r2, r0
   1769c:	str	r1, [fp, #-72]	; 0xffffffb8
   176a0:	movw	r1, #38217	; 0x9549
   176a4:	movt	r1, #2
   176a8:	str	r1, [fp, #-88]	; 0xffffffa8
   176ac:	mov	r6, #1
   176b0:	b	17738 <__assert_fail@plt+0x5a9c>
   176b4:	tst	r9, #1
   176b8:	beq	17708 <__assert_fail@plt+0x5a6c>
   176bc:	mov	r0, #1
   176c0:	mov	r8, #0
   176c4:	mov	r2, #1
   176c8:	mov	r6, #1
   176cc:	mov	r7, #5
   176d0:	str	r0, [fp, #-72]	; 0xffffffb8
   176d4:	movw	r0, #40984	; 0xa018
   176d8:	movt	r0, #2
   176dc:	str	r0, [fp, #-88]	; 0xffffffa8
   176e0:	b	17738 <__assert_fail@plt+0x5a9c>
   176e4:	cmp	ip, #0
   176e8:	mov	r8, #1
   176ec:	mov	r6, #0
   176f0:	mov	r7, #2
   176f4:	movne	r0, #39	; 0x27
   176f8:	strbne	r0, [r5]
   176fc:	movw	r0, #38217	; 0x9549
   17700:	movt	r0, #2
   17704:	b	1772c <__assert_fail@plt+0x5a90>
   17708:	cmp	ip, #0
   1770c:	mov	r8, #1
   17710:	mov	r2, #1
   17714:	mov	r7, #5
   17718:	mov	r6, #0
   1771c:	movne	r0, #34	; 0x22
   17720:	strbne	r0, [r5]
   17724:	movw	r0, #40984	; 0xa018
   17728:	movt	r0, #2
   1772c:	str	r0, [fp, #-88]	; 0xffffffa8
   17730:	mov	r0, #1
   17734:	str	r0, [fp, #-72]	; 0xffffffb8
   17738:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1773c:	str	r7, [fp, #-68]	; 0xffffffbc
   17740:	str	r6, [fp, #-76]	; 0xffffffb4
   17744:	str	r2, [sp, #84]	; 0x54
   17748:	cmp	r0, #0
   1774c:	movwne	r0, #1
   17750:	and	r1, r0, r6
   17754:	and	r1, r2, r1
   17758:	str	r1, [sp, #48]	; 0x30
   1775c:	sub	r1, r7, #2
   17760:	clz	r1, r1
   17764:	lsr	r1, r1, #5
   17768:	and	r1, r1, r6
   1776c:	str	r1, [sp, #64]	; 0x40
   17770:	subs	r1, r7, #2
   17774:	eor	r7, r6, #1
   17778:	movwne	r1, #1
   1777c:	str	r7, [sp, #92]	; 0x5c
   17780:	orr	r7, r1, r7
   17784:	and	r1, r1, r2
   17788:	and	r0, r0, r1
   1778c:	str	r7, [sp, #68]	; 0x44
   17790:	mov	r7, #0
   17794:	str	r0, [fp, #-60]	; 0xffffffc4
   17798:	orr	r0, r1, r6
   1779c:	ldr	r1, [fp, #16]
   177a0:	eor	r0, r0, #1
   177a4:	clz	r1, r1
   177a8:	lsr	r1, r1, #5
   177ac:	orr	r0, r1, r0
   177b0:	str	r0, [fp, #-64]	; 0xffffffc0
   177b4:	eor	r0, r2, #1
   177b8:	str	r0, [sp, #52]	; 0x34
   177bc:	cmn	r3, #1
   177c0:	beq	177d0 <__assert_fail@plt+0x5b34>
   177c4:	cmp	r7, r3
   177c8:	bne	177dc <__assert_fail@plt+0x5b40>
   177cc:	b	18338 <__assert_fail@plt+0x669c>
   177d0:	ldrb	r0, [r4, r7]
   177d4:	cmp	r0, #0
   177d8:	beq	18340 <__assert_fail@plt+0x66a4>
   177dc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   177e0:	cmp	r0, #0
   177e4:	beq	1782c <__assert_fail@plt+0x5b90>
   177e8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   177ec:	add	r5, r7, r0
   177f0:	cmp	r0, #2
   177f4:	bcc	17840 <__assert_fail@plt+0x5ba4>
   177f8:	mov	r0, #0
   177fc:	cmn	r3, #1
   17800:	str	r0, [fp, #-56]	; 0xffffffc8
   17804:	bne	17848 <__assert_fail@plt+0x5bac>
   17808:	mov	r0, r4
   1780c:	mov	r4, ip
   17810:	mov	r6, lr
   17814:	bl	11a98 <strlen@plt>
   17818:	mov	ip, r4
   1781c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   17820:	mov	lr, r6
   17824:	mov	r3, r0
   17828:	b	17848 <__assert_fail@plt+0x5bac>
   1782c:	mov	r0, #0
   17830:	mov	sl, r3
   17834:	str	r0, [fp, #-56]	; 0xffffffc8
   17838:	mov	r0, #0
   1783c:	b	178b4 <__assert_fail@plt+0x5c18>
   17840:	mov	r0, #0
   17844:	str	r0, [fp, #-56]	; 0xffffffc8
   17848:	cmp	r5, r3
   1784c:	bls	17860 <__assert_fail@plt+0x5bc4>
   17850:	ldr	r5, [fp, #-84]	; 0xffffffac
   17854:	mov	r0, #0
   17858:	mov	sl, r3
   1785c:	b	178b4 <__assert_fail@plt+0x5c18>
   17860:	ldr	r1, [fp, #-88]	; 0xffffffa8
   17864:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17868:	add	r0, r4, r7
   1786c:	mov	r5, lr
   17870:	mov	r6, ip
   17874:	mov	sl, r3
   17878:	bl	11a80 <bcmp@plt>
   1787c:	ldr	r2, [sp, #92]	; 0x5c
   17880:	cmp	r0, #0
   17884:	ldr	r3, [fp, #-84]	; 0xffffffac
   17888:	mov	r1, r0
   1788c:	movwne	r1, #1
   17890:	orr	r1, r1, r2
   17894:	tst	r1, #1
   17898:	beq	183c4 <__assert_fail@plt+0x6728>
   1789c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   178a0:	clz	r0, r0
   178a4:	mov	lr, r5
   178a8:	mov	ip, r6
   178ac:	mov	r5, r3
   178b0:	lsr	r0, r0, #5
   178b4:	str	r0, [fp, #-52]	; 0xffffffcc
   178b8:	ldrb	r6, [r4, r7]
   178bc:	cmp	r6, #126	; 0x7e
   178c0:	bhi	17de8 <__assert_fail@plt+0x614c>
   178c4:	add	r3, pc, #16
   178c8:	mov	r9, #1
   178cc:	mov	r2, #110	; 0x6e
   178d0:	mov	r0, #97	; 0x61
   178d4:	mov	r1, #0
   178d8:	ldr	pc, [r3, r6, lsl #2]
   178dc:	andeq	r7, r1, ip, asr #24
   178e0:	andeq	r7, r1, r8, ror #27
   178e4:	andeq	r7, r1, r8, ror #27
   178e8:	andeq	r7, r1, r8, ror #27
   178ec:	andeq	r7, r1, r8, ror #27
   178f0:	andeq	r7, r1, r8, ror #27
   178f4:	andeq	r7, r1, r8, ror #27
   178f8:	andeq	r7, r1, r8, ror #28
   178fc:	andeq	r7, r1, ip, lsr #24
   17900:	andeq	r7, r1, r4, lsr #24
   17904:	andeq	r7, r1, r8, lsr ip
   17908:	andeq	r7, r1, r0, asr sp
   1790c:	andeq	r7, r1, ip, lsl ip
   17910:	andeq	r7, r1, r4, lsr ip
   17914:	andeq	r7, r1, r8, ror #27
   17918:	andeq	r7, r1, r8, ror #27
   1791c:	andeq	r7, r1, r8, ror #27
   17920:	andeq	r7, r1, r8, ror #27
   17924:	andeq	r7, r1, r8, ror #27
   17928:	andeq	r7, r1, r8, ror #27
   1792c:	andeq	r7, r1, r8, ror #27
   17930:	andeq	r7, r1, r8, ror #27
   17934:	andeq	r7, r1, r8, ror #27
   17938:	andeq	r7, r1, r8, ror #27
   1793c:	andeq	r7, r1, r8, ror #27
   17940:	andeq	r7, r1, r8, ror #27
   17944:	andeq	r7, r1, r8, ror #27
   17948:	andeq	r7, r1, r8, ror #27
   1794c:	andeq	r7, r1, r8, ror #27
   17950:	andeq	r7, r1, r8, ror #27
   17954:	andeq	r7, r1, r8, ror #27
   17958:	andeq	r7, r1, r8, ror #27
   1795c:	andeq	r7, r1, ip, asr #23
   17960:	ldrdeq	r7, [r1], -r0
   17964:	ldrdeq	r7, [r1], -r0
   17968:			; <UNDEFINED> instruction: 0x00017bb4
   1796c:	ldrdeq	r7, [r1], -r0
   17970:	ldrdeq	r7, [r1], -r8
   17974:	ldrdeq	r7, [r1], -r0
   17978:	andeq	r7, r1, r8, asr sp
   1797c:	ldrdeq	r7, [r1], -r0
   17980:	ldrdeq	r7, [r1], -r0
   17984:	ldrdeq	r7, [r1], -r0
   17988:	ldrdeq	r7, [r1], -r8
   1798c:	ldrdeq	r7, [r1], -r8
   17990:	ldrdeq	r7, [r1], -r8
   17994:	ldrdeq	r7, [r1], -r8
   17998:	ldrdeq	r7, [r1], -r8
   1799c:	ldrdeq	r7, [r1], -r8
   179a0:	ldrdeq	r7, [r1], -r8
   179a4:	ldrdeq	r7, [r1], -r8
   179a8:	ldrdeq	r7, [r1], -r8
   179ac:	ldrdeq	r7, [r1], -r8
   179b0:	ldrdeq	r7, [r1], -r8
   179b4:	ldrdeq	r7, [r1], -r8
   179b8:	ldrdeq	r7, [r1], -r8
   179bc:	ldrdeq	r7, [r1], -r8
   179c0:	ldrdeq	r7, [r1], -r8
   179c4:	ldrdeq	r7, [r1], -r8
   179c8:	ldrdeq	r7, [r1], -r0
   179cc:	ldrdeq	r7, [r1], -r0
   179d0:	ldrdeq	r7, [r1], -r0
   179d4:	ldrdeq	r7, [r1], -r0
   179d8:	andeq	r7, r1, r4, lsr #26
   179dc:	andeq	r7, r1, r8, ror #27
   179e0:	ldrdeq	r7, [r1], -r8
   179e4:	ldrdeq	r7, [r1], -r8
   179e8:	ldrdeq	r7, [r1], -r8
   179ec:	ldrdeq	r7, [r1], -r8
   179f0:	ldrdeq	r7, [r1], -r8
   179f4:	ldrdeq	r7, [r1], -r8
   179f8:	ldrdeq	r7, [r1], -r8
   179fc:	ldrdeq	r7, [r1], -r8
   17a00:	ldrdeq	r7, [r1], -r8
   17a04:	ldrdeq	r7, [r1], -r8
   17a08:	ldrdeq	r7, [r1], -r8
   17a0c:	ldrdeq	r7, [r1], -r8
   17a10:	ldrdeq	r7, [r1], -r8
   17a14:	ldrdeq	r7, [r1], -r8
   17a18:	ldrdeq	r7, [r1], -r8
   17a1c:	ldrdeq	r7, [r1], -r8
   17a20:	ldrdeq	r7, [r1], -r8
   17a24:	ldrdeq	r7, [r1], -r8
   17a28:	ldrdeq	r7, [r1], -r8
   17a2c:	ldrdeq	r7, [r1], -r8
   17a30:	ldrdeq	r7, [r1], -r8
   17a34:	ldrdeq	r7, [r1], -r8
   17a38:	ldrdeq	r7, [r1], -r8
   17a3c:	ldrdeq	r7, [r1], -r8
   17a40:	ldrdeq	r7, [r1], -r8
   17a44:	ldrdeq	r7, [r1], -r8
   17a48:	ldrdeq	r7, [r1], -r0
   17a4c:	strdeq	r7, [r1], -r8
   17a50:	ldrdeq	r7, [r1], -r8
   17a54:	ldrdeq	r7, [r1], -r0
   17a58:	ldrdeq	r7, [r1], -r8
   17a5c:	ldrdeq	r7, [r1], -r0
   17a60:	ldrdeq	r7, [r1], -r8
   17a64:	ldrdeq	r7, [r1], -r8
   17a68:	ldrdeq	r7, [r1], -r8
   17a6c:	ldrdeq	r7, [r1], -r8
   17a70:	ldrdeq	r7, [r1], -r8
   17a74:	ldrdeq	r7, [r1], -r8
   17a78:	ldrdeq	r7, [r1], -r8
   17a7c:	ldrdeq	r7, [r1], -r8
   17a80:	ldrdeq	r7, [r1], -r8
   17a84:	ldrdeq	r7, [r1], -r8
   17a88:	ldrdeq	r7, [r1], -r8
   17a8c:	ldrdeq	r7, [r1], -r8
   17a90:	ldrdeq	r7, [r1], -r8
   17a94:	ldrdeq	r7, [r1], -r8
   17a98:	ldrdeq	r7, [r1], -r8
   17a9c:	ldrdeq	r7, [r1], -r8
   17aa0:	ldrdeq	r7, [r1], -r8
   17aa4:	ldrdeq	r7, [r1], -r8
   17aa8:	ldrdeq	r7, [r1], -r8
   17aac:	ldrdeq	r7, [r1], -r8
   17ab0:	ldrdeq	r7, [r1], -r8
   17ab4:	ldrdeq	r7, [r1], -r8
   17ab8:	ldrdeq	r7, [r1], -r8
   17abc:	ldrdeq	r7, [r1], -r8
   17ac0:	ldrdeq	r7, [r1], -r8
   17ac4:	ldrdeq	r7, [r1], -r8
   17ac8:	andeq	r7, r1, ip, lsl #23
   17acc:	ldrdeq	r7, [r1], -r0
   17ad0:	andeq	r7, r1, ip, lsl #23
   17ad4:			; <UNDEFINED> instruction: 0x00017bb4
   17ad8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17adc:	tst	r0, #1
   17ae0:	bne	17b0c <__assert_fail@plt+0x5e70>
   17ae4:	ldr	r1, [fp, #16]
   17ae8:	ubfx	r0, r6, #5, #3
   17aec:	mov	r2, #1
   17af0:	ldr	r0, [r1, r0, lsl #2]
   17af4:	and	r1, r6, #31
   17af8:	tst	r0, r2, lsl r1
   17afc:	beq	17b0c <__assert_fail@plt+0x5e70>
   17b00:	mov	r0, r6
   17b04:	mov	r1, r9
   17b08:	b	17b20 <__assert_fail@plt+0x5e84>
   17b0c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17b10:	mov	r1, r9
   17b14:	cmp	r0, #0
   17b18:	mov	r0, r6
   17b1c:	beq	1826c <__assert_fail@plt+0x65d0>
   17b20:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17b24:	tst	r2, #1
   17b28:	bne	18408 <__assert_fail@plt+0x676c>
   17b2c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17b30:	subs	r2, r2, #2
   17b34:	movwne	r2, #1
   17b38:	orr	r2, r2, lr
   17b3c:	tst	r2, #1
   17b40:	bne	17b78 <__assert_fail@plt+0x5edc>
   17b44:	cmp	r8, ip
   17b48:	mov	lr, #1
   17b4c:	movcc	r2, #39	; 0x27
   17b50:	strbcc	r2, [r5, r8]
   17b54:	add	r2, r8, #1
   17b58:	cmp	r2, ip
   17b5c:	movcc	r3, #36	; 0x24
   17b60:	strbcc	r3, [r5, r2]
   17b64:	add	r2, r8, #2
   17b68:	add	r8, r8, #3
   17b6c:	cmp	r2, ip
   17b70:	movcc	r3, #39	; 0x27
   17b74:	strbcc	r3, [r5, r2]
   17b78:	cmp	r8, ip
   17b7c:	movcc	r2, #92	; 0x5c
   17b80:	strbcc	r2, [r5, r8]
   17b84:	add	r8, r8, #1
   17b88:	b	182ac <__assert_fail@plt+0x6610>
   17b8c:	cmp	sl, #1
   17b90:	beq	17bb4 <__assert_fail@plt+0x5f18>
   17b94:	mov	r9, #0
   17b98:	cmn	sl, #1
   17b9c:	bne	17bc0 <__assert_fail@plt+0x5f24>
   17ba0:	ldrb	r0, [r4, #1]
   17ba4:	cmp	r0, #0
   17ba8:	beq	17bb4 <__assert_fail@plt+0x5f18>
   17bac:	mvn	sl, #0
   17bb0:	b	17bc0 <__assert_fail@plt+0x5f24>
   17bb4:	mov	r9, #0
   17bb8:	cmp	r7, #0
   17bbc:	beq	17bcc <__assert_fail@plt+0x5f30>
   17bc0:	mov	r0, #0
   17bc4:	str	r0, [fp, #-56]	; 0xffffffc8
   17bc8:	b	17ad8 <__assert_fail@plt+0x5e3c>
   17bcc:	mov	r1, #1
   17bd0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17bd4:	cmp	r0, #2
   17bd8:	bne	17bf0 <__assert_fail@plt+0x5f54>
   17bdc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17be0:	mov	r9, r1
   17be4:	tst	r0, #1
   17be8:	beq	17ad8 <__assert_fail@plt+0x5e3c>
   17bec:	b	18408 <__assert_fail@plt+0x676c>
   17bf0:	mov	r9, r1
   17bf4:	b	17ad8 <__assert_fail@plt+0x5e3c>
   17bf8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17bfc:	cmp	r0, #2
   17c00:	bne	17e44 <__assert_fail@plt+0x61a8>
   17c04:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17c08:	tst	r0, #1
   17c0c:	bne	18408 <__assert_fail@plt+0x676c>
   17c10:	mov	r0, #0
   17c14:	str	r0, [fp, #-56]	; 0xffffffc8
   17c18:	b	17e5c <__assert_fail@plt+0x61c0>
   17c1c:	mov	r0, #102	; 0x66
   17c20:	b	17e68 <__assert_fail@plt+0x61cc>
   17c24:	mov	r2, #116	; 0x74
   17c28:	b	17c38 <__assert_fail@plt+0x5f9c>
   17c2c:	mov	r0, #98	; 0x62
   17c30:	b	17e68 <__assert_fail@plt+0x61cc>
   17c34:	mov	r2, #114	; 0x72
   17c38:	ldr	r0, [sp, #68]	; 0x44
   17c3c:	tst	r0, #1
   17c40:	mov	r0, r2
   17c44:	bne	17e68 <__assert_fail@plt+0x61cc>
   17c48:	b	18408 <__assert_fail@plt+0x676c>
   17c4c:	ldr	r0, [sp, #84]	; 0x54
   17c50:	tst	r0, #1
   17c54:	beq	17e88 <__assert_fail@plt+0x61ec>
   17c58:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17c5c:	tst	r0, #1
   17c60:	bne	184f4 <__assert_fail@plt+0x6858>
   17c64:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17c68:	mov	r2, sl
   17c6c:	subs	r0, r0, #2
   17c70:	movwne	r0, #1
   17c74:	orr	r0, r0, lr
   17c78:	tst	r0, #1
   17c7c:	bne	17cb4 <__assert_fail@plt+0x6018>
   17c80:	cmp	r8, ip
   17c84:	mov	lr, #1
   17c88:	movcc	r0, #39	; 0x27
   17c8c:	strbcc	r0, [r5, r8]
   17c90:	add	r0, r8, #1
   17c94:	cmp	r0, ip
   17c98:	movcc	r1, #36	; 0x24
   17c9c:	strbcc	r1, [r5, r0]
   17ca0:	add	r0, r8, #2
   17ca4:	add	r8, r8, #3
   17ca8:	cmp	r0, ip
   17cac:	movcc	r1, #39	; 0x27
   17cb0:	strbcc	r1, [r5, r0]
   17cb4:	mov	r1, #1
   17cb8:	cmp	r8, ip
   17cbc:	mov	r9, #0
   17cc0:	mov	r6, #48	; 0x30
   17cc4:	str	r1, [fp, #-56]	; 0xffffffc8
   17cc8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17ccc:	movcc	r0, #92	; 0x5c
   17cd0:	strbcc	r0, [r5, r8]
   17cd4:	add	r0, r8, #1
   17cd8:	cmp	r1, #2
   17cdc:	beq	17fe4 <__assert_fail@plt+0x6348>
   17ce0:	add	r1, r7, #1
   17ce4:	cmp	r1, r2
   17ce8:	bcs	17fe4 <__assert_fail@plt+0x6348>
   17cec:	ldrb	r1, [r4, r1]
   17cf0:	sub	r1, r1, #48	; 0x30
   17cf4:	uxtb	r1, r1
   17cf8:	cmp	r1, #9
   17cfc:	bhi	17fe4 <__assert_fail@plt+0x6348>
   17d00:	cmp	r0, ip
   17d04:	movcc	r1, #48	; 0x30
   17d08:	strbcc	r1, [r5, r0]
   17d0c:	add	r0, r8, #2
   17d10:	add	r8, r8, #3
   17d14:	cmp	r0, ip
   17d18:	movcc	r1, #48	; 0x30
   17d1c:	strbcc	r1, [r5, r0]
   17d20:	b	17ad8 <__assert_fail@plt+0x5e3c>
   17d24:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17d28:	mov	r6, #63	; 0x3f
   17d2c:	cmp	r0, #5
   17d30:	beq	17fec <__assert_fail@plt+0x6350>
   17d34:	mov	r1, #0
   17d38:	cmp	r0, #2
   17d3c:	str	r1, [fp, #-56]	; 0xffffffc8
   17d40:	bne	180a0 <__assert_fail@plt+0x6404>
   17d44:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17d48:	mov	r9, #0
   17d4c:	b	17be4 <__assert_fail@plt+0x5f48>
   17d50:	mov	r0, #118	; 0x76
   17d54:	b	17e68 <__assert_fail@plt+0x61cc>
   17d58:	mov	r0, #1
   17d5c:	mov	r6, #39	; 0x27
   17d60:	str	r0, [sp, #60]	; 0x3c
   17d64:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17d68:	cmp	r0, #2
   17d6c:	bne	17de0 <__assert_fail@plt+0x6144>
   17d70:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17d74:	tst	r0, #1
   17d78:	bne	18408 <__assert_fail@plt+0x676c>
   17d7c:	ldr	r2, [sp, #56]	; 0x38
   17d80:	clz	r1, ip
   17d84:	mov	lr, #0
   17d88:	lsr	r1, r1, #5
   17d8c:	cmp	r2, #0
   17d90:	mov	r0, r2
   17d94:	movwne	r0, #1
   17d98:	orrs	r0, r0, r1
   17d9c:	moveq	r2, ip
   17da0:	moveq	ip, r0
   17da4:	cmp	r8, ip
   17da8:	str	r2, [sp, #56]	; 0x38
   17dac:	movcc	r0, #39	; 0x27
   17db0:	strbcc	r0, [r5, r8]
   17db4:	add	r0, r8, #1
   17db8:	cmp	r0, ip
   17dbc:	movcc	r1, #92	; 0x5c
   17dc0:	strbcc	r1, [r5, r0]
   17dc4:	add	r0, r8, #2
   17dc8:	add	r8, r8, #3
   17dcc:	cmp	r0, ip
   17dd0:	movcc	r1, #39	; 0x27
   17dd4:	strbcc	r1, [r5, r0]
   17dd8:	mov	r0, #0
   17ddc:	str	r0, [fp, #-56]	; 0xffffffc8
   17de0:	mov	r9, #1
   17de4:	b	17ad8 <__assert_fail@plt+0x5e3c>
   17de8:	ldr	r0, [sp, #40]	; 0x28
   17dec:	str	lr, [sp, #44]	; 0x2c
   17df0:	str	ip, [sp, #88]	; 0x58
   17df4:	cmp	r0, #1
   17df8:	bne	17ea8 <__assert_fail@plt+0x620c>
   17dfc:	str	sl, [sp, #36]	; 0x24
   17e00:	bl	11a5c <__ctype_b_loc@plt>
   17e04:	ldr	r0, [r0]
   17e08:	ldr	r4, [fp, #-80]	; 0xffffffb0
   17e0c:	mov	r1, #1
   17e10:	add	r0, r0, r6, lsl #1
   17e14:	ldrb	r0, [r0, #1]
   17e18:	ubfx	r9, r0, #6, #1
   17e1c:	ldr	r0, [sp, #52]	; 0x34
   17e20:	ldr	lr, [sp, #44]	; 0x2c
   17e24:	cmp	r1, #1
   17e28:	orr	r3, r9, r0
   17e2c:	bhi	180a8 <__assert_fail@plt+0x640c>
   17e30:	tst	r3, #1
   17e34:	beq	180a8 <__assert_fail@plt+0x640c>
   17e38:	ldr	sl, [sp, #36]	; 0x24
   17e3c:	ldr	ip, [sp, #88]	; 0x58
   17e40:	b	17ad8 <__assert_fail@plt+0x5e3c>
   17e44:	ldr	r1, [sp, #48]	; 0x30
   17e48:	mov	r0, #0
   17e4c:	str	r0, [fp, #-56]	; 0xffffffc8
   17e50:	mov	r0, #92	; 0x5c
   17e54:	cmp	r1, #0
   17e58:	beq	17e68 <__assert_fail@plt+0x61cc>
   17e5c:	mov	r6, #92	; 0x5c
   17e60:	mov	r9, #0
   17e64:	b	1826c <__assert_fail@plt+0x65d0>
   17e68:	mov	r1, #0
   17e6c:	mov	r9, #0
   17e70:	str	r1, [fp, #-56]	; 0xffffffc8
   17e74:	ldr	r1, [sp, #84]	; 0x54
   17e78:	tst	r1, #1
   17e7c:	mov	r1, #0
   17e80:	beq	17ad8 <__assert_fail@plt+0x5e3c>
   17e84:	b	17b20 <__assert_fail@plt+0x5e84>
   17e88:	ldr	r0, [sp, #32]
   17e8c:	mov	r6, #0
   17e90:	mov	r9, #0
   17e94:	cmp	r0, #0
   17e98:	mov	r0, #0
   17e9c:	str	r0, [fp, #-56]	; 0xffffffc8
   17ea0:	beq	17ad8 <__assert_fail@plt+0x5e3c>
   17ea4:	b	182c4 <__assert_fail@plt+0x6628>
   17ea8:	mov	r0, #0
   17eac:	cmn	sl, #1
   17eb0:	sub	r3, fp, #40	; 0x28
   17eb4:	str	r0, [fp, #-36]	; 0xffffffdc
   17eb8:	str	r0, [fp, #-40]	; 0xffffffd8
   17ebc:	bne	17ed4 <__assert_fail@plt+0x6238>
   17ec0:	mov	r0, r4
   17ec4:	bl	11a98 <strlen@plt>
   17ec8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   17ecc:	sub	r3, fp, #40	; 0x28
   17ed0:	mov	sl, r0
   17ed4:	ldr	r0, [sp, #72]	; 0x48
   17ed8:	mov	r9, #1
   17edc:	mov	r1, #0
   17ee0:	str	sl, [sp, #36]	; 0x24
   17ee4:	add	r0, r0, r7
   17ee8:	str	r0, [sp, #20]
   17eec:	add	r0, r1, r7
   17ef0:	str	r1, [sp, #24]
   17ef4:	add	r1, r4, r0
   17ef8:	mov	r4, r0
   17efc:	sub	r2, sl, r0
   17f00:	sub	r0, fp, #44	; 0x2c
   17f04:	bl	1a228 <__assert_fail@plt+0x858c>
   17f08:	cmp	r0, #0
   17f0c:	beq	18318 <__assert_fail@plt+0x667c>
   17f10:	cmn	r0, #1
   17f14:	beq	182d0 <__assert_fail@plt+0x6634>
   17f18:	ldr	r2, [sp, #36]	; 0x24
   17f1c:	cmn	r0, #2
   17f20:	beq	182d8 <__assert_fail@plt+0x663c>
   17f24:	ldr	r2, [sp, #64]	; 0x40
   17f28:	ldr	ip, [sp, #88]	; 0x58
   17f2c:	ldr	r4, [sp, #84]	; 0x54
   17f30:	ldr	lr, [fp, #-48]	; 0xffffffd0
   17f34:	cmp	r0, #2
   17f38:	mov	r1, #0
   17f3c:	movwcc	r1, #1
   17f40:	eor	r2, r2, #1
   17f44:	orrs	r1, r2, r1
   17f48:	bne	17f98 <__assert_fail@plt+0x62fc>
   17f4c:	ldr	r1, [sp, #24]
   17f50:	ldr	r2, [sp, #20]
   17f54:	add	r1, r2, r1
   17f58:	sub	r2, r0, #1
   17f5c:	ldrb	r3, [r1]
   17f60:	sub	r5, r3, #94	; 0x5e
   17f64:	cmp	r5, #30
   17f68:	bhi	17f80 <__assert_fail@plt+0x62e4>
   17f6c:	mov	r4, #1
   17f70:	mov	sl, #1073741829	; 0x40000005
   17f74:	tst	sl, r4, lsl r5
   17f78:	ldr	r4, [sp, #84]	; 0x54
   17f7c:	bne	183e0 <__assert_fail@plt+0x6744>
   17f80:	sub	r3, r3, #91	; 0x5b
   17f84:	cmp	r3, #2
   17f88:	bcc	183e0 <__assert_fail@plt+0x6744>
   17f8c:	add	r1, r1, #1
   17f90:	subs	r2, r2, #1
   17f94:	bne	17f5c <__assert_fail@plt+0x62c0>
   17f98:	ldr	r5, [sp, #24]
   17f9c:	str	lr, [fp, #-48]	; 0xffffffd0
   17fa0:	add	r5, r0, r5
   17fa4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17fa8:	bl	11960 <iswprint@plt>
   17fac:	cmp	r0, #0
   17fb0:	sub	r4, fp, #40	; 0x28
   17fb4:	movwne	r0, #1
   17fb8:	and	r9, r9, r0
   17fbc:	mov	r0, r4
   17fc0:	bl	1190c <mbsinit@plt>
   17fc4:	mov	r1, r5
   17fc8:	mov	r3, r4
   17fcc:	ldr	sl, [sp, #36]	; 0x24
   17fd0:	ldr	r5, [fp, #-84]	; 0xffffffac
   17fd4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   17fd8:	cmp	r0, #0
   17fdc:	beq	17eec <__assert_fail@plt+0x6250>
   17fe0:	b	17e1c <__assert_fail@plt+0x6180>
   17fe4:	mov	r8, r0
   17fe8:	b	17ad8 <__assert_fail@plt+0x5e3c>
   17fec:	mov	r0, #0
   17ff0:	str	r0, [fp, #-56]	; 0xffffffc8
   17ff4:	ldr	r0, [sp, #28]
   17ff8:	cmp	r0, #0
   17ffc:	beq	180a0 <__assert_fail@plt+0x6404>
   18000:	add	r0, r7, #2
   18004:	mov	r1, sl
   18008:	cmp	r0, sl
   1800c:	bcs	180a0 <__assert_fail@plt+0x6404>
   18010:	add	r1, r7, r4
   18014:	ldrb	r1, [r1, #1]
   18018:	cmp	r1, #63	; 0x3f
   1801c:	bne	180a0 <__assert_fail@plt+0x6404>
   18020:	ldrb	r9, [r4, r0]
   18024:	sub	r2, r9, #33	; 0x21
   18028:	cmp	r2, #29
   1802c:	bhi	180a0 <__assert_fail@plt+0x6404>
   18030:	mov	r1, r4
   18034:	movw	r4, #20929	; 0x51c1
   18038:	mov	r3, #1
   1803c:	movt	r4, #14336	; 0x3800
   18040:	tst	r4, r3, lsl r2
   18044:	beq	1832c <__assert_fail@plt+0x6690>
   18048:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1804c:	tst	r2, #1
   18050:	bne	184fc <__assert_fail@plt+0x6860>
   18054:	cmp	r8, ip
   18058:	mov	r4, r1
   1805c:	mov	r7, r0
   18060:	mov	r6, r9
   18064:	movcc	r2, #63	; 0x3f
   18068:	strbcc	r2, [r5, r8]
   1806c:	add	r2, r8, #1
   18070:	cmp	r2, ip
   18074:	movcc	r3, #34	; 0x22
   18078:	strbcc	r3, [r5, r2]
   1807c:	add	r2, r8, #2
   18080:	cmp	r2, ip
   18084:	movcc	r3, #34	; 0x22
   18088:	strbcc	r3, [r5, r2]
   1808c:	add	r2, r8, #3
   18090:	add	r8, r8, #4
   18094:	cmp	r2, ip
   18098:	movcc	r3, #63	; 0x3f
   1809c:	strbcc	r3, [r5, r2]
   180a0:	mov	r9, #0
   180a4:	b	17ad8 <__assert_fail@plt+0x5e3c>
   180a8:	ldr	sl, [sp, #36]	; 0x24
   180ac:	add	r0, r1, r7
   180b0:	mov	r2, #0
   180b4:	str	r3, [sp, #24]
   180b8:	str	r0, [fp, #-56]	; 0xffffffc8
   180bc:	tst	r3, #1
   180c0:	beq	180ec <__assert_fail@plt+0x6450>
   180c4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   180c8:	tst	r0, #1
   180cc:	beq	181b4 <__assert_fail@plt+0x6518>
   180d0:	ldr	r1, [sp, #88]	; 0x58
   180d4:	mov	r0, r3
   180d8:	cmp	r8, r1
   180dc:	movcc	r1, #92	; 0x5c
   180e0:	strbcc	r1, [r5, r8]
   180e4:	add	r8, r8, #1
   180e8:	b	181b8 <__assert_fail@plt+0x651c>
   180ec:	ldr	r1, [fp, #-76]	; 0xffffffb4
   180f0:	tst	r1, #1
   180f4:	bne	18404 <__assert_fail@plt+0x6768>
   180f8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   180fc:	subs	r2, r1, #2
   18100:	movwne	r2, #1
   18104:	orr	r2, r2, lr
   18108:	tst	r2, #1
   1810c:	bne	18150 <__assert_fail@plt+0x64b4>
   18110:	ldr	r1, [sp, #88]	; 0x58
   18114:	add	r2, r8, #1
   18118:	mov	lr, #1
   1811c:	cmp	r8, r1
   18120:	movcc	r1, #39	; 0x27
   18124:	strbcc	r1, [r5, r8]
   18128:	ldr	r1, [sp, #88]	; 0x58
   1812c:	cmp	r2, r1
   18130:	movcc	r1, #36	; 0x24
   18134:	strbcc	r1, [r5, r2]
   18138:	ldr	r1, [sp, #88]	; 0x58
   1813c:	add	r2, r8, #2
   18140:	add	r8, r8, #3
   18144:	cmp	r2, r1
   18148:	movcc	r1, #39	; 0x27
   1814c:	strbcc	r1, [r5, r2]
   18150:	ldr	r1, [sp, #88]	; 0x58
   18154:	add	r2, r8, #1
   18158:	mov	r0, r3
   1815c:	cmp	r8, r1
   18160:	movcc	r1, #92	; 0x5c
   18164:	strbcc	r1, [r5, r8]
   18168:	ldr	r1, [sp, #88]	; 0x58
   1816c:	cmp	r2, r1
   18170:	bcs	18184 <__assert_fail@plt+0x64e8>
   18174:	uxtb	r3, r6
   18178:	mov	r1, #48	; 0x30
   1817c:	orr	r3, r1, r3, lsr #6
   18180:	strb	r3, [r5, r2]
   18184:	ldr	r1, [sp, #88]	; 0x58
   18188:	add	r2, r8, #2
   1818c:	add	r8, r8, #3
   18190:	cmp	r2, r1
   18194:	lsrcc	r3, r6, #3
   18198:	movcc	r1, #6
   1819c:	bficc	r3, r1, #3, #29
   181a0:	mov	r1, #6
   181a4:	bfi	r6, r1, #3, #29
   181a8:	strbcc	r3, [r5, r2]
   181ac:	mov	r2, #1
   181b0:	b	181c0 <__assert_fail@plt+0x6524>
   181b4:	mov	r0, r3
   181b8:	mov	r1, #0
   181bc:	str	r1, [fp, #-52]	; 0xffffffcc
   181c0:	mov	ip, r2
   181c4:	and	r1, r2, #1
   181c8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   181cc:	add	r3, r7, #1
   181d0:	cmp	r2, r3
   181d4:	bls	1825c <__assert_fail@plt+0x65c0>
   181d8:	cmp	r1, #0
   181dc:	mvn	r5, lr
   181e0:	movwne	r1, #1
   181e4:	orr	r5, r5, r1
   181e8:	tst	r5, #1
   181ec:	bne	18230 <__assert_fail@plt+0x6594>
   181f0:	ldr	r1, [sp, #88]	; 0x58
   181f4:	ldr	r5, [fp, #-84]	; 0xffffffac
   181f8:	mov	r2, r4
   181fc:	ldr	r4, [sp, #88]	; 0x58
   18200:	ldr	r0, [sp, #24]
   18204:	mov	lr, #0
   18208:	cmp	r8, r1
   1820c:	movcc	r1, #39	; 0x27
   18210:	strbcc	r1, [r5, r8]
   18214:	add	r1, r8, #1
   18218:	add	r8, r8, #2
   1821c:	cmp	r1, r4
   18220:	movcc	r4, #39	; 0x27
   18224:	strbcc	r4, [r5, r1]
   18228:	mov	r4, r2
   1822c:	b	18234 <__assert_fail@plt+0x6598>
   18230:	ldr	r5, [fp, #-84]	; 0xffffffac
   18234:	ldr	r1, [sp, #88]	; 0x58
   18238:	mov	r2, ip
   1823c:	cmp	r8, r1
   18240:	ldr	r1, [sp, #72]	; 0x48
   18244:	strbcc	r6, [r5, r8]
   18248:	add	r8, r8, #1
   1824c:	ldrb	r6, [r1, r7]
   18250:	mov	r7, r3
   18254:	mov	r3, r0
   18258:	b	180bc <__assert_fail@plt+0x6420>
   1825c:	ldr	ip, [sp, #88]	; 0x58
   18260:	cmp	r1, #0
   18264:	movwne	r1, #1
   18268:	str	r1, [fp, #-56]	; 0xffffffc8
   1826c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18270:	cmp	r0, #0
   18274:	bne	182a4 <__assert_fail@plt+0x6608>
   18278:	tst	lr, #1
   1827c:	beq	182a4 <__assert_fail@plt+0x6608>
   18280:	cmp	r8, ip
   18284:	mov	lr, #0
   18288:	movcc	r0, #39	; 0x27
   1828c:	strbcc	r0, [r5, r8]
   18290:	add	r0, r8, #1
   18294:	add	r8, r8, #2
   18298:	cmp	r0, ip
   1829c:	movcc	r1, #39	; 0x27
   182a0:	strbcc	r1, [r5, r0]
   182a4:	mov	r1, r9
   182a8:	mov	r0, r6
   182ac:	cmp	r8, ip
   182b0:	strbcc	r0, [r5, r8]
   182b4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   182b8:	add	r8, r8, #1
   182bc:	and	r0, r0, r1
   182c0:	str	r0, [fp, #-48]	; 0xffffffd0
   182c4:	mov	r3, sl
   182c8:	add	r7, r7, #1
   182cc:	b	177bc <__assert_fail@plt+0x5b20>
   182d0:	mov	r9, #0
   182d4:	b	18318 <__assert_fail@plt+0x667c>
   182d8:	mov	r9, #0
   182dc:	cmp	r2, r4
   182e0:	bls	18318 <__assert_fail@plt+0x667c>
   182e4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   182e8:	ldr	r1, [sp, #24]
   182ec:	add	r0, r4, r7
   182f0:	mov	r3, r1
   182f4:	ldrb	r1, [r0, r1]
   182f8:	cmp	r1, #0
   182fc:	beq	18324 <__assert_fail@plt+0x6688>
   18300:	add	r3, r3, #1
   18304:	add	r1, r7, r3
   18308:	cmp	r1, r2
   1830c:	mov	r1, r3
   18310:	bcc	182f0 <__assert_fail@plt+0x6654>
   18314:	b	17e1c <__assert_fail@plt+0x6180>
   18318:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1831c:	ldr	r1, [sp, #24]
   18320:	b	17e1c <__assert_fail@plt+0x6180>
   18324:	mov	r1, r3
   18328:	b	17e1c <__assert_fail@plt+0x6180>
   1832c:	mov	r9, #0
   18330:	mov	r4, r1
   18334:	b	17ad8 <__assert_fail@plt+0x5e3c>
   18338:	mov	sl, r7
   1833c:	b	18344 <__assert_fail@plt+0x66a8>
   18340:	mvn	sl, #0
   18344:	ldr	r1, [fp, #-68]	; 0xffffffbc
   18348:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1834c:	eor	r0, r1, #2
   18350:	orr	r0, r0, r8
   18354:	clz	r0, r0
   18358:	lsr	r0, r0, #5
   1835c:	tst	r2, r0
   18360:	bne	18408 <__assert_fail@plt+0x676c>
   18364:	subs	r0, r1, #2
   18368:	movwne	r0, #1
   1836c:	orr	r0, r2, r0
   18370:	tst	r0, #1
   18374:	ldreq	r0, [sp, #60]	; 0x3c
   18378:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   1837c:	eoreq	r0, r0, #1
   18380:	tsteq	r0, #1
   18384:	bne	1849c <__assert_fail@plt+0x6800>
   18388:	tst	r1, #1
   1838c:	bne	18468 <__assert_fail@plt+0x67cc>
   18390:	ldr	r6, [sp, #56]	; 0x38
   18394:	mov	r9, #0
   18398:	cmp	r6, #0
   1839c:	beq	18494 <__assert_fail@plt+0x67f8>
   183a0:	ldr	r0, [sp, #84]	; 0x54
   183a4:	mov	r1, #0
   183a8:	mov	r7, #2
   183ac:	cmp	ip, #0
   183b0:	str	r1, [fp, #-48]	; 0xffffffd0
   183b4:	mov	r1, #0
   183b8:	str	r1, [fp, #-76]	; 0xffffffb4
   183bc:	beq	17524 <__assert_fail@plt+0x5888>
   183c0:	b	1849c <__assert_fail@plt+0x6800>
   183c4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   183c8:	ldr	r1, [fp, #12]
   183cc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   183d0:	mov	r5, r3
   183d4:	mov	ip, r6
   183d8:	mov	r3, sl
   183dc:	b	1842c <__assert_fail@plt+0x6790>
   183e0:	tst	r4, #1
   183e4:	ldr	r5, [fp, #-84]	; 0xffffffac
   183e8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   183ec:	ldr	r1, [fp, #12]
   183f0:	ldr	r3, [sp, #36]	; 0x24
   183f4:	mov	r0, #2
   183f8:	movwne	r0, #4
   183fc:	mov	r2, r0
   18400:	b	1842c <__assert_fail@plt+0x6790>
   18404:	ldr	ip, [sp, #88]	; 0x58
   18408:	ldr	r1, [sp, #84]	; 0x54
   1840c:	mov	r0, #2
   18410:	tst	r1, #1
   18414:	movwne	r0, #4
   18418:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1841c:	ldr	r1, [fp, #12]
   18420:	mov	r3, sl
   18424:	cmp	r2, #2
   18428:	moveq	r2, r0
   1842c:	mov	r0, #0
   18430:	bic	r1, r1, #2
   18434:	str	r2, [sp]
   18438:	mov	r2, r4
   1843c:	str	r0, [sp, #8]
   18440:	ldr	r0, [sp, #76]	; 0x4c
   18444:	str	r1, [sp, #4]
   18448:	mov	r1, ip
   1844c:	str	r0, [sp, #12]
   18450:	ldr	r0, [sp, #80]	; 0x50
   18454:	str	r0, [sp, #16]
   18458:	mov	r0, r5
   1845c:	bl	17498 <__assert_fail@plt+0x57fc>
   18460:	mov	r8, r0
   18464:	b	184e8 <__assert_fail@plt+0x684c>
   18468:	mov	r0, #5
   1846c:	ldr	r1, [sp, #56]	; 0x38
   18470:	ldr	r2, [fp, #-80]	; 0xffffffb0
   18474:	mov	r3, sl
   18478:	str	r0, [sp]
   1847c:	ldr	r0, [fp, #12]
   18480:	str	r0, [sp, #4]
   18484:	ldr	r0, [fp, #16]
   18488:	str	r0, [sp, #8]
   1848c:	ldr	r0, [sp, #76]	; 0x4c
   18490:	b	1844c <__assert_fail@plt+0x67b0>
   18494:	mov	r0, #0
   18498:	str	r0, [fp, #-76]	; 0xffffffb4
   1849c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   184a0:	cmp	r1, #0
   184a4:	beq	184dc <__assert_fail@plt+0x6840>
   184a8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   184ac:	tst	r0, #1
   184b0:	bne	184dc <__assert_fail@plt+0x6840>
   184b4:	ldrb	r0, [r1]
   184b8:	cmp	r0, #0
   184bc:	beq	184dc <__assert_fail@plt+0x6840>
   184c0:	add	r1, r1, #1
   184c4:	cmp	r8, ip
   184c8:	strbcc	r0, [r5, r8]
   184cc:	add	r8, r8, #1
   184d0:	ldrb	r0, [r1], #1
   184d4:	cmp	r0, #0
   184d8:	bne	184c4 <__assert_fail@plt+0x6828>
   184dc:	cmp	r8, ip
   184e0:	movcc	r0, #0
   184e4:	strbcc	r0, [r5, r8]
   184e8:	mov	r0, r8
   184ec:	sub	sp, fp, #28
   184f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184f4:	mov	r0, #4
   184f8:	b	18418 <__assert_fail@plt+0x677c>
   184fc:	mov	r4, r1
   18500:	b	18408 <__assert_fail@plt+0x676c>
   18504:	bl	11c60 <abort@plt>
   18508:	mov	r3, r2
   1850c:	mov	r2, #0
   18510:	b	18514 <__assert_fail@plt+0x6878>
   18514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18518:	add	fp, sp, #28
   1851c:	sub	sp, sp, #36	; 0x24
   18520:	movw	r8, #45720	; 0xb298
   18524:	cmp	r3, #0
   18528:	mov	r4, r2
   1852c:	str	r2, [sp, #24]
   18530:	mov	r5, r1
   18534:	mov	r6, r0
   18538:	str	r0, [sp, #20]
   1853c:	movt	r8, #3
   18540:	movne	r8, r3
   18544:	bl	11ac8 <__errno_location@plt>
   18548:	str	r0, [sp, #28]
   1854c:	ldr	r1, [r8, #40]	; 0x28
   18550:	ldr	r2, [r8, #44]	; 0x2c
   18554:	ldr	r7, [r0]
   18558:	cmp	r4, #0
   1855c:	add	sl, r8, #8
   18560:	mov	r0, #0
   18564:	ldm	r8, {r3, r9}
   18568:	orreq	r9, r9, #1
   1856c:	stm	sp, {r3, r9, sl}
   18570:	str	r1, [sp, #12]
   18574:	str	r2, [sp, #16]
   18578:	mov	r1, #0
   1857c:	mov	r2, r6
   18580:	mov	r3, r5
   18584:	str	r7, [sp, #32]
   18588:	mov	r7, r5
   1858c:	bl	17498 <__assert_fail@plt+0x57fc>
   18590:	add	r4, r0, #1
   18594:	mov	r5, r0
   18598:	mov	r0, r4
   1859c:	bl	192e4 <__assert_fail@plt+0x7648>
   185a0:	mov	r6, r0
   185a4:	ldr	r0, [r8]
   185a8:	ldr	r2, [r8, #44]	; 0x2c
   185ac:	ldr	r1, [r8, #40]	; 0x28
   185b0:	mov	r3, r7
   185b4:	stm	sp, {r0, r9, sl}
   185b8:	str	r2, [sp, #16]
   185bc:	ldr	r2, [sp, #20]
   185c0:	str	r1, [sp, #12]
   185c4:	mov	r0, r6
   185c8:	mov	r1, r4
   185cc:	bl	17498 <__assert_fail@plt+0x57fc>
   185d0:	ldr	r0, [sp, #24]
   185d4:	ldr	r1, [sp, #32]
   185d8:	ldr	r2, [sp, #28]
   185dc:	cmp	r0, #0
   185e0:	str	r1, [r2]
   185e4:	strne	r5, [r0]
   185e8:	mov	r0, r6
   185ec:	sub	sp, fp, #28
   185f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   185f8:	add	fp, sp, #24
   185fc:	movw	r5, #45500	; 0xb1bc
   18600:	movw	r8, #45496	; 0xb1b8
   18604:	movt	r5, #3
   18608:	movt	r8, #3
   1860c:	ldr	r0, [r5]
   18610:	ldr	r4, [r8]
   18614:	cmp	r0, #2
   18618:	blt	18644 <__assert_fail@plt+0x69a8>
   1861c:	add	r7, r4, #12
   18620:	mov	r6, #0
   18624:	ldr	r0, [r7, r6, lsl #3]
   18628:	bl	1a12c <__assert_fail@plt+0x8490>
   1862c:	ldr	r1, [r5]
   18630:	add	r2, r6, #2
   18634:	add	r0, r6, #1
   18638:	mov	r6, r0
   1863c:	cmp	r2, r1
   18640:	blt	18624 <__assert_fail@plt+0x6988>
   18644:	ldr	r0, [r4, #4]
   18648:	movw	r9, #45768	; 0xb2c8
   1864c:	movw	r7, #45504	; 0xb1c0
   18650:	movt	r9, #3
   18654:	movt	r7, #3
   18658:	cmp	r0, r9
   1865c:	beq	1866c <__assert_fail@plt+0x69d0>
   18660:	bl	1a12c <__assert_fail@plt+0x8490>
   18664:	mov	r0, #256	; 0x100
   18668:	stm	r7, {r0, r9}
   1866c:	cmp	r4, r7
   18670:	beq	18680 <__assert_fail@plt+0x69e4>
   18674:	mov	r0, r4
   18678:	bl	1a12c <__assert_fail@plt+0x8490>
   1867c:	str	r7, [r8]
   18680:	mov	r0, #1
   18684:	str	r0, [r5]
   18688:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1868c:	movw	r3, #45720	; 0xb298
   18690:	mvn	r2, #0
   18694:	movt	r3, #3
   18698:	b	1869c <__assert_fail@plt+0x6a00>
   1869c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186a0:	add	fp, sp, #28
   186a4:	sub	sp, sp, #44	; 0x2c
   186a8:	mov	r7, r3
   186ac:	str	r2, [sp, #36]	; 0x24
   186b0:	str	r1, [sp, #32]
   186b4:	mov	r5, r0
   186b8:	bl	11ac8 <__errno_location@plt>
   186bc:	cmp	r5, #0
   186c0:	bmi	18830 <__assert_fail@plt+0x6b94>
   186c4:	cmn	r5, #-2147483647	; 0x80000001
   186c8:	beq	18830 <__assert_fail@plt+0x6b94>
   186cc:	movw	r8, #45500	; 0xb1bc
   186d0:	movw	r4, #45496	; 0xb1b8
   186d4:	str	r0, [sp, #28]
   186d8:	ldr	r0, [r0]
   186dc:	movt	r8, #3
   186e0:	movt	r4, #3
   186e4:	ldr	r1, [r8]
   186e8:	ldr	r6, [r4]
   186ec:	str	r0, [sp, #24]
   186f0:	cmp	r1, r5
   186f4:	ble	18700 <__assert_fail@plt+0x6a64>
   186f8:	mov	sl, r6
   186fc:	b	1876c <__assert_fail@plt+0x6ad0>
   18700:	movw	r9, #45504	; 0xb1c0
   18704:	mov	r0, #8
   18708:	str	r1, [fp, #-32]	; 0xffffffe0
   1870c:	sub	r1, r5, r1
   18710:	mvn	r3, #-2147483648	; 0x80000000
   18714:	movt	r9, #3
   18718:	str	r0, [sp]
   1871c:	add	r2, r1, #1
   18720:	sub	r1, fp, #32
   18724:	subs	r0, r6, r9
   18728:	movne	r0, r6
   1872c:	bl	19414 <__assert_fail@plt+0x7778>
   18730:	mov	sl, r0
   18734:	cmp	r6, r9
   18738:	str	r0, [r4]
   1873c:	bne	18748 <__assert_fail@plt+0x6aac>
   18740:	ldrd	r0, [r9]
   18744:	stm	sl, {r0, r1}
   18748:	ldr	r1, [r8]
   1874c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18750:	add	r0, sl, r1, lsl #3
   18754:	sub	r1, r2, r1
   18758:	lsl	r2, r1, #3
   1875c:	mov	r1, #0
   18760:	bl	11b04 <memset@plt>
   18764:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18768:	str	r0, [r8]
   1876c:	mov	r9, sl
   18770:	ldm	r7, {r0, r1}
   18774:	orr	r8, r1, #1
   18778:	add	r1, r7, #8
   1877c:	ldr	r2, [r7, #40]	; 0x28
   18780:	ldr	r3, [r7, #44]	; 0x2c
   18784:	ldr	r6, [r9, r5, lsl #3]!
   18788:	str	r1, [sp, #20]
   1878c:	ldr	r4, [r9, #4]!
   18790:	stm	sp, {r0, r8}
   18794:	add	r0, sp, #8
   18798:	stm	r0, {r1, r2, r3}
   1879c:	ldr	r2, [sp, #32]
   187a0:	ldr	r3, [sp, #36]	; 0x24
   187a4:	mov	r1, r6
   187a8:	mov	r0, r4
   187ac:	bl	17498 <__assert_fail@plt+0x57fc>
   187b0:	cmp	r6, r0
   187b4:	bhi	18818 <__assert_fail@plt+0x6b7c>
   187b8:	add	r6, r0, #1
   187bc:	movw	r0, #45768	; 0xb2c8
   187c0:	movt	r0, #3
   187c4:	str	r6, [sl, r5, lsl #3]
   187c8:	cmp	r4, r0
   187cc:	beq	187d8 <__assert_fail@plt+0x6b3c>
   187d0:	mov	r0, r4
   187d4:	bl	1a12c <__assert_fail@plt+0x8490>
   187d8:	mov	r0, r6
   187dc:	bl	192e4 <__assert_fail@plt+0x7648>
   187e0:	str	r0, [r9]
   187e4:	mov	r4, r0
   187e8:	add	r3, sp, #8
   187ec:	ldr	r0, [r7]
   187f0:	ldr	r1, [r7, #40]	; 0x28
   187f4:	ldr	r2, [r7, #44]	; 0x2c
   187f8:	stm	sp, {r0, r8}
   187fc:	ldr	r0, [sp, #20]
   18800:	stm	r3, {r0, r1, r2}
   18804:	ldr	r2, [sp, #32]
   18808:	ldr	r3, [sp, #36]	; 0x24
   1880c:	mov	r0, r4
   18810:	mov	r1, r6
   18814:	bl	17498 <__assert_fail@plt+0x57fc>
   18818:	ldr	r0, [sp, #28]
   1881c:	ldr	r1, [sp, #24]
   18820:	str	r1, [r0]
   18824:	mov	r0, r4
   18828:	sub	sp, fp, #28
   1882c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18830:	bl	11c60 <abort@plt>
   18834:	movw	r3, #45720	; 0xb298
   18838:	movt	r3, #3
   1883c:	b	1869c <__assert_fail@plt+0x6a00>
   18840:	movw	r3, #45720	; 0xb298
   18844:	mov	r1, r0
   18848:	mov	r0, #0
   1884c:	mvn	r2, #0
   18850:	movt	r3, #3
   18854:	b	1869c <__assert_fail@plt+0x6a00>
   18858:	movw	r3, #45720	; 0xb298
   1885c:	mov	r2, r1
   18860:	mov	r1, r0
   18864:	mov	r0, #0
   18868:	movt	r3, #3
   1886c:	b	1869c <__assert_fail@plt+0x6a00>
   18870:	push	{fp, lr}
   18874:	mov	fp, sp
   18878:	sub	sp, sp, #48	; 0x30
   1887c:	vmov.i32	q8, #0	; 0x00000000
   18880:	mov	ip, #32
   18884:	mov	r3, sp
   18888:	mov	lr, r2
   1888c:	cmp	r1, #10
   18890:	add	r2, r3, #16
   18894:	vst1.64	{d16-d17}, [r3], ip
   18898:	vst1.64	{d16-d17}, [r2]
   1889c:	vst1.64	{d16-d17}, [r3]
   188a0:	beq	188c0 <__assert_fail@plt+0x6c24>
   188a4:	str	r1, [sp]
   188a8:	mov	r3, sp
   188ac:	mov	r1, lr
   188b0:	mvn	r2, #0
   188b4:	bl	1869c <__assert_fail@plt+0x6a00>
   188b8:	mov	sp, fp
   188bc:	pop	{fp, pc}
   188c0:	bl	11c60 <abort@plt>
   188c4:	push	{r4, sl, fp, lr}
   188c8:	add	fp, sp, #8
   188cc:	sub	sp, sp, #48	; 0x30
   188d0:	vmov.i32	q8, #0	; 0x00000000
   188d4:	mov	ip, r3
   188d8:	mov	r3, sp
   188dc:	mov	lr, #32
   188e0:	cmp	r1, #10
   188e4:	add	r4, r3, #16
   188e8:	vst1.64	{d16-d17}, [r3], lr
   188ec:	vst1.64	{d16-d17}, [r4]
   188f0:	vst1.64	{d16-d17}, [r3]
   188f4:	beq	18914 <__assert_fail@plt+0x6c78>
   188f8:	str	r1, [sp]
   188fc:	mov	r1, r2
   18900:	mov	r3, sp
   18904:	mov	r2, ip
   18908:	bl	1869c <__assert_fail@plt+0x6a00>
   1890c:	sub	sp, fp, #8
   18910:	pop	{r4, sl, fp, pc}
   18914:	bl	11c60 <abort@plt>
   18918:	mov	r2, r1
   1891c:	mov	r1, r0
   18920:	mov	r0, #0
   18924:	b	18870 <__assert_fail@plt+0x6bd4>
   18928:	mov	r3, r2
   1892c:	mov	r2, r1
   18930:	mov	r1, r0
   18934:	mov	r0, #0
   18938:	b	188c4 <__assert_fail@plt+0x6c28>
   1893c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18940:	add	fp, sp, #24
   18944:	sub	sp, sp, #48	; 0x30
   18948:	movw	r8, #45720	; 0xb298
   1894c:	mov	lr, r0
   18950:	mov	r3, sp
   18954:	mov	ip, r1
   18958:	movt	r8, #3
   1895c:	mov	r1, r3
   18960:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   18964:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   18968:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   1896c:	stm	r1, {r0, r4, r5, r6, r7, r9}
   18970:	ubfx	r0, r2, #5, #3
   18974:	and	r2, r2, #31
   18978:	mov	r4, #1
   1897c:	add	r0, r3, r0, lsl #2
   18980:	ldr	r1, [r0, #8]
   18984:	bic	r4, r4, r1, lsr r2
   18988:	eor	r1, r1, r4, lsl r2
   1898c:	mov	r2, ip
   18990:	str	r1, [r0, #8]
   18994:	mov	r0, #0
   18998:	mov	r1, lr
   1899c:	bl	1869c <__assert_fail@plt+0x6a00>
   189a0:	sub	sp, fp, #24
   189a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   189a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   189ac:	add	fp, sp, #24
   189b0:	sub	sp, sp, #48	; 0x30
   189b4:	movw	lr, #45720	; 0xb298
   189b8:	mov	ip, r0
   189bc:	mov	r3, sp
   189c0:	movt	lr, #3
   189c4:	mov	r2, r3
   189c8:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   189cc:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   189d0:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   189d4:	stm	r2, {r0, r4, r5, r6, r7, r8}
   189d8:	ubfx	r0, r1, #5, #3
   189dc:	and	r1, r1, #31
   189e0:	mov	r7, #1
   189e4:	add	r0, r3, r0, lsl #2
   189e8:	ldr	r2, [r0, #8]
   189ec:	bic	r7, r7, r2, lsr r1
   189f0:	eor	r1, r2, r7, lsl r1
   189f4:	mvn	r2, #0
   189f8:	str	r1, [r0, #8]
   189fc:	mov	r0, #0
   18a00:	mov	r1, ip
   18a04:	bl	1869c <__assert_fail@plt+0x6a00>
   18a08:	sub	sp, fp, #24
   18a0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18a10:	push	{r4, r5, r6, r7, fp, lr}
   18a14:	add	fp, sp, #16
   18a18:	sub	sp, sp, #48	; 0x30
   18a1c:	movw	lr, #45720	; 0xb298
   18a20:	mov	ip, r0
   18a24:	mov	r3, sp
   18a28:	movt	lr, #3
   18a2c:	mov	r2, r3
   18a30:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   18a34:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   18a38:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   18a3c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   18a40:	mov	r1, ip
   18a44:	mvn	r2, #0
   18a48:	ldr	r0, [sp, #12]
   18a4c:	orr	r0, r0, #67108864	; 0x4000000
   18a50:	str	r0, [sp, #12]
   18a54:	mov	r0, #0
   18a58:	bl	1869c <__assert_fail@plt+0x6a00>
   18a5c:	sub	sp, fp, #16
   18a60:	pop	{r4, r5, r6, r7, fp, pc}
   18a64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18a68:	add	fp, sp, #24
   18a6c:	sub	sp, sp, #48	; 0x30
   18a70:	movw	r8, #45720	; 0xb298
   18a74:	mov	ip, r1
   18a78:	mov	lr, r0
   18a7c:	mov	r3, sp
   18a80:	movt	r8, #3
   18a84:	mov	r2, r3
   18a88:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   18a8c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   18a90:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   18a94:	stm	r2, {r0, r1, r4, r5, r6, r7}
   18a98:	mov	r1, lr
   18a9c:	mov	r2, ip
   18aa0:	ldr	r0, [sp, #12]
   18aa4:	orr	r0, r0, #67108864	; 0x4000000
   18aa8:	str	r0, [sp, #12]
   18aac:	mov	r0, #0
   18ab0:	bl	1869c <__assert_fail@plt+0x6a00>
   18ab4:	sub	sp, fp, #24
   18ab8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18abc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18ac0:	add	fp, sp, #24
   18ac4:	sub	sp, sp, #96	; 0x60
   18ac8:	vmov.i32	q8, #0	; 0x00000000
   18acc:	mov	lr, sp
   18ad0:	mov	ip, r2
   18ad4:	cmp	r1, #10
   18ad8:	add	r3, lr, #16
   18adc:	mov	r2, lr
   18ae0:	vst1.64	{d16-d17}, [r3]
   18ae4:	mov	r3, #28
   18ae8:	vst1.64	{d16-d17}, [r2], r3
   18aec:	vst1.32	{d16-d17}, [r2]
   18af0:	beq	18b30 <__assert_fail@plt+0x6e94>
   18af4:	str	r1, [sp, #48]	; 0x30
   18af8:	add	r3, sp, #48	; 0x30
   18afc:	ldm	lr!, {r2, r4, r5, r6, r7}
   18b00:	add	r1, r3, #4
   18b04:	stmia	r1!, {r2, r4, r5, r6, r7}
   18b08:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   18b0c:	stm	r1, {r2, r4, r5, r6, r7, r8}
   18b10:	mvn	r2, #0
   18b14:	ldr	r1, [sp, #60]	; 0x3c
   18b18:	orr	r1, r1, #67108864	; 0x4000000
   18b1c:	str	r1, [sp, #60]	; 0x3c
   18b20:	mov	r1, ip
   18b24:	bl	1869c <__assert_fail@plt+0x6a00>
   18b28:	sub	sp, fp, #24
   18b2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18b30:	bl	11c60 <abort@plt>
   18b34:	push	{fp, lr}
   18b38:	mov	fp, sp
   18b3c:	sub	sp, sp, #8
   18b40:	mvn	ip, #0
   18b44:	str	ip, [sp]
   18b48:	bl	18b54 <__assert_fail@plt+0x6eb8>
   18b4c:	mov	sp, fp
   18b50:	pop	{fp, pc}
   18b54:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18b58:	add	fp, sp, #24
   18b5c:	sub	sp, sp, #48	; 0x30
   18b60:	movw	ip, #45720	; 0xb298
   18b64:	mov	lr, r3
   18b68:	mov	r3, sp
   18b6c:	cmp	r1, #0
   18b70:	movt	ip, #3
   18b74:	cmpne	r2, #0
   18b78:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   18b7c:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   18b80:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   18b84:	stm	r3, {r4, r5, r6, r7, r8, r9}
   18b88:	mov	r3, #10
   18b8c:	str	r3, [sp]
   18b90:	bne	18b98 <__assert_fail@plt+0x6efc>
   18b94:	bl	11c60 <abort@plt>
   18b98:	ldr	ip, [fp, #8]
   18b9c:	str	r2, [sp, #44]	; 0x2c
   18ba0:	str	r1, [sp, #40]	; 0x28
   18ba4:	mov	r3, sp
   18ba8:	mov	r1, lr
   18bac:	mov	r2, ip
   18bb0:	bl	1869c <__assert_fail@plt+0x6a00>
   18bb4:	sub	sp, fp, #24
   18bb8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18bbc:	push	{fp, lr}
   18bc0:	mov	fp, sp
   18bc4:	sub	sp, sp, #8
   18bc8:	mov	r3, r2
   18bcc:	mov	r2, r1
   18bd0:	mov	r1, r0
   18bd4:	mvn	r0, #0
   18bd8:	str	r0, [sp]
   18bdc:	mov	r0, #0
   18be0:	bl	18b54 <__assert_fail@plt+0x6eb8>
   18be4:	mov	sp, fp
   18be8:	pop	{fp, pc}
   18bec:	push	{fp, lr}
   18bf0:	mov	fp, sp
   18bf4:	sub	sp, sp, #8
   18bf8:	mov	ip, r2
   18bfc:	mov	r2, r1
   18c00:	mov	r1, r0
   18c04:	str	r3, [sp]
   18c08:	mov	r0, #0
   18c0c:	mov	r3, ip
   18c10:	bl	18b54 <__assert_fail@plt+0x6eb8>
   18c14:	mov	sp, fp
   18c18:	pop	{fp, pc}
   18c1c:	movw	r3, #45512	; 0xb1c8
   18c20:	movt	r3, #3
   18c24:	b	1869c <__assert_fail@plt+0x6a00>
   18c28:	movw	r3, #45512	; 0xb1c8
   18c2c:	mov	r2, r1
   18c30:	mov	r1, r0
   18c34:	mov	r0, #0
   18c38:	movt	r3, #3
   18c3c:	b	1869c <__assert_fail@plt+0x6a00>
   18c40:	movw	r3, #45512	; 0xb1c8
   18c44:	mvn	r2, #0
   18c48:	movt	r3, #3
   18c4c:	b	1869c <__assert_fail@plt+0x6a00>
   18c50:	movw	r3, #45512	; 0xb1c8
   18c54:	mov	r1, r0
   18c58:	mov	r0, #0
   18c5c:	mvn	r2, #0
   18c60:	movt	r3, #3
   18c64:	b	1869c <__assert_fail@plt+0x6a00>
   18c68:	push	{r4, r5, fp, lr}
   18c6c:	add	fp, sp, #8
   18c70:	mov	r5, r0
   18c74:	mov	r4, r1
   18c78:	mov	r0, #0
   18c7c:	mov	r2, #5
   18c80:	mov	r1, r5
   18c84:	bl	11924 <dcgettext@plt>
   18c88:	cmp	r0, r5
   18c8c:	popne	{r4, r5, fp, pc}
   18c90:	bl	284cc <__assert_fail@plt+0x16830>
   18c94:	ldrb	r1, [r0]
   18c98:	and	r1, r1, #223	; 0xdf
   18c9c:	cmp	r1, #71	; 0x47
   18ca0:	beq	18d08 <__assert_fail@plt+0x706c>
   18ca4:	cmp	r1, #85	; 0x55
   18ca8:	bne	18d60 <__assert_fail@plt+0x70c4>
   18cac:	ldrb	r1, [r0, #1]
   18cb0:	and	r1, r1, #223	; 0xdf
   18cb4:	cmp	r1, #84	; 0x54
   18cb8:	bne	18d60 <__assert_fail@plt+0x70c4>
   18cbc:	ldrb	r1, [r0, #2]
   18cc0:	and	r1, r1, #223	; 0xdf
   18cc4:	cmp	r1, #70	; 0x46
   18cc8:	bne	18d60 <__assert_fail@plt+0x70c4>
   18ccc:	ldrb	r1, [r0, #3]
   18cd0:	cmp	r1, #45	; 0x2d
   18cd4:	bne	18d60 <__assert_fail@plt+0x70c4>
   18cd8:	ldrb	r1, [r0, #4]
   18cdc:	cmp	r1, #56	; 0x38
   18ce0:	bne	18d60 <__assert_fail@plt+0x70c4>
   18ce4:	ldrb	r0, [r0, #5]
   18ce8:	cmp	r0, #0
   18cec:	bne	18d60 <__assert_fail@plt+0x70c4>
   18cf0:	ldrb	r1, [r5]
   18cf4:	movw	r2, #40988	; 0xa01c
   18cf8:	movw	r0, #40992	; 0xa020
   18cfc:	movt	r2, #2
   18d00:	movt	r0, #2
   18d04:	b	18d90 <__assert_fail@plt+0x70f4>
   18d08:	ldrb	r1, [r0, #1]
   18d0c:	and	r1, r1, #223	; 0xdf
   18d10:	cmp	r1, #66	; 0x42
   18d14:	bne	18d60 <__assert_fail@plt+0x70c4>
   18d18:	ldrb	r1, [r0, #2]
   18d1c:	cmp	r1, #49	; 0x31
   18d20:	bne	18d60 <__assert_fail@plt+0x70c4>
   18d24:	ldrb	r1, [r0, #3]
   18d28:	cmp	r1, #56	; 0x38
   18d2c:	bne	18d60 <__assert_fail@plt+0x70c4>
   18d30:	ldrb	r1, [r0, #4]
   18d34:	cmp	r1, #48	; 0x30
   18d38:	bne	18d60 <__assert_fail@plt+0x70c4>
   18d3c:	ldrb	r1, [r0, #5]
   18d40:	cmp	r1, #51	; 0x33
   18d44:	bne	18d60 <__assert_fail@plt+0x70c4>
   18d48:	ldrb	r1, [r0, #6]
   18d4c:	cmp	r1, #48	; 0x30
   18d50:	bne	18d60 <__assert_fail@plt+0x70c4>
   18d54:	ldrb	r0, [r0, #7]
   18d58:	cmp	r0, #0
   18d5c:	beq	18d7c <__assert_fail@plt+0x70e0>
   18d60:	movw	r1, #40984	; 0xa018
   18d64:	movw	r0, #38217	; 0x9549
   18d68:	cmp	r4, #9
   18d6c:	movt	r1, #2
   18d70:	movt	r0, #2
   18d74:	moveq	r0, r1
   18d78:	pop	{r4, r5, fp, pc}
   18d7c:	ldrb	r1, [r5]
   18d80:	movw	r2, #40996	; 0xa024
   18d84:	movw	r0, #41000	; 0xa028
   18d88:	movt	r2, #2
   18d8c:	movt	r0, #2
   18d90:	cmp	r1, #96	; 0x60
   18d94:	moveq	r0, r2
   18d98:	pop	{r4, r5, fp, pc}
   18d9c:	push	{r4, r5, fp, lr}
   18da0:	add	fp, sp, #8
   18da4:	mov	r4, r1
   18da8:	mov	r1, #0
   18dac:	mov	r5, r0
   18db0:	mov	r2, r4
   18db4:	bl	11b58 <memchr@plt>
   18db8:	sub	r1, r0, r5
   18dbc:	cmp	r0, #0
   18dc0:	addne	r4, r1, #1
   18dc4:	mov	r0, r4
   18dc8:	pop	{r4, r5, fp, pc}
   18dcc:	push	{r4, r5, r6, r7, fp, lr}
   18dd0:	add	fp, sp, #16
   18dd4:	mov	r4, r0
   18dd8:	cmp	r0, #2
   18ddc:	bhi	18e0c <__assert_fail@plt+0x7170>
   18de0:	mov	r0, r4
   18de4:	bl	286dc <__assert_fail@plt+0x16a40>
   18de8:	mov	r5, r0
   18dec:	bl	11ac8 <__errno_location@plt>
   18df0:	ldr	r7, [r0]
   18df4:	mov	r6, r0
   18df8:	mov	r0, r4
   18dfc:	bl	11c78 <close@plt>
   18e00:	mov	r0, r5
   18e04:	str	r7, [r6]
   18e08:	pop	{r4, r5, r6, r7, fp, pc}
   18e0c:	mov	r0, r4
   18e10:	pop	{r4, r5, r6, r7, fp, pc}
   18e14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18e18:	add	fp, sp, #24
   18e1c:	sub	sp, sp, #32
   18e20:	ldr	r7, [fp, #12]
   18e24:	ldr	r6, [fp, #8]
   18e28:	mov	r4, r2
   18e2c:	mov	r5, r0
   18e30:	cmp	r1, #0
   18e34:	beq	18e54 <__assert_fail@plt+0x71b8>
   18e38:	mov	r2, r1
   18e3c:	movw	r1, #41088	; 0xa080
   18e40:	str	r3, [sp]
   18e44:	mov	r0, r5
   18e48:	mov	r3, r4
   18e4c:	movt	r1, #2
   18e50:	b	18e64 <__assert_fail@plt+0x71c8>
   18e54:	movw	r1, #41100	; 0xa08c
   18e58:	mov	r0, r5
   18e5c:	mov	r2, r4
   18e60:	movt	r1, #2
   18e64:	bl	11ab0 <fprintf@plt>
   18e68:	movw	r1, #41107	; 0xa093
   18e6c:	mov	r0, #0
   18e70:	mov	r2, #5
   18e74:	movt	r1, #2
   18e78:	bl	11924 <dcgettext@plt>
   18e7c:	movw	r1, #41803	; 0xa34b
   18e80:	mov	r2, r0
   18e84:	mov	r0, r5
   18e88:	movw	r3, #2022	; 0x7e6
   18e8c:	movt	r1, #2
   18e90:	bl	11ab0 <fprintf@plt>
   18e94:	movw	r4, #39326	; 0x999e
   18e98:	mov	r1, r5
   18e9c:	movt	r4, #2
   18ea0:	mov	r0, r4
   18ea4:	bl	11c48 <fputs@plt>
   18ea8:	movw	r1, #41111	; 0xa097
   18eac:	mov	r0, #0
   18eb0:	mov	r2, #5
   18eb4:	movt	r1, #2
   18eb8:	bl	11924 <dcgettext@plt>
   18ebc:	movw	r2, #41282	; 0xa142
   18ec0:	mov	r1, r0
   18ec4:	mov	r0, r5
   18ec8:	movt	r2, #2
   18ecc:	bl	11ab0 <fprintf@plt>
   18ed0:	mov	r0, r4
   18ed4:	mov	r1, r5
   18ed8:	bl	11c48 <fputs@plt>
   18edc:	cmp	r7, #9
   18ee0:	bhi	18f40 <__assert_fail@plt+0x72a4>
   18ee4:	add	r0, pc, #0
   18ee8:	ldr	pc, [r0, r7, lsl #2]
   18eec:	andeq	r9, r1, r0, lsr r1
   18ef0:	andeq	r8, r1, r4, lsl pc
   18ef4:	andeq	r8, r1, ip, asr #30
   18ef8:	andeq	r8, r1, r8, ror pc
   18efc:	andeq	r8, r1, r0, lsr #31
   18f00:	andeq	r8, r1, ip, asr #31
   18f04:	andeq	r9, r1, r0
   18f08:	andeq	r9, r1, r0, asr #32
   18f0c:	ldrdeq	r9, [r1], -ip
   18f10:	andeq	r9, r1, r4, lsl #1
   18f14:	movw	r1, #41316	; 0xa164
   18f18:	mov	r0, #0
   18f1c:	mov	r2, #5
   18f20:	movt	r1, #2
   18f24:	bl	11924 <dcgettext@plt>
   18f28:	ldr	r2, [r6]
   18f2c:	mov	r1, r0
   18f30:	mov	r0, r5
   18f34:	sub	sp, fp, #24
   18f38:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18f3c:	b	11ab0 <fprintf@plt>
   18f40:	movw	r1, #41635	; 0xa2a3
   18f44:	movt	r1, #2
   18f48:	b	1908c <__assert_fail@plt+0x73f0>
   18f4c:	movw	r1, #41332	; 0xa174
   18f50:	mov	r0, #0
   18f54:	mov	r2, #5
   18f58:	movt	r1, #2
   18f5c:	bl	11924 <dcgettext@plt>
   18f60:	ldm	r6, {r2, r3}
   18f64:	mov	r1, r0
   18f68:	mov	r0, r5
   18f6c:	sub	sp, fp, #24
   18f70:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18f74:	b	11ab0 <fprintf@plt>
   18f78:	movw	r1, #41355	; 0xa18b
   18f7c:	mov	r0, #0
   18f80:	mov	r2, #5
   18f84:	movt	r1, #2
   18f88:	bl	11924 <dcgettext@plt>
   18f8c:	mov	r1, r0
   18f90:	ldr	r0, [r6, #8]
   18f94:	ldm	r6, {r2, r3}
   18f98:	str	r0, [sp]
   18f9c:	b	19038 <__assert_fail@plt+0x739c>
   18fa0:	movw	r1, #41383	; 0xa1a7
   18fa4:	mov	r0, #0
   18fa8:	mov	r2, #5
   18fac:	movt	r1, #2
   18fb0:	bl	11924 <dcgettext@plt>
   18fb4:	mov	r1, r0
   18fb8:	ldr	r0, [r6, #8]
   18fbc:	ldm	r6, {r2, r3}
   18fc0:	ldr	r7, [r6, #12]
   18fc4:	stm	sp, {r0, r7}
   18fc8:	b	19038 <__assert_fail@plt+0x739c>
   18fcc:	movw	r1, #41415	; 0xa1c7
   18fd0:	mov	r0, #0
   18fd4:	mov	r2, #5
   18fd8:	movt	r1, #2
   18fdc:	bl	11924 <dcgettext@plt>
   18fe0:	mov	r1, r0
   18fe4:	ldm	r6, {r2, r3}
   18fe8:	ldr	r0, [r6, #8]
   18fec:	ldr	r7, [r6, #12]
   18ff0:	ldr	r6, [r6, #16]
   18ff4:	stm	sp, {r0, r7}
   18ff8:	str	r6, [sp, #8]
   18ffc:	b	19038 <__assert_fail@plt+0x739c>
   19000:	movw	r1, #41451	; 0xa1eb
   19004:	mov	r0, #0
   19008:	mov	r2, #5
   1900c:	movt	r1, #2
   19010:	bl	11924 <dcgettext@plt>
   19014:	mov	r1, r0
   19018:	ldm	r6, {r2, r3}
   1901c:	ldr	r0, [r6, #8]
   19020:	ldr	r7, [r6, #12]
   19024:	ldr	r4, [r6, #16]
   19028:	ldr	r6, [r6, #20]
   1902c:	stm	sp, {r0, r7}
   19030:	str	r4, [sp, #8]
   19034:	str	r6, [sp, #12]
   19038:	mov	r0, r5
   1903c:	b	1912c <__assert_fail@plt+0x7490>
   19040:	movw	r1, #41491	; 0xa213
   19044:	mov	r0, #0
   19048:	mov	r2, #5
   1904c:	movt	r1, #2
   19050:	bl	11924 <dcgettext@plt>
   19054:	mov	ip, r0
   19058:	ldm	r6, {r2, r3}
   1905c:	ldr	r0, [r6, #8]
   19060:	ldr	r7, [r6, #12]
   19064:	ldr	r4, [r6, #16]
   19068:	ldr	r1, [r6, #20]
   1906c:	ldr	r6, [r6, #24]
   19070:	stm	sp, {r0, r7}
   19074:	str	r4, [sp, #8]
   19078:	str	r1, [sp, #12]
   1907c:	str	r6, [sp, #16]
   19080:	b	19124 <__assert_fail@plt+0x7488>
   19084:	movw	r1, #41583	; 0xa26f
   19088:	movt	r1, #2
   1908c:	mov	r0, #0
   19090:	mov	r2, #5
   19094:	bl	11924 <dcgettext@plt>
   19098:	mov	ip, r0
   1909c:	ldr	r2, [r6]
   190a0:	ldr	r3, [r6, #4]
   190a4:	ldr	r0, [r6, #8]
   190a8:	ldr	r7, [r6, #12]
   190ac:	ldr	r4, [r6, #16]
   190b0:	ldr	r1, [r6, #20]
   190b4:	ldr	lr, [r6, #24]
   190b8:	ldr	r8, [r6, #28]
   190bc:	ldr	r6, [r6, #32]
   190c0:	stm	sp, {r0, r7}
   190c4:	str	r4, [sp, #8]
   190c8:	str	r1, [sp, #12]
   190cc:	str	lr, [sp, #16]
   190d0:	str	r8, [sp, #20]
   190d4:	str	r6, [sp, #24]
   190d8:	b	19124 <__assert_fail@plt+0x7488>
   190dc:	movw	r1, #41535	; 0xa23f
   190e0:	mov	r0, #0
   190e4:	mov	r2, #5
   190e8:	movt	r1, #2
   190ec:	bl	11924 <dcgettext@plt>
   190f0:	mov	ip, r0
   190f4:	ldm	r6, {r2, r3}
   190f8:	ldr	r0, [r6, #8]
   190fc:	ldr	r7, [r6, #12]
   19100:	ldr	r4, [r6, #16]
   19104:	ldr	r1, [r6, #20]
   19108:	ldr	lr, [r6, #24]
   1910c:	ldr	r6, [r6, #28]
   19110:	stm	sp, {r0, r7}
   19114:	str	r4, [sp, #8]
   19118:	str	r1, [sp, #12]
   1911c:	str	lr, [sp, #16]
   19120:	str	r6, [sp, #20]
   19124:	mov	r0, r5
   19128:	mov	r1, ip
   1912c:	bl	11ab0 <fprintf@plt>
   19130:	sub	sp, fp, #24
   19134:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19138:	push	{r4, sl, fp, lr}
   1913c:	add	fp, sp, #8
   19140:	sub	sp, sp, #8
   19144:	ldr	ip, [fp, #8]
   19148:	mov	lr, #0
   1914c:	ldr	r4, [ip, lr, lsl #2]
   19150:	add	lr, lr, #1
   19154:	cmp	r4, #0
   19158:	bne	1914c <__assert_fail@plt+0x74b0>
   1915c:	sub	r4, lr, #1
   19160:	str	ip, [sp]
   19164:	str	r4, [sp, #4]
   19168:	bl	18e14 <__assert_fail@plt+0x7178>
   1916c:	sub	sp, fp, #8
   19170:	pop	{r4, sl, fp, pc}
   19174:	push	{r4, r5, fp, lr}
   19178:	add	fp, sp, #8
   1917c:	sub	sp, sp, #48	; 0x30
   19180:	ldr	r4, [fp, #8]
   19184:	mov	ip, #0
   19188:	add	lr, sp, #8
   1918c:	ldr	r5, [r4]
   19190:	cmp	r5, #0
   19194:	str	r5, [lr, ip, lsl #2]
   19198:	beq	191b0 <__assert_fail@plt+0x7514>
   1919c:	add	ip, ip, #1
   191a0:	add	r4, r4, #4
   191a4:	cmp	ip, #10
   191a8:	bne	1918c <__assert_fail@plt+0x74f0>
   191ac:	mov	ip, #10
   191b0:	str	lr, [sp]
   191b4:	str	ip, [sp, #4]
   191b8:	bl	18e14 <__assert_fail@plt+0x7178>
   191bc:	sub	sp, fp, #8
   191c0:	pop	{r4, r5, fp, pc}
   191c4:	push	{fp, lr}
   191c8:	mov	fp, sp
   191cc:	sub	sp, sp, #8
   191d0:	add	ip, fp, #8
   191d4:	str	ip, [sp, #4]
   191d8:	str	ip, [sp]
   191dc:	bl	19174 <__assert_fail@plt+0x74d8>
   191e0:	mov	sp, fp
   191e4:	pop	{fp, pc}
   191e8:	push	{fp, lr}
   191ec:	mov	fp, sp
   191f0:	movw	r0, #45588	; 0xb214
   191f4:	movt	r0, #3
   191f8:	ldr	r1, [r0]
   191fc:	movw	r0, #39326	; 0x999e
   19200:	movt	r0, #2
   19204:	bl	11c48 <fputs@plt>
   19208:	movw	r1, #41695	; 0xa2df
   1920c:	mov	r0, #0
   19210:	mov	r2, #5
   19214:	movt	r1, #2
   19218:	bl	11924 <dcgettext@plt>
   1921c:	movw	r1, #40556	; 0x9e6c
   19220:	movt	r1, #2
   19224:	bl	11858 <printf@plt>
   19228:	movw	r1, #41715	; 0xa2f3
   1922c:	mov	r0, #0
   19230:	mov	r2, #5
   19234:	movt	r1, #2
   19238:	bl	11924 <dcgettext@plt>
   1923c:	movw	r1, #39885	; 0x9bcd
   19240:	movw	r2, #40470	; 0x9e16
   19244:	movt	r1, #2
   19248:	movt	r2, #2
   1924c:	bl	11858 <printf@plt>
   19250:	movw	r1, #41735	; 0xa307
   19254:	mov	r0, #0
   19258:	mov	r2, #5
   1925c:	movt	r1, #2
   19260:	bl	11924 <dcgettext@plt>
   19264:	movw	r1, #41774	; 0xa32e
   19268:	movt	r1, #2
   1926c:	pop	{fp, lr}
   19270:	b	11858 <printf@plt>
   19274:	b	19278 <__assert_fail@plt+0x75dc>
   19278:	push	{r4, r5, r6, sl, fp, lr}
   1927c:	add	fp, sp, #16
   19280:	mov	r4, r2
   19284:	mov	r5, r1
   19288:	mov	r6, r0
   1928c:	bl	1a2dc <__assert_fail@plt+0x8640>
   19290:	cmp	r0, #0
   19294:	popne	{r4, r5, r6, sl, fp, pc}
   19298:	cmp	r6, #0
   1929c:	beq	192b0 <__assert_fail@plt+0x7614>
   192a0:	cmp	r5, #0
   192a4:	cmpne	r4, #0
   192a8:	bne	192b0 <__assert_fail@plt+0x7614>
   192ac:	pop	{r4, r5, r6, sl, fp, pc}
   192b0:	bl	196e0 <__assert_fail@plt+0x7a44>
   192b4:	push	{fp, lr}
   192b8:	mov	fp, sp
   192bc:	bl	1a1f8 <__assert_fail@plt+0x855c>
   192c0:	cmp	r0, #0
   192c4:	popne	{fp, pc}
   192c8:	bl	196e0 <__assert_fail@plt+0x7a44>
   192cc:	push	{fp, lr}
   192d0:	mov	fp, sp
   192d4:	bl	1a1f8 <__assert_fail@plt+0x855c>
   192d8:	cmp	r0, #0
   192dc:	popne	{fp, pc}
   192e0:	bl	196e0 <__assert_fail@plt+0x7a44>
   192e4:	push	{fp, lr}
   192e8:	mov	fp, sp
   192ec:	bl	1a1f8 <__assert_fail@plt+0x855c>
   192f0:	cmp	r0, #0
   192f4:	popne	{fp, pc}
   192f8:	bl	196e0 <__assert_fail@plt+0x7a44>
   192fc:	push	{r4, r5, fp, lr}
   19300:	add	fp, sp, #8
   19304:	mov	r4, r1
   19308:	mov	r5, r0
   1930c:	bl	1a28c <__assert_fail@plt+0x85f0>
   19310:	cmp	r0, #0
   19314:	popne	{r4, r5, fp, pc}
   19318:	cmp	r5, #0
   1931c:	beq	1932c <__assert_fail@plt+0x7690>
   19320:	cmp	r4, #0
   19324:	bne	1932c <__assert_fail@plt+0x7690>
   19328:	pop	{r4, r5, fp, pc}
   1932c:	bl	196e0 <__assert_fail@plt+0x7a44>
   19330:	push	{fp, lr}
   19334:	mov	fp, sp
   19338:	cmp	r1, #0
   1933c:	orreq	r1, r1, #1
   19340:	bl	1a28c <__assert_fail@plt+0x85f0>
   19344:	cmp	r0, #0
   19348:	popne	{fp, pc}
   1934c:	bl	196e0 <__assert_fail@plt+0x7a44>
   19350:	push	{fp, lr}
   19354:	mov	fp, sp
   19358:	clz	r3, r2
   1935c:	lsr	ip, r3, #5
   19360:	clz	r3, r1
   19364:	lsr	r3, r3, #5
   19368:	orrs	r3, r3, ip
   1936c:	movwne	r1, #1
   19370:	movwne	r2, #1
   19374:	bl	1a2dc <__assert_fail@plt+0x8640>
   19378:	cmp	r0, #0
   1937c:	popne	{fp, pc}
   19380:	bl	196e0 <__assert_fail@plt+0x7a44>
   19384:	push	{fp, lr}
   19388:	mov	fp, sp
   1938c:	mov	r2, r1
   19390:	mov	r1, r0
   19394:	mov	r0, #0
   19398:	bl	1a2dc <__assert_fail@plt+0x8640>
   1939c:	cmp	r0, #0
   193a0:	popne	{fp, pc}
   193a4:	bl	196e0 <__assert_fail@plt+0x7a44>
   193a8:	mov	r2, r1
   193ac:	mov	r1, r0
   193b0:	mov	r0, #0
   193b4:	b	19350 <__assert_fail@plt+0x76b4>
   193b8:	mov	r2, #1
   193bc:	b	193c0 <__assert_fail@plt+0x7724>
   193c0:	push	{r4, r5, fp, lr}
   193c4:	add	fp, sp, #8
   193c8:	ldr	r5, [r1]
   193cc:	mov	r4, r1
   193d0:	cmp	r0, #0
   193d4:	beq	193ec <__assert_fail@plt+0x7750>
   193d8:	mov	r1, #1
   193dc:	add	r1, r1, r5, lsr #1
   193e0:	adds	r5, r5, r1
   193e4:	bcc	19404 <__assert_fail@plt+0x7768>
   193e8:	bl	196e0 <__assert_fail@plt+0x7a44>
   193ec:	cmp	r5, #0
   193f0:	bne	19404 <__assert_fail@plt+0x7768>
   193f4:	mov	r1, #64	; 0x40
   193f8:	cmp	r2, #64	; 0x40
   193fc:	udiv	r5, r1, r2
   19400:	addhi	r5, r5, #1
   19404:	mov	r1, r5
   19408:	bl	19278 <__assert_fail@plt+0x75dc>
   1940c:	str	r5, [r4]
   19410:	pop	{r4, r5, fp, pc}
   19414:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19418:	add	fp, sp, #24
   1941c:	ldr	r6, [r1]
   19420:	mov	r8, r1
   19424:	ldr	r4, [fp, #8]
   19428:	add	r1, r6, r6, asr #1
   1942c:	cmp	r1, r6
   19430:	mvnvs	r1, #-2147483648	; 0x80000000
   19434:	cmp	r1, r3
   19438:	mov	r5, r1
   1943c:	movgt	r5, r3
   19440:	cmn	r3, #1
   19444:	movle	r5, r1
   19448:	cmn	r4, #1
   1944c:	ble	1946c <__assert_fail@plt+0x77d0>
   19450:	cmp	r4, #0
   19454:	beq	194c0 <__assert_fail@plt+0x7824>
   19458:	cmn	r5, #1
   1945c:	ble	19494 <__assert_fail@plt+0x77f8>
   19460:	mvn	r7, #-2147483648	; 0x80000000
   19464:	udiv	r1, r7, r4
   19468:	b	19488 <__assert_fail@plt+0x77ec>
   1946c:	cmn	r5, #1
   19470:	ble	194b0 <__assert_fail@plt+0x7814>
   19474:	cmn	r4, #1
   19478:	beq	194c0 <__assert_fail@plt+0x7824>
   1947c:	mov	r1, #-2147483648	; 0x80000000
   19480:	mvn	r7, #-2147483648	; 0x80000000
   19484:	sdiv	r1, r1, r4
   19488:	cmp	r1, r5
   1948c:	bge	194c0 <__assert_fail@plt+0x7824>
   19490:	b	194d0 <__assert_fail@plt+0x7834>
   19494:	beq	194c0 <__assert_fail@plt+0x7824>
   19498:	mov	r1, #-2147483648	; 0x80000000
   1949c:	mvn	r7, #-2147483648	; 0x80000000
   194a0:	sdiv	r1, r1, r5
   194a4:	cmp	r1, r4
   194a8:	bge	194c0 <__assert_fail@plt+0x7824>
   194ac:	b	194d0 <__assert_fail@plt+0x7834>
   194b0:	mvn	r7, #-2147483648	; 0x80000000
   194b4:	sdiv	r1, r7, r4
   194b8:	cmp	r5, r1
   194bc:	blt	194d0 <__assert_fail@plt+0x7834>
   194c0:	mul	r1, r5, r4
   194c4:	mov	r7, #64	; 0x40
   194c8:	cmp	r1, #63	; 0x3f
   194cc:	bgt	194d8 <__assert_fail@plt+0x783c>
   194d0:	sdiv	r5, r7, r4
   194d4:	mul	r1, r5, r4
   194d8:	cmp	r0, #0
   194dc:	moveq	r7, #0
   194e0:	streq	r7, [r8]
   194e4:	sub	r7, r5, r6
   194e8:	cmp	r7, r2
   194ec:	bge	19590 <__assert_fail@plt+0x78f4>
   194f0:	add	r5, r6, r2
   194f4:	mov	r2, #0
   194f8:	mov	r1, #0
   194fc:	cmp	r5, r3
   19500:	movwgt	r2, #1
   19504:	cmn	r3, #1
   19508:	movwgt	r1, #1
   1950c:	cmp	r5, r6
   19510:	bvs	19578 <__assert_fail@plt+0x78dc>
   19514:	ands	r1, r1, r2
   19518:	bne	19578 <__assert_fail@plt+0x78dc>
   1951c:	cmn	r4, #1
   19520:	ble	19540 <__assert_fail@plt+0x78a4>
   19524:	cmp	r4, #0
   19528:	beq	1958c <__assert_fail@plt+0x78f0>
   1952c:	cmn	r5, #1
   19530:	ble	19564 <__assert_fail@plt+0x78c8>
   19534:	mvn	r1, #-2147483648	; 0x80000000
   19538:	udiv	r1, r1, r4
   1953c:	b	19558 <__assert_fail@plt+0x78bc>
   19540:	cmn	r5, #1
   19544:	ble	1957c <__assert_fail@plt+0x78e0>
   19548:	cmn	r4, #1
   1954c:	beq	1958c <__assert_fail@plt+0x78f0>
   19550:	mov	r1, #-2147483648	; 0x80000000
   19554:	sdiv	r1, r1, r4
   19558:	cmp	r1, r5
   1955c:	bge	1958c <__assert_fail@plt+0x78f0>
   19560:	b	19578 <__assert_fail@plt+0x78dc>
   19564:	beq	1958c <__assert_fail@plt+0x78f0>
   19568:	mov	r1, #-2147483648	; 0x80000000
   1956c:	sdiv	r1, r1, r5
   19570:	cmp	r1, r4
   19574:	bge	1958c <__assert_fail@plt+0x78f0>
   19578:	bl	196e0 <__assert_fail@plt+0x7a44>
   1957c:	mvn	r1, #-2147483648	; 0x80000000
   19580:	sdiv	r1, r1, r4
   19584:	cmp	r5, r1
   19588:	blt	19578 <__assert_fail@plt+0x78dc>
   1958c:	mul	r1, r5, r4
   19590:	bl	192fc <__assert_fail@plt+0x7660>
   19594:	str	r5, [r8]
   19598:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1959c:	push	{fp, lr}
   195a0:	mov	fp, sp
   195a4:	mov	r1, #1
   195a8:	bl	19ea4 <__assert_fail@plt+0x8208>
   195ac:	cmp	r0, #0
   195b0:	popne	{fp, pc}
   195b4:	bl	196e0 <__assert_fail@plt+0x7a44>
   195b8:	push	{fp, lr}
   195bc:	mov	fp, sp
   195c0:	bl	19ea4 <__assert_fail@plt+0x8208>
   195c4:	cmp	r0, #0
   195c8:	popne	{fp, pc}
   195cc:	bl	196e0 <__assert_fail@plt+0x7a44>
   195d0:	push	{fp, lr}
   195d4:	mov	fp, sp
   195d8:	mov	r1, #1
   195dc:	bl	19ea4 <__assert_fail@plt+0x8208>
   195e0:	cmp	r0, #0
   195e4:	popne	{fp, pc}
   195e8:	bl	196e0 <__assert_fail@plt+0x7a44>
   195ec:	push	{fp, lr}
   195f0:	mov	fp, sp
   195f4:	bl	19ea4 <__assert_fail@plt+0x8208>
   195f8:	cmp	r0, #0
   195fc:	popne	{fp, pc}
   19600:	bl	196e0 <__assert_fail@plt+0x7a44>
   19604:	push	{r4, r5, fp, lr}
   19608:	add	fp, sp, #8
   1960c:	mov	r5, r0
   19610:	mov	r0, r1
   19614:	mov	r4, r1
   19618:	bl	1a1f8 <__assert_fail@plt+0x855c>
   1961c:	cmp	r0, #0
   19620:	beq	19634 <__assert_fail@plt+0x7998>
   19624:	mov	r1, r5
   19628:	mov	r2, r4
   1962c:	pop	{r4, r5, fp, lr}
   19630:	b	118dc <memcpy@plt>
   19634:	bl	196e0 <__assert_fail@plt+0x7a44>
   19638:	push	{r4, r5, fp, lr}
   1963c:	add	fp, sp, #8
   19640:	mov	r5, r0
   19644:	mov	r0, r1
   19648:	mov	r4, r1
   1964c:	bl	1a1f8 <__assert_fail@plt+0x855c>
   19650:	cmp	r0, #0
   19654:	beq	19668 <__assert_fail@plt+0x79cc>
   19658:	mov	r1, r5
   1965c:	mov	r2, r4
   19660:	pop	{r4, r5, fp, lr}
   19664:	b	118dc <memcpy@plt>
   19668:	bl	196e0 <__assert_fail@plt+0x7a44>
   1966c:	push	{r4, r5, fp, lr}
   19670:	add	fp, sp, #8
   19674:	mov	r5, r0
   19678:	add	r0, r1, #1
   1967c:	mov	r4, r1
   19680:	bl	1a1f8 <__assert_fail@plt+0x855c>
   19684:	cmp	r0, #0
   19688:	beq	196a4 <__assert_fail@plt+0x7a08>
   1968c:	mov	r1, #0
   19690:	mov	r2, r4
   19694:	strb	r1, [r0, r4]
   19698:	mov	r1, r5
   1969c:	pop	{r4, r5, fp, lr}
   196a0:	b	118dc <memcpy@plt>
   196a4:	bl	196e0 <__assert_fail@plt+0x7a44>
   196a8:	push	{r4, r5, fp, lr}
   196ac:	add	fp, sp, #8
   196b0:	mov	r4, r0
   196b4:	bl	11a98 <strlen@plt>
   196b8:	add	r5, r0, #1
   196bc:	mov	r0, r5
   196c0:	bl	1a1f8 <__assert_fail@plt+0x855c>
   196c4:	cmp	r0, #0
   196c8:	beq	196dc <__assert_fail@plt+0x7a40>
   196cc:	mov	r1, r4
   196d0:	mov	r2, r5
   196d4:	pop	{r4, r5, fp, lr}
   196d8:	b	118dc <memcpy@plt>
   196dc:	bl	196e0 <__assert_fail@plt+0x7a44>
   196e0:	push	{fp, lr}
   196e4:	mov	fp, sp
   196e8:	movw	r0, #45488	; 0xb1b0
   196ec:	movw	r1, #41850	; 0xa37a
   196f0:	mov	r2, #5
   196f4:	movt	r0, #3
   196f8:	movt	r1, #2
   196fc:	ldr	r4, [r0]
   19700:	mov	r0, #0
   19704:	bl	11924 <dcgettext@plt>
   19708:	movw	r2, #42764	; 0xa70c
   1970c:	mov	r3, r0
   19710:	mov	r0, r4
   19714:	mov	r1, #0
   19718:	movt	r2, #2
   1971c:	bl	119c0 <error@plt>
   19720:	bl	11c60 <abort@plt>
   19724:	push	{fp, lr}
   19728:	mov	fp, sp
   1972c:	sub	sp, sp, #8
   19730:	movw	ip, #45488	; 0xb1b0
   19734:	movt	ip, #3
   19738:	ldr	ip, [ip]
   1973c:	str	ip, [sp, #4]
   19740:	ldr	ip, [fp, #8]
   19744:	str	ip, [sp]
   19748:	bl	19750 <__assert_fail@plt+0x7ab4>
   1974c:	bl	11c60 <abort@plt>
   19750:	push	{r4, r5, r6, r7, fp, lr}
   19754:	add	fp, sp, #16
   19758:	sub	sp, sp, #16
   1975c:	sub	r0, r0, #1
   19760:	cmp	r0, #4
   19764:	bcs	197e4 <__assert_fail@plt+0x7b48>
   19768:	mov	r5, r1
   1976c:	movw	r1, #41964	; 0xa3ec
   19770:	ldr	r4, [fp, #12]
   19774:	ldr	r6, [fp, #8]
   19778:	movt	r1, #2
   1977c:	cmn	r5, #1
   19780:	ldr	r1, [r1, r0, lsl #2]
   19784:	ble	19798 <__assert_fail@plt+0x7afc>
   19788:	ldr	r7, [r3, r5, lsl #4]
   1978c:	movw	r5, #41867	; 0xa38b
   19790:	movt	r5, #2
   19794:	b	197b4 <__assert_fail@plt+0x7b18>
   19798:	mov	r0, #0
   1979c:	add	r7, sp, #14
   197a0:	strb	r0, [sp, #15]
   197a4:	movw	r0, #41867	; 0xa38b
   197a8:	strb	r2, [sp, #14]
   197ac:	movt	r0, #2
   197b0:	sub	r5, r0, r5
   197b4:	mov	r0, #0
   197b8:	mov	r2, #5
   197bc:	bl	11924 <dcgettext@plt>
   197c0:	mov	r2, r0
   197c4:	mov	r0, r4
   197c8:	mov	r1, #0
   197cc:	mov	r3, r5
   197d0:	str	r7, [sp]
   197d4:	str	r6, [sp, #4]
   197d8:	bl	119c0 <error@plt>
   197dc:	sub	sp, fp, #16
   197e0:	pop	{r4, r5, r6, r7, fp, pc}
   197e4:	bl	11c60 <abort@plt>
   197e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   197ec:	add	fp, sp, #28
   197f0:	sub	sp, sp, #20
   197f4:	cmp	r2, #37	; 0x25
   197f8:	bcs	19e84 <__assert_fail@plt+0x81e8>
   197fc:	mov	r8, r3
   19800:	mov	r5, r2
   19804:	mov	r6, r1
   19808:	mov	r4, r0
   1980c:	bl	11ac8 <__errno_location@plt>
   19810:	mov	r7, r0
   19814:	mov	r0, #0
   19818:	str	r0, [r7]
   1981c:	bl	11a5c <__ctype_b_loc@plt>
   19820:	ldr	r1, [r0]
   19824:	mov	r2, r4
   19828:	ldrb	r0, [r2], #1
   1982c:	add	r3, r1, r0, lsl #1
   19830:	ldrb	r3, [r3, #1]
   19834:	tst	r3, #32
   19838:	bne	19828 <__assert_fail@plt+0x7b8c>
   1983c:	cmp	r6, #0
   19840:	add	sl, sp, #16
   19844:	movne	sl, r6
   19848:	mov	r6, #4
   1984c:	cmp	r0, #45	; 0x2d
   19850:	beq	19e78 <__assert_fail@plt+0x81dc>
   19854:	mov	r0, r4
   19858:	mov	r1, sl
   1985c:	mov	r2, r5
   19860:	str	r8, [sp, #12]
   19864:	bl	11b4c <strtoumax@plt>
   19868:	ldr	r5, [sl]
   1986c:	cmp	r5, r4
   19870:	beq	19898 <__assert_fail@plt+0x7bfc>
   19874:	mov	r8, r0
   19878:	ldr	r0, [r7]
   1987c:	mov	r9, r1
   19880:	cmp	r0, #0
   19884:	beq	198cc <__assert_fail@plt+0x7c30>
   19888:	cmp	r0, #34	; 0x22
   1988c:	bne	19e78 <__assert_fail@plt+0x81dc>
   19890:	mov	r6, #1
   19894:	b	198d0 <__assert_fail@plt+0x7c34>
   19898:	ldr	r0, [fp, #8]
   1989c:	cmp	r0, #0
   198a0:	beq	19e78 <__assert_fail@plt+0x81dc>
   198a4:	ldrb	r1, [r4]
   198a8:	cmp	r1, #0
   198ac:	beq	19e78 <__assert_fail@plt+0x81dc>
   198b0:	bl	11aa4 <strchr@plt>
   198b4:	cmp	r0, #0
   198b8:	beq	19e78 <__assert_fail@plt+0x81dc>
   198bc:	mov	r6, #0
   198c0:	mov	r8, #1
   198c4:	mov	r9, #0
   198c8:	b	198dc <__assert_fail@plt+0x7c40>
   198cc:	mov	r6, r0
   198d0:	ldr	r0, [fp, #8]
   198d4:	cmp	r0, #0
   198d8:	beq	19e70 <__assert_fail@plt+0x81d4>
   198dc:	ldrb	r7, [r5]
   198e0:	cmp	r7, #0
   198e4:	beq	19e70 <__assert_fail@plt+0x81d4>
   198e8:	ldr	r0, [fp, #8]
   198ec:	mov	r1, r7
   198f0:	bl	11aa4 <strchr@plt>
   198f4:	cmp	r0, #0
   198f8:	beq	19a00 <__assert_fail@plt+0x7d64>
   198fc:	sub	r0, r7, #69	; 0x45
   19900:	mov	r1, #1
   19904:	mov	r3, #0
   19908:	mov	r4, #1024	; 0x400
   1990c:	cmp	r0, #21
   19910:	str	r1, [sp, #8]
   19914:	bhi	1992c <__assert_fail@plt+0x7c90>
   19918:	movw	r2, #35141	; 0x8945
   1991c:	mov	r1, #1
   19920:	movt	r2, #48	; 0x30
   19924:	tst	r2, r1, lsl r0
   19928:	bne	19948 <__assert_fail@plt+0x7cac>
   1992c:	sub	r0, r7, #103	; 0x67
   19930:	cmp	r0, #13
   19934:	bhi	1997c <__assert_fail@plt+0x7ce0>
   19938:	mov	r1, #1
   1993c:	movw	r2, #8273	; 0x2051
   19940:	tst	r2, r1, lsl r0
   19944:	beq	1997c <__assert_fail@plt+0x7ce0>
   19948:	ldr	r0, [fp, #8]
   1994c:	mov	r1, #48	; 0x30
   19950:	bl	11aa4 <strchr@plt>
   19954:	cmp	r0, #0
   19958:	beq	19978 <__assert_fail@plt+0x7cdc>
   1995c:	ldrb	r0, [r5, #1]
   19960:	cmp	r0, #66	; 0x42
   19964:	cmpne	r0, #68	; 0x44
   19968:	bne	19a90 <__assert_fail@plt+0x7df4>
   1996c:	mov	r4, #1000	; 0x3e8
   19970:	mov	r0, #2
   19974:	str	r0, [sp, #8]
   19978:	mov	r3, #0
   1997c:	cmp	r7, #89	; 0x59
   19980:	stm	sp, {r5, r6}
   19984:	bgt	19a0c <__assert_fail@plt+0x7d70>
   19988:	sub	r0, r7, #66	; 0x42
   1998c:	cmp	r0, #14
   19990:	bhi	19ab4 <__assert_fail@plt+0x7e18>
   19994:	add	r1, pc, #0
   19998:	ldr	pc, [r1, r0, lsl #2]
   1999c:	ldrdeq	r9, [r1], -r8
   199a0:	andeq	r9, r1, r4, ror #26
   199a4:	andeq	r9, r1, r4, ror #26
   199a8:	andeq	r9, r1, r8, ror sp
   199ac:	andeq	r9, r1, r4, ror #26
   199b0:	andeq	r9, r1, r8, ror #22
   199b4:	andeq	r9, r1, r4, ror #26
   199b8:	andeq	r9, r1, r4, ror #26
   199bc:	andeq	r9, r1, r4, ror #26
   199c0:	ldrdeq	r9, [r1], -r4
   199c4:	andeq	r9, r1, r4, ror #26
   199c8:	andeq	r9, r1, r8, lsl ip
   199cc:	andeq	r9, r1, r4, ror #26
   199d0:	andeq	r9, r1, r4, ror #26
   199d4:	andeq	r9, r1, r4, ror #27
   199d8:	mov	r1, #0
   199dc:	lsl	r3, r9, #10
   199e0:	lsl	r0, r8, #10
   199e4:	lsr	r2, r9, #22
   199e8:	cmp	r1, r9, lsr #22
   199ec:	orr	r3, r3, r8, lsr #22
   199f0:	mvnne	r0, #0
   199f4:	movwne	r2, #1
   199f8:	cmp	r1, r9, lsr #22
   199fc:	b	19a80 <__assert_fail@plt+0x7de4>
   19a00:	ldr	r0, [sp, #12]
   19a04:	orr	r6, r6, #2
   19a08:	b	19e74 <__assert_fail@plt+0x81d8>
   19a0c:	cmp	r7, #115	; 0x73
   19a10:	bgt	19b30 <__assert_fail@plt+0x7e94>
   19a14:	sub	r0, r7, #98	; 0x62
   19a18:	cmp	r0, #11
   19a1c:	bhi	19cf0 <__assert_fail@plt+0x8054>
   19a20:	add	r1, pc, #4
   19a24:	mov	r2, #0
   19a28:	ldr	pc, [r1, r0, lsl #2]
   19a2c:	andeq	r9, r1, ip, asr sl
   19a30:	andeq	r9, r1, ip, asr #28
   19a34:	andeq	r9, r1, r4, ror #26
   19a38:	andeq	r9, r1, r4, ror #26
   19a3c:	andeq	r9, r1, r4, ror #26
   19a40:	andeq	r9, r1, r8, ror #22
   19a44:	andeq	r9, r1, r4, ror #26
   19a48:	andeq	r9, r1, r4, ror #26
   19a4c:	andeq	r9, r1, r4, ror #26
   19a50:	ldrdeq	r9, [r1], -r4
   19a54:	andeq	r9, r1, r4, ror #26
   19a58:	andeq	r9, r1, r8, lsl ip
   19a5c:	mov	r1, #0
   19a60:	lsl	r3, r9, #9
   19a64:	lsl	r0, r8, #9
   19a68:	lsr	r2, r9, #23
   19a6c:	cmp	r1, r9, lsr #23
   19a70:	orr	r3, r3, r8, lsr #23
   19a74:	mvnne	r0, #0
   19a78:	movwne	r2, #1
   19a7c:	cmp	r1, r9, lsr #23
   19a80:	mvnne	r3, #0
   19a84:	mov	r8, r0
   19a88:	mov	r9, r3
   19a8c:	b	19e4c <__assert_fail@plt+0x81b0>
   19a90:	cmp	r0, #105	; 0x69
   19a94:	mov	r3, #0
   19a98:	bne	1997c <__assert_fail@plt+0x7ce0>
   19a9c:	ldrb	r0, [r5, #2]
   19aa0:	mov	r1, #1
   19aa4:	cmp	r0, #66	; 0x42
   19aa8:	movweq	r1, #3
   19aac:	str	r1, [sp, #8]
   19ab0:	b	1997c <__assert_fail@plt+0x7ce0>
   19ab4:	cmp	r7, #84	; 0x54
   19ab8:	beq	19c84 <__assert_fail@plt+0x7fe8>
   19abc:	cmp	r7, #89	; 0x59
   19ac0:	bne	19d64 <__assert_fail@plt+0x80c8>
   19ac4:	mvn	r0, #0
   19ac8:	mvn	r1, #0
   19acc:	mov	r2, r4
   19ad0:	mov	r5, r3
   19ad4:	bl	28aa8 <__assert_fail@plt+0x16e0c>
   19ad8:	mov	ip, r5
   19adc:	mvn	lr, #0
   19ae0:	mov	r2, #0
   19ae4:	mvn	r3, #7
   19ae8:	mov	r6, r8
   19aec:	mov	r5, r9
   19af0:	umull	r8, r7, r6, r4
   19af4:	mvn	r9, #0
   19af8:	mla	r7, r6, ip, r7
   19afc:	subs	r6, r0, r6
   19b00:	sbcs	r6, r1, r5
   19b04:	mov	r6, #0
   19b08:	movwcc	r6, #1
   19b0c:	cmp	r6, #0
   19b10:	mlaeq	r9, r5, r4, r7
   19b14:	movne	r8, lr
   19b18:	orrne	r2, r2, #1
   19b1c:	adds	r3, r3, #1
   19b20:	mov	r6, r8
   19b24:	mov	r5, r9
   19b28:	bcc	19af0 <__assert_fail@plt+0x7e54>
   19b2c:	b	19e4c <__assert_fail@plt+0x81b0>
   19b30:	cmp	r7, #116	; 0x74
   19b34:	beq	19c84 <__assert_fail@plt+0x7fe8>
   19b38:	cmp	r7, #119	; 0x77
   19b3c:	bne	19d64 <__assert_fail@plt+0x80c8>
   19b40:	lsl	r1, r9, #1
   19b44:	cmp	r9, #0
   19b48:	lsl	r0, r8, #1
   19b4c:	lsr	r2, r9, #31
   19b50:	orr	r1, r1, r8, lsr #31
   19b54:	mvnmi	r0, #0
   19b58:	mvnmi	r1, #0
   19b5c:	mov	r8, r0
   19b60:	mov	r9, r1
   19b64:	b	19e4c <__assert_fail@plt+0x81b0>
   19b68:	mvn	r0, #0
   19b6c:	mvn	r1, #0
   19b70:	mov	r2, r4
   19b74:	mov	r5, r3
   19b78:	bl	28aa8 <__assert_fail@plt+0x16e0c>
   19b7c:	mov	ip, r5
   19b80:	mvn	lr, #0
   19b84:	mov	r2, #0
   19b88:	mvn	r3, #2
   19b8c:	mov	r6, r8
   19b90:	mov	r5, r9
   19b94:	umull	r8, r7, r6, r4
   19b98:	mvn	r9, #0
   19b9c:	mla	r7, r6, ip, r7
   19ba0:	subs	r6, r0, r6
   19ba4:	sbcs	r6, r1, r5
   19ba8:	mov	r6, #0
   19bac:	movwcc	r6, #1
   19bb0:	cmp	r6, #0
   19bb4:	mlaeq	r9, r5, r4, r7
   19bb8:	movne	r8, lr
   19bbc:	orrne	r2, r2, #1
   19bc0:	adds	r3, r3, #1
   19bc4:	mov	r6, r8
   19bc8:	mov	r5, r9
   19bcc:	bcc	19b94 <__assert_fail@plt+0x7ef8>
   19bd0:	b	19e4c <__assert_fail@plt+0x81b0>
   19bd4:	mvn	r0, #0
   19bd8:	mvn	r1, #0
   19bdc:	mov	r2, r4
   19be0:	mov	r5, r3
   19be4:	bl	28aa8 <__assert_fail@plt+0x16e0c>
   19be8:	subs	r0, r0, r8
   19bec:	mov	r2, #0
   19bf0:	sbcs	r0, r1, r9
   19bf4:	umull	r0, r1, r8, r4
   19bf8:	movwcc	r2, #1
   19bfc:	cmp	r2, #0
   19c00:	mla	r1, r8, r5, r1
   19c04:	mvnne	r0, #0
   19c08:	mla	r9, r9, r4, r1
   19c0c:	mvnne	r9, #0
   19c10:	mov	r8, r0
   19c14:	b	19e4c <__assert_fail@plt+0x81b0>
   19c18:	mvn	r0, #0
   19c1c:	mvn	r1, #0
   19c20:	mov	r2, r4
   19c24:	mov	r5, r3
   19c28:	bl	28aa8 <__assert_fail@plt+0x16e0c>
   19c2c:	mov	ip, r5
   19c30:	mvn	lr, #0
   19c34:	mov	r2, #0
   19c38:	mvn	r3, #1
   19c3c:	mov	r6, r8
   19c40:	mov	r5, r9
   19c44:	umull	r8, r7, r6, r4
   19c48:	mvn	r9, #0
   19c4c:	mla	r7, r6, ip, r7
   19c50:	subs	r6, r0, r6
   19c54:	sbcs	r6, r1, r5
   19c58:	mov	r6, #0
   19c5c:	movwcc	r6, #1
   19c60:	cmp	r6, #0
   19c64:	mlaeq	r9, r5, r4, r7
   19c68:	movne	r8, lr
   19c6c:	orrne	r2, r2, #1
   19c70:	adds	r3, r3, #1
   19c74:	mov	r6, r8
   19c78:	mov	r5, r9
   19c7c:	bcc	19c44 <__assert_fail@plt+0x7fa8>
   19c80:	b	19e4c <__assert_fail@plt+0x81b0>
   19c84:	mvn	r0, #0
   19c88:	mvn	r1, #0
   19c8c:	mov	r2, r4
   19c90:	mov	r5, r3
   19c94:	bl	28aa8 <__assert_fail@plt+0x16e0c>
   19c98:	mov	ip, r5
   19c9c:	mvn	lr, #0
   19ca0:	mov	r2, #0
   19ca4:	mvn	r3, #3
   19ca8:	mov	r6, r8
   19cac:	mov	r5, r9
   19cb0:	umull	r8, r7, r6, r4
   19cb4:	mvn	r9, #0
   19cb8:	mla	r7, r6, ip, r7
   19cbc:	subs	r6, r0, r6
   19cc0:	sbcs	r6, r1, r5
   19cc4:	mov	r6, #0
   19cc8:	movwcc	r6, #1
   19ccc:	cmp	r6, #0
   19cd0:	mlaeq	r9, r5, r4, r7
   19cd4:	movne	r8, lr
   19cd8:	orrne	r2, r2, #1
   19cdc:	adds	r3, r3, #1
   19ce0:	mov	r6, r8
   19ce4:	mov	r5, r9
   19ce8:	bcc	19cb0 <__assert_fail@plt+0x8014>
   19cec:	b	19e4c <__assert_fail@plt+0x81b0>
   19cf0:	cmp	r7, #90	; 0x5a
   19cf4:	bne	19d64 <__assert_fail@plt+0x80c8>
   19cf8:	mvn	r0, #0
   19cfc:	mvn	r1, #0
   19d00:	mov	r2, r4
   19d04:	mov	r5, r3
   19d08:	bl	28aa8 <__assert_fail@plt+0x16e0c>
   19d0c:	mov	ip, r5
   19d10:	mvn	lr, #0
   19d14:	mov	r2, #0
   19d18:	mvn	r3, #6
   19d1c:	mov	r6, r8
   19d20:	mov	r5, r9
   19d24:	umull	r8, r7, r6, r4
   19d28:	mvn	r9, #0
   19d2c:	mla	r7, r6, ip, r7
   19d30:	subs	r6, r0, r6
   19d34:	sbcs	r6, r1, r5
   19d38:	mov	r6, #0
   19d3c:	movwcc	r6, #1
   19d40:	cmp	r6, #0
   19d44:	mlaeq	r9, r5, r4, r7
   19d48:	movne	r8, lr
   19d4c:	orrne	r2, r2, #1
   19d50:	adds	r3, r3, #1
   19d54:	mov	r6, r8
   19d58:	mov	r5, r9
   19d5c:	bcc	19d24 <__assert_fail@plt+0x8088>
   19d60:	b	19e4c <__assert_fail@plt+0x81b0>
   19d64:	ldr	r0, [sp, #12]
   19d68:	strd	r8, [r0]
   19d6c:	ldr	r6, [sp, #4]
   19d70:	orr	r6, r6, #2
   19d74:	b	19e78 <__assert_fail@plt+0x81dc>
   19d78:	mvn	r0, #0
   19d7c:	mvn	r1, #0
   19d80:	mov	r2, r4
   19d84:	mov	r5, r3
   19d88:	bl	28aa8 <__assert_fail@plt+0x16e0c>
   19d8c:	mov	ip, r5
   19d90:	mvn	lr, #0
   19d94:	mov	r2, #0
   19d98:	mvn	r3, #5
   19d9c:	mov	r5, r8
   19da0:	mov	r7, r9
   19da4:	umull	r8, r6, r5, r4
   19da8:	mvn	r9, #0
   19dac:	mla	r6, r5, ip, r6
   19db0:	subs	r5, r0, r5
   19db4:	sbcs	r5, r1, r7
   19db8:	mov	r5, #0
   19dbc:	movwcc	r5, #1
   19dc0:	cmp	r5, #0
   19dc4:	mlaeq	r9, r7, r4, r6
   19dc8:	movne	r8, lr
   19dcc:	orrne	r2, r2, #1
   19dd0:	adds	r3, r3, #1
   19dd4:	mov	r5, r8
   19dd8:	mov	r7, r9
   19ddc:	bcc	19da4 <__assert_fail@plt+0x8108>
   19de0:	b	19e4c <__assert_fail@plt+0x81b0>
   19de4:	mvn	r0, #0
   19de8:	mvn	r1, #0
   19dec:	mov	r2, r4
   19df0:	mov	r5, r3
   19df4:	bl	28aa8 <__assert_fail@plt+0x16e0c>
   19df8:	mov	ip, r5
   19dfc:	mvn	lr, #0
   19e00:	mov	r2, #0
   19e04:	mvn	r3, #4
   19e08:	mov	r6, r8
   19e0c:	mov	r5, r9
   19e10:	umull	r8, r7, r6, r4
   19e14:	mvn	r9, #0
   19e18:	mla	r7, r6, ip, r7
   19e1c:	subs	r6, r0, r6
   19e20:	sbcs	r6, r1, r5
   19e24:	mov	r6, #0
   19e28:	movwcc	r6, #1
   19e2c:	cmp	r6, #0
   19e30:	mlaeq	r9, r5, r4, r7
   19e34:	movne	r8, lr
   19e38:	orrne	r2, r2, #1
   19e3c:	adds	r3, r3, #1
   19e40:	mov	r6, r8
   19e44:	mov	r5, r9
   19e48:	bcc	19e10 <__assert_fail@plt+0x8174>
   19e4c:	ldr	r1, [sp]
   19e50:	ldr	r3, [sp, #8]
   19e54:	ldr	r6, [sp, #4]
   19e58:	add	r0, r1, r3
   19e5c:	orr	r6, r2, r6
   19e60:	str	r0, [sl]
   19e64:	ldrb	r0, [r1, r3]
   19e68:	cmp	r0, #0
   19e6c:	orrne	r6, r6, #2
   19e70:	ldr	r0, [sp, #12]
   19e74:	strd	r8, [r0]
   19e78:	mov	r0, r6
   19e7c:	sub	sp, fp, #28
   19e80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e84:	movw	r0, #41980	; 0xa3fc
   19e88:	movw	r1, #42018	; 0xa422
   19e8c:	movw	r3, #42030	; 0xa42e
   19e90:	mov	r2, #84	; 0x54
   19e94:	movt	r0, #2
   19e98:	movt	r1, #2
   19e9c:	movt	r3, #2
   19ea0:	bl	11c9c <__assert_fail@plt>
   19ea4:	clz	r2, r1
   19ea8:	clz	r3, r0
   19eac:	lsr	r2, r2, #5
   19eb0:	lsr	r3, r3, #5
   19eb4:	orrs	r2, r3, r2
   19eb8:	movwne	r1, #1
   19ebc:	movwne	r0, #1
   19ec0:	cmp	r1, #0
   19ec4:	beq	19ef4 <__assert_fail@plt+0x8258>
   19ec8:	mvn	r2, #-2147483648	; 0x80000000
   19ecc:	udiv	r2, r2, r1
   19ed0:	cmp	r2, r0
   19ed4:	bcs	19ef4 <__assert_fail@plt+0x8258>
   19ed8:	push	{fp, lr}
   19edc:	mov	fp, sp
   19ee0:	bl	11ac8 <__errno_location@plt>
   19ee4:	mov	r1, #12
   19ee8:	str	r1, [r0]
   19eec:	mov	r0, #0
   19ef0:	pop	{fp, pc}
   19ef4:	b	11810 <calloc@plt>
   19ef8:	sub	sp, sp, #8
   19efc:	push	{r4, r5, r6, r7, fp, lr}
   19f00:	add	fp, sp, #16
   19f04:	sub	sp, sp, #8
   19f08:	mov	r5, r0
   19f0c:	add	r0, fp, #8
   19f10:	cmp	r1, #11
   19f14:	str	r2, [fp, #8]
   19f18:	str	r3, [fp, #12]
   19f1c:	str	r0, [sp, #4]
   19f20:	bhi	19f5c <__assert_fail@plt+0x82c0>
   19f24:	mov	r0, #1
   19f28:	movw	r2, #1300	; 0x514
   19f2c:	tst	r2, r0, lsl r1
   19f30:	bne	1a014 <__assert_fail@plt+0x8378>
   19f34:	movw	r2, #2570	; 0xa0a
   19f38:	tst	r2, r0, lsl r1
   19f3c:	bne	19f84 <__assert_fail@plt+0x82e8>
   19f40:	cmp	r1, #0
   19f44:	bne	19f5c <__assert_fail@plt+0x82c0>
   19f48:	ldr	r0, [sp, #4]
   19f4c:	add	r1, r0, #4
   19f50:	str	r1, [sp, #4]
   19f54:	mov	r1, #0
   19f58:	b	1a020 <__assert_fail@plt+0x8384>
   19f5c:	sub	r0, r1, #1024	; 0x400
   19f60:	cmp	r0, #10
   19f64:	bhi	1a014 <__assert_fail@plt+0x8378>
   19f68:	mov	r2, #1
   19f6c:	movw	r3, #645	; 0x285
   19f70:	tst	r3, r2, lsl r0
   19f74:	bne	1a014 <__assert_fail@plt+0x8378>
   19f78:	movw	r3, #1282	; 0x502
   19f7c:	tst	r3, r2, lsl r0
   19f80:	beq	19f90 <__assert_fail@plt+0x82f4>
   19f84:	mov	r0, r5
   19f88:	bl	11b88 <fcntl64@plt>
   19f8c:	b	1a02c <__assert_fail@plt+0x8390>
   19f90:	cmp	r0, #6
   19f94:	bne	1a014 <__assert_fail@plt+0x8378>
   19f98:	ldr	r0, [sp, #4]
   19f9c:	movw	r7, #46024	; 0xb3c8
   19fa0:	movt	r7, #3
   19fa4:	add	r1, r0, #4
   19fa8:	str	r1, [sp, #4]
   19fac:	ldr	r6, [r0]
   19fb0:	ldr	r0, [r7]
   19fb4:	cmp	r0, #0
   19fb8:	bmi	1a050 <__assert_fail@plt+0x83b4>
   19fbc:	mov	r0, r5
   19fc0:	movw	r1, #1030	; 0x406
   19fc4:	mov	r2, r6
   19fc8:	bl	11b88 <fcntl64@plt>
   19fcc:	mov	r4, r0
   19fd0:	cmn	r0, #1
   19fd4:	bgt	1a044 <__assert_fail@plt+0x83a8>
   19fd8:	bl	11ac8 <__errno_location@plt>
   19fdc:	ldr	r0, [r0]
   19fe0:	cmp	r0, #22
   19fe4:	bne	1a044 <__assert_fail@plt+0x83a8>
   19fe8:	mov	r0, r5
   19fec:	mov	r1, #0
   19ff0:	mov	r2, r6
   19ff4:	bl	11b88 <fcntl64@plt>
   19ff8:	mov	r4, r0
   19ffc:	cmp	r0, #0
   1a000:	bmi	1a030 <__assert_fail@plt+0x8394>
   1a004:	mvn	r0, #0
   1a008:	str	r0, [r7]
   1a00c:	mov	r0, #1
   1a010:	b	1a074 <__assert_fail@plt+0x83d8>
   1a014:	ldr	r0, [sp, #4]
   1a018:	add	r2, r0, #4
   1a01c:	str	r2, [sp, #4]
   1a020:	ldr	r2, [r0]
   1a024:	mov	r0, r5
   1a028:	bl	11b88 <fcntl64@plt>
   1a02c:	mov	r4, r0
   1a030:	mov	r0, r4
   1a034:	sub	sp, fp, #16
   1a038:	pop	{r4, r5, r6, r7, fp, lr}
   1a03c:	add	sp, sp, #8
   1a040:	bx	lr
   1a044:	mov	r0, #1
   1a048:	str	r0, [r7]
   1a04c:	b	1a030 <__assert_fail@plt+0x8394>
   1a050:	mov	r0, r5
   1a054:	mov	r1, #0
   1a058:	mov	r2, r6
   1a05c:	bl	11b88 <fcntl64@plt>
   1a060:	mov	r4, r0
   1a064:	ldr	r0, [r7]
   1a068:	add	r0, r0, #1
   1a06c:	clz	r0, r0
   1a070:	lsr	r0, r0, #5
   1a074:	cmp	r0, #0
   1a078:	beq	1a030 <__assert_fail@plt+0x8394>
   1a07c:	cmp	r4, #0
   1a080:	bmi	1a030 <__assert_fail@plt+0x8394>
   1a084:	mov	r0, r4
   1a088:	mov	r1, #1
   1a08c:	bl	11b88 <fcntl64@plt>
   1a090:	cmp	r0, #0
   1a094:	bmi	1a0b0 <__assert_fail@plt+0x8414>
   1a098:	orr	r2, r0, #1
   1a09c:	mov	r0, r4
   1a0a0:	mov	r1, #2
   1a0a4:	bl	11b88 <fcntl64@plt>
   1a0a8:	cmn	r0, #1
   1a0ac:	bne	1a030 <__assert_fail@plt+0x8394>
   1a0b0:	bl	11ac8 <__errno_location@plt>
   1a0b4:	ldr	r6, [r0]
   1a0b8:	mov	r5, r0
   1a0bc:	mov	r0, r4
   1a0c0:	bl	11c78 <close@plt>
   1a0c4:	str	r6, [r5]
   1a0c8:	mvn	r4, #0
   1a0cc:	b	1a030 <__assert_fail@plt+0x8394>
   1a0d0:	push	{r4, sl, fp, lr}
   1a0d4:	add	fp, sp, #8
   1a0d8:	sub	sp, sp, #8
   1a0dc:	mov	r4, r0
   1a0e0:	cmp	r0, #0
   1a0e4:	beq	1a11c <__assert_fail@plt+0x8480>
   1a0e8:	mov	r0, r4
   1a0ec:	bl	11a20 <__freading@plt>
   1a0f0:	cmp	r0, #0
   1a0f4:	beq	1a11c <__assert_fail@plt+0x8480>
   1a0f8:	ldrb	r0, [r4, #1]
   1a0fc:	tst	r0, #1
   1a100:	beq	1a11c <__assert_fail@plt+0x8480>
   1a104:	mov	r0, #1
   1a108:	mov	r2, #0
   1a10c:	mov	r3, #0
   1a110:	str	r0, [sp]
   1a114:	mov	r0, r4
   1a118:	bl	1a154 <__assert_fail@plt+0x84b8>
   1a11c:	mov	r0, r4
   1a120:	sub	sp, fp, #8
   1a124:	pop	{r4, sl, fp, lr}
   1a128:	b	11870 <fflush@plt>
   1a12c:	push	{r4, r5, r6, sl, fp, lr}
   1a130:	add	fp, sp, #16
   1a134:	mov	r4, r0
   1a138:	bl	11ac8 <__errno_location@plt>
   1a13c:	ldr	r6, [r0]
   1a140:	mov	r5, r0
   1a144:	mov	r0, r4
   1a148:	bl	118a0 <free@plt>
   1a14c:	str	r6, [r5]
   1a150:	pop	{r4, r5, r6, sl, fp, pc}
   1a154:	push	{r4, r5, r6, r7, fp, lr}
   1a158:	add	fp, sp, #16
   1a15c:	sub	sp, sp, #8
   1a160:	mov	r4, r0
   1a164:	ldr	r0, [r0, #4]
   1a168:	mov	r5, r3
   1a16c:	mov	r6, r2
   1a170:	ldr	r1, [r4, #8]
   1a174:	cmp	r1, r0
   1a178:	bne	1a194 <__assert_fail@plt+0x84f8>
   1a17c:	ldrd	r0, [r4, #16]
   1a180:	cmp	r1, r0
   1a184:	bne	1a194 <__assert_fail@plt+0x84f8>
   1a188:	ldr	r0, [r4, #36]	; 0x24
   1a18c:	cmp	r0, #0
   1a190:	beq	1a1ac <__assert_fail@plt+0x8510>
   1a194:	mov	r0, r4
   1a198:	mov	r2, r6
   1a19c:	mov	r3, r5
   1a1a0:	sub	sp, fp, #16
   1a1a4:	pop	{r4, r5, r6, r7, fp, lr}
   1a1a8:	b	11b7c <fseeko64@plt>
   1a1ac:	ldr	r7, [fp, #8]
   1a1b0:	mov	r0, r4
   1a1b4:	bl	11b34 <fileno@plt>
   1a1b8:	mov	r2, r6
   1a1bc:	mov	r3, r5
   1a1c0:	str	r7, [sp]
   1a1c4:	bl	11984 <lseek64@plt>
   1a1c8:	and	r2, r0, r1
   1a1cc:	cmn	r2, #1
   1a1d0:	beq	1a1ec <__assert_fail@plt+0x8550>
   1a1d4:	strd	r0, [r4, #80]	; 0x50
   1a1d8:	ldr	r0, [r4]
   1a1dc:	bic	r0, r0, #16
   1a1e0:	str	r0, [r4]
   1a1e4:	mov	r0, #0
   1a1e8:	b	1a1f0 <__assert_fail@plt+0x8554>
   1a1ec:	mvn	r0, #0
   1a1f0:	sub	sp, fp, #16
   1a1f4:	pop	{r4, r5, r6, r7, fp, pc}
   1a1f8:	cmp	r0, #0
   1a1fc:	movweq	r0, #1
   1a200:	cmn	r0, #1
   1a204:	ble	1a20c <__assert_fail@plt+0x8570>
   1a208:	b	119fc <malloc@plt>
   1a20c:	push	{fp, lr}
   1a210:	mov	fp, sp
   1a214:	bl	11ac8 <__errno_location@plt>
   1a218:	mov	r1, #12
   1a21c:	str	r1, [r0]
   1a220:	mov	r0, #0
   1a224:	pop	{fp, pc}
   1a228:	push	{r4, r5, r6, r7, fp, lr}
   1a22c:	add	fp, sp, #16
   1a230:	sub	sp, sp, #8
   1a234:	cmp	r0, #0
   1a238:	add	r5, sp, #4
   1a23c:	mov	r7, r2
   1a240:	mov	r4, r1
   1a244:	movne	r5, r0
   1a248:	mov	r0, r5
   1a24c:	bl	119b4 <mbrtowc@plt>
   1a250:	mov	r6, r0
   1a254:	cmp	r7, #0
   1a258:	beq	1a280 <__assert_fail@plt+0x85e4>
   1a25c:	cmn	r6, #2
   1a260:	bcc	1a280 <__assert_fail@plt+0x85e4>
   1a264:	mov	r0, #0
   1a268:	bl	28460 <__assert_fail@plt+0x167c4>
   1a26c:	cmp	r0, #0
   1a270:	bne	1a280 <__assert_fail@plt+0x85e4>
   1a274:	ldrb	r0, [r4]
   1a278:	mov	r6, #1
   1a27c:	str	r0, [r5]
   1a280:	mov	r0, r6
   1a284:	sub	sp, fp, #16
   1a288:	pop	{r4, r5, r6, r7, fp, pc}
   1a28c:	push	{fp, lr}
   1a290:	mov	fp, sp
   1a294:	cmp	r0, #0
   1a298:	beq	1a2b4 <__assert_fail@plt+0x8618>
   1a29c:	cmp	r1, #0
   1a2a0:	beq	1a2c0 <__assert_fail@plt+0x8624>
   1a2a4:	cmn	r1, #1
   1a2a8:	ble	1a2c8 <__assert_fail@plt+0x862c>
   1a2ac:	pop	{fp, lr}
   1a2b0:	b	11930 <realloc@plt>
   1a2b4:	mov	r0, r1
   1a2b8:	pop	{fp, lr}
   1a2bc:	b	1a1f8 <__assert_fail@plt+0x855c>
   1a2c0:	bl	1a12c <__assert_fail@plt+0x8490>
   1a2c4:	b	1a2d4 <__assert_fail@plt+0x8638>
   1a2c8:	bl	11ac8 <__errno_location@plt>
   1a2cc:	mov	r1, #12
   1a2d0:	str	r1, [r0]
   1a2d4:	mov	r0, #0
   1a2d8:	pop	{fp, pc}
   1a2dc:	cmp	r2, #0
   1a2e0:	beq	1a310 <__assert_fail@plt+0x8674>
   1a2e4:	mvn	r3, #0
   1a2e8:	udiv	r3, r3, r2
   1a2ec:	cmp	r3, r1
   1a2f0:	bcs	1a310 <__assert_fail@plt+0x8674>
   1a2f4:	push	{fp, lr}
   1a2f8:	mov	fp, sp
   1a2fc:	bl	11ac8 <__errno_location@plt>
   1a300:	mov	r1, #12
   1a304:	str	r1, [r0]
   1a308:	mov	r0, #0
   1a30c:	pop	{fp, pc}
   1a310:	mul	r1, r2, r1
   1a314:	b	1a28c <__assert_fail@plt+0x85f0>
   1a318:	push	{fp, lr}
   1a31c:	mov	fp, sp
   1a320:	mov	lr, r0
   1a324:	movw	r0, #46028	; 0xb3cc
   1a328:	mov	ip, r1
   1a32c:	ldrb	r1, [r2, #28]
   1a330:	movt	r0, #3
   1a334:	ldr	r3, [r0]
   1a338:	mov	r0, #16
   1a33c:	and	r1, r1, #111	; 0x6f
   1a340:	and	r0, r0, r3, lsr #21
   1a344:	orr	r0, r1, r0
   1a348:	mov	r1, lr
   1a34c:	orr	r0, r0, #128	; 0x80
   1a350:	strb	r0, [r2, #28]
   1a354:	mov	r0, r2
   1a358:	mov	r2, ip
   1a35c:	bl	1a398 <__assert_fail@plt+0x86fc>
   1a360:	cmp	r0, #0
   1a364:	beq	1a390 <__assert_fail@plt+0x86f4>
   1a368:	movw	r1, #42496	; 0xa600
   1a36c:	mov	r2, #5
   1a370:	movt	r1, #2
   1a374:	ldr	r0, [r1, r0, lsl #2]
   1a378:	movw	r1, #42112	; 0xa480
   1a37c:	movt	r1, #2
   1a380:	add	r1, r1, r0
   1a384:	mov	r0, #0
   1a388:	pop	{fp, lr}
   1a38c:	b	11924 <dcgettext@plt>
   1a390:	mov	r0, #0
   1a394:	pop	{fp, pc}
   1a398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a39c:	add	fp, sp, #28
   1a3a0:	sub	sp, sp, #140	; 0x8c
   1a3a4:	str	r1, [sp, #24]
   1a3a8:	mov	r1, #0
   1a3ac:	str	r0, [sp, #28]
   1a3b0:	mov	sl, r2
   1a3b4:	str	r3, [sp, #20]
   1a3b8:	str	r1, [fp, #-52]	; 0xffffffcc
   1a3bc:	str	r1, [r0, #24]
   1a3c0:	str	r1, [r0, #8]
   1a3c4:	str	r3, [r0, #12]
   1a3c8:	ldrb	r1, [r0, #28]
   1a3cc:	and	r1, r1, #144	; 0x90
   1a3d0:	strb	r1, [r0, #28]
   1a3d4:	ldr	r9, [r0]
   1a3d8:	ldr	r0, [r0, #4]
   1a3dc:	cmp	r0, #159	; 0x9f
   1a3e0:	bls	1af88 <__assert_fail@plt+0x92ec>
   1a3e4:	ldr	r1, [sp, #28]
   1a3e8:	mov	r0, #160	; 0xa0
   1a3ec:	mov	r2, #160	; 0xa0
   1a3f0:	str	r0, [r1, #8]
   1a3f4:	mov	r0, r9
   1a3f8:	mov	r1, #0
   1a3fc:	bl	11b04 <memset@plt>
   1a400:	mov	r0, #31
   1a404:	str	r0, [r9, #64]	; 0x40
   1a408:	movw	r0, #43689	; 0xaaa9
   1a40c:	movt	r0, #2730	; 0xaaa
   1a410:	cmp	sl, r0
   1a414:	bhi	1a58c <__assert_fail@plt+0x88f0>
   1a418:	add	r0, sl, #1
   1a41c:	str	r0, [r9, #4]
   1a420:	str	r0, [sp, #12]
   1a424:	lsl	r0, r0, #3
   1a428:	bl	1a1f8 <__assert_fail@plt+0x855c>
   1a42c:	str	r0, [r9]
   1a430:	mov	r0, #1
   1a434:	mov	r4, r0
   1a438:	lsl	r0, r0, #1
   1a43c:	cmp	r4, sl
   1a440:	bls	1a434 <__assert_fail@plt+0x8798>
   1a444:	mov	r0, #12
   1a448:	mov	r1, r4
   1a44c:	bl	19ea4 <__assert_fail@plt+0x8208>
   1a450:	sub	r1, r4, #1
   1a454:	str	r1, [r9, #68]	; 0x44
   1a458:	str	r0, [r9, #32]
   1a45c:	bl	11990 <__ctype_get_mb_cur_max@plt>
   1a460:	str	r0, [r9, #92]	; 0x5c
   1a464:	mov	r0, #14
   1a468:	bl	11bb8 <nl_langinfo@plt>
   1a46c:	ldrb	r1, [r0]
   1a470:	orr	r1, r1, #32
   1a474:	cmp	r1, #117	; 0x75
   1a478:	bne	1a4c8 <__assert_fail@plt+0x882c>
   1a47c:	ldrb	r1, [r0, #1]
   1a480:	orr	r1, r1, #32
   1a484:	cmp	r1, #116	; 0x74
   1a488:	bne	1a4c8 <__assert_fail@plt+0x882c>
   1a48c:	ldrb	r1, [r0, #2]
   1a490:	orr	r1, r1, #32
   1a494:	cmp	r1, #102	; 0x66
   1a498:	bne	1a4c8 <__assert_fail@plt+0x882c>
   1a49c:	ldrb	r1, [r0, #3]!
   1a4a0:	cmp	r1, #45	; 0x2d
   1a4a4:	movw	r1, #42612	; 0xa674
   1a4a8:	movt	r1, #2
   1a4ac:	addeq	r0, r0, #1
   1a4b0:	bl	1184c <strcmp@plt>
   1a4b4:	cmp	r0, #0
   1a4b8:	bne	1a4c8 <__assert_fail@plt+0x882c>
   1a4bc:	ldrb	r0, [r9, #88]	; 0x58
   1a4c0:	orr	r0, r0, #4
   1a4c4:	strb	r0, [r9, #88]	; 0x58
   1a4c8:	ldrb	r0, [r9, #88]	; 0x58
   1a4cc:	and	r1, r0, #247	; 0xf7
   1a4d0:	strb	r1, [r9, #88]	; 0x58
   1a4d4:	ldr	r1, [r9, #92]	; 0x5c
   1a4d8:	cmp	r1, #2
   1a4dc:	blt	1a578 <__assert_fail@plt+0x88dc>
   1a4e0:	tst	r0, #4
   1a4e4:	bne	1a56c <__assert_fail@plt+0x88d0>
   1a4e8:	mov	r0, #32
   1a4ec:	mov	r1, #1
   1a4f0:	mov	r8, #1
   1a4f4:	bl	19ea4 <__assert_fail@plt+0x8208>
   1a4f8:	cmp	r0, #0
   1a4fc:	str	r0, [r9, #60]	; 0x3c
   1a500:	beq	1a58c <__assert_fail@plt+0x88f0>
   1a504:	mov	r7, #0
   1a508:	mov	r5, #0
   1a50c:	mov	r6, #0
   1a510:	add	r4, r7, r6
   1a514:	mov	r0, r4
   1a518:	bl	11b1c <btowc@plt>
   1a51c:	cmn	r0, #1
   1a520:	beq	1a534 <__assert_fail@plt+0x8898>
   1a524:	ldr	r1, [r9, #60]	; 0x3c
   1a528:	ldr	r2, [r1, r5, lsl #2]
   1a52c:	orr	r2, r2, r8, lsl r6
   1a530:	str	r2, [r1, r5, lsl #2]
   1a534:	cmp	r4, #127	; 0x7f
   1a538:	bhi	1a54c <__assert_fail@plt+0x88b0>
   1a53c:	cmp	r4, r0
   1a540:	ldrbne	r0, [r9, #88]	; 0x58
   1a544:	orrne	r0, r0, #8
   1a548:	strbne	r0, [r9, #88]	; 0x58
   1a54c:	add	r6, r6, #1
   1a550:	cmp	r6, #32
   1a554:	bne	1a510 <__assert_fail@plt+0x8874>
   1a558:	add	r5, r5, #1
   1a55c:	add	r7, r7, r6
   1a560:	cmp	r5, #8
   1a564:	bne	1a50c <__assert_fail@plt+0x8870>
   1a568:	b	1a578 <__assert_fail@plt+0x88dc>
   1a56c:	movw	r0, #42564	; 0xa644
   1a570:	movt	r0, #2
   1a574:	str	r0, [r9, #60]	; 0x3c
   1a578:	ldr	r0, [r9]
   1a57c:	cmp	r0, #0
   1a580:	ldrne	r0, [r9, #32]
   1a584:	cmpne	r0, #0
   1a588:	bne	1a5b0 <__assert_fail@plt+0x8914>
   1a58c:	mov	r4, #12
   1a590:	mov	r0, r9
   1a594:	str	r4, [fp, #-52]	; 0xffffffcc
   1a598:	bl	1b5f8 <__assert_fail@plt+0x995c>
   1a59c:	ldr	r0, [sp, #28]
   1a5a0:	mov	r1, #0
   1a5a4:	str	r1, [r0]
   1a5a8:	str	r1, [r0, #4]
   1a5ac:	b	1af10 <__assert_fail@plt+0x9274>
   1a5b0:	movw	r0, #0
   1a5b4:	movw	r1, #0
   1a5b8:	mov	r4, #0
   1a5bc:	movt	r0, #0
   1a5c0:	movt	r1, #0
   1a5c4:	str	r4, [fp, #-52]	; 0xffffffcc
   1a5c8:	orrs	r0, r1, r0
   1a5cc:	str	r0, [sp, #8]
   1a5d0:	beq	1a5e8 <__assert_fail@plt+0x894c>
   1a5d4:	add	r0, r9, #136	; 0x88
   1a5d8:	mov	r1, #0
   1a5dc:	bl	118f4 <pthread_mutex_init@plt>
   1a5e0:	cmp	r0, #0
   1a5e4:	bne	1a58c <__assert_fail@plt+0x88f0>
   1a5e8:	ldr	r0, [sp, #28]
   1a5ec:	add	r5, sp, #32
   1a5f0:	mov	r1, #0
   1a5f4:	mov	r2, #76	; 0x4c
   1a5f8:	ldr	r8, [r0, #20]
   1a5fc:	add	r0, r5, #4
   1a600:	bl	11b04 <memset@plt>
   1a604:	ldr	r1, [sp, #20]
   1a608:	vdup.32	q8, sl
   1a60c:	add	r3, r5, #44	; 0x2c
   1a610:	ubfx	r0, r1, #22, #1
   1a614:	strb	r0, [sp, #104]	; 0x68
   1a618:	ldr	r0, [sp, #24]
   1a61c:	str	r8, [sp, #96]	; 0x60
   1a620:	str	r0, [sp, #32]
   1a624:	and	r0, r1, #4194304	; 0x400000
   1a628:	orrs	r1, r0, r8
   1a62c:	str	r0, [sp, #16]
   1a630:	movwne	r1, #1
   1a634:	cmp	sl, #1
   1a638:	strb	r1, [sp, #107]	; 0x6b
   1a63c:	ldr	r0, [r9, #92]	; 0x5c
   1a640:	str	r0, [sp, #112]	; 0x70
   1a644:	ldrb	r2, [r9, #88]	; 0x58
   1a648:	vst1.32	{d16-d17}, [r3]
   1a64c:	ubfx	r3, r2, #2, #1
   1a650:	strb	r3, [sp, #105]	; 0x69
   1a654:	ubfx	r2, r2, #3, #1
   1a658:	strb	r2, [sp, #106]	; 0x6a
   1a65c:	blt	1a680 <__assert_fail@plt+0x89e4>
   1a660:	ldr	r1, [sp, #12]
   1a664:	add	r0, sp, #32
   1a668:	bl	1d730 <__assert_fail@plt+0xba94>
   1a66c:	cmp	r0, #0
   1a670:	bne	1a6f0 <__assert_fail@plt+0x8a54>
   1a674:	ldr	r0, [r9, #92]	; 0x5c
   1a678:	ldr	r4, [sp, #36]	; 0x24
   1a67c:	ldrb	r1, [sp, #107]	; 0x6b
   1a680:	cmp	r1, #0
   1a684:	ldr	r1, [sp, #24]
   1a688:	moveq	r4, r1
   1a68c:	ldr	r1, [sp, #16]
   1a690:	str	r4, [sp, #36]	; 0x24
   1a694:	cmp	r1, #0
   1a698:	beq	1a6f8 <__assert_fail@plt+0x8a5c>
   1a69c:	cmp	r0, #2
   1a6a0:	blt	1a70c <__assert_fail@plt+0x8a70>
   1a6a4:	add	r4, sp, #32
   1a6a8:	mov	r0, r4
   1a6ac:	bl	1d7d0 <__assert_fail@plt+0xbb34>
   1a6b0:	cmp	r0, #0
   1a6b4:	bne	1a6f0 <__assert_fail@plt+0x8a54>
   1a6b8:	ldr	r0, [sp, #64]	; 0x40
   1a6bc:	cmp	r0, sl
   1a6c0:	bge	1a79c <__assert_fail@plt+0x8b00>
   1a6c4:	ldr	r1, [r9, #92]	; 0x5c
   1a6c8:	ldr	r2, [sp, #60]	; 0x3c
   1a6cc:	ldr	r0, [sp, #68]	; 0x44
   1a6d0:	add	r1, r1, r2
   1a6d4:	cmp	r0, r1
   1a6d8:	bgt	1a79c <__assert_fail@plt+0x8b00>
   1a6dc:	lsl	r1, r0, #1
   1a6e0:	mov	r0, r4
   1a6e4:	bl	1d730 <__assert_fail@plt+0xba94>
   1a6e8:	cmp	r0, #0
   1a6ec:	beq	1a6a8 <__assert_fail@plt+0x8a0c>
   1a6f0:	ldr	sl, [sp, #28]
   1a6f4:	b	1a8f0 <__assert_fail@plt+0x8c54>
   1a6f8:	cmp	r0, #2
   1a6fc:	blt	1a718 <__assert_fail@plt+0x8a7c>
   1a700:	add	r0, sp, #32
   1a704:	bl	1de0c <__assert_fail@plt+0xc170>
   1a708:	b	1a79c <__assert_fail@plt+0x8b00>
   1a70c:	add	r0, sp, #32
   1a710:	bl	1dda0 <__assert_fail@plt+0xc104>
   1a714:	b	1a79c <__assert_fail@plt+0x8b00>
   1a718:	ldr	r1, [sp, #68]	; 0x44
   1a71c:	cmp	r8, #0
   1a720:	beq	1a794 <__assert_fail@plt+0x8af8>
   1a724:	ldr	r2, [sp, #80]	; 0x50
   1a728:	ldr	r0, [sp, #60]	; 0x3c
   1a72c:	cmp	r1, r2
   1a730:	movgt	r1, r2
   1a734:	cmp	r0, r1
   1a738:	bge	1a788 <__assert_fail@plt+0x8aec>
   1a73c:	ldr	r3, [sp, #56]	; 0x38
   1a740:	ldr	r2, [sp, #32]
   1a744:	ldr	r7, [sp, #96]	; 0x60
   1a748:	add	r3, r3, r0
   1a74c:	ldrb	r2, [r2, r3]
   1a750:	ldrb	r2, [r7, r2]
   1a754:	strb	r2, [r4, r0]
   1a758:	add	r0, r0, #1
   1a75c:	cmp	r0, r1
   1a760:	bge	1a788 <__assert_fail@plt+0x8aec>
   1a764:	ldr	r2, [sp, #32]
   1a768:	ldr	r7, [sp, #56]	; 0x38
   1a76c:	ldr	r6, [sp, #96]	; 0x60
   1a770:	ldr	r3, [sp, #36]	; 0x24
   1a774:	add	r2, r2, r7
   1a778:	ldrb	r2, [r2, r0]
   1a77c:	ldrb	r2, [r6, r2]
   1a780:	strb	r2, [r3, r0]
   1a784:	b	1a758 <__assert_fail@plt+0x8abc>
   1a788:	str	r0, [sp, #64]	; 0x40
   1a78c:	str	r0, [sp, #60]	; 0x3c
   1a790:	b	1a79c <__assert_fail@plt+0x8b00>
   1a794:	str	r1, [sp, #64]	; 0x40
   1a798:	str	r1, [sp, #60]	; 0x3c
   1a79c:	ldr	sl, [sp, #28]
   1a7a0:	mov	r5, #0
   1a7a4:	ldr	r6, [sp, #20]
   1a7a8:	sub	r8, fp, #48	; 0x30
   1a7ac:	add	r7, sp, #32
   1a7b0:	str	r5, [fp, #-52]	; 0xffffffcc
   1a7b4:	mov	r0, r8
   1a7b8:	mov	r1, r7
   1a7bc:	str	r5, [sl, #24]
   1a7c0:	orr	r2, r6, #8388608	; 0x800000
   1a7c4:	ldr	r4, [sl]
   1a7c8:	str	r6, [r4, #128]	; 0x80
   1a7cc:	bl	1e1fc <__assert_fail@plt+0xc560>
   1a7d0:	ldr	r1, [sp, #72]	; 0x48
   1a7d4:	mov	r2, r8
   1a7d8:	mov	r3, r6
   1a7dc:	str	r5, [sp]
   1a7e0:	add	r0, r1, r0
   1a7e4:	mov	r1, sl
   1a7e8:	str	r0, [sp, #72]	; 0x48
   1a7ec:	sub	r0, fp, #52	; 0x34
   1a7f0:	str	r0, [sp, #4]
   1a7f4:	mov	r0, r7
   1a7f8:	bl	1e04c <__assert_fail@plt+0xc3b0>
   1a7fc:	mov	r6, r0
   1a800:	cmp	r0, #0
   1a804:	bne	1a814 <__assert_fail@plt+0x8b78>
   1a808:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1a80c:	cmp	r0, #0
   1a810:	bne	1afbc <__assert_fail@plt+0x9320>
   1a814:	mov	r0, #2
   1a818:	sub	r3, fp, #40	; 0x28
   1a81c:	mov	r1, #0
   1a820:	mov	r2, #0
   1a824:	str	r0, [fp, #-36]	; 0xffffffdc
   1a828:	mov	r0, r4
   1a82c:	str	r5, [fp, #-40]	; 0xffffffd8
   1a830:	bl	2001c <__assert_fail@plt+0xe380>
   1a834:	mov	r7, r0
   1a838:	cmp	r6, #0
   1a83c:	beq	1a868 <__assert_fail@plt+0x8bcc>
   1a840:	mov	r0, #16
   1a844:	sub	r3, fp, #40	; 0x28
   1a848:	mov	r1, r6
   1a84c:	mov	r2, r7
   1a850:	str	r0, [fp, #-36]	; 0xffffffdc
   1a854:	mov	r0, #0
   1a858:	str	r0, [fp, #-40]	; 0xffffffd8
   1a85c:	mov	r0, r4
   1a860:	bl	2001c <__assert_fail@plt+0xe380>
   1a864:	b	1a86c <__assert_fail@plt+0x8bd0>
   1a868:	mov	r0, r7
   1a86c:	cmp	r7, #0
   1a870:	cmpne	r0, #0
   1a874:	beq	1afb4 <__assert_fail@plt+0x9318>
   1a878:	str	r0, [r9, #52]	; 0x34
   1a87c:	ldr	r8, [sl]
   1a880:	ldr	r0, [r8, #4]
   1a884:	lsl	r0, r0, #2
   1a888:	bl	1a1f8 <__assert_fail@plt+0x855c>
   1a88c:	str	r0, [r8, #12]
   1a890:	ldr	r0, [r8, #4]
   1a894:	lsl	r0, r0, #2
   1a898:	bl	1a1f8 <__assert_fail@plt+0x855c>
   1a89c:	str	r0, [r8, #16]
   1a8a0:	ldr	r0, [r8, #4]
   1a8a4:	add	r0, r0, r0, lsl #1
   1a8a8:	lsl	r0, r0, #2
   1a8ac:	bl	1a1f8 <__assert_fail@plt+0x855c>
   1a8b0:	str	r0, [r8, #20]
   1a8b4:	ldr	r0, [r8, #4]
   1a8b8:	add	r0, r0, r0, lsl #1
   1a8bc:	lsl	r0, r0, #2
   1a8c0:	bl	1a1f8 <__assert_fail@plt+0x855c>
   1a8c4:	str	r0, [r8, #24]
   1a8c8:	ldr	r1, [r8, #12]
   1a8cc:	cmp	r1, #0
   1a8d0:	ldrne	r1, [r8, #16]
   1a8d4:	cmpne	r1, #0
   1a8d8:	beq	1a8ec <__assert_fail@plt+0x8c50>
   1a8dc:	cmp	r0, #0
   1a8e0:	ldrne	r0, [r8, #20]
   1a8e4:	cmpne	r0, #0
   1a8e8:	bne	1a934 <__assert_fail@plt+0x8c98>
   1a8ec:	mov	r0, #12
   1a8f0:	str	r0, [fp, #-52]	; 0xffffffcc
   1a8f4:	mov	r0, sl
   1a8f8:	bl	1d6ac <__assert_fail@plt+0xba10>
   1a8fc:	add	r0, sp, #32
   1a900:	bl	1d6fc <__assert_fail@plt+0xba60>
   1a904:	ldr	r0, [sp, #8]
   1a908:	cmp	r0, #0
   1a90c:	beq	1a918 <__assert_fail@plt+0x8c7c>
   1a910:	add	r0, r9, #136	; 0x88
   1a914:	bl	11864 <pthread_mutex_destroy@plt>
   1a918:	mov	r0, r9
   1a91c:	bl	1b5f8 <__assert_fail@plt+0x995c>
   1a920:	mov	r0, #0
   1a924:	str	r0, [sl]
   1a928:	str	r0, [sl, #4]
   1a92c:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1a930:	b	1af10 <__assert_fail@plt+0x9274>
   1a934:	ldr	r0, [sl, #24]
   1a938:	lsl	r0, r0, #2
   1a93c:	bl	1a1f8 <__assert_fail@plt+0x855c>
   1a940:	cmp	r0, #0
   1a944:	str	r0, [r8, #132]	; 0x84
   1a948:	beq	1a9cc <__assert_fail@plt+0x8d30>
   1a94c:	ldr	r1, [sl, #24]
   1a950:	cmp	r1, #0
   1a954:	beq	1a96c <__assert_fail@plt+0x8cd0>
   1a958:	mov	r2, #0
   1a95c:	str	r2, [r0, r2, lsl #2]
   1a960:	add	r2, r2, #1
   1a964:	cmp	r1, r2
   1a968:	bne	1a95c <__assert_fail@plt+0x8cc0>
   1a96c:	ldr	r0, [r8, #52]	; 0x34
   1a970:	movw	r1, #4540	; 0x11bc
   1a974:	mov	r2, r8
   1a978:	movt	r1, #2
   1a97c:	bl	21138 <__assert_fail@plt+0xf49c>
   1a980:	ldr	r1, [sl, #24]
   1a984:	cmp	r1, #0
   1a988:	beq	1a9b0 <__assert_fail@plt+0x8d14>
   1a98c:	ldr	r0, [r8, #132]	; 0x84
   1a990:	mov	r2, #0
   1a994:	ldr	r3, [r0, r2, lsl #2]
   1a998:	cmp	r2, r3
   1a99c:	bne	1a9b8 <__assert_fail@plt+0x8d1c>
   1a9a0:	add	r2, r2, #1
   1a9a4:	cmp	r1, r2
   1a9a8:	bne	1a994 <__assert_fail@plt+0x8cf8>
   1a9ac:	b	1a9c0 <__assert_fail@plt+0x8d24>
   1a9b0:	ldr	r0, [r8, #132]	; 0x84
   1a9b4:	b	1a9c0 <__assert_fail@plt+0x8d24>
   1a9b8:	cmp	r1, r2
   1a9bc:	bne	1a9cc <__assert_fail@plt+0x8d30>
   1a9c0:	bl	1a12c <__assert_fail@plt+0x8490>
   1a9c4:	mov	r0, #0
   1a9c8:	str	r0, [r8, #132]	; 0x84
   1a9cc:	ldr	r0, [r8, #52]	; 0x34
   1a9d0:	movw	r1, #4692	; 0x1254
   1a9d4:	mov	r2, sl
   1a9d8:	movt	r1, #2
   1a9dc:	bl	1eaa8 <__assert_fail@plt+0xce0c>
   1a9e0:	cmp	r0, #0
   1a9e4:	bne	1a8f0 <__assert_fail@plt+0x8c54>
   1a9e8:	ldr	r0, [r8, #52]	; 0x34
   1a9ec:	movw	r1, #4828	; 0x12dc
   1a9f0:	mov	r2, r8
   1a9f4:	movt	r1, #2
   1a9f8:	bl	1eaa8 <__assert_fail@plt+0xce0c>
   1a9fc:	cmp	r0, #0
   1aa00:	bne	1a8f0 <__assert_fail@plt+0x8c54>
   1aa04:	ldr	r0, [r8, #52]	; 0x34
   1aa08:	movw	r1, #4972	; 0x136c
   1aa0c:	mov	r2, r8
   1aa10:	movt	r1, #2
   1aa14:	bl	21138 <__assert_fail@plt+0xf49c>
   1aa18:	ldr	r0, [r8, #52]	; 0x34
   1aa1c:	movw	r1, #5068	; 0x13cc
   1aa20:	mov	r2, r8
   1aa24:	movt	r1, #2
   1aa28:	bl	21138 <__assert_fail@plt+0xf49c>
   1aa2c:	cmp	r0, #0
   1aa30:	bne	1a8f0 <__assert_fail@plt+0x8c54>
   1aa34:	mov	r5, #0
   1aa38:	sub	r7, fp, #40	; 0x28
   1aa3c:	mov	r4, #0
   1aa40:	ldr	r0, [r8, #24]
   1aa44:	add	r6, r4, r4, lsl #1
   1aa48:	add	r0, r0, r6, lsl #2
   1aa4c:	ldr	r0, [r0, #4]
   1aa50:	cmp	r0, #0
   1aa54:	beq	1aa60 <__assert_fail@plt+0x8dc4>
   1aa58:	mov	r1, r5
   1aa5c:	b	1aaa0 <__assert_fail@plt+0x8e04>
   1aa60:	mov	r0, r7
   1aa64:	mov	r1, r8
   1aa68:	mov	r2, r4
   1aa6c:	mov	r3, #1
   1aa70:	bl	2187c <__assert_fail@plt+0xfbe0>
   1aa74:	cmp	r0, #0
   1aa78:	bne	1a8f0 <__assert_fail@plt+0x8c54>
   1aa7c:	ldr	r0, [r8, #24]
   1aa80:	mov	r1, r5
   1aa84:	add	r0, r0, r6, lsl #2
   1aa88:	ldr	r0, [r0, #4]
   1aa8c:	cmp	r0, #0
   1aa90:	bne	1aaa0 <__assert_fail@plt+0x8e04>
   1aa94:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1aa98:	bl	1a12c <__assert_fail@plt+0x8490>
   1aa9c:	mov	r1, #1
   1aaa0:	ldr	r2, [r8, #8]
   1aaa4:	add	r0, r4, #1
   1aaa8:	subs	r3, r0, r2
   1aaac:	mov	r4, r3
   1aab0:	movwne	r3, #1
   1aab4:	movne	r4, r0
   1aab8:	tst	r1, #1
   1aabc:	and	r5, r1, r3
   1aac0:	cmpeq	r0, r2
   1aac4:	bne	1aa40 <__assert_fail@plt+0x8da4>
   1aac8:	ldrb	r1, [sl, #28]
   1aacc:	tst	r1, #16
   1aad0:	bne	1aaec <__assert_fail@plt+0x8e50>
   1aad4:	ldr	r1, [sl, #24]
   1aad8:	cmp	r1, #0
   1aadc:	beq	1aaec <__assert_fail@plt+0x8e50>
   1aae0:	ldrb	r1, [r8, #88]	; 0x58
   1aae4:	tst	r1, #1
   1aae8:	bne	1aaf8 <__assert_fail@plt+0x8e5c>
   1aaec:	ldr	r1, [r8, #76]	; 0x4c
   1aaf0:	cmp	r1, #0
   1aaf4:	beq	1abd8 <__assert_fail@plt+0x8f3c>
   1aaf8:	add	r0, r0, r0, lsl #1
   1aafc:	lsl	r0, r0, #2
   1ab00:	bl	1a1f8 <__assert_fail@plt+0x855c>
   1ab04:	cmp	r0, #0
   1ab08:	str	r0, [r8, #28]
   1ab0c:	beq	1a8ec <__assert_fail@plt+0x8c50>
   1ab10:	ldr	r1, [r8, #8]
   1ab14:	cmp	r1, #0
   1ab18:	beq	1abd8 <__assert_fail@plt+0x8f3c>
   1ab1c:	mov	r1, #0
   1ab20:	str	r1, [r0]
   1ab24:	str	r1, [r0, #4]
   1ab28:	str	r1, [r0, #8]
   1ab2c:	ldr	r0, [r8, #8]
   1ab30:	cmp	r0, #2
   1ab34:	bcc	1ab64 <__assert_fail@plt+0x8ec8>
   1ab38:	mov	r2, #1
   1ab3c:	mov	r3, #12
   1ab40:	ldr	r0, [r8, #28]
   1ab44:	add	r2, r2, #1
   1ab48:	str	r1, [r0, r3]!
   1ab4c:	add	r3, r3, #12
   1ab50:	str	r1, [r0, #4]
   1ab54:	str	r1, [r0, #8]
   1ab58:	ldr	r0, [r8, #8]
   1ab5c:	cmp	r2, r0
   1ab60:	bcc	1ab40 <__assert_fail@plt+0x8ea4>
   1ab64:	cmp	r0, #0
   1ab68:	beq	1abd8 <__assert_fail@plt+0x8f3c>
   1ab6c:	ldr	r1, [r8, #24]
   1ab70:	mov	r4, #0
   1ab74:	add	r5, r4, r4, lsl #1
   1ab78:	add	r2, r1, r5, lsl #2
   1ab7c:	ldr	r3, [r2, #4]
   1ab80:	cmp	r3, #1
   1ab84:	blt	1abcc <__assert_fail@plt+0x8f30>
   1ab88:	ldr	r7, [r2, #8]
   1ab8c:	mov	r6, #0
   1ab90:	ldr	r0, [r7, r6, lsl #2]
   1ab94:	ldr	r1, [r8, #28]
   1ab98:	add	r0, r0, r0, lsl #1
   1ab9c:	add	r0, r1, r0, lsl #2
   1aba0:	mov	r1, r4
   1aba4:	bl	22094 <__assert_fail@plt+0x103f8>
   1aba8:	cmp	r0, #0
   1abac:	beq	1a8ec <__assert_fail@plt+0x8c50>
   1abb0:	ldr	r1, [r8, #24]
   1abb4:	add	r6, r6, #1
   1abb8:	add	r0, r1, r5, lsl #2
   1abbc:	ldr	r0, [r0, #4]
   1abc0:	cmp	r6, r0
   1abc4:	blt	1ab90 <__assert_fail@plt+0x8ef4>
   1abc8:	ldr	r0, [r8, #8]
   1abcc:	add	r4, r4, #1
   1abd0:	cmp	r4, r0
   1abd4:	bcc	1ab74 <__assert_fail@plt+0x8ed8>
   1abd8:	mov	r0, #0
   1abdc:	str	r0, [fp, #-52]	; 0xffffffcc
   1abe0:	ldr	r0, [sp, #16]
   1abe4:	cmp	r0, #0
   1abe8:	bne	1ad20 <__assert_fail@plt+0x9084>
   1abec:	ldrb	r2, [r9, #88]	; 0x58
   1abf0:	ands	r0, r2, #4
   1abf4:	beq	1ad20 <__assert_fail@plt+0x9084>
   1abf8:	ldr	r0, [sp, #28]
   1abfc:	ldr	r0, [r0, #20]
   1ac00:	cmp	r0, #0
   1ac04:	bne	1ad20 <__assert_fail@plt+0x9084>
   1ac08:	ldr	r7, [r9, #8]
   1ac0c:	mov	sl, #0
   1ac10:	cmp	r7, #0
   1ac14:	beq	1acf4 <__assert_fail@plt+0x9058>
   1ac18:	ldr	r3, [r9]
   1ac1c:	mov	r8, #0
   1ac20:	mov	ip, #1
   1ac24:	mov	lr, #139	; 0x8b
   1ac28:	mov	r6, #0
   1ac2c:	mov	r4, #0
   1ac30:	add	r1, r3, r4, lsl #3
   1ac34:	ldrb	r5, [r1, #4]
   1ac38:	sub	r5, r5, #1
   1ac3c:	cmp	r5, #11
   1ac40:	bhi	1afd8 <__assert_fail@plt+0x933c>
   1ac44:	add	r0, pc, #0
   1ac48:	ldr	pc, [r0, r5, lsl #2]
   1ac4c:	ldrdeq	sl, [r1], -r4
   1ac50:	andeq	sl, r1, ip, ror ip
   1ac54:	andeq	sl, r1, ip, lsl #25
   1ac58:	andeq	sl, r1, ip, ror ip
   1ac5c:	andeq	sl, r1, ip, ror #25
   1ac60:	andeq	sl, r1, r0, lsr #26
   1ac64:	ldrdeq	sl, [r1], -r8
   1ac68:	andeq	sl, r1, ip, ror ip
   1ac6c:	andeq	sl, r1, ip, ror ip
   1ac70:	andeq	sl, r1, ip, ror ip
   1ac74:	andeq	sl, r1, ip, ror ip
   1ac78:			; <UNDEFINED> instruction: 0x0001acb4
   1ac7c:	add	r4, r4, #1
   1ac80:	cmp	r4, r7
   1ac84:	bne	1ac30 <__assert_fail@plt+0x8f94>
   1ac88:	b	1af1c <__assert_fail@plt+0x9280>
   1ac8c:	ldr	r0, [r3, r4, lsl #3]
   1ac90:	mov	r1, #0
   1ac94:	add	r5, r0, #16
   1ac98:	ldr	r0, [r5, r1, lsl #2]
   1ac9c:	cmp	r0, #0
   1aca0:	bne	1ad20 <__assert_fail@plt+0x9084>
   1aca4:	add	r1, r1, #1
   1aca8:	cmp	r1, #4
   1acac:	bne	1ac98 <__assert_fail@plt+0x8ffc>
   1acb0:	b	1ac7c <__assert_fail@plt+0x8fe0>
   1acb4:	ldr	r0, [r3, r4, lsl #3]
   1acb8:	sub	r0, r0, #16
   1acbc:	ror	r1, r0, #4
   1acc0:	cmp	r1, #7
   1acc4:	bhi	1ad20 <__assert_fail@plt+0x9084>
   1acc8:	tst	lr, ip, lsl r1
   1accc:	bne	1ac7c <__assert_fail@plt+0x8fe0>
   1acd0:	b	1ad20 <__assert_fail@plt+0x9084>
   1acd4:	ldrsb	r0, [r1]
   1acd8:	cmp	r0, #0
   1acdc:	mov	r0, #0
   1ace0:	movwmi	r0, #1
   1ace4:	orr	r6, r6, r0
   1ace8:	b	1ac7c <__assert_fail@plt+0x8fe0>
   1acec:	mov	r8, #1
   1acf0:	b	1ac7c <__assert_fail@plt+0x8fe0>
   1acf4:	mov	r8, #0
   1acf8:	mov	r0, #1
   1acfc:	and	r1, r2, #249	; 0xf9
   1ad00:	str	r0, [r9, #92]	; 0x5c
   1ad04:	ldr	r0, [r9, #76]	; 0x4c
   1ad08:	cmp	r0, #0
   1ad0c:	movwgt	sl, #1
   1ad10:	orr	r0, r8, sl
   1ad14:	and	r0, r0, #1
   1ad18:	orr	r0, r1, r0, lsl #1
   1ad1c:	strb	r0, [r9, #88]	; 0x58
   1ad20:	ldr	r1, [r9, #52]	; 0x34
   1ad24:	ldr	r0, [r9, #24]
   1ad28:	ldr	r1, [r1, #12]
   1ad2c:	ldr	r1, [r1, #28]
   1ad30:	str	r1, [r9, #72]	; 0x48
   1ad34:	add	r1, r1, r1, lsl #1
   1ad38:	add	r1, r0, r1, lsl #2
   1ad3c:	sub	r0, fp, #40	; 0x28
   1ad40:	bl	22100 <__assert_fail@plt+0x10464>
   1ad44:	cmp	r0, #0
   1ad48:	str	r0, [fp, #-48]	; 0xffffffd0
   1ad4c:	bne	1afd0 <__assert_fail@plt+0x9334>
   1ad50:	ldr	r0, [r9, #76]	; 0x4c
   1ad54:	ldr	sl, [sp, #28]
   1ad58:	cmp	r0, #1
   1ad5c:	blt	1ae30 <__assert_fail@plt+0x9194>
   1ad60:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1ad64:	cmp	r7, #1
   1ad68:	blt	1ae30 <__assert_fail@plt+0x9194>
   1ad6c:	mov	r6, #0
   1ad70:	sub	r8, fp, #40	; 0x28
   1ad74:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1ad78:	ldr	r2, [r9]
   1ad7c:	ldr	r0, [r1, r6, lsl #2]
   1ad80:	add	r3, r2, r0, lsl #3
   1ad84:	ldrb	r3, [r3, #4]
   1ad88:	cmp	r3, #4
   1ad8c:	bne	1ae24 <__assert_fail@plt+0x9188>
   1ad90:	mov	r3, #0
   1ad94:	cmp	r7, #1
   1ad98:	blt	1add0 <__assert_fail@plt+0x9134>
   1ad9c:	ldr	r5, [r1, r3, lsl #2]
   1ada0:	add	r4, r2, r5, lsl #3
   1ada4:	ldrb	r4, [r4, #4]
   1ada8:	cmp	r4, #9
   1adac:	bne	1adc0 <__assert_fail@plt+0x9124>
   1adb0:	ldr	r4, [r2, r0, lsl #3]
   1adb4:	ldr	r5, [r2, r5, lsl #3]
   1adb8:	cmp	r5, r4
   1adbc:	beq	1add0 <__assert_fail@plt+0x9134>
   1adc0:	add	r3, r3, #1
   1adc4:	cmp	r7, r3
   1adc8:	bne	1ad9c <__assert_fail@plt+0x9100>
   1adcc:	b	1ae24 <__assert_fail@plt+0x9188>
   1add0:	cmp	r3, r7
   1add4:	beq	1ae24 <__assert_fail@plt+0x9188>
   1add8:	ldr	r1, [r9, #20]
   1addc:	add	r0, r0, r0, lsl #1
   1ade0:	add	r0, r1, r0, lsl #2
   1ade4:	ldr	r0, [r0, #8]
   1ade8:	ldr	r4, [r0]
   1adec:	mov	r0, r8
   1adf0:	mov	r1, r4
   1adf4:	bl	2217c <__assert_fail@plt+0x104e0>
   1adf8:	cmp	r0, #0
   1adfc:	bne	1ae24 <__assert_fail@plt+0x9188>
   1ae00:	ldr	r0, [r9, #24]
   1ae04:	add	r1, r4, r4, lsl #1
   1ae08:	add	r1, r0, r1, lsl #2
   1ae0c:	mov	r0, r8
   1ae10:	bl	21d58 <__assert_fail@plt+0x100bc>
   1ae14:	cmp	r0, #0
   1ae18:	bne	1aeec <__assert_fail@plt+0x9250>
   1ae1c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1ae20:	mov	r6, #0
   1ae24:	add	r6, r6, #1
   1ae28:	cmp	r6, r7
   1ae2c:	blt	1ad74 <__assert_fail@plt+0x90d8>
   1ae30:	sub	r0, fp, #48	; 0x30
   1ae34:	sub	r2, fp, #40	; 0x28
   1ae38:	mov	r1, r9
   1ae3c:	mov	r3, #0
   1ae40:	bl	221e4 <__assert_fail@plt+0x10548>
   1ae44:	cmp	r0, #0
   1ae48:	str	r0, [r9, #36]	; 0x24
   1ae4c:	beq	1aecc <__assert_fail@plt+0x9230>
   1ae50:	ldrsb	r1, [r0, #52]	; 0x34
   1ae54:	cmn	r1, #1
   1ae58:	ble	1ae6c <__assert_fail@plt+0x91d0>
   1ae5c:	str	r0, [r9, #40]	; 0x28
   1ae60:	str	r0, [r9, #44]	; 0x2c
   1ae64:	str	r0, [r9, #48]	; 0x30
   1ae68:	b	1aee0 <__assert_fail@plt+0x9244>
   1ae6c:	sub	r4, fp, #48	; 0x30
   1ae70:	sub	r6, fp, #40	; 0x28
   1ae74:	mov	r1, r9
   1ae78:	mov	r3, #1
   1ae7c:	mov	r0, r4
   1ae80:	mov	r2, r6
   1ae84:	bl	221e4 <__assert_fail@plt+0x10548>
   1ae88:	str	r0, [r9, #40]	; 0x28
   1ae8c:	mov	r0, r4
   1ae90:	mov	r1, r9
   1ae94:	mov	r2, r6
   1ae98:	mov	r3, #2
   1ae9c:	bl	221e4 <__assert_fail@plt+0x10548>
   1aea0:	str	r0, [r9, #44]	; 0x2c
   1aea4:	mov	r0, r4
   1aea8:	mov	r1, r9
   1aeac:	mov	r2, r6
   1aeb0:	mov	r3, #6
   1aeb4:	bl	221e4 <__assert_fail@plt+0x10548>
   1aeb8:	str	r0, [r9, #48]	; 0x30
   1aebc:	ldr	r1, [r9, #40]	; 0x28
   1aec0:	cmp	r1, #0
   1aec4:	cmpne	r0, #0
   1aec8:	bne	1aed4 <__assert_fail@plt+0x9238>
   1aecc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1aed0:	b	1aeec <__assert_fail@plt+0x9250>
   1aed4:	ldr	r0, [r9, #44]	; 0x2c
   1aed8:	cmp	r0, #0
   1aedc:	beq	1aecc <__assert_fail@plt+0x9230>
   1aee0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1aee4:	bl	1a12c <__assert_fail@plt+0x8490>
   1aee8:	mov	r0, #0
   1aeec:	str	r0, [fp, #-52]	; 0xffffffcc
   1aef0:	mov	r0, sl
   1aef4:	bl	1d6ac <__assert_fail@plt+0xba10>
   1aef8:	add	r0, sp, #32
   1aefc:	bl	1d6fc <__assert_fail@plt+0xba60>
   1af00:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1af04:	mov	r4, #0
   1af08:	cmp	r0, #0
   1af0c:	bne	1a904 <__assert_fail@plt+0x8c68>
   1af10:	mov	r0, r4
   1af14:	sub	sp, fp, #28
   1af18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af1c:	orr	r0, r6, r8
   1af20:	tst	r0, #1
   1af24:	beq	1acf8 <__assert_fail@plt+0x905c>
   1af28:	mov	r2, #0
   1af2c:	mov	r7, #7
   1af30:	add	r3, r3, r2, lsl #3
   1af34:	ldr	r6, [r3, #4]
   1af38:	uxtb	r1, r6
   1af3c:	cmp	r1, #5
   1af40:	beq	1af60 <__assert_fail@plt+0x92c4>
   1af44:	cmp	r1, #1
   1af48:	bne	1af68 <__assert_fail@plt+0x92cc>
   1af4c:	ldrsb	r0, [r3]
   1af50:	cmn	r0, #1
   1af54:	bicle	r0, r6, #2097152	; 0x200000
   1af58:	strle	r0, [r3, #4]
   1af5c:	b	1af68 <__assert_fail@plt+0x92cc>
   1af60:	bfi	r6, r7, #0, #8
   1af64:	str	r6, [r3, #4]
   1af68:	ldr	r0, [r9, #8]
   1af6c:	add	r2, r2, #1
   1af70:	cmp	r2, r0
   1af74:	bcs	1af80 <__assert_fail@plt+0x92e4>
   1af78:	ldr	r3, [r9]
   1af7c:	b	1af30 <__assert_fail@plt+0x9294>
   1af80:	ldrb	r2, [r9, #88]	; 0x58
   1af84:	b	1acf8 <__assert_fail@plt+0x905c>
   1af88:	mov	r0, r9
   1af8c:	mov	r1, #160	; 0xa0
   1af90:	mov	r4, #160	; 0xa0
   1af94:	bl	1a28c <__assert_fail@plt+0x85f0>
   1af98:	cmp	r0, #0
   1af9c:	beq	1afc8 <__assert_fail@plt+0x932c>
   1afa0:	mov	r9, r0
   1afa4:	ldr	r0, [sp, #28]
   1afa8:	str	r9, [r0]
   1afac:	str	r4, [r0, #4]
   1afb0:	b	1a3e4 <__assert_fail@plt+0x8748>
   1afb4:	mov	r0, #12
   1afb8:	str	r0, [fp, #-52]	; 0xffffffcc
   1afbc:	mov	r0, #0
   1afc0:	str	r0, [r9, #52]	; 0x34
   1afc4:	b	1a8f4 <__assert_fail@plt+0x8c58>
   1afc8:	mov	r4, #12
   1afcc:	b	1af10 <__assert_fail@plt+0x9274>
   1afd0:	ldr	sl, [sp, #28]
   1afd4:	b	1aeec <__assert_fail@plt+0x9250>
   1afd8:	bl	11c60 <abort@plt>
   1afdc:	movw	r2, #46028	; 0xb3cc
   1afe0:	movt	r2, #3
   1afe4:	ldr	r1, [r2]
   1afe8:	str	r0, [r2]
   1afec:	mov	r0, r1
   1aff0:	bx	lr
   1aff4:	push	{r4, r5, r6, sl, fp, lr}
   1aff8:	add	fp, sp, #16
   1affc:	ldr	r5, [r0, #16]
   1b000:	ldr	r6, [r0]
   1b004:	mov	r4, r0
   1b008:	mov	r1, #0
   1b00c:	mov	r2, #256	; 0x100
   1b010:	mov	r0, r5
   1b014:	bl	11b04 <memset@plt>
   1b018:	ldr	r1, [r6, #36]	; 0x24
   1b01c:	mov	r0, r4
   1b020:	mov	r2, r5
   1b024:	bl	1b08c <__assert_fail@plt+0x93f0>
   1b028:	ldr	r0, [r6, #36]	; 0x24
   1b02c:	ldr	r1, [r6, #40]	; 0x28
   1b030:	cmp	r0, r1
   1b034:	beq	1b048 <__assert_fail@plt+0x93ac>
   1b038:	mov	r0, r4
   1b03c:	mov	r2, r5
   1b040:	bl	1b08c <__assert_fail@plt+0x93f0>
   1b044:	ldr	r0, [r6, #36]	; 0x24
   1b048:	ldr	r1, [r6, #44]	; 0x2c
   1b04c:	cmp	r0, r1
   1b050:	beq	1b064 <__assert_fail@plt+0x93c8>
   1b054:	mov	r0, r4
   1b058:	mov	r2, r5
   1b05c:	bl	1b08c <__assert_fail@plt+0x93f0>
   1b060:	ldr	r0, [r6, #36]	; 0x24
   1b064:	ldr	r1, [r6, #48]	; 0x30
   1b068:	cmp	r0, r1
   1b06c:	movne	r0, r4
   1b070:	movne	r2, r5
   1b074:	blne	1b08c <__assert_fail@plt+0x93f0>
   1b078:	ldrb	r0, [r4, #28]
   1b07c:	orr	r0, r0, #8
   1b080:	strb	r0, [r4, #28]
   1b084:	mov	r0, #0
   1b088:	pop	{r4, r5, r6, sl, fp, pc}
   1b08c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b090:	add	fp, sp, #28
   1b094:	sub	sp, sp, #308	; 0x134
   1b098:	ldr	r8, [r0]
   1b09c:	str	r0, [sp, #20]
   1b0a0:	mov	r5, r2
   1b0a4:	mov	r9, #0
   1b0a8:	ldr	r0, [r8, #92]	; 0x5c
   1b0ac:	cmp	r0, #1
   1b0b0:	bne	1b0c0 <__assert_fail@plt+0x9424>
   1b0b4:	ldr	r0, [sp, #20]
   1b0b8:	ldrb	r0, [r0, #14]
   1b0bc:	ubfx	r9, r0, #6, #1
   1b0c0:	ldr	r0, [r1, #8]
   1b0c4:	cmp	r0, #1
   1b0c8:	blt	1b404 <__assert_fail@plt+0x9768>
   1b0cc:	add	r0, sp, #32
   1b0d0:	mov	r7, #1
   1b0d4:	mov	r2, #0
   1b0d8:	str	r1, [sp, #12]
   1b0dc:	str	r8, [sp, #24]
   1b0e0:	add	r0, r0, #1
   1b0e4:	str	r0, [sp, #4]
   1b0e8:	movw	r0, #1
   1b0ec:	movt	r0, #32
   1b0f0:	add	r0, r0, #254	; 0xfe
   1b0f4:	str	r0, [sp, #8]
   1b0f8:	ldr	r0, [r1, #12]
   1b0fc:	str	r2, [sp, #16]
   1b100:	ldr	sl, [r0, r2, lsl #2]
   1b104:	ldr	r0, [r8]
   1b108:	add	r1, r0, sl, lsl #3
   1b10c:	ldrb	r4, [r1, #4]
   1b110:	sub	r1, r4, #1
   1b114:	cmp	r1, #6
   1b118:	bhi	1b3c0 <__assert_fail@plt+0x9724>
   1b11c:	add	r2, pc, #0
   1b120:	ldr	pc, [r2, r1, lsl #2]
   1b124:	andeq	fp, r1, r0, asr #2
   1b128:	ldrdeq	fp, [r1], -ip
   1b12c:	andeq	fp, r1, r4, lsr r2
   1b130:	andeq	fp, r1, r0, asr #7
   1b134:	ldrdeq	fp, [r1], -ip
   1b138:	muleq	r1, ip, r2
   1b13c:	ldrdeq	fp, [r1], -ip
   1b140:	ldrb	r0, [r0, sl, lsl #3]
   1b144:	cmp	r9, #0
   1b148:	strb	r7, [r5, r0]
   1b14c:	beq	1b158 <__assert_fail@plt+0x94bc>
   1b150:	bl	118e8 <tolower@plt>
   1b154:	strb	r7, [r5, r0]
   1b158:	ldr	r0, [sp, #20]
   1b15c:	ldrb	r0, [r0, #14]
   1b160:	tst	r0, #64	; 0x40
   1b164:	beq	1b3c0 <__assert_fail@plt+0x9724>
   1b168:	ldr	r0, [r8, #92]	; 0x5c
   1b16c:	cmp	r0, #2
   1b170:	blt	1b3c0 <__assert_fail@plt+0x9724>
   1b174:	ldr	r0, [r8]
   1b178:	add	r1, sl, #1
   1b17c:	movw	r4, #1
   1b180:	add	r6, sp, #32
   1b184:	movt	r4, #32
   1b188:	ldrb	r0, [r0, sl, lsl #3]
   1b18c:	strb	r0, [sp, #32]
   1b190:	ldr	r0, [r8, #8]
   1b194:	cmp	r1, r0
   1b198:	ldr	r0, [sp, #4]
   1b19c:	bcs	1b1e0 <__assert_fail@plt+0x9544>
   1b1a0:	ldr	r0, [sp, #4]
   1b1a4:	ldr	r1, [r8]
   1b1a8:	ldr	r3, [sp, #8]
   1b1ac:	add	r1, r1, sl, lsl #3
   1b1b0:	ldr	r2, [r1, #12]
   1b1b4:	and	r2, r2, r3
   1b1b8:	cmp	r2, r4
   1b1bc:	bne	1b1e0 <__assert_fail@plt+0x9544>
   1b1c0:	ldrb	r1, [r1, #8]
   1b1c4:	add	r3, sl, #2
   1b1c8:	strb	r1, [r0], #1
   1b1cc:	add	r1, sl, #1
   1b1d0:	ldr	r2, [r8, #8]
   1b1d4:	mov	sl, r1
   1b1d8:	cmp	r3, r2
   1b1dc:	bcc	1b1a4 <__assert_fail@plt+0x9508>
   1b1e0:	mov	r1, #0
   1b1e4:	sub	r4, r0, r6
   1b1e8:	sub	r0, fp, #36	; 0x24
   1b1ec:	sub	r3, fp, #48	; 0x30
   1b1f0:	str	r1, [fp, #-44]	; 0xffffffd4
   1b1f4:	str	r1, [fp, #-48]	; 0xffffffd0
   1b1f8:	mov	r1, r6
   1b1fc:	mov	r2, r4
   1b200:	bl	1a228 <__assert_fail@plt+0x858c>
   1b204:	cmp	r0, r4
   1b208:	bne	1b3c0 <__assert_fail@plt+0x9724>
   1b20c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1b210:	bl	11900 <towlower@plt>
   1b214:	mov	r1, r0
   1b218:	mov	r0, r6
   1b21c:	sub	r2, fp, #48	; 0x30
   1b220:	bl	11834 <wcrtomb@plt>
   1b224:	cmn	r0, #1
   1b228:	ldrbne	r0, [sp, #32]
   1b22c:	strbne	r7, [r5, r0]
   1b230:	b	1b3c0 <__assert_fail@plt+0x9724>
   1b234:	mov	r4, #0
   1b238:	mov	r6, #0
   1b23c:	str	sl, [sp, #28]
   1b240:	ldr	r0, [r0, sl, lsl #3]
   1b244:	mov	sl, #0
   1b248:	ldr	r8, [r0, r6, lsl #2]
   1b24c:	tst	r8, r7, lsl sl
   1b250:	strbne	r7, [r5, r4]
   1b254:	cmpne	r9, #0
   1b258:	bne	1b270 <__assert_fail@plt+0x95d4>
   1b25c:	add	sl, sl, #1
   1b260:	add	r4, r4, #1
   1b264:	cmp	sl, #32
   1b268:	bne	1b24c <__assert_fail@plt+0x95b0>
   1b26c:	b	1b280 <__assert_fail@plt+0x95e4>
   1b270:	mov	r0, r4
   1b274:	bl	118e8 <tolower@plt>
   1b278:	strb	r7, [r5, r0]
   1b27c:	b	1b25c <__assert_fail@plt+0x95c0>
   1b280:	ldr	r8, [sp, #24]
   1b284:	ldr	sl, [sp, #28]
   1b288:	add	r6, r6, #1
   1b28c:	cmp	r6, #8
   1b290:	beq	1b3c0 <__assert_fail@plt+0x9724>
   1b294:	ldr	r0, [r8]
   1b298:	b	1b240 <__assert_fail@plt+0x95a4>
   1b29c:	ldr	r4, [r0, sl, lsl #3]
   1b2a0:	ldr	r0, [r8, #92]	; 0x5c
   1b2a4:	cmp	r0, #2
   1b2a8:	blt	1b31c <__assert_fail@plt+0x9680>
   1b2ac:	ldr	r0, [r4, #36]	; 0x24
   1b2b0:	cmp	r0, #0
   1b2b4:	bne	1b2d0 <__assert_fail@plt+0x9634>
   1b2b8:	ldrb	r0, [r4, #16]
   1b2bc:	tst	r0, #1
   1b2c0:	bne	1b2d0 <__assert_fail@plt+0x9634>
   1b2c4:	ldr	r0, [r4, #32]
   1b2c8:	cmp	r0, #0
   1b2cc:	beq	1b31c <__assert_fail@plt+0x9680>
   1b2d0:	mov	r6, #0
   1b2d4:	add	r4, sp, #32
   1b2d8:	strb	r6, [fp, #-48]	; 0xffffffd0
   1b2dc:	mov	r0, #0
   1b2e0:	sub	r1, fp, #48	; 0x30
   1b2e4:	mov	r2, #1
   1b2e8:	mov	r3, r4
   1b2ec:	str	r6, [sp, #36]	; 0x24
   1b2f0:	str	r6, [sp, #32]
   1b2f4:	bl	1a228 <__assert_fail@plt+0x858c>
   1b2f8:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   1b2fc:	cmn	r0, #2
   1b300:	add	r0, r1, #1
   1b304:	strbeq	r7, [r5, r1]
   1b308:	uxtb	r1, r0
   1b30c:	strb	r0, [fp, #-48]	; 0xffffffd0
   1b310:	cmp	r1, r0
   1b314:	beq	1b2dc <__assert_fail@plt+0x9640>
   1b318:	b	1b3c0 <__assert_fail@plt+0x9724>
   1b31c:	ldr	r0, [r4, #20]
   1b320:	cmp	r0, #1
   1b324:	blt	1b3c0 <__assert_fail@plt+0x9724>
   1b328:	mov	r6, #0
   1b32c:	mov	r0, #0
   1b330:	sub	r2, fp, #48	; 0x30
   1b334:	str	r0, [fp, #-44]	; 0xffffffd4
   1b338:	str	r0, [fp, #-48]	; 0xffffffd0
   1b33c:	ldr	r0, [r4]
   1b340:	ldr	r1, [r0, r6, lsl #2]
   1b344:	add	r0, sp, #32
   1b348:	bl	11834 <wcrtomb@plt>
   1b34c:	cmn	r0, #1
   1b350:	beq	1b36c <__assert_fail@plt+0x96d0>
   1b354:	ldrb	r0, [sp, #32]
   1b358:	cmp	r9, #0
   1b35c:	strb	r7, [r5, r0]
   1b360:	beq	1b36c <__assert_fail@plt+0x96d0>
   1b364:	bl	118e8 <tolower@plt>
   1b368:	strb	r7, [r5, r0]
   1b36c:	ldr	r0, [sp, #20]
   1b370:	ldrb	r0, [r0, #14]
   1b374:	tst	r0, #64	; 0x40
   1b378:	beq	1b3b0 <__assert_fail@plt+0x9714>
   1b37c:	ldr	r0, [r8, #92]	; 0x5c
   1b380:	cmp	r0, #2
   1b384:	blt	1b3b0 <__assert_fail@plt+0x9714>
   1b388:	ldr	r0, [r4]
   1b38c:	ldr	r0, [r0, r6, lsl #2]
   1b390:	bl	11900 <towlower@plt>
   1b394:	mov	r1, r0
   1b398:	add	r0, sp, #32
   1b39c:	sub	r2, fp, #48	; 0x30
   1b3a0:	bl	11834 <wcrtomb@plt>
   1b3a4:	cmn	r0, #1
   1b3a8:	ldrbne	r0, [sp, #32]
   1b3ac:	strbne	r7, [r5, r0]
   1b3b0:	ldr	r0, [r4, #20]
   1b3b4:	add	r6, r6, #1
   1b3b8:	cmp	r6, r0
   1b3bc:	blt	1b32c <__assert_fail@plt+0x9690>
   1b3c0:	ldr	r1, [sp, #12]
   1b3c4:	ldr	r2, [sp, #16]
   1b3c8:	ldr	r0, [r1, #8]
   1b3cc:	add	r2, r2, #1
   1b3d0:	cmp	r2, r0
   1b3d4:	blt	1b0f8 <__assert_fail@plt+0x945c>
   1b3d8:	b	1b404 <__assert_fail@plt+0x9768>
   1b3dc:	mov	r0, r5
   1b3e0:	mov	r1, #1
   1b3e4:	mov	r2, #256	; 0x100
   1b3e8:	bl	11b04 <memset@plt>
   1b3ec:	cmp	r4, #2
   1b3f0:	bne	1b404 <__assert_fail@plt+0x9768>
   1b3f4:	ldr	r1, [sp, #20]
   1b3f8:	ldrb	r0, [r1, #28]
   1b3fc:	orr	r0, r0, #1
   1b400:	strb	r0, [r1, #28]
   1b404:	sub	sp, fp, #28
   1b408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b40c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b410:	add	fp, sp, #24
   1b414:	mov	r4, r0
   1b418:	mov	r0, #0
   1b41c:	mov	r6, r2
   1b420:	mov	r8, r1
   1b424:	str	r0, [r4]
   1b428:	str	r0, [r4, #4]
   1b42c:	str	r0, [r4, #8]
   1b430:	mov	r0, #256	; 0x100
   1b434:	bl	1a1f8 <__assert_fail@plt+0x855c>
   1b438:	cmp	r0, #0
   1b43c:	str	r0, [r4, #16]
   1b440:	beq	1b4f0 <__assert_fail@plt+0x9854>
   1b444:	movw	r0, #45820	; 0xb2fc
   1b448:	tst	r6, #1
   1b44c:	and	r1, r6, #2
   1b450:	movt	r0, #3
   1b454:	movweq	r0, #710	; 0x2c6
   1b458:	movteq	r0, #257	; 0x101
   1b45c:	tst	r6, #4
   1b460:	orr	r5, r0, r1, lsl #21
   1b464:	bne	1b478 <__assert_fail@plt+0x97dc>
   1b468:	ldrb	r0, [r4, #28]
   1b46c:	and	r0, r0, #127	; 0x7f
   1b470:	strb	r0, [r4, #28]
   1b474:	b	1b498 <__assert_fail@plt+0x97fc>
   1b478:	ldrb	r0, [r4, #28]
   1b47c:	mvn	r1, #127	; 0x7f
   1b480:	orr	r0, r0, r1
   1b484:	movw	r1, #45758	; 0xb2be
   1b488:	movt	r1, #323	; 0x143
   1b48c:	strb	r0, [r4, #28]
   1b490:	and	r1, r5, r1
   1b494:	orr	r5, r1, #256	; 0x100
   1b498:	and	r1, r6, #8
   1b49c:	and	r0, r0, #239	; 0xef
   1b4a0:	mov	r7, #0
   1b4a4:	orr	r0, r0, r1, lsl #1
   1b4a8:	str	r7, [r4, #20]
   1b4ac:	strb	r0, [r4, #28]
   1b4b0:	mov	r0, r8
   1b4b4:	bl	11a98 <strlen@plt>
   1b4b8:	mov	r2, r0
   1b4bc:	mov	r0, r4
   1b4c0:	mov	r1, r8
   1b4c4:	mov	r3, r5
   1b4c8:	bl	1a398 <__assert_fail@plt+0x86fc>
   1b4cc:	cmp	r0, #16
   1b4d0:	mov	r5, r0
   1b4d4:	movweq	r5, #8
   1b4d8:	cmp	r5, #0
   1b4dc:	bne	1b4f8 <__assert_fail@plt+0x985c>
   1b4e0:	mov	r0, r4
   1b4e4:	bl	1aff4 <__assert_fail@plt+0x9358>
   1b4e8:	mov	r0, r7
   1b4ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b4f0:	mov	r7, #12
   1b4f4:	b	1b4e8 <__assert_fail@plt+0x984c>
   1b4f8:	ldr	r0, [r4, #16]
   1b4fc:	bl	1a12c <__assert_fail@plt+0x8490>
   1b500:	str	r7, [r4, #16]
   1b504:	mov	r7, r5
   1b508:	b	1b4e8 <__assert_fail@plt+0x984c>
   1b50c:	push	{r4, r5, r6, r7, fp, lr}
   1b510:	add	fp, sp, #16
   1b514:	cmp	r0, #17
   1b518:	bcs	1b58c <__assert_fail@plt+0x98f0>
   1b51c:	movw	r1, #42496	; 0xa600
   1b520:	mov	r4, r2
   1b524:	mov	r2, #5
   1b528:	mov	r5, r3
   1b52c:	movt	r1, #2
   1b530:	ldr	r0, [r1, r0, lsl #2]
   1b534:	movw	r1, #42112	; 0xa480
   1b538:	movt	r1, #2
   1b53c:	add	r1, r1, r0
   1b540:	mov	r0, #0
   1b544:	bl	11924 <dcgettext@plt>
   1b548:	mov	r6, r0
   1b54c:	bl	11a98 <strlen@plt>
   1b550:	add	r7, r0, #1
   1b554:	cmp	r5, #0
   1b558:	beq	1b574 <__assert_fail@plt+0x98d8>
   1b55c:	cmp	r7, r5
   1b560:	mov	r2, r7
   1b564:	bhi	1b57c <__assert_fail@plt+0x98e0>
   1b568:	mov	r0, r4
   1b56c:	mov	r1, r6
   1b570:	bl	118dc <memcpy@plt>
   1b574:	mov	r0, r7
   1b578:	pop	{r4, r5, r6, r7, fp, pc}
   1b57c:	sub	r2, r5, #1
   1b580:	mov	r0, #0
   1b584:	strb	r0, [r4, r2]
   1b588:	b	1b568 <__assert_fail@plt+0x98cc>
   1b58c:	bl	11c60 <abort@plt>
   1b590:	push	{r4, r5, fp, lr}
   1b594:	add	fp, sp, #8
   1b598:	ldr	r5, [r0]
   1b59c:	mov	r4, r0
   1b5a0:	cmp	r5, #0
   1b5a4:	beq	1b5d0 <__assert_fail@plt+0x9934>
   1b5a8:	movw	r0, #0
   1b5ac:	movw	r1, #0
   1b5b0:	movt	r0, #0
   1b5b4:	movt	r1, #0
   1b5b8:	orrs	r0, r1, r0
   1b5bc:	beq	1b5c8 <__assert_fail@plt+0x992c>
   1b5c0:	add	r0, r5, #136	; 0x88
   1b5c4:	bl	11864 <pthread_mutex_destroy@plt>
   1b5c8:	mov	r0, r5
   1b5cc:	bl	1b5f8 <__assert_fail@plt+0x995c>
   1b5d0:	mov	r5, #0
   1b5d4:	str	r5, [r4]
   1b5d8:	str	r5, [r4, #4]
   1b5dc:	ldr	r0, [r4, #16]
   1b5e0:	bl	1a12c <__assert_fail@plt+0x8490>
   1b5e4:	str	r5, [r4, #16]
   1b5e8:	ldr	r0, [r4, #20]
   1b5ec:	bl	1a12c <__assert_fail@plt+0x8490>
   1b5f0:	str	r5, [r4, #20]
   1b5f4:	pop	{r4, r5, fp, pc}
   1b5f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b5fc:	add	fp, sp, #24
   1b600:	mov	r8, r0
   1b604:	ldr	r0, [r0]
   1b608:	cmp	r0, #0
   1b60c:	beq	1b654 <__assert_fail@plt+0x99b8>
   1b610:	ldr	r1, [r8, #8]
   1b614:	cmp	r1, #0
   1b618:	beq	1b654 <__assert_fail@plt+0x99b8>
   1b61c:	bl	1d5e4 <__assert_fail@plt+0xb948>
   1b620:	ldr	r0, [r8, #8]
   1b624:	cmp	r0, #2
   1b628:	bcc	1b654 <__assert_fail@plt+0x99b8>
   1b62c:	mov	r5, #1
   1b630:	mov	r6, #8
   1b634:	ldr	r0, [r8]
   1b638:	add	r0, r0, r6
   1b63c:	bl	1d5e4 <__assert_fail@plt+0xb948>
   1b640:	ldr	r0, [r8, #8]
   1b644:	add	r5, r5, #1
   1b648:	add	r6, r6, #8
   1b64c:	cmp	r5, r0
   1b650:	bcc	1b634 <__assert_fail@plt+0x9998>
   1b654:	ldr	r0, [r8, #12]
   1b658:	bl	1a12c <__assert_fail@plt+0x8490>
   1b65c:	ldr	r0, [r8, #8]
   1b660:	cmp	r0, #0
   1b664:	beq	1b6c0 <__assert_fail@plt+0x9a24>
   1b668:	mov	r5, #0
   1b66c:	mov	r6, #8
   1b670:	ldr	r0, [r8, #24]
   1b674:	cmp	r0, #0
   1b678:	beq	1b684 <__assert_fail@plt+0x99e8>
   1b67c:	ldr	r0, [r0, r6]
   1b680:	bl	1a12c <__assert_fail@plt+0x8490>
   1b684:	ldr	r0, [r8, #28]
   1b688:	cmp	r0, #0
   1b68c:	beq	1b698 <__assert_fail@plt+0x99fc>
   1b690:	ldr	r0, [r0, r6]
   1b694:	bl	1a12c <__assert_fail@plt+0x8490>
   1b698:	ldr	r0, [r8, #20]
   1b69c:	cmp	r0, #0
   1b6a0:	beq	1b6ac <__assert_fail@plt+0x9a10>
   1b6a4:	ldr	r0, [r0, r6]
   1b6a8:	bl	1a12c <__assert_fail@plt+0x8490>
   1b6ac:	ldr	r0, [r8, #8]
   1b6b0:	add	r5, r5, #1
   1b6b4:	add	r6, r6, #12
   1b6b8:	cmp	r5, r0
   1b6bc:	bcc	1b670 <__assert_fail@plt+0x99d4>
   1b6c0:	ldr	r0, [r8, #20]
   1b6c4:	bl	1a12c <__assert_fail@plt+0x8490>
   1b6c8:	ldr	r0, [r8, #24]
   1b6cc:	bl	1a12c <__assert_fail@plt+0x8490>
   1b6d0:	ldr	r0, [r8, #28]
   1b6d4:	bl	1a12c <__assert_fail@plt+0x8490>
   1b6d8:	ldr	r0, [r8]
   1b6dc:	bl	1a12c <__assert_fail@plt+0x8490>
   1b6e0:	ldr	r5, [r8, #32]
   1b6e4:	cmp	r5, #0
   1b6e8:	beq	1b748 <__assert_fail@plt+0x9aac>
   1b6ec:	mov	r6, #0
   1b6f0:	add	r0, r6, r6, lsl #1
   1b6f4:	ldr	r0, [r5, r0, lsl #2]!
   1b6f8:	add	r7, r5, #8
   1b6fc:	cmp	r0, #1
   1b700:	blt	1b724 <__assert_fail@plt+0x9a88>
   1b704:	mov	r4, #0
   1b708:	ldr	r0, [r7]
   1b70c:	ldr	r0, [r0, r4, lsl #2]
   1b710:	bl	1d614 <__assert_fail@plt+0xb978>
   1b714:	ldr	r0, [r5]
   1b718:	add	r4, r4, #1
   1b71c:	cmp	r4, r0
   1b720:	blt	1b708 <__assert_fail@plt+0x9a6c>
   1b724:	ldr	r0, [r7]
   1b728:	bl	1a12c <__assert_fail@plt+0x8490>
   1b72c:	ldr	r0, [r8, #68]	; 0x44
   1b730:	cmp	r6, r0
   1b734:	bcs	1b744 <__assert_fail@plt+0x9aa8>
   1b738:	ldr	r5, [r8, #32]
   1b73c:	add	r6, r6, #1
   1b740:	b	1b6f0 <__assert_fail@plt+0x9a54>
   1b744:	ldr	r5, [r8, #32]
   1b748:	mov	r0, r5
   1b74c:	bl	1a12c <__assert_fail@plt+0x8490>
   1b750:	ldr	r0, [r8, #60]	; 0x3c
   1b754:	movw	r1, #42564	; 0xa644
   1b758:	movt	r1, #2
   1b75c:	cmp	r0, r1
   1b760:	beq	1b768 <__assert_fail@plt+0x9acc>
   1b764:	bl	1a12c <__assert_fail@plt+0x8490>
   1b768:	ldr	r0, [r8, #132]	; 0x84
   1b76c:	bl	1a12c <__assert_fail@plt+0x8490>
   1b770:	mov	r0, r8
   1b774:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b778:	b	1a12c <__assert_fail@plt+0x8490>
   1b77c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b780:	add	fp, sp, #28
   1b784:	sub	sp, sp, #28
   1b788:	ldr	sl, [fp, #8]
   1b78c:	mov	r7, #2
   1b790:	cmp	sl, #7
   1b794:	bhi	1b868 <__assert_fail@plt+0x9bcc>
   1b798:	mov	r5, r0
   1b79c:	ldr	r0, [r0]
   1b7a0:	mov	r6, r3
   1b7a4:	mov	r9, r2
   1b7a8:	mov	r4, r1
   1b7ac:	tst	sl, #4
   1b7b0:	str	r0, [sp, #24]
   1b7b4:	bne	1b7cc <__assert_fail@plt+0x9b30>
   1b7b8:	mov	r0, r4
   1b7bc:	bl	11a98 <strlen@plt>
   1b7c0:	mov	r7, r0
   1b7c4:	mov	r8, #0
   1b7c8:	b	1b7d4 <__assert_fail@plt+0x9b38>
   1b7cc:	ldr	r8, [r6]
   1b7d0:	ldr	r7, [r6, #4]
   1b7d4:	movw	r0, #0
   1b7d8:	movw	r1, #0
   1b7dc:	movt	r0, #0
   1b7e0:	movt	r1, #0
   1b7e4:	orrs	r0, r1, r0
   1b7e8:	str	r0, [sp, #20]
   1b7ec:	beq	1b7fc <__assert_fail@plt+0x9b60>
   1b7f0:	ldr	r0, [sp, #24]
   1b7f4:	add	r0, r0, #136	; 0x88
   1b7f8:	bl	118ac <pthread_mutex_lock@plt>
   1b7fc:	ldrb	r0, [r5, #28]
   1b800:	tst	r0, #16
   1b804:	bne	1b818 <__assert_fail@plt+0x9b7c>
   1b808:	str	r7, [sp]
   1b80c:	stmib	sp, {r7, r9}
   1b810:	str	r6, [sp, #12]
   1b814:	b	1b82c <__assert_fail@plt+0x9b90>
   1b818:	mov	r0, #0
   1b81c:	str	r7, [sp]
   1b820:	str	r7, [sp, #4]
   1b824:	str	r0, [sp, #8]
   1b828:	str	r0, [sp, #12]
   1b82c:	mov	r0, r5
   1b830:	mov	r1, r4
   1b834:	mov	r2, r7
   1b838:	mov	r3, r8
   1b83c:	str	sl, [sp, #16]
   1b840:	bl	1b874 <__assert_fail@plt+0x9bd8>
   1b844:	mov	r7, r0
   1b848:	ldr	r0, [sp, #20]
   1b84c:	cmp	r0, #0
   1b850:	beq	1b860 <__assert_fail@plt+0x9bc4>
   1b854:	ldr	r0, [sp, #24]
   1b858:	add	r0, r0, #136	; 0x88
   1b85c:	bl	117f8 <pthread_mutex_unlock@plt>
   1b860:	cmp	r7, #0
   1b864:	movwne	r7, #1
   1b868:	mov	r0, r7
   1b86c:	sub	sp, fp, #28
   1b870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b878:	add	fp, sp, #28
   1b87c:	sub	sp, sp, #436	; 0x1b4
   1b880:	ldr	r5, [r0]
   1b884:	str	r2, [sp, #80]	; 0x50
   1b888:	mov	r7, r1
   1b88c:	mov	r6, r0
   1b890:	add	r0, sp, #112	; 0x70
   1b894:	mov	r1, #0
   1b898:	mov	r2, #136	; 0x88
   1b89c:	mov	r4, r3
   1b8a0:	mov	r8, #0
   1b8a4:	bl	11b04 <memset@plt>
   1b8a8:	str	r5, [sp, #196]	; 0xc4
   1b8ac:	ldr	r9, [fp, #16]
   1b8b0:	ldr	ip, [fp, #8]
   1b8b4:	mov	r0, #0
   1b8b8:	ldr	r1, [r6, #16]
   1b8bc:	cmp	r1, #0
   1b8c0:	beq	1b8dc <__assert_fail@plt+0x9c40>
   1b8c4:	ldrb	r2, [r6, #28]
   1b8c8:	and	r2, r2, #9
   1b8cc:	cmp	r2, #8
   1b8d0:	movne	r1, #0
   1b8d4:	subs	r0, r4, ip
   1b8d8:	movne	r0, r1
   1b8dc:	ldr	r2, [r6, #24]
   1b8e0:	ldr	r1, [r6, #8]
   1b8e4:	mov	sl, #1
   1b8e8:	mvn	r3, r2
   1b8ec:	cmp	r2, r9
   1b8f0:	addcc	r8, r3, r9
   1b8f4:	cmp	r1, #0
   1b8f8:	beq	1d044 <__assert_fail@plt+0xb3a8>
   1b8fc:	ldr	r1, [r5, #36]	; 0x24
   1b900:	cmp	r1, #0
   1b904:	ldrne	r2, [r5, #40]	; 0x28
   1b908:	cmpne	r2, #0
   1b90c:	beq	1d044 <__assert_fail@plt+0xb3a8>
   1b910:	ldr	r3, [r5, #44]	; 0x2c
   1b914:	cmp	r3, #0
   1b918:	strne	r7, [sp, #104]	; 0x68
   1b91c:	ldrne	r7, [r5, #48]	; 0x30
   1b920:	cmpne	r7, #0
   1b924:	beq	1d044 <__assert_fail@plt+0xb3a8>
   1b928:	ldr	r1, [r1, #8]
   1b92c:	ldr	r7, [r6, #20]
   1b930:	str	r0, [sp, #100]	; 0x64
   1b934:	cmp	r1, #0
   1b938:	str	r7, [sp, #108]	; 0x6c
   1b93c:	beq	1b948 <__assert_fail@plt+0x9cac>
   1b940:	ldr	lr, [sp, #104]	; 0x68
   1b944:	b	1b958 <__assert_fail@plt+0x9cbc>
   1b948:	ldr	r1, [r2, #8]
   1b94c:	ldr	lr, [sp, #104]	; 0x68
   1b950:	cmp	r1, #0
   1b954:	beq	1c8ac <__assert_fail@plt+0xac10>
   1b958:	mov	r0, ip
   1b95c:	str	r0, [sp, #92]	; 0x5c
   1b960:	subs	r9, r9, r8
   1b964:	mov	r0, #1
   1b968:	str	r0, [sp, #60]	; 0x3c
   1b96c:	bne	1b980 <__assert_fail@plt+0x9ce4>
   1b970:	ldr	r0, [r5, #76]	; 0x4c
   1b974:	cmp	r0, #0
   1b978:	movwne	r0, #1
   1b97c:	str	r0, [sp, #60]	; 0x3c
   1b980:	ldr	r0, [r6, #12]
   1b984:	ldr	r2, [r5, #92]	; 0x5c
   1b988:	ldr	r7, [sp, #108]	; 0x6c
   1b98c:	ldr	ip, [r5, #8]
   1b990:	str	r7, [sp, #176]	; 0xb0
   1b994:	str	lr, [sp, #112]	; 0x70
   1b998:	str	r2, [sp, #192]	; 0xc0
   1b99c:	ubfx	r3, r0, #22, #1
   1b9a0:	and	r0, r0, #4194304	; 0x400000
   1b9a4:	orrs	r0, r7, r0
   1b9a8:	ldr	r7, [sp, #80]	; 0x50
   1b9ac:	strb	r3, [sp, #184]	; 0xb8
   1b9b0:	movwne	r0, #1
   1b9b4:	strb	r0, [sp, #187]	; 0xbb
   1b9b8:	add	r0, sp, #112	; 0x70
   1b9bc:	ldrb	r1, [r5, #88]	; 0x58
   1b9c0:	add	r3, r0, #44	; 0x2c
   1b9c4:	vdup.32	q8, r7
   1b9c8:	vst1.32	{d16-d17}, [r3]
   1b9cc:	ubfx	r3, r1, #3, #1
   1b9d0:	strb	r3, [sp, #186]	; 0xba
   1b9d4:	ubfx	r1, r1, #2, #1
   1b9d8:	strb	r1, [sp, #185]	; 0xb9
   1b9dc:	add	r1, ip, #1
   1b9e0:	cmp	r2, r1
   1b9e4:	movgt	r1, r2
   1b9e8:	add	r2, r7, #1
   1b9ec:	cmp	r2, r1
   1b9f0:	movlt	r1, r2
   1b9f4:	bl	1d730 <__assert_fail@plt+0xba94>
   1b9f8:	cmp	r0, #0
   1b9fc:	str	r5, [sp, #96]	; 0x60
   1ba00:	bne	1d068 <__assert_fail@plt+0xb3cc>
   1ba04:	add	r1, r5, #96	; 0x60
   1ba08:	str	r9, [sp, #84]	; 0x54
   1ba0c:	str	r8, [sp, #32]
   1ba10:	ldr	r3, [fp, #24]
   1ba14:	ldr	r0, [fp, #12]
   1ba18:	str	r1, [sp, #180]	; 0xb4
   1ba1c:	ldrb	r1, [r5, #88]	; 0x58
   1ba20:	ubfx	r1, r1, #4, #1
   1ba24:	ldr	r9, [sp, #104]	; 0x68
   1ba28:	strb	r1, [sp, #190]	; 0xbe
   1ba2c:	mov	r1, #0
   1ba30:	ldrb	r2, [sp, #187]	; 0xbb
   1ba34:	cmp	r2, #0
   1ba38:	bne	1ba50 <__assert_fail@plt+0x9db4>
   1ba3c:	str	r9, [sp, #116]	; 0x74
   1ba40:	ldr	r1, [r5, #92]	; 0x5c
   1ba44:	cmp	r1, #1
   1ba48:	ldr	r1, [sp, #80]	; 0x50
   1ba4c:	movwgt	r1, #0
   1ba50:	str	r0, [sp, #168]	; 0xa8
   1ba54:	str	r1, [sp, #144]	; 0x90
   1ba58:	str	r1, [sp, #140]	; 0x8c
   1ba5c:	str	r0, [sp, #164]	; 0xa4
   1ba60:	str	r6, [sp, #68]	; 0x44
   1ba64:	ldr	sl, [sp, #108]	; 0x6c
   1ba68:	ldrb	r0, [r6, #28]
   1ba6c:	ldr	r6, [sp, #100]	; 0x64
   1ba70:	lsr	r0, r0, #7
   1ba74:	strb	r0, [sp, #189]	; 0xbd
   1ba78:	mvn	r0, #0
   1ba7c:	ldr	r8, [r5, #76]	; 0x4c
   1ba80:	str	r0, [sp, #204]	; 0xcc
   1ba84:	str	r3, [sp, #200]	; 0xc8
   1ba88:	lsl	r5, r8, #1
   1ba8c:	cmp	r8, #1
   1ba90:	blt	1bae4 <__assert_fail@plt+0x9e48>
   1ba94:	movw	r0, #43690	; 0xaaaa
   1ba98:	mov	r2, #12
   1ba9c:	movt	r0, #2730	; 0xaaa
   1baa0:	cmp	r5, r0
   1baa4:	bhi	1d008 <__assert_fail@plt+0xb36c>
   1baa8:	add	r0, r8, r8, lsl #1
   1baac:	lsl	r0, r0, #4
   1bab0:	bl	1a1f8 <__assert_fail@plt+0x855c>
   1bab4:	mov	r6, r0
   1bab8:	str	r0, [sp, #228]	; 0xe4
   1babc:	lsl	r0, r8, #3
   1bac0:	bl	1a1f8 <__assert_fail@plt+0x855c>
   1bac4:	cmp	r0, #0
   1bac8:	str	r0, [sp, #244]	; 0xf4
   1bacc:	beq	1d090 <__assert_fail@plt+0xb3f4>
   1bad0:	cmp	r6, #0
   1bad4:	ldr	sl, [sp, #108]	; 0x6c
   1bad8:	ldr	r6, [sp, #100]	; 0x64
   1badc:	mov	r2, #12
   1bae0:	beq	1d008 <__assert_fail@plt+0xb36c>
   1bae4:	mov	r0, #1
   1bae8:	str	r5, [sp, #240]	; 0xf0
   1baec:	str	r0, [sp, #232]	; 0xe8
   1baf0:	ldr	r0, [sp, #84]	; 0x54
   1baf4:	str	r5, [sp, #224]	; 0xe0
   1baf8:	cmp	r0, #1
   1bafc:	bhi	1bb10 <__assert_fail@plt+0x9e74>
   1bb00:	ldr	r0, [sp, #96]	; 0x60
   1bb04:	ldrb	r0, [r0, #88]	; 0x58
   1bb08:	tst	r0, #2
   1bb0c:	beq	1bb40 <__assert_fail@plt+0x9ea4>
   1bb10:	ldr	r0, [sp, #148]	; 0x94
   1bb14:	mov	r2, #12
   1bb18:	cmn	r0, #-1073741822	; 0xc0000002
   1bb1c:	bhi	1d008 <__assert_fail@plt+0xb36c>
   1bb20:	mov	r1, #4
   1bb24:	add	r0, r1, r0, lsl #2
   1bb28:	bl	1a1f8 <__assert_fail@plt+0x855c>
   1bb2c:	ldr	r6, [sp, #100]	; 0x64
   1bb30:	mov	r2, #12
   1bb34:	cmp	r0, #0
   1bb38:	str	r0, [sp, #212]	; 0xd4
   1bb3c:	beq	1d008 <__assert_fail@plt+0xb36c>
   1bb40:	ldr	r1, [fp, #24]
   1bb44:	ldr	r2, [sp, #92]	; 0x5c
   1bb48:	str	r4, [fp, #-212]	; 0xffffff2c
   1bb4c:	mov	r0, #4
   1bb50:	mov	r8, #1
   1bb54:	mov	r7, r4
   1bb58:	tst	r1, #1
   1bb5c:	mov	r1, #4
   1bb60:	mov	r5, r2
   1bb64:	movweq	r1, #6
   1bb68:	cmp	r2, r4
   1bb6c:	str	r1, [sp, #172]	; 0xac
   1bb70:	ldr	r1, [sp, #96]	; 0x60
   1bb74:	mvnlt	r8, #0
   1bb78:	movlt	r5, r4
   1bb7c:	movlt	r7, r2
   1bb80:	cmp	r6, #0
   1bb84:	ldr	r1, [r1, #92]	; 0x5c
   1bb88:	str	r1, [sp, #64]	; 0x40
   1bb8c:	beq	1bbd0 <__assert_fail@plt+0x9f34>
   1bb90:	cmp	r1, #1
   1bb94:	beq	1bbb4 <__assert_fail@plt+0x9f18>
   1bb98:	ldr	r0, [sp, #68]	; 0x44
   1bb9c:	ldr	r0, [r0, #12]
   1bba0:	and	r0, r0, #4194304	; 0x400000
   1bba4:	orr	r0, sl, r0
   1bba8:	clz	r0, r0
   1bbac:	lsr	r0, r0, #5
   1bbb0:	lsl	r0, r0, #2
   1bbb4:	cmp	sl, #0
   1bbb8:	mov	r1, sl
   1bbbc:	movwne	r1, #1
   1bbc0:	cmp	r2, r4
   1bbc4:	orrge	r1, r1, #2
   1bbc8:	orr	r0, r1, r0
   1bbcc:	b	1bbd4 <__assert_fail@plt+0x9f38>
   1bbd0:	mov	r0, #8
   1bbd4:	add	r1, sp, #112	; 0x70
   1bbd8:	cmp	r2, r4
   1bbdc:	str	r7, [sp, #56]	; 0x38
   1bbe0:	str	r8, [sp, #76]	; 0x4c
   1bbe4:	str	r5, [sp, #72]	; 0x48
   1bbe8:	add	r1, r1, #32
   1bbec:	str	r1, [sp, #28]
   1bbf0:	sub	r1, fp, #212	; 0xd4
   1bbf4:	movwlt	r1, #0
   1bbf8:	cmp	r1, #0
   1bbfc:	str	r1, [sp, #48]	; 0x30
   1bc00:	movwne	r1, #1
   1bc04:	str	r1, [sp, #52]	; 0x34
   1bc08:	sub	r1, fp, #208	; 0xd0
   1bc0c:	add	r1, r1, #16
   1bc10:	str	r1, [sp, #36]	; 0x24
   1bc14:	sub	r1, r0, #4
   1bc18:	str	r1, [sp, #44]	; 0x2c
   1bc1c:	cmp	r1, #4
   1bc20:	bhi	1bd08 <__assert_fail@plt+0xa06c>
   1bc24:	ldr	r2, [fp, #24]
   1bc28:	add	r0, pc, #0
   1bc2c:	ldr	pc, [r0, r1, lsl #2]
   1bc30:	andeq	fp, r1, r4, asr #24
   1bc34:	andeq	fp, r1, r4, asr #24
   1bc38:			; <UNDEFINED> instruction: 0x0001bcbc
   1bc3c:	muleq	r1, r4, ip
   1bc40:	muleq	r1, r4, sp
   1bc44:	mov	r2, #1
   1bc48:	cmp	r4, r7
   1bc4c:	blt	1d008 <__assert_fail@plt+0xb36c>
   1bc50:	ldr	r1, [sp, #80]	; 0x50
   1bc54:	cmp	r4, r1
   1bc58:	mov	r0, #0
   1bc5c:	ldrblt	r0, [r9, r4]
   1bc60:	cmp	sl, #0
   1bc64:	ldrbne	r0, [sl, r0]
   1bc68:	ldrb	r0, [r6, r0]
   1bc6c:	cmp	r0, #0
   1bc70:	bne	1bd90 <__assert_fail@plt+0xa0f4>
   1bc74:	sub	r0, r4, #1
   1bc78:	cmp	r4, r7
   1bc7c:	mov	r4, r0
   1bc80:	str	r0, [fp, #-212]	; 0xffffff2c
   1bc84:	bgt	1bc54 <__assert_fail@plt+0x9fb8>
   1bc88:	b	1d008 <__assert_fail@plt+0xb36c>
   1bc8c:	add	r4, r4, #1
   1bc90:	str	r4, [fp, #-212]	; 0xffffff2c
   1bc94:	cmp	r4, r5
   1bc98:	bge	1bcd4 <__assert_fail@plt+0xa038>
   1bc9c:	ldrb	r0, [r9, r4]
   1bca0:	ldrb	r0, [sl, r0]
   1bca4:	ldrb	r0, [r6, r0]
   1bca8:	cmp	r0, #0
   1bcac:	beq	1bc8c <__assert_fail@plt+0x9ff0>
   1bcb0:	b	1bcd4 <__assert_fail@plt+0xa038>
   1bcb4:	add	r4, r4, #1
   1bcb8:	str	r4, [fp, #-212]	; 0xffffff2c
   1bcbc:	cmp	r4, r5
   1bcc0:	bge	1bcd4 <__assert_fail@plt+0xa038>
   1bcc4:	ldrb	r0, [r9, r4]
   1bcc8:	ldrb	r0, [r6, r0]
   1bccc:	cmp	r0, #0
   1bcd0:	beq	1bcb4 <__assert_fail@plt+0xa018>
   1bcd4:	cmp	r4, r5
   1bcd8:	bne	1bd94 <__assert_fail@plt+0xa0f8>
   1bcdc:	ldr	r1, [sp, #80]	; 0x50
   1bce0:	mov	r0, #0
   1bce4:	mov	r4, r5
   1bce8:	cmp	r5, r1
   1bcec:	ldrblt	r0, [r9, r5]
   1bcf0:	cmp	sl, #0
   1bcf4:	ldrbne	r0, [sl, r0]
   1bcf8:	ldrb	r0, [r6, r0]
   1bcfc:	cmp	r0, #0
   1bd00:	bne	1bd94 <__assert_fail@plt+0xa0f8>
   1bd04:	b	1d098 <__assert_fail@plt+0xb3fc>
   1bd08:	ldr	r0, [sp, #136]	; 0x88
   1bd0c:	ldr	r2, [sp, #144]	; 0x90
   1bd10:	sub	r1, r4, r0
   1bd14:	cmp	r1, r2
   1bd18:	bcs	1bd60 <__assert_fail@plt+0xa0c4>
   1bd1c:	ldr	r3, [sp, #140]	; 0x8c
   1bd20:	mov	r2, #0
   1bd24:	cmp	r1, r3
   1bd28:	bcs	1bd34 <__assert_fail@plt+0xa098>
   1bd2c:	ldr	r2, [sp, #116]	; 0x74
   1bd30:	ldrb	r2, [r2, r1]
   1bd34:	ldrb	r1, [r6, r2]
   1bd38:	cmp	r1, #0
   1bd3c:	bne	1bd90 <__assert_fail@plt+0xa0f4>
   1bd40:	add	r4, r4, r8
   1bd44:	mov	r2, #1
   1bd48:	cmp	r4, r7
   1bd4c:	str	r4, [fp, #-212]	; 0xffffff2c
   1bd50:	blt	1d008 <__assert_fail@plt+0xb36c>
   1bd54:	cmp	r4, r5
   1bd58:	ble	1bd0c <__assert_fail@plt+0xa070>
   1bd5c:	b	1d008 <__assert_fail@plt+0xb36c>
   1bd60:	ldr	r2, [fp, #24]
   1bd64:	add	r0, sp, #112	; 0x70
   1bd68:	mov	r1, r4
   1bd6c:	bl	22624 <__assert_fail@plt+0x10988>
   1bd70:	cmp	r0, #0
   1bd74:	bne	1d068 <__assert_fail@plt+0xb3cc>
   1bd78:	ldr	r0, [sp, #136]	; 0x88
   1bd7c:	ldr	r4, [fp, #-212]	; 0xffffff2c
   1bd80:	ldr	r7, [sp, #56]	; 0x38
   1bd84:	ldr	r6, [sp, #100]	; 0x64
   1bd88:	sub	r1, r4, r0
   1bd8c:	b	1bd1c <__assert_fail@plt+0xa080>
   1bd90:	ldr	r2, [fp, #24]
   1bd94:	add	r0, sp, #112	; 0x70
   1bd98:	mov	r1, r4
   1bd9c:	bl	22624 <__assert_fail@plt+0x10988>
   1bda0:	cmp	r0, #0
   1bda4:	bne	1d068 <__assert_fail@plt+0xb3cc>
   1bda8:	ldr	r0, [sp, #64]	; 0x40
   1bdac:	cmp	r0, #1
   1bdb0:	ldrne	r0, [sp, #140]	; 0x8c
   1bdb4:	cmpne	r0, #0
   1bdb8:	bne	1bdf0 <__assert_fail@plt+0xa154>
   1bdbc:	mov	r0, #0
   1bdc0:	str	r0, [sp, #220]	; 0xdc
   1bdc4:	str	r0, [sp, #232]	; 0xe8
   1bdc8:	str	r0, [sp, #216]	; 0xd8
   1bdcc:	str	r0, [fp, #-64]	; 0xffffffc0
   1bdd0:	ldr	r4, [sp, #196]	; 0xc4
   1bdd4:	ldr	r7, [sp, #152]	; 0x98
   1bdd8:	ldr	r8, [r4, #36]	; 0x24
   1bddc:	ldrsb	r0, [r8, #52]	; 0x34
   1bde0:	cmn	r0, #1
   1bde4:	ble	1be04 <__assert_fail@plt+0xa168>
   1bde8:	ldr	r5, [sp, #52]	; 0x34
   1bdec:	b	1be68 <__assert_fail@plt+0xa1cc>
   1bdf0:	ldr	r0, [sp, #120]	; 0x78
   1bdf4:	ldr	r0, [r0]
   1bdf8:	cmn	r0, #1
   1bdfc:	bne	1bdbc <__assert_fail@plt+0xa120>
   1be00:	b	1c5f0 <__assert_fail@plt+0xa954>
   1be04:	ldr	r2, [sp, #200]	; 0xc8
   1be08:	sub	r1, r7, #1
   1be0c:	add	r0, sp, #112	; 0x70
   1be10:	bl	22e5c <__assert_fail@plt+0x111c0>
   1be14:	ldr	r5, [sp, #52]	; 0x34
   1be18:	tst	r0, #1
   1be1c:	bne	1be64 <__assert_fail@plt+0xa1c8>
   1be20:	mov	r3, r0
   1be24:	cmp	r0, #0
   1be28:	beq	1be68 <__assert_fail@plt+0xa1cc>
   1be2c:	ands	r1, r3, #2
   1be30:	and	r0, r3, #4
   1be34:	cmpne	r0, #0
   1be38:	bne	1c620 <__assert_fail@plt+0xa984>
   1be3c:	cmp	r1, #0
   1be40:	bne	1c628 <__assert_fail@plt+0xa98c>
   1be44:	cmp	r0, #0
   1be48:	beq	1be68 <__assert_fail@plt+0xa1cc>
   1be4c:	ldr	r2, [r8, #40]	; 0x28
   1be50:	sub	r0, fp, #64	; 0x40
   1be54:	mov	r1, r4
   1be58:	bl	221e4 <__assert_fail@plt+0x10548>
   1be5c:	mov	r8, r0
   1be60:	b	1be68 <__assert_fail@plt+0xa1cc>
   1be64:	ldr	r8, [r4, #40]	; 0x28
   1be68:	cmp	r8, #0
   1be6c:	beq	1d090 <__assert_fail@plt+0xb3f4>
   1be70:	ldr	r0, [sp, #212]	; 0xd4
   1be74:	mov	r6, r5
   1be78:	cmp	r0, #0
   1be7c:	beq	1be94 <__assert_fail@plt+0xa1f8>
   1be80:	str	r8, [r0, r7, lsl #2]
   1be84:	mov	r6, r5
   1be88:	ldr	r0, [r4, #76]	; 0x4c
   1be8c:	cmp	r0, #0
   1be90:	bne	1c64c <__assert_fail@plt+0xa9b0>
   1be94:	ldrb	r0, [r8, #52]	; 0x34
   1be98:	tst	r0, #16
   1be9c:	bne	1c630 <__assert_fail@plt+0xa994>
   1bea0:	mvn	r0, #0
   1bea4:	mov	r2, #0
   1bea8:	str	r0, [sp, #88]	; 0x58
   1beac:	ldr	r0, [sp, #152]	; 0x98
   1beb0:	ldr	r1, [sp, #168]	; 0xa8
   1beb4:	cmp	r1, r0
   1beb8:	ble	1c2d0 <__assert_fail@plt+0xa634>
   1bebc:	ldr	r5, [sp, #48]	; 0x30
   1bec0:	str	r2, [sp, #40]	; 0x28
   1bec4:	ldr	r2, [sp, #148]	; 0x94
   1bec8:	ldr	r1, [sp, #160]	; 0xa0
   1becc:	str	r7, [sp, #92]	; 0x5c
   1bed0:	add	r7, r0, #1
   1bed4:	mov	r9, r6
   1bed8:	mov	r6, r8
   1bedc:	cmp	r7, r2
   1bee0:	blt	1beec <__assert_fail@plt+0xa250>
   1bee4:	cmp	r2, r1
   1bee8:	blt	1c288 <__assert_fail@plt+0xa5ec>
   1beec:	ldr	r2, [sp, #140]	; 0x8c
   1bef0:	cmp	r7, r2
   1bef4:	blt	1bf00 <__assert_fail@plt+0xa264>
   1bef8:	cmp	r2, r1
   1befc:	blt	1c288 <__assert_fail@plt+0xa5ec>
   1bf00:	ldrb	r0, [r6, #52]	; 0x34
   1bf04:	tst	r0, #32
   1bf08:	bne	1c0b0 <__assert_fail@plt+0xa414>
   1bf0c:	ldr	r1, [sp, #152]	; 0x98
   1bf10:	ldr	r0, [sp, #116]	; 0x74
   1bf14:	add	r2, r1, #1
   1bf18:	str	r2, [sp, #152]	; 0x98
   1bf1c:	ldrb	r4, [r0, r1]
   1bf20:	ldr	r0, [r6, #44]	; 0x2c
   1bf24:	cmp	r0, #0
   1bf28:	bne	1bf54 <__assert_fail@plt+0xa2b8>
   1bf2c:	ldr	r8, [r6, #48]	; 0x30
   1bf30:	cmp	r8, #0
   1bf34:	bne	1c2a4 <__assert_fail@plt+0xa608>
   1bf38:	ldr	r0, [sp, #196]	; 0xc4
   1bf3c:	mov	r1, r6
   1bf40:	bl	24ea8 <__assert_fail@plt+0x1320c>
   1bf44:	cmp	r0, #0
   1bf48:	bne	1bf20 <__assert_fail@plt+0xa284>
   1bf4c:	mov	r0, #12
   1bf50:	b	1c2c4 <__assert_fail@plt+0xa628>
   1bf54:	ldr	r8, [r0, r4, lsl #2]
   1bf58:	ldr	r0, [sp, #212]	; 0xd4
   1bf5c:	cmp	r0, #0
   1bf60:	beq	1bf78 <__assert_fail@plt+0xa2dc>
   1bf64:	sub	r0, fp, #64	; 0x40
   1bf68:	add	r1, sp, #112	; 0x70
   1bf6c:	mov	r2, r8
   1bf70:	bl	23814 <__assert_fail@plt+0x11b78>
   1bf74:	mov	r8, r0
   1bf78:	cmp	r8, #0
   1bf7c:	beq	1bfb8 <__assert_fail@plt+0xa31c>
   1bf80:	sub	r0, r6, r8
   1bf84:	mov	r6, r9
   1bf88:	clz	r0, r0
   1bf8c:	lsr	r0, r0, #5
   1bf90:	ands	r6, r9, r0
   1bf94:	ldr	r0, [sp, #92]	; 0x5c
   1bf98:	movne	r0, r7
   1bf9c:	mov	r7, r0
   1bfa0:	ldrb	r0, [r8, #52]	; 0x34
   1bfa4:	tst	r0, #16
   1bfa8:	bne	1c044 <__assert_fail@plt+0xa3a8>
   1bfac:	ldr	r9, [sp, #104]	; 0x68
   1bfb0:	ldr	sl, [sp, #108]	; 0x6c
   1bfb4:	b	1c090 <__assert_fail@plt+0xa3f4>
   1bfb8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1bfbc:	cmp	r0, #0
   1bfc0:	bne	1d090 <__assert_fail@plt+0xb3f4>
   1bfc4:	ldr	r0, [sp, #40]	; 0x28
   1bfc8:	ldr	r1, [sp, #60]	; 0x3c
   1bfcc:	cmp	r0, #0
   1bfd0:	mvn	r1, r1
   1bfd4:	movwne	r0, #1
   1bfd8:	tst	r1, r0
   1bfdc:	bne	1c2d8 <__assert_fail@plt+0xa63c>
   1bfe0:	ldr	r0, [sp, #212]	; 0xd4
   1bfe4:	cmp	r0, #0
   1bfe8:	beq	1c2d8 <__assert_fail@plt+0xa63c>
   1bfec:	ldr	r2, [sp, #152]	; 0x98
   1bff0:	ldr	r1, [sp, #216]	; 0xd8
   1bff4:	add	r0, r0, #4
   1bff8:	cmp	r2, r1
   1bffc:	bge	1c2d8 <__assert_fail@plt+0xa63c>
   1c000:	add	r3, r2, #1
   1c004:	str	r3, [sp, #152]	; 0x98
   1c008:	ldr	r2, [r0, r2, lsl #2]
   1c00c:	cmp	r2, #0
   1c010:	mov	r2, r3
   1c014:	beq	1bff8 <__assert_fail@plt+0xa35c>
   1c018:	sub	r0, fp, #64	; 0x40
   1c01c:	add	r1, sp, #112	; 0x70
   1c020:	mov	r2, #0
   1c024:	bl	23814 <__assert_fail@plt+0x11b78>
   1c028:	cmp	r0, #0
   1c02c:	mov	r8, r0
   1c030:	ldreq	r0, [fp, #-64]	; 0xffffffc0
   1c034:	cmpeq	r0, #0
   1c038:	bne	1c0a4 <__assert_fail@plt+0xa408>
   1c03c:	ldr	r0, [sp, #212]	; 0xd4
   1c040:	b	1bfec <__assert_fail@plt+0xa350>
   1c044:	ldr	r9, [sp, #104]	; 0x68
   1c048:	ldr	sl, [sp, #108]	; 0x6c
   1c04c:	sxtb	r0, r0
   1c050:	cmn	r0, #1
   1c054:	bgt	1c070 <__assert_fail@plt+0xa3d4>
   1c058:	ldr	r2, [sp, #152]	; 0x98
   1c05c:	add	r0, sp, #112	; 0x70
   1c060:	mov	r1, r8
   1c064:	bl	22cf4 <__assert_fail@plt+0x11058>
   1c068:	cmp	r0, #0
   1c06c:	beq	1c090 <__assert_fail@plt+0xa3f4>
   1c070:	ldr	r0, [sp, #152]	; 0x98
   1c074:	str	r0, [sp, #88]	; 0x58
   1c078:	ldr	r0, [sp, #60]	; 0x3c
   1c07c:	cmp	r0, #0
   1c080:	beq	1c2f8 <__assert_fail@plt+0xa65c>
   1c084:	mov	r5, #0
   1c088:	mov	r0, #1
   1c08c:	str	r0, [sp, #40]	; 0x28
   1c090:	ldr	r0, [sp, #152]	; 0x98
   1c094:	ldr	r1, [sp, #168]	; 0xa8
   1c098:	cmp	r1, r0
   1c09c:	bgt	1bec4 <__assert_fail@plt+0xa228>
   1c0a0:	b	1c2e4 <__assert_fail@plt+0xa648>
   1c0a4:	cmp	r8, #0
   1c0a8:	bne	1bf80 <__assert_fail@plt+0xa2e4>
   1c0ac:	b	1c2d8 <__assert_fail@plt+0xa63c>
   1c0b0:	ldr	r0, [r6, #8]
   1c0b4:	cmp	r0, #1
   1c0b8:	blt	1c27c <__assert_fail@plt+0xa5e0>
   1c0bc:	ldr	sl, [sp, #196]	; 0xc4
   1c0c0:	mov	r4, #0
   1c0c4:	str	sl, [sp, #20]
   1c0c8:	ldr	r0, [r6, #12]
   1c0cc:	ldr	r1, [r0, r4, lsl #2]
   1c0d0:	ldr	r0, [sl]
   1c0d4:	add	r0, r0, r1, lsl #3
   1c0d8:	ldr	r8, [r0, #4]
   1c0dc:	tst	r8, #1048576	; 0x100000
   1c0e0:	beq	1c26c <__assert_fail@plt+0xa5d0>
   1c0e4:	movw	r0, #65280	; 0xff00
   1c0e8:	ldr	r3, [sp, #152]	; 0x98
   1c0ec:	str	r1, [sp, #24]
   1c0f0:	movt	r0, #3
   1c0f4:	tst	r8, r0
   1c0f8:	beq	1c15c <__assert_fail@plt+0xa4c0>
   1c0fc:	ldr	r2, [sp, #200]	; 0xc8
   1c100:	add	r0, sp, #112	; 0x70
   1c104:	mov	r1, r3
   1c108:	mov	sl, r3
   1c10c:	bl	22e5c <__assert_fail@plt+0x111c0>
   1c110:	mov	r3, sl
   1c114:	ldr	r1, [sp, #24]
   1c118:	ldr	sl, [sp, #20]
   1c11c:	and	r2, r0, #1
   1c120:	tst	r8, #1024	; 0x400
   1c124:	beq	1c130 <__assert_fail@plt+0xa494>
   1c128:	cmp	r2, #0
   1c12c:	beq	1c26c <__assert_fail@plt+0xa5d0>
   1c130:	tst	r8, #2048	; 0x800
   1c134:	cmpne	r2, #0
   1c138:	bne	1c26c <__assert_fail@plt+0xa5d0>
   1c13c:	tst	r8, #8192	; 0x2000
   1c140:	beq	1c14c <__assert_fail@plt+0xa4b0>
   1c144:	ands	r2, r0, #2
   1c148:	beq	1c26c <__assert_fail@plt+0xa5d0>
   1c14c:	tst	r8, #32768	; 0x8000
   1c150:	beq	1c15c <__assert_fail@plt+0xa4c0>
   1c154:	ands	r0, r0, #8
   1c158:	beq	1c26c <__assert_fail@plt+0xa5d0>
   1c15c:	mov	r0, sl
   1c160:	add	r2, sp, #112	; 0x70
   1c164:	bl	24a7c <__assert_fail@plt+0x12de0>
   1c168:	cmp	r0, #0
   1c16c:	beq	1c26c <__assert_fail@plt+0xa5d0>
   1c170:	ldr	r1, [sp, #152]	; 0x98
   1c174:	ldr	r2, [sp, #232]	; 0xe8
   1c178:	cmp	r2, r0
   1c17c:	add	r8, r1, r0
   1c180:	movlt	r2, r0
   1c184:	add	r0, sp, #112	; 0x70
   1c188:	mov	r1, r8
   1c18c:	str	r2, [sp, #232]	; 0xe8
   1c190:	bl	23bf8 <__assert_fail@plt+0x11f5c>
   1c194:	cmp	r0, #0
   1c198:	str	r0, [fp, #-48]	; 0xffffffd0
   1c19c:	bne	1c2c4 <__assert_fail@plt+0xa628>
   1c1a0:	ldr	r0, [sp, #212]	; 0xd4
   1c1a4:	ldr	r2, [sp, #24]
   1c1a8:	ldr	r1, [sl, #24]
   1c1ac:	str	r4, [sp, #16]
   1c1b0:	str	r8, [sp, #12]
   1c1b4:	ldr	r3, [r0, r8, lsl #2]
   1c1b8:	ldr	r0, [sl, #12]
   1c1bc:	ldr	r0, [r0, r2, lsl #2]
   1c1c0:	cmp	r3, #0
   1c1c4:	str	r3, [sp, #8]
   1c1c8:	add	r0, r0, r0, lsl #1
   1c1cc:	add	r2, r1, r0, lsl #2
   1c1d0:	beq	1c1f4 <__assert_fail@plt+0xa558>
   1c1d4:	ldr	r1, [r3, #40]	; 0x28
   1c1d8:	sub	r4, fp, #208	; 0xd0
   1c1dc:	mov	r0, r4
   1c1e0:	bl	23968 <__assert_fail@plt+0x11ccc>
   1c1e4:	cmp	r0, #0
   1c1e8:	str	r0, [fp, #-48]	; 0xffffffd0
   1c1ec:	beq	1c208 <__assert_fail@plt+0xa56c>
   1c1f0:	b	1c2c4 <__assert_fail@plt+0xa628>
   1c1f4:	vldr	d16, [r2]
   1c1f8:	ldr	r0, [r2, #8]
   1c1fc:	sub	r4, fp, #208	; 0xd0
   1c200:	str	r0, [fp, #-200]	; 0xffffff38
   1c204:	vstr	d16, [fp, #-208]	; 0xffffff30
   1c208:	ldr	r8, [sp, #12]
   1c20c:	ldr	r2, [sp, #200]	; 0xc8
   1c210:	add	r0, sp, #112	; 0x70
   1c214:	sub	r1, r8, #1
   1c218:	bl	22e5c <__assert_fail@plt+0x111c0>
   1c21c:	mov	r3, r0
   1c220:	sub	r0, fp, #48	; 0x30
   1c224:	mov	r1, sl
   1c228:	mov	r2, r4
   1c22c:	bl	221e4 <__assert_fail@plt+0x10548>
   1c230:	ldr	r1, [sp, #212]	; 0xd4
   1c234:	str	r0, [r1, r8, lsl #2]
   1c238:	ldr	r0, [sp, #8]
   1c23c:	cmp	r0, #0
   1c240:	beq	1c24c <__assert_fail@plt+0xa5b0>
   1c244:	ldr	r0, [fp, #-200]	; 0xffffff38
   1c248:	bl	1a12c <__assert_fail@plt+0x8490>
   1c24c:	ldr	r0, [sp, #212]	; 0xd4
   1c250:	ldr	r4, [sp, #16]
   1c254:	ldr	r0, [r0, r8, lsl #2]
   1c258:	cmp	r0, #0
   1c25c:	bne	1c26c <__assert_fail@plt+0xa5d0>
   1c260:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1c264:	cmp	r0, #0
   1c268:	bne	1c2c4 <__assert_fail@plt+0xa628>
   1c26c:	ldr	r0, [r6, #8]
   1c270:	add	r4, r4, #1
   1c274:	cmp	r4, r0
   1c278:	blt	1c0c8 <__assert_fail@plt+0xa42c>
   1c27c:	mov	r0, #0
   1c280:	str	r0, [fp, #-64]	; 0xffffffc0
   1c284:	b	1bf0c <__assert_fail@plt+0xa270>
   1c288:	add	r1, r0, #2
   1c28c:	add	r0, sp, #112	; 0x70
   1c290:	bl	2373c <__assert_fail@plt+0x11aa0>
   1c294:	cmp	r0, #0
   1c298:	str	r0, [fp, #-64]	; 0xffffffc0
   1c29c:	beq	1bf00 <__assert_fail@plt+0xa264>
   1c2a0:	b	1d090 <__assert_fail@plt+0xb3f4>
   1c2a4:	ldr	r0, [sp, #152]	; 0x98
   1c2a8:	ldr	r2, [sp, #200]	; 0xc8
   1c2ac:	sub	r1, r0, #1
   1c2b0:	add	r0, sp, #112	; 0x70
   1c2b4:	bl	22e5c <__assert_fail@plt+0x111c0>
   1c2b8:	bfi	r4, r0, #8, #1
   1c2bc:	ldr	r8, [r8, r4, lsl #2]
   1c2c0:	b	1bf58 <__assert_fail@plt+0xa2bc>
   1c2c4:	mov	r8, #0
   1c2c8:	str	r0, [fp, #-64]	; 0xffffffc0
   1c2cc:	b	1bf58 <__assert_fail@plt+0xa2bc>
   1c2d0:	ldr	r5, [sp, #48]	; 0x30
   1c2d4:	b	1c2e4 <__assert_fail@plt+0xa648>
   1c2d8:	ldr	r9, [sp, #104]	; 0x68
   1c2dc:	ldr	sl, [sp, #108]	; 0x6c
   1c2e0:	ldr	r7, [sp, #92]	; 0x5c
   1c2e4:	cmp	r5, #0
   1c2e8:	beq	1c2f8 <__assert_fail@plt+0xa65c>
   1c2ec:	ldr	r0, [r5]
   1c2f0:	add	r0, r0, r7
   1c2f4:	str	r0, [r5]
   1c2f8:	ldr	r8, [sp, #76]	; 0x4c
   1c2fc:	ldr	r5, [sp, #72]	; 0x48
   1c300:	ldr	r7, [sp, #88]	; 0x58
   1c304:	cmn	r7, #1
   1c308:	beq	1c5e8 <__assert_fail@plt+0xa94c>
   1c30c:	mov	r2, #12
   1c310:	cmn	r7, #2
   1c314:	beq	1d008 <__assert_fail@plt+0xb36c>
   1c318:	ldr	r0, [sp, #68]	; 0x44
   1c31c:	str	r7, [sp, #204]	; 0xcc
   1c320:	ldr	r8, [sp, #84]	; 0x54
   1c324:	ldr	r4, [sp, #96]	; 0x60
   1c328:	ldrb	r0, [r0, #28]
   1c32c:	cmp	r8, #2
   1c330:	bcc	1c33c <__assert_fail@plt+0xa6a0>
   1c334:	ands	r1, r0, #16
   1c338:	beq	1c348 <__assert_fail@plt+0xa6ac>
   1c33c:	ldr	r1, [r4, #76]	; 0x4c
   1c340:	cmp	r1, #0
   1c344:	beq	1c36c <__assert_fail@plt+0xa6d0>
   1c348:	ldr	r0, [sp, #212]	; 0xd4
   1c34c:	mov	r2, r7
   1c350:	ldr	r1, [r0, r7, lsl #2]
   1c354:	add	r0, sp, #112	; 0x70
   1c358:	bl	22cf4 <__assert_fail@plt+0x11058>
   1c35c:	str	r0, [sp, #208]	; 0xd0
   1c360:	ldr	r0, [sp, #68]	; 0x44
   1c364:	mov	r2, #12
   1c368:	ldrb	r0, [r0, #28]
   1c36c:	cmp	r8, #2
   1c370:	bcc	1c388 <__assert_fail@plt+0xa6ec>
   1c374:	ands	r0, r0, #16
   1c378:	bne	1c388 <__assert_fail@plt+0xa6ec>
   1c37c:	ldrb	r0, [r4, #88]	; 0x58
   1c380:	tst	r0, #1
   1c384:	bne	1c394 <__assert_fail@plt+0xa6f8>
   1c388:	ldr	r0, [r4, #76]	; 0x4c
   1c38c:	cmp	r0, #0
   1c390:	beq	1c76c <__assert_fail@plt+0xaad0>
   1c394:	ldr	r6, [sp, #204]	; 0xcc
   1c398:	cmn	r6, #-1073741823	; 0xc0000001
   1c39c:	bcs	1d008 <__assert_fail@plt+0xb36c>
   1c3a0:	mov	r0, #4
   1c3a4:	ldr	r7, [sp, #196]	; 0xc4
   1c3a8:	ldr	r5, [sp, #208]	; 0xd0
   1c3ac:	add	r4, r0, r6, lsl #2
   1c3b0:	mov	r0, r4
   1c3b4:	bl	1a1f8 <__assert_fail@plt+0x855c>
   1c3b8:	mov	sl, r0
   1c3bc:	cmp	r0, #0
   1c3c0:	beq	1d080 <__assert_fail@plt+0xb3e4>
   1c3c4:	ldr	r0, [r7, #76]	; 0x4c
   1c3c8:	cmp	r0, #0
   1c3cc:	beq	1c47c <__assert_fail@plt+0xa7e0>
   1c3d0:	mov	r0, r4
   1c3d4:	bl	1a1f8 <__assert_fail@plt+0x855c>
   1c3d8:	cmp	r0, #0
   1c3dc:	beq	1d080 <__assert_fail@plt+0xb3e4>
   1c3e0:	mov	r9, r0
   1c3e4:	add	r0, r6, #1
   1c3e8:	mov	r1, #0
   1c3ec:	str	r0, [sp, #92]	; 0x5c
   1c3f0:	lsl	r2, r0, #2
   1c3f4:	mov	r0, r9
   1c3f8:	bl	11b04 <memset@plt>
   1c3fc:	ldr	r0, [sp, #36]	; 0x24
   1c400:	mov	r1, #0
   1c404:	str	r6, [fp, #-196]	; 0xffffff3c
   1c408:	str	r5, [fp, #-200]	; 0xffffff38
   1c40c:	str	r9, [fp, #-204]	; 0xffffff34
   1c410:	str	sl, [fp, #-208]	; 0xffffff30
   1c414:	str	r1, [r0]
   1c418:	str	r1, [r0, #4]
   1c41c:	str	r1, [r0, #8]
   1c420:	add	r0, sp, #112	; 0x70
   1c424:	sub	r1, fp, #208	; 0xd0
   1c428:	bl	259a4 <__assert_fail@plt+0x13d08>
   1c42c:	mov	r4, r0
   1c430:	mov	r0, #0
   1c434:	bl	1a12c <__assert_fail@plt+0x8490>
   1c438:	cmp	r4, #0
   1c43c:	bne	1c6f8 <__assert_fail@plt+0xaa5c>
   1c440:	ldr	r0, [sl]
   1c444:	cmp	r0, #0
   1c448:	beq	1c4d4 <__assert_fail@plt+0xa838>
   1c44c:	ldr	r3, [sp, #92]	; 0x5c
   1c450:	mov	r0, r7
   1c454:	mov	r1, sl
   1c458:	mov	r2, r9
   1c45c:	bl	25c3c <__assert_fail@plt+0x13fa0>
   1c460:	mov	r4, r0
   1c464:	mov	r0, r9
   1c468:	bl	1a12c <__assert_fail@plt+0x8490>
   1c46c:	cmp	r4, #0
   1c470:	beq	1c744 <__assert_fail@plt+0xaaa8>
   1c474:	mov	r9, #0
   1c478:	b	1c6f4 <__assert_fail@plt+0xaa58>
   1c47c:	ldr	r0, [sp, #36]	; 0x24
   1c480:	mov	r9, #0
   1c484:	str	r6, [fp, #-196]	; 0xffffff3c
   1c488:	str	r5, [fp, #-200]	; 0xffffff38
   1c48c:	sub	r1, fp, #208	; 0xd0
   1c490:	str	r9, [fp, #-204]	; 0xffffff34
   1c494:	str	sl, [fp, #-208]	; 0xffffff30
   1c498:	str	r9, [r0]
   1c49c:	str	r9, [r0, #4]
   1c4a0:	str	r9, [r0, #8]
   1c4a4:	add	r0, sp, #112	; 0x70
   1c4a8:	bl	259a4 <__assert_fail@plt+0x13d08>
   1c4ac:	mov	r4, r0
   1c4b0:	mov	r0, #0
   1c4b4:	bl	1a12c <__assert_fail@plt+0x8490>
   1c4b8:	cmp	r4, #0
   1c4bc:	bne	1c6f8 <__assert_fail@plt+0xaa5c>
   1c4c0:	ldr	r0, [sl]
   1c4c4:	mov	r9, #0
   1c4c8:	cmp	r0, #0
   1c4cc:	beq	1c5c8 <__assert_fail@plt+0xa92c>
   1c4d0:	b	1c744 <__assert_fail@plt+0xaaa8>
   1c4d4:	ldr	r0, [r9]
   1c4d8:	cmp	r0, #0
   1c4dc:	bne	1c44c <__assert_fail@plt+0xa7b0>
   1c4e0:	cmp	r6, #1
   1c4e4:	blt	1c5c8 <__assert_fail@plt+0xa92c>
   1c4e8:	ldr	r0, [sp, #212]	; 0xd4
   1c4ec:	str	r7, [sp, #88]	; 0x58
   1c4f0:	lsl	r4, r6, #2
   1c4f4:	add	r8, r6, #1
   1c4f8:	mov	r7, sl
   1c4fc:	sub	r0, r0, #4
   1c500:	ldr	r1, [r0, r4]
   1c504:	cmp	r1, #0
   1c508:	beq	1c518 <__assert_fail@plt+0xa87c>
   1c50c:	ldrb	r2, [r1, #52]	; 0x34
   1c510:	tst	r2, #16
   1c514:	bne	1c52c <__assert_fail@plt+0xa890>
   1c518:	sub	r8, r8, #1
   1c51c:	sub	r4, r4, #4
   1c520:	cmp	r8, #2
   1c524:	bge	1c500 <__assert_fail@plt+0xa864>
   1c528:	b	1c5c8 <__assert_fail@plt+0xa92c>
   1c52c:	sub	r6, r8, #2
   1c530:	add	r5, sp, #112	; 0x70
   1c534:	mov	r0, r5
   1c538:	mov	r2, r6
   1c53c:	bl	22cf4 <__assert_fail@plt+0x11058>
   1c540:	mov	sl, r0
   1c544:	mov	r0, r9
   1c548:	mov	r1, #0
   1c54c:	mov	r2, r4
   1c550:	bl	11b04 <memset@plt>
   1c554:	ldr	r0, [sp, #36]	; 0x24
   1c558:	mov	r1, #0
   1c55c:	str	r6, [fp, #-196]	; 0xffffff3c
   1c560:	str	sl, [fp, #-200]	; 0xffffff38
   1c564:	str	r9, [fp, #-204]	; 0xffffff34
   1c568:	str	r7, [fp, #-208]	; 0xffffff30
   1c56c:	mov	r5, sl
   1c570:	mov	sl, r7
   1c574:	str	r1, [r0]
   1c578:	str	r1, [r0, #4]
   1c57c:	str	r1, [r0, #8]
   1c580:	add	r0, sp, #112	; 0x70
   1c584:	sub	r1, fp, #208	; 0xd0
   1c588:	bl	259a4 <__assert_fail@plt+0x13d08>
   1c58c:	mov	r4, r0
   1c590:	mov	r0, #0
   1c594:	bl	1a12c <__assert_fail@plt+0x8490>
   1c598:	cmp	r4, #0
   1c59c:	bne	1c6f4 <__assert_fail@plt+0xaa58>
   1c5a0:	sub	r0, r8, #1
   1c5a4:	ldr	r7, [sp, #88]	; 0x58
   1c5a8:	str	r0, [sp, #92]	; 0x5c
   1c5ac:	ldr	r0, [sl]
   1c5b0:	cmp	r0, #0
   1c5b4:	beq	1c4d4 <__assert_fail@plt+0xa838>
   1c5b8:	sub	r6, r8, #2
   1c5bc:	sub	r0, r8, #1
   1c5c0:	str	r0, [sp, #92]	; 0x5c
   1c5c4:	b	1c44c <__assert_fail@plt+0xa7b0>
   1c5c8:	mov	r0, sl
   1c5cc:	bl	1a12c <__assert_fail@plt+0x8490>
   1c5d0:	mov	r0, r9
   1c5d4:	bl	1a12c <__assert_fail@plt+0x8490>
   1c5d8:	ldr	r9, [sp, #104]	; 0x68
   1c5dc:	ldr	sl, [sp, #108]	; 0x6c
   1c5e0:	ldr	r8, [sp, #76]	; 0x4c
   1c5e4:	ldr	r5, [sp, #72]	; 0x48
   1c5e8:	add	r0, sp, #112	; 0x70
   1c5ec:	bl	22db4 <__assert_fail@plt+0x11118>
   1c5f0:	ldr	r0, [fp, #-212]	; 0xffffff2c
   1c5f4:	ldr	r7, [sp, #56]	; 0x38
   1c5f8:	mov	r2, #1
   1c5fc:	add	r4, r0, r8
   1c600:	cmp	r4, r7
   1c604:	str	r4, [fp, #-212]	; 0xffffff2c
   1c608:	blt	1d008 <__assert_fail@plt+0xb36c>
   1c60c:	ldr	r6, [sp, #100]	; 0x64
   1c610:	ldr	r1, [sp, #44]	; 0x2c
   1c614:	cmp	r5, r4
   1c618:	bge	1bc1c <__assert_fail@plt+0x9f80>
   1c61c:	b	1d008 <__assert_fail@plt+0xb36c>
   1c620:	ldr	r8, [r4, #48]	; 0x30
   1c624:	b	1be68 <__assert_fail@plt+0xa1cc>
   1c628:	ldr	r8, [r4, #44]	; 0x2c
   1c62c:	b	1be68 <__assert_fail@plt+0xa1cc>
   1c630:	sxtb	r0, r0
   1c634:	cmn	r0, #1
   1c638:	ble	1c684 <__assert_fail@plt+0xa9e8>
   1c63c:	ldr	r0, [sp, #60]	; 0x3c
   1c640:	mov	r2, #1
   1c644:	str	r7, [sp, #88]	; 0x58
   1c648:	b	1c6bc <__assert_fail@plt+0xaa20>
   1c64c:	add	r6, r8, #4
   1c650:	add	r0, sp, #112	; 0x70
   1c654:	mov	r2, #0
   1c658:	mov	r1, r6
   1c65c:	bl	22f38 <__assert_fail@plt+0x1129c>
   1c660:	cmp	r0, #0
   1c664:	str	r0, [fp, #-64]	; 0xffffffc0
   1c668:	bne	1c730 <__assert_fail@plt+0xaa94>
   1c66c:	ldrb	r0, [r8, #52]	; 0x34
   1c670:	tst	r0, #64	; 0x40
   1c674:	bne	1c6d0 <__assert_fail@plt+0xaa34>
   1c678:	ldr	sl, [sp, #108]	; 0x6c
   1c67c:	mov	r6, #0
   1c680:	b	1be94 <__assert_fail@plt+0xa1f8>
   1c684:	add	r0, sp, #112	; 0x70
   1c688:	mov	r1, r8
   1c68c:	mov	r2, r7
   1c690:	bl	22cf4 <__assert_fail@plt+0x11058>
   1c694:	cmp	r0, #0
   1c698:	ldr	r1, [sp, #60]	; 0x3c
   1c69c:	mov	r2, r0
   1c6a0:	mov	r0, r7
   1c6a4:	mvneq	r0, #0
   1c6a8:	str	r0, [sp, #88]	; 0x58
   1c6ac:	clz	r0, r2
   1c6b0:	movwne	r2, #1
   1c6b4:	lsr	r0, r0, #5
   1c6b8:	orr	r0, r1, r0
   1c6bc:	cmp	r0, #0
   1c6c0:	bne	1beac <__assert_fail@plt+0xa210>
   1c6c4:	ldr	r8, [sp, #76]	; 0x4c
   1c6c8:	ldr	r5, [sp, #72]	; 0x48
   1c6cc:	b	1c304 <__assert_fail@plt+0xa668>
   1c6d0:	add	r0, sp, #112	; 0x70
   1c6d4:	mov	r1, r6
   1c6d8:	bl	23030 <__assert_fail@plt+0x11394>
   1c6dc:	ldr	sl, [sp, #108]	; 0x6c
   1c6e0:	cmp	r0, #0
   1c6e4:	mov	r6, #0
   1c6e8:	str	r0, [fp, #-64]	; 0xffffffc0
   1c6ec:	beq	1be94 <__assert_fail@plt+0xa1f8>
   1c6f0:	b	1c734 <__assert_fail@plt+0xaa98>
   1c6f4:	ldr	r8, [sp, #84]	; 0x54
   1c6f8:	mov	r0, sl
   1c6fc:	bl	1a12c <__assert_fail@plt+0x8490>
   1c700:	mov	r0, r9
   1c704:	bl	1a12c <__assert_fail@plt+0x8490>
   1c708:	ldr	r9, [sp, #104]	; 0x68
   1c70c:	cmp	r4, #0
   1c710:	beq	1c76c <__assert_fail@plt+0xaad0>
   1c714:	ldr	sl, [sp, #108]	; 0x6c
   1c718:	ldr	r8, [sp, #76]	; 0x4c
   1c71c:	ldr	r5, [sp, #72]	; 0x48
   1c720:	mov	r2, r4
   1c724:	cmp	r4, #1
   1c728:	beq	1c5e8 <__assert_fail@plt+0xa94c>
   1c72c:	b	1d008 <__assert_fail@plt+0xb36c>
   1c730:	ldr	sl, [sp, #108]	; 0x6c
   1c734:	ldr	r8, [sp, #76]	; 0x4c
   1c738:	ldr	r5, [sp, #72]	; 0x48
   1c73c:	mov	r7, r0
   1c740:	b	1c304 <__assert_fail@plt+0xa668>
   1c744:	ldr	r0, [sp, #212]	; 0xd4
   1c748:	bl	1a12c <__assert_fail@plt+0x8490>
   1c74c:	mov	r0, #0
   1c750:	str	r5, [sp, #208]	; 0xd0
   1c754:	str	sl, [sp, #212]	; 0xd4
   1c758:	str	r6, [sp, #204]	; 0xcc
   1c75c:	bl	1a12c <__assert_fail@plt+0x8490>
   1c760:	mov	r0, #0
   1c764:	bl	1a12c <__assert_fail@plt+0x8490>
   1c768:	ldr	r8, [sp, #84]	; 0x54
   1c76c:	cmp	r8, #0
   1c770:	beq	1d004 <__assert_fail@plt+0xb368>
   1c774:	ldr	r4, [fp, #20]
   1c778:	cmp	r8, #1
   1c77c:	beq	1c7a0 <__assert_fail@plt+0xab04>
   1c780:	ldr	r0, [sp, #32]
   1c784:	ldr	r1, [fp, #16]
   1c788:	mvn	r0, r0
   1c78c:	add	r0, r0, r1
   1c790:	mov	r1, #255	; 0xff
   1c794:	lsl	r2, r0, #3
   1c798:	add	r0, r4, #8
   1c79c:	bl	11b04 <memset@plt>
   1c7a0:	cmp	r8, #2
   1c7a4:	mov	r0, #0
   1c7a8:	ldr	r1, [sp, #204]	; 0xcc
   1c7ac:	stm	r4, {r0, r1}
   1c7b0:	bcc	1ceec <__assert_fail@plt+0xb250>
   1c7b4:	ldr	r0, [sp, #68]	; 0x44
   1c7b8:	ldrb	r0, [r0, #28]
   1c7bc:	ands	r0, r0, #16
   1c7c0:	bne	1ceec <__assert_fail@plt+0xb250>
   1c7c4:	ldr	r2, [sp, #96]	; 0x60
   1c7c8:	mov	r0, #0
   1c7cc:	ldrb	r1, [r2, #88]	; 0x58
   1c7d0:	tst	r1, #1
   1c7d4:	mov	r1, #0
   1c7d8:	beq	1c7ec <__assert_fail@plt+0xab50>
   1c7dc:	ldr	r2, [r2, #76]	; 0x4c
   1c7e0:	mov	r1, #0
   1c7e4:	cmp	r2, #0
   1c7e8:	movwgt	r1, #1
   1c7ec:	ldr	r2, [sp, #68]	; 0x44
   1c7f0:	ldr	r5, [sp, #84]	; 0x54
   1c7f4:	ldr	r4, [fp, #20]
   1c7f8:	cmp	r1, #0
   1c7fc:	mov	r6, #0
   1c800:	ldr	r8, [r2]
   1c804:	movw	r2, #42600	; 0xa668
   1c808:	movt	r2, #2
   1c80c:	vldr	d16, [r2]
   1c810:	ldr	r2, [r2, #8]
   1c814:	str	r2, [fp, #-56]	; 0xffffffc8
   1c818:	sub	r2, fp, #208	; 0xd0
   1c81c:	add	sl, r2, #12
   1c820:	mov	r2, #16
   1c824:	vstr	d16, [fp, #-64]	; 0xffffffc0
   1c828:	str	sl, [fp, #-200]	; 0xffffff38
   1c82c:	str	r2, [fp, #-204]	; 0xffffff34
   1c830:	str	r0, [fp, #-208]	; 0xffffff30
   1c834:	beq	1c854 <__assert_fail@plt+0xabb8>
   1c838:	mov	r0, #48	; 0x30
   1c83c:	bl	1a1f8 <__assert_fail@plt+0x855c>
   1c840:	cmp	r0, #0
   1c844:	str	r0, [fp, #-56]	; 0xffffffc8
   1c848:	beq	1d058 <__assert_fail@plt+0xb3bc>
   1c84c:	ldr	r0, [fp, #-208]	; 0xffffff30
   1c850:	sub	r6, fp, #64	; 0x40
   1c854:	ldr	r9, [r8, #72]	; 0x48
   1c858:	mov	r1, #0
   1c85c:	cmp	r0, r5
   1c860:	str	r1, [fp, #-44]	; 0xffffffd4
   1c864:	str	r1, [fp, #-48]	; 0xffffffd0
   1c868:	str	r1, [fp, #-40]	; 0xffffffd8
   1c86c:	bcs	1c8e0 <__assert_fail@plt+0xac44>
   1c870:	sub	r0, fp, #208	; 0xd0
   1c874:	mov	r1, r5
   1c878:	mov	r2, sl
   1c87c:	mov	r3, #8
   1c880:	bl	283a4 <__assert_fail@plt+0x16708>
   1c884:	cmp	r0, #0
   1c888:	bne	1c8e4 <__assert_fail@plt+0xac48>
   1c88c:	ldr	r0, [fp, #-200]	; 0xffffff38
   1c890:	mov	r4, #12
   1c894:	mov	r5, sl
   1c898:	cmp	r0, sl
   1c89c:	beq	1c8a4 <__assert_fail@plt+0xac08>
   1c8a0:	bl	1a12c <__assert_fail@plt+0x8490>
   1c8a4:	mov	sl, r5
   1c8a8:	b	1cec4 <__assert_fail@plt+0xb228>
   1c8ac:	ldr	r1, [r3, #8]
   1c8b0:	cmp	r1, #0
   1c8b4:	beq	1c8c4 <__assert_fail@plt+0xac28>
   1c8b8:	ldrsb	r1, [r6, #28]
   1c8bc:	cmp	r1, #0
   1c8c0:	bmi	1b958 <__assert_fail@plt+0x9cbc>
   1c8c4:	mov	r0, #0
   1c8c8:	cmp	r4, #0
   1c8cc:	beq	1d050 <__assert_fail@plt+0xb3b4>
   1c8d0:	cmp	ip, #0
   1c8d4:	mov	r4, #0
   1c8d8:	bne	1d044 <__assert_fail@plt+0xb3a8>
   1c8dc:	b	1b95c <__assert_fail@plt+0x9cc0>
   1c8e0:	str	r5, [fp, #-208]	; 0xffffff30
   1c8e4:	ldr	r7, [fp, #-200]	; 0xffffff38
   1c8e8:	lsl	r2, r5, #3
   1c8ec:	mov	r1, r4
   1c8f0:	str	r2, [sp, #104]	; 0x68
   1c8f4:	mov	r0, r7
   1c8f8:	bl	118dc <memcpy@plt>
   1c8fc:	ldr	r3, [r4]
   1c900:	ldr	r0, [r4, #4]
   1c904:	cmp	r3, r0
   1c908:	mov	r0, #0
   1c90c:	str	r3, [fp, #-36]	; 0xffffffdc
   1c910:	ble	1c920 <__assert_fail@plt+0xac84>
   1c914:	mov	r4, #0
   1c918:	bl	1a12c <__assert_fail@plt+0x8490>
   1c91c:	b	1ceb4 <__assert_fail@plt+0xb218>
   1c920:	lsl	r0, r5, #4
   1c924:	str	r6, [sp, #108]	; 0x6c
   1c928:	str	r8, [sp, #92]	; 0x5c
   1c92c:	str	r7, [sp, #100]	; 0x64
   1c930:	str	r0, [sp, #88]	; 0x58
   1c934:	ldr	r0, [r8]
   1c938:	add	r1, r0, r9, lsl #3
   1c93c:	ldr	r1, [r1, #4]
   1c940:	uxtb	r2, r1
   1c944:	cmp	r2, #9
   1c948:	beq	1c978 <__assert_fail@plt+0xacdc>
   1c94c:	cmp	r2, #8
   1c950:	bne	1c9e8 <__assert_fail@plt+0xad4c>
   1c954:	ldr	r0, [r0, r9, lsl #3]
   1c958:	add	r0, r0, #1
   1c95c:	cmp	r0, r5
   1c960:	bge	1c9e8 <__assert_fail@plt+0xad4c>
   1c964:	mov	r1, r4
   1c968:	str	r3, [r1, r0, lsl #3]!
   1c96c:	mvn	r0, #0
   1c970:	str	r0, [r1, #4]
   1c974:	b	1c9e8 <__assert_fail@plt+0xad4c>
   1c978:	ldr	r0, [r0, r9, lsl #3]
   1c97c:	add	r0, r0, #1
   1c980:	cmp	r0, r5
   1c984:	bge	1c9e8 <__assert_fail@plt+0xad4c>
   1c988:	ldr	r2, [r4, r0, lsl #3]
   1c98c:	cmp	r2, r3
   1c990:	bge	1c9a8 <__assert_fail@plt+0xad0c>
   1c994:	add	r0, r4, r0, lsl #3
   1c998:	mov	r1, r4
   1c99c:	str	r3, [r0, #4]
   1c9a0:	mov	r0, r7
   1c9a4:	b	1c9c4 <__assert_fail@plt+0xad28>
   1c9a8:	tst	r1, #524288	; 0x80000
   1c9ac:	beq	1c9e0 <__assert_fail@plt+0xad44>
   1c9b0:	ldr	r1, [r7, r0, lsl #3]
   1c9b4:	cmn	r1, #1
   1c9b8:	beq	1c9e0 <__assert_fail@plt+0xad44>
   1c9bc:	mov	r0, r4
   1c9c0:	mov	r1, r7
   1c9c4:	ldr	r2, [sp, #104]	; 0x68
   1c9c8:	str	sl, [sp, #80]	; 0x50
   1c9cc:	mov	sl, r3
   1c9d0:	bl	118dc <memcpy@plt>
   1c9d4:	mov	r3, sl
   1c9d8:	ldr	sl, [sp, #80]	; 0x50
   1c9dc:	b	1c9e8 <__assert_fail@plt+0xad4c>
   1c9e0:	add	r0, r4, r0, lsl #3
   1c9e4:	str	r3, [r0, #4]
   1c9e8:	ldr	r0, [r4, #4]
   1c9ec:	cmp	r3, r0
   1c9f0:	ldreq	r0, [sp, #208]	; 0xd0
   1c9f4:	cmpeq	r9, r0
   1c9f8:	beq	1ca1c <__assert_fail@plt+0xad80>
   1c9fc:	cmp	r6, #0
   1ca00:	beq	1ca80 <__assert_fail@plt+0xade4>
   1ca04:	sub	r0, fp, #48	; 0x30
   1ca08:	mov	r1, r9
   1ca0c:	bl	2217c <__assert_fail@plt+0x104e0>
   1ca10:	cmp	r0, #0
   1ca14:	bne	1ca24 <__assert_fail@plt+0xad88>
   1ca18:	b	1ca80 <__assert_fail@plt+0xade4>
   1ca1c:	cmp	r6, #0
   1ca20:	beq	1cea8 <__assert_fail@plt+0xb20c>
   1ca24:	mov	r0, #0
   1ca28:	ldr	r1, [r4, r0, lsl #3]
   1ca2c:	cmp	r1, #0
   1ca30:	bmi	1ca44 <__assert_fail@plt+0xada8>
   1ca34:	add	r1, r4, r0, lsl #3
   1ca38:	ldr	r1, [r1, #4]
   1ca3c:	cmn	r1, #1
   1ca40:	beq	1ca54 <__assert_fail@plt+0xadb8>
   1ca44:	add	r0, r0, #1
   1ca48:	cmp	r5, r0
   1ca4c:	bne	1ca28 <__assert_fail@plt+0xad8c>
   1ca50:	b	1cea8 <__assert_fail@plt+0xb20c>
   1ca54:	sub	r0, fp, #48	; 0x30
   1ca58:	sub	r1, fp, #36	; 0x24
   1ca5c:	mov	r2, r5
   1ca60:	mov	r3, r4
   1ca64:	str	r7, [sp]
   1ca68:	str	r0, [sp, #4]
   1ca6c:	mov	r0, r6
   1ca70:	bl	26b94 <__assert_fail@plt+0x14ef8>
   1ca74:	mov	r9, r0
   1ca78:	cmn	r0, #1
   1ca7c:	ble	1cea8 <__assert_fail@plt+0xb20c>
   1ca80:	ldr	r4, [sp, #196]	; 0xc4
   1ca84:	ldr	r0, [r4]
   1ca88:	add	r1, r0, r9, lsl #3
   1ca8c:	ldr	r1, [r1, #4]
   1ca90:	tst	r1, #8
   1ca94:	bne	1cb50 <__assert_fail@plt+0xaeb4>
   1ca98:	tst	r1, #1048576	; 0x100000
   1ca9c:	bne	1cbe4 <__assert_fail@plt+0xaf48>
   1caa0:	uxtb	r1, r1
   1caa4:	cmp	r1, #4
   1caa8:	bne	1cc0c <__assert_fail@plt+0xaf70>
   1caac:	ldr	r0, [r0, r9, lsl #3]
   1cab0:	mov	r7, #0
   1cab4:	add	r0, r0, #1
   1cab8:	cmp	r0, r5
   1cabc:	bge	1cad0 <__assert_fail@plt+0xae34>
   1cac0:	ldr	r1, [fp, #20]
   1cac4:	ldr	r2, [r1, r0, lsl #3]!
   1cac8:	ldr	r1, [r1, #4]
   1cacc:	sub	r7, r1, r2
   1cad0:	cmp	r6, #0
   1cad4:	beq	1ccf4 <__assert_fail@plt+0xb058>
   1cad8:	cmp	r0, r5
   1cadc:	bge	1cc90 <__assert_fail@plt+0xaff4>
   1cae0:	ldr	r1, [fp, #20]
   1cae4:	ldr	r1, [r1, r0, lsl #3]
   1cae8:	cmn	r1, #1
   1caec:	beq	1cc90 <__assert_fail@plt+0xaff4>
   1caf0:	ldr	r2, [fp, #20]
   1caf4:	add	r0, r2, r0, lsl #3
   1caf8:	ldr	r0, [r0, #4]
   1cafc:	cmn	r0, #1
   1cb00:	beq	1cc90 <__assert_fail@plt+0xaff4>
   1cb04:	cmp	r7, #0
   1cb08:	beq	1cda0 <__assert_fail@plt+0xb104>
   1cb0c:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1cb10:	ldr	r0, [sp, #140]	; 0x8c
   1cb14:	sub	r0, r0, r5
   1cb18:	cmp	r0, r7
   1cb1c:	blt	1cc90 <__assert_fail@plt+0xaff4>
   1cb20:	ldr	r2, [sp, #116]	; 0x74
   1cb24:	add	r0, r2, r1
   1cb28:	add	r1, r2, r5
   1cb2c:	mov	r2, r7
   1cb30:	bl	11a80 <bcmp@plt>
   1cb34:	cmp	r0, #0
   1cb38:	bne	1cc90 <__assert_fail@plt+0xaff4>
   1cb3c:	ldr	r0, [r4, #12]
   1cb40:	add	r3, r5, r7
   1cb44:	ldr	r8, [r0, r9, lsl #2]
   1cb48:	str	r3, [fp, #-36]	; 0xffffffdc
   1cb4c:	b	1cc58 <__assert_fail@plt+0xafbc>
   1cb50:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1cb54:	ldr	r0, [sp, #212]	; 0xd4
   1cb58:	ldr	r4, [r4, #20]
   1cb5c:	ldr	r6, [r0, r1, lsl #2]
   1cb60:	str	r1, [sp, #80]	; 0x50
   1cb64:	sub	r0, fp, #48	; 0x30
   1cb68:	mov	r1, r9
   1cb6c:	bl	2217c <__assert_fail@plt+0x104e0>
   1cb70:	cmp	r0, #0
   1cb74:	bne	1cb8c <__assert_fail@plt+0xaef0>
   1cb78:	sub	r0, fp, #48	; 0x30
   1cb7c:	mov	r1, r9
   1cb80:	bl	21f64 <__assert_fail@plt+0x102c8>
   1cb84:	cmp	r0, #0
   1cb88:	beq	1ce84 <__assert_fail@plt+0xb1e8>
   1cb8c:	add	r0, r9, r9, lsl #1
   1cb90:	add	r0, r4, r0, lsl #2
   1cb94:	ldr	r5, [r0, #4]
   1cb98:	cmp	r5, #1
   1cb9c:	blt	1cc90 <__assert_fail@plt+0xaff4>
   1cba0:	ldr	r7, [r0, #8]
   1cba4:	add	r6, r6, #4
   1cba8:	mvn	r4, #0
   1cbac:	ldr	r8, [r7]
   1cbb0:	mov	r0, r6
   1cbb4:	mov	r1, r8
   1cbb8:	bl	2217c <__assert_fail@plt+0x104e0>
   1cbbc:	cmp	r0, #0
   1cbc0:	beq	1cbd0 <__assert_fail@plt+0xaf34>
   1cbc4:	cmn	r4, #1
   1cbc8:	bne	1ccd8 <__assert_fail@plt+0xb03c>
   1cbcc:	mov	r4, r8
   1cbd0:	add	r7, r7, #4
   1cbd4:	subs	r5, r5, #1
   1cbd8:	bne	1cbac <__assert_fail@plt+0xaf10>
   1cbdc:	mov	r8, r4
   1cbe0:	b	1ccec <__assert_fail@plt+0xb050>
   1cbe4:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1cbe8:	mov	r0, r4
   1cbec:	mov	r1, r9
   1cbf0:	add	r2, sp, #112	; 0x70
   1cbf4:	mov	r3, r5
   1cbf8:	bl	24a7c <__assert_fail@plt+0x12de0>
   1cbfc:	mov	r3, r5
   1cc00:	cmp	r0, #0
   1cc04:	bne	1cc3c <__assert_fail@plt+0xafa0>
   1cc08:	b	1cc10 <__assert_fail@plt+0xaf74>
   1cc0c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1cc10:	ldr	r0, [r4]
   1cc14:	mov	r2, r3
   1cc18:	mov	r5, r3
   1cc1c:	add	r1, r0, r9, lsl #3
   1cc20:	add	r0, sp, #112	; 0x70
   1cc24:	bl	24d74 <__assert_fail@plt+0x130d8>
   1cc28:	mov	r1, r0
   1cc2c:	mov	r3, r5
   1cc30:	mov	r0, #1
   1cc34:	cmp	r1, #0
   1cc38:	beq	1cc90 <__assert_fail@plt+0xaff4>
   1cc3c:	ldr	r1, [r4, #12]
   1cc40:	add	r3, r0, r3
   1cc44:	ldr	r0, [sp, #108]	; 0x6c
   1cc48:	ldr	r8, [r1, r9, lsl #2]
   1cc4c:	cmp	r0, #0
   1cc50:	str	r3, [fp, #-36]	; 0xffffffdc
   1cc54:	beq	1cd10 <__assert_fail@plt+0xb074>
   1cc58:	ldr	r0, [sp, #204]	; 0xcc
   1cc5c:	cmp	r3, r0
   1cc60:	bgt	1cc90 <__assert_fail@plt+0xaff4>
   1cc64:	ldr	r0, [sp, #212]	; 0xd4
   1cc68:	ldr	r0, [r0, r3, lsl #2]
   1cc6c:	cmp	r0, #0
   1cc70:	beq	1cc90 <__assert_fail@plt+0xaff4>
   1cc74:	add	r0, r0, #4
   1cc78:	mov	r1, r8
   1cc7c:	mov	r4, r3
   1cc80:	bl	2217c <__assert_fail@plt+0x104e0>
   1cc84:	mov	r3, r4
   1cc88:	cmp	r0, #0
   1cc8c:	bne	1cd10 <__assert_fail@plt+0xb074>
   1cc90:	ldr	r5, [sp, #84]	; 0x54
   1cc94:	ldr	r4, [fp, #20]
   1cc98:	ldr	r6, [sp, #108]	; 0x6c
   1cc9c:	ldr	r7, [sp, #100]	; 0x64
   1cca0:	sub	r0, fp, #48	; 0x30
   1cca4:	sub	r1, fp, #36	; 0x24
   1cca8:	str	r0, [sp, #4]
   1ccac:	mov	r0, r6
   1ccb0:	mov	r2, r5
   1ccb4:	mov	r3, r4
   1ccb8:	str	r7, [sp]
   1ccbc:	bl	26b94 <__assert_fail@plt+0x14ef8>
   1ccc0:	cmp	r0, #0
   1ccc4:	bmi	1d070 <__assert_fail@plt+0xb3d4>
   1ccc8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1cccc:	ldr	r8, [sp, #92]	; 0x5c
   1ccd0:	mov	r9, r0
   1ccd4:	b	1cd38 <__assert_fail@plt+0xb09c>
   1ccd8:	sub	r0, fp, #48	; 0x30
   1ccdc:	mov	r1, r4
   1cce0:	bl	2217c <__assert_fail@plt+0x104e0>
   1cce4:	cmp	r0, #0
   1cce8:	beq	1cd48 <__assert_fail@plt+0xb0ac>
   1ccec:	ldr	r3, [sp, #80]	; 0x50
   1ccf0:	b	1cd18 <__assert_fail@plt+0xb07c>
   1ccf4:	cmp	r7, #0
   1ccf8:	beq	1cda0 <__assert_fail@plt+0xb104>
   1ccfc:	ldr	r0, [r4, #12]
   1cd00:	ldr	r8, [r0, r9, lsl #2]
   1cd04:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1cd08:	add	r3, r0, r7
   1cd0c:	str	r3, [fp, #-36]	; 0xffffffdc
   1cd10:	mov	r0, #0
   1cd14:	str	r0, [fp, #-44]	; 0xffffffd4
   1cd18:	cmn	r8, #1
   1cd1c:	ble	1ce7c <__assert_fail@plt+0xb1e0>
   1cd20:	mov	r9, r8
   1cd24:	ldr	r5, [sp, #84]	; 0x54
   1cd28:	ldr	r4, [fp, #20]
   1cd2c:	ldr	r6, [sp, #108]	; 0x6c
   1cd30:	ldr	r8, [sp, #92]	; 0x5c
   1cd34:	ldr	r7, [sp, #100]	; 0x64
   1cd38:	ldr	r0, [r4, #4]
   1cd3c:	cmp	r3, r0
   1cd40:	ble	1c934 <__assert_fail@plt+0xac98>
   1cd44:	b	1d060 <__assert_fail@plt+0xb3c4>
   1cd48:	ldr	r7, [sp, #108]	; 0x6c
   1cd4c:	ldr	r3, [sp, #80]	; 0x50
   1cd50:	cmp	r7, #0
   1cd54:	beq	1cdf0 <__assert_fail@plt+0xb154>
   1cd58:	ldr	r5, [r7]
   1cd5c:	ldr	r0, [r7, #4]
   1cd60:	add	r1, r5, #1
   1cd64:	cmp	r1, r0
   1cd68:	str	r1, [r7]
   1cd6c:	bne	1cdf8 <__assert_fail@plt+0xb15c>
   1cd70:	ldr	r0, [r7, #8]
   1cd74:	add	r1, r1, r1, lsl #1
   1cd78:	lsl	r1, r1, #4
   1cd7c:	bl	1a28c <__assert_fail@plt+0x85f0>
   1cd80:	cmp	r0, #0
   1cd84:	beq	1ce74 <__assert_fail@plt+0xb1d8>
   1cd88:	str	r0, [r7, #8]
   1cd8c:	ldr	r3, [sp, #80]	; 0x50
   1cd90:	ldr	r1, [r7, #4]
   1cd94:	lsl	r1, r1, #1
   1cd98:	str	r1, [r7, #4]
   1cd9c:	b	1cdfc <__assert_fail@plt+0xb160>
   1cda0:	sub	r0, fp, #48	; 0x30
   1cda4:	mov	r1, r9
   1cda8:	bl	21f64 <__assert_fail@plt+0x102c8>
   1cdac:	cmp	r0, #0
   1cdb0:	beq	1ce84 <__assert_fail@plt+0xb1e8>
   1cdb4:	ldr	r0, [r4, #20]
   1cdb8:	add	r1, r9, r9, lsl #1
   1cdbc:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1cdc0:	add	r0, r0, r1, lsl #2
   1cdc4:	ldr	r0, [r0, #8]
   1cdc8:	ldr	r8, [r0]
   1cdcc:	ldr	r0, [sp, #212]	; 0xd4
   1cdd0:	ldr	r0, [r0, r5, lsl #2]
   1cdd4:	mov	r1, r8
   1cdd8:	add	r0, r0, #4
   1cddc:	bl	2217c <__assert_fail@plt+0x104e0>
   1cde0:	mov	r3, r5
   1cde4:	cmp	r0, #0
   1cde8:	bne	1cd18 <__assert_fail@plt+0xb07c>
   1cdec:	b	1cc10 <__assert_fail@plt+0xaf74>
   1cdf0:	mov	r8, r4
   1cdf4:	b	1cd18 <__assert_fail@plt+0xb07c>
   1cdf8:	ldr	r0, [r7, #8]
   1cdfc:	add	r5, r5, r5, lsl #1
   1ce00:	str	r3, [r0, r5, lsl #3]!
   1ce04:	str	r8, [r0, #4]
   1ce08:	ldr	r0, [sp, #88]	; 0x58
   1ce0c:	bl	1a1f8 <__assert_fail@plt+0x855c>
   1ce10:	ldr	r1, [r7, #8]
   1ce14:	mvn	r8, #1
   1ce18:	cmp	r0, #0
   1ce1c:	add	r6, r1, r5, lsl #3
   1ce20:	str	r0, [r6, #8]!
   1ce24:	beq	1ccec <__assert_fail@plt+0xb050>
   1ce28:	ldr	r9, [sp, #104]	; 0x68
   1ce2c:	ldr	r1, [fp, #20]
   1ce30:	mov	r2, r9
   1ce34:	bl	118dc <memcpy@plt>
   1ce38:	ldr	r0, [r6]
   1ce3c:	ldr	r1, [sp, #84]	; 0x54
   1ce40:	mov	r2, r9
   1ce44:	add	r0, r0, r1, lsl #3
   1ce48:	ldr	r1, [sp, #100]	; 0x64
   1ce4c:	bl	118dc <memcpy@plt>
   1ce50:	ldr	r0, [r7, #8]
   1ce54:	sub	r1, fp, #48	; 0x30
   1ce58:	add	r0, r0, r5, lsl #3
   1ce5c:	add	r0, r0, #12
   1ce60:	bl	22100 <__assert_fail@plt+0x10464>
   1ce64:	ldr	r3, [sp, #80]	; 0x50
   1ce68:	cmp	r0, #0
   1ce6c:	moveq	r8, r4
   1ce70:	b	1cd18 <__assert_fail@plt+0xb07c>
   1ce74:	mvn	r8, #1
   1ce78:	b	1ccec <__assert_fail@plt+0xb050>
   1ce7c:	cmn	r8, #2
   1ce80:	bne	1cc90 <__assert_fail@plt+0xaff4>
   1ce84:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1ce88:	bl	1a12c <__assert_fail@plt+0x8490>
   1ce8c:	ldr	r0, [fp, #-200]	; 0xffffff38
   1ce90:	mov	r4, #12
   1ce94:	cmp	r0, sl
   1ce98:	beq	1cea0 <__assert_fail@plt+0xb204>
   1ce9c:	bl	1a12c <__assert_fail@plt+0x8490>
   1cea0:	ldr	r6, [sp, #108]	; 0x6c
   1cea4:	b	1cec4 <__assert_fail@plt+0xb228>
   1cea8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1ceac:	bl	1a12c <__assert_fail@plt+0x8490>
   1ceb0:	mov	r4, #0
   1ceb4:	ldr	r0, [fp, #-200]	; 0xffffff38
   1ceb8:	cmp	r0, sl
   1cebc:	beq	1cec4 <__assert_fail@plt+0xb228>
   1cec0:	bl	1a12c <__assert_fail@plt+0x8490>
   1cec4:	mov	r0, #16
   1cec8:	str	sl, [fp, #-200]	; 0xffffff38
   1cecc:	str	r0, [fp, #-204]	; 0xffffff34
   1ced0:	mov	r0, #0
   1ced4:	str	r0, [fp, #-208]	; 0xffffff30
   1ced8:	mov	r0, r6
   1cedc:	bl	26b2c <__assert_fail@plt+0x14e90>
   1cee0:	mov	r2, r4
   1cee4:	cmp	r2, #0
   1cee8:	bne	1d008 <__assert_fail@plt+0xb36c>
   1ceec:	ldr	r0, [fp, #20]
   1cef0:	ldrb	r1, [sp, #188]	; 0xbc
   1cef4:	ldr	r2, [fp, #16]
   1cef8:	ldr	r8, [sp, #96]	; 0x60
   1cefc:	ldr	r4, [sp, #32]
   1cf00:	add	r0, r0, #4
   1cf04:	ldr	r3, [r0, #-4]
   1cf08:	cmn	r3, #1
   1cf0c:	beq	1cf2c <__assert_fail@plt+0xb290>
   1cf10:	cmp	r1, #0
   1cf14:	bne	1cf40 <__assert_fail@plt+0xb2a4>
   1cf18:	ldr	r7, [r0]
   1cf1c:	ldr	r6, [fp, #-212]	; 0xffffff2c
   1cf20:	add	r3, r3, r6
   1cf24:	add	r7, r7, r6
   1cf28:	stmda	r0, {r3, r7}
   1cf2c:	sub	r2, r2, #1
   1cf30:	add	r0, r0, #8
   1cf34:	cmp	r4, r2
   1cf38:	bne	1cf04 <__assert_fail@plt+0xb268>
   1cf3c:	b	1cf78 <__assert_fail@plt+0xb2dc>
   1cf40:	ldr	r7, [sp, #140]	; 0x8c
   1cf44:	ldr	r6, [sp, #28]
   1cf48:	ldr	ip, [sp, #124]	; 0x7c
   1cf4c:	cmp	r3, r7
   1cf50:	mov	r5, r6
   1cf54:	addne	r5, ip, r3, lsl #2
   1cf58:	ldr	r3, [r5]
   1cf5c:	str	r3, [r0, #-4]
   1cf60:	ldr	r5, [r0]
   1cf64:	cmp	r5, r7
   1cf68:	addne	r6, ip, r5, lsl #2
   1cf6c:	ldr	r7, [r6]
   1cf70:	str	r7, [r0]
   1cf74:	b	1cf1c <__assert_fail@plt+0xb280>
   1cf78:	cmp	r4, #1
   1cf7c:	blt	1cf98 <__assert_fail@plt+0xb2fc>
   1cf80:	ldr	r0, [sp, #84]	; 0x54
   1cf84:	ldr	r1, [fp, #20]
   1cf88:	lsl	r2, r4, #3
   1cf8c:	add	r0, r1, r0, lsl #3
   1cf90:	mov	r1, #255	; 0xff
   1cf94:	bl	11b04 <memset@plt>
   1cf98:	ldr	r0, [r8, #132]	; 0x84
   1cf9c:	mov	r2, #0
   1cfa0:	cmp	r0, #0
   1cfa4:	beq	1d008 <__assert_fail@plt+0xb36c>
   1cfa8:	ldr	r1, [sp, #84]	; 0x54
   1cfac:	cmp	r1, #2
   1cfb0:	bcc	1d008 <__assert_fail@plt+0xb36c>
   1cfb4:	ldr	r1, [sp, #32]
   1cfb8:	ldr	r2, [fp, #16]
   1cfbc:	ldr	r6, [fp, #20]
   1cfc0:	mvn	r1, r1
   1cfc4:	add	r1, r1, r2
   1cfc8:	mov	r2, #0
   1cfcc:	ldr	r3, [r0, r2, lsl #2]
   1cfd0:	cmp	r2, r3
   1cfd4:	beq	1cff8 <__assert_fail@plt+0xb35c>
   1cfd8:	add	r3, r6, r3, lsl #3
   1cfdc:	add	r7, r6, r2, lsl #3
   1cfe0:	ldr	r3, [r3, #8]
   1cfe4:	str	r3, [r7, #8]
   1cfe8:	ldr	r3, [r0, r2, lsl #2]
   1cfec:	add	r3, r6, r3, lsl #3
   1cff0:	ldr	r3, [r3, #12]
   1cff4:	str	r3, [r7, #12]
   1cff8:	add	r2, r2, #1
   1cffc:	cmp	r1, r2
   1d000:	bne	1cfcc <__assert_fail@plt+0xb330>
   1d004:	mov	r2, #0
   1d008:	ldr	r0, [sp, #212]	; 0xd4
   1d00c:	mov	sl, r2
   1d010:	bl	1a12c <__assert_fail@plt+0x8490>
   1d014:	ldr	r0, [sp, #96]	; 0x60
   1d018:	ldr	r0, [r0, #76]	; 0x4c
   1d01c:	cmp	r0, #0
   1d020:	beq	1d03c <__assert_fail@plt+0xb3a0>
   1d024:	add	r0, sp, #112	; 0x70
   1d028:	bl	22db4 <__assert_fail@plt+0x11118>
   1d02c:	ldr	r0, [sp, #244]	; 0xf4
   1d030:	bl	1a12c <__assert_fail@plt+0x8490>
   1d034:	ldr	r0, [sp, #228]	; 0xe4
   1d038:	bl	1a12c <__assert_fail@plt+0x8490>
   1d03c:	add	r0, sp, #112	; 0x70
   1d040:	bl	1d6fc <__assert_fail@plt+0xba60>
   1d044:	mov	r0, sl
   1d048:	sub	sp, fp, #28
   1d04c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d050:	mov	r4, #0
   1d054:	b	1b95c <__assert_fail@plt+0x9cc0>
   1d058:	mov	r2, #12
   1d05c:	b	1cee4 <__assert_fail@plt+0xb248>
   1d060:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1d064:	b	1c914 <__assert_fail@plt+0xac78>
   1d068:	mov	r2, r0
   1d06c:	b	1d008 <__assert_fail@plt+0xb36c>
   1d070:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1d074:	bl	1a12c <__assert_fail@plt+0x8490>
   1d078:	mov	r4, #1
   1d07c:	b	1ceb4 <__assert_fail@plt+0xb218>
   1d080:	mov	r0, sl
   1d084:	bl	1a12c <__assert_fail@plt+0x8490>
   1d088:	mov	r0, #0
   1d08c:	bl	1a12c <__assert_fail@plt+0x8490>
   1d090:	mov	r2, #12
   1d094:	b	1d008 <__assert_fail@plt+0xb36c>
   1d098:	mov	r2, #1
   1d09c:	b	1d008 <__assert_fail@plt+0xb36c>
   1d0a0:	push	{fp, lr}
   1d0a4:	mov	fp, sp
   1d0a8:	sub	sp, sp, #16
   1d0ac:	mov	ip, #1
   1d0b0:	str	r2, [sp, #4]
   1d0b4:	str	ip, [sp, #12]
   1d0b8:	mov	ip, #0
   1d0bc:	str	ip, [sp]
   1d0c0:	ldr	ip, [fp, #8]
   1d0c4:	str	ip, [sp, #8]
   1d0c8:	bl	1d0d4 <__assert_fail@plt+0xb438>
   1d0cc:	mov	sp, fp
   1d0d0:	pop	{fp, pc}
   1d0d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d0d8:	add	fp, sp, #28
   1d0dc:	sub	sp, sp, #44	; 0x2c
   1d0e0:	mvn	r6, #0
   1d0e4:	cmp	r3, #0
   1d0e8:	bmi	1d398 <__assert_fail@plt+0xb6fc>
   1d0ec:	mov	r5, r3
   1d0f0:	mov	r9, r2
   1d0f4:	cmp	r3, r2
   1d0f8:	bgt	1d398 <__assert_fail@plt+0xb6fc>
   1d0fc:	mov	r7, r0
   1d100:	ldr	r0, [fp, #8]
   1d104:	mov	sl, r1
   1d108:	movw	r1, #0
   1d10c:	mov	r8, r9
   1d110:	ldr	r6, [r7]
   1d114:	movt	r1, #0
   1d118:	add	r0, r0, r5
   1d11c:	cmp	r0, r9
   1d120:	bicle	r8, r0, r0, asr #31
   1d124:	movw	r0, #0
   1d128:	movt	r0, #0
   1d12c:	orrs	r4, r1, r0
   1d130:	beq	1d13c <__assert_fail@plt+0xb4a0>
   1d134:	add	r0, r6, #136	; 0x88
   1d138:	bl	118ac <pthread_mutex_lock@plt>
   1d13c:	ldrb	r0, [r7, #28]
   1d140:	str	r6, [sp, #24]
   1d144:	ldr	r6, [fp, #16]
   1d148:	cmp	r8, r5
   1d14c:	ubfx	r1, r0, #5, #2
   1d150:	str	r4, [sp, #36]	; 0x24
   1d154:	str	sl, [sp, #32]
   1d158:	str	r1, [sp, #28]
   1d15c:	ble	1d180 <__assert_fail@plt+0xb4e4>
   1d160:	tst	r0, #8
   1d164:	bne	1d180 <__assert_fail@plt+0xb4e4>
   1d168:	ldr	r1, [r7, #16]
   1d16c:	cmp	r1, #0
   1d170:	beq	1d180 <__assert_fail@plt+0xb4e4>
   1d174:	mov	r0, r7
   1d178:	bl	1aff4 <__assert_fail@plt+0x9358>
   1d17c:	ldrb	r0, [r7, #28]
   1d180:	str	r7, [fp, #-32]	; 0xffffffe0
   1d184:	mov	sl, #1
   1d188:	mov	r7, #0
   1d18c:	cmp	r6, #0
   1d190:	beq	1d1dc <__assert_fail@plt+0xb540>
   1d194:	ands	r1, r0, #16
   1d198:	bne	1d1dc <__assert_fail@plt+0xb540>
   1d19c:	and	r0, r0, #6
   1d1a0:	cmp	r0, #4
   1d1a4:	bne	1d1cc <__assert_fail@plt+0xb530>
   1d1a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d1ac:	ldr	sl, [r6]
   1d1b0:	ldr	r0, [r0, #24]
   1d1b4:	cmp	sl, r0
   1d1b8:	bhi	1d1d4 <__assert_fail@plt+0xb538>
   1d1bc:	cmp	sl, #1
   1d1c0:	movwlt	r6, #0
   1d1c4:	movwlt	sl, #1
   1d1c8:	b	1d1d8 <__assert_fail@plt+0xb53c>
   1d1cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d1d0:	ldr	r0, [r0, #24]
   1d1d4:	add	sl, r0, #1
   1d1d8:	mov	r7, r6
   1d1dc:	lsl	r0, sl, #3
   1d1e0:	bl	1a1f8 <__assert_fail@plt+0x855c>
   1d1e4:	cmp	r0, #0
   1d1e8:	beq	1d3a4 <__assert_fail@plt+0xb708>
   1d1ec:	ldr	r1, [fp, #12]
   1d1f0:	str	r8, [sp]
   1d1f4:	mov	r8, r0
   1d1f8:	mov	r2, r9
   1d1fc:	mov	r3, r5
   1d200:	stmib	sp, {r1, sl}
   1d204:	str	r0, [sp, #12]
   1d208:	ldr	r0, [sp, #28]
   1d20c:	ldr	r1, [sp, #32]
   1d210:	str	r0, [sp, #16]
   1d214:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d218:	bl	1b874 <__assert_fail@plt+0x9bd8>
   1d21c:	cmp	r0, #0
   1d220:	beq	1d23c <__assert_fail@plt+0xb5a0>
   1d224:	ldr	r4, [sp, #36]	; 0x24
   1d228:	cmp	r0, #1
   1d22c:	mvn	r6, #1
   1d230:	mov	r5, r8
   1d234:	mvneq	r6, #0
   1d238:	b	1d37c <__assert_fail@plt+0xb6e0>
   1d23c:	str	r5, [sp, #32]
   1d240:	cmp	r7, #0
   1d244:	mov	r5, r8
   1d248:	beq	1d350 <__assert_fail@plt+0xb6b4>
   1d24c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d250:	add	r9, sl, #1
   1d254:	ldrb	r0, [r0, #28]
   1d258:	ubfx	r0, r0, #1, #2
   1d25c:	cmp	r0, #1
   1d260:	beq	1d2ac <__assert_fail@plt+0xb610>
   1d264:	cmp	r0, #0
   1d268:	bne	1d2c4 <__assert_fail@plt+0xb628>
   1d26c:	lsl	r5, r9, #2
   1d270:	mov	r0, r5
   1d274:	bl	1a1f8 <__assert_fail@plt+0x855c>
   1d278:	mov	r6, #0
   1d27c:	cmp	r0, #0
   1d280:	str	r0, [r7, #4]
   1d284:	beq	1d3fc <__assert_fail@plt+0xb760>
   1d288:	mov	r0, r5
   1d28c:	bl	1a1f8 <__assert_fail@plt+0x855c>
   1d290:	cmp	r0, #0
   1d294:	str	r0, [r7, #8]
   1d298:	beq	1d3f4 <__assert_fail@plt+0xb758>
   1d29c:	str	r9, [r7]
   1d2a0:	mov	r4, #1
   1d2a4:	mov	r5, r8
   1d2a8:	b	1d2cc <__assert_fail@plt+0xb630>
   1d2ac:	ldr	r0, [r7]
   1d2b0:	mov	r4, #1
   1d2b4:	cmp	r9, r0
   1d2b8:	bhi	1d3b0 <__assert_fail@plt+0xb714>
   1d2bc:	mov	r9, r0
   1d2c0:	b	1d2cc <__assert_fail@plt+0xb630>
   1d2c4:	ldr	r9, [r7]
   1d2c8:	mov	r4, #2
   1d2cc:	cmp	sl, #1
   1d2d0:	blt	1d304 <__assert_fail@plt+0xb668>
   1d2d4:	ldmib	r7, {r1, r2}
   1d2d8:	add	r0, r5, #4
   1d2dc:	mov	r3, sl
   1d2e0:	ldr	r6, [r0, #-4]
   1d2e4:	subs	r3, r3, #1
   1d2e8:	str	r6, [r1], #4
   1d2ec:	ldr	r6, [r0]
   1d2f0:	add	r0, r0, #8
   1d2f4:	str	r6, [r2], #4
   1d2f8:	bne	1d2e0 <__assert_fail@plt+0xb644>
   1d2fc:	ldr	r9, [r7]
   1d300:	b	1d308 <__assert_fail@plt+0xb66c>
   1d304:	mov	sl, #0
   1d308:	cmp	sl, r9
   1d30c:	bcs	1d330 <__assert_fail@plt+0xb694>
   1d310:	ldmib	r7, {r0, r1}
   1d314:	mvn	r2, #0
   1d318:	str	r2, [r1, sl, lsl #2]
   1d31c:	str	r2, [r0, sl, lsl #2]
   1d320:	add	sl, sl, #1
   1d324:	ldr	r3, [r7]
   1d328:	cmp	sl, r3
   1d32c:	bcc	1d318 <__assert_fail@plt+0xb67c>
   1d330:	mov	r6, r4
   1d334:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1d338:	cmp	r6, #0
   1d33c:	ldrb	r0, [r1, #28]
   1d340:	and	r0, r0, #249	; 0xf9
   1d344:	orr	r0, r0, r6, lsl #1
   1d348:	strb	r0, [r1, #28]
   1d34c:	beq	1d374 <__assert_fail@plt+0xb6d8>
   1d350:	ldr	r0, [fp, #20]
   1d354:	cmp	r0, #0
   1d358:	beq	1d36c <__assert_fail@plt+0xb6d0>
   1d35c:	ldr	r0, [r5, #4]
   1d360:	ldr	r1, [sp, #32]
   1d364:	sub	r6, r0, r1
   1d368:	b	1d378 <__assert_fail@plt+0xb6dc>
   1d36c:	ldr	r6, [r5]
   1d370:	b	1d378 <__assert_fail@plt+0xb6dc>
   1d374:	mvn	r6, #1
   1d378:	ldr	r4, [sp, #36]	; 0x24
   1d37c:	mov	r0, r5
   1d380:	bl	1a12c <__assert_fail@plt+0x8490>
   1d384:	cmp	r4, #0
   1d388:	beq	1d398 <__assert_fail@plt+0xb6fc>
   1d38c:	ldr	r0, [sp, #24]
   1d390:	add	r0, r0, #136	; 0x88
   1d394:	bl	117f8 <pthread_mutex_unlock@plt>
   1d398:	mov	r0, r6
   1d39c:	sub	sp, fp, #28
   1d3a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3a4:	ldr	r4, [sp, #36]	; 0x24
   1d3a8:	mvn	r6, #1
   1d3ac:	b	1d384 <__assert_fail@plt+0xb6e8>
   1d3b0:	ldr	r0, [r7, #4]
   1d3b4:	lsl	r1, r9, #2
   1d3b8:	str	r1, [sp, #28]
   1d3bc:	bl	1a28c <__assert_fail@plt+0x85f0>
   1d3c0:	mov	r6, #0
   1d3c4:	cmp	r0, #0
   1d3c8:	beq	1d3fc <__assert_fail@plt+0xb760>
   1d3cc:	mov	r5, r0
   1d3d0:	ldr	r0, [r7, #8]
   1d3d4:	ldr	r1, [sp, #28]
   1d3d8:	bl	1a28c <__assert_fail@plt+0x85f0>
   1d3dc:	cmp	r0, #0
   1d3e0:	beq	1d404 <__assert_fail@plt+0xb768>
   1d3e4:	str	r9, [r7]
   1d3e8:	str	r5, [r7, #4]
   1d3ec:	str	r0, [r7, #8]
   1d3f0:	b	1d2a4 <__assert_fail@plt+0xb608>
   1d3f4:	ldr	r0, [r7, #4]
   1d3f8:	bl	1a12c <__assert_fail@plt+0x8490>
   1d3fc:	mov	r5, r8
   1d400:	b	1d334 <__assert_fail@plt+0xb698>
   1d404:	mov	r0, r5
   1d408:	b	1d3f8 <__assert_fail@plt+0xb75c>
   1d40c:	push	{fp, lr}
   1d410:	mov	fp, sp
   1d414:	sub	sp, sp, #16
   1d418:	mov	ip, #0
   1d41c:	str	r2, [sp, #4]
   1d420:	str	ip, [sp, #12]
   1d424:	ldr	ip, [fp, #12]
   1d428:	str	ip, [sp, #8]
   1d42c:	ldr	ip, [fp, #8]
   1d430:	str	ip, [sp]
   1d434:	bl	1d0d4 <__assert_fail@plt+0xb438>
   1d438:	mov	sp, fp
   1d43c:	pop	{fp, pc}
   1d440:	push	{fp, lr}
   1d444:	mov	fp, sp
   1d448:	sub	sp, sp, #24
   1d44c:	mov	ip, #1
   1d450:	str	ip, [sp, #20]
   1d454:	mov	ip, #0
   1d458:	str	ip, [sp, #8]
   1d45c:	ldr	ip, [fp, #20]
   1d460:	str	ip, [sp, #16]
   1d464:	ldr	ip, [fp, #16]
   1d468:	str	ip, [sp, #12]
   1d46c:	ldr	ip, [fp, #12]
   1d470:	str	ip, [sp, #4]
   1d474:	ldr	ip, [fp, #8]
   1d478:	str	ip, [sp]
   1d47c:	bl	1d488 <__assert_fail@plt+0xb7ec>
   1d480:	mov	sp, fp
   1d484:	pop	{fp, pc}
   1d488:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d48c:	add	fp, sp, #28
   1d490:	sub	sp, sp, #20
   1d494:	ldr	r4, [fp, #8]
   1d498:	mov	r8, r1
   1d49c:	mov	r1, r0
   1d4a0:	mov	r6, r2
   1d4a4:	orr	r0, r4, r2
   1d4a8:	ldr	r2, [fp, #24]
   1d4ac:	orrs	r0, r0, r2
   1d4b0:	bmi	1d564 <__assert_fail@plt+0xb8c8>
   1d4b4:	adds	sl, r6, r4
   1d4b8:	bvs	1d564 <__assert_fail@plt+0xb8c8>
   1d4bc:	mov	r5, #0
   1d4c0:	cmp	r4, #1
   1d4c4:	blt	1d518 <__assert_fail@plt+0xb87c>
   1d4c8:	mov	r9, r3
   1d4cc:	cmp	r6, #1
   1d4d0:	blt	1d520 <__assert_fail@plt+0xb884>
   1d4d4:	mov	r0, sl
   1d4d8:	mov	r5, r1
   1d4dc:	bl	1a1f8 <__assert_fail@plt+0x855c>
   1d4e0:	cmp	r0, #0
   1d4e4:	beq	1d564 <__assert_fail@plt+0xb8c8>
   1d4e8:	mov	r1, r8
   1d4ec:	mov	r2, r6
   1d4f0:	mov	r7, r0
   1d4f4:	bl	118dc <memcpy@plt>
   1d4f8:	add	r0, r7, r6
   1d4fc:	mov	r1, r9
   1d500:	mov	r2, r4
   1d504:	bl	118dc <memcpy@plt>
   1d508:	ldr	r2, [fp, #24]
   1d50c:	mov	r1, r5
   1d510:	mov	r5, r7
   1d514:	b	1d524 <__assert_fail@plt+0xb888>
   1d518:	mov	r7, r8
   1d51c:	b	1d524 <__assert_fail@plt+0xb888>
   1d520:	mov	r7, r9
   1d524:	add	r6, fp, #12
   1d528:	ldr	r0, [fp, #28]
   1d52c:	ldm	r6, {r3, r4, r6}
   1d530:	str	r4, [sp]
   1d534:	stmib	sp, {r2, r6}
   1d538:	mov	r2, sl
   1d53c:	str	r0, [sp, #12]
   1d540:	mov	r0, r1
   1d544:	mov	r1, r7
   1d548:	bl	1d0d4 <__assert_fail@plt+0xb438>
   1d54c:	mov	r4, r0
   1d550:	mov	r0, r5
   1d554:	bl	1a12c <__assert_fail@plt+0x8490>
   1d558:	mov	r0, r4
   1d55c:	sub	sp, fp, #28
   1d560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d564:	mvn	r0, #1
   1d568:	b	1d55c <__assert_fail@plt+0xb8c0>
   1d56c:	push	{fp, lr}
   1d570:	mov	fp, sp
   1d574:	sub	sp, sp, #24
   1d578:	mov	ip, #0
   1d57c:	str	ip, [sp, #20]
   1d580:	ldr	ip, [fp, #24]
   1d584:	str	ip, [sp, #16]
   1d588:	ldr	ip, [fp, #20]
   1d58c:	str	ip, [sp, #12]
   1d590:	ldr	ip, [fp, #16]
   1d594:	str	ip, [sp, #8]
   1d598:	ldr	ip, [fp, #12]
   1d59c:	str	ip, [sp, #4]
   1d5a0:	ldr	ip, [fp, #8]
   1d5a4:	str	ip, [sp]
   1d5a8:	bl	1d488 <__assert_fail@plt+0xb7ec>
   1d5ac:	mov	sp, fp
   1d5b0:	pop	{fp, pc}
   1d5b4:	ldrb	ip, [r0, #28]
   1d5b8:	cmp	r2, #0
   1d5bc:	bic	ip, ip, #6
   1d5c0:	orrne	ip, ip, #2
   1d5c4:	strb	ip, [r0, #28]
   1d5c8:	ldr	r0, [sp]
   1d5cc:	moveq	r0, r2
   1d5d0:	cmp	r2, #0
   1d5d4:	moveq	r3, r2
   1d5d8:	stm	r1, {r2, r3}
   1d5dc:	str	r0, [r1, #8]
   1d5e0:	bx	lr
   1d5e4:	ldr	r1, [r0, #4]
   1d5e8:	movw	r2, #255	; 0xff
   1d5ec:	movt	r2, #4
   1d5f0:	and	r1, r1, r2
   1d5f4:	cmp	r1, #3
   1d5f8:	beq	1d60c <__assert_fail@plt+0xb970>
   1d5fc:	cmp	r1, #6
   1d600:	bxne	lr
   1d604:	ldr	r0, [r0]
   1d608:	b	1d674 <__assert_fail@plt+0xb9d8>
   1d60c:	ldr	r0, [r0]
   1d610:	b	1a12c <__assert_fail@plt+0x8490>
   1d614:	push	{r4, sl, fp, lr}
   1d618:	add	fp, sp, #8
   1d61c:	mov	r4, r0
   1d620:	ldr	r0, [r0, #24]
   1d624:	bl	1a12c <__assert_fail@plt+0x8490>
   1d628:	ldr	r0, [r4, #36]	; 0x24
   1d62c:	bl	1a12c <__assert_fail@plt+0x8490>
   1d630:	ldr	r0, [r4, #40]	; 0x28
   1d634:	add	r1, r4, #4
   1d638:	cmp	r0, r1
   1d63c:	beq	1d650 <__assert_fail@plt+0xb9b4>
   1d640:	ldr	r0, [r0, #8]
   1d644:	bl	1a12c <__assert_fail@plt+0x8490>
   1d648:	ldr	r0, [r4, #40]	; 0x28
   1d64c:	bl	1a12c <__assert_fail@plt+0x8490>
   1d650:	ldr	r0, [r4, #12]
   1d654:	bl	1a12c <__assert_fail@plt+0x8490>
   1d658:	ldr	r0, [r4, #48]	; 0x30
   1d65c:	bl	1a12c <__assert_fail@plt+0x8490>
   1d660:	ldr	r0, [r4, #44]	; 0x2c
   1d664:	bl	1a12c <__assert_fail@plt+0x8490>
   1d668:	mov	r0, r4
   1d66c:	pop	{r4, sl, fp, lr}
   1d670:	b	1a12c <__assert_fail@plt+0x8490>
   1d674:	push	{r4, sl, fp, lr}
   1d678:	add	fp, sp, #8
   1d67c:	mov	r4, r0
   1d680:	ldr	r0, [r0]
   1d684:	bl	1a12c <__assert_fail@plt+0x8490>
   1d688:	ldr	r0, [r4, #4]
   1d68c:	bl	1a12c <__assert_fail@plt+0x8490>
   1d690:	ldr	r0, [r4, #8]
   1d694:	bl	1a12c <__assert_fail@plt+0x8490>
   1d698:	ldr	r0, [r4, #12]
   1d69c:	bl	1a12c <__assert_fail@plt+0x8490>
   1d6a0:	mov	r0, r4
   1d6a4:	pop	{r4, sl, fp, lr}
   1d6a8:	b	1a12c <__assert_fail@plt+0x8490>
   1d6ac:	push	{r4, r5, fp, lr}
   1d6b0:	add	fp, sp, #8
   1d6b4:	ldr	r4, [r0]
   1d6b8:	ldr	r0, [r4, #56]	; 0x38
   1d6bc:	cmp	r0, #0
   1d6c0:	beq	1d6d8 <__assert_fail@plt+0xba3c>
   1d6c4:	ldr	r5, [r0]
   1d6c8:	bl	1a12c <__assert_fail@plt+0x8490>
   1d6cc:	cmp	r5, #0
   1d6d0:	mov	r0, r5
   1d6d4:	bne	1d6c4 <__assert_fail@plt+0xba28>
   1d6d8:	mov	r0, #31
   1d6dc:	mov	r5, #0
   1d6e0:	str	r0, [r4, #64]	; 0x40
   1d6e4:	str	r5, [r4, #52]	; 0x34
   1d6e8:	str	r5, [r4, #56]	; 0x38
   1d6ec:	ldr	r0, [r4, #16]
   1d6f0:	bl	1a12c <__assert_fail@plt+0x8490>
   1d6f4:	str	r5, [r4, #16]
   1d6f8:	pop	{r4, r5, fp, pc}
   1d6fc:	push	{r4, sl, fp, lr}
   1d700:	add	fp, sp, #8
   1d704:	mov	r4, r0
   1d708:	ldr	r0, [r0, #8]
   1d70c:	bl	1a12c <__assert_fail@plt+0x8490>
   1d710:	ldr	r0, [r4, #12]
   1d714:	bl	1a12c <__assert_fail@plt+0x8490>
   1d718:	ldrb	r0, [r4, #75]	; 0x4b
   1d71c:	cmp	r0, #0
   1d720:	popeq	{r4, sl, fp, pc}
   1d724:	ldr	r0, [r4, #4]
   1d728:	pop	{r4, sl, fp, lr}
   1d72c:	b	1a12c <__assert_fail@plt+0x8490>
   1d730:	push	{r4, r5, r6, r7, fp, lr}
   1d734:	add	fp, sp, #16
   1d738:	mov	r5, r0
   1d73c:	ldr	r0, [r0, #80]	; 0x50
   1d740:	mov	r4, r1
   1d744:	cmp	r0, #2
   1d748:	blt	1d794 <__assert_fail@plt+0xbaf8>
   1d74c:	mov	r6, #12
   1d750:	cmn	r4, #-1073741823	; 0xc0000001
   1d754:	bhi	1d7c0 <__assert_fail@plt+0xbb24>
   1d758:	ldr	r0, [r5, #8]
   1d75c:	lsl	r7, r4, #2
   1d760:	mov	r1, r7
   1d764:	bl	1a28c <__assert_fail@plt+0x85f0>
   1d768:	cmp	r0, #0
   1d76c:	beq	1d7c0 <__assert_fail@plt+0xbb24>
   1d770:	str	r0, [r5, #8]
   1d774:	ldr	r0, [r5, #12]
   1d778:	cmp	r0, #0
   1d77c:	beq	1d794 <__assert_fail@plt+0xbaf8>
   1d780:	mov	r1, r7
   1d784:	bl	1a28c <__assert_fail@plt+0x85f0>
   1d788:	cmp	r0, #0
   1d78c:	beq	1d7c0 <__assert_fail@plt+0xbb24>
   1d790:	str	r0, [r5, #12]
   1d794:	ldrb	r0, [r5, #75]	; 0x4b
   1d798:	cmp	r0, #0
   1d79c:	beq	1d7b8 <__assert_fail@plt+0xbb1c>
   1d7a0:	ldr	r0, [r5, #4]
   1d7a4:	mov	r1, r4
   1d7a8:	bl	1a28c <__assert_fail@plt+0x85f0>
   1d7ac:	cmp	r0, #0
   1d7b0:	beq	1d7c8 <__assert_fail@plt+0xbb2c>
   1d7b4:	str	r0, [r5, #4]
   1d7b8:	mov	r6, #0
   1d7bc:	str	r4, [r5, #36]	; 0x24
   1d7c0:	mov	r0, r6
   1d7c4:	pop	{r4, r5, r6, r7, fp, pc}
   1d7c8:	mov	r6, #12
   1d7cc:	b	1d7c0 <__assert_fail@plt+0xbb24>
   1d7d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d7d4:	add	fp, sp, #28
   1d7d8:	sub	sp, sp, #92	; 0x5c
   1d7dc:	mov	r6, r0
   1d7e0:	ldrb	r0, [r0, #74]	; 0x4a
   1d7e4:	ldr	r8, [r6, #36]	; 0x24
   1d7e8:	ldr	r1, [r6, #48]	; 0x30
   1d7ec:	ldr	sl, [r6, #28]
   1d7f0:	str	r6, [sp]
   1d7f4:	cmp	r8, r1
   1d7f8:	movgt	r8, r1
   1d7fc:	cmp	r0, #0
   1d800:	bne	1d81c <__assert_fail@plt+0xbb80>
   1d804:	ldr	r0, [r6, #64]	; 0x40
   1d808:	cmp	r0, #0
   1d80c:	bne	1d81c <__assert_fail@plt+0xbb80>
   1d810:	ldrb	r0, [r6, #76]	; 0x4c
   1d814:	cmp	r0, #0
   1d818:	beq	1d824 <__assert_fail@plt+0xbb88>
   1d81c:	ldr	r7, [r6, #32]
   1d820:	b	1da14 <__assert_fail@plt+0xbd78>
   1d824:	cmp	r8, sl
   1d828:	ble	1d9e8 <__assert_fail@plt+0xbd4c>
   1d82c:	add	r9, r6, #16
   1d830:	str	r8, [sp, #4]
   1d834:	ldr	r7, [r6, #24]
   1d838:	ldr	r4, [r6]
   1d83c:	mov	r5, sl
   1d840:	add	r0, r7, sl
   1d844:	ldrb	r6, [r4, r0]
   1d848:	tst	r6, #128	; 0x80
   1d84c:	bne	1d890 <__assert_fail@plt+0xbbf4>
   1d850:	mov	r0, r9
   1d854:	bl	1190c <mbsinit@plt>
   1d858:	cmp	r0, #0
   1d85c:	add	sl, sp, #16
   1d860:	beq	1d8a4 <__assert_fail@plt+0xbc08>
   1d864:	mov	r0, r6
   1d868:	bl	11c3c <towupper@plt>
   1d86c:	cmp	r0, #128	; 0x80
   1d870:	bcs	1d898 <__assert_fail@plt+0xbbfc>
   1d874:	ldr	r2, [sp]
   1d878:	add	sl, r5, #1
   1d87c:	ldr	r1, [r2, #4]
   1d880:	strb	r0, [r1, r5]
   1d884:	ldr	r1, [r2, #8]
   1d888:	str	r0, [r1, r5, lsl #2]
   1d88c:	b	1d980 <__assert_fail@plt+0xbce4>
   1d890:	add	sl, sp, #16
   1d894:	b	1d8a4 <__assert_fail@plt+0xbc08>
   1d898:	ldr	r0, [sp]
   1d89c:	ldr	r4, [r0]
   1d8a0:	ldr	r7, [r0, #24]
   1d8a4:	ldm	r9, {r0, r1}
   1d8a8:	str	r1, [fp, #-36]	; 0xffffffdc
   1d8ac:	sub	r2, r8, r5
   1d8b0:	mov	r3, r9
   1d8b4:	str	r0, [fp, #-40]	; 0xffffffd8
   1d8b8:	add	r0, r4, r7
   1d8bc:	mov	r7, r5
   1d8c0:	add	r1, r0, r5
   1d8c4:	add	r0, sp, #12
   1d8c8:	bl	1a228 <__assert_fail@plt+0x858c>
   1d8cc:	sub	r8, r0, #1
   1d8d0:	mov	r4, r0
   1d8d4:	cmn	r8, #4
   1d8d8:	bhi	1d998 <__assert_fail@plt+0xbcfc>
   1d8dc:	ldr	r0, [sp, #12]
   1d8e0:	bl	11c3c <towupper@plt>
   1d8e4:	mov	r6, r0
   1d8e8:	ldr	r0, [sp, #12]
   1d8ec:	cmp	r6, r0
   1d8f0:	bne	1d914 <__assert_fail@plt+0xbc78>
   1d8f4:	ldr	r5, [sp]
   1d8f8:	ldr	r1, [r5]
   1d8fc:	ldr	r2, [r5, #24]
   1d900:	ldr	r0, [r5, #4]
   1d904:	add	r1, r1, r2
   1d908:	add	r0, r0, r7
   1d90c:	add	r1, r1, r7
   1d910:	b	1d93c <__assert_fail@plt+0xbca0>
   1d914:	mov	r0, sl
   1d918:	mov	r1, r6
   1d91c:	sub	r2, fp, #40	; 0x28
   1d920:	bl	11834 <wcrtomb@plt>
   1d924:	cmp	r4, r0
   1d928:	bne	1d9f0 <__assert_fail@plt+0xbd54>
   1d92c:	ldr	r5, [sp]
   1d930:	mov	r1, sl
   1d934:	ldr	r0, [r5, #4]
   1d938:	add	r0, r0, r7
   1d93c:	mov	r2, r4
   1d940:	bl	118dc <memcpy@plt>
   1d944:	ldr	r0, [r5, #8]
   1d948:	add	sl, r7, #1
   1d94c:	str	r6, [r0, r7, lsl #2]
   1d950:	add	r6, r4, r7
   1d954:	cmp	sl, r6
   1d958:	bge	1d980 <__assert_fail@plt+0xbce4>
   1d95c:	add	r0, r0, r7, lsl #2
   1d960:	mvn	r1, #3
   1d964:	add	r2, r1, r4, lsl #2
   1d968:	mov	r1, #255	; 0xff
   1d96c:	add	r0, r0, #4
   1d970:	bl	11b04 <memset@plt>
   1d974:	subs	r8, r8, #1
   1d978:	bne	1d974 <__assert_fail@plt+0xbcd8>
   1d97c:	mov	sl, r6
   1d980:	ldr	r8, [sp, #4]
   1d984:	ldr	r6, [sp]
   1d988:	mov	r7, sl
   1d98c:	cmp	r8, sl
   1d990:	bgt	1d834 <__assert_fail@plt+0xbb98>
   1d994:	b	1dd60 <__assert_fail@plt+0xc0c4>
   1d998:	add	r0, r4, #1
   1d99c:	cmp	r0, #2
   1d9a0:	bcc	1d9b8 <__assert_fail@plt+0xbd1c>
   1d9a4:	ldr	r1, [sp]
   1d9a8:	ldr	r0, [r1, #36]	; 0x24
   1d9ac:	ldr	r1, [r1, #48]	; 0x30
   1d9b0:	cmp	r0, r1
   1d9b4:	blt	1d9fc <__assert_fail@plt+0xbd60>
   1d9b8:	ldr	r1, [sp]
   1d9bc:	add	sl, r7, #1
   1d9c0:	cmn	r4, #1
   1d9c4:	ldr	r0, [r1, #4]
   1d9c8:	strb	r6, [r0, r7]
   1d9cc:	ldr	r0, [r1, #8]
   1d9d0:	str	r6, [r0, r7, lsl #2]
   1d9d4:	bne	1d980 <__assert_fail@plt+0xbce4>
   1d9d8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1d9dc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1d9e0:	stm	r9, {r0, r1}
   1d9e4:	b	1d980 <__assert_fail@plt+0xbce4>
   1d9e8:	mov	r7, sl
   1d9ec:	b	1dd60 <__assert_fail@plt+0xc0c4>
   1d9f0:	ldm	sp, {r6, r8}
   1d9f4:	mov	sl, r7
   1d9f8:	b	1da1c <__assert_fail@plt+0xbd80>
   1d9fc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1da00:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1da04:	mov	sl, r7
   1da08:	stm	r9, {r0, r1}
   1da0c:	ldr	r6, [sp]
   1da10:	b	1dd60 <__assert_fail@plt+0xc0c4>
   1da14:	cmp	sl, r8
   1da18:	bge	1dd60 <__assert_fail@plt+0xc0c4>
   1da1c:	mov	r3, r6
   1da20:	ldr	r0, [r6, #16]!
   1da24:	sub	r2, r8, sl
   1da28:	str	r7, [sp, #4]
   1da2c:	ldr	r1, [r6, #4]
   1da30:	str	r0, [fp, #-40]	; 0xffffffd8
   1da34:	str	r1, [fp, #-36]	; 0xffffffdc
   1da38:	ldr	r0, [r6, #48]	; 0x30
   1da3c:	cmp	r0, #0
   1da40:	bne	1db20 <__assert_fail@plt+0xbe84>
   1da44:	ldr	r0, [r3]
   1da48:	ldr	r1, [r3, #24]
   1da4c:	add	r0, r0, r1
   1da50:	add	r4, r0, r7
   1da54:	add	r0, sp, #8
   1da58:	mov	r1, r4
   1da5c:	mov	r3, r6
   1da60:	mov	r9, r8
   1da64:	bl	1a228 <__assert_fail@plt+0x858c>
   1da68:	sub	r8, r0, #1
   1da6c:	mov	r5, r0
   1da70:	cmn	r8, #4
   1da74:	bhi	1db80 <__assert_fail@plt+0xbee4>
   1da78:	ldr	r0, [sp, #8]
   1da7c:	bl	11c3c <towupper@plt>
   1da80:	mov	r7, r0
   1da84:	ldr	r0, [sp, #8]
   1da88:	cmp	r7, r0
   1da8c:	bne	1da9c <__assert_fail@plt+0xbe00>
   1da90:	ldr	r6, [sp]
   1da94:	mov	r1, r4
   1da98:	b	1dabc <__assert_fail@plt+0xbe20>
   1da9c:	add	r0, sp, #16
   1daa0:	sub	r2, fp, #40	; 0x28
   1daa4:	mov	r1, r7
   1daa8:	bl	11834 <wcrtomb@plt>
   1daac:	cmp	r0, r5
   1dab0:	bne	1dbfc <__assert_fail@plt+0xbf60>
   1dab4:	ldr	r6, [sp]
   1dab8:	add	r1, sp, #16
   1dabc:	ldr	r0, [r6, #4]
   1dac0:	add	r0, r0, sl
   1dac4:	mov	r2, r5
   1dac8:	bl	118dc <memcpy@plt>
   1dacc:	ldrb	r0, [r6, #76]	; 0x4c
   1dad0:	cmp	r0, #0
   1dad4:	bne	1dd28 <__assert_fail@plt+0xc08c>
   1dad8:	ldr	r0, [r6, #8]
   1dadc:	add	r4, r5, sl
   1dae0:	str	r7, [r0, sl, lsl #2]
   1dae4:	ldr	r7, [sp, #4]
   1dae8:	add	sl, sl, #1
   1daec:	cmp	sl, r4
   1daf0:	add	r7, r5, r7
   1daf4:	bge	1db18 <__assert_fail@plt+0xbe7c>
   1daf8:	mvn	r1, #3
   1dafc:	add	r0, r0, sl, lsl #2
   1db00:	add	r2, r1, r5, lsl #2
   1db04:	mov	r1, #255	; 0xff
   1db08:	bl	11b04 <memset@plt>
   1db0c:	subs	r8, r8, #1
   1db10:	bne	1db0c <__assert_fail@plt+0xbe70>
   1db14:	mov	sl, r4
   1db18:	mov	r8, r9
   1db1c:	b	1da14 <__assert_fail@plt+0xbd78>
   1db20:	add	r4, sp, #16
   1db24:	cmp	r2, #1
   1db28:	blt	1da54 <__assert_fail@plt+0xbdb8>
   1db2c:	ldr	r1, [sp]
   1db30:	ldr	r1, [r1, #80]	; 0x50
   1db34:	cmp	r1, #1
   1db38:	blt	1da54 <__assert_fail@plt+0xbdb8>
   1db3c:	ldr	r4, [sp]
   1db40:	mov	r5, r7
   1db44:	ldr	r7, [r4, #24]
   1db48:	ldr	r3, [r4]
   1db4c:	add	r4, sp, #16
   1db50:	add	r7, r5, r7
   1db54:	add	r3, r3, r7
   1db58:	mov	r7, #0
   1db5c:	ldrb	r5, [r3, r7]
   1db60:	ldrb	r5, [r0, r5]
   1db64:	strb	r5, [r4, r7]
   1db68:	add	r7, r7, #1
   1db6c:	cmp	r7, r2
   1db70:	bge	1da54 <__assert_fail@plt+0xbdb8>
   1db74:	cmp	r7, r1
   1db78:	blt	1db5c <__assert_fail@plt+0xbec0>
   1db7c:	b	1da54 <__assert_fail@plt+0xbdb8>
   1db80:	ldr	r3, [sp]
   1db84:	add	r0, r5, #1
   1db88:	cmp	r0, #2
   1db8c:	bcc	1dba0 <__assert_fail@plt+0xbf04>
   1db90:	ldr	r0, [r3, #36]	; 0x24
   1db94:	ldr	r1, [r3, #48]	; 0x30
   1db98:	cmp	r0, r1
   1db9c:	blt	1dd4c <__assert_fail@plt+0xc0b0>
   1dba0:	ldr	r2, [r3, #24]
   1dba4:	ldr	r7, [sp, #4]
   1dba8:	ldr	r0, [r3]
   1dbac:	ldr	r1, [r3, #64]	; 0x40
   1dbb0:	add	r2, r2, r7
   1dbb4:	cmp	r1, #0
   1dbb8:	ldrb	r0, [r0, r2]
   1dbbc:	bne	1dd7c <__assert_fail@plt+0xc0e0>
   1dbc0:	ldr	r2, [sp]
   1dbc4:	mov	r8, r9
   1dbc8:	ldr	r1, [r2, #4]
   1dbcc:	strb	r0, [r1, sl]
   1dbd0:	ldrb	r1, [r2, #76]	; 0x4c
   1dbd4:	cmp	r1, #0
   1dbd8:	bne	1dd84 <__assert_fail@plt+0xc0e8>
   1dbdc:	ldr	r1, [r2, #8]
   1dbe0:	add	r7, r7, #1
   1dbe4:	cmn	r5, #1
   1dbe8:	str	r0, [r1, sl, lsl #2]
   1dbec:	add	sl, sl, #1
   1dbf0:	beq	1dd90 <__assert_fail@plt+0xc0f4>
   1dbf4:	ldr	r6, [sp]
   1dbf8:	b	1da14 <__assert_fail@plt+0xbd78>
   1dbfc:	mov	r2, r0
   1dc00:	cmn	r0, #1
   1dc04:	beq	1da90 <__assert_fail@plt+0xbdf4>
   1dc08:	ldr	r3, [sp]
   1dc0c:	add	r9, r2, sl
   1dc10:	ldr	r1, [r3, #36]	; 0x24
   1dc14:	cmp	r9, r1
   1dc18:	bhi	1dd4c <__assert_fail@plt+0xc0b0>
   1dc1c:	ldr	r0, [r3, #12]
   1dc20:	mov	r6, r3
   1dc24:	cmp	r0, #0
   1dc28:	bne	1dc48 <__assert_fail@plt+0xbfac>
   1dc2c:	lsl	r0, r1, #2
   1dc30:	mov	r4, r2
   1dc34:	bl	1a1f8 <__assert_fail@plt+0x855c>
   1dc38:	mov	r2, r4
   1dc3c:	cmp	r0, #0
   1dc40:	str	r0, [r6, #12]
   1dc44:	beq	1dd74 <__assert_fail@plt+0xc0d8>
   1dc48:	ldrb	r1, [r6, #76]	; 0x4c
   1dc4c:	cmp	r1, #0
   1dc50:	bne	1dc78 <__assert_fail@plt+0xbfdc>
   1dc54:	cmp	sl, #0
   1dc58:	beq	1dc70 <__assert_fail@plt+0xbfd4>
   1dc5c:	mov	r1, #0
   1dc60:	str	r1, [r0, r1, lsl #2]
   1dc64:	add	r1, r1, #1
   1dc68:	cmp	sl, r1
   1dc6c:	bne	1dc60 <__assert_fail@plt+0xbfc4>
   1dc70:	mov	r0, #1
   1dc74:	strb	r0, [r6, #76]	; 0x4c
   1dc78:	ldr	r0, [r6, #4]
   1dc7c:	add	r1, sp, #16
   1dc80:	mov	r4, r2
   1dc84:	add	r0, r0, sl
   1dc88:	bl	118dc <memcpy@plt>
   1dc8c:	ldr	r1, [r6, #8]
   1dc90:	cmp	r4, #2
   1dc94:	str	r7, [r1, sl, lsl #2]
   1dc98:	ldr	r0, [r6, #12]
   1dc9c:	ldr	r6, [sp, #4]
   1dca0:	str	r6, [r0, sl, lsl #2]
   1dca4:	bcc	1dcdc <__assert_fail@plt+0xc040>
   1dca8:	add	r0, r0, sl, lsl #2
   1dcac:	add	r1, r1, sl, lsl #2
   1dcb0:	mov	r2, #1
   1dcb4:	mvn	r3, #0
   1dcb8:	cmp	r2, r5
   1dcbc:	mov	r7, r8
   1dcc0:	movcc	r7, r2
   1dcc4:	add	r7, r7, r6
   1dcc8:	str	r7, [r0, r2, lsl #2]
   1dccc:	str	r3, [r1, r2, lsl #2]
   1dcd0:	add	r2, r2, #1
   1dcd4:	cmp	r4, r2
   1dcd8:	bne	1dcb8 <__assert_fail@plt+0xc01c>
   1dcdc:	ldr	r3, [sp]
   1dce0:	sub	r1, r4, r5
   1dce4:	mov	r7, r6
   1dce8:	ldr	r0, [r3, #48]	; 0x30
   1dcec:	ldr	r2, [r3, #52]	; 0x34
   1dcf0:	add	r0, r0, r1
   1dcf4:	cmp	r2, r6
   1dcf8:	mov	r6, r3
   1dcfc:	str	r0, [r3, #48]	; 0x30
   1dd00:	ble	1dd10 <__assert_fail@plt+0xc074>
   1dd04:	ldr	r2, [r6, #56]	; 0x38
   1dd08:	add	r1, r2, r1
   1dd0c:	str	r1, [r6, #56]	; 0x38
   1dd10:	ldr	r8, [r6, #36]	; 0x24
   1dd14:	add	r7, r5, r7
   1dd18:	mov	sl, r9
   1dd1c:	cmp	r8, r0
   1dd20:	movgt	r8, r0
   1dd24:	b	1da14 <__assert_fail@plt+0xbd78>
   1dd28:	ldr	r0, [r6, #12]
   1dd2c:	ldr	r1, [sp, #4]
   1dd30:	mov	r2, r5
   1dd34:	add	r0, r0, sl, lsl #2
   1dd38:	str	r1, [r0], #4
   1dd3c:	add	r1, r1, #1
   1dd40:	subs	r2, r2, #1
   1dd44:	bne	1dd38 <__assert_fail@plt+0xc09c>
   1dd48:	b	1dad8 <__assert_fail@plt+0xbe3c>
   1dd4c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1dd50:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1dd54:	stm	r6, {r0, r1}
   1dd58:	mov	r6, r3
   1dd5c:	ldr	r7, [sp, #4]
   1dd60:	mov	r0, #0
   1dd64:	str	sl, [r6, #28]
   1dd68:	str	r7, [r6, #32]
   1dd6c:	sub	sp, fp, #28
   1dd70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd74:	mov	r0, #12
   1dd78:	b	1dd6c <__assert_fail@plt+0xc0d0>
   1dd7c:	ldrb	r0, [r1, r0]
   1dd80:	b	1dbc0 <__assert_fail@plt+0xbf24>
   1dd84:	ldr	r1, [r2, #12]
   1dd88:	str	r7, [r1, sl, lsl #2]
   1dd8c:	b	1dbdc <__assert_fail@plt+0xbf40>
   1dd90:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1dd94:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1dd98:	stm	r6, {r0, r1}
   1dd9c:	b	1dbf4 <__assert_fail@plt+0xbf58>
   1dda0:	push	{r4, r5, r6, sl, fp, lr}
   1dda4:	add	fp, sp, #16
   1dda8:	mov	r4, r0
   1ddac:	ldr	r5, [r0, #28]
   1ddb0:	ldr	r6, [r0, #36]	; 0x24
   1ddb4:	ldr	r0, [r0, #48]	; 0x30
   1ddb8:	cmp	r6, r0
   1ddbc:	movgt	r6, r0
   1ddc0:	cmp	r5, r6
   1ddc4:	bge	1de00 <__assert_fail@plt+0xc164>
   1ddc8:	ldr	r0, [r4]
   1ddcc:	ldr	r2, [r4, #24]
   1ddd0:	ldr	r1, [r4, #64]	; 0x40
   1ddd4:	add	r0, r0, r2
   1ddd8:	cmp	r1, #0
   1dddc:	ldrb	r0, [r0, r5]
   1dde0:	bne	1ddf8 <__assert_fail@plt+0xc15c>
   1dde4:	bl	11ba0 <toupper@plt>
   1dde8:	ldr	r1, [r4, #4]
   1ddec:	strb	r0, [r1, r5]
   1ddf0:	add	r5, r5, #1
   1ddf4:	b	1ddc0 <__assert_fail@plt+0xc124>
   1ddf8:	ldrb	r0, [r1, r0]
   1ddfc:	b	1dde4 <__assert_fail@plt+0xc148>
   1de00:	str	r5, [r4, #28]
   1de04:	str	r5, [r4, #32]
   1de08:	pop	{r4, r5, r6, sl, fp, pc}
   1de0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de10:	add	fp, sp, #28
   1de14:	sub	sp, sp, #76	; 0x4c
   1de18:	mov	r4, r0
   1de1c:	ldr	sl, [r0, #28]
   1de20:	ldr	r6, [r0, #36]	; 0x24
   1de24:	ldr	r0, [r0, #48]	; 0x30
   1de28:	cmp	r6, r0
   1de2c:	movgt	r6, r0
   1de30:	cmp	r6, sl
   1de34:	ble	1dfe4 <__assert_fail@plt+0xc348>
   1de38:	add	r9, r4, #16
   1de3c:	add	r0, sp, #8
   1de40:	ldr	r3, [r4, #64]	; 0x40
   1de44:	ldm	r9, {r1, r5}
   1de48:	sub	r2, r6, sl
   1de4c:	str	r1, [sp, #4]
   1de50:	cmp	r3, #0
   1de54:	bne	1df24 <__assert_fail@plt+0xc288>
   1de58:	ldr	r3, [r4]
   1de5c:	ldr	r1, [r4, #24]
   1de60:	add	r1, r3, r1
   1de64:	add	r1, r1, sl
   1de68:	mov	r3, r9
   1de6c:	mov	r8, r0
   1de70:	bl	1a228 <__assert_fail@plt+0x858c>
   1de74:	mov	r7, r0
   1de78:	add	r0, r0, #1
   1de7c:	cmp	r0, #2
   1de80:	bcc	1de9c <__assert_fail@plt+0xc200>
   1de84:	cmn	r7, #2
   1de88:	bne	1decc <__assert_fail@plt+0xc230>
   1de8c:	ldr	r0, [r4, #36]	; 0x24
   1de90:	ldr	r1, [r4, #48]	; 0x30
   1de94:	cmp	r0, r1
   1de98:	blt	1dfdc <__assert_fail@plt+0xc340>
   1de9c:	ldr	r1, [r4, #24]
   1dea0:	ldr	r0, [r4]
   1dea4:	add	r1, r1, sl
   1dea8:	ldrb	r0, [r0, r1]
   1deac:	str	r0, [sp, #8]
   1deb0:	ldr	r1, [r4, #64]	; 0x40
   1deb4:	cmp	r1, #0
   1deb8:	bne	1dfd0 <__assert_fail@plt+0xc334>
   1debc:	ldr	r1, [sp, #4]
   1dec0:	mov	r7, #1
   1dec4:	stm	r9, {r1, r5}
   1dec8:	b	1ded0 <__assert_fail@plt+0xc234>
   1decc:	ldr	r0, [sp, #8]
   1ded0:	ldr	r1, [r4, #8]
   1ded4:	add	r5, r7, sl
   1ded8:	add	r2, sl, #1
   1dedc:	cmp	r2, r5
   1dee0:	str	r0, [r1, sl, lsl #2]
   1dee4:	bge	1df10 <__assert_fail@plt+0xc274>
   1dee8:	mvn	r0, #3
   1deec:	add	r2, r0, r7, lsl #2
   1def0:	add	r0, r1, sl, lsl #2
   1def4:	mov	r1, #255	; 0xff
   1def8:	add	r0, r0, #4
   1defc:	bl	11b04 <memset@plt>
   1df00:	sub	r0, r7, #1
   1df04:	subs	r0, r0, #1
   1df08:	bne	1df04 <__assert_fail@plt+0xc268>
   1df0c:	mov	r2, r5
   1df10:	cmp	r6, r2
   1df14:	mov	sl, r2
   1df18:	mov	r0, r8
   1df1c:	bgt	1de40 <__assert_fail@plt+0xc1a4>
   1df20:	b	1dfe8 <__assert_fail@plt+0xc34c>
   1df24:	cmp	r2, #1
   1df28:	add	r1, sp, #12
   1df2c:	blt	1de68 <__assert_fail@plt+0xc1cc>
   1df30:	ldr	r1, [r4, #80]	; 0x50
   1df34:	cmp	r1, #1
   1df38:	add	r1, sp, #12
   1df3c:	blt	1de68 <__assert_fail@plt+0xc1cc>
   1df40:	ldr	r7, [r4, #24]
   1df44:	ldm	r4, {r1, ip}
   1df48:	cmp	r2, #2
   1df4c:	add	r7, sl, r7
   1df50:	ldrb	r1, [r1, r7]
   1df54:	ldrb	r1, [r3, r1]
   1df58:	strb	r1, [ip, sl]
   1df5c:	strb	r1, [sp, #12]
   1df60:	add	r1, sp, #12
   1df64:	blt	1de68 <__assert_fail@plt+0xc1cc>
   1df68:	ldr	r1, [r4, #80]	; 0x50
   1df6c:	cmp	r1, #2
   1df70:	add	r1, sp, #12
   1df74:	blt	1de68 <__assert_fail@plt+0xc1cc>
   1df78:	mov	lr, r0
   1df7c:	mov	r0, #1
   1df80:	ldr	r7, [r4, #24]
   1df84:	ldm	r4, {r1, ip}
   1df88:	ldr	r3, [r4, #64]	; 0x40
   1df8c:	add	r1, r1, r7
   1df90:	add	r1, r1, sl
   1df94:	ldrb	r1, [r1, r0]
   1df98:	ldrb	r1, [r3, r1]
   1df9c:	add	r3, ip, sl
   1dfa0:	strb	r1, [r3, r0]
   1dfa4:	add	r3, sp, #12
   1dfa8:	strb	r1, [r3, r0]
   1dfac:	add	r0, r0, #1
   1dfb0:	cmp	r0, r2
   1dfb4:	bge	1dfc4 <__assert_fail@plt+0xc328>
   1dfb8:	ldr	r1, [r4, #80]	; 0x50
   1dfbc:	cmp	r0, r1
   1dfc0:	blt	1df80 <__assert_fail@plt+0xc2e4>
   1dfc4:	add	r1, sp, #12
   1dfc8:	mov	r0, lr
   1dfcc:	b	1de68 <__assert_fail@plt+0xc1cc>
   1dfd0:	ldrb	r0, [r1, r0]
   1dfd4:	str	r0, [sp, #8]
   1dfd8:	b	1debc <__assert_fail@plt+0xc220>
   1dfdc:	ldr	r0, [sp, #4]
   1dfe0:	stm	r9, {r0, r5}
   1dfe4:	mov	r2, sl
   1dfe8:	str	r2, [r4, #28]
   1dfec:	str	r2, [r4, #32]
   1dff0:	sub	sp, fp, #28
   1dff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dff8:	push	{r4, sl, fp, lr}
   1dffc:	add	fp, sp, #8
   1e000:	ldr	ip, [r0, #36]	; 0x24
   1e004:	ldr	r3, [r0, #48]	; 0x30
   1e008:	ldr	r1, [r0, #28]
   1e00c:	cmp	ip, r3
   1e010:	movgt	ip, r3
   1e014:	cmp	r1, ip
   1e018:	bge	1e040 <__assert_fail@plt+0xc3a4>
   1e01c:	ldr	r2, [r0, #24]
   1e020:	ldm	r0, {r3, lr}
   1e024:	ldr	r4, [r0, #64]	; 0x40
   1e028:	add	r2, r3, r2
   1e02c:	ldrb	r2, [r2, r1]
   1e030:	ldrb	r2, [r4, r2]
   1e034:	strb	r2, [lr, r1]
   1e038:	add	r1, r1, #1
   1e03c:	b	1e014 <__assert_fail@plt+0xc378>
   1e040:	str	r1, [r0, #28]
   1e044:	str	r1, [r0, #32]
   1e048:	pop	{r4, sl, fp, pc}
   1e04c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e050:	add	fp, sp, #28
   1e054:	sub	sp, sp, #28
   1e058:	ldr	r9, [r1]
   1e05c:	mov	r5, r0
   1e060:	ldr	r8, [fp, #12]
   1e064:	mov	r6, r2
   1e068:	str	r1, [sp, #12]
   1e06c:	str	r3, [sp, #16]
   1e070:	ldr	r0, [r9, #84]	; 0x54
   1e074:	str	r8, [sp, #4]
   1e078:	str	r0, [sp, #8]
   1e07c:	ldr	r0, [fp, #8]
   1e080:	str	r0, [sp]
   1e084:	mov	r0, r5
   1e088:	bl	1e88c <__assert_fail@plt+0xcbf0>
   1e08c:	mov	r4, r0
   1e090:	cmp	r0, #0
   1e094:	bne	1e0a4 <__assert_fail@plt+0xc408>
   1e098:	ldr	r0, [r8]
   1e09c:	cmp	r0, #0
   1e0a0:	bne	1e194 <__assert_fail@plt+0xc4f8>
   1e0a4:	ldr	r0, [sp, #16]
   1e0a8:	ldr	r8, [fp, #8]
   1e0ac:	mov	r7, #10
   1e0b0:	orr	sl, r0, #8388608	; 0x800000
   1e0b4:	ldrb	r0, [r6, #4]
   1e0b8:	cmp	r0, #10
   1e0bc:	bne	1e198 <__assert_fail@plt+0xc4fc>
   1e0c0:	mov	r0, r6
   1e0c4:	mov	r1, r5
   1e0c8:	mov	r2, sl
   1e0cc:	bl	1e1fc <__assert_fail@plt+0xc560>
   1e0d0:	ldr	r1, [r5, #40]	; 0x28
   1e0d4:	mov	r2, #0
   1e0d8:	add	r0, r1, r0
   1e0dc:	str	r0, [r5, #40]	; 0x28
   1e0e0:	ldrb	r0, [r6, #4]
   1e0e4:	orr	r1, r0, #8
   1e0e8:	cmp	r1, #10
   1e0ec:	bne	1e11c <__assert_fail@plt+0xc480>
   1e0f0:	mov	r0, #0
   1e0f4:	str	r7, [sp, #24]
   1e0f8:	mov	r1, r4
   1e0fc:	add	r3, sp, #20
   1e100:	str	r0, [sp, #20]
   1e104:	mov	r0, r9
   1e108:	bl	2001c <__assert_fail@plt+0xe380>
   1e10c:	mov	r4, r0
   1e110:	cmp	r0, #0
   1e114:	bne	1e0b4 <__assert_fail@plt+0xc418>
   1e118:	b	1e188 <__assert_fail@plt+0xc4ec>
   1e11c:	cmp	r8, #0
   1e120:	beq	1e12c <__assert_fail@plt+0xc490>
   1e124:	cmp	r0, #9
   1e128:	beq	1e0f0 <__assert_fail@plt+0xc454>
   1e12c:	ldr	r0, [sp, #8]
   1e130:	ldr	r7, [r9, #84]	; 0x54
   1e134:	ldr	r1, [sp, #12]
   1e138:	ldr	r3, [sp, #16]
   1e13c:	mov	r2, r6
   1e140:	str	r0, [r9, #84]	; 0x54
   1e144:	str	r8, [sp]
   1e148:	ldr	r8, [fp, #12]
   1e14c:	mov	r0, r5
   1e150:	str	r8, [sp, #4]
   1e154:	bl	1e88c <__assert_fail@plt+0xcbf0>
   1e158:	mov	r2, r0
   1e15c:	cmp	r0, #0
   1e160:	bne	1e170 <__assert_fail@plt+0xc4d4>
   1e164:	ldr	r0, [r8]
   1e168:	cmp	r0, #0
   1e16c:	bne	1e1a4 <__assert_fail@plt+0xc508>
   1e170:	ldr	r0, [r9, #84]	; 0x54
   1e174:	ldr	r8, [fp, #8]
   1e178:	orr	r0, r0, r7
   1e17c:	mov	r7, #10
   1e180:	str	r0, [r9, #84]	; 0x54
   1e184:	b	1e0f0 <__assert_fail@plt+0xc454>
   1e188:	ldr	r1, [fp, #12]
   1e18c:	mov	r0, #12
   1e190:	str	r0, [r1]
   1e194:	mov	r4, #0
   1e198:	mov	r0, r4
   1e19c:	sub	sp, fp, #28
   1e1a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e1a4:	cmp	r4, #0
   1e1a8:	beq	1e194 <__assert_fail@plt+0xc4f8>
   1e1ac:	mov	r5, r4
   1e1b0:	ldr	r4, [r4, #4]
   1e1b4:	cmp	r4, #0
   1e1b8:	bne	1e1ac <__assert_fail@plt+0xc510>
   1e1bc:	ldr	r4, [r5, #8]
   1e1c0:	cmp	r4, #0
   1e1c4:	bne	1e1ac <__assert_fail@plt+0xc510>
   1e1c8:	add	r0, r5, #20
   1e1cc:	bl	1d5e4 <__assert_fail@plt+0xb948>
   1e1d0:	ldr	r0, [r5]
   1e1d4:	cmp	r0, #0
   1e1d8:	beq	1e194 <__assert_fail@plt+0xc4f8>
   1e1dc:	ldr	r4, [r0, #8]
   1e1e0:	cmp	r4, r5
   1e1e4:	mov	r5, r0
   1e1e8:	beq	1e1c8 <__assert_fail@plt+0xc52c>
   1e1ec:	cmp	r4, #0
   1e1f0:	mov	r5, r0
   1e1f4:	beq	1e1c8 <__assert_fail@plt+0xc52c>
   1e1f8:	b	1e1ac <__assert_fail@plt+0xc510>
   1e1fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e200:	add	fp, sp, #24
   1e204:	sub	sp, sp, #8
   1e208:	mov	r9, r0
   1e20c:	mov	r7, r1
   1e210:	ldr	r0, [r1, #40]	; 0x28
   1e214:	ldr	r1, [r1, #56]	; 0x38
   1e218:	cmp	r1, r0
   1e21c:	ble	1e304 <__assert_fail@plt+0xc668>
   1e220:	ldr	r1, [r7, #4]
   1e224:	mov	r5, r9
   1e228:	mov	r8, r2
   1e22c:	ldrb	r6, [r1, r0]
   1e230:	strb	r6, [r5], #4
   1e234:	ldr	r0, [r5]
   1e238:	bic	r1, r0, #6291456	; 0x600000
   1e23c:	str	r1, [r5]
   1e240:	ldr	r3, [r7, #80]	; 0x50
   1e244:	cmp	r3, #2
   1e248:	blt	1e26c <__assert_fail@plt+0xc5d0>
   1e24c:	ldr	r2, [r7, #28]
   1e250:	ldr	r1, [r7, #40]	; 0x28
   1e254:	cmp	r1, r2
   1e258:	beq	1e26c <__assert_fail@plt+0xc5d0>
   1e25c:	ldr	r2, [r7, #8]
   1e260:	ldr	r1, [r2, r1, lsl #2]
   1e264:	cmn	r1, #1
   1e268:	beq	1e5c0 <__assert_fail@plt+0xc924>
   1e26c:	movw	r1, #65280	; 0xff00
   1e270:	cmp	r6, #92	; 0x5c
   1e274:	movt	r1, #65439	; 0xff9f
   1e278:	bne	1e314 <__assert_fail@plt+0xc678>
   1e27c:	ldr	r6, [r7, #40]	; 0x28
   1e280:	ldr	r4, [r7, #48]	; 0x30
   1e284:	add	r2, r6, #1
   1e288:	cmp	r2, r4
   1e28c:	bge	1e368 <__assert_fail@plt+0xc6cc>
   1e290:	ldrb	r4, [r7, #75]	; 0x4b
   1e294:	cmp	r4, #0
   1e298:	bne	1e818 <__assert_fail@plt+0xcb7c>
   1e29c:	ldr	r3, [r7, #4]
   1e2a0:	ldrb	r6, [r3, r2]
   1e2a4:	and	r0, r0, r1
   1e2a8:	strb	r6, [r9]
   1e2ac:	orr	r4, r0, #1
   1e2b0:	str	r4, [r9, #4]
   1e2b4:	ldr	r0, [r7, #80]	; 0x50
   1e2b8:	cmp	r0, #2
   1e2bc:	blt	1e478 <__assert_fail@plt+0xc7dc>
   1e2c0:	ldr	r0, [r7, #8]
   1e2c4:	ldr	r1, [r7, #40]	; 0x28
   1e2c8:	add	r0, r0, r1, lsl #2
   1e2cc:	ldr	r4, [r0, #4]
   1e2d0:	mov	r0, r4
   1e2d4:	bl	11ad4 <iswalnum@plt>
   1e2d8:	sub	r1, r4, #95	; 0x5f
   1e2dc:	cmp	r0, #0
   1e2e0:	clz	r1, r1
   1e2e4:	movwne	r0, #1
   1e2e8:	lsr	r1, r1, #5
   1e2ec:	orr	r0, r1, r0
   1e2f0:	ldr	r1, [r5]
   1e2f4:	bic	r1, r1, #4194304	; 0x400000
   1e2f8:	orr	r0, r1, r0, lsl #22
   1e2fc:	uxtb	r1, r6
   1e300:	b	1e49c <__assert_fail@plt+0xc800>
   1e304:	mov	r0, #2
   1e308:	mov	r4, #0
   1e30c:	strb	r0, [r9, #4]
   1e310:	b	1e7ec <__assert_fail@plt+0xcb50>
   1e314:	and	r0, r0, r1
   1e318:	orr	r4, r0, #1
   1e31c:	str	r4, [r5]
   1e320:	ldr	r0, [r7, #80]	; 0x50
   1e324:	cmp	r0, #2
   1e328:	blt	1e374 <__assert_fail@plt+0xc6d8>
   1e32c:	ldr	r0, [r7, #8]
   1e330:	ldr	r1, [r7, #40]	; 0x28
   1e334:	ldr	r4, [r0, r1, lsl #2]
   1e338:	mov	r0, r4
   1e33c:	bl	11ad4 <iswalnum@plt>
   1e340:	sub	r1, r4, #95	; 0x5f
   1e344:	cmp	r0, #0
   1e348:	clz	r1, r1
   1e34c:	movwne	r0, #1
   1e350:	lsr	r1, r1, #5
   1e354:	orr	r0, r1, r0
   1e358:	ldr	r1, [r5]
   1e35c:	bic	r1, r1, #4194304	; 0x400000
   1e360:	orr	r0, r1, r0, lsl #22
   1e364:	b	1e394 <__assert_fail@plt+0xc6f8>
   1e368:	and	r0, r0, r1
   1e36c:	orr	r0, r0, #36	; 0x24
   1e370:	b	1e5d4 <__assert_fail@plt+0xc938>
   1e374:	bl	11a5c <__ctype_b_loc@plt>
   1e378:	ldr	r0, [r0]
   1e37c:	cmp	r6, #95	; 0x5f
   1e380:	add	r0, r0, r6, lsl #1
   1e384:	ldrh	r0, [r0]
   1e388:	ubfx	r0, r0, #3, #1
   1e38c:	movweq	r0, #1
   1e390:	orr	r0, r4, r0, lsl #22
   1e394:	mov	r4, #1
   1e398:	cmp	r6, #62	; 0x3e
   1e39c:	str	r0, [r5]
   1e3a0:	bgt	1e43c <__assert_fail@plt+0xc7a0>
   1e3a4:	sub	r1, r6, #36	; 0x24
   1e3a8:	cmp	r1, #10
   1e3ac:	bhi	1e630 <__assert_fail@plt+0xc994>
   1e3b0:	add	r2, pc, #0
   1e3b4:	ldr	pc, [r2, r1, lsl #2]
   1e3b8:	andeq	lr, r1, r4, ror #7
   1e3bc:	andeq	lr, r1, ip, ror #15
   1e3c0:	andeq	lr, r1, ip, ror #15
   1e3c4:	andeq	lr, r1, ip, ror #15
   1e3c8:	andeq	lr, r1, r4, asr #12
   1e3cc:	andeq	lr, r1, r4, asr r6
   1e3d0:	andeq	lr, r1, r4, ror #12
   1e3d4:	andeq	lr, r1, ip, ror #12
   1e3d8:	andeq	lr, r1, ip, ror #15
   1e3dc:	andeq	lr, r1, ip, ror #15
   1e3e0:	andeq	lr, r1, ip, ror r6
   1e3e4:	tst	r8, #8
   1e3e8:	bne	1e434 <__assert_fail@plt+0xc798>
   1e3ec:	ldr	r1, [r7, #40]	; 0x28
   1e3f0:	ldr	r2, [r7, #48]	; 0x30
   1e3f4:	add	r1, r1, #1
   1e3f8:	cmp	r1, r2
   1e3fc:	beq	1e434 <__assert_fail@plt+0xc798>
   1e400:	str	r1, [r7, #40]	; 0x28
   1e404:	mov	r0, sp
   1e408:	mov	r1, r7
   1e40c:	mov	r2, r8
   1e410:	bl	1e1fc <__assert_fail@plt+0xc560>
   1e414:	ldr	r0, [r7, #40]	; 0x28
   1e418:	sub	r0, r0, #1
   1e41c:	str	r0, [r7, #40]	; 0x28
   1e420:	ldrb	r0, [sp, #4]
   1e424:	sub	r0, r0, #9
   1e428:	cmp	r0, #1
   1e42c:	bhi	1e7ec <__assert_fail@plt+0xcb50>
   1e430:	ldr	r0, [r5]
   1e434:	mov	r1, #32
   1e438:	b	1e470 <__assert_fail@plt+0xc7d4>
   1e43c:	cmp	r6, #122	; 0x7a
   1e440:	bgt	1e598 <__assert_fail@plt+0xc8fc>
   1e444:	cmp	r6, #63	; 0x3f
   1e448:	beq	1e684 <__assert_fail@plt+0xc9e8>
   1e44c:	cmp	r6, #91	; 0x5b
   1e450:	beq	1e694 <__assert_fail@plt+0xc9f8>
   1e454:	cmp	r6, #94	; 0x5e
   1e458:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e45c:	movw	r1, #8
   1e460:	movt	r1, #128	; 0x80
   1e464:	tst	r8, r1
   1e468:	beq	1e6dc <__assert_fail@plt+0xca40>
   1e46c:	mov	r1, #16
   1e470:	mov	r2, #12
   1e474:	b	1e588 <__assert_fail@plt+0xc8ec>
   1e478:	bl	11a5c <__ctype_b_loc@plt>
   1e47c:	ldr	r0, [r0]
   1e480:	uxtb	r1, r6
   1e484:	cmp	r1, #95	; 0x5f
   1e488:	add	r0, r0, r1, lsl #1
   1e48c:	ldrh	r0, [r0]
   1e490:	ubfx	r0, r0, #3, #1
   1e494:	movweq	r0, #1
   1e498:	orr	r0, r4, r0, lsl #22
   1e49c:	uxtb	r2, r6
   1e4a0:	mov	r4, #2
   1e4a4:	str	r0, [r5]
   1e4a8:	cmp	r2, #95	; 0x5f
   1e4ac:	bgt	1e5e0 <__assert_fail@plt+0xc944>
   1e4b0:	sub	r3, r2, #39	; 0x27
   1e4b4:	cmp	r3, #44	; 0x2c
   1e4b8:	bhi	1e708 <__assert_fail@plt+0xca6c>
   1e4bc:	add	r2, pc, #0
   1e4c0:	ldr	pc, [r2, r3, lsl #2]
   1e4c4:	andeq	lr, r1, r0, ror r7
   1e4c8:	andeq	lr, r1, r0, lsl #15
   1e4cc:	andeq	lr, r1, ip, lsl #15
   1e4d0:	andeq	lr, r1, ip, ror #15
   1e4d4:	muleq	r1, r8, r7
   1e4d8:	andeq	lr, r1, ip, ror #15
   1e4dc:	andeq	lr, r1, ip, ror #15
   1e4e0:	andeq	lr, r1, ip, ror #15
   1e4e4:	andeq	lr, r1, ip, ror #15
   1e4e8:	andeq	lr, r1, ip, ror #15
   1e4ec:	andeq	lr, r1, r8, ror r5
   1e4f0:	andeq	lr, r1, r8, ror r5
   1e4f4:	andeq	lr, r1, r8, ror r5
   1e4f8:	andeq	lr, r1, r8, ror r5
   1e4fc:	andeq	lr, r1, r8, ror r5
   1e500:	andeq	lr, r1, r8, ror r5
   1e504:	andeq	lr, r1, r8, ror r5
   1e508:	andeq	lr, r1, r8, ror r5
   1e50c:	andeq	lr, r1, r8, ror r5
   1e510:	andeq	lr, r1, ip, ror #15
   1e514:	andeq	lr, r1, ip, ror #15
   1e518:			; <UNDEFINED> instruction: 0x0001e7b0
   1e51c:	andeq	lr, r1, ip, ror #15
   1e520:	andeq	lr, r1, r0, asr #15
   1e524:	ldrdeq	lr, [r1], -r0
   1e528:	andeq	lr, r1, ip, ror #15
   1e52c:	andeq	lr, r1, ip, ror #15
   1e530:	strdeq	lr, [r1], -r8
   1e534:	andeq	lr, r1, ip, ror #15
   1e538:	andeq	lr, r1, ip, ror #15
   1e53c:	andeq	lr, r1, ip, ror #15
   1e540:	andeq	lr, r1, ip, ror #15
   1e544:	andeq	lr, r1, ip, ror #15
   1e548:	andeq	lr, r1, ip, ror #15
   1e54c:	andeq	lr, r1, ip, ror #15
   1e550:	andeq	lr, r1, ip, ror #15
   1e554:	andeq	lr, r1, ip, ror #15
   1e558:	andeq	lr, r1, ip, ror #15
   1e55c:	andeq	lr, r1, ip, ror #15
   1e560:	andeq	lr, r1, ip, ror #15
   1e564:	andeq	lr, r1, ip, ror #15
   1e568:	andeq	lr, r1, ip, ror #15
   1e56c:	andeq	lr, r1, ip, ror #15
   1e570:	andeq	lr, r1, ip, ror #15
   1e574:	andeq	lr, r1, r8, lsl #16
   1e578:	tst	r8, #16384	; 0x4000
   1e57c:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e580:	sub	r1, r1, #49	; 0x31
   1e584:	mov	r2, #4
   1e588:	bfi	r0, r2, #0, #8
   1e58c:	str	r1, [r9]
   1e590:	str	r0, [r9, #4]
   1e594:	b	1e7ec <__assert_fail@plt+0xcb50>
   1e598:	cmp	r6, #123	; 0x7b
   1e59c:	beq	1e69c <__assert_fail@plt+0xca00>
   1e5a0:	cmp	r6, #124	; 0x7c
   1e5a4:	beq	1e6ac <__assert_fail@plt+0xca10>
   1e5a8:	cmp	r6, #125	; 0x7d
   1e5ac:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e5b0:	and	r1, r8, #4608	; 0x1200
   1e5b4:	cmp	r1, #4608	; 0x1200
   1e5b8:	beq	1e758 <__assert_fail@plt+0xcabc>
   1e5bc:	b	1e7ec <__assert_fail@plt+0xcb50>
   1e5c0:	movw	r1, #65280	; 0xff00
   1e5c4:	movt	r1, #65439	; 0xff9f
   1e5c8:	and	r0, r0, r1
   1e5cc:	orr	r0, r0, #1
   1e5d0:	orr	r0, r0, #2097152	; 0x200000
   1e5d4:	str	r0, [r5]
   1e5d8:	mov	r4, #1
   1e5dc:	b	1e7ec <__assert_fail@plt+0xcb50>
   1e5e0:	sub	r1, r2, #115	; 0x73
   1e5e4:	cmp	r1, #10
   1e5e8:	bhi	1e6c0 <__assert_fail@plt+0xca24>
   1e5ec:	add	r2, pc, #0
   1e5f0:	ldr	pc, [r2, r1, lsl #2]
   1e5f4:	andeq	lr, r1, r0, lsr #12
   1e5f8:	andeq	lr, r1, ip, ror #15
   1e5fc:	andeq	lr, r1, ip, ror #15
   1e600:	andeq	lr, r1, ip, ror #15
   1e604:	andeq	lr, r1, ip, lsl r7
   1e608:	andeq	lr, r1, ip, ror #15
   1e60c:	andeq	lr, r1, ip, ror #15
   1e610:	andeq	lr, r1, ip, ror #15
   1e614:	andeq	lr, r1, ip, lsr #14
   1e618:	andeq	lr, r1, r0, asr #14
   1e61c:	andeq	lr, r1, ip, asr #14
   1e620:	tst	r8, #524288	; 0x80000
   1e624:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e628:	mov	r1, #34	; 0x22
   1e62c:	b	1e7e4 <__assert_fail@plt+0xcb48>
   1e630:	cmp	r6, #10
   1e634:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e638:	tst	r8, #2048	; 0x800
   1e63c:	bne	1e6b8 <__assert_fail@plt+0xca1c>
   1e640:	b	1e7ec <__assert_fail@plt+0xcb50>
   1e644:	tst	r8, #8192	; 0x2000
   1e648:	beq	1e7ec <__assert_fail@plt+0xcb50>
   1e64c:	mov	r1, #8
   1e650:	b	1e7e4 <__assert_fail@plt+0xcb48>
   1e654:	tst	r8, #8192	; 0x2000
   1e658:	beq	1e7ec <__assert_fail@plt+0xcb50>
   1e65c:	mov	r1, #9
   1e660:	b	1e7e4 <__assert_fail@plt+0xcb48>
   1e664:	mov	r1, #11
   1e668:	b	1e7e4 <__assert_fail@plt+0xcb48>
   1e66c:	movw	r1, #1026	; 0x402
   1e670:	tst	r8, r1
   1e674:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e678:	b	1e7a8 <__assert_fail@plt+0xcb0c>
   1e67c:	mov	r1, #5
   1e680:	b	1e7e4 <__assert_fail@plt+0xcb48>
   1e684:	movw	r1, #1026	; 0x402
   1e688:	tst	r8, r1
   1e68c:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e690:	b	1e7e0 <__assert_fail@plt+0xcb44>
   1e694:	mov	r1, #20
   1e698:	b	1e7e4 <__assert_fail@plt+0xcb48>
   1e69c:	and	r1, r8, #4608	; 0x1200
   1e6a0:	cmp	r1, #4608	; 0x1200
   1e6a4:	beq	1e738 <__assert_fail@plt+0xca9c>
   1e6a8:	b	1e7ec <__assert_fail@plt+0xcb50>
   1e6ac:	and	r1, r8, #33792	; 0x8400
   1e6b0:	cmp	r1, #32768	; 0x8000
   1e6b4:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e6b8:	mov	r1, #10
   1e6bc:	b	1e7e4 <__assert_fail@plt+0xcb48>
   1e6c0:	cmp	r2, #96	; 0x60
   1e6c4:	beq	1e760 <__assert_fail@plt+0xcac4>
   1e6c8:	cmp	r2, #98	; 0x62
   1e6cc:	tsteq	r8, #524288	; 0x80000
   1e6d0:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e6d4:	mov	r1, #256	; 0x100
   1e6d8:	b	1e470 <__assert_fail@plt+0xc7d4>
   1e6dc:	ldr	r1, [r7, #40]	; 0x28
   1e6e0:	cmp	r1, #0
   1e6e4:	beq	1e46c <__assert_fail@plt+0xc7d0>
   1e6e8:	tst	r8, #2048	; 0x800
   1e6ec:	beq	1e7ec <__assert_fail@plt+0xcb50>
   1e6f0:	ldr	r2, [r7, #4]
   1e6f4:	add	r1, r1, r2
   1e6f8:	ldrb	r1, [r1, #-1]
   1e6fc:	cmp	r1, #10
   1e700:	beq	1e46c <__assert_fail@plt+0xc7d0>
   1e704:	b	1e7ec <__assert_fail@plt+0xcb50>
   1e708:	cmp	r2, #87	; 0x57
   1e70c:	tsteq	r8, #524288	; 0x80000
   1e710:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e714:	mov	r1, #33	; 0x21
   1e718:	b	1e7e4 <__assert_fail@plt+0xcb48>
   1e71c:	tst	r8, #524288	; 0x80000
   1e720:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e724:	mov	r1, #32
   1e728:	b	1e7e4 <__assert_fail@plt+0xcb48>
   1e72c:	and	r1, r8, #4608	; 0x1200
   1e730:	cmp	r1, #512	; 0x200
   1e734:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e738:	mov	r1, #23
   1e73c:	b	1e7e4 <__assert_fail@plt+0xcb48>
   1e740:	tst	r8, #33792	; 0x8400
   1e744:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e748:	b	1e6b8 <__assert_fail@plt+0xca1c>
   1e74c:	and	r1, r8, #4608	; 0x1200
   1e750:	cmp	r1, #512	; 0x200
   1e754:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e758:	mov	r1, #24
   1e75c:	b	1e7e4 <__assert_fail@plt+0xcb48>
   1e760:	tst	r8, #524288	; 0x80000
   1e764:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e768:	mov	r1, #64	; 0x40
   1e76c:	b	1e470 <__assert_fail@plt+0xc7d4>
   1e770:	tst	r8, #524288	; 0x80000
   1e774:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e778:	mov	r1, #128	; 0x80
   1e77c:	b	1e470 <__assert_fail@plt+0xc7d4>
   1e780:	tst	r8, #8192	; 0x2000
   1e784:	beq	1e64c <__assert_fail@plt+0xc9b0>
   1e788:	b	1e7ec <__assert_fail@plt+0xcb50>
   1e78c:	tst	r8, #8192	; 0x2000
   1e790:	beq	1e65c <__assert_fail@plt+0xc9c0>
   1e794:	b	1e7ec <__assert_fail@plt+0xcb50>
   1e798:	movw	r1, #1026	; 0x402
   1e79c:	and	r1, r8, r1
   1e7a0:	cmp	r1, #2
   1e7a4:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e7a8:	mov	r1, #18
   1e7ac:	b	1e7e4 <__assert_fail@plt+0xcb48>
   1e7b0:	tst	r8, #524288	; 0x80000
   1e7b4:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e7b8:	mov	r1, #6
   1e7bc:	b	1e470 <__assert_fail@plt+0xc7d4>
   1e7c0:	tst	r8, #524288	; 0x80000
   1e7c4:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e7c8:	mov	r1, #9
   1e7cc:	b	1e470 <__assert_fail@plt+0xc7d4>
   1e7d0:	movw	r1, #1026	; 0x402
   1e7d4:	and	r1, r8, r1
   1e7d8:	cmp	r1, #2
   1e7dc:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e7e0:	mov	r1, #19
   1e7e4:	bfi	r0, r1, #0, #8
   1e7e8:	str	r0, [r5]
   1e7ec:	mov	r0, r4
   1e7f0:	sub	sp, fp, #24
   1e7f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e7f8:	tst	r8, #524288	; 0x80000
   1e7fc:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e800:	mov	r1, #512	; 0x200
   1e804:	b	1e470 <__assert_fail@plt+0xc7d4>
   1e808:	tst	r8, #524288	; 0x80000
   1e80c:	bne	1e7ec <__assert_fail@plt+0xcb50>
   1e810:	mov	r1, #35	; 0x23
   1e814:	b	1e7e4 <__assert_fail@plt+0xcb48>
   1e818:	cmp	r3, #2
   1e81c:	blt	1e84c <__assert_fail@plt+0xcbb0>
   1e820:	ldr	r3, [r7, #8]
   1e824:	ldr	r4, [r3, r2, lsl #2]
   1e828:	cmn	r4, #1
   1e82c:	beq	1e29c <__assert_fail@plt+0xc600>
   1e830:	ldr	r4, [r7, #28]
   1e834:	add	r6, r6, #2
   1e838:	cmp	r4, r6
   1e83c:	beq	1e84c <__assert_fail@plt+0xcbb0>
   1e840:	ldr	r3, [r3, r6, lsl #2]
   1e844:	cmn	r3, #1
   1e848:	beq	1e29c <__assert_fail@plt+0xc600>
   1e84c:	ldrb	r3, [r7, #76]	; 0x4c
   1e850:	mov	r6, r2
   1e854:	cmp	r3, #0
   1e858:	beq	1e864 <__assert_fail@plt+0xcbc8>
   1e85c:	ldr	r6, [r7, #12]
   1e860:	ldr	r6, [r6, r2, lsl #2]
   1e864:	ldr	r4, [r7, #24]
   1e868:	ldr	ip, [r7]
   1e86c:	cmp	r3, #0
   1e870:	add	r6, r4, r6
   1e874:	add	r6, ip, r6
   1e878:	ldrsb	r6, [r6]
   1e87c:	beq	1e2a4 <__assert_fail@plt+0xc608>
   1e880:	cmn	r6, #1
   1e884:	ble	1e29c <__assert_fail@plt+0xc600>
   1e888:	b	1e2a4 <__assert_fail@plt+0xc608>
   1e88c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e890:	add	fp, sp, #28
   1e894:	sub	sp, sp, #28
   1e898:	mov	r7, r1
   1e89c:	mov	r1, r0
   1e8a0:	ldr	r4, [fp, #12]
   1e8a4:	ldr	r5, [fp, #8]
   1e8a8:	mov	r6, r2
   1e8ac:	str	r3, [sp, #16]
   1e8b0:	ldr	r0, [r7]
   1e8b4:	str	r1, [sp, #12]
   1e8b8:	str	r4, [sp, #4]
   1e8bc:	str	r5, [sp]
   1e8c0:	str	r0, [sp, #8]
   1e8c4:	mov	r0, r1
   1e8c8:	mov	r1, r7
   1e8cc:	bl	1eb18 <__assert_fail@plt+0xce7c>
   1e8d0:	cmp	r0, #0
   1e8d4:	bne	1e8e4 <__assert_fail@plt+0xcc48>
   1e8d8:	ldr	r1, [r4]
   1e8dc:	cmp	r1, #0
   1e8e0:	bne	1ea40 <__assert_fail@plt+0xcda4>
   1e8e4:	mov	r4, r0
   1e8e8:	ldrb	r0, [r6, #4]
   1e8ec:	orr	r1, r0, #8
   1e8f0:	cmp	r1, #10
   1e8f4:	beq	1ea44 <__assert_fail@plt+0xcda8>
   1e8f8:	cmp	r5, #0
   1e8fc:	beq	1e908 <__assert_fail@plt+0xcc6c>
   1e900:	cmp	r0, #9
   1e904:	beq	1ea44 <__assert_fail@plt+0xcda8>
   1e908:	ldr	r8, [fp, #12]
   1e90c:	ldr	r0, [sp, #12]
   1e910:	ldr	r3, [sp, #16]
   1e914:	mov	r1, r7
   1e918:	mov	r2, r6
   1e91c:	mov	r9, r5
   1e920:	str	r5, [sp]
   1e924:	str	r8, [sp, #4]
   1e928:	bl	1eb18 <__assert_fail@plt+0xce7c>
   1e92c:	mov	sl, r0
   1e930:	cmp	r0, #0
   1e934:	bne	1e944 <__assert_fail@plt+0xcca8>
   1e938:	ldr	r0, [r8]
   1e93c:	cmp	r0, #0
   1e940:	bne	1ea50 <__assert_fail@plt+0xcdb4>
   1e944:	cmp	r4, #0
   1e948:	cmpne	sl, #0
   1e94c:	bne	1e964 <__assert_fail@plt+0xccc8>
   1e950:	cmp	r4, #0
   1e954:	mov	r5, r9
   1e958:	movne	sl, r4
   1e95c:	mov	r0, sl
   1e960:	b	1e8e4 <__assert_fail@plt+0xcc48>
   1e964:	mov	r0, #16
   1e968:	mov	r1, r4
   1e96c:	mov	r2, sl
   1e970:	add	r3, sp, #20
   1e974:	str	r0, [sp, #24]
   1e978:	mov	r0, #0
   1e97c:	str	r0, [sp, #20]
   1e980:	ldr	r0, [sp, #8]
   1e984:	bl	2001c <__assert_fail@plt+0xe380>
   1e988:	cmp	r0, #0
   1e98c:	mov	r5, r9
   1e990:	bne	1e8e4 <__assert_fail@plt+0xcc48>
   1e994:	mov	r5, sl
   1e998:	ldr	sl, [sl, #4]
   1e99c:	cmp	sl, #0
   1e9a0:	bne	1e994 <__assert_fail@plt+0xccf8>
   1e9a4:	ldr	sl, [r5, #8]
   1e9a8:	cmp	sl, #0
   1e9ac:	bne	1e994 <__assert_fail@plt+0xccf8>
   1e9b0:	add	r0, r5, #20
   1e9b4:	bl	1d5e4 <__assert_fail@plt+0xb948>
   1e9b8:	ldr	r0, [r5]
   1e9bc:	cmp	r0, #0
   1e9c0:	beq	1e9e4 <__assert_fail@plt+0xcd48>
   1e9c4:	ldr	sl, [r0, #8]
   1e9c8:	cmp	sl, r5
   1e9cc:	mov	r5, r0
   1e9d0:	beq	1e9b0 <__assert_fail@plt+0xcd14>
   1e9d4:	cmp	sl, #0
   1e9d8:	mov	r5, r0
   1e9dc:	beq	1e9b0 <__assert_fail@plt+0xcd14>
   1e9e0:	b	1e994 <__assert_fail@plt+0xccf8>
   1e9e4:	mov	r5, r4
   1e9e8:	ldr	r4, [r4, #4]
   1e9ec:	cmp	r4, #0
   1e9f0:	bne	1e9e4 <__assert_fail@plt+0xcd48>
   1e9f4:	ldr	r4, [r5, #8]
   1e9f8:	cmp	r4, #0
   1e9fc:	bne	1e9e4 <__assert_fail@plt+0xcd48>
   1ea00:	add	r0, r5, #20
   1ea04:	bl	1d5e4 <__assert_fail@plt+0xb948>
   1ea08:	ldr	r0, [r5]
   1ea0c:	cmp	r0, #0
   1ea10:	beq	1ea34 <__assert_fail@plt+0xcd98>
   1ea14:	ldr	r4, [r0, #8]
   1ea18:	cmp	r4, r5
   1ea1c:	mov	r5, r0
   1ea20:	beq	1ea00 <__assert_fail@plt+0xcd64>
   1ea24:	cmp	r4, #0
   1ea28:	mov	r5, r0
   1ea2c:	beq	1ea00 <__assert_fail@plt+0xcd64>
   1ea30:	b	1e9e4 <__assert_fail@plt+0xcd48>
   1ea34:	ldr	r1, [fp, #12]
   1ea38:	mov	r0, #12
   1ea3c:	str	r0, [r1]
   1ea40:	mov	r4, #0
   1ea44:	mov	r0, r4
   1ea48:	sub	sp, fp, #28
   1ea4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea50:	cmp	r4, #0
   1ea54:	beq	1ea40 <__assert_fail@plt+0xcda4>
   1ea58:	mov	r5, r4
   1ea5c:	ldr	r4, [r4, #4]
   1ea60:	cmp	r4, #0
   1ea64:	bne	1ea58 <__assert_fail@plt+0xcdbc>
   1ea68:	ldr	r4, [r5, #8]
   1ea6c:	cmp	r4, #0
   1ea70:	bne	1ea58 <__assert_fail@plt+0xcdbc>
   1ea74:	add	r0, r5, #20
   1ea78:	bl	1d5e4 <__assert_fail@plt+0xb948>
   1ea7c:	ldr	r0, [r5]
   1ea80:	cmp	r0, #0
   1ea84:	beq	1ea40 <__assert_fail@plt+0xcda4>
   1ea88:	ldr	r4, [r0, #8]
   1ea8c:	cmp	r4, r5
   1ea90:	mov	r5, r0
   1ea94:	beq	1ea74 <__assert_fail@plt+0xcdd8>
   1ea98:	cmp	r4, #0
   1ea9c:	mov	r5, r0
   1eaa0:	beq	1ea74 <__assert_fail@plt+0xcdd8>
   1eaa4:	b	1ea58 <__assert_fail@plt+0xcdbc>
   1eaa8:	push	{r4, r5, r6, sl, fp, lr}
   1eaac:	add	fp, sp, #16
   1eab0:	mov	r4, r2
   1eab4:	mov	r5, r1
   1eab8:	mov	r6, r0
   1eabc:	ldr	r0, [r0, #4]
   1eac0:	cmp	r0, #0
   1eac4:	bne	1eab8 <__assert_fail@plt+0xce1c>
   1eac8:	ldr	r0, [r6, #8]
   1eacc:	cmp	r0, #0
   1ead0:	bne	1eab8 <__assert_fail@plt+0xce1c>
   1ead4:	mov	r0, r4
   1ead8:	mov	r1, r6
   1eadc:	blx	r5
   1eae0:	cmp	r0, #0
   1eae4:	bne	1eb14 <__assert_fail@plt+0xce78>
   1eae8:	ldr	r1, [r6]
   1eaec:	cmp	r1, #0
   1eaf0:	beq	1eb14 <__assert_fail@plt+0xce78>
   1eaf4:	ldr	r0, [r1, #8]
   1eaf8:	cmp	r0, r6
   1eafc:	mov	r6, r1
   1eb00:	beq	1ead4 <__assert_fail@plt+0xce38>
   1eb04:	cmp	r0, #0
   1eb08:	mov	r6, r1
   1eb0c:	beq	1ead4 <__assert_fail@plt+0xce38>
   1eb10:	b	1eab8 <__assert_fail@plt+0xce1c>
   1eb14:	pop	{r4, r5, r6, sl, fp, pc}
   1eb18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb1c:	add	fp, sp, #28
   1eb20:	sub	sp, sp, #140	; 0x8c
   1eb24:	mov	r5, r1
   1eb28:	mov	sl, r0
   1eb2c:	mov	r4, r2
   1eb30:	ldr	r0, [r2, #4]
   1eb34:	mvn	r1, #0
   1eb38:	mov	r8, #0
   1eb3c:	ldr	r2, [r5]
   1eb40:	uxtab	r1, r1, r0
   1eb44:	str	r2, [sp, #44]	; 0x2c
   1eb48:	ldr	r6, [fp, #12]
   1eb4c:	ldr	r7, [fp, #8]
   1eb50:	add	r2, pc, #12
   1eb54:	str	sl, [sp, #40]	; 0x28
   1eb58:	str	r3, [sp, #36]	; 0x24
   1eb5c:	str	r4, [sp, #20]
   1eb60:	ldr	pc, [r2, r1, lsl #2]
   1eb64:			; <UNDEFINED> instruction: 0x0001edbc
   1eb68:	andeq	pc, r1, ip, ror #25
   1eb6c:	andeq	r0, r2, ip, lsl r0
   1eb70:	andeq	lr, r1, r4, lsr #29
   1eb74:	andeq	lr, r1, r0, lsl #30
   1eb78:	andeq	r0, r2, ip, lsl r0
   1eb7c:	andeq	r0, r2, ip, lsl r0
   1eb80:	andeq	lr, r1, ip, asr #30
   1eb84:	andeq	lr, r1, r4, lsl #24
   1eb88:	andeq	pc, r1, ip, ror #25
   1eb8c:	strdeq	lr, [r1], -r4
   1eb90:	andeq	lr, r1, r4, asr #25
   1eb94:	andeq	r0, r2, ip, lsl r0
   1eb98:	andeq	r0, r2, ip, lsl r0
   1eb9c:	andeq	r0, r2, ip, lsl r0
   1eba0:	andeq	r0, r2, ip, lsl r0
   1eba4:	andeq	r0, r2, ip, lsl r0
   1eba8:	strdeq	lr, [r1], -r4
   1ebac:	strdeq	lr, [r1], -r4
   1ebb0:	andeq	lr, r1, r4, asr #26
   1ebb4:	andeq	r0, r2, ip, lsl r0
   1ebb8:	andeq	r0, r2, ip, lsl r0
   1ebbc:	andeq	pc, r1, ip, lsl r0	; <UNPREDICTABLE>
   1ebc0:	andeq	lr, r1, r4, lsl ip
   1ebc4:	andeq	r0, r2, ip, lsl r0
   1ebc8:	andeq	r0, r2, ip, lsl r0
   1ebcc:	andeq	r0, r2, ip, lsl r0
   1ebd0:	andeq	r0, r2, ip, lsl r0
   1ebd4:	andeq	r0, r2, ip, lsl r0
   1ebd8:	andeq	r0, r2, ip, lsl r0
   1ebdc:	andeq	r0, r2, ip, lsl r0
   1ebe0:	andeq	lr, r1, r0, asr ip
   1ebe4:	andeq	lr, r1, r0, asr ip
   1ebe8:	andeq	lr, r1, r0, ror ip
   1ebec:	andeq	lr, r1, r0, ror ip
   1ebf0:	andeq	pc, r1, ip, lsr #32
   1ebf4:	tst	r3, #32
   1ebf8:	bne	1f024 <__assert_fail@plt+0xd388>
   1ebfc:	tst	r3, #16
   1ec00:	bne	1f034 <__assert_fail@plt+0xd398>
   1ec04:	tst	r3, #131072	; 0x20000
   1ec08:	uxtbeq	r1, r0
   1ec0c:	cmpeq	r1, #9
   1ec10:	beq	1f070 <__assert_fail@plt+0xd3d4>
   1ec14:	mov	r1, #1
   1ec18:	mov	r2, #0
   1ec1c:	mov	r3, r4
   1ec20:	mov	r8, #0
   1ec24:	bfi	r0, r1, #0, #8
   1ec28:	mov	r1, #0
   1ec2c:	str	r0, [r4, #4]
   1ec30:	ldr	r0, [sp, #44]	; 0x2c
   1ec34:	bl	2001c <__assert_fail@plt+0xe380>
   1ec38:	ldr	r5, [sp, #20]
   1ec3c:	ldr	r2, [sp, #36]	; 0x24
   1ec40:	mov	r9, r0
   1ec44:	cmp	r0, #0
   1ec48:	bne	1f744 <__assert_fail@plt+0xdaa8>
   1ec4c:	b	1fe60 <__assert_fail@plt+0xe1c4>
   1ec50:	mvn	r2, #32
   1ec54:	ldr	r1, [sl, #64]	; 0x40
   1ec58:	movw	r3, #42620	; 0xa67c
   1ec5c:	uxtab	r0, r2, r0
   1ec60:	movw	r2, #42614	; 0xa676
   1ec64:	movt	r3, #2
   1ec68:	movt	r2, #2
   1ec6c:	b	1ec8c <__assert_fail@plt+0xcff0>
   1ec70:	mvn	r2, #34	; 0x22
   1ec74:	ldr	r1, [sl, #64]	; 0x40
   1ec78:	movw	r3, #39327	; 0x999f
   1ec7c:	uxtab	r0, r2, r0
   1ec80:	movw	r2, #42622	; 0xa67e
   1ec84:	movt	r3, #2
   1ec88:	movt	r2, #2
   1ec8c:	clz	r0, r0
   1ec90:	lsr	r0, r0, #5
   1ec94:	stm	sp, {r0, r6}
   1ec98:	ldr	r0, [sp, #44]	; 0x2c
   1ec9c:	bl	200c4 <__assert_fail@plt+0xe428>
   1eca0:	mov	r9, r0
   1eca4:	cmp	r0, #0
   1eca8:	bne	1ef40 <__assert_fail@plt+0xd2a4>
   1ecac:	ldr	r0, [r6]
   1ecb0:	ldr	r2, [sp, #36]	; 0x24
   1ecb4:	ldr	r5, [sp, #20]
   1ecb8:	cmp	r0, #0
   1ecbc:	beq	1f744 <__assert_fail@plt+0xdaa8>
   1ecc0:	b	1fcec <__assert_fail@plt+0xe050>
   1ecc4:	ldr	r0, [r4]
   1ecc8:	movw	r1, #783	; 0x30f
   1eccc:	tst	r0, r1
   1ecd0:	beq	1ed20 <__assert_fail@plt+0xd084>
   1ecd4:	ldr	r0, [sp, #44]	; 0x2c
   1ecd8:	ldrb	r0, [r0, #88]	; 0x58
   1ecdc:	tst	r0, #16
   1ece0:	bne	1ed1c <__assert_fail@plt+0xd080>
   1ece4:	ldr	r2, [sp, #44]	; 0x2c
   1ece8:	orr	r1, r0, #16
   1ecec:	tst	r0, #8
   1ecf0:	strb	r1, [r2, #88]	; 0x58
   1ecf4:	bne	1fec0 <__assert_fail@plt+0xe224>
   1ecf8:	add	r1, pc, #896	; 0x380
   1ecfc:	tst	r0, #4
   1ed00:	vld1.64	{d16-d17}, [r1]
   1ed04:	add	r1, r2, #96	; 0x60
   1ed08:	vst1.32	{d16-d17}, [r1]
   1ed0c:	beq	1fed0 <__assert_fail@plt+0xe234>
   1ed10:	vmov.i32	q8, #0	; 0x00000000
   1ed14:	add	r0, r2, #112	; 0x70
   1ed18:	vst1.32	{d16-d17}, [r0]
   1ed1c:	ldr	r0, [r4]
   1ed20:	mov	r9, r6
   1ed24:	ldr	r6, [sp, #44]	; 0x2c
   1ed28:	cmp	r0, #256	; 0x100
   1ed2c:	beq	1fcf8 <__assert_fail@plt+0xe05c>
   1ed30:	cmp	r0, #512	; 0x200
   1ed34:	bne	1fd74 <__assert_fail@plt+0xe0d8>
   1ed38:	mov	r5, #10
   1ed3c:	mov	r0, #5
   1ed40:	b	1fd00 <__assert_fail@plt+0xe064>
   1ed44:	mov	r0, #0
   1ed48:	mov	r1, #1
   1ed4c:	str	r6, [sp, #16]
   1ed50:	mov	r9, #0
   1ed54:	str	r0, [fp, #-32]	; 0xffffffe0
   1ed58:	mov	r0, #32
   1ed5c:	bl	19ea4 <__assert_fail@plt+0x8208>
   1ed60:	mov	r4, r0
   1ed64:	mov	r0, #40	; 0x28
   1ed68:	mov	r1, #1
   1ed6c:	bl	19ea4 <__assert_fail@plt+0x8208>
   1ed70:	mov	r8, r0
   1ed74:	cmp	r4, #0
   1ed78:	cmpne	r8, #0
   1ed7c:	beq	1fe80 <__assert_fail@plt+0xe1e4>
   1ed80:	ldr	r6, [sp, #20]
   1ed84:	ldr	r5, [sp, #36]	; 0x24
   1ed88:	mov	r1, sl
   1ed8c:	mov	r0, r6
   1ed90:	mov	r2, r5
   1ed94:	bl	202f0 <__assert_fail@plt+0xe654>
   1ed98:	mov	r3, r0
   1ed9c:	ldr	r0, [r6, #4]
   1eda0:	uxtb	r1, r0
   1eda4:	cmp	r1, #25
   1eda8:	beq	1f090 <__assert_fail@plt+0xd3f4>
   1edac:	cmp	r1, #2
   1edb0:	beq	1fe78 <__assert_fail@plt+0xe1dc>
   1edb4:	mov	r9, #0
   1edb8:	b	1f0e8 <__assert_fail@plt+0xd44c>
   1edbc:	ldr	r5, [sp, #44]	; 0x2c
   1edc0:	mov	r1, #0
   1edc4:	mov	r2, #0
   1edc8:	mov	r3, r4
   1edcc:	mov	r8, #0
   1edd0:	mov	r0, r5
   1edd4:	bl	2001c <__assert_fail@plt+0xe380>
   1edd8:	cmp	r0, #0
   1eddc:	beq	1fe60 <__assert_fail@plt+0xe1c4>
   1ede0:	mov	r9, r0
   1ede4:	ldr	r0, [r5, #92]	; 0x5c
   1ede8:	cmp	r0, #2
   1edec:	blt	1ef40 <__assert_fail@plt+0xd2a4>
   1edf0:	mov	r7, #16
   1edf4:	sub	r4, fp, #80	; 0x50
   1edf8:	ldr	r0, [sl, #40]	; 0x28
   1edfc:	ldr	r1, [sl, #56]	; 0x38
   1ee00:	cmp	r1, r0
   1ee04:	ble	1ef40 <__assert_fail@plt+0xd2a4>
   1ee08:	ldr	r1, [sl, #28]
   1ee0c:	ldr	r2, [sp, #36]	; 0x24
   1ee10:	ldr	r5, [sp, #20]
   1ee14:	cmp	r0, r1
   1ee18:	beq	1f744 <__assert_fail@plt+0xdaa8>
   1ee1c:	ldr	r1, [sl, #8]
   1ee20:	ldr	r0, [r1, r0, lsl #2]
   1ee24:	cmn	r0, #1
   1ee28:	bne	1f744 <__assert_fail@plt+0xdaa8>
   1ee2c:	mov	r0, r5
   1ee30:	mov	r1, sl
   1ee34:	bl	1e1fc <__assert_fail@plt+0xc560>
   1ee38:	ldr	r1, [sl, #40]	; 0x28
   1ee3c:	mov	r8, r6
   1ee40:	ldr	r6, [sp, #44]	; 0x2c
   1ee44:	mov	r2, #0
   1ee48:	mov	r3, r5
   1ee4c:	add	r0, r1, r0
   1ee50:	mov	r1, #0
   1ee54:	str	r0, [sl, #40]	; 0x28
   1ee58:	mov	r0, r6
   1ee5c:	bl	2001c <__assert_fail@plt+0xe380>
   1ee60:	mov	r5, r0
   1ee64:	mov	r0, #0
   1ee68:	str	r7, [fp, #-76]	; 0xffffffb4
   1ee6c:	mov	r1, r9
   1ee70:	mov	r3, r4
   1ee74:	str	r0, [fp, #-80]	; 0xffffffb0
   1ee78:	mov	r0, r6
   1ee7c:	mov	r2, r5
   1ee80:	mov	r6, r8
   1ee84:	bl	2001c <__assert_fail@plt+0xe380>
   1ee88:	cmp	r5, #0
   1ee8c:	movne	r9, r0
   1ee90:	cmpne	r0, #0
   1ee94:	bne	1edf8 <__assert_fail@plt+0xd15c>
   1ee98:	mov	r0, #12
   1ee9c:	str	r0, [r6]
   1eea0:	b	1fce8 <__assert_fail@plt+0xe04c>
   1eea4:	ldr	r5, [sp, #44]	; 0x2c
   1eea8:	ldr	r0, [r4]
   1eeac:	mov	r1, #1
   1eeb0:	ldr	r2, [r5, #84]	; 0x54
   1eeb4:	tst	r2, r1, lsl r0
   1eeb8:	beq	1fea0 <__assert_fail@plt+0xe204>
   1eebc:	lsl	r0, r1, r0
   1eec0:	ldr	r1, [r5, #80]	; 0x50
   1eec4:	mov	r2, #0
   1eec8:	mov	r3, r4
   1eecc:	mov	r8, #0
   1eed0:	orr	r0, r1, r0
   1eed4:	mov	r1, #0
   1eed8:	str	r0, [r5, #80]	; 0x50
   1eedc:	mov	r0, r5
   1eee0:	bl	2001c <__assert_fail@plt+0xe380>
   1eee4:	cmp	r0, #0
   1eee8:	beq	1fe60 <__assert_fail@plt+0xe1c4>
   1eeec:	mov	r9, r0
   1eef0:	ldr	r0, [r5, #76]	; 0x4c
   1eef4:	add	r0, r0, #1
   1eef8:	str	r0, [r5, #76]	; 0x4c
   1eefc:	b	1ef34 <__assert_fail@plt+0xd298>
   1ef00:	ldr	r5, [sp, #44]	; 0x2c
   1ef04:	mov	r1, #0
   1ef08:	mov	r2, #0
   1ef0c:	mov	r3, r4
   1ef10:	mov	r8, #0
   1ef14:	mov	r0, r5
   1ef18:	bl	2001c <__assert_fail@plt+0xe380>
   1ef1c:	cmp	r0, #0
   1ef20:	beq	1fe60 <__assert_fail@plt+0xe1c4>
   1ef24:	mov	r9, r0
   1ef28:	ldr	r0, [r5, #92]	; 0x5c
   1ef2c:	cmp	r0, #2
   1ef30:	blt	1ef40 <__assert_fail@plt+0xd2a4>
   1ef34:	ldrb	r0, [r5, #88]	; 0x58
   1ef38:	orr	r0, r0, #2
   1ef3c:	strb	r0, [r5, #88]	; 0x58
   1ef40:	ldr	r2, [sp, #36]	; 0x24
   1ef44:	ldr	r5, [sp, #20]
   1ef48:	b	1f744 <__assert_fail@plt+0xdaa8>
   1ef4c:	str	r6, [sp, #16]
   1ef50:	ldr	r6, [r5, #24]
   1ef54:	orr	r2, r3, #8388608	; 0x800000
   1ef58:	mov	r1, sl
   1ef5c:	add	r0, r6, #1
   1ef60:	str	r0, [r5, #24]
   1ef64:	mov	r0, r4
   1ef68:	bl	1e1fc <__assert_fail@plt+0xc560>
   1ef6c:	ldr	r1, [sl, #40]	; 0x28
   1ef70:	ldr	r2, [sp, #20]
   1ef74:	add	r0, r1, r0
   1ef78:	mov	r1, #0
   1ef7c:	str	r0, [sl, #40]	; 0x28
   1ef80:	ldrb	r0, [r2, #4]
   1ef84:	cmp	r0, #9
   1ef88:	beq	1efd0 <__assert_fail@plt+0xd334>
   1ef8c:	add	r0, r7, #1
   1ef90:	mov	r1, r5
   1ef94:	mov	r4, r2
   1ef98:	str	r0, [sp]
   1ef9c:	mov	r0, sl
   1efa0:	ldr	r7, [sp, #16]
   1efa4:	str	r7, [sp, #4]
   1efa8:	ldr	r3, [sp, #36]	; 0x24
   1efac:	bl	1e04c <__assert_fail@plt+0xc3b0>
   1efb0:	mov	r1, r0
   1efb4:	ldr	r0, [r7]
   1efb8:	mov	r8, #0
   1efbc:	cmp	r0, #0
   1efc0:	bne	1fcec <__assert_fail@plt+0xe050>
   1efc4:	ldrb	r0, [r4, #4]
   1efc8:	cmp	r0, #9
   1efcc:	bne	1ff60 <__assert_fail@plt+0xe2c4>
   1efd0:	ldr	r0, [sp, #44]	; 0x2c
   1efd4:	cmp	r6, #8
   1efd8:	bhi	1efec <__assert_fail@plt+0xd350>
   1efdc:	ldr	r3, [r0, #84]	; 0x54
   1efe0:	mov	r2, #1
   1efe4:	orr	r2, r3, r2, lsl r6
   1efe8:	str	r2, [r0, #84]	; 0x54
   1efec:	mov	r2, #17
   1eff0:	mov	r8, #0
   1eff4:	sub	r3, fp, #80	; 0x50
   1eff8:	str	r2, [fp, #-76]	; 0xffffffb4
   1effc:	mov	r2, #0
   1f000:	str	r8, [fp, #-80]	; 0xffffffb0
   1f004:	bl	2001c <__assert_fail@plt+0xe380>
   1f008:	cmp	r0, #0
   1f00c:	beq	1feb0 <__assert_fail@plt+0xe214>
   1f010:	mov	r9, r0
   1f014:	str	r6, [r0, #20]
   1f018:	b	1f738 <__assert_fail@plt+0xda9c>
   1f01c:	tst	r3, #16777216	; 0x1000000
   1f020:	beq	1ebf4 <__assert_fail@plt+0xcf58>
   1f024:	mov	r0, #13
   1f028:	b	1f074 <__assert_fail@plt+0xd3d8>
   1f02c:	mov	r0, #5
   1f030:	b	1f074 <__assert_fail@plt+0xd3d8>
   1f034:	mov	r0, r4
   1f038:	mov	r1, sl
   1f03c:	mov	r2, r3
   1f040:	mov	r6, r3
   1f044:	bl	1e1fc <__assert_fail@plt+0xc560>
   1f048:	ldr	r1, [sl, #40]	; 0x28
   1f04c:	mov	r2, r4
   1f050:	mov	r3, r6
   1f054:	add	r0, r1, r0
   1f058:	mov	r1, r5
   1f05c:	str	r0, [sl, #40]	; 0x28
   1f060:	mov	r0, sl
   1f064:	sub	sp, fp, #28
   1f068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f06c:	b	1eb18 <__assert_fail@plt+0xce7c>
   1f070:	mov	r0, #16
   1f074:	str	r0, [r6]
   1f078:	b	1fcec <__assert_fail@plt+0xe050>
   1f07c:	nop	{0}
   1f080:	andeq	r0, r0, r0
   1f084:	mvnseq	r0, #0
   1f088:			; <UNDEFINED> instruction: 0x87fffffe
   1f08c:			; <UNDEFINED> instruction: 0x07fffffe
   1f090:	ldrb	r0, [r8, #16]
   1f094:	tst	r5, #256	; 0x100
   1f098:	orr	r0, r0, #1
   1f09c:	strb	r0, [r8, #16]
   1f0a0:	beq	1f0b0 <__assert_fail@plt+0xd414>
   1f0a4:	ldr	r0, [r4]
   1f0a8:	orr	r0, r0, #1024	; 0x400
   1f0ac:	str	r0, [r4]
   1f0b0:	ldr	r0, [sl, #40]	; 0x28
   1f0b4:	ldr	r2, [sp, #36]	; 0x24
   1f0b8:	mov	r1, sl
   1f0bc:	add	r0, r0, r3
   1f0c0:	str	r0, [sl, #40]	; 0x28
   1f0c4:	mov	r0, r6
   1f0c8:	bl	202f0 <__assert_fail@plt+0xe654>
   1f0cc:	ldr	r6, [sp, #20]
   1f0d0:	mov	r3, r0
   1f0d4:	ldr	r0, [r6, #4]
   1f0d8:	uxtb	r1, r0
   1f0dc:	cmp	r1, #2
   1f0e0:	beq	1fe78 <__assert_fail@plt+0xe1dc>
   1f0e4:	mov	r9, #1
   1f0e8:	uxtb	r1, r0
   1f0ec:	str	r8, [sp, #32]
   1f0f0:	mov	r2, r6
   1f0f4:	ldr	r5, [sp, #36]	; 0x24
   1f0f8:	cmp	r1, #21
   1f0fc:	moveq	r1, #1
   1f100:	bfieq	r0, r1, #0, #8
   1f104:	mov	r1, sl
   1f108:	streq	r0, [r6, #4]
   1f10c:	sub	r0, fp, #80	; 0x50
   1f110:	str	r0, [fp, #-36]	; 0xffffffdc
   1f114:	mov	r0, #3
   1f118:	str	r0, [fp, #-40]	; 0xffffffd8
   1f11c:	mov	r0, #1
   1f120:	str	r5, [sp]
   1f124:	str	r0, [sp, #4]
   1f128:	sub	r0, fp, #40	; 0x28
   1f12c:	bl	20458 <__assert_fail@plt+0xe7bc>
   1f130:	cmp	r0, #0
   1f134:	bne	1fe68 <__assert_fail@plt+0xe1cc>
   1f138:	and	r0, r5, #65536	; 0x10000
   1f13c:	mov	r2, r5
   1f140:	str	r0, [sp, #24]
   1f144:	mov	r0, #0
   1f148:	str	r0, [sp, #12]
   1f14c:	mov	r0, #0
   1f150:	str	r0, [sp, #8]
   1f154:	ldr	r5, [sp, #20]
   1f158:	mov	r0, r5
   1f15c:	mov	r1, sl
   1f160:	bl	202f0 <__assert_fail@plt+0xe654>
   1f164:	ldr	r7, [fp, #-40]	; 0xffffffd8
   1f168:	ldr	r6, [sp, #16]
   1f16c:	mov	r8, r0
   1f170:	cmp	r7, #2
   1f174:	beq	1f2f4 <__assert_fail@plt+0xd658>
   1f178:	cmp	r7, #4
   1f17c:	bne	1f1b8 <__assert_fail@plt+0xd51c>
   1f180:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1f184:	ldr	r0, [sl, #64]	; 0x40
   1f188:	sub	r3, fp, #32
   1f18c:	str	r1, [sp]
   1f190:	ldr	r1, [sp, #36]	; 0x24
   1f194:	str	r1, [sp, #4]
   1f198:	mov	r1, r4
   1f19c:	ldr	r2, [sp, #32]
   1f1a0:	bl	2071c <__assert_fail@plt+0xea80>
   1f1a4:	ldr	r2, [sp, #20]
   1f1a8:	cmp	r0, #0
   1f1ac:	str	r0, [r6]
   1f1b0:	beq	1f330 <__assert_fail@plt+0xd694>
   1f1b4:	b	1ffd4 <__assert_fail@plt+0xe338>
   1f1b8:	ldr	r0, [sp, #20]
   1f1bc:	mov	r6, #7
   1f1c0:	str	r9, [sp, #28]
   1f1c4:	ldrb	r0, [r0, #4]
   1f1c8:	cmp	r0, #22
   1f1cc:	beq	1f1dc <__assert_fail@plt+0xd540>
   1f1d0:	cmp	r0, #2
   1f1d4:	bne	1f2d4 <__assert_fail@plt+0xd638>
   1f1d8:	b	1ffcc <__assert_fail@plt+0xe330>
   1f1dc:	ldr	r0, [sl, #40]	; 0x28
   1f1e0:	ldr	r2, [sp, #36]	; 0x24
   1f1e4:	mov	r1, sl
   1f1e8:	add	r0, r0, r8
   1f1ec:	str	r0, [sl, #40]	; 0x28
   1f1f0:	add	r0, sp, #48	; 0x30
   1f1f4:	bl	202f0 <__assert_fail@plt+0xe654>
   1f1f8:	mov	r3, r0
   1f1fc:	ldrb	r0, [sp, #52]	; 0x34
   1f200:	cmp	r0, #21
   1f204:	beq	1f2bc <__assert_fail@plt+0xd620>
   1f208:	cmp	r0, #2
   1f20c:	beq	1ffcc <__assert_fail@plt+0xe330>
   1f210:	mov	r0, #3
   1f214:	ldr	r5, [sp, #36]	; 0x24
   1f218:	mov	r1, sl
   1f21c:	add	r2, sp, #48	; 0x30
   1f220:	str	r0, [fp, #-48]	; 0xffffffd0
   1f224:	add	r0, sp, #56	; 0x38
   1f228:	str	r0, [fp, #-44]	; 0xffffffd4
   1f22c:	mov	r0, #1
   1f230:	str	r0, [sp, #4]
   1f234:	sub	r0, fp, #48	; 0x30
   1f238:	str	r5, [sp]
   1f23c:	bl	20458 <__assert_fail@plt+0xe7bc>
   1f240:	cmp	r0, #0
   1f244:	bne	1fe68 <__assert_fail@plt+0xe1cc>
   1f248:	ldr	r0, [sp, #20]
   1f24c:	mov	r1, sl
   1f250:	mov	r2, r5
   1f254:	bl	202f0 <__assert_fail@plt+0xe654>
   1f258:	ldr	sl, [fp, #-48]	; 0xffffffd0
   1f25c:	mov	r6, #11
   1f260:	cmp	sl, #2
   1f264:	cmpne	sl, #4
   1f268:	beq	1ffc8 <__assert_fail@plt+0xe32c>
   1f26c:	mov	r8, r0
   1f270:	cmp	r7, #3
   1f274:	bne	1f288 <__assert_fail@plt+0xd5ec>
   1f278:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1f27c:	bl	11a98 <strlen@plt>
   1f280:	cmp	r0, #1
   1f284:	bhi	1ffc4 <__assert_fail@plt+0xe328>
   1f288:	cmp	sl, #3
   1f28c:	bne	1f2a0 <__assert_fail@plt+0xd604>
   1f290:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1f294:	bl	11a98 <strlen@plt>
   1f298:	cmp	r0, #1
   1f29c:	bhi	1ffc4 <__assert_fail@plt+0xe328>
   1f2a0:	ldr	r2, [sp, #20]
   1f2a4:	cmp	r7, #3
   1f2a8:	beq	1f3e4 <__assert_fail@plt+0xd748>
   1f2ac:	cmp	r7, #0
   1f2b0:	mov	r5, #0
   1f2b4:	ldrbeq	r5, [fp, #-36]	; 0xffffffdc
   1f2b8:	b	1f3ec <__assert_fail@plt+0xd750>
   1f2bc:	ldr	r0, [sl, #40]	; 0x28
   1f2c0:	mov	r1, #1
   1f2c4:	sub	r0, r0, r8
   1f2c8:	str	r0, [sl, #40]	; 0x28
   1f2cc:	ldr	r0, [sp, #20]
   1f2d0:	strb	r1, [r0, #4]
   1f2d4:	add	r0, pc, #8
   1f2d8:	ldr	r6, [sp, #16]
   1f2dc:	ldr	r9, [sp, #28]
   1f2e0:	ldr	pc, [r0, r7, lsl #2]
   1f2e4:	andeq	pc, r1, r8, lsl #7
   1f2e8:	andeq	pc, r1, ip, lsr #7
   1f2ec:	strdeq	pc, [r1], -r4
   1f2f0:	strdeq	pc, [r1], -r4
   1f2f4:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1f2f8:	mov	r0, r5
   1f2fc:	bl	11a98 <strlen@plt>
   1f300:	cmp	r0, #1
   1f304:	bne	1fea8 <__assert_fail@plt+0xe20c>
   1f308:	ldrb	r0, [r5]
   1f30c:	mov	r3, #1
   1f310:	ubfx	r1, r0, #5, #3
   1f314:	and	r0, r0, #31
   1f318:	ldr	r2, [r4, r1, lsl #2]
   1f31c:	orr	r0, r2, r3, lsl r0
   1f320:	str	r0, [r4, r1, lsl #2]
   1f324:	mov	r0, #0
   1f328:	ldr	r2, [sp, #20]
   1f32c:	str	r0, [r6]
   1f330:	ldrb	r0, [r2, #4]
   1f334:	cmp	r0, #21
   1f338:	beq	1f5b8 <__assert_fail@plt+0xd91c>
   1f33c:	cmp	r0, #2
   1f340:	ldr	r0, [sp, #36]	; 0x24
   1f344:	beq	1fe70 <__assert_fail@plt+0xe1d4>
   1f348:	sub	r1, fp, #80	; 0x50
   1f34c:	mov	r3, r8
   1f350:	mov	r5, r2
   1f354:	str	r1, [fp, #-36]	; 0xffffffdc
   1f358:	mov	r1, #3
   1f35c:	str	r1, [fp, #-40]	; 0xffffffd8
   1f360:	str	r0, [sp]
   1f364:	mov	r0, #0
   1f368:	mov	r1, sl
   1f36c:	str	r0, [sp, #4]
   1f370:	sub	r0, fp, #40	; 0x28
   1f374:	bl	20458 <__assert_fail@plt+0xe7bc>
   1f378:	ldr	r2, [sp, #36]	; 0x24
   1f37c:	cmp	r0, #0
   1f380:	beq	1f158 <__assert_fail@plt+0xd4bc>
   1f384:	b	1fe68 <__assert_fail@plt+0xe1cc>
   1f388:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   1f38c:	mov	r3, #1
   1f390:	ubfx	r1, r0, #5, #3
   1f394:	and	r0, r0, #31
   1f398:	ldr	r2, [r4, r1, lsl #2]
   1f39c:	orr	r0, r2, r3, lsl r0
   1f3a0:	ldr	r2, [sp, #20]
   1f3a4:	str	r0, [r4, r1, lsl #2]
   1f3a8:	b	1f330 <__assert_fail@plt+0xd694>
   1f3ac:	ldr	r6, [sp, #32]
   1f3b0:	ldr	r0, [sp, #12]
   1f3b4:	mov	r5, r9
   1f3b8:	ldr	r1, [r6, #20]
   1f3bc:	cmp	r0, r1
   1f3c0:	beq	1f520 <__assert_fail@plt+0xd884>
   1f3c4:	ldr	r0, [r6]
   1f3c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1f3cc:	ldr	r2, [sp, #20]
   1f3d0:	add	r7, r1, #1
   1f3d4:	mov	r9, r5
   1f3d8:	str	r7, [r6, #20]
   1f3dc:	str	r3, [r0, r1, lsl #2]
   1f3e0:	b	1f330 <__assert_fail@plt+0xd694>
   1f3e4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1f3e8:	ldrb	r5, [r0]
   1f3ec:	cmp	sl, #3
   1f3f0:	beq	1f404 <__assert_fail@plt+0xd768>
   1f3f4:	cmp	sl, #0
   1f3f8:	mov	r9, #0
   1f3fc:	ldrbeq	r9, [fp, #-44]	; 0xffffffd4
   1f400:	b	1f40c <__assert_fail@plt+0xd770>
   1f404:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1f408:	ldrb	r9, [r0]
   1f40c:	cmp	r7, #3
   1f410:	cmpne	r7, #0
   1f414:	bne	1f43c <__assert_fail@plt+0xd7a0>
   1f418:	ldr	r6, [sp, #44]	; 0x2c
   1f41c:	ldr	r0, [r6, #92]	; 0x5c
   1f420:	cmp	r0, #2
   1f424:	blt	1f444 <__assert_fail@plt+0xd7a8>
   1f428:	mov	r0, r5
   1f42c:	bl	11b1c <btowc@plt>
   1f430:	ldr	r2, [sp, #20]
   1f434:	mov	r5, r0
   1f438:	b	1f444 <__assert_fail@plt+0xd7a8>
   1f43c:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1f440:	ldr	r6, [sp, #44]	; 0x2c
   1f444:	cmp	sl, #3
   1f448:	cmpne	sl, #0
   1f44c:	bne	1f470 <__assert_fail@plt+0xd7d4>
   1f450:	ldr	r0, [r6, #92]	; 0x5c
   1f454:	cmp	r0, #2
   1f458:	blt	1f474 <__assert_fail@plt+0xd7d8>
   1f45c:	mov	r0, r9
   1f460:	bl	11b1c <btowc@plt>
   1f464:	ldr	r2, [sp, #20]
   1f468:	mov	r9, r0
   1f46c:	b	1f474 <__assert_fail@plt+0xd7d8>
   1f470:	ldr	r9, [fp, #-44]	; 0xffffffd4
   1f474:	ldr	sl, [sp, #40]	; 0x28
   1f478:	cmn	r5, #1
   1f47c:	mov	r6, #3
   1f480:	cmnne	r9, #1
   1f484:	beq	1ffcc <__assert_fail@plt+0xe330>
   1f488:	ldr	r0, [sp, #24]
   1f48c:	cmp	r0, #0
   1f490:	beq	1f4a0 <__assert_fail@plt+0xd804>
   1f494:	cmp	r5, r9
   1f498:	mov	r6, #11
   1f49c:	bhi	1ffcc <__assert_fail@plt+0xe330>
   1f4a0:	ldr	r0, [sp, #44]	; 0x2c
   1f4a4:	ldr	r0, [r0, #92]	; 0x5c
   1f4a8:	cmp	r0, #2
   1f4ac:	blt	1f4dc <__assert_fail@plt+0xd840>
   1f4b0:	ldr	r7, [sp, #32]
   1f4b4:	ldr	r1, [sp, #8]
   1f4b8:	ldr	r0, [r7, #32]
   1f4bc:	cmp	r1, r0
   1f4c0:	beq	1f558 <__assert_fail@plt+0xd8bc>
   1f4c4:	ldmib	r7, {r1, r6}
   1f4c8:	str	r5, [r1, r0, lsl #2]
   1f4cc:	ldr	r0, [r7, #32]
   1f4d0:	add	r1, r0, #1
   1f4d4:	str	r1, [r7, #32]
   1f4d8:	str	r9, [r6, r0, lsl #2]
   1f4dc:	mov	r0, #0
   1f4e0:	mov	r6, #1
   1f4e4:	cmp	r5, r0
   1f4e8:	cmpls	r0, r9
   1f4ec:	bhi	1f504 <__assert_fail@plt+0xd868>
   1f4f0:	ubfx	r1, r0, #5, #3
   1f4f4:	and	r3, r0, #31
   1f4f8:	ldr	r7, [r4, r1, lsl #2]
   1f4fc:	orr	r3, r7, r6, lsl r3
   1f500:	str	r3, [r4, r1, lsl #2]
   1f504:	add	r0, r0, #1
   1f508:	cmp	r0, #256	; 0x100
   1f50c:	bne	1f4e4 <__assert_fail@plt+0xd848>
   1f510:	ldr	r6, [sp, #16]
   1f514:	ldr	r9, [sp, #28]
   1f518:	mov	r0, #0
   1f51c:	b	1f32c <__assert_fail@plt+0xd690>
   1f520:	ldr	r1, [sp, #12]
   1f524:	mov	r0, #1
   1f528:	orr	r1, r0, r1, lsl #1
   1f52c:	ldr	r0, [r6]
   1f530:	str	r1, [sp, #12]
   1f534:	lsl	r1, r1, #2
   1f538:	bl	1a28c <__assert_fail@plt+0x85f0>
   1f53c:	cmp	r0, #0
   1f540:	beq	1fff0 <__assert_fail@plt+0xe354>
   1f544:	ldr	r6, [sp, #32]
   1f548:	ldr	sl, [sp, #40]	; 0x28
   1f54c:	str	r0, [r6]
   1f550:	ldr	r1, [r6, #20]
   1f554:	b	1f3c8 <__assert_fail@plt+0xd72c>
   1f558:	ldr	r1, [sp, #8]
   1f55c:	mov	r0, #1
   1f560:	orr	r1, r0, r1, lsl #1
   1f564:	ldr	r0, [r7, #4]
   1f568:	lsl	r6, r1, #2
   1f56c:	str	r1, [sp, #8]
   1f570:	mov	r1, r6
   1f574:	bl	1a28c <__assert_fail@plt+0x85f0>
   1f578:	mov	sl, r0
   1f57c:	ldr	r0, [r7, #8]
   1f580:	mov	r1, r6
   1f584:	bl	1a28c <__assert_fail@plt+0x85f0>
   1f588:	mov	r6, r0
   1f58c:	cmp	sl, #0
   1f590:	mov	r0, sl
   1f594:	cmpne	r6, #0
   1f598:	beq	20008 <__assert_fail@plt+0xe36c>
   1f59c:	ldr	r7, [sp, #32]
   1f5a0:	mov	r1, r0
   1f5a4:	stmib	r7, {r0, r6}
   1f5a8:	ldr	r0, [r7, #32]
   1f5ac:	ldr	sl, [sp, #40]	; 0x28
   1f5b0:	ldr	r2, [sp, #20]
   1f5b4:	b	1f4c8 <__assert_fail@plt+0xd82c>
   1f5b8:	ldr	r0, [sl, #40]	; 0x28
   1f5bc:	ldr	r2, [sp, #44]	; 0x2c
   1f5c0:	cmp	r9, #0
   1f5c4:	add	r0, r0, r8
   1f5c8:	str	r0, [sl, #40]	; 0x28
   1f5cc:	beq	1f5f0 <__assert_fail@plt+0xd954>
   1f5d0:	mov	r0, #0
   1f5d4:	add	r1, r4, r0
   1f5d8:	add	r0, r0, #16
   1f5dc:	vld1.32	{d16-d17}, [r1]
   1f5e0:	cmp	r0, #32
   1f5e4:	vmvn	q8, q8
   1f5e8:	vst1.32	{d16-d17}, [r1]
   1f5ec:	bne	1f5d4 <__assert_fail@plt+0xd938>
   1f5f0:	ldr	r0, [r2, #92]	; 0x5c
   1f5f4:	ldr	r8, [sp, #32]
   1f5f8:	cmp	r0, #2
   1f5fc:	blt	1f628 <__assert_fail@plt+0xd98c>
   1f600:	ldr	r1, [sp, #44]	; 0x2c
   1f604:	mov	r2, #0
   1f608:	ldr	r1, [r1, #60]	; 0x3c
   1f60c:	ldr	r3, [r1, r2, lsl #2]
   1f610:	ldr	r7, [r4, r2, lsl #2]
   1f614:	and	r3, r7, r3
   1f618:	str	r3, [r4, r2, lsl #2]
   1f61c:	add	r2, r2, #1
   1f620:	cmp	r2, #8
   1f624:	bne	1f60c <__assert_fail@plt+0xd970>
   1f628:	ldr	r1, [r8, #20]
   1f62c:	cmp	r1, #0
   1f630:	bne	1f658 <__assert_fail@plt+0xd9bc>
   1f634:	ldr	r1, [r8, #24]
   1f638:	cmp	r1, #0
   1f63c:	bne	1f658 <__assert_fail@plt+0xd9bc>
   1f640:	ldr	r1, [r8, #28]
   1f644:	cmp	r1, #0
   1f648:	bne	1f658 <__assert_fail@plt+0xd9bc>
   1f64c:	ldr	r1, [r8, #32]
   1f650:	cmp	r1, #0
   1f654:	beq	1fe18 <__assert_fail@plt+0xe17c>
   1f658:	ldr	r6, [sp, #44]	; 0x2c
   1f65c:	add	r3, sp, #56	; 0x38
   1f660:	mov	r1, #0
   1f664:	mov	r2, #0
   1f668:	mov	r5, #0
   1f66c:	ldrb	r0, [r6, #88]	; 0x58
   1f670:	orr	r0, r0, #2
   1f674:	strb	r0, [r6, #88]	; 0x58
   1f678:	mov	r0, #6
   1f67c:	str	r8, [sp, #56]	; 0x38
   1f680:	str	r0, [sp, #60]	; 0x3c
   1f684:	mov	r0, r6
   1f688:	bl	2001c <__assert_fail@plt+0xe380>
   1f68c:	cmp	r0, #0
   1f690:	beq	1fff8 <__assert_fail@plt+0xe35c>
   1f694:	mov	r9, r0
   1f698:	ldr	r0, [r4, r5, lsl #2]
   1f69c:	cmp	r0, #0
   1f6a0:	bne	1f6bc <__assert_fail@plt+0xda20>
   1f6a4:	add	r5, r5, #1
   1f6a8:	cmp	r5, #8
   1f6ac:	bne	1f698 <__assert_fail@plt+0xd9fc>
   1f6b0:	mov	r0, r4
   1f6b4:	bl	1a12c <__assert_fail@plt+0x8490>
   1f6b8:	b	1f714 <__assert_fail@plt+0xda78>
   1f6bc:	mov	r0, #3
   1f6c0:	str	r4, [sp, #56]	; 0x38
   1f6c4:	add	r3, sp, #56	; 0x38
   1f6c8:	mov	r1, #0
   1f6cc:	mov	r2, #0
   1f6d0:	mov	r5, #0
   1f6d4:	str	r0, [sp, #60]	; 0x3c
   1f6d8:	mov	r0, r6
   1f6dc:	bl	2001c <__assert_fail@plt+0xe380>
   1f6e0:	cmp	r0, #0
   1f6e4:	beq	1fff8 <__assert_fail@plt+0xe35c>
   1f6e8:	mov	r1, r0
   1f6ec:	mov	r0, #10
   1f6f0:	sub	r3, fp, #80	; 0x50
   1f6f4:	mov	r2, r9
   1f6f8:	str	r0, [fp, #-76]	; 0xffffffb4
   1f6fc:	str	r5, [fp, #-80]	; 0xffffffb0
   1f700:	mov	r0, r6
   1f704:	bl	2001c <__assert_fail@plt+0xe380>
   1f708:	mov	r9, r0
   1f70c:	cmp	r0, #0
   1f710:	beq	1fff8 <__assert_fail@plt+0xe35c>
   1f714:	cmp	r9, #0
   1f718:	bne	1f738 <__assert_fail@plt+0xda9c>
   1f71c:	ldr	r6, [sp, #16]
   1f720:	ldr	r2, [sp, #36]	; 0x24
   1f724:	ldr	r5, [sp, #20]
   1f728:	ldr	r0, [r6]
   1f72c:	cmp	r0, #0
   1f730:	beq	1f744 <__assert_fail@plt+0xdaa8>
   1f734:	b	1fce8 <__assert_fail@plt+0xe04c>
   1f738:	ldr	r2, [sp, #36]	; 0x24
   1f73c:	ldr	r5, [sp, #20]
   1f740:	ldr	r6, [sp, #16]
   1f744:	mov	r0, r5
   1f748:	mov	r1, sl
   1f74c:	str	r6, [sp, #16]
   1f750:	bl	1e1fc <__assert_fail@plt+0xc560>
   1f754:	ldr	r1, [sl, #40]	; 0x28
   1f758:	ldr	r2, [sp, #36]	; 0x24
   1f75c:	ldr	r3, [sp, #20]
   1f760:	mov	r7, #0
   1f764:	sub	r4, fp, #80	; 0x50
   1f768:	add	r0, r1, r0
   1f76c:	str	r0, [sl, #40]	; 0x28
   1f770:	and	r0, r2, #16777216	; 0x1000000
   1f774:	str	r0, [sp, #24]
   1f778:	and	r0, r2, #2097152	; 0x200000
   1f77c:	str	r0, [sp, #12]
   1f780:	ldrb	r0, [r3, #4]
   1f784:	cmp	r0, #23
   1f788:	bhi	1fc7c <__assert_fail@plt+0xdfe0>
   1f78c:	movw	r6, #2048	; 0x800
   1f790:	mov	r1, #1
   1f794:	movt	r6, #140	; 0x8c
   1f798:	tst	r6, r1, lsl r0
   1f79c:	beq	1fc7c <__assert_fail@plt+0xdfe0>
   1f7a0:	cmp	r0, #23
   1f7a4:	bne	1f800 <__assert_fail@plt+0xdb64>
   1f7a8:	ldr	r0, [r3]
   1f7ac:	ldr	r5, [r3, #4]
   1f7b0:	mov	r1, r3
   1f7b4:	mov	r8, sl
   1f7b8:	str	r0, [sp, #32]
   1f7bc:	ldr	r0, [sl, #40]	; 0x28
   1f7c0:	str	r0, [sp, #28]
   1f7c4:	mov	r0, sl
   1f7c8:	mov	sl, r3
   1f7cc:	bl	20fac <__assert_fail@plt+0xf310>
   1f7d0:	cmn	r0, #1
   1f7d4:	bne	1f81c <__assert_fail@plt+0xdb80>
   1f7d8:	ldrb	r0, [sl, #4]
   1f7dc:	mov	r3, sl
   1f7e0:	cmp	r0, #1
   1f7e4:	bne	1fa60 <__assert_fail@plt+0xddc4>
   1f7e8:	ldrb	r1, [r3]
   1f7ec:	cmp	r1, #44	; 0x2c
   1f7f0:	bne	1fa60 <__assert_fail@plt+0xddc4>
   1f7f4:	ldr	r2, [sp, #36]	; 0x24
   1f7f8:	mov	r6, #0
   1f7fc:	b	1f834 <__assert_fail@plt+0xdb98>
   1f800:	cmp	r0, #19
   1f804:	sub	r0, r0, #18
   1f808:	mvn	sl, #0
   1f80c:	clz	r0, r0
   1f810:	movweq	sl, #1
   1f814:	lsr	r6, r0, #5
   1f818:	b	1f8a8 <__assert_fail@plt+0xdc0c>
   1f81c:	ldr	r2, [sp, #36]	; 0x24
   1f820:	mov	r6, r0
   1f824:	cmn	r0, #2
   1f828:	mov	r3, sl
   1f82c:	beq	1fa7c <__assert_fail@plt+0xdde0>
   1f830:	ldr	r0, [r3, #4]
   1f834:	uxtb	r0, r0
   1f838:	mov	sl, r6
   1f83c:	cmp	r0, #24
   1f840:	beq	1f878 <__assert_fail@plt+0xdbdc>
   1f844:	cmp	r0, #1
   1f848:	bne	1fa7c <__assert_fail@plt+0xdde0>
   1f84c:	ldrb	r0, [r3]
   1f850:	cmp	r0, #44	; 0x2c
   1f854:	bne	1fa7c <__assert_fail@plt+0xdde0>
   1f858:	ldr	r0, [sp, #40]	; 0x28
   1f85c:	mov	r1, r3
   1f860:	bl	20fac <__assert_fail@plt+0xf310>
   1f864:	ldr	r3, [sp, #20]
   1f868:	ldr	r2, [sp, #36]	; 0x24
   1f86c:	mov	sl, r0
   1f870:	cmn	r0, #2
   1f874:	beq	1fa7c <__assert_fail@plt+0xdde0>
   1f878:	cmn	sl, #1
   1f87c:	beq	1f888 <__assert_fail@plt+0xdbec>
   1f880:	cmp	r6, sl
   1f884:	bgt	1fc3c <__assert_fail@plt+0xdfa0>
   1f888:	ldrb	r0, [r3, #4]
   1f88c:	cmp	r0, #24
   1f890:	bne	1fc3c <__assert_fail@plt+0xdfa0>
   1f894:	cmn	sl, #1
   1f898:	mov	r0, sl
   1f89c:	moveq	r0, r6
   1f8a0:	cmp	r0, #32768	; 0x8000
   1f8a4:	bge	1fc64 <__assert_fail@plt+0xdfc8>
   1f8a8:	ldr	r5, [sp, #40]	; 0x28
   1f8ac:	mov	r0, r3
   1f8b0:	mov	r1, r5
   1f8b4:	bl	1e1fc <__assert_fail@plt+0xc560>
   1f8b8:	ldr	r1, [r5, #40]	; 0x28
   1f8bc:	cmp	r9, #0
   1f8c0:	add	r0, r1, r0
   1f8c4:	str	r0, [r5, #40]	; 0x28
   1f8c8:	mov	r5, #0
   1f8cc:	beq	1fac0 <__assert_fail@plt+0xde24>
   1f8d0:	orrs	r0, sl, r6
   1f8d4:	beq	1fad0 <__assert_fail@plt+0xde34>
   1f8d8:	mov	r0, #0
   1f8dc:	cmp	r6, #1
   1f8e0:	mov	r8, r9
   1f8e4:	str	r0, [sp, #32]
   1f8e8:	str	r9, [sp, #28]
   1f8ec:	bge	1fb34 <__assert_fail@plt+0xde98>
   1f8f0:	ldrb	r0, [r8, #24]
   1f8f4:	cmp	r0, #17
   1f8f8:	bne	1f96c <__assert_fail@plt+0xdcd0>
   1f8fc:	ldr	r0, [r8, #20]
   1f900:	mov	r2, r8
   1f904:	mov	r1, r2
   1f908:	ldr	r2, [r2, #4]
   1f90c:	cmp	r2, #0
   1f910:	bne	1f904 <__assert_fail@plt+0xdc68>
   1f914:	ldr	r2, [r1, #8]
   1f918:	cmp	r2, #0
   1f91c:	bne	1f904 <__assert_fail@plt+0xdc68>
   1f920:	ldr	r2, [r1, #24]
   1f924:	uxtb	r3, r2
   1f928:	cmp	r3, #17
   1f92c:	bne	1f940 <__assert_fail@plt+0xdca4>
   1f930:	ldr	r3, [r1, #20]
   1f934:	cmp	r3, r0
   1f938:	orreq	r2, r2, #524288	; 0x80000
   1f93c:	streq	r2, [r1, #24]
   1f940:	ldr	r3, [r1]
   1f944:	cmp	r3, #0
   1f948:	beq	1f96c <__assert_fail@plt+0xdcd0>
   1f94c:	ldr	r2, [r3, #8]
   1f950:	cmp	r2, r1
   1f954:	mov	r1, r3
   1f958:	beq	1f920 <__assert_fail@plt+0xdc84>
   1f95c:	cmp	r2, #0
   1f960:	mov	r1, r3
   1f964:	beq	1f920 <__assert_fail@plt+0xdc84>
   1f968:	b	1f904 <__assert_fail@plt+0xdc68>
   1f96c:	cmn	sl, #1
   1f970:	mov	r0, #10
   1f974:	str	r7, [fp, #-80]	; 0xffffffb0
   1f978:	mov	r1, r8
   1f97c:	mov	r2, #0
   1f980:	mov	r3, r4
   1f984:	movweq	r0, #11
   1f988:	str	r0, [fp, #-76]	; 0xffffffb4
   1f98c:	ldr	r0, [sp, #44]	; 0x2c
   1f990:	bl	2001c <__assert_fail@plt+0xe380>
   1f994:	cmp	r0, #0
   1f998:	beq	1fbd0 <__assert_fail@plt+0xdf34>
   1f99c:	mov	r5, r0
   1f9a0:	add	r0, r6, #2
   1f9a4:	cmp	r0, sl
   1f9a8:	ble	1f9e0 <__assert_fail@plt+0xdd44>
   1f9ac:	ldr	r1, [sp, #32]
   1f9b0:	ldr	sl, [sp, #40]	; 0x28
   1f9b4:	cmp	r1, #0
   1f9b8:	beq	1faac <__assert_fail@plt+0xde10>
   1f9bc:	mov	r0, #16
   1f9c0:	mov	r2, r5
   1f9c4:	mov	r3, r4
   1f9c8:	str	r0, [fp, #-76]	; 0xffffffb4
   1f9cc:	ldr	r0, [sp, #44]	; 0x2c
   1f9d0:	str	r7, [fp, #-80]	; 0xffffffb0
   1f9d4:	bl	2001c <__assert_fail@plt+0xe380>
   1f9d8:	mov	r5, r0
   1f9dc:	b	1fbe4 <__assert_fail@plt+0xdf48>
   1f9e0:	add	r6, r6, #1
   1f9e4:	ldr	r9, [sp, #44]	; 0x2c
   1f9e8:	mov	r0, r8
   1f9ec:	mov	r1, r9
   1f9f0:	bl	21058 <__assert_fail@plt+0xf3bc>
   1f9f4:	mov	r8, r0
   1f9f8:	mov	r0, #16
   1f9fc:	mov	r1, r5
   1fa00:	mov	r3, r4
   1fa04:	str	r0, [fp, #-76]	; 0xffffffb4
   1fa08:	mov	r0, r9
   1fa0c:	mov	r2, r8
   1fa10:	str	r7, [fp, #-80]	; 0xffffffb0
   1fa14:	bl	2001c <__assert_fail@plt+0xe380>
   1fa18:	cmp	r8, #0
   1fa1c:	movne	r1, r0
   1fa20:	cmpne	r0, #0
   1fa24:	beq	1fbd0 <__assert_fail@plt+0xdf34>
   1fa28:	mov	r0, #10
   1fa2c:	mov	r2, #0
   1fa30:	mov	r3, r4
   1fa34:	str	r0, [fp, #-76]	; 0xffffffb4
   1fa38:	ldr	r0, [sp, #44]	; 0x2c
   1fa3c:	str	r7, [fp, #-80]	; 0xffffffb0
   1fa40:	bl	2001c <__assert_fail@plt+0xe380>
   1fa44:	cmp	r0, #0
   1fa48:	beq	1fbd0 <__assert_fail@plt+0xdf34>
   1fa4c:	add	r6, r6, #1
   1fa50:	mov	r5, r0
   1fa54:	cmp	r6, sl
   1fa58:	blt	1f9e4 <__assert_fail@plt+0xdd48>
   1fa5c:	b	1f9ac <__assert_fail@plt+0xdd10>
   1fa60:	ldr	r0, [sp, #16]
   1fa64:	ldr	r2, [sp, #36]	; 0x24
   1fa68:	mov	r1, #10
   1fa6c:	mov	r5, #0
   1fa70:	mov	sl, r8
   1fa74:	str	r1, [r0]
   1fa78:	b	1fbf0 <__assert_fail@plt+0xdf54>
   1fa7c:	ldr	r0, [sp, #12]
   1fa80:	cmp	r0, #0
   1fa84:	beq	1fc48 <__assert_fail@plt+0xdfac>
   1fa88:	ldr	sl, [sp, #40]	; 0x28
   1fa8c:	ldr	r0, [sp, #28]
   1fa90:	str	r0, [sl, #40]	; 0x28
   1fa94:	mov	r0, #1
   1fa98:	bfi	r5, r0, #0, #8
   1fa9c:	ldr	r0, [sp, #32]
   1faa0:	stm	r3, {r0, r5}
   1faa4:	mov	r5, r9
   1faa8:	b	1fbf0 <__assert_fail@plt+0xdf54>
   1faac:	ldr	r2, [sp, #36]	; 0x24
   1fab0:	ldr	r3, [sp, #20]
   1fab4:	clz	r0, r5
   1fab8:	lsr	r0, r0, #5
   1fabc:	b	1fc10 <__assert_fail@plt+0xdf74>
   1fac0:	ldr	sl, [sp, #40]	; 0x28
   1fac4:	ldr	r2, [sp, #36]	; 0x24
   1fac8:	ldr	r3, [sp, #20]
   1facc:	b	1fbf0 <__assert_fail@plt+0xdf54>
   1fad0:	ldr	sl, [sp, #40]	; 0x28
   1fad4:	mov	r0, r9
   1fad8:	mov	r5, r0
   1fadc:	ldr	r0, [r0, #4]
   1fae0:	cmp	r0, #0
   1fae4:	bne	1fad8 <__assert_fail@plt+0xde3c>
   1fae8:	ldr	r0, [r5, #8]
   1faec:	cmp	r0, #0
   1faf0:	bne	1fad8 <__assert_fail@plt+0xde3c>
   1faf4:	add	r0, r5, #20
   1faf8:	bl	1d5e4 <__assert_fail@plt+0xb948>
   1fafc:	ldr	r1, [r5]
   1fb00:	cmp	r1, #0
   1fb04:	beq	1fb28 <__assert_fail@plt+0xde8c>
   1fb08:	ldr	r0, [r1, #8]
   1fb0c:	cmp	r0, r5
   1fb10:	mov	r5, r1
   1fb14:	beq	1faf4 <__assert_fail@plt+0xde58>
   1fb18:	cmp	r0, #0
   1fb1c:	mov	r5, r1
   1fb20:	beq	1faf4 <__assert_fail@plt+0xde58>
   1fb24:	b	1fad8 <__assert_fail@plt+0xde3c>
   1fb28:	ldr	r2, [sp, #36]	; 0x24
   1fb2c:	ldr	r3, [sp, #20]
   1fb30:	b	1fc74 <__assert_fail@plt+0xdfd8>
   1fb34:	ldr	r9, [sp, #28]
   1fb38:	str	r9, [sp, #32]
   1fb3c:	beq	1fba0 <__assert_fail@plt+0xdf04>
   1fb40:	ldr	r0, [sp, #28]
   1fb44:	sub	r5, r6, #1
   1fb48:	mov	r9, r0
   1fb4c:	str	r0, [sp, #32]
   1fb50:	ldr	r8, [sp, #44]	; 0x2c
   1fb54:	mov	r0, r9
   1fb58:	mov	r1, r8
   1fb5c:	bl	21058 <__assert_fail@plt+0xf3bc>
   1fb60:	ldr	r1, [sp, #32]
   1fb64:	mov	r9, r0
   1fb68:	mov	r0, #16
   1fb6c:	mov	r3, r4
   1fb70:	str	r0, [fp, #-76]	; 0xffffffb4
   1fb74:	mov	r0, r8
   1fb78:	mov	r2, r9
   1fb7c:	str	r7, [fp, #-80]	; 0xffffffb0
   1fb80:	bl	2001c <__assert_fail@plt+0xe380>
   1fb84:	str	r0, [sp, #32]
   1fb88:	cmp	r9, #0
   1fb8c:	ldrne	r0, [sp, #32]
   1fb90:	cmpne	r0, #0
   1fb94:	beq	1fbd0 <__assert_fail@plt+0xdf34>
   1fb98:	subs	r5, r5, #1
   1fb9c:	bne	1fb50 <__assert_fail@plt+0xdeb4>
   1fba0:	cmp	r6, sl
   1fba4:	bne	1fbb8 <__assert_fail@plt+0xdf1c>
   1fba8:	ldr	sl, [sp, #40]	; 0x28
   1fbac:	ldr	r2, [sp, #36]	; 0x24
   1fbb0:	ldr	r5, [sp, #32]
   1fbb4:	b	1fab0 <__assert_fail@plt+0xde14>
   1fbb8:	ldr	r1, [sp, #44]	; 0x2c
   1fbbc:	mov	r0, r9
   1fbc0:	bl	21058 <__assert_fail@plt+0xf3bc>
   1fbc4:	mov	r8, r0
   1fbc8:	cmp	r0, #0
   1fbcc:	bne	1f8f0 <__assert_fail@plt+0xdc54>
   1fbd0:	ldr	r0, [sp, #16]
   1fbd4:	ldr	sl, [sp, #40]	; 0x28
   1fbd8:	mov	r1, #12
   1fbdc:	mov	r5, #0
   1fbe0:	str	r1, [r0]
   1fbe4:	ldr	r2, [sp, #36]	; 0x24
   1fbe8:	ldr	r3, [sp, #20]
   1fbec:	ldr	r9, [sp, #28]
   1fbf0:	clz	r0, r5
   1fbf4:	cmp	r5, #0
   1fbf8:	lsr	r0, r0, #5
   1fbfc:	bne	1fc10 <__assert_fail@plt+0xdf74>
   1fc00:	ldr	r1, [sp, #16]
   1fc04:	ldr	r1, [r1]
   1fc08:	cmp	r1, #0
   1fc0c:	bne	1fdbc <__assert_fail@plt+0xe120>
   1fc10:	ldr	r1, [sp, #24]
   1fc14:	mov	r9, r5
   1fc18:	cmp	r1, #0
   1fc1c:	beq	1f780 <__assert_fail@plt+0xdae4>
   1fc20:	ldrb	r1, [r3, #4]
   1fc24:	cmp	r1, #23
   1fc28:	beq	1fc84 <__assert_fail@plt+0xdfe8>
   1fc2c:	cmp	r1, #11
   1fc30:	mov	r9, r5
   1fc34:	bne	1f780 <__assert_fail@plt+0xdae4>
   1fc38:	b	1fc84 <__assert_fail@plt+0xdfe8>
   1fc3c:	ldr	r0, [sp, #16]
   1fc40:	mov	r1, #10
   1fc44:	b	1fc6c <__assert_fail@plt+0xdfd0>
   1fc48:	ldrb	r0, [r3, #4]
   1fc4c:	ldr	r1, [sp, #16]
   1fc50:	cmp	r0, #2
   1fc54:	mov	r0, #10
   1fc58:	movweq	r0, #9
   1fc5c:	str	r0, [r1]
   1fc60:	b	1fc70 <__assert_fail@plt+0xdfd4>
   1fc64:	ldr	r0, [sp, #16]
   1fc68:	mov	r1, #15
   1fc6c:	str	r1, [r0]
   1fc70:	ldr	sl, [sp, #40]	; 0x28
   1fc74:	mov	r5, #0
   1fc78:	b	1fbf0 <__assert_fail@plt+0xdf54>
   1fc7c:	mov	r8, r9
   1fc80:	b	1fcec <__assert_fail@plt+0xe050>
   1fc84:	cmp	r0, #0
   1fc88:	bne	1fcdc <__assert_fail@plt+0xe040>
   1fc8c:	mov	r4, r5
   1fc90:	ldr	r5, [r5, #4]
   1fc94:	cmp	r5, #0
   1fc98:	bne	1fc8c <__assert_fail@plt+0xdff0>
   1fc9c:	ldr	r5, [r4, #8]
   1fca0:	cmp	r5, #0
   1fca4:	bne	1fc8c <__assert_fail@plt+0xdff0>
   1fca8:	add	r0, r4, #20
   1fcac:	bl	1d5e4 <__assert_fail@plt+0xb948>
   1fcb0:	ldr	r0, [r4]
   1fcb4:	cmp	r0, #0
   1fcb8:	beq	1fcdc <__assert_fail@plt+0xe040>
   1fcbc:	ldr	r5, [r0, #8]
   1fcc0:	cmp	r5, r4
   1fcc4:	mov	r4, r0
   1fcc8:	beq	1fca8 <__assert_fail@plt+0xe00c>
   1fccc:	cmp	r5, #0
   1fcd0:	mov	r4, r0
   1fcd4:	beq	1fca8 <__assert_fail@plt+0xe00c>
   1fcd8:	b	1fc8c <__assert_fail@plt+0xdff0>
   1fcdc:	ldr	r1, [sp, #16]
   1fce0:	mov	r0, #13
   1fce4:	str	r0, [r1]
   1fce8:	mov	r8, #0
   1fcec:	mov	r0, r8
   1fcf0:	sub	sp, fp, #28
   1fcf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fcf8:	mov	r5, #9
   1fcfc:	mov	r0, #6
   1fd00:	str	r0, [r4]
   1fd04:	mov	r0, r6
   1fd08:	mov	r1, #0
   1fd0c:	mov	r2, #0
   1fd10:	mov	r3, r4
   1fd14:	mov	r8, #0
   1fd18:	bl	2001c <__assert_fail@plt+0xe380>
   1fd1c:	mov	r7, r0
   1fd20:	mov	r0, r6
   1fd24:	mov	r1, #0
   1fd28:	mov	r2, #0
   1fd2c:	mov	r3, r4
   1fd30:	str	r5, [r4]
   1fd34:	bl	2001c <__assert_fail@plt+0xe380>
   1fd38:	mov	r4, r0
   1fd3c:	mov	r0, #10
   1fd40:	sub	r3, fp, #80	; 0x50
   1fd44:	mov	r1, r7
   1fd48:	str	r0, [fp, #-76]	; 0xffffffb4
   1fd4c:	mov	r0, r6
   1fd50:	mov	r2, r4
   1fd54:	str	r8, [fp, #-80]	; 0xffffffb0
   1fd58:	bl	2001c <__assert_fail@plt+0xe380>
   1fd5c:	cmp	r7, #0
   1fd60:	cmpne	r4, #0
   1fd64:	bne	1fd8c <__assert_fail@plt+0xe0f0>
   1fd68:	mov	r0, #12
   1fd6c:	str	r0, [r9]
   1fd70:	b	1fcec <__assert_fail@plt+0xe050>
   1fd74:	mov	r0, r6
   1fd78:	mov	r1, #0
   1fd7c:	mov	r2, #0
   1fd80:	mov	r3, r4
   1fd84:	mov	r8, #0
   1fd88:	bl	2001c <__assert_fail@plt+0xe380>
   1fd8c:	mov	r5, r0
   1fd90:	cmp	r0, #0
   1fd94:	beq	1fd68 <__assert_fail@plt+0xe0cc>
   1fd98:	ldr	r0, [sp, #20]
   1fd9c:	ldr	r2, [sp, #36]	; 0x24
   1fda0:	mov	r1, sl
   1fda4:	bl	1e1fc <__assert_fail@plt+0xc560>
   1fda8:	ldr	r1, [sl, #40]	; 0x28
   1fdac:	mov	r8, r5
   1fdb0:	add	r0, r1, r0
   1fdb4:	str	r0, [sl, #40]	; 0x28
   1fdb8:	b	1fcec <__assert_fail@plt+0xe050>
   1fdbc:	mov	r8, #0
   1fdc0:	cmp	r9, #0
   1fdc4:	beq	1fcec <__assert_fail@plt+0xe050>
   1fdc8:	mov	r5, r9
   1fdcc:	ldr	r9, [r9, #4]
   1fdd0:	cmp	r9, #0
   1fdd4:	bne	1fdc8 <__assert_fail@plt+0xe12c>
   1fdd8:	ldr	r9, [r5, #8]
   1fddc:	cmp	r9, #0
   1fde0:	bne	1fdc8 <__assert_fail@plt+0xe12c>
   1fde4:	add	r0, r5, #20
   1fde8:	bl	1d5e4 <__assert_fail@plt+0xb948>
   1fdec:	ldr	r0, [r5]
   1fdf0:	cmp	r0, #0
   1fdf4:	beq	1fcec <__assert_fail@plt+0xe050>
   1fdf8:	ldr	r9, [r0, #8]
   1fdfc:	cmp	r9, r5
   1fe00:	mov	r5, r0
   1fe04:	beq	1fde4 <__assert_fail@plt+0xe148>
   1fe08:	cmp	r9, #0
   1fe0c:	mov	r5, r0
   1fe10:	beq	1fde4 <__assert_fail@plt+0xe148>
   1fe14:	b	1fdc8 <__assert_fail@plt+0xe12c>
   1fe18:	cmp	r0, #2
   1fe1c:	blt	1fe38 <__assert_fail@plt+0xe19c>
   1fe20:	ldr	r0, [r8, #36]	; 0x24
   1fe24:	cmp	r0, #0
   1fe28:	bne	1f658 <__assert_fail@plt+0xd9bc>
   1fe2c:	ldrb	r0, [r8, #16]
   1fe30:	tst	r0, #1
   1fe34:	bne	1f658 <__assert_fail@plt+0xd9bc>
   1fe38:	mov	r0, r8
   1fe3c:	bl	1d674 <__assert_fail@plt+0xb9d8>
   1fe40:	mov	r0, #3
   1fe44:	str	r4, [sp, #56]	; 0x38
   1fe48:	add	r3, sp, #56	; 0x38
   1fe4c:	mov	r1, #0
   1fe50:	mov	r2, #0
   1fe54:	str	r0, [sp, #60]	; 0x3c
   1fe58:	ldr	r0, [sp, #44]	; 0x2c
   1fe5c:	b	1f704 <__assert_fail@plt+0xda68>
   1fe60:	mov	r0, #12
   1fe64:	b	1f074 <__assert_fail@plt+0xd3d8>
   1fe68:	mov	r6, r0
   1fe6c:	b	1ffcc <__assert_fail@plt+0xe330>
   1fe70:	mov	r6, #7
   1fe74:	b	1ffcc <__assert_fail@plt+0xe330>
   1fe78:	mov	r0, #2
   1fe7c:	b	1fffc <__assert_fail@plt+0xe360>
   1fe80:	mov	r0, r4
   1fe84:	bl	1a12c <__assert_fail@plt+0x8490>
   1fe88:	mov	r0, r8
   1fe8c:	bl	1a12c <__assert_fail@plt+0x8490>
   1fe90:	ldr	r1, [sp, #16]
   1fe94:	mov	r0, #12
   1fe98:	str	r0, [r1]
   1fe9c:	b	1f714 <__assert_fail@plt+0xda78>
   1fea0:	mov	r0, #6
   1fea4:	b	1f074 <__assert_fail@plt+0xd3d8>
   1fea8:	mov	r6, #3
   1feac:	b	1ffcc <__assert_fail@plt+0xe330>
   1feb0:	ldr	r1, [sp, #16]
   1feb4:	mov	r0, #12
   1feb8:	str	r0, [r1]
   1febc:	b	1fcec <__assert_fail@plt+0xe050>
   1fec0:	mov	r9, r6
   1fec4:	mov	r5, #0
   1fec8:	mov	r8, #0
   1fecc:	b	1fedc <__assert_fail@plt+0xe240>
   1fed0:	mov	r9, r6
   1fed4:	mov	r8, #4
   1fed8:	mov	r5, #128	; 0x80
   1fedc:	bl	11a5c <__ctype_b_loc@plt>
   1fee0:	ldr	r0, [r0]
   1fee4:	ldr	sl, [sp, #40]	; 0x28
   1fee8:	ldr	r4, [sp, #20]
   1feec:	mov	r1, #1
   1fef0:	mov	r6, r9
   1fef4:	add	r7, r0, r5, lsl #1
   1fef8:	ldr	r0, [sp, #44]	; 0x2c
   1fefc:	mov	ip, r6
   1ff00:	mov	r3, #0
   1ff04:	add	r0, r0, r8, lsl #2
   1ff08:	add	r2, r0, #96	; 0x60
   1ff0c:	mov	r0, r7
   1ff10:	add	r6, r5, r3
   1ff14:	cmp	r6, #95	; 0x5f
   1ff18:	beq	1ff28 <__assert_fail@plt+0xe28c>
   1ff1c:	ldrh	r6, [r0]
   1ff20:	ands	r6, r6, #8
   1ff24:	beq	1ff34 <__assert_fail@plt+0xe298>
   1ff28:	ldr	r6, [r2]
   1ff2c:	orr	r6, r6, r1, lsl r3
   1ff30:	str	r6, [r2]
   1ff34:	add	r3, r3, #1
   1ff38:	add	r0, r0, #2
   1ff3c:	cmp	r3, #32
   1ff40:	bne	1ff10 <__assert_fail@plt+0xe274>
   1ff44:	add	r8, r8, #1
   1ff48:	add	r7, r7, #64	; 0x40
   1ff4c:	add	r5, r5, #32
   1ff50:	mov	r6, ip
   1ff54:	cmp	r8, #8
   1ff58:	bne	1fef8 <__assert_fail@plt+0xe25c>
   1ff5c:	b	1ed1c <__assert_fail@plt+0xd080>
   1ff60:	ldr	r9, [sp, #16]
   1ff64:	cmp	r1, #0
   1ff68:	beq	1ffbc <__assert_fail@plt+0xe320>
   1ff6c:	mov	r5, r1
   1ff70:	ldr	r1, [r1, #4]
   1ff74:	cmp	r1, #0
   1ff78:	bne	1ff6c <__assert_fail@plt+0xe2d0>
   1ff7c:	ldr	r1, [r5, #8]
   1ff80:	cmp	r1, #0
   1ff84:	bne	1ff6c <__assert_fail@plt+0xe2d0>
   1ff88:	add	r0, r5, #20
   1ff8c:	bl	1d5e4 <__assert_fail@plt+0xb948>
   1ff90:	ldr	r0, [r5]
   1ff94:	cmp	r0, #0
   1ff98:	beq	1ffbc <__assert_fail@plt+0xe320>
   1ff9c:	ldr	r1, [r0, #8]
   1ffa0:	cmp	r1, r5
   1ffa4:	mov	r5, r0
   1ffa8:	beq	1ff88 <__assert_fail@plt+0xe2ec>
   1ffac:	cmp	r1, #0
   1ffb0:	mov	r5, r0
   1ffb4:	beq	1ff88 <__assert_fail@plt+0xe2ec>
   1ffb8:	b	1ff6c <__assert_fail@plt+0xe2d0>
   1ffbc:	mov	r0, #8
   1ffc0:	b	1fd6c <__assert_fail@plt+0xe0d0>
   1ffc4:	mov	r6, #3
   1ffc8:	ldr	sl, [sp, #40]	; 0x28
   1ffcc:	ldr	r0, [sp, #16]
   1ffd0:	str	r6, [r0]
   1ffd4:	ldr	r8, [sp, #32]
   1ffd8:	mov	r0, r4
   1ffdc:	bl	1a12c <__assert_fail@plt+0x8490>
   1ffe0:	mov	r0, r8
   1ffe4:	bl	1d674 <__assert_fail@plt+0xb9d8>
   1ffe8:	mov	r9, #0
   1ffec:	b	1f714 <__assert_fail@plt+0xda78>
   1fff0:	ldr	sl, [sp, #40]	; 0x28
   1fff4:	ldr	r8, [sp, #32]
   1fff8:	mov	r0, #12
   1fffc:	ldr	r1, [sp, #16]
   20000:	str	r0, [r1]
   20004:	b	1ffd8 <__assert_fail@plt+0xe33c>
   20008:	bl	1a12c <__assert_fail@plt+0x8490>
   2000c:	mov	r0, r6
   20010:	bl	1a12c <__assert_fail@plt+0x8490>
   20014:	mov	r6, #12
   20018:	b	1ffc8 <__assert_fail@plt+0xe32c>
   2001c:	push	{r4, r5, r6, r7, fp, lr}
   20020:	add	fp, sp, #16
   20024:	mov	r5, r1
   20028:	ldr	r1, [r0, #64]	; 0x40
   2002c:	mov	r6, r3
   20030:	mov	r4, r2
   20034:	mov	r7, r0
   20038:	cmp	r1, #31
   2003c:	beq	20094 <__assert_fail@plt+0xe3f8>
   20040:	ldr	r0, [r7, #56]	; 0x38
   20044:	add	r0, r0, r1, lsl #5
   20048:	add	r2, r1, #1
   2004c:	mov	r1, #0
   20050:	cmp	r5, #0
   20054:	str	r2, [r7, #64]	; 0x40
   20058:	mvn	r7, #0
   2005c:	str	r1, [r0, #4]!
   20060:	str	r4, [r0, #8]
   20064:	str	r5, [r0, #4]
   20068:	ldm	r6, {r2, r3}
   2006c:	str	r7, [r0, #28]
   20070:	str	r1, [r0, #16]
   20074:	str	r1, [r0, #12]
   20078:	bic	r1, r3, #786432	; 0xc0000
   2007c:	str	r2, [r0, #20]
   20080:	str	r1, [r0, #24]
   20084:	strne	r0, [r5]
   20088:	cmp	r4, #0
   2008c:	strne	r0, [r4]
   20090:	pop	{r4, r5, r6, r7, fp, pc}
   20094:	mov	r0, #996	; 0x3e4
   20098:	bl	1a1f8 <__assert_fail@plt+0x855c>
   2009c:	cmp	r0, #0
   200a0:	beq	200bc <__assert_fail@plt+0xe420>
   200a4:	ldr	r1, [r7, #56]	; 0x38
   200a8:	str	r1, [r0]
   200ac:	mov	r1, #0
   200b0:	str	r1, [r7, #64]	; 0x40
   200b4:	str	r0, [r7, #56]	; 0x38
   200b8:	b	20044 <__assert_fail@plt+0xe3a8>
   200bc:	mov	r0, #0
   200c0:	pop	{r4, r5, r6, r7, fp, pc}
   200c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   200c8:	add	fp, sp, #28
   200cc:	sub	sp, sp, #28
   200d0:	mov	sl, r1
   200d4:	mov	r9, r0
   200d8:	mov	r7, #0
   200dc:	mov	r0, #32
   200e0:	mov	r1, #1
   200e4:	mov	r8, r3
   200e8:	mov	r4, r2
   200ec:	str	r7, [sp, #16]
   200f0:	bl	19ea4 <__assert_fail@plt+0x8208>
   200f4:	ldr	r1, [fp, #12]
   200f8:	cmp	r0, #0
   200fc:	beq	202ac <__assert_fail@plt+0xe610>
   20100:	mov	r5, r0
   20104:	mov	r0, #40	; 0x28
   20108:	mov	r1, #1
   2010c:	bl	19ea4 <__assert_fail@plt+0x8208>
   20110:	cmp	r0, #0
   20114:	beq	202b4 <__assert_fail@plt+0xe618>
   20118:	mov	r6, r0
   2011c:	ldrb	r0, [r0, #16]
   20120:	ldr	r1, [fp, #8]
   20124:	add	r3, sp, #16
   20128:	mov	r7, #0
   2012c:	stm	sp, {r4, r7}
   20130:	mov	r2, r6
   20134:	and	r0, r0, #254	; 0xfe
   20138:	orr	r0, r0, r1
   2013c:	mov	r1, r5
   20140:	strb	r0, [r6, #16]
   20144:	mov	r0, sl
   20148:	bl	2071c <__assert_fail@plt+0xea80>
   2014c:	cmp	r0, #0
   20150:	bne	202d0 <__assert_fail@plt+0xe634>
   20154:	ldrb	r0, [r8]
   20158:	cmp	r0, #0
   2015c:	beq	20188 <__assert_fail@plt+0xe4ec>
   20160:	add	r1, r8, #1
   20164:	mov	r2, #1
   20168:	ubfx	r3, r0, #5, #3
   2016c:	and	r0, r0, #31
   20170:	ldr	r7, [r5, r3, lsl #2]
   20174:	orr	r0, r7, r2, lsl r0
   20178:	str	r0, [r5, r3, lsl #2]
   2017c:	ldrb	r0, [r1], #1
   20180:	cmp	r0, #0
   20184:	bne	20168 <__assert_fail@plt+0xe4cc>
   20188:	ldr	r0, [fp, #8]
   2018c:	cmp	r0, #0
   20190:	beq	201b4 <__assert_fail@plt+0xe518>
   20194:	mov	r0, #0
   20198:	add	r1, r5, r0
   2019c:	add	r0, r0, #16
   201a0:	vld1.32	{d16-d17}, [r1]
   201a4:	cmp	r0, #32
   201a8:	vmvn	q8, q8
   201ac:	vst1.32	{d16-d17}, [r1]
   201b0:	bne	20198 <__assert_fail@plt+0xe4fc>
   201b4:	ldr	r0, [r9, #92]	; 0x5c
   201b8:	cmp	r0, #2
   201bc:	blt	201e4 <__assert_fail@plt+0xe548>
   201c0:	ldr	r0, [r9, #60]	; 0x3c
   201c4:	mov	r1, #0
   201c8:	ldr	r2, [r0, r1, lsl #2]
   201cc:	ldr	r3, [r5, r1, lsl #2]
   201d0:	and	r2, r3, r2
   201d4:	str	r2, [r5, r1, lsl #2]
   201d8:	add	r1, r1, #1
   201dc:	cmp	r1, #8
   201e0:	bne	201c8 <__assert_fail@plt+0xe52c>
   201e4:	mov	r0, #3
   201e8:	add	r3, sp, #8
   201ec:	mov	r1, #0
   201f0:	mov	r2, #0
   201f4:	mov	r7, #0
   201f8:	str	r0, [sp, #12]
   201fc:	mov	r0, r9
   20200:	str	r5, [sp, #8]
   20204:	bl	2001c <__assert_fail@plt+0xe380>
   20208:	cmp	r0, #0
   2020c:	beq	20298 <__assert_fail@plt+0xe5fc>
   20210:	mov	r4, r0
   20214:	ldr	r0, [r9, #92]	; 0x5c
   20218:	cmp	r0, #2
   2021c:	blt	20280 <__assert_fail@plt+0xe5e4>
   20220:	mov	r0, #6
   20224:	str	r6, [sp, #8]
   20228:	add	r3, sp, #8
   2022c:	mov	r1, #0
   20230:	mov	r2, #0
   20234:	mov	r8, #0
   20238:	str	r0, [sp, #12]
   2023c:	ldrb	r0, [r9, #88]	; 0x58
   20240:	orr	r0, r0, #2
   20244:	strb	r0, [r9, #88]	; 0x58
   20248:	mov	r0, r9
   2024c:	bl	2001c <__assert_fail@plt+0xe380>
   20250:	cmp	r0, #0
   20254:	beq	20298 <__assert_fail@plt+0xe5fc>
   20258:	mov	r2, r0
   2025c:	mov	r0, #10
   20260:	add	r3, sp, #20
   20264:	mov	r1, r4
   20268:	str	r0, [sp, #24]
   2026c:	mov	r0, r9
   20270:	str	r8, [sp, #20]
   20274:	bl	2001c <__assert_fail@plt+0xe380>
   20278:	mov	r7, r0
   2027c:	b	2028c <__assert_fail@plt+0xe5f0>
   20280:	mov	r0, r6
   20284:	bl	1d674 <__assert_fail@plt+0xb9d8>
   20288:	mov	r7, r4
   2028c:	mov	r0, r7
   20290:	sub	sp, fp, #28
   20294:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20298:	mov	r0, r5
   2029c:	bl	1a12c <__assert_fail@plt+0x8490>
   202a0:	mov	r0, r6
   202a4:	bl	1d674 <__assert_fail@plt+0xb9d8>
   202a8:	ldr	r1, [fp, #12]
   202ac:	mov	r0, #12
   202b0:	b	202c8 <__assert_fail@plt+0xe62c>
   202b4:	mov	r0, r5
   202b8:	bl	1a12c <__assert_fail@plt+0x8490>
   202bc:	ldr	r1, [fp, #12]
   202c0:	mov	r0, #12
   202c4:	mov	r7, #0
   202c8:	str	r0, [r1]
   202cc:	b	2028c <__assert_fail@plt+0xe5f0>
   202d0:	mov	r4, r0
   202d4:	mov	r0, r5
   202d8:	bl	1a12c <__assert_fail@plt+0x8490>
   202dc:	mov	r0, r6
   202e0:	bl	1d674 <__assert_fail@plt+0xb9d8>
   202e4:	ldr	r0, [fp, #12]
   202e8:	str	r4, [r0]
   202ec:	b	2028c <__assert_fail@plt+0xe5f0>
   202f0:	push	{fp, lr}
   202f4:	mov	fp, sp
   202f8:	ldr	ip, [r1, #40]	; 0x28
   202fc:	ldr	r3, [r1, #56]	; 0x38
   20300:	cmp	r3, ip
   20304:	ble	20380 <__assert_fail@plt+0xe6e4>
   20308:	ldr	r3, [r1, #4]
   2030c:	ldrb	lr, [r3, ip]
   20310:	strb	lr, [r0]
   20314:	ldr	r3, [r1, #80]	; 0x50
   20318:	cmp	r3, #2
   2031c:	blt	20340 <__assert_fail@plt+0xe6a4>
   20320:	ldr	r3, [r1, #28]
   20324:	ldr	ip, [r1, #40]	; 0x28
   20328:	cmp	ip, r3
   2032c:	beq	20340 <__assert_fail@plt+0xe6a4>
   20330:	ldr	r3, [r1, #8]
   20334:	ldr	r3, [r3, ip, lsl #2]
   20338:	cmn	r3, #1
   2033c:	beq	20428 <__assert_fail@plt+0xe78c>
   20340:	tst	r2, #1
   20344:	beq	20390 <__assert_fail@plt+0xe6f4>
   20348:	cmp	lr, #92	; 0x5c
   2034c:	bne	20390 <__assert_fail@plt+0xe6f4>
   20350:	ldr	r2, [r1, #40]	; 0x28
   20354:	ldr	r3, [r1, #48]	; 0x30
   20358:	add	r2, r2, #1
   2035c:	cmp	r2, r3
   20360:	bge	20428 <__assert_fail@plt+0xe78c>
   20364:	str	r2, [r1, #40]	; 0x28
   20368:	ldr	r1, [r1, #4]
   2036c:	ldrb	r2, [r1, r2]
   20370:	mov	r1, #1
   20374:	strb	r1, [r0, #4]
   20378:	strb	r2, [r0]
   2037c:	b	20430 <__assert_fail@plt+0xe794>
   20380:	mov	r1, #2
   20384:	strb	r1, [r0, #4]
   20388:	mov	r1, #0
   2038c:	b	20430 <__assert_fail@plt+0xe794>
   20390:	cmp	lr, #92	; 0x5c
   20394:	bgt	203e8 <__assert_fail@plt+0xe74c>
   20398:	cmp	lr, #45	; 0x2d
   2039c:	beq	20400 <__assert_fail@plt+0xe764>
   203a0:	cmp	lr, #91	; 0x5b
   203a4:	bne	20428 <__assert_fail@plt+0xe78c>
   203a8:	ldr	r3, [r1, #40]	; 0x28
   203ac:	ldr	ip, [r1, #48]	; 0x30
   203b0:	add	r3, r3, #1
   203b4:	cmp	r3, ip
   203b8:	bge	20418 <__assert_fail@plt+0xe77c>
   203bc:	ldr	r1, [r1, #4]
   203c0:	ldrb	r1, [r1, r3]
   203c4:	cmp	r1, #61	; 0x3d
   203c8:	strb	r1, [r0]
   203cc:	beq	20438 <__assert_fail@plt+0xe79c>
   203d0:	cmp	r1, #58	; 0x3a
   203d4:	beq	20440 <__assert_fail@plt+0xe7a4>
   203d8:	cmp	r1, #46	; 0x2e
   203dc:	bne	20420 <__assert_fail@plt+0xe784>
   203e0:	mov	r1, #26
   203e4:	b	2044c <__assert_fail@plt+0xe7b0>
   203e8:	cmp	lr, #93	; 0x5d
   203ec:	beq	20408 <__assert_fail@plt+0xe76c>
   203f0:	cmp	lr, #94	; 0x5e
   203f4:	bne	20428 <__assert_fail@plt+0xe78c>
   203f8:	mov	r1, #25
   203fc:	b	2040c <__assert_fail@plt+0xe770>
   20400:	mov	r1, #22
   20404:	b	2040c <__assert_fail@plt+0xe770>
   20408:	mov	r1, #21
   2040c:	strb	r1, [r0, #4]
   20410:	mov	r1, #1
   20414:	b	20430 <__assert_fail@plt+0xe794>
   20418:	mov	r1, #0
   2041c:	strb	r1, [r0]
   20420:	mov	r1, #91	; 0x5b
   20424:	strb	r1, [r0]
   20428:	mov	r1, #1
   2042c:	strb	r1, [r0, #4]
   20430:	mov	r0, r1
   20434:	pop	{fp, pc}
   20438:	mov	r1, #28
   2043c:	b	2044c <__assert_fail@plt+0xe7b0>
   20440:	tst	r2, #4
   20444:	beq	20420 <__assert_fail@plt+0xe784>
   20448:	mov	r1, #30
   2044c:	strb	r1, [r0, #4]
   20450:	mov	r1, #2
   20454:	b	20430 <__assert_fail@plt+0xe794>
   20458:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2045c:	add	fp, sp, #24
   20460:	sub	sp, sp, #8
   20464:	mov	r5, r2
   20468:	ldr	r2, [r1, #80]	; 0x50
   2046c:	mov	r9, r0
   20470:	ldr	r0, [r1, #40]	; 0x28
   20474:	cmp	r2, #1
   20478:	beq	204ec <__assert_fail@plt+0xe850>
   2047c:	ldr	r2, [r1, #28]
   20480:	add	r6, r0, #1
   20484:	cmp	r6, r2
   20488:	bge	204ec <__assert_fail@plt+0xe850>
   2048c:	ldr	lr, [r1, #8]
   20490:	sub	r4, r0, r2
   20494:	sub	ip, r2, r0
   20498:	mvn	r2, #0
   2049c:	add	r6, lr, r0, lsl #2
   204a0:	ldr	r7, [r6, -r2, lsl #2]
   204a4:	cmn	r7, #1
   204a8:	bne	204bc <__assert_fail@plt+0xe820>
   204ac:	sub	r2, r2, #1
   204b0:	cmp	r4, r2
   204b4:	bne	204a0 <__assert_fail@plt+0xe804>
   204b8:	b	204c8 <__assert_fail@plt+0xe82c>
   204bc:	rsb	ip, r2, #0
   204c0:	cmp	ip, #2
   204c4:	bcc	204ec <__assert_fail@plt+0xe850>
   204c8:	mov	r2, #1
   204cc:	str	r2, [r9]
   204d0:	ldr	r0, [lr, r0, lsl #2]
   204d4:	str	r0, [r9, #4]
   204d8:	ldr	r0, [r1, #40]	; 0x28
   204dc:	add	r0, r0, ip
   204e0:	str	r0, [r1, #40]	; 0x28
   204e4:	mov	r0, #0
   204e8:	b	20714 <__assert_fail@plt+0xea78>
   204ec:	add	r2, r0, r3
   204f0:	str	r2, [r1, #40]	; 0x28
   204f4:	ldrb	r6, [r5, #4]
   204f8:	sub	r0, r6, #22
   204fc:	cmp	r0, #8
   20500:	bhi	20704 <__assert_fail@plt+0xea68>
   20504:	add	r3, pc, #0
   20508:	ldr	pc, [r3, r0, lsl #2]
   2050c:	ldrdeq	r0, [r2], -ip
   20510:	andeq	r0, r2, r4, lsl #14
   20514:	andeq	r0, r2, r4, lsl #14
   20518:	andeq	r0, r2, r4, lsl #14
   2051c:	andeq	r0, r2, r0, lsr r5
   20520:	andeq	r0, r2, r4, lsl #14
   20524:	andeq	r0, r2, r0, lsr r5
   20528:	andeq	r0, r2, r4, lsl #14
   2052c:	andeq	r0, r2, r0, lsr r5
   20530:	ldr	r3, [r1, #56]	; 0x38
   20534:	mov	r0, #7
   20538:	cmp	r3, r2
   2053c:	ble	20714 <__assert_fail@plt+0xea78>
   20540:	ldrb	r3, [r5]
   20544:	mov	r2, #0
   20548:	uxtb	r7, r6
   2054c:	cmp	r7, #30
   20550:	bne	20560 <__assert_fail@plt+0xe8c4>
   20554:	ldrb	r7, [r1, #75]	; 0x4b
   20558:	cmp	r7, #0
   2055c:	bne	205b8 <__assert_fail@plt+0xe91c>
   20560:	ldr	r4, [r1, #40]	; 0x28
   20564:	ldr	r7, [r1, #4]
   20568:	add	r6, r4, #1
   2056c:	str	r6, [r1, #40]	; 0x28
   20570:	ldrb	r4, [r7, r4]
   20574:	ldr	r7, [r1, #56]	; 0x38
   20578:	cmp	r7, r6
   2057c:	ble	20714 <__assert_fail@plt+0xea78>
   20580:	uxtb	r7, r4
   20584:	cmp	r7, r3
   20588:	bne	2059c <__assert_fail@plt+0xe900>
   2058c:	ldr	r7, [r1, #4]
   20590:	ldrb	r7, [r7, r6]
   20594:	cmp	r7, #93	; 0x5d
   20598:	beq	20690 <__assert_fail@plt+0xe9f4>
   2059c:	ldr	r7, [r9, #4]
   205a0:	strb	r4, [r7, r2]
   205a4:	add	r2, r2, #1
   205a8:	cmp	r2, #32
   205ac:	beq	20714 <__assert_fail@plt+0xea78>
   205b0:	ldrb	r6, [r5, #4]
   205b4:	b	20548 <__assert_fail@plt+0xe8ac>
   205b8:	ldrb	r7, [r1, #76]	; 0x4c
   205bc:	cmp	r7, #0
   205c0:	beq	2065c <__assert_fail@plt+0xe9c0>
   205c4:	ldr	lr, [r1, #28]
   205c8:	ldr	ip, [r1, #40]	; 0x28
   205cc:	cmp	lr, ip
   205d0:	beq	205e4 <__assert_fail@plt+0xe948>
   205d4:	ldr	r4, [r1, #8]
   205d8:	ldr	r4, [r4, ip, lsl #2]
   205dc:	cmn	r4, #1
   205e0:	beq	2067c <__assert_fail@plt+0xe9e0>
   205e4:	ldr	r6, [r1, #12]
   205e8:	ldr	r7, [r1, #24]
   205ec:	ldr	r4, [r1]
   205f0:	ldr	r6, [r6, ip, lsl #2]
   205f4:	add	r6, r7, r6
   205f8:	add	r4, r4, r6
   205fc:	ldrsb	r4, [r4]
   20600:	cmn	r4, #1
   20604:	ble	2067c <__assert_fail@plt+0xe9e0>
   20608:	ldr	r7, [r1, #80]	; 0x50
   2060c:	mov	r6, #1
   20610:	cmp	r7, #1
   20614:	beq	20650 <__assert_fail@plt+0xe9b4>
   20618:	add	r7, ip, #1
   2061c:	cmp	r7, lr
   20620:	bge	20650 <__assert_fail@plt+0xe9b4>
   20624:	ldr	r6, [r1, #8]
   20628:	sub	lr, lr, ip
   2062c:	add	r8, r6, ip, lsl #2
   20630:	mov	r6, #1
   20634:	ldr	r7, [r8, r6, lsl #2]
   20638:	cmn	r7, #1
   2063c:	bne	20650 <__assert_fail@plt+0xe9b4>
   20640:	add	r6, r6, #1
   20644:	cmp	lr, r6
   20648:	bne	20634 <__assert_fail@plt+0xe998>
   2064c:	mov	r6, lr
   20650:	add	r6, r6, ip
   20654:	str	r6, [r1, #40]	; 0x28
   20658:	b	20574 <__assert_fail@plt+0xe8d8>
   2065c:	ldr	r7, [r1, #40]	; 0x28
   20660:	ldr	r4, [r1, #24]
   20664:	ldr	ip, [r1]
   20668:	add	r6, r7, #1
   2066c:	add	r7, r7, r4
   20670:	str	r6, [r1, #40]	; 0x28
   20674:	ldrb	r4, [ip, r7]
   20678:	b	20574 <__assert_fail@plt+0xe8d8>
   2067c:	add	r6, ip, #1
   20680:	str	r6, [r1, #40]	; 0x28
   20684:	ldr	r7, [r1, #4]
   20688:	ldrb	r4, [r7, ip]
   2068c:	b	20574 <__assert_fail@plt+0xe8d8>
   20690:	add	r0, r6, #1
   20694:	str	r0, [r1, #40]	; 0x28
   20698:	mov	r0, #0
   2069c:	ldr	r1, [r9, #4]
   206a0:	strb	r0, [r1, r2]
   206a4:	ldrb	r1, [r5, #4]
   206a8:	cmp	r1, #30
   206ac:	beq	206c8 <__assert_fail@plt+0xea2c>
   206b0:	cmp	r1, #28
   206b4:	beq	206d0 <__assert_fail@plt+0xea34>
   206b8:	cmp	r1, #26
   206bc:	moveq	r1, #3
   206c0:	streq	r1, [r9]
   206c4:	b	20714 <__assert_fail@plt+0xea78>
   206c8:	mov	r1, #4
   206cc:	b	206d4 <__assert_fail@plt+0xea38>
   206d0:	mov	r1, #2
   206d4:	str	r1, [r9]
   206d8:	b	20714 <__assert_fail@plt+0xea78>
   206dc:	ldr	r0, [fp, #12]
   206e0:	cmp	r0, #0
   206e4:	bne	20704 <__assert_fail@plt+0xea68>
   206e8:	ldr	r2, [fp, #8]
   206ec:	mov	r0, sp
   206f0:	bl	202f0 <__assert_fail@plt+0xe654>
   206f4:	ldrb	r1, [sp, #4]
   206f8:	mov	r0, #11
   206fc:	cmp	r1, #21
   20700:	bne	20714 <__assert_fail@plt+0xea78>
   20704:	mov	r0, #0
   20708:	str	r0, [r9]
   2070c:	ldrb	r1, [r5]
   20710:	strb	r1, [r9, #4]
   20714:	sub	sp, fp, #24
   20718:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2071c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20720:	add	fp, sp, #24
   20724:	mov	r8, r0
   20728:	ldrb	r0, [fp, #14]
   2072c:	ldr	r6, [fp, #8]
   20730:	mov	r5, r3
   20734:	mov	r7, r2
   20738:	mov	r4, r1
   2073c:	tst	r0, #64	; 0x40
   20740:	beq	2077c <__assert_fail@plt+0xeae0>
   20744:	movw	r1, #42628	; 0xa684
   20748:	mov	r0, r6
   2074c:	movt	r1, #2
   20750:	bl	1184c <strcmp@plt>
   20754:	cmp	r0, #0
   20758:	beq	20774 <__assert_fail@plt+0xead8>
   2075c:	movw	r1, #42634	; 0xa68a
   20760:	mov	r0, r6
   20764:	movt	r1, #2
   20768:	bl	1184c <strcmp@plt>
   2076c:	cmp	r0, #0
   20770:	bne	2077c <__assert_fail@plt+0xeae0>
   20774:	movw	r6, #42640	; 0xa690
   20778:	movt	r6, #2
   2077c:	ldr	r0, [r5]
   20780:	ldr	r1, [r7, #36]	; 0x24
   20784:	cmp	r0, r1
   20788:	beq	20c7c <__assert_fail@plt+0xefe0>
   2078c:	mov	r0, r6
   20790:	bl	1181c <wctype@plt>
   20794:	ldr	r2, [r7, #36]	; 0x24
   20798:	ldr	r1, [r7, #12]
   2079c:	add	r3, r2, #1
   207a0:	str	r3, [r7, #36]	; 0x24
   207a4:	str	r0, [r1, r2, lsl #2]
   207a8:	movw	r1, #42614	; 0xa676
   207ac:	mov	r0, r6
   207b0:	movt	r1, #2
   207b4:	bl	1184c <strcmp@plt>
   207b8:	cmp	r0, #0
   207bc:	beq	20920 <__assert_fail@plt+0xec84>
   207c0:	movw	r1, #42646	; 0xa696
   207c4:	mov	r0, r6
   207c8:	movt	r1, #2
   207cc:	bl	1184c <strcmp@plt>
   207d0:	cmp	r0, #0
   207d4:	beq	2096c <__assert_fail@plt+0xecd0>
   207d8:	movw	r1, #42634	; 0xa68a
   207dc:	mov	r0, r6
   207e0:	movt	r1, #2
   207e4:	bl	1184c <strcmp@plt>
   207e8:	cmp	r0, #0
   207ec:	beq	209b8 <__assert_fail@plt+0xed1c>
   207f0:	movw	r1, #42622	; 0xa67e
   207f4:	mov	r0, r6
   207f8:	movt	r1, #2
   207fc:	bl	1184c <strcmp@plt>
   20800:	cmp	r0, #0
   20804:	beq	20a04 <__assert_fail@plt+0xed68>
   20808:	movw	r1, #42640	; 0xa690
   2080c:	mov	r0, r6
   20810:	movt	r1, #2
   20814:	bl	1184c <strcmp@plt>
   20818:	cmp	r0, #0
   2081c:	beq	20a50 <__assert_fail@plt+0xedb4>
   20820:	movw	r1, #42671	; 0xa6af
   20824:	mov	r0, r6
   20828:	movt	r1, #2
   2082c:	bl	1184c <strcmp@plt>
   20830:	cmp	r0, #0
   20834:	beq	20a9c <__assert_fail@plt+0xee00>
   20838:	movw	r1, #36739	; 0x8f83
   2083c:	mov	r0, r6
   20840:	movt	r1, #2
   20844:	bl	1184c <strcmp@plt>
   20848:	cmp	r0, #0
   2084c:	beq	20aec <__assert_fail@plt+0xee50>
   20850:	movw	r1, #42628	; 0xa684
   20854:	mov	r0, r6
   20858:	movt	r1, #2
   2085c:	bl	1184c <strcmp@plt>
   20860:	cmp	r0, #0
   20864:	beq	20b3c <__assert_fail@plt+0xeea0>
   20868:	movw	r1, #42652	; 0xa69c
   2086c:	mov	r0, r6
   20870:	movt	r1, #2
   20874:	bl	1184c <strcmp@plt>
   20878:	cmp	r0, #0
   2087c:	beq	20b8c <__assert_fail@plt+0xeef0>
   20880:	movw	r1, #42658	; 0xa6a2
   20884:	mov	r0, r6
   20888:	movt	r1, #2
   2088c:	bl	1184c <strcmp@plt>
   20890:	cmp	r0, #0
   20894:	beq	20bdc <__assert_fail@plt+0xef40>
   20898:	movw	r1, #42664	; 0xa6a8
   2089c:	mov	r0, r6
   208a0:	movt	r1, #2
   208a4:	bl	1184c <strcmp@plt>
   208a8:	cmp	r0, #0
   208ac:	beq	20c2c <__assert_fail@plt+0xef90>
   208b0:	movw	r1, #42670	; 0xa6ae
   208b4:	mov	r0, r6
   208b8:	movt	r1, #2
   208bc:	bl	1184c <strcmp@plt>
   208c0:	mov	r1, r0
   208c4:	mov	r0, #4
   208c8:	cmp	r1, #0
   208cc:	bne	20c78 <__assert_fail@plt+0xefdc>
   208d0:	bl	11a5c <__ctype_b_loc@plt>
   208d4:	ldr	r1, [r0]
   208d8:	mov	r2, #0
   208dc:	mov	r3, #1
   208e0:	cmp	r8, #0
   208e4:	bne	20ee0 <__assert_fail@plt+0xf244>
   208e8:	ldrb	r0, [r1, #1]
   208ec:	tst	r0, #16
   208f0:	beq	20908 <__assert_fail@plt+0xec6c>
   208f4:	ubfx	r0, r2, #5, #3
   208f8:	and	r6, r2, #31
   208fc:	ldr	r7, [r4, r0, lsl #2]
   20900:	orr	r7, r7, r3, lsl r6
   20904:	str	r7, [r4, r0, lsl #2]
   20908:	add	r2, r2, #1
   2090c:	add	r1, r1, #2
   20910:	mov	r0, #0
   20914:	cmp	r2, #256	; 0x100
   20918:	bne	208e8 <__assert_fail@plt+0xec4c>
   2091c:	b	20c78 <__assert_fail@plt+0xefdc>
   20920:	bl	11a5c <__ctype_b_loc@plt>
   20924:	ldr	r1, [r0]
   20928:	cmp	r8, #0
   2092c:	bne	20d1c <__assert_fail@plt+0xf080>
   20930:	mov	r0, #0
   20934:	mov	r2, #1
   20938:	ldrb	r3, [r1]
   2093c:	tst	r3, #8
   20940:	beq	20958 <__assert_fail@plt+0xecbc>
   20944:	ubfx	r3, r0, #5, #3
   20948:	and	r6, r0, #31
   2094c:	ldr	r7, [r4, r3, lsl #2]
   20950:	orr	r7, r7, r2, lsl r6
   20954:	str	r7, [r4, r3, lsl #2]
   20958:	add	r0, r0, #1
   2095c:	add	r1, r1, #2
   20960:	cmp	r0, #256	; 0x100
   20964:	bne	20938 <__assert_fail@plt+0xec9c>
   20968:	b	20ae4 <__assert_fail@plt+0xee48>
   2096c:	bl	11a5c <__ctype_b_loc@plt>
   20970:	ldr	r1, [r0]
   20974:	cmp	r8, #0
   20978:	bne	20d9c <__assert_fail@plt+0xf100>
   2097c:	mov	r0, #0
   20980:	mov	r2, #1
   20984:	ldrb	r3, [r1]
   20988:	tst	r3, #2
   2098c:	beq	209a4 <__assert_fail@plt+0xed08>
   20990:	ubfx	r3, r0, #5, #3
   20994:	and	r6, r0, #31
   20998:	ldr	r7, [r4, r3, lsl #2]
   2099c:	orr	r7, r7, r2, lsl r6
   209a0:	str	r7, [r4, r3, lsl #2]
   209a4:	add	r0, r0, #1
   209a8:	add	r1, r1, #2
   209ac:	cmp	r0, #256	; 0x100
   209b0:	bne	20984 <__assert_fail@plt+0xece8>
   209b4:	b	20ae4 <__assert_fail@plt+0xee48>
   209b8:	bl	11a5c <__ctype_b_loc@plt>
   209bc:	ldr	r1, [r0]
   209c0:	cmp	r8, #0
   209c4:	bne	20e1c <__assert_fail@plt+0xf180>
   209c8:	mov	r0, #0
   209cc:	mov	r2, #1
   209d0:	ldrb	r3, [r1, #1]
   209d4:	tst	r3, #2
   209d8:	beq	209f0 <__assert_fail@plt+0xed54>
   209dc:	ubfx	r3, r0, #5, #3
   209e0:	and	r6, r0, #31
   209e4:	ldr	r7, [r4, r3, lsl #2]
   209e8:	orr	r7, r7, r2, lsl r6
   209ec:	str	r7, [r4, r3, lsl #2]
   209f0:	add	r0, r0, #1
   209f4:	add	r1, r1, #2
   209f8:	cmp	r0, #256	; 0x100
   209fc:	bne	209d0 <__assert_fail@plt+0xed34>
   20a00:	b	20ae4 <__assert_fail@plt+0xee48>
   20a04:	bl	11a5c <__ctype_b_loc@plt>
   20a08:	ldr	r1, [r0]
   20a0c:	cmp	r8, #0
   20a10:	bne	20e9c <__assert_fail@plt+0xf200>
   20a14:	mov	r0, #0
   20a18:	mov	r2, #1
   20a1c:	ldrb	r3, [r1, #1]
   20a20:	tst	r3, #32
   20a24:	beq	20a3c <__assert_fail@plt+0xeda0>
   20a28:	ubfx	r3, r0, #5, #3
   20a2c:	and	r6, r0, #31
   20a30:	ldr	r7, [r4, r3, lsl #2]
   20a34:	orr	r7, r7, r2, lsl r6
   20a38:	str	r7, [r4, r3, lsl #2]
   20a3c:	add	r0, r0, #1
   20a40:	add	r1, r1, #2
   20a44:	cmp	r0, #256	; 0x100
   20a48:	bne	20a1c <__assert_fail@plt+0xed80>
   20a4c:	b	20ae4 <__assert_fail@plt+0xee48>
   20a50:	bl	11a5c <__ctype_b_loc@plt>
   20a54:	ldr	r1, [r0]
   20a58:	cmp	r8, #0
   20a5c:	bne	20f1c <__assert_fail@plt+0xf280>
   20a60:	mov	r0, #0
   20a64:	mov	r2, #1
   20a68:	ldrb	r3, [r1, #1]
   20a6c:	tst	r3, #4
   20a70:	beq	20a88 <__assert_fail@plt+0xedec>
   20a74:	ubfx	r3, r0, #5, #3
   20a78:	and	r6, r0, #31
   20a7c:	ldr	r7, [r4, r3, lsl #2]
   20a80:	orr	r7, r7, r2, lsl r6
   20a84:	str	r7, [r4, r3, lsl #2]
   20a88:	add	r0, r0, #1
   20a8c:	add	r1, r1, #2
   20a90:	cmp	r0, #256	; 0x100
   20a94:	bne	20a68 <__assert_fail@plt+0xedcc>
   20a98:	b	20ae4 <__assert_fail@plt+0xee48>
   20a9c:	bl	11a5c <__ctype_b_loc@plt>
   20aa0:	ldr	r1, [r0]
   20aa4:	cmp	r8, #0
   20aa8:	bne	20f60 <__assert_fail@plt+0xf2c4>
   20aac:	mov	r0, #0
   20ab0:	mov	r2, #1
   20ab4:	ldrb	r3, [r1, #1]
   20ab8:	tst	r3, #8
   20abc:	beq	20ad4 <__assert_fail@plt+0xee38>
   20ac0:	ubfx	r3, r0, #5, #3
   20ac4:	and	r6, r0, #31
   20ac8:	ldr	r7, [r4, r3, lsl #2]
   20acc:	orr	r7, r7, r2, lsl r6
   20ad0:	str	r7, [r4, r3, lsl #2]
   20ad4:	add	r0, r0, #1
   20ad8:	add	r1, r1, #2
   20adc:	cmp	r0, #256	; 0x100
   20ae0:	bne	20ab4 <__assert_fail@plt+0xee18>
   20ae4:	mov	r0, #0
   20ae8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20aec:	bl	11a5c <__ctype_b_loc@plt>
   20af0:	ldr	r1, [r0]
   20af4:	mov	r2, #0
   20af8:	mov	r3, #1
   20afc:	cmp	r8, #0
   20b00:	bne	20ca4 <__assert_fail@plt+0xf008>
   20b04:	ldrb	r0, [r1, #1]
   20b08:	tst	r0, #64	; 0x40
   20b0c:	beq	20b24 <__assert_fail@plt+0xee88>
   20b10:	ubfx	r0, r2, #5, #3
   20b14:	and	r6, r2, #31
   20b18:	ldr	r7, [r4, r0, lsl #2]
   20b1c:	orr	r7, r7, r3, lsl r6
   20b20:	str	r7, [r4, r0, lsl #2]
   20b24:	add	r2, r2, #1
   20b28:	add	r1, r1, #2
   20b2c:	mov	r0, #0
   20b30:	cmp	r2, #256	; 0x100
   20b34:	bne	20b04 <__assert_fail@plt+0xee68>
   20b38:	b	20c78 <__assert_fail@plt+0xefdc>
   20b3c:	bl	11a5c <__ctype_b_loc@plt>
   20b40:	ldr	r1, [r0]
   20b44:	mov	r2, #0
   20b48:	mov	r3, #1
   20b4c:	cmp	r8, #0
   20b50:	bne	20ce0 <__assert_fail@plt+0xf044>
   20b54:	ldrb	r0, [r1, #1]
   20b58:	tst	r0, #1
   20b5c:	beq	20b74 <__assert_fail@plt+0xeed8>
   20b60:	ubfx	r0, r2, #5, #3
   20b64:	and	r6, r2, #31
   20b68:	ldr	r7, [r4, r0, lsl #2]
   20b6c:	orr	r7, r7, r3, lsl r6
   20b70:	str	r7, [r4, r0, lsl #2]
   20b74:	add	r2, r2, #1
   20b78:	add	r1, r1, #2
   20b7c:	mov	r0, #0
   20b80:	cmp	r2, #256	; 0x100
   20b84:	bne	20b54 <__assert_fail@plt+0xeeb8>
   20b88:	b	20c78 <__assert_fail@plt+0xefdc>
   20b8c:	bl	11a5c <__ctype_b_loc@plt>
   20b90:	ldr	r1, [r0]
   20b94:	mov	r2, #0
   20b98:	mov	r3, #1
   20b9c:	cmp	r8, #0
   20ba0:	bne	20d60 <__assert_fail@plt+0xf0c4>
   20ba4:	ldrb	r0, [r1]
   20ba8:	tst	r0, #1
   20bac:	beq	20bc4 <__assert_fail@plt+0xef28>
   20bb0:	ubfx	r0, r2, #5, #3
   20bb4:	and	r6, r2, #31
   20bb8:	ldr	r7, [r4, r0, lsl #2]
   20bbc:	orr	r7, r7, r3, lsl r6
   20bc0:	str	r7, [r4, r0, lsl #2]
   20bc4:	add	r2, r2, #1
   20bc8:	add	r1, r1, #2
   20bcc:	mov	r0, #0
   20bd0:	cmp	r2, #256	; 0x100
   20bd4:	bne	20ba4 <__assert_fail@plt+0xef08>
   20bd8:	b	20c78 <__assert_fail@plt+0xefdc>
   20bdc:	bl	11a5c <__ctype_b_loc@plt>
   20be0:	ldr	r1, [r0]
   20be4:	mov	r2, #0
   20be8:	mov	r3, #1
   20bec:	cmp	r8, #0
   20bf0:	bne	20de0 <__assert_fail@plt+0xf144>
   20bf4:	ldrsh	r0, [r1]
   20bf8:	cmn	r0, #1
   20bfc:	bgt	20c14 <__assert_fail@plt+0xef78>
   20c00:	ubfx	r0, r2, #5, #3
   20c04:	and	r6, r2, #31
   20c08:	ldr	r7, [r4, r0, lsl #2]
   20c0c:	orr	r7, r7, r3, lsl r6
   20c10:	str	r7, [r4, r0, lsl #2]
   20c14:	add	r2, r2, #1
   20c18:	add	r1, r1, #2
   20c1c:	mov	r0, #0
   20c20:	cmp	r2, #256	; 0x100
   20c24:	bne	20bf4 <__assert_fail@plt+0xef58>
   20c28:	b	20c78 <__assert_fail@plt+0xefdc>
   20c2c:	bl	11a5c <__ctype_b_loc@plt>
   20c30:	ldr	r1, [r0]
   20c34:	mov	r2, #0
   20c38:	mov	r3, #1
   20c3c:	cmp	r8, #0
   20c40:	bne	20e60 <__assert_fail@plt+0xf1c4>
   20c44:	ldrb	r0, [r1]
   20c48:	tst	r0, #4
   20c4c:	beq	20c64 <__assert_fail@plt+0xefc8>
   20c50:	ubfx	r0, r2, #5, #3
   20c54:	and	r6, r2, #31
   20c58:	ldr	r7, [r4, r0, lsl #2]
   20c5c:	orr	r7, r7, r3, lsl r6
   20c60:	str	r7, [r4, r0, lsl #2]
   20c64:	add	r2, r2, #1
   20c68:	add	r1, r1, #2
   20c6c:	mov	r0, #0
   20c70:	cmp	r2, #256	; 0x100
   20c74:	bne	20c44 <__assert_fail@plt+0xefa8>
   20c78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20c7c:	mov	r1, #1
   20c80:	orr	r9, r1, r0, lsl #1
   20c84:	ldr	r0, [r7, #12]
   20c88:	lsl	r1, r9, #2
   20c8c:	bl	1a28c <__assert_fail@plt+0x85f0>
   20c90:	cmp	r0, #0
   20c94:	beq	20fa4 <__assert_fail@plt+0xf308>
   20c98:	str	r0, [r7, #12]
   20c9c:	str	r9, [r5]
   20ca0:	b	2078c <__assert_fail@plt+0xeaf0>
   20ca4:	ldrb	r0, [r1, #1]
   20ca8:	tst	r0, #64	; 0x40
   20cac:	beq	20cc8 <__assert_fail@plt+0xf02c>
   20cb0:	ldrb	r0, [r8, r2]
   20cb4:	ubfx	r7, r0, #5, #3
   20cb8:	and	r0, r0, #31
   20cbc:	ldr	r6, [r4, r7, lsl #2]
   20cc0:	orr	r0, r6, r3, lsl r0
   20cc4:	str	r0, [r4, r7, lsl #2]
   20cc8:	add	r2, r2, #1
   20ccc:	add	r1, r1, #2
   20cd0:	mov	r0, #0
   20cd4:	cmp	r2, #256	; 0x100
   20cd8:	bne	20ca4 <__assert_fail@plt+0xf008>
   20cdc:	b	20c78 <__assert_fail@plt+0xefdc>
   20ce0:	ldrb	r0, [r1, #1]
   20ce4:	tst	r0, #1
   20ce8:	beq	20d04 <__assert_fail@plt+0xf068>
   20cec:	ldrb	r0, [r8, r2]
   20cf0:	ubfx	r7, r0, #5, #3
   20cf4:	and	r0, r0, #31
   20cf8:	ldr	r6, [r4, r7, lsl #2]
   20cfc:	orr	r0, r6, r3, lsl r0
   20d00:	str	r0, [r4, r7, lsl #2]
   20d04:	add	r2, r2, #1
   20d08:	add	r1, r1, #2
   20d0c:	mov	r0, #0
   20d10:	cmp	r2, #256	; 0x100
   20d14:	bne	20ce0 <__assert_fail@plt+0xf044>
   20d18:	b	20c78 <__assert_fail@plt+0xefdc>
   20d1c:	mov	r2, #0
   20d20:	mov	r3, #1
   20d24:	ldrb	r0, [r1]
   20d28:	tst	r0, #8
   20d2c:	beq	20d48 <__assert_fail@plt+0xf0ac>
   20d30:	ldrb	r0, [r8, r2]
   20d34:	ubfx	r7, r0, #5, #3
   20d38:	and	r0, r0, #31
   20d3c:	ldr	r6, [r4, r7, lsl #2]
   20d40:	orr	r0, r6, r3, lsl r0
   20d44:	str	r0, [r4, r7, lsl #2]
   20d48:	add	r2, r2, #1
   20d4c:	add	r1, r1, #2
   20d50:	mov	r0, #0
   20d54:	cmp	r2, #256	; 0x100
   20d58:	bne	20d24 <__assert_fail@plt+0xf088>
   20d5c:	b	20c78 <__assert_fail@plt+0xefdc>
   20d60:	ldrb	r0, [r1]
   20d64:	tst	r0, #1
   20d68:	beq	20d84 <__assert_fail@plt+0xf0e8>
   20d6c:	ldrb	r0, [r8, r2]
   20d70:	ubfx	r7, r0, #5, #3
   20d74:	and	r0, r0, #31
   20d78:	ldr	r6, [r4, r7, lsl #2]
   20d7c:	orr	r0, r6, r3, lsl r0
   20d80:	str	r0, [r4, r7, lsl #2]
   20d84:	add	r2, r2, #1
   20d88:	add	r1, r1, #2
   20d8c:	mov	r0, #0
   20d90:	cmp	r2, #256	; 0x100
   20d94:	bne	20d60 <__assert_fail@plt+0xf0c4>
   20d98:	b	20c78 <__assert_fail@plt+0xefdc>
   20d9c:	mov	r2, #0
   20da0:	mov	r3, #1
   20da4:	ldrb	r0, [r1]
   20da8:	tst	r0, #2
   20dac:	beq	20dc8 <__assert_fail@plt+0xf12c>
   20db0:	ldrb	r0, [r8, r2]
   20db4:	ubfx	r7, r0, #5, #3
   20db8:	and	r0, r0, #31
   20dbc:	ldr	r6, [r4, r7, lsl #2]
   20dc0:	orr	r0, r6, r3, lsl r0
   20dc4:	str	r0, [r4, r7, lsl #2]
   20dc8:	add	r2, r2, #1
   20dcc:	add	r1, r1, #2
   20dd0:	mov	r0, #0
   20dd4:	cmp	r2, #256	; 0x100
   20dd8:	bne	20da4 <__assert_fail@plt+0xf108>
   20ddc:	b	20c78 <__assert_fail@plt+0xefdc>
   20de0:	ldrsh	r0, [r1]
   20de4:	cmn	r0, #1
   20de8:	bgt	20e04 <__assert_fail@plt+0xf168>
   20dec:	ldrb	r0, [r8, r2]
   20df0:	ubfx	r7, r0, #5, #3
   20df4:	and	r0, r0, #31
   20df8:	ldr	r6, [r4, r7, lsl #2]
   20dfc:	orr	r0, r6, r3, lsl r0
   20e00:	str	r0, [r4, r7, lsl #2]
   20e04:	add	r2, r2, #1
   20e08:	add	r1, r1, #2
   20e0c:	mov	r0, #0
   20e10:	cmp	r2, #256	; 0x100
   20e14:	bne	20de0 <__assert_fail@plt+0xf144>
   20e18:	b	20c78 <__assert_fail@plt+0xefdc>
   20e1c:	mov	r2, #0
   20e20:	mov	r3, #1
   20e24:	ldrb	r0, [r1, #1]
   20e28:	tst	r0, #2
   20e2c:	beq	20e48 <__assert_fail@plt+0xf1ac>
   20e30:	ldrb	r0, [r8, r2]
   20e34:	ubfx	r7, r0, #5, #3
   20e38:	and	r0, r0, #31
   20e3c:	ldr	r6, [r4, r7, lsl #2]
   20e40:	orr	r0, r6, r3, lsl r0
   20e44:	str	r0, [r4, r7, lsl #2]
   20e48:	add	r2, r2, #1
   20e4c:	add	r1, r1, #2
   20e50:	mov	r0, #0
   20e54:	cmp	r2, #256	; 0x100
   20e58:	bne	20e24 <__assert_fail@plt+0xf188>
   20e5c:	b	20c78 <__assert_fail@plt+0xefdc>
   20e60:	ldrb	r0, [r1]
   20e64:	tst	r0, #4
   20e68:	beq	20e84 <__assert_fail@plt+0xf1e8>
   20e6c:	ldrb	r0, [r8, r2]
   20e70:	ubfx	r7, r0, #5, #3
   20e74:	and	r0, r0, #31
   20e78:	ldr	r6, [r4, r7, lsl #2]
   20e7c:	orr	r0, r6, r3, lsl r0
   20e80:	str	r0, [r4, r7, lsl #2]
   20e84:	add	r2, r2, #1
   20e88:	add	r1, r1, #2
   20e8c:	mov	r0, #0
   20e90:	cmp	r2, #256	; 0x100
   20e94:	bne	20e60 <__assert_fail@plt+0xf1c4>
   20e98:	b	20c78 <__assert_fail@plt+0xefdc>
   20e9c:	mov	r2, #0
   20ea0:	mov	r3, #1
   20ea4:	ldrb	r0, [r1, #1]
   20ea8:	tst	r0, #32
   20eac:	beq	20ec8 <__assert_fail@plt+0xf22c>
   20eb0:	ldrb	r0, [r8, r2]
   20eb4:	ubfx	r7, r0, #5, #3
   20eb8:	and	r0, r0, #31
   20ebc:	ldr	r6, [r4, r7, lsl #2]
   20ec0:	orr	r0, r6, r3, lsl r0
   20ec4:	str	r0, [r4, r7, lsl #2]
   20ec8:	add	r2, r2, #1
   20ecc:	add	r1, r1, #2
   20ed0:	mov	r0, #0
   20ed4:	cmp	r2, #256	; 0x100
   20ed8:	bne	20ea4 <__assert_fail@plt+0xf208>
   20edc:	b	20c78 <__assert_fail@plt+0xefdc>
   20ee0:	ldrb	r0, [r1, #1]
   20ee4:	tst	r0, #16
   20ee8:	beq	20f04 <__assert_fail@plt+0xf268>
   20eec:	ldrb	r0, [r8, r2]
   20ef0:	ubfx	r7, r0, #5, #3
   20ef4:	and	r0, r0, #31
   20ef8:	ldr	r6, [r4, r7, lsl #2]
   20efc:	orr	r0, r6, r3, lsl r0
   20f00:	str	r0, [r4, r7, lsl #2]
   20f04:	add	r2, r2, #1
   20f08:	add	r1, r1, #2
   20f0c:	mov	r0, #0
   20f10:	cmp	r2, #256	; 0x100
   20f14:	bne	20ee0 <__assert_fail@plt+0xf244>
   20f18:	b	20c78 <__assert_fail@plt+0xefdc>
   20f1c:	mov	r2, #0
   20f20:	mov	r3, #1
   20f24:	ldrb	r0, [r1, #1]
   20f28:	tst	r0, #4
   20f2c:	beq	20f48 <__assert_fail@plt+0xf2ac>
   20f30:	ldrb	r0, [r8, r2]
   20f34:	ubfx	r7, r0, #5, #3
   20f38:	and	r0, r0, #31
   20f3c:	ldr	r6, [r4, r7, lsl #2]
   20f40:	orr	r0, r6, r3, lsl r0
   20f44:	str	r0, [r4, r7, lsl #2]
   20f48:	add	r2, r2, #1
   20f4c:	add	r1, r1, #2
   20f50:	mov	r0, #0
   20f54:	cmp	r2, #256	; 0x100
   20f58:	bne	20f24 <__assert_fail@plt+0xf288>
   20f5c:	b	20c78 <__assert_fail@plt+0xefdc>
   20f60:	mov	r2, #0
   20f64:	mov	r3, #1
   20f68:	ldrb	r0, [r1, #1]
   20f6c:	tst	r0, #8
   20f70:	beq	20f8c <__assert_fail@plt+0xf2f0>
   20f74:	ldrb	r0, [r8, r2]
   20f78:	ubfx	r7, r0, #5, #3
   20f7c:	and	r0, r0, #31
   20f80:	ldr	r6, [r4, r7, lsl #2]
   20f84:	orr	r0, r6, r3, lsl r0
   20f88:	str	r0, [r4, r7, lsl #2]
   20f8c:	add	r2, r2, #1
   20f90:	add	r1, r1, #2
   20f94:	mov	r0, #0
   20f98:	cmp	r2, #256	; 0x100
   20f9c:	bne	20f68 <__assert_fail@plt+0xf2cc>
   20fa0:	b	20c78 <__assert_fail@plt+0xefdc>
   20fa4:	mov	r0, #12
   20fa8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20fac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20fb0:	add	fp, sp, #24
   20fb4:	mov	r5, r1
   20fb8:	mov	r4, r2
   20fbc:	mov	r6, r0
   20fc0:	mvn	r1, #0
   20fc4:	movw	r8, #32816	; 0x8030
   20fc8:	mov	r7, r1
   20fcc:	mov	r0, r5
   20fd0:	mov	r1, r6
   20fd4:	mov	r2, r4
   20fd8:	bl	1e1fc <__assert_fail@plt+0xc560>
   20fdc:	ldr	r1, [r6, #40]	; 0x28
   20fe0:	add	r0, r1, r0
   20fe4:	str	r0, [r6, #40]	; 0x28
   20fe8:	ldrb	r2, [r5, #4]
   20fec:	cmp	r2, #24
   20ff0:	beq	21050 <__assert_fail@plt+0xf3b4>
   20ff4:	cmp	r2, #2
   20ff8:	beq	2104c <__assert_fail@plt+0xf3b0>
   20ffc:	ldrb	r0, [r5]
   21000:	cmp	r0, #44	; 0x2c
   21004:	beq	21050 <__assert_fail@plt+0xf3b4>
   21008:	mvn	r1, #1
   2100c:	cmp	r0, #48	; 0x30
   21010:	bcc	20fc8 <__assert_fail@plt+0xf32c>
   21014:	cmp	r2, #1
   21018:	bne	20fc8 <__assert_fail@plt+0xf32c>
   2101c:	cmn	r7, #2
   21020:	beq	20fc8 <__assert_fail@plt+0xf32c>
   21024:	cmp	r0, #57	; 0x39
   21028:	bhi	20fc8 <__assert_fail@plt+0xf32c>
   2102c:	cmn	r7, #1
   21030:	beq	21044 <__assert_fail@plt+0xf3a8>
   21034:	add	r1, r7, r7, lsl #2
   21038:	add	r0, r0, r1, lsl #1
   2103c:	cmp	r0, r8
   21040:	movge	r0, r8
   21044:	sub	r1, r0, #48	; 0x30
   21048:	b	20fc8 <__assert_fail@plt+0xf32c>
   2104c:	mvn	r7, #1
   21050:	mov	r0, r7
   21054:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21058:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2105c:	add	fp, sp, #24
   21060:	sub	sp, sp, #8
   21064:	mov	r3, r0
   21068:	mov	r5, r0
   2106c:	mov	r8, r1
   21070:	mov	r0, r1
   21074:	mov	r1, #0
   21078:	mov	r2, #0
   2107c:	mov	r7, #0
   21080:	ldr	r4, [r3], #20
   21084:	bl	2001c <__assert_fail@plt+0xe380>
   21088:	cmp	r0, #0
   2108c:	str	r0, [sp, #4]
   21090:	beq	2112c <__assert_fail@plt+0xf490>
   21094:	mov	r9, r0
   21098:	add	r6, sp, #4
   2109c:	mov	r7, #0
   210a0:	str	r4, [r0]
   210a4:	ldr	r0, [r6]
   210a8:	ldr	r1, [r0, #24]
   210ac:	orr	r1, r1, #262144	; 0x40000
   210b0:	str	r1, [r0, #24]
   210b4:	ldr	r0, [r5, #4]
   210b8:	ldr	r4, [r6]
   210bc:	cmp	r0, #0
   210c0:	beq	210d0 <__assert_fail@plt+0xf434>
   210c4:	add	r6, r4, #4
   210c8:	mov	r5, r0
   210cc:	b	21104 <__assert_fail@plt+0xf468>
   210d0:	mov	r1, #0
   210d4:	mov	r0, r5
   210d8:	ldr	r5, [r5, #8]
   210dc:	cmp	r5, r1
   210e0:	cmpne	r5, #0
   210e4:	bne	21100 <__assert_fail@plt+0xf464>
   210e8:	ldr	r5, [r0]
   210ec:	ldr	r4, [r4]
   210f0:	mov	r1, r0
   210f4:	cmp	r5, #0
   210f8:	bne	210d4 <__assert_fail@plt+0xf438>
   210fc:	b	21128 <__assert_fail@plt+0xf48c>
   21100:	add	r6, r4, #8
   21104:	add	r3, r5, #20
   21108:	mov	r0, r8
   2110c:	mov	r1, #0
   21110:	mov	r2, #0
   21114:	bl	2001c <__assert_fail@plt+0xe380>
   21118:	cmp	r0, #0
   2111c:	str	r0, [r6]
   21120:	bne	210a0 <__assert_fail@plt+0xf404>
   21124:	b	2112c <__assert_fail@plt+0xf490>
   21128:	mov	r7, r9
   2112c:	mov	r0, r7
   21130:	sub	sp, fp, #24
   21134:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21138:	push	{r4, r5, r6, r7, fp, lr}
   2113c:	add	fp, sp, #16
   21140:	mov	r6, r0
   21144:	mov	r5, r1
   21148:	mov	r0, r2
   2114c:	mov	r4, r2
   21150:	mov	r1, r6
   21154:	blx	r5
   21158:	cmp	r0, #0
   2115c:	bne	211b0 <__assert_fail@plt+0xf514>
   21160:	ldr	r7, [r6, #4]
   21164:	cmp	r7, #0
   21168:	bne	21198 <__assert_fail@plt+0xf4fc>
   2116c:	mov	r1, #0
   21170:	ldr	r7, [r6, #8]
   21174:	mov	r0, r6
   21178:	cmp	r7, r1
   2117c:	cmpne	r7, #0
   21180:	bne	21198 <__assert_fail@plt+0xf4fc>
   21184:	ldr	r6, [r0]
   21188:	mov	r1, r0
   2118c:	cmp	r6, #0
   21190:	bne	21170 <__assert_fail@plt+0xf4d4>
   21194:	b	211b4 <__assert_fail@plt+0xf518>
   21198:	mov	r0, r4
   2119c:	mov	r1, r7
   211a0:	blx	r5
   211a4:	cmp	r0, #0
   211a8:	mov	r6, r7
   211ac:	beq	21160 <__assert_fail@plt+0xf4c4>
   211b0:	pop	{r4, r5, r6, r7, fp, pc}
   211b4:	mov	r0, #0
   211b8:	pop	{r4, r5, r6, r7, fp, pc}
   211bc:	ldrb	r2, [r1, #24]
   211c0:	cmp	r2, #17
   211c4:	beq	211f8 <__assert_fail@plt+0xf55c>
   211c8:	cmp	r2, #4
   211cc:	bne	2124c <__assert_fail@plt+0xf5b0>
   211d0:	ldr	r2, [r0, #132]	; 0x84
   211d4:	cmp	r2, #0
   211d8:	beq	2124c <__assert_fail@plt+0xf5b0>
   211dc:	ldr	r3, [r1, #20]
   211e0:	ldr	r2, [r2, r3, lsl #2]
   211e4:	mov	r3, #1
   211e8:	str	r2, [r1, #20]
   211ec:	ldr	r1, [r0, #80]	; 0x50
   211f0:	orr	r1, r1, r3, lsl r2
   211f4:	b	21248 <__assert_fail@plt+0xf5ac>
   211f8:	ldr	r2, [r1, #4]
   211fc:	cmp	r2, #0
   21200:	beq	2124c <__assert_fail@plt+0xf5b0>
   21204:	ldrb	r3, [r2, #24]
   21208:	cmp	r3, #17
   2120c:	bne	2124c <__assert_fail@plt+0xf5b0>
   21210:	ldr	r3, [r2, #4]
   21214:	ldr	r2, [r2, #20]
   21218:	cmp	r3, #0
   2121c:	str	r3, [r1, #4]
   21220:	strne	r1, [r3]
   21224:	cmp	r2, #31
   21228:	ldr	r1, [r1, #20]
   2122c:	ldr	r3, [r0, #132]	; 0x84
   21230:	ldr	r1, [r3, r1, lsl #2]
   21234:	str	r1, [r3, r2, lsl #2]
   21238:	bgt	2124c <__assert_fail@plt+0xf5b0>
   2123c:	ldr	r1, [r0, #80]	; 0x50
   21240:	mov	r3, #1
   21244:	bic	r1, r1, r3, lsl r2
   21248:	str	r1, [r0, #80]	; 0x50
   2124c:	mov	r0, #0
   21250:	bx	lr
   21254:	push	{r4, r5, fp, lr}
   21258:	add	fp, sp, #8
   2125c:	sub	sp, sp, #8
   21260:	mov	r5, r0
   21264:	mov	r0, #0
   21268:	mov	r4, r1
   2126c:	str	r0, [sp, #4]
   21270:	ldr	r2, [r1, #4]
   21274:	cmp	r2, #0
   21278:	beq	212a0 <__assert_fail@plt+0xf604>
   2127c:	ldrb	r0, [r2, #24]
   21280:	cmp	r0, #17
   21284:	bne	212a0 <__assert_fail@plt+0xf604>
   21288:	add	r0, sp, #4
   2128c:	mov	r1, r5
   21290:	bl	21558 <__assert_fail@plt+0xf8bc>
   21294:	cmp	r0, #0
   21298:	str	r0, [r4, #4]
   2129c:	strne	r4, [r0]
   212a0:	ldr	r2, [r4, #8]
   212a4:	cmp	r2, #0
   212a8:	beq	212d0 <__assert_fail@plt+0xf634>
   212ac:	ldrb	r0, [r2, #24]
   212b0:	cmp	r0, #17
   212b4:	bne	212d0 <__assert_fail@plt+0xf634>
   212b8:	add	r0, sp, #4
   212bc:	mov	r1, r5
   212c0:	bl	21558 <__assert_fail@plt+0xf8bc>
   212c4:	cmp	r0, #0
   212c8:	str	r0, [r4, #8]
   212cc:	strne	r4, [r0]
   212d0:	ldr	r0, [sp, #4]
   212d4:	sub	sp, fp, #8
   212d8:	pop	{r4, r5, fp, pc}
   212dc:	push	{r4, r5, fp, lr}
   212e0:	add	fp, sp, #8
   212e4:	ldr	r2, [r1, #24]
   212e8:	mov	r5, r0
   212ec:	mov	r4, r1
   212f0:	uxtb	r0, r2
   212f4:	cmp	r0, #16
   212f8:	bne	21318 <__assert_fail@plt+0xf67c>
   212fc:	ldr	r0, [r4, #4]
   21300:	ldr	r1, [r0, #12]
   21304:	str	r1, [r4, #12]
   21308:	ldr	r0, [r0, #28]
   2130c:	str	r0, [r4, #28]
   21310:	mov	r0, #0
   21314:	pop	{r4, r5, fp, pc}
   21318:	str	r4, [r4, #12]
   2131c:	mov	r0, r5
   21320:	ldr	r1, [r4, #20]
   21324:	bl	216ac <__assert_fail@plt+0xfa10>
   21328:	cmn	r0, #1
   2132c:	str	r0, [r4, #28]
   21330:	beq	21364 <__assert_fail@plt+0xf6c8>
   21334:	ldrb	r2, [r4, #24]
   21338:	mov	r1, r0
   2133c:	mov	r0, #0
   21340:	cmp	r2, #12
   21344:	popne	{r4, r5, fp, pc}
   21348:	ldr	r2, [r5]
   2134c:	ldr	r3, [r4, #20]
   21350:	add	r1, r2, r1, lsl #3
   21354:	ldr	r2, [r1, #4]
   21358:	bfi	r2, r3, #8, #10
   2135c:	str	r2, [r1, #4]
   21360:	pop	{r4, r5, fp, pc}
   21364:	mov	r0, #12
   21368:	pop	{r4, r5, fp, pc}
   2136c:	ldrb	r0, [r1, #24]
   21370:	cmp	r0, #16
   21374:	beq	21388 <__assert_fail@plt+0xf6ec>
   21378:	cmp	r0, #11
   2137c:	bne	213a0 <__assert_fail@plt+0xf704>
   21380:	ldr	r0, [r1, #4]
   21384:	b	213c0 <__assert_fail@plt+0xf724>
   21388:	ldmib	r1, {r0, r2}
   2138c:	ldr	r3, [r2, #12]
   21390:	str	r3, [r0, #16]
   21394:	ldr	r0, [r1, #16]
   21398:	str	r0, [r2, #16]
   2139c:	b	213c4 <__assert_fail@plt+0xf728>
   213a0:	ldr	r0, [r1, #4]
   213a4:	cmp	r0, #0
   213a8:	ldrne	r2, [r1, #16]
   213ac:	strne	r2, [r0, #16]
   213b0:	ldr	r0, [r1, #8]
   213b4:	cmp	r0, #0
   213b8:	beq	213c4 <__assert_fail@plt+0xf728>
   213bc:	ldr	r1, [r1, #16]
   213c0:	str	r1, [r0, #16]
   213c4:	mov	r0, #0
   213c8:	bx	lr
   213cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   213d0:	add	fp, sp, #24
   213d4:	ldr	r3, [r1, #24]
   213d8:	mvn	r7, #1
   213dc:	ldr	r2, [r1, #28]
   213e0:	mov	r4, #0
   213e4:	uxtab	r3, r7, r3
   213e8:	cmp	r3, #14
   213ec:	bhi	214f4 <__assert_fail@plt+0xf858>
   213f0:	add	r7, pc, #0
   213f4:	ldr	pc, [r7, r3, lsl #2]
   213f8:	andeq	r1, r2, ip, lsr r5
   213fc:	strdeq	r1, [r2], -r4
   21400:	andeq	r1, r2, r8, lsl #10
   21404:	strdeq	r1, [r2], -r4
   21408:	strdeq	r1, [r2], -r4
   2140c:	strdeq	r1, [r2], -r4
   21410:	andeq	r1, r2, r4, lsr r4
   21414:	andeq	r1, r2, r4, lsr r4
   21418:	andeq	r1, r2, r0, ror r4
   2141c:	andeq	r1, r2, r0, ror r4
   21420:	andeq	r1, r2, r4, lsr r4
   21424:	strdeq	r1, [r2], -r4
   21428:	strdeq	r1, [r2], -r4
   2142c:	strdeq	r1, [r2], -r4
   21430:	andeq	r1, r2, ip, lsr r5
   21434:	ldr	r1, [r1, #16]
   21438:	ldr	r5, [r1, #28]
   2143c:	ldr	r6, [r0, #20]
   21440:	add	r0, r2, r2, lsl #1
   21444:	mov	r1, #1
   21448:	str	r1, [r6, r0, lsl #2]!
   2144c:	mov	r0, #4
   21450:	mov	r7, r6
   21454:	str	r1, [r7, #4]!
   21458:	bl	1a1f8 <__assert_fail@plt+0x855c>
   2145c:	cmp	r0, #0
   21460:	str	r0, [r6, #8]
   21464:	beq	21544 <__assert_fail@plt+0xf8a8>
   21468:	str	r5, [r0]
   2146c:	b	2153c <__assert_fail@plt+0xf8a0>
   21470:	ldrb	r3, [r0, #88]	; 0x58
   21474:	add	r6, r1, #16
   21478:	add	r5, r2, r2, lsl #1
   2147c:	orr	r3, r3, #1
   21480:	strb	r3, [r0, #88]	; 0x58
   21484:	mov	r3, r6
   21488:	ldr	r7, [r1, #4]
   2148c:	ldr	r1, [r1, #8]
   21490:	cmp	r1, #0
   21494:	addne	r3, r1, #12
   21498:	cmp	r7, #0
   2149c:	ldr	r1, [r3]
   214a0:	addne	r6, r7, #12
   214a4:	ldr	r8, [r1, #28]
   214a8:	ldr	r1, [r6]
   214ac:	ldr	r6, [r0, #20]
   214b0:	mov	r0, #2
   214b4:	ldr	r9, [r1, #28]
   214b8:	mov	r7, r6
   214bc:	str	r0, [r7, r5, lsl #2]!
   214c0:	mov	r0, #8
   214c4:	bl	1a1f8 <__assert_fail@plt+0x855c>
   214c8:	cmp	r0, #0
   214cc:	str	r0, [r7, #8]
   214d0:	beq	21550 <__assert_fail@plt+0xf8b4>
   214d4:	add	r1, r6, r5, lsl #2
   214d8:	cmp	r9, r8
   214dc:	add	r1, r1, #4
   214e0:	bne	21528 <__assert_fail@plt+0xf88c>
   214e4:	mov	r2, #1
   214e8:	str	r2, [r1]
   214ec:	str	r9, [r0]
   214f0:	b	2153c <__assert_fail@plt+0xf8a0>
   214f4:	ldr	r1, [r1, #16]
   214f8:	ldr	r0, [r0, #12]
   214fc:	ldr	r1, [r1, #28]
   21500:	str	r1, [r0, r2, lsl #2]
   21504:	b	2153c <__assert_fail@plt+0xf8a0>
   21508:	ldr	r7, [r1, #16]
   2150c:	ldr	r3, [r0, #12]
   21510:	ldr	r5, [r7, #28]
   21514:	str	r5, [r3, r2, lsl #2]
   21518:	ldrb	r1, [r1, #24]
   2151c:	cmp	r1, #4
   21520:	beq	2143c <__assert_fail@plt+0xf7a0>
   21524:	b	2153c <__assert_fail@plt+0xf8a0>
   21528:	mov	r2, #2
   2152c:	str	r2, [r1]
   21530:	stmcs	r0, {r8, r9}
   21534:	strcc	r9, [r0]
   21538:	strcc	r8, [r0, #4]
   2153c:	mov	r0, r4
   21540:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21544:	mov	r0, #0
   21548:	str	r0, [r7]
   2154c:	str	r0, [r6]
   21550:	mov	r4, #12
   21554:	b	2153c <__assert_fail@plt+0xf8a0>
   21558:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2155c:	add	fp, sp, #28
   21560:	sub	sp, sp, #12
   21564:	ldr	r5, [r2, #4]
   21568:	ldr	sl, [r1]
   2156c:	mov	r9, r2
   21570:	cmp	r5, #0
   21574:	ldrbne	r1, [r1, #28]
   21578:	andsne	r1, r1, #16
   2157c:	bne	21684 <__assert_fail@plt+0xf9e8>
   21580:	str	r0, [sp]
   21584:	mov	r0, #8
   21588:	mov	r8, #0
   2158c:	add	r3, sp, #4
   21590:	mov	r1, #0
   21594:	mov	r2, #0
   21598:	str	r0, [sp, #8]
   2159c:	mov	r0, sl
   215a0:	str	r8, [sp, #4]
   215a4:	bl	2001c <__assert_fail@plt+0xe380>
   215a8:	mov	r7, r0
   215ac:	mov	r0, #9
   215b0:	add	r3, sp, #4
   215b4:	mov	r1, #0
   215b8:	mov	r2, #0
   215bc:	str	r0, [sp, #8]
   215c0:	mov	r0, sl
   215c4:	str	r8, [sp, #4]
   215c8:	bl	2001c <__assert_fail@plt+0xe380>
   215cc:	mov	r4, r0
   215d0:	cmp	r5, #0
   215d4:	mov	r6, r0
   215d8:	beq	21600 <__assert_fail@plt+0xf964>
   215dc:	mov	r0, #16
   215e0:	add	r3, sp, #4
   215e4:	mov	r1, r5
   215e8:	mov	r2, r4
   215ec:	str	r0, [sp, #8]
   215f0:	mov	r0, sl
   215f4:	str	r8, [sp, #4]
   215f8:	bl	2001c <__assert_fail@plt+0xe380>
   215fc:	mov	r6, r0
   21600:	mov	r0, #16
   21604:	add	r3, sp, #4
   21608:	mov	r1, r7
   2160c:	mov	r2, r6
   21610:	str	r0, [sp, #8]
   21614:	mov	r0, sl
   21618:	str	r8, [sp, #4]
   2161c:	bl	2001c <__assert_fail@plt+0xe380>
   21620:	cmp	r4, #0
   21624:	beq	21634 <__assert_fail@plt+0xf998>
   21628:	cmp	r7, #0
   2162c:	cmpne	r6, #0
   21630:	bne	21648 <__assert_fail@plt+0xf9ac>
   21634:	ldr	r1, [sp]
   21638:	mov	r0, #12
   2163c:	mov	r5, #0
   21640:	str	r0, [r1]
   21644:	b	216a0 <__assert_fail@plt+0xfa04>
   21648:	mov	r5, r0
   2164c:	cmp	r0, #0
   21650:	beq	21634 <__assert_fail@plt+0xf998>
   21654:	ldr	r0, [r9, #20]
   21658:	str	r0, [r4, #20]
   2165c:	str	r0, [r7, #20]
   21660:	ldr	r1, [r9, #24]
   21664:	ldr	r0, [r4, #24]
   21668:	lsr	r1, r1, #19
   2166c:	bfi	r0, r1, #19, #1
   21670:	str	r0, [r4, #24]
   21674:	ldr	r0, [r7, #24]
   21678:	bfi	r0, r1, #19, #1
   2167c:	str	r0, [r7, #24]
   21680:	b	216a0 <__assert_fail@plt+0xfa04>
   21684:	ldr	r3, [r9, #20]
   21688:	cmp	r3, #31
   2168c:	bgt	216a0 <__assert_fail@plt+0xfa04>
   21690:	ldr	r1, [sl, #80]	; 0x50
   21694:	mov	r2, #1
   21698:	tst	r1, r2, lsl r3
   2169c:	bne	21580 <__assert_fail@plt+0xf8e4>
   216a0:	mov	r0, r5
   216a4:	sub	sp, fp, #28
   216a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   216ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   216b0:	add	fp, sp, #28
   216b4:	sub	sp, sp, #12
   216b8:	mov	r4, r0
   216bc:	ldr	r7, [r0, #4]
   216c0:	ldr	r0, [r0, #8]
   216c4:	mov	r5, r2
   216c8:	mov	r9, r1
   216cc:	cmp	r0, r7
   216d0:	bcs	2179c <__assert_fail@plt+0xfb00>
   216d4:	ldr	r1, [r4]
   216d8:	str	r9, [r1, r0, lsl #3]!
   216dc:	str	r5, [r1, #4]
   216e0:	ldr	r0, [r4]
   216e4:	ldr	r1, [r4, #8]
   216e8:	add	r0, r0, r1, lsl #3
   216ec:	ldr	r1, [r0, #4]
   216f0:	bfc	r1, #8, #10
   216f4:	str	r1, [r0, #4]
   216f8:	uxtb	r1, r5
   216fc:	cmp	r1, #5
   21700:	bne	21714 <__assert_fail@plt+0xfa78>
   21704:	ldr	r2, [r4, #92]	; 0x5c
   21708:	mov	r0, #1048576	; 0x100000
   2170c:	cmp	r2, #1
   21710:	bgt	21724 <__assert_fail@plt+0xfa88>
   21714:	sub	r0, r1, #6
   21718:	clz	r0, r0
   2171c:	lsr	r0, r0, #5
   21720:	lsl	r0, r0, #20
   21724:	ldr	r1, [r4]
   21728:	ldr	r2, [r4, #8]
   2172c:	add	r1, r1, r2, lsl #3
   21730:	ldr	r2, [r1, #4]
   21734:	bic	r2, r2, #1048576	; 0x100000
   21738:	orr	r0, r2, r0
   2173c:	mvn	r2, #0
   21740:	str	r0, [r1, #4]
   21744:	ldr	r0, [r4, #8]
   21748:	ldr	r1, [r4, #12]
   2174c:	str	r2, [r1, r0, lsl #2]
   21750:	mov	r2, #0
   21754:	ldr	r0, [r4, #8]
   21758:	ldr	r1, [r4, #20]
   2175c:	add	r0, r0, r0, lsl #1
   21760:	str	r2, [r1, r0, lsl #2]!
   21764:	str	r2, [r1, #4]
   21768:	str	r2, [r1, #8]
   2176c:	ldr	r0, [r4, #8]
   21770:	ldr	r1, [r4, #24]
   21774:	add	r0, r0, r0, lsl #1
   21778:	str	r2, [r1, r0, lsl #2]!
   2177c:	str	r2, [r1, #4]
   21780:	str	r2, [r1, #8]
   21784:	ldr	r6, [r4, #8]
   21788:	add	r0, r6, #1
   2178c:	str	r0, [r4, #8]
   21790:	mov	r0, r6
   21794:	sub	sp, fp, #28
   21798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2179c:	movw	r0, #21845	; 0x5555
   217a0:	lsl	r1, r7, #1
   217a4:	mvn	r6, #0
   217a8:	movt	r0, #5461	; 0x1555
   217ac:	cmp	r1, r0
   217b0:	bhi	21790 <__assert_fail@plt+0xfaf4>
   217b4:	ldr	r0, [r4]
   217b8:	str	r1, [sp, #8]
   217bc:	lsl	r1, r7, #4
   217c0:	bl	1a28c <__assert_fail@plt+0x85f0>
   217c4:	cmp	r0, #0
   217c8:	beq	21790 <__assert_fail@plt+0xfaf4>
   217cc:	str	r0, [r4]
   217d0:	lsl	r8, r7, #3
   217d4:	ldr	r0, [r4, #12]
   217d8:	mov	r1, r8
   217dc:	bl	1a28c <__assert_fail@plt+0x85f0>
   217e0:	str	r0, [sp, #4]
   217e4:	ldr	r0, [r4, #16]
   217e8:	mov	r1, r8
   217ec:	bl	1a28c <__assert_fail@plt+0x85f0>
   217f0:	mov	r2, r0
   217f4:	add	r1, r7, r7, lsl #1
   217f8:	ldr	r0, [r4, #20]
   217fc:	mov	r7, r2
   21800:	lsl	r8, r1, #3
   21804:	mov	r1, r8
   21808:	bl	1a28c <__assert_fail@plt+0x85f0>
   2180c:	mov	sl, r0
   21810:	ldr	r0, [r4, #24]
   21814:	mov	r1, r8
   21818:	bl	1a28c <__assert_fail@plt+0x85f0>
   2181c:	mov	r8, r0
   21820:	ldr	r0, [sp, #4]
   21824:	cmp	r0, #0
   21828:	beq	21838 <__assert_fail@plt+0xfb9c>
   2182c:	cmp	r7, #0
   21830:	cmpne	sl, #0
   21834:	bne	21858 <__assert_fail@plt+0xfbbc>
   21838:	bl	1a12c <__assert_fail@plt+0x8490>
   2183c:	mov	r0, r7
   21840:	bl	1a12c <__assert_fail@plt+0x8490>
   21844:	mov	r0, sl
   21848:	bl	1a12c <__assert_fail@plt+0x8490>
   2184c:	mov	r0, r8
   21850:	bl	1a12c <__assert_fail@plt+0x8490>
   21854:	b	21790 <__assert_fail@plt+0xfaf4>
   21858:	cmp	r8, #0
   2185c:	beq	21838 <__assert_fail@plt+0xfb9c>
   21860:	add	r1, r4, #12
   21864:	stm	r1, {r0, r7, sl}
   21868:	str	r8, [r4, #24]
   2186c:	ldr	r0, [sp, #8]
   21870:	str	r0, [r4, #4]
   21874:	ldr	r0, [r4, #8]
   21878:	b	216d4 <__assert_fail@plt+0xfa38>
   2187c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21880:	add	fp, sp, #28
   21884:	sub	sp, sp, #44	; 0x2c
   21888:	mov	r8, r0
   2188c:	ldr	r0, [r1, #20]
   21890:	add	r4, r2, r2, lsl #1
   21894:	mov	r5, r1
   21898:	mov	r1, #0
   2189c:	mov	r9, r3
   218a0:	mov	r6, r2
   218a4:	add	r0, r0, r4, lsl #2
   218a8:	ldr	r0, [r0, #4]
   218ac:	str	r1, [sp, #36]	; 0x24
   218b0:	add	r0, r0, #1
   218b4:	str	r0, [sp, #32]
   218b8:	lsl	r0, r0, #2
   218bc:	bl	1a1f8 <__assert_fail@plt+0x855c>
   218c0:	cmp	r0, #0
   218c4:	str	r0, [sp, #40]	; 0x28
   218c8:	beq	21a90 <__assert_fail@plt+0xfdf4>
   218cc:	mov	r1, #1
   218d0:	str	r6, [r0]
   218d4:	str	r1, [sp, #36]	; 0x24
   218d8:	mvn	r1, #0
   218dc:	ldr	r0, [r5, #24]
   218e0:	add	r0, r0, r4, lsl #2
   218e4:	str	r1, [r0, #4]
   218e8:	ldr	r2, [r5]
   218ec:	add	r0, r2, r6, lsl #3
   218f0:	ldr	r0, [r0, #4]
   218f4:	ubfx	r1, r0, #8, #10
   218f8:	cmp	r1, #0
   218fc:	beq	21958 <__assert_fail@plt+0xfcbc>
   21900:	ldr	r3, [r5, #20]
   21904:	add	r3, r3, r4, lsl #2
   21908:	ldr	r7, [r3, #4]
   2190c:	cmp	r7, #0
   21910:	beq	21958 <__assert_fail@plt+0xfcbc>
   21914:	ldr	r3, [r3, #8]
   21918:	ldr	r3, [r3]
   2191c:	add	r2, r2, r3, lsl #3
   21920:	ldrb	r2, [r2, #6]
   21924:	tst	r2, #4
   21928:	bne	21958 <__assert_fail@plt+0xfcbc>
   2192c:	str	r1, [sp]
   21930:	mov	r0, r5
   21934:	mov	r1, r6
   21938:	mov	r2, r6
   2193c:	mov	r3, r6
   21940:	bl	21a98 <__assert_fail@plt+0xfdfc>
   21944:	cmp	r0, #0
   21948:	bne	21a88 <__assert_fail@plt+0xfdec>
   2194c:	ldr	r0, [r5]
   21950:	add	r0, r0, r6, lsl #3
   21954:	ldr	r0, [r0, #4]
   21958:	tst	r0, #8
   2195c:	beq	21a5c <__assert_fail@plt+0xfdc0>
   21960:	ldr	r0, [r5, #20]
   21964:	add	r1, r0, r4, lsl #2
   21968:	ldr	r1, [r1, #4]
   2196c:	cmp	r1, #1
   21970:	blt	21a5c <__assert_fail@plt+0xfdc0>
   21974:	str	r8, [sp, #12]
   21978:	mov	r8, #0
   2197c:	add	r7, sp, #16
   21980:	add	sl, sp, #32
   21984:	mov	r6, #0
   21988:	str	r9, [sp, #8]
   2198c:	add	r0, r0, r4, lsl #2
   21990:	ldr	r0, [r0, #8]
   21994:	ldr	r2, [r0, r6, lsl #2]
   21998:	ldr	r0, [r5, #24]
   2199c:	add	r9, r2, r2, lsl #1
   219a0:	add	r0, r0, r9, lsl #2
   219a4:	ldr	r1, [r0, #4]
   219a8:	cmn	r1, #1
   219ac:	beq	21a14 <__assert_fail@plt+0xfd78>
   219b0:	cmp	r1, #0
   219b4:	bne	219d4 <__assert_fail@plt+0xfd38>
   219b8:	mov	r0, r7
   219bc:	mov	r1, r5
   219c0:	mov	r3, #0
   219c4:	bl	2187c <__assert_fail@plt+0xfbe0>
   219c8:	cmp	r0, #0
   219cc:	beq	219e4 <__assert_fail@plt+0xfd48>
   219d0:	b	21a88 <__assert_fail@plt+0xfdec>
   219d4:	vldr	d16, [r0]
   219d8:	ldr	r0, [r0, #8]
   219dc:	str	r0, [sp, #24]
   219e0:	vstr	d16, [sp, #16]
   219e4:	mov	r0, sl
   219e8:	mov	r1, r7
   219ec:	bl	21d58 <__assert_fail@plt+0x100bc>
   219f0:	cmp	r0, #0
   219f4:	bne	21a88 <__assert_fail@plt+0xfdec>
   219f8:	ldr	r0, [r5, #24]
   219fc:	add	r0, r0, r9, lsl #2
   21a00:	ldr	r0, [r0, #4]
   21a04:	cmp	r0, #0
   21a08:	bne	21a18 <__assert_fail@plt+0xfd7c>
   21a0c:	ldr	r0, [sp, #24]
   21a10:	bl	1a12c <__assert_fail@plt+0x8490>
   21a14:	mov	r8, #1
   21a18:	ldr	r0, [r5, #20]
   21a1c:	add	r6, r6, #1
   21a20:	add	r1, r0, r4, lsl #2
   21a24:	ldr	r1, [r1, #4]
   21a28:	cmp	r6, r1
   21a2c:	blt	2198c <__assert_fail@plt+0xfcf0>
   21a30:	tst	r8, #1
   21a34:	ldr	r8, [sp, #12]
   21a38:	ldr	r0, [sp, #8]
   21a3c:	beq	21a5c <__assert_fail@plt+0xfdc0>
   21a40:	cmp	r0, #0
   21a44:	bne	21a5c <__assert_fail@plt+0xfdc0>
   21a48:	ldr	r0, [r5, #24]
   21a4c:	mov	r1, #0
   21a50:	add	r0, r0, r4, lsl #2
   21a54:	str	r1, [r0, #4]
   21a58:	b	21a74 <__assert_fail@plt+0xfdd8>
   21a5c:	ldr	r0, [r5, #24]
   21a60:	vldr	d16, [sp, #32]
   21a64:	ldr	r1, [sp, #40]	; 0x28
   21a68:	add	r0, r0, r4, lsl #2
   21a6c:	str	r1, [r0, #8]
   21a70:	vstr	d16, [r0]
   21a74:	ldr	r0, [sp, #40]	; 0x28
   21a78:	vldr	d16, [sp, #32]
   21a7c:	str	r0, [r8, #8]
   21a80:	mov	r0, #0
   21a84:	vstr	d16, [r8]
   21a88:	sub	sp, fp, #28
   21a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21a90:	mov	r0, #12
   21a94:	b	21a88 <__assert_fail@plt+0xfdec>
   21a98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a9c:	add	fp, sp, #28
   21aa0:	sub	sp, sp, #20
   21aa4:	mov	sl, r0
   21aa8:	ldr	r0, [fp, #8]
   21aac:	mov	r8, r2
   21ab0:	mov	r5, r1
   21ab4:	str	r3, [sp, #8]
   21ab8:	str	r0, [sp, #16]
   21abc:	ldr	r2, [sl]
   21ac0:	add	r1, r2, r5, lsl #3
   21ac4:	ldrb	r0, [r1, #4]!
   21ac8:	cmp	r0, #4
   21acc:	bne	21b3c <__assert_fail@plt+0xfea0>
   21ad0:	ldr	r0, [sl, #12]
   21ad4:	ldr	r1, [sl, #20]
   21ad8:	add	r6, r8, r8, lsl #1
   21adc:	ldr	r2, [sp, #16]
   21ae0:	ldr	r7, [r0, r5, lsl #2]
   21ae4:	add	r0, r1, r6, lsl #2
   21ae8:	mov	r1, #0
   21aec:	str	r1, [r0, #4]
   21af0:	mov	r0, sl
   21af4:	mov	r1, r7
   21af8:	bl	21edc <__assert_fail@plt+0x10240>
   21afc:	mov	r9, #12
   21b00:	cmn	r0, #1
   21b04:	beq	21d24 <__assert_fail@plt+0x10088>
   21b08:	mov	r4, r0
   21b0c:	ldr	r0, [sl, #12]
   21b10:	ldr	r1, [r0, r5, lsl #2]
   21b14:	str	r1, [r0, r8, lsl #2]
   21b18:	mov	r1, r4
   21b1c:	ldr	r0, [sl, #20]
   21b20:	add	r0, r0, r6, lsl #2
   21b24:	bl	21f64 <__assert_fail@plt+0x102c8>
   21b28:	cmp	r0, #0
   21b2c:	mov	r5, r7
   21b30:	mov	r8, r4
   21b34:	bne	21abc <__assert_fail@plt+0xfe20>
   21b38:	b	21d24 <__assert_fail@plt+0x10088>
   21b3c:	ldr	r0, [sl, #20]
   21b40:	add	ip, r5, r5, lsl #1
   21b44:	add	r7, r0, ip, lsl #2
   21b48:	ldr	r3, [r7, #4]
   21b4c:	cmp	r3, #0
   21b50:	beq	21d0c <__assert_fail@plt+0x10070>
   21b54:	ldr	r7, [r7, #8]
   21b58:	add	r6, r8, r8, lsl #1
   21b5c:	cmp	r3, #1
   21b60:	add	r0, r0, r6, lsl #2
   21b64:	str	r6, [sp, #12]
   21b68:	mov	r6, #0
   21b6c:	ldr	r7, [r7]
   21b70:	str	r6, [r0, #4]
   21b74:	beq	21ca4 <__assert_fail@plt+0x10008>
   21b78:	ldr	r1, [sl, #8]
   21b7c:	ldr	r4, [sp, #16]
   21b80:	sub	r3, r1, #1
   21b84:	cmp	r3, #1
   21b88:	blt	21bd8 <__assert_fail@plt+0xff3c>
   21b8c:	add	r3, r2, r3, lsl #3
   21b90:	ldr	r6, [r3, #4]
   21b94:	ands	r3, r6, #262144	; 0x40000
   21b98:	beq	21bd8 <__assert_fail@plt+0xff3c>
   21b9c:	ldr	r3, [sl, #16]
   21ba0:	sub	r2, r2, #12
   21ba4:	sub	r3, r3, #4
   21ba8:	ldr	r5, [r3, r1, lsl #2]
   21bac:	cmp	r5, r7
   21bb0:	ubfxeq	r6, r6, #8, #10
   21bb4:	cmpeq	r6, r4
   21bb8:	beq	21c88 <__assert_fail@plt+0xffec>
   21bbc:	sub	r6, r1, #2
   21bc0:	cmp	r6, #1
   21bc4:	blt	21bd8 <__assert_fail@plt+0xff3c>
   21bc8:	ldr	r6, [r2, r1, lsl #3]
   21bcc:	sub	r1, r1, #1
   21bd0:	ands	r5, r6, #262144	; 0x40000
   21bd4:	bne	21ba8 <__assert_fail@plt+0xff0c>
   21bd8:	mov	r0, sl
   21bdc:	mov	r1, r7
   21be0:	mov	r2, r4
   21be4:	mov	r8, ip
   21be8:	bl	21edc <__assert_fail@plt+0x10240>
   21bec:	mov	r9, #12
   21bf0:	cmn	r0, #1
   21bf4:	beq	21d24 <__assert_fail@plt+0x10088>
   21bf8:	mov	r5, r0
   21bfc:	ldr	r0, [sl, #20]
   21c00:	ldr	r6, [sp, #12]
   21c04:	mov	r1, r5
   21c08:	add	r0, r0, r6, lsl #2
   21c0c:	bl	21f64 <__assert_fail@plt+0x102c8>
   21c10:	cmp	r0, #0
   21c14:	beq	21d24 <__assert_fail@plt+0x10088>
   21c18:	ldr	r4, [sp, #16]
   21c1c:	ldr	r3, [sp, #8]
   21c20:	mov	r0, sl
   21c24:	mov	r1, r7
   21c28:	mov	r2, r5
   21c2c:	str	r4, [sp]
   21c30:	bl	21a98 <__assert_fail@plt+0xfdfc>
   21c34:	cmp	r0, #0
   21c38:	bne	21d20 <__assert_fail@plt+0x10084>
   21c3c:	ldr	r0, [sl, #20]
   21c40:	mov	r2, r4
   21c44:	add	r0, r0, r8, lsl #2
   21c48:	ldr	r0, [r0, #8]
   21c4c:	ldr	r5, [r0, #4]
   21c50:	mov	r0, sl
   21c54:	mov	r1, r5
   21c58:	bl	21edc <__assert_fail@plt+0x10240>
   21c5c:	mov	r9, #12
   21c60:	cmn	r0, #1
   21c64:	beq	21d24 <__assert_fail@plt+0x10088>
   21c68:	mov	r8, r0
   21c6c:	ldr	r0, [sl, #20]
   21c70:	mov	r1, r8
   21c74:	add	r0, r0, r6, lsl #2
   21c78:	bl	21f64 <__assert_fail@plt+0x102c8>
   21c7c:	cmp	r0, #0
   21c80:	bne	21abc <__assert_fail@plt+0xfe20>
   21c84:	b	21d24 <__assert_fail@plt+0x10088>
   21c88:	sub	r1, r1, #1
   21c8c:	mov	r8, ip
   21c90:	bl	21f64 <__assert_fail@plt+0x102c8>
   21c94:	ldr	r6, [sp, #12]
   21c98:	cmp	r0, #0
   21c9c:	bne	21c3c <__assert_fail@plt+0xffa0>
   21ca0:	b	21d50 <__assert_fail@plt+0x100b4>
   21ca4:	ldr	r2, [sp, #8]
   21ca8:	cmp	r5, r2
   21cac:	bne	21cb8 <__assert_fail@plt+0x1001c>
   21cb0:	cmp	r8, r5
   21cb4:	bne	21d30 <__assert_fail@plt+0x10094>
   21cb8:	ldr	r0, [r1]
   21cbc:	mov	r1, r7
   21cc0:	ubfx	r0, r0, #8, #10
   21cc4:	ldr	r2, [sp, #16]
   21cc8:	orr	r2, r0, r2
   21ccc:	mov	r0, sl
   21cd0:	str	r2, [sp, #16]
   21cd4:	bl	21edc <__assert_fail@plt+0x10240>
   21cd8:	mov	r9, #12
   21cdc:	cmn	r0, #1
   21ce0:	beq	21d24 <__assert_fail@plt+0x10088>
   21ce4:	mov	r8, r0
   21ce8:	ldr	r0, [sl, #20]
   21cec:	ldr	r1, [sp, #12]
   21cf0:	add	r0, r0, r1, lsl #2
   21cf4:	mov	r1, r8
   21cf8:	bl	21f64 <__assert_fail@plt+0x102c8>
   21cfc:	cmp	r0, #0
   21d00:	mov	r5, r7
   21d04:	bne	21abc <__assert_fail@plt+0xfe20>
   21d08:	b	21d24 <__assert_fail@plt+0x10088>
   21d0c:	ldr	r0, [sl, #12]
   21d10:	ldr	r1, [r0, r5, lsl #2]
   21d14:	str	r1, [r0, r8, lsl #2]
   21d18:	mov	r0, #0
   21d1c:	b	21d28 <__assert_fail@plt+0x1008c>
   21d20:	mov	r9, r0
   21d24:	mov	r0, r9
   21d28:	sub	sp, fp, #28
   21d2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d30:	mov	r1, r7
   21d34:	bl	21f64 <__assert_fail@plt+0x102c8>
   21d38:	mov	r1, r0
   21d3c:	mov	r9, #12
   21d40:	mov	r0, #0
   21d44:	cmp	r1, #0
   21d48:	moveq	r0, r9
   21d4c:	b	21d28 <__assert_fail@plt+0x1008c>
   21d50:	mov	r9, #12
   21d54:	b	21d24 <__assert_fail@plt+0x10088>
   21d58:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21d5c:	add	fp, sp, #24
   21d60:	mov	r8, #0
   21d64:	cmp	r1, #0
   21d68:	beq	21eb4 <__assert_fail@plt+0x10218>
   21d6c:	mov	r6, r1
   21d70:	ldr	r1, [r1, #4]
   21d74:	cmp	r1, #0
   21d78:	beq	21eb4 <__assert_fail@plt+0x10218>
   21d7c:	mov	r9, r0
   21d80:	ldr	r2, [r0]
   21d84:	ldr	r0, [r0, #4]
   21d88:	add	r3, r0, r1, lsl #1
   21d8c:	cmp	r2, r3
   21d90:	bge	21dbc <__assert_fail@plt+0x10120>
   21d94:	ldr	r0, [r9, #8]
   21d98:	add	r7, r2, r1
   21d9c:	lsl	r1, r7, #3
   21da0:	bl	1a28c <__assert_fail@plt+0x85f0>
   21da4:	cmp	r0, #0
   21da8:	beq	21ed4 <__assert_fail@plt+0x10238>
   21dac:	str	r0, [r9, #8]
   21db0:	lsl	r0, r7, #1
   21db4:	str	r0, [r9]
   21db8:	ldr	r0, [r9, #4]
   21dbc:	cmp	r0, #0
   21dc0:	beq	21ebc <__assert_fail@plt+0x10220>
   21dc4:	ldr	r2, [r6, #4]
   21dc8:	sub	r1, r0, #1
   21dcc:	add	r7, r0, r2, lsl #1
   21dd0:	sub	r0, r2, #1
   21dd4:	orrs	r2, r0, r1
   21dd8:	bmi	21e1c <__assert_fail@plt+0x10180>
   21ddc:	ldr	r2, [r6, #8]
   21de0:	ldr	r3, [r9, #8]
   21de4:	ldr	r4, [r2, r0, lsl #2]
   21de8:	ldr	r5, [r3, r1, lsl #2]
   21dec:	cmp	r5, r4
   21df0:	bne	21e00 <__assert_fail@plt+0x10164>
   21df4:	sub	r1, r1, #1
   21df8:	sub	r0, r0, #1
   21dfc:	b	21e10 <__assert_fail@plt+0x10174>
   21e00:	sublt	r7, r7, #1
   21e04:	subge	r1, r1, #1
   21e08:	sublt	r0, r0, #1
   21e0c:	strlt	r4, [r3, r7, lsl #2]
   21e10:	orr	r5, r0, r1
   21e14:	cmn	r5, #1
   21e18:	bgt	21de4 <__assert_fail@plt+0x10148>
   21e1c:	cmp	r0, #0
   21e20:	bmi	21e40 <__assert_fail@plt+0x101a4>
   21e24:	add	r2, r0, #1
   21e28:	ldr	r0, [r9, #8]
   21e2c:	ldr	r1, [r6, #8]
   21e30:	sub	r7, r7, r2
   21e34:	lsl	r2, r2, #2
   21e38:	add	r0, r0, r7, lsl #2
   21e3c:	bl	118dc <memcpy@plt>
   21e40:	ldr	r0, [r9, #4]
   21e44:	ldr	r2, [r6, #4]
   21e48:	sub	r1, r0, #1
   21e4c:	add	r3, r1, r2, lsl #1
   21e50:	sub	r2, r3, r7
   21e54:	adds	r2, r2, #1
   21e58:	bcs	21eb4 <__assert_fail@plt+0x10218>
   21e5c:	add	r0, r2, r0
   21e60:	str	r0, [r9, #4]
   21e64:	ldr	r0, [r9, #8]
   21e68:	ldr	r6, [r0, r1, lsl #2]
   21e6c:	ldr	r5, [r0, r3, lsl #2]
   21e70:	cmp	r5, r6
   21e74:	ble	21e90 <__assert_fail@plt+0x101f4>
   21e78:	add	r6, r2, r1
   21e7c:	subs	r2, r2, #1
   21e80:	sub	r3, r3, #1
   21e84:	str	r5, [r0, r6, lsl #2]
   21e88:	bne	21e68 <__assert_fail@plt+0x101cc>
   21e8c:	b	21eb4 <__assert_fail@plt+0x10218>
   21e90:	add	r5, r2, r1
   21e94:	cmp	r1, #0
   21e98:	str	r6, [r0, r5, lsl #2]
   21e9c:	sub	r6, r1, #1
   21ea0:	mov	r1, r6
   21ea4:	bgt	21e68 <__assert_fail@plt+0x101cc>
   21ea8:	add	r1, r0, r7, lsl #2
   21eac:	lsl	r2, r2, #2
   21eb0:	bl	118dc <memcpy@plt>
   21eb4:	mov	r0, r8
   21eb8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21ebc:	ldr	r0, [r6, #4]
   21ec0:	str	r0, [r9, #4]
   21ec4:	ldr	r0, [r9, #8]
   21ec8:	ldr	r2, [r6, #4]
   21ecc:	ldr	r1, [r6, #8]
   21ed0:	b	21eac <__assert_fail@plt+0x10210>
   21ed4:	mov	r8, #12
   21ed8:	b	21eb4 <__assert_fail@plt+0x10218>
   21edc:	push	{r4, r5, r6, sl, fp, lr}
   21ee0:	add	fp, sp, #16
   21ee4:	mov	r5, r0
   21ee8:	ldr	r0, [r0]
   21eec:	mov	r4, r1
   21ef0:	mov	r6, r2
   21ef4:	ldr	r1, [r0, r1, lsl #3]!
   21ef8:	ldr	r2, [r0, #4]
   21efc:	mov	r0, r5
   21f00:	bl	216ac <__assert_fail@plt+0xfa10>
   21f04:	cmn	r0, #1
   21f08:	ldrne	r1, [r5]
   21f0c:	movwne	r3, #65280	; 0xff00
   21f10:	movtne	r3, #3
   21f14:	addne	r1, r1, r0, lsl #3
   21f18:	ldrne	r2, [r1, #4]
   21f1c:	bfine	r2, r6, #8, #10
   21f20:	strne	r2, [r1, #4]
   21f24:	ldrne	r1, [r5]
   21f28:	addne	r2, r1, r4, lsl #3
   21f2c:	addne	r1, r1, r0, lsl #3
   21f30:	ldrne	r2, [r2, #4]
   21f34:	andne	r2, r2, r3
   21f38:	ldrne	r3, [r1, #4]
   21f3c:	orrne	r2, r2, r3
   21f40:	strne	r2, [r1, #4]
   21f44:	ldrne	r1, [r5]
   21f48:	addne	r1, r1, r0, lsl #3
   21f4c:	ldrne	r2, [r1, #4]
   21f50:	orrne	r2, r2, #262144	; 0x40000
   21f54:	strne	r2, [r1, #4]
   21f58:	ldrne	r1, [r5, #16]
   21f5c:	strne	r4, [r1, r0, lsl #2]
   21f60:	pop	{r4, r5, r6, sl, fp, pc}
   21f64:	push	{r4, r5, r6, sl, fp, lr}
   21f68:	add	fp, sp, #16
   21f6c:	ldr	r2, [r0]
   21f70:	mov	r5, r1
   21f74:	mov	r4, r0
   21f78:	cmp	r2, #0
   21f7c:	beq	21fa8 <__assert_fail@plt+0x1030c>
   21f80:	ldr	r1, [r4, #4]
   21f84:	cmp	r1, #0
   21f88:	bne	21fd4 <__assert_fail@plt+0x10338>
   21f8c:	ldr	r0, [r4, #8]
   21f90:	str	r5, [r0]
   21f94:	ldr	r0, [r4, #4]
   21f98:	mov	r6, #1
   21f9c:	add	r0, r0, #1
   21fa0:	str	r0, [r4, #4]
   21fa4:	b	21fcc <__assert_fail@plt+0x10330>
   21fa8:	mov	r6, #1
   21fac:	mov	r0, #4
   21fb0:	str	r6, [r4]
   21fb4:	str	r6, [r4, #4]
   21fb8:	bl	1a1f8 <__assert_fail@plt+0x855c>
   21fbc:	cmp	r0, #0
   21fc0:	str	r0, [r4, #8]
   21fc4:	beq	22004 <__assert_fail@plt+0x10368>
   21fc8:	str	r5, [r0]
   21fcc:	mov	r0, r6
   21fd0:	pop	{r4, r5, r6, sl, fp, pc}
   21fd4:	cmp	r2, r1
   21fd8:	bne	22014 <__assert_fail@plt+0x10378>
   21fdc:	lsl	r0, r2, #1
   21fe0:	lsl	r1, r2, #3
   21fe4:	str	r0, [r4]
   21fe8:	ldr	r0, [r4, #8]
   21fec:	bl	1a28c <__assert_fail@plt+0x85f0>
   21ff0:	cmp	r0, #0
   21ff4:	beq	2208c <__assert_fail@plt+0x103f0>
   21ff8:	str	r0, [r4, #8]
   21ffc:	ldr	r1, [r4, #4]
   22000:	b	22018 <__assert_fail@plt+0x1037c>
   22004:	mov	r6, #0
   22008:	str	r6, [r4]
   2200c:	str	r6, [r4, #4]
   22010:	b	21fcc <__assert_fail@plt+0x10330>
   22014:	ldr	r0, [r4, #8]
   22018:	ldr	r2, [r0]
   2201c:	cmp	r2, r5
   22020:	ble	22054 <__assert_fail@plt+0x103b8>
   22024:	cmp	r1, #1
   22028:	blt	22084 <__assert_fail@plt+0x103e8>
   2202c:	add	r3, r0, r1, lsl #2
   22030:	mov	r2, r3
   22034:	ldr	r6, [r2, #-4]!
   22038:	sub	r1, r1, #1
   2203c:	cmp	r1, #0
   22040:	str	r6, [r3]
   22044:	mov	r3, r2
   22048:	bgt	22034 <__assert_fail@plt+0x10398>
   2204c:	mov	r1, #0
   22050:	b	22084 <__assert_fail@plt+0x103e8>
   22054:	add	r2, r0, r1, lsl #2
   22058:	ldr	r3, [r2, #-4]
   2205c:	cmp	r3, r5
   22060:	ble	22084 <__assert_fail@plt+0x103e8>
   22064:	sub	r1, r1, #2
   22068:	str	r3, [r2]
   2206c:	sub	r1, r1, #1
   22070:	ldr	r3, [r2, #-8]
   22074:	sub	r2, r2, #4
   22078:	cmp	r3, r5
   2207c:	bgt	22068 <__assert_fail@plt+0x103cc>
   22080:	add	r1, r1, #2
   22084:	str	r5, [r0, r1, lsl #2]
   22088:	b	21f94 <__assert_fail@plt+0x102f8>
   2208c:	mov	r6, #0
   22090:	b	21fcc <__assert_fail@plt+0x10330>
   22094:	push	{r4, r5, fp, lr}
   22098:	add	fp, sp, #8
   2209c:	mov	r5, r0
   220a0:	mov	r4, r1
   220a4:	ldr	r0, [r0]
   220a8:	ldr	r1, [r5, #4]
   220ac:	cmp	r0, r1
   220b0:	bne	220e0 <__assert_fail@plt+0x10444>
   220b4:	mov	r1, #2
   220b8:	add	r0, r1, r0, lsl #1
   220bc:	str	r0, [r5]
   220c0:	lsl	r1, r0, #2
   220c4:	ldr	r0, [r5, #8]
   220c8:	bl	1a28c <__assert_fail@plt+0x85f0>
   220cc:	cmp	r0, #0
   220d0:	beq	220f8 <__assert_fail@plt+0x1045c>
   220d4:	str	r0, [r5, #8]
   220d8:	ldr	r1, [r5, #4]
   220dc:	b	220e4 <__assert_fail@plt+0x10448>
   220e0:	ldr	r0, [r5, #8]
   220e4:	add	r2, r1, #1
   220e8:	str	r2, [r5, #4]
   220ec:	str	r4, [r0, r1, lsl #2]
   220f0:	mov	r0, #1
   220f4:	pop	{r4, r5, fp, pc}
   220f8:	mov	r0, #0
   220fc:	pop	{r4, r5, fp, pc}
   22100:	push	{r4, r5, fp, lr}
   22104:	add	fp, sp, #8
   22108:	mov	r4, r0
   2210c:	ldr	r0, [r1, #4]
   22110:	mov	r5, r1
   22114:	str	r0, [r4, #4]
   22118:	ldr	r1, [r1, #4]
   2211c:	cmp	r1, #1
   22120:	blt	22154 <__assert_fail@plt+0x104b8>
   22124:	str	r0, [r4]
   22128:	lsl	r0, r0, #2
   2212c:	bl	1a1f8 <__assert_fail@plt+0x855c>
   22130:	cmp	r0, #0
   22134:	str	r0, [r4, #8]
   22138:	beq	22168 <__assert_fail@plt+0x104cc>
   2213c:	ldr	r2, [r5, #4]
   22140:	ldr	r1, [r5, #8]
   22144:	lsl	r2, r2, #2
   22148:	bl	118dc <memcpy@plt>
   2214c:	mov	r0, #0
   22150:	pop	{r4, r5, fp, pc}
   22154:	mov	r0, #0
   22158:	str	r0, [r4]
   2215c:	str	r0, [r4, #4]
   22160:	str	r0, [r4, #8]
   22164:	pop	{r4, r5, fp, pc}
   22168:	mov	r0, #0
   2216c:	str	r0, [r4]
   22170:	str	r0, [r4, #4]
   22174:	mov	r0, #12
   22178:	pop	{r4, r5, fp, pc}
   2217c:	push	{r4, r5, r6, sl, fp, lr}
   22180:	add	fp, sp, #16
   22184:	ldr	r2, [r0, #4]
   22188:	cmp	r2, #1
   2218c:	blt	221dc <__assert_fail@plt+0x10540>
   22190:	ldr	ip, [r0, #8]
   22194:	subs	r2, r2, #1
   22198:	mov	r0, #0
   2219c:	mov	r3, #0
   221a0:	beq	221cc <__assert_fail@plt+0x10530>
   221a4:	mov	r3, #0
   221a8:	mov	lr, #1
   221ac:	add	r4, r2, r3
   221b0:	lsr	r5, r4, #1
   221b4:	ldr	r6, [ip, r5, lsl #2]
   221b8:	cmp	r6, r1
   221bc:	addlt	r3, lr, r4, lsr #1
   221c0:	movge	r2, r5
   221c4:	cmp	r3, r2
   221c8:	bcc	221ac <__assert_fail@plt+0x10510>
   221cc:	ldr	r2, [ip, r3, lsl #2]
   221d0:	cmp	r2, r1
   221d4:	addeq	r0, r3, #1
   221d8:	pop	{r4, r5, r6, sl, fp, pc}
   221dc:	mov	r0, #0
   221e0:	pop	{r4, r5, r6, sl, fp, pc}
   221e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   221e8:	add	fp, sp, #28
   221ec:	sub	sp, sp, #20
   221f0:	ldr	lr, [r2, #4]
   221f4:	cmp	lr, #0
   221f8:	beq	224fc <__assert_fail@plt+0x10860>
   221fc:	mov	r8, r3
   22200:	mov	sl, r2
   22204:	add	r7, lr, r3
   22208:	cmp	lr, #1
   2220c:	str	r0, [sp, #4]
   22210:	blt	2222c <__assert_fail@plt+0x10590>
   22214:	ldr	r3, [sl, #8]
   22218:	mov	r2, lr
   2221c:	ldr	r0, [r3], #4
   22220:	subs	r2, r2, #1
   22224:	add	r7, r0, r7
   22228:	bne	2221c <__assert_fail@plt+0x10580>
   2222c:	ldr	r0, [r1, #32]
   22230:	str	r1, [sp, #12]
   22234:	ldr	r1, [r1, #68]	; 0x44
   22238:	and	r1, r1, r7
   2223c:	add	r2, r1, r1, lsl #1
   22240:	ldr	r1, [r0, r2, lsl #2]
   22244:	cmp	r1, #1
   22248:	blt	222d8 <__assert_fail@plt+0x1063c>
   2224c:	add	r0, r0, r2, lsl #2
   22250:	sub	ip, lr, #1
   22254:	mov	r3, #0
   22258:	ldr	r9, [r0, #8]
   2225c:	ldr	r4, [r9, r3, lsl #2]
   22260:	ldr	r0, [r4]
   22264:	cmp	r0, r7
   22268:	bne	2228c <__assert_fail@plt+0x105f0>
   2226c:	ldrb	r0, [r4, #52]	; 0x34
   22270:	and	r0, r0, #15
   22274:	cmp	r0, r8
   22278:	bne	2228c <__assert_fail@plt+0x105f0>
   2227c:	cmp	sl, #0
   22280:	ldrne	r5, [r4, #40]	; 0x28
   22284:	cmpne	r5, #0
   22288:	bne	2229c <__assert_fail@plt+0x10600>
   2228c:	add	r3, r3, #1
   22290:	cmp	r3, r1
   22294:	blt	2225c <__assert_fail@plt+0x105c0>
   22298:	b	222d8 <__assert_fail@plt+0x1063c>
   2229c:	ldr	r0, [r5, #4]
   222a0:	cmp	r0, lr
   222a4:	bne	2228c <__assert_fail@plt+0x105f0>
   222a8:	mov	r0, ip
   222ac:	add	r6, r0, #1
   222b0:	cmp	r6, #1
   222b4:	blt	22504 <__assert_fail@plt+0x10868>
   222b8:	ldr	r6, [sl, #8]
   222bc:	ldr	r2, [r5, #8]
   222c0:	ldr	r6, [r6, r0, lsl #2]
   222c4:	ldr	r2, [r2, r0, lsl #2]
   222c8:	sub	r0, r0, #1
   222cc:	cmp	r2, r6
   222d0:	beq	222ac <__assert_fail@plt+0x10610>
   222d4:	b	2228c <__assert_fail@plt+0x105f0>
   222d8:	mov	r0, #56	; 0x38
   222dc:	mov	r1, #1
   222e0:	bl	19ea4 <__assert_fail@plt+0x8208>
   222e4:	cmp	r0, #0
   222e8:	beq	224e8 <__assert_fail@plt+0x1084c>
   222ec:	add	r5, r0, #4
   222f0:	mov	r4, r0
   222f4:	mov	r1, sl
   222f8:	mov	r0, r5
   222fc:	bl	22100 <__assert_fail@plt+0x10464>
   22300:	cmp	r0, #0
   22304:	bne	22510 <__assert_fail@plt+0x10874>
   22308:	str	r5, [r4, #40]	; 0x28
   2230c:	and	r0, r8, #15
   22310:	ldr	r6, [sp, #12]
   22314:	ldrb	r1, [r4, #52]	; 0x34
   22318:	and	r1, r1, #240	; 0xf0
   2231c:	orr	r0, r1, r0
   22320:	strb	r0, [r4, #52]	; 0x34
   22324:	ldr	r0, [sl, #4]
   22328:	cmp	r0, #1
   2232c:	blt	224c8 <__assert_fail@plt+0x1082c>
   22330:	movw	r9, #65280	; 0xff00
   22334:	and	r0, r8, #4
   22338:	mov	ip, r5
   2233c:	and	lr, r8, #1
   22340:	movt	r9, #3
   22344:	str	r0, [sp]
   22348:	and	r0, r8, #2
   2234c:	mov	r8, #0
   22350:	str	r0, [sp, #8]
   22354:	mov	r0, #0
   22358:	add	r3, r9, #255	; 0xff
   2235c:	str	r3, [sp, #16]
   22360:	ldr	r1, [sl, #8]
   22364:	ldr	r2, [r6]
   22368:	ldr	r1, [r1, r8, lsl #2]
   2236c:	add	r1, r2, r1, lsl #3
   22370:	ldr	r5, [r1, #4]
   22374:	and	r1, r5, r3
   22378:	cmp	r1, #1
   2237c:	beq	22490 <__assert_fail@plt+0x107f4>
   22380:	ldrb	r3, [r4, #52]	; 0x34
   22384:	mov	r2, #32
   22388:	and	r1, r5, r9
   2238c:	and	r2, r2, r5, lsr #15
   22390:	orr	r2, r3, r2
   22394:	uxtb	r3, r5
   22398:	strb	r2, [r4, #52]	; 0x34
   2239c:	cmp	r3, #2
   223a0:	beq	223b4 <__assert_fail@plt+0x10718>
   223a4:	cmp	r3, #4
   223a8:	bne	223c0 <__assert_fail@plt+0x10724>
   223ac:	mov	r3, #64	; 0x40
   223b0:	b	223b8 <__assert_fail@plt+0x1071c>
   223b4:	mov	r3, #16
   223b8:	orr	r2, r2, r3
   223bc:	strb	r2, [r4, #52]	; 0x34
   223c0:	cmp	r1, #0
   223c4:	beq	2248c <__assert_fail@plt+0x107f0>
   223c8:	ldr	r1, [r4, #40]	; 0x28
   223cc:	cmp	r1, ip
   223d0:	bne	22424 <__assert_fail@plt+0x10788>
   223d4:	mov	r0, #12
   223d8:	mov	r6, lr
   223dc:	mov	r9, ip
   223e0:	bl	1a1f8 <__assert_fail@plt+0x855c>
   223e4:	cmp	r0, #0
   223e8:	beq	224e0 <__assert_fail@plt+0x10844>
   223ec:	mov	r1, sl
   223f0:	str	r0, [r4, #40]	; 0x28
   223f4:	bl	22100 <__assert_fail@plt+0x10464>
   223f8:	cmp	r0, #0
   223fc:	bne	224e0 <__assert_fail@plt+0x10844>
   22400:	ldrb	r0, [r4, #52]	; 0x34
   22404:	mov	lr, r6
   22408:	ldr	r6, [sp, #12]
   2240c:	mov	ip, r9
   22410:	movw	r9, #65280	; 0xff00
   22414:	movt	r9, #3
   22418:	orr	r0, r0, #128	; 0x80
   2241c:	strb	r0, [r4, #52]	; 0x34
   22420:	mov	r0, #0
   22424:	cmp	lr, #0
   22428:	bne	22434 <__assert_fail@plt+0x10798>
   2242c:	ands	r1, r5, #256	; 0x100
   22430:	bne	22468 <__assert_fail@plt+0x107cc>
   22434:	cmp	lr, #0
   22438:	andsne	r1, r5, #512	; 0x200
   2243c:	bne	22468 <__assert_fail@plt+0x107cc>
   22440:	ldr	r1, [sp, #8]
   22444:	cmp	r1, #0
   22448:	bne	22454 <__assert_fail@plt+0x107b8>
   2244c:	ands	r1, r5, #4096	; 0x1000
   22450:	bne	22468 <__assert_fail@plt+0x107cc>
   22454:	ldr	r1, [sp]
   22458:	cmp	r1, #0
   2245c:	bne	2248c <__assert_fail@plt+0x107f0>
   22460:	ands	r1, r5, #16384	; 0x4000
   22464:	beq	2248c <__assert_fail@plt+0x107f0>
   22468:	subs	r1, r8, r0
   2246c:	bmi	22488 <__assert_fail@plt+0x107ec>
   22470:	ldr	r2, [r4, #8]
   22474:	cmp	r2, r1
   22478:	subgt	r2, r2, #1
   2247c:	strgt	r2, [r4, #8]
   22480:	cmpgt	r2, r1
   22484:	bgt	224a4 <__assert_fail@plt+0x10808>
   22488:	add	r0, r0, #1
   2248c:	ldr	r3, [sp, #16]
   22490:	ldr	r1, [sl, #4]
   22494:	add	r8, r8, #1
   22498:	cmp	r8, r1
   2249c:	blt	22360 <__assert_fail@plt+0x106c4>
   224a0:	b	224c8 <__assert_fail@plt+0x1082c>
   224a4:	ldr	r2, [r4, #12]
   224a8:	add	r3, r2, r1, lsl #2
   224ac:	ldr	r3, [r3, #4]
   224b0:	str	r3, [r2, r1, lsl #2]
   224b4:	add	r1, r1, #1
   224b8:	ldr	r3, [r4, #8]
   224bc:	cmp	r1, r3
   224c0:	blt	224a8 <__assert_fail@plt+0x1080c>
   224c4:	b	22488 <__assert_fail@plt+0x107ec>
   224c8:	mov	r0, r6
   224cc:	mov	r1, r4
   224d0:	mov	r2, r7
   224d4:	bl	2251c <__assert_fail@plt+0x10880>
   224d8:	cmp	r0, #0
   224dc:	beq	22504 <__assert_fail@plt+0x10868>
   224e0:	mov	r0, r4
   224e4:	bl	1d614 <__assert_fail@plt+0xb978>
   224e8:	ldr	r1, [sp, #4]
   224ec:	mov	r0, #12
   224f0:	mov	r4, #0
   224f4:	str	r0, [r1]
   224f8:	b	22504 <__assert_fail@plt+0x10868>
   224fc:	mov	r4, #0
   22500:	str	r4, [r0]
   22504:	mov	r0, r4
   22508:	sub	sp, fp, #28
   2250c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22510:	mov	r0, r4
   22514:	bl	1a12c <__assert_fail@plt+0x8490>
   22518:	b	224e8 <__assert_fail@plt+0x1084c>
   2251c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22520:	add	fp, sp, #24
   22524:	mov	r7, r0
   22528:	mov	r0, #0
   2252c:	str	r2, [r1]
   22530:	mov	r5, r1
   22534:	mov	r9, r2
   22538:	mov	r4, r1
   2253c:	str	r0, [r1, #20]
   22540:	ldr	r0, [r1, #8]
   22544:	str	r0, [r5, #16]!
   22548:	lsl	r0, r0, #2
   2254c:	bl	1a1f8 <__assert_fail@plt+0x855c>
   22550:	mov	r8, #12
   22554:	cmp	r0, #0
   22558:	str	r0, [r4, #24]
   2255c:	beq	225ec <__assert_fail@plt+0x10950>
   22560:	ldr	r0, [r4, #8]
   22564:	cmp	r0, #1
   22568:	blt	225ac <__assert_fail@plt+0x10910>
   2256c:	mov	r6, #0
   22570:	ldr	r1, [r4, #12]
   22574:	ldr	r2, [r7]
   22578:	ldr	r1, [r1, r6, lsl #2]
   2257c:	add	r2, r2, r1, lsl #3
   22580:	ldrb	r2, [r2, #4]
   22584:	tst	r2, #8
   22588:	bne	225a0 <__assert_fail@plt+0x10904>
   2258c:	mov	r0, r5
   22590:	bl	22094 <__assert_fail@plt+0x103f8>
   22594:	cmp	r0, #0
   22598:	beq	225ec <__assert_fail@plt+0x10950>
   2259c:	ldr	r0, [r4, #8]
   225a0:	add	r6, r6, #1
   225a4:	cmp	r6, r0
   225a8:	blt	22570 <__assert_fail@plt+0x108d4>
   225ac:	ldr	r1, [r7, #68]	; 0x44
   225b0:	ldr	r0, [r7, #32]
   225b4:	and	r1, r1, r9
   225b8:	mov	r5, r0
   225bc:	add	r2, r1, r1, lsl #1
   225c0:	ldr	r1, [r5, r2, lsl #2]!
   225c4:	mov	r6, r5
   225c8:	ldr	r3, [r6, #4]!
   225cc:	cmp	r3, r1
   225d0:	ble	225f4 <__assert_fail@plt+0x10958>
   225d4:	add	r0, r0, r2, lsl #2
   225d8:	ldr	r0, [r0, #8]
   225dc:	add	r2, r1, #1
   225e0:	mov	r8, #0
   225e4:	str	r2, [r5]
   225e8:	str	r4, [r0, r1, lsl #2]
   225ec:	mov	r0, r8
   225f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   225f4:	add	r7, r0, r2, lsl #2
   225f8:	mov	r2, #2
   225fc:	add	r9, r2, r1, lsl #1
   22600:	ldr	r0, [r7, #8]!
   22604:	lsl	r1, r9, #2
   22608:	bl	1a28c <__assert_fail@plt+0x85f0>
   2260c:	cmp	r0, #0
   22610:	beq	225ec <__assert_fail@plt+0x10950>
   22614:	str	r0, [r7]
   22618:	str	r9, [r6]
   2261c:	ldr	r1, [r5]
   22620:	b	225dc <__assert_fail@plt+0x10940>
   22624:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22628:	add	fp, sp, #28
   2262c:	sub	sp, sp, #36	; 0x24
   22630:	mov	r4, r0
   22634:	ldr	r0, [r0, #24]
   22638:	mov	r6, r2
   2263c:	mov	r9, r1
   22640:	cmp	r0, r1
   22644:	ble	227ac <__assert_fail@plt+0x10b10>
   22648:	ldr	r0, [r4, #80]	; 0x50
   2264c:	mov	r1, #4
   22650:	cmp	r0, #2
   22654:	movge	r0, #0
   22658:	strge	r0, [r4, #16]
   2265c:	strge	r0, [r4, #20]
   22660:	mov	r0, #0
   22664:	tst	r6, #1
   22668:	strb	r0, [r4, #76]	; 0x4c
   2266c:	str	r0, [r4, #24]
   22670:	str	r0, [r4, #28]
   22674:	str	r0, [r4, #32]
   22678:	movweq	r1, #6
   2267c:	ldr	r2, [r4, #44]	; 0x2c
   22680:	ldr	r3, [r4, #52]	; 0x34
   22684:	str	r2, [r4, #48]	; 0x30
   22688:	str	r3, [r4, #56]	; 0x38
   2268c:	str	r1, [r4, #60]	; 0x3c
   22690:	ldrb	r1, [r4, #75]	; 0x4b
   22694:	cmp	r1, #0
   22698:	bne	226a4 <__assert_fail@plt+0x10a08>
   2269c:	ldr	r1, [r4]
   226a0:	str	r1, [r4, #4]
   226a4:	mov	r5, r9
   226a8:	cmp	r5, #0
   226ac:	beq	22738 <__assert_fail@plt+0x10a9c>
   226b0:	ldr	r1, [r4, #32]
   226b4:	cmp	r5, r1
   226b8:	bge	227b4 <__assert_fail@plt+0x10b18>
   226bc:	ldrb	r0, [r4, #76]	; 0x4c
   226c0:	cmp	r0, #0
   226c4:	bne	2292c <__assert_fail@plt+0x10c90>
   226c8:	sub	r1, r5, #1
   226cc:	mov	r0, r4
   226d0:	mov	r2, r6
   226d4:	bl	22e5c <__assert_fail@plt+0x111c0>
   226d8:	str	r0, [r4, #60]	; 0x3c
   226dc:	ldr	r0, [r4, #80]	; 0x50
   226e0:	cmp	r0, #2
   226e4:	blt	22700 <__assert_fail@plt+0x10a64>
   226e8:	ldr	r2, [r4, #28]
   226ec:	ldr	r0, [r4, #8]
   226f0:	sub	r2, r2, r5
   226f4:	add	r1, r0, r5, lsl #2
   226f8:	lsl	r2, r2, #2
   226fc:	bl	11894 <memmove@plt>
   22700:	ldrb	r0, [r4, #75]	; 0x4b
   22704:	cmp	r0, #0
   22708:	bne	22a1c <__assert_fail@plt+0x10d80>
   2270c:	ldr	r0, [r4, #28]
   22710:	ldr	r1, [r4, #32]
   22714:	sub	r0, r0, r5
   22718:	sub	r1, r1, r5
   2271c:	str	r0, [r4, #28]
   22720:	str	r1, [r4, #32]
   22724:	ldrb	r0, [r4, #75]	; 0x4b
   22728:	cmp	r0, #0
   2272c:	ldreq	r0, [r4, #4]
   22730:	addeq	r0, r0, r5
   22734:	streq	r0, [r4, #4]
   22738:	str	r9, [r4, #24]
   2273c:	ldr	r0, [r4, #48]	; 0x30
   22740:	ldr	r1, [r4, #56]	; 0x38
   22744:	ldr	r2, [r4, #80]	; 0x50
   22748:	sub	r0, r0, r5
   2274c:	cmp	r2, #2
   22750:	sub	r1, r1, r5
   22754:	str	r0, [r4, #48]	; 0x30
   22758:	str	r1, [r4, #56]	; 0x38
   2275c:	blt	22780 <__assert_fail@plt+0x10ae4>
   22760:	ldrb	r0, [r4, #72]	; 0x48
   22764:	cmp	r0, #0
   22768:	beq	22794 <__assert_fail@plt+0x10af8>
   2276c:	mov	r0, r4
   22770:	bl	1d7d0 <__assert_fail@plt+0xbb34>
   22774:	cmp	r0, #0
   22778:	bne	227a4 <__assert_fail@plt+0x10b08>
   2277c:	b	2279c <__assert_fail@plt+0x10b00>
   22780:	ldrb	r1, [r4, #75]	; 0x4b
   22784:	cmp	r1, #0
   22788:	bne	22ab4 <__assert_fail@plt+0x10e18>
   2278c:	str	r0, [r4, #28]
   22790:	b	2279c <__assert_fail@plt+0x10b00>
   22794:	mov	r0, r4
   22798:	bl	1de0c <__assert_fail@plt+0xc170>
   2279c:	mov	r0, #0
   227a0:	str	r0, [r4, #40]	; 0x28
   227a4:	sub	sp, fp, #28
   227a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   227ac:	sub	r5, r9, r0
   227b0:	b	226a8 <__assert_fail@plt+0x10a0c>
   227b4:	ldrb	r2, [r4, #76]	; 0x4c
   227b8:	ldr	lr, [r4, #28]
   227bc:	cmp	r2, #0
   227c0:	bne	22c14 <__assert_fail@plt+0x10f78>
   227c4:	mov	r2, #0
   227c8:	str	r2, [r4, #28]
   227cc:	ldr	r3, [r4, #80]	; 0x50
   227d0:	cmp	r3, #2
   227d4:	blt	22acc <__assert_fail@plt+0x10e30>
   227d8:	ldrb	r2, [r4, #73]	; 0x49
   227dc:	cmp	r2, #0
   227e0:	beq	2289c <__assert_fail@plt+0x10c00>
   227e4:	ldr	r7, [r4]
   227e8:	sub	r3, r5, r3
   227ec:	add	ip, r7, r0
   227f0:	add	r3, ip, r3
   227f4:	add	r8, ip, r5
   227f8:	cmp	r3, r7
   227fc:	movcc	r3, r7
   22800:	mov	r7, r8
   22804:	sub	r7, r7, #1
   22808:	cmp	r7, r3
   2280c:	bcc	2289c <__assert_fail@plt+0x10c00>
   22810:	ldrb	r2, [r7]
   22814:	and	r2, r2, #192	; 0xc0
   22818:	cmp	r2, #128	; 0x80
   2281c:	beq	22804 <__assert_fail@plt+0x10b68>
   22820:	ldr	r0, [r4, #48]	; 0x30
   22824:	mov	sl, lr
   22828:	mov	r1, r7
   2282c:	add	r0, ip, r0
   22830:	sub	r2, r0, r7
   22834:	ldr	r0, [r4, #64]	; 0x40
   22838:	cmp	r0, #0
   2283c:	bne	22cb0 <__assert_fail@plt+0x11014>
   22840:	mov	r0, #0
   22844:	add	r3, sp, #24
   22848:	str	r0, [sp, #28]
   2284c:	str	r0, [sp, #24]
   22850:	add	r0, sp, #20
   22854:	bl	1a228 <__assert_fail@plt+0x858c>
   22858:	sub	r1, r8, r7
   2285c:	mvn	r2, #0
   22860:	cmp	r0, r1
   22864:	bcc	22888 <__assert_fail@plt+0x10bec>
   22868:	cmn	r0, #3
   2286c:	bhi	22888 <__assert_fail@plt+0x10bec>
   22870:	mov	r2, #0
   22874:	sub	r0, r0, r1
   22878:	str	r2, [r4, #16]
   2287c:	str	r2, [r4, #20]
   22880:	str	r0, [r4, #28]
   22884:	ldr	r2, [sp, #20]
   22888:	cmn	r2, #1
   2288c:	bne	22b84 <__assert_fail@plt+0x10ee8>
   22890:	ldr	r0, [r4, #24]
   22894:	ldr	r1, [r4, #32]
   22898:	mov	lr, sl
   2289c:	add	r8, r1, r0
   228a0:	cmp	r8, r9
   228a4:	bge	22b64 <__assert_fail@plt+0x10ec8>
   228a8:	add	sl, r4, #16
   228ac:	str	lr, [sp]
   228b0:	ldr	r0, [r4]
   228b4:	ldr	r2, [r4, #44]	; 0x2c
   228b8:	mov	r3, sl
   228bc:	add	r1, r0, r8
   228c0:	ldr	r0, [sl]
   228c4:	sub	r7, r2, r8
   228c8:	mov	r2, r7
   228cc:	str	r0, [sp, #8]
   228d0:	ldr	r0, [sl, #4]
   228d4:	str	r0, [sp, #4]
   228d8:	add	r0, sp, #24
   228dc:	bl	1a228 <__assert_fail@plt+0x858c>
   228e0:	sub	r1, r0, #1
   228e4:	cmn	r1, #3
   228e8:	bcs	22900 <__assert_fail@plt+0x10c64>
   228ec:	ldr	r2, [sp, #24]
   228f0:	add	r8, r0, r8
   228f4:	cmp	r8, r9
   228f8:	blt	228b0 <__assert_fail@plt+0x10c14>
   228fc:	b	22b70 <__assert_fail@plt+0x10ed4>
   22900:	ldr	r3, [sp, #4]
   22904:	ldr	r1, [sp, #8]
   22908:	cmp	r7, #0
   2290c:	mov	r2, #0
   22910:	cmpne	r0, #0
   22914:	beq	22920 <__assert_fail@plt+0x10c84>
   22918:	ldr	r0, [r4]
   2291c:	ldrb	r2, [r0, r8]
   22920:	stm	sl, {r1, r3}
   22924:	mov	r0, #1
   22928:	b	228f0 <__assert_fail@plt+0x10c54>
   2292c:	ldr	r8, [r4, #28]
   22930:	ldr	sl, [r4, #12]
   22934:	mov	r0, #0
   22938:	mov	r1, r8
   2293c:	add	r2, r0, r1
   22940:	add	r2, r2, r2, lsr #31
   22944:	asr	r7, r2, #1
   22948:	ldr	r2, [sl, r7, lsl #2]
   2294c:	mov	r3, r7
   22950:	cmp	r2, r5
   22954:	bgt	22964 <__assert_fail@plt+0x10cc8>
   22958:	bge	22970 <__assert_fail@plt+0x10cd4>
   2295c:	add	r0, r7, #1
   22960:	mov	r3, r1
   22964:	cmp	r0, r3
   22968:	mov	r1, r3
   2296c:	blt	2293c <__assert_fail@plt+0x10ca0>
   22970:	cmp	r2, r5
   22974:	mov	r0, r4
   22978:	mov	r2, r6
   2297c:	addlt	r7, r7, #1
   22980:	sub	r1, r7, #1
   22984:	bl	22e5c <__assert_fail@plt+0x111c0>
   22988:	cmp	r8, r5
   2298c:	str	r0, [r4, #60]	; 0x3c
   22990:	ble	22a34 <__assert_fail@plt+0x10d98>
   22994:	cmp	r7, r5
   22998:	bne	22a34 <__assert_fail@plt+0x10d98>
   2299c:	ldr	r0, [sl, r5, lsl #2]
   229a0:	cmp	r0, r5
   229a4:	bne	22a34 <__assert_fail@plt+0x10d98>
   229a8:	ldr	r0, [r4, #8]
   229ac:	sub	r2, r8, r5
   229b0:	lsl	r2, r2, #2
   229b4:	add	r1, r0, r5, lsl #2
   229b8:	bl	11894 <memmove@plt>
   229bc:	ldr	r2, [r4, #28]
   229c0:	ldr	r0, [r4, #4]
   229c4:	add	r1, r0, r5
   229c8:	sub	r2, r2, r5
   229cc:	bl	11894 <memmove@plt>
   229d0:	ldr	r0, [r4, #28]
   229d4:	ldr	r1, [r4, #32]
   229d8:	sub	r0, r0, r5
   229dc:	sub	r1, r1, r5
   229e0:	cmp	r0, #1
   229e4:	str	r0, [r4, #28]
   229e8:	str	r1, [r4, #32]
   229ec:	blt	22724 <__assert_fail@plt+0x10a88>
   229f0:	ldr	r0, [r4, #12]
   229f4:	mov	r2, #0
   229f8:	add	r1, r0, r5, lsl #2
   229fc:	ldr	r3, [r1, r2, lsl #2]
   22a00:	sub	r3, r3, r5
   22a04:	str	r3, [r0, r2, lsl #2]
   22a08:	add	r2, r2, #1
   22a0c:	ldr	r3, [r4, #28]
   22a10:	cmp	r2, r3
   22a14:	blt	229fc <__assert_fail@plt+0x10d60>
   22a18:	b	22724 <__assert_fail@plt+0x10a88>
   22a1c:	ldr	r2, [r4, #28]
   22a20:	ldr	r0, [r4, #4]
   22a24:	add	r1, r0, r5
   22a28:	sub	r2, r2, r5
   22a2c:	bl	11894 <memmove@plt>
   22a30:	b	2270c <__assert_fail@plt+0x10a70>
   22a34:	mov	r0, #0
   22a38:	strb	r0, [r4, #76]	; 0x4c
   22a3c:	sub	r0, r5, r9
   22a40:	ldr	r1, [r4, #44]	; 0x2c
   22a44:	ldr	r2, [r4, #52]	; 0x34
   22a48:	add	r1, r0, r1
   22a4c:	add	r0, r0, r2
   22a50:	str	r1, [r4, #48]	; 0x30
   22a54:	sub	r1, sl, #4
   22a58:	str	r0, [r4, #56]	; 0x38
   22a5c:	mov	r0, r7
   22a60:	cmp	r7, #1
   22a64:	blt	22a78 <__assert_fail@plt+0x10ddc>
   22a68:	ldr	r2, [r1, r0, lsl #2]
   22a6c:	sub	r7, r0, #1
   22a70:	cmp	r2, r5
   22a74:	beq	22a5c <__assert_fail@plt+0x10dc0>
   22a78:	cmp	r0, r8
   22a7c:	bge	22aa0 <__assert_fail@plt+0x10e04>
   22a80:	ldr	r1, [r4, #8]
   22a84:	ldr	r2, [r1, r0, lsl #2]
   22a88:	cmn	r2, #1
   22a8c:	bne	22aa0 <__assert_fail@plt+0x10e04>
   22a90:	add	r0, r0, #1
   22a94:	cmp	r8, r0
   22a98:	bne	22a84 <__assert_fail@plt+0x10de8>
   22a9c:	b	22aa8 <__assert_fail@plt+0x10e0c>
   22aa0:	cmp	r0, r8
   22aa4:	bne	22b18 <__assert_fail@plt+0x10e7c>
   22aa8:	mov	r0, #0
   22aac:	str	r0, [r4, #28]
   22ab0:	b	22bd8 <__assert_fail@plt+0x10f3c>
   22ab4:	ldrb	r0, [r4, #72]	; 0x48
   22ab8:	cmp	r0, #0
   22abc:	beq	22be0 <__assert_fail@plt+0x10f44>
   22ac0:	mov	r0, r4
   22ac4:	bl	1dda0 <__assert_fail@plt+0xc104>
   22ac8:	b	2279c <__assert_fail@plt+0x10b00>
   22acc:	ldr	r3, [r4]
   22ad0:	add	r0, r5, r0
   22ad4:	ldr	r1, [r4, #64]	; 0x40
   22ad8:	add	r0, r0, r3
   22adc:	cmp	r1, #0
   22ae0:	ldrb	r0, [r0, #-1]
   22ae4:	str	r2, [r4, #32]
   22ae8:	ldrbne	r0, [r1, r0]
   22aec:	ldr	r1, [r4, #68]	; 0x44
   22af0:	ubfx	r2, r0, #5, #3
   22af4:	and	r3, r0, #31
   22af8:	ldr	r2, [r1, r2, lsl #2]
   22afc:	mov	r1, #1
   22b00:	tst	r2, r1, lsl r3
   22b04:	moveq	r1, #0
   22b08:	cmpeq	r0, #10
   22b0c:	beq	22c00 <__assert_fail@plt+0x10f64>
   22b10:	str	r1, [r4, #60]	; 0x3c
   22b14:	b	22724 <__assert_fail@plt+0x10a88>
   22b18:	ldr	r0, [sl, r0, lsl #2]
   22b1c:	subs	r2, r0, r5
   22b20:	str	r2, [r4, #28]
   22b24:	beq	22bf8 <__assert_fail@plt+0x10f5c>
   22b28:	cmp	r2, #1
   22b2c:	blt	22b50 <__assert_fail@plt+0x10eb4>
   22b30:	ldr	r0, [r4, #8]
   22b34:	mov	r1, #0
   22b38:	mvn	r3, #0
   22b3c:	str	r3, [r0, r1, lsl #2]
   22b40:	add	r1, r1, #1
   22b44:	ldr	r2, [r4, #28]
   22b48:	cmp	r1, r2
   22b4c:	blt	22b3c <__assert_fail@plt+0x10ea0>
   22b50:	ldr	r0, [r4, #4]
   22b54:	mov	r1, #255	; 0xff
   22b58:	bl	11b04 <memset@plt>
   22b5c:	ldr	r0, [r4, #28]
   22b60:	b	22bd8 <__assert_fail@plt+0x10f3c>
   22b64:	sub	r7, r8, r9
   22b68:	str	r7, [r4, #28]
   22b6c:	b	22bb8 <__assert_fail@plt+0x10f1c>
   22b70:	ldr	lr, [sp]
   22b74:	sub	r7, r8, r9
   22b78:	cmn	r2, #1
   22b7c:	str	r7, [r4, #28]
   22b80:	beq	22bb8 <__assert_fail@plt+0x10f1c>
   22b84:	ldrb	r0, [r4, #78]	; 0x4e
   22b88:	cmp	r0, #0
   22b8c:	bne	22c80 <__assert_fail@plt+0x10fe4>
   22b90:	mov	r1, #0
   22b94:	cmp	r2, #10
   22b98:	bne	22bac <__assert_fail@plt+0x10f10>
   22b9c:	ldrb	r0, [r4, #77]	; 0x4d
   22ba0:	cmp	r0, #0
   22ba4:	movwne	r0, #1
   22ba8:	lsl	r1, r0, #1
   22bac:	str	r1, [r4, #60]	; 0x3c
   22bb0:	ldr	r7, [r4, #28]
   22bb4:	b	22bcc <__assert_fail@plt+0x10f30>
   22bb8:	sub	r1, lr, #1
   22bbc:	mov	r0, r4
   22bc0:	mov	r2, r6
   22bc4:	bl	22e5c <__assert_fail@plt+0x111c0>
   22bc8:	str	r0, [r4, #60]	; 0x3c
   22bcc:	mov	r0, #0
   22bd0:	cmp	r7, #0
   22bd4:	bne	22c3c <__assert_fail@plt+0x10fa0>
   22bd8:	str	r0, [r4, #32]
   22bdc:	b	22724 <__assert_fail@plt+0x10a88>
   22be0:	ldr	r0, [r4, #64]	; 0x40
   22be4:	cmp	r0, #0
   22be8:	beq	2279c <__assert_fail@plt+0x10b00>
   22bec:	mov	r0, r4
   22bf0:	bl	1dff8 <__assert_fail@plt+0xc35c>
   22bf4:	b	2279c <__assert_fail@plt+0x10b00>
   22bf8:	mov	r0, #0
   22bfc:	b	22bd8 <__assert_fail@plt+0x10f3c>
   22c00:	ldrb	r0, [r4, #77]	; 0x4d
   22c04:	cmp	r0, #0
   22c08:	movwne	r0, #1
   22c0c:	lsl	r1, r0, #1
   22c10:	b	22b10 <__assert_fail@plt+0x10e74>
   22c14:	mov	r2, #0
   22c18:	strb	r2, [r4, #76]	; 0x4c
   22c1c:	sub	r2, r5, r9
   22c20:	ldr	r3, [r4, #44]	; 0x2c
   22c24:	ldr	r7, [r4, #52]	; 0x34
   22c28:	add	r3, r2, r3
   22c2c:	add	r2, r2, r7
   22c30:	str	r3, [r4, #48]	; 0x30
   22c34:	str	r2, [r4, #56]	; 0x38
   22c38:	b	227c4 <__assert_fail@plt+0x10b28>
   22c3c:	cmp	r7, #1
   22c40:	blt	22c64 <__assert_fail@plt+0x10fc8>
   22c44:	ldr	r0, [r4, #8]
   22c48:	mov	r1, #0
   22c4c:	mvn	r2, #0
   22c50:	str	r2, [r0, r1, lsl #2]
   22c54:	add	r1, r1, #1
   22c58:	ldr	r7, [r4, #28]
   22c5c:	cmp	r1, r7
   22c60:	blt	22c50 <__assert_fail@plt+0x10fb4>
   22c64:	ldrb	r0, [r4, #75]	; 0x4b
   22c68:	cmp	r0, #0
   22c6c:	beq	22ca8 <__assert_fail@plt+0x1100c>
   22c70:	ldr	r0, [r4, #4]
   22c74:	mov	r1, #255	; 0xff
   22c78:	mov	r2, r7
   22c7c:	b	22b58 <__assert_fail@plt+0x10ebc>
   22c80:	mov	r0, r2
   22c84:	mov	r6, r2
   22c88:	bl	11ad4 <iswalnum@plt>
   22c8c:	mov	r1, #1
   22c90:	cmp	r6, #95	; 0x5f
   22c94:	beq	22bac <__assert_fail@plt+0x10f10>
   22c98:	mov	r2, r6
   22c9c:	cmp	r0, #0
   22ca0:	beq	22b90 <__assert_fail@plt+0x10ef4>
   22ca4:	b	22bac <__assert_fail@plt+0x10f10>
   22ca8:	mov	r0, r7
   22cac:	b	22bd8 <__assert_fail@plt+0x10f3c>
   22cb0:	cmp	r2, #1
   22cb4:	blt	22cec <__assert_fail@plt+0x11050>
   22cb8:	cmp	r2, #6
   22cbc:	mov	r1, r2
   22cc0:	movge	r1, #6
   22cc4:	sub	ip, r1, #1
   22cc8:	add	r1, sp, #14
   22ccc:	ldrb	r3, [r7, ip]
   22cd0:	cmp	ip, #0
   22cd4:	ldrb	r3, [r0, r3]
   22cd8:	strb	r3, [r1, ip]
   22cdc:	sub	r3, ip, #1
   22ce0:	mov	ip, r3
   22ce4:	bgt	22ccc <__assert_fail@plt+0x11030>
   22ce8:	b	22840 <__assert_fail@plt+0x10ba4>
   22cec:	add	r1, sp, #14
   22cf0:	b	22840 <__assert_fail@plt+0x10ba4>
   22cf4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22cf8:	add	fp, sp, #24
   22cfc:	mov	r3, r2
   22d00:	ldr	r2, [r0, #88]	; 0x58
   22d04:	mov	r5, r1
   22d08:	mov	r4, r0
   22d0c:	mov	r1, r3
   22d10:	bl	22e5c <__assert_fail@plt+0x111c0>
   22d14:	ldr	r1, [r5, #8]
   22d18:	cmp	r1, #1
   22d1c:	blt	22dac <__assert_fail@plt+0x11110>
   22d20:	and	ip, r0, #8
   22d24:	and	lr, r0, #2
   22d28:	and	r2, r0, #1
   22d2c:	ldr	r0, [r4, #84]	; 0x54
   22d30:	ldr	r5, [r5, #12]
   22d34:	movw	r8, #65280	; 0xff00
   22d38:	mov	r3, #0
   22d3c:	movt	r8, #3
   22d40:	ldr	r4, [r0]
   22d44:	ldr	r0, [r5, r3, lsl #2]
   22d48:	add	r7, r4, r0, lsl #3
   22d4c:	ldr	r7, [r7, #4]
   22d50:	uxtb	r6, r7
   22d54:	cmp	r6, #2
   22d58:	bne	22da0 <__assert_fail@plt+0x11104>
   22d5c:	tst	r7, r8
   22d60:	beq	22db0 <__assert_fail@plt+0x11114>
   22d64:	cmp	r2, #0
   22d68:	bne	22d74 <__assert_fail@plt+0x110d8>
   22d6c:	ands	r6, r7, #1024	; 0x400
   22d70:	bne	22da0 <__assert_fail@plt+0x11104>
   22d74:	cmp	r2, #0
   22d78:	andsne	r6, r7, #2048	; 0x800
   22d7c:	bne	22da0 <__assert_fail@plt+0x11104>
   22d80:	cmp	lr, #0
   22d84:	bne	22d90 <__assert_fail@plt+0x110f4>
   22d88:	ands	r6, r7, #8192	; 0x2000
   22d8c:	bne	22da0 <__assert_fail@plt+0x11104>
   22d90:	cmp	ip, #0
   22d94:	bne	22db0 <__assert_fail@plt+0x11114>
   22d98:	ands	r6, r7, #32768	; 0x8000
   22d9c:	beq	22db0 <__assert_fail@plt+0x11114>
   22da0:	add	r3, r3, #1
   22da4:	cmp	r3, r1
   22da8:	blt	22d44 <__assert_fail@plt+0x110a8>
   22dac:	mov	r0, #0
   22db0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22db4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22db8:	add	fp, sp, #24
   22dbc:	mov	r8, r0
   22dc0:	ldr	r0, [r0, #124]	; 0x7c
   22dc4:	cmp	r0, #1
   22dc8:	blt	22e4c <__assert_fail@plt+0x111b0>
   22dcc:	mov	r7, #0
   22dd0:	ldr	r0, [r8, #132]	; 0x84
   22dd4:	ldr	r5, [r0, r7, lsl #2]
   22dd8:	ldr	r0, [r5, #16]
   22ddc:	cmp	r0, #1
   22de0:	blt	22e10 <__assert_fail@plt+0x11174>
   22de4:	mov	r4, #0
   22de8:	ldr	r0, [r5, #20]
   22dec:	ldr	r6, [r0, r4, lsl #2]
   22df0:	ldr	r0, [r6, #16]
   22df4:	bl	1a12c <__assert_fail@plt+0x8490>
   22df8:	mov	r0, r6
   22dfc:	bl	1a12c <__assert_fail@plt+0x8490>
   22e00:	ldr	r0, [r5, #16]
   22e04:	add	r4, r4, #1
   22e08:	cmp	r4, r0
   22e0c:	blt	22de8 <__assert_fail@plt+0x1114c>
   22e10:	ldr	r0, [r5, #20]
   22e14:	bl	1a12c <__assert_fail@plt+0x8490>
   22e18:	ldr	r0, [r5, #8]
   22e1c:	cmp	r0, #0
   22e20:	beq	22e34 <__assert_fail@plt+0x11198>
   22e24:	ldr	r0, [r0, #8]
   22e28:	bl	1a12c <__assert_fail@plt+0x8490>
   22e2c:	ldr	r0, [r5, #8]
   22e30:	bl	1a12c <__assert_fail@plt+0x8490>
   22e34:	mov	r0, r5
   22e38:	bl	1a12c <__assert_fail@plt+0x8490>
   22e3c:	ldr	r0, [r8, #124]	; 0x7c
   22e40:	add	r7, r7, #1
   22e44:	cmp	r7, r0
   22e48:	blt	22dd0 <__assert_fail@plt+0x11134>
   22e4c:	mov	r0, #0
   22e50:	str	r0, [r8, #108]	; 0x6c
   22e54:	str	r0, [r8, #124]	; 0x7c
   22e58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22e5c:	push	{r4, r5, fp, lr}
   22e60:	add	fp, sp, #8
   22e64:	mov	r4, r0
   22e68:	cmn	r1, #1
   22e6c:	ble	22ea4 <__assert_fail@plt+0x11208>
   22e70:	ldr	r0, [r4, #48]	; 0x30
   22e74:	cmp	r0, r1
   22e78:	beq	22f08 <__assert_fail@plt+0x1126c>
   22e7c:	ldr	r0, [r4, #80]	; 0x50
   22e80:	cmp	r0, #2
   22e84:	blt	22eac <__assert_fail@plt+0x11210>
   22e88:	ldr	r0, [r4, #8]
   22e8c:	ldr	r5, [r0, r1, lsl #2]
   22e90:	cmn	r5, #1
   22e94:	bne	22edc <__assert_fail@plt+0x11240>
   22e98:	sub	r1, r1, #1
   22e9c:	cmn	r1, #1
   22ea0:	bne	22e8c <__assert_fail@plt+0x111f0>
   22ea4:	ldr	r0, [r4, #60]	; 0x3c
   22ea8:	pop	{r4, r5, fp, pc}
   22eac:	ldr	r0, [r4, #4]
   22eb0:	ldr	r2, [r4, #68]	; 0x44
   22eb4:	ldrb	r1, [r0, r1]
   22eb8:	ubfx	r0, r1, #5, #3
   22ebc:	and	r3, r1, #31
   22ec0:	ldr	r2, [r2, r0, lsl #2]
   22ec4:	mov	r0, #1
   22ec8:	tst	r2, r0, lsl r3
   22ecc:	moveq	r0, #0
   22ed0:	cmpeq	r1, #10
   22ed4:	bne	22f04 <__assert_fail@plt+0x11268>
   22ed8:	b	22ef4 <__assert_fail@plt+0x11258>
   22edc:	ldrb	r0, [r4, #78]	; 0x4e
   22ee0:	cmp	r0, #0
   22ee4:	bne	22f14 <__assert_fail@plt+0x11278>
   22ee8:	mov	r0, #0
   22eec:	cmp	r5, #10
   22ef0:	popne	{r4, r5, fp, pc}
   22ef4:	ldrb	r0, [r4, #77]	; 0x4d
   22ef8:	cmp	r0, #0
   22efc:	movwne	r0, #1
   22f00:	lsl	r0, r0, #1
   22f04:	pop	{r4, r5, fp, pc}
   22f08:	and	r0, r2, #2
   22f0c:	eor	r0, r0, #10
   22f10:	pop	{r4, r5, fp, pc}
   22f14:	mov	r0, r5
   22f18:	bl	11ad4 <iswalnum@plt>
   22f1c:	mov	r1, r0
   22f20:	mov	r0, #1
   22f24:	cmp	r5, #95	; 0x5f
   22f28:	beq	22f04 <__assert_fail@plt+0x11268>
   22f2c:	cmp	r1, #0
   22f30:	beq	22ee8 <__assert_fail@plt+0x1124c>
   22f34:	b	22f04 <__assert_fail@plt+0x11268>
   22f38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f3c:	add	fp, sp, #28
   22f40:	sub	sp, sp, #4
   22f44:	mov	sl, r0
   22f48:	ldr	r0, [r1, #4]
   22f4c:	cmp	r0, #1
   22f50:	blt	2301c <__assert_fail@plt+0x11380>
   22f54:	ldr	r7, [sl, #84]	; 0x54
   22f58:	mov	r8, r2
   22f5c:	mov	r5, r1
   22f60:	mov	r4, #0
   22f64:	ldr	r1, [r5, #8]
   22f68:	ldr	r6, [r1, r4, lsl #2]
   22f6c:	ldr	r1, [r7]
   22f70:	add	r2, r1, r6, lsl #3
   22f74:	ldrb	r2, [r2, #4]
   22f78:	cmp	r2, #8
   22f7c:	bne	22fe8 <__assert_fail@plt+0x1134c>
   22f80:	ldr	r1, [r1, r6, lsl #3]
   22f84:	cmp	r1, #31
   22f88:	bgt	22fe8 <__assert_fail@plt+0x1134c>
   22f8c:	ldr	r2, [r7, #80]	; 0x50
   22f90:	mov	r3, #1
   22f94:	tst	r2, r3, lsl r1
   22f98:	beq	22fe8 <__assert_fail@plt+0x1134c>
   22f9c:	ldr	r0, [sl, #124]	; 0x7c
   22fa0:	ldr	r9, [sl, #128]	; 0x80
   22fa4:	cmp	r0, r9
   22fa8:	beq	22ff8 <__assert_fail@plt+0x1135c>
   22fac:	mov	r0, #1
   22fb0:	mov	r1, #24
   22fb4:	bl	19ea4 <__assert_fail@plt+0x8208>
   22fb8:	ldr	r1, [sl, #124]	; 0x7c
   22fbc:	ldr	r2, [sl, #132]	; 0x84
   22fc0:	str	r0, [r2, r1, lsl #2]
   22fc4:	ldr	r0, [sl, #132]	; 0x84
   22fc8:	ldr	r0, [r0, r1, lsl #2]
   22fcc:	cmp	r0, #0
   22fd0:	beq	23028 <__assert_fail@plt+0x1138c>
   22fd4:	add	r1, r1, #1
   22fd8:	str	r6, [r0, #4]
   22fdc:	str	r1, [sl, #124]	; 0x7c
   22fe0:	str	r8, [r0]
   22fe4:	ldr	r0, [r5, #4]
   22fe8:	add	r4, r4, #1
   22fec:	cmp	r4, r0
   22ff0:	blt	22f64 <__assert_fail@plt+0x112c8>
   22ff4:	b	2301c <__assert_fail@plt+0x11380>
   22ff8:	ldr	r0, [sl, #132]	; 0x84
   22ffc:	lsl	r1, r9, #3
   23000:	bl	1a28c <__assert_fail@plt+0x85f0>
   23004:	cmp	r0, #0
   23008:	beq	23028 <__assert_fail@plt+0x1138c>
   2300c:	lsl	r1, r9, #1
   23010:	str	r1, [sl, #128]	; 0x80
   23014:	str	r0, [sl, #132]	; 0x84
   23018:	b	22fac <__assert_fail@plt+0x11310>
   2301c:	mov	r0, #0
   23020:	sub	sp, fp, #28
   23024:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23028:	mov	r0, #12
   2302c:	b	23020 <__assert_fail@plt+0x11384>
   23030:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23034:	add	fp, sp, #28
   23038:	sub	sp, sp, #76	; 0x4c
   2303c:	mov	r7, r0
   23040:	ldr	r0, [r1, #4]
   23044:	cmp	r0, #1
   23048:	blt	236fc <__assert_fail@plt+0x11a60>
   2304c:	ldr	r2, [r7, #84]	; 0x54
   23050:	ldr	r0, [r7, #40]	; 0x28
   23054:	mov	r3, #0
   23058:	str	r7, [sp, #40]	; 0x28
   2305c:	str	r1, [sp, #12]
   23060:	str	r0, [sp, #52]	; 0x34
   23064:	str	r2, [sp, #24]
   23068:	ldr	r0, [r1, #8]
   2306c:	str	r3, [sp, #20]
   23070:	ldr	r3, [r0, r3, lsl #2]
   23074:	ldr	r0, [r2]
   23078:	add	r0, r0, r3, lsl #3
   2307c:	mov	r1, r3
   23080:	str	r3, [sp, #48]	; 0x30
   23084:	ldr	r4, [r0, #4]
   23088:	uxtb	r0, r4
   2308c:	cmp	r0, #4
   23090:	bne	236e0 <__assert_fail@plt+0x11a44>
   23094:	movw	r0, #65280	; 0xff00
   23098:	movt	r0, #3
   2309c:	tst	r4, r0
   230a0:	beq	230f4 <__assert_fail@plt+0x11458>
   230a4:	ldr	r2, [r7, #88]	; 0x58
   230a8:	ldr	r1, [sp, #52]	; 0x34
   230ac:	mov	r0, r7
   230b0:	bl	22e5c <__assert_fail@plt+0x111c0>
   230b4:	and	r1, r0, #1
   230b8:	tst	r4, #1024	; 0x400
   230bc:	beq	230c8 <__assert_fail@plt+0x1142c>
   230c0:	cmp	r1, #0
   230c4:	beq	236e0 <__assert_fail@plt+0x11a44>
   230c8:	tst	r4, #2048	; 0x800
   230cc:	cmpne	r1, #0
   230d0:	bne	236e0 <__assert_fail@plt+0x11a44>
   230d4:	tst	r4, #8192	; 0x2000
   230d8:	beq	230e4 <__assert_fail@plt+0x11448>
   230dc:	ands	r1, r0, #2
   230e0:	beq	236e0 <__assert_fail@plt+0x11a44>
   230e4:	tst	r4, #32768	; 0x8000
   230e8:	beq	230f4 <__assert_fail@plt+0x11458>
   230ec:	ands	r0, r0, #8
   230f0:	beq	236e0 <__assert_fail@plt+0x11a44>
   230f4:	ldr	r0, [r7, #84]	; 0x54
   230f8:	ldr	r1, [sp, #52]	; 0x34
   230fc:	ldr	r4, [r7, #4]
   23100:	ldr	r8, [r7, #108]	; 0x6c
   23104:	str	r0, [sp, #36]	; 0x24
   23108:	mov	r0, r7
   2310c:	bl	23b70 <__assert_fail@plt+0x11ed4>
   23110:	cmn	r0, #1
   23114:	beq	23144 <__assert_fail@plt+0x114a8>
   23118:	ldr	r1, [r7, #116]	; 0x74
   2311c:	add	r0, r0, r0, lsl #1
   23120:	add	r0, r1, r0, lsl #3
   23124:	ldr	r1, [r0]
   23128:	ldr	r2, [sp, #48]	; 0x30
   2312c:	cmp	r1, r2
   23130:	beq	234d0 <__assert_fail@plt+0x11834>
   23134:	ldrb	r1, [r0, #20]
   23138:	add	r0, r0, #24
   2313c:	cmp	r1, #0
   23140:	bne	23124 <__assert_fail@plt+0x11488>
   23144:	ldr	r0, [r7, #124]	; 0x7c
   23148:	cmp	r0, #1
   2314c:	mov	r0, r8
   23150:	blt	234d4 <__assert_fail@plt+0x11838>
   23154:	ldr	r0, [sp, #36]	; 0x24
   23158:	ldr	r1, [sp, #48]	; 0x30
   2315c:	mov	r3, #0
   23160:	mov	ip, r4
   23164:	str	r8, [sp, #16]
   23168:	ldr	r0, [r0]
   2316c:	ldr	r2, [r0, r1, lsl #3]
   23170:	str	r2, [sp, #32]
   23174:	ldr	r1, [r7, #132]	; 0x84
   23178:	str	r3, [sp, #28]
   2317c:	ldr	r4, [r1, r3, lsl #2]
   23180:	ldr	r1, [r4, #4]
   23184:	ldr	r0, [r0, r1, lsl #3]
   23188:	cmp	r0, r2
   2318c:	bne	2329c <__assert_fail@plt+0x11600>
   23190:	ldr	r0, [r4, #16]
   23194:	ldr	r2, [r4]
   23198:	mov	r8, #0
   2319c:	str	r4, [sp, #44]	; 0x2c
   231a0:	cmp	r0, #1
   231a4:	blt	2326c <__assert_fail@plt+0x115d0>
   231a8:	ldr	r6, [sp, #52]	; 0x34
   231ac:	mov	r5, r2
   231b0:	ldr	r1, [r4, #20]
   231b4:	ldr	sl, [r1, r8, lsl #2]
   231b8:	ldr	r1, [sl, #4]
   231bc:	sub	r9, r1, r5
   231c0:	str	r1, [fp, #-48]	; 0xffffffd0
   231c4:	cmp	r9, #1
   231c8:	blt	23200 <__assert_fail@plt+0x11564>
   231cc:	ldr	r2, [r7, #28]
   231d0:	add	r1, r9, r6
   231d4:	cmp	r1, r2
   231d8:	bgt	23248 <__assert_fail@plt+0x115ac>
   231dc:	add	r0, ip, r6
   231e0:	add	r1, ip, r5
   231e4:	mov	r2, r9
   231e8:	mov	r4, ip
   231ec:	bl	11a80 <bcmp@plt>
   231f0:	mov	ip, r4
   231f4:	ldr	r4, [sp, #44]	; 0x2c
   231f8:	cmp	r0, #0
   231fc:	bne	23274 <__assert_fail@plt+0x115d8>
   23200:	ldr	r0, [sp, #52]	; 0x34
   23204:	ldr	r3, [sp, #48]	; 0x30
   23208:	mov	r1, r4
   2320c:	mov	r2, sl
   23210:	str	r0, [sp]
   23214:	mov	r0, r7
   23218:	bl	23c8c <__assert_fail@plt+0x11ff0>
   2321c:	cmp	r0, #1
   23220:	bhi	2370c <__assert_fail@plt+0x11a70>
   23224:	ldr	r2, [fp, #-48]	; 0xffffffd0
   23228:	ldr	r0, [r4, #16]
   2322c:	ldr	ip, [r7, #4]
   23230:	add	r8, r8, #1
   23234:	add	r6, r9, r6
   23238:	cmp	r8, r0
   2323c:	mov	r5, r2
   23240:	blt	231b0 <__assert_fail@plt+0x11514>
   23244:	b	2327c <__assert_fail@plt+0x115e0>
   23248:	ldr	r2, [r7, #48]	; 0x30
   2324c:	cmp	r1, r2
   23250:	bgt	23278 <__assert_fail@plt+0x115dc>
   23254:	mov	r0, r7
   23258:	bl	23bf8 <__assert_fail@plt+0x11f5c>
   2325c:	cmp	r0, #0
   23260:	bne	2370c <__assert_fail@plt+0x11a70>
   23264:	ldr	ip, [r7, #4]
   23268:	b	231dc <__assert_fail@plt+0x11540>
   2326c:	ldr	r6, [sp, #52]	; 0x34
   23270:	b	2327c <__assert_fail@plt+0x115e0>
   23274:	ldr	r0, [r4, #16]
   23278:	mov	r2, r5
   2327c:	cmp	r8, r0
   23280:	blt	23298 <__assert_fail@plt+0x115fc>
   23284:	ldr	r0, [sp, #52]	; 0x34
   23288:	cmp	r8, #0
   2328c:	addne	r2, r2, #1
   23290:	cmp	r2, r0
   23294:	ble	232c0 <__assert_fail@plt+0x11624>
   23298:	ldr	r8, [sp, #16]
   2329c:	ldr	r3, [sp, #28]
   232a0:	ldr	r0, [r7, #124]	; 0x7c
   232a4:	add	r3, r3, #1
   232a8:	cmp	r3, r0
   232ac:	bge	234c8 <__assert_fail@plt+0x1182c>
   232b0:	ldr	r0, [sp, #36]	; 0x24
   232b4:	ldr	r2, [sp, #32]
   232b8:	ldr	r0, [r0]
   232bc:	b	23174 <__assert_fail@plt+0x114d8>
   232c0:	ldr	r8, [sp, #16]
   232c4:	ldr	r0, [r4]
   232c8:	mov	sl, r2
   232cc:	cmp	r2, r0
   232d0:	ble	232fc <__assert_fail@plt+0x11660>
   232d4:	ldr	r0, [r7, #28]
   232d8:	cmp	r6, r0
   232dc:	bge	23468 <__assert_fail@plt+0x117cc>
   232e0:	add	r5, r6, #1
   232e4:	add	r1, sl, ip
   232e8:	ldrb	r0, [ip, r6]
   232ec:	ldrb	r1, [r1, #-1]
   232f0:	cmp	r0, r1
   232f4:	beq	23300 <__assert_fail@plt+0x11664>
   232f8:	b	2329c <__assert_fail@plt+0x11600>
   232fc:	mov	r5, r6
   23300:	ldr	r0, [r7, #100]	; 0x64
   23304:	mov	r6, r5
   23308:	ldr	r2, [r0, sl, lsl #2]
   2330c:	cmp	r2, #0
   23310:	beq	2335c <__assert_fail@plt+0x116c0>
   23314:	ldr	r0, [r2, #8]
   23318:	cmp	r0, #1
   2331c:	blt	2335c <__assert_fail@plt+0x116c0>
   23320:	ldr	r1, [sp, #36]	; 0x24
   23324:	ldr	r2, [r2, #12]
   23328:	ldr	r7, [sp, #32]
   2332c:	ldr	r1, [r1]
   23330:	ldr	r5, [r2]
   23334:	add	r3, r1, r5, lsl #3
   23338:	ldrb	r3, [r3, #4]
   2333c:	cmp	r3, #9
   23340:	bne	23350 <__assert_fail@plt+0x116b4>
   23344:	ldr	r3, [r1, r5, lsl #3]
   23348:	cmp	r3, r7
   2334c:	beq	23374 <__assert_fail@plt+0x116d8>
   23350:	add	r2, r2, #4
   23354:	subs	r0, r0, #1
   23358:	bne	23330 <__assert_fail@plt+0x11694>
   2335c:	ldr	r0, [sp, #52]	; 0x34
   23360:	ldr	r7, [sp, #40]	; 0x28
   23364:	add	r2, sl, #1
   23368:	cmp	sl, r0
   2336c:	blt	232c4 <__assert_fail@plt+0x11628>
   23370:	b	2329c <__assert_fail@plt+0x11600>
   23374:	cmn	r5, #1
   23378:	beq	2335c <__assert_fail@plt+0x116c0>
   2337c:	ldr	r1, [r4, #8]
   23380:	mov	r9, r6
   23384:	mov	r6, ip
   23388:	cmp	r1, #0
   2338c:	bne	233bc <__assert_fail@plt+0x11720>
   23390:	ldr	r0, [r4]
   23394:	mov	r7, #12
   23398:	sub	r0, sl, r0
   2339c:	add	r1, r0, #1
   233a0:	mov	r0, #12
   233a4:	bl	19ea4 <__assert_fail@plt+0x8208>
   233a8:	ldr	r4, [sp, #44]	; 0x2c
   233ac:	mov	r1, r0
   233b0:	cmp	r0, #0
   233b4:	str	r0, [r4, #8]
   233b8:	beq	23710 <__assert_fail@plt+0x11a74>
   233bc:	mov	r0, #9
   233c0:	ldr	r3, [r4]
   233c4:	ldr	r2, [r4, #4]
   233c8:	stm	sp, {r5, sl}
   233cc:	str	r0, [sp, #8]
   233d0:	ldr	r0, [sp, #40]	; 0x28
   233d4:	bl	23ddc <__assert_fail@plt+0x12140>
   233d8:	ldr	r4, [sp, #44]	; 0x2c
   233dc:	mov	ip, r6
   233e0:	cmp	r0, #1
   233e4:	mov	r6, r9
   233e8:	beq	2335c <__assert_fail@plt+0x116c0>
   233ec:	cmp	r0, #0
   233f0:	bne	2370c <__assert_fail@plt+0x11a70>
   233f4:	ldr	r1, [r4, #12]
   233f8:	ldr	r0, [r4, #16]
   233fc:	ldr	r7, [sp, #40]	; 0x28
   23400:	cmp	r0, r1
   23404:	beq	234a0 <__assert_fail@plt+0x11804>
   23408:	mov	r0, #1
   2340c:	mov	r1, #20
   23410:	bl	19ea4 <__assert_fail@plt+0x8208>
   23414:	cmp	r0, #0
   23418:	beq	23734 <__assert_fail@plt+0x11a98>
   2341c:	ldr	r1, [sp, #44]	; 0x2c
   23420:	mov	r2, r0
   23424:	ldr	r0, [r1, #16]
   23428:	ldr	r3, [r1, #20]
   2342c:	str	r2, [r3, r0, lsl #2]
   23430:	add	r0, r0, #1
   23434:	stm	r2, {r5, sl}
   23438:	ldr	r3, [sp, #48]	; 0x30
   2343c:	str	r0, [r1, #16]
   23440:	ldr	r0, [sp, #52]	; 0x34
   23444:	str	r0, [sp]
   23448:	mov	r0, r7
   2344c:	bl	23c8c <__assert_fail@plt+0x11ff0>
   23450:	cmp	r0, #1
   23454:	bhi	2370c <__assert_fail@plt+0x11a70>
   23458:	ldr	ip, [r7, #4]
   2345c:	ldr	r4, [sp, #44]	; 0x2c
   23460:	mov	r6, r9
   23464:	b	2335c <__assert_fail@plt+0x116c0>
   23468:	ldr	r0, [r7, #48]	; 0x30
   2346c:	cmp	r6, r0
   23470:	bge	2329c <__assert_fail@plt+0x11600>
   23474:	add	r5, r6, #1
   23478:	mov	r0, r7
   2347c:	mov	r9, r6
   23480:	mov	r1, r5
   23484:	bl	2373c <__assert_fail@plt+0x11aa0>
   23488:	cmp	r0, #0
   2348c:	bne	2370c <__assert_fail@plt+0x11a70>
   23490:	ldr	ip, [r7, #4]
   23494:	ldr	r4, [sp, #44]	; 0x2c
   23498:	mov	r6, r9
   2349c:	b	232e4 <__assert_fail@plt+0x11648>
   234a0:	mov	r1, #1
   234a4:	orr	r6, r1, r0, lsl #1
   234a8:	ldr	r0, [r4, #20]
   234ac:	lsl	r1, r6, #2
   234b0:	bl	1a28c <__assert_fail@plt+0x85f0>
   234b4:	cmp	r0, #0
   234b8:	beq	23734 <__assert_fail@plt+0x11a98>
   234bc:	str	r6, [r4, #12]
   234c0:	str	r0, [r4, #20]
   234c4:	b	23408 <__assert_fail@plt+0x1176c>
   234c8:	ldr	r0, [r7, #108]	; 0x6c
   234cc:	b	234d4 <__assert_fail@plt+0x11838>
   234d0:	mov	r0, r8
   234d4:	mov	r1, #0
   234d8:	cmp	r8, r0
   234dc:	str	r1, [fp, #-32]	; 0xffffffe0
   234e0:	bge	236e0 <__assert_fail@plt+0x11a44>
   234e4:	add	r0, r8, r8, lsl #1
   234e8:	lsl	r4, r0, #3
   234ec:	ldr	r0, [r7, #116]	; 0x74
   234f0:	ldr	r2, [sp, #48]	; 0x30
   234f4:	ldr	r1, [r0, r4]
   234f8:	cmp	r1, r2
   234fc:	bne	236c8 <__assert_fail@plt+0x11a2c>
   23500:	add	r0, r0, r4
   23504:	ldr	r2, [sp, #52]	; 0x34
   23508:	ldr	r1, [r0, #4]
   2350c:	cmp	r1, r2
   23510:	bne	236c8 <__assert_fail@plt+0x11a2c>
   23514:	ldr	r2, [r0, #8]
   23518:	ldr	r3, [r0, #12]
   2351c:	ldr	r0, [sp, #24]
   23520:	mov	r9, r8
   23524:	ldr	r6, [r0, #24]
   23528:	cmp	r3, r2
   2352c:	bne	23548 <__assert_fail@plt+0x118ac>
   23530:	ldr	r1, [sp, #48]	; 0x30
   23534:	ldr	r0, [r0, #20]
   23538:	add	r1, r1, r1, lsl #1
   2353c:	add	r0, r0, r1, lsl #2
   23540:	ldr	r0, [r0, #8]
   23544:	b	23554 <__assert_fail@plt+0x118b8>
   23548:	ldr	r0, [r0, #12]
   2354c:	ldr	r1, [sp, #48]	; 0x30
   23550:	add	r0, r0, r1, lsl #2
   23554:	ldr	r0, [r0]
   23558:	ldr	r8, [sp, #52]	; 0x34
   2355c:	ldr	r5, [sp, #40]	; 0x28
   23560:	str	r2, [fp, #-48]	; 0xffffffd0
   23564:	str	r3, [sp, #44]	; 0x2c
   23568:	add	r7, r0, r0, lsl #1
   2356c:	add	r0, r3, r8
   23570:	sub	sl, r0, r2
   23574:	ldr	r2, [r5, #88]	; 0x58
   23578:	mov	r0, r5
   2357c:	sub	r1, sl, #1
   23580:	bl	22e5c <__assert_fail@plt+0x111c0>
   23584:	mov	r3, r0
   23588:	ldr	r0, [r5, #100]	; 0x64
   2358c:	ldr	r1, [r0, r8, lsl #2]
   23590:	ldr	r2, [r0, sl, lsl #2]
   23594:	cmp	r1, #0
   23598:	beq	235a4 <__assert_fail@plt+0x11908>
   2359c:	ldr	r0, [r1, #8]
   235a0:	b	235a8 <__assert_fail@plt+0x1190c>
   235a4:	mov	r0, #0
   235a8:	add	r7, r6, r7, lsl #2
   235ac:	str	r0, [sp, #36]	; 0x24
   235b0:	sub	r0, fp, #44	; 0x2c
   235b4:	cmp	r2, #0
   235b8:	mov	r8, r9
   235bc:	beq	23628 <__assert_fail@plt+0x1198c>
   235c0:	ldr	r1, [r2, #40]	; 0x28
   235c4:	mov	r2, r7
   235c8:	mov	r6, r3
   235cc:	mov	r5, r0
   235d0:	bl	23968 <__assert_fail@plt+0x11ccc>
   235d4:	cmp	r0, #0
   235d8:	str	r0, [fp, #-32]	; 0xffffffe0
   235dc:	bne	2371c <__assert_fail@plt+0x11a80>
   235e0:	ldr	r1, [sp, #24]
   235e4:	sub	r0, fp, #32
   235e8:	mov	r2, r5
   235ec:	mov	r3, r6
   235f0:	bl	221e4 <__assert_fail@plt+0x10548>
   235f4:	ldr	r5, [sp, #40]	; 0x28
   235f8:	ldr	r1, [r5, #100]	; 0x64
   235fc:	str	r0, [r1, sl, lsl #2]
   23600:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23604:	bl	1a12c <__assert_fail@plt+0x8490>
   23608:	ldr	r3, [r5, #100]	; 0x64
   2360c:	ldr	r1, [r3, sl, lsl #2]
   23610:	cmp	r1, #0
   23614:	bne	23668 <__assert_fail@plt+0x119cc>
   23618:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2361c:	cmp	r0, #0
   23620:	beq	23668 <__assert_fail@plt+0x119cc>
   23624:	b	23704 <__assert_fail@plt+0x11a68>
   23628:	ldr	r1, [sp, #24]
   2362c:	sub	r0, fp, #32
   23630:	mov	r2, r7
   23634:	bl	221e4 <__assert_fail@plt+0x10548>
   23638:	ldr	r1, [r5, #100]	; 0x64
   2363c:	str	r0, [r1, sl, lsl #2]
   23640:	ldr	r3, [r5, #100]	; 0x64
   23644:	ldr	r1, [r3, sl, lsl #2]
   23648:	cmp	r1, #0
   2364c:	bne	23668 <__assert_fail@plt+0x119cc>
   23650:	ldr	r0, [fp, #-32]	; 0xffffffe0
   23654:	ldr	r1, [fp, #-48]	; 0xffffffd0
   23658:	ldr	r2, [sp, #44]	; 0x2c
   2365c:	cmp	r0, #0
   23660:	beq	23670 <__assert_fail@plt+0x119d4>
   23664:	b	23704 <__assert_fail@plt+0x11a68>
   23668:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2366c:	ldr	r2, [sp, #44]	; 0x2c
   23670:	cmp	r2, r1
   23674:	bne	236c8 <__assert_fail@plt+0x11a2c>
   23678:	ldr	r1, [sp, #52]	; 0x34
   2367c:	ldr	r0, [r3, r1, lsl #2]
   23680:	ldr	r1, [sp, #36]	; 0x24
   23684:	ldr	r0, [r0, #8]
   23688:	cmp	r0, r1
   2368c:	ble	236c8 <__assert_fail@plt+0x11a2c>
   23690:	ldr	r5, [sp, #40]	; 0x28
   23694:	ldr	r2, [sp, #52]	; 0x34
   23698:	mov	r1, r7
   2369c:	mov	r0, r5
   236a0:	bl	22f38 <__assert_fail@plt+0x1129c>
   236a4:	cmp	r0, #0
   236a8:	str	r0, [fp, #-32]	; 0xffffffe0
   236ac:	bne	23704 <__assert_fail@plt+0x11a68>
   236b0:	mov	r0, r5
   236b4:	mov	r1, r7
   236b8:	bl	23030 <__assert_fail@plt+0x11394>
   236bc:	cmp	r0, #0
   236c0:	str	r0, [fp, #-32]	; 0xffffffe0
   236c4:	bne	23704 <__assert_fail@plt+0x11a68>
   236c8:	ldr	r7, [sp, #40]	; 0x28
   236cc:	add	r8, r8, #1
   236d0:	add	r4, r4, #24
   236d4:	ldr	r0, [r7, #108]	; 0x6c
   236d8:	cmp	r8, r0
   236dc:	blt	234ec <__assert_fail@plt+0x11850>
   236e0:	ldr	r1, [sp, #12]
   236e4:	ldr	r3, [sp, #20]
   236e8:	ldr	r2, [sp, #24]
   236ec:	ldr	r0, [r1, #4]
   236f0:	add	r3, r3, #1
   236f4:	cmp	r3, r0
   236f8:	blt	23068 <__assert_fail@plt+0x113cc>
   236fc:	mov	r0, #0
   23700:	str	r0, [fp, #-32]	; 0xffffffe0
   23704:	sub	sp, fp, #28
   23708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2370c:	mov	r7, r0
   23710:	str	r7, [fp, #-32]	; 0xffffffe0
   23714:	mov	r0, r7
   23718:	b	23704 <__assert_fail@plt+0x11a68>
   2371c:	mov	r1, r0
   23720:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23724:	mov	r4, r1
   23728:	bl	1a12c <__assert_fail@plt+0x8490>
   2372c:	mov	r0, r4
   23730:	b	23704 <__assert_fail@plt+0x11a68>
   23734:	mov	r7, #12
   23738:	b	23710 <__assert_fail@plt+0x11a74>
   2373c:	push	{r4, r5, fp, lr}
   23740:	add	fp, sp, #8
   23744:	mov	r4, r0
   23748:	ldr	r0, [r0, #36]	; 0x24
   2374c:	mov	r5, #12
   23750:	cmn	r0, #-536870910	; 0xe0000002
   23754:	bhi	2380c <__assert_fail@plt+0x11b70>
   23758:	ldr	r2, [r4, #48]	; 0x30
   2375c:	cmp	r2, r0, lsl #1
   23760:	lslge	r2, r0, #1
   23764:	mov	r0, r4
   23768:	cmp	r2, r1
   2376c:	movle	r2, r1
   23770:	mov	r1, r2
   23774:	bl	1d730 <__assert_fail@plt+0xba94>
   23778:	cmp	r0, #0
   2377c:	bne	237d0 <__assert_fail@plt+0x11b34>
   23780:	ldr	r0, [r4, #100]	; 0x64
   23784:	cmp	r0, #0
   23788:	beq	237a8 <__assert_fail@plt+0x11b0c>
   2378c:	ldr	r1, [r4, #36]	; 0x24
   23790:	mov	r2, #4
   23794:	add	r1, r2, r1, lsl #2
   23798:	bl	1a28c <__assert_fail@plt+0x85f0>
   2379c:	cmp	r0, #0
   237a0:	beq	2380c <__assert_fail@plt+0x11b70>
   237a4:	str	r0, [r4, #100]	; 0x64
   237a8:	ldrb	r1, [r4, #72]	; 0x48
   237ac:	ldr	r0, [r4, #80]	; 0x50
   237b0:	cmp	r1, #0
   237b4:	beq	237d8 <__assert_fail@plt+0x11b3c>
   237b8:	cmp	r0, #2
   237bc:	blt	237ec <__assert_fail@plt+0x11b50>
   237c0:	mov	r0, r4
   237c4:	bl	1d7d0 <__assert_fail@plt+0xbb34>
   237c8:	cmp	r0, #0
   237cc:	beq	23808 <__assert_fail@plt+0x11b6c>
   237d0:	mov	r5, r0
   237d4:	b	2380c <__assert_fail@plt+0x11b70>
   237d8:	cmp	r0, #2
   237dc:	blt	237f8 <__assert_fail@plt+0x11b5c>
   237e0:	mov	r0, r4
   237e4:	bl	1de0c <__assert_fail@plt+0xc170>
   237e8:	b	23808 <__assert_fail@plt+0x11b6c>
   237ec:	mov	r0, r4
   237f0:	bl	1dda0 <__assert_fail@plt+0xc104>
   237f4:	b	23808 <__assert_fail@plt+0x11b6c>
   237f8:	ldr	r0, [r4, #64]	; 0x40
   237fc:	cmp	r0, #0
   23800:	movne	r0, r4
   23804:	blne	1dff8 <__assert_fail@plt+0xc35c>
   23808:	mov	r5, #0
   2380c:	mov	r0, r5
   23810:	pop	{r4, r5, fp, pc}
   23814:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   23818:	add	fp, sp, #24
   2381c:	sub	sp, sp, #16
   23820:	mov	r8, r0
   23824:	mov	r4, r1
   23828:	ldr	r5, [r1, #40]	; 0x28
   2382c:	ldr	r7, [r1, #84]	; 0x54
   23830:	ldr	r0, [r1, #100]	; 0x64
   23834:	ldr	r1, [r1, #104]	; 0x68
   23838:	mov	r6, r2
   2383c:	cmp	r5, r1
   23840:	ble	23850 <__assert_fail@plt+0x11bb4>
   23844:	str	r6, [r0, r5, lsl #2]
   23848:	str	r5, [r4, #104]	; 0x68
   2384c:	b	238f4 <__assert_fail@plt+0x11c58>
   23850:	ldr	r1, [r0, r5, lsl #2]
   23854:	cmp	r1, #0
   23858:	beq	23894 <__assert_fail@plt+0x11bf8>
   2385c:	ldr	r2, [r1, #40]	; 0x28
   23860:	cmp	r6, #0
   23864:	beq	2389c <__assert_fail@plt+0x11c00>
   23868:	ldr	r6, [r6, #40]	; 0x28
   2386c:	mov	r0, sp
   23870:	mov	r1, r6
   23874:	bl	23968 <__assert_fail@plt+0x11ccc>
   23878:	cmp	r0, #0
   2387c:	str	r0, [r8]
   23880:	bne	23960 <__assert_fail@plt+0x11cc4>
   23884:	ldr	r0, [r4, #40]	; 0x28
   23888:	clz	r1, r6
   2388c:	lsr	r9, r1, #5
   23890:	b	238b4 <__assert_fail@plt+0x11c18>
   23894:	str	r6, [r0, r5, lsl #2]
   23898:	b	238f4 <__assert_fail@plt+0x11c58>
   2389c:	vldr	d16, [r2]
   238a0:	ldr	r0, [r2, #8]
   238a4:	mov	r9, #1
   238a8:	str	r0, [sp, #8]
   238ac:	mov	r0, r5
   238b0:	vstr	d16, [sp]
   238b4:	ldr	r2, [r4, #88]	; 0x58
   238b8:	sub	r1, r0, #1
   238bc:	mov	r0, r4
   238c0:	bl	22e5c <__assert_fail@plt+0x111c0>
   238c4:	mov	r3, r0
   238c8:	mov	r2, sp
   238cc:	mov	r0, r8
   238d0:	mov	r1, r7
   238d4:	bl	221e4 <__assert_fail@plt+0x10548>
   238d8:	mov	r6, r0
   238dc:	ldr	r0, [r4, #100]	; 0x64
   238e0:	cmp	r9, #0
   238e4:	str	r6, [r0, r5, lsl #2]
   238e8:	bne	238f4 <__assert_fail@plt+0x11c58>
   238ec:	ldr	r0, [sp, #8]
   238f0:	bl	1a12c <__assert_fail@plt+0x8490>
   238f4:	cmp	r6, #0
   238f8:	ldrne	r0, [r7, #76]	; 0x4c
   238fc:	cmpne	r0, #0
   23900:	bne	23910 <__assert_fail@plt+0x11c74>
   23904:	mov	r0, r6
   23908:	sub	sp, fp, #24
   2390c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23910:	add	r7, r6, #4
   23914:	mov	r0, r4
   23918:	mov	r2, r5
   2391c:	mov	r1, r7
   23920:	bl	22f38 <__assert_fail@plt+0x1129c>
   23924:	cmp	r0, #0
   23928:	str	r0, [r8]
   2392c:	bne	23960 <__assert_fail@plt+0x11cc4>
   23930:	ldrb	r0, [r6, #52]	; 0x34
   23934:	tst	r0, #64	; 0x40
   23938:	beq	23904 <__assert_fail@plt+0x11c68>
   2393c:	mov	r0, r4
   23940:	mov	r1, r7
   23944:	bl	23030 <__assert_fail@plt+0x11394>
   23948:	str	r0, [r8]
   2394c:	cmp	r0, #0
   23950:	mov	r6, #0
   23954:	ldreq	r0, [r4, #100]	; 0x64
   23958:	ldreq	r6, [r0, r5, lsl #2]
   2395c:	b	23904 <__assert_fail@plt+0x11c68>
   23960:	mov	r6, #0
   23964:	b	23904 <__assert_fail@plt+0x11c68>
   23968:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2396c:	add	fp, sp, #28
   23970:	sub	sp, sp, #20
   23974:	mov	r8, r2
   23978:	cmp	r1, #0
   2397c:	str	r0, [sp, #16]
   23980:	beq	23abc <__assert_fail@plt+0x11e20>
   23984:	ldr	r0, [r1, #4]
   23988:	mov	r6, r1
   2398c:	cmp	r8, #0
   23990:	beq	23aa8 <__assert_fail@plt+0x11e0c>
   23994:	cmp	r0, #1
   23998:	blt	23aa8 <__assert_fail@plt+0x11e0c>
   2399c:	ldr	r1, [r8, #4]
   239a0:	cmp	r1, #1
   239a4:	blt	23aa8 <__assert_fail@plt+0x11e0c>
   239a8:	ldr	r4, [sp, #16]
   239ac:	add	r0, r1, r0
   239b0:	str	r0, [r4]
   239b4:	lsl	r0, r0, #2
   239b8:	bl	1a1f8 <__assert_fail@plt+0x855c>
   239bc:	cmp	r0, #0
   239c0:	str	r0, [r4, #8]
   239c4:	beq	23b68 <__assert_fail@plt+0x11ecc>
   239c8:	ldr	r9, [r8, #4]
   239cc:	ldr	lr, [r6, #4]
   239d0:	mov	r7, #0
   239d4:	mov	r1, #0
   239d8:	cmp	r9, #0
   239dc:	movwgt	r1, #1
   239e0:	cmp	lr, #1
   239e4:	blt	23afc <__assert_fail@plt+0x11e60>
   239e8:	mov	r2, #0
   239ec:	mov	ip, #0
   239f0:	str	r2, [sp, #8]
   239f4:	mov	r2, #0
   239f8:	str	r2, [sp, #12]
   239fc:	mov	r2, #0
   23a00:	ldr	r4, [sp, #12]
   23a04:	mov	r7, ip
   23a08:	tst	r1, #1
   23a0c:	beq	23b2c <__assert_fail@plt+0x11e90>
   23a10:	ldr	r1, [r8, #8]
   23a14:	ldr	r3, [r1, r7, lsl #2]
   23a18:	ldr	r1, [r6, #8]
   23a1c:	ldr	sl, [r1, r2, lsl #2]
   23a20:	cmp	sl, r3
   23a24:	ble	23a4c <__assert_fail@plt+0x11db0>
   23a28:	add	r7, r7, #1
   23a2c:	str	r3, [r0, r4, lsl #2]
   23a30:	mov	r1, #0
   23a34:	add	r4, r4, #1
   23a38:	cmp	r9, r7
   23a3c:	movwgt	r1, #1
   23a40:	cmp	lr, r2
   23a44:	bgt	23a08 <__assert_fail@plt+0x11d6c>
   23a48:	b	23b00 <__assert_fail@plt+0x11e64>
   23a4c:	add	r1, r7, #1
   23a50:	str	sl, [r0, r4, lsl #2]
   23a54:	mov	ip, r7
   23a58:	add	r2, r2, #1
   23a5c:	str	r1, [sp, #4]
   23a60:	ldr	r9, [r8, #4]
   23a64:	ldr	lr, [r6, #4]
   23a68:	moveq	ip, r1
   23a6c:	mov	r1, #0
   23a70:	ldr	r5, [sp, #8]
   23a74:	cmp	r9, ip
   23a78:	sub	r5, r5, #1
   23a7c:	movwgt	r1, #1
   23a80:	cmp	lr, r2
   23a84:	str	r5, [sp, #8]
   23a88:	add	r5, r4, #1
   23a8c:	str	r5, [sp, #12]
   23a90:	bgt	23a00 <__assert_fail@plt+0x11d64>
   23a94:	ldr	r2, [sp, #4]
   23a98:	cmp	sl, r3
   23a9c:	add	r4, r4, #1
   23aa0:	moveq	r7, r2
   23aa4:	b	23b00 <__assert_fail@plt+0x11e64>
   23aa8:	cmp	r0, #1
   23aac:	blt	23abc <__assert_fail@plt+0x11e20>
   23ab0:	ldr	r0, [sp, #16]
   23ab4:	mov	r1, r6
   23ab8:	b	23ad8 <__assert_fail@plt+0x11e3c>
   23abc:	cmp	r8, #0
   23ac0:	beq	23ae4 <__assert_fail@plt+0x11e48>
   23ac4:	ldr	r0, [r8, #4]
   23ac8:	cmp	r0, #1
   23acc:	blt	23ae4 <__assert_fail@plt+0x11e48>
   23ad0:	ldr	r0, [sp, #16]
   23ad4:	mov	r1, r8
   23ad8:	sub	sp, fp, #28
   23adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ae0:	b	22100 <__assert_fail@plt+0x10464>
   23ae4:	ldr	r1, [sp, #16]
   23ae8:	mov	r0, #0
   23aec:	str	r0, [r1]
   23af0:	str	r0, [r1, #4]
   23af4:	str	r0, [r1, #8]
   23af8:	b	23b60 <__assert_fail@plt+0x11ec4>
   23afc:	mov	r4, #0
   23b00:	cmp	r1, #0
   23b04:	beq	23b54 <__assert_fail@plt+0x11eb8>
   23b08:	ldr	r1, [r8, #8]
   23b0c:	sub	r2, r9, r7
   23b10:	add	r0, r0, r4, lsl #2
   23b14:	lsl	r2, r2, #2
   23b18:	add	r1, r1, r7, lsl #2
   23b1c:	bl	118dc <memcpy@plt>
   23b20:	sub	r0, r4, r7
   23b24:	add	r4, r0, r9
   23b28:	b	23b54 <__assert_fail@plt+0x11eb8>
   23b2c:	ldr	r1, [r6, #8]
   23b30:	add	r0, r0, r4, lsl #2
   23b34:	add	r1, r1, r2, lsl #2
   23b38:	sub	r2, lr, r2
   23b3c:	lsl	r2, r2, #2
   23b40:	bl	118dc <memcpy@plt>
   23b44:	ldr	r0, [r6, #4]
   23b48:	ldr	r1, [sp, #8]
   23b4c:	add	r0, r0, r1
   23b50:	add	r4, r0, r4
   23b54:	ldr	r0, [sp, #16]
   23b58:	str	r4, [r0, #4]
   23b5c:	mov	r0, #0
   23b60:	sub	sp, fp, #28
   23b64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b68:	mov	r0, #12
   23b6c:	b	23b60 <__assert_fail@plt+0x11ec4>
   23b70:	push	{r4, r5, r6, r7, fp, lr}
   23b74:	add	fp, sp, #16
   23b78:	ldr	lr, [r0, #108]	; 0x6c
   23b7c:	mov	ip, r0
   23b80:	cmp	lr, #1
   23b84:	blt	23bc8 <__assert_fail@plt+0x11f2c>
   23b88:	ldr	r2, [ip, #116]	; 0x74
   23b8c:	mov	r0, #0
   23b90:	mov	r3, #1
   23b94:	mov	r4, lr
   23b98:	add	r5, r0, r4
   23b9c:	add	r5, r5, r5, lsr #31
   23ba0:	asr	r6, r5, #1
   23ba4:	add	r7, r6, r6, lsl #1
   23ba8:	add	r7, r2, r7, lsl #3
   23bac:	ldr	r7, [r7, #4]
   23bb0:	cmp	r7, r1
   23bb4:	addlt	r0, r3, r5, asr #1
   23bb8:	movge	r4, r6
   23bbc:	cmp	r0, r4
   23bc0:	blt	23b98 <__assert_fail@plt+0x11efc>
   23bc4:	b	23bcc <__assert_fail@plt+0x11f30>
   23bc8:	mov	r0, #0
   23bcc:	cmp	r0, lr
   23bd0:	bge	23bf0 <__assert_fail@plt+0x11f54>
   23bd4:	ldr	r2, [ip, #116]	; 0x74
   23bd8:	add	r3, r0, r0, lsl #1
   23bdc:	add	r2, r2, r3, lsl #3
   23be0:	ldr	r2, [r2, #4]
   23be4:	cmp	r2, r1
   23be8:	mvnne	r0, #0
   23bec:	pop	{r4, r5, r6, r7, fp, pc}
   23bf0:	mvn	r0, #0
   23bf4:	pop	{r4, r5, r6, r7, fp, pc}
   23bf8:	push	{r4, r5, r6, r7, fp, lr}
   23bfc:	add	fp, sp, #16
   23c00:	mov	r5, r0
   23c04:	ldr	r0, [r0, #36]	; 0x24
   23c08:	mov	r4, r1
   23c0c:	ldr	r7, [r5, #104]	; 0x68
   23c10:	cmp	r0, r1
   23c14:	bgt	23c24 <__assert_fail@plt+0x11f88>
   23c18:	ldr	r1, [r5, #48]	; 0x30
   23c1c:	cmp	r0, r1
   23c20:	blt	23c3c <__assert_fail@plt+0x11fa0>
   23c24:	ldr	r0, [r5, #28]
   23c28:	cmp	r0, r4
   23c2c:	bgt	23c54 <__assert_fail@plt+0x11fb8>
   23c30:	ldr	r1, [r5, #48]	; 0x30
   23c34:	cmp	r0, r1
   23c38:	bge	23c54 <__assert_fail@plt+0x11fb8>
   23c3c:	add	r1, r4, #1
   23c40:	mov	r0, r5
   23c44:	bl	2373c <__assert_fail@plt+0x11aa0>
   23c48:	mov	r6, r0
   23c4c:	cmp	r0, #0
   23c50:	bne	23c84 <__assert_fail@plt+0x11fe8>
   23c54:	mov	r6, #0
   23c58:	cmp	r7, r4
   23c5c:	bge	23c84 <__assert_fail@plt+0x11fe8>
   23c60:	sub	r0, r4, r7
   23c64:	mov	r1, #0
   23c68:	mov	r6, #0
   23c6c:	lsl	r2, r0, #2
   23c70:	ldr	r0, [r5, #100]	; 0x64
   23c74:	add	r0, r0, r7, lsl #2
   23c78:	add	r0, r0, #4
   23c7c:	bl	11b04 <memset@plt>
   23c80:	str	r4, [r5, #104]	; 0x68
   23c84:	mov	r0, r6
   23c88:	pop	{r4, r5, r6, r7, fp, pc}
   23c8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c90:	add	fp, sp, #28
   23c94:	sub	sp, sp, #12
   23c98:	mov	r6, r2
   23c9c:	mov	r4, r0
   23ca0:	mov	r0, #8
   23ca4:	mov	r7, r3
   23ca8:	ldr	r2, [r2]
   23cac:	mov	r8, r1
   23cb0:	ldr	r3, [r6, #4]
   23cb4:	str	r0, [sp, #8]
   23cb8:	add	r1, r6, #8
   23cbc:	mov	r0, r4
   23cc0:	ldr	r5, [fp, #8]
   23cc4:	str	r7, [sp]
   23cc8:	str	r5, [sp, #4]
   23ccc:	bl	23ddc <__assert_fail@plt+0x12140>
   23cd0:	cmp	r0, #0
   23cd4:	beq	23ce0 <__assert_fail@plt+0x12044>
   23cd8:	sub	sp, fp, #28
   23cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ce0:	ldr	r0, [r4, #108]	; 0x6c
   23ce4:	ldr	r1, [r4, #112]	; 0x70
   23ce8:	ldr	r9, [r6, #4]
   23cec:	ldr	sl, [r8]
   23cf0:	cmp	r0, r1
   23cf4:	blt	23d44 <__assert_fail@plt+0x120a8>
   23cf8:	ldr	r0, [r4, #116]	; 0x74
   23cfc:	add	r1, r1, r1, lsl #1
   23d00:	lsl	r1, r1, #4
   23d04:	bl	1a28c <__assert_fail@plt+0x85f0>
   23d08:	cmp	r0, #0
   23d0c:	beq	23dcc <__assert_fail@plt+0x12130>
   23d10:	str	r0, [r4, #116]	; 0x74
   23d14:	ldr	r1, [r4, #108]	; 0x6c
   23d18:	ldr	r2, [r4, #112]	; 0x70
   23d1c:	add	r1, r1, r1, lsl #1
   23d20:	add	r0, r0, r1, lsl #3
   23d24:	add	r1, r2, r2, lsl #1
   23d28:	lsl	r2, r1, #3
   23d2c:	mov	r1, #0
   23d30:	bl	11b04 <memset@plt>
   23d34:	ldr	r1, [r4, #112]	; 0x70
   23d38:	ldr	r0, [r4, #108]	; 0x6c
   23d3c:	lsl	r1, r1, #1
   23d40:	str	r1, [r4, #112]	; 0x70
   23d44:	ldr	r1, [r4, #116]	; 0x74
   23d48:	cmp	r0, #1
   23d4c:	blt	23d6c <__assert_fail@plt+0x120d0>
   23d50:	sub	r2, r0, #1
   23d54:	add	r2, r2, r2, lsl #1
   23d58:	add	r2, r1, r2, lsl #3
   23d5c:	ldr	r3, [r2, #4]
   23d60:	cmp	r3, r5
   23d64:	moveq	r3, #1
   23d68:	strbeq	r3, [r2, #20]
   23d6c:	add	r2, r0, r0, lsl #1
   23d70:	cmp	r9, sl
   23d74:	mov	r3, #0
   23d78:	mov	ip, #0
   23d7c:	add	r0, r0, #1
   23d80:	mvneq	r3, #0
   23d84:	str	r7, [r1, r2, lsl #3]!
   23d88:	stmib	r1, {r5, sl}
   23d8c:	str	r9, [r1, #12]
   23d90:	str	r3, [r1, #16]
   23d94:	str	r0, [r4, #108]	; 0x6c
   23d98:	strb	ip, [r1, #20]
   23d9c:	sub	r0, r9, sl
   23da0:	ldr	r1, [r4, #120]	; 0x78
   23da4:	cmp	r1, r0
   23da8:	strlt	r0, [r4, #120]	; 0x78
   23dac:	ldr	r0, [r6, #4]
   23db0:	ldr	r1, [r8]
   23db4:	add	r0, r0, r5
   23db8:	sub	r1, r0, r1
   23dbc:	mov	r0, r4
   23dc0:	sub	sp, fp, #28
   23dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23dc8:	b	23bf8 <__assert_fail@plt+0x11f5c>
   23dcc:	ldr	r0, [r4, #116]	; 0x74
   23dd0:	bl	1a12c <__assert_fail@plt+0x8490>
   23dd4:	mov	r0, #12
   23dd8:	b	23cd8 <__assert_fail@plt+0x1203c>
   23ddc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23de0:	add	fp, sp, #28
   23de4:	sub	sp, sp, #84	; 0x54
   23de8:	ldr	sl, [r0, #84]	; 0x54
   23dec:	mov	r6, r3
   23df0:	mov	r3, r1
   23df4:	mov	r1, #0
   23df8:	ldr	r5, [fp, #12]
   23dfc:	mov	r8, r2
   23e00:	str	r0, [sp, #36]	; 0x24
   23e04:	str	r1, [fp, #-52]	; 0xffffffcc
   23e08:	ldr	r4, [r3, #4]
   23e0c:	ldr	r1, [sl]
   23e10:	str	sl, [sp, #20]
   23e14:	ldr	r7, [r1, r2, lsl #3]
   23e18:	ldr	r1, [r0, #120]	; 0x78
   23e1c:	add	r2, r1, r5
   23e20:	cmp	r4, r2
   23e24:	str	r7, [sp, #24]
   23e28:	ble	242e4 <__assert_fail@plt+0x12648>
   23e2c:	ldr	r1, [r0, #40]	; 0x28
   23e30:	ldr	r4, [r3]
   23e34:	ldr	r2, [r0, #88]	; 0x58
   23e38:	ldr	r9, [r3, #8]
   23e3c:	str	r3, [sp, #16]
   23e40:	str	r1, [sp, #12]
   23e44:	ldr	r1, [r0, #100]	; 0x64
   23e48:	cmp	r4, #0
   23e4c:	str	r9, [r0, #100]	; 0x64
   23e50:	moveq	r4, r6
   23e54:	str	r4, [r0, #40]	; 0x28
   23e58:	str	r1, [sp, #8]
   23e5c:	sub	r1, r4, #1
   23e60:	bl	22e5c <__assert_fail@plt+0x111c0>
   23e64:	cmp	r4, r6
   23e68:	bne	23f30 <__assert_fail@plt+0x12294>
   23e6c:	str	r0, [sp, #44]	; 0x2c
   23e70:	mov	r0, #1
   23e74:	str	r0, [sp, #52]	; 0x34
   23e78:	str	r0, [sp, #48]	; 0x30
   23e7c:	mov	r0, #4
   23e80:	bl	1a1f8 <__assert_fail@plt+0x855c>
   23e84:	cmp	r0, #0
   23e88:	str	r0, [sp, #56]	; 0x38
   23e8c:	beq	24360 <__assert_fail@plt+0x126c4>
   23e90:	ldr	r3, [fp, #16]
   23e94:	str	r8, [r0]
   23e98:	mov	r0, #0
   23e9c:	add	r1, sp, #48	; 0x30
   23ea0:	mov	r2, r7
   23ea4:	str	r0, [fp, #-52]	; 0xffffffcc
   23ea8:	mov	r0, sl
   23eac:	bl	24380 <__assert_fail@plt+0x126e4>
   23eb0:	ldr	r8, [sp, #36]	; 0x24
   23eb4:	cmp	r0, #0
   23eb8:	mov	r9, r5
   23ebc:	str	r0, [fp, #-52]	; 0xffffffcc
   23ec0:	bne	24350 <__assert_fail@plt+0x126b4>
   23ec4:	ldr	r0, [sp, #52]	; 0x34
   23ec8:	cmp	r0, #0
   23ecc:	beq	23ef8 <__assert_fail@plt+0x1225c>
   23ed0:	ldr	r0, [fp, #16]
   23ed4:	ldr	r3, [sp, #24]
   23ed8:	add	r1, sp, #48	; 0x30
   23edc:	mov	r2, r4
   23ee0:	str	r0, [sp]
   23ee4:	mov	r0, r8
   23ee8:	bl	244b0 <__assert_fail@plt+0x12814>
   23eec:	cmp	r0, #0
   23ef0:	str	r0, [fp, #-52]	; 0xffffffcc
   23ef4:	bne	24350 <__assert_fail@plt+0x126b4>
   23ef8:	ldr	r3, [sp, #44]	; 0x2c
   23efc:	sub	r0, fp, #52	; 0x34
   23f00:	add	r2, sp, #48	; 0x30
   23f04:	mov	r1, sl
   23f08:	bl	221e4 <__assert_fail@plt+0x10548>
   23f0c:	mov	r6, r0
   23f10:	cmp	r0, #0
   23f14:	bne	23f24 <__assert_fail@plt+0x12288>
   23f18:	ldr	r0, [fp, #-52]	; 0xffffffcc
   23f1c:	cmp	r0, #0
   23f20:	bne	242cc <__assert_fail@plt+0x12630>
   23f24:	ldr	r0, [r8, #100]	; 0x64
   23f28:	str	r6, [r0, r4, lsl #2]
   23f2c:	b	23fa8 <__assert_fail@plt+0x1230c>
   23f30:	ldr	r6, [r9, r4, lsl #2]
   23f34:	cmp	r6, #0
   23f38:	beq	23f64 <__assert_fail@plt+0x122c8>
   23f3c:	ldrb	r1, [r6, #52]	; 0x34
   23f40:	ldr	r8, [sp, #36]	; 0x24
   23f44:	mov	r9, r5
   23f48:	tst	r1, #64	; 0x40
   23f4c:	bne	23f80 <__assert_fail@plt+0x122e4>
   23f50:	mov	r0, #0
   23f54:	str	r0, [sp, #52]	; 0x34
   23f58:	str	r0, [sp, #48]	; 0x30
   23f5c:	str	r0, [sp, #56]	; 0x38
   23f60:	b	23fa8 <__assert_fail@plt+0x1230c>
   23f64:	ldr	r8, [sp, #36]	; 0x24
   23f68:	mov	r6, #0
   23f6c:	mov	r9, r5
   23f70:	str	r6, [sp, #52]	; 0x34
   23f74:	str	r6, [sp, #48]	; 0x30
   23f78:	str	r6, [sp, #56]	; 0x38
   23f7c:	b	23fa8 <__assert_fail@plt+0x1230c>
   23f80:	str	r0, [sp, #44]	; 0x2c
   23f84:	add	r1, r6, #4
   23f88:	add	r0, sp, #48	; 0x30
   23f8c:	bl	22100 <__assert_fail@plt+0x10464>
   23f90:	cmp	r0, #0
   23f94:	str	r0, [fp, #-52]	; 0xffffffcc
   23f98:	bne	24378 <__assert_fail@plt+0x126dc>
   23f9c:	ldrb	r0, [r6, #52]	; 0x34
   23fa0:	tst	r0, #64	; 0x40
   23fa4:	bne	23ec4 <__assert_fail@plt+0x12228>
   23fa8:	cmp	r4, r9
   23fac:	bge	24260 <__assert_fail@plt+0x125c4>
   23fb0:	str	r4, [sp, #44]	; 0x2c
   23fb4:	ldr	r4, [sp, #24]
   23fb8:	add	r5, sp, #48	; 0x30
   23fbc:	mov	r1, #0
   23fc0:	ldr	r0, [r8, #120]	; 0x78
   23fc4:	cmp	r1, r0
   23fc8:	bgt	2425c <__assert_fail@plt+0x125c0>
   23fcc:	mov	r0, #0
   23fd0:	str	r1, [sp, #32]
   23fd4:	ldr	r1, [sp, #44]	; 0x2c
   23fd8:	str	r0, [sp, #52]	; 0x34
   23fdc:	ldr	r0, [r8, #100]	; 0x64
   23fe0:	add	r7, r1, #1
   23fe4:	ldr	r0, [r0, r7, lsl #2]
   23fe8:	cmp	r0, #0
   23fec:	beq	24008 <__assert_fail@plt+0x1236c>
   23ff0:	add	r1, r0, #4
   23ff4:	mov	r0, r5
   23ff8:	bl	21d58 <__assert_fail@plt+0x100bc>
   23ffc:	cmp	r0, #0
   24000:	str	r0, [fp, #-52]	; 0xffffffcc
   24004:	bne	242cc <__assert_fail@plt+0x12630>
   24008:	cmp	r6, #0
   2400c:	beq	24194 <__assert_fail@plt+0x124f8>
   24010:	mov	r0, #0
   24014:	str	r7, [sp, #28]
   24018:	ldr	r7, [r8, #84]	; 0x54
   2401c:	str	r0, [fp, #-32]	; 0xffffffe0
   24020:	str	r0, [fp, #-44]	; 0xffffffd4
   24024:	str	r0, [fp, #-48]	; 0xffffffd0
   24028:	str	r0, [fp, #-40]	; 0xffffffd8
   2402c:	ldr	r1, [r6, #20]
   24030:	cmp	r1, #1
   24034:	blt	24180 <__assert_fail@plt+0x124e4>
   24038:	ldr	r4, [sp, #44]	; 0x2c
   2403c:	mov	r5, #0
   24040:	str	r6, [sp, #40]	; 0x28
   24044:	ldr	r0, [r6, #24]
   24048:	ldr	sl, [r0, r5, lsl #2]
   2404c:	ldr	r0, [r7]
   24050:	add	r1, r0, sl, lsl #3
   24054:	ldrb	r1, [r1, #6]
   24058:	tst	r1, #16
   2405c:	bne	2407c <__assert_fail@plt+0x123e0>
   24060:	add	r1, r0, sl, lsl #3
   24064:	mov	r0, r8
   24068:	mov	r2, r4
   2406c:	bl	24d74 <__assert_fail@plt+0x130d8>
   24070:	cmp	r0, #0
   24074:	bne	24138 <__assert_fail@plt+0x1249c>
   24078:	b	24150 <__assert_fail@plt+0x124b4>
   2407c:	mov	r0, r7
   24080:	mov	r1, sl
   24084:	mov	r2, r8
   24088:	mov	r3, r4
   2408c:	bl	24a7c <__assert_fail@plt+0x12de0>
   24090:	cmp	r0, #2
   24094:	blt	24130 <__assert_fail@plt+0x12494>
   24098:	add	r4, r0, r4
   2409c:	ldr	r0, [r8, #100]	; 0x64
   240a0:	ldr	r1, [r7, #12]
   240a4:	sub	r8, fp, #48	; 0x30
   240a8:	ldr	r0, [r0, r4, lsl #2]
   240ac:	ldr	r6, [r1, sl, lsl #2]
   240b0:	mov	r1, #0
   240b4:	str	r1, [fp, #-44]	; 0xffffffd4
   240b8:	cmp	r0, #0
   240bc:	beq	240d8 <__assert_fail@plt+0x1243c>
   240c0:	add	r1, r0, #4
   240c4:	mov	r0, r8
   240c8:	bl	21d58 <__assert_fail@plt+0x100bc>
   240cc:	cmp	r0, #0
   240d0:	str	r0, [fp, #-32]	; 0xffffffe0
   240d4:	bne	242dc <__assert_fail@plt+0x12640>
   240d8:	mov	r0, r8
   240dc:	mov	r1, r6
   240e0:	bl	21f64 <__assert_fail@plt+0x102c8>
   240e4:	cmp	r0, #0
   240e8:	beq	242bc <__assert_fail@plt+0x12620>
   240ec:	sub	r0, fp, #32
   240f0:	mov	r1, r7
   240f4:	mov	r2, r8
   240f8:	bl	24884 <__assert_fail@plt+0x12be8>
   240fc:	ldr	r8, [sp, #36]	; 0x24
   24100:	ldr	r6, [sp, #40]	; 0x28
   24104:	ldr	r1, [r8, #100]	; 0x64
   24108:	str	r0, [r1, r4, lsl #2]
   2410c:	ldr	r0, [r8, #100]	; 0x64
   24110:	ldr	r0, [r0, r4, lsl #2]
   24114:	ldr	r4, [sp, #44]	; 0x2c
   24118:	cmp	r0, #0
   2411c:	bne	24138 <__assert_fail@plt+0x1249c>
   24120:	ldr	r9, [fp, #-32]	; 0xffffffe0
   24124:	cmp	r9, #0
   24128:	beq	24138 <__assert_fail@plt+0x1249c>
   2412c:	b	242c0 <__assert_fail@plt+0x12624>
   24130:	cmp	r0, #0
   24134:	beq	24164 <__assert_fail@plt+0x124c8>
   24138:	ldr	r0, [r7, #12]
   2413c:	ldr	r1, [r0, sl, lsl #2]
   24140:	add	r0, sp, #48	; 0x30
   24144:	bl	21f64 <__assert_fail@plt+0x102c8>
   24148:	cmp	r0, #0
   2414c:	beq	242bc <__assert_fail@plt+0x12620>
   24150:	ldr	r0, [r6, #20]
   24154:	add	r5, r5, #1
   24158:	cmp	r5, r0
   2415c:	blt	24044 <__assert_fail@plt+0x123a8>
   24160:	b	2416c <__assert_fail@plt+0x124d0>
   24164:	ldr	r0, [r7]
   24168:	b	24060 <__assert_fail@plt+0x123c4>
   2416c:	ldr	r5, [fp, #12]
   24170:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24174:	ldr	sl, [sp, #20]
   24178:	mov	r9, r5
   2417c:	add	r5, sp, #48	; 0x30
   24180:	bl	1a12c <__assert_fail@plt+0x8490>
   24184:	ldr	r4, [sp, #24]
   24188:	ldr	r7, [sp, #28]
   2418c:	mov	r0, #0
   24190:	str	r0, [fp, #-52]	; 0xffffffcc
   24194:	ldr	r0, [sp, #52]	; 0x34
   24198:	cmp	r0, #0
   2419c:	beq	241f0 <__assert_fail@plt+0x12554>
   241a0:	mov	r6, r7
   241a4:	ldr	r7, [fp, #16]
   241a8:	mov	r0, sl
   241ac:	mov	r1, r5
   241b0:	mov	r2, r4
   241b4:	mov	r3, r7
   241b8:	bl	24380 <__assert_fail@plt+0x126e4>
   241bc:	cmp	r0, #0
   241c0:	str	r0, [fp, #-52]	; 0xffffffcc
   241c4:	bne	242cc <__assert_fail@plt+0x12630>
   241c8:	mov	r0, r8
   241cc:	mov	r1, r5
   241d0:	mov	r2, r6
   241d4:	mov	r3, r4
   241d8:	str	r7, [sp]
   241dc:	mov	r7, r6
   241e0:	bl	244b0 <__assert_fail@plt+0x12814>
   241e4:	cmp	r0, #0
   241e8:	str	r0, [fp, #-52]	; 0xffffffcc
   241ec:	bne	242cc <__assert_fail@plt+0x12630>
   241f0:	ldr	r2, [r8, #88]	; 0x58
   241f4:	ldr	r1, [sp, #44]	; 0x2c
   241f8:	mov	r0, r8
   241fc:	bl	22e5c <__assert_fail@plt+0x111c0>
   24200:	mov	r3, r0
   24204:	sub	r0, fp, #52	; 0x34
   24208:	mov	r1, sl
   2420c:	mov	r2, r5
   24210:	bl	221e4 <__assert_fail@plt+0x10548>
   24214:	mov	r6, r0
   24218:	cmp	r0, #0
   2421c:	bne	2422c <__assert_fail@plt+0x12590>
   24220:	ldr	r0, [fp, #-52]	; 0xffffffcc
   24224:	cmp	r0, #0
   24228:	bne	242cc <__assert_fail@plt+0x12630>
   2422c:	ldr	r0, [r8, #100]	; 0x64
   24230:	ldr	r1, [sp, #32]
   24234:	cmp	r6, #0
   24238:	str	r7, [sp, #44]	; 0x2c
   2423c:	str	r6, [r0, r7, lsl #2]
   24240:	mov	r0, #0
   24244:	addeq	r0, r1, #1
   24248:	cmp	r7, r9
   2424c:	mov	r1, r0
   24250:	bne	23fc0 <__assert_fail@plt+0x12324>
   24254:	mov	r4, r9
   24258:	b	24260 <__assert_fail@plt+0x125c4>
   2425c:	ldr	r4, [sp, #44]	; 0x2c
   24260:	ldr	r0, [sp, #56]	; 0x38
   24264:	bl	1a12c <__assert_fail@plt+0x8490>
   24268:	ldr	r0, [r8, #100]	; 0x64
   2426c:	ldr	r1, [sp, #16]
   24270:	ldr	r0, [r0, r9, lsl #2]
   24274:	str	r4, [r1]
   24278:	ldr	r1, [sp, #12]
   2427c:	str	r1, [r8, #40]	; 0x28
   24280:	ldr	r1, [sp, #8]
   24284:	cmp	r0, #0
   24288:	str	r1, [r8, #100]	; 0x64
   2428c:	beq	242ac <__assert_fail@plt+0x12610>
   24290:	ldr	r1, [fp, #8]
   24294:	add	r0, r0, #4
   24298:	bl	2217c <__assert_fail@plt+0x104e0>
   2429c:	cmp	r0, #0
   242a0:	mov	r7, #0
   242a4:	moveq	r7, #1
   242a8:	b	242b0 <__assert_fail@plt+0x12614>
   242ac:	mov	r7, #1
   242b0:	mov	r0, r7
   242b4:	sub	sp, fp, #28
   242b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   242bc:	mov	r9, #12
   242c0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   242c4:	bl	1a12c <__assert_fail@plt+0x8490>
   242c8:	str	r9, [fp, #-52]	; 0xffffffcc
   242cc:	ldr	r0, [sp, #56]	; 0x38
   242d0:	bl	1a12c <__assert_fail@plt+0x8490>
   242d4:	ldr	r7, [fp, #-52]	; 0xffffffcc
   242d8:	b	242b0 <__assert_fail@plt+0x12614>
   242dc:	mov	r9, r0
   242e0:	b	242c0 <__assert_fail@plt+0x12624>
   242e4:	mvn	r1, #-2147483648	; 0x80000000
   242e8:	mov	r7, #12
   242ec:	sub	r1, r1, r4
   242f0:	cmp	r1, r2
   242f4:	ble	242b0 <__assert_fail@plt+0x12614>
   242f8:	add	r9, r2, #1
   242fc:	add	r5, r9, r4
   24300:	cmn	r5, #-1073741823	; 0xc0000001
   24304:	bhi	242b0 <__assert_fail@plt+0x12614>
   24308:	ldr	r0, [r3, #8]
   2430c:	lsl	r1, r5, #2
   24310:	mov	sl, r3
   24314:	bl	1a28c <__assert_fail@plt+0x85f0>
   24318:	cmp	r0, #0
   2431c:	beq	242b0 <__assert_fail@plt+0x12614>
   24320:	str	r5, [sl, #4]
   24324:	str	r0, [sl, #8]
   24328:	add	r0, r0, r4, lsl #2
   2432c:	lsl	r2, r9, #2
   24330:	mov	r1, #0
   24334:	bl	11b04 <memset@plt>
   24338:	mov	r3, sl
   2433c:	ldr	r0, [sp, #36]	; 0x24
   24340:	ldr	r5, [fp, #12]
   24344:	ldr	sl, [sp, #20]
   24348:	ldr	r7, [sp, #24]
   2434c:	b	23e2c <__assert_fail@plt+0x12190>
   24350:	mov	r7, r0
   24354:	ldr	r0, [sp, #56]	; 0x38
   24358:	bl	1a12c <__assert_fail@plt+0x8490>
   2435c:	b	242b0 <__assert_fail@plt+0x12614>
   24360:	mov	r0, #0
   24364:	mov	r7, #12
   24368:	str	r0, [sp, #48]	; 0x30
   2436c:	str	r0, [sp, #52]	; 0x34
   24370:	str	r7, [fp, #-52]	; 0xffffffcc
   24374:	b	242b0 <__assert_fail@plt+0x12614>
   24378:	mov	r7, r0
   2437c:	b	242b0 <__assert_fail@plt+0x12614>
   24380:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24384:	add	fp, sp, #28
   24388:	sub	sp, sp, #20
   2438c:	str	r0, [sp, #4]
   24390:	ldr	r0, [r1, #4]
   24394:	mov	sl, r1
   24398:	mov	r1, #0
   2439c:	mov	r5, r3
   243a0:	mov	r8, r2
   243a4:	str	r1, [sp, #12]
   243a8:	str	r0, [sp, #8]
   243ac:	lsl	r0, r0, #2
   243b0:	bl	1a1f8 <__assert_fail@plt+0x855c>
   243b4:	cmp	r0, #0
   243b8:	str	r0, [sp, #16]
   243bc:	beq	244a8 <__assert_fail@plt+0x1280c>
   243c0:	ldr	r0, [sl, #4]
   243c4:	cmp	r0, #1
   243c8:	blt	24470 <__assert_fail@plt+0x127d4>
   243cc:	mov	r9, #0
   243d0:	ldr	r0, [sl, #8]
   243d4:	ldr	r1, [sp, #4]
   243d8:	ldr	r2, [r0, r9, lsl #2]
   243dc:	ldr	r1, [r1, #24]
   243e0:	add	r0, r2, r2, lsl #1
   243e4:	add	r1, r1, r0, lsl #2
   243e8:	ldr	r0, [r1, #4]
   243ec:	cmp	r0, #1
   243f0:	blt	2442c <__assert_fail@plt+0x12790>
   243f4:	ldr	r7, [sp, #4]
   243f8:	ldr	r3, [r1, #8]
   243fc:	ldr	r7, [r7]
   24400:	ldr	r6, [r3]
   24404:	add	r4, r7, r6, lsl #3
   24408:	ldrb	r4, [r4, #4]
   2440c:	cmp	r4, r5
   24410:	bne	24420 <__assert_fail@plt+0x12784>
   24414:	ldr	r4, [r7, r6, lsl #3]
   24418:	cmp	r4, r8
   2441c:	beq	24450 <__assert_fail@plt+0x127b4>
   24420:	add	r3, r3, #4
   24424:	subs	r0, r0, #1
   24428:	bne	24400 <__assert_fail@plt+0x12764>
   2442c:	add	r0, sp, #8
   24430:	bl	21d58 <__assert_fail@plt+0x100bc>
   24434:	cmp	r0, #0
   24438:	bne	24498 <__assert_fail@plt+0x127fc>
   2443c:	ldr	r0, [sl, #4]
   24440:	add	r9, r9, #1
   24444:	cmp	r9, r0
   24448:	blt	243d0 <__assert_fail@plt+0x12734>
   2444c:	b	24470 <__assert_fail@plt+0x127d4>
   24450:	cmn	r6, #1
   24454:	beq	2442c <__assert_fail@plt+0x12790>
   24458:	ldr	r0, [sp, #4]
   2445c:	add	r1, sp, #8
   24460:	mov	r3, r8
   24464:	str	r5, [sp]
   24468:	bl	2477c <__assert_fail@plt+0x12ae0>
   2446c:	b	24434 <__assert_fail@plt+0x12798>
   24470:	ldr	r0, [sl, #8]
   24474:	bl	1a12c <__assert_fail@plt+0x8490>
   24478:	vldr	d16, [sp, #8]
   2447c:	ldr	r0, [sp, #16]
   24480:	mov	r7, #0
   24484:	str	r0, [sl, #8]
   24488:	vstr	d16, [sl]
   2448c:	mov	r0, r7
   24490:	sub	sp, fp, #28
   24494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24498:	mov	r7, r0
   2449c:	ldr	r0, [sp, #16]
   244a0:	bl	1a12c <__assert_fail@plt+0x8490>
   244a4:	b	2448c <__assert_fail@plt+0x127f0>
   244a8:	mov	r7, #12
   244ac:	b	2448c <__assert_fail@plt+0x127f0>
   244b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   244b4:	add	fp, sp, #28
   244b8:	sub	sp, sp, #36	; 0x24
   244bc:	mov	r6, r1
   244c0:	ldr	r1, [r0, #84]	; 0x54
   244c4:	str	r3, [sp, #4]
   244c8:	mov	r4, r2
   244cc:	str	r0, [sp, #12]
   244d0:	str	r1, [sp, #16]
   244d4:	mov	r1, r2
   244d8:	bl	23b70 <__assert_fail@plt+0x11ed4>
   244dc:	cmn	r0, #1
   244e0:	beq	24768 <__assert_fail@plt+0x12acc>
   244e4:	add	r1, r0, r0, lsl #1
   244e8:	str	r1, [sp]
   244ec:	ldr	r0, [sp, #12]
   244f0:	ldr	r0, [r0, #116]	; 0x74
   244f4:	add	r0, r0, r1, lsl #3
   244f8:	add	r0, r0, #8
   244fc:	ldr	r7, [r0, #-8]
   24500:	mov	sl, r0
   24504:	mov	r0, r6
   24508:	mov	r1, r7
   2450c:	bl	2217c <__assert_fail@plt+0x104e0>
   24510:	cmp	r0, #0
   24514:	beq	24710 <__assert_fail@plt+0x12a74>
   24518:	ldm	sl, {r0, r1}
   2451c:	add	r1, r1, r4
   24520:	sub	r9, r1, r0
   24524:	cmp	r9, r4
   24528:	bne	245ec <__assert_fail@plt+0x12950>
   2452c:	ldr	r0, [sp, #16]
   24530:	add	r1, r7, r7, lsl #1
   24534:	ldr	r0, [r0, #20]
   24538:	add	r0, r0, r1, lsl #2
   2453c:	ldr	r0, [r0, #8]
   24540:	ldr	r7, [r0]
   24544:	mov	r0, r6
   24548:	mov	r1, r7
   2454c:	bl	2217c <__assert_fail@plt+0x104e0>
   24550:	mov	r1, #4
   24554:	cmp	r0, #0
   24558:	bne	24704 <__assert_fail@plt+0x12a68>
   2455c:	mov	r0, #1
   24560:	str	r0, [sp, #24]
   24564:	str	r0, [sp, #20]
   24568:	mov	r0, #4
   2456c:	bl	1a1f8 <__assert_fail@plt+0x855c>
   24570:	cmp	r0, #0
   24574:	str	r0, [sp, #28]
   24578:	beq	24724 <__assert_fail@plt+0x12a88>
   2457c:	mov	r5, #0
   24580:	str	r7, [r0]
   24584:	ldr	r0, [sp, #16]
   24588:	ldr	r2, [sp, #4]
   2458c:	ldr	r3, [fp, #8]
   24590:	add	r7, sp, #20
   24594:	str	r5, [sp, #32]
   24598:	mov	r1, r7
   2459c:	bl	24380 <__assert_fail@plt+0x126e4>
   245a0:	mov	r9, r0
   245a4:	mov	r0, r6
   245a8:	mov	r1, r7
   245ac:	bl	21d58 <__assert_fail@plt+0x100bc>
   245b0:	mov	r8, r0
   245b4:	ldr	r0, [sp, #28]
   245b8:	bl	1a12c <__assert_fail@plt+0x8490>
   245bc:	orr	r0, r9, r5
   245c0:	mov	r1, #2
   245c4:	orrs	r0, r0, r8
   245c8:	beq	24704 <__assert_fail@plt+0x12a68>
   245cc:	cmp	r9, #0
   245d0:	mov	r1, #1
   245d4:	movne	r8, r9
   245d8:	cmp	r5, #0
   245dc:	movne	r8, r5
   245e0:	str	r8, [sp, #32]
   245e4:	str	r8, [sp, #8]
   245e8:	b	24704 <__assert_fail@plt+0x12a68>
   245ec:	ldr	r0, [sp, #12]
   245f0:	ldr	r1, [sp, #16]
   245f4:	mov	r5, r4
   245f8:	ldr	r0, [r0, #100]	; 0x64
   245fc:	ldr	r1, [r1, #12]
   24600:	ldr	r0, [r0, r9, lsl #2]
   24604:	ldr	r8, [r1, r7, lsl #2]
   24608:	cmp	r0, #0
   2460c:	beq	24680 <__assert_fail@plt+0x129e4>
   24610:	add	r4, r0, #4
   24614:	mov	r1, r8
   24618:	mov	r0, r4
   2461c:	bl	2217c <__assert_fail@plt+0x104e0>
   24620:	mov	r1, #4
   24624:	cmp	r0, #0
   24628:	bne	24700 <__assert_fail@plt+0x12a64>
   2462c:	add	r7, sp, #20
   24630:	mov	r1, r4
   24634:	mov	r0, r7
   24638:	bl	22100 <__assert_fail@plt+0x10464>
   2463c:	mov	r4, r0
   24640:	str	r0, [sp, #32]
   24644:	mov	r0, r7
   24648:	mov	r1, r8
   2464c:	bl	21f64 <__assert_fail@plt+0x102c8>
   24650:	cmp	r4, #0
   24654:	bne	24660 <__assert_fail@plt+0x129c4>
   24658:	cmp	r0, #0
   2465c:	bne	246ac <__assert_fail@plt+0x12a10>
   24660:	ldr	r0, [sp, #28]
   24664:	bl	1a12c <__assert_fail@plt+0x8490>
   24668:	cmp	r4, #0
   2466c:	mov	r1, #1
   24670:	movweq	r4, #12
   24674:	str	r4, [sp, #32]
   24678:	str	r4, [sp, #8]
   2467c:	b	24700 <__assert_fail@plt+0x12a64>
   24680:	mov	r0, #1
   24684:	str	r0, [sp, #24]
   24688:	str	r0, [sp, #20]
   2468c:	mov	r0, #4
   24690:	bl	1a1f8 <__assert_fail@plt+0x855c>
   24694:	cmp	r0, #0
   24698:	str	r0, [sp, #28]
   2469c:	beq	24738 <__assert_fail@plt+0x12a9c>
   246a0:	str	r8, [r0]
   246a4:	mov	r0, #0
   246a8:	str	r0, [sp, #32]
   246ac:	ldr	r1, [sp, #16]
   246b0:	add	r0, sp, #32
   246b4:	add	r2, sp, #20
   246b8:	bl	24884 <__assert_fail@plt+0x12be8>
   246bc:	ldr	r4, [sp, #12]
   246c0:	ldr	r1, [r4, #100]	; 0x64
   246c4:	str	r0, [r1, r9, lsl #2]
   246c8:	ldr	r0, [sp, #28]
   246cc:	bl	1a12c <__assert_fail@plt+0x8490>
   246d0:	ldr	r0, [r4, #100]	; 0x64
   246d4:	ldr	r2, [sp, #32]
   246d8:	ldr	r0, [r0, r9, lsl #2]
   246dc:	cmp	r2, #0
   246e0:	mov	r1, r2
   246e4:	movwne	r1, #1
   246e8:	clz	r0, r0
   246ec:	lsr	r0, r0, #5
   246f0:	ands	r1, r0, r1
   246f4:	ldr	r0, [sp, #8]
   246f8:	movne	r0, r2
   246fc:	str	r0, [sp, #8]
   24700:	mov	r4, r5
   24704:	cmp	r1, #0
   24708:	cmpne	r1, #4
   2470c:	bne	24758 <__assert_fail@plt+0x12abc>
   24710:	ldrb	r1, [sl, #12]
   24714:	add	r0, sl, #24
   24718:	cmp	r1, #0
   2471c:	bne	244fc <__assert_fail@plt+0x12860>
   24720:	b	24768 <__assert_fail@plt+0x12acc>
   24724:	mov	r0, #0
   24728:	mov	r5, #12
   2472c:	str	r0, [sp, #20]
   24730:	str	r0, [sp, #24]
   24734:	b	24584 <__assert_fail@plt+0x128e8>
   24738:	mov	r0, #0
   2473c:	mov	r1, #12
   24740:	str	r0, [sp, #20]
   24744:	str	r0, [sp, #24]
   24748:	mov	r0, #12
   2474c:	str	r1, [sp, #32]
   24750:	mov	r1, #1
   24754:	b	246fc <__assert_fail@plt+0x12a60>
   24758:	cmp	r1, #2
   2475c:	bne	24774 <__assert_fail@plt+0x12ad8>
   24760:	ldr	r1, [sp]
   24764:	b	244ec <__assert_fail@plt+0x12850>
   24768:	mov	r0, #0
   2476c:	sub	sp, fp, #28
   24770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24774:	ldr	r0, [sp, #8]
   24778:	b	2476c <__assert_fail@plt+0x12ad0>
   2477c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24780:	add	fp, sp, #24
   24784:	sub	sp, sp, #8
   24788:	mov	r6, r0
   2478c:	mov	r4, r1
   24790:	mov	r0, r1
   24794:	mov	r1, r2
   24798:	mov	r5, r3
   2479c:	mov	r7, r2
   247a0:	bl	2217c <__assert_fail@plt+0x104e0>
   247a4:	cmp	r0, #0
   247a8:	beq	247b8 <__assert_fail@plt+0x12b1c>
   247ac:	mov	r0, #0
   247b0:	sub	sp, fp, #24
   247b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   247b8:	ldr	r8, [fp, #8]
   247bc:	ldr	r0, [r6]
   247c0:	add	r1, r0, r7, lsl #3
   247c4:	ldrb	r1, [r1, #4]
   247c8:	cmp	r1, r8
   247cc:	bne	247dc <__assert_fail@plt+0x12b40>
   247d0:	ldr	r0, [r0, r7, lsl #3]
   247d4:	cmp	r0, r5
   247d8:	beq	24860 <__assert_fail@plt+0x12bc4>
   247dc:	mov	r0, r4
   247e0:	mov	r1, r7
   247e4:	bl	21f64 <__assert_fail@plt+0x102c8>
   247e8:	cmp	r0, #0
   247ec:	beq	2487c <__assert_fail@plt+0x12be0>
   247f0:	ldr	r0, [r6, #20]
   247f4:	add	r7, r7, r7, lsl #1
   247f8:	add	r1, r0, r7, lsl #2
   247fc:	ldr	r2, [r1, #4]
   24800:	cmp	r2, #2
   24804:	beq	24814 <__assert_fail@plt+0x12b78>
   24808:	cmp	r2, #0
   2480c:	bne	2483c <__assert_fail@plt+0x12ba0>
   24810:	b	247ac <__assert_fail@plt+0x12b10>
   24814:	ldr	r0, [r1, #8]
   24818:	mov	r1, r4
   2481c:	mov	r3, r5
   24820:	ldr	r2, [r0, #4]
   24824:	mov	r0, r6
   24828:	str	r8, [sp]
   2482c:	bl	2477c <__assert_fail@plt+0x12ae0>
   24830:	cmp	r0, #0
   24834:	bne	247b0 <__assert_fail@plt+0x12b14>
   24838:	ldr	r0, [r6, #20]
   2483c:	add	r0, r0, r7, lsl #2
   24840:	ldr	r0, [r0, #8]
   24844:	ldr	r7, [r0]
   24848:	mov	r0, r4
   2484c:	mov	r1, r7
   24850:	bl	2217c <__assert_fail@plt+0x104e0>
   24854:	cmp	r0, #0
   24858:	beq	247bc <__assert_fail@plt+0x12b20>
   2485c:	b	247ac <__assert_fail@plt+0x12b10>
   24860:	cmp	r8, #9
   24864:	bne	247ac <__assert_fail@plt+0x12b10>
   24868:	mov	r0, r4
   2486c:	mov	r1, r7
   24870:	bl	21f64 <__assert_fail@plt+0x102c8>
   24874:	cmp	r0, #0
   24878:	bne	247ac <__assert_fail@plt+0x12b10>
   2487c:	mov	r0, #12
   24880:	b	247b0 <__assert_fail@plt+0x12b14>
   24884:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24888:	add	fp, sp, #28
   2488c:	sub	sp, sp, #4
   24890:	ldr	sl, [r2, #4]
   24894:	cmp	sl, #0
   24898:	beq	24a48 <__assert_fail@plt+0x12dac>
   2489c:	mov	r4, r2
   248a0:	mov	r9, r1
   248a4:	cmp	sl, #1
   248a8:	mov	r6, sl
   248ac:	str	r0, [sp]
   248b0:	blt	248d0 <__assert_fail@plt+0x12c34>
   248b4:	ldr	r1, [r4, #8]
   248b8:	mov	r2, sl
   248bc:	mov	r6, sl
   248c0:	ldr	r3, [r1], #4
   248c4:	subs	r2, r2, #1
   248c8:	add	r6, r3, r6
   248cc:	bne	248c0 <__assert_fail@plt+0x12c24>
   248d0:	ldr	r1, [r9, #68]	; 0x44
   248d4:	ldr	r2, [r9, #32]
   248d8:	and	r1, r1, r6
   248dc:	add	r3, r1, r1, lsl #1
   248e0:	ldr	r1, [r2, r3, lsl #2]
   248e4:	cmp	r1, #1
   248e8:	blt	24958 <__assert_fail@plt+0x12cbc>
   248ec:	add	r2, r2, r3, lsl #2
   248f0:	sub	ip, sl, #1
   248f4:	mov	r5, #0
   248f8:	ldr	lr, [r2, #8]
   248fc:	cmp	r4, #0
   24900:	beq	2494c <__assert_fail@plt+0x12cb0>
   24904:	ldr	r7, [lr, r5, lsl #2]
   24908:	ldr	r3, [r7]
   2490c:	cmp	r6, r3
   24910:	bne	2494c <__assert_fail@plt+0x12cb0>
   24914:	ldr	r3, [r7, #8]
   24918:	cmp	r3, sl
   2491c:	bne	2494c <__assert_fail@plt+0x12cb0>
   24920:	mov	r3, ip
   24924:	add	r2, r3, #1
   24928:	cmp	r2, #1
   2492c:	blt	24a3c <__assert_fail@plt+0x12da0>
   24930:	ldr	r2, [r4, #8]
   24934:	ldr	r0, [r7, #12]
   24938:	ldr	r2, [r2, r3, lsl #2]
   2493c:	ldr	r0, [r0, r3, lsl #2]
   24940:	sub	r3, r3, #1
   24944:	cmp	r0, r2
   24948:	beq	24924 <__assert_fail@plt+0x12c88>
   2494c:	add	r5, r5, #1
   24950:	cmp	r5, r1
   24954:	blt	248fc <__assert_fail@plt+0x12c60>
   24958:	mov	r0, #56	; 0x38
   2495c:	mov	r1, #1
   24960:	bl	19ea4 <__assert_fail@plt+0x8208>
   24964:	cmp	r0, #0
   24968:	beq	24a68 <__assert_fail@plt+0x12dcc>
   2496c:	add	r5, r0, #4
   24970:	mov	r7, r0
   24974:	mov	r1, r4
   24978:	mov	r0, r5
   2497c:	bl	22100 <__assert_fail@plt+0x10464>
   24980:	cmp	r0, #0
   24984:	bne	24a54 <__assert_fail@plt+0x12db8>
   24988:	str	r5, [r7, #40]	; 0x28
   2498c:	ldr	r0, [r4, #4]
   24990:	cmp	r0, #1
   24994:	blt	24a24 <__assert_fail@plt+0x12d88>
   24998:	movw	ip, #65280	; 0xff00
   2499c:	ldr	r1, [r4, #8]
   249a0:	ldr	sl, [r9]
   249a4:	mov	lr, #32
   249a8:	movt	ip, #3
   249ac:	add	r5, ip, #255	; 0xff
   249b0:	ldr	r2, [r1]
   249b4:	add	r3, sl, r2, lsl #3
   249b8:	ldr	r2, [r3, #4]!
   249bc:	and	r4, r2, r5
   249c0:	cmp	r4, #1
   249c4:	beq	24a18 <__assert_fail@plt+0x12d7c>
   249c8:	ldrb	r8, [r7, #52]	; 0x34
   249cc:	and	r4, lr, r2, lsr #15
   249d0:	uxtb	r2, r2
   249d4:	cmp	r2, #12
   249d8:	orr	r4, r8, r4
   249dc:	strb	r4, [r7, #52]	; 0x34
   249e0:	beq	24a10 <__assert_fail@plt+0x12d74>
   249e4:	cmp	r2, #4
   249e8:	beq	249fc <__assert_fail@plt+0x12d60>
   249ec:	cmp	r2, #2
   249f0:	bne	24a04 <__assert_fail@plt+0x12d68>
   249f4:	orr	r2, r4, #16
   249f8:	b	24a14 <__assert_fail@plt+0x12d78>
   249fc:	orr	r2, r4, #64	; 0x40
   24a00:	b	24a14 <__assert_fail@plt+0x12d78>
   24a04:	ldr	r2, [r3]
   24a08:	tst	r2, ip
   24a0c:	beq	24a18 <__assert_fail@plt+0x12d7c>
   24a10:	orr	r2, r4, #128	; 0x80
   24a14:	strb	r2, [r7, #52]	; 0x34
   24a18:	add	r1, r1, #4
   24a1c:	subs	r0, r0, #1
   24a20:	bne	249b0 <__assert_fail@plt+0x12d14>
   24a24:	mov	r0, r9
   24a28:	mov	r1, r7
   24a2c:	mov	r2, r6
   24a30:	bl	2251c <__assert_fail@plt+0x10880>
   24a34:	cmp	r0, #0
   24a38:	bne	24a60 <__assert_fail@plt+0x12dc4>
   24a3c:	mov	r0, r7
   24a40:	sub	sp, fp, #28
   24a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a48:	mov	r7, #0
   24a4c:	str	r7, [r0]
   24a50:	b	24a3c <__assert_fail@plt+0x12da0>
   24a54:	mov	r0, r7
   24a58:	bl	1a12c <__assert_fail@plt+0x8490>
   24a5c:	b	24a68 <__assert_fail@plt+0x12dcc>
   24a60:	mov	r0, r7
   24a64:	bl	1d614 <__assert_fail@plt+0xb978>
   24a68:	ldr	r1, [sp]
   24a6c:	mov	r0, #12
   24a70:	mov	r7, #0
   24a74:	str	r0, [r1]
   24a78:	b	24a3c <__assert_fail@plt+0x12da0>
   24a7c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   24a80:	add	fp, sp, #24
   24a84:	ldr	lr, [r0]
   24a88:	add	r7, lr, r1, lsl #3
   24a8c:	ldrb	r9, [r7, #4]
   24a90:	cmp	r9, #7
   24a94:	beq	24c68 <__assert_fail@plt+0x12fcc>
   24a98:	ldr	ip, [r2, #80]	; 0x50
   24a9c:	mov	r6, #1
   24aa0:	cmp	ip, #1
   24aa4:	beq	24ae4 <__assert_fail@plt+0x12e48>
   24aa8:	ldr	r5, [r2, #28]
   24aac:	add	r7, r3, #1
   24ab0:	cmp	r7, r5
   24ab4:	bge	24ae4 <__assert_fail@plt+0x12e48>
   24ab8:	ldr	r6, [r2, #8]
   24abc:	sub	r5, r5, r3
   24ac0:	add	r7, r6, r3, lsl #2
   24ac4:	mov	r6, #1
   24ac8:	ldr	r4, [r7, r6, lsl #2]
   24acc:	cmn	r4, #1
   24ad0:	bne	24ae4 <__assert_fail@plt+0x12e48>
   24ad4:	add	r6, r6, #1
   24ad8:	cmp	r5, r6
   24adc:	bne	24ac8 <__assert_fail@plt+0x12e2c>
   24ae0:	mov	r6, r5
   24ae4:	mov	r8, #0
   24ae8:	cmp	r9, #5
   24aec:	bne	24b30 <__assert_fail@plt+0x12e94>
   24af0:	cmp	r6, #2
   24af4:	blt	24c58 <__assert_fail@plt+0x12fbc>
   24af8:	ldr	r0, [r0, #128]	; 0x80
   24afc:	tst	r0, #64	; 0x40
   24b00:	bne	24b14 <__assert_fail@plt+0x12e78>
   24b04:	ldr	r1, [r2, #4]
   24b08:	ldrb	r1, [r1, r3]
   24b0c:	cmp	r1, #10
   24b10:	beq	24c58 <__assert_fail@plt+0x12fbc>
   24b14:	tst	r0, #128	; 0x80
   24b18:	beq	24c54 <__assert_fail@plt+0x12fb8>
   24b1c:	ldr	r0, [r2, #4]
   24b20:	ldrb	r0, [r0, r3]
   24b24:	cmp	r0, #0
   24b28:	movne	r8, r6
   24b2c:	b	24c58 <__assert_fail@plt+0x12fbc>
   24b30:	cmp	r9, #6
   24b34:	bne	24c58 <__assert_fail@plt+0x12fbc>
   24b38:	cmp	r6, #2
   24b3c:	blt	24c58 <__assert_fail@plt+0x12fbc>
   24b40:	ldr	r7, [lr, r1, lsl #3]
   24b44:	ldr	r0, [r7, #32]
   24b48:	cmp	r0, #0
   24b4c:	bne	24b68 <__assert_fail@plt+0x12ecc>
   24b50:	ldr	r1, [r7, #36]	; 0x24
   24b54:	cmp	r1, #0
   24b58:	bne	24b68 <__assert_fail@plt+0x12ecc>
   24b5c:	ldr	r1, [r7, #20]
   24b60:	cmp	r1, #0
   24b64:	beq	24c60 <__assert_fail@plt+0x12fc4>
   24b68:	cmp	ip, #1
   24b6c:	bne	24b7c <__assert_fail@plt+0x12ee0>
   24b70:	ldr	r1, [r2, #4]
   24b74:	ldrb	r5, [r1, r3]
   24b78:	b	24b84 <__assert_fail@plt+0x12ee8>
   24b7c:	ldr	r1, [r2, #8]
   24b80:	ldr	r5, [r1, r3, lsl #2]
   24b84:	ldr	r1, [r7, #20]
   24b88:	cmp	r1, #1
   24b8c:	blt	24bb0 <__assert_fail@plt+0x12f14>
   24b90:	ldr	r2, [r7]
   24b94:	mov	r3, #0
   24b98:	ldr	r4, [r2, r3, lsl #2]
   24b9c:	cmp	r5, r4
   24ba0:	beq	24c2c <__assert_fail@plt+0x12f90>
   24ba4:	add	r3, r3, #1
   24ba8:	cmp	r3, r1
   24bac:	blt	24b98 <__assert_fail@plt+0x12efc>
   24bb0:	ldr	r1, [r7, #36]	; 0x24
   24bb4:	cmp	r1, #1
   24bb8:	blt	24bec <__assert_fail@plt+0x12f50>
   24bbc:	mov	r4, #0
   24bc0:	ldr	r0, [r7, #12]
   24bc4:	ldr	r1, [r0, r4, lsl #2]
   24bc8:	mov	r0, r5
   24bcc:	bl	11840 <iswctype@plt>
   24bd0:	cmp	r0, #0
   24bd4:	bne	24c2c <__assert_fail@plt+0x12f90>
   24bd8:	ldr	r0, [r7, #36]	; 0x24
   24bdc:	add	r4, r4, #1
   24be0:	cmp	r4, r0
   24be4:	blt	24bc0 <__assert_fail@plt+0x12f24>
   24be8:	ldr	r0, [r7, #32]
   24bec:	cmp	r0, #1
   24bf0:	blt	24c24 <__assert_fail@plt+0x12f88>
   24bf4:	ldr	r1, [r7, #4]
   24bf8:	mov	r2, #0
   24bfc:	ldr	r3, [r1, r2, lsl #2]
   24c00:	cmp	r3, r5
   24c04:	bhi	24c18 <__assert_fail@plt+0x12f7c>
   24c08:	ldr	r3, [r7, #8]
   24c0c:	ldr	r3, [r3, r2, lsl #2]
   24c10:	cmp	r5, r3
   24c14:	bls	24c2c <__assert_fail@plt+0x12f90>
   24c18:	add	r2, r2, #1
   24c1c:	cmp	r2, r0
   24c20:	blt	24bfc <__assert_fail@plt+0x12f60>
   24c24:	mov	r0, #0
   24c28:	b	24c30 <__assert_fail@plt+0x12f94>
   24c2c:	mov	r0, r6
   24c30:	ldrb	r1, [r7, #16]
   24c34:	tst	r1, #1
   24c38:	bne	24c44 <__assert_fail@plt+0x12fa8>
   24c3c:	mov	r8, r0
   24c40:	b	24c58 <__assert_fail@plt+0x12fbc>
   24c44:	cmp	r0, #0
   24c48:	bgt	24c58 <__assert_fail@plt+0x12fbc>
   24c4c:	cmp	r6, #1
   24c50:	movle	r6, #1
   24c54:	mov	r8, r6
   24c58:	mov	r0, r8
   24c5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24c60:	mov	r5, #0
   24c64:	b	24b84 <__assert_fail@plt+0x12ee8>
   24c68:	ldr	r0, [r2, #4]
   24c6c:	mov	r8, #0
   24c70:	ldrb	r6, [r0, r3]
   24c74:	cmp	r6, #194	; 0xc2
   24c78:	bcc	24c58 <__assert_fail@plt+0x12fbc>
   24c7c:	ldr	r1, [r2, #48]	; 0x30
   24c80:	add	r2, r3, #2
   24c84:	cmp	r2, r1
   24c88:	bgt	24c58 <__assert_fail@plt+0x12fbc>
   24c8c:	add	r0, r3, r0
   24c90:	cmp	r6, #223	; 0xdf
   24c94:	ldrb	r7, [r0, #1]
   24c98:	bhi	24cbc <__assert_fail@plt+0x13020>
   24c9c:	cmp	r7, #192	; 0xc0
   24ca0:	mov	r0, #0
   24ca4:	movwcc	r0, #1
   24ca8:	lsl	r8, r0, #1
   24cac:	sxtb	r0, r7
   24cb0:	cmn	r0, #1
   24cb4:	movwgt	r8, #0
   24cb8:	b	24c58 <__assert_fail@plt+0x12fbc>
   24cbc:	cmp	r6, #239	; 0xef
   24cc0:	bhi	24cdc <__assert_fail@plt+0x13040>
   24cc4:	mov	r2, #3
   24cc8:	cmp	r6, #224	; 0xe0
   24ccc:	bne	24d38 <__assert_fail@plt+0x1309c>
   24cd0:	cmp	r7, #160	; 0xa0
   24cd4:	bcc	24c58 <__assert_fail@plt+0x12fbc>
   24cd8:	b	24d38 <__assert_fail@plt+0x1309c>
   24cdc:	cmp	r6, #247	; 0xf7
   24ce0:	bhi	24cfc <__assert_fail@plt+0x13060>
   24ce4:	mov	r2, #4
   24ce8:	cmp	r6, #240	; 0xf0
   24cec:	bne	24d38 <__assert_fail@plt+0x1309c>
   24cf0:	cmp	r7, #144	; 0x90
   24cf4:	bcc	24c58 <__assert_fail@plt+0x12fbc>
   24cf8:	b	24d38 <__assert_fail@plt+0x1309c>
   24cfc:	cmp	r6, #251	; 0xfb
   24d00:	bhi	24d1c <__assert_fail@plt+0x13080>
   24d04:	mov	r2, #5
   24d08:	cmp	r6, #248	; 0xf8
   24d0c:	bne	24d38 <__assert_fail@plt+0x1309c>
   24d10:	cmp	r7, #136	; 0x88
   24d14:	bcc	24c58 <__assert_fail@plt+0x12fbc>
   24d18:	b	24d38 <__assert_fail@plt+0x1309c>
   24d1c:	cmp	r6, #253	; 0xfd
   24d20:	bhi	24c58 <__assert_fail@plt+0x12fbc>
   24d24:	mov	r2, #6
   24d28:	cmp	r6, #252	; 0xfc
   24d2c:	bne	24d38 <__assert_fail@plt+0x1309c>
   24d30:	cmp	r7, #132	; 0x84
   24d34:	bcc	24c58 <__assert_fail@plt+0x12fbc>
   24d38:	add	r3, r2, r3
   24d3c:	cmp	r3, r1
   24d40:	bgt	24c58 <__assert_fail@plt+0x12fbc>
   24d44:	mov	r1, #1
   24d48:	ldrb	r3, [r0, r1]
   24d4c:	sxtb	r7, r3
   24d50:	cmn	r7, #1
   24d54:	bgt	24c58 <__assert_fail@plt+0x12fbc>
   24d58:	cmp	r3, #191	; 0xbf
   24d5c:	bhi	24c58 <__assert_fail@plt+0x12fbc>
   24d60:	add	r1, r1, #1
   24d64:	cmp	r2, r1
   24d68:	bne	24d48 <__assert_fail@plt+0x130ac>
   24d6c:	mov	r8, r2
   24d70:	b	24c58 <__assert_fail@plt+0x12fbc>
   24d74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24d78:	add	fp, sp, #24
   24d7c:	ldr	r5, [r1, #4]
   24d80:	mvn	r3, #0
   24d84:	mov	r8, #0
   24d88:	uxtab	r4, r3, r5
   24d8c:	cmp	r4, #6
   24d90:	bhi	24ea0 <__assert_fail@plt+0x13204>
   24d94:	ldr	r3, [r0, #4]
   24d98:	ldrb	r3, [r3, r2]
   24d9c:	add	r7, pc, #4
   24da0:	sxtb	r6, r3
   24da4:	ldr	pc, [r7, r4, lsl #2]
   24da8:	andeq	r4, r2, r4, asr #27
   24dac:	andeq	r4, r2, r0, lsr #29
   24db0:	ldrdeq	r4, [r2], -r8
   24db4:	andeq	r4, r2, r0, lsr #29
   24db8:	andeq	r4, r2, r0, lsl #28
   24dbc:	andeq	r4, r2, r0, lsr #29
   24dc0:	strdeq	r4, [r2], -r8
   24dc4:	ldrb	r1, [r1]
   24dc8:	uxtb	r3, r6
   24dcc:	cmp	r1, r3
   24dd0:	beq	24e34 <__assert_fail@plt+0x13198>
   24dd4:	b	24ea0 <__assert_fail@plt+0x13204>
   24dd8:	ldr	r1, [r1]
   24ddc:	ubfx	r7, r3, #5, #3
   24de0:	and	r3, r3, #31
   24de4:	ldr	r1, [r1, r7, lsl #2]
   24de8:	mov	r7, #1
   24dec:	tst	r1, r7, lsl r3
   24df0:	bne	24e34 <__assert_fail@plt+0x13198>
   24df4:	b	24ea0 <__assert_fail@plt+0x13204>
   24df8:	cmp	r6, #0
   24dfc:	bmi	24ea0 <__assert_fail@plt+0x13204>
   24e00:	cmp	r3, #0
   24e04:	beq	24e24 <__assert_fail@plt+0x13188>
   24e08:	cmp	r3, #10
   24e0c:	bne	24e34 <__assert_fail@plt+0x13198>
   24e10:	ldr	r1, [r0, #84]	; 0x54
   24e14:	ldrb	r1, [r1, #128]	; 0x80
   24e18:	tst	r1, #64	; 0x40
   24e1c:	bne	24e34 <__assert_fail@plt+0x13198>
   24e20:	b	24ea0 <__assert_fail@plt+0x13204>
   24e24:	ldr	r1, [r0, #84]	; 0x54
   24e28:	ldrb	r1, [r1, #128]	; 0x80
   24e2c:	tst	r1, #128	; 0x80
   24e30:	bne	24ea0 <__assert_fail@plt+0x13204>
   24e34:	movw	r1, #65280	; 0xff00
   24e38:	movt	r1, #3
   24e3c:	tst	r5, r1
   24e40:	beq	24e9c <__assert_fail@plt+0x13200>
   24e44:	ldr	r3, [r0, #88]	; 0x58
   24e48:	mov	r1, r2
   24e4c:	mov	r2, r3
   24e50:	bl	22e5c <__assert_fail@plt+0x111c0>
   24e54:	and	r1, r0, #1
   24e58:	tst	r5, #1024	; 0x400
   24e5c:	beq	24e68 <__assert_fail@plt+0x131cc>
   24e60:	cmp	r1, #0
   24e64:	beq	24ea0 <__assert_fail@plt+0x13204>
   24e68:	tst	r5, #2048	; 0x800
   24e6c:	cmpne	r1, #0
   24e70:	bne	24ea0 <__assert_fail@plt+0x13204>
   24e74:	tst	r5, #8192	; 0x2000
   24e78:	beq	24e84 <__assert_fail@plt+0x131e8>
   24e7c:	ands	r1, r0, #2
   24e80:	beq	24ea0 <__assert_fail@plt+0x13204>
   24e84:	uxth	r1, r5
   24e88:	mov	r2, #1
   24e8c:	and	r0, r0, #8
   24e90:	eor	r1, r2, r1, lsr #15
   24e94:	orr	r0, r1, r0, lsr #3
   24e98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24e9c:	mov	r8, #1
   24ea0:	mov	r0, r8
   24ea4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24ea8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24eac:	add	fp, sp, #28
   24eb0:	sub	sp, sp, #4
   24eb4:	vpush	{d8-d11}
   24eb8:	sub	sp, sp, #88	; 0x58
   24ebc:	sub	sp, sp, #14336	; 0x3800
   24ec0:	sub	lr, fp, #1024	; 0x400
   24ec4:	vmov.i32	q4, #0	; 0x00000000
   24ec8:	mov	sl, r1
   24ecc:	mov	r1, #0
   24ed0:	mov	ip, r0
   24ed4:	sub	r9, lr, #72	; 0x48
   24ed8:	str	r1, [sl, #44]	; 0x2c
   24edc:	str	r1, [sl, #48]	; 0x30
   24ee0:	mov	r0, r9
   24ee4:	vst1.64	{d8-d9}, [r0]!
   24ee8:	vst1.64	{d8-d9}, [r0]
   24eec:	ldr	r0, [sl, #8]
   24ef0:	cmp	r0, #0
   24ef4:	ble	258a0 <__assert_fail@plt+0x13c04>
   24ef8:	sub	lr, fp, #2048	; 0x800
   24efc:	add	r0, ip, #96	; 0x60
   24f00:	mov	r6, #0
   24f04:	str	ip, [sp, #28]
   24f08:	str	sl, [sp, #16]
   24f0c:	sub	r4, lr, #72	; 0x48
   24f10:	sub	lr, fp, #3072	; 0xc00
   24f14:	str	r0, [sp, #4]
   24f18:	sub	r8, lr, #72	; 0x48
   24f1c:	sub	lr, fp, #6144	; 0x1800
   24f20:	sub	r5, lr, #120	; 0x78
   24f24:	ldr	r0, [sl, #12]
   24f28:	str	r1, [sp, #24]
   24f2c:	ldr	lr, [r0, r1, lsl #2]
   24f30:	ldr	r1, [ip]
   24f34:	add	r0, r1, lr, lsl #3
   24f38:	str	lr, [sp, #12]
   24f3c:	ldr	r7, [r0, #4]
   24f40:	uxtb	r0, r7
   24f44:	cmp	r0, #1
   24f48:	str	r0, [sp, #20]
   24f4c:	bne	25028 <__assert_fail@plt+0x1338c>
   24f50:	ldrb	r0, [r1, lr, lsl #3]
   24f54:	str	r1, [sp, #8]
   24f58:	mov	r3, #1
   24f5c:	ubfx	r1, r0, #5, #3
   24f60:	and	r0, r0, #31
   24f64:	ldr	r2, [r9, r1, lsl #2]
   24f68:	orr	r0, r2, r3, lsl r0
   24f6c:	str	r0, [r9, r1, lsl #2]
   24f70:	movw	r0, #65280	; 0xff00
   24f74:	ldr	r3, [sp, #20]
   24f78:	movt	r0, #3
   24f7c:	ands	r0, r7, r0
   24f80:	beq	25268 <__assert_fail@plt+0x135cc>
   24f84:	tst	r7, #8192	; 0x2000
   24f88:	beq	24fac <__assert_fail@plt+0x13310>
   24f8c:	ldr	r0, [fp, #-1096]	; 0xfffffbb8
   24f90:	mov	r1, r9
   24f94:	vst1.64	{d8-d9}, [r1]!
   24f98:	vst1.64	{d8-d9}, [r1]
   24f9c:	tst	r0, #1024	; 0x400
   24fa0:	beq	25498 <__assert_fail@plt+0x137fc>
   24fa4:	mov	r0, #1024	; 0x400
   24fa8:	str	r0, [fp, #-1096]	; 0xfffffbb8
   24fac:	tst	r7, #32768	; 0x8000
   24fb0:	bne	251bc <__assert_fail@plt+0x13520>
   24fb4:	tst	r7, #1024	; 0x400
   24fb8:	beq	251a4 <__assert_fail@plt+0x13508>
   24fbc:	movw	r0, #255	; 0xff
   24fc0:	movt	r0, #64	; 0x40
   24fc4:	and	r0, r7, r0
   24fc8:	cmp	r0, #1
   24fcc:	beq	251bc <__assert_fail@plt+0x13520>
   24fd0:	ldr	r0, [ip, #92]	; 0x5c
   24fd4:	vmov.i32	q8, #0	; 0x00000000
   24fd8:	mov	lr, r5
   24fdc:	cmp	r0, #1
   24fe0:	ble	2514c <__assert_fail@plt+0x134b0>
   24fe4:	ldr	r0, [ip, #60]	; 0x3c
   24fe8:	ldr	r5, [sp, #4]
   24fec:	mov	r1, #0
   24ff0:	add	r2, r5, r1
   24ff4:	add	r3, r0, r1
   24ff8:	vld1.32	{d20-d21}, [r2]
   24ffc:	vld1.32	{d18-d19}, [r3]
   25000:	add	r2, r9, r1
   25004:	add	r1, r1, #16
   25008:	vld1.32	{d22-d23}, [r2]
   2500c:	cmp	r1, #32
   25010:	vorn	q9, q10, q9
   25014:	vand	q9, q11, q9
   25018:	vorr	q8, q9, q8
   2501c:	vst1.32	{d18-d19}, [r2]
   25020:	bne	24ff0 <__assert_fail@plt+0x13354>
   25024:	b	2517c <__assert_fail@plt+0x134e0>
   25028:	cmp	r0, #7
   2502c:	beq	25074 <__assert_fail@plt+0x133d8>
   25030:	cmp	r0, #5
   25034:	beq	250c4 <__assert_fail@plt+0x13428>
   25038:	cmp	r0, #3
   2503c:	bne	25498 <__assert_fail@plt+0x137fc>
   25040:	ldr	r0, [r1, lr, lsl #3]
   25044:	str	r1, [sp, #8]
   25048:	mov	r1, #0
   2504c:	add	r2, r9, r1
   25050:	add	r3, r0, r1
   25054:	add	r1, r1, #16
   25058:	vld1.32	{d16-d17}, [r3]
   2505c:	vld1.32	{d18-d19}, [r2]
   25060:	cmp	r1, #32
   25064:	vorr	q8, q9, q8
   25068:	vst1.32	{d16-d17}, [r2]
   2506c:	bne	2504c <__assert_fail@plt+0x133b0>
   25070:	b	24f70 <__assert_fail@plt+0x132d4>
   25074:	mvn	r0, #0
   25078:	str	r1, [sp, #8]
   2507c:	str	r0, [fp, #-1084]	; 0xfffffbc4
   25080:	str	r0, [fp, #-1088]	; 0xfffffbc0
   25084:	str	r0, [fp, #-1092]	; 0xfffffbbc
   25088:	str	r0, [fp, #-1096]	; 0xfffffbb8
   2508c:	ldr	r1, [ip, #128]	; 0x80
   25090:	and	r0, r1, #128	; 0x80
   25094:	ands	r1, r1, #64	; 0x40
   25098:	beq	250a4 <__assert_fail@plt+0x13408>
   2509c:	cmp	r0, #0
   250a0:	beq	24f70 <__assert_fail@plt+0x132d4>
   250a4:	cmp	r1, #0
   250a8:	mvn	r1, #1
   250ac:	movweq	r1, #64510	; 0xfbfe
   250b0:	movteq	r1, #65535	; 0xffff
   250b4:	cmp	r0, #0
   250b8:	mvneq	r1, #1024	; 0x400
   250bc:	str	r1, [fp, #-1096]	; 0xfffffbb8
   250c0:	b	24f70 <__assert_fail@plt+0x132d4>
   250c4:	ldr	r0, [ip, #92]	; 0x5c
   250c8:	str	r1, [sp, #8]
   250cc:	cmp	r0, #2
   250d0:	blt	25104 <__assert_fail@plt+0x13468>
   250d4:	ldr	r0, [ip, #60]	; 0x3c
   250d8:	mov	r1, #0
   250dc:	add	r2, r9, r1
   250e0:	add	r3, r0, r1
   250e4:	add	r1, r1, #16
   250e8:	vld1.32	{d16-d17}, [r3]
   250ec:	vld1.32	{d18-d19}, [r2]
   250f0:	cmp	r1, #32
   250f4:	vorr	q8, q9, q8
   250f8:	vst1.32	{d16-d17}, [r2]
   250fc:	bne	250dc <__assert_fail@plt+0x13440>
   25100:	b	2511c <__assert_fail@plt+0x13480>
   25104:	mov	r0, r9
   25108:	mov	r1, #255	; 0xff
   2510c:	mov	r2, #32
   25110:	bl	11b04 <memset@plt>
   25114:	ldr	lr, [sp, #12]
   25118:	ldr	ip, [sp, #28]
   2511c:	ldr	r0, [ip, #128]	; 0x80
   25120:	tst	r0, #64	; 0x40
   25124:	bne	25134 <__assert_fail@plt+0x13498>
   25128:	ldr	r1, [fp, #-1096]	; 0xfffffbb8
   2512c:	bic	r1, r1, #1024	; 0x400
   25130:	str	r1, [fp, #-1096]	; 0xfffffbb8
   25134:	tst	r0, #128	; 0x80
   25138:	beq	24f70 <__assert_fail@plt+0x132d4>
   2513c:	ldr	r0, [fp, #-1096]	; 0xfffffbb8
   25140:	bic	r0, r0, #1
   25144:	str	r0, [fp, #-1096]	; 0xfffffbb8
   25148:	b	24f70 <__assert_fail@plt+0x132d4>
   2514c:	ldr	r3, [sp, #4]
   25150:	mov	r0, #0
   25154:	add	r1, r9, r0
   25158:	add	r2, r3, r0
   2515c:	add	r0, r0, #16
   25160:	vld1.32	{d18-d19}, [r2]
   25164:	vld1.32	{d20-d21}, [r1]
   25168:	cmp	r0, #32
   2516c:	vand	q9, q10, q9
   25170:	vorr	q8, q9, q8
   25174:	vst1.32	{d18-d19}, [r1]
   25178:	bne	25154 <__assert_fail@plt+0x134b8>
   2517c:	vext.8	q9, q8, q8, #8
   25180:	mov	r5, lr
   25184:	ldr	lr, [sp, #12]
   25188:	ldr	r3, [sp, #20]
   2518c:	vorr	q8, q8, q9
   25190:	vdup.32	q9, d16[1]
   25194:	vorr	q8, q8, q9
   25198:	vmov.32	r0, d16[0]
   2519c:	cmp	r0, #0
   251a0:	beq	25498 <__assert_fail@plt+0x137fc>
   251a4:	tst	r7, #2048	; 0x800
   251a8:	beq	25268 <__assert_fail@plt+0x135cc>
   251ac:	tst	r7, #4194304	; 0x400000
   251b0:	beq	251c8 <__assert_fail@plt+0x1352c>
   251b4:	cmp	r3, #1
   251b8:	bne	251c8 <__assert_fail@plt+0x1352c>
   251bc:	mov	r0, r9
   251c0:	vst1.64	{d8-d9}, [r0]!
   251c4:	b	25494 <__assert_fail@plt+0x137f8>
   251c8:	ldr	r0, [ip, #92]	; 0x5c
   251cc:	ldr	r7, [sp, #4]
   251d0:	vmov.i32	q8, #0	; 0x00000000
   251d4:	cmp	r0, #1
   251d8:	ble	2521c <__assert_fail@plt+0x13580>
   251dc:	ldr	r0, [ip, #60]	; 0x3c
   251e0:	mov	r1, #0
   251e4:	add	r2, r0, r1
   251e8:	add	r3, r7, r1
   251ec:	vld1.32	{d20-d21}, [r2]
   251f0:	vld1.32	{d18-d19}, [r3]
   251f4:	add	r2, r9, r1
   251f8:	add	r1, r1, #16
   251fc:	vld1.32	{d22-d23}, [r2]
   25200:	cmp	r1, #32
   25204:	vand	q9, q10, q9
   25208:	vbic	q9, q11, q9
   2520c:	vorr	q8, q9, q8
   25210:	vst1.32	{d18-d19}, [r2]
   25214:	bne	251e4 <__assert_fail@plt+0x13548>
   25218:	b	25248 <__assert_fail@plt+0x135ac>
   2521c:	mov	r0, #0
   25220:	add	r1, r9, r0
   25224:	add	r2, r7, r0
   25228:	add	r0, r0, #16
   2522c:	vld1.32	{d18-d19}, [r2]
   25230:	vld1.32	{d20-d21}, [r1]
   25234:	cmp	r0, #32
   25238:	vbic	q9, q10, q9
   2523c:	vorr	q8, q9, q8
   25240:	vst1.32	{d18-d19}, [r1]
   25244:	bne	25220 <__assert_fail@plt+0x13584>
   25248:	vext.8	q9, q8, q8, #8
   2524c:	ldr	r3, [sp, #20]
   25250:	vorr	q8, q8, q9
   25254:	vdup.32	q9, d16[1]
   25258:	vorr	q8, q8, q9
   2525c:	vmov.32	r0, d16[0]
   25260:	cmp	r0, #0
   25264:	beq	25498 <__assert_fail@plt+0x137fc>
   25268:	mov	r7, #0
   2526c:	cmp	r6, #1
   25270:	blt	25414 <__assert_fail@plt+0x13778>
   25274:	add	sl, sp, #32
   25278:	cmp	r3, #1
   2527c:	bne	252a8 <__assert_fail@plt+0x1360c>
   25280:	ldr	r1, [sp, #8]
   25284:	add	r0, sp, #32
   25288:	add	r0, r0, r7, lsl #5
   2528c:	ldrb	r1, [r1, lr, lsl #3]
   25290:	ubfx	r2, r1, #5, #3
   25294:	and	r1, r1, #31
   25298:	ldr	r0, [r0, r2, lsl #2]
   2529c:	mov	r2, #1
   252a0:	tst	r0, r2, lsl r1
   252a4:	beq	253fc <__assert_fail@plt+0x13760>
   252a8:	vmov.i32	q8, #0	; 0x00000000
   252ac:	mov	r0, #0
   252b0:	add	r1, sl, r0
   252b4:	add	r2, r9, r0
   252b8:	vld1.32	{d20-d21}, [r1]
   252bc:	vld1.32	{d18-d19}, [r2]
   252c0:	add	r1, r4, r0
   252c4:	add	r0, r0, #16
   252c8:	cmp	r0, #32
   252cc:	vand	q9, q10, q9
   252d0:	vorr	q8, q9, q8
   252d4:	vst1.32	{d18-d19}, [r1]
   252d8:	bne	252b0 <__assert_fail@plt+0x13614>
   252dc:	vext.8	q9, q8, q8, #8
   252e0:	vorr	q8, q8, q9
   252e4:	vdup.32	q9, d16[1]
   252e8:	vorr	q8, q8, q9
   252ec:	vmov.32	r0, d16[0]
   252f0:	cmp	r0, #0
   252f4:	beq	253fc <__assert_fail@plt+0x13760>
   252f8:	vmov.i32	q5, #0	; 0x00000000
   252fc:	vmov.i32	q8, #0	; 0x00000000
   25300:	mov	r0, #0
   25304:	add	r1, r9, r0
   25308:	add	r2, sl, r0
   2530c:	vld1.32	{d18-d19}, [r2]
   25310:	vld1.32	{d20-d21}, [r1]
   25314:	add	r2, r8, r0
   25318:	add	r0, r0, #16
   2531c:	cmp	r0, #32
   25320:	vbic	q11, q10, q9
   25324:	vbic	q9, q9, q10
   25328:	vorr	q5, q11, q5
   2532c:	vorr	q8, q9, q8
   25330:	vst1.32	{d18-d19}, [r2]
   25334:	vst1.32	{d22-d23}, [r1]
   25338:	bne	25304 <__assert_fail@plt+0x13668>
   2533c:	vext.8	q9, q8, q8, #8
   25340:	vorr	q8, q8, q9
   25344:	vdup.32	q9, d16[1]
   25348:	vorr	q8, q8, q9
   2534c:	vmov.32	r0, d16[0]
   25350:	cmp	r0, #0
   25354:	beq	253b0 <__assert_fail@plt+0x13714>
   25358:	mov	r0, r8
   2535c:	add	r2, sp, #32
   25360:	mov	r1, r4
   25364:	vld1.32	{d16-d17}, [r0]!
   25368:	mov	r3, r2
   2536c:	add	r2, r2, r6, lsl #5
   25370:	vld1.32	{d18-d19}, [r1]!
   25374:	vld1.64	{d20-d21}, [r0]
   25378:	add	r0, r3, r7, lsl #5
   2537c:	vst1.32	{d16-d17}, [r2]!
   25380:	vld1.64	{d16-d17}, [r1]
   25384:	add	r1, r7, r7, lsl #1
   25388:	vst1.32	{d20-d21}, [r2]
   2538c:	vst1.32	{d18-d19}, [r0]!
   25390:	add	r1, r5, r1, lsl #2
   25394:	vst1.32	{d16-d17}, [r0]
   25398:	add	r0, r6, r6, lsl #1
   2539c:	add	r0, r5, r0, lsl #2
   253a0:	bl	22100 <__assert_fail@plt+0x10464>
   253a4:	cmp	r0, #0
   253a8:	bne	2585c <__assert_fail@plt+0x13bc0>
   253ac:	add	r6, r6, #1
   253b0:	ldr	r0, [sp, #16]
   253b4:	ldr	r1, [sp, #24]
   253b8:	ldr	r0, [r0, #12]
   253bc:	ldr	r1, [r0, r1, lsl #2]
   253c0:	add	r0, r7, r7, lsl #1
   253c4:	add	r0, r5, r0, lsl #2
   253c8:	bl	21f64 <__assert_fail@plt+0x102c8>
   253cc:	cmp	r0, #0
   253d0:	beq	2585c <__assert_fail@plt+0x13bc0>
   253d4:	vext.8	q8, q5, q8, #8
   253d8:	vorr	q8, q5, q8
   253dc:	vdup.32	q9, d16[1]
   253e0:	vorr	q8, q8, q9
   253e4:	vmov.32	r0, d16[0]
   253e8:	cmp	r0, #0
   253ec:	beq	25410 <__assert_fail@plt+0x13774>
   253f0:	ldr	ip, [sp, #28]
   253f4:	ldr	lr, [sp, #12]
   253f8:	ldr	r3, [sp, #20]
   253fc:	add	r7, r7, #1
   25400:	add	sl, sl, #32
   25404:	cmp	r7, r6
   25408:	blt	25278 <__assert_fail@plt+0x135dc>
   2540c:	b	25414 <__assert_fail@plt+0x13778>
   25410:	ldr	ip, [sp, #28]
   25414:	ldr	sl, [sp, #16]
   25418:	cmp	r7, r6
   2541c:	bne	25498 <__assert_fail@plt+0x137fc>
   25420:	mov	r0, r9
   25424:	ldr	r1, [sp, #24]
   25428:	vld1.32	{d16-d17}, [r0]!
   2542c:	vld1.64	{d18-d19}, [r0]
   25430:	add	r0, sp, #32
   25434:	add	r0, r0, r7, lsl #5
   25438:	vst1.32	{d16-d17}, [r0]!
   2543c:	vst1.32	{d18-d19}, [r0]
   25440:	ldr	r0, [sl, #12]
   25444:	ldr	sl, [r0, r1, lsl #2]
   25448:	add	r0, r7, r7, lsl #1
   2544c:	mov	r1, #1
   25450:	str	r1, [r5, r0, lsl #2]
   25454:	add	r5, r5, r0, lsl #2
   25458:	mov	r0, #4
   2545c:	mov	r6, r5
   25460:	str	r1, [r6, #4]!
   25464:	bl	1a1f8 <__assert_fail@plt+0x855c>
   25468:	cmp	r0, #0
   2546c:	str	r0, [r5, #8]
   25470:	beq	25884 <__assert_fail@plt+0x13be8>
   25474:	str	sl, [r0]
   25478:	ldr	ip, [sp, #28]
   2547c:	ldr	sl, [sp, #16]
   25480:	mov	r0, r9
   25484:	sub	lr, fp, #6144	; 0x1800
   25488:	add	r6, r7, #1
   2548c:	vst1.64	{d8-d9}, [r0]!
   25490:	sub	r5, lr, #120	; 0x78
   25494:	vst1.64	{d8-d9}, [r0]
   25498:	ldr	r1, [sp, #24]
   2549c:	ldr	r0, [sl, #8]
   254a0:	add	r1, r1, #1
   254a4:	cmp	r1, r0
   254a8:	blt	24f24 <__assert_fail@plt+0x13288>
   254ac:	mov	r0, #0
   254b0:	cmp	r6, #0
   254b4:	ble	2589c <__assert_fail@plt+0x13c00>
   254b8:	str	r0, [fp, #-3152]	; 0xfffff3b0
   254bc:	add	r0, r6, #1
   254c0:	str	r6, [sp, #20]
   254c4:	str	r0, [fp, #-3156]	; 0xfffff3ac
   254c8:	lsl	r0, r0, #2
   254cc:	bl	1a1f8 <__assert_fail@plt+0x855c>
   254d0:	cmp	r0, #0
   254d4:	str	r0, [fp, #-3148]	; 0xfffff3b4
   254d8:	mov	r0, #0
   254dc:	movweq	r0, #12
   254e0:	str	r0, [fp, #-72]	; 0xffffffb8
   254e4:	beq	258c8 <__assert_fail@plt+0x13c2c>
   254e8:	vmov.i32	q8, #0	; 0x00000000
   254ec:	sub	lr, fp, #3072	; 0xc00
   254f0:	ldr	r1, [sp, #28]
   254f4:	add	r7, sp, #32
   254f8:	mov	r4, #0
   254fc:	mov	r2, #0
   25500:	sub	r0, lr, #120	; 0x78
   25504:	vst1.64	{d16-d17}, [r0]!
   25508:	vst1.64	{d16-d17}, [r0]
   2550c:	mov	r0, #0
   25510:	str	r0, [sp, #12]
   25514:	mov	r0, #0
   25518:	str	r2, [sp, #24]
   2551c:	str	r0, [fp, #-3152]	; 0xfffff3b0
   25520:	add	r0, r2, r2, lsl #1
   25524:	add	r0, r5, r0, lsl #2
   25528:	ldr	r6, [r0, #4]
   2552c:	cmp	r6, #1
   25530:	blt	25594 <__assert_fail@plt+0x138f8>
   25534:	ldr	sl, [r0, #8]
   25538:	mov	r5, #0
   2553c:	ldr	r0, [sl, r5, lsl #2]
   25540:	ldr	r2, [r1, #12]
   25544:	ldr	r0, [r2, r0, lsl #2]
   25548:	cmn	r0, #1
   2554c:	beq	25578 <__assert_fail@plt+0x138dc>
   25550:	ldr	r1, [r1, #24]
   25554:	add	r0, r0, r0, lsl #1
   25558:	sub	lr, fp, #3072	; 0xc00
   2555c:	add	r1, r1, r0, lsl #2
   25560:	sub	r0, lr, #84	; 0x54
   25564:	bl	21d58 <__assert_fail@plt+0x100bc>
   25568:	ldr	r1, [sp, #28]
   2556c:	mov	r4, #0
   25570:	cmp	r0, #0
   25574:	bne	2581c <__assert_fail@plt+0x13b80>
   25578:	add	r5, r5, #1
   2557c:	cmp	r5, r6
   25580:	blt	2553c <__assert_fail@plt+0x138a0>
   25584:	ldr	sl, [sp, #16]
   25588:	sub	lr, fp, #6144	; 0x1800
   2558c:	str	r4, [fp, #-72]	; 0xffffffb8
   25590:	sub	r5, lr, #120	; 0x78
   25594:	sub	lr, fp, #3072	; 0xc00
   25598:	sub	r0, fp, #72	; 0x48
   2559c:	mov	r3, #0
   255a0:	sub	r2, lr, #84	; 0x54
   255a4:	bl	221e4 <__assert_fail@plt+0x10548>
   255a8:	ldr	r1, [sp, #24]
   255ac:	ldr	r4, [fp, #-72]	; 0xffffffb8
   255b0:	mov	r6, r0
   255b4:	cmp	r0, #0
   255b8:	str	r0, [r9, r1, lsl #2]
   255bc:	bne	255c8 <__assert_fail@plt+0x1392c>
   255c0:	cmp	r4, #0
   255c4:	bne	25828 <__assert_fail@plt+0x13b8c>
   255c8:	ldrsb	r0, [r6, #52]	; 0x34
   255cc:	cmn	r0, #1
   255d0:	ble	255e8 <__assert_fail@plt+0x1394c>
   255d4:	sub	lr, fp, #2048	; 0x800
   255d8:	str	r6, [r8, r1, lsl #2]
   255dc:	sub	r0, lr, #72	; 0x48
   255e0:	str	r6, [r0, r1, lsl #2]
   255e4:	b	25684 <__assert_fail@plt+0x139e8>
   255e8:	ldr	r1, [sp, #28]
   255ec:	sub	lr, fp, #3072	; 0xc00
   255f0:	sub	r0, fp, #72	; 0x48
   255f4:	mov	r3, #1
   255f8:	sub	r2, lr, #84	; 0x54
   255fc:	bl	221e4 <__assert_fail@plt+0x10548>
   25600:	ldr	r2, [sp, #24]
   25604:	sub	lr, fp, #2048	; 0x800
   25608:	cmp	r0, #0
   2560c:	sub	r1, lr, #72	; 0x48
   25610:	str	r0, [r1, r2, lsl #2]
   25614:	bne	25624 <__assert_fail@plt+0x13988>
   25618:	ldr	r1, [fp, #-72]	; 0xffffffb8
   2561c:	cmp	r1, #0
   25620:	bne	25828 <__assert_fail@plt+0x13b8c>
   25624:	cmp	r6, r0
   25628:	beq	25650 <__assert_fail@plt+0x139b4>
   2562c:	ldr	r1, [sp, #28]
   25630:	ldr	r2, [sp, #12]
   25634:	ldr	r0, [r1, #92]	; 0x5c
   25638:	cmp	r0, #1
   2563c:	mov	r0, #0
   25640:	movwgt	r0, #1
   25644:	orr	r2, r2, r0
   25648:	str	r2, [sp, #12]
   2564c:	b	25654 <__assert_fail@plt+0x139b8>
   25650:	ldr	r1, [sp, #28]
   25654:	sub	lr, fp, #3072	; 0xc00
   25658:	sub	r0, fp, #72	; 0x48
   2565c:	mov	r3, #2
   25660:	sub	r2, lr, #84	; 0x54
   25664:	bl	221e4 <__assert_fail@plt+0x10548>
   25668:	ldr	r1, [sp, #24]
   2566c:	ldr	r4, [fp, #-72]	; 0xffffffb8
   25670:	cmp	r0, #0
   25674:	str	r0, [r8, r1, lsl #2]
   25678:	bne	25684 <__assert_fail@plt+0x139e8>
   2567c:	cmp	r4, #0
   25680:	bne	25828 <__assert_fail@plt+0x13b8c>
   25684:	sub	lr, fp, #3072	; 0xc00
   25688:	mov	r0, #0
   2568c:	sub	r1, lr, #120	; 0x78
   25690:	add	r2, r1, r0
   25694:	add	r3, r7, r0
   25698:	add	r0, r0, #16
   2569c:	vld1.32	{d16-d17}, [r3]
   256a0:	vld1.32	{d18-d19}, [r2]
   256a4:	cmp	r0, #32
   256a8:	vorr	q8, q9, q8
   256ac:	vst1.32	{d16-d17}, [r2]
   256b0:	bne	25690 <__assert_fail@plt+0x139f4>
   256b4:	ldr	r2, [sp, #24]
   256b8:	ldr	r0, [sp, #20]
   256bc:	ldr	r1, [sp, #28]
   256c0:	add	r7, r7, #32
   256c4:	add	r2, r2, #1
   256c8:	cmp	r2, r0
   256cc:	bne	25514 <__assert_fail@plt+0x13878>
   256d0:	ldr	r0, [sp, #12]
   256d4:	tst	r0, #1
   256d8:	bne	258d8 <__assert_fail@plt+0x13c3c>
   256dc:	mov	r0, #4
   256e0:	mov	r1, #256	; 0x100
   256e4:	bl	19ea4 <__assert_fail@plt+0x8208>
   256e8:	cmp	r0, #0
   256ec:	str	r0, [sl, #44]	; 0x2c
   256f0:	beq	25828 <__assert_fail@plt+0x13b8c>
   256f4:	ldr	r4, [sp, #28]
   256f8:	mov	sl, r0
   256fc:	mov	r1, #0
   25700:	add	ip, sp, #32
   25704:	mov	r3, #0
   25708:	sub	lr, fp, #3072	; 0xc00
   2570c:	sub	r0, lr, #120	; 0x78
   25710:	ldr	r7, [r0, r3, lsl #2]
   25714:	cmp	r7, #0
   25718:	beq	25794 <__assert_fail@plt+0x13af8>
   2571c:	add	r6, r4, r3, lsl #2
   25720:	lsl	r5, r3, #5
   25724:	add	r0, r6, #96	; 0x60
   25728:	mov	r6, #1
   2572c:	tst	r7, #1
   25730:	bne	25750 <__assert_fail@plt+0x13ab4>
   25734:	lsr	r2, r7, #1
   25738:	cmp	r1, r7, lsr #1
   2573c:	add	r5, r5, #1
   25740:	lsl	r6, r6, #1
   25744:	mov	r7, r2
   25748:	bne	2572c <__assert_fail@plt+0x13a90>
   2574c:	b	25794 <__assert_fail@plt+0x13af8>
   25750:	mov	r4, sl
   25754:	mov	lr, #0
   25758:	ldr	sl, [ip, lr, lsl #3]
   2575c:	add	lr, lr, #4
   25760:	tst	sl, r6
   25764:	beq	25758 <__assert_fail@plt+0x13abc>
   25768:	ldr	r2, [r0]
   2576c:	mov	sl, r4
   25770:	tst	r2, r6
   25774:	sub	r2, fp, #2048	; 0x800
   25778:	sub	r2, r2, #72	; 0x48
   2577c:	moveq	r2, r9
   25780:	add	r2, r2, lr
   25784:	ldr	r2, [r2, #-4]
   25788:	str	r2, [r4, r5, lsl #2]
   2578c:	ldr	r4, [sp, #28]
   25790:	b	25734 <__assert_fail@plt+0x13a98>
   25794:	add	r3, r3, #1
   25798:	add	ip, ip, #4
   2579c:	cmp	r3, #8
   257a0:	bne	25708 <__assert_fail@plt+0x13a6c>
   257a4:	ldrb	r0, [fp, #-3191]	; 0xfffff389
   257a8:	ldr	r5, [sp, #20]
   257ac:	sub	lr, fp, #6144	; 0x1800
   257b0:	sub	r4, lr, #120	; 0x78
   257b4:	tst	r0, #4
   257b8:	beq	257f8 <__assert_fail@plt+0x13b5c>
   257bc:	add	r1, sp, #32
   257c0:	mov	r2, r5
   257c4:	ldrb	r0, [r1, #1]
   257c8:	tst	r0, #4
   257cc:	bne	257e4 <__assert_fail@plt+0x13b48>
   257d0:	add	r1, r1, #32
   257d4:	subs	r2, r2, #1
   257d8:	add	r8, r8, #4
   257dc:	bne	257c4 <__assert_fail@plt+0x13b28>
   257e0:	b	257f8 <__assert_fail@plt+0x13b5c>
   257e4:	ldr	r0, [sp, #12]
   257e8:	ldr	r1, [r8]
   257ec:	tst	r0, #1
   257f0:	str	r1, [sl, #40]	; 0x28
   257f4:	strne	r1, [sl, #1064]	; 0x428
   257f8:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   257fc:	bl	1a12c <__assert_fail@plt+0x8490>
   25800:	add	r4, r4, #8
   25804:	ldr	r0, [r4], #12
   25808:	bl	1a12c <__assert_fail@plt+0x8490>
   2580c:	subs	r5, r5, #1
   25810:	bne	25804 <__assert_fail@plt+0x13b68>
   25814:	mov	r0, #1
   25818:	b	258b8 <__assert_fail@plt+0x13c1c>
   2581c:	sub	lr, fp, #6144	; 0x1800
   25820:	str	r0, [fp, #-72]	; 0xffffffb8
   25824:	sub	r5, lr, #120	; 0x78
   25828:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   2582c:	bl	1a12c <__assert_fail@plt+0x8490>
   25830:	ldr	r1, [sp, #20]
   25834:	cmp	r1, #1
   25838:	blt	2587c <__assert_fail@plt+0x13be0>
   2583c:	add	r4, r5, #8
   25840:	ldr	r0, [r4], #12
   25844:	mov	r5, r1
   25848:	bl	1a12c <__assert_fail@plt+0x8490>
   2584c:	mov	r1, r5
   25850:	subs	r1, r5, #1
   25854:	bne	25840 <__assert_fail@plt+0x13ba4>
   25858:	b	2587c <__assert_fail@plt+0x13be0>
   2585c:	mov	r7, r6
   25860:	cmp	r7, #1
   25864:	blt	2587c <__assert_fail@plt+0x13be0>
   25868:	add	r4, r5, #8
   2586c:	ldr	r0, [r4], #12
   25870:	bl	1a12c <__assert_fail@plt+0x8490>
   25874:	subs	r7, r7, #1
   25878:	bne	2586c <__assert_fail@plt+0x13bd0>
   2587c:	mov	r0, #0
   25880:	b	258b8 <__assert_fail@plt+0x13c1c>
   25884:	mov	r0, #0
   25888:	sub	lr, fp, #6144	; 0x1800
   2588c:	str	r0, [r6]
   25890:	str	r0, [r5]
   25894:	sub	r5, lr, #120	; 0x78
   25898:	b	25860 <__assert_fail@plt+0x13bc4>
   2589c:	bne	258b8 <__assert_fail@plt+0x13c1c>
   258a0:	mov	r0, #4
   258a4:	mov	r1, #256	; 0x100
   258a8:	bl	19ea4 <__assert_fail@plt+0x8208>
   258ac:	cmp	r0, #0
   258b0:	str	r0, [sl, #44]	; 0x2c
   258b4:	movwne	r0, #1
   258b8:	sub	sp, fp, #64	; 0x40
   258bc:	vpop	{d8-d11}
   258c0:	add	sp, sp, #4
   258c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   258c8:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   258cc:	bl	1a12c <__assert_fail@plt+0x8490>
   258d0:	ldr	r1, [sp, #20]
   258d4:	b	2583c <__assert_fail@plt+0x13ba0>
   258d8:	mov	r0, #4
   258dc:	mov	r1, #512	; 0x200
   258e0:	bl	19ea4 <__assert_fail@plt+0x8208>
   258e4:	cmp	r0, #0
   258e8:	str	r0, [sl, #48]	; 0x30
   258ec:	beq	25828 <__assert_fail@plt+0x13b8c>
   258f0:	sub	lr, fp, #2048	; 0x800
   258f4:	mov	sl, r0
   258f8:	sub	ip, r9, #4
   258fc:	mov	r3, #0
   25900:	add	r7, sp, #32
   25904:	mov	r6, #0
   25908:	sub	r0, lr, #72	; 0x48
   2590c:	sub	lr, r0, #4
   25910:	sub	r0, fp, #3072	; 0xc00
   25914:	sub	r0, r0, #120	; 0x78
   25918:	ldr	r5, [r0, r6, lsl #2]
   2591c:	cmp	r5, #0
   25920:	beq	25990 <__assert_fail@plt+0x13cf4>
   25924:	lsl	r4, r6, #5
   25928:	mov	r1, #1
   2592c:	tst	r5, #1
   25930:	bne	25950 <__assert_fail@plt+0x13cb4>
   25934:	lsr	r0, r5, #1
   25938:	cmp	r3, r5, lsr #1
   2593c:	add	r4, r4, #1
   25940:	lsl	r1, r1, #1
   25944:	mov	r5, r0
   25948:	bne	2592c <__assert_fail@plt+0x13c90>
   2594c:	b	25990 <__assert_fail@plt+0x13cf4>
   25950:	str	sl, [sp, #28]
   25954:	mov	r2, r7
   25958:	mov	sl, ip
   2595c:	mov	r9, lr
   25960:	ldr	r0, [r2], #32
   25964:	add	sl, sl, #4
   25968:	add	r9, r9, #4
   2596c:	tst	r0, r1
   25970:	beq	25960 <__assert_fail@plt+0x13cc4>
   25974:	ldr	r0, [sl]
   25978:	ldr	sl, [sp, #28]
   2597c:	mov	r2, sl
   25980:	str	r0, [r2, r4, lsl #2]!
   25984:	ldr	r0, [r9]
   25988:	str	r0, [r2, #1024]	; 0x400
   2598c:	b	25934 <__assert_fail@plt+0x13c98>
   25990:	add	r6, r6, #1
   25994:	add	r7, r7, #4
   25998:	cmp	r6, #8
   2599c:	bne	25910 <__assert_fail@plt+0x13c74>
   259a0:	b	257a4 <__assert_fail@plt+0x13b08>
   259a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   259a8:	add	fp, sp, #28
   259ac:	sub	sp, sp, #44	; 0x2c
   259b0:	ldr	r4, [r1, #8]
   259b4:	ldr	r6, [r1, #12]
   259b8:	mov	r9, r0
   259bc:	mov	r0, #1
   259c0:	mov	sl, r1
   259c4:	str	r0, [sp, #36]	; 0x24
   259c8:	str	r0, [sp, #32]
   259cc:	mov	r0, #4
   259d0:	bl	1a1f8 <__assert_fail@plt+0x855c>
   259d4:	cmp	r0, #0
   259d8:	str	r0, [sp, #40]	; 0x28
   259dc:	beq	25c28 <__assert_fail@plt+0x13f8c>
   259e0:	str	r4, [r0]
   259e4:	add	r3, sp, #32
   259e8:	mov	r0, r9
   259ec:	mov	r1, sl
   259f0:	mov	r2, r6
   259f4:	bl	25ce8 <__assert_fail@plt+0x1404c>
   259f8:	cmp	r0, #0
   259fc:	bne	25bec <__assert_fail@plt+0x13f50>
   25a00:	add	r0, sl, #16
   25a04:	mov	r1, #0
   25a08:	str	r0, [sp, #12]
   25a0c:	cmp	r6, #1
   25a10:	blt	25bfc <__assert_fail@plt+0x13f60>
   25a14:	ldr	r0, [sl]
   25a18:	ldr	r2, [r0, r6, lsl #2]
   25a1c:	cmp	r2, #0
   25a20:	mov	r2, #0
   25a24:	addeq	r2, r1, #1
   25a28:	ldr	r1, [r9, #120]	; 0x78
   25a2c:	cmp	r2, r1
   25a30:	bgt	25c04 <__assert_fail@plt+0x13f68>
   25a34:	mov	r0, #0
   25a38:	str	r6, [sp, #16]
   25a3c:	sub	r6, r6, #1
   25a40:	str	r2, [sp, #8]
   25a44:	str	r0, [sp, #36]	; 0x24
   25a48:	ldr	r0, [r9, #100]	; 0x64
   25a4c:	ldr	r1, [r0, r6, lsl #2]
   25a50:	cmp	r1, #0
   25a54:	beq	25bcc <__assert_fail@plt+0x13f30>
   25a58:	ldr	r0, [r1, #20]
   25a5c:	cmp	r0, #1
   25a60:	blt	25bcc <__assert_fail@plt+0x13f30>
   25a64:	ldr	r0, [r9, #84]	; 0x54
   25a68:	mov	r5, #0
   25a6c:	str	r1, [sp, #24]
   25a70:	str	r0, [sp, #28]
   25a74:	ldr	r0, [r1, #24]
   25a78:	ldr	r7, [r0, r5, lsl #2]
   25a7c:	ldr	r0, [sp, #28]
   25a80:	ldr	r0, [r0]
   25a84:	add	r0, r0, r7, lsl #3
   25a88:	ldrb	r0, [r0, #6]
   25a8c:	tst	r0, #16
   25a90:	bne	25aec <__assert_fail@plt+0x13e50>
   25a94:	ldr	r0, [sp, #28]
   25a98:	mov	r2, r6
   25a9c:	ldr	r0, [r0]
   25aa0:	add	r1, r0, r7, lsl #3
   25aa4:	mov	r0, r9
   25aa8:	bl	24d74 <__assert_fail@plt+0x130d8>
   25aac:	cmp	r0, #0
   25ab0:	beq	25bb8 <__assert_fail@plt+0x13f1c>
   25ab4:	ldr	r0, [sl]
   25ab8:	ldr	r1, [sp, #16]
   25abc:	ldr	r0, [r0, r1, lsl #2]
   25ac0:	cmp	r0, #0
   25ac4:	beq	25bb8 <__assert_fail@plt+0x13f1c>
   25ac8:	ldr	r1, [sp, #28]
   25acc:	add	r0, r0, #4
   25ad0:	ldr	r1, [r1, #12]
   25ad4:	ldr	r1, [r1, r7, lsl #2]
   25ad8:	bl	2217c <__assert_fail@plt+0x104e0>
   25adc:	mov	r4, #1
   25ae0:	cmp	r0, #0
   25ae4:	bne	25b6c <__assert_fail@plt+0x13ed0>
   25ae8:	b	25bb8 <__assert_fail@plt+0x13f1c>
   25aec:	ldr	r0, [sl, #12]
   25af0:	ldr	r8, [r9, #84]	; 0x54
   25af4:	mov	r2, r9
   25af8:	mov	r1, r7
   25afc:	mov	r3, r6
   25b00:	str	r0, [sp, #20]
   25b04:	mov	r0, r8
   25b08:	bl	24a7c <__assert_fail@plt+0x12de0>
   25b0c:	mov	r4, r0
   25b10:	cmp	r0, #1
   25b14:	blt	25b34 <__assert_fail@plt+0x13e98>
   25b18:	ldr	r1, [sp, #20]
   25b1c:	add	r0, r4, r6
   25b20:	mov	r2, r6
   25b24:	cmp	r0, r1
   25b28:	ble	25b40 <__assert_fail@plt+0x13ea4>
   25b2c:	mov	r6, r2
   25b30:	b	25b6c <__assert_fail@plt+0x13ed0>
   25b34:	cmp	r4, #0
   25b38:	bne	25b6c <__assert_fail@plt+0x13ed0>
   25b3c:	b	25a94 <__assert_fail@plt+0x13df8>
   25b40:	ldr	r1, [sl]
   25b44:	mov	r6, r2
   25b48:	ldr	r0, [r1, r0, lsl #2]
   25b4c:	cmp	r0, #0
   25b50:	beq	25a94 <__assert_fail@plt+0x13df8>
   25b54:	ldr	r1, [r8, #12]
   25b58:	add	r0, r0, #4
   25b5c:	ldr	r1, [r1, r7, lsl #2]
   25b60:	bl	2217c <__assert_fail@plt+0x104e0>
   25b64:	cmp	r0, #0
   25b68:	beq	25a94 <__assert_fail@plt+0x13df8>
   25b6c:	ldr	r0, [sl, #20]
   25b70:	cmp	r0, #0
   25b74:	beq	25ba4 <__assert_fail@plt+0x13f08>
   25b78:	ldr	r0, [sp, #28]
   25b7c:	ldr	r1, [sp, #12]
   25b80:	add	r3, r4, r6
   25b84:	ldr	r0, [r0, #12]
   25b88:	ldr	r2, [r0, r7, lsl #2]
   25b8c:	mov	r0, r9
   25b90:	str	r7, [sp]
   25b94:	str	r6, [sp, #4]
   25b98:	bl	267dc <__assert_fail@plt+0x14b40>
   25b9c:	cmp	r0, #0
   25ba0:	bne	25bb8 <__assert_fail@plt+0x13f1c>
   25ba4:	add	r0, sp, #32
   25ba8:	mov	r1, r7
   25bac:	bl	21f64 <__assert_fail@plt+0x102c8>
   25bb0:	cmp	r0, #0
   25bb4:	beq	25bf4 <__assert_fail@plt+0x13f58>
   25bb8:	ldr	r1, [sp, #24]
   25bbc:	add	r5, r5, #1
   25bc0:	ldr	r0, [r1, #20]
   25bc4:	cmp	r5, r0
   25bc8:	blt	25a74 <__assert_fail@plt+0x13dd8>
   25bcc:	mov	r0, r9
   25bd0:	mov	r1, sl
   25bd4:	mov	r2, r6
   25bd8:	add	r3, sp, #32
   25bdc:	bl	25ce8 <__assert_fail@plt+0x1404c>
   25be0:	ldr	r1, [sp, #8]
   25be4:	cmp	r0, #0
   25be8:	beq	25a0c <__assert_fail@plt+0x13d70>
   25bec:	mov	r4, r0
   25bf0:	b	25c14 <__assert_fail@plt+0x13f78>
   25bf4:	mov	r4, #12
   25bf8:	b	25c14 <__assert_fail@plt+0x13f78>
   25bfc:	mov	r4, #0
   25c00:	b	25c14 <__assert_fail@plt+0x13f78>
   25c04:	lsl	r2, r6, #2
   25c08:	mov	r1, #0
   25c0c:	mov	r4, #0
   25c10:	bl	11b04 <memset@plt>
   25c14:	ldr	r0, [sp, #40]	; 0x28
   25c18:	bl	1a12c <__assert_fail@plt+0x8490>
   25c1c:	mov	r0, r4
   25c20:	sub	sp, fp, #28
   25c24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c28:	mov	r0, #0
   25c2c:	mov	r4, #12
   25c30:	str	r0, [sp, #32]
   25c34:	str	r0, [sp, #36]	; 0x24
   25c38:	b	25c1c <__assert_fail@plt+0x13f80>
   25c3c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25c40:	add	fp, sp, #24
   25c44:	sub	sp, sp, #16
   25c48:	cmp	r3, #1
   25c4c:	blt	25cdc <__assert_fail@plt+0x14040>
   25c50:	mov	r4, r3
   25c54:	mov	r5, r2
   25c58:	mov	r6, r1
   25c5c:	mov	r7, r0
   25c60:	mov	r8, sp
   25c64:	add	r9, sp, #12
   25c68:	ldr	r1, [r6]
   25c6c:	ldr	r0, [r5]
   25c70:	cmp	r1, #0
   25c74:	beq	25cc8 <__assert_fail@plt+0x1402c>
   25c78:	cmp	r0, #0
   25c7c:	beq	25ccc <__assert_fail@plt+0x14030>
   25c80:	add	r2, r0, #4
   25c84:	add	r1, r1, #4
   25c88:	mov	r0, r8
   25c8c:	bl	23968 <__assert_fail@plt+0x11ccc>
   25c90:	cmp	r0, #0
   25c94:	str	r0, [sp, #12]
   25c98:	bne	25ce0 <__assert_fail@plt+0x14044>
   25c9c:	mov	r0, r9
   25ca0:	mov	r1, r7
   25ca4:	mov	r2, r8
   25ca8:	bl	24884 <__assert_fail@plt+0x12be8>
   25cac:	str	r0, [r6]
   25cb0:	ldr	r0, [sp, #8]
   25cb4:	bl	1a12c <__assert_fail@plt+0x8490>
   25cb8:	ldr	r0, [sp, #12]
   25cbc:	cmp	r0, #0
   25cc0:	beq	25ccc <__assert_fail@plt+0x14030>
   25cc4:	b	25ce0 <__assert_fail@plt+0x14044>
   25cc8:	str	r0, [r6]
   25ccc:	add	r6, r6, #4
   25cd0:	add	r5, r5, #4
   25cd4:	subs	r4, r4, #1
   25cd8:	bne	25c68 <__assert_fail@plt+0x13fcc>
   25cdc:	mov	r0, #0
   25ce0:	sub	sp, fp, #24
   25ce4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25ce8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25cec:	add	fp, sp, #28
   25cf0:	sub	sp, sp, #84	; 0x54
   25cf4:	mov	r6, r3
   25cf8:	mov	r3, #0
   25cfc:	ldr	r7, [r0, #84]	; 0x54
   25d00:	mov	r4, r2
   25d04:	str	r0, [sp, #44]	; 0x2c
   25d08:	str	r1, [sp, #48]	; 0x30
   25d0c:	str	r3, [sp, #52]	; 0x34
   25d10:	str	r4, [sp, #40]	; 0x28
   25d14:	ldr	r2, [r0, #100]	; 0x64
   25d18:	ldr	r8, [r2, r4, lsl #2]
   25d1c:	ldr	r2, [r6, #4]
   25d20:	cmp	r8, #0
   25d24:	mov	r0, r8
   25d28:	addne	r0, r0, #4
   25d2c:	cmp	r2, #0
   25d30:	str	r0, [sp, #36]	; 0x24
   25d34:	beq	260b0 <__assert_fail@plt+0x14414>
   25d38:	cmp	r8, #0
   25d3c:	beq	26084 <__assert_fail@plt+0x143e8>
   25d40:	mov	r0, #0
   25d44:	mov	r1, r7
   25d48:	mov	r2, r6
   25d4c:	str	r7, [sp, #28]
   25d50:	str	r6, [sp, #20]
   25d54:	str	r0, [sp, #56]	; 0x38
   25d58:	add	r0, sp, #56	; 0x38
   25d5c:	bl	24884 <__assert_fail@plt+0x12be8>
   25d60:	ldr	r9, [sp, #56]	; 0x38
   25d64:	cmp	r9, #0
   25d68:	bne	263cc <__assert_fail@plt+0x14730>
   25d6c:	mov	r6, r0
   25d70:	mov	r5, r0
   25d74:	ldr	r2, [sp, #20]
   25d78:	ldr	r0, [r6, #28]!
   25d7c:	cmp	r0, #0
   25d80:	bne	25e14 <__assert_fail@plt+0x14178>
   25d84:	ldr	r0, [r2, #4]
   25d88:	mov	r4, #0
   25d8c:	mov	r7, r2
   25d90:	str	r0, [r5, #28]
   25d94:	lsl	r0, r0, #2
   25d98:	str	r4, [r5, #32]
   25d9c:	bl	1a1f8 <__assert_fail@plt+0x855c>
   25da0:	cmp	r0, #0
   25da4:	mov	r9, #12
   25da8:	str	r0, [r5, #36]	; 0x24
   25dac:	movweq	r4, #12
   25db0:	str	r4, [sp, #56]	; 0x38
   25db4:	beq	263cc <__assert_fail@plt+0x14730>
   25db8:	ldr	r0, [r7, #4]
   25dbc:	mov	r2, r7
   25dc0:	cmp	r0, #1
   25dc4:	blt	25e14 <__assert_fail@plt+0x14178>
   25dc8:	mov	r5, #0
   25dcc:	ldr	r0, [r2, #8]
   25dd0:	ldr	r1, [sp, #28]
   25dd4:	mov	r4, r2
   25dd8:	ldr	r0, [r0, r5, lsl #2]
   25ddc:	ldr	r1, [r1, #28]
   25de0:	add	r0, r0, r0, lsl #1
   25de4:	add	r1, r1, r0, lsl #2
   25de8:	mov	r0, r6
   25dec:	bl	21d58 <__assert_fail@plt+0x100bc>
   25df0:	cmp	r0, #0
   25df4:	bne	263dc <__assert_fail@plt+0x14740>
   25df8:	ldr	r0, [r4, #4]
   25dfc:	add	r5, r5, #1
   25e00:	mov	r2, r4
   25e04:	cmp	r5, r0
   25e08:	blt	25dcc <__assert_fail@plt+0x14130>
   25e0c:	mov	r0, #0
   25e10:	str	r0, [sp, #56]	; 0x38
   25e14:	ldr	r1, [sp, #36]	; 0x24
   25e18:	mov	r0, r2
   25e1c:	mov	r2, r6
   25e20:	bl	263f8 <__assert_fail@plt+0x1475c>
   25e24:	cmp	r0, #0
   25e28:	str	r0, [sp, #52]	; 0x34
   25e2c:	bne	263f0 <__assert_fail@plt+0x14754>
   25e30:	ldr	ip, [sp, #48]	; 0x30
   25e34:	ldr	r4, [sp, #40]	; 0x28
   25e38:	ldr	r7, [sp, #28]
   25e3c:	ldr	r6, [sp, #20]
   25e40:	ldr	r0, [ip, #20]
   25e44:	cmp	r0, #0
   25e48:	beq	26084 <__assert_fail@plt+0x143e8>
   25e4c:	cmp	r0, #1
   25e50:	str	r8, [sp, #12]
   25e54:	blt	26078 <__assert_fail@plt+0x143dc>
   25e58:	ldr	r0, [sp, #44]	; 0x2c
   25e5c:	mov	r8, #0
   25e60:	ldr	r0, [r0, #116]	; 0x74
   25e64:	str	r0, [sp, #24]
   25e68:	ldr	r0, [ip, #24]
   25e6c:	ldr	r1, [sp, #24]
   25e70:	ldr	r0, [r0, r8, lsl #2]
   25e74:	add	r0, r0, r0, lsl #1
   25e78:	add	r1, r1, r0, lsl #3
   25e7c:	ldr	r2, [r1, #8]
   25e80:	cmp	r2, r4
   25e84:	bge	26068 <__assert_fail@plt+0x143cc>
   25e88:	ldr	r1, [r1, #4]
   25e8c:	cmp	r1, r4
   25e90:	blt	26068 <__assert_fail@plt+0x143cc>
   25e94:	ldr	r1, [sp, #24]
   25e98:	ldr	r2, [r7]
   25e9c:	ldr	r0, [r1, r0, lsl #3]!
   25ea0:	ldr	r1, [r1, #12]
   25ea4:	ldr	sl, [r2, r0, lsl #3]
   25ea8:	ldr	r0, [r6, #4]
   25eac:	cmp	r1, r4
   25eb0:	bne	25ff8 <__assert_fail@plt+0x1435c>
   25eb4:	cmp	r0, #1
   25eb8:	blt	26068 <__assert_fail@plt+0x143cc>
   25ebc:	ldr	r3, [r6, #8]
   25ec0:	mvn	r1, #0
   25ec4:	str	r1, [sp, #32]
   25ec8:	mvn	r1, #0
   25ecc:	ldr	r5, [r3]
   25ed0:	add	r4, r2, r5, lsl #3
   25ed4:	ldrb	r4, [r4, #4]
   25ed8:	cmp	r4, #9
   25edc:	beq	25ef8 <__assert_fail@plt+0x1425c>
   25ee0:	cmp	r4, #8
   25ee4:	bne	25f0c <__assert_fail@plt+0x14270>
   25ee8:	ldr	r4, [r2, r5, lsl #3]
   25eec:	cmp	sl, r4
   25ef0:	moveq	r1, r5
   25ef4:	b	25f0c <__assert_fail@plt+0x14270>
   25ef8:	ldr	r4, [r2, r5, lsl #3]
   25efc:	cmp	sl, r4
   25f00:	ldr	r4, [sp, #32]
   25f04:	moveq	r4, r5
   25f08:	str	r4, [sp, #32]
   25f0c:	add	r3, r3, #4
   25f10:	subs	r0, r0, #1
   25f14:	bne	25ecc <__assert_fail@plt+0x14230>
   25f18:	cmp	r1, #0
   25f1c:	bmi	25f44 <__assert_fail@plt+0x142a8>
   25f20:	ldr	r3, [sp, #36]	; 0x24
   25f24:	mov	r0, r7
   25f28:	mov	r2, r6
   25f2c:	bl	265d8 <__assert_fail@plt+0x1493c>
   25f30:	ldr	r6, [sp, #20]
   25f34:	ldr	r7, [sp, #28]
   25f38:	ldr	ip, [sp, #48]	; 0x30
   25f3c:	cmp	r0, #0
   25f40:	bne	263c8 <__assert_fail@plt+0x1472c>
   25f44:	ldr	sl, [sp, #32]
   25f48:	ldr	r4, [sp, #40]	; 0x28
   25f4c:	cmp	sl, #0
   25f50:	bmi	26068 <__assert_fail@plt+0x143cc>
   25f54:	ldr	r0, [r6, #4]
   25f58:	cmp	r0, #1
   25f5c:	str	r0, [sp, #16]
   25f60:	blt	26068 <__assert_fail@plt+0x143cc>
   25f64:	mov	r5, #0
   25f68:	ldr	r0, [r6, #8]
   25f6c:	mov	r1, sl
   25f70:	ldr	r6, [r0, r5, lsl #2]
   25f74:	ldr	r0, [r7, #28]
   25f78:	add	r9, r6, r6, lsl #1
   25f7c:	add	r0, r0, r9, lsl #2
   25f80:	bl	2217c <__assert_fail@plt+0x104e0>
   25f84:	cmp	r0, #0
   25f88:	bne	25fa4 <__assert_fail@plt+0x14308>
   25f8c:	ldr	r0, [r7, #24]
   25f90:	mov	r1, sl
   25f94:	add	r0, r0, r9, lsl #2
   25f98:	bl	2217c <__assert_fail@plt+0x104e0>
   25f9c:	cmp	r0, #0
   25fa0:	beq	25fc4 <__assert_fail@plt+0x14328>
   25fa4:	ldr	r6, [sp, #20]
   25fa8:	ldr	r0, [sp, #16]
   25fac:	ldr	r4, [sp, #40]	; 0x28
   25fb0:	ldr	ip, [sp, #48]	; 0x30
   25fb4:	add	r5, r5, #1
   25fb8:	cmp	r5, r0
   25fbc:	blt	25f68 <__assert_fail@plt+0x142cc>
   25fc0:	b	26068 <__assert_fail@plt+0x143cc>
   25fc4:	mov	r1, r6
   25fc8:	ldr	r6, [sp, #20]
   25fcc:	ldr	r3, [sp, #36]	; 0x24
   25fd0:	mov	r0, r7
   25fd4:	mov	r2, r6
   25fd8:	bl	265d8 <__assert_fail@plt+0x1493c>
   25fdc:	cmp	r0, #0
   25fe0:	bne	263c8 <__assert_fail@plt+0x1472c>
   25fe4:	ldr	r0, [r6, #4]
   25fe8:	ldr	r7, [sp, #28]
   25fec:	sub	r5, r5, #1
   25ff0:	str	r0, [sp, #16]
   25ff4:	b	25fa8 <__assert_fail@plt+0x1430c>
   25ff8:	cmp	r0, #1
   25ffc:	blt	26068 <__assert_fail@plt+0x143cc>
   26000:	mov	r5, #0
   26004:	ldr	r1, [r6, #8]
   26008:	ldr	r1, [r1, r5, lsl #2]
   2600c:	add	r3, r2, r1, lsl #3
   26010:	ldrb	r3, [r3, #4]
   26014:	orr	r3, r3, #1
   26018:	cmp	r3, #9
   2601c:	bne	26054 <__assert_fail@plt+0x143b8>
   26020:	ldr	r2, [r2, r1, lsl #3]
   26024:	cmp	sl, r2
   26028:	bne	26054 <__assert_fail@plt+0x143b8>
   2602c:	ldr	r3, [sp, #36]	; 0x24
   26030:	mov	r0, r7
   26034:	mov	r2, r6
   26038:	bl	265d8 <__assert_fail@plt+0x1493c>
   2603c:	cmp	r0, #0
   26040:	bne	263c8 <__assert_fail@plt+0x1472c>
   26044:	ldr	r0, [r6, #4]
   26048:	ldr	r4, [sp, #40]	; 0x28
   2604c:	ldr	ip, [sp, #48]	; 0x30
   26050:	ldr	r7, [sp, #28]
   26054:	add	r5, r5, #1
   26058:	cmp	r5, r0
   2605c:	bge	26068 <__assert_fail@plt+0x143cc>
   26060:	ldr	r2, [r7]
   26064:	b	26004 <__assert_fail@plt+0x14368>
   26068:	ldr	r0, [ip, #20]
   2606c:	add	r8, r8, #1
   26070:	cmp	r8, r0
   26074:	blt	25e68 <__assert_fail@plt+0x141cc>
   26078:	ldr	r8, [sp, #12]
   2607c:	mov	r0, #0
   26080:	str	r0, [sp, #52]	; 0x34
   26084:	add	r0, sp, #52	; 0x34
   26088:	mov	r1, r7
   2608c:	mov	r2, r6
   26090:	bl	24884 <__assert_fail@plt+0x12be8>
   26094:	ldr	r1, [sp, #48]	; 0x30
   26098:	ldr	r1, [r1]
   2609c:	str	r0, [r1, r4, lsl #2]
   260a0:	ldr	r9, [sp, #52]	; 0x34
   260a4:	cmp	r9, #0
   260a8:	beq	260b8 <__assert_fail@plt+0x1441c>
   260ac:	b	263bc <__assert_fail@plt+0x14720>
   260b0:	ldr	r1, [r1]
   260b4:	str	r3, [r1, r4, lsl #2]
   260b8:	cmp	r8, #0
   260bc:	beq	263b8 <__assert_fail@plt+0x1471c>
   260c0:	ldr	r0, [sp, #44]	; 0x2c
   260c4:	ldr	r1, [sp, #40]	; 0x28
   260c8:	ldr	r0, [r0, #100]	; 0x64
   260cc:	ldr	r0, [r0, r1, lsl #2]
   260d0:	ldrb	r0, [r0, #52]	; 0x34
   260d4:	tst	r0, #64	; 0x40
   260d8:	beq	263b8 <__assert_fail@plt+0x1471c>
   260dc:	ldr	r0, [sp, #44]	; 0x2c
   260e0:	ldr	r9, [sp, #40]	; 0x28
   260e4:	ldr	r8, [r0, #84]	; 0x54
   260e8:	mov	r1, r9
   260ec:	bl	23b70 <__assert_fail@plt+0x11ed4>
   260f0:	cmn	r0, #1
   260f4:	str	r0, [sp, #16]
   260f8:	beq	263a8 <__assert_fail@plt+0x1470c>
   260fc:	ldr	r0, [sp, #36]	; 0x24
   26100:	mov	r6, #0
   26104:	str	r6, [sp, #56]	; 0x38
   26108:	ldr	r0, [r0, #4]
   2610c:	cmp	r0, #0
   26110:	ble	263b4 <__assert_fail@plt+0x14718>
   26114:	ldr	r3, [sp, #48]	; 0x30
   26118:	add	r1, r9, #1
   2611c:	mov	r7, #0
   26120:	str	r1, [sp, #8]
   26124:	add	r1, sp, #56	; 0x38
   26128:	add	r1, r1, #16
   2612c:	str	r1, [sp, #24]
   26130:	add	r1, r3, #16
   26134:	str	r1, [sp, #28]
   26138:	ldr	r1, [sp, #16]
   2613c:	add	r1, r1, r1, lsl #1
   26140:	str	r1, [sp, #12]
   26144:	ldr	r1, [sp, #36]	; 0x24
   26148:	ldr	r2, [r3, #8]
   2614c:	ldr	r1, [r1, #8]
   26150:	ldr	sl, [r1, r7, lsl #2]
   26154:	ldr	r1, [r8]
   26158:	add	r1, r1, sl, lsl #3
   2615c:	cmp	sl, r2
   26160:	ldrb	r1, [r1, #4]
   26164:	bne	26180 <__assert_fail@plt+0x144e4>
   26168:	cmp	r1, #4
   2616c:	bne	26378 <__assert_fail@plt+0x146dc>
   26170:	ldr	r1, [r3, #12]
   26174:	cmp	r1, r9
   26178:	bne	26188 <__assert_fail@plt+0x144ec>
   2617c:	b	26378 <__assert_fail@plt+0x146dc>
   26180:	cmp	r1, #4
   26184:	bne	26378 <__assert_fail@plt+0x146dc>
   26188:	ldr	r0, [sp, #44]	; 0x2c
   2618c:	ldr	r1, [sp, #12]
   26190:	str	r7, [sp, #20]
   26194:	ldr	r7, [sp, #16]
   26198:	str	r6, [sp, #32]
   2619c:	ldr	r0, [r0, #116]	; 0x74
   261a0:	add	r5, r0, r1, lsl #3
   261a4:	ldr	r0, [r5]
   261a8:	cmp	r0, sl
   261ac:	bne	2623c <__assert_fail@plt+0x145a0>
   261b0:	ldr	r0, [r5, #8]
   261b4:	ldr	r1, [r5, #12]
   261b8:	subs	r0, r1, r0
   261bc:	add	r6, r0, r9
   261c0:	beq	261d0 <__assert_fail@plt+0x14534>
   261c4:	ldr	r0, [r8, #12]
   261c8:	add	r0, r0, sl, lsl #2
   261cc:	b	261e0 <__assert_fail@plt+0x14544>
   261d0:	ldr	r0, [r8, #20]
   261d4:	add	r1, sl, sl, lsl #1
   261d8:	add	r0, r0, r1, lsl #2
   261dc:	ldr	r0, [r0, #8]
   261e0:	ldr	r1, [r3, #12]
   261e4:	cmp	r6, r1
   261e8:	bgt	2623c <__assert_fail@plt+0x145a0>
   261ec:	ldr	r1, [r3]
   261f0:	ldr	r1, [r1, r6, lsl #2]
   261f4:	cmp	r1, #0
   261f8:	beq	2623c <__assert_fail@plt+0x145a0>
   261fc:	ldr	r4, [r0]
   26200:	add	r0, r1, #4
   26204:	mov	r1, r4
   26208:	bl	2217c <__assert_fail@plt+0x104e0>
   2620c:	cmp	r0, #0
   26210:	beq	26234 <__assert_fail@plt+0x14598>
   26214:	ldr	r0, [sp, #44]	; 0x2c
   26218:	ldr	r1, [sp, #28]
   2621c:	mov	r2, sl
   26220:	mov	r3, r9
   26224:	stm	sp, {r4, r6}
   26228:	bl	267dc <__assert_fail@plt+0x14b40>
   2622c:	cmp	r0, #0
   26230:	beq	26258 <__assert_fail@plt+0x145bc>
   26234:	mov	r0, r5
   26238:	b	2633c <__assert_fail@plt+0x146a0>
   2623c:	mov	r0, r5
   26240:	add	r5, r0, #24
   26244:	ldrb	r0, [r0, #20]
   26248:	add	r7, r7, #1
   2624c:	cmp	r0, #0
   26250:	bne	261a4 <__assert_fail@plt+0x14508>
   26254:	b	26368 <__assert_fail@plt+0x146cc>
   26258:	ldr	r0, [sp, #32]
   2625c:	cmp	r0, #0
   26260:	bne	26294 <__assert_fail@plt+0x145f8>
   26264:	ldr	r0, [sp, #48]	; 0x30
   26268:	mov	r1, #12
   2626c:	vld1.32	{d16-d17}, [r0], r1
   26270:	vld1.32	{d18-d19}, [r0]
   26274:	add	r0, sp, #56	; 0x38
   26278:	vst1.64	{d16-d17}, [r0], r1
   2627c:	ldr	r1, [sp, #28]
   26280:	vst1.32	{d18-d19}, [r0]
   26284:	ldr	r0, [sp, #24]
   26288:	bl	22100 <__assert_fail@plt+0x10464>
   2628c:	cmp	r0, #0
   26290:	bne	263d4 <__assert_fail@plt+0x14738>
   26294:	ldr	r4, [sp, #40]	; 0x28
   26298:	ldr	r0, [sp, #24]
   2629c:	mov	r1, r7
   262a0:	str	r4, [sp, #68]	; 0x44
   262a4:	str	sl, [sp, #64]	; 0x40
   262a8:	bl	21f64 <__assert_fail@plt+0x102c8>
   262ac:	cmp	r0, #0
   262b0:	beq	263e4 <__assert_fail@plt+0x14748>
   262b4:	ldr	r5, [sp, #56]	; 0x38
   262b8:	ldr	r0, [sp, #44]	; 0x2c
   262bc:	add	r1, sp, #56	; 0x38
   262c0:	ldr	r4, [r5, r4, lsl #2]
   262c4:	bl	259a4 <__assert_fail@plt+0x13d08>
   262c8:	cmp	r0, #0
   262cc:	bne	263d4 <__assert_fail@plt+0x14738>
   262d0:	ldr	r0, [sp, #48]	; 0x30
   262d4:	ldr	r1, [r0, #4]
   262d8:	cmp	r1, #0
   262dc:	beq	262f8 <__assert_fail@plt+0x1465c>
   262e0:	ldr	r3, [sp, #8]
   262e4:	mov	r0, r8
   262e8:	mov	r2, r5
   262ec:	bl	25c3c <__assert_fail@plt+0x13fa0>
   262f0:	cmp	r0, #0
   262f4:	bne	263d4 <__assert_fail@plt+0x14738>
   262f8:	ldr	r9, [sp, #40]	; 0x28
   262fc:	ldr	r0, [sp, #24]
   26300:	mov	r1, r7
   26304:	str	r5, [sp, #32]
   26308:	str	r4, [r5, r9, lsl #2]
   2630c:	bl	2217c <__assert_fail@plt+0x104e0>
   26310:	subs	r1, r0, #1
   26314:	blt	2632c <__assert_fail@plt+0x14690>
   26318:	ldr	r2, [sp, #76]	; 0x4c
   2631c:	cmp	r2, r0
   26320:	subge	r2, r2, #1
   26324:	strge	r2, [sp, #76]	; 0x4c
   26328:	bgt	26344 <__assert_fail@plt+0x146a8>
   2632c:	ldr	r0, [sp, #44]	; 0x2c
   26330:	add	r1, r7, r7, lsl #1
   26334:	ldr	r0, [r0, #116]	; 0x74
   26338:	add	r0, r0, r1, lsl #3
   2633c:	ldr	r3, [sp, #48]	; 0x30
   26340:	b	26240 <__assert_fail@plt+0x145a4>
   26344:	ldr	r3, [sp, #80]	; 0x50
   26348:	add	r0, r3, r0, lsl #2
   2634c:	ldr	r3, [r0]
   26350:	add	r1, r1, #1
   26354:	cmp	r1, r2
   26358:	str	r3, [r0, #-4]
   2635c:	add	r0, r0, #4
   26360:	blt	2634c <__assert_fail@plt+0x146b0>
   26364:	b	2632c <__assert_fail@plt+0x14690>
   26368:	ldr	r0, [sp, #36]	; 0x24
   2636c:	ldr	r7, [sp, #20]
   26370:	ldr	r6, [sp, #32]
   26374:	ldr	r0, [r0, #4]
   26378:	add	r7, r7, #1
   2637c:	cmp	r7, r0
   26380:	blt	26144 <__assert_fail@plt+0x144a8>
   26384:	mov	r9, #0
   26388:	cmp	r6, #0
   2638c:	beq	26398 <__assert_fail@plt+0x146fc>
   26390:	ldr	r0, [sp, #80]	; 0x50
   26394:	bl	1a12c <__assert_fail@plt+0x8490>
   26398:	cmp	r9, #0
   2639c:	str	r9, [sp, #52]	; 0x34
   263a0:	moveq	r9, #0
   263a4:	b	263bc <__assert_fail@plt+0x14720>
   263a8:	mov	r0, #0
   263ac:	str	r0, [sp, #52]	; 0x34
   263b0:	b	263b8 <__assert_fail@plt+0x1471c>
   263b4:	str	r6, [sp, #52]	; 0x34
   263b8:	mov	r9, #0
   263bc:	mov	r0, r9
   263c0:	sub	sp, fp, #28
   263c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   263c8:	mov	r9, r0
   263cc:	str	r9, [sp, #52]	; 0x34
   263d0:	b	263bc <__assert_fail@plt+0x14720>
   263d4:	mov	r9, r0
   263d8:	b	263e8 <__assert_fail@plt+0x1474c>
   263dc:	str	r0, [sp, #56]	; 0x38
   263e0:	b	263cc <__assert_fail@plt+0x14730>
   263e4:	mov	r9, #12
   263e8:	ldr	r6, [sp, #56]	; 0x38
   263ec:	b	26388 <__assert_fail@plt+0x146ec>
   263f0:	mov	r9, r0
   263f4:	b	263bc <__assert_fail@plt+0x14720>
   263f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   263fc:	add	fp, sp, #28
   26400:	sub	sp, sp, #4
   26404:	mov	r9, r0
   26408:	ldr	r0, [r1, #4]
   2640c:	mov	r8, #0
   26410:	cmp	r0, #0
   26414:	beq	265c4 <__assert_fail@plt+0x14928>
   26418:	mov	r5, r2
   2641c:	ldr	r2, [r2, #4]
   26420:	cmp	r2, #0
   26424:	beq	265c4 <__assert_fail@plt+0x14928>
   26428:	mov	sl, r1
   2642c:	ldr	r1, [r9, #4]
   26430:	ldr	r7, [r9]
   26434:	add	r3, r2, r0
   26438:	add	r6, r1, r3
   2643c:	cmp	r6, r7
   26440:	ble	26470 <__assert_fail@plt+0x147d4>
   26444:	ldr	r0, [r9, #8]
   26448:	add	r4, r7, r3
   2644c:	lsl	r1, r4, #2
   26450:	bl	1a28c <__assert_fail@plt+0x85f0>
   26454:	cmp	r0, #0
   26458:	beq	265d0 <__assert_fail@plt+0x14934>
   2645c:	str	r4, [r9]
   26460:	str	r0, [r9, #8]
   26464:	ldr	r1, [r9, #4]
   26468:	ldr	r2, [r5, #4]
   2646c:	ldr	r0, [sl, #4]
   26470:	ldr	lr, [r5, #8]
   26474:	ldr	r4, [sl, #8]
   26478:	add	r3, r0, r1
   2647c:	sub	r7, r1, #1
   26480:	add	ip, r3, r2
   26484:	sub	r0, r0, #1
   26488:	sub	r3, r2, #1
   2648c:	ldr	r1, [lr, r3, lsl #2]
   26490:	ldr	r6, [r4, r0, lsl #2]
   26494:	cmp	r6, r1
   26498:	beq	264c4 <__assert_fail@plt+0x14828>
   2649c:	blt	264b4 <__assert_fail@plt+0x14818>
   264a0:	sub	r6, r0, #1
   264a4:	cmp	r0, #0
   264a8:	mov	r0, r6
   264ac:	bgt	26490 <__assert_fail@plt+0x147f4>
   264b0:	b	26528 <__assert_fail@plt+0x1488c>
   264b4:	cmp	r2, #2
   264b8:	mov	r2, r3
   264bc:	bge	26488 <__assert_fail@plt+0x147ec>
   264c0:	b	26528 <__assert_fail@plt+0x1488c>
   264c4:	cmp	r7, #0
   264c8:	bmi	26504 <__assert_fail@plt+0x14868>
   264cc:	ldr	r8, [r9, #8]
   264d0:	mov	r1, r7
   264d4:	ldr	r7, [r8, r1, lsl #2]
   264d8:	cmp	r7, r6
   264dc:	ble	264f4 <__assert_fail@plt+0x14858>
   264e0:	sub	r7, r1, #1
   264e4:	cmp	r1, #0
   264e8:	mov	r1, r7
   264ec:	bgt	264d4 <__assert_fail@plt+0x14838>
   264f0:	b	26504 <__assert_fail@plt+0x14868>
   264f4:	mov	r7, r1
   264f8:	bne	26504 <__assert_fail@plt+0x14868>
   264fc:	mov	r7, r1
   26500:	b	26510 <__assert_fail@plt+0x14874>
   26504:	ldr	r1, [r9, #8]
   26508:	sub	ip, ip, #1
   2650c:	str	r6, [r1, ip, lsl #2]
   26510:	cmp	r0, #1
   26514:	mov	r8, #0
   26518:	blt	26528 <__assert_fail@plt+0x1488c>
   2651c:	cmp	r2, #2
   26520:	mov	r2, r3
   26524:	bge	26484 <__assert_fail@plt+0x147e8>
   26528:	ldr	r2, [r9, #4]
   2652c:	ldr	lr, [sl, #4]
   26530:	ldr	r4, [r5, #4]
   26534:	ldr	r0, [r9, #8]
   26538:	subs	r1, r2, #1
   2653c:	add	r3, r1, lr
   26540:	add	r3, r3, r4
   26544:	sub	r7, r3, ip
   26548:	add	r6, r7, #1
   2654c:	add	r5, r6, r2
   26550:	str	r5, [r9, #4]
   26554:	blt	265b4 <__assert_fail@plt+0x14918>
   26558:	cmp	r7, #0
   2655c:	bmi	265b4 <__assert_fail@plt+0x14918>
   26560:	add	r2, r2, r4
   26564:	add	r2, r2, lr
   26568:	sub	r2, r2, ip
   2656c:	add	r7, r0, r2, lsl #2
   26570:	ldr	r2, [r0, r1, lsl #2]
   26574:	ldr	r5, [r0, r3, lsl #2]
   26578:	cmp	r5, r2
   2657c:	bgt	26598 <__assert_fail@plt+0x148fc>
   26580:	str	r2, [r7, r1, lsl #2]
   26584:	sub	r2, r1, #1
   26588:	cmp	r1, #0
   2658c:	mov	r1, r2
   26590:	bgt	26570 <__assert_fail@plt+0x148d4>
   26594:	b	265b4 <__assert_fail@plt+0x14918>
   26598:	str	r5, [r7, r1, lsl #2]
   2659c:	sub	r7, r7, #4
   265a0:	subs	r6, r6, #1
   265a4:	sub	r3, r3, #1
   265a8:	mov	r2, #0
   265ac:	bne	26570 <__assert_fail@plt+0x148d4>
   265b0:	b	265b8 <__assert_fail@plt+0x1491c>
   265b4:	mov	r2, r6
   265b8:	add	r1, r0, ip, lsl #2
   265bc:	lsl	r2, r2, #2
   265c0:	bl	118dc <memcpy@plt>
   265c4:	mov	r0, r8
   265c8:	sub	sp, fp, #28
   265cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   265d0:	mov	r8, #12
   265d4:	b	265c4 <__assert_fail@plt+0x14928>
   265d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   265dc:	add	fp, sp, #28
   265e0:	sub	sp, sp, #36	; 0x24
   265e4:	mov	r4, r2
   265e8:	mov	r2, r0
   265ec:	ldr	r0, [r0, #28]
   265f0:	str	r1, [sp, #20]
   265f4:	add	r1, r1, r1, lsl #1
   265f8:	mov	r5, #0
   265fc:	str	r3, [sp, #4]
   26600:	str	r5, [sp, #28]
   26604:	str	r5, [sp, #24]
   26608:	str	r5, [sp, #32]
   2660c:	add	r1, r0, r1, lsl #2
   26610:	mov	r0, r1
   26614:	ldr	r7, [r0, #4]!
   26618:	cmp	r7, #1
   2661c:	blt	267c0 <__assert_fail@plt+0x14b24>
   26620:	add	r8, r1, #8
   26624:	mov	sl, #0
   26628:	str	r0, [sp, #8]
   2662c:	str	r1, [sp, #16]
   26630:	ldr	r0, [r8]
   26634:	ldr	r1, [sp, #20]
   26638:	ldr	r0, [r0, sl, lsl #2]
   2663c:	cmp	r0, r1
   26640:	beq	26718 <__assert_fail@plt+0x14a7c>
   26644:	ldr	r1, [r2]
   26648:	add	r1, r1, r0, lsl #3
   2664c:	ldrb	r1, [r1, #4]
   26650:	tst	r1, #8
   26654:	beq	26718 <__assert_fail@plt+0x14a7c>
   26658:	ldr	r1, [r2, #20]
   2665c:	add	r0, r0, r0, lsl #1
   26660:	mvn	r5, #0
   26664:	mov	r6, r2
   26668:	str	r0, [sp, #12]
   2666c:	add	r0, r1, r0, lsl #2
   26670:	ldr	r1, [r0, #4]
   26674:	ldr	r0, [r0, #8]
   26678:	cmp	r1, #2
   2667c:	ldr	r9, [r0]
   26680:	ldrge	r5, [r0, #4]
   26684:	ldr	r0, [sp, #16]
   26688:	mov	r1, r9
   2668c:	bl	2217c <__assert_fail@plt+0x104e0>
   26690:	cmp	r0, #0
   26694:	mov	r2, r6
   26698:	beq	266d4 <__assert_fail@plt+0x14a38>
   2669c:	cmp	r5, #1
   266a0:	blt	26718 <__assert_fail@plt+0x14a7c>
   266a4:	ldr	r0, [sp, #16]
   266a8:	mov	r1, r5
   266ac:	bl	2217c <__assert_fail@plt+0x104e0>
   266b0:	cmp	r0, #0
   266b4:	bne	26714 <__assert_fail@plt+0x14a78>
   266b8:	mov	r0, r4
   266bc:	mov	r1, r5
   266c0:	bl	2217c <__assert_fail@plt+0x104e0>
   266c4:	cmp	r0, #0
   266c8:	mov	r2, r6
   266cc:	bne	266ec <__assert_fail@plt+0x14a50>
   266d0:	b	26718 <__assert_fail@plt+0x14a7c>
   266d4:	mov	r0, r4
   266d8:	mov	r1, r9
   266dc:	bl	2217c <__assert_fail@plt+0x104e0>
   266e0:	mov	r2, r6
   266e4:	cmp	r0, #0
   266e8:	beq	2669c <__assert_fail@plt+0x14a00>
   266ec:	ldr	r0, [r2, #28]
   266f0:	ldr	r1, [sp, #12]
   266f4:	add	r2, r0, r1, lsl #2
   266f8:	ldr	r1, [sp, #4]
   266fc:	add	r0, sp, #24
   26700:	bl	263f8 <__assert_fail@plt+0x1475c>
   26704:	cmp	r0, #0
   26708:	bne	267d4 <__assert_fail@plt+0x14b38>
   2670c:	ldr	r0, [sp, #8]
   26710:	ldr	r7, [r0]
   26714:	mov	r2, r6
   26718:	add	sl, sl, #1
   2671c:	cmp	sl, r7
   26720:	blt	26630 <__assert_fail@plt+0x14994>
   26724:	cmp	r7, #1
   26728:	blt	267bc <__assert_fail@plt+0x14b20>
   2672c:	ldr	r0, [sp, #16]
   26730:	ldr	r7, [sp, #8]
   26734:	mov	r5, #0
   26738:	add	r8, sp, #24
   2673c:	ldr	r9, [r0, #8]
   26740:	ldr	r6, [r9, r5, lsl #2]
   26744:	mov	r0, r8
   26748:	mov	r1, r6
   2674c:	bl	2217c <__assert_fail@plt+0x104e0>
   26750:	cmp	r0, #0
   26754:	bne	26780 <__assert_fail@plt+0x14ae4>
   26758:	mov	r0, r4
   2675c:	mov	r1, r6
   26760:	bl	2217c <__assert_fail@plt+0x104e0>
   26764:	subs	r1, r0, #1
   26768:	blt	26780 <__assert_fail@plt+0x14ae4>
   2676c:	ldr	r2, [r4, #4]
   26770:	cmp	r2, r0
   26774:	subge	r2, r2, #1
   26778:	strge	r2, [r4, #4]
   2677c:	bgt	26794 <__assert_fail@plt+0x14af8>
   26780:	ldr	r0, [r7]
   26784:	add	r5, r5, #1
   26788:	cmp	r5, r0
   2678c:	blt	26740 <__assert_fail@plt+0x14aa4>
   26790:	b	267bc <__assert_fail@plt+0x14b20>
   26794:	ldr	r2, [r4, #8]
   26798:	add	r0, r2, r0, lsl #2
   2679c:	ldr	r2, [r0]
   267a0:	add	r1, r1, #1
   267a4:	str	r2, [r0, #-4]
   267a8:	add	r0, r0, #4
   267ac:	ldr	r2, [r4, #4]
   267b0:	cmp	r1, r2
   267b4:	blt	2679c <__assert_fail@plt+0x14b00>
   267b8:	b	26780 <__assert_fail@plt+0x14ae4>
   267bc:	mov	r5, #0
   267c0:	ldr	r0, [sp, #32]
   267c4:	bl	1a12c <__assert_fail@plt+0x8490>
   267c8:	mov	r0, r5
   267cc:	sub	sp, fp, #28
   267d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   267d4:	mov	r5, r0
   267d8:	b	267c0 <__assert_fail@plt+0x14b24>
   267dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   267e0:	add	fp, sp, #28
   267e4:	sub	sp, sp, #20
   267e8:	mov	r6, r1
   267ec:	mov	r1, r3
   267f0:	str	r2, [sp, #12]
   267f4:	mov	r7, r0
   267f8:	str	r3, [sp, #16]
   267fc:	bl	23b70 <__assert_fail@plt+0x11ed4>
   26800:	ldr	r1, [fp, #12]
   26804:	str	r0, [sp, #8]
   26808:	mov	r0, r7
   2680c:	bl	23b70 <__assert_fail@plt+0x11ed4>
   26810:	mov	r4, r0
   26814:	ldr	r0, [r6, #4]
   26818:	cmp	r0, #1
   2681c:	blt	268a0 <__assert_fail@plt+0x14c04>
   26820:	ldr	sl, [r7, #84]	; 0x54
   26824:	mov	r5, #0
   26828:	ldr	r0, [r6, #8]
   2682c:	ldr	r2, [r7, #116]	; 0x74
   26830:	ldr	r3, [sp, #12]
   26834:	ldr	r1, [r0, r5, lsl #2]
   26838:	add	r0, r1, r1, lsl #1
   2683c:	ldr	r0, [r2, r0, lsl #3]
   26840:	ldr	r2, [sl]
   26844:	ldr	r9, [r2, r0, lsl #3]
   26848:	ldr	r0, [sp, #16]
   2684c:	str	r0, [sp]
   26850:	ldr	r0, [sp, #8]
   26854:	mov	r2, r9
   26858:	str	r0, [sp, #4]
   2685c:	mov	r0, r7
   26860:	bl	268b4 <__assert_fail@plt+0x14c18>
   26864:	mov	r8, r0
   26868:	ldr	r0, [r6, #8]
   2686c:	ldr	r3, [fp, #8]
   26870:	mov	r2, r9
   26874:	ldr	r1, [r0, r5, lsl #2]
   26878:	ldr	r0, [fp, #12]
   2687c:	stm	sp, {r0, r4}
   26880:	mov	r0, r7
   26884:	bl	268b4 <__assert_fail@plt+0x14c18>
   26888:	cmp	r0, r8
   2688c:	bne	268a8 <__assert_fail@plt+0x14c0c>
   26890:	ldr	r0, [r6, #4]
   26894:	add	r5, r5, #1
   26898:	cmp	r5, r0
   2689c:	blt	26828 <__assert_fail@plt+0x14b8c>
   268a0:	mov	r0, #0
   268a4:	b	268ac <__assert_fail@plt+0x14c10>
   268a8:	mov	r0, #1
   268ac:	sub	sp, fp, #28
   268b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   268b4:	push	{r4, r5, fp, lr}
   268b8:	add	fp, sp, #8
   268bc:	sub	sp, sp, #8
   268c0:	ldr	r4, [r0, #116]	; 0x74
   268c4:	add	r1, r1, r1, lsl #1
   268c8:	ldr	lr, [fp, #8]
   268cc:	add	r4, r4, r1, lsl #3
   268d0:	mvn	r1, #0
   268d4:	ldr	ip, [r4, #8]
   268d8:	cmp	ip, lr
   268dc:	bgt	26928 <__assert_fail@plt+0x14c8c>
   268e0:	ldr	r4, [r4, #12]
   268e4:	mov	r1, #1
   268e8:	cmp	r4, lr
   268ec:	blt	26928 <__assert_fail@plt+0x14c8c>
   268f0:	sub	r1, r4, lr
   268f4:	mov	r5, #1
   268f8:	cmp	ip, lr
   268fc:	clz	r1, r1
   26900:	lsr	r4, r1, #5
   26904:	lsl	r1, r4, #1
   26908:	orreq	r1, r5, r4, lsl #1
   2690c:	cmp	r1, #0
   26910:	beq	26924 <__assert_fail@plt+0x14c88>
   26914:	ldr	r5, [fp, #12]
   26918:	str	r5, [sp]
   2691c:	bl	26934 <__assert_fail@plt+0x14c98>
   26920:	b	2692c <__assert_fail@plt+0x14c90>
   26924:	mov	r1, #0
   26928:	mov	r0, r1
   2692c:	sub	sp, fp, #8
   26930:	pop	{r4, r5, fp, pc}
   26934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26938:	add	fp, sp, #28
   2693c:	sub	sp, sp, #36	; 0x24
   26940:	ldr	r4, [r0, #84]	; 0x54
   26944:	mov	r7, r0
   26948:	mov	r5, r1
   2694c:	add	r1, r3, r3, lsl #1
   26950:	str	r3, [sp, #32]
   26954:	ldr	r0, [r4, #24]
   26958:	add	r1, r0, r1, lsl #2
   2695c:	mov	lr, r1
   26960:	ldr	r0, [lr, #4]!
   26964:	cmp	r0, #1
   26968:	blt	26b04 <__assert_fail@plt+0x14e68>
   2696c:	mov	ip, #1
   26970:	mov	r6, r2
   26974:	and	r3, r5, #2
   26978:	mov	sl, #0
   2697c:	mvn	r2, ip, lsl r2
   26980:	cmp	r6, #31
   26984:	str	r3, [sp, #16]
   26988:	str	r2, [sp, #24]
   2698c:	lsl	r2, ip, r6
   26990:	and	ip, r5, #1
   26994:	str	r2, [sp, #28]
   26998:	mov	r2, #0
   2699c:	movwgt	r2, #1
   269a0:	str	ip, [sp, #12]
   269a4:	orr	r2, r2, r3, lsr #1
   269a8:	add	r3, r1, #8
   269ac:	stmib	sp, {r3, lr}
   269b0:	str	r2, [sp, #20]
   269b4:	ldr	r1, [r3]
   269b8:	ldr	r9, [r1, sl, lsl #2]
   269bc:	ldr	r1, [r4]
   269c0:	add	r2, r1, r9, lsl #3
   269c4:	ldrb	r2, [r2, #4]
   269c8:	cmp	r2, #9
   269cc:	beq	26ac8 <__assert_fail@plt+0x14e2c>
   269d0:	cmp	r2, #8
   269d4:	beq	26ae4 <__assert_fail@plt+0x14e48>
   269d8:	cmp	r2, #4
   269dc:	bne	26af8 <__assert_fail@plt+0x14e5c>
   269e0:	ldr	r1, [fp, #8]
   269e4:	cmn	r1, #1
   269e8:	beq	26af8 <__assert_fail@plt+0x14e5c>
   269ec:	ldr	r1, [fp, #8]
   269f0:	ldr	r0, [r7, #116]	; 0x74
   269f4:	add	r1, r1, r1, lsl #1
   269f8:	add	r0, r0, r1, lsl #3
   269fc:	add	r8, r0, #16
   26a00:	ldr	r0, [r8, #-16]
   26a04:	cmp	r0, r9
   26a08:	bne	26aa4 <__assert_fail@plt+0x14e08>
   26a0c:	cmp	r6, #31
   26a10:	bgt	26a24 <__assert_fail@plt+0x14d88>
   26a14:	ldr	r0, [r8]
   26a18:	ldr	r1, [sp, #28]
   26a1c:	tst	r0, r1
   26a20:	beq	26aa4 <__assert_fail@plt+0x14e08>
   26a24:	ldr	r0, [r4, #20]
   26a28:	add	r1, r9, r9, lsl #1
   26a2c:	add	r0, r0, r1, lsl #2
   26a30:	ldr	r0, [r0, #8]
   26a34:	ldr	r3, [r0]
   26a38:	ldr	r0, [sp, #32]
   26a3c:	cmp	r3, r0
   26a40:	beq	26b0c <__assert_fail@plt+0x14e70>
   26a44:	ldr	r0, [fp, #8]
   26a48:	mov	r1, r5
   26a4c:	mov	r2, r6
   26a50:	str	r0, [sp]
   26a54:	mov	r0, r7
   26a58:	bl	26934 <__assert_fail@plt+0x14c98>
   26a5c:	cmp	r0, #0
   26a60:	beq	26a78 <__assert_fail@plt+0x14ddc>
   26a64:	cmn	r0, #1
   26a68:	beq	26b24 <__assert_fail@plt+0x14e88>
   26a6c:	cmp	r6, #31
   26a70:	ble	26a94 <__assert_fail@plt+0x14df8>
   26a74:	b	26aa4 <__assert_fail@plt+0x14e08>
   26a78:	ldr	r0, [sp, #20]
   26a7c:	cmp	r0, #0
   26a80:	beq	26a94 <__assert_fail@plt+0x14df8>
   26a84:	ldr	r0, [sp, #16]
   26a88:	cmp	r0, #0
   26a8c:	beq	26aa4 <__assert_fail@plt+0x14e08>
   26a90:	b	26b18 <__assert_fail@plt+0x14e7c>
   26a94:	ldr	r0, [r8]
   26a98:	ldr	r1, [sp, #24]
   26a9c:	and	r0, r0, r1
   26aa0:	str	r0, [r8]
   26aa4:	ldrb	r0, [r8, #4]
   26aa8:	add	r8, r8, #24
   26aac:	cmp	r0, #0
   26ab0:	bne	26a00 <__assert_fail@plt+0x14d64>
   26ab4:	ldr	lr, [sp, #8]
   26ab8:	ldr	ip, [sp, #12]
   26abc:	ldr	r3, [sp, #4]
   26ac0:	ldr	r0, [lr]
   26ac4:	b	26af8 <__assert_fail@plt+0x14e5c>
   26ac8:	ldr	r2, [sp, #16]
   26acc:	cmp	r2, #0
   26ad0:	beq	26af8 <__assert_fail@plt+0x14e5c>
   26ad4:	ldr	r1, [r1, r9, lsl #3]
   26ad8:	cmp	r1, r6
   26adc:	bne	26af8 <__assert_fail@plt+0x14e5c>
   26ae0:	b	26b18 <__assert_fail@plt+0x14e7c>
   26ae4:	cmp	ip, #0
   26ae8:	beq	26af8 <__assert_fail@plt+0x14e5c>
   26aec:	ldr	r1, [r1, r9, lsl #3]
   26af0:	cmp	r1, r6
   26af4:	beq	26b20 <__assert_fail@plt+0x14e84>
   26af8:	add	sl, sl, #1
   26afc:	cmp	sl, r0
   26b00:	blt	269b4 <__assert_fail@plt+0x14d18>
   26b04:	ubfx	r0, r5, #1, #1
   26b08:	b	26b24 <__assert_fail@plt+0x14e88>
   26b0c:	ldr	r0, [sp, #12]
   26b10:	rsb	r0, r0, #0
   26b14:	b	26b24 <__assert_fail@plt+0x14e88>
   26b18:	mov	r0, #0
   26b1c:	b	26b24 <__assert_fail@plt+0x14e88>
   26b20:	mvn	r0, #0
   26b24:	sub	sp, fp, #28
   26b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26b2c:	cmp	r0, #0
   26b30:	bxeq	lr
   26b34:	push	{r4, r5, r6, sl, fp, lr}
   26b38:	add	fp, sp, #16
   26b3c:	ldr	r1, [r0]
   26b40:	mov	r4, r0
   26b44:	ldr	r0, [r0, #8]
   26b48:	cmp	r1, #1
   26b4c:	blt	26b8c <__assert_fail@plt+0x14ef0>
   26b50:	mov	r5, #0
   26b54:	mov	r6, #0
   26b58:	add	r0, r0, r5
   26b5c:	ldr	r0, [r0, #20]
   26b60:	bl	1a12c <__assert_fail@plt+0x8490>
   26b64:	ldr	r0, [r4, #8]
   26b68:	add	r0, r0, r5
   26b6c:	ldr	r0, [r0, #8]
   26b70:	bl	1a12c <__assert_fail@plt+0x8490>
   26b74:	ldr	r1, [r4]
   26b78:	ldr	r0, [r4, #8]
   26b7c:	add	r6, r6, #1
   26b80:	add	r5, r5, #24
   26b84:	cmp	r6, r1
   26b88:	blt	26b58 <__assert_fail@plt+0x14ebc>
   26b8c:	pop	{r4, r5, r6, sl, fp, lr}
   26b90:	b	1a12c <__assert_fail@plt+0x8490>
   26b94:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   26b98:	add	fp, sp, #24
   26b9c:	mov	r4, r0
   26ba0:	mvn	r0, #0
   26ba4:	cmp	r4, #0
   26ba8:	beq	26c48 <__assert_fail@plt+0x14fac>
   26bac:	mov	r5, r2
   26bb0:	ldr	r2, [r4]
   26bb4:	cmp	r2, #0
   26bb8:	beq	26c48 <__assert_fail@plt+0x14fac>
   26bbc:	sub	r0, r2, #1
   26bc0:	ldr	r9, [fp, #12]
   26bc4:	ldr	r8, [fp, #8]
   26bc8:	lsl	r7, r5, #3
   26bcc:	str	r0, [r4]
   26bd0:	add	r6, r0, r0, lsl #1
   26bd4:	ldr	r2, [r4, #8]
   26bd8:	ldr	r0, [r2, r6, lsl #3]!
   26bdc:	str	r0, [r1]
   26be0:	mov	r0, r3
   26be4:	ldr	r1, [r2, #8]
   26be8:	mov	r2, r7
   26bec:	bl	118dc <memcpy@plt>
   26bf0:	ldr	r0, [r4, #8]
   26bf4:	mov	r2, r7
   26bf8:	add	r0, r0, r6, lsl #3
   26bfc:	ldr	r0, [r0, #8]
   26c00:	add	r1, r0, r5, lsl #3
   26c04:	mov	r0, r8
   26c08:	bl	118dc <memcpy@plt>
   26c0c:	ldr	r0, [r9, #8]
   26c10:	bl	1a12c <__assert_fail@plt+0x8490>
   26c14:	ldr	r0, [r4, #8]
   26c18:	add	r0, r0, r6, lsl #3
   26c1c:	ldr	r0, [r0, #8]
   26c20:	bl	1a12c <__assert_fail@plt+0x8490>
   26c24:	ldr	r0, [r4, #8]
   26c28:	add	r0, r0, r6, lsl #3
   26c2c:	vldr	d16, [r0, #12]
   26c30:	ldr	r0, [r0, #20]
   26c34:	str	r0, [r9, #8]
   26c38:	vstr	d16, [r9]
   26c3c:	ldr	r0, [r4, #8]
   26c40:	add	r0, r0, r6, lsl #3
   26c44:	ldr	r0, [r0, #4]
   26c48:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26c4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26c50:	add	fp, sp, #28
   26c54:	sub	sp, sp, #60	; 0x3c
   26c58:	sub	sp, sp, #1024	; 0x400
   26c5c:	mov	sl, r0
   26c60:	ldrb	r0, [r0]
   26c64:	mov	r9, r1
   26c68:	cmp	r0, #0
   26c6c:	beq	26f0c <__assert_fail@plt+0x15270>
   26c70:	mov	r8, #1
   26c74:	mov	r4, #0
   26c78:	str	r9, [sp, #48]	; 0x30
   26c7c:	ldrb	r7, [r9, r4]
   26c80:	cmp	r7, #0
   26c84:	beq	26cf0 <__assert_fail@plt+0x15054>
   26c88:	uxtb	r6, r0
   26c8c:	bl	11a5c <__ctype_b_loc@plt>
   26c90:	ldr	r5, [r0]
   26c94:	add	r0, r5, r6, lsl #1
   26c98:	ldrb	r0, [r0, #1]
   26c9c:	tst	r0, #1
   26ca0:	beq	26cb0 <__assert_fail@plt+0x15014>
   26ca4:	bl	11a38 <__ctype_tolower_loc@plt>
   26ca8:	ldr	r0, [r0]
   26cac:	ldr	r6, [r0, r6, lsl #2]
   26cb0:	add	r0, r5, r7, lsl #1
   26cb4:	ldrb	r0, [r0, #1]
   26cb8:	tst	r0, #1
   26cbc:	beq	26ccc <__assert_fail@plt+0x15030>
   26cc0:	bl	11a38 <__ctype_tolower_loc@plt>
   26cc4:	ldr	r0, [r0]
   26cc8:	ldr	r7, [r0, r7, lsl #2]
   26ccc:	sub	r0, r6, r7
   26cd0:	clz	r0, r0
   26cd4:	lsr	r0, r0, #5
   26cd8:	and	r8, r8, r0
   26cdc:	add	r0, sl, r4
   26ce0:	add	r4, r4, #1
   26ce4:	ldrb	r0, [r0, #1]
   26ce8:	cmp	r0, #0
   26cec:	bne	26c7c <__assert_fail@plt+0x14fe0>
   26cf0:	add	r9, r9, r4
   26cf4:	mov	r4, sl
   26cf8:	ldrb	r0, [r9]
   26cfc:	cmp	r0, #0
   26d00:	movwne	r4, #0
   26d04:	tst	r8, #1
   26d08:	cmpeq	r0, #0
   26d0c:	bne	26f1c <__assert_fail@plt+0x15280>
   26d10:	ldr	r4, [sp, #48]	; 0x30
   26d14:	add	r0, sl, #1
   26d18:	str	r0, [sp, #36]	; 0x24
   26d1c:	sub	r6, r9, r4
   26d20:	cmp	r6, #31
   26d24:	str	r6, [sp, #44]	; 0x2c
   26d28:	bhi	26f28 <__assert_fail@plt+0x1528c>
   26d2c:	add	r2, sp, #52	; 0x34
   26d30:	mov	r0, r4
   26d34:	mov	r1, r6
   26d38:	bl	275d0 <__assert_fail@plt+0x15934>
   26d3c:	ldr	r8, [sp, #52]	; 0x34
   26d40:	mov	r7, r0
   26d44:	mov	r0, r4
   26d48:	mov	r2, r7
   26d4c:	add	r1, r4, r8
   26d50:	bl	11ae0 <strncasecmp@plt>
   26d54:	cmp	r0, #0
   26d58:	beq	271b4 <__assert_fail@plt+0x15518>
   26d5c:	sub	r0, r6, r7
   26d60:	mov	r1, #0
   26d64:	mov	r2, #1
   26d68:	mov	r4, #0
   26d6c:	cmp	r7, r0
   26d70:	movcs	r0, r7
   26d74:	add	r0, r0, #1
   26d78:	str	r0, [sp, #20]
   26d7c:	str	r0, [sp, #52]	; 0x34
   26d80:	add	r0, sl, r6
   26d84:	bl	11b58 <memchr@plt>
   26d88:	cmp	r6, #0
   26d8c:	beq	26f1c <__assert_fail@plt+0x15280>
   26d90:	cmp	r0, #0
   26d94:	str	sl, [sp, #32]
   26d98:	bne	26f1c <__assert_fail@plt+0x15280>
   26d9c:	ldr	r1, [sp, #48]	; 0x30
   26da0:	mov	r5, r6
   26da4:	str	r7, [sp, #28]
   26da8:	add	sl, r7, r1
   26dac:	sub	r0, sl, r9
   26db0:	sub	r9, r1, #1
   26db4:	str	r0, [sp, #40]	; 0x28
   26db8:	ldr	r0, [sp, #32]
   26dbc:	add	r0, r7, r0
   26dc0:	add	r0, r0, #1
   26dc4:	str	r0, [sp, #16]
   26dc8:	mov	r0, #0
   26dcc:	str	r0, [sp, #48]	; 0x30
   26dd0:	cmp	r6, r7
   26dd4:	str	r5, [sp, #24]
   26dd8:	bls	26e4c <__assert_fail@plt+0x151b0>
   26ddc:	ldr	r0, [sp, #16]
   26de0:	ldr	r1, [sp, #48]	; 0x30
   26de4:	add	r4, r0, r1
   26de8:	bl	11a5c <__ctype_b_loc@plt>
   26dec:	ldr	r8, [r0]
   26df0:	mov	r7, #0
   26df4:	ldrb	r6, [sl, -r7]
   26df8:	add	r0, r8, r6, lsl #1
   26dfc:	ldrb	r0, [r0, #1]
   26e00:	tst	r0, #1
   26e04:	beq	26e14 <__assert_fail@plt+0x15178>
   26e08:	bl	11a38 <__ctype_tolower_loc@plt>
   26e0c:	ldr	r0, [r0]
   26e10:	ldr	r6, [r0, r6, lsl #2]
   26e14:	ldrb	r5, [r4, -r7]
   26e18:	add	r0, r8, r5, lsl #1
   26e1c:	ldrb	r0, [r0, #1]
   26e20:	tst	r0, #1
   26e24:	beq	26e34 <__assert_fail@plt+0x15198>
   26e28:	bl	11a38 <__ctype_tolower_loc@plt>
   26e2c:	ldr	r0, [r0]
   26e30:	ldr	r5, [r0, r5, lsl #2]
   26e34:	cmp	r6, r5
   26e38:	bne	26ec0 <__assert_fail@plt+0x15224>
   26e3c:	ldr	r0, [sp, #40]	; 0x28
   26e40:	sub	r7, r7, #1
   26e44:	cmp	r0, r7
   26e48:	bne	26df4 <__assert_fail@plt+0x15158>
   26e4c:	ldr	r0, [sp, #32]
   26e50:	ldr	r1, [sp, #48]	; 0x30
   26e54:	ldr	r7, [sp, #28]
   26e58:	add	r8, r0, r1
   26e5c:	cmp	r7, #0
   26e60:	beq	2759c <__assert_fail@plt+0x15900>
   26e64:	bl	11a5c <__ctype_b_loc@plt>
   26e68:	ldrb	r6, [r9, r7]
   26e6c:	ldr	r5, [r0]
   26e70:	add	r0, r5, r6, lsl #1
   26e74:	ldrb	r0, [r0, #1]
   26e78:	tst	r0, #1
   26e7c:	beq	26e8c <__assert_fail@plt+0x151f0>
   26e80:	bl	11a38 <__ctype_tolower_loc@plt>
   26e84:	ldr	r0, [r0]
   26e88:	ldr	r6, [r0, r6, lsl #2]
   26e8c:	ldrb	r4, [r8, r7]
   26e90:	add	r0, r5, r4, lsl #1
   26e94:	ldrb	r0, [r0, #1]
   26e98:	tst	r0, #1
   26e9c:	beq	26eac <__assert_fail@plt+0x15210>
   26ea0:	bl	11a38 <__ctype_tolower_loc@plt>
   26ea4:	ldr	r0, [r0]
   26ea8:	ldr	r4, [r0, r4, lsl #2]
   26eac:	sub	r7, r7, #1
   26eb0:	cmp	r6, r4
   26eb4:	beq	26e5c <__assert_fail@plt+0x151c0>
   26eb8:	ldr	r1, [sp, #20]
   26ebc:	b	26ec4 <__assert_fail@plt+0x15228>
   26ec0:	rsb	r1, r7, #1
   26ec4:	ldr	r2, [sp, #48]	; 0x30
   26ec8:	ldr	r6, [sp, #44]	; 0x2c
   26ecc:	ldr	r0, [sp, #36]	; 0x24
   26ed0:	ldr	r3, [sp, #24]
   26ed4:	mov	r4, #0
   26ed8:	add	r2, r1, r2
   26edc:	add	r0, r0, r3
   26ee0:	mov	r1, #0
   26ee4:	add	r5, r2, r6
   26ee8:	str	r2, [sp, #48]	; 0x30
   26eec:	sub	r2, r5, r3
   26ef0:	bl	11b58 <memchr@plt>
   26ef4:	ldr	r7, [sp, #28]
   26ef8:	cmp	r0, #0
   26efc:	bne	26f1c <__assert_fail@plt+0x15280>
   26f00:	cmp	r5, #0
   26f04:	bne	26dd0 <__assert_fail@plt+0x15134>
   26f08:	b	26f1c <__assert_fail@plt+0x15280>
   26f0c:	ldrb	r0, [r9]
   26f10:	cmp	r0, #0
   26f14:	movne	sl, #0
   26f18:	mov	r4, sl
   26f1c:	mov	r0, r4
   26f20:	sub	sp, fp, #28
   26f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26f28:	sub	r2, fp, #36	; 0x24
   26f2c:	mov	r0, r4
   26f30:	mov	r1, r6
   26f34:	sub	r8, r6, #1
   26f38:	bl	275d0 <__assert_fail@plt+0x15934>
   26f3c:	vdup.32	q8, r6
   26f40:	str	r0, [sp, #24]
   26f44:	mov	r0, #0
   26f48:	add	r2, sp, #52	; 0x34
   26f4c:	add	r1, r2, r0
   26f50:	add	r0, r0, #16
   26f54:	cmp	r0, #1024	; 0x400
   26f58:	vst1.32	{d16-d17}, [r1]
   26f5c:	bne	26f4c <__assert_fail@plt+0x152b0>
   26f60:	cmp	r6, #0
   26f64:	beq	26fb0 <__assert_fail@plt+0x15314>
   26f68:	bl	11a5c <__ctype_b_loc@plt>
   26f6c:	ldr	r4, [r0]
   26f70:	ldr	r5, [sp, #48]	; 0x30
   26f74:	mov	r7, r8
   26f78:	ldrb	r6, [r5]
   26f7c:	add	r0, r4, r6, lsl #1
   26f80:	ldrb	r0, [r0, #1]
   26f84:	tst	r0, #1
   26f88:	beq	26f98 <__assert_fail@plt+0x152fc>
   26f8c:	bl	11a38 <__ctype_tolower_loc@plt>
   26f90:	ldr	r0, [r0]
   26f94:	ldr	r6, [r0, r6, lsl #2]
   26f98:	add	r0, sp, #52	; 0x34
   26f9c:	add	r5, r5, #1
   26fa0:	str	r7, [r0, r6, lsl #2]
   26fa4:	sub	r7, r7, #1
   26fa8:	cmn	r7, #1
   26fac:	bne	26f78 <__assert_fail@plt+0x152dc>
   26fb0:	ldr	r4, [sp, #24]
   26fb4:	ldr	r5, [fp, #-36]	; 0xffffffdc
   26fb8:	ldr	r0, [sp, #48]	; 0x30
   26fbc:	add	r1, r0, r5
   26fc0:	mov	r2, r4
   26fc4:	bl	11ae0 <strncasecmp@plt>
   26fc8:	cmp	r0, #0
   26fcc:	str	r8, [sp, #20]
   26fd0:	beq	27374 <__assert_fail@plt+0x156d8>
   26fd4:	ldr	r6, [sp, #44]	; 0x2c
   26fd8:	mov	r1, #0
   26fdc:	mov	r2, #1
   26fe0:	sub	r0, r6, r4
   26fe4:	cmp	r4, r0
   26fe8:	movcs	r0, r4
   26fec:	mov	r4, #0
   26ff0:	add	r0, r0, #1
   26ff4:	str	r0, [sp, #16]
   26ff8:	str	r0, [fp, #-36]	; 0xffffffdc
   26ffc:	add	r0, sl, r6
   27000:	bl	11b58 <memchr@plt>
   27004:	cmp	r6, #0
   27008:	beq	26f1c <__assert_fail@plt+0x15280>
   2700c:	cmp	r0, #0
   27010:	str	sl, [sp, #32]
   27014:	bne	26f1c <__assert_fail@plt+0x15280>
   27018:	ldr	r0, [sp, #32]
   2701c:	ldr	r2, [sp, #24]
   27020:	ldr	r1, [sp, #48]	; 0x30
   27024:	add	r0, r2, r0
   27028:	add	r0, r0, #1
   2702c:	str	r0, [sp, #12]
   27030:	add	r0, r2, r1
   27034:	str	r0, [sp, #40]	; 0x28
   27038:	sub	r0, r0, r9
   2703c:	add	r0, r0, #1
   27040:	str	r0, [sp, #28]
   27044:	sub	r0, r1, #1
   27048:	str	r0, [sp, #48]	; 0x30
   2704c:	bl	11a5c <__ctype_b_loc@plt>
   27050:	ldr	r8, [r0]
   27054:	mov	r9, #0
   27058:	mov	sl, r6
   2705c:	ldr	r0, [sp, #32]
   27060:	ldrb	r4, [r0, sl]
   27064:	add	r0, r8, r4, lsl #1
   27068:	ldrb	r0, [r0, #1]
   2706c:	tst	r0, #1
   27070:	beq	27080 <__assert_fail@plt+0x153e4>
   27074:	bl	11a38 <__ctype_tolower_loc@plt>
   27078:	ldr	r0, [r0]
   2707c:	ldr	r4, [r0, r4, lsl #2]
   27080:	add	r0, sp, #52	; 0x34
   27084:	ldr	r1, [r0, r4, lsl #2]
   27088:	cmp	r1, #0
   2708c:	bne	2717c <__assert_fail@plt+0x154e0>
   27090:	ldr	r0, [sp, #20]
   27094:	ldr	r1, [sp, #24]
   27098:	cmp	r1, r0
   2709c:	bcs	27108 <__assert_fail@plt+0x1546c>
   270a0:	ldr	r0, [sp, #12]
   270a4:	mov	r4, #0
   270a8:	add	r7, r0, r9
   270ac:	ldr	r0, [sp, #40]	; 0x28
   270b0:	ldrb	r5, [r0, -r4]
   270b4:	add	r0, r8, r5, lsl #1
   270b8:	ldrb	r0, [r0, #1]
   270bc:	tst	r0, #1
   270c0:	beq	270d0 <__assert_fail@plt+0x15434>
   270c4:	bl	11a38 <__ctype_tolower_loc@plt>
   270c8:	ldr	r0, [r0]
   270cc:	ldr	r5, [r0, r5, lsl #2]
   270d0:	ldrb	r6, [r7, -r4]
   270d4:	add	r0, r8, r6, lsl #1
   270d8:	ldrb	r0, [r0, #1]
   270dc:	tst	r0, #1
   270e0:	beq	270f0 <__assert_fail@plt+0x15454>
   270e4:	bl	11a38 <__ctype_tolower_loc@plt>
   270e8:	ldr	r0, [r0]
   270ec:	ldr	r6, [r0, r6, lsl #2]
   270f0:	cmp	r5, r6
   270f4:	bne	27174 <__assert_fail@plt+0x154d8>
   270f8:	ldr	r0, [sp, #28]
   270fc:	sub	r4, r4, #1
   27100:	cmp	r0, r4
   27104:	bne	270ac <__assert_fail@plt+0x15410>
   27108:	ldr	r0, [sp, #32]
   2710c:	ldr	r7, [sp, #24]
   27110:	add	r4, r0, r9
   27114:	cmp	r7, #0
   27118:	beq	275a8 <__assert_fail@plt+0x1590c>
   2711c:	ldr	r0, [sp, #48]	; 0x30
   27120:	ldrb	r5, [r0, r7]
   27124:	add	r0, r8, r5, lsl #1
   27128:	ldrb	r0, [r0, #1]
   2712c:	tst	r0, #1
   27130:	beq	27140 <__assert_fail@plt+0x154a4>
   27134:	bl	11a38 <__ctype_tolower_loc@plt>
   27138:	ldr	r0, [r0]
   2713c:	ldr	r5, [r0, r5, lsl #2]
   27140:	ldrb	r6, [r4, r7]
   27144:	add	r0, r8, r6, lsl #1
   27148:	ldrb	r0, [r0, #1]
   2714c:	tst	r0, #1
   27150:	beq	27160 <__assert_fail@plt+0x154c4>
   27154:	bl	11a38 <__ctype_tolower_loc@plt>
   27158:	ldr	r0, [r0]
   2715c:	ldr	r6, [r0, r6, lsl #2]
   27160:	sub	r7, r7, #1
   27164:	cmp	r5, r6
   27168:	beq	27114 <__assert_fail@plt+0x15478>
   2716c:	ldr	r1, [sp, #16]
   27170:	b	27178 <__assert_fail@plt+0x154dc>
   27174:	rsb	r1, r4, #1
   27178:	ldr	r6, [sp, #44]	; 0x2c
   2717c:	ldr	r0, [sp, #36]	; 0x24
   27180:	add	r9, r1, r9
   27184:	mov	r1, #0
   27188:	mov	r4, #0
   2718c:	add	r5, r9, r6
   27190:	sub	r2, r5, sl
   27194:	add	r0, r0, sl
   27198:	bl	11b58 <memchr@plt>
   2719c:	cmp	r0, #0
   271a0:	bne	26f1c <__assert_fail@plt+0x15280>
   271a4:	cmp	r5, #0
   271a8:	mov	sl, r5
   271ac:	bne	2705c <__assert_fail@plt+0x153c0>
   271b0:	b	26f1c <__assert_fail@plt+0x15280>
   271b4:	add	r0, sl, r6
   271b8:	mov	r1, #0
   271bc:	mov	r2, #1
   271c0:	mov	r4, #0
   271c4:	bl	11b58 <memchr@plt>
   271c8:	cmp	r6, #0
   271cc:	beq	26f1c <__assert_fail@plt+0x15280>
   271d0:	cmp	r0, #0
   271d4:	str	sl, [sp, #32]
   271d8:	bne	26f1c <__assert_fail@plt+0x15280>
   271dc:	sub	r0, r6, r8
   271e0:	mov	r5, r6
   271e4:	mov	r9, #0
   271e8:	str	r7, [sp, #28]
   271ec:	str	r8, [sp, #20]
   271f0:	str	r0, [sp, #16]
   271f4:	ldr	r0, [sp, #48]	; 0x30
   271f8:	sub	sl, r0, #1
   271fc:	rsb	r0, r7, #1
   27200:	str	r0, [sp, #12]
   27204:	mov	r0, #0
   27208:	str	r0, [sp, #40]	; 0x28
   2720c:	cmp	r7, r9
   27210:	mov	r4, r7
   27214:	str	r5, [sp, #24]
   27218:	movcc	r4, r9
   2721c:	cmp	r4, r6
   27220:	bcs	27294 <__assert_fail@plt+0x155f8>
   27224:	ldr	r0, [sp, #36]	; 0x24
   27228:	ldr	r1, [sp, #40]	; 0x28
   2722c:	add	r8, r0, r1
   27230:	bl	11a5c <__ctype_b_loc@plt>
   27234:	ldr	r7, [r0]
   27238:	ldr	r0, [sp, #48]	; 0x30
   2723c:	ldrb	r6, [r0, r4]
   27240:	add	r0, r7, r6, lsl #1
   27244:	ldrb	r0, [r0, #1]
   27248:	tst	r0, #1
   2724c:	beq	2725c <__assert_fail@plt+0x155c0>
   27250:	bl	11a38 <__ctype_tolower_loc@plt>
   27254:	ldr	r0, [r0]
   27258:	ldr	r6, [r0, r6, lsl #2]
   2725c:	ldrb	r5, [r8, r4]
   27260:	add	r0, r7, r5, lsl #1
   27264:	ldrb	r0, [r0, #1]
   27268:	tst	r0, #1
   2726c:	beq	2727c <__assert_fail@plt+0x155e0>
   27270:	bl	11a38 <__ctype_tolower_loc@plt>
   27274:	ldr	r0, [r0]
   27278:	ldr	r5, [r0, r5, lsl #2]
   2727c:	cmp	r6, r5
   27280:	bne	27320 <__assert_fail@plt+0x15684>
   27284:	ldr	r0, [sp, #44]	; 0x2c
   27288:	add	r4, r4, #1
   2728c:	cmp	r4, r0
   27290:	bcc	27238 <__assert_fail@plt+0x1559c>
   27294:	ldr	r0, [sp, #32]
   27298:	ldr	r1, [sp, #40]	; 0x28
   2729c:	add	r8, r0, r1
   272a0:	ldr	r0, [sp, #28]
   272a4:	mov	r7, r0
   272a8:	cmp	r9, r0
   272ac:	bcs	27304 <__assert_fail@plt+0x15668>
   272b0:	bl	11a5c <__ctype_b_loc@plt>
   272b4:	ldrb	r6, [sl, r7]
   272b8:	ldr	r5, [r0]
   272bc:	add	r0, r5, r6, lsl #1
   272c0:	ldrb	r0, [r0, #1]
   272c4:	tst	r0, #1
   272c8:	beq	272d8 <__assert_fail@plt+0x1563c>
   272cc:	bl	11a38 <__ctype_tolower_loc@plt>
   272d0:	ldr	r0, [r0]
   272d4:	ldr	r6, [r0, r6, lsl #2]
   272d8:	ldrb	r4, [r8, r7]
   272dc:	add	r0, r5, r4, lsl #1
   272e0:	ldrb	r0, [r0, #1]
   272e4:	tst	r0, #1
   272e8:	beq	272f8 <__assert_fail@plt+0x1565c>
   272ec:	bl	11a38 <__ctype_tolower_loc@plt>
   272f0:	ldr	r0, [r0]
   272f4:	ldr	r4, [r0, r4, lsl #2]
   272f8:	sub	r0, r7, #1
   272fc:	cmp	r6, r4
   27300:	beq	272a4 <__assert_fail@plt+0x15608>
   27304:	ldr	r8, [sp, #20]
   27308:	add	r0, r9, #1
   2730c:	ldr	r9, [sp, #16]
   27310:	cmp	r7, r0
   27314:	mov	r1, r8
   27318:	bcs	2732c <__assert_fail@plt+0x15690>
   2731c:	b	275b4 <__assert_fail@plt+0x15918>
   27320:	ldr	r0, [sp, #12]
   27324:	mov	r9, #0
   27328:	add	r1, r0, r4
   2732c:	ldr	r2, [sp, #40]	; 0x28
   27330:	ldr	r6, [sp, #44]	; 0x2c
   27334:	ldr	r0, [sp, #36]	; 0x24
   27338:	ldr	r3, [sp, #24]
   2733c:	mov	r4, #0
   27340:	add	r2, r1, r2
   27344:	add	r0, r0, r3
   27348:	mov	r1, #0
   2734c:	add	r5, r2, r6
   27350:	str	r2, [sp, #40]	; 0x28
   27354:	sub	r2, r5, r3
   27358:	bl	11b58 <memchr@plt>
   2735c:	cmp	r0, #0
   27360:	bne	26f1c <__assert_fail@plt+0x15280>
   27364:	ldr	r7, [sp, #28]
   27368:	cmp	r5, #0
   2736c:	bne	2720c <__assert_fail@plt+0x15570>
   27370:	b	26f1c <__assert_fail@plt+0x15280>
   27374:	ldr	r6, [sp, #44]	; 0x2c
   27378:	mov	r1, #0
   2737c:	mov	r2, #1
   27380:	str	r5, [sp, #8]
   27384:	mov	r4, #0
   27388:	add	r0, sl, r6
   2738c:	bl	11b58 <memchr@plt>
   27390:	cmp	r6, #0
   27394:	beq	26f1c <__assert_fail@plt+0x15280>
   27398:	ldr	r8, [sp, #8]
   2739c:	cmp	r0, #0
   273a0:	str	sl, [sp, #32]
   273a4:	bne	26f1c <__assert_fail@plt+0x15280>
   273a8:	sub	r0, r6, r8
   273ac:	str	r0, [sp, #16]
   273b0:	ldr	r0, [sp, #48]	; 0x30
   273b4:	sub	r0, r0, #1
   273b8:	str	r0, [sp, #40]	; 0x28
   273bc:	ldr	r0, [sp, #24]
   273c0:	rsb	r0, r0, #1
   273c4:	str	r0, [sp, #4]
   273c8:	bl	11a5c <__ctype_b_loc@plt>
   273cc:	ldr	r9, [r0]
   273d0:	mov	r0, #0
   273d4:	mov	r5, r6
   273d8:	mov	sl, #0
   273dc:	str	r0, [sp, #28]
   273e0:	ldr	r0, [sp, #32]
   273e4:	ldrb	r4, [r0, r5]
   273e8:	add	r0, r9, r4, lsl #1
   273ec:	ldrb	r0, [r0, #1]
   273f0:	tst	r0, #1
   273f4:	beq	27404 <__assert_fail@plt+0x15768>
   273f8:	bl	11a38 <__ctype_tolower_loc@plt>
   273fc:	ldr	r0, [r0]
   27400:	ldr	r4, [r0, r4, lsl #2]
   27404:	add	r0, sp, #52	; 0x34
   27408:	ldr	r7, [sp, #20]
   2740c:	ldr	r0, [r0, r4, lsl #2]
   27410:	cmp	r0, #0
   27414:	beq	27438 <__assert_fail@plt+0x1579c>
   27418:	ldr	r2, [sp, #16]
   2741c:	cmp	r0, r8
   27420:	mov	r1, r0
   27424:	movcc	r1, r2
   27428:	cmp	sl, #0
   2742c:	mov	sl, #0
   27430:	moveq	r1, r0
   27434:	b	2755c <__assert_fail@plt+0x158c0>
   27438:	ldr	r4, [sp, #24]
   2743c:	str	r5, [sp, #12]
   27440:	cmp	r4, sl
   27444:	movcc	r4, sl
   27448:	cmp	r4, r7
   2744c:	bcs	274b4 <__assert_fail@plt+0x15818>
   27450:	ldr	r0, [sp, #36]	; 0x24
   27454:	ldr	r1, [sp, #28]
   27458:	add	r8, r0, r1
   2745c:	ldr	r0, [sp, #48]	; 0x30
   27460:	ldrb	r6, [r0, r4]
   27464:	add	r0, r9, r6, lsl #1
   27468:	ldrb	r0, [r0, #1]
   2746c:	tst	r0, #1
   27470:	beq	27480 <__assert_fail@plt+0x157e4>
   27474:	bl	11a38 <__ctype_tolower_loc@plt>
   27478:	ldr	r0, [r0]
   2747c:	ldr	r6, [r0, r6, lsl #2]
   27480:	ldrb	r5, [r8, r4]
   27484:	add	r0, r9, r5, lsl #1
   27488:	ldrb	r0, [r0, #1]
   2748c:	tst	r0, #1
   27490:	beq	274a0 <__assert_fail@plt+0x15804>
   27494:	bl	11a38 <__ctype_tolower_loc@plt>
   27498:	ldr	r0, [r0]
   2749c:	ldr	r5, [r0, r5, lsl #2]
   274a0:	cmp	r6, r5
   274a4:	bne	27544 <__assert_fail@plt+0x158a8>
   274a8:	add	r4, r4, #1
   274ac:	cmp	r4, r7
   274b0:	bcc	2745c <__assert_fail@plt+0x157c0>
   274b4:	ldr	r0, [sp, #32]
   274b8:	ldr	r1, [sp, #28]
   274bc:	ldr	r5, [sp, #12]
   274c0:	add	r4, r0, r1
   274c4:	ldr	r0, [sp, #24]
   274c8:	mov	r7, r0
   274cc:	cmp	sl, r0
   274d0:	bcs	27524 <__assert_fail@plt+0x15888>
   274d4:	ldr	r0, [sp, #40]	; 0x28
   274d8:	ldrb	r8, [r0, r7]
   274dc:	add	r0, r9, r8, lsl #1
   274e0:	ldrb	r0, [r0, #1]
   274e4:	tst	r0, #1
   274e8:	beq	274f8 <__assert_fail@plt+0x1585c>
   274ec:	bl	11a38 <__ctype_tolower_loc@plt>
   274f0:	ldr	r0, [r0]
   274f4:	ldr	r8, [r0, r8, lsl #2]
   274f8:	ldrb	r6, [r4, r7]
   274fc:	add	r0, r9, r6, lsl #1
   27500:	ldrb	r0, [r0, #1]
   27504:	tst	r0, #1
   27508:	beq	27518 <__assert_fail@plt+0x1587c>
   2750c:	bl	11a38 <__ctype_tolower_loc@plt>
   27510:	ldr	r0, [r0]
   27514:	ldr	r6, [r0, r6, lsl #2]
   27518:	sub	r0, r7, #1
   2751c:	cmp	r8, r6
   27520:	beq	274c8 <__assert_fail@plt+0x1582c>
   27524:	ldr	r8, [sp, #8]
   27528:	add	r0, sl, #1
   2752c:	ldr	sl, [sp, #16]
   27530:	ldr	r6, [sp, #44]	; 0x2c
   27534:	cmp	r7, r0
   27538:	mov	r1, r8
   2753c:	bcs	2755c <__assert_fail@plt+0x158c0>
   27540:	b	275c0 <__assert_fail@plt+0x15924>
   27544:	ldr	r0, [sp, #4]
   27548:	ldr	r6, [sp, #44]	; 0x2c
   2754c:	ldr	r8, [sp, #8]
   27550:	ldr	r5, [sp, #12]
   27554:	mov	sl, #0
   27558:	add	r1, r0, r4
   2755c:	ldr	r2, [sp, #28]
   27560:	ldr	r0, [sp, #36]	; 0x24
   27564:	mov	r4, #0
   27568:	add	r2, r1, r2
   2756c:	add	r0, r0, r5
   27570:	mov	r1, r5
   27574:	add	r5, r2, r6
   27578:	str	r2, [sp, #28]
   2757c:	sub	r2, r5, r1
   27580:	mov	r1, #0
   27584:	bl	11b58 <memchr@plt>
   27588:	cmp	r0, #0
   2758c:	bne	26f1c <__assert_fail@plt+0x15280>
   27590:	cmp	r5, #0
   27594:	bne	273e0 <__assert_fail@plt+0x15744>
   27598:	b	26f1c <__assert_fail@plt+0x15280>
   2759c:	ldr	r0, [sp, #36]	; 0x24
   275a0:	ldr	r1, [sp, #48]	; 0x30
   275a4:	b	275c8 <__assert_fail@plt+0x1592c>
   275a8:	ldr	r0, [sp, #36]	; 0x24
   275ac:	add	r4, r0, r9
   275b0:	b	26f1c <__assert_fail@plt+0x15280>
   275b4:	ldr	r0, [sp, #36]	; 0x24
   275b8:	ldr	r1, [sp, #40]	; 0x28
   275bc:	b	275c8 <__assert_fail@plt+0x1592c>
   275c0:	ldr	r0, [sp, #36]	; 0x24
   275c4:	ldr	r1, [sp, #28]
   275c8:	add	r4, r0, r1
   275cc:	b	26f1c <__assert_fail@plt+0x15280>
   275d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   275d4:	add	fp, sp, #28
   275d8:	sub	sp, sp, #20
   275dc:	mov	r6, r1
   275e0:	cmp	r1, #3
   275e4:	str	r0, [sp, #16]
   275e8:	bcs	275fc <__assert_fail@plt+0x15960>
   275ec:	mov	r0, #1
   275f0:	str	r0, [r2]
   275f4:	sub	r0, r6, #1
   275f8:	b	27820 <__assert_fail@plt+0x15b84>
   275fc:	str	r2, [sp]
   27600:	bl	11a5c <__ctype_b_loc@plt>
   27604:	ldr	r2, [r0]
   27608:	mov	r0, #0
   2760c:	mvn	r4, #0
   27610:	mov	r7, #1
   27614:	mov	r5, #1
   27618:	mov	r1, #1
   2761c:	str	r6, [sp, #12]
   27620:	str	r2, [sp, #4]
   27624:	mov	r6, r0
   27628:	ldr	r0, [sp, #16]
   2762c:	str	r1, [sp, #8]
   27630:	ldrb	r8, [r0, r7]
   27634:	add	r0, r2, r8, lsl #1
   27638:	ldrb	r0, [r0, #1]
   2763c:	tst	r0, #1
   27640:	beq	27654 <__assert_fail@plt+0x159b8>
   27644:	bl	11a38 <__ctype_tolower_loc@plt>
   27648:	ldr	r0, [r0]
   2764c:	ldr	r2, [sp, #4]
   27650:	ldrb	r8, [r0, r8, lsl #2]
   27654:	ldr	r1, [sp, #16]
   27658:	add	r0, r4, r5
   2765c:	mov	r9, r4
   27660:	ldrb	sl, [r1, r0]
   27664:	add	r0, r2, sl, lsl #1
   27668:	ldrb	r0, [r0, #1]
   2766c:	tst	r0, #1
   27670:	beq	27684 <__assert_fail@plt+0x159e8>
   27674:	bl	11a38 <__ctype_tolower_loc@plt>
   27678:	ldr	r0, [r0]
   2767c:	ldr	r2, [sp, #4]
   27680:	ldrb	sl, [r0, sl, lsl #2]
   27684:	cmp	r8, sl
   27688:	bcs	276a0 <__assert_fail@plt+0x15a04>
   2768c:	mov	r4, r9
   27690:	sub	r1, r7, r9
   27694:	mov	r5, #1
   27698:	mov	r0, r7
   2769c:	b	276d0 <__assert_fail@plt+0x15a34>
   276a0:	bne	276c0 <__assert_fail@plt+0x15a24>
   276a4:	ldr	r1, [sp, #8]
   276a8:	cmp	r5, r1
   276ac:	bne	276d8 <__assert_fail@plt+0x15a3c>
   276b0:	add	r0, r6, r5
   276b4:	mov	r1, r5
   276b8:	mov	r5, #1
   276bc:	b	276e0 <__assert_fail@plt+0x15a44>
   276c0:	add	r0, r6, #1
   276c4:	mov	r1, #1
   276c8:	mov	r5, #1
   276cc:	mov	r4, r6
   276d0:	ldr	r6, [sp, #12]
   276d4:	b	276e8 <__assert_fail@plt+0x15a4c>
   276d8:	add	r5, r5, #1
   276dc:	mov	r0, r6
   276e0:	ldr	r6, [sp, #12]
   276e4:	mov	r4, r9
   276e8:	add	r7, r0, r5
   276ec:	cmp	r7, r6
   276f0:	bcc	27624 <__assert_fail@plt+0x15988>
   276f4:	ldr	r0, [sp]
   276f8:	cmp	r6, #2
   276fc:	str	r4, [sp, #4]
   27700:	str	r1, [r0]
   27704:	bcc	277f8 <__assert_fail@plt+0x15b5c>
   27708:	bl	11a5c <__ctype_b_loc@plt>
   2770c:	ldr	r3, [r0]
   27710:	mov	r0, #0
   27714:	mvn	r5, #0
   27718:	mov	r7, #1
   2771c:	mov	sl, #1
   27720:	mov	r9, #1
   27724:	str	r3, [sp, #8]
   27728:	mov	r4, r0
   2772c:	ldr	r0, [sp, #16]
   27730:	ldrb	r6, [r0, r7]
   27734:	add	r0, r3, r6, lsl #1
   27738:	ldrb	r0, [r0, #1]
   2773c:	tst	r0, #1
   27740:	beq	27754 <__assert_fail@plt+0x15ab8>
   27744:	bl	11a38 <__ctype_tolower_loc@plt>
   27748:	ldr	r0, [r0]
   2774c:	ldr	r3, [sp, #8]
   27750:	ldrb	r6, [r0, r6, lsl #2]
   27754:	ldr	r1, [sp, #16]
   27758:	add	r0, r5, sl
   2775c:	mov	r8, r5
   27760:	ldrb	r5, [r1, r0]
   27764:	add	r0, r3, r5, lsl #1
   27768:	ldrb	r0, [r0, #1]
   2776c:	tst	r0, #1
   27770:	beq	27784 <__assert_fail@plt+0x15ae8>
   27774:	bl	11a38 <__ctype_tolower_loc@plt>
   27778:	ldr	r0, [r0]
   2777c:	ldr	r3, [sp, #8]
   27780:	ldrb	r5, [r0, r5, lsl #2]
   27784:	cmp	r5, r6
   27788:	bcs	277a0 <__assert_fail@plt+0x15b04>
   2778c:	mov	r5, r8
   27790:	sub	r9, r7, r8
   27794:	mov	sl, #1
   27798:	mov	r0, r7
   2779c:	b	277d0 <__assert_fail@plt+0x15b34>
   277a0:	cmp	r6, r5
   277a4:	bne	277c0 <__assert_fail@plt+0x15b24>
   277a8:	cmp	sl, r9
   277ac:	bne	277d8 <__assert_fail@plt+0x15b3c>
   277b0:	add	r0, r4, sl
   277b4:	mov	r9, sl
   277b8:	mov	sl, #1
   277bc:	b	277e0 <__assert_fail@plt+0x15b44>
   277c0:	add	r0, r4, #1
   277c4:	mov	r9, #1
   277c8:	mov	sl, #1
   277cc:	mov	r5, r4
   277d0:	ldr	r1, [sp, #12]
   277d4:	b	277e8 <__assert_fail@plt+0x15b4c>
   277d8:	add	sl, sl, #1
   277dc:	mov	r0, r4
   277e0:	ldr	r1, [sp, #12]
   277e4:	mov	r5, r8
   277e8:	add	r7, r0, sl
   277ec:	cmp	r7, r1
   277f0:	bcc	27728 <__assert_fail@plt+0x15a8c>
   277f4:	b	27800 <__assert_fail@plt+0x15b64>
   277f8:	mvn	r5, #0
   277fc:	mov	r9, #1
   27800:	ldr	r0, [sp, #4]
   27804:	add	r1, r5, #1
   27808:	add	r0, r0, #1
   2780c:	cmp	r1, r0
   27810:	bcc	27820 <__assert_fail@plt+0x15b84>
   27814:	ldr	r0, [sp]
   27818:	str	r9, [r0]
   2781c:	mov	r0, r1
   27820:	sub	sp, fp, #28
   27824:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2782c:	add	fp, sp, #28
   27830:	sub	sp, sp, #36	; 0x24
   27834:	sub	sp, sp, #1024	; 0x400
   27838:	ldrb	r2, [r0]
   2783c:	mov	r7, r1
   27840:	mov	r6, r0
   27844:	cmp	r2, #0
   27848:	beq	27a2c <__assert_fail@plt+0x15d90>
   2784c:	mov	r0, #1
   27850:	mov	r1, #0
   27854:	ldrb	r3, [r7, r1]
   27858:	cmp	r3, #0
   2785c:	uxtbne	r2, r2
   27860:	subne	r2, r2, r3
   27864:	clzne	r2, r2
   27868:	lsrne	r2, r2, #5
   2786c:	andne	r0, r0, r2
   27870:	addne	r2, r6, r1
   27874:	addne	r1, r1, #1
   27878:	ldrbne	r2, [r2, #1]
   2787c:	cmpne	r2, #0
   27880:	bne	27854 <__assert_fail@plt+0x15bb8>
   27884:	add	r8, r7, r1
   27888:	mov	r5, r6
   2788c:	ldrb	r1, [r8]
   27890:	cmp	r1, #0
   27894:	movwne	r5, #0
   27898:	tst	r0, #1
   2789c:	cmpeq	r1, #0
   278a0:	bne	27a3c <__assert_fail@plt+0x15da0>
   278a4:	ldrb	r1, [r7]
   278a8:	add	r0, r6, #1
   278ac:	sub	r4, r8, r7
   278b0:	bl	11aa4 <strchr@plt>
   278b4:	cmp	r4, #1
   278b8:	beq	27a48 <__assert_fail@plt+0x15dac>
   278bc:	cmp	r0, #0
   278c0:	mov	r5, r0
   278c4:	beq	27a3c <__assert_fail@plt+0x15da0>
   278c8:	add	r2, r6, r4
   278cc:	mov	r1, r4
   278d0:	sub	r6, r8, r4
   278d4:	str	r0, [sp, #24]
   278d8:	str	r4, [sp, #20]
   278dc:	subs	r5, r2, r0
   278e0:	movwcc	r5, #1
   278e4:	cmp	r4, #31
   278e8:	bhi	27a50 <__assert_fail@plt+0x15db4>
   278ec:	add	r2, sp, #28
   278f0:	mov	r0, r6
   278f4:	mov	r4, r1
   278f8:	bl	27e74 <__assert_fail@plt+0x161d8>
   278fc:	ldr	r9, [sp, #28]
   27900:	mov	sl, r0
   27904:	mov	r0, r6
   27908:	mov	r2, sl
   2790c:	add	r1, r6, r9
   27910:	bl	11a80 <bcmp@plt>
   27914:	cmp	r0, #0
   27918:	beq	27bf8 <__assert_fail@plt+0x15f5c>
   2791c:	sub	r0, r4, sl
   27920:	sub	r2, r4, r5
   27924:	mov	r1, #0
   27928:	cmp	sl, r0
   2792c:	movcs	r0, sl
   27930:	add	r0, r0, #1
   27934:	str	r0, [sp, #12]
   27938:	str	r0, [sp, #28]
   2793c:	ldr	r0, [sp, #24]
   27940:	add	r0, r0, r5
   27944:	mov	r5, #0
   27948:	bl	11b58 <memchr@plt>
   2794c:	cmp	r4, #0
   27950:	beq	27a3c <__assert_fail@plt+0x15da0>
   27954:	ldr	lr, [sp, #24]
   27958:	cmp	r0, #0
   2795c:	bne	27a3c <__assert_fail@plt+0x15da0>
   27960:	add	r0, lr, sl
   27964:	mov	r1, r4
   27968:	add	r9, sl, r7
   2796c:	mov	r4, #0
   27970:	str	r0, [sp, #4]
   27974:	sub	r0, r8, sl
   27978:	mov	ip, r1
   2797c:	sub	r7, r0, r7
   27980:	rsb	r0, sl, #1
   27984:	str	r0, [sp, #8]
   27988:	cmp	r1, sl
   2798c:	bls	279b8 <__assert_fail@plt+0x15d1c>
   27990:	ldr	r0, [sp, #4]
   27994:	add	r2, r0, r4
   27998:	mov	r0, #0
   2799c:	ldrb	r3, [r2, r0]
   279a0:	ldrb	r5, [r9, r0]
   279a4:	cmp	r5, r3
   279a8:	bne	279e4 <__assert_fail@plt+0x15d48>
   279ac:	add	r0, r0, #1
   279b0:	cmp	r7, r0
   279b4:	bne	2799c <__assert_fail@plt+0x15d00>
   279b8:	ldr	r0, [sp, #8]
   279bc:	add	r5, lr, r4
   279c0:	cmp	r0, #1
   279c4:	beq	27a3c <__assert_fail@plt+0x15da0>
   279c8:	ldrb	r2, [r5, -r0]
   279cc:	ldrb	r3, [r6, -r0]
   279d0:	add	r0, r0, #1
   279d4:	cmp	r3, r2
   279d8:	beq	279c0 <__assert_fail@plt+0x15d24>
   279dc:	ldr	r2, [sp, #12]
   279e0:	b	279e8 <__assert_fail@plt+0x15d4c>
   279e4:	add	r2, r0, #1
   279e8:	add	r4, r2, r4
   279ec:	add	r0, lr, ip
   279f0:	mov	r5, #0
   279f4:	add	r8, r4, r1
   279f8:	mov	r1, #0
   279fc:	str	r4, [sp, #16]
   27a00:	sub	r2, r8, ip
   27a04:	bl	11b58 <memchr@plt>
   27a08:	cmp	r0, #0
   27a0c:	bne	27a3c <__assert_fail@plt+0x15da0>
   27a10:	ldr	lr, [sp, #24]
   27a14:	ldr	r1, [sp, #20]
   27a18:	ldr	r4, [sp, #16]
   27a1c:	cmp	r8, #0
   27a20:	mov	ip, r8
   27a24:	bne	27988 <__assert_fail@plt+0x15cec>
   27a28:	b	27a3c <__assert_fail@plt+0x15da0>
   27a2c:	ldrb	r0, [r7]
   27a30:	cmp	r0, #0
   27a34:	movne	r6, #0
   27a38:	mov	r5, r6
   27a3c:	mov	r0, r5
   27a40:	sub	sp, fp, #28
   27a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27a48:	mov	r5, r0
   27a4c:	b	27a3c <__assert_fail@plt+0x15da0>
   27a50:	sub	r2, fp, #36	; 0x24
   27a54:	mov	r0, r6
   27a58:	bl	27e74 <__assert_fail@plt+0x161d8>
   27a5c:	ldr	r2, [sp, #20]
   27a60:	mov	r4, r0
   27a64:	mov	r0, #0
   27a68:	add	r3, sp, #28
   27a6c:	vdup.32	q8, r2
   27a70:	add	r1, r3, r0
   27a74:	add	r0, r0, #16
   27a78:	cmp	r0, #1024	; 0x400
   27a7c:	vst1.32	{d16-d17}, [r1]
   27a80:	bne	27a70 <__assert_fail@plt+0x15dd4>
   27a84:	cmp	r2, #0
   27a88:	beq	27aa0 <__assert_fail@plt+0x15e04>
   27a8c:	mov	r0, r2
   27a90:	ldrb	r1, [r8, -r0]
   27a94:	subs	r0, r0, #1
   27a98:	str	r0, [r3, r1, lsl #2]
   27a9c:	bne	27a90 <__assert_fail@plt+0x15df4>
   27aa0:	ldr	r9, [fp, #-36]	; 0xffffffdc
   27aa4:	mov	r0, r6
   27aa8:	mov	r2, r4
   27aac:	add	r1, r6, r9
   27ab0:	bl	11a80 <bcmp@plt>
   27ab4:	cmp	r0, #0
   27ab8:	str	r4, [sp, #8]
   27abc:	beq	27d10 <__assert_fail@plt+0x16074>
   27ac0:	ldr	r9, [sp, #20]
   27ac4:	mov	r1, #0
   27ac8:	sub	r0, r9, r4
   27acc:	sub	r2, r9, r5
   27ad0:	cmp	r4, r0
   27ad4:	movcs	r0, r4
   27ad8:	add	r0, r0, #1
   27adc:	str	r0, [sp, #12]
   27ae0:	str	r0, [fp, #-36]	; 0xffffffdc
   27ae4:	ldr	r0, [sp, #24]
   27ae8:	add	r0, r0, r5
   27aec:	mov	r5, #0
   27af0:	bl	11b58 <memchr@plt>
   27af4:	cmp	r9, #0
   27af8:	beq	27a3c <__assert_fail@plt+0x15da0>
   27afc:	ldr	r4, [sp, #24]
   27b00:	cmp	r0, #0
   27b04:	bne	27a3c <__assert_fail@plt+0x15da0>
   27b08:	ldr	r1, [sp, #8]
   27b0c:	mov	ip, r9
   27b10:	add	r0, r4, r1
   27b14:	add	sl, r1, r7
   27b18:	str	r0, [sp]
   27b1c:	sub	r0, sl, r8
   27b20:	add	r8, r0, #1
   27b24:	rsb	r0, r1, #1
   27b28:	mov	r1, ip
   27b2c:	str	r0, [sp, #4]
   27b30:	sub	r0, r9, #1
   27b34:	mov	r9, #0
   27b38:	str	r0, [sp, #16]
   27b3c:	add	r0, r1, r4
   27b40:	add	r3, sp, #28
   27b44:	ldrb	r2, [r0, #-1]
   27b48:	ldr	r2, [r3, r2, lsl #2]
   27b4c:	cmp	r2, #0
   27b50:	beq	27b8c <__assert_fail@plt+0x15ef0>
   27b54:	add	r9, r2, r9
   27b58:	mov	r5, #0
   27b5c:	add	r7, r9, ip
   27b60:	sub	r2, r7, r1
   27b64:	mov	r1, #0
   27b68:	bl	11b58 <memchr@plt>
   27b6c:	cmp	r0, #0
   27b70:	bne	27a3c <__assert_fail@plt+0x15da0>
   27b74:	ldr	r4, [sp, #24]
   27b78:	ldr	ip, [sp, #20]
   27b7c:	cmp	r7, #0
   27b80:	mov	r1, r7
   27b84:	bne	27b3c <__assert_fail@plt+0x15ea0>
   27b88:	b	27a3c <__assert_fail@plt+0x15da0>
   27b8c:	ldr	r2, [sp, #8]
   27b90:	ldr	r3, [sp, #16]
   27b94:	cmp	r2, r3
   27b98:	bcs	27bc4 <__assert_fail@plt+0x15f28>
   27b9c:	ldr	r2, [sp]
   27ba0:	add	r3, r2, r9
   27ba4:	mov	r2, #0
   27ba8:	ldrb	r7, [r3, -r2]
   27bac:	ldrb	r5, [sl, -r2]
   27bb0:	cmp	r5, r7
   27bb4:	bne	27bf0 <__assert_fail@plt+0x15f54>
   27bb8:	sub	r2, r2, #1
   27bbc:	cmp	r8, r2
   27bc0:	bne	27ba8 <__assert_fail@plt+0x15f0c>
   27bc4:	ldr	r2, [sp, #4]
   27bc8:	add	r5, r4, r9
   27bcc:	cmp	r2, #1
   27bd0:	beq	27a3c <__assert_fail@plt+0x15da0>
   27bd4:	ldrb	r3, [r5, -r2]
   27bd8:	ldrb	r7, [r6, -r2]
   27bdc:	add	r2, r2, #1
   27be0:	cmp	r7, r3
   27be4:	beq	27bcc <__assert_fail@plt+0x15f30>
   27be8:	ldr	r2, [sp, #12]
   27bec:	b	27b54 <__assert_fail@plt+0x15eb8>
   27bf0:	rsb	r2, r2, #1
   27bf4:	b	27b54 <__assert_fail@plt+0x15eb8>
   27bf8:	ldr	r0, [sp, #24]
   27bfc:	sub	r2, r4, r5
   27c00:	mov	r1, #0
   27c04:	add	r0, r0, r5
   27c08:	mov	r5, #0
   27c0c:	bl	11b58 <memchr@plt>
   27c10:	cmp	r4, #0
   27c14:	beq	27a3c <__assert_fail@plt+0x15da0>
   27c18:	mov	r1, r4
   27c1c:	ldr	r4, [sp, #24]
   27c20:	cmp	r0, #0
   27c24:	str	r9, [sp, #16]
   27c28:	bne	27a3c <__assert_fail@plt+0x15da0>
   27c2c:	ldr	r0, [sp, #16]
   27c30:	mov	r8, #0
   27c34:	mov	ip, r1
   27c38:	mov	r9, #0
   27c3c:	sub	r0, r1, r0
   27c40:	str	r0, [sp, #12]
   27c44:	sub	r0, sl, #1
   27c48:	str	r0, [sp, #8]
   27c4c:	rsb	r0, sl, #1
   27c50:	str	r0, [sp, #4]
   27c54:	cmp	sl, r8
   27c58:	mov	r0, sl
   27c5c:	movcc	r0, r8
   27c60:	cmp	r0, r1
   27c64:	bcs	27c88 <__assert_fail@plt+0x15fec>
   27c68:	add	r2, r4, r9
   27c6c:	ldrb	r3, [r2, r0]
   27c70:	ldrb	r7, [r6, r0]
   27c74:	cmp	r7, r3
   27c78:	bne	27cc8 <__assert_fail@plt+0x1602c>
   27c7c:	add	r0, r0, #1
   27c80:	cmp	r0, r1
   27c84:	bcc	27c6c <__assert_fail@plt+0x15fd0>
   27c88:	ldr	r0, [sp, #8]
   27c8c:	add	r5, r4, r9
   27c90:	add	r2, r0, #1
   27c94:	cmp	r8, r2
   27c98:	bcs	27cb0 <__assert_fail@plt+0x16014>
   27c9c:	ldrb	r3, [r5, r0]
   27ca0:	ldrb	r7, [r6, r0]
   27ca4:	sub	r0, r0, #1
   27ca8:	cmp	r7, r3
   27cac:	beq	27c90 <__assert_fail@plt+0x15ff4>
   27cb0:	add	r0, r8, #1
   27cb4:	ldr	r8, [sp, #12]
   27cb8:	cmp	r2, r0
   27cbc:	ldr	r2, [sp, #16]
   27cc0:	bcs	27cd4 <__assert_fail@plt+0x16038>
   27cc4:	b	27a3c <__assert_fail@plt+0x15da0>
   27cc8:	ldr	r2, [sp, #4]
   27ccc:	mov	r8, #0
   27cd0:	add	r2, r2, r0
   27cd4:	add	r9, r2, r9
   27cd8:	add	r0, r4, ip
   27cdc:	mov	r5, #0
   27ce0:	add	r7, r9, r1
   27ce4:	mov	r1, #0
   27ce8:	sub	r2, r7, ip
   27cec:	bl	11b58 <memchr@plt>
   27cf0:	cmp	r7, #0
   27cf4:	beq	27a3c <__assert_fail@plt+0x15da0>
   27cf8:	ldr	r4, [sp, #24]
   27cfc:	ldr	r1, [sp, #20]
   27d00:	cmp	r0, #0
   27d04:	mov	ip, r7
   27d08:	beq	27c54 <__assert_fail@plt+0x15fb8>
   27d0c:	b	27a3c <__assert_fail@plt+0x15da0>
   27d10:	ldr	r0, [sp, #24]
   27d14:	ldr	r4, [sp, #20]
   27d18:	mov	r1, #0
   27d1c:	add	r0, r0, r5
   27d20:	sub	r2, r4, r5
   27d24:	mov	r5, #0
   27d28:	bl	11b58 <memchr@plt>
   27d2c:	cmp	r4, #0
   27d30:	beq	27a3c <__assert_fail@plt+0x15da0>
   27d34:	cmp	r0, #0
   27d38:	ldr	r0, [sp, #24]
   27d3c:	str	r9, [sp, #16]
   27d40:	bne	27a3c <__assert_fail@plt+0x15da0>
   27d44:	ldr	r1, [sp, #16]
   27d48:	mov	lr, r4
   27d4c:	sub	r8, r4, #1
   27d50:	mov	r9, #0
   27d54:	mov	ip, r4
   27d58:	mov	r7, #0
   27d5c:	sub	r1, r4, r1
   27d60:	str	r1, [sp, #12]
   27d64:	ldr	r1, [sp, #8]
   27d68:	sub	r2, r1, #1
   27d6c:	rsb	r1, r1, #1
   27d70:	str	r2, [sp, #4]
   27d74:	str	r1, [sp]
   27d78:	add	r0, ip, r0
   27d7c:	add	r1, sp, #28
   27d80:	ldrb	r2, [r0, #-1]
   27d84:	ldr	r3, [r1, r2, lsl #2]
   27d88:	cmp	r3, #0
   27d8c:	beq	27db4 <__assert_fail@plt+0x16118>
   27d90:	ldr	r1, [sp, #16]
   27d94:	mov	r2, r3
   27d98:	cmp	r3, r1
   27d9c:	ldr	r1, [sp, #12]
   27da0:	movcc	r2, r1
   27da4:	cmp	r9, #0
   27da8:	moveq	r2, r3
   27dac:	mov	r9, #0
   27db0:	b	27e2c <__assert_fail@plt+0x16190>
   27db4:	ldr	r2, [sp, #8]
   27db8:	cmp	r2, r9
   27dbc:	movcc	r2, r9
   27dc0:	cmp	r2, r8
   27dc4:	bcs	27dec <__assert_fail@plt+0x16150>
   27dc8:	ldr	r1, [sp, #24]
   27dcc:	add	r3, r1, r7
   27dd0:	ldrb	r5, [r3, r2]
   27dd4:	ldrb	r4, [r6, r2]
   27dd8:	cmp	r4, r5
   27ddc:	bne	27e68 <__assert_fail@plt+0x161cc>
   27de0:	add	r2, r2, #1
   27de4:	cmp	r2, r8
   27de8:	bcc	27dd0 <__assert_fail@plt+0x16134>
   27dec:	ldr	r1, [sp, #24]
   27df0:	ldr	r2, [sp, #4]
   27df4:	add	r5, r1, r7
   27df8:	add	r3, r2, #1
   27dfc:	cmp	r9, r3
   27e00:	bcs	27e18 <__assert_fail@plt+0x1617c>
   27e04:	ldrb	r4, [r5, r2]
   27e08:	ldrb	r1, [r6, r2]
   27e0c:	sub	r2, r2, #1
   27e10:	cmp	r1, r4
   27e14:	beq	27df8 <__assert_fail@plt+0x1615c>
   27e18:	add	r1, r9, #1
   27e1c:	ldr	r2, [sp, #16]
   27e20:	ldr	r9, [sp, #12]
   27e24:	cmp	r3, r1
   27e28:	bcc	27a3c <__assert_fail@plt+0x15da0>
   27e2c:	add	r7, r2, r7
   27e30:	mov	r1, #0
   27e34:	mov	r4, lr
   27e38:	mov	r5, #0
   27e3c:	add	sl, r7, lr
   27e40:	sub	r2, sl, ip
   27e44:	bl	11b58 <memchr@plt>
   27e48:	cmp	sl, #0
   27e4c:	beq	27a3c <__assert_fail@plt+0x15da0>
   27e50:	cmp	r0, #0
   27e54:	ldr	r0, [sp, #24]
   27e58:	mov	ip, sl
   27e5c:	mov	lr, r4
   27e60:	beq	27d78 <__assert_fail@plt+0x160dc>
   27e64:	b	27a3c <__assert_fail@plt+0x15da0>
   27e68:	ldr	r1, [sp]
   27e6c:	add	r2, r1, r2
   27e70:	b	27dac <__assert_fail@plt+0x16110>
   27e74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   27e78:	add	fp, sp, #24
   27e7c:	cmp	r1, #3
   27e80:	bcs	27e94 <__assert_fail@plt+0x161f8>
   27e84:	mov	r0, #1
   27e88:	str	r0, [r2]
   27e8c:	sub	r0, r1, #1
   27e90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   27e94:	mvn	r8, #0
   27e98:	mov	r6, #0
   27e9c:	mov	r3, #1
   27ea0:	mov	ip, #1
   27ea4:	mov	r5, #1
   27ea8:	add	r4, r5, r8
   27eac:	ldrb	r7, [r0, r3]
   27eb0:	ldrb	r4, [r0, r4]
   27eb4:	cmp	r7, r4
   27eb8:	bcs	27ec8 <__assert_fail@plt+0x1622c>
   27ebc:	sub	ip, r3, r8
   27ec0:	mov	r5, #1
   27ec4:	b	27ef0 <__assert_fail@plt+0x16254>
   27ec8:	bne	27ee0 <__assert_fail@plt+0x16244>
   27ecc:	cmp	r5, ip
   27ed0:	addne	r5, r5, #1
   27ed4:	addeq	r6, ip, r6
   27ed8:	moveq	r5, #1
   27edc:	b	27ef4 <__assert_fail@plt+0x16258>
   27ee0:	add	r3, r6, #1
   27ee4:	mov	r8, r6
   27ee8:	mov	r5, #1
   27eec:	mov	ip, #1
   27ef0:	mov	r6, r3
   27ef4:	add	r3, r5, r6
   27ef8:	cmp	r3, r1
   27efc:	bcc	27ea8 <__assert_fail@plt+0x1620c>
   27f00:	cmp	r1, #2
   27f04:	str	ip, [r2]
   27f08:	bcc	27f84 <__assert_fail@plt+0x162e8>
   27f0c:	mvn	ip, #0
   27f10:	mov	r4, #0
   27f14:	mov	r5, #1
   27f18:	mov	lr, #1
   27f1c:	mov	r3, #1
   27f20:	add	r7, r3, ip
   27f24:	ldrb	r6, [r0, r5]
   27f28:	ldrb	r7, [r0, r7]
   27f2c:	cmp	r7, r6
   27f30:	bcs	27f44 <__assert_fail@plt+0x162a8>
   27f34:	sub	lr, r5, ip
   27f38:	mov	r3, #1
   27f3c:	mov	r4, r5
   27f40:	b	27f74 <__assert_fail@plt+0x162d8>
   27f44:	cmp	r6, r7
   27f48:	bne	27f60 <__assert_fail@plt+0x162c4>
   27f4c:	cmp	r3, lr
   27f50:	addne	r3, r3, #1
   27f54:	addeq	r4, lr, r4
   27f58:	moveq	r3, #1
   27f5c:	b	27f74 <__assert_fail@plt+0x162d8>
   27f60:	add	r7, r4, #1
   27f64:	mov	ip, r4
   27f68:	mov	r3, #1
   27f6c:	mov	lr, #1
   27f70:	mov	r4, r7
   27f74:	add	r5, r3, r4
   27f78:	cmp	r5, r1
   27f7c:	bcc	27f20 <__assert_fail@plt+0x16284>
   27f80:	b	27f8c <__assert_fail@plt+0x162f0>
   27f84:	mov	lr, #1
   27f88:	mvn	ip, #0
   27f8c:	add	r0, r8, #1
   27f90:	add	r1, ip, #1
   27f94:	cmp	r1, r0
   27f98:	movcs	r0, r1
   27f9c:	strcs	lr, [r2]
   27fa0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   27fa4:	push	{fp, lr}
   27fa8:	mov	fp, sp
   27fac:	movw	r0, #45488	; 0xb1b0
   27fb0:	movt	r0, #3
   27fb4:	ldr	r0, [r0]
   27fb8:	bl	11a68 <exit@plt>
   27fbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27fc0:	add	fp, sp, #28
   27fc4:	sub	sp, sp, #12
   27fc8:	mov	r4, r3
   27fcc:	mov	r6, r2
   27fd0:	mov	r5, r1
   27fd4:	mov	sl, r0
   27fd8:	bl	11a98 <strlen@plt>
   27fdc:	ldr	r8, [r5]
   27fe0:	cmp	r8, #0
   27fe4:	beq	2809c <__assert_fail@plt+0x16400>
   27fe8:	mov	r7, r0
   27fec:	mov	r0, #0
   27ff0:	add	r9, r5, #4
   27ff4:	mov	r5, #0
   27ff8:	str	r6, [sp, #4]
   27ffc:	str	r0, [sp]
   28000:	mvn	r0, #0
   28004:	str	r0, [sp, #8]
   28008:	mov	r0, r8
   2800c:	mov	r1, sl
   28010:	mov	r2, r7
   28014:	bl	11c54 <strncmp@plt>
   28018:	cmp	r0, #0
   2801c:	bne	28074 <__assert_fail@plt+0x163d8>
   28020:	mov	r0, r8
   28024:	bl	11a98 <strlen@plt>
   28028:	cmp	r0, r7
   2802c:	beq	280a0 <__assert_fail@plt+0x16404>
   28030:	ldr	r0, [sp, #8]
   28034:	cmn	r0, #1
   28038:	beq	28070 <__assert_fail@plt+0x163d4>
   2803c:	ldr	r0, [sp, #4]
   28040:	cmp	r0, #0
   28044:	beq	28064 <__assert_fail@plt+0x163c8>
   28048:	ldr	r1, [sp, #8]
   2804c:	mov	r2, r4
   28050:	mla	r0, r1, r4, r0
   28054:	mov	r1, r6
   28058:	bl	11a80 <bcmp@plt>
   2805c:	cmp	r0, #0
   28060:	beq	28074 <__assert_fail@plt+0x163d8>
   28064:	mov	r0, #1
   28068:	str	r0, [sp]
   2806c:	b	28074 <__assert_fail@plt+0x163d8>
   28070:	str	r5, [sp, #8]
   28074:	ldr	r8, [r9, r5, lsl #2]
   28078:	add	r6, r6, r4
   2807c:	add	r5, r5, #1
   28080:	cmp	r8, #0
   28084:	bne	28008 <__assert_fail@plt+0x1636c>
   28088:	ldr	r0, [sp]
   2808c:	tst	r0, #1
   28090:	ldr	r0, [sp, #8]
   28094:	mvnne	r0, #1
   28098:	b	280a4 <__assert_fail@plt+0x16408>
   2809c:	mvn	r5, #0
   280a0:	mov	r0, r5
   280a4:	sub	sp, fp, #28
   280a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   280ac:	push	{r4, r5, r6, sl, fp, lr}
   280b0:	add	fp, sp, #16
   280b4:	sub	sp, sp, #8
   280b8:	mov	r5, r0
   280bc:	movw	r0, #42677	; 0xa6b5
   280c0:	mov	r4, r1
   280c4:	movw	r1, #42704	; 0xa6d0
   280c8:	cmn	r2, #1
   280cc:	mov	r2, #5
   280d0:	movt	r0, #2
   280d4:	movt	r1, #2
   280d8:	moveq	r1, r0
   280dc:	mov	r0, #0
   280e0:	bl	11924 <dcgettext@plt>
   280e4:	mov	r6, r0
   280e8:	mov	r0, #0
   280ec:	mov	r1, #8
   280f0:	mov	r2, r4
   280f4:	bl	18870 <__assert_fail@plt+0x6bd4>
   280f8:	mov	r4, r0
   280fc:	mov	r0, #1
   28100:	mov	r1, r5
   28104:	bl	18c40 <__assert_fail@plt+0x6fa4>
   28108:	str	r0, [sp]
   2810c:	mov	r0, #0
   28110:	mov	r1, #0
   28114:	mov	r2, r6
   28118:	mov	r3, r4
   2811c:	bl	119c0 <error@plt>
   28120:	sub	sp, fp, #16
   28124:	pop	{r4, r5, r6, sl, fp, pc}
   28128:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2812c:	add	fp, sp, #28
   28130:	sub	sp, sp, #4
   28134:	mov	sl, r1
   28138:	movw	r1, #42733	; 0xa6ed
   2813c:	mov	r4, r2
   28140:	mov	r7, r0
   28144:	mov	r0, #0
   28148:	mov	r2, #5
   2814c:	mov	r8, #0
   28150:	movt	r1, #2
   28154:	bl	11924 <dcgettext@plt>
   28158:	movw	r1, #45584	; 0xb210
   2815c:	movt	r1, #3
   28160:	ldr	r1, [r1]
   28164:	bl	11c48 <fputs@plt>
   28168:	ldr	r6, [r7]
   2816c:	cmp	r6, #0
   28170:	bne	28190 <__assert_fail@plt+0x164f4>
   28174:	movw	r0, #45584	; 0xb210
   28178:	movt	r0, #3
   2817c:	ldr	r1, [r0]
   28180:	mov	r0, #10
   28184:	sub	sp, fp, #28
   28188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2818c:	b	11bf4 <putc@plt>
   28190:	add	r0, r7, #4
   28194:	mov	r9, #0
   28198:	mov	r7, #0
   2819c:	str	r0, [sp]
   281a0:	mov	r5, #0
   281a4:	cmp	r9, #0
   281a8:	beq	281f4 <__assert_fail@plt+0x16558>
   281ac:	add	r1, sl, r8
   281b0:	mov	r0, r7
   281b4:	mov	r2, r4
   281b8:	bl	11a80 <bcmp@plt>
   281bc:	cmp	r0, #0
   281c0:	mov	r5, r8
   281c4:	bne	281f4 <__assert_fail@plt+0x16558>
   281c8:	movw	r0, #45584	; 0xb210
   281cc:	movt	r0, #3
   281d0:	ldr	r5, [r0]
   281d4:	mov	r0, r6
   281d8:	bl	18c50 <__assert_fail@plt+0x6fb4>
   281dc:	movw	r1, #42762	; 0xa70a
   281e0:	mov	r2, r0
   281e4:	mov	r0, r5
   281e8:	movt	r1, #2
   281ec:	bl	11ab0 <fprintf@plt>
   281f0:	b	28220 <__assert_fail@plt+0x16584>
   281f4:	movw	r0, #45584	; 0xb210
   281f8:	movt	r0, #3
   281fc:	ldr	r7, [r0]
   28200:	mov	r0, r6
   28204:	bl	18c50 <__assert_fail@plt+0x6fb4>
   28208:	movw	r1, #42754	; 0xa702
   2820c:	mov	r2, r0
   28210:	mov	r0, r7
   28214:	movt	r1, #2
   28218:	bl	11ab0 <fprintf@plt>
   2821c:	add	r7, sl, r5
   28220:	ldr	r0, [sp]
   28224:	add	r8, r8, r4
   28228:	ldr	r6, [r0, -r9, lsl #2]
   2822c:	sub	r9, r9, #1
   28230:	cmp	r6, #0
   28234:	bne	281a0 <__assert_fail@plt+0x16504>
   28238:	b	28174 <__assert_fail@plt+0x164d8>
   2823c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   28240:	add	fp, sp, #24
   28244:	ldr	r8, [fp, #8]
   28248:	mov	r6, r0
   2824c:	mov	r4, r3
   28250:	mov	r5, r2
   28254:	mov	r7, r1
   28258:	mov	r0, r1
   2825c:	mov	r1, r2
   28260:	mov	r2, r3
   28264:	mov	r3, r8
   28268:	bl	27fbc <__assert_fail@plt+0x16320>
   2826c:	mov	r2, r0
   28270:	cmn	r0, #1
   28274:	bgt	282a0 <__assert_fail@plt+0x16604>
   28278:	ldr	r9, [fp, #12]
   2827c:	mov	r0, r6
   28280:	mov	r1, r7
   28284:	bl	280ac <__assert_fail@plt+0x16410>
   28288:	mov	r0, r5
   2828c:	mov	r1, r4
   28290:	mov	r2, r8
   28294:	bl	28128 <__assert_fail@plt+0x1648c>
   28298:	blx	r9
   2829c:	mvn	r2, #0
   282a0:	mov	r0, r2
   282a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   282a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   282ac:	add	fp, sp, #24
   282b0:	ldr	r6, [r1]
   282b4:	cmp	r6, #0
   282b8:	beq	28318 <__assert_fail@plt+0x1667c>
   282bc:	mov	r8, r1
   282c0:	mov	r7, r2
   282c4:	mov	r1, r2
   282c8:	mov	r2, r3
   282cc:	mov	r4, r3
   282d0:	mov	r9, r0
   282d4:	bl	11a80 <bcmp@plt>
   282d8:	cmp	r0, #0
   282dc:	beq	2831c <__assert_fail@plt+0x16680>
   282e0:	add	r7, r7, r4
   282e4:	add	r5, r8, #4
   282e8:	ldr	r6, [r5]
   282ec:	cmp	r6, #0
   282f0:	beq	28318 <__assert_fail@plt+0x1667c>
   282f4:	mov	r0, r9
   282f8:	mov	r1, r7
   282fc:	mov	r2, r4
   28300:	bl	11a80 <bcmp@plt>
   28304:	add	r7, r7, r4
   28308:	add	r5, r5, #4
   2830c:	cmp	r0, #0
   28310:	bne	282e8 <__assert_fail@plt+0x1664c>
   28314:	b	2831c <__assert_fail@plt+0x16680>
   28318:	mov	r6, #0
   2831c:	mov	r0, r6
   28320:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   28324:	push	{r4, r5, r6, sl, fp, lr}
   28328:	add	fp, sp, #16
   2832c:	mov	r4, r0
   28330:	bl	119a8 <__fpending@plt>
   28334:	mov	r5, r0
   28338:	mov	r0, r4
   2833c:	bl	118b8 <ferror@plt>
   28340:	mov	r6, r0
   28344:	mov	r0, r4
   28348:	bl	11b64 <fclose@plt>
   2834c:	cmp	r6, #0
   28350:	beq	28370 <__assert_fail@plt+0x166d4>
   28354:	mvn	r4, #0
   28358:	cmp	r0, #0
   2835c:	bne	2839c <__assert_fail@plt+0x16700>
   28360:	bl	11ac8 <__errno_location@plt>
   28364:	mov	r1, #0
   28368:	str	r1, [r0]
   2836c:	b	2839c <__assert_fail@plt+0x16700>
   28370:	cmp	r0, #0
   28374:	mov	r4, r0
   28378:	mvnne	r4, #0
   2837c:	cmp	r5, #0
   28380:	bne	2839c <__assert_fail@plt+0x16700>
   28384:	cmp	r0, #0
   28388:	beq	2839c <__assert_fail@plt+0x16700>
   2838c:	bl	11ac8 <__errno_location@plt>
   28390:	ldr	r0, [r0]
   28394:	subs	r4, r0, #9
   28398:	mvnne	r4, #0
   2839c:	mov	r0, r4
   283a0:	pop	{r4, r5, r6, sl, fp, pc}
   283a4:	push	{r4, r5, r6, r7, fp, lr}
   283a8:	add	fp, sp, #16
   283ac:	mov	r4, r0
   283b0:	ldr	r0, [r0, #4]
   283b4:	mov	r5, r1
   283b8:	cmp	r0, r1
   283bc:	bcs	283ec <__assert_fail@plt+0x16750>
   283c0:	mov	r6, r3
   283c4:	cmp	r3, #0
   283c8:	beq	283f4 <__assert_fail@plt+0x16758>
   283cc:	mvn	r0, #0
   283d0:	udiv	r0, r0, r6
   283d4:	cmp	r0, r5
   283d8:	bcs	283f4 <__assert_fail@plt+0x16758>
   283dc:	bl	11ac8 <__errno_location@plt>
   283e0:	mov	r1, #12
   283e4:	str	r1, [r0]
   283e8:	b	28458 <__assert_fail@plt+0x167bc>
   283ec:	str	r5, [r4]
   283f0:	b	28450 <__assert_fail@plt+0x167b4>
   283f4:	ldr	r0, [r4, #8]
   283f8:	mul	r1, r6, r5
   283fc:	cmp	r0, r2
   28400:	beq	28418 <__assert_fail@plt+0x1677c>
   28404:	bl	1a28c <__assert_fail@plt+0x85f0>
   28408:	mov	r7, r0
   2840c:	cmp	r0, #0
   28410:	bne	28448 <__assert_fail@plt+0x167ac>
   28414:	b	28458 <__assert_fail@plt+0x167bc>
   28418:	mov	r0, r1
   2841c:	bl	1a1f8 <__assert_fail@plt+0x855c>
   28420:	cmp	r0, #0
   28424:	beq	28458 <__assert_fail@plt+0x167bc>
   28428:	ldr	r1, [r4, #8]
   2842c:	mov	r7, r0
   28430:	cmp	r1, #0
   28434:	beq	28448 <__assert_fail@plt+0x167ac>
   28438:	ldr	r0, [r4]
   2843c:	mul	r2, r0, r6
   28440:	mov	r0, r7
   28444:	bl	118dc <memcpy@plt>
   28448:	str	r5, [r4]
   2844c:	stmib	r4, {r5, r7}
   28450:	mov	r0, #1
   28454:	pop	{r4, r5, r6, r7, fp, pc}
   28458:	mov	r0, #0
   2845c:	pop	{r4, r5, r6, r7, fp, pc}
   28460:	push	{r4, sl, fp, lr}
   28464:	add	fp, sp, #8
   28468:	sub	sp, sp, #264	; 0x108
   2846c:	add	r1, sp, #7
   28470:	movw	r2, #257	; 0x101
   28474:	bl	28648 <__assert_fail@plt+0x169ac>
   28478:	mov	r4, #0
   2847c:	cmp	r0, #0
   28480:	bne	284c0 <__assert_fail@plt+0x16824>
   28484:	movw	r1, #42767	; 0xa70f
   28488:	add	r0, sp, #7
   2848c:	mov	r2, #2
   28490:	movt	r1, #2
   28494:	bl	11a80 <bcmp@plt>
   28498:	cmp	r0, #0
   2849c:	beq	284c0 <__assert_fail@plt+0x16824>
   284a0:	movw	r1, #42769	; 0xa711
   284a4:	add	r0, sp, #7
   284a8:	mov	r2, #6
   284ac:	movt	r1, #2
   284b0:	bl	11a80 <bcmp@plt>
   284b4:	cmp	r0, #0
   284b8:	mov	r4, r0
   284bc:	movwne	r4, #1
   284c0:	mov	r0, r4
   284c4:	sub	sp, fp, #8
   284c8:	pop	{r4, sl, fp, pc}
   284cc:	push	{fp, lr}
   284d0:	mov	fp, sp
   284d4:	mov	r0, #14
   284d8:	bl	11bb8 <nl_langinfo@plt>
   284dc:	movw	r1, #39327	; 0x999f
   284e0:	cmp	r0, #0
   284e4:	movt	r1, #2
   284e8:	movne	r1, r0
   284ec:	movw	r0, #42775	; 0xa717
   284f0:	ldrb	r2, [r1]
   284f4:	movt	r0, #2
   284f8:	cmp	r2, #0
   284fc:	movne	r0, r1
   28500:	pop	{fp, pc}
   28504:	push	{r4, sl, fp, lr}
   28508:	add	fp, sp, #8
   2850c:	mov	r4, #0
   28510:	adds	r0, r0, #16
   28514:	adc	r1, r4, #0
   28518:	rsb	r2, r1, #0
   2851c:	eors	r2, r2, r1
   28520:	movwne	r2, #1
   28524:	cmp	r0, #0
   28528:	bmi	28564 <__assert_fail@plt+0x168c8>
   2852c:	cmp	r2, #0
   28530:	asreq	r2, r0, #31
   28534:	eoreq	r3, r0, r0
   28538:	andeq	r2, r2, #1
   2853c:	eoreq	r1, r1, r2
   28540:	orrseq	r1, r3, r1
   28544:	bne	28564 <__assert_fail@plt+0x168c8>
   28548:	bl	119fc <malloc@plt>
   2854c:	cmp	r0, #0
   28550:	addne	r4, r0, #8
   28554:	movne	r1, #8
   28558:	bfine	r4, r1, #0, #4
   2855c:	subne	r0, r4, r0
   28560:	strbne	r0, [r4, #-1]
   28564:	mov	r0, r4
   28568:	pop	{r4, sl, fp, pc}
   2856c:	push	{fp, lr}
   28570:	mov	fp, sp
   28574:	tst	r0, #7
   28578:	bne	28594 <__assert_fail@plt+0x168f8>
   2857c:	tst	r0, #8
   28580:	popeq	{fp, pc}
   28584:	ldrb	r1, [r0, #-1]
   28588:	sub	r0, r0, r1
   2858c:	pop	{fp, lr}
   28590:	b	1a12c <__assert_fail@plt+0x8490>
   28594:	bl	11c60 <abort@plt>
   28598:	push	{r4, sl, fp, lr}
   2859c:	add	fp, sp, #8
   285a0:	mov	r4, r0
   285a4:	bl	1187c <wcwidth@plt>
   285a8:	cmn	r0, #1
   285ac:	popgt	{r4, sl, fp, pc}
   285b0:	mov	r0, r4
   285b4:	bl	11948 <iswcntrl@plt>
   285b8:	clz	r0, r0
   285bc:	lsr	r0, r0, #5
   285c0:	pop	{r4, sl, fp, pc}
   285c4:	push	{r4, r5, r6, sl, fp, lr}
   285c8:	add	fp, sp, #16
   285cc:	mov	r4, r0
   285d0:	mov	r0, r1
   285d4:	mov	r5, r1
   285d8:	ldr	r1, [r0], #16
   285dc:	cmp	r1, r0
   285e0:	beq	285ec <__assert_fail@plt+0x16950>
   285e4:	mov	r6, r1
   285e8:	b	285fc <__assert_fail@plt+0x16960>
   285ec:	ldr	r2, [r5, #4]
   285f0:	add	r6, r4, #16
   285f4:	mov	r0, r6
   285f8:	bl	118dc <memcpy@plt>
   285fc:	str	r6, [r4]
   28600:	ldr	r0, [r5, #4]
   28604:	str	r0, [r4, #4]
   28608:	ldrb	r0, [r5, #8]
   2860c:	strb	r0, [r4, #8]
   28610:	cmp	r0, #0
   28614:	ldrne	r0, [r5, #12]
   28618:	strne	r0, [r4, #12]
   2861c:	pop	{r4, r5, r6, sl, fp, pc}
   28620:	movw	r2, #42784	; 0xa720
   28624:	ubfx	r1, r0, #5, #3
   28628:	and	r0, r0, #31
   2862c:	movt	r2, #2
   28630:	ldr	r1, [r2, r1, lsl #2]
   28634:	mov	r2, #1
   28638:	and	r0, r1, r2, lsl r0
   2863c:	cmp	r0, #0
   28640:	movwne	r0, #1
   28644:	bx	lr
   28648:	push	{r4, r5, r6, r7, fp, lr}
   2864c:	add	fp, sp, #16
   28650:	mov	r4, r1
   28654:	mov	r1, #0
   28658:	mov	r6, r2
   2865c:	bl	11b94 <setlocale@plt>
   28660:	cmp	r0, #0
   28664:	beq	28690 <__assert_fail@plt+0x169f4>
   28668:	mov	r7, r0
   2866c:	bl	11a98 <strlen@plt>
   28670:	cmp	r0, r6
   28674:	bcs	286a4 <__assert_fail@plt+0x16a08>
   28678:	add	r2, r0, #1
   2867c:	mov	r0, r4
   28680:	mov	r1, r7
   28684:	bl	118dc <memcpy@plt>
   28688:	mov	r5, #0
   2868c:	b	286cc <__assert_fail@plt+0x16a30>
   28690:	cmp	r6, #0
   28694:	mov	r5, #22
   28698:	movne	r0, #0
   2869c:	strbne	r0, [r4]
   286a0:	b	286cc <__assert_fail@plt+0x16a30>
   286a4:	mov	r5, #34	; 0x22
   286a8:	cmp	r6, #0
   286ac:	beq	286cc <__assert_fail@plt+0x16a30>
   286b0:	sub	r6, r6, #1
   286b4:	mov	r0, r4
   286b8:	mov	r1, r7
   286bc:	mov	r2, r6
   286c0:	bl	118dc <memcpy@plt>
   286c4:	mov	r0, #0
   286c8:	strb	r0, [r4, r6]
   286cc:	mov	r0, r5
   286d0:	pop	{r4, r5, r6, r7, fp, pc}
   286d4:	mov	r1, #0
   286d8:	b	11b94 <setlocale@plt>
   286dc:	mov	r1, #0
   286e0:	mov	r2, #3
   286e4:	b	19ef8 <__assert_fail@plt+0x825c>
   286e8:	eor	r1, r1, #-2147483648	; 0x80000000
   286ec:	b	286f4 <__assert_fail@plt+0x16a58>
   286f0:	eor	r3, r3, #-2147483648	; 0x80000000
   286f4:	push	{r4, r5, lr}
   286f8:	lsl	r4, r1, #1
   286fc:	lsl	r5, r3, #1
   28700:	teq	r4, r5
   28704:	teqeq	r0, r2
   28708:	orrsne	ip, r4, r0
   2870c:	orrsne	ip, r5, r2
   28710:	mvnsne	ip, r4, asr #21
   28714:	mvnsne	ip, r5, asr #21
   28718:	beq	28904 <__assert_fail@plt+0x16c68>
   2871c:	lsr	r4, r4, #21
   28720:	rsbs	r5, r4, r5, lsr #21
   28724:	rsblt	r5, r5, #0
   28728:	ble	28748 <__assert_fail@plt+0x16aac>
   2872c:	add	r4, r4, r5
   28730:	eor	r2, r0, r2
   28734:	eor	r3, r1, r3
   28738:	eor	r0, r2, r0
   2873c:	eor	r1, r3, r1
   28740:	eor	r2, r0, r2
   28744:	eor	r3, r1, r3
   28748:	cmp	r5, #54	; 0x36
   2874c:	pophi	{r4, r5, pc}
   28750:	tst	r1, #-2147483648	; 0x80000000
   28754:	lsl	r1, r1, #12
   28758:	mov	ip, #1048576	; 0x100000
   2875c:	orr	r1, ip, r1, lsr #12
   28760:	beq	2876c <__assert_fail@plt+0x16ad0>
   28764:	rsbs	r0, r0, #0
   28768:	rsc	r1, r1, #0
   2876c:	tst	r3, #-2147483648	; 0x80000000
   28770:	lsl	r3, r3, #12
   28774:	orr	r3, ip, r3, lsr #12
   28778:	beq	28784 <__assert_fail@plt+0x16ae8>
   2877c:	rsbs	r2, r2, #0
   28780:	rsc	r3, r3, #0
   28784:	teq	r4, r5
   28788:	beq	288ec <__assert_fail@plt+0x16c50>
   2878c:	sub	r4, r4, #1
   28790:	rsbs	lr, r5, #32
   28794:	blt	287b0 <__assert_fail@plt+0x16b14>
   28798:	lsl	ip, r2, lr
   2879c:	adds	r0, r0, r2, lsr r5
   287a0:	adc	r1, r1, #0
   287a4:	adds	r0, r0, r3, lsl lr
   287a8:	adcs	r1, r1, r3, asr r5
   287ac:	b	287cc <__assert_fail@plt+0x16b30>
   287b0:	sub	r5, r5, #32
   287b4:	add	lr, lr, #32
   287b8:	cmp	r2, #1
   287bc:	lsl	ip, r3, lr
   287c0:	orrcs	ip, ip, #2
   287c4:	adds	r0, r0, r3, asr r5
   287c8:	adcs	r1, r1, r3, asr #31
   287cc:	and	r5, r1, #-2147483648	; 0x80000000
   287d0:	bpl	287e0 <__assert_fail@plt+0x16b44>
   287d4:	rsbs	ip, ip, #0
   287d8:	rscs	r0, r0, #0
   287dc:	rsc	r1, r1, #0
   287e0:	cmp	r1, #1048576	; 0x100000
   287e4:	bcc	28824 <__assert_fail@plt+0x16b88>
   287e8:	cmp	r1, #2097152	; 0x200000
   287ec:	bcc	2880c <__assert_fail@plt+0x16b70>
   287f0:	lsrs	r1, r1, #1
   287f4:	rrxs	r0, r0
   287f8:	rrx	ip, ip
   287fc:	add	r4, r4, #1
   28800:	lsl	r2, r4, #21
   28804:	cmn	r2, #4194304	; 0x400000
   28808:	bcs	28964 <__assert_fail@plt+0x16cc8>
   2880c:	cmp	ip, #-2147483648	; 0x80000000
   28810:	lsrseq	ip, r0, #1
   28814:	adcs	r0, r0, #0
   28818:	adc	r1, r1, r4, lsl #20
   2881c:	orr	r1, r1, r5
   28820:	pop	{r4, r5, pc}
   28824:	lsls	ip, ip, #1
   28828:	adcs	r0, r0, r0
   2882c:	adc	r1, r1, r1
   28830:	tst	r1, #1048576	; 0x100000
   28834:	sub	r4, r4, #1
   28838:	bne	2880c <__assert_fail@plt+0x16b70>
   2883c:	teq	r1, #0
   28840:	moveq	r1, r0
   28844:	moveq	r0, #0
   28848:	clz	r3, r1
   2884c:	addeq	r3, r3, #32
   28850:	sub	r3, r3, #11
   28854:	subs	r2, r3, #32
   28858:	bge	2887c <__assert_fail@plt+0x16be0>
   2885c:	adds	r2, r2, #12
   28860:	ble	28878 <__assert_fail@plt+0x16bdc>
   28864:	add	ip, r2, #20
   28868:	rsb	r2, r2, #12
   2886c:	lsl	r0, r1, ip
   28870:	lsr	r1, r1, r2
   28874:	b	2888c <__assert_fail@plt+0x16bf0>
   28878:	add	r2, r2, #20
   2887c:	rsble	ip, r2, #32
   28880:	lsl	r1, r1, r2
   28884:	orrle	r1, r1, r0, lsr ip
   28888:	lslle	r0, r0, r2
   2888c:	subs	r4, r4, r3
   28890:	addge	r1, r1, r4, lsl #20
   28894:	orrge	r1, r1, r5
   28898:	popge	{r4, r5, pc}
   2889c:	mvn	r4, r4
   288a0:	subs	r4, r4, #31
   288a4:	bge	288e0 <__assert_fail@plt+0x16c44>
   288a8:	adds	r4, r4, #12
   288ac:	bgt	288c8 <__assert_fail@plt+0x16c2c>
   288b0:	add	r4, r4, #20
   288b4:	rsb	r2, r4, #32
   288b8:	lsr	r0, r0, r4
   288bc:	orr	r0, r0, r1, lsl r2
   288c0:	orr	r1, r5, r1, lsr r4
   288c4:	pop	{r4, r5, pc}
   288c8:	rsb	r4, r4, #12
   288cc:	rsb	r2, r4, #32
   288d0:	lsr	r0, r0, r2
   288d4:	orr	r0, r0, r1, lsl r4
   288d8:	mov	r1, r5
   288dc:	pop	{r4, r5, pc}
   288e0:	lsr	r0, r1, r4
   288e4:	mov	r1, r5
   288e8:	pop	{r4, r5, pc}
   288ec:	teq	r4, #0
   288f0:	eor	r3, r3, #1048576	; 0x100000
   288f4:	eoreq	r1, r1, #1048576	; 0x100000
   288f8:	addeq	r4, r4, #1
   288fc:	subne	r5, r5, #1
   28900:	b	2878c <__assert_fail@plt+0x16af0>
   28904:	mvns	ip, r4, asr #21
   28908:	mvnsne	ip, r5, asr #21
   2890c:	beq	28974 <__assert_fail@plt+0x16cd8>
   28910:	teq	r4, r5
   28914:	teqeq	r0, r2
   28918:	beq	2892c <__assert_fail@plt+0x16c90>
   2891c:	orrs	ip, r4, r0
   28920:	moveq	r1, r3
   28924:	moveq	r0, r2
   28928:	pop	{r4, r5, pc}
   2892c:	teq	r1, r3
   28930:	movne	r1, #0
   28934:	movne	r0, #0
   28938:	popne	{r4, r5, pc}
   2893c:	lsrs	ip, r4, #21
   28940:	bne	28954 <__assert_fail@plt+0x16cb8>
   28944:	lsls	r0, r0, #1
   28948:	adcs	r1, r1, r1
   2894c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   28950:	pop	{r4, r5, pc}
   28954:	adds	r4, r4, #4194304	; 0x400000
   28958:	addcc	r1, r1, #1048576	; 0x100000
   2895c:	popcc	{r4, r5, pc}
   28960:	and	r5, r1, #-2147483648	; 0x80000000
   28964:	orr	r1, r5, #2130706432	; 0x7f000000
   28968:	orr	r1, r1, #15728640	; 0xf00000
   2896c:	mov	r0, #0
   28970:	pop	{r4, r5, pc}
   28974:	mvns	ip, r4, asr #21
   28978:	movne	r1, r3
   2897c:	movne	r0, r2
   28980:	mvnseq	ip, r5, asr #21
   28984:	movne	r3, r1
   28988:	movne	r2, r0
   2898c:	orrs	r4, r0, r1, lsl #12
   28990:	orrseq	r5, r2, r3, lsl #12
   28994:	teqeq	r1, r3
   28998:	orrne	r1, r1, #524288	; 0x80000
   2899c:	pop	{r4, r5, pc}
   289a0:	teq	r0, #0
   289a4:	moveq	r1, #0
   289a8:	bxeq	lr
   289ac:	push	{r4, r5, lr}
   289b0:	mov	r4, #1024	; 0x400
   289b4:	add	r4, r4, #50	; 0x32
   289b8:	mov	r5, #0
   289bc:	mov	r1, #0
   289c0:	b	2883c <__assert_fail@plt+0x16ba0>
   289c4:	teq	r0, #0
   289c8:	moveq	r1, #0
   289cc:	bxeq	lr
   289d0:	push	{r4, r5, lr}
   289d4:	mov	r4, #1024	; 0x400
   289d8:	add	r4, r4, #50	; 0x32
   289dc:	ands	r5, r0, #-2147483648	; 0x80000000
   289e0:	rsbmi	r0, r0, #0
   289e4:	mov	r1, #0
   289e8:	b	2883c <__assert_fail@plt+0x16ba0>
   289ec:	lsls	r2, r0, #1
   289f0:	asr	r1, r2, #3
   289f4:	rrx	r1, r1
   289f8:	lsl	r0, r2, #28
   289fc:	andsne	r3, r2, #-16777216	; 0xff000000
   28a00:	teqne	r3, #-16777216	; 0xff000000
   28a04:	eorne	r1, r1, #939524096	; 0x38000000
   28a08:	bxne	lr
   28a0c:	bics	r2, r2, #-16777216	; 0xff000000
   28a10:	bxeq	lr
   28a14:	teq	r3, #-16777216	; 0xff000000
   28a18:	orreq	r1, r1, #524288	; 0x80000
   28a1c:	bxeq	lr
   28a20:	push	{r4, r5, lr}
   28a24:	mov	r4, #896	; 0x380
   28a28:	and	r5, r1, #-2147483648	; 0x80000000
   28a2c:	bic	r1, r1, #-2147483648	; 0x80000000
   28a30:	b	2883c <__assert_fail@plt+0x16ba0>
   28a34:	orrs	r2, r0, r1
   28a38:	bxeq	lr
   28a3c:	push	{r4, r5, lr}
   28a40:	mov	r5, #0
   28a44:	b	28a64 <__assert_fail@plt+0x16dc8>
   28a48:	orrs	r2, r0, r1
   28a4c:	bxeq	lr
   28a50:	push	{r4, r5, lr}
   28a54:	ands	r5, r1, #-2147483648	; 0x80000000
   28a58:	bpl	28a64 <__assert_fail@plt+0x16dc8>
   28a5c:	rsbs	r0, r0, #0
   28a60:	rsc	r1, r1, #0
   28a64:	mov	r4, #1024	; 0x400
   28a68:	add	r4, r4, #50	; 0x32
   28a6c:	lsrs	ip, r1, #22
   28a70:	beq	287e0 <__assert_fail@plt+0x16b44>
   28a74:	mov	r2, #3
   28a78:	lsrs	ip, ip, #3
   28a7c:	addne	r2, r2, #3
   28a80:	lsrs	ip, ip, #3
   28a84:	addne	r2, r2, #3
   28a88:	add	r2, r2, ip, lsr #3
   28a8c:	rsb	r3, r2, #32
   28a90:	lsl	ip, r0, r3
   28a94:	lsr	r0, r0, r2
   28a98:	orr	r0, r0, r1, lsl r3
   28a9c:	lsr	r1, r1, r2
   28aa0:	add	r4, r4, r2
   28aa4:	b	287e0 <__assert_fail@plt+0x16b44>
   28aa8:	cmp	r3, #0
   28aac:	cmpeq	r2, #0
   28ab0:	bne	28ac8 <__assert_fail@plt+0x16e2c>
   28ab4:	cmp	r1, #0
   28ab8:	cmpeq	r0, #0
   28abc:	mvnne	r1, #0
   28ac0:	mvnne	r0, #0
   28ac4:	b	28ae4 <__assert_fail@plt+0x16e48>
   28ac8:	sub	sp, sp, #8
   28acc:	push	{sp, lr}
   28ad0:	bl	28b38 <__assert_fail@plt+0x16e9c>
   28ad4:	ldr	lr, [sp, #4]
   28ad8:	add	sp, sp, #8
   28adc:	pop	{r2, r3}
   28ae0:	bx	lr
   28ae4:	push	{r1, lr}
   28ae8:	mov	r0, #8
   28aec:	bl	11828 <raise@plt>
   28af0:	pop	{r1, pc}
   28af4:	andeq	r0, r0, r0
   28af8:	vmov	d6, r0, r1
   28afc:	vldr	d7, [pc, #36]	; 28b28 <__assert_fail@plt+0x16e8c>
   28b00:	vldr	d5, [pc, #40]	; 28b30 <__assert_fail@plt+0x16e94>
   28b04:	vmul.f64	d7, d6, d7
   28b08:	vcvt.u32.f64	s14, d7
   28b0c:	vcvt.f64.u32	d4, s14
   28b10:	vmov	r1, s14
   28b14:	vmls.f64	d6, d4, d5
   28b18:	vcvt.u32.f64	s15, d6
   28b1c:	vmov	r0, s15
   28b20:	bx	lr
   28b24:	nop			; (mov r0, r0)
   28b28:	andeq	r0, r0, r0
   28b2c:	ldclcc	0, cr0, [r0]
   28b30:	andeq	r0, r0, r0
   28b34:	mvnsmi	r0, r0
   28b38:	cmp	r1, r3
   28b3c:	cmpeq	r0, r2
   28b40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28b44:	mov	r4, r0
   28b48:	movcc	r0, #0
   28b4c:	mov	r5, r1
   28b50:	ldr	lr, [sp, #36]	; 0x24
   28b54:	movcc	r1, r0
   28b58:	bcc	28c54 <__assert_fail@plt+0x16fb8>
   28b5c:	cmp	r3, #0
   28b60:	clzeq	ip, r2
   28b64:	clzne	ip, r3
   28b68:	addeq	ip, ip, #32
   28b6c:	cmp	r5, #0
   28b70:	clzeq	r1, r4
   28b74:	addeq	r1, r1, #32
   28b78:	clzne	r1, r5
   28b7c:	sub	ip, ip, r1
   28b80:	sub	sl, ip, #32
   28b84:	lsl	r9, r3, ip
   28b88:	rsb	fp, ip, #32
   28b8c:	orr	r9, r9, r2, lsl sl
   28b90:	orr	r9, r9, r2, lsr fp
   28b94:	lsl	r8, r2, ip
   28b98:	cmp	r5, r9
   28b9c:	cmpeq	r4, r8
   28ba0:	movcc	r0, #0
   28ba4:	movcc	r1, r0
   28ba8:	bcc	28bc4 <__assert_fail@plt+0x16f28>
   28bac:	mov	r0, #1
   28bb0:	subs	r4, r4, r8
   28bb4:	lsl	r1, r0, sl
   28bb8:	orr	r1, r1, r0, lsr fp
   28bbc:	lsl	r0, r0, ip
   28bc0:	sbc	r5, r5, r9
   28bc4:	cmp	ip, #0
   28bc8:	beq	28c54 <__assert_fail@plt+0x16fb8>
   28bcc:	lsr	r6, r8, #1
   28bd0:	orr	r6, r6, r9, lsl #31
   28bd4:	lsr	r7, r9, #1
   28bd8:	mov	r2, ip
   28bdc:	b	28c00 <__assert_fail@plt+0x16f64>
   28be0:	subs	r3, r4, r6
   28be4:	sbc	r8, r5, r7
   28be8:	adds	r3, r3, r3
   28bec:	adc	r8, r8, r8
   28bf0:	adds	r4, r3, #1
   28bf4:	adc	r5, r8, #0
   28bf8:	subs	r2, r2, #1
   28bfc:	beq	28c1c <__assert_fail@plt+0x16f80>
   28c00:	cmp	r5, r7
   28c04:	cmpeq	r4, r6
   28c08:	bcs	28be0 <__assert_fail@plt+0x16f44>
   28c0c:	adds	r4, r4, r4
   28c10:	adc	r5, r5, r5
   28c14:	subs	r2, r2, #1
   28c18:	bne	28c00 <__assert_fail@plt+0x16f64>
   28c1c:	lsr	r3, r4, ip
   28c20:	orr	r3, r3, r5, lsl fp
   28c24:	lsr	r2, r5, ip
   28c28:	orr	r3, r3, r5, lsr sl
   28c2c:	adds	r0, r0, r4
   28c30:	mov	r4, r3
   28c34:	lsl	r3, r2, ip
   28c38:	orr	r3, r3, r4, lsl sl
   28c3c:	lsl	ip, r4, ip
   28c40:	orr	r3, r3, r4, lsr fp
   28c44:	adc	r1, r1, r5
   28c48:	subs	r0, r0, ip
   28c4c:	mov	r5, r2
   28c50:	sbc	r1, r1, r3
   28c54:	cmp	lr, #0
   28c58:	strdne	r4, [lr]
   28c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28c60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   28c64:	mov	r7, r0
   28c68:	ldr	r6, [pc, #72]	; 28cb8 <__assert_fail@plt+0x1701c>
   28c6c:	ldr	r5, [pc, #72]	; 28cbc <__assert_fail@plt+0x17020>
   28c70:	add	r6, pc, r6
   28c74:	add	r5, pc, r5
   28c78:	sub	r6, r6, r5
   28c7c:	mov	r8, r1
   28c80:	mov	r9, r2
   28c84:	bl	117d8 <pthread_mutex_unlock@plt-0x20>
   28c88:	asrs	r6, r6, #2
   28c8c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   28c90:	mov	r4, #0
   28c94:	add	r4, r4, #1
   28c98:	ldr	r3, [r5], #4
   28c9c:	mov	r2, r9
   28ca0:	mov	r1, r8
   28ca4:	mov	r0, r7
   28ca8:	blx	r3
   28cac:	cmp	r6, r4
   28cb0:	bne	28c94 <__assert_fail@plt+0x16ff8>
   28cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   28cb8:	muleq	r1, r4, r2
   28cbc:	andeq	r2, r1, ip, lsl #5
   28cc0:	bx	lr
   28cc4:	ldr	r3, [pc, #12]	; 28cd8 <__assert_fail@plt+0x1703c>
   28cc8:	mov	r1, #0
   28ccc:	add	r3, pc, r3
   28cd0:	ldr	r2, [r3]
   28cd4:	b	11aec <__cxa_atexit@plt>
   28cd8:	ldrdeq	r2, [r1], -r0
   28cdc:	mov	r2, r1
   28ce0:	mov	r1, r0
   28ce4:	mov	r0, #3
   28ce8:	b	11c24 <__xstat64@plt>
   28cec:	mov	r2, r1
   28cf0:	mov	r1, r0
   28cf4:	mov	r0, #3
   28cf8:	b	11978 <__fxstat64@plt>
   28cfc:	mov	r2, r1
   28d00:	mov	r1, r0
   28d04:	mov	r0, #3
   28d08:	b	11c84 <__lxstat64@plt>

Disassembly of section .fini:

00028d0c <.fini>:
   28d0c:	push	{r3, lr}
   28d10:	pop	{r3, pc}
