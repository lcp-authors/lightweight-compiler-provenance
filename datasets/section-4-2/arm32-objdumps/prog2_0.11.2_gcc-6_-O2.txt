
../repos/prog2/0.11.2:     file format elf32-littlearm


Disassembly of section .init:

00010684 <.init>:
   10684:	push	{r3, lr}
   10688:	bl	10848 <_start@@Base+0x3c>
   1068c:	pop	{r3, pc}

Disassembly of section .plt:

00010690 <strcmp@plt-0x14>:
   10690:	push	{lr}		; (str lr, [sp, #-4]!)
   10694:	ldr	lr, [pc, #4]	; 106a0 <strcmp@plt-0x4>
   10698:	add	lr, pc, lr
   1069c:	ldr	pc, [lr, #8]!
   106a0:	andeq	r0, r1, r0, ror #18

000106a4 <strcmp@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2400]!	; 0x960

000106b0 <strcat@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2392]!	; 0x958

000106bc <strcpy@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #16, 20	; 0x10000
   106c4:	ldr	pc, [ip, #2384]!	; 0x950

000106c8 <puts@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2376]!	; 0x948

000106d4 <__libc_start_main@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #16, 20	; 0x10000
   106dc:	ldr	pc, [ip, #2368]!	; 0x940

000106e0 <__gmon_start__@plt>:
   106e0:	add	ip, pc, #0, 12
   106e4:	add	ip, ip, #16, 20	; 0x10000
   106e8:	ldr	pc, [ip, #2360]!	; 0x938

000106ec <strlen@plt>:
   106ec:	add	ip, pc, #0, 12
   106f0:	add	ip, ip, #16, 20	; 0x10000
   106f4:	ldr	pc, [ip, #2352]!	; 0x930

000106f8 <__isoc99_scanf@plt>:
   106f8:	add	ip, pc, #0, 12
   106fc:	add	ip, ip, #16, 20	; 0x10000
   10700:	ldr	pc, [ip, #2344]!	; 0x928

00010704 <abort@plt>:
   10704:	add	ip, pc, #0, 12
   10708:	add	ip, ip, #16, 20	; 0x10000
   1070c:	ldr	pc, [ip, #2336]!	; 0x920

Disassembly of section .text:

00010710 <main@@Base>:
   10710:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10714:	sub	sp, sp, #104	; 0x68
   10718:	ldr	r8, [pc, #228]	; 10804 <main@@Base+0xf4>
   1071c:	ldr	sl, [pc, #228]	; 10808 <main@@Base+0xf8>
   10720:	add	r8, pc, r8
   10724:	add	sl, pc, sl
   10728:	add	r7, sp, #8
   1072c:	add	r9, sp, #4
   10730:	add	r4, sp, #20
   10734:	add	r6, sp, #48	; 0x30
   10738:	add	r5, sp, #76	; 0x4c
   1073c:	mov	r2, #0
   10740:	str	r2, [sp, #28]
   10744:	str	r2, [sp, #20]
   10748:	str	r2, [sp, #24]
   1074c:	str	r2, [sp, #32]
   10750:	str	r2, [sp, #36]	; 0x24
   10754:	str	r2, [sp, #40]	; 0x28
   10758:	strh	r2, [sp, #44]	; 0x2c
   1075c:	mov	r1, r7
   10760:	mov	r0, r8
   10764:	bl	106f8 <__isoc99_scanf@plt>
   10768:	ldrb	r3, [sp, #8]
   1076c:	cmp	r3, #46	; 0x2e
   10770:	beq	107f8 <main@@Base+0xe8>
   10774:	mov	r1, r9
   10778:	mov	r0, sl
   1077c:	bl	106f8 <__isoc99_scanf@plt>
   10780:	mov	r1, r4
   10784:	mov	r0, r7
   10788:	ldr	r2, [sp, #4]
   1078c:	bl	109dc <StringSet@@Base>
   10790:	mov	r1, r6
   10794:	mov	r0, r4
   10798:	bl	10934 <R_ShiftString@@Base>
   1079c:	mov	r1, r6
   107a0:	mov	r0, r4
   107a4:	bl	106a4 <strcmp@plt>
   107a8:	cmp	r0, #0
   107ac:	mov	r0, r4
   107b0:	beq	107d4 <main@@Base+0xc4>
   107b4:	bl	106c8 <puts@plt>
   107b8:	mov	r1, r4
   107bc:	mov	r0, r5
   107c0:	bl	106bc <strcpy@plt>
   107c4:	mov	r1, r4
   107c8:	mov	r0, r5
   107cc:	bl	10988 <L_ShiftString@@Base>
   107d0:	b	1079c <main@@Base+0x8c>
   107d4:	mov	r0, r4
   107d8:	bl	106c8 <puts@plt>
   107dc:	mov	r1, r4
   107e0:	mov	r0, r5
   107e4:	bl	106bc <strcpy@plt>
   107e8:	mov	r1, r4
   107ec:	mov	r0, r5
   107f0:	bl	10988 <L_ShiftString@@Base>
   107f4:	b	1075c <main@@Base+0x4c>
   107f8:	mov	r0, #0
   107fc:	add	sp, sp, #104	; 0x68
   10800:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10804:	andeq	r0, r0, ip, asr r3
   10808:	andeq	r0, r0, ip, asr r3

0001080c <_start@@Base>:
   1080c:	mov	fp, #0
   10810:	mov	lr, #0
   10814:	pop	{r1}		; (ldr r1, [sp], #4)
   10818:	mov	r2, sp
   1081c:	push	{r2}		; (str r2, [sp, #-4]!)
   10820:	push	{r0}		; (str r0, [sp, #-4]!)
   10824:	ldr	ip, [pc, #16]	; 1083c <_start@@Base+0x30>
   10828:	push	{ip}		; (str ip, [sp, #-4]!)
   1082c:	ldr	r0, [pc, #12]	; 10840 <_start@@Base+0x34>
   10830:	ldr	r3, [pc, #12]	; 10844 <_start@@Base+0x38>
   10834:	bl	106d4 <__libc_start_main@plt>
   10838:	bl	10704 <abort@plt>
   1083c:	andeq	r0, r1, r4, ror sl
   10840:	andeq	r0, r1, r0, lsl r7
   10844:	andeq	r0, r1, r4, lsl sl
   10848:	ldr	r3, [pc, #20]	; 10864 <_start@@Base+0x58>
   1084c:	ldr	r2, [pc, #20]	; 10868 <_start@@Base+0x5c>
   10850:	add	r3, pc, r3
   10854:	ldr	r2, [r3, r2]
   10858:	cmp	r2, #0
   1085c:	bxeq	lr
   10860:	b	106e0 <__gmon_start__@plt>
   10864:	andeq	r0, r1, r8, lsr #15
   10868:	andeq	r0, r0, r0, lsr r0
   1086c:	ldr	r3, [pc, #28]	; 10890 <_start@@Base+0x84>
   10870:	ldr	r0, [pc, #28]	; 10894 <_start@@Base+0x88>
   10874:	sub	r3, r3, r0
   10878:	cmp	r3, #6
   1087c:	bxls	lr
   10880:	ldr	r3, [pc, #16]	; 10898 <_start@@Base+0x8c>
   10884:	cmp	r3, #0
   10888:	bxeq	lr
   1088c:	bx	r3
   10890:	andeq	r1, r2, pc, lsr r0
   10894:	andeq	r1, r2, ip, lsr r0
   10898:	andeq	r0, r0, r0
   1089c:	ldr	r1, [pc, #36]	; 108c8 <_start@@Base+0xbc>
   108a0:	ldr	r0, [pc, #36]	; 108cc <_start@@Base+0xc0>
   108a4:	sub	r1, r1, r0
   108a8:	asr	r1, r1, #2
   108ac:	add	r1, r1, r1, lsr #31
   108b0:	asrs	r1, r1, #1
   108b4:	bxeq	lr
   108b8:	ldr	r3, [pc, #16]	; 108d0 <_start@@Base+0xc4>
   108bc:	cmp	r3, #0
   108c0:	bxeq	lr
   108c4:	bx	r3
   108c8:	andeq	r1, r2, ip, lsr r0
   108cc:	andeq	r1, r2, ip, lsr r0
   108d0:	andeq	r0, r0, r0
   108d4:	push	{r4, lr}
   108d8:	ldr	r4, [pc, #24]	; 108f8 <_start@@Base+0xec>
   108dc:	ldrb	r3, [r4]
   108e0:	cmp	r3, #0
   108e4:	popne	{r4, pc}
   108e8:	bl	1086c <_start@@Base+0x60>
   108ec:	mov	r3, #1
   108f0:	strb	r3, [r4]
   108f4:	pop	{r4, pc}
   108f8:	andeq	r1, r2, ip, lsr r0
   108fc:	ldr	r0, [pc, #40]	; 1092c <_start@@Base+0x120>
   10900:	ldr	r3, [r0]
   10904:	cmp	r3, #0
   10908:	bne	10910 <_start@@Base+0x104>
   1090c:	b	1089c <_start@@Base+0x90>
   10910:	ldr	r3, [pc, #24]	; 10930 <_start@@Base+0x124>
   10914:	cmp	r3, #0
   10918:	beq	1090c <_start@@Base+0x100>
   1091c:	push	{r4, lr}
   10920:	blx	r3
   10924:	pop	{r4, lr}
   10928:	b	1089c <_start@@Base+0x90>
   1092c:	andeq	r0, r2, r4, lsl pc
   10930:	andeq	r0, r0, r0

00010934 <R_ShiftString@@Base>:
   10934:	push	{r4, r5, r6, r7, r8, lr}
   10938:	mov	r8, r1
   1093c:	mov	r7, r0
   10940:	bl	106ec <strlen@plt>
   10944:	sub	r6, r7, #1
   10948:	mov	r5, r8
   1094c:	mov	r4, #1
   10950:	add	r0, r7, r0
   10954:	ldrb	r3, [r0, #-1]
   10958:	strb	r3, [r8]
   1095c:	b	1096c <R_ShiftString@@Base+0x38>
   10960:	ldrb	r3, [r6, #1]!
   10964:	add	r4, r4, #1
   10968:	strb	r3, [r5, #1]!
   1096c:	mov	r0, r7
   10970:	bl	106ec <strlen@plt>
   10974:	cmp	r0, r4
   10978:	bhi	10960 <R_ShiftString@@Base+0x2c>
   1097c:	mov	r3, #0
   10980:	strb	r3, [r8, r4]
   10984:	pop	{r4, r5, r6, r7, r8, pc}

00010988 <L_ShiftString@@Base>:
   10988:	push	{r4, r5, r6, r7, r8, lr}
   1098c:	mov	r8, r1
   10990:	mov	r7, r0
   10994:	bl	106ec <strlen@plt>
   10998:	ldrb	r3, [r7]
   1099c:	mov	r6, r7
   109a0:	sub	r5, r8, #1
   109a4:	mov	r4, #1
   109a8:	add	r0, r8, r0
   109ac:	strb	r3, [r0, #-1]
   109b0:	b	109c0 <L_ShiftString@@Base+0x38>
   109b4:	ldrb	r3, [r6, #1]!
   109b8:	add	r4, r4, #1
   109bc:	strb	r3, [r5, #1]!
   109c0:	mov	r0, r7
   109c4:	bl	106ec <strlen@plt>
   109c8:	cmp	r0, r4
   109cc:	bhi	109b4 <L_ShiftString@@Base+0x2c>
   109d0:	mov	r3, #0
   109d4:	strb	r3, [r8, r4]
   109d8:	pop	{r4, r5, r6, r7, r8, pc}

000109dc <StringSet@@Base>:
   109dc:	push	{r4, r5, r6, r7, r8, lr}
   109e0:	subs	r6, r2, #0
   109e4:	mov	r4, #0
   109e8:	strb	r4, [r1]
   109ec:	pople	{r4, r5, r6, r7, r8, pc}
   109f0:	mov	r7, r0
   109f4:	mov	r5, r1
   109f8:	add	r4, r4, #1
   109fc:	mov	r1, r7
   10a00:	mov	r0, r5
   10a04:	bl	106b0 <strcat@plt>
   10a08:	cmp	r6, r4
   10a0c:	bne	109f8 <StringSet@@Base+0x1c>
   10a10:	pop	{r4, r5, r6, r7, r8, pc}

00010a14 <__libc_csu_init@@Base>:
   10a14:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a18:	mov	r7, r0
   10a1c:	ldr	r6, [pc, #72]	; 10a6c <__libc_csu_init@@Base+0x58>
   10a20:	ldr	r5, [pc, #72]	; 10a70 <__libc_csu_init@@Base+0x5c>
   10a24:	add	r6, pc, r6
   10a28:	add	r5, pc, r5
   10a2c:	sub	r6, r6, r5
   10a30:	mov	r8, r1
   10a34:	mov	r9, r2
   10a38:	bl	10684 <strcmp@plt-0x20>
   10a3c:	asrs	r6, r6, #2
   10a40:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a44:	mov	r4, #0
   10a48:	add	r4, r4, #1
   10a4c:	ldr	r3, [r5], #4
   10a50:	mov	r2, r9
   10a54:	mov	r1, r8
   10a58:	mov	r0, r7
   10a5c:	blx	r3
   10a60:	cmp	r6, r4
   10a64:	bne	10a48 <__libc_csu_init@@Base+0x34>
   10a68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a6c:	andeq	r0, r1, r4, ror #9
   10a70:	ldrdeq	r0, [r1], -ip

00010a74 <__libc_csu_fini@@Base>:
   10a74:	bx	lr

Disassembly of section .fini:

00010a78 <.fini>:
   10a78:	push	{r3, lr}
   10a7c:	pop	{r3, pc}
