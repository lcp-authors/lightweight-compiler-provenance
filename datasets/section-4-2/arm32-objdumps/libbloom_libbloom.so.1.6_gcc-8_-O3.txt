
../repos/libbloom/build/libbloom.so.1.6:     file format elf32-littlearm


Disassembly of section .init:

000004c4 <.init>:
 4c4:	push	{r3, lr}
 4c8:	bl	560 <bloom_init@plt+0x10>
 4cc:	pop	{r3, pc}

Disassembly of section .plt:

000004d0 <calloc@plt-0x14>:
 4d0:	push	{lr}		; (str lr, [sp, #-4]!)
 4d4:	ldr	lr, [pc, #4]	; 4e0 <calloc@plt-0x4>
 4d8:	add	lr, pc, lr
 4dc:	ldr	pc, [lr, #8]!
 4e0:	andeq	r0, r1, r0, lsr #22

000004e4 <calloc@plt>:
 4e4:	add	ip, pc, #0, 12
 4e8:	add	ip, ip, #16, 20	; 0x10000
 4ec:	ldr	pc, [ip, #2848]!	; 0xb20

000004f0 <log@plt>:
 4f0:	add	ip, pc, #0, 12
 4f4:	add	ip, ip, #16, 20	; 0x10000
 4f8:	ldr	pc, [ip, #2840]!	; 0xb18

000004fc <__cxa_finalize@plt>:
 4fc:	add	ip, pc, #0, 12
 500:	add	ip, ip, #16, 20	; 0x10000
 504:	ldr	pc, [ip, #2832]!	; 0xb10

00000508 <printf@plt>:
 508:	add	ip, pc, #0, 12
 50c:	add	ip, ip, #16, 20	; 0x10000
 510:	ldr	pc, [ip, #2824]!	; 0xb08

00000514 <murmurhash2@plt>:
 514:	add	ip, pc, #0, 12
 518:	add	ip, ip, #16, 20	; 0x10000
 51c:	ldr	pc, [ip, #2816]!	; 0xb00

00000520 <free@plt>:
 520:	add	ip, pc, #0, 12
 524:	add	ip, ip, #16, 20	; 0x10000
 528:	ldr	pc, [ip, #2808]!	; 0xaf8

0000052c <__gmon_start__@plt>:
 52c:	add	ip, pc, #0, 12
 530:	add	ip, ip, #16, 20	; 0x10000
 534:	ldr	pc, [ip, #2800]!	; 0xaf0

00000538 <memset@plt>:
 538:	add	ip, pc, #0, 12
 53c:	add	ip, ip, #16, 20	; 0x10000
 540:	ldr	pc, [ip, #2792]!	; 0xae8

00000544 <ceil@plt>:
 544:	add	ip, pc, #0, 12
 548:	add	ip, ip, #16, 20	; 0x10000
 54c:	ldr	pc, [ip, #2784]!	; 0xae0

00000550 <bloom_init@plt>:
 550:	add	ip, pc, #0, 12
 554:	add	ip, ip, #16, 20	; 0x10000
 558:	ldr	pc, [ip, #2776]!	; 0xad8

Disassembly of section .text:

00000560 <bloom_init@@Base-0x128>:
 560:	ldr	r3, [pc, #20]	; 57c <bloom_init@plt+0x2c>
 564:	ldr	r2, [pc, #20]	; 580 <bloom_init@plt+0x30>
 568:	add	r3, pc, r3
 56c:	ldr	r2, [r3, r2]
 570:	cmp	r2, #0
 574:	bxeq	lr
 578:	b	52c <__gmon_start__@plt>
 57c:	muleq	r1, r0, sl
 580:	andeq	r0, r0, ip, lsr r0
 584:	ldr	r0, [pc, #44]	; 5b8 <bloom_init@plt+0x68>
 588:	ldr	r3, [pc, #44]	; 5bc <bloom_init@plt+0x6c>
 58c:	add	r0, pc, r0
 590:	add	r3, pc, r3
 594:	cmp	r3, r0
 598:	ldr	r3, [pc, #32]	; 5c0 <bloom_init@plt+0x70>
 59c:	add	r3, pc, r3
 5a0:	bxeq	lr
 5a4:	ldr	r2, [pc, #24]	; 5c4 <bloom_init@plt+0x74>
 5a8:	ldr	r3, [r3, r2]
 5ac:	cmp	r3, #0
 5b0:	bxeq	lr
 5b4:	bx	r3
 5b8:			; <UNDEFINED> instruction: 0x00010ab4
 5bc:			; <UNDEFINED> instruction: 0x00010ab0
 5c0:	andeq	r0, r1, ip, asr sl
 5c4:	andeq	r0, r0, r8, lsr r0
 5c8:	ldr	r0, [pc, #56]	; 608 <bloom_init@plt+0xb8>
 5cc:	ldr	r3, [pc, #56]	; 60c <bloom_init@plt+0xbc>
 5d0:	add	r0, pc, r0
 5d4:	add	r3, pc, r3
 5d8:	sub	r1, r3, r0
 5dc:	ldr	r3, [pc, #44]	; 610 <bloom_init@plt+0xc0>
 5e0:	asr	r1, r1, #2
 5e4:	add	r3, pc, r3
 5e8:	add	r1, r1, r1, lsr #31
 5ec:	asrs	r1, r1, #1
 5f0:	bxeq	lr
 5f4:	ldr	r2, [pc, #24]	; 614 <bloom_init@plt+0xc4>
 5f8:	ldr	r3, [r3, r2]
 5fc:	cmp	r3, #0
 600:	bxeq	lr
 604:	bx	r3
 608:	andeq	r0, r1, r0, ror sl
 60c:	andeq	r0, r1, ip, ror #20
 610:	andeq	r0, r1, r4, lsl sl
 614:	andeq	r0, r0, r0, asr #32
 618:	ldr	r3, [pc, #76]	; 66c <bloom_init@plt+0x11c>
 61c:	ldr	r2, [pc, #76]	; 670 <bloom_init@plt+0x120>
 620:	add	r3, pc, r3
 624:	add	r2, pc, r2
 628:	ldrb	r3, [r3]
 62c:	cmp	r3, #0
 630:	bxne	lr
 634:	ldr	r3, [pc, #56]	; 674 <bloom_init@plt+0x124>
 638:	push	{r4, lr}
 63c:	ldr	r3, [r2, r3]
 640:	cmp	r3, #0
 644:	beq	654 <bloom_init@plt+0x104>
 648:	ldr	r3, [pc, #40]	; 678 <bloom_init@plt+0x128>
 64c:	ldr	r0, [pc, r3]
 650:	bl	4fc <__cxa_finalize@plt>
 654:	bl	584 <bloom_init@plt+0x34>
 658:	ldr	r3, [pc, #28]	; 67c <bloom_init@plt+0x12c>
 65c:	mov	r2, #1
 660:	add	r3, pc, r3
 664:	strb	r2, [r3]
 668:	pop	{r4, pc}
 66c:	andeq	r0, r1, r0, lsr #20
 670:	ldrdeq	r0, [r1], -r4
 674:	andeq	r0, r0, r4, lsr r0
 678:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
 67c:	andeq	r0, r1, r0, ror #19
 680:	b	5c8 <bloom_init@plt+0x78>
 684:	andeq	r0, r0, r0

00000688 <bloom_init@@Base>:
 688:	vcmp.f64	d0, #0.0
 68c:	mov	r3, #0
 690:	str	r3, [r0, #44]	; 0x2c
 694:	vmrs	APSR_nzcv, fpscr
 698:	moveq	r3, #1
 69c:	cmp	r1, #1000	; 0x3e8
 6a0:	orrlt	r3, r3, #1
 6a4:	cmp	r3, #0
 6a8:	beq	6b4 <bloom_init@@Base+0x2c>
 6ac:	mov	r0, #1
 6b0:	bx	lr
 6b4:	strd	r4, [sp, #-16]!
 6b8:	mov	r5, r0
 6bc:	mov	r4, r1
 6c0:	str	r6, [sp, #8]
 6c4:	str	lr, [sp, #12]
 6c8:	str	r1, [r5]
 6cc:	vstr	d0, [r5, #8]
 6d0:	bl	4f0 <log@plt>
 6d4:	vldr	d6, [pc, #156]	; 778 <bloom_init@@Base+0xf0>
 6d8:	vmov	s15, r4
 6dc:	vdiv.f64	d0, d0, d6
 6e0:	vcvt.f64.s32	d7, s15
 6e4:	vneg.f64	d0, d0
 6e8:	vmul.f64	d7, d7, d0
 6ec:	vstr	d0, [r5, #32]
 6f0:	vcvt.s32.f64	s15, d7
 6f4:	vmov	r3, s15
 6f8:	vstr	s15, [r5, #16]
 6fc:	tst	r3, #7
 700:	add	r4, r3, #7
 704:	beq	768 <bloom_init@@Base+0xe0>
 708:	cmp	r3, #0
 70c:	movlt	r3, r4
 710:	asr	r4, r3, #3
 714:	add	r4, r4, #1
 718:	vldr	d7, [pc, #96]	; 780 <bloom_init@@Base+0xf8>
 71c:	str	r4, [r5, #20]
 720:	vmul.f64	d0, d0, d7
 724:	bl	544 <ceil@plt>
 728:	vcvt.s32.f64	s0, d0
 72c:	mov	r0, r4
 730:	mov	r1, #1
 734:	vstr	s0, [r5, #24]
 738:	bl	4e4 <calloc@plt>
 73c:	cmp	r0, #0
 740:	str	r0, [r5, #40]	; 0x28
 744:	moveq	r0, #1
 748:	beq	758 <bloom_init@@Base+0xd0>
 74c:	mov	r3, #1
 750:	mov	r0, #0
 754:	str	r3, [r5, #44]	; 0x2c
 758:	ldrd	r4, [sp]
 75c:	ldr	r6, [sp, #8]
 760:	add	sp, sp, #12
 764:	pop	{pc}		; (ldr pc, [sp], #4)
 768:	cmp	r3, #0
 76c:	movlt	r3, r4
 770:	asr	r4, r3, #3
 774:	b	718 <bloom_init@@Base+0x90>
 778:			; <UNDEFINED> instruction: 0xff82c587
 77c:	svccc	0x00debfbd
 780:			; <UNDEFINED> instruction: 0xfefa39ec
 784:	svccc	0x00e62e42

00000788 <bloom_init_size@@Base>:
 788:	b	550 <bloom_init@plt>

0000078c <bloom_check@@Base>:
 78c:	ldr	r3, [r0, #44]	; 0x2c
 790:	strd	r4, [sp, #-24]!	; 0xffffffe8
 794:	mov	r5, r0
 798:	strd	r6, [sp, #8]
 79c:	str	r8, [sp, #16]
 7a0:	str	lr, [sp, #20]
 7a4:	cmp	r3, #0
 7a8:	beq	858 <bloom_check@@Base+0xcc>
 7ac:	mov	r6, r1
 7b0:	mov	r7, r2
 7b4:	mov	r1, r7
 7b8:	movw	r2, #45708	; 0xb28c
 7bc:	movt	r2, #38727	; 0x9747
 7c0:	mov	r0, r6
 7c4:	bl	514 <murmurhash2@plt>
 7c8:	mov	r2, r0
 7cc:	mov	r4, r0
 7d0:	mov	r1, r7
 7d4:	mov	r0, r6
 7d8:	bl	514 <murmurhash2@plt>
 7dc:	ldr	ip, [r5, #24]
 7e0:	cmp	ip, #0
 7e4:	beq	870 <bloom_check@@Base+0xe4>
 7e8:	ldr	r1, [r5, #16]
 7ec:	mov	r6, #1
 7f0:	ldr	lr, [r5, #40]	; 0x28
 7f4:	udiv	r2, r4, r1
 7f8:	mls	r2, r1, r2, r4
 7fc:	ldrb	r3, [lr, r2, lsr #3]
 800:	and	r2, r2, #7
 804:	ands	r3, r3, r6, lsl r2
 808:	addne	r4, r4, r0
 80c:	movne	r5, #0
 810:	bne	82c <bloom_check@@Base+0xa0>
 814:	mov	r0, r3
 818:	ldrd	r4, [sp]
 81c:	ldrd	r6, [sp, #8]
 820:	ldr	r8, [sp, #16]
 824:	add	sp, sp, #20
 828:	pop	{pc}		; (ldr pc, [sp], #4)
 82c:	add	r5, r5, #1
 830:	cmp	r5, ip
 834:	beq	870 <bloom_check@@Base+0xe4>
 838:	udiv	r2, r4, r1
 83c:	mls	r2, r1, r2, r4
 840:	add	r4, r4, r0
 844:	ldrb	r3, [lr, r2, lsr #3]
 848:	and	r2, r2, #7
 84c:	ands	r3, r3, r6, lsl r2
 850:	beq	814 <bloom_check@@Base+0x88>
 854:	b	82c <bloom_check@@Base+0xa0>
 858:	mov	r1, r0
 85c:	ldr	r0, [pc, #20]	; 878 <bloom_check@@Base+0xec>
 860:	add	r0, pc, r0
 864:	bl	508 <printf@plt>
 868:	mvn	r0, #0
 86c:	b	818 <bloom_check@@Base+0x8c>
 870:	mov	r0, #1
 874:	b	818 <bloom_check@@Base+0x8c>
 878:	andeq	r0, r0, r0, lsl r3

0000087c <bloom_add@@Base>:
 87c:	ldr	r3, [r0, #44]	; 0x2c
 880:	strd	r4, [sp, #-32]!	; 0xffffffe0
 884:	mov	r5, r0
 888:	strd	r6, [sp, #8]
 88c:	strd	r8, [sp, #16]
 890:	str	sl, [sp, #24]
 894:	cmp	r3, #0
 898:	str	lr, [sp, #28]
 89c:	beq	96c <bloom_add@@Base+0xf0>
 8a0:	mov	r6, r1
 8a4:	mov	r7, r2
 8a8:	mov	r1, r7
 8ac:	movw	r2, #45708	; 0xb28c
 8b0:	movt	r2, #38727	; 0x9747
 8b4:	mov	r0, r6
 8b8:	bl	514 <murmurhash2@plt>
 8bc:	mov	r2, r0
 8c0:	mov	r4, r0
 8c4:	mov	r1, r7
 8c8:	mov	r0, r6
 8cc:	bl	514 <murmurhash2@plt>
 8d0:	ldr	r3, [r5, #24]
 8d4:	cmp	r3, #0
 8d8:	beq	984 <bloom_add@@Base+0x108>
 8dc:	ldr	r7, [r5, #16]
 8e0:	mov	lr, #0
 8e4:	mov	r9, #1
 8e8:	mov	r2, lr
 8ec:	ldr	r6, [r5, #40]	; 0x28
 8f0:	udiv	r1, r4, r7
 8f4:	mls	r1, r7, r1, r4
 8f8:	ldrb	r8, [r6, r1, lsr #3]
 8fc:	and	ip, r1, #7
 900:	lsl	ip, r9, ip
 904:	tst	ip, r8
 908:	orr	sl, r8, ip
 90c:	beq	948 <bloom_add@@Base+0xcc>
 910:	add	r2, r2, #1
 914:	add	lr, lr, #1
 918:	cmp	r3, r2
 91c:	add	r4, r4, r0
 920:	bhi	8f0 <bloom_add@@Base+0x74>
 924:	sub	r0, r3, lr
 928:	clz	r0, r0
 92c:	lsr	r0, r0, #5
 930:	ldrd	r4, [sp]
 934:	ldrd	r6, [sp, #8]
 938:	ldrd	r8, [sp, #16]
 93c:	ldr	sl, [sp, #24]
 940:	add	sp, sp, #28
 944:	pop	{pc}		; (ldr pc, [sp], #4)
 948:	strb	sl, [r6, r1, lsr #3]
 94c:	add	r2, r2, #1
 950:	add	r4, r4, r0
 954:	ldr	r3, [r5, #24]
 958:	cmp	r2, r3
 95c:	bcs	924 <bloom_add@@Base+0xa8>
 960:	ldr	r7, [r5, #16]
 964:	ldr	r6, [r5, #40]	; 0x28
 968:	b	8f0 <bloom_add@@Base+0x74>
 96c:	mov	r1, r0
 970:	ldr	r0, [pc, #20]	; 98c <bloom_add@@Base+0x110>
 974:	add	r0, pc, r0
 978:	bl	508 <printf@plt>
 97c:	mvn	r0, #0
 980:	b	930 <bloom_add@@Base+0xb4>
 984:	mov	r0, #1
 988:	b	930 <bloom_add@@Base+0xb4>
 98c:	strdeq	r0, [r0], -ip

00000990 <bloom_print@@Base>:
 990:	str	r4, [sp, #-8]!
 994:	mov	r4, r0
 998:	ldr	r0, [pc, #120]	; a18 <bloom_print@@Base+0x88>
 99c:	mov	r1, r4
 9a0:	str	lr, [sp, #4]
 9a4:	add	r0, pc, r0
 9a8:	bl	508 <printf@plt>
 9ac:	ldr	r0, [pc, #104]	; a1c <bloom_print@@Base+0x8c>
 9b0:	ldr	r1, [r4]
 9b4:	add	r0, pc, r0
 9b8:	bl	508 <printf@plt>
 9bc:	ldr	r0, [pc, #92]	; a20 <bloom_print@@Base+0x90>
 9c0:	ldrd	r2, [r4, #8]
 9c4:	add	r0, pc, r0
 9c8:	bl	508 <printf@plt>
 9cc:	ldr	r0, [pc, #80]	; a24 <bloom_print@@Base+0x94>
 9d0:	ldr	r1, [r4, #16]
 9d4:	add	r0, pc, r0
 9d8:	bl	508 <printf@plt>
 9dc:	ldr	r0, [pc, #68]	; a28 <bloom_print@@Base+0x98>
 9e0:	ldrd	r2, [r4, #32]
 9e4:	add	r0, pc, r0
 9e8:	bl	508 <printf@plt>
 9ec:	ldr	r0, [pc, #56]	; a2c <bloom_print@@Base+0x9c>
 9f0:	ldr	r1, [r4, #20]
 9f4:	add	r0, pc, r0
 9f8:	bl	508 <printf@plt>
 9fc:	ldr	r0, [pc, #44]	; a30 <bloom_print@@Base+0xa0>
 a00:	ldr	lr, [sp, #4]
 a04:	ldr	r1, [r4, #24]
 a08:	add	r0, pc, r0
 a0c:	ldr	r4, [sp]
 a10:	add	sp, sp, #8
 a14:	b	508 <printf@plt>
 a18:	andeq	r0, r0, ip, ror #3
 a1c:	andeq	r0, r0, ip, ror #3
 a20:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 a24:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 a28:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 a2c:	strdeq	r0, [r0], -r8
 a30:	strdeq	r0, [r0], -r4

00000a34 <bloom_free@@Base>:
 a34:	ldr	r3, [r0, #44]	; 0x2c
 a38:	str	r4, [sp, #-8]!
 a3c:	mov	r4, r0
 a40:	str	lr, [sp, #4]
 a44:	cmp	r3, #0
 a48:	bne	a60 <bloom_free@@Base+0x2c>
 a4c:	mov	r3, #0
 a50:	str	r3, [r4, #44]	; 0x2c
 a54:	ldr	r4, [sp]
 a58:	add	sp, sp, #4
 a5c:	pop	{pc}		; (ldr pc, [sp], #4)
 a60:	ldr	r0, [r0, #40]	; 0x28
 a64:	bl	520 <free@plt>
 a68:	b	a4c <bloom_free@@Base+0x18>

00000a6c <bloom_reset@@Base>:
 a6c:	ldr	r3, [r0, #44]	; 0x2c
 a70:	cmp	r3, #0
 a74:	bne	a80 <bloom_reset@@Base+0x14>
 a78:	mov	r0, #1
 a7c:	bx	lr
 a80:	mov	r1, #0
 a84:	str	r4, [sp, #-8]!
 a88:	ldr	r2, [r0, #20]
 a8c:	ldr	r0, [r0, #40]	; 0x28
 a90:	str	lr, [sp, #4]
 a94:	bl	538 <memset@plt>
 a98:	ldr	r4, [sp]
 a9c:	add	sp, sp, #4
 aa0:	mov	r0, #0
 aa4:	pop	{pc}		; (ldr pc, [sp], #4)

00000aa8 <bloom_version@@Base>:
 aa8:	ldr	r0, [pc, #4]	; ab4 <bloom_version@@Base+0xc>
 aac:	add	r0, pc, r0
 ab0:	bx	lr
 ab4:	andeq	r0, r0, r8, ror #2

00000ab8 <murmurhash2@@Base>:
 ab8:	cmp	r1, #3
 abc:	eor	r2, r2, r1
 ac0:	str	r4, [sp, #-8]!
 ac4:	str	lr, [sp, #4]
 ac8:	ble	b68 <murmurhash2@@Base+0xb0>
 acc:	sub	r1, r1, #4
 ad0:	movw	ip, #59797	; 0xe995
 ad4:	movt	ip, #23505	; 0x5bd1
 ad8:	lsr	r4, r1, #2
 adc:	add	lr, r4, #1
 ae0:	add	lr, r0, lr, lsl #2
 ae4:	ldr	r3, [r0], #4
 ae8:	mul	r2, ip, r2
 aec:	mul	r3, ip, r3
 af0:	cmp	r0, lr
 af4:	eor	r3, r3, r3, lsr #24
 af8:	mul	r3, ip, r3
 afc:	eor	r2, r2, r3
 b00:	bne	ae4 <murmurhash2@@Base+0x2c>
 b04:	sub	r1, r1, r4, lsl #2
 b08:	cmp	r1, #2
 b0c:	beq	b48 <murmurhash2@@Base+0x90>
 b10:	cmp	r1, #3
 b14:	beq	b40 <murmurhash2@@Base+0x88>
 b18:	cmp	r1, #1
 b1c:	beq	b50 <murmurhash2@@Base+0x98>
 b20:	eor	r3, r2, r2, lsr #13
 b24:	movw	r0, #59797	; 0xe995
 b28:	movt	r0, #23505	; 0x5bd1
 b2c:	ldr	r4, [sp]
 b30:	add	sp, sp, #4
 b34:	mul	r0, r0, r3
 b38:	eor	r0, r0, r0, lsr #15
 b3c:	pop	{pc}		; (ldr pc, [sp], #4)
 b40:	ldrb	r3, [lr, #2]
 b44:	eor	r2, r2, r3, lsl #16
 b48:	ldrb	r3, [lr, #1]
 b4c:	eor	r2, r2, r3, lsl #8
 b50:	ldrb	r3, [lr]
 b54:	movw	r1, #59797	; 0xe995
 b58:	movt	r1, #23505	; 0x5bd1
 b5c:	eor	r3, r3, r2
 b60:	mul	r2, r1, r3
 b64:	b	b20 <murmurhash2@@Base+0x68>
 b68:	mov	lr, r0
 b6c:	b	b08 <murmurhash2@@Base+0x50>

Disassembly of section .fini:

00000b70 <.fini>:
 b70:	push	{r3, lr}
 b74:	pop	{r3, pc}
