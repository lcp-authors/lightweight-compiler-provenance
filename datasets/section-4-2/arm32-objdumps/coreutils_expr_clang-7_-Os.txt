
../repos/coreutils/src/expr:     file format elf32-littlearm


Disassembly of section .init:

00011384 <.init>:
   11384:	push	{r3, lr}
   11388:	bl	11774 <__assert_fail@plt+0x4c>
   1138c:	pop	{r3, pc}

Disassembly of section .plt:

00011390 <pthread_mutex_unlock@plt-0x14>:
   11390:	push	{lr}		; (str lr, [sp, #-4]!)
   11394:	ldr	lr, [pc, #4]	; 113a0 <pthread_mutex_unlock@plt-0x4>
   11398:	add	lr, pc, lr
   1139c:	ldr	pc, [lr, #8]!
   113a0:	andeq	r3, r2, r0, ror #24

000113a4 <pthread_mutex_unlock@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #143360	; 0x23000
   113ac:	ldr	pc, [ip, #3168]!	; 0xc60

000113b0 <calloc@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #143360	; 0x23000
   113b8:	ldr	pc, [ip, #3160]!	; 0xc58

000113bc <fputs_unlocked@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #143360	; 0x23000
   113c4:	ldr	pc, [ip, #3152]!	; 0xc50

000113c8 <wctype@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #143360	; 0x23000
   113d0:	ldr	pc, [ip, #3144]!	; 0xc48

000113d4 <wcrtomb@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #143360	; 0x23000
   113dc:	ldr	pc, [ip, #3136]!	; 0xc40

000113e0 <iswctype@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #143360	; 0x23000
   113e8:	ldr	pc, [ip, #3128]!	; 0xc38

000113ec <strcmp@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #143360	; 0x23000
   113f4:	ldr	pc, [ip, #3120]!	; 0xc30

000113f8 <__gmpz_tdiv_q@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #143360	; 0x23000
   11400:	ldr	pc, [ip, #3112]!	; 0xc28

00011404 <strcspn@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #143360	; 0x23000
   1140c:	ldr	pc, [ip, #3104]!	; 0xc20

00011410 <pthread_mutex_destroy@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #143360	; 0x23000
   11418:	ldr	pc, [ip, #3096]!	; 0xc18

0001141c <fflush@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #143360	; 0x23000
   11424:	ldr	pc, [ip, #3088]!	; 0xc10

00011428 <wcwidth@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #143360	; 0x23000
   11430:	ldr	pc, [ip, #3080]!	; 0xc08

00011434 <memmove@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #143360	; 0x23000
   1143c:	ldr	pc, [ip, #3072]!	; 0xc00

00011440 <free@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #143360	; 0x23000
   11448:	ldr	pc, [ip, #3064]!	; 0xbf8

0001144c <pthread_mutex_lock@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #143360	; 0x23000
   11454:	ldr	pc, [ip, #3056]!	; 0xbf0

00011458 <_exit@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #143360	; 0x23000
   11460:	ldr	pc, [ip, #3048]!	; 0xbe8

00011464 <memcpy@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #143360	; 0x23000
   1146c:	ldr	pc, [ip, #3040]!	; 0xbe0

00011470 <__gmpz_sub@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #143360	; 0x23000
   11478:	ldr	pc, [ip, #3032]!	; 0xbd8

0001147c <tolower@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #143360	; 0x23000
   11484:	ldr	pc, [ip, #3024]!	; 0xbd0

00011488 <pthread_mutex_init@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #143360	; 0x23000
   11490:	ldr	pc, [ip, #3016]!	; 0xbc8

00011494 <towlower@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #143360	; 0x23000
   1149c:	ldr	pc, [ip, #3008]!	; 0xbc0

000114a0 <mbsinit@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #143360	; 0x23000
   114a8:	ldr	pc, [ip, #3000]!	; 0xbb8

000114ac <memcmp@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #143360	; 0x23000
   114b4:	ldr	pc, [ip, #2992]!	; 0xbb0

000114b8 <dcgettext@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #143360	; 0x23000
   114c0:	ldr	pc, [ip, #2984]!	; 0xba8

000114c4 <__gmpz_get_str@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #143360	; 0x23000
   114cc:	ldr	pc, [ip, #2976]!	; 0xba0

000114d0 <realloc@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #143360	; 0x23000
   114d8:	ldr	pc, [ip, #2968]!	; 0xb98

000114dc <__gmpz_mul@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #143360	; 0x23000
   114e4:	ldr	pc, [ip, #2960]!	; 0xb90

000114e8 <textdomain@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #143360	; 0x23000
   114f0:	ldr	pc, [ip, #2952]!	; 0xb88

000114f4 <iswcntrl@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #143360	; 0x23000
   114fc:	ldr	pc, [ip, #2944]!	; 0xb80

00011500 <__gmpz_out_str@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #143360	; 0x23000
   11508:	ldr	pc, [ip, #2936]!	; 0xb78

0001150c <iswprint@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #143360	; 0x23000
   11514:	ldr	pc, [ip, #2928]!	; 0xb70

00011518 <lseek64@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #143360	; 0x23000
   11520:	ldr	pc, [ip, #2920]!	; 0xb68

00011524 <__ctype_get_mb_cur_max@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #143360	; 0x23000
   1152c:	ldr	pc, [ip, #2912]!	; 0xb60

00011530 <__fpending@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #143360	; 0x23000
   11538:	ldr	pc, [ip, #2904]!	; 0xb58

0001153c <ferror_unlocked@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #143360	; 0x23000
   11544:	ldr	pc, [ip, #2896]!	; 0xb50

00011548 <mbrtowc@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #143360	; 0x23000
   11550:	ldr	pc, [ip, #2888]!	; 0xb48

00011554 <error@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #143360	; 0x23000
   1155c:	ldr	pc, [ip, #2880]!	; 0xb40

00011560 <strcoll@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #143360	; 0x23000
   11568:	ldr	pc, [ip, #2872]!	; 0xb38

0001156c <puts@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #143360	; 0x23000
   11574:	ldr	pc, [ip, #2864]!	; 0xb30

00011578 <malloc@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #143360	; 0x23000
   11580:	ldr	pc, [ip, #2856]!	; 0xb28

00011584 <__libc_start_main@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #143360	; 0x23000
   1158c:	ldr	pc, [ip, #2848]!	; 0xb20

00011590 <__freading@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #143360	; 0x23000
   11598:	ldr	pc, [ip, #2840]!	; 0xb18

0001159c <__gmon_start__@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #143360	; 0x23000
   115a4:	ldr	pc, [ip, #2832]!	; 0xb10

000115a8 <getopt_long@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #143360	; 0x23000
   115b0:	ldr	pc, [ip, #2824]!	; 0xb08

000115b4 <__ctype_b_loc@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #143360	; 0x23000
   115bc:	ldr	pc, [ip, #2816]!	; 0xb00

000115c0 <exit@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #143360	; 0x23000
   115c8:	ldr	pc, [ip, #2808]!	; 0xaf8

000115cc <strlen@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #143360	; 0x23000
   115d4:	ldr	pc, [ip, #2800]!	; 0xaf0

000115d8 <strchr@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #143360	; 0x23000
   115e0:	ldr	pc, [ip, #2792]!	; 0xae8

000115e4 <__gmpz_tdiv_r@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #143360	; 0x23000
   115ec:	ldr	pc, [ip, #2784]!	; 0xae0

000115f0 <__gmpz_clear@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #143360	; 0x23000
   115f8:	ldr	pc, [ip, #2776]!	; 0xad8

000115fc <__errno_location@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #143360	; 0x23000
   11604:	ldr	pc, [ip, #2768]!	; 0xad0

00011608 <iswalnum@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #143360	; 0x23000
   11610:	ldr	pc, [ip, #2760]!	; 0xac8

00011614 <__cxa_atexit@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #143360	; 0x23000
   1161c:	ldr	pc, [ip, #2752]!	; 0xac0

00011620 <memset@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #143360	; 0x23000
   11628:	ldr	pc, [ip, #2744]!	; 0xab8

0001162c <btowc@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #143360	; 0x23000
   11634:	ldr	pc, [ip, #2736]!	; 0xab0

00011638 <__printf_chk@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #143360	; 0x23000
   11640:	ldr	pc, [ip, #2728]!	; 0xaa8

00011644 <fileno@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #143360	; 0x23000
   1164c:	ldr	pc, [ip, #2720]!	; 0xaa0

00011650 <__fprintf_chk@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #143360	; 0x23000
   11658:	ldr	pc, [ip, #2712]!	; 0xa98

0001165c <memchr@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #143360	; 0x23000
   11664:	ldr	pc, [ip, #2704]!	; 0xa90

00011668 <fclose@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #143360	; 0x23000
   11670:	ldr	pc, [ip, #2696]!	; 0xa88

00011674 <fseeko64@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #143360	; 0x23000
   1167c:	ldr	pc, [ip, #2688]!	; 0xa80

00011680 <__gmpz_init_set_ui@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #143360	; 0x23000
   11688:	ldr	pc, [ip, #2680]!	; 0xa78

0001168c <setlocale@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #143360	; 0x23000
   11694:	ldr	pc, [ip, #2672]!	; 0xa70

00011698 <toupper@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #143360	; 0x23000
   116a0:	ldr	pc, [ip, #2664]!	; 0xa68

000116a4 <strrchr@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #143360	; 0x23000
   116ac:	ldr	pc, [ip, #2656]!	; 0xa60

000116b0 <nl_langinfo@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #143360	; 0x23000
   116b8:	ldr	pc, [ip, #2648]!	; 0xa58

000116bc <__gmpz_add@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #143360	; 0x23000
   116c4:	ldr	pc, [ip, #2640]!	; 0xa50

000116c8 <__gmpz_init_set_str@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #143360	; 0x23000
   116d0:	ldr	pc, [ip, #2632]!	; 0xa48

000116d4 <bindtextdomain@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #143360	; 0x23000
   116dc:	ldr	pc, [ip, #2624]!	; 0xa40

000116e0 <towupper@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #143360	; 0x23000
   116e8:	ldr	pc, [ip, #2616]!	; 0xa38

000116ec <fputs@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #143360	; 0x23000
   116f4:	ldr	pc, [ip, #2608]!	; 0xa30

000116f8 <strncmp@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #143360	; 0x23000
   11700:	ldr	pc, [ip, #2600]!	; 0xa28

00011704 <abort@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #143360	; 0x23000
   1170c:	ldr	pc, [ip, #2592]!	; 0xa20

00011710 <putchar_unlocked@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #143360	; 0x23000
   11718:	ldr	pc, [ip, #2584]!	; 0xa18

0001171c <__mempcpy_chk@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #143360	; 0x23000
   11724:	ldr	pc, [ip, #2576]!	; 0xa10

00011728 <__assert_fail@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #143360	; 0x23000
   11730:	ldr	pc, [ip, #2568]!	; 0xa08

Disassembly of section .text:

00011738 <.text>:
   11738:	mov	fp, #0
   1173c:	mov	lr, #0
   11740:	pop	{r1}		; (ldr r1, [sp], #4)
   11744:	mov	r2, sp
   11748:	push	{r2}		; (str r2, [sp, #-4]!)
   1174c:	push	{r0}		; (str r0, [sp, #-4]!)
   11750:	ldr	ip, [pc, #16]	; 11768 <__assert_fail@plt+0x40>
   11754:	push	{ip}		; (str ip, [sp, #-4]!)
   11758:	ldr	r0, [pc, #12]	; 1176c <__assert_fail@plt+0x44>
   1175c:	ldr	r3, [pc, #12]	; 11770 <__assert_fail@plt+0x48>
   11760:	bl	11584 <__libc_start_main@plt>
   11764:	bl	11704 <abort@plt>
   11768:	ldrdeq	r3, [r2], -r4
   1176c:	andeq	r1, r1, ip, lsl fp
   11770:	andeq	r3, r2, r4, ror r0
   11774:	ldr	r3, [pc, #20]	; 11790 <__assert_fail@plt+0x68>
   11778:	ldr	r2, [pc, #20]	; 11794 <__assert_fail@plt+0x6c>
   1177c:	add	r3, pc, r3
   11780:	ldr	r2, [r3, r2]
   11784:	cmp	r2, #0
   11788:	bxeq	lr
   1178c:	b	1159c <__gmon_start__@plt>
   11790:	andeq	r3, r2, ip, ror r8
   11794:	andeq	r0, r0, ip, lsr r1
   11798:	ldr	r0, [pc, #24]	; 117b8 <__assert_fail@plt+0x90>
   1179c:	ldr	r3, [pc, #24]	; 117bc <__assert_fail@plt+0x94>
   117a0:	cmp	r3, r0
   117a4:	bxeq	lr
   117a8:	ldr	r3, [pc, #16]	; 117c0 <__assert_fail@plt+0x98>
   117ac:	cmp	r3, #0
   117b0:	bxeq	lr
   117b4:	bx	r3
   117b8:	muleq	r3, r0, r1
   117bc:	muleq	r3, r0, r1
   117c0:	andeq	r0, r0, r0
   117c4:	ldr	r0, [pc, #36]	; 117f0 <__assert_fail@plt+0xc8>
   117c8:	ldr	r1, [pc, #36]	; 117f4 <__assert_fail@plt+0xcc>
   117cc:	sub	r1, r1, r0
   117d0:	asr	r1, r1, #2
   117d4:	add	r1, r1, r1, lsr #31
   117d8:	asrs	r1, r1, #1
   117dc:	bxeq	lr
   117e0:	ldr	r3, [pc, #16]	; 117f8 <__assert_fail@plt+0xd0>
   117e4:	cmp	r3, #0
   117e8:	bxeq	lr
   117ec:	bx	r3
   117f0:	muleq	r3, r0, r1
   117f4:	muleq	r3, r0, r1
   117f8:	andeq	r0, r0, r0
   117fc:	push	{r4, lr}
   11800:	ldr	r4, [pc, #24]	; 11820 <__assert_fail@plt+0xf8>
   11804:	ldrb	r3, [r4]
   11808:	cmp	r3, #0
   1180c:	popne	{r4, pc}
   11810:	bl	11798 <__assert_fail@plt+0x70>
   11814:	mov	r3, #1
   11818:	strb	r3, [r4]
   1181c:	pop	{r4, pc}
   11820:	andeq	r5, r3, ip, lsr #3
   11824:	b	117c4 <__assert_fail@plt+0x9c>
   11828:	push	{fp, lr}
   1182c:	mov	fp, sp
   11830:	sub	sp, sp, #56	; 0x38
   11834:	mov	r8, r0
   11838:	cmp	r0, #0
   1183c:	bne	11adc <__assert_fail@plt+0x3b4>
   11840:	movw	r1, #12579	; 0x3123
   11844:	mov	r0, #0
   11848:	mov	r2, #5
   1184c:	movt	r1, #2
   11850:	bl	114b8 <dcgettext@plt>
   11854:	mov	r1, r0
   11858:	movw	r0, #20924	; 0x51bc
   1185c:	movt	r0, #3
   11860:	ldr	r2, [r0]
   11864:	mov	r0, #1
   11868:	mov	r3, r2
   1186c:	bl	11638 <__printf_chk@plt>
   11870:	mov	r0, #10
   11874:	bl	11710 <putchar_unlocked@plt>
   11878:	movw	r1, #12618	; 0x314a
   1187c:	mov	r0, #0
   11880:	mov	r2, #5
   11884:	movt	r1, #2
   11888:	bl	114b8 <dcgettext@plt>
   1188c:	movw	r9, #20900	; 0x51a4
   11890:	movt	r9, #3
   11894:	ldr	r1, [r9]
   11898:	bl	113bc <fputs_unlocked@plt>
   1189c:	movw	r1, #12663	; 0x3177
   118a0:	mov	r0, #0
   118a4:	mov	r2, #5
   118a8:	movt	r1, #2
   118ac:	bl	114b8 <dcgettext@plt>
   118b0:	ldr	r1, [r9]
   118b4:	bl	113bc <fputs_unlocked@plt>
   118b8:	movw	r1, #12717	; 0x31ad
   118bc:	mov	r0, #0
   118c0:	mov	r2, #5
   118c4:	movt	r1, #2
   118c8:	bl	114b8 <dcgettext@plt>
   118cc:	ldr	r1, [r9]
   118d0:	bl	113bc <fputs_unlocked@plt>
   118d4:	movw	r1, #12991	; 0x32bf
   118d8:	mov	r0, #0
   118dc:	mov	r2, #5
   118e0:	movt	r1, #2
   118e4:	bl	114b8 <dcgettext@plt>
   118e8:	ldr	r1, [r9]
   118ec:	bl	113bc <fputs_unlocked@plt>
   118f0:	movw	r1, #13281	; 0x33e1
   118f4:	mov	r0, #0
   118f8:	mov	r2, #5
   118fc:	movt	r1, #2
   11900:	bl	114b8 <dcgettext@plt>
   11904:	ldr	r1, [r9]
   11908:	bl	113bc <fputs_unlocked@plt>
   1190c:	movw	r1, #13394	; 0x3452
   11910:	mov	r0, #0
   11914:	mov	r2, #5
   11918:	movt	r1, #2
   1191c:	bl	114b8 <dcgettext@plt>
   11920:	ldr	r1, [r9]
   11924:	bl	113bc <fputs_unlocked@plt>
   11928:	movw	r1, #13581	; 0x350d
   1192c:	mov	r0, #0
   11930:	mov	r2, #5
   11934:	movt	r1, #2
   11938:	bl	114b8 <dcgettext@plt>
   1193c:	ldr	r1, [r9]
   11940:	bl	113bc <fputs_unlocked@plt>
   11944:	movw	r1, #13891	; 0x3643
   11948:	mov	r0, #0
   1194c:	mov	r2, #5
   11950:	movt	r1, #2
   11954:	bl	114b8 <dcgettext@plt>
   11958:	ldr	r1, [r9]
   1195c:	bl	113bc <fputs_unlocked@plt>
   11960:	movw	r1, #14092	; 0x370c
   11964:	mov	r0, #0
   11968:	mov	r2, #5
   1196c:	movt	r1, #2
   11970:	bl	114b8 <dcgettext@plt>
   11974:	ldr	r1, [r9]
   11978:	bl	113bc <fputs_unlocked@plt>
   1197c:	movw	r1, #14384	; 0x3830
   11980:	mov	r0, #0
   11984:	mov	r2, #5
   11988:	movt	r1, #2
   1198c:	bl	114b8 <dcgettext@plt>
   11990:	ldr	r1, [r9]
   11994:	bl	113bc <fputs_unlocked@plt>
   11998:	movw	r0, #15288	; 0x3bb8
   1199c:	mov	r6, sp
   119a0:	movt	r0, #2
   119a4:	mov	r1, r6
   119a8:	ldm	r0!, {r2, r3, r4, r5}
   119ac:	stmia	r1!, {r2, r3, r4, r5}
   119b0:	ldm	r0!, {r2, r3, r4, r5, r7}
   119b4:	stmia	r1!, {r2, r3, r4, r5, r7}
   119b8:	ldm	r0, {r2, r3, r4, r5, r7}
   119bc:	stm	r1, {r2, r3, r4, r5, r7}
   119c0:	movw	r1, #14693	; 0x3965
   119c4:	movw	r5, #14540	; 0x38cc
   119c8:	movt	r1, #2
   119cc:	movt	r5, #2
   119d0:	mov	r0, r5
   119d4:	bl	113ec <strcmp@plt>
   119d8:	cmp	r0, #0
   119dc:	ldrne	r1, [r6, #8]!
   119e0:	cmpne	r1, #0
   119e4:	bne	119d0 <__assert_fail@plt+0x2a8>
   119e8:	ldr	r6, [r6, #4]
   119ec:	movw	r1, #14788	; 0x39c4
   119f0:	mov	r0, #0
   119f4:	mov	r2, #5
   119f8:	movt	r1, #2
   119fc:	bl	114b8 <dcgettext@plt>
   11a00:	movw	r2, #14569	; 0x38e9
   11a04:	movw	r3, #14811	; 0x39db
   11a08:	mov	r1, r0
   11a0c:	mov	r0, #1
   11a10:	movt	r2, #2
   11a14:	movt	r3, #2
   11a18:	bl	11638 <__printf_chk@plt>
   11a1c:	cmp	r6, #0
   11a20:	mov	r0, #5
   11a24:	mov	r1, #0
   11a28:	moveq	r6, r5
   11a2c:	bl	1168c <setlocale@plt>
   11a30:	cmp	r0, #0
   11a34:	beq	11a6c <__assert_fail@plt+0x344>
   11a38:	movw	r1, #14851	; 0x3a03
   11a3c:	mov	r2, #3
   11a40:	movt	r1, #2
   11a44:	bl	116f8 <strncmp@plt>
   11a48:	cmp	r0, #0
   11a4c:	beq	11a6c <__assert_fail@plt+0x344>
   11a50:	movw	r1, #14855	; 0x3a07
   11a54:	mov	r0, #0
   11a58:	mov	r2, #5
   11a5c:	movt	r1, #2
   11a60:	bl	114b8 <dcgettext@plt>
   11a64:	ldr	r1, [r9]
   11a68:	bl	113bc <fputs_unlocked@plt>
   11a6c:	movw	r1, #14926	; 0x3a4e
   11a70:	mov	r0, #0
   11a74:	mov	r2, #5
   11a78:	movt	r1, #2
   11a7c:	bl	114b8 <dcgettext@plt>
   11a80:	movw	r2, #14811	; 0x39db
   11a84:	mov	r1, r0
   11a88:	mov	r0, #1
   11a8c:	mov	r3, r5
   11a90:	movt	r2, #2
   11a94:	bl	11638 <__printf_chk@plt>
   11a98:	movw	r1, #14953	; 0x3a69
   11a9c:	mov	r0, #0
   11aa0:	mov	r2, #5
   11aa4:	movt	r1, #2
   11aa8:	bl	114b8 <dcgettext@plt>
   11aac:	movw	r3, #15003	; 0x3a9b
   11ab0:	mov	r1, r0
   11ab4:	movw	r0, #14721	; 0x3981
   11ab8:	cmp	r6, r5
   11abc:	mov	r2, r6
   11ac0:	movt	r0, #2
   11ac4:	movt	r3, #2
   11ac8:	moveq	r3, r0
   11acc:	mov	r0, #1
   11ad0:	bl	11638 <__printf_chk@plt>
   11ad4:	mov	r0, r8
   11ad8:	bl	115c0 <exit@plt>
   11adc:	movw	r0, #20896	; 0x51a0
   11ae0:	movw	r1, #12540	; 0x30fc
   11ae4:	mov	r2, #5
   11ae8:	movt	r0, #3
   11aec:	movt	r1, #2
   11af0:	ldr	r5, [r0]
   11af4:	mov	r0, #0
   11af8:	bl	114b8 <dcgettext@plt>
   11afc:	mov	r2, r0
   11b00:	movw	r0, #20924	; 0x51bc
   11b04:	mov	r1, #1
   11b08:	movt	r0, #3
   11b0c:	ldr	r3, [r0]
   11b10:	mov	r0, r5
   11b14:	bl	11650 <__fprintf_chk@plt>
   11b18:	b	11ad4 <__assert_fail@plt+0x3ac>
   11b1c:	push	{r4, r5, r6, sl, fp, lr}
   11b20:	add	fp, sp, #16
   11b24:	sub	sp, sp, #24
   11b28:	mov	r5, r0
   11b2c:	ldr	r0, [r1]
   11b30:	mov	r4, r1
   11b34:	bl	1383c <__assert_fail@plt+0x2114>
   11b38:	movw	r1, #15003	; 0x3a9b
   11b3c:	mov	r0, #6
   11b40:	movt	r1, #2
   11b44:	bl	1168c <setlocale@plt>
   11b48:	movw	r6, #14573	; 0x38ed
   11b4c:	movw	r1, #14545	; 0x38d1
   11b50:	movt	r6, #2
   11b54:	movt	r1, #2
   11b58:	mov	r0, r6
   11b5c:	bl	116d4 <bindtextdomain@plt>
   11b60:	mov	r0, r6
   11b64:	bl	114e8 <textdomain@plt>
   11b68:	movw	r0, #20808	; 0x5148
   11b6c:	mov	r1, #3
   11b70:	movt	r0, #3
   11b74:	str	r1, [r0]
   11b78:	movw	r0, #12780	; 0x31ec
   11b7c:	movt	r0, #1
   11b80:	bl	230d8 <__assert_fail@plt+0x119b0>
   11b84:	movw	r2, #14610	; 0x3912
   11b88:	movw	r3, #14598	; 0x3906
   11b8c:	movw	r6, #6184	; 0x1828
   11b90:	movw	r0, #14583	; 0x38f7
   11b94:	movw	r1, #14625	; 0x3921
   11b98:	mov	ip, #0
   11b9c:	movt	r2, #2
   11ba0:	movt	r3, #2
   11ba4:	movt	r6, #1
   11ba8:	movt	r0, #2
   11bac:	movt	r1, #2
   11bb0:	stm	sp, {r0, r6}
   11bb4:	str	r3, [sp, #8]
   11bb8:	movw	r3, #14569	; 0x38e9
   11bbc:	str	r2, [sp, #12]
   11bc0:	movw	r2, #14540	; 0x38cc
   11bc4:	str	r1, [sp, #16]
   11bc8:	mov	r0, r5
   11bcc:	mov	r1, r4
   11bd0:	str	ip, [sp, #20]
   11bd4:	movt	r2, #2
   11bd8:	movt	r3, #2
   11bdc:	bl	132fc <__assert_fail@plt+0x1bd4>
   11be0:	cmp	r5, #2
   11be4:	bcc	11c8c <__assert_fail@plt+0x564>
   11be8:	mov	r6, r4
   11bec:	movw	r1, #14637	; 0x392d
   11bf0:	ldr	r0, [r6, #4]!
   11bf4:	movt	r1, #2
   11bf8:	bl	113ec <strcmp@plt>
   11bfc:	cmp	r0, #0
   11c00:	bne	11c14 <__assert_fail@plt+0x4ec>
   11c04:	sub	r0, r5, #1
   11c08:	cmp	r0, #2
   11c0c:	bcc	11c8c <__assert_fail@plt+0x564>
   11c10:	add	r6, r4, #8
   11c14:	movw	r5, #20912	; 0x51b0
   11c18:	mov	r0, #1
   11c1c:	movt	r5, #3
   11c20:	str	r6, [r5]
   11c24:	bl	11cfc <__assert_fail@plt+0x5d4>
   11c28:	mov	r4, r0
   11c2c:	ldr	r0, [r5]
   11c30:	ldr	r0, [r0]
   11c34:	cmp	r0, #0
   11c38:	bne	11cb8 <__assert_fail@plt+0x590>
   11c3c:	ldr	r0, [r4]
   11c40:	cmp	r0, #1
   11c44:	beq	11c74 <__assert_fail@plt+0x54c>
   11c48:	cmp	r0, #0
   11c4c:	bne	11cf8 <__assert_fail@plt+0x5d0>
   11c50:	movw	r0, #20900	; 0x51a4
   11c54:	add	r2, r4, #4
   11c58:	mov	r1, #10
   11c5c:	movt	r0, #3
   11c60:	ldr	r0, [r0]
   11c64:	bl	11500 <__gmpz_out_str@plt>
   11c68:	mov	r0, #10
   11c6c:	bl	11710 <putchar_unlocked@plt>
   11c70:	b	11c7c <__assert_fail@plt+0x554>
   11c74:	ldr	r0, [r4, #4]
   11c78:	bl	1156c <puts@plt>
   11c7c:	mov	r0, r4
   11c80:	bl	11de0 <__assert_fail@plt+0x6b8>
   11c84:	sub	sp, fp, #16
   11c88:	pop	{r4, r5, r6, sl, fp, pc}
   11c8c:	movw	r1, #14640	; 0x3930
   11c90:	mov	r0, #0
   11c94:	mov	r2, #5
   11c98:	movt	r1, #2
   11c9c:	bl	114b8 <dcgettext@plt>
   11ca0:	mov	r2, r0
   11ca4:	mov	r0, #0
   11ca8:	mov	r1, #0
   11cac:	bl	11554 <error@plt>
   11cb0:	mov	r0, #2
   11cb4:	bl	11828 <__assert_fail@plt+0x100>
   11cb8:	movw	r1, #14656	; 0x3940
   11cbc:	mov	r0, #0
   11cc0:	mov	r2, #5
   11cc4:	movt	r1, #2
   11cc8:	bl	114b8 <dcgettext@plt>
   11ccc:	mov	r4, r0
   11cd0:	ldr	r0, [r5]
   11cd4:	mov	r1, #8
   11cd8:	ldr	r2, [r0]
   11cdc:	mov	r0, #0
   11ce0:	bl	14e60 <__assert_fail@plt+0x3738>
   11ce4:	mov	r3, r0
   11ce8:	mov	r0, #2
   11cec:	mov	r1, #0
   11cf0:	mov	r2, r4
   11cf4:	bl	11554 <error@plt>
   11cf8:	bl	11704 <abort@plt>
   11cfc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11d00:	add	fp, sp, #24
   11d04:	mov	r4, r0
   11d08:	bl	11e4c <__assert_fail@plt+0x724>
   11d0c:	movw	r5, #20912	; 0x51b0
   11d10:	mov	r6, r0
   11d14:	movt	r5, #3
   11d18:	ldr	r7, [r5]
   11d1c:	ldr	r0, [r7]
   11d20:	cmp	r0, #0
   11d24:	beq	11dd8 <__assert_fail@plt+0x6b0>
   11d28:	movw	r8, #15004	; 0x3a9c
   11d2c:	mov	r9, #0
   11d30:	movt	r8, #2
   11d34:	mov	r1, r8
   11d38:	bl	113ec <strcmp@plt>
   11d3c:	clz	r1, r0
   11d40:	cmp	r0, #0
   11d44:	lsr	r1, r1, #5
   11d48:	add	r1, r7, r1, lsl #2
   11d4c:	str	r1, [r5]
   11d50:	bne	11dd8 <__assert_fail@plt+0x6b0>
   11d54:	mov	r0, #0
   11d58:	cmp	r4, #0
   11d5c:	movne	r0, r6
   11d60:	blne	11de0 <__assert_fail@plt+0x6b8>
   11d64:	bl	11e4c <__assert_fail@plt+0x724>
   11d68:	mov	r7, r0
   11d6c:	mov	r0, r6
   11d70:	bl	11de0 <__assert_fail@plt+0x6b8>
   11d74:	cmp	r0, #0
   11d78:	beq	11db8 <__assert_fail@plt+0x690>
   11d7c:	mov	r0, r6
   11d80:	bl	11f30 <__assert_fail@plt+0x808>
   11d84:	mov	r0, r7
   11d88:	bl	11de0 <__assert_fail@plt+0x6b8>
   11d8c:	cmp	r0, #0
   11d90:	beq	11dc4 <__assert_fail@plt+0x69c>
   11d94:	mov	r0, r7
   11d98:	bl	11f30 <__assert_fail@plt+0x808>
   11d9c:	mov	r0, #16
   11da0:	bl	225b8 <__assert_fail@plt+0x10e90>
   11da4:	mov	r6, r0
   11da8:	str	r9, [r0], #4
   11dac:	mov	r1, #0
   11db0:	bl	11680 <__gmpz_init_set_ui@plt>
   11db4:	b	11dc8 <__assert_fail@plt+0x6a0>
   11db8:	mov	r0, r7
   11dbc:	bl	11f30 <__assert_fail@plt+0x808>
   11dc0:	b	11dc8 <__assert_fail@plt+0x6a0>
   11dc4:	mov	r6, r7
   11dc8:	ldr	r7, [r5]
   11dcc:	ldr	r0, [r7]
   11dd0:	cmp	r0, #0
   11dd4:	bne	11d34 <__assert_fail@plt+0x60c>
   11dd8:	mov	r0, r6
   11ddc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11de0:	ldr	r1, [r0]
   11de4:	cmp	r1, #1
   11de8:	beq	11e0c <__assert_fail@plt+0x6e4>
   11dec:	cmp	r1, #0
   11df0:	ldreq	r0, [r0, #8]
   11df4:	clzeq	r0, r0
   11df8:	lsreq	r0, r0, #5
   11dfc:	bxeq	lr
   11e00:	push	{fp, lr}
   11e04:	mov	fp, sp
   11e08:	bl	11704 <abort@plt>
   11e0c:	ldr	r1, [r0, #4]
   11e10:	mov	r0, #1
   11e14:	ldrb	r2, [r1]
   11e18:	cmp	r2, #0
   11e1c:	bxeq	lr
   11e20:	cmp	r2, #45	; 0x2d
   11e24:	addeq	r1, r1, #1
   11e28:	ldrb	r2, [r1], #1
   11e2c:	uxtb	r2, r2
   11e30:	cmp	r2, #48	; 0x30
   11e34:	movne	r0, #0
   11e38:	bxne	lr
   11e3c:	ldrb	r2, [r1], #1
   11e40:	cmp	r2, #0
   11e44:	bne	11e2c <__assert_fail@plt+0x704>
   11e48:	bx	lr
   11e4c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11e50:	add	fp, sp, #24
   11e54:	mov	r4, r0
   11e58:	bl	11f64 <__assert_fail@plt+0x83c>
   11e5c:	movw	r6, #20912	; 0x51b0
   11e60:	mov	r5, r0
   11e64:	movt	r6, #3
   11e68:	ldr	r7, [r6]
   11e6c:	ldr	r0, [r7]
   11e70:	cmp	r0, #0
   11e74:	beq	11f28 <__assert_fail@plt+0x800>
   11e78:	movw	r8, #15006	; 0x3a9e
   11e7c:	mov	r9, #0
   11e80:	movt	r8, #2
   11e84:	mov	r1, r8
   11e88:	bl	113ec <strcmp@plt>
   11e8c:	clz	r1, r0
   11e90:	cmp	r0, #0
   11e94:	lsr	r1, r1, #5
   11e98:	add	r1, r7, r1, lsl #2
   11e9c:	str	r1, [r6]
   11ea0:	bne	11f28 <__assert_fail@plt+0x800>
   11ea4:	mov	r0, #0
   11ea8:	cmp	r4, #0
   11eac:	beq	11ebc <__assert_fail@plt+0x794>
   11eb0:	mov	r0, r5
   11eb4:	bl	11de0 <__assert_fail@plt+0x6b8>
   11eb8:	eor	r0, r0, #1
   11ebc:	bl	11f64 <__assert_fail@plt+0x83c>
   11ec0:	mov	r7, r0
   11ec4:	mov	r0, r5
   11ec8:	bl	11de0 <__assert_fail@plt+0x6b8>
   11ecc:	cmp	r0, #0
   11ed0:	bne	11ee4 <__assert_fail@plt+0x7bc>
   11ed4:	mov	r0, r7
   11ed8:	bl	11de0 <__assert_fail@plt+0x6b8>
   11edc:	cmp	r0, #0
   11ee0:	beq	11f10 <__assert_fail@plt+0x7e8>
   11ee4:	mov	r0, r5
   11ee8:	bl	11f30 <__assert_fail@plt+0x808>
   11eec:	mov	r0, r7
   11ef0:	bl	11f30 <__assert_fail@plt+0x808>
   11ef4:	mov	r0, #16
   11ef8:	bl	225b8 <__assert_fail@plt+0x10e90>
   11efc:	mov	r5, r0
   11f00:	str	r9, [r0], #4
   11f04:	mov	r1, #0
   11f08:	bl	11680 <__gmpz_init_set_ui@plt>
   11f0c:	b	11f18 <__assert_fail@plt+0x7f0>
   11f10:	mov	r0, r7
   11f14:	bl	11f30 <__assert_fail@plt+0x808>
   11f18:	ldr	r7, [r6]
   11f1c:	ldr	r0, [r7]
   11f20:	cmp	r0, #0
   11f24:	bne	11e84 <__assert_fail@plt+0x75c>
   11f28:	mov	r0, r5
   11f2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11f30:	push	{r4, sl, fp, lr}
   11f34:	add	fp, sp, #8
   11f38:	mov	r4, r0
   11f3c:	ldr	r1, [r0], #4
   11f40:	cmp	r1, #1
   11f44:	bne	11f54 <__assert_fail@plt+0x82c>
   11f48:	ldr	r0, [r0]
   11f4c:	bl	132d4 <__assert_fail@plt+0x1bac>
   11f50:	b	11f58 <__assert_fail@plt+0x830>
   11f54:	bl	115f0 <__gmpz_clear@plt>
   11f58:	mov	r0, r4
   11f5c:	pop	{r4, sl, fp, lr}
   11f60:	b	132d4 <__assert_fail@plt+0x1bac>
   11f64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f68:	add	fp, sp, #28
   11f6c:	push	{r0}		; (str r0, [sp, #-4]!)
   11f70:	bl	12270 <__assert_fail@plt+0xb48>
   11f74:	movw	r7, #20912	; 0x51b0
   11f78:	mov	r4, r0
   11f7c:	movt	r7, #3
   11f80:	ldr	r6, [r7]
   11f84:	ldr	r0, [r6]
   11f88:	cmp	r0, #0
   11f8c:	beq	12260 <__assert_fail@plt+0xb38>
   11f90:	mvn	r8, #47	; 0x2f
   11f94:	b	11fa8 <__assert_fail@plt+0x880>
   11f98:	mov	r6, #3
   11f9c:	b	12100 <__assert_fail@plt+0x9d8>
   11fa0:	mov	r6, #4
   11fa4:	b	12100 <__assert_fail@plt+0x9d8>
   11fa8:	movw	r1, #15008	; 0x3aa0
   11fac:	movt	r1, #2
   11fb0:	bl	113ec <strcmp@plt>
   11fb4:	clz	r1, r0
   11fb8:	cmp	r0, #0
   11fbc:	lsr	r1, r1, #5
   11fc0:	add	r5, r6, r1, lsl #2
   11fc4:	mov	r6, #0
   11fc8:	str	r5, [r7]
   11fcc:	beq	12100 <__assert_fail@plt+0x9d8>
   11fd0:	ldr	r0, [r5]
   11fd4:	cmp	r0, #0
   11fd8:	beq	12260 <__assert_fail@plt+0xb38>
   11fdc:	movw	r1, #15010	; 0x3aa2
   11fe0:	movt	r1, #2
   11fe4:	bl	113ec <strcmp@plt>
   11fe8:	clz	r1, r0
   11fec:	cmp	r0, #0
   11ff0:	lsr	r1, r1, #5
   11ff4:	add	r5, r5, r1, lsl #2
   11ff8:	str	r5, [r7]
   11ffc:	beq	120fc <__assert_fail@plt+0x9d4>
   12000:	ldr	r0, [r5]
   12004:	cmp	r0, #0
   12008:	beq	12260 <__assert_fail@plt+0xb38>
   1200c:	movw	r1, #15017	; 0x3aa9
   12010:	movt	r1, #2
   12014:	bl	113ec <strcmp@plt>
   12018:	clz	r1, r0
   1201c:	mov	r6, #2
   12020:	cmp	r0, #0
   12024:	lsr	r1, r1, #5
   12028:	add	r5, r5, r1, lsl #2
   1202c:	str	r5, [r7]
   12030:	beq	12100 <__assert_fail@plt+0x9d8>
   12034:	ldr	r0, [r5]
   12038:	cmp	r0, #0
   1203c:	beq	12260 <__assert_fail@plt+0xb38>
   12040:	movw	r1, #15013	; 0x3aa5
   12044:	movt	r1, #2
   12048:	bl	113ec <strcmp@plt>
   1204c:	clz	r1, r0
   12050:	cmp	r0, #0
   12054:	lsr	r1, r1, #5
   12058:	add	r5, r5, r1, lsl #2
   1205c:	str	r5, [r7]
   12060:	beq	12100 <__assert_fail@plt+0x9d8>
   12064:	ldr	r0, [r5]
   12068:	cmp	r0, #0
   1206c:	beq	12260 <__assert_fail@plt+0xb38>
   12070:	movw	r1, #15016	; 0x3aa8
   12074:	movt	r1, #2
   12078:	bl	113ec <strcmp@plt>
   1207c:	clz	r1, r0
   12080:	cmp	r0, #0
   12084:	lsr	r1, r1, #5
   12088:	add	r5, r5, r1, lsl #2
   1208c:	str	r5, [r7]
   12090:	beq	11f98 <__assert_fail@plt+0x870>
   12094:	ldr	r0, [r5]
   12098:	cmp	r0, #0
   1209c:	beq	12260 <__assert_fail@plt+0xb38>
   120a0:	movw	r1, #15019	; 0x3aab
   120a4:	movt	r1, #2
   120a8:	bl	113ec <strcmp@plt>
   120ac:	clz	r1, r0
   120b0:	cmp	r0, #0
   120b4:	lsr	r1, r1, #5
   120b8:	add	r5, r5, r1, lsl #2
   120bc:	str	r5, [r7]
   120c0:	beq	11fa0 <__assert_fail@plt+0x878>
   120c4:	ldr	r0, [r5]
   120c8:	cmp	r0, #0
   120cc:	beq	12260 <__assert_fail@plt+0xb38>
   120d0:	movw	r1, #15022	; 0x3aae
   120d4:	movt	r1, #2
   120d8:	bl	113ec <strcmp@plt>
   120dc:	clz	r1, r0
   120e0:	mov	r6, #5
   120e4:	cmp	r0, #0
   120e8:	lsr	r1, r1, #5
   120ec:	add	r1, r5, r1, lsl #2
   120f0:	str	r1, [r7]
   120f4:	beq	12100 <__assert_fail@plt+0x9d8>
   120f8:	b	12260 <__assert_fail@plt+0xb38>
   120fc:	mov	r6, #1
   12100:	ldr	r5, [sp]
   12104:	mov	r0, r5
   12108:	bl	12270 <__assert_fail@plt+0xb48>
   1210c:	mov	sl, r0
   12110:	mov	r9, #0
   12114:	cmp	r5, #0
   12118:	beq	12224 <__assert_fail@plt+0xafc>
   1211c:	mov	r0, r4
   12120:	bl	123ac <__assert_fail@plt+0xc84>
   12124:	mov	r0, sl
   12128:	bl	123ac <__assert_fail@plt+0xc84>
   1212c:	ldr	r0, [r4, #4]
   12130:	mov	r1, r0
   12134:	ldrb	r2, [r1], #1
   12138:	cmp	r2, #45	; 0x2d
   1213c:	movne	r1, r0
   12140:	ldrb	r2, [r1], #1
   12144:	uxtab	r2, r8, r2
   12148:	cmp	r2, #9
   1214c:	bhi	12198 <__assert_fail@plt+0xa70>
   12150:	ldrb	r2, [r1], #1
   12154:	cmp	r2, #0
   12158:	bne	12144 <__assert_fail@plt+0xa1c>
   1215c:	mov	r5, sl
   12160:	ldr	r1, [r5, #4]!
   12164:	mov	r2, r1
   12168:	ldrb	r3, [r2], #1
   1216c:	cmp	r3, #45	; 0x2d
   12170:	movne	r2, r1
   12174:	ldrb	r3, [r2], #1
   12178:	uxtab	r3, r8, r3
   1217c:	cmp	r3, #9
   12180:	bhi	1219c <__assert_fail@plt+0xa74>
   12184:	ldrb	r3, [r2], #1
   12188:	cmp	r3, #0
   1218c:	bne	12178 <__assert_fail@plt+0xa50>
   12190:	bl	21ebc <__assert_fail@plt+0x10794>
   12194:	b	121b4 <__assert_fail@plt+0xa8c>
   12198:	add	r5, sl, #4
   1219c:	bl	115fc <__errno_location@plt>
   121a0:	mov	r1, #0
   121a4:	str	r1, [r0]
   121a8:	ldr	r0, [r4, #4]
   121ac:	ldr	r1, [r5]
   121b0:	bl	11560 <strcoll@plt>
   121b4:	mov	r9, r0
   121b8:	cmp	r6, #5
   121bc:	bhi	1226c <__assert_fail@plt+0xb44>
   121c0:	add	r0, pc, #0
   121c4:	ldr	pc, [r0, r6, lsl #2]
   121c8:	andeq	r2, r1, r0, ror #3
   121cc:	andeq	r2, r1, r8, lsl #4
   121d0:	strdeq	r2, [r1], -r0
   121d4:	strdeq	r2, [r1], -ip
   121d8:	andeq	r2, r1, r8, ror #3
   121dc:	andeq	r2, r1, r8, lsl r2
   121e0:	lsr	r9, r9, #31
   121e4:	b	12224 <__assert_fail@plt+0xafc>
   121e8:	cmn	r9, #1
   121ec:	b	1221c <__assert_fail@plt+0xaf4>
   121f0:	clz	r0, r9
   121f4:	lsr	r9, r0, #5
   121f8:	b	12224 <__assert_fail@plt+0xafc>
   121fc:	cmp	r9, #0
   12200:	movwne	r9, #1
   12204:	b	12224 <__assert_fail@plt+0xafc>
   12208:	cmp	r9, #1
   1220c:	mov	r9, #0
   12210:	movwlt	r9, #1
   12214:	b	12224 <__assert_fail@plt+0xafc>
   12218:	cmp	r9, #0
   1221c:	mov	r9, #0
   12220:	movwgt	r9, #1
   12224:	mov	r0, r4
   12228:	bl	11f30 <__assert_fail@plt+0x808>
   1222c:	mov	r0, sl
   12230:	bl	11f30 <__assert_fail@plt+0x808>
   12234:	mov	r0, #16
   12238:	bl	225b8 <__assert_fail@plt+0x10e90>
   1223c:	mov	r1, #0
   12240:	mov	r4, r0
   12244:	str	r1, [r0], #4
   12248:	mov	r1, r9
   1224c:	bl	11680 <__gmpz_init_set_ui@plt>
   12250:	ldr	r6, [r7]
   12254:	ldr	r0, [r6]
   12258:	cmp	r0, #0
   1225c:	bne	11fa8 <__assert_fail@plt+0x880>
   12260:	mov	r0, r4
   12264:	sub	sp, fp, #28
   12268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1226c:	bl	11704 <abort@plt>
   12270:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12274:	add	fp, sp, #28
   12278:	sub	sp, sp, #4
   1227c:	mov	r4, r0
   12280:	bl	123fc <__assert_fail@plt+0xcd4>
   12284:	movw	r5, #20912	; 0x51b0
   12288:	mov	sl, r0
   1228c:	movt	r5, #3
   12290:	ldr	r7, [r5]
   12294:	ldr	r0, [r7]
   12298:	cmp	r0, #0
   1229c:	beq	1237c <__assert_fail@plt+0xc54>
   122a0:	movw	r9, #15024	; 0x3ab0
   122a4:	add	r6, sl, #4
   122a8:	movt	r9, #2
   122ac:	mov	r1, r9
   122b0:	bl	113ec <strcmp@plt>
   122b4:	clz	r1, r0
   122b8:	cmp	r0, #0
   122bc:	lsr	r1, r1, #5
   122c0:	add	r7, r7, r1, lsl #2
   122c4:	str	r7, [r5]
   122c8:	beq	12304 <__assert_fail@plt+0xbdc>
   122cc:	ldr	r0, [r7]
   122d0:	cmp	r0, #0
   122d4:	beq	1237c <__assert_fail@plt+0xc54>
   122d8:	movw	r1, #14638	; 0x392e
   122dc:	movt	r1, #2
   122e0:	bl	113ec <strcmp@plt>
   122e4:	clz	r1, r0
   122e8:	mov	r8, #1
   122ec:	cmp	r0, #0
   122f0:	lsr	r1, r1, #5
   122f4:	add	r1, r7, r1, lsl #2
   122f8:	str	r1, [r5]
   122fc:	beq	12308 <__assert_fail@plt+0xbe0>
   12300:	b	1237c <__assert_fail@plt+0xc54>
   12304:	mov	r8, #0
   12308:	mov	r0, r4
   1230c:	bl	123fc <__assert_fail@plt+0xcd4>
   12310:	mov	r7, r0
   12314:	cmp	r4, #0
   12318:	beq	12364 <__assert_fail@plt+0xc3c>
   1231c:	mov	r0, sl
   12320:	bl	12598 <__assert_fail@plt+0xe70>
   12324:	cmp	r0, #0
   12328:	beq	12388 <__assert_fail@plt+0xc60>
   1232c:	mov	r0, r7
   12330:	bl	12598 <__assert_fail@plt+0xe70>
   12334:	cmp	r0, #0
   12338:	beq	12388 <__assert_fail@plt+0xc60>
   1233c:	movw	r3, #5232	; 0x1470
   12340:	movw	r0, #5820	; 0x16bc
   12344:	cmp	r8, #0
   12348:	add	r2, r7, #4
   1234c:	mov	r1, r6
   12350:	movt	r3, #1
   12354:	movt	r0, #1
   12358:	moveq	r3, r0
   1235c:	mov	r0, r6
   12360:	blx	r3
   12364:	mov	r0, r7
   12368:	bl	11f30 <__assert_fail@plt+0x808>
   1236c:	ldr	r7, [r5]
   12370:	ldr	r0, [r7]
   12374:	cmp	r0, #0
   12378:	bne	122ac <__assert_fail@plt+0xb84>
   1237c:	mov	r0, sl
   12380:	sub	sp, fp, #28
   12384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12388:	movw	r1, #15026	; 0x3ab2
   1238c:	mov	r0, #0
   12390:	mov	r2, #5
   12394:	movt	r1, #2
   12398:	bl	114b8 <dcgettext@plt>
   1239c:	mov	r2, r0
   123a0:	mov	r0, #2
   123a4:	mov	r1, #0
   123a8:	bl	11554 <error@plt>
   123ac:	push	{r4, r5, r6, sl, fp, lr}
   123b0:	add	fp, sp, #16
   123b4:	mov	r4, r0
   123b8:	ldr	r0, [r0]
   123bc:	cmp	r0, #1
   123c0:	popeq	{r4, r5, r6, sl, fp, pc}
   123c4:	cmp	r0, #0
   123c8:	bne	123f8 <__assert_fail@plt+0xcd0>
   123cc:	add	r5, r4, #4
   123d0:	mov	r0, #0
   123d4:	mov	r1, #10
   123d8:	mov	r2, r5
   123dc:	bl	114c4 <__gmpz_get_str@plt>
   123e0:	mov	r6, r0
   123e4:	mov	r0, r5
   123e8:	bl	115f0 <__gmpz_clear@plt>
   123ec:	mov	r0, #1
   123f0:	stm	r4, {r0, r6}
   123f4:	pop	{r4, r5, r6, sl, fp, pc}
   123f8:	bl	11704 <abort@plt>
   123fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12400:	add	fp, sp, #28
   12404:	sub	sp, sp, #4
   12408:	mov	r4, r0
   1240c:	bl	12644 <__assert_fail@plt+0xf1c>
   12410:	movw	r9, #20912	; 0x51b0
   12414:	mov	r5, r0
   12418:	movt	r9, #3
   1241c:	ldr	r7, [r9]
   12420:	ldr	r0, [r7]
   12424:	cmp	r0, #0
   12428:	beq	1255c <__assert_fail@plt+0xe34>
   1242c:	movw	sl, #15047	; 0x3ac7
   12430:	add	r6, r5, #4
   12434:	movt	sl, #2
   12438:	mov	r1, sl
   1243c:	bl	113ec <strcmp@plt>
   12440:	clz	r1, r0
   12444:	cmp	r0, #0
   12448:	lsr	r1, r1, #5
   1244c:	add	r7, r7, r1, lsl #2
   12450:	str	r7, [r9]
   12454:	beq	124c0 <__assert_fail@plt+0xd98>
   12458:	ldr	r0, [r7]
   1245c:	cmp	r0, #0
   12460:	beq	1255c <__assert_fail@plt+0xe34>
   12464:	movw	r1, #17112	; 0x42d8
   12468:	movt	r1, #2
   1246c:	bl	113ec <strcmp@plt>
   12470:	clz	r1, r0
   12474:	cmp	r0, #0
   12478:	lsr	r1, r1, #5
   1247c:	add	r7, r7, r1, lsl #2
   12480:	str	r7, [r9]
   12484:	beq	124c8 <__assert_fail@plt+0xda0>
   12488:	ldr	r0, [r7]
   1248c:	cmp	r0, #0
   12490:	beq	1255c <__assert_fail@plt+0xe34>
   12494:	movw	r1, #15049	; 0x3ac9
   12498:	movt	r1, #2
   1249c:	bl	113ec <strcmp@plt>
   124a0:	clz	r1, r0
   124a4:	mov	r8, #2
   124a8:	cmp	r0, #0
   124ac:	lsr	r1, r1, #5
   124b0:	add	r1, r7, r1, lsl #2
   124b4:	str	r1, [r9]
   124b8:	beq	124cc <__assert_fail@plt+0xda4>
   124bc:	b	1255c <__assert_fail@plt+0xe34>
   124c0:	mov	r8, #0
   124c4:	b	124cc <__assert_fail@plt+0xda4>
   124c8:	mov	r8, #1
   124cc:	mov	r0, r4
   124d0:	bl	12644 <__assert_fail@plt+0xf1c>
   124d4:	mov	r7, r0
   124d8:	cmp	r4, #0
   124dc:	beq	12544 <__assert_fail@plt+0xe1c>
   124e0:	mov	r0, r5
   124e4:	bl	12598 <__assert_fail@plt+0xe70>
   124e8:	cmp	r0, #0
   124ec:	beq	12568 <__assert_fail@plt+0xe40>
   124f0:	mov	r0, r7
   124f4:	bl	12598 <__assert_fail@plt+0xe70>
   124f8:	cmp	r0, #0
   124fc:	beq	12568 <__assert_fail@plt+0xe40>
   12500:	movw	r3, #5340	; 0x14dc
   12504:	cmp	r8, #0
   12508:	movt	r3, #1
   1250c:	beq	12534 <__assert_fail@plt+0xe0c>
   12510:	ldr	r0, [r7, #8]
   12514:	cmp	r0, #0
   12518:	beq	1258c <__assert_fail@plt+0xe64>
   1251c:	movw	r3, #5604	; 0x15e4
   12520:	movw	r0, #5112	; 0x13f8
   12524:	cmp	r8, #1
   12528:	movt	r3, #1
   1252c:	movt	r0, #1
   12530:	moveq	r3, r0
   12534:	add	r2, r7, #4
   12538:	mov	r0, r6
   1253c:	mov	r1, r6
   12540:	blx	r3
   12544:	mov	r0, r7
   12548:	bl	11f30 <__assert_fail@plt+0x808>
   1254c:	ldr	r7, [r9]
   12550:	ldr	r0, [r7]
   12554:	cmp	r0, #0
   12558:	bne	12438 <__assert_fail@plt+0xd10>
   1255c:	mov	r0, r5
   12560:	sub	sp, fp, #28
   12564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12568:	movw	r1, #15026	; 0x3ab2
   1256c:	movt	r1, #2
   12570:	mov	r0, #0
   12574:	mov	r2, #5
   12578:	bl	114b8 <dcgettext@plt>
   1257c:	mov	r2, r0
   12580:	mov	r0, #2
   12584:	mov	r1, #0
   12588:	bl	11554 <error@plt>
   1258c:	movw	r1, #15051	; 0x3acb
   12590:	movt	r1, #2
   12594:	b	12570 <__assert_fail@plt+0xe48>
   12598:	push	{r4, r5, r6, sl, fp, lr}
   1259c:	add	fp, sp, #16
   125a0:	mov	r5, r0
   125a4:	ldr	r0, [r0]
   125a8:	mov	r4, #1
   125ac:	cmp	r0, #0
   125b0:	beq	12620 <__assert_fail@plt+0xef8>
   125b4:	cmp	r0, #1
   125b8:	bne	12628 <__assert_fail@plt+0xf00>
   125bc:	mov	r0, r5
   125c0:	ldr	r6, [r0, #4]!
   125c4:	mov	r1, r6
   125c8:	ldrb	r2, [r1], #1
   125cc:	cmp	r2, #45	; 0x2d
   125d0:	mvn	r2, #47	; 0x2f
   125d4:	movne	r1, r6
   125d8:	ldrb	r3, [r1], #1
   125dc:	uxtab	r3, r2, r3
   125e0:	cmp	r3, #9
   125e4:	bhi	1261c <__assert_fail@plt+0xef4>
   125e8:	ldrb	r3, [r1], #1
   125ec:	cmp	r3, #0
   125f0:	bne	125dc <__assert_fail@plt+0xeb4>
   125f4:	mov	r1, r6
   125f8:	mov	r2, #10
   125fc:	bl	116c8 <__gmpz_init_set_str@plt>
   12600:	cmp	r0, #0
   12604:	bne	1262c <__assert_fail@plt+0xf04>
   12608:	mov	r0, r6
   1260c:	bl	132d4 <__assert_fail@plt+0x1bac>
   12610:	mov	r0, #0
   12614:	str	r0, [r5]
   12618:	b	12620 <__assert_fail@plt+0xef8>
   1261c:	mov	r4, #0
   12620:	mov	r0, r4
   12624:	pop	{r4, r5, r6, sl, fp, pc}
   12628:	bl	11704 <abort@plt>
   1262c:	movw	r2, #15360	; 0x3c00
   12630:	mov	r0, #3
   12634:	mov	r1, #34	; 0x22
   12638:	mov	r3, r6
   1263c:	movt	r2, #2
   12640:	bl	11554 <error@plt>
   12644:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12648:	add	fp, sp, #24
   1264c:	mov	r4, r0
   12650:	bl	126e8 <__assert_fail@plt+0xfc0>
   12654:	movw	r9, #20912	; 0x51b0
   12658:	mov	r6, r0
   1265c:	movt	r9, #3
   12660:	ldr	r5, [r9]
   12664:	ldr	r0, [r5]
   12668:	cmp	r0, #0
   1266c:	beq	126e0 <__assert_fail@plt+0xfb8>
   12670:	movw	r8, #15068	; 0x3adc
   12674:	movt	r8, #2
   12678:	mov	r1, r8
   1267c:	bl	113ec <strcmp@plt>
   12680:	clz	r1, r0
   12684:	cmp	r0, #0
   12688:	lsr	r1, r1, #5
   1268c:	add	r1, r5, r1, lsl #2
   12690:	str	r1, [r9]
   12694:	bne	126e0 <__assert_fail@plt+0xfb8>
   12698:	mov	r0, r4
   1269c:	bl	126e8 <__assert_fail@plt+0xfc0>
   126a0:	mov	r7, r0
   126a4:	cmp	r4, #0
   126a8:	beq	126c8 <__assert_fail@plt+0xfa0>
   126ac:	mov	r0, r6
   126b0:	mov	r1, r7
   126b4:	bl	12ec8 <__assert_fail@plt+0x17a0>
   126b8:	mov	r5, r0
   126bc:	mov	r0, r6
   126c0:	bl	11f30 <__assert_fail@plt+0x808>
   126c4:	mov	r6, r5
   126c8:	mov	r0, r7
   126cc:	bl	11f30 <__assert_fail@plt+0x808>
   126d0:	ldr	r5, [r9]
   126d4:	ldr	r0, [r5]
   126d8:	cmp	r0, #0
   126dc:	bne	12678 <__assert_fail@plt+0xf50>
   126e0:	mov	r0, r6
   126e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   126e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126ec:	add	fp, sp, #28
   126f0:	sub	sp, sp, #124	; 0x7c
   126f4:	movw	r5, #20912	; 0x51b0
   126f8:	mov	r6, r0
   126fc:	movt	r5, #3
   12700:	ldr	r4, [r5]
   12704:	ldr	r0, [r4]
   12708:	cmp	r0, #0
   1270c:	beq	127f4 <__assert_fail@plt+0x10cc>
   12710:	movw	r1, #15024	; 0x3ab0
   12714:	movt	r1, #2
   12718:	bl	113ec <strcmp@plt>
   1271c:	clz	r1, r0
   12720:	cmp	r0, #0
   12724:	lsr	r1, r1, #5
   12728:	add	r4, r4, r1, lsl #2
   1272c:	str	r4, [r5]
   12730:	beq	12870 <__assert_fail@plt+0x1148>
   12734:	ldr	r0, [r4]
   12738:	cmp	r0, #0
   1273c:	beq	127f4 <__assert_fail@plt+0x10cc>
   12740:	movw	r1, #15070	; 0x3ade
   12744:	movt	r1, #2
   12748:	bl	113ec <strcmp@plt>
   1274c:	clz	r1, r0
   12750:	cmp	r0, #0
   12754:	lsr	r1, r1, #5
   12758:	add	r4, r4, r1, lsl #2
   1275c:	str	r4, [r5]
   12760:	beq	12914 <__assert_fail@plt+0x11ec>
   12764:	ldr	r0, [r4]
   12768:	cmp	r0, #0
   1276c:	beq	127f4 <__assert_fail@plt+0x10cc>
   12770:	movw	r1, #15077	; 0x3ae5
   12774:	movt	r1, #2
   12778:	bl	113ec <strcmp@plt>
   1277c:	clz	r1, r0
   12780:	cmp	r0, #0
   12784:	lsr	r1, r1, #5
   12788:	add	r4, r4, r1, lsl #2
   1278c:	str	r4, [r5]
   12790:	beq	12950 <__assert_fail@plt+0x1228>
   12794:	ldr	r0, [r4]
   12798:	cmp	r0, #0
   1279c:	beq	127f4 <__assert_fail@plt+0x10cc>
   127a0:	movw	r1, #15083	; 0x3aeb
   127a4:	movt	r1, #2
   127a8:	bl	113ec <strcmp@plt>
   127ac:	clz	r1, r0
   127b0:	cmp	r0, #0
   127b4:	lsr	r1, r1, #5
   127b8:	add	r4, r4, r1, lsl #2
   127bc:	str	r4, [r5]
   127c0:	beq	1298c <__assert_fail@plt+0x1264>
   127c4:	ldr	r0, [r4]
   127c8:	cmp	r0, #0
   127cc:	beq	127f4 <__assert_fail@plt+0x10cc>
   127d0:	movw	r1, #15089	; 0x3af1
   127d4:	movt	r1, #2
   127d8:	bl	113ec <strcmp@plt>
   127dc:	clz	r1, r0
   127e0:	cmp	r0, #0
   127e4:	lsr	r1, r1, #5
   127e8:	add	r1, r4, r1, lsl #2
   127ec:	str	r1, [r5]
   127f0:	beq	12b5c <__assert_fail@plt+0x1434>
   127f4:	bl	1316c <__assert_fail@plt+0x1a44>
   127f8:	ldr	r7, [r5]
   127fc:	mov	r4, #0
   12800:	ldr	r0, [r7]
   12804:	cmp	r0, #0
   12808:	beq	12864 <__assert_fail@plt+0x113c>
   1280c:	movw	r1, #15136	; 0x3b20
   12810:	movt	r1, #2
   12814:	bl	113ec <strcmp@plt>
   12818:	clz	r1, r0
   1281c:	cmp	r0, #0
   12820:	lsr	r1, r1, #5
   12824:	add	r7, r7, r1, lsl #2
   12828:	str	r7, [r5]
   1282c:	beq	128b0 <__assert_fail@plt+0x1188>
   12830:	ldr	r0, [r7]
   12834:	cmp	r0, #0
   12838:	beq	12864 <__assert_fail@plt+0x113c>
   1283c:	movw	r1, #15509	; 0x3c95
   12840:	movt	r1, #2
   12844:	bl	113ec <strcmp@plt>
   12848:	clz	r1, r0
   1284c:	cmp	r0, #0
   12850:	lsr	r1, r1, #5
   12854:	add	r7, r7, r1, lsl #2
   12858:	str	r7, [r5]
   1285c:	beq	12e64 <__assert_fail@plt+0x173c>
   12860:	ldr	r4, [r7]
   12864:	add	r0, r7, #4
   12868:	str	r0, [r5]
   1286c:	b	12884 <__assert_fail@plt+0x115c>
   12870:	bl	1316c <__assert_fail@plt+0x1a44>
   12874:	ldr	r0, [r5]
   12878:	add	r1, r0, #4
   1287c:	str	r1, [r5]
   12880:	ldr	r4, [r0]
   12884:	mov	r0, #16
   12888:	bl	225b8 <__assert_fail@plt+0x10e90>
   1288c:	mov	r7, r0
   12890:	mov	r0, #1
   12894:	str	r0, [r7]
   12898:	mov	r0, r4
   1289c:	bl	229c8 <__assert_fail@plt+0x112a0>
   128a0:	str	r0, [r7, #4]
   128a4:	mov	r0, r7
   128a8:	sub	sp, fp, #28
   128ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128b0:	mov	r0, r6
   128b4:	bl	11cfc <__assert_fail@plt+0x5d4>
   128b8:	ldr	r4, [r5]
   128bc:	mov	r7, r0
   128c0:	ldr	r0, [r4]
   128c4:	cmp	r0, #0
   128c8:	beq	12e88 <__assert_fail@plt+0x1760>
   128cc:	movw	r1, #15509	; 0x3c95
   128d0:	movt	r1, #2
   128d4:	bl	113ec <strcmp@plt>
   128d8:	clz	r1, r0
   128dc:	cmp	r0, #0
   128e0:	lsr	r1, r1, #5
   128e4:	add	r1, r4, r1, lsl #2
   128e8:	str	r1, [r5]
   128ec:	beq	128a4 <__assert_fail@plt+0x117c>
   128f0:	movw	r1, #15175	; 0x3b47
   128f4:	mov	r0, #0
   128f8:	mov	r2, #5
   128fc:	movt	r1, #2
   12900:	bl	114b8 <dcgettext@plt>
   12904:	mov	r4, r0
   12908:	ldr	r0, [r5]
   1290c:	ldr	r2, [r0]
   12910:	b	12ea8 <__assert_fail@plt+0x1780>
   12914:	mov	r0, r6
   12918:	bl	126e8 <__assert_fail@plt+0xfc0>
   1291c:	mov	r4, r0
   12920:	bl	123ac <__assert_fail@plt+0xc84>
   12924:	ldr	r0, [r4, #4]
   12928:	bl	1354c <__assert_fail@plt+0x1e24>
   1292c:	mov	r5, r0
   12930:	mov	r0, #16
   12934:	bl	225b8 <__assert_fail@plt+0x10e90>
   12938:	mov	r1, #0
   1293c:	mov	r7, r0
   12940:	str	r1, [r0], #4
   12944:	mov	r1, r5
   12948:	bl	11680 <__gmpz_init_set_ui@plt>
   1294c:	b	12e58 <__assert_fail@plt+0x1730>
   12950:	mov	r0, r6
   12954:	bl	126e8 <__assert_fail@plt+0xfc0>
   12958:	mov	r5, r0
   1295c:	mov	r0, r6
   12960:	bl	126e8 <__assert_fail@plt+0xfc0>
   12964:	mov	r4, r0
   12968:	cmp	r6, #0
   1296c:	beq	12984 <__assert_fail@plt+0x125c>
   12970:	mov	r0, r5
   12974:	mov	r1, r4
   12978:	bl	12ec8 <__assert_fail@plt+0x17a0>
   1297c:	mov	r7, r0
   12980:	b	12e50 <__assert_fail@plt+0x1728>
   12984:	mov	r7, r5
   12988:	b	12e58 <__assert_fail@plt+0x1730>
   1298c:	mov	r0, r6
   12990:	bl	126e8 <__assert_fail@plt+0xfc0>
   12994:	mov	r5, r0
   12998:	mov	r0, r6
   1299c:	bl	126e8 <__assert_fail@plt+0xfc0>
   129a0:	mov	r6, r0
   129a4:	mov	r0, r5
   129a8:	bl	123ac <__assert_fail@plt+0xc84>
   129ac:	mov	r0, r6
   129b0:	bl	123ac <__assert_fail@plt+0xc84>
   129b4:	ldr	sl, [r6, #4]
   129b8:	mov	r8, #0
   129bc:	mov	r4, #0
   129c0:	ldrb	r0, [sl]
   129c4:	cmp	r0, #0
   129c8:	beq	12c20 <__assert_fail@plt+0x14f8>
   129cc:	ldr	r7, [r5, #4]
   129d0:	bl	11524 <__ctype_get_mb_cur_max@plt>
   129d4:	cmp	r0, #2
   129d8:	bcc	12bcc <__assert_fail@plt+0x14a4>
   129dc:	mov	r4, #0
   129e0:	add	r0, sp, #68	; 0x44
   129e4:	str	r6, [sp, #4]
   129e8:	str	r5, [sp, #8]
   129ec:	str	r4, [sp, #76]	; 0x4c
   129f0:	str	r4, [sp, #72]	; 0x48
   129f4:	strb	r4, [sp, #68]	; 0x44
   129f8:	str	r7, [sp, #84]	; 0x54
   129fc:	strb	r4, [sp, #80]	; 0x50
   12a00:	bl	13600 <__assert_fail@plt+0x1ed8>
   12a04:	ldrb	r0, [sp, #92]	; 0x5c
   12a08:	cmp	r0, #0
   12a0c:	beq	12a1c <__assert_fail@plt+0x12f4>
   12a10:	ldr	r0, [sp, #96]	; 0x60
   12a14:	cmp	r0, #0
   12a18:	beq	12c14 <__assert_fail@plt+0x14ec>
   12a1c:	add	r7, sp, #12
   12a20:	mov	r8, #0
   12a24:	mov	r5, #0
   12a28:	add	r6, r7, #4
   12a2c:	ldr	r0, [sp, #88]	; 0x58
   12a30:	add	r5, r5, #1
   12a34:	cmp	r0, #1
   12a38:	bne	12a5c <__assert_fail@plt+0x1334>
   12a3c:	ldr	r9, [sp, #84]	; 0x54
   12a40:	mov	r0, sl
   12a44:	ldrb	r1, [r9]
   12a48:	bl	13474 <__assert_fail@plt+0x1d4c>
   12a4c:	mov	r1, #1
   12a50:	cmp	r0, #0
   12a54:	beq	12b28 <__assert_fail@plt+0x1400>
   12a58:	b	12c10 <__assert_fail@plt+0x14e8>
   12a5c:	mov	r0, r7
   12a60:	strb	r8, [sp, #12]
   12a64:	str	sl, [sp, #28]
   12a68:	str	r8, [r6]
   12a6c:	str	r8, [r6, #4]
   12a70:	strb	r8, [sp, #24]
   12a74:	bl	13600 <__assert_fail@plt+0x1ed8>
   12a78:	ldr	r0, [sp, #40]	; 0x28
   12a7c:	ldrb	r1, [sp, #36]	; 0x24
   12a80:	cmp	r0, #0
   12a84:	bne	12a90 <__assert_fail@plt+0x1368>
   12a88:	cmp	r1, #0
   12a8c:	bne	12b20 <__assert_fail@plt+0x13f8>
   12a90:	clz	r1, r1
   12a94:	lsr	r1, r1, #5
   12a98:	tst	r1, #1
   12a9c:	bne	12ac0 <__assert_fail@plt+0x1398>
   12aa0:	ldrb	r1, [sp, #92]	; 0x5c
   12aa4:	cmp	r1, #0
   12aa8:	beq	12ac0 <__assert_fail@plt+0x1398>
   12aac:	ldr	r1, [sp, #96]	; 0x60
   12ab0:	cmp	r0, r1
   12ab4:	beq	12c10 <__assert_fail@plt+0x14e8>
   12ab8:	ldr	r4, [sp, #32]
   12abc:	b	12ae8 <__assert_fail@plt+0x13c0>
   12ac0:	ldr	r4, [sp, #32]
   12ac4:	ldr	r0, [sp, #88]	; 0x58
   12ac8:	cmp	r4, r0
   12acc:	bne	12ae8 <__assert_fail@plt+0x13c0>
   12ad0:	ldr	r1, [sp, #84]	; 0x54
   12ad4:	ldr	r0, [sp, #28]
   12ad8:	mov	r2, r4
   12adc:	bl	114ac <memcmp@plt>
   12ae0:	cmp	r0, #0
   12ae4:	beq	12c10 <__assert_fail@plt+0x14e8>
   12ae8:	strb	r8, [sp, #24]
   12aec:	ldr	r0, [sp, #28]
   12af0:	add	r0, r0, r4
   12af4:	str	r0, [sp, #28]
   12af8:	mov	r0, r7
   12afc:	bl	13600 <__assert_fail@plt+0x1ed8>
   12b00:	ldrb	r2, [sp, #36]	; 0x24
   12b04:	clz	r0, r2
   12b08:	lsr	r1, r0, #5
   12b0c:	ldr	r0, [sp, #40]	; 0x28
   12b10:	cmp	r0, #0
   12b14:	bne	12a98 <__assert_fail@plt+0x1370>
   12b18:	cmp	r2, #0
   12b1c:	beq	12a98 <__assert_fail@plt+0x1370>
   12b20:	ldr	r9, [sp, #84]	; 0x54
   12b24:	ldr	r1, [sp, #88]	; 0x58
   12b28:	mov	r4, #0
   12b2c:	add	r0, r9, r1
   12b30:	strb	r4, [sp, #80]	; 0x50
   12b34:	str	r0, [sp, #84]	; 0x54
   12b38:	add	r0, sp, #68	; 0x44
   12b3c:	bl	13600 <__assert_fail@plt+0x1ed8>
   12b40:	ldrb	r0, [sp, #92]	; 0x5c
   12b44:	cmp	r0, #0
   12b48:	beq	12a2c <__assert_fail@plt+0x1304>
   12b4c:	ldr	r0, [sp, #96]	; 0x60
   12b50:	cmp	r0, #0
   12b54:	bne	12a2c <__assert_fail@plt+0x1304>
   12b58:	b	12c14 <__assert_fail@plt+0x14ec>
   12b5c:	mov	r0, r6
   12b60:	bl	126e8 <__assert_fail@plt+0xfc0>
   12b64:	mov	r9, r0
   12b68:	mov	r0, r6
   12b6c:	bl	126e8 <__assert_fail@plt+0xfc0>
   12b70:	mov	r5, r0
   12b74:	mov	r0, r6
   12b78:	bl	126e8 <__assert_fail@plt+0xfc0>
   12b7c:	mov	r4, r0
   12b80:	mov	r0, r9
   12b84:	bl	123ac <__assert_fail@plt+0xc84>
   12b88:	mov	r0, r5
   12b8c:	bl	12598 <__assert_fail@plt+0xe70>
   12b90:	cmp	r0, #0
   12b94:	beq	12be8 <__assert_fail@plt+0x14c0>
   12b98:	mov	r0, r4
   12b9c:	bl	12598 <__assert_fail@plt+0xe70>
   12ba0:	cmp	r0, #0
   12ba4:	beq	12be8 <__assert_fail@plt+0x14c0>
   12ba8:	ldr	r0, [r5, #8]
   12bac:	mvn	r8, #0
   12bb0:	mvn	sl, #0
   12bb4:	cmp	r0, #0
   12bb8:	blt	12c60 <__assert_fail@plt+0x1538>
   12bbc:	cmp	r0, #1
   12bc0:	bls	12c48 <__assert_fail@plt+0x1520>
   12bc4:	mvn	sl, #1
   12bc8:	b	12c60 <__assert_fail@plt+0x1538>
   12bcc:	mov	r0, r7
   12bd0:	mov	r1, sl
   12bd4:	bl	11404 <strcspn@plt>
   12bd8:	ldrb	r4, [r7, r0]
   12bdc:	cmp	r4, #0
   12be0:	addne	r4, r0, #1
   12be4:	b	12c20 <__assert_fail@plt+0x14f8>
   12be8:	mov	r0, #16
   12bec:	bl	225b8 <__assert_fail@plt+0x10e90>
   12bf0:	mov	r7, r0
   12bf4:	mov	r0, #1
   12bf8:	str	r0, [r7]
   12bfc:	movw	r0, #15003	; 0x3a9b
   12c00:	movt	r0, #2
   12c04:	bl	229c8 <__assert_fail@plt+0x112a0>
   12c08:	str	r0, [r7, #4]
   12c0c:	b	12e48 <__assert_fail@plt+0x1720>
   12c10:	mov	r4, r5
   12c14:	ldr	r5, [sp, #8]
   12c18:	ldr	r6, [sp, #4]
   12c1c:	mov	r8, #0
   12c20:	mov	r0, #16
   12c24:	bl	225b8 <__assert_fail@plt+0x10e90>
   12c28:	mov	r7, r0
   12c2c:	str	r8, [r0], #4
   12c30:	mov	r1, r4
   12c34:	bl	11680 <__gmpz_init_set_ui@plt>
   12c38:	mov	r0, r5
   12c3c:	bl	11f30 <__assert_fail@plt+0x808>
   12c40:	mov	r0, r6
   12c44:	b	12e5c <__assert_fail@plt+0x1734>
   12c48:	ldr	r1, [r5, #12]
   12c4c:	cmp	r0, #0
   12c50:	ldr	sl, [r1]
   12c54:	moveq	sl, r0
   12c58:	cmn	sl, #1
   12c5c:	mvneq	sl, #1
   12c60:	ldr	r0, [r4, #8]
   12c64:	cmp	r0, #0
   12c68:	blt	12c94 <__assert_fail@plt+0x156c>
   12c6c:	cmp	r0, #1
   12c70:	bls	12c7c <__assert_fail@plt+0x1554>
   12c74:	mvn	r8, #1
   12c78:	b	12c94 <__assert_fail@plt+0x156c>
   12c7c:	ldr	r1, [r4, #12]
   12c80:	cmp	r0, #0
   12c84:	ldr	r8, [r1]
   12c88:	moveq	r8, r0
   12c8c:	cmn	r8, #1
   12c90:	mvneq	r8, #1
   12c94:	ldr	r6, [r9, #4]
   12c98:	mov	r0, r6
   12c9c:	bl	115cc <strlen@plt>
   12ca0:	mov	r7, r0
   12ca4:	bl	11524 <__ctype_get_mb_cur_max@plt>
   12ca8:	cmp	r0, #2
   12cac:	mov	r0, r7
   12cb0:	bcc	12cbc <__assert_fail@plt+0x1594>
   12cb4:	mov	r0, r6
   12cb8:	bl	1354c <__assert_fail@plt+0x1e24>
   12cbc:	add	r1, r8, #1
   12cc0:	str	r4, [sp, #8]
   12cc4:	cmp	r1, #2
   12cc8:	bcc	12d20 <__assert_fail@plt+0x15f8>
   12ccc:	sub	r1, sl, #1
   12cd0:	cmp	r1, r0
   12cd4:	bcs	12d20 <__assert_fail@plt+0x15f8>
   12cd8:	sub	r0, r0, sl
   12cdc:	str	r7, [sp, #4]
   12ce0:	add	r7, r0, #1
   12ce4:	cmp	r7, r8
   12ce8:	movhi	r7, r8
   12cec:	bl	11524 <__ctype_get_mb_cur_max@plt>
   12cf0:	cmp	r0, #1
   12cf4:	bne	12d34 <__assert_fail@plt+0x160c>
   12cf8:	add	r0, r7, #1
   12cfc:	add	r6, r6, sl
   12d00:	bl	225b8 <__assert_fail@plt+0x10e90>
   12d04:	sub	r1, r6, #1
   12d08:	mov	r2, r7
   12d0c:	mvn	r3, #0
   12d10:	mov	r4, r0
   12d14:	bl	1171c <__mempcpy_chk@plt>
   12d18:	mov	r6, r0
   12d1c:	b	12e14 <__assert_fail@plt+0x16ec>
   12d20:	movw	r0, #15003	; 0x3a9b
   12d24:	movt	r0, #2
   12d28:	bl	229c8 <__assert_fail@plt+0x112a0>
   12d2c:	mov	r4, r0
   12d30:	b	12e1c <__assert_fail@plt+0x16f4>
   12d34:	ldr	r0, [sp, #4]
   12d38:	add	r0, r0, #1
   12d3c:	bl	225b8 <__assert_fail@plt+0x10e90>
   12d40:	mov	r4, r0
   12d44:	mov	r0, #0
   12d48:	str	r0, [sp, #76]	; 0x4c
   12d4c:	str	r0, [sp, #72]	; 0x48
   12d50:	strb	r0, [sp, #68]	; 0x44
   12d54:	str	r6, [sp, #84]	; 0x54
   12d58:	strb	r0, [sp, #80]	; 0x50
   12d5c:	add	r0, sp, #68	; 0x44
   12d60:	bl	13600 <__assert_fail@plt+0x1ed8>
   12d64:	ldr	r0, [sp, #96]	; 0x60
   12d68:	mov	r6, r4
   12d6c:	str	r4, [sp, #4]
   12d70:	cmp	r0, #0
   12d74:	movwne	r0, #1
   12d78:	cmp	r7, #0
   12d7c:	beq	12e10 <__assert_fail@plt+0x16e8>
   12d80:	ldrb	r1, [sp, #92]	; 0x5c
   12d84:	ldr	r6, [sp, #4]
   12d88:	clz	r1, r1
   12d8c:	lsr	r1, r1, #5
   12d90:	orrs	r0, r1, r0
   12d94:	beq	12e10 <__assert_fail@plt+0x16e8>
   12d98:	ldr	r6, [sp, #4]
   12d9c:	mov	r8, #1
   12da0:	mov	r4, #0
   12da4:	cmp	r8, sl
   12da8:	bcc	12dc8 <__assert_fail@plt+0x16a0>
   12dac:	ldr	r1, [sp, #84]	; 0x54
   12db0:	ldr	r2, [sp, #88]	; 0x58
   12db4:	mov	r0, r6
   12db8:	mvn	r3, #0
   12dbc:	bl	1171c <__mempcpy_chk@plt>
   12dc0:	mov	r6, r0
   12dc4:	sub	r7, r7, #1
   12dc8:	strb	r4, [sp, #80]	; 0x50
   12dcc:	ldr	r0, [sp, #84]	; 0x54
   12dd0:	ldr	r1, [sp, #88]	; 0x58
   12dd4:	add	r0, r0, r1
   12dd8:	str	r0, [sp, #84]	; 0x54
   12ddc:	add	r0, sp, #68	; 0x44
   12de0:	bl	13600 <__assert_fail@plt+0x1ed8>
   12de4:	ldr	r0, [sp, #96]	; 0x60
   12de8:	cmp	r0, #0
   12dec:	movwne	r0, #1
   12df0:	cmp	r7, #0
   12df4:	beq	12e10 <__assert_fail@plt+0x16e8>
   12df8:	ldrb	r1, [sp, #92]	; 0x5c
   12dfc:	add	r8, r8, #1
   12e00:	clz	r1, r1
   12e04:	lsr	r1, r1, #5
   12e08:	orrs	r0, r1, r0
   12e0c:	bne	12da4 <__assert_fail@plt+0x167c>
   12e10:	ldr	r4, [sp, #4]
   12e14:	mov	r0, #0
   12e18:	strb	r0, [r6]
   12e1c:	mov	r0, #16
   12e20:	bl	225b8 <__assert_fail@plt+0x10e90>
   12e24:	mov	r7, r0
   12e28:	mov	r0, #1
   12e2c:	str	r0, [r7]
   12e30:	mov	r0, r4
   12e34:	bl	229c8 <__assert_fail@plt+0x112a0>
   12e38:	str	r0, [r7, #4]
   12e3c:	mov	r0, r4
   12e40:	bl	132d4 <__assert_fail@plt+0x1bac>
   12e44:	ldr	r4, [sp, #8]
   12e48:	mov	r0, r9
   12e4c:	bl	11f30 <__assert_fail@plt+0x808>
   12e50:	mov	r0, r5
   12e54:	bl	11f30 <__assert_fail@plt+0x808>
   12e58:	mov	r0, r4
   12e5c:	bl	11f30 <__assert_fail@plt+0x808>
   12e60:	b	128a4 <__assert_fail@plt+0x117c>
   12e64:	movw	r1, #15217	; 0x3b71
   12e68:	mov	r0, #0
   12e6c:	mov	r2, #5
   12e70:	movt	r1, #2
   12e74:	bl	114b8 <dcgettext@plt>
   12e78:	mov	r2, r0
   12e7c:	mov	r0, #2
   12e80:	mov	r1, #0
   12e84:	bl	11554 <error@plt>
   12e88:	movw	r1, #15138	; 0x3b22
   12e8c:	mov	r0, #0
   12e90:	mov	r2, #5
   12e94:	movt	r1, #2
   12e98:	bl	114b8 <dcgettext@plt>
   12e9c:	mov	r4, r0
   12ea0:	ldr	r0, [r5]
   12ea4:	ldr	r2, [r0, #-4]
   12ea8:	mov	r0, #0
   12eac:	mov	r1, #8
   12eb0:	bl	14e60 <__assert_fail@plt+0x3738>
   12eb4:	mov	r3, r0
   12eb8:	mov	r0, #2
   12ebc:	mov	r1, #0
   12ec0:	mov	r2, r4
   12ec4:	bl	11554 <error@plt>
   12ec8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12ecc:	add	fp, sp, #24
   12ed0:	sub	sp, sp, #360	; 0x168
   12ed4:	mov	r5, r1
   12ed8:	mov	r4, r0
   12edc:	bl	123ac <__assert_fail@plt+0xc84>
   12ee0:	mov	r0, r5
   12ee4:	bl	123ac <__assert_fail@plt+0xc84>
   12ee8:	movw	r0, #21232	; 0x52f0
   12eec:	movw	r1, #710	; 0x2c6
   12ef0:	movt	r0, #3
   12ef4:	str	r1, [r0]
   12ef8:	mov	r0, #0
   12efc:	add	r1, sp, #16
   12f00:	str	r0, [sp, #12]
   12f04:	str	r0, [sp, #8]
   12f08:	str	r0, [fp, #-112]	; 0xffffff90
   12f0c:	str	r0, [fp, #-108]	; 0xffffff94
   12f10:	str	r1, [fp, #-96]	; 0xffffffa0
   12f14:	str	r0, [sp, #4]
   12f18:	str	r0, [fp, #-92]	; 0xffffffa4
   12f1c:	ldr	r5, [r5, #4]
   12f20:	mov	r0, r5
   12f24:	bl	115cc <strlen@plt>
   12f28:	mov	r1, r0
   12f2c:	sub	r2, fp, #112	; 0x70
   12f30:	mov	r0, r5
   12f34:	bl	15378 <__assert_fail@plt+0x3c50>
   12f38:	cmp	r0, #0
   12f3c:	bne	1311c <__assert_fail@plt+0x19f4>
   12f40:	ldrb	r0, [fp, #-84]	; 0xffffffac
   12f44:	and	r0, r0, #127	; 0x7f
   12f48:	strb	r0, [fp, #-84]	; 0xffffffac
   12f4c:	ldr	r5, [r4, #4]
   12f50:	mov	r0, r5
   12f54:	bl	115cc <strlen@plt>
   12f58:	mov	r2, r0
   12f5c:	add	r0, sp, #4
   12f60:	mov	r1, r5
   12f64:	mov	r3, #0
   12f68:	str	r0, [sp]
   12f6c:	sub	r0, fp, #112	; 0x70
   12f70:	bl	1828c <__assert_fail@plt+0x6b64>
   12f74:	mov	r5, r0
   12f78:	cmp	r0, #0
   12f7c:	blt	12fd0 <__assert_fail@plt+0x18a8>
   12f80:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12f84:	cmp	r0, #0
   12f88:	beq	13004 <__assert_fail@plt+0x18dc>
   12f8c:	ldr	r0, [sp, #12]
   12f90:	ldr	r0, [r0, #4]
   12f94:	cmn	r0, #1
   12f98:	ble	130c0 <__assert_fail@plt+0x1998>
   12f9c:	ldr	r1, [r4, #4]
   12fa0:	mov	r2, #0
   12fa4:	strb	r2, [r1, r0]
   12fa8:	ldr	r0, [sp, #8]
   12fac:	ldr	r5, [r4, #4]
   12fb0:	ldr	r6, [r0, #4]
   12fb4:	mov	r0, #16
   12fb8:	bl	225b8 <__assert_fail@plt+0x10e90>
   12fbc:	mov	r4, r0
   12fc0:	mov	r0, #1
   12fc4:	str	r0, [r4]
   12fc8:	add	r0, r5, r6
   12fcc:	b	130dc <__assert_fail@plt+0x19b4>
   12fd0:	cmn	r5, #1
   12fd4:	bne	13134 <__assert_fail@plt+0x1a0c>
   12fd8:	ldr	r5, [fp, #-88]	; 0xffffffa8
   12fdc:	mov	r0, #16
   12fe0:	bl	225b8 <__assert_fail@plt+0x10e90>
   12fe4:	mov	r4, r0
   12fe8:	cmp	r5, #0
   12fec:	bne	130cc <__assert_fail@plt+0x19a4>
   12ff0:	mov	r1, #0
   12ff4:	mov	r0, r4
   12ff8:	str	r1, [r0], #4
   12ffc:	mov	r1, #0
   13000:	b	130b8 <__assert_fail@plt+0x1990>
   13004:	bl	11524 <__ctype_get_mb_cur_max@plt>
   13008:	cmp	r0, #1
   1300c:	mov	r6, r5
   13010:	beq	130a0 <__assert_fail@plt+0x1978>
   13014:	ldr	r7, [r4, #4]
   13018:	mov	r6, #0
   1301c:	sub	r0, fp, #80	; 0x50
   13020:	str	r6, [fp, #-72]	; 0xffffffb8
   13024:	str	r6, [fp, #-76]	; 0xffffffb4
   13028:	strb	r6, [fp, #-80]	; 0xffffffb0
   1302c:	strb	r6, [fp, #-68]	; 0xffffffbc
   13030:	str	r7, [fp, #-64]	; 0xffffffc0
   13034:	bl	13600 <__assert_fail@plt+0x1ed8>
   13038:	ldrb	r0, [fp, #-56]	; 0xffffffc8
   1303c:	cmp	r0, #0
   13040:	beq	13050 <__assert_fail@plt+0x1928>
   13044:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13048:	cmp	r0, #0
   1304c:	beq	130a0 <__assert_fail@plt+0x1978>
   13050:	mov	r8, #0
   13054:	sub	r4, fp, #80	; 0x50
   13058:	mov	r6, #0
   1305c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13060:	sub	r1, r0, r7
   13064:	cmp	r1, r5
   13068:	addcc	r6, r6, #1
   1306c:	bcs	130a0 <__assert_fail@plt+0x1978>
   13070:	strb	r8, [fp, #-68]	; 0xffffffbc
   13074:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13078:	add	r0, r0, r1
   1307c:	str	r0, [fp, #-64]	; 0xffffffc0
   13080:	mov	r0, r4
   13084:	bl	13600 <__assert_fail@plt+0x1ed8>
   13088:	ldrb	r0, [fp, #-56]	; 0xffffffc8
   1308c:	cmp	r0, #0
   13090:	beq	1305c <__assert_fail@plt+0x1934>
   13094:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13098:	cmp	r0, #0
   1309c:	bne	1305c <__assert_fail@plt+0x1934>
   130a0:	mov	r0, #16
   130a4:	bl	225b8 <__assert_fail@plt+0x10e90>
   130a8:	mov	r1, #0
   130ac:	mov	r4, r0
   130b0:	str	r1, [r0], #4
   130b4:	mov	r1, r6
   130b8:	bl	11680 <__gmpz_init_set_ui@plt>
   130bc:	b	130e4 <__assert_fail@plt+0x19bc>
   130c0:	mov	r0, #16
   130c4:	bl	225b8 <__assert_fail@plt+0x10e90>
   130c8:	mov	r4, r0
   130cc:	mov	r0, #1
   130d0:	str	r0, [r4]
   130d4:	movw	r0, #15003	; 0x3a9b
   130d8:	movt	r0, #2
   130dc:	bl	229c8 <__assert_fail@plt+0x112a0>
   130e0:	str	r0, [r4, #4]
   130e4:	ldr	r0, [sp, #4]
   130e8:	cmp	r0, #0
   130ec:	beq	13100 <__assert_fail@plt+0x19d8>
   130f0:	ldr	r0, [sp, #8]
   130f4:	bl	132d4 <__assert_fail@plt+0x1bac>
   130f8:	ldr	r0, [sp, #12]
   130fc:	bl	132d4 <__assert_fail@plt+0x1bac>
   13100:	mov	r0, #0
   13104:	str	r0, [fp, #-96]	; 0xffffffa0
   13108:	sub	r0, fp, #112	; 0x70
   1310c:	bl	1662c <__assert_fail@plt+0x4f04>
   13110:	mov	r0, r4
   13114:	sub	sp, fp, #24
   13118:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1311c:	movw	r2, #15360	; 0x3c00
   13120:	mov	r3, r0
   13124:	mov	r0, #2
   13128:	mov	r1, #0
   1312c:	movt	r2, #2
   13130:	bl	11554 <error@plt>
   13134:	mov	r4, #75	; 0x4b
   13138:	cmn	r5, #2
   1313c:	bne	13148 <__assert_fail@plt+0x1a20>
   13140:	bl	115fc <__errno_location@plt>
   13144:	ldr	r4, [r0]
   13148:	movw	r1, #15246	; 0x3b8e
   1314c:	mov	r0, #0
   13150:	mov	r2, #5
   13154:	movt	r1, #2
   13158:	bl	114b8 <dcgettext@plt>
   1315c:	mov	r2, r0
   13160:	mov	r0, #3
   13164:	mov	r1, r4
   13168:	bl	11554 <error@plt>
   1316c:	push	{r4, r5, fp, lr}
   13170:	add	fp, sp, #8
   13174:	movw	r5, #20912	; 0x51b0
   13178:	movt	r5, #3
   1317c:	ldr	r0, [r5]
   13180:	ldr	r0, [r0]
   13184:	cmp	r0, #0
   13188:	popne	{r4, r5, fp, pc}
   1318c:	movw	r1, #15096	; 0x3af8
   13190:	mov	r0, #0
   13194:	mov	r2, #5
   13198:	movt	r1, #2
   1319c:	bl	114b8 <dcgettext@plt>
   131a0:	mov	r4, r0
   131a4:	ldr	r0, [r5]
   131a8:	mov	r1, #8
   131ac:	ldr	r2, [r0, #-4]
   131b0:	mov	r0, #0
   131b4:	bl	14e60 <__assert_fail@plt+0x3738>
   131b8:	mov	r3, r0
   131bc:	mov	r0, #2
   131c0:	mov	r1, #0
   131c4:	mov	r2, r4
   131c8:	bl	11554 <error@plt>
   131cc:	movw	r1, #20916	; 0x51b4
   131d0:	movt	r1, #3
   131d4:	str	r0, [r1]
   131d8:	bx	lr
   131dc:	movw	r1, #20920	; 0x51b8
   131e0:	movt	r1, #3
   131e4:	strb	r0, [r1]
   131e8:	bx	lr
   131ec:	push	{r4, r5, r6, sl, fp, lr}
   131f0:	add	fp, sp, #16
   131f4:	sub	sp, sp, #8
   131f8:	movw	r0, #20900	; 0x51a4
   131fc:	movt	r0, #3
   13200:	ldr	r0, [r0]
   13204:	bl	22b20 <__assert_fail@plt+0x113f8>
   13208:	cmp	r0, #0
   1320c:	beq	13234 <__assert_fail@plt+0x1b0c>
   13210:	movw	r0, #20920	; 0x51b8
   13214:	movt	r0, #3
   13218:	ldrb	r0, [r0]
   1321c:	cmp	r0, #0
   13220:	beq	13254 <__assert_fail@plt+0x1b2c>
   13224:	bl	115fc <__errno_location@plt>
   13228:	ldr	r0, [r0]
   1322c:	cmp	r0, #32
   13230:	bne	13254 <__assert_fail@plt+0x1b2c>
   13234:	movw	r0, #20896	; 0x51a0
   13238:	movt	r0, #3
   1323c:	ldr	r0, [r0]
   13240:	bl	22b20 <__assert_fail@plt+0x113f8>
   13244:	cmp	r0, #0
   13248:	subeq	sp, fp, #16
   1324c:	popeq	{r4, r5, r6, sl, fp, pc}
   13250:	b	132c4 <__assert_fail@plt+0x1b9c>
   13254:	movw	r1, #15344	; 0x3bf0
   13258:	mov	r0, #0
   1325c:	mov	r2, #5
   13260:	movt	r1, #2
   13264:	bl	114b8 <dcgettext@plt>
   13268:	mov	r4, r0
   1326c:	movw	r0, #20916	; 0x51b4
   13270:	movt	r0, #3
   13274:	ldr	r6, [r0]
   13278:	bl	115fc <__errno_location@plt>
   1327c:	ldr	r5, [r0]
   13280:	cmp	r6, #0
   13284:	bne	132a0 <__assert_fail@plt+0x1b78>
   13288:	movw	r2, #15360	; 0x3c00
   1328c:	mov	r0, #0
   13290:	mov	r1, r5
   13294:	mov	r3, r4
   13298:	movt	r2, #2
   1329c:	b	132c0 <__assert_fail@plt+0x1b98>
   132a0:	mov	r0, r6
   132a4:	bl	15000 <__assert_fail@plt+0x38d8>
   132a8:	movw	r2, #15356	; 0x3bfc
   132ac:	mov	r3, r0
   132b0:	str	r4, [sp]
   132b4:	mov	r0, #0
   132b8:	mov	r1, r5
   132bc:	movt	r2, #2
   132c0:	bl	11554 <error@plt>
   132c4:	movw	r0, #20808	; 0x5148
   132c8:	movt	r0, #3
   132cc:	ldr	r0, [r0]
   132d0:	bl	11458 <_exit@plt>
   132d4:	push	{r4, r5, r6, sl, fp, lr}
   132d8:	add	fp, sp, #16
   132dc:	mov	r4, r0
   132e0:	bl	115fc <__errno_location@plt>
   132e4:	ldr	r6, [r0]
   132e8:	mov	r5, r0
   132ec:	mov	r0, r4
   132f0:	bl	11440 <free@plt>
   132f4:	str	r6, [r5]
   132f8:	pop	{r4, r5, r6, sl, fp, pc}
   132fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13300:	add	fp, sp, #24
   13304:	sub	sp, sp, #8
   13308:	movw	r6, #20904	; 0x51a8
   1330c:	mov	r4, #0
   13310:	cmp	r0, #2
   13314:	movt	r6, #3
   13318:	ldr	r7, [r6]
   1331c:	str	r4, [r6]
   13320:	bne	13394 <__assert_fail@plt+0x1c6c>
   13324:	mov	r8, r3
   13328:	movw	r3, #15376	; 0x3c10
   1332c:	mov	r5, r2
   13330:	movw	r2, #15024	; 0x3ab0
   13334:	mov	r0, #2
   13338:	str	r4, [sp]
   1333c:	movt	r2, #2
   13340:	movt	r3, #2
   13344:	bl	115a8 <getopt_long@plt>
   13348:	cmp	r0, #104	; 0x68
   1334c:	beq	13388 <__assert_fail@plt+0x1c60>
   13350:	cmp	r0, #118	; 0x76
   13354:	bne	13394 <__assert_fail@plt+0x1c6c>
   13358:	movw	r0, #20900	; 0x51a4
   1335c:	ldr	r3, [fp, #8]
   13360:	add	r1, fp, #16
   13364:	mov	r2, r8
   13368:	movt	r0, #3
   1336c:	str	r1, [sp, #4]
   13370:	str	r1, [sp]
   13374:	mov	r1, r5
   13378:	ldr	r0, [r0]
   1337c:	bl	22464 <__assert_fail@plt+0x10d3c>
   13380:	mov	r0, #0
   13384:	bl	115c0 <exit@plt>
   13388:	ldr	r1, [fp, #12]
   1338c:	mov	r0, #0
   13390:	blx	r1
   13394:	movw	r0, #20888	; 0x5198
   13398:	str	r7, [r6]
   1339c:	movt	r0, #3
   133a0:	str	r4, [r0]
   133a4:	sub	sp, fp, #24
   133a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   133ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   133b0:	add	fp, sp, #24
   133b4:	sub	sp, sp, #8
   133b8:	movw	r6, #20904	; 0x51a8
   133bc:	mov	r8, r3
   133c0:	ldr	r3, [fp, #12]
   133c4:	mov	r5, r2
   133c8:	mov	r2, #1
   133cc:	movw	r4, #15003	; 0x3a9b
   133d0:	movt	r6, #3
   133d4:	movt	r4, #2
   133d8:	ldr	r7, [r6]
   133dc:	str	r2, [r6]
   133e0:	mov	r2, #0
   133e4:	str	r2, [sp]
   133e8:	movw	r2, #15024	; 0x3ab0
   133ec:	cmp	r3, #0
   133f0:	movt	r2, #2
   133f4:	movw	r3, #15376	; 0x3c10
   133f8:	movne	r2, r4
   133fc:	movt	r3, #2
   13400:	bl	115a8 <getopt_long@plt>
   13404:	cmn	r0, #1
   13408:	beq	13438 <__assert_fail@plt+0x1d10>
   1340c:	ldr	r1, [fp, #16]
   13410:	cmp	r0, #104	; 0x68
   13414:	beq	13430 <__assert_fail@plt+0x1d08>
   13418:	cmp	r0, #118	; 0x76
   1341c:	beq	13444 <__assert_fail@plt+0x1d1c>
   13420:	movw	r0, #20808	; 0x5148
   13424:	movt	r0, #3
   13428:	ldr	r0, [r0]
   1342c:	b	13434 <__assert_fail@plt+0x1d0c>
   13430:	mov	r0, #0
   13434:	blx	r1
   13438:	str	r7, [r6]
   1343c:	sub	sp, fp, #24
   13440:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13444:	movw	r0, #20900	; 0x51a4
   13448:	ldr	r3, [fp, #8]
   1344c:	add	r1, fp, #20
   13450:	mov	r2, r8
   13454:	movt	r0, #3
   13458:	str	r1, [sp, #4]
   1345c:	str	r1, [sp]
   13460:	mov	r1, r5
   13464:	ldr	r0, [r0]
   13468:	bl	22464 <__assert_fail@plt+0x10d3c>
   1346c:	mov	r0, #0
   13470:	bl	115c0 <exit@plt>
   13474:	push	{r4, r5, r6, sl, fp, lr}
   13478:	add	fp, sp, #16
   1347c:	sub	sp, sp, #56	; 0x38
   13480:	mov	r5, r1
   13484:	mov	r6, r0
   13488:	and	r4, r1, #240	; 0xf0
   1348c:	bl	11524 <__ctype_get_mb_cur_max@plt>
   13490:	cmp	r4, #48	; 0x30
   13494:	cmpcs	r0, #2
   13498:	bcs	134b0 <__assert_fail@plt+0x1d88>
   1349c:	mov	r0, r6
   134a0:	mov	r1, r5
   134a4:	sub	sp, fp, #16
   134a8:	pop	{r4, r5, r6, sl, fp, lr}
   134ac:	b	115d8 <strchr@plt>
   134b0:	mov	r4, #0
   134b4:	mov	r0, sp
   134b8:	str	r4, [sp, #8]
   134bc:	str	r4, [sp, #4]
   134c0:	strb	r4, [sp]
   134c4:	str	r6, [sp, #16]
   134c8:	strb	r4, [sp, #12]
   134cc:	bl	13600 <__assert_fail@plt+0x1ed8>
   134d0:	ldrb	r0, [sp, #24]
   134d4:	cmp	r0, #0
   134d8:	beq	134e8 <__assert_fail@plt+0x1dc0>
   134dc:	ldr	r0, [sp, #28]
   134e0:	cmp	r0, #0
   134e4:	beq	13540 <__assert_fail@plt+0x1e18>
   134e8:	uxtb	r6, r5
   134ec:	mov	r5, sp
   134f0:	mov	r4, #0
   134f4:	ldr	r1, [sp, #20]
   134f8:	ldr	r0, [sp, #16]
   134fc:	cmp	r1, #1
   13500:	ldrbeq	r2, [r0]
   13504:	cmpeq	r2, r6
   13508:	beq	1353c <__assert_fail@plt+0x1e14>
   1350c:	add	r0, r0, r1
   13510:	strb	r4, [sp, #12]
   13514:	str	r0, [sp, #16]
   13518:	mov	r0, r5
   1351c:	bl	13600 <__assert_fail@plt+0x1ed8>
   13520:	ldrb	r0, [sp, #24]
   13524:	cmp	r0, #0
   13528:	beq	134f4 <__assert_fail@plt+0x1dcc>
   1352c:	ldr	r0, [sp, #28]
   13530:	cmp	r0, #0
   13534:	bne	134f4 <__assert_fail@plt+0x1dcc>
   13538:	b	13540 <__assert_fail@plt+0x1e18>
   1353c:	mov	r4, r0
   13540:	mov	r0, r4
   13544:	sub	sp, fp, #16
   13548:	pop	{r4, r5, r6, sl, fp, pc}
   1354c:	push	{r4, r5, r6, sl, fp, lr}
   13550:	add	fp, sp, #16
   13554:	sub	sp, sp, #56	; 0x38
   13558:	mov	r5, r0
   1355c:	bl	11524 <__ctype_get_mb_cur_max@plt>
   13560:	cmp	r0, #2
   13564:	bcc	135f0 <__assert_fail@plt+0x1ec8>
   13568:	mov	r4, #0
   1356c:	mov	r0, sp
   13570:	str	r4, [sp, #8]
   13574:	str	r4, [sp, #4]
   13578:	strb	r4, [sp]
   1357c:	str	r5, [sp, #16]
   13580:	strb	r4, [sp, #12]
   13584:	bl	13600 <__assert_fail@plt+0x1ed8>
   13588:	ldrb	r0, [sp, #24]
   1358c:	cmp	r0, #0
   13590:	beq	135a0 <__assert_fail@plt+0x1e78>
   13594:	ldr	r0, [sp, #28]
   13598:	cmp	r0, #0
   1359c:	beq	135e4 <__assert_fail@plt+0x1ebc>
   135a0:	mov	r6, #0
   135a4:	mov	r5, sp
   135a8:	mov	r4, #0
   135ac:	strb	r6, [sp, #12]
   135b0:	ldr	r0, [sp, #16]
   135b4:	ldr	r1, [sp, #20]
   135b8:	add	r0, r0, r1
   135bc:	str	r0, [sp, #16]
   135c0:	mov	r0, r5
   135c4:	bl	13600 <__assert_fail@plt+0x1ed8>
   135c8:	ldrb	r1, [sp, #24]
   135cc:	ldr	r0, [sp, #28]
   135d0:	add	r4, r4, #1
   135d4:	cmp	r1, #0
   135d8:	beq	135ac <__assert_fail@plt+0x1e84>
   135dc:	cmp	r0, #0
   135e0:	bne	135ac <__assert_fail@plt+0x1e84>
   135e4:	mov	r0, r4
   135e8:	sub	sp, fp, #16
   135ec:	pop	{r4, r5, r6, sl, fp, pc}
   135f0:	mov	r0, r5
   135f4:	sub	sp, fp, #16
   135f8:	pop	{r4, r5, r6, sl, fp, lr}
   135fc:	b	115cc <strlen@plt>
   13600:	push	{r4, r5, r6, r7, fp, lr}
   13604:	add	fp, sp, #16
   13608:	mov	r4, r0
   1360c:	ldrb	r0, [r0, #12]
   13610:	cmp	r0, #0
   13614:	popne	{r4, r5, r6, r7, fp, pc}
   13618:	ldrb	r0, [r4]
   1361c:	ldr	r6, [r4, #16]
   13620:	cmp	r0, #0
   13624:	beq	13684 <__assert_fail@plt+0x1f5c>
   13628:	add	r5, r4, #4
   1362c:	bl	11524 <__ctype_get_mb_cur_max@plt>
   13630:	mov	r1, r0
   13634:	mov	r0, r6
   13638:	bl	21e8c <__assert_fail@plt+0x10764>
   1363c:	add	r7, r4, #28
   13640:	mov	r2, r0
   13644:	mov	r1, r6
   13648:	mov	r3, r5
   1364c:	mov	r0, r7
   13650:	bl	22ee0 <__assert_fail@plt+0x117b8>
   13654:	cmn	r0, #2
   13658:	str	r0, [r4, #20]
   1365c:	beq	13700 <__assert_fail@plt+0x1fd8>
   13660:	cmp	r0, #0
   13664:	beq	136bc <__assert_fail@plt+0x1f94>
   13668:	cmn	r0, #1
   1366c:	bne	136e0 <__assert_fail@plt+0x1fb8>
   13670:	mov	r0, #0
   13674:	strb	r0, [r4, #24]
   13678:	mov	r0, #1
   1367c:	str	r0, [r4, #20]
   13680:	b	13714 <__assert_fail@plt+0x1fec>
   13684:	ldrb	r0, [r6]
   13688:	movw	r2, #17184	; 0x4320
   1368c:	movt	r2, #2
   13690:	ubfx	r1, r0, #5, #3
   13694:	ldr	r1, [r2, r1, lsl #2]
   13698:	and	r2, r0, #31
   1369c:	mov	r0, #1
   136a0:	tst	r1, r0, lsl r2
   136a4:	beq	13720 <__assert_fail@plt+0x1ff8>
   136a8:	str	r0, [r4, #20]
   136ac:	ldrb	r1, [r6]
   136b0:	strb	r0, [r4, #24]
   136b4:	str	r1, [r4, #28]
   136b8:	b	13714 <__assert_fail@plt+0x1fec>
   136bc:	mov	r0, #1
   136c0:	str	r0, [r4, #20]
   136c4:	ldr	r0, [r4, #16]
   136c8:	ldrb	r0, [r0]
   136cc:	cmp	r0, #0
   136d0:	bne	13740 <__assert_fail@plt+0x2018>
   136d4:	ldr	r0, [r7]
   136d8:	cmp	r0, #0
   136dc:	bne	13760 <__assert_fail@plt+0x2038>
   136e0:	mov	r0, #1
   136e4:	strb	r0, [r4, #24]
   136e8:	mov	r0, r5
   136ec:	bl	114a0 <mbsinit@plt>
   136f0:	cmp	r0, #0
   136f4:	movne	r0, #0
   136f8:	strbne	r0, [r4]
   136fc:	b	13714 <__assert_fail@plt+0x1fec>
   13700:	ldr	r0, [r4, #16]
   13704:	bl	115cc <strlen@plt>
   13708:	str	r0, [r4, #20]
   1370c:	mov	r0, #0
   13710:	strb	r0, [r4, #24]
   13714:	mov	r0, #1
   13718:	strb	r0, [r4, #12]
   1371c:	pop	{r4, r5, r6, r7, fp, pc}
   13720:	add	r5, r4, #4
   13724:	mov	r0, r5
   13728:	bl	114a0 <mbsinit@plt>
   1372c:	cmp	r0, #0
   13730:	beq	13780 <__assert_fail@plt+0x2058>
   13734:	mov	r0, #1
   13738:	strb	r0, [r4]
   1373c:	b	1362c <__assert_fail@plt+0x1f04>
   13740:	movw	r0, #15511	; 0x3c97
   13744:	movw	r1, #15447	; 0x3c57
   13748:	movw	r3, #15463	; 0x3c67
   1374c:	mov	r2, #171	; 0xab
   13750:	movt	r0, #2
   13754:	movt	r1, #2
   13758:	movt	r3, #2
   1375c:	bl	11728 <__assert_fail@plt>
   13760:	movw	r0, #15534	; 0x3cae
   13764:	movw	r1, #15447	; 0x3c57
   13768:	movw	r3, #15463	; 0x3c67
   1376c:	mov	r2, #172	; 0xac
   13770:	movt	r0, #2
   13774:	movt	r1, #2
   13778:	movt	r3, #2
   1377c:	bl	11728 <__assert_fail@plt>
   13780:	movw	r0, #15424	; 0x3c40
   13784:	movw	r1, #15447	; 0x3c57
   13788:	movw	r3, #15463	; 0x3c67
   1378c:	mov	r2, #143	; 0x8f
   13790:	movt	r0, #2
   13794:	movt	r1, #2
   13798:	movt	r3, #2
   1379c:	bl	11728 <__assert_fail@plt>
   137a0:	ldr	r2, [r0, #16]
   137a4:	add	r1, r2, r1
   137a8:	str	r1, [r0, #16]
   137ac:	bx	lr
   137b0:	push	{r4, r5, r6, sl, fp, lr}
   137b4:	add	fp, sp, #16
   137b8:	mov	r5, r1
   137bc:	ldrb	r1, [r1]
   137c0:	mov	r4, r0
   137c4:	strb	r1, [r0], #4
   137c8:	cmp	r1, #0
   137cc:	beq	137dc <__assert_fail@plt+0x20b4>
   137d0:	ldmib	r5, {r1, r2}
   137d4:	stm	r0, {r1, r2}
   137d8:	b	137e8 <__assert_fail@plt+0x20c0>
   137dc:	mov	r1, #0
   137e0:	str	r1, [r0]
   137e4:	str	r1, [r0, #4]
   137e8:	ldrb	r0, [r5, #12]
   137ec:	strb	r0, [r4, #12]
   137f0:	add	r0, r5, #32
   137f4:	ldr	r1, [r5, #16]
   137f8:	cmp	r1, r0
   137fc:	beq	13808 <__assert_fail@plt+0x20e0>
   13800:	mov	r6, r1
   13804:	b	13818 <__assert_fail@plt+0x20f0>
   13808:	ldr	r2, [r5, #20]
   1380c:	add	r6, r4, #32
   13810:	mov	r0, r6
   13814:	bl	11464 <memcpy@plt>
   13818:	str	r6, [r4, #16]
   1381c:	ldr	r0, [r5, #20]
   13820:	str	r0, [r4, #20]
   13824:	ldrb	r0, [r5, #24]
   13828:	strb	r0, [r4, #24]
   1382c:	cmp	r0, #0
   13830:	ldrne	r0, [r5, #28]
   13834:	strne	r0, [r4, #28]
   13838:	pop	{r4, r5, r6, sl, fp, pc}
   1383c:	push	{r4, r5, fp, lr}
   13840:	add	fp, sp, #8
   13844:	cmp	r0, #0
   13848:	beq	138dc <__assert_fail@plt+0x21b4>
   1384c:	mov	r1, #47	; 0x2f
   13850:	mov	r4, r0
   13854:	bl	116a4 <strrchr@plt>
   13858:	cmp	r0, #0
   1385c:	mov	r5, r4
   13860:	addne	r5, r0, #1
   13864:	sub	r0, r5, r4
   13868:	cmp	r0, #7
   1386c:	blt	138c0 <__assert_fail@plt+0x2198>
   13870:	movw	r1, #15608	; 0x3cf8
   13874:	sub	r0, r5, #7
   13878:	mov	r2, #7
   1387c:	movt	r1, #2
   13880:	bl	116f8 <strncmp@plt>
   13884:	cmp	r0, #0
   13888:	bne	138c0 <__assert_fail@plt+0x2198>
   1388c:	movw	r1, #15616	; 0x3d00
   13890:	mov	r0, r5
   13894:	mov	r2, #3
   13898:	movt	r1, #2
   1389c:	bl	116f8 <strncmp@plt>
   138a0:	cmp	r0, #0
   138a4:	beq	138b0 <__assert_fail@plt+0x2188>
   138a8:	mov	r4, r5
   138ac:	b	138c0 <__assert_fail@plt+0x2198>
   138b0:	movw	r0, #20880	; 0x5190
   138b4:	add	r4, r5, #3
   138b8:	movt	r0, #3
   138bc:	str	r4, [r0]
   138c0:	movw	r0, #20884	; 0x5194
   138c4:	movt	r0, #3
   138c8:	str	r4, [r0]
   138cc:	movw	r0, #20924	; 0x51bc
   138d0:	movt	r0, #3
   138d4:	str	r4, [r0]
   138d8:	pop	{r4, r5, fp, pc}
   138dc:	movw	r0, #20896	; 0x51a0
   138e0:	movt	r0, #3
   138e4:	ldr	r1, [r0]
   138e8:	movw	r0, #15552	; 0x3cc0
   138ec:	movt	r0, #2
   138f0:	bl	116ec <fputs@plt>
   138f4:	bl	11704 <abort@plt>
   138f8:	push	{r4, r5, r6, sl, fp, lr}
   138fc:	add	fp, sp, #16
   13900:	mov	r4, r0
   13904:	movw	r0, #20928	; 0x51c0
   13908:	movt	r0, #3
   1390c:	cmp	r4, #0
   13910:	moveq	r4, r0
   13914:	bl	115fc <__errno_location@plt>
   13918:	ldr	r6, [r0]
   1391c:	mov	r5, r0
   13920:	mov	r0, r4
   13924:	mov	r1, #48	; 0x30
   13928:	bl	22908 <__assert_fail@plt+0x111e0>
   1392c:	str	r6, [r5]
   13930:	pop	{r4, r5, r6, sl, fp, pc}
   13934:	movw	r1, #20928	; 0x51c0
   13938:	cmp	r0, #0
   1393c:	movt	r1, #3
   13940:	movne	r1, r0
   13944:	ldr	r0, [r1]
   13948:	bx	lr
   1394c:	movw	r2, #20928	; 0x51c0
   13950:	cmp	r0, #0
   13954:	movt	r2, #3
   13958:	movne	r2, r0
   1395c:	str	r1, [r2]
   13960:	bx	lr
   13964:	movw	r3, #20928	; 0x51c0
   13968:	cmp	r0, #0
   1396c:	movt	r3, #3
   13970:	movne	r3, r0
   13974:	ubfx	r0, r1, #5, #3
   13978:	and	r1, r1, #31
   1397c:	add	r0, r3, r0, lsl #2
   13980:	ldr	r3, [r0, #8]
   13984:	eor	r2, r2, r3, lsr r1
   13988:	and	r2, r2, #1
   1398c:	eor	r2, r3, r2, lsl r1
   13990:	str	r2, [r0, #8]
   13994:	mov	r0, #1
   13998:	and	r0, r0, r3, lsr r1
   1399c:	bx	lr
   139a0:	movw	r2, #20928	; 0x51c0
   139a4:	cmp	r0, #0
   139a8:	movt	r2, #3
   139ac:	movne	r2, r0
   139b0:	ldr	r0, [r2, #4]
   139b4:	str	r1, [r2, #4]
   139b8:	bx	lr
   139bc:	movw	r3, #20928	; 0x51c0
   139c0:	cmp	r0, #0
   139c4:	movt	r3, #3
   139c8:	movne	r3, r0
   139cc:	cmp	r1, #0
   139d0:	mov	r0, #10
   139d4:	cmpne	r2, #0
   139d8:	str	r0, [r3]
   139dc:	bne	139ec <__assert_fail@plt+0x22c4>
   139e0:	push	{fp, lr}
   139e4:	mov	fp, sp
   139e8:	bl	11704 <abort@plt>
   139ec:	str	r1, [r3, #40]	; 0x28
   139f0:	str	r2, [r3, #44]	; 0x2c
   139f4:	bx	lr
   139f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139fc:	add	fp, sp, #28
   13a00:	sub	sp, sp, #20
   13a04:	mov	r7, r0
   13a08:	ldr	r0, [fp, #8]
   13a0c:	movw	r5, #20928	; 0x51c0
   13a10:	mov	r8, r3
   13a14:	mov	r9, r2
   13a18:	mov	sl, r1
   13a1c:	movt	r5, #3
   13a20:	cmp	r0, #0
   13a24:	movne	r5, r0
   13a28:	bl	115fc <__errno_location@plt>
   13a2c:	mov	r4, r0
   13a30:	ldm	r5, {r0, r1}
   13a34:	ldr	r2, [r5, #40]	; 0x28
   13a38:	ldr	r3, [r5, #44]	; 0x2c
   13a3c:	add	r5, r5, #8
   13a40:	ldr	r6, [r4]
   13a44:	stm	sp, {r0, r1, r5}
   13a48:	str	r2, [sp, #12]
   13a4c:	str	r3, [sp, #16]
   13a50:	mov	r0, r7
   13a54:	mov	r1, sl
   13a58:	mov	r2, r9
   13a5c:	mov	r3, r8
   13a60:	bl	13a70 <__assert_fail@plt+0x2348>
   13a64:	str	r6, [r4]
   13a68:	sub	sp, fp, #28
   13a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a74:	add	fp, sp, #28
   13a78:	sub	sp, sp, #156	; 0x9c
   13a7c:	str	r0, [fp, #-56]	; 0xffffffc8
   13a80:	ldr	r0, [fp, #12]
   13a84:	mov	r4, r1
   13a88:	str	r3, [sp, #80]	; 0x50
   13a8c:	str	r2, [fp, #-84]	; 0xffffffac
   13a90:	and	r1, r0, #4
   13a94:	str	r1, [sp, #24]
   13a98:	and	r1, r0, #1
   13a9c:	str	r1, [sp, #28]
   13aa0:	ubfx	r7, r0, #1, #1
   13aa4:	bl	11524 <__ctype_get_mb_cur_max@plt>
   13aa8:	str	r0, [sp, #32]
   13aac:	ldr	r0, [fp, #24]
   13ab0:	ldr	r9, [fp, #8]
   13ab4:	mov	r2, #0
   13ab8:	mov	r1, #0
   13abc:	mov	r5, #0
   13ac0:	str	r2, [sp, #52]	; 0x34
   13ac4:	mov	r2, #1
   13ac8:	str	r0, [sp, #72]	; 0x48
   13acc:	ldr	r0, [fp, #20]
   13ad0:	str	r0, [sp, #64]	; 0x40
   13ad4:	mov	r0, #0
   13ad8:	str	r0, [sp, #92]	; 0x5c
   13adc:	mov	r0, #0
   13ae0:	str	r0, [fp, #-76]	; 0xffffffb4
   13ae4:	mov	r0, #0
   13ae8:	cmp	r9, #10
   13aec:	str	r1, [sp, #68]	; 0x44
   13af0:	bhi	14af0 <__assert_fail@plt+0x33c8>
   13af4:	add	r1, pc, #28
   13af8:	ldr	ip, [fp, #-84]	; 0xffffffac
   13afc:	ldr	lr, [sp, #80]	; 0x50
   13b00:	mov	r6, r4
   13b04:	mov	r8, #0
   13b08:	mov	r3, #1
   13b0c:	mov	sl, #0
   13b10:	mov	r4, r2
   13b14:	ldr	pc, [r1, r9, lsl #2]
   13b18:	andeq	r3, r1, r8, ror #23
   13b1c:	andeq	r3, r1, r4, lsr #24
   13b20:	strdeq	r3, [r1], -r8
   13b24:	andeq	r3, r1, r0, ror #23
   13b28:	andeq	r3, r1, r8, lsl ip
   13b2c:	andeq	r3, r1, r0, ror ip
   13b30:	andeq	r3, r1, r8, lsl #24
   13b34:	ldrdeq	r3, [r1], -r0
   13b38:	andeq	r3, r1, r4, asr #22
   13b3c:	andeq	r3, r1, r4, asr #22
   13b40:	andeq	r3, r1, ip, ror #22
   13b44:	movw	r0, #15700	; 0x3d54
   13b48:	mov	r1, r9
   13b4c:	movt	r0, #2
   13b50:	bl	15258 <__assert_fail@plt+0x3b30>
   13b54:	str	r0, [sp, #64]	; 0x40
   13b58:	movw	r0, #15244	; 0x3b8c
   13b5c:	mov	r1, r9
   13b60:	movt	r0, #2
   13b64:	bl	15258 <__assert_fail@plt+0x3b30>
   13b68:	str	r0, [sp, #72]	; 0x48
   13b6c:	mov	r8, #0
   13b70:	mov	sl, r7
   13b74:	tst	r7, #1
   13b78:	str	r5, [fp, #-48]	; 0xffffffd0
   13b7c:	bne	13bb8 <__assert_fail@plt+0x2490>
   13b80:	ldr	r0, [sp, #64]	; 0x40
   13b84:	ldrb	r0, [r0]
   13b88:	cmp	r0, #0
   13b8c:	beq	13bb8 <__assert_fail@plt+0x2490>
   13b90:	ldr	r1, [sp, #64]	; 0x40
   13b94:	mov	r8, #0
   13b98:	add	r1, r1, #1
   13b9c:	cmp	r8, r6
   13ba0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13ba4:	strbcc	r0, [r2, r8]
   13ba8:	ldrb	r0, [r1, r8]
   13bac:	add	r8, r8, #1
   13bb0:	cmp	r0, #0
   13bb4:	bne	13b9c <__assert_fail@plt+0x2474>
   13bb8:	ldr	r7, [sp, #72]	; 0x48
   13bbc:	mov	r0, r7
   13bc0:	bl	115cc <strlen@plt>
   13bc4:	ldr	ip, [fp, #-84]	; 0xffffffac
   13bc8:	ldr	lr, [sp, #80]	; 0x50
   13bcc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13bd0:	str	r0, [fp, #-76]	; 0xffffffb4
   13bd4:	str	r7, [sp, #92]	; 0x5c
   13bd8:	mov	r3, #1
   13bdc:	b	13cd0 <__assert_fail@plt+0x25a8>
   13be0:	mov	r0, #1
   13be4:	b	13c24 <__assert_fail@plt+0x24fc>
   13be8:	mov	r9, #0
   13bec:	mov	r8, #0
   13bf0:	mov	r3, r0
   13bf4:	b	13ccc <__assert_fail@plt+0x25a4>
   13bf8:	tst	r7, #1
   13bfc:	bne	13c24 <__assert_fail@plt+0x24fc>
   13c00:	mov	r3, r0
   13c04:	b	13c4c <__assert_fail@plt+0x2524>
   13c08:	mov	r0, #1
   13c0c:	mov	r8, #0
   13c10:	mov	r9, #5
   13c14:	b	13c84 <__assert_fail@plt+0x255c>
   13c18:	mov	r3, #1
   13c1c:	tst	r7, #1
   13c20:	beq	13c4c <__assert_fail@plt+0x2524>
   13c24:	mov	r1, #1
   13c28:	mov	r8, #0
   13c2c:	mov	r9, #2
   13c30:	mov	r3, r0
   13c34:	mov	sl, #1
   13c38:	str	r1, [fp, #-76]	; 0xffffffb4
   13c3c:	movw	r1, #15244	; 0x3b8c
   13c40:	movt	r1, #2
   13c44:	str	r1, [sp, #92]	; 0x5c
   13c48:	b	13cd0 <__assert_fail@plt+0x25a8>
   13c4c:	cmp	r6, #0
   13c50:	mov	r8, #1
   13c54:	mov	r9, #2
   13c58:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   13c5c:	movne	r0, #39	; 0x27
   13c60:	strbne	r0, [r1]
   13c64:	movw	r0, #15244	; 0x3b8c
   13c68:	movt	r0, #2
   13c6c:	b	13cc0 <__assert_fail@plt+0x2598>
   13c70:	mov	r9, #5
   13c74:	tst	r7, #1
   13c78:	beq	13ca0 <__assert_fail@plt+0x2578>
   13c7c:	mov	r0, #1
   13c80:	mov	r8, #0
   13c84:	str	r0, [fp, #-76]	; 0xffffffb4
   13c88:	movw	r0, #15698	; 0x3d52
   13c8c:	mov	r3, #1
   13c90:	mov	sl, #1
   13c94:	movt	r0, #2
   13c98:	str	r0, [sp, #92]	; 0x5c
   13c9c:	b	13cd0 <__assert_fail@plt+0x25a8>
   13ca0:	cmp	r6, #0
   13ca4:	mov	r8, #1
   13ca8:	mov	r3, #1
   13cac:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   13cb0:	movne	r0, #34	; 0x22
   13cb4:	strbne	r0, [r1]
   13cb8:	movw	r0, #15698	; 0x3d52
   13cbc:	movt	r0, #2
   13cc0:	str	r0, [sp, #92]	; 0x5c
   13cc4:	mov	r0, #1
   13cc8:	str	r0, [fp, #-76]	; 0xffffffb4
   13ccc:	mov	sl, #0
   13cd0:	ldr	r0, [fp, #16]
   13cd4:	mov	r7, #0
   13cd8:	str	r9, [fp, #-64]	; 0xffffffc0
   13cdc:	str	sl, [fp, #-72]	; 0xffffffb8
   13ce0:	str	r3, [sp, #84]	; 0x54
   13ce4:	cmp	r0, #0
   13ce8:	movwne	r0, #1
   13cec:	and	r0, r0, sl
   13cf0:	str	r0, [fp, #-88]	; 0xffffffa8
   13cf4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13cf8:	cmp	r0, #0
   13cfc:	movwne	r0, #1
   13d00:	subs	r2, r9, #2
   13d04:	and	r1, r0, sl
   13d08:	str	r2, [fp, #-80]	; 0xffffffb0
   13d0c:	and	r1, r3, r1
   13d10:	str	r1, [sp, #44]	; 0x2c
   13d14:	clz	r1, r2
   13d18:	lsr	r1, r1, #5
   13d1c:	and	r1, r1, sl
   13d20:	str	r1, [sp, #56]	; 0x38
   13d24:	mov	r1, r2
   13d28:	eor	r2, sl, #1
   13d2c:	movwne	r1, #1
   13d30:	str	r2, [sp, #88]	; 0x58
   13d34:	orr	r2, r1, r2
   13d38:	and	r1, r1, r3
   13d3c:	and	r0, r0, r1
   13d40:	str	r2, [sp, #60]	; 0x3c
   13d44:	str	r1, [fp, #-68]	; 0xffffffbc
   13d48:	str	r0, [fp, #-60]	; 0xffffffc4
   13d4c:	eor	r0, r3, #1
   13d50:	str	r0, [sp, #48]	; 0x30
   13d54:	cmn	lr, #1
   13d58:	beq	13d68 <__assert_fail@plt+0x2640>
   13d5c:	cmp	r7, lr
   13d60:	bne	13d74 <__assert_fail@plt+0x264c>
   13d64:	b	14920 <__assert_fail@plt+0x31f8>
   13d68:	ldrb	r0, [ip, r7]
   13d6c:	cmp	r0, #0
   13d70:	beq	14928 <__assert_fail@plt+0x3200>
   13d74:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13d78:	mov	r9, #0
   13d7c:	str	r5, [fp, #-48]	; 0xffffffd0
   13d80:	str	r6, [fp, #-52]	; 0xffffffcc
   13d84:	cmp	r0, #0
   13d88:	beq	13dc8 <__assert_fail@plt+0x26a0>
   13d8c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13d90:	mov	r5, r4
   13d94:	add	r4, r7, r0
   13d98:	cmp	r0, #2
   13d9c:	bcc	13db8 <__assert_fail@plt+0x2690>
   13da0:	cmn	lr, #1
   13da4:	bne	13db8 <__assert_fail@plt+0x2690>
   13da8:	mov	r0, ip
   13dac:	bl	115cc <strlen@plt>
   13db0:	ldr	ip, [fp, #-84]	; 0xffffffac
   13db4:	mov	lr, r0
   13db8:	cmp	r4, lr
   13dbc:	bls	13dd0 <__assert_fail@plt+0x26a8>
   13dc0:	mov	r6, #0
   13dc4:	b	13e10 <__assert_fail@plt+0x26e8>
   13dc8:	mov	r6, #0
   13dcc:	b	13e14 <__assert_fail@plt+0x26ec>
   13dd0:	ldr	r1, [sp, #92]	; 0x5c
   13dd4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13dd8:	add	r0, ip, r7
   13ddc:	mov	r4, lr
   13de0:	bl	114ac <memcmp@plt>
   13de4:	ldr	r2, [sp, #88]	; 0x58
   13de8:	cmp	r0, #0
   13dec:	mov	r1, r0
   13df0:	movwne	r1, #1
   13df4:	orr	r1, r1, r2
   13df8:	tst	r1, #1
   13dfc:	beq	149bc <__assert_fail@plt+0x3294>
   13e00:	ldr	ip, [fp, #-84]	; 0xffffffac
   13e04:	clz	r0, r0
   13e08:	mov	lr, r4
   13e0c:	lsr	r6, r0, #5
   13e10:	mov	r4, r5
   13e14:	ldrb	r5, [ip, r7]
   13e18:	cmp	r5, #126	; 0x7e
   13e1c:	bhi	141e4 <__assert_fail@plt+0x2abc>
   13e20:	add	r3, pc, #16
   13e24:	mov	sl, #1
   13e28:	mov	r2, #110	; 0x6e
   13e2c:	mov	r0, #97	; 0x61
   13e30:	mov	r1, #0
   13e34:	ldr	pc, [r3, r5, lsl #2]
   13e38:	andeq	r4, r1, r8, asr #1
   13e3c:	andeq	r4, r1, r4, ror #3
   13e40:	andeq	r4, r1, r4, ror #3
   13e44:	andeq	r4, r1, r4, ror #3
   13e48:	andeq	r4, r1, r4, ror #3
   13e4c:	andeq	r4, r1, r4, ror #3
   13e50:	andeq	r4, r1, r4, ror #3
   13e54:	andeq	r4, r1, r8, lsl #5
   13e58:	andeq	r4, r1, r8, lsr #1
   13e5c:	andeq	r4, r1, r0, lsr #1
   13e60:	strheq	r4, [r1], -r4	; <UNPREDICTABLE>
   13e64:	andeq	r4, r1, r8, lsr r1
   13e68:	muleq	r1, r8, r0
   13e6c:	strheq	r4, [r1], -r0
   13e70:	andeq	r4, r1, r4, ror #3
   13e74:	andeq	r4, r1, r4, ror #3
   13e78:	andeq	r4, r1, r4, ror #3
   13e7c:	andeq	r4, r1, r4, ror #3
   13e80:	andeq	r4, r1, r4, ror #3
   13e84:	andeq	r4, r1, r4, ror #3
   13e88:	andeq	r4, r1, r4, ror #3
   13e8c:	andeq	r4, r1, r4, ror #3
   13e90:	andeq	r4, r1, r4, ror #3
   13e94:	andeq	r4, r1, r4, ror #3
   13e98:	andeq	r4, r1, r4, ror #3
   13e9c:	andeq	r4, r1, r4, ror #3
   13ea0:	andeq	r4, r1, r4, ror #3
   13ea4:	andeq	r4, r1, r4, ror #3
   13ea8:	andeq	r4, r1, r4, ror #3
   13eac:	andeq	r4, r1, r4, ror #3
   13eb0:	andeq	r4, r1, r4, ror #3
   13eb4:	andeq	r4, r1, r4, ror #3
   13eb8:	andeq	r4, r1, r8, asr #4
   13ebc:	andeq	r4, r1, ip, asr #4
   13ec0:	andeq	r4, r1, ip, asr #4
   13ec4:	andeq	r4, r1, r8, asr #32
   13ec8:	andeq	r4, r1, ip, asr #4
   13ecc:	andeq	r4, r1, r4, lsr r0
   13ed0:	andeq	r4, r1, ip, asr #4
   13ed4:	andeq	r4, r1, r0, asr #2
   13ed8:	andeq	r4, r1, ip, asr #4
   13edc:	andeq	r4, r1, ip, asr #4
   13ee0:	andeq	r4, r1, ip, asr #4
   13ee4:	andeq	r4, r1, r4, lsr r0
   13ee8:	andeq	r4, r1, r4, lsr r0
   13eec:	andeq	r4, r1, r4, lsr r0
   13ef0:	andeq	r4, r1, r4, lsr r0
   13ef4:	andeq	r4, r1, r4, lsr r0
   13ef8:	andeq	r4, r1, r4, lsr r0
   13efc:	andeq	r4, r1, r4, lsr r0
   13f00:	andeq	r4, r1, r4, lsr r0
   13f04:	andeq	r4, r1, r4, lsr r0
   13f08:	andeq	r4, r1, r4, lsr r0
   13f0c:	andeq	r4, r1, r4, lsr r0
   13f10:	andeq	r4, r1, r4, lsr r0
   13f14:	andeq	r4, r1, r4, lsr r0
   13f18:	andeq	r4, r1, r4, lsr r0
   13f1c:	andeq	r4, r1, r4, lsr r0
   13f20:	andeq	r4, r1, r4, lsr r0
   13f24:	andeq	r4, r1, ip, asr #4
   13f28:	andeq	r4, r1, ip, asr #4
   13f2c:	andeq	r4, r1, ip, asr #4
   13f30:	andeq	r4, r1, ip, asr #4
   13f34:	andeq	r4, r1, ip, lsl #2
   13f38:	andeq	r4, r1, r4, ror #3
   13f3c:	andeq	r4, r1, r4, lsr r0
   13f40:	andeq	r4, r1, r4, lsr r0
   13f44:	andeq	r4, r1, r4, lsr r0
   13f48:	andeq	r4, r1, r4, lsr r0
   13f4c:	andeq	r4, r1, r4, lsr r0
   13f50:	andeq	r4, r1, r4, lsr r0
   13f54:	andeq	r4, r1, r4, lsr r0
   13f58:	andeq	r4, r1, r4, lsr r0
   13f5c:	andeq	r4, r1, r4, lsr r0
   13f60:	andeq	r4, r1, r4, lsr r0
   13f64:	andeq	r4, r1, r4, lsr r0
   13f68:	andeq	r4, r1, r4, lsr r0
   13f6c:	andeq	r4, r1, r4, lsr r0
   13f70:	andeq	r4, r1, r4, lsr r0
   13f74:	andeq	r4, r1, r4, lsr r0
   13f78:	andeq	r4, r1, r4, lsr r0
   13f7c:	andeq	r4, r1, r4, lsr r0
   13f80:	andeq	r4, r1, r4, lsr r0
   13f84:	andeq	r4, r1, r4, lsr r0
   13f88:	andeq	r4, r1, r4, lsr r0
   13f8c:	andeq	r4, r1, r4, lsr r0
   13f90:	andeq	r4, r1, r4, lsr r0
   13f94:	andeq	r4, r1, r4, lsr r0
   13f98:	andeq	r4, r1, r4, lsr r0
   13f9c:	andeq	r4, r1, r4, lsr r0
   13fa0:	andeq	r4, r1, r4, lsr r0
   13fa4:	andeq	r4, r1, ip, asr #4
   13fa8:	andeq	r4, r1, r4, ror r0
   13fac:	andeq	r4, r1, r4, lsr r0
   13fb0:	andeq	r4, r1, ip, asr #4
   13fb4:	andeq	r4, r1, r4, lsr r0
   13fb8:	andeq	r4, r1, ip, asr #4
   13fbc:	andeq	r4, r1, r4, lsr r0
   13fc0:	andeq	r4, r1, r4, lsr r0
   13fc4:	andeq	r4, r1, r4, lsr r0
   13fc8:	andeq	r4, r1, r4, lsr r0
   13fcc:	andeq	r4, r1, r4, lsr r0
   13fd0:	andeq	r4, r1, r4, lsr r0
   13fd4:	andeq	r4, r1, r4, lsr r0
   13fd8:	andeq	r4, r1, r4, lsr r0
   13fdc:	andeq	r4, r1, r4, lsr r0
   13fe0:	andeq	r4, r1, r4, lsr r0
   13fe4:	andeq	r4, r1, r4, lsr r0
   13fe8:	andeq	r4, r1, r4, lsr r0
   13fec:	andeq	r4, r1, r4, lsr r0
   13ff0:	andeq	r4, r1, r4, lsr r0
   13ff4:	andeq	r4, r1, r4, lsr r0
   13ff8:	andeq	r4, r1, r4, lsr r0
   13ffc:	andeq	r4, r1, r4, lsr r0
   14000:	andeq	r4, r1, r4, lsr r0
   14004:	andeq	r4, r1, r4, lsr r0
   14008:	andeq	r4, r1, r4, lsr r0
   1400c:	andeq	r4, r1, r4, lsr r0
   14010:	andeq	r4, r1, r4, lsr r0
   14014:	andeq	r4, r1, r4, lsr r0
   14018:	andeq	r4, r1, r4, lsr r0
   1401c:	andeq	r4, r1, r4, lsr r0
   14020:	andeq	r4, r1, r4, lsr r0
   14024:	andeq	r4, r1, r8, asr r0
   14028:	andeq	r4, r1, ip, asr #4
   1402c:	andeq	r4, r1, r8, asr r0
   14030:	andeq	r4, r1, r8, asr #32
   14034:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14038:	cmp	r0, #0
   1403c:	beq	1429c <__assert_fail@plt+0x2b74>
   14040:	ldr	r0, [fp, #16]
   14044:	b	142a0 <__assert_fail@plt+0x2b78>
   14048:	mov	sl, #0
   1404c:	cmp	r7, #0
   14050:	bne	144b8 <__assert_fail@plt+0x2d90>
   14054:	b	14248 <__assert_fail@plt+0x2b20>
   14058:	mov	sl, #0
   1405c:	cmn	lr, #1
   14060:	beq	14234 <__assert_fail@plt+0x2b0c>
   14064:	cmp	r7, #0
   14068:	cmpeq	lr, #1
   1406c:	bne	144b8 <__assert_fail@plt+0x2d90>
   14070:	b	14248 <__assert_fail@plt+0x2b20>
   14074:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14078:	cmp	r0, #2
   1407c:	bne	1426c <__assert_fail@plt+0x2b44>
   14080:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14084:	tst	r0, #1
   14088:	bne	149d8 <__assert_fail@plt+0x32b0>
   1408c:	mov	r9, #0
   14090:	mov	r0, #92	; 0x5c
   14094:	b	14280 <__assert_fail@plt+0x2b58>
   14098:	mov	r0, #102	; 0x66
   1409c:	b	14288 <__assert_fail@plt+0x2b60>
   140a0:	mov	r2, #116	; 0x74
   140a4:	b	140b4 <__assert_fail@plt+0x298c>
   140a8:	mov	r0, #98	; 0x62
   140ac:	b	14288 <__assert_fail@plt+0x2b60>
   140b0:	mov	r2, #114	; 0x72
   140b4:	ldr	r0, [sp, #60]	; 0x3c
   140b8:	tst	r0, #1
   140bc:	mov	r0, r2
   140c0:	bne	14288 <__assert_fail@plt+0x2b60>
   140c4:	b	149d8 <__assert_fail@plt+0x32b0>
   140c8:	ldr	r0, [sp, #84]	; 0x54
   140cc:	tst	r0, #1
   140d0:	beq	14374 <__assert_fail@plt+0x2c4c>
   140d4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   140d8:	tst	r0, #1
   140dc:	bne	14ae0 <__assert_fail@plt+0x33b8>
   140e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   140e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   140e8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   140ec:	cmp	r0, #2
   140f0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   140f4:	movwne	r0, #1
   140f8:	orr	r0, r0, r3
   140fc:	tst	r0, #1
   14100:	beq	147f4 <__assert_fail@plt+0x30cc>
   14104:	mov	r0, r8
   14108:	b	14834 <__assert_fail@plt+0x310c>
   1410c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14110:	mov	r9, #0
   14114:	mov	r5, #63	; 0x3f
   14118:	cmp	r0, #5
   1411c:	beq	144c0 <__assert_fail@plt+0x2d98>
   14120:	cmp	r0, #2
   14124:	bne	14580 <__assert_fail@plt+0x2e58>
   14128:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1412c:	tst	r0, #1
   14130:	beq	14584 <__assert_fail@plt+0x2e5c>
   14134:	b	149d8 <__assert_fail@plt+0x32b0>
   14138:	mov	r0, #118	; 0x76
   1413c:	b	14288 <__assert_fail@plt+0x2b60>
   14140:	mov	r0, #1
   14144:	mov	r5, #39	; 0x27
   14148:	str	r0, [sp, #52]	; 0x34
   1414c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14150:	cmp	r0, #2
   14154:	bne	141dc <__assert_fail@plt+0x2ab4>
   14158:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1415c:	tst	r0, #1
   14160:	bne	149d8 <__assert_fail@plt+0x32b0>
   14164:	ldr	r3, [sp, #68]	; 0x44
   14168:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1416c:	mov	r9, #0
   14170:	clz	r1, r2
   14174:	cmp	r3, #0
   14178:	mov	r0, r3
   1417c:	movwne	r0, #1
   14180:	lsr	r1, r1, #5
   14184:	orrs	r0, r0, r1
   14188:	moveq	r3, r2
   1418c:	moveq	r2, r0
   14190:	cmp	r8, r2
   14194:	str	r3, [sp, #68]	; 0x44
   14198:	str	r2, [fp, #-52]	; 0xffffffcc
   1419c:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   141a0:	movcc	r0, #39	; 0x27
   141a4:	strbcc	r0, [r1, r8]
   141a8:	add	r0, r8, #1
   141ac:	cmp	r0, r2
   141b0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   141b4:	movcc	r1, #92	; 0x5c
   141b8:	strbcc	r1, [r3, r0]
   141bc:	add	r0, r8, #2
   141c0:	add	r8, r8, #3
   141c4:	cmp	r0, r2
   141c8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   141cc:	movcc	r1, #39	; 0x27
   141d0:	strbcc	r1, [r2, r0]
   141d4:	mov	r0, #0
   141d8:	str	r0, [fp, #-48]	; 0xffffffd0
   141dc:	mov	sl, #1
   141e0:	b	14034 <__assert_fail@plt+0x290c>
   141e4:	ldr	r0, [sp, #32]
   141e8:	cmp	r0, #1
   141ec:	bne	14398 <__assert_fail@plt+0x2c70>
   141f0:	str	lr, [sp, #80]	; 0x50
   141f4:	bl	115b4 <__ctype_b_loc@plt>
   141f8:	ldr	r0, [r0]
   141fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   14200:	mov	r1, #1
   14204:	add	r0, r0, r5, lsl #1
   14208:	ldrb	r0, [r0, #1]
   1420c:	ubfx	sl, r0, #6, #1
   14210:	ldr	r0, [sp, #48]	; 0x30
   14214:	mov	r2, r1
   14218:	cmp	r1, #1
   1421c:	orr	r0, sl, r0
   14220:	bhi	1458c <__assert_fail@plt+0x2e64>
   14224:	tst	r0, #1
   14228:	beq	1458c <__assert_fail@plt+0x2e64>
   1422c:	ldr	lr, [sp, #80]	; 0x50
   14230:	b	14034 <__assert_fail@plt+0x290c>
   14234:	cmp	r7, #0
   14238:	bne	144b4 <__assert_fail@plt+0x2d8c>
   1423c:	ldrb	r0, [ip, #1]
   14240:	cmp	r0, #0
   14244:	bne	144b4 <__assert_fail@plt+0x2d8c>
   14248:	mov	r1, #1
   1424c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14250:	cmp	r0, #2
   14254:	bne	14264 <__assert_fail@plt+0x2b3c>
   14258:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1425c:	tst	r0, #1
   14260:	bne	149d8 <__assert_fail@plt+0x32b0>
   14264:	mov	sl, r1
   14268:	b	14034 <__assert_fail@plt+0x290c>
   1426c:	ldr	r1, [sp, #44]	; 0x2c
   14270:	mov	r9, #0
   14274:	mov	r0, #92	; 0x5c
   14278:	cmp	r1, #0
   1427c:	beq	14288 <__assert_fail@plt+0x2b60>
   14280:	mov	sl, #0
   14284:	b	147a0 <__assert_fail@plt+0x3078>
   14288:	ldr	r1, [sp, #84]	; 0x54
   1428c:	mov	sl, #0
   14290:	mov	r9, #0
   14294:	tst	r1, #1
   14298:	bne	142d4 <__assert_fail@plt+0x2bac>
   1429c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   142a0:	cmp	r0, #0
   142a4:	mov	r0, r5
   142a8:	beq	142cc <__assert_fail@plt+0x2ba4>
   142ac:	ldr	r1, [fp, #16]
   142b0:	ubfx	r0, r5, #5, #3
   142b4:	mov	r2, #1
   142b8:	ldr	r0, [r1, r0, lsl #2]
   142bc:	and	r1, r5, #31
   142c0:	tst	r0, r2, lsl r1
   142c4:	mov	r0, r5
   142c8:	bne	142d4 <__assert_fail@plt+0x2bac>
   142cc:	cmp	r6, #0
   142d0:	beq	147a0 <__assert_fail@plt+0x3078>
   142d4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   142d8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   142dc:	tst	r1, #1
   142e0:	bne	149b4 <__assert_fail@plt+0x328c>
   142e4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   142e8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   142ec:	cmp	r1, #2
   142f0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   142f4:	movwne	r1, #1
   142f8:	orr	r1, r1, r5
   142fc:	tst	r1, #1
   14300:	bne	14344 <__assert_fail@plt+0x2c1c>
   14304:	cmp	r8, r6
   14308:	mov	r5, #1
   1430c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14310:	movcc	r1, #39	; 0x27
   14314:	strbcc	r1, [r2, r8]
   14318:	add	r1, r8, #1
   1431c:	cmp	r1, r6
   14320:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14324:	movcc	r2, #36	; 0x24
   14328:	strbcc	r2, [r3, r1]
   1432c:	add	r1, r8, #2
   14330:	add	r8, r8, #3
   14334:	cmp	r1, r6
   14338:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1433c:	movcc	r2, #39	; 0x27
   14340:	strbcc	r2, [r3, r1]
   14344:	cmp	r8, r6
   14348:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1434c:	movcc	r1, #92	; 0x5c
   14350:	strbcc	r1, [r2, r8]
   14354:	add	r8, r8, #1
   14358:	cmp	r8, r6
   1435c:	and	r4, r4, sl
   14360:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   14364:	strbcc	r0, [r1, r8]
   14368:	add	r8, r8, #1
   1436c:	add	r7, r7, #1
   14370:	b	13d54 <__assert_fail@plt+0x262c>
   14374:	ldr	r0, [sp, #28]
   14378:	mov	sl, #0
   1437c:	mov	r9, #0
   14380:	mov	r5, #0
   14384:	cmp	r0, #0
   14388:	beq	1429c <__assert_fail@plt+0x2b74>
   1438c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14390:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14394:	b	1436c <__assert_fail@plt+0x2c44>
   14398:	mov	r0, #0
   1439c:	cmn	lr, #1
   143a0:	str	r6, [sp, #76]	; 0x4c
   143a4:	str	r4, [sp, #20]
   143a8:	str	r0, [fp, #-36]	; 0xffffffdc
   143ac:	str	r0, [fp, #-40]	; 0xffffffd8
   143b0:	bne	143c4 <__assert_fail@plt+0x2c9c>
   143b4:	mov	r0, ip
   143b8:	bl	115cc <strlen@plt>
   143bc:	ldr	ip, [fp, #-84]	; 0xffffffac
   143c0:	mov	lr, r0
   143c4:	add	r0, ip, r7
   143c8:	mov	sl, #1
   143cc:	mov	r6, #0
   143d0:	sub	r4, fp, #40	; 0x28
   143d4:	str	lr, [sp, #80]	; 0x50
   143d8:	str	r0, [sp, #36]	; 0x24
   143dc:	str	r6, [sp, #40]	; 0x28
   143e0:	add	r6, r6, r7
   143e4:	sub	r0, fp, #44	; 0x2c
   143e8:	mov	r3, r4
   143ec:	add	r1, ip, r6
   143f0:	sub	r2, lr, r6
   143f4:	bl	22ee0 <__assert_fail@plt+0x117b8>
   143f8:	cmp	r0, #0
   143fc:	beq	14908 <__assert_fail@plt+0x31e0>
   14400:	cmn	r0, #1
   14404:	beq	148c8 <__assert_fail@plt+0x31a0>
   14408:	ldr	lr, [sp, #80]	; 0x50
   1440c:	cmn	r0, #2
   14410:	beq	148d0 <__assert_fail@plt+0x31a8>
   14414:	ldr	r2, [sp, #56]	; 0x38
   14418:	cmp	r0, #2
   1441c:	mov	r1, #0
   14420:	movwcc	r1, #1
   14424:	eor	r2, r2, #1
   14428:	orrs	r1, r2, r1
   1442c:	bne	14478 <__assert_fail@plt+0x2d50>
   14430:	ldr	r1, [sp, #40]	; 0x28
   14434:	ldr	r2, [sp, #36]	; 0x24
   14438:	add	ip, r2, r1
   1443c:	mov	r2, #1
   14440:	ldrb	r3, [ip, r2]
   14444:	sub	r6, r3, #94	; 0x5e
   14448:	cmp	r6, #30
   1444c:	bhi	14460 <__assert_fail@plt+0x2d38>
   14450:	mov	r4, #1
   14454:	mov	r1, #1073741829	; 0x40000005
   14458:	tst	r1, r4, lsl r6
   1445c:	bne	149d4 <__assert_fail@plt+0x32ac>
   14460:	sub	r3, r3, #91	; 0x5b
   14464:	cmp	r3, #2
   14468:	bcc	149d4 <__assert_fail@plt+0x32ac>
   1446c:	add	r2, r2, #1
   14470:	cmp	r2, r0
   14474:	bcc	14440 <__assert_fail@plt+0x2d18>
   14478:	ldr	r6, [sp, #40]	; 0x28
   1447c:	add	r6, r0, r6
   14480:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14484:	bl	1150c <iswprint@plt>
   14488:	cmp	r0, #0
   1448c:	sub	r4, fp, #40	; 0x28
   14490:	movwne	r0, #1
   14494:	and	sl, sl, r0
   14498:	mov	r0, r4
   1449c:	bl	114a0 <mbsinit@plt>
   144a0:	ldr	lr, [sp, #80]	; 0x50
   144a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   144a8:	cmp	r0, #0
   144ac:	beq	143dc <__assert_fail@plt+0x2cb4>
   144b0:	b	14910 <__assert_fail@plt+0x31e8>
   144b4:	mvn	lr, #0
   144b8:	mov	r9, #0
   144bc:	b	14034 <__assert_fail@plt+0x290c>
   144c0:	ldr	r0, [sp, #24]
   144c4:	cmp	r0, #0
   144c8:	beq	14580 <__assert_fail@plt+0x2e58>
   144cc:	add	r0, r7, #2
   144d0:	cmp	r0, lr
   144d4:	bcs	14580 <__assert_fail@plt+0x2e58>
   144d8:	add	r1, ip, r7
   144dc:	ldrb	r1, [r1, #1]
   144e0:	cmp	r1, #63	; 0x3f
   144e4:	bne	14580 <__assert_fail@plt+0x2e58>
   144e8:	ldrb	r5, [ip, r0]
   144ec:	sub	r1, r5, #33	; 0x21
   144f0:	cmp	r1, #29
   144f4:	bhi	14580 <__assert_fail@plt+0x2e58>
   144f8:	movw	r3, #20929	; 0x51c1
   144fc:	mov	r2, #1
   14500:	movt	r3, #14336	; 0x3800
   14504:	tst	r3, r2, lsl r1
   14508:	beq	14580 <__assert_fail@plt+0x2e58>
   1450c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14510:	tst	r1, #1
   14514:	bne	14ae8 <__assert_fail@plt+0x33c0>
   14518:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1451c:	mov	r7, r0
   14520:	cmp	r8, r1
   14524:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14528:	movcc	r1, #63	; 0x3f
   1452c:	strbcc	r1, [r2, r8]
   14530:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14534:	add	r1, r8, #1
   14538:	cmp	r1, r2
   1453c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14540:	movcc	r2, #34	; 0x22
   14544:	strbcc	r2, [r3, r1]
   14548:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1454c:	add	r1, r8, #2
   14550:	cmp	r1, r2
   14554:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14558:	movcc	r2, #34	; 0x22
   1455c:	strbcc	r2, [r3, r1]
   14560:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14564:	add	r1, r8, #3
   14568:	add	r8, r8, #4
   1456c:	cmp	r1, r2
   14570:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14574:	movcc	r2, #63	; 0x3f
   14578:	strbcc	r2, [r3, r1]
   1457c:	b	14584 <__assert_fail@plt+0x2e5c>
   14580:	mov	r5, #63	; 0x3f
   14584:	mov	sl, #0
   14588:	b	14034 <__assert_fail@plt+0x290c>
   1458c:	str	r0, [sp, #40]	; 0x28
   14590:	add	r0, r2, r7
   14594:	str	r6, [sp, #76]	; 0x4c
   14598:	add	r1, r7, #1
   1459c:	ldr	lr, [sp, #80]	; 0x50
   145a0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   145a4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   145a8:	mov	r3, #0
   145ac:	str	r0, [sp, #36]	; 0x24
   145b0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   145b4:	b	14648 <__assert_fail@plt+0x2f20>
   145b8:	str	r0, [sp, #76]	; 0x4c
   145bc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   145c0:	cmp	r9, #0
   145c4:	movwne	r9, #1
   145c8:	mvn	r7, r0
   145cc:	orr	r7, r7, r9
   145d0:	tst	r7, #1
   145d4:	bne	14624 <__assert_fail@plt+0x2efc>
   145d8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   145dc:	cmp	r8, r6
   145e0:	bcs	145f8 <__assert_fail@plt+0x2ed0>
   145e4:	ldr	r7, [fp, #-56]	; 0xffffffc8
   145e8:	mov	r2, r4
   145ec:	mov	r4, #39	; 0x27
   145f0:	strb	r4, [r7, r8]
   145f4:	mov	r4, r2
   145f8:	add	r7, r8, #1
   145fc:	cmp	r7, r6
   14600:	bcs	14618 <__assert_fail@plt+0x2ef0>
   14604:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14608:	mov	r2, r4
   1460c:	mov	r4, #39	; 0x27
   14610:	strb	r4, [r0, r7]
   14614:	mov	r4, r2
   14618:	add	r8, r8, #2
   1461c:	mov	r0, #0
   14620:	b	1462c <__assert_fail@plt+0x2f04>
   14624:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14628:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1462c:	cmp	r8, r6
   14630:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14634:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14638:	strbcc	r5, [r2, r8]
   1463c:	add	r8, r8, #1
   14640:	ldrb	r5, [ip, r1]
   14644:	add	r1, r1, #1
   14648:	ldr	r2, [sp, #40]	; 0x28
   1464c:	tst	r2, #1
   14650:	beq	1468c <__assert_fail@plt+0x2f64>
   14654:	ldr	r2, [sp, #76]	; 0x4c
   14658:	str	r0, [fp, #-48]	; 0xffffffd0
   1465c:	tst	r2, #1
   14660:	beq	14684 <__assert_fail@plt+0x2f5c>
   14664:	cmp	r8, r6
   14668:	bcs	14680 <__assert_fail@plt+0x2f58>
   1466c:	ldr	r6, [fp, #-56]	; 0xffffffc8
   14670:	mov	r2, r4
   14674:	mov	r4, #92	; 0x5c
   14678:	strb	r4, [r6, r8]
   1467c:	mov	r4, r2
   14680:	add	r8, r8, #1
   14684:	mov	r0, #0
   14688:	b	14780 <__assert_fail@plt+0x3058>
   1468c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14690:	tst	r2, #1
   14694:	bne	149e0 <__assert_fail@plt+0x32b8>
   14698:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1469c:	cmp	r7, #2
   146a0:	movwne	r3, #1
   146a4:	orr	r3, r3, r0
   146a8:	tst	r3, #1
   146ac:	bne	14708 <__assert_fail@plt+0x2fe0>
   146b0:	cmp	r8, r6
   146b4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   146b8:	movcc	r3, #39	; 0x27
   146bc:	strbcc	r3, [r2, r8]
   146c0:	add	r3, r8, #1
   146c4:	cmp	r3, r6
   146c8:	bcs	146e0 <__assert_fail@plt+0x2fb8>
   146cc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   146d0:	mov	r7, r4
   146d4:	mov	r4, #36	; 0x24
   146d8:	strb	r4, [r2, r3]
   146dc:	mov	r4, r7
   146e0:	add	r3, r8, #2
   146e4:	cmp	r3, r6
   146e8:	bcs	14700 <__assert_fail@plt+0x2fd8>
   146ec:	ldr	r2, [fp, #-56]	; 0xffffffc8
   146f0:	mov	r7, r4
   146f4:	mov	r4, #39	; 0x27
   146f8:	strb	r4, [r2, r3]
   146fc:	mov	r4, r7
   14700:	add	r8, r8, #3
   14704:	mov	r0, #1
   14708:	cmp	r8, r6
   1470c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14710:	movcc	r3, #92	; 0x5c
   14714:	strbcc	r3, [r2, r8]
   14718:	add	r3, r8, #1
   1471c:	cmp	r3, r6
   14720:	bcs	14740 <__assert_fail@plt+0x3018>
   14724:	mov	r2, r4
   14728:	and	r7, r5, #192	; 0xc0
   1472c:	mov	r4, #48	; 0x30
   14730:	orr	r7, r4, r7, lsr #6
   14734:	mov	r4, r2
   14738:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1473c:	strb	r7, [r2, r3]
   14740:	add	r3, r8, #2
   14744:	cmp	r3, r6
   14748:	bcs	14768 <__assert_fail@plt+0x3040>
   1474c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14750:	mov	r6, r4
   14754:	lsr	r7, r5, #3
   14758:	mov	r4, #6
   1475c:	bfi	r7, r4, #3, #29
   14760:	mov	r4, r6
   14764:	strb	r7, [r2, r3]
   14768:	str	r0, [fp, #-48]	; 0xffffffd0
   1476c:	ldr	r0, [sp, #76]	; 0x4c
   14770:	mov	r3, #6
   14774:	add	r8, r8, #3
   14778:	bfi	r5, r3, #3, #29
   1477c:	mov	r3, #1
   14780:	ldr	r2, [sp, #36]	; 0x24
   14784:	and	r9, r3, #1
   14788:	cmp	r2, r1
   1478c:	bhi	145b8 <__assert_fail@plt+0x2e90>
   14790:	cmp	r9, #0
   14794:	sub	r7, r1, #1
   14798:	mov	r0, r5
   1479c:	movwne	r9, #1
   147a0:	cmp	r9, #0
   147a4:	bne	147e8 <__assert_fail@plt+0x30c0>
   147a8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   147ac:	ldr	r6, [fp, #-52]	; 0xffffffcc
   147b0:	tst	r5, #1
   147b4:	beq	14358 <__assert_fail@plt+0x2c30>
   147b8:	cmp	r8, r6
   147bc:	mov	r5, #0
   147c0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   147c4:	movcc	r1, #39	; 0x27
   147c8:	strbcc	r1, [r2, r8]
   147cc:	add	r1, r8, #1
   147d0:	add	r8, r8, #2
   147d4:	cmp	r1, r6
   147d8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   147dc:	movcc	r2, #39	; 0x27
   147e0:	strbcc	r2, [r3, r1]
   147e4:	b	14358 <__assert_fail@plt+0x2c30>
   147e8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   147ec:	ldr	r5, [fp, #-48]	; 0xffffffd0
   147f0:	b	14358 <__assert_fail@plt+0x2c30>
   147f4:	cmp	r8, r1
   147f8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   147fc:	movcc	r0, #39	; 0x27
   14800:	strbcc	r0, [r2, r8]
   14804:	add	r0, r8, #1
   14808:	cmp	r0, r1
   1480c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14810:	movcc	r2, #36	; 0x24
   14814:	strbcc	r2, [r3, r0]
   14818:	add	r0, r8, #2
   1481c:	cmp	r0, r1
   14820:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14824:	movcc	r2, #39	; 0x27
   14828:	strbcc	r2, [r3, r0]
   1482c:	add	r0, r8, #3
   14830:	mov	r3, #1
   14834:	cmp	r0, r1
   14838:	add	r8, r0, #1
   1483c:	str	r3, [fp, #-48]	; 0xffffffd0
   14840:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14844:	movcc	r1, #92	; 0x5c
   14848:	strbcc	r1, [r2, r0]
   1484c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14850:	cmp	r1, #2
   14854:	beq	148b8 <__assert_fail@plt+0x3190>
   14858:	add	r1, r7, #1
   1485c:	mov	sl, #0
   14860:	mov	r9, #1
   14864:	mov	r5, #48	; 0x30
   14868:	cmp	r1, lr
   1486c:	bcs	14034 <__assert_fail@plt+0x290c>
   14870:	ldrb	r1, [ip, r1]
   14874:	sub	r1, r1, #48	; 0x30
   14878:	uxtb	r1, r1
   1487c:	cmp	r1, #9
   14880:	bhi	14034 <__assert_fail@plt+0x290c>
   14884:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14888:	cmp	r8, r1
   1488c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14890:	movcc	r1, #48	; 0x30
   14894:	strbcc	r1, [r2, r8]
   14898:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1489c:	add	r1, r0, #2
   148a0:	add	r8, r0, #3
   148a4:	cmp	r1, r2
   148a8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   148ac:	movcc	r2, #48	; 0x30
   148b0:	strbcc	r2, [r3, r1]
   148b4:	b	14034 <__assert_fail@plt+0x290c>
   148b8:	mov	r0, #48	; 0x30
   148bc:	mov	r9, #1
   148c0:	mov	sl, #0
   148c4:	b	142cc <__assert_fail@plt+0x2ba4>
   148c8:	mov	sl, #0
   148cc:	b	14908 <__assert_fail@plt+0x31e0>
   148d0:	mov	sl, #0
   148d4:	cmp	lr, r6
   148d8:	bls	14908 <__assert_fail@plt+0x31e0>
   148dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   148e0:	ldr	r6, [sp, #40]	; 0x28
   148e4:	ldr	r0, [sp, #36]	; 0x24
   148e8:	ldrb	r0, [r0, r6]
   148ec:	cmp	r0, #0
   148f0:	beq	14910 <__assert_fail@plt+0x31e8>
   148f4:	add	r6, r6, #1
   148f8:	add	r0, r7, r6
   148fc:	cmp	r0, lr
   14900:	bcc	148e4 <__assert_fail@plt+0x31bc>
   14904:	b	14910 <__assert_fail@plt+0x31e8>
   14908:	ldr	ip, [fp, #-84]	; 0xffffffac
   1490c:	ldr	r6, [sp, #40]	; 0x28
   14910:	mov	r1, r6
   14914:	ldr	r4, [sp, #20]
   14918:	ldr	r6, [sp, #76]	; 0x4c
   1491c:	b	14210 <__assert_fail@plt+0x2ae8>
   14920:	mov	lr, r7
   14924:	b	1492c <__assert_fail@plt+0x3204>
   14928:	mvn	lr, #0
   1492c:	ldr	r9, [fp, #-64]	; 0xffffffc0
   14930:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14934:	eor	r0, r9, #2
   14938:	orr	r0, r0, r8
   1493c:	clz	r0, r0
   14940:	lsr	r0, r0, #5
   14944:	tst	r1, r0
   14948:	bne	14a44 <__assert_fail@plt+0x331c>
   1494c:	mov	r0, r1
   14950:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14954:	cmp	r9, #2
   14958:	movwne	r1, #1
   1495c:	orr	r0, r0, r1
   14960:	tst	r0, #1
   14964:	bne	14a84 <__assert_fail@plt+0x335c>
   14968:	ldr	r0, [sp, #52]	; 0x34
   1496c:	ldr	r1, [sp, #68]	; 0x44
   14970:	str	lr, [sp, #80]	; 0x50
   14974:	eor	r0, r0, #1
   14978:	tst	r0, #1
   1497c:	bne	14a84 <__assert_fail@plt+0x335c>
   14980:	tst	r4, #1
   14984:	bne	14a4c <__assert_fail@plt+0x3324>
   14988:	mov	r7, #0
   1498c:	cmp	r1, #0
   14990:	beq	14a7c <__assert_fail@plt+0x3354>
   14994:	ldr	r0, [sp, #84]	; 0x54
   14998:	mov	r3, #0
   1499c:	cmp	r6, #0
   149a0:	mov	r2, #0
   149a4:	mov	r4, r1
   149a8:	str	r3, [fp, #-72]	; 0xffffffb8
   149ac:	beq	13ae8 <__assert_fail@plt+0x23c0>
   149b0:	b	14a84 <__assert_fail@plt+0x335c>
   149b4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   149b8:	b	149e0 <__assert_fail@plt+0x32b8>
   149bc:	ldr	ip, [fp, #-84]	; 0xffffffac
   149c0:	mov	r2, #1
   149c4:	mov	lr, r4
   149c8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   149cc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   149d0:	b	149e4 <__assert_fail@plt+0x32bc>
   149d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   149d8:	mov	r7, #2
   149dc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   149e0:	ldr	r2, [sp, #84]	; 0x54
   149e4:	mov	r0, #0
   149e8:	ldr	r1, [fp, #12]
   149ec:	tst	r2, #1
   149f0:	mov	r2, r7
   149f4:	mov	r3, lr
   149f8:	str	r0, [sp, #8]
   149fc:	ldr	r0, [sp, #64]	; 0x40
   14a00:	movwne	r2, #4
   14a04:	cmp	r7, #2
   14a08:	movne	r2, r7
   14a0c:	str	r2, [sp]
   14a10:	mov	r2, ip
   14a14:	bic	r1, r1, #2
   14a18:	str	r0, [sp, #12]
   14a1c:	ldr	r0, [sp, #72]	; 0x48
   14a20:	str	r1, [sp, #4]
   14a24:	mov	r1, r6
   14a28:	str	r0, [sp, #16]
   14a2c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14a30:	bl	13a70 <__assert_fail@plt+0x2348>
   14a34:	mov	r8, r0
   14a38:	mov	r0, r8
   14a3c:	sub	sp, fp, #28
   14a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a44:	mov	r7, #2
   14a48:	b	149e0 <__assert_fail@plt+0x32b8>
   14a4c:	mov	r0, #5
   14a50:	ldr	r2, [fp, #-84]	; 0xffffffac
   14a54:	ldr	r3, [sp, #80]	; 0x50
   14a58:	str	r0, [sp]
   14a5c:	ldr	r0, [fp, #12]
   14a60:	str	r0, [sp, #4]
   14a64:	ldr	r0, [fp, #16]
   14a68:	str	r0, [sp, #8]
   14a6c:	ldr	r0, [sp, #64]	; 0x40
   14a70:	str	r0, [sp, #12]
   14a74:	ldr	r0, [sp, #72]	; 0x48
   14a78:	b	14a28 <__assert_fail@plt+0x3300>
   14a7c:	mov	r0, #0
   14a80:	str	r0, [fp, #-72]	; 0xffffffb8
   14a84:	ldr	r1, [sp, #92]	; 0x5c
   14a88:	cmp	r1, #0
   14a8c:	beq	14acc <__assert_fail@plt+0x33a4>
   14a90:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14a94:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14a98:	tst	r0, #1
   14a9c:	bne	14ad0 <__assert_fail@plt+0x33a8>
   14aa0:	ldrb	r0, [r1]
   14aa4:	cmp	r0, #0
   14aa8:	beq	14ad0 <__assert_fail@plt+0x33a8>
   14aac:	add	r1, r1, #1
   14ab0:	cmp	r8, r6
   14ab4:	strbcc	r0, [r2, r8]
   14ab8:	add	r8, r8, #1
   14abc:	ldrb	r0, [r1], #1
   14ac0:	cmp	r0, #0
   14ac4:	bne	14ab0 <__assert_fail@plt+0x3388>
   14ac8:	b	14ad0 <__assert_fail@plt+0x33a8>
   14acc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14ad0:	cmp	r8, r6
   14ad4:	movcc	r0, #0
   14ad8:	strbcc	r0, [r2, r8]
   14adc:	b	14a38 <__assert_fail@plt+0x3310>
   14ae0:	mov	r2, #1
   14ae4:	b	149c8 <__assert_fail@plt+0x32a0>
   14ae8:	mov	r7, #5
   14aec:	b	149dc <__assert_fail@plt+0x32b4>
   14af0:	bl	11704 <abort@plt>
   14af4:	mov	r3, r2
   14af8:	mov	r2, #0
   14afc:	b	14b00 <__assert_fail@plt+0x33d8>
   14b00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b04:	add	fp, sp, #28
   14b08:	sub	sp, sp, #36	; 0x24
   14b0c:	movw	r8, #20928	; 0x51c0
   14b10:	cmp	r3, #0
   14b14:	mov	r4, r2
   14b18:	str	r2, [sp, #24]
   14b1c:	mov	r5, r1
   14b20:	mov	r6, r0
   14b24:	str	r0, [sp, #20]
   14b28:	movt	r8, #3
   14b2c:	movne	r8, r3
   14b30:	bl	115fc <__errno_location@plt>
   14b34:	str	r0, [sp, #28]
   14b38:	cmp	r4, #0
   14b3c:	add	sl, r8, #8
   14b40:	ldm	r8, {r3, r9}
   14b44:	ldr	r7, [r0]
   14b48:	ldr	r1, [r8, #40]	; 0x28
   14b4c:	ldr	r2, [r8, #44]	; 0x2c
   14b50:	mov	r0, #0
   14b54:	orreq	r9, r9, #1
   14b58:	str	r7, [sp, #32]
   14b5c:	mov	r7, r5
   14b60:	stm	sp, {r3, r9, sl}
   14b64:	str	r1, [sp, #12]
   14b68:	str	r2, [sp, #16]
   14b6c:	mov	r1, #0
   14b70:	mov	r2, r6
   14b74:	mov	r3, r5
   14b78:	bl	13a70 <__assert_fail@plt+0x2348>
   14b7c:	add	r4, r0, #1
   14b80:	mov	r5, r0
   14b84:	mov	r0, r4
   14b88:	bl	225e8 <__assert_fail@plt+0x10ec0>
   14b8c:	mov	r6, r0
   14b90:	ldr	r0, [r8]
   14b94:	ldr	r2, [r8, #44]	; 0x2c
   14b98:	ldr	r1, [r8, #40]	; 0x28
   14b9c:	mov	r3, r7
   14ba0:	stm	sp, {r0, r9, sl}
   14ba4:	str	r2, [sp, #16]
   14ba8:	str	r1, [sp, #12]
   14bac:	mov	r0, r6
   14bb0:	mov	r1, r4
   14bb4:	ldr	r2, [sp, #20]
   14bb8:	bl	13a70 <__assert_fail@plt+0x2348>
   14bbc:	ldr	r0, [sp, #24]
   14bc0:	ldr	r1, [sp, #32]
   14bc4:	ldr	r2, [sp, #28]
   14bc8:	cmp	r0, #0
   14bcc:	str	r1, [r2]
   14bd0:	strne	r5, [r0]
   14bd4:	mov	r0, r6
   14bd8:	sub	sp, fp, #28
   14bdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14be0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14be4:	add	fp, sp, #24
   14be8:	movw	r5, #20820	; 0x5154
   14bec:	movw	r8, #20816	; 0x5150
   14bf0:	movt	r5, #3
   14bf4:	movt	r8, #3
   14bf8:	ldr	r0, [r5]
   14bfc:	ldr	r4, [r8]
   14c00:	cmp	r0, #2
   14c04:	blt	14c30 <__assert_fail@plt+0x3508>
   14c08:	add	r7, r4, #12
   14c0c:	mov	r6, #0
   14c10:	ldr	r0, [r7, r6, lsl #3]
   14c14:	bl	132d4 <__assert_fail@plt+0x1bac>
   14c18:	ldr	r1, [r5]
   14c1c:	add	r2, r6, #2
   14c20:	add	r0, r6, #1
   14c24:	mov	r6, r0
   14c28:	cmp	r2, r1
   14c2c:	blt	14c10 <__assert_fail@plt+0x34e8>
   14c30:	ldr	r0, [r4, #4]
   14c34:	movw	r7, #20976	; 0x51f0
   14c38:	movt	r7, #3
   14c3c:	cmp	r0, r7
   14c40:	beq	14c58 <__assert_fail@plt+0x3530>
   14c44:	bl	132d4 <__assert_fail@plt+0x1bac>
   14c48:	movw	r0, #20824	; 0x5158
   14c4c:	mov	r6, #256	; 0x100
   14c50:	movt	r0, #3
   14c54:	strd	r6, [r0]
   14c58:	movw	r6, #20824	; 0x5158
   14c5c:	movt	r6, #3
   14c60:	cmp	r4, r6
   14c64:	beq	14c74 <__assert_fail@plt+0x354c>
   14c68:	mov	r0, r4
   14c6c:	bl	132d4 <__assert_fail@plt+0x1bac>
   14c70:	str	r6, [r8]
   14c74:	mov	r0, #1
   14c78:	str	r0, [r5]
   14c7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c80:	movw	r3, #20928	; 0x51c0
   14c84:	mvn	r2, #0
   14c88:	movt	r3, #3
   14c8c:	b	14c90 <__assert_fail@plt+0x3568>
   14c90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c94:	add	fp, sp, #28
   14c98:	sub	sp, sp, #44	; 0x2c
   14c9c:	mov	r7, r3
   14ca0:	str	r2, [sp, #36]	; 0x24
   14ca4:	str	r1, [sp, #32]
   14ca8:	mov	r5, r0
   14cac:	bl	115fc <__errno_location@plt>
   14cb0:	cmp	r5, #0
   14cb4:	blt	14e20 <__assert_fail@plt+0x36f8>
   14cb8:	cmn	r5, #-2147483647	; 0x80000001
   14cbc:	beq	14e20 <__assert_fail@plt+0x36f8>
   14cc0:	movw	r8, #20820	; 0x5154
   14cc4:	movw	r4, #20816	; 0x5150
   14cc8:	str	r0, [sp, #28]
   14ccc:	ldr	r0, [r0]
   14cd0:	movt	r8, #3
   14cd4:	movt	r4, #3
   14cd8:	ldr	r1, [r8]
   14cdc:	ldr	r6, [r4]
   14ce0:	str	r0, [sp, #24]
   14ce4:	cmp	r1, r5
   14ce8:	ble	14cf4 <__assert_fail@plt+0x35cc>
   14cec:	mov	sl, r6
   14cf0:	b	14d5c <__assert_fail@plt+0x3634>
   14cf4:	movw	r9, #20824	; 0x5158
   14cf8:	mov	r0, #8
   14cfc:	add	r2, r5, #1
   14d00:	str	r1, [fp, #-32]	; 0xffffffe0
   14d04:	mvn	r3, #-2147483648	; 0x80000000
   14d08:	movt	r9, #3
   14d0c:	str	r0, [sp]
   14d10:	sub	r2, r2, r1
   14d14:	sub	r1, fp, #32
   14d18:	subs	r0, r6, r9
   14d1c:	movne	r0, r6
   14d20:	bl	22718 <__assert_fail@plt+0x10ff0>
   14d24:	cmp	r6, r9
   14d28:	mov	sl, r0
   14d2c:	str	r0, [r4]
   14d30:	ldrdeq	r0, [r9]
   14d34:	stmeq	sl, {r0, r1}
   14d38:	ldr	r1, [r8]
   14d3c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14d40:	add	r0, sl, r1, lsl #3
   14d44:	sub	r1, r2, r1
   14d48:	lsl	r2, r1, #3
   14d4c:	mov	r1, #0
   14d50:	bl	11620 <memset@plt>
   14d54:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14d58:	str	r0, [r8]
   14d5c:	mov	r9, sl
   14d60:	ldr	r6, [r9, r5, lsl #3]!
   14d64:	ldr	r4, [r9, #4]!
   14d68:	ldm	r7, {r0, r1}
   14d6c:	ldr	r2, [r7, #40]	; 0x28
   14d70:	ldr	r3, [r7, #44]	; 0x2c
   14d74:	orr	r8, r1, #1
   14d78:	add	r1, r7, #8
   14d7c:	stm	sp, {r0, r8}
   14d80:	add	r0, sp, #8
   14d84:	str	r1, [sp, #20]
   14d88:	stm	r0, {r1, r2, r3}
   14d8c:	mov	r0, r4
   14d90:	mov	r1, r6
   14d94:	ldr	r2, [sp, #32]
   14d98:	ldr	r3, [sp, #36]	; 0x24
   14d9c:	bl	13a70 <__assert_fail@plt+0x2348>
   14da0:	cmp	r6, r0
   14da4:	bhi	14e08 <__assert_fail@plt+0x36e0>
   14da8:	add	r6, r0, #1
   14dac:	movw	r0, #20976	; 0x51f0
   14db0:	movt	r0, #3
   14db4:	str	r6, [sl, r5, lsl #3]
   14db8:	cmp	r4, r0
   14dbc:	beq	14dc8 <__assert_fail@plt+0x36a0>
   14dc0:	mov	r0, r4
   14dc4:	bl	132d4 <__assert_fail@plt+0x1bac>
   14dc8:	mov	r0, r6
   14dcc:	bl	225e8 <__assert_fail@plt+0x10ec0>
   14dd0:	str	r0, [r9]
   14dd4:	mov	r4, r0
   14dd8:	add	r3, sp, #8
   14ddc:	ldr	r0, [r7]
   14de0:	ldr	r1, [r7, #40]	; 0x28
   14de4:	ldr	r2, [r7, #44]	; 0x2c
   14de8:	stm	sp, {r0, r8}
   14dec:	ldr	r0, [sp, #20]
   14df0:	stm	r3, {r0, r1, r2}
   14df4:	mov	r0, r4
   14df8:	mov	r1, r6
   14dfc:	ldr	r2, [sp, #32]
   14e00:	ldr	r3, [sp, #36]	; 0x24
   14e04:	bl	13a70 <__assert_fail@plt+0x2348>
   14e08:	ldr	r0, [sp, #28]
   14e0c:	ldr	r1, [sp, #24]
   14e10:	str	r1, [r0]
   14e14:	mov	r0, r4
   14e18:	sub	sp, fp, #28
   14e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e20:	bl	11704 <abort@plt>
   14e24:	movw	r3, #20928	; 0x51c0
   14e28:	movt	r3, #3
   14e2c:	b	14c90 <__assert_fail@plt+0x3568>
   14e30:	movw	r3, #20928	; 0x51c0
   14e34:	mov	r1, r0
   14e38:	mov	r0, #0
   14e3c:	mvn	r2, #0
   14e40:	movt	r3, #3
   14e44:	b	14c90 <__assert_fail@plt+0x3568>
   14e48:	movw	r3, #20928	; 0x51c0
   14e4c:	mov	r2, r1
   14e50:	mov	r1, r0
   14e54:	mov	r0, #0
   14e58:	movt	r3, #3
   14e5c:	b	14c90 <__assert_fail@plt+0x3568>
   14e60:	push	{fp, lr}
   14e64:	mov	fp, sp
   14e68:	sub	sp, sp, #48	; 0x30
   14e6c:	vmov.i32	q8, #0	; 0x00000000
   14e70:	mov	ip, #32
   14e74:	mov	r3, sp
   14e78:	mov	lr, r2
   14e7c:	cmp	r1, #10
   14e80:	add	r2, r3, #16
   14e84:	vst1.64	{d16-d17}, [r3], ip
   14e88:	vst1.64	{d16-d17}, [r3]
   14e8c:	vst1.64	{d16-d17}, [r2]
   14e90:	beq	14eb0 <__assert_fail@plt+0x3788>
   14e94:	str	r1, [sp]
   14e98:	mov	r3, sp
   14e9c:	mov	r1, lr
   14ea0:	mvn	r2, #0
   14ea4:	bl	14c90 <__assert_fail@plt+0x3568>
   14ea8:	mov	sp, fp
   14eac:	pop	{fp, pc}
   14eb0:	bl	11704 <abort@plt>
   14eb4:	push	{r4, sl, fp, lr}
   14eb8:	add	fp, sp, #8
   14ebc:	sub	sp, sp, #48	; 0x30
   14ec0:	mov	ip, r3
   14ec4:	mov	r3, sp
   14ec8:	vmov.i32	q8, #0	; 0x00000000
   14ecc:	mov	lr, #32
   14ed0:	cmp	r1, #10
   14ed4:	add	r4, r3, #16
   14ed8:	vst1.64	{d16-d17}, [r3], lr
   14edc:	vst1.64	{d16-d17}, [r3]
   14ee0:	vst1.64	{d16-d17}, [r4]
   14ee4:	beq	14f04 <__assert_fail@plt+0x37dc>
   14ee8:	str	r1, [sp]
   14eec:	mov	r1, r2
   14ef0:	mov	r3, sp
   14ef4:	mov	r2, ip
   14ef8:	bl	14c90 <__assert_fail@plt+0x3568>
   14efc:	sub	sp, fp, #8
   14f00:	pop	{r4, sl, fp, pc}
   14f04:	bl	11704 <abort@plt>
   14f08:	mov	r2, r1
   14f0c:	mov	r1, r0
   14f10:	mov	r0, #0
   14f14:	b	14e60 <__assert_fail@plt+0x3738>
   14f18:	mov	r3, r2
   14f1c:	mov	r2, r1
   14f20:	mov	r1, r0
   14f24:	mov	r0, #0
   14f28:	b	14eb4 <__assert_fail@plt+0x378c>
   14f2c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14f30:	add	fp, sp, #24
   14f34:	sub	sp, sp, #48	; 0x30
   14f38:	movw	r8, #20928	; 0x51c0
   14f3c:	mov	lr, r0
   14f40:	mov	r3, sp
   14f44:	mov	ip, r1
   14f48:	movt	r8, #3
   14f4c:	mov	r1, r3
   14f50:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   14f54:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   14f58:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   14f5c:	stm	r1, {r0, r4, r5, r6, r7, r9}
   14f60:	ubfx	r0, r2, #5, #3
   14f64:	and	r2, r2, #31
   14f68:	mov	r4, #1
   14f6c:	add	r0, r3, r0, lsl #2
   14f70:	ldr	r1, [r0, #8]
   14f74:	bic	r4, r4, r1, lsr r2
   14f78:	eor	r1, r1, r4, lsl r2
   14f7c:	mov	r2, ip
   14f80:	str	r1, [r0, #8]
   14f84:	mov	r0, #0
   14f88:	mov	r1, lr
   14f8c:	bl	14c90 <__assert_fail@plt+0x3568>
   14f90:	sub	sp, fp, #24
   14f94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14f98:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f9c:	add	fp, sp, #24
   14fa0:	sub	sp, sp, #48	; 0x30
   14fa4:	movw	lr, #20928	; 0x51c0
   14fa8:	mov	ip, r0
   14fac:	mov	r3, sp
   14fb0:	movt	lr, #3
   14fb4:	mov	r2, r3
   14fb8:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   14fbc:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   14fc0:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   14fc4:	stm	r2, {r0, r4, r5, r6, r7, r8}
   14fc8:	ubfx	r0, r1, #5, #3
   14fcc:	and	r1, r1, #31
   14fd0:	mov	r7, #1
   14fd4:	add	r0, r3, r0, lsl #2
   14fd8:	ldr	r2, [r0, #8]
   14fdc:	bic	r7, r7, r2, lsr r1
   14fe0:	eor	r1, r2, r7, lsl r1
   14fe4:	mvn	r2, #0
   14fe8:	str	r1, [r0, #8]
   14fec:	mov	r0, #0
   14ff0:	mov	r1, ip
   14ff4:	bl	14c90 <__assert_fail@plt+0x3568>
   14ff8:	sub	sp, fp, #24
   14ffc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15000:	push	{r4, r5, r6, r7, fp, lr}
   15004:	add	fp, sp, #16
   15008:	sub	sp, sp, #48	; 0x30
   1500c:	movw	lr, #20928	; 0x51c0
   15010:	mov	ip, r0
   15014:	mov	r3, sp
   15018:	movt	lr, #3
   1501c:	mov	r2, r3
   15020:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   15024:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   15028:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   1502c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   15030:	mov	r1, ip
   15034:	mvn	r2, #0
   15038:	ldr	r0, [sp, #12]
   1503c:	orr	r0, r0, #67108864	; 0x4000000
   15040:	str	r0, [sp, #12]
   15044:	mov	r0, #0
   15048:	bl	14c90 <__assert_fail@plt+0x3568>
   1504c:	sub	sp, fp, #16
   15050:	pop	{r4, r5, r6, r7, fp, pc}
   15054:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15058:	add	fp, sp, #24
   1505c:	sub	sp, sp, #48	; 0x30
   15060:	movw	r8, #20928	; 0x51c0
   15064:	mov	ip, r1
   15068:	mov	lr, r0
   1506c:	mov	r3, sp
   15070:	movt	r8, #3
   15074:	mov	r2, r3
   15078:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   1507c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   15080:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   15084:	stm	r2, {r0, r1, r4, r5, r6, r7}
   15088:	mov	r1, lr
   1508c:	mov	r2, ip
   15090:	ldr	r0, [sp, #12]
   15094:	orr	r0, r0, #67108864	; 0x4000000
   15098:	str	r0, [sp, #12]
   1509c:	mov	r0, #0
   150a0:	bl	14c90 <__assert_fail@plt+0x3568>
   150a4:	sub	sp, fp, #24
   150a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   150ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   150b0:	add	fp, sp, #24
   150b4:	sub	sp, sp, #96	; 0x60
   150b8:	mov	lr, sp
   150bc:	vmov.i32	q8, #0	; 0x00000000
   150c0:	mov	ip, r2
   150c4:	cmp	r1, #10
   150c8:	add	r3, lr, #16
   150cc:	mov	r2, lr
   150d0:	vst1.64	{d16-d17}, [r3]
   150d4:	mov	r3, #28
   150d8:	vst1.64	{d16-d17}, [r2], r3
   150dc:	vst1.32	{d16-d17}, [r2]
   150e0:	beq	15120 <__assert_fail@plt+0x39f8>
   150e4:	str	r1, [sp, #48]	; 0x30
   150e8:	add	r3, sp, #48	; 0x30
   150ec:	ldm	lr!, {r2, r4, r5, r6, r7}
   150f0:	add	r1, r3, #4
   150f4:	stmia	r1!, {r2, r4, r5, r6, r7}
   150f8:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   150fc:	stm	r1, {r2, r4, r5, r6, r7, r8}
   15100:	mvn	r2, #0
   15104:	ldr	r1, [sp, #60]	; 0x3c
   15108:	orr	r1, r1, #67108864	; 0x4000000
   1510c:	str	r1, [sp, #60]	; 0x3c
   15110:	mov	r1, ip
   15114:	bl	14c90 <__assert_fail@plt+0x3568>
   15118:	sub	sp, fp, #24
   1511c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15120:	bl	11704 <abort@plt>
   15124:	push	{fp, lr}
   15128:	mov	fp, sp
   1512c:	sub	sp, sp, #8
   15130:	mvn	ip, #0
   15134:	str	ip, [sp]
   15138:	bl	15144 <__assert_fail@plt+0x3a1c>
   1513c:	mov	sp, fp
   15140:	pop	{fp, pc}
   15144:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15148:	add	fp, sp, #24
   1514c:	sub	sp, sp, #48	; 0x30
   15150:	movw	ip, #20928	; 0x51c0
   15154:	mov	lr, r3
   15158:	mov	r3, sp
   1515c:	cmp	r1, #0
   15160:	movt	ip, #3
   15164:	cmpne	r2, #0
   15168:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   1516c:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   15170:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   15174:	stm	r3, {r4, r5, r6, r7, r8, r9}
   15178:	mov	r3, #10
   1517c:	str	r3, [sp]
   15180:	bne	15188 <__assert_fail@plt+0x3a60>
   15184:	bl	11704 <abort@plt>
   15188:	ldr	ip, [fp, #8]
   1518c:	str	r2, [sp, #44]	; 0x2c
   15190:	str	r1, [sp, #40]	; 0x28
   15194:	mov	r3, sp
   15198:	mov	r1, lr
   1519c:	mov	r2, ip
   151a0:	bl	14c90 <__assert_fail@plt+0x3568>
   151a4:	sub	sp, fp, #24
   151a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   151ac:	push	{fp, lr}
   151b0:	mov	fp, sp
   151b4:	sub	sp, sp, #8
   151b8:	mov	r3, r2
   151bc:	mov	r2, r1
   151c0:	mov	r1, r0
   151c4:	mvn	r0, #0
   151c8:	str	r0, [sp]
   151cc:	mov	r0, #0
   151d0:	bl	15144 <__assert_fail@plt+0x3a1c>
   151d4:	mov	sp, fp
   151d8:	pop	{fp, pc}
   151dc:	push	{fp, lr}
   151e0:	mov	fp, sp
   151e4:	sub	sp, sp, #8
   151e8:	mov	ip, r2
   151ec:	mov	r2, r1
   151f0:	mov	r1, r0
   151f4:	str	r3, [sp]
   151f8:	mov	r0, #0
   151fc:	mov	r3, ip
   15200:	bl	15144 <__assert_fail@plt+0x3a1c>
   15204:	mov	sp, fp
   15208:	pop	{fp, pc}
   1520c:	movw	r3, #20832	; 0x5160
   15210:	movt	r3, #3
   15214:	b	14c90 <__assert_fail@plt+0x3568>
   15218:	movw	r3, #20832	; 0x5160
   1521c:	mov	r2, r1
   15220:	mov	r1, r0
   15224:	mov	r0, #0
   15228:	movt	r3, #3
   1522c:	b	14c90 <__assert_fail@plt+0x3568>
   15230:	movw	r3, #20832	; 0x5160
   15234:	mvn	r2, #0
   15238:	movt	r3, #3
   1523c:	b	14c90 <__assert_fail@plt+0x3568>
   15240:	movw	r3, #20832	; 0x5160
   15244:	mov	r1, r0
   15248:	mov	r0, #0
   1524c:	mvn	r2, #0
   15250:	movt	r3, #3
   15254:	b	14c90 <__assert_fail@plt+0x3568>
   15258:	push	{r4, r5, fp, lr}
   1525c:	add	fp, sp, #8
   15260:	mov	r5, r0
   15264:	mov	r4, r1
   15268:	mov	r0, #0
   1526c:	mov	r2, #5
   15270:	mov	r1, r5
   15274:	bl	114b8 <dcgettext@plt>
   15278:	cmp	r0, r5
   1527c:	popne	{r4, r5, fp, pc}
   15280:	bl	22df8 <__assert_fail@plt+0x116d0>
   15284:	ldrb	r1, [r0]
   15288:	and	r1, r1, #223	; 0xdf
   1528c:	cmp	r1, #71	; 0x47
   15290:	beq	152f8 <__assert_fail@plt+0x3bd0>
   15294:	cmp	r1, #85	; 0x55
   15298:	bne	1531c <__assert_fail@plt+0x3bf4>
   1529c:	ldrb	r1, [r0, #1]
   152a0:	and	r1, r1, #223	; 0xdf
   152a4:	cmp	r1, #84	; 0x54
   152a8:	bne	1531c <__assert_fail@plt+0x3bf4>
   152ac:	ldrb	r1, [r0, #2]
   152b0:	and	r1, r1, #223	; 0xdf
   152b4:	cmp	r1, #70	; 0x46
   152b8:	ldrbeq	r1, [r0, #3]
   152bc:	cmpeq	r1, #45	; 0x2d
   152c0:	bne	1531c <__assert_fail@plt+0x3bf4>
   152c4:	ldrb	r1, [r0, #4]
   152c8:	cmp	r1, #56	; 0x38
   152cc:	ldrbeq	r0, [r0, #5]
   152d0:	cmpeq	r0, #0
   152d4:	bne	1531c <__assert_fail@plt+0x3bf4>
   152d8:	ldrb	r1, [r5]
   152dc:	movw	r2, #15702	; 0x3d56
   152e0:	movw	r0, #15706	; 0x3d5a
   152e4:	movt	r2, #2
   152e8:	movt	r0, #2
   152ec:	cmp	r1, #96	; 0x60
   152f0:	moveq	r0, r2
   152f4:	pop	{r4, r5, fp, pc}
   152f8:	ldrb	r1, [r0, #1]
   152fc:	and	r1, r1, #223	; 0xdf
   15300:	cmp	r1, #66	; 0x42
   15304:	bne	1531c <__assert_fail@plt+0x3bf4>
   15308:	ldrb	r1, [r0, #2]
   1530c:	cmp	r1, #49	; 0x31
   15310:	ldrbeq	r1, [r0, #3]
   15314:	cmpeq	r1, #56	; 0x38
   15318:	beq	15338 <__assert_fail@plt+0x3c10>
   1531c:	movw	r1, #15698	; 0x3d52
   15320:	movw	r0, #15244	; 0x3b8c
   15324:	cmp	r4, #9
   15328:	movt	r1, #2
   1532c:	movt	r0, #2
   15330:	moveq	r0, r1
   15334:	pop	{r4, r5, fp, pc}
   15338:	ldrb	r1, [r0, #4]
   1533c:	cmp	r1, #48	; 0x30
   15340:	ldrbeq	r1, [r0, #5]
   15344:	cmpeq	r1, #51	; 0x33
   15348:	bne	1531c <__assert_fail@plt+0x3bf4>
   1534c:	ldrb	r1, [r0, #6]
   15350:	cmp	r1, #48	; 0x30
   15354:	ldrbeq	r0, [r0, #7]
   15358:	cmpeq	r0, #0
   1535c:	bne	1531c <__assert_fail@plt+0x3bf4>
   15360:	ldrb	r1, [r5]
   15364:	movw	r2, #15710	; 0x3d5e
   15368:	movw	r0, #15714	; 0x3d62
   1536c:	movt	r2, #2
   15370:	movt	r0, #2
   15374:	b	152ec <__assert_fail@plt+0x3bc4>
   15378:	push	{fp, lr}
   1537c:	mov	fp, sp
   15380:	mov	lr, r0
   15384:	movw	r0, #21232	; 0x52f0
   15388:	mov	ip, r1
   1538c:	ldrb	r1, [r2, #28]
   15390:	movt	r0, #3
   15394:	ldr	r3, [r0]
   15398:	mov	r0, #16
   1539c:	and	r1, r1, #111	; 0x6f
   153a0:	and	r0, r0, r3, lsr #21
   153a4:	orr	r0, r1, r0
   153a8:	mov	r1, lr
   153ac:	orr	r0, r0, #128	; 0x80
   153b0:	strb	r0, [r2, #28]
   153b4:	mov	r0, r2
   153b8:	mov	r2, ip
   153bc:	bl	153f4 <__assert_fail@plt+0x3ccc>
   153c0:	cmp	r0, #0
   153c4:	moveq	r0, #0
   153c8:	popeq	{fp, pc}
   153cc:	movw	r1, #16192	; 0x3f40
   153d0:	mov	r2, #5
   153d4:	movt	r1, #2
   153d8:	ldr	r0, [r1, r0, lsl #2]
   153dc:	movw	r1, #15808	; 0x3dc0
   153e0:	movt	r1, #2
   153e4:	add	r1, r1, r0
   153e8:	mov	r0, #0
   153ec:	pop	{fp, lr}
   153f0:	b	114b8 <dcgettext@plt>
   153f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153f8:	add	fp, sp, #28
   153fc:	sub	sp, sp, #140	; 0x8c
   15400:	str	r1, [sp, #24]
   15404:	mov	r1, #0
   15408:	str	r0, [sp, #28]
   1540c:	mov	sl, r2
   15410:	str	r3, [sp, #20]
   15414:	str	r1, [fp, #-52]	; 0xffffffcc
   15418:	str	r1, [r0, #8]
   1541c:	str	r3, [r0, #12]
   15420:	str	r1, [r0, #24]
   15424:	ldrb	r1, [r0, #28]
   15428:	and	r1, r1, #144	; 0x90
   1542c:	strb	r1, [r0, #28]
   15430:	ldr	r9, [r0]
   15434:	ldr	r0, [r0, #4]
   15438:	cmp	r0, #159	; 0x9f
   1543c:	bls	15fec <__assert_fail@plt+0x48c4>
   15440:	ldr	r1, [sp, #28]
   15444:	mov	r0, #160	; 0xa0
   15448:	mov	r2, #160	; 0xa0
   1544c:	str	r0, [r1, #8]
   15450:	mov	r0, r9
   15454:	mov	r1, #0
   15458:	bl	11620 <memset@plt>
   1545c:	mov	r0, #31
   15460:	str	r0, [r9, #64]	; 0x40
   15464:	movw	r0, #43689	; 0xaaa9
   15468:	movt	r0, #2730	; 0xaaa
   1546c:	cmp	sl, r0
   15470:	bhi	155e0 <__assert_fail@plt+0x3eb8>
   15474:	add	r0, sl, #1
   15478:	str	r0, [r9, #4]
   1547c:	str	r0, [sp, #12]
   15480:	lsl	r0, r0, #3
   15484:	bl	22aa0 <__assert_fail@plt+0x11378>
   15488:	str	r0, [r9]
   1548c:	mov	r0, #1
   15490:	mov	r4, r0
   15494:	lsl	r0, r0, #1
   15498:	cmp	r4, sl
   1549c:	bls	15490 <__assert_fail@plt+0x3d68>
   154a0:	mov	r0, #12
   154a4:	mov	r1, r4
   154a8:	bl	22a4c <__assert_fail@plt+0x11324>
   154ac:	str	r0, [r9, #32]
   154b0:	sub	r0, r4, #1
   154b4:	str	r0, [r9, #68]	; 0x44
   154b8:	bl	11524 <__ctype_get_mb_cur_max@plt>
   154bc:	str	r0, [r9, #92]	; 0x5c
   154c0:	mov	r0, #14
   154c4:	bl	116b0 <nl_langinfo@plt>
   154c8:	ldrb	r1, [r0]
   154cc:	orr	r1, r1, #32
   154d0:	cmp	r1, #117	; 0x75
   154d4:	bne	15520 <__assert_fail@plt+0x3df8>
   154d8:	ldrb	r1, [r0, #1]
   154dc:	orr	r1, r1, #32
   154e0:	cmp	r1, #116	; 0x74
   154e4:	bne	15520 <__assert_fail@plt+0x3df8>
   154e8:	ldrb	r1, [r0, #2]
   154ec:	orr	r1, r1, #32
   154f0:	cmp	r1, #102	; 0x66
   154f4:	bne	15520 <__assert_fail@plt+0x3df8>
   154f8:	ldrb	r1, [r0, #3]!
   154fc:	cmp	r1, #45	; 0x2d
   15500:	movw	r1, #16308	; 0x3fb4
   15504:	addeq	r0, r0, #1
   15508:	movt	r1, #2
   1550c:	bl	113ec <strcmp@plt>
   15510:	cmp	r0, #0
   15514:	ldrbeq	r0, [r9, #88]	; 0x58
   15518:	orreq	r0, r0, #4
   1551c:	strbeq	r0, [r9, #88]	; 0x58
   15520:	ldrb	r0, [r9, #88]	; 0x58
   15524:	and	r1, r0, #247	; 0xf7
   15528:	strb	r1, [r9, #88]	; 0x58
   1552c:	ldr	r1, [r9, #92]	; 0x5c
   15530:	cmp	r1, #2
   15534:	blt	155cc <__assert_fail@plt+0x3ea4>
   15538:	tst	r0, #4
   1553c:	bne	155c0 <__assert_fail@plt+0x3e98>
   15540:	mov	r0, #32
   15544:	mov	r1, #1
   15548:	mov	r8, #1
   1554c:	bl	22a4c <__assert_fail@plt+0x11324>
   15550:	cmp	r0, #0
   15554:	str	r0, [r9, #60]	; 0x3c
   15558:	beq	155e0 <__assert_fail@plt+0x3eb8>
   1555c:	mov	r7, #0
   15560:	mov	r5, #0
   15564:	mov	r6, #0
   15568:	add	r4, r7, r6
   1556c:	mov	r0, r4
   15570:	bl	1162c <btowc@plt>
   15574:	cmn	r0, #1
   15578:	ldrne	r1, [r9, #60]	; 0x3c
   1557c:	ldrne	r2, [r1, r5, lsl #2]
   15580:	orrne	r2, r2, r8, lsl r6
   15584:	strne	r2, [r1, r5, lsl #2]
   15588:	cmp	r4, #127	; 0x7f
   1558c:	bhi	155a0 <__assert_fail@plt+0x3e78>
   15590:	cmp	r4, r0
   15594:	ldrbne	r0, [r9, #88]	; 0x58
   15598:	orrne	r0, r0, #8
   1559c:	strbne	r0, [r9, #88]	; 0x58
   155a0:	add	r6, r6, #1
   155a4:	cmp	r6, #32
   155a8:	bne	15568 <__assert_fail@plt+0x3e40>
   155ac:	add	r5, r5, #1
   155b0:	add	r7, r7, #32
   155b4:	cmp	r5, #8
   155b8:	bne	15564 <__assert_fail@plt+0x3e3c>
   155bc:	b	155cc <__assert_fail@plt+0x3ea4>
   155c0:	movw	r0, #16260	; 0x3f84
   155c4:	movt	r0, #2
   155c8:	str	r0, [r9, #60]	; 0x3c
   155cc:	ldr	r0, [r9]
   155d0:	cmp	r0, #0
   155d4:	ldrne	r0, [r9, #32]
   155d8:	cmpne	r0, #0
   155dc:	bne	15604 <__assert_fail@plt+0x3edc>
   155e0:	mov	r4, #12
   155e4:	mov	r0, r9
   155e8:	str	r4, [fp, #-52]	; 0xffffffcc
   155ec:	bl	16694 <__assert_fail@plt+0x4f6c>
   155f0:	ldr	r0, [sp, #28]
   155f4:	mov	r1, #0
   155f8:	str	r1, [r0]
   155fc:	str	r1, [r0, #4]
   15600:	b	15f74 <__assert_fail@plt+0x484c>
   15604:	movw	r0, #0
   15608:	movw	r1, #0
   1560c:	mov	r4, #0
   15610:	movt	r0, #0
   15614:	movt	r1, #0
   15618:	str	r4, [fp, #-52]	; 0xffffffcc
   1561c:	orrs	r0, r1, r0
   15620:	str	r0, [sp, #8]
   15624:	beq	1563c <__assert_fail@plt+0x3f14>
   15628:	add	r0, r9, #136	; 0x88
   1562c:	mov	r1, #0
   15630:	bl	11488 <pthread_mutex_init@plt>
   15634:	cmp	r0, #0
   15638:	bne	155e0 <__assert_fail@plt+0x3eb8>
   1563c:	ldr	r0, [sp, #28]
   15640:	add	r5, sp, #32
   15644:	mov	r1, #0
   15648:	mov	r2, #76	; 0x4c
   1564c:	ldr	r8, [r0, #20]
   15650:	add	r0, r5, #4
   15654:	bl	11620 <memset@plt>
   15658:	ldr	r0, [sp, #24]
   1565c:	ldr	r1, [sp, #20]
   15660:	add	r3, r5, #44	; 0x2c
   15664:	vdup.32	q8, sl
   15668:	str	r0, [sp, #32]
   1566c:	str	r8, [sp, #96]	; 0x60
   15670:	ubfx	r0, r1, #22, #1
   15674:	strb	r0, [sp, #104]	; 0x68
   15678:	and	r0, r1, #4194304	; 0x400000
   1567c:	orrs	r1, r0, r8
   15680:	str	r0, [sp, #16]
   15684:	movwne	r1, #1
   15688:	cmp	sl, #1
   1568c:	strb	r1, [sp, #107]	; 0x6b
   15690:	ldr	r0, [r9, #92]	; 0x5c
   15694:	str	r0, [sp, #112]	; 0x70
   15698:	ldrb	r2, [r9, #88]	; 0x58
   1569c:	vst1.32	{d16-d17}, [r3]
   156a0:	ubfx	r3, r2, #3, #1
   156a4:	strb	r3, [sp, #106]	; 0x6a
   156a8:	ubfx	r2, r2, #2, #1
   156ac:	strb	r2, [sp, #105]	; 0x69
   156b0:	blt	156d4 <__assert_fail@plt+0x3fac>
   156b4:	ldr	r1, [sp, #12]
   156b8:	add	r0, sp, #32
   156bc:	bl	18908 <__assert_fail@plt+0x71e0>
   156c0:	cmp	r0, #0
   156c4:	bne	15744 <__assert_fail@plt+0x401c>
   156c8:	ldr	r0, [r9, #92]	; 0x5c
   156cc:	ldr	r4, [sp, #36]	; 0x24
   156d0:	ldrb	r1, [sp, #107]	; 0x6b
   156d4:	cmp	r1, #0
   156d8:	ldr	r1, [sp, #24]
   156dc:	moveq	r4, r1
   156e0:	ldr	r1, [sp, #16]
   156e4:	str	r4, [sp, #36]	; 0x24
   156e8:	cmp	r1, #0
   156ec:	beq	1574c <__assert_fail@plt+0x4024>
   156f0:	cmp	r0, #2
   156f4:	blt	15760 <__assert_fail@plt+0x4038>
   156f8:	add	r4, sp, #32
   156fc:	mov	r0, r4
   15700:	bl	189a8 <__assert_fail@plt+0x7280>
   15704:	cmp	r0, #0
   15708:	bne	15744 <__assert_fail@plt+0x401c>
   1570c:	ldr	r0, [sp, #64]	; 0x40
   15710:	cmp	r0, sl
   15714:	bge	157f4 <__assert_fail@plt+0x40cc>
   15718:	ldr	r1, [r9, #92]	; 0x5c
   1571c:	ldr	r2, [sp, #60]	; 0x3c
   15720:	ldr	r0, [sp, #68]	; 0x44
   15724:	add	r1, r1, r2
   15728:	cmp	r0, r1
   1572c:	bgt	157f4 <__assert_fail@plt+0x40cc>
   15730:	lsl	r1, r0, #1
   15734:	mov	r0, r4
   15738:	bl	18908 <__assert_fail@plt+0x71e0>
   1573c:	cmp	r0, #0
   15740:	beq	156fc <__assert_fail@plt+0x3fd4>
   15744:	ldr	sl, [sp, #28]
   15748:	b	15948 <__assert_fail@plt+0x4220>
   1574c:	cmp	r0, #2
   15750:	blt	1576c <__assert_fail@plt+0x4044>
   15754:	add	r0, sp, #32
   15758:	bl	18f84 <__assert_fail@plt+0x785c>
   1575c:	b	157f4 <__assert_fail@plt+0x40cc>
   15760:	add	r0, sp, #32
   15764:	bl	18f18 <__assert_fail@plt+0x77f0>
   15768:	b	157f4 <__assert_fail@plt+0x40cc>
   1576c:	ldr	r0, [sp, #68]	; 0x44
   15770:	cmp	r8, #0
   15774:	beq	157ec <__assert_fail@plt+0x40c4>
   15778:	ldr	r2, [sp, #80]	; 0x50
   1577c:	ldr	r1, [sp, #60]	; 0x3c
   15780:	cmp	r0, r2
   15784:	movgt	r0, r2
   15788:	cmp	r1, r0
   1578c:	bge	157e0 <__assert_fail@plt+0x40b8>
   15790:	ldr	r3, [sp, #56]	; 0x38
   15794:	ldr	r2, [sp, #32]
   15798:	ldr	r7, [sp, #96]	; 0x60
   1579c:	add	r3, r3, r1
   157a0:	ldrb	r2, [r2, r3]
   157a4:	ldrb	r2, [r7, r2]
   157a8:	strb	r2, [r4, r1]
   157ac:	b	157d0 <__assert_fail@plt+0x40a8>
   157b0:	ldr	r2, [sp, #32]
   157b4:	ldr	r7, [sp, #56]	; 0x38
   157b8:	ldr	r6, [sp, #96]	; 0x60
   157bc:	ldr	r3, [sp, #36]	; 0x24
   157c0:	add	r2, r2, r7
   157c4:	ldrb	r2, [r2, r1]
   157c8:	ldrb	r2, [r6, r2]
   157cc:	strb	r2, [r3, r1]
   157d0:	add	r1, r1, #1
   157d4:	cmp	r1, r0
   157d8:	blt	157b0 <__assert_fail@plt+0x4088>
   157dc:	mov	r1, r0
   157e0:	str	r1, [sp, #64]	; 0x40
   157e4:	str	r1, [sp, #60]	; 0x3c
   157e8:	b	157f4 <__assert_fail@plt+0x40cc>
   157ec:	str	r0, [sp, #64]	; 0x40
   157f0:	str	r0, [sp, #60]	; 0x3c
   157f4:	ldr	sl, [sp, #28]
   157f8:	mov	r5, #0
   157fc:	ldr	r6, [sp, #20]
   15800:	sub	r8, fp, #48	; 0x30
   15804:	add	r7, sp, #32
   15808:	str	r5, [fp, #-52]	; 0xffffffcc
   1580c:	mov	r0, r8
   15810:	mov	r1, r7
   15814:	str	r5, [sl, #24]
   15818:	orr	r2, r6, #8388608	; 0x800000
   1581c:	ldr	r4, [sl]
   15820:	str	r6, [r4, #128]	; 0x80
   15824:	bl	19370 <__assert_fail@plt+0x7c48>
   15828:	ldr	r1, [sp, #72]	; 0x48
   1582c:	mov	r2, r8
   15830:	mov	r3, r6
   15834:	str	r5, [sp]
   15838:	add	r0, r1, r0
   1583c:	mov	r1, sl
   15840:	str	r0, [sp, #72]	; 0x48
   15844:	sub	r0, fp, #52	; 0x34
   15848:	str	r0, [sp, #4]
   1584c:	mov	r0, r7
   15850:	bl	191c0 <__assert_fail@plt+0x7a98>
   15854:	mov	r6, r0
   15858:	cmp	r0, #0
   1585c:	bne	1586c <__assert_fail@plt+0x4144>
   15860:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15864:	cmp	r0, #0
   15868:	bne	16020 <__assert_fail@plt+0x48f8>
   1586c:	mov	r0, #2
   15870:	sub	r3, fp, #40	; 0x28
   15874:	mov	r1, #0
   15878:	mov	r2, #0
   1587c:	str	r0, [fp, #-36]	; 0xffffffdc
   15880:	mov	r0, r4
   15884:	str	r5, [fp, #-40]	; 0xffffffd8
   15888:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1588c:	mov	r7, r0
   15890:	cmp	r6, #0
   15894:	beq	158c0 <__assert_fail@plt+0x4198>
   15898:	mov	r0, #16
   1589c:	sub	r3, fp, #40	; 0x28
   158a0:	mov	r1, r6
   158a4:	mov	r2, r7
   158a8:	str	r0, [fp, #-36]	; 0xffffffdc
   158ac:	mov	r0, #0
   158b0:	str	r0, [fp, #-40]	; 0xffffffd8
   158b4:	mov	r0, r4
   158b8:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   158bc:	b	158c4 <__assert_fail@plt+0x419c>
   158c0:	mov	r0, r7
   158c4:	cmp	r7, #0
   158c8:	cmpne	r0, #0
   158cc:	beq	16018 <__assert_fail@plt+0x48f0>
   158d0:	str	r0, [r9, #52]	; 0x34
   158d4:	ldr	r8, [sl]
   158d8:	ldr	r0, [r8, #4]
   158dc:	lsl	r0, r0, #2
   158e0:	bl	22aa0 <__assert_fail@plt+0x11378>
   158e4:	str	r0, [r8, #12]
   158e8:	ldr	r0, [r8, #4]
   158ec:	lsl	r0, r0, #2
   158f0:	bl	22aa0 <__assert_fail@plt+0x11378>
   158f4:	str	r0, [r8, #16]
   158f8:	ldr	r0, [r8, #4]
   158fc:	add	r0, r0, r0, lsl #1
   15900:	lsl	r0, r0, #2
   15904:	bl	22aa0 <__assert_fail@plt+0x11378>
   15908:	str	r0, [r8, #20]
   1590c:	ldr	r0, [r8, #4]
   15910:	add	r0, r0, r0, lsl #1
   15914:	lsl	r0, r0, #2
   15918:	bl	22aa0 <__assert_fail@plt+0x11378>
   1591c:	str	r0, [r8, #24]
   15920:	ldr	r1, [r8, #12]
   15924:	cmp	r1, #0
   15928:	ldrne	r1, [r8, #16]
   1592c:	cmpne	r1, #0
   15930:	beq	15944 <__assert_fail@plt+0x421c>
   15934:	cmp	r0, #0
   15938:	ldrne	r0, [r8, #20]
   1593c:	cmpne	r0, #0
   15940:	bne	1598c <__assert_fail@plt+0x4264>
   15944:	mov	r0, #12
   15948:	str	r0, [fp, #-52]	; 0xffffffcc
   1594c:	mov	r0, sl
   15950:	bl	18884 <__assert_fail@plt+0x715c>
   15954:	add	r0, sp, #32
   15958:	bl	188d4 <__assert_fail@plt+0x71ac>
   1595c:	ldr	r0, [sp, #8]
   15960:	cmp	r0, #0
   15964:	beq	15970 <__assert_fail@plt+0x4248>
   15968:	add	r0, r9, #136	; 0x88
   1596c:	bl	11410 <pthread_mutex_destroy@plt>
   15970:	mov	r0, r9
   15974:	bl	16694 <__assert_fail@plt+0x4f6c>
   15978:	mov	r0, #0
   1597c:	str	r0, [sl]
   15980:	str	r0, [sl, #4]
   15984:	ldr	r4, [fp, #-52]	; 0xffffffcc
   15988:	b	15f74 <__assert_fail@plt+0x484c>
   1598c:	ldr	r0, [sl, #24]
   15990:	lsl	r0, r0, #2
   15994:	bl	22aa0 <__assert_fail@plt+0x11378>
   15998:	cmp	r0, #0
   1599c:	str	r0, [r8, #132]	; 0x84
   159a0:	beq	15a14 <__assert_fail@plt+0x42ec>
   159a4:	ldr	r1, [sl, #24]
   159a8:	cmp	r1, #0
   159ac:	beq	159c4 <__assert_fail@plt+0x429c>
   159b0:	mov	r2, #0
   159b4:	str	r2, [r0, r2, lsl #2]
   159b8:	add	r2, r2, #1
   159bc:	cmp	r1, r2
   159c0:	bne	159b4 <__assert_fail@plt+0x428c>
   159c4:	mov	r4, r8
   159c8:	movw	r1, #49976	; 0xc338
   159cc:	mov	r2, r8
   159d0:	ldr	r0, [r4, #52]!	; 0x34
   159d4:	movt	r1, #1
   159d8:	bl	1c2b8 <__assert_fail@plt+0xab90>
   159dc:	ldr	r1, [sl, #24]
   159e0:	cmp	r1, #0
   159e4:	beq	15a1c <__assert_fail@plt+0x42f4>
   159e8:	ldr	r0, [r8, #132]	; 0x84
   159ec:	mov	r2, #0
   159f0:	ldr	r3, [r0, r2, lsl #2]
   159f4:	cmp	r2, r3
   159f8:	bne	15a08 <__assert_fail@plt+0x42e0>
   159fc:	add	r2, r2, #1
   15a00:	cmp	r2, r1
   15a04:	bcc	159f0 <__assert_fail@plt+0x42c8>
   15a08:	cmp	r2, r1
   15a0c:	beq	15a20 <__assert_fail@plt+0x42f8>
   15a10:	b	15a2c <__assert_fail@plt+0x4304>
   15a14:	add	r4, r8, #52	; 0x34
   15a18:	b	15a2c <__assert_fail@plt+0x4304>
   15a1c:	ldr	r0, [r8, #132]	; 0x84
   15a20:	bl	132d4 <__assert_fail@plt+0x1bac>
   15a24:	mov	r0, #0
   15a28:	str	r0, [r8, #132]	; 0x84
   15a2c:	ldr	r0, [r4]
   15a30:	movw	r1, #50128	; 0xc3d0
   15a34:	mov	r2, sl
   15a38:	movt	r1, #1
   15a3c:	bl	19c18 <__assert_fail@plt+0x84f0>
   15a40:	cmp	r0, #0
   15a44:	bne	15948 <__assert_fail@plt+0x4220>
   15a48:	ldr	r0, [r8, #52]	; 0x34
   15a4c:	movw	r1, #50264	; 0xc458
   15a50:	mov	r2, r8
   15a54:	movt	r1, #1
   15a58:	bl	19c18 <__assert_fail@plt+0x84f0>
   15a5c:	cmp	r0, #0
   15a60:	bne	15948 <__assert_fail@plt+0x4220>
   15a64:	ldr	r0, [r8, #52]	; 0x34
   15a68:	movw	r1, #50404	; 0xc4e4
   15a6c:	mov	r2, r8
   15a70:	movt	r1, #1
   15a74:	bl	1c2b8 <__assert_fail@plt+0xab90>
   15a78:	ldr	r0, [r8, #52]	; 0x34
   15a7c:	movw	r1, #50500	; 0xc544
   15a80:	mov	r2, r8
   15a84:	movt	r1, #1
   15a88:	bl	1c2b8 <__assert_fail@plt+0xab90>
   15a8c:	cmp	r0, #0
   15a90:	bne	15948 <__assert_fail@plt+0x4220>
   15a94:	ldr	r0, [r8, #8]
   15a98:	cmp	r0, #0
   15a9c:	beq	15b40 <__assert_fail@plt+0x4418>
   15aa0:	mov	r5, #0
   15aa4:	sub	r7, fp, #40	; 0x28
   15aa8:	mov	r4, #0
   15aac:	ldr	r0, [r8, #24]
   15ab0:	add	r6, r4, r4, lsl #1
   15ab4:	add	r0, r0, r6, lsl #2
   15ab8:	ldr	r0, [r0, #4]
   15abc:	cmp	r0, #0
   15ac0:	beq	15acc <__assert_fail@plt+0x43a4>
   15ac4:	mov	r1, r5
   15ac8:	b	15b0c <__assert_fail@plt+0x43e4>
   15acc:	mov	r0, r7
   15ad0:	mov	r1, r8
   15ad4:	mov	r2, r4
   15ad8:	mov	r3, #1
   15adc:	bl	1c9f8 <__assert_fail@plt+0xb2d0>
   15ae0:	cmp	r0, #0
   15ae4:	bne	15948 <__assert_fail@plt+0x4220>
   15ae8:	ldr	r0, [r8, #24]
   15aec:	mov	r1, r5
   15af0:	add	r0, r0, r6, lsl #2
   15af4:	ldr	r0, [r0, #4]
   15af8:	cmp	r0, #0
   15afc:	bne	15b0c <__assert_fail@plt+0x43e4>
   15b00:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15b04:	bl	132d4 <__assert_fail@plt+0x1bac>
   15b08:	mov	r1, #1
   15b0c:	ldr	r2, [r8, #8]
   15b10:	add	r0, r4, #1
   15b14:	subs	r3, r0, r2
   15b18:	mov	r4, r3
   15b1c:	movwne	r3, #1
   15b20:	movne	r4, r0
   15b24:	tst	r1, #1
   15b28:	and	r5, r1, r3
   15b2c:	cmpeq	r0, r2
   15b30:	bne	15aac <__assert_fail@plt+0x4384>
   15b34:	add	r0, r0, r0, lsl #1
   15b38:	lsl	r0, r0, #2
   15b3c:	b	15b44 <__assert_fail@plt+0x441c>
   15b40:	mov	r0, #0
   15b44:	ldrb	r1, [sl, #28]
   15b48:	tst	r1, #16
   15b4c:	bne	15b64 <__assert_fail@plt+0x443c>
   15b50:	ldr	r1, [sl, #24]
   15b54:	cmp	r1, #0
   15b58:	ldrbne	r1, [r8, #88]	; 0x58
   15b5c:	tstne	r1, #1
   15b60:	bne	15b70 <__assert_fail@plt+0x4448>
   15b64:	ldr	r1, [r8, #76]	; 0x4c
   15b68:	cmp	r1, #0
   15b6c:	beq	15c48 <__assert_fail@plt+0x4520>
   15b70:	bl	22aa0 <__assert_fail@plt+0x11378>
   15b74:	cmp	r0, #0
   15b78:	str	r0, [r8, #28]
   15b7c:	beq	15944 <__assert_fail@plt+0x421c>
   15b80:	ldr	r1, [r8, #8]
   15b84:	cmp	r1, #0
   15b88:	beq	15c48 <__assert_fail@plt+0x4520>
   15b8c:	mov	r1, #0
   15b90:	str	r1, [r0]
   15b94:	str	r1, [r0, #4]
   15b98:	str	r1, [r0, #8]
   15b9c:	ldr	r0, [r8, #8]
   15ba0:	cmp	r0, #2
   15ba4:	bcc	15bd4 <__assert_fail@plt+0x44ac>
   15ba8:	mov	r2, #1
   15bac:	mov	r3, #12
   15bb0:	ldr	r0, [r8, #28]
   15bb4:	add	r2, r2, #1
   15bb8:	str	r1, [r0, r3]!
   15bbc:	add	r3, r3, #12
   15bc0:	str	r1, [r0, #4]
   15bc4:	str	r1, [r0, #8]
   15bc8:	ldr	r0, [r8, #8]
   15bcc:	cmp	r2, r0
   15bd0:	bcc	15bb0 <__assert_fail@plt+0x4488>
   15bd4:	cmp	r0, #0
   15bd8:	beq	15c48 <__assert_fail@plt+0x4520>
   15bdc:	ldr	r1, [r8, #24]
   15be0:	mov	r4, #0
   15be4:	add	r5, r4, r4, lsl #1
   15be8:	add	r2, r1, r5, lsl #2
   15bec:	ldr	r3, [r2, #4]
   15bf0:	cmp	r3, #1
   15bf4:	blt	15c3c <__assert_fail@plt+0x4514>
   15bf8:	ldr	r7, [r2, #8]
   15bfc:	mov	r6, #0
   15c00:	ldr	r0, [r7, r6, lsl #2]
   15c04:	ldr	r1, [r8, #28]
   15c08:	add	r0, r0, r0, lsl #1
   15c0c:	add	r0, r1, r0, lsl #2
   15c10:	mov	r1, r4
   15c14:	bl	1d238 <__assert_fail@plt+0xbb10>
   15c18:	cmp	r0, #0
   15c1c:	beq	15944 <__assert_fail@plt+0x421c>
   15c20:	ldr	r1, [r8, #24]
   15c24:	add	r6, r6, #1
   15c28:	add	r0, r1, r5, lsl #2
   15c2c:	ldr	r0, [r0, #4]
   15c30:	cmp	r6, r0
   15c34:	blt	15c00 <__assert_fail@plt+0x44d8>
   15c38:	ldr	r0, [r8, #8]
   15c3c:	add	r4, r4, #1
   15c40:	cmp	r4, r0
   15c44:	bcc	15be4 <__assert_fail@plt+0x44bc>
   15c48:	mov	r0, #0
   15c4c:	str	r0, [fp, #-52]	; 0xffffffcc
   15c50:	ldr	r0, [sp, #16]
   15c54:	cmp	r0, #0
   15c58:	bne	15d8c <__assert_fail@plt+0x4664>
   15c5c:	ldrb	r2, [r9, #88]	; 0x58
   15c60:	ands	r0, r2, #4
   15c64:	beq	15d8c <__assert_fail@plt+0x4664>
   15c68:	ldr	r0, [sp, #28]
   15c6c:	ldr	r0, [r0, #20]
   15c70:	cmp	r0, #0
   15c74:	bne	15d8c <__assert_fail@plt+0x4664>
   15c78:	ldr	r7, [r9, #8]
   15c7c:	mov	sl, #0
   15c80:	cmp	r7, #0
   15c84:	beq	15d60 <__assert_fail@plt+0x4638>
   15c88:	ldr	r3, [r9]
   15c8c:	mov	r8, #0
   15c90:	mov	ip, #1
   15c94:	mov	lr, #139	; 0x8b
   15c98:	mov	r6, #0
   15c9c:	mov	r4, #0
   15ca0:	add	r1, r3, r4, lsl #3
   15ca4:	ldrb	r5, [r1, #4]
   15ca8:	sub	r5, r5, #1
   15cac:	cmp	r5, #11
   15cb0:	bhi	1603c <__assert_fail@plt+0x4914>
   15cb4:	add	r0, pc, #0
   15cb8:	ldr	pc, [r0, r5, lsl #2]
   15cbc:	andeq	r5, r1, r0, asr #26
   15cc0:	andeq	r5, r1, ip, ror #25
   15cc4:	strdeq	r5, [r1], -ip
   15cc8:	andeq	r5, r1, ip, ror #25
   15ccc:	andeq	r5, r1, r8, asr sp
   15cd0:	andeq	r5, r1, ip, lsl #27
   15cd4:	andeq	r6, r1, ip, lsr r0
   15cd8:	andeq	r5, r1, ip, ror #25
   15cdc:	andeq	r5, r1, ip, ror #25
   15ce0:	andeq	r5, r1, ip, ror #25
   15ce4:	andeq	r5, r1, ip, ror #25
   15ce8:	andeq	r5, r1, r0, lsr #26
   15cec:	add	r4, r4, #1
   15cf0:	cmp	r4, r7
   15cf4:	bcc	15ca0 <__assert_fail@plt+0x4578>
   15cf8:	b	15f80 <__assert_fail@plt+0x4858>
   15cfc:	ldr	r5, [r3, r4, lsl #3]
   15d00:	mov	r1, #4
   15d04:	ldr	r0, [r5, r1, lsl #2]
   15d08:	cmp	r0, #0
   15d0c:	bne	15d8c <__assert_fail@plt+0x4664>
   15d10:	add	r1, r1, #1
   15d14:	cmp	r1, #7
   15d18:	bls	15d04 <__assert_fail@plt+0x45dc>
   15d1c:	b	15cec <__assert_fail@plt+0x45c4>
   15d20:	ldr	r0, [r3, r4, lsl #3]
   15d24:	sub	r0, r0, #16
   15d28:	ror	r1, r0, #4
   15d2c:	cmp	r1, #7
   15d30:	bhi	15d8c <__assert_fail@plt+0x4664>
   15d34:	tst	lr, ip, lsl r1
   15d38:	bne	15cec <__assert_fail@plt+0x45c4>
   15d3c:	b	15d8c <__assert_fail@plt+0x4664>
   15d40:	ldrsb	r0, [r1]
   15d44:	cmp	r0, #0
   15d48:	mov	r0, #0
   15d4c:	movwlt	r0, #1
   15d50:	orr	r6, r6, r0
   15d54:	b	15cec <__assert_fail@plt+0x45c4>
   15d58:	mov	r8, #1
   15d5c:	b	15cec <__assert_fail@plt+0x45c4>
   15d60:	mov	r8, #0
   15d64:	mov	r0, #1
   15d68:	and	r1, r2, #249	; 0xf9
   15d6c:	str	r0, [r9, #92]	; 0x5c
   15d70:	ldr	r0, [r9, #76]	; 0x4c
   15d74:	cmp	r0, #0
   15d78:	movwgt	sl, #1
   15d7c:	orr	r0, r8, sl
   15d80:	and	r0, r0, #1
   15d84:	orr	r0, r1, r0, lsl #1
   15d88:	strb	r0, [r9, #88]	; 0x58
   15d8c:	ldr	r1, [r9, #52]	; 0x34
   15d90:	ldr	r0, [r9, #24]
   15d94:	ldr	r1, [r1, #12]
   15d98:	ldr	r1, [r1, #28]
   15d9c:	str	r1, [r9, #72]	; 0x48
   15da0:	add	r1, r1, r1, lsl #1
   15da4:	add	r1, r0, r1, lsl #2
   15da8:	sub	r0, fp, #40	; 0x28
   15dac:	bl	1d2a0 <__assert_fail@plt+0xbb78>
   15db0:	cmp	r0, #0
   15db4:	str	r0, [fp, #-48]	; 0xffffffd0
   15db8:	bne	16034 <__assert_fail@plt+0x490c>
   15dbc:	ldr	r0, [r9, #76]	; 0x4c
   15dc0:	ldr	sl, [sp, #28]
   15dc4:	cmp	r0, #1
   15dc8:	ldrge	r7, [fp, #-36]	; 0xffffffdc
   15dcc:	cmpge	r7, #1
   15dd0:	blt	15e94 <__assert_fail@plt+0x476c>
   15dd4:	mov	r6, #0
   15dd8:	sub	r8, fp, #40	; 0x28
   15ddc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15de0:	ldr	r2, [r9]
   15de4:	ldr	r0, [r1, r6, lsl #2]
   15de8:	add	r3, r2, r0, lsl #3
   15dec:	ldrb	r3, [r3, #4]
   15df0:	cmp	r3, #4
   15df4:	bne	15e88 <__assert_fail@plt+0x4760>
   15df8:	mov	r3, #0
   15dfc:	cmp	r7, #1
   15e00:	blt	15e34 <__assert_fail@plt+0x470c>
   15e04:	ldr	r5, [r1, r3, lsl #2]
   15e08:	add	r4, r2, r5, lsl #3
   15e0c:	ldrb	r4, [r4, #4]
   15e10:	cmp	r4, #9
   15e14:	bne	15e28 <__assert_fail@plt+0x4700>
   15e18:	ldr	r4, [r2, r0, lsl #3]
   15e1c:	ldr	r5, [r2, r5, lsl #3]
   15e20:	cmp	r5, r4
   15e24:	beq	15e34 <__assert_fail@plt+0x470c>
   15e28:	add	r3, r3, #1
   15e2c:	cmp	r3, r7
   15e30:	blt	15e04 <__assert_fail@plt+0x46dc>
   15e34:	cmp	r3, r7
   15e38:	beq	15e88 <__assert_fail@plt+0x4760>
   15e3c:	ldr	r1, [r9, #20]
   15e40:	add	r0, r0, r0, lsl #1
   15e44:	add	r0, r1, r0, lsl #2
   15e48:	ldr	r0, [r0, #8]
   15e4c:	ldr	r4, [r0]
   15e50:	mov	r0, r8
   15e54:	mov	r1, r4
   15e58:	bl	1d31c <__assert_fail@plt+0xbbf4>
   15e5c:	cmp	r0, #0
   15e60:	bne	15e88 <__assert_fail@plt+0x4760>
   15e64:	ldr	r0, [r9, #24]
   15e68:	add	r1, r4, r4, lsl #1
   15e6c:	add	r1, r0, r1, lsl #2
   15e70:	mov	r0, r8
   15e74:	bl	1cef0 <__assert_fail@plt+0xb7c8>
   15e78:	cmp	r0, #0
   15e7c:	bne	15f50 <__assert_fail@plt+0x4828>
   15e80:	ldr	r7, [fp, #-36]	; 0xffffffdc
   15e84:	mov	r6, #0
   15e88:	add	r6, r6, #1
   15e8c:	cmp	r6, r7
   15e90:	blt	15ddc <__assert_fail@plt+0x46b4>
   15e94:	sub	r0, fp, #48	; 0x30
   15e98:	sub	r2, fp, #40	; 0x28
   15e9c:	mov	r1, r9
   15ea0:	mov	r3, #0
   15ea4:	bl	1d380 <__assert_fail@plt+0xbc58>
   15ea8:	cmp	r0, #0
   15eac:	str	r0, [r9, #36]	; 0x24
   15eb0:	beq	15f30 <__assert_fail@plt+0x4808>
   15eb4:	ldrsb	r1, [r0, #52]	; 0x34
   15eb8:	cmn	r1, #1
   15ebc:	ble	15ed0 <__assert_fail@plt+0x47a8>
   15ec0:	str	r0, [r9, #40]	; 0x28
   15ec4:	str	r0, [r9, #44]	; 0x2c
   15ec8:	str	r0, [r9, #48]	; 0x30
   15ecc:	b	15f44 <__assert_fail@plt+0x481c>
   15ed0:	sub	r4, fp, #48	; 0x30
   15ed4:	sub	r6, fp, #40	; 0x28
   15ed8:	mov	r1, r9
   15edc:	mov	r3, #1
   15ee0:	mov	r0, r4
   15ee4:	mov	r2, r6
   15ee8:	bl	1d380 <__assert_fail@plt+0xbc58>
   15eec:	str	r0, [r9, #40]	; 0x28
   15ef0:	mov	r0, r4
   15ef4:	mov	r1, r9
   15ef8:	mov	r2, r6
   15efc:	mov	r3, #2
   15f00:	bl	1d380 <__assert_fail@plt+0xbc58>
   15f04:	str	r0, [r9, #44]	; 0x2c
   15f08:	mov	r0, r4
   15f0c:	mov	r1, r9
   15f10:	mov	r2, r6
   15f14:	mov	r3, #6
   15f18:	bl	1d380 <__assert_fail@plt+0xbc58>
   15f1c:	str	r0, [r9, #48]	; 0x30
   15f20:	ldr	r1, [r9, #40]	; 0x28
   15f24:	cmp	r1, #0
   15f28:	cmpne	r0, #0
   15f2c:	bne	15f38 <__assert_fail@plt+0x4810>
   15f30:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15f34:	b	15f50 <__assert_fail@plt+0x4828>
   15f38:	ldr	r0, [r9, #44]	; 0x2c
   15f3c:	cmp	r0, #0
   15f40:	beq	15f30 <__assert_fail@plt+0x4808>
   15f44:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15f48:	bl	132d4 <__assert_fail@plt+0x1bac>
   15f4c:	mov	r0, #0
   15f50:	str	r0, [fp, #-52]	; 0xffffffcc
   15f54:	mov	r0, sl
   15f58:	bl	18884 <__assert_fail@plt+0x715c>
   15f5c:	add	r0, sp, #32
   15f60:	bl	188d4 <__assert_fail@plt+0x71ac>
   15f64:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15f68:	mov	r4, #0
   15f6c:	cmp	r0, #0
   15f70:	bne	1595c <__assert_fail@plt+0x4234>
   15f74:	mov	r0, r4
   15f78:	sub	sp, fp, #28
   15f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f80:	orr	r0, r6, r8
   15f84:	tst	r0, #1
   15f88:	beq	15d64 <__assert_fail@plt+0x463c>
   15f8c:	mov	r2, #0
   15f90:	mov	r7, #7
   15f94:	b	15f9c <__assert_fail@plt+0x4874>
   15f98:	ldr	r3, [r9]
   15f9c:	add	r3, r3, r2, lsl #3
   15fa0:	ldr	r6, [r3, #4]
   15fa4:	uxtb	r1, r6
   15fa8:	cmp	r1, #5
   15fac:	beq	15fcc <__assert_fail@plt+0x48a4>
   15fb0:	cmp	r1, #1
   15fb4:	bne	15fd4 <__assert_fail@plt+0x48ac>
   15fb8:	ldrsb	r0, [r3]
   15fbc:	cmn	r0, #1
   15fc0:	bicle	r0, r6, #2097152	; 0x200000
   15fc4:	strle	r0, [r3, #4]
   15fc8:	b	15fd4 <__assert_fail@plt+0x48ac>
   15fcc:	bfi	r6, r7, #0, #8
   15fd0:	str	r6, [r3, #4]
   15fd4:	ldr	r0, [r9, #8]
   15fd8:	add	r2, r2, #1
   15fdc:	cmp	r2, r0
   15fe0:	bcc	15f98 <__assert_fail@plt+0x4870>
   15fe4:	ldrb	r2, [r9, #88]	; 0x58
   15fe8:	b	15d64 <__assert_fail@plt+0x463c>
   15fec:	mov	r0, r9
   15ff0:	mov	r1, #160	; 0xa0
   15ff4:	mov	r4, #160	; 0xa0
   15ff8:	bl	22ad0 <__assert_fail@plt+0x113a8>
   15ffc:	cmp	r0, #0
   16000:	beq	1602c <__assert_fail@plt+0x4904>
   16004:	mov	r9, r0
   16008:	ldr	r0, [sp, #28]
   1600c:	str	r9, [r0]
   16010:	str	r4, [r0, #4]
   16014:	b	15440 <__assert_fail@plt+0x3d18>
   16018:	mov	r0, #12
   1601c:	str	r0, [fp, #-52]	; 0xffffffcc
   16020:	mov	r0, #0
   16024:	str	r0, [r9, #52]	; 0x34
   16028:	b	1594c <__assert_fail@plt+0x4224>
   1602c:	mov	r4, #12
   16030:	b	15f74 <__assert_fail@plt+0x484c>
   16034:	ldr	sl, [sp, #28]
   16038:	b	15f50 <__assert_fail@plt+0x4828>
   1603c:	bl	11704 <abort@plt>
   16040:	movw	r2, #21232	; 0x52f0
   16044:	movt	r2, #3
   16048:	ldr	r1, [r2]
   1604c:	str	r0, [r2]
   16050:	mov	r0, r1
   16054:	bx	lr
   16058:	push	{r4, r5, r6, sl, fp, lr}
   1605c:	add	fp, sp, #16
   16060:	ldr	r5, [r0, #16]
   16064:	ldr	r6, [r0]
   16068:	mov	r4, r0
   1606c:	mov	r1, #0
   16070:	mov	r2, #256	; 0x100
   16074:	mov	r0, r5
   16078:	bl	11620 <memset@plt>
   1607c:	ldr	r1, [r6, #36]	; 0x24
   16080:	mov	r0, r4
   16084:	mov	r2, r5
   16088:	bl	160f4 <__assert_fail@plt+0x49cc>
   1608c:	ldr	r0, [r6, #36]	; 0x24
   16090:	ldr	r1, [r6, #40]	; 0x28
   16094:	cmp	r0, r1
   16098:	beq	160ac <__assert_fail@plt+0x4984>
   1609c:	mov	r0, r4
   160a0:	mov	r2, r5
   160a4:	bl	160f4 <__assert_fail@plt+0x49cc>
   160a8:	ldr	r0, [r6, #36]	; 0x24
   160ac:	ldr	r1, [r6, #44]	; 0x2c
   160b0:	cmp	r0, r1
   160b4:	beq	160c8 <__assert_fail@plt+0x49a0>
   160b8:	mov	r0, r4
   160bc:	mov	r2, r5
   160c0:	bl	160f4 <__assert_fail@plt+0x49cc>
   160c4:	ldr	r0, [r6, #36]	; 0x24
   160c8:	ldr	r1, [r6, #48]	; 0x30
   160cc:	cmp	r0, r1
   160d0:	beq	160e0 <__assert_fail@plt+0x49b8>
   160d4:	mov	r0, r4
   160d8:	mov	r2, r5
   160dc:	bl	160f4 <__assert_fail@plt+0x49cc>
   160e0:	ldrb	r0, [r4, #28]
   160e4:	orr	r0, r0, #8
   160e8:	strb	r0, [r4, #28]
   160ec:	mov	r0, #0
   160f0:	pop	{r4, r5, r6, sl, fp, pc}
   160f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160f8:	add	fp, sp, #28
   160fc:	sub	sp, sp, #308	; 0x134
   16100:	ldr	r8, [r0]
   16104:	str	r0, [sp, #16]
   16108:	mov	sl, #0
   1610c:	str	r2, [sp, #28]
   16110:	ldr	r0, [r8, #92]	; 0x5c
   16114:	cmp	r0, #1
   16118:	ldreq	r0, [sp, #16]
   1611c:	ldrbeq	r0, [r0, #14]
   16120:	ubfxeq	sl, r0, #6, #1
   16124:	ldr	r0, [r1, #8]
   16128:	cmp	r0, #1
   1612c:	blt	164a0 <__assert_fail@plt+0x4d78>
   16130:	add	r0, sp, #32
   16134:	mov	r4, #1
   16138:	mov	r2, #0
   1613c:	str	r1, [sp, #8]
   16140:	str	r8, [sp, #20]
   16144:	add	r0, r0, #1
   16148:	str	r0, [sp, #4]
   1614c:	movw	r0, #1
   16150:	movt	r0, #32
   16154:	add	r0, r0, #254	; 0xfe
   16158:	str	r0, [sp]
   1615c:	ldr	r0, [r1, #12]
   16160:	str	r2, [sp, #12]
   16164:	ldr	r9, [r0, r2, lsl #2]
   16168:	ldr	r0, [r8]
   1616c:	add	r1, r0, r9, lsl #3
   16170:	ldrb	r5, [r1, #4]
   16174:	sub	r1, r5, #1
   16178:	cmp	r1, #6
   1617c:	bhi	16460 <__assert_fail@plt+0x4d38>
   16180:	add	r2, pc, #0
   16184:	ldr	pc, [r2, r1, lsl #2]
   16188:	andeq	r6, r1, r4, lsr #3
   1618c:	andeq	r6, r1, ip, ror r4
   16190:			; <UNDEFINED> instruction: 0x000162b0
   16194:	andeq	r6, r1, r0, ror #8
   16198:	andeq	r6, r1, ip, ror r4
   1619c:	andeq	r6, r1, r8, lsr #6
   161a0:	andeq	r6, r1, ip, ror r4
   161a4:	ldrb	r0, [r0, r9, lsl #3]
   161a8:	ldr	r1, [sp, #28]
   161ac:	cmp	sl, #0
   161b0:	strb	r4, [r1, r0]
   161b4:	beq	161c4 <__assert_fail@plt+0x4a9c>
   161b8:	bl	1147c <tolower@plt>
   161bc:	ldr	r1, [sp, #28]
   161c0:	strb	r4, [r1, r0]
   161c4:	ldr	r0, [sp, #16]
   161c8:	ldrb	r0, [r0, #14]
   161cc:	tst	r0, #64	; 0x40
   161d0:	beq	16460 <__assert_fail@plt+0x4d38>
   161d4:	ldr	r0, [r8, #92]	; 0x5c
   161d8:	cmp	r0, #2
   161dc:	blt	16460 <__assert_fail@plt+0x4d38>
   161e0:	ldr	r0, [r8]
   161e4:	add	r1, r9, #1
   161e8:	add	r5, sp, #32
   161ec:	mov	r3, r9
   161f0:	movw	r6, #1
   161f4:	mov	r7, #0
   161f8:	movt	r6, #32
   161fc:	ldrb	r0, [r0, r9, lsl #3]
   16200:	mov	r9, r5
   16204:	ldr	r5, [sp]
   16208:	strb	r0, [sp, #32]
   1620c:	ldr	r0, [r8, #8]
   16210:	cmp	r1, r0
   16214:	ldr	r0, [sp, #4]
   16218:	bcs	16258 <__assert_fail@plt+0x4b30>
   1621c:	ldr	r0, [sp, #4]
   16220:	ldr	r1, [r8]
   16224:	add	r1, r1, r3, lsl #3
   16228:	ldr	r2, [r1, #12]
   1622c:	and	r2, r2, r5
   16230:	cmp	r2, r6
   16234:	bne	16258 <__assert_fail@plt+0x4b30>
   16238:	ldrb	r1, [r1, #8]
   1623c:	strb	r1, [r0], #1
   16240:	add	r1, r3, #1
   16244:	add	r3, r3, #2
   16248:	ldr	r2, [r8, #8]
   1624c:	cmp	r3, r2
   16250:	mov	r3, r1
   16254:	bcc	16220 <__assert_fail@plt+0x4af8>
   16258:	sub	r6, r0, r9
   1625c:	sub	r5, fp, #48	; 0x30
   16260:	sub	r0, fp, #36	; 0x24
   16264:	mov	r1, r9
   16268:	str	r7, [fp, #-44]	; 0xffffffd4
   1626c:	str	r7, [fp, #-48]	; 0xffffffd0
   16270:	mov	r2, r6
   16274:	mov	r3, r5
   16278:	bl	22ee0 <__assert_fail@plt+0x117b8>
   1627c:	cmp	r0, r6
   16280:	bne	16460 <__assert_fail@plt+0x4d38>
   16284:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16288:	bl	11494 <towlower@plt>
   1628c:	mov	r1, r0
   16290:	mov	r0, r9
   16294:	mov	r2, r5
   16298:	bl	113d4 <wcrtomb@plt>
   1629c:	cmn	r0, #1
   162a0:	ldrbne	r0, [sp, #32]
   162a4:	ldrne	r1, [sp, #28]
   162a8:	strbne	r4, [r1, r0]
   162ac:	b	16460 <__assert_fail@plt+0x4d38>
   162b0:	ldr	r5, [sp, #28]
   162b4:	mov	r7, #0
   162b8:	mov	r6, #0
   162bc:	str	r9, [sp, #24]
   162c0:	b	162d0 <__assert_fail@plt+0x4ba8>
   162c4:	ldr	r0, [r8]
   162c8:	add	r5, r5, #32
   162cc:	add	r7, r7, #32
   162d0:	ldr	r0, [r0, r9, lsl #3]
   162d4:	mov	r8, #0
   162d8:	ldr	r9, [r0, r6, lsl #2]
   162dc:	b	162f4 <__assert_fail@plt+0x4bcc>
   162e0:	add	r0, r7, r8
   162e4:	bl	1147c <tolower@plt>
   162e8:	ldr	r1, [sp, #28]
   162ec:	strb	r4, [r1, r0]
   162f0:	b	16304 <__assert_fail@plt+0x4bdc>
   162f4:	tst	r9, r4, lsl r8
   162f8:	strbne	r4, [r5, r8]
   162fc:	cmpne	sl, #0
   16300:	bne	162e0 <__assert_fail@plt+0x4bb8>
   16304:	add	r8, r8, #1
   16308:	cmp	r8, #32
   1630c:	bne	162f4 <__assert_fail@plt+0x4bcc>
   16310:	ldr	r8, [sp, #20]
   16314:	ldr	r9, [sp, #24]
   16318:	add	r6, r6, #1
   1631c:	cmp	r6, #8
   16320:	bne	162c4 <__assert_fail@plt+0x4b9c>
   16324:	b	16460 <__assert_fail@plt+0x4d38>
   16328:	ldr	r6, [r0, r9, lsl #3]
   1632c:	ldr	r0, [r8, #92]	; 0x5c
   16330:	cmp	r0, #2
   16334:	blt	163a8 <__assert_fail@plt+0x4c80>
   16338:	ldr	r0, [r6, #36]	; 0x24
   1633c:	cmp	r0, #0
   16340:	bne	16358 <__assert_fail@plt+0x4c30>
   16344:	ldrb	r0, [r6, #16]
   16348:	tst	r0, #1
   1634c:	ldreq	r0, [r6, #32]
   16350:	cmpeq	r0, #0
   16354:	beq	163a8 <__assert_fail@plt+0x4c80>
   16358:	mov	r6, #0
   1635c:	add	r5, sp, #32
   16360:	sub	r7, fp, #48	; 0x30
   16364:	strb	r6, [fp, #-48]	; 0xffffffd0
   16368:	mov	r0, #0
   1636c:	mov	r1, r7
   16370:	mov	r2, #1
   16374:	mov	r3, r5
   16378:	str	r6, [sp, #36]	; 0x24
   1637c:	str	r6, [sp, #32]
   16380:	bl	22ee0 <__assert_fail@plt+0x117b8>
   16384:	cmn	r0, #2
   16388:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   1638c:	ldreq	r0, [sp, #28]
   16390:	strbeq	r4, [r0, r1]
   16394:	add	r0, r1, #1
   16398:	tst	r0, #255	; 0xff
   1639c:	strb	r0, [fp, #-48]	; 0xffffffd0
   163a0:	bne	16368 <__assert_fail@plt+0x4c40>
   163a4:	b	16460 <__assert_fail@plt+0x4d38>
   163a8:	ldr	r0, [r6, #20]
   163ac:	cmp	r0, #1
   163b0:	blt	16460 <__assert_fail@plt+0x4d38>
   163b4:	mov	r9, #0
   163b8:	mov	r0, #0
   163bc:	sub	r7, fp, #48	; 0x30
   163c0:	add	r5, sp, #32
   163c4:	str	r0, [fp, #-44]	; 0xffffffd4
   163c8:	str	r0, [fp, #-48]	; 0xffffffd0
   163cc:	mov	r2, r7
   163d0:	ldr	r0, [r6]
   163d4:	ldr	r1, [r0, r9, lsl #2]
   163d8:	mov	r0, r5
   163dc:	bl	113d4 <wcrtomb@plt>
   163e0:	cmn	r0, #1
   163e4:	beq	16408 <__assert_fail@plt+0x4ce0>
   163e8:	ldrb	r0, [sp, #32]
   163ec:	ldr	r1, [sp, #28]
   163f0:	cmp	sl, #0
   163f4:	strb	r4, [r1, r0]
   163f8:	beq	16408 <__assert_fail@plt+0x4ce0>
   163fc:	bl	1147c <tolower@plt>
   16400:	ldr	r1, [sp, #28]
   16404:	strb	r4, [r1, r0]
   16408:	ldr	r0, [sp, #16]
   1640c:	ldrb	r0, [r0, #14]
   16410:	tst	r0, #64	; 0x40
   16414:	beq	16450 <__assert_fail@plt+0x4d28>
   16418:	ldr	r0, [r8, #92]	; 0x5c
   1641c:	cmp	r0, #2
   16420:	blt	16450 <__assert_fail@plt+0x4d28>
   16424:	ldr	r0, [r6]
   16428:	ldr	r0, [r0, r9, lsl #2]
   1642c:	bl	11494 <towlower@plt>
   16430:	mov	r1, r0
   16434:	mov	r0, r5
   16438:	mov	r2, r7
   1643c:	bl	113d4 <wcrtomb@plt>
   16440:	cmn	r0, #1
   16444:	ldrbne	r0, [sp, #32]
   16448:	ldrne	r1, [sp, #28]
   1644c:	strbne	r4, [r1, r0]
   16450:	ldr	r0, [r6, #20]
   16454:	add	r9, r9, #1
   16458:	cmp	r9, r0
   1645c:	blt	163b8 <__assert_fail@plt+0x4c90>
   16460:	ldr	r1, [sp, #8]
   16464:	ldr	r2, [sp, #12]
   16468:	ldr	r0, [r1, #8]
   1646c:	add	r2, r2, #1
   16470:	cmp	r2, r0
   16474:	blt	1615c <__assert_fail@plt+0x4a34>
   16478:	b	164a0 <__assert_fail@plt+0x4d78>
   1647c:	ldr	r0, [sp, #28]
   16480:	mov	r1, #1
   16484:	mov	r2, #256	; 0x100
   16488:	bl	11620 <memset@plt>
   1648c:	cmp	r5, #2
   16490:	ldreq	r1, [sp, #16]
   16494:	ldrbeq	r0, [r1, #28]
   16498:	orreq	r0, r0, #1
   1649c:	strbeq	r0, [r1, #28]
   164a0:	sub	sp, fp, #28
   164a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   164ac:	add	fp, sp, #24
   164b0:	mov	r4, r0
   164b4:	mov	r0, #0
   164b8:	mov	r6, r2
   164bc:	mov	r8, r1
   164c0:	str	r0, [r4]
   164c4:	str	r0, [r4, #4]
   164c8:	str	r0, [r4, #8]
   164cc:	mov	r0, #256	; 0x100
   164d0:	bl	22aa0 <__assert_fail@plt+0x11378>
   164d4:	cmp	r0, #0
   164d8:	str	r0, [r4, #16]
   164dc:	beq	1658c <__assert_fail@plt+0x4e64>
   164e0:	movw	r0, #45820	; 0xb2fc
   164e4:	tst	r6, #1
   164e8:	and	r1, r6, #2
   164ec:	movt	r0, #3
   164f0:	movweq	r0, #710	; 0x2c6
   164f4:	movteq	r0, #257	; 0x101
   164f8:	tst	r6, #4
   164fc:	orr	r5, r0, r1, lsl #21
   16500:	bne	16514 <__assert_fail@plt+0x4dec>
   16504:	ldrb	r0, [r4, #28]
   16508:	and	r0, r0, #127	; 0x7f
   1650c:	strb	r0, [r4, #28]
   16510:	b	16534 <__assert_fail@plt+0x4e0c>
   16514:	ldrb	r0, [r4, #28]
   16518:	mvn	r1, #127	; 0x7f
   1651c:	orr	r0, r0, r1
   16520:	movw	r1, #45758	; 0xb2be
   16524:	movt	r1, #323	; 0x143
   16528:	strb	r0, [r4, #28]
   1652c:	and	r1, r5, r1
   16530:	orr	r5, r1, #256	; 0x100
   16534:	and	r1, r6, #8
   16538:	and	r0, r0, #239	; 0xef
   1653c:	mov	r7, #0
   16540:	orr	r0, r0, r1, lsl #1
   16544:	str	r7, [r4, #20]
   16548:	strb	r0, [r4, #28]
   1654c:	mov	r0, r8
   16550:	bl	115cc <strlen@plt>
   16554:	mov	r2, r0
   16558:	mov	r0, r4
   1655c:	mov	r1, r8
   16560:	mov	r3, r5
   16564:	bl	153f4 <__assert_fail@plt+0x3ccc>
   16568:	mov	r5, r0
   1656c:	cmp	r0, #16
   16570:	movweq	r5, #8
   16574:	cmp	r5, #0
   16578:	bne	16594 <__assert_fail@plt+0x4e6c>
   1657c:	mov	r0, r4
   16580:	bl	16058 <__assert_fail@plt+0x4930>
   16584:	mov	r0, r7
   16588:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1658c:	mov	r7, #12
   16590:	b	16584 <__assert_fail@plt+0x4e5c>
   16594:	ldr	r0, [r4, #16]
   16598:	bl	132d4 <__assert_fail@plt+0x1bac>
   1659c:	str	r7, [r4, #16]
   165a0:	mov	r7, r5
   165a4:	b	16584 <__assert_fail@plt+0x4e5c>
   165a8:	push	{r4, r5, r6, r7, fp, lr}
   165ac:	add	fp, sp, #16
   165b0:	cmp	r0, #17
   165b4:	bcs	16628 <__assert_fail@plt+0x4f00>
   165b8:	movw	r1, #16192	; 0x3f40
   165bc:	mov	r4, r2
   165c0:	mov	r2, #5
   165c4:	mov	r5, r3
   165c8:	movt	r1, #2
   165cc:	ldr	r0, [r1, r0, lsl #2]
   165d0:	movw	r1, #15808	; 0x3dc0
   165d4:	movt	r1, #2
   165d8:	add	r1, r1, r0
   165dc:	mov	r0, #0
   165e0:	bl	114b8 <dcgettext@plt>
   165e4:	mov	r6, r0
   165e8:	bl	115cc <strlen@plt>
   165ec:	add	r7, r0, #1
   165f0:	cmp	r5, #0
   165f4:	beq	16610 <__assert_fail@plt+0x4ee8>
   165f8:	cmp	r7, r5
   165fc:	mov	r2, r7
   16600:	bhi	16618 <__assert_fail@plt+0x4ef0>
   16604:	mov	r0, r4
   16608:	mov	r1, r6
   1660c:	bl	11464 <memcpy@plt>
   16610:	mov	r0, r7
   16614:	pop	{r4, r5, r6, r7, fp, pc}
   16618:	sub	r2, r5, #1
   1661c:	mov	r0, #0
   16620:	strb	r0, [r4, r2]
   16624:	b	16604 <__assert_fail@plt+0x4edc>
   16628:	bl	11704 <abort@plt>
   1662c:	push	{r4, r5, fp, lr}
   16630:	add	fp, sp, #8
   16634:	ldr	r5, [r0]
   16638:	mov	r4, r0
   1663c:	cmp	r5, #0
   16640:	beq	1666c <__assert_fail@plt+0x4f44>
   16644:	movw	r0, #0
   16648:	movw	r1, #0
   1664c:	movt	r0, #0
   16650:	movt	r1, #0
   16654:	orrs	r0, r1, r0
   16658:	beq	16664 <__assert_fail@plt+0x4f3c>
   1665c:	add	r0, r5, #136	; 0x88
   16660:	bl	11410 <pthread_mutex_destroy@plt>
   16664:	mov	r0, r5
   16668:	bl	16694 <__assert_fail@plt+0x4f6c>
   1666c:	mov	r5, #0
   16670:	str	r5, [r4]
   16674:	str	r5, [r4, #4]
   16678:	ldr	r0, [r4, #16]
   1667c:	bl	132d4 <__assert_fail@plt+0x1bac>
   16680:	str	r5, [r4, #16]
   16684:	ldr	r0, [r4, #20]
   16688:	bl	132d4 <__assert_fail@plt+0x1bac>
   1668c:	str	r5, [r4, #20]
   16690:	pop	{r4, r5, fp, pc}
   16694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16698:	add	fp, sp, #28
   1669c:	sub	sp, sp, #4
   166a0:	mov	sl, r0
   166a4:	ldr	r0, [r0]
   166a8:	cmp	r0, #0
   166ac:	ldrne	r1, [sl, #8]
   166b0:	cmpne	r1, #0
   166b4:	bne	16800 <__assert_fail@plt+0x50d8>
   166b8:	ldr	r0, [sl, #12]
   166bc:	bl	132d4 <__assert_fail@plt+0x1bac>
   166c0:	ldr	r0, [sl, #8]
   166c4:	cmp	r0, #0
   166c8:	beq	16734 <__assert_fail@plt+0x500c>
   166cc:	add	r7, sl, #20
   166d0:	add	r8, sl, #28
   166d4:	add	r9, sl, #24
   166d8:	mov	r5, #0
   166dc:	mov	r6, #8
   166e0:	ldr	r0, [r9]
   166e4:	cmp	r0, #0
   166e8:	beq	166f4 <__assert_fail@plt+0x4fcc>
   166ec:	ldr	r0, [r0, r6]
   166f0:	bl	132d4 <__assert_fail@plt+0x1bac>
   166f4:	ldr	r0, [r8]
   166f8:	cmp	r0, #0
   166fc:	beq	16708 <__assert_fail@plt+0x4fe0>
   16700:	ldr	r0, [r0, r6]
   16704:	bl	132d4 <__assert_fail@plt+0x1bac>
   16708:	ldr	r0, [r7]
   1670c:	cmp	r0, #0
   16710:	beq	1671c <__assert_fail@plt+0x4ff4>
   16714:	ldr	r0, [r0, r6]
   16718:	bl	132d4 <__assert_fail@plt+0x1bac>
   1671c:	ldr	r0, [sl, #8]
   16720:	add	r5, r5, #1
   16724:	add	r6, r6, #12
   16728:	cmp	r5, r0
   1672c:	bcc	166e0 <__assert_fail@plt+0x4fb8>
   16730:	b	16740 <__assert_fail@plt+0x5018>
   16734:	add	r8, sl, #28
   16738:	add	r9, sl, #24
   1673c:	add	r7, sl, #20
   16740:	ldr	r0, [r7]
   16744:	bl	132d4 <__assert_fail@plt+0x1bac>
   16748:	ldr	r0, [r9]
   1674c:	bl	132d4 <__assert_fail@plt+0x1bac>
   16750:	ldr	r0, [r8]
   16754:	bl	132d4 <__assert_fail@plt+0x1bac>
   16758:	ldr	r0, [sl]
   1675c:	bl	132d4 <__assert_fail@plt+0x1bac>
   16760:	ldr	r5, [sl, #32]
   16764:	cmp	r5, #0
   16768:	beq	167c8 <__assert_fail@plt+0x50a0>
   1676c:	mov	r6, #0
   16770:	b	1677c <__assert_fail@plt+0x5054>
   16774:	ldr	r5, [sl, #32]
   16778:	add	r6, r6, #1
   1677c:	add	r0, r6, r6, lsl #1
   16780:	ldr	r0, [r5, r0, lsl #2]!
   16784:	add	r7, r5, #8
   16788:	cmp	r0, #1
   1678c:	blt	167b0 <__assert_fail@plt+0x5088>
   16790:	mov	r4, #0
   16794:	ldr	r0, [r7]
   16798:	ldr	r0, [r0, r4, lsl #2]
   1679c:	bl	187ec <__assert_fail@plt+0x70c4>
   167a0:	ldr	r0, [r5]
   167a4:	add	r4, r4, #1
   167a8:	cmp	r4, r0
   167ac:	blt	16794 <__assert_fail@plt+0x506c>
   167b0:	ldr	r0, [r7]
   167b4:	bl	132d4 <__assert_fail@plt+0x1bac>
   167b8:	ldr	r0, [sl, #68]	; 0x44
   167bc:	cmp	r6, r0
   167c0:	bcc	16774 <__assert_fail@plt+0x504c>
   167c4:	ldr	r5, [sl, #32]
   167c8:	mov	r0, r5
   167cc:	bl	132d4 <__assert_fail@plt+0x1bac>
   167d0:	ldr	r0, [sl, #60]	; 0x3c
   167d4:	movw	r1, #16260	; 0x3f84
   167d8:	movt	r1, #2
   167dc:	cmp	r0, r1
   167e0:	beq	167e8 <__assert_fail@plt+0x50c0>
   167e4:	bl	132d4 <__assert_fail@plt+0x1bac>
   167e8:	ldr	r0, [sl, #132]	; 0x84
   167ec:	bl	132d4 <__assert_fail@plt+0x1bac>
   167f0:	mov	r0, sl
   167f4:	sub	sp, fp, #28
   167f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167fc:	b	132d4 <__assert_fail@plt+0x1bac>
   16800:	bl	187bc <__assert_fail@plt+0x7094>
   16804:	ldr	r0, [sl, #8]
   16808:	cmp	r0, #2
   1680c:	bcc	166b8 <__assert_fail@plt+0x4f90>
   16810:	mov	r5, #1
   16814:	mov	r6, #8
   16818:	ldr	r0, [sl]
   1681c:	add	r0, r0, r6
   16820:	bl	187bc <__assert_fail@plt+0x7094>
   16824:	ldr	r0, [sl, #8]
   16828:	add	r5, r5, #1
   1682c:	add	r6, r6, #8
   16830:	cmp	r5, r0
   16834:	bcc	16818 <__assert_fail@plt+0x50f0>
   16838:	b	166b8 <__assert_fail@plt+0x4f90>
   1683c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16840:	add	fp, sp, #28
   16844:	sub	sp, sp, #28
   16848:	ldr	sl, [fp, #8]
   1684c:	mov	r7, #2
   16850:	cmp	sl, #7
   16854:	bhi	16928 <__assert_fail@plt+0x5200>
   16858:	mov	r5, r0
   1685c:	ldr	r0, [r0]
   16860:	mov	r6, r3
   16864:	mov	r9, r2
   16868:	mov	r4, r1
   1686c:	tst	sl, #4
   16870:	str	r0, [sp, #24]
   16874:	bne	1688c <__assert_fail@plt+0x5164>
   16878:	mov	r0, r4
   1687c:	bl	115cc <strlen@plt>
   16880:	mov	r7, r0
   16884:	mov	r8, #0
   16888:	b	16894 <__assert_fail@plt+0x516c>
   1688c:	ldr	r8, [r6]
   16890:	ldr	r7, [r6, #4]
   16894:	movw	r0, #0
   16898:	movw	r1, #0
   1689c:	movt	r0, #0
   168a0:	movt	r1, #0
   168a4:	orrs	r0, r1, r0
   168a8:	str	r0, [sp, #20]
   168ac:	beq	168bc <__assert_fail@plt+0x5194>
   168b0:	ldr	r0, [sp, #24]
   168b4:	add	r0, r0, #136	; 0x88
   168b8:	bl	1144c <pthread_mutex_lock@plt>
   168bc:	ldrb	r0, [r5, #28]
   168c0:	tst	r0, #16
   168c4:	bne	168d8 <__assert_fail@plt+0x51b0>
   168c8:	str	r7, [sp]
   168cc:	stmib	sp, {r7, r9}
   168d0:	str	r6, [sp, #12]
   168d4:	b	168ec <__assert_fail@plt+0x51c4>
   168d8:	mov	r0, #0
   168dc:	str	r7, [sp]
   168e0:	str	r7, [sp, #4]
   168e4:	str	r0, [sp, #8]
   168e8:	str	r0, [sp, #12]
   168ec:	mov	r0, r5
   168f0:	mov	r1, r4
   168f4:	mov	r2, r7
   168f8:	mov	r3, r8
   168fc:	str	sl, [sp, #16]
   16900:	bl	16934 <__assert_fail@plt+0x520c>
   16904:	mov	r7, r0
   16908:	ldr	r0, [sp, #20]
   1690c:	cmp	r0, #0
   16910:	beq	16920 <__assert_fail@plt+0x51f8>
   16914:	ldr	r0, [sp, #24]
   16918:	add	r0, r0, #136	; 0x88
   1691c:	bl	113a4 <pthread_mutex_unlock@plt>
   16920:	cmp	r7, #0
   16924:	movwne	r7, #1
   16928:	mov	r0, r7
   1692c:	sub	sp, fp, #28
   16930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16938:	add	fp, sp, #28
   1693c:	sub	sp, sp, #436	; 0x1b4
   16940:	ldr	r5, [r0]
   16944:	str	r2, [sp, #108]	; 0x6c
   16948:	str	r1, [sp, #104]	; 0x68
   1694c:	mov	r9, r0
   16950:	add	r0, sp, #112	; 0x70
   16954:	mov	r1, #0
   16958:	mov	r2, #136	; 0x88
   1695c:	mov	r7, r3
   16960:	mov	r8, #0
   16964:	bl	11620 <memset@plt>
   16968:	str	r5, [sp, #196]	; 0xc4
   1696c:	ldr	r0, [fp, #8]
   16970:	mov	sl, #0
   16974:	ldr	r1, [r9, #16]
   16978:	cmp	r1, #0
   1697c:	beq	16998 <__assert_fail@plt+0x5270>
   16980:	ldrb	r2, [r9, #28]
   16984:	and	r2, r2, #9
   16988:	cmp	r2, #8
   1698c:	movne	r1, #0
   16990:	subs	sl, r7, r0
   16994:	movne	sl, r1
   16998:	ldr	r2, [r9, #24]
   1699c:	ldr	r6, [fp, #16]
   169a0:	ldr	r1, [r9, #8]
   169a4:	mov	r4, #1
   169a8:	mvn	r3, r2
   169ac:	cmp	r2, r6
   169b0:	addcc	r8, r3, r6
   169b4:	cmp	r1, #0
   169b8:	beq	181fc <__assert_fail@plt+0x6ad4>
   169bc:	ldr	r1, [r5, #36]	; 0x24
   169c0:	cmp	r1, #0
   169c4:	ldrne	r2, [r5, #40]	; 0x28
   169c8:	cmpne	r2, #0
   169cc:	beq	181fc <__assert_fail@plt+0x6ad4>
   169d0:	ldr	r3, [r5, #44]	; 0x2c
   169d4:	cmp	r3, #0
   169d8:	ldrne	r6, [r5, #48]	; 0x30
   169dc:	cmpne	r6, #0
   169e0:	beq	181fc <__assert_fail@plt+0x6ad4>
   169e4:	ldr	r1, [r1, #8]
   169e8:	ldr	r6, [r9, #20]
   169ec:	cmp	r1, #0
   169f0:	beq	16a00 <__assert_fail@plt+0x52d8>
   169f4:	ldr	lr, [sp, #108]	; 0x6c
   169f8:	ldr	ip, [sp, #104]	; 0x68
   169fc:	b	16a14 <__assert_fail@plt+0x52ec>
   16a00:	ldr	r1, [r2, #8]
   16a04:	ldr	lr, [sp, #108]	; 0x6c
   16a08:	ldr	ip, [sp, #104]	; 0x68
   16a0c:	cmp	r1, #0
   16a10:	beq	17a24 <__assert_fail@plt+0x62fc>
   16a14:	str	r0, [sp, #96]	; 0x60
   16a18:	ldr	r0, [fp, #16]
   16a1c:	subs	r0, r0, r8
   16a20:	str	r0, [sp, #92]	; 0x5c
   16a24:	mov	r0, #1
   16a28:	str	r0, [sp, #68]	; 0x44
   16a2c:	bne	16a40 <__assert_fail@plt+0x5318>
   16a30:	ldr	r0, [r5, #76]	; 0x4c
   16a34:	cmp	r0, #0
   16a38:	movwne	r0, #1
   16a3c:	str	r0, [sp, #68]	; 0x44
   16a40:	ldr	r0, [r9, #12]
   16a44:	ldr	r2, [r5, #92]	; 0x5c
   16a48:	ldr	r1, [r5, #8]
   16a4c:	str	r6, [sp, #176]	; 0xb0
   16a50:	str	ip, [sp, #112]	; 0x70
   16a54:	vdup.32	q8, lr
   16a58:	str	r2, [sp, #192]	; 0xc0
   16a5c:	ubfx	r3, r0, #22, #1
   16a60:	and	r0, r0, #4194304	; 0x400000
   16a64:	str	r6, [sp, #100]	; 0x64
   16a68:	add	r1, r1, #1
   16a6c:	orrs	r0, r6, r0
   16a70:	strb	r3, [sp, #184]	; 0xb8
   16a74:	movwne	r0, #1
   16a78:	cmp	r2, r1
   16a7c:	strb	r0, [sp, #187]	; 0xbb
   16a80:	add	r0, sp, #112	; 0x70
   16a84:	movgt	r1, r2
   16a88:	add	r2, lr, #1
   16a8c:	ldrb	r6, [r5, #88]	; 0x58
   16a90:	add	r3, r0, #44	; 0x2c
   16a94:	cmp	r2, r1
   16a98:	vst1.32	{d16-d17}, [r3]
   16a9c:	movlt	r1, r2
   16aa0:	ubfx	r3, r6, #3, #1
   16aa4:	strb	r3, [sp, #186]	; 0xba
   16aa8:	ubfx	r3, r6, #2, #1
   16aac:	strb	r3, [sp, #185]	; 0xb9
   16ab0:	bl	18908 <__assert_fail@plt+0x71e0>
   16ab4:	cmp	r0, #0
   16ab8:	bne	18274 <__assert_fail@plt+0x6b4c>
   16abc:	add	r1, r5, #96	; 0x60
   16ac0:	ldr	r2, [fp, #24]
   16ac4:	ldr	r0, [fp, #12]
   16ac8:	str	r1, [sp, #180]	; 0xb4
   16acc:	ldrb	r1, [r5, #88]	; 0x58
   16ad0:	ubfx	r1, r1, #4, #1
   16ad4:	ldr	ip, [sp, #108]	; 0x6c
   16ad8:	strb	r1, [sp, #190]	; 0xbe
   16adc:	mov	r1, #0
   16ae0:	ldrb	r3, [sp, #187]	; 0xbb
   16ae4:	cmp	r3, #0
   16ae8:	ldr	r3, [sp, #104]	; 0x68
   16aec:	bne	16b04 <__assert_fail@plt+0x53dc>
   16af0:	str	r3, [sp, #116]	; 0x74
   16af4:	ldr	r1, [r5, #92]	; 0x5c
   16af8:	cmp	r1, #1
   16afc:	mov	r1, ip
   16b00:	movwgt	r1, #0
   16b04:	str	r1, [sp, #144]	; 0x90
   16b08:	str	r1, [sp, #140]	; 0x8c
   16b0c:	str	r0, [sp, #168]	; 0xa8
   16b10:	str	r0, [sp, #164]	; 0xa4
   16b14:	mov	r1, r5
   16b18:	str	r9, [sp, #44]	; 0x2c
   16b1c:	ldrb	r0, [r9, #28]
   16b20:	str	r1, [sp, #84]	; 0x54
   16b24:	lsr	r0, r0, #7
   16b28:	strb	r0, [sp, #189]	; 0xbd
   16b2c:	mov	r0, r5
   16b30:	ldr	r5, [sp, #100]	; 0x64
   16b34:	ldr	r6, [r0, #76]!	; 0x4c
   16b38:	str	r0, [sp, #64]	; 0x40
   16b3c:	mvn	r0, #0
   16b40:	lsl	r9, r6, #1
   16b44:	cmp	r6, #1
   16b48:	str	r0, [sp, #204]	; 0xcc
   16b4c:	str	r2, [sp, #200]	; 0xc8
   16b50:	blt	16bb0 <__assert_fail@plt+0x5488>
   16b54:	movw	r0, #43690	; 0xaaaa
   16b58:	mov	r4, #12
   16b5c:	movt	r0, #2730	; 0xaaa
   16b60:	cmp	r9, r0
   16b64:	bhi	181c4 <__assert_fail@plt+0x6a9c>
   16b68:	add	r0, r6, r6, lsl #1
   16b6c:	mov	r5, r8
   16b70:	lsl	r0, r0, #4
   16b74:	bl	22aa0 <__assert_fail@plt+0x11378>
   16b78:	mov	r8, r0
   16b7c:	str	r0, [sp, #228]	; 0xe4
   16b80:	lsl	r0, r6, #3
   16b84:	bl	22aa0 <__assert_fail@plt+0x11378>
   16b88:	cmp	r0, #0
   16b8c:	str	r0, [sp, #244]	; 0xf4
   16b90:	beq	181c4 <__assert_fail@plt+0x6a9c>
   16b94:	cmp	r8, #0
   16b98:	mov	r8, r5
   16b9c:	ldr	ip, [sp, #108]	; 0x6c
   16ba0:	ldr	r3, [sp, #104]	; 0x68
   16ba4:	ldr	r5, [sp, #100]	; 0x64
   16ba8:	ldr	r2, [fp, #24]
   16bac:	beq	181c4 <__assert_fail@plt+0x6a9c>
   16bb0:	mov	r0, #1
   16bb4:	str	r0, [sp, #232]	; 0xe8
   16bb8:	ldr	r0, [sp, #92]	; 0x5c
   16bbc:	str	r9, [sp, #224]	; 0xe0
   16bc0:	str	r9, [sp, #240]	; 0xf0
   16bc4:	cmp	r0, #1
   16bc8:	bhi	16bdc <__assert_fail@plt+0x54b4>
   16bcc:	ldr	r0, [sp, #84]	; 0x54
   16bd0:	ldrb	r0, [r0, #88]	; 0x58
   16bd4:	tst	r0, #2
   16bd8:	beq	16c14 <__assert_fail@plt+0x54ec>
   16bdc:	ldr	r0, [sp, #148]	; 0x94
   16be0:	mov	r4, #12
   16be4:	cmn	r0, #-1073741822	; 0xc0000002
   16be8:	bhi	181c4 <__assert_fail@plt+0x6a9c>
   16bec:	mov	r1, #4
   16bf0:	add	r0, r1, r0, lsl #2
   16bf4:	bl	22aa0 <__assert_fail@plt+0x11378>
   16bf8:	ldr	r2, [fp, #24]
   16bfc:	ldr	r5, [sp, #100]	; 0x64
   16c00:	ldr	r3, [sp, #104]	; 0x68
   16c04:	ldr	ip, [sp, #108]	; 0x6c
   16c08:	cmp	r0, #0
   16c0c:	str	r0, [sp, #212]	; 0xd4
   16c10:	beq	181c4 <__assert_fail@plt+0x6a9c>
   16c14:	ldr	r6, [sp, #96]	; 0x60
   16c18:	tst	r2, #1
   16c1c:	mov	r1, #4
   16c20:	str	r7, [fp, #-212]	; 0xffffff2c
   16c24:	str	r8, [sp, #36]	; 0x24
   16c28:	mov	r9, r7
   16c2c:	mov	r0, #4
   16c30:	movweq	r1, #6
   16c34:	str	r1, [sp, #172]	; 0xac
   16c38:	mov	r1, #1
   16c3c:	cmp	r6, r7
   16c40:	mov	r8, r6
   16c44:	mvnlt	r1, #0
   16c48:	movlt	r8, r7
   16c4c:	movlt	r9, r6
   16c50:	cmp	sl, #0
   16c54:	str	r1, [sp, #80]	; 0x50
   16c58:	ldr	r1, [sp, #84]	; 0x54
   16c5c:	ldr	r1, [r1, #92]	; 0x5c
   16c60:	str	r1, [sp, #76]	; 0x4c
   16c64:	beq	16ca8 <__assert_fail@plt+0x5580>
   16c68:	cmp	r1, #1
   16c6c:	beq	16c8c <__assert_fail@plt+0x5564>
   16c70:	ldr	r0, [sp, #44]	; 0x2c
   16c74:	ldr	r0, [r0, #12]
   16c78:	and	r0, r0, #4194304	; 0x400000
   16c7c:	orr	r0, r5, r0
   16c80:	clz	r0, r0
   16c84:	lsr	r0, r0, #5
   16c88:	lsl	r0, r0, #2
   16c8c:	cmp	r5, #0
   16c90:	mov	r1, r5
   16c94:	movwne	r1, #1
   16c98:	cmp	r6, r7
   16c9c:	orrge	r1, r1, #2
   16ca0:	orr	r0, r1, r0
   16ca4:	b	16cac <__assert_fail@plt+0x5584>
   16ca8:	mov	r0, #8
   16cac:	add	r1, sp, #112	; 0x70
   16cb0:	cmp	r6, r7
   16cb4:	sub	lr, r0, #4
   16cb8:	str	r9, [sp, #56]	; 0x38
   16cbc:	add	r1, r1, #32
   16cc0:	str	lr, [sp, #60]	; 0x3c
   16cc4:	str	r1, [sp, #32]
   16cc8:	sub	r1, fp, #212	; 0xd4
   16ccc:	movwlt	r1, #0
   16cd0:	cmp	r1, #0
   16cd4:	str	r1, [sp, #48]	; 0x30
   16cd8:	movwne	r1, #1
   16cdc:	str	r1, [sp, #52]	; 0x34
   16ce0:	sub	r1, fp, #208	; 0xd0
   16ce4:	add	r1, r1, #16
   16ce8:	str	r1, [sp, #40]	; 0x28
   16cec:	cmp	lr, #4
   16cf0:	bhi	16dcc <__assert_fail@plt+0x56a4>
   16cf4:	add	r0, pc, #0
   16cf8:	ldr	pc, [r0, lr, lsl #2]
   16cfc:	andeq	r6, r1, r0, lsl sp
   16d00:	andeq	r6, r1, r0, lsl sp
   16d04:	andeq	r6, r1, r4, lsl #27
   16d08:	andeq	r6, r1, ip, asr sp
   16d0c:	andeq	r6, r1, r4, asr lr
   16d10:	mov	r4, #1
   16d14:	cmp	r7, r9
   16d18:	blt	181c4 <__assert_fail@plt+0x6a9c>
   16d1c:	mov	r0, #0
   16d20:	cmp	r7, ip
   16d24:	ldrblt	r0, [r3, r7]
   16d28:	cmp	r5, #0
   16d2c:	ldrbne	r0, [r5, r0]
   16d30:	ldrb	r0, [sl, r0]
   16d34:	cmp	r0, #0
   16d38:	bne	16e54 <__assert_fail@plt+0x572c>
   16d3c:	sub	r0, r7, #1
   16d40:	cmp	r7, r9
   16d44:	mov	r7, r0
   16d48:	str	r0, [fp, #-212]	; 0xffffff2c
   16d4c:	bgt	16d1c <__assert_fail@plt+0x55f4>
   16d50:	b	181c4 <__assert_fail@plt+0x6a9c>
   16d54:	add	r7, r7, #1
   16d58:	str	r7, [fp, #-212]	; 0xffffff2c
   16d5c:	cmp	r7, r8
   16d60:	bge	16d9c <__assert_fail@plt+0x5674>
   16d64:	ldrb	r0, [r3, r7]
   16d68:	ldrb	r0, [r5, r0]
   16d6c:	ldrb	r0, [sl, r0]
   16d70:	cmp	r0, #0
   16d74:	beq	16d54 <__assert_fail@plt+0x562c>
   16d78:	b	16d9c <__assert_fail@plt+0x5674>
   16d7c:	add	r7, r7, #1
   16d80:	str	r7, [fp, #-212]	; 0xffffff2c
   16d84:	cmp	r7, r8
   16d88:	bge	16d9c <__assert_fail@plt+0x5674>
   16d8c:	ldrb	r0, [r3, r7]
   16d90:	ldrb	r0, [sl, r0]
   16d94:	cmp	r0, #0
   16d98:	beq	16d7c <__assert_fail@plt+0x5654>
   16d9c:	cmp	r7, r8
   16da0:	bne	16e54 <__assert_fail@plt+0x572c>
   16da4:	mov	r0, #0
   16da8:	cmp	r8, ip
   16dac:	mov	r7, r8
   16db0:	ldrblt	r0, [r3, r8]
   16db4:	cmp	r5, #0
   16db8:	ldrbne	r0, [r5, r0]
   16dbc:	ldrb	r0, [sl, r0]
   16dc0:	cmp	r0, #0
   16dc4:	bne	16e54 <__assert_fail@plt+0x572c>
   16dc8:	b	18284 <__assert_fail@plt+0x6b5c>
   16dcc:	ldr	r0, [sp, #136]	; 0x88
   16dd0:	ldr	r5, [sp, #80]	; 0x50
   16dd4:	ldr	r3, [sp, #144]	; 0x90
   16dd8:	sub	r1, r7, r0
   16ddc:	cmp	r1, r3
   16de0:	bcs	16e24 <__assert_fail@plt+0x56fc>
   16de4:	ldr	r3, [sp, #140]	; 0x8c
   16de8:	mov	r6, #0
   16dec:	cmp	r1, r3
   16df0:	ldrcc	r3, [sp, #116]	; 0x74
   16df4:	ldrbcc	r6, [r3, r1]
   16df8:	ldrb	r1, [sl, r6]
   16dfc:	cmp	r1, #0
   16e00:	bne	16e54 <__assert_fail@plt+0x572c>
   16e04:	add	r7, r7, r5
   16e08:	mov	r4, #1
   16e0c:	cmp	r7, r9
   16e10:	str	r7, [fp, #-212]	; 0xffffff2c
   16e14:	blt	181c4 <__assert_fail@plt+0x6a9c>
   16e18:	cmp	r7, r8
   16e1c:	ble	16dd4 <__assert_fail@plt+0x56ac>
   16e20:	b	181c4 <__assert_fail@plt+0x6a9c>
   16e24:	add	r0, sp, #112	; 0x70
   16e28:	mov	r1, r7
   16e2c:	mov	r6, lr
   16e30:	bl	1d7c4 <__assert_fail@plt+0xc09c>
   16e34:	cmp	r0, #0
   16e38:	bne	18218 <__assert_fail@plt+0x6af0>
   16e3c:	ldr	r0, [sp, #136]	; 0x88
   16e40:	ldr	r7, [fp, #-212]	; 0xffffff2c
   16e44:	ldr	r2, [fp, #24]
   16e48:	mov	lr, r6
   16e4c:	sub	r1, r7, r0
   16e50:	b	16de4 <__assert_fail@plt+0x56bc>
   16e54:	add	r0, sp, #112	; 0x70
   16e58:	mov	r1, r7
   16e5c:	bl	1d7c4 <__assert_fail@plt+0xc09c>
   16e60:	cmp	r0, #0
   16e64:	bne	18218 <__assert_fail@plt+0x6af0>
   16e68:	ldr	r0, [sp, #76]	; 0x4c
   16e6c:	cmp	r0, #1
   16e70:	ldrne	r0, [sp, #140]	; 0x8c
   16e74:	cmpne	r0, #0
   16e78:	bne	16eb0 <__assert_fail@plt+0x5788>
   16e7c:	mov	r0, #0
   16e80:	str	r0, [sp, #220]	; 0xdc
   16e84:	str	r0, [sp, #232]	; 0xe8
   16e88:	str	r0, [sp, #216]	; 0xd8
   16e8c:	str	r0, [fp, #-64]	; 0xffffffc0
   16e90:	ldr	r4, [sp, #196]	; 0xc4
   16e94:	ldr	r3, [sp, #152]	; 0x98
   16e98:	ldr	r7, [r4, #36]	; 0x24
   16e9c:	ldrsb	r0, [r7, #52]	; 0x34
   16ea0:	cmn	r0, #1
   16ea4:	ble	16ec4 <__assert_fail@plt+0x579c>
   16ea8:	sub	r5, fp, #208	; 0xd0
   16eac:	b	16f30 <__assert_fail@plt+0x5808>
   16eb0:	ldr	r0, [sp, #120]	; 0x78
   16eb4:	ldr	r0, [r0]
   16eb8:	cmn	r0, #1
   16ebc:	bne	16e7c <__assert_fail@plt+0x5754>
   16ec0:	b	17738 <__assert_fail@plt+0x6010>
   16ec4:	ldr	r2, [sp, #200]	; 0xc8
   16ec8:	sub	r1, r3, #1
   16ecc:	add	r0, sp, #112	; 0x70
   16ed0:	mov	r6, r3
   16ed4:	bl	1dff0 <__assert_fail@plt+0xc8c8>
   16ed8:	tst	r0, #1
   16edc:	sub	r5, fp, #208	; 0xd0
   16ee0:	bne	16f28 <__assert_fail@plt+0x5800>
   16ee4:	mov	r3, r0
   16ee8:	cmp	r0, #0
   16eec:	beq	16f2c <__assert_fail@plt+0x5804>
   16ef0:	ands	r1, r3, #2
   16ef4:	and	r0, r3, #4
   16ef8:	cmpne	r0, #0
   16efc:	bne	17778 <__assert_fail@plt+0x6050>
   16f00:	cmp	r1, #0
   16f04:	bne	17780 <__assert_fail@plt+0x6058>
   16f08:	cmp	r0, #0
   16f0c:	beq	16f2c <__assert_fail@plt+0x5804>
   16f10:	ldr	r2, [r7, #40]	; 0x28
   16f14:	sub	r0, fp, #64	; 0x40
   16f18:	mov	r1, r4
   16f1c:	bl	1d380 <__assert_fail@plt+0xbc58>
   16f20:	mov	r7, r0
   16f24:	b	16f2c <__assert_fail@plt+0x5804>
   16f28:	ldr	r7, [r4, #40]	; 0x28
   16f2c:	mov	r3, r6
   16f30:	ldr	r1, [sp, #52]	; 0x34
   16f34:	cmp	r7, #0
   16f38:	beq	18210 <__assert_fail@plt+0x6ae8>
   16f3c:	ldr	r0, [sp, #212]	; 0xd4
   16f40:	mov	ip, r1
   16f44:	cmp	r0, #0
   16f48:	beq	16f60 <__assert_fail@plt+0x5838>
   16f4c:	str	r7, [r0, r3, lsl #2]
   16f50:	mov	ip, r1
   16f54:	ldr	r0, [r4, #76]	; 0x4c
   16f58:	cmp	r0, #0
   16f5c:	bne	177d0 <__assert_fail@plt+0x60a8>
   16f60:	ldrb	r0, [r7, #52]	; 0x34
   16f64:	sxtb	r5, r0
   16f68:	tst	r0, #16
   16f6c:	bne	17788 <__assert_fail@plt+0x6060>
   16f70:	mov	r0, #0
   16f74:	mvn	r2, #0
   16f78:	str	r0, [sp, #72]	; 0x48
   16f7c:	ldr	r6, [sp, #152]	; 0x98
   16f80:	ldr	r0, [sp, #168]	; 0xa8
   16f84:	str	r2, [sp, #96]	; 0x60
   16f88:	cmp	r0, r6
   16f8c:	ble	16f98 <__assert_fail@plt+0x5870>
   16f90:	ldr	r1, [sp, #48]	; 0x30
   16f94:	b	1727c <__assert_fail@plt+0x5b54>
   16f98:	ldr	r1, [sp, #48]	; 0x30
   16f9c:	b	17434 <__assert_fail@plt+0x5d0c>
   16fa0:	ldr	r0, [sp, #212]	; 0xd4
   16fa4:	ldr	r2, [sp, #152]	; 0x98
   16fa8:	ldr	r1, [sp, #216]	; 0xd8
   16fac:	add	r2, r2, #1
   16fb0:	sub	r3, r2, #1
   16fb4:	cmp	r3, r1
   16fb8:	bge	1742c <__assert_fail@plt+0x5d04>
   16fbc:	str	r2, [sp, #152]	; 0x98
   16fc0:	ldr	r3, [r0, r2, lsl #2]
   16fc4:	add	r2, r2, #1
   16fc8:	cmp	r3, #0
   16fcc:	beq	16fb0 <__assert_fail@plt+0x5888>
   16fd0:	sub	r0, fp, #64	; 0x40
   16fd4:	add	r1, sp, #112	; 0x70
   16fd8:	mov	r2, #0
   16fdc:	bl	1e9d8 <__assert_fail@plt+0xd2b0>
   16fe0:	cmp	r0, #0
   16fe4:	mov	r7, r0
   16fe8:	ldreq	r0, [fp, #-64]	; 0xffffffc0
   16fec:	cmpeq	r0, #0
   16ff0:	beq	16fa0 <__assert_fail@plt+0x5878>
   16ff4:	cmp	r7, #0
   16ff8:	mov	r3, r5
   16ffc:	mov	ip, r6
   17000:	bne	1735c <__assert_fail@plt+0x5c34>
   17004:	b	17430 <__assert_fail@plt+0x5d08>
   17008:	ldr	r0, [r4, #8]
   1700c:	cmp	r0, #1
   17010:	blt	171f4 <__assert_fail@plt+0x5acc>
   17014:	ldr	r7, [sp, #196]	; 0xc4
   17018:	mov	r5, #0
   1701c:	str	r3, [sp, #12]
   17020:	str	ip, [sp, #24]
   17024:	str	r4, [sp, #8]
   17028:	str	r7, [sp, #16]
   1702c:	ldr	r0, [r4, #12]
   17030:	ldr	r1, [r0, r5, lsl #2]
   17034:	ldr	r0, [r7]
   17038:	add	r0, r0, r1, lsl #3
   1703c:	ldr	r6, [r0, #4]
   17040:	tst	r6, #1048576	; 0x100000
   17044:	beq	171e4 <__assert_fail@plt+0x5abc>
   17048:	ldr	lr, [sp, #152]	; 0x98
   1704c:	movw	r0, #65280	; 0xff00
   17050:	str	r1, [sp, #28]
   17054:	movt	r0, #3
   17058:	tst	r6, r0
   1705c:	beq	170cc <__assert_fail@plt+0x59a4>
   17060:	ldr	r2, [sp, #200]	; 0xc8
   17064:	add	r0, sp, #112	; 0x70
   17068:	mov	r1, lr
   1706c:	mov	r7, r3
   17070:	str	lr, [sp, #20]
   17074:	bl	1dff0 <__assert_fail@plt+0xc8c8>
   17078:	mov	r3, r7
   1707c:	ldr	lr, [sp, #20]
   17080:	ldr	r1, [sp, #28]
   17084:	ldr	ip, [sp, #24]
   17088:	ldr	r7, [sp, #16]
   1708c:	and	r2, r0, #1
   17090:	tst	r6, #1024	; 0x400
   17094:	beq	170a0 <__assert_fail@plt+0x5978>
   17098:	cmp	r2, #0
   1709c:	beq	171e4 <__assert_fail@plt+0x5abc>
   170a0:	tst	r6, #2048	; 0x800
   170a4:	cmpne	r2, #0
   170a8:	bne	171e4 <__assert_fail@plt+0x5abc>
   170ac:	tst	r6, #8192	; 0x2000
   170b0:	beq	170bc <__assert_fail@plt+0x5994>
   170b4:	ands	r2, r0, #2
   170b8:	beq	171e4 <__assert_fail@plt+0x5abc>
   170bc:	tst	r6, #32768	; 0x8000
   170c0:	beq	170cc <__assert_fail@plt+0x59a4>
   170c4:	ands	r0, r0, #8
   170c8:	beq	171e4 <__assert_fail@plt+0x5abc>
   170cc:	mov	r0, r7
   170d0:	add	r2, sp, #112	; 0x70
   170d4:	mov	r3, lr
   170d8:	bl	1fc78 <__assert_fail@plt+0xe550>
   170dc:	ldr	r4, [sp, #8]
   170e0:	ldr	ip, [sp, #24]
   170e4:	ldr	r3, [sp, #12]
   170e8:	cmp	r0, #0
   170ec:	beq	171e4 <__assert_fail@plt+0x5abc>
   170f0:	ldr	r1, [sp, #152]	; 0x98
   170f4:	ldr	r2, [sp, #232]	; 0xe8
   170f8:	cmp	r2, r0
   170fc:	add	r6, r1, r0
   17100:	movlt	r2, r0
   17104:	add	r0, sp, #112	; 0x70
   17108:	mov	r1, r6
   1710c:	str	r2, [sp, #232]	; 0xe8
   17110:	bl	1edb8 <__assert_fail@plt+0xd690>
   17114:	cmp	r0, #0
   17118:	str	r0, [fp, #-48]	; 0xffffffd0
   1711c:	bne	1725c <__assert_fail@plt+0x5b34>
   17120:	ldr	r0, [sp, #212]	; 0xd4
   17124:	ldr	r2, [sp, #28]
   17128:	ldr	r1, [r7, #24]
   1712c:	ldr	r4, [r0, r6, lsl #2]
   17130:	ldr	r0, [r7, #12]
   17134:	ldr	r0, [r0, r2, lsl #2]
   17138:	cmp	r4, #0
   1713c:	add	r0, r0, r0, lsl #1
   17140:	add	r2, r1, r0, lsl #2
   17144:	beq	17168 <__assert_fail@plt+0x5a40>
   17148:	ldr	r1, [r4, #40]	; 0x28
   1714c:	sub	r7, fp, #208	; 0xd0
   17150:	mov	r0, r7
   17154:	bl	1eb2c <__assert_fail@plt+0xd404>
   17158:	cmp	r0, #0
   1715c:	str	r0, [fp, #-48]	; 0xffffffd0
   17160:	beq	1717c <__assert_fail@plt+0x5a54>
   17164:	b	1725c <__assert_fail@plt+0x5b34>
   17168:	vldr	d16, [r2]
   1716c:	ldr	r0, [r2, #8]
   17170:	sub	r7, fp, #208	; 0xd0
   17174:	str	r0, [fp, #-200]	; 0xffffff38
   17178:	vstr	d16, [fp, #-208]	; 0xffffff30
   1717c:	ldr	r2, [sp, #200]	; 0xc8
   17180:	sub	r1, r6, #1
   17184:	add	r0, sp, #112	; 0x70
   17188:	bl	1dff0 <__assert_fail@plt+0xc8c8>
   1718c:	ldr	r1, [sp, #16]
   17190:	mov	r3, r0
   17194:	sub	r0, fp, #48	; 0x30
   17198:	mov	r2, r7
   1719c:	bl	1d380 <__assert_fail@plt+0xbc58>
   171a0:	ldr	r1, [sp, #212]	; 0xd4
   171a4:	cmp	r4, #0
   171a8:	str	r0, [r1, r6, lsl #2]
   171ac:	beq	171b8 <__assert_fail@plt+0x5a90>
   171b0:	ldr	r0, [fp, #-200]	; 0xffffff38
   171b4:	bl	132d4 <__assert_fail@plt+0x1bac>
   171b8:	ldr	r0, [sp, #212]	; 0xd4
   171bc:	ldr	r3, [sp, #12]
   171c0:	ldr	ip, [sp, #24]
   171c4:	ldr	r4, [sp, #8]
   171c8:	ldr	r7, [sp, #16]
   171cc:	ldr	r0, [r0, r6, lsl #2]
   171d0:	cmp	r0, #0
   171d4:	bne	171e4 <__assert_fail@plt+0x5abc>
   171d8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   171dc:	cmp	r0, #0
   171e0:	bne	17270 <__assert_fail@plt+0x5b48>
   171e4:	ldr	r0, [r4, #8]
   171e8:	add	r5, r5, #1
   171ec:	cmp	r5, r0
   171f0:	blt	1702c <__assert_fail@plt+0x5904>
   171f4:	mov	r0, #0
   171f8:	str	r0, [fp, #-64]	; 0xffffffc0
   171fc:	b	172bc <__assert_fail@plt+0x5b94>
   17200:	add	r1, r6, #2
   17204:	add	r0, sp, #112	; 0x70
   17208:	mov	r5, r3
   1720c:	mov	r6, ip
   17210:	bl	1e900 <__assert_fail@plt+0xd1d8>
   17214:	cmp	r0, #0
   17218:	str	r0, [fp, #-64]	; 0xffffffc0
   1721c:	bne	18210 <__assert_fail@plt+0x6ae8>
   17220:	mov	r3, r5
   17224:	ldrb	r5, [r4, #52]	; 0x34
   17228:	mov	ip, r6
   1722c:	b	172b4 <__assert_fail@plt+0x5b8c>
   17230:	ldr	r0, [sp, #152]	; 0x98
   17234:	ldr	r2, [sp, #200]	; 0xc8
   17238:	sub	r1, r0, #1
   1723c:	add	r0, sp, #112	; 0x70
   17240:	bl	1dff0 <__assert_fail@plt+0xc8c8>
   17244:	bfi	r5, r0, #8, #1
   17248:	ldr	r3, [sp, #12]
   1724c:	ldr	ip, [sp, #24]
   17250:	ldr	r4, [sp, #8]
   17254:	ldr	r7, [r6, r5, lsl #2]
   17258:	b	17324 <__assert_fail@plt+0x5bfc>
   1725c:	ldr	r2, [sp, #72]	; 0x48
   17260:	ldr	r3, [sp, #12]
   17264:	ldr	ip, [sp, #24]
   17268:	ldr	r4, [sp, #8]
   1726c:	str	r2, [sp, #72]	; 0x48
   17270:	mov	r7, #0
   17274:	str	r0, [fp, #-64]	; 0xffffffc0
   17278:	b	17324 <__assert_fail@plt+0x5bfc>
   1727c:	str	r1, [sp, #88]	; 0x58
   17280:	ldr	r1, [sp, #148]	; 0x94
   17284:	ldr	r0, [sp, #160]	; 0xa0
   17288:	add	r9, r6, #1
   1728c:	mov	r4, r7
   17290:	cmp	r9, r1
   17294:	blt	172a0 <__assert_fail@plt+0x5b78>
   17298:	cmp	r1, r0
   1729c:	blt	17200 <__assert_fail@plt+0x5ad8>
   172a0:	ldr	r1, [sp, #140]	; 0x8c
   172a4:	cmp	r9, r1
   172a8:	blt	172b4 <__assert_fail@plt+0x5b8c>
   172ac:	cmp	r1, r0
   172b0:	blt	17200 <__assert_fail@plt+0x5ad8>
   172b4:	tst	r5, #32
   172b8:	bne	17008 <__assert_fail@plt+0x58e0>
   172bc:	ldr	r1, [sp, #152]	; 0x98
   172c0:	ldr	r0, [sp, #116]	; 0x74
   172c4:	add	r2, r1, #1
   172c8:	str	r2, [sp, #152]	; 0x98
   172cc:	ldrb	r5, [r0, r1]
   172d0:	ldr	r0, [r4, #44]	; 0x2c
   172d4:	cmp	r0, #0
   172d8:	bne	17320 <__assert_fail@plt+0x5bf8>
   172dc:	ldr	r6, [r4, #48]	; 0x30
   172e0:	str	ip, [sp, #24]
   172e4:	str	r3, [sp, #12]
   172e8:	str	r4, [sp, #8]
   172ec:	cmp	r6, #0
   172f0:	bne	17230 <__assert_fail@plt+0x5b08>
   172f4:	ldr	r6, [sp, #8]
   172f8:	ldr	r0, [sp, #196]	; 0xc4
   172fc:	mov	r1, r6
   17300:	bl	2009c <__assert_fail@plt+0xe974>
   17304:	ldr	r3, [sp, #12]
   17308:	ldr	ip, [sp, #24]
   1730c:	mov	r4, r6
   17310:	cmp	r0, #0
   17314:	bne	172d0 <__assert_fail@plt+0x5ba8>
   17318:	mov	r0, #12
   1731c:	b	17270 <__assert_fail@plt+0x5b48>
   17320:	ldr	r7, [r0, r5, lsl #2]
   17324:	ldr	r0, [sp, #212]	; 0xd4
   17328:	cmp	r0, #0
   1732c:	beq	17354 <__assert_fail@plt+0x5c2c>
   17330:	sub	r0, fp, #64	; 0x40
   17334:	add	r1, sp, #112	; 0x70
   17338:	mov	r2, r7
   1733c:	mov	r5, r3
   17340:	mov	r6, ip
   17344:	bl	1e9d8 <__assert_fail@plt+0xd2b0>
   17348:	mov	ip, r6
   1734c:	mov	r3, r5
   17350:	mov	r7, r0
   17354:	cmp	r7, #0
   17358:	beq	1738c <__assert_fail@plt+0x5c64>
   1735c:	sub	r0, r4, r7
   17360:	clz	r0, r0
   17364:	lsr	r0, r0, #5
   17368:	ands	ip, ip, r0
   1736c:	ldrb	r0, [r7, #52]	; 0x34
   17370:	movne	r3, r9
   17374:	sxtb	r5, r0
   17378:	tst	r0, #16
   1737c:	bne	173cc <__assert_fail@plt+0x5ca4>
   17380:	ldr	r6, [sp, #152]	; 0x98
   17384:	ldr	r1, [sp, #88]	; 0x58
   17388:	b	1741c <__assert_fail@plt+0x5cf4>
   1738c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17390:	cmp	r0, #0
   17394:	bne	18210 <__assert_fail@plt+0x6ae8>
   17398:	ldr	r0, [sp, #72]	; 0x48
   1739c:	ldr	r1, [sp, #68]	; 0x44
   173a0:	clz	r0, r0
   173a4:	lsr	r0, r0, #5
   173a8:	orr	r0, r1, r0
   173ac:	cmp	r0, #1
   173b0:	bne	17430 <__assert_fail@plt+0x5d08>
   173b4:	ldr	r0, [sp, #212]	; 0xd4
   173b8:	cmp	r0, #0
   173bc:	beq	17430 <__assert_fail@plt+0x5d08>
   173c0:	mov	r6, ip
   173c4:	mov	r5, r3
   173c8:	b	16fa4 <__assert_fail@plt+0x587c>
   173cc:	ldr	r6, [sp, #152]	; 0x98
   173d0:	cmn	r5, #1
   173d4:	bgt	17400 <__assert_fail@plt+0x5cd8>
   173d8:	add	r0, sp, #112	; 0x70
   173dc:	mov	r1, r7
   173e0:	mov	r2, r6
   173e4:	mov	r4, r3
   173e8:	mov	r9, ip
   173ec:	bl	1de88 <__assert_fail@plt+0xc760>
   173f0:	mov	ip, r9
   173f4:	mov	r3, r4
   173f8:	cmp	r0, #0
   173fc:	beq	17384 <__assert_fail@plt+0x5c5c>
   17400:	ldr	r0, [sp, #68]	; 0x44
   17404:	cmp	r0, #0
   17408:	beq	1785c <__assert_fail@plt+0x6134>
   1740c:	mov	r1, #0
   17410:	mov	r0, #1
   17414:	str	r6, [sp, #96]	; 0x60
   17418:	str	r0, [sp, #72]	; 0x48
   1741c:	ldr	r0, [sp, #168]	; 0xa8
   17420:	cmp	r0, r6
   17424:	bgt	1727c <__assert_fail@plt+0x5b54>
   17428:	b	17434 <__assert_fail@plt+0x5d0c>
   1742c:	mov	r3, r5
   17430:	ldr	r1, [sp, #88]	; 0x58
   17434:	cmp	r1, #0
   17438:	ldr	r6, [sp, #96]	; 0x60
   1743c:	sub	r5, fp, #208	; 0xd0
   17440:	ldrne	r0, [r1]
   17444:	addne	r0, r0, r3
   17448:	strne	r0, [r1]
   1744c:	cmn	r6, #1
   17450:	beq	17730 <__assert_fail@plt+0x6008>
   17454:	mov	r4, #12
   17458:	cmn	r6, #2
   1745c:	beq	181c4 <__assert_fail@plt+0x6a9c>
   17460:	ldr	r0, [sp, #92]	; 0x5c
   17464:	str	r6, [sp, #204]	; 0xcc
   17468:	cmp	r0, #2
   1746c:	bcc	174c0 <__assert_fail@plt+0x5d98>
   17470:	ldr	r0, [sp, #44]	; 0x2c
   17474:	ldrb	r0, [r0, #28]
   17478:	ands	r0, r0, #16
   1747c:	bne	174c0 <__assert_fail@plt+0x5d98>
   17480:	ldr	r0, [sp, #212]	; 0xd4
   17484:	mov	r2, r6
   17488:	ldr	r1, [r0, r6, lsl #2]
   1748c:	add	r0, sp, #112	; 0x70
   17490:	bl	1de88 <__assert_fail@plt+0xc760>
   17494:	str	r0, [sp, #88]	; 0x58
   17498:	str	r0, [sp, #208]	; 0xd0
   1749c:	ldr	r0, [sp, #84]	; 0x54
   174a0:	ldrb	r0, [r0, #88]	; 0x58
   174a4:	tst	r0, #1
   174a8:	bne	174ec <__assert_fail@plt+0x5dc4>
   174ac:	ldr	r0, [sp, #64]	; 0x40
   174b0:	ldr	r0, [r0]
   174b4:	cmp	r0, #0
   174b8:	bne	174ec <__assert_fail@plt+0x5dc4>
   174bc:	b	178b4 <__assert_fail@plt+0x618c>
   174c0:	ldr	r0, [sp, #64]	; 0x40
   174c4:	ldr	r0, [r0]
   174c8:	cmp	r0, #0
   174cc:	beq	178b4 <__assert_fail@plt+0x618c>
   174d0:	ldr	r0, [sp, #212]	; 0xd4
   174d4:	mov	r2, r6
   174d8:	ldr	r1, [r0, r6, lsl #2]
   174dc:	add	r0, sp, #112	; 0x70
   174e0:	bl	1de88 <__assert_fail@plt+0xc760>
   174e4:	str	r0, [sp, #88]	; 0x58
   174e8:	str	r0, [sp, #208]	; 0xd0
   174ec:	cmn	r6, #-1073741823	; 0xc0000001
   174f0:	bcs	181c4 <__assert_fail@plt+0x6a9c>
   174f4:	ldr	r0, [sp, #196]	; 0xc4
   174f8:	mov	r9, r6
   174fc:	str	r0, [sp, #72]	; 0x48
   17500:	mov	r0, #4
   17504:	add	r6, r0, r6, lsl #2
   17508:	mov	r0, r6
   1750c:	bl	22aa0 <__assert_fail@plt+0x11378>
   17510:	mov	r7, r0
   17514:	cmp	r0, #0
   17518:	beq	18260 <__assert_fail@plt+0x6b38>
   1751c:	ldr	r0, [sp, #72]	; 0x48
   17520:	ldr	r0, [r0, #76]	; 0x4c
   17524:	cmp	r0, #0
   17528:	beq	175e0 <__assert_fail@plt+0x5eb8>
   1752c:	mov	r0, r6
   17530:	bl	22aa0 <__assert_fail@plt+0x11378>
   17534:	cmp	r0, #0
   17538:	beq	18260 <__assert_fail@plt+0x6b38>
   1753c:	mov	r6, r0
   17540:	add	r0, r9, #1
   17544:	mov	r1, #0
   17548:	mov	r4, r9
   1754c:	str	r0, [sp, #28]
   17550:	lsl	r2, r0, #2
   17554:	mov	r0, r6
   17558:	bl	11620 <memset@plt>
   1755c:	ldr	r0, [sp, #88]	; 0x58
   17560:	str	r7, [fp, #-208]	; 0xffffff30
   17564:	str	r6, [fp, #-204]	; 0xffffff34
   17568:	mov	r1, #0
   1756c:	str	r0, [fp, #-200]	; 0xffffff38
   17570:	ldr	r0, [sp, #40]	; 0x28
   17574:	str	r9, [fp, #-196]	; 0xffffff3c
   17578:	str	r1, [r0]
   1757c:	str	r1, [r0, #4]
   17580:	str	r1, [r0, #8]
   17584:	add	r0, sp, #112	; 0x70
   17588:	mov	r1, r5
   1758c:	bl	20ba8 <__assert_fail@plt+0xf480>
   17590:	mov	r4, r0
   17594:	mov	r0, #0
   17598:	bl	132d4 <__assert_fail@plt+0x1bac>
   1759c:	cmp	r4, #0
   175a0:	bne	177ac <__assert_fail@plt+0x6084>
   175a4:	ldr	r0, [r7]
   175a8:	cmp	r0, #0
   175ac:	beq	1763c <__assert_fail@plt+0x5f14>
   175b0:	ldr	r0, [sp, #72]	; 0x48
   175b4:	ldr	r3, [sp, #28]
   175b8:	mov	r1, r7
   175bc:	mov	r2, r6
   175c0:	bl	20e40 <__assert_fail@plt+0xf718>
   175c4:	mov	r4, r0
   175c8:	mov	r0, r6
   175cc:	bl	132d4 <__assert_fail@plt+0x1bac>
   175d0:	cmp	r4, #0
   175d4:	beq	1788c <__assert_fail@plt+0x6164>
   175d8:	mov	r6, #0
   175dc:	b	177ac <__assert_fail@plt+0x6084>
   175e0:	ldr	r0, [sp, #88]	; 0x58
   175e4:	mov	r6, #0
   175e8:	mov	r1, r5
   175ec:	str	r6, [fp, #-204]	; 0xffffff34
   175f0:	str	r7, [fp, #-208]	; 0xffffff30
   175f4:	str	r0, [fp, #-200]	; 0xffffff38
   175f8:	ldr	r0, [sp, #40]	; 0x28
   175fc:	str	r9, [fp, #-196]	; 0xffffff3c
   17600:	str	r6, [r0]
   17604:	str	r6, [r0, #4]
   17608:	str	r6, [r0, #8]
   1760c:	add	r0, sp, #112	; 0x70
   17610:	bl	20ba8 <__assert_fail@plt+0xf480>
   17614:	mov	r4, r0
   17618:	mov	r0, #0
   1761c:	bl	132d4 <__assert_fail@plt+0x1bac>
   17620:	cmp	r4, #0
   17624:	bne	177ac <__assert_fail@plt+0x6084>
   17628:	ldr	r0, [r7]
   1762c:	mov	r6, #0
   17630:	cmp	r0, #0
   17634:	beq	17720 <__assert_fail@plt+0x5ff8>
   17638:	b	1788c <__assert_fail@plt+0x6164>
   1763c:	ldr	r0, [r6]
   17640:	cmp	r0, #0
   17644:	bne	175b0 <__assert_fail@plt+0x5e88>
   17648:	cmp	r9, #1
   1764c:	blt	17720 <__assert_fail@plt+0x5ff8>
   17650:	ldr	r0, [sp, #212]	; 0xd4
   17654:	lsl	r4, r9, #2
   17658:	add	r5, r9, #1
   1765c:	sub	r0, r0, #4
   17660:	ldr	r1, [r0, r4]
   17664:	cmp	r1, #0
   17668:	ldrbne	r2, [r1, #52]	; 0x34
   1766c:	tstne	r2, #16
   17670:	bne	17688 <__assert_fail@plt+0x5f60>
   17674:	sub	r5, r5, #1
   17678:	sub	r4, r4, #4
   1767c:	cmp	r5, #2
   17680:	bge	17660 <__assert_fail@plt+0x5f38>
   17684:	b	17720 <__assert_fail@plt+0x5ff8>
   17688:	sub	r2, r5, #2
   1768c:	add	r0, sp, #112	; 0x70
   17690:	str	r2, [sp, #96]	; 0x60
   17694:	bl	1de88 <__assert_fail@plt+0xc760>
   17698:	mov	r9, r0
   1769c:	mov	r0, r6
   176a0:	mov	r1, #0
   176a4:	mov	r2, r4
   176a8:	bl	11620 <memset@plt>
   176ac:	ldr	r0, [sp, #96]	; 0x60
   176b0:	str	r7, [fp, #-208]	; 0xffffff30
   176b4:	str	r6, [fp, #-204]	; 0xffffff34
   176b8:	str	r9, [fp, #-200]	; 0xffffff38
   176bc:	str	r9, [sp, #88]	; 0x58
   176c0:	mov	r1, #0
   176c4:	mov	r9, r0
   176c8:	str	r0, [fp, #-196]	; 0xffffff3c
   176cc:	ldr	r0, [sp, #40]	; 0x28
   176d0:	str	r1, [r0]
   176d4:	str	r1, [r0, #4]
   176d8:	str	r1, [r0, #8]
   176dc:	add	r0, sp, #112	; 0x70
   176e0:	sub	r1, fp, #208	; 0xd0
   176e4:	bl	20ba8 <__assert_fail@plt+0xf480>
   176e8:	mov	r4, r0
   176ec:	mov	r0, #0
   176f0:	bl	132d4 <__assert_fail@plt+0x1bac>
   176f4:	cmp	r4, #0
   176f8:	bne	177ac <__assert_fail@plt+0x6084>
   176fc:	sub	r0, r5, #1
   17700:	str	r0, [sp, #28]
   17704:	ldr	r0, [r7]
   17708:	cmp	r0, #0
   1770c:	beq	1763c <__assert_fail@plt+0x5f14>
   17710:	sub	r9, r5, #2
   17714:	sub	r0, r5, #1
   17718:	str	r0, [sp, #28]
   1771c:	b	175b0 <__assert_fail@plt+0x5e88>
   17720:	mov	r0, r7
   17724:	bl	132d4 <__assert_fail@plt+0x1bac>
   17728:	mov	r0, r6
   1772c:	bl	132d4 <__assert_fail@plt+0x1bac>
   17730:	add	r0, sp, #112	; 0x70
   17734:	bl	1df48 <__assert_fail@plt+0xc820>
   17738:	ldr	r0, [fp, #-212]	; 0xffffff2c
   1773c:	ldr	r1, [sp, #80]	; 0x50
   17740:	ldr	r9, [sp, #56]	; 0x38
   17744:	ldr	ip, [sp, #108]	; 0x6c
   17748:	ldr	r3, [sp, #104]	; 0x68
   1774c:	ldr	r5, [sp, #100]	; 0x64
   17750:	ldr	r2, [fp, #24]
   17754:	ldr	lr, [sp, #60]	; 0x3c
   17758:	mov	r4, #1
   1775c:	add	r7, r0, r1
   17760:	cmp	r7, r9
   17764:	str	r7, [fp, #-212]	; 0xffffff2c
   17768:	blt	181c4 <__assert_fail@plt+0x6a9c>
   1776c:	cmp	r8, r7
   17770:	bge	16cec <__assert_fail@plt+0x55c4>
   17774:	b	181c4 <__assert_fail@plt+0x6a9c>
   17778:	ldr	r7, [r4, #48]	; 0x30
   1777c:	b	16f2c <__assert_fail@plt+0x5804>
   17780:	ldr	r7, [r4, #44]	; 0x2c
   17784:	b	16f2c <__assert_fail@plt+0x5804>
   17788:	cmn	r5, #1
   1778c:	ble	1780c <__assert_fail@plt+0x60e4>
   17790:	mov	r0, #1
   17794:	mov	r2, r3
   17798:	str	r0, [sp, #72]	; 0x48
   1779c:	ldr	r0, [sp, #68]	; 0x44
   177a0:	cmp	r0, #0
   177a4:	bne	16f7c <__assert_fail@plt+0x5854>
   177a8:	b	17858 <__assert_fail@plt+0x6130>
   177ac:	mov	r0, r7
   177b0:	bl	132d4 <__assert_fail@plt+0x1bac>
   177b4:	mov	r0, r6
   177b8:	bl	132d4 <__assert_fail@plt+0x1bac>
   177bc:	cmp	r4, #0
   177c0:	beq	178b4 <__assert_fail@plt+0x618c>
   177c4:	cmp	r4, #1
   177c8:	beq	17730 <__assert_fail@plt+0x6008>
   177cc:	b	181c4 <__assert_fail@plt+0x6a9c>
   177d0:	add	r4, r7, #4
   177d4:	add	r0, sp, #112	; 0x70
   177d8:	mov	r2, #0
   177dc:	mov	r9, r3
   177e0:	mov	r1, r4
   177e4:	bl	1e0d0 <__assert_fail@plt+0xc9a8>
   177e8:	cmp	r0, #0
   177ec:	str	r0, [fp, #-64]	; 0xffffffc0
   177f0:	bne	17884 <__assert_fail@plt+0x615c>
   177f4:	ldrb	r0, [r7, #52]	; 0x34
   177f8:	mov	ip, #0
   177fc:	tst	r0, #64	; 0x40
   17800:	bne	17864 <__assert_fail@plt+0x613c>
   17804:	mov	r3, r9
   17808:	b	16f60 <__assert_fail@plt+0x5838>
   1780c:	add	r0, sp, #112	; 0x70
   17810:	mov	r1, r7
   17814:	mov	r2, r3
   17818:	mov	r4, r3
   1781c:	mov	r6, ip
   17820:	bl	1de88 <__assert_fail@plt+0xc760>
   17824:	clz	r1, r0
   17828:	mov	ip, r6
   1782c:	cmp	r0, #0
   17830:	mov	r2, r4
   17834:	mov	r3, r4
   17838:	lsr	r6, r1, #5
   1783c:	ldr	r1, [sp, #68]	; 0x44
   17840:	movwne	r0, #1
   17844:	mvneq	r2, #0
   17848:	str	r0, [sp, #72]	; 0x48
   1784c:	orr	r1, r1, r6
   17850:	cmp	r1, #0
   17854:	bne	16f7c <__assert_fail@plt+0x5854>
   17858:	mov	r6, r3
   1785c:	sub	r5, fp, #208	; 0xd0
   17860:	b	1744c <__assert_fail@plt+0x5d24>
   17864:	add	r0, sp, #112	; 0x70
   17868:	mov	r1, r4
   1786c:	bl	1e1c8 <__assert_fail@plt+0xcaa0>
   17870:	mov	ip, #0
   17874:	cmp	r0, #0
   17878:	mov	r3, r9
   1787c:	str	r0, [fp, #-64]	; 0xffffffc0
   17880:	beq	16f60 <__assert_fail@plt+0x5838>
   17884:	mov	r6, r0
   17888:	b	1744c <__assert_fail@plt+0x5d24>
   1788c:	ldr	r0, [sp, #212]	; 0xd4
   17890:	bl	132d4 <__assert_fail@plt+0x1bac>
   17894:	ldr	r0, [sp, #88]	; 0x58
   17898:	str	r0, [sp, #208]	; 0xd0
   1789c:	mov	r0, #0
   178a0:	str	r7, [sp, #212]	; 0xd4
   178a4:	str	r9, [sp, #204]	; 0xcc
   178a8:	bl	132d4 <__assert_fail@plt+0x1bac>
   178ac:	mov	r0, #0
   178b0:	bl	132d4 <__assert_fail@plt+0x1bac>
   178b4:	ldr	r4, [sp, #92]	; 0x5c
   178b8:	cmp	r4, #0
   178bc:	beq	181c0 <__assert_fail@plt+0x6a98>
   178c0:	ldr	r8, [sp, #36]	; 0x24
   178c4:	ldr	sl, [fp, #20]
   178c8:	cmp	r4, #1
   178cc:	beq	178ec <__assert_fail@plt+0x61c4>
   178d0:	ldr	r1, [fp, #16]
   178d4:	mvn	r0, r8
   178d8:	add	r0, r0, r1
   178dc:	mov	r1, #255	; 0xff
   178e0:	lsl	r2, r0, #3
   178e4:	add	r0, sl, #8
   178e8:	bl	11620 <memset@plt>
   178ec:	ldr	r0, [sp, #204]	; 0xcc
   178f0:	mov	r5, #0
   178f4:	cmp	r4, #2
   178f8:	str	r5, [sl]
   178fc:	str	r0, [sl, #4]
   17900:	bcc	18098 <__assert_fail@plt+0x6970>
   17904:	ldr	r0, [sp, #44]	; 0x2c
   17908:	ldrb	r0, [r0, #28]
   1790c:	ands	r0, r0, #16
   17910:	bne	18098 <__assert_fail@plt+0x6970>
   17914:	ldr	r0, [sp, #84]	; 0x54
   17918:	ldrb	r1, [r0, #88]	; 0x58
   1791c:	mov	r0, #0
   17920:	tst	r1, #1
   17924:	mov	r1, #0
   17928:	beq	17940 <__assert_fail@plt+0x6218>
   1792c:	ldr	r1, [sp, #64]	; 0x40
   17930:	ldr	r2, [r1]
   17934:	mov	r1, #0
   17938:	cmp	r2, #0
   1793c:	movwgt	r1, #1
   17940:	ldr	r2, [sp, #44]	; 0x2c
   17944:	ldr	r4, [sp, #92]	; 0x5c
   17948:	cmp	r1, #0
   1794c:	ldr	r6, [r2]
   17950:	movw	r2, #16296	; 0x3fa8
   17954:	movt	r2, #2
   17958:	vldr	d16, [r2]
   1795c:	ldr	r2, [r2, #8]
   17960:	str	r2, [fp, #-56]	; 0xffffffc8
   17964:	mov	r2, #16
   17968:	vstr	d16, [fp, #-64]	; 0xffffffc0
   1796c:	str	r2, [fp, #-204]	; 0xffffff34
   17970:	sub	r2, fp, #208	; 0xd0
   17974:	str	r0, [fp, #-208]	; 0xffffff30
   17978:	add	r9, r2, #12
   1797c:	mov	r2, #0
   17980:	str	r9, [fp, #-200]	; 0xffffff38
   17984:	beq	179a8 <__assert_fail@plt+0x6280>
   17988:	mov	r0, #48	; 0x30
   1798c:	bl	22aa0 <__assert_fail@plt+0x11378>
   17990:	cmp	r0, #0
   17994:	str	r0, [fp, #-56]	; 0xffffffc8
   17998:	beq	180b0 <__assert_fail@plt+0x6988>
   1799c:	ldr	r0, [fp, #-208]	; 0xffffff30
   179a0:	sub	r1, fp, #64	; 0x40
   179a4:	mov	r2, r1
   179a8:	ldr	sl, [r6, #72]	; 0x48
   179ac:	mov	r1, #0
   179b0:	cmp	r0, r4
   179b4:	str	r6, [sp, #104]	; 0x68
   179b8:	str	r2, [sp, #108]	; 0x6c
   179bc:	str	r1, [fp, #-44]	; 0xffffffd4
   179c0:	str	r1, [fp, #-48]	; 0xffffffd0
   179c4:	str	r1, [fp, #-40]	; 0xffffffd8
   179c8:	bcs	17a5c <__assert_fail@plt+0x6334>
   179cc:	sub	r0, fp, #208	; 0xd0
   179d0:	mov	r1, r4
   179d4:	mov	r2, r9
   179d8:	mov	r3, #8
   179dc:	bl	22ba0 <__assert_fail@plt+0x11478>
   179e0:	cmp	r0, #0
   179e4:	bne	17a60 <__assert_fail@plt+0x6338>
   179e8:	ldr	r0, [fp, #-200]	; 0xffffff38
   179ec:	ldr	r6, [sp, #108]	; 0x6c
   179f0:	mov	r4, r9
   179f4:	cmp	r0, r9
   179f8:	beq	17a00 <__assert_fail@plt+0x62d8>
   179fc:	bl	132d4 <__assert_fail@plt+0x1bac>
   17a00:	mov	r0, #16
   17a04:	str	r0, [fp, #-204]	; 0xffffff34
   17a08:	mov	r0, #0
   17a0c:	str	r0, [fp, #-208]	; 0xffffff30
   17a10:	mov	r0, r6
   17a14:	str	r4, [fp, #-200]	; 0xffffff38
   17a18:	bl	21d6c <__assert_fail@plt+0x10644>
   17a1c:	ldr	r8, [sp, #36]	; 0x24
   17a20:	b	18050 <__assert_fail@plt+0x6928>
   17a24:	ldr	r1, [r3, #8]
   17a28:	cmp	r1, #0
   17a2c:	beq	17a3c <__assert_fail@plt+0x6314>
   17a30:	ldrsb	r1, [r9, #28]
   17a34:	cmp	r1, #0
   17a38:	blt	16a14 <__assert_fail@plt+0x52ec>
   17a3c:	mov	r1, #0
   17a40:	cmp	r7, #0
   17a44:	str	r1, [sp, #96]	; 0x60
   17a48:	beq	180a8 <__assert_fail@plt+0x6980>
   17a4c:	cmp	r0, #0
   17a50:	mov	r7, #0
   17a54:	bne	181fc <__assert_fail@plt+0x6ad4>
   17a58:	b	16a18 <__assert_fail@plt+0x52f0>
   17a5c:	str	r4, [fp, #-208]	; 0xffffff30
   17a60:	ldr	r6, [fp, #20]
   17a64:	ldr	r0, [fp, #-200]	; 0xffffff38
   17a68:	lsl	r2, r4, #3
   17a6c:	str	r2, [sp, #96]	; 0x60
   17a70:	mov	r1, r6
   17a74:	str	r0, [sp, #100]	; 0x64
   17a78:	bl	11464 <memcpy@plt>
   17a7c:	ldr	r7, [r6]
   17a80:	ldr	r1, [r6, #4]
   17a84:	mov	r0, #0
   17a88:	cmp	r7, r1
   17a8c:	str	r7, [fp, #-36]	; 0xffffffdc
   17a90:	ble	17ac4 <__assert_fail@plt+0x639c>
   17a94:	bl	132d4 <__assert_fail@plt+0x1bac>
   17a98:	ldr	r0, [fp, #-200]	; 0xffffff38
   17a9c:	cmp	r0, r9
   17aa0:	beq	17aa8 <__assert_fail@plt+0x6380>
   17aa4:	bl	132d4 <__assert_fail@plt+0x1bac>
   17aa8:	mov	r0, #16
   17aac:	mov	r4, #0
   17ab0:	str	r0, [fp, #-204]	; 0xffffff34
   17ab4:	ldr	r0, [sp, #108]	; 0x6c
   17ab8:	str	r4, [fp, #-208]	; 0xffffff30
   17abc:	str	r9, [fp, #-200]	; 0xffffff38
   17ac0:	b	18088 <__assert_fail@plt+0x6960>
   17ac4:	ldr	r1, [sp, #104]	; 0x68
   17ac8:	lsl	r0, r4, #4
   17acc:	str	r9, [sp, #88]	; 0x58
   17ad0:	str	r0, [sp, #80]	; 0x50
   17ad4:	ldr	r0, [r1]
   17ad8:	add	r1, r0, sl, lsl #3
   17adc:	ldr	r3, [r1, #4]
   17ae0:	uxtb	r2, r3
   17ae4:	cmp	r2, #9
   17ae8:	beq	17b18 <__assert_fail@plt+0x63f0>
   17aec:	cmp	r2, #8
   17af0:	bne	17b80 <__assert_fail@plt+0x6458>
   17af4:	ldr	r0, [r0, sl, lsl #3]
   17af8:	add	r0, r0, #1
   17afc:	cmp	r0, r4
   17b00:	bge	17b80 <__assert_fail@plt+0x6458>
   17b04:	ldr	r1, [fp, #20]
   17b08:	str	r7, [r1, r0, lsl #3]!
   17b0c:	mvn	r0, #0
   17b10:	str	r0, [r1, #4]
   17b14:	b	17b80 <__assert_fail@plt+0x6458>
   17b18:	ldr	r0, [r0, sl, lsl #3]
   17b1c:	add	r0, r0, #1
   17b20:	cmp	r0, r4
   17b24:	bge	17b80 <__assert_fail@plt+0x6458>
   17b28:	ldr	r1, [fp, #20]
   17b2c:	ldr	r2, [r1, r0, lsl #3]
   17b30:	cmp	r2, r7
   17b34:	bge	17b48 <__assert_fail@plt+0x6420>
   17b38:	add	r0, r1, r0, lsl #3
   17b3c:	str	r7, [r0, #4]
   17b40:	ldr	r0, [sp, #100]	; 0x64
   17b44:	b	17b68 <__assert_fail@plt+0x6440>
   17b48:	tst	r3, #524288	; 0x80000
   17b4c:	beq	17b74 <__assert_fail@plt+0x644c>
   17b50:	ldr	r1, [sp, #100]	; 0x64
   17b54:	ldr	r1, [r1, r0, lsl #3]
   17b58:	cmn	r1, #1
   17b5c:	beq	17b74 <__assert_fail@plt+0x644c>
   17b60:	ldr	r0, [fp, #20]
   17b64:	ldr	r1, [sp, #100]	; 0x64
   17b68:	ldr	r2, [sp, #96]	; 0x60
   17b6c:	bl	11464 <memcpy@plt>
   17b70:	b	17b80 <__assert_fail@plt+0x6458>
   17b74:	ldr	r1, [fp, #20]
   17b78:	add	r0, r1, r0, lsl #3
   17b7c:	str	r7, [r0, #4]
   17b80:	ldr	r0, [fp, #20]
   17b84:	ldr	r0, [r0, #4]
   17b88:	cmp	r7, r0
   17b8c:	ldreq	r0, [sp, #208]	; 0xd0
   17b90:	cmpeq	sl, r0
   17b94:	beq	17bbc <__assert_fail@plt+0x6494>
   17b98:	ldr	r7, [sp, #108]	; 0x6c
   17b9c:	cmp	r7, #0
   17ba0:	beq	17c28 <__assert_fail@plt+0x6500>
   17ba4:	sub	r0, fp, #48	; 0x30
   17ba8:	mov	r1, sl
   17bac:	bl	1d31c <__assert_fail@plt+0xbbf4>
   17bb0:	cmp	r0, #0
   17bb4:	bne	17bc8 <__assert_fail@plt+0x64a0>
   17bb8:	b	17c28 <__assert_fail@plt+0x6500>
   17bbc:	ldr	r7, [sp, #108]	; 0x6c
   17bc0:	cmp	r7, #0
   17bc4:	beq	18058 <__assert_fail@plt+0x6930>
   17bc8:	mov	r0, #0
   17bcc:	ldr	r3, [fp, #20]
   17bd0:	ldr	r1, [r3, r0, lsl #3]
   17bd4:	cmp	r1, #0
   17bd8:	blt	17bec <__assert_fail@plt+0x64c4>
   17bdc:	add	r1, r3, r0, lsl #3
   17be0:	ldr	r1, [r1, #4]
   17be4:	cmn	r1, #1
   17be8:	beq	17bfc <__assert_fail@plt+0x64d4>
   17bec:	add	r0, r0, #1
   17bf0:	cmp	r0, r4
   17bf4:	bcc	17bcc <__assert_fail@plt+0x64a4>
   17bf8:	b	18058 <__assert_fail@plt+0x6930>
   17bfc:	ldr	r0, [sp, #100]	; 0x64
   17c00:	sub	r1, fp, #36	; 0x24
   17c04:	mov	r2, r4
   17c08:	str	r0, [sp]
   17c0c:	sub	r0, fp, #48	; 0x30
   17c10:	str	r0, [sp, #4]
   17c14:	mov	r0, r7
   17c18:	bl	21dd4 <__assert_fail@plt+0x106ac>
   17c1c:	mov	sl, r0
   17c20:	cmn	r0, #1
   17c24:	ble	18058 <__assert_fail@plt+0x6930>
   17c28:	ldr	r6, [sp, #196]	; 0xc4
   17c2c:	ldr	r0, [r6]
   17c30:	add	r1, r0, sl, lsl #3
   17c34:	ldr	r1, [r1, #4]
   17c38:	tst	r1, #8
   17c3c:	bne	17cfc <__assert_fail@plt+0x65d4>
   17c40:	tst	r1, #1048576	; 0x100000
   17c44:	bne	17d94 <__assert_fail@plt+0x666c>
   17c48:	uxtb	r1, r1
   17c4c:	cmp	r1, #4
   17c50:	bne	17db8 <__assert_fail@plt+0x6690>
   17c54:	ldr	r0, [r0, sl, lsl #3]
   17c58:	ldr	r1, [sp, #92]	; 0x5c
   17c5c:	mov	r4, #0
   17c60:	add	r0, r0, #1
   17c64:	cmp	r0, r1
   17c68:	ldrlt	r1, [fp, #20]
   17c6c:	ldrlt	r2, [r1, r0, lsl #3]!
   17c70:	ldrlt	r1, [r1, #4]
   17c74:	sublt	r4, r1, r2
   17c78:	cmp	r7, #0
   17c7c:	beq	17e8c <__assert_fail@plt+0x6764>
   17c80:	ldr	r1, [sp, #92]	; 0x5c
   17c84:	cmp	r0, r1
   17c88:	bge	17e2c <__assert_fail@plt+0x6704>
   17c8c:	ldr	r1, [fp, #20]
   17c90:	ldr	r1, [r1, r0, lsl #3]
   17c94:	cmn	r1, #1
   17c98:	beq	17e2c <__assert_fail@plt+0x6704>
   17c9c:	ldr	r2, [fp, #20]
   17ca0:	add	r0, r2, r0, lsl #3
   17ca4:	ldr	r0, [r0, #4]
   17ca8:	cmn	r0, #1
   17cac:	beq	17e2c <__assert_fail@plt+0x6704>
   17cb0:	cmp	r4, #0
   17cb4:	beq	17f38 <__assert_fail@plt+0x6810>
   17cb8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   17cbc:	ldr	r0, [sp, #140]	; 0x8c
   17cc0:	sub	r0, r0, r7
   17cc4:	cmp	r0, r4
   17cc8:	blt	17e2c <__assert_fail@plt+0x6704>
   17ccc:	ldr	r2, [sp, #116]	; 0x74
   17cd0:	add	r0, r2, r1
   17cd4:	add	r1, r2, r7
   17cd8:	mov	r2, r4
   17cdc:	bl	114ac <memcmp@plt>
   17ce0:	cmp	r0, #0
   17ce4:	bne	17e2c <__assert_fail@plt+0x6704>
   17ce8:	ldr	r0, [r6, #12]
   17cec:	add	r7, r7, r4
   17cf0:	ldr	r9, [r0, sl, lsl #2]
   17cf4:	str	r7, [fp, #-36]	; 0xffffffdc
   17cf8:	b	17dfc <__assert_fail@plt+0x66d4>
   17cfc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17d00:	ldr	r0, [sp, #212]	; 0xd4
   17d04:	ldr	r4, [r6, #20]
   17d08:	ldr	r7, [r0, r1, lsl #2]
   17d0c:	str	r1, [sp, #76]	; 0x4c
   17d10:	sub	r0, fp, #48	; 0x30
   17d14:	mov	r1, sl
   17d18:	bl	1d31c <__assert_fail@plt+0xbbf4>
   17d1c:	cmp	r0, #0
   17d20:	bne	17d38 <__assert_fail@plt+0x6610>
   17d24:	sub	r0, fp, #48	; 0x30
   17d28:	mov	r1, sl
   17d2c:	bl	1d104 <__assert_fail@plt+0xb9dc>
   17d30:	cmp	r0, #0
   17d34:	beq	18018 <__assert_fail@plt+0x68f0>
   17d38:	add	r0, sl, sl, lsl #1
   17d3c:	add	r0, r4, r0, lsl #2
   17d40:	ldr	r4, [r0, #4]
   17d44:	cmp	r4, #1
   17d48:	blt	17e2c <__assert_fail@plt+0x6704>
   17d4c:	add	r6, r7, #4
   17d50:	ldr	r7, [r0, #8]
   17d54:	mov	r8, #0
   17d58:	mvn	sl, #0
   17d5c:	ldr	r9, [r7, r8, lsl #2]
   17d60:	mov	r0, r6
   17d64:	mov	r1, r9
   17d68:	bl	1d31c <__assert_fail@plt+0xbbf4>
   17d6c:	cmp	r0, #0
   17d70:	beq	17d80 <__assert_fail@plt+0x6658>
   17d74:	cmn	sl, #1
   17d78:	bne	17e6c <__assert_fail@plt+0x6744>
   17d7c:	mov	sl, r9
   17d80:	add	r8, r8, #1
   17d84:	cmp	r8, r4
   17d88:	blt	17d5c <__assert_fail@plt+0x6634>
   17d8c:	mov	r9, sl
   17d90:	b	17e80 <__assert_fail@plt+0x6758>
   17d94:	ldr	r7, [fp, #-36]	; 0xffffffdc
   17d98:	mov	r0, r6
   17d9c:	mov	r1, sl
   17da0:	add	r2, sp, #112	; 0x70
   17da4:	mov	r3, r7
   17da8:	bl	1fc78 <__assert_fail@plt+0xe550>
   17dac:	cmp	r0, #0
   17db0:	bne	17de0 <__assert_fail@plt+0x66b8>
   17db4:	b	17dbc <__assert_fail@plt+0x6694>
   17db8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   17dbc:	ldr	r0, [r6]
   17dc0:	mov	r2, r7
   17dc4:	add	r1, r0, sl, lsl #3
   17dc8:	add	r0, sp, #112	; 0x70
   17dcc:	bl	1ff68 <__assert_fail@plt+0xe840>
   17dd0:	mov	r1, r0
   17dd4:	mov	r0, #1
   17dd8:	cmp	r1, #0
   17ddc:	beq	17e2c <__assert_fail@plt+0x6704>
   17de0:	ldr	r1, [r6, #12]
   17de4:	add	r7, r0, r7
   17de8:	ldr	r0, [sp, #108]	; 0x6c
   17dec:	ldr	r9, [r1, sl, lsl #2]
   17df0:	cmp	r0, #0
   17df4:	str	r7, [fp, #-36]	; 0xffffffdc
   17df8:	beq	17ea8 <__assert_fail@plt+0x6780>
   17dfc:	ldr	r0, [sp, #204]	; 0xcc
   17e00:	cmp	r7, r0
   17e04:	bgt	17e2c <__assert_fail@plt+0x6704>
   17e08:	ldr	r0, [sp, #212]	; 0xd4
   17e0c:	ldr	r0, [r0, r7, lsl #2]
   17e10:	cmp	r0, #0
   17e14:	beq	17e2c <__assert_fail@plt+0x6704>
   17e18:	add	r0, r0, #4
   17e1c:	mov	r1, r9
   17e20:	bl	1d31c <__assert_fail@plt+0xbbf4>
   17e24:	cmp	r0, #0
   17e28:	bne	17ea8 <__assert_fail@plt+0x6780>
   17e2c:	ldr	r0, [sp, #100]	; 0x64
   17e30:	ldr	r4, [sp, #92]	; 0x5c
   17e34:	ldr	r6, [sp, #108]	; 0x6c
   17e38:	ldr	r3, [fp, #20]
   17e3c:	sub	r1, fp, #36	; 0x24
   17e40:	str	r0, [sp]
   17e44:	sub	r0, fp, #48	; 0x30
   17e48:	mov	r2, r4
   17e4c:	str	r0, [sp, #4]
   17e50:	mov	r0, r6
   17e54:	bl	21dd4 <__assert_fail@plt+0x106ac>
   17e58:	cmp	r0, #0
   17e5c:	blt	18220 <__assert_fail@plt+0x6af8>
   17e60:	ldr	r7, [fp, #-36]	; 0xffffffdc
   17e64:	mov	sl, r0
   17e68:	b	17ec0 <__assert_fail@plt+0x6798>
   17e6c:	sub	r0, fp, #48	; 0x30
   17e70:	mov	r1, sl
   17e74:	bl	1d31c <__assert_fail@plt+0xbbf4>
   17e78:	cmp	r0, #0
   17e7c:	beq	17edc <__assert_fail@plt+0x67b4>
   17e80:	ldr	r8, [sp, #36]	; 0x24
   17e84:	ldr	r7, [sp, #76]	; 0x4c
   17e88:	b	17eb0 <__assert_fail@plt+0x6788>
   17e8c:	cmp	r4, #0
   17e90:	beq	17f38 <__assert_fail@plt+0x6810>
   17e94:	ldr	r0, [r6, #12]
   17e98:	ldr	r9, [r0, sl, lsl #2]
   17e9c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17ea0:	add	r7, r0, r4
   17ea4:	str	r7, [fp, #-36]	; 0xffffffdc
   17ea8:	mov	r0, #0
   17eac:	str	r0, [fp, #-44]	; 0xffffffd4
   17eb0:	cmn	r9, #1
   17eb4:	ble	18010 <__assert_fail@plt+0x68e8>
   17eb8:	ldr	r4, [sp, #92]	; 0x5c
   17ebc:	mov	sl, r9
   17ec0:	ldr	r0, [fp, #20]
   17ec4:	ldr	r9, [sp, #88]	; 0x58
   17ec8:	ldr	r1, [sp, #104]	; 0x68
   17ecc:	ldr	r0, [r0, #4]
   17ed0:	cmp	r7, r0
   17ed4:	ble	17ad4 <__assert_fail@plt+0x63ac>
   17ed8:	b	18208 <__assert_fail@plt+0x6ae0>
   17edc:	ldr	r4, [sp, #108]	; 0x6c
   17ee0:	ldr	r8, [sp, #36]	; 0x24
   17ee4:	ldr	r7, [sp, #76]	; 0x4c
   17ee8:	cmp	r4, #0
   17eec:	beq	17f84 <__assert_fail@plt+0x685c>
   17ef0:	ldr	r6, [r4]
   17ef4:	ldr	r0, [r4, #4]
   17ef8:	add	r1, r6, #1
   17efc:	cmp	r1, r0
   17f00:	str	r1, [r4]
   17f04:	bne	17f8c <__assert_fail@plt+0x6864>
   17f08:	ldr	r0, [r4, #8]
   17f0c:	add	r1, r1, r1, lsl #1
   17f10:	lsl	r1, r1, #4
   17f14:	bl	22ad0 <__assert_fail@plt+0x113a8>
   17f18:	cmp	r0, #0
   17f1c:	beq	18008 <__assert_fail@plt+0x68e0>
   17f20:	str	r0, [r4, #8]
   17f24:	ldr	r7, [sp, #76]	; 0x4c
   17f28:	ldr	r1, [r4, #4]
   17f2c:	lsl	r1, r1, #1
   17f30:	str	r1, [r4, #4]
   17f34:	b	17f90 <__assert_fail@plt+0x6868>
   17f38:	sub	r0, fp, #48	; 0x30
   17f3c:	mov	r1, sl
   17f40:	bl	1d104 <__assert_fail@plt+0xb9dc>
   17f44:	cmp	r0, #0
   17f48:	beq	18018 <__assert_fail@plt+0x68f0>
   17f4c:	ldr	r0, [r6, #20]
   17f50:	add	r1, sl, sl, lsl #1
   17f54:	ldr	r7, [fp, #-36]	; 0xffffffdc
   17f58:	add	r0, r0, r1, lsl #2
   17f5c:	ldr	r0, [r0, #8]
   17f60:	ldr	r9, [r0]
   17f64:	ldr	r0, [sp, #212]	; 0xd4
   17f68:	ldr	r0, [r0, r7, lsl #2]
   17f6c:	mov	r1, r9
   17f70:	add	r0, r0, #4
   17f74:	bl	1d31c <__assert_fail@plt+0xbbf4>
   17f78:	cmp	r0, #0
   17f7c:	bne	17eb0 <__assert_fail@plt+0x6788>
   17f80:	b	17dbc <__assert_fail@plt+0x6694>
   17f84:	mov	r9, sl
   17f88:	b	17eb0 <__assert_fail@plt+0x6788>
   17f8c:	ldr	r0, [r4, #8]
   17f90:	add	r1, r6, r6, lsl #1
   17f94:	str	r7, [r0, r1, lsl #3]!
   17f98:	mov	r7, r1
   17f9c:	str	r9, [r0, #4]
   17fa0:	ldr	r0, [sp, #80]	; 0x50
   17fa4:	bl	22aa0 <__assert_fail@plt+0x11378>
   17fa8:	ldr	r1, [r4, #8]
   17fac:	mvn	r9, #1
   17fb0:	cmp	r0, #0
   17fb4:	add	r6, r1, r7, lsl #3
   17fb8:	str	r0, [r6, #8]!
   17fbc:	beq	17e84 <__assert_fail@plt+0x675c>
   17fc0:	ldr	r1, [fp, #20]
   17fc4:	ldr	r2, [sp, #96]	; 0x60
   17fc8:	bl	11464 <memcpy@plt>
   17fcc:	ldr	r0, [r6]
   17fd0:	ldr	r1, [sp, #92]	; 0x5c
   17fd4:	ldr	r2, [sp, #96]	; 0x60
   17fd8:	add	r0, r0, r1, lsl #3
   17fdc:	ldr	r1, [sp, #100]	; 0x64
   17fe0:	bl	11464 <memcpy@plt>
   17fe4:	ldr	r0, [r4, #8]
   17fe8:	sub	r1, fp, #48	; 0x30
   17fec:	add	r0, r0, r7, lsl #3
   17ff0:	add	r0, r0, #12
   17ff4:	bl	1d2a0 <__assert_fail@plt+0xbb78>
   17ff8:	ldr	r7, [sp, #76]	; 0x4c
   17ffc:	cmp	r0, #0
   18000:	moveq	r9, sl
   18004:	b	17eb0 <__assert_fail@plt+0x6788>
   18008:	mvn	r9, #1
   1800c:	b	17e84 <__assert_fail@plt+0x675c>
   18010:	cmn	r9, #2
   18014:	bne	17e2c <__assert_fail@plt+0x6704>
   18018:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1801c:	bl	132d4 <__assert_fail@plt+0x1bac>
   18020:	ldr	r0, [fp, #-200]	; 0xffffff38
   18024:	ldr	r4, [sp, #88]	; 0x58
   18028:	cmp	r0, r4
   1802c:	beq	18034 <__assert_fail@plt+0x690c>
   18030:	bl	132d4 <__assert_fail@plt+0x1bac>
   18034:	mov	r0, #16
   18038:	str	r0, [fp, #-204]	; 0xffffff34
   1803c:	mov	r0, #0
   18040:	str	r0, [fp, #-208]	; 0xffffff30
   18044:	ldr	r0, [sp, #108]	; 0x6c
   18048:	str	r4, [fp, #-200]	; 0xffffff38
   1804c:	bl	21d6c <__assert_fail@plt+0x10644>
   18050:	mov	r4, #12
   18054:	b	1808c <__assert_fail@plt+0x6964>
   18058:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1805c:	bl	132d4 <__assert_fail@plt+0x1bac>
   18060:	ldr	r0, [fp, #-200]	; 0xffffff38
   18064:	cmp	r0, r9
   18068:	beq	18070 <__assert_fail@plt+0x6948>
   1806c:	bl	132d4 <__assert_fail@plt+0x1bac>
   18070:	mov	r0, #16
   18074:	mov	r4, #0
   18078:	str	r0, [fp, #-204]	; 0xffffff34
   1807c:	str	r4, [fp, #-208]	; 0xffffff30
   18080:	str	r9, [fp, #-200]	; 0xffffff38
   18084:	mov	r0, r7
   18088:	bl	21d6c <__assert_fail@plt+0x10644>
   1808c:	ldr	sl, [fp, #20]
   18090:	cmp	r4, #0
   18094:	bne	181c4 <__assert_fail@plt+0x6a9c>
   18098:	ldrb	r1, [sp, #188]	; 0xbc
   1809c:	ldr	r2, [fp, #16]
   180a0:	add	r0, sl, #4
   180a4:	b	180f8 <__assert_fail@plt+0x69d0>
   180a8:	mov	r7, #0
   180ac:	b	16a18 <__assert_fail@plt+0x52f0>
   180b0:	mov	r4, #12
   180b4:	b	18090 <__assert_fail@plt+0x6968>
   180b8:	ldr	r7, [sp, #140]	; 0x8c
   180bc:	ldr	r6, [sp, #32]
   180c0:	ldr	ip, [sp, #124]	; 0x7c
   180c4:	cmp	r3, r7
   180c8:	mov	r4, r6
   180cc:	addne	r4, ip, r3, lsl #2
   180d0:	ldr	r3, [r4]
   180d4:	str	r3, [r0, #-4]
   180d8:	ldr	r4, [r0]
   180dc:	cmp	r4, r7
   180e0:	addne	r6, ip, r4, lsl #2
   180e4:	ldr	r7, [r6]
   180e8:	add	r6, sl, r5, lsl #3
   180ec:	add	r6, r6, #4
   180f0:	str	r7, [r0]
   180f4:	b	18114 <__assert_fail@plt+0x69ec>
   180f8:	ldr	r3, [r0, #-4]
   180fc:	cmn	r3, #1
   18100:	beq	18128 <__assert_fail@plt+0x6a00>
   18104:	cmp	r1, #0
   18108:	bne	180b8 <__assert_fail@plt+0x6990>
   1810c:	ldr	r7, [r0]
   18110:	mov	r6, r0
   18114:	ldr	r4, [fp, #-212]	; 0xffffff2c
   18118:	add	r3, r3, r4
   1811c:	str	r3, [r0, #-4]
   18120:	add	r3, r7, r4
   18124:	str	r3, [r6]
   18128:	sub	r2, r2, #1
   1812c:	add	r0, r0, #8
   18130:	add	r5, r5, #1
   18134:	cmp	r8, r2
   18138:	bne	180f8 <__assert_fail@plt+0x69d0>
   1813c:	ldr	r0, [sp, #92]	; 0x5c
   18140:	cmp	r8, #1
   18144:	blt	18158 <__assert_fail@plt+0x6a30>
   18148:	add	r0, sl, r0, lsl #3
   1814c:	lsl	r2, r8, #3
   18150:	mov	r1, #255	; 0xff
   18154:	bl	11620 <memset@plt>
   18158:	ldr	r0, [sp, #84]	; 0x54
   1815c:	mov	r4, #0
   18160:	ldr	r0, [r0, #132]	; 0x84
   18164:	cmp	r0, #0
   18168:	beq	181c4 <__assert_fail@plt+0x6a9c>
   1816c:	ldr	r1, [sp, #92]	; 0x5c
   18170:	cmp	r1, #2
   18174:	bcc	181c4 <__assert_fail@plt+0x6a9c>
   18178:	ldr	r1, [fp, #16]
   1817c:	mov	r2, #0
   18180:	sub	r1, r1, #1
   18184:	sub	r1, r1, r8
   18188:	ldr	r3, [r0, r2, lsl #2]
   1818c:	cmp	r2, r3
   18190:	beq	181b4 <__assert_fail@plt+0x6a8c>
   18194:	add	r3, sl, r3, lsl #3
   18198:	add	r7, sl, r2, lsl #3
   1819c:	ldr	r3, [r3, #8]
   181a0:	str	r3, [r7, #8]
   181a4:	ldr	r3, [r0, r2, lsl #2]
   181a8:	add	r3, sl, r3, lsl #3
   181ac:	ldr	r3, [r3, #12]
   181b0:	str	r3, [r7, #12]
   181b4:	add	r2, r2, #1
   181b8:	cmp	r1, r2
   181bc:	bne	18188 <__assert_fail@plt+0x6a60>
   181c0:	mov	r4, #0
   181c4:	ldr	r0, [sp, #212]	; 0xd4
   181c8:	bl	132d4 <__assert_fail@plt+0x1bac>
   181cc:	ldr	r0, [sp, #64]	; 0x40
   181d0:	ldr	r0, [r0]
   181d4:	cmp	r0, #0
   181d8:	beq	181f4 <__assert_fail@plt+0x6acc>
   181dc:	add	r0, sp, #112	; 0x70
   181e0:	bl	1df48 <__assert_fail@plt+0xc820>
   181e4:	ldr	r0, [sp, #244]	; 0xf4
   181e8:	bl	132d4 <__assert_fail@plt+0x1bac>
   181ec:	ldr	r0, [sp, #228]	; 0xe4
   181f0:	bl	132d4 <__assert_fail@plt+0x1bac>
   181f4:	add	r0, sp, #112	; 0x70
   181f8:	bl	188d4 <__assert_fail@plt+0x71ac>
   181fc:	mov	r0, r4
   18200:	sub	sp, fp, #28
   18204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18208:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1820c:	b	17a94 <__assert_fail@plt+0x636c>
   18210:	mov	r4, #12
   18214:	b	181c4 <__assert_fail@plt+0x6a9c>
   18218:	mov	r4, r0
   1821c:	b	181c4 <__assert_fail@plt+0x6a9c>
   18220:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18224:	bl	132d4 <__assert_fail@plt+0x1bac>
   18228:	ldr	r0, [fp, #-200]	; 0xffffff38
   1822c:	ldr	r4, [sp, #88]	; 0x58
   18230:	cmp	r0, r4
   18234:	beq	1823c <__assert_fail@plt+0x6b14>
   18238:	bl	132d4 <__assert_fail@plt+0x1bac>
   1823c:	mov	r0, #16
   18240:	str	r0, [fp, #-204]	; 0xffffff34
   18244:	mov	r0, #0
   18248:	str	r0, [fp, #-208]	; 0xffffff30
   1824c:	mov	r0, r6
   18250:	str	r4, [fp, #-200]	; 0xffffff38
   18254:	bl	21d6c <__assert_fail@plt+0x10644>
   18258:	mov	r4, #1
   1825c:	b	1808c <__assert_fail@plt+0x6964>
   18260:	mov	r0, r7
   18264:	bl	132d4 <__assert_fail@plt+0x1bac>
   18268:	mov	r0, #0
   1826c:	bl	132d4 <__assert_fail@plt+0x1bac>
   18270:	b	181c4 <__assert_fail@plt+0x6a9c>
   18274:	mov	r4, r0
   18278:	add	r0, r5, #76	; 0x4c
   1827c:	str	r0, [sp, #64]	; 0x40
   18280:	b	181c4 <__assert_fail@plt+0x6a9c>
   18284:	mov	r4, #1
   18288:	b	181c4 <__assert_fail@plt+0x6a9c>
   1828c:	push	{fp, lr}
   18290:	mov	fp, sp
   18294:	sub	sp, sp, #16
   18298:	mov	ip, #1
   1829c:	str	r2, [sp, #4]
   182a0:	str	ip, [sp, #12]
   182a4:	mov	ip, #0
   182a8:	str	ip, [sp]
   182ac:	ldr	ip, [fp, #8]
   182b0:	str	ip, [sp, #8]
   182b4:	bl	182c0 <__assert_fail@plt+0x6b98>
   182b8:	mov	sp, fp
   182bc:	pop	{fp, pc}
   182c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182c4:	add	fp, sp, #28
   182c8:	sub	sp, sp, #44	; 0x2c
   182cc:	mvn	r6, #0
   182d0:	cmp	r3, #0
   182d4:	blt	18568 <__assert_fail@plt+0x6e40>
   182d8:	mov	r4, r3
   182dc:	mov	r9, r2
   182e0:	cmp	r3, r2
   182e4:	bgt	18568 <__assert_fail@plt+0x6e40>
   182e8:	mov	r7, r0
   182ec:	ldr	r0, [fp, #8]
   182f0:	mov	r8, r9
   182f4:	mov	sl, r1
   182f8:	movw	r1, #0
   182fc:	ldr	r6, [r7]
   18300:	movt	r1, #0
   18304:	add	r0, r0, r4
   18308:	cmp	r0, r9
   1830c:	bicle	r8, r0, r0, asr #31
   18310:	movw	r0, #0
   18314:	movt	r0, #0
   18318:	orrs	r5, r1, r0
   1831c:	beq	18328 <__assert_fail@plt+0x6c00>
   18320:	add	r0, r6, #136	; 0x88
   18324:	bl	1144c <pthread_mutex_lock@plt>
   18328:	ldrb	r0, [r7, #28]
   1832c:	ldr	r2, [fp, #16]
   18330:	cmp	r8, r4
   18334:	ubfx	r1, r0, #5, #2
   18338:	str	r6, [sp, #20]
   1833c:	str	r5, [sp, #36]	; 0x24
   18340:	str	r4, [sp, #32]
   18344:	str	sl, [sp, #28]
   18348:	str	r1, [sp, #24]
   1834c:	ble	18378 <__assert_fail@plt+0x6c50>
   18350:	tst	r0, #8
   18354:	bne	18378 <__assert_fail@plt+0x6c50>
   18358:	ldr	r1, [r7, #16]
   1835c:	cmp	r1, #0
   18360:	beq	18378 <__assert_fail@plt+0x6c50>
   18364:	mov	r0, r7
   18368:	mov	r4, r2
   1836c:	bl	16058 <__assert_fail@plt+0x4930>
   18370:	ldrb	r0, [r7, #28]
   18374:	mov	r2, r4
   18378:	mov	sl, #1
   1837c:	mov	r6, #0
   18380:	cmp	r2, #0
   18384:	str	r7, [fp, #-32]	; 0xffffffe0
   18388:	beq	183d4 <__assert_fail@plt+0x6cac>
   1838c:	ands	r1, r0, #16
   18390:	bne	183d4 <__assert_fail@plt+0x6cac>
   18394:	and	r0, r0, #6
   18398:	cmp	r0, #4
   1839c:	bne	183c4 <__assert_fail@plt+0x6c9c>
   183a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   183a4:	ldr	sl, [r2]
   183a8:	ldr	r0, [r0, #24]
   183ac:	cmp	sl, r0
   183b0:	bhi	183cc <__assert_fail@plt+0x6ca4>
   183b4:	cmp	sl, #1
   183b8:	movwlt	r2, #0
   183bc:	movwlt	sl, #1
   183c0:	b	183d0 <__assert_fail@plt+0x6ca8>
   183c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   183c8:	ldr	r0, [r0, #24]
   183cc:	add	sl, r0, #1
   183d0:	mov	r6, r2
   183d4:	lsl	r0, sl, #3
   183d8:	bl	22aa0 <__assert_fail@plt+0x11378>
   183dc:	cmp	r0, #0
   183e0:	beq	18574 <__assert_fail@plt+0x6e4c>
   183e4:	mov	r4, r0
   183e8:	ldr	r0, [fp, #12]
   183ec:	str	r8, [sp]
   183f0:	mov	r2, r9
   183f4:	stmib	sp, {r0, sl}
   183f8:	str	r4, [sp, #12]
   183fc:	ldr	r0, [sp, #24]
   18400:	ldr	r5, [sp, #32]
   18404:	ldr	r1, [sp, #28]
   18408:	str	r0, [sp, #16]
   1840c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18410:	mov	r3, r5
   18414:	bl	16934 <__assert_fail@plt+0x520c>
   18418:	cmp	r0, #0
   1841c:	beq	18430 <__assert_fail@plt+0x6d08>
   18420:	mvn	r6, #1
   18424:	cmp	r0, #1
   18428:	mvneq	r6, #0
   1842c:	b	18548 <__assert_fail@plt+0x6e20>
   18430:	cmp	r6, #0
   18434:	beq	1852c <__assert_fail@plt+0x6e04>
   18438:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1843c:	add	r9, sl, #1
   18440:	ldrb	r0, [r0, #28]
   18444:	ubfx	r0, r0, #1, #2
   18448:	cmp	r0, #1
   1844c:	beq	18498 <__assert_fail@plt+0x6d70>
   18450:	mov	r8, #2
   18454:	cmp	r0, #0
   18458:	bne	184a8 <__assert_fail@plt+0x6d80>
   1845c:	lsl	r8, r9, #2
   18460:	mov	r0, r8
   18464:	bl	22aa0 <__assert_fail@plt+0x11378>
   18468:	mov	r7, #0
   1846c:	cmp	r0, #0
   18470:	str	r0, [r6, #4]
   18474:	beq	18510 <__assert_fail@plt+0x6de8>
   18478:	mov	r0, r8
   1847c:	bl	22aa0 <__assert_fail@plt+0x11378>
   18480:	cmp	r0, #0
   18484:	str	r0, [r6, #8]
   18488:	beq	185c8 <__assert_fail@plt+0x6ea0>
   1848c:	str	r9, [r6]
   18490:	mov	r8, #1
   18494:	b	184a8 <__assert_fail@plt+0x6d80>
   18498:	ldr	r0, [r6]
   1849c:	mov	r8, #1
   184a0:	cmp	r9, r0
   184a4:	bhi	18580 <__assert_fail@plt+0x6e58>
   184a8:	cmp	sl, #1
   184ac:	blt	184dc <__assert_fail@plt+0x6db4>
   184b0:	ldmib	r6, {r1, r2}
   184b4:	add	r0, r4, #4
   184b8:	mov	r3, sl
   184bc:	ldr	r7, [r0, #-4]
   184c0:	subs	r3, r3, #1
   184c4:	str	r7, [r1], #4
   184c8:	ldr	r7, [r0]
   184cc:	add	r0, r0, #8
   184d0:	str	r7, [r2], #4
   184d4:	bne	184bc <__assert_fail@plt+0x6d94>
   184d8:	b	184e0 <__assert_fail@plt+0x6db8>
   184dc:	mov	sl, #0
   184e0:	ldr	r0, [r6]
   184e4:	cmp	sl, r0
   184e8:	bcs	1850c <__assert_fail@plt+0x6de4>
   184ec:	ldmib	r6, {r0, r1}
   184f0:	mvn	r2, #0
   184f4:	str	r2, [r1, sl, lsl #2]
   184f8:	str	r2, [r0, sl, lsl #2]
   184fc:	add	sl, sl, #1
   18500:	ldr	r3, [r6]
   18504:	cmp	sl, r3
   18508:	bcc	184f4 <__assert_fail@plt+0x6dcc>
   1850c:	mov	r7, r8
   18510:	ldr	r1, [fp, #-32]	; 0xffffffe0
   18514:	cmp	r7, #0
   18518:	ldrb	r0, [r1, #28]
   1851c:	and	r0, r0, #249	; 0xf9
   18520:	orr	r0, r0, r7, lsl #1
   18524:	strb	r0, [r1, #28]
   18528:	beq	18544 <__assert_fail@plt+0x6e1c>
   1852c:	ldr	r0, [fp, #20]
   18530:	cmp	r0, #0
   18534:	ldreq	r6, [r4]
   18538:	ldrne	r0, [r4, #4]
   1853c:	subne	r6, r0, r5
   18540:	b	18548 <__assert_fail@plt+0x6e20>
   18544:	mvn	r6, #1
   18548:	ldr	r5, [sp, #36]	; 0x24
   1854c:	mov	r0, r4
   18550:	bl	132d4 <__assert_fail@plt+0x1bac>
   18554:	cmp	r5, #0
   18558:	beq	18568 <__assert_fail@plt+0x6e40>
   1855c:	ldr	r0, [sp, #20]
   18560:	add	r0, r0, #136	; 0x88
   18564:	bl	113a4 <pthread_mutex_unlock@plt>
   18568:	mov	r0, r6
   1856c:	sub	sp, fp, #28
   18570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18574:	ldr	r5, [sp, #36]	; 0x24
   18578:	mvn	r6, #1
   1857c:	b	18554 <__assert_fail@plt+0x6e2c>
   18580:	ldr	r0, [r6, #4]
   18584:	lsl	r1, r9, #2
   18588:	str	r1, [sp, #28]
   1858c:	bl	22ad0 <__assert_fail@plt+0x113a8>
   18590:	mov	r7, #0
   18594:	cmp	r0, #0
   18598:	str	r0, [sp, #24]
   1859c:	beq	18510 <__assert_fail@plt+0x6de8>
   185a0:	ldr	r0, [r6, #8]
   185a4:	ldr	r1, [sp, #28]
   185a8:	bl	22ad0 <__assert_fail@plt+0x113a8>
   185ac:	cmp	r0, #0
   185b0:	beq	185d4 <__assert_fail@plt+0x6eac>
   185b4:	ldr	r1, [sp, #24]
   185b8:	str	r9, [r6]
   185bc:	str	r1, [r6, #4]
   185c0:	str	r0, [r6, #8]
   185c4:	b	184a8 <__assert_fail@plt+0x6d80>
   185c8:	ldr	r0, [r6, #4]
   185cc:	bl	132d4 <__assert_fail@plt+0x1bac>
   185d0:	b	18510 <__assert_fail@plt+0x6de8>
   185d4:	ldr	r0, [sp, #24]
   185d8:	b	185cc <__assert_fail@plt+0x6ea4>
   185dc:	push	{fp, lr}
   185e0:	mov	fp, sp
   185e4:	sub	sp, sp, #16
   185e8:	mov	ip, #0
   185ec:	str	r2, [sp, #4]
   185f0:	str	ip, [sp, #12]
   185f4:	ldr	ip, [fp, #12]
   185f8:	str	ip, [sp, #8]
   185fc:	ldr	ip, [fp, #8]
   18600:	str	ip, [sp]
   18604:	bl	182c0 <__assert_fail@plt+0x6b98>
   18608:	mov	sp, fp
   1860c:	pop	{fp, pc}
   18610:	push	{fp, lr}
   18614:	mov	fp, sp
   18618:	sub	sp, sp, #24
   1861c:	mov	ip, #1
   18620:	str	ip, [sp, #20]
   18624:	mov	ip, #0
   18628:	str	ip, [sp, #8]
   1862c:	ldr	ip, [fp, #20]
   18630:	str	ip, [sp, #16]
   18634:	ldr	ip, [fp, #16]
   18638:	str	ip, [sp, #12]
   1863c:	ldr	ip, [fp, #12]
   18640:	str	ip, [sp, #4]
   18644:	ldr	ip, [fp, #8]
   18648:	str	ip, [sp]
   1864c:	bl	18658 <__assert_fail@plt+0x6f30>
   18650:	mov	sp, fp
   18654:	pop	{fp, pc}
   18658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1865c:	add	fp, sp, #28
   18660:	sub	sp, sp, #20
   18664:	ldr	r4, [fp, #8]
   18668:	mov	r8, r1
   1866c:	mov	r1, r0
   18670:	mov	r6, r2
   18674:	orr	r0, r4, r2
   18678:	ldr	r2, [fp, #24]
   1867c:	orr	r0, r0, r2
   18680:	cmp	r0, #0
   18684:	blt	18738 <__assert_fail@plt+0x7010>
   18688:	adds	sl, r6, r4
   1868c:	bvs	18738 <__assert_fail@plt+0x7010>
   18690:	mov	r5, #0
   18694:	cmp	r4, #1
   18698:	blt	186ec <__assert_fail@plt+0x6fc4>
   1869c:	mov	r9, r3
   186a0:	cmp	r6, #1
   186a4:	blt	186f4 <__assert_fail@plt+0x6fcc>
   186a8:	mov	r0, sl
   186ac:	mov	r5, r1
   186b0:	bl	22aa0 <__assert_fail@plt+0x11378>
   186b4:	cmp	r0, #0
   186b8:	beq	18738 <__assert_fail@plt+0x7010>
   186bc:	mov	r1, r8
   186c0:	mov	r2, r6
   186c4:	mov	r7, r0
   186c8:	bl	11464 <memcpy@plt>
   186cc:	add	r0, r7, r6
   186d0:	mov	r1, r9
   186d4:	mov	r2, r4
   186d8:	bl	11464 <memcpy@plt>
   186dc:	ldr	r2, [fp, #24]
   186e0:	mov	r1, r5
   186e4:	mov	r5, r7
   186e8:	b	186f8 <__assert_fail@plt+0x6fd0>
   186ec:	mov	r7, r8
   186f0:	b	186f8 <__assert_fail@plt+0x6fd0>
   186f4:	mov	r7, r9
   186f8:	add	r6, fp, #12
   186fc:	ldr	r0, [fp, #28]
   18700:	ldm	r6, {r3, r4, r6}
   18704:	str	r4, [sp]
   18708:	stmib	sp, {r2, r6}
   1870c:	str	r0, [sp, #12]
   18710:	mov	r0, r1
   18714:	mov	r1, r7
   18718:	mov	r2, sl
   1871c:	bl	182c0 <__assert_fail@plt+0x6b98>
   18720:	mov	r4, r0
   18724:	mov	r0, r5
   18728:	bl	132d4 <__assert_fail@plt+0x1bac>
   1872c:	mov	r0, r4
   18730:	sub	sp, fp, #28
   18734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18738:	mvn	r0, #1
   1873c:	sub	sp, fp, #28
   18740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18744:	push	{fp, lr}
   18748:	mov	fp, sp
   1874c:	sub	sp, sp, #24
   18750:	mov	ip, #0
   18754:	str	ip, [sp, #20]
   18758:	ldr	ip, [fp, #24]
   1875c:	str	ip, [sp, #16]
   18760:	ldr	ip, [fp, #20]
   18764:	str	ip, [sp, #12]
   18768:	ldr	ip, [fp, #16]
   1876c:	str	ip, [sp, #8]
   18770:	ldr	ip, [fp, #12]
   18774:	str	ip, [sp, #4]
   18778:	ldr	ip, [fp, #8]
   1877c:	str	ip, [sp]
   18780:	bl	18658 <__assert_fail@plt+0x6f30>
   18784:	mov	sp, fp
   18788:	pop	{fp, pc}
   1878c:	ldrb	ip, [r0, #28]
   18790:	cmp	r2, #0
   18794:	bic	ip, ip, #6
   18798:	orrne	ip, ip, #2
   1879c:	strb	ip, [r0, #28]
   187a0:	ldr	r0, [sp]
   187a4:	moveq	r0, r2
   187a8:	cmp	r2, #0
   187ac:	moveq	r3, r2
   187b0:	stm	r1, {r2, r3}
   187b4:	str	r0, [r1, #8]
   187b8:	bx	lr
   187bc:	ldr	r1, [r0, #4]
   187c0:	movw	r2, #255	; 0xff
   187c4:	movt	r2, #4
   187c8:	and	r1, r1, r2
   187cc:	cmp	r1, #3
   187d0:	beq	187e4 <__assert_fail@plt+0x70bc>
   187d4:	cmp	r1, #6
   187d8:	bxne	lr
   187dc:	ldr	r0, [r0]
   187e0:	b	1884c <__assert_fail@plt+0x7124>
   187e4:	ldr	r0, [r0]
   187e8:	b	132d4 <__assert_fail@plt+0x1bac>
   187ec:	push	{r4, sl, fp, lr}
   187f0:	add	fp, sp, #8
   187f4:	mov	r4, r0
   187f8:	ldr	r0, [r0, #24]
   187fc:	bl	132d4 <__assert_fail@plt+0x1bac>
   18800:	ldr	r0, [r4, #36]	; 0x24
   18804:	bl	132d4 <__assert_fail@plt+0x1bac>
   18808:	ldr	r0, [r4, #40]	; 0x28
   1880c:	add	r1, r4, #4
   18810:	cmp	r0, r1
   18814:	beq	18828 <__assert_fail@plt+0x7100>
   18818:	ldr	r0, [r0, #8]
   1881c:	bl	132d4 <__assert_fail@plt+0x1bac>
   18820:	ldr	r0, [r4, #40]	; 0x28
   18824:	bl	132d4 <__assert_fail@plt+0x1bac>
   18828:	ldr	r0, [r4, #12]
   1882c:	bl	132d4 <__assert_fail@plt+0x1bac>
   18830:	ldr	r0, [r4, #48]	; 0x30
   18834:	bl	132d4 <__assert_fail@plt+0x1bac>
   18838:	ldr	r0, [r4, #44]	; 0x2c
   1883c:	bl	132d4 <__assert_fail@plt+0x1bac>
   18840:	mov	r0, r4
   18844:	pop	{r4, sl, fp, lr}
   18848:	b	132d4 <__assert_fail@plt+0x1bac>
   1884c:	push	{r4, sl, fp, lr}
   18850:	add	fp, sp, #8
   18854:	mov	r4, r0
   18858:	ldr	r0, [r0]
   1885c:	bl	132d4 <__assert_fail@plt+0x1bac>
   18860:	ldr	r0, [r4, #4]
   18864:	bl	132d4 <__assert_fail@plt+0x1bac>
   18868:	ldr	r0, [r4, #8]
   1886c:	bl	132d4 <__assert_fail@plt+0x1bac>
   18870:	ldr	r0, [r4, #12]
   18874:	bl	132d4 <__assert_fail@plt+0x1bac>
   18878:	mov	r0, r4
   1887c:	pop	{r4, sl, fp, lr}
   18880:	b	132d4 <__assert_fail@plt+0x1bac>
   18884:	push	{r4, r5, fp, lr}
   18888:	add	fp, sp, #8
   1888c:	ldr	r4, [r0]
   18890:	ldr	r0, [r4, #56]	; 0x38
   18894:	cmp	r0, #0
   18898:	beq	188b0 <__assert_fail@plt+0x7188>
   1889c:	ldr	r5, [r0]
   188a0:	bl	132d4 <__assert_fail@plt+0x1bac>
   188a4:	cmp	r5, #0
   188a8:	mov	r0, r5
   188ac:	bne	1889c <__assert_fail@plt+0x7174>
   188b0:	mov	r0, #31
   188b4:	mov	r5, #0
   188b8:	str	r0, [r4, #64]	; 0x40
   188bc:	str	r5, [r4, #52]	; 0x34
   188c0:	str	r5, [r4, #56]	; 0x38
   188c4:	ldr	r0, [r4, #16]
   188c8:	bl	132d4 <__assert_fail@plt+0x1bac>
   188cc:	str	r5, [r4, #16]
   188d0:	pop	{r4, r5, fp, pc}
   188d4:	push	{r4, sl, fp, lr}
   188d8:	add	fp, sp, #8
   188dc:	mov	r4, r0
   188e0:	ldr	r0, [r0, #8]
   188e4:	bl	132d4 <__assert_fail@plt+0x1bac>
   188e8:	ldr	r0, [r4, #12]
   188ec:	bl	132d4 <__assert_fail@plt+0x1bac>
   188f0:	ldrb	r0, [r4, #75]	; 0x4b
   188f4:	cmp	r0, #0
   188f8:	popeq	{r4, sl, fp, pc}
   188fc:	ldr	r0, [r4, #4]
   18900:	pop	{r4, sl, fp, lr}
   18904:	b	132d4 <__assert_fail@plt+0x1bac>
   18908:	push	{r4, r5, r6, r7, fp, lr}
   1890c:	add	fp, sp, #16
   18910:	mov	r5, r0
   18914:	ldr	r0, [r0, #80]	; 0x50
   18918:	mov	r4, r1
   1891c:	cmp	r0, #2
   18920:	blt	1896c <__assert_fail@plt+0x7244>
   18924:	mov	r6, #12
   18928:	cmn	r4, #-1073741823	; 0xc0000001
   1892c:	bhi	18998 <__assert_fail@plt+0x7270>
   18930:	ldr	r0, [r5, #8]
   18934:	lsl	r7, r4, #2
   18938:	mov	r1, r7
   1893c:	bl	22ad0 <__assert_fail@plt+0x113a8>
   18940:	cmp	r0, #0
   18944:	beq	18998 <__assert_fail@plt+0x7270>
   18948:	str	r0, [r5, #8]
   1894c:	ldr	r0, [r5, #12]
   18950:	cmp	r0, #0
   18954:	beq	1896c <__assert_fail@plt+0x7244>
   18958:	mov	r1, r7
   1895c:	bl	22ad0 <__assert_fail@plt+0x113a8>
   18960:	cmp	r0, #0
   18964:	beq	18998 <__assert_fail@plt+0x7270>
   18968:	str	r0, [r5, #12]
   1896c:	ldrb	r0, [r5, #75]	; 0x4b
   18970:	cmp	r0, #0
   18974:	beq	18990 <__assert_fail@plt+0x7268>
   18978:	ldr	r0, [r5, #4]
   1897c:	mov	r1, r4
   18980:	bl	22ad0 <__assert_fail@plt+0x113a8>
   18984:	cmp	r0, #0
   18988:	beq	189a0 <__assert_fail@plt+0x7278>
   1898c:	str	r0, [r5, #4]
   18990:	mov	r6, #0
   18994:	str	r4, [r5, #36]	; 0x24
   18998:	mov	r0, r6
   1899c:	pop	{r4, r5, r6, r7, fp, pc}
   189a0:	mov	r6, #12
   189a4:	b	18998 <__assert_fail@plt+0x7270>
   189a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189ac:	add	fp, sp, #28
   189b0:	sub	sp, sp, #92	; 0x5c
   189b4:	mov	r4, r0
   189b8:	ldrb	r0, [r0, #74]	; 0x4a
   189bc:	ldr	r2, [r4, #36]	; 0x24
   189c0:	ldr	r1, [r4, #48]	; 0x30
   189c4:	ldr	r5, [r4, #28]
   189c8:	cmp	r2, r1
   189cc:	movgt	r2, r1
   189d0:	cmp	r0, #0
   189d4:	str	r2, [sp, #4]
   189d8:	bne	189f8 <__assert_fail@plt+0x72d0>
   189dc:	mov	r8, r4
   189e0:	ldr	r0, [r8, #64]!	; 0x40
   189e4:	cmp	r0, #0
   189e8:	bne	189f8 <__assert_fail@plt+0x72d0>
   189ec:	ldrb	r0, [r4, #76]	; 0x4c
   189f0:	cmp	r0, #0
   189f4:	beq	18a00 <__assert_fail@plt+0x72d8>
   189f8:	ldr	r7, [r4, #32]
   189fc:	b	18bcc <__assert_fail@plt+0x74a4>
   18a00:	ldr	r0, [sp, #4]
   18a04:	cmp	r0, r5
   18a08:	ble	18a18 <__assert_fail@plt+0x72f0>
   18a0c:	add	r9, r4, #16
   18a10:	mov	sl, r5
   18a14:	b	18a6c <__assert_fail@plt+0x7344>
   18a18:	mov	sl, r5
   18a1c:	mov	r7, r5
   18a20:	b	18cd8 <__assert_fail@plt+0x75b0>
   18a24:	add	r0, r5, #1
   18a28:	cmp	r0, #2
   18a2c:	bcc	18a40 <__assert_fail@plt+0x7318>
   18a30:	ldr	r0, [r4, #36]	; 0x24
   18a34:	ldr	r1, [r4, #48]	; 0x30
   18a38:	cmp	r0, r1
   18a3c:	blt	18bb8 <__assert_fail@plt+0x7490>
   18a40:	ldr	r0, [r4, #4]
   18a44:	cmn	r5, #1
   18a48:	strb	sl, [r0, r7]
   18a4c:	ldr	r0, [r4, #8]
   18a50:	str	sl, [r0, r7, lsl #2]
   18a54:	add	sl, r7, #1
   18a58:	bne	18b9c <__assert_fail@plt+0x7474>
   18a5c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18a60:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18a64:	stm	r9, {r0, r1}
   18a68:	b	18b9c <__assert_fail@plt+0x7474>
   18a6c:	ldr	r7, [r4, #24]
   18a70:	ldr	r5, [r4]
   18a74:	mov	r6, sl
   18a78:	add	r0, r7, sl
   18a7c:	ldrb	sl, [r5, r0]
   18a80:	tst	sl, #128	; 0x80
   18a84:	bne	18ac8 <__assert_fail@plt+0x73a0>
   18a88:	mov	r0, r9
   18a8c:	bl	114a0 <mbsinit@plt>
   18a90:	cmp	r0, #0
   18a94:	beq	18ac8 <__assert_fail@plt+0x73a0>
   18a98:	mov	r0, sl
   18a9c:	bl	116e0 <towupper@plt>
   18aa0:	cmp	r0, #128	; 0x80
   18aa4:	bcs	18ac0 <__assert_fail@plt+0x7398>
   18aa8:	ldr	r1, [r4, #4]
   18aac:	add	sl, r6, #1
   18ab0:	strb	r0, [r1, r6]
   18ab4:	ldr	r1, [r4, #8]
   18ab8:	str	r0, [r1, r6, lsl #2]
   18abc:	b	18b9c <__assert_fail@plt+0x7474>
   18ac0:	ldr	r5, [r4]
   18ac4:	ldr	r7, [r4, #24]
   18ac8:	ldm	r9, {r0, r1}
   18acc:	mov	r3, r9
   18ad0:	str	r0, [fp, #-40]	; 0xffffffd8
   18ad4:	ldr	r0, [sp, #4]
   18ad8:	str	r1, [fp, #-36]	; 0xffffffdc
   18adc:	sub	r2, r0, r6
   18ae0:	add	r0, r5, r7
   18ae4:	mov	r7, r6
   18ae8:	add	r1, r0, r6
   18aec:	add	r0, sp, #12
   18af0:	bl	22ee0 <__assert_fail@plt+0x117b8>
   18af4:	mov	r5, r0
   18af8:	sub	r0, r0, #1
   18afc:	cmn	r0, #4
   18b00:	bhi	18a24 <__assert_fail@plt+0x72fc>
   18b04:	ldr	r0, [sp, #12]
   18b08:	bl	116e0 <towupper@plt>
   18b0c:	mov	r6, r0
   18b10:	ldr	r0, [sp, #12]
   18b14:	cmp	r6, r0
   18b18:	bne	18b38 <__assert_fail@plt+0x7410>
   18b1c:	ldr	r1, [r4]
   18b20:	ldr	r2, [r4, #24]
   18b24:	ldr	r0, [r4, #4]
   18b28:	add	r1, r1, r2
   18b2c:	add	r0, r0, r7
   18b30:	add	r1, r1, r7
   18b34:	b	18b60 <__assert_fail@plt+0x7438>
   18b38:	add	sl, sp, #16
   18b3c:	mov	r1, r6
   18b40:	sub	r2, fp, #40	; 0x28
   18b44:	mov	r0, sl
   18b48:	bl	113d4 <wcrtomb@plt>
   18b4c:	cmp	r5, r0
   18b50:	bne	18bb0 <__assert_fail@plt+0x7488>
   18b54:	ldr	r0, [r4, #4]
   18b58:	mov	r1, sl
   18b5c:	add	r0, r0, r7
   18b60:	mov	r2, r5
   18b64:	bl	11464 <memcpy@plt>
   18b68:	ldr	r0, [r4, #8]
   18b6c:	add	sl, r7, #1
   18b70:	str	r6, [r0, r7, lsl #2]
   18b74:	add	r6, r5, r7
   18b78:	cmp	sl, r6
   18b7c:	bge	18b9c <__assert_fail@plt+0x7474>
   18b80:	add	r0, r0, r7, lsl #2
   18b84:	mvn	r1, #3
   18b88:	add	r2, r1, r5, lsl #2
   18b8c:	add	r0, r0, #4
   18b90:	mov	r1, #255	; 0xff
   18b94:	bl	11620 <memset@plt>
   18b98:	mov	sl, r6
   18b9c:	ldr	r0, [sp, #4]
   18ba0:	mov	r7, sl
   18ba4:	cmp	r0, sl
   18ba8:	bgt	18a6c <__assert_fail@plt+0x7344>
   18bac:	b	18cd8 <__assert_fail@plt+0x75b0>
   18bb0:	mov	sl, r7
   18bb4:	b	18be4 <__assert_fail@plt+0x74bc>
   18bb8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18bbc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18bc0:	mov	sl, r7
   18bc4:	stm	r9, {r0, r1}
   18bc8:	b	18cd8 <__assert_fail@plt+0x75b0>
   18bcc:	ldr	r0, [sp, #4]
   18bd0:	cmp	r5, r0
   18bd4:	bge	18cd4 <__assert_fail@plt+0x75ac>
   18bd8:	add	r8, r4, #64	; 0x40
   18bdc:	add	r9, r4, #16
   18be0:	mov	sl, r5
   18be4:	ldm	r9, {r0, r1}
   18be8:	str	r7, [sp]
   18bec:	str	r0, [fp, #-40]	; 0xffffffd8
   18bf0:	ldr	r0, [sp, #4]
   18bf4:	str	r1, [fp, #-36]	; 0xffffffdc
   18bf8:	sub	r2, r0, sl
   18bfc:	ldr	r0, [r8]
   18c00:	cmp	r0, #0
   18c04:	bne	18cec <__assert_fail@plt+0x75c4>
   18c08:	ldr	r0, [r4]
   18c0c:	ldr	r1, [r4, #24]
   18c10:	add	r0, r0, r1
   18c14:	add	r5, r0, r7
   18c18:	add	r0, sp, #8
   18c1c:	mov	r1, r5
   18c20:	mov	r3, r9
   18c24:	bl	22ee0 <__assert_fail@plt+0x117b8>
   18c28:	sub	r8, r0, #1
   18c2c:	mov	r6, r0
   18c30:	cmn	r8, #4
   18c34:	bhi	18d40 <__assert_fail@plt+0x7618>
   18c38:	ldr	r0, [sp, #8]
   18c3c:	bl	116e0 <towupper@plt>
   18c40:	mov	r7, r0
   18c44:	ldr	r0, [sp, #8]
   18c48:	cmp	r7, r0
   18c4c:	bne	18c5c <__assert_fail@plt+0x7534>
   18c50:	ldr	r0, [r4, #4]
   18c54:	mov	r1, r5
   18c58:	b	18c7c <__assert_fail@plt+0x7554>
   18c5c:	add	r0, sp, #16
   18c60:	sub	r2, fp, #40	; 0x28
   18c64:	mov	r1, r7
   18c68:	bl	113d4 <wcrtomb@plt>
   18c6c:	cmp	r0, r6
   18c70:	bne	18dbc <__assert_fail@plt+0x7694>
   18c74:	ldr	r0, [r4, #4]
   18c78:	add	r1, sp, #16
   18c7c:	add	r0, r0, sl
   18c80:	mov	r2, r6
   18c84:	bl	11464 <memcpy@plt>
   18c88:	ldrb	r0, [r4, #76]	; 0x4c
   18c8c:	cmp	r0, #0
   18c90:	bne	18ed8 <__assert_fail@plt+0x77b0>
   18c94:	ldr	r0, [r4, #8]
   18c98:	add	r5, r6, sl
   18c9c:	add	r1, sl, #1
   18ca0:	cmp	r1, r5
   18ca4:	str	r7, [r0, sl, lsl #2]
   18ca8:	ldr	r7, [sp]
   18cac:	add	r7, r6, r7
   18cb0:	bge	18ccc <__assert_fail@plt+0x75a4>
   18cb4:	add	r0, r0, r1, lsl #2
   18cb8:	mvn	r1, #3
   18cbc:	add	r2, r1, r6, lsl #2
   18cc0:	mov	r1, #255	; 0xff
   18cc4:	bl	11620 <memset@plt>
   18cc8:	b	18bcc <__assert_fail@plt+0x74a4>
   18ccc:	mov	r5, r1
   18cd0:	b	18bcc <__assert_fail@plt+0x74a4>
   18cd4:	mov	sl, r5
   18cd8:	mov	r0, #0
   18cdc:	str	sl, [r4, #28]
   18ce0:	str	r7, [r4, #32]
   18ce4:	sub	sp, fp, #28
   18ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cec:	cmp	r2, #1
   18cf0:	add	r5, sp, #16
   18cf4:	ldrge	r1, [r4, #80]	; 0x50
   18cf8:	cmpge	r1, #1
   18cfc:	blt	18c18 <__assert_fail@plt+0x74f0>
   18d00:	mov	r6, r7
   18d04:	ldr	r7, [r4, #24]
   18d08:	ldr	r3, [r4]
   18d0c:	add	r5, sp, #16
   18d10:	add	r7, r6, r7
   18d14:	add	r3, r3, r7
   18d18:	mov	r7, #0
   18d1c:	ldrb	r6, [r3, r7]
   18d20:	ldrb	r6, [r0, r6]
   18d24:	strb	r6, [r5, r7]
   18d28:	add	r7, r7, #1
   18d2c:	cmp	r7, r2
   18d30:	bge	18c18 <__assert_fail@plt+0x74f0>
   18d34:	cmp	r7, r1
   18d38:	blt	18d1c <__assert_fail@plt+0x75f4>
   18d3c:	b	18c18 <__assert_fail@plt+0x74f0>
   18d40:	add	r0, r6, #1
   18d44:	cmp	r0, #2
   18d48:	bcc	18d5c <__assert_fail@plt+0x7634>
   18d4c:	ldr	r0, [r4, #36]	; 0x24
   18d50:	ldr	r1, [r4, #48]	; 0x30
   18d54:	cmp	r0, r1
   18d58:	blt	18efc <__assert_fail@plt+0x77d4>
   18d5c:	ldr	r2, [r4, #24]
   18d60:	ldr	r7, [sp]
   18d64:	ldr	r0, [r4]
   18d68:	ldr	r1, [r4, #64]	; 0x40
   18d6c:	add	r5, sl, #1
   18d70:	add	r2, r2, r7
   18d74:	cmp	r1, #0
   18d78:	ldrb	r0, [r0, r2]
   18d7c:	ldrbne	r0, [r1, r0]
   18d80:	ldr	r1, [r4, #4]
   18d84:	strb	r0, [r1, sl]
   18d88:	ldrb	r1, [r4, #76]	; 0x4c
   18d8c:	cmp	r1, #0
   18d90:	ldrne	r1, [r4, #12]
   18d94:	strne	r7, [r1, sl, lsl #2]
   18d98:	add	r7, r7, #1
   18d9c:	cmn	r6, #1
   18da0:	ldr	r1, [r4, #8]
   18da4:	str	r0, [r1, sl, lsl #2]
   18da8:	bne	18bcc <__assert_fail@plt+0x74a4>
   18dac:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18db0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18db4:	stm	r9, {r0, r1}
   18db8:	b	18bcc <__assert_fail@plt+0x74a4>
   18dbc:	mov	r2, r0
   18dc0:	cmn	r0, #1
   18dc4:	beq	18c50 <__assert_fail@plt+0x7528>
   18dc8:	ldr	r1, [r4, #36]	; 0x24
   18dcc:	add	r5, r2, sl
   18dd0:	cmp	r5, r1
   18dd4:	bhi	18efc <__assert_fail@plt+0x77d4>
   18dd8:	ldr	r0, [r4, #12]
   18ddc:	cmp	r0, #0
   18de0:	bne	18e00 <__assert_fail@plt+0x76d8>
   18de4:	lsl	r0, r1, #2
   18de8:	mov	r9, r2
   18dec:	bl	22aa0 <__assert_fail@plt+0x11378>
   18df0:	mov	r2, r9
   18df4:	cmp	r0, #0
   18df8:	str	r0, [r4, #12]
   18dfc:	beq	18f10 <__assert_fail@plt+0x77e8>
   18e00:	ldrb	r1, [r4, #76]	; 0x4c
   18e04:	cmp	r1, #0
   18e08:	bne	18e30 <__assert_fail@plt+0x7708>
   18e0c:	cmp	sl, #0
   18e10:	beq	18e28 <__assert_fail@plt+0x7700>
   18e14:	mov	r1, #0
   18e18:	str	r1, [r0, r1, lsl #2]
   18e1c:	add	r1, r1, #1
   18e20:	cmp	sl, r1
   18e24:	bne	18e18 <__assert_fail@plt+0x76f0>
   18e28:	mov	r0, #1
   18e2c:	strb	r0, [r4, #76]	; 0x4c
   18e30:	ldr	r0, [r4, #4]
   18e34:	add	r1, sp, #16
   18e38:	mov	r9, r2
   18e3c:	add	r0, r0, sl
   18e40:	bl	11464 <memcpy@plt>
   18e44:	ldr	r1, [r4, #8]
   18e48:	ldr	r3, [sp]
   18e4c:	mov	lr, r9
   18e50:	cmp	r9, #2
   18e54:	str	r7, [r1, sl, lsl #2]
   18e58:	ldr	r0, [r4, #12]
   18e5c:	str	r3, [r0, sl, lsl #2]
   18e60:	bcc	18e98 <__assert_fail@plt+0x7770>
   18e64:	add	r0, r0, sl, lsl #2
   18e68:	add	r1, r1, sl, lsl #2
   18e6c:	mov	r2, #1
   18e70:	mvn	ip, #0
   18e74:	cmp	r2, r6
   18e78:	mov	r7, r8
   18e7c:	movcc	r7, r2
   18e80:	add	r7, r7, r3
   18e84:	str	r7, [r0, r2, lsl #2]
   18e88:	str	ip, [r1, r2, lsl #2]
   18e8c:	add	r2, r2, #1
   18e90:	cmp	lr, r2
   18e94:	bne	18e74 <__assert_fail@plt+0x774c>
   18e98:	ldr	r0, [r4, #48]	; 0x30
   18e9c:	ldr	r2, [r4, #52]	; 0x34
   18ea0:	sub	r1, lr, r6
   18ea4:	mov	r7, r3
   18ea8:	add	r7, r6, r7
   18eac:	add	r0, r0, r1
   18eb0:	cmp	r2, r3
   18eb4:	str	r0, [r4, #48]	; 0x30
   18eb8:	ldrgt	r2, [r4, #56]	; 0x38
   18ebc:	addgt	r1, r2, r1
   18ec0:	strgt	r1, [r4, #56]	; 0x38
   18ec4:	ldr	r1, [r4, #36]	; 0x24
   18ec8:	cmp	r1, r0
   18ecc:	movgt	r1, r0
   18ed0:	str	r1, [sp, #4]
   18ed4:	b	18bcc <__assert_fail@plt+0x74a4>
   18ed8:	ldr	r0, [r4, #12]
   18edc:	ldr	r1, [sp]
   18ee0:	mov	r2, r6
   18ee4:	add	r0, r0, sl, lsl #2
   18ee8:	str	r1, [r0], #4
   18eec:	add	r1, r1, #1
   18ef0:	subs	r2, r2, #1
   18ef4:	bne	18ee8 <__assert_fail@plt+0x77c0>
   18ef8:	b	18c94 <__assert_fail@plt+0x756c>
   18efc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18f00:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18f04:	stm	r9, {r0, r1}
   18f08:	ldr	r7, [sp]
   18f0c:	b	18cd8 <__assert_fail@plt+0x75b0>
   18f10:	mov	r0, #12
   18f14:	b	18ce4 <__assert_fail@plt+0x75bc>
   18f18:	push	{r4, r5, r6, sl, fp, lr}
   18f1c:	add	fp, sp, #16
   18f20:	mov	r4, r0
   18f24:	ldr	r5, [r0, #28]
   18f28:	ldr	r6, [r0, #36]	; 0x24
   18f2c:	ldr	r0, [r0, #48]	; 0x30
   18f30:	cmp	r6, r0
   18f34:	movgt	r6, r0
   18f38:	cmp	r5, r6
   18f3c:	bge	18f78 <__assert_fail@plt+0x7850>
   18f40:	ldr	r0, [r4]
   18f44:	ldr	r2, [r4, #24]
   18f48:	ldr	r1, [r4, #64]	; 0x40
   18f4c:	add	r0, r0, r2
   18f50:	cmp	r1, #0
   18f54:	ldrb	r0, [r0, r5]
   18f58:	ldrbne	r0, [r1, r0]
   18f5c:	bl	11698 <toupper@plt>
   18f60:	ldr	r1, [r4, #4]
   18f64:	strb	r0, [r1, r5]
   18f68:	add	r5, r5, #1
   18f6c:	cmp	r5, r6
   18f70:	blt	18f40 <__assert_fail@plt+0x7818>
   18f74:	mov	r5, r6
   18f78:	str	r5, [r4, #28]
   18f7c:	str	r5, [r4, #32]
   18f80:	pop	{r4, r5, r6, sl, fp, pc}
   18f84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f88:	add	fp, sp, #28
   18f8c:	sub	sp, sp, #68	; 0x44
   18f90:	mov	r4, r0
   18f94:	ldr	r6, [r0, #28]
   18f98:	ldr	r7, [r0, #36]	; 0x24
   18f9c:	ldr	r0, [r0, #48]	; 0x30
   18fa0:	cmp	r7, r0
   18fa4:	movgt	r7, r0
   18fa8:	cmp	r7, r6
   18fac:	ble	1914c <__assert_fail@plt+0x7a24>
   18fb0:	add	r8, r4, #16
   18fb4:	mov	r5, sp
   18fb8:	ldm	r8, {r9, sl}
   18fbc:	ldr	r0, [r4, #64]	; 0x40
   18fc0:	sub	r2, r7, r6
   18fc4:	cmp	r0, #0
   18fc8:	bne	19098 <__assert_fail@plt+0x7970>
   18fcc:	ldr	r0, [r4]
   18fd0:	ldr	r1, [r4, #24]
   18fd4:	add	r0, r0, r1
   18fd8:	add	r1, r0, r6
   18fdc:	mov	r0, r5
   18fe0:	mov	r3, r8
   18fe4:	bl	22ee0 <__assert_fail@plt+0x117b8>
   18fe8:	add	r1, r0, #1
   18fec:	cmp	r1, #2
   18ff0:	bcc	1900c <__assert_fail@plt+0x78e4>
   18ff4:	cmn	r0, #2
   18ff8:	bne	19048 <__assert_fail@plt+0x7920>
   18ffc:	ldr	r0, [r4, #36]	; 0x24
   19000:	ldr	r1, [r4, #48]	; 0x30
   19004:	cmp	r0, r1
   19008:	blt	19148 <__assert_fail@plt+0x7a20>
   1900c:	ldr	r1, [r4, #24]
   19010:	ldr	r0, [r4]
   19014:	mov	r2, sl
   19018:	mov	sl, r5
   1901c:	add	r1, r1, r6
   19020:	ldrb	r1, [r0, r1]
   19024:	str	r1, [sp]
   19028:	ldr	r0, [r4, #64]	; 0x40
   1902c:	cmp	r0, #0
   19030:	ldrbne	r1, [r0, r1]
   19034:	mov	r0, #1
   19038:	strne	r1, [sp]
   1903c:	str	r9, [r8]
   19040:	str	r2, [r8, #4]
   19044:	b	19050 <__assert_fail@plt+0x7928>
   19048:	ldr	r1, [sp]
   1904c:	mov	sl, r5
   19050:	ldr	r3, [r4, #8]
   19054:	add	r5, r0, r6
   19058:	str	r1, [r3, r6, lsl #2]
   1905c:	add	r1, r6, #1
   19060:	cmp	r1, r5
   19064:	bge	19084 <__assert_fail@plt+0x795c>
   19068:	mvn	r1, #3
   1906c:	add	r2, r1, r0, lsl #2
   19070:	add	r0, r3, r6, lsl #2
   19074:	mov	r1, #255	; 0xff
   19078:	add	r0, r0, #4
   1907c:	bl	11620 <memset@plt>
   19080:	mov	r1, r5
   19084:	cmp	r7, r1
   19088:	mov	r6, r1
   1908c:	mov	r5, sl
   19090:	bgt	18fb8 <__assert_fail@plt+0x7890>
   19094:	b	19150 <__assert_fail@plt+0x7a28>
   19098:	cmp	r2, #1
   1909c:	add	r1, sp, #4
   190a0:	blt	18fdc <__assert_fail@plt+0x78b4>
   190a4:	ldr	r1, [r4, #80]	; 0x50
   190a8:	cmp	r1, #1
   190ac:	add	r1, sp, #4
   190b0:	blt	18fdc <__assert_fail@plt+0x78b4>
   190b4:	ldm	r4, {r1, r3}
   190b8:	mov	lr, r5
   190bc:	ldr	r5, [r4, #24]
   190c0:	cmp	r2, #2
   190c4:	add	r5, r6, r5
   190c8:	ldrb	r1, [r1, r5]
   190cc:	mov	r5, lr
   190d0:	ldrb	r0, [r0, r1]
   190d4:	add	r1, sp, #4
   190d8:	strb	r0, [r3, r6]
   190dc:	strb	r0, [sp, #4]
   190e0:	blt	18fdc <__assert_fail@plt+0x78b4>
   190e4:	ldr	r0, [r4, #80]	; 0x50
   190e8:	add	r1, sp, #4
   190ec:	cmp	r0, #2
   190f0:	blt	18fdc <__assert_fail@plt+0x78b4>
   190f4:	mov	r0, #1
   190f8:	ldm	r4, {r1, ip}
   190fc:	ldr	r5, [r4, #24]
   19100:	ldr	r3, [r4, #64]	; 0x40
   19104:	add	r1, r1, r5
   19108:	add	r1, r1, r6
   1910c:	ldrb	r1, [r1, r0]
   19110:	ldrb	r1, [r3, r1]
   19114:	add	r3, ip, r6
   19118:	strb	r1, [r3, r0]
   1911c:	add	r3, sp, #4
   19120:	strb	r1, [r3, r0]
   19124:	add	r0, r0, #1
   19128:	cmp	r0, r2
   1912c:	bge	1913c <__assert_fail@plt+0x7a14>
   19130:	ldr	r1, [r4, #80]	; 0x50
   19134:	cmp	r0, r1
   19138:	blt	190f8 <__assert_fail@plt+0x79d0>
   1913c:	add	r1, sp, #4
   19140:	mov	r5, lr
   19144:	b	18fdc <__assert_fail@plt+0x78b4>
   19148:	stm	r8, {r9, sl}
   1914c:	mov	r1, r6
   19150:	str	r1, [r4, #28]
   19154:	str	r1, [r4, #32]
   19158:	sub	sp, fp, #28
   1915c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19160:	ldr	ip, [r0, #36]	; 0x24
   19164:	ldr	r3, [r0, #48]	; 0x30
   19168:	ldr	r1, [r0, #28]
   1916c:	cmp	ip, r3
   19170:	movgt	ip, r3
   19174:	cmp	r1, ip
   19178:	bge	191b4 <__assert_fail@plt+0x7a8c>
   1917c:	push	{r4, sl, fp, lr}
   19180:	add	fp, sp, #8
   19184:	ldm	r0, {r3, lr}
   19188:	ldr	r2, [r0, #24]
   1918c:	ldr	r4, [r0, #64]	; 0x40
   19190:	add	r2, r3, r2
   19194:	ldrb	r2, [r2, r1]
   19198:	ldrb	r2, [r4, r2]
   1919c:	strb	r2, [lr, r1]
   191a0:	add	r1, r1, #1
   191a4:	cmp	r1, ip
   191a8:	blt	19184 <__assert_fail@plt+0x7a5c>
   191ac:	mov	r1, ip
   191b0:	pop	{r4, sl, fp, lr}
   191b4:	str	r1, [r0, #28]
   191b8:	str	r1, [r0, #32]
   191bc:	bx	lr
   191c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191c4:	add	fp, sp, #28
   191c8:	sub	sp, sp, #28
   191cc:	ldr	r9, [r1]
   191d0:	mov	r5, r0
   191d4:	ldr	r8, [fp, #12]
   191d8:	mov	r6, r2
   191dc:	str	r1, [sp, #12]
   191e0:	str	r3, [sp, #16]
   191e4:	ldr	r0, [r9, #84]	; 0x54
   191e8:	str	r8, [sp, #4]
   191ec:	str	r0, [sp, #8]
   191f0:	ldr	r0, [fp, #8]
   191f4:	str	r0, [sp]
   191f8:	mov	r0, r5
   191fc:	bl	199fc <__assert_fail@plt+0x82d4>
   19200:	mov	r4, r0
   19204:	cmp	r0, #0
   19208:	bne	19218 <__assert_fail@plt+0x7af0>
   1920c:	ldr	r0, [r8]
   19210:	cmp	r0, #0
   19214:	bne	19308 <__assert_fail@plt+0x7be0>
   19218:	ldr	r0, [sp, #16]
   1921c:	ldr	r8, [fp, #8]
   19220:	mov	r7, #10
   19224:	orr	sl, r0, #8388608	; 0x800000
   19228:	ldrb	r0, [r6, #4]
   1922c:	cmp	r0, #10
   19230:	bne	1930c <__assert_fail@plt+0x7be4>
   19234:	mov	r0, r6
   19238:	mov	r1, r5
   1923c:	mov	r2, sl
   19240:	bl	19370 <__assert_fail@plt+0x7c48>
   19244:	ldr	r1, [r5, #40]	; 0x28
   19248:	mov	r2, #0
   1924c:	add	r0, r1, r0
   19250:	str	r0, [r5, #40]	; 0x28
   19254:	ldrb	r0, [r6, #4]
   19258:	orr	r1, r0, #8
   1925c:	cmp	r1, #10
   19260:	bne	19290 <__assert_fail@plt+0x7b68>
   19264:	mov	r0, #0
   19268:	str	r7, [sp, #24]
   1926c:	mov	r1, r4
   19270:	add	r3, sp, #20
   19274:	str	r0, [sp, #20]
   19278:	mov	r0, r9
   1927c:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   19280:	mov	r4, r0
   19284:	cmp	r0, #0
   19288:	bne	19228 <__assert_fail@plt+0x7b00>
   1928c:	b	192fc <__assert_fail@plt+0x7bd4>
   19290:	cmp	r8, #0
   19294:	beq	192a0 <__assert_fail@plt+0x7b78>
   19298:	cmp	r0, #9
   1929c:	beq	19264 <__assert_fail@plt+0x7b3c>
   192a0:	ldr	r0, [sp, #8]
   192a4:	ldr	r7, [r9, #84]	; 0x54
   192a8:	ldr	r1, [sp, #12]
   192ac:	ldr	r3, [sp, #16]
   192b0:	mov	r2, r6
   192b4:	str	r0, [r9, #84]	; 0x54
   192b8:	str	r8, [sp]
   192bc:	ldr	r8, [fp, #12]
   192c0:	mov	r0, r5
   192c4:	str	r8, [sp, #4]
   192c8:	bl	199fc <__assert_fail@plt+0x82d4>
   192cc:	mov	r2, r0
   192d0:	cmp	r0, #0
   192d4:	bne	192e4 <__assert_fail@plt+0x7bbc>
   192d8:	ldr	r0, [r8]
   192dc:	cmp	r0, #0
   192e0:	bne	19318 <__assert_fail@plt+0x7bf0>
   192e4:	ldr	r0, [r9, #84]	; 0x54
   192e8:	ldr	r8, [fp, #8]
   192ec:	orr	r0, r0, r7
   192f0:	mov	r7, #10
   192f4:	str	r0, [r9, #84]	; 0x54
   192f8:	b	19264 <__assert_fail@plt+0x7b3c>
   192fc:	ldr	r1, [fp, #12]
   19300:	mov	r0, #12
   19304:	str	r0, [r1]
   19308:	mov	r4, #0
   1930c:	mov	r0, r4
   19310:	sub	sp, fp, #28
   19314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19318:	cmp	r4, #0
   1931c:	beq	19308 <__assert_fail@plt+0x7be0>
   19320:	mov	r5, r4
   19324:	ldr	r4, [r4, #4]
   19328:	cmp	r4, #0
   1932c:	bne	19320 <__assert_fail@plt+0x7bf8>
   19330:	ldr	r4, [r5, #8]
   19334:	cmp	r4, #0
   19338:	bne	19320 <__assert_fail@plt+0x7bf8>
   1933c:	add	r0, r5, #20
   19340:	bl	187bc <__assert_fail@plt+0x7094>
   19344:	ldr	r0, [r5]
   19348:	cmp	r0, #0
   1934c:	beq	19308 <__assert_fail@plt+0x7be0>
   19350:	ldr	r4, [r0, #8]
   19354:	cmp	r4, r5
   19358:	mov	r5, r0
   1935c:	beq	1933c <__assert_fail@plt+0x7c14>
   19360:	cmp	r4, #0
   19364:	mov	r5, r0
   19368:	beq	1933c <__assert_fail@plt+0x7c14>
   1936c:	b	19320 <__assert_fail@plt+0x7bf8>
   19370:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19374:	add	fp, sp, #24
   19378:	sub	sp, sp, #8
   1937c:	mov	r9, r0
   19380:	mov	r7, r1
   19384:	ldr	r0, [r1, #40]	; 0x28
   19388:	ldr	r1, [r1, #56]	; 0x38
   1938c:	cmp	r1, r0
   19390:	ble	19478 <__assert_fail@plt+0x7d50>
   19394:	ldr	r1, [r7, #4]
   19398:	mov	r5, r9
   1939c:	mov	r8, r2
   193a0:	ldrb	r6, [r1, r0]
   193a4:	strb	r6, [r5], #4
   193a8:	ldr	r0, [r5]
   193ac:	bic	r1, r0, #6291456	; 0x600000
   193b0:	str	r1, [r5]
   193b4:	ldr	r3, [r7, #80]	; 0x50
   193b8:	cmp	r3, #2
   193bc:	blt	193e0 <__assert_fail@plt+0x7cb8>
   193c0:	ldr	r2, [r7, #28]
   193c4:	ldr	r1, [r7, #40]	; 0x28
   193c8:	cmp	r1, r2
   193cc:	beq	193e0 <__assert_fail@plt+0x7cb8>
   193d0:	ldr	r2, [r7, #8]
   193d4:	ldr	r1, [r2, r1, lsl #2]
   193d8:	cmn	r1, #1
   193dc:	beq	19734 <__assert_fail@plt+0x800c>
   193e0:	movw	r1, #65280	; 0xff00
   193e4:	cmp	r6, #92	; 0x5c
   193e8:	movt	r1, #65439	; 0xff9f
   193ec:	bne	19488 <__assert_fail@plt+0x7d60>
   193f0:	ldr	r6, [r7, #40]	; 0x28
   193f4:	ldr	r4, [r7, #48]	; 0x30
   193f8:	add	r2, r6, #1
   193fc:	cmp	r2, r4
   19400:	bge	194dc <__assert_fail@plt+0x7db4>
   19404:	ldrb	r4, [r7, #75]	; 0x4b
   19408:	cmp	r4, #0
   1940c:	bne	1998c <__assert_fail@plt+0x8264>
   19410:	ldr	r3, [r7, #4]
   19414:	ldrb	r6, [r3, r2]
   19418:	and	r0, r0, r1
   1941c:	strb	r6, [r9]
   19420:	orr	r4, r0, #1
   19424:	str	r4, [r9, #4]
   19428:	ldr	r0, [r7, #80]	; 0x50
   1942c:	cmp	r0, #2
   19430:	blt	195ec <__assert_fail@plt+0x7ec4>
   19434:	ldr	r0, [r7, #8]
   19438:	ldr	r1, [r7, #40]	; 0x28
   1943c:	add	r0, r0, r1, lsl #2
   19440:	ldr	r4, [r0, #4]
   19444:	mov	r0, r4
   19448:	bl	11608 <iswalnum@plt>
   1944c:	sub	r1, r4, #95	; 0x5f
   19450:	cmp	r0, #0
   19454:	clz	r1, r1
   19458:	movwne	r0, #1
   1945c:	lsr	r1, r1, #5
   19460:	orr	r0, r1, r0
   19464:	ldr	r1, [r5]
   19468:	bic	r1, r1, #4194304	; 0x400000
   1946c:	orr	r0, r1, r0, lsl #22
   19470:	uxtb	r1, r6
   19474:	b	19610 <__assert_fail@plt+0x7ee8>
   19478:	mov	r0, #2
   1947c:	mov	r4, #0
   19480:	strb	r0, [r9, #4]
   19484:	b	19960 <__assert_fail@plt+0x8238>
   19488:	and	r0, r0, r1
   1948c:	orr	r4, r0, #1
   19490:	str	r4, [r5]
   19494:	ldr	r0, [r7, #80]	; 0x50
   19498:	cmp	r0, #2
   1949c:	blt	194e8 <__assert_fail@plt+0x7dc0>
   194a0:	ldr	r0, [r7, #8]
   194a4:	ldr	r1, [r7, #40]	; 0x28
   194a8:	ldr	r4, [r0, r1, lsl #2]
   194ac:	mov	r0, r4
   194b0:	bl	11608 <iswalnum@plt>
   194b4:	sub	r1, r4, #95	; 0x5f
   194b8:	cmp	r0, #0
   194bc:	clz	r1, r1
   194c0:	movwne	r0, #1
   194c4:	lsr	r1, r1, #5
   194c8:	orr	r0, r1, r0
   194cc:	ldr	r1, [r5]
   194d0:	bic	r1, r1, #4194304	; 0x400000
   194d4:	orr	r0, r1, r0, lsl #22
   194d8:	b	19508 <__assert_fail@plt+0x7de0>
   194dc:	and	r0, r0, r1
   194e0:	orr	r0, r0, #36	; 0x24
   194e4:	b	19748 <__assert_fail@plt+0x8020>
   194e8:	bl	115b4 <__ctype_b_loc@plt>
   194ec:	ldr	r0, [r0]
   194f0:	cmp	r6, #95	; 0x5f
   194f4:	add	r0, r0, r6, lsl #1
   194f8:	ldrh	r0, [r0]
   194fc:	ubfx	r0, r0, #3, #1
   19500:	movweq	r0, #1
   19504:	orr	r0, r4, r0, lsl #22
   19508:	mov	r4, #1
   1950c:	cmp	r6, #62	; 0x3e
   19510:	str	r0, [r5]
   19514:	bgt	195b0 <__assert_fail@plt+0x7e88>
   19518:	sub	r1, r6, #36	; 0x24
   1951c:	cmp	r1, #10
   19520:	bhi	197a4 <__assert_fail@plt+0x807c>
   19524:	add	r2, pc, #0
   19528:	ldr	pc, [r2, r1, lsl #2]
   1952c:	andeq	r9, r1, r8, asr r5
   19530:	andeq	r9, r1, r0, ror #18
   19534:	andeq	r9, r1, r0, ror #18
   19538:	andeq	r9, r1, r0, ror #18
   1953c:			; <UNDEFINED> instruction: 0x000197b8
   19540:	andeq	r9, r1, r8, asr #15
   19544:	ldrdeq	r9, [r1], -r8
   19548:	andeq	r9, r1, r0, ror #15
   1954c:	andeq	r9, r1, r0, ror #18
   19550:	andeq	r9, r1, r0, ror #18
   19554:	strdeq	r9, [r1], -r0
   19558:	tst	r8, #8
   1955c:	bne	195a8 <__assert_fail@plt+0x7e80>
   19560:	ldr	r1, [r7, #40]	; 0x28
   19564:	ldr	r2, [r7, #48]	; 0x30
   19568:	add	r1, r1, #1
   1956c:	cmp	r1, r2
   19570:	beq	195a8 <__assert_fail@plt+0x7e80>
   19574:	str	r1, [r7, #40]	; 0x28
   19578:	mov	r0, sp
   1957c:	mov	r1, r7
   19580:	mov	r2, r8
   19584:	bl	19370 <__assert_fail@plt+0x7c48>
   19588:	ldr	r0, [r7, #40]	; 0x28
   1958c:	sub	r0, r0, #1
   19590:	str	r0, [r7, #40]	; 0x28
   19594:	ldrb	r0, [sp, #4]
   19598:	sub	r0, r0, #9
   1959c:	cmp	r0, #1
   195a0:	bhi	19960 <__assert_fail@plt+0x8238>
   195a4:	ldr	r0, [r5]
   195a8:	mov	r1, #32
   195ac:	b	195e4 <__assert_fail@plt+0x7ebc>
   195b0:	cmp	r6, #122	; 0x7a
   195b4:	bgt	1970c <__assert_fail@plt+0x7fe4>
   195b8:	cmp	r6, #63	; 0x3f
   195bc:	beq	197f8 <__assert_fail@plt+0x80d0>
   195c0:	cmp	r6, #91	; 0x5b
   195c4:	beq	19808 <__assert_fail@plt+0x80e0>
   195c8:	cmp	r6, #94	; 0x5e
   195cc:	bne	19960 <__assert_fail@plt+0x8238>
   195d0:	movw	r1, #8
   195d4:	movt	r1, #128	; 0x80
   195d8:	tst	r8, r1
   195dc:	beq	19850 <__assert_fail@plt+0x8128>
   195e0:	mov	r1, #16
   195e4:	mov	r2, #12
   195e8:	b	196fc <__assert_fail@plt+0x7fd4>
   195ec:	bl	115b4 <__ctype_b_loc@plt>
   195f0:	ldr	r0, [r0]
   195f4:	uxtb	r1, r6
   195f8:	cmp	r1, #95	; 0x5f
   195fc:	add	r0, r0, r1, lsl #1
   19600:	ldrh	r0, [r0]
   19604:	ubfx	r0, r0, #3, #1
   19608:	movweq	r0, #1
   1960c:	orr	r0, r4, r0, lsl #22
   19610:	uxtb	r2, r6
   19614:	mov	r4, #2
   19618:	str	r0, [r5]
   1961c:	cmp	r2, #95	; 0x5f
   19620:	bgt	19754 <__assert_fail@plt+0x802c>
   19624:	sub	r3, r2, #39	; 0x27
   19628:	cmp	r3, #44	; 0x2c
   1962c:	bhi	1987c <__assert_fail@plt+0x8154>
   19630:	add	r2, pc, #0
   19634:	ldr	pc, [r2, r3, lsl #2]
   19638:	andeq	r9, r1, r4, ror #17
   1963c:	strdeq	r9, [r1], -r4
   19640:	andeq	r9, r1, r0, lsl #18
   19644:	andeq	r9, r1, r0, ror #18
   19648:	andeq	r9, r1, ip, lsl #18
   1964c:	andeq	r9, r1, r0, ror #18
   19650:	andeq	r9, r1, r0, ror #18
   19654:	andeq	r9, r1, r0, ror #18
   19658:	andeq	r9, r1, r0, ror #18
   1965c:	andeq	r9, r1, r0, ror #18
   19660:	andeq	r9, r1, ip, ror #13
   19664:	andeq	r9, r1, ip, ror #13
   19668:	andeq	r9, r1, ip, ror #13
   1966c:	andeq	r9, r1, ip, ror #13
   19670:	andeq	r9, r1, ip, ror #13
   19674:	andeq	r9, r1, ip, ror #13
   19678:	andeq	r9, r1, ip, ror #13
   1967c:	andeq	r9, r1, ip, ror #13
   19680:	andeq	r9, r1, ip, ror #13
   19684:	andeq	r9, r1, r0, ror #18
   19688:	andeq	r9, r1, r0, ror #18
   1968c:	andeq	r9, r1, r4, lsr #18
   19690:	andeq	r9, r1, r0, ror #18
   19694:	andeq	r9, r1, r4, lsr r9
   19698:	andeq	r9, r1, r4, asr #18
   1969c:	andeq	r9, r1, r0, ror #18
   196a0:	andeq	r9, r1, r0, ror #18
   196a4:	andeq	r9, r1, ip, ror #18
   196a8:	andeq	r9, r1, r0, ror #18
   196ac:	andeq	r9, r1, r0, ror #18
   196b0:	andeq	r9, r1, r0, ror #18
   196b4:	andeq	r9, r1, r0, ror #18
   196b8:	andeq	r9, r1, r0, ror #18
   196bc:	andeq	r9, r1, r0, ror #18
   196c0:	andeq	r9, r1, r0, ror #18
   196c4:	andeq	r9, r1, r0, ror #18
   196c8:	andeq	r9, r1, r0, ror #18
   196cc:	andeq	r9, r1, r0, ror #18
   196d0:	andeq	r9, r1, r0, ror #18
   196d4:	andeq	r9, r1, r0, ror #18
   196d8:	andeq	r9, r1, r0, ror #18
   196dc:	andeq	r9, r1, r0, ror #18
   196e0:	andeq	r9, r1, r0, ror #18
   196e4:	andeq	r9, r1, r0, ror #18
   196e8:	andeq	r9, r1, ip, ror r9
   196ec:	tst	r8, #16384	; 0x4000
   196f0:	bne	19960 <__assert_fail@plt+0x8238>
   196f4:	sub	r1, r1, #49	; 0x31
   196f8:	mov	r2, #4
   196fc:	bfi	r0, r2, #0, #8
   19700:	str	r1, [r9]
   19704:	str	r0, [r9, #4]
   19708:	b	19960 <__assert_fail@plt+0x8238>
   1970c:	cmp	r6, #123	; 0x7b
   19710:	beq	19810 <__assert_fail@plt+0x80e8>
   19714:	cmp	r6, #124	; 0x7c
   19718:	beq	19820 <__assert_fail@plt+0x80f8>
   1971c:	cmp	r6, #125	; 0x7d
   19720:	bne	19960 <__assert_fail@plt+0x8238>
   19724:	and	r1, r8, #4608	; 0x1200
   19728:	cmp	r1, #4608	; 0x1200
   1972c:	beq	198cc <__assert_fail@plt+0x81a4>
   19730:	b	19960 <__assert_fail@plt+0x8238>
   19734:	movw	r1, #65280	; 0xff00
   19738:	movt	r1, #65439	; 0xff9f
   1973c:	and	r0, r0, r1
   19740:	orr	r0, r0, #1
   19744:	orr	r0, r0, #2097152	; 0x200000
   19748:	str	r0, [r5]
   1974c:	mov	r4, #1
   19750:	b	19960 <__assert_fail@plt+0x8238>
   19754:	sub	r1, r2, #115	; 0x73
   19758:	cmp	r1, #10
   1975c:	bhi	19834 <__assert_fail@plt+0x810c>
   19760:	add	r2, pc, #0
   19764:	ldr	pc, [r2, r1, lsl #2]
   19768:	muleq	r1, r4, r7
   1976c:	andeq	r9, r1, r0, ror #18
   19770:	andeq	r9, r1, r0, ror #18
   19774:	andeq	r9, r1, r0, ror #18
   19778:	muleq	r1, r0, r8
   1977c:	andeq	r9, r1, r0, ror #18
   19780:	andeq	r9, r1, r0, ror #18
   19784:	andeq	r9, r1, r0, ror #18
   19788:	andeq	r9, r1, r0, lsr #17
   1978c:			; <UNDEFINED> instruction: 0x000198b4
   19790:	andeq	r9, r1, r0, asr #17
   19794:	tst	r8, #524288	; 0x80000
   19798:	bne	19960 <__assert_fail@plt+0x8238>
   1979c:	mov	r1, #34	; 0x22
   197a0:	b	19958 <__assert_fail@plt+0x8230>
   197a4:	cmp	r6, #10
   197a8:	bne	19960 <__assert_fail@plt+0x8238>
   197ac:	tst	r8, #2048	; 0x800
   197b0:	bne	1982c <__assert_fail@plt+0x8104>
   197b4:	b	19960 <__assert_fail@plt+0x8238>
   197b8:	tst	r8, #8192	; 0x2000
   197bc:	beq	19960 <__assert_fail@plt+0x8238>
   197c0:	mov	r1, #8
   197c4:	b	19958 <__assert_fail@plt+0x8230>
   197c8:	tst	r8, #8192	; 0x2000
   197cc:	beq	19960 <__assert_fail@plt+0x8238>
   197d0:	mov	r1, #9
   197d4:	b	19958 <__assert_fail@plt+0x8230>
   197d8:	mov	r1, #11
   197dc:	b	19958 <__assert_fail@plt+0x8230>
   197e0:	movw	r1, #1026	; 0x402
   197e4:	tst	r8, r1
   197e8:	bne	19960 <__assert_fail@plt+0x8238>
   197ec:	b	1991c <__assert_fail@plt+0x81f4>
   197f0:	mov	r1, #5
   197f4:	b	19958 <__assert_fail@plt+0x8230>
   197f8:	movw	r1, #1026	; 0x402
   197fc:	tst	r8, r1
   19800:	bne	19960 <__assert_fail@plt+0x8238>
   19804:	b	19954 <__assert_fail@plt+0x822c>
   19808:	mov	r1, #20
   1980c:	b	19958 <__assert_fail@plt+0x8230>
   19810:	and	r1, r8, #4608	; 0x1200
   19814:	cmp	r1, #4608	; 0x1200
   19818:	beq	198ac <__assert_fail@plt+0x8184>
   1981c:	b	19960 <__assert_fail@plt+0x8238>
   19820:	and	r1, r8, #33792	; 0x8400
   19824:	cmp	r1, #32768	; 0x8000
   19828:	bne	19960 <__assert_fail@plt+0x8238>
   1982c:	mov	r1, #10
   19830:	b	19958 <__assert_fail@plt+0x8230>
   19834:	cmp	r2, #96	; 0x60
   19838:	beq	198d4 <__assert_fail@plt+0x81ac>
   1983c:	cmp	r2, #98	; 0x62
   19840:	tsteq	r8, #524288	; 0x80000
   19844:	bne	19960 <__assert_fail@plt+0x8238>
   19848:	mov	r1, #256	; 0x100
   1984c:	b	195e4 <__assert_fail@plt+0x7ebc>
   19850:	ldr	r1, [r7, #40]	; 0x28
   19854:	cmp	r1, #0
   19858:	beq	195e0 <__assert_fail@plt+0x7eb8>
   1985c:	tst	r8, #2048	; 0x800
   19860:	beq	19960 <__assert_fail@plt+0x8238>
   19864:	ldr	r2, [r7, #4]
   19868:	add	r1, r2, r1
   1986c:	ldrb	r1, [r1, #-1]
   19870:	cmp	r1, #10
   19874:	beq	195e0 <__assert_fail@plt+0x7eb8>
   19878:	b	19960 <__assert_fail@plt+0x8238>
   1987c:	cmp	r2, #87	; 0x57
   19880:	tsteq	r8, #524288	; 0x80000
   19884:	bne	19960 <__assert_fail@plt+0x8238>
   19888:	mov	r1, #33	; 0x21
   1988c:	b	19958 <__assert_fail@plt+0x8230>
   19890:	tst	r8, #524288	; 0x80000
   19894:	bne	19960 <__assert_fail@plt+0x8238>
   19898:	mov	r1, #32
   1989c:	b	19958 <__assert_fail@plt+0x8230>
   198a0:	and	r1, r8, #4608	; 0x1200
   198a4:	cmp	r1, #512	; 0x200
   198a8:	bne	19960 <__assert_fail@plt+0x8238>
   198ac:	mov	r1, #23
   198b0:	b	19958 <__assert_fail@plt+0x8230>
   198b4:	tst	r8, #33792	; 0x8400
   198b8:	bne	19960 <__assert_fail@plt+0x8238>
   198bc:	b	1982c <__assert_fail@plt+0x8104>
   198c0:	and	r1, r8, #4608	; 0x1200
   198c4:	cmp	r1, #512	; 0x200
   198c8:	bne	19960 <__assert_fail@plt+0x8238>
   198cc:	mov	r1, #24
   198d0:	b	19958 <__assert_fail@plt+0x8230>
   198d4:	tst	r8, #524288	; 0x80000
   198d8:	bne	19960 <__assert_fail@plt+0x8238>
   198dc:	mov	r1, #64	; 0x40
   198e0:	b	195e4 <__assert_fail@plt+0x7ebc>
   198e4:	tst	r8, #524288	; 0x80000
   198e8:	bne	19960 <__assert_fail@plt+0x8238>
   198ec:	mov	r1, #128	; 0x80
   198f0:	b	195e4 <__assert_fail@plt+0x7ebc>
   198f4:	tst	r8, #8192	; 0x2000
   198f8:	beq	197c0 <__assert_fail@plt+0x8098>
   198fc:	b	19960 <__assert_fail@plt+0x8238>
   19900:	tst	r8, #8192	; 0x2000
   19904:	beq	197d0 <__assert_fail@plt+0x80a8>
   19908:	b	19960 <__assert_fail@plt+0x8238>
   1990c:	movw	r1, #1026	; 0x402
   19910:	and	r1, r8, r1
   19914:	cmp	r1, #2
   19918:	bne	19960 <__assert_fail@plt+0x8238>
   1991c:	mov	r1, #18
   19920:	b	19958 <__assert_fail@plt+0x8230>
   19924:	tst	r8, #524288	; 0x80000
   19928:	bne	19960 <__assert_fail@plt+0x8238>
   1992c:	mov	r1, #6
   19930:	b	195e4 <__assert_fail@plt+0x7ebc>
   19934:	tst	r8, #524288	; 0x80000
   19938:	bne	19960 <__assert_fail@plt+0x8238>
   1993c:	mov	r1, #9
   19940:	b	195e4 <__assert_fail@plt+0x7ebc>
   19944:	movw	r1, #1026	; 0x402
   19948:	and	r1, r8, r1
   1994c:	cmp	r1, #2
   19950:	bne	19960 <__assert_fail@plt+0x8238>
   19954:	mov	r1, #19
   19958:	bfi	r0, r1, #0, #8
   1995c:	str	r0, [r5]
   19960:	mov	r0, r4
   19964:	sub	sp, fp, #24
   19968:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1996c:	tst	r8, #524288	; 0x80000
   19970:	bne	19960 <__assert_fail@plt+0x8238>
   19974:	mov	r1, #512	; 0x200
   19978:	b	195e4 <__assert_fail@plt+0x7ebc>
   1997c:	tst	r8, #524288	; 0x80000
   19980:	bne	19960 <__assert_fail@plt+0x8238>
   19984:	mov	r1, #35	; 0x23
   19988:	b	19958 <__assert_fail@plt+0x8230>
   1998c:	cmp	r3, #2
   19990:	blt	199c0 <__assert_fail@plt+0x8298>
   19994:	ldr	r3, [r7, #8]
   19998:	ldr	r4, [r3, r2, lsl #2]
   1999c:	cmn	r4, #1
   199a0:	beq	19410 <__assert_fail@plt+0x7ce8>
   199a4:	ldr	r4, [r7, #28]
   199a8:	add	r6, r6, #2
   199ac:	cmp	r4, r6
   199b0:	beq	199c0 <__assert_fail@plt+0x8298>
   199b4:	ldr	r3, [r3, r6, lsl #2]
   199b8:	cmn	r3, #1
   199bc:	beq	19410 <__assert_fail@plt+0x7ce8>
   199c0:	ldrb	r3, [r7, #76]	; 0x4c
   199c4:	mov	r6, r2
   199c8:	ldr	r4, [r7, #24]
   199cc:	ldr	ip, [r7]
   199d0:	cmp	r3, #0
   199d4:	ldrne	r6, [r7, #12]
   199d8:	ldrne	r6, [r6, r2, lsl #2]
   199dc:	cmp	r3, #0
   199e0:	add	r6, r4, r6
   199e4:	add	r6, ip, r6
   199e8:	ldrsb	r6, [r6]
   199ec:	beq	19418 <__assert_fail@plt+0x7cf0>
   199f0:	cmn	r6, #1
   199f4:	ble	19410 <__assert_fail@plt+0x7ce8>
   199f8:	b	19418 <__assert_fail@plt+0x7cf0>
   199fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a00:	add	fp, sp, #28
   19a04:	sub	sp, sp, #28
   19a08:	mov	r7, r1
   19a0c:	mov	r1, r0
   19a10:	ldr	r4, [fp, #12]
   19a14:	ldr	r5, [fp, #8]
   19a18:	mov	r6, r2
   19a1c:	str	r3, [sp, #16]
   19a20:	ldr	r0, [r7]
   19a24:	str	r1, [sp, #12]
   19a28:	str	r4, [sp, #4]
   19a2c:	str	r5, [sp]
   19a30:	str	r0, [sp, #8]
   19a34:	mov	r0, r1
   19a38:	mov	r1, r7
   19a3c:	bl	19c88 <__assert_fail@plt+0x8560>
   19a40:	cmp	r0, #0
   19a44:	bne	19a54 <__assert_fail@plt+0x832c>
   19a48:	ldr	r1, [r4]
   19a4c:	cmp	r1, #0
   19a50:	bne	19bb0 <__assert_fail@plt+0x8488>
   19a54:	mov	r4, r0
   19a58:	ldrb	r0, [r6, #4]
   19a5c:	orr	r1, r0, #8
   19a60:	cmp	r1, #10
   19a64:	beq	19bb4 <__assert_fail@plt+0x848c>
   19a68:	cmp	r5, #0
   19a6c:	beq	19a78 <__assert_fail@plt+0x8350>
   19a70:	cmp	r0, #9
   19a74:	beq	19bb4 <__assert_fail@plt+0x848c>
   19a78:	ldr	r8, [fp, #12]
   19a7c:	ldr	r0, [sp, #12]
   19a80:	ldr	r3, [sp, #16]
   19a84:	mov	r1, r7
   19a88:	mov	r2, r6
   19a8c:	mov	r9, r5
   19a90:	str	r5, [sp]
   19a94:	str	r8, [sp, #4]
   19a98:	bl	19c88 <__assert_fail@plt+0x8560>
   19a9c:	mov	sl, r0
   19aa0:	cmp	r0, #0
   19aa4:	bne	19ab4 <__assert_fail@plt+0x838c>
   19aa8:	ldr	r0, [r8]
   19aac:	cmp	r0, #0
   19ab0:	bne	19bc0 <__assert_fail@plt+0x8498>
   19ab4:	cmp	r4, #0
   19ab8:	cmpne	sl, #0
   19abc:	bne	19ad4 <__assert_fail@plt+0x83ac>
   19ac0:	cmp	r4, #0
   19ac4:	mov	r5, r9
   19ac8:	movne	sl, r4
   19acc:	mov	r0, sl
   19ad0:	b	19a54 <__assert_fail@plt+0x832c>
   19ad4:	mov	r0, #16
   19ad8:	mov	r1, r4
   19adc:	mov	r2, sl
   19ae0:	add	r3, sp, #20
   19ae4:	str	r0, [sp, #24]
   19ae8:	mov	r0, #0
   19aec:	str	r0, [sp, #20]
   19af0:	ldr	r0, [sp, #8]
   19af4:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   19af8:	cmp	r0, #0
   19afc:	mov	r5, r9
   19b00:	bne	19a54 <__assert_fail@plt+0x832c>
   19b04:	mov	r5, sl
   19b08:	ldr	sl, [sl, #4]
   19b0c:	cmp	sl, #0
   19b10:	bne	19b04 <__assert_fail@plt+0x83dc>
   19b14:	ldr	sl, [r5, #8]
   19b18:	cmp	sl, #0
   19b1c:	bne	19b04 <__assert_fail@plt+0x83dc>
   19b20:	add	r0, r5, #20
   19b24:	bl	187bc <__assert_fail@plt+0x7094>
   19b28:	ldr	r0, [r5]
   19b2c:	cmp	r0, #0
   19b30:	beq	19b54 <__assert_fail@plt+0x842c>
   19b34:	ldr	sl, [r0, #8]
   19b38:	cmp	sl, r5
   19b3c:	mov	r5, r0
   19b40:	beq	19b20 <__assert_fail@plt+0x83f8>
   19b44:	cmp	sl, #0
   19b48:	mov	r5, r0
   19b4c:	beq	19b20 <__assert_fail@plt+0x83f8>
   19b50:	b	19b04 <__assert_fail@plt+0x83dc>
   19b54:	mov	r5, r4
   19b58:	ldr	r4, [r4, #4]
   19b5c:	cmp	r4, #0
   19b60:	bne	19b54 <__assert_fail@plt+0x842c>
   19b64:	ldr	r4, [r5, #8]
   19b68:	cmp	r4, #0
   19b6c:	bne	19b54 <__assert_fail@plt+0x842c>
   19b70:	add	r0, r5, #20
   19b74:	bl	187bc <__assert_fail@plt+0x7094>
   19b78:	ldr	r0, [r5]
   19b7c:	cmp	r0, #0
   19b80:	beq	19ba4 <__assert_fail@plt+0x847c>
   19b84:	ldr	r4, [r0, #8]
   19b88:	cmp	r4, r5
   19b8c:	mov	r5, r0
   19b90:	beq	19b70 <__assert_fail@plt+0x8448>
   19b94:	cmp	r4, #0
   19b98:	mov	r5, r0
   19b9c:	beq	19b70 <__assert_fail@plt+0x8448>
   19ba0:	b	19b54 <__assert_fail@plt+0x842c>
   19ba4:	ldr	r1, [fp, #12]
   19ba8:	mov	r0, #12
   19bac:	str	r0, [r1]
   19bb0:	mov	r4, #0
   19bb4:	mov	r0, r4
   19bb8:	sub	sp, fp, #28
   19bbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19bc0:	cmp	r4, #0
   19bc4:	beq	19bb0 <__assert_fail@plt+0x8488>
   19bc8:	mov	r5, r4
   19bcc:	ldr	r4, [r4, #4]
   19bd0:	cmp	r4, #0
   19bd4:	bne	19bc8 <__assert_fail@plt+0x84a0>
   19bd8:	ldr	r4, [r5, #8]
   19bdc:	cmp	r4, #0
   19be0:	bne	19bc8 <__assert_fail@plt+0x84a0>
   19be4:	add	r0, r5, #20
   19be8:	bl	187bc <__assert_fail@plt+0x7094>
   19bec:	ldr	r0, [r5]
   19bf0:	cmp	r0, #0
   19bf4:	beq	19bb0 <__assert_fail@plt+0x8488>
   19bf8:	ldr	r4, [r0, #8]
   19bfc:	cmp	r4, r5
   19c00:	mov	r5, r0
   19c04:	beq	19be4 <__assert_fail@plt+0x84bc>
   19c08:	cmp	r4, #0
   19c0c:	mov	r5, r0
   19c10:	beq	19be4 <__assert_fail@plt+0x84bc>
   19c14:	b	19bc8 <__assert_fail@plt+0x84a0>
   19c18:	push	{r4, r5, r6, sl, fp, lr}
   19c1c:	add	fp, sp, #16
   19c20:	mov	r4, r2
   19c24:	mov	r5, r1
   19c28:	mov	r6, r0
   19c2c:	ldr	r0, [r0, #4]
   19c30:	cmp	r0, #0
   19c34:	bne	19c28 <__assert_fail@plt+0x8500>
   19c38:	ldr	r0, [r6, #8]
   19c3c:	cmp	r0, #0
   19c40:	bne	19c28 <__assert_fail@plt+0x8500>
   19c44:	mov	r0, r4
   19c48:	mov	r1, r6
   19c4c:	blx	r5
   19c50:	cmp	r0, #0
   19c54:	bne	19c84 <__assert_fail@plt+0x855c>
   19c58:	ldr	r1, [r6]
   19c5c:	cmp	r1, #0
   19c60:	popeq	{r4, r5, r6, sl, fp, pc}
   19c64:	ldr	r0, [r1, #8]
   19c68:	cmp	r0, r6
   19c6c:	mov	r6, r1
   19c70:	beq	19c44 <__assert_fail@plt+0x851c>
   19c74:	cmp	r0, #0
   19c78:	mov	r6, r1
   19c7c:	beq	19c44 <__assert_fail@plt+0x851c>
   19c80:	b	19c28 <__assert_fail@plt+0x8500>
   19c84:	pop	{r4, r5, r6, sl, fp, pc}
   19c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c8c:	add	fp, sp, #28
   19c90:	sub	sp, sp, #148	; 0x94
   19c94:	mov	r5, r1
   19c98:	mov	r6, r0
   19c9c:	mov	r7, r2
   19ca0:	ldr	r0, [r2, #4]
   19ca4:	mvn	r1, #0
   19ca8:	mov	sl, #0
   19cac:	ldr	r2, [r5]
   19cb0:	uxtab	r1, r1, r0
   19cb4:	str	r2, [sp, #52]	; 0x34
   19cb8:	cmp	r1, #35	; 0x23
   19cbc:	ldr	r9, [fp, #12]
   19cc0:	str	r6, [sp, #48]	; 0x30
   19cc4:	str	r3, [sp, #44]	; 0x2c
   19cc8:	str	r7, [sp, #28]
   19ccc:	bhi	19df8 <__assert_fail@plt+0x86d0>
   19cd0:	add	r2, pc, #0
   19cd4:	ldr	pc, [r2, r1, lsl #2]
   19cd8:	andeq	sl, r1, r8, asr #32
   19cdc:	andeq	fp, r1, r4, lsr #32
   19ce0:	strdeq	r9, [r1], -r8
   19ce4:	andeq	r9, r1, ip, asr lr
   19ce8:			; <UNDEFINED> instruction: 0x00019eb8
   19cec:	strdeq	r9, [r1], -r8
   19cf0:	strdeq	r9, [r1], -r8
   19cf4:	strdeq	r9, [r1], -ip
   19cf8:	andeq	r9, r1, r8, lsl #28
   19cfc:	andeq	fp, r1, r4, lsr #32
   19d00:	strdeq	r9, [r1], -r8
   19d04:	andeq	r9, r1, r8, asr #31
   19d08:	strdeq	r9, [r1], -r8
   19d0c:	strdeq	r9, [r1], -r8
   19d10:	strdeq	r9, [r1], -r8
   19d14:	strdeq	r9, [r1], -r8
   19d18:	strdeq	r9, [r1], -r8
   19d1c:	strdeq	r9, [r1], -r8
   19d20:	strdeq	r9, [r1], -r8
   19d24:	andeq	sl, r1, r8, lsr r1
   19d28:	strdeq	r9, [r1], -r8
   19d2c:	strdeq	r9, [r1], -r8
   19d30:	strdeq	r9, [r1], -r0
   19d34:	andeq	r9, r1, r8, lsl lr
   19d38:	strdeq	r9, [r1], -r8
   19d3c:	strdeq	r9, [r1], -r8
   19d40:	strdeq	r9, [r1], -r8
   19d44:	strdeq	r9, [r1], -r8
   19d48:	strdeq	r9, [r1], -r8
   19d4c:	strdeq	r9, [r1], -r8
   19d50:	strdeq	r9, [r1], -r8
   19d54:	andeq	r9, r1, r8, ror sp
   19d58:	andeq	r9, r1, r8, ror sp
   19d5c:	muleq	r1, ip, sp
   19d60:	muleq	r1, ip, sp
   19d64:	andeq	sl, r1, r0, lsr r1
   19d68:	andeq	r0, r0, r0
   19d6c:	mvnseq	r0, #0
   19d70:			; <UNDEFINED> instruction: 0x87fffffe
   19d74:			; <UNDEFINED> instruction: 0x07fffffe
   19d78:	mvn	r2, #32
   19d7c:	ldr	r1, [r6, #64]	; 0x40
   19d80:	movw	r3, #14853	; 0x3a05
   19d84:	uxtab	r0, r2, r0
   19d88:	movw	r2, #16310	; 0x3fb6
   19d8c:	movt	r3, #2
   19d90:	clz	r0, r0
   19d94:	movt	r2, #2
   19d98:	b	19dbc <__assert_fail@plt+0x8694>
   19d9c:	mvn	r2, #34	; 0x22
   19da0:	ldr	r1, [r6, #64]	; 0x40
   19da4:	movw	r3, #15003	; 0x3a9b
   19da8:	uxtab	r0, r2, r0
   19dac:	movw	r2, #16316	; 0x3fbc
   19db0:	movt	r3, #2
   19db4:	clz	r0, r0
   19db8:	movt	r2, #2
   19dbc:	lsr	r0, r0, #5
   19dc0:	stm	sp, {r0, r9}
   19dc4:	ldr	r0, [sp, #52]	; 0x34
   19dc8:	bl	1b248 <__assert_fail@plt+0x9b20>
   19dcc:	mov	r4, r0
   19dd0:	cmp	r0, #0
   19dd4:	bne	1aa98 <__assert_fail@plt+0x9370>
   19dd8:	ldr	r0, [r9]
   19ddc:	ldr	r2, [sp, #44]	; 0x2c
   19de0:	ldr	r3, [sp, #28]
   19de4:	cmp	r0, #0
   19de8:	beq	1aaa0 <__assert_fail@plt+0x9378>
   19dec:	b	1b024 <__assert_fail@plt+0x98fc>
   19df0:	tst	r3, #16777216	; 0x1000000
   19df4:	bne	19e54 <__assert_fail@plt+0x872c>
   19df8:	tst	r3, #32
   19dfc:	bne	19e54 <__assert_fail@plt+0x872c>
   19e00:	tst	r3, #16
   19e04:	bne	1a1ac <__assert_fail@plt+0x8a84>
   19e08:	tst	r3, #131072	; 0x20000
   19e0c:	uxtbeq	r1, r0
   19e10:	cmpeq	r1, #9
   19e14:	beq	1a1e8 <__assert_fail@plt+0x8ac0>
   19e18:	mov	r1, #1
   19e1c:	mov	r2, #0
   19e20:	mov	r3, r7
   19e24:	mov	sl, #0
   19e28:	bfi	r0, r1, #0, #8
   19e2c:	mov	r1, #0
   19e30:	str	r0, [r7, #4]
   19e34:	ldr	r0, [sp, #52]	; 0x34
   19e38:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   19e3c:	ldr	r3, [sp, #28]
   19e40:	ldr	r2, [sp, #44]	; 0x2c
   19e44:	mov	r4, r0
   19e48:	cmp	r0, #0
   19e4c:	bne	1aaa0 <__assert_fail@plt+0x9378>
   19e50:	b	1a954 <__assert_fail@plt+0x922c>
   19e54:	mov	r0, #13
   19e58:	b	1a958 <__assert_fail@plt+0x9230>
   19e5c:	ldr	r5, [sp, #52]	; 0x34
   19e60:	ldr	r0, [r7]
   19e64:	mov	r1, #1
   19e68:	ldr	r2, [r5, #84]	; 0x54
   19e6c:	tst	r2, r1, lsl r0
   19e70:	beq	1aa24 <__assert_fail@plt+0x92fc>
   19e74:	lsl	r0, r1, r0
   19e78:	ldr	r1, [r5, #80]	; 0x50
   19e7c:	mov	r2, #0
   19e80:	mov	r3, r7
   19e84:	mov	sl, #0
   19e88:	orr	r0, r1, r0
   19e8c:	mov	r1, #0
   19e90:	str	r0, [r5, #80]	; 0x50
   19e94:	mov	r0, r5
   19e98:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   19e9c:	cmp	r0, #0
   19ea0:	beq	1a954 <__assert_fail@plt+0x922c>
   19ea4:	mov	r4, r0
   19ea8:	ldr	r0, [r5, #76]	; 0x4c
   19eac:	add	r0, r0, #1
   19eb0:	str	r0, [r5, #76]	; 0x4c
   19eb4:	b	19eec <__assert_fail@plt+0x87c4>
   19eb8:	ldr	r5, [sp, #52]	; 0x34
   19ebc:	mov	r1, #0
   19ec0:	mov	r2, #0
   19ec4:	mov	r3, r7
   19ec8:	mov	sl, #0
   19ecc:	mov	r0, r5
   19ed0:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   19ed4:	cmp	r0, #0
   19ed8:	beq	1a954 <__assert_fail@plt+0x922c>
   19edc:	mov	r4, r0
   19ee0:	ldr	r0, [r5, #92]	; 0x5c
   19ee4:	cmp	r0, #2
   19ee8:	blt	1aa98 <__assert_fail@plt+0x9370>
   19eec:	ldrb	r0, [r5, #88]	; 0x58
   19ef0:	orr	r0, r0, #2
   19ef4:	strb	r0, [r5, #88]	; 0x58
   19ef8:	b	1aa98 <__assert_fail@plt+0x9370>
   19efc:	ldr	r8, [r5, #24]
   19f00:	ldr	r4, [fp, #8]
   19f04:	orr	r2, r3, #8388608	; 0x800000
   19f08:	mov	r1, r6
   19f0c:	add	r0, r8, #1
   19f10:	str	r0, [r5, #24]
   19f14:	mov	r0, r7
   19f18:	bl	19370 <__assert_fail@plt+0x7c48>
   19f1c:	ldr	r1, [r6, #40]	; 0x28
   19f20:	ldr	r2, [sp, #28]
   19f24:	add	r0, r1, r0
   19f28:	mov	r1, #0
   19f2c:	str	r0, [r6, #40]	; 0x28
   19f30:	ldrb	r0, [r2, #4]
   19f34:	cmp	r0, #9
   19f38:	beq	19f78 <__assert_fail@plt+0x8850>
   19f3c:	add	r0, r4, #1
   19f40:	mov	r1, r5
   19f44:	mov	r5, r2
   19f48:	stm	sp, {r0, r9}
   19f4c:	mov	r0, r6
   19f50:	ldr	r3, [sp, #44]	; 0x2c
   19f54:	bl	191c0 <__assert_fail@plt+0x7a98>
   19f58:	mov	r1, r0
   19f5c:	ldr	r0, [r9]
   19f60:	mov	sl, #0
   19f64:	cmp	r0, #0
   19f68:	bne	1b024 <__assert_fail@plt+0x98fc>
   19f6c:	ldrb	r0, [r5, #4]
   19f70:	cmp	r0, #9
   19f74:	bne	1b114 <__assert_fail@plt+0x99ec>
   19f78:	ldr	r0, [sp, #52]	; 0x34
   19f7c:	cmp	r8, #8
   19f80:	mov	sl, #0
   19f84:	movls	r2, #1
   19f88:	ldrls	r3, [r0, #84]	; 0x54
   19f8c:	orrls	r2, r3, r2, lsl r8
   19f90:	sub	r3, fp, #80	; 0x50
   19f94:	strls	r2, [r0, #84]	; 0x54
   19f98:	mov	r2, #17
   19f9c:	str	r2, [fp, #-76]	; 0xffffffb4
   19fa0:	mov	r2, #0
   19fa4:	str	sl, [fp, #-80]	; 0xffffffb0
   19fa8:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   19fac:	cmp	r0, #0
   19fb0:	beq	1a954 <__assert_fail@plt+0x922c>
   19fb4:	ldr	r2, [sp, #44]	; 0x2c
   19fb8:	ldr	r3, [sp, #28]
   19fbc:	str	r8, [r0, #20]
   19fc0:	mov	r4, r0
   19fc4:	b	1aaa0 <__assert_fail@plt+0x9378>
   19fc8:	ldr	r2, [r7]
   19fcc:	movw	r1, #783	; 0x30f
   19fd0:	tst	r2, r1
   19fd4:	beq	1a028 <__assert_fail@plt+0x8900>
   19fd8:	ldr	r0, [sp, #52]	; 0x34
   19fdc:	ldrb	r0, [r0, #88]	; 0x58
   19fe0:	tst	r0, #16
   19fe4:	bne	1a020 <__assert_fail@plt+0x88f8>
   19fe8:	ldr	r2, [sp, #52]	; 0x34
   19fec:	orr	r1, r0, #16
   19ff0:	tst	r0, #8
   19ff4:	strb	r1, [r2, #88]	; 0x58
   19ff8:	bne	1b08c <__assert_fail@plt+0x9964>
   19ffc:	sub	r1, pc, #668	; 0x29c
   1a000:	tst	r0, #4
   1a004:	vld1.64	{d16-d17}, [r1]
   1a008:	add	r1, r2, #96	; 0x60
   1a00c:	vst1.32	{d16-d17}, [r1]
   1a010:	beq	1b098 <__assert_fail@plt+0x9970>
   1a014:	vmov.i32	q8, #0	; 0x00000000
   1a018:	add	r0, r2, #112	; 0x70
   1a01c:	vst1.32	{d16-d17}, [r0]
   1a020:	ldr	r2, [r7]
   1a024:	ldr	r6, [sp, #48]	; 0x30
   1a028:	ldr	r0, [sp, #52]	; 0x34
   1a02c:	cmp	r2, #256	; 0x100
   1a030:	beq	1a8e0 <__assert_fail@plt+0x91b8>
   1a034:	cmp	r2, #512	; 0x200
   1a038:	bne	1a960 <__assert_fail@plt+0x9238>
   1a03c:	mov	r4, #10
   1a040:	mov	r0, #5
   1a044:	b	1a8e8 <__assert_fail@plt+0x91c0>
   1a048:	ldr	r5, [sp, #52]	; 0x34
   1a04c:	mov	r1, #0
   1a050:	mov	r2, #0
   1a054:	mov	r3, r7
   1a058:	mov	sl, #0
   1a05c:	mov	r0, r5
   1a060:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1a064:	cmp	r0, #0
   1a068:	beq	1a954 <__assert_fail@plt+0x922c>
   1a06c:	mov	r4, r0
   1a070:	ldr	r0, [r5, #92]	; 0x5c
   1a074:	cmp	r0, #2
   1a078:	blt	1aa98 <__assert_fail@plt+0x9370>
   1a07c:	ldr	r7, [sp, #52]	; 0x34
   1a080:	mov	sl, #16
   1a084:	sub	r8, fp, #80	; 0x50
   1a088:	ldr	r5, [sp, #48]	; 0x30
   1a08c:	ldr	r0, [r5, #40]	; 0x28
   1a090:	ldr	r1, [r5, #56]	; 0x38
   1a094:	cmp	r1, r0
   1a098:	ble	1a9ac <__assert_fail@plt+0x9284>
   1a09c:	ldr	r1, [r5, #28]
   1a0a0:	ldr	r2, [sp, #44]	; 0x2c
   1a0a4:	ldr	r3, [sp, #28]
   1a0a8:	cmp	r0, r1
   1a0ac:	beq	1a9a4 <__assert_fail@plt+0x927c>
   1a0b0:	ldr	r1, [r5, #8]
   1a0b4:	ldr	r0, [r1, r0, lsl #2]
   1a0b8:	cmn	r0, #1
   1a0bc:	bne	1a9a4 <__assert_fail@plt+0x927c>
   1a0c0:	mov	r0, r3
   1a0c4:	mov	r1, r5
   1a0c8:	mov	r6, r3
   1a0cc:	bl	19370 <__assert_fail@plt+0x7c48>
   1a0d0:	ldr	r1, [r5, #40]	; 0x28
   1a0d4:	mov	r2, #0
   1a0d8:	mov	r3, r6
   1a0dc:	add	r0, r1, r0
   1a0e0:	mov	r1, #0
   1a0e4:	str	r0, [r5, #40]	; 0x28
   1a0e8:	mov	r0, r7
   1a0ec:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1a0f0:	mov	r5, r0
   1a0f4:	mov	r0, #0
   1a0f8:	str	sl, [fp, #-76]	; 0xffffffb4
   1a0fc:	mov	r1, r4
   1a100:	mov	r3, r8
   1a104:	str	r0, [fp, #-80]	; 0xffffffb0
   1a108:	mov	r0, r7
   1a10c:	mov	r2, r5
   1a110:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1a114:	cmp	r5, #0
   1a118:	movne	r4, r0
   1a11c:	cmpne	r0, #0
   1a120:	bne	1a088 <__assert_fail@plt+0x8960>
   1a124:	mov	r0, #12
   1a128:	str	r0, [r9]
   1a12c:	b	1b020 <__assert_fail@plt+0x98f8>
   1a130:	mov	r0, #5
   1a134:	b	1a958 <__assert_fail@plt+0x9230>
   1a138:	mov	r0, #0
   1a13c:	mov	r1, #1
   1a140:	mov	r7, #0
   1a144:	str	r0, [fp, #-32]	; 0xffffffe0
   1a148:	mov	r0, #32
   1a14c:	bl	22a4c <__assert_fail@plt+0x11324>
   1a150:	mov	r4, r0
   1a154:	mov	r0, #40	; 0x28
   1a158:	mov	r1, #1
   1a15c:	bl	22a4c <__assert_fail@plt+0x11324>
   1a160:	mov	r8, r0
   1a164:	cmp	r4, #0
   1a168:	cmpne	r8, #0
   1a16c:	beq	1aa2c <__assert_fail@plt+0x9304>
   1a170:	ldr	r7, [sp, #28]
   1a174:	ldr	r5, [sp, #44]	; 0x2c
   1a178:	mov	r1, r6
   1a17c:	mov	r0, r7
   1a180:	mov	r2, r5
   1a184:	bl	1b474 <__assert_fail@plt+0x9d4c>
   1a188:	mov	r3, r0
   1a18c:	ldr	r0, [r7, #4]
   1a190:	uxtb	r1, r0
   1a194:	cmp	r1, #25
   1a198:	beq	1a1f0 <__assert_fail@plt+0x8ac8>
   1a19c:	cmp	r1, #2
   1a1a0:	beq	1aa18 <__assert_fail@plt+0x92f0>
   1a1a4:	mov	r1, #0
   1a1a8:	b	1a244 <__assert_fail@plt+0x8b1c>
   1a1ac:	mov	r0, r7
   1a1b0:	mov	r1, r6
   1a1b4:	mov	r2, r3
   1a1b8:	mov	r4, r3
   1a1bc:	bl	19370 <__assert_fail@plt+0x7c48>
   1a1c0:	ldr	r1, [r6, #40]	; 0x28
   1a1c4:	mov	r2, r7
   1a1c8:	mov	r3, r4
   1a1cc:	add	r0, r1, r0
   1a1d0:	mov	r1, r5
   1a1d4:	str	r0, [r6, #40]	; 0x28
   1a1d8:	mov	r0, r6
   1a1dc:	sub	sp, fp, #28
   1a1e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1e4:	b	19c88 <__assert_fail@plt+0x8560>
   1a1e8:	mov	r0, #16
   1a1ec:	b	1a958 <__assert_fail@plt+0x9230>
   1a1f0:	ldrb	r0, [r8, #16]
   1a1f4:	tst	r5, #256	; 0x100
   1a1f8:	ldr	r2, [sp, #44]	; 0x2c
   1a1fc:	mov	r1, r6
   1a200:	orr	r0, r0, #1
   1a204:	strb	r0, [r8, #16]
   1a208:	ldrne	r0, [r4]
   1a20c:	orrne	r0, r0, #1024	; 0x400
   1a210:	strne	r0, [r4]
   1a214:	ldr	r0, [r6, #40]	; 0x28
   1a218:	add	r0, r0, r3
   1a21c:	str	r0, [r6, #40]	; 0x28
   1a220:	mov	r0, r7
   1a224:	bl	1b474 <__assert_fail@plt+0x9d4c>
   1a228:	ldr	r7, [sp, #28]
   1a22c:	mov	r3, r0
   1a230:	ldr	r0, [r7, #4]
   1a234:	uxtb	r1, r0
   1a238:	cmp	r1, #2
   1a23c:	beq	1aa18 <__assert_fail@plt+0x92f0>
   1a240:	mov	r1, #1
   1a244:	str	r1, [sp, #36]	; 0x24
   1a248:	uxtb	r1, r0
   1a24c:	str	r8, [sp, #40]	; 0x28
   1a250:	mov	r2, r7
   1a254:	cmp	r1, #21
   1a258:	ldr	r5, [sp, #44]	; 0x2c
   1a25c:	moveq	r1, #1
   1a260:	bfieq	r0, r1, #0, #8
   1a264:	mov	r1, r6
   1a268:	streq	r0, [r7, #4]
   1a26c:	mov	r0, #3
   1a270:	str	r0, [fp, #-40]	; 0xffffffd8
   1a274:	sub	r0, fp, #80	; 0x50
   1a278:	str	r0, [fp, #-36]	; 0xffffffdc
   1a27c:	mov	r0, #1
   1a280:	str	r5, [sp]
   1a284:	str	r0, [sp, #4]
   1a288:	sub	r0, fp, #40	; 0x28
   1a28c:	bl	1b5dc <__assert_fail@plt+0x9eb4>
   1a290:	cmp	r0, #0
   1a294:	bne	1aa04 <__assert_fail@plt+0x92dc>
   1a298:	and	r0, r5, #65536	; 0x10000
   1a29c:	mov	r2, r5
   1a2a0:	mov	r8, #0
   1a2a4:	str	r0, [sp, #20]
   1a2a8:	mov	r0, #0
   1a2ac:	str	r0, [sp, #16]
   1a2b0:	mov	r0, #0
   1a2b4:	str	r0, [sp, #12]
   1a2b8:	ldr	r5, [sp, #28]
   1a2bc:	mov	r0, r5
   1a2c0:	mov	r1, r6
   1a2c4:	bl	1b474 <__assert_fail@plt+0x9d4c>
   1a2c8:	ldr	r7, [fp, #-40]	; 0xffffffd8
   1a2cc:	mov	sl, r0
   1a2d0:	cmp	r7, #2
   1a2d4:	beq	1a4ac <__assert_fail@plt+0x8d84>
   1a2d8:	cmp	r7, #4
   1a2dc:	bne	1a320 <__assert_fail@plt+0x8bf8>
   1a2e0:	ldr	r6, [sp, #48]	; 0x30
   1a2e4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a2e8:	sub	r3, fp, #32
   1a2ec:	ldr	r0, [r6, #64]	; 0x40
   1a2f0:	str	r1, [sp]
   1a2f4:	ldr	r1, [sp, #44]	; 0x2c
   1a2f8:	str	r1, [sp, #4]
   1a2fc:	mov	r1, r4
   1a300:	ldr	r2, [sp, #40]	; 0x28
   1a304:	bl	1b894 <__assert_fail@plt+0xa16c>
   1a308:	ldr	r2, [sp, #28]
   1a30c:	ldr	r5, [sp, #52]	; 0x34
   1a310:	cmp	r0, #0
   1a314:	str	r0, [r9]
   1a318:	beq	1a4ec <__assert_fail@plt+0x8dc4>
   1a31c:	b	1aa5c <__assert_fail@plt+0x9334>
   1a320:	str	sl, [sp, #32]
   1a324:	mov	sl, #7
   1a328:	ldr	r2, [sp, #28]
   1a32c:	str	r9, [sp, #24]
   1a330:	ldrb	r0, [r2, #4]
   1a334:	cmp	r0, #22
   1a338:	beq	1a348 <__assert_fail@plt+0x8c20>
   1a33c:	cmp	r0, #2
   1a340:	bne	1a44c <__assert_fail@plt+0x8d24>
   1a344:	b	1aa50 <__assert_fail@plt+0x9328>
   1a348:	ldr	r5, [sp, #48]	; 0x30
   1a34c:	ldr	r6, [sp, #32]
   1a350:	ldr	r2, [sp, #44]	; 0x2c
   1a354:	ldr	r0, [r5, #40]	; 0x28
   1a358:	mov	r1, r5
   1a35c:	add	r0, r0, r6
   1a360:	str	r0, [r5, #40]	; 0x28
   1a364:	add	r0, sp, #56	; 0x38
   1a368:	bl	1b474 <__assert_fail@plt+0x9d4c>
   1a36c:	mov	r3, r0
   1a370:	ldrb	r0, [sp, #60]	; 0x3c
   1a374:	cmp	r0, #21
   1a378:	beq	1a434 <__assert_fail@plt+0x8d0c>
   1a37c:	cmp	r0, #2
   1a380:	beq	1aa50 <__assert_fail@plt+0x9328>
   1a384:	ldr	r8, [sp, #44]	; 0x2c
   1a388:	mov	r0, #3
   1a38c:	add	r2, sp, #56	; 0x38
   1a390:	str	r0, [fp, #-48]	; 0xffffffd0
   1a394:	add	r0, sp, #64	; 0x40
   1a398:	str	r0, [fp, #-44]	; 0xffffffd4
   1a39c:	mov	r0, #1
   1a3a0:	str	r0, [sp, #4]
   1a3a4:	sub	r0, fp, #48	; 0x30
   1a3a8:	str	r8, [sp]
   1a3ac:	ldr	r5, [sp, #48]	; 0x30
   1a3b0:	mov	r1, r5
   1a3b4:	bl	1b5dc <__assert_fail@plt+0x9eb4>
   1a3b8:	cmp	r0, #0
   1a3bc:	bne	1b174 <__assert_fail@plt+0x9a4c>
   1a3c0:	ldr	r0, [sp, #28]
   1a3c4:	mov	r1, r5
   1a3c8:	mov	r2, r8
   1a3cc:	bl	1b474 <__assert_fail@plt+0x9d4c>
   1a3d0:	ldr	r6, [fp, #-48]	; 0xffffffd0
   1a3d4:	mov	sl, #11
   1a3d8:	str	r0, [sp, #32]
   1a3dc:	cmp	r6, #2
   1a3e0:	cmpne	r6, #4
   1a3e4:	beq	1aa50 <__assert_fail@plt+0x9328>
   1a3e8:	cmp	r7, #3
   1a3ec:	bne	1a400 <__assert_fail@plt+0x8cd8>
   1a3f0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a3f4:	bl	115cc <strlen@plt>
   1a3f8:	cmp	r0, #1
   1a3fc:	bhi	1aa4c <__assert_fail@plt+0x9324>
   1a400:	cmp	r6, #3
   1a404:	bne	1a418 <__assert_fail@plt+0x8cf0>
   1a408:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a40c:	bl	115cc <strlen@plt>
   1a410:	cmp	r0, #1
   1a414:	bhi	1aa4c <__assert_fail@plt+0x9324>
   1a418:	ldr	r2, [sp, #28]
   1a41c:	cmp	r7, #3
   1a420:	beq	1a598 <__assert_fail@plt+0x8e70>
   1a424:	mov	r8, #0
   1a428:	cmp	r7, #0
   1a42c:	ldrbeq	r8, [fp, #-36]	; 0xffffffdc
   1a430:	b	1a5a0 <__assert_fail@plt+0x8e78>
   1a434:	ldr	r0, [r5, #40]	; 0x28
   1a438:	ldr	r2, [sp, #28]
   1a43c:	sub	r0, r0, r6
   1a440:	str	r0, [r5, #40]	; 0x28
   1a444:	mov	r0, #1
   1a448:	strb	r0, [r2, #4]
   1a44c:	cmp	r7, #1
   1a450:	beq	1a53c <__assert_fail@plt+0x8e14>
   1a454:	ldr	r9, [sp, #24]
   1a458:	ldr	sl, [sp, #32]
   1a45c:	cmp	r7, #2
   1a460:	mov	r8, #0
   1a464:	beq	1a4ac <__assert_fail@plt+0x8d84>
   1a468:	cmp	r7, #3
   1a46c:	mov	r7, #1
   1a470:	bne	1a57c <__assert_fail@plt+0x8e54>
   1a474:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1a478:	mov	r0, r5
   1a47c:	bl	115cc <strlen@plt>
   1a480:	ldr	r6, [sp, #48]	; 0x30
   1a484:	cmp	r0, #1
   1a488:	bne	1aa4c <__assert_fail@plt+0x9324>
   1a48c:	ldrb	r0, [r5]
   1a490:	ubfx	r1, r0, #5, #3
   1a494:	and	r0, r0, #31
   1a498:	ldr	r2, [r4, r1, lsl #2]
   1a49c:	orr	r0, r2, r7, lsl r0
   1a4a0:	str	r0, [r4, r1, lsl #2]
   1a4a4:	str	r8, [r9]
   1a4a8:	b	1a4e4 <__assert_fail@plt+0x8dbc>
   1a4ac:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1a4b0:	mov	r0, r5
   1a4b4:	bl	115cc <strlen@plt>
   1a4b8:	cmp	r0, #1
   1a4bc:	mov	r3, #1
   1a4c0:	bne	1aa48 <__assert_fail@plt+0x9320>
   1a4c4:	ldrb	r0, [r5]
   1a4c8:	ubfx	r1, r0, #5, #3
   1a4cc:	and	r0, r0, #31
   1a4d0:	ldr	r2, [r4, r1, lsl #2]
   1a4d4:	orr	r0, r2, r3, lsl r0
   1a4d8:	str	r0, [r4, r1, lsl #2]
   1a4dc:	str	r8, [r9]
   1a4e0:	ldr	r6, [sp, #48]	; 0x30
   1a4e4:	ldr	r2, [sp, #28]
   1a4e8:	ldr	r5, [sp, #52]	; 0x34
   1a4ec:	ldrb	r0, [r2, #4]
   1a4f0:	cmp	r0, #21
   1a4f4:	beq	1a780 <__assert_fail@plt+0x9058>
   1a4f8:	cmp	r0, #2
   1a4fc:	ldr	r0, [sp, #44]	; 0x2c
   1a500:	beq	1aa0c <__assert_fail@plt+0x92e4>
   1a504:	mov	r1, #3
   1a508:	mov	r3, sl
   1a50c:	mov	r5, r2
   1a510:	str	r1, [fp, #-40]	; 0xffffffd8
   1a514:	sub	r1, fp, #80	; 0x50
   1a518:	str	r1, [fp, #-36]	; 0xffffffdc
   1a51c:	stm	sp, {r0, r8}
   1a520:	sub	r0, fp, #40	; 0x28
   1a524:	mov	r1, r6
   1a528:	bl	1b5dc <__assert_fail@plt+0x9eb4>
   1a52c:	ldr	r2, [sp, #44]	; 0x2c
   1a530:	cmp	r0, #0
   1a534:	beq	1a2bc <__assert_fail@plt+0x8b94>
   1a538:	b	1aa04 <__assert_fail@plt+0x92dc>
   1a53c:	ldr	r3, [sp, #40]	; 0x28
   1a540:	ldr	r0, [sp, #16]
   1a544:	mov	r8, #0
   1a548:	ldr	r1, [r3, #20]
   1a54c:	cmp	r0, r1
   1a550:	beq	1a6e0 <__assert_fail@plt+0x8fb8>
   1a554:	ldr	r0, [r3]
   1a558:	ldr	r9, [sp, #24]
   1a55c:	ldr	r6, [sp, #48]	; 0x30
   1a560:	ldr	r5, [sp, #52]	; 0x34
   1a564:	ldr	ip, [fp, #-36]	; 0xffffffdc
   1a568:	ldr	sl, [sp, #32]
   1a56c:	add	r7, r1, #1
   1a570:	str	r7, [r3, #20]
   1a574:	str	ip, [r0, r1, lsl #2]
   1a578:	b	1a4ec <__assert_fail@plt+0x8dc4>
   1a57c:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   1a580:	ubfx	r1, r0, #5, #3
   1a584:	and	r0, r0, #31
   1a588:	ldr	r2, [r4, r1, lsl #2]
   1a58c:	orr	r0, r2, r7, lsl r0
   1a590:	str	r0, [r4, r1, lsl #2]
   1a594:	b	1a4e0 <__assert_fail@plt+0x8db8>
   1a598:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a59c:	ldrb	r8, [r0]
   1a5a0:	cmp	r6, #3
   1a5a4:	beq	1a5b8 <__assert_fail@plt+0x8e90>
   1a5a8:	mov	r9, #0
   1a5ac:	cmp	r6, #0
   1a5b0:	ldrbeq	r9, [fp, #-44]	; 0xffffffd4
   1a5b4:	b	1a5c0 <__assert_fail@plt+0x8e98>
   1a5b8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a5bc:	ldrb	r9, [r0]
   1a5c0:	cmp	r7, #3
   1a5c4:	cmpne	r7, #0
   1a5c8:	bne	1a5f0 <__assert_fail@plt+0x8ec8>
   1a5cc:	ldr	r0, [sp, #52]	; 0x34
   1a5d0:	ldr	r0, [r0, #92]	; 0x5c
   1a5d4:	cmp	r0, #2
   1a5d8:	blt	1a5f4 <__assert_fail@plt+0x8ecc>
   1a5dc:	mov	r0, r8
   1a5e0:	bl	1162c <btowc@plt>
   1a5e4:	ldr	r2, [sp, #28]
   1a5e8:	mov	r8, r0
   1a5ec:	b	1a5f4 <__assert_fail@plt+0x8ecc>
   1a5f0:	ldr	r8, [fp, #-36]	; 0xffffffdc
   1a5f4:	cmp	r6, #3
   1a5f8:	cmpne	r6, #0
   1a5fc:	bne	1a624 <__assert_fail@plt+0x8efc>
   1a600:	ldr	r0, [sp, #52]	; 0x34
   1a604:	ldr	r0, [r0, #92]	; 0x5c
   1a608:	cmp	r0, #2
   1a60c:	blt	1a628 <__assert_fail@plt+0x8f00>
   1a610:	mov	r0, r9
   1a614:	bl	1162c <btowc@plt>
   1a618:	ldr	r2, [sp, #28]
   1a61c:	mov	r9, r0
   1a620:	b	1a628 <__assert_fail@plt+0x8f00>
   1a624:	ldr	r9, [fp, #-44]	; 0xffffffd4
   1a628:	cmn	r8, #1
   1a62c:	mov	sl, #3
   1a630:	cmnne	r9, #1
   1a634:	beq	1aa50 <__assert_fail@plt+0x9328>
   1a638:	ldr	r0, [sp, #20]
   1a63c:	cmp	r0, #0
   1a640:	beq	1a650 <__assert_fail@plt+0x8f28>
   1a644:	cmp	r8, r9
   1a648:	mov	sl, #11
   1a64c:	bhi	1aa50 <__assert_fail@plt+0x9328>
   1a650:	ldr	r0, [sp, #52]	; 0x34
   1a654:	ldr	r0, [r0, #92]	; 0x5c
   1a658:	cmp	r0, #2
   1a65c:	blt	1a694 <__assert_fail@plt+0x8f6c>
   1a660:	ldr	r7, [sp, #40]	; 0x28
   1a664:	ldr	r1, [sp, #12]
   1a668:	ldr	r6, [sp, #48]	; 0x30
   1a66c:	ldr	r0, [r7, #32]
   1a670:	cmp	r1, r0
   1a674:	beq	1a728 <__assert_fail@plt+0x9000>
   1a678:	ldmib	r7, {r5, sl}
   1a67c:	str	r8, [r5, r0, lsl #2]
   1a680:	ldr	r0, [r7, #32]
   1a684:	add	r1, r0, #1
   1a688:	str	r1, [r7, #32]
   1a68c:	str	r9, [sl, r0, lsl #2]
   1a690:	b	1a698 <__assert_fail@plt+0x8f70>
   1a694:	ldr	r6, [sp, #48]	; 0x30
   1a698:	ldr	sl, [sp, #32]
   1a69c:	mov	r0, #0
   1a6a0:	mov	r5, #1
   1a6a4:	cmp	r8, r0
   1a6a8:	cmpls	r0, r9
   1a6ac:	ubfxls	r1, r0, #5, #3
   1a6b0:	andls	r3, r0, #31
   1a6b4:	add	r0, r0, #1
   1a6b8:	ldrls	r7, [r4, r1, lsl #2]
   1a6bc:	orrls	r3, r7, r5, lsl r3
   1a6c0:	strls	r3, [r4, r1, lsl #2]
   1a6c4:	cmp	r0, #256	; 0x100
   1a6c8:	bne	1a6a4 <__assert_fail@plt+0x8f7c>
   1a6cc:	ldr	r9, [sp, #24]
   1a6d0:	ldr	r5, [sp, #52]	; 0x34
   1a6d4:	mov	r8, #0
   1a6d8:	str	r8, [r9]
   1a6dc:	b	1a4ec <__assert_fail@plt+0x8dc4>
   1a6e0:	ldr	r1, [sp, #16]
   1a6e4:	mov	r0, #1
   1a6e8:	orr	r1, r0, r1, lsl #1
   1a6ec:	ldr	r0, [r3]
   1a6f0:	str	r1, [sp, #16]
   1a6f4:	lsl	r1, r1, #2
   1a6f8:	bl	22ad0 <__assert_fail@plt+0x113a8>
   1a6fc:	cmp	r0, #0
   1a700:	beq	1b17c <__assert_fail@plt+0x9a54>
   1a704:	ldr	r3, [sp, #40]	; 0x28
   1a708:	ldr	r9, [sp, #24]
   1a70c:	ldr	r6, [sp, #48]	; 0x30
   1a710:	ldr	r2, [sp, #28]
   1a714:	ldr	r5, [sp, #52]	; 0x34
   1a718:	mov	r8, #0
   1a71c:	str	r0, [r3]
   1a720:	ldr	r1, [r3, #20]
   1a724:	b	1a564 <__assert_fail@plt+0x8e3c>
   1a728:	ldr	r1, [sp, #12]
   1a72c:	mov	r0, #1
   1a730:	orr	r1, r0, r1, lsl #1
   1a734:	ldr	r0, [r7, #4]
   1a738:	lsl	r6, r1, #2
   1a73c:	str	r1, [sp, #12]
   1a740:	mov	r1, r6
   1a744:	bl	22ad0 <__assert_fail@plt+0x113a8>
   1a748:	mov	r5, r0
   1a74c:	ldr	r0, [r7, #8]
   1a750:	mov	r1, r6
   1a754:	bl	22ad0 <__assert_fail@plt+0x113a8>
   1a758:	mov	sl, r0
   1a75c:	cmp	r5, #0
   1a760:	cmpne	sl, #0
   1a764:	beq	1b18c <__assert_fail@plt+0x9a64>
   1a768:	ldr	r7, [sp, #40]	; 0x28
   1a76c:	stmib	r7, {r5, sl}
   1a770:	ldr	r0, [r7, #32]
   1a774:	ldr	r6, [sp, #48]	; 0x30
   1a778:	ldr	r2, [sp, #28]
   1a77c:	b	1a67c <__assert_fail@plt+0x8f54>
   1a780:	ldr	r0, [r6, #40]	; 0x28
   1a784:	add	r0, r0, sl
   1a788:	str	r0, [r6, #40]	; 0x28
   1a78c:	ldr	r0, [sp, #36]	; 0x24
   1a790:	cmp	r0, #0
   1a794:	beq	1a7b8 <__assert_fail@plt+0x9090>
   1a798:	mov	r0, #0
   1a79c:	add	r1, r4, r0
   1a7a0:	add	r0, r0, #16
   1a7a4:	vld1.32	{d16-d17}, [r1]
   1a7a8:	cmp	r0, #32
   1a7ac:	vmvn	q8, q8
   1a7b0:	vst1.32	{d16-d17}, [r1]
   1a7b4:	bne	1a79c <__assert_fail@plt+0x9074>
   1a7b8:	ldr	r0, [r5, #92]	; 0x5c
   1a7bc:	ldr	r8, [sp, #40]	; 0x28
   1a7c0:	cmp	r0, #2
   1a7c4:	blt	1a7ec <__assert_fail@plt+0x90c4>
   1a7c8:	ldr	r1, [r5, #60]	; 0x3c
   1a7cc:	mov	r2, #0
   1a7d0:	ldr	r3, [r1, r2, lsl #2]
   1a7d4:	ldr	r7, [r4, r2, lsl #2]
   1a7d8:	and	r3, r7, r3
   1a7dc:	str	r3, [r4, r2, lsl #2]
   1a7e0:	add	r2, r2, #1
   1a7e4:	cmp	r2, #8
   1a7e8:	bne	1a7d0 <__assert_fail@plt+0x90a8>
   1a7ec:	ldr	r1, [r8, #20]
   1a7f0:	cmp	r1, #0
   1a7f4:	bne	1a81c <__assert_fail@plt+0x90f4>
   1a7f8:	ldr	r1, [r8, #24]
   1a7fc:	cmp	r1, #0
   1a800:	bne	1a81c <__assert_fail@plt+0x90f4>
   1a804:	ldr	r1, [r8, #28]
   1a808:	cmp	r1, #0
   1a80c:	bne	1a81c <__assert_fail@plt+0x90f4>
   1a810:	ldr	r1, [r8, #32]
   1a814:	cmp	r1, #0
   1a818:	beq	1a9b4 <__assert_fail@plt+0x928c>
   1a81c:	ldrb	r0, [r5, #88]	; 0x58
   1a820:	add	r3, sp, #64	; 0x40
   1a824:	mov	r1, #0
   1a828:	mov	r2, #0
   1a82c:	orr	r0, r0, #2
   1a830:	strb	r0, [r5, #88]	; 0x58
   1a834:	mov	r0, #6
   1a838:	str	r8, [sp, #64]	; 0x40
   1a83c:	str	r0, [sp, #68]	; 0x44
   1a840:	mov	r0, r5
   1a844:	mov	r5, #0
   1a848:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1a84c:	ldr	r6, [sp, #48]	; 0x30
   1a850:	cmp	r0, #0
   1a854:	beq	1a8d8 <__assert_fail@plt+0x91b0>
   1a858:	mov	r7, r0
   1a85c:	ldr	r0, [r4, r5, lsl #2]
   1a860:	cmp	r0, #0
   1a864:	bne	1a880 <__assert_fail@plt+0x9158>
   1a868:	add	r5, r5, #1
   1a86c:	cmp	r5, #7
   1a870:	bls	1a85c <__assert_fail@plt+0x9134>
   1a874:	mov	r0, r4
   1a878:	bl	132d4 <__assert_fail@plt+0x1bac>
   1a87c:	b	1aa74 <__assert_fail@plt+0x934c>
   1a880:	mov	r0, #3
   1a884:	str	r4, [sp, #64]	; 0x40
   1a888:	add	r3, sp, #64	; 0x40
   1a88c:	mov	r1, #0
   1a890:	mov	r2, #0
   1a894:	mov	r5, #0
   1a898:	str	r0, [sp, #68]	; 0x44
   1a89c:	ldr	r0, [sp, #52]	; 0x34
   1a8a0:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1a8a4:	cmp	r0, #0
   1a8a8:	beq	1a8d8 <__assert_fail@plt+0x91b0>
   1a8ac:	mov	r1, r0
   1a8b0:	mov	r0, #10
   1a8b4:	sub	r3, fp, #80	; 0x50
   1a8b8:	mov	r2, r7
   1a8bc:	str	r0, [fp, #-76]	; 0xffffffb4
   1a8c0:	ldr	r0, [sp, #52]	; 0x34
   1a8c4:	str	r5, [fp, #-80]	; 0xffffffb0
   1a8c8:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1a8cc:	mov	r7, r0
   1a8d0:	cmp	r0, #0
   1a8d4:	bne	1aa74 <__assert_fail@plt+0x934c>
   1a8d8:	mov	r0, #12
   1a8dc:	b	1aa1c <__assert_fail@plt+0x92f4>
   1a8e0:	mov	r4, #9
   1a8e4:	mov	r0, #6
   1a8e8:	ldr	r5, [sp, #52]	; 0x34
   1a8ec:	str	r0, [r7]
   1a8f0:	mov	r1, #0
   1a8f4:	mov	r2, #0
   1a8f8:	mov	r3, r7
   1a8fc:	mov	sl, #0
   1a900:	mov	r0, r5
   1a904:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1a908:	mov	r8, r0
   1a90c:	mov	r0, r5
   1a910:	mov	r1, #0
   1a914:	mov	r2, #0
   1a918:	mov	r3, r7
   1a91c:	str	r4, [r7]
   1a920:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1a924:	mov	r7, r0
   1a928:	mov	r0, #10
   1a92c:	sub	r3, fp, #80	; 0x50
   1a930:	mov	r1, r8
   1a934:	str	r0, [fp, #-76]	; 0xffffffb4
   1a938:	mov	r0, r5
   1a93c:	mov	r2, r7
   1a940:	str	sl, [fp, #-80]	; 0xffffffb0
   1a944:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1a948:	cmp	r8, #0
   1a94c:	cmpne	r7, #0
   1a950:	bne	1a974 <__assert_fail@plt+0x924c>
   1a954:	mov	r0, #12
   1a958:	str	r0, [r9]
   1a95c:	b	1b024 <__assert_fail@plt+0x98fc>
   1a960:	mov	r1, #0
   1a964:	mov	r2, #0
   1a968:	mov	r3, r7
   1a96c:	mov	sl, #0
   1a970:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1a974:	mov	r5, r0
   1a978:	cmp	r0, #0
   1a97c:	beq	1a954 <__assert_fail@plt+0x922c>
   1a980:	ldr	r0, [sp, #28]
   1a984:	ldr	r2, [sp, #44]	; 0x2c
   1a988:	mov	r1, r6
   1a98c:	bl	19370 <__assert_fail@plt+0x7c48>
   1a990:	ldr	r1, [r6, #40]	; 0x28
   1a994:	mov	sl, r5
   1a998:	add	r0, r1, r0
   1a99c:	str	r0, [r6, #40]	; 0x28
   1a9a0:	b	1b024 <__assert_fail@plt+0x98fc>
   1a9a4:	mov	r6, r5
   1a9a8:	b	1aaa0 <__assert_fail@plt+0x9378>
   1a9ac:	mov	r6, r5
   1a9b0:	b	1aa98 <__assert_fail@plt+0x9370>
   1a9b4:	cmp	r0, #2
   1a9b8:	blt	1a9d4 <__assert_fail@plt+0x92ac>
   1a9bc:	ldr	r0, [r8, #36]	; 0x24
   1a9c0:	cmp	r0, #0
   1a9c4:	bne	1a81c <__assert_fail@plt+0x90f4>
   1a9c8:	ldrb	r0, [r8, #16]
   1a9cc:	tst	r0, #1
   1a9d0:	bne	1a81c <__assert_fail@plt+0x90f4>
   1a9d4:	mov	r0, r8
   1a9d8:	bl	1884c <__assert_fail@plt+0x7124>
   1a9dc:	mov	r0, #3
   1a9e0:	str	r4, [sp, #64]	; 0x40
   1a9e4:	add	r3, sp, #64	; 0x40
   1a9e8:	mov	r1, #0
   1a9ec:	mov	r2, #0
   1a9f0:	str	r0, [sp, #68]	; 0x44
   1a9f4:	mov	r0, r5
   1a9f8:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1a9fc:	ldr	r6, [sp, #48]	; 0x30
   1aa00:	b	1a8cc <__assert_fail@plt+0x91a4>
   1aa04:	mov	sl, r0
   1aa08:	b	1aa10 <__assert_fail@plt+0x92e8>
   1aa0c:	mov	sl, #7
   1aa10:	str	r9, [sp, #24]
   1aa14:	b	1aa50 <__assert_fail@plt+0x9328>
   1aa18:	mov	r0, #2
   1aa1c:	str	r0, [r9]
   1aa20:	b	1aa60 <__assert_fail@plt+0x9338>
   1aa24:	mov	r0, #6
   1aa28:	b	1a958 <__assert_fail@plt+0x9230>
   1aa2c:	mov	r0, r4
   1aa30:	bl	132d4 <__assert_fail@plt+0x1bac>
   1aa34:	mov	r0, r8
   1aa38:	bl	132d4 <__assert_fail@plt+0x1bac>
   1aa3c:	mov	r0, #12
   1aa40:	str	r0, [r9]
   1aa44:	b	1aa74 <__assert_fail@plt+0x934c>
   1aa48:	str	r9, [sp, #24]
   1aa4c:	mov	sl, #3
   1aa50:	ldr	r9, [sp, #24]
   1aa54:	ldr	r6, [sp, #48]	; 0x30
   1aa58:	str	sl, [r9]
   1aa5c:	ldr	r8, [sp, #40]	; 0x28
   1aa60:	mov	r0, r4
   1aa64:	bl	132d4 <__assert_fail@plt+0x1bac>
   1aa68:	mov	r0, r8
   1aa6c:	bl	1884c <__assert_fail@plt+0x7124>
   1aa70:	mov	r7, #0
   1aa74:	mov	r4, r7
   1aa78:	cmp	r7, #0
   1aa7c:	bne	1aa98 <__assert_fail@plt+0x9370>
   1aa80:	ldr	r0, [r9]
   1aa84:	ldr	r2, [sp, #44]	; 0x2c
   1aa88:	ldr	r3, [sp, #28]
   1aa8c:	cmp	r0, #0
   1aa90:	beq	1aaa0 <__assert_fail@plt+0x9378>
   1aa94:	b	1b020 <__assert_fail@plt+0x98f8>
   1aa98:	ldr	r2, [sp, #44]	; 0x2c
   1aa9c:	ldr	r3, [sp, #28]
   1aaa0:	mov	r0, r3
   1aaa4:	mov	r1, r6
   1aaa8:	str	r9, [sp, #24]
   1aaac:	bl	19370 <__assert_fail@plt+0x7c48>
   1aab0:	ldr	r1, [r6, #40]	; 0x28
   1aab4:	ldr	r2, [sp, #44]	; 0x2c
   1aab8:	ldr	r3, [sp, #28]
   1aabc:	sub	r7, fp, #80	; 0x50
   1aac0:	add	r0, r1, r0
   1aac4:	str	r0, [r6, #40]	; 0x28
   1aac8:	and	r0, r2, #2097152	; 0x200000
   1aacc:	str	r0, [sp, #20]
   1aad0:	and	r0, r2, #16777216	; 0x1000000
   1aad4:	str	r0, [sp, #32]
   1aad8:	ldrb	r0, [r3, #4]
   1aadc:	cmp	r0, #23
   1aae0:	bhi	1afb4 <__assert_fail@plt+0x988c>
   1aae4:	movw	r6, #2048	; 0x800
   1aae8:	mov	r1, #1
   1aaec:	movt	r6, #140	; 0x8c
   1aaf0:	tst	r6, r1, lsl r0
   1aaf4:	beq	1afb4 <__assert_fail@plt+0x988c>
   1aaf8:	cmp	r0, #23
   1aafc:	bne	1ab54 <__assert_fail@plt+0x942c>
   1ab00:	ldr	r0, [sp, #48]	; 0x30
   1ab04:	ldr	sl, [r3]
   1ab08:	ldr	r8, [r3, #4]
   1ab0c:	mov	r1, r3
   1ab10:	mov	r5, r3
   1ab14:	ldr	r9, [r0, #40]	; 0x28
   1ab18:	bl	1c120 <__assert_fail@plt+0xa9f8>
   1ab1c:	cmn	r0, #1
   1ab20:	bne	1ab70 <__assert_fail@plt+0x9448>
   1ab24:	ldrb	r0, [r5, #4]
   1ab28:	mov	r3, r5
   1ab2c:	cmp	r0, #1
   1ab30:	ldrbeq	r1, [r3]
   1ab34:	cmpeq	r1, #44	; 0x2c
   1ab38:	beq	1abd8 <__assert_fail@plt+0x94b0>
   1ab3c:	ldr	r0, [sp, #24]
   1ab40:	ldr	r2, [sp, #44]	; 0x2c
   1ab44:	mov	r1, #10
   1ab48:	mov	r5, #0
   1ab4c:	str	r1, [r0]
   1ab50:	b	1af28 <__assert_fail@plt+0x9800>
   1ab54:	cmp	r0, #19
   1ab58:	sub	r0, r0, #18
   1ab5c:	mvn	sl, #0
   1ab60:	clz	r0, r0
   1ab64:	movweq	sl, #1
   1ab68:	lsr	r6, r0, #5
   1ab6c:	b	1ac38 <__assert_fail@plt+0x9510>
   1ab70:	str	sl, [sp, #40]	; 0x28
   1ab74:	mov	r6, r0
   1ab78:	cmn	r0, #2
   1ab7c:	mov	r3, r5
   1ab80:	ldr	r2, [sp, #44]	; 0x2c
   1ab84:	beq	1abac <__assert_fail@plt+0x9484>
   1ab88:	ldr	r0, [r3, #4]
   1ab8c:	uxtb	r0, r0
   1ab90:	mov	sl, r6
   1ab94:	cmp	r0, #24
   1ab98:	beq	1ac08 <__assert_fail@plt+0x94e0>
   1ab9c:	cmp	r0, #1
   1aba0:	ldrbeq	r0, [r3]
   1aba4:	cmpeq	r0, #44	; 0x2c
   1aba8:	beq	1abe8 <__assert_fail@plt+0x94c0>
   1abac:	ldr	r0, [sp, #20]
   1abb0:	cmp	r0, #0
   1abb4:	beq	1af80 <__assert_fail@plt+0x9858>
   1abb8:	ldr	r0, [sp, #48]	; 0x30
   1abbc:	mov	r5, r4
   1abc0:	str	r9, [r0, #40]	; 0x28
   1abc4:	mov	r0, #1
   1abc8:	bfi	r8, r0, #0, #8
   1abcc:	ldr	r0, [sp, #40]	; 0x28
   1abd0:	stm	r3, {r0, r8}
   1abd4:	b	1af28 <__assert_fail@plt+0x9800>
   1abd8:	str	sl, [sp, #40]	; 0x28
   1abdc:	mov	r6, #0
   1abe0:	ldr	r2, [sp, #44]	; 0x2c
   1abe4:	b	1ab8c <__assert_fail@plt+0x9464>
   1abe8:	ldr	r0, [sp, #48]	; 0x30
   1abec:	mov	r1, r3
   1abf0:	bl	1c120 <__assert_fail@plt+0xa9f8>
   1abf4:	ldr	r3, [sp, #28]
   1abf8:	ldr	r2, [sp, #44]	; 0x2c
   1abfc:	mov	sl, r0
   1ac00:	cmn	r0, #2
   1ac04:	beq	1abac <__assert_fail@plt+0x9484>
   1ac08:	cmn	sl, #1
   1ac0c:	beq	1ac18 <__assert_fail@plt+0x94f0>
   1ac10:	cmp	r6, sl
   1ac14:	bgt	1af74 <__assert_fail@plt+0x984c>
   1ac18:	ldrb	r0, [r3, #4]
   1ac1c:	cmp	r0, #24
   1ac20:	bne	1af74 <__assert_fail@plt+0x984c>
   1ac24:	cmn	sl, #1
   1ac28:	mov	r0, sl
   1ac2c:	moveq	r0, r6
   1ac30:	cmp	r0, #32768	; 0x8000
   1ac34:	bge	1afa0 <__assert_fail@plt+0x9878>
   1ac38:	ldr	r5, [sp, #48]	; 0x30
   1ac3c:	mov	r0, r3
   1ac40:	mov	r1, r5
   1ac44:	bl	19370 <__assert_fail@plt+0x7c48>
   1ac48:	ldr	r1, [r5, #40]	; 0x28
   1ac4c:	cmp	r4, #0
   1ac50:	add	r0, r1, r0
   1ac54:	str	r0, [r5, #40]	; 0x28
   1ac58:	mov	r5, #0
   1ac5c:	beq	1ae60 <__assert_fail@plt+0x9738>
   1ac60:	orrs	r0, sl, r6
   1ac64:	beq	1ae0c <__assert_fail@plt+0x96e4>
   1ac68:	mov	r0, #0
   1ac6c:	cmp	r6, #1
   1ac70:	mov	r8, r4
   1ac74:	str	r0, [sp, #40]	; 0x28
   1ac78:	str	r4, [sp, #36]	; 0x24
   1ac7c:	mov	r4, #10
   1ac80:	bge	1ae6c <__assert_fail@plt+0x9744>
   1ac84:	ldrb	r0, [r8, #24]
   1ac88:	cmp	r0, #17
   1ac8c:	ldr	r0, [sp, #52]	; 0x34
   1ac90:	bne	1ad00 <__assert_fail@plt+0x95d8>
   1ac94:	ldr	r5, [r8, #20]
   1ac98:	mov	r2, r8
   1ac9c:	mov	r1, r2
   1aca0:	ldr	r2, [r2, #4]
   1aca4:	cmp	r2, #0
   1aca8:	bne	1ac9c <__assert_fail@plt+0x9574>
   1acac:	ldr	r2, [r1, #8]
   1acb0:	cmp	r2, #0
   1acb4:	bne	1ac9c <__assert_fail@plt+0x9574>
   1acb8:	ldr	r2, [r1, #24]
   1acbc:	uxtb	r3, r2
   1acc0:	cmp	r3, #17
   1acc4:	ldreq	r3, [r1, #20]
   1acc8:	cmpeq	r3, r5
   1accc:	orreq	r2, r2, #524288	; 0x80000
   1acd0:	streq	r2, [r1, #24]
   1acd4:	ldr	r3, [r1]
   1acd8:	cmp	r3, #0
   1acdc:	beq	1ad00 <__assert_fail@plt+0x95d8>
   1ace0:	ldr	r2, [r3, #8]
   1ace4:	cmp	r2, r1
   1ace8:	mov	r1, r3
   1acec:	beq	1acb8 <__assert_fail@plt+0x9590>
   1acf0:	cmp	r2, #0
   1acf4:	mov	r1, r3
   1acf8:	beq	1acb8 <__assert_fail@plt+0x9590>
   1acfc:	b	1ac9c <__assert_fail@plt+0x9574>
   1ad00:	mov	r1, #0
   1ad04:	cmn	sl, #1
   1ad08:	mov	r2, #0
   1ad0c:	mov	r3, r7
   1ad10:	str	r1, [fp, #-80]	; 0xffffffb0
   1ad14:	mov	r1, #10
   1ad18:	movweq	r1, #11
   1ad1c:	str	r1, [fp, #-76]	; 0xffffffb4
   1ad20:	mov	r1, r8
   1ad24:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1ad28:	cmp	r0, #0
   1ad2c:	beq	1af0c <__assert_fail@plt+0x97e4>
   1ad30:	mov	r5, r0
   1ad34:	add	r0, r6, #2
   1ad38:	cmp	r0, sl
   1ad3c:	ble	1ad74 <__assert_fail@plt+0x964c>
   1ad40:	ldr	r1, [sp, #40]	; 0x28
   1ad44:	cmp	r1, #0
   1ad48:	beq	1adf8 <__assert_fail@plt+0x96d0>
   1ad4c:	mov	r0, #16
   1ad50:	mov	r2, r5
   1ad54:	mov	r3, r7
   1ad58:	str	r0, [fp, #-76]	; 0xffffffb4
   1ad5c:	mov	r0, #0
   1ad60:	str	r0, [fp, #-80]	; 0xffffffb0
   1ad64:	ldr	r0, [sp, #52]	; 0x34
   1ad68:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1ad6c:	mov	r5, r0
   1ad70:	b	1af1c <__assert_fail@plt+0x97f4>
   1ad74:	add	r6, r6, #1
   1ad78:	ldr	r9, [sp, #52]	; 0x34
   1ad7c:	mov	r0, r8
   1ad80:	mov	r1, r9
   1ad84:	bl	1c1d8 <__assert_fail@plt+0xaab0>
   1ad88:	mov	r8, r0
   1ad8c:	mov	r0, #16
   1ad90:	mov	r1, r5
   1ad94:	mov	r3, r7
   1ad98:	str	r0, [fp, #-76]	; 0xffffffb4
   1ad9c:	mov	r0, #0
   1ada0:	mov	r2, r8
   1ada4:	str	r0, [fp, #-80]	; 0xffffffb0
   1ada8:	mov	r0, r9
   1adac:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1adb0:	cmp	r8, #0
   1adb4:	movne	r1, r0
   1adb8:	cmpne	r0, #0
   1adbc:	beq	1af0c <__assert_fail@plt+0x97e4>
   1adc0:	mov	r0, #0
   1adc4:	str	r4, [fp, #-76]	; 0xffffffb4
   1adc8:	mov	r2, #0
   1adcc:	mov	r3, r7
   1add0:	str	r0, [fp, #-80]	; 0xffffffb0
   1add4:	ldr	r0, [sp, #52]	; 0x34
   1add8:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1addc:	cmp	r0, #0
   1ade0:	beq	1af0c <__assert_fail@plt+0x97e4>
   1ade4:	add	r6, r6, #1
   1ade8:	mov	r5, r0
   1adec:	cmp	r6, sl
   1adf0:	blt	1ad78 <__assert_fail@plt+0x9650>
   1adf4:	b	1ad40 <__assert_fail@plt+0x9618>
   1adf8:	ldr	r2, [sp, #44]	; 0x2c
   1adfc:	ldr	r3, [sp, #28]
   1ae00:	clz	r0, r5
   1ae04:	lsr	r0, r0, #5
   1ae08:	b	1af48 <__assert_fail@plt+0x9820>
   1ae0c:	mov	r0, r4
   1ae10:	mov	r6, r0
   1ae14:	ldr	r0, [r0, #4]
   1ae18:	cmp	r0, #0
   1ae1c:	bne	1ae10 <__assert_fail@plt+0x96e8>
   1ae20:	ldr	r0, [r6, #8]
   1ae24:	cmp	r0, #0
   1ae28:	bne	1ae10 <__assert_fail@plt+0x96e8>
   1ae2c:	add	r0, r6, #20
   1ae30:	bl	187bc <__assert_fail@plt+0x7094>
   1ae34:	ldr	r1, [r6]
   1ae38:	cmp	r1, #0
   1ae3c:	beq	1ae60 <__assert_fail@plt+0x9738>
   1ae40:	ldr	r0, [r1, #8]
   1ae44:	cmp	r0, r6
   1ae48:	mov	r6, r1
   1ae4c:	beq	1ae2c <__assert_fail@plt+0x9704>
   1ae50:	cmp	r0, #0
   1ae54:	mov	r6, r1
   1ae58:	beq	1ae2c <__assert_fail@plt+0x9704>
   1ae5c:	b	1ae10 <__assert_fail@plt+0x96e8>
   1ae60:	ldr	r2, [sp, #44]	; 0x2c
   1ae64:	ldr	r3, [sp, #28]
   1ae68:	b	1af28 <__assert_fail@plt+0x9800>
   1ae6c:	ldr	r9, [sp, #36]	; 0x24
   1ae70:	str	r9, [sp, #40]	; 0x28
   1ae74:	beq	1aee0 <__assert_fail@plt+0x97b8>
   1ae78:	ldr	r0, [sp, #36]	; 0x24
   1ae7c:	mov	r5, #1
   1ae80:	mov	r9, r0
   1ae84:	str	r0, [sp, #40]	; 0x28
   1ae88:	ldr	r8, [sp, #52]	; 0x34
   1ae8c:	mov	r0, r9
   1ae90:	mov	r1, r8
   1ae94:	bl	1c1d8 <__assert_fail@plt+0xaab0>
   1ae98:	ldr	r1, [sp, #40]	; 0x28
   1ae9c:	mov	r9, r0
   1aea0:	mov	r0, #16
   1aea4:	mov	r3, r7
   1aea8:	str	r0, [fp, #-76]	; 0xffffffb4
   1aeac:	mov	r0, #0
   1aeb0:	mov	r2, r9
   1aeb4:	str	r0, [fp, #-80]	; 0xffffffb0
   1aeb8:	mov	r0, r8
   1aebc:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1aec0:	str	r0, [sp, #40]	; 0x28
   1aec4:	cmp	r9, #0
   1aec8:	ldrne	r0, [sp, #40]	; 0x28
   1aecc:	cmpne	r0, #0
   1aed0:	beq	1af0c <__assert_fail@plt+0x97e4>
   1aed4:	add	r5, r5, #1
   1aed8:	cmp	r5, r6
   1aedc:	blt	1ae88 <__assert_fail@plt+0x9760>
   1aee0:	cmp	r6, sl
   1aee4:	bne	1aef4 <__assert_fail@plt+0x97cc>
   1aee8:	ldr	r2, [sp, #44]	; 0x2c
   1aeec:	ldr	r5, [sp, #40]	; 0x28
   1aef0:	b	1adfc <__assert_fail@plt+0x96d4>
   1aef4:	ldr	r1, [sp, #52]	; 0x34
   1aef8:	mov	r0, r9
   1aefc:	bl	1c1d8 <__assert_fail@plt+0xaab0>
   1af00:	mov	r8, r0
   1af04:	cmp	r0, #0
   1af08:	bne	1ac84 <__assert_fail@plt+0x955c>
   1af0c:	ldr	r0, [sp, #24]
   1af10:	mov	r1, #12
   1af14:	mov	r5, #0
   1af18:	str	r1, [r0]
   1af1c:	ldr	r2, [sp, #44]	; 0x2c
   1af20:	ldr	r3, [sp, #28]
   1af24:	ldr	r4, [sp, #36]	; 0x24
   1af28:	clz	r0, r5
   1af2c:	cmp	r5, #0
   1af30:	lsr	r0, r0, #5
   1af34:	bne	1af48 <__assert_fail@plt+0x9820>
   1af38:	ldr	r1, [sp, #24]
   1af3c:	ldr	r1, [r1]
   1af40:	cmp	r1, #0
   1af44:	bne	1b030 <__assert_fail@plt+0x9908>
   1af48:	ldr	r1, [sp, #32]
   1af4c:	mov	r4, r5
   1af50:	cmp	r1, #0
   1af54:	beq	1aad8 <__assert_fail@plt+0x93b0>
   1af58:	ldrb	r1, [r3, #4]
   1af5c:	cmp	r1, #23
   1af60:	beq	1afbc <__assert_fail@plt+0x9894>
   1af64:	cmp	r1, #11
   1af68:	mov	r4, r5
   1af6c:	bne	1aad8 <__assert_fail@plt+0x93b0>
   1af70:	b	1afbc <__assert_fail@plt+0x9894>
   1af74:	ldr	r0, [sp, #24]
   1af78:	mov	r1, #10
   1af7c:	b	1afa8 <__assert_fail@plt+0x9880>
   1af80:	ldrb	r0, [r3, #4]
   1af84:	ldr	r1, [sp, #24]
   1af88:	mov	r5, #0
   1af8c:	cmp	r0, #2
   1af90:	mov	r0, #10
   1af94:	movweq	r0, #9
   1af98:	str	r0, [r1]
   1af9c:	b	1af28 <__assert_fail@plt+0x9800>
   1afa0:	ldr	r0, [sp, #24]
   1afa4:	mov	r1, #15
   1afa8:	str	r1, [r0]
   1afac:	mov	r5, #0
   1afb0:	b	1af28 <__assert_fail@plt+0x9800>
   1afb4:	mov	sl, r4
   1afb8:	b	1b024 <__assert_fail@plt+0x98fc>
   1afbc:	cmp	r0, #0
   1afc0:	bne	1b014 <__assert_fail@plt+0x98ec>
   1afc4:	mov	r4, r5
   1afc8:	ldr	r5, [r5, #4]
   1afcc:	cmp	r5, #0
   1afd0:	bne	1afc4 <__assert_fail@plt+0x989c>
   1afd4:	ldr	r5, [r4, #8]
   1afd8:	cmp	r5, #0
   1afdc:	bne	1afc4 <__assert_fail@plt+0x989c>
   1afe0:	add	r0, r4, #20
   1afe4:	bl	187bc <__assert_fail@plt+0x7094>
   1afe8:	ldr	r0, [r4]
   1afec:	cmp	r0, #0
   1aff0:	beq	1b014 <__assert_fail@plt+0x98ec>
   1aff4:	ldr	r5, [r0, #8]
   1aff8:	cmp	r5, r4
   1affc:	mov	r4, r0
   1b000:	beq	1afe0 <__assert_fail@plt+0x98b8>
   1b004:	cmp	r5, #0
   1b008:	mov	r4, r0
   1b00c:	beq	1afe0 <__assert_fail@plt+0x98b8>
   1b010:	b	1afc4 <__assert_fail@plt+0x989c>
   1b014:	ldr	r1, [sp, #24]
   1b018:	mov	r0, #13
   1b01c:	str	r0, [r1]
   1b020:	mov	sl, #0
   1b024:	mov	r0, sl
   1b028:	sub	sp, fp, #28
   1b02c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b030:	mov	sl, #0
   1b034:	cmp	r4, #0
   1b038:	beq	1b024 <__assert_fail@plt+0x98fc>
   1b03c:	mov	r5, r4
   1b040:	ldr	r4, [r4, #4]
   1b044:	cmp	r4, #0
   1b048:	bne	1b03c <__assert_fail@plt+0x9914>
   1b04c:	ldr	r4, [r5, #8]
   1b050:	cmp	r4, #0
   1b054:	bne	1b03c <__assert_fail@plt+0x9914>
   1b058:	add	r0, r5, #20
   1b05c:	bl	187bc <__assert_fail@plt+0x7094>
   1b060:	ldr	r0, [r5]
   1b064:	cmp	r0, #0
   1b068:	beq	1b024 <__assert_fail@plt+0x98fc>
   1b06c:	ldr	r4, [r0, #8]
   1b070:	cmp	r4, r5
   1b074:	mov	r5, r0
   1b078:	beq	1b058 <__assert_fail@plt+0x9930>
   1b07c:	cmp	r4, #0
   1b080:	mov	r5, r0
   1b084:	beq	1b058 <__assert_fail@plt+0x9930>
   1b088:	b	1b03c <__assert_fail@plt+0x9914>
   1b08c:	mov	r4, #0
   1b090:	mov	r8, #0
   1b094:	b	1b0a0 <__assert_fail@plt+0x9978>
   1b098:	mov	r8, #4
   1b09c:	mov	r4, #128	; 0x80
   1b0a0:	bl	115b4 <__ctype_b_loc@plt>
   1b0a4:	ldr	r0, [r0]
   1b0a8:	ldr	r7, [sp, #28]
   1b0ac:	mov	r1, #1
   1b0b0:	add	r5, r0, r4, lsl #1
   1b0b4:	ldr	r0, [sp, #52]	; 0x34
   1b0b8:	mov	r3, #0
   1b0bc:	add	r0, r0, r8, lsl #2
   1b0c0:	add	r2, r0, #96	; 0x60
   1b0c4:	mov	r0, r5
   1b0c8:	add	r6, r4, r3
   1b0cc:	cmp	r6, #95	; 0x5f
   1b0d0:	beq	1b0e0 <__assert_fail@plt+0x99b8>
   1b0d4:	ldrh	r6, [r0]
   1b0d8:	ands	r6, r6, #8
   1b0dc:	beq	1b0ec <__assert_fail@plt+0x99c4>
   1b0e0:	ldr	r6, [r2]
   1b0e4:	orr	r6, r6, r1, lsl r3
   1b0e8:	str	r6, [r2]
   1b0ec:	add	r3, r3, #1
   1b0f0:	add	r0, r0, #2
   1b0f4:	cmp	r3, #32
   1b0f8:	bne	1b0c8 <__assert_fail@plt+0x99a0>
   1b0fc:	add	r8, r8, #1
   1b100:	add	r5, r5, #64	; 0x40
   1b104:	add	r4, r4, #32
   1b108:	cmp	r8, #8
   1b10c:	bne	1b0b4 <__assert_fail@plt+0x998c>
   1b110:	b	1a020 <__assert_fail@plt+0x88f8>
   1b114:	cmp	r1, #0
   1b118:	beq	1b16c <__assert_fail@plt+0x9a44>
   1b11c:	mov	r5, r1
   1b120:	ldr	r1, [r1, #4]
   1b124:	cmp	r1, #0
   1b128:	bne	1b11c <__assert_fail@plt+0x99f4>
   1b12c:	ldr	r1, [r5, #8]
   1b130:	cmp	r1, #0
   1b134:	bne	1b11c <__assert_fail@plt+0x99f4>
   1b138:	add	r0, r5, #20
   1b13c:	bl	187bc <__assert_fail@plt+0x7094>
   1b140:	ldr	r0, [r5]
   1b144:	cmp	r0, #0
   1b148:	beq	1b16c <__assert_fail@plt+0x9a44>
   1b14c:	ldr	r1, [r0, #8]
   1b150:	cmp	r1, r5
   1b154:	mov	r5, r0
   1b158:	beq	1b138 <__assert_fail@plt+0x9a10>
   1b15c:	cmp	r1, #0
   1b160:	mov	r5, r0
   1b164:	beq	1b138 <__assert_fail@plt+0x9a10>
   1b168:	b	1b11c <__assert_fail@plt+0x99f4>
   1b16c:	mov	r0, #8
   1b170:	b	1a958 <__assert_fail@plt+0x9230>
   1b174:	mov	sl, r0
   1b178:	b	1aa50 <__assert_fail@plt+0x9328>
   1b17c:	ldr	r9, [sp, #24]
   1b180:	ldr	r6, [sp, #48]	; 0x30
   1b184:	ldr	r8, [sp, #40]	; 0x28
   1b188:	b	1a8d8 <__assert_fail@plt+0x91b0>
   1b18c:	mov	r0, r5
   1b190:	bl	132d4 <__assert_fail@plt+0x1bac>
   1b194:	mov	r0, sl
   1b198:	bl	132d4 <__assert_fail@plt+0x1bac>
   1b19c:	mov	sl, #12
   1b1a0:	b	1aa50 <__assert_fail@plt+0x9328>
   1b1a4:	push	{r4, r5, r6, r7, fp, lr}
   1b1a8:	add	fp, sp, #16
   1b1ac:	mov	r5, r1
   1b1b0:	ldr	r1, [r0, #64]	; 0x40
   1b1b4:	mov	r6, r3
   1b1b8:	mov	r4, r2
   1b1bc:	mov	r7, r0
   1b1c0:	cmp	r1, #31
   1b1c4:	beq	1b21c <__assert_fail@plt+0x9af4>
   1b1c8:	ldr	r0, [r7, #56]	; 0x38
   1b1cc:	add	r2, r1, #1
   1b1d0:	add	r0, r0, r1, lsl #5
   1b1d4:	mov	r1, #0
   1b1d8:	cmp	r5, #0
   1b1dc:	str	r2, [r7, #64]	; 0x40
   1b1e0:	str	r1, [r0, #4]!
   1b1e4:	str	r5, [r0, #4]
   1b1e8:	str	r4, [r0, #8]
   1b1ec:	ldm	r6, {r2, r3}
   1b1f0:	str	r1, [r0, #12]
   1b1f4:	str	r1, [r0, #16]
   1b1f8:	mvn	r1, #0
   1b1fc:	str	r1, [r0, #28]
   1b200:	bic	r1, r3, #786432	; 0xc0000
   1b204:	str	r2, [r0, #20]
   1b208:	str	r1, [r0, #24]
   1b20c:	strne	r0, [r5]
   1b210:	cmp	r4, #0
   1b214:	strne	r0, [r4]
   1b218:	pop	{r4, r5, r6, r7, fp, pc}
   1b21c:	mov	r0, #996	; 0x3e4
   1b220:	bl	22aa0 <__assert_fail@plt+0x11378>
   1b224:	cmp	r0, #0
   1b228:	moveq	r0, #0
   1b22c:	popeq	{r4, r5, r6, r7, fp, pc}
   1b230:	ldr	r1, [r7, #56]	; 0x38
   1b234:	str	r1, [r0]
   1b238:	mov	r1, #0
   1b23c:	str	r1, [r7, #64]	; 0x40
   1b240:	str	r0, [r7, #56]	; 0x38
   1b244:	b	1b1cc <__assert_fail@plt+0x9aa4>
   1b248:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b24c:	add	fp, sp, #28
   1b250:	sub	sp, sp, #28
   1b254:	mov	sl, r1
   1b258:	mov	r9, r0
   1b25c:	mov	r7, #0
   1b260:	mov	r0, #32
   1b264:	mov	r1, #1
   1b268:	mov	r8, r3
   1b26c:	mov	r4, r2
   1b270:	str	r7, [sp, #16]
   1b274:	bl	22a4c <__assert_fail@plt+0x11324>
   1b278:	ldr	r1, [fp, #12]
   1b27c:	cmp	r0, #0
   1b280:	beq	1b430 <__assert_fail@plt+0x9d08>
   1b284:	mov	r5, r0
   1b288:	mov	r0, #40	; 0x28
   1b28c:	mov	r1, #1
   1b290:	bl	22a4c <__assert_fail@plt+0x11324>
   1b294:	cmp	r0, #0
   1b298:	beq	1b438 <__assert_fail@plt+0x9d10>
   1b29c:	mov	r6, r0
   1b2a0:	ldrb	r0, [r0, #16]
   1b2a4:	ldr	r1, [fp, #8]
   1b2a8:	mov	r7, #0
   1b2ac:	add	r3, sp, #16
   1b2b0:	mov	r2, r6
   1b2b4:	and	r0, r0, #254	; 0xfe
   1b2b8:	orr	r0, r0, r1
   1b2bc:	mov	r1, r5
   1b2c0:	strb	r0, [r6, #16]
   1b2c4:	mov	r0, sl
   1b2c8:	stm	sp, {r4, r7}
   1b2cc:	bl	1b894 <__assert_fail@plt+0xa16c>
   1b2d0:	cmp	r0, #0
   1b2d4:	bne	1b454 <__assert_fail@plt+0x9d2c>
   1b2d8:	ldrb	r0, [r8]
   1b2dc:	cmp	r0, #0
   1b2e0:	beq	1b30c <__assert_fail@plt+0x9be4>
   1b2e4:	add	r1, r8, #1
   1b2e8:	mov	r2, #1
   1b2ec:	ubfx	r3, r0, #5, #3
   1b2f0:	and	r0, r0, #31
   1b2f4:	ldr	r7, [r5, r3, lsl #2]
   1b2f8:	orr	r0, r7, r2, lsl r0
   1b2fc:	str	r0, [r5, r3, lsl #2]
   1b300:	ldrb	r0, [r1], #1
   1b304:	cmp	r0, #0
   1b308:	bne	1b2ec <__assert_fail@plt+0x9bc4>
   1b30c:	ldr	r0, [fp, #8]
   1b310:	cmp	r0, #0
   1b314:	beq	1b338 <__assert_fail@plt+0x9c10>
   1b318:	mov	r0, #0
   1b31c:	add	r1, r5, r0
   1b320:	add	r0, r0, #16
   1b324:	vld1.32	{d16-d17}, [r1]
   1b328:	cmp	r0, #32
   1b32c:	vmvn	q8, q8
   1b330:	vst1.32	{d16-d17}, [r1]
   1b334:	bne	1b31c <__assert_fail@plt+0x9bf4>
   1b338:	ldr	r0, [r9, #92]	; 0x5c
   1b33c:	cmp	r0, #2
   1b340:	blt	1b368 <__assert_fail@plt+0x9c40>
   1b344:	ldr	r0, [r9, #60]	; 0x3c
   1b348:	mov	r1, #0
   1b34c:	ldr	r2, [r0, r1, lsl #2]
   1b350:	ldr	r3, [r5, r1, lsl #2]
   1b354:	and	r2, r3, r2
   1b358:	str	r2, [r5, r1, lsl #2]
   1b35c:	add	r1, r1, #1
   1b360:	cmp	r1, #8
   1b364:	bne	1b34c <__assert_fail@plt+0x9c24>
   1b368:	mov	r0, #3
   1b36c:	add	r3, sp, #8
   1b370:	mov	r1, #0
   1b374:	mov	r2, #0
   1b378:	mov	r7, #0
   1b37c:	str	r0, [sp, #12]
   1b380:	mov	r0, r9
   1b384:	str	r5, [sp, #8]
   1b388:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1b38c:	cmp	r0, #0
   1b390:	beq	1b41c <__assert_fail@plt+0x9cf4>
   1b394:	mov	r4, r0
   1b398:	ldr	r0, [r9, #92]	; 0x5c
   1b39c:	cmp	r0, #2
   1b3a0:	blt	1b404 <__assert_fail@plt+0x9cdc>
   1b3a4:	mov	r0, #6
   1b3a8:	str	r6, [sp, #8]
   1b3ac:	add	r3, sp, #8
   1b3b0:	mov	r1, #0
   1b3b4:	mov	r2, #0
   1b3b8:	mov	r8, #0
   1b3bc:	str	r0, [sp, #12]
   1b3c0:	ldrb	r0, [r9, #88]	; 0x58
   1b3c4:	orr	r0, r0, #2
   1b3c8:	strb	r0, [r9, #88]	; 0x58
   1b3cc:	mov	r0, r9
   1b3d0:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1b3d4:	cmp	r0, #0
   1b3d8:	beq	1b41c <__assert_fail@plt+0x9cf4>
   1b3dc:	mov	r2, r0
   1b3e0:	mov	r0, #10
   1b3e4:	add	r3, sp, #20
   1b3e8:	mov	r1, r4
   1b3ec:	str	r0, [sp, #24]
   1b3f0:	mov	r0, r9
   1b3f4:	str	r8, [sp, #20]
   1b3f8:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1b3fc:	mov	r7, r0
   1b400:	b	1b410 <__assert_fail@plt+0x9ce8>
   1b404:	mov	r0, r6
   1b408:	bl	1884c <__assert_fail@plt+0x7124>
   1b40c:	mov	r7, r4
   1b410:	mov	r0, r7
   1b414:	sub	sp, fp, #28
   1b418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b41c:	mov	r0, r5
   1b420:	bl	132d4 <__assert_fail@plt+0x1bac>
   1b424:	mov	r0, r6
   1b428:	bl	1884c <__assert_fail@plt+0x7124>
   1b42c:	ldr	r1, [fp, #12]
   1b430:	mov	r0, #12
   1b434:	b	1b44c <__assert_fail@plt+0x9d24>
   1b438:	mov	r0, r5
   1b43c:	bl	132d4 <__assert_fail@plt+0x1bac>
   1b440:	ldr	r1, [fp, #12]
   1b444:	mov	r0, #12
   1b448:	mov	r7, #0
   1b44c:	str	r0, [r1]
   1b450:	b	1b410 <__assert_fail@plt+0x9ce8>
   1b454:	mov	r4, r0
   1b458:	mov	r0, r5
   1b45c:	bl	132d4 <__assert_fail@plt+0x1bac>
   1b460:	mov	r0, r6
   1b464:	bl	1884c <__assert_fail@plt+0x7124>
   1b468:	ldr	r0, [fp, #12]
   1b46c:	str	r4, [r0]
   1b470:	b	1b410 <__assert_fail@plt+0x9ce8>
   1b474:	push	{fp, lr}
   1b478:	mov	fp, sp
   1b47c:	ldr	ip, [r1, #40]	; 0x28
   1b480:	ldr	r3, [r1, #56]	; 0x38
   1b484:	cmp	r3, ip
   1b488:	ble	1b504 <__assert_fail@plt+0x9ddc>
   1b48c:	ldr	r3, [r1, #4]
   1b490:	ldrb	lr, [r3, ip]
   1b494:	strb	lr, [r0]
   1b498:	ldr	r3, [r1, #80]	; 0x50
   1b49c:	cmp	r3, #2
   1b4a0:	blt	1b4c4 <__assert_fail@plt+0x9d9c>
   1b4a4:	ldr	r3, [r1, #28]
   1b4a8:	ldr	ip, [r1, #40]	; 0x28
   1b4ac:	cmp	ip, r3
   1b4b0:	beq	1b4c4 <__assert_fail@plt+0x9d9c>
   1b4b4:	ldr	r3, [r1, #8]
   1b4b8:	ldr	r3, [r3, ip, lsl #2]
   1b4bc:	cmn	r3, #1
   1b4c0:	beq	1b5ac <__assert_fail@plt+0x9e84>
   1b4c4:	tst	r2, #1
   1b4c8:	beq	1b514 <__assert_fail@plt+0x9dec>
   1b4cc:	cmp	lr, #92	; 0x5c
   1b4d0:	bne	1b514 <__assert_fail@plt+0x9dec>
   1b4d4:	ldr	r2, [r1, #40]	; 0x28
   1b4d8:	ldr	r3, [r1, #48]	; 0x30
   1b4dc:	add	r2, r2, #1
   1b4e0:	cmp	r2, r3
   1b4e4:	bge	1b5ac <__assert_fail@plt+0x9e84>
   1b4e8:	str	r2, [r1, #40]	; 0x28
   1b4ec:	ldr	r1, [r1, #4]
   1b4f0:	ldrb	r2, [r1, r2]
   1b4f4:	mov	r1, #1
   1b4f8:	strb	r1, [r0, #4]
   1b4fc:	strb	r2, [r0]
   1b500:	b	1b5b4 <__assert_fail@plt+0x9e8c>
   1b504:	mov	r1, #2
   1b508:	strb	r1, [r0, #4]
   1b50c:	mov	r1, #0
   1b510:	b	1b5b4 <__assert_fail@plt+0x9e8c>
   1b514:	cmp	lr, #92	; 0x5c
   1b518:	bgt	1b56c <__assert_fail@plt+0x9e44>
   1b51c:	cmp	lr, #45	; 0x2d
   1b520:	beq	1b584 <__assert_fail@plt+0x9e5c>
   1b524:	cmp	lr, #91	; 0x5b
   1b528:	bne	1b5ac <__assert_fail@plt+0x9e84>
   1b52c:	ldr	r3, [r1, #40]	; 0x28
   1b530:	ldr	ip, [r1, #48]	; 0x30
   1b534:	add	r3, r3, #1
   1b538:	cmp	r3, ip
   1b53c:	bge	1b59c <__assert_fail@plt+0x9e74>
   1b540:	ldr	r1, [r1, #4]
   1b544:	ldrb	r1, [r1, r3]
   1b548:	cmp	r1, #61	; 0x3d
   1b54c:	strb	r1, [r0]
   1b550:	beq	1b5bc <__assert_fail@plt+0x9e94>
   1b554:	cmp	r1, #58	; 0x3a
   1b558:	beq	1b5c4 <__assert_fail@plt+0x9e9c>
   1b55c:	cmp	r1, #46	; 0x2e
   1b560:	bne	1b5a4 <__assert_fail@plt+0x9e7c>
   1b564:	mov	r1, #26
   1b568:	b	1b5d0 <__assert_fail@plt+0x9ea8>
   1b56c:	cmp	lr, #93	; 0x5d
   1b570:	beq	1b58c <__assert_fail@plt+0x9e64>
   1b574:	cmp	lr, #94	; 0x5e
   1b578:	bne	1b5ac <__assert_fail@plt+0x9e84>
   1b57c:	mov	r1, #25
   1b580:	b	1b590 <__assert_fail@plt+0x9e68>
   1b584:	mov	r1, #22
   1b588:	b	1b590 <__assert_fail@plt+0x9e68>
   1b58c:	mov	r1, #21
   1b590:	strb	r1, [r0, #4]
   1b594:	mov	r1, #1
   1b598:	b	1b5b4 <__assert_fail@plt+0x9e8c>
   1b59c:	mov	r1, #0
   1b5a0:	strb	r1, [r0]
   1b5a4:	mov	r1, #91	; 0x5b
   1b5a8:	strb	r1, [r0]
   1b5ac:	mov	r1, #1
   1b5b0:	strb	r1, [r0, #4]
   1b5b4:	mov	r0, r1
   1b5b8:	pop	{fp, pc}
   1b5bc:	mov	r1, #28
   1b5c0:	b	1b5d0 <__assert_fail@plt+0x9ea8>
   1b5c4:	tst	r2, #4
   1b5c8:	beq	1b5a4 <__assert_fail@plt+0x9e7c>
   1b5cc:	mov	r1, #30
   1b5d0:	strb	r1, [r0, #4]
   1b5d4:	mov	r1, #2
   1b5d8:	b	1b5b4 <__assert_fail@plt+0x9e8c>
   1b5dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b5e0:	add	fp, sp, #24
   1b5e4:	sub	sp, sp, #8
   1b5e8:	mov	r5, r2
   1b5ec:	ldr	r2, [r1, #80]	; 0x50
   1b5f0:	mov	r9, r0
   1b5f4:	ldr	r0, [r1, #40]	; 0x28
   1b5f8:	cmp	r2, #1
   1b5fc:	beq	1b668 <__assert_fail@plt+0x9f40>
   1b600:	ldr	r4, [r1, #28]
   1b604:	add	r2, r0, #1
   1b608:	cmp	r2, r4
   1b60c:	bge	1b668 <__assert_fail@plt+0x9f40>
   1b610:	ldr	ip, [r1, #8]
   1b614:	mov	r2, #1
   1b618:	add	r6, ip, r0, lsl #2
   1b61c:	ldr	r7, [r6, r2, lsl #2]
   1b620:	cmn	r7, #1
   1b624:	bne	1b63c <__assert_fail@plt+0x9f14>
   1b628:	add	r2, r2, #1
   1b62c:	add	r7, r0, r2
   1b630:	cmp	r7, r4
   1b634:	blt	1b61c <__assert_fail@plt+0x9ef4>
   1b638:	b	1b644 <__assert_fail@plt+0x9f1c>
   1b63c:	cmp	r2, #2
   1b640:	bcc	1b668 <__assert_fail@plt+0x9f40>
   1b644:	mov	r3, #1
   1b648:	str	r3, [r9]
   1b64c:	ldr	r0, [ip, r0, lsl #2]
   1b650:	str	r0, [r9, #4]
   1b654:	ldr	r0, [r1, #40]	; 0x28
   1b658:	add	r0, r0, r2
   1b65c:	str	r0, [r1, #40]	; 0x28
   1b660:	mov	r0, #0
   1b664:	b	1b88c <__assert_fail@plt+0xa164>
   1b668:	add	r2, r0, r3
   1b66c:	str	r2, [r1, #40]	; 0x28
   1b670:	ldrb	r6, [r5, #4]
   1b674:	sub	r0, r6, #22
   1b678:	cmp	r0, #8
   1b67c:	bhi	1b87c <__assert_fail@plt+0xa154>
   1b680:	add	r3, pc, #0
   1b684:	ldr	pc, [r3, r0, lsl #2]
   1b688:	andeq	fp, r1, r4, asr r8
   1b68c:	andeq	fp, r1, ip, ror r8
   1b690:	andeq	fp, r1, ip, ror r8
   1b694:	andeq	fp, r1, ip, ror r8
   1b698:	andeq	fp, r1, ip, lsr #13
   1b69c:	andeq	fp, r1, ip, ror r8
   1b6a0:	andeq	fp, r1, ip, lsr #13
   1b6a4:	andeq	fp, r1, ip, ror r8
   1b6a8:	andeq	fp, r1, ip, lsr #13
   1b6ac:	ldr	r3, [r1, #56]	; 0x38
   1b6b0:	mov	r0, #7
   1b6b4:	cmp	r3, r2
   1b6b8:	ble	1b88c <__assert_fail@plt+0xa164>
   1b6bc:	ldrb	r3, [r5]
   1b6c0:	mov	r2, #0
   1b6c4:	uxtb	r7, r6
   1b6c8:	cmp	r7, #30
   1b6cc:	bne	1b6dc <__assert_fail@plt+0x9fb4>
   1b6d0:	ldrb	r7, [r1, #75]	; 0x4b
   1b6d4:	cmp	r7, #0
   1b6d8:	bne	1b734 <__assert_fail@plt+0xa00c>
   1b6dc:	ldr	r4, [r1, #40]	; 0x28
   1b6e0:	ldr	r7, [r1, #4]
   1b6e4:	add	r6, r4, #1
   1b6e8:	str	r6, [r1, #40]	; 0x28
   1b6ec:	ldrb	r4, [r7, r4]
   1b6f0:	ldr	r7, [r1, #56]	; 0x38
   1b6f4:	cmp	r7, r6
   1b6f8:	ble	1b88c <__assert_fail@plt+0xa164>
   1b6fc:	uxtb	r7, r4
   1b700:	cmp	r7, r3
   1b704:	bne	1b718 <__assert_fail@plt+0x9ff0>
   1b708:	ldr	r7, [r1, #4]
   1b70c:	ldrb	r7, [r7, r6]
   1b710:	cmp	r7, #93	; 0x5d
   1b714:	beq	1b808 <__assert_fail@plt+0xa0e0>
   1b718:	ldr	r7, [r9, #4]
   1b71c:	cmp	r2, #30
   1b720:	strb	r4, [r7, r2]
   1b724:	bhi	1b88c <__assert_fail@plt+0xa164>
   1b728:	ldrb	r6, [r5, #4]
   1b72c:	add	r2, r2, #1
   1b730:	b	1b6c4 <__assert_fail@plt+0x9f9c>
   1b734:	ldrb	r7, [r1, #76]	; 0x4c
   1b738:	cmp	r7, #0
   1b73c:	beq	1b7d4 <__assert_fail@plt+0xa0ac>
   1b740:	ldr	lr, [r1, #28]
   1b744:	ldr	ip, [r1, #40]	; 0x28
   1b748:	cmp	ip, lr
   1b74c:	beq	1b760 <__assert_fail@plt+0xa038>
   1b750:	ldr	r4, [r1, #8]
   1b754:	ldr	r4, [r4, ip, lsl #2]
   1b758:	cmn	r4, #1
   1b75c:	beq	1b7f4 <__assert_fail@plt+0xa0cc>
   1b760:	ldr	r6, [r1, #12]
   1b764:	ldr	r7, [r1, #24]
   1b768:	ldr	r4, [r1]
   1b76c:	ldr	r6, [r6, ip, lsl #2]
   1b770:	add	r6, r7, r6
   1b774:	add	r4, r4, r6
   1b778:	ldrsb	r4, [r4]
   1b77c:	cmn	r4, #1
   1b780:	ble	1b7f4 <__assert_fail@plt+0xa0cc>
   1b784:	ldr	r7, [r1, #80]	; 0x50
   1b788:	mov	r6, #1
   1b78c:	cmp	r7, #1
   1b790:	beq	1b7c8 <__assert_fail@plt+0xa0a0>
   1b794:	add	r7, ip, #1
   1b798:	cmp	r7, lr
   1b79c:	bge	1b7c8 <__assert_fail@plt+0xa0a0>
   1b7a0:	ldr	r6, [r1, #8]
   1b7a4:	add	r8, r6, ip, lsl #2
   1b7a8:	mov	r6, #1
   1b7ac:	ldr	r7, [r8, r6, lsl #2]
   1b7b0:	cmn	r7, #1
   1b7b4:	bne	1b7c8 <__assert_fail@plt+0xa0a0>
   1b7b8:	add	r6, r6, #1
   1b7bc:	add	r7, ip, r6
   1b7c0:	cmp	r7, lr
   1b7c4:	blt	1b7ac <__assert_fail@plt+0xa084>
   1b7c8:	add	r6, r6, ip
   1b7cc:	str	r6, [r1, #40]	; 0x28
   1b7d0:	b	1b6f0 <__assert_fail@plt+0x9fc8>
   1b7d4:	ldr	r7, [r1, #40]	; 0x28
   1b7d8:	ldr	r4, [r1, #24]
   1b7dc:	ldr	ip, [r1]
   1b7e0:	add	r6, r7, #1
   1b7e4:	add	r7, r7, r4
   1b7e8:	str	r6, [r1, #40]	; 0x28
   1b7ec:	ldrb	r4, [ip, r7]
   1b7f0:	b	1b6f0 <__assert_fail@plt+0x9fc8>
   1b7f4:	add	r6, ip, #1
   1b7f8:	str	r6, [r1, #40]	; 0x28
   1b7fc:	ldr	r7, [r1, #4]
   1b800:	ldrb	r4, [r7, ip]
   1b804:	b	1b6f0 <__assert_fail@plt+0x9fc8>
   1b808:	add	r0, r6, #1
   1b80c:	str	r0, [r1, #40]	; 0x28
   1b810:	mov	r0, #0
   1b814:	ldr	r1, [r9, #4]
   1b818:	strb	r0, [r1, r2]
   1b81c:	ldrb	r1, [r5, #4]
   1b820:	cmp	r1, #30
   1b824:	beq	1b840 <__assert_fail@plt+0xa118>
   1b828:	cmp	r1, #28
   1b82c:	beq	1b848 <__assert_fail@plt+0xa120>
   1b830:	cmp	r1, #26
   1b834:	moveq	r1, #3
   1b838:	streq	r1, [r9]
   1b83c:	b	1b88c <__assert_fail@plt+0xa164>
   1b840:	mov	r1, #4
   1b844:	b	1b84c <__assert_fail@plt+0xa124>
   1b848:	mov	r1, #2
   1b84c:	str	r1, [r9]
   1b850:	b	1b88c <__assert_fail@plt+0xa164>
   1b854:	ldr	r0, [fp, #12]
   1b858:	cmp	r0, #0
   1b85c:	bne	1b87c <__assert_fail@plt+0xa154>
   1b860:	ldr	r2, [fp, #8]
   1b864:	mov	r0, sp
   1b868:	bl	1b474 <__assert_fail@plt+0x9d4c>
   1b86c:	ldrb	r1, [sp, #4]
   1b870:	mov	r0, #11
   1b874:	cmp	r1, #21
   1b878:	bne	1b88c <__assert_fail@plt+0xa164>
   1b87c:	mov	r0, #0
   1b880:	str	r0, [r9]
   1b884:	ldrb	r1, [r5]
   1b888:	strb	r1, [r9, #4]
   1b88c:	sub	sp, fp, #24
   1b890:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b894:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b898:	add	fp, sp, #24
   1b89c:	mov	r8, r0
   1b8a0:	ldrb	r0, [fp, #14]
   1b8a4:	ldr	r6, [fp, #8]
   1b8a8:	mov	r5, r3
   1b8ac:	mov	r7, r2
   1b8b0:	mov	r4, r1
   1b8b4:	tst	r0, #64	; 0x40
   1b8b8:	beq	1b8f4 <__assert_fail@plt+0xa1cc>
   1b8bc:	movw	r1, #16322	; 0x3fc2
   1b8c0:	mov	r0, r6
   1b8c4:	movt	r1, #2
   1b8c8:	bl	113ec <strcmp@plt>
   1b8cc:	cmp	r0, #0
   1b8d0:	beq	1b8ec <__assert_fail@plt+0xa1c4>
   1b8d4:	movw	r1, #16328	; 0x3fc8
   1b8d8:	mov	r0, r6
   1b8dc:	movt	r1, #2
   1b8e0:	bl	113ec <strcmp@plt>
   1b8e4:	cmp	r0, #0
   1b8e8:	bne	1b8f4 <__assert_fail@plt+0xa1cc>
   1b8ec:	movw	r6, #16334	; 0x3fce
   1b8f0:	movt	r6, #2
   1b8f4:	ldr	r0, [r5]
   1b8f8:	ldr	r1, [r7, #36]	; 0x24
   1b8fc:	cmp	r0, r1
   1b900:	beq	1bdf4 <__assert_fail@plt+0xa6cc>
   1b904:	mov	r0, r6
   1b908:	bl	113c8 <wctype@plt>
   1b90c:	ldr	r2, [r7, #36]	; 0x24
   1b910:	ldr	r1, [r7, #12]
   1b914:	add	r3, r2, #1
   1b918:	str	r3, [r7, #36]	; 0x24
   1b91c:	str	r0, [r1, r2, lsl #2]
   1b920:	movw	r1, #16310	; 0x3fb6
   1b924:	mov	r0, r6
   1b928:	movt	r1, #2
   1b92c:	bl	113ec <strcmp@plt>
   1b930:	cmp	r0, #0
   1b934:	beq	1ba98 <__assert_fail@plt+0xa370>
   1b938:	movw	r1, #16340	; 0x3fd4
   1b93c:	mov	r0, r6
   1b940:	movt	r1, #2
   1b944:	bl	113ec <strcmp@plt>
   1b948:	cmp	r0, #0
   1b94c:	beq	1bae4 <__assert_fail@plt+0xa3bc>
   1b950:	movw	r1, #16328	; 0x3fc8
   1b954:	mov	r0, r6
   1b958:	movt	r1, #2
   1b95c:	bl	113ec <strcmp@plt>
   1b960:	cmp	r0, #0
   1b964:	beq	1bb30 <__assert_fail@plt+0xa408>
   1b968:	movw	r1, #16316	; 0x3fbc
   1b96c:	mov	r0, r6
   1b970:	movt	r1, #2
   1b974:	bl	113ec <strcmp@plt>
   1b978:	cmp	r0, #0
   1b97c:	beq	1bb7c <__assert_fail@plt+0xa454>
   1b980:	movw	r1, #16334	; 0x3fce
   1b984:	mov	r0, r6
   1b988:	movt	r1, #2
   1b98c:	bl	113ec <strcmp@plt>
   1b990:	cmp	r0, #0
   1b994:	beq	1bbc8 <__assert_fail@plt+0xa4a0>
   1b998:	movw	r1, #16371	; 0x3ff3
   1b99c:	mov	r0, r6
   1b9a0:	movt	r1, #2
   1b9a4:	bl	113ec <strcmp@plt>
   1b9a8:	cmp	r0, #0
   1b9ac:	beq	1bc14 <__assert_fail@plt+0xa4ec>
   1b9b0:	movw	r1, #16346	; 0x3fda
   1b9b4:	mov	r0, r6
   1b9b8:	movt	r1, #2
   1b9bc:	bl	113ec <strcmp@plt>
   1b9c0:	cmp	r0, #0
   1b9c4:	beq	1bc64 <__assert_fail@plt+0xa53c>
   1b9c8:	movw	r1, #16322	; 0x3fc2
   1b9cc:	mov	r0, r6
   1b9d0:	movt	r1, #2
   1b9d4:	bl	113ec <strcmp@plt>
   1b9d8:	cmp	r0, #0
   1b9dc:	beq	1bcb4 <__assert_fail@plt+0xa58c>
   1b9e0:	movw	r1, #16352	; 0x3fe0
   1b9e4:	mov	r0, r6
   1b9e8:	movt	r1, #2
   1b9ec:	bl	113ec <strcmp@plt>
   1b9f0:	cmp	r0, #0
   1b9f4:	beq	1bd04 <__assert_fail@plt+0xa5dc>
   1b9f8:	movw	r1, #16358	; 0x3fe6
   1b9fc:	mov	r0, r6
   1ba00:	movt	r1, #2
   1ba04:	bl	113ec <strcmp@plt>
   1ba08:	cmp	r0, #0
   1ba0c:	beq	1bd54 <__assert_fail@plt+0xa62c>
   1ba10:	movw	r1, #16364	; 0x3fec
   1ba14:	mov	r0, r6
   1ba18:	movt	r1, #2
   1ba1c:	bl	113ec <strcmp@plt>
   1ba20:	cmp	r0, #0
   1ba24:	beq	1bda4 <__assert_fail@plt+0xa67c>
   1ba28:	movw	r1, #16370	; 0x3ff2
   1ba2c:	mov	r0, r6
   1ba30:	movt	r1, #2
   1ba34:	bl	113ec <strcmp@plt>
   1ba38:	mov	r1, r0
   1ba3c:	mov	r0, #4
   1ba40:	cmp	r1, #0
   1ba44:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ba48:	bl	115b4 <__ctype_b_loc@plt>
   1ba4c:	ldr	r1, [r0]
   1ba50:	mov	r2, #0
   1ba54:	mov	r3, #1
   1ba58:	cmp	r8, #0
   1ba5c:	bne	1bf5c <__assert_fail@plt+0xa834>
   1ba60:	ldrb	r0, [r1, #1]
   1ba64:	tst	r0, #16
   1ba68:	beq	1ba80 <__assert_fail@plt+0xa358>
   1ba6c:	ubfx	r0, r2, #5, #3
   1ba70:	and	r6, r2, #31
   1ba74:	ldr	r7, [r4, r0, lsl #2]
   1ba78:	orr	r7, r7, r3, lsl r6
   1ba7c:	str	r7, [r4, r0, lsl #2]
   1ba80:	add	r2, r2, #1
   1ba84:	add	r1, r1, #2
   1ba88:	mov	r0, #0
   1ba8c:	cmp	r2, #256	; 0x100
   1ba90:	bne	1ba60 <__assert_fail@plt+0xa338>
   1ba94:	b	1bdf0 <__assert_fail@plt+0xa6c8>
   1ba98:	bl	115b4 <__ctype_b_loc@plt>
   1ba9c:	ldr	r1, [r0]
   1baa0:	cmp	r8, #0
   1baa4:	bne	1be98 <__assert_fail@plt+0xa770>
   1baa8:	mov	r0, #0
   1baac:	mov	r2, #1
   1bab0:	ldrb	r3, [r1]
   1bab4:	tst	r3, #8
   1bab8:	beq	1bad0 <__assert_fail@plt+0xa3a8>
   1babc:	ubfx	r3, r0, #5, #3
   1bac0:	and	r6, r0, #31
   1bac4:	ldr	r7, [r4, r3, lsl #2]
   1bac8:	orr	r7, r7, r2, lsl r6
   1bacc:	str	r7, [r4, r3, lsl #2]
   1bad0:	add	r0, r0, #1
   1bad4:	add	r1, r1, #2
   1bad8:	cmp	r0, #256	; 0x100
   1badc:	bne	1bab0 <__assert_fail@plt+0xa388>
   1bae0:	b	1bc5c <__assert_fail@plt+0xa534>
   1bae4:	bl	115b4 <__ctype_b_loc@plt>
   1bae8:	ldr	r1, [r0]
   1baec:	cmp	r8, #0
   1baf0:	bne	1bf18 <__assert_fail@plt+0xa7f0>
   1baf4:	mov	r0, #0
   1baf8:	mov	r2, #1
   1bafc:	ldrb	r3, [r1]
   1bb00:	tst	r3, #2
   1bb04:	beq	1bb1c <__assert_fail@plt+0xa3f4>
   1bb08:	ubfx	r3, r0, #5, #3
   1bb0c:	and	r6, r0, #31
   1bb10:	ldr	r7, [r4, r3, lsl #2]
   1bb14:	orr	r7, r7, r2, lsl r6
   1bb18:	str	r7, [r4, r3, lsl #2]
   1bb1c:	add	r0, r0, #1
   1bb20:	add	r1, r1, #2
   1bb24:	cmp	r0, #256	; 0x100
   1bb28:	bne	1bafc <__assert_fail@plt+0xa3d4>
   1bb2c:	b	1bc5c <__assert_fail@plt+0xa534>
   1bb30:	bl	115b4 <__ctype_b_loc@plt>
   1bb34:	ldr	r1, [r0]
   1bb38:	cmp	r8, #0
   1bb3c:	bne	1bfd4 <__assert_fail@plt+0xa8ac>
   1bb40:	mov	r0, #0
   1bb44:	mov	r2, #1
   1bb48:	ldrb	r3, [r1, #1]
   1bb4c:	tst	r3, #2
   1bb50:	beq	1bb68 <__assert_fail@plt+0xa440>
   1bb54:	ubfx	r3, r0, #5, #3
   1bb58:	and	r6, r0, #31
   1bb5c:	ldr	r7, [r4, r3, lsl #2]
   1bb60:	orr	r7, r7, r2, lsl r6
   1bb64:	str	r7, [r4, r3, lsl #2]
   1bb68:	add	r0, r0, #1
   1bb6c:	add	r1, r1, #2
   1bb70:	cmp	r0, #256	; 0x100
   1bb74:	bne	1bb48 <__assert_fail@plt+0xa420>
   1bb78:	b	1bc5c <__assert_fail@plt+0xa534>
   1bb7c:	bl	115b4 <__ctype_b_loc@plt>
   1bb80:	ldr	r1, [r0]
   1bb84:	cmp	r8, #0
   1bb88:	bne	1c054 <__assert_fail@plt+0xa92c>
   1bb8c:	mov	r0, #0
   1bb90:	mov	r2, #1
   1bb94:	ldrb	r3, [r1, #1]
   1bb98:	tst	r3, #32
   1bb9c:	beq	1bbb4 <__assert_fail@plt+0xa48c>
   1bba0:	ubfx	r3, r0, #5, #3
   1bba4:	and	r6, r0, #31
   1bba8:	ldr	r7, [r4, r3, lsl #2]
   1bbac:	orr	r7, r7, r2, lsl r6
   1bbb0:	str	r7, [r4, r3, lsl #2]
   1bbb4:	add	r0, r0, #1
   1bbb8:	add	r1, r1, #2
   1bbbc:	cmp	r0, #256	; 0x100
   1bbc0:	bne	1bb94 <__assert_fail@plt+0xa46c>
   1bbc4:	b	1bc5c <__assert_fail@plt+0xa534>
   1bbc8:	bl	115b4 <__ctype_b_loc@plt>
   1bbcc:	ldr	r1, [r0]
   1bbd0:	cmp	r8, #0
   1bbd4:	bne	1c098 <__assert_fail@plt+0xa970>
   1bbd8:	mov	r0, #0
   1bbdc:	mov	r2, #1
   1bbe0:	ldrb	r3, [r1, #1]
   1bbe4:	tst	r3, #4
   1bbe8:	beq	1bc00 <__assert_fail@plt+0xa4d8>
   1bbec:	ubfx	r3, r0, #5, #3
   1bbf0:	and	r6, r0, #31
   1bbf4:	ldr	r7, [r4, r3, lsl #2]
   1bbf8:	orr	r7, r7, r2, lsl r6
   1bbfc:	str	r7, [r4, r3, lsl #2]
   1bc00:	add	r0, r0, #1
   1bc04:	add	r1, r1, #2
   1bc08:	cmp	r0, #256	; 0x100
   1bc0c:	bne	1bbe0 <__assert_fail@plt+0xa4b8>
   1bc10:	b	1bc5c <__assert_fail@plt+0xa534>
   1bc14:	bl	115b4 <__ctype_b_loc@plt>
   1bc18:	ldr	r1, [r0]
   1bc1c:	cmp	r8, #0
   1bc20:	bne	1c0dc <__assert_fail@plt+0xa9b4>
   1bc24:	mov	r0, #0
   1bc28:	mov	r2, #1
   1bc2c:	ldrb	r3, [r1, #1]
   1bc30:	tst	r3, #8
   1bc34:	beq	1bc4c <__assert_fail@plt+0xa524>
   1bc38:	ubfx	r3, r0, #5, #3
   1bc3c:	and	r6, r0, #31
   1bc40:	ldr	r7, [r4, r3, lsl #2]
   1bc44:	orr	r7, r7, r2, lsl r6
   1bc48:	str	r7, [r4, r3, lsl #2]
   1bc4c:	add	r0, r0, #1
   1bc50:	add	r1, r1, #2
   1bc54:	cmp	r0, #256	; 0x100
   1bc58:	bne	1bc2c <__assert_fail@plt+0xa504>
   1bc5c:	mov	r0, #0
   1bc60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bc64:	bl	115b4 <__ctype_b_loc@plt>
   1bc68:	ldr	r1, [r0]
   1bc6c:	mov	r2, #0
   1bc70:	mov	r3, #1
   1bc74:	cmp	r8, #0
   1bc78:	bne	1be20 <__assert_fail@plt+0xa6f8>
   1bc7c:	ldrb	r0, [r1, #1]
   1bc80:	tst	r0, #64	; 0x40
   1bc84:	beq	1bc9c <__assert_fail@plt+0xa574>
   1bc88:	ubfx	r0, r2, #5, #3
   1bc8c:	and	r6, r2, #31
   1bc90:	ldr	r7, [r4, r0, lsl #2]
   1bc94:	orr	r7, r7, r3, lsl r6
   1bc98:	str	r7, [r4, r0, lsl #2]
   1bc9c:	add	r2, r2, #1
   1bca0:	add	r1, r1, #2
   1bca4:	mov	r0, #0
   1bca8:	cmp	r2, #256	; 0x100
   1bcac:	bne	1bc7c <__assert_fail@plt+0xa554>
   1bcb0:	b	1bdf0 <__assert_fail@plt+0xa6c8>
   1bcb4:	bl	115b4 <__ctype_b_loc@plt>
   1bcb8:	ldr	r1, [r0]
   1bcbc:	mov	r2, #0
   1bcc0:	mov	r3, #1
   1bcc4:	cmp	r8, #0
   1bcc8:	bne	1be5c <__assert_fail@plt+0xa734>
   1bccc:	ldrb	r0, [r1, #1]
   1bcd0:	tst	r0, #1
   1bcd4:	beq	1bcec <__assert_fail@plt+0xa5c4>
   1bcd8:	ubfx	r0, r2, #5, #3
   1bcdc:	and	r6, r2, #31
   1bce0:	ldr	r7, [r4, r0, lsl #2]
   1bce4:	orr	r7, r7, r3, lsl r6
   1bce8:	str	r7, [r4, r0, lsl #2]
   1bcec:	add	r2, r2, #1
   1bcf0:	add	r1, r1, #2
   1bcf4:	mov	r0, #0
   1bcf8:	cmp	r2, #256	; 0x100
   1bcfc:	bne	1bccc <__assert_fail@plt+0xa5a4>
   1bd00:	b	1bdf0 <__assert_fail@plt+0xa6c8>
   1bd04:	bl	115b4 <__ctype_b_loc@plt>
   1bd08:	ldr	r1, [r0]
   1bd0c:	mov	r2, #0
   1bd10:	mov	r3, #1
   1bd14:	cmp	r8, #0
   1bd18:	bne	1bedc <__assert_fail@plt+0xa7b4>
   1bd1c:	ldrb	r0, [r1]
   1bd20:	tst	r0, #1
   1bd24:	beq	1bd3c <__assert_fail@plt+0xa614>
   1bd28:	ubfx	r0, r2, #5, #3
   1bd2c:	and	r6, r2, #31
   1bd30:	ldr	r7, [r4, r0, lsl #2]
   1bd34:	orr	r7, r7, r3, lsl r6
   1bd38:	str	r7, [r4, r0, lsl #2]
   1bd3c:	add	r2, r2, #1
   1bd40:	add	r1, r1, #2
   1bd44:	mov	r0, #0
   1bd48:	cmp	r2, #256	; 0x100
   1bd4c:	bne	1bd1c <__assert_fail@plt+0xa5f4>
   1bd50:	b	1bdf0 <__assert_fail@plt+0xa6c8>
   1bd54:	bl	115b4 <__ctype_b_loc@plt>
   1bd58:	ldr	r1, [r0]
   1bd5c:	mov	r2, #0
   1bd60:	mov	r3, #1
   1bd64:	cmp	r8, #0
   1bd68:	bne	1bf98 <__assert_fail@plt+0xa870>
   1bd6c:	ldrsh	r0, [r1]
   1bd70:	cmn	r0, #1
   1bd74:	bgt	1bd8c <__assert_fail@plt+0xa664>
   1bd78:	ubfx	r0, r2, #5, #3
   1bd7c:	and	r6, r2, #31
   1bd80:	ldr	r7, [r4, r0, lsl #2]
   1bd84:	orr	r7, r7, r3, lsl r6
   1bd88:	str	r7, [r4, r0, lsl #2]
   1bd8c:	add	r2, r2, #1
   1bd90:	add	r1, r1, #2
   1bd94:	mov	r0, #0
   1bd98:	cmp	r2, #256	; 0x100
   1bd9c:	bne	1bd6c <__assert_fail@plt+0xa644>
   1bda0:	b	1bdf0 <__assert_fail@plt+0xa6c8>
   1bda4:	bl	115b4 <__ctype_b_loc@plt>
   1bda8:	ldr	r1, [r0]
   1bdac:	mov	r2, #0
   1bdb0:	mov	r3, #1
   1bdb4:	cmp	r8, #0
   1bdb8:	bne	1c018 <__assert_fail@plt+0xa8f0>
   1bdbc:	ldrb	r0, [r1]
   1bdc0:	tst	r0, #4
   1bdc4:	beq	1bddc <__assert_fail@plt+0xa6b4>
   1bdc8:	ubfx	r0, r2, #5, #3
   1bdcc:	and	r6, r2, #31
   1bdd0:	ldr	r7, [r4, r0, lsl #2]
   1bdd4:	orr	r7, r7, r3, lsl r6
   1bdd8:	str	r7, [r4, r0, lsl #2]
   1bddc:	add	r2, r2, #1
   1bde0:	add	r1, r1, #2
   1bde4:	mov	r0, #0
   1bde8:	cmp	r2, #256	; 0x100
   1bdec:	bne	1bdbc <__assert_fail@plt+0xa694>
   1bdf0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bdf4:	mov	r1, #1
   1bdf8:	orr	r9, r1, r0, lsl #1
   1bdfc:	ldr	r0, [r7, #12]
   1be00:	lsl	r1, r9, #2
   1be04:	bl	22ad0 <__assert_fail@plt+0x113a8>
   1be08:	cmp	r0, #0
   1be0c:	moveq	r0, #12
   1be10:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1be14:	str	r0, [r7, #12]
   1be18:	str	r9, [r5]
   1be1c:	b	1b904 <__assert_fail@plt+0xa1dc>
   1be20:	ldrb	r0, [r1, #1]
   1be24:	tst	r0, #64	; 0x40
   1be28:	beq	1be44 <__assert_fail@plt+0xa71c>
   1be2c:	ldrb	r0, [r8, r2]
   1be30:	ubfx	r7, r0, #5, #3
   1be34:	and	r0, r0, #31
   1be38:	ldr	r6, [r4, r7, lsl #2]
   1be3c:	orr	r0, r6, r3, lsl r0
   1be40:	str	r0, [r4, r7, lsl #2]
   1be44:	add	r2, r2, #1
   1be48:	add	r1, r1, #2
   1be4c:	mov	r0, #0
   1be50:	cmp	r2, #256	; 0x100
   1be54:	bne	1be20 <__assert_fail@plt+0xa6f8>
   1be58:	b	1bdf0 <__assert_fail@plt+0xa6c8>
   1be5c:	ldrb	r0, [r1, #1]
   1be60:	tst	r0, #1
   1be64:	beq	1be80 <__assert_fail@plt+0xa758>
   1be68:	ldrb	r0, [r8, r2]
   1be6c:	ubfx	r7, r0, #5, #3
   1be70:	and	r0, r0, #31
   1be74:	ldr	r6, [r4, r7, lsl #2]
   1be78:	orr	r0, r6, r3, lsl r0
   1be7c:	str	r0, [r4, r7, lsl #2]
   1be80:	add	r2, r2, #1
   1be84:	add	r1, r1, #2
   1be88:	mov	r0, #0
   1be8c:	cmp	r2, #256	; 0x100
   1be90:	bne	1be5c <__assert_fail@plt+0xa734>
   1be94:	b	1bdf0 <__assert_fail@plt+0xa6c8>
   1be98:	mov	r2, #0
   1be9c:	mov	r3, #1
   1bea0:	ldrb	r0, [r1]
   1bea4:	tst	r0, #8
   1bea8:	beq	1bec4 <__assert_fail@plt+0xa79c>
   1beac:	ldrb	r0, [r8, r2]
   1beb0:	ubfx	r7, r0, #5, #3
   1beb4:	and	r0, r0, #31
   1beb8:	ldr	r6, [r4, r7, lsl #2]
   1bebc:	orr	r0, r6, r3, lsl r0
   1bec0:	str	r0, [r4, r7, lsl #2]
   1bec4:	add	r2, r2, #1
   1bec8:	add	r1, r1, #2
   1becc:	mov	r0, #0
   1bed0:	cmp	r2, #256	; 0x100
   1bed4:	bne	1bea0 <__assert_fail@plt+0xa778>
   1bed8:	b	1bdf0 <__assert_fail@plt+0xa6c8>
   1bedc:	ldrb	r0, [r1]
   1bee0:	tst	r0, #1
   1bee4:	beq	1bf00 <__assert_fail@plt+0xa7d8>
   1bee8:	ldrb	r0, [r8, r2]
   1beec:	ubfx	r7, r0, #5, #3
   1bef0:	and	r0, r0, #31
   1bef4:	ldr	r6, [r4, r7, lsl #2]
   1bef8:	orr	r0, r6, r3, lsl r0
   1befc:	str	r0, [r4, r7, lsl #2]
   1bf00:	add	r2, r2, #1
   1bf04:	add	r1, r1, #2
   1bf08:	mov	r0, #0
   1bf0c:	cmp	r2, #256	; 0x100
   1bf10:	bne	1bedc <__assert_fail@plt+0xa7b4>
   1bf14:	b	1bdf0 <__assert_fail@plt+0xa6c8>
   1bf18:	mov	r2, #0
   1bf1c:	mov	r3, #1
   1bf20:	ldrb	r0, [r1]
   1bf24:	tst	r0, #2
   1bf28:	beq	1bf44 <__assert_fail@plt+0xa81c>
   1bf2c:	ldrb	r0, [r8, r2]
   1bf30:	ubfx	r7, r0, #5, #3
   1bf34:	and	r0, r0, #31
   1bf38:	ldr	r6, [r4, r7, lsl #2]
   1bf3c:	orr	r0, r6, r3, lsl r0
   1bf40:	str	r0, [r4, r7, lsl #2]
   1bf44:	add	r2, r2, #1
   1bf48:	add	r1, r1, #2
   1bf4c:	mov	r0, #0
   1bf50:	cmp	r2, #256	; 0x100
   1bf54:	bne	1bf20 <__assert_fail@plt+0xa7f8>
   1bf58:	b	1bdf0 <__assert_fail@plt+0xa6c8>
   1bf5c:	ldrb	r0, [r1, #1]
   1bf60:	tst	r0, #16
   1bf64:	beq	1bf80 <__assert_fail@plt+0xa858>
   1bf68:	ldrb	r0, [r8, r2]
   1bf6c:	ubfx	r7, r0, #5, #3
   1bf70:	and	r0, r0, #31
   1bf74:	ldr	r6, [r4, r7, lsl #2]
   1bf78:	orr	r0, r6, r3, lsl r0
   1bf7c:	str	r0, [r4, r7, lsl #2]
   1bf80:	add	r2, r2, #1
   1bf84:	add	r1, r1, #2
   1bf88:	mov	r0, #0
   1bf8c:	cmp	r2, #256	; 0x100
   1bf90:	bne	1bf5c <__assert_fail@plt+0xa834>
   1bf94:	b	1bdf0 <__assert_fail@plt+0xa6c8>
   1bf98:	ldrsh	r0, [r1]
   1bf9c:	cmn	r0, #1
   1bfa0:	bgt	1bfbc <__assert_fail@plt+0xa894>
   1bfa4:	ldrb	r0, [r8, r2]
   1bfa8:	ubfx	r7, r0, #5, #3
   1bfac:	and	r0, r0, #31
   1bfb0:	ldr	r6, [r4, r7, lsl #2]
   1bfb4:	orr	r0, r6, r3, lsl r0
   1bfb8:	str	r0, [r4, r7, lsl #2]
   1bfbc:	add	r2, r2, #1
   1bfc0:	add	r1, r1, #2
   1bfc4:	mov	r0, #0
   1bfc8:	cmp	r2, #256	; 0x100
   1bfcc:	bne	1bf98 <__assert_fail@plt+0xa870>
   1bfd0:	b	1bdf0 <__assert_fail@plt+0xa6c8>
   1bfd4:	mov	r2, #0
   1bfd8:	mov	r3, #1
   1bfdc:	ldrb	r0, [r1, #1]
   1bfe0:	tst	r0, #2
   1bfe4:	beq	1c000 <__assert_fail@plt+0xa8d8>
   1bfe8:	ldrb	r0, [r8, r2]
   1bfec:	ubfx	r7, r0, #5, #3
   1bff0:	and	r0, r0, #31
   1bff4:	ldr	r6, [r4, r7, lsl #2]
   1bff8:	orr	r0, r6, r3, lsl r0
   1bffc:	str	r0, [r4, r7, lsl #2]
   1c000:	add	r2, r2, #1
   1c004:	add	r1, r1, #2
   1c008:	mov	r0, #0
   1c00c:	cmp	r2, #256	; 0x100
   1c010:	bne	1bfdc <__assert_fail@plt+0xa8b4>
   1c014:	b	1bdf0 <__assert_fail@plt+0xa6c8>
   1c018:	ldrb	r0, [r1]
   1c01c:	tst	r0, #4
   1c020:	beq	1c03c <__assert_fail@plt+0xa914>
   1c024:	ldrb	r0, [r8, r2]
   1c028:	ubfx	r7, r0, #5, #3
   1c02c:	and	r0, r0, #31
   1c030:	ldr	r6, [r4, r7, lsl #2]
   1c034:	orr	r0, r6, r3, lsl r0
   1c038:	str	r0, [r4, r7, lsl #2]
   1c03c:	add	r2, r2, #1
   1c040:	add	r1, r1, #2
   1c044:	mov	r0, #0
   1c048:	cmp	r2, #256	; 0x100
   1c04c:	bne	1c018 <__assert_fail@plt+0xa8f0>
   1c050:	b	1bdf0 <__assert_fail@plt+0xa6c8>
   1c054:	mov	r2, #0
   1c058:	mov	r3, #1
   1c05c:	ldrb	r0, [r1, #1]
   1c060:	tst	r0, #32
   1c064:	beq	1c080 <__assert_fail@plt+0xa958>
   1c068:	ldrb	r0, [r8, r2]
   1c06c:	ubfx	r7, r0, #5, #3
   1c070:	and	r0, r0, #31
   1c074:	ldr	r6, [r4, r7, lsl #2]
   1c078:	orr	r0, r6, r3, lsl r0
   1c07c:	str	r0, [r4, r7, lsl #2]
   1c080:	add	r2, r2, #1
   1c084:	add	r1, r1, #2
   1c088:	mov	r0, #0
   1c08c:	cmp	r2, #256	; 0x100
   1c090:	bne	1c05c <__assert_fail@plt+0xa934>
   1c094:	b	1bdf0 <__assert_fail@plt+0xa6c8>
   1c098:	mov	r2, #0
   1c09c:	mov	r3, #1
   1c0a0:	ldrb	r0, [r1, #1]
   1c0a4:	tst	r0, #4
   1c0a8:	beq	1c0c4 <__assert_fail@plt+0xa99c>
   1c0ac:	ldrb	r0, [r8, r2]
   1c0b0:	ubfx	r7, r0, #5, #3
   1c0b4:	and	r0, r0, #31
   1c0b8:	ldr	r6, [r4, r7, lsl #2]
   1c0bc:	orr	r0, r6, r3, lsl r0
   1c0c0:	str	r0, [r4, r7, lsl #2]
   1c0c4:	add	r2, r2, #1
   1c0c8:	add	r1, r1, #2
   1c0cc:	mov	r0, #0
   1c0d0:	cmp	r2, #256	; 0x100
   1c0d4:	bne	1c0a0 <__assert_fail@plt+0xa978>
   1c0d8:	b	1bdf0 <__assert_fail@plt+0xa6c8>
   1c0dc:	mov	r2, #0
   1c0e0:	mov	r3, #1
   1c0e4:	ldrb	r0, [r1, #1]
   1c0e8:	tst	r0, #8
   1c0ec:	beq	1c108 <__assert_fail@plt+0xa9e0>
   1c0f0:	ldrb	r0, [r8, r2]
   1c0f4:	ubfx	r7, r0, #5, #3
   1c0f8:	and	r0, r0, #31
   1c0fc:	ldr	r6, [r4, r7, lsl #2]
   1c100:	orr	r0, r6, r3, lsl r0
   1c104:	str	r0, [r4, r7, lsl #2]
   1c108:	add	r2, r2, #1
   1c10c:	add	r1, r1, #2
   1c110:	mov	r0, #0
   1c114:	cmp	r2, #256	; 0x100
   1c118:	bne	1c0e4 <__assert_fail@plt+0xa9bc>
   1c11c:	b	1bdf0 <__assert_fail@plt+0xa6c8>
   1c120:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c124:	add	fp, sp, #24
   1c128:	mov	r6, r0
   1c12c:	mov	r4, r2
   1c130:	mov	r5, r1
   1c134:	mvn	r0, #0
   1c138:	movw	r8, #32816	; 0x8030
   1c13c:	b	1c19c <__assert_fail@plt+0xaa74>
   1c140:	cmp	r2, #2
   1c144:	beq	1c1d0 <__assert_fail@plt+0xaaa8>
   1c148:	ldrb	r1, [r5]
   1c14c:	cmp	r1, #44	; 0x2c
   1c150:	beq	1c1c8 <__assert_fail@plt+0xaaa0>
   1c154:	mvn	r0, #1
   1c158:	cmp	r1, #48	; 0x30
   1c15c:	bcc	1c19c <__assert_fail@plt+0xaa74>
   1c160:	cmp	r2, #1
   1c164:	bne	1c19c <__assert_fail@plt+0xaa74>
   1c168:	cmn	r7, #2
   1c16c:	beq	1c19c <__assert_fail@plt+0xaa74>
   1c170:	cmp	r1, #57	; 0x39
   1c174:	bhi	1c19c <__assert_fail@plt+0xaa74>
   1c178:	cmn	r7, #1
   1c17c:	beq	1c198 <__assert_fail@plt+0xaa70>
   1c180:	add	r0, r7, r7, lsl #2
   1c184:	add	r1, r1, r0, lsl #1
   1c188:	sub	r0, r1, #48	; 0x30
   1c18c:	cmp	r1, r8
   1c190:	movwgt	r0, #32768	; 0x8000
   1c194:	b	1c19c <__assert_fail@plt+0xaa74>
   1c198:	sub	r0, r1, #48	; 0x30
   1c19c:	mov	r7, r0
   1c1a0:	mov	r0, r5
   1c1a4:	mov	r1, r6
   1c1a8:	mov	r2, r4
   1c1ac:	bl	19370 <__assert_fail@plt+0x7c48>
   1c1b0:	ldr	r1, [r6, #40]	; 0x28
   1c1b4:	add	r0, r1, r0
   1c1b8:	str	r0, [r6, #40]	; 0x28
   1c1bc:	ldrb	r2, [r5, #4]
   1c1c0:	cmp	r2, #24
   1c1c4:	bne	1c140 <__assert_fail@plt+0xaa18>
   1c1c8:	mov	r0, r7
   1c1cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c1d0:	mvn	r7, #1
   1c1d4:	b	1c1c8 <__assert_fail@plt+0xaaa0>
   1c1d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c1dc:	add	fp, sp, #24
   1c1e0:	sub	sp, sp, #8
   1c1e4:	mov	r3, r0
   1c1e8:	mov	r5, r0
   1c1ec:	mov	r8, r1
   1c1f0:	mov	r0, r1
   1c1f4:	mov	r1, #0
   1c1f8:	mov	r2, #0
   1c1fc:	mov	r7, #0
   1c200:	ldr	r4, [r3], #20
   1c204:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1c208:	cmp	r0, #0
   1c20c:	str	r0, [sp, #4]
   1c210:	beq	1c2ac <__assert_fail@plt+0xab84>
   1c214:	mov	r9, r0
   1c218:	add	r6, sp, #4
   1c21c:	mov	r7, #0
   1c220:	str	r4, [r0]
   1c224:	ldr	r0, [r6]
   1c228:	ldr	r1, [r0, #24]
   1c22c:	orr	r1, r1, #262144	; 0x40000
   1c230:	str	r1, [r0, #24]
   1c234:	ldr	r0, [r5, #4]
   1c238:	ldr	r4, [r6]
   1c23c:	cmp	r0, #0
   1c240:	beq	1c250 <__assert_fail@plt+0xab28>
   1c244:	add	r6, r4, #4
   1c248:	mov	r5, r0
   1c24c:	b	1c284 <__assert_fail@plt+0xab5c>
   1c250:	mov	r1, #0
   1c254:	mov	r0, r5
   1c258:	ldr	r5, [r5, #8]
   1c25c:	cmp	r5, r1
   1c260:	cmpne	r5, #0
   1c264:	bne	1c280 <__assert_fail@plt+0xab58>
   1c268:	ldr	r5, [r0]
   1c26c:	ldr	r4, [r4]
   1c270:	mov	r1, r0
   1c274:	cmp	r5, #0
   1c278:	bne	1c254 <__assert_fail@plt+0xab2c>
   1c27c:	b	1c2a8 <__assert_fail@plt+0xab80>
   1c280:	add	r6, r4, #8
   1c284:	add	r3, r5, #20
   1c288:	mov	r0, r8
   1c28c:	mov	r1, #0
   1c290:	mov	r2, #0
   1c294:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1c298:	cmp	r0, #0
   1c29c:	str	r0, [r6]
   1c2a0:	bne	1c220 <__assert_fail@plt+0xaaf8>
   1c2a4:	b	1c2ac <__assert_fail@plt+0xab84>
   1c2a8:	mov	r7, r9
   1c2ac:	mov	r0, r7
   1c2b0:	sub	sp, fp, #24
   1c2b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c2b8:	push	{r4, r5, r6, r7, fp, lr}
   1c2bc:	add	fp, sp, #16
   1c2c0:	mov	r6, r0
   1c2c4:	mov	r5, r1
   1c2c8:	mov	r0, r2
   1c2cc:	mov	r4, r2
   1c2d0:	mov	r1, r6
   1c2d4:	blx	r5
   1c2d8:	cmp	r0, #0
   1c2dc:	popne	{r4, r5, r6, r7, fp, pc}
   1c2e0:	ldr	r7, [r6, #4]
   1c2e4:	cmp	r7, #0
   1c2e8:	bne	1c31c <__assert_fail@plt+0xabf4>
   1c2ec:	mov	r1, #0
   1c2f0:	b	1c308 <__assert_fail@plt+0xabe0>
   1c2f4:	ldr	r6, [r0]
   1c2f8:	mov	r1, r0
   1c2fc:	cmp	r6, #0
   1c300:	moveq	r0, #0
   1c304:	popeq	{r4, r5, r6, r7, fp, pc}
   1c308:	ldr	r7, [r6, #8]
   1c30c:	mov	r0, r6
   1c310:	cmp	r7, r1
   1c314:	cmpne	r7, #0
   1c318:	beq	1c2f4 <__assert_fail@plt+0xabcc>
   1c31c:	mov	r0, r4
   1c320:	mov	r1, r7
   1c324:	blx	r5
   1c328:	cmp	r0, #0
   1c32c:	mov	r6, r7
   1c330:	beq	1c2e0 <__assert_fail@plt+0xabb8>
   1c334:	pop	{r4, r5, r6, r7, fp, pc}
   1c338:	ldrb	r2, [r1, #24]
   1c33c:	cmp	r2, #17
   1c340:	beq	1c374 <__assert_fail@plt+0xac4c>
   1c344:	cmp	r2, #4
   1c348:	bne	1c3c8 <__assert_fail@plt+0xaca0>
   1c34c:	ldr	r2, [r0, #132]	; 0x84
   1c350:	cmp	r2, #0
   1c354:	beq	1c3c8 <__assert_fail@plt+0xaca0>
   1c358:	ldr	r3, [r1, #20]
   1c35c:	ldr	r2, [r2, r3, lsl #2]
   1c360:	mov	r3, #1
   1c364:	str	r2, [r1, #20]
   1c368:	ldr	r1, [r0, #80]	; 0x50
   1c36c:	orr	r1, r1, r3, lsl r2
   1c370:	b	1c3c4 <__assert_fail@plt+0xac9c>
   1c374:	ldr	r2, [r1, #4]
   1c378:	cmp	r2, #0
   1c37c:	beq	1c3c8 <__assert_fail@plt+0xaca0>
   1c380:	ldrb	r3, [r2, #24]
   1c384:	cmp	r3, #17
   1c388:	bne	1c3c8 <__assert_fail@plt+0xaca0>
   1c38c:	ldr	r3, [r2, #4]
   1c390:	ldr	r2, [r2, #20]
   1c394:	cmp	r3, #0
   1c398:	str	r3, [r1, #4]
   1c39c:	strne	r1, [r3]
   1c3a0:	cmp	r2, #31
   1c3a4:	ldr	r1, [r1, #20]
   1c3a8:	ldr	r3, [r0, #132]	; 0x84
   1c3ac:	ldr	r1, [r3, r1, lsl #2]
   1c3b0:	str	r1, [r3, r2, lsl #2]
   1c3b4:	bgt	1c3c8 <__assert_fail@plt+0xaca0>
   1c3b8:	ldr	r1, [r0, #80]	; 0x50
   1c3bc:	mov	r3, #1
   1c3c0:	bic	r1, r1, r3, lsl r2
   1c3c4:	str	r1, [r0, #80]	; 0x50
   1c3c8:	mov	r0, #0
   1c3cc:	bx	lr
   1c3d0:	push	{r4, r5, fp, lr}
   1c3d4:	add	fp, sp, #8
   1c3d8:	sub	sp, sp, #8
   1c3dc:	mov	r5, r0
   1c3e0:	mov	r0, #0
   1c3e4:	mov	r4, r1
   1c3e8:	str	r0, [sp, #4]
   1c3ec:	ldr	r2, [r1, #4]
   1c3f0:	cmp	r2, #0
   1c3f4:	beq	1c41c <__assert_fail@plt+0xacf4>
   1c3f8:	ldrb	r0, [r2, #24]
   1c3fc:	cmp	r0, #17
   1c400:	bne	1c41c <__assert_fail@plt+0xacf4>
   1c404:	add	r0, sp, #4
   1c408:	mov	r1, r5
   1c40c:	bl	1c6d4 <__assert_fail@plt+0xafac>
   1c410:	cmp	r0, #0
   1c414:	str	r0, [r4, #4]
   1c418:	strne	r4, [r0]
   1c41c:	ldr	r2, [r4, #8]
   1c420:	cmp	r2, #0
   1c424:	beq	1c44c <__assert_fail@plt+0xad24>
   1c428:	ldrb	r0, [r2, #24]
   1c42c:	cmp	r0, #17
   1c430:	bne	1c44c <__assert_fail@plt+0xad24>
   1c434:	add	r0, sp, #4
   1c438:	mov	r1, r5
   1c43c:	bl	1c6d4 <__assert_fail@plt+0xafac>
   1c440:	cmp	r0, #0
   1c444:	str	r0, [r4, #8]
   1c448:	strne	r4, [r0]
   1c44c:	ldr	r0, [sp, #4]
   1c450:	sub	sp, fp, #8
   1c454:	pop	{r4, r5, fp, pc}
   1c458:	push	{r4, r5, fp, lr}
   1c45c:	add	fp, sp, #8
   1c460:	ldr	r2, [r1, #24]
   1c464:	mov	r5, r0
   1c468:	mov	r4, r1
   1c46c:	uxtb	r0, r2
   1c470:	cmp	r0, #16
   1c474:	bne	1c494 <__assert_fail@plt+0xad6c>
   1c478:	ldr	r0, [r4, #4]
   1c47c:	ldr	r1, [r0, #12]
   1c480:	str	r1, [r4, #12]
   1c484:	ldr	r0, [r0, #28]
   1c488:	str	r0, [r4, #28]
   1c48c:	mov	r0, #0
   1c490:	pop	{r4, r5, fp, pc}
   1c494:	str	r4, [r4, #12]
   1c498:	mov	r0, r5
   1c49c:	ldr	r1, [r4, #20]
   1c4a0:	bl	1c828 <__assert_fail@plt+0xb100>
   1c4a4:	cmn	r0, #1
   1c4a8:	str	r0, [r4, #28]
   1c4ac:	moveq	r0, #12
   1c4b0:	popeq	{r4, r5, fp, pc}
   1c4b4:	ldrb	r2, [r4, #24]
   1c4b8:	mov	r1, r0
   1c4bc:	mov	r0, #0
   1c4c0:	cmp	r2, #12
   1c4c4:	popne	{r4, r5, fp, pc}
   1c4c8:	ldr	r2, [r5]
   1c4cc:	ldr	r3, [r4, #20]
   1c4d0:	add	r1, r2, r1, lsl #3
   1c4d4:	ldr	r2, [r1, #4]
   1c4d8:	bfi	r2, r3, #8, #10
   1c4dc:	str	r2, [r1, #4]
   1c4e0:	pop	{r4, r5, fp, pc}
   1c4e4:	ldrb	r0, [r1, #24]
   1c4e8:	cmp	r0, #16
   1c4ec:	beq	1c500 <__assert_fail@plt+0xadd8>
   1c4f0:	cmp	r0, #11
   1c4f4:	bne	1c518 <__assert_fail@plt+0xadf0>
   1c4f8:	ldr	r0, [r1, #4]
   1c4fc:	b	1c538 <__assert_fail@plt+0xae10>
   1c500:	ldmib	r1, {r0, r2}
   1c504:	ldr	r3, [r2, #12]
   1c508:	str	r3, [r0, #16]
   1c50c:	ldr	r0, [r1, #16]
   1c510:	str	r0, [r2, #16]
   1c514:	b	1c53c <__assert_fail@plt+0xae14>
   1c518:	ldr	r0, [r1, #4]
   1c51c:	cmp	r0, #0
   1c520:	ldrne	r2, [r1, #16]
   1c524:	strne	r2, [r0, #16]
   1c528:	ldr	r0, [r1, #8]
   1c52c:	cmp	r0, #0
   1c530:	beq	1c53c <__assert_fail@plt+0xae14>
   1c534:	ldr	r1, [r1, #16]
   1c538:	str	r1, [r0, #16]
   1c53c:	mov	r0, #0
   1c540:	bx	lr
   1c544:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c548:	add	fp, sp, #24
   1c54c:	ldrb	r3, [r1, #24]
   1c550:	ldr	r2, [r1, #28]
   1c554:	mov	r4, #0
   1c558:	sub	r3, r3, #2
   1c55c:	cmp	r3, #14
   1c560:	bhi	1c668 <__assert_fail@plt+0xaf40>
   1c564:	add	r7, pc, #0
   1c568:	ldr	pc, [r7, r3, lsl #2]
   1c56c:			; <UNDEFINED> instruction: 0x0001c6b8
   1c570:	andeq	ip, r1, r8, ror #12
   1c574:	andeq	ip, r1, ip, ror r6
   1c578:	andeq	ip, r1, r8, ror #12
   1c57c:	andeq	ip, r1, r8, ror #12
   1c580:	andeq	ip, r1, r8, ror #12
   1c584:	andeq	ip, r1, r8, lsr #11
   1c588:	andeq	ip, r1, r8, lsr #11
   1c58c:	andeq	ip, r1, r4, ror #11
   1c590:	andeq	ip, r1, r4, ror #11
   1c594:	andeq	ip, r1, r8, lsr #11
   1c598:	andeq	ip, r1, r8, ror #12
   1c59c:	andeq	ip, r1, r8, ror #12
   1c5a0:	andeq	ip, r1, r8, ror #12
   1c5a4:			; <UNDEFINED> instruction: 0x0001c6b8
   1c5a8:	ldr	r1, [r1, #16]
   1c5ac:	ldr	r5, [r1, #28]
   1c5b0:	ldr	r6, [r0, #20]
   1c5b4:	add	r0, r2, r2, lsl #1
   1c5b8:	mov	r1, #1
   1c5bc:	str	r1, [r6, r0, lsl #2]!
   1c5c0:	mov	r0, #4
   1c5c4:	mov	r7, r6
   1c5c8:	str	r1, [r7, #4]!
   1c5cc:	bl	22aa0 <__assert_fail@plt+0x11378>
   1c5d0:	cmp	r0, #0
   1c5d4:	str	r0, [r6, #8]
   1c5d8:	beq	1c6c0 <__assert_fail@plt+0xaf98>
   1c5dc:	str	r5, [r0]
   1c5e0:	b	1c6b8 <__assert_fail@plt+0xaf90>
   1c5e4:	ldrb	r3, [r0, #88]	; 0x58
   1c5e8:	add	r6, r1, #16
   1c5ec:	add	r5, r2, r2, lsl #1
   1c5f0:	orr	r3, r3, #1
   1c5f4:	strb	r3, [r0, #88]	; 0x58
   1c5f8:	mov	r3, r6
   1c5fc:	ldr	r7, [r1, #4]
   1c600:	ldr	r1, [r1, #8]
   1c604:	cmp	r1, #0
   1c608:	addne	r3, r1, #12
   1c60c:	cmp	r7, #0
   1c610:	ldr	r1, [r3]
   1c614:	addne	r6, r7, #12
   1c618:	ldr	r8, [r1, #28]
   1c61c:	ldr	r1, [r6]
   1c620:	ldr	r6, [r0, #20]
   1c624:	mov	r0, #2
   1c628:	ldr	r9, [r1, #28]
   1c62c:	mov	r7, r6
   1c630:	str	r0, [r7, r5, lsl #2]!
   1c634:	mov	r0, #8
   1c638:	bl	22aa0 <__assert_fail@plt+0x11378>
   1c63c:	cmp	r0, #0
   1c640:	str	r0, [r7, #8]
   1c644:	beq	1c6cc <__assert_fail@plt+0xafa4>
   1c648:	add	r1, r6, r5, lsl #2
   1c64c:	cmp	r9, r8
   1c650:	add	r1, r1, #4
   1c654:	bne	1c69c <__assert_fail@plt+0xaf74>
   1c658:	mov	r2, #1
   1c65c:	str	r2, [r1]
   1c660:	str	r9, [r0]
   1c664:	b	1c6b8 <__assert_fail@plt+0xaf90>
   1c668:	ldr	r1, [r1, #16]
   1c66c:	ldr	r0, [r0, #12]
   1c670:	ldr	r1, [r1, #28]
   1c674:	str	r1, [r0, r2, lsl #2]
   1c678:	b	1c6b8 <__assert_fail@plt+0xaf90>
   1c67c:	ldr	r7, [r1, #16]
   1c680:	ldr	r3, [r0, #12]
   1c684:	ldr	r5, [r7, #28]
   1c688:	str	r5, [r3, r2, lsl #2]
   1c68c:	ldrb	r1, [r1, #24]
   1c690:	cmp	r1, #4
   1c694:	beq	1c5b0 <__assert_fail@plt+0xae88>
   1c698:	b	1c6b8 <__assert_fail@plt+0xaf90>
   1c69c:	mov	r2, #2
   1c6a0:	str	r2, [r1]
   1c6a4:	bge	1c6b4 <__assert_fail@plt+0xaf8c>
   1c6a8:	str	r9, [r0]
   1c6ac:	str	r8, [r0, #4]
   1c6b0:	b	1c6b8 <__assert_fail@plt+0xaf90>
   1c6b4:	stm	r0, {r8, r9}
   1c6b8:	mov	r0, r4
   1c6bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c6c0:	mov	r0, #0
   1c6c4:	str	r0, [r7]
   1c6c8:	str	r0, [r6]
   1c6cc:	mov	r4, #12
   1c6d0:	b	1c6b8 <__assert_fail@plt+0xaf90>
   1c6d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c6d8:	add	fp, sp, #28
   1c6dc:	sub	sp, sp, #12
   1c6e0:	ldr	r5, [r2, #4]
   1c6e4:	ldr	sl, [r1]
   1c6e8:	mov	r9, r2
   1c6ec:	cmp	r5, #0
   1c6f0:	ldrbne	r1, [r1, #28]
   1c6f4:	andsne	r1, r1, #16
   1c6f8:	bne	1c800 <__assert_fail@plt+0xb0d8>
   1c6fc:	str	r0, [sp]
   1c700:	mov	r0, #8
   1c704:	mov	r8, #0
   1c708:	add	r3, sp, #4
   1c70c:	mov	r1, #0
   1c710:	mov	r2, #0
   1c714:	str	r0, [sp, #8]
   1c718:	mov	r0, sl
   1c71c:	str	r8, [sp, #4]
   1c720:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1c724:	mov	r7, r0
   1c728:	mov	r0, #9
   1c72c:	add	r3, sp, #4
   1c730:	mov	r1, #0
   1c734:	mov	r2, #0
   1c738:	str	r0, [sp, #8]
   1c73c:	mov	r0, sl
   1c740:	str	r8, [sp, #4]
   1c744:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1c748:	mov	r4, r0
   1c74c:	cmp	r5, #0
   1c750:	mov	r6, r0
   1c754:	beq	1c77c <__assert_fail@plt+0xb054>
   1c758:	mov	r0, #16
   1c75c:	add	r3, sp, #4
   1c760:	mov	r1, r5
   1c764:	mov	r2, r4
   1c768:	str	r0, [sp, #8]
   1c76c:	mov	r0, sl
   1c770:	str	r8, [sp, #4]
   1c774:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1c778:	mov	r6, r0
   1c77c:	mov	r0, #16
   1c780:	add	r3, sp, #4
   1c784:	mov	r1, r7
   1c788:	mov	r2, r6
   1c78c:	str	r0, [sp, #8]
   1c790:	mov	r0, sl
   1c794:	str	r8, [sp, #4]
   1c798:	bl	1b1a4 <__assert_fail@plt+0x9a7c>
   1c79c:	cmp	r4, #0
   1c7a0:	beq	1c7b0 <__assert_fail@plt+0xb088>
   1c7a4:	cmp	r7, #0
   1c7a8:	cmpne	r6, #0
   1c7ac:	bne	1c7c4 <__assert_fail@plt+0xb09c>
   1c7b0:	ldr	r1, [sp]
   1c7b4:	mov	r0, #12
   1c7b8:	mov	r5, #0
   1c7bc:	str	r0, [r1]
   1c7c0:	b	1c81c <__assert_fail@plt+0xb0f4>
   1c7c4:	mov	r5, r0
   1c7c8:	cmp	r0, #0
   1c7cc:	beq	1c7b0 <__assert_fail@plt+0xb088>
   1c7d0:	ldr	r0, [r9, #20]
   1c7d4:	str	r0, [r4, #20]
   1c7d8:	str	r0, [r7, #20]
   1c7dc:	ldr	r1, [r9, #24]
   1c7e0:	ldr	r0, [r4, #24]
   1c7e4:	lsr	r1, r1, #19
   1c7e8:	bfi	r0, r1, #19, #1
   1c7ec:	str	r0, [r4, #24]
   1c7f0:	ldr	r0, [r7, #24]
   1c7f4:	bfi	r0, r1, #19, #1
   1c7f8:	str	r0, [r7, #24]
   1c7fc:	b	1c81c <__assert_fail@plt+0xb0f4>
   1c800:	ldr	r3, [r9, #20]
   1c804:	cmp	r3, #31
   1c808:	bgt	1c81c <__assert_fail@plt+0xb0f4>
   1c80c:	ldr	r1, [sl, #80]	; 0x50
   1c810:	mov	r2, #1
   1c814:	tst	r1, r2, lsl r3
   1c818:	bne	1c6fc <__assert_fail@plt+0xafd4>
   1c81c:	mov	r0, r5
   1c820:	sub	sp, fp, #28
   1c824:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c82c:	add	fp, sp, #28
   1c830:	sub	sp, sp, #12
   1c834:	mov	r4, r0
   1c838:	ldr	r7, [r0, #4]
   1c83c:	ldr	r0, [r0, #8]
   1c840:	mov	r5, r2
   1c844:	mov	r9, r1
   1c848:	cmp	r0, r7
   1c84c:	bcs	1c918 <__assert_fail@plt+0xb1f0>
   1c850:	ldr	r1, [r4]
   1c854:	str	r9, [r1, r0, lsl #3]!
   1c858:	str	r5, [r1, #4]
   1c85c:	ldr	r0, [r4]
   1c860:	ldr	r1, [r4, #8]
   1c864:	add	r0, r0, r1, lsl #3
   1c868:	ldr	r1, [r0, #4]
   1c86c:	bfc	r1, #8, #10
   1c870:	str	r1, [r0, #4]
   1c874:	uxtb	r1, r5
   1c878:	cmp	r1, #5
   1c87c:	bne	1c890 <__assert_fail@plt+0xb168>
   1c880:	ldr	r2, [r4, #92]	; 0x5c
   1c884:	mov	r0, #1048576	; 0x100000
   1c888:	cmp	r2, #1
   1c88c:	bgt	1c8a0 <__assert_fail@plt+0xb178>
   1c890:	sub	r0, r1, #6
   1c894:	clz	r0, r0
   1c898:	lsr	r0, r0, #5
   1c89c:	lsl	r0, r0, #20
   1c8a0:	ldr	r1, [r4]
   1c8a4:	ldr	r2, [r4, #8]
   1c8a8:	add	r1, r1, r2, lsl #3
   1c8ac:	ldr	r2, [r1, #4]
   1c8b0:	bic	r2, r2, #1048576	; 0x100000
   1c8b4:	orr	r0, r2, r0
   1c8b8:	mvn	r2, #0
   1c8bc:	str	r0, [r1, #4]
   1c8c0:	ldr	r0, [r4, #8]
   1c8c4:	ldr	r1, [r4, #12]
   1c8c8:	str	r2, [r1, r0, lsl #2]
   1c8cc:	mov	r2, #0
   1c8d0:	ldr	r0, [r4, #8]
   1c8d4:	ldr	r1, [r4, #20]
   1c8d8:	add	r0, r0, r0, lsl #1
   1c8dc:	str	r2, [r1, r0, lsl #2]!
   1c8e0:	str	r2, [r1, #4]
   1c8e4:	str	r2, [r1, #8]
   1c8e8:	ldr	r0, [r4, #8]
   1c8ec:	ldr	r1, [r4, #24]
   1c8f0:	add	r0, r0, r0, lsl #1
   1c8f4:	str	r2, [r1, r0, lsl #2]!
   1c8f8:	str	r2, [r1, #4]
   1c8fc:	str	r2, [r1, #8]
   1c900:	ldr	r6, [r4, #8]
   1c904:	add	r0, r6, #1
   1c908:	str	r0, [r4, #8]
   1c90c:	mov	r0, r6
   1c910:	sub	sp, fp, #28
   1c914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c918:	movw	r0, #21845	; 0x5555
   1c91c:	lsl	r1, r7, #1
   1c920:	mvn	r6, #0
   1c924:	movt	r0, #5461	; 0x1555
   1c928:	cmp	r1, r0
   1c92c:	bhi	1c90c <__assert_fail@plt+0xb1e4>
   1c930:	ldr	r0, [r4]
   1c934:	str	r1, [sp, #8]
   1c938:	lsl	r1, r7, #4
   1c93c:	bl	22ad0 <__assert_fail@plt+0x113a8>
   1c940:	cmp	r0, #0
   1c944:	beq	1c90c <__assert_fail@plt+0xb1e4>
   1c948:	str	r0, [r4]
   1c94c:	lsl	r8, r7, #3
   1c950:	ldr	r0, [r4, #12]
   1c954:	mov	r1, r8
   1c958:	bl	22ad0 <__assert_fail@plt+0x113a8>
   1c95c:	str	r0, [sp, #4]
   1c960:	ldr	r0, [r4, #16]
   1c964:	mov	r1, r8
   1c968:	bl	22ad0 <__assert_fail@plt+0x113a8>
   1c96c:	mov	r2, r0
   1c970:	ldr	r0, [r4, #20]
   1c974:	add	r1, r7, r7, lsl #1
   1c978:	lsl	r8, r1, #3
   1c97c:	mov	r7, r2
   1c980:	mov	r1, r8
   1c984:	bl	22ad0 <__assert_fail@plt+0x113a8>
   1c988:	mov	sl, r0
   1c98c:	ldr	r0, [r4, #24]
   1c990:	mov	r1, r8
   1c994:	bl	22ad0 <__assert_fail@plt+0x113a8>
   1c998:	mov	r8, r0
   1c99c:	ldr	r0, [sp, #4]
   1c9a0:	cmp	r0, #0
   1c9a4:	beq	1c9b4 <__assert_fail@plt+0xb28c>
   1c9a8:	cmp	r7, #0
   1c9ac:	cmpne	sl, #0
   1c9b0:	bne	1c9d4 <__assert_fail@plt+0xb2ac>
   1c9b4:	bl	132d4 <__assert_fail@plt+0x1bac>
   1c9b8:	mov	r0, r7
   1c9bc:	bl	132d4 <__assert_fail@plt+0x1bac>
   1c9c0:	mov	r0, sl
   1c9c4:	bl	132d4 <__assert_fail@plt+0x1bac>
   1c9c8:	mov	r0, r8
   1c9cc:	bl	132d4 <__assert_fail@plt+0x1bac>
   1c9d0:	b	1c90c <__assert_fail@plt+0xb1e4>
   1c9d4:	cmp	r8, #0
   1c9d8:	beq	1c9b4 <__assert_fail@plt+0xb28c>
   1c9dc:	add	r1, r4, #12
   1c9e0:	stm	r1, {r0, r7, sl}
   1c9e4:	str	r8, [r4, #24]
   1c9e8:	ldr	r0, [sp, #8]
   1c9ec:	str	r0, [r4, #4]
   1c9f0:	ldr	r0, [r4, #8]
   1c9f4:	b	1c850 <__assert_fail@plt+0xb128>
   1c9f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c9fc:	add	fp, sp, #28
   1ca00:	sub	sp, sp, #44	; 0x2c
   1ca04:	mov	r8, r0
   1ca08:	ldr	r0, [r1, #20]
   1ca0c:	add	r4, r2, r2, lsl #1
   1ca10:	mov	r5, r1
   1ca14:	mov	r1, #0
   1ca18:	mov	r9, r3
   1ca1c:	mov	r6, r2
   1ca20:	add	r0, r0, r4, lsl #2
   1ca24:	ldr	r0, [r0, #4]
   1ca28:	str	r1, [sp, #36]	; 0x24
   1ca2c:	add	r0, r0, #1
   1ca30:	str	r0, [sp, #32]
   1ca34:	lsl	r0, r0, #2
   1ca38:	bl	22aa0 <__assert_fail@plt+0x11378>
   1ca3c:	cmp	r0, #0
   1ca40:	str	r0, [sp, #40]	; 0x28
   1ca44:	beq	1cc0c <__assert_fail@plt+0xb4e4>
   1ca48:	mov	r1, #1
   1ca4c:	str	r6, [r0]
   1ca50:	str	r1, [sp, #36]	; 0x24
   1ca54:	mvn	r1, #0
   1ca58:	ldr	r0, [r5, #24]
   1ca5c:	add	r0, r0, r4, lsl #2
   1ca60:	str	r1, [r0, #4]
   1ca64:	ldr	r2, [r5]
   1ca68:	add	r0, r2, r6, lsl #3
   1ca6c:	ldr	r0, [r0, #4]
   1ca70:	ubfx	r1, r0, #8, #10
   1ca74:	cmp	r1, #0
   1ca78:	beq	1cad4 <__assert_fail@plt+0xb3ac>
   1ca7c:	ldr	r3, [r5, #20]
   1ca80:	add	r3, r3, r4, lsl #2
   1ca84:	ldr	r7, [r3, #4]
   1ca88:	cmp	r7, #0
   1ca8c:	beq	1cad4 <__assert_fail@plt+0xb3ac>
   1ca90:	ldr	r3, [r3, #8]
   1ca94:	ldr	r3, [r3]
   1ca98:	add	r2, r2, r3, lsl #3
   1ca9c:	ldrb	r2, [r2, #6]
   1caa0:	tst	r2, #4
   1caa4:	bne	1cad4 <__assert_fail@plt+0xb3ac>
   1caa8:	str	r1, [sp]
   1caac:	mov	r0, r5
   1cab0:	mov	r1, r6
   1cab4:	mov	r2, r6
   1cab8:	mov	r3, r6
   1cabc:	bl	1cc14 <__assert_fail@plt+0xb4ec>
   1cac0:	cmp	r0, #0
   1cac4:	bne	1cc04 <__assert_fail@plt+0xb4dc>
   1cac8:	ldr	r0, [r5]
   1cacc:	add	r0, r0, r6, lsl #3
   1cad0:	ldr	r0, [r0, #4]
   1cad4:	tst	r0, #8
   1cad8:	beq	1cbd8 <__assert_fail@plt+0xb4b0>
   1cadc:	ldr	r0, [r5, #20]
   1cae0:	add	r1, r0, r4, lsl #2
   1cae4:	ldr	r1, [r1, #4]
   1cae8:	cmp	r1, #1
   1caec:	blt	1cbd8 <__assert_fail@plt+0xb4b0>
   1caf0:	str	r8, [sp, #12]
   1caf4:	mov	r8, #0
   1caf8:	add	r7, sp, #16
   1cafc:	add	sl, sp, #32
   1cb00:	mov	r6, #0
   1cb04:	str	r9, [sp, #8]
   1cb08:	add	r0, r0, r4, lsl #2
   1cb0c:	ldr	r0, [r0, #8]
   1cb10:	ldr	r2, [r0, r6, lsl #2]
   1cb14:	ldr	r0, [r5, #24]
   1cb18:	add	r9, r2, r2, lsl #1
   1cb1c:	add	r0, r0, r9, lsl #2
   1cb20:	ldr	r1, [r0, #4]
   1cb24:	cmn	r1, #1
   1cb28:	beq	1cb90 <__assert_fail@plt+0xb468>
   1cb2c:	cmp	r1, #0
   1cb30:	bne	1cb50 <__assert_fail@plt+0xb428>
   1cb34:	mov	r0, r7
   1cb38:	mov	r1, r5
   1cb3c:	mov	r3, #0
   1cb40:	bl	1c9f8 <__assert_fail@plt+0xb2d0>
   1cb44:	cmp	r0, #0
   1cb48:	beq	1cb60 <__assert_fail@plt+0xb438>
   1cb4c:	b	1cc04 <__assert_fail@plt+0xb4dc>
   1cb50:	vldr	d16, [r0]
   1cb54:	ldr	r0, [r0, #8]
   1cb58:	str	r0, [sp, #24]
   1cb5c:	vstr	d16, [sp, #16]
   1cb60:	mov	r0, sl
   1cb64:	mov	r1, r7
   1cb68:	bl	1cef0 <__assert_fail@plt+0xb7c8>
   1cb6c:	cmp	r0, #0
   1cb70:	bne	1cc04 <__assert_fail@plt+0xb4dc>
   1cb74:	ldr	r0, [r5, #24]
   1cb78:	add	r0, r0, r9, lsl #2
   1cb7c:	ldr	r0, [r0, #4]
   1cb80:	cmp	r0, #0
   1cb84:	bne	1cb94 <__assert_fail@plt+0xb46c>
   1cb88:	ldr	r0, [sp, #24]
   1cb8c:	bl	132d4 <__assert_fail@plt+0x1bac>
   1cb90:	mov	r8, #1
   1cb94:	ldr	r0, [r5, #20]
   1cb98:	add	r6, r6, #1
   1cb9c:	add	r1, r0, r4, lsl #2
   1cba0:	ldr	r1, [r1, #4]
   1cba4:	cmp	r6, r1
   1cba8:	blt	1cb08 <__assert_fail@plt+0xb3e0>
   1cbac:	tst	r8, #1
   1cbb0:	ldr	r8, [sp, #12]
   1cbb4:	ldr	r0, [sp, #8]
   1cbb8:	beq	1cbd8 <__assert_fail@plt+0xb4b0>
   1cbbc:	cmp	r0, #0
   1cbc0:	bne	1cbd8 <__assert_fail@plt+0xb4b0>
   1cbc4:	ldr	r0, [r5, #24]
   1cbc8:	mov	r1, #0
   1cbcc:	add	r0, r0, r4, lsl #2
   1cbd0:	str	r1, [r0, #4]
   1cbd4:	b	1cbf0 <__assert_fail@plt+0xb4c8>
   1cbd8:	ldr	r0, [r5, #24]
   1cbdc:	vldr	d16, [sp, #32]
   1cbe0:	ldr	r1, [sp, #40]	; 0x28
   1cbe4:	add	r0, r0, r4, lsl #2
   1cbe8:	str	r1, [r0, #8]
   1cbec:	vstr	d16, [r0]
   1cbf0:	ldr	r0, [sp, #40]	; 0x28
   1cbf4:	vldr	d16, [sp, #32]
   1cbf8:	str	r0, [r8, #8]
   1cbfc:	mov	r0, #0
   1cc00:	vstr	d16, [r8]
   1cc04:	sub	sp, fp, #28
   1cc08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc0c:	mov	r0, #12
   1cc10:	b	1cc04 <__assert_fail@plt+0xb4dc>
   1cc14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc18:	add	fp, sp, #28
   1cc1c:	sub	sp, sp, #20
   1cc20:	ldr	sl, [fp, #8]
   1cc24:	mov	r8, r2
   1cc28:	mov	r4, r1
   1cc2c:	mov	r7, r0
   1cc30:	str	r3, [sp, #8]
   1cc34:	ldr	r2, [r7]
   1cc38:	add	r1, r2, r4, lsl #3
   1cc3c:	ldrb	r0, [r1, #4]!
   1cc40:	cmp	r0, #4
   1cc44:	bne	1ccc4 <__assert_fail@plt+0xb59c>
   1cc48:	ldr	r0, [r7, #12]
   1cc4c:	ldr	r1, [r7, #20]
   1cc50:	add	r9, r8, r8, lsl #1
   1cc54:	mov	r2, sl
   1cc58:	mov	r6, r7
   1cc5c:	ldr	r5, [r0, r4, lsl #2]
   1cc60:	add	r0, r1, r9, lsl #2
   1cc64:	mov	r1, #0
   1cc68:	str	r1, [r0, #4]
   1cc6c:	mov	r0, r7
   1cc70:	mov	r1, r5
   1cc74:	bl	1d07c <__assert_fail@plt+0xb954>
   1cc78:	mov	r7, r0
   1cc7c:	mov	r0, #12
   1cc80:	cmn	r7, #1
   1cc84:	str	r0, [sp, #16]
   1cc88:	beq	1cee4 <__assert_fail@plt+0xb7bc>
   1cc8c:	ldr	r0, [r6, #12]
   1cc90:	ldr	r1, [r0, r4, lsl #2]
   1cc94:	str	r1, [r0, r8, lsl #2]
   1cc98:	mov	r1, r7
   1cc9c:	ldr	r0, [r6, #20]
   1cca0:	add	r0, r0, r9, lsl #2
   1cca4:	bl	1d104 <__assert_fail@plt+0xb9dc>
   1cca8:	mov	r8, r7
   1ccac:	mov	r1, #0
   1ccb0:	cmp	r0, #0
   1ccb4:	mov	r4, r5
   1ccb8:	mov	r7, r6
   1ccbc:	bne	1ce94 <__assert_fail@plt+0xb76c>
   1ccc0:	b	1cee4 <__assert_fail@plt+0xb7bc>
   1ccc4:	ldr	r0, [r7, #20]
   1ccc8:	add	r9, r4, r4, lsl #1
   1cccc:	add	r6, r0, r9, lsl #2
   1ccd0:	ldr	r3, [r6, #4]
   1ccd4:	cmp	r3, #0
   1ccd8:	beq	1ced0 <__assert_fail@plt+0xb7a8>
   1ccdc:	ldr	r6, [r6, #8]
   1cce0:	cmp	r3, #1
   1cce4:	ldr	r5, [r6]
   1cce8:	add	r6, r8, r8, lsl #1
   1ccec:	add	r0, r0, r6, lsl #2
   1ccf0:	str	r6, [sp, #12]
   1ccf4:	mov	r6, #0
   1ccf8:	str	r6, [r0, #4]
   1ccfc:	bne	1cd30 <__assert_fail@plt+0xb608>
   1cd00:	ldr	r2, [sp, #8]
   1cd04:	cmp	r4, r2
   1cd08:	bne	1ce40 <__assert_fail@plt+0xb718>
   1cd0c:	cmp	r8, r4
   1cd10:	beq	1ce40 <__assert_fail@plt+0xb718>
   1cd14:	mov	r1, r5
   1cd18:	bl	1d104 <__assert_fail@plt+0xb9dc>
   1cd1c:	ldr	r4, [sp, #8]
   1cd20:	cmp	r0, #0
   1cd24:	mov	r1, #1
   1cd28:	movwne	r1, #2
   1cd2c:	b	1ce94 <__assert_fail@plt+0xb76c>
   1cd30:	ldr	r1, [r7, #8]
   1cd34:	sub	r3, r1, #1
   1cd38:	cmp	r3, #1
   1cd3c:	blt	1cd8c <__assert_fail@plt+0xb664>
   1cd40:	add	r3, r2, r3, lsl #3
   1cd44:	ldr	r6, [r3, #4]
   1cd48:	ands	r3, r6, #262144	; 0x40000
   1cd4c:	beq	1cd8c <__assert_fail@plt+0xb664>
   1cd50:	ldr	r3, [r7, #16]
   1cd54:	sub	r2, r2, #12
   1cd58:	sub	r3, r3, #4
   1cd5c:	ldr	r4, [r3, r1, lsl #2]
   1cd60:	cmp	r4, r5
   1cd64:	ubfxeq	r6, r6, #8, #10
   1cd68:	cmpeq	r6, sl
   1cd6c:	beq	1cea0 <__assert_fail@plt+0xb778>
   1cd70:	sub	r6, r1, #2
   1cd74:	cmp	r6, #1
   1cd78:	blt	1cd8c <__assert_fail@plt+0xb664>
   1cd7c:	ldr	r6, [r2, r1, lsl #3]
   1cd80:	sub	r1, r1, #1
   1cd84:	ands	r4, r6, #262144	; 0x40000
   1cd88:	bne	1cd5c <__assert_fail@plt+0xb634>
   1cd8c:	mov	r0, r7
   1cd90:	mov	r1, r5
   1cd94:	mov	r2, sl
   1cd98:	bl	1d07c <__assert_fail@plt+0xb954>
   1cd9c:	mov	r4, r0
   1cda0:	mov	r0, #12
   1cda4:	cmn	r4, #1
   1cda8:	str	r0, [sp, #16]
   1cdac:	beq	1cee4 <__assert_fail@plt+0xb7bc>
   1cdb0:	ldr	r0, [r7, #20]
   1cdb4:	ldr	r6, [sp, #12]
   1cdb8:	mov	r1, r4
   1cdbc:	add	r0, r0, r6, lsl #2
   1cdc0:	bl	1d104 <__assert_fail@plt+0xb9dc>
   1cdc4:	cmp	r0, #0
   1cdc8:	beq	1cee4 <__assert_fail@plt+0xb7bc>
   1cdcc:	ldr	r3, [sp, #8]
   1cdd0:	mov	r0, r7
   1cdd4:	mov	r1, r5
   1cdd8:	mov	r2, r4
   1cddc:	str	sl, [sp]
   1cde0:	bl	1cc14 <__assert_fail@plt+0xb4ec>
   1cde4:	cmp	r0, #0
   1cde8:	bne	1cee0 <__assert_fail@plt+0xb7b8>
   1cdec:	ldr	r0, [r7, #20]
   1cdf0:	mov	r2, sl
   1cdf4:	add	r0, r0, r9, lsl #2
   1cdf8:	ldr	r0, [r0, #8]
   1cdfc:	ldr	r4, [r0, #4]
   1ce00:	mov	r0, r7
   1ce04:	mov	r1, r4
   1ce08:	bl	1d07c <__assert_fail@plt+0xb954>
   1ce0c:	mov	r8, r0
   1ce10:	mov	r0, #12
   1ce14:	cmn	r8, #1
   1ce18:	str	r0, [sp, #16]
   1ce1c:	beq	1cee4 <__assert_fail@plt+0xb7bc>
   1ce20:	ldr	r0, [r7, #20]
   1ce24:	mov	r1, r8
   1ce28:	add	r0, r0, r6, lsl #2
   1ce2c:	bl	1d104 <__assert_fail@plt+0xb9dc>
   1ce30:	mov	r1, #0
   1ce34:	cmp	r0, #0
   1ce38:	bne	1ce94 <__assert_fail@plt+0xb76c>
   1ce3c:	b	1cee4 <__assert_fail@plt+0xb7bc>
   1ce40:	ldr	r0, [r1]
   1ce44:	mov	r1, r5
   1ce48:	ubfx	r0, r0, #8, #10
   1ce4c:	orr	sl, r0, sl
   1ce50:	mov	r0, r7
   1ce54:	mov	r2, sl
   1ce58:	bl	1d07c <__assert_fail@plt+0xb954>
   1ce5c:	mov	r8, r0
   1ce60:	mov	r0, #12
   1ce64:	cmn	r8, #1
   1ce68:	str	r0, [sp, #16]
   1ce6c:	beq	1cee4 <__assert_fail@plt+0xb7bc>
   1ce70:	ldr	r0, [r7, #20]
   1ce74:	ldr	r1, [sp, #12]
   1ce78:	add	r0, r0, r1, lsl #2
   1ce7c:	mov	r1, r8
   1ce80:	bl	1d104 <__assert_fail@plt+0xb9dc>
   1ce84:	mov	r1, #0
   1ce88:	cmp	r0, #0
   1ce8c:	mov	r4, r5
   1ce90:	beq	1cee4 <__assert_fail@plt+0xb7bc>
   1ce94:	cmp	r1, #0
   1ce98:	beq	1cc34 <__assert_fail@plt+0xb50c>
   1ce9c:	b	1cebc <__assert_fail@plt+0xb794>
   1cea0:	sub	r1, r1, #1
   1cea4:	bl	1d104 <__assert_fail@plt+0xb9dc>
   1cea8:	ldr	r6, [sp, #12]
   1ceac:	cmp	r0, #0
   1ceb0:	bne	1cdec <__assert_fail@plt+0xb6c4>
   1ceb4:	mov	r0, #12
   1ceb8:	b	1cee0 <__assert_fail@plt+0xb7b8>
   1cebc:	mov	r0, #12
   1cec0:	cmp	r1, #2
   1cec4:	str	r0, [sp, #16]
   1cec8:	beq	1cedc <__assert_fail@plt+0xb7b4>
   1cecc:	b	1cee4 <__assert_fail@plt+0xb7bc>
   1ced0:	ldr	r0, [r7, #12]
   1ced4:	ldr	r1, [r0, r4, lsl #2]
   1ced8:	str	r1, [r0, r8, lsl #2]
   1cedc:	mov	r0, #0
   1cee0:	str	r0, [sp, #16]
   1cee4:	ldr	r0, [sp, #16]
   1cee8:	sub	sp, fp, #28
   1ceec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cef0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1cef4:	add	fp, sp, #24
   1cef8:	mov	r8, #0
   1cefc:	cmp	r1, #0
   1cf00:	beq	1d058 <__assert_fail@plt+0xb930>
   1cf04:	mov	r5, r0
   1cf08:	ldr	r0, [r1, #4]
   1cf0c:	mov	r9, r1
   1cf10:	cmp	r0, #0
   1cf14:	beq	1d058 <__assert_fail@plt+0xb930>
   1cf18:	ldr	r1, [r5, #4]
   1cf1c:	ldr	r2, [r5]
   1cf20:	add	r3, r1, r0, lsl #1
   1cf24:	cmp	r2, r3
   1cf28:	bge	1cf58 <__assert_fail@plt+0xb830>
   1cf2c:	add	r7, r2, r0
   1cf30:	ldr	r0, [r5, #8]
   1cf34:	lsl	r1, r7, #3
   1cf38:	bl	22ad0 <__assert_fail@plt+0x113a8>
   1cf3c:	cmp	r0, #0
   1cf40:	beq	1d074 <__assert_fail@plt+0xb94c>
   1cf44:	str	r0, [r5, #8]
   1cf48:	lsl	r0, r7, #1
   1cf4c:	str	r0, [r5]
   1cf50:	ldr	r1, [r5, #4]
   1cf54:	ldr	r0, [r9, #4]
   1cf58:	cmp	r1, #0
   1cf5c:	beq	1d060 <__assert_fail@plt+0xb938>
   1cf60:	add	r7, r1, r0, lsl #1
   1cf64:	sub	r1, r1, #1
   1cf68:	sub	r0, r0, #1
   1cf6c:	orr	r2, r0, r1
   1cf70:	cmp	r2, #0
   1cf74:	blt	1cfc0 <__assert_fail@plt+0xb898>
   1cf78:	ldr	r2, [r9, #8]
   1cf7c:	ldr	r3, [r5, #8]
   1cf80:	ldr	r4, [r2, r0, lsl #2]
   1cf84:	ldr	r6, [r3, r1, lsl #2]
   1cf88:	cmp	r6, r4
   1cf8c:	bne	1cf9c <__assert_fail@plt+0xb874>
   1cf90:	sub	r1, r1, #1
   1cf94:	sub	r0, r0, #1
   1cf98:	b	1cfb4 <__assert_fail@plt+0xb88c>
   1cf9c:	bge	1cfb0 <__assert_fail@plt+0xb888>
   1cfa0:	sub	r7, r7, #1
   1cfa4:	sub	r0, r0, #1
   1cfa8:	str	r4, [r3, r7, lsl #2]
   1cfac:	b	1cfb4 <__assert_fail@plt+0xb88c>
   1cfb0:	sub	r1, r1, #1
   1cfb4:	orr	r6, r0, r1
   1cfb8:	cmn	r6, #1
   1cfbc:	bgt	1cf80 <__assert_fail@plt+0xb858>
   1cfc0:	cmp	r0, #0
   1cfc4:	blt	1cfe4 <__assert_fail@plt+0xb8bc>
   1cfc8:	add	r2, r0, #1
   1cfcc:	ldr	r0, [r5, #8]
   1cfd0:	ldr	r1, [r9, #8]
   1cfd4:	sub	r7, r7, r2
   1cfd8:	lsl	r2, r2, #2
   1cfdc:	add	r0, r0, r7, lsl #2
   1cfe0:	bl	11464 <memcpy@plt>
   1cfe4:	ldr	r0, [r5, #4]
   1cfe8:	ldr	r2, [r9, #4]
   1cfec:	sub	r1, r0, #1
   1cff0:	add	r3, r1, r2, lsl #1
   1cff4:	sub	r2, r3, r7
   1cff8:	adds	r2, r2, #1
   1cffc:	beq	1d058 <__assert_fail@plt+0xb930>
   1d000:	add	r0, r2, r0
   1d004:	str	r0, [r5, #4]
   1d008:	ldr	r0, [r5, #8]
   1d00c:	ldr	r6, [r0, r1, lsl #2]
   1d010:	ldr	r5, [r0, r3, lsl #2]
   1d014:	cmp	r5, r6
   1d018:	ble	1d034 <__assert_fail@plt+0xb90c>
   1d01c:	add	r6, r2, r1
   1d020:	subs	r2, r2, #1
   1d024:	sub	r3, r3, #1
   1d028:	str	r5, [r0, r6, lsl #2]
   1d02c:	bne	1d00c <__assert_fail@plt+0xb8e4>
   1d030:	b	1d058 <__assert_fail@plt+0xb930>
   1d034:	add	r5, r2, r1
   1d038:	cmp	r1, #0
   1d03c:	str	r6, [r0, r5, lsl #2]
   1d040:	sub	r6, r1, #1
   1d044:	mov	r1, r6
   1d048:	bgt	1d00c <__assert_fail@plt+0xb8e4>
   1d04c:	add	r1, r0, r7, lsl #2
   1d050:	lsl	r2, r2, #2
   1d054:	bl	11464 <memcpy@plt>
   1d058:	mov	r0, r8
   1d05c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d060:	str	r0, [r5, #4]
   1d064:	ldr	r0, [r5, #8]
   1d068:	ldr	r2, [r9, #4]
   1d06c:	ldr	r1, [r9, #8]
   1d070:	b	1d050 <__assert_fail@plt+0xb928>
   1d074:	mov	r8, #12
   1d078:	b	1d058 <__assert_fail@plt+0xb930>
   1d07c:	push	{r4, r5, r6, sl, fp, lr}
   1d080:	add	fp, sp, #16
   1d084:	mov	r5, r0
   1d088:	ldr	r0, [r0]
   1d08c:	mov	r4, r1
   1d090:	mov	r6, r2
   1d094:	ldr	r1, [r0, r1, lsl #3]!
   1d098:	ldr	r2, [r0, #4]
   1d09c:	mov	r0, r5
   1d0a0:	bl	1c828 <__assert_fail@plt+0xb100>
   1d0a4:	cmn	r0, #1
   1d0a8:	ldrne	r1, [r5]
   1d0ac:	movwne	r3, #65280	; 0xff00
   1d0b0:	movtne	r3, #3
   1d0b4:	addne	r1, r1, r0, lsl #3
   1d0b8:	ldrne	r2, [r1, #4]
   1d0bc:	bfine	r2, r6, #8, #10
   1d0c0:	strne	r2, [r1, #4]
   1d0c4:	ldrne	r1, [r5]
   1d0c8:	addne	r2, r1, r4, lsl #3
   1d0cc:	addne	r1, r1, r0, lsl #3
   1d0d0:	ldrne	r2, [r2, #4]
   1d0d4:	andne	r2, r2, r3
   1d0d8:	ldrne	r3, [r1, #4]
   1d0dc:	orrne	r2, r2, r3
   1d0e0:	strne	r2, [r1, #4]
   1d0e4:	ldrne	r1, [r5]
   1d0e8:	addne	r1, r1, r0, lsl #3
   1d0ec:	ldrne	r2, [r1, #4]
   1d0f0:	orrne	r2, r2, #262144	; 0x40000
   1d0f4:	strne	r2, [r1, #4]
   1d0f8:	ldrne	r1, [r5, #16]
   1d0fc:	strne	r4, [r1, r0, lsl #2]
   1d100:	pop	{r4, r5, r6, sl, fp, pc}
   1d104:	push	{r4, r5, r6, sl, fp, lr}
   1d108:	add	fp, sp, #16
   1d10c:	ldr	r2, [r0]
   1d110:	mov	r5, r1
   1d114:	mov	r4, r0
   1d118:	cmp	r2, #0
   1d11c:	beq	1d148 <__assert_fail@plt+0xba20>
   1d120:	ldr	r1, [r4, #4]
   1d124:	cmp	r1, #0
   1d128:	bne	1d174 <__assert_fail@plt+0xba4c>
   1d12c:	ldr	r0, [r4, #8]
   1d130:	str	r5, [r0]
   1d134:	ldr	r0, [r4, #4]
   1d138:	mov	r6, #1
   1d13c:	add	r0, r0, #1
   1d140:	str	r0, [r4, #4]
   1d144:	b	1d16c <__assert_fail@plt+0xba44>
   1d148:	mov	r6, #1
   1d14c:	mov	r0, #4
   1d150:	str	r6, [r4]
   1d154:	str	r6, [r4, #4]
   1d158:	bl	22aa0 <__assert_fail@plt+0x11378>
   1d15c:	cmp	r0, #0
   1d160:	str	r0, [r4, #8]
   1d164:	beq	1d1a4 <__assert_fail@plt+0xba7c>
   1d168:	str	r5, [r0]
   1d16c:	mov	r0, r6
   1d170:	pop	{r4, r5, r6, sl, fp, pc}
   1d174:	cmp	r2, r1
   1d178:	bne	1d1b4 <__assert_fail@plt+0xba8c>
   1d17c:	lsl	r0, r2, #1
   1d180:	lsl	r1, r2, #3
   1d184:	str	r0, [r4]
   1d188:	ldr	r0, [r4, #8]
   1d18c:	bl	22ad0 <__assert_fail@plt+0x113a8>
   1d190:	cmp	r0, #0
   1d194:	beq	1d230 <__assert_fail@plt+0xbb08>
   1d198:	str	r0, [r4, #8]
   1d19c:	ldr	r1, [r4, #4]
   1d1a0:	b	1d1b8 <__assert_fail@plt+0xba90>
   1d1a4:	mov	r6, #0
   1d1a8:	str	r6, [r4]
   1d1ac:	str	r6, [r4, #4]
   1d1b0:	b	1d16c <__assert_fail@plt+0xba44>
   1d1b4:	ldr	r0, [r4, #8]
   1d1b8:	ldr	r2, [r0]
   1d1bc:	cmp	r2, r5
   1d1c0:	ble	1d1f8 <__assert_fail@plt+0xbad0>
   1d1c4:	cmp	r1, #1
   1d1c8:	blt	1d228 <__assert_fail@plt+0xbb00>
   1d1cc:	add	r2, r0, r1, lsl #2
   1d1d0:	add	r1, r1, #1
   1d1d4:	mov	r3, r2
   1d1d8:	ldr	r6, [r3, #-4]!
   1d1dc:	sub	r1, r1, #1
   1d1e0:	cmp	r1, #1
   1d1e4:	str	r6, [r2]
   1d1e8:	mov	r2, r3
   1d1ec:	bgt	1d1d8 <__assert_fail@plt+0xbab0>
   1d1f0:	sub	r1, r1, #1
   1d1f4:	b	1d228 <__assert_fail@plt+0xbb00>
   1d1f8:	add	r2, r0, r1, lsl #2
   1d1fc:	ldr	r3, [r2, #-4]
   1d200:	cmp	r3, r5
   1d204:	ble	1d228 <__assert_fail@plt+0xbb00>
   1d208:	sub	r1, r1, #2
   1d20c:	str	r3, [r2]
   1d210:	sub	r1, r1, #1
   1d214:	ldr	r3, [r2, #-8]
   1d218:	sub	r2, r2, #4
   1d21c:	cmp	r3, r5
   1d220:	bgt	1d20c <__assert_fail@plt+0xbae4>
   1d224:	add	r1, r1, #2
   1d228:	str	r5, [r0, r1, lsl #2]
   1d22c:	b	1d134 <__assert_fail@plt+0xba0c>
   1d230:	mov	r6, #0
   1d234:	b	1d16c <__assert_fail@plt+0xba44>
   1d238:	push	{r4, r5, fp, lr}
   1d23c:	add	fp, sp, #8
   1d240:	mov	r5, r0
   1d244:	mov	r4, r1
   1d248:	ldr	r0, [r0]
   1d24c:	ldr	r1, [r5, #4]
   1d250:	cmp	r0, r1
   1d254:	bne	1d288 <__assert_fail@plt+0xbb60>
   1d258:	mov	r1, #2
   1d25c:	add	r0, r1, r0, lsl #1
   1d260:	str	r0, [r5]
   1d264:	lsl	r1, r0, #2
   1d268:	ldr	r0, [r5, #8]
   1d26c:	bl	22ad0 <__assert_fail@plt+0x113a8>
   1d270:	cmp	r0, #0
   1d274:	moveq	r0, #0
   1d278:	popeq	{r4, r5, fp, pc}
   1d27c:	str	r0, [r5, #8]
   1d280:	ldr	r1, [r5, #4]
   1d284:	b	1d28c <__assert_fail@plt+0xbb64>
   1d288:	ldr	r0, [r5, #8]
   1d28c:	add	r2, r1, #1
   1d290:	str	r2, [r5, #4]
   1d294:	str	r4, [r0, r1, lsl #2]
   1d298:	mov	r0, #1
   1d29c:	pop	{r4, r5, fp, pc}
   1d2a0:	push	{r4, r5, fp, lr}
   1d2a4:	add	fp, sp, #8
   1d2a8:	mov	r4, r0
   1d2ac:	ldr	r0, [r1, #4]
   1d2b0:	mov	r5, r1
   1d2b4:	str	r0, [r4, #4]
   1d2b8:	ldr	r1, [r1, #4]
   1d2bc:	cmp	r1, #1
   1d2c0:	blt	1d2f4 <__assert_fail@plt+0xbbcc>
   1d2c4:	str	r0, [r4]
   1d2c8:	lsl	r0, r0, #2
   1d2cc:	bl	22aa0 <__assert_fail@plt+0x11378>
   1d2d0:	cmp	r0, #0
   1d2d4:	str	r0, [r4, #8]
   1d2d8:	beq	1d308 <__assert_fail@plt+0xbbe0>
   1d2dc:	ldr	r2, [r5, #4]
   1d2e0:	ldr	r1, [r5, #8]
   1d2e4:	lsl	r2, r2, #2
   1d2e8:	bl	11464 <memcpy@plt>
   1d2ec:	mov	r0, #0
   1d2f0:	pop	{r4, r5, fp, pc}
   1d2f4:	mov	r0, #0
   1d2f8:	str	r0, [r4]
   1d2fc:	str	r0, [r4, #4]
   1d300:	str	r0, [r4, #8]
   1d304:	pop	{r4, r5, fp, pc}
   1d308:	mov	r0, #0
   1d30c:	str	r0, [r4]
   1d310:	str	r0, [r4, #4]
   1d314:	mov	r0, #12
   1d318:	pop	{r4, r5, fp, pc}
   1d31c:	ldr	r2, [r0, #4]
   1d320:	cmp	r2, #1
   1d324:	movlt	r0, #0
   1d328:	bxlt	lr
   1d32c:	push	{r4, r5, r6, sl, fp, lr}
   1d330:	add	fp, sp, #16
   1d334:	ldr	ip, [r0, #8]
   1d338:	subs	r2, r2, #1
   1d33c:	mov	r0, #0
   1d340:	mov	r3, #0
   1d344:	beq	1d370 <__assert_fail@plt+0xbc48>
   1d348:	mov	r3, #0
   1d34c:	mov	lr, #1
   1d350:	add	r4, r2, r3
   1d354:	lsr	r5, r4, #1
   1d358:	ldr	r6, [ip, r5, lsl #2]
   1d35c:	cmp	r6, r1
   1d360:	movge	r2, r5
   1d364:	addlt	r3, lr, r4, lsr #1
   1d368:	cmp	r3, r2
   1d36c:	bcc	1d350 <__assert_fail@plt+0xbc28>
   1d370:	ldr	r2, [ip, r3, lsl #2]
   1d374:	cmp	r2, r1
   1d378:	addeq	r0, r3, #1
   1d37c:	pop	{r4, r5, r6, sl, fp, pc}
   1d380:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d384:	add	fp, sp, #28
   1d388:	sub	sp, sp, #20
   1d38c:	ldr	lr, [r2, #4]
   1d390:	cmp	lr, #0
   1d394:	beq	1d69c <__assert_fail@plt+0xbf74>
   1d398:	mov	r8, r3
   1d39c:	mov	sl, r2
   1d3a0:	add	r7, lr, r3
   1d3a4:	cmp	lr, #1
   1d3a8:	str	r0, [sp, #4]
   1d3ac:	blt	1d3c8 <__assert_fail@plt+0xbca0>
   1d3b0:	ldr	r3, [sl, #8]
   1d3b4:	mov	r2, lr
   1d3b8:	ldr	r0, [r3], #4
   1d3bc:	subs	r2, r2, #1
   1d3c0:	add	r7, r0, r7
   1d3c4:	bne	1d3b8 <__assert_fail@plt+0xbc90>
   1d3c8:	ldr	r0, [r1, #32]
   1d3cc:	str	r1, [sp, #12]
   1d3d0:	ldr	r1, [r1, #68]	; 0x44
   1d3d4:	and	r1, r1, r7
   1d3d8:	add	r2, r1, r1, lsl #1
   1d3dc:	ldr	r1, [r0, r2, lsl #2]
   1d3e0:	cmp	r1, #1
   1d3e4:	blt	1d474 <__assert_fail@plt+0xbd4c>
   1d3e8:	add	r0, r0, r2, lsl #2
   1d3ec:	sub	ip, lr, #1
   1d3f0:	mov	r3, #0
   1d3f4:	ldr	r9, [r0, #8]
   1d3f8:	b	1d438 <__assert_fail@plt+0xbd10>
   1d3fc:	ldr	r0, [r5, #4]
   1d400:	cmp	r0, lr
   1d404:	bne	1d468 <__assert_fail@plt+0xbd40>
   1d408:	mov	r0, ip
   1d40c:	add	r6, r0, #1
   1d410:	cmp	r6, #1
   1d414:	blt	1d6a4 <__assert_fail@plt+0xbf7c>
   1d418:	ldr	r6, [sl, #8]
   1d41c:	ldr	r2, [r5, #8]
   1d420:	ldr	r6, [r6, r0, lsl #2]
   1d424:	ldr	r2, [r2, r0, lsl #2]
   1d428:	sub	r0, r0, #1
   1d42c:	cmp	r2, r6
   1d430:	beq	1d40c <__assert_fail@plt+0xbce4>
   1d434:	b	1d468 <__assert_fail@plt+0xbd40>
   1d438:	ldr	r4, [r9, r3, lsl #2]
   1d43c:	ldr	r0, [r4]
   1d440:	cmp	r0, r7
   1d444:	bne	1d468 <__assert_fail@plt+0xbd40>
   1d448:	ldrb	r0, [r4, #52]	; 0x34
   1d44c:	and	r0, r0, #15
   1d450:	cmp	r0, r8
   1d454:	bne	1d468 <__assert_fail@plt+0xbd40>
   1d458:	cmp	sl, #0
   1d45c:	ldrne	r5, [r4, #40]	; 0x28
   1d460:	cmpne	r5, #0
   1d464:	bne	1d3fc <__assert_fail@plt+0xbcd4>
   1d468:	add	r3, r3, #1
   1d46c:	cmp	r3, r1
   1d470:	blt	1d438 <__assert_fail@plt+0xbd10>
   1d474:	mov	r0, #56	; 0x38
   1d478:	mov	r1, #1
   1d47c:	bl	22a4c <__assert_fail@plt+0x11324>
   1d480:	cmp	r0, #0
   1d484:	beq	1d688 <__assert_fail@plt+0xbf60>
   1d488:	add	r5, r0, #4
   1d48c:	mov	r4, r0
   1d490:	mov	r1, sl
   1d494:	mov	r0, r5
   1d498:	bl	1d2a0 <__assert_fail@plt+0xbb78>
   1d49c:	cmp	r0, #0
   1d4a0:	bne	1d6b0 <__assert_fail@plt+0xbf88>
   1d4a4:	str	r5, [r4, #40]	; 0x28
   1d4a8:	and	r0, r8, #15
   1d4ac:	ldr	r6, [sp, #12]
   1d4b0:	ldrb	r1, [r4, #52]	; 0x34
   1d4b4:	and	r1, r1, #240	; 0xf0
   1d4b8:	orr	r0, r1, r0
   1d4bc:	strb	r0, [r4, #52]	; 0x34
   1d4c0:	ldr	r0, [sl, #4]
   1d4c4:	cmp	r0, #1
   1d4c8:	blt	1d668 <__assert_fail@plt+0xbf40>
   1d4cc:	movw	r9, #65280	; 0xff00
   1d4d0:	and	r0, r8, #4
   1d4d4:	mov	ip, r5
   1d4d8:	and	lr, r8, #1
   1d4dc:	str	r0, [sp]
   1d4e0:	and	r0, r8, #2
   1d4e4:	movt	r9, #3
   1d4e8:	mov	r8, #0
   1d4ec:	str	r0, [sp, #8]
   1d4f0:	add	r3, r9, #255	; 0xff
   1d4f4:	mov	r0, #0
   1d4f8:	str	r3, [sp, #16]
   1d4fc:	b	1d534 <__assert_fail@plt+0xbe0c>
   1d500:	sub	r2, r2, #1
   1d504:	cmp	r2, r1
   1d508:	str	r2, [r4, #8]
   1d50c:	ble	1d650 <__assert_fail@plt+0xbf28>
   1d510:	ldr	r2, [r4, #12]
   1d514:	add	r3, r2, r1, lsl #2
   1d518:	ldr	r3, [r3, #4]
   1d51c:	str	r3, [r2, r1, lsl #2]
   1d520:	add	r1, r1, #1
   1d524:	ldr	r3, [r4, #8]
   1d528:	cmp	r1, r3
   1d52c:	blt	1d514 <__assert_fail@plt+0xbdec>
   1d530:	b	1d650 <__assert_fail@plt+0xbf28>
   1d534:	ldr	r1, [sl, #8]
   1d538:	ldr	r2, [r6]
   1d53c:	ldr	r1, [r1, r8, lsl #2]
   1d540:	add	r1, r2, r1, lsl #3
   1d544:	ldr	r5, [r1, #4]
   1d548:	and	r1, r5, r3
   1d54c:	cmp	r1, #1
   1d550:	beq	1d658 <__assert_fail@plt+0xbf30>
   1d554:	ldrb	r3, [r4, #52]	; 0x34
   1d558:	mov	r2, #32
   1d55c:	and	r1, r5, r9
   1d560:	and	r2, r2, r5, lsr #15
   1d564:	orr	r2, r3, r2
   1d568:	uxtb	r3, r5
   1d56c:	cmp	r3, #2
   1d570:	strb	r2, [r4, #52]	; 0x34
   1d574:	beq	1d588 <__assert_fail@plt+0xbe60>
   1d578:	cmp	r3, #4
   1d57c:	bne	1d594 <__assert_fail@plt+0xbe6c>
   1d580:	mov	r3, #64	; 0x40
   1d584:	b	1d58c <__assert_fail@plt+0xbe64>
   1d588:	mov	r3, #16
   1d58c:	orr	r2, r2, r3
   1d590:	strb	r2, [r4, #52]	; 0x34
   1d594:	cmp	r1, #0
   1d598:	beq	1d654 <__assert_fail@plt+0xbf2c>
   1d59c:	ldr	r1, [r4, #40]	; 0x28
   1d5a0:	cmp	r1, ip
   1d5a4:	bne	1d5f8 <__assert_fail@plt+0xbed0>
   1d5a8:	mov	r0, #12
   1d5ac:	mov	r6, lr
   1d5b0:	mov	r9, ip
   1d5b4:	bl	22aa0 <__assert_fail@plt+0x11378>
   1d5b8:	cmp	r0, #0
   1d5bc:	beq	1d680 <__assert_fail@plt+0xbf58>
   1d5c0:	mov	r1, sl
   1d5c4:	str	r0, [r4, #40]	; 0x28
   1d5c8:	bl	1d2a0 <__assert_fail@plt+0xbb78>
   1d5cc:	cmp	r0, #0
   1d5d0:	bne	1d680 <__assert_fail@plt+0xbf58>
   1d5d4:	ldrb	r0, [r4, #52]	; 0x34
   1d5d8:	mov	lr, r6
   1d5dc:	ldr	r6, [sp, #12]
   1d5e0:	mov	ip, r9
   1d5e4:	movw	r9, #65280	; 0xff00
   1d5e8:	movt	r9, #3
   1d5ec:	orr	r0, r0, #128	; 0x80
   1d5f0:	strb	r0, [r4, #52]	; 0x34
   1d5f4:	mov	r0, #0
   1d5f8:	cmp	lr, #0
   1d5fc:	bne	1d608 <__assert_fail@plt+0xbee0>
   1d600:	ands	r1, r5, #256	; 0x100
   1d604:	bne	1d63c <__assert_fail@plt+0xbf14>
   1d608:	cmp	lr, #0
   1d60c:	andsne	r1, r5, #512	; 0x200
   1d610:	bne	1d63c <__assert_fail@plt+0xbf14>
   1d614:	ldr	r1, [sp, #8]
   1d618:	cmp	r1, #0
   1d61c:	bne	1d628 <__assert_fail@plt+0xbf00>
   1d620:	ands	r1, r5, #4096	; 0x1000
   1d624:	bne	1d63c <__assert_fail@plt+0xbf14>
   1d628:	ldr	r1, [sp]
   1d62c:	cmp	r1, #0
   1d630:	bne	1d654 <__assert_fail@plt+0xbf2c>
   1d634:	ands	r1, r5, #16384	; 0x4000
   1d638:	beq	1d654 <__assert_fail@plt+0xbf2c>
   1d63c:	sub	r1, r8, r0
   1d640:	cmp	r1, #0
   1d644:	ldrge	r2, [r4, #8]
   1d648:	cmpge	r2, r1
   1d64c:	bgt	1d500 <__assert_fail@plt+0xbdd8>
   1d650:	add	r0, r0, #1
   1d654:	ldr	r3, [sp, #16]
   1d658:	ldr	r1, [sl, #4]
   1d65c:	add	r8, r8, #1
   1d660:	cmp	r8, r1
   1d664:	blt	1d534 <__assert_fail@plt+0xbe0c>
   1d668:	mov	r0, r6
   1d66c:	mov	r1, r4
   1d670:	mov	r2, r7
   1d674:	bl	1d6bc <__assert_fail@plt+0xbf94>
   1d678:	cmp	r0, #0
   1d67c:	beq	1d6a4 <__assert_fail@plt+0xbf7c>
   1d680:	mov	r0, r4
   1d684:	bl	187ec <__assert_fail@plt+0x70c4>
   1d688:	ldr	r1, [sp, #4]
   1d68c:	mov	r0, #12
   1d690:	mov	r4, #0
   1d694:	str	r0, [r1]
   1d698:	b	1d6a4 <__assert_fail@plt+0xbf7c>
   1d69c:	mov	r4, #0
   1d6a0:	str	r4, [r0]
   1d6a4:	mov	r0, r4
   1d6a8:	sub	sp, fp, #28
   1d6ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d6b0:	mov	r0, r4
   1d6b4:	bl	132d4 <__assert_fail@plt+0x1bac>
   1d6b8:	b	1d688 <__assert_fail@plt+0xbf60>
   1d6bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d6c0:	add	fp, sp, #24
   1d6c4:	str	r2, [r1]
   1d6c8:	mov	r4, r1
   1d6cc:	mov	r7, r0
   1d6d0:	mov	r0, #0
   1d6d4:	mov	r9, r2
   1d6d8:	ldr	r1, [r1, #8]
   1d6dc:	str	r1, [r4, #16]
   1d6e0:	str	r0, [r4, #20]
   1d6e4:	lsl	r0, r1, #2
   1d6e8:	bl	22aa0 <__assert_fail@plt+0x11378>
   1d6ec:	mov	r8, #12
   1d6f0:	cmp	r0, #0
   1d6f4:	str	r0, [r4, #24]
   1d6f8:	beq	1d78c <__assert_fail@plt+0xc064>
   1d6fc:	ldr	r0, [r4, #8]
   1d700:	cmp	r0, #1
   1d704:	blt	1d74c <__assert_fail@plt+0xc024>
   1d708:	add	r5, r4, #16
   1d70c:	mov	r6, #0
   1d710:	ldr	r1, [r4, #12]
   1d714:	ldr	r2, [r7]
   1d718:	ldr	r1, [r1, r6, lsl #2]
   1d71c:	add	r2, r2, r1, lsl #3
   1d720:	ldrb	r2, [r2, #4]
   1d724:	tst	r2, #8
   1d728:	bne	1d740 <__assert_fail@plt+0xc018>
   1d72c:	mov	r0, r5
   1d730:	bl	1d238 <__assert_fail@plt+0xbb10>
   1d734:	cmp	r0, #0
   1d738:	beq	1d78c <__assert_fail@plt+0xc064>
   1d73c:	ldr	r0, [r4, #8]
   1d740:	add	r6, r6, #1
   1d744:	cmp	r6, r0
   1d748:	blt	1d710 <__assert_fail@plt+0xbfe8>
   1d74c:	ldr	r1, [r7, #68]	; 0x44
   1d750:	ldr	r0, [r7, #32]
   1d754:	and	r1, r1, r9
   1d758:	mov	r5, r0
   1d75c:	add	r2, r1, r1, lsl #1
   1d760:	ldr	r1, [r5, r2, lsl #2]!
   1d764:	mov	r6, r5
   1d768:	ldr	r3, [r6, #4]!
   1d76c:	cmp	r3, r1
   1d770:	ble	1d794 <__assert_fail@plt+0xc06c>
   1d774:	add	r0, r0, r2, lsl #2
   1d778:	ldr	r0, [r0, #8]
   1d77c:	add	r2, r1, #1
   1d780:	mov	r8, #0
   1d784:	str	r2, [r5]
   1d788:	str	r4, [r0, r1, lsl #2]
   1d78c:	mov	r0, r8
   1d790:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d794:	add	r7, r0, r2, lsl #2
   1d798:	mov	r2, #2
   1d79c:	ldr	r0, [r7, #8]!
   1d7a0:	add	r9, r2, r1, lsl #1
   1d7a4:	lsl	r1, r9, #2
   1d7a8:	bl	22ad0 <__assert_fail@plt+0x113a8>
   1d7ac:	cmp	r0, #0
   1d7b0:	beq	1d78c <__assert_fail@plt+0xc064>
   1d7b4:	str	r0, [r7]
   1d7b8:	str	r9, [r6]
   1d7bc:	ldr	r1, [r5]
   1d7c0:	b	1d77c <__assert_fail@plt+0xc054>
   1d7c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d7c8:	add	fp, sp, #28
   1d7cc:	sub	sp, sp, #36	; 0x24
   1d7d0:	mov	r4, r0
   1d7d4:	ldr	r0, [r0, #24]
   1d7d8:	mov	r6, r2
   1d7dc:	mov	r9, r1
   1d7e0:	cmp	r0, r1
   1d7e4:	ble	1d948 <__assert_fail@plt+0xc220>
   1d7e8:	ldr	r0, [r4, #80]	; 0x50
   1d7ec:	mov	r1, #4
   1d7f0:	mov	r5, r9
   1d7f4:	cmp	r0, #2
   1d7f8:	movge	r0, #0
   1d7fc:	strge	r0, [r4, #16]
   1d800:	strge	r0, [r4, #20]
   1d804:	mov	r0, #0
   1d808:	tst	r6, #1
   1d80c:	str	r0, [r4, #24]
   1d810:	str	r0, [r4, #28]
   1d814:	str	r0, [r4, #32]
   1d818:	strb	r0, [r4, #76]	; 0x4c
   1d81c:	movweq	r1, #6
   1d820:	ldr	r2, [r4, #44]	; 0x2c
   1d824:	ldr	r3, [r4, #52]	; 0x34
   1d828:	str	r2, [r4, #48]	; 0x30
   1d82c:	str	r3, [r4, #56]	; 0x38
   1d830:	str	r1, [r4, #60]	; 0x3c
   1d834:	ldrb	r1, [r4, #75]	; 0x4b
   1d838:	cmp	r1, #0
   1d83c:	ldreq	r1, [r4]
   1d840:	streq	r1, [r4, #4]
   1d844:	cmp	r5, #0
   1d848:	beq	1d8d4 <__assert_fail@plt+0xc1ac>
   1d84c:	ldr	r1, [r4, #32]
   1d850:	cmp	r5, r1
   1d854:	bge	1d950 <__assert_fail@plt+0xc228>
   1d858:	ldrb	r0, [r4, #76]	; 0x4c
   1d85c:	cmp	r0, #0
   1d860:	bne	1da50 <__assert_fail@plt+0xc328>
   1d864:	sub	r1, r5, #1
   1d868:	mov	r0, r4
   1d86c:	mov	r2, r6
   1d870:	bl	1dff0 <__assert_fail@plt+0xc8c8>
   1d874:	str	r0, [r4, #60]	; 0x3c
   1d878:	ldr	r0, [r4, #80]	; 0x50
   1d87c:	cmp	r0, #2
   1d880:	blt	1d89c <__assert_fail@plt+0xc174>
   1d884:	ldr	r2, [r4, #28]
   1d888:	ldr	r0, [r4, #8]
   1d88c:	sub	r2, r2, r5
   1d890:	add	r1, r0, r5, lsl #2
   1d894:	lsl	r2, r2, #2
   1d898:	bl	11434 <memmove@plt>
   1d89c:	ldrb	r0, [r4, #75]	; 0x4b
   1d8a0:	cmp	r0, #0
   1d8a4:	bne	1db44 <__assert_fail@plt+0xc41c>
   1d8a8:	ldr	r0, [r4, #28]
   1d8ac:	ldr	r1, [r4, #32]
   1d8b0:	sub	r0, r0, r5
   1d8b4:	sub	r1, r1, r5
   1d8b8:	str	r0, [r4, #28]
   1d8bc:	str	r1, [r4, #32]
   1d8c0:	ldrb	r0, [r4, #75]	; 0x4b
   1d8c4:	cmp	r0, #0
   1d8c8:	ldreq	r0, [r4, #4]
   1d8cc:	addeq	r0, r0, r5
   1d8d0:	streq	r0, [r4, #4]
   1d8d4:	str	r9, [r4, #24]
   1d8d8:	ldr	r0, [r4, #48]	; 0x30
   1d8dc:	ldr	r1, [r4, #56]	; 0x38
   1d8e0:	ldr	r2, [r4, #80]	; 0x50
   1d8e4:	sub	r0, r0, r5
   1d8e8:	cmp	r2, #2
   1d8ec:	sub	r1, r1, r5
   1d8f0:	str	r0, [r4, #48]	; 0x30
   1d8f4:	str	r1, [r4, #56]	; 0x38
   1d8f8:	blt	1d91c <__assert_fail@plt+0xc1f4>
   1d8fc:	ldrb	r0, [r4, #72]	; 0x48
   1d900:	cmp	r0, #0
   1d904:	beq	1d930 <__assert_fail@plt+0xc208>
   1d908:	mov	r0, r4
   1d90c:	bl	189a8 <__assert_fail@plt+0x7280>
   1d910:	cmp	r0, #0
   1d914:	bne	1d940 <__assert_fail@plt+0xc218>
   1d918:	b	1d938 <__assert_fail@plt+0xc210>
   1d91c:	ldrb	r1, [r4, #75]	; 0x4b
   1d920:	cmp	r1, #0
   1d924:	bne	1db5c <__assert_fail@plt+0xc434>
   1d928:	str	r0, [r4, #28]
   1d92c:	b	1d938 <__assert_fail@plt+0xc210>
   1d930:	mov	r0, r4
   1d934:	bl	18f84 <__assert_fail@plt+0x785c>
   1d938:	mov	r0, #0
   1d93c:	str	r0, [r4, #40]	; 0x28
   1d940:	sub	sp, fp, #28
   1d944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d948:	sub	r5, r9, r0
   1d94c:	b	1d844 <__assert_fail@plt+0xc11c>
   1d950:	ldrb	r2, [r4, #76]	; 0x4c
   1d954:	ldr	lr, [r4, #28]
   1d958:	cmp	r2, #0
   1d95c:	bne	1dd9c <__assert_fail@plt+0xc674>
   1d960:	mov	r2, #0
   1d964:	str	r2, [r4, #28]
   1d968:	ldr	r3, [r4, #80]	; 0x50
   1d96c:	cmp	r3, #2
   1d970:	blt	1db74 <__assert_fail@plt+0xc44c>
   1d974:	ldrb	r2, [r4, #73]	; 0x49
   1d978:	cmp	r2, #0
   1d97c:	beq	1da38 <__assert_fail@plt+0xc310>
   1d980:	ldr	r7, [r4]
   1d984:	sub	r3, r5, r3
   1d988:	add	ip, r7, r0
   1d98c:	add	r3, ip, r3
   1d990:	add	r8, ip, r5
   1d994:	cmp	r3, r7
   1d998:	movcc	r3, r7
   1d99c:	mov	r7, r8
   1d9a0:	sub	r7, r7, #1
   1d9a4:	cmp	r7, r3
   1d9a8:	bcc	1da38 <__assert_fail@plt+0xc310>
   1d9ac:	ldrb	r2, [r7]
   1d9b0:	and	r2, r2, #192	; 0xc0
   1d9b4:	cmp	r2, #128	; 0x80
   1d9b8:	beq	1d9a0 <__assert_fail@plt+0xc278>
   1d9bc:	ldr	r0, [r4, #48]	; 0x30
   1d9c0:	mov	sl, lr
   1d9c4:	mov	r1, r7
   1d9c8:	add	r3, ip, r0
   1d9cc:	ldr	r0, [r4, #64]	; 0x40
   1d9d0:	sub	r2, r3, r7
   1d9d4:	cmp	r0, #0
   1d9d8:	bne	1de38 <__assert_fail@plt+0xc710>
   1d9dc:	mov	r0, #0
   1d9e0:	add	r3, sp, #24
   1d9e4:	str	r0, [sp, #28]
   1d9e8:	str	r0, [sp, #24]
   1d9ec:	add	r0, sp, #20
   1d9f0:	bl	22ee0 <__assert_fail@plt+0x117b8>
   1d9f4:	sub	r1, r8, r7
   1d9f8:	mvn	r2, #0
   1d9fc:	cmp	r0, r1
   1da00:	bcc	1da24 <__assert_fail@plt+0xc2fc>
   1da04:	cmn	r0, #3
   1da08:	bhi	1da24 <__assert_fail@plt+0xc2fc>
   1da0c:	mov	r2, #0
   1da10:	sub	r0, r0, r1
   1da14:	str	r2, [r4, #16]
   1da18:	str	r2, [r4, #20]
   1da1c:	str	r0, [r4, #28]
   1da20:	ldr	r2, [sp, #20]
   1da24:	cmn	r2, #1
   1da28:	bne	1dd44 <__assert_fail@plt+0xc61c>
   1da2c:	ldr	r0, [r4, #24]
   1da30:	ldr	r1, [r4, #32]
   1da34:	mov	lr, sl
   1da38:	add	r8, r1, r0
   1da3c:	cmp	r8, r9
   1da40:	bge	1dc1c <__assert_fail@plt+0xc4f4>
   1da44:	add	sl, r4, #16
   1da48:	str	lr, [sp]
   1da4c:	b	1dce4 <__assert_fail@plt+0xc5bc>
   1da50:	ldr	r8, [r4, #28]
   1da54:	ldr	sl, [r4, #12]
   1da58:	mov	r0, #0
   1da5c:	mov	r1, r8
   1da60:	add	r2, r0, r1
   1da64:	add	r2, r2, r2, lsr #31
   1da68:	asr	r7, r2, #1
   1da6c:	ldr	r2, [sl, r7, lsl #2]
   1da70:	mov	r3, r7
   1da74:	cmp	r2, r5
   1da78:	bgt	1da88 <__assert_fail@plt+0xc360>
   1da7c:	bge	1da94 <__assert_fail@plt+0xc36c>
   1da80:	add	r0, r7, #1
   1da84:	mov	r3, r1
   1da88:	cmp	r0, r3
   1da8c:	mov	r1, r3
   1da90:	blt	1da60 <__assert_fail@plt+0xc338>
   1da94:	cmp	r2, r5
   1da98:	mov	r0, r4
   1da9c:	mov	r2, r6
   1daa0:	addlt	r7, r7, #1
   1daa4:	sub	r1, r7, #1
   1daa8:	bl	1dff0 <__assert_fail@plt+0xc8c8>
   1daac:	cmp	r8, r5
   1dab0:	str	r0, [r4, #60]	; 0x3c
   1dab4:	ble	1dac8 <__assert_fail@plt+0xc3a0>
   1dab8:	cmp	r7, r5
   1dabc:	ldreq	r0, [sl, r5, lsl #2]
   1dac0:	cmpeq	r0, r5
   1dac4:	beq	1dc40 <__assert_fail@plt+0xc518>
   1dac8:	mov	r0, #0
   1dacc:	strb	r0, [r4, #76]	; 0x4c
   1dad0:	sub	r0, r5, r9
   1dad4:	ldr	r1, [r4, #44]	; 0x2c
   1dad8:	ldr	r2, [r4, #52]	; 0x34
   1dadc:	add	r1, r0, r1
   1dae0:	add	r0, r0, r2
   1dae4:	str	r1, [r4, #48]	; 0x30
   1dae8:	sub	r1, sl, #4
   1daec:	str	r0, [r4, #56]	; 0x38
   1daf0:	mov	r0, r7
   1daf4:	cmp	r7, #1
   1daf8:	blt	1db0c <__assert_fail@plt+0xc3e4>
   1dafc:	ldr	r2, [r1, r0, lsl #2]
   1db00:	sub	r7, r0, #1
   1db04:	cmp	r2, r5
   1db08:	beq	1daf0 <__assert_fail@plt+0xc3c8>
   1db0c:	cmp	r0, r8
   1db10:	bge	1db30 <__assert_fail@plt+0xc408>
   1db14:	ldr	r1, [r4, #8]
   1db18:	ldr	r2, [r1, r0, lsl #2]
   1db1c:	cmn	r2, #1
   1db20:	bne	1db30 <__assert_fail@plt+0xc408>
   1db24:	add	r0, r0, #1
   1db28:	cmp	r0, r8
   1db2c:	blt	1db18 <__assert_fail@plt+0xc3f0>
   1db30:	cmp	r0, r8
   1db34:	bne	1dbd0 <__assert_fail@plt+0xc4a8>
   1db38:	mov	r0, #0
   1db3c:	str	r0, [r4, #28]
   1db40:	b	1dd94 <__assert_fail@plt+0xc66c>
   1db44:	ldr	r2, [r4, #28]
   1db48:	ldr	r0, [r4, #4]
   1db4c:	add	r1, r0, r5
   1db50:	sub	r2, r2, r5
   1db54:	bl	11434 <memmove@plt>
   1db58:	b	1d8a8 <__assert_fail@plt+0xc180>
   1db5c:	ldrb	r0, [r4, #72]	; 0x48
   1db60:	cmp	r0, #0
   1db64:	beq	1dc28 <__assert_fail@plt+0xc500>
   1db68:	mov	r0, r4
   1db6c:	bl	18f18 <__assert_fail@plt+0x77f0>
   1db70:	b	1d938 <__assert_fail@plt+0xc210>
   1db74:	ldr	r3, [r4]
   1db78:	add	r0, r5, r0
   1db7c:	ldr	r1, [r4, #64]	; 0x40
   1db80:	add	r0, r3, r0
   1db84:	cmp	r1, #0
   1db88:	ldrb	r0, [r0, #-1]
   1db8c:	str	r2, [r4, #32]
   1db90:	ldrbne	r0, [r1, r0]
   1db94:	ldr	r1, [r4, #68]	; 0x44
   1db98:	ubfx	r2, r0, #5, #3
   1db9c:	and	r3, r0, #31
   1dba0:	ldr	r2, [r1, r2, lsl #2]
   1dba4:	mov	r1, #1
   1dba8:	tst	r2, r1, lsl r3
   1dbac:	bne	1dbc8 <__assert_fail@plt+0xc4a0>
   1dbb0:	mov	r1, #0
   1dbb4:	cmp	r0, #10
   1dbb8:	bne	1dbc8 <__assert_fail@plt+0xc4a0>
   1dbbc:	ldrb	r1, [r4, #77]	; 0x4d
   1dbc0:	cmp	r1, #0
   1dbc4:	movwne	r1, #2
   1dbc8:	str	r1, [r4, #60]	; 0x3c
   1dbcc:	b	1d8c0 <__assert_fail@plt+0xc198>
   1dbd0:	ldr	r0, [sl, r0, lsl #2]
   1dbd4:	subs	r2, r0, r5
   1dbd8:	str	r2, [r4, #28]
   1dbdc:	beq	1dcb4 <__assert_fail@plt+0xc58c>
   1dbe0:	cmp	r2, #1
   1dbe4:	blt	1dc08 <__assert_fail@plt+0xc4e0>
   1dbe8:	ldr	r0, [r4, #8]
   1dbec:	mov	r1, #0
   1dbf0:	mvn	r3, #0
   1dbf4:	str	r3, [r0, r1, lsl #2]
   1dbf8:	add	r1, r1, #1
   1dbfc:	ldr	r2, [r4, #28]
   1dc00:	cmp	r1, r2
   1dc04:	blt	1dbf4 <__assert_fail@plt+0xc4cc>
   1dc08:	ldr	r0, [r4, #4]
   1dc0c:	mov	r1, #255	; 0xff
   1dc10:	bl	11620 <memset@plt>
   1dc14:	ldr	r0, [r4, #28]
   1dc18:	b	1dd94 <__assert_fail@plt+0xc66c>
   1dc1c:	sub	r7, r8, r9
   1dc20:	str	r7, [r4, #28]
   1dc24:	b	1dd74 <__assert_fail@plt+0xc64c>
   1dc28:	ldr	r0, [r4, #64]	; 0x40
   1dc2c:	cmp	r0, #0
   1dc30:	beq	1d938 <__assert_fail@plt+0xc210>
   1dc34:	mov	r0, r4
   1dc38:	bl	19160 <__assert_fail@plt+0x7a38>
   1dc3c:	b	1d938 <__assert_fail@plt+0xc210>
   1dc40:	ldr	r0, [r4, #8]
   1dc44:	sub	r2, r8, r5
   1dc48:	lsl	r2, r2, #2
   1dc4c:	add	r1, r0, r5, lsl #2
   1dc50:	bl	11434 <memmove@plt>
   1dc54:	ldr	r2, [r4, #28]
   1dc58:	ldr	r0, [r4, #4]
   1dc5c:	add	r1, r0, r5
   1dc60:	sub	r2, r2, r5
   1dc64:	bl	11434 <memmove@plt>
   1dc68:	ldr	r0, [r4, #28]
   1dc6c:	ldr	r1, [r4, #32]
   1dc70:	sub	r0, r0, r5
   1dc74:	sub	r1, r1, r5
   1dc78:	cmp	r0, #1
   1dc7c:	str	r0, [r4, #28]
   1dc80:	str	r1, [r4, #32]
   1dc84:	blt	1d8c0 <__assert_fail@plt+0xc198>
   1dc88:	ldr	r0, [r4, #12]
   1dc8c:	mov	r2, #0
   1dc90:	add	r1, r0, r5, lsl #2
   1dc94:	ldr	r3, [r1, r2, lsl #2]
   1dc98:	sub	r3, r3, r5
   1dc9c:	str	r3, [r0, r2, lsl #2]
   1dca0:	add	r2, r2, #1
   1dca4:	ldr	r3, [r4, #28]
   1dca8:	cmp	r2, r3
   1dcac:	blt	1dc94 <__assert_fail@plt+0xc56c>
   1dcb0:	b	1d8c0 <__assert_fail@plt+0xc198>
   1dcb4:	mov	r0, #0
   1dcb8:	b	1dd94 <__assert_fail@plt+0xc66c>
   1dcbc:	cmp	r7, #0
   1dcc0:	ldr	r3, [sp, #4]
   1dcc4:	ldr	r1, [sp, #8]
   1dcc8:	mov	r2, #0
   1dccc:	cmpne	r0, #0
   1dcd0:	ldrne	r0, [r4]
   1dcd4:	ldrbne	r2, [r0, r8]
   1dcd8:	stm	sl, {r1, r3}
   1dcdc:	mov	r0, #1
   1dce0:	b	1dd24 <__assert_fail@plt+0xc5fc>
   1dce4:	ldr	r0, [r4]
   1dce8:	ldr	r2, [r4, #44]	; 0x2c
   1dcec:	mov	r3, sl
   1dcf0:	add	r1, r0, r8
   1dcf4:	ldr	r0, [sl]
   1dcf8:	sub	r7, r2, r8
   1dcfc:	mov	r2, r7
   1dd00:	str	r0, [sp, #8]
   1dd04:	ldr	r0, [sl, #4]
   1dd08:	str	r0, [sp, #4]
   1dd0c:	add	r0, sp, #24
   1dd10:	bl	22ee0 <__assert_fail@plt+0x117b8>
   1dd14:	sub	r1, r0, #1
   1dd18:	cmn	r1, #3
   1dd1c:	bcs	1dcbc <__assert_fail@plt+0xc594>
   1dd20:	ldr	r2, [sp, #24]
   1dd24:	add	r8, r0, r8
   1dd28:	cmp	r8, r9
   1dd2c:	blt	1dce4 <__assert_fail@plt+0xc5bc>
   1dd30:	ldr	lr, [sp]
   1dd34:	sub	r7, r8, r9
   1dd38:	cmn	r2, #1
   1dd3c:	str	r7, [r4, #28]
   1dd40:	beq	1dd74 <__assert_fail@plt+0xc64c>
   1dd44:	ldrb	r0, [r4, #78]	; 0x4e
   1dd48:	cmp	r0, #0
   1dd4c:	bne	1de08 <__assert_fail@plt+0xc6e0>
   1dd50:	mov	r1, #0
   1dd54:	cmp	r2, #10
   1dd58:	bne	1dd68 <__assert_fail@plt+0xc640>
   1dd5c:	ldrb	r1, [r4, #77]	; 0x4d
   1dd60:	cmp	r1, #0
   1dd64:	movwne	r1, #2
   1dd68:	str	r1, [r4, #60]	; 0x3c
   1dd6c:	ldr	r7, [r4, #28]
   1dd70:	b	1dd88 <__assert_fail@plt+0xc660>
   1dd74:	sub	r1, lr, #1
   1dd78:	mov	r0, r4
   1dd7c:	mov	r2, r6
   1dd80:	bl	1dff0 <__assert_fail@plt+0xc8c8>
   1dd84:	str	r0, [r4, #60]	; 0x3c
   1dd88:	mov	r0, #0
   1dd8c:	cmp	r7, #0
   1dd90:	bne	1ddc4 <__assert_fail@plt+0xc69c>
   1dd94:	str	r0, [r4, #32]
   1dd98:	b	1d8c0 <__assert_fail@plt+0xc198>
   1dd9c:	mov	r2, #0
   1dda0:	strb	r2, [r4, #76]	; 0x4c
   1dda4:	sub	r2, r5, r9
   1dda8:	ldr	r3, [r4, #44]	; 0x2c
   1ddac:	ldr	r7, [r4, #52]	; 0x34
   1ddb0:	add	r3, r2, r3
   1ddb4:	add	r2, r2, r7
   1ddb8:	str	r3, [r4, #48]	; 0x30
   1ddbc:	str	r2, [r4, #56]	; 0x38
   1ddc0:	b	1d960 <__assert_fail@plt+0xc238>
   1ddc4:	cmp	r7, #1
   1ddc8:	blt	1ddec <__assert_fail@plt+0xc6c4>
   1ddcc:	ldr	r0, [r4, #8]
   1ddd0:	mov	r1, #0
   1ddd4:	mvn	r2, #0
   1ddd8:	str	r2, [r0, r1, lsl #2]
   1dddc:	add	r1, r1, #1
   1dde0:	ldr	r7, [r4, #28]
   1dde4:	cmp	r1, r7
   1dde8:	blt	1ddd8 <__assert_fail@plt+0xc6b0>
   1ddec:	ldrb	r0, [r4, #75]	; 0x4b
   1ddf0:	cmp	r0, #0
   1ddf4:	beq	1de30 <__assert_fail@plt+0xc708>
   1ddf8:	ldr	r0, [r4, #4]
   1ddfc:	mov	r1, #255	; 0xff
   1de00:	mov	r2, r7
   1de04:	b	1dc10 <__assert_fail@plt+0xc4e8>
   1de08:	mov	r0, r2
   1de0c:	mov	r6, r2
   1de10:	bl	11608 <iswalnum@plt>
   1de14:	mov	r1, #1
   1de18:	cmp	r6, #95	; 0x5f
   1de1c:	beq	1dd68 <__assert_fail@plt+0xc640>
   1de20:	mov	r2, r6
   1de24:	cmp	r0, #0
   1de28:	beq	1dd50 <__assert_fail@plt+0xc628>
   1de2c:	b	1dd68 <__assert_fail@plt+0xc640>
   1de30:	mov	r0, r7
   1de34:	b	1dd94 <__assert_fail@plt+0xc66c>
   1de38:	cmp	r2, #1
   1de3c:	blt	1de80 <__assert_fail@plt+0xc758>
   1de40:	sub	r1, r7, #1
   1de44:	sub	r1, r1, r3
   1de48:	mvn	r3, #1
   1de4c:	cmn	r1, #7
   1de50:	mvnle	r1, #6
   1de54:	sub	ip, r3, r1
   1de58:	add	r1, sp, #14
   1de5c:	ldrb	r3, [r7, ip]
   1de60:	sub	lr, ip, #1
   1de64:	ldrb	r3, [r0, r3]
   1de68:	strb	r3, [r1, ip]
   1de6c:	add	r3, ip, #1
   1de70:	mov	ip, lr
   1de74:	cmp	r3, #1
   1de78:	bgt	1de5c <__assert_fail@plt+0xc734>
   1de7c:	b	1d9dc <__assert_fail@plt+0xc2b4>
   1de80:	add	r1, sp, #14
   1de84:	b	1d9dc <__assert_fail@plt+0xc2b4>
   1de88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1de8c:	add	fp, sp, #24
   1de90:	mov	r3, r2
   1de94:	ldr	r2, [r0, #88]	; 0x58
   1de98:	mov	r5, r1
   1de9c:	mov	r4, r0
   1dea0:	mov	r1, r3
   1dea4:	bl	1dff0 <__assert_fail@plt+0xc8c8>
   1dea8:	ldr	r1, [r5, #8]
   1deac:	cmp	r1, #1
   1deb0:	blt	1df40 <__assert_fail@plt+0xc818>
   1deb4:	and	ip, r0, #8
   1deb8:	and	lr, r0, #2
   1debc:	and	r2, r0, #1
   1dec0:	ldr	r0, [r4, #84]	; 0x54
   1dec4:	ldr	r5, [r5, #12]
   1dec8:	movw	r8, #65280	; 0xff00
   1decc:	mov	r3, #0
   1ded0:	movt	r8, #3
   1ded4:	ldr	r4, [r0]
   1ded8:	ldr	r0, [r5, r3, lsl #2]
   1dedc:	add	r7, r4, r0, lsl #3
   1dee0:	ldr	r7, [r7, #4]
   1dee4:	uxtb	r6, r7
   1dee8:	cmp	r6, #2
   1deec:	bne	1df34 <__assert_fail@plt+0xc80c>
   1def0:	tst	r7, r8
   1def4:	beq	1df44 <__assert_fail@plt+0xc81c>
   1def8:	cmp	r2, #0
   1defc:	bne	1df08 <__assert_fail@plt+0xc7e0>
   1df00:	ands	r6, r7, #1024	; 0x400
   1df04:	bne	1df34 <__assert_fail@plt+0xc80c>
   1df08:	cmp	r2, #0
   1df0c:	andsne	r6, r7, #2048	; 0x800
   1df10:	bne	1df34 <__assert_fail@plt+0xc80c>
   1df14:	cmp	lr, #0
   1df18:	bne	1df24 <__assert_fail@plt+0xc7fc>
   1df1c:	ands	r6, r7, #8192	; 0x2000
   1df20:	bne	1df34 <__assert_fail@plt+0xc80c>
   1df24:	cmp	ip, #0
   1df28:	bne	1df44 <__assert_fail@plt+0xc81c>
   1df2c:	ands	r6, r7, #32768	; 0x8000
   1df30:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1df34:	add	r3, r3, #1
   1df38:	cmp	r3, r1
   1df3c:	blt	1ded8 <__assert_fail@plt+0xc7b0>
   1df40:	mov	r0, #0
   1df44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1df48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1df4c:	add	fp, sp, #24
   1df50:	mov	r8, r0
   1df54:	ldr	r0, [r0, #124]	; 0x7c
   1df58:	cmp	r0, #1
   1df5c:	blt	1dfe0 <__assert_fail@plt+0xc8b8>
   1df60:	mov	r7, #0
   1df64:	ldr	r0, [r8, #132]	; 0x84
   1df68:	ldr	r5, [r0, r7, lsl #2]
   1df6c:	ldr	r0, [r5, #16]
   1df70:	cmp	r0, #1
   1df74:	blt	1dfa4 <__assert_fail@plt+0xc87c>
   1df78:	mov	r4, #0
   1df7c:	ldr	r0, [r5, #20]
   1df80:	ldr	r6, [r0, r4, lsl #2]
   1df84:	ldr	r0, [r6, #16]
   1df88:	bl	132d4 <__assert_fail@plt+0x1bac>
   1df8c:	mov	r0, r6
   1df90:	bl	132d4 <__assert_fail@plt+0x1bac>
   1df94:	ldr	r0, [r5, #16]
   1df98:	add	r4, r4, #1
   1df9c:	cmp	r4, r0
   1dfa0:	blt	1df7c <__assert_fail@plt+0xc854>
   1dfa4:	ldr	r0, [r5, #20]
   1dfa8:	bl	132d4 <__assert_fail@plt+0x1bac>
   1dfac:	ldr	r0, [r5, #8]
   1dfb0:	cmp	r0, #0
   1dfb4:	beq	1dfc8 <__assert_fail@plt+0xc8a0>
   1dfb8:	ldr	r0, [r0, #8]
   1dfbc:	bl	132d4 <__assert_fail@plt+0x1bac>
   1dfc0:	ldr	r0, [r5, #8]
   1dfc4:	bl	132d4 <__assert_fail@plt+0x1bac>
   1dfc8:	mov	r0, r5
   1dfcc:	bl	132d4 <__assert_fail@plt+0x1bac>
   1dfd0:	ldr	r0, [r8, #124]	; 0x7c
   1dfd4:	add	r7, r7, #1
   1dfd8:	cmp	r7, r0
   1dfdc:	blt	1df64 <__assert_fail@plt+0xc83c>
   1dfe0:	mov	r0, #0
   1dfe4:	str	r0, [r8, #108]	; 0x6c
   1dfe8:	str	r0, [r8, #124]	; 0x7c
   1dfec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1dff0:	push	{r4, r5, fp, lr}
   1dff4:	add	fp, sp, #8
   1dff8:	mov	r4, r0
   1dffc:	cmn	r1, #1
   1e000:	ble	1e03c <__assert_fail@plt+0xc914>
   1e004:	ldr	r0, [r4, #48]	; 0x30
   1e008:	cmp	r0, r1
   1e00c:	beq	1e0a0 <__assert_fail@plt+0xc978>
   1e010:	ldr	r0, [r4, #80]	; 0x50
   1e014:	cmp	r0, #2
   1e018:	blt	1e044 <__assert_fail@plt+0xc91c>
   1e01c:	ldr	r0, [r4, #8]
   1e020:	ldr	r5, [r0, r1, lsl #2]
   1e024:	cmn	r5, #1
   1e028:	bne	1e078 <__assert_fail@plt+0xc950>
   1e02c:	sub	r2, r1, #1
   1e030:	cmp	r1, #0
   1e034:	mov	r1, r2
   1e038:	bgt	1e020 <__assert_fail@plt+0xc8f8>
   1e03c:	ldr	r0, [r4, #60]	; 0x3c
   1e040:	pop	{r4, r5, fp, pc}
   1e044:	ldr	r0, [r4, #4]
   1e048:	ldr	r2, [r4, #68]	; 0x44
   1e04c:	ldrb	r1, [r0, r1]
   1e050:	ubfx	r0, r1, #5, #3
   1e054:	and	r3, r1, #31
   1e058:	ldr	r2, [r2, r0, lsl #2]
   1e05c:	mov	r0, #1
   1e060:	tst	r2, r0, lsl r3
   1e064:	bne	1e09c <__assert_fail@plt+0xc974>
   1e068:	mov	r0, #0
   1e06c:	cmp	r1, #10
   1e070:	popne	{r4, r5, fp, pc}
   1e074:	b	1e090 <__assert_fail@plt+0xc968>
   1e078:	ldrb	r0, [r4, #78]	; 0x4e
   1e07c:	cmp	r0, #0
   1e080:	bne	1e0ac <__assert_fail@plt+0xc984>
   1e084:	mov	r0, #0
   1e088:	cmp	r5, #10
   1e08c:	bne	1e09c <__assert_fail@plt+0xc974>
   1e090:	ldrb	r0, [r4, #77]	; 0x4d
   1e094:	cmp	r0, #0
   1e098:	movwne	r0, #2
   1e09c:	pop	{r4, r5, fp, pc}
   1e0a0:	and	r0, r2, #2
   1e0a4:	eor	r0, r0, #10
   1e0a8:	pop	{r4, r5, fp, pc}
   1e0ac:	mov	r0, r5
   1e0b0:	bl	11608 <iswalnum@plt>
   1e0b4:	mov	r1, r0
   1e0b8:	mov	r0, #1
   1e0bc:	cmp	r5, #95	; 0x5f
   1e0c0:	beq	1e09c <__assert_fail@plt+0xc974>
   1e0c4:	cmp	r1, #0
   1e0c8:	beq	1e084 <__assert_fail@plt+0xc95c>
   1e0cc:	b	1e09c <__assert_fail@plt+0xc974>
   1e0d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e0d4:	add	fp, sp, #28
   1e0d8:	sub	sp, sp, #4
   1e0dc:	mov	sl, r0
   1e0e0:	ldr	r0, [r1, #4]
   1e0e4:	cmp	r0, #1
   1e0e8:	blt	1e1b4 <__assert_fail@plt+0xca8c>
   1e0ec:	ldr	r7, [sl, #84]	; 0x54
   1e0f0:	mov	r8, r2
   1e0f4:	mov	r5, r1
   1e0f8:	mov	r4, #0
   1e0fc:	b	1e124 <__assert_fail@plt+0xc9fc>
   1e100:	ldr	r0, [sl, #132]	; 0x84
   1e104:	lsl	r1, r9, #3
   1e108:	bl	22ad0 <__assert_fail@plt+0x113a8>
   1e10c:	cmp	r0, #0
   1e110:	beq	1e1c0 <__assert_fail@plt+0xca98>
   1e114:	lsl	r1, r9, #1
   1e118:	str	r1, [sl, #128]	; 0x80
   1e11c:	str	r0, [sl, #132]	; 0x84
   1e120:	b	1e16c <__assert_fail@plt+0xca44>
   1e124:	ldr	r1, [r5, #8]
   1e128:	ldr	r6, [r1, r4, lsl #2]
   1e12c:	ldr	r1, [r7]
   1e130:	add	r2, r1, r6, lsl #3
   1e134:	ldrb	r2, [r2, #4]
   1e138:	cmp	r2, #8
   1e13c:	bne	1e1a8 <__assert_fail@plt+0xca80>
   1e140:	ldr	r1, [r1, r6, lsl #3]
   1e144:	cmp	r1, #31
   1e148:	bgt	1e1a8 <__assert_fail@plt+0xca80>
   1e14c:	ldr	r2, [r7, #80]	; 0x50
   1e150:	mov	r3, #1
   1e154:	tst	r2, r3, lsl r1
   1e158:	beq	1e1a8 <__assert_fail@plt+0xca80>
   1e15c:	ldr	r9, [sl, #124]	; 0x7c
   1e160:	ldr	r0, [sl, #128]	; 0x80
   1e164:	cmp	r9, r0
   1e168:	beq	1e100 <__assert_fail@plt+0xc9d8>
   1e16c:	mov	r0, #1
   1e170:	mov	r1, #24
   1e174:	bl	22a4c <__assert_fail@plt+0x11324>
   1e178:	ldr	r1, [sl, #124]	; 0x7c
   1e17c:	ldr	r2, [sl, #132]	; 0x84
   1e180:	str	r0, [r2, r1, lsl #2]
   1e184:	ldr	r0, [sl, #132]	; 0x84
   1e188:	ldr	r0, [r0, r1, lsl #2]
   1e18c:	cmp	r0, #0
   1e190:	beq	1e1c0 <__assert_fail@plt+0xca98>
   1e194:	add	r1, r1, #1
   1e198:	str	r6, [r0, #4]
   1e19c:	str	r1, [sl, #124]	; 0x7c
   1e1a0:	str	r8, [r0]
   1e1a4:	ldr	r0, [r5, #4]
   1e1a8:	add	r4, r4, #1
   1e1ac:	cmp	r4, r0
   1e1b0:	blt	1e124 <__assert_fail@plt+0xc9fc>
   1e1b4:	mov	r0, #0
   1e1b8:	sub	sp, fp, #28
   1e1bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e1c0:	mov	r0, #12
   1e1c4:	b	1e1b8 <__assert_fail@plt+0xca90>
   1e1c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e1cc:	add	fp, sp, #28
   1e1d0:	sub	sp, sp, #76	; 0x4c
   1e1d4:	mov	lr, r0
   1e1d8:	ldr	r0, [r1, #4]
   1e1dc:	cmp	r0, #1
   1e1e0:	blt	1e8c0 <__assert_fail@plt+0xd198>
   1e1e4:	ldr	r2, [lr, #84]	; 0x54
   1e1e8:	ldr	r0, [lr, #40]	; 0x28
   1e1ec:	mov	r3, #0
   1e1f0:	str	lr, [sp, #48]	; 0x30
   1e1f4:	str	r1, [sp, #16]
   1e1f8:	str	r0, [fp, #-48]	; 0xffffffd0
   1e1fc:	str	r2, [sp, #32]
   1e200:	ldr	r0, [r1, #8]
   1e204:	str	r3, [sp, #36]	; 0x24
   1e208:	ldr	r3, [r0, r3, lsl #2]
   1e20c:	ldr	r0, [r2]
   1e210:	add	r0, r0, r3, lsl #3
   1e214:	mov	r1, r3
   1e218:	str	r3, [sp, #52]	; 0x34
   1e21c:	ldr	r4, [r0, #4]
   1e220:	uxtb	r0, r4
   1e224:	cmp	r0, #4
   1e228:	bne	1e8a4 <__assert_fail@plt+0xd17c>
   1e22c:	movw	r0, #65280	; 0xff00
   1e230:	movt	r0, #3
   1e234:	tst	r4, r0
   1e238:	beq	1e294 <__assert_fail@plt+0xcb6c>
   1e23c:	ldr	r2, [lr, #88]	; 0x58
   1e240:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1e244:	mov	r0, lr
   1e248:	mov	r5, lr
   1e24c:	bl	1dff0 <__assert_fail@plt+0xc8c8>
   1e250:	mov	lr, r5
   1e254:	and	r1, r0, #1
   1e258:	tst	r4, #1024	; 0x400
   1e25c:	beq	1e268 <__assert_fail@plt+0xcb40>
   1e260:	cmp	r1, #0
   1e264:	beq	1e8a4 <__assert_fail@plt+0xd17c>
   1e268:	tst	r4, #2048	; 0x800
   1e26c:	cmpne	r1, #0
   1e270:	bne	1e8a4 <__assert_fail@plt+0xd17c>
   1e274:	tst	r4, #8192	; 0x2000
   1e278:	beq	1e284 <__assert_fail@plt+0xcb5c>
   1e27c:	ands	r1, r0, #2
   1e280:	beq	1e8a4 <__assert_fail@plt+0xd17c>
   1e284:	tst	r4, #32768	; 0x8000
   1e288:	beq	1e294 <__assert_fail@plt+0xcb6c>
   1e28c:	ands	r0, r0, #8
   1e290:	beq	1e8a4 <__assert_fail@plt+0xd17c>
   1e294:	ldr	r0, [lr, #108]	; 0x6c
   1e298:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1e29c:	ldr	r4, [lr, #4]
   1e2a0:	ldr	r7, [lr, #84]	; 0x54
   1e2a4:	mov	r5, lr
   1e2a8:	str	r0, [sp, #12]
   1e2ac:	mov	r0, lr
   1e2b0:	bl	1ed30 <__assert_fail@plt+0xd608>
   1e2b4:	mov	lr, r5
   1e2b8:	cmn	r0, #1
   1e2bc:	beq	1e2ec <__assert_fail@plt+0xcbc4>
   1e2c0:	ldr	r1, [lr, #116]	; 0x74
   1e2c4:	add	r0, r0, r0, lsl #1
   1e2c8:	add	r0, r1, r0, lsl #3
   1e2cc:	ldr	r1, [r0]
   1e2d0:	ldr	r2, [sp, #52]	; 0x34
   1e2d4:	cmp	r1, r2
   1e2d8:	beq	1e694 <__assert_fail@plt+0xcf6c>
   1e2dc:	ldrb	r1, [r0, #20]
   1e2e0:	add	r0, r0, #24
   1e2e4:	cmp	r1, #0
   1e2e8:	bne	1e2cc <__assert_fail@plt+0xcba4>
   1e2ec:	ldr	r0, [lr, #124]	; 0x7c
   1e2f0:	cmp	r0, #1
   1e2f4:	blt	1e694 <__assert_fail@plt+0xcf6c>
   1e2f8:	ldr	r0, [r7]
   1e2fc:	ldr	r1, [sp, #52]	; 0x34
   1e300:	mov	r2, #0
   1e304:	mov	ip, r4
   1e308:	str	r7, [sp, #24]
   1e30c:	ldr	r8, [r0, r1, lsl #3]
   1e310:	str	r8, [sp, #28]
   1e314:	ldr	r1, [lr, #132]	; 0x84
   1e318:	str	r2, [sp, #40]	; 0x28
   1e31c:	ldr	r6, [r1, r2, lsl #2]
   1e320:	ldr	r1, [r6, #4]
   1e324:	ldr	r0, [r0, r1, lsl #3]
   1e328:	cmp	r0, r8
   1e32c:	bne	1e450 <__assert_fail@plt+0xcd28>
   1e330:	ldr	r0, [r6, #16]
   1e334:	ldr	r9, [r6]
   1e338:	mov	r8, #0
   1e33c:	str	r6, [sp, #44]	; 0x2c
   1e340:	cmp	r0, #1
   1e344:	blt	1e354 <__assert_fail@plt+0xcc2c>
   1e348:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1e34c:	mov	r7, r9
   1e350:	b	1e388 <__assert_fail@plt+0xcc60>
   1e354:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1e358:	b	1e42c <__assert_fail@plt+0xcd04>
   1e35c:	ldr	r2, [lr, #48]	; 0x30
   1e360:	cmp	r1, r2
   1e364:	bgt	1e428 <__assert_fail@plt+0xcd00>
   1e368:	mov	r0, lr
   1e36c:	mov	r6, lr
   1e370:	bl	1edb8 <__assert_fail@plt+0xd690>
   1e374:	cmp	r0, #0
   1e378:	bne	1e8d0 <__assert_fail@plt+0xd1a8>
   1e37c:	ldr	ip, [r6, #4]
   1e380:	mov	r1, r6
   1e384:	b	1e3b0 <__assert_fail@plt+0xcc88>
   1e388:	ldr	r1, [r6, #20]
   1e38c:	ldr	sl, [r1, r8, lsl #2]
   1e390:	ldr	r9, [sl, #4]
   1e394:	sub	r4, r9, r7
   1e398:	cmp	r4, #1
   1e39c:	blt	1e3d8 <__assert_fail@plt+0xccb0>
   1e3a0:	ldr	r2, [lr, #28]
   1e3a4:	add	r1, r4, r5
   1e3a8:	cmp	r1, r2
   1e3ac:	bgt	1e35c <__assert_fail@plt+0xcc34>
   1e3b0:	add	r0, ip, r5
   1e3b4:	add	r1, ip, r7
   1e3b8:	mov	r2, r4
   1e3bc:	mov	r6, ip
   1e3c0:	bl	114ac <memcmp@plt>
   1e3c4:	mov	ip, r6
   1e3c8:	ldr	r6, [sp, #44]	; 0x2c
   1e3cc:	ldr	lr, [sp, #48]	; 0x30
   1e3d0:	cmp	r0, #0
   1e3d4:	bne	1e424 <__assert_fail@plt+0xccfc>
   1e3d8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e3dc:	ldr	r3, [sp, #52]	; 0x34
   1e3e0:	mov	r1, r6
   1e3e4:	mov	r2, sl
   1e3e8:	mov	r7, lr
   1e3ec:	str	r0, [sp]
   1e3f0:	mov	r0, lr
   1e3f4:	bl	1ee48 <__assert_fail@plt+0xd720>
   1e3f8:	cmp	r0, #1
   1e3fc:	bhi	1e8d0 <__assert_fail@plt+0xd1a8>
   1e400:	ldr	r0, [r6, #16]
   1e404:	ldr	ip, [r7, #4]
   1e408:	add	r8, r8, #1
   1e40c:	mov	lr, r7
   1e410:	add	r5, r4, r5
   1e414:	mov	r7, r9
   1e418:	cmp	r8, r0
   1e41c:	blt	1e388 <__assert_fail@plt+0xcc60>
   1e420:	b	1e42c <__assert_fail@plt+0xcd04>
   1e424:	ldr	r0, [r6, #16]
   1e428:	mov	r9, r7
   1e42c:	cmp	r8, r0
   1e430:	blt	1e448 <__assert_fail@plt+0xcd20>
   1e434:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e438:	cmp	r8, #0
   1e43c:	addne	r9, r9, #1
   1e440:	cmp	r9, r0
   1e444:	ble	1e46c <__assert_fail@plt+0xcd44>
   1e448:	ldr	r7, [sp, #24]
   1e44c:	ldr	r8, [sp, #28]
   1e450:	ldr	r2, [sp, #40]	; 0x28
   1e454:	ldr	r0, [lr, #124]	; 0x7c
   1e458:	add	r2, r2, #1
   1e45c:	cmp	r2, r0
   1e460:	bge	1e6a0 <__assert_fail@plt+0xcf78>
   1e464:	ldr	r0, [r7]
   1e468:	b	1e314 <__assert_fail@plt+0xcbec>
   1e46c:	ldr	r7, [sp, #24]
   1e470:	ldr	r8, [sp, #28]
   1e474:	b	1e5e4 <__assert_fail@plt+0xcebc>
   1e478:	cmn	r4, #1
   1e47c:	beq	1e678 <__assert_fail@plt+0xcf50>
   1e480:	ldr	r1, [r6, #8]
   1e484:	mov	r7, ip
   1e488:	str	r5, [sp, #20]
   1e48c:	cmp	r1, #0
   1e490:	bne	1e4c0 <__assert_fail@plt+0xcd98>
   1e494:	ldr	r0, [r6]
   1e498:	add	r1, sl, #1
   1e49c:	mov	r5, #12
   1e4a0:	sub	r1, r1, r0
   1e4a4:	mov	r0, #12
   1e4a8:	bl	22a4c <__assert_fail@plt+0x11324>
   1e4ac:	ldr	r6, [sp, #44]	; 0x2c
   1e4b0:	mov	r1, r0
   1e4b4:	cmp	r0, #0
   1e4b8:	str	r0, [r6, #8]
   1e4bc:	beq	1e8d4 <__assert_fail@plt+0xd1ac>
   1e4c0:	ldr	r3, [r6]
   1e4c4:	ldr	r2, [r6, #4]
   1e4c8:	stm	sp, {r4, sl}
   1e4cc:	mov	r0, #9
   1e4d0:	str	r0, [sp, #8]
   1e4d4:	ldr	r0, [sp, #48]	; 0x30
   1e4d8:	bl	1ef98 <__assert_fail@plt+0xd870>
   1e4dc:	ldr	r6, [sp, #44]	; 0x2c
   1e4e0:	ldr	r5, [sp, #20]
   1e4e4:	mov	ip, r7
   1e4e8:	cmp	r0, #1
   1e4ec:	mov	r7, r9
   1e4f0:	beq	1e67c <__assert_fail@plt+0xcf54>
   1e4f4:	cmp	r0, #0
   1e4f8:	bne	1e8d0 <__assert_fail@plt+0xd1a8>
   1e4fc:	ldr	r1, [r6, #12]
   1e500:	ldr	r0, [r6, #16]
   1e504:	ldr	r7, [sp, #48]	; 0x30
   1e508:	cmp	r0, r1
   1e50c:	beq	1e5b8 <__assert_fail@plt+0xce90>
   1e510:	mov	r0, #1
   1e514:	mov	r1, #20
   1e518:	bl	22a4c <__assert_fail@plt+0x11324>
   1e51c:	cmp	r0, #0
   1e520:	beq	1e8e0 <__assert_fail@plt+0xd1b8>
   1e524:	ldr	r1, [sp, #44]	; 0x2c
   1e528:	mov	r2, r0
   1e52c:	ldr	r0, [r1, #16]
   1e530:	ldr	r3, [r1, #20]
   1e534:	str	r2, [r3, r0, lsl #2]
   1e538:	stm	r2, {r4, sl}
   1e53c:	add	r0, r0, #1
   1e540:	str	r0, [r1, #16]
   1e544:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e548:	ldr	r3, [sp, #52]	; 0x34
   1e54c:	str	r0, [sp]
   1e550:	mov	r0, r7
   1e554:	bl	1ee48 <__assert_fail@plt+0xd720>
   1e558:	cmp	r0, #1
   1e55c:	bhi	1e8d0 <__assert_fail@plt+0xd1a8>
   1e560:	ldr	ip, [r7, #4]
   1e564:	ldr	r6, [sp, #44]	; 0x2c
   1e568:	ldr	r5, [sp, #20]
   1e56c:	b	1e678 <__assert_fail@plt+0xcf50>
   1e570:	ldr	r0, [lr, #48]	; 0x30
   1e574:	cmp	r5, r0
   1e578:	bge	1e450 <__assert_fail@plt+0xcd28>
   1e57c:	add	r4, r5, #1
   1e580:	mov	r0, lr
   1e584:	mov	r9, r7
   1e588:	mov	r7, r5
   1e58c:	mov	r5, lr
   1e590:	mov	r1, r4
   1e594:	bl	1e900 <__assert_fail@plt+0xd1d8>
   1e598:	cmp	r0, #0
   1e59c:	bne	1e8d0 <__assert_fail@plt+0xd1a8>
   1e5a0:	ldr	ip, [r5, #4]
   1e5a4:	ldr	r6, [sp, #44]	; 0x2c
   1e5a8:	mov	lr, r5
   1e5ac:	mov	r5, r7
   1e5b0:	mov	r7, r9
   1e5b4:	b	1e604 <__assert_fail@plt+0xcedc>
   1e5b8:	mov	r1, #1
   1e5bc:	orr	r5, r1, r0, lsl #1
   1e5c0:	ldr	r0, [r6, #20]
   1e5c4:	lsl	r1, r5, #2
   1e5c8:	bl	22ad0 <__assert_fail@plt+0x113a8>
   1e5cc:	cmp	r0, #0
   1e5d0:	beq	1e8e0 <__assert_fail@plt+0xd1b8>
   1e5d4:	ldr	r8, [sp, #28]
   1e5d8:	str	r5, [r6, #12]
   1e5dc:	str	r0, [r6, #20]
   1e5e0:	b	1e510 <__assert_fail@plt+0xcde8>
   1e5e4:	ldr	r0, [r6]
   1e5e8:	mov	sl, r9
   1e5ec:	cmp	r9, r0
   1e5f0:	ble	1e61c <__assert_fail@plt+0xcef4>
   1e5f4:	ldr	r0, [lr, #28]
   1e5f8:	cmp	r5, r0
   1e5fc:	bge	1e570 <__assert_fail@plt+0xce48>
   1e600:	add	r4, r5, #1
   1e604:	add	r1, ip, sl
   1e608:	ldrb	r0, [ip, r5]
   1e60c:	ldrb	r1, [r1, #-1]
   1e610:	cmp	r0, r1
   1e614:	beq	1e620 <__assert_fail@plt+0xcef8>
   1e618:	b	1e450 <__assert_fail@plt+0xcd28>
   1e61c:	mov	r4, r5
   1e620:	ldr	r0, [lr, #100]	; 0x64
   1e624:	mov	r5, r4
   1e628:	ldr	r2, [r0, sl, lsl #2]
   1e62c:	cmp	r2, #0
   1e630:	beq	1e67c <__assert_fail@plt+0xcf54>
   1e634:	ldr	r0, [r2, #8]
   1e638:	cmp	r0, #1
   1e63c:	blt	1e67c <__assert_fail@plt+0xcf54>
   1e640:	ldr	r1, [r7]
   1e644:	ldr	r2, [r2, #12]
   1e648:	mov	r9, r7
   1e64c:	mov	r3, #0
   1e650:	ldr	r4, [r2, r3, lsl #2]
   1e654:	add	r7, r1, r4, lsl #3
   1e658:	ldrb	r7, [r7, #4]
   1e65c:	cmp	r7, #9
   1e660:	ldreq	r7, [r1, r4, lsl #3]
   1e664:	cmpeq	r7, r8
   1e668:	beq	1e478 <__assert_fail@plt+0xcd50>
   1e66c:	add	r3, r3, #1
   1e670:	cmp	r3, r0
   1e674:	blt	1e650 <__assert_fail@plt+0xcf28>
   1e678:	mov	r7, r9
   1e67c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e680:	ldr	lr, [sp, #48]	; 0x30
   1e684:	add	r9, sl, #1
   1e688:	cmp	sl, r0
   1e68c:	blt	1e5e4 <__assert_fail@plt+0xcebc>
   1e690:	b	1e450 <__assert_fail@plt+0xcd28>
   1e694:	mov	r0, #0
   1e698:	str	r0, [fp, #-32]	; 0xffffffe0
   1e69c:	b	1e8a4 <__assert_fail@plt+0xd17c>
   1e6a0:	ldr	r0, [lr, #108]	; 0x6c
   1e6a4:	ldr	r7, [sp, #12]
   1e6a8:	mov	r1, #0
   1e6ac:	str	r1, [fp, #-32]	; 0xffffffe0
   1e6b0:	cmp	r7, r0
   1e6b4:	bge	1e8a4 <__assert_fail@plt+0xd17c>
   1e6b8:	add	r0, r7, r7, lsl #1
   1e6bc:	lsl	r5, r0, #3
   1e6c0:	ldr	r0, [lr, #116]	; 0x74
   1e6c4:	ldr	r2, [sp, #52]	; 0x34
   1e6c8:	ldr	r1, [r0, r5]
   1e6cc:	cmp	r1, r2
   1e6d0:	bne	1e88c <__assert_fail@plt+0xd164>
   1e6d4:	add	r0, r0, r5
   1e6d8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1e6dc:	ldr	r1, [r0, #4]
   1e6e0:	cmp	r1, r2
   1e6e4:	bne	1e88c <__assert_fail@plt+0xd164>
   1e6e8:	ldr	r2, [r0, #8]
   1e6ec:	ldr	r3, [r0, #12]
   1e6f0:	ldr	r0, [sp, #32]
   1e6f4:	ldr	r4, [r0, #24]
   1e6f8:	cmp	r3, r2
   1e6fc:	bne	1e718 <__assert_fail@plt+0xcff0>
   1e700:	ldr	r1, [sp, #52]	; 0x34
   1e704:	ldr	r0, [r0, #20]
   1e708:	add	r1, r1, r1, lsl #1
   1e70c:	add	r0, r0, r1, lsl #2
   1e710:	ldr	r0, [r0, #8]
   1e714:	b	1e724 <__assert_fail@plt+0xcffc>
   1e718:	ldr	r0, [r0, #12]
   1e71c:	ldr	r1, [sp, #52]	; 0x34
   1e720:	add	r0, r0, r1, lsl #2
   1e724:	ldr	r0, [r0]
   1e728:	ldr	r8, [fp, #-48]	; 0xffffffd0
   1e72c:	ldr	r6, [sp, #48]	; 0x30
   1e730:	str	r2, [sp, #44]	; 0x2c
   1e734:	str	r3, [sp, #40]	; 0x28
   1e738:	add	r9, r0, r0, lsl #1
   1e73c:	add	r0, r3, r8
   1e740:	sub	sl, r0, r2
   1e744:	ldr	r2, [r6, #88]	; 0x58
   1e748:	mov	r0, r6
   1e74c:	sub	r1, sl, #1
   1e750:	bl	1dff0 <__assert_fail@plt+0xc8c8>
   1e754:	mov	r3, r0
   1e758:	ldr	r0, [r6, #100]	; 0x64
   1e75c:	ldr	r1, [r0, r8, lsl #2]
   1e760:	ldr	r2, [r0, sl, lsl #2]
   1e764:	add	r8, r4, r9, lsl #2
   1e768:	cmp	r1, #0
   1e76c:	ldrne	r0, [r1, #8]
   1e770:	moveq	r0, #0
   1e774:	cmp	r2, #0
   1e778:	str	r0, [sp, #28]
   1e77c:	sub	r0, fp, #44	; 0x2c
   1e780:	beq	1e7ec <__assert_fail@plt+0xd0c4>
   1e784:	ldr	r1, [r2, #40]	; 0x28
   1e788:	mov	r2, r8
   1e78c:	mov	r4, r3
   1e790:	mov	r6, r0
   1e794:	bl	1eb2c <__assert_fail@plt+0xd404>
   1e798:	cmp	r0, #0
   1e79c:	str	r0, [fp, #-32]	; 0xffffffe0
   1e7a0:	bne	1e8e8 <__assert_fail@plt+0xd1c0>
   1e7a4:	ldr	r1, [sp, #32]
   1e7a8:	sub	r0, fp, #32
   1e7ac:	mov	r2, r6
   1e7b0:	mov	r3, r4
   1e7b4:	bl	1d380 <__assert_fail@plt+0xbc58>
   1e7b8:	ldr	r4, [sp, #48]	; 0x30
   1e7bc:	ldr	r1, [r4, #100]	; 0x64
   1e7c0:	str	r0, [r1, sl, lsl #2]
   1e7c4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1e7c8:	bl	132d4 <__assert_fail@plt+0x1bac>
   1e7cc:	ldr	r3, [r4, #100]	; 0x64
   1e7d0:	ldr	r1, [r3, sl, lsl #2]
   1e7d4:	cmp	r1, #0
   1e7d8:	bne	1e82c <__assert_fail@plt+0xd104>
   1e7dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e7e0:	cmp	r0, #0
   1e7e4:	beq	1e82c <__assert_fail@plt+0xd104>
   1e7e8:	b	1e8c8 <__assert_fail@plt+0xd1a0>
   1e7ec:	ldr	r1, [sp, #32]
   1e7f0:	sub	r0, fp, #32
   1e7f4:	mov	r2, r8
   1e7f8:	bl	1d380 <__assert_fail@plt+0xbc58>
   1e7fc:	ldr	r1, [r6, #100]	; 0x64
   1e800:	str	r0, [r1, sl, lsl #2]
   1e804:	ldr	r3, [r6, #100]	; 0x64
   1e808:	ldr	r1, [r3, sl, lsl #2]
   1e80c:	cmp	r1, #0
   1e810:	bne	1e82c <__assert_fail@plt+0xd104>
   1e814:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e818:	ldr	r1, [sp, #44]	; 0x2c
   1e81c:	ldr	r2, [sp, #40]	; 0x28
   1e820:	cmp	r0, #0
   1e824:	beq	1e834 <__assert_fail@plt+0xd10c>
   1e828:	b	1e8c8 <__assert_fail@plt+0xd1a0>
   1e82c:	ldr	r1, [sp, #44]	; 0x2c
   1e830:	ldr	r2, [sp, #40]	; 0x28
   1e834:	cmp	r2, r1
   1e838:	bne	1e88c <__assert_fail@plt+0xd164>
   1e83c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1e840:	ldr	r0, [r3, r1, lsl #2]
   1e844:	ldr	r1, [sp, #28]
   1e848:	ldr	r0, [r0, #8]
   1e84c:	cmp	r0, r1
   1e850:	ble	1e88c <__assert_fail@plt+0xd164>
   1e854:	ldr	r4, [sp, #48]	; 0x30
   1e858:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1e85c:	mov	r1, r8
   1e860:	mov	r0, r4
   1e864:	bl	1e0d0 <__assert_fail@plt+0xc9a8>
   1e868:	cmp	r0, #0
   1e86c:	str	r0, [fp, #-32]	; 0xffffffe0
   1e870:	bne	1e8c8 <__assert_fail@plt+0xd1a0>
   1e874:	mov	r0, r4
   1e878:	mov	r1, r8
   1e87c:	bl	1e1c8 <__assert_fail@plt+0xcaa0>
   1e880:	cmp	r0, #0
   1e884:	str	r0, [fp, #-32]	; 0xffffffe0
   1e888:	bne	1e8c8 <__assert_fail@plt+0xd1a0>
   1e88c:	ldr	lr, [sp, #48]	; 0x30
   1e890:	add	r7, r7, #1
   1e894:	add	r5, r5, #24
   1e898:	ldr	r0, [lr, #108]	; 0x6c
   1e89c:	cmp	r7, r0
   1e8a0:	blt	1e6c0 <__assert_fail@plt+0xcf98>
   1e8a4:	ldr	r1, [sp, #16]
   1e8a8:	ldr	r3, [sp, #36]	; 0x24
   1e8ac:	ldr	r2, [sp, #32]
   1e8b0:	ldr	r0, [r1, #4]
   1e8b4:	add	r3, r3, #1
   1e8b8:	cmp	r3, r0
   1e8bc:	blt	1e200 <__assert_fail@plt+0xcad8>
   1e8c0:	mov	r0, #0
   1e8c4:	str	r0, [fp, #-32]	; 0xffffffe0
   1e8c8:	sub	sp, fp, #28
   1e8cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8d0:	mov	r5, r0
   1e8d4:	str	r5, [fp, #-32]	; 0xffffffe0
   1e8d8:	mov	r0, r5
   1e8dc:	b	1e8c8 <__assert_fail@plt+0xd1a0>
   1e8e0:	mov	r5, #12
   1e8e4:	b	1e8d4 <__assert_fail@plt+0xd1ac>
   1e8e8:	mov	r1, r0
   1e8ec:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1e8f0:	mov	r4, r1
   1e8f4:	bl	132d4 <__assert_fail@plt+0x1bac>
   1e8f8:	mov	r0, r4
   1e8fc:	b	1e8c8 <__assert_fail@plt+0xd1a0>
   1e900:	push	{r4, r5, fp, lr}
   1e904:	add	fp, sp, #8
   1e908:	mov	r4, r0
   1e90c:	ldr	r0, [r0, #36]	; 0x24
   1e910:	mov	r5, #12
   1e914:	cmn	r0, #-536870910	; 0xe0000002
   1e918:	bhi	1e9d0 <__assert_fail@plt+0xd2a8>
   1e91c:	ldr	r2, [r4, #48]	; 0x30
   1e920:	cmp	r2, r0, lsl #1
   1e924:	lslge	r2, r0, #1
   1e928:	mov	r0, r4
   1e92c:	cmp	r2, r1
   1e930:	movle	r2, r1
   1e934:	mov	r1, r2
   1e938:	bl	18908 <__assert_fail@plt+0x71e0>
   1e93c:	cmp	r0, #0
   1e940:	bne	1e994 <__assert_fail@plt+0xd26c>
   1e944:	ldr	r0, [r4, #100]	; 0x64
   1e948:	cmp	r0, #0
   1e94c:	beq	1e96c <__assert_fail@plt+0xd244>
   1e950:	ldr	r1, [r4, #36]	; 0x24
   1e954:	mov	r2, #4
   1e958:	add	r1, r2, r1, lsl #2
   1e95c:	bl	22ad0 <__assert_fail@plt+0x113a8>
   1e960:	cmp	r0, #0
   1e964:	beq	1e9d0 <__assert_fail@plt+0xd2a8>
   1e968:	str	r0, [r4, #100]	; 0x64
   1e96c:	ldrb	r1, [r4, #72]	; 0x48
   1e970:	ldr	r0, [r4, #80]	; 0x50
   1e974:	cmp	r1, #0
   1e978:	beq	1e99c <__assert_fail@plt+0xd274>
   1e97c:	cmp	r0, #2
   1e980:	blt	1e9b0 <__assert_fail@plt+0xd288>
   1e984:	mov	r0, r4
   1e988:	bl	189a8 <__assert_fail@plt+0x7280>
   1e98c:	cmp	r0, #0
   1e990:	beq	1e9cc <__assert_fail@plt+0xd2a4>
   1e994:	mov	r5, r0
   1e998:	b	1e9d0 <__assert_fail@plt+0xd2a8>
   1e99c:	cmp	r0, #2
   1e9a0:	blt	1e9bc <__assert_fail@plt+0xd294>
   1e9a4:	mov	r0, r4
   1e9a8:	bl	18f84 <__assert_fail@plt+0x785c>
   1e9ac:	b	1e9cc <__assert_fail@plt+0xd2a4>
   1e9b0:	mov	r0, r4
   1e9b4:	bl	18f18 <__assert_fail@plt+0x77f0>
   1e9b8:	b	1e9cc <__assert_fail@plt+0xd2a4>
   1e9bc:	ldr	r0, [r4, #64]	; 0x40
   1e9c0:	cmp	r0, #0
   1e9c4:	movne	r0, r4
   1e9c8:	blne	19160 <__assert_fail@plt+0x7a38>
   1e9cc:	mov	r5, #0
   1e9d0:	mov	r0, r5
   1e9d4:	pop	{r4, r5, fp, pc}
   1e9d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e9dc:	add	fp, sp, #24
   1e9e0:	sub	sp, sp, #16
   1e9e4:	mov	r8, r0
   1e9e8:	mov	r4, r1
   1e9ec:	ldr	r5, [r1, #40]	; 0x28
   1e9f0:	ldr	r7, [r1, #84]	; 0x54
   1e9f4:	ldr	r0, [r1, #100]	; 0x64
   1e9f8:	ldr	r1, [r1, #104]	; 0x68
   1e9fc:	mov	r6, r2
   1ea00:	cmp	r5, r1
   1ea04:	ble	1ea14 <__assert_fail@plt+0xd2ec>
   1ea08:	str	r6, [r0, r5, lsl #2]
   1ea0c:	str	r5, [r4, #104]	; 0x68
   1ea10:	b	1eab8 <__assert_fail@plt+0xd390>
   1ea14:	ldr	r1, [r0, r5, lsl #2]
   1ea18:	cmp	r1, #0
   1ea1c:	beq	1ea58 <__assert_fail@plt+0xd330>
   1ea20:	ldr	r2, [r1, #40]	; 0x28
   1ea24:	cmp	r6, #0
   1ea28:	beq	1ea60 <__assert_fail@plt+0xd338>
   1ea2c:	ldr	r6, [r6, #40]	; 0x28
   1ea30:	mov	r0, sp
   1ea34:	mov	r1, r6
   1ea38:	bl	1eb2c <__assert_fail@plt+0xd404>
   1ea3c:	cmp	r0, #0
   1ea40:	str	r0, [r8]
   1ea44:	bne	1eb24 <__assert_fail@plt+0xd3fc>
   1ea48:	ldr	r0, [r4, #40]	; 0x28
   1ea4c:	clz	r1, r6
   1ea50:	lsr	r9, r1, #5
   1ea54:	b	1ea78 <__assert_fail@plt+0xd350>
   1ea58:	str	r6, [r0, r5, lsl #2]
   1ea5c:	b	1eab8 <__assert_fail@plt+0xd390>
   1ea60:	ldr	r0, [r2, #8]
   1ea64:	vldr	d16, [r2]
   1ea68:	mov	r9, #1
   1ea6c:	str	r0, [sp, #8]
   1ea70:	mov	r0, r5
   1ea74:	vstr	d16, [sp]
   1ea78:	ldr	r2, [r4, #88]	; 0x58
   1ea7c:	sub	r1, r0, #1
   1ea80:	mov	r0, r4
   1ea84:	bl	1dff0 <__assert_fail@plt+0xc8c8>
   1ea88:	mov	r3, r0
   1ea8c:	mov	r2, sp
   1ea90:	mov	r0, r8
   1ea94:	mov	r1, r7
   1ea98:	bl	1d380 <__assert_fail@plt+0xbc58>
   1ea9c:	mov	r6, r0
   1eaa0:	ldr	r0, [r4, #100]	; 0x64
   1eaa4:	cmp	r9, #0
   1eaa8:	str	r6, [r0, r5, lsl #2]
   1eaac:	bne	1eab8 <__assert_fail@plt+0xd390>
   1eab0:	ldr	r0, [sp, #8]
   1eab4:	bl	132d4 <__assert_fail@plt+0x1bac>
   1eab8:	cmp	r6, #0
   1eabc:	ldrne	r0, [r7, #76]	; 0x4c
   1eac0:	cmpne	r0, #0
   1eac4:	bne	1ead4 <__assert_fail@plt+0xd3ac>
   1eac8:	mov	r0, r6
   1eacc:	sub	sp, fp, #24
   1ead0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ead4:	add	r7, r6, #4
   1ead8:	mov	r0, r4
   1eadc:	mov	r2, r5
   1eae0:	mov	r1, r7
   1eae4:	bl	1e0d0 <__assert_fail@plt+0xc9a8>
   1eae8:	cmp	r0, #0
   1eaec:	str	r0, [r8]
   1eaf0:	bne	1eb24 <__assert_fail@plt+0xd3fc>
   1eaf4:	ldrb	r0, [r6, #52]	; 0x34
   1eaf8:	tst	r0, #64	; 0x40
   1eafc:	beq	1eac8 <__assert_fail@plt+0xd3a0>
   1eb00:	mov	r0, r4
   1eb04:	mov	r1, r7
   1eb08:	bl	1e1c8 <__assert_fail@plt+0xcaa0>
   1eb0c:	str	r0, [r8]
   1eb10:	cmp	r0, #0
   1eb14:	mov	r6, #0
   1eb18:	ldreq	r0, [r4, #100]	; 0x64
   1eb1c:	ldreq	r6, [r0, r5, lsl #2]
   1eb20:	b	1eac8 <__assert_fail@plt+0xd3a0>
   1eb24:	mov	r6, #0
   1eb28:	b	1eac8 <__assert_fail@plt+0xd3a0>
   1eb2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb30:	add	fp, sp, #28
   1eb34:	sub	sp, sp, #20
   1eb38:	mov	r8, r2
   1eb3c:	cmp	r1, #0
   1eb40:	str	r0, [sp, #16]
   1eb44:	beq	1eb7c <__assert_fail@plt+0xd454>
   1eb48:	ldr	r0, [r1, #4]
   1eb4c:	mov	r6, r1
   1eb50:	cmp	r8, #0
   1eb54:	beq	1eb68 <__assert_fail@plt+0xd440>
   1eb58:	cmp	r0, #1
   1eb5c:	ldrge	r1, [r8, #4]
   1eb60:	cmpge	r1, #1
   1eb64:	bge	1ebbc <__assert_fail@plt+0xd494>
   1eb68:	cmp	r0, #1
   1eb6c:	blt	1eb7c <__assert_fail@plt+0xd454>
   1eb70:	ldr	r0, [sp, #16]
   1eb74:	mov	r1, r6
   1eb78:	b	1eb98 <__assert_fail@plt+0xd470>
   1eb7c:	cmp	r8, #0
   1eb80:	beq	1eba4 <__assert_fail@plt+0xd47c>
   1eb84:	ldr	r0, [r8, #4]
   1eb88:	cmp	r0, #1
   1eb8c:	blt	1eba4 <__assert_fail@plt+0xd47c>
   1eb90:	ldr	r0, [sp, #16]
   1eb94:	mov	r1, r8
   1eb98:	sub	sp, fp, #28
   1eb9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eba0:	b	1d2a0 <__assert_fail@plt+0xbb78>
   1eba4:	ldr	r1, [sp, #16]
   1eba8:	mov	r0, #0
   1ebac:	str	r0, [r1]
   1ebb0:	str	r0, [r1, #4]
   1ebb4:	str	r0, [r1, #8]
   1ebb8:	b	1ed20 <__assert_fail@plt+0xd5f8>
   1ebbc:	ldr	r4, [sp, #16]
   1ebc0:	add	r0, r1, r0
   1ebc4:	str	r0, [r4]
   1ebc8:	lsl	r0, r0, #2
   1ebcc:	bl	22aa0 <__assert_fail@plt+0x11378>
   1ebd0:	cmp	r0, #0
   1ebd4:	str	r0, [r4, #8]
   1ebd8:	beq	1ed28 <__assert_fail@plt+0xd600>
   1ebdc:	ldr	r9, [r8, #4]
   1ebe0:	ldr	lr, [r6, #4]
   1ebe4:	mov	r1, #0
   1ebe8:	mov	r7, #0
   1ebec:	cmp	r9, #0
   1ebf0:	movwgt	r1, #1
   1ebf4:	cmp	lr, #1
   1ebf8:	blt	1ecbc <__assert_fail@plt+0xd594>
   1ebfc:	mov	r2, #0
   1ec00:	mov	ip, #0
   1ec04:	str	r2, [sp, #8]
   1ec08:	mov	r2, #0
   1ec0c:	str	r2, [sp, #12]
   1ec10:	mov	r2, #0
   1ec14:	ldr	r4, [sp, #12]
   1ec18:	mov	r7, ip
   1ec1c:	tst	r1, #1
   1ec20:	beq	1ecec <__assert_fail@plt+0xd5c4>
   1ec24:	ldr	r1, [r8, #8]
   1ec28:	ldr	r3, [r1, r7, lsl #2]
   1ec2c:	ldr	r1, [r6, #8]
   1ec30:	ldr	sl, [r1, r2, lsl #2]
   1ec34:	cmp	sl, r3
   1ec38:	ble	1ec60 <__assert_fail@plt+0xd538>
   1ec3c:	add	r7, r7, #1
   1ec40:	mov	r1, #0
   1ec44:	str	r3, [r0, r4, lsl #2]
   1ec48:	add	r4, r4, #1
   1ec4c:	cmp	r9, r7
   1ec50:	movwgt	r1, #1
   1ec54:	cmp	lr, r2
   1ec58:	bgt	1ec1c <__assert_fail@plt+0xd4f4>
   1ec5c:	b	1ecc0 <__assert_fail@plt+0xd598>
   1ec60:	add	r1, r7, #1
   1ec64:	str	sl, [r0, r4, lsl #2]
   1ec68:	mov	ip, r7
   1ec6c:	add	r2, r2, #1
   1ec70:	str	r1, [sp, #4]
   1ec74:	ldr	r9, [r8, #4]
   1ec78:	ldr	lr, [r6, #4]
   1ec7c:	moveq	ip, r1
   1ec80:	mov	r1, #0
   1ec84:	ldr	r5, [sp, #8]
   1ec88:	cmp	r9, ip
   1ec8c:	sub	r5, r5, #1
   1ec90:	movwgt	r1, #1
   1ec94:	cmp	lr, r2
   1ec98:	str	r5, [sp, #8]
   1ec9c:	add	r5, r4, #1
   1eca0:	str	r5, [sp, #12]
   1eca4:	bgt	1ec14 <__assert_fail@plt+0xd4ec>
   1eca8:	ldr	r2, [sp, #4]
   1ecac:	cmp	sl, r3
   1ecb0:	add	r4, r4, #1
   1ecb4:	moveq	r7, r2
   1ecb8:	b	1ecc0 <__assert_fail@plt+0xd598>
   1ecbc:	mov	r4, #0
   1ecc0:	cmp	r1, #0
   1ecc4:	beq	1ed14 <__assert_fail@plt+0xd5ec>
   1ecc8:	ldr	r1, [r8, #8]
   1eccc:	sub	r2, r9, r7
   1ecd0:	add	r0, r0, r4, lsl #2
   1ecd4:	lsl	r2, r2, #2
   1ecd8:	add	r1, r1, r7, lsl #2
   1ecdc:	bl	11464 <memcpy@plt>
   1ece0:	sub	r0, r4, r7
   1ece4:	add	r4, r0, r9
   1ece8:	b	1ed14 <__assert_fail@plt+0xd5ec>
   1ecec:	ldr	r1, [r6, #8]
   1ecf0:	add	r0, r0, r4, lsl #2
   1ecf4:	add	r1, r1, r2, lsl #2
   1ecf8:	sub	r2, lr, r2
   1ecfc:	lsl	r2, r2, #2
   1ed00:	bl	11464 <memcpy@plt>
   1ed04:	ldr	r0, [r6, #4]
   1ed08:	ldr	r1, [sp, #8]
   1ed0c:	add	r0, r0, r1
   1ed10:	add	r4, r0, r4
   1ed14:	ldr	r0, [sp, #16]
   1ed18:	str	r4, [r0, #4]
   1ed1c:	mov	r0, #0
   1ed20:	sub	sp, fp, #28
   1ed24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed28:	mov	r0, #12
   1ed2c:	b	1ed20 <__assert_fail@plt+0xd5f8>
   1ed30:	push	{r4, r5, r6, r7, fp, lr}
   1ed34:	add	fp, sp, #16
   1ed38:	ldr	lr, [r0, #108]	; 0x6c
   1ed3c:	mov	ip, r0
   1ed40:	cmp	lr, #1
   1ed44:	blt	1ed88 <__assert_fail@plt+0xd660>
   1ed48:	ldr	r2, [ip, #116]	; 0x74
   1ed4c:	mov	r0, #0
   1ed50:	mov	r3, #1
   1ed54:	mov	r4, lr
   1ed58:	add	r5, r0, r4
   1ed5c:	add	r5, r5, r5, lsr #31
   1ed60:	asr	r6, r5, #1
   1ed64:	add	r7, r6, r6, lsl #1
   1ed68:	add	r7, r2, r7, lsl #3
   1ed6c:	ldr	r7, [r7, #4]
   1ed70:	cmp	r7, r1
   1ed74:	addlt	r0, r3, r5, asr #1
   1ed78:	movge	r4, r6
   1ed7c:	cmp	r0, r4
   1ed80:	blt	1ed58 <__assert_fail@plt+0xd630>
   1ed84:	b	1ed8c <__assert_fail@plt+0xd664>
   1ed88:	mov	r0, #0
   1ed8c:	cmp	r0, lr
   1ed90:	bge	1edb0 <__assert_fail@plt+0xd688>
   1ed94:	ldr	r2, [ip, #116]	; 0x74
   1ed98:	add	r3, r0, r0, lsl #1
   1ed9c:	add	r2, r2, r3, lsl #3
   1eda0:	ldr	r2, [r2, #4]
   1eda4:	cmp	r2, r1
   1eda8:	mvnne	r0, #0
   1edac:	pop	{r4, r5, r6, r7, fp, pc}
   1edb0:	mvn	r0, #0
   1edb4:	pop	{r4, r5, r6, r7, fp, pc}
   1edb8:	push	{r4, r5, r6, r7, fp, lr}
   1edbc:	add	fp, sp, #16
   1edc0:	mov	r5, r0
   1edc4:	ldr	r0, [r0, #36]	; 0x24
   1edc8:	mov	r4, r1
   1edcc:	ldr	r7, [r5, #104]	; 0x68
   1edd0:	cmp	r0, r1
   1edd4:	ldrle	r1, [r5, #48]	; 0x30
   1edd8:	cmple	r0, r1
   1eddc:	blt	1ee28 <__assert_fail@plt+0xd700>
   1ede0:	ldr	r0, [r5, #28]
   1ede4:	cmp	r0, r4
   1ede8:	ldrle	r1, [r5, #48]	; 0x30
   1edec:	cmple	r0, r1
   1edf0:	blt	1ee28 <__assert_fail@plt+0xd700>
   1edf4:	mov	r6, #0
   1edf8:	cmp	r7, r4
   1edfc:	bge	1ee40 <__assert_fail@plt+0xd718>
   1ee00:	sub	r0, r4, r7
   1ee04:	mov	r1, #0
   1ee08:	mov	r6, #0
   1ee0c:	lsl	r2, r0, #2
   1ee10:	ldr	r0, [r5, #100]	; 0x64
   1ee14:	add	r0, r0, r7, lsl #2
   1ee18:	add	r0, r0, #4
   1ee1c:	bl	11620 <memset@plt>
   1ee20:	str	r4, [r5, #104]	; 0x68
   1ee24:	b	1ee40 <__assert_fail@plt+0xd718>
   1ee28:	add	r1, r4, #1
   1ee2c:	mov	r0, r5
   1ee30:	bl	1e900 <__assert_fail@plt+0xd1d8>
   1ee34:	mov	r6, r0
   1ee38:	cmp	r0, #0
   1ee3c:	beq	1edf4 <__assert_fail@plt+0xd6cc>
   1ee40:	mov	r0, r6
   1ee44:	pop	{r4, r5, r6, r7, fp, pc}
   1ee48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee4c:	add	fp, sp, #28
   1ee50:	sub	sp, sp, #12
   1ee54:	mov	r6, r2
   1ee58:	mov	r4, r0
   1ee5c:	mov	r0, #8
   1ee60:	mov	r7, r3
   1ee64:	ldr	r2, [r2]
   1ee68:	mov	r8, r1
   1ee6c:	ldr	r3, [r6, #4]
   1ee70:	str	r0, [sp, #8]
   1ee74:	add	r1, r6, #8
   1ee78:	mov	r0, r4
   1ee7c:	ldr	r5, [fp, #8]
   1ee80:	str	r7, [sp]
   1ee84:	str	r5, [sp, #4]
   1ee88:	bl	1ef98 <__assert_fail@plt+0xd870>
   1ee8c:	cmp	r0, #0
   1ee90:	beq	1ee9c <__assert_fail@plt+0xd774>
   1ee94:	sub	sp, fp, #28
   1ee98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee9c:	ldr	r0, [r4, #108]	; 0x6c
   1eea0:	ldr	r1, [r4, #112]	; 0x70
   1eea4:	ldr	r9, [r6, #4]
   1eea8:	ldr	sl, [r8]
   1eeac:	cmp	r0, r1
   1eeb0:	blt	1ef00 <__assert_fail@plt+0xd7d8>
   1eeb4:	ldr	r0, [r4, #116]	; 0x74
   1eeb8:	add	r1, r1, r1, lsl #1
   1eebc:	lsl	r1, r1, #4
   1eec0:	bl	22ad0 <__assert_fail@plt+0x113a8>
   1eec4:	cmp	r0, #0
   1eec8:	beq	1ef88 <__assert_fail@plt+0xd860>
   1eecc:	str	r0, [r4, #116]	; 0x74
   1eed0:	ldr	r1, [r4, #108]	; 0x6c
   1eed4:	ldr	r2, [r4, #112]	; 0x70
   1eed8:	add	r1, r1, r1, lsl #1
   1eedc:	add	r0, r0, r1, lsl #3
   1eee0:	add	r1, r2, r2, lsl #1
   1eee4:	lsl	r2, r1, #3
   1eee8:	mov	r1, #0
   1eeec:	bl	11620 <memset@plt>
   1eef0:	ldr	r1, [r4, #112]	; 0x70
   1eef4:	ldr	r0, [r4, #108]	; 0x6c
   1eef8:	lsl	r1, r1, #1
   1eefc:	str	r1, [r4, #112]	; 0x70
   1ef00:	ldr	r1, [r4, #116]	; 0x74
   1ef04:	cmp	r0, #1
   1ef08:	blt	1ef28 <__assert_fail@plt+0xd800>
   1ef0c:	sub	r2, r0, #1
   1ef10:	add	r2, r2, r2, lsl #1
   1ef14:	add	r2, r1, r2, lsl #3
   1ef18:	ldr	r3, [r2, #4]
   1ef1c:	cmp	r3, r5
   1ef20:	moveq	r3, #1
   1ef24:	strbeq	r3, [r2, #20]
   1ef28:	add	r2, r0, r0, lsl #1
   1ef2c:	cmp	r9, sl
   1ef30:	mov	r3, #0
   1ef34:	add	r0, r0, #1
   1ef38:	str	r7, [r1, r2, lsl #3]!
   1ef3c:	mov	r2, #0
   1ef40:	mvneq	r3, #0
   1ef44:	stmib	r1, {r5, sl}
   1ef48:	str	r9, [r1, #12]
   1ef4c:	str	r3, [r1, #16]
   1ef50:	str	r0, [r4, #108]	; 0x6c
   1ef54:	strb	r2, [r1, #20]
   1ef58:	sub	r0, r9, sl
   1ef5c:	ldr	r1, [r4, #120]	; 0x78
   1ef60:	cmp	r1, r0
   1ef64:	strlt	r0, [r4, #120]	; 0x78
   1ef68:	ldr	r0, [r6, #4]
   1ef6c:	ldr	r1, [r8]
   1ef70:	add	r0, r0, r5
   1ef74:	sub	r1, r0, r1
   1ef78:	mov	r0, r4
   1ef7c:	sub	sp, fp, #28
   1ef80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef84:	b	1edb8 <__assert_fail@plt+0xd690>
   1ef88:	ldr	r0, [r4, #116]	; 0x74
   1ef8c:	bl	132d4 <__assert_fail@plt+0x1bac>
   1ef90:	mov	r0, #12
   1ef94:	b	1ee94 <__assert_fail@plt+0xd76c>
   1ef98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef9c:	add	fp, sp, #28
   1efa0:	sub	sp, sp, #84	; 0x54
   1efa4:	ldr	r9, [r0, #84]	; 0x54
   1efa8:	mov	r6, r3
   1efac:	mov	r3, r1
   1efb0:	mov	r1, #0
   1efb4:	str	r0, [sp, #44]	; 0x2c
   1efb8:	ldr	sl, [fp, #12]
   1efbc:	mov	r8, r2
   1efc0:	str	r1, [fp, #-52]	; 0xffffffcc
   1efc4:	ldr	r0, [r0, #120]	; 0x78
   1efc8:	ldr	r5, [r3, #4]
   1efcc:	ldr	r1, [r9]
   1efd0:	str	r9, [sp, #20]
   1efd4:	add	r0, r0, sl
   1efd8:	cmp	r5, r0
   1efdc:	ldr	r1, [r1, r2, lsl #3]
   1efe0:	str	r1, [sp, #24]
   1efe4:	ble	1f4b8 <__assert_fail@plt+0xdd90>
   1efe8:	add	r4, r3, #8
   1efec:	ldr	r0, [sp, #44]	; 0x2c
   1eff0:	ldr	r5, [r3]
   1eff4:	ldr	r4, [r4]
   1eff8:	str	r3, [sp, #16]
   1effc:	ldr	r1, [r0, #40]	; 0x28
   1f000:	ldr	r2, [r0, #88]	; 0x58
   1f004:	cmp	r5, #0
   1f008:	moveq	r5, r6
   1f00c:	str	r1, [sp, #12]
   1f010:	ldr	r1, [r0, #100]	; 0x64
   1f014:	str	r4, [r0, #100]	; 0x64
   1f018:	str	r5, [r0, #40]	; 0x28
   1f01c:	str	r1, [sp, #8]
   1f020:	sub	r1, r5, #1
   1f024:	bl	1dff0 <__assert_fail@plt+0xc8c8>
   1f028:	mov	r7, r0
   1f02c:	cmp	r5, r6
   1f030:	bne	1f0fc <__assert_fail@plt+0xd9d4>
   1f034:	mov	r0, #1
   1f038:	str	r0, [sp, #52]	; 0x34
   1f03c:	str	r0, [sp, #48]	; 0x30
   1f040:	mov	r0, #4
   1f044:	bl	22aa0 <__assert_fail@plt+0x11378>
   1f048:	cmp	r0, #0
   1f04c:	str	r0, [sp, #56]	; 0x38
   1f050:	beq	1f53c <__assert_fail@plt+0xde14>
   1f054:	ldr	r6, [sp, #24]
   1f058:	ldr	r4, [fp, #16]
   1f05c:	str	r8, [r0]
   1f060:	mov	r0, #0
   1f064:	add	r1, sp, #48	; 0x30
   1f068:	str	r7, [sp, #40]	; 0x28
   1f06c:	str	r0, [fp, #-52]	; 0xffffffcc
   1f070:	mov	r0, r9
   1f074:	mov	r2, r6
   1f078:	mov	r3, r4
   1f07c:	bl	1f55c <__assert_fail@plt+0xde34>
   1f080:	ldr	r8, [sp, #44]	; 0x2c
   1f084:	cmp	r0, #0
   1f088:	str	r0, [fp, #-52]	; 0xffffffcc
   1f08c:	bne	1f52c <__assert_fail@plt+0xde04>
   1f090:	ldr	r0, [sp, #52]	; 0x34
   1f094:	cmp	r0, #0
   1f098:	beq	1f0c0 <__assert_fail@plt+0xd998>
   1f09c:	add	r1, sp, #48	; 0x30
   1f0a0:	mov	r0, r8
   1f0a4:	mov	r2, r5
   1f0a8:	mov	r3, r6
   1f0ac:	str	r4, [sp]
   1f0b0:	bl	1f694 <__assert_fail@plt+0xdf6c>
   1f0b4:	cmp	r0, #0
   1f0b8:	str	r0, [fp, #-52]	; 0xffffffcc
   1f0bc:	bne	1f52c <__assert_fail@plt+0xde04>
   1f0c0:	ldr	r3, [sp, #40]	; 0x28
   1f0c4:	sub	r0, fp, #52	; 0x34
   1f0c8:	add	r2, sp, #48	; 0x30
   1f0cc:	mov	r1, r9
   1f0d0:	bl	1d380 <__assert_fail@plt+0xbc58>
   1f0d4:	mov	r6, r0
   1f0d8:	cmp	r0, #0
   1f0dc:	bne	1f0ec <__assert_fail@plt+0xd9c4>
   1f0e0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1f0e4:	cmp	r0, #0
   1f0e8:	bne	1f4a8 <__assert_fail@plt+0xdd80>
   1f0ec:	ldr	r0, [r8, #100]	; 0x64
   1f0f0:	mov	r4, r5
   1f0f4:	str	r6, [r0, r5, lsl #2]
   1f0f8:	b	1f170 <__assert_fail@plt+0xda48>
   1f0fc:	ldr	r6, [r4, r5, lsl #2]
   1f100:	mov	r4, r5
   1f104:	cmp	r6, #0
   1f108:	beq	1f130 <__assert_fail@plt+0xda08>
   1f10c:	ldrb	r0, [r6, #52]	; 0x34
   1f110:	ldr	r8, [sp, #44]	; 0x2c
   1f114:	tst	r0, #64	; 0x40
   1f118:	bne	1f148 <__assert_fail@plt+0xda20>
   1f11c:	mov	r0, #0
   1f120:	str	r0, [sp, #52]	; 0x34
   1f124:	str	r0, [sp, #48]	; 0x30
   1f128:	str	r0, [sp, #56]	; 0x38
   1f12c:	b	1f170 <__assert_fail@plt+0xda48>
   1f130:	ldr	r8, [sp, #44]	; 0x2c
   1f134:	mov	r6, #0
   1f138:	str	r6, [sp, #52]	; 0x34
   1f13c:	str	r6, [sp, #48]	; 0x30
   1f140:	str	r6, [sp, #56]	; 0x38
   1f144:	b	1f170 <__assert_fail@plt+0xda48>
   1f148:	add	r1, r6, #4
   1f14c:	add	r0, sp, #48	; 0x30
   1f150:	str	r7, [sp, #40]	; 0x28
   1f154:	bl	1d2a0 <__assert_fail@plt+0xbb78>
   1f158:	cmp	r0, #0
   1f15c:	str	r0, [fp, #-52]	; 0xffffffcc
   1f160:	bne	1f554 <__assert_fail@plt+0xde2c>
   1f164:	ldrb	r0, [r6, #52]	; 0x34
   1f168:	tst	r0, #64	; 0x40
   1f16c:	bne	1f478 <__assert_fail@plt+0xdd50>
   1f170:	cmp	r4, sl
   1f174:	bge	1f414 <__assert_fail@plt+0xdcec>
   1f178:	add	r5, sp, #48	; 0x30
   1f17c:	mov	r2, #0
   1f180:	ldr	r0, [r8, #120]	; 0x78
   1f184:	cmp	r2, r0
   1f188:	bgt	1f414 <__assert_fail@plt+0xdcec>
   1f18c:	mov	r0, #0
   1f190:	add	r1, r4, #1
   1f194:	str	r2, [sp, #28]
   1f198:	str	r0, [sp, #52]	; 0x34
   1f19c:	str	r1, [sp, #32]
   1f1a0:	ldr	r0, [r8, #100]	; 0x64
   1f1a4:	ldr	r0, [r0, r1, lsl #2]
   1f1a8:	cmp	r0, #0
   1f1ac:	beq	1f1c8 <__assert_fail@plt+0xdaa0>
   1f1b0:	add	r1, r0, #4
   1f1b4:	mov	r0, r5
   1f1b8:	bl	1cef0 <__assert_fail@plt+0xb7c8>
   1f1bc:	cmp	r0, #0
   1f1c0:	str	r0, [fp, #-52]	; 0xffffffcc
   1f1c4:	bne	1f4a8 <__assert_fail@plt+0xdd80>
   1f1c8:	cmp	r6, #0
   1f1cc:	beq	1f348 <__assert_fail@plt+0xdc20>
   1f1d0:	mov	r0, #0
   1f1d4:	ldr	r7, [r8, #84]	; 0x54
   1f1d8:	str	r0, [fp, #-32]	; 0xffffffe0
   1f1dc:	str	r0, [fp, #-44]	; 0xffffffd4
   1f1e0:	str	r0, [fp, #-48]	; 0xffffffd0
   1f1e4:	str	r0, [fp, #-40]	; 0xffffffd8
   1f1e8:	ldr	r1, [r6, #20]
   1f1ec:	cmp	r1, #1
   1f1f0:	blt	1f338 <__assert_fail@plt+0xdc10>
   1f1f4:	mov	r5, #0
   1f1f8:	str	r4, [sp, #40]	; 0x28
   1f1fc:	str	r6, [sp, #36]	; 0x24
   1f200:	b	1f20c <__assert_fail@plt+0xdae4>
   1f204:	ldr	r0, [r7]
   1f208:	b	1f228 <__assert_fail@plt+0xdb00>
   1f20c:	ldr	r0, [r6, #24]
   1f210:	ldr	sl, [r0, r5, lsl #2]
   1f214:	ldr	r0, [r7]
   1f218:	add	r1, r0, sl, lsl #3
   1f21c:	ldrb	r1, [r1, #6]
   1f220:	tst	r1, #16
   1f224:	bne	1f244 <__assert_fail@plt+0xdb1c>
   1f228:	add	r1, r0, sl, lsl #3
   1f22c:	mov	r0, r8
   1f230:	mov	r2, r4
   1f234:	bl	1ff68 <__assert_fail@plt+0xe840>
   1f238:	cmp	r0, #0
   1f23c:	bne	1f300 <__assert_fail@plt+0xdbd8>
   1f240:	b	1f318 <__assert_fail@plt+0xdbf0>
   1f244:	mov	r0, r7
   1f248:	mov	r1, sl
   1f24c:	mov	r2, r8
   1f250:	mov	r3, r4
   1f254:	bl	1fc78 <__assert_fail@plt+0xe550>
   1f258:	cmp	r0, #2
   1f25c:	blt	1f2f8 <__assert_fail@plt+0xdbd0>
   1f260:	add	r4, r0, r4
   1f264:	ldr	r0, [r8, #100]	; 0x64
   1f268:	ldr	r1, [r7, #12]
   1f26c:	sub	r8, fp, #48	; 0x30
   1f270:	ldr	r0, [r0, r4, lsl #2]
   1f274:	ldr	r6, [r1, sl, lsl #2]
   1f278:	mov	r1, #0
   1f27c:	str	r1, [fp, #-44]	; 0xffffffd4
   1f280:	cmp	r0, #0
   1f284:	beq	1f2a0 <__assert_fail@plt+0xdb78>
   1f288:	add	r1, r0, #4
   1f28c:	mov	r0, r8
   1f290:	bl	1cef0 <__assert_fail@plt+0xb7c8>
   1f294:	cmp	r0, #0
   1f298:	str	r0, [fp, #-32]	; 0xffffffe0
   1f29c:	bne	1f498 <__assert_fail@plt+0xdd70>
   1f2a0:	mov	r0, r8
   1f2a4:	mov	r1, r6
   1f2a8:	bl	1d104 <__assert_fail@plt+0xb9dc>
   1f2ac:	cmp	r0, #0
   1f2b0:	beq	1f488 <__assert_fail@plt+0xdd60>
   1f2b4:	sub	r0, fp, #32
   1f2b8:	mov	r1, r7
   1f2bc:	mov	r2, r8
   1f2c0:	bl	1fa7c <__assert_fail@plt+0xe354>
   1f2c4:	ldr	r8, [sp, #44]	; 0x2c
   1f2c8:	ldr	r6, [sp, #36]	; 0x24
   1f2cc:	ldr	r1, [r8, #100]	; 0x64
   1f2d0:	str	r0, [r1, r4, lsl #2]
   1f2d4:	ldr	r0, [r8, #100]	; 0x64
   1f2d8:	ldr	r0, [r0, r4, lsl #2]
   1f2dc:	ldr	r4, [sp, #40]	; 0x28
   1f2e0:	cmp	r0, #0
   1f2e4:	bne	1f300 <__assert_fail@plt+0xdbd8>
   1f2e8:	ldr	r9, [fp, #-32]	; 0xffffffe0
   1f2ec:	cmp	r9, #0
   1f2f0:	beq	1f300 <__assert_fail@plt+0xdbd8>
   1f2f4:	b	1f49c <__assert_fail@plt+0xdd74>
   1f2f8:	cmp	r0, #0
   1f2fc:	beq	1f204 <__assert_fail@plt+0xdadc>
   1f300:	ldr	r0, [r7, #12]
   1f304:	ldr	r1, [r0, sl, lsl #2]
   1f308:	add	r0, sp, #48	; 0x30
   1f30c:	bl	1d104 <__assert_fail@plt+0xb9dc>
   1f310:	cmp	r0, #0
   1f314:	beq	1f488 <__assert_fail@plt+0xdd60>
   1f318:	ldr	r0, [r6, #20]
   1f31c:	add	r5, r5, #1
   1f320:	cmp	r5, r0
   1f324:	blt	1f20c <__assert_fail@plt+0xdae4>
   1f328:	ldr	r5, [fp, #12]
   1f32c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f330:	ldr	r9, [sp, #20]
   1f334:	mov	sl, r5
   1f338:	bl	132d4 <__assert_fail@plt+0x1bac>
   1f33c:	mov	r0, #0
   1f340:	add	r5, sp, #48	; 0x30
   1f344:	str	r0, [fp, #-52]	; 0xffffffcc
   1f348:	ldr	r0, [sp, #52]	; 0x34
   1f34c:	cmp	r0, #0
   1f350:	beq	1f3a8 <__assert_fail@plt+0xdc80>
   1f354:	mov	r6, r4
   1f358:	ldr	r4, [sp, #24]
   1f35c:	ldr	r7, [fp, #16]
   1f360:	mov	r0, r9
   1f364:	mov	r1, r5
   1f368:	mov	r2, r4
   1f36c:	mov	r3, r7
   1f370:	bl	1f55c <__assert_fail@plt+0xde34>
   1f374:	cmp	r0, #0
   1f378:	str	r0, [fp, #-52]	; 0xffffffcc
   1f37c:	bne	1f4a8 <__assert_fail@plt+0xdd80>
   1f380:	ldr	r2, [sp, #32]
   1f384:	mov	r0, r8
   1f388:	mov	r1, r5
   1f38c:	mov	r3, r4
   1f390:	str	r7, [sp]
   1f394:	bl	1f694 <__assert_fail@plt+0xdf6c>
   1f398:	cmp	r0, #0
   1f39c:	mov	r4, r6
   1f3a0:	str	r0, [fp, #-52]	; 0xffffffcc
   1f3a4:	bne	1f4a8 <__assert_fail@plt+0xdd80>
   1f3a8:	ldr	r2, [r8, #88]	; 0x58
   1f3ac:	mov	r0, r8
   1f3b0:	mov	r1, r4
   1f3b4:	bl	1dff0 <__assert_fail@plt+0xc8c8>
   1f3b8:	mov	r3, r0
   1f3bc:	sub	r0, fp, #52	; 0x34
   1f3c0:	mov	r1, r9
   1f3c4:	mov	r2, r5
   1f3c8:	bl	1d380 <__assert_fail@plt+0xbc58>
   1f3cc:	mov	r6, r0
   1f3d0:	cmp	r0, #0
   1f3d4:	bne	1f3e4 <__assert_fail@plt+0xdcbc>
   1f3d8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1f3dc:	cmp	r0, #0
   1f3e0:	bne	1f4a8 <__assert_fail@plt+0xdd80>
   1f3e4:	ldr	r1, [sp, #32]
   1f3e8:	ldr	r0, [r8, #100]	; 0x64
   1f3ec:	ldr	r2, [sp, #28]
   1f3f0:	cmp	r6, #0
   1f3f4:	str	r6, [r0, r1, lsl #2]
   1f3f8:	mov	r0, #0
   1f3fc:	mov	r4, r1
   1f400:	addeq	r0, r2, #1
   1f404:	cmp	r1, sl
   1f408:	mov	r2, r0
   1f40c:	blt	1f180 <__assert_fail@plt+0xda58>
   1f410:	b	1f418 <__assert_fail@plt+0xdcf0>
   1f414:	mov	r1, r4
   1f418:	ldr	r0, [sp, #56]	; 0x38
   1f41c:	mov	r4, r1
   1f420:	bl	132d4 <__assert_fail@plt+0x1bac>
   1f424:	ldr	r0, [r8, #100]	; 0x64
   1f428:	ldr	r1, [sp, #16]
   1f42c:	ldr	r0, [r0, sl, lsl #2]
   1f430:	str	r4, [r1]
   1f434:	ldr	r1, [sp, #12]
   1f438:	str	r1, [r8, #40]	; 0x28
   1f43c:	ldr	r1, [sp, #8]
   1f440:	cmp	r0, #0
   1f444:	str	r1, [r8, #100]	; 0x64
   1f448:	beq	1f468 <__assert_fail@plt+0xdd40>
   1f44c:	ldr	r1, [fp, #8]
   1f450:	add	r0, r0, #4
   1f454:	bl	1d31c <__assert_fail@plt+0xbbf4>
   1f458:	mov	r7, #0
   1f45c:	cmp	r0, #0
   1f460:	moveq	r7, #1
   1f464:	b	1f46c <__assert_fail@plt+0xdd44>
   1f468:	mov	r7, #1
   1f46c:	mov	r0, r7
   1f470:	sub	sp, fp, #28
   1f474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f478:	mov	r5, r4
   1f47c:	ldr	r6, [sp, #24]
   1f480:	ldr	r4, [fp, #16]
   1f484:	b	1f090 <__assert_fail@plt+0xd968>
   1f488:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f48c:	bl	132d4 <__assert_fail@plt+0x1bac>
   1f490:	mov	r9, #12
   1f494:	b	1f4a4 <__assert_fail@plt+0xdd7c>
   1f498:	mov	r9, r0
   1f49c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f4a0:	bl	132d4 <__assert_fail@plt+0x1bac>
   1f4a4:	str	r9, [fp, #-52]	; 0xffffffcc
   1f4a8:	ldr	r0, [sp, #56]	; 0x38
   1f4ac:	bl	132d4 <__assert_fail@plt+0x1bac>
   1f4b0:	ldr	r7, [fp, #-52]	; 0xffffffcc
   1f4b4:	b	1f46c <__assert_fail@plt+0xdd44>
   1f4b8:	mvn	r1, #-2147483648	; 0x80000000
   1f4bc:	mov	r7, #12
   1f4c0:	sub	r1, r1, r5
   1f4c4:	cmp	r1, r0
   1f4c8:	ble	1f46c <__assert_fail@plt+0xdd44>
   1f4cc:	add	r0, r0, #1
   1f4d0:	add	sl, r0, r5
   1f4d4:	str	r0, [sp, #40]	; 0x28
   1f4d8:	cmn	sl, #-1073741823	; 0xc0000001
   1f4dc:	bhi	1f46c <__assert_fail@plt+0xdd44>
   1f4e0:	mov	r4, r3
   1f4e4:	lsl	r1, sl, #2
   1f4e8:	mov	r9, r3
   1f4ec:	ldr	r0, [r4, #8]!
   1f4f0:	bl	22ad0 <__assert_fail@plt+0x113a8>
   1f4f4:	cmp	r0, #0
   1f4f8:	beq	1f46c <__assert_fail@plt+0xdd44>
   1f4fc:	ldr	r1, [sp, #40]	; 0x28
   1f500:	str	sl, [r9, #4]
   1f504:	str	r0, [r9, #8]
   1f508:	add	r0, r0, r5, lsl #2
   1f50c:	lsl	r2, r1, #2
   1f510:	mov	r1, #0
   1f514:	bl	11620 <memset@plt>
   1f518:	ldr	r5, [fp, #12]
   1f51c:	mov	r3, r9
   1f520:	ldr	r9, [sp, #20]
   1f524:	mov	sl, r5
   1f528:	b	1efec <__assert_fail@plt+0xd8c4>
   1f52c:	mov	r7, r0
   1f530:	ldr	r0, [sp, #56]	; 0x38
   1f534:	bl	132d4 <__assert_fail@plt+0x1bac>
   1f538:	b	1f46c <__assert_fail@plt+0xdd44>
   1f53c:	mov	r0, #0
   1f540:	mov	r7, #12
   1f544:	str	r0, [sp, #48]	; 0x30
   1f548:	str	r0, [sp, #52]	; 0x34
   1f54c:	str	r7, [fp, #-52]	; 0xffffffcc
   1f550:	b	1f46c <__assert_fail@plt+0xdd44>
   1f554:	mov	r7, r0
   1f558:	b	1f46c <__assert_fail@plt+0xdd44>
   1f55c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f560:	add	fp, sp, #28
   1f564:	sub	sp, sp, #28
   1f568:	str	r0, [sp, #12]
   1f56c:	ldr	r0, [r1, #4]
   1f570:	mov	r4, r1
   1f574:	mov	r1, #0
   1f578:	mov	sl, r3
   1f57c:	mov	r8, r2
   1f580:	str	r1, [sp, #20]
   1f584:	str	r0, [sp, #16]
   1f588:	lsl	r0, r0, #2
   1f58c:	bl	22aa0 <__assert_fail@plt+0x11378>
   1f590:	cmp	r0, #0
   1f594:	str	r0, [sp, #24]
   1f598:	beq	1f68c <__assert_fail@plt+0xdf64>
   1f59c:	ldr	r0, [r4, #4]
   1f5a0:	cmp	r0, #1
   1f5a4:	blt	1f654 <__assert_fail@plt+0xdf2c>
   1f5a8:	mov	r9, #0
   1f5ac:	str	r4, [sp, #8]
   1f5b0:	b	1f5d4 <__assert_fail@plt+0xdeac>
   1f5b4:	cmn	r4, #1
   1f5b8:	beq	1f630 <__assert_fail@plt+0xdf08>
   1f5bc:	ldr	r0, [sp, #12]
   1f5c0:	add	r1, sp, #16
   1f5c4:	mov	r3, r8
   1f5c8:	str	sl, [sp]
   1f5cc:	bl	1f978 <__assert_fail@plt+0xe250>
   1f5d0:	b	1f638 <__assert_fail@plt+0xdf10>
   1f5d4:	ldr	r0, [r4, #8]
   1f5d8:	ldr	r1, [sp, #12]
   1f5dc:	ldr	r2, [r0, r9, lsl #2]
   1f5e0:	ldr	r1, [r1, #24]
   1f5e4:	add	r0, r2, r2, lsl #1
   1f5e8:	add	r1, r1, r0, lsl #2
   1f5ec:	ldr	r0, [r1, #4]
   1f5f0:	cmp	r0, #1
   1f5f4:	blt	1f630 <__assert_fail@plt+0xdf08>
   1f5f8:	ldr	r7, [sp, #12]
   1f5fc:	ldr	r3, [r1, #8]
   1f600:	mov	r6, #0
   1f604:	ldr	r7, [r7]
   1f608:	ldr	r4, [r3, r6, lsl #2]
   1f60c:	add	r5, r7, r4, lsl #3
   1f610:	ldrb	r5, [r5, #4]
   1f614:	cmp	r5, sl
   1f618:	ldreq	r5, [r7, r4, lsl #3]
   1f61c:	cmpeq	r5, r8
   1f620:	beq	1f5b4 <__assert_fail@plt+0xde8c>
   1f624:	add	r6, r6, #1
   1f628:	cmp	r6, r0
   1f62c:	blt	1f608 <__assert_fail@plt+0xdee0>
   1f630:	add	r0, sp, #16
   1f634:	bl	1cef0 <__assert_fail@plt+0xb7c8>
   1f638:	cmp	r0, #0
   1f63c:	bne	1f67c <__assert_fail@plt+0xdf54>
   1f640:	ldr	r4, [sp, #8]
   1f644:	add	r9, r9, #1
   1f648:	ldr	r0, [r4, #4]
   1f64c:	cmp	r9, r0
   1f650:	blt	1f5d4 <__assert_fail@plt+0xdeac>
   1f654:	ldr	r0, [r4, #8]
   1f658:	bl	132d4 <__assert_fail@plt+0x1bac>
   1f65c:	vldr	d16, [sp, #16]
   1f660:	ldr	r0, [sp, #24]
   1f664:	mov	r7, #0
   1f668:	str	r0, [r4, #8]
   1f66c:	vstr	d16, [r4]
   1f670:	mov	r0, r7
   1f674:	sub	sp, fp, #28
   1f678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f67c:	mov	r7, r0
   1f680:	ldr	r0, [sp, #24]
   1f684:	bl	132d4 <__assert_fail@plt+0x1bac>
   1f688:	b	1f670 <__assert_fail@plt+0xdf48>
   1f68c:	mov	r7, #12
   1f690:	b	1f670 <__assert_fail@plt+0xdf48>
   1f694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f698:	add	fp, sp, #28
   1f69c:	sub	sp, sp, #44	; 0x2c
   1f6a0:	ldr	r6, [r0, #84]	; 0x54
   1f6a4:	mov	r4, r1
   1f6a8:	mov	r1, r2
   1f6ac:	str	r3, [sp, #4]
   1f6b0:	mov	r5, r2
   1f6b4:	str	r0, [sp, #24]
   1f6b8:	bl	1ed30 <__assert_fail@plt+0xd608>
   1f6bc:	cmn	r0, #1
   1f6c0:	beq	1f96c <__assert_fail@plt+0xe244>
   1f6c4:	add	r1, r0, r0, lsl #1
   1f6c8:	str	r5, [sp, #16]
   1f6cc:	str	r6, [sp, #12]
   1f6d0:	str	r4, [sp, #8]
   1f6d4:	str	r1, [sp]
   1f6d8:	b	1f6e0 <__assert_fail@plt+0xdfb8>
   1f6dc:	ldr	r1, [sp]
   1f6e0:	ldr	r0, [sp, #24]
   1f6e4:	ldr	r0, [r0, #116]	; 0x74
   1f6e8:	add	r0, r0, r1, lsl #3
   1f6ec:	add	r0, r0, #8
   1f6f0:	ldr	r7, [r0, #-8]
   1f6f4:	mov	sl, r0
   1f6f8:	mov	r0, r4
   1f6fc:	mov	r1, r7
   1f700:	bl	1d31c <__assert_fail@plt+0xbbf4>
   1f704:	cmp	r0, #0
   1f708:	beq	1f8d0 <__assert_fail@plt+0xe1a8>
   1f70c:	ldm	sl, {r0, r1}
   1f710:	add	r1, r1, r5
   1f714:	sub	r9, r1, r0
   1f718:	cmp	r9, r5
   1f71c:	bne	1f7c4 <__assert_fail@plt+0xe09c>
   1f720:	ldr	r0, [r6, #20]
   1f724:	add	r1, r7, r7, lsl #1
   1f728:	add	r0, r0, r1, lsl #2
   1f72c:	ldr	r0, [r0, #8]
   1f730:	ldr	r7, [r0]
   1f734:	mov	r0, r4
   1f738:	mov	r1, r7
   1f73c:	bl	1d31c <__assert_fail@plt+0xbbf4>
   1f740:	mov	r1, #4
   1f744:	cmp	r0, #0
   1f748:	bne	1f7bc <__assert_fail@plt+0xe094>
   1f74c:	mov	r0, #1
   1f750:	str	r0, [sp, #32]
   1f754:	str	r0, [sp, #28]
   1f758:	mov	r0, #4
   1f75c:	bl	22aa0 <__assert_fail@plt+0x11378>
   1f760:	cmp	r0, #0
   1f764:	str	r0, [sp, #36]	; 0x24
   1f768:	beq	1f8e4 <__assert_fail@plt+0xe1bc>
   1f76c:	mov	r5, #0
   1f770:	str	r7, [r0]
   1f774:	ldr	r2, [sp, #4]
   1f778:	ldr	r3, [fp, #8]
   1f77c:	add	r7, sp, #28
   1f780:	mov	r0, r6
   1f784:	str	r5, [fp, #-32]	; 0xffffffe0
   1f788:	mov	r1, r7
   1f78c:	bl	1f55c <__assert_fail@plt+0xde34>
   1f790:	mov	r9, r0
   1f794:	mov	r0, r4
   1f798:	mov	r1, r7
   1f79c:	bl	1cef0 <__assert_fail@plt+0xb7c8>
   1f7a0:	mov	r8, r0
   1f7a4:	ldr	r0, [sp, #36]	; 0x24
   1f7a8:	bl	132d4 <__assert_fail@plt+0x1bac>
   1f7ac:	orr	r0, r9, r5
   1f7b0:	mov	r1, #2
   1f7b4:	orrs	r0, r0, r8
   1f7b8:	bne	1f8f8 <__assert_fail@plt+0xe1d0>
   1f7bc:	ldr	r5, [sp, #16]
   1f7c0:	b	1f8c4 <__assert_fail@plt+0xe19c>
   1f7c4:	ldr	r0, [sp, #24]
   1f7c8:	ldr	r1, [r6, #12]
   1f7cc:	ldr	r0, [r0, #100]	; 0x64
   1f7d0:	ldr	r8, [r1, r7, lsl #2]
   1f7d4:	ldr	r0, [r0, r9, lsl #2]
   1f7d8:	cmp	r0, #0
   1f7dc:	beq	1f804 <__assert_fail@plt+0xe0dc>
   1f7e0:	add	r4, r0, #4
   1f7e4:	mov	r1, r8
   1f7e8:	mov	r0, r4
   1f7ec:	bl	1d31c <__assert_fail@plt+0xbbf4>
   1f7f0:	mov	r1, #4
   1f7f4:	cmp	r0, #0
   1f7f8:	beq	1f834 <__assert_fail@plt+0xe10c>
   1f7fc:	ldr	r6, [sp, #12]
   1f800:	b	1f8c0 <__assert_fail@plt+0xe198>
   1f804:	mov	r0, #1
   1f808:	str	r0, [sp, #32]
   1f80c:	str	r0, [sp, #28]
   1f810:	mov	r0, #4
   1f814:	bl	22aa0 <__assert_fail@plt+0x11378>
   1f818:	cmp	r0, #0
   1f81c:	str	r0, [sp, #36]	; 0x24
   1f820:	beq	1f918 <__assert_fail@plt+0xe1f0>
   1f824:	str	r8, [r0]
   1f828:	mov	r0, #0
   1f82c:	str	r0, [fp, #-32]	; 0xffffffe0
   1f830:	b	1f868 <__assert_fail@plt+0xe140>
   1f834:	add	r6, sp, #28
   1f838:	mov	r1, r4
   1f83c:	mov	r0, r6
   1f840:	bl	1d2a0 <__assert_fail@plt+0xbb78>
   1f844:	mov	r4, r0
   1f848:	str	r0, [fp, #-32]	; 0xffffffe0
   1f84c:	mov	r0, r6
   1f850:	mov	r1, r8
   1f854:	bl	1d104 <__assert_fail@plt+0xb9dc>
   1f858:	cmp	r4, #0
   1f85c:	bne	1f93c <__assert_fail@plt+0xe214>
   1f860:	cmp	r0, #0
   1f864:	beq	1f93c <__assert_fail@plt+0xe214>
   1f868:	ldr	r6, [sp, #12]
   1f86c:	sub	r0, fp, #32
   1f870:	add	r2, sp, #28
   1f874:	mov	r1, r6
   1f878:	bl	1fa7c <__assert_fail@plt+0xe354>
   1f87c:	ldr	r4, [sp, #24]
   1f880:	ldr	r1, [r4, #100]	; 0x64
   1f884:	str	r0, [r1, r9, lsl #2]
   1f888:	ldr	r0, [sp, #36]	; 0x24
   1f88c:	bl	132d4 <__assert_fail@plt+0x1bac>
   1f890:	ldr	r0, [r4, #100]	; 0x64
   1f894:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1f898:	ldr	r0, [r0, r9, lsl #2]
   1f89c:	cmp	r2, #0
   1f8a0:	mov	r1, r2
   1f8a4:	movwne	r1, #1
   1f8a8:	clz	r0, r0
   1f8ac:	lsr	r0, r0, #5
   1f8b0:	ands	r1, r0, r1
   1f8b4:	ldr	r0, [sp, #20]
   1f8b8:	movne	r0, r2
   1f8bc:	str	r0, [sp, #20]
   1f8c0:	ldr	r4, [sp, #8]
   1f8c4:	cmp	r1, #0
   1f8c8:	cmpne	r1, #4
   1f8cc:	bne	1f95c <__assert_fail@plt+0xe234>
   1f8d0:	ldrb	r1, [sl, #12]
   1f8d4:	add	r0, sl, #24
   1f8d8:	cmp	r1, #0
   1f8dc:	bne	1f6f0 <__assert_fail@plt+0xdfc8>
   1f8e0:	b	1f96c <__assert_fail@plt+0xe244>
   1f8e4:	mov	r0, #0
   1f8e8:	mov	r5, #12
   1f8ec:	str	r0, [sp, #28]
   1f8f0:	str	r0, [sp, #32]
   1f8f4:	b	1f774 <__assert_fail@plt+0xe04c>
   1f8f8:	cmp	r9, #0
   1f8fc:	mov	r1, #1
   1f900:	movne	r8, r9
   1f904:	cmp	r5, #0
   1f908:	movne	r8, r5
   1f90c:	str	r8, [fp, #-32]	; 0xffffffe0
   1f910:	str	r8, [sp, #20]
   1f914:	b	1f7bc <__assert_fail@plt+0xe094>
   1f918:	mov	r0, #0
   1f91c:	mov	r1, #12
   1f920:	str	r0, [sp, #28]
   1f924:	str	r0, [sp, #32]
   1f928:	mov	r0, #12
   1f92c:	str	r1, [fp, #-32]	; 0xffffffe0
   1f930:	mov	r1, #1
   1f934:	str	r0, [sp, #20]
   1f938:	b	1f7fc <__assert_fail@plt+0xe0d4>
   1f93c:	ldr	r0, [sp, #36]	; 0x24
   1f940:	bl	132d4 <__assert_fail@plt+0x1bac>
   1f944:	cmp	r4, #0
   1f948:	mov	r1, #1
   1f94c:	movweq	r4, #12
   1f950:	str	r4, [fp, #-32]	; 0xffffffe0
   1f954:	str	r4, [sp, #20]
   1f958:	b	1f7fc <__assert_fail@plt+0xe0d4>
   1f95c:	cmp	r1, #2
   1f960:	beq	1f6dc <__assert_fail@plt+0xdfb4>
   1f964:	ldr	r0, [sp, #20]
   1f968:	b	1f970 <__assert_fail@plt+0xe248>
   1f96c:	mov	r0, #0
   1f970:	sub	sp, fp, #28
   1f974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f978:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f97c:	add	fp, sp, #24
   1f980:	sub	sp, sp, #8
   1f984:	mov	r6, r0
   1f988:	mov	r4, r1
   1f98c:	mov	r0, r1
   1f990:	mov	r1, r2
   1f994:	mov	r5, r3
   1f998:	mov	r7, r2
   1f99c:	bl	1d31c <__assert_fail@plt+0xbbf4>
   1f9a0:	cmp	r0, #0
   1f9a4:	beq	1f9b4 <__assert_fail@plt+0xe28c>
   1f9a8:	mov	r0, #0
   1f9ac:	sub	sp, fp, #24
   1f9b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f9b4:	ldr	r8, [fp, #8]
   1f9b8:	ldr	r0, [r6]
   1f9bc:	add	r1, r0, r7, lsl #3
   1f9c0:	ldrb	r1, [r1, #4]
   1f9c4:	cmp	r1, r8
   1f9c8:	ldreq	r0, [r0, r7, lsl #3]
   1f9cc:	cmpeq	r0, r5
   1f9d0:	beq	1fa58 <__assert_fail@plt+0xe330>
   1f9d4:	mov	r0, r4
   1f9d8:	mov	r1, r7
   1f9dc:	bl	1d104 <__assert_fail@plt+0xb9dc>
   1f9e0:	cmp	r0, #0
   1f9e4:	beq	1fa74 <__assert_fail@plt+0xe34c>
   1f9e8:	ldr	r0, [r6, #20]
   1f9ec:	add	r7, r7, r7, lsl #1
   1f9f0:	add	r1, r0, r7, lsl #2
   1f9f4:	ldr	r2, [r1, #4]
   1f9f8:	cmp	r2, #2
   1f9fc:	beq	1fa0c <__assert_fail@plt+0xe2e4>
   1fa00:	cmp	r2, #0
   1fa04:	bne	1fa34 <__assert_fail@plt+0xe30c>
   1fa08:	b	1f9a8 <__assert_fail@plt+0xe280>
   1fa0c:	ldr	r0, [r1, #8]
   1fa10:	mov	r1, r4
   1fa14:	mov	r3, r5
   1fa18:	ldr	r2, [r0, #4]
   1fa1c:	mov	r0, r6
   1fa20:	str	r8, [sp]
   1fa24:	bl	1f978 <__assert_fail@plt+0xe250>
   1fa28:	cmp	r0, #0
   1fa2c:	bne	1f9ac <__assert_fail@plt+0xe284>
   1fa30:	ldr	r0, [r6, #20]
   1fa34:	add	r0, r0, r7, lsl #2
   1fa38:	ldr	r0, [r0, #8]
   1fa3c:	ldr	r7, [r0]
   1fa40:	mov	r0, r4
   1fa44:	mov	r1, r7
   1fa48:	bl	1d31c <__assert_fail@plt+0xbbf4>
   1fa4c:	cmp	r0, #0
   1fa50:	beq	1f9b8 <__assert_fail@plt+0xe290>
   1fa54:	b	1f9a8 <__assert_fail@plt+0xe280>
   1fa58:	cmp	r8, #9
   1fa5c:	bne	1f9a8 <__assert_fail@plt+0xe280>
   1fa60:	mov	r0, r4
   1fa64:	mov	r1, r7
   1fa68:	bl	1d104 <__assert_fail@plt+0xb9dc>
   1fa6c:	cmp	r0, #0
   1fa70:	bne	1f9a8 <__assert_fail@plt+0xe280>
   1fa74:	mov	r0, #12
   1fa78:	b	1f9ac <__assert_fail@plt+0xe284>
   1fa7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa80:	add	fp, sp, #28
   1fa84:	sub	sp, sp, #4
   1fa88:	ldr	sl, [r2, #4]
   1fa8c:	cmp	sl, #0
   1fa90:	beq	1fc44 <__assert_fail@plt+0xe51c>
   1fa94:	mov	r4, r2
   1fa98:	mov	r9, r1
   1fa9c:	cmp	sl, #1
   1faa0:	mov	r6, sl
   1faa4:	str	r0, [sp]
   1faa8:	blt	1fac8 <__assert_fail@plt+0xe3a0>
   1faac:	ldr	r1, [r4, #8]
   1fab0:	mov	r2, sl
   1fab4:	mov	r6, sl
   1fab8:	ldr	r3, [r1], #4
   1fabc:	subs	r2, r2, #1
   1fac0:	add	r6, r3, r6
   1fac4:	bne	1fab8 <__assert_fail@plt+0xe390>
   1fac8:	ldr	r1, [r9, #68]	; 0x44
   1facc:	ldr	r2, [r9, #32]
   1fad0:	and	r1, r1, r6
   1fad4:	add	r3, r1, r1, lsl #1
   1fad8:	ldr	r1, [r2, r3, lsl #2]
   1fadc:	cmp	r1, #1
   1fae0:	blt	1fb54 <__assert_fail@plt+0xe42c>
   1fae4:	add	r2, r2, r3, lsl #2
   1fae8:	sub	ip, sl, #1
   1faec:	mov	r5, #0
   1faf0:	ldr	lr, [r2, #8]
   1faf4:	b	1fb28 <__assert_fail@plt+0xe400>
   1faf8:	mov	r3, ip
   1fafc:	add	r2, r3, #1
   1fb00:	cmp	r2, #1
   1fb04:	blt	1fc38 <__assert_fail@plt+0xe510>
   1fb08:	ldr	r2, [r4, #8]
   1fb0c:	ldr	r0, [r7, #12]
   1fb10:	ldr	r2, [r2, r3, lsl #2]
   1fb14:	ldr	r0, [r0, r3, lsl #2]
   1fb18:	sub	r3, r3, #1
   1fb1c:	cmp	r0, r2
   1fb20:	beq	1fafc <__assert_fail@plt+0xe3d4>
   1fb24:	b	1fb48 <__assert_fail@plt+0xe420>
   1fb28:	cmp	r4, #0
   1fb2c:	beq	1fb48 <__assert_fail@plt+0xe420>
   1fb30:	ldr	r7, [lr, r5, lsl #2]
   1fb34:	ldr	r3, [r7]
   1fb38:	cmp	r6, r3
   1fb3c:	ldreq	r3, [r7, #8]
   1fb40:	cmpeq	r3, sl
   1fb44:	beq	1faf8 <__assert_fail@plt+0xe3d0>
   1fb48:	add	r5, r5, #1
   1fb4c:	cmp	r5, r1
   1fb50:	blt	1fb28 <__assert_fail@plt+0xe400>
   1fb54:	mov	r0, #56	; 0x38
   1fb58:	mov	r1, #1
   1fb5c:	bl	22a4c <__assert_fail@plt+0x11324>
   1fb60:	cmp	r0, #0
   1fb64:	beq	1fc64 <__assert_fail@plt+0xe53c>
   1fb68:	add	r5, r0, #4
   1fb6c:	mov	r7, r0
   1fb70:	mov	r1, r4
   1fb74:	mov	r0, r5
   1fb78:	bl	1d2a0 <__assert_fail@plt+0xbb78>
   1fb7c:	cmp	r0, #0
   1fb80:	bne	1fc50 <__assert_fail@plt+0xe528>
   1fb84:	str	r5, [r7, #40]	; 0x28
   1fb88:	ldr	r0, [r4, #4]
   1fb8c:	cmp	r0, #1
   1fb90:	blt	1fc20 <__assert_fail@plt+0xe4f8>
   1fb94:	ldr	r1, [r4, #8]
   1fb98:	ldr	sl, [r9]
   1fb9c:	movw	ip, #65280	; 0xff00
   1fba0:	mov	lr, #32
   1fba4:	movt	ip, #3
   1fba8:	add	r5, ip, #255	; 0xff
   1fbac:	ldr	r2, [r1]
   1fbb0:	add	r3, sl, r2, lsl #3
   1fbb4:	ldr	r2, [r3, #4]!
   1fbb8:	and	r4, r2, r5
   1fbbc:	cmp	r4, #1
   1fbc0:	beq	1fc14 <__assert_fail@plt+0xe4ec>
   1fbc4:	ldrb	r8, [r7, #52]	; 0x34
   1fbc8:	and	r4, lr, r2, lsr #15
   1fbcc:	uxtb	r2, r2
   1fbd0:	cmp	r2, #12
   1fbd4:	orr	r4, r8, r4
   1fbd8:	strb	r4, [r7, #52]	; 0x34
   1fbdc:	beq	1fc0c <__assert_fail@plt+0xe4e4>
   1fbe0:	cmp	r2, #4
   1fbe4:	beq	1fbf8 <__assert_fail@plt+0xe4d0>
   1fbe8:	cmp	r2, #2
   1fbec:	bne	1fc00 <__assert_fail@plt+0xe4d8>
   1fbf0:	orr	r2, r4, #16
   1fbf4:	b	1fc10 <__assert_fail@plt+0xe4e8>
   1fbf8:	orr	r2, r4, #64	; 0x40
   1fbfc:	b	1fc10 <__assert_fail@plt+0xe4e8>
   1fc00:	ldr	r2, [r3]
   1fc04:	tst	r2, ip
   1fc08:	beq	1fc14 <__assert_fail@plt+0xe4ec>
   1fc0c:	orr	r2, r4, #128	; 0x80
   1fc10:	strb	r2, [r7, #52]	; 0x34
   1fc14:	add	r1, r1, #4
   1fc18:	subs	r0, r0, #1
   1fc1c:	bne	1fbac <__assert_fail@plt+0xe484>
   1fc20:	mov	r0, r9
   1fc24:	mov	r1, r7
   1fc28:	mov	r2, r6
   1fc2c:	bl	1d6bc <__assert_fail@plt+0xbf94>
   1fc30:	cmp	r0, #0
   1fc34:	bne	1fc5c <__assert_fail@plt+0xe534>
   1fc38:	mov	r0, r7
   1fc3c:	sub	sp, fp, #28
   1fc40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc44:	mov	r7, #0
   1fc48:	str	r7, [r0]
   1fc4c:	b	1fc38 <__assert_fail@plt+0xe510>
   1fc50:	mov	r0, r7
   1fc54:	bl	132d4 <__assert_fail@plt+0x1bac>
   1fc58:	b	1fc64 <__assert_fail@plt+0xe53c>
   1fc5c:	mov	r0, r7
   1fc60:	bl	187ec <__assert_fail@plt+0x70c4>
   1fc64:	ldr	r1, [sp]
   1fc68:	mov	r0, #12
   1fc6c:	mov	r7, #0
   1fc70:	str	r0, [r1]
   1fc74:	b	1fc38 <__assert_fail@plt+0xe510>
   1fc78:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fc7c:	add	fp, sp, #24
   1fc80:	ldr	lr, [r0]
   1fc84:	add	r7, lr, r1, lsl #3
   1fc88:	ldrb	r9, [r7, #4]
   1fc8c:	cmp	r9, #7
   1fc90:	beq	1fe60 <__assert_fail@plt+0xe738>
   1fc94:	ldr	ip, [r2, #80]	; 0x50
   1fc98:	mov	r6, #1
   1fc9c:	cmp	ip, #1
   1fca0:	beq	1fcdc <__assert_fail@plt+0xe5b4>
   1fca4:	ldr	r5, [r2, #28]
   1fca8:	add	r7, r3, #1
   1fcac:	cmp	r7, r5
   1fcb0:	bge	1fcdc <__assert_fail@plt+0xe5b4>
   1fcb4:	ldr	r6, [r2, #8]
   1fcb8:	add	r7, r6, r3, lsl #2
   1fcbc:	mov	r6, #1
   1fcc0:	ldr	r4, [r7, r6, lsl #2]
   1fcc4:	cmn	r4, #1
   1fcc8:	bne	1fcdc <__assert_fail@plt+0xe5b4>
   1fccc:	add	r6, r6, #1
   1fcd0:	add	r4, r3, r6
   1fcd4:	cmp	r4, r5
   1fcd8:	blt	1fcc0 <__assert_fail@plt+0xe598>
   1fcdc:	mov	r8, #0
   1fce0:	cmp	r9, #5
   1fce4:	bne	1fd28 <__assert_fail@plt+0xe600>
   1fce8:	cmp	r6, #2
   1fcec:	blt	1fe50 <__assert_fail@plt+0xe728>
   1fcf0:	ldr	r0, [r0, #128]	; 0x80
   1fcf4:	tst	r0, #64	; 0x40
   1fcf8:	bne	1fd0c <__assert_fail@plt+0xe5e4>
   1fcfc:	ldr	r1, [r2, #4]
   1fd00:	ldrb	r1, [r1, r3]
   1fd04:	cmp	r1, #10
   1fd08:	beq	1fe50 <__assert_fail@plt+0xe728>
   1fd0c:	tst	r0, #128	; 0x80
   1fd10:	beq	1fe4c <__assert_fail@plt+0xe724>
   1fd14:	ldr	r0, [r2, #4]
   1fd18:	ldrb	r0, [r0, r3]
   1fd1c:	cmp	r0, #0
   1fd20:	movne	r8, r6
   1fd24:	b	1fe50 <__assert_fail@plt+0xe728>
   1fd28:	cmp	r9, #6
   1fd2c:	bne	1fe50 <__assert_fail@plt+0xe728>
   1fd30:	cmp	r6, #2
   1fd34:	blt	1fe50 <__assert_fail@plt+0xe728>
   1fd38:	ldr	r7, [lr, r1, lsl #3]
   1fd3c:	ldr	r0, [r7, #32]
   1fd40:	cmp	r0, #0
   1fd44:	bne	1fd60 <__assert_fail@plt+0xe638>
   1fd48:	ldr	r1, [r7, #36]	; 0x24
   1fd4c:	cmp	r1, #0
   1fd50:	bne	1fd60 <__assert_fail@plt+0xe638>
   1fd54:	ldr	r1, [r7, #20]
   1fd58:	cmp	r1, #0
   1fd5c:	beq	1fe58 <__assert_fail@plt+0xe730>
   1fd60:	cmp	ip, #1
   1fd64:	bne	1fd74 <__assert_fail@plt+0xe64c>
   1fd68:	ldr	r1, [r2, #4]
   1fd6c:	ldrb	r5, [r1, r3]
   1fd70:	b	1fd7c <__assert_fail@plt+0xe654>
   1fd74:	ldr	r1, [r2, #8]
   1fd78:	ldr	r5, [r1, r3, lsl #2]
   1fd7c:	ldr	r1, [r7, #20]
   1fd80:	cmp	r1, #1
   1fd84:	blt	1fda8 <__assert_fail@plt+0xe680>
   1fd88:	ldr	r2, [r7]
   1fd8c:	mov	r3, #0
   1fd90:	ldr	r4, [r2, r3, lsl #2]
   1fd94:	cmp	r5, r4
   1fd98:	beq	1fe24 <__assert_fail@plt+0xe6fc>
   1fd9c:	add	r3, r3, #1
   1fda0:	cmp	r3, r1
   1fda4:	blt	1fd90 <__assert_fail@plt+0xe668>
   1fda8:	ldr	r1, [r7, #36]	; 0x24
   1fdac:	cmp	r1, #1
   1fdb0:	blt	1fde4 <__assert_fail@plt+0xe6bc>
   1fdb4:	mov	r4, #0
   1fdb8:	ldr	r0, [r7, #12]
   1fdbc:	ldr	r1, [r0, r4, lsl #2]
   1fdc0:	mov	r0, r5
   1fdc4:	bl	113e0 <iswctype@plt>
   1fdc8:	cmp	r0, #0
   1fdcc:	bne	1fe24 <__assert_fail@plt+0xe6fc>
   1fdd0:	ldr	r0, [r7, #36]	; 0x24
   1fdd4:	add	r4, r4, #1
   1fdd8:	cmp	r4, r0
   1fddc:	blt	1fdb8 <__assert_fail@plt+0xe690>
   1fde0:	ldr	r0, [r7, #32]
   1fde4:	cmp	r0, #1
   1fde8:	blt	1fe1c <__assert_fail@plt+0xe6f4>
   1fdec:	ldr	r1, [r7, #4]
   1fdf0:	mov	r2, #0
   1fdf4:	ldr	r3, [r1, r2, lsl #2]
   1fdf8:	cmp	r3, r5
   1fdfc:	bhi	1fe10 <__assert_fail@plt+0xe6e8>
   1fe00:	ldr	r3, [r7, #8]
   1fe04:	ldr	r3, [r3, r2, lsl #2]
   1fe08:	cmp	r5, r3
   1fe0c:	bls	1fe24 <__assert_fail@plt+0xe6fc>
   1fe10:	add	r2, r2, #1
   1fe14:	cmp	r2, r0
   1fe18:	blt	1fdf4 <__assert_fail@plt+0xe6cc>
   1fe1c:	mov	r0, #0
   1fe20:	b	1fe28 <__assert_fail@plt+0xe700>
   1fe24:	mov	r0, r6
   1fe28:	ldrb	r1, [r7, #16]
   1fe2c:	tst	r1, #1
   1fe30:	bne	1fe3c <__assert_fail@plt+0xe714>
   1fe34:	mov	r8, r0
   1fe38:	b	1fe50 <__assert_fail@plt+0xe728>
   1fe3c:	cmp	r0, #0
   1fe40:	bgt	1fe50 <__assert_fail@plt+0xe728>
   1fe44:	cmp	r6, #1
   1fe48:	movle	r6, #1
   1fe4c:	mov	r8, r6
   1fe50:	mov	r0, r8
   1fe54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fe58:	mov	r5, #0
   1fe5c:	b	1fd7c <__assert_fail@plt+0xe654>
   1fe60:	ldr	r0, [r2, #4]
   1fe64:	mov	r8, #0
   1fe68:	ldrb	r6, [r0, r3]
   1fe6c:	cmp	r6, #194	; 0xc2
   1fe70:	bcc	1fe50 <__assert_fail@plt+0xe728>
   1fe74:	ldr	r1, [r2, #48]	; 0x30
   1fe78:	add	r2, r3, #2
   1fe7c:	cmp	r2, r1
   1fe80:	bgt	1fe50 <__assert_fail@plt+0xe728>
   1fe84:	add	r0, r0, r3
   1fe88:	cmp	r6, #223	; 0xdf
   1fe8c:	ldrb	r7, [r0, #1]
   1fe90:	bhi	1feb0 <__assert_fail@plt+0xe788>
   1fe94:	mov	r8, #2
   1fe98:	cmp	r7, #191	; 0xbf
   1fe9c:	sxtb	r0, r7
   1fea0:	movwhi	r8, #0
   1fea4:	cmn	r0, #1
   1fea8:	movwgt	r8, #0
   1feac:	b	1fe50 <__assert_fail@plt+0xe728>
   1feb0:	cmp	r6, #239	; 0xef
   1feb4:	bhi	1fed0 <__assert_fail@plt+0xe7a8>
   1feb8:	mov	r2, #3
   1febc:	cmp	r6, #224	; 0xe0
   1fec0:	bne	1ff2c <__assert_fail@plt+0xe804>
   1fec4:	cmp	r7, #160	; 0xa0
   1fec8:	bcc	1fe50 <__assert_fail@plt+0xe728>
   1fecc:	b	1ff2c <__assert_fail@plt+0xe804>
   1fed0:	cmp	r6, #247	; 0xf7
   1fed4:	bhi	1fef0 <__assert_fail@plt+0xe7c8>
   1fed8:	mov	r2, #4
   1fedc:	cmp	r6, #240	; 0xf0
   1fee0:	bne	1ff2c <__assert_fail@plt+0xe804>
   1fee4:	cmp	r7, #144	; 0x90
   1fee8:	bcc	1fe50 <__assert_fail@plt+0xe728>
   1feec:	b	1ff2c <__assert_fail@plt+0xe804>
   1fef0:	cmp	r6, #251	; 0xfb
   1fef4:	bhi	1ff10 <__assert_fail@plt+0xe7e8>
   1fef8:	mov	r2, #5
   1fefc:	cmp	r6, #248	; 0xf8
   1ff00:	bne	1ff2c <__assert_fail@plt+0xe804>
   1ff04:	cmp	r7, #136	; 0x88
   1ff08:	bcc	1fe50 <__assert_fail@plt+0xe728>
   1ff0c:	b	1ff2c <__assert_fail@plt+0xe804>
   1ff10:	cmp	r6, #253	; 0xfd
   1ff14:	bhi	1fe50 <__assert_fail@plt+0xe728>
   1ff18:	mov	r2, #6
   1ff1c:	cmp	r6, #252	; 0xfc
   1ff20:	bne	1ff2c <__assert_fail@plt+0xe804>
   1ff24:	cmp	r7, #132	; 0x84
   1ff28:	bcc	1fe50 <__assert_fail@plt+0xe728>
   1ff2c:	add	r3, r2, r3
   1ff30:	cmp	r3, r1
   1ff34:	bgt	1fe50 <__assert_fail@plt+0xe728>
   1ff38:	mov	r1, #1
   1ff3c:	ldrb	r3, [r0, r1]
   1ff40:	sxtb	r7, r3
   1ff44:	cmn	r7, #1
   1ff48:	bgt	1fe50 <__assert_fail@plt+0xe728>
   1ff4c:	cmp	r3, #191	; 0xbf
   1ff50:	bhi	1fe50 <__assert_fail@plt+0xe728>
   1ff54:	add	r1, r1, #1
   1ff58:	cmp	r1, r2
   1ff5c:	bcc	1ff3c <__assert_fail@plt+0xe814>
   1ff60:	mov	r8, r2
   1ff64:	b	1fe50 <__assert_fail@plt+0xe728>
   1ff68:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ff6c:	add	fp, sp, #24
   1ff70:	ldr	r5, [r1, #4]
   1ff74:	mvn	r3, #0
   1ff78:	mov	r8, #0
   1ff7c:	uxtab	r4, r3, r5
   1ff80:	cmp	r4, #6
   1ff84:	bhi	20094 <__assert_fail@plt+0xe96c>
   1ff88:	ldr	r3, [r0, #4]
   1ff8c:	ldrb	r3, [r3, r2]
   1ff90:	add	r7, pc, #4
   1ff94:	sxtb	r6, r3
   1ff98:	ldr	pc, [r7, r4, lsl #2]
   1ff9c:			; <UNDEFINED> instruction: 0x0001ffb8
   1ffa0:	muleq	r2, r4, r0
   1ffa4:	andeq	pc, r1, ip, asr #31
   1ffa8:	muleq	r2, r4, r0
   1ffac:	strdeq	pc, [r1], -r4
   1ffb0:	muleq	r2, r4, r0
   1ffb4:	andeq	pc, r1, ip, ror #31
   1ffb8:	ldrb	r1, [r1]
   1ffbc:	uxtb	r3, r6
   1ffc0:	cmp	r1, r3
   1ffc4:	beq	20028 <__assert_fail@plt+0xe900>
   1ffc8:	b	20094 <__assert_fail@plt+0xe96c>
   1ffcc:	ldr	r1, [r1]
   1ffd0:	ubfx	r7, r3, #5, #3
   1ffd4:	and	r3, r3, #31
   1ffd8:	ldr	r1, [r1, r7, lsl #2]
   1ffdc:	mov	r7, #1
   1ffe0:	tst	r1, r7, lsl r3
   1ffe4:	bne	20028 <__assert_fail@plt+0xe900>
   1ffe8:	b	20094 <__assert_fail@plt+0xe96c>
   1ffec:	cmp	r6, #0
   1fff0:	blt	20094 <__assert_fail@plt+0xe96c>
   1fff4:	cmp	r3, #0
   1fff8:	beq	20018 <__assert_fail@plt+0xe8f0>
   1fffc:	cmp	r3, #10
   20000:	bne	20028 <__assert_fail@plt+0xe900>
   20004:	ldr	r1, [r0, #84]	; 0x54
   20008:	ldrb	r1, [r1, #128]	; 0x80
   2000c:	tst	r1, #64	; 0x40
   20010:	bne	20028 <__assert_fail@plt+0xe900>
   20014:	b	20094 <__assert_fail@plt+0xe96c>
   20018:	ldr	r1, [r0, #84]	; 0x54
   2001c:	ldrb	r1, [r1, #128]	; 0x80
   20020:	tst	r1, #128	; 0x80
   20024:	bne	20094 <__assert_fail@plt+0xe96c>
   20028:	movw	r1, #65280	; 0xff00
   2002c:	movt	r1, #3
   20030:	tst	r5, r1
   20034:	beq	20090 <__assert_fail@plt+0xe968>
   20038:	ldr	r3, [r0, #88]	; 0x58
   2003c:	mov	r1, r2
   20040:	mov	r2, r3
   20044:	bl	1dff0 <__assert_fail@plt+0xc8c8>
   20048:	and	r1, r0, #1
   2004c:	tst	r5, #1024	; 0x400
   20050:	beq	2005c <__assert_fail@plt+0xe934>
   20054:	cmp	r1, #0
   20058:	beq	20094 <__assert_fail@plt+0xe96c>
   2005c:	tst	r5, #2048	; 0x800
   20060:	cmpne	r1, #0
   20064:	bne	20094 <__assert_fail@plt+0xe96c>
   20068:	tst	r5, #8192	; 0x2000
   2006c:	beq	20078 <__assert_fail@plt+0xe950>
   20070:	ands	r1, r0, #2
   20074:	beq	20094 <__assert_fail@plt+0xe96c>
   20078:	and	r1, r5, #32768	; 0x8000
   2007c:	mov	r2, #1
   20080:	and	r0, r0, #8
   20084:	eor	r1, r2, r1, lsr #15
   20088:	orr	r0, r1, r0, lsr #3
   2008c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20090:	mov	r8, #1
   20094:	mov	r0, r8
   20098:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2009c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   200a0:	add	fp, sp, #28
   200a4:	sub	sp, sp, #4
   200a8:	vpush	{d8-d11}
   200ac:	sub	sp, sp, #2128	; 0x850
   200b0:	sub	sp, sp, #12288	; 0x3000
   200b4:	sub	lr, fp, #1024	; 0x400
   200b8:	mov	r8, #0
   200bc:	vmov.i32	q4, #0	; 0x00000000
   200c0:	sub	r4, lr, #72	; 0x48
   200c4:	str	r8, [r1, #44]	; 0x2c
   200c8:	str	r8, [r1, #48]	; 0x30
   200cc:	mov	r2, r4
   200d0:	vst1.64	{d8-d9}, [r2]!
   200d4:	vst1.64	{d8-d9}, [r2]
   200d8:	ldr	r2, [r1, #8]
   200dc:	cmp	r2, #1
   200e0:	blt	20a94 <__assert_fail@plt+0xf36c>
   200e4:	sub	lr, fp, #2048	; 0x800
   200e8:	add	sl, r0, #96	; 0x60
   200ec:	mov	r3, #0
   200f0:	mov	r8, #0
   200f4:	str	r1, [sp, #12]
   200f8:	str	r0, [sp, #20]
   200fc:	sub	r9, lr, #72	; 0x48
   20100:	str	sl, [sp]
   20104:	ldr	r2, [r1, #12]
   20108:	ldr	r5, [r0]
   2010c:	str	r3, [sp, #16]
   20110:	ldr	r6, [r2, r3, lsl #2]
   20114:	add	r2, r5, r6, lsl #3
   20118:	ldr	r7, [r2, #4]
   2011c:	uxtb	ip, r7
   20120:	cmp	ip, #1
   20124:	bne	201fc <__assert_fail@plt+0xead4>
   20128:	ldrb	r0, [r5, r6, lsl #3]
   2012c:	mov	r3, #1
   20130:	ubfx	r1, r0, #5, #3
   20134:	and	r0, r0, #31
   20138:	ldr	r2, [r4, r1, lsl #2]
   2013c:	orr	r0, r2, r3, lsl r0
   20140:	str	r0, [r4, r1, lsl #2]
   20144:	movw	r0, #65280	; 0xff00
   20148:	sub	lr, fp, #3072	; 0xc00
   2014c:	movt	r0, #3
   20150:	sub	r3, lr, #72	; 0x48
   20154:	ands	r0, r7, r0
   20158:	beq	20430 <__assert_fail@plt+0xed08>
   2015c:	tst	r7, #8192	; 0x2000
   20160:	beq	20184 <__assert_fail@plt+0xea5c>
   20164:	ldr	r0, [fp, #-1096]	; 0xfffffbb8
   20168:	mov	r1, r4
   2016c:	vst1.64	{d8-d9}, [r1]!
   20170:	vst1.64	{d8-d9}, [r1]
   20174:	tst	r0, #1024	; 0x400
   20178:	beq	20384 <__assert_fail@plt+0xec5c>
   2017c:	mov	r0, #1024	; 0x400
   20180:	str	r0, [fp, #-1096]	; 0xfffffbb8
   20184:	tst	r7, #32768	; 0x8000
   20188:	bne	20378 <__assert_fail@plt+0xec50>
   2018c:	tst	r7, #1024	; 0x400
   20190:	beq	20360 <__assert_fail@plt+0xec38>
   20194:	movw	r0, #255	; 0xff
   20198:	movt	r0, #64	; 0x40
   2019c:	and	r0, r7, r0
   201a0:	cmp	r0, #1
   201a4:	beq	20378 <__assert_fail@plt+0xec50>
   201a8:	ldr	r1, [sp, #20]
   201ac:	vmov.i32	q8, #0	; 0x00000000
   201b0:	ldr	r0, [r1, #92]	; 0x5c
   201b4:	cmp	r0, #1
   201b8:	ble	20310 <__assert_fail@plt+0xebe8>
   201bc:	ldr	r0, [r1, #60]	; 0x3c
   201c0:	mov	r1, #0
   201c4:	add	r2, sl, r1
   201c8:	add	r3, r0, r1
   201cc:	vld1.32	{d20-d21}, [r2]
   201d0:	vld1.32	{d18-d19}, [r3]
   201d4:	add	r2, r4, r1
   201d8:	add	r1, r1, #16
   201dc:	vld1.32	{d22-d23}, [r2]
   201e0:	cmp	r1, #32
   201e4:	vorn	q9, q10, q9
   201e8:	vand	q9, q11, q9
   201ec:	vorr	q8, q9, q8
   201f0:	vst1.32	{d18-d19}, [r2]
   201f4:	bne	201c4 <__assert_fail@plt+0xea9c>
   201f8:	b	2033c <__assert_fail@plt+0xec14>
   201fc:	cmp	ip, #7
   20200:	beq	20244 <__assert_fail@plt+0xeb1c>
   20204:	cmp	ip, #5
   20208:	beq	20290 <__assert_fail@plt+0xeb68>
   2020c:	cmp	ip, #3
   20210:	bne	20694 <__assert_fail@plt+0xef6c>
   20214:	ldr	r0, [r5, r6, lsl #3]
   20218:	mov	r1, #0
   2021c:	add	r2, r4, r1
   20220:	add	r3, r0, r1
   20224:	add	r1, r1, #16
   20228:	vld1.32	{d16-d17}, [r3]
   2022c:	vld1.32	{d18-d19}, [r2]
   20230:	cmp	r1, #32
   20234:	vorr	q8, q9, q8
   20238:	vst1.32	{d16-d17}, [r2]
   2023c:	bne	2021c <__assert_fail@plt+0xeaf4>
   20240:	b	20144 <__assert_fail@plt+0xea1c>
   20244:	mvn	r1, #0
   20248:	str	r1, [fp, #-1084]	; 0xfffffbc4
   2024c:	str	r1, [fp, #-1088]	; 0xfffffbc0
   20250:	str	r1, [fp, #-1092]	; 0xfffffbbc
   20254:	str	r1, [fp, #-1096]	; 0xfffffbb8
   20258:	ldr	r1, [r0, #128]	; 0x80
   2025c:	and	r0, r1, #128	; 0x80
   20260:	ands	r1, r1, #64	; 0x40
   20264:	beq	20270 <__assert_fail@plt+0xeb48>
   20268:	cmp	r0, #0
   2026c:	beq	20144 <__assert_fail@plt+0xea1c>
   20270:	cmp	r1, #0
   20274:	mvn	r1, #1
   20278:	movweq	r1, #64510	; 0xfbfe
   2027c:	movteq	r1, #65535	; 0xffff
   20280:	cmp	r0, #0
   20284:	mvneq	r1, #1024	; 0x400
   20288:	str	r1, [fp, #-1096]	; 0xfffffbb8
   2028c:	b	20144 <__assert_fail@plt+0xea1c>
   20290:	ldr	r1, [r0, #92]	; 0x5c
   20294:	cmp	r1, #2
   20298:	blt	202cc <__assert_fail@plt+0xeba4>
   2029c:	ldr	r0, [r0, #60]	; 0x3c
   202a0:	mov	r1, #0
   202a4:	add	r2, r4, r1
   202a8:	add	r3, r0, r1
   202ac:	add	r1, r1, #16
   202b0:	vld1.32	{d16-d17}, [r3]
   202b4:	vld1.32	{d18-d19}, [r2]
   202b8:	cmp	r1, #32
   202bc:	vorr	q8, q9, q8
   202c0:	vst1.32	{d16-d17}, [r2]
   202c4:	bne	202a4 <__assert_fail@plt+0xeb7c>
   202c8:	b	202e4 <__assert_fail@plt+0xebbc>
   202cc:	mov	r0, r4
   202d0:	mov	r1, #255	; 0xff
   202d4:	mov	r2, #32
   202d8:	str	ip, [sp, #8]
   202dc:	bl	11620 <memset@plt>
   202e0:	ldr	ip, [sp, #8]
   202e4:	ldr	r0, [sp, #20]
   202e8:	ldr	r0, [r0, #128]	; 0x80
   202ec:	tst	r0, #64	; 0x40
   202f0:	ldreq	r1, [fp, #-1096]	; 0xfffffbb8
   202f4:	biceq	r1, r1, #1024	; 0x400
   202f8:	streq	r1, [fp, #-1096]	; 0xfffffbb8
   202fc:	tst	r0, #128	; 0x80
   20300:	ldrne	r0, [fp, #-1096]	; 0xfffffbb8
   20304:	bicne	r0, r0, #1
   20308:	strne	r0, [fp, #-1096]	; 0xfffffbb8
   2030c:	b	20144 <__assert_fail@plt+0xea1c>
   20310:	mov	r0, #0
   20314:	add	r1, r4, r0
   20318:	add	r2, sl, r0
   2031c:	add	r0, r0, #16
   20320:	vld1.32	{d18-d19}, [r2]
   20324:	vld1.32	{d20-d21}, [r1]
   20328:	cmp	r0, #32
   2032c:	vand	q9, q10, q9
   20330:	vorr	q8, q9, q8
   20334:	vst1.32	{d18-d19}, [r1]
   20338:	bne	20314 <__assert_fail@plt+0xebec>
   2033c:	vext.8	q9, q8, q8, #8
   20340:	sub	lr, fp, #3072	; 0xc00
   20344:	vorr	q8, q8, q9
   20348:	sub	r3, lr, #72	; 0x48
   2034c:	vdup.32	q9, d16[1]
   20350:	vorr	q8, q8, q9
   20354:	vmov.32	r0, d16[0]
   20358:	cmp	r0, #0
   2035c:	beq	20384 <__assert_fail@plt+0xec5c>
   20360:	tst	r7, #2048	; 0x800
   20364:	beq	20430 <__assert_fail@plt+0xed08>
   20368:	tst	r7, #4194304	; 0x400000
   2036c:	beq	2038c <__assert_fail@plt+0xec64>
   20370:	cmp	ip, #1
   20374:	bne	2038c <__assert_fail@plt+0xec64>
   20378:	mov	r0, r4
   2037c:	vst1.64	{d8-d9}, [r0]!
   20380:	vst1.64	{d8-d9}, [r0]
   20384:	ldr	r1, [sp, #12]
   20388:	b	20694 <__assert_fail@plt+0xef6c>
   2038c:	ldr	r1, [sp, #20]
   20390:	vmov.i32	q8, #0	; 0x00000000
   20394:	ldr	r0, [r1, #92]	; 0x5c
   20398:	cmp	r0, #1
   2039c:	ble	203e0 <__assert_fail@plt+0xecb8>
   203a0:	ldr	r0, [r1, #60]	; 0x3c
   203a4:	mov	r1, #0
   203a8:	add	r2, r0, r1
   203ac:	add	r3, sl, r1
   203b0:	vld1.32	{d20-d21}, [r2]
   203b4:	vld1.32	{d18-d19}, [r3]
   203b8:	add	r2, r4, r1
   203bc:	add	r1, r1, #16
   203c0:	vld1.32	{d22-d23}, [r2]
   203c4:	cmp	r1, #32
   203c8:	vand	q9, q10, q9
   203cc:	vbic	q9, q11, q9
   203d0:	vorr	q8, q9, q8
   203d4:	vst1.32	{d18-d19}, [r2]
   203d8:	bne	203a8 <__assert_fail@plt+0xec80>
   203dc:	b	2040c <__assert_fail@plt+0xece4>
   203e0:	mov	r0, #0
   203e4:	add	r1, r4, r0
   203e8:	add	r2, sl, r0
   203ec:	add	r0, r0, #16
   203f0:	vld1.32	{d18-d19}, [r2]
   203f4:	vld1.32	{d20-d21}, [r1]
   203f8:	cmp	r0, #32
   203fc:	vbic	q9, q10, q9
   20400:	vorr	q8, q9, q8
   20404:	vst1.32	{d18-d19}, [r1]
   20408:	bne	203e4 <__assert_fail@plt+0xecbc>
   2040c:	vext.8	q9, q8, q8, #8
   20410:	sub	lr, fp, #3072	; 0xc00
   20414:	vorr	q8, q8, q9
   20418:	sub	r3, lr, #72	; 0x48
   2041c:	vdup.32	q9, d16[1]
   20420:	vorr	q8, q8, q9
   20424:	vmov.32	r0, d16[0]
   20428:	cmp	r0, #0
   2042c:	beq	20384 <__assert_fail@plt+0xec5c>
   20430:	mov	r7, #0
   20434:	cmp	r8, #1
   20438:	blt	2060c <__assert_fail@plt+0xeee4>
   2043c:	add	sl, sp, #24
   20440:	stmib	sp, {r5, ip}
   20444:	cmp	ip, #1
   20448:	bne	20470 <__assert_fail@plt+0xed48>
   2044c:	ldrb	r1, [r5, r6, lsl #3]
   20450:	add	r0, sp, #24
   20454:	add	r0, r0, r7, lsl #5
   20458:	ubfx	r2, r1, #5, #3
   2045c:	and	r1, r1, #31
   20460:	ldr	r0, [r0, r2, lsl #2]
   20464:	mov	r2, #1
   20468:	tst	r0, r2, lsl r1
   2046c:	beq	205f0 <__assert_fail@plt+0xeec8>
   20470:	vmov.i32	q8, #0	; 0x00000000
   20474:	mov	r0, #0
   20478:	add	r1, sl, r0
   2047c:	add	r2, r4, r0
   20480:	vld1.32	{d20-d21}, [r1]
   20484:	vld1.32	{d18-d19}, [r2]
   20488:	add	r1, r9, r0
   2048c:	add	r0, r0, #16
   20490:	cmp	r0, #32
   20494:	vand	q9, q10, q9
   20498:	vorr	q8, q9, q8
   2049c:	vst1.32	{d18-d19}, [r1]
   204a0:	bne	20478 <__assert_fail@plt+0xed50>
   204a4:	vext.8	q9, q8, q8, #8
   204a8:	vorr	q8, q8, q9
   204ac:	vdup.32	q9, d16[1]
   204b0:	vorr	q8, q8, q9
   204b4:	vmov.32	r0, d16[0]
   204b8:	cmp	r0, #0
   204bc:	beq	205f0 <__assert_fail@plt+0xeec8>
   204c0:	vmov.i32	q5, #0	; 0x00000000
   204c4:	mov	r0, #0
   204c8:	vmov.i32	q8, #0	; 0x00000000
   204cc:	add	r1, r4, r0
   204d0:	add	r2, sl, r0
   204d4:	vld1.32	{d18-d19}, [r2]
   204d8:	vld1.32	{d20-d21}, [r1]
   204dc:	add	r2, r3, r0
   204e0:	add	r0, r0, #16
   204e4:	cmp	r0, #32
   204e8:	vbic	q11, q10, q9
   204ec:	vbic	q9, q9, q10
   204f0:	vorr	q5, q11, q5
   204f4:	vorr	q8, q9, q8
   204f8:	vst1.32	{d18-d19}, [r2]
   204fc:	vst1.32	{d22-d23}, [r1]
   20500:	bne	204cc <__assert_fail@plt+0xeda4>
   20504:	vext.8	q9, q8, q8, #8
   20508:	vorr	q8, q8, q9
   2050c:	vdup.32	q9, d16[1]
   20510:	vorr	q8, q8, q9
   20514:	vmov.32	r0, d16[0]
   20518:	cmp	r0, #0
   2051c:	beq	2058c <__assert_fail@plt+0xee64>
   20520:	mov	r0, r3
   20524:	mov	r1, r9
   20528:	add	r2, sp, #24
   2052c:	sub	lr, fp, #6144	; 0x1800
   20530:	vld1.32	{d16-d17}, [r0]!
   20534:	vld1.32	{d18-d19}, [r1]!
   20538:	mov	r3, r2
   2053c:	add	r2, r2, r8, lsl #5
   20540:	vld1.64	{d20-d21}, [r0]
   20544:	vst1.32	{d16-d17}, [r2]!
   20548:	vld1.64	{d16-d17}, [r1]
   2054c:	add	r0, r3, r7, lsl #5
   20550:	sub	r1, lr, #120	; 0x78
   20554:	vst1.32	{d20-d21}, [r2]
   20558:	vst1.32	{d18-d19}, [r0]!
   2055c:	mov	r2, r1
   20560:	vst1.32	{d16-d17}, [r0]
   20564:	add	r0, r8, r8, lsl #1
   20568:	add	r0, r1, r0, lsl #2
   2056c:	add	r1, r7, r7, lsl #1
   20570:	add	r5, r2, r1, lsl #2
   20574:	mov	r1, r5
   20578:	bl	1d2a0 <__assert_fail@plt+0xbb78>
   2057c:	cmp	r0, #0
   20580:	bne	20a60 <__assert_fail@plt+0xf338>
   20584:	add	r8, r8, #1
   20588:	b	2059c <__assert_fail@plt+0xee74>
   2058c:	sub	lr, fp, #6144	; 0x1800
   20590:	add	r0, r7, r7, lsl #1
   20594:	sub	r1, lr, #120	; 0x78
   20598:	add	r5, r1, r0, lsl #2
   2059c:	ldr	r0, [sp, #12]
   205a0:	ldr	r1, [sp, #16]
   205a4:	ldr	r0, [r0, #12]
   205a8:	ldr	r1, [r0, r1, lsl #2]
   205ac:	mov	r0, r5
   205b0:	bl	1d104 <__assert_fail@plt+0xb9dc>
   205b4:	cmp	r0, #0
   205b8:	beq	20a60 <__assert_fail@plt+0xf338>
   205bc:	vext.8	q8, q5, q8, #8
   205c0:	mov	r1, #0
   205c4:	vorr	q8, q5, q8
   205c8:	vdup.32	q9, d16[1]
   205cc:	vorr	q8, q8, q9
   205d0:	vmov.32	r0, d16[0]
   205d4:	cmp	r0, #0
   205d8:	movweq	r1, #17
   205dc:	cmp	r1, #0
   205e0:	bne	20604 <__assert_fail@plt+0xeedc>
   205e4:	ldmib	sp, {r5, ip}
   205e8:	sub	lr, fp, #3072	; 0xc00
   205ec:	sub	r3, lr, #72	; 0x48
   205f0:	add	r7, r7, #1
   205f4:	add	sl, sl, #32
   205f8:	cmp	r7, r8
   205fc:	blt	20444 <__assert_fail@plt+0xed1c>
   20600:	b	2060c <__assert_fail@plt+0xeee4>
   20604:	cmp	r1, #17
   20608:	bne	206b0 <__assert_fail@plt+0xef88>
   2060c:	ldr	r1, [sp, #12]
   20610:	ldr	sl, [sp]
   20614:	cmp	r7, r8
   20618:	bne	20694 <__assert_fail@plt+0xef6c>
   2061c:	mov	r0, r4
   20620:	sub	lr, fp, #6144	; 0x1800
   20624:	vld1.32	{d16-d17}, [r0]!
   20628:	sub	r2, lr, #120	; 0x78
   2062c:	vld1.64	{d18-d19}, [r0]
   20630:	add	r0, sp, #24
   20634:	add	r0, r0, r7, lsl #5
   20638:	vst1.32	{d16-d17}, [r0]!
   2063c:	vst1.32	{d18-d19}, [r0]
   20640:	ldr	r0, [r1, #12]
   20644:	ldr	r1, [sp, #16]
   20648:	ldr	r8, [r0, r1, lsl #2]
   2064c:	add	r0, r7, r7, lsl #1
   20650:	mov	r1, #1
   20654:	add	r5, r2, r0, lsl #2
   20658:	str	r1, [r2, r0, lsl #2]
   2065c:	mov	r0, #4
   20660:	mov	r6, r5
   20664:	str	r1, [r6, #4]!
   20668:	bl	22aa0 <__assert_fail@plt+0x11378>
   2066c:	cmp	r0, #0
   20670:	str	r0, [r5, #8]
   20674:	beq	20acc <__assert_fail@plt+0xf3a4>
   20678:	ldr	r1, [sp, #12]
   2067c:	ldr	sl, [sp]
   20680:	str	r8, [r0]
   20684:	mov	r0, r4
   20688:	add	r8, r7, #1
   2068c:	vst1.64	{d8-d9}, [r0]!
   20690:	vst1.64	{d8-d9}, [r0]
   20694:	ldr	r3, [sp, #16]
   20698:	ldr	r0, [r1, #8]
   2069c:	add	r3, r3, #1
   206a0:	cmp	r3, r0
   206a4:	ldr	r0, [sp, #20]
   206a8:	blt	20104 <__assert_fail@plt+0xe9dc>
   206ac:	b	206c4 <__assert_fail@plt+0xef9c>
   206b0:	ldr	r1, [sp, #12]
   206b4:	ldr	sl, [sp]
   206b8:	cmp	r0, #0
   206bc:	bne	20694 <__assert_fail@plt+0xef6c>
   206c0:	b	206cc <__assert_fail@plt+0xefa4>
   206c4:	cmp	r8, #0
   206c8:	ble	20a94 <__assert_fail@plt+0xf36c>
   206cc:	mov	r0, #0
   206d0:	str	r0, [fp, #-3152]	; 0xfffff3b0
   206d4:	add	r0, r8, #1
   206d8:	str	r0, [fp, #-3156]	; 0xfffff3ac
   206dc:	lsl	r0, r0, #2
   206e0:	bl	22aa0 <__assert_fail@plt+0x11378>
   206e4:	cmp	r0, #0
   206e8:	str	r0, [fp, #-3148]	; 0xfffff3b4
   206ec:	mov	r0, #0
   206f0:	movweq	r0, #12
   206f4:	str	r0, [fp, #-72]	; 0xffffffb8
   206f8:	beq	20adc <__assert_fail@plt+0xf3b4>
   206fc:	sub	lr, fp, #3072	; 0xc00
   20700:	vmov.i32	q8, #0	; 0x00000000
   20704:	add	r7, sp, #24
   20708:	mov	r6, #0
   2070c:	mov	r1, #0
   20710:	sub	sl, lr, #120	; 0x78
   20714:	mov	r0, sl
   20718:	vst1.64	{d16-d17}, [r0]!
   2071c:	vst1.64	{d16-d17}, [r0]
   20720:	mov	r0, #0
   20724:	stmib	sp, {r0, r8}
   20728:	mov	r0, #0
   2072c:	sub	lr, fp, #6144	; 0x1800
   20730:	str	r1, [sp, #16]
   20734:	str	r0, [fp, #-3152]	; 0xfffff3b0
   20738:	add	r0, r1, r1, lsl #1
   2073c:	sub	r2, lr, #120	; 0x78
   20740:	ldr	r1, [sp, #20]
   20744:	add	r0, r2, r0, lsl #2
   20748:	ldr	r5, [r0, #4]
   2074c:	cmp	r5, #1
   20750:	blt	207b4 <__assert_fail@plt+0xf08c>
   20754:	ldr	sl, [r0, #8]
   20758:	mov	r8, #0
   2075c:	ldr	r0, [sl, r8, lsl #2]
   20760:	ldr	r2, [r1, #12]
   20764:	ldr	r0, [r2, r0, lsl #2]
   20768:	cmn	r0, #1
   2076c:	beq	20798 <__assert_fail@plt+0xf070>
   20770:	ldr	r1, [r1, #24]
   20774:	add	r0, r0, r0, lsl #1
   20778:	sub	lr, fp, #3072	; 0xc00
   2077c:	add	r1, r1, r0, lsl #2
   20780:	sub	r0, lr, #84	; 0x54
   20784:	bl	1cef0 <__assert_fail@plt+0xb7c8>
   20788:	ldr	r1, [sp, #20]
   2078c:	mov	r6, #0
   20790:	cmp	r0, #0
   20794:	bne	20a24 <__assert_fail@plt+0xf2fc>
   20798:	add	r8, r8, #1
   2079c:	cmp	r8, r5
   207a0:	blt	2075c <__assert_fail@plt+0xf034>
   207a4:	ldr	r8, [sp, #8]
   207a8:	sub	lr, fp, #3072	; 0xc00
   207ac:	str	r6, [fp, #-72]	; 0xffffffb8
   207b0:	sub	sl, lr, #120	; 0x78
   207b4:	sub	lr, fp, #3072	; 0xc00
   207b8:	sub	r0, fp, #72	; 0x48
   207bc:	mov	r3, #0
   207c0:	sub	r2, lr, #84	; 0x54
   207c4:	bl	1d380 <__assert_fail@plt+0xbc58>
   207c8:	ldr	r1, [sp, #16]
   207cc:	ldr	r6, [fp, #-72]	; 0xffffffb8
   207d0:	mov	r5, r0
   207d4:	cmp	r0, #0
   207d8:	str	r0, [r4, r1, lsl #2]
   207dc:	bne	207e8 <__assert_fail@plt+0xf0c0>
   207e0:	cmp	r6, #0
   207e4:	bne	20a2c <__assert_fail@plt+0xf304>
   207e8:	ldrsb	r0, [r5, #52]	; 0x34
   207ec:	cmn	r0, #1
   207f0:	ble	20808 <__assert_fail@plt+0xf0e0>
   207f4:	sub	lr, fp, #3072	; 0xc00
   207f8:	str	r5, [r9, r1, lsl #2]
   207fc:	sub	r0, lr, #72	; 0x48
   20800:	str	r5, [r0, r1, lsl #2]
   20804:	b	208a8 <__assert_fail@plt+0xf180>
   20808:	ldr	r1, [sp, #20]
   2080c:	sub	lr, fp, #3072	; 0xc00
   20810:	sub	r0, fp, #72	; 0x48
   20814:	mov	r3, #1
   20818:	sub	r2, lr, #84	; 0x54
   2081c:	bl	1d380 <__assert_fail@plt+0xbc58>
   20820:	ldr	r1, [sp, #16]
   20824:	cmp	r0, #0
   20828:	str	r0, [r9, r1, lsl #2]
   2082c:	bne	2083c <__assert_fail@plt+0xf114>
   20830:	ldr	r1, [fp, #-72]	; 0xffffffb8
   20834:	cmp	r1, #0
   20838:	bne	20a2c <__assert_fail@plt+0xf304>
   2083c:	cmp	r5, r0
   20840:	beq	20868 <__assert_fail@plt+0xf140>
   20844:	ldr	r1, [sp, #20]
   20848:	ldr	r2, [sp, #4]
   2084c:	ldr	r0, [r1, #92]	; 0x5c
   20850:	cmp	r0, #1
   20854:	mov	r0, #0
   20858:	movwgt	r0, #1
   2085c:	orr	r2, r2, r0
   20860:	str	r2, [sp, #4]
   20864:	b	2086c <__assert_fail@plt+0xf144>
   20868:	ldr	r1, [sp, #20]
   2086c:	sub	lr, fp, #3072	; 0xc00
   20870:	sub	r0, fp, #72	; 0x48
   20874:	mov	r3, #2
   20878:	sub	r2, lr, #84	; 0x54
   2087c:	bl	1d380 <__assert_fail@plt+0xbc58>
   20880:	ldr	r2, [sp, #16]
   20884:	ldr	r6, [fp, #-72]	; 0xffffffb8
   20888:	sub	lr, fp, #3072	; 0xc00
   2088c:	cmp	r0, #0
   20890:	sub	r1, lr, #72	; 0x48
   20894:	str	r0, [r1, r2, lsl #2]
   20898:	mov	r1, r2
   2089c:	bne	208a8 <__assert_fail@plt+0xf180>
   208a0:	cmp	r6, #0
   208a4:	bne	20a2c <__assert_fail@plt+0xf304>
   208a8:	mov	r0, #0
   208ac:	add	r2, sl, r0
   208b0:	add	r3, r7, r0
   208b4:	add	r0, r0, #16
   208b8:	vld1.32	{d16-d17}, [r3]
   208bc:	vld1.32	{d18-d19}, [r2]
   208c0:	cmp	r0, #32
   208c4:	vorr	q8, q9, q8
   208c8:	vst1.32	{d16-d17}, [r2]
   208cc:	bne	208ac <__assert_fail@plt+0xf184>
   208d0:	add	r1, r1, #1
   208d4:	add	r7, r7, #32
   208d8:	cmp	r1, r8
   208dc:	blt	20728 <__assert_fail@plt+0xf000>
   208e0:	ldr	r0, [sp, #4]
   208e4:	tst	r0, #1
   208e8:	bne	20ae8 <__assert_fail@plt+0xf3c0>
   208ec:	mov	r0, #4
   208f0:	mov	r1, #256	; 0x100
   208f4:	bl	22a4c <__assert_fail@plt+0x11324>
   208f8:	ldr	r1, [sp, #12]
   208fc:	cmp	r0, #0
   20900:	str	r0, [r1, #44]	; 0x2c
   20904:	beq	20a2c <__assert_fail@plt+0xf304>
   20908:	mov	r1, #0
   2090c:	add	sl, sp, #24
   20910:	mov	r3, #0
   20914:	sub	lr, fp, #3072	; 0xc00
   20918:	sub	r2, lr, #120	; 0x78
   2091c:	ldr	r7, [r2, r3, lsl #2]
   20920:	cmp	r7, #0
   20924:	beq	20998 <__assert_fail@plt+0xf270>
   20928:	ldr	r2, [sp, #20]
   2092c:	lsl	r5, r3, #5
   20930:	add	r6, r2, r3, lsl #2
   20934:	add	ip, r6, #96	; 0x60
   20938:	mov	r6, #1
   2093c:	b	20978 <__assert_fail@plt+0xf250>
   20940:	mov	lr, #0
   20944:	ldr	r8, [sl, lr, lsl #3]
   20948:	add	lr, lr, #4
   2094c:	tst	r8, r6
   20950:	beq	20944 <__assert_fail@plt+0xf21c>
   20954:	ldr	r2, [ip]
   20958:	ldr	r8, [sp, #8]
   2095c:	tst	r2, r6
   20960:	mov	r2, r9
   20964:	moveq	r2, r4
   20968:	add	r2, r2, lr
   2096c:	ldr	r2, [r2, #-4]
   20970:	str	r2, [r0, r5, lsl #2]
   20974:	b	20980 <__assert_fail@plt+0xf258>
   20978:	tst	r7, #1
   2097c:	bne	20940 <__assert_fail@plt+0xf218>
   20980:	lsr	r2, r7, #1
   20984:	cmp	r1, r7, lsr #1
   20988:	add	r5, r5, #1
   2098c:	lsl	r6, r6, #1
   20990:	mov	r7, r2
   20994:	bne	20978 <__assert_fail@plt+0xf250>
   20998:	add	r3, r3, #1
   2099c:	add	sl, sl, #4
   209a0:	cmp	r3, #8
   209a4:	bne	20914 <__assert_fail@plt+0xf1ec>
   209a8:	ldrb	r1, [fp, #-3191]	; 0xfffff389
   209ac:	sub	lr, fp, #6144	; 0x1800
   209b0:	sub	r4, lr, #120	; 0x78
   209b4:	tst	r1, #4
   209b8:	beq	20a00 <__assert_fail@plt+0xf2d8>
   209bc:	mov	r1, #0
   209c0:	add	r2, sp, #24
   209c4:	add	r3, r2, r1, lsl #5
   209c8:	ldrb	r3, [r3, #1]
   209cc:	tst	r3, #4
   209d0:	bne	209e4 <__assert_fail@plt+0xf2bc>
   209d4:	add	r1, r1, #1
   209d8:	cmp	r1, r8
   209dc:	blt	209c4 <__assert_fail@plt+0xf29c>
   209e0:	b	20a00 <__assert_fail@plt+0xf2d8>
   209e4:	sub	lr, fp, #3072	; 0xc00
   209e8:	sub	r2, lr, #72	; 0x48
   209ec:	ldr	r1, [r2, r1, lsl #2]
   209f0:	ldr	r2, [sp, #4]
   209f4:	tst	r2, #1
   209f8:	str	r1, [r0, #40]	; 0x28
   209fc:	strne	r1, [r0, #1064]	; 0x428
   20a00:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   20a04:	bl	132d4 <__assert_fail@plt+0x1bac>
   20a08:	add	r4, r4, #8
   20a0c:	ldr	r0, [r4], #12
   20a10:	bl	132d4 <__assert_fail@plt+0x1bac>
   20a14:	subs	r8, r8, #1
   20a18:	bne	20a0c <__assert_fail@plt+0xf2e4>
   20a1c:	mov	r0, #1
   20a20:	b	20abc <__assert_fail@plt+0xf394>
   20a24:	ldr	r8, [sp, #8]
   20a28:	str	r0, [fp, #-72]	; 0xffffffb8
   20a2c:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   20a30:	bl	132d4 <__assert_fail@plt+0x1bac>
   20a34:	cmp	r8, #1
   20a38:	blt	20a58 <__assert_fail@plt+0xf330>
   20a3c:	sub	lr, fp, #6144	; 0x1800
   20a40:	sub	r0, lr, #120	; 0x78
   20a44:	add	r4, r0, #8
   20a48:	ldr	r0, [r4], #12
   20a4c:	bl	132d4 <__assert_fail@plt+0x1bac>
   20a50:	subs	r8, r8, #1
   20a54:	bne	20a48 <__assert_fail@plt+0xf320>
   20a58:	mov	r0, #0
   20a5c:	b	20abc <__assert_fail@plt+0xf394>
   20a60:	mov	r7, r8
   20a64:	ldr	r1, [sp, #12]
   20a68:	mvn	r8, #0
   20a6c:	cmp	r7, #1
   20a70:	blt	20a94 <__assert_fail@plt+0xf36c>
   20a74:	sub	lr, fp, #6144	; 0x1800
   20a78:	sub	r0, lr, #120	; 0x78
   20a7c:	add	r4, r0, #8
   20a80:	ldr	r0, [r4], #12
   20a84:	bl	132d4 <__assert_fail@plt+0x1bac>
   20a88:	subs	r7, r7, #1
   20a8c:	bne	20a80 <__assert_fail@plt+0xf358>
   20a90:	ldr	r1, [sp, #12]
   20a94:	mov	r0, #0
   20a98:	cmp	r8, #0
   20a9c:	bne	20abc <__assert_fail@plt+0xf394>
   20aa0:	mov	r4, r1
   20aa4:	mov	r0, #4
   20aa8:	mov	r1, #256	; 0x100
   20aac:	bl	22a4c <__assert_fail@plt+0x11324>
   20ab0:	cmp	r0, #0
   20ab4:	str	r0, [r4, #44]	; 0x2c
   20ab8:	movwne	r0, #1
   20abc:	sub	sp, fp, #64	; 0x40
   20ac0:	vpop	{d8-d11}
   20ac4:	add	sp, sp, #4
   20ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20acc:	mov	r0, #0
   20ad0:	str	r0, [r6]
   20ad4:	str	r0, [r5]
   20ad8:	b	20a64 <__assert_fail@plt+0xf33c>
   20adc:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   20ae0:	bl	132d4 <__assert_fail@plt+0x1bac>
   20ae4:	b	20a3c <__assert_fail@plt+0xf314>
   20ae8:	mov	r0, #4
   20aec:	mov	r1, #512	; 0x200
   20af0:	bl	22a4c <__assert_fail@plt+0x11324>
   20af4:	ldr	r1, [sp, #12]
   20af8:	cmp	r0, #0
   20afc:	str	r0, [r1, #48]	; 0x30
   20b00:	beq	20a2c <__assert_fail@plt+0xf304>
   20b04:	sub	ip, r4, #4
   20b08:	sub	lr, r9, #4
   20b0c:	mov	r3, #0
   20b10:	add	r7, sp, #24
   20b14:	mov	r6, #0
   20b18:	ldr	r5, [sl, r6, lsl #2]
   20b1c:	cmp	r5, #0
   20b20:	beq	20b94 <__assert_fail@plt+0xf46c>
   20b24:	lsl	r4, r6, #5
   20b28:	mov	r1, #1
   20b2c:	b	20b74 <__assert_fail@plt+0xf44c>
   20b30:	mov	sl, r7
   20b34:	mov	r9, ip
   20b38:	mov	r8, lr
   20b3c:	ldr	r2, [sl], #32
   20b40:	add	r9, r9, #4
   20b44:	add	r8, r8, #4
   20b48:	tst	r2, r1
   20b4c:	beq	20b3c <__assert_fail@plt+0xf414>
   20b50:	ldr	r9, [r9]
   20b54:	mov	sl, r0
   20b58:	str	r9, [sl, r4, lsl #2]!
   20b5c:	ldr	r2, [r8]
   20b60:	ldr	r8, [sp, #8]
   20b64:	str	r2, [sl, #1024]	; 0x400
   20b68:	sub	r2, fp, #3072	; 0xc00
   20b6c:	sub	sl, r2, #120	; 0x78
   20b70:	b	20b7c <__assert_fail@plt+0xf454>
   20b74:	tst	r5, #1
   20b78:	bne	20b30 <__assert_fail@plt+0xf408>
   20b7c:	lsr	r2, r5, #1
   20b80:	cmp	r3, r5, lsr #1
   20b84:	add	r4, r4, #1
   20b88:	lsl	r1, r1, #1
   20b8c:	mov	r5, r2
   20b90:	bne	20b74 <__assert_fail@plt+0xf44c>
   20b94:	add	r6, r6, #1
   20b98:	add	r7, r7, #4
   20b9c:	cmp	r6, #8
   20ba0:	bne	20b18 <__assert_fail@plt+0xf3f0>
   20ba4:	b	209a8 <__assert_fail@plt+0xf280>
   20ba8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20bac:	add	fp, sp, #28
   20bb0:	sub	sp, sp, #44	; 0x2c
   20bb4:	ldr	r4, [r1, #8]
   20bb8:	ldr	r6, [r1, #12]
   20bbc:	mov	r9, r0
   20bc0:	mov	r0, #1
   20bc4:	mov	sl, r1
   20bc8:	str	r0, [sp, #36]	; 0x24
   20bcc:	str	r0, [sp, #32]
   20bd0:	mov	r0, #4
   20bd4:	bl	22aa0 <__assert_fail@plt+0x11378>
   20bd8:	cmp	r0, #0
   20bdc:	str	r0, [sp, #40]	; 0x28
   20be0:	beq	20e2c <__assert_fail@plt+0xf704>
   20be4:	str	r4, [r0]
   20be8:	add	r3, sp, #32
   20bec:	mov	r0, r9
   20bf0:	mov	r1, sl
   20bf4:	mov	r2, r6
   20bf8:	bl	20eec <__assert_fail@plt+0xf7c4>
   20bfc:	cmp	r0, #0
   20c00:	bne	20df0 <__assert_fail@plt+0xf6c8>
   20c04:	add	r0, sl, #16
   20c08:	mov	r1, #0
   20c0c:	str	r0, [sp, #12]
   20c10:	cmp	r6, #1
   20c14:	blt	20e00 <__assert_fail@plt+0xf6d8>
   20c18:	ldr	r0, [sl]
   20c1c:	ldr	r2, [r0, r6, lsl #2]
   20c20:	cmp	r2, #0
   20c24:	mov	r2, #0
   20c28:	addeq	r2, r1, #1
   20c2c:	ldr	r1, [r9, #120]	; 0x78
   20c30:	cmp	r2, r1
   20c34:	bgt	20e08 <__assert_fail@plt+0xf6e0>
   20c38:	mov	r0, #0
   20c3c:	str	r6, [sp, #16]
   20c40:	sub	r6, r6, #1
   20c44:	str	r2, [sp, #8]
   20c48:	str	r0, [sp, #36]	; 0x24
   20c4c:	ldr	r0, [r9, #100]	; 0x64
   20c50:	ldr	r1, [r0, r6, lsl #2]
   20c54:	cmp	r1, #0
   20c58:	beq	20dd0 <__assert_fail@plt+0xf6a8>
   20c5c:	ldr	r0, [r1, #20]
   20c60:	cmp	r0, #1
   20c64:	blt	20dd0 <__assert_fail@plt+0xf6a8>
   20c68:	ldr	r0, [r9, #84]	; 0x54
   20c6c:	mov	r5, #0
   20c70:	str	r1, [sp, #24]
   20c74:	str	r0, [sp, #28]
   20c78:	ldr	r0, [r1, #24]
   20c7c:	ldr	r7, [r0, r5, lsl #2]
   20c80:	ldr	r0, [sp, #28]
   20c84:	ldr	r0, [r0]
   20c88:	add	r0, r0, r7, lsl #3
   20c8c:	ldrb	r0, [r0, #6]
   20c90:	tst	r0, #16
   20c94:	bne	20cf0 <__assert_fail@plt+0xf5c8>
   20c98:	ldr	r0, [sp, #28]
   20c9c:	mov	r2, r6
   20ca0:	ldr	r0, [r0]
   20ca4:	add	r1, r0, r7, lsl #3
   20ca8:	mov	r0, r9
   20cac:	bl	1ff68 <__assert_fail@plt+0xe840>
   20cb0:	cmp	r0, #0
   20cb4:	beq	20dbc <__assert_fail@plt+0xf694>
   20cb8:	ldr	r0, [sl]
   20cbc:	ldr	r1, [sp, #16]
   20cc0:	ldr	r0, [r0, r1, lsl #2]
   20cc4:	cmp	r0, #0
   20cc8:	beq	20dbc <__assert_fail@plt+0xf694>
   20ccc:	ldr	r1, [sp, #28]
   20cd0:	add	r0, r0, #4
   20cd4:	ldr	r1, [r1, #12]
   20cd8:	ldr	r1, [r1, r7, lsl #2]
   20cdc:	bl	1d31c <__assert_fail@plt+0xbbf4>
   20ce0:	mov	r4, #1
   20ce4:	cmp	r0, #0
   20ce8:	bne	20d70 <__assert_fail@plt+0xf648>
   20cec:	b	20dbc <__assert_fail@plt+0xf694>
   20cf0:	ldr	r0, [sl, #12]
   20cf4:	ldr	r8, [r9, #84]	; 0x54
   20cf8:	mov	r2, r9
   20cfc:	mov	r1, r7
   20d00:	mov	r3, r6
   20d04:	str	r0, [sp, #20]
   20d08:	mov	r0, r8
   20d0c:	bl	1fc78 <__assert_fail@plt+0xe550>
   20d10:	mov	r4, r0
   20d14:	cmp	r0, #1
   20d18:	blt	20d38 <__assert_fail@plt+0xf610>
   20d1c:	ldr	r1, [sp, #20]
   20d20:	add	r0, r4, r6
   20d24:	mov	r2, r6
   20d28:	cmp	r0, r1
   20d2c:	ble	20d44 <__assert_fail@plt+0xf61c>
   20d30:	mov	r6, r2
   20d34:	b	20d70 <__assert_fail@plt+0xf648>
   20d38:	cmp	r4, #0
   20d3c:	bne	20d70 <__assert_fail@plt+0xf648>
   20d40:	b	20c98 <__assert_fail@plt+0xf570>
   20d44:	ldr	r1, [sl]
   20d48:	mov	r6, r2
   20d4c:	ldr	r0, [r1, r0, lsl #2]
   20d50:	cmp	r0, #0
   20d54:	beq	20c98 <__assert_fail@plt+0xf570>
   20d58:	ldr	r1, [r8, #12]
   20d5c:	add	r0, r0, #4
   20d60:	ldr	r1, [r1, r7, lsl #2]
   20d64:	bl	1d31c <__assert_fail@plt+0xbbf4>
   20d68:	cmp	r0, #0
   20d6c:	beq	20c98 <__assert_fail@plt+0xf570>
   20d70:	ldr	r0, [sl, #20]
   20d74:	cmp	r0, #0
   20d78:	beq	20da8 <__assert_fail@plt+0xf680>
   20d7c:	ldr	r0, [sp, #28]
   20d80:	ldr	r1, [sp, #12]
   20d84:	add	r3, r4, r6
   20d88:	ldr	r0, [r0, #12]
   20d8c:	ldr	r2, [r0, r7, lsl #2]
   20d90:	mov	r0, r9
   20d94:	str	r7, [sp]
   20d98:	str	r6, [sp, #4]
   20d9c:	bl	21a18 <__assert_fail@plt+0x102f0>
   20da0:	cmp	r0, #0
   20da4:	bne	20dbc <__assert_fail@plt+0xf694>
   20da8:	add	r0, sp, #32
   20dac:	mov	r1, r7
   20db0:	bl	1d104 <__assert_fail@plt+0xb9dc>
   20db4:	cmp	r0, #0
   20db8:	beq	20df8 <__assert_fail@plt+0xf6d0>
   20dbc:	ldr	r1, [sp, #24]
   20dc0:	add	r5, r5, #1
   20dc4:	ldr	r0, [r1, #20]
   20dc8:	cmp	r5, r0
   20dcc:	blt	20c78 <__assert_fail@plt+0xf550>
   20dd0:	mov	r0, r9
   20dd4:	mov	r1, sl
   20dd8:	mov	r2, r6
   20ddc:	add	r3, sp, #32
   20de0:	bl	20eec <__assert_fail@plt+0xf7c4>
   20de4:	ldr	r1, [sp, #8]
   20de8:	cmp	r0, #0
   20dec:	beq	20c10 <__assert_fail@plt+0xf4e8>
   20df0:	mov	r4, r0
   20df4:	b	20e18 <__assert_fail@plt+0xf6f0>
   20df8:	mov	r4, #12
   20dfc:	b	20e18 <__assert_fail@plt+0xf6f0>
   20e00:	mov	r4, #0
   20e04:	b	20e18 <__assert_fail@plt+0xf6f0>
   20e08:	lsl	r2, r6, #2
   20e0c:	mov	r1, #0
   20e10:	mov	r4, #0
   20e14:	bl	11620 <memset@plt>
   20e18:	ldr	r0, [sp, #40]	; 0x28
   20e1c:	bl	132d4 <__assert_fail@plt+0x1bac>
   20e20:	mov	r0, r4
   20e24:	sub	sp, fp, #28
   20e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e2c:	mov	r0, #0
   20e30:	mov	r4, #12
   20e34:	str	r0, [sp, #32]
   20e38:	str	r0, [sp, #36]	; 0x24
   20e3c:	b	20e20 <__assert_fail@plt+0xf6f8>
   20e40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e44:	add	fp, sp, #28
   20e48:	sub	sp, sp, #20
   20e4c:	cmp	r3, #1
   20e50:	blt	20ee0 <__assert_fail@plt+0xf7b8>
   20e54:	mov	r4, r3
   20e58:	mov	r5, r2
   20e5c:	mov	r6, r1
   20e60:	mov	sl, r0
   20e64:	mov	r7, #0
   20e68:	add	r8, sp, #4
   20e6c:	add	r9, sp, #16
   20e70:	ldr	r1, [r6, r7, lsl #2]
   20e74:	ldr	r0, [r5, r7, lsl #2]
   20e78:	cmp	r1, #0
   20e7c:	beq	20ed0 <__assert_fail@plt+0xf7a8>
   20e80:	cmp	r0, #0
   20e84:	beq	20ed4 <__assert_fail@plt+0xf7ac>
   20e88:	add	r2, r0, #4
   20e8c:	add	r1, r1, #4
   20e90:	mov	r0, r8
   20e94:	bl	1eb2c <__assert_fail@plt+0xd404>
   20e98:	cmp	r0, #0
   20e9c:	str	r0, [sp, #16]
   20ea0:	bne	20ee4 <__assert_fail@plt+0xf7bc>
   20ea4:	mov	r0, r9
   20ea8:	mov	r1, sl
   20eac:	mov	r2, r8
   20eb0:	bl	1fa7c <__assert_fail@plt+0xe354>
   20eb4:	str	r0, [r6, r7, lsl #2]
   20eb8:	ldr	r0, [sp, #12]
   20ebc:	bl	132d4 <__assert_fail@plt+0x1bac>
   20ec0:	ldr	r0, [sp, #16]
   20ec4:	cmp	r0, #0
   20ec8:	beq	20ed4 <__assert_fail@plt+0xf7ac>
   20ecc:	b	20ee4 <__assert_fail@plt+0xf7bc>
   20ed0:	str	r0, [r6, r7, lsl #2]
   20ed4:	add	r7, r7, #1
   20ed8:	cmp	r7, r4
   20edc:	blt	20e70 <__assert_fail@plt+0xf748>
   20ee0:	mov	r0, #0
   20ee4:	sub	sp, fp, #28
   20ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20eec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ef0:	add	fp, sp, #28
   20ef4:	sub	sp, sp, #84	; 0x54
   20ef8:	mov	r6, r3
   20efc:	mov	r3, #0
   20f00:	ldr	r7, [r0, #84]	; 0x54
   20f04:	mov	r4, r2
   20f08:	str	r0, [sp, #44]	; 0x2c
   20f0c:	str	r1, [sp, #48]	; 0x30
   20f10:	str	r3, [sp, #52]	; 0x34
   20f14:	str	r4, [sp, #40]	; 0x28
   20f18:	ldr	r2, [r0, #100]	; 0x64
   20f1c:	ldr	r8, [r2, r4, lsl #2]
   20f20:	ldr	r2, [r6, #4]
   20f24:	cmp	r8, #0
   20f28:	mov	r0, r8
   20f2c:	addne	r0, r0, #4
   20f30:	cmp	r2, #0
   20f34:	str	r0, [sp, #36]	; 0x24
   20f38:	beq	212b8 <__assert_fail@plt+0xfb90>
   20f3c:	cmp	r8, #0
   20f40:	beq	2128c <__assert_fail@plt+0xfb64>
   20f44:	mov	r0, #0
   20f48:	mov	r1, r7
   20f4c:	mov	r2, r6
   20f50:	str	r7, [sp, #28]
   20f54:	str	r6, [sp, #20]
   20f58:	str	r0, [sp, #56]	; 0x38
   20f5c:	add	r0, sp, #56	; 0x38
   20f60:	bl	1fa7c <__assert_fail@plt+0xe354>
   20f64:	ldr	r9, [sp, #56]	; 0x38
   20f68:	cmp	r9, #0
   20f6c:	bne	215d4 <__assert_fail@plt+0xfeac>
   20f70:	mov	r6, r0
   20f74:	mov	r5, r0
   20f78:	ldr	r2, [sp, #20]
   20f7c:	ldr	r0, [r6, #28]!
   20f80:	cmp	r0, #0
   20f84:	bne	21018 <__assert_fail@plt+0xf8f0>
   20f88:	ldr	r0, [r2, #4]
   20f8c:	mov	r4, #0
   20f90:	mov	r7, r2
   20f94:	str	r0, [r5, #28]
   20f98:	lsl	r0, r0, #2
   20f9c:	str	r4, [r5, #32]
   20fa0:	bl	22aa0 <__assert_fail@plt+0x11378>
   20fa4:	cmp	r0, #0
   20fa8:	mov	r9, #12
   20fac:	str	r0, [r5, #36]	; 0x24
   20fb0:	movweq	r4, #12
   20fb4:	str	r4, [sp, #56]	; 0x38
   20fb8:	beq	215d4 <__assert_fail@plt+0xfeac>
   20fbc:	ldr	r0, [r7, #4]
   20fc0:	mov	r2, r7
   20fc4:	cmp	r0, #1
   20fc8:	blt	21018 <__assert_fail@plt+0xf8f0>
   20fcc:	mov	r5, #0
   20fd0:	ldr	r0, [r2, #8]
   20fd4:	ldr	r1, [sp, #28]
   20fd8:	mov	r4, r2
   20fdc:	ldr	r0, [r0, r5, lsl #2]
   20fe0:	ldr	r1, [r1, #28]
   20fe4:	add	r0, r0, r0, lsl #1
   20fe8:	add	r1, r1, r0, lsl #2
   20fec:	mov	r0, r6
   20ff0:	bl	1cef0 <__assert_fail@plt+0xb7c8>
   20ff4:	cmp	r0, #0
   20ff8:	bne	215e4 <__assert_fail@plt+0xfebc>
   20ffc:	ldr	r0, [r4, #4]
   21000:	add	r5, r5, #1
   21004:	mov	r2, r4
   21008:	cmp	r5, r0
   2100c:	blt	20fd0 <__assert_fail@plt+0xf8a8>
   21010:	mov	r0, #0
   21014:	str	r0, [sp, #56]	; 0x38
   21018:	ldr	r1, [sp, #36]	; 0x24
   2101c:	mov	r0, r2
   21020:	mov	r2, r6
   21024:	bl	21600 <__assert_fail@plt+0xfed8>
   21028:	cmp	r0, #0
   2102c:	str	r0, [sp, #52]	; 0x34
   21030:	bne	215f8 <__assert_fail@plt+0xfed0>
   21034:	ldr	ip, [sp, #48]	; 0x30
   21038:	ldr	r4, [sp, #40]	; 0x28
   2103c:	ldr	r7, [sp, #28]
   21040:	ldr	r6, [sp, #20]
   21044:	ldr	r0, [ip, #20]
   21048:	cmp	r0, #0
   2104c:	beq	2128c <__assert_fail@plt+0xfb64>
   21050:	cmp	r0, #1
   21054:	str	r8, [sp, #12]
   21058:	blt	21280 <__assert_fail@plt+0xfb58>
   2105c:	ldr	r0, [sp, #44]	; 0x2c
   21060:	mov	r8, #0
   21064:	ldr	r0, [r0, #116]	; 0x74
   21068:	str	r0, [sp, #24]
   2106c:	ldr	r0, [ip, #24]
   21070:	ldr	r1, [sp, #24]
   21074:	ldr	r0, [r0, r8, lsl #2]
   21078:	add	r0, r0, r0, lsl #1
   2107c:	add	r1, r1, r0, lsl #3
   21080:	ldr	r2, [r1, #8]
   21084:	cmp	r2, r4
   21088:	bge	21270 <__assert_fail@plt+0xfb48>
   2108c:	ldr	r1, [r1, #4]
   21090:	cmp	r1, r4
   21094:	blt	21270 <__assert_fail@plt+0xfb48>
   21098:	ldr	r1, [sp, #24]
   2109c:	ldr	r2, [r7]
   210a0:	ldr	r0, [r1, r0, lsl #3]!
   210a4:	ldr	r1, [r1, #12]
   210a8:	ldr	sl, [r2, r0, lsl #3]
   210ac:	ldr	r0, [r6, #4]
   210b0:	cmp	r1, r4
   210b4:	bne	21170 <__assert_fail@plt+0xfa48>
   210b8:	cmp	r0, #1
   210bc:	blt	21270 <__assert_fail@plt+0xfb48>
   210c0:	ldr	r3, [r6, #8]
   210c4:	mvn	r1, #0
   210c8:	str	r1, [sp, #32]
   210cc:	mvn	r1, #0
   210d0:	ldr	r5, [r3]
   210d4:	add	r4, r2, r5, lsl #3
   210d8:	ldrb	r4, [r4, #4]
   210dc:	cmp	r4, #9
   210e0:	beq	210fc <__assert_fail@plt+0xf9d4>
   210e4:	cmp	r4, #8
   210e8:	bne	21110 <__assert_fail@plt+0xf9e8>
   210ec:	ldr	r4, [r2, r5, lsl #3]
   210f0:	cmp	sl, r4
   210f4:	moveq	r1, r5
   210f8:	b	21110 <__assert_fail@plt+0xf9e8>
   210fc:	ldr	r4, [r2, r5, lsl #3]
   21100:	cmp	sl, r4
   21104:	ldr	r4, [sp, #32]
   21108:	moveq	r4, r5
   2110c:	str	r4, [sp, #32]
   21110:	add	r3, r3, #4
   21114:	subs	r0, r0, #1
   21118:	bne	210d0 <__assert_fail@plt+0xf9a8>
   2111c:	cmp	r1, #0
   21120:	blt	21148 <__assert_fail@plt+0xfa20>
   21124:	ldr	r3, [sp, #36]	; 0x24
   21128:	mov	r0, r7
   2112c:	mov	r2, r6
   21130:	bl	21808 <__assert_fail@plt+0x100e0>
   21134:	ldr	r6, [sp, #20]
   21138:	ldr	r7, [sp, #28]
   2113c:	ldr	ip, [sp, #48]	; 0x30
   21140:	cmp	r0, #0
   21144:	bne	215d0 <__assert_fail@plt+0xfea8>
   21148:	ldr	sl, [sp, #32]
   2114c:	ldr	r4, [sp, #40]	; 0x28
   21150:	cmp	sl, #0
   21154:	blt	21270 <__assert_fail@plt+0xfb48>
   21158:	ldr	r0, [r6, #4]
   2115c:	cmp	r0, #1
   21160:	str	r0, [sp, #16]
   21164:	blt	21270 <__assert_fail@plt+0xfb48>
   21168:	mov	r5, #0
   2116c:	b	21218 <__assert_fail@plt+0xfaf0>
   21170:	cmp	r0, #1
   21174:	blt	21270 <__assert_fail@plt+0xfb48>
   21178:	mov	r5, #0
   2117c:	ldr	r1, [r6, #8]
   21180:	ldr	r1, [r1, r5, lsl #2]
   21184:	add	r3, r2, r1, lsl #3
   21188:	ldr	r3, [r3, #4]
   2118c:	and	r3, r3, #254	; 0xfe
   21190:	orr	r3, r3, #1
   21194:	cmp	r3, #9
   21198:	ldreq	r2, [r2, r1, lsl #3]
   2119c:	cmpeq	sl, r2
   211a0:	beq	211b8 <__assert_fail@plt+0xfa90>
   211a4:	add	r5, r5, #1
   211a8:	cmp	r5, r0
   211ac:	bge	21270 <__assert_fail@plt+0xfb48>
   211b0:	ldr	r2, [r7]
   211b4:	b	2117c <__assert_fail@plt+0xfa54>
   211b8:	ldr	r3, [sp, #36]	; 0x24
   211bc:	mov	r0, r7
   211c0:	mov	r2, r6
   211c4:	bl	21808 <__assert_fail@plt+0x100e0>
   211c8:	cmp	r0, #0
   211cc:	bne	215d0 <__assert_fail@plt+0xfea8>
   211d0:	ldr	r0, [r6, #4]
   211d4:	ldr	r4, [sp, #40]	; 0x28
   211d8:	ldr	ip, [sp, #48]	; 0x30
   211dc:	ldr	r7, [sp, #28]
   211e0:	b	211a4 <__assert_fail@plt+0xfa7c>
   211e4:	mov	r1, r6
   211e8:	ldr	r6, [sp, #20]
   211ec:	ldr	r3, [sp, #36]	; 0x24
   211f0:	mov	r0, r7
   211f4:	mov	r2, r6
   211f8:	bl	21808 <__assert_fail@plt+0x100e0>
   211fc:	cmp	r0, #0
   21200:	bne	215d0 <__assert_fail@plt+0xfea8>
   21204:	ldr	r0, [r6, #4]
   21208:	ldr	r7, [sp, #28]
   2120c:	sub	r5, r5, #1
   21210:	str	r0, [sp, #16]
   21214:	b	21258 <__assert_fail@plt+0xfb30>
   21218:	ldr	r0, [r6, #8]
   2121c:	mov	r1, sl
   21220:	ldr	r6, [r0, r5, lsl #2]
   21224:	ldr	r0, [r7, #28]
   21228:	add	r9, r6, r6, lsl #1
   2122c:	add	r0, r0, r9, lsl #2
   21230:	bl	1d31c <__assert_fail@plt+0xbbf4>
   21234:	cmp	r0, #0
   21238:	bne	21254 <__assert_fail@plt+0xfb2c>
   2123c:	ldr	r0, [r7, #24]
   21240:	mov	r1, sl
   21244:	add	r0, r0, r9, lsl #2
   21248:	bl	1d31c <__assert_fail@plt+0xbbf4>
   2124c:	cmp	r0, #0
   21250:	beq	211e4 <__assert_fail@plt+0xfabc>
   21254:	ldr	r6, [sp, #20]
   21258:	ldr	r0, [sp, #16]
   2125c:	ldr	r4, [sp, #40]	; 0x28
   21260:	ldr	ip, [sp, #48]	; 0x30
   21264:	add	r5, r5, #1
   21268:	cmp	r5, r0
   2126c:	blt	21218 <__assert_fail@plt+0xfaf0>
   21270:	ldr	r0, [ip, #20]
   21274:	add	r8, r8, #1
   21278:	cmp	r8, r0
   2127c:	blt	2106c <__assert_fail@plt+0xf944>
   21280:	ldr	r8, [sp, #12]
   21284:	mov	r0, #0
   21288:	str	r0, [sp, #52]	; 0x34
   2128c:	add	r0, sp, #52	; 0x34
   21290:	mov	r1, r7
   21294:	mov	r2, r6
   21298:	bl	1fa7c <__assert_fail@plt+0xe354>
   2129c:	ldr	r1, [sp, #48]	; 0x30
   212a0:	ldr	r1, [r1]
   212a4:	str	r0, [r1, r4, lsl #2]
   212a8:	ldr	r9, [sp, #52]	; 0x34
   212ac:	cmp	r9, #0
   212b0:	beq	212c0 <__assert_fail@plt+0xfb98>
   212b4:	b	215c4 <__assert_fail@plt+0xfe9c>
   212b8:	ldr	r1, [r1]
   212bc:	str	r3, [r1, r4, lsl #2]
   212c0:	cmp	r8, #0
   212c4:	beq	215c0 <__assert_fail@plt+0xfe98>
   212c8:	ldr	r0, [sp, #44]	; 0x2c
   212cc:	ldr	r1, [sp, #40]	; 0x28
   212d0:	ldr	r0, [r0, #100]	; 0x64
   212d4:	ldr	r0, [r0, r1, lsl #2]
   212d8:	ldrb	r0, [r0, #52]	; 0x34
   212dc:	tst	r0, #64	; 0x40
   212e0:	beq	215c0 <__assert_fail@plt+0xfe98>
   212e4:	ldr	r0, [sp, #44]	; 0x2c
   212e8:	ldr	r9, [sp, #40]	; 0x28
   212ec:	ldr	r8, [r0, #84]	; 0x54
   212f0:	mov	r1, r9
   212f4:	bl	1ed30 <__assert_fail@plt+0xd608>
   212f8:	cmn	r0, #1
   212fc:	str	r0, [sp, #16]
   21300:	beq	215b0 <__assert_fail@plt+0xfe88>
   21304:	ldr	r0, [sp, #36]	; 0x24
   21308:	mov	r6, #0
   2130c:	str	r6, [sp, #56]	; 0x38
   21310:	ldr	r0, [r0, #4]
   21314:	cmp	r0, #0
   21318:	ble	215bc <__assert_fail@plt+0xfe94>
   2131c:	ldr	r3, [sp, #48]	; 0x30
   21320:	add	r1, r9, #1
   21324:	mov	r7, #0
   21328:	str	r1, [sp, #8]
   2132c:	add	r1, sp, #56	; 0x38
   21330:	add	r1, r1, #16
   21334:	str	r1, [sp, #24]
   21338:	add	r1, r3, #16
   2133c:	str	r1, [sp, #28]
   21340:	ldr	r1, [sp, #16]
   21344:	add	r1, r1, r1, lsl #1
   21348:	str	r1, [sp, #12]
   2134c:	ldr	r1, [sp, #36]	; 0x24
   21350:	ldr	r2, [r3, #8]
   21354:	ldr	r1, [r1, #8]
   21358:	ldr	sl, [r1, r7, lsl #2]
   2135c:	ldr	r1, [r8]
   21360:	add	r1, r1, sl, lsl #3
   21364:	cmp	sl, r2
   21368:	ldrb	r1, [r1, #4]
   2136c:	bne	21388 <__assert_fail@plt+0xfc60>
   21370:	cmp	r1, #4
   21374:	bne	21580 <__assert_fail@plt+0xfe58>
   21378:	ldr	r1, [r3, #12]
   2137c:	cmp	r1, r9
   21380:	bne	21390 <__assert_fail@plt+0xfc68>
   21384:	b	21580 <__assert_fail@plt+0xfe58>
   21388:	cmp	r1, #4
   2138c:	bne	21580 <__assert_fail@plt+0xfe58>
   21390:	ldr	r0, [sp, #44]	; 0x2c
   21394:	ldr	r1, [sp, #12]
   21398:	str	r7, [sp, #20]
   2139c:	ldr	r7, [sp, #16]
   213a0:	str	r6, [sp, #32]
   213a4:	ldr	r0, [r0, #116]	; 0x74
   213a8:	add	r5, r0, r1, lsl #3
   213ac:	b	214c0 <__assert_fail@plt+0xfd98>
   213b0:	ldr	r0, [sp, #32]
   213b4:	cmp	r0, #0
   213b8:	bne	213ec <__assert_fail@plt+0xfcc4>
   213bc:	ldr	r0, [sp, #48]	; 0x30
   213c0:	mov	r1, #12
   213c4:	vld1.32	{d16-d17}, [r0], r1
   213c8:	vld1.32	{d18-d19}, [r0]
   213cc:	add	r0, sp, #56	; 0x38
   213d0:	vst1.64	{d16-d17}, [r0], r1
   213d4:	ldr	r1, [sp, #28]
   213d8:	vst1.32	{d18-d19}, [r0]
   213dc:	ldr	r0, [sp, #24]
   213e0:	bl	1d2a0 <__assert_fail@plt+0xbb78>
   213e4:	cmp	r0, #0
   213e8:	bne	215dc <__assert_fail@plt+0xfeb4>
   213ec:	ldr	r4, [sp, #40]	; 0x28
   213f0:	ldr	r0, [sp, #24]
   213f4:	mov	r1, r7
   213f8:	str	r4, [sp, #68]	; 0x44
   213fc:	str	sl, [sp, #64]	; 0x40
   21400:	bl	1d104 <__assert_fail@plt+0xb9dc>
   21404:	cmp	r0, #0
   21408:	beq	215ec <__assert_fail@plt+0xfec4>
   2140c:	ldr	r5, [sp, #56]	; 0x38
   21410:	ldr	r0, [sp, #44]	; 0x2c
   21414:	add	r1, sp, #56	; 0x38
   21418:	ldr	r4, [r5, r4, lsl #2]
   2141c:	bl	20ba8 <__assert_fail@plt+0xf480>
   21420:	cmp	r0, #0
   21424:	bne	215dc <__assert_fail@plt+0xfeb4>
   21428:	ldr	r0, [sp, #48]	; 0x30
   2142c:	ldr	r1, [r0, #4]
   21430:	cmp	r1, #0
   21434:	beq	21450 <__assert_fail@plt+0xfd28>
   21438:	ldr	r3, [sp, #8]
   2143c:	mov	r0, r8
   21440:	mov	r2, r5
   21444:	bl	20e40 <__assert_fail@plt+0xf718>
   21448:	cmp	r0, #0
   2144c:	bne	215dc <__assert_fail@plt+0xfeb4>
   21450:	ldr	r9, [sp, #40]	; 0x28
   21454:	ldr	r0, [sp, #24]
   21458:	mov	r1, r7
   2145c:	str	r5, [sp, #32]
   21460:	str	r4, [r5, r9, lsl #2]
   21464:	bl	1d31c <__assert_fail@plt+0xbbf4>
   21468:	subs	r1, r0, #1
   2146c:	blt	21484 <__assert_fail@plt+0xfd5c>
   21470:	ldr	r2, [sp, #76]	; 0x4c
   21474:	cmp	r2, r0
   21478:	subge	r2, r2, #1
   2147c:	strge	r2, [sp, #76]	; 0x4c
   21480:	bgt	2149c <__assert_fail@plt+0xfd74>
   21484:	ldr	r0, [sp, #44]	; 0x2c
   21488:	add	r1, r7, r7, lsl #1
   2148c:	ldr	r0, [r0, #116]	; 0x74
   21490:	add	r0, r0, r1, lsl #3
   21494:	ldr	r3, [sp, #48]	; 0x30
   21498:	b	2155c <__assert_fail@plt+0xfe34>
   2149c:	ldr	r3, [sp, #80]	; 0x50
   214a0:	add	r0, r3, r0, lsl #2
   214a4:	ldr	r3, [r0]
   214a8:	add	r1, r1, #1
   214ac:	cmp	r1, r2
   214b0:	str	r3, [r0, #-4]
   214b4:	add	r0, r0, #4
   214b8:	blt	214a4 <__assert_fail@plt+0xfd7c>
   214bc:	b	21484 <__assert_fail@plt+0xfd5c>
   214c0:	ldr	r0, [r5]
   214c4:	cmp	r0, sl
   214c8:	bne	21558 <__assert_fail@plt+0xfe30>
   214cc:	ldr	r0, [r5, #8]
   214d0:	ldr	r1, [r5, #12]
   214d4:	subs	r0, r1, r0
   214d8:	add	r6, r0, r9
   214dc:	beq	214ec <__assert_fail@plt+0xfdc4>
   214e0:	ldr	r0, [r8, #12]
   214e4:	add	r0, r0, sl, lsl #2
   214e8:	b	214fc <__assert_fail@plt+0xfdd4>
   214ec:	ldr	r0, [r8, #20]
   214f0:	add	r1, sl, sl, lsl #1
   214f4:	add	r0, r0, r1, lsl #2
   214f8:	ldr	r0, [r0, #8]
   214fc:	ldr	r1, [r3, #12]
   21500:	cmp	r6, r1
   21504:	bgt	21558 <__assert_fail@plt+0xfe30>
   21508:	ldr	r1, [r3]
   2150c:	ldr	r1, [r1, r6, lsl #2]
   21510:	cmp	r1, #0
   21514:	beq	21558 <__assert_fail@plt+0xfe30>
   21518:	ldr	r4, [r0]
   2151c:	add	r0, r1, #4
   21520:	mov	r1, r4
   21524:	bl	1d31c <__assert_fail@plt+0xbbf4>
   21528:	cmp	r0, #0
   2152c:	beq	21550 <__assert_fail@plt+0xfe28>
   21530:	stm	sp, {r4, r6}
   21534:	mov	r2, sl
   21538:	mov	r3, r9
   2153c:	ldr	r0, [sp, #44]	; 0x2c
   21540:	ldr	r1, [sp, #28]
   21544:	bl	21a18 <__assert_fail@plt+0x102f0>
   21548:	cmp	r0, #0
   2154c:	beq	213b0 <__assert_fail@plt+0xfc88>
   21550:	mov	r0, r5
   21554:	b	21494 <__assert_fail@plt+0xfd6c>
   21558:	mov	r0, r5
   2155c:	add	r5, r0, #24
   21560:	ldrb	r0, [r0, #20]
   21564:	add	r7, r7, #1
   21568:	cmp	r0, #0
   2156c:	bne	214c0 <__assert_fail@plt+0xfd98>
   21570:	ldr	r0, [sp, #36]	; 0x24
   21574:	ldr	r7, [sp, #20]
   21578:	ldr	r6, [sp, #32]
   2157c:	ldr	r0, [r0, #4]
   21580:	add	r7, r7, #1
   21584:	cmp	r7, r0
   21588:	blt	2134c <__assert_fail@plt+0xfc24>
   2158c:	mov	r9, #0
   21590:	cmp	r6, #0
   21594:	beq	215a0 <__assert_fail@plt+0xfe78>
   21598:	ldr	r0, [sp, #80]	; 0x50
   2159c:	bl	132d4 <__assert_fail@plt+0x1bac>
   215a0:	cmp	r9, #0
   215a4:	str	r9, [sp, #52]	; 0x34
   215a8:	moveq	r9, #0
   215ac:	b	215c4 <__assert_fail@plt+0xfe9c>
   215b0:	mov	r0, #0
   215b4:	str	r0, [sp, #52]	; 0x34
   215b8:	b	215c0 <__assert_fail@plt+0xfe98>
   215bc:	str	r6, [sp, #52]	; 0x34
   215c0:	mov	r9, #0
   215c4:	mov	r0, r9
   215c8:	sub	sp, fp, #28
   215cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   215d0:	mov	r9, r0
   215d4:	str	r9, [sp, #52]	; 0x34
   215d8:	b	215c4 <__assert_fail@plt+0xfe9c>
   215dc:	mov	r9, r0
   215e0:	b	215f0 <__assert_fail@plt+0xfec8>
   215e4:	str	r0, [sp, #56]	; 0x38
   215e8:	b	215d4 <__assert_fail@plt+0xfeac>
   215ec:	mov	r9, #12
   215f0:	ldr	r6, [sp, #56]	; 0x38
   215f4:	b	21590 <__assert_fail@plt+0xfe68>
   215f8:	mov	r9, r0
   215fc:	b	215c4 <__assert_fail@plt+0xfe9c>
   21600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21604:	add	fp, sp, #28
   21608:	sub	sp, sp, #12
   2160c:	ldr	ip, [r1, #4]
   21610:	mov	sl, r0
   21614:	mov	r0, #0
   21618:	cmp	ip, #0
   2161c:	ldrne	lr, [r2, #4]
   21620:	cmpne	lr, #0
   21624:	beq	217f8 <__assert_fail@plt+0x100d0>
   21628:	mov	r7, r1
   2162c:	ldr	r1, [sl, #4]
   21630:	ldr	r6, [sl]
   21634:	add	r3, lr, ip
   21638:	add	r4, r1, r3
   2163c:	cmp	r4, r6
   21640:	ble	21684 <__assert_fail@plt+0xff5c>
   21644:	mov	r5, r2
   21648:	mov	r2, sl
   2164c:	add	r4, r6, r3
   21650:	ldr	r0, [r2, #8]!
   21654:	lsl	r1, r4, #2
   21658:	str	r2, [sp, #8]
   2165c:	bl	22ad0 <__assert_fail@plt+0x113a8>
   21660:	cmp	r0, #0
   21664:	beq	21800 <__assert_fail@plt+0x100d8>
   21668:	str	r4, [sl]
   2166c:	str	r0, [sl, #8]
   21670:	mov	r2, r5
   21674:	ldr	r1, [sl, #4]
   21678:	ldr	lr, [r5, #4]
   2167c:	ldr	ip, [r7, #4]
   21680:	b	2168c <__assert_fail@plt+0xff64>
   21684:	add	r0, sl, #8
   21688:	str	r0, [sp, #8]
   2168c:	str	r2, [sp, #4]
   21690:	ldr	r2, [r2, #8]
   21694:	ldr	r4, [r7, #8]
   21698:	add	r3, ip, r1
   2169c:	sub	r8, r1, #1
   216a0:	add	r9, r3, lr
   216a4:	sub	ip, ip, #1
   216a8:	sub	r3, lr, #1
   216ac:	ldr	r1, [r2, r3, lsl #2]
   216b0:	ldr	r6, [r4, ip, lsl #2]
   216b4:	cmp	r6, r1
   216b8:	beq	216e4 <__assert_fail@plt+0xffbc>
   216bc:	blt	216d4 <__assert_fail@plt+0xffac>
   216c0:	sub	r5, ip, #1
   216c4:	cmp	ip, #0
   216c8:	mov	ip, r5
   216cc:	bgt	216b0 <__assert_fail@plt+0xff88>
   216d0:	b	21758 <__assert_fail@plt+0x10030>
   216d4:	cmp	lr, #2
   216d8:	mov	lr, r3
   216dc:	bge	216a8 <__assert_fail@plt+0xff80>
   216e0:	b	21758 <__assert_fail@plt+0x10030>
   216e4:	mov	r0, r9
   216e8:	cmp	r8, #0
   216ec:	blt	21730 <__assert_fail@plt+0x10008>
   216f0:	ldr	r1, [sp, #8]
   216f4:	ldr	r9, [r1]
   216f8:	mov	r1, r8
   216fc:	ldr	r5, [r9, r1, lsl #2]
   21700:	cmp	r5, r6
   21704:	ble	2171c <__assert_fail@plt+0xfff4>
   21708:	sub	r8, r1, #1
   2170c:	cmp	r1, #0
   21710:	mov	r1, r8
   21714:	bgt	216fc <__assert_fail@plt+0xffd4>
   21718:	b	21730 <__assert_fail@plt+0x10008>
   2171c:	mov	r8, r1
   21720:	bne	21730 <__assert_fail@plt+0x10008>
   21724:	mov	r8, r1
   21728:	mov	r9, r0
   2172c:	b	21744 <__assert_fail@plt+0x1001c>
   21730:	ldr	r1, [sp, #8]
   21734:	mov	r9, r0
   21738:	sub	r9, r0, #1
   2173c:	ldr	r1, [r1]
   21740:	str	r6, [r1, r9, lsl #2]
   21744:	cmp	ip, #1
   21748:	blt	21758 <__assert_fail@plt+0x10030>
   2174c:	cmp	lr, #2
   21750:	mov	lr, r3
   21754:	bge	216a4 <__assert_fail@plt+0xff7c>
   21758:	ldr	lr, [r7, #4]
   2175c:	ldr	r7, [sp, #4]
   21760:	ldr	r2, [sl, #4]
   21764:	ldr	r0, [sl, #8]
   21768:	ldr	r4, [r7, #4]
   2176c:	subs	r1, r2, #1
   21770:	add	r3, r1, lr
   21774:	add	r3, r3, r4
   21778:	sub	r5, r3, r9
   2177c:	add	r6, r5, #1
   21780:	cmpge	r5, #0
   21784:	add	r7, r6, r2
   21788:	str	r7, [sl, #4]
   2178c:	blt	217e4 <__assert_fail@plt+0x100bc>
   21790:	add	r2, r2, r4
   21794:	add	r2, r2, lr
   21798:	sub	r2, r2, r9
   2179c:	add	r7, r0, r2, lsl #2
   217a0:	ldr	r2, [r0, r1, lsl #2]
   217a4:	ldr	r5, [r0, r3, lsl #2]
   217a8:	cmp	r5, r2
   217ac:	bgt	217c8 <__assert_fail@plt+0x100a0>
   217b0:	str	r2, [r7, r1, lsl #2]
   217b4:	sub	r2, r1, #1
   217b8:	cmp	r1, #0
   217bc:	mov	r1, r2
   217c0:	bgt	217a0 <__assert_fail@plt+0x10078>
   217c4:	b	217e4 <__assert_fail@plt+0x100bc>
   217c8:	str	r5, [r7, r1, lsl #2]
   217cc:	sub	r7, r7, #4
   217d0:	subs	r6, r6, #1
   217d4:	sub	r3, r3, #1
   217d8:	mov	r2, #0
   217dc:	bne	217a0 <__assert_fail@plt+0x10078>
   217e0:	b	217e8 <__assert_fail@plt+0x100c0>
   217e4:	mov	r2, r6
   217e8:	add	r1, r0, r9, lsl #2
   217ec:	lsl	r2, r2, #2
   217f0:	bl	11464 <memcpy@plt>
   217f4:	mov	r0, #0
   217f8:	sub	sp, fp, #28
   217fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21800:	mov	r0, #12
   21804:	b	217f8 <__assert_fail@plt+0x100d0>
   21808:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2180c:	add	fp, sp, #28
   21810:	sub	sp, sp, #36	; 0x24
   21814:	mov	r5, r2
   21818:	mov	r2, r0
   2181c:	ldr	r0, [r0, #28]
   21820:	str	r1, [sp, #20]
   21824:	add	r1, r1, r1, lsl #1
   21828:	mov	r9, #0
   2182c:	str	r3, [sp, #4]
   21830:	str	r9, [sp, #28]
   21834:	str	r9, [sp, #24]
   21838:	str	r9, [sp, #32]
   2183c:	add	r1, r0, r1, lsl #2
   21840:	mov	r0, r1
   21844:	ldr	r4, [r0, #4]!
   21848:	cmp	r4, #1
   2184c:	blt	219f0 <__assert_fail@plt+0x102c8>
   21850:	add	r9, r1, #8
   21854:	mov	r6, #0
   21858:	str	r0, [sp, #8]
   2185c:	str	r1, [sp, #16]
   21860:	ldr	r0, [r9]
   21864:	ldr	r1, [sp, #20]
   21868:	ldr	r0, [r0, r6, lsl #2]
   2186c:	cmp	r0, r1
   21870:	beq	21948 <__assert_fail@plt+0x10220>
   21874:	ldr	r1, [r2]
   21878:	add	r1, r1, r0, lsl #3
   2187c:	ldrb	r1, [r1, #4]
   21880:	tst	r1, #8
   21884:	beq	21948 <__assert_fail@plt+0x10220>
   21888:	ldr	r1, [r2, #20]
   2188c:	add	r0, r0, r0, lsl #1
   21890:	mvn	sl, #0
   21894:	mov	r7, r2
   21898:	str	r0, [sp, #12]
   2189c:	add	r0, r1, r0, lsl #2
   218a0:	ldr	r1, [r0, #4]
   218a4:	ldr	r0, [r0, #8]
   218a8:	cmp	r1, #2
   218ac:	ldr	r8, [r0]
   218b0:	ldrge	sl, [r0, #4]
   218b4:	ldr	r0, [sp, #16]
   218b8:	mov	r1, r8
   218bc:	bl	1d31c <__assert_fail@plt+0xbbf4>
   218c0:	cmp	r0, #0
   218c4:	mov	r2, r7
   218c8:	beq	21904 <__assert_fail@plt+0x101dc>
   218cc:	cmp	sl, #1
   218d0:	blt	21948 <__assert_fail@plt+0x10220>
   218d4:	ldr	r0, [sp, #16]
   218d8:	mov	r1, sl
   218dc:	bl	1d31c <__assert_fail@plt+0xbbf4>
   218e0:	cmp	r0, #0
   218e4:	bne	21944 <__assert_fail@plt+0x1021c>
   218e8:	mov	r0, r5
   218ec:	mov	r1, sl
   218f0:	bl	1d31c <__assert_fail@plt+0xbbf4>
   218f4:	cmp	r0, #0
   218f8:	mov	r2, r7
   218fc:	bne	2191c <__assert_fail@plt+0x101f4>
   21900:	b	21948 <__assert_fail@plt+0x10220>
   21904:	mov	r0, r5
   21908:	mov	r1, r8
   2190c:	bl	1d31c <__assert_fail@plt+0xbbf4>
   21910:	mov	r2, r7
   21914:	cmp	r0, #0
   21918:	beq	218cc <__assert_fail@plt+0x101a4>
   2191c:	ldr	r0, [r2, #28]
   21920:	ldr	r1, [sp, #12]
   21924:	add	r2, r0, r1, lsl #2
   21928:	ldr	r1, [sp, #4]
   2192c:	add	r0, sp, #24
   21930:	bl	21600 <__assert_fail@plt+0xfed8>
   21934:	cmp	r0, #0
   21938:	bne	21a04 <__assert_fail@plt+0x102dc>
   2193c:	ldr	r0, [sp, #8]
   21940:	ldr	r4, [r0]
   21944:	mov	r2, r7
   21948:	add	r6, r6, #1
   2194c:	cmp	r6, r4
   21950:	blt	21860 <__assert_fail@plt+0x10138>
   21954:	ldr	sl, [sp, #8]
   21958:	ldr	r0, [sp, #16]
   2195c:	cmp	r4, #1
   21960:	mov	r9, #0
   21964:	blt	219f0 <__assert_fail@plt+0x102c8>
   21968:	ldr	r7, [r0, #8]
   2196c:	mov	r4, #0
   21970:	add	r8, sp, #24
   21974:	b	219a0 <__assert_fail@plt+0x10278>
   21978:	ldr	r2, [r5, #8]
   2197c:	add	r0, r2, r0, lsl #2
   21980:	ldr	r2, [r0]
   21984:	add	r1, r1, #1
   21988:	str	r2, [r0, #-4]
   2198c:	add	r0, r0, #4
   21990:	ldr	r2, [r5, #4]
   21994:	cmp	r1, r2
   21998:	blt	21980 <__assert_fail@plt+0x10258>
   2199c:	b	219e0 <__assert_fail@plt+0x102b8>
   219a0:	ldr	r6, [r7, r4, lsl #2]
   219a4:	mov	r0, r8
   219a8:	mov	r1, r6
   219ac:	bl	1d31c <__assert_fail@plt+0xbbf4>
   219b0:	cmp	r0, #0
   219b4:	bne	219e0 <__assert_fail@plt+0x102b8>
   219b8:	mov	r0, r5
   219bc:	mov	r1, r6
   219c0:	bl	1d31c <__assert_fail@plt+0xbbf4>
   219c4:	subs	r1, r0, #1
   219c8:	blt	219e0 <__assert_fail@plt+0x102b8>
   219cc:	ldr	r2, [r5, #4]
   219d0:	cmp	r2, r0
   219d4:	subge	r2, r2, #1
   219d8:	strge	r2, [r5, #4]
   219dc:	bgt	21978 <__assert_fail@plt+0x10250>
   219e0:	ldr	r0, [sl]
   219e4:	add	r4, r4, #1
   219e8:	cmp	r4, r0
   219ec:	blt	219a0 <__assert_fail@plt+0x10278>
   219f0:	ldr	r0, [sp, #32]
   219f4:	bl	132d4 <__assert_fail@plt+0x1bac>
   219f8:	mov	r0, r9
   219fc:	sub	sp, fp, #28
   21a00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21a04:	mov	r4, r0
   21a08:	ldr	r0, [sp, #32]
   21a0c:	bl	132d4 <__assert_fail@plt+0x1bac>
   21a10:	mov	r9, r4
   21a14:	b	219f8 <__assert_fail@plt+0x102d0>
   21a18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a1c:	add	fp, sp, #28
   21a20:	sub	sp, sp, #20
   21a24:	mov	r6, r1
   21a28:	mov	r1, r3
   21a2c:	str	r2, [sp, #12]
   21a30:	mov	r7, r0
   21a34:	str	r3, [sp, #16]
   21a38:	bl	1ed30 <__assert_fail@plt+0xd608>
   21a3c:	ldr	r1, [fp, #12]
   21a40:	str	r0, [sp, #8]
   21a44:	mov	r0, r7
   21a48:	bl	1ed30 <__assert_fail@plt+0xd608>
   21a4c:	mov	r4, r0
   21a50:	ldr	r0, [r6, #4]
   21a54:	cmp	r0, #1
   21a58:	blt	21adc <__assert_fail@plt+0x103b4>
   21a5c:	ldr	sl, [r7, #84]	; 0x54
   21a60:	mov	r5, #0
   21a64:	ldr	r0, [r6, #8]
   21a68:	ldr	r2, [r7, #116]	; 0x74
   21a6c:	ldr	r3, [sp, #12]
   21a70:	ldr	r1, [r0, r5, lsl #2]
   21a74:	add	r0, r1, r1, lsl #1
   21a78:	ldr	r0, [r2, r0, lsl #3]
   21a7c:	ldr	r2, [sl]
   21a80:	ldr	r9, [r2, r0, lsl #3]
   21a84:	ldr	r0, [sp, #16]
   21a88:	str	r0, [sp]
   21a8c:	ldr	r0, [sp, #8]
   21a90:	mov	r2, r9
   21a94:	str	r0, [sp, #4]
   21a98:	mov	r0, r7
   21a9c:	bl	21af0 <__assert_fail@plt+0x103c8>
   21aa0:	mov	r8, r0
   21aa4:	ldr	r0, [r6, #8]
   21aa8:	ldr	r3, [fp, #8]
   21aac:	mov	r2, r9
   21ab0:	ldr	r1, [r0, r5, lsl #2]
   21ab4:	ldr	r0, [fp, #12]
   21ab8:	stm	sp, {r0, r4}
   21abc:	mov	r0, r7
   21ac0:	bl	21af0 <__assert_fail@plt+0x103c8>
   21ac4:	cmp	r0, r8
   21ac8:	bne	21ae4 <__assert_fail@plt+0x103bc>
   21acc:	ldr	r0, [r6, #4]
   21ad0:	add	r5, r5, #1
   21ad4:	cmp	r5, r0
   21ad8:	blt	21a64 <__assert_fail@plt+0x1033c>
   21adc:	mov	r0, #0
   21ae0:	b	21ae8 <__assert_fail@plt+0x103c0>
   21ae4:	mov	r0, #1
   21ae8:	sub	sp, fp, #28
   21aec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21af0:	push	{r4, r5, fp, lr}
   21af4:	add	fp, sp, #8
   21af8:	sub	sp, sp, #8
   21afc:	ldr	r4, [r0, #116]	; 0x74
   21b00:	add	r1, r1, r1, lsl #1
   21b04:	ldr	lr, [fp, #8]
   21b08:	add	r4, r4, r1, lsl #3
   21b0c:	mvn	r1, #0
   21b10:	ldr	ip, [r4, #8]
   21b14:	cmp	ip, lr
   21b18:	bgt	21b68 <__assert_fail@plt+0x10440>
   21b1c:	ldr	r4, [r4, #12]
   21b20:	mov	r1, #1
   21b24:	cmp	r4, lr
   21b28:	blt	21b68 <__assert_fail@plt+0x10440>
   21b2c:	sub	r1, r4, lr
   21b30:	mov	r5, #1
   21b34:	cmp	ip, lr
   21b38:	clz	r1, r1
   21b3c:	lsr	r4, r1, #5
   21b40:	lsl	r1, r4, #1
   21b44:	orreq	r1, r5, r4, lsl #1
   21b48:	cmp	r1, #0
   21b4c:	beq	21b64 <__assert_fail@plt+0x1043c>
   21b50:	ldr	r5, [fp, #12]
   21b54:	str	r5, [sp]
   21b58:	bl	21b74 <__assert_fail@plt+0x1044c>
   21b5c:	sub	sp, fp, #8
   21b60:	pop	{r4, r5, fp, pc}
   21b64:	mov	r1, #0
   21b68:	mov	r0, r1
   21b6c:	sub	sp, fp, #8
   21b70:	pop	{r4, r5, fp, pc}
   21b74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b78:	add	fp, sp, #28
   21b7c:	sub	sp, sp, #36	; 0x24
   21b80:	ldr	r4, [r0, #84]	; 0x54
   21b84:	mov	r7, r0
   21b88:	mov	r5, r1
   21b8c:	add	r1, r3, r3, lsl #1
   21b90:	str	r3, [sp, #32]
   21b94:	ldr	r0, [r4, #24]
   21b98:	add	r1, r0, r1, lsl #2
   21b9c:	mov	lr, r1
   21ba0:	ldr	r0, [lr, #4]!
   21ba4:	cmp	r0, #1
   21ba8:	blt	21d44 <__assert_fail@plt+0x1061c>
   21bac:	mov	ip, #1
   21bb0:	mov	r6, r2
   21bb4:	and	r3, r5, #2
   21bb8:	mov	sl, #0
   21bbc:	mvn	r2, ip, lsl r2
   21bc0:	cmp	r6, #31
   21bc4:	str	r3, [sp, #16]
   21bc8:	str	r2, [sp, #24]
   21bcc:	lsl	r2, ip, r6
   21bd0:	and	ip, r5, #1
   21bd4:	str	r2, [sp, #28]
   21bd8:	mov	r2, #0
   21bdc:	str	ip, [sp, #12]
   21be0:	movwgt	r2, #1
   21be4:	orr	r2, r2, r3, lsr #1
   21be8:	add	r3, r1, #8
   21bec:	str	r2, [sp, #20]
   21bf0:	stmib	sp, {r3, lr}
   21bf4:	ldr	r1, [r3]
   21bf8:	ldr	r9, [r1, sl, lsl #2]
   21bfc:	ldr	r1, [r4]
   21c00:	add	r2, r1, r9, lsl #3
   21c04:	ldrb	r2, [r2, #4]
   21c08:	cmp	r2, #9
   21c0c:	beq	21d08 <__assert_fail@plt+0x105e0>
   21c10:	cmp	r2, #8
   21c14:	beq	21d24 <__assert_fail@plt+0x105fc>
   21c18:	cmp	r2, #4
   21c1c:	bne	21d38 <__assert_fail@plt+0x10610>
   21c20:	ldr	r1, [fp, #8]
   21c24:	cmn	r1, #1
   21c28:	beq	21d38 <__assert_fail@plt+0x10610>
   21c2c:	ldr	r1, [fp, #8]
   21c30:	ldr	r0, [r7, #116]	; 0x74
   21c34:	add	r1, r1, r1, lsl #1
   21c38:	add	r0, r0, r1, lsl #3
   21c3c:	add	r8, r0, #16
   21c40:	ldr	r0, [r8, #-16]
   21c44:	cmp	r0, r9
   21c48:	bne	21ce4 <__assert_fail@plt+0x105bc>
   21c4c:	cmp	r6, #31
   21c50:	bgt	21c64 <__assert_fail@plt+0x1053c>
   21c54:	ldr	r0, [r8]
   21c58:	ldr	r1, [sp, #28]
   21c5c:	tst	r0, r1
   21c60:	beq	21ce4 <__assert_fail@plt+0x105bc>
   21c64:	ldr	r0, [r4, #20]
   21c68:	add	r1, r9, r9, lsl #1
   21c6c:	add	r0, r0, r1, lsl #2
   21c70:	ldr	r0, [r0, #8]
   21c74:	ldr	r3, [r0]
   21c78:	ldr	r0, [sp, #32]
   21c7c:	cmp	r3, r0
   21c80:	beq	21d4c <__assert_fail@plt+0x10624>
   21c84:	ldr	r0, [fp, #8]
   21c88:	mov	r1, r5
   21c8c:	mov	r2, r6
   21c90:	str	r0, [sp]
   21c94:	mov	r0, r7
   21c98:	bl	21b74 <__assert_fail@plt+0x1044c>
   21c9c:	cmp	r0, #0
   21ca0:	beq	21cb8 <__assert_fail@plt+0x10590>
   21ca4:	cmn	r0, #1
   21ca8:	beq	21d64 <__assert_fail@plt+0x1063c>
   21cac:	cmp	r6, #31
   21cb0:	ble	21cd4 <__assert_fail@plt+0x105ac>
   21cb4:	b	21ce4 <__assert_fail@plt+0x105bc>
   21cb8:	ldr	r0, [sp, #20]
   21cbc:	cmp	r0, #0
   21cc0:	beq	21cd4 <__assert_fail@plt+0x105ac>
   21cc4:	ldr	r0, [sp, #16]
   21cc8:	cmp	r0, #0
   21ccc:	beq	21ce4 <__assert_fail@plt+0x105bc>
   21cd0:	b	21d58 <__assert_fail@plt+0x10630>
   21cd4:	ldr	r0, [r8]
   21cd8:	ldr	r1, [sp, #24]
   21cdc:	and	r0, r0, r1
   21ce0:	str	r0, [r8]
   21ce4:	ldrb	r0, [r8, #4]
   21ce8:	add	r8, r8, #24
   21cec:	cmp	r0, #0
   21cf0:	bne	21c40 <__assert_fail@plt+0x10518>
   21cf4:	ldr	lr, [sp, #8]
   21cf8:	ldr	ip, [sp, #12]
   21cfc:	ldr	r3, [sp, #4]
   21d00:	ldr	r0, [lr]
   21d04:	b	21d38 <__assert_fail@plt+0x10610>
   21d08:	ldr	r2, [sp, #16]
   21d0c:	cmp	r2, #0
   21d10:	beq	21d38 <__assert_fail@plt+0x10610>
   21d14:	ldr	r1, [r1, r9, lsl #3]
   21d18:	cmp	r1, r6
   21d1c:	bne	21d38 <__assert_fail@plt+0x10610>
   21d20:	b	21d58 <__assert_fail@plt+0x10630>
   21d24:	cmp	ip, #0
   21d28:	beq	21d38 <__assert_fail@plt+0x10610>
   21d2c:	ldr	r1, [r1, r9, lsl #3]
   21d30:	cmp	r1, r6
   21d34:	beq	21d60 <__assert_fail@plt+0x10638>
   21d38:	add	sl, sl, #1
   21d3c:	cmp	sl, r0
   21d40:	blt	21bf4 <__assert_fail@plt+0x104cc>
   21d44:	ubfx	r0, r5, #1, #1
   21d48:	b	21d64 <__assert_fail@plt+0x1063c>
   21d4c:	ldr	r0, [sp, #12]
   21d50:	rsb	r0, r0, #0
   21d54:	b	21d64 <__assert_fail@plt+0x1063c>
   21d58:	mov	r0, #0
   21d5c:	b	21d64 <__assert_fail@plt+0x1063c>
   21d60:	mvn	r0, #0
   21d64:	sub	sp, fp, #28
   21d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d6c:	cmp	r0, #0
   21d70:	bxeq	lr
   21d74:	push	{r4, r5, r6, sl, fp, lr}
   21d78:	add	fp, sp, #16
   21d7c:	ldr	r1, [r0]
   21d80:	mov	r4, r0
   21d84:	ldr	r0, [r0, #8]
   21d88:	cmp	r1, #1
   21d8c:	blt	21dcc <__assert_fail@plt+0x106a4>
   21d90:	mov	r5, #0
   21d94:	mov	r6, #0
   21d98:	add	r0, r0, r5
   21d9c:	ldr	r0, [r0, #20]
   21da0:	bl	132d4 <__assert_fail@plt+0x1bac>
   21da4:	ldr	r0, [r4, #8]
   21da8:	add	r0, r0, r5
   21dac:	ldr	r0, [r0, #8]
   21db0:	bl	132d4 <__assert_fail@plt+0x1bac>
   21db4:	ldr	r1, [r4]
   21db8:	ldr	r0, [r4, #8]
   21dbc:	add	r6, r6, #1
   21dc0:	add	r5, r5, #24
   21dc4:	cmp	r6, r1
   21dc8:	blt	21d98 <__assert_fail@plt+0x10670>
   21dcc:	pop	{r4, r5, r6, sl, fp, lr}
   21dd0:	b	132d4 <__assert_fail@plt+0x1bac>
   21dd4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21dd8:	add	fp, sp, #24
   21ddc:	mov	r4, r0
   21de0:	mvn	r0, #0
   21de4:	cmp	r4, #0
   21de8:	beq	21e88 <__assert_fail@plt+0x10760>
   21dec:	mov	r5, r2
   21df0:	ldr	r2, [r4]
   21df4:	cmp	r2, #0
   21df8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   21dfc:	sub	r0, r2, #1
   21e00:	ldr	r9, [fp, #12]
   21e04:	ldr	r8, [fp, #8]
   21e08:	lsl	r7, r5, #3
   21e0c:	str	r0, [r4]
   21e10:	add	r6, r0, r0, lsl #1
   21e14:	ldr	r2, [r4, #8]
   21e18:	ldr	r0, [r2, r6, lsl #3]!
   21e1c:	str	r0, [r1]
   21e20:	mov	r0, r3
   21e24:	ldr	r1, [r2, #8]
   21e28:	mov	r2, r7
   21e2c:	bl	11464 <memcpy@plt>
   21e30:	ldr	r0, [r4, #8]
   21e34:	mov	r2, r7
   21e38:	add	r0, r0, r6, lsl #3
   21e3c:	ldr	r0, [r0, #8]
   21e40:	add	r1, r0, r5, lsl #3
   21e44:	mov	r0, r8
   21e48:	bl	11464 <memcpy@plt>
   21e4c:	ldr	r0, [r9, #8]
   21e50:	bl	132d4 <__assert_fail@plt+0x1bac>
   21e54:	ldr	r0, [r4, #8]
   21e58:	add	r0, r0, r6, lsl #3
   21e5c:	ldr	r0, [r0, #8]
   21e60:	bl	132d4 <__assert_fail@plt+0x1bac>
   21e64:	ldr	r0, [r4, #8]
   21e68:	add	r0, r0, r6, lsl #3
   21e6c:	vldr	d16, [r0, #12]
   21e70:	ldr	r0, [r0, #20]
   21e74:	str	r0, [r9, #8]
   21e78:	vstr	d16, [r9]
   21e7c:	ldr	r0, [r4, #8]
   21e80:	add	r0, r0, r6, lsl #3
   21e84:	ldr	r0, [r0, #4]
   21e88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21e8c:	push	{r4, r5, fp, lr}
   21e90:	add	fp, sp, #8
   21e94:	mov	r4, r1
   21e98:	mov	r1, #0
   21e9c:	mov	r5, r0
   21ea0:	mov	r2, r4
   21ea4:	bl	1165c <memchr@plt>
   21ea8:	rsb	r1, r5, #1
   21eac:	cmp	r0, #0
   21eb0:	addne	r4, r1, r0
   21eb4:	mov	r0, r4
   21eb8:	pop	{r4, r5, fp, pc}
   21ebc:	push	{r4, sl, fp, lr}
   21ec0:	add	fp, sp, #8
   21ec4:	ldrb	r3, [r0]
   21ec8:	ldrb	ip, [r1]
   21ecc:	cmp	r3, #45	; 0x2d
   21ed0:	bne	21fa4 <__assert_fail@plt+0x1087c>
   21ed4:	ldrb	r3, [r0, #1]!
   21ed8:	cmp	r3, #48	; 0x30
   21edc:	beq	21ed4 <__assert_fail@plt+0x107ac>
   21ee0:	cmp	ip, #45	; 0x2d
   21ee4:	bne	220a8 <__assert_fail@plt+0x10980>
   21ee8:	ldrb	ip, [r1, #1]!
   21eec:	cmp	ip, #48	; 0x30
   21ef0:	beq	21ee8 <__assert_fail@plt+0x107c0>
   21ef4:	sub	lr, r3, #48	; 0x30
   21ef8:	cmp	lr, #9
   21efc:	bhi	21f3c <__assert_fail@plt+0x10814>
   21f00:	cmp	ip, r3
   21f04:	bne	21f3c <__assert_fail@plt+0x10814>
   21f08:	mov	r2, #0
   21f0c:	add	r3, r1, r2
   21f10:	ldrb	ip, [r3, #1]
   21f14:	add	r3, r0, r2
   21f18:	add	r2, r2, #1
   21f1c:	ldrb	r3, [r3, #1]
   21f20:	sub	lr, r3, #48	; 0x30
   21f24:	cmp	ip, r3
   21f28:	bne	21f34 <__assert_fail@plt+0x1080c>
   21f2c:	cmp	lr, #10
   21f30:	bcc	21f0c <__assert_fail@plt+0x107e4>
   21f34:	add	r1, r1, r2
   21f38:	add	r0, r0, r2
   21f3c:	cmp	lr, #9
   21f40:	mov	r2, #0
   21f44:	mov	lr, #0
   21f48:	bhi	21f68 <__assert_fail@plt+0x10840>
   21f4c:	add	r0, r0, #1
   21f50:	mov	lr, #0
   21f54:	ldrb	r4, [r0, lr]
   21f58:	add	lr, lr, #1
   21f5c:	sub	r4, r4, #48	; 0x30
   21f60:	cmp	r4, #10
   21f64:	bcc	21f54 <__assert_fail@plt+0x1082c>
   21f68:	sub	r0, ip, #48	; 0x30
   21f6c:	cmp	r0, #9
   21f70:	bhi	21f90 <__assert_fail@plt+0x10868>
   21f74:	add	r0, r1, #1
   21f78:	mov	r2, #0
   21f7c:	ldrb	r1, [r0, r2]
   21f80:	add	r2, r2, #1
   21f84:	sub	r1, r1, #48	; 0x30
   21f88:	cmp	r1, #10
   21f8c:	bcc	21f7c <__assert_fail@plt+0x10854>
   21f90:	cmp	lr, r2
   21f94:	bne	220e0 <__assert_fail@plt+0x109b8>
   21f98:	cmp	lr, #0
   21f9c:	subne	lr, ip, r3
   21fa0:	b	220f4 <__assert_fail@plt+0x109cc>
   21fa4:	cmp	ip, #45	; 0x2d
   21fa8:	bne	21ff8 <__assert_fail@plt+0x108d0>
   21fac:	add	r1, r1, #1
   21fb0:	ldrb	r2, [r1], #1
   21fb4:	cmp	r2, #48	; 0x30
   21fb8:	beq	21fb0 <__assert_fail@plt+0x10888>
   21fbc:	sub	r1, r2, #48	; 0x30
   21fc0:	mov	lr, #1
   21fc4:	cmp	r1, #10
   21fc8:	bcc	220f4 <__assert_fail@plt+0x109cc>
   21fcc:	cmp	r3, #48	; 0x30
   21fd0:	bne	21fe4 <__assert_fail@plt+0x108bc>
   21fd4:	add	r0, r0, #1
   21fd8:	ldrb	r3, [r0], #1
   21fdc:	cmp	r3, #48	; 0x30
   21fe0:	beq	21fd8 <__assert_fail@plt+0x108b0>
   21fe4:	sub	r0, r3, #48	; 0x30
   21fe8:	mov	lr, #0
   21fec:	cmp	r0, #10
   21ff0:	b	220e4 <__assert_fail@plt+0x109bc>
   21ff4:	ldrb	r3, [r0, #1]!
   21ff8:	cmp	r3, #48	; 0x30
   21ffc:	beq	21ff4 <__assert_fail@plt+0x108cc>
   22000:	b	22008 <__assert_fail@plt+0x108e0>
   22004:	ldrb	ip, [r1, #1]!
   22008:	cmp	ip, #48	; 0x30
   2200c:	beq	22004 <__assert_fail@plt+0x108dc>
   22010:	sub	r2, r3, #48	; 0x30
   22014:	cmp	r2, #9
   22018:	bhi	22040 <__assert_fail@plt+0x10918>
   2201c:	cmp	r3, ip
   22020:	bne	22040 <__assert_fail@plt+0x10918>
   22024:	ldrb	r3, [r0, #1]!
   22028:	ldrb	ip, [r1, #1]!
   2202c:	sub	r2, r3, #48	; 0x30
   22030:	cmp	r3, ip
   22034:	bne	22040 <__assert_fail@plt+0x10918>
   22038:	cmp	r2, #10
   2203c:	bcc	22024 <__assert_fail@plt+0x108fc>
   22040:	mov	r4, #0
   22044:	cmp	r2, #9
   22048:	mov	lr, #0
   2204c:	bhi	2206c <__assert_fail@plt+0x10944>
   22050:	add	r0, r0, #1
   22054:	mov	lr, #0
   22058:	ldrb	r2, [r0, lr]
   2205c:	add	lr, lr, #1
   22060:	sub	r2, r2, #48	; 0x30
   22064:	cmp	r2, #10
   22068:	bcc	22058 <__assert_fail@plt+0x10930>
   2206c:	sub	r0, ip, #48	; 0x30
   22070:	cmp	r0, #9
   22074:	bhi	22094 <__assert_fail@plt+0x1096c>
   22078:	add	r0, r1, #1
   2207c:	mov	r4, #0
   22080:	ldrb	r1, [r0, r4]
   22084:	add	r4, r4, #1
   22088:	sub	r1, r1, #48	; 0x30
   2208c:	cmp	r1, #10
   22090:	bcc	22080 <__assert_fail@plt+0x10958>
   22094:	cmp	lr, r4
   22098:	bne	220ec <__assert_fail@plt+0x109c4>
   2209c:	cmp	lr, #0
   220a0:	subne	lr, r3, ip
   220a4:	b	220f4 <__assert_fail@plt+0x109cc>
   220a8:	sub	r0, r3, #48	; 0x30
   220ac:	mvn	lr, #0
   220b0:	cmp	r0, #10
   220b4:	bcc	220f4 <__assert_fail@plt+0x109cc>
   220b8:	cmp	ip, #48	; 0x30
   220bc:	bne	220d0 <__assert_fail@plt+0x109a8>
   220c0:	add	r0, r1, #1
   220c4:	ldrb	ip, [r0], #1
   220c8:	cmp	ip, #48	; 0x30
   220cc:	beq	220c4 <__assert_fail@plt+0x1099c>
   220d0:	sub	r0, ip, #48	; 0x30
   220d4:	mov	lr, #0
   220d8:	cmp	r0, #10
   220dc:	b	220f0 <__assert_fail@plt+0x109c8>
   220e0:	mvn	lr, #0
   220e4:	movwcc	lr, #1
   220e8:	b	220f4 <__assert_fail@plt+0x109cc>
   220ec:	mov	lr, #1
   220f0:	mvncc	lr, #0
   220f4:	mov	r0, lr
   220f8:	pop	{r4, sl, fp, pc}
   220fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22100:	add	fp, sp, #24
   22104:	sub	sp, sp, #32
   22108:	ldr	r6, [fp, #12]
   2210c:	ldr	r7, [fp, #8]
   22110:	mov	r4, r2
   22114:	mov	r8, r0
   22118:	cmp	r1, #0
   2211c:	beq	22144 <__assert_fail@plt+0x10a1c>
   22120:	movw	r2, #16377	; 0x3ff9
   22124:	mov	r5, r1
   22128:	str	r3, [sp, #4]
   2212c:	str	r4, [sp]
   22130:	mov	r0, r8
   22134:	mov	r1, #1
   22138:	movt	r2, #2
   2213c:	mov	r3, r5
   22140:	b	2215c <__assert_fail@plt+0x10a34>
   22144:	movw	r2, #16389	; 0x4005
   22148:	str	r3, [sp]
   2214c:	mov	r0, r8
   22150:	mov	r1, #1
   22154:	mov	r3, r4
   22158:	movt	r2, #2
   2215c:	bl	11650 <__fprintf_chk@plt>
   22160:	movw	r1, #16396	; 0x400c
   22164:	mov	r0, #0
   22168:	mov	r2, #5
   2216c:	movt	r1, #2
   22170:	bl	114b8 <dcgettext@plt>
   22174:	movw	r2, #17114	; 0x42da
   22178:	mov	r3, r0
   2217c:	movw	r0, #2022	; 0x7e6
   22180:	mov	r1, #1
   22184:	str	r0, [sp]
   22188:	movt	r2, #2
   2218c:	mov	r0, r8
   22190:	bl	11650 <__fprintf_chk@plt>
   22194:	movw	r4, #15002	; 0x3a9a
   22198:	mov	r1, r8
   2219c:	movt	r4, #2
   221a0:	mov	r0, r4
   221a4:	bl	113bc <fputs_unlocked@plt>
   221a8:	movw	r1, #16400	; 0x4010
   221ac:	mov	r0, #0
   221b0:	mov	r2, #5
   221b4:	movt	r1, #2
   221b8:	bl	114b8 <dcgettext@plt>
   221bc:	movw	r3, #16571	; 0x40bb
   221c0:	mov	r2, r0
   221c4:	mov	r0, r8
   221c8:	mov	r1, #1
   221cc:	movt	r3, #2
   221d0:	bl	11650 <__fprintf_chk@plt>
   221d4:	mov	r0, r4
   221d8:	mov	r1, r8
   221dc:	bl	113bc <fputs_unlocked@plt>
   221e0:	cmp	r6, #9
   221e4:	bhi	22248 <__assert_fail@plt+0x10b20>
   221e8:	add	r0, pc, #0
   221ec:	ldr	pc, [r0, r6, lsl #2]
   221f0:	andeq	r2, r2, r0, lsr #8
   221f4:	andeq	r2, r2, r8, lsl r2
   221f8:	andeq	r2, r2, r4, asr r2
   221fc:	andeq	r2, r2, ip, ror r2
   22200:	andeq	r2, r2, r4, lsr #5
   22204:	andeq	r2, r2, ip, asr #5
   22208:	strdeq	r2, [r2], -r4
   2220c:	andeq	r2, r2, ip, lsr #6
   22210:	andeq	r2, r2, ip, asr #7
   22214:	andeq	r2, r2, r4, ror r3
   22218:	movw	r1, #16605	; 0x40dd
   2221c:	mov	r0, #0
   22220:	mov	r2, #5
   22224:	movt	r1, #2
   22228:	bl	114b8 <dcgettext@plt>
   2222c:	ldr	r3, [r7]
   22230:	mov	r2, r0
   22234:	mov	r0, r8
   22238:	mov	r1, #1
   2223c:	sub	sp, fp, #24
   22240:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   22244:	b	11650 <__fprintf_chk@plt>
   22248:	movw	r1, #16924	; 0x421c
   2224c:	movt	r1, #2
   22250:	b	2237c <__assert_fail@plt+0x10c54>
   22254:	movw	r1, #16621	; 0x40ed
   22258:	mov	r0, #0
   2225c:	mov	r2, #5
   22260:	movt	r1, #2
   22264:	bl	114b8 <dcgettext@plt>
   22268:	mov	r2, r0
   2226c:	ldr	r3, [r7]
   22270:	ldr	r0, [r7, #4]
   22274:	str	r0, [sp]
   22278:	b	22368 <__assert_fail@plt+0x10c40>
   2227c:	movw	r1, #16644	; 0x4104
   22280:	mov	r0, #0
   22284:	mov	r2, #5
   22288:	movt	r1, #2
   2228c:	bl	114b8 <dcgettext@plt>
   22290:	ldr	r3, [r7]
   22294:	mov	r2, r0
   22298:	ldmib	r7, {r0, r1}
   2229c:	stm	sp, {r0, r1}
   222a0:	b	22368 <__assert_fail@plt+0x10c40>
   222a4:	movw	r1, #16672	; 0x4120
   222a8:	mov	r0, #0
   222ac:	mov	r2, #5
   222b0:	movt	r1, #2
   222b4:	bl	114b8 <dcgettext@plt>
   222b8:	ldr	r3, [r7]
   222bc:	mov	r2, r0
   222c0:	ldmib	r7, {r0, r1, r7}
   222c4:	stm	sp, {r0, r1, r7}
   222c8:	b	22368 <__assert_fail@plt+0x10c40>
   222cc:	movw	r1, #16704	; 0x4140
   222d0:	mov	r0, #0
   222d4:	mov	r2, #5
   222d8:	movt	r1, #2
   222dc:	bl	114b8 <dcgettext@plt>
   222e0:	ldr	r3, [r7]
   222e4:	mov	r2, r0
   222e8:	ldmib	r7, {r0, r1, r6, r7}
   222ec:	stm	sp, {r0, r1, r6, r7}
   222f0:	b	22368 <__assert_fail@plt+0x10c40>
   222f4:	movw	r1, #16740	; 0x4164
   222f8:	mov	r0, #0
   222fc:	mov	r2, #5
   22300:	movt	r1, #2
   22304:	bl	114b8 <dcgettext@plt>
   22308:	ldr	r3, [r7]
   2230c:	mov	r2, r0
   22310:	ldmib	r7, {r0, r1, r6}
   22314:	ldr	r5, [r7, #16]
   22318:	ldr	r7, [r7, #20]
   2231c:	stm	sp, {r0, r1, r6}
   22320:	str	r5, [sp, #12]
   22324:	str	r7, [sp, #16]
   22328:	b	22368 <__assert_fail@plt+0x10c40>
   2232c:	movw	r1, #16780	; 0x418c
   22330:	mov	r0, #0
   22334:	mov	r2, #5
   22338:	movt	r1, #2
   2233c:	bl	114b8 <dcgettext@plt>
   22340:	ldr	r3, [r7]
   22344:	mov	r2, r0
   22348:	ldmib	r7, {r0, r1, r6}
   2234c:	ldr	r5, [r7, #16]
   22350:	ldr	r4, [r7, #20]
   22354:	ldr	r7, [r7, #24]
   22358:	stm	sp, {r0, r1, r6}
   2235c:	str	r5, [sp, #12]
   22360:	str	r4, [sp, #16]
   22364:	str	r7, [sp, #20]
   22368:	mov	r0, r8
   2236c:	mov	r1, #1
   22370:	b	2241c <__assert_fail@plt+0x10cf4>
   22374:	movw	r1, #16872	; 0x41e8
   22378:	movt	r1, #2
   2237c:	mov	r0, #0
   22380:	mov	r2, #5
   22384:	bl	114b8 <dcgettext@plt>
   22388:	mov	ip, r0
   2238c:	ldr	r3, [r7]
   22390:	ldr	r0, [r7, #4]
   22394:	ldr	r1, [r7, #8]
   22398:	ldr	r6, [r7, #12]
   2239c:	ldr	r5, [r7, #16]
   223a0:	ldr	r4, [r7, #20]
   223a4:	ldr	r2, [r7, #24]
   223a8:	ldr	lr, [r7, #28]
   223ac:	ldr	r7, [r7, #32]
   223b0:	stm	sp, {r0, r1, r6}
   223b4:	str	r5, [sp, #12]
   223b8:	str	r4, [sp, #16]
   223bc:	str	r2, [sp, #20]
   223c0:	str	lr, [sp, #24]
   223c4:	str	r7, [sp, #28]
   223c8:	b	22410 <__assert_fail@plt+0x10ce8>
   223cc:	movw	r1, #16824	; 0x41b8
   223d0:	mov	r0, #0
   223d4:	mov	r2, #5
   223d8:	movt	r1, #2
   223dc:	bl	114b8 <dcgettext@plt>
   223e0:	mov	ip, r0
   223e4:	ldr	r3, [r7]
   223e8:	ldmib	r7, {r0, r1, r6}
   223ec:	ldr	r5, [r7, #16]
   223f0:	ldr	r4, [r7, #20]
   223f4:	ldr	r2, [r7, #24]
   223f8:	ldr	r7, [r7, #28]
   223fc:	stm	sp, {r0, r1, r6}
   22400:	str	r5, [sp, #12]
   22404:	str	r4, [sp, #16]
   22408:	str	r2, [sp, #20]
   2240c:	str	r7, [sp, #24]
   22410:	mov	r0, r8
   22414:	mov	r1, #1
   22418:	mov	r2, ip
   2241c:	bl	11650 <__fprintf_chk@plt>
   22420:	sub	sp, fp, #24
   22424:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22428:	push	{r4, sl, fp, lr}
   2242c:	add	fp, sp, #8
   22430:	sub	sp, sp, #8
   22434:	ldr	ip, [fp, #8]
   22438:	mov	lr, #0
   2243c:	ldr	r4, [ip, lr, lsl #2]
   22440:	add	lr, lr, #1
   22444:	cmp	r4, #0
   22448:	bne	2243c <__assert_fail@plt+0x10d14>
   2244c:	sub	r4, lr, #1
   22450:	str	ip, [sp]
   22454:	str	r4, [sp, #4]
   22458:	bl	220fc <__assert_fail@plt+0x109d4>
   2245c:	sub	sp, fp, #8
   22460:	pop	{r4, sl, fp, pc}
   22464:	push	{r4, r5, fp, lr}
   22468:	add	fp, sp, #8
   2246c:	sub	sp, sp, #48	; 0x30
   22470:	ldr	r4, [fp, #8]
   22474:	mov	ip, #0
   22478:	add	lr, sp, #8
   2247c:	ldr	r5, [r4]
   22480:	cmp	r5, #0
   22484:	str	r5, [lr, ip, lsl #2]
   22488:	beq	2249c <__assert_fail@plt+0x10d74>
   2248c:	add	ip, ip, #1
   22490:	add	r4, r4, #4
   22494:	cmp	ip, #10
   22498:	bcc	2247c <__assert_fail@plt+0x10d54>
   2249c:	str	lr, [sp]
   224a0:	str	ip, [sp, #4]
   224a4:	bl	220fc <__assert_fail@plt+0x109d4>
   224a8:	sub	sp, fp, #8
   224ac:	pop	{r4, r5, fp, pc}
   224b0:	push	{fp, lr}
   224b4:	mov	fp, sp
   224b8:	sub	sp, sp, #8
   224bc:	add	ip, fp, #8
   224c0:	str	ip, [sp, #4]
   224c4:	str	ip, [sp]
   224c8:	bl	22464 <__assert_fail@plt+0x10d3c>
   224cc:	mov	sp, fp
   224d0:	pop	{fp, pc}
   224d4:	push	{fp, lr}
   224d8:	mov	fp, sp
   224dc:	movw	r0, #20900	; 0x51a4
   224e0:	movt	r0, #3
   224e4:	ldr	r1, [r0]
   224e8:	movw	r0, #15002	; 0x3a9a
   224ec:	movt	r0, #2
   224f0:	bl	113bc <fputs_unlocked@plt>
   224f4:	movw	r1, #16984	; 0x4258
   224f8:	mov	r0, #0
   224fc:	mov	r2, #5
   22500:	movt	r1, #2
   22504:	bl	114b8 <dcgettext@plt>
   22508:	movw	r2, #17004	; 0x426c
   2250c:	mov	r1, r0
   22510:	mov	r0, #1
   22514:	movt	r2, #2
   22518:	bl	11638 <__printf_chk@plt>
   2251c:	movw	r1, #17026	; 0x4282
   22520:	mov	r0, #0
   22524:	mov	r2, #5
   22528:	movt	r1, #2
   2252c:	bl	114b8 <dcgettext@plt>
   22530:	movw	r2, #14569	; 0x38e9
   22534:	movw	r3, #14811	; 0x39db
   22538:	mov	r1, r0
   2253c:	mov	r0, #1
   22540:	movt	r2, #2
   22544:	movt	r3, #2
   22548:	bl	11638 <__printf_chk@plt>
   2254c:	movw	r1, #17046	; 0x4296
   22550:	mov	r0, #0
   22554:	mov	r2, #5
   22558:	movt	r1, #2
   2255c:	bl	114b8 <dcgettext@plt>
   22560:	movw	r2, #17085	; 0x42bd
   22564:	mov	r1, r0
   22568:	mov	r0, #1
   2256c:	movt	r2, #2
   22570:	pop	{fp, lr}
   22574:	b	11638 <__printf_chk@plt>
   22578:	b	2257c <__assert_fail@plt+0x10e54>
   2257c:	push	{r4, r5, r6, sl, fp, lr}
   22580:	add	fp, sp, #16
   22584:	mov	r4, r2
   22588:	mov	r5, r1
   2258c:	mov	r6, r0
   22590:	bl	22f40 <__assert_fail@plt+0x11818>
   22594:	cmp	r0, #0
   22598:	popne	{r4, r5, r6, sl, fp, pc}
   2259c:	cmp	r6, #0
   225a0:	beq	225b4 <__assert_fail@plt+0x10e8c>
   225a4:	cmp	r5, #0
   225a8:	cmpne	r4, #0
   225ac:	bne	225b4 <__assert_fail@plt+0x10e8c>
   225b0:	pop	{r4, r5, r6, sl, fp, pc}
   225b4:	bl	22a08 <__assert_fail@plt+0x112e0>
   225b8:	push	{fp, lr}
   225bc:	mov	fp, sp
   225c0:	bl	22aa0 <__assert_fail@plt+0x11378>
   225c4:	cmp	r0, #0
   225c8:	popne	{fp, pc}
   225cc:	bl	22a08 <__assert_fail@plt+0x112e0>
   225d0:	push	{fp, lr}
   225d4:	mov	fp, sp
   225d8:	bl	22aa0 <__assert_fail@plt+0x11378>
   225dc:	cmp	r0, #0
   225e0:	popne	{fp, pc}
   225e4:	bl	22a08 <__assert_fail@plt+0x112e0>
   225e8:	push	{fp, lr}
   225ec:	mov	fp, sp
   225f0:	bl	22aa0 <__assert_fail@plt+0x11378>
   225f4:	cmp	r0, #0
   225f8:	popne	{fp, pc}
   225fc:	bl	22a08 <__assert_fail@plt+0x112e0>
   22600:	push	{r4, r5, fp, lr}
   22604:	add	fp, sp, #8
   22608:	mov	r4, r1
   2260c:	mov	r5, r0
   22610:	bl	22ad0 <__assert_fail@plt+0x113a8>
   22614:	cmp	r0, #0
   22618:	popne	{r4, r5, fp, pc}
   2261c:	cmp	r5, #0
   22620:	beq	22630 <__assert_fail@plt+0x10f08>
   22624:	cmp	r4, #0
   22628:	bne	22630 <__assert_fail@plt+0x10f08>
   2262c:	pop	{r4, r5, fp, pc}
   22630:	bl	22a08 <__assert_fail@plt+0x112e0>
   22634:	push	{fp, lr}
   22638:	mov	fp, sp
   2263c:	cmp	r1, #0
   22640:	orreq	r1, r1, #1
   22644:	bl	22ad0 <__assert_fail@plt+0x113a8>
   22648:	cmp	r0, #0
   2264c:	popne	{fp, pc}
   22650:	bl	22a08 <__assert_fail@plt+0x112e0>
   22654:	push	{fp, lr}
   22658:	mov	fp, sp
   2265c:	clz	r3, r2
   22660:	lsr	ip, r3, #5
   22664:	clz	r3, r1
   22668:	lsr	r3, r3, #5
   2266c:	orrs	r3, r3, ip
   22670:	movwne	r1, #1
   22674:	movwne	r2, #1
   22678:	bl	22f40 <__assert_fail@plt+0x11818>
   2267c:	cmp	r0, #0
   22680:	popne	{fp, pc}
   22684:	bl	22a08 <__assert_fail@plt+0x112e0>
   22688:	push	{fp, lr}
   2268c:	mov	fp, sp
   22690:	mov	r2, r1
   22694:	mov	r1, r0
   22698:	mov	r0, #0
   2269c:	bl	22f40 <__assert_fail@plt+0x11818>
   226a0:	cmp	r0, #0
   226a4:	popne	{fp, pc}
   226a8:	bl	22a08 <__assert_fail@plt+0x112e0>
   226ac:	mov	r2, r1
   226b0:	mov	r1, r0
   226b4:	mov	r0, #0
   226b8:	b	22654 <__assert_fail@plt+0x10f2c>
   226bc:	mov	r2, #1
   226c0:	b	226c4 <__assert_fail@plt+0x10f9c>
   226c4:	push	{r4, r5, fp, lr}
   226c8:	add	fp, sp, #8
   226cc:	ldr	r5, [r1]
   226d0:	mov	r4, r1
   226d4:	cmp	r0, #0
   226d8:	beq	226f0 <__assert_fail@plt+0x10fc8>
   226dc:	mov	r1, #1
   226e0:	add	r1, r1, r5, lsr #1
   226e4:	adds	r5, r5, r1
   226e8:	bcc	22708 <__assert_fail@plt+0x10fe0>
   226ec:	bl	22a08 <__assert_fail@plt+0x112e0>
   226f0:	cmp	r5, #0
   226f4:	bne	22708 <__assert_fail@plt+0x10fe0>
   226f8:	mov	r1, #64	; 0x40
   226fc:	cmp	r2, #64	; 0x40
   22700:	udiv	r5, r1, r2
   22704:	addhi	r5, r5, #1
   22708:	mov	r1, r5
   2270c:	bl	2257c <__assert_fail@plt+0x10e54>
   22710:	str	r5, [r4]
   22714:	pop	{r4, r5, fp, pc}
   22718:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2271c:	add	fp, sp, #24
   22720:	ldr	r6, [r1]
   22724:	mov	r8, r1
   22728:	ldr	r4, [fp, #8]
   2272c:	add	r1, r6, r6, asr #1
   22730:	cmp	r1, r6
   22734:	mvnvs	r1, #-2147483648	; 0x80000000
   22738:	cmp	r1, r3
   2273c:	mov	r5, r1
   22740:	movgt	r5, r3
   22744:	cmn	r3, #1
   22748:	movle	r5, r1
   2274c:	cmn	r4, #1
   22750:	ble	22770 <__assert_fail@plt+0x11048>
   22754:	cmp	r4, #0
   22758:	beq	227c4 <__assert_fail@plt+0x1109c>
   2275c:	cmn	r5, #1
   22760:	ble	22798 <__assert_fail@plt+0x11070>
   22764:	mvn	r7, #-2147483648	; 0x80000000
   22768:	udiv	r1, r7, r4
   2276c:	b	2278c <__assert_fail@plt+0x11064>
   22770:	cmn	r5, #1
   22774:	ble	227b4 <__assert_fail@plt+0x1108c>
   22778:	cmn	r4, #1
   2277c:	beq	227c4 <__assert_fail@plt+0x1109c>
   22780:	mov	r1, #-2147483648	; 0x80000000
   22784:	mvn	r7, #-2147483648	; 0x80000000
   22788:	sdiv	r1, r1, r4
   2278c:	cmp	r1, r5
   22790:	bge	227c4 <__assert_fail@plt+0x1109c>
   22794:	b	227d4 <__assert_fail@plt+0x110ac>
   22798:	beq	227c4 <__assert_fail@plt+0x1109c>
   2279c:	mov	r1, #-2147483648	; 0x80000000
   227a0:	mvn	r7, #-2147483648	; 0x80000000
   227a4:	sdiv	r1, r1, r5
   227a8:	cmp	r1, r4
   227ac:	bge	227c4 <__assert_fail@plt+0x1109c>
   227b0:	b	227d4 <__assert_fail@plt+0x110ac>
   227b4:	mvn	r7, #-2147483648	; 0x80000000
   227b8:	sdiv	r1, r7, r4
   227bc:	cmp	r5, r1
   227c0:	blt	227d4 <__assert_fail@plt+0x110ac>
   227c4:	mul	r1, r5, r4
   227c8:	mov	r7, #64	; 0x40
   227cc:	cmp	r1, #63	; 0x3f
   227d0:	bgt	227dc <__assert_fail@plt+0x110b4>
   227d4:	sdiv	r5, r7, r4
   227d8:	mul	r1, r5, r4
   227dc:	cmp	r0, #0
   227e0:	moveq	r7, #0
   227e4:	streq	r7, [r8]
   227e8:	sub	r7, r5, r6
   227ec:	cmp	r7, r2
   227f0:	bge	22894 <__assert_fail@plt+0x1116c>
   227f4:	add	r5, r6, r2
   227f8:	mov	r2, #0
   227fc:	mov	r1, #0
   22800:	cmp	r5, r3
   22804:	movwgt	r2, #1
   22808:	cmn	r3, #1
   2280c:	movwgt	r1, #1
   22810:	cmp	r5, r6
   22814:	bvs	2287c <__assert_fail@plt+0x11154>
   22818:	ands	r1, r1, r2
   2281c:	bne	2287c <__assert_fail@plt+0x11154>
   22820:	cmn	r4, #1
   22824:	ble	22844 <__assert_fail@plt+0x1111c>
   22828:	cmp	r4, #0
   2282c:	beq	22890 <__assert_fail@plt+0x11168>
   22830:	cmn	r5, #1
   22834:	ble	22868 <__assert_fail@plt+0x11140>
   22838:	mvn	r1, #-2147483648	; 0x80000000
   2283c:	udiv	r1, r1, r4
   22840:	b	2285c <__assert_fail@plt+0x11134>
   22844:	cmn	r5, #1
   22848:	ble	22880 <__assert_fail@plt+0x11158>
   2284c:	cmn	r4, #1
   22850:	beq	22890 <__assert_fail@plt+0x11168>
   22854:	mov	r1, #-2147483648	; 0x80000000
   22858:	sdiv	r1, r1, r4
   2285c:	cmp	r1, r5
   22860:	bge	22890 <__assert_fail@plt+0x11168>
   22864:	b	2287c <__assert_fail@plt+0x11154>
   22868:	beq	22890 <__assert_fail@plt+0x11168>
   2286c:	mov	r1, #-2147483648	; 0x80000000
   22870:	sdiv	r1, r1, r5
   22874:	cmp	r1, r4
   22878:	bge	22890 <__assert_fail@plt+0x11168>
   2287c:	bl	22a08 <__assert_fail@plt+0x112e0>
   22880:	mvn	r1, #-2147483648	; 0x80000000
   22884:	sdiv	r1, r1, r4
   22888:	cmp	r5, r1
   2288c:	blt	2287c <__assert_fail@plt+0x11154>
   22890:	mul	r1, r5, r4
   22894:	bl	22600 <__assert_fail@plt+0x10ed8>
   22898:	str	r5, [r8]
   2289c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   228a0:	push	{fp, lr}
   228a4:	mov	fp, sp
   228a8:	mov	r1, #1
   228ac:	bl	22a4c <__assert_fail@plt+0x11324>
   228b0:	cmp	r0, #0
   228b4:	popne	{fp, pc}
   228b8:	bl	22a08 <__assert_fail@plt+0x112e0>
   228bc:	push	{fp, lr}
   228c0:	mov	fp, sp
   228c4:	bl	22a4c <__assert_fail@plt+0x11324>
   228c8:	cmp	r0, #0
   228cc:	popne	{fp, pc}
   228d0:	bl	22a08 <__assert_fail@plt+0x112e0>
   228d4:	push	{fp, lr}
   228d8:	mov	fp, sp
   228dc:	mov	r1, #1
   228e0:	bl	22a4c <__assert_fail@plt+0x11324>
   228e4:	cmp	r0, #0
   228e8:	popne	{fp, pc}
   228ec:	bl	22a08 <__assert_fail@plt+0x112e0>
   228f0:	push	{fp, lr}
   228f4:	mov	fp, sp
   228f8:	bl	22a4c <__assert_fail@plt+0x11324>
   228fc:	cmp	r0, #0
   22900:	popne	{fp, pc}
   22904:	bl	22a08 <__assert_fail@plt+0x112e0>
   22908:	push	{r4, r5, r6, sl, fp, lr}
   2290c:	add	fp, sp, #16
   22910:	mov	r5, r0
   22914:	mov	r0, r1
   22918:	mov	r4, r1
   2291c:	bl	22aa0 <__assert_fail@plt+0x11378>
   22920:	cmp	r0, #0
   22924:	beq	22940 <__assert_fail@plt+0x11218>
   22928:	mov	r1, r5
   2292c:	mov	r2, r4
   22930:	mov	r6, r0
   22934:	bl	11464 <memcpy@plt>
   22938:	mov	r0, r6
   2293c:	pop	{r4, r5, r6, sl, fp, pc}
   22940:	bl	22a08 <__assert_fail@plt+0x112e0>
   22944:	push	{r4, r5, r6, sl, fp, lr}
   22948:	add	fp, sp, #16
   2294c:	mov	r5, r0
   22950:	mov	r0, r1
   22954:	mov	r4, r1
   22958:	bl	22aa0 <__assert_fail@plt+0x11378>
   2295c:	cmp	r0, #0
   22960:	beq	2297c <__assert_fail@plt+0x11254>
   22964:	mov	r1, r5
   22968:	mov	r2, r4
   2296c:	mov	r6, r0
   22970:	bl	11464 <memcpy@plt>
   22974:	mov	r0, r6
   22978:	pop	{r4, r5, r6, sl, fp, pc}
   2297c:	bl	22a08 <__assert_fail@plt+0x112e0>
   22980:	push	{r4, r5, r6, sl, fp, lr}
   22984:	add	fp, sp, #16
   22988:	mov	r5, r0
   2298c:	add	r0, r1, #1
   22990:	mov	r4, r1
   22994:	bl	22aa0 <__assert_fail@plt+0x11378>
   22998:	cmp	r0, #0
   2299c:	beq	229c4 <__assert_fail@plt+0x1129c>
   229a0:	mov	r6, r0
   229a4:	mov	r0, #0
   229a8:	mov	r1, r5
   229ac:	mov	r2, r4
   229b0:	strb	r0, [r6, r4]
   229b4:	mov	r0, r6
   229b8:	bl	11464 <memcpy@plt>
   229bc:	mov	r0, r6
   229c0:	pop	{r4, r5, r6, sl, fp, pc}
   229c4:	bl	22a08 <__assert_fail@plt+0x112e0>
   229c8:	push	{r4, r5, r6, sl, fp, lr}
   229cc:	add	fp, sp, #16
   229d0:	mov	r4, r0
   229d4:	bl	115cc <strlen@plt>
   229d8:	add	r5, r0, #1
   229dc:	mov	r0, r5
   229e0:	bl	22aa0 <__assert_fail@plt+0x11378>
   229e4:	cmp	r0, #0
   229e8:	beq	22a04 <__assert_fail@plt+0x112dc>
   229ec:	mov	r1, r4
   229f0:	mov	r2, r5
   229f4:	mov	r6, r0
   229f8:	bl	11464 <memcpy@plt>
   229fc:	mov	r0, r6
   22a00:	pop	{r4, r5, r6, sl, fp, pc}
   22a04:	bl	22a08 <__assert_fail@plt+0x112e0>
   22a08:	push	{fp, lr}
   22a0c:	mov	fp, sp
   22a10:	movw	r0, #20808	; 0x5148
   22a14:	movw	r1, #17161	; 0x4309
   22a18:	mov	r2, #5
   22a1c:	movt	r0, #3
   22a20:	movt	r1, #2
   22a24:	ldr	r4, [r0]
   22a28:	mov	r0, #0
   22a2c:	bl	114b8 <dcgettext@plt>
   22a30:	movw	r2, #15360	; 0x3c00
   22a34:	mov	r3, r0
   22a38:	mov	r0, r4
   22a3c:	mov	r1, #0
   22a40:	movt	r2, #2
   22a44:	bl	11554 <error@plt>
   22a48:	bl	11704 <abort@plt>
   22a4c:	clz	r2, r1
   22a50:	clz	r3, r0
   22a54:	lsr	r2, r2, #5
   22a58:	lsr	r3, r3, #5
   22a5c:	orrs	r2, r3, r2
   22a60:	movwne	r1, #1
   22a64:	movwne	r0, #1
   22a68:	cmp	r1, #0
   22a6c:	beq	22a9c <__assert_fail@plt+0x11374>
   22a70:	mvn	r2, #-2147483648	; 0x80000000
   22a74:	udiv	r2, r2, r1
   22a78:	cmp	r2, r0
   22a7c:	bcs	22a9c <__assert_fail@plt+0x11374>
   22a80:	push	{fp, lr}
   22a84:	mov	fp, sp
   22a88:	bl	115fc <__errno_location@plt>
   22a8c:	mov	r1, #12
   22a90:	str	r1, [r0]
   22a94:	mov	r0, #0
   22a98:	pop	{fp, pc}
   22a9c:	b	113b0 <calloc@plt>
   22aa0:	cmp	r0, #0
   22aa4:	movweq	r0, #1
   22aa8:	cmn	r0, #1
   22aac:	ble	22ab4 <__assert_fail@plt+0x1138c>
   22ab0:	b	11578 <malloc@plt>
   22ab4:	push	{fp, lr}
   22ab8:	mov	fp, sp
   22abc:	bl	115fc <__errno_location@plt>
   22ac0:	mov	r1, #12
   22ac4:	str	r1, [r0]
   22ac8:	mov	r0, #0
   22acc:	pop	{fp, pc}
   22ad0:	push	{fp, lr}
   22ad4:	mov	fp, sp
   22ad8:	cmp	r0, #0
   22adc:	beq	22af8 <__assert_fail@plt+0x113d0>
   22ae0:	cmp	r1, #0
   22ae4:	beq	22b04 <__assert_fail@plt+0x113dc>
   22ae8:	cmn	r1, #1
   22aec:	ble	22b0c <__assert_fail@plt+0x113e4>
   22af0:	pop	{fp, lr}
   22af4:	b	114d0 <realloc@plt>
   22af8:	mov	r0, r1
   22afc:	pop	{fp, lr}
   22b00:	b	22aa0 <__assert_fail@plt+0x11378>
   22b04:	bl	132d4 <__assert_fail@plt+0x1bac>
   22b08:	b	22b18 <__assert_fail@plt+0x113f0>
   22b0c:	bl	115fc <__errno_location@plt>
   22b10:	mov	r1, #12
   22b14:	str	r1, [r0]
   22b18:	mov	r0, #0
   22b1c:	pop	{fp, pc}
   22b20:	push	{r4, r5, r6, sl, fp, lr}
   22b24:	add	fp, sp, #16
   22b28:	mov	r4, r0
   22b2c:	bl	11530 <__fpending@plt>
   22b30:	mov	r5, r0
   22b34:	mov	r0, r4
   22b38:	bl	1153c <ferror_unlocked@plt>
   22b3c:	mov	r6, r0
   22b40:	mov	r0, r4
   22b44:	bl	22c5c <__assert_fail@plt+0x11534>
   22b48:	cmp	r6, #0
   22b4c:	beq	22b6c <__assert_fail@plt+0x11444>
   22b50:	mvn	r4, #0
   22b54:	cmp	r0, #0
   22b58:	bne	22b98 <__assert_fail@plt+0x11470>
   22b5c:	bl	115fc <__errno_location@plt>
   22b60:	mov	r1, #0
   22b64:	str	r1, [r0]
   22b68:	b	22b98 <__assert_fail@plt+0x11470>
   22b6c:	cmp	r0, #0
   22b70:	mov	r4, r0
   22b74:	mvnne	r4, #0
   22b78:	cmp	r5, #0
   22b7c:	bne	22b98 <__assert_fail@plt+0x11470>
   22b80:	cmp	r0, #0
   22b84:	beq	22b98 <__assert_fail@plt+0x11470>
   22b88:	bl	115fc <__errno_location@plt>
   22b8c:	ldr	r0, [r0]
   22b90:	subs	r4, r0, #9
   22b94:	mvnne	r4, #0
   22b98:	mov	r0, r4
   22b9c:	pop	{r4, r5, r6, sl, fp, pc}
   22ba0:	push	{r4, r5, r6, r7, fp, lr}
   22ba4:	add	fp, sp, #16
   22ba8:	mov	r4, r0
   22bac:	ldr	r0, [r0, #4]
   22bb0:	mov	r5, r1
   22bb4:	cmp	r0, r1
   22bb8:	bcs	22be8 <__assert_fail@plt+0x114c0>
   22bbc:	mov	r6, r3
   22bc0:	cmp	r3, #0
   22bc4:	beq	22bf0 <__assert_fail@plt+0x114c8>
   22bc8:	mvn	r0, #0
   22bcc:	udiv	r0, r0, r6
   22bd0:	cmp	r0, r5
   22bd4:	bcs	22bf0 <__assert_fail@plt+0x114c8>
   22bd8:	bl	115fc <__errno_location@plt>
   22bdc:	mov	r1, #12
   22be0:	str	r1, [r0]
   22be4:	b	22c54 <__assert_fail@plt+0x1152c>
   22be8:	str	r5, [r4]
   22bec:	b	22c4c <__assert_fail@plt+0x11524>
   22bf0:	ldr	r0, [r4, #8]
   22bf4:	mul	r1, r6, r5
   22bf8:	cmp	r0, r2
   22bfc:	beq	22c14 <__assert_fail@plt+0x114ec>
   22c00:	bl	22ad0 <__assert_fail@plt+0x113a8>
   22c04:	mov	r7, r0
   22c08:	cmp	r0, #0
   22c0c:	bne	22c44 <__assert_fail@plt+0x1151c>
   22c10:	b	22c54 <__assert_fail@plt+0x1152c>
   22c14:	mov	r0, r1
   22c18:	bl	22aa0 <__assert_fail@plt+0x11378>
   22c1c:	cmp	r0, #0
   22c20:	beq	22c54 <__assert_fail@plt+0x1152c>
   22c24:	ldr	r1, [r4, #8]
   22c28:	mov	r7, r0
   22c2c:	cmp	r1, #0
   22c30:	beq	22c44 <__assert_fail@plt+0x1151c>
   22c34:	ldr	r0, [r4]
   22c38:	mul	r2, r0, r6
   22c3c:	mov	r0, r7
   22c40:	bl	11464 <memcpy@plt>
   22c44:	str	r5, [r4]
   22c48:	stmib	r4, {r5, r7}
   22c4c:	mov	r0, #1
   22c50:	pop	{r4, r5, r6, r7, fp, pc}
   22c54:	mov	r0, #0
   22c58:	pop	{r4, r5, r6, r7, fp, pc}
   22c5c:	push	{r4, r5, r6, sl, fp, lr}
   22c60:	add	fp, sp, #16
   22c64:	sub	sp, sp, #8
   22c68:	mov	r4, r0
   22c6c:	bl	11644 <fileno@plt>
   22c70:	cmn	r0, #1
   22c74:	ble	22ce8 <__assert_fail@plt+0x115c0>
   22c78:	mov	r0, r4
   22c7c:	bl	11590 <__freading@plt>
   22c80:	cmp	r0, #0
   22c84:	beq	22cb0 <__assert_fail@plt+0x11588>
   22c88:	mov	r0, r4
   22c8c:	bl	11644 <fileno@plt>
   22c90:	mov	r1, #1
   22c94:	mov	r2, #0
   22c98:	mov	r3, #0
   22c9c:	str	r1, [sp]
   22ca0:	bl	11518 <lseek64@plt>
   22ca4:	and	r0, r0, r1
   22ca8:	cmn	r0, #1
   22cac:	beq	22ce8 <__assert_fail@plt+0x115c0>
   22cb0:	mov	r0, r4
   22cb4:	bl	22cf8 <__assert_fail@plt+0x115d0>
   22cb8:	cmp	r0, #0
   22cbc:	beq	22ce8 <__assert_fail@plt+0x115c0>
   22cc0:	bl	115fc <__errno_location@plt>
   22cc4:	ldr	r6, [r0]
   22cc8:	mov	r5, r0
   22ccc:	mov	r0, r4
   22cd0:	bl	11668 <fclose@plt>
   22cd4:	cmp	r6, #0
   22cd8:	strne	r6, [r5]
   22cdc:	mvnne	r0, #0
   22ce0:	sub	sp, fp, #16
   22ce4:	pop	{r4, r5, r6, sl, fp, pc}
   22ce8:	mov	r0, r4
   22cec:	sub	sp, fp, #16
   22cf0:	pop	{r4, r5, r6, sl, fp, lr}
   22cf4:	b	11668 <fclose@plt>
   22cf8:	push	{r4, sl, fp, lr}
   22cfc:	add	fp, sp, #8
   22d00:	sub	sp, sp, #8
   22d04:	mov	r4, r0
   22d08:	cmp	r0, #0
   22d0c:	beq	22d28 <__assert_fail@plt+0x11600>
   22d10:	mov	r0, r4
   22d14:	bl	11590 <__freading@plt>
   22d18:	cmp	r0, #0
   22d1c:	ldrbne	r0, [r4, #1]
   22d20:	tstne	r0, #1
   22d24:	bne	22d38 <__assert_fail@plt+0x11610>
   22d28:	mov	r0, r4
   22d2c:	sub	sp, fp, #8
   22d30:	pop	{r4, sl, fp, lr}
   22d34:	b	1141c <fflush@plt>
   22d38:	mov	r0, #1
   22d3c:	mov	r2, #0
   22d40:	mov	r3, #0
   22d44:	str	r0, [sp]
   22d48:	mov	r0, r4
   22d4c:	bl	22d54 <__assert_fail@plt+0x1162c>
   22d50:	b	22d28 <__assert_fail@plt+0x11600>
   22d54:	push	{r4, r5, r6, r7, fp, lr}
   22d58:	add	fp, sp, #16
   22d5c:	sub	sp, sp, #8
   22d60:	mov	r4, r0
   22d64:	ldr	r0, [r0, #4]
   22d68:	mov	r5, r3
   22d6c:	mov	r6, r2
   22d70:	ldr	r1, [r4, #8]
   22d74:	cmp	r1, r0
   22d78:	bne	22d94 <__assert_fail@plt+0x1166c>
   22d7c:	ldrd	r0, [r4, #16]
   22d80:	cmp	r1, r0
   22d84:	bne	22d94 <__assert_fail@plt+0x1166c>
   22d88:	ldr	r0, [r4, #36]	; 0x24
   22d8c:	cmp	r0, #0
   22d90:	beq	22dac <__assert_fail@plt+0x11684>
   22d94:	mov	r0, r4
   22d98:	mov	r2, r6
   22d9c:	mov	r3, r5
   22da0:	sub	sp, fp, #16
   22da4:	pop	{r4, r5, r6, r7, fp, lr}
   22da8:	b	11674 <fseeko64@plt>
   22dac:	ldr	r7, [fp, #8]
   22db0:	mov	r0, r4
   22db4:	bl	11644 <fileno@plt>
   22db8:	mov	r2, r6
   22dbc:	mov	r3, r5
   22dc0:	str	r7, [sp]
   22dc4:	bl	11518 <lseek64@plt>
   22dc8:	and	r2, r0, r1
   22dcc:	cmn	r2, #1
   22dd0:	beq	22dec <__assert_fail@plt+0x116c4>
   22dd4:	strd	r0, [r4, #80]	; 0x50
   22dd8:	ldr	r0, [r4]
   22ddc:	bic	r0, r0, #16
   22de0:	str	r0, [r4]
   22de4:	mov	r0, #0
   22de8:	b	22df0 <__assert_fail@plt+0x116c8>
   22dec:	mvn	r0, #0
   22df0:	sub	sp, fp, #16
   22df4:	pop	{r4, r5, r6, r7, fp, pc}
   22df8:	push	{fp, lr}
   22dfc:	mov	fp, sp
   22e00:	mov	r0, #14
   22e04:	bl	116b0 <nl_langinfo@plt>
   22e08:	movw	r1, #15003	; 0x3a9b
   22e0c:	cmp	r0, #0
   22e10:	movt	r1, #2
   22e14:	movne	r1, r0
   22e18:	movw	r0, #17178	; 0x431a
   22e1c:	ldrb	r2, [r1]
   22e20:	movt	r0, #2
   22e24:	cmp	r2, #0
   22e28:	movne	r0, r1
   22e2c:	pop	{fp, pc}
   22e30:	push	{r4, sl, fp, lr}
   22e34:	add	fp, sp, #8
   22e38:	mov	r4, r0
   22e3c:	bl	11428 <wcwidth@plt>
   22e40:	cmn	r0, #1
   22e44:	popgt	{r4, sl, fp, pc}
   22e48:	mov	r0, r4
   22e4c:	bl	114f4 <iswcntrl@plt>
   22e50:	clz	r0, r0
   22e54:	lsr	r0, r0, #5
   22e58:	pop	{r4, sl, fp, pc}
   22e5c:	push	{r4, r5, r6, sl, fp, lr}
   22e60:	add	fp, sp, #16
   22e64:	mov	r4, r0
   22e68:	mov	r0, r1
   22e6c:	mov	r5, r1
   22e70:	ldr	r1, [r0], #16
   22e74:	cmp	r1, r0
   22e78:	beq	22e84 <__assert_fail@plt+0x1175c>
   22e7c:	mov	r6, r1
   22e80:	b	22e94 <__assert_fail@plt+0x1176c>
   22e84:	ldr	r2, [r5, #4]
   22e88:	add	r6, r4, #16
   22e8c:	mov	r0, r6
   22e90:	bl	11464 <memcpy@plt>
   22e94:	str	r6, [r4]
   22e98:	ldr	r0, [r5, #4]
   22e9c:	str	r0, [r4, #4]
   22ea0:	ldrb	r0, [r5, #8]
   22ea4:	strb	r0, [r4, #8]
   22ea8:	cmp	r0, #0
   22eac:	ldrne	r0, [r5, #12]
   22eb0:	strne	r0, [r4, #12]
   22eb4:	pop	{r4, r5, r6, sl, fp, pc}
   22eb8:	movw	r2, #17184	; 0x4320
   22ebc:	ubfx	r1, r0, #5, #3
   22ec0:	and	r0, r0, #31
   22ec4:	movt	r2, #2
   22ec8:	ldr	r1, [r2, r1, lsl #2]
   22ecc:	mov	r2, #1
   22ed0:	and	r0, r1, r2, lsl r0
   22ed4:	cmp	r0, #0
   22ed8:	movwne	r0, #1
   22edc:	bx	lr
   22ee0:	push	{r4, r5, r6, r7, fp, lr}
   22ee4:	add	fp, sp, #16
   22ee8:	sub	sp, sp, #8
   22eec:	add	r5, sp, #4
   22ef0:	cmp	r0, #0
   22ef4:	mov	r7, r2
   22ef8:	mov	r4, r1
   22efc:	movne	r5, r0
   22f00:	mov	r0, r5
   22f04:	bl	11548 <mbrtowc@plt>
   22f08:	mov	r6, r0
   22f0c:	cmp	r7, #0
   22f10:	beq	22f34 <__assert_fail@plt+0x1180c>
   22f14:	cmn	r6, #2
   22f18:	bcc	22f34 <__assert_fail@plt+0x1180c>
   22f1c:	mov	r0, #0
   22f20:	bl	22f7c <__assert_fail@plt+0x11854>
   22f24:	cmp	r0, #0
   22f28:	ldrbeq	r0, [r4]
   22f2c:	moveq	r6, #1
   22f30:	streq	r0, [r5]
   22f34:	mov	r0, r6
   22f38:	sub	sp, fp, #16
   22f3c:	pop	{r4, r5, r6, r7, fp, pc}
   22f40:	cmp	r2, #0
   22f44:	beq	22f74 <__assert_fail@plt+0x1184c>
   22f48:	mvn	r3, #0
   22f4c:	udiv	r3, r3, r2
   22f50:	cmp	r3, r1
   22f54:	bcs	22f74 <__assert_fail@plt+0x1184c>
   22f58:	push	{fp, lr}
   22f5c:	mov	fp, sp
   22f60:	bl	115fc <__errno_location@plt>
   22f64:	mov	r1, #12
   22f68:	str	r1, [r0]
   22f6c:	mov	r0, #0
   22f70:	pop	{fp, pc}
   22f74:	mul	r1, r2, r1
   22f78:	b	22ad0 <__assert_fail@plt+0x113a8>
   22f7c:	push	{r4, sl, fp, lr}
   22f80:	add	fp, sp, #8
   22f84:	sub	sp, sp, #264	; 0x108
   22f88:	add	r1, sp, #7
   22f8c:	movw	r2, #257	; 0x101
   22f90:	bl	22fe0 <__assert_fail@plt+0x118b8>
   22f94:	mov	r4, #0
   22f98:	cmp	r0, #0
   22f9c:	bne	22fd4 <__assert_fail@plt+0x118ac>
   22fa0:	movw	r1, #17216	; 0x4340
   22fa4:	add	r0, sp, #7
   22fa8:	movt	r1, #2
   22fac:	bl	113ec <strcmp@plt>
   22fb0:	cmp	r0, #0
   22fb4:	beq	22fd4 <__assert_fail@plt+0x118ac>
   22fb8:	movw	r1, #17218	; 0x4342
   22fbc:	add	r0, sp, #7
   22fc0:	movt	r1, #2
   22fc4:	bl	113ec <strcmp@plt>
   22fc8:	mov	r4, r0
   22fcc:	cmp	r0, #0
   22fd0:	movwne	r4, #1
   22fd4:	mov	r0, r4
   22fd8:	sub	sp, fp, #8
   22fdc:	pop	{r4, sl, fp, pc}
   22fe0:	push	{r4, r5, r6, r7, fp, lr}
   22fe4:	add	fp, sp, #16
   22fe8:	mov	r4, r1
   22fec:	mov	r1, #0
   22ff0:	mov	r6, r2
   22ff4:	bl	1168c <setlocale@plt>
   22ff8:	cmp	r0, #0
   22ffc:	beq	23028 <__assert_fail@plt+0x11900>
   23000:	mov	r7, r0
   23004:	bl	115cc <strlen@plt>
   23008:	cmp	r0, r6
   2300c:	bcs	2303c <__assert_fail@plt+0x11914>
   23010:	add	r2, r0, #1
   23014:	mov	r0, r4
   23018:	mov	r1, r7
   2301c:	bl	11464 <memcpy@plt>
   23020:	mov	r5, #0
   23024:	b	23064 <__assert_fail@plt+0x1193c>
   23028:	cmp	r6, #0
   2302c:	mov	r5, #22
   23030:	movne	r0, #0
   23034:	strbne	r0, [r4]
   23038:	b	23064 <__assert_fail@plt+0x1193c>
   2303c:	mov	r5, #34	; 0x22
   23040:	cmp	r6, #0
   23044:	beq	23064 <__assert_fail@plt+0x1193c>
   23048:	sub	r6, r6, #1
   2304c:	mov	r0, r4
   23050:	mov	r1, r7
   23054:	mov	r2, r6
   23058:	bl	11464 <memcpy@plt>
   2305c:	mov	r0, #0
   23060:	strb	r0, [r4, r6]
   23064:	mov	r0, r5
   23068:	pop	{r4, r5, r6, r7, fp, pc}
   2306c:	mov	r1, #0
   23070:	b	1168c <setlocale@plt>
   23074:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23078:	mov	r7, r0
   2307c:	ldr	r6, [pc, #72]	; 230cc <__assert_fail@plt+0x119a4>
   23080:	ldr	r5, [pc, #72]	; 230d0 <__assert_fail@plt+0x119a8>
   23084:	add	r6, pc, r6
   23088:	add	r5, pc, r5
   2308c:	sub	r6, r6, r5
   23090:	mov	r8, r1
   23094:	mov	r9, r2
   23098:	bl	11384 <pthread_mutex_unlock@plt-0x20>
   2309c:	asrs	r6, r6, #2
   230a0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   230a4:	mov	r4, #0
   230a8:	add	r4, r4, #1
   230ac:	ldr	r3, [r5], #4
   230b0:	mov	r2, r9
   230b4:	mov	r1, r8
   230b8:	mov	r0, r7
   230bc:	blx	r3
   230c0:	cmp	r6, r4
   230c4:	bne	230a8 <__assert_fail@plt+0x11980>
   230c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   230cc:	andeq	r1, r1, r8, ror lr
   230d0:	andeq	r1, r1, r0, ror lr
   230d4:	bx	lr
   230d8:	ldr	r3, [pc, #12]	; 230ec <__assert_fail@plt+0x119c4>
   230dc:	mov	r1, #0
   230e0:	add	r3, pc, r3
   230e4:	ldr	r2, [r3]
   230e8:	b	11614 <__cxa_atexit@plt>
   230ec:	andeq	r2, r1, ip, asr r0

Disassembly of section .fini:

000230f0 <.fini>:
   230f0:	push	{r3, lr}
   230f4:	pop	{r3, pc}
