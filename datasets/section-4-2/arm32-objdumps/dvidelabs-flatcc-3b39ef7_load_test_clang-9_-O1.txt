
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf32-littlearm


Disassembly of section .init:

00012394 <.init>:
   12394:	push	{r3, lr}
   12398:	bl	124e4 <_start@@Base+0x3c>
   1239c:	pop	{r3, pc}

Disassembly of section .plt:

000123a0 <strcmp@plt-0x14>:
   123a0:	push	{lr}		; (str lr, [sp, #-4]!)
   123a4:	ldr	lr, [pc, #4]	; 123b0 <strcmp@plt-0x4>
   123a8:	add	lr, pc, lr
   123ac:	ldr	pc, [lr, #8]!
   123b0:	andeq	r6, r1, r0, asr ip

000123b4 <strcmp@plt>:
   123b4:	add	ip, pc, #0, 12
   123b8:	add	ip, ip, #90112	; 0x16000
   123bc:	ldr	pc, [ip, #3152]!	; 0xc50

000123c0 <printf@plt>:
   123c0:	add	ip, pc, #0, 12
   123c4:	add	ip, ip, #90112	; 0x16000
   123c8:	ldr	pc, [ip, #3144]!	; 0xc48

000123cc <fopen@plt>:
   123cc:	add	ip, pc, #0, 12
   123d0:	add	ip, ip, #90112	; 0x16000
   123d4:	ldr	pc, [ip, #3136]!	; 0xc40

000123d8 <free@plt>:
   123d8:	add	ip, pc, #0, 12
   123dc:	add	ip, ip, #90112	; 0x16000
   123e0:	ldr	pc, [ip, #3128]!	; 0xc38

000123e4 <memcpy@plt>:
   123e4:	add	ip, pc, #0, 12
   123e8:	add	ip, ip, #90112	; 0x16000
   123ec:	ldr	pc, [ip, #3120]!	; 0xc30

000123f0 <fwrite_unlocked@plt>:
   123f0:	add	ip, pc, #0, 12
   123f4:	add	ip, ip, #90112	; 0x16000
   123f8:	ldr	pc, [ip, #3112]!	; 0xc28

000123fc <realloc@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #90112	; 0x16000
   12404:	ldr	pc, [ip, #3104]!	; 0xc20

00012408 <gettimeofday@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #90112	; 0x16000
   12410:	ldr	pc, [ip, #3096]!	; 0xc18

00012414 <puts@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #90112	; 0x16000
   1241c:	ldr	pc, [ip, #3088]!	; 0xc10

00012420 <malloc@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #90112	; 0x16000
   12428:	ldr	pc, [ip, #3080]!	; 0xc08

0001242c <__libc_start_main@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #90112	; 0x16000
   12434:	ldr	pc, [ip, #3072]!	; 0xc00

00012438 <__gmon_start__@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #90112	; 0x16000
   12440:	ldr	pc, [ip, #3064]!	; 0xbf8

00012444 <bcmp@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #90112	; 0x16000
   1244c:	ldr	pc, [ip, #3056]!	; 0xbf0

00012450 <strlen@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #90112	; 0x16000
   12458:	ldr	pc, [ip, #3048]!	; 0xbe8

0001245c <posix_memalign@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #90112	; 0x16000
   12464:	ldr	pc, [ip, #3040]!	; 0xbe0

00012468 <memset@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #90112	; 0x16000
   12470:	ldr	pc, [ip, #3032]!	; 0xbd8

00012474 <memchr@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #90112	; 0x16000
   1247c:	ldr	pc, [ip, #3024]!	; 0xbd0

00012480 <fclose@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #90112	; 0x16000
   12488:	ldr	pc, [ip, #3016]!	; 0xbc8

0001248c <abort@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #90112	; 0x16000
   12494:	ldr	pc, [ip, #3008]!	; 0xbc0

00012498 <__assert_fail@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #90112	; 0x16000
   124a0:	ldr	pc, [ip, #3000]!	; 0xbb8

Disassembly of section .text:

000124a8 <_start@@Base>:
   124a8:	mov	fp, #0
   124ac:	mov	lr, #0
   124b0:	pop	{r1}		; (ldr r1, [sp], #4)
   124b4:	mov	r2, sp
   124b8:	push	{r2}		; (str r2, [sp, #-4]!)
   124bc:	push	{r0}		; (str r0, [sp, #-4]!)
   124c0:	ldr	ip, [pc, #16]	; 124d8 <_start@@Base+0x30>
   124c4:	push	{ip}		; (str ip, [sp, #-4]!)
   124c8:	ldr	r0, [pc, #12]	; 124dc <_start@@Base+0x34>
   124cc:	ldr	r3, [pc, #12]	; 124e0 <_start@@Base+0x38>
   124d0:	bl	1242c <__libc_start_main@plt>
   124d4:	bl	1248c <abort@plt>
   124d8:	andeq	r6, r1, r0, lsr #21
   124dc:	muleq	r1, r8, r5
   124e0:	andeq	r6, r1, r0, asr #20
   124e4:	ldr	r3, [pc, #20]	; 12500 <_start@@Base+0x58>
   124e8:	ldr	r2, [pc, #20]	; 12504 <_start@@Base+0x5c>
   124ec:	add	r3, pc, r3
   124f0:	ldr	r2, [r3, r2]
   124f4:	cmp	r2, #0
   124f8:	bxeq	lr
   124fc:	b	12438 <__gmon_start__@plt>
   12500:	andeq	r6, r1, ip, lsl #22
   12504:	andeq	r0, r0, ip, asr r0
   12508:	ldr	r0, [pc, #24]	; 12528 <_start@@Base+0x80>
   1250c:	ldr	r3, [pc, #24]	; 1252c <_start@@Base+0x84>
   12510:	cmp	r3, r0
   12514:	bxeq	lr
   12518:	ldr	r3, [pc, #16]	; 12530 <_start@@Base+0x88>
   1251c:	cmp	r3, #0
   12520:	bxeq	lr
   12524:	bx	r3
   12528:	andeq	r9, r2, r8, rrx
   1252c:	andeq	r9, r2, r8, rrx
   12530:	andeq	r0, r0, r0
   12534:	ldr	r0, [pc, #36]	; 12560 <_start@@Base+0xb8>
   12538:	ldr	r1, [pc, #36]	; 12564 <_start@@Base+0xbc>
   1253c:	sub	r1, r1, r0
   12540:	asr	r1, r1, #2
   12544:	add	r1, r1, r1, lsr #31
   12548:	asrs	r1, r1, #1
   1254c:	bxeq	lr
   12550:	ldr	r3, [pc, #16]	; 12568 <_start@@Base+0xc0>
   12554:	cmp	r3, #0
   12558:	bxeq	lr
   1255c:	bx	r3
   12560:	andeq	r9, r2, r8, rrx
   12564:	andeq	r9, r2, r8, rrx
   12568:	andeq	r0, r0, r0
   1256c:	push	{r4, lr}
   12570:	ldr	r4, [pc, #24]	; 12590 <_start@@Base+0xe8>
   12574:	ldrb	r3, [r4]
   12578:	cmp	r3, #0
   1257c:	popne	{r4, pc}
   12580:	bl	12508 <_start@@Base+0x60>
   12584:	mov	r3, #1
   12588:	strb	r3, [r4]
   1258c:	pop	{r4, pc}
   12590:	andeq	r9, r2, r8, rrx
   12594:	b	12534 <_start@@Base+0x8c>

00012598 <main@@Base>:
   12598:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1259c:	add	fp, sp, #24
   125a0:	vpush	{d8}
   125a4:	sub	sp, sp, #240	; 0xf0
   125a8:	mov	r4, sp
   125ac:	mov	r0, r4
   125b0:	bl	131e4 <flatcc_builder_init@@Base>
   125b4:	mov	r0, r4
   125b8:	bl	12768 <main@@Base+0x1d0>
   125bc:	sub	r1, fp, #40	; 0x28
   125c0:	mov	r0, r4
   125c4:	bl	160fc <flatcc_builder_finalize_buffer@@Base>
   125c8:	mov	r4, r0
   125cc:	movw	r0, #27312	; 0x6ab0
   125d0:	movt	r0, #1
   125d4:	movw	r1, #27334	; 0x6ac6
   125d8:	movt	r1, #1
   125dc:	bl	123cc <fopen@plt>
   125e0:	cmp	r0, #0
   125e4:	beq	126f0 <main@@Base+0x158>
   125e8:	mov	r6, r0
   125ec:	ldr	r7, [fp, #-40]	; 0xffffffd8
   125f0:	mov	r5, #1
   125f4:	mov	r0, r4
   125f8:	mov	r1, #1
   125fc:	mov	r2, r7
   12600:	mov	r3, r6
   12604:	bl	123f0 <fwrite_unlocked@plt>
   12608:	mov	r8, r0
   1260c:	mov	r0, r6
   12610:	bl	12480 <fclose@plt>
   12614:	cmp	r7, r8
   12618:	bne	126f4 <main@@Base+0x15c>
   1261c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12620:	movw	r0, #27337	; 0x6ac9
   12624:	movt	r0, #1
   12628:	bl	123c0 <printf@plt>
   1262c:	movw	r0, #28931	; 0x7103
   12630:	movt	r0, #1
   12634:	bl	12414 <puts@plt>
   12638:	mov	r5, #0
   1263c:	bl	127d0 <main@@Base+0x238>
   12640:	vmov.f64	d8, d0
   12644:	mov	r9, sp
   12648:	movw	r8, #27355	; 0x6adb
   1264c:	movt	r8, #1
   12650:	mov	r0, r9
   12654:	bl	12768 <main@@Base+0x1d0>
   12658:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1265c:	mov	r0, r9
   12660:	mov	r1, r4
   12664:	bl	160b0 <flatcc_builder_copy_buffer@@Base>
   12668:	mov	r0, r4
   1266c:	bl	12840 <main@@Base+0x2a8>
   12670:	mov	r6, r0
   12674:	bl	12878 <main@@Base+0x2e0>
   12678:	mov	r1, r8
   1267c:	bl	123b4 <strcmp@plt>
   12680:	cmp	r0, #0
   12684:	bne	12728 <main@@Base+0x190>
   12688:	mov	r0, r6
   1268c:	bl	128f8 <main@@Base+0x360>
   12690:	mov	r7, r0
   12694:	bl	12974 <main@@Base+0x3dc>
   12698:	cmp	r0, #1000	; 0x3e8
   1269c:	bne	12748 <main@@Base+0x1b0>
   126a0:	mov	r6, #0
   126a4:	mov	r0, r7
   126a8:	mov	r1, r6
   126ac:	bl	12ae8 <main@@Base+0x550>
   126b0:	mov	r1, r0
   126b4:	mov	r0, r4
   126b8:	bl	12988 <main@@Base+0x3f0>
   126bc:	add	r6, r6, #1
   126c0:	cmp	r6, #1000	; 0x3e8
   126c4:	bne	126a4 <main@@Base+0x10c>
   126c8:	add	r5, r5, #1
   126cc:	cmp	r5, #10
   126d0:	bne	12650 <main@@Base+0xb8>
   126d4:	bl	127d0 <main@@Base+0x238>
   126d8:	vmov.f64	d1, d0
   126dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   126e0:	vmov.f64	d0, d8
   126e4:	bl	12b38 <main@@Base+0x5a0>
   126e8:	mov	r5, #0
   126ec:	b	126f4 <main@@Base+0x15c>
   126f0:	mvn	r5, #0
   126f4:	mov	r0, sp
   126f8:	bl	13368 <flatcc_builder_clear@@Base>
   126fc:	mov	r0, r4
   12700:	bl	123d8 <free@plt>
   12704:	cmp	r5, #0
   12708:	beq	12718 <main@@Base+0x180>
   1270c:	movw	r0, #28914	; 0x70f2
   12710:	movt	r0, #1
   12714:	bl	12414 <puts@plt>
   12718:	mov	r0, r5
   1271c:	sub	sp, fp, #32
   12720:	vpop	{d8}
   12724:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12728:	movw	r0, #27368	; 0x6ae8
   1272c:	movt	r0, #1
   12730:	movw	r1, #27377	; 0x6af1
   12734:	movt	r1, #1
   12738:	movw	r3, #27452	; 0x6b3c
   1273c:	movt	r3, #1
   12740:	mov	r2, #139	; 0x8b
   12744:	bl	12498 <__assert_fail@plt>
   12748:	movw	r0, #27368	; 0x6ae8
   1274c:	movt	r0, #1
   12750:	movw	r1, #27377	; 0x6af1
   12754:	movt	r1, #1
   12758:	movw	r3, #27452	; 0x6b3c
   1275c:	movt	r3, #1
   12760:	mov	r2, #143	; 0x8f
   12764:	bl	12498 <__assert_fail@plt>
   12768:	push	{r4, sl, fp, lr}
   1276c:	add	fp, sp, #8
   12770:	mov	r4, r0
   12774:	bl	1335c <flatcc_builder_reset@@Base>
   12778:	mov	r0, r4
   1277c:	bl	12c78 <main@@Base+0x6e0>
   12780:	mov	r0, r4
   12784:	bl	12c9c <main@@Base+0x704>
   12788:	mov	r0, r4
   1278c:	bl	12cc4 <main@@Base+0x72c>
   12790:	cmp	r0, #0
   12794:	beq	127b0 <main@@Base+0x218>
   12798:	mov	r1, r0
   1279c:	mov	r0, r4
   127a0:	bl	12d28 <main@@Base+0x790>
   127a4:	mov	r0, r4
   127a8:	pop	{r4, sl, fp, lr}
   127ac:	b	12d50 <main@@Base+0x7b8>
   127b0:	movw	r0, #27516	; 0x6b7c
   127b4:	movt	r0, #1
   127b8:	movw	r1, #27377	; 0x6af1
   127bc:	movt	r1, #1
   127c0:	movw	r3, #27519	; 0x6b7f
   127c4:	movt	r3, #1
   127c8:	mov	r2, #56	; 0x38
   127cc:	bl	12498 <__assert_fail@plt>
   127d0:	push	{fp, lr}
   127d4:	mov	fp, sp
   127d8:	sub	sp, sp, #8
   127dc:	mov	r0, sp
   127e0:	mov	r1, #0
   127e4:	bl	12408 <gettimeofday@plt>
   127e8:	movw	r0, #37976	; 0x9458
   127ec:	movt	r0, #2
   127f0:	ldr	r1, [r0]
   127f4:	cmp	r1, #0
   127f8:	ldmeq	sp, {r2, r3}
   127fc:	strdeq	r2, [r0]
   12800:	ldrd	r0, [r0]
   12804:	ldm	sp, {r2, r3}
   12808:	vldr	d16, [pc, #40]	; 12838 <main@@Base+0x2a0>
   1280c:	sub	r0, r2, r0
   12810:	sub	r1, r3, r1
   12814:	vmov	s0, r1
   12818:	vcvt.f64.s32	d17, s0
   1281c:	vmov	s0, r0
   12820:	vcvt.f64.s32	d18, s0
   12824:	vdiv.f64	d16, d17, d16
   12828:	vadd.f64	d0, d16, d18
   1282c:	mov	sp, fp
   12830:	pop	{fp, pc}
   12834:	nop	{0}
   12838:	andeq	r0, r0, r0
   1283c:	smlawbmi	lr, r0, r4, r8
   12840:	push	{r4, r5, fp, lr}
   12844:	add	fp, sp, #8
   12848:	mov	r5, #0
   1284c:	cmp	r0, #0
   12850:	beq	12870 <main@@Base+0x2d8>
   12854:	mov	r4, r0
   12858:	bl	12f24 <main@@Base+0x98c>
   1285c:	cmp	r0, #0
   12860:	beq	12870 <main@@Base+0x2d8>
   12864:	mov	r0, r4
   12868:	bl	12f4c <main@@Base+0x9b4>
   1286c:	add	r5, r4, r0
   12870:	mov	r0, r5
   12874:	pop	{r4, r5, fp, pc}
   12878:	push	{r4, r5, fp, lr}
   1287c:	add	fp, sp, #8
   12880:	cmp	r0, #0
   12884:	beq	128d8 <main@@Base+0x340>
   12888:	mov	r4, r0
   1288c:	bl	12f64 <main@@Base+0x9cc>
   12890:	sub	r5, r4, r0
   12894:	mov	r0, r5
   12898:	bl	12f6c <main@@Base+0x9d4>
   1289c:	cmp	r0, #12
   128a0:	bcc	128cc <main@@Base+0x334>
   128a4:	add	r0, r5, #10
   128a8:	bl	12f6c <main@@Base+0x9d4>
   128ac:	cmp	r0, #0
   128b0:	beq	128cc <main@@Base+0x334>
   128b4:	add	r4, r4, r0
   128b8:	mov	r0, r4
   128bc:	bl	12f4c <main@@Base+0x9b4>
   128c0:	add	r0, r4, r0
   128c4:	add	r0, r0, #4
   128c8:	pop	{r4, r5, fp, pc}
   128cc:	movw	r0, #28200	; 0x6e28
   128d0:	movt	r0, #1
   128d4:	b	128e0 <main@@Base+0x348>
   128d8:	movw	r0, #27986	; 0x6d52
   128dc:	movt	r0, #1
   128e0:	movw	r1, #28024	; 0x6d78
   128e4:	movt	r1, #1
   128e8:	movw	r3, #28119	; 0x6dd7
   128ec:	movt	r3, #1
   128f0:	movw	r2, #699	; 0x2bb
   128f4:	bl	12498 <__assert_fail@plt>
   128f8:	push	{r4, r5, r6, sl, fp, lr}
   128fc:	add	fp, sp, #16
   12900:	cmp	r0, #0
   12904:	beq	12954 <main@@Base+0x3bc>
   12908:	mov	r4, r0
   1290c:	bl	12f64 <main@@Base+0x9cc>
   12910:	sub	r6, r4, r0
   12914:	mov	r0, r6
   12918:	bl	12f6c <main@@Base+0x9d4>
   1291c:	mov	r5, #0
   12920:	cmp	r0, #28
   12924:	bcc	1294c <main@@Base+0x3b4>
   12928:	add	r0, r6, #26
   1292c:	bl	12f6c <main@@Base+0x9d4>
   12930:	cmp	r0, #0
   12934:	beq	1294c <main@@Base+0x3b4>
   12938:	add	r4, r4, r0
   1293c:	mov	r0, r4
   12940:	bl	12f4c <main@@Base+0x9b4>
   12944:	add	r0, r4, r0
   12948:	add	r5, r0, #4
   1294c:	mov	r0, r5
   12950:	pop	{r4, r5, r6, sl, fp, pc}
   12954:	movw	r0, #27986	; 0x6d52
   12958:	movt	r0, #1
   1295c:	movw	r1, #28024	; 0x6d78
   12960:	movt	r1, #1
   12964:	movw	r3, #28233	; 0x6e49
   12968:	movt	r3, #1
   1296c:	movw	r2, #711	; 0x2c7
   12970:	bl	12498 <__assert_fail@plt>
   12974:	cmp	r0, #0
   12978:	moveq	r0, #0
   1297c:	bxeq	lr
   12980:	sub	r0, r0, #4
   12984:	b	12f4c <main@@Base+0x9b4>
   12988:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1298c:	add	fp, sp, #24
   12990:	mov	r4, r1
   12994:	mov	r8, r0
   12998:	mov	r0, r1
   1299c:	bl	12878 <main@@Base+0x2e0>
   129a0:	mov	r9, r0
   129a4:	mov	r0, r4
   129a8:	bl	12f7c <main@@Base+0x9e4>
   129ac:	mov	r4, r0
   129b0:	mov	r0, r9
   129b4:	bl	12ff8 <main@@Base+0xa60>
   129b8:	cmp	r0, #700	; 0x2bc
   129bc:	bne	12aa8 <main@@Base+0x510>
   129c0:	mov	r0, r4
   129c4:	bl	1300c <main@@Base+0xa74>
   129c8:	movw	r1, #34464	; 0x86a0
   129cc:	movt	r1, #1
   129d0:	cmp	r0, r1
   129d4:	bne	12ac8 <main@@Base+0x530>
   129d8:	mov	r5, #0
   129dc:	movw	r6, #27639	; 0x6bf7
   129e0:	movt	r6, #1
   129e4:	mov	r7, r9
   129e8:	mov	r0, r7
   129ec:	mov	r1, r6
   129f0:	mov	r2, #7
   129f4:	bl	12444 <bcmp@plt>
   129f8:	cmp	r0, #0
   129fc:	bne	12a44 <main@@Base+0x4ac>
   12a00:	add	r7, r7, #7
   12a04:	add	r5, r5, #1
   12a08:	cmp	r5, #100	; 0x64
   12a0c:	bne	129e8 <main@@Base+0x450>
   12a10:	mov	r6, #100	; 0x64
   12a14:	movw	r5, #36976	; 0x9070
   12a18:	movt	r5, #2
   12a1c:	mov	r0, r4
   12a20:	mov	r1, r5
   12a24:	mov	r2, #1000	; 0x3e8
   12a28:	bl	12444 <bcmp@plt>
   12a2c:	cmp	r0, #0
   12a30:	bne	12a88 <main@@Base+0x4f0>
   12a34:	add	r4, r4, #1000	; 0x3e8
   12a38:	subs	r6, r6, #1
   12a3c:	bne	12a1c <main@@Base+0x484>
   12a40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12a44:	movw	r0, #28400	; 0x6ef0
   12a48:	movt	r0, #1
   12a4c:	mov	r1, r5
   12a50:	mov	r2, r9
   12a54:	bl	123c0 <printf@plt>
   12a58:	sub	r1, r7, r8
   12a5c:	movw	r0, #28432	; 0x6f10
   12a60:	movt	r0, #1
   12a64:	bl	123c0 <printf@plt>
   12a68:	movw	r0, #34000	; 0x84d0
   12a6c:	movt	r0, #1
   12a70:	movw	r1, #27377	; 0x6af1
   12a74:	movt	r1, #1
   12a78:	movw	r3, #28335	; 0x6eaf
   12a7c:	movt	r3, #1
   12a80:	mov	r2, #85	; 0x55
   12a84:	bl	12498 <__assert_fail@plt>
   12a88:	movw	r0, #34000	; 0x84d0
   12a8c:	movt	r0, #1
   12a90:	movw	r1, #27377	; 0x6af1
   12a94:	movt	r1, #1
   12a98:	movw	r3, #28335	; 0x6eaf
   12a9c:	movt	r3, #1
   12aa0:	mov	r2, #91	; 0x5b
   12aa4:	bl	12498 <__assert_fail@plt>
   12aa8:	movw	r0, #34000	; 0x84d0
   12aac:	movt	r0, #1
   12ab0:	movw	r1, #27377	; 0x6af1
   12ab4:	movt	r1, #1
   12ab8:	movw	r3, #28335	; 0x6eaf
   12abc:	movt	r3, #1
   12ac0:	mov	r2, #74	; 0x4a
   12ac4:	bl	12498 <__assert_fail@plt>
   12ac8:	movw	r0, #34000	; 0x84d0
   12acc:	movt	r0, #1
   12ad0:	movw	r1, #27377	; 0x6af1
   12ad4:	movt	r1, #1
   12ad8:	movw	r3, #28335	; 0x6eaf
   12adc:	movt	r3, #1
   12ae0:	mov	r2, #78	; 0x4e
   12ae4:	bl	12498 <__assert_fail@plt>
   12ae8:	push	{r4, r5, fp, lr}
   12aec:	add	fp, sp, #8
   12af0:	mov	r4, r1
   12af4:	mov	r5, r0
   12af8:	bl	13010 <main@@Base+0xa78>
   12afc:	cmp	r0, r4
   12b00:	bls	12b18 <main@@Base+0x580>
   12b04:	add	r4, r5, r4, lsl #2
   12b08:	mov	r0, r4
   12b0c:	bl	12f4c <main@@Base+0x9b4>
   12b10:	add	r0, r4, r0
   12b14:	pop	{r4, r5, fp, pc}
   12b18:	movw	r0, #28534	; 0x6f76
   12b1c:	movt	r0, #1
   12b20:	movw	r1, #28024	; 0x6d78
   12b24:	movt	r1, #1
   12b28:	movw	r3, #28589	; 0x6fad
   12b2c:	movt	r3, #1
   12b30:	movw	r2, #693	; 0x2b5
   12b34:	bl	12498 <__assert_fail@plt>
   12b38:	push	{r4, sl, fp, lr}
   12b3c:	add	fp, sp, #8
   12b40:	vpush	{d8-d10}
   12b44:	mov	r4, r0
   12b48:	vmov.f64	d8, d1
   12b4c:	vmov.f64	d9, d0
   12b50:	movw	r0, #28688	; 0x7010
   12b54:	movt	r0, #1
   12b58:	movw	r1, #27475	; 0x6b53
   12b5c:	movt	r1, #1
   12b60:	bl	123c0 <printf@plt>
   12b64:	vsub.f64	d9, d8, d9
   12b68:	vmov	r2, r3, d9
   12b6c:	movw	r0, #28703	; 0x701f
   12b70:	movt	r0, #1
   12b74:	bl	123c0 <printf@plt>
   12b78:	movw	r0, #28727	; 0x7037
   12b7c:	movt	r0, #1
   12b80:	mov	r1, #10
   12b84:	bl	123c0 <printf@plt>
   12b88:	movw	r0, #28743	; 0x7047
   12b8c:	movt	r0, #1
   12b90:	mov	r1, r4
   12b94:	bl	123c0 <printf@plt>
   12b98:	vldr	d8, [pc, #192]	; 12c60 <main@@Base+0x6c8>
   12b9c:	vmov.f64	d10, #36	; 0x41200000  10.0
   12ba0:	vmov	s0, r4
   12ba4:	vcvt.f64.u32	d16, s0
   12ba8:	vmul.f64	d16, d16, d10
   12bac:	vdiv.f64	d16, d16, d8
   12bb0:	vdiv.f64	d16, d16, d9
   12bb4:	vmov	r2, r3, d16
   12bb8:	movw	r0, #28762	; 0x705a
   12bbc:	movt	r0, #1
   12bc0:	bl	123c0 <printf@plt>
   12bc4:	vdiv.f64	d16, d10, d9
   12bc8:	vmov	r2, r3, d16
   12bcc:	movw	r0, #28786	; 0x7072
   12bd0:	movt	r0, #1
   12bd4:	bl	123c0 <printf@plt>
   12bd8:	vldr	d17, [pc, #136]	; 12c68 <main@@Base+0x6d0>
   12bdc:	vmul.f64	d16, d9, d17
   12be0:	vldr	d18, [pc, #136]	; 12c70 <main@@Base+0x6d8>
   12be4:	vdiv.f64	d16, d16, d10
   12be8:	vcmpe.f64	d16, d18
   12bec:	vmrs	APSR_nzcv, fpscr
   12bf0:	bpl	12c04 <main@@Base+0x66c>
   12bf4:	vmov	r2, r3, d16
   12bf8:	movw	r0, #28819	; 0x7093
   12bfc:	movt	r0, #1
   12c00:	b	12c54 <main@@Base+0x6bc>
   12c04:	vcmpe.f64	d16, d8
   12c08:	vmrs	APSR_nzcv, fpscr
   12c0c:	bpl	12c24 <main@@Base+0x68c>
   12c10:	vdiv.f64	d16, d16, d18
   12c14:	vmov	r2, r3, d16
   12c18:	movw	r0, #28843	; 0x70ab
   12c1c:	movt	r0, #1
   12c20:	b	12c54 <main@@Base+0x6bc>
   12c24:	vcmpe.f64	d16, d17
   12c28:	vmrs	APSR_nzcv, fpscr
   12c2c:	bpl	12c44 <main@@Base+0x6ac>
   12c30:	vdiv.f64	d16, d16, d8
   12c34:	vmov	r2, r3, d16
   12c38:	movw	r0, #28867	; 0x70c3
   12c3c:	movt	r0, #1
   12c40:	b	12c54 <main@@Base+0x6bc>
   12c44:	vdiv.f64	d16, d16, d17
   12c48:	vmov	r2, r3, d16
   12c4c:	movw	r0, #28891	; 0x70db
   12c50:	movt	r0, #1
   12c54:	vpop	{d8-d10}
   12c58:	pop	{r4, sl, fp, lr}
   12c5c:	b	123c0 <printf@plt>
   12c60:	andeq	r0, r0, r0
   12c64:	smlawbmi	lr, r0, r4, r8
   12c68:	andeq	r0, r0, r0
   12c6c:	bicmi	ip, sp, r5, ror #26
   12c70:	andeq	r0, r0, r0
   12c74:	addmi	r4, pc, r0
   12c78:	push	{r4, sl, fp, lr}
   12c7c:	add	fp, sp, #8
   12c80:	mov	r4, r0
   12c84:	bl	12d70 <main@@Base+0x7d8>
   12c88:	cmp	r0, #0
   12c8c:	popne	{r4, sl, fp, pc}
   12c90:	mov	r0, r4
   12c94:	pop	{r4, sl, fp, lr}
   12c98:	b	12d84 <main@@Base+0x7ec>
   12c9c:	push	{r4, sl, fp, lr}
   12ca0:	add	fp, sp, #8
   12ca4:	mov	r4, r0
   12ca8:	movw	r1, #27355	; 0x6adb
   12cac:	movt	r1, #1
   12cb0:	bl	15ce4 <flatcc_builder_create_string_str@@Base>
   12cb4:	mov	r1, r0
   12cb8:	mov	r0, r4
   12cbc:	pop	{r4, sl, fp, lr}
   12cc0:	b	12d8c <main@@Base+0x7f4>
   12cc4:	push	{r4, r5, fp, lr}
   12cc8:	add	fp, sp, #8
   12ccc:	mov	r4, r0
   12cd0:	bl	12db4 <main@@Base+0x81c>
   12cd4:	mov	r5, #1000	; 0x3e8
   12cd8:	mov	r0, r4
   12cdc:	bl	12db8 <main@@Base+0x820>
   12ce0:	cmp	r0, #0
   12ce4:	beq	12d08 <main@@Base+0x770>
   12ce8:	mov	r1, r0
   12cec:	mov	r0, r4
   12cf0:	bl	12e1c <main@@Base+0x884>
   12cf4:	subs	r5, r5, #1
   12cf8:	bne	12cd8 <main@@Base+0x740>
   12cfc:	mov	r0, r4
   12d00:	pop	{r4, r5, fp, lr}
   12d04:	b	12e28 <main@@Base+0x890>
   12d08:	movw	r0, #27568	; 0x6bb0
   12d0c:	movt	r0, #1
   12d10:	movw	r1, #27377	; 0x6af1
   12d14:	movt	r1, #1
   12d18:	movw	r3, #27570	; 0x6bb2
   12d1c:	movt	r3, #1
   12d20:	mov	r2, #42	; 0x2a
   12d24:	bl	12498 <__assert_fail@plt>
   12d28:	push	{r4, sl, fp, lr}
   12d2c:	add	fp, sp, #8
   12d30:	cmp	r1, #0
   12d34:	popeq	{r4, sl, fp, pc}
   12d38:	mov	r4, r1
   12d3c:	mov	r1, #11
   12d40:	bl	15524 <flatcc_builder_table_add_offset@@Base>
   12d44:	cmp	r0, #0
   12d48:	strne	r4, [r0]
   12d4c:	pop	{r4, sl, fp, pc}
   12d50:	push	{r4, sl, fp, lr}
   12d54:	add	fp, sp, #8
   12d58:	mov	r4, r0
   12d5c:	bl	12e94 <main@@Base+0x8fc>
   12d60:	mov	r1, r0
   12d64:	mov	r0, r4
   12d68:	pop	{r4, sl, fp, lr}
   12d6c:	b	12f20 <main@@Base+0x988>
   12d70:	movw	r1, #27563	; 0x6bab
   12d74:	movt	r1, #1
   12d78:	mov	r2, #0
   12d7c:	mov	r3, #0
   12d80:	b	13b00 <flatcc_builder_start_buffer@@Base>
   12d84:	mov	r1, #36	; 0x24
   12d88:	b	147ec <flatcc_builder_start_table@@Base>
   12d8c:	push	{r4, sl, fp, lr}
   12d90:	add	fp, sp, #8
   12d94:	cmp	r1, #0
   12d98:	popeq	{r4, sl, fp, pc}
   12d9c:	mov	r4, r1
   12da0:	mov	r1, #3
   12da4:	bl	15524 <flatcc_builder_table_add_offset@@Base>
   12da8:	cmp	r0, #0
   12dac:	strne	r4, [r0]
   12db0:	pop	{r4, sl, fp, pc}
   12db4:	b	145a8 <flatcc_builder_start_offset_vector@@Base>
   12db8:	push	{r4, r5, fp, lr}
   12dbc:	add	fp, sp, #8
   12dc0:	mov	r4, r0
   12dc4:	bl	12d84 <main@@Base+0x7ec>
   12dc8:	mov	r0, r4
   12dcc:	bl	12e2c <main@@Base+0x894>
   12dd0:	mov	r5, #100	; 0x64
   12dd4:	mov	r0, r4
   12dd8:	bl	12e30 <main@@Base+0x898>
   12ddc:	subs	r5, r5, #1
   12de0:	bne	12dd4 <main@@Base+0x83c>
   12de4:	mov	r0, r4
   12de8:	bl	12e40 <main@@Base+0x8a8>
   12dec:	mov	r0, r4
   12df0:	bl	12e60 <main@@Base+0x8c8>
   12df4:	mov	r5, #100	; 0x64
   12df8:	mov	r0, r4
   12dfc:	bl	12e64 <main@@Base+0x8cc>
   12e00:	subs	r5, r5, #1
   12e04:	bne	12df8 <main@@Base+0x860>
   12e08:	mov	r0, r4
   12e0c:	bl	12e74 <main@@Base+0x8dc>
   12e10:	mov	r0, r4
   12e14:	pop	{r4, r5, fp, lr}
   12e18:	b	12e94 <main@@Base+0x8fc>
   12e1c:	cmp	r1, #0
   12e20:	bxeq	lr
   12e24:	b	14128 <flatcc_builder_offset_vector_push@@Base>
   12e28:	b	1465c <flatcc_builder_end_offset_vector@@Base>
   12e2c:	b	146c0 <flatcc_builder_start_string@@Base>
   12e30:	movw	r1, #27639	; 0x6bf7
   12e34:	movt	r1, #1
   12e38:	mov	r2, #7
   12e3c:	b	14278 <flatcc_builder_append_string@@Base>
   12e40:	push	{r4, sl, fp, lr}
   12e44:	add	fp, sp, #8
   12e48:	mov	r4, r0
   12e4c:	bl	15d40 <flatcc_builder_end_string@@Base>
   12e50:	mov	r1, r0
   12e54:	mov	r0, r4
   12e58:	pop	{r4, sl, fp, lr}
   12e5c:	b	12d8c <main@@Base+0x7f4>
   12e60:	b	12ee4 <main@@Base+0x94c>
   12e64:	movw	r1, #36976	; 0x9070
   12e68:	movt	r1, #2
   12e6c:	mov	r2, #1000	; 0x3e8
   12e70:	b	14074 <flatcc_builder_append_vector@@Base>
   12e74:	push	{r4, sl, fp, lr}
   12e78:	add	fp, sp, #8
   12e7c:	mov	r4, r0
   12e80:	bl	12f1c <main@@Base+0x984>
   12e84:	mov	r1, r0
   12e88:	mov	r0, r4
   12e8c:	pop	{r4, sl, fp, lr}
   12e90:	b	12ef4 <main@@Base+0x95c>
   12e94:	push	{r4, sl, fp, lr}
   12e98:	add	fp, sp, #8
   12e9c:	mov	r4, r0
   12ea0:	movw	r1, #28948	; 0x7114
   12ea4:	movt	r1, #1
   12ea8:	mov	r2, #1
   12eac:	bl	14e78 <flatcc_builder_check_required@@Base>
   12eb0:	cmp	r0, #0
   12eb4:	beq	12ec4 <main@@Base+0x92c>
   12eb8:	mov	r0, r4
   12ebc:	pop	{r4, sl, fp, lr}
   12ec0:	b	14ef8 <flatcc_builder_end_table@@Base>
   12ec4:	movw	r0, #27647	; 0x6bff
   12ec8:	movt	r0, #1
   12ecc:	movw	r1, #27809	; 0x6ca1
   12ed0:	movt	r1, #1
   12ed4:	movw	r3, #27905	; 0x6d01
   12ed8:	movt	r3, #1
   12edc:	mov	r2, #235	; 0xeb
   12ee0:	bl	12498 <__assert_fail@plt>
   12ee4:	mov	r1, #1
   12ee8:	mov	r2, #1
   12eec:	mvn	r3, #0
   12ef0:	b	14518 <flatcc_builder_start_vector@@Base>
   12ef4:	push	{r4, sl, fp, lr}
   12ef8:	add	fp, sp, #8
   12efc:	cmp	r1, #0
   12f00:	popeq	{r4, sl, fp, pc}
   12f04:	mov	r4, r1
   12f08:	mov	r1, #5
   12f0c:	bl	15524 <flatcc_builder_table_add_offset@@Base>
   12f10:	cmp	r0, #0
   12f14:	strne	r4, [r0]
   12f18:	pop	{r4, sl, fp, pc}
   12f1c:	b	15150 <flatcc_builder_end_vector@@Base>
   12f20:	b	13cb4 <flatcc_builder_end_buffer@@Base>
   12f24:	push	{fp, lr}
   12f28:	mov	fp, sp
   12f2c:	add	r0, r0, #4
   12f30:	bl	12f54 <main@@Base+0x9bc>
   12f34:	movw	r1, #45235	; 0xb0b3
   12f38:	movt	r1, #44209	; 0xacb1
   12f3c:	add	r0, r0, r1
   12f40:	clz	r0, r0
   12f44:	lsr	r0, r0, #5
   12f48:	pop	{fp, pc}
   12f4c:	ldr	r0, [r0]
   12f50:	b	12f60 <main@@Base+0x9c8>
   12f54:	ldr	r0, [r0]
   12f58:	b	12f5c <main@@Base+0x9c4>
   12f5c:	bx	lr
   12f60:	bx	lr
   12f64:	ldr	r0, [r0]
   12f68:	b	12f74 <main@@Base+0x9dc>
   12f6c:	ldrh	r0, [r0]
   12f70:	b	12f78 <main@@Base+0x9e0>
   12f74:	bx	lr
   12f78:	bx	lr
   12f7c:	push	{r4, r5, r6, sl, fp, lr}
   12f80:	add	fp, sp, #16
   12f84:	cmp	r0, #0
   12f88:	beq	12fd8 <main@@Base+0xa40>
   12f8c:	mov	r4, r0
   12f90:	bl	12f64 <main@@Base+0x9cc>
   12f94:	sub	r6, r4, r0
   12f98:	mov	r0, r6
   12f9c:	bl	12f6c <main@@Base+0x9d4>
   12fa0:	mov	r5, #0
   12fa4:	cmp	r0, #16
   12fa8:	bcc	12fd0 <main@@Base+0xa38>
   12fac:	add	r0, r6, #14
   12fb0:	bl	12f6c <main@@Base+0x9d4>
   12fb4:	cmp	r0, #0
   12fb8:	beq	12fd0 <main@@Base+0xa38>
   12fbc:	add	r4, r4, r0
   12fc0:	mov	r0, r4
   12fc4:	bl	12f4c <main@@Base+0x9b4>
   12fc8:	add	r0, r4, r0
   12fcc:	add	r5, r0, #4
   12fd0:	mov	r0, r5
   12fd4:	pop	{r4, r5, r6, sl, fp, pc}
   12fd8:	movw	r0, #27986	; 0x6d52
   12fdc:	movt	r0, #1
   12fe0:	movw	r1, #28024	; 0x6d78
   12fe4:	movt	r1, #1
   12fe8:	movw	r3, #28445	; 0x6f1d
   12fec:	movt	r3, #1
   12ff0:	movw	r2, #706	; 0x2c2
   12ff4:	bl	12498 <__assert_fail@plt>
   12ff8:	cmp	r0, #0
   12ffc:	moveq	r0, #0
   13000:	bxeq	lr
   13004:	sub	r0, r0, #4
   13008:	b	12f4c <main@@Base+0x9b4>
   1300c:	b	13010 <main@@Base+0xa78>
   13010:	cmp	r0, #0
   13014:	moveq	r0, #0
   13018:	bxeq	lr
   1301c:	sub	r0, r0, #4
   13020:	b	12f4c <main@@Base+0x9b4>

00013024 <flatcc_builder_default_alloc@@Base>:
   13024:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13028:	add	fp, sp, #24
   1302c:	mov	r4, r1
   13030:	cmp	r2, #0
   13034:	beq	1307c <flatcc_builder_default_alloc@@Base+0x58>
   13038:	mov	r8, r3
   1303c:	ldr	r0, [fp, #8]
   13040:	sub	r1, r0, #1
   13044:	cmp	r1, #6
   13048:	bhi	130ac <flatcc_builder_default_alloc@@Base+0x88>
   1304c:	mov	r0, #256	; 0x100
   13050:	add	r3, pc, #0
   13054:	ldr	pc, [r3, r1, lsl #2]
   13058:	andeq	r3, r1, r0, asr #1
   1305c:	andeq	r3, r1, ip, lsr #1
   13060:	andeq	r3, r1, ip, lsr #1
   13064:	andeq	r3, r1, r4, ror r0
   13068:	strheq	r3, [r1], -r4
   1306c:	andeq	r3, r1, ip, lsr #1
   13070:	strheq	r3, [r1], -ip
   13074:	mov	r0, #288	; 0x120
   13078:	b	130c0 <flatcc_builder_default_alloc@@Base+0x9c>
   1307c:	ldr	r0, [r4]
   13080:	cmp	r0, #0
   13084:	beq	130a0 <flatcc_builder_default_alloc@@Base+0x7c>
   13088:	bl	123d8 <free@plt>
   1308c:	mov	r6, #0
   13090:	str	r6, [r4]
   13094:	str	r6, [r4, #4]
   13098:	mov	r0, r6
   1309c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   130a0:	mov	r6, #0
   130a4:	mov	r0, r6
   130a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   130ac:	mov	r0, #32
   130b0:	b	130c0 <flatcc_builder_default_alloc@@Base+0x9c>
   130b4:	mov	r0, r2
   130b8:	b	130c0 <flatcc_builder_default_alloc@@Base+0x9c>
   130bc:	mov	r0, #64	; 0x40
   130c0:	mov	r7, r0
   130c4:	lsl	r0, r0, #1
   130c8:	cmp	r7, r2
   130cc:	bcc	130c0 <flatcc_builder_default_alloc@@Base+0x9c>
   130d0:	ldr	r0, [r4, #4]
   130d4:	mov	r6, #0
   130d8:	cmp	r0, r2
   130dc:	lsrcs	r0, r0, #1
   130e0:	cmpcs	r0, r7
   130e4:	bcs	13128 <flatcc_builder_default_alloc@@Base+0x104>
   130e8:	ldr	r0, [r4]
   130ec:	mov	r1, r7
   130f0:	bl	123fc <realloc@plt>
   130f4:	cmp	r0, #0
   130f8:	beq	13130 <flatcc_builder_default_alloc@@Base+0x10c>
   130fc:	mov	r5, r0
   13100:	cmp	r8, #0
   13104:	beq	13124 <flatcc_builder_default_alloc@@Base+0x100>
   13108:	ldr	r1, [r4, #4]
   1310c:	cmp	r7, r1
   13110:	bls	13124 <flatcc_builder_default_alloc@@Base+0x100>
   13114:	add	r0, r5, r1
   13118:	sub	r2, r7, r1
   1311c:	mov	r1, #0
   13120:	bl	12468 <memset@plt>
   13124:	stm	r4, {r5, r7}
   13128:	mov	r0, r6
   1312c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13130:	mvn	r6, #0
   13134:	mov	r0, r6
   13138:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0001313c <flatcc_builder_flush_vtable_cache@@Base>:
   1313c:	push	{r4, r5, fp, lr}
   13140:	add	fp, sp, #8
   13144:	mov	r4, r0
   13148:	ldr	r0, [r0, #116]	; 0x74
   1314c:	cmp	r0, #0
   13150:	popeq	{r4, r5, fp, pc}
   13154:	ldr	r0, [r4, #92]	; 0x5c
   13158:	ldr	r2, [r4, #96]	; 0x60
   1315c:	mov	r5, #0
   13160:	mov	r1, #0
   13164:	bl	12468 <memset@plt>
   13168:	mov	r0, #16
   1316c:	str	r5, [r4, #120]	; 0x78
   13170:	str	r0, [r4, #124]	; 0x7c
   13174:	pop	{r4, r5, fp, pc}

00013178 <flatcc_builder_custom_init@@Base>:
   13178:	push	{r4, r5, r6, r7, fp, lr}
   1317c:	add	fp, sp, #16
   13180:	mov	r5, r3
   13184:	mov	r6, r2
   13188:	mov	r7, r1
   1318c:	mov	r4, r0
   13190:	mov	r1, #0
   13194:	mov	r2, #232	; 0xe8
   13198:	bl	12468 <memset@plt>
   1319c:	ldr	r0, [fp, #8]
   131a0:	cmp	r7, #0
   131a4:	bne	131bc <flatcc_builder_custom_init@@Base+0x44>
   131a8:	mov	r1, #1
   131ac:	str	r1, [r4, #184]	; 0xb8
   131b0:	add	r6, r4, #188	; 0xbc
   131b4:	movw	r7, #25928	; 0x6548
   131b8:	movt	r7, #1
   131bc:	movw	r1, #12324	; 0x3024
   131c0:	movt	r1, #1
   131c4:	cmp	r5, #0
   131c8:	movne	r1, r5
   131cc:	str	r6, [r4, #36]	; 0x24
   131d0:	str	r0, [r4, #40]	; 0x28
   131d4:	str	r7, [r4, #44]	; 0x2c
   131d8:	str	r1, [r4, #48]	; 0x30
   131dc:	mov	r0, #0
   131e0:	pop	{r4, r5, r6, r7, fp, pc}

000131e4 <flatcc_builder_init@@Base>:
   131e4:	push	{fp, lr}
   131e8:	mov	fp, sp
   131ec:	sub	sp, sp, #8
   131f0:	mov	r1, #0
   131f4:	str	r1, [sp]
   131f8:	mov	r1, #0
   131fc:	mov	r2, #0
   13200:	mov	r3, #0
   13204:	bl	13178 <flatcc_builder_custom_init@@Base>
   13208:	mov	r0, #0
   1320c:	mov	sp, fp
   13210:	pop	{fp, pc}

00013214 <flatcc_builder_custom_reset@@Base>:
   13214:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13218:	add	fp, sp, #28
   1321c:	sub	sp, sp, #4
   13220:	mov	r9, r2
   13224:	mov	r8, r1
   13228:	mov	sl, r0
   1322c:	add	r7, r0, #52	; 0x34
   13230:	mov	r5, #0
   13234:	b	13254 <flatcc_builder_custom_reset@@Base+0x40>
   13238:	ldr	r0, [r6, #56]	; 0x38
   1323c:	cmp	r0, #0
   13240:	bne	1333c <flatcc_builder_custom_reset@@Base+0x128>
   13244:	add	r7, r7, #8
   13248:	add	r5, r5, #1
   1324c:	cmp	r5, #8
   13250:	beq	132a8 <flatcc_builder_custom_reset@@Base+0x94>
   13254:	add	r6, sl, r5, lsl #3
   13258:	ldr	r0, [r6, #52]	; 0x34
   1325c:	cmp	r0, #0
   13260:	beq	13238 <flatcc_builder_custom_reset@@Base+0x24>
   13264:	cmp	r9, #0
   13268:	cmpne	r5, #5
   1326c:	beq	13294 <flatcc_builder_custom_reset@@Base+0x80>
   13270:	ldr	r0, [sl, #40]	; 0x28
   13274:	ldr	r4, [sl, #48]	; 0x30
   13278:	str	r5, [sp]
   1327c:	mov	r1, r7
   13280:	mov	r2, #1
   13284:	mov	r3, #1
   13288:	blx	r4
   1328c:	cmp	r0, #0
   13290:	bne	1332c <flatcc_builder_custom_reset@@Base+0x118>
   13294:	ldr	r0, [r6, #52]	; 0x34
   13298:	ldr	r2, [r6, #56]	; 0x38
   1329c:	mov	r1, #0
   132a0:	bl	12468 <memset@plt>
   132a4:	b	13244 <flatcc_builder_custom_reset@@Base+0x30>
   132a8:	mov	r0, #0
   132ac:	str	r0, [sl, #120]	; 0x78
   132b0:	ldr	r1, [sl, #124]	; 0x7c
   132b4:	cmp	r1, #0
   132b8:	movne	r1, #16
   132bc:	strne	r1, [sl, #124]	; 0x7c
   132c0:	vmov.i32	q8, #0	; 0x00000000
   132c4:	str	r0, [sl, #136]	; 0x88
   132c8:	str	r0, [sl, #140]	; 0x8c
   132cc:	strh	r0, [sl, #128]	; 0x80
   132d0:	str	r0, [sl, #32]
   132d4:	add	r1, sl, #148	; 0x94
   132d8:	vst1.32	{d16-d17}, [r1]
   132dc:	ldr	r1, [sl, #52]	; 0x34
   132e0:	ldr	r2, [sl, #60]	; 0x3c
   132e4:	ldr	r3, [sl, #76]	; 0x4c
   132e8:	str	r2, [sl, #16]
   132ec:	str	r0, [sl, #20]
   132f0:	str	r0, [sl, #24]
   132f4:	str	r3, [sl]
   132f8:	str	r1, [sl, #4]
   132fc:	cmp	r8, #0
   13300:	movne	r0, #0
   13304:	strne	r0, [sl, #172]	; 0xac
   13308:	strne	r0, [sl, #176]	; 0xb0
   1330c:	strne	r0, [sl, #180]	; 0xb4
   13310:	ldr	r0, [sl, #184]	; 0xb8
   13314:	mov	r5, #0
   13318:	cmp	r0, #0
   1331c:	beq	13330 <flatcc_builder_custom_reset@@Base+0x11c>
   13320:	add	r0, sl, #188	; 0xbc
   13324:	bl	16424 <flatcc_emitter_reset@@Base>
   13328:	b	13330 <flatcc_builder_custom_reset@@Base+0x11c>
   1332c:	mvn	r5, #0
   13330:	mov	r0, r5
   13334:	sub	sp, fp, #28
   13338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1333c:	movw	r0, #29464	; 0x7318
   13340:	movt	r0, #1
   13344:	movw	r1, #29482	; 0x732a
   13348:	movt	r1, #1
   1334c:	movw	r3, #29552	; 0x7370
   13350:	movt	r3, #1
   13354:	movw	r2, #434	; 0x1b2
   13358:	bl	12498 <__assert_fail@plt>

0001335c <flatcc_builder_reset@@Base>:
   1335c:	mov	r1, #0
   13360:	mov	r2, #0
   13364:	b	13214 <flatcc_builder_custom_reset@@Base>

00013368 <flatcc_builder_clear@@Base>:
   13368:	push	{r4, r5, r6, r7, fp, lr}
   1336c:	add	fp, sp, #16
   13370:	sub	sp, sp, #8
   13374:	mov	r7, r0
   13378:	add	r5, r0, #52	; 0x34
   1337c:	mov	r6, #0
   13380:	ldr	r0, [r7, #40]	; 0x28
   13384:	ldr	r4, [r7, #48]	; 0x30
   13388:	str	r6, [sp]
   1338c:	mov	r1, r5
   13390:	mov	r2, #0
   13394:	mov	r3, #0
   13398:	blx	r4
   1339c:	add	r5, r5, #8
   133a0:	add	r6, r6, #1
   133a4:	cmp	r6, #8
   133a8:	bne	13380 <flatcc_builder_clear@@Base+0x18>
   133ac:	ldr	r0, [r7, #184]	; 0xb8
   133b0:	cmp	r0, #0
   133b4:	beq	133c0 <flatcc_builder_clear@@Base+0x58>
   133b8:	add	r0, r7, #188	; 0xbc
   133bc:	bl	164e4 <flatcc_emitter_clear@@Base>
   133c0:	mov	r0, r7
   133c4:	mov	r1, #0
   133c8:	mov	r2, #232	; 0xe8
   133cc:	sub	sp, fp, #16
   133d0:	pop	{r4, r5, r6, r7, fp, lr}
   133d4:	b	12468 <memset@plt>

000133d8 <flatcc_builder_enter_user_frame_ptr@@Base>:
   133d8:	push	{r4, r5, r6, r7, fp, lr}
   133dc:	add	fp, sp, #16
   133e0:	sub	sp, sp, #8
   133e4:	mov	r4, r0
   133e8:	ldr	r2, [r0, #228]	; 0xe4
   133ec:	mov	r7, #0
   133f0:	str	r7, [sp]
   133f4:	add	r0, r1, #7
   133f8:	bic	r5, r0, #3
   133fc:	mov	r0, r4
   13400:	mov	r1, #7
   13404:	mov	r3, r5
   13408:	bl	13450 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   1340c:	cmp	r0, #0
   13410:	beq	13444 <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   13414:	mov	r6, r0
   13418:	mov	r1, #0
   1341c:	mov	r2, r5
   13420:	bl	12468 <memset@plt>
   13424:	ldr	r0, [r4, #224]	; 0xe0
   13428:	str	r0, [r6], #4
   1342c:	ldr	r0, [r4, #228]	; 0xe4
   13430:	add	r1, r0, #4
   13434:	add	r0, r0, r5
   13438:	str	r1, [r4, #224]	; 0xe0
   1343c:	str	r0, [r4, #228]	; 0xe4
   13440:	mov	r7, r6
   13444:	mov	r0, r7
   13448:	sub	sp, fp, #16
   1344c:	pop	{r4, r5, r6, r7, fp, pc}
   13450:	push	{r4, r5, fp, lr}
   13454:	add	fp, sp, #8
   13458:	sub	sp, sp, #8
   1345c:	mov	r4, r2
   13460:	add	r2, r3, r2
   13464:	add	r3, r0, r1, lsl #3
   13468:	add	r5, r3, #52	; 0x34
   1346c:	ldr	r3, [r3, #56]	; 0x38
   13470:	cmp	r2, r3
   13474:	bls	1349c <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   13478:	ldr	r3, [fp, #8]
   1347c:	ldr	ip, [r0, #40]	; 0x28
   13480:	ldr	lr, [r0, #48]	; 0x30
   13484:	str	r1, [sp]
   13488:	mov	r0, ip
   1348c:	mov	r1, r5
   13490:	blx	lr
   13494:	cmp	r0, #0
   13498:	bne	134ac <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   1349c:	ldr	r0, [r5]
   134a0:	add	r0, r0, r4
   134a4:	sub	sp, fp, #8
   134a8:	pop	{r4, r5, fp, pc}
   134ac:	movw	r0, #34000	; 0x84d0
   134b0:	movt	r0, #1
   134b4:	movw	r1, #29482	; 0x732a
   134b8:	movt	r1, #1
   134bc:	movw	r3, #33546	; 0x830a
   134c0:	movt	r3, #1
   134c4:	mov	r2, #308	; 0x134
   134c8:	bl	12498 <__assert_fail@plt>

000134cc <flatcc_builder_enter_user_frame@@Base>:
   134cc:	push	{r4, r5, r6, r7, fp, lr}
   134d0:	add	fp, sp, #16
   134d4:	sub	sp, sp, #8
   134d8:	mov	r4, r0
   134dc:	ldr	r2, [r0, #228]	; 0xe4
   134e0:	mov	r6, #0
   134e4:	str	r6, [sp]
   134e8:	add	r0, r1, #7
   134ec:	bic	r5, r0, #3
   134f0:	mov	r0, r4
   134f4:	mov	r1, #7
   134f8:	mov	r3, r5
   134fc:	bl	13450 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   13500:	cmp	r0, #0
   13504:	beq	13534 <flatcc_builder_enter_user_frame@@Base+0x68>
   13508:	mov	r7, r0
   1350c:	mov	r1, #0
   13510:	mov	r2, r5
   13514:	bl	12468 <memset@plt>
   13518:	ldr	r0, [r4, #224]	; 0xe0
   1351c:	str	r0, [r7]
   13520:	ldr	r0, [r4, #228]	; 0xe4
   13524:	add	r6, r0, #4
   13528:	add	r0, r0, r5
   1352c:	str	r6, [r4, #224]	; 0xe0
   13530:	str	r0, [r4, #228]	; 0xe4
   13534:	mov	r0, r6
   13538:	sub	sp, fp, #16
   1353c:	pop	{r4, r5, r6, r7, fp, pc}

00013540 <flatcc_builder_exit_user_frame@@Base>:
   13540:	push	{fp, lr}
   13544:	mov	fp, sp
   13548:	ldr	r1, [r0, #224]	; 0xe0
   1354c:	cmp	r1, #0
   13550:	subne	r2, r1, #4
   13554:	strne	r2, [r0, #228]	; 0xe4
   13558:	ldrne	r2, [r0, #108]	; 0x6c
   1355c:	addne	r1, r2, r1
   13560:	ldrne	r1, [r1, #-4]
   13564:	strne	r1, [r0, #224]	; 0xe0
   13568:	movne	r0, r1
   1356c:	popne	{fp, pc}
   13570:	movw	r0, #29614	; 0x73ae
   13574:	movt	r0, #1
   13578:	movw	r1, #29482	; 0x732a
   1357c:	movt	r1, #1
   13580:	movw	r3, #29639	; 0x73c7
   13584:	movt	r3, #1
   13588:	movw	r2, #542	; 0x21e
   1358c:	bl	12498 <__assert_fail@plt>

00013590 <flatcc_builder_exit_user_frame_at@@Base>:
   13590:	push	{fp, lr}
   13594:	mov	fp, sp
   13598:	ldr	r2, [r0, #224]	; 0xe0
   1359c:	cmp	r2, r1
   135a0:	bcc	135b0 <flatcc_builder_exit_user_frame_at@@Base+0x20>
   135a4:	str	r1, [r0, #224]	; 0xe0
   135a8:	pop	{fp, lr}
   135ac:	b	13540 <flatcc_builder_exit_user_frame@@Base>
   135b0:	movw	r0, #29697	; 0x7401
   135b4:	movt	r0, #1
   135b8:	movw	r1, #29482	; 0x732a
   135bc:	movt	r1, #1
   135c0:	movw	r3, #29728	; 0x7420
   135c4:	movt	r3, #1
   135c8:	movw	r2, #551	; 0x227
   135cc:	bl	12498 <__assert_fail@plt>

000135d0 <flatcc_builder_get_current_user_frame@@Base>:
   135d0:	ldr	r0, [r0, #224]	; 0xe0
   135d4:	bx	lr

000135d8 <flatcc_builder_get_user_frame_ptr@@Base>:
   135d8:	ldr	r0, [r0, #108]	; 0x6c
   135dc:	add	r0, r0, r1
   135e0:	bx	lr

000135e4 <flatcc_builder_embed_buffer@@Base>:
   135e4:	push	{r4, r5, r6, r7, fp, lr}
   135e8:	add	fp, sp, #16
   135ec:	sub	sp, sp, #80	; 0x50
   135f0:	mov	r5, r3
   135f4:	mov	r6, r2
   135f8:	mov	r2, r1
   135fc:	mov	r4, r0
   13600:	ldr	r0, [fp, #8]
   13604:	strh	r0, [fp, #-18]	; 0xffffffee
   13608:	ldr	r3, [r4, #152]	; 0x98
   1360c:	cmp	r3, #0
   13610:	movwne	r3, #1
   13614:	sub	r1, fp, #18
   13618:	mov	r0, r4
   1361c:	bl	136f0 <flatcc_builder_embed_buffer@@Base+0x10c>
   13620:	ldr	r0, [fp, #12]
   13624:	and	r0, r0, #2
   13628:	add	r1, r5, r0, lsl #1
   1362c:	ldrh	r2, [fp, #-18]	; 0xffffffee
   13630:	mov	r0, r4
   13634:	bl	137ac <flatcc_builder_embed_buffer@@Base+0x1c8>
   13638:	mov	r7, r0
   1363c:	add	r0, r0, r5
   13640:	bl	137c0 <flatcc_builder_embed_buffer@@Base+0x1dc>
   13644:	mov	r1, #0
   13648:	str	r1, [sp, #4]
   1364c:	str	r1, [sp]
   13650:	str	r0, [fp, #-24]	; 0xffffffe8
   13654:	ldr	r0, [r4, #152]	; 0x98
   13658:	cmp	r0, #0
   1365c:	beq	1367c <flatcc_builder_embed_buffer@@Base+0x98>
   13660:	mov	r0, #4
   13664:	str	r0, [sp, #12]
   13668:	sub	r1, fp, #24
   1366c:	str	r1, [sp, #8]
   13670:	str	r0, [sp]
   13674:	mov	r0, #1
   13678:	str	r0, [sp, #4]
   1367c:	cmp	r5, #0
   13680:	beq	136a8 <flatcc_builder_embed_buffer@@Base+0xc4>
   13684:	ldm	sp, {r0, r1}
   13688:	add	r0, r0, r5
   1368c:	str	r0, [sp]
   13690:	mov	r0, sp
   13694:	add	r0, r0, r1, lsl #3
   13698:	str	r6, [r0, #8]
   1369c:	str	r5, [r0, #12]
   136a0:	add	r0, r1, #1
   136a4:	str	r0, [sp, #4]
   136a8:	cmp	r7, #0
   136ac:	beq	136dc <flatcc_builder_embed_buffer@@Base+0xf8>
   136b0:	ldm	sp, {r0, r1}
   136b4:	add	r0, r0, r7
   136b8:	str	r0, [sp]
   136bc:	mov	r0, sp
   136c0:	add	r0, r0, r1, lsl #3
   136c4:	movw	r2, #28952	; 0x7118
   136c8:	movt	r2, #1
   136cc:	str	r2, [r0, #8]
   136d0:	str	r7, [r0, #12]
   136d4:	add	r0, r1, #1
   136d8:	str	r0, [sp, #4]
   136dc:	mov	r1, sp
   136e0:	mov	r0, r4
   136e4:	bl	137c4 <flatcc_builder_embed_buffer@@Base+0x1e0>
   136e8:	sub	sp, fp, #16
   136ec:	pop	{r4, r5, r6, r7, fp, pc}
   136f0:	push	{r4, r5, r6, r7, fp, lr}
   136f4:	add	fp, sp, #16
   136f8:	sub	sp, sp, #72	; 0x48
   136fc:	mov	r6, r3
   13700:	mov	r5, r2
   13704:	mov	r7, r1
   13708:	mov	r4, r0
   1370c:	cmp	r2, #0
   13710:	bne	13720 <flatcc_builder_embed_buffer@@Base+0x13c>
   13714:	ldrh	r5, [r4, #132]	; 0x84
   13718:	cmp	r5, #0
   1371c:	movweq	r5, #1
   13720:	mov	r0, r7
   13724:	mov	r1, #4
   13728:	bl	14598 <flatcc_builder_start_vector@@Base+0x80>
   1372c:	mov	r0, r7
   13730:	mov	r1, r5
   13734:	bl	14598 <flatcc_builder_start_vector@@Base+0x80>
   13738:	cmp	r6, #0
   1373c:	bne	13784 <flatcc_builder_embed_buffer@@Base+0x1a0>
   13740:	mov	r0, r4
   13744:	mov	r1, r5
   13748:	bl	16278 <flatcc_builder_get_emit_context@@Base+0x8>
   1374c:	cmp	r0, #0
   13750:	beq	13784 <flatcc_builder_embed_buffer@@Base+0x1a0>
   13754:	str	r0, [sp, #12]
   13758:	movw	r1, #28952	; 0x7118
   1375c:	movt	r1, #1
   13760:	str	r1, [sp, #8]
   13764:	str	r0, [sp]
   13768:	mov	r0, #1
   1376c:	str	r0, [sp, #4]
   13770:	mov	r1, sp
   13774:	mov	r0, r4
   13778:	bl	14924 <flatcc_builder_create_vtable@@Base+0x80>
   1377c:	cmp	r0, #0
   13780:	beq	1378c <flatcc_builder_embed_buffer@@Base+0x1a8>
   13784:	sub	sp, fp, #16
   13788:	pop	{r4, r5, r6, r7, fp, pc}
   1378c:	movw	r0, #34000	; 0x84d0
   13790:	movt	r0, #1
   13794:	movw	r1, #29482	; 0x732a
   13798:	movt	r1, #1
   1379c:	movw	r3, #33613	; 0x834d
   137a0:	movt	r3, #1
   137a4:	movw	r2, #702	; 0x2be
   137a8:	bl	12498 <__assert_fail@plt>
   137ac:	ldr	r0, [r0, #136]	; 0x88
   137b0:	sub	r0, r0, r1
   137b4:	sub	r1, r2, #1
   137b8:	and	r0, r0, r1
   137bc:	bx	lr
   137c0:	bx	lr
   137c4:	push	{r4, r5, fp, lr}
   137c8:	add	fp, sp, #8
   137cc:	sub	sp, sp, #8
   137d0:	ldr	r3, [r1]
   137d4:	cmp	r3, #0
   137d8:	ble	13838 <flatcc_builder_embed_buffer@@Base+0x254>
   137dc:	mov	r4, r0
   137e0:	ldr	r0, [r0, #136]	; 0x88
   137e4:	sub	r5, r0, r3
   137e8:	ldr	r2, [r1, #4]
   137ec:	ldr	r0, [r4, #36]	; 0x24
   137f0:	ldr	ip, [r4, #44]	; 0x2c
   137f4:	str	r3, [sp]
   137f8:	add	r1, r1, #8
   137fc:	mov	r3, r5
   13800:	blx	ip
   13804:	cmp	r0, #0
   13808:	streq	r5, [r4, #136]	; 0x88
   1380c:	moveq	r0, r5
   13810:	subeq	sp, fp, #8
   13814:	popeq	{r4, r5, fp, pc}
   13818:	movw	r0, #34000	; 0x84d0
   1381c:	movt	r0, #1
   13820:	movw	r1, #29482	; 0x732a
   13824:	movt	r1, #1
   13828:	movw	r3, #33679	; 0x838f
   1382c:	movt	r3, #1
   13830:	movw	r2, #651	; 0x28b
   13834:	bl	12498 <__assert_fail@plt>
   13838:	movw	r0, #34000	; 0x84d0
   1383c:	movt	r0, #1
   13840:	movw	r1, #29482	; 0x732a
   13844:	movt	r1, #1
   13848:	movw	r3, #33679	; 0x838f
   1384c:	movt	r3, #1
   13850:	movw	r2, #647	; 0x287
   13854:	bl	12498 <__assert_fail@plt>

00013858 <flatcc_builder_create_buffer@@Base>:
   13858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1385c:	add	fp, sp, #28
   13860:	sub	sp, sp, #92	; 0x5c
   13864:	mov	r6, r3
   13868:	mov	r7, r1
   1386c:	mov	r4, r0
   13870:	ldr	r0, [fp, #8]
   13874:	strh	r0, [fp, #-30]	; 0xffffffe2
   13878:	mov	r0, #0
   1387c:	str	r0, [sp, #4]
   13880:	ldr	sl, [fp, #12]
   13884:	and	r9, sl, #1
   13888:	sub	r1, fp, #30
   1388c:	mov	r0, r4
   13890:	mov	r3, r9
   13894:	bl	136f0 <flatcc_builder_embed_buffer@@Base+0x10c>
   13898:	ldrh	r5, [fp, #-30]	; 0xffffffe2
   1389c:	mov	r0, r4
   138a0:	mov	r1, r5
   138a4:	bl	13a24 <flatcc_builder_create_buffer@@Base+0x1cc>
   138a8:	cmp	r7, #0
   138ac:	str	r6, [sp]
   138b0:	beq	138cc <flatcc_builder_create_buffer@@Base+0x74>
   138b4:	ldr	r7, [r7]
   138b8:	mov	r0, r7
   138bc:	bl	13a34 <flatcc_builder_create_buffer@@Base+0x1dc>
   138c0:	bl	137c0 <flatcc_builder_embed_buffer@@Base+0x1dc>
   138c4:	str	r7, [sp, #4]
   138c8:	b	138d0 <flatcc_builder_create_buffer@@Base+0x78>
   138cc:	ldr	r7, [sp, #4]
   138d0:	mov	r8, #4
   138d4:	and	r0, r8, sl, lsl #1
   138d8:	cmp	r7, #0
   138dc:	mov	r6, r7
   138e0:	movwne	r6, #1
   138e4:	add	r0, r0, r6, lsl #2
   138e8:	add	r1, r0, #4
   138ec:	mov	r0, r4
   138f0:	mov	r2, r5
   138f4:	bl	137ac <flatcc_builder_embed_buffer@@Base+0x1c8>
   138f8:	mov	r1, #0
   138fc:	str	r1, [sp, #12]
   13900:	str	r1, [sp, #8]
   13904:	ands	ip, sl, #3
   13908:	strne	r8, [sp, #20]
   1390c:	subne	r1, fp, #40	; 0x28
   13910:	strne	r1, [sp, #16]
   13914:	strne	r8, [sp, #8]
   13918:	movne	r1, #1
   1391c:	strne	r1, [sp, #12]
   13920:	ldr	r1, [sp, #8]
   13924:	ldr	r3, [sp, #12]
   13928:	add	r5, r1, #4
   1392c:	str	r5, [sp, #8]
   13930:	add	lr, sp, #8
   13934:	add	r1, lr, r3, lsl #3
   13938:	sub	r2, fp, #36	; 0x24
   1393c:	str	r2, [r1, #8]
   13940:	str	r8, [r1, #12]
   13944:	add	r1, r3, #1
   13948:	str	r1, [sp, #12]
   1394c:	cmp	r7, #0
   13950:	beq	13978 <flatcc_builder_create_buffer@@Base+0x120>
   13954:	lsl	r2, r6, #2
   13958:	add	r5, r5, r2
   1395c:	str	r5, [sp, #8]
   13960:	add	r1, lr, r1, lsl #3
   13964:	add	r5, sp, #4
   13968:	str	r5, [r1, #8]
   1396c:	str	r2, [r1, #12]
   13970:	add	r1, r3, #2
   13974:	str	r1, [sp, #12]
   13978:	cmp	r0, #0
   1397c:	beq	139ac <flatcc_builder_create_buffer@@Base+0x154>
   13980:	ldr	r1, [sp, #8]
   13984:	ldr	r2, [sp, #12]
   13988:	add	r1, r1, r0
   1398c:	str	r1, [sp, #8]
   13990:	add	r1, lr, r2, lsl #3
   13994:	movw	r3, #28952	; 0x7118
   13998:	movt	r3, #1
   1399c:	str	r3, [r1, #8]
   139a0:	str	r0, [r1, #12]
   139a4:	add	r0, r2, #1
   139a8:	str	r0, [sp, #12]
   139ac:	ldr	r0, [r4, #136]	; 0x88
   139b0:	ldr	r1, [sp, #8]
   139b4:	sub	r5, r0, r1
   139b8:	cmp	ip, #0
   139bc:	addne	r5, r5, #4
   139c0:	mov	r0, #144	; 0x90
   139c4:	cmp	r9, #0
   139c8:	movweq	r0, #140	; 0x8c
   139cc:	ldr	r0, [r4, r0]
   139d0:	sub	r0, r0, r5
   139d4:	bl	137c0 <flatcc_builder_embed_buffer@@Base+0x1dc>
   139d8:	str	r0, [fp, #-40]	; 0xffffffd8
   139dc:	ldr	r0, [sp]
   139e0:	sub	r0, r0, r5
   139e4:	bl	137c0 <flatcc_builder_embed_buffer@@Base+0x1dc>
   139e8:	str	r0, [fp, #-36]	; 0xffffffdc
   139ec:	add	r1, sp, #8
   139f0:	mov	r0, r4
   139f4:	bl	137c4 <flatcc_builder_embed_buffer@@Base+0x1e0>
   139f8:	cmp	r0, #0
   139fc:	subne	sp, fp, #28
   13a00:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a04:	movw	r0, #34000	; 0x84d0
   13a08:	movt	r0, #1
   13a0c:	movw	r1, #29482	; 0x732a
   13a10:	movt	r1, #1
   13a14:	movw	r3, #29797	; 0x7465
   13a18:	movt	r3, #1
   13a1c:	mov	r2, #772	; 0x304
   13a20:	bl	12498 <__assert_fail@plt>
   13a24:	ldrh	r2, [r0, #128]	; 0x80
   13a28:	cmp	r2, r1
   13a2c:	strhcc	r1, [r0, #128]	; 0x80
   13a30:	bx	lr
   13a34:	bx	lr

00013a38 <flatcc_builder_create_struct@@Base>:
   13a38:	push	{r4, r5, r6, r7, fp, lr}
   13a3c:	add	fp, sp, #16
   13a40:	sub	sp, sp, #72	; 0x48
   13a44:	cmp	r3, #0
   13a48:	beq	13ae0 <flatcc_builder_create_struct@@Base+0xa8>
   13a4c:	mov	r7, r3
   13a50:	mov	r5, r2
   13a54:	mov	r6, r1
   13a58:	mov	r4, r0
   13a5c:	mov	r1, r3
   13a60:	bl	13a24 <flatcc_builder_create_buffer@@Base+0x1cc>
   13a64:	mov	r0, r4
   13a68:	mov	r1, r5
   13a6c:	mov	r2, r7
   13a70:	bl	137ac <flatcc_builder_embed_buffer@@Base+0x1c8>
   13a74:	mov	r1, #0
   13a78:	str	r1, [sp, #4]
   13a7c:	str	r1, [sp]
   13a80:	cmp	r5, #0
   13a84:	strne	r5, [sp, #12]
   13a88:	strne	r6, [sp, #8]
   13a8c:	strne	r5, [sp]
   13a90:	movne	r1, #1
   13a94:	strne	r1, [sp, #4]
   13a98:	cmp	r0, #0
   13a9c:	beq	13acc <flatcc_builder_create_struct@@Base+0x94>
   13aa0:	ldm	sp, {r1, r2}
   13aa4:	add	r1, r1, r0
   13aa8:	str	r1, [sp]
   13aac:	mov	r1, sp
   13ab0:	add	r1, r1, r2, lsl #3
   13ab4:	movw	r3, #28952	; 0x7118
   13ab8:	movt	r3, #1
   13abc:	str	r3, [r1, #8]
   13ac0:	str	r0, [r1, #12]
   13ac4:	add	r0, r2, #1
   13ac8:	str	r0, [sp, #4]
   13acc:	mov	r1, sp
   13ad0:	mov	r0, r4
   13ad4:	bl	137c4 <flatcc_builder_embed_buffer@@Base+0x1e0>
   13ad8:	sub	sp, fp, #16
   13adc:	pop	{r4, r5, r6, r7, fp, pc}
   13ae0:	movw	r0, #29928	; 0x74e8
   13ae4:	movt	r0, #1
   13ae8:	movw	r1, #29482	; 0x732a
   13aec:	movt	r1, #1
   13af0:	movw	r3, #29939	; 0x74f3
   13af4:	movt	r3, #1
   13af8:	movw	r2, #783	; 0x30f
   13afc:	bl	12498 <__assert_fail@plt>

00013b00 <flatcc_builder_start_buffer@@Base>:
   13b00:	push	{r4, r5, r6, r7, fp, lr}
   13b04:	add	fp, sp, #16
   13b08:	mov	r6, r3
   13b0c:	mov	r7, r2
   13b10:	mov	r5, r1
   13b14:	mov	r4, r0
   13b18:	ldrh	r1, [r0, #128]	; 0x80
   13b1c:	bl	13bbc <flatcc_builder_start_buffer@@Base+0xbc>
   13b20:	mov	r1, r0
   13b24:	mvn	r0, #0
   13b28:	cmp	r1, #0
   13b2c:	popne	{r4, r5, r6, r7, fp, pc}
   13b30:	mov	r0, #1
   13b34:	strh	r0, [r4, #128]	; 0x80
   13b38:	ldrh	r1, [r4, #132]	; 0x84
   13b3c:	ldr	r2, [r4, #32]
   13b40:	strh	r1, [r2, #34]	; 0x22
   13b44:	strh	r7, [r4, #132]	; 0x84
   13b48:	ldrh	r1, [r4, #164]	; 0xa4
   13b4c:	ldr	r2, [r4, #32]
   13b50:	strh	r1, [r2, #32]
   13b54:	strh	r6, [r4, #164]	; 0xa4
   13b58:	ldr	r1, [r4, #32]
   13b5c:	ldr	r2, [r4, #144]	; 0x90
   13b60:	str	r2, [r1, #20]
   13b64:	ldr	r1, [r4, #32]
   13b68:	ldr	r2, [r4, #152]	; 0x98
   13b6c:	str	r2, [r1, #28]
   13b70:	ldr	r1, [r4, #32]
   13b74:	ldr	r2, [r4, #136]	; 0x88
   13b78:	ldr	r3, [r4, #148]	; 0x94
   13b7c:	ldr	r7, [r4, #168]	; 0xa8
   13b80:	add	r6, r3, #1
   13b84:	str	r2, [r4, #144]	; 0x90
   13b88:	str	r6, [r4, #148]	; 0x94
   13b8c:	str	r3, [r4, #152]	; 0x98
   13b90:	str	r7, [r1, #16]
   13b94:	movw	r1, #28952	; 0x7118
   13b98:	movt	r1, #1
   13b9c:	cmp	r5, #0
   13ba0:	movne	r1, r5
   13ba4:	ldr	r1, [r1]
   13ba8:	str	r1, [r4, #168]	; 0xa8
   13bac:	ldr	r1, [r4, #32]
   13bb0:	strh	r0, [r1, #14]
   13bb4:	mov	r0, #0
   13bb8:	pop	{r4, r5, r6, r7, fp, pc}
   13bbc:	push	{r4, r5, r6, sl, fp, lr}
   13bc0:	add	fp, sp, #16
   13bc4:	sub	sp, sp, #8
   13bc8:	mov	r5, r1
   13bcc:	mov	r4, r0
   13bd0:	ldr	r1, [r0, #156]	; 0x9c
   13bd4:	ldr	r2, [r0, #160]	; 0xa0
   13bd8:	add	r0, r1, #1
   13bdc:	str	r0, [r4, #156]	; 0x9c
   13be0:	cmp	r1, r2
   13be4:	bge	13bf8 <flatcc_builder_start_buffer@@Base+0xf8>
   13be8:	ldr	r0, [r4, #32]
   13bec:	add	r0, r0, #36	; 0x24
   13bf0:	str	r0, [r4, #32]
   13bf4:	b	13c6c <flatcc_builder_start_buffer@@Base+0x16c>
   13bf8:	ldr	r2, [r4, #176]	; 0xb0
   13bfc:	mvn	r6, #0
   13c00:	cmp	r2, #1
   13c04:	cmpge	r1, r2
   13c08:	bge	13ca8 <flatcc_builder_start_buffer@@Base+0x1a8>
   13c0c:	mov	r1, #0
   13c10:	str	r1, [sp]
   13c14:	add	r0, r0, r0, lsl #3
   13c18:	mvn	r1, #35	; 0x23
   13c1c:	add	r2, r1, r0, lsl #2
   13c20:	mov	r0, r4
   13c24:	mov	r1, #4
   13c28:	mov	r3, #36	; 0x24
   13c2c:	bl	13450 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   13c30:	str	r0, [r4, #32]
   13c34:	cmp	r0, #0
   13c38:	beq	13ca8 <flatcc_builder_start_buffer@@Base+0x1a8>
   13c3c:	ldr	r0, [r4, #88]	; 0x58
   13c40:	ldr	r1, [r4, #176]	; 0xb0
   13c44:	movw	r2, #36409	; 0x8e39
   13c48:	movt	r2, #14563	; 0x38e3
   13c4c:	umull	r0, r2, r0, r2
   13c50:	lsr	r0, r2, #3
   13c54:	cmp	r1, r2, lsr #3
   13c58:	mov	r2, r0
   13c5c:	movlt	r2, r1
   13c60:	cmp	r1, #0
   13c64:	movle	r2, r0
   13c68:	str	r2, [r4, #160]	; 0xa0
   13c6c:	ldr	r0, [r4, #20]
   13c70:	ldr	r1, [r4, #32]
   13c74:	str	r0, [r1, #8]
   13c78:	ldrh	r2, [r4, #130]	; 0x82
   13c7c:	strh	r2, [r1, #12]
   13c80:	strh	r5, [r4, #130]	; 0x82
   13c84:	ldr	r2, [r4, #28]
   13c88:	mvn	r3, #3
   13c8c:	stm	r1, {r2, r3}
   13c90:	mov	r6, #0
   13c94:	str	r6, [r4, #20]
   13c98:	add	r0, r0, r2
   13c9c:	add	r0, r0, #7
   13ca0:	bic	r0, r0, #7
   13ca4:	str	r0, [r4, #28]
   13ca8:	mov	r0, r6
   13cac:	sub	sp, fp, #16
   13cb0:	pop	{r4, r5, r6, sl, fp, pc}

00013cb4 <flatcc_builder_end_buffer@@Base>:
   13cb4:	push	{r4, r5, r6, r7, fp, lr}
   13cb8:	add	fp, sp, #16
   13cbc:	sub	sp, sp, #8
   13cc0:	mov	r4, r0
   13cc4:	ldr	r0, [r0, #32]
   13cc8:	ldrh	r0, [r0, #14]
   13ccc:	cmp	r0, #1
   13cd0:	bne	13d5c <flatcc_builder_end_buffer@@Base+0xa8>
   13cd4:	mov	r5, r1
   13cd8:	ldr	r6, [r4, #152]	; 0x98
   13cdc:	ldrh	r7, [r4, #164]	; 0xa4
   13ce0:	ldrh	r1, [r4, #132]	; 0x84
   13ce4:	mov	r0, r4
   13ce8:	bl	13a24 <flatcc_builder_create_buffer@@Base+0x1cc>
   13cec:	and	r0, r7, #2
   13cf0:	cmp	r6, #0
   13cf4:	orrne	r0, r0, #1
   13cf8:	ldrh	r2, [r4, #132]	; 0x84
   13cfc:	ldrh	r1, [r4, #128]	; 0x80
   13d00:	str	r1, [sp]
   13d04:	str	r0, [sp, #4]
   13d08:	add	r1, r4, #168	; 0xa8
   13d0c:	mov	r0, r4
   13d10:	mov	r3, r5
   13d14:	bl	13858 <flatcc_builder_create_buffer@@Base>
   13d18:	mov	r5, r0
   13d1c:	cmp	r0, #0
   13d20:	beq	13d50 <flatcc_builder_end_buffer@@Base+0x9c>
   13d24:	ldr	r0, [r4, #32]
   13d28:	ldr	r1, [r0, #20]
   13d2c:	str	r1, [r4, #144]	; 0x90
   13d30:	ldr	r1, [r0, #28]
   13d34:	str	r1, [r4, #152]	; 0x98
   13d38:	ldr	r1, [r0, #16]
   13d3c:	str	r1, [r4, #168]	; 0xa8
   13d40:	ldrh	r0, [r0, #32]
   13d44:	strh	r0, [r4, #164]	; 0xa4
   13d48:	mov	r0, r4
   13d4c:	bl	13d7c <flatcc_builder_end_buffer@@Base+0xc8>
   13d50:	mov	r0, r5
   13d54:	sub	sp, fp, #16
   13d58:	pop	{r4, r5, r6, r7, fp, pc}
   13d5c:	movw	r0, #30041	; 0x7559
   13d60:	movt	r0, #1
   13d64:	movw	r1, #29482	; 0x732a
   13d68:	movt	r1, #1
   13d6c:	movw	r3, #30085	; 0x7585
   13d70:	movt	r3, #1
   13d74:	movw	r2, #838	; 0x346
   13d78:	bl	12498 <__assert_fail@plt>
   13d7c:	push	{r4, sl, fp, lr}
   13d80:	add	fp, sp, #8
   13d84:	mov	r4, r0
   13d88:	ldr	r0, [r0, #16]
   13d8c:	ldr	r2, [r4, #20]
   13d90:	mov	r1, #0
   13d94:	bl	12468 <memset@plt>
   13d98:	ldr	r0, [r4, #32]
   13d9c:	ldr	r1, [r0, #8]
   13da0:	str	r1, [r4, #20]
   13da4:	ldr	r1, [r0]
   13da8:	str	r1, [r4, #28]
   13dac:	ldr	r1, [r0, #4]
   13db0:	mov	r0, r4
   13db4:	bl	13e34 <flatcc_builder_start_struct@@Base+0x4c>
   13db8:	ldrh	r1, [r4, #130]	; 0x82
   13dbc:	mov	r0, r4
   13dc0:	bl	13a24 <flatcc_builder_create_buffer@@Base+0x1cc>
   13dc4:	ldr	r0, [r4, #32]
   13dc8:	ldr	r1, [r4, #156]	; 0x9c
   13dcc:	ldrh	r2, [r0, #12]
   13dd0:	sub	r0, r0, #36	; 0x24
   13dd4:	str	r0, [r4, #32]
   13dd8:	sub	r0, r1, #1
   13ddc:	str	r0, [r4, #156]	; 0x9c
   13de0:	strh	r2, [r4, #130]	; 0x82
   13de4:	pop	{r4, sl, fp, pc}

00013de8 <flatcc_builder_start_struct@@Base>:
   13de8:	push	{r4, r5, fp, lr}
   13dec:	add	fp, sp, #8
   13df0:	mov	r4, r1
   13df4:	mov	r5, r0
   13df8:	mov	r1, r2
   13dfc:	bl	13bbc <flatcc_builder_start_buffer@@Base+0xbc>
   13e00:	cmp	r0, #0
   13e04:	movne	r0, #0
   13e08:	popne	{r4, r5, fp, pc}
   13e0c:	ldr	r0, [r5, #32]
   13e10:	mov	r1, #2
   13e14:	strh	r1, [r0, #14]
   13e18:	mov	r0, r5
   13e1c:	mvn	r1, #3
   13e20:	bl	13e34 <flatcc_builder_start_struct@@Base+0x4c>
   13e24:	mov	r0, r5
   13e28:	mov	r1, r4
   13e2c:	pop	{r4, r5, fp, lr}
   13e30:	b	13e6c <flatcc_builder_start_struct@@Base+0x84>
   13e34:	push	{fp, lr}
   13e38:	mov	fp, sp
   13e3c:	ldr	r2, [r0, #28]
   13e40:	ldr	ip, [r0, #32]
   13e44:	ldr	r3, [r0, #60]	; 0x3c
   13e48:	ldr	lr, [r0, #64]	; 0x40
   13e4c:	add	r3, r3, r2
   13e50:	str	r3, [r0, #16]
   13e54:	sub	r2, lr, r2
   13e58:	cmp	r2, r1
   13e5c:	movhi	r2, r1
   13e60:	str	r2, [r0, #24]
   13e64:	str	r1, [ip, #4]
   13e68:	pop	{fp, pc}
   13e6c:	push	{r4, r5, fp, lr}
   13e70:	add	fp, sp, #8
   13e74:	mov	r4, r0
   13e78:	ldr	r5, [r0, #20]
   13e7c:	ldr	r2, [r0, #24]
   13e80:	add	r0, r5, r1
   13e84:	str	r0, [r4, #20]
   13e88:	cmp	r0, r2
   13e8c:	bcc	13eb0 <flatcc_builder_start_struct@@Base+0xc8>
   13e90:	add	r1, r0, #1
   13e94:	mov	r0, r4
   13e98:	mvn	r2, #3
   13e9c:	bl	16288 <flatcc_builder_get_emit_context@@Base+0x18>
   13ea0:	mov	r1, r0
   13ea4:	mov	r0, #0
   13ea8:	cmp	r1, #0
   13eac:	popne	{r4, r5, fp, pc}
   13eb0:	ldr	r0, [r4, #16]
   13eb4:	add	r0, r0, r5
   13eb8:	pop	{r4, r5, fp, pc}

00013ebc <flatcc_builder_struct_edit@@Base>:
   13ebc:	ldr	r0, [r0, #16]
   13ec0:	bx	lr

00013ec4 <flatcc_builder_end_struct@@Base>:
   13ec4:	push	{r4, r5, fp, lr}
   13ec8:	add	fp, sp, #8
   13ecc:	mov	r4, r0
   13ed0:	ldr	r0, [r0, #32]
   13ed4:	ldrh	r0, [r0, #14]
   13ed8:	cmp	r0, #2
   13edc:	bne	13f0c <flatcc_builder_end_struct@@Base+0x48>
   13ee0:	ldrh	r3, [r4, #130]	; 0x82
   13ee4:	ldr	r1, [r4, #16]
   13ee8:	ldr	r2, [r4, #20]
   13eec:	mov	r0, r4
   13ef0:	bl	13a38 <flatcc_builder_create_struct@@Base>
   13ef4:	mov	r5, r0
   13ef8:	cmp	r0, #0
   13efc:	movne	r0, r4
   13f00:	blne	13d7c <flatcc_builder_end_buffer@@Base+0xc8>
   13f04:	mov	r0, r5
   13f08:	pop	{r4, r5, fp, pc}
   13f0c:	movw	r0, #30174	; 0x75de
   13f10:	movt	r0, #1
   13f14:	movw	r1, #29482	; 0x732a
   13f18:	movt	r1, #1
   13f1c:	movw	r3, #30218	; 0x760a
   13f20:	movt	r3, #1
   13f24:	mov	r2, #872	; 0x368
   13f28:	bl	12498 <__assert_fail@plt>

00013f2c <flatcc_builder_extend_vector@@Base>:
   13f2c:	push	{r4, r5, fp, lr}
   13f30:	add	fp, sp, #8
   13f34:	mov	r5, r1
   13f38:	mov	r4, r0
   13f3c:	ldr	r0, [r0, #32]
   13f40:	ldr	r2, [r0, #24]
   13f44:	mov	r0, r4
   13f48:	bl	13f70 <flatcc_builder_extend_vector@@Base+0x44>
   13f4c:	cmp	r0, #0
   13f50:	movne	r0, #0
   13f54:	popne	{r4, r5, fp, pc}
   13f58:	ldr	r0, [r4, #32]
   13f5c:	ldr	r0, [r0, #16]
   13f60:	mul	r1, r0, r5
   13f64:	mov	r0, r4
   13f68:	pop	{r4, r5, fp, lr}
   13f6c:	b	13e6c <flatcc_builder_start_struct@@Base+0x84>
   13f70:	push	{fp, lr}
   13f74:	mov	fp, sp
   13f78:	ldr	r0, [r0, #32]
   13f7c:	ldr	r3, [r0, #20]
   13f80:	adds	r1, r3, r1
   13f84:	bcs	13f98 <flatcc_builder_extend_vector@@Base+0x6c>
   13f88:	cmp	r1, r2
   13f8c:	strls	r1, [r0, #20]
   13f90:	movls	r0, #0
   13f94:	popls	{fp, pc}
   13f98:	movw	r0, #33753	; 0x83d9
   13f9c:	movt	r0, #1
   13fa0:	movw	r1, #29482	; 0x732a
   13fa4:	movt	r1, #1
   13fa8:	movw	r3, #33780	; 0x83f4
   13fac:	movt	r3, #1
   13fb0:	mov	r2, #892	; 0x37c
   13fb4:	bl	12498 <__assert_fail@plt>

00013fb8 <flatcc_builder_vector_push@@Base>:
   13fb8:	push	{fp, lr}
   13fbc:	mov	fp, sp
   13fc0:	ldr	r2, [r0, #32]
   13fc4:	ldrh	r3, [r2, #14]
   13fc8:	cmp	r3, #4
   13fcc:	bne	13ff8 <flatcc_builder_vector_push@@Base+0x40>
   13fd0:	ldr	ip, [r2, #20]
   13fd4:	ldr	r3, [r2, #24]
   13fd8:	cmp	ip, r3
   13fdc:	bhi	14018 <flatcc_builder_vector_push@@Base+0x60>
   13fe0:	add	r3, ip, #1
   13fe4:	str	r3, [r2, #20]
   13fe8:	ldr	r2, [r0, #32]
   13fec:	ldr	r2, [r2, #16]
   13ff0:	pop	{fp, lr}
   13ff4:	b	14038 <flatcc_builder_vector_push@@Base+0x80>
   13ff8:	movw	r0, #30285	; 0x764d
   13ffc:	movt	r0, #1
   14000:	movw	r1, #29482	; 0x732a
   14004:	movt	r1, #1
   14008:	movw	r3, #30329	; 0x7679
   1400c:	movt	r3, #1
   14010:	movw	r2, #907	; 0x38b
   14014:	bl	12498 <__assert_fail@plt>
   14018:	movw	r0, #30396	; 0x76bc
   1401c:	movt	r0, #1
   14020:	movw	r1, #29482	; 0x732a
   14024:	movt	r1, #1
   14028:	movw	r3, #30329	; 0x7679
   1402c:	movt	r3, #1
   14030:	mov	r2, #908	; 0x38c
   14034:	bl	12498 <__assert_fail@plt>
   14038:	push	{r4, r5, r6, sl, fp, lr}
   1403c:	add	fp, sp, #16
   14040:	mov	r4, r2
   14044:	mov	r5, r1
   14048:	mov	r1, r2
   1404c:	bl	13e6c <flatcc_builder_start_struct@@Base+0x84>
   14050:	mov	r6, r0
   14054:	cmp	r0, #0
   14058:	beq	1406c <flatcc_builder_vector_push@@Base+0xb4>
   1405c:	mov	r0, r6
   14060:	mov	r1, r5
   14064:	mov	r2, r4
   14068:	bl	123e4 <memcpy@plt>
   1406c:	mov	r0, r6
   14070:	pop	{r4, r5, r6, sl, fp, pc}

00014074 <flatcc_builder_append_vector@@Base>:
   14074:	push	{r4, r5, r6, sl, fp, lr}
   14078:	add	fp, sp, #16
   1407c:	mov	r4, r1
   14080:	mov	r6, r0
   14084:	ldr	r0, [r0, #32]
   14088:	ldrh	r1, [r0, #14]
   1408c:	cmp	r1, #4
   14090:	bne	140d4 <flatcc_builder_append_vector@@Base+0x60>
   14094:	mov	r5, r2
   14098:	ldr	r2, [r0, #24]
   1409c:	mov	r0, r6
   140a0:	mov	r1, r5
   140a4:	bl	13f70 <flatcc_builder_extend_vector@@Base+0x44>
   140a8:	cmp	r0, #0
   140ac:	beq	140b8 <flatcc_builder_append_vector@@Base+0x44>
   140b0:	mov	r0, #0
   140b4:	pop	{r4, r5, r6, sl, fp, pc}
   140b8:	ldr	r0, [r6, #32]
   140bc:	ldr	r0, [r0, #16]
   140c0:	mul	r2, r0, r5
   140c4:	mov	r0, r6
   140c8:	mov	r1, r4
   140cc:	pop	{r4, r5, r6, sl, fp, lr}
   140d0:	b	14038 <flatcc_builder_vector_push@@Base+0x80>
   140d4:	movw	r0, #30285	; 0x764d
   140d8:	movt	r0, #1
   140dc:	movw	r1, #29482	; 0x732a
   140e0:	movt	r1, #1
   140e4:	movw	r3, #30457	; 0x76f9
   140e8:	movt	r3, #1
   140ec:	movw	r2, #915	; 0x393
   140f0:	bl	12498 <__assert_fail@plt>

000140f4 <flatcc_builder_extend_offset_vector@@Base>:
   140f4:	push	{r4, r5, fp, lr}
   140f8:	add	fp, sp, #8
   140fc:	mov	r5, r1
   14100:	mov	r4, r0
   14104:	mvn	r2, #-1073741824	; 0xc0000000
   14108:	bl	13f70 <flatcc_builder_extend_vector@@Base+0x44>
   1410c:	cmp	r0, #0
   14110:	movne	r0, #0
   14114:	popne	{r4, r5, fp, pc}
   14118:	lsl	r1, r5, #2
   1411c:	mov	r0, r4
   14120:	pop	{r4, r5, fp, lr}
   14124:	b	13e6c <flatcc_builder_start_struct@@Base+0x84>

00014128 <flatcc_builder_offset_vector_push@@Base>:
   14128:	push	{r4, r5, fp, lr}
   1412c:	add	fp, sp, #8
   14130:	mov	r4, r1
   14134:	ldr	r1, [r0, #32]
   14138:	ldrh	r2, [r1, #14]
   1413c:	cmp	r2, #5
   14140:	bne	14178 <flatcc_builder_offset_vector_push@@Base+0x50>
   14144:	ldr	r2, [r1, #20]
   14148:	mov	r5, #0
   1414c:	cmn	r2, #-1073741823	; 0xc0000001
   14150:	beq	14170 <flatcc_builder_offset_vector_push@@Base+0x48>
   14154:	add	r2, r2, #1
   14158:	str	r2, [r1, #20]
   1415c:	mov	r1, #4
   14160:	bl	13e6c <flatcc_builder_start_struct@@Base+0x84>
   14164:	cmp	r0, #0
   14168:	strne	r4, [r0]
   1416c:	movne	r5, r0
   14170:	mov	r0, r5
   14174:	pop	{r4, r5, fp, pc}
   14178:	movw	r0, #30534	; 0x7746
   1417c:	movt	r0, #1
   14180:	movw	r1, #29482	; 0x732a
   14184:	movt	r1, #1
   14188:	movw	r3, #30585	; 0x7779
   1418c:	movt	r3, #1
   14190:	movw	r2, #934	; 0x3a6
   14194:	bl	12498 <__assert_fail@plt>

00014198 <flatcc_builder_append_offset_vector@@Base>:
   14198:	push	{r4, r5, r6, sl, fp, lr}
   1419c:	add	fp, sp, #16
   141a0:	mov	r6, r0
   141a4:	ldr	r0, [r0, #32]
   141a8:	ldrh	r0, [r0, #14]
   141ac:	cmp	r0, #5
   141b0:	bne	141f0 <flatcc_builder_append_offset_vector@@Base+0x58>
   141b4:	mov	r5, r2
   141b8:	mov	r4, r1
   141bc:	mov	r0, r6
   141c0:	mov	r1, r2
   141c4:	mvn	r2, #-1073741824	; 0xc0000000
   141c8:	bl	13f70 <flatcc_builder_extend_vector@@Base+0x44>
   141cc:	cmp	r0, #0
   141d0:	beq	141dc <flatcc_builder_append_offset_vector@@Base+0x44>
   141d4:	mov	r0, #0
   141d8:	pop	{r4, r5, r6, sl, fp, pc}
   141dc:	lsl	r2, r5, #2
   141e0:	mov	r0, r6
   141e4:	mov	r1, r4
   141e8:	pop	{r4, r5, r6, sl, fp, lr}
   141ec:	b	14038 <flatcc_builder_vector_push@@Base+0x80>
   141f0:	movw	r0, #30534	; 0x7746
   141f4:	movt	r0, #1
   141f8:	movw	r1, #29482	; 0x732a
   141fc:	movt	r1, #1
   14200:	movw	r3, #30683	; 0x77db
   14204:	movt	r3, #1
   14208:	mov	r2, #948	; 0x3b4
   1420c:	bl	12498 <__assert_fail@plt>

00014210 <flatcc_builder_extend_string@@Base>:
   14210:	push	{r4, r5, fp, lr}
   14214:	add	fp, sp, #8
   14218:	mov	r5, r0
   1421c:	ldr	r0, [r0, #32]
   14220:	ldrh	r0, [r0, #14]
   14224:	cmp	r0, #6
   14228:	bne	14258 <flatcc_builder_extend_string@@Base+0x48>
   1422c:	mov	r4, r1
   14230:	mov	r0, r5
   14234:	mvn	r2, #0
   14238:	bl	13f70 <flatcc_builder_extend_vector@@Base+0x44>
   1423c:	cmp	r0, #0
   14240:	movne	r0, #0
   14244:	popne	{r4, r5, fp, pc}
   14248:	mov	r0, r5
   1424c:	mov	r1, r4
   14250:	pop	{r4, r5, fp, lr}
   14254:	b	13e6c <flatcc_builder_start_struct@@Base+0x84>
   14258:	movw	r0, #30799	; 0x784f
   1425c:	movt	r0, #1
   14260:	movw	r1, #29482	; 0x732a
   14264:	movt	r1, #1
   14268:	movw	r3, #30843	; 0x787b
   1426c:	movt	r3, #1
   14270:	movw	r2, #957	; 0x3bd
   14274:	bl	12498 <__assert_fail@plt>

00014278 <flatcc_builder_append_string@@Base>:
   14278:	push	{r4, r5, r6, sl, fp, lr}
   1427c:	add	fp, sp, #16
   14280:	mov	r6, r0
   14284:	ldr	r0, [r0, #32]
   14288:	ldrh	r0, [r0, #14]
   1428c:	cmp	r0, #6
   14290:	bne	142d0 <flatcc_builder_append_string@@Base+0x58>
   14294:	mov	r4, r2
   14298:	mov	r5, r1
   1429c:	mov	r0, r6
   142a0:	mov	r1, r2
   142a4:	mvn	r2, #0
   142a8:	bl	13f70 <flatcc_builder_extend_vector@@Base+0x44>
   142ac:	cmp	r0, #0
   142b0:	beq	142bc <flatcc_builder_append_string@@Base+0x44>
   142b4:	mov	r0, #0
   142b8:	pop	{r4, r5, r6, sl, fp, pc}
   142bc:	mov	r0, r6
   142c0:	mov	r1, r5
   142c4:	mov	r2, r4
   142c8:	pop	{r4, r5, r6, sl, fp, lr}
   142cc:	b	14038 <flatcc_builder_vector_push@@Base+0x80>
   142d0:	movw	r0, #30799	; 0x784f
   142d4:	movt	r0, #1
   142d8:	movw	r1, #29482	; 0x732a
   142dc:	movt	r1, #1
   142e0:	movw	r3, #30906	; 0x78ba
   142e4:	movt	r3, #1
   142e8:	movw	r2, #966	; 0x3c6
   142ec:	bl	12498 <__assert_fail@plt>

000142f0 <flatcc_builder_append_string_str@@Base>:
   142f0:	push	{r4, r5, fp, lr}
   142f4:	add	fp, sp, #8
   142f8:	mov	r4, r1
   142fc:	mov	r5, r0
   14300:	mov	r0, r1
   14304:	bl	12450 <strlen@plt>
   14308:	mov	r2, r0
   1430c:	mov	r0, r5
   14310:	mov	r1, r4
   14314:	pop	{r4, r5, fp, lr}
   14318:	b	14278 <flatcc_builder_append_string@@Base>

0001431c <flatcc_builder_append_string_strn@@Base>:
   1431c:	push	{r4, r5, fp, lr}
   14320:	add	fp, sp, #8
   14324:	mov	r4, r1
   14328:	mov	r5, r0
   1432c:	mov	r0, r1
   14330:	mov	r1, r2
   14334:	bl	1434c <flatcc_builder_append_string_strn@@Base+0x30>
   14338:	mov	r2, r0
   1433c:	mov	r0, r5
   14340:	mov	r1, r4
   14344:	pop	{r4, r5, fp, lr}
   14348:	b	14278 <flatcc_builder_append_string@@Base>
   1434c:	push	{r4, r5, fp, lr}
   14350:	add	fp, sp, #8
   14354:	mov	r4, r1
   14358:	mov	r5, r0
   1435c:	mov	r1, #0
   14360:	mov	r2, r4
   14364:	bl	12474 <memchr@plt>
   14368:	cmp	r0, #0
   1436c:	subne	r4, r0, r5
   14370:	mov	r0, r4
   14374:	pop	{r4, r5, fp, pc}

00014378 <flatcc_builder_truncate_vector@@Base>:
   14378:	push	{fp, lr}
   1437c:	mov	fp, sp
   14380:	ldr	r2, [r0, #32]
   14384:	ldrh	r3, [r2, #14]
   14388:	cmp	r3, #4
   1438c:	bne	143bc <flatcc_builder_truncate_vector@@Base+0x44>
   14390:	ldr	r3, [r2, #20]
   14394:	cmp	r3, r1
   14398:	bcc	143dc <flatcc_builder_truncate_vector@@Base+0x64>
   1439c:	sub	r3, r3, r1
   143a0:	str	r3, [r2, #20]
   143a4:	ldr	r2, [r0, #32]
   143a8:	ldr	r2, [r2, #16]
   143ac:	mul	r1, r2, r1
   143b0:	bl	143fc <flatcc_builder_truncate_vector@@Base+0x84>
   143b4:	mov	r0, #0
   143b8:	pop	{fp, pc}
   143bc:	movw	r0, #30285	; 0x764d
   143c0:	movt	r0, #1
   143c4:	movw	r1, #29482	; 0x732a
   143c8:	movt	r1, #1
   143cc:	movw	r3, #30983	; 0x7907
   143d0:	movt	r3, #1
   143d4:	movw	r2, #985	; 0x3d9
   143d8:	bl	12498 <__assert_fail@plt>
   143dc:	movw	r0, #31046	; 0x7946
   143e0:	movt	r0, #1
   143e4:	movw	r1, #29482	; 0x732a
   143e8:	movt	r1, #1
   143ec:	movw	r3, #30983	; 0x7907
   143f0:	movt	r3, #1
   143f4:	movw	r2, #986	; 0x3da
   143f8:	bl	12498 <__assert_fail@plt>
   143fc:	mov	r2, r1
   14400:	ldr	r1, [r0, #16]
   14404:	ldr	r3, [r0, #20]
   14408:	sub	r3, r3, r2
   1440c:	str	r3, [r0, #20]
   14410:	add	r0, r1, r3
   14414:	mov	r1, #0
   14418:	b	12468 <memset@plt>

0001441c <flatcc_builder_truncate_offset_vector@@Base>:
   1441c:	push	{fp, lr}
   14420:	mov	fp, sp
   14424:	ldr	r2, [r0, #32]
   14428:	ldrh	r3, [r2, #14]
   1442c:	cmp	r3, #5
   14430:	bne	14460 <flatcc_builder_truncate_offset_vector@@Base+0x44>
   14434:	ldr	r3, [r2, #20]
   14438:	cmp	r3, r1
   1443c:	bcc	14480 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   14440:	sub	r3, r3, r1
   14444:	str	r3, [r2, #20]
   14448:	ldr	r2, [r0, #32]
   1444c:	ldr	r2, [r2, #16]
   14450:	mul	r1, r2, r1
   14454:	bl	143fc <flatcc_builder_truncate_vector@@Base+0x84>
   14458:	mov	r0, #0
   1445c:	pop	{fp, pc}
   14460:	movw	r0, #30534	; 0x7746
   14464:	movt	r0, #1
   14468:	movw	r1, #29482	; 0x732a
   1446c:	movt	r1, #1
   14470:	movw	r3, #31082	; 0x796a
   14474:	movt	r3, #1
   14478:	movw	r2, #994	; 0x3e2
   1447c:	bl	12498 <__assert_fail@plt>
   14480:	movw	r0, #31152	; 0x79b0
   14484:	movt	r0, #1
   14488:	movw	r1, #29482	; 0x732a
   1448c:	movt	r1, #1
   14490:	movw	r3, #31082	; 0x796a
   14494:	movt	r3, #1
   14498:	movw	r2, #995	; 0x3e3
   1449c:	bl	12498 <__assert_fail@plt>

000144a0 <flatcc_builder_truncate_string@@Base>:
   144a0:	push	{fp, lr}
   144a4:	mov	fp, sp
   144a8:	ldr	r2, [r0, #32]
   144ac:	ldrh	r3, [r2, #14]
   144b0:	cmp	r3, #6
   144b4:	bne	144d8 <flatcc_builder_truncate_string@@Base+0x38>
   144b8:	ldr	r3, [r2, #20]
   144bc:	cmp	r3, r1
   144c0:	bcc	144f8 <flatcc_builder_truncate_string@@Base+0x58>
   144c4:	sub	r3, r3, r1
   144c8:	str	r3, [r2, #20]
   144cc:	bl	143fc <flatcc_builder_truncate_vector@@Base+0x84>
   144d0:	mov	r0, #0
   144d4:	pop	{fp, pc}
   144d8:	movw	r0, #30799	; 0x784f
   144dc:	movt	r0, #1
   144e0:	movw	r1, #29482	; 0x732a
   144e4:	movt	r1, #1
   144e8:	movw	r3, #31211	; 0x79eb
   144ec:	movt	r3, #1
   144f0:	movw	r2, #1003	; 0x3eb
   144f4:	bl	12498 <__assert_fail@plt>
   144f8:	movw	r0, #31274	; 0x7a2a
   144fc:	movt	r0, #1
   14500:	movw	r1, #29482	; 0x732a
   14504:	movt	r1, #1
   14508:	movw	r3, #31211	; 0x79eb
   1450c:	movt	r3, #1
   14510:	mov	r2, #1004	; 0x3ec
   14514:	bl	12498 <__assert_fail@plt>

00014518 <flatcc_builder_start_vector@@Base>:
   14518:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1451c:	add	fp, sp, #24
   14520:	sub	sp, sp, #8
   14524:	mov	r5, r3
   14528:	mov	r6, r1
   1452c:	mov	r4, r0
   14530:	strh	r2, [sp, #6]
   14534:	add	r0, sp, #6
   14538:	mov	r8, #4
   1453c:	mov	r1, #4
   14540:	bl	14598 <flatcc_builder_start_vector@@Base+0x80>
   14544:	ldrh	r1, [sp, #6]
   14548:	mov	r0, r4
   1454c:	bl	13bbc <flatcc_builder_start_buffer@@Base+0xbc>
   14550:	mvn	r7, #0
   14554:	cmp	r0, #0
   14558:	bne	1458c <flatcc_builder_start_vector@@Base+0x74>
   1455c:	ldr	r0, [r4, #32]
   14560:	str	r6, [r0, #16]
   14564:	ldr	r0, [r4, #32]
   14568:	mov	r7, #0
   1456c:	str	r7, [r0, #20]
   14570:	ldr	r0, [r4, #32]
   14574:	str	r5, [r0, #24]
   14578:	ldr	r0, [r4, #32]
   1457c:	strh	r8, [r0, #14]
   14580:	mov	r0, r4
   14584:	mvn	r1, #3
   14588:	bl	13e34 <flatcc_builder_start_struct@@Base+0x4c>
   1458c:	mov	r0, r7
   14590:	sub	sp, fp, #24
   14594:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14598:	ldrh	r2, [r0]
   1459c:	cmp	r2, r1
   145a0:	strhcc	r1, [r0]
   145a4:	bx	lr

000145a8 <flatcc_builder_start_offset_vector@@Base>:
   145a8:	push	{r4, r5, r6, sl, fp, lr}
   145ac:	add	fp, sp, #16
   145b0:	mov	r4, r0
   145b4:	mov	r6, #4
   145b8:	mov	r1, #4
   145bc:	bl	13bbc <flatcc_builder_start_buffer@@Base+0xbc>
   145c0:	mvn	r5, #0
   145c4:	cmp	r0, #0
   145c8:	beq	145d4 <flatcc_builder_start_offset_vector@@Base+0x2c>
   145cc:	mov	r0, r5
   145d0:	pop	{r4, r5, r6, sl, fp, pc}
   145d4:	ldr	r0, [r4, #32]
   145d8:	str	r6, [r0, #16]
   145dc:	ldr	r0, [r4, #32]
   145e0:	mov	r5, #0
   145e4:	str	r5, [r0, #20]
   145e8:	ldr	r0, [r4, #32]
   145ec:	mov	r1, #5
   145f0:	strh	r1, [r0, #14]
   145f4:	mov	r0, r4
   145f8:	mvn	r1, #3
   145fc:	bl	13e34 <flatcc_builder_start_struct@@Base+0x4c>
   14600:	mov	r0, r5
   14604:	pop	{r4, r5, r6, sl, fp, pc}

00014608 <flatcc_builder_create_offset_vector@@Base>:
   14608:	push	{r4, r5, r6, sl, fp, lr}
   1460c:	add	fp, sp, #16
   14610:	mov	r6, r2
   14614:	mov	r5, r1
   14618:	mov	r4, r0
   1461c:	bl	145a8 <flatcc_builder_start_offset_vector@@Base>
   14620:	cmp	r0, #0
   14624:	beq	14630 <flatcc_builder_create_offset_vector@@Base+0x28>
   14628:	mov	r0, #0
   1462c:	pop	{r4, r5, r6, sl, fp, pc}
   14630:	mov	r0, r4
   14634:	mov	r1, r6
   14638:	bl	140f4 <flatcc_builder_extend_offset_vector@@Base>
   1463c:	cmp	r0, #0
   14640:	beq	14628 <flatcc_builder_create_offset_vector@@Base+0x20>
   14644:	lsl	r2, r6, #2
   14648:	mov	r1, r5
   1464c:	bl	123e4 <memcpy@plt>
   14650:	mov	r0, r4
   14654:	pop	{r4, r5, r6, sl, fp, lr}
   14658:	b	1465c <flatcc_builder_end_offset_vector@@Base>

0001465c <flatcc_builder_end_offset_vector@@Base>:
   1465c:	push	{r4, r5, fp, lr}
   14660:	add	fp, sp, #8
   14664:	mov	r4, r0
   14668:	ldr	r0, [r0, #32]
   1466c:	ldrh	r1, [r0, #14]
   14670:	cmp	r1, #5
   14674:	bne	146a0 <flatcc_builder_end_offset_vector@@Base+0x44>
   14678:	ldr	r2, [r0, #20]
   1467c:	ldr	r1, [r4, #16]
   14680:	mov	r0, r4
   14684:	bl	151e4 <flatcc_builder_create_offset_vector_direct@@Base>
   14688:	mov	r5, r0
   1468c:	cmp	r0, #0
   14690:	movne	r0, r4
   14694:	blne	13d7c <flatcc_builder_end_buffer@@Base+0xc8>
   14698:	mov	r0, r5
   1469c:	pop	{r4, r5, fp, pc}
   146a0:	movw	r0, #30534	; 0x7746
   146a4:	movt	r0, #1
   146a8:	movw	r1, #29482	; 0x732a
   146ac:	movt	r1, #1
   146b0:	movw	r3, #32117	; 0x7d75
   146b4:	movt	r3, #1
   146b8:	movw	r2, #1480	; 0x5c8
   146bc:	bl	12498 <__assert_fail@plt>

000146c0 <flatcc_builder_start_string@@Base>:
   146c0:	push	{r4, r5, r6, sl, fp, lr}
   146c4:	add	fp, sp, #16
   146c8:	mov	r4, r0
   146cc:	mov	r6, #1
   146d0:	mov	r1, #1
   146d4:	bl	13bbc <flatcc_builder_start_buffer@@Base+0xbc>
   146d8:	mvn	r5, #0
   146dc:	cmp	r0, #0
   146e0:	beq	146ec <flatcc_builder_start_string@@Base+0x2c>
   146e4:	mov	r0, r5
   146e8:	pop	{r4, r5, r6, sl, fp, pc}
   146ec:	ldr	r0, [r4, #32]
   146f0:	str	r6, [r0, #16]
   146f4:	ldr	r0, [r4, #32]
   146f8:	mov	r5, #0
   146fc:	str	r5, [r0, #20]
   14700:	ldr	r0, [r4, #32]
   14704:	mov	r1, #6
   14708:	strh	r1, [r0, #14]
   1470c:	mov	r0, r4
   14710:	mvn	r1, #3
   14714:	bl	13e34 <flatcc_builder_start_struct@@Base+0x4c>
   14718:	mov	r0, r5
   1471c:	pop	{r4, r5, r6, sl, fp, pc}

00014720 <flatcc_builder_reserve_table@@Base>:
   14720:	cmn	r1, #1
   14724:	ble	1472c <flatcc_builder_reserve_table@@Base+0xc>
   14728:	b	14754 <flatcc_builder_reserve_table@@Base+0x34>
   1472c:	push	{fp, lr}
   14730:	mov	fp, sp
   14734:	movw	r0, #31373	; 0x7a8d
   14738:	movt	r0, #1
   1473c:	movw	r1, #29482	; 0x732a
   14740:	movt	r1, #1
   14744:	movw	r3, #31308	; 0x7a4c
   14748:	movt	r3, #1
   1474c:	movw	r2, #1065	; 0x429
   14750:	bl	12498 <__assert_fail@plt>
   14754:	push	{r4, r5, r6, sl, fp, lr}
   14758:	add	fp, sp, #16
   1475c:	sub	sp, sp, #8
   14760:	mov	r6, r1
   14764:	mov	r4, r0
   14768:	ldr	r0, [r0, #32]
   1476c:	ldrh	r1, [r0, #28]
   14770:	ldr	r0, [r0, #16]
   14774:	mov	r2, #1
   14778:	str	r2, [sp]
   1477c:	mov	r2, #4
   14780:	add	r3, r2, r6, lsl #1
   14784:	add	r2, r0, r1, lsl #1
   14788:	mov	r5, #0
   1478c:	mov	r0, r4
   14790:	mov	r1, #0
   14794:	bl	13450 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   14798:	str	r0, [r4, #4]
   1479c:	cmp	r0, #0
   147a0:	beq	147dc <flatcc_builder_reserve_table@@Base+0xbc>
   147a4:	lsl	r1, r6, #1
   147a8:	add	r0, r0, #4
   147ac:	str	r0, [r4, #4]
   147b0:	ldr	r0, [r4, #32]
   147b4:	ldr	r2, [r0, #20]
   147b8:	str	r5, [sp]
   147bc:	orr	r3, r1, #1
   147c0:	mov	r0, r4
   147c4:	mov	r1, #3
   147c8:	bl	13450 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   147cc:	str	r0, [r4]
   147d0:	cmp	r0, #0
   147d4:	mvneq	r5, #0
   147d8:	b	147e0 <flatcc_builder_reserve_table@@Base+0xc0>
   147dc:	mvn	r5, #0
   147e0:	mov	r0, r5
   147e4:	sub	sp, fp, #16
   147e8:	pop	{r4, r5, r6, sl, fp, pc}

000147ec <flatcc_builder_start_table@@Base>:
   147ec:	push	{r4, r5, r6, sl, fp, lr}
   147f0:	add	fp, sp, #16
   147f4:	mov	r6, r1
   147f8:	mov	r4, r0
   147fc:	mov	r1, #4
   14800:	bl	13bbc <flatcc_builder_start_buffer@@Base+0xbc>
   14804:	mvn	r5, #0
   14808:	cmp	r0, #0
   1480c:	bne	14884 <flatcc_builder_start_table@@Base+0x98>
   14810:	ldr	r0, [r4, #4]
   14814:	ldr	r1, [r4, #32]
   14818:	ldr	r2, [r4, #52]	; 0x34
   1481c:	sub	r0, r0, r2
   14820:	str	r0, [r1, #16]
   14824:	ldr	r0, [r4]
   14828:	ldr	r1, [r4, #32]
   1482c:	ldr	r2, [r4, #76]	; 0x4c
   14830:	sub	r0, r0, r2
   14834:	str	r0, [r1, #20]
   14838:	ldr	r0, [r4, #12]
   1483c:	ldr	r1, [r4, #32]
   14840:	str	r0, [r1, #24]
   14844:	ldr	r0, [r4, #32]
   14848:	ldrh	r1, [r4, #8]
   1484c:	strh	r1, [r0, #28]
   14850:	mov	r0, #0
   14854:	strh	r0, [r4, #8]
   14858:	movw	r0, #15186	; 0x3b52
   1485c:	movt	r0, #12137	; 0x2f69
   14860:	str	r0, [r4, #12]
   14864:	ldr	r0, [r4, #32]
   14868:	mov	r1, #3
   1486c:	strh	r1, [r0, #14]
   14870:	mov	r0, r4
   14874:	mov	r1, r6
   14878:	bl	14754 <flatcc_builder_reserve_table@@Base+0x34>
   1487c:	cmp	r0, #0
   14880:	beq	1488c <flatcc_builder_start_table@@Base+0xa0>
   14884:	mov	r0, r5
   14888:	pop	{r4, r5, r6, sl, fp, pc}
   1488c:	mov	r0, r4
   14890:	movw	r1, #65532	; 0xfffc
   14894:	bl	13e34 <flatcc_builder_start_struct@@Base+0x4c>
   14898:	mov	r5, #0
   1489c:	mov	r0, r5
   148a0:	pop	{r4, r5, r6, sl, fp, pc}

000148a4 <flatcc_builder_create_vtable@@Base>:
   148a4:	push	{fp, lr}
   148a8:	mov	fp, sp
   148ac:	sub	sp, sp, #72	; 0x48
   148b0:	mov	r3, #0
   148b4:	str	r3, [sp, #4]
   148b8:	str	r3, [sp]
   148bc:	cmp	r2, #0
   148c0:	strne	r2, [sp, #12]
   148c4:	strne	r1, [sp, #8]
   148c8:	strne	r2, [sp]
   148cc:	movne	r1, #1
   148d0:	strne	r1, [sp, #4]
   148d4:	ldr	r1, [r0, #152]	; 0x98
   148d8:	cmp	r1, #0
   148dc:	bne	148ec <flatcc_builder_create_vtable@@Base+0x48>
   148e0:	ldr	r1, [r0, #180]	; 0xb4
   148e4:	cmp	r1, #0
   148e8:	beq	14908 <flatcc_builder_create_vtable@@Base+0x64>
   148ec:	mov	r1, sp
   148f0:	bl	137c4 <flatcc_builder_embed_buffer@@Base+0x1e0>
   148f4:	cmp	r0, #0
   148f8:	beq	14918 <flatcc_builder_create_vtable@@Base+0x74>
   148fc:	add	r0, r0, #1
   14900:	mov	sp, fp
   14904:	pop	{fp, pc}
   14908:	mov	r1, sp
   1490c:	bl	14924 <flatcc_builder_create_vtable@@Base+0x80>
   14910:	cmp	r0, #0
   14914:	bne	14900 <flatcc_builder_create_vtable@@Base+0x5c>
   14918:	mov	r0, #0
   1491c:	mov	sp, fp
   14920:	pop	{fp, pc}
   14924:	push	{r4, sl, fp, lr}
   14928:	add	fp, sp, #8
   1492c:	sub	sp, sp, #8
   14930:	ldr	r4, [r0, #140]	; 0x8c
   14934:	ldr	r3, [r1]
   14938:	add	r2, r3, r4
   1493c:	str	r2, [r0, #140]	; 0x8c
   14940:	cmn	r3, #1
   14944:	ble	14998 <flatcc_builder_create_vtable@@Base+0xf4>
   14948:	ldr	r2, [r1, #4]
   1494c:	ldr	ip, [r0, #36]	; 0x24
   14950:	ldr	lr, [r0, #44]	; 0x2c
   14954:	str	r3, [sp]
   14958:	add	r1, r1, #8
   1495c:	mov	r0, ip
   14960:	mov	r3, r4
   14964:	blx	lr
   14968:	cmp	r0, #0
   1496c:	addeq	r0, r4, #1
   14970:	subeq	sp, fp, #8
   14974:	popeq	{r4, sl, fp, pc}
   14978:	movw	r0, #34000	; 0x84d0
   1497c:	movt	r0, #1
   14980:	movw	r1, #29482	; 0x732a
   14984:	movt	r1, #1
   14988:	movw	r3, #33867	; 0x844b
   1498c:	movt	r3, #1
   14990:	movw	r2, #677	; 0x2a5
   14994:	bl	12498 <__assert_fail@plt>
   14998:	movw	r0, #34000	; 0x84d0
   1499c:	movt	r0, #1
   149a0:	movw	r1, #29482	; 0x732a
   149a4:	movt	r1, #1
   149a8:	movw	r3, #33867	; 0x844b
   149ac:	movt	r3, #1
   149b0:	movw	r2, #673	; 0x2a1
   149b4:	bl	12498 <__assert_fail@plt>

000149b8 <flatcc_builder_create_cached_vtable@@Base>:
   149b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149bc:	add	fp, sp, #28
   149c0:	sub	sp, sp, #20
   149c4:	mov	r4, r2
   149c8:	mov	r9, r1
   149cc:	mov	sl, r0
   149d0:	mov	r1, r3
   149d4:	bl	14bb0 <flatcc_builder_create_cached_vtable@@Base+0x1f8>
   149d8:	cmp	r0, #0
   149dc:	beq	14b00 <flatcc_builder_create_cached_vtable@@Base+0x148>
   149e0:	mov	r7, r0
   149e4:	ldr	r6, [r0]
   149e8:	mov	r5, #0
   149ec:	cmp	r6, #0
   149f0:	mov	r8, #0
   149f4:	beq	14a8c <flatcc_builder_create_cached_vtable@@Base+0xd4>
   149f8:	ldr	r5, [sl, #68]	; 0x44
   149fc:	str	sl, [sp, #16]
   14a00:	ldr	sl, [sl, #100]	; 0x64
   14a04:	mov	r0, #0
   14a08:	str	r7, [sp, #8]
   14a0c:	str	r0, [sp, #12]
   14a10:	b	14a24 <flatcc_builder_create_cached_vtable@@Base+0x6c>
   14a14:	ldr	r6, [r8, #12]!
   14a18:	cmp	r6, #0
   14a1c:	mov	r7, r8
   14a20:	beq	14a7c <flatcc_builder_create_cached_vtable@@Base+0xc4>
   14a24:	add	r8, sl, r6
   14a28:	ldr	r0, [r8, #8]
   14a2c:	mov	r1, r5
   14a30:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   14a34:	cmp	r0, r4
   14a38:	bne	14a14 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   14a3c:	mov	r0, r9
   14a40:	mov	r2, r4
   14a44:	bl	12444 <bcmp@plt>
   14a48:	cmp	r0, #0
   14a4c:	bne	14a14 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   14a50:	ldr	r0, [sp, #16]
   14a54:	ldr	r0, [r0, #152]	; 0x98
   14a58:	ldr	r1, [r8, #4]
   14a5c:	cmp	r1, r0
   14a60:	beq	14b88 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   14a64:	mov	r7, r8
   14a68:	ldr	r6, [r7, #12]!
   14a6c:	cmp	r6, #0
   14a70:	mov	r0, r8
   14a74:	bne	14a0c <flatcc_builder_create_cached_vtable@@Base+0x54>
   14a78:	b	14a80 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   14a7c:	ldr	r8, [sp, #12]
   14a80:	ldr	sl, [sp, #16]
   14a84:	mov	r5, #0
   14a88:	ldr	r7, [sp, #8]
   14a8c:	ldr	r2, [sl, #124]	; 0x7c
   14a90:	str	r5, [sp]
   14a94:	mov	r0, sl
   14a98:	mov	r1, #6
   14a9c:	mov	r3, #16
   14aa0:	bl	13450 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   14aa4:	cmp	r0, #0
   14aa8:	beq	14b74 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14aac:	mov	r6, r0
   14ab0:	ldr	r0, [sl, #124]	; 0x7c
   14ab4:	ldr	r1, [sl, #152]	; 0x98
   14ab8:	add	r2, r0, #16
   14abc:	str	r2, [sl, #124]	; 0x7c
   14ac0:	str	r1, [r6, #4]
   14ac4:	ldr	r1, [r7]
   14ac8:	str	r1, [r6, #12]
   14acc:	str	r0, [r7]
   14ad0:	mov	r0, sl
   14ad4:	mov	r1, r9
   14ad8:	mov	r2, r4
   14adc:	bl	148a4 <flatcc_builder_create_vtable@@Base>
   14ae0:	str	r0, [r6]
   14ae4:	cmp	r0, #0
   14ae8:	beq	14b74 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14aec:	cmp	r8, #0
   14af0:	beq	14b08 <flatcc_builder_create_cached_vtable@@Base+0x150>
   14af4:	ldr	r0, [r8, #8]
   14af8:	str	r0, [r6, #8]
   14afc:	b	14b70 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   14b00:	mov	r5, #0
   14b04:	b	14b74 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14b08:	ldr	r0, [sl, #172]	; 0xac
   14b0c:	cmp	r0, #0
   14b10:	beq	14b30 <flatcc_builder_create_cached_vtable@@Base+0x178>
   14b14:	ldr	r1, [sl, #120]	; 0x78
   14b18:	add	r1, r1, r4
   14b1c:	cmp	r0, r1
   14b20:	bcs	14b30 <flatcc_builder_create_cached_vtable@@Base+0x178>
   14b24:	mov	r0, sl
   14b28:	bl	1313c <flatcc_builder_flush_vtable_cache@@Base>
   14b2c:	b	14b70 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   14b30:	ldr	r2, [sl, #120]	; 0x78
   14b34:	mov	r0, #0
   14b38:	str	r0, [sp]
   14b3c:	mov	r0, sl
   14b40:	mov	r1, #2
   14b44:	mov	r3, r4
   14b48:	bl	13450 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   14b4c:	cmp	r0, #0
   14b50:	beq	14b80 <flatcc_builder_create_cached_vtable@@Base+0x1c8>
   14b54:	ldr	r1, [sl, #120]	; 0x78
   14b58:	str	r1, [r6, #8]
   14b5c:	add	r1, r1, r4
   14b60:	str	r1, [sl, #120]	; 0x78
   14b64:	mov	r1, r9
   14b68:	mov	r2, r4
   14b6c:	bl	123e4 <memcpy@plt>
   14b70:	ldr	r5, [r6]
   14b74:	mov	r0, r5
   14b78:	sub	sp, fp, #28
   14b7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b80:	mvn	r5, #0
   14b84:	b	14b74 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14b88:	ldr	r1, [sp, #8]
   14b8c:	cmp	r7, r1
   14b90:	beq	14ba8 <flatcc_builder_create_cached_vtable@@Base+0x1f0>
   14b94:	ldr	r0, [r8, #12]
   14b98:	str	r0, [r7]
   14b9c:	ldr	r0, [r1]
   14ba0:	str	r0, [r8, #12]
   14ba4:	str	r6, [r1]
   14ba8:	ldr	r5, [r8]
   14bac:	b	14b74 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14bb0:	push	{r4, r5, fp, lr}
   14bb4:	add	fp, sp, #8
   14bb8:	mov	r4, r1
   14bbc:	mov	r5, r0
   14bc0:	ldr	r0, [r0, #116]	; 0x74
   14bc4:	cmp	r0, #0
   14bc8:	bne	14be4 <flatcc_builder_create_cached_vtable@@Base+0x22c>
   14bcc:	mov	r0, r5
   14bd0:	bl	162f0 <flatcc_builder_get_emit_context@@Base+0x80>
   14bd4:	mov	r1, r0
   14bd8:	mov	r0, #0
   14bdc:	cmp	r1, #0
   14be0:	popne	{r4, r5, fp, pc}
   14be4:	ldr	r0, [r5, #92]	; 0x5c
   14be8:	ldr	r1, [r5, #116]	; 0x74
   14bec:	rsb	r1, r1, #32
   14bf0:	lsr	r1, r4, r1
   14bf4:	add	r0, r0, r1, lsl #2
   14bf8:	pop	{r4, r5, fp, pc}

00014bfc <flatcc_builder_create_table@@Base>:
   14bfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c00:	add	fp, sp, #28
   14c04:	sub	sp, sp, #84	; 0x54
   14c08:	strh	r3, [fp, #-30]	; 0xffffffe2
   14c0c:	ldr	r4, [fp, #12]
   14c10:	cmn	r4, #1
   14c14:	ble	14d3c <flatcc_builder_create_table@@Base+0x140>
   14c18:	ldr	r8, [fp, #16]
   14c1c:	tst	r8, #1
   14c20:	beq	14d5c <flatcc_builder_create_table@@Base+0x160>
   14c24:	mov	sl, r2
   14c28:	mov	r6, r1
   14c2c:	mov	r5, r0
   14c30:	sub	r0, fp, #30
   14c34:	mov	r1, #4
   14c38:	bl	14598 <flatcc_builder_start_vector@@Base+0x80>
   14c3c:	ldrh	r7, [fp, #-30]	; 0xffffffe2
   14c40:	mov	r0, r5
   14c44:	mov	r1, r7
   14c48:	bl	13a24 <flatcc_builder_create_buffer@@Base+0x1cc>
   14c4c:	mov	r0, r5
   14c50:	mov	r1, sl
   14c54:	mov	r2, r7
   14c58:	bl	137ac <flatcc_builder_embed_buffer@@Base+0x1c8>
   14c5c:	mov	r9, r0
   14c60:	add	r0, sl, r0
   14c64:	str	r5, [sp]
   14c68:	ldr	r1, [r5, #136]	; 0x88
   14c6c:	sub	r0, r1, r0
   14c70:	sub	r5, r0, #4
   14c74:	sub	r0, r5, r8
   14c78:	add	r0, r0, #1
   14c7c:	bl	137c0 <flatcc_builder_embed_buffer@@Base+0x1dc>
   14c80:	str	r0, [fp, #-36]	; 0xffffffdc
   14c84:	cmp	r4, #1
   14c88:	blt	14cb8 <flatcc_builder_create_table@@Base+0xbc>
   14c8c:	ldr	r7, [fp, #8]
   14c90:	mvn	r0, #3
   14c94:	sub	r5, r0, r5
   14c98:	ldrh	r8, [r7], #2
   14c9c:	ldr	r0, [r8, r6]
   14ca0:	add	r0, r5, r0
   14ca4:	sub	r0, r0, r8
   14ca8:	bl	137c0 <flatcc_builder_embed_buffer@@Base+0x1dc>
   14cac:	str	r0, [r8, r6]
   14cb0:	subs	r4, r4, #1
   14cb4:	bne	14c98 <flatcc_builder_create_table@@Base+0x9c>
   14cb8:	mov	r1, #4
   14cbc:	str	r1, [sp, #16]
   14cc0:	sub	r0, fp, #36	; 0x24
   14cc4:	str	r0, [sp, #12]
   14cc8:	str	r1, [sp, #4]
   14ccc:	mov	r0, #1
   14cd0:	str	r0, [sp, #8]
   14cd4:	cmp	sl, #0
   14cd8:	strne	sl, [sp, #24]
   14cdc:	strne	r6, [sp, #20]
   14ce0:	movne	r0, #2
   14ce4:	strne	r0, [sp, #8]
   14ce8:	addne	r0, sl, #4
   14cec:	strne	r0, [sp, #4]
   14cf0:	cmp	r9, #0
   14cf4:	ldr	r0, [sp]
   14cf8:	beq	14d2c <flatcc_builder_create_table@@Base+0x130>
   14cfc:	ldr	r2, [sp, #4]
   14d00:	ldr	r1, [sp, #8]
   14d04:	add	r2, r2, r9
   14d08:	str	r2, [sp, #4]
   14d0c:	add	r2, sp, #4
   14d10:	add	r3, r2, r1, lsl #3
   14d14:	movw	r2, #28952	; 0x7118
   14d18:	movt	r2, #1
   14d1c:	str	r2, [r3, #8]
   14d20:	str	r9, [r3, #12]
   14d24:	add	r1, r1, #1
   14d28:	str	r1, [sp, #8]
   14d2c:	add	r1, sp, #4
   14d30:	bl	137c4 <flatcc_builder_embed_buffer@@Base+0x1e0>
   14d34:	sub	sp, fp, #28
   14d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d3c:	movw	r0, #31366	; 0x7a86
   14d40:	movt	r0, #1
   14d44:	movw	r1, #29482	; 0x732a
   14d48:	movt	r1, #1
   14d4c:	movw	r3, #31384	; 0x7a98
   14d50:	movt	r3, #1
   14d54:	movw	r2, #1237	; 0x4d5
   14d58:	bl	12498 <__assert_fail@plt>
   14d5c:	movw	r0, #31540	; 0x7b34
   14d60:	movt	r0, #1
   14d64:	movw	r1, #29482	; 0x732a
   14d68:	movt	r1, #1
   14d6c:	movw	r3, #31384	; 0x7a98
   14d70:	movt	r3, #1
   14d74:	movw	r2, #1243	; 0x4db
   14d78:	bl	12498 <__assert_fail@plt>

00014d7c <flatcc_builder_check_required_field@@Base>:
   14d7c:	push	{fp, lr}
   14d80:	mov	fp, sp
   14d84:	ldr	r2, [r0, #32]
   14d88:	ldrh	r2, [r2, #14]
   14d8c:	cmp	r2, #3
   14d90:	bne	14dc0 <flatcc_builder_check_required_field@@Base+0x44>
   14d94:	ldrh	r3, [r0, #8]
   14d98:	mov	r2, #0
   14d9c:	cmp	r3, r1
   14da0:	bls	14db8 <flatcc_builder_check_required_field@@Base+0x3c>
   14da4:	ldr	r0, [r0, #4]
   14da8:	add	r0, r0, r1, lsl #1
   14dac:	ldrh	r2, [r0]
   14db0:	cmp	r2, #0
   14db4:	movwne	r2, #1
   14db8:	mov	r0, r2
   14dbc:	pop	{fp, pc}
   14dc0:	movw	r0, #31551	; 0x7b3f
   14dc4:	movt	r0, #1
   14dc8:	movw	r1, #29482	; 0x732a
   14dcc:	movt	r1, #1
   14dd0:	movw	r3, #31594	; 0x7b6a
   14dd4:	movt	r3, #1
   14dd8:	movw	r2, #1272	; 0x4f8
   14ddc:	bl	12498 <__assert_fail@plt>

00014de0 <flatcc_builder_check_union_field@@Base>:
   14de0:	push	{fp, lr}
   14de4:	mov	fp, sp
   14de8:	mov	r2, r0
   14dec:	ldr	r0, [r0, #32]
   14df0:	ldrh	r0, [r0, #14]
   14df4:	cmp	r0, #3
   14df8:	bne	14e58 <flatcc_builder_check_union_field@@Base+0x78>
   14dfc:	mov	r0, #0
   14e00:	cmp	r1, #0
   14e04:	beq	14e44 <flatcc_builder_check_union_field@@Base+0x64>
   14e08:	ldrh	r3, [r2, #8]
   14e0c:	cmp	r3, r1
   14e10:	popls	{fp, pc}
   14e14:	ldr	r0, [r2, #4]
   14e18:	add	r0, r0, r1, lsl #1
   14e1c:	ldrh	r1, [r0, #-2]
   14e20:	cmp	r1, #0
   14e24:	beq	14e48 <flatcc_builder_check_union_field@@Base+0x68>
   14e28:	ldr	r2, [r2, #16]
   14e2c:	ldrb	r1, [r2, r1]
   14e30:	ldrh	r0, [r0]
   14e34:	cmp	r1, #0
   14e38:	beq	14e4c <flatcc_builder_check_union_field@@Base+0x6c>
   14e3c:	cmp	r0, #0
   14e40:	movwne	r0, #1
   14e44:	pop	{fp, pc}
   14e48:	ldrh	r0, [r0]
   14e4c:	clz	r0, r0
   14e50:	lsr	r0, r0, #5
   14e54:	pop	{fp, pc}
   14e58:	movw	r0, #31551	; 0x7b3f
   14e5c:	movt	r0, #1
   14e60:	movw	r1, #29482	; 0x732a
   14e64:	movt	r1, #1
   14e68:	movw	r3, #31677	; 0x7bbd
   14e6c:	movt	r3, #1
   14e70:	movw	r2, #1279	; 0x4ff
   14e74:	bl	12498 <__assert_fail@plt>

00014e78 <flatcc_builder_check_required@@Base>:
   14e78:	push	{fp, lr}
   14e7c:	mov	fp, sp
   14e80:	mov	r3, r0
   14e84:	ldr	r0, [r0, #32]
   14e88:	ldrh	r0, [r0, #14]
   14e8c:	cmp	r0, #3
   14e90:	bne	14ed8 <flatcc_builder_check_required@@Base+0x60>
   14e94:	ldrh	ip, [r3, #8]
   14e98:	mov	r0, #0
   14e9c:	cmp	ip, r2
   14ea0:	poplt	{fp, pc}
   14ea4:	cmp	r2, #1
   14ea8:	blt	14ed0 <flatcc_builder_check_required@@Base+0x58>
   14eac:	ldr	ip, [r3, #4]
   14eb0:	ldrh	r3, [r1]
   14eb4:	add	r3, ip, r3, lsl #1
   14eb8:	ldrh	r3, [r3]
   14ebc:	cmp	r3, #0
   14ec0:	beq	14ed4 <flatcc_builder_check_required@@Base+0x5c>
   14ec4:	add	r1, r1, #2
   14ec8:	subs	r2, r2, #1
   14ecc:	bne	14eb0 <flatcc_builder_check_required@@Base+0x38>
   14ed0:	mov	r0, #1
   14ed4:	pop	{fp, pc}
   14ed8:	movw	r0, #31551	; 0x7b3f
   14edc:	movt	r0, #1
   14ee0:	movw	r1, #29482	; 0x732a
   14ee4:	movt	r1, #1
   14ee8:	movw	r3, #31757	; 0x7c0d
   14eec:	movt	r3, #1
   14ef0:	movw	r2, #1297	; 0x511
   14ef4:	bl	12498 <__assert_fail@plt>

00014ef8 <flatcc_builder_end_table@@Base>:
   14ef8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14efc:	add	fp, sp, #24
   14f00:	sub	sp, sp, #16
   14f04:	mov	r4, r0
   14f08:	ldr	r0, [r0, #32]
   14f0c:	ldrh	r0, [r0, #14]
   14f10:	cmp	r0, #3
   14f14:	bne	15024 <flatcc_builder_end_table@@Base+0x12c>
   14f18:	ldrh	r0, [r4, #8]
   14f1c:	mov	r1, #4
   14f20:	add	r0, r1, r0, lsl #1
   14f24:	ldr	r6, [r4, #4]
   14f28:	strh	r0, [r6, #-4]!
   14f2c:	ldrh	r1, [r4, #20]
   14f30:	add	r1, r1, #4
   14f34:	strh	r1, [r6, #2]
   14f38:	uxth	r5, r0
   14f3c:	ldr	r0, [r4, #12]
   14f40:	eor	r0, r0, r5
   14f44:	movw	r2, #31153	; 0x79b1
   14f48:	movt	r2, #40503	; 0x9e37
   14f4c:	mul	r0, r0, r2
   14f50:	uxth	r1, r1
   14f54:	eor	r0, r0, r1
   14f58:	mul	r3, r0, r2
   14f5c:	str	r3, [r4, #12]
   14f60:	mov	r0, r4
   14f64:	mov	r1, r6
   14f68:	mov	r2, r5
   14f6c:	bl	149b8 <flatcc_builder_create_cached_vtable@@Base>
   14f70:	cmp	r0, #0
   14f74:	beq	15014 <flatcc_builder_end_table@@Base+0x11c>
   14f78:	mov	r7, r0
   14f7c:	mov	r8, #0
   14f80:	mov	r0, r6
   14f84:	mov	r1, #0
   14f88:	mov	r2, r5
   14f8c:	bl	12468 <memset@plt>
   14f90:	ldrh	r3, [r4, #130]	; 0x82
   14f94:	ldr	r0, [r4, #76]	; 0x4c
   14f98:	ldr	r6, [r4]
   14f9c:	ldr	r1, [r4, #16]
   14fa0:	ldr	r2, [r4, #20]
   14fa4:	ldr	r5, [r4, #32]
   14fa8:	ldr	r5, [r5, #20]
   14fac:	add	r0, r0, r5
   14fb0:	sub	r6, r6, r0
   14fb4:	asr	r6, r6, #1
   14fb8:	stm	sp, {r0, r6, r7}
   14fbc:	mov	r0, r4
   14fc0:	bl	14bfc <flatcc_builder_create_table@@Base>
   14fc4:	cmp	r0, #0
   14fc8:	beq	15018 <flatcc_builder_end_table@@Base+0x120>
   14fcc:	mov	r5, r0
   14fd0:	ldr	r0, [r4, #32]
   14fd4:	ldr	r1, [r4, #52]	; 0x34
   14fd8:	ldr	r2, [r4, #76]	; 0x4c
   14fdc:	ldr	r3, [r0, #24]
   14fe0:	str	r3, [r4, #12]
   14fe4:	ldrh	r3, [r0, #28]
   14fe8:	strh	r3, [r4, #8]
   14fec:	ldr	r3, [r0, #16]
   14ff0:	add	r1, r1, r3
   14ff4:	str	r1, [r4, #4]
   14ff8:	ldr	r0, [r0, #20]
   14ffc:	add	r0, r2, r0
   15000:	str	r0, [r4]
   15004:	mov	r0, r4
   15008:	bl	13d7c <flatcc_builder_end_buffer@@Base+0xc8>
   1500c:	mov	r8, r5
   15010:	b	15018 <flatcc_builder_end_table@@Base+0x120>
   15014:	mov	r8, #0
   15018:	mov	r0, r8
   1501c:	sub	sp, fp, #24
   15020:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15024:	movw	r0, #31551	; 0x7b3f
   15028:	movt	r0, #1
   1502c:	movw	r1, #29482	; 0x732a
   15030:	movt	r1, #1
   15034:	movw	r3, #31847	; 0x7c67
   15038:	movt	r3, #1
   1503c:	movw	r2, #1317	; 0x525
   15040:	bl	12498 <__assert_fail@plt>

00015044 <flatcc_builder_create_vector@@Base>:
   15044:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15048:	add	fp, sp, #24
   1504c:	sub	sp, sp, #80	; 0x50
   15050:	mov	r4, r0
   15054:	ldr	r0, [fp, #8]
   15058:	strh	r0, [fp, #-26]	; 0xffffffe6
   1505c:	ldr	r0, [fp, #12]
   15060:	cmp	r2, r0
   15064:	bhi	15130 <flatcc_builder_create_vector@@Base+0xec>
   15068:	mov	r6, r3
   1506c:	mov	r7, r2
   15070:	mov	r8, r1
   15074:	sub	r0, fp, #26
   15078:	mov	r9, #4
   1507c:	mov	r1, #4
   15080:	bl	14598 <flatcc_builder_start_vector@@Base+0x80>
   15084:	ldrh	r5, [fp, #-26]	; 0xffffffe6
   15088:	mov	r0, r4
   1508c:	mov	r1, r5
   15090:	bl	13a24 <flatcc_builder_create_buffer@@Base+0x1cc>
   15094:	mov	r0, r7
   15098:	bl	137c0 <flatcc_builder_embed_buffer@@Base+0x1dc>
   1509c:	str	r7, [fp, #-32]	; 0xffffffe0
   150a0:	mul	r6, r6, r7
   150a4:	mov	r0, r4
   150a8:	mov	r1, r6
   150ac:	mov	r2, r5
   150b0:	bl	137ac <flatcc_builder_embed_buffer@@Base+0x1c8>
   150b4:	str	r9, [sp, #12]
   150b8:	sub	r1, fp, #32
   150bc:	str	r1, [sp, #8]
   150c0:	str	r9, [sp]
   150c4:	mov	r1, #1
   150c8:	str	r1, [sp, #4]
   150cc:	cmp	r6, #0
   150d0:	strne	r6, [sp, #20]
   150d4:	strne	r8, [sp, #16]
   150d8:	movne	r1, #2
   150dc:	strne	r1, [sp, #4]
   150e0:	addne	r1, r6, #4
   150e4:	strne	r1, [sp]
   150e8:	cmp	r0, #0
   150ec:	beq	1511c <flatcc_builder_create_vector@@Base+0xd8>
   150f0:	ldm	sp, {r1, r2}
   150f4:	add	r1, r1, r0
   150f8:	str	r1, [sp]
   150fc:	mov	r1, sp
   15100:	add	r1, r1, r2, lsl #3
   15104:	movw	r3, #28952	; 0x7118
   15108:	movt	r3, #1
   1510c:	str	r3, [r1, #8]
   15110:	str	r0, [r1, #12]
   15114:	add	r0, r2, #1
   15118:	str	r0, [sp, #4]
   1511c:	mov	r1, sp
   15120:	mov	r0, r4
   15124:	bl	137c4 <flatcc_builder_embed_buffer@@Base+0x1e0>
   15128:	sub	sp, fp, #24
   1512c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15130:	movw	r0, #31913	; 0x7ca9
   15134:	movt	r0, #1
   15138:	movw	r1, #29482	; 0x732a
   1513c:	movt	r1, #1
   15140:	movw	r3, #31932	; 0x7cbc
   15144:	movt	r3, #1
   15148:	movw	r2, #1365	; 0x555
   1514c:	bl	12498 <__assert_fail@plt>

00015150 <flatcc_builder_end_vector@@Base>:
   15150:	push	{r4, r5, fp, lr}
   15154:	add	fp, sp, #8
   15158:	sub	sp, sp, #8
   1515c:	mov	r4, r0
   15160:	ldr	r0, [r0, #32]
   15164:	ldrh	r1, [r0, #14]
   15168:	cmp	r1, #4
   1516c:	bne	151b0 <flatcc_builder_end_vector@@Base+0x60>
   15170:	ldr	r1, [r4, #16]
   15174:	ldrh	r5, [r4, #130]	; 0x82
   15178:	ldr	r3, [r0, #16]
   1517c:	ldr	r2, [r0, #20]
   15180:	ldr	r0, [r0, #24]
   15184:	str	r5, [sp]
   15188:	str	r0, [sp, #4]
   1518c:	mov	r0, r4
   15190:	bl	15044 <flatcc_builder_create_vector@@Base>
   15194:	mov	r5, r0
   15198:	cmp	r0, #0
   1519c:	movne	r0, r4
   151a0:	blne	13d7c <flatcc_builder_end_buffer@@Base+0xc8>
   151a4:	mov	r0, r5
   151a8:	sub	sp, fp, #8
   151ac:	pop	{r4, r5, fp, pc}
   151b0:	movw	r0, #30285	; 0x764d
   151b4:	movt	r0, #1
   151b8:	movw	r1, #29482	; 0x732a
   151bc:	movt	r1, #1
   151c0:	movw	r3, #32050	; 0x7d32
   151c4:	movt	r3, #1
   151c8:	movw	r2, #1400	; 0x578
   151cc:	bl	12498 <__assert_fail@plt>

000151d0 <flatcc_builder_vector_count@@Base>:
   151d0:	ldr	r0, [r0, #32]
   151d4:	ldr	r0, [r0, #20]
   151d8:	bx	lr

000151dc <flatcc_builder_vector_edit@@Base>:
   151dc:	ldr	r0, [r0, #16]
   151e0:	bx	lr

000151e4 <flatcc_builder_create_offset_vector_direct@@Base>:
   151e4:	mov	r3, #0
   151e8:	b	151ec <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   151ec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   151f0:	add	fp, sp, #24
   151f4:	sub	sp, sp, #80	; 0x50
   151f8:	mov	r8, r0
   151fc:	mov	r0, #0
   15200:	cmn	r2, #-1073741823	; 0xc0000001
   15204:	bhi	15354 <flatcc_builder_create_offset_vector_direct@@Base+0x170>
   15208:	mov	r9, r3
   1520c:	mov	r6, r2
   15210:	mov	r7, r1
   15214:	mov	r5, #4
   15218:	mov	r0, r8
   1521c:	mov	r1, #4
   15220:	bl	13a24 <flatcc_builder_create_buffer@@Base+0x1cc>
   15224:	mov	r0, r6
   15228:	bl	137c0 <flatcc_builder_embed_buffer@@Base+0x1dc>
   1522c:	str	r6, [fp, #-28]	; 0xffffffe4
   15230:	lsl	r4, r6, #2
   15234:	mov	r0, r8
   15238:	mov	r1, r4
   1523c:	mov	r2, #4
   15240:	bl	137ac <flatcc_builder_embed_buffer@@Base+0x1c8>
   15244:	str	r5, [sp, #16]
   15248:	sub	r1, fp, #28
   1524c:	str	r1, [sp, #12]
   15250:	str	r5, [sp, #4]
   15254:	mov	r1, #1
   15258:	str	r1, [sp, #8]
   1525c:	mov	r1, #0
   15260:	cmp	r1, r6, lsl #2
   15264:	strne	r4, [sp, #24]
   15268:	strne	r7, [sp, #20]
   1526c:	movne	r1, #2
   15270:	strne	r1, [sp, #8]
   15274:	addne	r1, r4, #4
   15278:	strne	r1, [sp, #4]
   1527c:	cmp	r0, #0
   15280:	beq	152b0 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   15284:	ldmib	sp, {r1, r2}
   15288:	add	r1, r1, r0
   1528c:	str	r1, [sp, #4]
   15290:	add	r1, sp, #4
   15294:	add	r1, r1, r2, lsl #3
   15298:	movw	r3, #28952	; 0x7118
   1529c:	movt	r3, #1
   152a0:	str	r3, [r1, #8]
   152a4:	str	r0, [r1, #12]
   152a8:	add	r0, r2, #1
   152ac:	str	r0, [sp, #8]
   152b0:	cmp	r6, #0
   152b4:	beq	15348 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   152b8:	ldr	r0, [r8, #136]	; 0x88
   152bc:	ldr	r1, [sp, #4]
   152c0:	sub	r0, r1, r0
   152c4:	sub	r4, r0, #4
   152c8:	mov	r5, r9
   152cc:	b	152e4 <flatcc_builder_create_offset_vector_direct@@Base+0x100>
   152d0:	sub	r4, r4, #4
   152d4:	add	r7, r7, #4
   152d8:	add	r5, r5, #1
   152dc:	subs	r6, r6, #1
   152e0:	beq	15348 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   152e4:	ldr	r0, [r7]
   152e8:	cmp	r0, #0
   152ec:	beq	15314 <flatcc_builder_create_offset_vector_direct@@Base+0x130>
   152f0:	add	r0, r4, r0
   152f4:	bl	137c0 <flatcc_builder_embed_buffer@@Base+0x1dc>
   152f8:	str	r0, [r7]
   152fc:	cmp	r9, #0
   15300:	beq	152d0 <flatcc_builder_create_offset_vector_direct@@Base+0xec>
   15304:	ldrb	r0, [r5]
   15308:	cmp	r0, #0
   1530c:	bne	152d0 <flatcc_builder_create_offset_vector_direct@@Base+0xec>
   15310:	b	1535c <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   15314:	cmp	r9, #0
   15318:	beq	1537c <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   1531c:	ldrb	r0, [r5]
   15320:	cmp	r0, #0
   15324:	beq	152d0 <flatcc_builder_create_offset_vector_direct@@Base+0xec>
   15328:	movw	r0, #34133	; 0x8555
   1532c:	movt	r0, #1
   15330:	movw	r1, #29482	; 0x732a
   15334:	movt	r1, #1
   15338:	movw	r3, #34002	; 0x84d2
   1533c:	movt	r3, #1
   15340:	movw	r2, #1461	; 0x5b5
   15344:	bl	12498 <__assert_fail@plt>
   15348:	add	r1, sp, #4
   1534c:	mov	r0, r8
   15350:	bl	137c4 <flatcc_builder_embed_buffer@@Base+0x1e0>
   15354:	sub	sp, fp, #24
   15358:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1535c:	movw	r0, #33988	; 0x84c4
   15360:	movt	r0, #1
   15364:	movw	r1, #29482	; 0x732a
   15368:	movt	r1, #1
   1536c:	movw	r3, #34002	; 0x84d2
   15370:	movt	r3, #1
   15374:	movw	r2, #1457	; 0x5b1
   15378:	bl	12498 <__assert_fail@plt>
   1537c:	movw	r0, #34000	; 0x84d0
   15380:	movt	r0, #1
   15384:	movw	r1, #29482	; 0x732a
   15388:	movt	r1, #1
   1538c:	movw	r3, #34002	; 0x84d2
   15390:	movt	r3, #1
   15394:	movw	r2, #1463	; 0x5b7
   15398:	bl	12498 <__assert_fail@plt>

0001539c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   1539c:	push	{r4, r5, fp, lr}
   153a0:	add	fp, sp, #8
   153a4:	mov	r3, r1
   153a8:	mov	r4, r0
   153ac:	ldr	r0, [r0, #32]
   153b0:	ldrh	r1, [r0, #14]
   153b4:	cmp	r1, #5
   153b8:	bne	153e4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x48>
   153bc:	ldr	r2, [r0, #20]
   153c0:	ldr	r1, [r4, #16]
   153c4:	mov	r0, r4
   153c8:	bl	151ec <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   153cc:	mov	r5, r0
   153d0:	cmp	r0, #0
   153d4:	movne	r0, r4
   153d8:	blne	13d7c <flatcc_builder_end_buffer@@Base+0xc8>
   153dc:	mov	r0, r5
   153e0:	pop	{r4, r5, fp, pc}
   153e4:	movw	r0, #30534	; 0x7746
   153e8:	movt	r0, #1
   153ec:	movw	r1, #29482	; 0x732a
   153f0:	movt	r1, #1
   153f4:	movw	r3, #32191	; 0x7dbf
   153f8:	movt	r3, #1
   153fc:	movw	r2, #1493	; 0x5d5
   15400:	bl	12498 <__assert_fail@plt>

00015404 <flatcc_builder_offset_vector_edit@@Base>:
   15404:	ldr	r0, [r0, #16]
   15408:	bx	lr

0001540c <flatcc_builder_offset_vector_count@@Base>:
   1540c:	ldr	r0, [r0, #32]
   15410:	ldr	r0, [r0, #20]
   15414:	bx	lr

00015418 <flatcc_builder_table_add_union@@Base>:
   15418:	push	{r4, r5, r6, r7, fp, lr}
   1541c:	add	fp, sp, #16
   15420:	mov	r5, r0
   15424:	ldr	r0, [r0, #32]
   15428:	ldrh	r0, [r0, #14]
   1542c:	cmp	r0, #3
   15430:	bne	154a4 <flatcc_builder_table_add_union@@Base+0x8c>
   15434:	mov	r7, r3
   15438:	mov	r6, r1
   1543c:	uxtb	r4, r2
   15440:	cmp	r3, #0
   15444:	beq	15450 <flatcc_builder_table_add_union@@Base+0x38>
   15448:	cmp	r4, #0
   1544c:	beq	154c4 <flatcc_builder_table_add_union@@Base+0xac>
   15450:	cmp	r7, #0
   15454:	beq	15470 <flatcc_builder_table_add_union@@Base+0x58>
   15458:	mov	r0, r5
   1545c:	mov	r1, r6
   15460:	bl	15524 <flatcc_builder_table_add_offset@@Base>
   15464:	cmp	r0, #0
   15468:	beq	15504 <flatcc_builder_table_add_union@@Base+0xec>
   1546c:	str	r7, [r0]
   15470:	sub	r1, r6, #1
   15474:	mov	r0, r5
   15478:	mov	r2, #1
   1547c:	mov	r3, #1
   15480:	bl	155e8 <flatcc_builder_table_add@@Base>
   15484:	cmp	r0, #0
   15488:	beq	154e4 <flatcc_builder_table_add_union@@Base+0xcc>
   1548c:	mov	r5, r0
   15490:	mov	r0, r4
   15494:	bl	156c8 <flatcc_builder_table_add@@Base+0xe0>
   15498:	strb	r4, [r5]
   1549c:	mov	r0, #0
   154a0:	pop	{r4, r5, r6, r7, fp, pc}
   154a4:	movw	r0, #31551	; 0x7b3f
   154a8:	movt	r0, #1
   154ac:	movw	r1, #29482	; 0x732a
   154b0:	movt	r1, #1
   154b4:	movw	r3, #32305	; 0x7e31
   154b8:	movt	r3, #1
   154bc:	movw	r2, #1518	; 0x5ee
   154c0:	bl	12498 <__assert_fail@plt>
   154c4:	movw	r0, #32393	; 0x7e89
   154c8:	movt	r0, #1
   154cc:	movw	r1, #29482	; 0x732a
   154d0:	movt	r1, #1
   154d4:	movw	r3, #32305	; 0x7e31
   154d8:	movt	r3, #1
   154dc:	movw	r2, #1519	; 0x5ef
   154e0:	bl	12498 <__assert_fail@plt>
   154e4:	movw	r0, #32437	; 0x7eb5
   154e8:	movt	r0, #1
   154ec:	movw	r1, #29482	; 0x732a
   154f0:	movt	r1, #1
   154f4:	movw	r3, #32305	; 0x7e31
   154f8:	movt	r3, #1
   154fc:	movw	r2, #1526	; 0x5f6
   15500:	bl	12498 <__assert_fail@plt>
   15504:	movw	r0, #32427	; 0x7eab
   15508:	movt	r0, #1
   1550c:	movw	r1, #29482	; 0x732a
   15510:	movt	r1, #1
   15514:	movw	r3, #32305	; 0x7e31
   15518:	movt	r3, #1
   1551c:	movw	r2, #1522	; 0x5f2
   15520:	bl	12498 <__assert_fail@plt>

00015524 <flatcc_builder_table_add_offset@@Base>:
   15524:	push	{fp, lr}
   15528:	mov	fp, sp
   1552c:	ldr	r2, [r0, #32]
   15530:	ldrh	r2, [r2, #14]
   15534:	cmp	r2, #3
   15538:	bne	15588 <flatcc_builder_table_add_offset@@Base+0x64>
   1553c:	movw	r2, #32765	; 0x7ffd
   15540:	cmp	r1, r2
   15544:	bcs	155a8 <flatcc_builder_table_add_offset@@Base+0x84>
   15548:	ldr	r2, [r0, #4]
   1554c:	add	r2, r2, r1, lsl #1
   15550:	ldrh	r2, [r2]
   15554:	cmp	r2, #0
   15558:	bne	155c8 <flatcc_builder_table_add_offset@@Base+0xa4>
   1555c:	ldr	r2, [r0, #12]
   15560:	eor	r2, r2, r1
   15564:	movw	r3, #31153	; 0x79b1
   15568:	movt	r3, #40503	; 0x9e37
   1556c:	mul	r2, r2, r3
   15570:	eor	r2, r2, #4
   15574:	mul	r2, r2, r3
   15578:	str	r2, [r0, #12]
   1557c:	uxth	r1, r1
   15580:	pop	{fp, lr}
   15584:	b	15ef0 <flatcc_builder_table_add_copy@@Base+0x40>
   15588:	movw	r0, #31551	; 0x7b3f
   1558c:	movt	r0, #1
   15590:	movw	r1, #29482	; 0x732a
   15594:	movt	r1, #1
   15598:	movw	r3, #33331	; 0x8233
   1559c:	movt	r3, #1
   155a0:	movw	r2, #1811	; 0x713
   155a4:	bl	12498 <__assert_fail@plt>
   155a8:	movw	r0, #33203	; 0x81b3
   155ac:	movt	r0, #1
   155b0:	movw	r1, #29482	; 0x732a
   155b4:	movt	r1, #1
   155b8:	movw	r3, #33331	; 0x8233
   155bc:	movt	r3, #1
   155c0:	movw	r2, #1812	; 0x714
   155c4:	bl	12498 <__assert_fail@plt>
   155c8:	movw	r0, #34000	; 0x84d0
   155cc:	movt	r0, #1
   155d0:	movw	r1, #29482	; 0x732a
   155d4:	movt	r1, #1
   155d8:	movw	r3, #33331	; 0x8233
   155dc:	movt	r3, #1
   155e0:	movw	r2, #1819	; 0x71b
   155e4:	bl	12498 <__assert_fail@plt>

000155e8 <flatcc_builder_table_add@@Base>:
   155e8:	push	{fp, lr}
   155ec:	mov	fp, sp
   155f0:	mov	ip, r3
   155f4:	ldr	r3, [r0, #32]
   155f8:	ldrh	r3, [r3, #14]
   155fc:	cmp	r3, #3
   15600:	bne	15668 <flatcc_builder_table_add@@Base+0x80>
   15604:	movw	r3, #32765	; 0x7ffd
   15608:	cmp	r1, r3
   1560c:	bcs	15688 <flatcc_builder_table_add@@Base+0xa0>
   15610:	mov	lr, r2
   15614:	ldrh	r3, [r0, #130]	; 0x82
   15618:	cmp	r3, ip
   1561c:	strhcc	ip, [r0, #130]	; 0x82
   15620:	ldr	r3, [r0, #4]
   15624:	add	r3, r3, r1, lsl #1
   15628:	ldrh	r3, [r3]
   1562c:	cmp	r3, #0
   15630:	bne	156a8 <flatcc_builder_table_add@@Base+0xc0>
   15634:	ldr	r3, [r0, #12]
   15638:	eor	r3, r3, r1
   1563c:	movw	r2, #31153	; 0x79b1
   15640:	movt	r2, #40503	; 0x9e37
   15644:	mul	r3, r3, r2
   15648:	eor	r3, r3, lr
   1564c:	mul	r2, r3, r2
   15650:	str	r2, [r0, #12]
   15654:	uxth	r3, r1
   15658:	mov	r1, lr
   1565c:	mov	r2, ip
   15660:	pop	{fp, lr}
   15664:	b	15de4 <flatcc_builder_string_len@@Base+0xc>
   15668:	movw	r0, #31551	; 0x7b3f
   1566c:	movt	r0, #1
   15670:	movw	r1, #29482	; 0x732a
   15674:	movt	r1, #1
   15678:	movw	r3, #33129	; 0x8169
   1567c:	movt	r3, #1
   15680:	movw	r2, #1773	; 0x6ed
   15684:	bl	12498 <__assert_fail@plt>
   15688:	movw	r0, #33203	; 0x81b3
   1568c:	movt	r0, #1
   15690:	movw	r1, #29482	; 0x732a
   15694:	movt	r1, #1
   15698:	movw	r3, #33129	; 0x8169
   1569c:	movt	r3, #1
   156a0:	movw	r2, #1774	; 0x6ee
   156a4:	bl	12498 <__assert_fail@plt>
   156a8:	movw	r0, #34000	; 0x84d0
   156ac:	movt	r0, #1
   156b0:	movw	r1, #29482	; 0x732a
   156b4:	movt	r1, #1
   156b8:	movw	r3, #33129	; 0x8169
   156bc:	movt	r3, #1
   156c0:	movw	r2, #1784	; 0x6f8
   156c4:	bl	12498 <__assert_fail@plt>
   156c8:	bx	lr

000156cc <flatcc_builder_table_add_union_vector@@Base>:
   156cc:	push	{r4, r5, r6, r7, fp, lr}
   156d0:	add	fp, sp, #16
   156d4:	mov	r6, r0
   156d8:	ldr	r0, [r0, #32]
   156dc:	ldrh	r0, [r0, #14]
   156e0:	cmp	r0, #3
   156e4:	bne	15750 <flatcc_builder_table_add_union_vector@@Base+0x84>
   156e8:	mov	r4, r3
   156ec:	mov	r7, r2
   156f0:	mov	r5, r1
   156f4:	cmp	r2, #0
   156f8:	mov	r0, r2
   156fc:	movwne	r0, #1
   15700:	clz	r1, r3
   15704:	lsr	r1, r1, #5
   15708:	teq	r1, r0
   1570c:	beq	15770 <flatcc_builder_table_add_union_vector@@Base+0xa4>
   15710:	cmp	r7, #0
   15714:	beq	15748 <flatcc_builder_table_add_union_vector@@Base+0x7c>
   15718:	sub	r1, r5, #1
   1571c:	mov	r0, r6
   15720:	bl	15524 <flatcc_builder_table_add_offset@@Base>
   15724:	cmp	r0, #0
   15728:	beq	15790 <flatcc_builder_table_add_union_vector@@Base+0xc4>
   1572c:	str	r7, [r0]
   15730:	mov	r0, r6
   15734:	mov	r1, r5
   15738:	bl	15524 <flatcc_builder_table_add_offset@@Base>
   1573c:	cmp	r0, #0
   15740:	beq	157b0 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   15744:	str	r4, [r0]
   15748:	mov	r0, #0
   1574c:	pop	{r4, r5, r6, r7, fp, pc}
   15750:	movw	r0, #31551	; 0x7b3f
   15754:	movt	r0, #1
   15758:	movw	r1, #29482	; 0x732a
   1575c:	movt	r1, #1
   15760:	movw	r3, #32449	; 0x7ec1
   15764:	movt	r3, #1
   15768:	mov	r2, #1536	; 0x600
   1576c:	bl	12498 <__assert_fail@plt>
   15770:	movw	r0, #32548	; 0x7f24
   15774:	movt	r0, #1
   15778:	movw	r1, #29482	; 0x732a
   1577c:	movt	r1, #1
   15780:	movw	r3, #32449	; 0x7ec1
   15784:	movt	r3, #1
   15788:	movw	r2, #1537	; 0x601
   1578c:	bl	12498 <__assert_fail@plt>
   15790:	movw	r0, #32427	; 0x7eab
   15794:	movt	r0, #1
   15798:	movw	r1, #29482	; 0x732a
   1579c:	movt	r1, #1
   157a0:	movw	r3, #32449	; 0x7ec1
   157a4:	movt	r3, #1
   157a8:	movw	r2, #1540	; 0x604
   157ac:	bl	12498 <__assert_fail@plt>
   157b0:	movw	r0, #32427	; 0x7eab
   157b4:	movt	r0, #1
   157b8:	movw	r1, #29482	; 0x732a
   157bc:	movt	r1, #1
   157c0:	movw	r3, #32449	; 0x7ec1
   157c4:	movt	r3, #1
   157c8:	movw	r2, #1544	; 0x608
   157cc:	bl	12498 <__assert_fail@plt>

000157d0 <flatcc_builder_create_union_vector@@Base>:
   157d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   157d4:	add	fp, sp, #24
   157d8:	sub	sp, sp, #16
   157dc:	mov	r7, r3
   157e0:	mov	r6, r2
   157e4:	mov	r4, r1
   157e8:	mov	r5, r0
   157ec:	mov	r0, #0
   157f0:	str	r0, [r5]
   157f4:	str	r0, [r5, #4]
   157f8:	mov	r0, r1
   157fc:	bl	145a8 <flatcc_builder_start_offset_vector@@Base>
   15800:	cmp	r0, #0
   15804:	beq	15810 <flatcc_builder_create_union_vector@@Base+0x40>
   15808:	sub	sp, fp, #24
   1580c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15810:	mov	r0, r4
   15814:	mov	r1, r7
   15818:	bl	140f4 <flatcc_builder_extend_offset_vector@@Base>
   1581c:	cmp	r0, #0
   15820:	beq	15808 <flatcc_builder_create_union_vector@@Base+0x38>
   15824:	mov	r0, r4
   15828:	mov	r1, r7
   1582c:	bl	13e6c <flatcc_builder_start_struct@@Base+0x84>
   15830:	cmp	r0, #0
   15834:	beq	15808 <flatcc_builder_create_union_vector@@Base+0x38>
   15838:	mov	r8, r0
   1583c:	mov	r0, r4
   15840:	bl	15404 <flatcc_builder_offset_vector_edit@@Base>
   15844:	mov	ip, r0
   15848:	cmp	r7, #0
   1584c:	beq	1587c <flatcc_builder_create_union_vector@@Base+0xac>
   15850:	add	r0, r6, #4
   15854:	mov	r1, r8
   15858:	mov	r2, ip
   1585c:	mov	r6, r7
   15860:	ldrb	r3, [r0, #-4]
   15864:	strb	r3, [r1], #1
   15868:	ldr	r3, [r0]
   1586c:	str	r3, [r2], #4
   15870:	add	r0, r0, #8
   15874:	subs	r6, r6, #1
   15878:	bne	15860 <flatcc_builder_create_union_vector@@Base+0x90>
   1587c:	str	r7, [sp]
   15880:	add	r0, sp, #8
   15884:	mov	r1, r4
   15888:	mov	r2, r8
   1588c:	mov	r3, ip
   15890:	bl	158b0 <flatcc_builder_create_union_vector_direct@@Base>
   15894:	ldr	r0, [sp, #8]
   15898:	ldr	r1, [sp, #12]
   1589c:	stm	r5, {r0, r1}
   158a0:	mov	r0, r4
   158a4:	bl	13d7c <flatcc_builder_end_buffer@@Base+0xc8>
   158a8:	sub	sp, fp, #24
   158ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000158b0 <flatcc_builder_create_union_vector_direct@@Base>:
   158b0:	push	{r4, r5, r6, r7, fp, lr}
   158b4:	add	fp, sp, #16
   158b8:	sub	sp, sp, #8
   158bc:	mov	r5, r2
   158c0:	mov	r6, r1
   158c4:	mov	r4, r0
   158c8:	mov	r0, #0
   158cc:	str	r0, [r4]
   158d0:	str	r0, [r4, #4]
   158d4:	ldr	r7, [fp, #8]
   158d8:	mov	r0, r1
   158dc:	mov	r1, r3
   158e0:	mov	r2, r7
   158e4:	mov	r3, r5
   158e8:	bl	151ec <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   158ec:	str	r0, [r4, #4]
   158f0:	cmp	r0, #0
   158f4:	beq	15920 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   158f8:	mvn	r0, #0
   158fc:	mov	r1, #1
   15900:	str	r1, [sp]
   15904:	str	r0, [sp, #4]
   15908:	mov	r0, r6
   1590c:	mov	r1, r5
   15910:	mov	r2, r7
   15914:	mov	r3, #1
   15918:	bl	15044 <flatcc_builder_create_vector@@Base>
   1591c:	str	r0, [r4]
   15920:	sub	sp, fp, #16
   15924:	pop	{r4, r5, r6, r7, fp, pc}

00015928 <flatcc_builder_start_union_vector@@Base>:
   15928:	push	{r4, r5, fp, lr}
   1592c:	add	fp, sp, #8
   15930:	mov	r4, r0
   15934:	mov	r1, #4
   15938:	bl	13bbc <flatcc_builder_start_buffer@@Base+0xbc>
   1593c:	mvn	r5, #0
   15940:	cmp	r0, #0
   15944:	beq	15950 <flatcc_builder_start_union_vector@@Base+0x28>
   15948:	mov	r0, r5
   1594c:	pop	{r4, r5, fp, pc}
   15950:	ldr	r0, [r4, #32]
   15954:	mov	r1, #8
   15958:	str	r1, [r0, #16]
   1595c:	ldr	r0, [r4, #32]
   15960:	mov	r5, #0
   15964:	str	r5, [r0, #20]
   15968:	ldr	r0, [r4, #32]
   1596c:	mov	r1, #7
   15970:	strh	r1, [r0, #14]
   15974:	mov	r0, r4
   15978:	mvn	r1, #3
   1597c:	bl	13e34 <flatcc_builder_start_struct@@Base+0x4c>
   15980:	mov	r0, r5
   15984:	pop	{r4, r5, fp, pc}

00015988 <flatcc_builder_end_union_vector@@Base>:
   15988:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1598c:	add	fp, sp, #24
   15990:	sub	sp, sp, #16
   15994:	mov	r9, r0
   15998:	mov	r0, #0
   1599c:	str	r0, [r9]
   159a0:	str	r0, [r9, #4]
   159a4:	ldr	r0, [r1, #32]
   159a8:	ldrh	r0, [r0, #14]
   159ac:	cmp	r0, #7
   159b0:	bne	15a50 <flatcc_builder_end_union_vector@@Base+0xc8>
   159b4:	mov	r4, r1
   159b8:	mov	r0, r1
   159bc:	bl	15a70 <flatcc_builder_union_vector_count@@Base>
   159c0:	mov	r6, r0
   159c4:	add	r1, r0, r0, lsl #2
   159c8:	mov	r0, r4
   159cc:	bl	13e6c <flatcc_builder_start_struct@@Base+0x84>
   159d0:	cmp	r0, #0
   159d4:	beq	15a48 <flatcc_builder_end_union_vector@@Base+0xc0>
   159d8:	mov	r7, r0
   159dc:	add	r8, r0, r6, lsl #2
   159e0:	mov	r0, r4
   159e4:	bl	15a7c <flatcc_builder_union_vector_edit@@Base>
   159e8:	cmp	r6, #0
   159ec:	beq	15a1c <flatcc_builder_end_union_vector@@Base+0x94>
   159f0:	add	r0, r0, #4
   159f4:	mov	r1, r8
   159f8:	mov	r2, r7
   159fc:	mov	r3, r6
   15a00:	ldrb	r5, [r0, #-4]
   15a04:	strb	r5, [r1], #1
   15a08:	ldr	r5, [r0]
   15a0c:	str	r5, [r2], #4
   15a10:	add	r0, r0, #8
   15a14:	subs	r3, r3, #1
   15a18:	bne	15a00 <flatcc_builder_end_union_vector@@Base+0x78>
   15a1c:	str	r6, [sp]
   15a20:	add	r0, sp, #8
   15a24:	mov	r1, r4
   15a28:	mov	r2, r8
   15a2c:	mov	r3, r7
   15a30:	bl	158b0 <flatcc_builder_create_union_vector_direct@@Base>
   15a34:	ldr	r0, [sp, #8]
   15a38:	ldr	r1, [sp, #12]
   15a3c:	stm	r9, {r0, r1}
   15a40:	mov	r0, r4
   15a44:	bl	13d7c <flatcc_builder_end_buffer@@Base+0xc8>
   15a48:	sub	sp, fp, #24
   15a4c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15a50:	movw	r0, #32588	; 0x7f4c
   15a54:	movt	r0, #1
   15a58:	movw	r1, #29482	; 0x732a
   15a5c:	movt	r1, #1
   15a60:	movw	r3, #32638	; 0x7f7e
   15a64:	movt	r3, #1
   15a68:	movw	r2, #1617	; 0x651
   15a6c:	bl	12498 <__assert_fail@plt>

00015a70 <flatcc_builder_union_vector_count@@Base>:
   15a70:	ldr	r0, [r0, #32]
   15a74:	ldr	r0, [r0, #20]
   15a78:	bx	lr

00015a7c <flatcc_builder_union_vector_edit@@Base>:
   15a7c:	ldr	r0, [r0, #16]
   15a80:	bx	lr

00015a84 <flatcc_builder_extend_union_vector@@Base>:
   15a84:	push	{r4, r5, fp, lr}
   15a88:	add	fp, sp, #8
   15a8c:	mov	r5, r1
   15a90:	mov	r4, r0
   15a94:	mvn	r2, #-536870912	; 0xe0000000
   15a98:	bl	13f70 <flatcc_builder_extend_vector@@Base+0x44>
   15a9c:	cmp	r0, #0
   15aa0:	movne	r0, #0
   15aa4:	popne	{r4, r5, fp, pc}
   15aa8:	lsl	r1, r5, #3
   15aac:	mov	r0, r4
   15ab0:	pop	{r4, r5, fp, lr}
   15ab4:	b	13e6c <flatcc_builder_start_struct@@Base+0x84>

00015ab8 <flatcc_builder_truncate_union_vector@@Base>:
   15ab8:	push	{fp, lr}
   15abc:	mov	fp, sp
   15ac0:	ldr	r2, [r0, #32]
   15ac4:	ldrh	r3, [r2, #14]
   15ac8:	cmp	r3, #7
   15acc:	bne	15afc <flatcc_builder_truncate_union_vector@@Base+0x44>
   15ad0:	ldr	r3, [r2, #20]
   15ad4:	cmp	r3, r1
   15ad8:	bcc	15b1c <flatcc_builder_truncate_union_vector@@Base+0x64>
   15adc:	sub	r3, r3, r1
   15ae0:	str	r3, [r2, #20]
   15ae4:	ldr	r2, [r0, #32]
   15ae8:	ldr	r2, [r2, #16]
   15aec:	mul	r1, r2, r1
   15af0:	bl	143fc <flatcc_builder_truncate_vector@@Base+0x84>
   15af4:	mov	r0, #0
   15af8:	pop	{fp, pc}
   15afc:	movw	r0, #32588	; 0x7f4c
   15b00:	movt	r0, #1
   15b04:	movw	r1, #29482	; 0x732a
   15b08:	movt	r1, #1
   15b0c:	movw	r3, #32721	; 0x7fd1
   15b10:	movt	r3, #1
   15b14:	movw	r2, #1665	; 0x681
   15b18:	bl	12498 <__assert_fail@plt>
   15b1c:	movw	r0, #31152	; 0x79b0
   15b20:	movt	r0, #1
   15b24:	movw	r1, #29482	; 0x732a
   15b28:	movt	r1, #1
   15b2c:	movw	r3, #32721	; 0x7fd1
   15b30:	movt	r3, #1
   15b34:	movw	r2, #1666	; 0x682
   15b38:	bl	12498 <__assert_fail@plt>

00015b3c <flatcc_builder_union_vector_push@@Base>:
   15b3c:	push	{r4, r5, r6, sl, fp, lr}
   15b40:	add	fp, sp, #16
   15b44:	mov	r4, r2
   15b48:	mov	r5, r1
   15b4c:	ldr	r1, [r0, #32]
   15b50:	ldrh	r2, [r1, #14]
   15b54:	cmp	r2, #7
   15b58:	bne	15b94 <flatcc_builder_union_vector_push@@Base+0x58>
   15b5c:	ldr	r2, [r1, #20]
   15b60:	mov	r6, #0
   15b64:	cmn	r2, #-536870911	; 0xe0000001
   15b68:	beq	15b8c <flatcc_builder_union_vector_push@@Base+0x50>
   15b6c:	add	r2, r2, #1
   15b70:	str	r2, [r1, #20]
   15b74:	mov	r1, #8
   15b78:	bl	13e6c <flatcc_builder_start_struct@@Base+0x84>
   15b7c:	cmp	r0, #0
   15b80:	strne	r5, [r0]
   15b84:	strne	r4, [r0, #4]
   15b88:	movne	r6, r0
   15b8c:	mov	r0, r6
   15b90:	pop	{r4, r5, r6, sl, fp, pc}
   15b94:	movw	r0, #32588	; 0x7f4c
   15b98:	movt	r0, #1
   15b9c:	movw	r1, #29482	; 0x732a
   15ba0:	movt	r1, #1
   15ba4:	movw	r3, #32790	; 0x8016
   15ba8:	movt	r3, #1
   15bac:	movw	r2, #1677	; 0x68d
   15bb0:	bl	12498 <__assert_fail@plt>

00015bb4 <flatcc_builder_append_union_vector@@Base>:
   15bb4:	push	{r4, r5, r6, sl, fp, lr}
   15bb8:	add	fp, sp, #16
   15bbc:	mov	r6, r0
   15bc0:	ldr	r0, [r0, #32]
   15bc4:	ldrh	r0, [r0, #14]
   15bc8:	cmp	r0, #7
   15bcc:	bne	15c0c <flatcc_builder_append_union_vector@@Base+0x58>
   15bd0:	mov	r5, r2
   15bd4:	mov	r4, r1
   15bd8:	mov	r0, r6
   15bdc:	mov	r1, r2
   15be0:	mvn	r2, #-536870912	; 0xe0000000
   15be4:	bl	13f70 <flatcc_builder_extend_vector@@Base+0x44>
   15be8:	cmp	r0, #0
   15bec:	beq	15bf8 <flatcc_builder_append_union_vector@@Base+0x44>
   15bf0:	mov	r0, #0
   15bf4:	pop	{r4, r5, r6, sl, fp, pc}
   15bf8:	lsl	r2, r5, #3
   15bfc:	mov	r0, r6
   15c00:	mov	r1, r4
   15c04:	pop	{r4, r5, r6, sl, fp, lr}
   15c08:	b	14038 <flatcc_builder_vector_push@@Base+0x80>
   15c0c:	movw	r0, #32588	; 0x7f4c
   15c10:	movt	r0, #1
   15c14:	movw	r1, #29482	; 0x732a
   15c18:	movt	r1, #1
   15c1c:	movw	r3, #32899	; 0x8083
   15c20:	movt	r3, #1
   15c24:	movw	r2, #1692	; 0x69c
   15c28:	bl	12498 <__assert_fail@plt>

00015c2c <flatcc_builder_create_string@@Base>:
   15c2c:	push	{r4, r5, r6, r7, fp, lr}
   15c30:	add	fp, sp, #16
   15c34:	sub	sp, sp, #80	; 0x50
   15c38:	mov	r5, r2
   15c3c:	mov	r6, r1
   15c40:	mov	r4, r0
   15c44:	mov	r0, r2
   15c48:	bl	137c0 <flatcc_builder_embed_buffer@@Base+0x1dc>
   15c4c:	str	r5, [fp, #-20]	; 0xffffffec
   15c50:	add	r1, r5, #1
   15c54:	mov	r7, #4
   15c58:	mov	r0, r4
   15c5c:	mov	r2, #4
   15c60:	bl	137ac <flatcc_builder_embed_buffer@@Base+0x1c8>
   15c64:	str	r7, [sp, #16]
   15c68:	sub	r1, fp, #20
   15c6c:	str	r1, [sp, #12]
   15c70:	str	r7, [sp, #4]
   15c74:	mov	r1, #1
   15c78:	str	r1, [sp, #8]
   15c7c:	add	r0, r0, #1
   15c80:	cmp	r5, #0
   15c84:	strne	r5, [sp, #24]
   15c88:	strne	r6, [sp, #20]
   15c8c:	movne	r1, #2
   15c90:	strne	r1, [sp, #8]
   15c94:	addne	r1, r5, #4
   15c98:	strne	r1, [sp, #4]
   15c9c:	cmp	r0, #0
   15ca0:	beq	15cd0 <flatcc_builder_create_string@@Base+0xa4>
   15ca4:	ldmib	sp, {r1, r2}
   15ca8:	add	r1, r1, r0
   15cac:	str	r1, [sp, #4]
   15cb0:	add	r1, sp, #4
   15cb4:	add	r1, r1, r2, lsl #3
   15cb8:	movw	r3, #28952	; 0x7118
   15cbc:	movt	r3, #1
   15cc0:	str	r3, [r1, #8]
   15cc4:	str	r0, [r1, #12]
   15cc8:	add	r0, r2, #1
   15ccc:	str	r0, [sp, #8]
   15cd0:	add	r1, sp, #4
   15cd4:	mov	r0, r4
   15cd8:	bl	137c4 <flatcc_builder_embed_buffer@@Base+0x1e0>
   15cdc:	sub	sp, fp, #16
   15ce0:	pop	{r4, r5, r6, r7, fp, pc}

00015ce4 <flatcc_builder_create_string_str@@Base>:
   15ce4:	push	{r4, r5, fp, lr}
   15ce8:	add	fp, sp, #8
   15cec:	mov	r4, r1
   15cf0:	mov	r5, r0
   15cf4:	mov	r0, r1
   15cf8:	bl	12450 <strlen@plt>
   15cfc:	mov	r2, r0
   15d00:	mov	r0, r5
   15d04:	mov	r1, r4
   15d08:	pop	{r4, r5, fp, lr}
   15d0c:	b	15c2c <flatcc_builder_create_string@@Base>

00015d10 <flatcc_builder_create_string_strn@@Base>:
   15d10:	push	{r4, r5, fp, lr}
   15d14:	add	fp, sp, #8
   15d18:	mov	r4, r1
   15d1c:	mov	r5, r0
   15d20:	mov	r0, r1
   15d24:	mov	r1, r2
   15d28:	bl	1434c <flatcc_builder_append_string_strn@@Base+0x30>
   15d2c:	mov	r2, r0
   15d30:	mov	r0, r5
   15d34:	mov	r1, r4
   15d38:	pop	{r4, r5, fp, lr}
   15d3c:	b	15c2c <flatcc_builder_create_string@@Base>

00015d40 <flatcc_builder_end_string@@Base>:
   15d40:	push	{r4, r5, fp, lr}
   15d44:	add	fp, sp, #8
   15d48:	mov	r4, r0
   15d4c:	ldr	r0, [r0, #32]
   15d50:	ldrh	r1, [r0, #14]
   15d54:	cmp	r1, #6
   15d58:	bne	15d90 <flatcc_builder_end_string@@Base+0x50>
   15d5c:	ldr	r2, [r4, #20]
   15d60:	ldr	r0, [r0, #20]
   15d64:	cmp	r0, r2
   15d68:	bne	15db0 <flatcc_builder_end_string@@Base+0x70>
   15d6c:	ldr	r1, [r4, #16]
   15d70:	mov	r0, r4
   15d74:	bl	15c2c <flatcc_builder_create_string@@Base>
   15d78:	mov	r5, r0
   15d7c:	cmp	r0, #0
   15d80:	movne	r0, r4
   15d84:	blne	13d7c <flatcc_builder_end_buffer@@Base+0xc8>
   15d88:	mov	r0, r5
   15d8c:	pop	{r4, r5, fp, pc}
   15d90:	movw	r0, #30799	; 0x784f
   15d94:	movt	r0, #1
   15d98:	movw	r1, #29482	; 0x732a
   15d9c:	movt	r1, #1
   15da0:	movw	r3, #33026	; 0x8102
   15da4:	movt	r3, #1
   15da8:	movw	r2, #1732	; 0x6c4
   15dac:	bl	12498 <__assert_fail@plt>
   15db0:	movw	r0, #33093	; 0x8145
   15db4:	movt	r0, #1
   15db8:	movw	r1, #29482	; 0x732a
   15dbc:	movt	r1, #1
   15dc0:	movw	r3, #33026	; 0x8102
   15dc4:	movt	r3, #1
   15dc8:	movw	r2, #1733	; 0x6c5
   15dcc:	bl	12498 <__assert_fail@plt>

00015dd0 <flatcc_builder_string_edit@@Base>:
   15dd0:	ldr	r0, [r0, #16]
   15dd4:	bx	lr

00015dd8 <flatcc_builder_string_len@@Base>:
   15dd8:	ldr	r0, [r0, #32]
   15ddc:	ldr	r0, [r0, #20]
   15de0:	bx	lr
   15de4:	push	{r4, r5, r6, sl, fp, lr}
   15de8:	add	fp, sp, #16
   15dec:	mov	r5, r3
   15df0:	mov	r4, r0
   15df4:	ldr	r0, [r0, #20]
   15df8:	ldr	r3, [r4, #24]
   15dfc:	add	r0, r2, r0
   15e00:	sub	r0, r0, #1
   15e04:	rsb	r2, r2, #0
   15e08:	and	r6, r0, r2
   15e0c:	add	r0, r6, r1
   15e10:	str	r0, [r4, #20]
   15e14:	cmp	r0, r3
   15e18:	bcc	15e3c <flatcc_builder_string_len@@Base+0x64>
   15e1c:	add	r1, r0, #1
   15e20:	mov	r0, r4
   15e24:	movw	r2, #65532	; 0xfffc
   15e28:	bl	16288 <flatcc_builder_get_emit_context@@Base+0x18>
   15e2c:	mov	r1, r0
   15e30:	mov	r0, #0
   15e34:	cmp	r1, #0
   15e38:	popne	{r4, r5, r6, sl, fp, pc}
   15e3c:	ldr	r0, [r4, #4]
   15e40:	add	r0, r0, r5, lsl #1
   15e44:	add	r1, r6, #4
   15e48:	strh	r1, [r0]
   15e4c:	ldrh	r0, [r4, #8]
   15e50:	cmp	r0, r5
   15e54:	addls	r0, r5, #1
   15e58:	strhls	r0, [r4, #8]
   15e5c:	ldr	r0, [r4, #16]
   15e60:	add	r0, r0, r6
   15e64:	pop	{r4, r5, r6, sl, fp, pc}

00015e68 <flatcc_builder_table_edit@@Base>:
   15e68:	push	{fp, lr}
   15e6c:	mov	fp, sp
   15e70:	ldr	r2, [r0, #32]
   15e74:	ldrh	r2, [r2, #14]
   15e78:	cmp	r2, #3
   15e7c:	ldreq	r2, [r0, #16]
   15e80:	ldreq	r0, [r0, #20]
   15e84:	addeq	r0, r2, r0
   15e88:	subeq	r0, r0, r1
   15e8c:	popeq	{fp, pc}
   15e90:	movw	r0, #31551	; 0x7b3f
   15e94:	movt	r0, #1
   15e98:	movw	r1, #29482	; 0x732a
   15e9c:	movt	r1, #1
   15ea0:	movw	r3, #33271	; 0x81f7
   15ea4:	movt	r3, #1
   15ea8:	movw	r2, #1794	; 0x702
   15eac:	bl	12498 <__assert_fail@plt>

00015eb0 <flatcc_builder_table_add_copy@@Base>:
   15eb0:	push	{r4, r5, r6, sl, fp, lr}
   15eb4:	add	fp, sp, #16
   15eb8:	mov	r4, r3
   15ebc:	mov	r5, r2
   15ec0:	ldr	r3, [fp, #8]
   15ec4:	mov	r2, r4
   15ec8:	bl	155e8 <flatcc_builder_table_add@@Base>
   15ecc:	mov	r6, r0
   15ed0:	cmp	r0, #0
   15ed4:	beq	15ee8 <flatcc_builder_table_add_copy@@Base+0x38>
   15ed8:	mov	r0, r6
   15edc:	mov	r1, r5
   15ee0:	mov	r2, r4
   15ee4:	bl	123e4 <memcpy@plt>
   15ee8:	mov	r0, r6
   15eec:	pop	{r4, r5, r6, sl, fp, pc}
   15ef0:	push	{r4, r5, r6, r7, fp, lr}
   15ef4:	add	fp, sp, #16
   15ef8:	mov	r5, r1
   15efc:	mov	r4, r0
   15f00:	ldr	r0, [r0, #20]
   15f04:	ldr	r1, [r4, #24]
   15f08:	add	r0, r0, #3
   15f0c:	bic	r7, r0, #3
   15f10:	add	r6, r7, #4
   15f14:	str	r6, [r4, #20]
   15f18:	cmp	r6, r1
   15f1c:	bls	15f40 <flatcc_builder_table_add_copy@@Base+0x90>
   15f20:	mov	r0, r4
   15f24:	mov	r1, r6
   15f28:	movw	r2, #65532	; 0xfffc
   15f2c:	bl	16288 <flatcc_builder_get_emit_context@@Base+0x18>
   15f30:	mov	r1, r0
   15f34:	mov	r0, #0
   15f38:	cmp	r1, #0
   15f3c:	popne	{r4, r5, r6, r7, fp, pc}
   15f40:	ldr	r0, [r4, #4]
   15f44:	add	r0, r0, r5, lsl #1
   15f48:	strh	r6, [r0]
   15f4c:	ldrh	r0, [r4, #8]
   15f50:	cmp	r0, r5
   15f54:	addls	r0, r5, #1
   15f58:	strhls	r0, [r4, #8]
   15f5c:	ldr	r0, [r4]
   15f60:	add	r1, r0, #2
   15f64:	str	r1, [r4]
   15f68:	strh	r7, [r0]
   15f6c:	ldr	r0, [r4, #16]
   15f70:	add	r0, r0, r7
   15f74:	pop	{r4, r5, r6, r7, fp, pc}

00015f78 <flatcc_builder_push_buffer_alignment@@Base>:
   15f78:	ldrh	r1, [r0, #128]	; 0x80
   15f7c:	mov	r2, #4
   15f80:	strh	r2, [r0, #128]	; 0x80
   15f84:	mov	r0, r1
   15f88:	bx	lr

00015f8c <flatcc_builder_pop_buffer_alignment@@Base>:
   15f8c:	b	13a24 <flatcc_builder_create_buffer@@Base+0x1cc>

00015f90 <flatcc_builder_get_buffer_alignment@@Base>:
   15f90:	ldrh	r0, [r0, #128]	; 0x80
   15f94:	bx	lr

00015f98 <flatcc_builder_set_vtable_clustering@@Base>:
   15f98:	clz	r1, r1
   15f9c:	lsr	r1, r1, #5
   15fa0:	str	r1, [r0, #180]	; 0xb4
   15fa4:	bx	lr

00015fa8 <flatcc_builder_set_block_align@@Base>:
   15fa8:	strh	r1, [r0, #132]	; 0x84
   15fac:	bx	lr

00015fb0 <flatcc_builder_get_level@@Base>:
   15fb0:	ldr	r0, [r0, #156]	; 0x9c
   15fb4:	bx	lr

00015fb8 <flatcc_builder_set_max_level@@Base>:
   15fb8:	str	r1, [r0, #176]	; 0xb0
   15fbc:	ldr	r2, [r0, #160]	; 0xa0
   15fc0:	cmp	r2, r1
   15fc4:	strlt	r1, [r0, #160]	; 0xa0
   15fc8:	bx	lr

00015fcc <flatcc_builder_get_buffer_size@@Base>:
   15fcc:	ldr	r1, [r0, #136]	; 0x88
   15fd0:	ldr	r0, [r0, #140]	; 0x8c
   15fd4:	sub	r0, r0, r1
   15fd8:	bx	lr

00015fdc <flatcc_builder_get_buffer_start@@Base>:
   15fdc:	ldr	r0, [r0, #136]	; 0x88
   15fe0:	bx	lr

00015fe4 <flatcc_builder_get_buffer_end@@Base>:
   15fe4:	ldr	r0, [r0, #140]	; 0x8c
   15fe8:	bx	lr

00015fec <flatcc_builder_set_vtable_cache_limit@@Base>:
   15fec:	str	r1, [r0, #172]	; 0xac
   15ff0:	bx	lr

00015ff4 <flatcc_builder_set_identifier@@Base>:
   15ff4:	movw	r2, #28952	; 0x7118
   15ff8:	movt	r2, #1
   15ffc:	cmp	r1, #0
   16000:	movne	r2, r1
   16004:	ldr	r1, [r2]
   16008:	str	r1, [r0, #168]	; 0xa8
   1600c:	bx	lr

00016010 <flatcc_builder_get_type@@Base>:
   16010:	ldr	r0, [r0, #32]
   16014:	cmp	r0, #0
   16018:	ldrhne	r0, [r0, #14]
   1601c:	moveq	r0, #0
   16020:	bx	lr

00016024 <flatcc_builder_get_type_at@@Base>:
   16024:	mov	r2, r0
   16028:	mov	r0, #0
   1602c:	cmp	r1, #1
   16030:	blt	16054 <flatcc_builder_get_type_at@@Base+0x30>
   16034:	ldr	r3, [r2, #156]	; 0x9c
   16038:	cmp	r3, r1
   1603c:	bxlt	lr
   16040:	sub	r0, r1, r3
   16044:	add	r0, r0, r0, lsl #3
   16048:	ldr	r1, [r2, #32]
   1604c:	add	r0, r1, r0, lsl #2
   16050:	ldrh	r0, [r0, #14]
   16054:	bx	lr

00016058 <flatcc_builder_get_direct_buffer@@Base>:
   16058:	ldr	r2, [r0, #184]	; 0xb8
   1605c:	cmp	r2, #0
   16060:	beq	1606c <flatcc_builder_get_direct_buffer@@Base+0x14>
   16064:	add	r0, r0, #188	; 0xbc
   16068:	b	16080 <flatcc_builder_get_direct_buffer@@Base+0x28>
   1606c:	cmp	r1, #0
   16070:	movne	r0, #0
   16074:	strne	r0, [r1]
   16078:	mov	r0, #0
   1607c:	bx	lr
   16080:	ldm	r0, {r2, r3}
   16084:	cmp	r2, r3
   16088:	beq	1609c <flatcc_builder_get_direct_buffer@@Base+0x44>
   1608c:	mov	r0, #0
   16090:	cmp	r1, #0
   16094:	strne	r0, [r1]
   16098:	bx	lr
   1609c:	cmp	r1, #0
   160a0:	ldrne	r2, [r0, #24]
   160a4:	strne	r2, [r1]
   160a8:	ldr	r0, [r0, #8]
   160ac:	bx	lr

000160b0 <flatcc_builder_copy_buffer@@Base>:
   160b0:	push	{fp, lr}
   160b4:	mov	fp, sp
   160b8:	ldr	r3, [r0, #184]	; 0xb8
   160bc:	cmp	r3, #0
   160c0:	beq	160f4 <flatcc_builder_copy_buffer@@Base+0x44>
   160c4:	add	r0, r0, #188	; 0xbc
   160c8:	bl	167c0 <flatcc_emitter_copy_buffer@@Base>
   160cc:	cmp	r0, #0
   160d0:	popne	{fp, pc}
   160d4:	movw	r0, #27509	; 0x6b75
   160d8:	movt	r0, #1
   160dc:	movw	r1, #29482	; 0x732a
   160e0:	movt	r1, #1
   160e4:	movw	r3, #33410	; 0x8282
   160e8:	movt	r3, #1
   160ec:	movw	r2, #1926	; 0x786
   160f0:	bl	12498 <__assert_fail@plt>
   160f4:	mov	r0, #0
   160f8:	pop	{fp, pc}

000160fc <flatcc_builder_finalize_buffer@@Base>:
   160fc:	push	{r4, r5, r6, sl, fp, lr}
   16100:	add	fp, sp, #16
   16104:	mov	r6, r1
   16108:	mov	r4, r0
   1610c:	bl	15fcc <flatcc_builder_get_buffer_size@@Base>
   16110:	mov	r5, r0
   16114:	cmp	r6, #0
   16118:	strne	r5, [r6]
   1611c:	mov	r0, r5
   16120:	bl	12420 <malloc@plt>
   16124:	cmp	r0, #0
   16128:	beq	1616c <flatcc_builder_finalize_buffer@@Base+0x70>
   1612c:	mov	r6, r0
   16130:	mov	r0, r4
   16134:	mov	r1, r6
   16138:	mov	r2, r5
   1613c:	bl	160b0 <flatcc_builder_copy_buffer@@Base>
   16140:	cmp	r0, #0
   16144:	movne	r0, r6
   16148:	popne	{r4, r5, r6, sl, fp, pc}
   1614c:	movw	r0, #34000	; 0x84d0
   16150:	movt	r0, #1
   16154:	movw	r1, #29482	; 0x732a
   16158:	movt	r1, #1
   1615c:	movw	r3, #33479	; 0x82c7
   16160:	movt	r3, #1
   16164:	movw	r2, #1948	; 0x79c
   16168:	bl	12498 <__assert_fail@plt>
   1616c:	movw	r0, #34000	; 0x84d0
   16170:	movt	r0, #1
   16174:	movw	r1, #29482	; 0x732a
   16178:	movt	r1, #1
   1617c:	movw	r3, #33479	; 0x82c7
   16180:	movt	r3, #1
   16184:	movw	r2, #1944	; 0x798
   16188:	bl	12498 <__assert_fail@plt>

0001618c <flatcc_builder_finalize_aligned_buffer@@Base>:
   1618c:	push	{r4, r5, r6, r7, fp, lr}
   16190:	add	fp, sp, #16
   16194:	mov	r4, r1
   16198:	mov	r5, r0
   1619c:	bl	15fcc <flatcc_builder_get_buffer_size@@Base>
   161a0:	mov	r6, r0
   161a4:	cmp	r4, #0
   161a8:	strne	r6, [r4]
   161ac:	mov	r0, r5
   161b0:	bl	15f90 <flatcc_builder_get_buffer_alignment@@Base>
   161b4:	add	r1, r6, r0
   161b8:	sub	r1, r1, #1
   161bc:	rsb	r2, r0, #0
   161c0:	and	r7, r1, r2
   161c4:	mov	r1, r7
   161c8:	bl	16214 <flatcc_builder_finalize_aligned_buffer@@Base+0x88>
   161cc:	cmp	r0, #0
   161d0:	beq	16200 <flatcc_builder_finalize_aligned_buffer@@Base+0x74>
   161d4:	mov	r6, r0
   161d8:	mov	r0, r5
   161dc:	mov	r1, r6
   161e0:	mov	r2, r7
   161e4:	bl	160b0 <flatcc_builder_copy_buffer@@Base>
   161e8:	cmp	r0, #0
   161ec:	beq	161f8 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
   161f0:	mov	r0, r6
   161f4:	pop	{r4, r5, r6, r7, fp, pc}
   161f8:	mov	r0, r6
   161fc:	bl	123d8 <free@plt>
   16200:	mov	r6, #0
   16204:	cmp	r4, #0
   16208:	strne	r6, [r4]
   1620c:	mov	r0, r6
   16210:	pop	{r4, r5, r6, r7, fp, pc}
   16214:	push	{fp, lr}
   16218:	mov	fp, sp
   1621c:	sub	sp, sp, #8
   16220:	mov	r2, r1
   16224:	mov	r1, r0
   16228:	mov	r0, #0
   1622c:	str	r0, [sp, #4]
   16230:	cmp	r1, #4
   16234:	movls	r1, #4
   16238:	add	r0, sp, #4
   1623c:	bl	1245c <posix_memalign@plt>
   16240:	cmp	r0, #0
   16244:	ldrne	r0, [sp, #4]
   16248:	cmpne	r0, #0
   1624c:	beq	1625c <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   16250:	bl	123d8 <free@plt>
   16254:	mov	r0, #0
   16258:	str	r0, [sp, #4]
   1625c:	ldr	r0, [sp, #4]
   16260:	mov	sp, fp
   16264:	pop	{fp, pc}

00016268 <flatcc_builder_aligned_alloc@@Base>:
   16268:	b	16214 <flatcc_builder_finalize_aligned_buffer@@Base+0x88>

0001626c <flatcc_builder_aligned_free@@Base>:
   1626c:	b	123d8 <free@plt>

00016270 <flatcc_builder_get_emit_context@@Base>:
   16270:	ldr	r0, [r0, #36]	; 0x24
   16274:	bx	lr
   16278:	ldr	r0, [r0, #140]	; 0x8c
   1627c:	sub	r1, r1, #1
   16280:	and	r0, r0, r1
   16284:	bx	lr
   16288:	push	{r4, r5, r6, sl, fp, lr}
   1628c:	add	fp, sp, #16
   16290:	sub	sp, sp, #8
   16294:	mov	r6, r2
   16298:	mov	r5, r0
   1629c:	ldr	r2, [r0, #28]
   162a0:	ldr	r0, [r0, #40]	; 0x28
   162a4:	ldr	r4, [r5, #48]	; 0x30
   162a8:	mov	r3, #1
   162ac:	str	r3, [sp]
   162b0:	add	r2, r2, r1
   162b4:	add	r1, r5, #60	; 0x3c
   162b8:	mov	r3, #1
   162bc:	blx	r4
   162c0:	mov	r1, r0
   162c4:	mvn	r0, #0
   162c8:	cmp	r1, #0
   162cc:	beq	162d8 <flatcc_builder_get_emit_context@@Base+0x68>
   162d0:	sub	sp, fp, #16
   162d4:	pop	{r4, r5, r6, sl, fp, pc}
   162d8:	mov	r0, r5
   162dc:	mov	r1, r6
   162e0:	bl	13e34 <flatcc_builder_start_struct@@Base+0x4c>
   162e4:	mov	r0, #0
   162e8:	sub	sp, fp, #16
   162ec:	pop	{r4, r5, r6, sl, fp, pc}
   162f0:	push	{r4, r5, r6, sl, fp, lr}
   162f4:	add	fp, sp, #16
   162f8:	sub	sp, sp, #8
   162fc:	mov	r4, r0
   16300:	ldr	r0, [r0, #124]	; 0x7c
   16304:	cmp	r0, #0
   16308:	bne	163a8 <flatcc_builder_get_emit_context@@Base+0x138>
   1630c:	mov	r0, #0
   16310:	str	r0, [sp]
   16314:	mov	r6, #16
   16318:	mov	r0, r4
   1631c:	mov	r1, #6
   16320:	mov	r2, #0
   16324:	mov	r3, #16
   16328:	bl	13450 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   1632c:	mvn	r5, #0
   16330:	cmp	r0, #0
   16334:	beq	1639c <flatcc_builder_get_emit_context@@Base+0x12c>
   16338:	add	r1, r4, #92	; 0x5c
   1633c:	str	r6, [r4, #124]	; 0x7c
   16340:	ldr	r0, [r4, #40]	; 0x28
   16344:	ldr	ip, [r4, #48]	; 0x30
   16348:	mov	r2, #5
   1634c:	str	r2, [sp]
   16350:	mov	r6, #256	; 0x100
   16354:	mov	r2, #256	; 0x100
   16358:	mov	r3, #1
   1635c:	blx	ip
   16360:	cmp	r0, #0
   16364:	bne	1639c <flatcc_builder_get_emit_context@@Base+0x12c>
   16368:	ldr	r0, [r4, #96]	; 0x60
   1636c:	mov	r1, r6
   16370:	lsl	r6, r6, #1
   16374:	cmp	r0, r1, lsl #1
   16378:	bcs	1636c <flatcc_builder_get_emit_context@@Base+0xfc>
   1637c:	lsr	r1, r1, #2
   16380:	mvn	r0, #0
   16384:	mov	r2, #1
   16388:	add	r0, r0, #1
   1638c:	cmp	r1, r2, lsl r0
   16390:	bhi	16388 <flatcc_builder_get_emit_context@@Base+0x118>
   16394:	str	r0, [r4, #116]	; 0x74
   16398:	mov	r5, #0
   1639c:	mov	r0, r5
   163a0:	sub	sp, fp, #16
   163a4:	pop	{r4, r5, r6, sl, fp, pc}
   163a8:	movw	r0, #33940	; 0x8494
   163ac:	movt	r0, #1
   163b0:	movw	r1, #29482	; 0x732a
   163b4:	movt	r1, #1
   163b8:	movw	r3, #33955	; 0x84a3
   163bc:	movt	r3, #1
   163c0:	movw	r2, #342	; 0x156
   163c4:	bl	12498 <__assert_fail@plt>

000163c8 <flatcc_emitter_recycle_page@@Base>:
   163c8:	ldr	ip, [r0]
   163cc:	mvn	r2, #0
   163d0:	cmp	ip, r1
   163d4:	beq	1641c <flatcc_emitter_recycle_page@@Base+0x54>
   163d8:	ldr	r3, [r0, #4]
   163dc:	cmp	r3, r1
   163e0:	beq	1641c <flatcc_emitter_recycle_page@@Base+0x54>
   163e4:	ldr	r2, [r1, #2944]	; 0xb80
   163e8:	ldr	r3, [r1, #2948]	; 0xb84
   163ec:	str	r3, [r2, #2948]	; 0xb84
   163f0:	ldr	r2, [r1, #2944]	; 0xb80
   163f4:	ldr	r3, [r1, #2948]	; 0xb84
   163f8:	str	r2, [r3, #2944]	; 0xb80
   163fc:	ldr	r2, [ip, #2948]	; 0xb84
   16400:	str	r2, [r1, #2948]	; 0xb84
   16404:	ldr	r0, [r0]
   16408:	str	r0, [r1, #2944]	; 0xb80
   1640c:	str	r1, [r2, #2944]	; 0xb80
   16410:	ldr	r0, [r1, #2944]	; 0xb80
   16414:	str	r1, [r0, #2948]	; 0xb84
   16418:	mov	r2, #0
   1641c:	mov	r0, r2
   16420:	bx	lr

00016424 <flatcc_emitter_reset@@Base>:
   16424:	push	{r4, sl, fp, lr}
   16428:	add	fp, sp, #8
   1642c:	mov	r4, r0
   16430:	ldr	r0, [r0]
   16434:	cmp	r0, #0
   16438:	beq	164e0 <flatcc_emitter_reset@@Base+0xbc>
   1643c:	mov	r1, #1472	; 0x5c0
   16440:	add	r2, r0, #1472	; 0x5c0
   16444:	stmib	r4, {r0, r2}
   16448:	str	r1, [r4, #12]
   1644c:	str	r2, [r4, #16]
   16450:	str	r1, [r4, #20]
   16454:	movw	r1, #64064	; 0xfa40
   16458:	movt	r1, #65535	; 0xffff
   1645c:	str	r1, [r0, #2952]	; 0xb88
   16460:	ldr	r0, [r4, #32]
   16464:	cmp	r0, #0
   16468:	bne	16474 <flatcc_emitter_reset@@Base+0x50>
   1646c:	ldr	r0, [r4, #24]
   16470:	str	r0, [r4, #32]
   16474:	add	r2, r4, #24
   16478:	ldm	r2, {r0, r1, r2}
   1647c:	mov	r3, #0
   16480:	str	r3, [r4, #24]
   16484:	add	r2, r2, r2, lsl #1
   16488:	lsr	r2, r2, #2
   1648c:	add	r0, r2, r0, lsr #2
   16490:	str	r0, [r4, #32]
   16494:	cmp	r1, r0, lsl #1
   16498:	popls	{r4, sl, fp, pc}
   1649c:	ldr	r2, [r4]
   164a0:	ldr	r1, [r4, #4]
   164a4:	ldr	r0, [r1, #2944]	; 0xb80
   164a8:	cmp	r0, r2
   164ac:	beq	164e0 <flatcc_emitter_reset@@Base+0xbc>
   164b0:	ldr	r2, [r0, #2944]	; 0xb80
   164b4:	str	r2, [r1, #2944]	; 0xb80
   164b8:	ldr	r1, [r0, #2944]	; 0xb80
   164bc:	ldr	r2, [r4, #4]
   164c0:	str	r2, [r1, #2948]	; 0xb84
   164c4:	bl	123d8 <free@plt>
   164c8:	ldr	r0, [r4, #28]
   164cc:	ldr	r1, [r4, #32]
   164d0:	sub	r0, r0, #2944	; 0xb80
   164d4:	str	r0, [r4, #28]
   164d8:	cmp	r0, r1, lsl #1
   164dc:	bhi	1649c <flatcc_emitter_reset@@Base+0x78>
   164e0:	pop	{r4, sl, fp, pc}

000164e4 <flatcc_emitter_clear@@Base>:
   164e4:	push	{r4, r5, r6, sl, fp, lr}
   164e8:	add	fp, sp, #16
   164ec:	ldr	r5, [r0]
   164f0:	cmp	r5, #0
   164f4:	beq	16544 <flatcc_emitter_clear@@Base+0x60>
   164f8:	mov	r4, r0
   164fc:	ldr	r0, [r5, #2948]	; 0xb84
   16500:	mov	r6, #0
   16504:	str	r6, [r0, #2944]	; 0xb80
   16508:	ldr	r0, [r5, #2944]	; 0xb80
   1650c:	cmp	r0, #0
   16510:	beq	16524 <flatcc_emitter_clear@@Base+0x40>
   16514:	mov	r5, r0
   16518:	ldr	r0, [r0, #2948]	; 0xb84
   1651c:	bl	123d8 <free@plt>
   16520:	b	16508 <flatcc_emitter_clear@@Base+0x24>
   16524:	mov	r0, r5
   16528:	bl	123d8 <free@plt>
   1652c:	vmov.i32	q8, #0	; 0x00000000
   16530:	add	r0, r4, #16
   16534:	vst1.32	{d16-d17}, [r0]
   16538:	mov	r0, #32
   1653c:	vst1.32	{d16-d17}, [r4], r0
   16540:	str	r6, [r4]
   16544:	pop	{r4, r5, r6, sl, fp, pc}

00016548 <flatcc_emitter@@Base>:
   16548:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1654c:	add	fp, sp, #24
   16550:	mov	r4, r2
   16554:	mov	r5, r1
   16558:	mov	r6, r0
   1655c:	ldr	r1, [r0, #24]
   16560:	ldr	r0, [fp, #8]
   16564:	add	r1, r1, r0
   16568:	str	r1, [r6, #24]
   1656c:	mov	r1, r6
   16570:	cmn	r3, #1
   16574:	ble	165b4 <flatcc_emitter@@Base+0x6c>
   16578:	ldr	r2, [r1, #20]!
   1657c:	cmp	r2, r0
   16580:	bcs	165fc <flatcc_emitter@@Base+0xb4>
   16584:	mov	r8, #0
   16588:	cmp	r4, #0
   1658c:	beq	1664c <flatcc_emitter@@Base+0x104>
   16590:	ldm	r5, {r1, r2}
   16594:	mov	r0, r6
   16598:	bl	16710 <flatcc_emitter@@Base+0x1c8>
   1659c:	cmp	r0, #0
   165a0:	bne	165f0 <flatcc_emitter@@Base+0xa8>
   165a4:	subs	r4, r4, #1
   165a8:	add	r5, r5, #8
   165ac:	bne	16590 <flatcc_emitter@@Base+0x48>
   165b0:	b	1664c <flatcc_emitter@@Base+0x104>
   165b4:	ldr	r2, [r1, #12]!
   165b8:	cmp	r2, r0
   165bc:	bcs	1660c <flatcc_emitter@@Base+0xc4>
   165c0:	add	r0, r5, r4, lsl #3
   165c4:	sub	r5, r0, #4
   165c8:	rsb	r4, r4, #1
   165cc:	cmp	r4, #1
   165d0:	beq	16654 <flatcc_emitter@@Base+0x10c>
   165d4:	ldmda	r5, {r1, r2}
   165d8:	mov	r0, r6
   165dc:	bl	16660 <flatcc_emitter@@Base+0x118>
   165e0:	sub	r5, r5, #8
   165e4:	add	r4, r4, #1
   165e8:	cmp	r0, #0
   165ec:	beq	165cc <flatcc_emitter@@Base+0x84>
   165f0:	mvn	r8, #0
   165f4:	mov	r0, r8
   165f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   165fc:	ldr	r7, [r6, #16]
   16600:	add	r3, r7, r0
   16604:	str	r3, [r6, #16]
   16608:	b	16618 <flatcc_emitter@@Base+0xd0>
   1660c:	ldr	r3, [r6, #8]
   16610:	sub	r7, r3, r0
   16614:	str	r7, [r6, #8]
   16618:	sub	r0, r2, r0
   1661c:	str	r0, [r1]
   16620:	mov	r8, #0
   16624:	cmp	r4, #0
   16628:	beq	1664c <flatcc_emitter@@Base+0x104>
   1662c:	ldm	r5, {r1, r2}
   16630:	mov	r0, r7
   16634:	bl	123e4 <memcpy@plt>
   16638:	ldr	r0, [r5, #4]
   1663c:	add	r7, r7, r0
   16640:	add	r5, r5, #8
   16644:	subs	r4, r4, #1
   16648:	bne	1662c <flatcc_emitter@@Base+0xe4>
   1664c:	mov	r0, r8
   16650:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16654:	mov	r8, #0
   16658:	mov	r0, r8
   1665c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16660:	push	{r4, r5, r6, r7, fp, lr}
   16664:	add	fp, sp, #16
   16668:	cmp	r2, #0
   1666c:	beq	166fc <flatcc_emitter@@Base+0x1b4>
   16670:	mov	r4, r2
   16674:	mov	r5, r0
   16678:	clz	r0, r2
   1667c:	lsr	r7, r0, #5
   16680:	add	r6, r1, r2
   16684:	ldr	r0, [r5, #12]
   16688:	cmp	r4, r0
   1668c:	bls	166bc <flatcc_emitter@@Base+0x174>
   16690:	cmp	r0, #0
   16694:	bne	166c4 <flatcc_emitter@@Base+0x17c>
   16698:	mov	r0, r5
   1669c:	bl	1687c <flatcc_emitter_copy_buffer@@Base+0xbc>
   166a0:	cmp	r0, #0
   166a4:	mov	r1, r0
   166a8:	movwne	r1, #1
   166ac:	orr	r1, r1, r7
   166b0:	tst	r1, #1
   166b4:	beq	16684 <flatcc_emitter@@Base+0x13c>
   166b8:	b	16704 <flatcc_emitter@@Base+0x1bc>
   166bc:	mov	r7, r4
   166c0:	b	166c8 <flatcc_emitter@@Base+0x180>
   166c4:	mov	r7, r0
   166c8:	sub	r0, r0, r7
   166cc:	str	r0, [r5, #12]
   166d0:	ldr	r0, [r5, #8]
   166d4:	sub	r0, r0, r7
   166d8:	str	r0, [r5, #8]
   166dc:	sub	r6, r6, r7
   166e0:	mov	r1, r6
   166e4:	mov	r2, r7
   166e8:	bl	123e4 <memcpy@plt>
   166ec:	subs	r4, r4, r7
   166f0:	clz	r0, r4
   166f4:	lsr	r7, r0, #5
   166f8:	bne	16684 <flatcc_emitter@@Base+0x13c>
   166fc:	mov	r0, #0
   16700:	pop	{r4, r5, r6, r7, fp, pc}
   16704:	cmp	r0, #0
   16708:	mvnne	r0, #0
   1670c:	pop	{r4, r5, r6, r7, fp, pc}
   16710:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16714:	add	fp, sp, #24
   16718:	cmp	r2, #0
   1671c:	beq	167ac <flatcc_emitter@@Base+0x264>
   16720:	mov	r4, r2
   16724:	mov	r8, r1
   16728:	mov	r6, r0
   1672c:	clz	r0, r2
   16730:	lsr	r5, r0, #5
   16734:	ldr	r7, [r6, #20]
   16738:	cmp	r4, r7
   1673c:	bls	1676c <flatcc_emitter@@Base+0x224>
   16740:	cmp	r7, #0
   16744:	bne	16770 <flatcc_emitter@@Base+0x228>
   16748:	mov	r0, r6
   1674c:	bl	1696c <flatcc_emitter_copy_buffer@@Base+0x1ac>
   16750:	cmp	r0, #0
   16754:	mov	r1, r0
   16758:	movwne	r1, #1
   1675c:	orr	r1, r1, r5
   16760:	tst	r1, #1
   16764:	beq	16734 <flatcc_emitter@@Base+0x1ec>
   16768:	b	167b4 <flatcc_emitter@@Base+0x26c>
   1676c:	mov	r7, r4
   16770:	ldr	r0, [r6, #16]
   16774:	mov	r1, r8
   16778:	mov	r2, r7
   1677c:	bl	123e4 <memcpy@plt>
   16780:	ldr	r0, [r6, #16]
   16784:	ldr	r1, [r6, #20]
   16788:	add	r0, r0, r7
   1678c:	sub	r1, r1, r7
   16790:	str	r0, [r6, #16]
   16794:	str	r1, [r6, #20]
   16798:	add	r8, r8, r7
   1679c:	subs	r4, r4, r7
   167a0:	clz	r0, r4
   167a4:	lsr	r5, r0, #5
   167a8:	bne	16734 <flatcc_emitter@@Base+0x1ec>
   167ac:	mov	r0, #0
   167b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   167b4:	cmp	r0, #0
   167b8:	mvnne	r0, #0
   167bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000167c0 <flatcc_emitter_copy_buffer@@Base>:
   167c0:	push	{r4, r5, r6, sl, fp, lr}
   167c4:	add	fp, sp, #16
   167c8:	mov	r3, r2
   167cc:	ldr	r2, [r0, #24]
   167d0:	mov	r5, #0
   167d4:	cmp	r2, r3
   167d8:	bhi	16860 <flatcc_emitter_copy_buffer@@Base+0xa0>
   167dc:	mov	r4, r0
   167e0:	ldr	r0, [r0]
   167e4:	cmp	r0, #0
   167e8:	beq	16860 <flatcc_emitter_copy_buffer@@Base+0xa0>
   167ec:	mov	r6, r1
   167f0:	ldr	r1, [r4, #4]
   167f4:	cmp	r0, r1
   167f8:	beq	16868 <flatcc_emitter_copy_buffer@@Base+0xa8>
   167fc:	ldr	r1, [r4, #8]
   16800:	ldr	r0, [r4, #12]
   16804:	rsb	r5, r0, #2944	; 0xb80
   16808:	mov	r0, r6
   1680c:	mov	r2, r5
   16810:	bl	123e4 <memcpy@plt>
   16814:	add	r5, r6, r5
   16818:	ldm	r4, {r0, r1}
   1681c:	ldr	r6, [r0, #2944]	; 0xb80
   16820:	cmp	r6, r1
   16824:	beq	1684c <flatcc_emitter_copy_buffer@@Base+0x8c>
   16828:	mov	r0, r5
   1682c:	mov	r1, r6
   16830:	mov	r2, #2944	; 0xb80
   16834:	bl	123e4 <memcpy@plt>
   16838:	add	r5, r5, #2944	; 0xb80
   1683c:	ldr	r6, [r6, #2944]	; 0xb80
   16840:	ldr	r0, [r4, #4]
   16844:	cmp	r6, r0
   16848:	bne	16828 <flatcc_emitter_copy_buffer@@Base+0x68>
   1684c:	ldr	r0, [r4, #20]
   16850:	rsb	r2, r0, #2944	; 0xb80
   16854:	mov	r0, r5
   16858:	mov	r1, r6
   1685c:	bl	123e4 <memcpy@plt>
   16860:	mov	r0, r5
   16864:	pop	{r4, r5, r6, sl, fp, pc}
   16868:	ldr	r1, [r4, #8]
   1686c:	mov	r0, r6
   16870:	bl	123e4 <memcpy@plt>
   16874:	mov	r0, r6
   16878:	pop	{r4, r5, r6, sl, fp, pc}
   1687c:	push	{r4, r5, fp, lr}
   16880:	add	fp, sp, #8
   16884:	mov	r4, r0
   16888:	ldr	r5, [r0]
   1688c:	cmp	r5, #0
   16890:	beq	168b8 <flatcc_emitter_copy_buffer@@Base+0xf8>
   16894:	ldr	r0, [r5, #2948]	; 0xb84
   16898:	ldr	r1, [r4, #4]
   1689c:	cmp	r0, r1
   168a0:	beq	168b8 <flatcc_emitter_copy_buffer@@Base+0xf8>
   168a4:	ldr	r1, [r5, #2952]	; 0xb88
   168a8:	sub	r1, r1, #2944	; 0xb80
   168ac:	str	r1, [r0, #2952]	; 0xb88
   168b0:	ldr	r0, [r5, #2948]	; 0xb84
   168b4:	b	168f4 <flatcc_emitter_copy_buffer@@Base+0x134>
   168b8:	movw	r0, #2956	; 0xb8c
   168bc:	bl	12420 <malloc@plt>
   168c0:	cmp	r0, #0
   168c4:	beq	16924 <flatcc_emitter_copy_buffer@@Base+0x164>
   168c8:	ldr	r1, [r4, #28]
   168cc:	add	r1, r1, #2944	; 0xb80
   168d0:	str	r1, [r4, #28]
   168d4:	cmp	r5, #0
   168d8:	beq	1692c <flatcc_emitter_copy_buffer@@Base+0x16c>
   168dc:	ldm	r4, {r1, r2}
   168e0:	str	r1, [r0, #2944]	; 0xb80
   168e4:	str	r2, [r0, #2948]	; 0xb84
   168e8:	str	r0, [r1, #2948]	; 0xb84
   168ec:	ldr	r1, [r4, #4]
   168f0:	str	r0, [r1, #2944]	; 0xb80
   168f4:	str	r0, [r4]
   168f8:	mov	r0, #2944	; 0xb80
   168fc:	ldr	r1, [r4]
   16900:	add	r2, r1, #2944	; 0xb80
   16904:	str	r2, [r4, #8]
   16908:	str	r0, [r4, #12]
   1690c:	ldr	r0, [r1, #2944]	; 0xb80
   16910:	ldr	r0, [r0, #2952]	; 0xb88
   16914:	sub	r0, r0, #2944	; 0xb80
   16918:	str	r0, [r1, #2952]	; 0xb88
   1691c:	mov	r0, #0
   16920:	pop	{r4, r5, fp, pc}
   16924:	mvn	r0, #0
   16928:	pop	{r4, r5, fp, pc}
   1692c:	str	r0, [r4, #4]
   16930:	str	r0, [r4]
   16934:	mov	r1, #1472	; 0x5c0
   16938:	str	r1, [r4, #20]
   1693c:	str	r1, [r4, #12]
   16940:	ldr	r1, [r4]
   16944:	add	r1, r1, #1472	; 0x5c0
   16948:	str	r1, [r4, #16]
   1694c:	str	r1, [r4, #8]
   16950:	movw	r1, #64064	; 0xfa40
   16954:	movt	r1, #65535	; 0xffff
   16958:	str	r0, [r0, #2944]	; 0xb80
   1695c:	str	r0, [r0, #2948]	; 0xb84
   16960:	str	r1, [r0, #2952]	; 0xb88
   16964:	mov	r0, #0
   16968:	pop	{r4, r5, fp, pc}
   1696c:	push	{r4, r5, fp, lr}
   16970:	add	fp, sp, #8
   16974:	mov	r4, r0
   16978:	ldr	r5, [r0, #4]
   1697c:	cmp	r5, #0
   16980:	beq	16994 <flatcc_emitter_copy_buffer@@Base+0x1d4>
   16984:	ldr	r0, [r5, #2944]	; 0xb80
   16988:	ldr	r1, [r4]
   1698c:	cmp	r0, r1
   16990:	bne	169cc <flatcc_emitter_copy_buffer@@Base+0x20c>
   16994:	movw	r0, #2956	; 0xb8c
   16998:	bl	12420 <malloc@plt>
   1699c:	cmp	r0, #0
   169a0:	beq	169f8 <flatcc_emitter_copy_buffer@@Base+0x238>
   169a4:	ldr	r1, [r4, #28]
   169a8:	add	r1, r1, #2944	; 0xb80
   169ac:	str	r1, [r4, #28]
   169b0:	cmp	r5, #0
   169b4:	beq	16a00 <flatcc_emitter_copy_buffer@@Base+0x240>
   169b8:	ldr	r1, [r4]
   169bc:	str	r1, [r0, #2944]	; 0xb80
   169c0:	str	r5, [r0, #2948]	; 0xb84
   169c4:	str	r0, [r1, #2948]	; 0xb84
   169c8:	str	r0, [r5, #2944]	; 0xb80
   169cc:	str	r0, [r4, #4]
   169d0:	mov	r0, #2944	; 0xb80
   169d4:	ldr	r1, [r4, #4]
   169d8:	str	r1, [r4, #16]
   169dc:	str	r0, [r4, #20]
   169e0:	ldr	r0, [r1, #2948]	; 0xb84
   169e4:	ldr	r0, [r0, #2952]	; 0xb88
   169e8:	add	r0, r0, #2944	; 0xb80
   169ec:	str	r0, [r1, #2952]	; 0xb88
   169f0:	mov	r0, #0
   169f4:	pop	{r4, r5, fp, pc}
   169f8:	mvn	r0, #0
   169fc:	pop	{r4, r5, fp, pc}
   16a00:	str	r0, [r4, #4]
   16a04:	str	r0, [r4]
   16a08:	mov	r1, #1472	; 0x5c0
   16a0c:	str	r1, [r4, #20]
   16a10:	str	r1, [r4, #12]
   16a14:	ldr	r1, [r4]
   16a18:	add	r1, r1, #1472	; 0x5c0
   16a1c:	str	r1, [r4, #16]
   16a20:	str	r1, [r4, #8]
   16a24:	movw	r1, #64064	; 0xfa40
   16a28:	movt	r1, #65535	; 0xffff
   16a2c:	str	r0, [r0, #2944]	; 0xb80
   16a30:	str	r0, [r0, #2948]	; 0xb84
   16a34:	str	r1, [r0, #2952]	; 0xb88
   16a38:	mov	r0, #0
   16a3c:	pop	{r4, r5, fp, pc}

00016a40 <__libc_csu_init@@Base>:
   16a40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16a44:	mov	r7, r0
   16a48:	ldr	r6, [pc, #72]	; 16a98 <__libc_csu_init@@Base+0x58>
   16a4c:	ldr	r5, [pc, #72]	; 16a9c <__libc_csu_init@@Base+0x5c>
   16a50:	add	r6, pc, r6
   16a54:	add	r5, pc, r5
   16a58:	sub	r6, r6, r5
   16a5c:	mov	r8, r1
   16a60:	mov	r9, r2
   16a64:	bl	12394 <strcmp@plt-0x20>
   16a68:	asrs	r6, r6, #2
   16a6c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16a70:	mov	r4, #0
   16a74:	add	r4, r4, #1
   16a78:	ldr	r3, [r5], #4
   16a7c:	mov	r2, r9
   16a80:	mov	r1, r8
   16a84:	mov	r0, r7
   16a88:	blx	r3
   16a8c:	cmp	r6, r4
   16a90:	bne	16a74 <__libc_csu_init@@Base+0x34>
   16a94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16a98:			; <UNDEFINED> instruction: 0x000124b4
   16a9c:	andeq	r2, r1, ip, lsr #9

00016aa0 <__libc_csu_fini@@Base>:
   16aa0:	bx	lr

Disassembly of section .fini:

00016aa4 <.fini>:
   16aa4:	push	{r3, lr}
   16aa8:	pop	{r3, pc}
