
../repos/prog2/9:     file format elf32-littlearm


Disassembly of section .init:

000109a0 <.init>:
   109a0:	push	{r3, lr}
   109a4:	bl	10d30 <_start@@Base+0x3c>
   109a8:	pop	{r3, pc}

Disassembly of section .plt:

000109ac <calloc@plt-0x14>:
   109ac:	push	{lr}		; (str lr, [sp, #-4]!)
   109b0:	ldr	lr, [pc, #4]	; 109bc <calloc@plt-0x4>
   109b4:	add	lr, pc, lr
   109b8:	ldr	pc, [lr, #8]!
   109bc:	andeq	r1, r1, r4, asr #12

000109c0 <calloc@plt>:
   109c0:	add	ip, pc, #0, 12
   109c4:	add	ip, ip, #69632	; 0x11000
   109c8:	ldr	pc, [ip, #1604]!	; 0x644

000109cc <strcmp@plt>:
   109cc:	add	ip, pc, #0, 12
   109d0:	add	ip, ip, #69632	; 0x11000
   109d4:	ldr	pc, [ip, #1596]!	; 0x63c

000109d8 <printf@plt>:
   109d8:	add	ip, pc, #0, 12
   109dc:	add	ip, ip, #69632	; 0x11000
   109e0:	ldr	pc, [ip, #1588]!	; 0x634

000109e4 <__isoc99_fscanf@plt>:
   109e4:	add	ip, pc, #0, 12
   109e8:	add	ip, ip, #69632	; 0x11000
   109ec:	ldr	pc, [ip, #1580]!	; 0x62c

000109f0 <fopen@plt>:
   109f0:	add	ip, pc, #0, 12
   109f4:	add	ip, ip, #69632	; 0x11000
   109f8:	ldr	pc, [ip, #1572]!	; 0x624

000109fc <fflush@plt>:
   109fc:	add	ip, pc, #0, 12
   10a00:	add	ip, ip, #69632	; 0x11000
   10a04:	ldr	pc, [ip, #1564]!	; 0x61c

00010a08 <free@plt>:
   10a08:	add	ip, pc, #0, 12
   10a0c:	add	ip, ip, #69632	; 0x11000
   10a10:	ldr	pc, [ip, #1556]!	; 0x614

00010a14 <fgets@plt>:
   10a14:	add	ip, pc, #0, 12
   10a18:	add	ip, ip, #69632	; 0x11000
   10a1c:	ldr	pc, [ip, #1548]!	; 0x60c

00010a20 <strdup@plt>:
   10a20:	add	ip, pc, #0, 12
   10a24:	add	ip, ip, #69632	; 0x11000
   10a28:	ldr	pc, [ip, #1540]!	; 0x604

00010a2c <puts@plt>:
   10a2c:	add	ip, pc, #0, 12
   10a30:	add	ip, ip, #69632	; 0x11000
   10a34:	ldr	pc, [ip, #1532]!	; 0x5fc

00010a38 <malloc@plt>:
   10a38:	add	ip, pc, #0, 12
   10a3c:	add	ip, ip, #69632	; 0x11000
   10a40:	ldr	pc, [ip, #1524]!	; 0x5f4

00010a44 <__libc_start_main@plt>:
   10a44:	add	ip, pc, #0, 12
   10a48:	add	ip, ip, #69632	; 0x11000
   10a4c:	ldr	pc, [ip, #1516]!	; 0x5ec

00010a50 <__gmon_start__@plt>:
   10a50:	add	ip, pc, #0, 12
   10a54:	add	ip, ip, #69632	; 0x11000
   10a58:	ldr	pc, [ip, #1508]!	; 0x5e4

00010a5c <feof@plt>:
   10a5c:	add	ip, pc, #0, 12
   10a60:	add	ip, ip, #69632	; 0x11000
   10a64:	ldr	pc, [ip, #1500]!	; 0x5dc

00010a68 <strlen@plt>:
   10a68:	add	ip, pc, #0, 12
   10a6c:	add	ip, ip, #69632	; 0x11000
   10a70:	ldr	pc, [ip, #1492]!	; 0x5d4

00010a74 <putchar@plt>:
   10a74:	add	ip, pc, #0, 12
   10a78:	add	ip, ip, #69632	; 0x11000
   10a7c:	ldr	pc, [ip, #1484]!	; 0x5cc

00010a80 <fclose@plt>:
   10a80:	add	ip, pc, #0, 12
   10a84:	add	ip, ip, #69632	; 0x11000
   10a88:	ldr	pc, [ip, #1476]!	; 0x5c4

00010a8c <abort@plt>:
   10a8c:	add	ip, pc, #0, 12
   10a90:	add	ip, ip, #69632	; 0x11000
   10a94:	ldr	pc, [ip, #1468]!	; 0x5bc

Disassembly of section .text:

00010a98 <main@@Base>:
   10a98:	push	{r4, r5, r6, r7, r8, lr}
   10a9c:	mov	r0, #42	; 0x2a
   10aa0:	ldr	r4, [pc, #508]	; 10ca4 <main@@Base+0x20c>
   10aa4:	bl	110e0 <vetor_cria@@Base>
   10aa8:	mov	r5, r0
   10aac:	ldr	r0, [pc, #500]	; 10ca8 <main@@Base+0x210>
   10ab0:	bl	10a2c <puts@plt>
   10ab4:	ldr	r1, [pc, #496]	; 10cac <main@@Base+0x214>
   10ab8:	mov	r0, r5
   10abc:	bl	10ef0 <fp_carrega@@Base>
   10ac0:	ldr	r0, [pc, #488]	; 10cb0 <main@@Base+0x218>
   10ac4:	ldr	r1, [r4]
   10ac8:	bl	109d8 <printf@plt>
   10acc:	mov	r0, r5
   10ad0:	bl	11280 <vetor_imprime@@Base>
   10ad4:	ldr	r6, [r5]
   10ad8:	cmp	r6, #42	; 0x2a
   10adc:	ldrne	r0, [pc, #464]	; 10cb4 <main@@Base+0x21c>
   10ae0:	bne	10b04 <main@@Base+0x6c>
   10ae4:	mov	r0, r5
   10ae8:	bl	10e88 <fp_remove@@Base>
   10aec:	mov	r1, r0
   10af0:	ldr	r0, [pc, #448]	; 10cb8 <main@@Base+0x220>
   10af4:	bl	109cc <strcmp@plt>
   10af8:	subs	r7, r0, #0
   10afc:	beq	10b14 <main@@Base+0x7c>
   10b00:	ldr	r0, [pc, #436]	; 10cbc <main@@Base+0x224>
   10b04:	mov	r5, #1
   10b08:	bl	10a2c <puts@plt>
   10b0c:	mov	r0, r5
   10b10:	pop	{r4, r5, r6, r7, r8, pc}
   10b14:	mov	r0, r5
   10b18:	str	r7, [r4]
   10b1c:	bl	10e88 <fp_remove@@Base>
   10b20:	ldr	r0, [pc, #408]	; 10cc0 <main@@Base+0x228>
   10b24:	ldr	r1, [r4]
   10b28:	bl	109d8 <printf@plt>
   10b2c:	mov	r2, #99	; 0x63
   10b30:	ldr	r1, [pc, #396]	; 10cc4 <main@@Base+0x22c>
   10b34:	mov	r0, r5
   10b38:	str	r7, [r4]
   10b3c:	bl	10de4 <fp_insere@@Base>
   10b40:	ldr	r0, [pc, #384]	; 10cc8 <main@@Base+0x230>
   10b44:	ldr	r1, [r4]
   10b48:	bl	109d8 <printf@plt>
   10b4c:	mov	r0, r5
   10b50:	bl	10e88 <fp_remove@@Base>
   10b54:	mov	r2, r7
   10b58:	ldr	r1, [pc, #356]	; 10cc4 <main@@Base+0x22c>
   10b5c:	mov	r0, r5
   10b60:	str	r7, [r4]
   10b64:	bl	10de4 <fp_insere@@Base>
   10b68:	ldr	r0, [pc, #348]	; 10ccc <main@@Base+0x234>
   10b6c:	ldr	r1, [r4]
   10b70:	bl	109d8 <printf@plt>
   10b74:	mov	r0, r5
   10b78:	bl	10e88 <fp_remove@@Base>
   10b7c:	mov	r2, r6
   10b80:	ldr	r1, [pc, #316]	; 10cc4 <main@@Base+0x22c>
   10b84:	mov	r0, r5
   10b88:	str	r7, [r4]
   10b8c:	bl	10de4 <fp_insere@@Base>
   10b90:	ldr	r0, [pc, #312]	; 10cd0 <main@@Base+0x238>
   10b94:	ldr	r1, [r4]
   10b98:	bl	109d8 <printf@plt>
   10b9c:	ldr	r0, [pc, #304]	; 10cd4 <main@@Base+0x23c>
   10ba0:	bl	10a2c <puts@plt>
   10ba4:	mov	r0, r6
   10ba8:	bl	11130 <vetor_criaHeap@@Base>
   10bac:	ldr	r2, [pc, #248]	; 10cac <main@@Base+0x214>
   10bb0:	mov	r8, r0
   10bb4:	ldr	r1, [pc, #284]	; 10cd8 <main@@Base+0x240>
   10bb8:	bl	11038 <heap_carrega@@Base>
   10bbc:	ldr	r0, [pc, #280]	; 10cdc <main@@Base+0x244>
   10bc0:	ldr	r1, [r4]
   10bc4:	bl	109d8 <printf@plt>
   10bc8:	mov	r0, r8
   10bcc:	bl	11300 <vetor_imprimeHeap@@Base>
   10bd0:	ldr	r6, [r8]
   10bd4:	cmp	r6, #42	; 0x2a
   10bd8:	ldrne	r0, [pc, #256]	; 10ce0 <main@@Base+0x248>
   10bdc:	bne	10b04 <main@@Base+0x6c>
   10be0:	mov	r1, r7
   10be4:	ldr	r0, [pc, #204]	; 10cb8 <main@@Base+0x220>
   10be8:	bl	109cc <strcmp@plt>
   10bec:	subs	r5, r0, #0
   10bf0:	bne	10b00 <main@@Base+0x68>
   10bf4:	mov	r1, r5
   10bf8:	ldr	r0, [pc, #228]	; 10ce4 <main@@Base+0x24c>
   10bfc:	str	r5, [r4]
   10c00:	bl	109d8 <printf@plt>
   10c04:	mov	r3, #99	; 0x63
   10c08:	ldr	r2, [pc, #180]	; 10cc4 <main@@Base+0x22c>
   10c0c:	mov	r0, r8
   10c10:	str	r5, [r4]
   10c14:	ldr	r1, [pc, #188]	; 10cd8 <main@@Base+0x240>
   10c18:	bl	10f90 <heap_insere@@Base>
   10c1c:	ldr	r0, [pc, #196]	; 10ce8 <main@@Base+0x250>
   10c20:	ldr	r1, [r4]
   10c24:	bl	109d8 <printf@plt>
   10c28:	mov	r3, r5
   10c2c:	ldr	r2, [pc, #144]	; 10cc4 <main@@Base+0x22c>
   10c30:	mov	r0, r8
   10c34:	str	r5, [r4]
   10c38:	ldr	r1, [pc, #152]	; 10cd8 <main@@Base+0x240>
   10c3c:	bl	10f90 <heap_insere@@Base>
   10c40:	ldr	r0, [pc, #164]	; 10cec <main@@Base+0x254>
   10c44:	ldr	r1, [r4]
   10c48:	bl	109d8 <printf@plt>
   10c4c:	mov	r3, r6
   10c50:	ldr	r2, [pc, #108]	; 10cc4 <main@@Base+0x22c>
   10c54:	mov	r0, r8
   10c58:	str	r5, [r4]
   10c5c:	ldr	r1, [pc, #116]	; 10cd8 <main@@Base+0x240>
   10c60:	bl	10f90 <heap_insere@@Base>
   10c64:	ldr	r0, [pc, #100]	; 10cd0 <main@@Base+0x238>
   10c68:	ldr	r1, [r4]
   10c6c:	bl	109d8 <printf@plt>
   10c70:	mov	r0, r6
   10c74:	bl	11130 <vetor_criaHeap@@Base>
   10c78:	ldr	r1, [pc, #112]	; 10cf0 <main@@Base+0x258>
   10c7c:	ldr	r2, [pc, #40]	; 10cac <main@@Base+0x214>
   10c80:	bl	11038 <heap_carrega@@Base>
   10c84:	ldr	r0, [pc, #80]	; 10cdc <main@@Base+0x244>
   10c88:	ldr	r1, [r4]
   10c8c:	bl	109d8 <printf@plt>
   10c90:	mov	r0, #0
   10c94:	bl	10a2c <puts@plt>
   10c98:	subs	r6, r6, #1
   10c9c:	bne	10c90 <main@@Base+0x1f8>
   10ca0:	b	10b0c <main@@Base+0x74>
   10ca4:	andeq	r2, r2, r8, rrx
   10ca8:	andeq	r1, r1, r5, lsl r4
   10cac:	andeq	r1, r1, ip, asr #8
   10cb0:	andeq	r1, r1, r6, asr r4
   10cb4:	andeq	r1, r1, sp, lsl #9
   10cb8:			; <UNDEFINED> instruction: 0x000114b3
   10cbc:	andeq	r1, r1, r5, asr #9
   10cc0:	andeq	r1, r1, r9, lsl #10
   10cc4:	andeq	r1, r1, sp, lsr r5
   10cc8:	andeq	r1, r1, fp, asr #10
   10ccc:	muleq	r1, r2, r5
   10cd0:	ldrdeq	r1, [r1], -r9
   10cd4:	andeq	r1, r1, pc, lsl r6
   10cd8:			; <UNDEFINED> instruction: 0x000111b4
   10cdc:	andeq	r1, r1, r7, asr r6
   10ce0:	andeq	r1, r1, lr, lsl #13
   10ce4:			; <UNDEFINED> instruction: 0x000116b5
   10ce8:	andeq	r1, r1, r9, ror #13
   10cec:	andeq	r1, r1, r0, lsr r7
   10cf0:	andeq	r1, r1, ip, lsl r2

00010cf4 <_start@@Base>:
   10cf4:	mov	fp, #0
   10cf8:	mov	lr, #0
   10cfc:	pop	{r1}		; (ldr r1, [sp], #4)
   10d00:	mov	r2, sp
   10d04:	push	{r2}		; (str r2, [sp, #-4]!)
   10d08:	push	{r0}		; (str r0, [sp, #-4]!)
   10d0c:	ldr	ip, [pc, #16]	; 10d24 <_start@@Base+0x30>
   10d10:	push	{ip}		; (str ip, [sp, #-4]!)
   10d14:	ldr	r0, [pc, #12]	; 10d28 <_start@@Base+0x34>
   10d18:	ldr	r3, [pc, #12]	; 10d2c <_start@@Base+0x38>
   10d1c:	bl	10a44 <__libc_start_main@plt>
   10d20:	bl	10a8c <abort@plt>
   10d24:	andeq	r1, r1, r0, ror #7
   10d28:	muleq	r1, r8, sl
   10d2c:	andeq	r1, r1, r0, lsl #7
   10d30:	ldr	r3, [pc, #20]	; 10d4c <_start@@Base+0x58>
   10d34:	ldr	r2, [pc, #20]	; 10d50 <_start@@Base+0x5c>
   10d38:	add	r3, pc, r3
   10d3c:	ldr	r2, [r3, r2]
   10d40:	cmp	r2, #0
   10d44:	bxeq	lr
   10d48:	b	10a50 <__gmon_start__@plt>
   10d4c:	andeq	r1, r1, r0, asr #5
   10d50:	andeq	r0, r0, r4, asr r0
   10d54:	ldr	r0, [pc, #24]	; 10d74 <_start@@Base+0x80>
   10d58:	ldr	r3, [pc, #24]	; 10d78 <_start@@Base+0x84>
   10d5c:	cmp	r3, r0
   10d60:	bxeq	lr
   10d64:	ldr	r3, [pc, #16]	; 10d7c <_start@@Base+0x88>
   10d68:	cmp	r3, #0
   10d6c:	bxeq	lr
   10d70:	bx	r3
   10d74:	andeq	r2, r2, r0, rrx
   10d78:	andeq	r2, r2, r0, rrx
   10d7c:	andeq	r0, r0, r0
   10d80:	ldr	r0, [pc, #36]	; 10dac <_start@@Base+0xb8>
   10d84:	ldr	r1, [pc, #36]	; 10db0 <_start@@Base+0xbc>
   10d88:	sub	r1, r1, r0
   10d8c:	asr	r1, r1, #2
   10d90:	add	r1, r1, r1, lsr #31
   10d94:	asrs	r1, r1, #1
   10d98:	bxeq	lr
   10d9c:	ldr	r3, [pc, #16]	; 10db4 <_start@@Base+0xc0>
   10da0:	cmp	r3, #0
   10da4:	bxeq	lr
   10da8:	bx	r3
   10dac:	andeq	r2, r2, r0, rrx
   10db0:	andeq	r2, r2, r0, rrx
   10db4:	andeq	r0, r0, r0
   10db8:	push	{r4, lr}
   10dbc:	ldr	r4, [pc, #24]	; 10ddc <_start@@Base+0xe8>
   10dc0:	ldrb	r3, [r4]
   10dc4:	cmp	r3, #0
   10dc8:	popne	{r4, pc}
   10dcc:	bl	10d54 <_start@@Base+0x60>
   10dd0:	mov	r3, #1
   10dd4:	strb	r3, [r4]
   10dd8:	pop	{r4, pc}
   10ddc:	andeq	r2, r2, r4, rrx
   10de0:	b	10d80 <_start@@Base+0x8c>

00010de4 <fp_insere@@Base>:
   10de4:	push	{r4, r5, r6, r7, r8, lr}
   10de8:	subs	r4, r0, #0
   10dec:	beq	10e78 <fp_insere@@Base+0x94>
   10df0:	ldm	r4, {r0, r3}
   10df4:	cmp	r0, r3
   10df8:	beq	10e80 <fp_insere@@Base+0x9c>
   10dfc:	mov	r0, r2
   10e00:	mov	r5, #0
   10e04:	bl	11180 <elemento_cria@@Base>
   10e08:	mov	r6, r0
   10e0c:	ldr	r3, [r4]
   10e10:	lsl	r7, r5, #2
   10e14:	ldr	r2, [r4, #8]
   10e18:	cmp	r5, r3
   10e1c:	bge	10e34 <fp_insere@@Base+0x50>
   10e20:	mov	r1, r6
   10e24:	ldr	r0, [r2, r5, lsl #2]
   10e28:	bl	111b4 <maior_que@@Base>
   10e2c:	cmp	r0, #0
   10e30:	bne	10e5c <fp_insere@@Base+0x78>
   10e34:	ldr	r2, [r4]
   10e38:	ldr	r1, [r4, #8]
   10e3c:	mov	r3, r2
   10e40:	cmp	r5, r3
   10e44:	ble	10e64 <fp_insere@@Base+0x80>
   10e48:	add	r2, r2, #1
   10e4c:	mov	r0, #1
   10e50:	str	r6, [r1, r7]
   10e54:	str	r2, [r4]
   10e58:	pop	{r4, r5, r6, r7, r8, pc}
   10e5c:	add	r5, r5, #1
   10e60:	b	10e0c <fp_insere@@Base+0x28>
   10e64:	ldr	ip, [r1, r3, lsl #2]
   10e68:	add	r0, r1, r3, lsl #2
   10e6c:	sub	r3, r3, #1
   10e70:	str	ip, [r0, #4]
   10e74:	b	10e40 <fp_insere@@Base+0x5c>
   10e78:	mvn	r0, #0
   10e7c:	pop	{r4, r5, r6, r7, r8, pc}
   10e80:	mov	r0, #0
   10e84:	pop	{r4, r5, r6, r7, r8, pc}

00010e88 <fp_remove@@Base>:
   10e88:	cmp	r0, #0
   10e8c:	bxeq	lr
   10e90:	ldr	r3, [r0]
   10e94:	cmp	r3, #0
   10e98:	beq	10ec0 <fp_remove@@Base+0x38>
   10e9c:	ldr	r2, [r0, #8]
   10ea0:	mov	r1, #0
   10ea4:	cmp	r3, r1
   10ea8:	ldr	ip, [r2]
   10eac:	bgt	10ec8 <fp_remove@@Base+0x40>
   10eb0:	sub	r3, r3, #1
   10eb4:	str	r3, [r0]
   10eb8:	ldr	r0, [ip, #4]
   10ebc:	bx	lr
   10ec0:	mov	r0, r3
   10ec4:	bx	lr
   10ec8:	push	{lr}		; (str lr, [sp, #-4]!)
   10ecc:	add	r1, r1, #1
   10ed0:	cmp	r3, r1
   10ed4:	ldr	lr, [r2, #4]
   10ed8:	str	lr, [r2], #4
   10edc:	bgt	10ecc <fp_remove@@Base+0x44>
   10ee0:	sub	r3, r3, #1
   10ee4:	str	r3, [r0]
   10ee8:	ldr	r0, [ip, #4]
   10eec:	pop	{pc}		; (ldr pc, [sp], #4)

00010ef0 <fp_carrega@@Base>:
   10ef0:	push	{r4, r5, r6, r7, lr}
   10ef4:	mov	r6, r0
   10ef8:	sub	sp, sp, #268	; 0x10c
   10efc:	mov	r0, r1
   10f00:	ldr	r1, [pc, #124]	; 10f84 <fp_carrega@@Base+0x94>
   10f04:	bl	109f0 <fopen@plt>
   10f08:	subs	r4, r0, #0
   10f0c:	ldrne	r7, [pc, #116]	; 10f88 <fp_carrega@@Base+0x98>
   10f10:	bne	10f68 <fp_carrega@@Base+0x78>
   10f14:	ldr	r0, [pc, #112]	; 10f8c <fp_carrega@@Base+0x9c>
   10f18:	bl	10a2c <puts@plt>
   10f1c:	add	sp, sp, #268	; 0x10c
   10f20:	pop	{r4, r5, r6, r7, pc}
   10f24:	add	r2, sp, #4
   10f28:	mov	r1, r7
   10f2c:	mov	r0, r4
   10f30:	bl	109e4 <__isoc99_fscanf@plt>
   10f34:	mov	r2, r4
   10f38:	mov	r1, #256	; 0x100
   10f3c:	add	r0, sp, #8
   10f40:	bl	10a14 <fgets@plt>
   10f44:	add	r0, sp, #8
   10f48:	bl	10a68 <strlen@plt>
   10f4c:	add	r3, sp, #264	; 0x108
   10f50:	add	r1, sp, #8
   10f54:	ldr	r2, [sp, #4]
   10f58:	add	r0, r3, r0
   10f5c:	strb	r5, [r0, #-257]	; 0xfffffeff
   10f60:	mov	r0, r6
   10f64:	bl	10de4 <fp_insere@@Base>
   10f68:	mov	r0, r4
   10f6c:	bl	10a5c <feof@plt>
   10f70:	subs	r5, r0, #0
   10f74:	beq	10f24 <fp_carrega@@Base+0x34>
   10f78:	mov	r0, r4
   10f7c:	bl	10a80 <fclose@plt>
   10f80:	b	10f1c <fp_carrega@@Base+0x2c>
   10f84:	andeq	r1, r1, sl, asr #8
   10f88:	andeq	r1, r1, r1, lsl r4
   10f8c:	strdeq	r1, [r1], -r0

00010f90 <heap_insere@@Base>:
   10f90:	push	{r4, r5, r6, r7, r8, lr}
   10f94:	ldr	lr, [r0]
   10f98:	ldr	ip, [r0, #4]
   10f9c:	cmp	lr, ip
   10fa0:	moveq	r5, #0
   10fa4:	beq	10ff8 <heap_insere@@Base+0x68>
   10fa8:	mov	r6, r1
   10fac:	mov	r4, r0
   10fb0:	mov	r1, r2
   10fb4:	mov	r0, r3
   10fb8:	bl	11180 <elemento_cria@@Base>
   10fbc:	mov	r7, r0
   10fc0:	mov	r5, #0
   10fc4:	ldr	r2, [r4]
   10fc8:	lsl	r8, r5, #2
   10fcc:	ldr	r3, [r4, #8]
   10fd0:	cmp	r5, r2
   10fd4:	blt	11000 <heap_insere@@Base+0x70>
   10fd8:	ldr	r2, [r4, #8]
   10fdc:	mov	r3, r5
   10fe0:	cmp	r3, #0
   10fe4:	bne	1101c <heap_insere@@Base+0x8c>
   10fe8:	ldr	r3, [r4]
   10fec:	str	r7, [r2, r8]
   10ff0:	add	r3, r3, #1
   10ff4:	str	r3, [r4]
   10ff8:	mov	r0, r5
   10ffc:	pop	{r4, r5, r6, r7, r8, pc}
   11000:	mov	r1, r7
   11004:	ldr	r0, [r3, r5, lsl #2]
   11008:	blx	r6
   1100c:	cmp	r0, #1
   11010:	beq	10fd8 <heap_insere@@Base+0x48>
   11014:	add	r5, r5, #1
   11018:	b	10fc4 <heap_insere@@Base+0x34>
   1101c:	ldr	r0, [r2, r3, lsl #2]
   11020:	add	r1, r2, r3, lsl #2
   11024:	sub	r3, r3, #1
   11028:	str	r0, [r1, #4]
   1102c:	b	10fe0 <heap_insere@@Base+0x50>

00011030 <heap_remove@@Base>:
   11030:	mov	r0, #0
   11034:	bx	lr

00011038 <heap_carrega@@Base>:
   11038:	push	{r4, r5, r6, r7, r8, lr}
   1103c:	mov	r6, r0
   11040:	sub	sp, sp, #264	; 0x108
   11044:	mov	r7, r1
   11048:	mov	r0, r2
   1104c:	ldr	r1, [pc, #128]	; 110d4 <heap_carrega@@Base+0x9c>
   11050:	bl	109f0 <fopen@plt>
   11054:	subs	r4, r0, #0
   11058:	ldrne	r8, [pc, #120]	; 110d8 <heap_carrega@@Base+0xa0>
   1105c:	bne	110b8 <heap_carrega@@Base+0x80>
   11060:	ldr	r0, [pc, #116]	; 110dc <heap_carrega@@Base+0xa4>
   11064:	bl	10a2c <puts@plt>
   11068:	add	sp, sp, #264	; 0x108
   1106c:	pop	{r4, r5, r6, r7, r8, pc}
   11070:	add	r2, sp, #4
   11074:	mov	r1, r8
   11078:	mov	r0, r4
   1107c:	bl	109e4 <__isoc99_fscanf@plt>
   11080:	mov	r2, r4
   11084:	mov	r1, #256	; 0x100
   11088:	add	r0, sp, #8
   1108c:	bl	10a14 <fgets@plt>
   11090:	add	r0, sp, #8
   11094:	bl	10a68 <strlen@plt>
   11098:	add	r3, sp, #264	; 0x108
   1109c:	add	r2, sp, #8
   110a0:	add	r0, r3, r0
   110a4:	mov	r1, r7
   110a8:	ldr	r3, [sp, #4]
   110ac:	strb	r5, [r0, #-257]	; 0xfffffeff
   110b0:	mov	r0, r6
   110b4:	bl	10f90 <heap_insere@@Base>
   110b8:	mov	r0, r4
   110bc:	bl	10a5c <feof@plt>
   110c0:	subs	r5, r0, #0
   110c4:	beq	11070 <heap_carrega@@Base+0x38>
   110c8:	mov	r0, r4
   110cc:	bl	10a80 <fclose@plt>
   110d0:	b	11068 <heap_carrega@@Base+0x30>
   110d4:	andeq	r1, r1, sl, asr #8
   110d8:	andeq	r1, r1, r1, lsl r4
   110dc:	strdeq	r1, [r1], -r0

000110e0 <vetor_cria@@Base>:
   110e0:	push	{r4, r5, r6, lr}
   110e4:	mov	r5, r0
   110e8:	mov	r0, #12
   110ec:	bl	10a38 <malloc@plt>
   110f0:	subs	r4, r0, #0
   110f4:	beq	11128 <vetor_cria@@Base+0x48>
   110f8:	mov	r3, #0
   110fc:	mov	r0, r5
   11100:	mov	r1, #4
   11104:	stm	r4, {r3, r5}
   11108:	bl	109c0 <calloc@plt>
   1110c:	cmp	r0, #0
   11110:	mov	r5, r0
   11114:	str	r0, [r4, #8]
   11118:	bne	11128 <vetor_cria@@Base+0x48>
   1111c:	mov	r0, r4
   11120:	mov	r4, r5
   11124:	bl	10a08 <free@plt>
   11128:	mov	r0, r4
   1112c:	pop	{r4, r5, r6, pc}

00011130 <vetor_criaHeap@@Base>:
   11130:	push	{r4, r5, r6, lr}
   11134:	mov	r5, r0
   11138:	mov	r0, #12
   1113c:	bl	10a38 <malloc@plt>
   11140:	subs	r4, r0, #0
   11144:	beq	11178 <vetor_criaHeap@@Base+0x48>
   11148:	mov	r3, #0
   1114c:	add	r0, r5, #1
   11150:	mov	r1, #4
   11154:	stm	r4, {r3, r5}
   11158:	bl	109c0 <calloc@plt>
   1115c:	cmp	r0, #0
   11160:	mov	r5, r0
   11164:	str	r0, [r4, #8]
   11168:	bne	11178 <vetor_criaHeap@@Base+0x48>
   1116c:	mov	r0, r4
   11170:	mov	r4, r5
   11174:	bl	10a08 <free@plt>
   11178:	mov	r0, r4
   1117c:	pop	{r4, r5, r6, pc}

00011180 <elemento_cria@@Base>:
   11180:	push	{r4, r5, r6, lr}
   11184:	mov	r5, r0
   11188:	mov	r0, #8
   1118c:	mov	r6, r1
   11190:	bl	10a38 <malloc@plt>
   11194:	subs	r4, r0, #0
   11198:	beq	111ac <elemento_cria@@Base+0x2c>
   1119c:	mov	r0, r6
   111a0:	bl	10a20 <strdup@plt>
   111a4:	str	r5, [r4]
   111a8:	str	r0, [r4, #4]
   111ac:	mov	r0, r4
   111b0:	pop	{r4, r5, r6, pc}

000111b4 <maior_que@@Base>:
   111b4:	cmp	r1, #0
   111b8:	cmpne	r0, #0
   111bc:	push	{r4, r5, r6, lr}
   111c0:	bne	111d4 <maior_que@@Base+0x20>
   111c4:	ldr	r0, [pc, #68]	; 11210 <maior_que@@Base+0x5c>
   111c8:	bl	10a2c <puts@plt>
   111cc:	mov	r0, #0
   111d0:	pop	{r4, r5, r6, pc}
   111d4:	ldr	r3, [pc, #56]	; 11214 <maior_que@@Base+0x60>
   111d8:	mov	r5, r0
   111dc:	mov	r4, r1
   111e0:	ldr	r0, [r3]
   111e4:	bl	109fc <fflush@plt>
   111e8:	ldr	r2, [pc, #40]	; 11218 <maior_que@@Base+0x64>
   111ec:	ldr	r0, [r5]
   111f0:	ldr	r3, [r2]
   111f4:	add	r3, r3, #1
   111f8:	str	r3, [r2]
   111fc:	ldr	r3, [r4]
   11200:	cmp	r0, r3
   11204:	movle	r0, #0
   11208:	movgt	r0, #1
   1120c:	pop	{r4, r5, r6, pc}
   11210:	andeq	r1, r1, r7, ror r7
   11214:	andeq	r2, r2, r0, rrx
   11218:	andeq	r2, r2, r8, rrx

0001121c <maior_que_HeapSort@@Base>:
   1121c:	cmp	r1, #0
   11220:	cmpne	r0, #0
   11224:	push	{r4, r5, r6, lr}
   11228:	bne	1123c <maior_que_HeapSort@@Base+0x20>
   1122c:	ldr	r0, [pc, #64]	; 11274 <maior_que_HeapSort@@Base+0x58>
   11230:	bl	10a2c <puts@plt>
   11234:	mov	r0, #0
   11238:	pop	{r4, r5, r6, pc}
   1123c:	ldr	r3, [pc, #52]	; 11278 <maior_que_HeapSort@@Base+0x5c>
   11240:	mov	r4, r0
   11244:	mov	r5, r1
   11248:	ldr	r0, [r3]
   1124c:	bl	109fc <fflush@plt>
   11250:	ldr	r2, [pc, #36]	; 1127c <maior_que_HeapSort@@Base+0x60>
   11254:	ldr	r0, [r4, #4]
   11258:	ldr	r1, [r5, #4]
   1125c:	ldr	r3, [r2]
   11260:	add	r3, r3, #1
   11264:	str	r3, [r2]
   11268:	bl	109cc <strcmp@plt>
   1126c:	lsr	r0, r0, #31
   11270:	pop	{r4, r5, r6, pc}
   11274:	andeq	r1, r1, r7, ror r7
   11278:	andeq	r2, r2, r0, rrx
   1127c:	andeq	r2, r2, r8, rrx

00011280 <vetor_imprime@@Base>:
   11280:	ldr	r3, [r0]
   11284:	cmp	r3, #0
   11288:	ble	112cc <vetor_imprime@@Base+0x4c>
   1128c:	push	{r4, r5, r6, lr}
   11290:	mov	r4, r0
   11294:	mov	r5, #1
   11298:	ldr	r3, [r4, #8]
   1129c:	ldr	r0, [pc, #80]	; 112f4 <vetor_imprime@@Base+0x74>
   112a0:	ldr	r6, [pc, #80]	; 112f8 <vetor_imprime@@Base+0x78>
   112a4:	ldr	r3, [r3]
   112a8:	ldr	r2, [r3]
   112ac:	ldr	r1, [r3, #4]
   112b0:	bl	109d8 <printf@plt>
   112b4:	ldr	r3, [r4]
   112b8:	cmp	r3, r5
   112bc:	bgt	112d4 <vetor_imprime@@Base+0x54>
   112c0:	mov	r0, #10
   112c4:	pop	{r4, r5, r6, lr}
   112c8:	b	10a74 <putchar@plt>
   112cc:	ldr	r0, [pc, #40]	; 112fc <vetor_imprime@@Base+0x7c>
   112d0:	b	10a2c <puts@plt>
   112d4:	ldr	r3, [r4, #8]
   112d8:	mov	r0, r6
   112dc:	ldr	r3, [r3, r5, lsl #2]
   112e0:	add	r5, r5, #1
   112e4:	ldr	r2, [r3]
   112e8:	ldr	r1, [r3, #4]
   112ec:	bl	109d8 <printf@plt>
   112f0:	b	112b4 <vetor_imprime@@Base+0x34>
   112f4:	andeq	r1, r1, r2, lsl #15
   112f8:			; <UNDEFINED> instruction: 0x000117b6
   112fc:	muleq	r1, pc, r7	; <UNPREDICTABLE>

00011300 <vetor_imprimeHeap@@Base>:
   11300:	ldr	r3, [r0]
   11304:	cmp	r3, #0
   11308:	ble	1134c <vetor_imprimeHeap@@Base+0x4c>
   1130c:	push	{r4, r5, r6, lr}
   11310:	mov	r4, r0
   11314:	mov	r5, #2
   11318:	ldr	r3, [r4, #8]
   1131c:	ldr	r0, [pc, #80]	; 11374 <vetor_imprimeHeap@@Base+0x74>
   11320:	ldr	r6, [pc, #80]	; 11378 <vetor_imprimeHeap@@Base+0x78>
   11324:	ldr	r3, [r3, #4]
   11328:	ldr	r2, [r3]
   1132c:	ldr	r1, [r3, #4]
   11330:	bl	109d8 <printf@plt>
   11334:	ldr	r3, [r4]
   11338:	cmp	r3, r5
   1133c:	bgt	11354 <vetor_imprimeHeap@@Base+0x54>
   11340:	mov	r0, #10
   11344:	pop	{r4, r5, r6, lr}
   11348:	b	10a74 <putchar@plt>
   1134c:	ldr	r0, [pc, #40]	; 1137c <vetor_imprimeHeap@@Base+0x7c>
   11350:	b	10a2c <puts@plt>
   11354:	ldr	r3, [r4, #8]
   11358:	mov	r0, r6
   1135c:	ldr	r3, [r3, r5, lsl #2]
   11360:	add	r5, r5, #1
   11364:	ldr	r2, [r3]
   11368:	ldr	r1, [r3, #4]
   1136c:	bl	109d8 <printf@plt>
   11370:	b	11334 <vetor_imprimeHeap@@Base+0x34>
   11374:	andeq	r1, r1, r2, lsl #15
   11378:			; <UNDEFINED> instruction: 0x000117b6
   1137c:	muleq	r1, pc, r7	; <UNPREDICTABLE>

00011380 <__libc_csu_init@@Base>:
   11380:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11384:	mov	r7, r0
   11388:	ldr	r6, [pc, #72]	; 113d8 <__libc_csu_init@@Base+0x58>
   1138c:	ldr	r5, [pc, #72]	; 113dc <__libc_csu_init@@Base+0x5c>
   11390:	add	r6, pc, r6
   11394:	add	r5, pc, r5
   11398:	sub	r6, r6, r5
   1139c:	mov	r8, r1
   113a0:	mov	r9, r2
   113a4:	bl	109a0 <calloc@plt-0x20>
   113a8:	asrs	r6, r6, #2
   113ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   113b0:	mov	r4, #0
   113b4:	add	r4, r4, #1
   113b8:	ldr	r3, [r5], #4
   113bc:	mov	r2, r9
   113c0:	mov	r1, r8
   113c4:	mov	r0, r7
   113c8:	blx	r3
   113cc:	cmp	r6, r4
   113d0:	bne	113b4 <__libc_csu_init@@Base+0x34>
   113d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   113d8:	andeq	r0, r1, ip, ror fp
   113dc:	andeq	r0, r1, r4, ror fp

000113e0 <__libc_csu_fini@@Base>:
   113e0:	bx	lr

Disassembly of section .fini:

000113e4 <.fini>:
   113e4:	push	{r3, lr}
   113e8:	pop	{r3, pc}
