
../repos/coreutils/src/sum:     file format elf32-littlearm


Disassembly of section .init:

00010ef4 <.init>:
   10ef4:	push	{r3, lr}
   10ef8:	bl	1120c <__assert_fail@plt+0x4c>
   10efc:	pop	{r3, pc}

Disassembly of section .plt:

00010f00 <fdopen@plt-0x14>:
   10f00:	push	{lr}		; (str lr, [sp, #-4]!)
   10f04:	ldr	lr, [pc, #4]	; 10f10 <fdopen@plt-0x4>
   10f08:	add	lr, pc, lr
   10f0c:	ldr	pc, [lr, #8]!
   10f10:	strdeq	r8, [r1], -r0

00010f14 <fdopen@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #240]!	; 0xf0

00010f20 <calloc@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #232]!	; 0xe8

00010f2c <fputs_unlocked@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #224]!	; 0xe0

00010f38 <raise@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #216]!	; 0xd8

00010f44 <strcmp@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #208]!	; 0xd0

00010f50 <posix_fadvise64@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #200]!	; 0xc8

00010f5c <fflush@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #192]!	; 0xc0

00010f68 <memmove@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #184]!	; 0xb8

00010f74 <free@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #176]!	; 0xb0

00010f80 <_exit@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #24, 20	; 0x18000
   10f88:	ldr	pc, [ip, #168]!	; 0xa8

00010f8c <memcpy@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #24, 20	; 0x18000
   10f94:	ldr	pc, [ip, #160]!	; 0xa0

00010f98 <__strtoull_internal@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #24, 20	; 0x18000
   10fa0:	ldr	pc, [ip, #152]!	; 0x98

00010fa4 <mbsinit@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #24, 20	; 0x18000
   10fac:	ldr	pc, [ip, #144]!	; 0x90

00010fb0 <dcgettext@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #24, 20	; 0x18000
   10fb8:	ldr	pc, [ip, #136]!	; 0x88

00010fbc <realloc@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #24, 20	; 0x18000
   10fc4:	ldr	pc, [ip, #128]!	; 0x80

00010fc8 <textdomain@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #24, 20	; 0x18000
   10fd0:	ldr	pc, [ip, #120]!	; 0x78

00010fd4 <iswprint@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #24, 20	; 0x18000
   10fdc:	ldr	pc, [ip, #112]!	; 0x70

00010fe0 <fwrite@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #24, 20	; 0x18000
   10fe8:	ldr	pc, [ip, #104]!	; 0x68

00010fec <lseek64@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #24, 20	; 0x18000
   10ff4:	ldr	pc, [ip, #96]!	; 0x60

00010ff8 <__ctype_get_mb_cur_max@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #24, 20	; 0x18000
   11000:	ldr	pc, [ip, #88]!	; 0x58

00011004 <__fpending@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #24, 20	; 0x18000
   1100c:	ldr	pc, [ip, #80]!	; 0x50

00011010 <mbrtowc@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #24, 20	; 0x18000
   11018:	ldr	pc, [ip, #72]!	; 0x48

0001101c <error@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #24, 20	; 0x18000
   11024:	ldr	pc, [ip, #64]!	; 0x40

00011028 <getenv@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #24, 20	; 0x18000
   11030:	ldr	pc, [ip, #56]!	; 0x38

00011034 <malloc@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #24, 20	; 0x18000
   1103c:	ldr	pc, [ip, #48]!	; 0x30

00011040 <__libc_start_main@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #24, 20	; 0x18000
   11048:	ldr	pc, [ip, #40]!	; 0x28

0001104c <__freading@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #24, 20	; 0x18000
   11054:	ldr	pc, [ip, #32]!

00011058 <__gmon_start__@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #24, 20	; 0x18000
   11060:	ldr	pc, [ip, #24]!

00011064 <getopt_long@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #24, 20	; 0x18000
   1106c:	ldr	pc, [ip, #16]!

00011070 <__ctype_b_loc@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #24, 20	; 0x18000
   11078:	ldr	pc, [ip, #8]!

0001107c <exit@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #24, 20	; 0x18000
   11084:	ldr	pc, [ip, #0]!

00011088 <bcmp@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #94208	; 0x17000
   11090:	ldr	pc, [ip, #4088]!	; 0xff8

00011094 <strlen@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #94208	; 0x17000
   1109c:	ldr	pc, [ip, #4080]!	; 0xff0

000110a0 <strchr@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #94208	; 0x17000
   110a8:	ldr	pc, [ip, #4072]!	; 0xfe8

000110ac <__errno_location@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #94208	; 0x17000
   110b4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110b8 <__sprintf_chk@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #94208	; 0x17000
   110c0:	ldr	pc, [ip, #4056]!	; 0xfd8

000110c4 <__cxa_atexit@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #94208	; 0x17000
   110cc:	ldr	pc, [ip, #4048]!	; 0xfd0

000110d0 <setvbuf@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #94208	; 0x17000
   110d8:	ldr	pc, [ip, #4040]!	; 0xfc8

000110dc <memset@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #94208	; 0x17000
   110e4:	ldr	pc, [ip, #4032]!	; 0xfc0

000110e8 <__printf_chk@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #94208	; 0x17000
   110f0:	ldr	pc, [ip, #4024]!	; 0xfb8

000110f4 <fileno@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #94208	; 0x17000
   110fc:	ldr	pc, [ip, #4016]!	; 0xfb0

00011100 <__fprintf_chk@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #94208	; 0x17000
   11108:	ldr	pc, [ip, #4008]!	; 0xfa8

0001110c <fclose@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #94208	; 0x17000
   11114:	ldr	pc, [ip, #4000]!	; 0xfa0

00011118 <fseeko64@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #94208	; 0x17000
   11120:	ldr	pc, [ip, #3992]!	; 0xf98

00011124 <fcntl64@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #94208	; 0x17000
   1112c:	ldr	pc, [ip, #3984]!	; 0xf90

00011130 <__overflow@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #94208	; 0x17000
   11138:	ldr	pc, [ip, #3976]!	; 0xf88

0001113c <setlocale@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #94208	; 0x17000
   11144:	ldr	pc, [ip, #3968]!	; 0xf80

00011148 <strrchr@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #94208	; 0x17000
   11150:	ldr	pc, [ip, #3960]!	; 0xf78

00011154 <nl_langinfo@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #94208	; 0x17000
   1115c:	ldr	pc, [ip, #3952]!	; 0xf70

00011160 <localeconv@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #94208	; 0x17000
   11168:	ldr	pc, [ip, #3944]!	; 0xf68

0001116c <clearerr_unlocked@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #94208	; 0x17000
   11174:	ldr	pc, [ip, #3936]!	; 0xf60

00011178 <fopen64@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #94208	; 0x17000
   11180:	ldr	pc, [ip, #3928]!	; 0xf58

00011184 <bindtextdomain@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #94208	; 0x17000
   1118c:	ldr	pc, [ip, #3920]!	; 0xf50

00011190 <fread_unlocked@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #94208	; 0x17000
   11198:	ldr	pc, [ip, #3912]!	; 0xf48

0001119c <strncmp@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #94208	; 0x17000
   111a4:	ldr	pc, [ip, #3904]!	; 0xf40

000111a8 <abort@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #94208	; 0x17000
   111b0:	ldr	pc, [ip, #3896]!	; 0xf38

000111b4 <close@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #94208	; 0x17000
   111bc:	ldr	pc, [ip, #3888]!	; 0xf30

000111c0 <__assert_fail@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #94208	; 0x17000
   111c8:	ldr	pc, [ip, #3880]!	; 0xf28

Disassembly of section .text:

000111d0 <.text>:
   111d0:	mov	fp, #0
   111d4:	mov	lr, #0
   111d8:	pop	{r1}		; (ldr r1, [sp], #4)
   111dc:	mov	r2, sp
   111e0:	push	{r2}		; (str r2, [sp, #-4]!)
   111e4:	push	{r0}		; (str r0, [sp, #-4]!)
   111e8:	ldr	ip, [pc, #16]	; 11200 <__assert_fail@plt+0x40>
   111ec:	push	{ip}		; (str ip, [sp, #-4]!)
   111f0:	ldr	r0, [pc, #12]	; 11204 <__assert_fail@plt+0x44>
   111f4:	ldr	r3, [pc, #12]	; 11208 <__assert_fail@plt+0x48>
   111f8:	bl	11040 <__libc_start_main@plt>
   111fc:	bl	111a8 <abort@plt>
   11200:	ldrdeq	r7, [r1], -r8
   11204:	andeq	r1, r1, r8, lsl #23
   11208:	andeq	r7, r1, r8, ror ip
   1120c:	ldr	r3, [pc, #20]	; 11228 <__assert_fail@plt+0x68>
   11210:	ldr	r2, [pc, #20]	; 1122c <__assert_fail@plt+0x6c>
   11214:	add	r3, pc, r3
   11218:	ldr	r2, [r3, r2]
   1121c:	cmp	r2, #0
   11220:	bxeq	lr
   11224:	b	11058 <__gmon_start__@plt>
   11228:	andeq	r7, r1, r4, ror #27
   1122c:	strdeq	r0, [r0], -r4
   11230:	ldr	r0, [pc, #24]	; 11250 <__assert_fail@plt+0x90>
   11234:	ldr	r3, [pc, #24]	; 11254 <__assert_fail@plt+0x94>
   11238:	cmp	r3, r0
   1123c:	bxeq	lr
   11240:	ldr	r3, [pc, #16]	; 11258 <__assert_fail@plt+0x98>
   11244:	cmp	r3, #0
   11248:	bxeq	lr
   1124c:	bx	r3
   11250:	andeq	r9, r2, ip, asr #2
   11254:	andeq	r9, r2, ip, asr #2
   11258:	andeq	r0, r0, r0
   1125c:	ldr	r0, [pc, #36]	; 11288 <__assert_fail@plt+0xc8>
   11260:	ldr	r1, [pc, #36]	; 1128c <__assert_fail@plt+0xcc>
   11264:	sub	r1, r1, r0
   11268:	asr	r1, r1, #2
   1126c:	add	r1, r1, r1, lsr #31
   11270:	asrs	r1, r1, #1
   11274:	bxeq	lr
   11278:	ldr	r3, [pc, #16]	; 11290 <__assert_fail@plt+0xd0>
   1127c:	cmp	r3, #0
   11280:	bxeq	lr
   11284:	bx	r3
   11288:	andeq	r9, r2, ip, asr #2
   1128c:	andeq	r9, r2, ip, asr #2
   11290:	andeq	r0, r0, r0
   11294:	push	{r4, lr}
   11298:	ldr	r4, [pc, #24]	; 112b8 <__assert_fail@plt+0xf8>
   1129c:	ldrb	r3, [r4]
   112a0:	cmp	r3, #0
   112a4:	popne	{r4, pc}
   112a8:	bl	11230 <__assert_fail@plt+0x70>
   112ac:	mov	r3, #1
   112b0:	strb	r3, [r4]
   112b4:	pop	{r4, pc}
   112b8:	andeq	r9, r2, r0, ror r1
   112bc:	b	1125c <__assert_fail@plt+0x9c>
   112c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112c4:	add	fp, sp, #28
   112c8:	sub	sp, sp, #4
   112cc:	mov	r7, r0
   112d0:	mov	r0, #32768	; 0x8000
   112d4:	mov	r5, r2
   112d8:	mov	r9, r1
   112dc:	bl	16cf8 <__assert_fail@plt+0x5b38>
   112e0:	cmp	r0, #0
   112e4:	beq	11398 <__assert_fail@plt+0x1d8>
   112e8:	str	r5, [sp]
   112ec:	mov	r4, r0
   112f0:	mov	r5, #0
   112f4:	mov	sl, #0
   112f8:	mov	r6, #0
   112fc:	mov	r8, #0
   11300:	add	r0, r4, r8
   11304:	rsb	r2, r8, #32768	; 0x8000
   11308:	mov	r1, #1
   1130c:	mov	r3, r7
   11310:	bl	11190 <fread_unlocked@plt>
   11314:	add	r8, r0, r8
   11318:	cmp	r8, #32768	; 0x8000
   1131c:	beq	11338 <__assert_fail@plt+0x178>
   11320:	ldr	r1, [r7]
   11324:	cmp	r0, #0
   11328:	beq	113a8 <__assert_fail@plt+0x1e8>
   1132c:	tst	r1, #16
   11330:	beq	11300 <__assert_fail@plt+0x140>
   11334:	b	113b4 <__assert_fail@plt+0x1f4>
   11338:	mov	r0, #0
   1133c:	mov	r1, r4
   11340:	lsr	r3, r5, #1
   11344:	ldrb	r2, [r1, r0]!
   11348:	add	r3, r3, r5, lsl #15
   1134c:	add	r0, r0, #2
   11350:	cmp	r0, #32768	; 0x8000
   11354:	ldrb	r1, [r1, #1]
   11358:	add	r2, r3, r2
   1135c:	uxth	r2, r2
   11360:	lsr	r3, r2, #1
   11364:	orr	r2, r3, r2, lsl #15
   11368:	add	r1, r2, r1
   1136c:	uxth	r5, r1
   11370:	bne	1133c <__assert_fail@plt+0x17c>
   11374:	movw	r0, #32768	; 0x8000
   11378:	mvn	r1, r6
   1137c:	movt	r0, #65535	; 0xffff
   11380:	eor	r0, sl, r0
   11384:	orrs	r0, r0, r1
   11388:	beq	11448 <__assert_fail@plt+0x288>
   1138c:	adds	sl, sl, #32768	; 0x8000
   11390:	adc	r6, r6, #0
   11394:	b	112fc <__assert_fail@plt+0x13c>
   11398:	mvn	r7, #0
   1139c:	mov	r0, r7
   113a0:	sub	sp, fp, #28
   113a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113a8:	mvn	r7, #0
   113ac:	tst	r1, #32
   113b0:	bne	11468 <__assert_fail@plt+0x2a8>
   113b4:	cmp	r8, #0
   113b8:	beq	11434 <__assert_fail@plt+0x274>
   113bc:	and	ip, r8, #1
   113c0:	cmp	r8, #1
   113c4:	bne	113d8 <__assert_fail@plt+0x218>
   113c8:	mov	r1, #0
   113cc:	cmp	ip, #0
   113d0:	bne	11420 <__assert_fail@plt+0x260>
   113d4:	b	11434 <__assert_fail@plt+0x274>
   113d8:	sub	r2, r8, ip
   113dc:	mov	r1, #0
   113e0:	mov	r3, r4
   113e4:	lsr	r0, r5, #1
   113e8:	ldrb	r7, [r3, r1]!
   113ec:	add	r0, r0, r5, lsl #15
   113f0:	add	r1, r1, #2
   113f4:	cmp	r2, r1
   113f8:	ldrb	r3, [r3, #1]
   113fc:	add	r0, r0, r7
   11400:	uxth	r0, r0
   11404:	lsr	r7, r0, #1
   11408:	orr	r0, r7, r0, lsl #15
   1140c:	add	r0, r0, r3
   11410:	uxth	r5, r0
   11414:	bne	113e0 <__assert_fail@plt+0x220>
   11418:	cmp	ip, #0
   1141c:	beq	11434 <__assert_fail@plt+0x274>
   11420:	ldrb	r0, [r4, r1]
   11424:	lsr	r1, r5, #1
   11428:	add	r1, r1, r5, lsl #15
   1142c:	add	r0, r1, r0
   11430:	uxth	r5, r0
   11434:	adds	r0, sl, r8
   11438:	mov	r7, #0
   1143c:	adcs	r1, r6, #0
   11440:	adcs	r2, r7, #0
   11444:	beq	1145c <__assert_fail@plt+0x29c>
   11448:	bl	110ac <__errno_location@plt>
   1144c:	mov	r1, #75	; 0x4b
   11450:	mvn	r7, #0
   11454:	str	r1, [r0]
   11458:	b	11468 <__assert_fail@plt+0x2a8>
   1145c:	ldr	r2, [sp]
   11460:	str	r5, [r9]
   11464:	strd	r0, [r2]
   11468:	mov	r0, r4
   1146c:	bl	1223c <__assert_fail@plt+0x107c>
   11470:	mov	r0, r7
   11474:	sub	sp, fp, #28
   11478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1147c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11480:	add	fp, sp, #28
   11484:	sub	sp, sp, #60	; 0x3c
   11488:	mov	r7, r0
   1148c:	mov	r0, #32768	; 0x8000
   11490:	mov	r4, r2
   11494:	mov	r5, r1
   11498:	bl	16cf8 <__assert_fail@plt+0x5b38>
   1149c:	cmp	r0, #0
   114a0:	beq	115d8 <__assert_fail@plt+0x418>
   114a4:	mov	sl, r0
   114a8:	mov	r0, #0
   114ac:	str	r4, [sp, #12]
   114b0:	add	r4, sp, #28
   114b4:	add	r6, sp, #32
   114b8:	add	r9, sp, #36	; 0x24
   114bc:	mov	r8, #0
   114c0:	str	r5, [sp, #8]
   114c4:	str	r0, [sp, #20]
   114c8:	mov	r0, #0
   114cc:	str	r0, [sp, #16]
   114d0:	mov	r1, #0
   114d4:	mov	r5, r1
   114d8:	add	r0, sl, r1
   114dc:	rsb	r2, r1, #32768	; 0x8000
   114e0:	mov	r1, #1
   114e4:	mov	r3, r7
   114e8:	bl	11190 <fread_unlocked@plt>
   114ec:	add	r1, r0, r5
   114f0:	cmp	r1, #32768	; 0x8000
   114f4:	beq	11510 <__assert_fail@plt+0x350>
   114f8:	ldr	r2, [r7]
   114fc:	cmp	r0, #0
   11500:	beq	115e8 <__assert_fail@plt+0x428>
   11504:	tst	r2, #16
   11508:	beq	114d4 <__assert_fail@plt+0x314>
   1150c:	b	115f4 <__assert_fail@plt+0x434>
   11510:	mov	r0, #0
   11514:	add	r5, sp, #24
   11518:	vdup.32	q8, r0
   1151c:	vmov.32	d16[0], r8
   11520:	mov	r1, sl
   11524:	ldr	r2, [r1, r0]!
   11528:	add	r0, r0, #16
   1152c:	cmp	r0, #32768	; 0x8000
   11530:	str	r2, [sp, #24]
   11534:	ldr	r2, [r1, #4]
   11538:	ldr	r3, [r1, #8]
   1153c:	ldr	r1, [r1, #12]
   11540:	vld1.32	{d18[0]}, [r5 :32]
   11544:	str	r2, [sp, #36]	; 0x24
   11548:	str	r3, [sp, #32]
   1154c:	str	r1, [sp, #28]
   11550:	vld1.32	{d19[0]}, [r9 :32]
   11554:	vld1.32	{d20[0]}, [r6 :32]
   11558:	vmovl.u8	q11, d18
   1155c:	vld1.32	{d18[0]}, [r4 :32]
   11560:	vmovl.u16	q11, d22
   11564:	vmovl.u8	q12, d19
   11568:	vmovl.u8	q10, d20
   1156c:	vadd.i32	q8, q8, q11
   11570:	vmovl.u16	q11, d24
   11574:	vmovl.u8	q9, d18
   11578:	vmovl.u16	q10, d20
   1157c:	vadd.i32	q8, q8, q11
   11580:	vmovl.u16	q9, d18
   11584:	vadd.i32	q8, q8, q10
   11588:	vadd.i32	q8, q8, q9
   1158c:	bne	11520 <__assert_fail@plt+0x360>
   11590:	ldr	r3, [sp, #16]
   11594:	ldr	r2, [sp, #20]
   11598:	movw	r0, #32768	; 0x8000
   1159c:	movt	r0, #65535	; 0xffff
   115a0:	eor	r0, r2, r0
   115a4:	mvn	r1, r3
   115a8:	orrs	r0, r0, r1
   115ac:	beq	1174c <__assert_fail@plt+0x58c>
   115b0:	vext.8	q9, q8, q8, #8
   115b4:	adds	r2, r2, #32768	; 0x8000
   115b8:	adc	r3, r3, #0
   115bc:	str	r2, [sp, #20]
   115c0:	str	r3, [sp, #16]
   115c4:	vadd.i32	q8, q8, q9
   115c8:	vdup.32	q9, d16[1]
   115cc:	vadd.i32	q8, q8, q9
   115d0:	vmov.32	r8, d16[0]
   115d4:	b	114d0 <__assert_fail@plt+0x310>
   115d8:	mvn	r7, #0
   115dc:	mov	r0, r7
   115e0:	sub	sp, fp, #28
   115e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115e8:	mvn	r7, #0
   115ec:	tst	r2, #32
   115f0:	bne	11780 <__assert_fail@plt+0x5c0>
   115f4:	cmp	r1, #0
   115f8:	beq	11730 <__assert_fail@plt+0x570>
   115fc:	mov	r3, #0
   11600:	cmp	r1, #3
   11604:	bls	11714 <__assert_fail@plt+0x554>
   11608:	mov	r3, #0
   1160c:	bic	r7, r1, #3
   11610:	mov	r2, #1
   11614:	vdup.32	q8, r3
   11618:	sub	r6, r7, #4
   1161c:	add	r2, r2, r6, lsr #2
   11620:	cmp	r6, #12
   11624:	and	r4, r2, #3
   11628:	stm	sp, {r4, r7}
   1162c:	vmov.32	d16[0], r8
   11630:	bcc	116bc <__assert_fail@plt+0x4fc>
   11634:	sub	r6, r4, r2
   11638:	mov	r3, #0
   1163c:	sub	r9, fp, #40	; 0x28
   11640:	sub	lr, fp, #36	; 0x24
   11644:	sub	r8, fp, #32
   11648:	mov	r4, sl
   1164c:	add	r2, sp, #44	; 0x2c
   11650:	adds	r6, r6, #4
   11654:	ldr	ip, [r4, r3]!
   11658:	add	r3, r3, #16
   1165c:	str	ip, [sp, #44]	; 0x2c
   11660:	ldr	r7, [r4, #4]
   11664:	ldr	ip, [r4, #8]
   11668:	ldr	r4, [r4, #12]
   1166c:	vld1.32	{d18[0]}, [r2 :32]
   11670:	str	r7, [fp, #-32]	; 0xffffffe0
   11674:	str	ip, [fp, #-36]	; 0xffffffdc
   11678:	str	r4, [fp, #-40]	; 0xffffffd8
   1167c:	vld1.32	{d19[0]}, [r8 :32]
   11680:	vld1.32	{d20[0]}, [lr :32]
   11684:	vmovl.u8	q11, d18
   11688:	vld1.32	{d18[0]}, [r9 :32]
   1168c:	vmovl.u16	q11, d22
   11690:	vmovl.u8	q12, d19
   11694:	vmovl.u8	q10, d20
   11698:	vadd.i32	q8, q8, q11
   1169c:	vmovl.u16	q11, d24
   116a0:	vmovl.u8	q9, d18
   116a4:	vmovl.u16	q10, d20
   116a8:	vadd.i32	q8, q8, q11
   116ac:	vmovl.u16	q9, d18
   116b0:	vadd.i32	q8, q8, q10
   116b4:	vadd.i32	q8, q8, q9
   116b8:	bne	11648 <__assert_fail@plt+0x488>
   116bc:	ldr	r7, [sp]
   116c0:	cmp	r7, #0
   116c4:	beq	116f4 <__assert_fail@plt+0x534>
   116c8:	add	r2, sl, r3
   116cc:	rsb	r3, r7, #0
   116d0:	add	r7, sp, #40	; 0x28
   116d4:	ldr	r6, [r2], #4
   116d8:	adds	r3, r3, #1
   116dc:	str	r6, [sp, #40]	; 0x28
   116e0:	vld1.32	{d18[0]}, [r7 :32]
   116e4:	vmovl.u8	q9, d18
   116e8:	vmovl.u16	q9, d18
   116ec:	vadd.i32	q8, q8, q9
   116f0:	bcc	116d4 <__assert_fail@plt+0x514>
   116f4:	vext.8	q9, q8, q8, #8
   116f8:	ldr	r3, [sp, #4]
   116fc:	vadd.i32	q8, q8, q9
   11700:	cmp	r1, r3
   11704:	vdup.32	q9, d16[1]
   11708:	vadd.i32	q8, q8, q9
   1170c:	vmov.32	r8, d16[0]
   11710:	beq	11730 <__assert_fail@plt+0x570>
   11714:	sub	r0, r0, r3
   11718:	add	r2, sl, r3
   1171c:	add	r0, r0, r5
   11720:	ldrb	r3, [r2], #1
   11724:	subs	r0, r0, #1
   11728:	add	r8, r8, r3
   1172c:	bne	11720 <__assert_fail@plt+0x560>
   11730:	ldr	r0, [sp, #20]
   11734:	mov	r7, #0
   11738:	adds	r0, r0, r1
   1173c:	ldr	r1, [sp, #16]
   11740:	adcs	r1, r1, #0
   11744:	adcs	r2, r7, #0
   11748:	beq	11760 <__assert_fail@plt+0x5a0>
   1174c:	bl	110ac <__errno_location@plt>
   11750:	mov	r1, #75	; 0x4b
   11754:	mvn	r7, #0
   11758:	str	r1, [r0]
   1175c:	b	11780 <__assert_fail@plt+0x5c0>
   11760:	lsr	r2, r8, #16
   11764:	uxtah	r2, r2, r8
   11768:	lsr	r3, r2, #16
   1176c:	uxtah	r2, r3, r2
   11770:	ldr	r3, [sp, #8]
   11774:	str	r2, [r3]
   11778:	ldr	r2, [sp, #12]
   1177c:	strd	r0, [r2]
   11780:	mov	r0, sl
   11784:	bl	1223c <__assert_fail@plt+0x107c>
   11788:	mov	r0, r7
   1178c:	sub	sp, fp, #28
   11790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11794:	push	{r4, r5, r6, r7, fp, lr}
   11798:	add	fp, sp, #16
   1179c:	sub	sp, sp, #672	; 0x2a0
   117a0:	mov	r4, r0
   117a4:	ldr	r5, [r2]
   117a8:	mov	r2, #1
   117ac:	mov	r0, #0
   117b0:	mov	r1, #1024	; 0x400
   117b4:	mov	r3, #0
   117b8:	str	r2, [sp]
   117bc:	stmib	sp, {r0, r1}
   117c0:	str	r0, [sp, #12]
   117c4:	ldr	r0, [fp, #16]
   117c8:	ldr	r1, [fp, #20]
   117cc:	add	r2, sp, #20
   117d0:	bl	12310 <__assert_fail@plt+0x1150>
   117d4:	movw	r1, #32004	; 0x7d04
   117d8:	mov	r3, r0
   117dc:	mov	r0, #1
   117e0:	mov	r2, r5
   117e4:	movt	r1, #1
   117e8:	bl	110e8 <__printf_chk@plt>
   117ec:	ldr	r0, [fp, #12]
   117f0:	cmp	r0, #0
   117f4:	beq	1180c <__assert_fail@plt+0x64c>
   117f8:	movw	r1, #34412	; 0x866c
   117fc:	mov	r0, #1
   11800:	mov	r2, r4
   11804:	movt	r1, #1
   11808:	bl	110e8 <__printf_chk@plt>
   1180c:	movw	r0, #37228	; 0x916c
   11810:	ldr	r1, [fp, #8]
   11814:	movt	r0, #2
   11818:	ldr	r0, [r0]
   1181c:	ldr	r2, [r0, #20]
   11820:	ldr	r3, [r0, #24]
   11824:	cmp	r2, r3
   11828:	addcc	r3, r2, #1
   1182c:	strcc	r3, [r0, #20]
   11830:	strbcc	r1, [r2]
   11834:	subcc	sp, fp, #16
   11838:	popcc	{r4, r5, r6, r7, fp, pc}
   1183c:	bl	11130 <__overflow@plt>
   11840:	sub	sp, fp, #16
   11844:	pop	{r4, r5, r6, r7, fp, pc}
   11848:	push	{r4, r5, r6, r7, fp, lr}
   1184c:	add	fp, sp, #16
   11850:	sub	sp, sp, #672	; 0x2a0
   11854:	mov	r4, r0
   11858:	ldr	r5, [r2]
   1185c:	mov	r2, #1
   11860:	mov	r0, #0
   11864:	mov	r1, #512	; 0x200
   11868:	mov	r3, #0
   1186c:	str	r2, [sp]
   11870:	stmib	sp, {r0, r1}
   11874:	str	r0, [sp, #12]
   11878:	ldr	r0, [fp, #16]
   1187c:	ldr	r1, [fp, #20]
   11880:	add	r2, sp, #20
   11884:	bl	12310 <__assert_fail@plt+0x1150>
   11888:	movw	r1, #32013	; 0x7d0d
   1188c:	mov	r3, r0
   11890:	mov	r0, #1
   11894:	mov	r2, r5
   11898:	movt	r1, #1
   1189c:	bl	110e8 <__printf_chk@plt>
   118a0:	ldr	r0, [fp, #12]
   118a4:	cmp	r0, #0
   118a8:	beq	118c0 <__assert_fail@plt+0x700>
   118ac:	movw	r1, #34412	; 0x866c
   118b0:	mov	r0, #1
   118b4:	mov	r2, r4
   118b8:	movt	r1, #1
   118bc:	bl	110e8 <__printf_chk@plt>
   118c0:	movw	r0, #37228	; 0x916c
   118c4:	ldr	r1, [fp, #8]
   118c8:	movt	r0, #2
   118cc:	ldr	r0, [r0]
   118d0:	ldr	r2, [r0, #20]
   118d4:	ldr	r3, [r0, #24]
   118d8:	cmp	r2, r3
   118dc:	addcc	r3, r2, #1
   118e0:	strcc	r3, [r0, #20]
   118e4:	strbcc	r1, [r2]
   118e8:	subcc	sp, fp, #16
   118ec:	popcc	{r4, r5, r6, r7, fp, pc}
   118f0:	bl	11130 <__overflow@plt>
   118f4:	sub	sp, fp, #16
   118f8:	pop	{r4, r5, r6, r7, fp, pc}
   118fc:	push	{fp, lr}
   11900:	mov	fp, sp
   11904:	sub	sp, sp, #56	; 0x38
   11908:	mov	r4, r0
   1190c:	cmp	r0, #0
   11910:	bne	11b44 <__assert_fail@plt+0x984>
   11914:	movw	r1, #32058	; 0x7d3a
   11918:	mov	r0, #0
   1191c:	mov	r2, #5
   11920:	movt	r1, #1
   11924:	bl	10fb0 <dcgettext@plt>
   11928:	mov	r1, r0
   1192c:	movw	r0, #37248	; 0x9180
   11930:	movt	r0, #2
   11934:	ldr	r2, [r0]
   11938:	mov	r0, #1
   1193c:	bl	110e8 <__printf_chk@plt>
   11940:	movw	r1, #32091	; 0x7d5b
   11944:	mov	r0, #0
   11948:	mov	r2, #5
   1194c:	movt	r1, #1
   11950:	bl	10fb0 <dcgettext@plt>
   11954:	movw	r2, #32130	; 0x7d82
   11958:	mov	r1, r0
   1195c:	mov	r0, #1
   11960:	mov	r3, #16
   11964:	movt	r2, #1
   11968:	bl	110e8 <__printf_chk@plt>
   1196c:	movw	r1, #32461	; 0x7ecd
   11970:	mov	r0, #0
   11974:	mov	r2, #5
   11978:	movt	r1, #1
   1197c:	bl	10fb0 <dcgettext@plt>
   11980:	movw	r7, #37228	; 0x916c
   11984:	movt	r7, #2
   11988:	ldr	r1, [r7]
   1198c:	bl	10f2c <fputs_unlocked@plt>
   11990:	movw	r1, #32134	; 0x7d86
   11994:	mov	r0, #0
   11998:	mov	r2, #5
   1199c:	movt	r1, #1
   119a0:	bl	10fb0 <dcgettext@plt>
   119a4:	ldr	r1, [r7]
   119a8:	bl	10f2c <fputs_unlocked@plt>
   119ac:	movw	r1, #32272	; 0x7e10
   119b0:	mov	r0, #0
   119b4:	mov	r2, #5
   119b8:	movt	r1, #1
   119bc:	bl	10fb0 <dcgettext@plt>
   119c0:	ldr	r1, [r7]
   119c4:	bl	10f2c <fputs_unlocked@plt>
   119c8:	movw	r1, #32317	; 0x7e3d
   119cc:	mov	r0, #0
   119d0:	mov	r2, #5
   119d4:	movt	r1, #1
   119d8:	bl	10fb0 <dcgettext@plt>
   119dc:	ldr	r1, [r7]
   119e0:	bl	10f2c <fputs_unlocked@plt>
   119e4:	movw	r0, #32920	; 0x8098
   119e8:	mov	r2, #48	; 0x30
   119ec:	mov	r6, sp
   119f0:	movw	r5, #32608	; 0x7f60
   119f4:	movt	r0, #1
   119f8:	movt	r5, #1
   119fc:	add	r1, r0, #32
   11a00:	add	r3, r0, #16
   11a04:	vld1.64	{d18-d19}, [r0], r2
   11a08:	vld1.64	{d16-d17}, [r1]
   11a0c:	vld1.64	{d20-d21}, [r3]
   11a10:	vldr	d22, [r0]
   11a14:	add	r1, r6, #32
   11a18:	add	r0, r6, #16
   11a1c:	vst1.64	{d16-d17}, [r1]
   11a20:	movw	r1, #32517	; 0x7f05
   11a24:	vst1.64	{d20-d21}, [r0]
   11a28:	mov	r0, r6
   11a2c:	movt	r1, #1
   11a30:	vst1.64	{d18-d19}, [r0], r2
   11a34:	vstr	d22, [r0]
   11a38:	mov	r0, r5
   11a3c:	bl	10f44 <strcmp@plt>
   11a40:	cmp	r0, #0
   11a44:	ldrne	r1, [r6, #8]!
   11a48:	cmpne	r1, #0
   11a4c:	bne	11a38 <__assert_fail@plt+0x878>
   11a50:	movw	r1, #32612	; 0x7f64
   11a54:	ldr	r6, [r6, #4]
   11a58:	mov	r0, #0
   11a5c:	mov	r2, #5
   11a60:	movt	r1, #1
   11a64:	bl	10fb0 <dcgettext@plt>
   11a68:	movw	r2, #32398	; 0x7e8e
   11a6c:	movw	r3, #32635	; 0x7f7b
   11a70:	mov	r1, r0
   11a74:	mov	r0, #1
   11a78:	movt	r2, #1
   11a7c:	movt	r3, #1
   11a80:	bl	110e8 <__printf_chk@plt>
   11a84:	cmp	r6, #0
   11a88:	mov	r0, #5
   11a8c:	mov	r1, #0
   11a90:	moveq	r6, r5
   11a94:	bl	1113c <setlocale@plt>
   11a98:	cmp	r0, #0
   11a9c:	beq	11ad4 <__assert_fail@plt+0x914>
   11aa0:	movw	r1, #32675	; 0x7fa3
   11aa4:	mov	r2, #3
   11aa8:	movt	r1, #1
   11aac:	bl	1119c <strncmp@plt>
   11ab0:	cmp	r0, #0
   11ab4:	beq	11ad4 <__assert_fail@plt+0x914>
   11ab8:	movw	r1, #32679	; 0x7fa7
   11abc:	mov	r0, #0
   11ac0:	mov	r2, #5
   11ac4:	movt	r1, #1
   11ac8:	bl	10fb0 <dcgettext@plt>
   11acc:	ldr	r1, [r7]
   11ad0:	bl	10f2c <fputs_unlocked@plt>
   11ad4:	movw	r1, #32750	; 0x7fee
   11ad8:	mov	r0, #0
   11adc:	mov	r2, #5
   11ae0:	movt	r1, #1
   11ae4:	bl	10fb0 <dcgettext@plt>
   11ae8:	movw	r2, #32635	; 0x7f7b
   11aec:	mov	r1, r0
   11af0:	mov	r0, #1
   11af4:	mov	r3, r5
   11af8:	movt	r2, #1
   11afc:	bl	110e8 <__printf_chk@plt>
   11b00:	movw	r1, #32777	; 0x8009
   11b04:	mov	r0, #0
   11b08:	mov	r2, #5
   11b0c:	movt	r1, #1
   11b10:	bl	10fb0 <dcgettext@plt>
   11b14:	mov	r1, r0
   11b18:	movw	r0, #32545	; 0x7f21
   11b1c:	movw	r3, #32827	; 0x803b
   11b20:	cmp	r6, r5
   11b24:	mov	r2, r6
   11b28:	movt	r0, #1
   11b2c:	movt	r3, #1
   11b30:	moveq	r3, r0
   11b34:	mov	r0, #1
   11b38:	bl	110e8 <__printf_chk@plt>
   11b3c:	mov	r0, r4
   11b40:	bl	1107c <exit@plt>
   11b44:	movw	r0, #37216	; 0x9160
   11b48:	movw	r1, #32019	; 0x7d13
   11b4c:	mov	r2, #5
   11b50:	movt	r0, #2
   11b54:	movt	r1, #1
   11b58:	ldr	r5, [r0]
   11b5c:	mov	r0, #0
   11b60:	bl	10fb0 <dcgettext@plt>
   11b64:	mov	r2, r0
   11b68:	movw	r0, #37248	; 0x9180
   11b6c:	mov	r1, #1
   11b70:	movt	r0, #2
   11b74:	ldr	r3, [r0]
   11b78:	mov	r0, r5
   11b7c:	bl	11100 <__fprintf_chk@plt>
   11b80:	mov	r0, r4
   11b84:	bl	1107c <exit@plt>
   11b88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b8c:	add	fp, sp, #28
   11b90:	sub	sp, sp, #52	; 0x34
   11b94:	str	r0, [sp, #20]
   11b98:	ldr	r0, [r1]
   11b9c:	mov	r7, r1
   11ba0:	bl	133c8 <__assert_fail@plt+0x2208>
   11ba4:	movw	r1, #32827	; 0x803b
   11ba8:	mov	r0, #6
   11bac:	movt	r1, #1
   11bb0:	bl	1113c <setlocale@plt>
   11bb4:	movw	r4, #32402	; 0x7e92
   11bb8:	movw	r1, #32371	; 0x7e73
   11bbc:	movt	r4, #1
   11bc0:	movt	r1, #1
   11bc4:	mov	r0, r4
   11bc8:	bl	11184 <bindtextdomain@plt>
   11bcc:	mov	r0, r4
   11bd0:	bl	10fc8 <textdomain@plt>
   11bd4:	movw	r0, #8040	; 0x1f68
   11bd8:	movt	r0, #1
   11bdc:	bl	17cdc <__assert_fail@plt+0x6b1c>
   11be0:	movw	r8, #37228	; 0x916c
   11be4:	mov	r1, #0
   11be8:	mov	r2, #1
   11bec:	mov	r3, #0
   11bf0:	mov	r5, #0
   11bf4:	movt	r8, #2
   11bf8:	ldr	r0, [r8]
   11bfc:	bl	110d0 <setvbuf@plt>
   11c00:	sub	r0, fp, #34	; 0x22
   11c04:	movw	r6, #32395	; 0x7e8b
   11c08:	movw	r4, #32848	; 0x8050
   11c0c:	add	r0, r0, #3
   11c10:	movt	r6, #1
   11c14:	movt	r4, #1
   11c18:	and	r1, r0, #3
   11c1c:	sub	r0, r0, r1
   11c20:	str	r0, [sp, #28]
   11c24:	b	11c34 <__assert_fail@plt+0xa74>
   11c28:	movw	r0, #37236	; 0x9174
   11c2c:	movt	r0, #2
   11c30:	strb	r1, [r0]
   11c34:	ldr	r0, [sp, #20]
   11c38:	mov	r1, r7
   11c3c:	mov	r2, r6
   11c40:	mov	r3, r4
   11c44:	str	r5, [sp]
   11c48:	bl	11064 <getopt_long@plt>
   11c4c:	cmp	r0, #113	; 0x71
   11c50:	ble	11c70 <__assert_fail@plt+0xab0>
   11c54:	cmp	r0, #114	; 0x72
   11c58:	mov	r1, #0
   11c5c:	beq	11c28 <__assert_fail@plt+0xa68>
   11c60:	cmp	r0, #115	; 0x73
   11c64:	bne	11f14 <__assert_fail@plt+0xd54>
   11c68:	mov	r1, #1
   11c6c:	b	11c28 <__assert_fail@plt+0xa68>
   11c70:	cmn	r0, #1
   11c74:	bne	11eb0 <__assert_fail@plt+0xcf0>
   11c78:	movw	r0, #37208	; 0x9158
   11c7c:	ldr	r1, [sp, #20]
   11c80:	movw	r4, #37236	; 0x9174
   11c84:	movt	r0, #2
   11c88:	movt	r4, #2
   11c8c:	ldr	r0, [r0]
   11c90:	add	r6, r7, r1, lsl #2
   11c94:	cmp	r0, r1
   11c98:	add	r5, r7, r0, lsl #2
   11c9c:	mov	r0, #1
   11ca0:	movweq	r1, #33206	; 0x81b6
   11ca4:	str	r0, [sp, #24]
   11ca8:	movteq	r1, #1
   11cac:	streq	r1, [r6], #4
   11cb0:	cmp	r5, r6
   11cb4:	bcs	11e78 <__assert_fail@plt+0xcb8>
   11cb8:	mov	r0, #1
   11cbc:	str	r0, [sp, #24]
   11cc0:	b	11d28 <__assert_fail@plt+0xb68>
   11cc4:	movw	r1, #37208	; 0x9158
   11cc8:	ldrb	r0, [r4]
   11ccc:	ldr	r4, [sp, #20]
   11cd0:	ldr	r2, [sp, #32]
   11cd4:	ldr	r3, [sp, #36]	; 0x24
   11cd8:	movt	r1, #2
   11cdc:	ldr	r1, [r1]
   11ce0:	subs	r1, r1, r4
   11ce4:	mov	r4, #10
   11ce8:	movwne	r1, #1
   11cec:	str	r4, [sp]
   11cf0:	stmib	sp, {r1, r2, r3}
   11cf4:	movw	r1, #32912	; 0x8090
   11cf8:	ldr	r2, [sp, #28]
   11cfc:	mov	r3, #0
   11d00:	movt	r1, #1
   11d04:	ldr	r4, [r1, r0, lsl #2]
   11d08:	mov	r0, r7
   11d0c:	mov	r1, #0
   11d10:	blx	r4
   11d14:	movw	r4, #37236	; 0x9174
   11d18:	movt	r4, #2
   11d1c:	add	r5, r5, #4
   11d20:	cmp	r5, r6
   11d24:	bcs	11e78 <__assert_fail@plt+0xcb8>
   11d28:	ldr	r7, [r5]
   11d2c:	movw	r1, #33206	; 0x81b6
   11d30:	movt	r1, #1
   11d34:	mov	r0, r7
   11d38:	bl	10f44 <strcmp@plt>
   11d3c:	mov	r9, r0
   11d40:	cmp	r0, #0
   11d44:	beq	11d9c <__assert_fail@plt+0xbdc>
   11d48:	movw	r1, #33009	; 0x80f1
   11d4c:	mov	r0, r7
   11d50:	movt	r1, #1
   11d54:	bl	1218c <__assert_fail@plt+0xfcc>
   11d58:	mov	sl, r0
   11d5c:	cmp	r0, #0
   11d60:	bne	11db0 <__assert_fail@plt+0xbf0>
   11d64:	bl	110ac <__errno_location@plt>
   11d68:	ldr	r4, [r0]
   11d6c:	mov	r0, #0
   11d70:	mov	r1, #3
   11d74:	mov	r2, r7
   11d78:	str	r0, [sp, #24]
   11d7c:	mov	r0, #0
   11d80:	bl	150e0 <__assert_fail@plt+0x3f20>
   11d84:	mov	r1, r4
   11d88:	movw	r4, #37236	; 0x9174
   11d8c:	mov	r3, r0
   11d90:	mov	r0, #0
   11d94:	movt	r4, #2
   11d98:	b	11e60 <__assert_fail@plt+0xca0>
   11d9c:	mov	r0, #1
   11da0:	strb	r0, [r4, #1]
   11da4:	movw	r0, #37224	; 0x9168
   11da8:	movt	r0, #2
   11dac:	ldr	sl, [r0]
   11db0:	mov	r0, sl
   11db4:	mov	r1, #2
   11db8:	bl	12058 <__assert_fail@plt+0xe98>
   11dbc:	ldrb	r0, [r4]
   11dc0:	movw	r1, #32976	; 0x80d0
   11dc4:	add	r2, sp, #32
   11dc8:	movt	r1, #1
   11dcc:	ldr	r3, [r1, r0, lsl #2]
   11dd0:	ldr	r1, [sp, #28]
   11dd4:	mov	r0, sl
   11dd8:	blx	r3
   11ddc:	cmp	r0, #0
   11de0:	beq	11e20 <__assert_fail@plt+0xc60>
   11de4:	bl	110ac <__errno_location@plt>
   11de8:	ldr	r8, [r0]
   11dec:	mov	r0, sl
   11df0:	cmp	r9, #0
   11df4:	beq	11e30 <__assert_fail@plt+0xc70>
   11df8:	bl	12094 <__assert_fail@plt+0xed4>
   11dfc:	cmp	r8, #0
   11e00:	bne	11e14 <__assert_fail@plt+0xc54>
   11e04:	cmp	r0, #0
   11e08:	beq	11e14 <__assert_fail@plt+0xc54>
   11e0c:	bl	110ac <__errno_location@plt>
   11e10:	ldr	r8, [r0]
   11e14:	cmp	r8, #0
   11e18:	bne	11e3c <__assert_fail@plt+0xc7c>
   11e1c:	b	11cc4 <__assert_fail@plt+0xb04>
   11e20:	mov	r8, #0
   11e24:	mov	r0, sl
   11e28:	cmp	r9, #0
   11e2c:	bne	11df8 <__assert_fail@plt+0xc38>
   11e30:	bl	1116c <clearerr_unlocked@plt>
   11e34:	cmp	r8, #0
   11e38:	beq	11cc4 <__assert_fail@plt+0xb04>
   11e3c:	mov	r0, #0
   11e40:	mov	r1, #3
   11e44:	mov	r2, r7
   11e48:	str	r0, [sp, #24]
   11e4c:	mov	r0, #0
   11e50:	bl	150e0 <__assert_fail@plt+0x3f20>
   11e54:	mov	r3, r0
   11e58:	mov	r0, #0
   11e5c:	mov	r1, r8
   11e60:	movw	r2, #34413	; 0x866d
   11e64:	movt	r2, #1
   11e68:	bl	1101c <error@plt>
   11e6c:	add	r5, r5, #4
   11e70:	cmp	r5, r6
   11e74:	bcc	11d28 <__assert_fail@plt+0xb68>
   11e78:	ldrb	r0, [r4, #1]
   11e7c:	cmp	r0, #0
   11e80:	beq	11e9c <__assert_fail@plt+0xcdc>
   11e84:	movw	r0, #37224	; 0x9168
   11e88:	movt	r0, #2
   11e8c:	ldr	r0, [r0]
   11e90:	bl	12094 <__assert_fail@plt+0xed4>
   11e94:	cmn	r0, #1
   11e98:	beq	11f1c <__assert_fail@plt+0xd5c>
   11e9c:	ldr	r1, [sp, #24]
   11ea0:	mov	r0, #1
   11ea4:	bic	r0, r0, r1
   11ea8:	sub	sp, fp, #28
   11eac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11eb0:	cmn	r0, #3
   11eb4:	bne	11f04 <__assert_fail@plt+0xd44>
   11eb8:	movw	r0, #37120	; 0x9100
   11ebc:	movw	r2, #32430	; 0x7eae
   11ec0:	mov	r1, #0
   11ec4:	movw	r7, #32412	; 0x7e9c
   11ec8:	movt	r0, #2
   11ecc:	movt	r2, #1
   11ed0:	str	r1, [sp, #8]
   11ed4:	movw	r1, #32608	; 0x7f60
   11ed8:	movt	r7, #1
   11edc:	movt	r1, #1
   11ee0:	ldr	r3, [r0]
   11ee4:	ldr	r0, [r8]
   11ee8:	str	r2, [sp, #4]
   11eec:	movw	r2, #32398	; 0x7e8e
   11ef0:	str	r7, [sp]
   11ef4:	movt	r2, #1
   11ef8:	bl	1583c <__assert_fail@plt+0x467c>
   11efc:	mov	r0, #0
   11f00:	bl	1107c <exit@plt>
   11f04:	cmn	r0, #2
   11f08:	bne	11f14 <__assert_fail@plt+0xd54>
   11f0c:	mov	r0, #0
   11f10:	bl	118fc <__assert_fail@plt+0x73c>
   11f14:	mov	r0, #1
   11f18:	bl	118fc <__assert_fail@plt+0x73c>
   11f1c:	bl	110ac <__errno_location@plt>
   11f20:	movw	r1, #32446	; 0x7ebe
   11f24:	ldr	r4, [r0]
   11f28:	mov	r0, #0
   11f2c:	mov	r2, #5
   11f30:	movt	r1, #1
   11f34:	bl	10fb0 <dcgettext@plt>
   11f38:	mov	r2, r0
   11f3c:	mov	r0, #1
   11f40:	mov	r1, r4
   11f44:	bl	1101c <error@plt>
   11f48:	movw	r1, #37240	; 0x9178
   11f4c:	movt	r1, #2
   11f50:	str	r0, [r1, #4]
   11f54:	bx	lr
   11f58:	movw	r1, #37240	; 0x9178
   11f5c:	movt	r1, #2
   11f60:	strb	r0, [r1]
   11f64:	bx	lr
   11f68:	push	{r4, r5, r6, sl, fp, lr}
   11f6c:	add	fp, sp, #16
   11f70:	sub	sp, sp, #8
   11f74:	movw	r0, #37228	; 0x916c
   11f78:	movt	r0, #2
   11f7c:	ldr	r0, [r0]
   11f80:	bl	172bc <__assert_fail@plt+0x60fc>
   11f84:	cmp	r0, #0
   11f88:	beq	11fb0 <__assert_fail@plt+0xdf0>
   11f8c:	movw	r5, #37240	; 0x9178
   11f90:	movt	r5, #2
   11f94:	ldrb	r0, [r5]
   11f98:	cmp	r0, #0
   11f9c:	beq	11fdc <__assert_fail@plt+0xe1c>
   11fa0:	bl	110ac <__errno_location@plt>
   11fa4:	ldr	r0, [r0]
   11fa8:	cmp	r0, #32
   11fac:	bne	11fdc <__assert_fail@plt+0xe1c>
   11fb0:	movw	r0, #37216	; 0x9160
   11fb4:	movt	r0, #2
   11fb8:	ldr	r0, [r0]
   11fbc:	bl	172bc <__assert_fail@plt+0x60fc>
   11fc0:	cmp	r0, #0
   11fc4:	subeq	sp, fp, #16
   11fc8:	popeq	{r4, r5, r6, sl, fp, pc}
   11fcc:	movw	r0, #37124	; 0x9104
   11fd0:	movt	r0, #2
   11fd4:	ldr	r0, [r0]
   11fd8:	bl	10f80 <_exit@plt>
   11fdc:	movw	r1, #32999	; 0x80e7
   11fe0:	mov	r0, #0
   11fe4:	mov	r2, #5
   11fe8:	movt	r1, #1
   11fec:	bl	10fb0 <dcgettext@plt>
   11ff0:	ldr	r6, [r5, #4]
   11ff4:	mov	r4, r0
   11ff8:	bl	110ac <__errno_location@plt>
   11ffc:	ldr	r5, [r0]
   12000:	cmp	r6, #0
   12004:	bne	12020 <__assert_fail@plt+0xe60>
   12008:	movw	r2, #34413	; 0x866d
   1200c:	mov	r0, #0
   12010:	mov	r1, r5
   12014:	mov	r3, r4
   12018:	movt	r2, #1
   1201c:	b	12040 <__assert_fail@plt+0xe80>
   12020:	mov	r0, r6
   12024:	bl	15004 <__assert_fail@plt+0x3e44>
   12028:	movw	r2, #33011	; 0x80f3
   1202c:	mov	r3, r0
   12030:	str	r4, [sp]
   12034:	mov	r0, #0
   12038:	mov	r1, r5
   1203c:	movt	r2, #1
   12040:	bl	1101c <error@plt>
   12044:	movw	r0, #37124	; 0x9104
   12048:	movt	r0, #2
   1204c:	ldr	r0, [r0]
   12050:	bl	10f80 <_exit@plt>
   12054:	b	10f50 <posix_fadvise64@plt>
   12058:	cmp	r0, #0
   1205c:	bxeq	lr
   12060:	push	{r4, sl, fp, lr}
   12064:	add	fp, sp, #8
   12068:	sub	sp, sp, #16
   1206c:	mov	r4, r1
   12070:	bl	110f4 <fileno@plt>
   12074:	mov	r1, #0
   12078:	mov	r2, #0
   1207c:	mov	r3, #0
   12080:	str	r1, [sp]
   12084:	stmib	sp, {r1, r4}
   12088:	bl	10f50 <posix_fadvise64@plt>
   1208c:	sub	sp, fp, #8
   12090:	pop	{r4, sl, fp, pc}
   12094:	push	{r4, r5, r6, sl, fp, lr}
   12098:	add	fp, sp, #16
   1209c:	sub	sp, sp, #8
   120a0:	mov	r4, r0
   120a4:	bl	110f4 <fileno@plt>
   120a8:	cmn	r0, #1
   120ac:	ble	12120 <__assert_fail@plt+0xf60>
   120b0:	mov	r0, r4
   120b4:	bl	1104c <__freading@plt>
   120b8:	cmp	r0, #0
   120bc:	beq	120e8 <__assert_fail@plt+0xf28>
   120c0:	mov	r0, r4
   120c4:	bl	110f4 <fileno@plt>
   120c8:	mov	r1, #1
   120cc:	mov	r2, #0
   120d0:	mov	r3, #0
   120d4:	str	r1, [sp]
   120d8:	bl	10fec <lseek64@plt>
   120dc:	and	r0, r0, r1
   120e0:	cmn	r0, #1
   120e4:	beq	12120 <__assert_fail@plt+0xf60>
   120e8:	mov	r0, r4
   120ec:	bl	12130 <__assert_fail@plt+0xf70>
   120f0:	cmp	r0, #0
   120f4:	beq	12120 <__assert_fail@plt+0xf60>
   120f8:	bl	110ac <__errno_location@plt>
   120fc:	ldr	r6, [r0]
   12100:	mov	r5, r0
   12104:	mov	r0, r4
   12108:	bl	1110c <fclose@plt>
   1210c:	cmp	r6, #0
   12110:	strne	r6, [r5]
   12114:	mvnne	r0, #0
   12118:	sub	sp, fp, #16
   1211c:	pop	{r4, r5, r6, sl, fp, pc}
   12120:	mov	r0, r4
   12124:	sub	sp, fp, #16
   12128:	pop	{r4, r5, r6, sl, fp, lr}
   1212c:	b	1110c <fclose@plt>
   12130:	push	{r4, sl, fp, lr}
   12134:	add	fp, sp, #8
   12138:	sub	sp, sp, #8
   1213c:	mov	r4, r0
   12140:	cmp	r0, #0
   12144:	beq	1217c <__assert_fail@plt+0xfbc>
   12148:	mov	r0, r4
   1214c:	bl	1104c <__freading@plt>
   12150:	cmp	r0, #0
   12154:	beq	1217c <__assert_fail@plt+0xfbc>
   12158:	ldrb	r0, [r4, #1]
   1215c:	tst	r0, #1
   12160:	beq	1217c <__assert_fail@plt+0xfbc>
   12164:	mov	r0, #1
   12168:	mov	r2, #0
   1216c:	mov	r3, #0
   12170:	str	r0, [sp]
   12174:	mov	r0, r4
   12178:	bl	12264 <__assert_fail@plt+0x10a4>
   1217c:	mov	r0, r4
   12180:	sub	sp, fp, #8
   12184:	pop	{r4, sl, fp, lr}
   12188:	b	10f5c <fflush@plt>
   1218c:	push	{r4, r5, r6, r7, fp, lr}
   12190:	add	fp, sp, #16
   12194:	mov	r5, r1
   12198:	bl	11178 <fopen64@plt>
   1219c:	mov	r4, #0
   121a0:	cmp	r0, #0
   121a4:	beq	1220c <__assert_fail@plt+0x104c>
   121a8:	mov	r6, r0
   121ac:	bl	110f4 <fileno@plt>
   121b0:	cmp	r0, #2
   121b4:	bhi	12214 <__assert_fail@plt+0x1054>
   121b8:	bl	153a4 <__assert_fail@plt+0x41e4>
   121bc:	cmn	r0, #1
   121c0:	ble	1221c <__assert_fail@plt+0x105c>
   121c4:	mov	r7, r0
   121c8:	mov	r0, r6
   121cc:	bl	12094 <__assert_fail@plt+0xed4>
   121d0:	cmp	r0, #0
   121d4:	bne	121f0 <__assert_fail@plt+0x1030>
   121d8:	mov	r0, r7
   121dc:	mov	r1, r5
   121e0:	bl	10f14 <fdopen@plt>
   121e4:	mov	r4, r0
   121e8:	cmp	r0, #0
   121ec:	bne	1220c <__assert_fail@plt+0x104c>
   121f0:	bl	110ac <__errno_location@plt>
   121f4:	ldr	r5, [r0]
   121f8:	mov	r4, r0
   121fc:	mov	r0, r7
   12200:	bl	111b4 <close@plt>
   12204:	str	r5, [r4]
   12208:	mov	r4, #0
   1220c:	mov	r0, r4
   12210:	pop	{r4, r5, r6, r7, fp, pc}
   12214:	mov	r0, r6
   12218:	pop	{r4, r5, r6, r7, fp, pc}
   1221c:	bl	110ac <__errno_location@plt>
   12220:	ldr	r7, [r0]
   12224:	mov	r5, r0
   12228:	mov	r0, r6
   1222c:	bl	12094 <__assert_fail@plt+0xed4>
   12230:	mov	r0, r4
   12234:	str	r7, [r5]
   12238:	pop	{r4, r5, r6, r7, fp, pc}
   1223c:	push	{r4, r5, r6, sl, fp, lr}
   12240:	add	fp, sp, #16
   12244:	mov	r4, r0
   12248:	bl	110ac <__errno_location@plt>
   1224c:	ldr	r6, [r0]
   12250:	mov	r5, r0
   12254:	mov	r0, r4
   12258:	bl	10f74 <free@plt>
   1225c:	str	r6, [r5]
   12260:	pop	{r4, r5, r6, sl, fp, pc}
   12264:	push	{r4, r5, r6, r7, fp, lr}
   12268:	add	fp, sp, #16
   1226c:	sub	sp, sp, #8
   12270:	mov	r4, r0
   12274:	ldr	r0, [r0, #4]
   12278:	mov	r5, r3
   1227c:	mov	r6, r2
   12280:	ldr	r1, [r4, #8]
   12284:	cmp	r1, r0
   12288:	bne	122a4 <__assert_fail@plt+0x10e4>
   1228c:	ldrd	r0, [r4, #16]
   12290:	cmp	r1, r0
   12294:	bne	122a4 <__assert_fail@plt+0x10e4>
   12298:	ldr	r0, [r4, #36]	; 0x24
   1229c:	cmp	r0, #0
   122a0:	beq	122bc <__assert_fail@plt+0x10fc>
   122a4:	mov	r0, r4
   122a8:	mov	r2, r6
   122ac:	mov	r3, r5
   122b0:	sub	sp, fp, #16
   122b4:	pop	{r4, r5, r6, r7, fp, lr}
   122b8:	b	11118 <fseeko64@plt>
   122bc:	ldr	r7, [fp, #8]
   122c0:	mov	r0, r4
   122c4:	bl	110f4 <fileno@plt>
   122c8:	mov	r2, r6
   122cc:	mov	r3, r5
   122d0:	str	r7, [sp]
   122d4:	bl	10fec <lseek64@plt>
   122d8:	and	r2, r0, r1
   122dc:	cmn	r2, #1
   122e0:	beq	12300 <__assert_fail@plt+0x1140>
   122e4:	strd	r0, [r4, #80]	; 0x50
   122e8:	ldr	r0, [r4]
   122ec:	bic	r0, r0, #16
   122f0:	str	r0, [r4]
   122f4:	mov	r0, #0
   122f8:	sub	sp, fp, #16
   122fc:	pop	{r4, r5, r6, r7, fp, pc}
   12300:	mvn	r0, #0
   12304:	sub	sp, fp, #16
   12308:	pop	{r4, r5, r6, r7, fp, pc}
   1230c:	andeq	r0, r0, r0
   12310:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12314:	add	fp, sp, #28
   12318:	sub	sp, sp, #4
   1231c:	vpush	{d8-d9}
   12320:	sub	sp, sp, #104	; 0x68
   12324:	mov	r6, r3
   12328:	mov	r7, r2
   1232c:	str	r1, [sp, #44]	; 0x2c
   12330:	mov	sl, r0
   12334:	bl	11160 <localeconv@plt>
   12338:	ldr	r5, [r0]
   1233c:	mov	r4, r0
   12340:	mov	r0, r5
   12344:	bl	11094 <strlen@plt>
   12348:	sub	r1, r0, #1
   1234c:	movw	r2, #33018	; 0x80fa
   12350:	cmp	r1, #16
   12354:	movt	r2, #1
   12358:	movcs	r0, #1
   1235c:	movcc	r2, r5
   12360:	ldr	r5, [r4, #4]
   12364:	str	r0, [sp, #12]
   12368:	ldr	r0, [r4, #8]
   1236c:	str	r2, [sp, #8]
   12370:	str	r0, [sp, #16]
   12374:	mov	r0, r5
   12378:	bl	11094 <strlen@plt>
   1237c:	cmp	r0, #17
   12380:	movw	r0, #647	; 0x287
   12384:	movw	r1, #32827	; 0x803b
   12388:	str	r7, [sp, #32]
   1238c:	ldr	r4, [fp, #16]
   12390:	str	r6, [sp, #40]	; 0x28
   12394:	add	r0, r7, r0
   12398:	movt	r1, #1
   1239c:	movcc	r1, r5
   123a0:	ldr	r7, [fp, #8]
   123a4:	ldr	r5, [fp, #12]
   123a8:	str	r0, [sp, #36]	; 0x24
   123ac:	ands	r0, r6, #32
   123b0:	str	r1, [sp, #52]	; 0x34
   123b4:	str	r0, [sp, #24]
   123b8:	mov	r0, #1000	; 0x3e8
   123bc:	movwne	r0, #1024	; 0x400
   123c0:	str	r0, [sp, #20]
   123c4:	and	r0, r6, #3
   123c8:	ldr	r6, [fp, #20]
   123cc:	str	r0, [sp, #48]	; 0x30
   123d0:	subs	r0, r7, r4
   123d4:	sbcs	r0, r5, r6
   123d8:	bcs	124c4 <__assert_fail@plt+0x1304>
   123dc:	orrs	r0, r7, r5
   123e0:	beq	125cc <__assert_fail@plt+0x140c>
   123e4:	ldr	r9, [fp, #16]
   123e8:	mov	r1, r6
   123ec:	mov	r2, r7
   123f0:	mov	r3, r5
   123f4:	mov	r0, r9
   123f8:	bl	17ac4 <__assert_fail@plt+0x6904>
   123fc:	mov	r4, r0
   12400:	mov	r8, r1
   12404:	umull	r0, r1, r0, r7
   12408:	mla	r1, r4, r5, r1
   1240c:	mla	r1, r8, r7, r1
   12410:	subs	r0, r9, r0
   12414:	sbc	r1, r6, r1
   12418:	orrs	r0, r0, r1
   1241c:	bne	125cc <__assert_fail@plt+0x140c>
   12420:	ldr	r5, [sp, #44]	; 0x2c
   12424:	mov	r0, sl
   12428:	mov	r2, r4
   1242c:	mov	r3, r8
   12430:	mov	r1, r5
   12434:	bl	17ac4 <__assert_fail@plt+0x6904>
   12438:	mov	r9, r1
   1243c:	umull	r2, r1, r0, r4
   12440:	str	r0, [sp, #28]
   12444:	mov	r3, r8
   12448:	mla	r1, r0, r8, r1
   1244c:	mla	r1, r9, r4, r1
   12450:	subs	r0, sl, r2
   12454:	mov	r2, #10
   12458:	sbc	r1, r5, r1
   1245c:	umull	r5, r0, r0, r2
   12460:	mov	r2, r4
   12464:	add	r1, r1, r1, lsl #2
   12468:	add	r6, r0, r1, lsl #1
   1246c:	mov	r0, r5
   12470:	mov	r1, r6
   12474:	bl	17ac4 <__assert_fail@plt+0x6904>
   12478:	mov	r7, r0
   1247c:	umull	r0, r2, r0, r4
   12480:	mla	r2, r7, r8, r2
   12484:	mla	r1, r1, r4, r2
   12488:	mov	r2, #2
   1248c:	subs	r0, r5, r0
   12490:	sbc	r1, r6, r1
   12494:	subs	r3, r4, r0, lsl #1
   12498:	lsl	r1, r1, #1
   1249c:	orr	r1, r1, r0, lsr #31
   124a0:	orr	ip, r1, r0, lsl #1
   124a4:	sbcs	r3, r8, r1
   124a8:	movwcc	r2, #3
   124ac:	cmp	ip, #0
   124b0:	movwne	ip, #1
   124b4:	rsbs	r0, r4, r0, lsl #1
   124b8:	sbcs	r0, r1, r8
   124bc:	movcs	ip, r2
   124c0:	b	12530 <__assert_fail@plt+0x1370>
   124c4:	mov	r0, r7
   124c8:	mov	r1, r5
   124cc:	mov	r2, r4
   124d0:	mov	r3, r6
   124d4:	bl	17ac4 <__assert_fail@plt+0x6904>
   124d8:	mov	r2, r0
   124dc:	mov	r3, r1
   124e0:	umull	r0, r1, r0, r4
   124e4:	mla	r1, r2, r6, r1
   124e8:	mla	r1, r3, r4, r1
   124ec:	subs	r0, r7, r0
   124f0:	sbc	r1, r5, r1
   124f4:	orrs	r0, r0, r1
   124f8:	bne	125cc <__assert_fail@plt+0x140c>
   124fc:	ldr	r4, [sp, #44]	; 0x2c
   12500:	umull	r0, r1, r2, sl
   12504:	mla	r1, r2, r4, r1
   12508:	str	r0, [sp, #28]
   1250c:	mla	r9, r3, sl, r1
   12510:	mov	r1, r9
   12514:	bl	17ac4 <__assert_fail@plt+0x6904>
   12518:	eor	r1, r1, r4
   1251c:	eor	r0, r0, sl
   12520:	orrs	r0, r0, r1
   12524:	bne	125cc <__assert_fail@plt+0x140c>
   12528:	mov	ip, #0
   1252c:	mov	r7, #0
   12530:	ldr	r0, [sp, #40]	; 0x28
   12534:	ldr	r8, [sp, #20]
   12538:	ldr	r5, [sp, #48]	; 0x30
   1253c:	mvn	r3, #0
   12540:	ands	r4, r0, #16
   12544:	beq	128e0 <__assert_fail@plt+0x1720>
   12548:	ldr	sl, [sp, #28]
   1254c:	mov	r3, #0
   12550:	subs	r0, sl, r8
   12554:	sbcs	r0, r9, #0
   12558:	bcc	12ea4 <__assert_fail@plt+0x1ce4>
   1255c:	mov	r0, sl
   12560:	mov	r1, r9
   12564:	mov	r2, r8
   12568:	mov	r3, #0
   1256c:	mov	r6, r5
   12570:	mov	r5, ip
   12574:	bl	17ac4 <__assert_fail@plt+0x6904>
   12578:	mov	r3, sl
   1257c:	mov	sl, r0
   12580:	mov	r2, r5
   12584:	mov	r9, r1
   12588:	mls	r0, r0, r8, r3
   1258c:	add	r0, r0, r0, lsl #2
   12590:	add	r0, r7, r0, lsl #1
   12594:	udiv	r7, r0, r8
   12598:	mls	r0, r7, r8, r0
   1259c:	lsl	r0, r0, #1
   125a0:	orr	r0, r0, r5, lsr #1
   125a4:	cmp	r0, r8
   125a8:	bcs	12ae8 <__assert_fail@plt+0x1928>
   125ac:	rsb	r1, r2, #0
   125b0:	subs	ip, r0, r1
   125b4:	movwne	ip, #1
   125b8:	subs	r0, sl, r8
   125bc:	mov	r3, #1
   125c0:	sbcs	r0, r9, #0
   125c4:	bcs	12b08 <__assert_fail@plt+0x1948>
   125c8:	b	12c2c <__assert_fail@plt+0x1a6c>
   125cc:	ldr	r9, [fp, #16]
   125d0:	mov	r1, r6
   125d4:	mov	r0, r9
   125d8:	bl	17a50 <__assert_fail@plt+0x6890>
   125dc:	vmov	d8, r0, r1
   125e0:	ldr	r1, [sp, #44]	; 0x2c
   125e4:	mov	r0, sl
   125e8:	bl	17a50 <__assert_fail@plt+0x6890>
   125ec:	mov	r4, r0
   125f0:	mov	r6, r1
   125f4:	mov	r0, r7
   125f8:	mov	r1, r5
   125fc:	bl	17a50 <__assert_fail@plt+0x6890>
   12600:	vmov	d16, r0, r1
   12604:	vmov	d17, r4, r6
   12608:	ldr	r5, [sp, #40]	; 0x28
   1260c:	tst	r5, #16
   12610:	vdiv.f64	d16, d16, d8
   12614:	vmul.f64	d8, d16, d17
   12618:	bne	12698 <__assert_fail@plt+0x14d8>
   1261c:	ldr	r6, [sp, #48]	; 0x30
   12620:	cmp	r6, #1
   12624:	beq	12928 <__assert_fail@plt+0x1768>
   12628:	vldr	d16, [pc, #752]	; 12920 <__assert_fail@plt+0x1760>
   1262c:	ldr	r7, [sp, #36]	; 0x24
   12630:	ldr	sl, [sp, #32]
   12634:	vcmpe.f64	d8, d16
   12638:	vmrs	APSR_nzcv, fpscr
   1263c:	bpl	12930 <__assert_fail@plt+0x1770>
   12640:	vmov	r0, r1, d8
   12644:	bl	17b10 <__assert_fail@plt+0x6950>
   12648:	mov	r4, r0
   1264c:	mov	r8, r1
   12650:	mov	r0, #0
   12654:	cmp	r6, #0
   12658:	mov	r2, #0
   1265c:	bne	12684 <__assert_fail@plt+0x14c4>
   12660:	mov	r0, r4
   12664:	mov	r1, r8
   12668:	bl	17a50 <__assert_fail@plt+0x6890>
   1266c:	vmov	d16, r0, r1
   12670:	mov	r2, #0
   12674:	mov	r0, #0
   12678:	vcmp.f64	d8, d16
   1267c:	vmrs	APSR_nzcv, fpscr
   12680:	movwne	r0, #1
   12684:	adds	r0, r0, r4
   12688:	adc	r1, r2, r8
   1268c:	bl	17a50 <__assert_fail@plt+0x6890>
   12690:	vmov	d8, r0, r1
   12694:	b	12930 <__assert_fail@plt+0x1770>
   12698:	ldr	r0, [sp, #20]
   1269c:	mov	r1, #1
   126a0:	vmov	s0, r0
   126a4:	vcvt.f64.u32	d16, s0
   126a8:	ldr	r6, [sp, #48]	; 0x30
   126ac:	vmul.f64	d17, d16, d16
   126b0:	vcmpe.f64	d17, d8
   126b4:	vmrs	APSR_nzcv, fpscr
   126b8:	bls	126d0 <__assert_fail@plt+0x1510>
   126bc:	ldr	r7, [sp, #36]	; 0x24
   126c0:	ldr	sl, [sp, #32]
   126c4:	ldr	r9, [sp, #12]
   126c8:	vmov.f64	d17, d16
   126cc:	b	1276c <__assert_fail@plt+0x15ac>
   126d0:	vmul.f64	d18, d17, d16
   126d4:	ldr	r7, [sp, #36]	; 0x24
   126d8:	ldr	sl, [sp, #32]
   126dc:	ldr	r9, [sp, #12]
   126e0:	mov	r1, #2
   126e4:	vcmpe.f64	d18, d8
   126e8:	vmrs	APSR_nzcv, fpscr
   126ec:	bhi	1276c <__assert_fail@plt+0x15ac>
   126f0:	vmul.f64	d19, d18, d16
   126f4:	vmov.f64	d17, d18
   126f8:	mov	r1, #3
   126fc:	vcmpe.f64	d19, d8
   12700:	vmrs	APSR_nzcv, fpscr
   12704:	bhi	1276c <__assert_fail@plt+0x15ac>
   12708:	vmul.f64	d18, d19, d16
   1270c:	vmov.f64	d17, d19
   12710:	mov	r1, #4
   12714:	vcmpe.f64	d18, d8
   12718:	vmrs	APSR_nzcv, fpscr
   1271c:	bhi	1276c <__assert_fail@plt+0x15ac>
   12720:	vmul.f64	d19, d18, d16
   12724:	vmov.f64	d17, d18
   12728:	mov	r1, #5
   1272c:	vcmpe.f64	d19, d8
   12730:	vmrs	APSR_nzcv, fpscr
   12734:	bhi	1276c <__assert_fail@plt+0x15ac>
   12738:	vmul.f64	d18, d19, d16
   1273c:	vmov.f64	d17, d19
   12740:	mov	r1, #6
   12744:	vcmpe.f64	d18, d8
   12748:	vmrs	APSR_nzcv, fpscr
   1274c:	bhi	1276c <__assert_fail@plt+0x15ac>
   12750:	vmul.f64	d16, d18, d16
   12754:	mov	r1, #7
   12758:	vmov.f64	d17, d18
   1275c:	vcmpe.f64	d16, d8
   12760:	vmrs	APSR_nzcv, fpscr
   12764:	movls	r1, #8
   12768:	vmovls.f64	d17, d16
   1276c:	vdiv.f64	d8, d8, d17
   12770:	cmp	r6, #1
   12774:	str	r1, [sp, #28]
   12778:	vmov.f64	d16, d8
   1277c:	beq	127ec <__assert_fail@plt+0x162c>
   12780:	vldr	d16, [pc, #408]	; 12920 <__assert_fail@plt+0x1760>
   12784:	vcmpe.f64	d8, d16
   12788:	vmov.f64	d16, d8
   1278c:	vmrs	APSR_nzcv, fpscr
   12790:	bpl	127ec <__assert_fail@plt+0x162c>
   12794:	vmov	r0, r1, d8
   12798:	bl	17b10 <__assert_fail@plt+0x6950>
   1279c:	mov	r4, r0
   127a0:	mov	r8, r1
   127a4:	mov	r0, #0
   127a8:	cmp	r6, #0
   127ac:	mov	r2, #0
   127b0:	bne	127d8 <__assert_fail@plt+0x1618>
   127b4:	mov	r0, r4
   127b8:	mov	r1, r8
   127bc:	bl	17a50 <__assert_fail@plt+0x6890>
   127c0:	vmov	d16, r0, r1
   127c4:	mov	r2, #0
   127c8:	mov	r0, #0
   127cc:	vcmp.f64	d8, d16
   127d0:	vmrs	APSR_nzcv, fpscr
   127d4:	movwne	r0, #1
   127d8:	adds	r0, r0, r4
   127dc:	adc	r1, r2, r8
   127e0:	bl	17a50 <__assert_fail@plt+0x6890>
   127e4:	vmov	d16, r0, r1
   127e8:	ldr	r6, [sp, #48]	; 0x30
   127ec:	movw	r3, #33026	; 0x8102
   127f0:	mov	r0, sl
   127f4:	mov	r1, #1
   127f8:	mvn	r2, #0
   127fc:	vstr	d16, [sp]
   12800:	movt	r3, #1
   12804:	bl	110b8 <__sprintf_chk@plt>
   12808:	ldr	r1, [sp, #24]
   1280c:	mov	r0, #3
   12810:	cmp	r1, #0
   12814:	movwne	r0, #2
   12818:	add	r4, r0, r9
   1281c:	mov	r0, sl
   12820:	bl	11094 <strlen@plt>
   12824:	cmp	r4, r0
   12828:	bcs	128a8 <__assert_fail@plt+0x16e8>
   1282c:	vmov.f64	d9, #36	; 0x41200000  10.0
   12830:	cmp	r6, #1
   12834:	vmul.f64	d8, d8, d9
   12838:	beq	128d0 <__assert_fail@plt+0x1710>
   1283c:	vldr	d16, [pc, #220]	; 12920 <__assert_fail@plt+0x1760>
   12840:	vcmpe.f64	d8, d16
   12844:	vmrs	APSR_nzcv, fpscr
   12848:	bpl	128d0 <__assert_fail@plt+0x1710>
   1284c:	vmov	r0, r1, d8
   12850:	bl	17b10 <__assert_fail@plt+0x6950>
   12854:	ldr	r9, [fp, #16]
   12858:	mov	r4, r0
   1285c:	mov	r8, r1
   12860:	mov	r0, #0
   12864:	cmp	r6, #0
   12868:	mov	r2, #0
   1286c:	bne	12894 <__assert_fail@plt+0x16d4>
   12870:	mov	r0, r4
   12874:	mov	r1, r8
   12878:	bl	17a50 <__assert_fail@plt+0x6890>
   1287c:	vmov	d16, r0, r1
   12880:	mov	r2, #0
   12884:	mov	r0, #0
   12888:	vcmp.f64	d8, d16
   1288c:	vmrs	APSR_nzcv, fpscr
   12890:	movwne	r0, #1
   12894:	adds	r0, r0, r4
   12898:	adc	r1, r2, r8
   1289c:	bl	17a50 <__assert_fail@plt+0x6890>
   128a0:	vmov	d8, r0, r1
   128a4:	b	128d4 <__assert_fail@plt+0x1714>
   128a8:	mov	r2, r0
   128ac:	add	r4, r9, #1
   128b0:	tst	r5, #8
   128b4:	beq	128c8 <__assert_fail@plt+0x1708>
   128b8:	add	r0, r2, sl
   128bc:	ldrb	r0, [r0, #-1]
   128c0:	cmp	r0, #48	; 0x30
   128c4:	beq	1282c <__assert_fail@plt+0x166c>
   128c8:	ldr	r9, [fp, #16]
   128cc:	b	12964 <__assert_fail@plt+0x17a4>
   128d0:	ldr	r9, [fp, #16]
   128d4:	vdiv.f64	d16, d8, d9
   128d8:	vstr	d16, [sp]
   128dc:	b	1293c <__assert_fail@plt+0x177c>
   128e0:	ldr	r6, [sp, #36]	; 0x24
   128e4:	ldr	sl, [sp, #28]
   128e8:	cmp	r5, #0
   128ec:	beq	12eb0 <__assert_fail@plt+0x1cf0>
   128f0:	cmp	r5, #1
   128f4:	bne	12f20 <__assert_fail@plt+0x1d60>
   128f8:	mov	r0, #0
   128fc:	rsbs	r1, ip, #0
   12900:	and	r2, sl, #1
   12904:	sbc	r0, r0, #0
   12908:	eor	r1, r2, r1
   1290c:	orrs	r0, r1, r0
   12910:	addne	r7, r7, #1
   12914:	cmp	r7, #5
   12918:	bgt	12ebc <__assert_fail@plt+0x1cfc>
   1291c:	b	12f20 <__assert_fail@plt+0x1d60>
   12920:	andeq	r0, r0, r0
   12924:	mvnsmi	r0, #0
   12928:	ldr	r7, [sp, #36]	; 0x24
   1292c:	ldr	sl, [sp, #32]
   12930:	mvn	r0, #0
   12934:	vstr	d8, [sp]
   12938:	str	r0, [sp, #28]
   1293c:	movw	r3, #33020	; 0x80fc
   12940:	mov	r0, sl
   12944:	mov	r1, #1
   12948:	mvn	r2, #0
   1294c:	movt	r3, #1
   12950:	bl	110b8 <__sprintf_chk@plt>
   12954:	mov	r0, sl
   12958:	bl	11094 <strlen@plt>
   1295c:	mov	r2, r0
   12960:	mov	r4, #0
   12964:	sub	r0, r7, r2
   12968:	mov	r1, sl
   1296c:	mov	r8, r0
   12970:	bl	10f68 <memmove@plt>
   12974:	sub	r6, r7, r4
   12978:	tst	r5, #4
   1297c:	bne	12f78 <__assert_fail@plt+0x1db8>
   12980:	ldr	r3, [sp, #28]
   12984:	tst	r5, #128	; 0x80
   12988:	beq	13090 <__assert_fail@plt+0x1ed0>
   1298c:	cmn	r3, #1
   12990:	bgt	12a7c <__assert_fail@plt+0x18bc>
   12994:	subs	r0, r9, #2
   12998:	ldr	r0, [fp, #20]
   1299c:	mov	r3, #0
   129a0:	sbcs	r0, r0, #0
   129a4:	bcc	12a7c <__assert_fail@plt+0x18bc>
   129a8:	ldr	r0, [sp, #20]
   129ac:	mov	r3, #1
   129b0:	subs	r0, r0, r9
   129b4:	ldr	r0, [fp, #20]
   129b8:	rscs	r0, r0, #0
   129bc:	bcs	12a7c <__assert_fail@plt+0x18bc>
   129c0:	ldr	r0, [sp, #20]
   129c4:	mov	r3, #2
   129c8:	umull	r1, r0, r0, r0
   129cc:	subs	r2, r1, r9
   129d0:	ldr	r2, [fp, #20]
   129d4:	sbcs	r2, r0, r2
   129d8:	bcs	12a7c <__assert_fail@plt+0x18bc>
   129dc:	ldr	r3, [sp, #20]
   129e0:	umull	r1, r2, r1, r3
   129e4:	mla	r2, r0, r3, r2
   129e8:	mov	r3, #3
   129ec:	subs	r0, r1, r9
   129f0:	ldr	r0, [fp, #20]
   129f4:	sbcs	r0, r2, r0
   129f8:	bcs	12a7c <__assert_fail@plt+0x18bc>
   129fc:	ldr	r3, [sp, #20]
   12a00:	umull	r0, r1, r1, r3
   12a04:	mla	r1, r2, r3, r1
   12a08:	mov	r3, #4
   12a0c:	subs	r2, r0, r9
   12a10:	ldr	r2, [fp, #20]
   12a14:	sbcs	r2, r1, r2
   12a18:	bcs	12a7c <__assert_fail@plt+0x18bc>
   12a1c:	ldr	r3, [sp, #20]
   12a20:	umull	r0, r2, r0, r3
   12a24:	mla	r1, r1, r3, r2
   12a28:	mov	r3, #5
   12a2c:	subs	r2, r0, r9
   12a30:	ldr	r2, [fp, #20]
   12a34:	sbcs	r2, r1, r2
   12a38:	bcs	12a7c <__assert_fail@plt+0x18bc>
   12a3c:	ldr	r3, [sp, #20]
   12a40:	umull	r0, r2, r0, r3
   12a44:	mla	r1, r1, r3, r2
   12a48:	mov	r3, #6
   12a4c:	subs	r2, r0, r9
   12a50:	ldr	r2, [fp, #20]
   12a54:	sbcs	r2, r1, r2
   12a58:	bcs	12a7c <__assert_fail@plt+0x18bc>
   12a5c:	ldr	r3, [sp, #20]
   12a60:	umull	r0, r2, r0, r3
   12a64:	mla	r1, r1, r3, r2
   12a68:	mov	r3, #7
   12a6c:	subs	r0, r0, r9
   12a70:	ldr	r0, [fp, #20]
   12a74:	sbcs	r0, r1, r0
   12a78:	movwcc	r3, #8
   12a7c:	and	r0, r5, #256	; 0x100
   12a80:	tst	r5, #64	; 0x40
   12a84:	orrsne	r1, r3, r0
   12a88:	movne	r1, #32
   12a8c:	addne	r7, sl, #648	; 0x288
   12a90:	strbne	r1, [sl, #647]	; 0x287
   12a94:	cmp	r3, #0
   12a98:	beq	12ac0 <__assert_fail@plt+0x1900>
   12a9c:	ldr	r1, [sp, #24]
   12aa0:	cmp	r1, #0
   12aa4:	moveq	r1, #107	; 0x6b
   12aa8:	cmpeq	r3, #1
   12aac:	beq	12abc <__assert_fail@plt+0x18fc>
   12ab0:	movw	r1, #33108	; 0x8154
   12ab4:	movt	r1, #1
   12ab8:	ldrb	r1, [r1, r3]
   12abc:	strb	r1, [r7], #1
   12ac0:	cmp	r0, #0
   12ac4:	beq	13090 <__assert_fail@plt+0x1ed0>
   12ac8:	ldr	r0, [sp, #24]
   12acc:	cmp	r0, #0
   12ad0:	cmpne	r3, #0
   12ad4:	movne	r0, #105	; 0x69
   12ad8:	strbne	r0, [r7], #1
   12adc:	mov	r0, #66	; 0x42
   12ae0:	strb	r0, [r7], #1
   12ae4:	b	13090 <__assert_fail@plt+0x1ed0>
   12ae8:	add	r0, r0, r2
   12aec:	mov	ip, #2
   12af0:	cmp	r8, r0
   12af4:	movwcc	ip, #3
   12af8:	subs	r0, sl, r8
   12afc:	mov	r3, #1
   12b00:	sbcs	r0, r9, #0
   12b04:	bcc	12c2c <__assert_fail@plt+0x1a6c>
   12b08:	mov	r0, sl
   12b0c:	mov	r1, r9
   12b10:	mov	r2, r8
   12b14:	mov	r3, #0
   12b18:	str	r4, [sp, #44]	; 0x2c
   12b1c:	mov	r4, ip
   12b20:	bl	17ac4 <__assert_fail@plt+0x6904>
   12b24:	mov	r2, r4
   12b28:	mov	r4, r0
   12b2c:	mls	r0, r0, r8, sl
   12b30:	mov	r9, r1
   12b34:	add	r0, r0, r0, lsl #2
   12b38:	add	r0, r7, r0, lsl #1
   12b3c:	udiv	r7, r0, r8
   12b40:	mls	r0, r7, r8, r0
   12b44:	lsl	r0, r0, #1
   12b48:	orr	r0, r0, r2, lsr #1
   12b4c:	cmp	r0, r8
   12b50:	bcs	12b74 <__assert_fail@plt+0x19b4>
   12b54:	rsb	r1, r2, #0
   12b58:	subs	ip, r0, r1
   12b5c:	movwne	ip, #1
   12b60:	subs	r0, r4, r8
   12b64:	mov	r3, #2
   12b68:	sbcs	r0, r9, #0
   12b6c:	bcs	12bb0 <__assert_fail@plt+0x19f0>
   12b70:	b	12b94 <__assert_fail@plt+0x19d4>
   12b74:	add	r0, r0, r2
   12b78:	mov	ip, #2
   12b7c:	cmp	r8, r0
   12b80:	movwcc	ip, #3
   12b84:	subs	r0, r4, r8
   12b88:	mov	r3, #2
   12b8c:	sbcs	r0, r9, #0
   12b90:	bcs	12bb0 <__assert_fail@plt+0x19f0>
   12b94:	mov	sl, r4
   12b98:	ldr	r4, [sp, #44]	; 0x2c
   12b9c:	mov	r5, r6
   12ba0:	rsbs	r0, sl, #9
   12ba4:	rscs	r0, r9, #0
   12ba8:	bcc	12ea4 <__assert_fail@plt+0x1ce4>
   12bac:	b	12c3c <__assert_fail@plt+0x1a7c>
   12bb0:	mov	r0, r4
   12bb4:	mov	r1, r9
   12bb8:	mov	r2, r8
   12bbc:	mov	r3, #0
   12bc0:	mov	r5, ip
   12bc4:	bl	17ac4 <__assert_fail@plt+0x6904>
   12bc8:	mov	sl, r0
   12bcc:	mls	r0, r0, r8, r4
   12bd0:	mov	r2, r5
   12bd4:	mov	r9, r1
   12bd8:	add	r0, r0, r0, lsl #2
   12bdc:	add	r0, r7, r0, lsl #1
   12be0:	udiv	r7, r0, r8
   12be4:	mls	r0, r7, r8, r0
   12be8:	lsl	r0, r0, #1
   12bec:	orr	r0, r0, r5, lsr #1
   12bf0:	cmp	r0, r8
   12bf4:	bcs	12c08 <__assert_fail@plt+0x1a48>
   12bf8:	rsb	r1, r2, #0
   12bfc:	subs	ip, r0, r1
   12c00:	movwne	ip, #1
   12c04:	b	12c18 <__assert_fail@plt+0x1a58>
   12c08:	add	r0, r0, r2
   12c0c:	mov	ip, #2
   12c10:	cmp	r8, r0
   12c14:	movwcc	ip, #3
   12c18:	ldr	r4, [sp, #44]	; 0x2c
   12c1c:	subs	r0, sl, r8
   12c20:	mov	r3, #3
   12c24:	sbcs	r0, r9, #0
   12c28:	bcs	12d08 <__assert_fail@plt+0x1b48>
   12c2c:	mov	r5, r6
   12c30:	rsbs	r0, sl, #9
   12c34:	rscs	r0, r9, #0
   12c38:	bcc	12ea4 <__assert_fail@plt+0x1ce4>
   12c3c:	cmp	r5, #1
   12c40:	bne	12c58 <__assert_fail@plt+0x1a98>
   12c44:	and	r0, r7, #1
   12c48:	add	r0, ip, r0
   12c4c:	cmp	r0, #2
   12c50:	bhi	12c68 <__assert_fail@plt+0x1aa8>
   12c54:	b	12c9c <__assert_fail@plt+0x1adc>
   12c58:	cmp	r5, #0
   12c5c:	bne	12c9c <__assert_fail@plt+0x1adc>
   12c60:	cmp	ip, #0
   12c64:	beq	12c9c <__assert_fail@plt+0x1adc>
   12c68:	adds	r0, sl, #1
   12c6c:	add	r7, r7, #1
   12c70:	mov	ip, #0
   12c74:	adc	r1, r9, #0
   12c78:	cmp	r7, #10
   12c7c:	bne	12c9c <__assert_fail@plt+0x1adc>
   12c80:	rsbs	r2, r0, #9
   12c84:	mov	r7, #0
   12c88:	mov	sl, r0
   12c8c:	mov	r9, r1
   12c90:	mov	ip, #0
   12c94:	rscs	r2, r1, #0
   12c98:	bcc	12d70 <__assert_fail@plt+0x1bb0>
   12c9c:	ldr	r0, [sp, #40]	; 0x28
   12ca0:	tst	r0, #8
   12ca4:	beq	12cc4 <__assert_fail@plt+0x1b04>
   12ca8:	cmp	r7, #0
   12cac:	bne	12cc4 <__assert_fail@plt+0x1b04>
   12cb0:	ldr	r6, [sp, #36]	; 0x24
   12cb4:	mov	r7, #0
   12cb8:	cmp	r5, #0
   12cbc:	bne	128f0 <__assert_fail@plt+0x1730>
   12cc0:	b	12eb0 <__assert_fail@plt+0x1cf0>
   12cc4:	ldr	r1, [sp, #32]
   12cc8:	ldr	r2, [sp, #12]
   12ccc:	add	r0, r7, #48	; 0x30
   12cd0:	mov	r7, r4
   12cd4:	mov	r4, r3
   12cd8:	strb	r0, [r1, #646]!	; 0x286
   12cdc:	sub	r0, r1, r2
   12ce0:	ldr	r1, [sp, #8]
   12ce4:	mov	r6, r0
   12ce8:	bl	10f8c <memcpy@plt>
   12cec:	mov	r3, r4
   12cf0:	mov	r4, r7
   12cf4:	mov	ip, #0
   12cf8:	mov	r7, #0
   12cfc:	cmp	r5, #0
   12d00:	bne	128f0 <__assert_fail@plt+0x1730>
   12d04:	b	12eb0 <__assert_fail@plt+0x1cf0>
   12d08:	mov	r0, sl
   12d0c:	mov	r1, r9
   12d10:	mov	r2, r8
   12d14:	mov	r3, #0
   12d18:	mov	r4, ip
   12d1c:	bl	17ac4 <__assert_fail@plt+0x6904>
   12d20:	mov	r2, r4
   12d24:	mov	r4, r0
   12d28:	mls	r0, r0, r8, sl
   12d2c:	mov	r9, r1
   12d30:	add	r0, r0, r0, lsl #2
   12d34:	add	r0, r7, r0, lsl #1
   12d38:	udiv	r7, r0, r8
   12d3c:	mls	r0, r7, r8, r0
   12d40:	lsl	r0, r0, #1
   12d44:	orr	r0, r0, r2, lsr #1
   12d48:	cmp	r0, r8
   12d4c:	bcs	12d8c <__assert_fail@plt+0x1bcc>
   12d50:	rsb	r1, r2, #0
   12d54:	subs	ip, r0, r1
   12d58:	movwne	ip, #1
   12d5c:	subs	r0, r4, r8
   12d60:	mov	r3, #4
   12d64:	sbcs	r0, r9, #0
   12d68:	bcc	12b94 <__assert_fail@plt+0x19d4>
   12d6c:	b	12dac <__assert_fail@plt+0x1bec>
   12d70:	ldr	r6, [sp, #36]	; 0x24
   12d74:	mov	ip, #0
   12d78:	mov	sl, #10
   12d7c:	mov	r9, #0
   12d80:	cmp	r5, #0
   12d84:	bne	128f0 <__assert_fail@plt+0x1730>
   12d88:	b	12eb0 <__assert_fail@plt+0x1cf0>
   12d8c:	add	r0, r0, r2
   12d90:	mov	ip, #2
   12d94:	cmp	r8, r0
   12d98:	movwcc	ip, #3
   12d9c:	subs	r0, r4, r8
   12da0:	mov	r3, #4
   12da4:	sbcs	r0, r9, #0
   12da8:	bcc	12b94 <__assert_fail@plt+0x19d4>
   12dac:	mov	r0, r4
   12db0:	mov	r1, r9
   12db4:	mov	r2, r8
   12db8:	mov	r3, #0
   12dbc:	mov	r5, ip
   12dc0:	bl	17ac4 <__assert_fail@plt+0x6904>
   12dc4:	mov	sl, r0
   12dc8:	mls	r0, r0, r8, r4
   12dcc:	mov	r2, r5
   12dd0:	mov	r9, r1
   12dd4:	add	r0, r0, r0, lsl #2
   12dd8:	add	r0, r7, r0, lsl #1
   12ddc:	udiv	r7, r0, r8
   12de0:	mls	r0, r7, r8, r0
   12de4:	lsl	r0, r0, #1
   12de8:	orr	r0, r0, r5, lsr #1
   12dec:	cmp	r0, r8
   12df0:	bcs	12e04 <__assert_fail@plt+0x1c44>
   12df4:	rsb	r1, r2, #0
   12df8:	subs	ip, r0, r1
   12dfc:	movwne	ip, #1
   12e00:	b	12e14 <__assert_fail@plt+0x1c54>
   12e04:	add	r0, r0, r2
   12e08:	mov	ip, #2
   12e0c:	cmp	r8, r0
   12e10:	movwcc	ip, #3
   12e14:	ldr	r4, [sp, #44]	; 0x2c
   12e18:	subs	r0, sl, r8
   12e1c:	mov	r3, #5
   12e20:	sbcs	r0, r9, #0
   12e24:	bcc	12c2c <__assert_fail@plt+0x1a6c>
   12e28:	mov	r0, sl
   12e2c:	mov	r1, r9
   12e30:	mov	r2, r8
   12e34:	mov	r3, #0
   12e38:	mov	r4, ip
   12e3c:	bl	17ac4 <__assert_fail@plt+0x6904>
   12e40:	mov	r2, r4
   12e44:	mov	r4, r0
   12e48:	mls	r0, r0, r8, sl
   12e4c:	mov	r9, r1
   12e50:	add	r0, r0, r0, lsl #2
   12e54:	add	r0, r7, r0, lsl #1
   12e58:	udiv	r7, r0, r8
   12e5c:	mls	r0, r7, r8, r0
   12e60:	lsl	r0, r0, #1
   12e64:	orr	r0, r0, r2, lsr #1
   12e68:	cmp	r0, r8
   12e6c:	bcs	130ac <__assert_fail@plt+0x1eec>
   12e70:	rsb	r1, r2, #0
   12e74:	subs	ip, r0, r1
   12e78:	movwne	ip, #1
   12e7c:	subs	r0, r4, r8
   12e80:	mov	r3, #6
   12e84:	sbcs	r0, r9, #0
   12e88:	bcs	130cc <__assert_fail@plt+0x1f0c>
   12e8c:	mov	sl, r4
   12e90:	ldr	r4, [sp, #44]	; 0x2c
   12e94:	mov	r5, r6
   12e98:	rsbs	r0, sl, #9
   12e9c:	rscs	r0, r9, #0
   12ea0:	bcs	12c3c <__assert_fail@plt+0x1a7c>
   12ea4:	ldr	r6, [sp, #36]	; 0x24
   12ea8:	cmp	r5, #0
   12eac:	bne	128f0 <__assert_fail@plt+0x1730>
   12eb0:	add	r0, r7, ip
   12eb4:	cmp	r0, #1
   12eb8:	blt	12f20 <__assert_fail@plt+0x1d60>
   12ebc:	adds	sl, sl, #1
   12ec0:	adc	r9, r9, #0
   12ec4:	cmp	r3, #7
   12ec8:	bgt	12f20 <__assert_fail@plt+0x1d60>
   12ecc:	cmp	r4, #0
   12ed0:	beq	12f20 <__assert_fail@plt+0x1d60>
   12ed4:	ldr	r7, [sp, #36]	; 0x24
   12ed8:	eor	r0, sl, r8
   12edc:	orrs	r0, r0, r9
   12ee0:	bne	12f24 <__assert_fail@plt+0x1d64>
   12ee4:	ldr	r0, [sp, #40]	; 0x28
   12ee8:	add	r3, r3, #1
   12eec:	mov	r9, #0
   12ef0:	mov	sl, #1
   12ef4:	str	r3, [sp, #28]
   12ef8:	tst	r0, #8
   12efc:	bne	12f28 <__assert_fail@plt+0x1d68>
   12f00:	ldr	r2, [sp, #12]
   12f04:	mov	r0, #48	; 0x30
   12f08:	ldr	r1, [sp, #8]
   12f0c:	strb	r0, [r6, #-1]!
   12f10:	sub	r6, r6, r2
   12f14:	mov	r0, r6
   12f18:	bl	10f8c <memcpy@plt>
   12f1c:	b	12f28 <__assert_fail@plt+0x1d68>
   12f20:	ldr	r7, [sp, #36]	; 0x24
   12f24:	str	r3, [sp, #28]
   12f28:	mov	r8, r6
   12f2c:	mov	r0, sl
   12f30:	mov	r1, r9
   12f34:	mov	r2, #10
   12f38:	mov	r3, #0
   12f3c:	bl	17ac4 <__assert_fail@plt+0x6904>
   12f40:	add	r2, r0, r0, lsl #2
   12f44:	sub	r2, sl, r2, lsl #1
   12f48:	orr	r2, r2, #48	; 0x30
   12f4c:	strb	r2, [r8, #-1]!
   12f50:	rsbs	r2, sl, #9
   12f54:	mov	sl, r0
   12f58:	rscs	r2, r9, #0
   12f5c:	mov	r9, r1
   12f60:	bcc	12f2c <__assert_fail@plt+0x1d6c>
   12f64:	ldr	sl, [sp, #32]
   12f68:	ldr	r5, [sp, #40]	; 0x28
   12f6c:	ldr	r9, [fp, #16]
   12f70:	tst	r5, #4
   12f74:	beq	12980 <__assert_fail@plt+0x17c0>
   12f78:	ldr	r9, [sp, #52]	; 0x34
   12f7c:	mov	r5, r8
   12f80:	sub	r4, r6, r8
   12f84:	mov	r0, r9
   12f88:	bl	11094 <strlen@plt>
   12f8c:	add	r8, sp, #56	; 0x38
   12f90:	str	r0, [sp, #48]	; 0x30
   12f94:	mov	r1, r5
   12f98:	mov	r2, r4
   12f9c:	mov	r0, r8
   12fa0:	bl	10f8c <memcpy@plt>
   12fa4:	ldr	r5, [sp, #16]
   12fa8:	ldrb	r7, [r5]
   12fac:	cmp	r7, #255	; 0xff
   12fb0:	mov	sl, r7
   12fb4:	moveq	sl, r4
   12fb8:	cmp	r7, #0
   12fbc:	mvneq	sl, #0
   12fc0:	cmp	sl, r4
   12fc4:	movhi	sl, r4
   12fc8:	sub	r0, r6, sl
   12fcc:	sub	r6, r4, sl
   12fd0:	mov	r2, sl
   12fd4:	add	r1, r8, r6
   12fd8:	mov	r8, r0
   12fdc:	bl	10f8c <memcpy@plt>
   12fe0:	cmp	r6, #0
   12fe4:	beq	13074 <__assert_fail@plt+0x1eb4>
   12fe8:	clz	r0, r7
   12fec:	lsr	r9, r0, #5
   12ff0:	ldr	r0, [sp, #48]	; 0x30
   12ff4:	rsb	r0, r0, #0
   12ff8:	str	r0, [sp, #44]	; 0x2c
   12ffc:	ldr	r0, [sp, #44]	; 0x2c
   13000:	ldr	r1, [sp, #52]	; 0x34
   13004:	ldr	r2, [sp, #48]	; 0x30
   13008:	add	r4, r8, r0
   1300c:	mov	r0, r4
   13010:	bl	10f8c <memcpy@plt>
   13014:	tst	r9, #1
   13018:	add	r0, sp, #56	; 0x38
   1301c:	addeq	r5, r5, #1
   13020:	mov	r9, r5
   13024:	ldrb	r5, [r5]
   13028:	cmp	r5, #255	; 0xff
   1302c:	mov	r7, r5
   13030:	moveq	r7, r6
   13034:	cmp	r5, #0
   13038:	moveq	r7, sl
   1303c:	cmp	r6, r7
   13040:	movcc	r7, r6
   13044:	sub	r6, r6, r7
   13048:	sub	r8, r4, r7
   1304c:	mov	r2, r7
   13050:	add	r1, r0, r6
   13054:	mov	r0, r8
   13058:	bl	10f8c <memcpy@plt>
   1305c:	clz	r0, r5
   13060:	mov	r5, r9
   13064:	cmp	r6, #0
   13068:	mov	sl, r7
   1306c:	lsr	r9, r0, #5
   13070:	bne	12ffc <__assert_fail@plt+0x1e3c>
   13074:	ldr	r7, [sp, #36]	; 0x24
   13078:	ldr	sl, [sp, #32]
   1307c:	ldr	r5, [sp, #40]	; 0x28
   13080:	ldr	r9, [fp, #16]
   13084:	ldr	r3, [sp, #28]
   13088:	tst	r5, #128	; 0x80
   1308c:	bne	1298c <__assert_fail@plt+0x17cc>
   13090:	mov	r0, #0
   13094:	strb	r0, [r7]
   13098:	mov	r0, r8
   1309c:	sub	sp, fp, #48	; 0x30
   130a0:	vpop	{d8-d9}
   130a4:	add	sp, sp, #4
   130a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130ac:	add	r0, r0, r2
   130b0:	mov	ip, #2
   130b4:	cmp	r8, r0
   130b8:	movwcc	ip, #3
   130bc:	subs	r0, r4, r8
   130c0:	mov	r3, #6
   130c4:	sbcs	r0, r9, #0
   130c8:	bcc	12e8c <__assert_fail@plt+0x1ccc>
   130cc:	mov	r0, r4
   130d0:	mov	r1, r9
   130d4:	mov	r2, r8
   130d8:	mov	r3, #0
   130dc:	mov	r5, ip
   130e0:	bl	17ac4 <__assert_fail@plt+0x6904>
   130e4:	mov	r6, r8
   130e8:	mov	r8, r0
   130ec:	mov	r2, r5
   130f0:	mov	r9, r1
   130f4:	mls	r0, r0, r6, r4
   130f8:	add	r0, r0, r0, lsl #2
   130fc:	add	r0, r7, r0, lsl #1
   13100:	udiv	r4, r0, r6
   13104:	mls	r0, r4, r6, r0
   13108:	lsl	r0, r0, #1
   1310c:	orr	r0, r0, r2, lsr #1
   13110:	cmp	r0, r6
   13114:	bcs	13158 <__assert_fail@plt+0x1f98>
   13118:	rsb	r1, r2, #0
   1311c:	subs	ip, r0, r1
   13120:	movwne	ip, #1
   13124:	subs	r0, r8, r6
   13128:	mov	r3, #7
   1312c:	sbcs	r0, r9, #0
   13130:	bcs	13178 <__assert_fail@plt+0x1fb8>
   13134:	mov	r7, r4
   13138:	ldr	r5, [sp, #48]	; 0x30
   1313c:	ldr	r4, [sp, #44]	; 0x2c
   13140:	mov	sl, r8
   13144:	mov	r8, r6
   13148:	rsbs	r0, sl, #9
   1314c:	rscs	r0, r9, #0
   13150:	bcc	12ea4 <__assert_fail@plt+0x1ce4>
   13154:	b	12c3c <__assert_fail@plt+0x1a7c>
   13158:	add	r0, r0, r2
   1315c:	mov	ip, #2
   13160:	cmp	r6, r0
   13164:	movwcc	ip, #3
   13168:	subs	r0, r8, r6
   1316c:	mov	r3, #7
   13170:	sbcs	r0, r9, #0
   13174:	bcc	13134 <__assert_fail@plt+0x1f74>
   13178:	mov	r0, r8
   1317c:	mov	r1, r9
   13180:	mov	r2, r6
   13184:	mov	r3, #0
   13188:	mov	r5, ip
   1318c:	bl	17ac4 <__assert_fail@plt+0x6904>
   13190:	mov	sl, r0
   13194:	mls	r0, r0, r6, r8
   13198:	mov	r2, r5
   1319c:	mov	r9, r1
   131a0:	mov	r8, r6
   131a4:	add	r0, r0, r0, lsl #2
   131a8:	add	r0, r4, r0, lsl #1
   131ac:	udiv	r7, r0, r6
   131b0:	mls	r0, r7, r6, r0
   131b4:	lsl	r0, r0, #1
   131b8:	orr	r0, r0, r5, lsr #1
   131bc:	cmp	r0, r6
   131c0:	bcs	131d4 <__assert_fail@plt+0x2014>
   131c4:	rsb	r1, r2, #0
   131c8:	subs	ip, r0, r1
   131cc:	movwne	ip, #1
   131d0:	b	131e4 <__assert_fail@plt+0x2024>
   131d4:	add	r0, r0, r2
   131d8:	mov	ip, #2
   131dc:	cmp	r8, r0
   131e0:	movwcc	ip, #3
   131e4:	ldr	r5, [sp, #48]	; 0x30
   131e8:	ldr	r4, [sp, #44]	; 0x2c
   131ec:	mov	r3, #8
   131f0:	rsbs	r0, sl, #9
   131f4:	rscs	r0, r9, #0
   131f8:	bcc	12ea4 <__assert_fail@plt+0x1ce4>
   131fc:	b	12c3c <__assert_fail@plt+0x1a7c>
   13200:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13204:	add	fp, sp, #24
   13208:	sub	sp, sp, #8
   1320c:	mov	r4, r2
   13210:	mov	r8, r1
   13214:	cmp	r0, #0
   13218:	bne	13244 <__assert_fail@plt+0x2084>
   1321c:	movw	r0, #33032	; 0x8108
   13220:	movt	r0, #1
   13224:	bl	11028 <getenv@plt>
   13228:	cmp	r0, #0
   1322c:	bne	13244 <__assert_fail@plt+0x2084>
   13230:	movw	r0, #33043	; 0x8113
   13234:	movt	r0, #1
   13238:	bl	11028 <getenv@plt>
   1323c:	cmp	r0, #0
   13240:	beq	13370 <__assert_fail@plt+0x21b0>
   13244:	mov	r6, r0
   13248:	movw	r7, #33132	; 0x816c
   1324c:	movw	r1, #33120	; 0x8160
   13250:	mov	r3, #4
   13254:	ldrb	r5, [r6], #1
   13258:	movt	r7, #1
   1325c:	movt	r1, #1
   13260:	mov	r2, r7
   13264:	cmp	r5, #39	; 0x27
   13268:	movne	r6, r0
   1326c:	mov	r0, r6
   13270:	bl	16d84 <__assert_fail@plt+0x5bc4>
   13274:	sub	r1, r5, #39	; 0x27
   13278:	cmp	r0, #0
   1327c:	clz	r1, r1
   13280:	lsr	r1, r1, #5
   13284:	lsl	r5, r1, #2
   13288:	bmi	132c0 <__assert_fail@plt+0x2100>
   1328c:	ldr	r0, [r7, r0, lsl #2]
   13290:	mov	r2, #1
   13294:	mov	r1, #0
   13298:	str	r2, [r4]
   1329c:	str	r1, [r4, #4]
   132a0:	orr	r1, r0, r5
   132a4:	mov	r0, #0
   132a8:	str	r1, [r8]
   132ac:	ldrd	r2, [r4]
   132b0:	orrs	r1, r2, r3
   132b4:	beq	132fc <__assert_fail@plt+0x213c>
   132b8:	sub	sp, fp, #24
   132bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   132c0:	movw	r0, #33053	; 0x811d
   132c4:	add	r1, sp, #4
   132c8:	mov	r2, #0
   132cc:	mov	r3, r4
   132d0:	mov	r7, #0
   132d4:	movt	r0, #1
   132d8:	str	r0, [sp]
   132dc:	mov	r0, r6
   132e0:	bl	15ff0 <__assert_fail@plt+0x4e30>
   132e4:	cmp	r0, #0
   132e8:	beq	1332c <__assert_fail@plt+0x216c>
   132ec:	str	r7, [r8]
   132f0:	ldrd	r2, [r4]
   132f4:	orrs	r1, r2, r3
   132f8:	bne	132b8 <__assert_fail@plt+0x20f8>
   132fc:	movw	r0, #33089	; 0x8141
   13300:	movt	r0, #1
   13304:	bl	11028 <getenv@plt>
   13308:	cmp	r0, #0
   1330c:	mov	r2, #512	; 0x200
   13310:	mov	r0, #4
   13314:	mov	r1, #0
   13318:	movweq	r2, #1024	; 0x400
   1331c:	str	r2, [r4]
   13320:	str	r1, [r4, #4]
   13324:	sub	sp, fp, #24
   13328:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1332c:	ldrb	r0, [r6]
   13330:	sub	r0, r0, #48	; 0x30
   13334:	uxtb	r0, r0
   13338:	cmp	r0, #10
   1333c:	bcc	13368 <__assert_fail@plt+0x21a8>
   13340:	ldr	r0, [sp, #4]
   13344:	cmp	r0, r6
   13348:	beq	13398 <__assert_fail@plt+0x21d8>
   1334c:	ldrb	r2, [r6, #1]
   13350:	add	r1, r6, #1
   13354:	mov	r6, r1
   13358:	sub	r2, r2, #48	; 0x30
   1335c:	uxtb	r2, r2
   13360:	cmp	r2, #10
   13364:	bcs	13344 <__assert_fail@plt+0x2184>
   13368:	mov	r1, r5
   1336c:	b	132a4 <__assert_fail@plt+0x20e4>
   13370:	movw	r0, #33089	; 0x8141
   13374:	movt	r0, #1
   13378:	bl	11028 <getenv@plt>
   1337c:	cmp	r0, #0
   13380:	mov	r2, #512	; 0x200
   13384:	mov	r1, #0
   13388:	movweq	r2, #1024	; 0x400
   1338c:	str	r2, [r4]
   13390:	str	r1, [r4, #4]
   13394:	b	132a4 <__assert_fail@plt+0x20e4>
   13398:	ldrb	r2, [r0, #-1]
   1339c:	orr	r1, r5, #384	; 0x180
   133a0:	cmp	r2, #66	; 0x42
   133a4:	mov	r2, r1
   133a8:	orrne	r2, r5, #128	; 0x80
   133ac:	bne	133c0 <__assert_fail@plt+0x2200>
   133b0:	ldrb	r0, [r0, #-2]
   133b4:	cmp	r0, #105	; 0x69
   133b8:	orreq	r1, r2, #32
   133bc:	b	132a4 <__assert_fail@plt+0x20e4>
   133c0:	orr	r1, r2, #32
   133c4:	b	132a4 <__assert_fail@plt+0x20e4>
   133c8:	push	{r4, r5, fp, lr}
   133cc:	add	fp, sp, #8
   133d0:	cmp	r0, #0
   133d4:	beq	13468 <__assert_fail@plt+0x22a8>
   133d8:	mov	r1, #47	; 0x2f
   133dc:	mov	r4, r0
   133e0:	bl	11148 <strrchr@plt>
   133e4:	cmp	r0, #0
   133e8:	mov	r5, r4
   133ec:	addne	r5, r0, #1
   133f0:	sub	r0, r5, r4
   133f4:	cmp	r0, #7
   133f8:	blt	1344c <__assert_fail@plt+0x228c>
   133fc:	movw	r1, #33196	; 0x81ac
   13400:	sub	r0, r5, #7
   13404:	mov	r2, #7
   13408:	movt	r1, #1
   1340c:	bl	1119c <strncmp@plt>
   13410:	cmp	r0, #0
   13414:	bne	1344c <__assert_fail@plt+0x228c>
   13418:	movw	r1, #33204	; 0x81b4
   1341c:	mov	r0, r5
   13420:	mov	r2, #3
   13424:	movt	r1, #1
   13428:	bl	1119c <strncmp@plt>
   1342c:	cmp	r0, #0
   13430:	beq	1343c <__assert_fail@plt+0x227c>
   13434:	mov	r4, r5
   13438:	b	1344c <__assert_fail@plt+0x228c>
   1343c:	movw	r0, #37200	; 0x9150
   13440:	add	r4, r5, #3
   13444:	movt	r0, #2
   13448:	str	r4, [r0]
   1344c:	movw	r0, #37204	; 0x9154
   13450:	movt	r0, #2
   13454:	str	r4, [r0]
   13458:	movw	r0, #37248	; 0x9180
   1345c:	movt	r0, #2
   13460:	str	r4, [r0]
   13464:	pop	{r4, r5, fp, pc}
   13468:	movw	r0, #37216	; 0x9160
   1346c:	mov	r1, #55	; 0x37
   13470:	mov	r2, #1
   13474:	movt	r0, #2
   13478:	ldr	r3, [r0]
   1347c:	movw	r0, #33140	; 0x8174
   13480:	movt	r0, #1
   13484:	bl	10fe0 <fwrite@plt>
   13488:	bl	111a8 <abort@plt>
   1348c:	push	{r4, r5, r6, sl, fp, lr}
   13490:	add	fp, sp, #16
   13494:	mov	r4, r0
   13498:	movw	r0, #37256	; 0x9188
   1349c:	movt	r0, #2
   134a0:	cmp	r4, #0
   134a4:	moveq	r4, r0
   134a8:	bl	110ac <__errno_location@plt>
   134ac:	ldr	r6, [r0]
   134b0:	mov	r5, r0
   134b4:	mov	r0, r4
   134b8:	mov	r1, #48	; 0x30
   134bc:	bl	15ed0 <__assert_fail@plt+0x4d10>
   134c0:	str	r6, [r5]
   134c4:	pop	{r4, r5, r6, sl, fp, pc}
   134c8:	movw	r1, #37256	; 0x9188
   134cc:	cmp	r0, #0
   134d0:	movt	r1, #2
   134d4:	movne	r1, r0
   134d8:	ldr	r0, [r1]
   134dc:	bx	lr
   134e0:	movw	r2, #37256	; 0x9188
   134e4:	cmp	r0, #0
   134e8:	movt	r2, #2
   134ec:	movne	r2, r0
   134f0:	str	r1, [r2]
   134f4:	bx	lr
   134f8:	movw	r3, #37256	; 0x9188
   134fc:	cmp	r0, #0
   13500:	and	r2, r2, #1
   13504:	movt	r3, #2
   13508:	movne	r3, r0
   1350c:	ubfx	r0, r1, #5, #3
   13510:	and	r1, r1, #31
   13514:	add	ip, r3, r0, lsl #2
   13518:	mov	r0, #1
   1351c:	ldr	r3, [ip, #8]
   13520:	and	r0, r0, r3, lsr r1
   13524:	eor	r2, r0, r2
   13528:	eor	r1, r3, r2, lsl r1
   1352c:	str	r1, [ip, #8]
   13530:	bx	lr
   13534:	movw	r2, #37256	; 0x9188
   13538:	cmp	r0, #0
   1353c:	movt	r2, #2
   13540:	movne	r2, r0
   13544:	ldr	r0, [r2, #4]
   13548:	str	r1, [r2, #4]
   1354c:	bx	lr
   13550:	push	{fp, lr}
   13554:	mov	fp, sp
   13558:	movw	r3, #37256	; 0x9188
   1355c:	cmp	r0, #0
   13560:	movt	r3, #2
   13564:	movne	r3, r0
   13568:	cmp	r1, #0
   1356c:	mov	r0, #10
   13570:	cmpne	r2, #0
   13574:	str	r0, [r3]
   13578:	bne	13580 <__assert_fail@plt+0x23c0>
   1357c:	bl	111a8 <abort@plt>
   13580:	str	r1, [r3, #40]	; 0x28
   13584:	str	r2, [r3, #44]	; 0x2c
   13588:	pop	{fp, pc}
   1358c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13590:	add	fp, sp, #28
   13594:	sub	sp, sp, #20
   13598:	mov	r7, r0
   1359c:	ldr	r0, [fp, #8]
   135a0:	movw	r5, #37256	; 0x9188
   135a4:	mov	r8, r3
   135a8:	mov	r9, r2
   135ac:	mov	sl, r1
   135b0:	movt	r5, #2
   135b4:	cmp	r0, #0
   135b8:	movne	r5, r0
   135bc:	bl	110ac <__errno_location@plt>
   135c0:	ldr	r2, [r5, #40]	; 0x28
   135c4:	ldr	r3, [r5, #44]	; 0x2c
   135c8:	mov	r4, r0
   135cc:	ldm	r5, {r0, r1}
   135d0:	add	r5, r5, #8
   135d4:	ldr	r6, [r4]
   135d8:	stm	sp, {r0, r1, r5}
   135dc:	mov	r0, r7
   135e0:	mov	r1, sl
   135e4:	str	r2, [sp, #12]
   135e8:	str	r3, [sp, #16]
   135ec:	mov	r2, r9
   135f0:	mov	r3, r8
   135f4:	bl	13604 <__assert_fail@plt+0x2444>
   135f8:	str	r6, [r4]
   135fc:	sub	sp, fp, #28
   13600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13604:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13608:	add	fp, sp, #28
   1360c:	sub	sp, sp, #156	; 0x9c
   13610:	str	r0, [fp, #-84]	; 0xffffffac
   13614:	add	r0, r2, #1
   13618:	mov	r6, r1
   1361c:	mov	r7, r3
   13620:	str	r2, [fp, #-80]	; 0xffffffb0
   13624:	str	r0, [sp, #80]	; 0x50
   13628:	ldr	r0, [fp, #12]
   1362c:	and	r1, r0, #1
   13630:	str	r1, [sp, #36]	; 0x24
   13634:	and	r1, r0, #4
   13638:	str	r1, [sp, #32]
   1363c:	ubfx	r8, r0, #1, #1
   13640:	bl	10ff8 <__ctype_get_mb_cur_max@plt>
   13644:	str	r0, [sp, #40]	; 0x28
   13648:	ldr	r0, [fp, #24]
   1364c:	ldr	r4, [fp, #8]
   13650:	mov	r1, #0
   13654:	str	r1, [fp, #-52]	; 0xffffffcc
   13658:	mov	r1, #0
   1365c:	str	r1, [sp, #60]	; 0x3c
   13660:	mov	r1, #1
   13664:	str	r1, [sp, #84]	; 0x54
   13668:	str	r0, [sp, #76]	; 0x4c
   1366c:	ldr	r0, [fp, #20]
   13670:	str	r0, [sp, #72]	; 0x48
   13674:	mov	r0, #0
   13678:	str	r0, [sp, #56]	; 0x38
   1367c:	mov	r0, #0
   13680:	str	r0, [fp, #-88]	; 0xffffffa8
   13684:	mov	r0, #0
   13688:	str	r0, [fp, #-72]	; 0xffffffb8
   1368c:	mov	r0, #0
   13690:	cmp	r4, #10
   13694:	bhi	149b0 <__assert_fail@plt+0x37f0>
   13698:	add	r1, pc, #24
   1369c:	ldr	ip, [fp, #-84]	; 0xffffffac
   136a0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   136a4:	mov	r5, r6
   136a8:	mov	r9, #0
   136ac:	mov	r2, #1
   136b0:	mov	r3, #0
   136b4:	ldr	pc, [r1, r4, lsl #2]
   136b8:	andeq	r3, r1, r0, lsl #15
   136bc:			; <UNDEFINED> instruction: 0x000137bc
   136c0:	muleq	r1, r0, r7
   136c4:	andeq	r3, r1, r8, ror r7
   136c8:			; <UNDEFINED> instruction: 0x000137b0
   136cc:	andeq	r3, r1, r4, lsl r8
   136d0:	andeq	r3, r1, r0, lsr #15
   136d4:	andeq	r3, r1, ip, lsl #21
   136d8:	andeq	r3, r1, r4, ror #13
   136dc:	andeq	r3, r1, r4, ror #13
   136e0:	andeq	r3, r1, ip, lsl r9
   136e4:	movw	r6, #33286	; 0x8206
   136e8:	mov	r0, #0
   136ec:	mov	r2, #5
   136f0:	movt	r6, #1
   136f4:	mov	r1, r6
   136f8:	bl	10fb0 <dcgettext@plt>
   136fc:	cmp	r0, r6
   13700:	str	r0, [sp, #72]	; 0x48
   13704:	bne	138f4 <__assert_fail@plt+0x2734>
   13708:	bl	17520 <__assert_fail@plt+0x6360>
   1370c:	ldrb	r1, [r0]
   13710:	and	r1, r1, #223	; 0xdf
   13714:	cmp	r1, #71	; 0x47
   13718:	beq	13874 <__assert_fail@plt+0x26b4>
   1371c:	cmp	r1, #85	; 0x55
   13720:	bne	138d8 <__assert_fail@plt+0x2718>
   13724:	ldrb	r1, [r0, #1]
   13728:	and	r1, r1, #223	; 0xdf
   1372c:	cmp	r1, #84	; 0x54
   13730:	bne	138d8 <__assert_fail@plt+0x2718>
   13734:	ldrb	r1, [r0, #2]
   13738:	and	r1, r1, #223	; 0xdf
   1373c:	cmp	r1, #70	; 0x46
   13740:	bne	138d8 <__assert_fail@plt+0x2718>
   13744:	ldrb	r1, [r0, #3]
   13748:	cmp	r1, #45	; 0x2d
   1374c:	bne	138d8 <__assert_fail@plt+0x2718>
   13750:	ldrb	r1, [r0, #4]
   13754:	cmp	r1, #56	; 0x38
   13758:	bne	138d8 <__assert_fail@plt+0x2718>
   1375c:	ldrb	r0, [r0, #5]
   13760:	cmp	r0, #0
   13764:	movw	r0, #33290	; 0x820a
   13768:	movt	r0, #1
   1376c:	str	r0, [sp, #72]	; 0x48
   13770:	bne	138d8 <__assert_fail@plt+0x2718>
   13774:	b	138f4 <__assert_fail@plt+0x2734>
   13778:	mov	r0, #1
   1377c:	b	137bc <__assert_fail@plt+0x25fc>
   13780:	mov	r4, #0
   13784:	mov	r9, #0
   13788:	mov	r2, r0
   1378c:	b	1380c <__assert_fail@plt+0x264c>
   13790:	tst	r8, #1
   13794:	bne	137bc <__assert_fail@plt+0x25fc>
   13798:	mov	r2, r0
   1379c:	b	137e4 <__assert_fail@plt+0x2624>
   137a0:	mov	r0, #1
   137a4:	mov	r9, #0
   137a8:	mov	r4, #5
   137ac:	b	13828 <__assert_fail@plt+0x2668>
   137b0:	mov	r2, #1
   137b4:	tst	r8, #1
   137b8:	beq	137e4 <__assert_fail@plt+0x2624>
   137bc:	mov	r1, #1
   137c0:	mov	r9, #0
   137c4:	mov	r4, #2
   137c8:	mov	r2, r0
   137cc:	mov	r3, #1
   137d0:	str	r1, [fp, #-72]	; 0xffffffb8
   137d4:	movw	r1, #33288	; 0x8208
   137d8:	movt	r1, #1
   137dc:	str	r1, [fp, #-88]	; 0xffffffa8
   137e0:	b	13a8c <__assert_fail@plt+0x28cc>
   137e4:	cmp	r5, #0
   137e8:	mov	r9, #1
   137ec:	mov	r4, #2
   137f0:	movne	r0, #39	; 0x27
   137f4:	strbne	r0, [ip]
   137f8:	movw	r0, #33288	; 0x8208
   137fc:	movt	r0, #1
   13800:	str	r0, [fp, #-88]	; 0xffffffa8
   13804:	mov	r0, #1
   13808:	str	r0, [fp, #-72]	; 0xffffffb8
   1380c:	mov	r3, #0
   13810:	b	13a8c <__assert_fail@plt+0x28cc>
   13814:	mov	r4, #5
   13818:	tst	r8, #1
   1381c:	beq	13844 <__assert_fail@plt+0x2684>
   13820:	mov	r0, #1
   13824:	mov	r9, #0
   13828:	str	r0, [fp, #-72]	; 0xffffffb8
   1382c:	movw	r0, #33284	; 0x8204
   13830:	mov	r2, #1
   13834:	mov	r3, #1
   13838:	movt	r0, #1
   1383c:	str	r0, [fp, #-88]	; 0xffffffa8
   13840:	b	13a8c <__assert_fail@plt+0x28cc>
   13844:	cmp	r5, #0
   13848:	mov	r3, #0
   1384c:	mov	r9, #1
   13850:	mov	r2, #1
   13854:	movne	r0, #34	; 0x22
   13858:	strbne	r0, [ip]
   1385c:	movw	r0, #33284	; 0x8204
   13860:	movt	r0, #1
   13864:	str	r0, [fp, #-88]	; 0xffffffa8
   13868:	mov	r0, #1
   1386c:	str	r0, [fp, #-72]	; 0xffffffb8
   13870:	b	13a8c <__assert_fail@plt+0x28cc>
   13874:	ldrb	r1, [r0, #1]
   13878:	and	r1, r1, #223	; 0xdf
   1387c:	cmp	r1, #66	; 0x42
   13880:	bne	138d8 <__assert_fail@plt+0x2718>
   13884:	ldrb	r1, [r0, #2]
   13888:	cmp	r1, #49	; 0x31
   1388c:	bne	138d8 <__assert_fail@plt+0x2718>
   13890:	ldrb	r1, [r0, #3]
   13894:	cmp	r1, #56	; 0x38
   13898:	bne	138d8 <__assert_fail@plt+0x2718>
   1389c:	ldrb	r1, [r0, #4]
   138a0:	cmp	r1, #48	; 0x30
   138a4:	bne	138d8 <__assert_fail@plt+0x2718>
   138a8:	ldrb	r1, [r0, #5]
   138ac:	cmp	r1, #51	; 0x33
   138b0:	bne	138d8 <__assert_fail@plt+0x2718>
   138b4:	ldrb	r1, [r0, #6]
   138b8:	cmp	r1, #48	; 0x30
   138bc:	bne	138d8 <__assert_fail@plt+0x2718>
   138c0:	ldrb	r0, [r0, #7]
   138c4:	cmp	r0, #0
   138c8:	movw	r0, #33298	; 0x8212
   138cc:	movt	r0, #1
   138d0:	str	r0, [sp, #72]	; 0x48
   138d4:	beq	138f4 <__assert_fail@plt+0x2734>
   138d8:	movw	r1, #33284	; 0x8204
   138dc:	movw	r0, #33288	; 0x8208
   138e0:	cmp	r4, #9
   138e4:	movt	r1, #1
   138e8:	movt	r0, #1
   138ec:	moveq	r0, r1
   138f0:	str	r0, [sp, #72]	; 0x48
   138f4:	movw	r6, #33288	; 0x8208
   138f8:	mov	r0, #0
   138fc:	mov	r2, #5
   13900:	movt	r6, #1
   13904:	mov	r1, r6
   13908:	bl	10fb0 <dcgettext@plt>
   1390c:	cmp	r0, r6
   13910:	str	r0, [sp, #76]	; 0x4c
   13914:	beq	13960 <__assert_fail@plt+0x27a0>
   13918:	ldr	ip, [fp, #-84]	; 0xffffffac
   1391c:	mov	r9, #0
   13920:	tst	r8, #1
   13924:	bne	13a68 <__assert_fail@plt+0x28a8>
   13928:	ldr	r0, [sp, #72]	; 0x48
   1392c:	ldrb	r0, [r0]
   13930:	cmp	r0, #0
   13934:	beq	13a68 <__assert_fail@plt+0x28a8>
   13938:	ldr	r1, [sp, #72]	; 0x48
   1393c:	mov	r9, #0
   13940:	add	r1, r1, #1
   13944:	cmp	r9, r5
   13948:	strbcc	r0, [ip, r9]
   1394c:	ldrb	r0, [r1, r9]
   13950:	add	r9, r9, #1
   13954:	cmp	r0, #0
   13958:	bne	13944 <__assert_fail@plt+0x2784>
   1395c:	b	13a68 <__assert_fail@plt+0x28a8>
   13960:	bl	17520 <__assert_fail@plt+0x6360>
   13964:	ldrb	r1, [r0]
   13968:	and	r1, r1, #223	; 0xdf
   1396c:	cmp	r1, #71	; 0x47
   13970:	beq	139e0 <__assert_fail@plt+0x2820>
   13974:	ldr	ip, [fp, #-84]	; 0xffffffac
   13978:	cmp	r1, #85	; 0x55
   1397c:	bne	13a3c <__assert_fail@plt+0x287c>
   13980:	ldrb	r1, [r0, #1]
   13984:	and	r1, r1, #223	; 0xdf
   13988:	cmp	r1, #84	; 0x54
   1398c:	bne	13a3c <__assert_fail@plt+0x287c>
   13990:	ldrb	r1, [r0, #2]
   13994:	and	r1, r1, #223	; 0xdf
   13998:	cmp	r1, #70	; 0x46
   1399c:	bne	13a3c <__assert_fail@plt+0x287c>
   139a0:	ldrb	r1, [r0, #3]
   139a4:	cmp	r1, #45	; 0x2d
   139a8:	bne	13a3c <__assert_fail@plt+0x287c>
   139ac:	ldrb	r1, [r0, #4]
   139b0:	cmp	r1, #56	; 0x38
   139b4:	bne	13a3c <__assert_fail@plt+0x287c>
   139b8:	ldrb	r0, [r0, #5]
   139bc:	cmp	r0, #0
   139c0:	bne	13a3c <__assert_fail@plt+0x287c>
   139c4:	movw	r0, #33294	; 0x820e
   139c8:	movt	r0, #1
   139cc:	str	r0, [sp, #76]	; 0x4c
   139d0:	mov	r9, #0
   139d4:	tst	r8, #1
   139d8:	beq	13928 <__assert_fail@plt+0x2768>
   139dc:	b	13a68 <__assert_fail@plt+0x28a8>
   139e0:	ldrb	r1, [r0, #1]
   139e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   139e8:	and	r1, r1, #223	; 0xdf
   139ec:	cmp	r1, #66	; 0x42
   139f0:	bne	13a3c <__assert_fail@plt+0x287c>
   139f4:	ldrb	r1, [r0, #2]
   139f8:	cmp	r1, #49	; 0x31
   139fc:	bne	13a3c <__assert_fail@plt+0x287c>
   13a00:	ldrb	r1, [r0, #3]
   13a04:	cmp	r1, #56	; 0x38
   13a08:	bne	13a3c <__assert_fail@plt+0x287c>
   13a0c:	ldrb	r1, [r0, #4]
   13a10:	cmp	r1, #48	; 0x30
   13a14:	bne	13a3c <__assert_fail@plt+0x287c>
   13a18:	ldrb	r1, [r0, #5]
   13a1c:	cmp	r1, #51	; 0x33
   13a20:	bne	13a3c <__assert_fail@plt+0x287c>
   13a24:	ldrb	r1, [r0, #6]
   13a28:	cmp	r1, #48	; 0x30
   13a2c:	bne	13a3c <__assert_fail@plt+0x287c>
   13a30:	ldrb	r0, [r0, #7]
   13a34:	cmp	r0, #0
   13a38:	beq	14850 <__assert_fail@plt+0x3690>
   13a3c:	movw	r0, #33288	; 0x8208
   13a40:	cmp	r4, #9
   13a44:	movt	r0, #1
   13a48:	mov	r1, r0
   13a4c:	movw	r0, #33284	; 0x8204
   13a50:	movt	r0, #1
   13a54:	moveq	r1, r0
   13a58:	str	r1, [sp, #76]	; 0x4c
   13a5c:	mov	r9, #0
   13a60:	tst	r8, #1
   13a64:	beq	13928 <__assert_fail@plt+0x2768>
   13a68:	ldr	r6, [sp, #76]	; 0x4c
   13a6c:	mov	r0, r6
   13a70:	bl	11094 <strlen@plt>
   13a74:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a78:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13a7c:	str	r0, [fp, #-72]	; 0xffffffb8
   13a80:	str	r6, [fp, #-88]	; 0xffffffa8
   13a84:	mov	r2, #1
   13a88:	mov	r3, r8
   13a8c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13a90:	str	r4, [fp, #-64]	; 0xffffffc0
   13a94:	mov	sl, #0
   13a98:	str	r3, [fp, #-76]	; 0xffffffb4
   13a9c:	str	r2, [sp, #88]	; 0x58
   13aa0:	cmp	r0, #0
   13aa4:	movwne	r0, #1
   13aa8:	and	r1, r0, r3
   13aac:	and	r1, r2, r1
   13ab0:	str	r1, [sp, #48]	; 0x30
   13ab4:	sub	r1, r4, #2
   13ab8:	clz	r1, r1
   13abc:	lsr	r1, r1, #5
   13ac0:	and	r1, r1, r3
   13ac4:	str	r1, [sp, #44]	; 0x2c
   13ac8:	subs	r1, r4, #2
   13acc:	eor	r4, r3, #1
   13ad0:	movwne	r1, #1
   13ad4:	str	r4, [sp, #92]	; 0x5c
   13ad8:	orr	r4, r1, r4
   13adc:	and	r1, r1, r2
   13ae0:	and	r0, r0, r1
   13ae4:	str	r4, [sp, #64]	; 0x40
   13ae8:	ldr	r4, [sp, #84]	; 0x54
   13aec:	str	r0, [fp, #-60]	; 0xffffffc4
   13af0:	orr	r0, r1, r3
   13af4:	ldr	r1, [fp, #16]
   13af8:	eor	r0, r0, #1
   13afc:	clz	r1, r1
   13b00:	lsr	r1, r1, #5
   13b04:	orr	r0, r1, r0
   13b08:	str	r0, [fp, #-68]	; 0xffffffbc
   13b0c:	eor	r0, r2, #1
   13b10:	str	r0, [sp, #52]	; 0x34
   13b14:	cmn	r7, #1
   13b18:	beq	13b28 <__assert_fail@plt+0x2968>
   13b1c:	cmp	sl, r7
   13b20:	bne	13b34 <__assert_fail@plt+0x2974>
   13b24:	b	147c8 <__assert_fail@plt+0x3608>
   13b28:	ldrb	r0, [lr, sl]
   13b2c:	cmp	r0, #0
   13b30:	beq	147d0 <__assert_fail@plt+0x3610>
   13b34:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13b38:	cmp	r0, #0
   13b3c:	beq	13b9c <__assert_fail@plt+0x29dc>
   13b40:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13b44:	mov	r6, r5
   13b48:	add	r5, sl, r0
   13b4c:	cmp	r0, #2
   13b50:	bcc	13bbc <__assert_fail@plt+0x29fc>
   13b54:	mov	r0, #0
   13b58:	cmn	r7, #1
   13b5c:	str	r0, [fp, #-56]	; 0xffffffc8
   13b60:	bne	13b78 <__assert_fail@plt+0x29b8>
   13b64:	mov	r0, lr
   13b68:	bl	11094 <strlen@plt>
   13b6c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13b70:	ldr	ip, [fp, #-84]	; 0xffffffac
   13b74:	mov	r7, r0
   13b78:	cmp	r5, r7
   13b7c:	bls	13bcc <__assert_fail@plt+0x2a0c>
   13b80:	mov	r0, #0
   13b84:	mov	r5, r6
   13b88:	str	r0, [fp, #-48]	; 0xffffffd0
   13b8c:	ldrb	r6, [lr, sl]
   13b90:	cmp	r6, #126	; 0x7e
   13b94:	bls	13c1c <__assert_fail@plt+0x2a5c>
   13b98:	b	14178 <__assert_fail@plt+0x2fb8>
   13b9c:	mov	r0, #0
   13ba0:	str	r0, [fp, #-56]	; 0xffffffc8
   13ba4:	mov	r0, #0
   13ba8:	str	r0, [fp, #-48]	; 0xffffffd0
   13bac:	ldrb	r6, [lr, sl]
   13bb0:	cmp	r6, #126	; 0x7e
   13bb4:	bls	13c1c <__assert_fail@plt+0x2a5c>
   13bb8:	b	14178 <__assert_fail@plt+0x2fb8>
   13bbc:	mov	r0, #0
   13bc0:	str	r0, [fp, #-56]	; 0xffffffc8
   13bc4:	cmp	r5, r7
   13bc8:	bhi	13b80 <__assert_fail@plt+0x29c0>
   13bcc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13bd0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13bd4:	add	r0, lr, sl
   13bd8:	bl	11088 <bcmp@plt>
   13bdc:	ldr	r2, [sp, #92]	; 0x5c
   13be0:	cmp	r0, #0
   13be4:	mov	r1, r0
   13be8:	mov	r5, r6
   13bec:	movwne	r1, #1
   13bf0:	orr	r1, r1, r2
   13bf4:	tst	r1, #1
   13bf8:	beq	14890 <__assert_fail@plt+0x36d0>
   13bfc:	ldr	ip, [fp, #-84]	; 0xffffffac
   13c00:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13c04:	clz	r0, r0
   13c08:	lsr	r0, r0, #5
   13c0c:	str	r0, [fp, #-48]	; 0xffffffd0
   13c10:	ldrb	r6, [lr, sl]
   13c14:	cmp	r6, #126	; 0x7e
   13c18:	bhi	14178 <__assert_fail@plt+0x2fb8>
   13c1c:	add	r3, pc, #16
   13c20:	mov	r8, #1
   13c24:	mov	r2, #110	; 0x6e
   13c28:	mov	r0, #97	; 0x61
   13c2c:	mov	r1, #0
   13c30:	ldr	pc, [r3, r6, lsl #2]
   13c34:	andeq	r3, r1, r0, lsr pc
   13c38:	andeq	r4, r1, r8, ror r1
   13c3c:	andeq	r4, r1, r8, ror r1
   13c40:	andeq	r4, r1, r8, ror r1
   13c44:	andeq	r4, r1, r8, ror r1
   13c48:	andeq	r4, r1, r8, ror r1
   13c4c:	andeq	r4, r1, r8, ror r1
   13c50:	andeq	r4, r1, ip, lsr #4
   13c54:	andeq	r3, r1, r0, lsl pc
   13c58:	andeq	r3, r1, r8, lsl #30
   13c5c:	andeq	r3, r1, ip, lsl pc
   13c60:	andeq	r4, r1, ip, asr #32
   13c64:	andeq	r3, r1, r0, lsl #30
   13c68:	andeq	r3, r1, r8, lsl pc
   13c6c:	andeq	r4, r1, r8, ror r1
   13c70:	andeq	r4, r1, r8, ror r1
   13c74:	andeq	r4, r1, r8, ror r1
   13c78:	andeq	r4, r1, r8, ror r1
   13c7c:	andeq	r4, r1, r8, ror r1
   13c80:	andeq	r4, r1, r8, ror r1
   13c84:	andeq	r4, r1, r8, ror r1
   13c88:	andeq	r4, r1, r8, ror r1
   13c8c:	andeq	r4, r1, r8, ror r1
   13c90:	andeq	r4, r1, r8, ror r1
   13c94:	andeq	r4, r1, r8, ror r1
   13c98:	andeq	r4, r1, r8, ror r1
   13c9c:	andeq	r4, r1, r8, ror r1
   13ca0:	andeq	r4, r1, r8, ror r1
   13ca4:	andeq	r4, r1, r8, ror r1
   13ca8:	andeq	r4, r1, r8, ror r1
   13cac:	andeq	r4, r1, r8, ror r1
   13cb0:	andeq	r4, r1, r8, ror r1
   13cb4:	andeq	r3, r1, r4, lsr #29
   13cb8:	andeq	r3, r1, r8, lsr #29
   13cbc:	andeq	r3, r1, r8, lsr #29
   13cc0:	muleq	r1, r8, lr
   13cc4:	andeq	r3, r1, r8, lsr #29
   13cc8:	andeq	r3, r1, r0, lsr lr
   13ccc:	andeq	r3, r1, r8, lsr #29
   13cd0:	andeq	r4, r1, r4, asr r0
   13cd4:	andeq	r3, r1, r8, lsr #29
   13cd8:	andeq	r3, r1, r8, lsr #29
   13cdc:	andeq	r3, r1, r8, lsr #29
   13ce0:	andeq	r3, r1, r0, lsr lr
   13ce4:	andeq	r3, r1, r0, lsr lr
   13ce8:	andeq	r3, r1, r0, lsr lr
   13cec:	andeq	r3, r1, r0, lsr lr
   13cf0:	andeq	r3, r1, r0, lsr lr
   13cf4:	andeq	r3, r1, r0, lsr lr
   13cf8:	andeq	r3, r1, r0, lsr lr
   13cfc:	andeq	r3, r1, r0, lsr lr
   13d00:	andeq	r3, r1, r0, lsr lr
   13d04:	andeq	r3, r1, r0, lsr lr
   13d08:	andeq	r3, r1, r0, lsr lr
   13d0c:	andeq	r3, r1, r0, lsr lr
   13d10:	andeq	r3, r1, r0, lsr lr
   13d14:	andeq	r3, r1, r0, lsr lr
   13d18:	andeq	r3, r1, r0, lsr lr
   13d1c:	andeq	r3, r1, r0, lsr lr
   13d20:	andeq	r3, r1, r8, lsr #29
   13d24:	andeq	r3, r1, r8, lsr #29
   13d28:	andeq	r3, r1, r8, lsr #29
   13d2c:	andeq	r3, r1, r8, lsr #29
   13d30:	andeq	r4, r1, r8, lsl r0
   13d34:	andeq	r4, r1, r8, ror r1
   13d38:	andeq	r3, r1, r0, lsr lr
   13d3c:	andeq	r3, r1, r0, lsr lr
   13d40:	andeq	r3, r1, r0, lsr lr
   13d44:	andeq	r3, r1, r0, lsr lr
   13d48:	andeq	r3, r1, r0, lsr lr
   13d4c:	andeq	r3, r1, r0, lsr lr
   13d50:	andeq	r3, r1, r0, lsr lr
   13d54:	andeq	r3, r1, r0, lsr lr
   13d58:	andeq	r3, r1, r0, lsr lr
   13d5c:	andeq	r3, r1, r0, lsr lr
   13d60:	andeq	r3, r1, r0, lsr lr
   13d64:	andeq	r3, r1, r0, lsr lr
   13d68:	andeq	r3, r1, r0, lsr lr
   13d6c:	andeq	r3, r1, r0, lsr lr
   13d70:	andeq	r3, r1, r0, lsr lr
   13d74:	andeq	r3, r1, r0, lsr lr
   13d78:	andeq	r3, r1, r0, lsr lr
   13d7c:	andeq	r3, r1, r0, lsr lr
   13d80:	andeq	r3, r1, r0, lsr lr
   13d84:	andeq	r3, r1, r0, lsr lr
   13d88:	andeq	r3, r1, r0, lsr lr
   13d8c:	andeq	r3, r1, r0, lsr lr
   13d90:	andeq	r3, r1, r0, lsr lr
   13d94:	andeq	r3, r1, r0, lsr lr
   13d98:	andeq	r3, r1, r0, lsr lr
   13d9c:	andeq	r3, r1, r0, lsr lr
   13da0:	andeq	r3, r1, r8, lsr #29
   13da4:	ldrdeq	r3, [r1], -ip
   13da8:	andeq	r3, r1, r0, lsr lr
   13dac:	andeq	r3, r1, r8, lsr #29
   13db0:	andeq	r3, r1, r0, lsr lr
   13db4:	andeq	r3, r1, r8, lsr #29
   13db8:	andeq	r3, r1, r0, lsr lr
   13dbc:	andeq	r3, r1, r0, lsr lr
   13dc0:	andeq	r3, r1, r0, lsr lr
   13dc4:	andeq	r3, r1, r0, lsr lr
   13dc8:	andeq	r3, r1, r0, lsr lr
   13dcc:	andeq	r3, r1, r0, lsr lr
   13dd0:	andeq	r3, r1, r0, lsr lr
   13dd4:	andeq	r3, r1, r0, lsr lr
   13dd8:	andeq	r3, r1, r0, lsr lr
   13ddc:	andeq	r3, r1, r0, lsr lr
   13de0:	andeq	r3, r1, r0, lsr lr
   13de4:	andeq	r3, r1, r0, lsr lr
   13de8:	andeq	r3, r1, r0, lsr lr
   13dec:	andeq	r3, r1, r0, lsr lr
   13df0:	andeq	r3, r1, r0, lsr lr
   13df4:	andeq	r3, r1, r0, lsr lr
   13df8:	andeq	r3, r1, r0, lsr lr
   13dfc:	andeq	r3, r1, r0, lsr lr
   13e00:	andeq	r3, r1, r0, lsr lr
   13e04:	andeq	r3, r1, r0, lsr lr
   13e08:	andeq	r3, r1, r0, lsr lr
   13e0c:	andeq	r3, r1, r0, lsr lr
   13e10:	andeq	r3, r1, r0, lsr lr
   13e14:	andeq	r3, r1, r0, lsr lr
   13e18:	andeq	r3, r1, r0, lsr lr
   13e1c:	andeq	r3, r1, r0, lsr lr
   13e20:	andeq	r3, r1, r0, ror lr
   13e24:	andeq	r3, r1, r8, lsr #29
   13e28:	andeq	r3, r1, r0, ror lr
   13e2c:	muleq	r1, r8, lr
   13e30:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13e34:	tst	r0, #1
   13e38:	bne	140f0 <__assert_fail@plt+0x2f30>
   13e3c:	ldr	r1, [fp, #16]
   13e40:	ubfx	r0, r6, #5, #3
   13e44:	mov	r2, #1
   13e48:	ldr	r0, [r1, r0, lsl #2]
   13e4c:	and	r1, r6, #31
   13e50:	tst	r0, r2, lsl r1
   13e54:	beq	140f0 <__assert_fail@plt+0x2f30>
   13e58:	mov	r0, r6
   13e5c:	mov	r1, r8
   13e60:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13e64:	tst	r2, #1
   13e68:	beq	14110 <__assert_fail@plt+0x2f50>
   13e6c:	b	1486c <__assert_fail@plt+0x36ac>
   13e70:	cmp	r7, #1
   13e74:	beq	13e98 <__assert_fail@plt+0x2cd8>
   13e78:	mov	r8, #0
   13e7c:	cmn	r7, #1
   13e80:	bne	140dc <__assert_fail@plt+0x2f1c>
   13e84:	ldrb	r0, [lr, #1]
   13e88:	cmp	r0, #0
   13e8c:	beq	13e98 <__assert_fail@plt+0x2cd8>
   13e90:	mvn	r7, #0
   13e94:	b	140dc <__assert_fail@plt+0x2f1c>
   13e98:	mov	r8, #0
   13e9c:	cmp	sl, #0
   13ea0:	bne	140dc <__assert_fail@plt+0x2f1c>
   13ea4:	mov	r1, #1
   13ea8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13eac:	cmp	r0, #2
   13eb0:	bne	13ec8 <__assert_fail@plt+0x2d08>
   13eb4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13eb8:	mov	r8, r1
   13ebc:	tst	r0, #1
   13ec0:	beq	13e30 <__assert_fail@plt+0x2c70>
   13ec4:	b	1486c <__assert_fail@plt+0x36ac>
   13ec8:	mov	r8, r1
   13ecc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13ed0:	tst	r0, #1
   13ed4:	beq	13e3c <__assert_fail@plt+0x2c7c>
   13ed8:	b	140f0 <__assert_fail@plt+0x2f30>
   13edc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13ee0:	cmp	r0, #2
   13ee4:	bne	141a4 <__assert_fail@plt+0x2fe4>
   13ee8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13eec:	tst	r0, #1
   13ef0:	bne	1486c <__assert_fail@plt+0x36ac>
   13ef4:	mov	r0, #0
   13ef8:	str	r0, [fp, #-56]	; 0xffffffc8
   13efc:	b	141bc <__assert_fail@plt+0x2ffc>
   13f00:	mov	r0, #102	; 0x66
   13f04:	b	1422c <__assert_fail@plt+0x306c>
   13f08:	mov	r2, #116	; 0x74
   13f0c:	b	13f1c <__assert_fail@plt+0x2d5c>
   13f10:	mov	r0, #98	; 0x62
   13f14:	b	1422c <__assert_fail@plt+0x306c>
   13f18:	mov	r2, #114	; 0x72
   13f1c:	ldr	r0, [sp, #64]	; 0x40
   13f20:	tst	r0, #1
   13f24:	mov	r0, r2
   13f28:	bne	1422c <__assert_fail@plt+0x306c>
   13f2c:	b	1486c <__assert_fail@plt+0x36ac>
   13f30:	ldr	r0, [sp, #88]	; 0x58
   13f34:	tst	r0, #1
   13f38:	beq	1424c <__assert_fail@plt+0x308c>
   13f3c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13f40:	tst	r0, #1
   13f44:	bne	149a8 <__assert_fail@plt+0x37e8>
   13f48:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13f4c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13f50:	subs	r0, r0, #2
   13f54:	movwne	r0, #1
   13f58:	orr	r0, r0, r1
   13f5c:	tst	r0, #1
   13f60:	bne	13f9c <__assert_fail@plt+0x2ddc>
   13f64:	cmp	r9, r5
   13f68:	movcc	r0, #39	; 0x27
   13f6c:	strbcc	r0, [ip, r9]
   13f70:	add	r0, r9, #1
   13f74:	cmp	r0, r5
   13f78:	movcc	r1, #36	; 0x24
   13f7c:	strbcc	r1, [ip, r0]
   13f80:	add	r0, r9, #2
   13f84:	add	r9, r9, #3
   13f88:	cmp	r0, r5
   13f8c:	movcc	r1, #39	; 0x27
   13f90:	strbcc	r1, [ip, r0]
   13f94:	mov	r0, #1
   13f98:	str	r0, [fp, #-52]	; 0xffffffcc
   13f9c:	mov	r1, #1
   13fa0:	cmp	r9, r5
   13fa4:	mov	r8, #0
   13fa8:	mov	r6, #48	; 0x30
   13fac:	str	r1, [fp, #-56]	; 0xffffffc8
   13fb0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13fb4:	movcc	r0, #92	; 0x5c
   13fb8:	strbcc	r0, [ip, r9]
   13fbc:	add	r0, r9, #1
   13fc0:	cmp	r1, #2
   13fc4:	beq	14418 <__assert_fail@plt+0x3258>
   13fc8:	add	r1, sl, #1
   13fcc:	cmp	r1, r7
   13fd0:	bcs	14418 <__assert_fail@plt+0x3258>
   13fd4:	ldrb	r1, [lr, r1]
   13fd8:	sub	r1, r1, #48	; 0x30
   13fdc:	uxtb	r1, r1
   13fe0:	cmp	r1, #9
   13fe4:	bhi	14418 <__assert_fail@plt+0x3258>
   13fe8:	cmp	r0, r5
   13fec:	movcc	r1, #48	; 0x30
   13ff0:	strbcc	r1, [ip, r0]
   13ff4:	add	r0, r9, #2
   13ff8:	add	r9, r9, #3
   13ffc:	cmp	r0, r5
   14000:	movcc	r1, #48	; 0x30
   14004:	strbcc	r1, [ip, r0]
   14008:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1400c:	tst	r0, #1
   14010:	beq	13e3c <__assert_fail@plt+0x2c7c>
   14014:	b	140f0 <__assert_fail@plt+0x2f30>
   14018:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1401c:	mov	r6, #63	; 0x3f
   14020:	cmp	r0, #5
   14024:	beq	1442c <__assert_fail@plt+0x326c>
   14028:	mov	r1, #0
   1402c:	cmp	r0, #2
   14030:	str	r1, [fp, #-56]	; 0xffffffc8
   14034:	bne	144f4 <__assert_fail@plt+0x3334>
   14038:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1403c:	mov	r8, #0
   14040:	tst	r0, #1
   14044:	beq	13e30 <__assert_fail@plt+0x2c70>
   14048:	b	1486c <__assert_fail@plt+0x36ac>
   1404c:	mov	r0, #118	; 0x76
   14050:	b	1422c <__assert_fail@plt+0x306c>
   14054:	mov	r0, #1
   14058:	mov	r6, #39	; 0x27
   1405c:	str	r0, [sp, #60]	; 0x3c
   14060:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14064:	cmp	r0, #2
   14068:	bne	1426c <__assert_fail@plt+0x30ac>
   1406c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14070:	tst	r0, #1
   14074:	bne	1486c <__assert_fail@plt+0x36ac>
   14078:	ldr	r2, [sp, #56]	; 0x38
   1407c:	clz	r1, r5
   14080:	mov	r8, #1
   14084:	lsr	r1, r1, #5
   14088:	cmp	r2, #0
   1408c:	mov	r0, r2
   14090:	movwne	r0, #1
   14094:	orrs	r0, r0, r1
   14098:	moveq	r2, r5
   1409c:	moveq	r5, r0
   140a0:	cmp	r9, r5
   140a4:	str	r2, [sp, #56]	; 0x38
   140a8:	movcc	r0, #39	; 0x27
   140ac:	strbcc	r0, [ip, r9]
   140b0:	add	r0, r9, #1
   140b4:	cmp	r0, r5
   140b8:	movcc	r1, #92	; 0x5c
   140bc:	strbcc	r1, [ip, r0]
   140c0:	add	r0, r9, #2
   140c4:	add	r9, r9, #3
   140c8:	cmp	r0, r5
   140cc:	movcc	r1, #39	; 0x27
   140d0:	strbcc	r1, [ip, r0]
   140d4:	mov	r0, #0
   140d8:	str	r0, [fp, #-52]	; 0xffffffcc
   140dc:	mov	r0, #0
   140e0:	str	r0, [fp, #-56]	; 0xffffffc8
   140e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   140e8:	tst	r0, #1
   140ec:	beq	13e3c <__assert_fail@plt+0x2c7c>
   140f0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   140f4:	mov	r1, r8
   140f8:	cmp	r0, #0
   140fc:	mov	r0, r6
   14100:	beq	141c4 <__assert_fail@plt+0x3004>
   14104:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14108:	tst	r2, #1
   1410c:	bne	1486c <__assert_fail@plt+0x36ac>
   14110:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14114:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14118:	subs	r2, r2, #2
   1411c:	movwne	r2, #1
   14120:	orr	r2, r2, r3
   14124:	tst	r2, #1
   14128:	bne	14164 <__assert_fail@plt+0x2fa4>
   1412c:	cmp	r9, r5
   14130:	movcc	r2, #39	; 0x27
   14134:	strbcc	r2, [ip, r9]
   14138:	add	r2, r9, #1
   1413c:	cmp	r2, r5
   14140:	movcc	r3, #36	; 0x24
   14144:	strbcc	r3, [ip, r2]
   14148:	add	r2, r9, #2
   1414c:	add	r9, r9, #3
   14150:	cmp	r2, r5
   14154:	movcc	r3, #39	; 0x27
   14158:	strbcc	r3, [ip, r2]
   1415c:	mov	r2, #1
   14160:	str	r2, [fp, #-52]	; 0xffffffcc
   14164:	cmp	r9, r5
   14168:	movcc	r2, #92	; 0x5c
   1416c:	strbcc	r2, [ip, r9]
   14170:	add	r9, r9, #1
   14174:	b	1420c <__assert_fail@plt+0x304c>
   14178:	ldr	r0, [sp, #40]	; 0x28
   1417c:	cmp	r0, #1
   14180:	bne	14280 <__assert_fail@plt+0x30c0>
   14184:	bl	11070 <__ctype_b_loc@plt>
   14188:	ldr	r0, [r0]
   1418c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14190:	mov	r1, #1
   14194:	add	r0, r0, r6, lsl #1
   14198:	ldrb	r0, [r0, #1]
   1419c:	ubfx	r8, r0, #6, #1
   141a0:	b	145d8 <__assert_fail@plt+0x3418>
   141a4:	ldr	r1, [sp, #48]	; 0x30
   141a8:	mov	r0, #0
   141ac:	str	r0, [fp, #-56]	; 0xffffffc8
   141b0:	mov	r0, #92	; 0x5c
   141b4:	cmp	r1, #0
   141b8:	beq	1422c <__assert_fail@plt+0x306c>
   141bc:	mov	r6, #92	; 0x5c
   141c0:	mov	r8, #0
   141c4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   141c8:	cmp	r0, #0
   141cc:	bne	14204 <__assert_fail@plt+0x3044>
   141d0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   141d4:	tst	r0, #1
   141d8:	beq	14204 <__assert_fail@plt+0x3044>
   141dc:	cmp	r9, r5
   141e0:	movcc	r0, #39	; 0x27
   141e4:	strbcc	r0, [ip, r9]
   141e8:	add	r0, r9, #1
   141ec:	add	r9, r9, #2
   141f0:	cmp	r0, r5
   141f4:	movcc	r1, #39	; 0x27
   141f8:	strbcc	r1, [ip, r0]
   141fc:	mov	r0, #0
   14200:	str	r0, [fp, #-52]	; 0xffffffcc
   14204:	mov	r1, r8
   14208:	mov	r0, r6
   1420c:	cmp	r9, r5
   14210:	and	r4, r4, r1
   14214:	strbcc	r0, [ip, r9]
   14218:	add	r9, r9, #1
   1421c:	add	sl, sl, #1
   14220:	cmn	r7, #1
   14224:	bne	13b1c <__assert_fail@plt+0x295c>
   14228:	b	13b28 <__assert_fail@plt+0x2968>
   1422c:	mov	r1, #0
   14230:	mov	r8, #0
   14234:	str	r1, [fp, #-56]	; 0xffffffc8
   14238:	ldr	r1, [sp, #88]	; 0x58
   1423c:	tst	r1, #1
   14240:	mov	r1, #0
   14244:	beq	13e30 <__assert_fail@plt+0x2c70>
   14248:	b	14104 <__assert_fail@plt+0x2f44>
   1424c:	ldr	r0, [sp, #36]	; 0x24
   14250:	mov	r6, #0
   14254:	mov	r8, #0
   14258:	cmp	r0, #0
   1425c:	mov	r0, #0
   14260:	str	r0, [fp, #-56]	; 0xffffffc8
   14264:	bne	1421c <__assert_fail@plt+0x305c>
   14268:	b	13e30 <__assert_fail@plt+0x2c70>
   1426c:	mov	r8, #1
   14270:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14274:	tst	r0, #1
   14278:	beq	13e3c <__assert_fail@plt+0x2c7c>
   1427c:	b	140f0 <__assert_fail@plt+0x2f30>
   14280:	mov	r0, #0
   14284:	cmn	r7, #1
   14288:	str	r0, [fp, #-36]	; 0xffffffdc
   1428c:	str	r0, [fp, #-40]	; 0xffffffd8
   14290:	bne	142a4 <__assert_fail@plt+0x30e4>
   14294:	mov	r0, lr
   14298:	bl	11094 <strlen@plt>
   1429c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   142a0:	mov	r7, r0
   142a4:	ldr	r0, [sp, #44]	; 0x2c
   142a8:	str	r4, [sp, #84]	; 0x54
   142ac:	str	r5, [sp, #28]
   142b0:	cmp	r0, #0
   142b4:	beq	14508 <__assert_fail@plt+0x3348>
   142b8:	ldr	r0, [sp, #80]	; 0x50
   142bc:	mov	r8, #1
   142c0:	mov	r5, #0
   142c4:	add	r0, r0, sl
   142c8:	str	r0, [sp, #24]
   142cc:	sub	r0, fp, #40	; 0x28
   142d0:	mov	r3, r0
   142d4:	b	14310 <__assert_fail@plt+0x3150>
   142d8:	ldr	r5, [sp, #68]	; 0x44
   142dc:	add	r5, r0, r5
   142e0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   142e4:	bl	10fd4 <iswprint@plt>
   142e8:	cmp	r0, #0
   142ec:	sub	r4, fp, #40	; 0x28
   142f0:	movwne	r0, #1
   142f4:	and	r8, r8, r0
   142f8:	mov	r0, r4
   142fc:	bl	10fa4 <mbsinit@plt>
   14300:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14304:	mov	r3, r4
   14308:	cmp	r0, #0
   1430c:	bne	145cc <__assert_fail@plt+0x340c>
   14310:	str	r5, [sp, #68]	; 0x44
   14314:	add	r5, r5, sl
   14318:	sub	r0, fp, #44	; 0x2c
   1431c:	add	r1, lr, r5
   14320:	sub	r2, r7, r5
   14324:	bl	17558 <__assert_fail@plt+0x6398>
   14328:	cmn	r0, #2
   1432c:	beq	1458c <__assert_fail@plt+0x33cc>
   14330:	ldr	ip, [fp, #-84]	; 0xffffffac
   14334:	cmn	r0, #1
   14338:	beq	14580 <__assert_fail@plt+0x33c0>
   1433c:	cmp	r0, #0
   14340:	beq	14584 <__assert_fail@plt+0x33c4>
   14344:	cmp	r0, #2
   14348:	bcc	142d8 <__assert_fail@plt+0x3118>
   1434c:	ldr	r1, [sp, #68]	; 0x44
   14350:	ldr	r2, [sp, #24]
   14354:	add	r1, r2, r1
   14358:	sub	r2, r0, #1
   1435c:	ldrb	r3, [r1]
   14360:	sub	r3, r3, #91	; 0x5b
   14364:	cmp	r3, #33	; 0x21
   14368:	bls	14388 <__assert_fail@plt+0x31c8>
   1436c:	add	r1, r1, #1
   14370:	subs	r2, r2, #1
   14374:	beq	142d8 <__assert_fail@plt+0x3118>
   14378:	ldrb	r3, [r1]
   1437c:	sub	r3, r3, #91	; 0x5b
   14380:	cmp	r3, #33	; 0x21
   14384:	bhi	1436c <__assert_fail@plt+0x31ac>
   14388:	add	r5, pc, #0
   1438c:	ldr	pc, [r5, r3, lsl #2]
   14390:	andeq	r4, r1, r4, lsr #17
   14394:	andeq	r4, r1, r4, lsr #17
   14398:	andeq	r4, r1, ip, ror #6
   1439c:	andeq	r4, r1, r4, lsr #17
   143a0:	andeq	r4, r1, ip, ror #6
   143a4:	andeq	r4, r1, r4, lsr #17
   143a8:	andeq	r4, r1, ip, ror #6
   143ac:	andeq	r4, r1, ip, ror #6
   143b0:	andeq	r4, r1, ip, ror #6
   143b4:	andeq	r4, r1, ip, ror #6
   143b8:	andeq	r4, r1, ip, ror #6
   143bc:	andeq	r4, r1, ip, ror #6
   143c0:	andeq	r4, r1, ip, ror #6
   143c4:	andeq	r4, r1, ip, ror #6
   143c8:	andeq	r4, r1, ip, ror #6
   143cc:	andeq	r4, r1, ip, ror #6
   143d0:	andeq	r4, r1, ip, ror #6
   143d4:	andeq	r4, r1, ip, ror #6
   143d8:	andeq	r4, r1, ip, ror #6
   143dc:	andeq	r4, r1, ip, ror #6
   143e0:	andeq	r4, r1, ip, ror #6
   143e4:	andeq	r4, r1, ip, ror #6
   143e8:	andeq	r4, r1, ip, ror #6
   143ec:	andeq	r4, r1, ip, ror #6
   143f0:	andeq	r4, r1, ip, ror #6
   143f4:	andeq	r4, r1, ip, ror #6
   143f8:	andeq	r4, r1, ip, ror #6
   143fc:	andeq	r4, r1, ip, ror #6
   14400:	andeq	r4, r1, ip, ror #6
   14404:	andeq	r4, r1, ip, ror #6
   14408:	andeq	r4, r1, ip, ror #6
   1440c:	andeq	r4, r1, ip, ror #6
   14410:	andeq	r4, r1, ip, ror #6
   14414:	andeq	r4, r1, r4, lsr #17
   14418:	mov	r9, r0
   1441c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14420:	tst	r0, #1
   14424:	beq	13e3c <__assert_fail@plt+0x2c7c>
   14428:	b	140f0 <__assert_fail@plt+0x2f30>
   1442c:	mov	r0, #0
   14430:	str	r0, [fp, #-56]	; 0xffffffc8
   14434:	ldr	r0, [sp, #32]
   14438:	cmp	r0, #0
   1443c:	beq	144f4 <__assert_fail@plt+0x3334>
   14440:	add	r0, sl, #2
   14444:	mov	r1, r7
   14448:	cmp	r0, r7
   1444c:	bcs	144f4 <__assert_fail@plt+0x3334>
   14450:	add	r1, sl, lr
   14454:	ldrb	r1, [r1, #1]
   14458:	cmp	r1, #63	; 0x3f
   1445c:	bne	144f4 <__assert_fail@plt+0x3334>
   14460:	ldrb	r8, [lr, r0]
   14464:	sub	r2, r8, #33	; 0x21
   14468:	cmp	r2, #29
   1446c:	bhi	144f4 <__assert_fail@plt+0x3334>
   14470:	mov	r1, r4
   14474:	movw	r4, #20929	; 0x51c1
   14478:	mov	r3, #1
   1447c:	movt	r4, #14336	; 0x3800
   14480:	tst	r4, r3, lsl r2
   14484:	beq	147b0 <__assert_fail@plt+0x35f0>
   14488:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1448c:	tst	r2, #1
   14490:	bne	1486c <__assert_fail@plt+0x36ac>
   14494:	cmp	r9, r5
   14498:	mov	r6, r8
   1449c:	mov	r4, r1
   144a0:	mov	sl, r0
   144a4:	mov	r8, #0
   144a8:	movcc	r2, #63	; 0x3f
   144ac:	strbcc	r2, [ip, r9]
   144b0:	add	r2, r9, #1
   144b4:	cmp	r2, r5
   144b8:	movcc	r3, #34	; 0x22
   144bc:	strbcc	r3, [ip, r2]
   144c0:	add	r2, r9, #2
   144c4:	cmp	r2, r5
   144c8:	movcc	r3, #34	; 0x22
   144cc:	strbcc	r3, [ip, r2]
   144d0:	add	r2, r9, #3
   144d4:	add	r9, r9, #4
   144d8:	cmp	r2, r5
   144dc:	movcc	r3, #63	; 0x3f
   144e0:	strbcc	r3, [ip, r2]
   144e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   144e8:	tst	r0, #1
   144ec:	beq	13e3c <__assert_fail@plt+0x2c7c>
   144f0:	b	140f0 <__assert_fail@plt+0x2f30>
   144f4:	mov	r8, #0
   144f8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   144fc:	tst	r0, #1
   14500:	beq	13e3c <__assert_fail@plt+0x2c7c>
   14504:	b	140f0 <__assert_fail@plt+0x2f30>
   14508:	mov	r8, #1
   1450c:	mov	r5, #0
   14510:	sub	r4, fp, #40	; 0x28
   14514:	str	r5, [sp, #68]	; 0x44
   14518:	add	r5, r5, sl
   1451c:	sub	r0, fp, #44	; 0x2c
   14520:	mov	r3, r4
   14524:	add	r1, lr, r5
   14528:	sub	r2, r7, r5
   1452c:	bl	17558 <__assert_fail@plt+0x6398>
   14530:	cmn	r0, #2
   14534:	beq	1458c <__assert_fail@plt+0x33cc>
   14538:	cmn	r0, #1
   1453c:	beq	14580 <__assert_fail@plt+0x33c0>
   14540:	ldr	r5, [sp, #68]	; 0x44
   14544:	cmp	r0, #0
   14548:	beq	145c8 <__assert_fail@plt+0x3408>
   1454c:	add	r5, r0, r5
   14550:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14554:	bl	10fd4 <iswprint@plt>
   14558:	cmp	r0, #0
   1455c:	sub	r4, fp, #40	; 0x28
   14560:	movwne	r0, #1
   14564:	and	r8, r8, r0
   14568:	mov	r0, r4
   1456c:	bl	10fa4 <mbsinit@plt>
   14570:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14574:	cmp	r0, #0
   14578:	beq	14514 <__assert_fail@plt+0x3354>
   1457c:	b	145cc <__assert_fail@plt+0x340c>
   14580:	mov	r8, #0
   14584:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14588:	b	145c0 <__assert_fail@plt+0x3400>
   1458c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14590:	mov	r8, #0
   14594:	cmp	r5, r7
   14598:	bcs	145c0 <__assert_fail@plt+0x3400>
   1459c:	ldrb	r0, [lr, r5]
   145a0:	cmp	r0, #0
   145a4:	beq	145c0 <__assert_fail@plt+0x3400>
   145a8:	ldr	r0, [sp, #68]	; 0x44
   145ac:	add	r0, r0, #1
   145b0:	add	r5, r0, sl
   145b4:	str	r0, [sp, #68]	; 0x44
   145b8:	cmp	r5, r7
   145bc:	bcc	1459c <__assert_fail@plt+0x33dc>
   145c0:	ldr	r5, [sp, #68]	; 0x44
   145c4:	b	145cc <__assert_fail@plt+0x340c>
   145c8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   145cc:	mov	r1, r5
   145d0:	ldr	r5, [sp, #28]
   145d4:	ldr	r4, [sp, #84]	; 0x54
   145d8:	ldr	r0, [sp, #52]	; 0x34
   145dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   145e0:	cmp	r1, #1
   145e4:	orr	r2, r8, r0
   145e8:	mov	r0, r1
   145ec:	bhi	145f8 <__assert_fail@plt+0x3438>
   145f0:	tst	r2, #1
   145f4:	bne	13e30 <__assert_fail@plt+0x2c70>
   145f8:	add	r0, r0, sl
   145fc:	str	r2, [sp, #84]	; 0x54
   14600:	str	r0, [fp, #-56]	; 0xffffffc8
   14604:	mov	r0, #0
   14608:	tst	r2, #1
   1460c:	bne	146ec <__assert_fail@plt+0x352c>
   14610:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14614:	tst	r1, #1
   14618:	bne	1486c <__assert_fail@plt+0x36ac>
   1461c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14620:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14624:	subs	r2, r1, #2
   14628:	movwne	r2, #1
   1462c:	orr	r2, r2, r0
   14630:	tst	r2, #1
   14634:	bne	14670 <__assert_fail@plt+0x34b0>
   14638:	cmp	r9, r5
   1463c:	add	r2, r9, #1
   14640:	mov	r0, #1
   14644:	movcc	r1, #39	; 0x27
   14648:	str	r0, [fp, #-52]	; 0xffffffcc
   1464c:	strbcc	r1, [ip, r9]
   14650:	cmp	r2, r5
   14654:	movcc	r1, #36	; 0x24
   14658:	strbcc	r1, [ip, r2]
   1465c:	add	r2, r9, #2
   14660:	add	r9, r9, #3
   14664:	cmp	r2, r5
   14668:	movcc	r1, #39	; 0x27
   1466c:	strbcc	r1, [ip, r2]
   14670:	cmp	r9, r5
   14674:	add	r2, r9, #1
   14678:	movcc	r1, #92	; 0x5c
   1467c:	strbcc	r1, [ip, r9]
   14680:	cmp	r2, r5
   14684:	bcs	14698 <__assert_fail@plt+0x34d8>
   14688:	uxtb	r3, r6
   1468c:	mov	r1, #48	; 0x30
   14690:	orr	r3, r1, r3, lsr #6
   14694:	strb	r3, [ip, r2]
   14698:	add	r2, r9, #2
   1469c:	add	r9, r9, #3
   146a0:	cmp	r2, r5
   146a4:	lsrcc	r3, r6, #3
   146a8:	movcc	r1, #6
   146ac:	bficc	r3, r1, #3, #29
   146b0:	mov	r1, #6
   146b4:	bfi	r6, r1, #3, #29
   146b8:	strbcc	r3, [ip, r2]
   146bc:	mov	r2, #1
   146c0:	b	14720 <__assert_fail@plt+0x3560>
   146c4:	ldr	r1, [sp, #80]	; 0x50
   146c8:	cmp	r9, r2
   146cc:	mov	r5, r2
   146d0:	ldr	r2, [sp, #84]	; 0x54
   146d4:	strbcc	r6, [ip, r9]
   146d8:	add	r9, r9, #1
   146dc:	ldrb	r6, [r1, sl]
   146e0:	mov	sl, r3
   146e4:	tst	r2, #1
   146e8:	beq	14610 <__assert_fail@plt+0x3450>
   146ec:	ldr	r1, [fp, #-48]	; 0xffffffd0
   146f0:	tst	r1, #1
   146f4:	beq	14714 <__assert_fail@plt+0x3554>
   146f8:	cmp	r9, r5
   146fc:	mov	r2, r0
   14700:	movcc	r1, #92	; 0x5c
   14704:	strbcc	r1, [ip, r9]
   14708:	add	r9, r9, #1
   1470c:	mov	r1, #0
   14710:	b	1471c <__assert_fail@plt+0x355c>
   14714:	mov	r1, #0
   14718:	mov	r2, r0
   1471c:	str	r1, [fp, #-48]	; 0xffffffd0
   14720:	mov	r0, r2
   14724:	and	r1, r2, #1
   14728:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1472c:	add	r3, sl, #1
   14730:	cmp	r2, r3
   14734:	bls	14794 <__assert_fail@plt+0x35d4>
   14738:	mov	r2, r5
   1473c:	ldr	r5, [fp, #-52]	; 0xffffffcc
   14740:	cmp	r1, #0
   14744:	movwne	r1, #1
   14748:	mvn	r5, r5
   1474c:	orr	r5, r5, r1
   14750:	tst	r5, #1
   14754:	bne	146c4 <__assert_fail@plt+0x3504>
   14758:	cmp	r9, r2
   1475c:	movcc	r5, r4
   14760:	movcc	r4, #39	; 0x27
   14764:	strbcc	r4, [ip, r9]
   14768:	movcc	r4, r5
   1476c:	add	r5, r9, #1
   14770:	add	r9, r9, #2
   14774:	cmp	r5, r2
   14778:	movcc	r1, r4
   1477c:	movcc	r4, #39	; 0x27
   14780:	strbcc	r4, [ip, r5]
   14784:	movcc	r4, r1
   14788:	mov	r1, #0
   1478c:	str	r1, [fp, #-52]	; 0xffffffcc
   14790:	b	146c4 <__assert_fail@plt+0x3504>
   14794:	cmp	r1, #0
   14798:	movwne	r1, #1
   1479c:	str	r1, [fp, #-56]	; 0xffffffc8
   147a0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   147a4:	cmp	r0, #0
   147a8:	beq	141d0 <__assert_fail@plt+0x3010>
   147ac:	b	14204 <__assert_fail@plt+0x3044>
   147b0:	mov	r8, #0
   147b4:	mov	r4, r1
   147b8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   147bc:	tst	r0, #1
   147c0:	beq	13e3c <__assert_fail@plt+0x2c7c>
   147c4:	b	140f0 <__assert_fail@plt+0x2f30>
   147c8:	mov	r7, sl
   147cc:	b	147d4 <__assert_fail@plt+0x3614>
   147d0:	mvn	r7, #0
   147d4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   147d8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   147dc:	ldr	r2, [sp, #88]	; 0x58
   147e0:	eor	r0, r1, #2
   147e4:	orr	r0, r0, r9
   147e8:	clz	r0, r0
   147ec:	lsr	r0, r0, #5
   147f0:	tst	r3, r0
   147f4:	bne	1486c <__assert_fail@plt+0x36ac>
   147f8:	subs	r0, r1, #2
   147fc:	movwne	r0, #1
   14800:	orr	r0, r3, r0
   14804:	tst	r0, #1
   14808:	ldreq	r0, [sp, #60]	; 0x3c
   1480c:	eoreq	r0, r0, #1
   14810:	tsteq	r0, #1
   14814:	bne	14948 <__assert_fail@plt+0x3788>
   14818:	tst	r4, #1
   1481c:	bne	1490c <__assert_fail@plt+0x374c>
   14820:	ldr	r6, [sp, #56]	; 0x38
   14824:	mov	r8, #0
   14828:	cmp	r6, #0
   1482c:	beq	14944 <__assert_fail@plt+0x3784>
   14830:	mov	r1, #0
   14834:	mov	r4, #2
   14838:	cmp	r5, #0
   1483c:	mov	r0, r2
   14840:	mov	r3, #0
   14844:	str	r1, [sp, #84]	; 0x54
   14848:	beq	13690 <__assert_fail@plt+0x24d0>
   1484c:	b	14948 <__assert_fail@plt+0x3788>
   14850:	movw	r0, #33302	; 0x8216
   14854:	movt	r0, #1
   14858:	str	r0, [sp, #76]	; 0x4c
   1485c:	mov	r9, #0
   14860:	tst	r8, #1
   14864:	beq	13928 <__assert_fail@plt+0x2768>
   14868:	b	13a68 <__assert_fail@plt+0x28a8>
   1486c:	ldr	r1, [sp, #88]	; 0x58
   14870:	mov	r0, #2
   14874:	tst	r1, #1
   14878:	movwne	r0, #4
   1487c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14880:	ldr	r1, [fp, #12]
   14884:	cmp	r2, #2
   14888:	moveq	r2, r0
   1488c:	b	148c4 <__assert_fail@plt+0x3704>
   14890:	ldr	ip, [fp, #-84]	; 0xffffffac
   14894:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14898:	ldr	r1, [fp, #12]
   1489c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   148a0:	b	148c4 <__assert_fail@plt+0x3704>
   148a4:	ldr	r1, [sp, #88]	; 0x58
   148a8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   148ac:	ldr	r5, [sp, #28]
   148b0:	mov	r0, #2
   148b4:	tst	r1, #1
   148b8:	ldr	r1, [fp, #12]
   148bc:	movwne	r0, #4
   148c0:	mov	r2, r0
   148c4:	mov	r0, #0
   148c8:	bic	r1, r1, #2
   148cc:	str	r2, [sp]
   148d0:	mov	r2, lr
   148d4:	str	r0, [sp, #8]
   148d8:	ldr	r0, [sp, #72]	; 0x48
   148dc:	str	r1, [sp, #4]
   148e0:	mov	r1, r5
   148e4:	str	r0, [sp, #12]
   148e8:	ldr	r0, [sp, #76]	; 0x4c
   148ec:	str	r0, [sp, #16]
   148f0:	mov	r0, ip
   148f4:	mov	r3, r7
   148f8:	bl	13604 <__assert_fail@plt+0x2444>
   148fc:	mov	r9, r0
   14900:	mov	r0, r9
   14904:	sub	sp, fp, #28
   14908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1490c:	mov	r0, #5
   14910:	ldr	r1, [sp, #56]	; 0x38
   14914:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14918:	str	r0, [sp]
   1491c:	ldr	r0, [fp, #12]
   14920:	str	r0, [sp, #4]
   14924:	ldr	r0, [fp, #16]
   14928:	str	r0, [sp, #8]
   1492c:	ldr	r0, [sp, #72]	; 0x48
   14930:	str	r0, [sp, #12]
   14934:	ldr	r0, [sp, #76]	; 0x4c
   14938:	str	r0, [sp, #16]
   1493c:	ldr	r0, [fp, #-84]	; 0xffffffac
   14940:	b	148f4 <__assert_fail@plt+0x3734>
   14944:	mov	r3, #0
   14948:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1494c:	cmp	r1, #0
   14950:	beq	1498c <__assert_fail@plt+0x37cc>
   14954:	ldr	r2, [fp, #-84]	; 0xffffffac
   14958:	tst	r3, #1
   1495c:	bne	14990 <__assert_fail@plt+0x37d0>
   14960:	ldrb	r0, [r1]
   14964:	cmp	r0, #0
   14968:	beq	14990 <__assert_fail@plt+0x37d0>
   1496c:	add	r1, r1, #1
   14970:	cmp	r9, r5
   14974:	strbcc	r0, [r2, r9]
   14978:	add	r9, r9, #1
   1497c:	ldrb	r0, [r1], #1
   14980:	cmp	r0, #0
   14984:	bne	14970 <__assert_fail@plt+0x37b0>
   14988:	b	14990 <__assert_fail@plt+0x37d0>
   1498c:	ldr	r2, [fp, #-84]	; 0xffffffac
   14990:	cmp	r9, r5
   14994:	movcc	r0, #0
   14998:	strbcc	r0, [r2, r9]
   1499c:	mov	r0, r9
   149a0:	sub	sp, fp, #28
   149a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149a8:	mov	r0, #4
   149ac:	b	1487c <__assert_fail@plt+0x36bc>
   149b0:	bl	111a8 <abort@plt>
   149b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149b8:	add	fp, sp, #28
   149bc:	sub	sp, sp, #28
   149c0:	movw	r5, #37256	; 0x9188
   149c4:	cmp	r2, #0
   149c8:	mov	r4, r1
   149cc:	mov	r7, r0
   149d0:	str	r0, [sp, #20]
   149d4:	movt	r5, #2
   149d8:	movne	r5, r2
   149dc:	bl	110ac <__errno_location@plt>
   149e0:	mov	sl, r0
   149e4:	ldr	r2, [r5, #40]	; 0x28
   149e8:	ldr	r3, [r5, #44]	; 0x2c
   149ec:	ldm	r5, {r0, r1}
   149f0:	orr	r8, r1, #1
   149f4:	add	r9, r5, #8
   149f8:	mov	r1, #0
   149fc:	ldr	r6, [sl]
   14a00:	stm	sp, {r0, r8, r9}
   14a04:	mov	r0, #0
   14a08:	str	r2, [sp, #12]
   14a0c:	str	r3, [sp, #16]
   14a10:	mov	r2, r7
   14a14:	mov	r3, r4
   14a18:	str	r6, [sp, #24]
   14a1c:	mov	r6, r4
   14a20:	bl	13604 <__assert_fail@plt+0x2444>
   14a24:	add	r7, r0, #1
   14a28:	mov	r0, r7
   14a2c:	bl	15aa0 <__assert_fail@plt+0x48e0>
   14a30:	mov	r4, r0
   14a34:	ldr	r0, [r5]
   14a38:	ldr	r2, [r5, #44]	; 0x2c
   14a3c:	ldr	r1, [r5, #40]	; 0x28
   14a40:	mov	r3, r6
   14a44:	stm	sp, {r0, r8, r9}
   14a48:	str	r2, [sp, #16]
   14a4c:	ldr	r2, [sp, #20]
   14a50:	str	r1, [sp, #12]
   14a54:	mov	r0, r4
   14a58:	mov	r1, r7
   14a5c:	bl	13604 <__assert_fail@plt+0x2444>
   14a60:	ldr	r0, [sp, #24]
   14a64:	str	r0, [sl]
   14a68:	mov	r0, r4
   14a6c:	sub	sp, fp, #28
   14a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a78:	add	fp, sp, #28
   14a7c:	sub	sp, sp, #36	; 0x24
   14a80:	movw	r8, #37256	; 0x9188
   14a84:	cmp	r3, #0
   14a88:	mov	r4, r2
   14a8c:	str	r2, [sp, #24]
   14a90:	mov	r5, r1
   14a94:	mov	r6, r0
   14a98:	str	r0, [sp, #20]
   14a9c:	movt	r8, #2
   14aa0:	movne	r8, r3
   14aa4:	bl	110ac <__errno_location@plt>
   14aa8:	str	r0, [sp, #28]
   14aac:	ldr	r1, [r8, #40]	; 0x28
   14ab0:	ldr	r2, [r8, #44]	; 0x2c
   14ab4:	ldr	r7, [r0]
   14ab8:	cmp	r4, #0
   14abc:	add	sl, r8, #8
   14ac0:	mov	r0, #0
   14ac4:	ldm	r8, {r3, r9}
   14ac8:	orreq	r9, r9, #1
   14acc:	stm	sp, {r3, r9, sl}
   14ad0:	str	r1, [sp, #12]
   14ad4:	str	r2, [sp, #16]
   14ad8:	mov	r1, #0
   14adc:	mov	r2, r6
   14ae0:	mov	r3, r5
   14ae4:	str	r7, [sp, #32]
   14ae8:	mov	r7, r5
   14aec:	bl	13604 <__assert_fail@plt+0x2444>
   14af0:	add	r4, r0, #1
   14af4:	mov	r5, r0
   14af8:	mov	r0, r4
   14afc:	bl	15aa0 <__assert_fail@plt+0x48e0>
   14b00:	mov	r6, r0
   14b04:	ldr	r0, [r8]
   14b08:	ldr	r2, [r8, #44]	; 0x2c
   14b0c:	ldr	r1, [r8, #40]	; 0x28
   14b10:	mov	r3, r7
   14b14:	stm	sp, {r0, r9, sl}
   14b18:	str	r2, [sp, #16]
   14b1c:	ldr	r2, [sp, #20]
   14b20:	str	r1, [sp, #12]
   14b24:	mov	r0, r6
   14b28:	mov	r1, r4
   14b2c:	bl	13604 <__assert_fail@plt+0x2444>
   14b30:	ldr	r0, [sp, #24]
   14b34:	ldr	r1, [sp, #32]
   14b38:	ldr	r2, [sp, #28]
   14b3c:	cmp	r0, #0
   14b40:	str	r1, [r2]
   14b44:	strne	r5, [r0]
   14b48:	mov	r0, r6
   14b4c:	sub	sp, fp, #28
   14b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b54:	push	{r4, r5, r6, r7, fp, lr}
   14b58:	add	fp, sp, #16
   14b5c:	movw	r4, #37176	; 0x9138
   14b60:	movt	r4, #2
   14b64:	ldrd	r6, [r4]
   14b68:	cmp	r7, #2
   14b6c:	blt	14b98 <__assert_fail@plt+0x39d8>
   14b70:	add	r5, r6, #12
   14b74:	mov	r7, #0
   14b78:	ldr	r0, [r5, r7, lsl #3]
   14b7c:	bl	1223c <__assert_fail@plt+0x107c>
   14b80:	ldr	r1, [r4, #4]
   14b84:	add	r2, r7, #2
   14b88:	add	r0, r7, #1
   14b8c:	mov	r7, r0
   14b90:	cmp	r2, r1
   14b94:	blt	14b78 <__assert_fail@plt+0x39b8>
   14b98:	ldr	r0, [r6, #4]
   14b9c:	movw	r5, #37304	; 0x91b8
   14ba0:	movt	r5, #2
   14ba4:	cmp	r0, r5
   14ba8:	beq	14bbc <__assert_fail@plt+0x39fc>
   14bac:	bl	1223c <__assert_fail@plt+0x107c>
   14bb0:	mov	r0, #256	; 0x100
   14bb4:	str	r0, [r4, #8]
   14bb8:	str	r5, [r4, #12]
   14bbc:	add	r5, r4, #8
   14bc0:	cmp	r6, r5
   14bc4:	beq	14bd4 <__assert_fail@plt+0x3a14>
   14bc8:	mov	r0, r6
   14bcc:	bl	1223c <__assert_fail@plt+0x107c>
   14bd0:	str	r5, [r4]
   14bd4:	mov	r0, #1
   14bd8:	str	r0, [r4, #4]
   14bdc:	pop	{r4, r5, r6, r7, fp, pc}
   14be0:	movw	r3, #37256	; 0x9188
   14be4:	mvn	r2, #0
   14be8:	movt	r3, #2
   14bec:	b	14bf0 <__assert_fail@plt+0x3a30>
   14bf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bf4:	add	fp, sp, #28
   14bf8:	sub	sp, sp, #44	; 0x2c
   14bfc:	mov	r7, r3
   14c00:	str	r2, [sp, #36]	; 0x24
   14c04:	str	r1, [sp, #32]
   14c08:	mov	r5, r0
   14c0c:	bl	110ac <__errno_location@plt>
   14c10:	cmp	r5, #0
   14c14:	bmi	14d7c <__assert_fail@plt+0x3bbc>
   14c18:	cmn	r5, #-2147483647	; 0x80000001
   14c1c:	beq	14d7c <__assert_fail@plt+0x3bbc>
   14c20:	movw	r8, #37176	; 0x9138
   14c24:	mov	r4, r0
   14c28:	ldr	r0, [r0]
   14c2c:	movt	r8, #2
   14c30:	str	r4, [sp, #28]
   14c34:	ldr	r1, [r8, #4]
   14c38:	ldr	r6, [r8]
   14c3c:	str	r0, [sp, #24]
   14c40:	cmp	r1, r5
   14c44:	ble	14c50 <__assert_fail@plt+0x3a90>
   14c48:	mov	sl, r6
   14c4c:	b	14cb8 <__assert_fail@plt+0x3af8>
   14c50:	mov	r0, #8
   14c54:	add	r9, r8, #8
   14c58:	str	r1, [fp, #-32]	; 0xffffffe0
   14c5c:	sub	r1, r5, r1
   14c60:	mvn	r3, #-2147483648	; 0x80000000
   14c64:	str	r0, [sp]
   14c68:	subs	r0, r6, r9
   14c6c:	add	r2, r1, #1
   14c70:	sub	r1, fp, #32
   14c74:	movne	r0, r6
   14c78:	bl	15ca0 <__assert_fail@plt+0x4ae0>
   14c7c:	mov	sl, r0
   14c80:	cmp	r6, r9
   14c84:	str	r0, [r8]
   14c88:	bne	14c94 <__assert_fail@plt+0x3ad4>
   14c8c:	ldrd	r0, [r8, #8]
   14c90:	stm	sl, {r0, r1}
   14c94:	ldr	r1, [r8, #4]
   14c98:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14c9c:	add	r0, sl, r1, lsl #3
   14ca0:	sub	r1, r2, r1
   14ca4:	lsl	r2, r1, #3
   14ca8:	mov	r1, #0
   14cac:	bl	110dc <memset@plt>
   14cb0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14cb4:	str	r0, [r8, #4]
   14cb8:	mov	r9, sl
   14cbc:	ldm	r7, {r0, r1}
   14cc0:	orr	r8, r1, #1
   14cc4:	add	r1, r7, #8
   14cc8:	ldr	r2, [r7, #40]	; 0x28
   14ccc:	ldr	r3, [r7, #44]	; 0x2c
   14cd0:	ldr	r6, [r9, r5, lsl #3]!
   14cd4:	str	r1, [sp, #20]
   14cd8:	ldr	r4, [r9, #4]!
   14cdc:	stm	sp, {r0, r8}
   14ce0:	add	r0, sp, #8
   14ce4:	stm	r0, {r1, r2, r3}
   14ce8:	ldr	r2, [sp, #32]
   14cec:	ldr	r3, [sp, #36]	; 0x24
   14cf0:	mov	r1, r6
   14cf4:	mov	r0, r4
   14cf8:	bl	13604 <__assert_fail@plt+0x2444>
   14cfc:	cmp	r6, r0
   14d00:	bhi	14d64 <__assert_fail@plt+0x3ba4>
   14d04:	add	r6, r0, #1
   14d08:	movw	r0, #37304	; 0x91b8
   14d0c:	movt	r0, #2
   14d10:	str	r6, [sl, r5, lsl #3]
   14d14:	cmp	r4, r0
   14d18:	beq	14d24 <__assert_fail@plt+0x3b64>
   14d1c:	mov	r0, r4
   14d20:	bl	1223c <__assert_fail@plt+0x107c>
   14d24:	mov	r0, r6
   14d28:	bl	15aa0 <__assert_fail@plt+0x48e0>
   14d2c:	str	r0, [r9]
   14d30:	mov	r4, r0
   14d34:	add	r3, sp, #8
   14d38:	ldr	r0, [r7]
   14d3c:	ldr	r1, [r7, #40]	; 0x28
   14d40:	ldr	r2, [r7, #44]	; 0x2c
   14d44:	stm	sp, {r0, r8}
   14d48:	ldr	r0, [sp, #20]
   14d4c:	stm	r3, {r0, r1, r2}
   14d50:	ldr	r2, [sp, #32]
   14d54:	ldr	r3, [sp, #36]	; 0x24
   14d58:	mov	r0, r4
   14d5c:	mov	r1, r6
   14d60:	bl	13604 <__assert_fail@plt+0x2444>
   14d64:	ldr	r1, [sp, #24]
   14d68:	ldr	r0, [sp, #28]
   14d6c:	str	r1, [r0]
   14d70:	mov	r0, r4
   14d74:	sub	sp, fp, #28
   14d78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d7c:	bl	111a8 <abort@plt>
   14d80:	movw	r3, #37256	; 0x9188
   14d84:	movt	r3, #2
   14d88:	b	14bf0 <__assert_fail@plt+0x3a30>
   14d8c:	movw	r3, #37256	; 0x9188
   14d90:	mov	r1, r0
   14d94:	mov	r0, #0
   14d98:	mvn	r2, #0
   14d9c:	movt	r3, #2
   14da0:	b	14bf0 <__assert_fail@plt+0x3a30>
   14da4:	movw	r3, #37256	; 0x9188
   14da8:	mov	r2, r1
   14dac:	mov	r1, r0
   14db0:	mov	r0, #0
   14db4:	movt	r3, #2
   14db8:	b	14bf0 <__assert_fail@plt+0x3a30>
   14dbc:	push	{fp, lr}
   14dc0:	mov	fp, sp
   14dc4:	sub	sp, sp, #48	; 0x30
   14dc8:	vmov.i32	q8, #0	; 0x00000000
   14dcc:	mov	ip, #32
   14dd0:	mov	r3, sp
   14dd4:	mov	lr, r2
   14dd8:	cmp	r1, #10
   14ddc:	add	r2, r3, #16
   14de0:	vst1.64	{d16-d17}, [r3], ip
   14de4:	vst1.64	{d16-d17}, [r2]
   14de8:	vst1.64	{d16-d17}, [r3]
   14dec:	beq	14e0c <__assert_fail@plt+0x3c4c>
   14df0:	str	r1, [sp]
   14df4:	mov	r3, sp
   14df8:	mov	r1, lr
   14dfc:	mvn	r2, #0
   14e00:	bl	14bf0 <__assert_fail@plt+0x3a30>
   14e04:	mov	sp, fp
   14e08:	pop	{fp, pc}
   14e0c:	bl	111a8 <abort@plt>
   14e10:	push	{r4, sl, fp, lr}
   14e14:	add	fp, sp, #8
   14e18:	sub	sp, sp, #48	; 0x30
   14e1c:	vmov.i32	q8, #0	; 0x00000000
   14e20:	mov	ip, r3
   14e24:	mov	r3, sp
   14e28:	mov	lr, #32
   14e2c:	cmp	r1, #10
   14e30:	add	r4, r3, #16
   14e34:	vst1.64	{d16-d17}, [r3], lr
   14e38:	vst1.64	{d16-d17}, [r4]
   14e3c:	vst1.64	{d16-d17}, [r3]
   14e40:	beq	14e60 <__assert_fail@plt+0x3ca0>
   14e44:	str	r1, [sp]
   14e48:	mov	r1, r2
   14e4c:	mov	r3, sp
   14e50:	mov	r2, ip
   14e54:	bl	14bf0 <__assert_fail@plt+0x3a30>
   14e58:	sub	sp, fp, #8
   14e5c:	pop	{r4, sl, fp, pc}
   14e60:	bl	111a8 <abort@plt>
   14e64:	push	{fp, lr}
   14e68:	mov	fp, sp
   14e6c:	sub	sp, sp, #48	; 0x30
   14e70:	vmov.i32	q8, #0	; 0x00000000
   14e74:	mov	r3, sp
   14e78:	mov	ip, #32
   14e7c:	cmp	r0, #10
   14e80:	add	r2, r3, #16
   14e84:	vst1.64	{d16-d17}, [r3], ip
   14e88:	vst1.64	{d16-d17}, [r2]
   14e8c:	vst1.64	{d16-d17}, [r3]
   14e90:	beq	14eb0 <__assert_fail@plt+0x3cf0>
   14e94:	str	r0, [sp]
   14e98:	mov	r3, sp
   14e9c:	mov	r0, #0
   14ea0:	mvn	r2, #0
   14ea4:	bl	14bf0 <__assert_fail@plt+0x3a30>
   14ea8:	mov	sp, fp
   14eac:	pop	{fp, pc}
   14eb0:	bl	111a8 <abort@plt>
   14eb4:	push	{fp, lr}
   14eb8:	mov	fp, sp
   14ebc:	sub	sp, sp, #48	; 0x30
   14ec0:	vmov.i32	q8, #0	; 0x00000000
   14ec4:	mov	r3, sp
   14ec8:	mov	ip, #32
   14ecc:	cmp	r0, #10
   14ed0:	add	lr, r3, #16
   14ed4:	vst1.64	{d16-d17}, [r3], ip
   14ed8:	vst1.64	{d16-d17}, [lr]
   14edc:	vst1.64	{d16-d17}, [r3]
   14ee0:	beq	14efc <__assert_fail@plt+0x3d3c>
   14ee4:	str	r0, [sp]
   14ee8:	mov	r3, sp
   14eec:	mov	r0, #0
   14ef0:	bl	14bf0 <__assert_fail@plt+0x3a30>
   14ef4:	mov	sp, fp
   14ef8:	pop	{fp, pc}
   14efc:	bl	111a8 <abort@plt>
   14f00:	push	{r4, sl, fp, lr}
   14f04:	add	fp, sp, #8
   14f08:	sub	sp, sp, #48	; 0x30
   14f0c:	mov	lr, r0
   14f10:	movw	r0, #37256	; 0x9188
   14f14:	mov	ip, r1
   14f18:	mov	r1, #32
   14f1c:	mov	r4, #1
   14f20:	movt	r0, #2
   14f24:	add	r3, r0, #16
   14f28:	vld1.64	{d16-d17}, [r0], r1
   14f2c:	vld1.64	{d20-d21}, [r0]
   14f30:	vld1.64	{d18-d19}, [r3]
   14f34:	mov	r3, sp
   14f38:	add	r0, r3, #32
   14f3c:	add	r1, r3, #16
   14f40:	vst1.64	{d20-d21}, [r0]
   14f44:	mov	r0, #28
   14f48:	vst1.64	{d18-d19}, [r1]
   14f4c:	mov	r1, r3
   14f50:	and	r0, r0, r2, lsr #3
   14f54:	and	r2, r2, #31
   14f58:	vst1.64	{d16-d17}, [r1], r0
   14f5c:	ldr	r0, [r1, #8]
   14f60:	bic	r4, r4, r0, lsr r2
   14f64:	eor	r0, r0, r4, lsl r2
   14f68:	mov	r2, ip
   14f6c:	str	r0, [r1, #8]
   14f70:	mov	r0, #0
   14f74:	mov	r1, lr
   14f78:	bl	14bf0 <__assert_fail@plt+0x3a30>
   14f7c:	sub	sp, fp, #8
   14f80:	pop	{r4, sl, fp, pc}
   14f84:	push	{fp, lr}
   14f88:	mov	fp, sp
   14f8c:	sub	sp, sp, #48	; 0x30
   14f90:	mov	ip, r0
   14f94:	movw	r0, #37256	; 0x9188
   14f98:	mov	r2, #32
   14f9c:	movt	r0, #2
   14fa0:	add	r3, r0, #16
   14fa4:	vld1.64	{d16-d17}, [r0], r2
   14fa8:	vld1.64	{d20-d21}, [r0]
   14fac:	vld1.64	{d18-d19}, [r3]
   14fb0:	mov	r3, sp
   14fb4:	add	r0, r3, #32
   14fb8:	add	r2, r3, #16
   14fbc:	vst1.64	{d20-d21}, [r0]
   14fc0:	mov	r0, #28
   14fc4:	vst1.64	{d18-d19}, [r2]
   14fc8:	mov	r2, r3
   14fcc:	and	r0, r0, r1, lsr #3
   14fd0:	and	r1, r1, #31
   14fd4:	vst1.64	{d16-d17}, [r2], r0
   14fd8:	mov	r0, #1
   14fdc:	ldr	lr, [r2, #8]
   14fe0:	bic	r0, r0, lr, lsr r1
   14fe4:	eor	r0, lr, r0, lsl r1
   14fe8:	mov	r1, ip
   14fec:	str	r0, [r2, #8]
   14ff0:	mov	r0, #0
   14ff4:	mvn	r2, #0
   14ff8:	bl	14bf0 <__assert_fail@plt+0x3a30>
   14ffc:	mov	sp, fp
   15000:	pop	{fp, pc}
   15004:	push	{fp, lr}
   15008:	mov	fp, sp
   1500c:	sub	sp, sp, #48	; 0x30
   15010:	mov	r1, r0
   15014:	movw	r0, #37256	; 0x9188
   15018:	mov	r3, #32
   1501c:	movt	r0, #2
   15020:	add	r2, r0, #16
   15024:	vld1.64	{d16-d17}, [r0], r3
   15028:	mov	r3, sp
   1502c:	vld1.64	{d18-d19}, [r2]
   15030:	vld1.64	{d20-d21}, [r0]
   15034:	add	r2, r3, #16
   15038:	add	r0, r3, #32
   1503c:	vst1.64	{d18-d19}, [r2]
   15040:	vst1.64	{d20-d21}, [r0]
   15044:	mov	r0, #12
   15048:	mov	r2, r3
   1504c:	vst1.64	{d16-d17}, [r2], r0
   15050:	ldr	r0, [r2]
   15054:	orr	r0, r0, #67108864	; 0x4000000
   15058:	str	r0, [r2]
   1505c:	mov	r0, #0
   15060:	mvn	r2, #0
   15064:	bl	14bf0 <__assert_fail@plt+0x3a30>
   15068:	mov	sp, fp
   1506c:	pop	{fp, pc}
   15070:	push	{fp, lr}
   15074:	mov	fp, sp
   15078:	sub	sp, sp, #48	; 0x30
   1507c:	mov	ip, r1
   15080:	mov	r1, r0
   15084:	movw	r0, #37256	; 0x9188
   15088:	mov	r2, #32
   1508c:	movt	r0, #2
   15090:	add	r3, r0, #16
   15094:	vld1.64	{d16-d17}, [r0], r2
   15098:	vld1.64	{d18-d19}, [r3]
   1509c:	vld1.64	{d20-d21}, [r0]
   150a0:	mov	r3, sp
   150a4:	add	r2, r3, #16
   150a8:	add	r0, r3, #32
   150ac:	vst1.64	{d18-d19}, [r2]
   150b0:	vst1.64	{d20-d21}, [r0]
   150b4:	mov	r0, #12
   150b8:	mov	r2, r3
   150bc:	vst1.64	{d16-d17}, [r2], r0
   150c0:	ldr	r0, [r2]
   150c4:	orr	r0, r0, #67108864	; 0x4000000
   150c8:	str	r0, [r2]
   150cc:	mov	r0, #0
   150d0:	mov	r2, ip
   150d4:	bl	14bf0 <__assert_fail@plt+0x3a30>
   150d8:	mov	sp, fp
   150dc:	pop	{fp, pc}
   150e0:	push	{r4, sl, fp, lr}
   150e4:	add	fp, sp, #8
   150e8:	sub	sp, sp, #96	; 0x60
   150ec:	vmov.i32	q8, #0	; 0x00000000
   150f0:	mov	ip, r2
   150f4:	mov	r2, sp
   150f8:	mov	r4, #28
   150fc:	cmp	r1, #10
   15100:	mov	r3, r2
   15104:	add	lr, r2, #16
   15108:	vst1.64	{d16-d17}, [r3], r4
   1510c:	vst1.64	{d16-d17}, [lr]
   15110:	vst1.32	{d16-d17}, [r3]
   15114:	beq	15164 <__assert_fail@plt+0x3fa4>
   15118:	vld1.64	{d16-d17}, [r2], r4
   1511c:	vld1.64	{d18-d19}, [lr]
   15120:	add	r3, sp, #48	; 0x30
   15124:	vld1.32	{d20-d21}, [r2]
   15128:	add	r2, r3, #20
   1512c:	add	r4, r3, #4
   15130:	vst1.32	{d18-d19}, [r2]
   15134:	add	r2, r3, #32
   15138:	vst1.32	{d16-d17}, [r4]
   1513c:	vst1.32	{d20-d21}, [r2]
   15140:	str	r1, [sp, #48]	; 0x30
   15144:	mvn	r2, #0
   15148:	ldr	r1, [sp, #60]	; 0x3c
   1514c:	orr	r1, r1, #67108864	; 0x4000000
   15150:	str	r1, [sp, #60]	; 0x3c
   15154:	mov	r1, ip
   15158:	bl	14bf0 <__assert_fail@plt+0x3a30>
   1515c:	sub	sp, fp, #8
   15160:	pop	{r4, sl, fp, pc}
   15164:	bl	111a8 <abort@plt>
   15168:	push	{r4, r5, r6, sl, fp, lr}
   1516c:	add	fp, sp, #16
   15170:	sub	sp, sp, #48	; 0x30
   15174:	mov	ip, r3
   15178:	movw	r3, #37256	; 0x9188
   1517c:	mov	r6, #32
   15180:	cmp	r1, #0
   15184:	mov	r4, sp
   15188:	movt	r3, #2
   1518c:	cmpne	r2, #0
   15190:	add	r5, r4, #16
   15194:	add	lr, r3, #16
   15198:	vld1.64	{d16-d17}, [r3], r6
   1519c:	vld1.64	{d18-d19}, [lr]
   151a0:	vld1.64	{d20-d21}, [r3]
   151a4:	mov	r3, #10
   151a8:	vst1.64	{d16-d17}, [r4], r6
   151ac:	vst1.64	{d18-d19}, [r5]
   151b0:	vst1.64	{d20-d21}, [r4]
   151b4:	str	r3, [sp]
   151b8:	bne	151c0 <__assert_fail@plt+0x4000>
   151bc:	bl	111a8 <abort@plt>
   151c0:	str	r2, [sp, #44]	; 0x2c
   151c4:	str	r1, [sp, #40]	; 0x28
   151c8:	mov	r3, sp
   151cc:	mov	r1, ip
   151d0:	mvn	r2, #0
   151d4:	bl	14bf0 <__assert_fail@plt+0x3a30>
   151d8:	sub	sp, fp, #16
   151dc:	pop	{r4, r5, r6, sl, fp, pc}
   151e0:	push	{r4, r5, r6, sl, fp, lr}
   151e4:	add	fp, sp, #16
   151e8:	sub	sp, sp, #48	; 0x30
   151ec:	mov	lr, r3
   151f0:	movw	r3, #37256	; 0x9188
   151f4:	mov	r6, #32
   151f8:	cmp	r1, #0
   151fc:	mov	r4, sp
   15200:	movt	r3, #2
   15204:	cmpne	r2, #0
   15208:	add	r5, r4, #16
   1520c:	add	ip, r3, #16
   15210:	vld1.64	{d16-d17}, [r3], r6
   15214:	vld1.64	{d18-d19}, [ip]
   15218:	vld1.64	{d20-d21}, [r3]
   1521c:	mov	r3, #10
   15220:	vst1.64	{d16-d17}, [r4], r6
   15224:	vst1.64	{d18-d19}, [r5]
   15228:	vst1.64	{d20-d21}, [r4]
   1522c:	str	r3, [sp]
   15230:	bne	15238 <__assert_fail@plt+0x4078>
   15234:	bl	111a8 <abort@plt>
   15238:	ldr	ip, [fp, #8]
   1523c:	str	r2, [sp, #44]	; 0x2c
   15240:	str	r1, [sp, #40]	; 0x28
   15244:	mov	r3, sp
   15248:	mov	r1, lr
   1524c:	mov	r2, ip
   15250:	bl	14bf0 <__assert_fail@plt+0x3a30>
   15254:	sub	sp, fp, #16
   15258:	pop	{r4, r5, r6, sl, fp, pc}
   1525c:	push	{r4, sl, fp, lr}
   15260:	add	fp, sp, #8
   15264:	sub	sp, sp, #48	; 0x30
   15268:	movw	r3, #37256	; 0x9188
   1526c:	mov	lr, #32
   15270:	mov	ip, r2
   15274:	cmp	r0, #0
   15278:	movt	r3, #2
   1527c:	cmpne	r1, #0
   15280:	add	r2, r3, #16
   15284:	vld1.64	{d16-d17}, [r3], lr
   15288:	vld1.64	{d20-d21}, [r3]
   1528c:	vld1.64	{d18-d19}, [r2]
   15290:	mov	r2, sp
   15294:	add	r4, r2, #16
   15298:	vst1.64	{d16-d17}, [r2], lr
   1529c:	vst1.64	{d20-d21}, [r2]
   152a0:	mov	r2, #10
   152a4:	vst1.64	{d18-d19}, [r4]
   152a8:	str	r2, [sp]
   152ac:	bne	152b4 <__assert_fail@plt+0x40f4>
   152b0:	bl	111a8 <abort@plt>
   152b4:	str	r1, [sp, #44]	; 0x2c
   152b8:	str	r0, [sp, #40]	; 0x28
   152bc:	mov	r3, sp
   152c0:	mov	r0, #0
   152c4:	mov	r1, ip
   152c8:	mvn	r2, #0
   152cc:	bl	14bf0 <__assert_fail@plt+0x3a30>
   152d0:	sub	sp, fp, #8
   152d4:	pop	{r4, sl, fp, pc}
   152d8:	push	{r4, r5, fp, lr}
   152dc:	add	fp, sp, #8
   152e0:	sub	sp, sp, #48	; 0x30
   152e4:	mov	ip, r3
   152e8:	movw	r3, #37256	; 0x9188
   152ec:	mov	r4, #32
   152f0:	mov	lr, r2
   152f4:	cmp	r0, #0
   152f8:	movt	r3, #2
   152fc:	cmpne	r1, #0
   15300:	add	r2, r3, #16
   15304:	vld1.64	{d16-d17}, [r3], r4
   15308:	vld1.64	{d20-d21}, [r3]
   1530c:	vld1.64	{d18-d19}, [r2]
   15310:	mov	r2, sp
   15314:	add	r5, r2, #16
   15318:	vst1.64	{d16-d17}, [r2], r4
   1531c:	vst1.64	{d20-d21}, [r2]
   15320:	mov	r2, #10
   15324:	vst1.64	{d18-d19}, [r5]
   15328:	str	r2, [sp]
   1532c:	bne	15334 <__assert_fail@plt+0x4174>
   15330:	bl	111a8 <abort@plt>
   15334:	str	r1, [sp, #44]	; 0x2c
   15338:	str	r0, [sp, #40]	; 0x28
   1533c:	mov	r3, sp
   15340:	mov	r0, #0
   15344:	mov	r1, lr
   15348:	mov	r2, ip
   1534c:	bl	14bf0 <__assert_fail@plt+0x3a30>
   15350:	sub	sp, fp, #8
   15354:	pop	{r4, r5, fp, pc}
   15358:	movw	r3, #37128	; 0x9108
   1535c:	movt	r3, #2
   15360:	b	14bf0 <__assert_fail@plt+0x3a30>
   15364:	movw	r3, #37128	; 0x9108
   15368:	mov	r2, r1
   1536c:	mov	r1, r0
   15370:	mov	r0, #0
   15374:	movt	r3, #2
   15378:	b	14bf0 <__assert_fail@plt+0x3a30>
   1537c:	movw	r3, #37128	; 0x9108
   15380:	mvn	r2, #0
   15384:	movt	r3, #2
   15388:	b	14bf0 <__assert_fail@plt+0x3a30>
   1538c:	movw	r3, #37128	; 0x9108
   15390:	mov	r1, r0
   15394:	mov	r0, #0
   15398:	mvn	r2, #0
   1539c:	movt	r3, #2
   153a0:	b	14bf0 <__assert_fail@plt+0x3a30>
   153a4:	mov	r1, #0
   153a8:	mov	r2, #3
   153ac:	b	17340 <__assert_fail@plt+0x6180>
   153b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   153b4:	add	fp, sp, #24
   153b8:	sub	sp, sp, #32
   153bc:	ldr	r6, [fp, #12]
   153c0:	ldr	r7, [fp, #8]
   153c4:	mov	r4, r2
   153c8:	mov	r8, r0
   153cc:	cmp	r1, #0
   153d0:	beq	153f8 <__assert_fail@plt+0x4238>
   153d4:	movw	r2, #33392	; 0x8270
   153d8:	mov	r5, r1
   153dc:	str	r3, [sp, #4]
   153e0:	str	r4, [sp]
   153e4:	mov	r0, r8
   153e8:	mov	r1, #1
   153ec:	movt	r2, #1
   153f0:	mov	r3, r5
   153f4:	b	15410 <__assert_fail@plt+0x4250>
   153f8:	movw	r2, #33404	; 0x827c
   153fc:	str	r3, [sp]
   15400:	mov	r0, r8
   15404:	mov	r1, #1
   15408:	mov	r3, r4
   1540c:	movt	r2, #1
   15410:	bl	11100 <__fprintf_chk@plt>
   15414:	movw	r1, #33411	; 0x8283
   15418:	mov	r0, #0
   1541c:	mov	r2, #5
   15420:	movt	r1, #1
   15424:	bl	10fb0 <dcgettext@plt>
   15428:	movw	r2, #34129	; 0x8551
   1542c:	mov	r3, r0
   15430:	movw	r0, #2022	; 0x7e6
   15434:	mov	r1, #1
   15438:	movt	r2, #1
   1543c:	str	r0, [sp]
   15440:	mov	r0, r8
   15444:	bl	11100 <__fprintf_chk@plt>
   15448:	movw	r4, #32826	; 0x803a
   1544c:	mov	r1, r8
   15450:	movt	r4, #1
   15454:	mov	r0, r4
   15458:	bl	10f2c <fputs_unlocked@plt>
   1545c:	movw	r1, #33415	; 0x8287
   15460:	mov	r0, #0
   15464:	mov	r2, #5
   15468:	movt	r1, #1
   1546c:	bl	10fb0 <dcgettext@plt>
   15470:	movw	r3, #33586	; 0x8332
   15474:	mov	r2, r0
   15478:	mov	r0, r8
   1547c:	mov	r1, #1
   15480:	movt	r3, #1
   15484:	bl	11100 <__fprintf_chk@plt>
   15488:	mov	r0, r4
   1548c:	mov	r1, r8
   15490:	bl	10f2c <fputs_unlocked@plt>
   15494:	cmp	r6, #9
   15498:	bhi	154d4 <__assert_fail@plt+0x4314>
   1549c:	add	r0, pc, #0
   154a0:	ldr	pc, [r0, r6, lsl #2]
   154a4:	andeq	r5, r1, ip, asr #9
   154a8:	andeq	r5, r1, r0, ror #9
   154ac:	andeq	r5, r1, r0, lsl r5
   154b0:	andeq	r5, r1, r8, lsr r5
   154b4:	andeq	r5, r1, r0, ror #10
   154b8:	andeq	r5, r1, r8, lsl #11
   154bc:			; <UNDEFINED> instruction: 0x000155b0
   154c0:	andeq	r5, r1, r8, ror #11
   154c4:	muleq	r1, r0, r6
   154c8:	andeq	r5, r1, r8, lsr r6
   154cc:	sub	sp, fp, #24
   154d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   154d4:	movw	r1, #33939	; 0x8493
   154d8:	movt	r1, #1
   154dc:	b	15640 <__assert_fail@plt+0x4480>
   154e0:	movw	r1, #33620	; 0x8354
   154e4:	mov	r0, #0
   154e8:	mov	r2, #5
   154ec:	movt	r1, #1
   154f0:	bl	10fb0 <dcgettext@plt>
   154f4:	ldr	r3, [r7]
   154f8:	mov	r2, r0
   154fc:	mov	r0, r8
   15500:	mov	r1, #1
   15504:	sub	sp, fp, #24
   15508:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1550c:	b	11100 <__fprintf_chk@plt>
   15510:	movw	r1, #33636	; 0x8364
   15514:	mov	r0, #0
   15518:	mov	r2, #5
   1551c:	movt	r1, #1
   15520:	bl	10fb0 <dcgettext@plt>
   15524:	mov	r2, r0
   15528:	ldr	r3, [r7]
   1552c:	ldr	r0, [r7, #4]
   15530:	str	r0, [sp]
   15534:	b	15624 <__assert_fail@plt+0x4464>
   15538:	movw	r1, #33659	; 0x837b
   1553c:	mov	r0, #0
   15540:	mov	r2, #5
   15544:	movt	r1, #1
   15548:	bl	10fb0 <dcgettext@plt>
   1554c:	mov	r2, r0
   15550:	ldr	r3, [r7]
   15554:	ldmib	r7, {r0, r1}
   15558:	stm	sp, {r0, r1}
   1555c:	b	15624 <__assert_fail@plt+0x4464>
   15560:	movw	r1, #33687	; 0x8397
   15564:	mov	r0, #0
   15568:	mov	r2, #5
   1556c:	movt	r1, #1
   15570:	bl	10fb0 <dcgettext@plt>
   15574:	ldr	r3, [r7]
   15578:	mov	r2, r0
   1557c:	ldmib	r7, {r0, r1, r7}
   15580:	stm	sp, {r0, r1, r7}
   15584:	b	15624 <__assert_fail@plt+0x4464>
   15588:	movw	r1, #33719	; 0x83b7
   1558c:	mov	r0, #0
   15590:	mov	r2, #5
   15594:	movt	r1, #1
   15598:	bl	10fb0 <dcgettext@plt>
   1559c:	ldr	r3, [r7]
   155a0:	mov	r2, r0
   155a4:	ldmib	r7, {r0, r1, r6, r7}
   155a8:	stm	sp, {r0, r1, r6, r7}
   155ac:	b	15624 <__assert_fail@plt+0x4464>
   155b0:	movw	r1, #33755	; 0x83db
   155b4:	mov	r0, #0
   155b8:	mov	r2, #5
   155bc:	movt	r1, #1
   155c0:	bl	10fb0 <dcgettext@plt>
   155c4:	mov	r2, r0
   155c8:	ldr	r3, [r7]
   155cc:	ldmib	r7, {r0, r1, r6}
   155d0:	ldr	r5, [r7, #16]
   155d4:	ldr	r7, [r7, #20]
   155d8:	stm	sp, {r0, r1, r6}
   155dc:	str	r5, [sp, #12]
   155e0:	str	r7, [sp, #16]
   155e4:	b	15624 <__assert_fail@plt+0x4464>
   155e8:	movw	r1, #33795	; 0x8403
   155ec:	mov	r0, #0
   155f0:	mov	r2, #5
   155f4:	movt	r1, #1
   155f8:	bl	10fb0 <dcgettext@plt>
   155fc:	mov	r2, r0
   15600:	ldr	r3, [r7]
   15604:	ldmib	r7, {r0, r1, r6}
   15608:	ldr	r5, [r7, #16]
   1560c:	ldr	r4, [r7, #20]
   15610:	ldr	r7, [r7, #24]
   15614:	stm	sp, {r0, r1, r6}
   15618:	str	r5, [sp, #12]
   1561c:	str	r4, [sp, #16]
   15620:	str	r7, [sp, #20]
   15624:	mov	r0, r8
   15628:	mov	r1, #1
   1562c:	bl	11100 <__fprintf_chk@plt>
   15630:	sub	sp, fp, #24
   15634:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15638:	movw	r1, #33887	; 0x845f
   1563c:	movt	r1, #1
   15640:	mov	r0, #0
   15644:	mov	r2, #5
   15648:	bl	10fb0 <dcgettext@plt>
   1564c:	mov	ip, r0
   15650:	ldr	r3, [r7]
   15654:	ldr	r0, [r7, #4]
   15658:	ldr	r1, [r7, #8]
   1565c:	ldr	r6, [r7, #12]
   15660:	ldr	r5, [r7, #16]
   15664:	ldr	r4, [r7, #20]
   15668:	ldr	r2, [r7, #24]
   1566c:	ldr	lr, [r7, #28]
   15670:	ldr	r7, [r7, #32]
   15674:	stm	sp, {r0, r1, r6}
   15678:	str	r5, [sp, #12]
   1567c:	str	r4, [sp, #16]
   15680:	str	r2, [sp, #20]
   15684:	str	lr, [sp, #24]
   15688:	str	r7, [sp, #28]
   1568c:	b	156d4 <__assert_fail@plt+0x4514>
   15690:	movw	r1, #33839	; 0x842f
   15694:	mov	r0, #0
   15698:	mov	r2, #5
   1569c:	movt	r1, #1
   156a0:	bl	10fb0 <dcgettext@plt>
   156a4:	mov	ip, r0
   156a8:	ldr	r3, [r7]
   156ac:	ldmib	r7, {r0, r1, r6}
   156b0:	ldr	r5, [r7, #16]
   156b4:	ldr	r4, [r7, #20]
   156b8:	ldr	r2, [r7, #24]
   156bc:	ldr	r7, [r7, #28]
   156c0:	stm	sp, {r0, r1, r6}
   156c4:	str	r5, [sp, #12]
   156c8:	str	r4, [sp, #16]
   156cc:	str	r2, [sp, #20]
   156d0:	str	r7, [sp, #24]
   156d4:	mov	r0, r8
   156d8:	mov	r1, #1
   156dc:	mov	r2, ip
   156e0:	bl	11100 <__fprintf_chk@plt>
   156e4:	sub	sp, fp, #24
   156e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   156ec:	push	{r4, sl, fp, lr}
   156f0:	add	fp, sp, #8
   156f4:	sub	sp, sp, #8
   156f8:	ldr	ip, [fp, #8]
   156fc:	mov	lr, #0
   15700:	ldr	r4, [ip, lr, lsl #2]
   15704:	add	lr, lr, #1
   15708:	cmp	r4, #0
   1570c:	bne	15700 <__assert_fail@plt+0x4540>
   15710:	sub	r4, lr, #1
   15714:	str	ip, [sp]
   15718:	str	r4, [sp, #4]
   1571c:	bl	153b0 <__assert_fail@plt+0x41f0>
   15720:	sub	sp, fp, #8
   15724:	pop	{r4, sl, fp, pc}
   15728:	push	{fp, lr}
   1572c:	mov	fp, sp
   15730:	sub	sp, sp, #48	; 0x30
   15734:	ldr	ip, [fp, #8]
   15738:	ldr	lr, [ip]
   1573c:	cmp	lr, #0
   15740:	str	lr, [sp, #8]
   15744:	beq	157e0 <__assert_fail@plt+0x4620>
   15748:	ldr	lr, [ip, #4]
   1574c:	cmp	lr, #0
   15750:	str	lr, [sp, #12]
   15754:	beq	157e8 <__assert_fail@plt+0x4628>
   15758:	ldr	lr, [ip, #8]
   1575c:	cmp	lr, #0
   15760:	str	lr, [sp, #16]
   15764:	beq	157f0 <__assert_fail@plt+0x4630>
   15768:	ldr	lr, [ip, #12]
   1576c:	cmp	lr, #0
   15770:	str	lr, [sp, #20]
   15774:	beq	157f8 <__assert_fail@plt+0x4638>
   15778:	ldr	lr, [ip, #16]
   1577c:	cmp	lr, #0
   15780:	str	lr, [sp, #24]
   15784:	beq	15800 <__assert_fail@plt+0x4640>
   15788:	ldr	lr, [ip, #20]
   1578c:	cmp	lr, #0
   15790:	str	lr, [sp, #28]
   15794:	beq	15808 <__assert_fail@plt+0x4648>
   15798:	ldr	lr, [ip, #24]
   1579c:	cmp	lr, #0
   157a0:	str	lr, [sp, #32]
   157a4:	beq	15810 <__assert_fail@plt+0x4650>
   157a8:	ldr	lr, [ip, #28]
   157ac:	cmp	lr, #0
   157b0:	str	lr, [sp, #36]	; 0x24
   157b4:	beq	15818 <__assert_fail@plt+0x4658>
   157b8:	ldr	lr, [ip, #32]
   157bc:	cmp	lr, #0
   157c0:	str	lr, [sp, #40]	; 0x28
   157c4:	beq	15820 <__assert_fail@plt+0x4660>
   157c8:	ldr	lr, [ip, #36]	; 0x24
   157cc:	mov	ip, #10
   157d0:	cmp	lr, #0
   157d4:	str	lr, [sp, #44]	; 0x2c
   157d8:	movweq	ip, #9
   157dc:	b	15824 <__assert_fail@plt+0x4664>
   157e0:	mov	ip, #0
   157e4:	b	15824 <__assert_fail@plt+0x4664>
   157e8:	mov	ip, #1
   157ec:	b	15824 <__assert_fail@plt+0x4664>
   157f0:	mov	ip, #2
   157f4:	b	15824 <__assert_fail@plt+0x4664>
   157f8:	mov	ip, #3
   157fc:	b	15824 <__assert_fail@plt+0x4664>
   15800:	mov	ip, #4
   15804:	b	15824 <__assert_fail@plt+0x4664>
   15808:	mov	ip, #5
   1580c:	b	15824 <__assert_fail@plt+0x4664>
   15810:	mov	ip, #6
   15814:	b	15824 <__assert_fail@plt+0x4664>
   15818:	mov	ip, #7
   1581c:	b	15824 <__assert_fail@plt+0x4664>
   15820:	mov	ip, #8
   15824:	add	lr, sp, #8
   15828:	str	ip, [sp, #4]
   1582c:	str	lr, [sp]
   15830:	bl	153b0 <__assert_fail@plt+0x41f0>
   15834:	mov	sp, fp
   15838:	pop	{fp, pc}
   1583c:	push	{fp, lr}
   15840:	mov	fp, sp
   15844:	sub	sp, sp, #56	; 0x38
   15848:	add	ip, fp, #8
   1584c:	str	ip, [sp, #12]
   15850:	ldr	lr, [fp, #8]
   15854:	cmp	lr, #0
   15858:	str	lr, [sp, #16]
   1585c:	beq	158f8 <__assert_fail@plt+0x4738>
   15860:	ldr	lr, [ip, #4]
   15864:	cmp	lr, #0
   15868:	str	lr, [sp, #20]
   1586c:	beq	15900 <__assert_fail@plt+0x4740>
   15870:	ldr	lr, [ip, #8]
   15874:	cmp	lr, #0
   15878:	str	lr, [sp, #24]
   1587c:	beq	15908 <__assert_fail@plt+0x4748>
   15880:	ldr	lr, [ip, #12]
   15884:	cmp	lr, #0
   15888:	str	lr, [sp, #28]
   1588c:	beq	15910 <__assert_fail@plt+0x4750>
   15890:	ldr	lr, [ip, #16]
   15894:	cmp	lr, #0
   15898:	str	lr, [sp, #32]
   1589c:	beq	15918 <__assert_fail@plt+0x4758>
   158a0:	ldr	lr, [ip, #20]
   158a4:	cmp	lr, #0
   158a8:	str	lr, [sp, #36]	; 0x24
   158ac:	beq	15920 <__assert_fail@plt+0x4760>
   158b0:	ldr	lr, [ip, #24]
   158b4:	cmp	lr, #0
   158b8:	str	lr, [sp, #40]	; 0x28
   158bc:	beq	15928 <__assert_fail@plt+0x4768>
   158c0:	ldr	lr, [ip, #28]
   158c4:	cmp	lr, #0
   158c8:	str	lr, [sp, #44]	; 0x2c
   158cc:	beq	15930 <__assert_fail@plt+0x4770>
   158d0:	ldr	lr, [ip, #32]
   158d4:	cmp	lr, #0
   158d8:	str	lr, [sp, #48]	; 0x30
   158dc:	beq	15938 <__assert_fail@plt+0x4778>
   158e0:	ldr	lr, [ip, #36]	; 0x24
   158e4:	mov	ip, #10
   158e8:	cmp	lr, #0
   158ec:	str	lr, [sp, #52]	; 0x34
   158f0:	movweq	ip, #9
   158f4:	b	1593c <__assert_fail@plt+0x477c>
   158f8:	mov	ip, #0
   158fc:	b	1593c <__assert_fail@plt+0x477c>
   15900:	mov	ip, #1
   15904:	b	1593c <__assert_fail@plt+0x477c>
   15908:	mov	ip, #2
   1590c:	b	1593c <__assert_fail@plt+0x477c>
   15910:	mov	ip, #3
   15914:	b	1593c <__assert_fail@plt+0x477c>
   15918:	mov	ip, #4
   1591c:	b	1593c <__assert_fail@plt+0x477c>
   15920:	mov	ip, #5
   15924:	b	1593c <__assert_fail@plt+0x477c>
   15928:	mov	ip, #6
   1592c:	b	1593c <__assert_fail@plt+0x477c>
   15930:	mov	ip, #7
   15934:	b	1593c <__assert_fail@plt+0x477c>
   15938:	mov	ip, #8
   1593c:	add	lr, sp, #16
   15940:	str	ip, [sp, #4]
   15944:	str	lr, [sp]
   15948:	bl	153b0 <__assert_fail@plt+0x41f0>
   1594c:	mov	sp, fp
   15950:	pop	{fp, pc}
   15954:	push	{fp, lr}
   15958:	mov	fp, sp
   1595c:	movw	r0, #37228	; 0x916c
   15960:	movt	r0, #2
   15964:	ldr	r1, [r0]
   15968:	movw	r0, #32826	; 0x803a
   1596c:	movt	r0, #1
   15970:	bl	10f2c <fputs_unlocked@plt>
   15974:	movw	r1, #33999	; 0x84cf
   15978:	mov	r0, #0
   1597c:	mov	r2, #5
   15980:	movt	r1, #1
   15984:	bl	10fb0 <dcgettext@plt>
   15988:	movw	r2, #34019	; 0x84e3
   1598c:	mov	r1, r0
   15990:	mov	r0, #1
   15994:	movt	r2, #1
   15998:	bl	110e8 <__printf_chk@plt>
   1599c:	movw	r1, #34041	; 0x84f9
   159a0:	mov	r0, #0
   159a4:	mov	r2, #5
   159a8:	movt	r1, #1
   159ac:	bl	10fb0 <dcgettext@plt>
   159b0:	movw	r2, #32398	; 0x7e8e
   159b4:	movw	r3, #32635	; 0x7f7b
   159b8:	mov	r1, r0
   159bc:	mov	r0, #1
   159c0:	movt	r2, #1
   159c4:	movt	r3, #1
   159c8:	bl	110e8 <__printf_chk@plt>
   159cc:	movw	r1, #34061	; 0x850d
   159d0:	mov	r0, #0
   159d4:	mov	r2, #5
   159d8:	movt	r1, #1
   159dc:	bl	10fb0 <dcgettext@plt>
   159e0:	movw	r2, #34100	; 0x8534
   159e4:	mov	r1, r0
   159e8:	mov	r0, #1
   159ec:	movt	r2, #1
   159f0:	pop	{fp, lr}
   159f4:	b	110e8 <__printf_chk@plt>
   159f8:	push	{r4, r5, r6, sl, fp, lr}
   159fc:	add	fp, sp, #16
   15a00:	mov	r4, r2
   15a04:	mov	r5, r1
   15a08:	mov	r6, r0
   15a0c:	bl	175bc <__assert_fail@plt+0x63fc>
   15a10:	cmp	r0, #0
   15a14:	popne	{r4, r5, r6, sl, fp, pc}
   15a18:	cmp	r6, #0
   15a1c:	beq	15a30 <__assert_fail@plt+0x4870>
   15a20:	cmp	r5, #0
   15a24:	cmpne	r4, #0
   15a28:	bne	15a30 <__assert_fail@plt+0x4870>
   15a2c:	pop	{r4, r5, r6, sl, fp, pc}
   15a30:	bl	15fac <__assert_fail@plt+0x4dec>
   15a34:	push	{r4, r5, r6, sl, fp, lr}
   15a38:	add	fp, sp, #16
   15a3c:	mov	r4, r2
   15a40:	mov	r5, r1
   15a44:	mov	r6, r0
   15a48:	bl	175bc <__assert_fail@plt+0x63fc>
   15a4c:	cmp	r0, #0
   15a50:	popne	{r4, r5, r6, sl, fp, pc}
   15a54:	cmp	r6, #0
   15a58:	beq	15a6c <__assert_fail@plt+0x48ac>
   15a5c:	cmp	r5, #0
   15a60:	cmpne	r4, #0
   15a64:	bne	15a6c <__assert_fail@plt+0x48ac>
   15a68:	pop	{r4, r5, r6, sl, fp, pc}
   15a6c:	bl	15fac <__assert_fail@plt+0x4dec>
   15a70:	push	{fp, lr}
   15a74:	mov	fp, sp
   15a78:	bl	16cf8 <__assert_fail@plt+0x5b38>
   15a7c:	cmp	r0, #0
   15a80:	popne	{fp, pc}
   15a84:	bl	15fac <__assert_fail@plt+0x4dec>
   15a88:	push	{fp, lr}
   15a8c:	mov	fp, sp
   15a90:	bl	16cf8 <__assert_fail@plt+0x5b38>
   15a94:	cmp	r0, #0
   15a98:	popne	{fp, pc}
   15a9c:	bl	15fac <__assert_fail@plt+0x4dec>
   15aa0:	push	{fp, lr}
   15aa4:	mov	fp, sp
   15aa8:	bl	16cf8 <__assert_fail@plt+0x5b38>
   15aac:	cmp	r0, #0
   15ab0:	popne	{fp, pc}
   15ab4:	bl	15fac <__assert_fail@plt+0x4dec>
   15ab8:	push	{r4, r5, fp, lr}
   15abc:	add	fp, sp, #8
   15ac0:	mov	r4, r1
   15ac4:	mov	r5, r0
   15ac8:	bl	16d28 <__assert_fail@plt+0x5b68>
   15acc:	cmp	r0, #0
   15ad0:	popne	{r4, r5, fp, pc}
   15ad4:	cmp	r5, #0
   15ad8:	beq	15ae8 <__assert_fail@plt+0x4928>
   15adc:	cmp	r4, #0
   15ae0:	bne	15ae8 <__assert_fail@plt+0x4928>
   15ae4:	pop	{r4, r5, fp, pc}
   15ae8:	bl	15fac <__assert_fail@plt+0x4dec>
   15aec:	push	{fp, lr}
   15af0:	mov	fp, sp
   15af4:	cmp	r1, #0
   15af8:	orreq	r1, r1, #1
   15afc:	bl	16d28 <__assert_fail@plt+0x5b68>
   15b00:	cmp	r0, #0
   15b04:	popne	{fp, pc}
   15b08:	bl	15fac <__assert_fail@plt+0x4dec>
   15b0c:	push	{fp, lr}
   15b10:	mov	fp, sp
   15b14:	clz	r3, r2
   15b18:	lsr	ip, r3, #5
   15b1c:	clz	r3, r1
   15b20:	lsr	r3, r3, #5
   15b24:	orrs	r3, r3, ip
   15b28:	movwne	r1, #1
   15b2c:	movwne	r2, #1
   15b30:	bl	175bc <__assert_fail@plt+0x63fc>
   15b34:	cmp	r0, #0
   15b38:	popne	{fp, pc}
   15b3c:	bl	15fac <__assert_fail@plt+0x4dec>
   15b40:	push	{fp, lr}
   15b44:	mov	fp, sp
   15b48:	mov	r2, r1
   15b4c:	mov	r1, r0
   15b50:	mov	r0, #0
   15b54:	bl	175bc <__assert_fail@plt+0x63fc>
   15b58:	cmp	r0, #0
   15b5c:	popne	{fp, pc}
   15b60:	bl	15fac <__assert_fail@plt+0x4dec>
   15b64:	push	{fp, lr}
   15b68:	mov	fp, sp
   15b6c:	mov	r2, r1
   15b70:	mov	r1, r0
   15b74:	clz	r0, r2
   15b78:	clz	r3, r1
   15b7c:	lsr	r0, r0, #5
   15b80:	lsr	r3, r3, #5
   15b84:	orrs	r0, r3, r0
   15b88:	mov	r0, #0
   15b8c:	movwne	r1, #1
   15b90:	movwne	r2, #1
   15b94:	bl	175bc <__assert_fail@plt+0x63fc>
   15b98:	cmp	r0, #0
   15b9c:	popne	{fp, pc}
   15ba0:	bl	15fac <__assert_fail@plt+0x4dec>
   15ba4:	push	{r4, r5, r6, sl, fp, lr}
   15ba8:	add	fp, sp, #16
   15bac:	ldr	r5, [r1]
   15bb0:	mov	r4, r1
   15bb4:	mov	r6, r0
   15bb8:	cmp	r0, #0
   15bbc:	beq	15bd4 <__assert_fail@plt+0x4a14>
   15bc0:	mov	r0, #1
   15bc4:	add	r0, r0, r5, lsr #1
   15bc8:	adds	r5, r5, r0
   15bcc:	bcc	15bdc <__assert_fail@plt+0x4a1c>
   15bd0:	b	15c18 <__assert_fail@plt+0x4a58>
   15bd4:	cmp	r5, #0
   15bd8:	movweq	r5, #64	; 0x40
   15bdc:	mov	r0, r6
   15be0:	mov	r1, r5
   15be4:	mov	r2, #1
   15be8:	bl	175bc <__assert_fail@plt+0x63fc>
   15bec:	cmp	r5, #0
   15bf0:	mov	r1, r5
   15bf4:	movwne	r1, #1
   15bf8:	cmp	r0, #0
   15bfc:	bne	15c10 <__assert_fail@plt+0x4a50>
   15c00:	clz	r2, r6
   15c04:	lsr	r2, r2, #5
   15c08:	orrs	r1, r2, r1
   15c0c:	bne	15c18 <__assert_fail@plt+0x4a58>
   15c10:	str	r5, [r4]
   15c14:	pop	{r4, r5, r6, sl, fp, pc}
   15c18:	bl	15fac <__assert_fail@plt+0x4dec>
   15c1c:	push	{r4, r5, r6, r7, fp, lr}
   15c20:	add	fp, sp, #16
   15c24:	ldr	r5, [r1]
   15c28:	mov	r6, r2
   15c2c:	mov	r4, r1
   15c30:	mov	r7, r0
   15c34:	cmp	r0, #0
   15c38:	beq	15c50 <__assert_fail@plt+0x4a90>
   15c3c:	mov	r0, #1
   15c40:	add	r0, r0, r5, lsr #1
   15c44:	adds	r5, r5, r0
   15c48:	bcc	15c68 <__assert_fail@plt+0x4aa8>
   15c4c:	b	15c9c <__assert_fail@plt+0x4adc>
   15c50:	cmp	r5, #0
   15c54:	bne	15c68 <__assert_fail@plt+0x4aa8>
   15c58:	mov	r0, #64	; 0x40
   15c5c:	cmp	r6, #64	; 0x40
   15c60:	udiv	r5, r0, r6
   15c64:	addhi	r5, r5, #1
   15c68:	mov	r0, r7
   15c6c:	mov	r1, r5
   15c70:	mov	r2, r6
   15c74:	bl	175bc <__assert_fail@plt+0x63fc>
   15c78:	cmp	r0, #0
   15c7c:	bne	15c94 <__assert_fail@plt+0x4ad4>
   15c80:	cmp	r7, #0
   15c84:	beq	15c9c <__assert_fail@plt+0x4adc>
   15c88:	cmp	r6, #0
   15c8c:	cmpne	r5, #0
   15c90:	bne	15c9c <__assert_fail@plt+0x4adc>
   15c94:	str	r5, [r4]
   15c98:	pop	{r4, r5, r6, r7, fp, pc}
   15c9c:	bl	15fac <__assert_fail@plt+0x4dec>
   15ca0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ca4:	add	fp, sp, #24
   15ca8:	mov	r8, r1
   15cac:	ldr	r1, [r1]
   15cb0:	mov	r5, r0
   15cb4:	add	r0, r1, r1, asr #1
   15cb8:	cmp	r0, r1
   15cbc:	mvnvs	r0, #-2147483648	; 0x80000000
   15cc0:	cmp	r0, r3
   15cc4:	mov	r7, r0
   15cc8:	movgt	r7, r3
   15ccc:	cmn	r3, #1
   15cd0:	movle	r7, r0
   15cd4:	ldr	r0, [fp, #8]
   15cd8:	cmn	r0, #1
   15cdc:	ble	15d04 <__assert_fail@plt+0x4b44>
   15ce0:	cmp	r0, #0
   15ce4:	beq	15d58 <__assert_fail@plt+0x4b98>
   15ce8:	cmn	r7, #1
   15cec:	ble	15d2c <__assert_fail@plt+0x4b6c>
   15cf0:	mvn	r4, #-2147483648	; 0x80000000
   15cf4:	udiv	r6, r4, r0
   15cf8:	cmp	r6, r7
   15cfc:	bge	15d58 <__assert_fail@plt+0x4b98>
   15d00:	b	15d68 <__assert_fail@plt+0x4ba8>
   15d04:	cmn	r7, #1
   15d08:	ble	15d48 <__assert_fail@plt+0x4b88>
   15d0c:	cmn	r0, #1
   15d10:	beq	15d58 <__assert_fail@plt+0x4b98>
   15d14:	mov	r6, #-2147483648	; 0x80000000
   15d18:	mvn	r4, #-2147483648	; 0x80000000
   15d1c:	sdiv	r6, r6, r0
   15d20:	cmp	r6, r7
   15d24:	bge	15d58 <__assert_fail@plt+0x4b98>
   15d28:	b	15d68 <__assert_fail@plt+0x4ba8>
   15d2c:	beq	15d58 <__assert_fail@plt+0x4b98>
   15d30:	mov	r6, #-2147483648	; 0x80000000
   15d34:	mvn	r4, #-2147483648	; 0x80000000
   15d38:	sdiv	r6, r6, r7
   15d3c:	cmp	r6, r0
   15d40:	bge	15d58 <__assert_fail@plt+0x4b98>
   15d44:	b	15d68 <__assert_fail@plt+0x4ba8>
   15d48:	mvn	r4, #-2147483648	; 0x80000000
   15d4c:	sdiv	r6, r4, r0
   15d50:	cmp	r7, r6
   15d54:	blt	15d68 <__assert_fail@plt+0x4ba8>
   15d58:	mul	r6, r7, r0
   15d5c:	mov	r4, #64	; 0x40
   15d60:	cmp	r6, #63	; 0x3f
   15d64:	bgt	15d70 <__assert_fail@plt+0x4bb0>
   15d68:	sdiv	r7, r4, r0
   15d6c:	mul	r6, r7, r0
   15d70:	cmp	r5, #0
   15d74:	moveq	r4, #0
   15d78:	streq	r4, [r8]
   15d7c:	sub	r4, r7, r1
   15d80:	cmp	r4, r2
   15d84:	bge	15e30 <__assert_fail@plt+0x4c70>
   15d88:	add	r7, r1, r2
   15d8c:	mov	r6, #0
   15d90:	mov	r2, #0
   15d94:	cmp	r7, r3
   15d98:	movwgt	r6, #1
   15d9c:	cmn	r3, #1
   15da0:	movwgt	r2, #1
   15da4:	cmp	r7, r1
   15da8:	bvs	15e64 <__assert_fail@plt+0x4ca4>
   15dac:	ands	r1, r2, r6
   15db0:	bne	15e64 <__assert_fail@plt+0x4ca4>
   15db4:	cmn	r0, #1
   15db8:	ble	15de0 <__assert_fail@plt+0x4c20>
   15dbc:	cmp	r0, #0
   15dc0:	beq	15e2c <__assert_fail@plt+0x4c6c>
   15dc4:	cmn	r7, #1
   15dc8:	ble	15e04 <__assert_fail@plt+0x4c44>
   15dcc:	mvn	r1, #-2147483648	; 0x80000000
   15dd0:	udiv	r1, r1, r0
   15dd4:	cmp	r1, r7
   15dd8:	bge	15e2c <__assert_fail@plt+0x4c6c>
   15ddc:	b	15e64 <__assert_fail@plt+0x4ca4>
   15de0:	cmn	r7, #1
   15de4:	ble	15e1c <__assert_fail@plt+0x4c5c>
   15de8:	cmn	r0, #1
   15dec:	beq	15e2c <__assert_fail@plt+0x4c6c>
   15df0:	mov	r1, #-2147483648	; 0x80000000
   15df4:	sdiv	r1, r1, r0
   15df8:	cmp	r1, r7
   15dfc:	bge	15e2c <__assert_fail@plt+0x4c6c>
   15e00:	b	15e64 <__assert_fail@plt+0x4ca4>
   15e04:	beq	15e2c <__assert_fail@plt+0x4c6c>
   15e08:	mov	r1, #-2147483648	; 0x80000000
   15e0c:	sdiv	r1, r1, r7
   15e10:	cmp	r1, r0
   15e14:	bge	15e2c <__assert_fail@plt+0x4c6c>
   15e18:	b	15e64 <__assert_fail@plt+0x4ca4>
   15e1c:	mvn	r1, #-2147483648	; 0x80000000
   15e20:	sdiv	r1, r1, r0
   15e24:	cmp	r7, r1
   15e28:	blt	15e64 <__assert_fail@plt+0x4ca4>
   15e2c:	mul	r6, r7, r0
   15e30:	mov	r0, r5
   15e34:	mov	r1, r6
   15e38:	bl	16d28 <__assert_fail@plt+0x5b68>
   15e3c:	cmp	r6, #0
   15e40:	movwne	r6, #1
   15e44:	cmp	r0, #0
   15e48:	bne	15e5c <__assert_fail@plt+0x4c9c>
   15e4c:	clz	r1, r5
   15e50:	lsr	r1, r1, #5
   15e54:	orrs	r1, r1, r6
   15e58:	bne	15e64 <__assert_fail@plt+0x4ca4>
   15e5c:	str	r7, [r8]
   15e60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e64:	bl	15fac <__assert_fail@plt+0x4dec>
   15e68:	push	{fp, lr}
   15e6c:	mov	fp, sp
   15e70:	mov	r1, #1
   15e74:	bl	16ca4 <__assert_fail@plt+0x5ae4>
   15e78:	cmp	r0, #0
   15e7c:	popne	{fp, pc}
   15e80:	bl	15fac <__assert_fail@plt+0x4dec>
   15e84:	push	{fp, lr}
   15e88:	mov	fp, sp
   15e8c:	bl	16ca4 <__assert_fail@plt+0x5ae4>
   15e90:	cmp	r0, #0
   15e94:	popne	{fp, pc}
   15e98:	bl	15fac <__assert_fail@plt+0x4dec>
   15e9c:	push	{fp, lr}
   15ea0:	mov	fp, sp
   15ea4:	mov	r1, #1
   15ea8:	bl	16ca4 <__assert_fail@plt+0x5ae4>
   15eac:	cmp	r0, #0
   15eb0:	popne	{fp, pc}
   15eb4:	bl	15fac <__assert_fail@plt+0x4dec>
   15eb8:	push	{fp, lr}
   15ebc:	mov	fp, sp
   15ec0:	bl	16ca4 <__assert_fail@plt+0x5ae4>
   15ec4:	cmp	r0, #0
   15ec8:	popne	{fp, pc}
   15ecc:	bl	15fac <__assert_fail@plt+0x4dec>
   15ed0:	push	{r4, r5, fp, lr}
   15ed4:	add	fp, sp, #8
   15ed8:	mov	r5, r0
   15edc:	mov	r0, r1
   15ee0:	mov	r4, r1
   15ee4:	bl	16cf8 <__assert_fail@plt+0x5b38>
   15ee8:	cmp	r0, #0
   15eec:	beq	15f00 <__assert_fail@plt+0x4d40>
   15ef0:	mov	r1, r5
   15ef4:	mov	r2, r4
   15ef8:	pop	{r4, r5, fp, lr}
   15efc:	b	10f8c <memcpy@plt>
   15f00:	bl	15fac <__assert_fail@plt+0x4dec>
   15f04:	push	{r4, r5, fp, lr}
   15f08:	add	fp, sp, #8
   15f0c:	mov	r5, r0
   15f10:	mov	r0, r1
   15f14:	mov	r4, r1
   15f18:	bl	16cf8 <__assert_fail@plt+0x5b38>
   15f1c:	cmp	r0, #0
   15f20:	beq	15f34 <__assert_fail@plt+0x4d74>
   15f24:	mov	r1, r5
   15f28:	mov	r2, r4
   15f2c:	pop	{r4, r5, fp, lr}
   15f30:	b	10f8c <memcpy@plt>
   15f34:	bl	15fac <__assert_fail@plt+0x4dec>
   15f38:	push	{r4, r5, fp, lr}
   15f3c:	add	fp, sp, #8
   15f40:	mov	r5, r0
   15f44:	add	r0, r1, #1
   15f48:	mov	r4, r1
   15f4c:	bl	16cf8 <__assert_fail@plt+0x5b38>
   15f50:	cmp	r0, #0
   15f54:	beq	15f70 <__assert_fail@plt+0x4db0>
   15f58:	mov	r1, #0
   15f5c:	mov	r2, r4
   15f60:	strb	r1, [r0, r4]
   15f64:	mov	r1, r5
   15f68:	pop	{r4, r5, fp, lr}
   15f6c:	b	10f8c <memcpy@plt>
   15f70:	bl	15fac <__assert_fail@plt+0x4dec>
   15f74:	push	{r4, r5, fp, lr}
   15f78:	add	fp, sp, #8
   15f7c:	mov	r4, r0
   15f80:	bl	11094 <strlen@plt>
   15f84:	add	r5, r0, #1
   15f88:	mov	r0, r5
   15f8c:	bl	16cf8 <__assert_fail@plt+0x5b38>
   15f90:	cmp	r0, #0
   15f94:	beq	15fa8 <__assert_fail@plt+0x4de8>
   15f98:	mov	r1, r4
   15f9c:	mov	r2, r5
   15fa0:	pop	{r4, r5, fp, lr}
   15fa4:	b	10f8c <memcpy@plt>
   15fa8:	bl	15fac <__assert_fail@plt+0x4dec>
   15fac:	push	{fp, lr}
   15fb0:	mov	fp, sp
   15fb4:	movw	r0, #37124	; 0x9104
   15fb8:	movw	r1, #34176	; 0x8580
   15fbc:	mov	r2, #5
   15fc0:	movt	r0, #2
   15fc4:	movt	r1, #1
   15fc8:	ldr	r4, [r0]
   15fcc:	mov	r0, #0
   15fd0:	bl	10fb0 <dcgettext@plt>
   15fd4:	movw	r2, #34413	; 0x866d
   15fd8:	mov	r3, r0
   15fdc:	mov	r0, r4
   15fe0:	mov	r1, #0
   15fe4:	movt	r2, #1
   15fe8:	bl	1101c <error@plt>
   15fec:	bl	111a8 <abort@plt>
   15ff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ff4:	add	fp, sp, #28
   15ff8:	sub	sp, sp, #44	; 0x2c
   15ffc:	cmp	r2, #37	; 0x25
   16000:	bcs	16c84 <__assert_fail@plt+0x5ac4>
   16004:	ldr	sl, [fp, #8]
   16008:	mov	r6, r2
   1600c:	mov	r7, r1
   16010:	mov	r4, r0
   16014:	str	r3, [sp, #36]	; 0x24
   16018:	bl	110ac <__errno_location@plt>
   1601c:	mov	r5, r0
   16020:	mov	r0, #0
   16024:	str	r0, [r5]
   16028:	bl	11070 <__ctype_b_loc@plt>
   1602c:	ldr	r1, [r0]
   16030:	mov	r2, r4
   16034:	ldrb	r0, [r2], #1
   16038:	add	r3, r1, r0, lsl #1
   1603c:	ldrb	r3, [r3, #1]
   16040:	tst	r3, #32
   16044:	bne	16034 <__assert_fail@plt+0x4e74>
   16048:	cmp	r7, #0
   1604c:	sub	r9, fp, #32
   16050:	mov	r8, #4
   16054:	movne	r9, r7
   16058:	cmp	r0, #45	; 0x2d
   1605c:	beq	1641c <__assert_fail@plt+0x525c>
   16060:	mov	r0, r4
   16064:	mov	r1, r9
   16068:	mov	r2, r6
   1606c:	mov	r3, #0
   16070:	bl	10f98 <__strtoull_internal@plt>
   16074:	mov	r7, r1
   16078:	ldr	r1, [r9]
   1607c:	cmp	r1, r4
   16080:	beq	160b8 <__assert_fail@plt+0x4ef8>
   16084:	mov	r6, r0
   16088:	ldr	r0, [r5]
   1608c:	cmp	r0, #0
   16090:	beq	163d4 <__assert_fail@plt+0x5214>
   16094:	cmp	r0, #34	; 0x22
   16098:	bne	1641c <__assert_fail@plt+0x525c>
   1609c:	mov	r8, #1
   160a0:	cmp	sl, #0
   160a4:	beq	16c70 <__assert_fail@plt+0x5ab0>
   160a8:	ldrb	r4, [r1]
   160ac:	cmp	r4, #0
   160b0:	bne	160fc <__assert_fail@plt+0x4f3c>
   160b4:	b	16c70 <__assert_fail@plt+0x5ab0>
   160b8:	cmp	sl, #0
   160bc:	beq	1641c <__assert_fail@plt+0x525c>
   160c0:	mov	r5, r1
   160c4:	ldrb	r1, [r4]
   160c8:	cmp	r1, #0
   160cc:	beq	1641c <__assert_fail@plt+0x525c>
   160d0:	mov	r0, sl
   160d4:	bl	110a0 <strchr@plt>
   160d8:	cmp	r0, #0
   160dc:	beq	1641c <__assert_fail@plt+0x525c>
   160e0:	mov	r1, r5
   160e4:	mov	r8, #0
   160e8:	mov	r6, #1
   160ec:	mov	r7, #0
   160f0:	ldrb	r4, [r1]
   160f4:	cmp	r4, #0
   160f8:	beq	16c70 <__assert_fail@plt+0x5ab0>
   160fc:	str	r1, [sp, #32]
   16100:	mov	r0, sl
   16104:	mov	r1, r4
   16108:	bl	110a0 <strchr@plt>
   1610c:	cmp	r0, #0
   16110:	beq	16410 <__assert_fail@plt+0x5250>
   16114:	sub	r0, r4, #69	; 0x45
   16118:	mov	r1, #1
   1611c:	mov	r3, #0
   16120:	mov	r5, #1024	; 0x400
   16124:	cmp	r0, #47	; 0x2f
   16128:	str	r1, [sp, #28]
   1612c:	bhi	16230 <__assert_fail@plt+0x5070>
   16130:	add	r1, pc, #0
   16134:	ldr	pc, [r1, r0, lsl #2]
   16138:	strdeq	r6, [r1], -r8
   1613c:	andeq	r6, r1, r0, lsr r2
   16140:	strdeq	r6, [r1], -r8
   16144:	andeq	r6, r1, r0, lsr r2
   16148:	andeq	r6, r1, r0, lsr r2
   1614c:	andeq	r6, r1, r0, lsr r2
   16150:	strdeq	r6, [r1], -r8
   16154:	andeq	r6, r1, r0, lsr r2
   16158:	strdeq	r6, [r1], -r8
   1615c:	andeq	r6, r1, r0, lsr r2
   16160:	andeq	r6, r1, r0, lsr r2
   16164:	strdeq	r6, [r1], -r8
   16168:	andeq	r6, r1, r0, lsr r2
   1616c:	andeq	r6, r1, r0, lsr r2
   16170:	andeq	r6, r1, r0, lsr r2
   16174:	strdeq	r6, [r1], -r8
   16178:	andeq	r6, r1, r0, lsr r2
   1617c:	andeq	r6, r1, r0, lsr r2
   16180:	andeq	r6, r1, r0, lsr r2
   16184:	andeq	r6, r1, r0, lsr r2
   16188:	strdeq	r6, [r1], -r8
   1618c:	strdeq	r6, [r1], -r8
   16190:	andeq	r6, r1, r0, lsr r2
   16194:	andeq	r6, r1, r0, lsr r2
   16198:	andeq	r6, r1, r0, lsr r2
   1619c:	andeq	r6, r1, r0, lsr r2
   161a0:	andeq	r6, r1, r0, lsr r2
   161a4:	andeq	r6, r1, r0, lsr r2
   161a8:	andeq	r6, r1, r0, lsr r2
   161ac:	andeq	r6, r1, r0, lsr r2
   161b0:	andeq	r6, r1, r0, lsr r2
   161b4:	andeq	r6, r1, r0, lsr r2
   161b8:	andeq	r6, r1, r0, lsr r2
   161bc:	andeq	r6, r1, r0, lsr r2
   161c0:	strdeq	r6, [r1], -r8
   161c4:	andeq	r6, r1, r0, lsr r2
   161c8:	andeq	r6, r1, r0, lsr r2
   161cc:	andeq	r6, r1, r0, lsr r2
   161d0:	strdeq	r6, [r1], -r8
   161d4:	andeq	r6, r1, r0, lsr r2
   161d8:	strdeq	r6, [r1], -r8
   161dc:	andeq	r6, r1, r0, lsr r2
   161e0:	andeq	r6, r1, r0, lsr r2
   161e4:	andeq	r6, r1, r0, lsr r2
   161e8:	andeq	r6, r1, r0, lsr r2
   161ec:	andeq	r6, r1, r0, lsr r2
   161f0:	andeq	r6, r1, r0, lsr r2
   161f4:	strdeq	r6, [r1], -r8
   161f8:	mov	r0, sl
   161fc:	mov	r1, #48	; 0x30
   16200:	bl	110a0 <strchr@plt>
   16204:	cmp	r0, #0
   16208:	beq	1622c <__assert_fail@plt+0x506c>
   1620c:	ldr	r1, [sp, #32]
   16210:	ldrb	r0, [r1, #1]
   16214:	cmp	r0, #66	; 0x42
   16218:	cmpne	r0, #68	; 0x44
   1621c:	bne	163e4 <__assert_fail@plt+0x5224>
   16220:	mov	r5, #1000	; 0x3e8
   16224:	mov	r0, #2
   16228:	str	r0, [sp, #28]
   1622c:	mov	r3, #0
   16230:	sub	r0, r4, #66	; 0x42
   16234:	cmp	r0, #53	; 0x35
   16238:	bhi	16410 <__assert_fail@plt+0x5250>
   1623c:	add	r1, pc, #0
   16240:	ldr	pc, [r1, r0, lsl #2]
   16244:	andeq	r6, r1, r0, lsl #15
   16248:	andeq	r6, r1, r0, lsl r4
   1624c:	andeq	r6, r1, r0, lsl r4
   16250:	andeq	r6, r1, r8, lsr #15
   16254:	andeq	r6, r1, r0, lsl r4
   16258:	andeq	r6, r1, ip, lsl r3
   1625c:	andeq	r6, r1, r0, lsl r4
   16260:	andeq	r6, r1, r0, lsl r4
   16264:	andeq	r6, r1, r0, lsl r4
   16268:	andeq	r6, r1, r8, lsr #8
   1626c:	andeq	r6, r1, r0, lsl r4
   16270:	andeq	r6, r1, r0, ror r4
   16274:	andeq	r6, r1, r0, lsl r4
   16278:	andeq	r6, r1, r0, lsl r4
   1627c:	strdeq	r6, [r1], -ip
   16280:	andeq	r6, r1, r0, lsl r4
   16284:	andeq	r6, r1, r0, lsl r4
   16288:	andeq	r6, r1, r0, lsl r4
   1628c:	strdeq	r6, [r1], -ip
   16290:	andeq	r6, r1, r0, lsl r4
   16294:	andeq	r6, r1, r0, lsl r4
   16298:	andeq	r6, r1, r0, lsl r4
   1629c:	andeq	r6, r1, r0, lsl r4
   162a0:	andeq	r6, r1, r4, lsr #20
   162a4:	andeq	r6, r1, r4, ror #11
   162a8:	andeq	r6, r1, r0, lsl r4
   162ac:	andeq	r6, r1, r0, lsl r4
   162b0:	andeq	r6, r1, r0, lsl r4
   162b4:	andeq	r6, r1, r0, lsl r4
   162b8:	andeq	r6, r1, r0, lsl r4
   162bc:	andeq	r6, r1, r0, lsl r4
   162c0:	andeq	r6, r1, r0, lsl r4
   162c4:	strdeq	r6, [r1], -r8
   162c8:	andeq	r6, r1, r0, asr ip
   162cc:	andeq	r6, r1, r0, lsl r4
   162d0:	andeq	r6, r1, r0, lsl r4
   162d4:	andeq	r6, r1, r0, lsl r4
   162d8:	andeq	r6, r1, ip, lsl r3
   162dc:	andeq	r6, r1, r0, lsl r4
   162e0:	andeq	r6, r1, r0, lsl r4
   162e4:	andeq	r6, r1, r0, lsl r4
   162e8:	andeq	r6, r1, r8, lsr #8
   162ec:	andeq	r6, r1, r0, lsl r4
   162f0:	andeq	r6, r1, r0, ror r4
   162f4:	andeq	r6, r1, r0, lsl r4
   162f8:	andeq	r6, r1, r0, lsl r4
   162fc:	andeq	r6, r1, r0, lsl r4
   16300:	andeq	r6, r1, r0, lsl r4
   16304:	andeq	r6, r1, r0, lsl r4
   16308:	andeq	r6, r1, r0, lsl r4
   1630c:	strdeq	r6, [r1], -ip
   16310:	andeq	r6, r1, r0, lsl r4
   16314:	andeq	r6, r1, r0, lsl r4
   16318:	andeq	r6, r1, ip, lsr #24
   1631c:	mvn	r0, #0
   16320:	mvn	r1, #0
   16324:	mov	r2, r5
   16328:	mov	sl, r3
   1632c:	bl	17ac4 <__assert_fail@plt+0x6904>
   16330:	subs	r3, r0, r6
   16334:	umull	r4, r2, r6, r5
   16338:	mov	lr, #0
   1633c:	str	r1, [sp, #20]
   16340:	sbcs	r3, r1, r7
   16344:	movwcc	lr, #1
   16348:	mla	ip, r6, sl, r2
   1634c:	mov	r2, r1
   16350:	mov	r2, #0
   16354:	cmp	lr, #0
   16358:	mla	r7, r7, r5, ip
   1635c:	mvnne	r4, #0
   16360:	mvnne	r7, #0
   16364:	subs	r6, r0, r4
   16368:	sbcs	r6, r1, r7
   1636c:	umull	r3, r6, r4, r5
   16370:	movwcc	r2, #1
   16374:	cmp	r2, #0
   16378:	mvnne	r3, #0
   1637c:	cmp	r2, #0
   16380:	str	r6, [sp, #16]
   16384:	umull	r6, ip, r3, r5
   16388:	mla	r1, r3, sl, ip
   1638c:	ldr	ip, [sp, #16]
   16390:	str	r1, [sp, #12]
   16394:	mla	r4, r4, sl, ip
   16398:	mla	r4, r7, r5, r4
   1639c:	mvnne	r4, #0
   163a0:	subs	r0, r0, r3
   163a4:	ldr	r0, [sp, #20]
   163a8:	ldr	r7, [sp, #12]
   163ac:	sbcs	r0, r0, r4
   163b0:	mov	r0, #0
   163b4:	mla	r7, r4, r5, r7
   163b8:	movwcc	r0, #1
   163bc:	cmp	r0, #0
   163c0:	mov	r1, r0
   163c4:	orr	r0, lr, r2
   163c8:	mvnne	r7, #0
   163cc:	mvnne	r6, #0
   163d0:	b	16a1c <__assert_fail@plt+0x585c>
   163d4:	mov	r8, r0
   163d8:	cmp	sl, #0
   163dc:	bne	160a8 <__assert_fail@plt+0x4ee8>
   163e0:	b	16c70 <__assert_fail@plt+0x5ab0>
   163e4:	cmp	r0, #105	; 0x69
   163e8:	mov	r3, #0
   163ec:	bne	16230 <__assert_fail@plt+0x5070>
   163f0:	ldrb	r0, [r1, #2]
   163f4:	mov	r1, #1
   163f8:	cmp	r0, #66	; 0x42
   163fc:	movweq	r1, #3
   16400:	str	r1, [sp, #28]
   16404:	sub	r0, r4, #66	; 0x42
   16408:	cmp	r0, #53	; 0x35
   1640c:	bls	1623c <__assert_fail@plt+0x507c>
   16410:	ldr	r0, [sp, #36]	; 0x24
   16414:	orr	r8, r8, #2
   16418:	strd	r6, [r0]
   1641c:	mov	r0, r8
   16420:	sub	sp, fp, #28
   16424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16428:	mvn	r0, #0
   1642c:	mvn	r1, #0
   16430:	mov	r2, r5
   16434:	mov	r4, r3
   16438:	bl	17ac4 <__assert_fail@plt+0x6904>
   1643c:	subs	r0, r0, r6
   16440:	mov	r2, #0
   16444:	sbcs	r0, r1, r7
   16448:	umull	r0, r1, r6, r5
   1644c:	movwcc	r2, #1
   16450:	cmp	r2, #0
   16454:	mla	r1, r6, r4, r1
   16458:	mov	r3, r2
   1645c:	mvnne	r0, #0
   16460:	mla	r7, r7, r5, r1
   16464:	mvnne	r7, #0
   16468:	mov	r6, r0
   1646c:	b	16c50 <__assert_fail@plt+0x5a90>
   16470:	mvn	r0, #0
   16474:	mvn	r1, #0
   16478:	mov	r2, r5
   1647c:	str	r3, [sp, #24]
   16480:	bl	17ac4 <__assert_fail@plt+0x6904>
   16484:	subs	r3, r0, r6
   16488:	mov	ip, r0
   1648c:	umull	r4, r0, r6, r5
   16490:	mov	sl, #0
   16494:	sbcs	r3, r1, r7
   16498:	mov	r3, #0
   1649c:	movwcc	r3, #1
   164a0:	cmp	r3, #0
   164a4:	str	r0, [sp, #20]
   164a8:	ldr	r0, [sp, #24]
   164ac:	mvnne	r4, #0
   164b0:	cmp	r3, #0
   164b4:	umull	lr, r2, r4, r5
   164b8:	mla	r2, r4, r0, r2
   164bc:	str	r2, [sp, #16]
   164c0:	ldr	r2, [sp, #20]
   164c4:	mla	r6, r6, r0, r2
   164c8:	ldr	r0, [sp, #16]
   164cc:	mla	r6, r7, r5, r6
   164d0:	mvnne	r6, #0
   164d4:	mla	r7, r6, r5, r0
   164d8:	subs	r0, ip, r4
   164dc:	sbcs	r0, r1, r6
   164e0:	movwcc	sl, #1
   164e4:	cmp	sl, #0
   164e8:	orr	r3, r3, sl
   164ec:	mvnne	lr, #0
   164f0:	mvnne	r7, #0
   164f4:	mov	r6, lr
   164f8:	b	16c50 <__assert_fail@plt+0x5a90>
   164fc:	mvn	r0, #0
   16500:	mvn	r1, #0
   16504:	mov	r2, r5
   16508:	mov	sl, r3
   1650c:	bl	17ac4 <__assert_fail@plt+0x6904>
   16510:	subs	r3, r0, r6
   16514:	mov	ip, r1
   16518:	umull	r2, lr, r6, r5
   1651c:	str	r0, [sp, #20]
   16520:	sbcs	r3, r1, r7
   16524:	mov	r1, #0
   16528:	str	ip, [sp, #16]
   1652c:	movwcc	r1, #1
   16530:	mla	r6, r6, sl, lr
   16534:	mov	lr, #0
   16538:	cmp	r1, #0
   1653c:	mla	r7, r7, r5, r6
   16540:	mvnne	r2, #0
   16544:	cmp	r1, #0
   16548:	umull	r3, r4, r2, r5
   1654c:	mvnne	r7, #0
   16550:	mla	r4, r2, sl, r4
   16554:	subs	r2, r0, r2
   16558:	sbcs	r2, ip, r7
   1655c:	mla	r4, r7, r5, r4
   16560:	mov	r2, #0
   16564:	movwcc	lr, #1
   16568:	cmp	lr, #0
   1656c:	mvnne	r3, #0
   16570:	mvnne	r4, #0
   16574:	subs	r7, r0, r3
   16578:	mov	r0, r5
   1657c:	sbcs	r7, ip, r4
   16580:	umull	r5, r7, r3, r5
   16584:	movwcc	r2, #1
   16588:	cmp	r2, #0
   1658c:	mla	r3, r3, sl, r7
   16590:	mvnne	r5, #0
   16594:	cmp	r2, #0
   16598:	mla	r3, r4, r0, r3
   1659c:	umull	r6, ip, r5, r0
   165a0:	mvnne	r3, #0
   165a4:	mla	ip, r5, sl, ip
   165a8:	mla	r7, r3, r0, ip
   165ac:	ldr	r0, [sp, #20]
   165b0:	subs	r0, r0, r5
   165b4:	ldr	r0, [sp, #16]
   165b8:	sbcs	r0, r0, r3
   165bc:	mov	r0, #0
   165c0:	movwcc	r0, #1
   165c4:	cmp	r0, #0
   165c8:	mov	r3, r0
   165cc:	orr	r0, r1, lr
   165d0:	orr	r0, r0, r2
   165d4:	mvnne	r7, #0
   165d8:	mvnne	r6, #0
   165dc:	orr	r3, r0, r3
   165e0:	b	16c50 <__assert_fail@plt+0x5a90>
   165e4:	mvn	r0, #0
   165e8:	mvn	r1, #0
   165ec:	mov	r2, r5
   165f0:	mov	r4, r3
   165f4:	str	r3, [sp, #24]
   165f8:	bl	17ac4 <__assert_fail@plt+0x6904>
   165fc:	umull	r3, r2, r6, r5
   16600:	mla	r2, r6, r4, r2
   16604:	subs	r6, r0, r6
   16608:	sbcs	r6, r1, r7
   1660c:	mov	r6, #0
   16610:	mla	r2, r7, r5, r2
   16614:	mov	r7, #0
   16618:	movwcc	r6, #1
   1661c:	cmp	r6, #0
   16620:	str	r6, [sp, #20]
   16624:	mvnne	r3, #0
   16628:	mvnne	r2, #0
   1662c:	subs	r4, r0, r3
   16630:	umull	r6, ip, r3, r5
   16634:	sbcs	r4, r1, r2
   16638:	ldr	r4, [sp, #24]
   1663c:	movwcc	r7, #1
   16640:	cmp	r7, #0
   16644:	mov	lr, r7
   16648:	str	r7, [sp, #16]
   1664c:	mvnne	r6, #0
   16650:	cmp	lr, #0
   16654:	mov	lr, #0
   16658:	umull	sl, r7, r6, r5
   1665c:	mla	r3, r3, r4, ip
   16660:	mla	r2, r2, r5, r3
   16664:	mvnne	r2, #0
   16668:	subs	r3, r0, r6
   1666c:	mla	r7, r6, r4, r7
   16670:	mov	r4, r0
   16674:	mov	r0, #0
   16678:	mla	r7, r2, r5, r7
   1667c:	sbcs	r2, r1, r2
   16680:	mov	r3, r4
   16684:	movwcc	r0, #1
   16688:	str	r3, [sp, #4]
   1668c:	cmp	r0, #0
   16690:	str	r0, [sp, #12]
   16694:	mov	r0, r1
   16698:	mvnne	sl, #0
   1669c:	mvnne	r7, #0
   166a0:	str	r0, [sp, #8]
   166a4:	subs	r2, r4, sl
   166a8:	ldr	r4, [sp, #24]
   166ac:	sbcs	r2, r1, r7
   166b0:	umull	r6, r2, sl, r5
   166b4:	movwcc	lr, #1
   166b8:	cmp	lr, #0
   166bc:	mvnne	r6, #0
   166c0:	mla	r2, sl, r4, r2
   166c4:	cmp	lr, #0
   166c8:	umull	r1, ip, r6, r5
   166cc:	mla	r2, r7, r5, r2
   166d0:	mvnne	r2, #0
   166d4:	mla	ip, r6, r4, ip
   166d8:	subs	r6, r3, r6
   166dc:	mla	r7, r2, r5, ip
   166e0:	sbcs	r2, r0, r2
   166e4:	mov	ip, #0
   166e8:	mov	r2, #0
   166ec:	movwcc	ip, #1
   166f0:	cmp	ip, #0
   166f4:	mvnne	r1, #0
   166f8:	mvnne	r7, #0
   166fc:	subs	r6, r3, r1
   16700:	ldr	r3, [sp, #24]
   16704:	sbcs	r6, r0, r7
   16708:	umull	r0, sl, r1, r5
   1670c:	movwcc	r2, #1
   16710:	cmp	r2, #0
   16714:	mvnne	r0, #0
   16718:	mla	r1, r1, r3, sl
   1671c:	cmp	r2, #0
   16720:	umull	r6, r4, r0, r5
   16724:	mla	r1, r7, r5, r1
   16728:	mvnne	r1, #0
   1672c:	mla	r4, r0, r3, r4
   16730:	ldr	r3, [sp, #4]
   16734:	mla	r7, r1, r5, r4
   16738:	ldr	r5, [sp, #16]
   1673c:	subs	r0, r3, r0
   16740:	ldr	r0, [sp, #8]
   16744:	sbcs	r0, r0, r1
   16748:	mov	r0, #0
   1674c:	movwcc	r0, #1
   16750:	cmp	r0, #0
   16754:	mov	r1, r0
   16758:	ldr	r0, [sp, #20]
   1675c:	mvnne	r7, #0
   16760:	mvnne	r6, #0
   16764:	orr	r0, r0, r5
   16768:	ldr	r5, [sp, #12]
   1676c:	orr	r0, r0, r5
   16770:	orr	r0, r0, lr
   16774:	orr	r0, r0, ip
   16778:	orr	r0, r0, r2
   1677c:	b	16bec <__assert_fail@plt+0x5a2c>
   16780:	mov	r1, #0
   16784:	lsl	r2, r7, #10
   16788:	lsl	r0, r6, #10
   1678c:	lsr	r3, r7, #22
   16790:	cmp	r1, r7, lsr #22
   16794:	orr	r2, r2, r6, lsr #22
   16798:	mvnne	r0, #0
   1679c:	movwne	r3, #1
   167a0:	cmp	r1, r7, lsr #22
   167a4:	b	16c1c <__assert_fail@plt+0x5a5c>
   167a8:	mvn	r0, #0
   167ac:	mvn	r1, #0
   167b0:	mov	r2, r5
   167b4:	mov	sl, r3
   167b8:	bl	17ac4 <__assert_fail@plt+0x6904>
   167bc:	subs	r2, r0, r6
   167c0:	mov	ip, r0
   167c4:	mov	r0, #0
   167c8:	sbcs	r2, r1, r7
   167cc:	umull	r4, r2, r6, r5
   167d0:	movwcc	r0, #1
   167d4:	cmp	r0, #0
   167d8:	mla	r2, r6, sl, r2
   167dc:	str	r0, [sp, #20]
   167e0:	mvnne	r4, #0
   167e4:	cmp	r0, #0
   167e8:	mla	r2, r7, r5, r2
   167ec:	mov	r0, #0
   167f0:	umull	lr, r3, r4, r5
   167f4:	mvnne	r2, #0
   167f8:	mla	r3, r4, sl, r3
   167fc:	mla	r6, r2, r5, r3
   16800:	subs	r3, ip, r4
   16804:	mov	r3, r1
   16808:	sbcs	r2, r1, r2
   1680c:	str	r3, [sp, #8]
   16810:	movwcc	r0, #1
   16814:	cmp	r0, #0
   16818:	str	r0, [sp, #16]
   1681c:	mov	r0, ip
   16820:	mvnne	lr, #0
   16824:	mvnne	r6, #0
   16828:	str	r0, [sp, #12]
   1682c:	subs	r2, ip, lr
   16830:	umull	r7, r4, lr, r5
   16834:	sbcs	r2, r1, r6
   16838:	mov	r2, #0
   1683c:	movwcc	r2, #1
   16840:	mla	r4, lr, sl, r4
   16844:	cmp	r2, #0
   16848:	mla	r6, r6, r5, r4
   1684c:	mov	r4, #0
   16850:	mvnne	r7, #0
   16854:	cmp	r2, #0
   16858:	umull	r1, ip, r7, r5
   1685c:	mvnne	r6, #0
   16860:	mla	ip, r7, sl, ip
   16864:	subs	r7, r0, r7
   16868:	sbcs	r7, r3, r6
   1686c:	mla	lr, r6, r5, ip
   16870:	mov	ip, #0
   16874:	movwcc	ip, #1
   16878:	cmp	ip, #0
   1687c:	mvnne	r1, #0
   16880:	mvnne	lr, #0
   16884:	subs	r7, r0, r1
   16888:	sbcs	r7, r3, lr
   1688c:	umull	r0, r7, r1, r5
   16890:	movwcc	r4, #1
   16894:	cmp	r4, #0
   16898:	mla	r1, r1, sl, r7
   1689c:	mvnne	r0, #0
   168a0:	cmp	r4, #0
   168a4:	mla	r1, lr, r5, r1
   168a8:	umull	r6, r3, r0, r5
   168ac:	mvnne	r1, #0
   168b0:	mla	r3, r0, sl, r3
   168b4:	mla	r7, r1, r5, r3
   168b8:	ldr	r3, [sp, #12]
   168bc:	subs	r0, r3, r0
   168c0:	ldr	r0, [sp, #8]
   168c4:	ldr	r3, [sp, #16]
   168c8:	sbcs	r0, r0, r1
   168cc:	mov	r0, #0
   168d0:	movwcc	r0, #1
   168d4:	cmp	r0, #0
   168d8:	mov	r1, r0
   168dc:	ldr	r0, [sp, #20]
   168e0:	mvnne	r7, #0
   168e4:	mvnne	r6, #0
   168e8:	orr	r0, r0, r3
   168ec:	orr	r0, r0, r2
   168f0:	orr	r0, r0, ip
   168f4:	orr	r0, r0, r4
   168f8:	b	16a1c <__assert_fail@plt+0x585c>
   168fc:	mvn	r0, #0
   16900:	mvn	r1, #0
   16904:	mov	r2, r5
   16908:	mov	sl, r3
   1690c:	bl	17ac4 <__assert_fail@plt+0x6904>
   16910:	umull	r3, r2, r6, r5
   16914:	mov	lr, r1
   16918:	mov	r1, r0
   1691c:	mla	r2, r6, sl, r2
   16920:	subs	r6, r0, r6
   16924:	mov	r0, #0
   16928:	sbcs	r6, lr, r7
   1692c:	mla	r2, r7, r5, r2
   16930:	movwcc	r0, #1
   16934:	cmp	r0, #0
   16938:	str	r0, [sp, #20]
   1693c:	mov	r0, r1
   16940:	mvnne	r3, #0
   16944:	mvnne	r2, #0
   16948:	str	r0, [sp, #16]
   1694c:	subs	r4, r1, r3
   16950:	umull	r7, ip, r3, r5
   16954:	sbcs	r4, lr, r2
   16958:	mov	r4, #0
   1695c:	movwcc	r4, #1
   16960:	mla	r3, r3, sl, ip
   16964:	mov	ip, #0
   16968:	cmp	r4, #0
   1696c:	mla	r2, r2, r5, r3
   16970:	mvnne	r7, #0
   16974:	cmp	r4, #0
   16978:	umull	r1, r6, r7, r5
   1697c:	mvnne	r2, #0
   16980:	mla	r6, r7, sl, r6
   16984:	mla	r3, r2, r5, r6
   16988:	subs	r6, r0, r7
   1698c:	sbcs	r2, lr, r2
   16990:	mov	r2, #0
   16994:	movwcc	ip, #1
   16998:	cmp	ip, #0
   1699c:	mvnne	r1, #0
   169a0:	mvnne	r3, #0
   169a4:	subs	r6, r0, r1
   169a8:	sbcs	r6, lr, r3
   169ac:	umull	r0, r6, r1, r5
   169b0:	movwcc	r2, #1
   169b4:	cmp	r2, #0
   169b8:	mvnne	r0, #0
   169bc:	cmp	r2, #0
   169c0:	str	r6, [sp, #12]
   169c4:	umull	r6, r7, r0, r5
   169c8:	mla	r7, r0, sl, r7
   169cc:	str	r7, [sp, #8]
   169d0:	ldr	r7, [sp, #12]
   169d4:	mla	r1, r1, sl, r7
   169d8:	mla	r1, r3, r5, r1
   169dc:	ldr	r3, [sp, #8]
   169e0:	mvnne	r1, #0
   169e4:	mla	r7, r1, r5, r3
   169e8:	ldr	r3, [sp, #16]
   169ec:	subs	r0, r3, r0
   169f0:	sbcs	r0, lr, r1
   169f4:	mov	r0, #0
   169f8:	movwcc	r0, #1
   169fc:	cmp	r0, #0
   16a00:	mov	r1, r0
   16a04:	ldr	r0, [sp, #20]
   16a08:	mvnne	r7, #0
   16a0c:	mvnne	r6, #0
   16a10:	orr	r0, r0, r4
   16a14:	orr	r0, r0, ip
   16a18:	orr	r0, r0, r2
   16a1c:	orr	r3, r0, r1
   16a20:	b	16c50 <__assert_fail@plt+0x5a90>
   16a24:	mvn	r0, #0
   16a28:	mvn	r1, #0
   16a2c:	mov	r2, r5
   16a30:	mov	sl, r3
   16a34:	bl	17ac4 <__assert_fail@plt+0x6904>
   16a38:	mov	ip, r1
   16a3c:	subs	r1, r0, r6
   16a40:	umull	r3, lr, r6, r5
   16a44:	mov	r2, r5
   16a48:	sbcs	r1, ip, r7
   16a4c:	mov	r1, #0
   16a50:	str	ip, [sp, #4]
   16a54:	movwcc	r1, #1
   16a58:	mla	r6, r6, sl, lr
   16a5c:	cmp	r1, #0
   16a60:	mla	r7, r7, r2, r6
   16a64:	str	r1, [sp, #20]
   16a68:	mvnne	r3, #0
   16a6c:	cmp	r1, #0
   16a70:	mov	r1, r0
   16a74:	umull	r4, r5, r3, r5
   16a78:	mvnne	r7, #0
   16a7c:	mov	lr, r1
   16a80:	mla	r5, r3, sl, r5
   16a84:	subs	r3, r0, r3
   16a88:	sbcs	r0, ip, r7
   16a8c:	mov	r0, #0
   16a90:	mla	r5, r7, r2, r5
   16a94:	movwcc	r0, #1
   16a98:	cmp	r0, #0
   16a9c:	str	r0, [sp, #16]
   16aa0:	mvnne	r4, #0
   16aa4:	mvnne	r5, #0
   16aa8:	subs	r0, r1, r4
   16aac:	mov	r1, #0
   16ab0:	sbcs	r0, ip, r5
   16ab4:	umull	r3, r0, r4, r2
   16ab8:	movwcc	r1, #1
   16abc:	cmp	r1, #0
   16ac0:	mla	r0, r4, sl, r0
   16ac4:	mov	r4, lr
   16ac8:	str	r1, [sp, #12]
   16acc:	mvnne	r3, #0
   16ad0:	cmp	r1, #0
   16ad4:	mla	r0, r5, r2, r0
   16ad8:	str	r4, [sp]
   16adc:	umull	r7, r6, r3, r2
   16ae0:	mvnne	r0, #0
   16ae4:	mla	r6, r3, sl, r6
   16ae8:	subs	r3, lr, r3
   16aec:	mov	r3, #0
   16af0:	mla	r5, r0, r2, r6
   16af4:	sbcs	r0, ip, r0
   16af8:	mov	r0, #0
   16afc:	movwcc	r0, #1
   16b00:	cmp	r0, #0
   16b04:	str	r0, [sp, #8]
   16b08:	mvnne	r7, #0
   16b0c:	mvnne	r5, #0
   16b10:	subs	r0, lr, r7
   16b14:	sbcs	r0, ip, r5
   16b18:	umull	r6, r0, r7, r2
   16b1c:	movwcc	r3, #1
   16b20:	cmp	r3, #0
   16b24:	mla	r7, r7, sl, r0
   16b28:	mov	r0, ip
   16b2c:	mvnne	r6, #0
   16b30:	cmp	r3, #0
   16b34:	mla	r7, r5, r2, r7
   16b38:	mov	r5, #0
   16b3c:	umull	r1, lr, r6, r2
   16b40:	mvnne	r7, #0
   16b44:	mla	lr, r6, sl, lr
   16b48:	subs	r6, r4, r6
   16b4c:	mla	lr, r7, r2, lr
   16b50:	sbcs	r7, ip, r7
   16b54:	mov	ip, #0
   16b58:	movwcc	ip, #1
   16b5c:	cmp	ip, #0
   16b60:	mvnne	r1, #0
   16b64:	mvnne	lr, #0
   16b68:	subs	r7, r4, r1
   16b6c:	sbcs	r7, r0, lr
   16b70:	umull	r0, r7, r1, r2
   16b74:	movwcc	r5, #1
   16b78:	cmp	r5, #0
   16b7c:	mla	r1, r1, sl, r7
   16b80:	mvnne	r0, #0
   16b84:	cmp	r5, #0
   16b88:	mla	r1, lr, r2, r1
   16b8c:	umull	r6, r4, r0, r2
   16b90:	mvnne	r1, #0
   16b94:	mla	r4, r0, sl, r4
   16b98:	mla	r7, r1, r2, r4
   16b9c:	ldr	r2, [sp]
   16ba0:	subs	r0, r2, r0
   16ba4:	ldr	r0, [sp, #4]
   16ba8:	ldr	r2, [sp, #16]
   16bac:	sbcs	r0, r0, r1
   16bb0:	mov	r0, #0
   16bb4:	movwcc	r0, #1
   16bb8:	cmp	r0, #0
   16bbc:	mov	r1, r0
   16bc0:	ldr	r0, [sp, #20]
   16bc4:	mvnne	r7, #0
   16bc8:	mvnne	r6, #0
   16bcc:	orr	r0, r0, r2
   16bd0:	ldr	r2, [sp, #12]
   16bd4:	orr	r0, r0, r2
   16bd8:	ldr	r2, [sp, #8]
   16bdc:	orr	r0, r0, r2
   16be0:	orr	r0, r0, r3
   16be4:	orr	r0, r0, ip
   16be8:	orr	r0, r0, r5
   16bec:	orr	r0, r0, r1
   16bf0:	and	r3, r0, #1
   16bf4:	b	16c50 <__assert_fail@plt+0x5a90>
   16bf8:	mov	r1, #0
   16bfc:	lsl	r2, r7, #9
   16c00:	lsl	r0, r6, #9
   16c04:	lsr	r3, r7, #23
   16c08:	cmp	r1, r7, lsr #23
   16c0c:	orr	r2, r2, r6, lsr #23
   16c10:	mvnne	r0, #0
   16c14:	movwne	r3, #1
   16c18:	cmp	r1, r7, lsr #23
   16c1c:	mvnne	r2, #0
   16c20:	mov	r6, r0
   16c24:	mov	r7, r2
   16c28:	b	16c50 <__assert_fail@plt+0x5a90>
   16c2c:	lsl	r1, r7, #1
   16c30:	cmp	r7, #0
   16c34:	lsl	r0, r6, #1
   16c38:	lsr	r3, r7, #31
   16c3c:	orr	r1, r1, r6, lsr #31
   16c40:	mvnmi	r0, #0
   16c44:	mvnmi	r1, #0
   16c48:	mov	r6, r0
   16c4c:	mov	r7, r1
   16c50:	ldr	r1, [sp, #32]
   16c54:	ldr	r2, [sp, #28]
   16c58:	orr	r8, r3, r8
   16c5c:	add	r0, r1, r2
   16c60:	str	r0, [r9]
   16c64:	ldrb	r0, [r1, r2]
   16c68:	cmp	r0, #0
   16c6c:	orrne	r8, r8, #2
   16c70:	ldr	r0, [sp, #36]	; 0x24
   16c74:	strd	r6, [r0]
   16c78:	mov	r0, r8
   16c7c:	sub	sp, fp, #28
   16c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c84:	movw	r0, #34193	; 0x8591
   16c88:	movw	r1, #34231	; 0x85b7
   16c8c:	movw	r3, #34247	; 0x85c7
   16c90:	mov	r2, #85	; 0x55
   16c94:	movt	r0, #1
   16c98:	movt	r1, #1
   16c9c:	movt	r3, #1
   16ca0:	bl	111c0 <__assert_fail@plt>
   16ca4:	clz	r2, r1
   16ca8:	clz	r3, r0
   16cac:	lsr	r2, r2, #5
   16cb0:	lsr	r3, r3, #5
   16cb4:	orrs	r2, r3, r2
   16cb8:	movwne	r1, #1
   16cbc:	movwne	r0, #1
   16cc0:	cmp	r1, #0
   16cc4:	beq	16cf4 <__assert_fail@plt+0x5b34>
   16cc8:	mvn	r2, #-2147483648	; 0x80000000
   16ccc:	udiv	r2, r2, r1
   16cd0:	cmp	r2, r0
   16cd4:	bcs	16cf4 <__assert_fail@plt+0x5b34>
   16cd8:	push	{fp, lr}
   16cdc:	mov	fp, sp
   16ce0:	bl	110ac <__errno_location@plt>
   16ce4:	mov	r1, #12
   16ce8:	str	r1, [r0]
   16cec:	mov	r0, #0
   16cf0:	pop	{fp, pc}
   16cf4:	b	10f20 <calloc@plt>
   16cf8:	cmp	r0, #0
   16cfc:	movweq	r0, #1
   16d00:	cmn	r0, #1
   16d04:	ble	16d0c <__assert_fail@plt+0x5b4c>
   16d08:	b	11034 <malloc@plt>
   16d0c:	push	{fp, lr}
   16d10:	mov	fp, sp
   16d14:	bl	110ac <__errno_location@plt>
   16d18:	mov	r1, #12
   16d1c:	str	r1, [r0]
   16d20:	mov	r0, #0
   16d24:	pop	{fp, pc}
   16d28:	push	{fp, lr}
   16d2c:	mov	fp, sp
   16d30:	cmp	r0, #0
   16d34:	beq	16d50 <__assert_fail@plt+0x5b90>
   16d38:	cmp	r1, #0
   16d3c:	beq	16d5c <__assert_fail@plt+0x5b9c>
   16d40:	cmn	r1, #1
   16d44:	ble	16d68 <__assert_fail@plt+0x5ba8>
   16d48:	pop	{fp, lr}
   16d4c:	b	10fbc <realloc@plt>
   16d50:	mov	r0, r1
   16d54:	pop	{fp, lr}
   16d58:	b	16cf8 <__assert_fail@plt+0x5b38>
   16d5c:	bl	1223c <__assert_fail@plt+0x107c>
   16d60:	mov	r0, #0
   16d64:	pop	{fp, pc}
   16d68:	bl	110ac <__errno_location@plt>
   16d6c:	mov	r1, #12
   16d70:	str	r1, [r0]
   16d74:	mov	r0, #0
   16d78:	pop	{fp, pc}
   16d7c:	mov	r0, #1
   16d80:	b	118fc <__assert_fail@plt+0x73c>
   16d84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d88:	add	fp, sp, #28
   16d8c:	sub	sp, sp, #12
   16d90:	mov	r4, r3
   16d94:	mov	r9, r2
   16d98:	mov	r7, r1
   16d9c:	mov	r8, r0
   16da0:	bl	11094 <strlen@plt>
   16da4:	ldr	r6, [r7]
   16da8:	cmp	r6, #0
   16dac:	beq	16e58 <__assert_fail@plt+0x5c98>
   16db0:	mov	r5, r0
   16db4:	cmp	r9, #0
   16db8:	beq	16e68 <__assert_fail@plt+0x5ca8>
   16dbc:	add	r0, r7, #4
   16dc0:	mvn	sl, #0
   16dc4:	mov	r7, #0
   16dc8:	str	r9, [sp]
   16dcc:	str	r0, [sp, #8]
   16dd0:	mov	r0, #0
   16dd4:	str	r0, [sp, #4]
   16dd8:	mov	r0, r9
   16ddc:	b	16e20 <__assert_fail@plt+0x5c60>
   16de0:	ldr	r0, [sp]
   16de4:	mov	r1, r9
   16de8:	mov	r2, r4
   16dec:	mla	r0, sl, r4, r0
   16df0:	bl	11088 <bcmp@plt>
   16df4:	ldr	r1, [sp, #4]
   16df8:	cmp	r0, #0
   16dfc:	movwne	r0, #1
   16e00:	orr	r1, r1, r0
   16e04:	str	r1, [sp, #4]
   16e08:	ldr	r0, [sp, #8]
   16e0c:	add	r9, r9, r4
   16e10:	ldr	r6, [r0, r7, lsl #2]
   16e14:	add	r7, r7, #1
   16e18:	cmp	r6, #0
   16e1c:	beq	16edc <__assert_fail@plt+0x5d1c>
   16e20:	mov	r0, r6
   16e24:	mov	r1, r8
   16e28:	mov	r2, r5
   16e2c:	bl	1119c <strncmp@plt>
   16e30:	cmp	r0, #0
   16e34:	bne	16e08 <__assert_fail@plt+0x5c48>
   16e38:	mov	r0, r6
   16e3c:	bl	11094 <strlen@plt>
   16e40:	cmp	r0, r5
   16e44:	beq	16e5c <__assert_fail@plt+0x5c9c>
   16e48:	cmn	sl, #1
   16e4c:	bne	16de0 <__assert_fail@plt+0x5c20>
   16e50:	mov	sl, r7
   16e54:	b	16e08 <__assert_fail@plt+0x5c48>
   16e58:	mvn	r7, #0
   16e5c:	mov	r0, r7
   16e60:	sub	sp, fp, #28
   16e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e68:	add	r4, r7, #4
   16e6c:	mov	r0, #0
   16e70:	mvn	r9, #0
   16e74:	mvn	sl, #0
   16e78:	mov	r7, #0
   16e7c:	str	r0, [sp, #4]
   16e80:	b	16eb0 <__assert_fail@plt+0x5cf0>
   16e84:	ldr	r1, [sp, #4]
   16e88:	subs	r0, sl, r9
   16e8c:	movwne	r0, #1
   16e90:	cmn	sl, #1
   16e94:	moveq	sl, r7
   16e98:	orr	r1, r1, r0
   16e9c:	str	r1, [sp, #4]
   16ea0:	ldr	r6, [r4, r7, lsl #2]
   16ea4:	add	r7, r7, #1
   16ea8:	cmp	r6, #0
   16eac:	beq	16edc <__assert_fail@plt+0x5d1c>
   16eb0:	mov	r0, r6
   16eb4:	mov	r1, r8
   16eb8:	mov	r2, r5
   16ebc:	bl	1119c <strncmp@plt>
   16ec0:	cmp	r0, #0
   16ec4:	bne	16ea0 <__assert_fail@plt+0x5ce0>
   16ec8:	mov	r0, r6
   16ecc:	bl	11094 <strlen@plt>
   16ed0:	cmp	r0, r5
   16ed4:	bne	16e84 <__assert_fail@plt+0x5cc4>
   16ed8:	b	16e5c <__assert_fail@plt+0x5c9c>
   16edc:	ldr	r0, [sp, #4]
   16ee0:	tst	r0, #1
   16ee4:	mvnne	sl, #1
   16ee8:	mov	r0, sl
   16eec:	sub	sp, fp, #28
   16ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ef4:	push	{r4, r5, r6, r7, fp, lr}
   16ef8:	add	fp, sp, #16
   16efc:	mov	r5, r0
   16f00:	ldr	r0, [r1]
   16f04:	mvn	r4, #0
   16f08:	cmp	r0, #0
   16f0c:	beq	16f38 <__assert_fail@plt+0x5d78>
   16f10:	add	r7, r1, #4
   16f14:	mov	r6, #0
   16f18:	mov	r1, r5
   16f1c:	bl	10f44 <strcmp@plt>
   16f20:	cmp	r0, #0
   16f24:	beq	16f40 <__assert_fail@plt+0x5d80>
   16f28:	ldr	r0, [r7, r6, lsl #2]
   16f2c:	add	r6, r6, #1
   16f30:	cmp	r0, #0
   16f34:	bne	16f18 <__assert_fail@plt+0x5d58>
   16f38:	mov	r0, r4
   16f3c:	pop	{r4, r5, r6, r7, fp, pc}
   16f40:	mov	r0, r6
   16f44:	pop	{r4, r5, r6, r7, fp, pc}
   16f48:	push	{r4, r5, r6, sl, fp, lr}
   16f4c:	add	fp, sp, #16
   16f50:	sub	sp, sp, #8
   16f54:	mov	r5, r0
   16f58:	movw	r0, #34326	; 0x8616
   16f5c:	mov	r4, r1
   16f60:	movw	r1, #34353	; 0x8631
   16f64:	cmn	r2, #1
   16f68:	mov	r2, #5
   16f6c:	movt	r0, #1
   16f70:	movt	r1, #1
   16f74:	moveq	r1, r0
   16f78:	mov	r0, #0
   16f7c:	bl	10fb0 <dcgettext@plt>
   16f80:	mov	r6, r0
   16f84:	mov	r0, #0
   16f88:	mov	r1, #8
   16f8c:	mov	r2, r4
   16f90:	bl	14dbc <__assert_fail@plt+0x3bfc>
   16f94:	mov	r4, r0
   16f98:	mov	r0, #1
   16f9c:	mov	r1, r5
   16fa0:	bl	1537c <__assert_fail@plt+0x41bc>
   16fa4:	str	r0, [sp]
   16fa8:	mov	r0, #0
   16fac:	mov	r1, #0
   16fb0:	mov	r2, r6
   16fb4:	mov	r3, r4
   16fb8:	bl	1101c <error@plt>
   16fbc:	sub	sp, fp, #16
   16fc0:	pop	{r4, r5, r6, sl, fp, pc}
   16fc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fc8:	add	fp, sp, #28
   16fcc:	sub	sp, sp, #4
   16fd0:	mov	sl, r1
   16fd4:	movw	r1, #34382	; 0x864e
   16fd8:	mov	r4, r2
   16fdc:	mov	r6, r0
   16fe0:	mov	r0, #0
   16fe4:	mov	r2, #5
   16fe8:	mov	r8, #0
   16fec:	movt	r1, #1
   16ff0:	bl	10fb0 <dcgettext@plt>
   16ff4:	movw	r1, #37216	; 0x9160
   16ff8:	movt	r1, #2
   16ffc:	ldr	r1, [r1]
   17000:	bl	10f2c <fputs_unlocked@plt>
   17004:	ldr	r7, [r6]
   17008:	cmp	r7, #0
   1700c:	beq	170c8 <__assert_fail@plt+0x5f08>
   17010:	add	r0, r6, #4
   17014:	mov	r9, #0
   17018:	mov	r6, #0
   1701c:	str	r0, [sp]
   17020:	cmp	r9, #0
   17024:	bne	1707c <__assert_fail@plt+0x5ebc>
   17028:	mov	r5, #0
   1702c:	movw	r0, #37216	; 0x9160
   17030:	movt	r0, #2
   17034:	ldr	r6, [r0]
   17038:	mov	r0, r7
   1703c:	bl	1538c <__assert_fail@plt+0x41cc>
   17040:	movw	r2, #34403	; 0x8663
   17044:	mov	r3, r0
   17048:	mov	r0, r6
   1704c:	mov	r1, #1
   17050:	movt	r2, #1
   17054:	bl	11100 <__fprintf_chk@plt>
   17058:	add	r6, sl, r5
   1705c:	ldr	r0, [sp]
   17060:	add	r8, r8, r4
   17064:	ldr	r7, [r0, -r9, lsl #2]
   17068:	sub	r9, r9, #1
   1706c:	cmp	r7, #0
   17070:	beq	170c8 <__assert_fail@plt+0x5f08>
   17074:	cmp	r9, #0
   17078:	beq	17028 <__assert_fail@plt+0x5e68>
   1707c:	add	r1, sl, r8
   17080:	mov	r0, r6
   17084:	mov	r2, r4
   17088:	bl	11088 <bcmp@plt>
   1708c:	cmp	r0, #0
   17090:	mov	r5, r8
   17094:	bne	1702c <__assert_fail@plt+0x5e6c>
   17098:	movw	r0, #37216	; 0x9160
   1709c:	movt	r0, #2
   170a0:	ldr	r5, [r0]
   170a4:	mov	r0, r7
   170a8:	bl	1538c <__assert_fail@plt+0x41cc>
   170ac:	movw	r2, #34411	; 0x866b
   170b0:	mov	r3, r0
   170b4:	mov	r0, r5
   170b8:	mov	r1, #1
   170bc:	movt	r2, #1
   170c0:	bl	11100 <__fprintf_chk@plt>
   170c4:	b	1705c <__assert_fail@plt+0x5e9c>
   170c8:	movw	r0, #37216	; 0x9160
   170cc:	movt	r0, #2
   170d0:	ldr	r0, [r0]
   170d4:	ldr	r1, [r0, #20]
   170d8:	ldr	r2, [r0, #24]
   170dc:	cmp	r1, r2
   170e0:	addcc	r2, r1, #1
   170e4:	strcc	r2, [r0, #20]
   170e8:	movcc	r0, #10
   170ec:	strbcc	r0, [r1]
   170f0:	subcc	sp, fp, #28
   170f4:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170f8:	mov	r1, #10
   170fc:	sub	sp, fp, #28
   17100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17104:	b	11130 <__overflow@plt>
   17108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1710c:	add	fp, sp, #28
   17110:	sub	sp, sp, #12
   17114:	mov	sl, r0
   17118:	ldr	r0, [fp, #16]
   1711c:	ldr	r9, [fp, #8]
   17120:	mov	r5, r3
   17124:	mov	r8, r2
   17128:	mov	r6, r1
   1712c:	cmp	r0, #0
   17130:	beq	17160 <__assert_fail@plt+0x5fa0>
   17134:	mov	r0, r6
   17138:	mov	r1, r8
   1713c:	mov	r2, r5
   17140:	mov	r3, r9
   17144:	bl	16d84 <__assert_fail@plt+0x5bc4>
   17148:	mov	r4, r0
   1714c:	cmn	r4, #1
   17150:	ble	171b0 <__assert_fail@plt+0x5ff0>
   17154:	mov	r0, r4
   17158:	sub	sp, fp, #28
   1715c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17160:	ldr	r0, [r8]
   17164:	movw	r7, #34326	; 0x8616
   17168:	str	r5, [sp, #8]
   1716c:	movt	r7, #1
   17170:	cmp	r0, #0
   17174:	beq	171c8 <__assert_fail@plt+0x6008>
   17178:	add	r5, r8, #4
   1717c:	mov	r4, #0
   17180:	mov	r1, r6
   17184:	bl	10f44 <strcmp@plt>
   17188:	cmp	r0, #0
   1718c:	beq	171a4 <__assert_fail@plt+0x5fe4>
   17190:	ldr	r0, [r5, r4, lsl #2]
   17194:	add	r4, r4, #1
   17198:	cmp	r0, #0
   1719c:	bne	17180 <__assert_fail@plt+0x5fc0>
   171a0:	b	171c8 <__assert_fail@plt+0x6008>
   171a4:	ldr	r5, [sp, #8]
   171a8:	cmn	r4, #1
   171ac:	bgt	17154 <__assert_fail@plt+0x5f94>
   171b0:	movw	r0, #34326	; 0x8616
   171b4:	movw	r7, #34353	; 0x8631
   171b8:	str	r5, [sp, #8]
   171bc:	movt	r0, #1
   171c0:	movt	r7, #1
   171c4:	moveq	r7, r0
   171c8:	ldr	r5, [fp, #12]
   171cc:	mov	r0, #0
   171d0:	mov	r1, r7
   171d4:	mov	r2, #5
   171d8:	bl	10fb0 <dcgettext@plt>
   171dc:	mov	r4, r0
   171e0:	mov	r0, #0
   171e4:	mov	r1, #8
   171e8:	mov	r2, r6
   171ec:	bl	14dbc <__assert_fail@plt+0x3bfc>
   171f0:	mov	r6, r0
   171f4:	mov	r0, #1
   171f8:	mov	r1, sl
   171fc:	bl	1537c <__assert_fail@plt+0x41bc>
   17200:	str	r0, [sp]
   17204:	mov	r0, #0
   17208:	mov	r1, #0
   1720c:	mov	r2, r4
   17210:	mov	r3, r6
   17214:	bl	1101c <error@plt>
   17218:	ldr	r1, [sp, #8]
   1721c:	mov	r0, r8
   17220:	mov	r2, r9
   17224:	bl	16fc4 <__assert_fail@plt+0x5e04>
   17228:	blx	r5
   1722c:	mvn	r4, #0
   17230:	mov	r0, r4
   17234:	sub	sp, fp, #28
   17238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1723c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17240:	add	fp, sp, #24
   17244:	ldr	r6, [r1]
   17248:	cmp	r6, #0
   1724c:	beq	172b0 <__assert_fail@plt+0x60f0>
   17250:	mov	r8, r1
   17254:	mov	r7, r2
   17258:	mov	r1, r2
   1725c:	mov	r2, r3
   17260:	mov	r4, r3
   17264:	mov	r9, r0
   17268:	bl	11088 <bcmp@plt>
   1726c:	cmp	r0, #0
   17270:	beq	172a8 <__assert_fail@plt+0x60e8>
   17274:	add	r7, r7, r4
   17278:	add	r5, r8, #4
   1727c:	ldr	r6, [r5]
   17280:	cmp	r6, #0
   17284:	beq	172b0 <__assert_fail@plt+0x60f0>
   17288:	mov	r0, r9
   1728c:	mov	r1, r7
   17290:	mov	r2, r4
   17294:	bl	11088 <bcmp@plt>
   17298:	add	r7, r7, r4
   1729c:	add	r5, r5, #4
   172a0:	cmp	r0, #0
   172a4:	bne	1727c <__assert_fail@plt+0x60bc>
   172a8:	mov	r0, r6
   172ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   172b0:	mov	r6, #0
   172b4:	mov	r0, r6
   172b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   172bc:	push	{r4, r5, r6, sl, fp, lr}
   172c0:	add	fp, sp, #16
   172c4:	mov	r4, r0
   172c8:	bl	11004 <__fpending@plt>
   172cc:	ldr	r6, [r4]
   172d0:	mov	r5, r0
   172d4:	mov	r0, r4
   172d8:	bl	12094 <__assert_fail@plt+0xed4>
   172dc:	tst	r6, #32
   172e0:	bne	17318 <__assert_fail@plt+0x6158>
   172e4:	cmp	r0, #0
   172e8:	mov	r4, r0
   172ec:	mvnne	r4, #0
   172f0:	cmp	r5, #0
   172f4:	bne	17324 <__assert_fail@plt+0x6164>
   172f8:	cmp	r0, #0
   172fc:	beq	17324 <__assert_fail@plt+0x6164>
   17300:	bl	110ac <__errno_location@plt>
   17304:	ldr	r0, [r0]
   17308:	subs	r4, r0, #9
   1730c:	mvnne	r4, #0
   17310:	mov	r0, r4
   17314:	pop	{r4, r5, r6, sl, fp, pc}
   17318:	mvn	r4, #0
   1731c:	cmp	r0, #0
   17320:	beq	1732c <__assert_fail@plt+0x616c>
   17324:	mov	r0, r4
   17328:	pop	{r4, r5, r6, sl, fp, pc}
   1732c:	bl	110ac <__errno_location@plt>
   17330:	mov	r1, #0
   17334:	str	r1, [r0]
   17338:	mov	r0, r4
   1733c:	pop	{r4, r5, r6, sl, fp, pc}
   17340:	sub	sp, sp, #8
   17344:	push	{r4, r5, r6, r7, fp, lr}
   17348:	add	fp, sp, #16
   1734c:	sub	sp, sp, #8
   17350:	mov	r5, r0
   17354:	add	r0, fp, #8
   17358:	cmp	r1, #11
   1735c:	str	r2, [fp, #8]
   17360:	str	r3, [fp, #12]
   17364:	str	r0, [sp, #4]
   17368:	bhi	173a4 <__assert_fail@plt+0x61e4>
   1736c:	mov	r0, #1
   17370:	movw	r2, #1300	; 0x514
   17374:	tst	r2, r0, lsl r1
   17378:	bne	17464 <__assert_fail@plt+0x62a4>
   1737c:	movw	r2, #2570	; 0xa0a
   17380:	tst	r2, r0, lsl r1
   17384:	bne	173cc <__assert_fail@plt+0x620c>
   17388:	cmp	r1, #0
   1738c:	bne	173a4 <__assert_fail@plt+0x61e4>
   17390:	ldr	r0, [sp, #4]
   17394:	add	r1, r0, #4
   17398:	str	r1, [sp, #4]
   1739c:	mov	r1, #0
   173a0:	b	17470 <__assert_fail@plt+0x62b0>
   173a4:	sub	r0, r1, #1024	; 0x400
   173a8:	cmp	r0, #10
   173ac:	bhi	17464 <__assert_fail@plt+0x62a4>
   173b0:	mov	r2, #1
   173b4:	movw	r3, #645	; 0x285
   173b8:	tst	r3, r2, lsl r0
   173bc:	bne	17464 <__assert_fail@plt+0x62a4>
   173c0:	movw	r3, #1282	; 0x502
   173c4:	tst	r3, r2, lsl r0
   173c8:	beq	173d8 <__assert_fail@plt+0x6218>
   173cc:	mov	r0, r5
   173d0:	bl	11124 <fcntl64@plt>
   173d4:	b	1747c <__assert_fail@plt+0x62bc>
   173d8:	cmp	r0, #6
   173dc:	bne	17464 <__assert_fail@plt+0x62a4>
   173e0:	ldr	r0, [sp, #4]
   173e4:	movw	r7, #37560	; 0x92b8
   173e8:	movt	r7, #2
   173ec:	add	r1, r0, #4
   173f0:	str	r1, [sp, #4]
   173f4:	ldr	r6, [r0]
   173f8:	ldr	r0, [r7]
   173fc:	cmp	r0, #0
   17400:	bmi	174a0 <__assert_fail@plt+0x62e0>
   17404:	mov	r0, r5
   17408:	movw	r1, #1030	; 0x406
   1740c:	mov	r2, r6
   17410:	bl	11124 <fcntl64@plt>
   17414:	mov	r4, r0
   17418:	cmn	r0, #1
   1741c:	bgt	17494 <__assert_fail@plt+0x62d4>
   17420:	bl	110ac <__errno_location@plt>
   17424:	ldr	r0, [r0]
   17428:	cmp	r0, #22
   1742c:	bne	17494 <__assert_fail@plt+0x62d4>
   17430:	mov	r0, r5
   17434:	mov	r1, #0
   17438:	mov	r2, r6
   1743c:	bl	11124 <fcntl64@plt>
   17440:	mov	r4, r0
   17444:	cmp	r0, #0
   17448:	bmi	17480 <__assert_fail@plt+0x62c0>
   1744c:	mvn	r0, #0
   17450:	str	r0, [r7]
   17454:	mov	r0, #1
   17458:	cmp	r0, #0
   1745c:	bne	174cc <__assert_fail@plt+0x630c>
   17460:	b	17480 <__assert_fail@plt+0x62c0>
   17464:	ldr	r0, [sp, #4]
   17468:	add	r2, r0, #4
   1746c:	str	r2, [sp, #4]
   17470:	ldr	r2, [r0]
   17474:	mov	r0, r5
   17478:	bl	11124 <fcntl64@plt>
   1747c:	mov	r4, r0
   17480:	mov	r0, r4
   17484:	sub	sp, fp, #16
   17488:	pop	{r4, r5, r6, r7, fp, lr}
   1748c:	add	sp, sp, #8
   17490:	bx	lr
   17494:	mov	r0, #1
   17498:	str	r0, [r7]
   1749c:	b	17480 <__assert_fail@plt+0x62c0>
   174a0:	mov	r0, r5
   174a4:	mov	r1, #0
   174a8:	mov	r2, r6
   174ac:	bl	11124 <fcntl64@plt>
   174b0:	mov	r4, r0
   174b4:	ldr	r0, [r7]
   174b8:	add	r0, r0, #1
   174bc:	clz	r0, r0
   174c0:	lsr	r0, r0, #5
   174c4:	cmp	r0, #0
   174c8:	beq	17480 <__assert_fail@plt+0x62c0>
   174cc:	cmp	r4, #0
   174d0:	bmi	17480 <__assert_fail@plt+0x62c0>
   174d4:	mov	r0, r4
   174d8:	mov	r1, #1
   174dc:	bl	11124 <fcntl64@plt>
   174e0:	cmp	r0, #0
   174e4:	bmi	17500 <__assert_fail@plt+0x6340>
   174e8:	orr	r2, r0, #1
   174ec:	mov	r0, r4
   174f0:	mov	r1, #2
   174f4:	bl	11124 <fcntl64@plt>
   174f8:	cmn	r0, #1
   174fc:	bne	17480 <__assert_fail@plt+0x62c0>
   17500:	bl	110ac <__errno_location@plt>
   17504:	ldr	r6, [r0]
   17508:	mov	r5, r0
   1750c:	mov	r0, r4
   17510:	bl	111b4 <close@plt>
   17514:	str	r6, [r5]
   17518:	mvn	r4, #0
   1751c:	b	17480 <__assert_fail@plt+0x62c0>
   17520:	push	{fp, lr}
   17524:	mov	fp, sp
   17528:	mov	r0, #14
   1752c:	bl	11154 <nl_langinfo@plt>
   17530:	movw	r1, #32827	; 0x803b
   17534:	cmp	r0, #0
   17538:	movt	r1, #1
   1753c:	movne	r1, r0
   17540:	movw	r0, #34416	; 0x8670
   17544:	ldrb	r2, [r1]
   17548:	movt	r0, #1
   1754c:	cmp	r2, #0
   17550:	movne	r0, r1
   17554:	pop	{fp, pc}
   17558:	push	{r4, r5, r6, r7, fp, lr}
   1755c:	add	fp, sp, #16
   17560:	sub	sp, sp, #8
   17564:	cmp	r0, #0
   17568:	add	r5, sp, #4
   1756c:	mov	r7, r2
   17570:	mov	r4, r1
   17574:	movne	r5, r0
   17578:	mov	r0, r5
   1757c:	bl	11010 <mbrtowc@plt>
   17580:	mov	r6, r0
   17584:	cmp	r7, #0
   17588:	beq	175b0 <__assert_fail@plt+0x63f0>
   1758c:	cmn	r6, #2
   17590:	bcc	175b0 <__assert_fail@plt+0x63f0>
   17594:	mov	r0, #0
   17598:	bl	175f8 <__assert_fail@plt+0x6438>
   1759c:	cmp	r0, #0
   175a0:	bne	175b0 <__assert_fail@plt+0x63f0>
   175a4:	ldrb	r0, [r4]
   175a8:	mov	r6, #1
   175ac:	str	r0, [r5]
   175b0:	mov	r0, r6
   175b4:	sub	sp, fp, #16
   175b8:	pop	{r4, r5, r6, r7, fp, pc}
   175bc:	cmp	r2, #0
   175c0:	beq	175f0 <__assert_fail@plt+0x6430>
   175c4:	mvn	r3, #0
   175c8:	udiv	r3, r3, r2
   175cc:	cmp	r3, r1
   175d0:	bcs	175f0 <__assert_fail@plt+0x6430>
   175d4:	push	{fp, lr}
   175d8:	mov	fp, sp
   175dc:	bl	110ac <__errno_location@plt>
   175e0:	mov	r1, #12
   175e4:	str	r1, [r0]
   175e8:	mov	r0, #0
   175ec:	pop	{fp, pc}
   175f0:	mul	r1, r2, r1
   175f4:	b	16d28 <__assert_fail@plt+0x5b68>
   175f8:	push	{r4, sl, fp, lr}
   175fc:	add	fp, sp, #8
   17600:	sub	sp, sp, #264	; 0x108
   17604:	add	r1, sp, #7
   17608:	movw	r2, #257	; 0x101
   1760c:	bl	17664 <__assert_fail@plt+0x64a4>
   17610:	mov	r4, #0
   17614:	cmp	r0, #0
   17618:	bne	17658 <__assert_fail@plt+0x6498>
   1761c:	movw	r1, #34422	; 0x8676
   17620:	add	r0, sp, #7
   17624:	mov	r2, #2
   17628:	movt	r1, #1
   1762c:	bl	11088 <bcmp@plt>
   17630:	cmp	r0, #0
   17634:	beq	17658 <__assert_fail@plt+0x6498>
   17638:	movw	r1, #34424	; 0x8678
   1763c:	add	r0, sp, #7
   17640:	mov	r2, #6
   17644:	movt	r1, #1
   17648:	bl	11088 <bcmp@plt>
   1764c:	cmp	r0, #0
   17650:	mov	r4, r0
   17654:	movwne	r4, #1
   17658:	mov	r0, r4
   1765c:	sub	sp, fp, #8
   17660:	pop	{r4, sl, fp, pc}
   17664:	push	{r4, r5, r6, r7, fp, lr}
   17668:	add	fp, sp, #16
   1766c:	mov	r4, r1
   17670:	mov	r1, #0
   17674:	mov	r6, r2
   17678:	bl	1113c <setlocale@plt>
   1767c:	cmp	r0, #0
   17680:	beq	176b0 <__assert_fail@plt+0x64f0>
   17684:	mov	r7, r0
   17688:	bl	11094 <strlen@plt>
   1768c:	cmp	r0, r6
   17690:	bcs	176cc <__assert_fail@plt+0x650c>
   17694:	add	r2, r0, #1
   17698:	mov	r0, r4
   1769c:	mov	r1, r7
   176a0:	bl	10f8c <memcpy@plt>
   176a4:	mov	r5, #0
   176a8:	mov	r0, r5
   176ac:	pop	{r4, r5, r6, r7, fp, pc}
   176b0:	mov	r5, #22
   176b4:	cmp	r6, #0
   176b8:	beq	176f4 <__assert_fail@plt+0x6534>
   176bc:	mov	r0, #0
   176c0:	strb	r0, [r4]
   176c4:	mov	r0, r5
   176c8:	pop	{r4, r5, r6, r7, fp, pc}
   176cc:	mov	r5, #34	; 0x22
   176d0:	cmp	r6, #0
   176d4:	beq	176f4 <__assert_fail@plt+0x6534>
   176d8:	sub	r6, r6, #1
   176dc:	mov	r0, r4
   176e0:	mov	r1, r7
   176e4:	mov	r2, r6
   176e8:	bl	10f8c <memcpy@plt>
   176ec:	mov	r0, #0
   176f0:	strb	r0, [r4, r6]
   176f4:	mov	r0, r5
   176f8:	pop	{r4, r5, r6, r7, fp, pc}
   176fc:	mov	r1, #0
   17700:	b	1113c <setlocale@plt>
   17704:	eor	r1, r1, #-2147483648	; 0x80000000
   17708:	b	17710 <__assert_fail@plt+0x6550>
   1770c:	eor	r3, r3, #-2147483648	; 0x80000000
   17710:	push	{r4, r5, lr}
   17714:	lsl	r4, r1, #1
   17718:	lsl	r5, r3, #1
   1771c:	teq	r4, r5
   17720:	teqeq	r0, r2
   17724:	orrsne	ip, r4, r0
   17728:	orrsne	ip, r5, r2
   1772c:	mvnsne	ip, r4, asr #21
   17730:	mvnsne	ip, r5, asr #21
   17734:	beq	17920 <__assert_fail@plt+0x6760>
   17738:	lsr	r4, r4, #21
   1773c:	rsbs	r5, r4, r5, lsr #21
   17740:	rsblt	r5, r5, #0
   17744:	ble	17764 <__assert_fail@plt+0x65a4>
   17748:	add	r4, r4, r5
   1774c:	eor	r2, r0, r2
   17750:	eor	r3, r1, r3
   17754:	eor	r0, r2, r0
   17758:	eor	r1, r3, r1
   1775c:	eor	r2, r0, r2
   17760:	eor	r3, r1, r3
   17764:	cmp	r5, #54	; 0x36
   17768:	pophi	{r4, r5, pc}
   1776c:	tst	r1, #-2147483648	; 0x80000000
   17770:	lsl	r1, r1, #12
   17774:	mov	ip, #1048576	; 0x100000
   17778:	orr	r1, ip, r1, lsr #12
   1777c:	beq	17788 <__assert_fail@plt+0x65c8>
   17780:	rsbs	r0, r0, #0
   17784:	rsc	r1, r1, #0
   17788:	tst	r3, #-2147483648	; 0x80000000
   1778c:	lsl	r3, r3, #12
   17790:	orr	r3, ip, r3, lsr #12
   17794:	beq	177a0 <__assert_fail@plt+0x65e0>
   17798:	rsbs	r2, r2, #0
   1779c:	rsc	r3, r3, #0
   177a0:	teq	r4, r5
   177a4:	beq	17908 <__assert_fail@plt+0x6748>
   177a8:	sub	r4, r4, #1
   177ac:	rsbs	lr, r5, #32
   177b0:	blt	177cc <__assert_fail@plt+0x660c>
   177b4:	lsl	ip, r2, lr
   177b8:	adds	r0, r0, r2, lsr r5
   177bc:	adc	r1, r1, #0
   177c0:	adds	r0, r0, r3, lsl lr
   177c4:	adcs	r1, r1, r3, asr r5
   177c8:	b	177e8 <__assert_fail@plt+0x6628>
   177cc:	sub	r5, r5, #32
   177d0:	add	lr, lr, #32
   177d4:	cmp	r2, #1
   177d8:	lsl	ip, r3, lr
   177dc:	orrcs	ip, ip, #2
   177e0:	adds	r0, r0, r3, asr r5
   177e4:	adcs	r1, r1, r3, asr #31
   177e8:	and	r5, r1, #-2147483648	; 0x80000000
   177ec:	bpl	177fc <__assert_fail@plt+0x663c>
   177f0:	rsbs	ip, ip, #0
   177f4:	rscs	r0, r0, #0
   177f8:	rsc	r1, r1, #0
   177fc:	cmp	r1, #1048576	; 0x100000
   17800:	bcc	17840 <__assert_fail@plt+0x6680>
   17804:	cmp	r1, #2097152	; 0x200000
   17808:	bcc	17828 <__assert_fail@plt+0x6668>
   1780c:	lsrs	r1, r1, #1
   17810:	rrxs	r0, r0
   17814:	rrx	ip, ip
   17818:	add	r4, r4, #1
   1781c:	lsl	r2, r4, #21
   17820:	cmn	r2, #4194304	; 0x400000
   17824:	bcs	17980 <__assert_fail@plt+0x67c0>
   17828:	cmp	ip, #-2147483648	; 0x80000000
   1782c:	lsrseq	ip, r0, #1
   17830:	adcs	r0, r0, #0
   17834:	adc	r1, r1, r4, lsl #20
   17838:	orr	r1, r1, r5
   1783c:	pop	{r4, r5, pc}
   17840:	lsls	ip, ip, #1
   17844:	adcs	r0, r0, r0
   17848:	adc	r1, r1, r1
   1784c:	tst	r1, #1048576	; 0x100000
   17850:	sub	r4, r4, #1
   17854:	bne	17828 <__assert_fail@plt+0x6668>
   17858:	teq	r1, #0
   1785c:	moveq	r1, r0
   17860:	moveq	r0, #0
   17864:	clz	r3, r1
   17868:	addeq	r3, r3, #32
   1786c:	sub	r3, r3, #11
   17870:	subs	r2, r3, #32
   17874:	bge	17898 <__assert_fail@plt+0x66d8>
   17878:	adds	r2, r2, #12
   1787c:	ble	17894 <__assert_fail@plt+0x66d4>
   17880:	add	ip, r2, #20
   17884:	rsb	r2, r2, #12
   17888:	lsl	r0, r1, ip
   1788c:	lsr	r1, r1, r2
   17890:	b	178a8 <__assert_fail@plt+0x66e8>
   17894:	add	r2, r2, #20
   17898:	rsble	ip, r2, #32
   1789c:	lsl	r1, r1, r2
   178a0:	orrle	r1, r1, r0, lsr ip
   178a4:	lslle	r0, r0, r2
   178a8:	subs	r4, r4, r3
   178ac:	addge	r1, r1, r4, lsl #20
   178b0:	orrge	r1, r1, r5
   178b4:	popge	{r4, r5, pc}
   178b8:	mvn	r4, r4
   178bc:	subs	r4, r4, #31
   178c0:	bge	178fc <__assert_fail@plt+0x673c>
   178c4:	adds	r4, r4, #12
   178c8:	bgt	178e4 <__assert_fail@plt+0x6724>
   178cc:	add	r4, r4, #20
   178d0:	rsb	r2, r4, #32
   178d4:	lsr	r0, r0, r4
   178d8:	orr	r0, r0, r1, lsl r2
   178dc:	orr	r1, r5, r1, lsr r4
   178e0:	pop	{r4, r5, pc}
   178e4:	rsb	r4, r4, #12
   178e8:	rsb	r2, r4, #32
   178ec:	lsr	r0, r0, r2
   178f0:	orr	r0, r0, r1, lsl r4
   178f4:	mov	r1, r5
   178f8:	pop	{r4, r5, pc}
   178fc:	lsr	r0, r1, r4
   17900:	mov	r1, r5
   17904:	pop	{r4, r5, pc}
   17908:	teq	r4, #0
   1790c:	eor	r3, r3, #1048576	; 0x100000
   17910:	eoreq	r1, r1, #1048576	; 0x100000
   17914:	addeq	r4, r4, #1
   17918:	subne	r5, r5, #1
   1791c:	b	177a8 <__assert_fail@plt+0x65e8>
   17920:	mvns	ip, r4, asr #21
   17924:	mvnsne	ip, r5, asr #21
   17928:	beq	17990 <__assert_fail@plt+0x67d0>
   1792c:	teq	r4, r5
   17930:	teqeq	r0, r2
   17934:	beq	17948 <__assert_fail@plt+0x6788>
   17938:	orrs	ip, r4, r0
   1793c:	moveq	r1, r3
   17940:	moveq	r0, r2
   17944:	pop	{r4, r5, pc}
   17948:	teq	r1, r3
   1794c:	movne	r1, #0
   17950:	movne	r0, #0
   17954:	popne	{r4, r5, pc}
   17958:	lsrs	ip, r4, #21
   1795c:	bne	17970 <__assert_fail@plt+0x67b0>
   17960:	lsls	r0, r0, #1
   17964:	adcs	r1, r1, r1
   17968:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1796c:	pop	{r4, r5, pc}
   17970:	adds	r4, r4, #4194304	; 0x400000
   17974:	addcc	r1, r1, #1048576	; 0x100000
   17978:	popcc	{r4, r5, pc}
   1797c:	and	r5, r1, #-2147483648	; 0x80000000
   17980:	orr	r1, r5, #2130706432	; 0x7f000000
   17984:	orr	r1, r1, #15728640	; 0xf00000
   17988:	mov	r0, #0
   1798c:	pop	{r4, r5, pc}
   17990:	mvns	ip, r4, asr #21
   17994:	movne	r1, r3
   17998:	movne	r0, r2
   1799c:	mvnseq	ip, r5, asr #21
   179a0:	movne	r3, r1
   179a4:	movne	r2, r0
   179a8:	orrs	r4, r0, r1, lsl #12
   179ac:	orrseq	r5, r2, r3, lsl #12
   179b0:	teqeq	r1, r3
   179b4:	orrne	r1, r1, #524288	; 0x80000
   179b8:	pop	{r4, r5, pc}
   179bc:	teq	r0, #0
   179c0:	moveq	r1, #0
   179c4:	bxeq	lr
   179c8:	push	{r4, r5, lr}
   179cc:	mov	r4, #1024	; 0x400
   179d0:	add	r4, r4, #50	; 0x32
   179d4:	mov	r5, #0
   179d8:	mov	r1, #0
   179dc:	b	17858 <__assert_fail@plt+0x6698>
   179e0:	teq	r0, #0
   179e4:	moveq	r1, #0
   179e8:	bxeq	lr
   179ec:	push	{r4, r5, lr}
   179f0:	mov	r4, #1024	; 0x400
   179f4:	add	r4, r4, #50	; 0x32
   179f8:	ands	r5, r0, #-2147483648	; 0x80000000
   179fc:	rsbmi	r0, r0, #0
   17a00:	mov	r1, #0
   17a04:	b	17858 <__assert_fail@plt+0x6698>
   17a08:	lsls	r2, r0, #1
   17a0c:	asr	r1, r2, #3
   17a10:	rrx	r1, r1
   17a14:	lsl	r0, r2, #28
   17a18:	andsne	r3, r2, #-16777216	; 0xff000000
   17a1c:	teqne	r3, #-16777216	; 0xff000000
   17a20:	eorne	r1, r1, #939524096	; 0x38000000
   17a24:	bxne	lr
   17a28:	bics	r2, r2, #-16777216	; 0xff000000
   17a2c:	bxeq	lr
   17a30:	teq	r3, #-16777216	; 0xff000000
   17a34:	orreq	r1, r1, #524288	; 0x80000
   17a38:	bxeq	lr
   17a3c:	push	{r4, r5, lr}
   17a40:	mov	r4, #896	; 0x380
   17a44:	and	r5, r1, #-2147483648	; 0x80000000
   17a48:	bic	r1, r1, #-2147483648	; 0x80000000
   17a4c:	b	17858 <__assert_fail@plt+0x6698>
   17a50:	orrs	r2, r0, r1
   17a54:	bxeq	lr
   17a58:	push	{r4, r5, lr}
   17a5c:	mov	r5, #0
   17a60:	b	17a80 <__assert_fail@plt+0x68c0>
   17a64:	orrs	r2, r0, r1
   17a68:	bxeq	lr
   17a6c:	push	{r4, r5, lr}
   17a70:	ands	r5, r1, #-2147483648	; 0x80000000
   17a74:	bpl	17a80 <__assert_fail@plt+0x68c0>
   17a78:	rsbs	r0, r0, #0
   17a7c:	rsc	r1, r1, #0
   17a80:	mov	r4, #1024	; 0x400
   17a84:	add	r4, r4, #50	; 0x32
   17a88:	lsrs	ip, r1, #22
   17a8c:	beq	177fc <__assert_fail@plt+0x663c>
   17a90:	mov	r2, #3
   17a94:	lsrs	ip, ip, #3
   17a98:	addne	r2, r2, #3
   17a9c:	lsrs	ip, ip, #3
   17aa0:	addne	r2, r2, #3
   17aa4:	add	r2, r2, ip, lsr #3
   17aa8:	rsb	r3, r2, #32
   17aac:	lsl	ip, r0, r3
   17ab0:	lsr	r0, r0, r2
   17ab4:	orr	r0, r0, r1, lsl r3
   17ab8:	lsr	r1, r1, r2
   17abc:	add	r4, r4, r2
   17ac0:	b	177fc <__assert_fail@plt+0x663c>
   17ac4:	cmp	r3, #0
   17ac8:	cmpeq	r2, #0
   17acc:	bne	17ae4 <__assert_fail@plt+0x6924>
   17ad0:	cmp	r1, #0
   17ad4:	cmpeq	r0, #0
   17ad8:	mvnne	r1, #0
   17adc:	mvnne	r0, #0
   17ae0:	b	17b00 <__assert_fail@plt+0x6940>
   17ae4:	sub	sp, sp, #8
   17ae8:	push	{sp, lr}
   17aec:	bl	17b50 <__assert_fail@plt+0x6990>
   17af0:	ldr	lr, [sp, #4]
   17af4:	add	sp, sp, #8
   17af8:	pop	{r2, r3}
   17afc:	bx	lr
   17b00:	push	{r1, lr}
   17b04:	mov	r0, #8
   17b08:	bl	10f38 <raise@plt>
   17b0c:	pop	{r1, pc}
   17b10:	vmov	d6, r0, r1
   17b14:	vldr	d7, [pc, #36]	; 17b40 <__assert_fail@plt+0x6980>
   17b18:	vldr	d5, [pc, #40]	; 17b48 <__assert_fail@plt+0x6988>
   17b1c:	vmul.f64	d7, d6, d7
   17b20:	vcvt.u32.f64	s14, d7
   17b24:	vcvt.f64.u32	d4, s14
   17b28:	vmov	r1, s14
   17b2c:	vmls.f64	d6, d4, d5
   17b30:	vcvt.u32.f64	s15, d6
   17b34:	vmov	r0, s15
   17b38:	bx	lr
   17b3c:	nop			; (mov r0, r0)
   17b40:	andeq	r0, r0, r0
   17b44:	ldclcc	0, cr0, [r0]
   17b48:	andeq	r0, r0, r0
   17b4c:	mvnsmi	r0, r0
   17b50:	cmp	r1, r3
   17b54:	cmpeq	r0, r2
   17b58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b5c:	mov	r4, r0
   17b60:	movcc	r0, #0
   17b64:	mov	r5, r1
   17b68:	ldr	lr, [sp, #36]	; 0x24
   17b6c:	movcc	r1, r0
   17b70:	bcc	17c6c <__assert_fail@plt+0x6aac>
   17b74:	cmp	r3, #0
   17b78:	clzeq	ip, r2
   17b7c:	clzne	ip, r3
   17b80:	addeq	ip, ip, #32
   17b84:	cmp	r5, #0
   17b88:	clzeq	r1, r4
   17b8c:	addeq	r1, r1, #32
   17b90:	clzne	r1, r5
   17b94:	sub	ip, ip, r1
   17b98:	sub	sl, ip, #32
   17b9c:	lsl	r9, r3, ip
   17ba0:	rsb	fp, ip, #32
   17ba4:	orr	r9, r9, r2, lsl sl
   17ba8:	orr	r9, r9, r2, lsr fp
   17bac:	lsl	r8, r2, ip
   17bb0:	cmp	r5, r9
   17bb4:	cmpeq	r4, r8
   17bb8:	movcc	r0, #0
   17bbc:	movcc	r1, r0
   17bc0:	bcc	17bdc <__assert_fail@plt+0x6a1c>
   17bc4:	mov	r0, #1
   17bc8:	subs	r4, r4, r8
   17bcc:	lsl	r1, r0, sl
   17bd0:	orr	r1, r1, r0, lsr fp
   17bd4:	lsl	r0, r0, ip
   17bd8:	sbc	r5, r5, r9
   17bdc:	cmp	ip, #0
   17be0:	beq	17c6c <__assert_fail@plt+0x6aac>
   17be4:	lsr	r6, r8, #1
   17be8:	orr	r6, r6, r9, lsl #31
   17bec:	lsr	r7, r9, #1
   17bf0:	mov	r2, ip
   17bf4:	b	17c18 <__assert_fail@plt+0x6a58>
   17bf8:	subs	r3, r4, r6
   17bfc:	sbc	r8, r5, r7
   17c00:	adds	r3, r3, r3
   17c04:	adc	r8, r8, r8
   17c08:	adds	r4, r3, #1
   17c0c:	adc	r5, r8, #0
   17c10:	subs	r2, r2, #1
   17c14:	beq	17c34 <__assert_fail@plt+0x6a74>
   17c18:	cmp	r5, r7
   17c1c:	cmpeq	r4, r6
   17c20:	bcs	17bf8 <__assert_fail@plt+0x6a38>
   17c24:	adds	r4, r4, r4
   17c28:	adc	r5, r5, r5
   17c2c:	subs	r2, r2, #1
   17c30:	bne	17c18 <__assert_fail@plt+0x6a58>
   17c34:	lsr	r3, r4, ip
   17c38:	orr	r3, r3, r5, lsl fp
   17c3c:	lsr	r2, r5, ip
   17c40:	orr	r3, r3, r5, lsr sl
   17c44:	adds	r0, r0, r4
   17c48:	mov	r4, r3
   17c4c:	lsl	r3, r2, ip
   17c50:	orr	r3, r3, r4, lsl sl
   17c54:	lsl	ip, r4, ip
   17c58:	orr	r3, r3, r4, lsr fp
   17c5c:	adc	r1, r1, r5
   17c60:	subs	r0, r0, ip
   17c64:	mov	r5, r2
   17c68:	sbc	r1, r1, r3
   17c6c:	cmp	lr, #0
   17c70:	strdne	r4, [lr]
   17c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17c7c:	mov	r7, r0
   17c80:	ldr	r6, [pc, #72]	; 17cd0 <__assert_fail@plt+0x6b10>
   17c84:	ldr	r5, [pc, #72]	; 17cd4 <__assert_fail@plt+0x6b14>
   17c88:	add	r6, pc, r6
   17c8c:	add	r5, pc, r5
   17c90:	sub	r6, r6, r5
   17c94:	mov	r8, r1
   17c98:	mov	r9, r2
   17c9c:	bl	10ef4 <fdopen@plt-0x20>
   17ca0:	asrs	r6, r6, #2
   17ca4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17ca8:	mov	r4, #0
   17cac:	add	r4, r4, #1
   17cb0:	ldr	r3, [r5], #4
   17cb4:	mov	r2, r9
   17cb8:	mov	r1, r8
   17cbc:	mov	r0, r7
   17cc0:	blx	r3
   17cc4:	cmp	r6, r4
   17cc8:	bne	17cac <__assert_fail@plt+0x6aec>
   17ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17cd0:	andeq	r1, r1, ip, ror r2
   17cd4:	andeq	r1, r1, r4, ror r2
   17cd8:	bx	lr
   17cdc:	ldr	r3, [pc, #12]	; 17cf0 <__assert_fail@plt+0x6b30>
   17ce0:	mov	r1, #0
   17ce4:	add	r3, pc, r3
   17ce8:	ldr	r2, [r3]
   17cec:	b	110c4 <__cxa_atexit@plt>
   17cf0:	andeq	r1, r1, r0, lsl r4

Disassembly of section .fini:

00017cf4 <.fini>:
   17cf4:	push	{r3, lr}
   17cf8:	pop	{r3, pc}
