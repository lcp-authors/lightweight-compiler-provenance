
../repos/coreutils/src/id:     file format elf32-littlearm


Disassembly of section .init:

00010e80 <.init>:
   10e80:	push	{r3, lr}
   10e84:	bl	111c4 <__assert_fail@plt+0x48>
   10e88:	pop	{r3, pc}

Disassembly of section .plt:

00010e8c <calloc@plt-0x14>:
   10e8c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e90:	ldr	lr, [pc, #4]	; 10e9c <calloc@plt-0x4>
   10e94:	add	lr, pc, lr
   10e98:	ldr	pc, [lr, #8]!
   10e9c:	andeq	r7, r1, r4, ror #2

00010ea0 <calloc@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #356]!	; 0x164

00010eac <endgrent@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #348]!	; 0x15c

00010eb8 <fputs_unlocked@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #340]!	; 0x154

00010ec4 <raise@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #332]!	; 0x14c

00010ed0 <getpwnam@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #324]!	; 0x144

00010edc <is_selinux_enabled@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #316]!	; 0x13c

00010ee8 <strcmp@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #308]!	; 0x134

00010ef4 <getpwuid@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #300]!	; 0x12c

00010f00 <fflush@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #292]!	; 0x124

00010f0c <getuid@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #284]!	; 0x11c

00010f18 <free@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #276]!	; 0x114

00010f24 <_exit@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #268]!	; 0x10c

00010f30 <memcpy@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #260]!	; 0x104

00010f3c <mbsinit@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #252]!	; 0xfc

00010f48 <memcmp@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #244]!	; 0xf4

00010f54 <fputc_unlocked@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #236]!	; 0xec

00010f60 <dcgettext@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #228]!	; 0xe4

00010f6c <realloc@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #220]!	; 0xdc

00010f78 <textdomain@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #212]!	; 0xd4

00010f84 <geteuid@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #204]!	; 0xcc

00010f90 <iswprint@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #196]!	; 0xc4

00010f9c <getegid@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #188]!	; 0xbc

00010fa8 <fwrite@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #180]!	; 0xb4

00010fb4 <lseek64@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #172]!	; 0xac

00010fc0 <__ctype_get_mb_cur_max@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #164]!	; 0xa4

00010fcc <getcon@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #156]!	; 0x9c

00010fd8 <__fpending@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #148]!	; 0x94

00010fe4 <mbrtowc@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #140]!	; 0x8c

00010ff0 <error@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #132]!	; 0x84

00010ffc <getenv@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #124]!	; 0x7c

00011008 <malloc@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #116]!	; 0x74

00011014 <__libc_start_main@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #108]!	; 0x6c

00011020 <__freading@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #100]!	; 0x64

0001102c <__gmon_start__@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #92]!	; 0x5c

00011038 <getopt_long@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #84]!	; 0x54

00011044 <__ctype_b_loc@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #76]!	; 0x4c

00011050 <exit@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #94208	; 0x17000
   11058:	ldr	pc, [ip, #68]!	; 0x44

0001105c <strtoul@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #94208	; 0x17000
   11064:	ldr	pc, [ip, #60]!	; 0x3c

00011068 <strlen@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #94208	; 0x17000
   11070:	ldr	pc, [ip, #52]!	; 0x34

00011074 <strchr@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #94208	; 0x17000
   1107c:	ldr	pc, [ip, #44]!	; 0x2c

00011080 <__errno_location@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #94208	; 0x17000
   11088:	ldr	pc, [ip, #36]!	; 0x24

0001108c <__cxa_atexit@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #28]!

00011098 <getgid@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #20]!

000110a4 <getgrouplist@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #94208	; 0x17000
   110ac:	ldr	pc, [ip, #12]!

000110b0 <memset@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #94208	; 0x17000
   110b8:	ldr	pc, [ip, #4]!

000110bc <__printf_chk@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #4092]!	; 0xffc

000110c8 <fileno@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #4084]!	; 0xff4

000110d4 <__fprintf_chk@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #4076]!	; 0xfec

000110e0 <fclose@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110ec <fseeko64@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #4060]!	; 0xfdc

000110f8 <__overflow@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #4052]!	; 0xfd4

00011104 <setlocale@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #4044]!	; 0xfcc

00011110 <endpwent@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #4036]!	; 0xfc4

0001111c <strrchr@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #4028]!	; 0xfbc

00011128 <nl_langinfo@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #90112	; 0x16000
   11130:	ldr	pc, [ip, #4020]!	; 0xfb4

00011134 <getgroups@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #90112	; 0x16000
   1113c:	ldr	pc, [ip, #4012]!	; 0xfac

00011140 <bindtextdomain@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #90112	; 0x16000
   11148:	ldr	pc, [ip, #4004]!	; 0xfa4

0001114c <strncmp@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #90112	; 0x16000
   11154:	ldr	pc, [ip, #3996]!	; 0xf9c

00011158 <abort@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #90112	; 0x16000
   11160:	ldr	pc, [ip, #3988]!	; 0xf94

00011164 <getgrgid@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #90112	; 0x16000
   1116c:	ldr	pc, [ip, #3980]!	; 0xf8c

00011170 <getgrnam@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #90112	; 0x16000
   11178:	ldr	pc, [ip, #3972]!	; 0xf84

0001117c <__assert_fail@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #90112	; 0x16000
   11184:	ldr	pc, [ip, #3964]!	; 0xf7c

Disassembly of section .text:

00011188 <.text>:
   11188:	mov	fp, #0
   1118c:	mov	lr, #0
   11190:	pop	{r1}		; (ldr r1, [sp], #4)
   11194:	mov	r2, sp
   11198:	push	{r2}		; (str r2, [sp, #-4]!)
   1119c:	push	{r0}		; (str r0, [sp, #-4]!)
   111a0:	ldr	ip, [pc, #16]	; 111b8 <__assert_fail@plt+0x3c>
   111a4:	push	{ip}		; (str ip, [sp, #-4]!)
   111a8:	ldr	r0, [pc, #12]	; 111bc <__assert_fail@plt+0x40>
   111ac:	ldr	r3, [pc, #12]	; 111c0 <__assert_fail@plt+0x44>
   111b0:	bl	11014 <__libc_start_main@plt>
   111b4:	bl	11158 <abort@plt>
   111b8:	andeq	r6, r1, r8, lsl #20
   111bc:			; <UNDEFINED> instruction: 0x00011cb4
   111c0:	andeq	r6, r1, r8, lsr #19
   111c4:	ldr	r3, [pc, #20]	; 111e0 <__assert_fail@plt+0x64>
   111c8:	ldr	r2, [pc, #20]	; 111e4 <__assert_fail@plt+0x68>
   111cc:	add	r3, pc, r3
   111d0:	ldr	r2, [r3, r2]
   111d4:	cmp	r2, #0
   111d8:	bxeq	lr
   111dc:	b	1102c <__gmon_start__@plt>
   111e0:	andeq	r6, r1, ip, lsr #28
   111e4:	andeq	r0, r0, r4, lsl #2
   111e8:	ldr	r0, [pc, #24]	; 11208 <__assert_fail@plt+0x8c>
   111ec:	ldr	r3, [pc, #24]	; 1120c <__assert_fail@plt+0x90>
   111f0:	cmp	r3, r0
   111f4:	bxeq	lr
   111f8:	ldr	r3, [pc, #16]	; 11210 <__assert_fail@plt+0x94>
   111fc:	cmp	r3, #0
   11200:	bxeq	lr
   11204:	bx	r3
   11208:	andeq	r8, r2, ip, asr r1
   1120c:	andeq	r8, r2, ip, asr r1
   11210:	andeq	r0, r0, r0
   11214:	ldr	r0, [pc, #36]	; 11240 <__assert_fail@plt+0xc4>
   11218:	ldr	r1, [pc, #36]	; 11244 <__assert_fail@plt+0xc8>
   1121c:	sub	r1, r1, r0
   11220:	asr	r1, r1, #2
   11224:	add	r1, r1, r1, lsr #31
   11228:	asrs	r1, r1, #1
   1122c:	bxeq	lr
   11230:	ldr	r3, [pc, #16]	; 11248 <__assert_fail@plt+0xcc>
   11234:	cmp	r3, #0
   11238:	bxeq	lr
   1123c:	bx	r3
   11240:	andeq	r8, r2, ip, asr r1
   11244:	andeq	r8, r2, ip, asr r1
   11248:	andeq	r0, r0, r0
   1124c:	push	{r4, lr}
   11250:	ldr	r4, [pc, #24]	; 11270 <__assert_fail@plt+0xf4>
   11254:	ldrb	r3, [r4]
   11258:	cmp	r3, #0
   1125c:	popne	{r4, pc}
   11260:	bl	111e8 <__assert_fail@plt+0x6c>
   11264:	mov	r3, #1
   11268:	strb	r3, [r4]
   1126c:	pop	{r4, pc}
   11270:	andeq	r8, r2, r8, ror r1
   11274:	b	11214 <__assert_fail@plt+0x98>
   11278:	str	r4, [sp, #-8]!
   1127c:	str	lr, [sp, #4]
   11280:	movw	r2, #33148	; 0x817c
   11284:	movt	r2, #2
   11288:	ldr	r0, [r0]
   1128c:	mov	r1, #0
   11290:	bl	12864 <__assert_fail@plt+0x16e8>
   11294:	ldr	r4, [sp]
   11298:	add	sp, sp, #4
   1129c:	pop	{pc}		; (ldr pc, [sp], #4)
   112a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   112a4:	strd	r6, [sp, #8]
   112a8:	str	r8, [sp, #16]
   112ac:	str	lr, [sp, #20]
   112b0:	sub	sp, sp, #16
   112b4:	movw	r3, #33148	; 0x817c
   112b8:	movt	r3, #2
   112bc:	ldrb	r3, [r3, #21]
   112c0:	cmp	r3, #0
   112c4:	beq	11410 <__assert_fail@plt+0x294>
   112c8:	movw	r3, #33148	; 0x817c
   112cc:	movt	r3, #2
   112d0:	ldrb	r3, [r3, #22]
   112d4:	cmp	r3, #0
   112d8:	movw	r3, #33148	; 0x817c
   112dc:	movt	r3, #2
   112e0:	ldrne	r0, [r3, #24]
   112e4:	ldreq	r0, [r3, #28]
   112e8:	str	r0, [sp, #12]
   112ec:	movw	r3, #33148	; 0x817c
   112f0:	movt	r3, #2
   112f4:	ldrb	r3, [r3, #32]
   112f8:	cmp	r3, #0
   112fc:	beq	11358 <__assert_fail@plt+0x1dc>
   11300:	bl	10ef4 <getpwuid@plt>
   11304:	cmp	r0, #0
   11308:	beq	11314 <__assert_fail@plt+0x198>
   1130c:	ldr	r0, [r0]
   11310:	b	11360 <__assert_fail@plt+0x1e4>
   11314:	mov	r2, #5
   11318:	movw	r1, #27400	; 0x6b08
   1131c:	movt	r1, #1
   11320:	mov	r0, #0
   11324:	bl	10f60 <dcgettext@plt>
   11328:	mov	r4, r0
   1132c:	add	r0, sp, #12
   11330:	bl	11278 <__assert_fail@plt+0xfc>
   11334:	mov	r3, r0
   11338:	mov	r2, r4
   1133c:	mov	r1, #0
   11340:	mov	r0, r1
   11344:	bl	10ff0 <error@plt>
   11348:	movw	r3, #33040	; 0x8110
   1134c:	movt	r3, #2
   11350:	mov	r2, #0
   11354:	strb	r2, [r3]
   11358:	add	r0, sp, #12
   1135c:	bl	11278 <__assert_fail@plt+0xfc>
   11360:	movw	r3, #33140	; 0x8174
   11364:	movt	r3, #2
   11368:	ldr	r1, [r3]
   1136c:	bl	10eb8 <fputs_unlocked@plt>
   11370:	movw	r3, #33148	; 0x817c
   11374:	movt	r3, #2
   11378:	ldrb	r3, [r3, #45]	; 0x2d
   1137c:	cmp	r3, #0
   11380:	beq	118ac <__assert_fail@plt+0x730>
   11384:	movw	r3, #33148	; 0x817c
   11388:	movt	r3, #2
   1138c:	ldrb	r3, [r3, #44]	; 0x2c
   11390:	cmp	r3, #0
   11394:	beq	118f0 <__assert_fail@plt+0x774>
   11398:	movw	r3, #33148	; 0x817c
   1139c:	movt	r3, #2
   113a0:	ldrb	r3, [r3, #73]	; 0x49
   113a4:	cmp	r3, #0
   113a8:	beq	118f8 <__assert_fail@plt+0x77c>
   113ac:	movw	r3, #33140	; 0x8174
   113b0:	movt	r3, #2
   113b4:	ldr	r0, [r3]
   113b8:	ldr	r3, [r0, #20]
   113bc:	ldr	r2, [r0, #24]
   113c0:	cmp	r3, r2
   113c4:	addcc	r2, r3, #1
   113c8:	strcc	r2, [r0, #20]
   113cc:	movcc	r2, #0
   113d0:	strbcc	r2, [r3]
   113d4:	bcs	118a0 <__assert_fail@plt+0x724>
   113d8:	movw	r3, #33140	; 0x8174
   113dc:	movt	r3, #2
   113e0:	ldr	r0, [r3]
   113e4:	ldr	r3, [r0, #20]
   113e8:	ldr	r2, [r0, #24]
   113ec:	cmp	r3, r2
   113f0:	addcc	r2, r3, #1
   113f4:	strcc	r2, [r0, #20]
   113f8:	movcc	r2, #0
   113fc:	strbcc	r2, [r3]
   11400:	bcc	118d8 <__assert_fail@plt+0x75c>
   11404:	mov	r1, #0
   11408:	bl	110f8 <__overflow@plt>
   1140c:	b	118d8 <__assert_fail@plt+0x75c>
   11410:	mov	r4, r0
   11414:	movw	r3, #33148	; 0x817c
   11418:	movt	r3, #2
   1141c:	ldrb	r3, [r3, #33]	; 0x21
   11420:	cmp	r3, #0
   11424:	beq	11470 <__assert_fail@plt+0x2f4>
   11428:	movw	r3, #33148	; 0x817c
   1142c:	movt	r3, #2
   11430:	ldrb	r3, [r3, #22]
   11434:	cmp	r3, #0
   11438:	movw	r3, #33148	; 0x817c
   1143c:	movt	r3, #2
   11440:	ldrne	r0, [r3, #36]	; 0x24
   11444:	ldreq	r0, [r3, #40]	; 0x28
   11448:	movw	r3, #33148	; 0x817c
   1144c:	movt	r3, #2
   11450:	ldrb	r1, [r3, #32]
   11454:	bl	1244c <__assert_fail@plt+0x12d0>
   11458:	movw	r3, #33040	; 0x8110
   1145c:	movt	r3, #2
   11460:	ldrb	r2, [r3]
   11464:	and	r0, r0, r2
   11468:	strb	r0, [r3]
   1146c:	b	11370 <__assert_fail@plt+0x1f4>
   11470:	movw	r3, #33148	; 0x817c
   11474:	movt	r3, #2
   11478:	ldrb	r3, [r3, #44]	; 0x2c
   1147c:	cmp	r3, #0
   11480:	beq	114d0 <__assert_fail@plt+0x354>
   11484:	movw	r1, #33148	; 0x817c
   11488:	movt	r1, #2
   1148c:	ldrb	r3, [r1, #32]
   11490:	ldrb	r2, [r1, #45]	; 0x2d
   11494:	cmp	r2, #0
   11498:	movne	r2, #0
   1149c:	moveq	r2, #32
   114a0:	str	r2, [sp, #4]
   114a4:	str	r3, [sp]
   114a8:	ldr	r3, [r1, #40]	; 0x28
   114ac:	ldr	r2, [r1, #36]	; 0x24
   114b0:	ldr	r1, [r1, #24]
   114b4:	bl	124e4 <__assert_fail@plt+0x1368>
   114b8:	movw	r3, #33040	; 0x8110
   114bc:	movt	r3, #2
   114c0:	ldrb	r2, [r3]
   114c4:	and	r0, r0, r2
   114c8:	strb	r0, [r3]
   114cc:	b	11370 <__assert_fail@plt+0x1f4>
   114d0:	movw	r3, #33148	; 0x817c
   114d4:	movt	r3, #2
   114d8:	ldrb	r3, [r3, #46]	; 0x2e
   114dc:	cmp	r3, #0
   114e0:	beq	11504 <__assert_fail@plt+0x388>
   114e4:	movw	r2, #33140	; 0x8174
   114e8:	movt	r2, #2
   114ec:	movw	r3, #33148	; 0x817c
   114f0:	movt	r3, #2
   114f4:	ldr	r1, [r2]
   114f8:	ldr	r0, [r3, #48]	; 0x30
   114fc:	bl	10eb8 <fputs_unlocked@plt>
   11500:	b	11370 <__assert_fail@plt+0x1f4>
   11504:	mov	r2, #5
   11508:	movw	r1, #27432	; 0x6b28
   1150c:	movt	r1, #1
   11510:	mov	r0, #0
   11514:	bl	10f60 <dcgettext@plt>
   11518:	mov	r6, r0
   1151c:	movw	r5, #33148	; 0x817c
   11520:	movt	r5, #2
   11524:	add	r0, r5, #24
   11528:	bl	11278 <__assert_fail@plt+0xfc>
   1152c:	mov	r2, r0
   11530:	mov	r1, r6
   11534:	mov	r0, #1
   11538:	bl	110bc <__printf_chk@plt>
   1153c:	ldr	r0, [r5, #24]
   11540:	bl	10ef4 <getpwuid@plt>
   11544:	subs	r6, r0, #0
   11548:	beq	11560 <__assert_fail@plt+0x3e4>
   1154c:	ldr	r2, [r6]
   11550:	movw	r1, #27440	; 0x6b30
   11554:	movt	r1, #1
   11558:	mov	r0, #1
   1155c:	bl	110bc <__printf_chk@plt>
   11560:	mov	r2, #5
   11564:	movw	r1, #27448	; 0x6b38
   11568:	movt	r1, #1
   1156c:	mov	r0, #0
   11570:	bl	10f60 <dcgettext@plt>
   11574:	mov	r7, r0
   11578:	movw	r5, #33148	; 0x817c
   1157c:	movt	r5, #2
   11580:	add	r2, r5, #52	; 0x34
   11584:	ldr	r0, [r5, #36]	; 0x24
   11588:	mov	r1, #0
   1158c:	bl	12864 <__assert_fail@plt+0x16e8>
   11590:	mov	r2, r0
   11594:	mov	r1, r7
   11598:	mov	r0, #1
   1159c:	bl	110bc <__printf_chk@plt>
   115a0:	ldr	r0, [r5, #36]	; 0x24
   115a4:	bl	11164 <getgrgid@plt>
   115a8:	cmp	r0, #0
   115ac:	beq	115c4 <__assert_fail@plt+0x448>
   115b0:	ldr	r2, [r0]
   115b4:	movw	r1, #27440	; 0x6b30
   115b8:	movt	r1, #1
   115bc:	mov	r0, #1
   115c0:	bl	110bc <__printf_chk@plt>
   115c4:	movw	r3, #33148	; 0x817c
   115c8:	movt	r3, #2
   115cc:	ldr	r2, [r3, #28]
   115d0:	ldr	r3, [r3, #24]
   115d4:	cmp	r2, r3
   115d8:	bne	11670 <__assert_fail@plt+0x4f4>
   115dc:	movw	r3, #33148	; 0x817c
   115e0:	movt	r3, #2
   115e4:	ldr	r2, [r3, #40]	; 0x28
   115e8:	ldr	r3, [r3, #36]	; 0x24
   115ec:	cmp	r2, r3
   115f0:	bne	116d0 <__assert_fail@plt+0x554>
   115f4:	cmp	r4, #0
   115f8:	beq	11738 <__assert_fail@plt+0x5bc>
   115fc:	cmp	r6, #0
   11600:	mvneq	r1, #0
   11604:	ldrne	r1, [r6, #12]
   11608:	add	r2, sp, #12
   1160c:	mov	r0, r4
   11610:	bl	15a80 <__assert_fail@plt+0x4904>
   11614:	subs	r6, r0, #0
   11618:	blt	11788 <__assert_fail@plt+0x60c>
   1161c:	cmp	r6, #0
   11620:	bgt	117d8 <__assert_fail@plt+0x65c>
   11624:	ldr	r0, [sp, #12]
   11628:	bl	12804 <__assert_fail@plt+0x1688>
   1162c:	movw	r3, #33148	; 0x817c
   11630:	movt	r3, #2
   11634:	ldr	r3, [r3, #48]	; 0x30
   11638:	cmp	r3, #0
   1163c:	beq	11370 <__assert_fail@plt+0x1f4>
   11640:	mov	r2, #5
   11644:	movw	r1, #27576	; 0x6bb8
   11648:	movt	r1, #1
   1164c:	mov	r0, #0
   11650:	bl	10f60 <dcgettext@plt>
   11654:	movw	r3, #33148	; 0x817c
   11658:	movt	r3, #2
   1165c:	ldr	r2, [r3, #48]	; 0x30
   11660:	mov	r1, r0
   11664:	mov	r0, #1
   11668:	bl	110bc <__printf_chk@plt>
   1166c:	b	11370 <__assert_fail@plt+0x1f4>
   11670:	mov	r2, #5
   11674:	movw	r1, #27456	; 0x6b40
   11678:	movt	r1, #1
   1167c:	mov	r0, #0
   11680:	bl	10f60 <dcgettext@plt>
   11684:	mov	r6, r0
   11688:	movw	r5, #33148	; 0x817c
   1168c:	movt	r5, #2
   11690:	add	r0, r5, #28
   11694:	bl	11278 <__assert_fail@plt+0xfc>
   11698:	mov	r2, r0
   1169c:	mov	r1, r6
   116a0:	mov	r0, #1
   116a4:	bl	110bc <__printf_chk@plt>
   116a8:	ldr	r0, [r5, #28]
   116ac:	bl	10ef4 <getpwuid@plt>
   116b0:	subs	r6, r0, #0
   116b4:	beq	115dc <__assert_fail@plt+0x460>
   116b8:	ldr	r2, [r6]
   116bc:	movw	r1, #27440	; 0x6b30
   116c0:	movt	r1, #1
   116c4:	mov	r0, #1
   116c8:	bl	110bc <__printf_chk@plt>
   116cc:	b	115dc <__assert_fail@plt+0x460>
   116d0:	mov	r2, #5
   116d4:	movw	r1, #27468	; 0x6b4c
   116d8:	movt	r1, #1
   116dc:	mov	r0, #0
   116e0:	bl	10f60 <dcgettext@plt>
   116e4:	mov	r7, r0
   116e8:	movw	r5, #33148	; 0x817c
   116ec:	movt	r5, #2
   116f0:	add	r2, r5, #52	; 0x34
   116f4:	ldr	r0, [r5, #40]	; 0x28
   116f8:	mov	r1, #0
   116fc:	bl	12864 <__assert_fail@plt+0x16e8>
   11700:	mov	r2, r0
   11704:	mov	r1, r7
   11708:	mov	r0, #1
   1170c:	bl	110bc <__printf_chk@plt>
   11710:	ldr	r0, [r5, #40]	; 0x28
   11714:	bl	11164 <getgrgid@plt>
   11718:	cmp	r0, #0
   1171c:	beq	115f4 <__assert_fail@plt+0x478>
   11720:	ldr	r2, [r0]
   11724:	movw	r1, #27440	; 0x6b30
   11728:	movt	r1, #1
   1172c:	mov	r0, #1
   11730:	bl	110bc <__printf_chk@plt>
   11734:	b	115f4 <__assert_fail@plt+0x478>
   11738:	movw	r3, #33148	; 0x817c
   1173c:	movt	r3, #2
   11740:	add	r2, sp, #12
   11744:	ldr	r1, [r3, #40]	; 0x28
   11748:	mov	r0, #0
   1174c:	bl	15a80 <__assert_fail@plt+0x4904>
   11750:	subs	r6, r0, #0
   11754:	bge	1161c <__assert_fail@plt+0x4a0>
   11758:	bl	11080 <__errno_location@plt>
   1175c:	ldr	r4, [r0]
   11760:	mov	r2, #5
   11764:	movw	r1, #27516	; 0x6b7c
   11768:	movt	r1, #1
   1176c:	mov	r0, #0
   11770:	bl	10f60 <dcgettext@plt>
   11774:	mov	r2, r0
   11778:	mov	r1, r4
   1177c:	mov	r0, #0
   11780:	bl	10ff0 <error@plt>
   11784:	b	117c4 <__assert_fail@plt+0x648>
   11788:	bl	11080 <__errno_location@plt>
   1178c:	ldr	r5, [r0]
   11790:	mov	r2, #5
   11794:	movw	r1, #27480	; 0x6b58
   11798:	movt	r1, #1
   1179c:	mov	r0, #0
   117a0:	bl	10f60 <dcgettext@plt>
   117a4:	mov	r6, r0
   117a8:	mov	r0, r4
   117ac:	bl	14bec <__assert_fail@plt+0x3a70>
   117b0:	mov	r3, r0
   117b4:	mov	r2, r6
   117b8:	mov	r1, r5
   117bc:	mov	r0, #0
   117c0:	bl	10ff0 <error@plt>
   117c4:	movw	r3, #33040	; 0x8110
   117c8:	movt	r3, #2
   117cc:	mov	r2, #0
   117d0:	strb	r2, [r3]
   117d4:	b	11370 <__assert_fail@plt+0x1f4>
   117d8:	mov	r2, #5
   117dc:	movw	r1, #27564	; 0x6bac
   117e0:	movt	r1, #1
   117e4:	mov	r0, #0
   117e8:	bl	10f60 <dcgettext@plt>
   117ec:	movw	r3, #33140	; 0x8174
   117f0:	movt	r3, #2
   117f4:	ldr	r1, [r3]
   117f8:	bl	10eb8 <fputs_unlocked@plt>
   117fc:	mov	r4, #0
   11800:	ldr	r7, [pc, #256]	; 11908 <__assert_fail@plt+0x78c>
   11804:	movw	r5, #33140	; 0x8174
   11808:	movt	r5, #2
   1180c:	movw	r8, #27440	; 0x6b30
   11810:	movt	r8, #1
   11814:	b	1185c <__assert_fail@plt+0x6e0>
   11818:	mov	r1, #44	; 0x2c
   1181c:	bl	110f8 <__overflow@plt>
   11820:	b	1185c <__assert_fail@plt+0x6e0>
   11824:	add	r4, r4, #1
   11828:	cmp	r4, r6
   1182c:	beq	11624 <__assert_fail@plt+0x4a8>
   11830:	cmp	r4, #0
   11834:	ble	1185c <__assert_fail@plt+0x6e0>
   11838:	ldr	r0, [r5]
   1183c:	ldr	r3, [r0, #20]
   11840:	ldr	r2, [r0, #24]
   11844:	cmp	r3, r2
   11848:	addcc	r2, r3, #1
   1184c:	strcc	r2, [r0, #20]
   11850:	movcc	r2, #44	; 0x2c
   11854:	strbcc	r2, [r3]
   11858:	bcs	11818 <__assert_fail@plt+0x69c>
   1185c:	mov	r2, r7
   11860:	ldr	r3, [sp, #12]
   11864:	ldr	r0, [r3, r4, lsl #2]
   11868:	mov	r1, #0
   1186c:	bl	12864 <__assert_fail@plt+0x16e8>
   11870:	ldr	r1, [r5]
   11874:	bl	10eb8 <fputs_unlocked@plt>
   11878:	ldr	r3, [sp, #12]
   1187c:	ldr	r0, [r3, r4, lsl #2]
   11880:	bl	11164 <getgrgid@plt>
   11884:	cmp	r0, #0
   11888:	beq	11824 <__assert_fail@plt+0x6a8>
   1188c:	ldr	r2, [r0]
   11890:	mov	r1, r8
   11894:	mov	r0, #1
   11898:	bl	110bc <__printf_chk@plt>
   1189c:	b	11824 <__assert_fail@plt+0x6a8>
   118a0:	mov	r1, #0
   118a4:	bl	110f8 <__overflow@plt>
   118a8:	b	113d8 <__assert_fail@plt+0x25c>
   118ac:	mov	r1, #10
   118b0:	movw	r3, #33140	; 0x8174
   118b4:	movt	r3, #2
   118b8:	ldr	r0, [r3]
   118bc:	ldr	r3, [r0, #20]
   118c0:	ldr	r2, [r0, #24]
   118c4:	cmp	r3, r2
   118c8:	addcc	r2, r3, #1
   118cc:	strcc	r2, [r0, #20]
   118d0:	strbcc	r1, [r3]
   118d4:	bcs	11900 <__assert_fail@plt+0x784>
   118d8:	add	sp, sp, #16
   118dc:	ldrd	r4, [sp]
   118e0:	ldrd	r6, [sp, #8]
   118e4:	ldr	r8, [sp, #16]
   118e8:	add	sp, sp, #20
   118ec:	pop	{pc}		; (ldr pc, [sp], #4)
   118f0:	mov	r1, #0
   118f4:	b	118b0 <__assert_fail@plt+0x734>
   118f8:	mov	r1, #0
   118fc:	b	118b0 <__assert_fail@plt+0x734>
   11900:	bl	110f8 <__overflow@plt>
   11904:	b	118d8 <__assert_fail@plt+0x75c>
   11908:			; <UNDEFINED> instruction: 0x000281b0
   1190c:	push	{lr}		; (str lr, [sp, #-4]!)
   11910:	sub	sp, sp, #60	; 0x3c
   11914:	subs	r4, r0, #0
   11918:	beq	11960 <__assert_fail@plt+0x7e4>
   1191c:	movw	r3, #33136	; 0x8170
   11920:	movt	r3, #2
   11924:	ldr	r5, [r3]
   11928:	mov	r2, #5
   1192c:	movw	r1, #27592	; 0x6bc8
   11930:	movt	r1, #1
   11934:	mov	r0, #0
   11938:	bl	10f60 <dcgettext@plt>
   1193c:	movw	r3, #33256	; 0x81e8
   11940:	movt	r3, #2
   11944:	ldr	r3, [r3]
   11948:	mov	r2, r0
   1194c:	mov	r1, #1
   11950:	mov	r0, r5
   11954:	bl	110d4 <__fprintf_chk@plt>
   11958:	mov	r0, r4
   1195c:	bl	11050 <exit@plt>
   11960:	mov	r2, #5
   11964:	movw	r1, #27632	; 0x6bf0
   11968:	movt	r1, #1
   1196c:	mov	r0, #0
   11970:	bl	10f60 <dcgettext@plt>
   11974:	movw	r3, #33256	; 0x81e8
   11978:	movt	r3, #2
   1197c:	ldr	r2, [r3]
   11980:	mov	r1, r0
   11984:	mov	r0, #1
   11988:	bl	110bc <__printf_chk@plt>
   1198c:	mov	r2, #5
   11990:	movw	r1, #27668	; 0x6c14
   11994:	movt	r1, #1
   11998:	mov	r0, #0
   1199c:	bl	10f60 <dcgettext@plt>
   119a0:	movw	r5, #33140	; 0x8174
   119a4:	movt	r5, #2
   119a8:	ldr	r1, [r5]
   119ac:	bl	10eb8 <fputs_unlocked@plt>
   119b0:	mov	r2, #5
   119b4:	movw	r1, #27776	; 0x6c80
   119b8:	movt	r1, #1
   119bc:	mov	r0, #0
   119c0:	bl	10f60 <dcgettext@plt>
   119c4:	ldr	r1, [r5]
   119c8:	bl	10eb8 <fputs_unlocked@plt>
   119cc:	mov	r2, #5
   119d0:	movw	r1, #28300	; 0x6e8c
   119d4:	movt	r1, #1
   119d8:	mov	r0, #0
   119dc:	bl	10f60 <dcgettext@plt>
   119e0:	ldr	r1, [r5]
   119e4:	bl	10eb8 <fputs_unlocked@plt>
   119e8:	mov	r2, #5
   119ec:	movw	r1, #28348	; 0x6ebc
   119f0:	movt	r1, #1
   119f4:	mov	r0, #0
   119f8:	bl	10f60 <dcgettext@plt>
   119fc:	ldr	r1, [r5]
   11a00:	bl	10eb8 <fputs_unlocked@plt>
   11a04:	mov	r2, #5
   11a08:	movw	r1, #28404	; 0x6ef4
   11a0c:	movt	r1, #1
   11a10:	mov	r0, #0
   11a14:	bl	10f60 <dcgettext@plt>
   11a18:	ldr	r1, [r5]
   11a1c:	bl	10eb8 <fputs_unlocked@plt>
   11a20:	movw	r0, #27184	; 0x6a30
   11a24:	movt	r0, #1
   11a28:	ldr	r1, [r0]
   11a2c:	ldr	r3, [r0, #4]
   11a30:	str	r1, [sp]
   11a34:	str	r3, [sp, #4]
   11a38:	ldrd	r2, [r0, #8]
   11a3c:	strd	r2, [sp, #8]
   11a40:	ldrd	r2, [r0, #16]
   11a44:	strd	r2, [sp, #16]
   11a48:	ldrd	r2, [r0, #24]
   11a4c:	strd	r2, [sp, #24]
   11a50:	ldrd	r2, [r0, #32]
   11a54:	strd	r2, [sp, #32]
   11a58:	ldrd	r2, [r0, #40]	; 0x28
   11a5c:	strd	r2, [sp, #40]	; 0x28
   11a60:	ldrd	r2, [r0, #48]	; 0x30
   11a64:	strd	r2, [sp, #48]	; 0x30
   11a68:	cmp	r1, #0
   11a6c:	moveq	r5, sp
   11a70:	beq	11a9c <__assert_fail@plt+0x920>
   11a74:	mov	r5, sp
   11a78:	movw	r6, #27588	; 0x6bc4
   11a7c:	movt	r6, #1
   11a80:	mov	r0, r6
   11a84:	bl	10ee8 <strcmp@plt>
   11a88:	cmp	r0, #0
   11a8c:	beq	11a9c <__assert_fail@plt+0x920>
   11a90:	ldr	r1, [r5, #8]!
   11a94:	cmp	r1, #0
   11a98:	bne	11a80 <__assert_fail@plt+0x904>
   11a9c:	ldr	r5, [r5, #4]
   11aa0:	cmp	r5, #0
   11aa4:	beq	11c00 <__assert_fail@plt+0xa84>
   11aa8:	mov	r2, #5
   11aac:	movw	r1, #28476	; 0x6f3c
   11ab0:	movt	r1, #1
   11ab4:	mov	r0, #0
   11ab8:	bl	10f60 <dcgettext@plt>
   11abc:	movw	r3, #28500	; 0x6f54
   11ac0:	movt	r3, #1
   11ac4:	movw	r2, #28540	; 0x6f7c
   11ac8:	movt	r2, #1
   11acc:	mov	r1, r0
   11ad0:	mov	r0, #1
   11ad4:	bl	110bc <__printf_chk@plt>
   11ad8:	mov	r1, #0
   11adc:	mov	r0, #5
   11ae0:	bl	11104 <setlocale@plt>
   11ae4:	cmp	r0, #0
   11ae8:	beq	11b04 <__assert_fail@plt+0x988>
   11aec:	mov	r2, #3
   11af0:	movw	r1, #28556	; 0x6f8c
   11af4:	movt	r1, #1
   11af8:	bl	1114c <strncmp@plt>
   11afc:	cmp	r0, #0
   11b00:	bne	11b80 <__assert_fail@plt+0xa04>
   11b04:	mov	r2, #5
   11b08:	movw	r1, #28632	; 0x6fd8
   11b0c:	movt	r1, #1
   11b10:	mov	r0, #0
   11b14:	bl	10f60 <dcgettext@plt>
   11b18:	movw	r6, #27588	; 0x6bc4
   11b1c:	movt	r6, #1
   11b20:	mov	r3, r6
   11b24:	movw	r2, #28500	; 0x6f54
   11b28:	movt	r2, #1
   11b2c:	mov	r1, r0
   11b30:	mov	r0, #1
   11b34:	bl	110bc <__printf_chk@plt>
   11b38:	mov	r2, #5
   11b3c:	movw	r1, #28660	; 0x6ff4
   11b40:	movt	r1, #1
   11b44:	mov	r0, #0
   11b48:	bl	10f60 <dcgettext@plt>
   11b4c:	mov	r1, r0
   11b50:	movw	r2, #29204	; 0x7214
   11b54:	movt	r2, #1
   11b58:	movw	r3, #27664	; 0x6c10
   11b5c:	movt	r3, #1
   11b60:	cmp	r5, r6
   11b64:	moveq	r3, r2
   11b68:	mov	r2, r5
   11b6c:	mov	r0, #1
   11b70:	bl	110bc <__printf_chk@plt>
   11b74:	b	11958 <__assert_fail@plt+0x7dc>
   11b78:	movw	r5, #27588	; 0x6bc4
   11b7c:	movt	r5, #1
   11b80:	mov	r2, #5
   11b84:	movw	r1, #28560	; 0x6f90
   11b88:	movt	r1, #1
   11b8c:	mov	r0, #0
   11b90:	bl	10f60 <dcgettext@plt>
   11b94:	movw	r3, #33140	; 0x8174
   11b98:	movt	r3, #2
   11b9c:	ldr	r1, [r3]
   11ba0:	bl	10eb8 <fputs_unlocked@plt>
   11ba4:	b	11b04 <__assert_fail@plt+0x988>
   11ba8:	mov	r2, #5
   11bac:	movw	r1, #28632	; 0x6fd8
   11bb0:	movt	r1, #1
   11bb4:	mov	r0, #0
   11bb8:	bl	10f60 <dcgettext@plt>
   11bbc:	movw	r5, #27588	; 0x6bc4
   11bc0:	movt	r5, #1
   11bc4:	mov	r3, r5
   11bc8:	movw	r2, #28500	; 0x6f54
   11bcc:	movt	r2, #1
   11bd0:	mov	r1, r0
   11bd4:	mov	r0, #1
   11bd8:	bl	110bc <__printf_chk@plt>
   11bdc:	mov	r2, #5
   11be0:	movw	r1, #28660	; 0x6ff4
   11be4:	movt	r1, #1
   11be8:	mov	r0, #0
   11bec:	bl	10f60 <dcgettext@plt>
   11bf0:	mov	r1, r0
   11bf4:	movw	r3, #29204	; 0x7214
   11bf8:	movt	r3, #1
   11bfc:	b	11b68 <__assert_fail@plt+0x9ec>
   11c00:	mov	r2, #5
   11c04:	movw	r1, #28476	; 0x6f3c
   11c08:	movt	r1, #1
   11c0c:	mov	r0, #0
   11c10:	bl	10f60 <dcgettext@plt>
   11c14:	movw	r3, #28500	; 0x6f54
   11c18:	movt	r3, #1
   11c1c:	movw	r2, #28540	; 0x6f7c
   11c20:	movt	r2, #1
   11c24:	mov	r1, r0
   11c28:	mov	r0, #1
   11c2c:	bl	110bc <__printf_chk@plt>
   11c30:	mov	r1, #0
   11c34:	mov	r0, #5
   11c38:	bl	11104 <setlocale@plt>
   11c3c:	cmp	r0, #0
   11c40:	beq	11ba8 <__assert_fail@plt+0xa2c>
   11c44:	mov	r2, #3
   11c48:	movw	r1, #28556	; 0x6f8c
   11c4c:	movt	r1, #1
   11c50:	bl	1114c <strncmp@plt>
   11c54:	cmp	r0, #0
   11c58:	bne	11b78 <__assert_fail@plt+0x9fc>
   11c5c:	mov	r2, #5
   11c60:	movw	r1, #28632	; 0x6fd8
   11c64:	movt	r1, #1
   11c68:	mov	r0, #0
   11c6c:	bl	10f60 <dcgettext@plt>
   11c70:	movw	r5, #27588	; 0x6bc4
   11c74:	movt	r5, #1
   11c78:	mov	r3, r5
   11c7c:	movw	r2, #28500	; 0x6f54
   11c80:	movt	r2, #1
   11c84:	mov	r1, r0
   11c88:	mov	r0, #1
   11c8c:	bl	110bc <__printf_chk@plt>
   11c90:	mov	r2, #5
   11c94:	movw	r1, #28660	; 0x6ff4
   11c98:	movt	r1, #1
   11c9c:	mov	r0, #0
   11ca0:	bl	10f60 <dcgettext@plt>
   11ca4:	mov	r1, r0
   11ca8:	movw	r3, #29204	; 0x7214
   11cac:	movt	r3, #1
   11cb0:	b	11b68 <__assert_fail@plt+0x9ec>
   11cb4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11cb8:	strd	r6, [sp, #8]
   11cbc:	strd	r8, [sp, #16]
   11cc0:	str	sl, [sp, #24]
   11cc4:	str	lr, [sp, #28]
   11cc8:	sub	sp, sp, #16
   11ccc:	mov	r7, r0
   11cd0:	mov	r5, r1
   11cd4:	bl	10edc <is_selinux_enabled@plt>
   11cd8:	mov	sl, r0
   11cdc:	ldr	r0, [r5]
   11ce0:	bl	128f0 <__assert_fail@plt+0x1774>
   11ce4:	movw	r1, #27664	; 0x6c10
   11ce8:	movt	r1, #1
   11cec:	mov	r0, #6
   11cf0:	bl	11104 <setlocale@plt>
   11cf4:	movw	r4, #28544	; 0x6f80
   11cf8:	movt	r4, #1
   11cfc:	movw	r1, #28712	; 0x7028
   11d00:	movt	r1, #1
   11d04:	mov	r0, r4
   11d08:	bl	11140 <bindtextdomain@plt>
   11d0c:	mov	r0, r4
   11d10:	bl	10f78 <textdomain@plt>
   11d14:	movw	r0, #9972	; 0x26f4
   11d18:	movt	r0, #1
   11d1c:	bl	16a0c <__assert_fail@plt+0x5890>
   11d20:	ldr	r9, [pc, #1820]	; 12444 <__assert_fail@plt+0x12c8>
   11d24:	movw	r6, #28824	; 0x7098
   11d28:	movt	r6, #1
   11d2c:	movw	r8, #33148	; 0x817c
   11d30:	movt	r8, #2
   11d34:	mov	r4, #0
   11d38:	str	r4, [sp]
   11d3c:	mov	r3, r9
   11d40:	mov	r2, r6
   11d44:	mov	r1, r5
   11d48:	mov	r0, r7
   11d4c:	bl	11038 <getopt_long@plt>
   11d50:	cmn	r0, #1
   11d54:	beq	11e98 <__assert_fail@plt+0xd1c>
   11d58:	cmp	r0, #97	; 0x61
   11d5c:	beq	11d38 <__assert_fail@plt+0xbbc>
   11d60:	ble	11d8c <__assert_fail@plt+0xc10>
   11d64:	cmp	r0, #114	; 0x72
   11d68:	beq	11e64 <__assert_fail@plt+0xce8>
   11d6c:	bgt	11e18 <__assert_fail@plt+0xc9c>
   11d70:	cmp	r0, #103	; 0x67
   11d74:	beq	11e58 <__assert_fail@plt+0xcdc>
   11d78:	cmp	r0, #110	; 0x6e
   11d7c:	bne	11e90 <__assert_fail@plt+0xd14>
   11d80:	mov	r3, #1
   11d84:	strb	r3, [r8, #32]
   11d88:	b	11d34 <__assert_fail@plt+0xbb8>
   11d8c:	cmn	r0, #2
   11d90:	beq	11e88 <__assert_fail@plt+0xd0c>
   11d94:	ble	11dbc <__assert_fail@plt+0xc40>
   11d98:	cmp	r0, #71	; 0x47
   11d9c:	beq	11e7c <__assert_fail@plt+0xd00>
   11da0:	cmp	r0, #90	; 0x5a
   11da4:	bne	11e90 <__assert_fail@plt+0xd14>
   11da8:	cmp	sl, #0
   11dac:	ble	11e34 <__assert_fail@plt+0xcb8>
   11db0:	mov	r3, #1
   11db4:	strb	r3, [r8, #46]	; 0x2e
   11db8:	b	11d34 <__assert_fail@plt+0xbb8>
   11dbc:	cmn	r0, #3
   11dc0:	bne	11e90 <__assert_fail@plt+0xd14>
   11dc4:	movw	r3, #33044	; 0x8114
   11dc8:	movt	r3, #2
   11dcc:	movw	r0, #33140	; 0x8174
   11dd0:	movt	r0, #2
   11dd4:	mov	r4, #0
   11dd8:	str	r4, [sp, #8]
   11ddc:	movw	r2, #28792	; 0x7078
   11de0:	movt	r2, #1
   11de4:	str	r2, [sp, #4]
   11de8:	movw	r2, #28808	; 0x7088
   11dec:	movt	r2, #1
   11df0:	str	r2, [sp]
   11df4:	ldr	r3, [r3]
   11df8:	movw	r2, #28540	; 0x6f7c
   11dfc:	movt	r2, #1
   11e00:	movw	r1, #27588	; 0x6bc4
   11e04:	movt	r1, #1
   11e08:	ldr	r0, [r0]
   11e0c:	bl	154d0 <__assert_fail@plt+0x4354>
   11e10:	mov	r0, r4
   11e14:	bl	11050 <exit@plt>
   11e18:	cmp	r0, #117	; 0x75
   11e1c:	beq	11e70 <__assert_fail@plt+0xcf4>
   11e20:	cmp	r0, #122	; 0x7a
   11e24:	bne	11e90 <__assert_fail@plt+0xd14>
   11e28:	mov	r3, #1
   11e2c:	strb	r3, [r8, #45]	; 0x2d
   11e30:	b	11d34 <__assert_fail@plt+0xbb8>
   11e34:	mov	r2, #5
   11e38:	movw	r1, #28736	; 0x7040
   11e3c:	movt	r1, #1
   11e40:	mov	r0, #0
   11e44:	bl	10f60 <dcgettext@plt>
   11e48:	mov	r2, r0
   11e4c:	mov	r1, #0
   11e50:	mov	r0, #1
   11e54:	bl	10ff0 <error@plt>
   11e58:	mov	r3, #1
   11e5c:	strb	r3, [r8, #33]	; 0x21
   11e60:	b	11d34 <__assert_fail@plt+0xbb8>
   11e64:	mov	r3, #1
   11e68:	strb	r3, [r8, #22]
   11e6c:	b	11d34 <__assert_fail@plt+0xbb8>
   11e70:	mov	r3, #1
   11e74:	strb	r3, [r8, #21]
   11e78:	b	11d34 <__assert_fail@plt+0xbb8>
   11e7c:	mov	r3, #1
   11e80:	strb	r3, [r8, #44]	; 0x2c
   11e84:	b	11d34 <__assert_fail@plt+0xbb8>
   11e88:	mov	r0, #0
   11e8c:	bl	1190c <__assert_fail@plt+0x790>
   11e90:	mov	r0, #1
   11e94:	bl	1190c <__assert_fail@plt+0x790>
   11e98:	movw	r3, #33128	; 0x8168
   11e9c:	movt	r3, #2
   11ea0:	ldr	r1, [r3]
   11ea4:	subs	r7, r7, r1
   11ea8:	beq	11ec0 <__assert_fail@plt+0xd44>
   11eac:	movw	r3, #33148	; 0x817c
   11eb0:	movt	r3, #2
   11eb4:	ldrb	r3, [r3, #46]	; 0x2e
   11eb8:	cmp	r3, #0
   11ebc:	bne	11f80 <__assert_fail@plt+0xe04>
   11ec0:	movw	r2, #33148	; 0x817c
   11ec4:	movt	r2, #2
   11ec8:	ldrb	r0, [r2, #21]
   11ecc:	ldrb	lr, [r2, #33]	; 0x21
   11ed0:	ldrb	r3, [r2, #44]	; 0x2c
   11ed4:	ldrb	ip, [r2, #46]	; 0x2e
   11ed8:	add	r2, r0, lr
   11edc:	add	r2, r2, r3
   11ee0:	add	r2, r2, ip
   11ee4:	cmp	r2, #1
   11ee8:	bgt	11fa4 <__assert_fail@plt+0xe28>
   11eec:	orr	r0, r0, lr
   11ef0:	orr	r3, r3, r0
   11ef4:	orr	r3, ip, r3
   11ef8:	eors	r3, r3, #1
   11efc:	beq	12010 <__assert_fail@plt+0xe94>
   11f00:	movw	r3, #33148	; 0x817c
   11f04:	movt	r3, #2
   11f08:	ldrb	r3, [r3, #22]
   11f0c:	cmp	r3, #0
   11f10:	bne	11fc8 <__assert_fail@plt+0xe4c>
   11f14:	movw	r3, #33148	; 0x817c
   11f18:	movt	r3, #2
   11f1c:	ldrb	r3, [r3, #32]
   11f20:	cmp	r3, #0
   11f24:	bne	11fc8 <__assert_fail@plt+0xe4c>
   11f28:	movw	r3, #33148	; 0x817c
   11f2c:	movt	r3, #2
   11f30:	ldrb	r3, [r3, #45]	; 0x2d
   11f34:	cmp	r3, #0
   11f38:	bne	11fec <__assert_fail@plt+0xe70>
   11f3c:	cmp	r7, #0
   11f40:	beq	12194 <__assert_fail@plt+0x1018>
   11f44:	movw	r3, #33148	; 0x817c
   11f48:	movt	r3, #2
   11f4c:	cmp	r7, #1
   11f50:	movls	r2, #0
   11f54:	movhi	r2, #1
   11f58:	strb	r2, [r3, #73]	; 0x49
   11f5c:	mov	r2, r1
   11f60:	add	r6, r1, r7
   11f64:	cmp	r1, r6
   11f68:	bcs	12168 <__assert_fail@plt+0xfec>
   11f6c:	movw	r4, #33128	; 0x8168
   11f70:	movt	r4, #2
   11f74:	mov	r7, r3
   11f78:	add	r8, r3, #28
   11f7c:	b	122d4 <__assert_fail@plt+0x1158>
   11f80:	mov	r2, #5
   11f84:	movw	r1, #28836	; 0x70a4
   11f88:	movt	r1, #1
   11f8c:	mov	r0, #0
   11f90:	bl	10f60 <dcgettext@plt>
   11f94:	mov	r2, r0
   11f98:	mov	r1, #0
   11f9c:	mov	r0, #1
   11fa0:	bl	10ff0 <error@plt>
   11fa4:	mov	r2, #5
   11fa8:	movw	r1, #28888	; 0x70d8
   11fac:	movt	r1, #1
   11fb0:	mov	r0, #0
   11fb4:	bl	10f60 <dcgettext@plt>
   11fb8:	mov	r2, r0
   11fbc:	mov	r1, #0
   11fc0:	mov	r0, #1
   11fc4:	bl	10ff0 <error@plt>
   11fc8:	mov	r2, #5
   11fcc:	movw	r1, #28932	; 0x7104
   11fd0:	movt	r1, #1
   11fd4:	mov	r0, #0
   11fd8:	bl	10f60 <dcgettext@plt>
   11fdc:	mov	r2, r0
   11fe0:	mov	r1, #0
   11fe4:	mov	r0, #1
   11fe8:	bl	10ff0 <error@plt>
   11fec:	mov	r2, #5
   11ff0:	movw	r1, #28988	; 0x713c
   11ff4:	movt	r1, #1
   11ff8:	mov	r0, #0
   11ffc:	bl	10f60 <dcgettext@plt>
   12000:	mov	r2, r0
   12004:	mov	r1, #0
   12008:	mov	r0, #1
   1200c:	bl	10ff0 <error@plt>
   12010:	cmp	r7, #0
   12014:	bne	11f44 <__assert_fail@plt+0xdc8>
   12018:	cmp	ip, #0
   1201c:	beq	12070 <__assert_fail@plt+0xef4>
   12020:	cmp	sl, #0
   12024:	ble	12078 <__assert_fail@plt+0xefc>
   12028:	ldr	r0, [pc, #1048]	; 12448 <__assert_fail@plt+0x12cc>
   1202c:	bl	10fcc <getcon@plt>
   12030:	cmp	r0, #0
   12034:	beq	12078 <__assert_fail@plt+0xefc>
   12038:	movw	r3, #33148	; 0x817c
   1203c:	movt	r3, #2
   12040:	ldrb	r3, [r3, #46]	; 0x2e
   12044:	cmp	r3, #0
   12048:	beq	12078 <__assert_fail@plt+0xefc>
   1204c:	mov	r2, #5
   12050:	movw	r1, #29052	; 0x717c
   12054:	movt	r1, #1
   12058:	mov	r0, #0
   1205c:	bl	10f60 <dcgettext@plt>
   12060:	mov	r2, r0
   12064:	mov	r1, #0
   12068:	mov	r0, #1
   1206c:	bl	10ff0 <error@plt>
   12070:	cmp	r3, #0
   12074:	bne	12194 <__assert_fail@plt+0x1018>
   12078:	movw	r3, #33148	; 0x817c
   1207c:	movt	r3, #2
   12080:	ldrb	r4, [r3, #21]
   12084:	cmp	r4, #0
   12088:	beq	121b4 <__assert_fail@plt+0x1038>
   1208c:	movw	r3, #33148	; 0x817c
   12090:	movt	r3, #2
   12094:	ldrb	r3, [r3, #22]
   12098:	cmp	r3, #0
   1209c:	beq	123ec <__assert_fail@plt+0x1270>
   120a0:	bl	11080 <__errno_location@plt>
   120a4:	mov	r5, r0
   120a8:	mov	r3, #0
   120ac:	str	r3, [r0]
   120b0:	bl	10f0c <getuid@plt>
   120b4:	movw	r3, #33148	; 0x817c
   120b8:	movt	r3, #2
   120bc:	str	r0, [r3, #24]
   120c0:	cmn	r0, #1
   120c4:	beq	12368 <__assert_fail@plt+0x11ec>
   120c8:	cmp	r4, #0
   120cc:	bne	12160 <__assert_fail@plt+0xfe4>
   120d0:	movw	r3, #33148	; 0x817c
   120d4:	movt	r3, #2
   120d8:	ldrb	r3, [r3, #33]	; 0x21
   120dc:	cmp	r3, #0
   120e0:	bne	1210c <__assert_fail@plt+0xf90>
   120e4:	movw	r3, #33148	; 0x817c
   120e8:	movt	r3, #2
   120ec:	ldrb	r3, [r3, #44]	; 0x2c
   120f0:	cmp	r3, #0
   120f4:	bne	1210c <__assert_fail@plt+0xf90>
   120f8:	movw	r3, #33148	; 0x817c
   120fc:	movt	r3, #2
   12100:	ldrb	r3, [r3, #46]	; 0x2e
   12104:	cmp	r3, #0
   12108:	bne	12160 <__assert_fail@plt+0xfe4>
   1210c:	bl	11080 <__errno_location@plt>
   12110:	mov	r4, r0
   12114:	mov	r3, #0
   12118:	str	r3, [r0]
   1211c:	bl	10f9c <getegid@plt>
   12120:	movw	r3, #33148	; 0x817c
   12124:	movt	r3, #2
   12128:	str	r0, [r3, #40]	; 0x28
   1212c:	cmn	r0, #1
   12130:	bne	12140 <__assert_fail@plt+0xfc4>
   12134:	ldr	r5, [r4]
   12138:	cmp	r5, #0
   1213c:	bne	12398 <__assert_fail@plt+0x121c>
   12140:	mov	r3, #0
   12144:	str	r3, [r4]
   12148:	bl	11098 <getgid@plt>
   1214c:	movw	r3, #33148	; 0x817c
   12150:	movt	r3, #2
   12154:	str	r0, [r3, #36]	; 0x24
   12158:	cmn	r0, #1
   1215c:	beq	123bc <__assert_fail@plt+0x1240>
   12160:	mov	r0, #0
   12164:	bl	112a0 <__assert_fail@plt+0x124>
   12168:	movw	r3, #33040	; 0x8110
   1216c:	movt	r3, #2
   12170:	ldrb	r0, [r3]
   12174:	eor	r0, r0, #1
   12178:	add	sp, sp, #16
   1217c:	ldrd	r4, [sp]
   12180:	ldrd	r6, [sp, #8]
   12184:	ldrd	r8, [sp, #16]
   12188:	ldr	sl, [sp, #24]
   1218c:	add	sp, sp, #28
   12190:	pop	{pc}		; (ldr pc, [sp], #4)
   12194:	movw	r0, #29036	; 0x716c
   12198:	movt	r0, #1
   1219c:	bl	10ffc <getenv@plt>
   121a0:	cmp	r0, #0
   121a4:	beq	1242c <__assert_fail@plt+0x12b0>
   121a8:	movw	r3, #33148	; 0x817c
   121ac:	movt	r3, #2
   121b0:	ldrb	r4, [r3, #21]
   121b4:	movw	r3, #33148	; 0x817c
   121b8:	movt	r3, #2
   121bc:	ldrb	r3, [r3, #33]	; 0x21
   121c0:	cmp	r3, #0
   121c4:	bne	1222c <__assert_fail@plt+0x10b0>
   121c8:	movw	r3, #33148	; 0x817c
   121cc:	movt	r3, #2
   121d0:	ldrb	r3, [r3, #44]	; 0x2c
   121d4:	cmp	r3, #0
   121d8:	bne	1222c <__assert_fail@plt+0x10b0>
   121dc:	movw	r3, #33148	; 0x817c
   121e0:	movt	r3, #2
   121e4:	ldrb	r3, [r3, #46]	; 0x2e
   121e8:	cmp	r3, #0
   121ec:	bne	1222c <__assert_fail@plt+0x10b0>
   121f0:	bl	11080 <__errno_location@plt>
   121f4:	mov	r5, r0
   121f8:	mov	r3, #0
   121fc:	str	r3, [r0]
   12200:	bl	10f84 <geteuid@plt>
   12204:	movw	r3, #33148	; 0x817c
   12208:	movt	r3, #2
   1220c:	str	r0, [r3, #28]
   12210:	cmn	r0, #1
   12214:	bne	12224 <__assert_fail@plt+0x10a8>
   12218:	ldr	r5, [r5]
   1221c:	cmp	r5, #0
   12220:	bne	12344 <__assert_fail@plt+0x11c8>
   12224:	cmp	r4, #0
   12228:	bne	12414 <__assert_fail@plt+0x1298>
   1222c:	movw	r3, #33148	; 0x817c
   12230:	movt	r3, #2
   12234:	ldrb	r3, [r3, #33]	; 0x21
   12238:	cmp	r3, #0
   1223c:	bne	120d0 <__assert_fail@plt+0xf54>
   12240:	movw	r3, #33148	; 0x817c
   12244:	movt	r3, #2
   12248:	ldrb	r3, [r3, #44]	; 0x2c
   1224c:	cmp	r3, #0
   12250:	bne	120a0 <__assert_fail@plt+0xf24>
   12254:	movw	r3, #33148	; 0x817c
   12258:	movt	r3, #2
   1225c:	ldrb	r3, [r3, #46]	; 0x2e
   12260:	cmp	r3, #0
   12264:	bne	120d0 <__assert_fail@plt+0xf54>
   12268:	b	120a0 <__assert_fail@plt+0xf24>
   1226c:	bl	11080 <__errno_location@plt>
   12270:	ldr	r9, [r0]
   12274:	mov	r2, #5
   12278:	movw	r1, #29080	; 0x7198
   1227c:	movt	r1, #1
   12280:	mov	r0, #0
   12284:	bl	10f60 <dcgettext@plt>
   12288:	mov	sl, r0
   1228c:	ldr	r3, [r4]
   12290:	ldr	r0, [r5, r3, lsl #2]
   12294:	bl	14bec <__assert_fail@plt+0x3a70>
   12298:	mov	r3, r0
   1229c:	mov	r2, sl
   122a0:	mov	r1, r9
   122a4:	mov	r0, #0
   122a8:	bl	10ff0 <error@plt>
   122ac:	movw	r3, #33040	; 0x8110
   122b0:	movt	r3, #2
   122b4:	mov	r2, #0
   122b8:	strb	r2, [r3]
   122bc:	ldr	r3, [r4]
   122c0:	add	r3, r3, #1
   122c4:	str	r3, [r4]
   122c8:	mov	r2, r3
   122cc:	cmp	r3, r6
   122d0:	bcs	12168 <__assert_fail@plt+0xfec>
   122d4:	ldr	r0, [r5, r2, lsl #2]
   122d8:	ldrb	r3, [r0]
   122dc:	cmp	r3, #0
   122e0:	beq	1226c <__assert_fail@plt+0x10f0>
   122e4:	mov	r2, #0
   122e8:	str	r2, [sp]
   122ec:	mov	r3, r2
   122f0:	mov	r1, r8
   122f4:	bl	14f0c <__assert_fail@plt+0x3d90>
   122f8:	cmp	r0, #0
   122fc:	bne	1226c <__assert_fail@plt+0x10f0>
   12300:	ldr	r0, [r7, #28]
   12304:	bl	10ef4 <getpwuid@plt>
   12308:	subs	r9, r0, #0
   1230c:	beq	1226c <__assert_fail@plt+0x10f0>
   12310:	ldr	r0, [r9]
   12314:	bl	15a14 <__assert_fail@plt+0x4898>
   12318:	mov	sl, r0
   1231c:	ldr	r3, [r9, #8]
   12320:	str	r3, [r7, #28]
   12324:	str	r3, [r7, #24]
   12328:	ldr	r3, [r9, #12]
   1232c:	str	r3, [r7, #40]	; 0x28
   12330:	str	r3, [r7, #36]	; 0x24
   12334:	bl	112a0 <__assert_fail@plt+0x124>
   12338:	mov	r0, sl
   1233c:	bl	12804 <__assert_fail@plt+0x1688>
   12340:	b	122bc <__assert_fail@plt+0x1140>
   12344:	mov	r2, #5
   12348:	movw	r1, #29100	; 0x71ac
   1234c:	movt	r1, #1
   12350:	mov	r0, #0
   12354:	bl	10f60 <dcgettext@plt>
   12358:	mov	r2, r0
   1235c:	mov	r1, r5
   12360:	mov	r0, #1
   12364:	bl	10ff0 <error@plt>
   12368:	ldr	r5, [r5]
   1236c:	cmp	r5, #0
   12370:	beq	120c8 <__assert_fail@plt+0xf4c>
   12374:	mov	r2, #5
   12378:	movw	r1, #29128	; 0x71c8
   1237c:	movt	r1, #1
   12380:	mov	r0, #0
   12384:	bl	10f60 <dcgettext@plt>
   12388:	mov	r2, r0
   1238c:	mov	r1, r5
   12390:	mov	r0, #1
   12394:	bl	10ff0 <error@plt>
   12398:	mov	r2, #5
   1239c:	movw	r1, #29148	; 0x71dc
   123a0:	movt	r1, #1
   123a4:	mov	r0, #0
   123a8:	bl	10f60 <dcgettext@plt>
   123ac:	mov	r2, r0
   123b0:	mov	r1, r5
   123b4:	mov	r0, #1
   123b8:	bl	10ff0 <error@plt>
   123bc:	ldr	r4, [r4]
   123c0:	cmp	r4, #0
   123c4:	beq	12160 <__assert_fail@plt+0xfe4>
   123c8:	mov	r2, #5
   123cc:	movw	r1, #29176	; 0x71f8
   123d0:	movt	r1, #1
   123d4:	mov	r0, #0
   123d8:	bl	10f60 <dcgettext@plt>
   123dc:	mov	r2, r0
   123e0:	mov	r1, r4
   123e4:	mov	r0, #1
   123e8:	bl	10ff0 <error@plt>
   123ec:	bl	11080 <__errno_location@plt>
   123f0:	mov	r5, r0
   123f4:	mov	r3, #0
   123f8:	str	r3, [r0]
   123fc:	bl	10f84 <geteuid@plt>
   12400:	movw	r3, #33148	; 0x817c
   12404:	movt	r3, #2
   12408:	str	r0, [r3, #28]
   1240c:	cmn	r0, #1
   12410:	beq	12218 <__assert_fail@plt+0x109c>
   12414:	movw	r3, #33148	; 0x817c
   12418:	movt	r3, #2
   1241c:	ldrb	r3, [r3, #22]
   12420:	cmp	r3, #0
   12424:	beq	12160 <__assert_fail@plt+0xfe4>
   12428:	b	120a0 <__assert_fail@plt+0xf24>
   1242c:	cmp	sl, #0
   12430:	bgt	12028 <__assert_fail@plt+0xeac>
   12434:	movw	r3, #33148	; 0x817c
   12438:	movt	r3, #2
   1243c:	ldrb	r4, [r3, #21]
   12440:	b	121b4 <__assert_fail@plt+0x1038>
   12444:	andeq	r6, r1, r8, ror #20
   12448:	andeq	r8, r2, ip, lsr #3
   1244c:	strd	r4, [sp, #-16]!
   12450:	str	r6, [sp, #8]
   12454:	str	lr, [sp, #12]
   12458:	mov	r5, r0
   1245c:	subs	r4, r1, #0
   12460:	beq	124a8 <__assert_fail@plt+0x132c>
   12464:	bl	11164 <getgrgid@plt>
   12468:	cmp	r0, #0
   1246c:	beq	12478 <__assert_fail@plt+0x12fc>
   12470:	ldr	r0, [r0]
   12474:	b	124c0 <__assert_fail@plt+0x1344>
   12478:	mov	r2, #5
   1247c:	movw	r1, #29360	; 0x72b0
   12480:	movt	r1, #1
   12484:	mov	r0, #0
   12488:	bl	10f60 <dcgettext@plt>
   1248c:	mov	r3, r5
   12490:	mov	r2, r0
   12494:	mov	r1, #0
   12498:	mov	r0, r1
   1249c:	bl	10ff0 <error@plt>
   124a0:	mov	r4, #0
   124a4:	b	124ac <__assert_fail@plt+0x1330>
   124a8:	mov	r4, #1
   124ac:	movw	r2, #33224	; 0x81c8
   124b0:	movt	r2, #2
   124b4:	mov	r0, r5
   124b8:	mov	r1, #0
   124bc:	bl	12864 <__assert_fail@plt+0x16e8>
   124c0:	movw	r3, #33140	; 0x8174
   124c4:	movt	r3, #2
   124c8:	ldr	r1, [r3]
   124cc:	bl	10eb8 <fputs_unlocked@plt>
   124d0:	mov	r0, r4
   124d4:	ldrd	r4, [sp]
   124d8:	ldr	r6, [sp, #8]
   124dc:	add	sp, sp, #12
   124e0:	pop	{pc}		; (ldr pc, [sp], #4)
   124e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   124e8:	strd	r6, [sp, #8]
   124ec:	strd	r8, [sp, #16]
   124f0:	strd	sl, [sp, #24]
   124f4:	str	lr, [sp, #32]
   124f8:	sub	sp, sp, #20
   124fc:	mov	r6, r2
   12500:	mov	r7, r3
   12504:	ldrb	r3, [sp, #56]	; 0x38
   12508:	str	r3, [sp, #4]
   1250c:	ldrb	fp, [sp, #60]	; 0x3c
   12510:	subs	r4, r0, #0
   12514:	moveq	r8, r4
   12518:	moveq	r5, #1
   1251c:	beq	12534 <__assert_fail@plt+0x13b8>
   12520:	mov	r0, r1
   12524:	bl	10ef4 <getpwuid@plt>
   12528:	mov	r8, r0
   1252c:	adds	r5, r0, #0
   12530:	movne	r5, #1
   12534:	ldr	r1, [sp, #4]
   12538:	mov	r0, r6
   1253c:	bl	1244c <__assert_fail@plt+0x12d0>
   12540:	cmp	r0, #0
   12544:	moveq	r5, r0
   12548:	cmp	r6, r7
   1254c:	beq	1258c <__assert_fail@plt+0x1410>
   12550:	movw	r3, #33140	; 0x8174
   12554:	movt	r3, #2
   12558:	ldr	r0, [r3]
   1255c:	ldr	r3, [r0, #20]
   12560:	ldr	r2, [r0, #24]
   12564:	cmp	r3, r2
   12568:	addcc	r2, r3, #1
   1256c:	strcc	r2, [r0, #20]
   12570:	strbcc	fp, [r3]
   12574:	bcs	125e4 <__assert_fail@plt+0x1468>
   12578:	ldr	r1, [sp, #4]
   1257c:	mov	r0, r7
   12580:	bl	1244c <__assert_fail@plt+0x12d0>
   12584:	cmp	r0, #0
   12588:	moveq	r5, r0
   1258c:	cmp	r8, #0
   12590:	ldrne	r1, [r8, #12]
   12594:	moveq	r1, r7
   12598:	add	r2, sp, #12
   1259c:	mov	r0, r4
   125a0:	bl	15a80 <__assert_fail@plt+0x4904>
   125a4:	subs	r9, r0, #0
   125a8:	blt	125f0 <__assert_fail@plt+0x1474>
   125ac:	movgt	r4, #0
   125b0:	movwgt	sl, #33140	; 0x8174
   125b4:	movtgt	sl, #2
   125b8:	bgt	12690 <__assert_fail@plt+0x1514>
   125bc:	ldr	r0, [sp, #12]
   125c0:	bl	12804 <__assert_fail@plt+0x1688>
   125c4:	mov	r0, r5
   125c8:	add	sp, sp, #20
   125cc:	ldrd	r4, [sp]
   125d0:	ldrd	r6, [sp, #8]
   125d4:	ldrd	r8, [sp, #16]
   125d8:	ldrd	sl, [sp, #24]
   125dc:	add	sp, sp, #32
   125e0:	pop	{pc}		; (ldr pc, [sp], #4)
   125e4:	mov	r1, fp
   125e8:	bl	110f8 <__overflow@plt>
   125ec:	b	12578 <__assert_fail@plt+0x13fc>
   125f0:	cmp	r4, #0
   125f4:	beq	1263c <__assert_fail@plt+0x14c0>
   125f8:	bl	11080 <__errno_location@plt>
   125fc:	ldr	r5, [r0]
   12600:	mov	r2, #5
   12604:	movw	r1, #27480	; 0x6b58
   12608:	movt	r1, #1
   1260c:	mov	r0, #0
   12610:	bl	10f60 <dcgettext@plt>
   12614:	mov	r6, r0
   12618:	mov	r0, r4
   1261c:	bl	14bec <__assert_fail@plt+0x3a70>
   12620:	mov	r3, r0
   12624:	mov	r2, r6
   12628:	mov	r1, r5
   1262c:	mov	r0, #0
   12630:	bl	10ff0 <error@plt>
   12634:	mov	r5, #0
   12638:	b	125c4 <__assert_fail@plt+0x1448>
   1263c:	bl	11080 <__errno_location@plt>
   12640:	ldr	r4, [r0]
   12644:	mov	r2, #5
   12648:	movw	r1, #27516	; 0x6b7c
   1264c:	movt	r1, #1
   12650:	mov	r0, #0
   12654:	bl	10f60 <dcgettext@plt>
   12658:	mov	r2, r0
   1265c:	mov	r1, r4
   12660:	mov	r0, #0
   12664:	bl	10ff0 <error@plt>
   12668:	b	12634 <__assert_fail@plt+0x14b8>
   1266c:	ldr	r1, [sp, #4]
   12670:	ldr	r3, [sp, #12]
   12674:	ldr	r0, [r3, r8]
   12678:	bl	1244c <__assert_fail@plt+0x12d0>
   1267c:	cmp	r0, #0
   12680:	moveq	r5, r0
   12684:	add	r4, r4, #1
   12688:	cmp	r9, r4
   1268c:	beq	125bc <__assert_fail@plt+0x1440>
   12690:	lsl	r8, r4, #2
   12694:	ldr	r3, [sp, #12]
   12698:	ldr	r3, [r3, r4, lsl #2]
   1269c:	cmp	r3, r7
   126a0:	cmpne	r3, r6
   126a4:	beq	12684 <__assert_fail@plt+0x1508>
   126a8:	ldr	r0, [sl]
   126ac:	ldr	r3, [r0, #20]
   126b0:	ldr	r2, [r0, #24]
   126b4:	cmp	r3, r2
   126b8:	addcc	r2, r3, #1
   126bc:	strcc	r2, [r0, #20]
   126c0:	strbcc	fp, [r3]
   126c4:	bcc	1266c <__assert_fail@plt+0x14f0>
   126c8:	mov	r1, fp
   126cc:	bl	110f8 <__overflow@plt>
   126d0:	b	1266c <__assert_fail@plt+0x14f0>
   126d4:	movw	r3, #33248	; 0x81e0
   126d8:	movt	r3, #2
   126dc:	str	r0, [r3]
   126e0:	bx	lr
   126e4:	movw	r3, #33248	; 0x81e0
   126e8:	movt	r3, #2
   126ec:	strb	r0, [r3, #4]
   126f0:	bx	lr
   126f4:	strd	r4, [sp, #-16]!
   126f8:	str	r6, [sp, #8]
   126fc:	str	lr, [sp, #12]
   12700:	sub	sp, sp, #8
   12704:	movw	r3, #33140	; 0x8174
   12708:	movt	r3, #2
   1270c:	ldr	r0, [r3]
   12710:	bl	16134 <__assert_fail@plt+0x4fb8>
   12714:	cmp	r0, #0
   12718:	beq	12740 <__assert_fail@plt+0x15c4>
   1271c:	movw	r3, #33248	; 0x81e0
   12720:	movt	r3, #2
   12724:	ldrb	r3, [r3, #4]
   12728:	cmp	r3, #0
   1272c:	beq	1276c <__assert_fail@plt+0x15f0>
   12730:	bl	11080 <__errno_location@plt>
   12734:	ldr	r3, [r0]
   12738:	cmp	r3, #32
   1273c:	bne	1276c <__assert_fail@plt+0x15f0>
   12740:	movw	r3, #33136	; 0x8170
   12744:	movt	r3, #2
   12748:	ldr	r0, [r3]
   1274c:	bl	16134 <__assert_fail@plt+0x4fb8>
   12750:	cmp	r0, #0
   12754:	bne	127f4 <__assert_fail@plt+0x1678>
   12758:	add	sp, sp, #8
   1275c:	ldrd	r4, [sp]
   12760:	ldr	r6, [sp, #8]
   12764:	add	sp, sp, #12
   12768:	pop	{pc}		; (ldr pc, [sp], #4)
   1276c:	mov	r2, #5
   12770:	movw	r1, #29412	; 0x72e4
   12774:	movt	r1, #1
   12778:	mov	r0, #0
   1277c:	bl	10f60 <dcgettext@plt>
   12780:	mov	r4, r0
   12784:	movw	r3, #33248	; 0x81e0
   12788:	movt	r3, #2
   1278c:	ldr	r5, [r3]
   12790:	cmp	r5, #0
   12794:	beq	127d4 <__assert_fail@plt+0x1658>
   12798:	bl	11080 <__errno_location@plt>
   1279c:	ldr	r6, [r0]
   127a0:	mov	r0, r5
   127a4:	bl	149e8 <__assert_fail@plt+0x386c>
   127a8:	str	r4, [sp]
   127ac:	mov	r3, r0
   127b0:	movw	r2, #29424	; 0x72f0
   127b4:	movt	r2, #1
   127b8:	mov	r1, r6
   127bc:	mov	r0, #0
   127c0:	bl	10ff0 <error@plt>
   127c4:	movw	r3, #33048	; 0x8118
   127c8:	movt	r3, #2
   127cc:	ldr	r0, [r3]
   127d0:	bl	10f24 <_exit@plt>
   127d4:	bl	11080 <__errno_location@plt>
   127d8:	mov	r3, r4
   127dc:	movw	r2, #29428	; 0x72f4
   127e0:	movt	r2, #1
   127e4:	ldr	r1, [r0]
   127e8:	mov	r0, #0
   127ec:	bl	10ff0 <error@plt>
   127f0:	b	127c4 <__assert_fail@plt+0x1648>
   127f4:	movw	r3, #33048	; 0x8118
   127f8:	movt	r3, #2
   127fc:	ldr	r0, [r3]
   12800:	bl	10f24 <_exit@plt>
   12804:	strd	r4, [sp, #-12]!
   12808:	str	lr, [sp, #8]
   1280c:	sub	sp, sp, #12
   12810:	mov	r5, r0
   12814:	bl	11080 <__errno_location@plt>
   12818:	mov	r4, r0
   1281c:	ldr	r3, [r0]
   12820:	str	r3, [sp]
   12824:	str	r3, [sp, #4]
   12828:	mov	r3, #0
   1282c:	str	r3, [r0]
   12830:	mov	r0, r5
   12834:	bl	10f18 <free@plt>
   12838:	ldr	r3, [r4]
   1283c:	clz	r3, r3
   12840:	lsr	r3, r3, #5
   12844:	add	r2, sp, #8
   12848:	add	r3, r2, r3, lsl #2
   1284c:	ldr	r3, [r3, #-8]
   12850:	str	r3, [r4]
   12854:	add	sp, sp, #12
   12858:	ldrd	r4, [sp]
   1285c:	add	sp, sp, #8
   12860:	pop	{pc}		; (ldr pc, [sp], #4)
   12864:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12868:	str	r6, [sp, #8]
   1286c:	strd	r8, [sp, #12]
   12870:	str	lr, [sp, #20]
   12874:	mov	r4, r0
   12878:	mov	r5, r1
   1287c:	add	r6, r2, #20
   12880:	mov	r3, #0
   12884:	strb	r3, [r2, #20]
   12888:	mov	r8, #10
   1288c:	mov	r9, #0
   12890:	b	1289c <__assert_fail@plt+0x1720>
   12894:	mov	r4, r0
   12898:	mov	r5, r1
   1289c:	mov	r2, r8
   128a0:	mov	r3, r9
   128a4:	mov	r0, r4
   128a8:	mov	r1, r5
   128ac:	bl	16834 <__assert_fail@plt+0x56b8>
   128b0:	add	r2, r2, #48	; 0x30
   128b4:	strb	r2, [r6, #-1]!
   128b8:	mov	r2, r8
   128bc:	mov	r3, r9
   128c0:	mov	r0, r4
   128c4:	mov	r1, r5
   128c8:	bl	16834 <__assert_fail@plt+0x56b8>
   128cc:	cmp	r5, #0
   128d0:	cmpeq	r4, #9
   128d4:	bhi	12894 <__assert_fail@plt+0x1718>
   128d8:	mov	r0, r6
   128dc:	ldrd	r4, [sp]
   128e0:	ldr	r6, [sp, #8]
   128e4:	ldrd	r8, [sp, #12]
   128e8:	add	sp, sp, #20
   128ec:	pop	{pc}		; (ldr pc, [sp], #4)
   128f0:	strd	r4, [sp, #-16]!
   128f4:	str	r6, [sp, #8]
   128f8:	str	lr, [sp, #12]
   128fc:	subs	r4, r0, #0
   12900:	beq	1299c <__assert_fail@plt+0x1820>
   12904:	mov	r1, #47	; 0x2f
   12908:	mov	r0, r4
   1290c:	bl	1111c <strrchr@plt>
   12910:	subs	r5, r0, #0
   12914:	beq	12974 <__assert_fail@plt+0x17f8>
   12918:	add	r6, r5, #1
   1291c:	sub	r3, r6, r4
   12920:	cmp	r3, #6
   12924:	ble	12974 <__assert_fail@plt+0x17f8>
   12928:	mov	r2, #7
   1292c:	movw	r1, #29488	; 0x7330
   12930:	movt	r1, #1
   12934:	sub	r0, r5, #6
   12938:	bl	1114c <strncmp@plt>
   1293c:	cmp	r0, #0
   12940:	bne	12974 <__assert_fail@plt+0x17f8>
   12944:	mov	r2, #3
   12948:	movw	r1, #29496	; 0x7338
   1294c:	movt	r1, #1
   12950:	mov	r0, r6
   12954:	bl	1114c <strncmp@plt>
   12958:	cmp	r0, #0
   1295c:	movne	r4, r6
   12960:	bne	12974 <__assert_fail@plt+0x17f8>
   12964:	add	r4, r5, #4
   12968:	movw	r3, #33120	; 0x8160
   1296c:	movt	r3, #2
   12970:	str	r4, [r3]
   12974:	movw	r3, #33256	; 0x81e8
   12978:	movt	r3, #2
   1297c:	str	r4, [r3]
   12980:	movw	r3, #33124	; 0x8164
   12984:	movt	r3, #2
   12988:	str	r4, [r3]
   1298c:	ldrd	r4, [sp]
   12990:	ldr	r6, [sp, #8]
   12994:	add	sp, sp, #12
   12998:	pop	{pc}		; (ldr pc, [sp], #4)
   1299c:	movw	r3, #33136	; 0x8170
   129a0:	movt	r3, #2
   129a4:	ldr	r3, [r3]
   129a8:	mov	r2, #55	; 0x37
   129ac:	mov	r1, #1
   129b0:	movw	r0, #29432	; 0x72f8
   129b4:	movt	r0, #1
   129b8:	bl	10fa8 <fwrite@plt>
   129bc:	bl	11158 <abort@plt>
   129c0:	mov	r2, #0
   129c4:	mov	r3, #0
   129c8:	strd	r2, [r0]
   129cc:	strd	r2, [r0, #8]
   129d0:	strd	r2, [r0, #16]
   129d4:	strd	r2, [r0, #24]
   129d8:	strd	r2, [r0, #32]
   129dc:	strd	r2, [r0, #40]	; 0x28
   129e0:	cmp	r1, #10
   129e4:	beq	129f0 <__assert_fail@plt+0x1874>
   129e8:	str	r1, [r0]
   129ec:	bx	lr
   129f0:	str	r4, [sp, #-8]!
   129f4:	str	lr, [sp, #4]
   129f8:	bl	11158 <abort@plt>
   129fc:	strd	r4, [sp, #-16]!
   12a00:	str	r6, [sp, #8]
   12a04:	str	lr, [sp, #12]
   12a08:	mov	r5, r0
   12a0c:	mov	r6, r1
   12a10:	mov	r2, #5
   12a14:	mov	r1, r0
   12a18:	mov	r0, #0
   12a1c:	bl	10f60 <dcgettext@plt>
   12a20:	mov	r4, r0
   12a24:	cmp	r5, r0
   12a28:	beq	12a40 <__assert_fail@plt+0x18c4>
   12a2c:	mov	r0, r4
   12a30:	ldrd	r4, [sp]
   12a34:	ldr	r6, [sp, #8]
   12a38:	add	sp, sp, #12
   12a3c:	pop	{pc}		; (ldr pc, [sp], #4)
   12a40:	bl	163ac <__assert_fail@plt+0x5230>
   12a44:	ldrb	r3, [r0]
   12a48:	bic	r3, r3, #32
   12a4c:	cmp	r3, #85	; 0x55
   12a50:	bne	12ad4 <__assert_fail@plt+0x1958>
   12a54:	ldrb	r3, [r0, #1]
   12a58:	bic	r3, r3, #32
   12a5c:	cmp	r3, #84	; 0x54
   12a60:	bne	12a98 <__assert_fail@plt+0x191c>
   12a64:	ldrb	r3, [r0, #2]
   12a68:	bic	r3, r3, #32
   12a6c:	cmp	r3, #70	; 0x46
   12a70:	bne	12a98 <__assert_fail@plt+0x191c>
   12a74:	ldrb	r3, [r0, #3]
   12a78:	cmp	r3, #45	; 0x2d
   12a7c:	bne	12a98 <__assert_fail@plt+0x191c>
   12a80:	ldrb	r3, [r0, #4]
   12a84:	cmp	r3, #56	; 0x38
   12a88:	bne	12a98 <__assert_fail@plt+0x191c>
   12a8c:	ldrb	r3, [r0, #5]
   12a90:	cmp	r3, #0
   12a94:	beq	12ab4 <__assert_fail@plt+0x1938>
   12a98:	movw	r4, #29584	; 0x7390
   12a9c:	movt	r4, #1
   12aa0:	movw	r3, #29604	; 0x73a4
   12aa4:	movt	r3, #1
   12aa8:	cmp	r6, #9
   12aac:	movne	r4, r3
   12ab0:	b	12a2c <__assert_fail@plt+0x18b0>
   12ab4:	ldrb	r2, [r4]
   12ab8:	movw	r4, #29600	; 0x73a0
   12abc:	movt	r4, #1
   12ac0:	movw	r3, #29588	; 0x7394
   12ac4:	movt	r3, #1
   12ac8:	cmp	r2, #96	; 0x60
   12acc:	movne	r4, r3
   12ad0:	b	12a2c <__assert_fail@plt+0x18b0>
   12ad4:	cmp	r3, #71	; 0x47
   12ad8:	bne	12a98 <__assert_fail@plt+0x191c>
   12adc:	ldrb	r3, [r0, #1]
   12ae0:	bic	r3, r3, #32
   12ae4:	cmp	r3, #66	; 0x42
   12ae8:	bne	12a98 <__assert_fail@plt+0x191c>
   12aec:	ldrb	r3, [r0, #2]
   12af0:	cmp	r3, #49	; 0x31
   12af4:	bne	12a98 <__assert_fail@plt+0x191c>
   12af8:	ldrb	r3, [r0, #3]
   12afc:	cmp	r3, #56	; 0x38
   12b00:	bne	12a98 <__assert_fail@plt+0x191c>
   12b04:	ldrb	r3, [r0, #4]
   12b08:	cmp	r3, #48	; 0x30
   12b0c:	bne	12a98 <__assert_fail@plt+0x191c>
   12b10:	ldrb	r3, [r0, #5]
   12b14:	cmp	r3, #51	; 0x33
   12b18:	bne	12a98 <__assert_fail@plt+0x191c>
   12b1c:	ldrb	r3, [r0, #6]
   12b20:	cmp	r3, #48	; 0x30
   12b24:	bne	12a98 <__assert_fail@plt+0x191c>
   12b28:	ldrb	r3, [r0, #7]
   12b2c:	cmp	r3, #0
   12b30:	bne	12a98 <__assert_fail@plt+0x191c>
   12b34:	ldrb	r2, [r4]
   12b38:	movw	r4, #29596	; 0x739c
   12b3c:	movt	r4, #1
   12b40:	movw	r3, #29592	; 0x7398
   12b44:	movt	r3, #1
   12b48:	cmp	r2, #96	; 0x60
   12b4c:	movne	r4, r3
   12b50:	b	12a2c <__assert_fail@plt+0x18b0>
   12b54:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12b58:	strd	r6, [sp, #8]
   12b5c:	strd	r8, [sp, #16]
   12b60:	strd	sl, [sp, #24]
   12b64:	str	lr, [sp, #32]
   12b68:	sub	sp, sp, #116	; 0x74
   12b6c:	str	r0, [sp, #64]	; 0x40
   12b70:	mov	r8, r1
   12b74:	str	r2, [sp, #48]	; 0x30
   12b78:	str	r3, [sp, #24]
   12b7c:	ldr	r7, [sp, #152]	; 0x98
   12b80:	bl	10fc0 <__ctype_get_mb_cur_max@plt>
   12b84:	str	r0, [sp, #76]	; 0x4c
   12b88:	ldr	r3, [sp, #156]	; 0x9c
   12b8c:	ubfx	r3, r3, #1, #1
   12b90:	str	r3, [sp, #32]
   12b94:	mov	r3, #1
   12b98:	str	r3, [sp, #40]	; 0x28
   12b9c:	mov	r3, #0
   12ba0:	str	r3, [sp, #68]	; 0x44
   12ba4:	str	r3, [sp, #36]	; 0x24
   12ba8:	str	r3, [sp, #28]
   12bac:	str	r3, [sp, #52]	; 0x34
   12bb0:	str	r3, [sp, #60]	; 0x3c
   12bb4:	str	r3, [sp, #72]	; 0x48
   12bb8:	movw	r3, #29608	; 0x73a8
   12bbc:	movt	r3, #1
   12bc0:	str	r3, [sp, #80]	; 0x50
   12bc4:	mov	r9, r8
   12bc8:	mov	sl, r7
   12bcc:	cmp	sl, #10
   12bd0:	ldrls	pc, [pc, sl, lsl #2]
   12bd4:	b	12d98 <__assert_fail@plt+0x1c1c>
   12bd8:	andeq	r2, r1, r8, lsr ip
   12bdc:	andeq	r2, r1, ip, lsl #24
   12be0:	andeq	r2, r1, r0, ror sp
   12be4:	andeq	r2, r1, r4, lsl #24
   12be8:	andeq	r2, r1, r4, lsr #26
   12bec:	andeq	r2, r1, r8, asr #24
   12bf0:	andeq	r4, r1, r4, lsl r0
   12bf4:	muleq	r1, ip, sp
   12bf8:	andeq	r2, r1, r4, lsl #25
   12bfc:	andeq	r2, r1, r4, lsl #25
   12c00:	andeq	r2, r1, r4, lsl #25
   12c04:	mov	r3, #1
   12c08:	str	r3, [sp, #28]
   12c0c:	mov	r3, #1
   12c10:	str	r3, [sp, #32]
   12c14:	str	r3, [sp, #52]	; 0x34
   12c18:	movw	r3, #29604	; 0x73a4
   12c1c:	movt	r3, #1
   12c20:	str	r3, [sp, #60]	; 0x3c
   12c24:	mov	fp, #0
   12c28:	mov	sl, #2
   12c2c:	mov	r6, #0
   12c30:	ldr	r8, [sp, #64]	; 0x40
   12c34:	b	134ac <__assert_fail@plt+0x2330>
   12c38:	mov	fp, sl
   12c3c:	mov	r3, #0
   12c40:	str	r3, [sp, #32]
   12c44:	b	12c2c <__assert_fail@plt+0x1ab0>
   12c48:	ldr	r3, [sp, #32]
   12c4c:	cmp	r3, #0
   12c50:	bne	12db0 <__assert_fail@plt+0x1c34>
   12c54:	cmp	r9, #0
   12c58:	beq	12dd4 <__assert_fail@plt+0x1c58>
   12c5c:	mov	r3, #34	; 0x22
   12c60:	ldr	r2, [sp, #64]	; 0x40
   12c64:	strb	r3, [r2]
   12c68:	mov	fp, #1
   12c6c:	str	fp, [sp, #28]
   12c70:	str	fp, [sp, #52]	; 0x34
   12c74:	movw	r3, #29584	; 0x7390
   12c78:	movt	r3, #1
   12c7c:	str	r3, [sp, #60]	; 0x3c
   12c80:	b	12c2c <__assert_fail@plt+0x1ab0>
   12c84:	cmp	sl, #10
   12c88:	bne	12cbc <__assert_fail@plt+0x1b40>
   12c8c:	ldr	r3, [sp, #32]
   12c90:	cmp	r3, #0
   12c94:	movne	fp, #0
   12c98:	beq	12ce4 <__assert_fail@plt+0x1b68>
   12c9c:	ldr	r0, [sp, #168]	; 0xa8
   12ca0:	bl	11068 <strlen@plt>
   12ca4:	str	r0, [sp, #52]	; 0x34
   12ca8:	ldr	r3, [sp, #168]	; 0xa8
   12cac:	str	r3, [sp, #60]	; 0x3c
   12cb0:	mov	r3, #1
   12cb4:	str	r3, [sp, #28]
   12cb8:	b	12c2c <__assert_fail@plt+0x1ab0>
   12cbc:	mov	r1, sl
   12cc0:	ldr	r0, [sp, #80]	; 0x50
   12cc4:	bl	129fc <__assert_fail@plt+0x1880>
   12cc8:	str	r0, [sp, #164]	; 0xa4
   12ccc:	mov	r1, sl
   12cd0:	movw	r0, #29604	; 0x73a4
   12cd4:	movt	r0, #1
   12cd8:	bl	129fc <__assert_fail@plt+0x1880>
   12cdc:	str	r0, [sp, #168]	; 0xa8
   12ce0:	b	12c8c <__assert_fail@plt+0x1b10>
   12ce4:	ldr	r3, [sp, #164]	; 0xa4
   12ce8:	ldrb	r3, [r3]
   12cec:	cmp	r3, #0
   12cf0:	beq	12d1c <__assert_fail@plt+0x1ba0>
   12cf4:	ldr	r2, [sp, #164]	; 0xa4
   12cf8:	mov	fp, #0
   12cfc:	ldr	r1, [sp, #64]	; 0x40
   12d00:	cmp	r9, fp
   12d04:	strbhi	r3, [r1, fp]
   12d08:	add	fp, fp, #1
   12d0c:	ldrb	r3, [r2, #1]!
   12d10:	cmp	r3, #0
   12d14:	bne	12d00 <__assert_fail@plt+0x1b84>
   12d18:	b	12c9c <__assert_fail@plt+0x1b20>
   12d1c:	mov	fp, #0
   12d20:	b	12c9c <__assert_fail@plt+0x1b20>
   12d24:	ldr	r3, [sp, #32]
   12d28:	cmp	r3, #0
   12d2c:	bne	12c0c <__assert_fail@plt+0x1a90>
   12d30:	mov	r3, #1
   12d34:	str	r3, [sp, #28]
   12d38:	cmp	r9, #0
   12d3c:	beq	12df0 <__assert_fail@plt+0x1c74>
   12d40:	mov	r3, #39	; 0x27
   12d44:	ldr	r2, [sp, #64]	; 0x40
   12d48:	strb	r3, [r2]
   12d4c:	mov	r3, #0
   12d50:	str	r3, [sp, #32]
   12d54:	mov	fp, #1
   12d58:	str	fp, [sp, #52]	; 0x34
   12d5c:	movw	r3, #29604	; 0x73a4
   12d60:	movt	r3, #1
   12d64:	str	r3, [sp, #60]	; 0x3c
   12d68:	mov	sl, #2
   12d6c:	b	12c2c <__assert_fail@plt+0x1ab0>
   12d70:	ldr	r3, [sp, #32]
   12d74:	cmp	r3, #0
   12d78:	beq	12d38 <__assert_fail@plt+0x1bbc>
   12d7c:	mov	r3, #1
   12d80:	str	r3, [sp, #52]	; 0x34
   12d84:	movw	r3, #29604	; 0x73a4
   12d88:	movt	r3, #1
   12d8c:	str	r3, [sp, #60]	; 0x3c
   12d90:	mov	fp, #0
   12d94:	b	12c2c <__assert_fail@plt+0x1ab0>
   12d98:	bl	11158 <abort@plt>
   12d9c:	mov	fp, #0
   12da0:	str	fp, [sp, #32]
   12da4:	mov	r3, #1
   12da8:	str	r3, [sp, #28]
   12dac:	b	12c2c <__assert_fail@plt+0x1ab0>
   12db0:	ldr	r3, [sp, #32]
   12db4:	str	r3, [sp, #28]
   12db8:	mov	r3, #1
   12dbc:	str	r3, [sp, #52]	; 0x34
   12dc0:	movw	r3, #29584	; 0x7390
   12dc4:	movt	r3, #1
   12dc8:	str	r3, [sp, #60]	; 0x3c
   12dcc:	mov	fp, #0
   12dd0:	b	12c2c <__assert_fail@plt+0x1ab0>
   12dd4:	mov	fp, #1
   12dd8:	str	fp, [sp, #28]
   12ddc:	str	fp, [sp, #52]	; 0x34
   12de0:	movw	r3, #29584	; 0x7390
   12de4:	movt	r3, #1
   12de8:	str	r3, [sp, #60]	; 0x3c
   12dec:	b	12c2c <__assert_fail@plt+0x1ab0>
   12df0:	mov	r3, #0
   12df4:	str	r3, [sp, #32]
   12df8:	mov	fp, #1
   12dfc:	str	fp, [sp, #52]	; 0x34
   12e00:	movw	r3, #29604	; 0x73a4
   12e04:	movt	r3, #1
   12e08:	str	r3, [sp, #60]	; 0x3c
   12e0c:	mov	sl, #2
   12e10:	b	12c2c <__assert_fail@plt+0x1ab0>
   12e14:	mov	r3, r2
   12e18:	add	r4, r6, r2
   12e1c:	ldr	r2, [sp, #24]
   12e20:	cmp	r3, #1
   12e24:	movls	r3, #0
   12e28:	movhi	r3, #1
   12e2c:	cmn	r2, #1
   12e30:	movne	r3, #0
   12e34:	cmp	r3, #0
   12e38:	beq	12e48 <__assert_fail@plt+0x1ccc>
   12e3c:	ldr	r0, [sp, #48]	; 0x30
   12e40:	bl	11068 <strlen@plt>
   12e44:	str	r0, [sp, #24]
   12e48:	ldr	r3, [sp, #24]
   12e4c:	cmp	r4, r3
   12e50:	bhi	1403c <__assert_fail@plt+0x2ec0>
   12e54:	ldr	r3, [sp, #48]	; 0x30
   12e58:	add	r4, r3, r6
   12e5c:	ldr	r2, [sp, #52]	; 0x34
   12e60:	ldr	r1, [sp, #60]	; 0x3c
   12e64:	mov	r0, r4
   12e68:	bl	10f48 <memcmp@plt>
   12e6c:	cmp	r0, #0
   12e70:	bne	1403c <__assert_fail@plt+0x2ec0>
   12e74:	ldr	r3, [sp, #32]
   12e78:	cmp	r3, #0
   12e7c:	bne	1308c <__assert_fail@plt+0x1f10>
   12e80:	ldrb	r4, [r4]
   12e84:	cmp	r4, #126	; 0x7e
   12e88:	ldrls	pc, [pc, r4, lsl #2]
   12e8c:	b	13940 <__assert_fail@plt+0x27c4>
   12e90:	ldrdeq	r3, [r1], -r0
   12e94:	andeq	r3, r1, r0, asr #18
   12e98:	andeq	r3, r1, r0, asr #18
   12e9c:	andeq	r3, r1, r0, asr #18
   12ea0:	andeq	r3, r1, r0, asr #18
   12ea4:	andeq	r3, r1, r0, asr #18
   12ea8:	andeq	r3, r1, r0, asr #18
   12eac:	andeq	r3, r1, r8, ror #15
   12eb0:	andeq	r3, r1, ip, ror #6
   12eb4:	andeq	r3, r1, r0, lsl r7
   12eb8:			; <UNDEFINED> instruction: 0x000137bc
   12ebc:	andeq	r3, r1, r4, lsr #14
   12ec0:	andeq	r3, r1, r0, lsl #7
   12ec4:	muleq	r1, r4, r3
   12ec8:	andeq	r3, r1, r0, asr #18
   12ecc:	andeq	r3, r1, r0, asr #18
   12ed0:	andeq	r3, r1, r0, asr #18
   12ed4:	andeq	r3, r1, r0, asr #18
   12ed8:	andeq	r3, r1, r0, asr #18
   12edc:	andeq	r3, r1, r0, asr #18
   12ee0:	andeq	r3, r1, r0, asr #18
   12ee4:	andeq	r3, r1, r0, asr #18
   12ee8:	andeq	r3, r1, r0, asr #18
   12eec:	andeq	r3, r1, r0, asr #18
   12ef0:	andeq	r3, r1, r0, asr #18
   12ef4:	andeq	r3, r1, r0, asr #18
   12ef8:	andeq	r3, r1, r0, asr #18
   12efc:	andeq	r3, r1, r0, asr #18
   12f00:	andeq	r3, r1, r0, asr #18
   12f04:	andeq	r3, r1, r0, asr #18
   12f08:	andeq	r3, r1, r0, asr #18
   12f0c:	andeq	r3, r1, r0, asr #18
   12f10:	andeq	r3, r1, ip, asr r8
   12f14:	andeq	r3, r1, r0, lsl #17
   12f18:	andeq	r3, r1, r0, lsl #17
   12f1c:	andeq	r3, r1, r8, lsl r8
   12f20:	andeq	r3, r1, r0, lsl #17
   12f24:	andeq	r3, r1, r0, lsr #27
   12f28:	andeq	r3, r1, r0, lsl #17
   12f2c:	andeq	r3, r1, r0, lsr #17
   12f30:	andeq	r3, r1, r0, lsl #17
   12f34:	andeq	r3, r1, r0, lsl #17
   12f38:	andeq	r3, r1, r0, lsl #17
   12f3c:	andeq	r3, r1, r0, lsr #27
   12f40:	andeq	r3, r1, r0, lsr #27
   12f44:	andeq	r3, r1, r0, lsr #27
   12f48:	andeq	r3, r1, r0, lsr #27
   12f4c:	andeq	r3, r1, r0, lsr #27
   12f50:	andeq	r3, r1, r0, lsr #27
   12f54:	andeq	r3, r1, r0, lsr #27
   12f58:	andeq	r3, r1, r0, lsr #27
   12f5c:	andeq	r3, r1, r0, lsr #27
   12f60:	andeq	r3, r1, r0, lsr #27
   12f64:	andeq	r3, r1, r0, lsr #27
   12f68:	andeq	r3, r1, r0, lsr #27
   12f6c:	andeq	r3, r1, r0, lsr #27
   12f70:	andeq	r3, r1, r0, lsr #27
   12f74:	andeq	r3, r1, r0, lsr #27
   12f78:	andeq	r3, r1, r0, lsr #27
   12f7c:	andeq	r3, r1, r0, lsl #17
   12f80:	andeq	r3, r1, r0, lsl #17
   12f84:	andeq	r3, r1, r0, lsl #17
   12f88:	andeq	r3, r1, r0, lsl #17
   12f8c:	andeq	r3, r1, r0, lsl #4
   12f90:	andeq	r3, r1, r0, asr #18
   12f94:	andeq	r3, r1, r0, lsr #27
   12f98:	andeq	r3, r1, r0, lsr #27
   12f9c:	andeq	r3, r1, r0, lsr #27
   12fa0:	andeq	r3, r1, r0, lsr #27
   12fa4:	andeq	r3, r1, r0, lsr #27
   12fa8:	andeq	r3, r1, r0, lsr #27
   12fac:	andeq	r3, r1, r0, lsr #27
   12fb0:	andeq	r3, r1, r0, lsr #27
   12fb4:	andeq	r3, r1, r0, lsr #27
   12fb8:	andeq	r3, r1, r0, lsr #27
   12fbc:	andeq	r3, r1, r0, lsr #27
   12fc0:	andeq	r3, r1, r0, lsr #27
   12fc4:	andeq	r3, r1, r0, lsr #27
   12fc8:	andeq	r3, r1, r0, lsr #27
   12fcc:	andeq	r3, r1, r0, lsr #27
   12fd0:	andeq	r3, r1, r0, lsr #27
   12fd4:	andeq	r3, r1, r0, lsr #27
   12fd8:	andeq	r3, r1, r0, lsr #27
   12fdc:	andeq	r3, r1, r0, lsr #27
   12fe0:	andeq	r3, r1, r0, lsr #27
   12fe4:	andeq	r3, r1, r0, lsr #27
   12fe8:	andeq	r3, r1, r0, lsr #27
   12fec:	andeq	r3, r1, r0, lsr #27
   12ff0:	andeq	r3, r1, r0, lsr #27
   12ff4:	andeq	r3, r1, r0, lsr #27
   12ff8:	andeq	r3, r1, r0, lsr #27
   12ffc:	andeq	r3, r1, r0, lsl #17
   13000:	andeq	r3, r1, r8, lsr r7
   13004:	andeq	r3, r1, r0, lsr #27
   13008:	andeq	r3, r1, r0, lsl #17
   1300c:	andeq	r3, r1, r0, lsr #27
   13010:	andeq	r3, r1, r0, lsl #17
   13014:	andeq	r3, r1, r0, lsr #27
   13018:	andeq	r3, r1, r0, lsr #27
   1301c:	andeq	r3, r1, r0, lsr #27
   13020:	andeq	r3, r1, r0, lsr #27
   13024:	andeq	r3, r1, r0, lsr #27
   13028:	andeq	r3, r1, r0, lsr #27
   1302c:	andeq	r3, r1, r0, lsr #27
   13030:	andeq	r3, r1, r0, lsr #27
   13034:	andeq	r3, r1, r0, lsr #27
   13038:	andeq	r3, r1, r0, lsr #27
   1303c:	andeq	r3, r1, r0, lsr #27
   13040:	andeq	r3, r1, r0, lsr #27
   13044:	andeq	r3, r1, r0, lsr #27
   13048:	andeq	r3, r1, r0, lsr #27
   1304c:	andeq	r3, r1, r0, lsr #27
   13050:	andeq	r3, r1, r0, lsr #27
   13054:	andeq	r3, r1, r0, lsr #27
   13058:	andeq	r3, r1, r0, lsr #27
   1305c:	andeq	r3, r1, r0, lsr #27
   13060:	andeq	r3, r1, r0, lsr #27
   13064:	andeq	r3, r1, r0, lsr #27
   13068:	andeq	r3, r1, r0, lsr #27
   1306c:	andeq	r3, r1, r0, lsr #27
   13070:	andeq	r3, r1, r0, lsr #27
   13074:	andeq	r3, r1, r0, lsr #27
   13078:	andeq	r3, r1, r0, lsr #27
   1307c:	strdeq	r3, [r1], -r8
   13080:	andeq	r3, r1, r0, lsl #17
   13084:	strdeq	r3, [r1], -r8
   13088:	andeq	r3, r1, r8, lsl r8
   1308c:	mov	r8, r9
   13090:	mov	r7, sl
   13094:	b	13f94 <__assert_fail@plt+0x2e18>
   13098:	ldr	r3, [sp, #28]
   1309c:	cmp	r3, #0
   130a0:	bne	130c0 <__assert_fail@plt+0x1f44>
   130a4:	ldr	r3, [sp, #156]	; 0x9c
   130a8:	tst	r3, #1
   130ac:	bne	134a8 <__assert_fail@plt+0x232c>
   130b0:	ldr	r3, [sp, #28]
   130b4:	str	r3, [sp, #44]	; 0x2c
   130b8:	mov	r5, r3
   130bc:	b	133c8 <__assert_fail@plt+0x224c>
   130c0:	ldr	r3, [sp, #32]
   130c4:	cmp	r3, #0
   130c8:	bne	13f44 <__assert_fail@plt+0x2dc8>
   130cc:	str	r3, [sp, #44]	; 0x2c
   130d0:	ldr	r3, [sp, #36]	; 0x24
   130d4:	eor	r3, r3, #1
   130d8:	cmp	sl, #2
   130dc:	movne	r3, #0
   130e0:	andeq	r3, r3, #1
   130e4:	cmp	r3, #0
   130e8:	beq	13140 <__assert_fail@plt+0x1fc4>
   130ec:	cmp	r9, fp
   130f0:	movhi	r2, #39	; 0x27
   130f4:	strbhi	r2, [r8, fp]
   130f8:	add	r2, fp, #1
   130fc:	cmp	r9, r2
   13100:	movhi	r1, #36	; 0x24
   13104:	strbhi	r1, [r8, r2]
   13108:	add	r2, fp, #2
   1310c:	cmp	r9, r2
   13110:	movhi	r1, #39	; 0x27
   13114:	strbhi	r1, [r8, r2]
   13118:	add	r2, fp, #3
   1311c:	cmp	r9, r2
   13120:	bls	14000 <__assert_fail@plt+0x2e84>
   13124:	mov	r1, #92	; 0x5c
   13128:	strb	r1, [r8, r2]
   1312c:	add	fp, fp, #4
   13130:	str	r3, [sp, #36]	; 0x24
   13134:	mov	r5, #0
   13138:	mov	r4, #48	; 0x30
   1313c:	b	13414 <__assert_fail@plt+0x2298>
   13140:	cmp	r9, fp
   13144:	bhi	1316c <__assert_fail@plt+0x1ff0>
   13148:	add	r1, fp, #1
   1314c:	ldr	r2, [sp, #56]	; 0x38
   13150:	cmp	r2, #0
   13154:	bne	13194 <__assert_fail@plt+0x2018>
   13158:	mov	r3, r5
   1315c:	ldr	r5, [sp, #56]	; 0x38
   13160:	mov	fp, r1
   13164:	mov	r4, #48	; 0x30
   13168:	b	133c8 <__assert_fail@plt+0x224c>
   1316c:	mov	r2, #92	; 0x5c
   13170:	strb	r2, [r8, fp]
   13174:	add	r1, fp, #1
   13178:	ldr	r2, [sp, #56]	; 0x38
   1317c:	cmp	r2, #0
   13180:	moveq	r3, r5
   13184:	moveq	r5, r2
   13188:	moveq	fp, r1
   1318c:	moveq	r4, #48	; 0x30
   13190:	beq	13414 <__assert_fail@plt+0x2298>
   13194:	add	r2, r6, #1
   13198:	ldr	r0, [sp, #24]
   1319c:	cmp	r2, r0
   131a0:	bcs	131bc <__assert_fail@plt+0x2040>
   131a4:	ldr	r0, [sp, #48]	; 0x30
   131a8:	ldrb	r2, [r0, r2]
   131ac:	sub	r2, r2, #48	; 0x30
   131b0:	uxtb	r2, r2
   131b4:	cmp	r2, #9
   131b8:	bls	131d4 <__assert_fail@plt+0x2058>
   131bc:	mov	r2, r3
   131c0:	mov	r3, r5
   131c4:	mov	r5, r2
   131c8:	mov	fp, r1
   131cc:	mov	r4, #48	; 0x30
   131d0:	b	133ec <__assert_fail@plt+0x2270>
   131d4:	cmp	r9, r1
   131d8:	movhi	r2, #48	; 0x30
   131dc:	strbhi	r2, [r8, r1]
   131e0:	add	r2, fp, #2
   131e4:	cmp	r9, r2
   131e8:	movhi	r1, #48	; 0x30
   131ec:	strbhi	r1, [r8, r2]
   131f0:	add	r1, fp, #3
   131f4:	b	131bc <__assert_fail@plt+0x2040>
   131f8:	mov	r3, #0
   131fc:	str	r3, [sp, #44]	; 0x2c
   13200:	cmp	sl, #2
   13204:	beq	13220 <__assert_fail@plt+0x20a4>
   13208:	cmp	sl, #5
   1320c:	beq	13238 <__assert_fail@plt+0x20bc>
   13210:	mov	r5, #0
   13214:	mov	r3, r5
   13218:	mov	r4, #63	; 0x3f
   1321c:	b	133c8 <__assert_fail@plt+0x224c>
   13220:	ldr	r3, [sp, #32]
   13224:	cmp	r3, #0
   13228:	bne	13f50 <__assert_fail@plt+0x2dd4>
   1322c:	mov	r5, r3
   13230:	mov	r4, #63	; 0x3f
   13234:	b	13930 <__assert_fail@plt+0x27b4>
   13238:	ldr	r3, [sp, #156]	; 0x9c
   1323c:	tst	r3, #4
   13240:	beq	13d68 <__assert_fail@plt+0x2bec>
   13244:	add	r2, r6, #2
   13248:	ldr	r3, [sp, #24]
   1324c:	cmp	r2, r3
   13250:	bcs	13d78 <__assert_fail@plt+0x2bfc>
   13254:	ldr	r3, [sp, #48]	; 0x30
   13258:	add	r3, r3, r6
   1325c:	ldrb	r4, [r3, #1]
   13260:	cmp	r4, #63	; 0x3f
   13264:	movne	r5, #0
   13268:	movne	r3, r5
   1326c:	movne	r4, #63	; 0x3f
   13270:	bne	133c8 <__assert_fail@plt+0x224c>
   13274:	ldr	r3, [sp, #48]	; 0x30
   13278:	ldrb	r1, [r3, r2]
   1327c:	sub	r3, r1, #33	; 0x21
   13280:	cmp	r3, #29
   13284:	ldrls	pc, [pc, r3, lsl #2]
   13288:	b	13d88 <__assert_fail@plt+0x2c0c>
   1328c:	andeq	r3, r1, r4, lsl #6
   13290:	andeq	r3, r1, r8, lsl #27
   13294:	andeq	r3, r1, r8, lsl #27
   13298:	andeq	r3, r1, r8, lsl #27
   1329c:	andeq	r3, r1, r8, lsl #27
   132a0:	andeq	r3, r1, r8, lsl #27
   132a4:	andeq	r3, r1, r4, lsl #6
   132a8:	andeq	r3, r1, r4, lsl #6
   132ac:	andeq	r3, r1, r4, lsl #6
   132b0:	andeq	r3, r1, r8, lsl #27
   132b4:	andeq	r3, r1, r8, lsl #27
   132b8:	andeq	r3, r1, r8, lsl #27
   132bc:	andeq	r3, r1, r4, lsl #6
   132c0:	andeq	r3, r1, r8, lsl #27
   132c4:	andeq	r3, r1, r4, lsl #6
   132c8:	andeq	r3, r1, r8, lsl #27
   132cc:	andeq	r3, r1, r8, lsl #27
   132d0:	andeq	r3, r1, r8, lsl #27
   132d4:	andeq	r3, r1, r8, lsl #27
   132d8:	andeq	r3, r1, r8, lsl #27
   132dc:	andeq	r3, r1, r8, lsl #27
   132e0:	andeq	r3, r1, r8, lsl #27
   132e4:	andeq	r3, r1, r8, lsl #27
   132e8:	andeq	r3, r1, r8, lsl #27
   132ec:	andeq	r3, r1, r8, lsl #27
   132f0:	andeq	r3, r1, r8, lsl #27
   132f4:	andeq	r3, r1, r8, lsl #27
   132f8:	andeq	r3, r1, r4, lsl #6
   132fc:	andeq	r3, r1, r4, lsl #6
   13300:	andeq	r3, r1, r4, lsl #6
   13304:	ldr	r3, [sp, #32]
   13308:	cmp	r3, #0
   1330c:	bne	13ff4 <__assert_fail@plt+0x2e78>
   13310:	cmp	r9, fp
   13314:	movhi	r3, #63	; 0x3f
   13318:	strbhi	r3, [r8, fp]
   1331c:	add	r3, fp, #1
   13320:	cmp	r9, r3
   13324:	movhi	r0, #34	; 0x22
   13328:	strbhi	r0, [r8, r3]
   1332c:	add	r3, fp, #2
   13330:	cmp	r9, r3
   13334:	movhi	r0, #34	; 0x22
   13338:	strbhi	r0, [r8, r3]
   1333c:	add	r3, fp, #3
   13340:	cmp	r9, r3
   13344:	movhi	r0, #63	; 0x3f
   13348:	strbhi	r0, [r8, r3]
   1334c:	add	fp, fp, #4
   13350:	ldr	r3, [sp, #32]
   13354:	mov	r5, r3
   13358:	mov	r4, r1
   1335c:	mov	r6, r2
   13360:	b	133c8 <__assert_fail@plt+0x224c>
   13364:	mov	r3, #0
   13368:	str	r3, [sp, #44]	; 0x2c
   1336c:	mov	r4, #8
   13370:	mov	r3, #98	; 0x62
   13374:	b	133b4 <__assert_fail@plt+0x2238>
   13378:	mov	r3, #0
   1337c:	str	r3, [sp, #44]	; 0x2c
   13380:	mov	r4, #12
   13384:	mov	r3, #102	; 0x66
   13388:	b	133b4 <__assert_fail@plt+0x2238>
   1338c:	mov	r3, #0
   13390:	str	r3, [sp, #44]	; 0x2c
   13394:	mov	r4, #13
   13398:	mov	r3, #114	; 0x72
   1339c:	ldr	r2, [sp, #32]
   133a0:	cmp	sl, #2
   133a4:	movne	r2, #0
   133a8:	andeq	r2, r2, #1
   133ac:	cmp	r2, #0
   133b0:	bne	137d4 <__assert_fail@plt+0x2658>
   133b4:	ldr	r2, [sp, #28]
   133b8:	cmp	r2, #0
   133bc:	bne	13dbc <__assert_fail@plt+0x2c40>
   133c0:	mov	r5, r2
   133c4:	mov	r3, r2
   133c8:	ldr	r2, [sp, #28]
   133cc:	eor	r2, r2, #1
   133d0:	cmp	sl, #2
   133d4:	orreq	r2, r2, #1
   133d8:	eor	r2, r2, #1
   133dc:	ldr	r1, [sp, #32]
   133e0:	orr	r2, r1, r2
   133e4:	tst	r2, #255	; 0xff
   133e8:	beq	13414 <__assert_fail@plt+0x2298>
   133ec:	ldr	r2, [sp, #160]	; 0xa0
   133f0:	cmp	r2, #0
   133f4:	beq	13414 <__assert_fail@plt+0x2298>
   133f8:	ubfx	r1, r4, #5, #8
   133fc:	and	r2, r4, #31
   13400:	ldr	r0, [sp, #160]	; 0xa0
   13404:	ldr	r1, [r0, r1, lsl #2]
   13408:	lsr	r2, r1, r2
   1340c:	tst	r2, #1
   13410:	bne	13420 <__assert_fail@plt+0x22a4>
   13414:	ldr	r2, [sp, #44]	; 0x2c
   13418:	cmp	r2, #0
   1341c:	beq	13774 <__assert_fail@plt+0x25f8>
   13420:	ldr	r3, [sp, #32]
   13424:	cmp	r3, #0
   13428:	bne	13f74 <__assert_fail@plt+0x2df8>
   1342c:	ldr	r3, [sp, #36]	; 0x24
   13430:	eor	r3, r3, #1
   13434:	cmp	sl, #2
   13438:	movne	r3, #0
   1343c:	andeq	r3, r3, #1
   13440:	cmp	r3, #0
   13444:	beq	1347c <__assert_fail@plt+0x2300>
   13448:	cmp	r9, fp
   1344c:	movhi	r2, #39	; 0x27
   13450:	strbhi	r2, [r8, fp]
   13454:	add	r2, fp, #1
   13458:	cmp	r9, r2
   1345c:	movhi	r1, #36	; 0x24
   13460:	strbhi	r1, [r8, r2]
   13464:	add	r2, fp, #2
   13468:	cmp	r9, r2
   1346c:	movhi	r1, #39	; 0x27
   13470:	strbhi	r1, [r8, r2]
   13474:	add	fp, fp, #3
   13478:	str	r3, [sp, #36]	; 0x24
   1347c:	cmp	r9, fp
   13480:	movhi	r3, #92	; 0x5c
   13484:	strbhi	r3, [r8, fp]
   13488:	add	fp, fp, #1
   1348c:	cmp	fp, r9
   13490:	strbcc	r4, [r8, fp]
   13494:	add	fp, fp, #1
   13498:	cmp	r5, #0
   1349c:	ldr	r3, [sp, #40]	; 0x28
   134a0:	moveq	r3, r5
   134a4:	str	r3, [sp, #40]	; 0x28
   134a8:	add	r6, r6, #1
   134ac:	ldr	r3, [sp, #24]
   134b0:	cmn	r3, #1
   134b4:	beq	13de4 <__assert_fail@plt+0x2c68>
   134b8:	ldr	r3, [sp, #24]
   134bc:	subs	r5, r3, r6
   134c0:	movne	r5, #1
   134c4:	cmp	r5, #0
   134c8:	beq	13df8 <__assert_fail@plt+0x2c7c>
   134cc:	ldr	r3, [sp, #28]
   134d0:	cmp	sl, #2
   134d4:	moveq	r3, #0
   134d8:	andne	r3, r3, #1
   134dc:	str	r3, [sp, #56]	; 0x38
   134e0:	ldr	r2, [sp, #52]	; 0x34
   134e4:	adds	r7, r2, #0
   134e8:	movne	r7, #1
   134ec:	ands	r3, r3, r7
   134f0:	str	r3, [sp, #44]	; 0x2c
   134f4:	bne	12e14 <__assert_fail@plt+0x1c98>
   134f8:	ldr	r3, [sp, #48]	; 0x30
   134fc:	ldrb	r4, [r3, r6]
   13500:	cmp	r4, #126	; 0x7e
   13504:	ldrls	pc, [pc, r4, lsl #2]
   13508:	b	13940 <__assert_fail@plt+0x27c4>
   1350c:	muleq	r1, r8, r0
   13510:	andeq	r3, r1, r0, asr #18
   13514:	andeq	r3, r1, r0, asr #18
   13518:	andeq	r3, r1, r0, asr #18
   1351c:	andeq	r3, r1, r0, asr #18
   13520:	andeq	r3, r1, r0, asr #18
   13524:	andeq	r3, r1, r0, asr #18
   13528:	andeq	r3, r1, r0, ror #15
   1352c:	andeq	r3, r1, ip, ror #6
   13530:	andeq	r3, r1, r0, lsl r7
   13534:			; <UNDEFINED> instruction: 0x000137b4
   13538:	andeq	r3, r1, r4, lsr #14
   1353c:	andeq	r3, r1, r0, lsl #7
   13540:	muleq	r1, r4, r3
   13544:	andeq	r3, r1, r0, asr #18
   13548:	andeq	r3, r1, r0, asr #18
   1354c:	andeq	r3, r1, r0, asr #18
   13550:	andeq	r3, r1, r0, asr #18
   13554:	andeq	r3, r1, r0, asr #18
   13558:	andeq	r3, r1, r0, asr #18
   1355c:	andeq	r3, r1, r0, asr #18
   13560:	andeq	r3, r1, r0, asr #18
   13564:	andeq	r3, r1, r0, asr #18
   13568:	andeq	r3, r1, r0, asr #18
   1356c:	andeq	r3, r1, r0, asr #18
   13570:	andeq	r3, r1, r0, asr #18
   13574:	andeq	r3, r1, r0, asr #18
   13578:	andeq	r3, r1, r0, asr #18
   1357c:	andeq	r3, r1, r0, asr #18
   13580:	andeq	r3, r1, r0, asr #18
   13584:	andeq	r3, r1, r0, asr #18
   13588:	andeq	r3, r1, r0, asr #18
   1358c:	andeq	r3, r1, ip, asr r8
   13590:	andeq	r3, r1, r8, asr r8
   13594:	andeq	r3, r1, r8, asr r8
   13598:	andeq	r3, r1, r8, lsl r8
   1359c:	andeq	r3, r1, r8, asr r8
   135a0:	andeq	r3, r1, r0, ror #26
   135a4:	andeq	r3, r1, r8, asr r8
   135a8:	andeq	r3, r1, r0, lsr #17
   135ac:	andeq	r3, r1, r8, asr r8
   135b0:	andeq	r3, r1, r8, asr r8
   135b4:	andeq	r3, r1, r8, asr r8
   135b8:	andeq	r3, r1, r0, ror #26
   135bc:	andeq	r3, r1, r0, ror #26
   135c0:	andeq	r3, r1, r0, ror #26
   135c4:	andeq	r3, r1, r0, ror #26
   135c8:	andeq	r3, r1, r0, ror #26
   135cc:	andeq	r3, r1, r0, ror #26
   135d0:	andeq	r3, r1, r0, ror #26
   135d4:	andeq	r3, r1, r0, ror #26
   135d8:	andeq	r3, r1, r0, ror #26
   135dc:	andeq	r3, r1, r0, ror #26
   135e0:	andeq	r3, r1, r0, ror #26
   135e4:	andeq	r3, r1, r0, ror #26
   135e8:	andeq	r3, r1, r0, ror #26
   135ec:	andeq	r3, r1, r0, ror #26
   135f0:	andeq	r3, r1, r0, ror #26
   135f4:	andeq	r3, r1, r0, ror #26
   135f8:	andeq	r3, r1, r8, asr r8
   135fc:	andeq	r3, r1, r8, asr r8
   13600:	andeq	r3, r1, r8, asr r8
   13604:	andeq	r3, r1, r8, asr r8
   13608:	andeq	r3, r1, r0, lsl #4
   1360c:	andeq	r3, r1, r0, asr #18
   13610:	andeq	r3, r1, r0, ror #26
   13614:	andeq	r3, r1, r0, ror #26
   13618:	andeq	r3, r1, r0, ror #26
   1361c:	andeq	r3, r1, r0, ror #26
   13620:	andeq	r3, r1, r0, ror #26
   13624:	andeq	r3, r1, r0, ror #26
   13628:	andeq	r3, r1, r0, ror #26
   1362c:	andeq	r3, r1, r0, ror #26
   13630:	andeq	r3, r1, r0, ror #26
   13634:	andeq	r3, r1, r0, ror #26
   13638:	andeq	r3, r1, r0, ror #26
   1363c:	andeq	r3, r1, r0, ror #26
   13640:	andeq	r3, r1, r0, ror #26
   13644:	andeq	r3, r1, r0, ror #26
   13648:	andeq	r3, r1, r0, ror #26
   1364c:	andeq	r3, r1, r0, ror #26
   13650:	andeq	r3, r1, r0, ror #26
   13654:	andeq	r3, r1, r0, ror #26
   13658:	andeq	r3, r1, r0, ror #26
   1365c:	andeq	r3, r1, r0, ror #26
   13660:	andeq	r3, r1, r0, ror #26
   13664:	andeq	r3, r1, r0, ror #26
   13668:	andeq	r3, r1, r0, ror #26
   1366c:	andeq	r3, r1, r0, ror #26
   13670:	andeq	r3, r1, r0, ror #26
   13674:	andeq	r3, r1, r0, ror #26
   13678:	andeq	r3, r1, r8, asr r8
   1367c:	andeq	r3, r1, r8, lsr r7
   13680:	andeq	r3, r1, r0, ror #26
   13684:	andeq	r3, r1, r8, asr r8
   13688:	andeq	r3, r1, r0, ror #26
   1368c:	andeq	r3, r1, r8, asr r8
   13690:	andeq	r3, r1, r0, ror #26
   13694:	andeq	r3, r1, r0, ror #26
   13698:	andeq	r3, r1, r0, ror #26
   1369c:	andeq	r3, r1, r0, ror #26
   136a0:	andeq	r3, r1, r0, ror #26
   136a4:	andeq	r3, r1, r0, ror #26
   136a8:	andeq	r3, r1, r0, ror #26
   136ac:	andeq	r3, r1, r0, ror #26
   136b0:	andeq	r3, r1, r0, ror #26
   136b4:	andeq	r3, r1, r0, ror #26
   136b8:	andeq	r3, r1, r0, ror #26
   136bc:	andeq	r3, r1, r0, ror #26
   136c0:	andeq	r3, r1, r0, ror #26
   136c4:	andeq	r3, r1, r0, ror #26
   136c8:	andeq	r3, r1, r0, ror #26
   136cc:	andeq	r3, r1, r0, ror #26
   136d0:	andeq	r3, r1, r0, ror #26
   136d4:	andeq	r3, r1, r0, ror #26
   136d8:	andeq	r3, r1, r0, ror #26
   136dc:	andeq	r3, r1, r0, ror #26
   136e0:	andeq	r3, r1, r0, ror #26
   136e4:	andeq	r3, r1, r0, ror #26
   136e8:	andeq	r3, r1, r0, ror #26
   136ec:	andeq	r3, r1, r0, ror #26
   136f0:	andeq	r3, r1, r0, ror #26
   136f4:	andeq	r3, r1, r0, ror #26
   136f8:	strdeq	r3, [r1], -r8
   136fc:	andeq	r3, r1, r8, asr r8
   13700:	strdeq	r3, [r1], -r8
   13704:	andeq	r3, r1, r8, lsl r8
   13708:	mov	r3, #0
   1370c:	str	r3, [sp, #44]	; 0x2c
   13710:	mov	r4, #9
   13714:	mov	r3, #116	; 0x74
   13718:	b	1339c <__assert_fail@plt+0x2220>
   1371c:	mov	r3, #0
   13720:	str	r3, [sp, #44]	; 0x2c
   13724:	mov	r4, #11
   13728:	mov	r3, #118	; 0x76
   1372c:	b	133b4 <__assert_fail@plt+0x2238>
   13730:	mov	r3, #0
   13734:	str	r3, [sp, #44]	; 0x2c
   13738:	cmp	sl, #2
   1373c:	beq	13760 <__assert_fail@plt+0x25e4>
   13740:	ldr	r3, [sp, #28]
   13744:	ldr	r2, [sp, #32]
   13748:	and	r3, r3, r2
   1374c:	tst	r7, r3
   13750:	bne	13dd4 <__assert_fail@plt+0x2c58>
   13754:	mov	r4, #92	; 0x5c
   13758:	mov	r3, r4
   1375c:	b	133b4 <__assert_fail@plt+0x2238>
   13760:	ldr	r3, [sp, #32]
   13764:	cmp	r3, #0
   13768:	bne	13f5c <__assert_fail@plt+0x2de0>
   1376c:	mov	r5, r3
   13770:	mov	r4, #92	; 0x5c
   13774:	eor	r3, r3, #1
   13778:	ldr	r2, [sp, #36]	; 0x24
   1377c:	and	r3, r3, r2
   13780:	tst	r3, #255	; 0xff
   13784:	beq	1348c <__assert_fail@plt+0x2310>
   13788:	cmp	r9, fp
   1378c:	movhi	r3, #39	; 0x27
   13790:	strbhi	r3, [r8, fp]
   13794:	add	r3, fp, #1
   13798:	cmp	r9, r3
   1379c:	movhi	r2, #39	; 0x27
   137a0:	strbhi	r2, [r8, r3]
   137a4:	add	fp, fp, #2
   137a8:	mov	r3, #0
   137ac:	str	r3, [sp, #36]	; 0x24
   137b0:	b	1348c <__assert_fail@plt+0x2310>
   137b4:	mov	r3, #110	; 0x6e
   137b8:	b	1339c <__assert_fail@plt+0x2220>
   137bc:	mov	r3, #110	; 0x6e
   137c0:	b	1339c <__assert_fail@plt+0x2220>
   137c4:	mov	r3, #0
   137c8:	str	r3, [sp, #44]	; 0x2c
   137cc:	mov	r3, #110	; 0x6e
   137d0:	b	1339c <__assert_fail@plt+0x2220>
   137d4:	mov	r8, r9
   137d8:	mov	r7, #2
   137dc:	b	13f7c <__assert_fail@plt+0x2e00>
   137e0:	mov	r3, #97	; 0x61
   137e4:	b	133b4 <__assert_fail@plt+0x2238>
   137e8:	mov	r3, #97	; 0x61
   137ec:	b	133b4 <__assert_fail@plt+0x2238>
   137f0:	mov	r3, #0
   137f4:	str	r3, [sp, #44]	; 0x2c
   137f8:	ldr	r3, [sp, #24]
   137fc:	cmn	r3, #1
   13800:	beq	1382c <__assert_fail@plt+0x26b0>
   13804:	ldr	r3, [sp, #24]
   13808:	subs	r3, r3, #1
   1380c:	movne	r3, #1
   13810:	cmp	r3, #0
   13814:	bne	13d94 <__assert_fail@plt+0x2c18>
   13818:	cmp	r6, #0
   1381c:	beq	1385c <__assert_fail@plt+0x26e0>
   13820:	mov	r5, #0
   13824:	mov	r3, r5
   13828:	b	133c8 <__assert_fail@plt+0x224c>
   1382c:	ldr	r3, [sp, #48]	; 0x30
   13830:	ldrb	r3, [r3, #1]
   13834:	adds	r3, r3, #0
   13838:	movne	r3, #1
   1383c:	b	13810 <__assert_fail@plt+0x2694>
   13840:	mov	r3, #0
   13844:	str	r3, [sp, #44]	; 0x2c
   13848:	b	13818 <__assert_fail@plt+0x269c>
   1384c:	mov	r3, #0
   13850:	str	r3, [sp, #44]	; 0x2c
   13854:	b	1385c <__assert_fail@plt+0x26e0>
   13858:	ldr	r5, [sp, #44]	; 0x2c
   1385c:	ldr	r3, [sp, #32]
   13860:	cmp	sl, #2
   13864:	movne	r3, #0
   13868:	andeq	r3, r3, #1
   1386c:	cmp	r3, #0
   13870:	beq	133c8 <__assert_fail@plt+0x224c>
   13874:	mov	r8, r9
   13878:	mov	r7, #2
   1387c:	b	13f7c <__assert_fail@plt+0x2e00>
   13880:	ldr	r5, [sp, #32]
   13884:	b	1385c <__assert_fail@plt+0x26e0>
   13888:	mov	r3, #0
   1388c:	str	r3, [sp, #44]	; 0x2c
   13890:	mov	r5, r3
   13894:	b	1385c <__assert_fail@plt+0x26e0>
   13898:	mov	r3, #0
   1389c:	str	r3, [sp, #44]	; 0x2c
   138a0:	cmp	sl, #2
   138a4:	strne	r5, [sp, #68]	; 0x44
   138a8:	movne	r3, #0
   138ac:	movne	r4, #39	; 0x27
   138b0:	bne	133c8 <__assert_fail@plt+0x224c>
   138b4:	ldr	r3, [sp, #32]
   138b8:	cmp	r3, #0
   138bc:	bne	13f68 <__assert_fail@plt+0x2dec>
   138c0:	ldr	r3, [sp, #72]	; 0x48
   138c4:	clz	r3, r3
   138c8:	lsr	r3, r3, #5
   138cc:	cmp	r9, #0
   138d0:	moveq	r3, #0
   138d4:	cmp	r3, #0
   138d8:	movne	r3, #0
   138dc:	bne	13904 <__assert_fail@plt+0x2788>
   138e0:	cmp	r9, fp
   138e4:	movhi	r3, #39	; 0x27
   138e8:	strbhi	r3, [r8, fp]
   138ec:	add	r3, fp, #1
   138f0:	cmp	r9, r3
   138f4:	movhi	r2, #92	; 0x5c
   138f8:	strbhi	r2, [r8, r3]
   138fc:	mov	r3, r9
   13900:	ldr	r9, [sp, #72]	; 0x48
   13904:	add	r2, fp, #2
   13908:	cmp	r2, r3
   1390c:	movcc	r1, #39	; 0x27
   13910:	strbcc	r1, [r8, r2]
   13914:	add	fp, fp, #3
   13918:	str	r5, [sp, #68]	; 0x44
   1391c:	ldr	r2, [sp, #32]
   13920:	str	r2, [sp, #36]	; 0x24
   13924:	str	r9, [sp, #72]	; 0x48
   13928:	mov	r9, r3
   1392c:	mov	r4, #39	; 0x27
   13930:	mov	r3, #0
   13934:	b	13414 <__assert_fail@plt+0x2298>
   13938:	mov	r3, #0
   1393c:	str	r3, [sp, #44]	; 0x2c
   13940:	ldr	r7, [sp, #76]	; 0x4c
   13944:	cmp	r7, #1
   13948:	bne	13980 <__assert_fail@plt+0x2804>
   1394c:	bl	11044 <__ctype_b_loc@plt>
   13950:	ldr	r2, [r0]
   13954:	lsl	r3, r4, #1
   13958:	ldrh	r5, [r2, r3]
   1395c:	ubfx	r5, r5, #14, #1
   13960:	mov	ip, r7
   13964:	eor	r3, r5, #1
   13968:	ldr	r2, [sp, #28]
   1396c:	and	r3, r3, r2
   13970:	ands	r3, r3, #255	; 0xff
   13974:	beq	133c8 <__assert_fail@plt+0x224c>
   13978:	mov	r5, #0
   1397c:	b	13bdc <__assert_fail@plt+0x2a60>
   13980:	mov	r2, #0
   13984:	mov	r3, #0
   13988:	strd	r2, [sp, #104]	; 0x68
   1398c:	ldr	r3, [sp, #24]
   13990:	cmn	r3, #1
   13994:	beq	139b8 <__assert_fail@plt+0x283c>
   13998:	mov	r3, #0
   1399c:	str	r4, [sp, #88]	; 0x58
   139a0:	str	fp, [sp, #92]	; 0x5c
   139a4:	str	r8, [sp, #56]	; 0x38
   139a8:	mov	r8, r3
   139ac:	str	r9, [sp, #84]	; 0x54
   139b0:	ldr	r9, [sp, #48]	; 0x30
   139b4:	b	13b04 <__assert_fail@plt+0x2988>
   139b8:	ldr	r0, [sp, #48]	; 0x30
   139bc:	bl	11068 <strlen@plt>
   139c0:	str	r0, [sp, #24]
   139c4:	b	13998 <__assert_fail@plt+0x281c>
   139c8:	mov	r1, fp
   139cc:	ldr	r4, [sp, #88]	; 0x58
   139d0:	mov	r2, r8
   139d4:	mov	ip, r8
   139d8:	ldr	fp, [sp, #92]	; 0x5c
   139dc:	ldr	r8, [sp, #56]	; 0x38
   139e0:	ldr	r9, [sp, #84]	; 0x54
   139e4:	ldr	r0, [sp, #24]
   139e8:	cmp	r7, r0
   139ec:	bcs	13ba4 <__assert_fail@plt+0x2a28>
   139f0:	ldrb	r3, [r1]
   139f4:	cmp	r3, #0
   139f8:	beq	13bac <__assert_fail@plt+0x2a30>
   139fc:	mov	r3, r1
   13a00:	add	r2, r2, #1
   13a04:	add	r1, r6, r2
   13a08:	cmp	r0, r1
   13a0c:	bls	13bb4 <__assert_fail@plt+0x2a38>
   13a10:	ldrb	r1, [r3, #1]!
   13a14:	cmp	r1, #0
   13a18:	bne	13a00 <__assert_fail@plt+0x2884>
   13a1c:	mov	ip, r2
   13a20:	mov	r5, #0
   13a24:	b	13bd4 <__assert_fail@plt+0x2a58>
   13a28:	ldr	r3, [sp, #56]	; 0x38
   13a2c:	str	r3, [sp, #64]	; 0x40
   13a30:	ldr	r8, [sp, #84]	; 0x54
   13a34:	mov	r7, #2
   13a38:	b	13f7c <__assert_fail@plt+0x2e00>
   13a3c:	cmp	r2, r7
   13a40:	beq	13ae0 <__assert_fail@plt+0x2964>
   13a44:	ldrb	r3, [r2], #1
   13a48:	sub	r3, r3, #91	; 0x5b
   13a4c:	cmp	r3, #33	; 0x21
   13a50:	ldrls	pc, [pc, r3, lsl #2]
   13a54:	b	13a3c <__assert_fail@plt+0x28c0>
   13a58:	andeq	r3, r1, r8, lsr #20
   13a5c:	andeq	r3, r1, r8, lsr #20
   13a60:	andeq	r3, r1, ip, lsr sl
   13a64:	andeq	r3, r1, r8, lsr #20
   13a68:	andeq	r3, r1, ip, lsr sl
   13a6c:	andeq	r3, r1, r8, lsr #20
   13a70:	andeq	r3, r1, ip, lsr sl
   13a74:	andeq	r3, r1, ip, lsr sl
   13a78:	andeq	r3, r1, ip, lsr sl
   13a7c:	andeq	r3, r1, ip, lsr sl
   13a80:	andeq	r3, r1, ip, lsr sl
   13a84:	andeq	r3, r1, ip, lsr sl
   13a88:	andeq	r3, r1, ip, lsr sl
   13a8c:	andeq	r3, r1, ip, lsr sl
   13a90:	andeq	r3, r1, ip, lsr sl
   13a94:	andeq	r3, r1, ip, lsr sl
   13a98:	andeq	r3, r1, ip, lsr sl
   13a9c:	andeq	r3, r1, ip, lsr sl
   13aa0:	andeq	r3, r1, ip, lsr sl
   13aa4:	andeq	r3, r1, ip, lsr sl
   13aa8:	andeq	r3, r1, ip, lsr sl
   13aac:	andeq	r3, r1, ip, lsr sl
   13ab0:	andeq	r3, r1, ip, lsr sl
   13ab4:	andeq	r3, r1, ip, lsr sl
   13ab8:	andeq	r3, r1, ip, lsr sl
   13abc:	andeq	r3, r1, ip, lsr sl
   13ac0:	andeq	r3, r1, ip, lsr sl
   13ac4:	andeq	r3, r1, ip, lsr sl
   13ac8:	andeq	r3, r1, ip, lsr sl
   13acc:	andeq	r3, r1, ip, lsr sl
   13ad0:	andeq	r3, r1, ip, lsr sl
   13ad4:	andeq	r3, r1, ip, lsr sl
   13ad8:	andeq	r3, r1, ip, lsr sl
   13adc:	andeq	r3, r1, r8, lsr #20
   13ae0:	ldr	r0, [sp, #100]	; 0x64
   13ae4:	bl	10f90 <iswprint@plt>
   13ae8:	cmp	r0, #0
   13aec:	moveq	r5, #0
   13af0:	add	r8, r8, r4
   13af4:	add	r0, sp, #104	; 0x68
   13af8:	bl	10f3c <mbsinit@plt>
   13afc:	cmp	r0, #0
   13b00:	bne	13b70 <__assert_fail@plt+0x29f4>
   13b04:	add	r7, r6, r8
   13b08:	add	fp, r9, r7
   13b0c:	add	r3, sp, #104	; 0x68
   13b10:	ldr	r2, [sp, #24]
   13b14:	sub	r2, r2, r7
   13b18:	mov	r1, fp
   13b1c:	add	r0, sp, #100	; 0x64
   13b20:	bl	163f0 <__assert_fail@plt+0x5274>
   13b24:	subs	r4, r0, #0
   13b28:	beq	13bc0 <__assert_fail@plt+0x2a44>
   13b2c:	cmn	r4, #1
   13b30:	beq	13b88 <__assert_fail@plt+0x2a0c>
   13b34:	cmn	r4, #2
   13b38:	beq	139c8 <__assert_fail@plt+0x284c>
   13b3c:	ldr	r3, [sp, #32]
   13b40:	cmp	sl, #2
   13b44:	movne	r3, #0
   13b48:	andeq	r3, r3, #1
   13b4c:	cmp	r3, #0
   13b50:	beq	13ae0 <__assert_fail@plt+0x2964>
   13b54:	cmp	r4, #1
   13b58:	bls	13ae0 <__assert_fail@plt+0x2964>
   13b5c:	add	r2, r7, #1
   13b60:	add	r2, r9, r2
   13b64:	add	r3, r9, r4
   13b68:	add	r7, r3, r7
   13b6c:	b	13a44 <__assert_fail@plt+0x28c8>
   13b70:	ldr	r4, [sp, #88]	; 0x58
   13b74:	mov	ip, r8
   13b78:	ldr	fp, [sp, #92]	; 0x5c
   13b7c:	ldr	r8, [sp, #56]	; 0x38
   13b80:	ldr	r9, [sp, #84]	; 0x54
   13b84:	b	13bd4 <__assert_fail@plt+0x2a58>
   13b88:	ldr	r4, [sp, #88]	; 0x58
   13b8c:	mov	ip, r8
   13b90:	ldr	fp, [sp, #92]	; 0x5c
   13b94:	ldr	r8, [sp, #56]	; 0x38
   13b98:	ldr	r9, [sp, #84]	; 0x54
   13b9c:	mov	r5, #0
   13ba0:	b	13bd4 <__assert_fail@plt+0x2a58>
   13ba4:	mov	r5, #0
   13ba8:	b	13bd4 <__assert_fail@plt+0x2a58>
   13bac:	mov	r5, #0
   13bb0:	b	13bd4 <__assert_fail@plt+0x2a58>
   13bb4:	mov	ip, r2
   13bb8:	mov	r5, #0
   13bbc:	b	13bd4 <__assert_fail@plt+0x2a58>
   13bc0:	ldr	r4, [sp, #88]	; 0x58
   13bc4:	mov	ip, r8
   13bc8:	ldr	fp, [sp, #92]	; 0x5c
   13bcc:	ldr	r8, [sp, #56]	; 0x38
   13bd0:	ldr	r9, [sp, #84]	; 0x54
   13bd4:	cmp	ip, #1
   13bd8:	bls	13964 <__assert_fail@plt+0x27e8>
   13bdc:	add	lr, r6, ip
   13be0:	ldr	r3, [sp, #48]	; 0x30
   13be4:	add	r1, r3, r6
   13be8:	mov	r3, #0
   13bec:	eor	r0, r5, #1
   13bf0:	ldr	r2, [sp, #28]
   13bf4:	and	r0, r0, r2
   13bf8:	uxtb	r0, r0
   13bfc:	str	r0, [sp, #56]	; 0x38
   13c00:	mov	r7, #92	; 0x5c
   13c04:	ldr	ip, [sp, #36]	; 0x24
   13c08:	str	r5, [sp, #84]	; 0x54
   13c0c:	ldr	r2, [sp, #44]	; 0x2c
   13c10:	b	13c80 <__assert_fail@plt+0x2b04>
   13c14:	cmp	r2, #0
   13c18:	beq	13c28 <__assert_fail@plt+0x2aac>
   13c1c:	cmp	r9, fp
   13c20:	strbhi	r7, [r8, fp]
   13c24:	add	fp, fp, #1
   13c28:	add	r5, r6, #1
   13c2c:	cmp	r5, lr
   13c30:	bcs	13d3c <__assert_fail@plt+0x2bc0>
   13c34:	eor	r2, r3, #1
   13c38:	and	r2, r2, ip
   13c3c:	ands	r2, r2, #255	; 0xff
   13c40:	beq	13d58 <__assert_fail@plt+0x2bdc>
   13c44:	cmp	r9, fp
   13c48:	movhi	r2, #39	; 0x27
   13c4c:	strbhi	r2, [r8, fp]
   13c50:	add	r2, fp, #1
   13c54:	cmp	r9, r2
   13c58:	movhi	ip, #39	; 0x27
   13c5c:	strbhi	ip, [r8, r2]
   13c60:	add	fp, fp, #2
   13c64:	ldr	ip, [sp, #56]	; 0x38
   13c68:	mov	r2, ip
   13c6c:	mov	r6, r5
   13c70:	cmp	r9, fp
   13c74:	strbhi	r4, [r8, fp]
   13c78:	add	fp, fp, #1
   13c7c:	ldrb	r4, [r1, #1]!
   13c80:	cmp	r0, #0
   13c84:	beq	13c14 <__assert_fail@plt+0x2a98>
   13c88:	ldr	r3, [sp, #32]
   13c8c:	cmp	r3, #0
   13c90:	bne	13f24 <__assert_fail@plt+0x2da8>
   13c94:	eor	r3, ip, #1
   13c98:	cmp	sl, #2
   13c9c:	movne	r3, #0
   13ca0:	andeq	r3, r3, #1
   13ca4:	cmp	r3, #0
   13ca8:	beq	13ce0 <__assert_fail@plt+0x2b64>
   13cac:	cmp	r9, fp
   13cb0:	movhi	ip, #39	; 0x27
   13cb4:	strbhi	ip, [r8, fp]
   13cb8:	add	ip, fp, #1
   13cbc:	cmp	r9, ip
   13cc0:	movhi	r5, #36	; 0x24
   13cc4:	strbhi	r5, [r8, ip]
   13cc8:	add	ip, fp, #2
   13ccc:	cmp	r9, ip
   13cd0:	movhi	r5, #39	; 0x27
   13cd4:	strbhi	r5, [r8, ip]
   13cd8:	add	fp, fp, #3
   13cdc:	mov	ip, r3
   13ce0:	cmp	r9, fp
   13ce4:	strbhi	r7, [r8, fp]
   13ce8:	add	r3, fp, #1
   13cec:	cmp	r9, r3
   13cf0:	bls	13d00 <__assert_fail@plt+0x2b84>
   13cf4:	lsr	r5, r4, #6
   13cf8:	add	r5, r5, #48	; 0x30
   13cfc:	strb	r5, [r8, r3]
   13d00:	add	r3, fp, #2
   13d04:	cmp	r9, r3
   13d08:	bls	13d18 <__assert_fail@plt+0x2b9c>
   13d0c:	ubfx	r5, r4, #3, #3
   13d10:	add	r5, r5, #48	; 0x30
   13d14:	strb	r5, [r8, r3]
   13d18:	add	fp, fp, #3
   13d1c:	and	r4, r4, #7
   13d20:	add	r4, r4, #48	; 0x30
   13d24:	add	r5, r6, #1
   13d28:	cmp	r5, lr
   13d2c:	bcs	13d48 <__assert_fail@plt+0x2bcc>
   13d30:	ldr	r3, [sp, #56]	; 0x38
   13d34:	mov	r6, r5
   13d38:	b	13c70 <__assert_fail@plt+0x2af4>
   13d3c:	str	ip, [sp, #36]	; 0x24
   13d40:	ldr	r5, [sp, #84]	; 0x54
   13d44:	b	13774 <__assert_fail@plt+0x25f8>
   13d48:	str	ip, [sp, #36]	; 0x24
   13d4c:	ldr	r5, [sp, #84]	; 0x54
   13d50:	mov	r3, r0
   13d54:	b	13774 <__assert_fail@plt+0x25f8>
   13d58:	mov	r6, r5
   13d5c:	b	13c70 <__assert_fail@plt+0x2af4>
   13d60:	ldr	r3, [sp, #44]	; 0x2c
   13d64:	b	133c8 <__assert_fail@plt+0x224c>
   13d68:	mov	r5, #0
   13d6c:	mov	r3, r5
   13d70:	mov	r4, #63	; 0x3f
   13d74:	b	133c8 <__assert_fail@plt+0x224c>
   13d78:	mov	r5, #0
   13d7c:	mov	r3, r5
   13d80:	mov	r4, #63	; 0x3f
   13d84:	b	133c8 <__assert_fail@plt+0x224c>
   13d88:	mov	r5, #0
   13d8c:	mov	r3, r5
   13d90:	b	133c8 <__assert_fail@plt+0x224c>
   13d94:	mov	r5, #0
   13d98:	mov	r3, r5
   13d9c:	b	133c8 <__assert_fail@plt+0x224c>
   13da0:	ldr	r5, [sp, #44]	; 0x2c
   13da4:	ldr	r3, [sp, #32]
   13da8:	b	133c8 <__assert_fail@plt+0x224c>
   13dac:	ldr	r5, [sp, #44]	; 0x2c
   13db0:	mov	r3, #0
   13db4:	str	r3, [sp, #44]	; 0x2c
   13db8:	b	133c8 <__assert_fail@plt+0x224c>
   13dbc:	mov	r4, r3
   13dc0:	mov	r5, #0
   13dc4:	b	13420 <__assert_fail@plt+0x22a4>
   13dc8:	mov	r5, #0
   13dcc:	mov	r4, #97	; 0x61
   13dd0:	b	13420 <__assert_fail@plt+0x22a4>
   13dd4:	mov	r5, #0
   13dd8:	mov	r3, r5
   13ddc:	mov	r4, #92	; 0x5c
   13de0:	b	13774 <__assert_fail@plt+0x25f8>
   13de4:	ldr	r3, [sp, #48]	; 0x30
   13de8:	ldrb	r5, [r3, r6]
   13dec:	adds	r5, r5, #0
   13df0:	movne	r5, #1
   13df4:	b	134c4 <__assert_fail@plt+0x2348>
   13df8:	cmp	sl, #2
   13dfc:	movne	r3, #0
   13e00:	moveq	r3, #1
   13e04:	ldr	r1, [sp, #32]
   13e08:	cmp	fp, #0
   13e0c:	andeq	r2, r3, r1
   13e10:	movne	r2, #0
   13e14:	cmp	r2, #0
   13e18:	bne	13f38 <__assert_fail@plt+0x2dbc>
   13e1c:	eor	r2, r1, #1
   13e20:	uxtb	r2, r2
   13e24:	and	r3, r3, r2
   13e28:	ldr	r1, [sp, #68]	; 0x44
   13e2c:	ands	r3, r1, r3
   13e30:	beq	13ec4 <__assert_fail@plt+0x2d48>
   13e34:	ldr	r2, [sp, #40]	; 0x28
   13e38:	cmp	r2, #0
   13e3c:	bne	13e74 <__assert_fail@plt+0x2cf8>
   13e40:	ldr	r2, [sp, #72]	; 0x48
   13e44:	adds	r2, r2, #0
   13e48:	movne	r2, #1
   13e4c:	cmp	r9, #0
   13e50:	movne	r2, #0
   13e54:	str	r2, [sp, #68]	; 0x44
   13e58:	mov	sl, #2
   13e5c:	ldr	r1, [sp, #40]	; 0x28
   13e60:	str	r1, [sp, #32]
   13e64:	cmp	r2, #0
   13e68:	beq	13eb8 <__assert_fail@plt+0x2d3c>
   13e6c:	ldr	r9, [sp, #72]	; 0x48
   13e70:	b	12bcc <__assert_fail@plt+0x1a50>
   13e74:	ldr	r3, [sp, #168]	; 0xa8
   13e78:	str	r3, [sp, #16]
   13e7c:	ldr	r3, [sp, #164]	; 0xa4
   13e80:	str	r3, [sp, #12]
   13e84:	ldr	r3, [sp, #160]	; 0xa0
   13e88:	str	r3, [sp, #8]
   13e8c:	ldr	r3, [sp, #156]	; 0x9c
   13e90:	str	r3, [sp, #4]
   13e94:	mov	r3, #5
   13e98:	str	r3, [sp]
   13e9c:	ldr	r3, [sp, #24]
   13ea0:	ldr	r2, [sp, #48]	; 0x30
   13ea4:	ldr	r1, [sp, #72]	; 0x48
   13ea8:	ldr	r0, [sp, #64]	; 0x40
   13eac:	bl	12b54 <__assert_fail@plt+0x19d8>
   13eb0:	mov	fp, r0
   13eb4:	b	13fd4 <__assert_fail@plt+0x2e58>
   13eb8:	mov	r8, r9
   13ebc:	mov	r2, r3
   13ec0:	b	13ec8 <__assert_fail@plt+0x2d4c>
   13ec4:	mov	r8, r9
   13ec8:	ldr	r3, [sp, #60]	; 0x3c
   13ecc:	cmp	r3, #0
   13ed0:	moveq	r2, #0
   13ed4:	andne	r2, r2, #1
   13ed8:	cmp	r2, #0
   13edc:	beq	13f0c <__assert_fail@plt+0x2d90>
   13ee0:	mov	r2, r3
   13ee4:	ldrb	r3, [r3]
   13ee8:	cmp	r3, #0
   13eec:	beq	13f0c <__assert_fail@plt+0x2d90>
   13ef0:	ldr	r1, [sp, #64]	; 0x40
   13ef4:	cmp	r8, fp
   13ef8:	strbhi	r3, [r1, fp]
   13efc:	add	fp, fp, #1
   13f00:	ldrb	r3, [r2, #1]!
   13f04:	cmp	r3, #0
   13f08:	bne	13ef4 <__assert_fail@plt+0x2d78>
   13f0c:	cmp	r8, fp
   13f10:	bls	13fd4 <__assert_fail@plt+0x2e58>
   13f14:	mov	r3, #0
   13f18:	ldr	r2, [sp, #64]	; 0x40
   13f1c:	strb	r3, [r2, fp]
   13f20:	b	13fd4 <__assert_fail@plt+0x2e58>
   13f24:	mov	r8, r9
   13f28:	mov	r7, sl
   13f2c:	ldr	r3, [sp, #32]
   13f30:	str	r3, [sp, #28]
   13f34:	b	13f7c <__assert_fail@plt+0x2e00>
   13f38:	mov	r8, r9
   13f3c:	mov	r7, #2
   13f40:	b	13f7c <__assert_fail@plt+0x2e00>
   13f44:	mov	r8, r9
   13f48:	mov	r7, sl
   13f4c:	b	13f7c <__assert_fail@plt+0x2e00>
   13f50:	mov	r8, r9
   13f54:	mov	r7, sl
   13f58:	b	13f7c <__assert_fail@plt+0x2e00>
   13f5c:	mov	r8, r9
   13f60:	mov	r7, sl
   13f64:	b	13f7c <__assert_fail@plt+0x2e00>
   13f68:	mov	r8, r9
   13f6c:	mov	r7, sl
   13f70:	b	13f7c <__assert_fail@plt+0x2e00>
   13f74:	mov	r8, r9
   13f78:	mov	r7, sl
   13f7c:	ldr	r3, [sp, #28]
   13f80:	cmp	r7, #2
   13f84:	movne	r3, #0
   13f88:	andeq	r3, r3, #1
   13f8c:	cmp	r3, #0
   13f90:	movne	r7, #4
   13f94:	ldr	r3, [sp, #168]	; 0xa8
   13f98:	str	r3, [sp, #16]
   13f9c:	ldr	r3, [sp, #164]	; 0xa4
   13fa0:	str	r3, [sp, #12]
   13fa4:	mov	r3, #0
   13fa8:	str	r3, [sp, #8]
   13fac:	ldr	r3, [sp, #156]	; 0x9c
   13fb0:	bic	r3, r3, #2
   13fb4:	str	r3, [sp, #4]
   13fb8:	str	r7, [sp]
   13fbc:	ldr	r3, [sp, #24]
   13fc0:	ldr	r2, [sp, #48]	; 0x30
   13fc4:	mov	r1, r8
   13fc8:	ldr	r0, [sp, #64]	; 0x40
   13fcc:	bl	12b54 <__assert_fail@plt+0x19d8>
   13fd0:	mov	fp, r0
   13fd4:	mov	r0, fp
   13fd8:	add	sp, sp, #116	; 0x74
   13fdc:	ldrd	r4, [sp]
   13fe0:	ldrd	r6, [sp, #8]
   13fe4:	ldrd	r8, [sp, #16]
   13fe8:	ldrd	sl, [sp, #24]
   13fec:	add	sp, sp, #32
   13ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ff4:	mov	r8, r9
   13ff8:	mov	r7, sl
   13ffc:	b	13f94 <__assert_fail@plt+0x2e18>
   14000:	add	fp, fp, #4
   14004:	str	r3, [sp, #36]	; 0x24
   14008:	mov	r5, #0
   1400c:	mov	r4, #48	; 0x30
   14010:	b	133c8 <__assert_fail@plt+0x224c>
   14014:	mov	r3, #1
   14018:	str	r3, [sp, #32]
   1401c:	str	r3, [sp, #28]
   14020:	str	r3, [sp, #52]	; 0x34
   14024:	movw	r3, #29584	; 0x7390
   14028:	movt	r3, #1
   1402c:	str	r3, [sp, #60]	; 0x3c
   14030:	mov	fp, #0
   14034:	mov	sl, #5
   14038:	b	12c2c <__assert_fail@plt+0x1ab0>
   1403c:	ldr	r3, [sp, #48]	; 0x30
   14040:	ldrb	r4, [r3, r6]
   14044:	cmp	r4, #126	; 0x7e
   14048:	ldrls	pc, [pc, r4, lsl #2]
   1404c:	b	13938 <__assert_fail@plt+0x27bc>
   14050:	andeq	r3, r1, r0, asr #1
   14054:	andeq	r3, r1, r8, lsr r9
   14058:	andeq	r3, r1, r8, lsr r9
   1405c:	andeq	r3, r1, r8, lsr r9
   14060:	andeq	r3, r1, r8, lsr r9
   14064:	andeq	r3, r1, r8, lsr r9
   14068:	andeq	r3, r1, r8, lsr r9
   1406c:	andeq	r3, r1, r8, asr #27
   14070:	andeq	r3, r1, r4, ror #6
   14074:	andeq	r3, r1, r8, lsl #14
   14078:	andeq	r3, r1, r4, asr #15
   1407c:	andeq	r3, r1, ip, lsl r7
   14080:	andeq	r3, r1, r8, ror r3
   14084:	andeq	r3, r1, ip, lsl #7
   14088:	andeq	r3, r1, r8, lsr r9
   1408c:	andeq	r3, r1, r8, lsr r9
   14090:	andeq	r3, r1, r8, lsr r9
   14094:	andeq	r3, r1, r8, lsr r9
   14098:	andeq	r3, r1, r8, lsr r9
   1409c:	andeq	r3, r1, r8, lsr r9
   140a0:	andeq	r3, r1, r8, lsr r9
   140a4:	andeq	r3, r1, r8, lsr r9
   140a8:	andeq	r3, r1, r8, lsr r9
   140ac:	andeq	r3, r1, r8, lsr r9
   140b0:	andeq	r3, r1, r8, lsr r9
   140b4:	andeq	r3, r1, r8, lsr r9
   140b8:	andeq	r3, r1, r8, lsr r9
   140bc:	andeq	r3, r1, r8, lsr r9
   140c0:	andeq	r3, r1, r8, lsr r9
   140c4:	andeq	r3, r1, r8, lsr r9
   140c8:	andeq	r3, r1, r8, lsr r9
   140cc:	andeq	r3, r1, r8, lsr r9
   140d0:	andeq	r3, r1, ip, asr #16
   140d4:	andeq	r3, r1, r8, lsl #17
   140d8:	andeq	r3, r1, r8, lsl #17
   140dc:	andeq	r3, r1, r0, asr #16
   140e0:	andeq	r3, r1, r8, lsl #17
   140e4:	andeq	r3, r1, ip, lsr #27
   140e8:	andeq	r3, r1, r8, lsl #17
   140ec:	muleq	r1, r8, r8
   140f0:	andeq	r3, r1, r8, lsl #17
   140f4:	andeq	r3, r1, r8, lsl #17
   140f8:	andeq	r3, r1, r8, lsl #17
   140fc:	andeq	r3, r1, ip, lsr #27
   14100:	andeq	r3, r1, ip, lsr #27
   14104:	andeq	r3, r1, ip, lsr #27
   14108:	andeq	r3, r1, ip, lsr #27
   1410c:	andeq	r3, r1, ip, lsr #27
   14110:	andeq	r3, r1, ip, lsr #27
   14114:	andeq	r3, r1, ip, lsr #27
   14118:	andeq	r3, r1, ip, lsr #27
   1411c:	andeq	r3, r1, ip, lsr #27
   14120:	andeq	r3, r1, ip, lsr #27
   14124:	andeq	r3, r1, ip, lsr #27
   14128:	andeq	r3, r1, ip, lsr #27
   1412c:	andeq	r3, r1, ip, lsr #27
   14130:	andeq	r3, r1, ip, lsr #27
   14134:	andeq	r3, r1, ip, lsr #27
   14138:	andeq	r3, r1, ip, lsr #27
   1413c:	andeq	r3, r1, r8, lsl #17
   14140:	andeq	r3, r1, r8, lsl #17
   14144:	andeq	r3, r1, r8, lsl #17
   14148:	andeq	r3, r1, r8, lsl #17
   1414c:	strdeq	r3, [r1], -r8
   14150:	andeq	r3, r1, r8, lsr r9
   14154:	andeq	r3, r1, ip, lsr #27
   14158:	andeq	r3, r1, ip, lsr #27
   1415c:	andeq	r3, r1, ip, lsr #27
   14160:	andeq	r3, r1, ip, lsr #27
   14164:	andeq	r3, r1, ip, lsr #27
   14168:	andeq	r3, r1, ip, lsr #27
   1416c:	andeq	r3, r1, ip, lsr #27
   14170:	andeq	r3, r1, ip, lsr #27
   14174:	andeq	r3, r1, ip, lsr #27
   14178:	andeq	r3, r1, ip, lsr #27
   1417c:	andeq	r3, r1, ip, lsr #27
   14180:	andeq	r3, r1, ip, lsr #27
   14184:	andeq	r3, r1, ip, lsr #27
   14188:	andeq	r3, r1, ip, lsr #27
   1418c:	andeq	r3, r1, ip, lsr #27
   14190:	andeq	r3, r1, ip, lsr #27
   14194:	andeq	r3, r1, ip, lsr #27
   14198:	andeq	r3, r1, ip, lsr #27
   1419c:	andeq	r3, r1, ip, lsr #27
   141a0:	andeq	r3, r1, ip, lsr #27
   141a4:	andeq	r3, r1, ip, lsr #27
   141a8:	andeq	r3, r1, ip, lsr #27
   141ac:	andeq	r3, r1, ip, lsr #27
   141b0:	andeq	r3, r1, ip, lsr #27
   141b4:	andeq	r3, r1, ip, lsr #27
   141b8:	andeq	r3, r1, ip, lsr #27
   141bc:	andeq	r3, r1, r8, lsl #17
   141c0:	andeq	r3, r1, r0, lsr r7
   141c4:	andeq	r3, r1, ip, lsr #27
   141c8:	andeq	r3, r1, r8, lsl #17
   141cc:	andeq	r3, r1, ip, lsr #27
   141d0:	andeq	r3, r1, r8, lsl #17
   141d4:	andeq	r3, r1, ip, lsr #27
   141d8:	andeq	r3, r1, ip, lsr #27
   141dc:	andeq	r3, r1, ip, lsr #27
   141e0:	andeq	r3, r1, ip, lsr #27
   141e4:	andeq	r3, r1, ip, lsr #27
   141e8:	andeq	r3, r1, ip, lsr #27
   141ec:	andeq	r3, r1, ip, lsr #27
   141f0:	andeq	r3, r1, ip, lsr #27
   141f4:	andeq	r3, r1, ip, lsr #27
   141f8:	andeq	r3, r1, ip, lsr #27
   141fc:	andeq	r3, r1, ip, lsr #27
   14200:	andeq	r3, r1, ip, lsr #27
   14204:	andeq	r3, r1, ip, lsr #27
   14208:	andeq	r3, r1, ip, lsr #27
   1420c:	andeq	r3, r1, ip, lsr #27
   14210:	andeq	r3, r1, ip, lsr #27
   14214:	andeq	r3, r1, ip, lsr #27
   14218:	andeq	r3, r1, ip, lsr #27
   1421c:	andeq	r3, r1, ip, lsr #27
   14220:	andeq	r3, r1, ip, lsr #27
   14224:	andeq	r3, r1, ip, lsr #27
   14228:	andeq	r3, r1, ip, lsr #27
   1422c:	andeq	r3, r1, ip, lsr #27
   14230:	andeq	r3, r1, ip, lsr #27
   14234:	andeq	r3, r1, ip, lsr #27
   14238:	andeq	r3, r1, ip, lsr #27
   1423c:	strdeq	r3, [r1], -r0
   14240:	andeq	r3, r1, r8, lsl #17
   14244:	strdeq	r3, [r1], -r0
   14248:	andeq	r3, r1, r0, asr #16
   1424c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14250:	strd	r6, [sp, #8]
   14254:	strd	r8, [sp, #16]
   14258:	strd	sl, [sp, #24]
   1425c:	str	lr, [sp, #32]
   14260:	sub	sp, sp, #52	; 0x34
   14264:	mov	r5, r0
   14268:	str	r1, [sp, #24]
   1426c:	str	r2, [sp, #28]
   14270:	mov	r4, r3
   14274:	bl	11080 <__errno_location@plt>
   14278:	str	r0, [sp, #32]
   1427c:	ldr	r3, [r0]
   14280:	str	r3, [sp, #36]	; 0x24
   14284:	movw	r3, #33052	; 0x811c
   14288:	movt	r3, #2
   1428c:	ldr	r6, [r3]
   14290:	cmn	r5, #-2147483647	; 0x80000001
   14294:	movne	r3, #0
   14298:	moveq	r3, #1
   1429c:	orrs	r3, r3, r5, lsr #31
   142a0:	bne	14404 <__assert_fail@plt+0x3288>
   142a4:	movw	r3, #33052	; 0x811c
   142a8:	movt	r3, #2
   142ac:	ldr	r2, [r3, #4]
   142b0:	cmp	r2, r5
   142b4:	bgt	14324 <__assert_fail@plt+0x31a8>
   142b8:	str	r2, [sp, #44]	; 0x2c
   142bc:	add	r3, r3, #8
   142c0:	cmp	r6, r3
   142c4:	beq	14408 <__assert_fail@plt+0x328c>
   142c8:	sub	r2, r5, r2
   142cc:	mov	r3, #8
   142d0:	str	r3, [sp]
   142d4:	mvn	r3, #-2147483648	; 0x80000000
   142d8:	add	r2, r2, #1
   142dc:	add	r1, sp, #44	; 0x2c
   142e0:	mov	r0, r6
   142e4:	bl	157f4 <__assert_fail@plt+0x4678>
   142e8:	mov	r6, r0
   142ec:	movw	r3, #33052	; 0x811c
   142f0:	movt	r3, #2
   142f4:	str	r0, [r3]
   142f8:	movw	r7, #33052	; 0x811c
   142fc:	movt	r7, #2
   14300:	ldr	r0, [r7, #4]
   14304:	ldr	r2, [sp, #44]	; 0x2c
   14308:	sub	r2, r2, r0
   1430c:	lsl	r2, r2, #3
   14310:	mov	r1, #0
   14314:	add	r0, r6, r0, lsl #3
   14318:	bl	110b0 <memset@plt>
   1431c:	ldr	r3, [sp, #44]	; 0x2c
   14320:	str	r3, [r7, #4]
   14324:	add	fp, r6, r5, lsl #3
   14328:	ldr	r8, [r6, r5, lsl #3]
   1432c:	ldr	r7, [fp, #4]
   14330:	ldr	r3, [r4, #4]
   14334:	orr	r9, r3, #1
   14338:	add	sl, r4, #8
   1433c:	ldr	r3, [r4, #44]	; 0x2c
   14340:	str	r3, [sp, #16]
   14344:	ldr	r3, [r4, #40]	; 0x28
   14348:	str	r3, [sp, #12]
   1434c:	str	sl, [sp, #8]
   14350:	str	r9, [sp, #4]
   14354:	ldr	r3, [r4]
   14358:	str	r3, [sp]
   1435c:	ldr	r3, [sp, #28]
   14360:	ldr	r2, [sp, #24]
   14364:	mov	r1, r8
   14368:	mov	r0, r7
   1436c:	bl	12b54 <__assert_fail@plt+0x19d8>
   14370:	cmp	r8, r0
   14374:	bhi	143d8 <__assert_fail@plt+0x325c>
   14378:	add	r8, r0, #1
   1437c:	str	r8, [r6, r5, lsl #3]
   14380:	movw	r3, #33260	; 0x81ec
   14384:	movt	r3, #2
   14388:	cmp	r7, r3
   1438c:	beq	14398 <__assert_fail@plt+0x321c>
   14390:	mov	r0, r7
   14394:	bl	12804 <__assert_fail@plt+0x1688>
   14398:	mov	r0, r8
   1439c:	bl	155f0 <__assert_fail@plt+0x4474>
   143a0:	mov	r7, r0
   143a4:	str	r0, [fp, #4]
   143a8:	ldr	r3, [r4, #44]	; 0x2c
   143ac:	str	r3, [sp, #16]
   143b0:	ldr	r3, [r4, #40]	; 0x28
   143b4:	str	r3, [sp, #12]
   143b8:	str	sl, [sp, #8]
   143bc:	str	r9, [sp, #4]
   143c0:	ldr	r3, [r4]
   143c4:	str	r3, [sp]
   143c8:	ldr	r3, [sp, #28]
   143cc:	ldr	r2, [sp, #24]
   143d0:	mov	r1, r8
   143d4:	bl	12b54 <__assert_fail@plt+0x19d8>
   143d8:	ldr	r3, [sp, #32]
   143dc:	ldr	r2, [sp, #36]	; 0x24
   143e0:	str	r2, [r3]
   143e4:	mov	r0, r7
   143e8:	add	sp, sp, #52	; 0x34
   143ec:	ldrd	r4, [sp]
   143f0:	ldrd	r6, [sp, #8]
   143f4:	ldrd	r8, [sp, #16]
   143f8:	ldrd	sl, [sp, #24]
   143fc:	add	sp, sp, #32
   14400:	pop	{pc}		; (ldr pc, [sp], #4)
   14404:	bl	11158 <abort@plt>
   14408:	sub	r2, r5, r2
   1440c:	mov	r3, #8
   14410:	str	r3, [sp]
   14414:	mvn	r3, #-2147483648	; 0x80000000
   14418:	add	r2, r2, #1
   1441c:	add	r1, sp, #44	; 0x2c
   14420:	mov	r0, #0
   14424:	bl	157f4 <__assert_fail@plt+0x4678>
   14428:	mov	r6, r0
   1442c:	movw	r3, #33052	; 0x811c
   14430:	movt	r3, #2
   14434:	str	r0, [r3]
   14438:	ldrd	r2, [r3, #8]
   1443c:	strd	r2, [r0]
   14440:	b	142f8 <__assert_fail@plt+0x317c>
   14444:	strd	r4, [sp, #-16]!
   14448:	str	r6, [sp, #8]
   1444c:	str	lr, [sp, #12]
   14450:	mov	r4, r0
   14454:	bl	11080 <__errno_location@plt>
   14458:	mov	r5, r0
   1445c:	ldr	r6, [r0]
   14460:	cmp	r4, #0
   14464:	ldr	r3, [pc, #32]	; 1448c <__assert_fail@plt+0x3310>
   14468:	moveq	r4, r3
   1446c:	mov	r1, #48	; 0x30
   14470:	mov	r0, r4
   14474:	bl	15964 <__assert_fail@plt+0x47e8>
   14478:	str	r6, [r5]
   1447c:	ldrd	r4, [sp]
   14480:	ldr	r6, [sp, #8]
   14484:	add	sp, sp, #12
   14488:	pop	{pc}		; (ldr pc, [sp], #4)
   1448c:	andeq	r8, r2, ip, ror #5
   14490:	subs	r3, r0, #0
   14494:	ldr	r2, [pc, #8]	; 144a4 <__assert_fail@plt+0x3328>
   14498:	moveq	r3, r2
   1449c:	ldr	r0, [r3]
   144a0:	bx	lr
   144a4:	andeq	r8, r2, ip, ror #5
   144a8:	subs	r3, r0, #0
   144ac:	ldr	r2, [pc, #8]	; 144bc <__assert_fail@plt+0x3340>
   144b0:	moveq	r3, r2
   144b4:	str	r1, [r3]
   144b8:	bx	lr
   144bc:	andeq	r8, r2, ip, ror #5
   144c0:	push	{lr}		; (str lr, [sp, #-4]!)
   144c4:	subs	r3, r0, #0
   144c8:	ldr	r0, [pc, #44]	; 144fc <__assert_fail@plt+0x3380>
   144cc:	moveq	r3, r0
   144d0:	add	r3, r3, #8
   144d4:	lsr	lr, r1, #5
   144d8:	and	r1, r1, #31
   144dc:	ldr	ip, [r3, lr, lsl #2]
   144e0:	lsr	r0, ip, r1
   144e4:	eor	r2, r2, r0
   144e8:	and	r2, r2, #1
   144ec:	eor	r1, ip, r2, lsl r1
   144f0:	str	r1, [r3, lr, lsl #2]
   144f4:	and	r0, r0, #1
   144f8:	pop	{pc}		; (ldr pc, [sp], #4)
   144fc:	andeq	r8, r2, ip, ror #5
   14500:	subs	r3, r0, #0
   14504:	ldr	r2, [pc, #12]	; 14518 <__assert_fail@plt+0x339c>
   14508:	moveq	r3, r2
   1450c:	ldr	r0, [r3, #4]
   14510:	str	r1, [r3, #4]
   14514:	bx	lr
   14518:	andeq	r8, r2, ip, ror #5
   1451c:	subs	r3, r0, #0
   14520:	ldr	r0, [pc, #44]	; 14554 <__assert_fail@plt+0x33d8>
   14524:	moveq	r3, r0
   14528:	mov	r0, #10
   1452c:	str	r0, [r3]
   14530:	cmp	r2, #0
   14534:	cmpne	r1, #0
   14538:	beq	14548 <__assert_fail@plt+0x33cc>
   1453c:	str	r1, [r3, #40]	; 0x28
   14540:	str	r2, [r3, #44]	; 0x2c
   14544:	bx	lr
   14548:	str	r4, [sp, #-8]!
   1454c:	str	lr, [sp, #4]
   14550:	bl	11158 <abort@plt>
   14554:	andeq	r8, r2, ip, ror #5
   14558:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1455c:	strd	r6, [sp, #8]
   14560:	strd	r8, [sp, #16]
   14564:	str	sl, [sp, #24]
   14568:	str	lr, [sp, #28]
   1456c:	sub	sp, sp, #24
   14570:	mov	r7, r0
   14574:	mov	r8, r1
   14578:	mov	r9, r2
   1457c:	mov	sl, r3
   14580:	ldr	r4, [sp, #56]	; 0x38
   14584:	cmp	r4, #0
   14588:	ldr	r3, [pc, #104]	; 145f8 <__assert_fail@plt+0x347c>
   1458c:	moveq	r4, r3
   14590:	bl	11080 <__errno_location@plt>
   14594:	mov	r5, r0
   14598:	ldr	r6, [r0]
   1459c:	ldr	r3, [r4, #44]	; 0x2c
   145a0:	str	r3, [sp, #16]
   145a4:	ldr	r3, [r4, #40]	; 0x28
   145a8:	str	r3, [sp, #12]
   145ac:	add	r3, r4, #8
   145b0:	str	r3, [sp, #8]
   145b4:	ldr	r3, [r4, #4]
   145b8:	str	r3, [sp, #4]
   145bc:	ldr	r3, [r4]
   145c0:	str	r3, [sp]
   145c4:	mov	r3, sl
   145c8:	mov	r2, r9
   145cc:	mov	r1, r8
   145d0:	mov	r0, r7
   145d4:	bl	12b54 <__assert_fail@plt+0x19d8>
   145d8:	str	r6, [r5]
   145dc:	add	sp, sp, #24
   145e0:	ldrd	r4, [sp]
   145e4:	ldrd	r6, [sp, #8]
   145e8:	ldrd	r8, [sp, #16]
   145ec:	ldr	sl, [sp, #24]
   145f0:	add	sp, sp, #28
   145f4:	pop	{pc}		; (ldr pc, [sp], #4)
   145f8:	andeq	r8, r2, ip, ror #5
   145fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14600:	strd	r6, [sp, #8]
   14604:	strd	r8, [sp, #16]
   14608:	strd	sl, [sp, #24]
   1460c:	str	lr, [sp, #32]
   14610:	sub	sp, sp, #44	; 0x2c
   14614:	mov	r8, r0
   14618:	mov	sl, r1
   1461c:	mov	r6, r2
   14620:	subs	r4, r3, #0
   14624:	ldr	r3, [pc, #200]	; 146f4 <__assert_fail@plt+0x3578>
   14628:	moveq	r4, r3
   1462c:	bl	11080 <__errno_location@plt>
   14630:	mov	r7, r0
   14634:	ldr	fp, [r0]
   14638:	ldr	r5, [r4, #4]
   1463c:	cmp	r6, #0
   14640:	orreq	r5, r5, #1
   14644:	add	r9, r4, #8
   14648:	ldr	r3, [r4, #44]	; 0x2c
   1464c:	str	r3, [sp, #16]
   14650:	ldr	r3, [r4, #40]	; 0x28
   14654:	str	r3, [sp, #12]
   14658:	str	r9, [sp, #8]
   1465c:	str	r5, [sp, #4]
   14660:	ldr	r3, [r4]
   14664:	str	r3, [sp]
   14668:	str	sl, [sp, #36]	; 0x24
   1466c:	mov	r3, sl
   14670:	str	r8, [sp, #32]
   14674:	mov	r2, r8
   14678:	mov	r1, #0
   1467c:	mov	r0, r1
   14680:	bl	12b54 <__assert_fail@plt+0x19d8>
   14684:	mov	sl, r0
   14688:	add	r8, r0, #1
   1468c:	mov	r0, r8
   14690:	bl	155f0 <__assert_fail@plt+0x4474>
   14694:	str	r0, [sp, #28]
   14698:	ldr	r3, [r4, #44]	; 0x2c
   1469c:	str	r3, [sp, #16]
   146a0:	ldr	r3, [r4, #40]	; 0x28
   146a4:	str	r3, [sp, #12]
   146a8:	str	r9, [sp, #8]
   146ac:	str	r5, [sp, #4]
   146b0:	ldr	r3, [r4]
   146b4:	str	r3, [sp]
   146b8:	ldr	r3, [sp, #36]	; 0x24
   146bc:	ldr	r2, [sp, #32]
   146c0:	mov	r1, r8
   146c4:	bl	12b54 <__assert_fail@plt+0x19d8>
   146c8:	str	fp, [r7]
   146cc:	cmp	r6, #0
   146d0:	strne	sl, [r6]
   146d4:	ldr	r0, [sp, #28]
   146d8:	add	sp, sp, #44	; 0x2c
   146dc:	ldrd	r4, [sp]
   146e0:	ldrd	r6, [sp, #8]
   146e4:	ldrd	r8, [sp, #16]
   146e8:	ldrd	sl, [sp, #24]
   146ec:	add	sp, sp, #32
   146f0:	pop	{pc}		; (ldr pc, [sp], #4)
   146f4:	andeq	r8, r2, ip, ror #5
   146f8:	str	r4, [sp, #-8]!
   146fc:	str	lr, [sp, #4]
   14700:	mov	r3, r2
   14704:	mov	r2, #0
   14708:	bl	145fc <__assert_fail@plt+0x3480>
   1470c:	ldr	r4, [sp]
   14710:	add	sp, sp, #4
   14714:	pop	{pc}		; (ldr pc, [sp], #4)
   14718:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1471c:	strd	r6, [sp, #8]
   14720:	str	r8, [sp, #16]
   14724:	str	lr, [sp, #20]
   14728:	movw	r3, #33052	; 0x811c
   1472c:	movt	r3, #2
   14730:	ldr	r7, [r3]
   14734:	ldr	r3, [r3, #4]
   14738:	cmp	r3, #1
   1473c:	ble	14768 <__assert_fail@plt+0x35ec>
   14740:	mov	r4, #1
   14744:	add	r6, r7, #4
   14748:	movw	r5, #33052	; 0x811c
   1474c:	movt	r5, #2
   14750:	ldr	r0, [r6, r4, lsl #3]
   14754:	bl	12804 <__assert_fail@plt+0x1688>
   14758:	add	r4, r4, #1
   1475c:	ldr	r3, [r5, #4]
   14760:	cmp	r3, r4
   14764:	bgt	14750 <__assert_fail@plt+0x35d4>
   14768:	ldr	r0, [r7, #4]
   1476c:	movw	r3, #33260	; 0x81ec
   14770:	movt	r3, #2
   14774:	cmp	r0, r3
   14778:	beq	1479c <__assert_fail@plt+0x3620>
   1477c:	bl	12804 <__assert_fail@plt+0x1688>
   14780:	movw	r3, #33052	; 0x811c
   14784:	movt	r3, #2
   14788:	mov	r2, #256	; 0x100
   1478c:	str	r2, [r3, #8]
   14790:	movw	r2, #33260	; 0x81ec
   14794:	movt	r2, #2
   14798:	str	r2, [r3, #12]
   1479c:	ldr	r3, [pc, #64]	; 147e4 <__assert_fail@plt+0x3668>
   147a0:	cmp	r7, r3
   147a4:	beq	147c0 <__assert_fail@plt+0x3644>
   147a8:	mov	r0, r7
   147ac:	bl	12804 <__assert_fail@plt+0x1688>
   147b0:	movw	r3, #33052	; 0x811c
   147b4:	movt	r3, #2
   147b8:	add	r2, r3, #8
   147bc:	str	r2, [r3]
   147c0:	movw	r3, #33052	; 0x811c
   147c4:	movt	r3, #2
   147c8:	mov	r2, #1
   147cc:	str	r2, [r3, #4]
   147d0:	ldrd	r4, [sp]
   147d4:	ldrd	r6, [sp, #8]
   147d8:	ldr	r8, [sp, #16]
   147dc:	add	sp, sp, #20
   147e0:	pop	{pc}		; (ldr pc, [sp], #4)
   147e4:	andeq	r8, r2, r4, lsr #2
   147e8:	str	r4, [sp, #-8]!
   147ec:	str	lr, [sp, #4]
   147f0:	ldr	r3, [pc, #16]	; 14808 <__assert_fail@plt+0x368c>
   147f4:	mvn	r2, #0
   147f8:	bl	1424c <__assert_fail@plt+0x30d0>
   147fc:	ldr	r4, [sp]
   14800:	add	sp, sp, #4
   14804:	pop	{pc}		; (ldr pc, [sp], #4)
   14808:	andeq	r8, r2, ip, ror #5
   1480c:	str	r4, [sp, #-8]!
   14810:	str	lr, [sp, #4]
   14814:	ldr	r3, [pc, #12]	; 14828 <__assert_fail@plt+0x36ac>
   14818:	bl	1424c <__assert_fail@plt+0x30d0>
   1481c:	ldr	r4, [sp]
   14820:	add	sp, sp, #4
   14824:	pop	{pc}		; (ldr pc, [sp], #4)
   14828:	andeq	r8, r2, ip, ror #5
   1482c:	str	r4, [sp, #-8]!
   14830:	str	lr, [sp, #4]
   14834:	mov	r1, r0
   14838:	mov	r0, #0
   1483c:	bl	147e8 <__assert_fail@plt+0x366c>
   14840:	ldr	r4, [sp]
   14844:	add	sp, sp, #4
   14848:	pop	{pc}		; (ldr pc, [sp], #4)
   1484c:	str	r4, [sp, #-8]!
   14850:	str	lr, [sp, #4]
   14854:	mov	r2, r1
   14858:	mov	r1, r0
   1485c:	mov	r0, #0
   14860:	bl	1480c <__assert_fail@plt+0x3690>
   14864:	ldr	r4, [sp]
   14868:	add	sp, sp, #4
   1486c:	pop	{pc}		; (ldr pc, [sp], #4)
   14870:	strd	r4, [sp, #-12]!
   14874:	str	lr, [sp, #8]
   14878:	sub	sp, sp, #52	; 0x34
   1487c:	mov	r4, r0
   14880:	mov	r5, r2
   14884:	mov	r0, sp
   14888:	bl	129c0 <__assert_fail@plt+0x1844>
   1488c:	mov	r3, sp
   14890:	mvn	r2, #0
   14894:	mov	r1, r5
   14898:	mov	r0, r4
   1489c:	bl	1424c <__assert_fail@plt+0x30d0>
   148a0:	add	sp, sp, #52	; 0x34
   148a4:	ldrd	r4, [sp]
   148a8:	add	sp, sp, #8
   148ac:	pop	{pc}		; (ldr pc, [sp], #4)
   148b0:	strd	r4, [sp, #-16]!
   148b4:	str	r6, [sp, #8]
   148b8:	str	lr, [sp, #12]
   148bc:	sub	sp, sp, #48	; 0x30
   148c0:	mov	r4, r0
   148c4:	mov	r5, r2
   148c8:	mov	r6, r3
   148cc:	mov	r0, sp
   148d0:	bl	129c0 <__assert_fail@plt+0x1844>
   148d4:	mov	r3, sp
   148d8:	mov	r2, r6
   148dc:	mov	r1, r5
   148e0:	mov	r0, r4
   148e4:	bl	1424c <__assert_fail@plt+0x30d0>
   148e8:	add	sp, sp, #48	; 0x30
   148ec:	ldrd	r4, [sp]
   148f0:	ldr	r6, [sp, #8]
   148f4:	add	sp, sp, #12
   148f8:	pop	{pc}		; (ldr pc, [sp], #4)
   148fc:	str	r4, [sp, #-8]!
   14900:	str	lr, [sp, #4]
   14904:	mov	r2, r1
   14908:	mov	r1, r0
   1490c:	mov	r0, #0
   14910:	bl	14870 <__assert_fail@plt+0x36f4>
   14914:	ldr	r4, [sp]
   14918:	add	sp, sp, #4
   1491c:	pop	{pc}		; (ldr pc, [sp], #4)
   14920:	str	r4, [sp, #-8]!
   14924:	str	lr, [sp, #4]
   14928:	mov	r3, r2
   1492c:	mov	r2, r1
   14930:	mov	r1, r0
   14934:	mov	r0, #0
   14938:	bl	148b0 <__assert_fail@plt+0x3734>
   1493c:	ldr	r4, [sp]
   14940:	add	sp, sp, #4
   14944:	pop	{pc}		; (ldr pc, [sp], #4)
   14948:	strd	r4, [sp, #-12]!
   1494c:	str	lr, [sp, #8]
   14950:	sub	sp, sp, #52	; 0x34
   14954:	mov	r4, r0
   14958:	mov	r5, r1
   1495c:	mov	r1, r2
   14960:	ldr	r0, [pc, #92]	; 149c4 <__assert_fail@plt+0x3848>
   14964:	ldrd	r2, [r0]
   14968:	strd	r2, [sp]
   1496c:	ldrd	r2, [r0, #8]
   14970:	strd	r2, [sp, #8]
   14974:	ldrd	r2, [r0, #16]
   14978:	strd	r2, [sp, #16]
   1497c:	ldrd	r2, [r0, #24]
   14980:	strd	r2, [sp, #24]
   14984:	ldrd	r2, [r0, #32]
   14988:	strd	r2, [sp, #32]
   1498c:	ldrd	r2, [r0, #40]	; 0x28
   14990:	strd	r2, [sp, #40]	; 0x28
   14994:	mov	r2, #1
   14998:	mov	r0, sp
   1499c:	bl	144c0 <__assert_fail@plt+0x3344>
   149a0:	mov	r3, sp
   149a4:	mov	r2, r5
   149a8:	mov	r1, r4
   149ac:	mov	r0, #0
   149b0:	bl	1424c <__assert_fail@plt+0x30d0>
   149b4:	add	sp, sp, #52	; 0x34
   149b8:	ldrd	r4, [sp]
   149bc:	add	sp, sp, #8
   149c0:	pop	{pc}		; (ldr pc, [sp], #4)
   149c4:	andeq	r8, r2, ip, ror #5
   149c8:	str	r4, [sp, #-8]!
   149cc:	str	lr, [sp, #4]
   149d0:	mov	r2, r1
   149d4:	mvn	r1, #0
   149d8:	bl	14948 <__assert_fail@plt+0x37cc>
   149dc:	ldr	r4, [sp]
   149e0:	add	sp, sp, #4
   149e4:	pop	{pc}		; (ldr pc, [sp], #4)
   149e8:	str	r4, [sp, #-8]!
   149ec:	str	lr, [sp, #4]
   149f0:	mov	r1, #58	; 0x3a
   149f4:	bl	149c8 <__assert_fail@plt+0x384c>
   149f8:	ldr	r4, [sp]
   149fc:	add	sp, sp, #4
   14a00:	pop	{pc}		; (ldr pc, [sp], #4)
   14a04:	str	r4, [sp, #-8]!
   14a08:	str	lr, [sp, #4]
   14a0c:	mov	r2, #58	; 0x3a
   14a10:	bl	14948 <__assert_fail@plt+0x37cc>
   14a14:	ldr	r4, [sp]
   14a18:	add	sp, sp, #4
   14a1c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a20:	strd	r4, [sp, #-12]!
   14a24:	str	lr, [sp, #8]
   14a28:	sub	sp, sp, #100	; 0x64
   14a2c:	mov	r4, r0
   14a30:	mov	r5, r2
   14a34:	mov	r0, sp
   14a38:	bl	129c0 <__assert_fail@plt+0x1844>
   14a3c:	ldrd	r2, [sp]
   14a40:	strd	r2, [sp, #48]	; 0x30
   14a44:	ldrd	r2, [sp, #8]
   14a48:	strd	r2, [sp, #56]	; 0x38
   14a4c:	ldrd	r2, [sp, #16]
   14a50:	strd	r2, [sp, #64]	; 0x40
   14a54:	ldrd	r2, [sp, #24]
   14a58:	strd	r2, [sp, #72]	; 0x48
   14a5c:	ldrd	r2, [sp, #32]
   14a60:	strd	r2, [sp, #80]	; 0x50
   14a64:	ldrd	r2, [sp, #40]	; 0x28
   14a68:	strd	r2, [sp, #88]	; 0x58
   14a6c:	mov	r2, #1
   14a70:	mov	r1, #58	; 0x3a
   14a74:	add	r0, sp, #48	; 0x30
   14a78:	bl	144c0 <__assert_fail@plt+0x3344>
   14a7c:	add	r3, sp, #48	; 0x30
   14a80:	mvn	r2, #0
   14a84:	mov	r1, r5
   14a88:	mov	r0, r4
   14a8c:	bl	1424c <__assert_fail@plt+0x30d0>
   14a90:	add	sp, sp, #100	; 0x64
   14a94:	ldrd	r4, [sp]
   14a98:	add	sp, sp, #8
   14a9c:	pop	{pc}		; (ldr pc, [sp], #4)
   14aa0:	strd	r4, [sp, #-20]!	; 0xffffffec
   14aa4:	strd	r6, [sp, #8]
   14aa8:	str	lr, [sp, #16]
   14aac:	sub	sp, sp, #52	; 0x34
   14ab0:	mov	r4, r0
   14ab4:	mov	r5, r3
   14ab8:	ldr	r3, [pc, #92]	; 14b1c <__assert_fail@plt+0x39a0>
   14abc:	ldrd	r6, [r3]
   14ac0:	strd	r6, [sp]
   14ac4:	ldrd	r6, [r3, #8]
   14ac8:	strd	r6, [sp, #8]
   14acc:	ldrd	r6, [r3, #16]
   14ad0:	strd	r6, [sp, #16]
   14ad4:	ldrd	r6, [r3, #24]
   14ad8:	strd	r6, [sp, #24]
   14adc:	ldrd	r6, [r3, #32]
   14ae0:	strd	r6, [sp, #32]
   14ae4:	ldrd	r6, [r3, #40]	; 0x28
   14ae8:	strd	r6, [sp, #40]	; 0x28
   14aec:	mov	r0, sp
   14af0:	bl	1451c <__assert_fail@plt+0x33a0>
   14af4:	mov	r3, sp
   14af8:	ldr	r2, [sp, #72]	; 0x48
   14afc:	mov	r1, r5
   14b00:	mov	r0, r4
   14b04:	bl	1424c <__assert_fail@plt+0x30d0>
   14b08:	add	sp, sp, #52	; 0x34
   14b0c:	ldrd	r4, [sp]
   14b10:	ldrd	r6, [sp, #8]
   14b14:	add	sp, sp, #16
   14b18:	pop	{pc}		; (ldr pc, [sp], #4)
   14b1c:	andeq	r8, r2, ip, ror #5
   14b20:	push	{lr}		; (str lr, [sp, #-4]!)
   14b24:	sub	sp, sp, #12
   14b28:	mvn	ip, #0
   14b2c:	str	ip, [sp]
   14b30:	bl	14aa0 <__assert_fail@plt+0x3924>
   14b34:	add	sp, sp, #12
   14b38:	pop	{pc}		; (ldr pc, [sp], #4)
   14b3c:	str	r4, [sp, #-8]!
   14b40:	str	lr, [sp, #4]
   14b44:	mov	r3, r2
   14b48:	mov	r2, r1
   14b4c:	mov	r1, r0
   14b50:	mov	r0, #0
   14b54:	bl	14b20 <__assert_fail@plt+0x39a4>
   14b58:	ldr	r4, [sp]
   14b5c:	add	sp, sp, #4
   14b60:	pop	{pc}		; (ldr pc, [sp], #4)
   14b64:	push	{lr}		; (str lr, [sp, #-4]!)
   14b68:	sub	sp, sp, #12
   14b6c:	str	r3, [sp]
   14b70:	mov	r3, r2
   14b74:	mov	r2, r1
   14b78:	mov	r1, r0
   14b7c:	mov	r0, #0
   14b80:	bl	14aa0 <__assert_fail@plt+0x3924>
   14b84:	add	sp, sp, #12
   14b88:	pop	{pc}		; (ldr pc, [sp], #4)
   14b8c:	str	r4, [sp, #-8]!
   14b90:	str	lr, [sp, #4]
   14b94:	ldr	r3, [pc, #12]	; 14ba8 <__assert_fail@plt+0x3a2c>
   14b98:	bl	1424c <__assert_fail@plt+0x30d0>
   14b9c:	ldr	r4, [sp]
   14ba0:	add	sp, sp, #4
   14ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ba8:	andeq	r8, r2, ip, lsr #2
   14bac:	str	r4, [sp, #-8]!
   14bb0:	str	lr, [sp, #4]
   14bb4:	mov	r2, r1
   14bb8:	mov	r1, r0
   14bbc:	mov	r0, #0
   14bc0:	bl	14b8c <__assert_fail@plt+0x3a10>
   14bc4:	ldr	r4, [sp]
   14bc8:	add	sp, sp, #4
   14bcc:	pop	{pc}		; (ldr pc, [sp], #4)
   14bd0:	str	r4, [sp, #-8]!
   14bd4:	str	lr, [sp, #4]
   14bd8:	mvn	r2, #0
   14bdc:	bl	14b8c <__assert_fail@plt+0x3a10>
   14be0:	ldr	r4, [sp]
   14be4:	add	sp, sp, #4
   14be8:	pop	{pc}		; (ldr pc, [sp], #4)
   14bec:	str	r4, [sp, #-8]!
   14bf0:	str	lr, [sp, #4]
   14bf4:	mov	r1, r0
   14bf8:	mov	r0, #0
   14bfc:	bl	14bd0 <__assert_fail@plt+0x3a54>
   14c00:	ldr	r4, [sp]
   14c04:	add	sp, sp, #4
   14c08:	pop	{pc}		; (ldr pc, [sp], #4)
   14c0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14c10:	strd	r6, [sp, #8]
   14c14:	strd	r8, [sp, #16]
   14c18:	strd	sl, [sp, #24]
   14c1c:	str	lr, [sp, #32]
   14c20:	sub	sp, sp, #36	; 0x24
   14c24:	mov	r4, r1
   14c28:	mov	r8, r2
   14c2c:	ldr	r7, [sp, #76]	; 0x4c
   14c30:	ldr	fp, [r2]
   14c34:	subs	r9, r3, #0
   14c38:	ldrne	sl, [r9]
   14c3c:	mvneq	sl, #0
   14c40:	ldr	r3, [sp, #72]	; 0x48
   14c44:	cmp	r3, #0
   14c48:	beq	14c58 <__assert_fail@plt+0x3adc>
   14c4c:	mov	r3, #0
   14c50:	ldr	r2, [sp, #72]	; 0x48
   14c54:	str	r3, [r2]
   14c58:	cmp	r7, #0
   14c5c:	movne	r3, #0
   14c60:	strne	r3, [r7]
   14c64:	cmp	r4, #0
   14c68:	beq	14cd0 <__assert_fail@plt+0x3b54>
   14c6c:	subs	r5, r4, r0
   14c70:	moveq	r6, #0
   14c74:	bne	14cec <__assert_fail@plt+0x3b70>
   14c78:	ldrb	r3, [r4, #1]
   14c7c:	cmp	r3, #0
   14c80:	bne	14d04 <__assert_fail@plt+0x3b88>
   14c84:	cmp	r6, #0
   14c88:	moveq	r5, r6
   14c8c:	beq	14d18 <__assert_fail@plt+0x3b9c>
   14c90:	mov	r5, #0
   14c94:	ldrb	r3, [r6]
   14c98:	cmp	r3, #43	; 0x2b
   14c9c:	bne	14d5c <__assert_fail@plt+0x3be0>
   14ca0:	clz	r3, r5
   14ca4:	lsr	r3, r3, #5
   14ca8:	cmp	r4, #0
   14cac:	movne	r4, r3
   14cb0:	moveq	r4, #0
   14cb4:	cmp	r4, #0
   14cb8:	movne	r5, #0
   14cbc:	movwne	r4, #29744	; 0x7430
   14cc0:	movtne	r4, #1
   14cc4:	beq	14d98 <__assert_fail@plt+0x3c1c>
   14cc8:	bl	11110 <endpwent@plt>
   14ccc:	b	14e38 <__assert_fail@plt+0x3cbc>
   14cd0:	ldrb	r3, [r0]
   14cd4:	cmp	r3, #0
   14cd8:	moveq	r6, r4
   14cdc:	beq	14c84 <__assert_fail@plt+0x3b08>
   14ce0:	bl	15a14 <__assert_fail@plt+0x4898>
   14ce4:	mov	r6, r0
   14ce8:	b	14c84 <__assert_fail@plt+0x3b08>
   14cec:	add	r1, r5, #1
   14cf0:	bl	1599c <__assert_fail@plt+0x4820>
   14cf4:	mov	r6, r0
   14cf8:	mov	r3, #0
   14cfc:	strb	r3, [r0, r5]
   14d00:	b	14c78 <__assert_fail@plt+0x3afc>
   14d04:	add	r5, r4, #1
   14d08:	cmp	r6, #0
   14d0c:	bne	14c94 <__assert_fail@plt+0x3b18>
   14d10:	cmp	r5, #0
   14d14:	bne	14e04 <__assert_fail@plt+0x3c88>
   14d18:	str	fp, [r8]
   14d1c:	cmp	r9, #0
   14d20:	strne	sl, [r9]
   14d24:	ldr	r3, [sp, #72]	; 0x48
   14d28:	cmp	r3, #0
   14d2c:	strne	r6, [r3]
   14d30:	movne	r6, #0
   14d34:	cmp	r7, #0
   14d38:	beq	14d44 <__assert_fail@plt+0x3bc8>
   14d3c:	str	r5, [r7]
   14d40:	mov	r5, #0
   14d44:	mov	r0, r6
   14d48:	bl	12804 <__assert_fail@plt+0x1688>
   14d4c:	mov	r0, r5
   14d50:	bl	12804 <__assert_fail@plt+0x1688>
   14d54:	mov	r0, #0
   14d58:	b	14e60 <__assert_fail@plt+0x3ce4>
   14d5c:	mov	r0, r6
   14d60:	bl	10ed0 <getpwnam@plt>
   14d64:	cmp	r0, #0
   14d68:	beq	14ca0 <__assert_fail@plt+0x3b24>
   14d6c:	ldr	fp, [r0, #8]
   14d70:	adds	r4, r4, #0
   14d74:	movne	r4, #1
   14d78:	cmp	r5, #0
   14d7c:	movne	r4, #0
   14d80:	cmp	r4, #0
   14d84:	bne	14e7c <__assert_fail@plt+0x3d00>
   14d88:	bl	11110 <endpwent@plt>
   14d8c:	cmp	r5, #0
   14d90:	bne	14e04 <__assert_fail@plt+0x3c88>
   14d94:	b	14d18 <__assert_fail@plt+0x3b9c>
   14d98:	movw	r3, #27664	; 0x6c10
   14d9c:	movt	r3, #1
   14da0:	str	r3, [sp]
   14da4:	add	r3, sp, #8
   14da8:	mov	r2, #10
   14dac:	mov	r1, #0
   14db0:	mov	r0, r6
   14db4:	bl	15b34 <__assert_fail@plt+0x49b8>
   14db8:	cmp	r0, #0
   14dbc:	movwne	r4, #29712	; 0x7410
   14dc0:	movtne	r4, #1
   14dc4:	bne	14de4 <__assert_fail@plt+0x3c68>
   14dc8:	ldr	r3, [sp, #8]
   14dcc:	cmn	r3, #1
   14dd0:	movne	fp, r3
   14dd4:	movw	r4, #29712	; 0x7410
   14dd8:	movt	r4, #1
   14ddc:	cmn	r3, #1
   14de0:	movne	r4, #0
   14de4:	bl	11110 <endpwent@plt>
   14de8:	clz	r3, r4
   14dec:	lsr	r3, r3, #5
   14df0:	cmp	r5, #0
   14df4:	moveq	r3, #0
   14df8:	cmp	r3, #0
   14dfc:	moveq	r5, #0
   14e00:	beq	14e38 <__assert_fail@plt+0x3cbc>
   14e04:	ldrb	r3, [r5]
   14e08:	cmp	r3, #43	; 0x2b
   14e0c:	beq	14ebc <__assert_fail@plt+0x3d40>
   14e10:	mov	r0, r5
   14e14:	bl	11170 <getgrnam@plt>
   14e18:	cmp	r0, #0
   14e1c:	beq	14ebc <__assert_fail@plt+0x3d40>
   14e20:	ldr	sl, [r0, #8]
   14e24:	mov	r4, #0
   14e28:	bl	10eac <endgrent@plt>
   14e2c:	mov	r0, r5
   14e30:	bl	15a14 <__assert_fail@plt+0x4898>
   14e34:	mov	r5, r0
   14e38:	cmp	r4, #0
   14e3c:	beq	14d18 <__assert_fail@plt+0x3b9c>
   14e40:	mov	r0, r6
   14e44:	bl	12804 <__assert_fail@plt+0x1688>
   14e48:	mov	r0, r5
   14e4c:	bl	12804 <__assert_fail@plt+0x1688>
   14e50:	mov	r2, #5
   14e54:	mov	r1, r4
   14e58:	mov	r0, #0
   14e5c:	bl	10f60 <dcgettext@plt>
   14e60:	add	sp, sp, #36	; 0x24
   14e64:	ldrd	r4, [sp]
   14e68:	ldrd	r6, [sp, #8]
   14e6c:	ldrd	r8, [sp, #16]
   14e70:	ldrd	sl, [sp, #24]
   14e74:	add	sp, sp, #32
   14e78:	pop	{pc}		; (ldr pc, [sp], #4)
   14e7c:	ldr	sl, [r0, #12]
   14e80:	mov	r0, sl
   14e84:	bl	11164 <getgrgid@plt>
   14e88:	cmp	r0, #0
   14e8c:	beq	14ea8 <__assert_fail@plt+0x3d2c>
   14e90:	ldr	r0, [r0]
   14e94:	bl	15a14 <__assert_fail@plt+0x4898>
   14e98:	mov	r5, r0
   14e9c:	bl	10eac <endgrent@plt>
   14ea0:	mov	r4, #0
   14ea4:	b	14cc8 <__assert_fail@plt+0x3b4c>
   14ea8:	add	r2, sp, #8
   14eac:	mov	r0, sl
   14eb0:	mov	r1, #0
   14eb4:	bl	12864 <__assert_fail@plt+0x16e8>
   14eb8:	b	14e94 <__assert_fail@plt+0x3d18>
   14ebc:	movw	r3, #27664	; 0x6c10
   14ec0:	movt	r3, #1
   14ec4:	str	r3, [sp]
   14ec8:	add	r3, sp, #8
   14ecc:	mov	r2, #10
   14ed0:	mov	r1, #0
   14ed4:	mov	r0, r5
   14ed8:	bl	15b34 <__assert_fail@plt+0x49b8>
   14edc:	cmp	r0, #0
   14ee0:	movwne	r4, #29728	; 0x7420
   14ee4:	movtne	r4, #1
   14ee8:	bne	14e28 <__assert_fail@plt+0x3cac>
   14eec:	ldr	r3, [sp, #8]
   14ef0:	cmn	r3, #1
   14ef4:	movne	sl, r3
   14ef8:	movw	r4, #29728	; 0x7420
   14efc:	movt	r4, #1
   14f00:	cmn	r3, #1
   14f04:	movne	r4, #0
   14f08:	b	14e28 <__assert_fail@plt+0x3cac>
   14f0c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14f10:	strd	r6, [sp, #8]
   14f14:	strd	r8, [sp, #16]
   14f18:	str	sl, [sp, #24]
   14f1c:	str	lr, [sp, #28]
   14f20:	sub	sp, sp, #8
   14f24:	mov	r4, r0
   14f28:	mov	r6, r1
   14f2c:	mov	r7, r3
   14f30:	ldr	r8, [sp, #40]	; 0x28
   14f34:	subs	r9, r2, #0
   14f38:	beq	14fb8 <__assert_fail@plt+0x3e3c>
   14f3c:	mov	r1, #58	; 0x3a
   14f40:	bl	11074 <strchr@plt>
   14f44:	mov	sl, r0
   14f48:	str	r8, [sp, #4]
   14f4c:	str	r7, [sp]
   14f50:	mov	r3, r9
   14f54:	mov	r2, r6
   14f58:	mov	r1, r0
   14f5c:	mov	r0, r4
   14f60:	bl	14c0c <__assert_fail@plt+0x3a90>
   14f64:	mov	r5, r0
   14f68:	adds	r0, r0, #0
   14f6c:	movne	r0, #1
   14f70:	cmp	sl, #0
   14f74:	movne	r0, #0
   14f78:	cmp	r0, #0
   14f7c:	beq	14fd4 <__assert_fail@plt+0x3e58>
   14f80:	mov	r1, #46	; 0x2e
   14f84:	mov	r0, r4
   14f88:	bl	11074 <strchr@plt>
   14f8c:	subs	r1, r0, #0
   14f90:	beq	14fd4 <__assert_fail@plt+0x3e58>
   14f94:	str	r8, [sp, #4]
   14f98:	str	r7, [sp]
   14f9c:	mov	r3, r9
   14fa0:	mov	r2, r6
   14fa4:	mov	r0, r4
   14fa8:	bl	14c0c <__assert_fail@plt+0x3a90>
   14fac:	cmp	r0, #0
   14fb0:	moveq	r5, r0
   14fb4:	b	14fd4 <__assert_fail@plt+0x3e58>
   14fb8:	str	r8, [sp, #4]
   14fbc:	str	r3, [sp]
   14fc0:	mov	r3, #0
   14fc4:	mov	r2, r1
   14fc8:	mov	r1, r3
   14fcc:	bl	14c0c <__assert_fail@plt+0x3a90>
   14fd0:	mov	r5, r0
   14fd4:	mov	r0, r5
   14fd8:	add	sp, sp, #8
   14fdc:	ldrd	r4, [sp]
   14fe0:	ldrd	r6, [sp, #8]
   14fe4:	ldrd	r8, [sp, #16]
   14fe8:	ldr	sl, [sp, #24]
   14fec:	add	sp, sp, #28
   14ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ff4:	strd	r4, [sp, #-16]!
   14ff8:	str	r6, [sp, #8]
   14ffc:	str	lr, [sp, #12]
   15000:	sub	sp, sp, #32
   15004:	mov	r4, r0
   15008:	ldr	r5, [sp, #48]	; 0x30
   1500c:	ldr	r6, [sp, #52]	; 0x34
   15010:	cmp	r1, #0
   15014:	beq	150e0 <__assert_fail@plt+0x3f64>
   15018:	str	r3, [sp, #4]
   1501c:	str	r2, [sp]
   15020:	mov	r3, r1
   15024:	movw	r2, #29760	; 0x7440
   15028:	movt	r2, #1
   1502c:	mov	r1, #1
   15030:	bl	110d4 <__fprintf_chk@plt>
   15034:	mov	r2, #5
   15038:	movw	r1, #29780	; 0x7454
   1503c:	movt	r1, #1
   15040:	mov	r0, #0
   15044:	bl	10f60 <dcgettext@plt>
   15048:	movw	r3, #2022	; 0x7e6
   1504c:	str	r3, [sp]
   15050:	mov	r3, r0
   15054:	movw	r2, #30508	; 0x772c
   15058:	movt	r2, #1
   1505c:	mov	r1, #1
   15060:	mov	r0, r4
   15064:	bl	110d4 <__fprintf_chk@plt>
   15068:	mov	r1, r4
   1506c:	mov	r0, #10
   15070:	bl	10f54 <fputc_unlocked@plt>
   15074:	mov	r2, #5
   15078:	movw	r1, #29784	; 0x7458
   1507c:	movt	r1, #1
   15080:	mov	r0, #0
   15084:	bl	10f60 <dcgettext@plt>
   15088:	movw	r3, #29956	; 0x7504
   1508c:	movt	r3, #1
   15090:	mov	r2, r0
   15094:	mov	r1, #1
   15098:	mov	r0, r4
   1509c:	bl	110d4 <__fprintf_chk@plt>
   150a0:	mov	r1, r4
   150a4:	mov	r0, #10
   150a8:	bl	10f54 <fputc_unlocked@plt>
   150ac:	cmp	r6, #9
   150b0:	ldrls	pc, [pc, r6, lsl #2]
   150b4:	b	153b8 <__assert_fail@plt+0x423c>
   150b8:	andeq	r5, r1, r4, lsr #2
   150bc:	strdeq	r5, [r1], -ip
   150c0:	andeq	r5, r1, r8, lsr r1
   150c4:	andeq	r5, r1, ip, ror #2
   150c8:	andeq	r5, r1, r8, lsr #3
   150cc:	andeq	r5, r1, ip, ror #3
   150d0:	andeq	r5, r1, r8, lsr r2
   150d4:	andeq	r5, r1, ip, lsl #5
   150d8:	andeq	r5, r1, r8, ror #5
   150dc:	andeq	r5, r1, ip, asr #6
   150e0:	str	r3, [sp]
   150e4:	mov	r3, r2
   150e8:	movw	r2, #29772	; 0x744c
   150ec:	movt	r2, #1
   150f0:	mov	r1, #1
   150f4:	bl	110d4 <__fprintf_chk@plt>
   150f8:	b	15034 <__assert_fail@plt+0x3eb8>
   150fc:	mov	r2, #5
   15100:	movw	r1, #29992	; 0x7528
   15104:	movt	r1, #1
   15108:	mov	r0, #0
   1510c:	bl	10f60 <dcgettext@plt>
   15110:	ldr	r3, [r5]
   15114:	mov	r2, r0
   15118:	mov	r1, #1
   1511c:	mov	r0, r4
   15120:	bl	110d4 <__fprintf_chk@plt>
   15124:	add	sp, sp, #32
   15128:	ldrd	r4, [sp]
   1512c:	ldr	r6, [sp, #8]
   15130:	add	sp, sp, #12
   15134:	pop	{pc}		; (ldr pc, [sp], #4)
   15138:	mov	r2, #5
   1513c:	movw	r1, #30008	; 0x7538
   15140:	movt	r1, #1
   15144:	mov	r0, #0
   15148:	bl	10f60 <dcgettext@plt>
   1514c:	ldr	r3, [r5, #4]
   15150:	str	r3, [sp]
   15154:	ldr	r3, [r5]
   15158:	mov	r2, r0
   1515c:	mov	r1, #1
   15160:	mov	r0, r4
   15164:	bl	110d4 <__fprintf_chk@plt>
   15168:	b	15124 <__assert_fail@plt+0x3fa8>
   1516c:	mov	r2, #5
   15170:	movw	r1, #30032	; 0x7550
   15174:	movt	r1, #1
   15178:	mov	r0, #0
   1517c:	bl	10f60 <dcgettext@plt>
   15180:	ldr	r3, [r5, #8]
   15184:	str	r3, [sp, #4]
   15188:	ldr	r3, [r5, #4]
   1518c:	str	r3, [sp]
   15190:	ldr	r3, [r5]
   15194:	mov	r2, r0
   15198:	mov	r1, #1
   1519c:	mov	r0, r4
   151a0:	bl	110d4 <__fprintf_chk@plt>
   151a4:	b	15124 <__assert_fail@plt+0x3fa8>
   151a8:	mov	r2, #5
   151ac:	movw	r1, #30060	; 0x756c
   151b0:	movt	r1, #1
   151b4:	mov	r0, #0
   151b8:	bl	10f60 <dcgettext@plt>
   151bc:	ldr	r3, [r5, #12]
   151c0:	str	r3, [sp, #8]
   151c4:	ldr	r3, [r5, #8]
   151c8:	str	r3, [sp, #4]
   151cc:	ldr	r3, [r5, #4]
   151d0:	str	r3, [sp]
   151d4:	ldr	r3, [r5]
   151d8:	mov	r2, r0
   151dc:	mov	r1, #1
   151e0:	mov	r0, r4
   151e4:	bl	110d4 <__fprintf_chk@plt>
   151e8:	b	15124 <__assert_fail@plt+0x3fa8>
   151ec:	mov	r2, #5
   151f0:	movw	r1, #30092	; 0x758c
   151f4:	movt	r1, #1
   151f8:	mov	r0, #0
   151fc:	bl	10f60 <dcgettext@plt>
   15200:	ldr	r3, [r5, #16]
   15204:	str	r3, [sp, #12]
   15208:	ldr	r3, [r5, #12]
   1520c:	str	r3, [sp, #8]
   15210:	ldr	r3, [r5, #8]
   15214:	str	r3, [sp, #4]
   15218:	ldr	r3, [r5, #4]
   1521c:	str	r3, [sp]
   15220:	ldr	r3, [r5]
   15224:	mov	r2, r0
   15228:	mov	r1, #1
   1522c:	mov	r0, r4
   15230:	bl	110d4 <__fprintf_chk@plt>
   15234:	b	15124 <__assert_fail@plt+0x3fa8>
   15238:	mov	r2, #5
   1523c:	movw	r1, #30128	; 0x75b0
   15240:	movt	r1, #1
   15244:	mov	r0, #0
   15248:	bl	10f60 <dcgettext@plt>
   1524c:	ldr	r3, [r5, #20]
   15250:	str	r3, [sp, #16]
   15254:	ldr	r3, [r5, #16]
   15258:	str	r3, [sp, #12]
   1525c:	ldr	r3, [r5, #12]
   15260:	str	r3, [sp, #8]
   15264:	ldr	r3, [r5, #8]
   15268:	str	r3, [sp, #4]
   1526c:	ldr	r3, [r5, #4]
   15270:	str	r3, [sp]
   15274:	ldr	r3, [r5]
   15278:	mov	r2, r0
   1527c:	mov	r1, #1
   15280:	mov	r0, r4
   15284:	bl	110d4 <__fprintf_chk@plt>
   15288:	b	15124 <__assert_fail@plt+0x3fa8>
   1528c:	mov	r2, #5
   15290:	movw	r1, #30168	; 0x75d8
   15294:	movt	r1, #1
   15298:	mov	r0, #0
   1529c:	bl	10f60 <dcgettext@plt>
   152a0:	ldr	r3, [r5, #24]
   152a4:	str	r3, [sp, #20]
   152a8:	ldr	r3, [r5, #20]
   152ac:	str	r3, [sp, #16]
   152b0:	ldr	r3, [r5, #16]
   152b4:	str	r3, [sp, #12]
   152b8:	ldr	r3, [r5, #12]
   152bc:	str	r3, [sp, #8]
   152c0:	ldr	r3, [r5, #8]
   152c4:	str	r3, [sp, #4]
   152c8:	ldr	r3, [r5, #4]
   152cc:	str	r3, [sp]
   152d0:	ldr	r3, [r5]
   152d4:	mov	r2, r0
   152d8:	mov	r1, #1
   152dc:	mov	r0, r4
   152e0:	bl	110d4 <__fprintf_chk@plt>
   152e4:	b	15124 <__assert_fail@plt+0x3fa8>
   152e8:	mov	r2, #5
   152ec:	movw	r1, #30212	; 0x7604
   152f0:	movt	r1, #1
   152f4:	mov	r0, #0
   152f8:	bl	10f60 <dcgettext@plt>
   152fc:	ldr	r3, [r5, #28]
   15300:	str	r3, [sp, #24]
   15304:	ldr	r3, [r5, #24]
   15308:	str	r3, [sp, #20]
   1530c:	ldr	r3, [r5, #20]
   15310:	str	r3, [sp, #16]
   15314:	ldr	r3, [r5, #16]
   15318:	str	r3, [sp, #12]
   1531c:	ldr	r3, [r5, #12]
   15320:	str	r3, [sp, #8]
   15324:	ldr	r3, [r5, #8]
   15328:	str	r3, [sp, #4]
   1532c:	ldr	r3, [r5, #4]
   15330:	str	r3, [sp]
   15334:	ldr	r3, [r5]
   15338:	mov	r2, r0
   1533c:	mov	r1, #1
   15340:	mov	r0, r4
   15344:	bl	110d4 <__fprintf_chk@plt>
   15348:	b	15124 <__assert_fail@plt+0x3fa8>
   1534c:	mov	r2, #5
   15350:	movw	r1, #30260	; 0x7634
   15354:	movt	r1, #1
   15358:	mov	r0, #0
   1535c:	bl	10f60 <dcgettext@plt>
   15360:	ldr	r3, [r5, #32]
   15364:	str	r3, [sp, #28]
   15368:	ldr	r3, [r5, #28]
   1536c:	str	r3, [sp, #24]
   15370:	ldr	r3, [r5, #24]
   15374:	str	r3, [sp, #20]
   15378:	ldr	r3, [r5, #20]
   1537c:	str	r3, [sp, #16]
   15380:	ldr	r3, [r5, #16]
   15384:	str	r3, [sp, #12]
   15388:	ldr	r3, [r5, #12]
   1538c:	str	r3, [sp, #8]
   15390:	ldr	r3, [r5, #8]
   15394:	str	r3, [sp, #4]
   15398:	ldr	r3, [r5, #4]
   1539c:	str	r3, [sp]
   153a0:	ldr	r3, [r5]
   153a4:	mov	r2, r0
   153a8:	mov	r1, #1
   153ac:	mov	r0, r4
   153b0:	bl	110d4 <__fprintf_chk@plt>
   153b4:	b	15124 <__assert_fail@plt+0x3fa8>
   153b8:	mov	r2, #5
   153bc:	movw	r1, #30312	; 0x7668
   153c0:	movt	r1, #1
   153c4:	mov	r0, #0
   153c8:	bl	10f60 <dcgettext@plt>
   153cc:	ldr	r3, [r5, #32]
   153d0:	str	r3, [sp, #28]
   153d4:	ldr	r3, [r5, #28]
   153d8:	str	r3, [sp, #24]
   153dc:	ldr	r3, [r5, #24]
   153e0:	str	r3, [sp, #20]
   153e4:	ldr	r3, [r5, #20]
   153e8:	str	r3, [sp, #16]
   153ec:	ldr	r3, [r5, #16]
   153f0:	str	r3, [sp, #12]
   153f4:	ldr	r3, [r5, #12]
   153f8:	str	r3, [sp, #8]
   153fc:	ldr	r3, [r5, #8]
   15400:	str	r3, [sp, #4]
   15404:	ldr	r3, [r5, #4]
   15408:	str	r3, [sp]
   1540c:	ldr	r3, [r5]
   15410:	mov	r2, r0
   15414:	mov	r1, #1
   15418:	mov	r0, r4
   1541c:	bl	110d4 <__fprintf_chk@plt>
   15420:	b	15124 <__assert_fail@plt+0x3fa8>
   15424:	strd	r4, [sp, #-12]!
   15428:	str	lr, [sp, #8]
   1542c:	sub	sp, sp, #12
   15430:	ldr	r5, [sp, #24]
   15434:	ldr	ip, [r5]
   15438:	cmp	ip, #0
   1543c:	beq	15474 <__assert_fail@plt+0x42f8>
   15440:	mov	lr, r5
   15444:	mov	ip, #0
   15448:	add	ip, ip, #1
   1544c:	ldr	r4, [lr, #4]!
   15450:	cmp	r4, #0
   15454:	bne	15448 <__assert_fail@plt+0x42cc>
   15458:	str	ip, [sp, #4]
   1545c:	str	r5, [sp]
   15460:	bl	14ff4 <__assert_fail@plt+0x3e78>
   15464:	add	sp, sp, #12
   15468:	ldrd	r4, [sp]
   1546c:	add	sp, sp, #8
   15470:	pop	{pc}		; (ldr pc, [sp], #4)
   15474:	mov	ip, #0
   15478:	b	15458 <__assert_fail@plt+0x42dc>
   1547c:	strd	r4, [sp, #-12]!
   15480:	str	lr, [sp, #8]
   15484:	sub	sp, sp, #52	; 0x34
   15488:	ldr	r5, [sp, #64]	; 0x40
   1548c:	add	r4, sp, #8
   15490:	mov	ip, #0
   15494:	ldr	lr, [r5], #4
   15498:	str	lr, [r4], #4
   1549c:	cmp	lr, #0
   154a0:	beq	154b0 <__assert_fail@plt+0x4334>
   154a4:	add	ip, ip, #1
   154a8:	cmp	ip, #10
   154ac:	bne	15494 <__assert_fail@plt+0x4318>
   154b0:	str	ip, [sp, #4]
   154b4:	add	ip, sp, #8
   154b8:	str	ip, [sp]
   154bc:	bl	14ff4 <__assert_fail@plt+0x3e78>
   154c0:	add	sp, sp, #52	; 0x34
   154c4:	ldrd	r4, [sp]
   154c8:	add	sp, sp, #8
   154cc:	pop	{pc}		; (ldr pc, [sp], #4)
   154d0:	push	{r3}		; (str r3, [sp, #-4]!)
   154d4:	push	{lr}		; (str lr, [sp, #-4]!)
   154d8:	sub	sp, sp, #16
   154dc:	add	r3, sp, #24
   154e0:	str	r3, [sp, #12]
   154e4:	str	r3, [sp]
   154e8:	ldr	r3, [sp, #20]
   154ec:	bl	1547c <__assert_fail@plt+0x4300>
   154f0:	add	sp, sp, #16
   154f4:	pop	{lr}		; (ldr lr, [sp], #4)
   154f8:	add	sp, sp, #4
   154fc:	bx	lr
   15500:	str	r4, [sp, #-8]!
   15504:	str	lr, [sp, #4]
   15508:	movw	r3, #33140	; 0x8174
   1550c:	movt	r3, #2
   15510:	ldr	r1, [r3]
   15514:	mov	r0, #10
   15518:	bl	10f54 <fputc_unlocked@plt>
   1551c:	mov	r2, #5
   15520:	movw	r1, #30372	; 0x76a4
   15524:	movt	r1, #1
   15528:	mov	r0, #0
   1552c:	bl	10f60 <dcgettext@plt>
   15530:	movw	r2, #30392	; 0x76b8
   15534:	movt	r2, #1
   15538:	mov	r1, r0
   1553c:	mov	r0, #1
   15540:	bl	110bc <__printf_chk@plt>
   15544:	mov	r2, #5
   15548:	movw	r1, #30416	; 0x76d0
   1554c:	movt	r1, #1
   15550:	mov	r0, #0
   15554:	bl	10f60 <dcgettext@plt>
   15558:	movw	r3, #28500	; 0x6f54
   1555c:	movt	r3, #1
   15560:	movw	r2, #28540	; 0x6f7c
   15564:	movt	r2, #1
   15568:	mov	r1, r0
   1556c:	mov	r0, #1
   15570:	bl	110bc <__printf_chk@plt>
   15574:	mov	r2, #5
   15578:	movw	r1, #30436	; 0x76e4
   1557c:	movt	r1, #1
   15580:	mov	r0, #0
   15584:	bl	10f60 <dcgettext@plt>
   15588:	movw	r2, #30476	; 0x770c
   1558c:	movt	r2, #1
   15590:	mov	r1, r0
   15594:	mov	r0, #1
   15598:	bl	110bc <__printf_chk@plt>
   1559c:	ldr	r4, [sp]
   155a0:	add	sp, sp, #4
   155a4:	pop	{pc}		; (ldr pc, [sp], #4)
   155a8:	str	r4, [sp, #-8]!
   155ac:	str	lr, [sp, #4]
   155b0:	bl	1609c <__assert_fail@plt+0x4f20>
   155b4:	cmp	r0, #0
   155b8:	beq	155c8 <__assert_fail@plt+0x444c>
   155bc:	ldr	r4, [sp]
   155c0:	add	sp, sp, #4
   155c4:	pop	{pc}		; (ldr pc, [sp], #4)
   155c8:	bl	15a3c <__assert_fail@plt+0x48c0>
   155cc:	str	r4, [sp, #-8]!
   155d0:	str	lr, [sp, #4]
   155d4:	bl	1609c <__assert_fail@plt+0x4f20>
   155d8:	cmp	r0, #0
   155dc:	beq	155ec <__assert_fail@plt+0x4470>
   155e0:	ldr	r4, [sp]
   155e4:	add	sp, sp, #4
   155e8:	pop	{pc}		; (ldr pc, [sp], #4)
   155ec:	bl	15a3c <__assert_fail@plt+0x48c0>
   155f0:	str	r4, [sp, #-8]!
   155f4:	str	lr, [sp, #4]
   155f8:	bl	155a8 <__assert_fail@plt+0x442c>
   155fc:	ldr	r4, [sp]
   15600:	add	sp, sp, #4
   15604:	pop	{pc}		; (ldr pc, [sp], #4)
   15608:	strd	r4, [sp, #-16]!
   1560c:	str	r6, [sp, #8]
   15610:	str	lr, [sp, #12]
   15614:	mov	r5, r0
   15618:	mov	r4, r1
   1561c:	bl	160d8 <__assert_fail@plt+0x4f5c>
   15620:	cmp	r0, #0
   15624:	beq	15638 <__assert_fail@plt+0x44bc>
   15628:	ldrd	r4, [sp]
   1562c:	ldr	r6, [sp, #8]
   15630:	add	sp, sp, #12
   15634:	pop	{pc}		; (ldr pc, [sp], #4)
   15638:	adds	r4, r4, #0
   1563c:	movne	r4, #1
   15640:	cmp	r5, #0
   15644:	moveq	r4, #1
   15648:	cmp	r4, #0
   1564c:	beq	15628 <__assert_fail@plt+0x44ac>
   15650:	bl	15a3c <__assert_fail@plt+0x48c0>
   15654:	str	r4, [sp, #-8]!
   15658:	str	lr, [sp, #4]
   1565c:	cmp	r1, #0
   15660:	orreq	r1, r1, #1
   15664:	bl	160d8 <__assert_fail@plt+0x4f5c>
   15668:	cmp	r0, #0
   1566c:	beq	1567c <__assert_fail@plt+0x4500>
   15670:	ldr	r4, [sp]
   15674:	add	sp, sp, #4
   15678:	pop	{pc}		; (ldr pc, [sp], #4)
   1567c:	bl	15a3c <__assert_fail@plt+0x48c0>
   15680:	strd	r4, [sp, #-16]!
   15684:	str	r6, [sp, #8]
   15688:	str	lr, [sp, #12]
   1568c:	mov	r4, r0
   15690:	mov	r6, r1
   15694:	mov	r5, r2
   15698:	bl	166dc <__assert_fail@plt+0x5560>
   1569c:	cmp	r0, #0
   156a0:	beq	156b4 <__assert_fail@plt+0x4538>
   156a4:	ldrd	r4, [sp]
   156a8:	ldr	r6, [sp, #8]
   156ac:	add	sp, sp, #12
   156b0:	pop	{pc}		; (ldr pc, [sp], #4)
   156b4:	cmp	r4, #0
   156b8:	beq	156c8 <__assert_fail@plt+0x454c>
   156bc:	cmp	r6, #0
   156c0:	cmpne	r5, #0
   156c4:	beq	156a4 <__assert_fail@plt+0x4528>
   156c8:	bl	15a3c <__assert_fail@plt+0x48c0>
   156cc:	str	r4, [sp, #-8]!
   156d0:	str	lr, [sp, #4]
   156d4:	bl	15680 <__assert_fail@plt+0x4504>
   156d8:	ldr	r4, [sp]
   156dc:	add	sp, sp, #4
   156e0:	pop	{pc}		; (ldr pc, [sp], #4)
   156e4:	str	r4, [sp, #-8]!
   156e8:	str	lr, [sp, #4]
   156ec:	mov	ip, r1
   156f0:	mov	r3, r2
   156f4:	cmp	r2, #0
   156f8:	cmpne	r1, #0
   156fc:	moveq	r3, #1
   15700:	moveq	ip, r3
   15704:	mov	r2, r3
   15708:	mov	r1, ip
   1570c:	bl	166dc <__assert_fail@plt+0x5560>
   15710:	cmp	r0, #0
   15714:	beq	15724 <__assert_fail@plt+0x45a8>
   15718:	ldr	r4, [sp]
   1571c:	add	sp, sp, #4
   15720:	pop	{pc}		; (ldr pc, [sp], #4)
   15724:	bl	15a3c <__assert_fail@plt+0x48c0>
   15728:	str	r4, [sp, #-8]!
   1572c:	str	lr, [sp, #4]
   15730:	mov	r2, r1
   15734:	mov	r1, r0
   15738:	mov	r0, #0
   1573c:	bl	15680 <__assert_fail@plt+0x4504>
   15740:	ldr	r4, [sp]
   15744:	add	sp, sp, #4
   15748:	pop	{pc}		; (ldr pc, [sp], #4)
   1574c:	str	r4, [sp, #-8]!
   15750:	str	lr, [sp, #4]
   15754:	mov	r2, r1
   15758:	mov	r1, r0
   1575c:	mov	r0, #0
   15760:	bl	156e4 <__assert_fail@plt+0x4568>
   15764:	ldr	r4, [sp]
   15768:	add	sp, sp, #4
   1576c:	pop	{pc}		; (ldr pc, [sp], #4)
   15770:	strd	r4, [sp, #-16]!
   15774:	str	r6, [sp, #8]
   15778:	str	lr, [sp, #12]
   1577c:	mov	r5, r1
   15780:	ldr	r4, [r1]
   15784:	cmp	r0, #0
   15788:	beq	157b8 <__assert_fail@plt+0x463c>
   1578c:	lsr	r3, r4, #1
   15790:	add	r3, r3, #1
   15794:	adds	r4, r4, r3
   15798:	bcs	157d4 <__assert_fail@plt+0x4658>
   1579c:	mov	r1, r4
   157a0:	bl	15680 <__assert_fail@plt+0x4504>
   157a4:	str	r4, [r5]
   157a8:	ldrd	r4, [sp]
   157ac:	ldr	r6, [sp, #8]
   157b0:	add	sp, sp, #12
   157b4:	pop	{pc}		; (ldr pc, [sp], #4)
   157b8:	cmp	r4, #0
   157bc:	bne	1579c <__assert_fail@plt+0x4620>
   157c0:	mov	r4, #64	; 0x40
   157c4:	udiv	r4, r4, r2
   157c8:	cmp	r2, #64	; 0x40
   157cc:	addhi	r4, r4, #1
   157d0:	b	1579c <__assert_fail@plt+0x4620>
   157d4:	bl	15a3c <__assert_fail@plt+0x48c0>
   157d8:	str	r4, [sp, #-8]!
   157dc:	str	lr, [sp, #4]
   157e0:	mov	r2, #1
   157e4:	bl	15770 <__assert_fail@plt+0x45f4>
   157e8:	ldr	r4, [sp]
   157ec:	add	sp, sp, #4
   157f0:	pop	{pc}		; (ldr pc, [sp], #4)
   157f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   157f8:	strd	r6, [sp, #8]
   157fc:	str	r8, [sp, #16]
   15800:	str	lr, [sp, #20]
   15804:	mov	r5, r1
   15808:	ldr	lr, [sp, #24]
   1580c:	ldr	ip, [r1]
   15810:	asr	r4, ip, #1
   15814:	adds	r4, ip, r4
   15818:	movvs	r1, #1
   1581c:	movvc	r1, #0
   15820:	cmp	r1, #0
   15824:	mvnne	r4, #-2147483648	; 0x80000000
   15828:	mvn	r8, r3
   1582c:	lsr	r8, r8, #31
   15830:	cmp	r3, r4
   15834:	movge	r1, #0
   15838:	andlt	r1, r8, #1
   1583c:	cmp	r1, #0
   15840:	movne	r4, r3
   15844:	smull	r6, r7, r4, lr
   15848:	asr	r1, r6, #31
   1584c:	cmp	r1, r7
   15850:	bne	15868 <__assert_fail@plt+0x46ec>
   15854:	mov	r1, r6
   15858:	cmp	r6, #63	; 0x3f
   1585c:	movle	r1, #64	; 0x40
   15860:	ble	1586c <__assert_fail@plt+0x46f0>
   15864:	b	15878 <__assert_fail@plt+0x46fc>
   15868:	mvn	r1, #-2147483648	; 0x80000000
   1586c:	sdiv	r4, r1, lr
   15870:	mls	r6, lr, r4, r1
   15874:	sub	r1, r1, r6
   15878:	cmp	r0, #0
   1587c:	moveq	r6, #0
   15880:	streq	r6, [r5]
   15884:	sub	r6, r4, ip
   15888:	cmp	r6, r2
   1588c:	bge	158c4 <__assert_fail@plt+0x4748>
   15890:	adds	r2, ip, r2
   15894:	mov	r4, r2
   15898:	bvs	158e0 <__assert_fail@plt+0x4764>
   1589c:	cmp	r2, r3
   158a0:	movle	r3, #0
   158a4:	andgt	r3, r8, #1
   158a8:	cmp	r3, #0
   158ac:	bne	158e0 <__assert_fail@plt+0x4764>
   158b0:	smull	r2, r3, r2, lr
   158b4:	asr	ip, r2, #31
   158b8:	mov	r1, r2
   158bc:	cmp	ip, r3
   158c0:	bne	158e0 <__assert_fail@plt+0x4764>
   158c4:	bl	15608 <__assert_fail@plt+0x448c>
   158c8:	str	r4, [r5]
   158cc:	ldrd	r4, [sp]
   158d0:	ldrd	r6, [sp, #8]
   158d4:	ldr	r8, [sp, #16]
   158d8:	add	sp, sp, #20
   158dc:	pop	{pc}		; (ldr pc, [sp], #4)
   158e0:	bl	15a3c <__assert_fail@plt+0x48c0>
   158e4:	str	r4, [sp, #-8]!
   158e8:	str	lr, [sp, #4]
   158ec:	bl	16028 <__assert_fail@plt+0x4eac>
   158f0:	cmp	r0, #0
   158f4:	beq	15904 <__assert_fail@plt+0x4788>
   158f8:	ldr	r4, [sp]
   158fc:	add	sp, sp, #4
   15900:	pop	{pc}		; (ldr pc, [sp], #4)
   15904:	bl	15a3c <__assert_fail@plt+0x48c0>
   15908:	str	r4, [sp, #-8]!
   1590c:	str	lr, [sp, #4]
   15910:	mov	r1, #1
   15914:	bl	158e4 <__assert_fail@plt+0x4768>
   15918:	ldr	r4, [sp]
   1591c:	add	sp, sp, #4
   15920:	pop	{pc}		; (ldr pc, [sp], #4)
   15924:	str	r4, [sp, #-8]!
   15928:	str	lr, [sp, #4]
   1592c:	bl	16028 <__assert_fail@plt+0x4eac>
   15930:	cmp	r0, #0
   15934:	beq	15944 <__assert_fail@plt+0x47c8>
   15938:	ldr	r4, [sp]
   1593c:	add	sp, sp, #4
   15940:	pop	{pc}		; (ldr pc, [sp], #4)
   15944:	bl	15a3c <__assert_fail@plt+0x48c0>
   15948:	str	r4, [sp, #-8]!
   1594c:	str	lr, [sp, #4]
   15950:	mov	r1, #1
   15954:	bl	15924 <__assert_fail@plt+0x47a8>
   15958:	ldr	r4, [sp]
   1595c:	add	sp, sp, #4
   15960:	pop	{pc}		; (ldr pc, [sp], #4)
   15964:	strd	r4, [sp, #-16]!
   15968:	str	r6, [sp, #8]
   1596c:	str	lr, [sp, #12]
   15970:	mov	r5, r0
   15974:	mov	r4, r1
   15978:	mov	r0, r1
   1597c:	bl	155a8 <__assert_fail@plt+0x442c>
   15980:	mov	r2, r4
   15984:	mov	r1, r5
   15988:	bl	10f30 <memcpy@plt>
   1598c:	ldrd	r4, [sp]
   15990:	ldr	r6, [sp, #8]
   15994:	add	sp, sp, #12
   15998:	pop	{pc}		; (ldr pc, [sp], #4)
   1599c:	strd	r4, [sp, #-16]!
   159a0:	str	r6, [sp, #8]
   159a4:	str	lr, [sp, #12]
   159a8:	mov	r5, r0
   159ac:	mov	r4, r1
   159b0:	mov	r0, r1
   159b4:	bl	155cc <__assert_fail@plt+0x4450>
   159b8:	mov	r2, r4
   159bc:	mov	r1, r5
   159c0:	bl	10f30 <memcpy@plt>
   159c4:	ldrd	r4, [sp]
   159c8:	ldr	r6, [sp, #8]
   159cc:	add	sp, sp, #12
   159d0:	pop	{pc}		; (ldr pc, [sp], #4)
   159d4:	strd	r4, [sp, #-16]!
   159d8:	str	r6, [sp, #8]
   159dc:	str	lr, [sp, #12]
   159e0:	mov	r5, r0
   159e4:	mov	r4, r1
   159e8:	add	r0, r1, #1
   159ec:	bl	155cc <__assert_fail@plt+0x4450>
   159f0:	mov	r2, #0
   159f4:	strb	r2, [r0, r4]
   159f8:	mov	r2, r4
   159fc:	mov	r1, r5
   15a00:	bl	10f30 <memcpy@plt>
   15a04:	ldrd	r4, [sp]
   15a08:	ldr	r6, [sp, #8]
   15a0c:	add	sp, sp, #12
   15a10:	pop	{pc}		; (ldr pc, [sp], #4)
   15a14:	str	r4, [sp, #-8]!
   15a18:	str	lr, [sp, #4]
   15a1c:	mov	r4, r0
   15a20:	bl	11068 <strlen@plt>
   15a24:	add	r1, r0, #1
   15a28:	mov	r0, r4
   15a2c:	bl	15964 <__assert_fail@plt+0x47e8>
   15a30:	ldr	r4, [sp]
   15a34:	add	sp, sp, #4
   15a38:	pop	{pc}		; (ldr pc, [sp], #4)
   15a3c:	str	r4, [sp, #-8]!
   15a40:	str	lr, [sp, #4]
   15a44:	movw	r3, #33048	; 0x8118
   15a48:	movt	r3, #2
   15a4c:	ldr	r4, [r3]
   15a50:	mov	r2, #5
   15a54:	movw	r1, #30556	; 0x775c
   15a58:	movt	r1, #1
   15a5c:	mov	r0, #0
   15a60:	bl	10f60 <dcgettext@plt>
   15a64:	mov	r3, r0
   15a68:	movw	r2, #29428	; 0x72f4
   15a6c:	movt	r2, #1
   15a70:	mov	r1, #0
   15a74:	mov	r0, r4
   15a78:	bl	10ff0 <error@plt>
   15a7c:	bl	11158 <abort@plt>
   15a80:	str	r4, [sp, #-8]!
   15a84:	str	lr, [sp, #4]
   15a88:	bl	164b0 <__assert_fail@plt+0x5334>
   15a8c:	mov	r4, r0
   15a90:	cmn	r0, #1
   15a94:	beq	15aa8 <__assert_fail@plt+0x492c>
   15a98:	mov	r0, r4
   15a9c:	ldr	r4, [sp]
   15aa0:	add	sp, sp, #4
   15aa4:	pop	{pc}		; (ldr pc, [sp], #4)
   15aa8:	bl	11080 <__errno_location@plt>
   15aac:	ldr	r3, [r0]
   15ab0:	cmp	r3, #12
   15ab4:	bne	15a98 <__assert_fail@plt+0x491c>
   15ab8:	bl	15a3c <__assert_fail@plt+0x48c0>
   15abc:	cmp	r2, #0
   15ac0:	beq	15b28 <__assert_fail@plt+0x49ac>
   15ac4:	strd	r4, [sp, #-8]!
   15ac8:	sub	ip, r2, #1
   15acc:	ldr	r4, [r0]
   15ad0:	mov	r2, #0
   15ad4:	mov	r3, #0
   15ad8:	cmp	r1, r3
   15adc:	blt	15b1c <__assert_fail@plt+0x49a0>
   15ae0:	umull	r4, r5, r1, r4
   15ae4:	cmp	r5, #0
   15ae8:	movne	r3, #1
   15aec:	and	r3, r3, #1
   15af0:	cmp	r3, #0
   15af4:	mvnne	r4, #0
   15af8:	orr	r2, r2, r3
   15afc:	sub	ip, ip, #1
   15b00:	cmn	ip, #1
   15b04:	bne	15ad4 <__assert_fail@plt+0x4958>
   15b08:	str	r4, [r0]
   15b0c:	mov	r0, r2
   15b10:	ldrd	r4, [sp]
   15b14:	add	sp, sp, #8
   15b18:	bx	lr
   15b1c:	subs	r3, r4, r3
   15b20:	movne	r3, #1
   15b24:	b	15ae0 <__assert_fail@plt+0x4964>
   15b28:	mov	r2, #0
   15b2c:	mov	r0, r2
   15b30:	bx	lr
   15b34:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15b38:	strd	r6, [sp, #8]
   15b3c:	strd	r8, [sp, #16]
   15b40:	str	lr, [sp, #24]
   15b44:	sub	sp, sp, #12
   15b48:	cmp	r2, #36	; 0x24
   15b4c:	bhi	15ba0 <__assert_fail@plt+0x4a24>
   15b50:	mov	r5, r0
   15b54:	mov	r6, r1
   15b58:	mov	r7, r2
   15b5c:	mov	r9, r3
   15b60:	cmp	r1, #0
   15b64:	addeq	r6, sp, #4
   15b68:	bl	11080 <__errno_location@plt>
   15b6c:	mov	r8, r0
   15b70:	mov	r3, #0
   15b74:	str	r3, [r0]
   15b78:	ldrb	r4, [r5]
   15b7c:	bl	11044 <__ctype_b_loc@plt>
   15b80:	ldr	r1, [r0]
   15b84:	mov	r2, r5
   15b88:	lsl	r3, r4, #1
   15b8c:	ldrh	r3, [r1, r3]
   15b90:	tst	r3, #8192	; 0x2000
   15b94:	beq	15bc0 <__assert_fail@plt+0x4a44>
   15b98:	ldrb	r4, [r2, #1]!
   15b9c:	b	15b88 <__assert_fail@plt+0x4a0c>
   15ba0:	movw	r3, #30576	; 0x7770
   15ba4:	movt	r3, #1
   15ba8:	mov	r2, #85	; 0x55
   15bac:	movw	r1, #30588	; 0x777c
   15bb0:	movt	r1, #1
   15bb4:	movw	r0, #30604	; 0x778c
   15bb8:	movt	r0, #1
   15bbc:	bl	1117c <__assert_fail@plt>
   15bc0:	cmp	r4, #45	; 0x2d
   15bc4:	moveq	r4, #4
   15bc8:	beq	15d54 <__assert_fail@plt+0x4bd8>
   15bcc:	mov	r2, r7
   15bd0:	mov	r1, r6
   15bd4:	mov	r0, r5
   15bd8:	bl	1105c <strtoul@plt>
   15bdc:	str	r0, [sp]
   15be0:	ldr	r7, [r6]
   15be4:	cmp	r7, r5
   15be8:	beq	15c0c <__assert_fail@plt+0x4a90>
   15bec:	ldr	r3, [r8]
   15bf0:	cmp	r3, #0
   15bf4:	beq	15d2c <__assert_fail@plt+0x4bb0>
   15bf8:	cmp	r3, #34	; 0x22
   15bfc:	moveq	r4, #1
   15c00:	beq	15d30 <__assert_fail@plt+0x4bb4>
   15c04:	mov	r4, #4
   15c08:	b	15d54 <__assert_fail@plt+0x4bd8>
   15c0c:	ldr	r3, [sp, #40]	; 0x28
   15c10:	cmp	r3, #0
   15c14:	beq	16018 <__assert_fail@plt+0x4e9c>
   15c18:	ldrb	r1, [r5]
   15c1c:	cmp	r1, #0
   15c20:	moveq	r4, #4
   15c24:	beq	15d54 <__assert_fail@plt+0x4bd8>
   15c28:	mov	r0, r3
   15c2c:	bl	11074 <strchr@plt>
   15c30:	cmp	r0, #0
   15c34:	beq	16020 <__assert_fail@plt+0x4ea4>
   15c38:	mov	r3, #1
   15c3c:	str	r3, [sp]
   15c40:	ldrb	r5, [r7]
   15c44:	mov	r4, #0
   15c48:	mov	r1, r5
   15c4c:	ldr	r0, [sp, #40]	; 0x28
   15c50:	bl	11074 <strchr@plt>
   15c54:	cmp	r0, #0
   15c58:	beq	15d70 <__assert_fail@plt+0x4bf4>
   15c5c:	sub	r3, r5, #69	; 0x45
   15c60:	cmp	r3, #47	; 0x2f
   15c64:	ldrls	pc, [pc, r3, lsl #2]
   15c68:	b	15ebc <__assert_fail@plt+0x4d40>
   15c6c:	andeq	r5, r1, r0, lsl #27
   15c70:			; <UNDEFINED> instruction: 0x00015ebc
   15c74:	andeq	r5, r1, r0, lsl #27
   15c78:			; <UNDEFINED> instruction: 0x00015ebc
   15c7c:			; <UNDEFINED> instruction: 0x00015ebc
   15c80:			; <UNDEFINED> instruction: 0x00015ebc
   15c84:	andeq	r5, r1, r0, lsl #27
   15c88:			; <UNDEFINED> instruction: 0x00015ebc
   15c8c:	andeq	r5, r1, r0, lsl #27
   15c90:			; <UNDEFINED> instruction: 0x00015ebc
   15c94:			; <UNDEFINED> instruction: 0x00015ebc
   15c98:	andeq	r5, r1, r0, lsl #27
   15c9c:			; <UNDEFINED> instruction: 0x00015ebc
   15ca0:			; <UNDEFINED> instruction: 0x00015ebc
   15ca4:			; <UNDEFINED> instruction: 0x00015ebc
   15ca8:	andeq	r5, r1, r0, lsl #27
   15cac:			; <UNDEFINED> instruction: 0x00015ebc
   15cb0:			; <UNDEFINED> instruction: 0x00015ebc
   15cb4:			; <UNDEFINED> instruction: 0x00015ebc
   15cb8:			; <UNDEFINED> instruction: 0x00015ebc
   15cbc:	andeq	r5, r1, r0, lsl #27
   15cc0:	andeq	r5, r1, r0, lsl #27
   15cc4:			; <UNDEFINED> instruction: 0x00015ebc
   15cc8:			; <UNDEFINED> instruction: 0x00015ebc
   15ccc:			; <UNDEFINED> instruction: 0x00015ebc
   15cd0:			; <UNDEFINED> instruction: 0x00015ebc
   15cd4:			; <UNDEFINED> instruction: 0x00015ebc
   15cd8:			; <UNDEFINED> instruction: 0x00015ebc
   15cdc:			; <UNDEFINED> instruction: 0x00015ebc
   15ce0:			; <UNDEFINED> instruction: 0x00015ebc
   15ce4:			; <UNDEFINED> instruction: 0x00015ebc
   15ce8:			; <UNDEFINED> instruction: 0x00015ebc
   15cec:			; <UNDEFINED> instruction: 0x00015ebc
   15cf0:			; <UNDEFINED> instruction: 0x00015ebc
   15cf4:	andeq	r5, r1, r0, lsl #27
   15cf8:			; <UNDEFINED> instruction: 0x00015ebc
   15cfc:			; <UNDEFINED> instruction: 0x00015ebc
   15d00:			; <UNDEFINED> instruction: 0x00015ebc
   15d04:	andeq	r5, r1, r0, lsl #27
   15d08:			; <UNDEFINED> instruction: 0x00015ebc
   15d0c:	andeq	r5, r1, r0, lsl #27
   15d10:			; <UNDEFINED> instruction: 0x00015ebc
   15d14:			; <UNDEFINED> instruction: 0x00015ebc
   15d18:			; <UNDEFINED> instruction: 0x00015ebc
   15d1c:			; <UNDEFINED> instruction: 0x00015ebc
   15d20:			; <UNDEFINED> instruction: 0x00015ebc
   15d24:			; <UNDEFINED> instruction: 0x00015ebc
   15d28:	andeq	r5, r1, r0, lsl #27
   15d2c:	mov	r4, #0
   15d30:	ldr	r3, [sp, #40]	; 0x28
   15d34:	cmp	r3, #0
   15d38:	streq	r0, [r9]
   15d3c:	beq	15d54 <__assert_fail@plt+0x4bd8>
   15d40:	ldrb	r5, [r7]
   15d44:	cmp	r5, #0
   15d48:	bne	15c48 <__assert_fail@plt+0x4acc>
   15d4c:	ldr	r3, [sp]
   15d50:	str	r3, [r9]
   15d54:	mov	r0, r4
   15d58:	add	sp, sp, #12
   15d5c:	ldrd	r4, [sp]
   15d60:	ldrd	r6, [sp, #8]
   15d64:	ldrd	r8, [sp, #16]
   15d68:	add	sp, sp, #24
   15d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d70:	ldr	r3, [sp]
   15d74:	str	r3, [r9]
   15d78:	orr	r4, r4, #2
   15d7c:	b	15d54 <__assert_fail@plt+0x4bd8>
   15d80:	mov	r1, #48	; 0x30
   15d84:	ldr	r0, [sp, #40]	; 0x28
   15d88:	bl	11074 <strchr@plt>
   15d8c:	cmp	r0, #0
   15d90:	beq	15ec8 <__assert_fail@plt+0x4d4c>
   15d94:	ldrb	r3, [r7, #1]
   15d98:	cmp	r3, #68	; 0x44
   15d9c:	beq	15ed4 <__assert_fail@plt+0x4d58>
   15da0:	cmp	r3, #105	; 0x69
   15da4:	beq	15ea4 <__assert_fail@plt+0x4d28>
   15da8:	cmp	r3, #66	; 0x42
   15dac:	moveq	r7, #2
   15db0:	movne	r7, #1
   15db4:	moveq	r1, #1000	; 0x3e8
   15db8:	movne	r1, #1024	; 0x400
   15dbc:	sub	r5, r5, #66	; 0x42
   15dc0:	cmp	r5, #53	; 0x35
   15dc4:	ldrls	pc, [pc, r5, lsl #2]
   15dc8:	b	15fe4 <__assert_fail@plt+0x4e68>
   15dcc:	andeq	r5, r1, ip, lsl #30
   15dd0:	andeq	r5, r1, r4, ror #31
   15dd4:	andeq	r5, r1, r4, ror #31
   15dd8:	andeq	r5, r1, r8, lsr pc
   15ddc:	andeq	r5, r1, r4, ror #31
   15de0:	andeq	r5, r1, r8, asr #30
   15de4:	andeq	r5, r1, r4, ror #31
   15de8:	andeq	r5, r1, r4, ror #31
   15dec:	andeq	r5, r1, r4, ror #31
   15df0:	andeq	r5, r1, r8, asr pc
   15df4:	andeq	r5, r1, r4, ror #31
   15df8:	andeq	r5, r1, r8, ror #30
   15dfc:	andeq	r5, r1, r4, ror #31
   15e00:	andeq	r5, r1, r4, ror #31
   15e04:	andeq	r5, r1, r8, ror pc
   15e08:	andeq	r5, r1, r4, ror #31
   15e0c:	andeq	r5, r1, r4, ror #31
   15e10:	andeq	r5, r1, r4, ror #31
   15e14:	andeq	r5, r1, r8, lsl #31
   15e18:	andeq	r5, r1, r4, ror #31
   15e1c:	andeq	r5, r1, r4, ror #31
   15e20:	andeq	r5, r1, r4, ror #31
   15e24:	andeq	r5, r1, r4, ror #31
   15e28:	andeq	r5, r1, r4, asr #31
   15e2c:	ldrdeq	r5, [r1], -r4
   15e30:	andeq	r5, r1, r4, ror #31
   15e34:	andeq	r5, r1, r4, ror #31
   15e38:	andeq	r5, r1, r4, ror #31
   15e3c:	andeq	r5, r1, r4, ror #31
   15e40:	andeq	r5, r1, r4, ror #31
   15e44:	andeq	r5, r1, r4, ror #31
   15e48:	andeq	r5, r1, r4, ror #31
   15e4c:	andeq	r5, r1, r0, ror #29
   15e50:	strdeq	r5, [r1], -r4
   15e54:	andeq	r5, r1, r4, ror #31
   15e58:	andeq	r5, r1, r4, ror #31
   15e5c:	andeq	r5, r1, r4, ror #31
   15e60:	andeq	r5, r1, r8, asr #30
   15e64:	andeq	r5, r1, r4, ror #31
   15e68:	andeq	r5, r1, r4, ror #31
   15e6c:	andeq	r5, r1, r4, ror #31
   15e70:	andeq	r5, r1, r8, asr pc
   15e74:	andeq	r5, r1, r4, ror #31
   15e78:	andeq	r5, r1, r8, ror #30
   15e7c:	andeq	r5, r1, r4, ror #31
   15e80:	andeq	r5, r1, r4, ror #31
   15e84:	andeq	r5, r1, r4, ror #31
   15e88:	andeq	r5, r1, r4, ror #31
   15e8c:	andeq	r5, r1, r4, ror #31
   15e90:	andeq	r5, r1, r4, ror #31
   15e94:	andeq	r5, r1, r8, lsl #31
   15e98:	andeq	r5, r1, r4, ror #31
   15e9c:	andeq	r5, r1, r4, ror #31
   15ea0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15ea4:	ldrb	r3, [r7, #2]
   15ea8:	cmp	r3, #66	; 0x42
   15eac:	movne	r7, #1
   15eb0:	moveq	r7, #3
   15eb4:	mov	r1, #1024	; 0x400
   15eb8:	b	15dbc <__assert_fail@plt+0x4c40>
   15ebc:	mov	r7, #1
   15ec0:	mov	r1, #1024	; 0x400
   15ec4:	b	15dbc <__assert_fail@plt+0x4c40>
   15ec8:	mov	r7, #1
   15ecc:	mov	r1, #1024	; 0x400
   15ed0:	b	15dbc <__assert_fail@plt+0x4c40>
   15ed4:	mov	r7, #2
   15ed8:	mov	r1, #1000	; 0x3e8
   15edc:	b	15dbc <__assert_fail@plt+0x4c40>
   15ee0:	ldr	r3, [sp]
   15ee4:	lsl	r2, r3, #9
   15ee8:	lsr	r3, r3, #23
   15eec:	cmp	r3, #0
   15ef0:	mvnne	r3, #0
   15ef4:	strne	r3, [sp]
   15ef8:	movne	r0, #1
   15efc:	bne	15ff8 <__assert_fail@plt+0x4e7c>
   15f00:	str	r2, [sp]
   15f04:	mov	r0, #0
   15f08:	b	15ff8 <__assert_fail@plt+0x4e7c>
   15f0c:	ldr	r3, [sp]
   15f10:	lsl	r2, r3, #10
   15f14:	lsr	r3, r3, #22
   15f18:	cmp	r3, #0
   15f1c:	mvnne	r3, #0
   15f20:	strne	r3, [sp]
   15f24:	movne	r0, #1
   15f28:	bne	15ff8 <__assert_fail@plt+0x4e7c>
   15f2c:	str	r2, [sp]
   15f30:	mov	r0, #0
   15f34:	b	15ff8 <__assert_fail@plt+0x4e7c>
   15f38:	mov	r2, #6
   15f3c:	mov	r0, sp
   15f40:	bl	15abc <__assert_fail@plt+0x4940>
   15f44:	b	15ff8 <__assert_fail@plt+0x4e7c>
   15f48:	mov	r2, #3
   15f4c:	mov	r0, sp
   15f50:	bl	15abc <__assert_fail@plt+0x4940>
   15f54:	b	15ff8 <__assert_fail@plt+0x4e7c>
   15f58:	mov	r2, #1
   15f5c:	mov	r0, sp
   15f60:	bl	15abc <__assert_fail@plt+0x4940>
   15f64:	b	15ff8 <__assert_fail@plt+0x4e7c>
   15f68:	mov	r2, #2
   15f6c:	mov	r0, sp
   15f70:	bl	15abc <__assert_fail@plt+0x4940>
   15f74:	b	15ff8 <__assert_fail@plt+0x4e7c>
   15f78:	mov	r2, #5
   15f7c:	mov	r0, sp
   15f80:	bl	15abc <__assert_fail@plt+0x4940>
   15f84:	b	15ff8 <__assert_fail@plt+0x4e7c>
   15f88:	mov	r2, #4
   15f8c:	mov	r0, sp
   15f90:	bl	15abc <__assert_fail@plt+0x4940>
   15f94:	b	15ff8 <__assert_fail@plt+0x4e7c>
   15f98:	ldr	r3, [sp]
   15f9c:	lsl	r2, r3, #1
   15fa0:	lsr	r3, r3, #31
   15fa4:	cmp	r3, #0
   15fa8:	mvnne	r3, #0
   15fac:	strne	r3, [sp]
   15fb0:	movne	r0, #1
   15fb4:	bne	15ff8 <__assert_fail@plt+0x4e7c>
   15fb8:	str	r2, [sp]
   15fbc:	mov	r0, #0
   15fc0:	b	15ff8 <__assert_fail@plt+0x4e7c>
   15fc4:	mov	r2, #8
   15fc8:	mov	r0, sp
   15fcc:	bl	15abc <__assert_fail@plt+0x4940>
   15fd0:	b	15ff8 <__assert_fail@plt+0x4e7c>
   15fd4:	mov	r2, #7
   15fd8:	mov	r0, sp
   15fdc:	bl	15abc <__assert_fail@plt+0x4940>
   15fe0:	b	15ff8 <__assert_fail@plt+0x4e7c>
   15fe4:	ldr	r3, [sp]
   15fe8:	str	r3, [r9]
   15fec:	orr	r4, r4, #2
   15ff0:	b	15d54 <__assert_fail@plt+0x4bd8>
   15ff4:	mov	r0, #0
   15ff8:	orr	r4, r4, r0
   15ffc:	ldr	r3, [r6]
   16000:	add	r2, r3, r7
   16004:	str	r2, [r6]
   16008:	ldrb	r3, [r3, r7]
   1600c:	cmp	r3, #0
   16010:	orrne	r4, r4, #2
   16014:	b	15d4c <__assert_fail@plt+0x4bd0>
   16018:	mov	r4, #4
   1601c:	b	15d54 <__assert_fail@plt+0x4bd8>
   16020:	mov	r4, #4
   16024:	b	15d54 <__assert_fail@plt+0x4bd8>
   16028:	strd	r4, [sp, #-16]!
   1602c:	str	r6, [sp, #8]
   16030:	str	lr, [sp, #12]
   16034:	cmp	r1, #0
   16038:	cmpne	r0, #0
   1603c:	beq	16078 <__assert_fail@plt+0x4efc>
   16040:	mov	r2, r0
   16044:	mov	r3, r1
   16048:	umull	r4, r5, r0, r1
   1604c:	adds	r1, r5, #0
   16050:	movne	r1, #1
   16054:	cmp	r4, #0
   16058:	movlt	r1, #1
   1605c:	cmp	r1, #0
   16060:	beq	16080 <__assert_fail@plt+0x4f04>
   16064:	bl	11080 <__errno_location@plt>
   16068:	mov	r3, #12
   1606c:	str	r3, [r0]
   16070:	mov	r0, #0
   16074:	b	1608c <__assert_fail@plt+0x4f10>
   16078:	mov	r3, #1
   1607c:	mov	r2, r3
   16080:	mov	r1, r3
   16084:	mov	r0, r2
   16088:	bl	10ea0 <calloc@plt>
   1608c:	ldrd	r4, [sp]
   16090:	ldr	r6, [sp, #8]
   16094:	add	sp, sp, #12
   16098:	pop	{pc}		; (ldr pc, [sp], #4)
   1609c:	str	r4, [sp, #-8]!
   160a0:	str	lr, [sp, #4]
   160a4:	cmp	r0, #0
   160a8:	beq	160c4 <__assert_fail@plt+0x4f48>
   160ac:	bge	160c8 <__assert_fail@plt+0x4f4c>
   160b0:	bl	11080 <__errno_location@plt>
   160b4:	mov	r3, #12
   160b8:	str	r3, [r0]
   160bc:	mov	r0, #0
   160c0:	b	160cc <__assert_fail@plt+0x4f50>
   160c4:	mov	r0, #1
   160c8:	bl	11008 <malloc@plt>
   160cc:	ldr	r4, [sp]
   160d0:	add	sp, sp, #4
   160d4:	pop	{pc}		; (ldr pc, [sp], #4)
   160d8:	str	r4, [sp, #-8]!
   160dc:	str	lr, [sp, #4]
   160e0:	cmp	r0, #0
   160e4:	beq	16108 <__assert_fail@plt+0x4f8c>
   160e8:	cmp	r1, #0
   160ec:	beq	16114 <__assert_fail@plt+0x4f98>
   160f0:	cmp	r1, #0
   160f4:	blt	16120 <__assert_fail@plt+0x4fa4>
   160f8:	bl	10f6c <realloc@plt>
   160fc:	ldr	r4, [sp]
   16100:	add	sp, sp, #4
   16104:	pop	{pc}		; (ldr pc, [sp], #4)
   16108:	mov	r0, r1
   1610c:	bl	1609c <__assert_fail@plt+0x4f20>
   16110:	b	160fc <__assert_fail@plt+0x4f80>
   16114:	bl	12804 <__assert_fail@plt+0x1688>
   16118:	mov	r0, #0
   1611c:	b	160fc <__assert_fail@plt+0x4f80>
   16120:	bl	11080 <__errno_location@plt>
   16124:	mov	r3, #12
   16128:	str	r3, [r0]
   1612c:	mov	r0, #0
   16130:	b	160fc <__assert_fail@plt+0x4f80>
   16134:	strd	r4, [sp, #-16]!
   16138:	str	r6, [sp, #8]
   1613c:	str	lr, [sp, #12]
   16140:	mov	r5, r0
   16144:	bl	10fd8 <__fpending@plt>
   16148:	mov	r6, r0
   1614c:	ldr	r4, [r5]
   16150:	and	r4, r4, #32
   16154:	mov	r0, r5
   16158:	bl	161c0 <__assert_fail@plt+0x5044>
   1615c:	cmp	r4, #0
   16160:	bne	16194 <__assert_fail@plt+0x5018>
   16164:	cmp	r0, #0
   16168:	beq	16184 <__assert_fail@plt+0x5008>
   1616c:	cmp	r6, #0
   16170:	bne	161b0 <__assert_fail@plt+0x5034>
   16174:	bl	11080 <__errno_location@plt>
   16178:	ldr	r0, [r0]
   1617c:	subs	r0, r0, #9
   16180:	mvnne	r0, #0
   16184:	ldrd	r4, [sp]
   16188:	ldr	r6, [sp, #8]
   1618c:	add	sp, sp, #12
   16190:	pop	{pc}		; (ldr pc, [sp], #4)
   16194:	cmp	r0, #0
   16198:	bne	161b8 <__assert_fail@plt+0x503c>
   1619c:	bl	11080 <__errno_location@plt>
   161a0:	mov	r3, #0
   161a4:	str	r3, [r0]
   161a8:	mvn	r0, #0
   161ac:	b	16184 <__assert_fail@plt+0x5008>
   161b0:	mvn	r0, #0
   161b4:	b	16184 <__assert_fail@plt+0x5008>
   161b8:	mvn	r0, #0
   161bc:	b	16184 <__assert_fail@plt+0x5008>
   161c0:	strd	r4, [sp, #-16]!
   161c4:	str	r6, [sp, #8]
   161c8:	str	lr, [sp, #12]
   161cc:	sub	sp, sp, #8
   161d0:	mov	r4, r0
   161d4:	bl	110c8 <fileno@plt>
   161d8:	cmp	r0, #0
   161dc:	blt	16254 <__assert_fail@plt+0x50d8>
   161e0:	mov	r0, r4
   161e4:	bl	11020 <__freading@plt>
   161e8:	cmp	r0, #0
   161ec:	beq	16220 <__assert_fail@plt+0x50a4>
   161f0:	mov	r0, r4
   161f4:	bl	110c8 <fileno@plt>
   161f8:	mov	r3, #1
   161fc:	str	r3, [sp]
   16200:	mov	r2, #0
   16204:	mov	r3, #0
   16208:	bl	10fb4 <lseek64@plt>
   1620c:	mvn	r2, #0
   16210:	mvn	r3, #0
   16214:	cmp	r1, r3
   16218:	cmpeq	r0, r2
   1621c:	beq	16260 <__assert_fail@plt+0x50e4>
   16220:	mov	r0, r4
   16224:	bl	1627c <__assert_fail@plt+0x5100>
   16228:	cmp	r0, #0
   1622c:	beq	16260 <__assert_fail@plt+0x50e4>
   16230:	bl	11080 <__errno_location@plt>
   16234:	mov	r5, r0
   16238:	ldr	r6, [r0]
   1623c:	mov	r0, r4
   16240:	bl	110e0 <fclose@plt>
   16244:	cmp	r6, #0
   16248:	strne	r6, [r5]
   1624c:	mvnne	r0, #0
   16250:	b	16268 <__assert_fail@plt+0x50ec>
   16254:	mov	r0, r4
   16258:	bl	110e0 <fclose@plt>
   1625c:	b	16268 <__assert_fail@plt+0x50ec>
   16260:	mov	r0, r4
   16264:	bl	110e0 <fclose@plt>
   16268:	add	sp, sp, #8
   1626c:	ldrd	r4, [sp]
   16270:	ldr	r6, [sp, #8]
   16274:	add	sp, sp, #12
   16278:	pop	{pc}		; (ldr pc, [sp], #4)
   1627c:	str	r4, [sp, #-8]!
   16280:	str	lr, [sp, #4]
   16284:	sub	sp, sp, #8
   16288:	subs	r4, r0, #0
   1628c:	beq	162a0 <__assert_fail@plt+0x5124>
   16290:	mov	r0, r4
   16294:	bl	11020 <__freading@plt>
   16298:	cmp	r0, #0
   1629c:	bne	162b8 <__assert_fail@plt+0x513c>
   162a0:	mov	r0, r4
   162a4:	bl	10f00 <fflush@plt>
   162a8:	add	sp, sp, #8
   162ac:	ldr	r4, [sp]
   162b0:	add	sp, sp, #4
   162b4:	pop	{pc}		; (ldr pc, [sp], #4)
   162b8:	ldr	r3, [r4]
   162bc:	tst	r3, #256	; 0x100
   162c0:	bne	162d0 <__assert_fail@plt+0x5154>
   162c4:	mov	r0, r4
   162c8:	bl	10f00 <fflush@plt>
   162cc:	b	162a8 <__assert_fail@plt+0x512c>
   162d0:	mov	r3, #1
   162d4:	str	r3, [sp]
   162d8:	mov	r2, #0
   162dc:	mov	r3, #0
   162e0:	mov	r0, r4
   162e4:	bl	162ec <__assert_fail@plt+0x5170>
   162e8:	b	162c4 <__assert_fail@plt+0x5148>
   162ec:	str	r4, [sp, #-16]!
   162f0:	strd	r6, [sp, #4]
   162f4:	str	lr, [sp, #12]
   162f8:	sub	sp, sp, #8
   162fc:	mov	r4, r0
   16300:	mov	r6, r2
   16304:	mov	r7, r3
   16308:	ldr	r2, [r0, #8]
   1630c:	ldr	r3, [r0, #4]
   16310:	cmp	r2, r3
   16314:	beq	16344 <__assert_fail@plt+0x51c8>
   16318:	ldr	r3, [sp, #24]
   1631c:	str	r3, [sp]
   16320:	mov	r2, r6
   16324:	mov	r3, r7
   16328:	mov	r0, r4
   1632c:	bl	110ec <fseeko64@plt>
   16330:	add	sp, sp, #8
   16334:	ldr	r4, [sp]
   16338:	ldrd	r6, [sp, #4]
   1633c:	add	sp, sp, #12
   16340:	pop	{pc}		; (ldr pc, [sp], #4)
   16344:	ldr	r2, [r0, #20]
   16348:	ldr	r3, [r0, #16]
   1634c:	cmp	r2, r3
   16350:	bne	16318 <__assert_fail@plt+0x519c>
   16354:	ldr	r3, [r0, #36]	; 0x24
   16358:	cmp	r3, #0
   1635c:	bne	16318 <__assert_fail@plt+0x519c>
   16360:	bl	110c8 <fileno@plt>
   16364:	ldr	r3, [sp, #24]
   16368:	str	r3, [sp]
   1636c:	mov	r2, r6
   16370:	mov	r3, r7
   16374:	bl	10fb4 <lseek64@plt>
   16378:	mvn	r2, #0
   1637c:	mvn	r3, #0
   16380:	cmp	r1, r3
   16384:	cmpeq	r0, r2
   16388:	beq	163a4 <__assert_fail@plt+0x5228>
   1638c:	ldr	r3, [r4]
   16390:	bic	r3, r3, #16
   16394:	str	r3, [r4]
   16398:	strd	r0, [r4, #80]	; 0x50
   1639c:	mov	r0, #0
   163a0:	b	16330 <__assert_fail@plt+0x51b4>
   163a4:	mvn	r0, #0
   163a8:	b	16330 <__assert_fail@plt+0x51b4>
   163ac:	str	r4, [sp, #-8]!
   163b0:	str	lr, [sp, #4]
   163b4:	mov	r0, #14
   163b8:	bl	11128 <nl_langinfo@plt>
   163bc:	cmp	r0, #0
   163c0:	beq	163e4 <__assert_fail@plt+0x5268>
   163c4:	ldrb	r2, [r0]
   163c8:	movw	r3, #30644	; 0x77b4
   163cc:	movt	r3, #1
   163d0:	cmp	r2, #0
   163d4:	moveq	r0, r3
   163d8:	ldr	r4, [sp]
   163dc:	add	sp, sp, #4
   163e0:	pop	{pc}		; (ldr pc, [sp], #4)
   163e4:	movw	r0, #30644	; 0x77b4
   163e8:	movt	r0, #1
   163ec:	b	163d8 <__assert_fail@plt+0x525c>
   163f0:	strd	r4, [sp, #-20]!	; 0xffffffec
   163f4:	strd	r6, [sp, #8]
   163f8:	str	lr, [sp, #16]
   163fc:	sub	sp, sp, #12
   16400:	mov	r7, r1
   16404:	mov	r5, r2
   16408:	subs	r6, r0, #0
   1640c:	addeq	r6, sp, #4
   16410:	mov	r0, r6
   16414:	bl	10fe4 <mbrtowc@plt>
   16418:	mov	r4, r0
   1641c:	cmp	r5, #0
   16420:	cmnne	r0, #3
   16424:	bhi	16440 <__assert_fail@plt+0x52c4>
   16428:	mov	r0, r4
   1642c:	add	sp, sp, #12
   16430:	ldrd	r4, [sp]
   16434:	ldrd	r6, [sp, #8]
   16438:	add	sp, sp, #16
   1643c:	pop	{pc}		; (ldr pc, [sp], #4)
   16440:	mov	r0, #0
   16444:	bl	16718 <__assert_fail@plt+0x559c>
   16448:	cmp	r0, #0
   1644c:	bne	16428 <__assert_fail@plt+0x52ac>
   16450:	ldrb	r3, [r7]
   16454:	str	r3, [r6]
   16458:	mov	r4, #1
   1645c:	b	16428 <__assert_fail@plt+0x52ac>
   16460:	str	r4, [sp, #-8]!
   16464:	str	lr, [sp, #4]
   16468:	lsl	r2, r1, #2
   1646c:	lsr	r3, r1, #30
   16470:	adds	r3, r3, #0
   16474:	movne	r3, #1
   16478:	cmp	r2, #0
   1647c:	movlt	r3, #1
   16480:	cmp	r3, #0
   16484:	bne	1649c <__assert_fail@plt+0x5320>
   16488:	lsl	r1, r1, #2
   1648c:	bl	160d8 <__assert_fail@plt+0x4f5c>
   16490:	ldr	r4, [sp]
   16494:	add	sp, sp, #4
   16498:	pop	{pc}		; (ldr pc, [sp], #4)
   1649c:	bl	11080 <__errno_location@plt>
   164a0:	mov	r3, #12
   164a4:	str	r3, [r0]
   164a8:	mov	r0, #0
   164ac:	b	16490 <__assert_fail@plt+0x5314>
   164b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   164b4:	strd	r6, [sp, #8]
   164b8:	str	r8, [sp, #16]
   164bc:	str	lr, [sp, #20]
   164c0:	sub	sp, sp, #8
   164c4:	mov	r5, r1
   164c8:	mov	r8, r2
   164cc:	subs	r7, r0, #0
   164d0:	beq	16580 <__assert_fail@plt+0x5404>
   164d4:	mov	r1, #10
   164d8:	str	r1, [sp, #4]
   164dc:	mov	r0, #0
   164e0:	bl	16460 <__assert_fail@plt+0x52e4>
   164e4:	subs	r4, r0, #0
   164e8:	bne	1651c <__assert_fail@plt+0x53a0>
   164ec:	mvn	r0, #0
   164f0:	b	1655c <__assert_fail@plt+0x53e0>
   164f4:	ldr	r3, [sp, #4]
   164f8:	cmp	r3, r6
   164fc:	lsleq	r3, r3, #1
   16500:	streq	r3, [sp, #4]
   16504:	ldr	r1, [sp, #4]
   16508:	mov	r0, r4
   1650c:	bl	16460 <__assert_fail@plt+0x52e4>
   16510:	cmp	r0, #0
   16514:	beq	16550 <__assert_fail@plt+0x53d4>
   16518:	mov	r4, r0
   1651c:	ldr	r6, [sp, #4]
   16520:	add	r3, sp, #4
   16524:	mov	r2, r4
   16528:	mov	r1, r5
   1652c:	mov	r0, r7
   16530:	bl	110a4 <getgrouplist@plt>
   16534:	cmp	r0, #0
   16538:	blt	164f4 <__assert_fail@plt+0x5378>
   1653c:	ldr	r1, [sp, #4]
   16540:	mov	r0, r4
   16544:	bl	16460 <__assert_fail@plt+0x52e4>
   16548:	cmp	r0, #0
   1654c:	bne	16574 <__assert_fail@plt+0x53f8>
   16550:	mov	r0, r4
   16554:	bl	12804 <__assert_fail@plt+0x1688>
   16558:	mvn	r0, #0
   1655c:	add	sp, sp, #8
   16560:	ldrd	r4, [sp]
   16564:	ldrd	r6, [sp, #8]
   16568:	ldr	r8, [sp, #16]
   1656c:	add	sp, sp, #20
   16570:	pop	{pc}		; (ldr pc, [sp], #4)
   16574:	str	r0, [r8]
   16578:	ldr	r0, [sp, #4]
   1657c:	b	1655c <__assert_fail@plt+0x53e0>
   16580:	mov	r1, #0
   16584:	mov	r0, r1
   16588:	bl	11134 <getgroups@plt>
   1658c:	str	r0, [sp, #4]
   16590:	cmp	r0, #0
   16594:	blt	16618 <__assert_fail@plt+0x549c>
   16598:	adds	r6, r5, #1
   1659c:	movne	r6, #1
   165a0:	cmp	r0, #0
   165a4:	movne	r3, r6
   165a8:	moveq	r3, #1
   165ac:	cmp	r3, #0
   165b0:	beq	166a0 <__assert_fail@plt+0x5524>
   165b4:	add	r1, r0, #1
   165b8:	str	r1, [sp, #4]
   165bc:	mov	r0, #0
   165c0:	bl	16460 <__assert_fail@plt+0x52e4>
   165c4:	subs	r4, r0, #0
   165c8:	beq	16690 <__assert_fail@plt+0x5514>
   165cc:	ldr	r0, [sp, #4]
   165d0:	sub	r0, r0, r6
   165d4:	cmn	r5, #1
   165d8:	beq	166bc <__assert_fail@plt+0x5540>
   165dc:	add	r1, r4, #4
   165e0:	bl	11134 <getgroups@plt>
   165e4:	cmp	r0, #0
   165e8:	strge	r5, [r4]
   165ec:	addge	r0, r0, #1
   165f0:	blt	166cc <__assert_fail@plt+0x5550>
   165f4:	str	r4, [r8]
   165f8:	cmp	r0, #1
   165fc:	ble	1655c <__assert_fail@plt+0x53e0>
   16600:	ldr	lr, [r4]
   16604:	add	ip, r4, r0, lsl #2
   16608:	add	r3, r4, #4
   1660c:	cmp	ip, r3
   16610:	bhi	1665c <__assert_fail@plt+0x54e0>
   16614:	b	1655c <__assert_fail@plt+0x53e0>
   16618:	bl	11080 <__errno_location@plt>
   1661c:	ldr	r3, [r0]
   16620:	cmp	r3, #38	; 0x26
   16624:	bne	16680 <__assert_fail@plt+0x5504>
   16628:	mov	r1, #1
   1662c:	mov	r0, #0
   16630:	bl	16460 <__assert_fail@plt+0x52e4>
   16634:	cmp	r0, #0
   16638:	beq	16688 <__assert_fail@plt+0x550c>
   1663c:	str	r0, [r8]
   16640:	str	r5, [r0]
   16644:	adds	r0, r5, #1
   16648:	movne	r0, #1
   1664c:	b	1655c <__assert_fail@plt+0x53e0>
   16650:	sub	r0, r0, #1
   16654:	cmp	ip, r3
   16658:	bls	1655c <__assert_fail@plt+0x53e0>
   1665c:	ldr	r2, [r3], #4
   16660:	cmp	r2, lr
   16664:	beq	16650 <__assert_fail@plt+0x54d4>
   16668:	ldr	r1, [r4]
   1666c:	cmp	r2, r1
   16670:	strne	r2, [r4, #4]
   16674:	addne	r4, r4, #4
   16678:	bne	16654 <__assert_fail@plt+0x54d8>
   1667c:	b	16650 <__assert_fail@plt+0x54d4>
   16680:	mvn	r0, #0
   16684:	b	1655c <__assert_fail@plt+0x53e0>
   16688:	mvn	r0, #0
   1668c:	b	1655c <__assert_fail@plt+0x53e0>
   16690:	mvn	r0, #0
   16694:	b	1655c <__assert_fail@plt+0x53e0>
   16698:	mvn	r0, #0
   1669c:	b	1655c <__assert_fail@plt+0x53e0>
   166a0:	ldr	r1, [sp, #4]
   166a4:	mov	r0, #0
   166a8:	bl	16460 <__assert_fail@plt+0x52e4>
   166ac:	subs	r4, r0, #0
   166b0:	beq	16698 <__assert_fail@plt+0x551c>
   166b4:	ldr	r0, [sp, #4]
   166b8:	sub	r0, r0, r6
   166bc:	mov	r1, r4
   166c0:	bl	11134 <getgroups@plt>
   166c4:	cmp	r0, #0
   166c8:	bge	165f4 <__assert_fail@plt+0x5478>
   166cc:	mov	r0, r4
   166d0:	bl	12804 <__assert_fail@plt+0x1688>
   166d4:	mvn	r0, #0
   166d8:	b	1655c <__assert_fail@plt+0x53e0>
   166dc:	str	r4, [sp, #-8]!
   166e0:	str	lr, [sp, #4]
   166e4:	umull	r2, r3, r1, r2
   166e8:	cmp	r3, #0
   166ec:	bne	16704 <__assert_fail@plt+0x5588>
   166f0:	mov	r1, r2
   166f4:	bl	160d8 <__assert_fail@plt+0x4f5c>
   166f8:	ldr	r4, [sp]
   166fc:	add	sp, sp, #4
   16700:	pop	{pc}		; (ldr pc, [sp], #4)
   16704:	bl	11080 <__errno_location@plt>
   16708:	mov	r3, #12
   1670c:	str	r3, [r0]
   16710:	mov	r0, #0
   16714:	b	166f8 <__assert_fail@plt+0x557c>
   16718:	push	{lr}		; (str lr, [sp, #-4]!)
   1671c:	sub	sp, sp, #268	; 0x10c
   16720:	movw	r2, #257	; 0x101
   16724:	add	r1, sp, #4
   16728:	bl	16774 <__assert_fail@plt+0x55f8>
   1672c:	cmp	r0, #0
   16730:	movne	r0, #0
   16734:	bne	1676c <__assert_fail@plt+0x55f0>
   16738:	movw	r1, #30652	; 0x77bc
   1673c:	movt	r1, #1
   16740:	add	r0, sp, #4
   16744:	bl	10ee8 <strcmp@plt>
   16748:	cmp	r0, #0
   1674c:	beq	16768 <__assert_fail@plt+0x55ec>
   16750:	movw	r1, #30656	; 0x77c0
   16754:	movt	r1, #1
   16758:	add	r0, sp, #4
   1675c:	bl	10ee8 <strcmp@plt>
   16760:	adds	r0, r0, #0
   16764:	movne	r0, #1
   16768:	and	r0, r0, #1
   1676c:	add	sp, sp, #268	; 0x10c
   16770:	pop	{pc}		; (ldr pc, [sp], #4)
   16774:	strd	r4, [sp, #-16]!
   16778:	str	r6, [sp, #8]
   1677c:	str	lr, [sp, #12]
   16780:	mov	r6, r1
   16784:	mov	r4, r2
   16788:	mov	r1, #0
   1678c:	bl	11104 <setlocale@plt>
   16790:	subs	r5, r0, #0
   16794:	beq	167d8 <__assert_fail@plt+0x565c>
   16798:	mov	r0, r5
   1679c:	bl	11068 <strlen@plt>
   167a0:	cmp	r4, r0
   167a4:	bhi	167f4 <__assert_fail@plt+0x5678>
   167a8:	cmp	r4, #0
   167ac:	moveq	r0, #34	; 0x22
   167b0:	beq	16808 <__assert_fail@plt+0x568c>
   167b4:	sub	r4, r4, #1
   167b8:	mov	r2, r4
   167bc:	mov	r1, r5
   167c0:	mov	r0, r6
   167c4:	bl	10f30 <memcpy@plt>
   167c8:	mov	r3, #0
   167cc:	strb	r3, [r6, r4]
   167d0:	mov	r0, #34	; 0x22
   167d4:	b	16808 <__assert_fail@plt+0x568c>
   167d8:	cmp	r4, #0
   167dc:	moveq	r0, #22
   167e0:	beq	16808 <__assert_fail@plt+0x568c>
   167e4:	mov	r3, #0
   167e8:	strb	r3, [r6]
   167ec:	mov	r0, #22
   167f0:	b	16808 <__assert_fail@plt+0x568c>
   167f4:	add	r2, r0, #1
   167f8:	mov	r1, r5
   167fc:	mov	r0, r6
   16800:	bl	10f30 <memcpy@plt>
   16804:	mov	r0, #0
   16808:	ldrd	r4, [sp]
   1680c:	ldr	r6, [sp, #8]
   16810:	add	sp, sp, #12
   16814:	pop	{pc}		; (ldr pc, [sp], #4)
   16818:	str	r4, [sp, #-8]!
   1681c:	str	lr, [sp, #4]
   16820:	mov	r1, #0
   16824:	bl	11104 <setlocale@plt>
   16828:	ldr	r4, [sp]
   1682c:	add	sp, sp, #4
   16830:	pop	{pc}		; (ldr pc, [sp], #4)
   16834:	cmp	r3, #0
   16838:	cmpeq	r2, #0
   1683c:	bne	16854 <__assert_fail@plt+0x56d8>
   16840:	cmp	r1, #0
   16844:	cmpeq	r0, #0
   16848:	mvnne	r1, #0
   1684c:	mvnne	r0, #0
   16850:	b	16870 <__assert_fail@plt+0x56f4>
   16854:	sub	sp, sp, #8
   16858:	push	{sp, lr}
   1685c:	bl	16880 <__assert_fail@plt+0x5704>
   16860:	ldr	lr, [sp, #4]
   16864:	add	sp, sp, #8
   16868:	pop	{r2, r3}
   1686c:	bx	lr
   16870:	push	{r1, lr}
   16874:	mov	r0, #8
   16878:	bl	10ec4 <raise@plt>
   1687c:	pop	{r1, pc}
   16880:	cmp	r1, r3
   16884:	cmpeq	r0, r2
   16888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1688c:	mov	r4, r0
   16890:	movcc	r0, #0
   16894:	mov	r5, r1
   16898:	ldr	lr, [sp, #36]	; 0x24
   1689c:	movcc	r1, r0
   168a0:	bcc	1699c <__assert_fail@plt+0x5820>
   168a4:	cmp	r3, #0
   168a8:	clzeq	ip, r2
   168ac:	clzne	ip, r3
   168b0:	addeq	ip, ip, #32
   168b4:	cmp	r5, #0
   168b8:	clzeq	r1, r4
   168bc:	addeq	r1, r1, #32
   168c0:	clzne	r1, r5
   168c4:	sub	ip, ip, r1
   168c8:	sub	sl, ip, #32
   168cc:	lsl	r9, r3, ip
   168d0:	rsb	fp, ip, #32
   168d4:	orr	r9, r9, r2, lsl sl
   168d8:	orr	r9, r9, r2, lsr fp
   168dc:	lsl	r8, r2, ip
   168e0:	cmp	r5, r9
   168e4:	cmpeq	r4, r8
   168e8:	movcc	r0, #0
   168ec:	movcc	r1, r0
   168f0:	bcc	1690c <__assert_fail@plt+0x5790>
   168f4:	mov	r0, #1
   168f8:	subs	r4, r4, r8
   168fc:	lsl	r1, r0, sl
   16900:	orr	r1, r1, r0, lsr fp
   16904:	lsl	r0, r0, ip
   16908:	sbc	r5, r5, r9
   1690c:	cmp	ip, #0
   16910:	beq	1699c <__assert_fail@plt+0x5820>
   16914:	lsr	r6, r8, #1
   16918:	orr	r6, r6, r9, lsl #31
   1691c:	lsr	r7, r9, #1
   16920:	mov	r2, ip
   16924:	b	16948 <__assert_fail@plt+0x57cc>
   16928:	subs	r3, r4, r6
   1692c:	sbc	r8, r5, r7
   16930:	adds	r3, r3, r3
   16934:	adc	r8, r8, r8
   16938:	adds	r4, r3, #1
   1693c:	adc	r5, r8, #0
   16940:	subs	r2, r2, #1
   16944:	beq	16964 <__assert_fail@plt+0x57e8>
   16948:	cmp	r5, r7
   1694c:	cmpeq	r4, r6
   16950:	bcs	16928 <__assert_fail@plt+0x57ac>
   16954:	adds	r4, r4, r4
   16958:	adc	r5, r5, r5
   1695c:	subs	r2, r2, #1
   16960:	bne	16948 <__assert_fail@plt+0x57cc>
   16964:	lsr	r3, r4, ip
   16968:	orr	r3, r3, r5, lsl fp
   1696c:	lsr	r2, r5, ip
   16970:	orr	r3, r3, r5, lsr sl
   16974:	adds	r0, r0, r4
   16978:	mov	r4, r3
   1697c:	lsl	r3, r2, ip
   16980:	orr	r3, r3, r4, lsl sl
   16984:	lsl	ip, r4, ip
   16988:	orr	r3, r3, r4, lsr fp
   1698c:	adc	r1, r1, r5
   16990:	subs	r0, r0, ip
   16994:	mov	r5, r2
   16998:	sbc	r1, r1, r3
   1699c:	cmp	lr, #0
   169a0:	strdne	r4, [lr]
   169a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   169ac:	mov	r7, r0
   169b0:	ldr	r6, [pc, #72]	; 16a00 <__assert_fail@plt+0x5884>
   169b4:	ldr	r5, [pc, #72]	; 16a04 <__assert_fail@plt+0x5888>
   169b8:	add	r6, pc, r6
   169bc:	add	r5, pc, r5
   169c0:	sub	r6, r6, r5
   169c4:	mov	r8, r1
   169c8:	mov	r9, r2
   169cc:	bl	10e80 <calloc@plt-0x20>
   169d0:	asrs	r6, r6, #2
   169d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   169d8:	mov	r4, #0
   169dc:	add	r4, r4, #1
   169e0:	ldr	r3, [r5], #4
   169e4:	mov	r2, r9
   169e8:	mov	r1, r8
   169ec:	mov	r0, r7
   169f0:	blx	r3
   169f4:	cmp	r6, r4
   169f8:	bne	169dc <__assert_fail@plt+0x5860>
   169fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16a00:	andeq	r1, r1, ip, asr #10
   16a04:	andeq	r1, r1, r4, asr #10
   16a08:	bx	lr
   16a0c:	ldr	r3, [pc, #12]	; 16a20 <__assert_fail@plt+0x58a4>
   16a10:	mov	r1, #0
   16a14:	add	r3, pc, r3
   16a18:	ldr	r2, [r3]
   16a1c:	b	1108c <__cxa_atexit@plt>
   16a20:	strdeq	r1, [r1], -r0

Disassembly of section .fini:

00016a24 <.fini>:
   16a24:	push	{r3, lr}
   16a28:	pop	{r3, pc}
