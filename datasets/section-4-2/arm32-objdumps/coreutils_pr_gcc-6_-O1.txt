
../repos/coreutils/src/pr:     file format elf32-littlearm


Disassembly of section .init:

00011064 <.init>:
   11064:	push	{r3, lr}
   11068:	bl	1142c <__assert_fail@plt+0x48>
   1106c:	pop	{r3, pc}

Disassembly of section .plt:

00011070 <fdopen@plt-0x14>:
   11070:	push	{lr}		; (str lr, [sp, #-4]!)
   11074:	ldr	lr, [pc, #4]	; 11080 <fdopen@plt-0x4>
   11078:	add	lr, pc, lr
   1107c:	ldr	pc, [lr, #8]!
   11080:	andeq	ip, r1, r0, lsl #31

00011084 <fdopen@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #28, 20	; 0x1c000
   1108c:	ldr	pc, [ip, #3968]!	; 0xf80

00011090 <calloc@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #28, 20	; 0x1c000
   11098:	ldr	pc, [ip, #3960]!	; 0xf78

0001109c <fputs_unlocked@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #28, 20	; 0x1c000
   110a4:	ldr	pc, [ip, #3952]!	; 0xf70

000110a8 <raise@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #28, 20	; 0x1c000
   110b0:	ldr	pc, [ip, #3944]!	; 0xf68

000110b4 <gmtime_r@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #28, 20	; 0x1c000
   110bc:	ldr	pc, [ip, #3936]!	; 0xf60

000110c0 <strcmp@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #28, 20	; 0x1c000
   110c8:	ldr	pc, [ip, #3928]!	; 0xf58

000110cc <strtol@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #28, 20	; 0x1c000
   110d4:	ldr	pc, [ip, #3920]!	; 0xf50

000110d8 <posix_fadvise64@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #28, 20	; 0x1c000
   110e0:	ldr	pc, [ip, #3912]!	; 0xf48

000110e4 <mktime@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #28, 20	; 0x1c000
   110ec:	ldr	pc, [ip, #3904]!	; 0xf40

000110f0 <fflush@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #28, 20	; 0x1c000
   110f8:	ldr	pc, [ip, #3896]!	; 0xf38

000110fc <wcwidth@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #28, 20	; 0x1c000
   11104:	ldr	pc, [ip, #3888]!	; 0xf30

00011108 <free@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #28, 20	; 0x1c000
   11110:	ldr	pc, [ip, #3880]!	; 0xf28

00011114 <clock_gettime@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #28, 20	; 0x1c000
   1111c:	ldr	pc, [ip, #3872]!	; 0xf20

00011120 <_exit@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #28, 20	; 0x1c000
   11128:	ldr	pc, [ip, #3864]!	; 0xf18

0001112c <memcpy@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #28, 20	; 0x1c000
   11134:	ldr	pc, [ip, #3856]!	; 0xf10

00011138 <__strtoull_internal@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #28, 20	; 0x1c000
   11140:	ldr	pc, [ip, #3848]!	; 0xf08

00011144 <mbsinit@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #28, 20	; 0x1c000
   1114c:	ldr	pc, [ip, #3840]!	; 0xf00

00011150 <memcmp@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #28, 20	; 0x1c000
   11158:	ldr	pc, [ip, #3832]!	; 0xef8

0001115c <fputc_unlocked@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #28, 20	; 0x1c000
   11164:	ldr	pc, [ip, #3824]!	; 0xef0

00011168 <dcgettext@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #28, 20	; 0x1c000
   11170:	ldr	pc, [ip, #3816]!	; 0xee8

00011174 <realloc@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #28, 20	; 0x1c000
   1117c:	ldr	pc, [ip, #3808]!	; 0xee0

00011180 <localtime_r@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #28, 20	; 0x1c000
   11188:	ldr	pc, [ip, #3800]!	; 0xed8

0001118c <textdomain@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #28, 20	; 0x1c000
   11194:	ldr	pc, [ip, #3792]!	; 0xed0

00011198 <iswcntrl@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #28, 20	; 0x1c000
   111a0:	ldr	pc, [ip, #3784]!	; 0xec8

000111a4 <iswprint@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #28, 20	; 0x1c000
   111ac:	ldr	pc, [ip, #3776]!	; 0xec0

000111b0 <tzset@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #28, 20	; 0x1c000
   111b8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111bc <__fxstat64@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #28, 20	; 0x1c000
   111c4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111c8 <fwrite@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #28, 20	; 0x1c000
   111d0:	ldr	pc, [ip, #3752]!	; 0xea8

000111d4 <lseek64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #28, 20	; 0x1c000
   111dc:	ldr	pc, [ip, #3744]!	; 0xea0

000111e0 <__ctype_get_mb_cur_max@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #28, 20	; 0x1c000
   111e8:	ldr	pc, [ip, #3736]!	; 0xe98

000111ec <__fpending@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #28, 20	; 0x1c000
   111f4:	ldr	pc, [ip, #3728]!	; 0xe90

000111f8 <mbrtowc@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #28, 20	; 0x1c000
   11200:	ldr	pc, [ip, #3720]!	; 0xe88

00011204 <error@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #28, 20	; 0x1c000
   1120c:	ldr	pc, [ip, #3712]!	; 0xe80

00011210 <getenv@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #28, 20	; 0x1c000
   11218:	ldr	pc, [ip, #3704]!	; 0xe78

0001121c <malloc@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #28, 20	; 0x1c000
   11224:	ldr	pc, [ip, #3696]!	; 0xe70

00011228 <__libc_start_main@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #28, 20	; 0x1c000
   11230:	ldr	pc, [ip, #3688]!	; 0xe68

00011234 <strftime@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #28, 20	; 0x1c000
   1123c:	ldr	pc, [ip, #3680]!	; 0xe60

00011240 <__freading@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #28, 20	; 0x1c000
   11248:	ldr	pc, [ip, #3672]!	; 0xe58

0001124c <__ctype_tolower_loc@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #28, 20	; 0x1c000
   11254:	ldr	pc, [ip, #3664]!	; 0xe50

00011258 <__ctype_toupper_loc@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #28, 20	; 0x1c000
   11260:	ldr	pc, [ip, #3656]!	; 0xe48

00011264 <__gmon_start__@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #28, 20	; 0x1c000
   1126c:	ldr	pc, [ip, #3648]!	; 0xe40

00011270 <getopt_long@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #28, 20	; 0x1c000
   11278:	ldr	pc, [ip, #3640]!	; 0xe38

0001127c <__ctype_b_loc@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #28, 20	; 0x1c000
   11284:	ldr	pc, [ip, #3632]!	; 0xe30

00011288 <exit@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #28, 20	; 0x1c000
   11290:	ldr	pc, [ip, #3624]!	; 0xe28

00011294 <strlen@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #28, 20	; 0x1c000
   1129c:	ldr	pc, [ip, #3616]!	; 0xe20

000112a0 <strchr@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #28, 20	; 0x1c000
   112a8:	ldr	pc, [ip, #3608]!	; 0xe18

000112ac <setenv@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #28, 20	; 0x1c000
   112b4:	ldr	pc, [ip, #3600]!	; 0xe10

000112b8 <ungetc@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #28, 20	; 0x1c000
   112c0:	ldr	pc, [ip, #3592]!	; 0xe08

000112c4 <__errno_location@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #28, 20	; 0x1c000
   112cc:	ldr	pc, [ip, #3584]!	; 0xe00

000112d0 <__sprintf_chk@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #28, 20	; 0x1c000
   112d8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112dc <__cxa_atexit@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #28, 20	; 0x1c000
   112e4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112e8 <memset@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #28, 20	; 0x1c000
   112f0:	ldr	pc, [ip, #3560]!	; 0xde8

000112f4 <__printf_chk@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #28, 20	; 0x1c000
   112fc:	ldr	pc, [ip, #3552]!	; 0xde0

00011300 <fileno@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #28, 20	; 0x1c000
   11308:	ldr	pc, [ip, #3544]!	; 0xdd8

0001130c <__fprintf_chk@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #28, 20	; 0x1c000
   11314:	ldr	pc, [ip, #3536]!	; 0xdd0

00011318 <fclose@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #28, 20	; 0x1c000
   11320:	ldr	pc, [ip, #3528]!	; 0xdc8

00011324 <fseeko64@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #28, 20	; 0x1c000
   1132c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011330 <fcntl64@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #28, 20	; 0x1c000
   11338:	ldr	pc, [ip, #3512]!	; 0xdb8

0001133c <__uflow@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #28, 20	; 0x1c000
   11344:	ldr	pc, [ip, #3504]!	; 0xdb0

00011348 <__overflow@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #28, 20	; 0x1c000
   11350:	ldr	pc, [ip, #3496]!	; 0xda8

00011354 <setlocale@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #28, 20	; 0x1c000
   1135c:	ldr	pc, [ip, #3488]!	; 0xda0

00011360 <strrchr@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #28, 20	; 0x1c000
   11368:	ldr	pc, [ip, #3480]!	; 0xd98

0001136c <nl_langinfo@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #28, 20	; 0x1c000
   11374:	ldr	pc, [ip, #3472]!	; 0xd90

00011378 <timegm@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #28, 20	; 0x1c000
   11380:	ldr	pc, [ip, #3464]!	; 0xd88

00011384 <clearerr_unlocked@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #28, 20	; 0x1c000
   1138c:	ldr	pc, [ip, #3456]!	; 0xd80

00011390 <__strtoll_internal@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #28, 20	; 0x1c000
   11398:	ldr	pc, [ip, #3448]!	; 0xd78

0001139c <fopen64@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #28, 20	; 0x1c000
   113a4:	ldr	pc, [ip, #3440]!	; 0xd70

000113a8 <bindtextdomain@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #28, 20	; 0x1c000
   113b0:	ldr	pc, [ip, #3432]!	; 0xd68

000113b4 <unsetenv@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #28, 20	; 0x1c000
   113bc:	ldr	pc, [ip, #3424]!	; 0xd60

000113c0 <strncmp@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #28, 20	; 0x1c000
   113c8:	ldr	pc, [ip, #3416]!	; 0xd58

000113cc <abort@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #28, 20	; 0x1c000
   113d4:	ldr	pc, [ip, #3408]!	; 0xd50

000113d8 <close@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #28, 20	; 0x1c000
   113e0:	ldr	pc, [ip, #3400]!	; 0xd48

000113e4 <__assert_fail@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #28, 20	; 0x1c000
   113ec:	ldr	pc, [ip, #3392]!	; 0xd40

Disassembly of section .text:

000113f0 <.text>:
   113f0:	mov	fp, #0
   113f4:	mov	lr, #0
   113f8:	pop	{r1}		; (ldr r1, [sp], #4)
   113fc:	mov	r2, sp
   11400:	push	{r2}		; (str r2, [sp, #-4]!)
   11404:	push	{r0}		; (str r0, [sp, #-4]!)
   11408:	ldr	ip, [pc, #16]	; 11420 <__assert_fail@plt+0x3c>
   1140c:	push	{ip}		; (str ip, [sp, #-4]!)
   11410:	ldr	r0, [pc, #12]	; 11424 <__assert_fail@plt+0x40>
   11414:	ldr	r3, [pc, #12]	; 11428 <__assert_fail@plt+0x44>
   11418:	bl	11228 <__libc_start_main@plt>
   1141c:	bl	113cc <abort@plt>
   11420:	andeq	fp, r1, ip, lsl pc
   11424:	muleq	r1, r8, r5
   11428:			; <UNDEFINED> instruction: 0x0001bebc
   1142c:	ldr	r3, [pc, #20]	; 11448 <__assert_fail@plt+0x64>
   11430:	ldr	r2, [pc, #20]	; 1144c <__assert_fail@plt+0x68>
   11434:	add	r3, pc, r3
   11438:	ldr	r2, [r3, r2]
   1143c:	cmp	r2, #0
   11440:	bxeq	lr
   11444:	b	11264 <__gmon_start__@plt>
   11448:	andeq	ip, r1, r4, asr #23
   1144c:	andeq	r0, r0, r0, lsr r1
   11450:	ldr	r3, [pc, #28]	; 11474 <__assert_fail@plt+0x90>
   11454:	ldr	r0, [pc, #28]	; 11478 <__assert_fail@plt+0x94>
   11458:	sub	r3, r3, r0
   1145c:	cmp	r3, #6
   11460:	bxls	lr
   11464:	ldr	r3, [pc, #16]	; 1147c <__assert_fail@plt+0x98>
   11468:	cmp	r3, #0
   1146c:	bxeq	lr
   11470:	bx	r3
   11474:	andeq	lr, r2, fp, asr #3
   11478:	andeq	lr, r2, r8, asr #3
   1147c:	andeq	r0, r0, r0
   11480:	ldr	r1, [pc, #36]	; 114ac <__assert_fail@plt+0xc8>
   11484:	ldr	r0, [pc, #36]	; 114b0 <__assert_fail@plt+0xcc>
   11488:	sub	r1, r1, r0
   1148c:	asr	r1, r1, #2
   11490:	add	r1, r1, r1, lsr #31
   11494:	asrs	r1, r1, #1
   11498:	bxeq	lr
   1149c:	ldr	r3, [pc, #16]	; 114b4 <__assert_fail@plt+0xd0>
   114a0:	cmp	r3, #0
   114a4:	bxeq	lr
   114a8:	bx	r3
   114ac:	andeq	lr, r2, r8, asr #3
   114b0:	andeq	lr, r2, r8, asr #3
   114b4:	andeq	r0, r0, r0
   114b8:	push	{r4, lr}
   114bc:	ldr	r4, [pc, #24]	; 114dc <__assert_fail@plt+0xf8>
   114c0:	ldrb	r3, [r4]
   114c4:	cmp	r3, #0
   114c8:	popne	{r4, pc}
   114cc:	bl	11450 <__assert_fail@plt+0x6c>
   114d0:	mov	r3, #1
   114d4:	strb	r3, [r4]
   114d8:	pop	{r4, pc}
   114dc:	andeq	lr, r2, ip, ror #3
   114e0:	ldr	r0, [pc, #40]	; 11510 <__assert_fail@plt+0x12c>
   114e4:	ldr	r3, [r0]
   114e8:	cmp	r3, #0
   114ec:	bne	114f4 <__assert_fail@plt+0x110>
   114f0:	b	11480 <__assert_fail@plt+0x9c>
   114f4:	ldr	r3, [pc, #24]	; 11514 <__assert_fail@plt+0x130>
   114f8:	cmp	r3, #0
   114fc:	beq	114f0 <__assert_fail@plt+0x10c>
   11500:	push	{r4, lr}
   11504:	blx	r3
   11508:	pop	{r4, lr}
   1150c:	b	11480 <__assert_fail@plt+0x9c>
   11510:	andeq	sp, r2, r4, lsl pc
   11514:	andeq	r0, r0, r0
   11518:	ldr	r3, [pc, #116]	; 11594 <__assert_fail@plt+0x1b0>
   1151c:	ldr	r3, [r3]
   11520:	ldr	r2, [pc, #112]	; 11598 <__assert_fail@plt+0x1b4>
   11524:	ldr	ip, [r2]
   11528:	cmp	ip, #0
   1152c:	beq	1158c <__assert_fail@plt+0x1a8>
   11530:	push	{lr}		; (str lr, [sp, #-4]!)
   11534:	ldrb	lr, [r2, #4]
   11538:	mov	r0, #0
   1153c:	mov	r2, r0
   11540:	b	11558 <__assert_fail@plt+0x174>
   11544:	add	r0, r0, #1
   11548:	add	r3, r3, #40	; 0x28
   1154c:	add	r2, r2, #1
   11550:	cmp	r2, ip
   11554:	beq	11588 <__assert_fail@plt+0x1a4>
   11558:	ldr	r1, [r3, #8]
   1155c:	cmp	r1, #1
   11560:	bls	11544 <__assert_fail@plt+0x160>
   11564:	cmp	lr, #0
   11568:	beq	11548 <__assert_fail@plt+0x164>
   1156c:	ldr	r1, [r3, #24]
   11570:	cmp	r1, #0
   11574:	ble	11548 <__assert_fail@plt+0x164>
   11578:	ldr	r1, [r3, #28]
   1157c:	cmp	r1, #0
   11580:	bgt	11544 <__assert_fail@plt+0x160>
   11584:	b	11548 <__assert_fail@plt+0x164>
   11588:	pop	{pc}		; (ldr pc, [sp], #4)
   1158c:	mov	r0, ip
   11590:	bx	lr
   11594:	strdeq	lr, [r2], -r0
   11598:	andeq	lr, r2, r0, asr #2
   1159c:	push	{r4, lr}
   115a0:	ldr	r3, [pc, #112]	; 11618 <__assert_fail@plt+0x234>
   115a4:	ldrb	r3, [r3, #4]
   115a8:	cmp	r3, #0
   115ac:	movne	r3, #2
   115b0:	strne	r3, [r0, #8]
   115b4:	bne	115fc <__assert_fail@plt+0x218>
   115b8:	ldr	r3, [pc, #88]	; 11618 <__assert_fail@plt+0x234>
   115bc:	ldr	r2, [r3]
   115c0:	ldr	r3, [pc, #84]	; 1161c <__assert_fail@plt+0x238>
   115c4:	ldr	r3, [r3]
   115c8:	cmp	r3, #0
   115cc:	beq	115fc <__assert_fail@plt+0x218>
   115d0:	ldr	r1, [pc, #68]	; 1161c <__assert_fail@plt+0x238>
   115d4:	ldrb	r1, [r1, #4]
   115d8:	mov	r4, #2
   115dc:	mov	lr, #1
   115e0:	cmp	r1, #0
   115e4:	moveq	ip, r4
   115e8:	movne	ip, lr
   115ec:	str	ip, [r2, #8]
   115f0:	add	r2, r2, #40	; 0x28
   115f4:	subs	r3, r3, #1
   115f8:	bne	115e0 <__assert_fail@plt+0x1fc>
   115fc:	mov	r3, #0
   11600:	str	r3, [r0, #28]
   11604:	ldr	r2, [pc, #12]	; 11618 <__assert_fail@plt+0x234>
   11608:	ldr	r3, [r2, #8]
   1160c:	sub	r3, r3, #1
   11610:	str	r3, [r2, #8]
   11614:	pop	{r4, pc}
   11618:	strdeq	lr, [r2], -r0
   1161c:	andeq	lr, r2, r0, asr #2
   11620:	push	{r4, r5, lr}
   11624:	ldr	r3, [pc, #124]	; 116a8 <__assert_fail@plt+0x2c4>
   11628:	ldr	r2, [r3]
   1162c:	ldr	r3, [pc, #120]	; 116ac <__assert_fail@plt+0x2c8>
   11630:	ldr	r5, [r3]
   11634:	cmp	r2, #0
   11638:	beq	1167c <__assert_fail@plt+0x298>
   1163c:	ldr	r0, [r3, #8]
   11640:	mov	r3, r5
   11644:	mov	ip, #0
   11648:	mov	r4, ip
   1164c:	mov	lr, #1
   11650:	ldr	r1, [r3, #8]
   11654:	cmp	r1, #2
   11658:	streq	r4, [r3, #8]
   1165c:	addeq	r0, r0, #1
   11660:	moveq	ip, lr
   11664:	add	r3, r3, #40	; 0x28
   11668:	subs	r2, r2, #1
   1166c:	bne	11650 <__assert_fail@plt+0x26c>
   11670:	cmp	ip, #0
   11674:	ldrne	r3, [pc, #48]	; 116ac <__assert_fail@plt+0x2c8>
   11678:	strne	r0, [r3, #8]
   1167c:	ldr	r3, [pc, #36]	; 116a8 <__assert_fail@plt+0x2c4>
   11680:	ldrb	r3, [r3, #4]
   11684:	cmp	r3, #0
   11688:	popeq	{r4, r5, pc}
   1168c:	ldr	r3, [r5, #8]
   11690:	cmp	r3, #3
   11694:	moveq	r2, #0
   11698:	movne	r2, #1
   1169c:	ldr	r3, [pc, #8]	; 116ac <__assert_fail@plt+0x2c8>
   116a0:	str	r2, [r3, #8]
   116a4:	pop	{r4, r5, pc}
   116a8:	andeq	lr, r2, r0, asr #2
   116ac:	strdeq	lr, [r2], -r0
   116b0:	push	{r4, r5, r6, lr}
   116b4:	mov	r4, r0
   116b8:	ldr	r3, [pc, #64]	; 11700 <__assert_fail@plt+0x31c>
   116bc:	ldr	r2, [r3, #12]
   116c0:	ldr	r3, [r3, #16]
   116c4:	cmp	r2, r3
   116c8:	bcs	116e8 <__assert_fail@plt+0x304>
   116cc:	ldr	r3, [pc, #44]	; 11700 <__assert_fail@plt+0x31c>
   116d0:	ldr	r1, [r3, #20]
   116d4:	ldr	r2, [r3, #12]
   116d8:	add	r0, r2, #1
   116dc:	str	r0, [r3, #12]
   116e0:	strb	r4, [r1, r2]
   116e4:	pop	{r4, r5, r6, pc}
   116e8:	ldr	r5, [pc, #16]	; 11700 <__assert_fail@plt+0x31c>
   116ec:	add	r1, r5, #16
   116f0:	ldr	r0, [r5, #20]
   116f4:	bl	19c34 <__assert_fail@plt+0x8850>
   116f8:	str	r0, [r5, #20]
   116fc:	b	116cc <__assert_fail@plt+0x2e8>
   11700:	strdeq	lr, [r2], -r0
   11704:	push	{r4, lr}
   11708:	mov	r2, #5
   1170c:	ldr	r1, [pc, #20]	; 11728 <__assert_fail@plt+0x344>
   11710:	mov	r0, #0
   11714:	bl	11168 <dcgettext@plt>
   11718:	mov	r2, r0
   1171c:	mov	r1, #0
   11720:	mov	r0, #1
   11724:	bl	11204 <error@plt>
   11728:	andeq	ip, r1, r4, ror #2
   1172c:	push	{r4, r5, r6, r7, lr}
   11730:	sub	sp, sp, #36	; 0x24
   11734:	mov	r6, r0
   11738:	mov	r7, r1
   1173c:	mov	r4, r2
   11740:	mvn	r2, #0
   11744:	mvn	r3, #0
   11748:	strd	r2, [sp, #8]
   1174c:	ldr	r3, [pc, #264]	; 1185c <__assert_fail@plt+0x478>
   11750:	str	r3, [sp]
   11754:	add	r3, sp, #16
   11758:	mov	r2, #10
   1175c:	add	r1, sp, #28
   11760:	mov	r0, r4
   11764:	bl	1af30 <__assert_fail@plt+0x9b4c>
   11768:	bics	r3, r0, #2
   1176c:	bne	117c8 <__assert_fail@plt+0x3e4>
   11770:	ldr	r0, [sp, #28]
   11774:	cmp	r4, r0
   11778:	beq	11840 <__assert_fail@plt+0x45c>
   1177c:	ldrd	r2, [sp, #16]
   11780:	orrs	r3, r2, r3
   11784:	beq	11848 <__assert_fail@plt+0x464>
   11788:	ldrb	r3, [r0]
   1178c:	cmp	r3, #58	; 0x3a
   11790:	beq	117dc <__assert_fail@plt+0x3f8>
   11794:	ldr	r3, [sp, #28]
   11798:	ldrb	r3, [r3]
   1179c:	cmp	r3, #0
   117a0:	movne	r0, #0
   117a4:	bne	1184c <__assert_fail@plt+0x468>
   117a8:	ldrd	r0, [sp, #16]
   117ac:	ldr	r3, [pc, #172]	; 11860 <__assert_fail@plt+0x47c>
   117b0:	strd	r0, [r3, #24]
   117b4:	ldrd	r0, [sp, #8]
   117b8:	ldr	r3, [pc, #164]	; 11864 <__assert_fail@plt+0x480>
   117bc:	strd	r0, [r3, #8]
   117c0:	mov	r0, #1
   117c4:	b	1184c <__assert_fail@plt+0x468>
   117c8:	str	r4, [sp]
   117cc:	ldr	r3, [pc, #148]	; 11868 <__assert_fail@plt+0x484>
   117d0:	mov	r2, r7
   117d4:	mov	r1, r6
   117d8:	bl	1ad94 <__assert_fail@plt+0x99b0>
   117dc:	add	r5, r0, #1
   117e0:	ldr	r3, [pc, #116]	; 1185c <__assert_fail@plt+0x478>
   117e4:	str	r3, [sp]
   117e8:	add	r3, sp, #8
   117ec:	mov	r2, #10
   117f0:	add	r1, sp, #28
   117f4:	mov	r0, r5
   117f8:	bl	1af30 <__assert_fail@plt+0x9b4c>
   117fc:	cmp	r0, #0
   11800:	bne	1182c <__assert_fail@plt+0x448>
   11804:	ldr	r3, [sp, #28]
   11808:	cmp	r5, r3
   1180c:	beq	11854 <__assert_fail@plt+0x470>
   11810:	ldrd	r2, [sp, #16]
   11814:	ldrd	r0, [sp, #8]
   11818:	cmp	r1, r3
   1181c:	cmpeq	r0, r2
   11820:	movcc	r0, #0
   11824:	bcs	11794 <__assert_fail@plt+0x3b0>
   11828:	b	1184c <__assert_fail@plt+0x468>
   1182c:	str	r4, [sp]
   11830:	ldr	r3, [pc, #48]	; 11868 <__assert_fail@plt+0x484>
   11834:	mov	r2, r7
   11838:	mov	r1, r6
   1183c:	bl	1ad94 <__assert_fail@plt+0x99b0>
   11840:	mov	r0, #0
   11844:	b	1184c <__assert_fail@plt+0x468>
   11848:	mov	r0, #0
   1184c:	add	sp, sp, #36	; 0x24
   11850:	pop	{r4, r5, r6, r7, pc}
   11854:	mov	r0, #0
   11858:	b	1184c <__assert_fail@plt+0x468>
   1185c:	andeq	ip, r1, ip, ror #3
   11860:	strdeq	lr, [r2], -r0
   11864:	andeq	lr, r2, r0, asr #2
   11868:	andeq	fp, r1, r4, asr #30
   1186c:	push	{r4, lr}
   11870:	mov	r4, r0
   11874:	bl	11294 <strlen@plt>
   11878:	cmp	r0, #0
   1187c:	blt	11894 <__assert_fail@plt+0x4b0>
   11880:	ldr	r3, [pc, #16]	; 11898 <__assert_fail@plt+0x4b4>
   11884:	str	r0, [r3, #32]
   11888:	ldr	r3, [pc, #12]	; 1189c <__assert_fail@plt+0x4b8>
   1188c:	str	r4, [r3, #16]
   11890:	pop	{r4, pc}
   11894:	bl	11704 <__assert_fail@plt+0x320>
   11898:	strdeq	lr, [r2], -r0
   1189c:	andeq	lr, r2, r0, asr #2
   118a0:	push	{r4, lr}
   118a4:	sub	sp, sp, #24
   118a8:	mov	r4, r2
   118ac:	mov	r2, #0
   118b0:	str	r2, [sp, #16]
   118b4:	str	r3, [sp, #12]
   118b8:	ldr	r3, [pc, #36]	; 118e4 <__assert_fail@plt+0x500>
   118bc:	str	r3, [sp, #8]
   118c0:	mvn	r2, #-2147483648	; 0x80000000
   118c4:	mov	r3, #0
   118c8:	strd	r2, [sp]
   118cc:	mov	r2, r1
   118d0:	asr	r3, r1, #31
   118d4:	bl	1a1d0 <__assert_fail@plt+0x8dec>
   118d8:	str	r0, [r4]
   118dc:	add	sp, sp, #24
   118e0:	pop	{r4, pc}
   118e4:	andeq	ip, r1, ip, ror #3
   118e8:	push	{r4, lr}
   118ec:	mov	r4, r0
   118f0:	mov	r2, #5
   118f4:	ldr	r1, [pc, #40]	; 11924 <__assert_fail@plt+0x540>
   118f8:	mov	r0, #0
   118fc:	bl	11168 <dcgettext@plt>
   11900:	mov	r3, r0
   11904:	ldr	r2, [pc, #28]	; 11928 <__assert_fail@plt+0x544>
   11908:	mov	r1, #1
   1190c:	mov	r0, r4
   11910:	bl	118a0 <__assert_fail@plt+0x4bc>
   11914:	mov	r2, #1
   11918:	ldr	r3, [pc, #12]	; 1192c <__assert_fail@plt+0x548>
   1191c:	strb	r2, [r3, #36]	; 0x24
   11920:	pop	{r4, pc}
   11924:	andeq	ip, r1, r8, ror r1
   11928:	andeq	lr, r2, r0, asr #2
   1192c:	strdeq	lr, [r2], -r0
   11930:	push	{r4, r5, r6, lr}
   11934:	mov	r5, r0
   11938:	mov	r4, r1
   1193c:	ldr	r1, [pc, #208]	; 11a14 <__assert_fail@plt+0x630>
   11940:	bl	110c0 <strcmp@plt>
   11944:	cmp	r0, #0
   11948:	bne	119b0 <__assert_fail@plt+0x5cc>
   1194c:	mov	r2, #5
   11950:	ldr	r1, [pc, #192]	; 11a18 <__assert_fail@plt+0x634>
   11954:	bl	11168 <dcgettext@plt>
   11958:	str	r0, [r4, #4]
   1195c:	ldr	r3, [pc, #184]	; 11a1c <__assert_fail@plt+0x638>
   11960:	ldr	r3, [r3]
   11964:	str	r3, [r4]
   11968:	mov	r2, #1
   1196c:	ldr	r3, [pc, #172]	; 11a20 <__assert_fail@plt+0x63c>
   11970:	strb	r2, [r3, #37]	; 0x25
   11974:	ldr	r0, [r4]
   11978:	cmp	r0, #0
   1197c:	beq	119c8 <__assert_fail@plt+0x5e4>
   11980:	mov	r1, #2
   11984:	bl	153bc <__assert_fail@plt+0x3fd8>
   11988:	mov	r3, #0
   1198c:	str	r3, [r4, #8]
   11990:	strb	r3, [r4, #37]	; 0x25
   11994:	ldr	r2, [pc, #132]	; 11a20 <__assert_fail@plt+0x63c>
   11998:	ldr	r3, [r2, #40]	; 0x28
   1199c:	add	r3, r3, #1
   119a0:	str	r3, [r2, #40]	; 0x28
   119a4:	mov	r4, #1
   119a8:	mov	r0, r4
   119ac:	pop	{r4, r5, r6, pc}
   119b0:	str	r5, [r4, #4]
   119b4:	ldr	r1, [pc, #104]	; 11a24 <__assert_fail@plt+0x640>
   119b8:	mov	r0, r5
   119bc:	bl	154fc <__assert_fail@plt+0x4118>
   119c0:	str	r0, [r4]
   119c4:	b	11974 <__assert_fail@plt+0x590>
   119c8:	ldr	r3, [pc, #80]	; 11a20 <__assert_fail@plt+0x63c>
   119cc:	mov	r2, #1
   119d0:	strb	r2, [r3, #38]	; 0x26
   119d4:	ldrb	r4, [r3, #39]	; 0x27
   119d8:	cmp	r4, #0
   119dc:	movne	r4, #0
   119e0:	bne	119a8 <__assert_fail@plt+0x5c4>
   119e4:	bl	112c4 <__errno_location@plt>
   119e8:	ldr	r6, [r0]
   119ec:	mov	r2, r5
   119f0:	mov	r1, #3
   119f4:	mov	r0, #0
   119f8:	bl	18e08 <__assert_fail@plt+0x7a24>
   119fc:	mov	r3, r0
   11a00:	ldr	r2, [pc, #32]	; 11a28 <__assert_fail@plt+0x644>
   11a04:	mov	r1, r6
   11a08:	mov	r0, #0
   11a0c:	bl	11204 <error@plt>
   11a10:	b	119a8 <__assert_fail@plt+0x5c4>
   11a14:	muleq	r1, r4, r1
   11a18:	muleq	r1, r8, r1
   11a1c:	andeq	lr, r2, r0, ror #3
   11a20:	strdeq	lr, [r2], -r0
   11a24:	andeq	sp, r1, r8, ror r6
   11a28:	andeq	sp, r1, r4, lsr #14
   11a2c:	push	{r4, r5, r6, r7, lr}
   11a30:	sub	sp, sp, #12
   11a34:	mov	r5, r0
   11a38:	ldr	r7, [pc, #324]	; 11b84 <__assert_fail@plt+0x7a0>
   11a3c:	ldr	r3, [r7, #48]	; 0x30
   11a40:	str	r3, [sp, #4]
   11a44:	ldr	r4, [pc, #316]	; 11b88 <__assert_fail@plt+0x7a4>
   11a48:	ldr	r3, [r4, #20]
   11a4c:	str	r3, [sp]
   11a50:	ldr	r3, [pc, #308]	; 11b8c <__assert_fail@plt+0x7a8>
   11a54:	mvn	r2, #0
   11a58:	mov	r1, #1
   11a5c:	ldr	r0, [r7, #44]	; 0x2c
   11a60:	bl	112d0 <__sprintf_chk@plt>
   11a64:	ldr	r3, [r7, #48]	; 0x30
   11a68:	add	r3, r3, #1
   11a6c:	str	r3, [r7, #48]	; 0x30
   11a70:	ldr	r6, [r4, #20]
   11a74:	sub	r0, r0, r6
   11a78:	ldr	r4, [r7, #44]	; 0x2c
   11a7c:	add	r4, r4, r0
   11a80:	cmp	r6, #0
   11a84:	ble	11aa0 <__assert_fail@plt+0x6bc>
   11a88:	add	r6, r4, r6
   11a8c:	ldr	r3, [r5, #16]
   11a90:	ldrb	r0, [r4], #1
   11a94:	blx	r3
   11a98:	cmp	r6, r4
   11a9c:	bne	11a8c <__assert_fail@plt+0x6a8>
   11aa0:	ldr	r3, [pc, #224]	; 11b88 <__assert_fail@plt+0x7a4>
   11aa4:	ldr	r3, [r3]
   11aa8:	cmp	r3, #1
   11aac:	ble	11b40 <__assert_fail@plt+0x75c>
   11ab0:	ldr	r3, [pc, #208]	; 11b88 <__assert_fail@plt+0x7a4>
   11ab4:	ldrb	r0, [r3, #24]
   11ab8:	cmp	r0, #9
   11abc:	beq	11b00 <__assert_fail@plt+0x71c>
   11ac0:	ldr	r3, [r5, #16]
   11ac4:	blx	r3
   11ac8:	ldr	r3, [pc, #180]	; 11b84 <__assert_fail@plt+0x7a0>
   11acc:	ldrb	r3, [r3, #60]	; 0x3c
   11ad0:	cmp	r3, #0
   11ad4:	beq	11af8 <__assert_fail@plt+0x714>
   11ad8:	ldr	r3, [pc, #164]	; 11b84 <__assert_fail@plt+0x7a0>
   11adc:	ldrb	r3, [r3, #4]
   11ae0:	cmp	r3, #0
   11ae4:	ldreq	r3, [pc, #152]	; 11b84 <__assert_fail@plt+0x7a0>
   11ae8:	ldreq	r2, [r3, #64]	; 0x40
   11aec:	ldreq	r1, [r3, #52]	; 0x34
   11af0:	addeq	r2, r2, r1
   11af4:	streq	r2, [r3, #64]	; 0x40
   11af8:	add	sp, sp, #12
   11afc:	pop	{r4, r5, r6, r7, pc}
   11b00:	ldr	r3, [pc, #124]	; 11b84 <__assert_fail@plt+0x7a0>
   11b04:	ldr	r3, [r3, #52]	; 0x34
   11b08:	ldr	r2, [pc, #120]	; 11b88 <__assert_fail@plt+0x7a4>
   11b0c:	ldr	r2, [r2, #20]
   11b10:	sub	r3, r3, r2
   11b14:	sub	r4, r3, #1
   11b18:	cmp	r3, #0
   11b1c:	ble	11ac8 <__assert_fail@plt+0x6e4>
   11b20:	mov	r6, #32
   11b24:	ldr	r3, [r5, #16]
   11b28:	mov	r0, r6
   11b2c:	blx	r3
   11b30:	sub	r4, r4, #1
   11b34:	cmn	r4, #1
   11b38:	bne	11b24 <__assert_fail@plt+0x740>
   11b3c:	b	11ac8 <__assert_fail@plt+0x6e4>
   11b40:	ldr	r4, [pc, #64]	; 11b88 <__assert_fail@plt+0x7a4>
   11b44:	ldr	r3, [r5, #16]
   11b48:	ldrb	r0, [r4, #24]
   11b4c:	blx	r3
   11b50:	ldrb	r3, [r4, #24]
   11b54:	cmp	r3, #9
   11b58:	bne	11ac8 <__assert_fail@plt+0x6e4>
   11b5c:	ldr	r4, [r4, #28]
   11b60:	ldr	r5, [pc, #28]	; 11b84 <__assert_fail@plt+0x7a0>
   11b64:	ldr	r6, [r5, #56]	; 0x38
   11b68:	mov	r1, r4
   11b6c:	mov	r0, r6
   11b70:	bl	1bc54 <__assert_fail@plt+0xa870>
   11b74:	sub	r3, r4, r1
   11b78:	add	r3, r3, r6
   11b7c:	str	r3, [r5, #56]	; 0x38
   11b80:	b	11ac8 <__assert_fail@plt+0x6e4>
   11b84:	strdeq	lr, [r2], -r0
   11b88:	andeq	lr, r2, r0, asr #2
   11b8c:	andeq	ip, r1, r8, lsr #3
   11b90:	push	{r4, r5, r6, r7, r8, r9, lr}
   11b94:	sub	sp, sp, #196	; 0xc4
   11b98:	mov	r6, r0
   11b9c:	mov	r8, r1
   11ba0:	ldr	r1, [pc, #388]	; 11d2c <__assert_fail@plt+0x948>
   11ba4:	bl	110c0 <strcmp@plt>
   11ba8:	cmp	r0, #0
   11bac:	beq	11be4 <__assert_fail@plt+0x800>
   11bb0:	cmp	r8, #0
   11bb4:	blt	11be8 <__assert_fail@plt+0x804>
   11bb8:	add	r2, sp, #88	; 0x58
   11bbc:	mov	r1, r8
   11bc0:	mov	r0, #3
   11bc4:	bl	111bc <__fxstat64@plt>
   11bc8:	cmp	r0, #0
   11bcc:	bne	11be8 <__assert_fail@plt+0x804>
   11bd0:	ldr	r3, [sp, #168]	; 0xa8
   11bd4:	str	r3, [sp, #80]	; 0x50
   11bd8:	ldr	r3, [sp, #172]	; 0xac
   11bdc:	str	r3, [sp, #84]	; 0x54
   11be0:	b	11c08 <__assert_fail@plt+0x824>
   11be4:	mvn	r8, #0
   11be8:	ldr	r3, [pc, #320]	; 11d30 <__assert_fail@plt+0x94c>
   11bec:	ldr	r3, [r3, #68]	; 0x44
   11bf0:	cmp	r3, #0
   11bf4:	beq	11cd4 <__assert_fail@plt+0x8f0>
   11bf8:	add	r3, sp, #80	; 0x50
   11bfc:	ldr	r2, [pc, #304]	; 11d34 <__assert_fail@plt+0x950>
   11c00:	ldm	r2, {r0, r1}
   11c04:	stm	r3, {r0, r1}
   11c08:	ldr	r5, [sp, #84]	; 0x54
   11c0c:	add	r2, sp, #36	; 0x24
   11c10:	add	r1, sp, #80	; 0x50
   11c14:	ldr	r3, [pc, #276]	; 11d30 <__assert_fail@plt+0x94c>
   11c18:	ldr	r0, [r3, #76]	; 0x4c
   11c1c:	bl	19378 <__assert_fail@plt+0x7f94>
   11c20:	cmp	r0, #0
   11c24:	beq	11ce0 <__assert_fail@plt+0x8fc>
   11c28:	ldr	r4, [pc, #256]	; 11d30 <__assert_fail@plt+0x94c>
   11c2c:	str	r5, [sp, #4]
   11c30:	ldr	r3, [r4, #76]	; 0x4c
   11c34:	str	r3, [sp]
   11c38:	add	r3, sp, #36	; 0x24
   11c3c:	ldr	r2, [r4, #80]	; 0x50
   11c40:	mvn	r1, #0
   11c44:	mov	r0, #0
   11c48:	bl	173dc <__assert_fail@plt+0x5ff8>
   11c4c:	add	r9, r0, #1
   11c50:	mov	r0, r9
   11c54:	bl	19a98 <__assert_fail@plt+0x86b4>
   11c58:	mov	r7, r0
   11c5c:	ldr	r2, [r4, #80]	; 0x50
   11c60:	str	r5, [sp, #4]
   11c64:	ldr	r3, [r4, #76]	; 0x4c
   11c68:	str	r3, [sp]
   11c6c:	add	r3, sp, #36	; 0x24
   11c70:	mov	r1, r9
   11c74:	bl	173dc <__assert_fail@plt+0x5ff8>
   11c78:	ldr	r4, [pc, #176]	; 11d30 <__assert_fail@plt+0x94c>
   11c7c:	ldr	r0, [r4, #84]	; 0x54
   11c80:	bl	15598 <__assert_fail@plt+0x41b4>
   11c84:	str	r7, [r4, #84]	; 0x54
   11c88:	ldr	r3, [r4, #88]	; 0x58
   11c8c:	cmp	r3, #0
   11c90:	movne	r6, r3
   11c94:	beq	11d1c <__assert_fail@plt+0x938>
   11c98:	ldr	r5, [pc, #144]	; 11d30 <__assert_fail@plt+0x94c>
   11c9c:	str	r6, [r5, #92]	; 0x5c
   11ca0:	ldr	r3, [pc, #144]	; 11d38 <__assert_fail@plt+0x954>
   11ca4:	ldr	r4, [r3, #32]
   11ca8:	mov	r1, #0
   11cac:	mov	r0, r7
   11cb0:	bl	159f8 <__assert_fail@plt+0x4614>
   11cb4:	sub	r4, r4, r0
   11cb8:	mov	r1, #0
   11cbc:	ldr	r0, [r5, #92]	; 0x5c
   11cc0:	bl	159f8 <__assert_fail@plt+0x4614>
   11cc4:	sub	r0, r4, r0
   11cc8:	str	r0, [r5, #96]	; 0x60
   11ccc:	add	sp, sp, #196	; 0xc4
   11cd0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11cd4:	ldr	r0, [pc, #88]	; 11d34 <__assert_fail@plt+0x950>
   11cd8:	bl	15698 <__assert_fail@plt+0x42b4>
   11cdc:	b	11bf8 <__assert_fail@plt+0x814>
   11ce0:	mov	r0, #33	; 0x21
   11ce4:	bl	19a98 <__assert_fail@plt+0x86b4>
   11ce8:	mov	r7, r0
   11cec:	add	r2, sp, #12
   11cf0:	ldr	r0, [sp, #80]	; 0x50
   11cf4:	asr	r1, r0, #31
   11cf8:	bl	15734 <__assert_fail@plt+0x4350>
   11cfc:	str	r5, [sp, #4]
   11d00:	str	r0, [sp]
   11d04:	ldr	r3, [pc, #48]	; 11d3c <__assert_fail@plt+0x958>
   11d08:	mov	r2, #33	; 0x21
   11d0c:	mov	r1, #1
   11d10:	mov	r0, r7
   11d14:	bl	112d0 <__sprintf_chk@plt>
   11d18:	b	11c78 <__assert_fail@plt+0x894>
   11d1c:	ldr	r3, [pc, #28]	; 11d40 <__assert_fail@plt+0x95c>
   11d20:	cmp	r8, #0
   11d24:	movlt	r6, r3
   11d28:	b	11c98 <__assert_fail@plt+0x8b4>
   11d2c:	muleq	r1, r4, r1
   11d30:	strdeq	lr, [r2], -r0
   11d34:	andeq	lr, r2, r4, lsr r2
   11d38:	andeq	lr, r2, r0, asr #2
   11d3c:	andeq	ip, r1, ip, lsr #3
   11d40:	andeq	ip, r1, ip, ror #3
   11d44:	ldr	r3, [r0, #8]
   11d48:	cmp	r3, #3
   11d4c:	bxeq	lr
   11d50:	push	{r4, r5, r6, lr}
   11d54:	mov	r4, r0
   11d58:	bl	112c4 <__errno_location@plt>
   11d5c:	mov	r6, r0
   11d60:	ldr	r5, [r0]
   11d64:	ldr	r0, [r4]
   11d68:	ldr	r3, [r0]
   11d6c:	and	r3, r3, #32
   11d70:	cmp	r3, #0
   11d74:	moveq	r5, #0
   11d78:	bl	11300 <fileno@plt>
   11d7c:	cmp	r0, #0
   11d80:	bne	11de4 <__assert_fail@plt+0xa00>
   11d84:	ldr	r0, [r4]
   11d88:	bl	11384 <clearerr_unlocked@plt>
   11d8c:	cmp	r5, #0
   11d90:	bne	11e08 <__assert_fail@plt+0xa24>
   11d94:	ldr	r3, [pc, #180]	; 11e50 <__assert_fail@plt+0xa6c>
   11d98:	ldrb	r3, [r3, #4]
   11d9c:	cmp	r3, #0
   11da0:	bne	11e2c <__assert_fail@plt+0xa48>
   11da4:	ldr	r3, [pc, #164]	; 11e50 <__assert_fail@plt+0xa6c>
   11da8:	ldr	r3, [r3]
   11dac:	ldr	r2, [pc, #160]	; 11e54 <__assert_fail@plt+0xa70>
   11db0:	ldr	r2, [r2]
   11db4:	cmp	r2, #0
   11db8:	beq	11e3c <__assert_fail@plt+0xa58>
   11dbc:	mov	r0, #3
   11dc0:	mov	ip, #0
   11dc4:	str	r0, [r3, #8]
   11dc8:	ldr	r1, [r3, #24]
   11dcc:	cmp	r1, #0
   11dd0:	streq	ip, [r3, #28]
   11dd4:	add	r3, r3, #40	; 0x28
   11dd8:	subs	r2, r2, #1
   11ddc:	bne	11dc4 <__assert_fail@plt+0x9e0>
   11de0:	b	11e3c <__assert_fail@plt+0xa58>
   11de4:	ldr	r0, [r4]
   11de8:	bl	153f0 <__assert_fail@plt+0x400c>
   11dec:	clz	r3, r5
   11df0:	lsr	r3, r3, #5
   11df4:	cmp	r0, #0
   11df8:	moveq	r3, #0
   11dfc:	cmp	r3, #0
   11e00:	ldrne	r5, [r6]
   11e04:	b	11d8c <__assert_fail@plt+0x9a8>
   11e08:	ldr	r2, [r4, #4]
   11e0c:	mov	r1, #3
   11e10:	mov	r0, #0
   11e14:	bl	18e08 <__assert_fail@plt+0x7a24>
   11e18:	mov	r3, r0
   11e1c:	ldr	r2, [pc, #52]	; 11e58 <__assert_fail@plt+0xa74>
   11e20:	mov	r1, r5
   11e24:	mov	r0, #1
   11e28:	bl	11204 <error@plt>
   11e2c:	mov	r3, #3
   11e30:	str	r3, [r4, #8]
   11e34:	mov	r3, #0
   11e38:	str	r3, [r4, #28]
   11e3c:	ldr	r2, [pc, #12]	; 11e50 <__assert_fail@plt+0xa6c>
   11e40:	ldr	r3, [r2, #8]
   11e44:	sub	r3, r3, #1
   11e48:	str	r3, [r2, #8]
   11e4c:	pop	{r4, r5, r6, pc}
   11e50:	strdeq	lr, [r2], -r0
   11e54:	andeq	lr, r2, r0, asr #2
   11e58:	andeq	sp, r1, r4, lsr #14
   11e5c:	push	{r4, r5, r6, r7, r8, lr}
   11e60:	mov	r5, r0
   11e64:	mov	r6, r1
   11e68:	ldr	r4, [r0]
   11e6c:	ldr	r3, [r4, #4]
   11e70:	ldr	r2, [r4, #8]
   11e74:	cmp	r3, r2
   11e78:	bcs	11ee4 <__assert_fail@plt+0xb00>
   11e7c:	add	r2, r3, #1
   11e80:	str	r2, [r4, #4]
   11e84:	ldrb	r0, [r3]
   11e88:	cmp	r0, #12
   11e8c:	beq	11ef0 <__assert_fail@plt+0xb0c>
   11e90:	mov	r3, #0
   11e94:	strb	r3, [r5, #37]	; 0x25
   11e98:	cmp	r0, #12
   11e9c:	movne	r7, #0
   11ea0:	moveq	r7, #1
   11ea4:	ldr	r3, [pc, #540]	; 120c8 <__assert_fail@plt+0xce4>
   11ea8:	ldrb	r3, [r3, #100]	; 0x64
   11eac:	cmp	r3, #0
   11eb0:	beq	11ebc <__assert_fail@plt+0xad8>
   11eb4:	mov	r3, #1
   11eb8:	strb	r3, [r5, #37]	; 0x25
   11ebc:	cmp	r0, #10
   11ec0:	beq	12014 <__assert_fail@plt+0xc30>
   11ec4:	cmp	r7, #0
   11ec8:	bne	11f8c <__assert_fail@plt+0xba8>
   11ecc:	cmn	r0, #1
   11ed0:	bne	12088 <__assert_fail@plt+0xca4>
   11ed4:	mov	r0, r5
   11ed8:	bl	11d44 <__assert_fail@plt+0x960>
   11edc:	mov	r7, #0
   11ee0:	b	12014 <__assert_fail@plt+0xc30>
   11ee4:	mov	r0, r4
   11ee8:	bl	1133c <__uflow@plt>
   11eec:	b	11e88 <__assert_fail@plt+0xaa4>
   11ef0:	ldrb	r8, [r5, #37]	; 0x25
   11ef4:	cmp	r8, #0
   11ef8:	beq	120b0 <__assert_fail@plt+0xccc>
   11efc:	ldr	r3, [r4, #4]
   11f00:	ldr	r2, [r4, #8]
   11f04:	cmp	r3, r2
   11f08:	bcs	11f54 <__assert_fail@plt+0xb70>
   11f0c:	add	r2, r3, #1
   11f10:	str	r2, [r4, #4]
   11f14:	ldrb	r0, [r3]
   11f18:	cmp	r0, #10
   11f1c:	beq	11f60 <__assert_fail@plt+0xb7c>
   11f20:	mov	r3, #0
   11f24:	strb	r3, [r5, #37]	; 0x25
   11f28:	cmp	r0, #12
   11f2c:	movne	r7, #0
   11f30:	moveq	r7, #1
   11f34:	ldr	r3, [pc, #396]	; 120c8 <__assert_fail@plt+0xce4>
   11f38:	ldrb	r3, [r3, #100]	; 0x64
   11f3c:	cmp	r3, #0
   11f40:	bne	11eb4 <__assert_fail@plt+0xad0>
   11f44:	cmp	r0, #12
   11f48:	bne	11ecc <__assert_fail@plt+0xae8>
   11f4c:	mov	r7, r8
   11f50:	b	11fe0 <__assert_fail@plt+0xbfc>
   11f54:	mov	r0, r4
   11f58:	bl	1133c <__uflow@plt>
   11f5c:	b	11f18 <__assert_fail@plt+0xb34>
   11f60:	ldr	r3, [r4, #4]
   11f64:	ldr	r2, [r4, #8]
   11f68:	cmp	r3, r2
   11f6c:	addcc	r2, r3, #1
   11f70:	strcc	r2, [r4, #4]
   11f74:	ldrbcc	r0, [r3]
   11f78:	bcc	11e90 <__assert_fail@plt+0xaac>
   11f7c:	mov	r0, r4
   11f80:	bl	1133c <__uflow@plt>
   11f84:	b	11e90 <__assert_fail@plt+0xaac>
   11f88:	mov	r7, #0
   11f8c:	ldr	r3, [pc, #308]	; 120c8 <__assert_fail@plt+0xce4>
   11f90:	ldrb	r3, [r3, #100]	; 0x64
   11f94:	cmp	r3, #0
   11f98:	beq	11fe0 <__assert_fail@plt+0xbfc>
   11f9c:	ldr	r3, [pc, #292]	; 120c8 <__assert_fail@plt+0xce4>
   11fa0:	ldrb	r3, [r3, #4]
   11fa4:	cmp	r3, #0
   11fa8:	movne	r3, #0
   11fac:	strbne	r3, [r5, #37]	; 0x25
   11fb0:	bne	11fe0 <__assert_fail@plt+0xbfc>
   11fb4:	ldr	r3, [pc, #268]	; 120c8 <__assert_fail@plt+0xce4>
   11fb8:	ldr	r2, [r3]
   11fbc:	ldr	r3, [pc, #264]	; 120cc <__assert_fail@plt+0xce8>
   11fc0:	ldr	r3, [r3]
   11fc4:	cmp	r3, #0
   11fc8:	beq	11fe0 <__assert_fail@plt+0xbfc>
   11fcc:	mov	r1, #0
   11fd0:	strb	r1, [r2, #37]	; 0x25
   11fd4:	add	r2, r2, #40	; 0x28
   11fd8:	subs	r3, r3, #1
   11fdc:	bne	11fd0 <__assert_fail@plt+0xbec>
   11fe0:	ldr	r3, [r4, #4]
   11fe4:	ldr	r2, [r4, #8]
   11fe8:	cmp	r3, r2
   11fec:	bcs	1205c <__assert_fail@plt+0xc78>
   11ff0:	add	r2, r3, #1
   11ff4:	str	r2, [r4, #4]
   11ff8:	ldrb	r0, [r3]
   11ffc:	cmp	r0, #10
   12000:	beq	1200c <__assert_fail@plt+0xc28>
   12004:	mov	r1, r4
   12008:	bl	112b8 <ungetc@plt>
   1200c:	mov	r0, r5
   12010:	bl	1159c <__assert_fail@plt+0x1b8>
   12014:	ldr	r3, [pc, #176]	; 120cc <__assert_fail@plt+0xce8>
   12018:	ldrb	r3, [r3, #36]	; 0x24
   1201c:	cmp	r3, #0
   12020:	popeq	{r4, r5, r6, r7, r8, pc}
   12024:	ldr	r3, [pc, #156]	; 120c8 <__assert_fail@plt+0xce4>
   12028:	ldrb	r3, [r3, #4]
   1202c:	eor	r3, r3, #1
   12030:	cmp	r6, #1
   12034:	movne	r6, r3
   12038:	orreq	r6, r3, #1
   1203c:	cmp	r6, #0
   12040:	popeq	{r4, r5, r6, r7, r8, pc}
   12044:	cmp	r7, #0
   12048:	ldreq	r2, [pc, #124]	; 120cc <__assert_fail@plt+0xce8>
   1204c:	ldreq	r3, [r2, #40]	; 0x28
   12050:	addeq	r3, r3, #1
   12054:	streq	r3, [r2, #40]	; 0x28
   12058:	pop	{r4, r5, r6, r7, r8, pc}
   1205c:	mov	r0, r4
   12060:	bl	1133c <__uflow@plt>
   12064:	b	11ffc <__assert_fail@plt+0xc18>
   12068:	mov	r0, r4
   1206c:	bl	1133c <__uflow@plt>
   12070:	cmp	r0, #10
   12074:	beq	120a8 <__assert_fail@plt+0xcc4>
   12078:	cmp	r0, #12
   1207c:	beq	11f88 <__assert_fail@plt+0xba4>
   12080:	cmn	r0, #1
   12084:	beq	11ed4 <__assert_fail@plt+0xaf0>
   12088:	ldr	r3, [r4, #4]
   1208c:	ldr	r2, [r4, #8]
   12090:	cmp	r3, r2
   12094:	bcs	12068 <__assert_fail@plt+0xc84>
   12098:	add	r2, r3, #1
   1209c:	str	r2, [r4, #4]
   120a0:	ldrb	r0, [r3]
   120a4:	b	12070 <__assert_fail@plt+0xc8c>
   120a8:	mov	r7, #0
   120ac:	b	12014 <__assert_fail@plt+0xc30>
   120b0:	ldr	r3, [pc, #16]	; 120c8 <__assert_fail@plt+0xce4>
   120b4:	ldrb	r7, [r3, #100]	; 0x64
   120b8:	cmp	r7, #0
   120bc:	moveq	r7, #1
   120c0:	bne	11eb4 <__assert_fail@plt+0xad0>
   120c4:	b	11fe0 <__assert_fail@plt+0xbfc>
   120c8:	strdeq	lr, [r2], -r0
   120cc:	andeq	lr, r2, r0, asr #2
   120d0:	push	{r4, r5, r6, lr}
   120d4:	mov	r5, r0
   120d8:	ldr	r4, [r0]
   120dc:	b	12168 <__assert_fail@plt+0xd84>
   120e0:	ldr	r3, [r4, #4]
   120e4:	ldr	r2, [r4, #8]
   120e8:	cmp	r3, r2
   120ec:	bcs	12130 <__assert_fail@plt+0xd4c>
   120f0:	add	r2, r3, #1
   120f4:	str	r2, [r4, #4]
   120f8:	ldrb	r0, [r3]
   120fc:	cmp	r0, #10
   12100:	beq	1210c <__assert_fail@plt+0xd28>
   12104:	mov	r1, r4
   12108:	bl	112b8 <ungetc@plt>
   1210c:	ldr	r3, [pc, #120]	; 1218c <__assert_fail@plt+0xda8>
   12110:	ldrb	r3, [r3, #101]	; 0x65
   12114:	cmp	r3, #0
   12118:	movne	r2, #1
   1211c:	ldrne	r3, [pc, #104]	; 1218c <__assert_fail@plt+0xda8>
   12120:	strbne	r2, [r3, #102]	; 0x66
   12124:	mov	r0, r5
   12128:	bl	1159c <__assert_fail@plt+0x1b8>
   1212c:	pop	{r4, r5, r6, pc}
   12130:	mov	r0, r4
   12134:	bl	1133c <__uflow@plt>
   12138:	b	120fc <__assert_fail@plt+0xd18>
   1213c:	mov	r0, r5
   12140:	bl	11d44 <__assert_fail@plt+0x960>
   12144:	pop	{r4, r5, r6, pc}
   12148:	mov	r0, r4
   1214c:	bl	1133c <__uflow@plt>
   12150:	cmp	r0, #10
   12154:	beq	12188 <__assert_fail@plt+0xda4>
   12158:	cmp	r0, #12
   1215c:	beq	120e0 <__assert_fail@plt+0xcfc>
   12160:	cmn	r0, #1
   12164:	beq	1213c <__assert_fail@plt+0xd58>
   12168:	ldr	r3, [r4, #4]
   1216c:	ldr	r2, [r4, #8]
   12170:	cmp	r3, r2
   12174:	bcs	12148 <__assert_fail@plt+0xd64>
   12178:	add	r2, r3, #1
   1217c:	str	r2, [r4, #4]
   12180:	ldrb	r0, [r3]
   12184:	b	12150 <__assert_fail@plt+0xd6c>
   12188:	pop	{r4, r5, r6, pc}
   1218c:	strdeq	lr, [r2], -r0
   12190:	push	{r4, r5, r6, r7, r8, lr}
   12194:	ldr	r3, [pc, #108]	; 12208 <__assert_fail@plt+0xe24>
   12198:	ldr	r4, [r3, #56]	; 0x38
   1219c:	ldrb	r3, [r3, #103]	; 0x67
   121a0:	cmp	r3, #0
   121a4:	bne	121ec <__assert_fail@plt+0xe08>
   121a8:	mov	r5, r0
   121ac:	ldr	r7, [pc, #88]	; 1220c <__assert_fail@plt+0xe28>
   121b0:	mov	r6, #32
   121b4:	add	r4, r4, #1
   121b8:	cmp	r5, r4
   121bc:	blt	121fc <__assert_fail@plt+0xe18>
   121c0:	ldr	r0, [r7]
   121c4:	ldr	r3, [r0, #20]
   121c8:	ldr	r2, [r0, #24]
   121cc:	cmp	r3, r2
   121d0:	addcc	r2, r3, #1
   121d4:	strcc	r2, [r0, #20]
   121d8:	strbcc	r6, [r3]
   121dc:	bcc	121b4 <__assert_fail@plt+0xdd0>
   121e0:	mov	r1, r6
   121e4:	bl	11348 <__overflow@plt>
   121e8:	b	121b4 <__assert_fail@plt+0xdd0>
   121ec:	sub	r0, r0, r4
   121f0:	ldr	r3, [pc, #16]	; 12208 <__assert_fail@plt+0xe24>
   121f4:	str	r0, [r3, #104]	; 0x68
   121f8:	pop	{r4, r5, r6, r7, r8, pc}
   121fc:	ldr	r3, [pc, #4]	; 12208 <__assert_fail@plt+0xe24>
   12200:	str	r5, [r3, #56]	; 0x38
   12204:	pop	{r4, r5, r6, r7, r8, pc}
   12208:	strdeq	lr, [r2], -r0
   1220c:	andeq	lr, r2, r4, ror #3
   12210:	push	{r4, r5, r6, r7, r8, lr}
   12214:	ldr	r3, [pc, #196]	; 122e0 <__assert_fail@plt+0xefc>
   12218:	ldr	r5, [r3, #56]	; 0x38
   1221c:	ldr	r6, [r3, #104]	; 0x68
   12220:	add	r6, r5, r6
   12224:	ldr	r7, [pc, #184]	; 122e4 <__assert_fail@plt+0xf00>
   12228:	ldr	r8, [pc, #184]	; 122e8 <__assert_fail@plt+0xf04>
   1222c:	b	12234 <__assert_fail@plt+0xe50>
   12230:	mov	r5, r4
   12234:	sub	r3, r6, r5
   12238:	cmp	r3, #1
   1223c:	ble	1228c <__assert_fail@plt+0xea8>
   12240:	ldr	r4, [r7, #28]
   12244:	mov	r1, r4
   12248:	mov	r0, r5
   1224c:	bl	1bc54 <__assert_fail@plt+0xa870>
   12250:	sub	r4, r4, r1
   12254:	add	r4, r4, r5
   12258:	cmp	r6, r4
   1225c:	blt	1228c <__assert_fail@plt+0xea8>
   12260:	ldrb	r1, [r7, #44]	; 0x2c
   12264:	ldr	r0, [r8]
   12268:	ldr	r3, [r0, #20]
   1226c:	ldr	r2, [r0, #24]
   12270:	cmp	r3, r2
   12274:	addcc	r2, r3, #1
   12278:	strcc	r2, [r0, #20]
   1227c:	strbcc	r1, [r3]
   12280:	bcc	12230 <__assert_fail@plt+0xe4c>
   12284:	bl	11348 <__overflow@plt>
   12288:	b	12230 <__assert_fail@plt+0xe4c>
   1228c:	ldr	r7, [pc, #84]	; 122e8 <__assert_fail@plt+0xf04>
   12290:	mov	r4, #32
   12294:	add	r5, r5, #1
   12298:	cmp	r6, r5
   1229c:	blt	122cc <__assert_fail@plt+0xee8>
   122a0:	ldr	r0, [r7]
   122a4:	ldr	r3, [r0, #20]
   122a8:	ldr	r2, [r0, #24]
   122ac:	cmp	r3, r2
   122b0:	addcc	r2, r3, #1
   122b4:	strcc	r2, [r0, #20]
   122b8:	strbcc	r4, [r3]
   122bc:	bcc	12294 <__assert_fail@plt+0xeb0>
   122c0:	mov	r1, r4
   122c4:	bl	11348 <__overflow@plt>
   122c8:	b	12294 <__assert_fail@plt+0xeb0>
   122cc:	ldr	r3, [pc, #12]	; 122e0 <__assert_fail@plt+0xefc>
   122d0:	str	r6, [r3, #56]	; 0x38
   122d4:	mov	r2, #0
   122d8:	str	r2, [r3, #104]	; 0x68
   122dc:	pop	{r4, r5, r6, r7, r8, pc}
   122e0:	strdeq	lr, [r2], -r0
   122e4:	andeq	lr, r2, r0, asr #2
   122e8:	andeq	lr, r2, r4, ror #3
   122ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   122f0:	ldr	r3, [pc, #248]	; 123f0 <__assert_fail@plt+0x100c>
   122f4:	ldr	r3, [r3, #108]	; 0x6c
   122f8:	cmp	r3, #0
   122fc:	ble	1231c <__assert_fail@plt+0xf38>
   12300:	ldr	r3, [pc, #236]	; 123f4 <__assert_fail@plt+0x1010>
   12304:	ldr	r9, [r3, #16]
   12308:	ldr	r3, [pc, #224]	; 123f0 <__assert_fail@plt+0x100c>
   1230c:	ldr	r8, [r3, #32]
   12310:	mov	r6, r3
   12314:	ldr	r7, [pc, #220]	; 123f8 <__assert_fail@plt+0x1014>
   12318:	b	123e4 <__assert_fail@plt+0x1000>
   1231c:	ldr	r3, [pc, #204]	; 123f0 <__assert_fail@plt+0x100c>
   12320:	ldr	r3, [r3, #104]	; 0x68
   12324:	cmp	r3, #0
   12328:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   1232c:	bl	12210 <__assert_fail@plt+0xe2c>
   12330:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12334:	ldr	r3, [r6, #104]	; 0x68
   12338:	add	r3, r3, #1
   1233c:	str	r3, [r6, #104]	; 0x68
   12340:	b	12374 <__assert_fail@plt+0xf90>
   12344:	ldrb	r1, [sl, #-1]
   12348:	ldr	r0, [r7]
   1234c:	ldr	r3, [r0, #20]
   12350:	ldr	r2, [r0, #24]
   12354:	cmp	r3, r2
   12358:	addcc	r2, r3, #1
   1235c:	strcc	r2, [r0, #20]
   12360:	strbcc	r1, [r3]
   12364:	bcs	123a8 <__assert_fail@plt+0xfc4>
   12368:	ldr	r3, [r6, #56]	; 0x38
   1236c:	add	r3, r3, #1
   12370:	str	r3, [r6, #56]	; 0x38
   12374:	sub	r5, r5, #1
   12378:	add	r4, r4, #1
   1237c:	cmp	r5, #0
   12380:	ble	123b0 <__assert_fail@plt+0xfcc>
   12384:	mov	sl, r4
   12388:	ldrb	r3, [r4, #-1]
   1238c:	cmp	r3, #32
   12390:	beq	12334 <__assert_fail@plt+0xf50>
   12394:	ldr	r3, [r6, #104]	; 0x68
   12398:	cmp	r3, #0
   1239c:	ble	12344 <__assert_fail@plt+0xf60>
   123a0:	bl	12210 <__assert_fail@plt+0xe2c>
   123a4:	b	12344 <__assert_fail@plt+0xf60>
   123a8:	bl	11348 <__overflow@plt>
   123ac:	b	12368 <__assert_fail@plt+0xf84>
   123b0:	bic	r3, r8, r8, asr #31
   123b4:	add	r9, r9, r3
   123b8:	sub	r8, r8, #1
   123bc:	sub	r8, r8, r3
   123c0:	ldr	r3, [r6, #104]	; 0x68
   123c4:	cmp	r3, #0
   123c8:	ble	123d0 <__assert_fail@plt+0xfec>
   123cc:	bl	12210 <__assert_fail@plt+0xe2c>
   123d0:	ldr	r3, [r6, #108]	; 0x6c
   123d4:	sub	r3, r3, #1
   123d8:	str	r3, [r6, #108]	; 0x6c
   123dc:	cmp	r3, #0
   123e0:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   123e4:	mov	r5, r8
   123e8:	add	r4, r9, #1
   123ec:	b	1237c <__assert_fail@plt+0xf98>
   123f0:	strdeq	lr, [r2], -r0
   123f4:	andeq	lr, r2, r0, asr #2
   123f8:	andeq	lr, r2, r4, ror #3
   123fc:	push	{r4, lr}
   12400:	mov	r4, r0
   12404:	ldr	r3, [r0, #32]
   12408:	ldr	r2, [pc, #84]	; 12464 <__assert_fail@plt+0x1080>
   1240c:	str	r3, [r2, #112]	; 0x70
   12410:	ldr	r0, [r2, #32]
   12414:	cmp	r3, r0
   12418:	bgt	12444 <__assert_fail@plt+0x1060>
   1241c:	ldr	r3, [pc, #64]	; 12464 <__assert_fail@plt+0x1080>
   12420:	ldrb	r3, [r3, #116]	; 0x74
   12424:	cmp	r3, #0
   12428:	bne	1245c <__assert_fail@plt+0x1078>
   1242c:	ldrb	r3, [r4, #36]	; 0x24
   12430:	cmp	r3, #0
   12434:	popeq	{r4, pc}
   12438:	mov	r0, r4
   1243c:	bl	11a2c <__assert_fail@plt+0x648>
   12440:	pop	{r4, pc}
   12444:	sub	r0, r3, r0
   12448:	bl	12190 <__assert_fail@plt+0xdac>
   1244c:	mov	r2, #0
   12450:	ldr	r3, [pc, #12]	; 12464 <__assert_fail@plt+0x1080>
   12454:	str	r2, [r3, #112]	; 0x70
   12458:	b	1241c <__assert_fail@plt+0x1038>
   1245c:	bl	122ec <__assert_fail@plt+0xf08>
   12460:	b	1242c <__assert_fail@plt+0x1048>
   12464:	strdeq	lr, [r2], -r0
   12468:	push	{r4, r5, r6, lr}
   1246c:	sub	sp, sp, #312	; 0x138
   12470:	ldr	r4, [pc, #220]	; 12554 <__assert_fail@plt+0x1170>
   12474:	mov	r3, #0
   12478:	str	r3, [r4, #56]	; 0x38
   1247c:	ldr	r0, [r4, #120]	; 0x78
   12480:	bl	12190 <__assert_fail@plt+0xdac>
   12484:	bl	12210 <__assert_fail@plt+0xe2c>
   12488:	ldrd	r4, [r4, #128]	; 0x80
   1248c:	orrs	r3, r4, r5
   12490:	beq	12534 <__assert_fail@plt+0x1150>
   12494:	mov	r2, #5
   12498:	ldr	r1, [pc, #184]	; 12558 <__assert_fail@plt+0x1174>
   1249c:	mov	r0, #0
   124a0:	bl	11168 <dcgettext@plt>
   124a4:	add	r6, sp, #36	; 0x24
   124a8:	strd	r4, [sp]
   124ac:	mov	r3, r0
   124b0:	mov	r2, #276	; 0x114
   124b4:	mov	r1, #1
   124b8:	mov	r0, r6
   124bc:	bl	112d0 <__sprintf_chk@plt>
   124c0:	ldr	r5, [pc, #140]	; 12554 <__assert_fail@plt+0x1170>
   124c4:	ldr	r4, [r5, #96]	; 0x60
   124c8:	mov	r1, #0
   124cc:	mov	r0, r6
   124d0:	bl	159f8 <__assert_fail@plt+0x4614>
   124d4:	sub	r0, r4, r0
   124d8:	bic	r0, r0, r0, asr #31
   124dc:	asr	r3, r0, #1
   124e0:	str	r6, [sp, #24]
   124e4:	ldr	r2, [pc, #112]	; 1255c <__assert_fail@plt+0x1178>
   124e8:	str	r2, [sp, #20]
   124ec:	sub	r0, r0, r3
   124f0:	str	r0, [sp, #16]
   124f4:	ldr	r1, [r5, #92]	; 0x5c
   124f8:	str	r1, [sp, #12]
   124fc:	str	r2, [sp, #8]
   12500:	str	r3, [sp, #4]
   12504:	ldr	r3, [r5, #84]	; 0x54
   12508:	str	r3, [sp]
   1250c:	ldr	r3, [pc, #76]	; 12560 <__assert_fail@plt+0x117c>
   12510:	ldr	r2, [r5, #120]	; 0x78
   12514:	ldr	r1, [pc, #72]	; 12564 <__assert_fail@plt+0x1180>
   12518:	mov	r0, #1
   1251c:	bl	112f4 <__printf_chk@plt>
   12520:	mov	r3, #0
   12524:	strb	r3, [r5, #136]	; 0x88
   12528:	str	r3, [r5, #56]	; 0x38
   1252c:	add	sp, sp, #312	; 0x138
   12530:	pop	{r4, r5, r6, pc}
   12534:	mov	r2, #5
   12538:	ldr	r1, [pc, #40]	; 12568 <__assert_fail@plt+0x1184>
   1253c:	mov	r0, #0
   12540:	bl	11168 <dcgettext@plt>
   12544:	mov	r2, r0
   12548:	mov	r1, #0
   1254c:	mov	r0, #1
   12550:	bl	11204 <error@plt>
   12554:	strdeq	lr, [r2], -r0
   12558:	andeq	ip, r1, ip, asr #3
   1255c:	strdeq	ip, [r1], -r0
   12560:	andeq	ip, r1, ip, ror #3
   12564:	ldrdeq	ip, [r1], -r8
   12568:			; <UNDEFINED> instruction: 0x0001c1b4
   1256c:	push	{r4, r5, r6, r7, lr}
   12570:	sub	sp, sp, #20
   12574:	mov	r6, r0
   12578:	ldr	r3, [pc, #484]	; 12764 <__assert_fail@plt+0x1380>
   1257c:	ldr	r4, [r3, #140]	; 0x8c
   12580:	ldr	r3, [pc, #480]	; 12768 <__assert_fail@plt+0x1384>
   12584:	ldrb	r3, [r3, #45]	; 0x2d
   12588:	cmp	r3, r0
   1258c:	beq	125f4 <__assert_fail@plt+0x1210>
   12590:	cmp	r0, #9
   12594:	beq	12640 <__assert_fail@plt+0x125c>
   12598:	bl	1127c <__ctype_b_loc@plt>
   1259c:	ldr	r2, [r0]
   125a0:	lsl	r3, r6, #1
   125a4:	ldrh	r3, [r2, r3]
   125a8:	tst	r3, #16384	; 0x4000
   125ac:	bne	12738 <__assert_fail@plt+0x1354>
   125b0:	ldr	r3, [pc, #428]	; 12764 <__assert_fail@plt+0x1380>
   125b4:	ldrb	r3, [r3, #145]	; 0x91
   125b8:	cmp	r3, #0
   125bc:	bne	12688 <__assert_fail@plt+0x12a4>
   125c0:	ldr	r3, [pc, #412]	; 12764 <__assert_fail@plt+0x1380>
   125c4:	ldrb	r3, [r3, #146]	; 0x92
   125c8:	cmp	r3, #0
   125cc:	beq	12710 <__assert_fail@plt+0x132c>
   125d0:	tst	r6, #128	; 0x80
   125d4:	bne	126cc <__assert_fail@plt+0x12e8>
   125d8:	mov	r3, #94	; 0x5e
   125dc:	strb	r3, [r4]
   125e0:	eor	r6, r6, #64	; 0x40
   125e4:	strb	r6, [r4, #1]
   125e8:	mov	r0, #2
   125ec:	mov	r1, r0
   125f0:	b	12744 <__assert_fail@plt+0x1360>
   125f4:	ldr	r3, [pc, #364]	; 12768 <__assert_fail@plt+0x1384>
   125f8:	ldr	r5, [r3, #48]	; 0x30
   125fc:	ldr	r7, [pc, #352]	; 12764 <__assert_fail@plt+0x1380>
   12600:	mov	r1, r5
   12604:	ldr	r0, [r7, #64]	; 0x40
   12608:	bl	1bc54 <__assert_fail@plt+0xa870>
   1260c:	sub	r1, r5, r1
   12610:	ldrb	r3, [r7, #144]	; 0x90
   12614:	cmp	r3, #0
   12618:	beq	12648 <__assert_fail@plt+0x1264>
   1261c:	cmp	r1, #0
   12620:	beq	1275c <__assert_fail@plt+0x1378>
   12624:	add	r2, r4, r1
   12628:	mov	r3, #32
   1262c:	strb	r3, [r4], #1
   12630:	cmp	r4, r2
   12634:	bne	1262c <__assert_fail@plt+0x1248>
   12638:	mov	r0, r1
   1263c:	b	12650 <__assert_fail@plt+0x126c>
   12640:	mov	r5, #8
   12644:	b	125fc <__assert_fail@plt+0x1218>
   12648:	strb	r6, [r4]
   1264c:	mov	r0, #1
   12650:	cmp	r1, #0
   12654:	bge	12744 <__assert_fail@plt+0x1360>
   12658:	ldr	r3, [pc, #260]	; 12764 <__assert_fail@plt+0x1380>
   1265c:	ldr	r3, [r3, #64]	; 0x40
   12660:	cmp	r3, #0
   12664:	moveq	r0, r3
   12668:	beq	12754 <__assert_fail@plt+0x1370>
   1266c:	rsb	r2, r1, #0
   12670:	cmp	r3, r2
   12674:	bgt	12744 <__assert_fail@plt+0x1360>
   12678:	mov	r2, #0
   1267c:	ldr	r3, [pc, #224]	; 12764 <__assert_fail@plt+0x1380>
   12680:	str	r2, [r3, #64]	; 0x40
   12684:	b	12754 <__assert_fail@plt+0x1370>
   12688:	mov	r3, #92	; 0x5c
   1268c:	strb	r3, [r4]
   12690:	str	r6, [sp]
   12694:	ldr	r3, [pc, #208]	; 1276c <__assert_fail@plt+0x1388>
   12698:	mov	r2, #4
   1269c:	mov	r1, #1
   126a0:	add	r0, sp, #12
   126a4:	bl	112d0 <__sprintf_chk@plt>
   126a8:	ldrb	r3, [sp, #12]
   126ac:	strb	r3, [r4, #1]
   126b0:	ldrb	r3, [sp, #13]
   126b4:	strb	r3, [r4, #2]
   126b8:	ldrb	r3, [sp, #14]
   126bc:	strb	r3, [r4, #3]
   126c0:	mov	r0, #4
   126c4:	mov	r1, r0
   126c8:	b	12744 <__assert_fail@plt+0x1360>
   126cc:	mov	r3, #92	; 0x5c
   126d0:	strb	r3, [r4]
   126d4:	str	r6, [sp]
   126d8:	ldr	r3, [pc, #140]	; 1276c <__assert_fail@plt+0x1388>
   126dc:	mov	r2, #4
   126e0:	mov	r1, #1
   126e4:	add	r0, sp, #12
   126e8:	bl	112d0 <__sprintf_chk@plt>
   126ec:	ldrb	r3, [sp, #12]
   126f0:	strb	r3, [r4, #1]
   126f4:	ldrb	r3, [sp, #13]
   126f8:	strb	r3, [r4, #2]
   126fc:	ldrb	r3, [sp, #14]
   12700:	strb	r3, [r4, #3]
   12704:	mov	r0, #4
   12708:	mov	r1, r0
   1270c:	b	12744 <__assert_fail@plt+0x1360>
   12710:	cmp	r6, #8
   12714:	strbne	r6, [r4]
   12718:	movne	r0, #1
   1271c:	movne	r1, #0
   12720:	bne	12744 <__assert_fail@plt+0x1360>
   12724:	mov	r3, #8
   12728:	strb	r3, [r4]
   1272c:	mov	r0, #1
   12730:	mvn	r1, #0
   12734:	b	12658 <__assert_fail@plt+0x1274>
   12738:	strb	r6, [r4]
   1273c:	mov	r0, #1
   12740:	mov	r1, r0
   12744:	ldr	r2, [pc, #24]	; 12764 <__assert_fail@plt+0x1380>
   12748:	ldr	r3, [r2, #64]	; 0x40
   1274c:	add	r1, r3, r1
   12750:	str	r1, [r2, #64]	; 0x40
   12754:	add	sp, sp, #20
   12758:	pop	{r4, r5, r6, r7, pc}
   1275c:	mov	r0, r1
   12760:	b	12744 <__assert_fail@plt+0x1360>
   12764:	strdeq	lr, [r2], -r0
   12768:	andeq	lr, r2, r0, asr #2
   1276c:	strdeq	ip, [r1], -r4
   12770:	push	{r4, lr}
   12774:	mov	r4, r0
   12778:	ldr	r3, [pc, #172]	; 1282c <__assert_fail@plt+0x1448>
   1277c:	ldrb	r3, [r3, #103]	; 0x67
   12780:	cmp	r3, #0
   12784:	beq	127f8 <__assert_fail@plt+0x1414>
   12788:	cmp	r0, #32
   1278c:	beq	127d4 <__assert_fail@plt+0x13f0>
   12790:	ldr	r3, [pc, #148]	; 1282c <__assert_fail@plt+0x1448>
   12794:	ldr	r3, [r3, #104]	; 0x68
   12798:	cmp	r3, #0
   1279c:	ble	127a4 <__assert_fail@plt+0x13c0>
   127a0:	bl	12210 <__assert_fail@plt+0xe2c>
   127a4:	bl	1127c <__ctype_b_loc@plt>
   127a8:	ldr	r2, [r0]
   127ac:	lsl	r3, r4, #1
   127b0:	ldrh	r3, [r2, r3]
   127b4:	tst	r3, #16384	; 0x4000
   127b8:	bne	127e8 <__assert_fail@plt+0x1404>
   127bc:	cmp	r4, #8
   127c0:	ldreq	r2, [pc, #100]	; 1282c <__assert_fail@plt+0x1448>
   127c4:	ldreq	r3, [r2, #56]	; 0x38
   127c8:	subeq	r3, r3, #1
   127cc:	streq	r3, [r2, #56]	; 0x38
   127d0:	b	127f8 <__assert_fail@plt+0x1414>
   127d4:	ldr	r2, [pc, #80]	; 1282c <__assert_fail@plt+0x1448>
   127d8:	ldr	r3, [r2, #104]	; 0x68
   127dc:	add	r3, r3, #1
   127e0:	str	r3, [r2, #104]	; 0x68
   127e4:	pop	{r4, pc}
   127e8:	ldr	r2, [pc, #60]	; 1282c <__assert_fail@plt+0x1448>
   127ec:	ldr	r3, [r2, #56]	; 0x38
   127f0:	add	r3, r3, #1
   127f4:	str	r3, [r2, #56]	; 0x38
   127f8:	ldr	r3, [pc, #48]	; 12830 <__assert_fail@plt+0x144c>
   127fc:	ldr	r0, [r3]
   12800:	ldr	r3, [r0, #20]
   12804:	ldr	r2, [r0, #24]
   12808:	cmp	r3, r2
   1280c:	bcs	12820 <__assert_fail@plt+0x143c>
   12810:	add	r2, r3, #1
   12814:	str	r2, [r0, #20]
   12818:	strb	r4, [r3]
   1281c:	pop	{r4, pc}
   12820:	mov	r1, r4
   12824:	bl	11348 <__overflow@plt>
   12828:	pop	{r4, pc}
   1282c:	strdeq	lr, [r2], -r0
   12830:	andeq	lr, r2, r4, ror #3
   12834:	push	{r4, r5, r6, r7, r8, lr}
   12838:	mov	r7, r0
   1283c:	ldr	r6, [r0, #20]
   12840:	add	r3, r6, #1
   12844:	str	r3, [r0, #20]
   12848:	ldr	r3, [pc, #328]	; 12998 <__assert_fail@plt+0x15b4>
   1284c:	ldr	r5, [r3, #20]
   12850:	ldr	r2, [r3, #148]	; 0x94
   12854:	ldr	r4, [r2, r6, lsl #2]
   12858:	add	r4, r5, r4
   1285c:	add	r2, r2, r6, lsl #2
   12860:	ldr	r2, [r2, #4]
   12864:	add	r5, r5, r2
   12868:	mov	r2, #1
   1286c:	strb	r2, [r3, #152]	; 0x98
   12870:	ldrb	r3, [r3, #136]	; 0x88
   12874:	cmp	r3, #0
   12878:	bne	12910 <__assert_fail@plt+0x152c>
   1287c:	ldr	r3, [r7, #8]
   12880:	cmp	r3, #1
   12884:	beq	12918 <__assert_fail@plt+0x1534>
   12888:	ldr	r3, [pc, #264]	; 12998 <__assert_fail@plt+0x15b4>
   1288c:	ldr	r2, [r3, #32]
   12890:	ldr	r0, [r3, #112]	; 0x70
   12894:	cmp	r2, r0
   12898:	blt	12978 <__assert_fail@plt+0x1594>
   1289c:	ldr	r3, [pc, #244]	; 12998 <__assert_fail@plt+0x15b4>
   128a0:	ldrb	r3, [r3, #116]	; 0x74
   128a4:	cmp	r3, #0
   128a8:	bne	12990 <__assert_fail@plt+0x15ac>
   128ac:	cmp	r4, r5
   128b0:	beq	128c4 <__assert_fail@plt+0x14e0>
   128b4:	ldrb	r0, [r4], #1
   128b8:	bl	12770 <__assert_fail@plt+0x138c>
   128bc:	cmp	r5, r4
   128c0:	bne	128b4 <__assert_fail@plt+0x14d0>
   128c4:	ldr	r3, [pc, #204]	; 12998 <__assert_fail@plt+0x15b4>
   128c8:	ldr	r3, [r3, #104]	; 0x68
   128cc:	cmp	r3, #0
   128d0:	bne	12908 <__assert_fail@plt+0x1524>
   128d4:	ldr	r2, [r7, #32]
   128d8:	ldr	r1, [pc, #184]	; 12998 <__assert_fail@plt+0x15b4>
   128dc:	ldr	r3, [r1, #156]	; 0x9c
   128e0:	ldr	r3, [r3, r6, lsl #2]
   128e4:	add	r3, r2, r3
   128e8:	str	r3, [r1, #56]	; 0x38
   128ec:	ldr	r0, [r1, #32]
   128f0:	sub	r2, r2, r0
   128f4:	ldr	r1, [r1, #120]	; 0x78
   128f8:	cmp	r2, r1
   128fc:	subeq	r3, r3, r0
   12900:	ldreq	r2, [pc, #144]	; 12998 <__assert_fail@plt+0x15b4>
   12904:	streq	r3, [r2, #56]	; 0x38
   12908:	mov	r0, #1
   1290c:	pop	{r4, r5, r6, r7, r8, pc}
   12910:	bl	12468 <__assert_fail@plt+0x1084>
   12914:	b	1287c <__assert_fail@plt+0x1498>
   12918:	ldr	r3, [pc, #120]	; 12998 <__assert_fail@plt+0x15b4>
   1291c:	ldr	ip, [r3]
   12920:	ldr	r3, [pc, #116]	; 1299c <__assert_fail@plt+0x15b8>
   12924:	ldr	r1, [r3]
   12928:	cmp	r1, #0
   1292c:	ble	12950 <__assert_fail@plt+0x156c>
   12930:	mov	r2, ip
   12934:	mov	r3, #1
   12938:	mov	r0, #2
   1293c:	str	r0, [r2, #8]
   12940:	add	r3, r3, #1
   12944:	add	r2, r2, #40	; 0x28
   12948:	cmp	r3, r1
   1294c:	ble	1293c <__assert_fail@plt+0x1558>
   12950:	ldr	r3, [ip, #28]
   12954:	cmp	r3, #0
   12958:	bgt	12888 <__assert_fail@plt+0x14a4>
   1295c:	ldr	r3, [pc, #56]	; 1299c <__assert_fail@plt+0x15b8>
   12960:	ldrb	r3, [r3, #52]	; 0x34
   12964:	cmp	r3, #0
   12968:	moveq	r2, #0
   1296c:	ldreq	r3, [pc, #36]	; 12998 <__assert_fail@plt+0x15b4>
   12970:	strbeq	r2, [r3, #152]	; 0x98
   12974:	b	12908 <__assert_fail@plt+0x1524>
   12978:	sub	r0, r0, r2
   1297c:	bl	12190 <__assert_fail@plt+0xdac>
   12980:	mov	r2, #0
   12984:	ldr	r3, [pc, #12]	; 12998 <__assert_fail@plt+0x15b4>
   12988:	str	r2, [r3, #112]	; 0x70
   1298c:	b	1289c <__assert_fail@plt+0x14b8>
   12990:	bl	122ec <__assert_fail@plt+0xf08>
   12994:	b	128ac <__assert_fail@plt+0x14c8>
   12998:	strdeq	lr, [r2], -r0
   1299c:	andeq	lr, r2, r0, asr #2
   129a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   129a4:	mov	r4, r0
   129a8:	ldr	r0, [r0]
   129ac:	ldr	r3, [r0, #4]
   129b0:	ldr	r2, [r0, #8]
   129b4:	cmp	r3, r2
   129b8:	bcs	12bec <__assert_fail@plt+0x1808>
   129bc:	add	r2, r3, #1
   129c0:	str	r2, [r0, #4]
   129c4:	ldrb	r6, [r3]
   129c8:	ldr	r3, [pc, #1052]	; 12dec <__assert_fail@plt+0x1a08>
   129cc:	ldr	r7, [r3, #64]	; 0x40
   129d0:	cmp	r6, #12
   129d4:	beq	12bf8 <__assert_fail@plt+0x1814>
   129d8:	mov	r3, #0
   129dc:	strb	r3, [r4, #37]	; 0x25
   129e0:	cmp	r6, #10
   129e4:	beq	12a04 <__assert_fail@plt+0x1620>
   129e8:	cmp	r6, #12
   129ec:	beq	12c68 <__assert_fail@plt+0x1884>
   129f0:	cmn	r6, #1
   129f4:	beq	12d00 <__assert_fail@plt+0x191c>
   129f8:	uxtb	r0, r6
   129fc:	bl	1256c <__assert_fail@plt+0x1188>
   12a00:	mov	r5, r0
   12a04:	ldr	r3, [pc, #992]	; 12dec <__assert_fail@plt+0x1a08>
   12a08:	ldrb	r3, [r3, #60]	; 0x3c
   12a0c:	cmp	r3, #0
   12a10:	beq	12a28 <__assert_fail@plt+0x1644>
   12a14:	ldr	r3, [pc, #976]	; 12dec <__assert_fail@plt+0x1a08>
   12a18:	ldr	r2, [r3, #64]	; 0x40
   12a1c:	ldr	r3, [r3, #164]	; 0xa4
   12a20:	cmp	r2, r3
   12a24:	bgt	12d10 <__assert_fail@plt+0x192c>
   12a28:	ldr	r2, [r4, #16]
   12a2c:	ldr	r3, [pc, #956]	; 12df0 <__assert_fail@plt+0x1a0c>
   12a30:	cmp	r2, r3
   12a34:	beq	12b20 <__assert_fail@plt+0x173c>
   12a38:	ldr	r3, [pc, #940]	; 12dec <__assert_fail@plt+0x1a08>
   12a3c:	mov	r2, #1
   12a40:	strb	r2, [r3, #152]	; 0x98
   12a44:	ldrb	r3, [r3, #136]	; 0x88
   12a48:	cmp	r3, #0
   12a4c:	beq	12a60 <__assert_fail@plt+0x167c>
   12a50:	ldr	r3, [pc, #924]	; 12df4 <__assert_fail@plt+0x1a10>
   12a54:	ldrb	r3, [r3, #4]
   12a58:	cmp	r3, #0
   12a5c:	beq	12d20 <__assert_fail@plt+0x193c>
   12a60:	ldr	r3, [pc, #900]	; 12dec <__assert_fail@plt+0x1a08>
   12a64:	ldrb	r3, [r3, #4]
   12a68:	cmp	r3, #0
   12a6c:	beq	12afc <__assert_fail@plt+0x1718>
   12a70:	ldr	r3, [pc, #884]	; 12dec <__assert_fail@plt+0x1a08>
   12a74:	ldrb	r3, [r3, #168]	; 0xa8
   12a78:	cmp	r3, #0
   12a7c:	beq	12afc <__assert_fail@plt+0x1718>
   12a80:	ldr	r3, [pc, #868]	; 12dec <__assert_fail@plt+0x1a08>
   12a84:	ldr	sl, [r3, #108]	; 0x6c
   12a88:	mov	r2, #0
   12a8c:	str	r2, [r3, #108]	; 0x6c
   12a90:	ldr	r7, [r3]
   12a94:	cmp	sl, r2
   12a98:	ble	12ac8 <__assert_fail@plt+0x16e4>
   12a9c:	mov	r8, #1
   12aa0:	mov	r9, r3
   12aa4:	mov	r0, r7
   12aa8:	bl	123fc <__assert_fail@plt+0x1018>
   12aac:	ldr	r3, [r9, #108]	; 0x6c
   12ab0:	add	r3, r3, #1
   12ab4:	str	r3, [r9, #108]	; 0x6c
   12ab8:	add	r8, r8, #1
   12abc:	add	r7, r7, #40	; 0x28
   12ac0:	cmp	sl, r8
   12ac4:	bge	12aa4 <__assert_fail@plt+0x16c0>
   12ac8:	ldr	r3, [pc, #796]	; 12dec <__assert_fail@plt+0x1a08>
   12acc:	ldr	r2, [r4, #32]
   12ad0:	str	r2, [r3, #112]	; 0x70
   12ad4:	ldrb	r3, [r3, #60]	; 0x3c
   12ad8:	cmp	r3, #0
   12adc:	ldrne	r3, [pc, #776]	; 12dec <__assert_fail@plt+0x1a08>
   12ae0:	ldrne	r2, [r3, #164]	; 0xa4
   12ae4:	moveq	r2, #0
   12ae8:	ldreq	r3, [pc, #764]	; 12dec <__assert_fail@plt+0x1a08>
   12aec:	str	r2, [r3, #104]	; 0x68
   12af0:	mov	r2, #0
   12af4:	ldr	r3, [pc, #752]	; 12dec <__assert_fail@plt+0x1a08>
   12af8:	strb	r2, [r3, #168]	; 0xa8
   12afc:	ldr	r3, [pc, #744]	; 12dec <__assert_fail@plt+0x1a08>
   12b00:	ldr	r2, [r3, #32]
   12b04:	ldr	r0, [r3, #112]	; 0x70
   12b08:	cmp	r2, r0
   12b0c:	blt	12d28 <__assert_fail@plt+0x1944>
   12b10:	ldr	r3, [pc, #724]	; 12dec <__assert_fail@plt+0x1a08>
   12b14:	ldrb	r3, [r3, #116]	; 0x74
   12b18:	cmp	r3, #0
   12b1c:	bne	12d40 <__assert_fail@plt+0x195c>
   12b20:	ldrb	r3, [r4, #36]	; 0x24
   12b24:	cmp	r3, #0
   12b28:	bne	12d48 <__assert_fail@plt+0x1964>
   12b2c:	mov	r2, #0
   12b30:	ldr	r3, [pc, #692]	; 12dec <__assert_fail@plt+0x1a08>
   12b34:	strb	r2, [r3, #169]	; 0xa9
   12b38:	cmp	r6, #10
   12b3c:	beq	12ddc <__assert_fail@plt+0x19f8>
   12b40:	ldr	r6, [r3, #140]	; 0x8c
   12b44:	cmp	r5, r2
   12b48:	beq	12b60 <__assert_fail@plt+0x177c>
   12b4c:	ldr	r3, [r4, #16]
   12b50:	ldrb	r0, [r6], #1
   12b54:	blx	r3
   12b58:	subs	r5, r5, #1
   12b5c:	bne	12b4c <__assert_fail@plt+0x1768>
   12b60:	ldr	r7, [pc, #644]	; 12dec <__assert_fail@plt+0x1a08>
   12b64:	ldr	r0, [r4]
   12b68:	ldr	r3, [r0, #4]
   12b6c:	ldr	r2, [r0, #8]
   12b70:	cmp	r3, r2
   12b74:	bcs	12d54 <__assert_fail@plt+0x1970>
   12b78:	add	r2, r3, #1
   12b7c:	str	r2, [r0, #4]
   12b80:	ldrb	r0, [r3]
   12b84:	cmp	r0, #10
   12b88:	beq	12de4 <__assert_fail@plt+0x1a00>
   12b8c:	cmp	r0, #12
   12b90:	beq	12d5c <__assert_fail@plt+0x1978>
   12b94:	cmn	r0, #1
   12b98:	beq	12dbc <__assert_fail@plt+0x19d8>
   12b9c:	ldr	r5, [r7, #64]	; 0x40
   12ba0:	uxtb	r0, r0
   12ba4:	bl	1256c <__assert_fail@plt+0x1188>
   12ba8:	ldrb	r3, [r7, #60]	; 0x3c
   12bac:	cmp	r3, #0
   12bb0:	beq	12bc4 <__assert_fail@plt+0x17e0>
   12bb4:	ldr	r2, [r7, #64]	; 0x40
   12bb8:	ldr	r3, [r7, #164]	; 0xa4
   12bbc:	cmp	r2, r3
   12bc0:	bgt	12dcc <__assert_fail@plt+0x19e8>
   12bc4:	ldr	r6, [r7, #140]	; 0x8c
   12bc8:	cmp	r0, #0
   12bcc:	beq	12b64 <__assert_fail@plt+0x1780>
   12bd0:	mov	r5, r0
   12bd4:	ldr	r3, [r4, #16]
   12bd8:	ldrb	r0, [r6], #1
   12bdc:	blx	r3
   12be0:	subs	r5, r5, #1
   12be4:	bne	12bd4 <__assert_fail@plt+0x17f0>
   12be8:	b	12b64 <__assert_fail@plt+0x1780>
   12bec:	bl	1133c <__uflow@plt>
   12bf0:	mov	r6, r0
   12bf4:	b	129c8 <__assert_fail@plt+0x15e4>
   12bf8:	ldrb	r3, [r4, #37]	; 0x25
   12bfc:	cmp	r3, #0
   12c00:	beq	12c68 <__assert_fail@plt+0x1884>
   12c04:	ldr	r0, [r4]
   12c08:	ldr	r3, [r0, #4]
   12c0c:	ldr	r2, [r0, #8]
   12c10:	cmp	r3, r2
   12c14:	bcs	12c50 <__assert_fail@plt+0x186c>
   12c18:	add	r2, r3, #1
   12c1c:	str	r2, [r0, #4]
   12c20:	ldrb	r6, [r3]
   12c24:	cmp	r6, #10
   12c28:	bne	129d8 <__assert_fail@plt+0x15f4>
   12c2c:	ldr	r0, [r4]
   12c30:	ldr	r3, [r0, #4]
   12c34:	ldr	r2, [r0, #8]
   12c38:	cmp	r3, r2
   12c3c:	bcs	12c5c <__assert_fail@plt+0x1878>
   12c40:	add	r2, r3, #1
   12c44:	str	r2, [r0, #4]
   12c48:	ldrb	r6, [r3]
   12c4c:	b	129d8 <__assert_fail@plt+0x15f4>
   12c50:	bl	1133c <__uflow@plt>
   12c54:	mov	r6, r0
   12c58:	b	12c24 <__assert_fail@plt+0x1840>
   12c5c:	bl	1133c <__uflow@plt>
   12c60:	mov	r6, r0
   12c64:	b	129d8 <__assert_fail@plt+0x15f4>
   12c68:	ldr	r0, [r4]
   12c6c:	ldr	r3, [r0, #4]
   12c70:	ldr	r2, [r0, #8]
   12c74:	cmp	r3, r2
   12c78:	bcs	12ce8 <__assert_fail@plt+0x1904>
   12c7c:	add	r2, r3, #1
   12c80:	str	r2, [r0, #4]
   12c84:	ldrb	r0, [r3]
   12c88:	cmp	r0, #10
   12c8c:	beq	12c98 <__assert_fail@plt+0x18b4>
   12c90:	ldr	r1, [r4]
   12c94:	bl	112b8 <ungetc@plt>
   12c98:	ldr	r3, [pc, #332]	; 12dec <__assert_fail@plt+0x1a08>
   12c9c:	mov	r2, #1
   12ca0:	strb	r2, [r3, #160]	; 0xa0
   12ca4:	ldrb	r3, [r3, #136]	; 0x88
   12ca8:	cmp	r3, #0
   12cac:	beq	12cc0 <__assert_fail@plt+0x18dc>
   12cb0:	ldr	r3, [pc, #316]	; 12df4 <__assert_fail@plt+0x1a10>
   12cb4:	ldrb	r3, [r3, #4]
   12cb8:	cmp	r3, #0
   12cbc:	beq	12cf0 <__assert_fail@plt+0x190c>
   12cc0:	ldr	r3, [pc, #292]	; 12dec <__assert_fail@plt+0x1a08>
   12cc4:	ldrb	r3, [r3, #101]	; 0x65
   12cc8:	cmp	r3, #0
   12ccc:	movne	r2, #1
   12cd0:	ldrne	r3, [pc, #276]	; 12dec <__assert_fail@plt+0x1a08>
   12cd4:	strbne	r2, [r3, #102]	; 0x66
   12cd8:	mov	r0, r4
   12cdc:	bl	1159c <__assert_fail@plt+0x1b8>
   12ce0:	mov	r0, #1
   12ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12ce8:	bl	1133c <__uflow@plt>
   12cec:	b	12c88 <__assert_fail@plt+0x18a4>
   12cf0:	ldr	r3, [pc, #244]	; 12dec <__assert_fail@plt+0x1a08>
   12cf4:	strb	r2, [r3, #152]	; 0x98
   12cf8:	bl	12468 <__assert_fail@plt+0x1084>
   12cfc:	b	12cd8 <__assert_fail@plt+0x18f4>
   12d00:	mov	r0, r4
   12d04:	bl	11d44 <__assert_fail@plt+0x960>
   12d08:	mov	r0, #1
   12d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d10:	ldr	r3, [pc, #212]	; 12dec <__assert_fail@plt+0x1a08>
   12d14:	str	r7, [r3, #64]	; 0x40
   12d18:	mov	r0, #0
   12d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d20:	bl	12468 <__assert_fail@plt+0x1084>
   12d24:	b	12a60 <__assert_fail@plt+0x167c>
   12d28:	sub	r0, r0, r2
   12d2c:	bl	12190 <__assert_fail@plt+0xdac>
   12d30:	mov	r2, #0
   12d34:	ldr	r3, [pc, #176]	; 12dec <__assert_fail@plt+0x1a08>
   12d38:	str	r2, [r3, #112]	; 0x70
   12d3c:	b	12b10 <__assert_fail@plt+0x172c>
   12d40:	bl	122ec <__assert_fail@plt+0xf08>
   12d44:	b	12b20 <__assert_fail@plt+0x173c>
   12d48:	mov	r0, r4
   12d4c:	bl	11a2c <__assert_fail@plt+0x648>
   12d50:	b	12b2c <__assert_fail@plt+0x1748>
   12d54:	bl	1133c <__uflow@plt>
   12d58:	b	12b84 <__assert_fail@plt+0x17a0>
   12d5c:	ldr	r0, [r4]
   12d60:	ldr	r3, [r0, #4]
   12d64:	ldr	r2, [r0, #8]
   12d68:	cmp	r3, r2
   12d6c:	bcs	12db4 <__assert_fail@plt+0x19d0>
   12d70:	add	r2, r3, #1
   12d74:	str	r2, [r0, #4]
   12d78:	ldrb	r0, [r3]
   12d7c:	cmp	r0, #10
   12d80:	beq	12d8c <__assert_fail@plt+0x19a8>
   12d84:	ldr	r1, [r4]
   12d88:	bl	112b8 <ungetc@plt>
   12d8c:	ldr	r3, [pc, #88]	; 12dec <__assert_fail@plt+0x1a08>
   12d90:	ldrb	r3, [r3, #101]	; 0x65
   12d94:	cmp	r3, #0
   12d98:	movne	r2, #1
   12d9c:	ldrne	r3, [pc, #72]	; 12dec <__assert_fail@plt+0x1a08>
   12da0:	strbne	r2, [r3, #102]	; 0x66
   12da4:	mov	r0, r4
   12da8:	bl	1159c <__assert_fail@plt+0x1b8>
   12dac:	mov	r0, #1
   12db0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12db4:	bl	1133c <__uflow@plt>
   12db8:	b	12d7c <__assert_fail@plt+0x1998>
   12dbc:	mov	r0, r4
   12dc0:	bl	11d44 <__assert_fail@plt+0x960>
   12dc4:	mov	r0, #1
   12dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12dcc:	ldr	r3, [pc, #24]	; 12dec <__assert_fail@plt+0x1a08>
   12dd0:	str	r5, [r3, #64]	; 0x40
   12dd4:	mov	r0, #0
   12dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12ddc:	mov	r0, #1
   12de0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12de4:	mov	r0, #1
   12de8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12dec:	strdeq	lr, [r2], -r0
   12df0:			; <UNDEFINED> instruction: 0x000116b0
   12df4:	andeq	lr, r2, r0, asr #2
   12df8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dfc:	sub	sp, sp, #28
   12e00:	mov	r5, r0
   12e04:	mov	r6, r1
   12e08:	ldr	r3, [pc, #3920]	; 13d60 <__assert_fail@plt+0x297c>
   12e0c:	ldr	r3, [r3, #56]	; 0x38
   12e10:	sub	r2, r3, #10
   12e14:	ldr	r1, [pc, #3960]	; 13d94 <__assert_fail@plt+0x29b0>
   12e18:	str	r2, [r1, #172]	; 0xac
   12e1c:	cmp	r2, #0
   12e20:	ble	12f88 <__assert_fail@plt+0x1ba4>
   12e24:	ldr	r2, [pc, #3892]	; 13d60 <__assert_fail@plt+0x297c>
   12e28:	ldrb	r2, [r2, #52]	; 0x34
   12e2c:	cmp	r2, #0
   12e30:	beq	12fa0 <__assert_fail@plt+0x1bbc>
   12e34:	ldr	r3, [pc, #3928]	; 13d94 <__assert_fail@plt+0x29b0>
   12e38:	ldrb	r3, [r3, #176]	; 0xb0
   12e3c:	cmp	r3, #0
   12e40:	ldrne	r2, [pc, #3916]	; 13d94 <__assert_fail@plt+0x29b0>
   12e44:	ldrne	r3, [r2, #172]	; 0xac
   12e48:	addne	r3, r3, r3, lsr #31
   12e4c:	asrne	r3, r3, #1
   12e50:	strne	r3, [r2, #172]	; 0xac
   12e54:	cmp	r5, #0
   12e58:	bne	12fac <__assert_fail@plt+0x1bc8>
   12e5c:	mov	r2, #0
   12e60:	ldr	r3, [pc, #3884]	; 13d94 <__assert_fail@plt+0x29b0>
   12e64:	strb	r2, [r3, #4]
   12e68:	ldr	r3, [pc, #3824]	; 13d60 <__assert_fail@plt+0x297c>
   12e6c:	ldrb	r3, [r3, #4]
   12e70:	cmp	r3, #0
   12e74:	movne	r2, #1
   12e78:	ldrne	r3, [pc, #3860]	; 13d94 <__assert_fail@plt+0x29b0>
   12e7c:	strbne	r2, [r3, #177]	; 0xb1
   12e80:	ldr	r3, [pc, #3800]	; 13d60 <__assert_fail@plt+0x297c>
   12e84:	ldr	r3, [r3]
   12e88:	cmp	r3, #1
   12e8c:	ble	1301c <__assert_fail@plt+0x1c38>
   12e90:	ldr	r3, [pc, #3836]	; 13d94 <__assert_fail@plt+0x29b0>
   12e94:	ldrb	r3, [r3, #116]	; 0x74
   12e98:	cmp	r3, #0
   12e9c:	bne	12fc4 <__assert_fail@plt+0x1be0>
   12ea0:	ldr	r3, [pc, #3820]	; 13d94 <__assert_fail@plt+0x29b0>
   12ea4:	ldrb	r3, [r3, #178]	; 0xb2
   12ea8:	cmp	r3, #0
   12eac:	ldrne	r2, [pc, #3760]	; 13d64 <__assert_fail@plt+0x2980>
   12eb0:	ldreq	r2, [pc, #3760]	; 13d68 <__assert_fail@plt+0x2984>
   12eb4:	ldr	r3, [pc, #3748]	; 13d60 <__assert_fail@plt+0x297c>
   12eb8:	str	r2, [r3, #16]
   12ebc:	ldr	r3, [pc, #3792]	; 13d94 <__assert_fail@plt+0x29b0>
   12ec0:	mov	r2, #1
   12ec4:	str	r2, [r3, #32]
   12ec8:	strb	r2, [r3, #116]	; 0x74
   12ecc:	ldr	r3, [pc, #3776]	; 13d94 <__assert_fail@plt+0x29b0>
   12ed0:	mov	r2, #1
   12ed4:	strb	r2, [r3, #60]	; 0x3c
   12ed8:	ldr	r3, [r3, #32]
   12edc:	cmp	r3, r2
   12ee0:	beq	13004 <__assert_fail@plt+0x1c20>
   12ee4:	mov	r2, #1
   12ee8:	ldr	r3, [pc, #3748]	; 13d94 <__assert_fail@plt+0x29b0>
   12eec:	strb	r2, [r3, #144]	; 0x90
   12ef0:	mov	r2, #1
   12ef4:	ldr	r3, [pc, #3736]	; 13d94 <__assert_fail@plt+0x29b0>
   12ef8:	strb	r2, [r3, #103]	; 0x67
   12efc:	ldr	r3, [pc, #3728]	; 13d94 <__assert_fail@plt+0x29b0>
   12f00:	ldrb	r3, [r3, #178]	; 0xb2
   12f04:	cmp	r3, #0
   12f08:	movne	r2, #0
   12f0c:	ldrne	r3, [pc, #3712]	; 13d94 <__assert_fail@plt+0x29b0>
   12f10:	strbne	r2, [r3, #60]	; 0x3c
   12f14:	ldr	r3, [pc, #3704]	; 13d94 <__assert_fail@plt+0x29b0>
   12f18:	ldrb	r9, [r3, #179]	; 0xb3
   12f1c:	cmp	r9, #0
   12f20:	beq	1302c <__assert_fail@plt+0x1c48>
   12f24:	ldr	r3, [pc, #3636]	; 13d60 <__assert_fail@plt+0x297c>
   12f28:	ldr	r2, [r3, #60]	; 0x3c
   12f2c:	str	r2, [r3, #40]	; 0x28
   12f30:	ldrb	r3, [r3, #24]
   12f34:	cmp	r3, #9
   12f38:	ldr	r3, [pc, #3616]	; 13d60 <__assert_fail@plt+0x297c>
   12f3c:	ldreq	r1, [r3, #20]
   12f40:	asreq	r3, r1, #31
   12f44:	lsreq	r2, r3, #29
   12f48:	addeq	r3, r1, r2
   12f4c:	andeq	r3, r3, #7
   12f50:	subeq	r3, r3, r2
   12f54:	rsbeq	r3, r3, #8
   12f58:	addeq	r3, r3, r1
   12f5c:	ldrne	r3, [r3, #20]
   12f60:	addne	r3, r3, #1
   12f64:	ldr	r2, [pc, #3624]	; 13d94 <__assert_fail@plt+0x29b0>
   12f68:	str	r3, [r2, #52]	; 0x34
   12f6c:	ldr	r3, [pc, #3616]	; 13d94 <__assert_fail@plt+0x29b0>
   12f70:	ldrb	r3, [r3, #4]
   12f74:	cmp	r3, #0
   12f78:	moveq	r8, #0
   12f7c:	ldrne	r3, [pc, #3600]	; 13d94 <__assert_fail@plt+0x29b0>
   12f80:	ldrne	r8, [r3, #52]	; 0x34
   12f84:	b	13030 <__assert_fail@plt+0x1c4c>
   12f88:	mov	r1, #0
   12f8c:	ldr	r2, [pc, #3532]	; 13d60 <__assert_fail@plt+0x297c>
   12f90:	strb	r1, [r2, #52]	; 0x34
   12f94:	mov	r1, #1
   12f98:	ldr	r2, [pc, #3572]	; 13d94 <__assert_fail@plt+0x29b0>
   12f9c:	strb	r1, [r2, #101]	; 0x65
   12fa0:	ldr	r2, [pc, #3564]	; 13d94 <__assert_fail@plt+0x29b0>
   12fa4:	str	r3, [r2, #172]	; 0xac
   12fa8:	b	12e34 <__assert_fail@plt+0x1a50>
   12fac:	ldr	r3, [pc, #3552]	; 13d94 <__assert_fail@plt+0x29b0>
   12fb0:	ldrb	r3, [r3, #4]
   12fb4:	cmp	r3, #0
   12fb8:	ldrne	r3, [pc, #3488]	; 13d60 <__assert_fail@plt+0x297c>
   12fbc:	strne	r5, [r3]
   12fc0:	b	12e68 <__assert_fail@plt+0x1a84>
   12fc4:	ldr	r3, [pc, #3528]	; 13d94 <__assert_fail@plt+0x29b0>
   12fc8:	ldrb	r3, [r3, #178]	; 0xb2
   12fcc:	cmp	r3, #0
   12fd0:	bne	12ecc <__assert_fail@plt+0x1ae8>
   12fd4:	ldr	r3, [pc, #3512]	; 13d94 <__assert_fail@plt+0x29b0>
   12fd8:	ldr	r3, [r3, #32]
   12fdc:	cmp	r3, #1
   12fe0:	bne	12ecc <__assert_fail@plt+0x1ae8>
   12fe4:	ldr	r3, [pc, #3444]	; 13d60 <__assert_fail@plt+0x297c>
   12fe8:	ldr	r3, [r3, #16]
   12fec:	ldrb	r3, [r3]
   12ff0:	cmp	r3, #9
   12ff4:	ldreq	r2, [pc, #3436]	; 13d68 <__assert_fail@plt+0x2984>
   12ff8:	ldreq	r3, [pc, #3424]	; 13d60 <__assert_fail@plt+0x297c>
   12ffc:	streq	r2, [r3, #16]
   13000:	b	12ecc <__assert_fail@plt+0x1ae8>
   13004:	ldr	r3, [pc, #3412]	; 13d60 <__assert_fail@plt+0x297c>
   13008:	ldr	r3, [r3, #16]
   1300c:	ldrb	r3, [r3]
   13010:	cmp	r3, #9
   13014:	bne	12ee4 <__assert_fail@plt+0x1b00>
   13018:	b	12ef0 <__assert_fail@plt+0x1b0c>
   1301c:	mov	r2, #0
   13020:	ldr	r3, [pc, #3384]	; 13d60 <__assert_fail@plt+0x297c>
   13024:	strb	r2, [r3, #4]
   13028:	b	12efc <__assert_fail@plt+0x1b18>
   1302c:	mov	r8, #0
   13030:	ldr	r3, [pc, #3420]	; 13d94 <__assert_fail@plt+0x29b0>
   13034:	ldr	r7, [r3, #32]
   13038:	cmp	r7, #0
   1303c:	blt	13170 <__assert_fail@plt+0x1d8c>
   13040:	cmp	r7, #0
   13044:	beq	1320c <__assert_fail@plt+0x1e28>
   13048:	ldr	r3, [pc, #3344]	; 13d60 <__assert_fail@plt+0x297c>
   1304c:	ldr	r3, [r3]
   13050:	subs	r4, r3, #1
   13054:	bmi	131d4 <__assert_fail@plt+0x1df0>
   13058:	mov	r1, r7
   1305c:	mvn	r0, #-2147483648	; 0x80000000
   13060:	bl	1ba34 <__assert_fail@plt+0xa650>
   13064:	cmp	r4, r0
   13068:	movle	r0, #0
   1306c:	movgt	r0, #1
   13070:	cmp	r0, #0
   13074:	mvnne	r7, #-2147483648	; 0x80000000
   13078:	beq	1320c <__assert_fail@plt+0x1e28>
   1307c:	ldr	r3, [pc, #3292]	; 13d60 <__assert_fail@plt+0x297c>
   13080:	ldr	r3, [r3, #32]
   13084:	sub	r8, r3, r8
   13088:	mvn	r3, r8
   1308c:	lsr	r3, r3, #31
   13090:	cmp	r3, r7, lsr #31
   13094:	beq	13220 <__assert_fail@plt+0x1e3c>
   13098:	sub	r0, r8, r7
   1309c:	ldr	r3, [pc, #3260]	; 13d60 <__assert_fail@plt+0x297c>
   130a0:	ldr	r1, [r3]
   130a4:	bl	1ba34 <__assert_fail@plt+0xa650>
   130a8:	ldr	r3, [pc, #3300]	; 13d94 <__assert_fail@plt+0x29b0>
   130ac:	str	r0, [r3, #164]	; 0xa4
   130b0:	cmp	r0, #0
   130b4:	ble	1325c <__assert_fail@plt+0x1e78>
   130b8:	cmp	r9, #0
   130bc:	bne	1327c <__assert_fail@plt+0x1e98>
   130c0:	ldr	r7, [pc, #3276]	; 13d94 <__assert_fail@plt+0x29b0>
   130c4:	ldr	r0, [r7, #140]	; 0x8c
   130c8:	bl	15598 <__assert_fail@plt+0x41b4>
   130cc:	ldr	r4, [pc, #3212]	; 13d60 <__assert_fail@plt+0x297c>
   130d0:	ldr	r0, [r4, #48]	; 0x30
   130d4:	cmp	r0, #8
   130d8:	movlt	r0, #8
   130dc:	bl	19a98 <__assert_fail@plt+0x86b4>
   130e0:	str	r0, [r7, #140]	; 0x8c
   130e4:	mov	r3, #0
   130e8:	str	r3, [r7, #40]	; 0x28
   130ec:	ldr	r0, [r7]
   130f0:	bl	15598 <__assert_fail@plt+0x41b4>
   130f4:	mov	r1, #40	; 0x28
   130f8:	ldr	r0, [r4]
   130fc:	bl	19b90 <__assert_fail@plt+0x87ac>
   13100:	mov	r4, r0
   13104:	str	r0, [r7]
   13108:	ldrb	r3, [r7, #4]
   1310c:	cmp	r3, #0
   13110:	beq	132a8 <__assert_fail@plt+0x1ec4>
   13114:	cmp	r5, #0
   13118:	beq	13150 <__assert_fail@plt+0x1d6c>
   1311c:	sub	r6, r6, #4
   13120:	ldr	r7, [pc, #3128]	; 13d60 <__assert_fail@plt+0x297c>
   13124:	mov	r1, r4
   13128:	ldr	r0, [r6, #4]!
   1312c:	bl	11930 <__assert_fail@plt+0x54c>
   13130:	cmp	r0, #0
   13134:	subeq	r4, r4, #40	; 0x28
   13138:	ldreq	r3, [r7]
   1313c:	subeq	r3, r3, #1
   13140:	streq	r3, [r7]
   13144:	add	r4, r4, #40	; 0x28
   13148:	subs	r5, r5, #1
   1314c:	bne	13124 <__assert_fail@plt+0x1d40>
   13150:	ldr	r3, [pc, #3080]	; 13d60 <__assert_fail@plt+0x297c>
   13154:	ldr	r3, [r3]
   13158:	cmp	r3, #0
   1315c:	beq	13d4c <__assert_fail@plt+0x2968>
   13160:	mvn	r1, #0
   13164:	ldr	r0, [pc, #3072]	; 13d6c <__assert_fail@plt+0x2988>
   13168:	bl	11b90 <__assert_fail@plt+0x7ac>
   1316c:	b	13324 <__assert_fail@plt+0x1f40>
   13170:	ldr	r3, [pc, #3048]	; 13d60 <__assert_fail@plt+0x297c>
   13174:	ldr	r0, [r3]
   13178:	subs	r4, r0, #1
   1317c:	bmi	1319c <__assert_fail@plt+0x1db8>
   13180:	cmn	r7, #1
   13184:	bne	131b8 <__assert_fail@plt+0x1dd4>
   13188:	add	r0, r4, #-2147483648	; 0x80000000
   1318c:	cmp	r0, #0
   13190:	movle	r0, #0
   13194:	movgt	r0, #1
   13198:	b	13070 <__assert_fail@plt+0x1c8c>
   1319c:	mov	r1, r7
   131a0:	mvn	r0, #-2147483648	; 0x80000000
   131a4:	bl	1ba34 <__assert_fail@plt+0xa650>
   131a8:	cmp	r4, r0
   131ac:	movge	r0, #0
   131b0:	movlt	r0, #1
   131b4:	b	13070 <__assert_fail@plt+0x1c8c>
   131b8:	mov	r1, r7
   131bc:	mov	r0, #-2147483648	; 0x80000000
   131c0:	bl	1ba34 <__assert_fail@plt+0xa650>
   131c4:	cmp	r4, r0
   131c8:	movle	r0, #0
   131cc:	movgt	r0, #1
   131d0:	b	13070 <__assert_fail@plt+0x1c8c>
   131d4:	cmp	r3, #0
   131d8:	bne	131f0 <__assert_fail@plt+0x1e0c>
   131dc:	add	r0, r7, #-2147483648	; 0x80000000
   131e0:	cmp	r0, #0
   131e4:	movle	r0, #0
   131e8:	movgt	r0, #1
   131ec:	b	13070 <__assert_fail@plt+0x1c8c>
   131f0:	mov	r1, r4
   131f4:	mov	r0, #-2147483648	; 0x80000000
   131f8:	bl	1ba34 <__assert_fail@plt+0xa650>
   131fc:	cmp	r7, r0
   13200:	movle	r0, #0
   13204:	movgt	r0, #1
   13208:	b	13070 <__assert_fail@plt+0x1c8c>
   1320c:	ldr	r3, [pc, #2892]	; 13d60 <__assert_fail@plt+0x297c>
   13210:	ldr	r3, [r3]
   13214:	sub	r3, r3, #1
   13218:	mul	r7, r7, r3
   1321c:	b	1307c <__assert_fail@plt+0x1c98>
   13220:	cmp	r8, #0
   13224:	blt	13248 <__assert_fail@plt+0x1e64>
   13228:	sub	r3, r7, #-2147483647	; 0x80000001
   1322c:	cmp	r8, r3
   13230:	movle	r3, #0
   13234:	movgt	r3, #1
   13238:	cmp	r3, #0
   1323c:	movne	r0, #0
   13240:	bne	1309c <__assert_fail@plt+0x1cb8>
   13244:	b	13098 <__assert_fail@plt+0x1cb4>
   13248:	add	r3, r8, #-2147483648	; 0x80000000
   1324c:	cmp	r7, r3
   13250:	movle	r3, #0
   13254:	movgt	r3, #1
   13258:	b	13238 <__assert_fail@plt+0x1e54>
   1325c:	mov	r2, #5
   13260:	ldr	r1, [pc, #2824]	; 13d70 <__assert_fail@plt+0x298c>
   13264:	mov	r0, #0
   13268:	bl	11168 <dcgettext@plt>
   1326c:	mov	r2, r0
   13270:	mov	r1, #0
   13274:	mov	r0, #1
   13278:	bl	11204 <error@plt>
   1327c:	ldr	r4, [pc, #2832]	; 13d94 <__assert_fail@plt+0x29b0>
   13280:	ldr	r0, [r4, #44]	; 0x2c
   13284:	bl	15598 <__assert_fail@plt+0x41b4>
   13288:	ldr	r3, [pc, #2768]	; 13d60 <__assert_fail@plt+0x297c>
   1328c:	ldr	r3, [r3, #20]
   13290:	cmp	r3, #11
   13294:	movcc	r3, #11
   13298:	add	r0, r3, #1
   1329c:	bl	19a98 <__assert_fail@plt+0x86b4>
   132a0:	str	r0, [r4, #44]	; 0x2c
   132a4:	b	130c0 <__assert_fail@plt+0x1cdc>
   132a8:	cmp	r5, #0
   132ac:	ble	133b4 <__assert_fail@plt+0x1fd0>
   132b0:	mov	r1, r0
   132b4:	ldr	r0, [r6]
   132b8:	bl	11930 <__assert_fail@plt+0x54c>
   132bc:	cmp	r0, #0
   132c0:	beq	13d4c <__assert_fail@plt+0x2968>
   132c4:	ldr	r5, [r6]
   132c8:	ldr	r0, [r4]
   132cc:	bl	11300 <fileno@plt>
   132d0:	mov	r1, r0
   132d4:	mov	r0, r5
   132d8:	bl	11b90 <__assert_fail@plt+0x7ac>
   132dc:	mov	r3, #0
   132e0:	str	r3, [r4, #24]
   132e4:	ldr	r0, [r4, #4]
   132e8:	ldr	ip, [r4]
   132ec:	ldr	r3, [pc, #2668]	; 13d60 <__assert_fail@plt+0x297c>
   132f0:	ldr	r2, [r3]
   132f4:	subs	r2, r2, #1
   132f8:	beq	13324 <__assert_fail@plt+0x1f40>
   132fc:	add	r3, r4, #80	; 0x50
   13300:	mov	r1, #0
   13304:	str	r0, [r3, #-36]	; 0xffffffdc
   13308:	str	ip, [r3, #-40]	; 0xffffffd8
   1330c:	str	r1, [r3, #-32]	; 0xffffffe0
   13310:	strb	r1, [r3, #-3]
   13314:	str	r1, [r3, #-16]
   13318:	add	r3, r3, #40	; 0x28
   1331c:	subs	r2, r2, #1
   13320:	bne	13304 <__assert_fail@plt+0x1f20>
   13324:	ldr	r3, [pc, #2664]	; 13d94 <__assert_fail@plt+0x29b0>
   13328:	ldr	r2, [r3, #40]	; 0x28
   1332c:	str	r2, [r3, #8]
   13330:	ldr	r3, [pc, #2600]	; 13d60 <__assert_fail@plt+0x297c>
   13334:	ldrb	r3, [r3, #4]
   13338:	cmp	r3, #0
   1333c:	bne	1340c <__assert_fail@plt+0x2028>
   13340:	ldr	r3, [pc, #2636]	; 13d94 <__assert_fail@plt+0x29b0>
   13344:	ldrd	r2, [r3, #24]
   13348:	strd	r2, [sp, #16]
   1334c:	cmp	r3, #0
   13350:	cmpeq	r2, #1
   13354:	bhi	137d0 <__assert_fail@plt+0x23ec>
   13358:	mov	r0, #1
   1335c:	mov	r1, #0
   13360:	ldr	r3, [pc, #2604]	; 13d94 <__assert_fail@plt+0x29b0>
   13364:	strd	r0, [r3, #128]	; 0x80
   13368:	ldr	r3, [pc, #2596]	; 13d94 <__assert_fail@plt+0x29b0>
   1336c:	ldr	r0, [r3, #120]	; 0x78
   13370:	ldrb	r5, [r3, #60]	; 0x3c
   13374:	cmp	r5, #0
   13378:	moveq	ip, #0
   1337c:	beq	137f4 <__assert_fail@plt+0x2410>
   13380:	ldrb	r3, [r3, #4]
   13384:	cmp	r3, #0
   13388:	beq	137e8 <__assert_fail@plt+0x2404>
   1338c:	ldr	r3, [pc, #2560]	; 13d94 <__assert_fail@plt+0x29b0>
   13390:	ldrb	r3, [r3, #179]	; 0xb3
   13394:	cmp	r3, #0
   13398:	beq	137e8 <__assert_fail@plt+0x2404>
   1339c:	ldr	r3, [pc, #2544]	; 13d94 <__assert_fail@plt+0x29b0>
   133a0:	ldr	ip, [r3, #164]	; 0xa4
   133a4:	add	ip, r0, ip
   133a8:	ldr	r3, [r3, #52]	; 0x34
   133ac:	add	ip, ip, r3
   133b0:	b	137f4 <__assert_fail@plt+0x2410>
   133b4:	mov	r2, #5
   133b8:	ldr	r1, [pc, #2484]	; 13d74 <__assert_fail@plt+0x2990>
   133bc:	mov	r0, #0
   133c0:	bl	11168 <dcgettext@plt>
   133c4:	str	r0, [r4, #4]
   133c8:	ldr	r3, [pc, #2472]	; 13d78 <__assert_fail@plt+0x2994>
   133cc:	ldr	r3, [r3]
   133d0:	str	r3, [r4]
   133d4:	ldr	r3, [pc, #2488]	; 13d94 <__assert_fail@plt+0x29b0>
   133d8:	mov	r2, #1
   133dc:	strb	r2, [r3, #37]	; 0x25
   133e0:	mov	r5, #0
   133e4:	str	r5, [r4, #8]
   133e8:	strb	r5, [r4, #37]	; 0x25
   133ec:	ldr	r2, [r3, #40]	; 0x28
   133f0:	add	r2, r2, #1
   133f4:	str	r2, [r3, #40]	; 0x28
   133f8:	mvn	r1, #0
   133fc:	ldr	r0, [pc, #2408]	; 13d6c <__assert_fail@plt+0x2988>
   13400:	bl	11b90 <__assert_fail@plt+0x7ac>
   13404:	str	r5, [r4, #24]
   13408:	b	132e4 <__assert_fail@plt+0x1f00>
   1340c:	ldr	r3, [pc, #2380]	; 13d60 <__assert_fail@plt+0x297c>
   13410:	ldr	r5, [r3]
   13414:	cmp	r5, #0
   13418:	bge	13480 <__assert_fail@plt+0x209c>
   1341c:	ldr	r3, [pc, #2416]	; 13d94 <__assert_fail@plt+0x29b0>
   13420:	ldr	r4, [r3, #172]	; 0xac
   13424:	cmp	r4, #0
   13428:	blt	13448 <__assert_fail@plt+0x2064>
   1342c:	cmn	r5, #1
   13430:	bne	13464 <__assert_fail@plt+0x2080>
   13434:	add	r0, r4, #-2147483648	; 0x80000000
   13438:	cmp	r0, #0
   1343c:	movle	r0, #0
   13440:	movgt	r0, #1
   13444:	b	134b0 <__assert_fail@plt+0x20cc>
   13448:	mov	r1, r5
   1344c:	mvn	r0, #-2147483648	; 0x80000000
   13450:	bl	1ba34 <__assert_fail@plt+0xa650>
   13454:	cmp	r4, r0
   13458:	movge	r0, #0
   1345c:	movlt	r0, #1
   13460:	b	134b0 <__assert_fail@plt+0x20cc>
   13464:	mov	r1, r5
   13468:	mov	r0, #-2147483648	; 0x80000000
   1346c:	bl	1ba34 <__assert_fail@plt+0xa650>
   13470:	cmp	r4, r0
   13474:	movle	r0, #0
   13478:	movgt	r0, #1
   1347c:	b	134b0 <__assert_fail@plt+0x20cc>
   13480:	cmp	r5, #0
   13484:	beq	13fe0 <__assert_fail@plt+0x2bfc>
   13488:	ldr	r3, [pc, #2308]	; 13d94 <__assert_fail@plt+0x29b0>
   1348c:	ldr	r4, [r3, #172]	; 0xac
   13490:	cmp	r4, #0
   13494:	blt	134e4 <__assert_fail@plt+0x2100>
   13498:	mov	r1, r5
   1349c:	mvn	r0, #-2147483648	; 0x80000000
   134a0:	bl	1ba34 <__assert_fail@plt+0xa650>
   134a4:	cmp	r4, r0
   134a8:	movle	r0, #0
   134ac:	movgt	r0, #1
   134b0:	cmp	r0, #0
   134b4:	bne	13660 <__assert_fail@plt+0x227c>
   134b8:	ldr	r3, [pc, #2260]	; 13d94 <__assert_fail@plt+0x29b0>
   134bc:	ldr	r6, [r3, #172]	; 0xac
   134c0:	mul	r6, r6, r5
   134c4:	mov	r4, r6
   134c8:	cmp	r6, #0
   134cc:	bge	13ff0 <__assert_fail@plt+0x2c0c>
   134d0:	rsb	r3, r6, #-2147483648	; 0x80000000
   134d4:	cmp	r3, #1
   134d8:	movle	r3, #0
   134dc:	movgt	r3, #1
   134e0:	b	13ffc <__assert_fail@plt+0x2c18>
   134e4:	cmn	r4, #1
   134e8:	bne	13500 <__assert_fail@plt+0x211c>
   134ec:	add	r0, r5, #-2147483648	; 0x80000000
   134f0:	cmp	r0, #0
   134f4:	movle	r0, #0
   134f8:	movgt	r0, #1
   134fc:	b	134b0 <__assert_fail@plt+0x20cc>
   13500:	mov	r1, r4
   13504:	mov	r0, #-2147483648	; 0x80000000
   13508:	bl	1ba34 <__assert_fail@plt+0xa650>
   1350c:	cmp	r5, r0
   13510:	movle	r0, #0
   13514:	movgt	r0, #1
   13518:	b	134b0 <__assert_fail@plt+0x20cc>
   1351c:	cmn	r5, #-2147483647	; 0x80000001
   13520:	movne	r3, #0
   13524:	moveq	r3, #1
   13528:	cmp	r3, #0
   1352c:	bne	13660 <__assert_fail@plt+0x227c>
   13530:	adds	r5, r5, #1
   13534:	bpl	13594 <__assert_fail@plt+0x21b0>
   13538:	cmp	r4, #0
   1353c:	blt	1355c <__assert_fail@plt+0x2178>
   13540:	cmn	r5, #1
   13544:	bne	13578 <__assert_fail@plt+0x2194>
   13548:	add	r4, r4, #-2147483648	; 0x80000000
   1354c:	cmp	r4, #0
   13550:	movle	r0, #0
   13554:	movgt	r0, #1
   13558:	b	135bc <__assert_fail@plt+0x21d8>
   1355c:	mov	r1, r5
   13560:	mvn	r0, #-2147483648	; 0x80000000
   13564:	bl	1ba34 <__assert_fail@plt+0xa650>
   13568:	cmp	r0, r4
   1356c:	movle	r0, #0
   13570:	movgt	r0, #1
   13574:	b	135bc <__assert_fail@plt+0x21d8>
   13578:	mov	r1, r5
   1357c:	mov	r0, #-2147483648	; 0x80000000
   13580:	bl	1ba34 <__assert_fail@plt+0xa650>
   13584:	cmp	r0, r4
   13588:	movge	r0, #0
   1358c:	movlt	r0, #1
   13590:	b	135bc <__assert_fail@plt+0x21d8>
   13594:	cmp	r5, #0
   13598:	beq	135c4 <__assert_fail@plt+0x21e0>
   1359c:	cmp	r4, #0
   135a0:	blt	13628 <__assert_fail@plt+0x2244>
   135a4:	mov	r1, r5
   135a8:	mvn	r0, #-2147483648	; 0x80000000
   135ac:	bl	1ba34 <__assert_fail@plt+0xa650>
   135b0:	cmp	r0, r4
   135b4:	movge	r0, #0
   135b8:	movlt	r0, #1
   135bc:	cmp	r0, #0
   135c0:	bne	13660 <__assert_fail@plt+0x227c>
   135c4:	mul	r5, r6, r5
   135c8:	ldr	r4, [pc, #1988]	; 13d94 <__assert_fail@plt+0x29b0>
   135cc:	ldr	r0, [r4, #148]	; 0x94
   135d0:	bl	15598 <__assert_fail@plt+0x41b4>
   135d4:	mov	r1, #4
   135d8:	mov	r0, r7
   135dc:	bl	19b90 <__assert_fail@plt+0x87ac>
   135e0:	str	r0, [r4, #148]	; 0x94
   135e4:	ldr	r0, [r4, #156]	; 0x9c
   135e8:	bl	15598 <__assert_fail@plt+0x41b4>
   135ec:	mov	r1, #4
   135f0:	mov	r0, r6
   135f4:	bl	19b90 <__assert_fail@plt+0x87ac>
   135f8:	str	r0, [r4, #156]	; 0x9c
   135fc:	ldr	r0, [r4, #20]
   13600:	bl	15598 <__assert_fail@plt+0x41b4>
   13604:	ldrb	r1, [r4, #116]	; 0x74
   13608:	add	r1, r1, #1
   1360c:	mov	r0, r5
   13610:	bl	19b90 <__assert_fail@plt+0x87ac>
   13614:	str	r0, [r4, #20]
   13618:	ldrb	r3, [r4, #116]	; 0x74
   1361c:	mla	r5, r3, r5, r5
   13620:	str	r5, [r4, #16]
   13624:	b	13340 <__assert_fail@plt+0x1f5c>
   13628:	cmn	r4, #1
   1362c:	bne	13644 <__assert_fail@plt+0x2260>
   13630:	add	r0, r5, #-2147483648	; 0x80000000
   13634:	cmp	r0, #0
   13638:	movle	r0, #0
   1363c:	movgt	r0, #1
   13640:	b	135bc <__assert_fail@plt+0x21d8>
   13644:	mov	r1, r4
   13648:	mov	r0, #-2147483648	; 0x80000000
   1364c:	bl	1ba34 <__assert_fail@plt+0xa650>
   13650:	cmp	r5, r0
   13654:	movle	r0, #0
   13658:	movgt	r0, #1
   1365c:	b	135bc <__assert_fail@plt+0x21d8>
   13660:	bl	11704 <__assert_fail@plt+0x320>
   13664:	add	r5, r5, #1
   13668:	add	r4, r4, #40	; 0x28
   1366c:	ldr	r3, [r6]
   13670:	cmp	r5, r3
   13674:	bgt	13694 <__assert_fail@plt+0x22b0>
   13678:	ldr	r3, [r4, #8]
   1367c:	cmp	r3, #0
   13680:	bne	13664 <__assert_fail@plt+0x2280>
   13684:	mov	r1, r5
   13688:	mov	r0, r4
   1368c:	bl	11e5c <__assert_fail@plt+0xa78>
   13690:	b	13664 <__assert_fail@plt+0x2280>
   13694:	add	r7, r7, #1
   13698:	ldr	r3, [sl, #172]	; 0xac
   1369c:	cmp	r7, r3
   136a0:	bge	13764 <__assert_fail@plt+0x2380>
   136a4:	ldr	r4, [sl]
   136a8:	ldr	r3, [r6]
   136ac:	cmp	r3, #0
   136b0:	ble	13694 <__assert_fail@plt+0x22b0>
   136b4:	mov	r5, #1
   136b8:	b	13678 <__assert_fail@plt+0x2294>
   136bc:	add	r5, r5, #1
   136c0:	add	r4, r4, #40	; 0x28
   136c4:	ldr	r3, [r6]
   136c8:	cmp	r5, r3
   136cc:	bgt	136ec <__assert_fail@plt+0x2308>
   136d0:	ldr	r3, [r4, #8]
   136d4:	cmp	r3, #0
   136d8:	bne	136bc <__assert_fail@plt+0x22d8>
   136dc:	mov	r1, r5
   136e0:	mov	r0, r4
   136e4:	bl	11e5c <__assert_fail@plt+0xa78>
   136e8:	b	136bc <__assert_fail@plt+0x22d8>
   136ec:	ldrb	r2, [r6, #4]
   136f0:	cmp	r2, #0
   136f4:	beq	13724 <__assert_fail@plt+0x2340>
   136f8:	ldr	r2, [sl]
   136fc:	cmp	r3, #0
   13700:	ble	13724 <__assert_fail@plt+0x2340>
   13704:	mov	r1, #1
   13708:	ldr	r0, [r2, #8]
   1370c:	cmp	r0, #3
   13710:	strne	fp, [r2, #8]
   13714:	add	r1, r1, #1
   13718:	add	r2, r2, #40	; 0x28
   1371c:	cmp	r3, r1
   13720:	bge	13708 <__assert_fail@plt+0x2324>
   13724:	bl	11620 <__assert_fail@plt+0x23c>
   13728:	mov	r3, #0
   1372c:	strb	r3, [sl, #100]	; 0x64
   13730:	ldr	r3, [sl, #8]
   13734:	cmp	r3, #0
   13738:	ble	13784 <__assert_fail@plt+0x23a0>
   1373c:	adds	r8, r8, #1
   13740:	adc	r9, r9, #0
   13744:	ldrd	r2, [sp, #16]
   13748:	cmp	r3, r9
   1374c:	cmpeq	r2, r8
   13750:	beq	137c0 <__assert_fail@plt+0x23dc>
   13754:	ldr	r3, [sl, #172]	; 0xac
   13758:	cmp	r3, #1
   1375c:	movgt	r7, #1
   13760:	bgt	136a4 <__assert_fail@plt+0x22c0>
   13764:	mov	r3, #1
   13768:	strb	r3, [sl, #100]	; 0x64
   1376c:	ldr	r4, [sl]
   13770:	ldr	r3, [r6]
   13774:	cmp	r3, #0
   13778:	ble	13724 <__assert_fail@plt+0x2340>
   1377c:	mov	r5, #1
   13780:	b	136d0 <__assert_fail@plt+0x22ec>
   13784:	mov	r2, #5
   13788:	ldr	r1, [pc, #1516]	; 13d7c <__assert_fail@plt+0x2998>
   1378c:	mov	r0, #0
   13790:	bl	11168 <dcgettext@plt>
   13794:	strd	r8, [sp, #8]
   13798:	ldrd	r2, [sp, #16]
   1379c:	strd	r2, [sp]
   137a0:	mov	r2, r0
   137a4:	mov	r1, #0
   137a8:	mov	r0, r1
   137ac:	bl	11204 <error@plt>
   137b0:	ldr	r3, [pc, #1500]	; 13d94 <__assert_fail@plt+0x29b0>
   137b4:	ldr	r3, [r3, #8]
   137b8:	cmp	r3, #0
   137bc:	ble	13d4c <__assert_fail@plt+0x2968>
   137c0:	ldr	r3, [pc, #1484]	; 13d94 <__assert_fail@plt+0x29b0>
   137c4:	ldrd	r0, [r3, #24]
   137c8:	strd	r0, [r3, #128]	; 0x80
   137cc:	b	13368 <__assert_fail@plt+0x1f84>
   137d0:	mov	r8, #1
   137d4:	mov	r9, #0
   137d8:	ldr	sl, [pc, #1460]	; 13d94 <__assert_fail@plt+0x29b0>
   137dc:	ldr	r6, [pc, #1404]	; 13d60 <__assert_fail@plt+0x297c>
   137e0:	mov	fp, #2
   137e4:	b	13754 <__assert_fail@plt+0x2370>
   137e8:	ldr	r3, [pc, #1444]	; 13d94 <__assert_fail@plt+0x29b0>
   137ec:	ldr	ip, [r3, #164]	; 0xa4
   137f0:	add	ip, r0, ip
   137f4:	ldr	r3, [pc, #1432]	; 13d94 <__assert_fail@plt+0x29b0>
   137f8:	ldr	r8, [r3, #32]
   137fc:	add	r0, r0, r8
   13800:	ldr	r3, [r3]
   13804:	ldr	r2, [pc, #1364]	; 13d60 <__assert_fail@plt+0x297c>
   13808:	ldr	lr, [r2]
   1380c:	cmp	lr, #1
   13810:	ble	138e0 <__assert_fail@plt+0x24fc>
   13814:	ldrb	r6, [r2, #4]
   13818:	ldr	r2, [pc, #1396]	; 13d94 <__assert_fail@plt+0x29b0>
   1381c:	ldrb	r4, [r2, #179]	; 0xb3
   13820:	ldrb	r7, [r2, #4]
   13824:	eor	r7, r7, #1
   13828:	ldr	fp, [r2, #164]	; 0xa4
   1382c:	mov	r1, #1
   13830:	ldr	sl, [pc, #1352]	; 13d80 <__assert_fail@plt+0x299c>
   13834:	ldr	r9, [pc, #1352]	; 13d84 <__assert_fail@plt+0x29a0>
   13838:	b	1386c <__assert_fail@plt+0x2488>
   1383c:	and	r2, r2, #1
   13840:	strb	r2, [r3, #36]	; 0x24
   13844:	str	r0, [r3, #32]
   13848:	cmp	r5, #0
   1384c:	addne	r0, r8, ip
   13850:	addne	ip, r0, fp
   13854:	moveq	ip, #0
   13858:	moveq	r0, ip
   1385c:	add	r3, r3, #40	; 0x28
   13860:	add	r1, r1, #1
   13864:	cmp	r1, lr
   13868:	bge	138a4 <__assert_fail@plt+0x24c0>
   1386c:	cmp	r6, #0
   13870:	ldrne	r2, [pc, #1296]	; 13d88 <__assert_fail@plt+0x29a4>
   13874:	strne	r2, [r3, #16]
   13878:	ldrne	r2, [pc, #1292]	; 13d8c <__assert_fail@plt+0x29a8>
   1387c:	strne	r2, [r3, #12]
   13880:	streq	sl, [r3, #16]
   13884:	streq	r9, [r3, #12]
   13888:	cmp	r4, #0
   1388c:	moveq	r2, r4
   13890:	beq	1383c <__assert_fail@plt+0x2458>
   13894:	cmp	r1, #1
   13898:	movne	r2, r7
   1389c:	orreq	r2, r7, #1
   138a0:	b	1383c <__assert_fail@plt+0x2458>
   138a4:	cmp	lr, #2
   138a8:	movlt	lr, #2
   138ac:	ldr	r2, [pc, #1196]	; 13d60 <__assert_fail@plt+0x297c>
   138b0:	ldrb	r2, [r2, #4]
   138b4:	cmp	r2, #0
   138b8:	beq	138e8 <__assert_fail@plt+0x2504>
   138bc:	ldr	r2, [pc, #1232]	; 13d94 <__assert_fail@plt+0x29b0>
   138c0:	ldrb	r2, [r2, #177]	; 0xb1
   138c4:	cmp	r2, #0
   138c8:	beq	138e8 <__assert_fail@plt+0x2504>
   138cc:	ldr	r2, [pc, #1204]	; 13d88 <__assert_fail@plt+0x29a4>
   138d0:	str	r2, [r3, #16]
   138d4:	ldr	r2, [pc, #1200]	; 13d8c <__assert_fail@plt+0x29a8>
   138d8:	str	r2, [r3, #12]
   138dc:	b	138f8 <__assert_fail@plt+0x2514>
   138e0:	mov	lr, #1
   138e4:	b	138ac <__assert_fail@plt+0x24c8>
   138e8:	ldr	r2, [pc, #1168]	; 13d80 <__assert_fail@plt+0x299c>
   138ec:	str	r2, [r3, #16]
   138f0:	ldr	r2, [pc, #1164]	; 13d84 <__assert_fail@plt+0x29a0>
   138f4:	str	r2, [r3, #12]
   138f8:	ldr	r2, [pc, #1172]	; 13d94 <__assert_fail@plt+0x29b0>
   138fc:	ldrb	r2, [r2, #179]	; 0xb3
   13900:	cmp	r2, #0
   13904:	beq	1391c <__assert_fail@plt+0x2538>
   13908:	ldr	r2, [pc, #1156]	; 13d94 <__assert_fail@plt+0x29b0>
   1390c:	ldrb	r2, [r2, #4]
   13910:	eor	r2, r2, #1
   13914:	cmp	lr, #1
   13918:	orreq	r2, r2, #1
   1391c:	and	r2, r2, #1
   13920:	strb	r2, [r3, #36]	; 0x24
   13924:	str	r0, [r3, #32]
   13928:	ldr	r3, [pc, #1072]	; 13d60 <__assert_fail@plt+0x297c>
   1392c:	ldr	r2, [r3, #40]	; 0x28
   13930:	ldr	r3, [pc, #1116]	; 13d94 <__assert_fail@plt+0x29b0>
   13934:	str	r2, [r3, #48]	; 0x30
   13938:	ldr	r9, [pc, #1056]	; 13d60 <__assert_fail@plt+0x297c>
   1393c:	mov	r4, r3
   13940:	mov	fp, #0
   13944:	b	13f28 <__assert_fail@plt+0x2b44>
   13948:	str	fp, [r4, #12]
   1394c:	ldrb	r3, [r4, #177]	; 0xb1
   13950:	cmp	r3, #0
   13954:	ldr	r1, [r9]
   13958:	subeq	r1, r1, #1
   1395c:	ldr	r6, [r4]
   13960:	cmp	r1, #0
   13964:	ble	13ad4 <__assert_fail@plt+0x26f0>
   13968:	mov	r2, r6
   1396c:	mov	r3, #1
   13970:	str	fp, [r2, #24]
   13974:	add	r3, r3, #1
   13978:	add	r2, r2, #40	; 0x28
   1397c:	cmp	r3, r1
   13980:	ble	13970 <__assert_fail@plt+0x258c>
   13984:	ldr	r3, [r4, #8]
   13988:	cmp	r3, #0
   1398c:	beq	13ae0 <__assert_fail@plt+0x26fc>
   13990:	add	r3, r1, #1
   13994:	str	r3, [sp, #16]
   13998:	mov	r8, fp
   1399c:	mov	sl, #1
   139a0:	mov	r7, fp
   139a4:	b	13a50 <__assert_fail@plt+0x266c>
   139a8:	mov	r0, r6
   139ac:	bl	120d0 <__assert_fail@plt+0xcec>
   139b0:	b	13a14 <__assert_fail@plt+0x2630>
   139b4:	ldr	r3, [r6, #24]
   139b8:	add	r3, r3, #1
   139bc:	str	r3, [r6, #24]
   139c0:	lsl	r3, r7, #2
   139c4:	ldr	r2, [r4, #148]	; 0x94
   139c8:	str	r8, [r2, r7, lsl #2]
   139cc:	ldr	r2, [r4, #156]	; 0x9c
   139d0:	ldr	r1, [r4, #64]	; 0x40
   139d4:	str	r1, [r2, r3]
   139d8:	add	r7, r7, #1
   139dc:	ldr	r8, [r4, #12]
   139e0:	subs	r5, r5, #1
   139e4:	beq	13a30 <__assert_fail@plt+0x264c>
   139e8:	ldr	r3, [r4, #8]
   139ec:	cmp	r3, #0
   139f0:	beq	13a6c <__assert_fail@plt+0x2688>
   139f4:	ldr	r3, [r6, #8]
   139f8:	cmp	r3, #0
   139fc:	bne	139e0 <__assert_fail@plt+0x25fc>
   13a00:	str	fp, [r4, #64]	; 0x40
   13a04:	mov	r0, r6
   13a08:	bl	129a0 <__assert_fail@plt+0x15bc>
   13a0c:	cmp	r0, #0
   13a10:	beq	139a8 <__assert_fail@plt+0x25c4>
   13a14:	ldr	r3, [r6, #8]
   13a18:	cmp	r3, #0
   13a1c:	beq	139b4 <__assert_fail@plt+0x25d0>
   13a20:	ldr	r3, [r4, #12]
   13a24:	cmp	r3, r8
   13a28:	bne	139b4 <__assert_fail@plt+0x25d0>
   13a2c:	b	139e0 <__assert_fail@plt+0x25fc>
   13a30:	add	sl, sl, #1
   13a34:	add	r6, r6, #40	; 0x28
   13a38:	ldr	r3, [sp, #16]
   13a3c:	cmp	r3, sl
   13a40:	beq	13a6c <__assert_fail@plt+0x2688>
   13a44:	ldr	r3, [r4, #8]
   13a48:	cmp	r3, #0
   13a4c:	beq	13a6c <__assert_fail@plt+0x2688>
   13a50:	str	r7, [r6, #20]
   13a54:	ldr	r5, [r4, #172]	; 0xac
   13a58:	cmp	r5, #0
   13a5c:	beq	13a30 <__assert_fail@plt+0x264c>
   13a60:	ldr	r3, [r4, #8]
   13a64:	cmp	r3, #0
   13a68:	bne	139f4 <__assert_fail@plt+0x2610>
   13a6c:	ldr	r3, [r4, #148]	; 0x94
   13a70:	str	r8, [r3, r7, lsl #2]
   13a74:	ldrb	r6, [r4, #177]	; 0xb1
   13a78:	cmp	r6, #0
   13a7c:	bne	13aec <__assert_fail@plt+0x2708>
   13a80:	ldr	r0, [r9]
   13a84:	ldr	r5, [r4]
   13a88:	subs	r0, r0, #1
   13a8c:	beq	13abc <__assert_fail@plt+0x26d8>
   13a90:	mov	r2, r0
   13a94:	mov	r3, r5
   13a98:	ldr	r1, [r3, #24]
   13a9c:	str	r1, [r3, #28]
   13aa0:	add	r3, r3, #40	; 0x28
   13aa4:	subs	r2, r2, #1
   13aa8:	bne	13a98 <__assert_fail@plt+0x26b4>
   13aac:	add	r0, r0, r0, lsl #2
   13ab0:	add	r5, r5, r0, lsl #3
   13ab4:	cmp	r6, #0
   13ab8:	bne	13b5c <__assert_fail@plt+0x2778>
   13abc:	ldr	r3, [r5, #8]
   13ac0:	cmp	r3, #0
   13ac4:	ldreq	r3, [r4, #172]	; 0xac
   13ac8:	streq	r3, [r5, #28]
   13acc:	strne	fp, [r5, #28]
   13ad0:	b	13f68 <__assert_fail@plt+0x2b84>
   13ad4:	mov	r8, fp
   13ad8:	mov	r7, fp
   13adc:	b	13a6c <__assert_fail@plt+0x2688>
   13ae0:	mov	r8, fp
   13ae4:	mov	r7, fp
   13ae8:	b	13a6c <__assert_fail@plt+0x2688>
   13aec:	ldr	r5, [r4]
   13af0:	ldr	r8, [r9]
   13af4:	cmp	r8, #0
   13af8:	ble	13b50 <__assert_fail@plt+0x276c>
   13afc:	mov	r1, r8
   13b00:	mov	r0, r7
   13b04:	bl	1ba34 <__assert_fail@plt+0xa650>
   13b08:	mov	sl, r0
   13b0c:	mov	r1, r8
   13b10:	mov	r0, r7
   13b14:	bl	1bc54 <__assert_fail@plt+0xa870>
   13b18:	add	lr, sl, #1
   13b1c:	mov	r2, r5
   13b20:	mov	r0, #0
   13b24:	mov	r3, #1
   13b28:	cmp	r1, r3
   13b2c:	movlt	ip, sl
   13b30:	movge	ip, lr
   13b34:	str	ip, [r2, #24]
   13b38:	str	r0, [r2, #20]
   13b3c:	add	r0, r0, ip
   13b40:	add	r3, r3, #1
   13b44:	add	r2, r2, #40	; 0x28
   13b48:	cmp	r3, r8
   13b4c:	ble	13b28 <__assert_fail@plt+0x2744>
   13b50:	ldr	r0, [r9]
   13b54:	subs	r0, r0, #1
   13b58:	bne	13a90 <__assert_fail@plt+0x26ac>
   13b5c:	ldr	r3, [r5, #24]
   13b60:	str	r3, [r5, #28]
   13b64:	b	13f68 <__assert_fail@plt+0x2b84>
   13b68:	ldr	r3, [r5, #8]
   13b6c:	cmp	r3, #1
   13b70:	beq	13bcc <__assert_fail@plt+0x27e8>
   13b74:	ldrb	r3, [r4, #4]
   13b78:	cmp	r3, #0
   13b7c:	beq	13b94 <__assert_fail@plt+0x27b0>
   13b80:	ldrb	r3, [r4, #169]	; 0xa9
   13b84:	cmp	r3, #0
   13b88:	beq	13d54 <__assert_fail@plt+0x2970>
   13b8c:	mov	r3, #1
   13b90:	strb	r3, [r4, #168]	; 0xa8
   13b94:	ldrb	r3, [r4, #116]	; 0x74
   13b98:	cmp	r3, #0
   13b9c:	ldrne	r3, [r4, #108]	; 0x6c
   13ba0:	addne	r3, r3, #1
   13ba4:	strne	r3, [r4, #108]	; 0x6c
   13ba8:	add	r6, r6, #1
   13bac:	add	r5, r5, #40	; 0x28
   13bb0:	ldr	r3, [r9]
   13bb4:	cmp	r6, r3
   13bb8:	bgt	13d98 <__assert_fail@plt+0x29b4>
   13bbc:	str	sl, [r4, #64]	; 0x40
   13bc0:	ldr	r3, [r5, #28]
   13bc4:	cmp	r3, #0
   13bc8:	ble	13b68 <__assert_fail@plt+0x2784>
   13bcc:	strb	fp, [r4, #160]	; 0xa0
   13bd0:	ldr	r3, [r5, #32]
   13bd4:	str	r3, [r4, #112]	; 0x70
   13bd8:	ldr	r3, [r5, #12]
   13bdc:	mov	r0, r5
   13be0:	blx	r3
   13be4:	cmp	r0, #0
   13be8:	beq	13c5c <__assert_fail@plt+0x2878>
   13bec:	ldrb	r8, [r4, #152]	; 0x98
   13bf0:	orr	r7, r8, r7
   13bf4:	ldr	r3, [r5, #28]
   13bf8:	sub	r3, r3, #1
   13bfc:	str	r3, [r5, #28]
   13c00:	cmp	r3, #0
   13c04:	ble	13c68 <__assert_fail@plt+0x2884>
   13c08:	ldrb	r3, [r4, #4]
   13c0c:	cmp	r3, #0
   13c10:	beq	13b94 <__assert_fail@plt+0x27b0>
   13c14:	ldr	r3, [r5, #8]
   13c18:	cmp	r3, #0
   13c1c:	beq	13b94 <__assert_fail@plt+0x27b0>
   13c20:	ldrb	r2, [r4, #169]	; 0xa9
   13c24:	cmp	r2, #0
   13c28:	movne	r3, #1
   13c2c:	strbne	r3, [r4, #168]	; 0xa8
   13c30:	bne	13b94 <__assert_fail@plt+0x27b0>
   13c34:	cmp	r3, #3
   13c38:	beq	13c50 <__assert_fail@plt+0x286c>
   13c3c:	cmp	r3, #2
   13c40:	bne	13b94 <__assert_fail@plt+0x27b0>
   13c44:	ldrb	r3, [r4, #160]	; 0xa0
   13c48:	cmp	r3, #0
   13c4c:	beq	13b94 <__assert_fail@plt+0x27b0>
   13c50:	mov	r0, r5
   13c54:	bl	123fc <__assert_fail@plt+0x1018>
   13c58:	b	13b94 <__assert_fail@plt+0x27b0>
   13c5c:	mov	r0, r5
   13c60:	bl	120d0 <__assert_fail@plt+0xcec>
   13c64:	b	13bec <__assert_fail@plt+0x2808>
   13c68:	bl	11518 <__assert_fail@plt+0x134>
   13c6c:	cmp	r0, #0
   13c70:	bne	13c08 <__assert_fail@plt+0x2824>
   13c74:	cmp	r8, #0
   13c78:	bne	13da4 <__assert_fail@plt+0x29c0>
   13c7c:	ldrb	r3, [r9, #52]	; 0x34
   13c80:	cmp	r3, #0
   13c84:	bne	13de4 <__assert_fail@plt+0x2a00>
   13c88:	ldr	r3, [sp, #16]
   13c8c:	cmp	r3, #0
   13c90:	bne	13cd0 <__assert_fail@plt+0x28ec>
   13c94:	ldr	r3, [r4]
   13c98:	ldr	r0, [r9]
   13c9c:	cmp	r0, #0
   13ca0:	ble	13cd0 <__assert_fail@plt+0x28ec>
   13ca4:	mov	r2, #1
   13ca8:	ldr	r1, [r3, #8]
   13cac:	cmp	r1, #0
   13cb0:	moveq	r1, #1
   13cb4:	strbeq	r1, [r3, #37]	; 0x25
   13cb8:	add	r2, r2, #1
   13cbc:	add	r3, r3, #40	; 0x28
   13cc0:	cmp	r2, r0
   13cc4:	ble	13ca8 <__assert_fail@plt+0x28c4>
   13cc8:	mov	r3, #0
   13ccc:	str	r3, [sp, #16]
   13cd0:	strb	r7, [r4, #152]	; 0x98
   13cd4:	cmp	r7, #0
   13cd8:	beq	13ce8 <__assert_fail@plt+0x2904>
   13cdc:	ldrb	r3, [r9, #52]	; 0x34
   13ce0:	cmp	r3, #0
   13ce4:	bne	13e8c <__assert_fail@plt+0x2aa8>
   13ce8:	ldrb	r3, [r4, #101]	; 0x65
   13cec:	cmp	r3, #0
   13cf0:	beq	13d2c <__assert_fail@plt+0x2948>
   13cf4:	ldrb	r3, [r4, #102]	; 0x66
   13cf8:	cmp	r3, #0
   13cfc:	beq	13d2c <__assert_fail@plt+0x2948>
   13d00:	ldr	r3, [pc, #136]	; 13d90 <__assert_fail@plt+0x29ac>
   13d04:	ldr	r0, [r3]
   13d08:	ldr	r3, [r0, #20]
   13d0c:	ldr	r2, [r0, #24]
   13d10:	cmp	r3, r2
   13d14:	addcc	r2, r3, #1
   13d18:	strcc	r2, [r0, #20]
   13d1c:	movcc	r2, #12
   13d20:	strbcc	r2, [r3]
   13d24:	bcs	13f18 <__assert_fail@plt+0x2b34>
   13d28:	strb	fp, [r4, #102]	; 0x66
   13d2c:	ldrd	r2, [r4, #128]	; 0x80
   13d30:	adds	r2, r2, #1
   13d34:	adc	r3, r3, #0
   13d38:	strd	r2, [r4, #128]	; 0x80
   13d3c:	ldrd	r0, [r9, #8]
   13d40:	cmp	r3, r1
   13d44:	cmpeq	r2, r0
   13d48:	bls	13f24 <__assert_fail@plt+0x2b40>
   13d4c:	add	sp, sp, #28
   13d50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d54:	mov	r0, r5
   13d58:	bl	123fc <__assert_fail@plt+0x1018>
   13d5c:	b	13b94 <__assert_fail@plt+0x27b0>
   13d60:	andeq	lr, r2, r0, asr #2
   13d64:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   13d68:	strdeq	ip, [r1], -r0
   13d6c:	andeq	ip, r1, ip, ror #3
   13d70:	andeq	ip, r1, r0, lsl #4
   13d74:	muleq	r1, r8, r1
   13d78:	andeq	lr, r2, r0, ror #3
   13d7c:	andeq	ip, r1, r8, lsl r2
   13d80:	andeq	r2, r1, r0, ror r7
   13d84:	andeq	r2, r1, r0, lsr #19
   13d88:			; <UNDEFINED> instruction: 0x000116b0
   13d8c:	andeq	r2, r1, r4, lsr r8
   13d90:	andeq	lr, r2, r4, ror #3
   13d94:	strdeq	lr, [r2], -r0
   13d98:	ldrb	r3, [r4, #152]	; 0x98
   13d9c:	cmp	r3, #0
   13da0:	beq	13dd8 <__assert_fail@plt+0x29f4>
   13da4:	ldr	r3, [pc, #-28]	; 13d90 <__assert_fail@plt+0x29ac>
   13da8:	ldr	r0, [r3]
   13dac:	ldr	r3, [r0, #20]
   13db0:	ldr	r2, [r0, #24]
   13db4:	cmp	r3, r2
   13db8:	addcc	r2, r3, #1
   13dbc:	strcc	r2, [r0, #20]
   13dc0:	movcc	r2, #10
   13dc4:	strbcc	r2, [r3]
   13dc8:	bcs	13e74 <__assert_fail@plt+0x2a90>
   13dcc:	ldr	r3, [sp, #16]
   13dd0:	sub	r3, r3, #1
   13dd4:	str	r3, [sp, #16]
   13dd8:	bl	11518 <__assert_fail@plt+0x134>
   13ddc:	cmp	r0, #0
   13de0:	beq	13c7c <__assert_fail@plt+0x2898>
   13de4:	ldrb	r3, [r4, #176]	; 0xb0
   13de8:	tst	r7, r3
   13dec:	beq	13e24 <__assert_fail@plt+0x2a40>
   13df0:	ldr	r3, [pc, #-104]	; 13d90 <__assert_fail@plt+0x29ac>
   13df4:	ldr	r0, [r3]
   13df8:	ldr	r3, [r0, #20]
   13dfc:	ldr	r2, [r0, #24]
   13e00:	cmp	r3, r2
   13e04:	addcc	r2, r3, #1
   13e08:	strcc	r2, [r0, #20]
   13e0c:	movcc	r2, #10
   13e10:	strbcc	r2, [r3]
   13e14:	bcs	13e80 <__assert_fail@plt+0x2a9c>
   13e18:	ldr	r3, [sp, #16]
   13e1c:	sub	r3, r3, #1
   13e20:	str	r3, [sp, #16]
   13e24:	ldr	r3, [sp, #16]
   13e28:	cmp	r3, #0
   13e2c:	ble	13c88 <__assert_fail@plt+0x28a4>
   13e30:	bl	11518 <__assert_fail@plt+0x134>
   13e34:	cmp	r0, #0
   13e38:	beq	13c88 <__assert_fail@plt+0x28a4>
   13e3c:	str	fp, [r4, #56]	; 0x38
   13e40:	str	fp, [r4, #104]	; 0x68
   13e44:	str	fp, [r4, #108]	; 0x6c
   13e48:	strb	fp, [r4, #152]	; 0x98
   13e4c:	strb	fp, [r4, #168]	; 0xa8
   13e50:	mov	r3, #1
   13e54:	strb	r3, [r4, #169]	; 0xa9
   13e58:	ldr	r5, [r4]
   13e5c:	ldr	r3, [r9]
   13e60:	cmp	r3, #0
   13e64:	ble	13dd8 <__assert_fail@plt+0x29f4>
   13e68:	mov	r6, #1
   13e6c:	mov	sl, fp
   13e70:	b	13bbc <__assert_fail@plt+0x27d8>
   13e74:	mov	r1, #10
   13e78:	bl	11348 <__overflow@plt>
   13e7c:	b	13dcc <__assert_fail@plt+0x29e8>
   13e80:	mov	r1, #10
   13e84:	bl	11348 <__overflow@plt>
   13e88:	b	13e18 <__assert_fail@plt+0x2a34>
   13e8c:	ldrb	r3, [r4, #180]	; 0xb4
   13e90:	cmp	r3, #0
   13e94:	bne	13ed8 <__assert_fail@plt+0x2af4>
   13e98:	ldr	r3, [sp, #16]
   13e9c:	adds	r5, r3, #5
   13ea0:	movne	r6, #10
   13ea4:	beq	13d2c <__assert_fail@plt+0x2948>
   13ea8:	ldr	r3, [pc, #-288]	; 13d90 <__assert_fail@plt+0x29ac>
   13eac:	ldr	r0, [r3]
   13eb0:	ldr	r3, [r0, #20]
   13eb4:	ldr	r2, [r0, #24]
   13eb8:	cmp	r3, r2
   13ebc:	addcc	r2, r3, #1
   13ec0:	strcc	r2, [r0, #20]
   13ec4:	strbcc	r6, [r3]
   13ec8:	bcs	13f0c <__assert_fail@plt+0x2b28>
   13ecc:	subs	r5, r5, #1
   13ed0:	bne	13ea8 <__assert_fail@plt+0x2ac4>
   13ed4:	b	13d2c <__assert_fail@plt+0x2948>
   13ed8:	ldr	r3, [pc, #-336]	; 13d90 <__assert_fail@plt+0x29ac>
   13edc:	ldr	r0, [r3]
   13ee0:	ldr	r3, [r0, #20]
   13ee4:	ldr	r2, [r0, #24]
   13ee8:	cmp	r3, r2
   13eec:	addcc	r2, r3, #1
   13ef0:	strcc	r2, [r0, #20]
   13ef4:	movcc	r2, #12
   13ef8:	strbcc	r2, [r3]
   13efc:	bcc	13d2c <__assert_fail@plt+0x2948>
   13f00:	mov	r1, #12
   13f04:	bl	11348 <__overflow@plt>
   13f08:	b	13d2c <__assert_fail@plt+0x2948>
   13f0c:	mov	r1, r6
   13f10:	bl	11348 <__overflow@plt>
   13f14:	b	13ecc <__assert_fail@plt+0x2ae8>
   13f18:	mov	r1, #12
   13f1c:	bl	11348 <__overflow@plt>
   13f20:	b	13d28 <__assert_fail@plt+0x2944>
   13f24:	bl	11620 <__assert_fail@plt+0x23c>
   13f28:	ldrb	r3, [r9, #4]
   13f2c:	cmp	r3, #0
   13f30:	bne	13948 <__assert_fail@plt+0x2564>
   13f34:	ldr	r2, [r9]
   13f38:	ldr	r3, [r4]
   13f3c:	cmp	r2, #0
   13f40:	beq	13f68 <__assert_fail@plt+0x2b84>
   13f44:	ldr	r0, [r4, #172]	; 0xac
   13f48:	ldr	r1, [r3, #8]
   13f4c:	cmp	r1, #0
   13f50:	movne	r1, fp
   13f54:	moveq	r1, r0
   13f58:	str	r1, [r3, #28]
   13f5c:	add	r3, r3, #40	; 0x28
   13f60:	subs	r2, r2, #1
   13f64:	bne	13f48 <__assert_fail@plt+0x2b64>
   13f68:	bl	11518 <__assert_fail@plt+0x134>
   13f6c:	cmp	r0, #0
   13f70:	beq	13d4c <__assert_fail@plt+0x2968>
   13f74:	ldrb	r3, [r9, #52]	; 0x34
   13f78:	cmp	r3, #0
   13f7c:	movne	r3, #1
   13f80:	strbne	r3, [r4, #136]	; 0x88
   13f84:	strb	fp, [r4, #152]	; 0x98
   13f88:	ldr	r3, [r4, #172]	; 0xac
   13f8c:	mov	r2, r3
   13f90:	str	r3, [sp, #16]
   13f94:	ldrb	r3, [r4, #176]	; 0xb0
   13f98:	cmp	r3, #0
   13f9c:	movne	r3, r2
   13fa0:	lslne	r3, r3, #1
   13fa4:	strne	r3, [sp, #16]
   13fa8:	ldr	r3, [sp, #16]
   13fac:	cmp	r3, #0
   13fb0:	movgt	r7, fp
   13fb4:	bgt	13e30 <__assert_fail@plt+0x2a4c>
   13fb8:	ldr	r3, [sp, #16]
   13fbc:	cmp	r3, #0
   13fc0:	bne	13ce8 <__assert_fail@plt+0x2904>
   13fc4:	ldr	r3, [r4]
   13fc8:	ldr	r0, [r9]
   13fcc:	cmp	r0, #0
   13fd0:	movgt	r7, fp
   13fd4:	bgt	13ca4 <__assert_fail@plt+0x28c0>
   13fd8:	strb	fp, [r4, #152]	; 0x98
   13fdc:	b	13ce8 <__assert_fail@plt+0x2904>
   13fe0:	ldr	r3, [pc, #-596]	; 13d94 <__assert_fail@plt+0x29b0>
   13fe4:	ldr	r6, [r3, #172]	; 0xac
   13fe8:	mul	r6, r6, r5
   13fec:	mov	r4, r6
   13ff0:	cmn	r4, #-2147483647	; 0x80000001
   13ff4:	movne	r3, #0
   13ff8:	moveq	r3, #1
   13ffc:	cmp	r3, #0
   14000:	bne	13660 <__assert_fail@plt+0x227c>
   14004:	add	r7, r6, #1
   14008:	ldr	r3, [pc, #-636]	; 13d94 <__assert_fail@plt+0x29b0>
   1400c:	ldr	r5, [r3, #164]	; 0xa4
   14010:	cmp	r5, #0
   14014:	bge	1351c <__assert_fail@plt+0x2138>
   14018:	rsb	r3, r5, #-2147483648	; 0x80000000
   1401c:	cmp	r3, #1
   14020:	movle	r3, #0
   14024:	movgt	r3, #1
   14028:	b	13528 <__assert_fail@plt+0x2144>
   1402c:	push	{lr}		; (str lr, [sp, #-4]!)
   14030:	sub	sp, sp, #60	; 0x3c
   14034:	subs	r6, r0, #0
   14038:	beq	14074 <__assert_fail@plt+0x2c90>
   1403c:	ldr	r3, [pc, #1040]	; 14454 <__assert_fail@plt+0x3070>
   14040:	ldr	r4, [r3]
   14044:	mov	r2, #5
   14048:	ldr	r1, [pc, #1032]	; 14458 <__assert_fail@plt+0x3074>
   1404c:	mov	r0, #0
   14050:	bl	11168 <dcgettext@plt>
   14054:	ldr	r3, [pc, #1024]	; 1445c <__assert_fail@plt+0x3078>
   14058:	ldr	r3, [r3]
   1405c:	mov	r2, r0
   14060:	mov	r1, #1
   14064:	mov	r0, r4
   14068:	bl	1130c <__fprintf_chk@plt>
   1406c:	mov	r0, r6
   14070:	bl	11288 <exit@plt>
   14074:	mov	r2, #5
   14078:	ldr	r1, [pc, #992]	; 14460 <__assert_fail@plt+0x307c>
   1407c:	mov	r0, #0
   14080:	bl	11168 <dcgettext@plt>
   14084:	ldr	r3, [pc, #976]	; 1445c <__assert_fail@plt+0x3078>
   14088:	ldr	r2, [r3]
   1408c:	mov	r1, r0
   14090:	mov	r0, #1
   14094:	bl	112f4 <__printf_chk@plt>
   14098:	mov	r2, #5
   1409c:	ldr	r1, [pc, #960]	; 14464 <__assert_fail@plt+0x3080>
   140a0:	mov	r0, #0
   140a4:	bl	11168 <dcgettext@plt>
   140a8:	ldr	r4, [pc, #952]	; 14468 <__assert_fail@plt+0x3084>
   140ac:	ldr	r1, [r4]
   140b0:	bl	1109c <fputs_unlocked@plt>
   140b4:	mov	r2, #5
   140b8:	ldr	r1, [pc, #940]	; 1446c <__assert_fail@plt+0x3088>
   140bc:	mov	r0, #0
   140c0:	bl	11168 <dcgettext@plt>
   140c4:	ldr	r1, [r4]
   140c8:	bl	1109c <fputs_unlocked@plt>
   140cc:	mov	r2, #5
   140d0:	ldr	r1, [pc, #920]	; 14470 <__assert_fail@plt+0x308c>
   140d4:	mov	r0, #0
   140d8:	bl	11168 <dcgettext@plt>
   140dc:	ldr	r1, [r4]
   140e0:	bl	1109c <fputs_unlocked@plt>
   140e4:	mov	r2, #5
   140e8:	ldr	r1, [pc, #900]	; 14474 <__assert_fail@plt+0x3090>
   140ec:	mov	r0, #0
   140f0:	bl	11168 <dcgettext@plt>
   140f4:	ldr	r1, [r4]
   140f8:	bl	1109c <fputs_unlocked@plt>
   140fc:	mov	r2, #5
   14100:	ldr	r1, [pc, #880]	; 14478 <__assert_fail@plt+0x3094>
   14104:	mov	r0, #0
   14108:	bl	11168 <dcgettext@plt>
   1410c:	ldr	r1, [r4]
   14110:	bl	1109c <fputs_unlocked@plt>
   14114:	mov	r2, #5
   14118:	ldr	r1, [pc, #860]	; 1447c <__assert_fail@plt+0x3098>
   1411c:	mov	r0, #0
   14120:	bl	11168 <dcgettext@plt>
   14124:	ldr	r1, [r4]
   14128:	bl	1109c <fputs_unlocked@plt>
   1412c:	mov	r2, #5
   14130:	ldr	r1, [pc, #840]	; 14480 <__assert_fail@plt+0x309c>
   14134:	mov	r0, #0
   14138:	bl	11168 <dcgettext@plt>
   1413c:	ldr	r1, [r4]
   14140:	bl	1109c <fputs_unlocked@plt>
   14144:	mov	r2, #5
   14148:	ldr	r1, [pc, #820]	; 14484 <__assert_fail@plt+0x30a0>
   1414c:	mov	r0, #0
   14150:	bl	11168 <dcgettext@plt>
   14154:	ldr	r1, [r4]
   14158:	bl	1109c <fputs_unlocked@plt>
   1415c:	mov	r2, #5
   14160:	ldr	r1, [pc, #800]	; 14488 <__assert_fail@plt+0x30a4>
   14164:	mov	r0, #0
   14168:	bl	11168 <dcgettext@plt>
   1416c:	ldr	r1, [r4]
   14170:	bl	1109c <fputs_unlocked@plt>
   14174:	mov	r2, #5
   14178:	ldr	r1, [pc, #780]	; 1448c <__assert_fail@plt+0x30a8>
   1417c:	mov	r0, #0
   14180:	bl	11168 <dcgettext@plt>
   14184:	ldr	r1, [r4]
   14188:	bl	1109c <fputs_unlocked@plt>
   1418c:	mov	r2, #5
   14190:	ldr	r1, [pc, #760]	; 14490 <__assert_fail@plt+0x30ac>
   14194:	mov	r0, #0
   14198:	bl	11168 <dcgettext@plt>
   1419c:	ldr	r1, [r4]
   141a0:	bl	1109c <fputs_unlocked@plt>
   141a4:	mov	r2, #5
   141a8:	ldr	r1, [pc, #740]	; 14494 <__assert_fail@plt+0x30b0>
   141ac:	mov	r0, #0
   141b0:	bl	11168 <dcgettext@plt>
   141b4:	ldr	r1, [r4]
   141b8:	bl	1109c <fputs_unlocked@plt>
   141bc:	mov	r2, #5
   141c0:	ldr	r1, [pc, #720]	; 14498 <__assert_fail@plt+0x30b4>
   141c4:	mov	r0, #0
   141c8:	bl	11168 <dcgettext@plt>
   141cc:	ldr	r1, [r4]
   141d0:	bl	1109c <fputs_unlocked@plt>
   141d4:	mov	r2, #5
   141d8:	ldr	r1, [pc, #700]	; 1449c <__assert_fail@plt+0x30b8>
   141dc:	mov	r0, #0
   141e0:	bl	11168 <dcgettext@plt>
   141e4:	ldr	r1, [r4]
   141e8:	bl	1109c <fputs_unlocked@plt>
   141ec:	mov	r2, #5
   141f0:	ldr	r1, [pc, #680]	; 144a0 <__assert_fail@plt+0x30bc>
   141f4:	mov	r0, #0
   141f8:	bl	11168 <dcgettext@plt>
   141fc:	ldr	r1, [r4]
   14200:	bl	1109c <fputs_unlocked@plt>
   14204:	mov	r2, #5
   14208:	ldr	r1, [pc, #660]	; 144a4 <__assert_fail@plt+0x30c0>
   1420c:	mov	r0, #0
   14210:	bl	11168 <dcgettext@plt>
   14214:	ldr	r1, [r4]
   14218:	bl	1109c <fputs_unlocked@plt>
   1421c:	mov	r2, #5
   14220:	ldr	r1, [pc, #640]	; 144a8 <__assert_fail@plt+0x30c4>
   14224:	mov	r0, #0
   14228:	bl	11168 <dcgettext@plt>
   1422c:	ldr	r1, [r4]
   14230:	bl	1109c <fputs_unlocked@plt>
   14234:	mov	r2, #5
   14238:	ldr	r1, [pc, #620]	; 144ac <__assert_fail@plt+0x30c8>
   1423c:	mov	r0, #0
   14240:	bl	11168 <dcgettext@plt>
   14244:	ldr	r1, [r4]
   14248:	bl	1109c <fputs_unlocked@plt>
   1424c:	mov	ip, sp
   14250:	ldr	lr, [pc, #600]	; 144b0 <__assert_fail@plt+0x30cc>
   14254:	ldm	lr!, {r0, r1, r2, r3}
   14258:	stmia	ip!, {r0, r1, r2, r3}
   1425c:	ldm	lr!, {r0, r1, r2, r3}
   14260:	stmia	ip!, {r0, r1, r2, r3}
   14264:	ldm	lr!, {r0, r1, r2, r3}
   14268:	stmia	ip!, {r0, r1, r2, r3}
   1426c:	ldm	lr, {r0, r1}
   14270:	stm	ip, {r0, r1}
   14274:	ldr	r1, [sp]
   14278:	cmp	r1, #0
   1427c:	moveq	r4, sp
   14280:	beq	142a8 <__assert_fail@plt+0x2ec4>
   14284:	mov	r4, sp
   14288:	ldr	r5, [pc, #548]	; 144b4 <__assert_fail@plt+0x30d0>
   1428c:	mov	r0, r5
   14290:	bl	110c0 <strcmp@plt>
   14294:	cmp	r0, #0
   14298:	beq	142a8 <__assert_fail@plt+0x2ec4>
   1429c:	ldr	r1, [r4, #8]!
   142a0:	cmp	r1, #0
   142a4:	bne	1428c <__assert_fail@plt+0x2ea8>
   142a8:	ldr	r4, [r4, #4]
   142ac:	cmp	r4, #0
   142b0:	beq	143c4 <__assert_fail@plt+0x2fe0>
   142b4:	mov	r2, #5
   142b8:	ldr	r1, [pc, #504]	; 144b8 <__assert_fail@plt+0x30d4>
   142bc:	mov	r0, #0
   142c0:	bl	11168 <dcgettext@plt>
   142c4:	ldr	r3, [pc, #496]	; 144bc <__assert_fail@plt+0x30d8>
   142c8:	ldr	r2, [pc, #496]	; 144c0 <__assert_fail@plt+0x30dc>
   142cc:	mov	r1, r0
   142d0:	mov	r0, #1
   142d4:	bl	112f4 <__printf_chk@plt>
   142d8:	mov	r1, #0
   142dc:	mov	r0, #5
   142e0:	bl	11354 <setlocale@plt>
   142e4:	cmp	r0, #0
   142e8:	beq	14300 <__assert_fail@plt+0x2f1c>
   142ec:	mov	r2, #3
   142f0:	ldr	r1, [pc, #460]	; 144c4 <__assert_fail@plt+0x30e0>
   142f4:	bl	113c0 <strncmp@plt>
   142f8:	cmp	r0, #0
   142fc:	bne	14360 <__assert_fail@plt+0x2f7c>
   14300:	mov	r2, #5
   14304:	ldr	r1, [pc, #444]	; 144c8 <__assert_fail@plt+0x30e4>
   14308:	mov	r0, #0
   1430c:	bl	11168 <dcgettext@plt>
   14310:	ldr	r5, [pc, #412]	; 144b4 <__assert_fail@plt+0x30d0>
   14314:	mov	r3, r5
   14318:	ldr	r2, [pc, #412]	; 144bc <__assert_fail@plt+0x30d8>
   1431c:	mov	r1, r0
   14320:	mov	r0, #1
   14324:	bl	112f4 <__printf_chk@plt>
   14328:	mov	r2, #5
   1432c:	ldr	r1, [pc, #408]	; 144cc <__assert_fail@plt+0x30e8>
   14330:	mov	r0, #0
   14334:	bl	11168 <dcgettext@plt>
   14338:	mov	r1, r0
   1433c:	ldr	r2, [pc, #396]	; 144d0 <__assert_fail@plt+0x30ec>
   14340:	ldr	r3, [pc, #396]	; 144d4 <__assert_fail@plt+0x30f0>
   14344:	cmp	r4, r5
   14348:	movne	r3, r2
   1434c:	mov	r2, r4
   14350:	mov	r0, #1
   14354:	bl	112f4 <__printf_chk@plt>
   14358:	b	1406c <__assert_fail@plt+0x2c88>
   1435c:	ldr	r4, [pc, #336]	; 144b4 <__assert_fail@plt+0x30d0>
   14360:	mov	r2, #5
   14364:	ldr	r1, [pc, #364]	; 144d8 <__assert_fail@plt+0x30f4>
   14368:	mov	r0, #0
   1436c:	bl	11168 <dcgettext@plt>
   14370:	ldr	r3, [pc, #240]	; 14468 <__assert_fail@plt+0x3084>
   14374:	ldr	r1, [r3]
   14378:	bl	1109c <fputs_unlocked@plt>
   1437c:	b	14300 <__assert_fail@plt+0x2f1c>
   14380:	mov	r2, #5
   14384:	ldr	r1, [pc, #316]	; 144c8 <__assert_fail@plt+0x30e4>
   14388:	mov	r0, #0
   1438c:	bl	11168 <dcgettext@plt>
   14390:	ldr	r4, [pc, #284]	; 144b4 <__assert_fail@plt+0x30d0>
   14394:	mov	r3, r4
   14398:	ldr	r2, [pc, #284]	; 144bc <__assert_fail@plt+0x30d8>
   1439c:	mov	r1, r0
   143a0:	mov	r0, #1
   143a4:	bl	112f4 <__printf_chk@plt>
   143a8:	mov	r2, #5
   143ac:	ldr	r1, [pc, #280]	; 144cc <__assert_fail@plt+0x30e8>
   143b0:	mov	r0, #0
   143b4:	bl	11168 <dcgettext@plt>
   143b8:	mov	r1, r0
   143bc:	ldr	r3, [pc, #272]	; 144d4 <__assert_fail@plt+0x30f0>
   143c0:	b	1434c <__assert_fail@plt+0x2f68>
   143c4:	mov	r2, #5
   143c8:	ldr	r1, [pc, #232]	; 144b8 <__assert_fail@plt+0x30d4>
   143cc:	mov	r0, #0
   143d0:	bl	11168 <dcgettext@plt>
   143d4:	ldr	r3, [pc, #224]	; 144bc <__assert_fail@plt+0x30d8>
   143d8:	ldr	r2, [pc, #224]	; 144c0 <__assert_fail@plt+0x30dc>
   143dc:	mov	r1, r0
   143e0:	mov	r0, #1
   143e4:	bl	112f4 <__printf_chk@plt>
   143e8:	mov	r1, #0
   143ec:	mov	r0, #5
   143f0:	bl	11354 <setlocale@plt>
   143f4:	cmp	r0, #0
   143f8:	beq	14380 <__assert_fail@plt+0x2f9c>
   143fc:	mov	r2, #3
   14400:	ldr	r1, [pc, #188]	; 144c4 <__assert_fail@plt+0x30e0>
   14404:	bl	113c0 <strncmp@plt>
   14408:	cmp	r0, #0
   1440c:	bne	1435c <__assert_fail@plt+0x2f78>
   14410:	mov	r2, #5
   14414:	ldr	r1, [pc, #172]	; 144c8 <__assert_fail@plt+0x30e4>
   14418:	mov	r0, #0
   1441c:	bl	11168 <dcgettext@plt>
   14420:	ldr	r4, [pc, #140]	; 144b4 <__assert_fail@plt+0x30d0>
   14424:	mov	r3, r4
   14428:	ldr	r2, [pc, #140]	; 144bc <__assert_fail@plt+0x30d8>
   1442c:	mov	r1, r0
   14430:	mov	r0, #1
   14434:	bl	112f4 <__printf_chk@plt>
   14438:	mov	r2, #5
   1443c:	ldr	r1, [pc, #136]	; 144cc <__assert_fail@plt+0x30e8>
   14440:	mov	r0, #0
   14444:	bl	11168 <dcgettext@plt>
   14448:	mov	r1, r0
   1444c:	ldr	r3, [pc, #128]	; 144d4 <__assert_fail@plt+0x30f0>
   14450:	b	1434c <__assert_fail@plt+0x2f68>
   14454:	ldrdeq	lr, [r2], -r8
   14458:	andeq	ip, r1, r0, asr r2
   1445c:			; <UNDEFINED> instruction: 0x0002e2b0
   14460:	andeq	ip, r1, r8, ror r2
   14464:	muleq	r1, ip, r2
   14468:	andeq	lr, r2, r4, ror #3
   1446c:	andeq	ip, r1, ip, asr #5
   14470:	andeq	ip, r1, r4, lsl #6
   14474:	andeq	ip, r1, r0, asr r3
   14478:	andeq	ip, r1, r0, lsr #9
   1447c:			; <UNDEFINED> instruction: 0x0001c5b0
   14480:	andeq	ip, r1, r0, asr #14
   14484:	andeq	ip, r1, ip, ror #17
   14488:	andeq	ip, r1, r8, asr #19
   1448c:	andeq	ip, r1, r8, asr sl
   14490:			; <UNDEFINED> instruction: 0x0001cbb4
   14494:			; <UNDEFINED> instruction: 0x0001ccb4
   14498:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1449c:	andeq	ip, r1, r8, ror #29
   144a0:	andeq	ip, r1, r0, asr pc
   144a4:	andeq	sp, r1, r4, ror #1
   144a8:			; <UNDEFINED> instruction: 0x0001d1bc
   144ac:	andeq	sp, r1, ip, ror #3
   144b0:	strdeq	ip, [r1], -r4
   144b4:	andeq	ip, r1, ip, asr #4
   144b8:	andeq	sp, r1, r4, lsr #4
   144bc:	andeq	sp, r1, ip, lsr r2
   144c0:	andeq	sp, r1, r4, ror #4
   144c4:	andeq	sp, r1, r4, ror r2
   144c8:	andeq	sp, r1, r0, asr #5
   144cc:	ldrdeq	sp, [r1], -ip
   144d0:	andeq	ip, r1, ip, ror #3
   144d4:	andeq	sp, r1, r4, ror #10
   144d8:	andeq	sp, r1, r8, ror r2
   144dc:	push	{r4, r5, r6, r7, lr}
   144e0:	sub	sp, sp, #20
   144e4:	mov	r4, r0
   144e8:	mov	r6, r1
   144ec:	mov	r5, r3
   144f0:	ldrb	r3, [r0]
   144f4:	sub	r1, r3, #48	; 0x30
   144f8:	cmp	r1, #9
   144fc:	addhi	r4, r0, #1
   14500:	strbhi	r3, [r2]
   14504:	ldrb	r3, [r4]
   14508:	cmp	r3, #0
   1450c:	bne	14518 <__assert_fail@plt+0x3134>
   14510:	add	sp, sp, #20
   14514:	pop	{r4, r5, r6, r7, pc}
   14518:	ldr	r3, [pc, #112]	; 14590 <__assert_fail@plt+0x31ac>
   1451c:	str	r3, [sp]
   14520:	add	r3, sp, #12
   14524:	mov	r2, #10
   14528:	mov	r1, #0
   1452c:	mov	r0, r4
   14530:	bl	1a958 <__assert_fail@plt+0x9574>
   14534:	cmp	r0, #0
   14538:	bne	1454c <__assert_fail@plt+0x3168>
   1453c:	ldr	r3, [sp, #12]
   14540:	cmp	r3, #0
   14544:	strgt	r3, [r5]
   14548:	bgt	14510 <__assert_fail@plt+0x312c>
   1454c:	bl	112c4 <__errno_location@plt>
   14550:	ldr	r5, [r0]
   14554:	mov	r2, #5
   14558:	ldr	r1, [pc, #52]	; 14594 <__assert_fail@plt+0x31b0>
   1455c:	mov	r0, #0
   14560:	bl	11168 <dcgettext@plt>
   14564:	mov	r7, r0
   14568:	mov	r0, r4
   1456c:	bl	18f70 <__assert_fail@plt+0x7b8c>
   14570:	str	r0, [sp]
   14574:	mov	r3, r6
   14578:	mov	r2, r7
   1457c:	mov	r1, r5
   14580:	mov	r0, #0
   14584:	bl	11204 <error@plt>
   14588:	mov	r0, #1
   1458c:	bl	1402c <__assert_fail@plt+0x2c48>
   14590:	andeq	ip, r1, ip, ror #3
   14594:	andeq	sp, r1, r0, lsl r3
   14598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1459c:	sub	sp, sp, #68	; 0x44
   145a0:	mov	r9, r0
   145a4:	str	r1, [sp, #16]
   145a8:	mov	r3, #0
   145ac:	str	r3, [sp, #60]	; 0x3c
   145b0:	ldr	r0, [r1]
   145b4:	bl	17420 <__assert_fail@plt+0x603c>
   145b8:	ldr	r1, [pc, #3148]	; 1520c <__assert_fail@plt+0x3e28>
   145bc:	mov	r0, #6
   145c0:	bl	11354 <setlocale@plt>
   145c4:	ldr	r4, [pc, #3140]	; 15210 <__assert_fail@plt+0x3e2c>
   145c8:	ldr	r1, [pc, #3140]	; 15214 <__assert_fail@plt+0x3e30>
   145cc:	mov	r0, r4
   145d0:	bl	113a8 <bindtextdomain@plt>
   145d4:	mov	r0, r4
   145d8:	bl	1118c <textdomain@plt>
   145dc:	ldr	r0, [pc, #3124]	; 15218 <__assert_fail@plt+0x3e34>
   145e0:	bl	1bf20 <__assert_fail@plt+0xab3c>
   145e4:	cmp	r9, #1
   145e8:	movle	r3, #0
   145ec:	strle	r3, [sp, #32]
   145f0:	ble	14604 <__assert_fail@plt+0x3220>
   145f4:	mov	r1, #4
   145f8:	sub	r0, r9, #1
   145fc:	bl	19b90 <__assert_fail@plt+0x87ac>
   14600:	str	r0, [sp, #32]
   14604:	mov	r5, #0
   14608:	mov	r7, r5
   1460c:	str	r5, [sp, #36]	; 0x24
   14610:	str	r5, [sp, #28]
   14614:	str	r5, [sp, #24]
   14618:	str	r5, [sp, #20]
   1461c:	ldr	r8, [pc, #3064]	; 1521c <__assert_fail@plt+0x3e38>
   14620:	ldr	sl, [pc, #3064]	; 15220 <__assert_fail@plt+0x3e3c>
   14624:	ldr	fp, [pc, #3064]	; 15224 <__assert_fail@plt+0x3e40>
   14628:	add	r3, fp, #32
   1462c:	str	r3, [sp, #40]	; 0x28
   14630:	add	r3, sl, #120	; 0x78
   14634:	str	r3, [sp, #44]	; 0x2c
   14638:	b	1464c <__assert_fail@plt+0x3268>
   1463c:	strb	r4, [r7, r5]
   14640:	mov	r3, #0
   14644:	strb	r3, [r7, r6]
   14648:	mov	r5, r6
   1464c:	add	r3, sp, #64	; 0x40
   14650:	mvn	r2, #0
   14654:	str	r2, [r3, #-12]!
   14658:	str	r3, [sp]
   1465c:	mov	r3, r8
   14660:	add	r2, r8, #488	; 0x1e8
   14664:	ldr	r1, [sp, #16]
   14668:	mov	r0, r9
   1466c:	bl	11270 <getopt_long@plt>
   14670:	mov	r4, r0
   14674:	cmn	r0, #1
   14678:	beq	14f04 <__assert_fail@plt+0x3b20>
   1467c:	sub	r3, r0, #48	; 0x30
   14680:	cmp	r3, #9
   14684:	bhi	146ac <__assert_fail@plt+0x32c8>
   14688:	add	r6, r5, #1
   1468c:	ldr	r3, [sp, #60]	; 0x3c
   14690:	cmp	r6, r3
   14694:	bcc	1463c <__assert_fail@plt+0x3258>
   14698:	add	r1, sp, #60	; 0x3c
   1469c:	mov	r0, r7
   146a0:	bl	19c34 <__assert_fail@plt+0x8850>
   146a4:	mov	r7, r0
   146a8:	b	1463c <__assert_fail@plt+0x3258>
   146ac:	add	r4, r0, #3
   146b0:	cmp	r4, #260	; 0x104
   146b4:	ldrls	pc, [pc, r4, lsl #2]
   146b8:	b	14ee0 <__assert_fail@plt+0x3afc>
   146bc:	andeq	r4, r1, r4, lsr #29
   146c0:	muleq	r1, ip, lr
   146c4:	andeq	r4, r1, r0, ror #29
   146c8:	andeq	r4, r1, r0, ror #29
   146cc:	ldrdeq	r4, [r1], -r0
   146d0:	andeq	r4, r1, r0, ror #29
   146d4:	andeq	r4, r1, r0, ror #29
   146d8:	andeq	r4, r1, r0, ror #29
   146dc:	andeq	r4, r1, r0, ror #29
   146e0:	andeq	r4, r1, r0, ror #29
   146e4:	andeq	r4, r1, r0, ror #29
   146e8:	andeq	r4, r1, r0, ror #29
   146ec:	andeq	r4, r1, r0, ror #29
   146f0:	andeq	r4, r1, r0, ror #29
   146f4:	andeq	r4, r1, r0, ror #29
   146f8:	andeq	r4, r1, r0, ror #29
   146fc:	andeq	r4, r1, r0, ror #29
   14700:	andeq	r4, r1, r0, ror #29
   14704:	andeq	r4, r1, r0, ror #29
   14708:	andeq	r4, r1, r0, ror #29
   1470c:	andeq	r4, r1, r0, ror #29
   14710:	andeq	r4, r1, r0, ror #29
   14714:	andeq	r4, r1, r0, ror #29
   14718:	andeq	r4, r1, r0, ror #29
   1471c:	andeq	r4, r1, r0, ror #29
   14720:	andeq	r4, r1, r0, ror #29
   14724:	andeq	r4, r1, r0, ror #29
   14728:	andeq	r4, r1, r0, ror #29
   1472c:	andeq	r4, r1, r0, ror #29
   14730:	andeq	r4, r1, r0, ror #29
   14734:	andeq	r4, r1, r0, ror #29
   14738:	andeq	r4, r1, r0, ror #29
   1473c:	andeq	r4, r1, r0, ror #29
   14740:	andeq	r4, r1, r0, ror #29
   14744:	andeq	r4, r1, r0, ror #29
   14748:	andeq	r4, r1, r0, ror #29
   1474c:	andeq	r4, r1, r0, ror #29
   14750:	andeq	r4, r1, r0, ror #29
   14754:	andeq	r4, r1, r0, ror #29
   14758:	andeq	r4, r1, r0, ror #29
   1475c:	andeq	r4, r1, r0, ror #29
   14760:	andeq	r4, r1, r0, ror #29
   14764:	andeq	r4, r1, r0, ror #29
   14768:	andeq	r4, r1, r0, ror #29
   1476c:	andeq	r4, r1, r0, ror #29
   14770:	andeq	r4, r1, r0, ror #29
   14774:	andeq	r4, r1, r0, ror #29
   14778:	andeq	r4, r1, r0, ror #29
   1477c:	andeq	r4, r1, r0, ror #29
   14780:	andeq	r4, r1, r0, ror #29
   14784:	andeq	r4, r1, r0, ror #29
   14788:	andeq	r4, r1, r0, ror #29
   1478c:	andeq	r4, r1, r0, ror #29
   14790:	andeq	r4, r1, r0, ror #29
   14794:	andeq	r4, r1, r0, ror #29
   14798:	andeq	r4, r1, r0, ror #29
   1479c:	andeq	r4, r1, r0, ror #29
   147a0:	andeq	r4, r1, r0, ror #29
   147a4:	andeq	r4, r1, r0, ror #29
   147a8:	andeq	r4, r1, r0, ror #29
   147ac:	andeq	r4, r1, r0, ror #29
   147b0:	andeq	r4, r1, r0, ror #29
   147b4:	andeq	r4, r1, r0, ror #29
   147b8:	andeq	r4, r1, r0, ror #29
   147bc:	andeq	r4, r1, r0, ror #29
   147c0:	andeq	r4, r1, r0, ror #29
   147c4:	andeq	r4, r1, r0, ror #29
   147c8:	andeq	r4, r1, r0, ror #29
   147cc:	andeq	r4, r1, r0, ror #29
   147d0:	andeq	r4, r1, r0, ror #29
   147d4:	andeq	r4, r1, r0, ror #29
   147d8:	strdeq	r4, [r1], -ip
   147dc:	andeq	r4, r1, r0, ror #29
   147e0:	andeq	r4, r1, r8, lsr ip
   147e4:	andeq	r4, r1, r0, ror #29
   147e8:	andeq	r4, r1, r0, ror #29
   147ec:	andeq	r4, r1, r0, ror #29
   147f0:	andeq	r4, r1, r0, lsl #25
   147f4:	andeq	r4, r1, r0, ror #29
   147f8:	andeq	r4, r1, r0, ror #29
   147fc:	andeq	r4, r1, r0, ror #29
   14800:	strdeq	r4, [r1], -ip
   14804:	andeq	r4, r1, r0, ror #29
   14808:	andeq	r4, r1, r0, ror #29
   1480c:	andeq	r4, r1, r0, ror #29
   14810:	andeq	r4, r1, r0, ror #29
   14814:	andeq	r4, r1, r8, lsr #27
   14818:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1481c:	andeq	r4, r1, r0, ror #29
   14820:	andeq	r4, r1, r0, ror #29
   14824:	andeq	r4, r1, ip, asr lr
   14828:	andeq	r4, r1, r0, ror #29
   1482c:	andeq	r4, r1, r0, ror #29
   14830:	andeq	r4, r1, r0, ror #29
   14834:	andeq	r4, r1, r0, ror #29
   14838:	andeq	r4, r1, r0, ror #29
   1483c:	andeq	r4, r1, r0, ror #29
   14840:	andeq	r4, r1, r0, ror #29
   14844:	andeq	r4, r1, r0, ror #29
   14848:	andeq	r4, r1, r0, ror #29
   1484c:	andeq	r4, r1, r4, asr #23
   14850:	ldrdeq	r4, [r1], -r8
   14854:	andeq	r4, r1, r4, ror #23
   14858:	strdeq	r4, [r1], -r0
   1485c:	andeq	r4, r1, ip, lsl #24
   14860:	andeq	r4, r1, r8, lsr ip
   14864:	andeq	r4, r1, r0, ror #29
   14868:	andeq	r4, r1, r4, asr #24
   1486c:	andeq	r4, r1, r4, asr ip
   14870:	andeq	r4, r1, r0, ror #29
   14874:	andeq	r4, r1, r0, ror #29
   14878:	andeq	r4, r1, ip, lsl #25
   1487c:			; <UNDEFINED> instruction: 0x00014cbc
   14880:	ldrdeq	r4, [r1], -r0
   14884:	andeq	r4, r1, r0, lsr sp
   14888:	andeq	r4, r1, r0, ror #29
   1488c:	andeq	r4, r1, r0, ror #29
   14890:	andeq	r4, r1, r0, ror #26
   14894:	andeq	r4, r1, ip, ror #26
   14898:	andeq	r4, r1, r0, ror #27
   1489c:	andeq	r4, r1, r0, ror #29
   148a0:	andeq	r4, r1, r4, lsl #28
   148a4:	andeq	r4, r1, r0, lsl lr
   148a8:	andeq	r4, r1, r0, ror #29
   148ac:	andeq	r4, r1, r0, ror #29
   148b0:	andeq	r4, r1, r0, ror #29
   148b4:	andeq	r4, r1, r0, ror #29
   148b8:	andeq	r4, r1, r0, ror #29
   148bc:	andeq	r4, r1, r0, ror #29
   148c0:	andeq	r4, r1, r0, ror #29
   148c4:	andeq	r4, r1, r0, ror #29
   148c8:	andeq	r4, r1, r0, ror #29
   148cc:	andeq	r4, r1, r0, ror #29
   148d0:	andeq	r4, r1, r0, ror #29
   148d4:	andeq	r4, r1, r0, ror #29
   148d8:	andeq	r4, r1, r0, ror #29
   148dc:	andeq	r4, r1, r0, ror #29
   148e0:	andeq	r4, r1, r0, ror #29
   148e4:	andeq	r4, r1, r0, ror #29
   148e8:	andeq	r4, r1, r0, ror #29
   148ec:	andeq	r4, r1, r0, ror #29
   148f0:	andeq	r4, r1, r0, ror #29
   148f4:	andeq	r4, r1, r0, ror #29
   148f8:	andeq	r4, r1, r0, ror #29
   148fc:	andeq	r4, r1, r0, ror #29
   14900:	andeq	r4, r1, r0, ror #29
   14904:	andeq	r4, r1, r0, ror #29
   14908:	andeq	r4, r1, r0, ror #29
   1490c:	andeq	r4, r1, r0, ror #29
   14910:	andeq	r4, r1, r0, ror #29
   14914:	andeq	r4, r1, r0, ror #29
   14918:	andeq	r4, r1, r0, ror #29
   1491c:	andeq	r4, r1, r0, ror #29
   14920:	andeq	r4, r1, r0, ror #29
   14924:	andeq	r4, r1, r0, ror #29
   14928:	andeq	r4, r1, r0, ror #29
   1492c:	andeq	r4, r1, r0, ror #29
   14930:	andeq	r4, r1, r0, ror #29
   14934:	andeq	r4, r1, r0, ror #29
   14938:	andeq	r4, r1, r0, ror #29
   1493c:	andeq	r4, r1, r0, ror #29
   14940:	andeq	r4, r1, r0, ror #29
   14944:	andeq	r4, r1, r0, ror #29
   14948:	andeq	r4, r1, r0, ror #29
   1494c:	andeq	r4, r1, r0, ror #29
   14950:	andeq	r4, r1, r0, ror #29
   14954:	andeq	r4, r1, r0, ror #29
   14958:	andeq	r4, r1, r0, ror #29
   1495c:	andeq	r4, r1, r0, ror #29
   14960:	andeq	r4, r1, r0, ror #29
   14964:	andeq	r4, r1, r0, ror #29
   14968:	andeq	r4, r1, r0, ror #29
   1496c:	andeq	r4, r1, r0, ror #29
   14970:	andeq	r4, r1, r0, ror #29
   14974:	andeq	r4, r1, r0, ror #29
   14978:	andeq	r4, r1, r0, ror #29
   1497c:	andeq	r4, r1, r0, ror #29
   14980:	andeq	r4, r1, r0, ror #29
   14984:	andeq	r4, r1, r0, ror #29
   14988:	andeq	r4, r1, r0, ror #29
   1498c:	andeq	r4, r1, r0, ror #29
   14990:	andeq	r4, r1, r0, ror #29
   14994:	andeq	r4, r1, r0, ror #29
   14998:	andeq	r4, r1, r0, ror #29
   1499c:	andeq	r4, r1, r0, ror #29
   149a0:	andeq	r4, r1, r0, ror #29
   149a4:	andeq	r4, r1, r0, ror #29
   149a8:	andeq	r4, r1, r0, ror #29
   149ac:	andeq	r4, r1, r0, ror #29
   149b0:	andeq	r4, r1, r0, ror #29
   149b4:	andeq	r4, r1, r0, ror #29
   149b8:	andeq	r4, r1, r0, ror #29
   149bc:	andeq	r4, r1, r0, ror #29
   149c0:	andeq	r4, r1, r0, ror #29
   149c4:	andeq	r4, r1, r0, ror #29
   149c8:	andeq	r4, r1, r0, ror #29
   149cc:	andeq	r4, r1, r0, ror #29
   149d0:	andeq	r4, r1, r0, ror #29
   149d4:	andeq	r4, r1, r0, ror #29
   149d8:	andeq	r4, r1, r0, ror #29
   149dc:	andeq	r4, r1, r0, ror #29
   149e0:	andeq	r4, r1, r0, ror #29
   149e4:	andeq	r4, r1, r0, ror #29
   149e8:	andeq	r4, r1, r0, ror #29
   149ec:	andeq	r4, r1, r0, ror #29
   149f0:	andeq	r4, r1, r0, ror #29
   149f4:	andeq	r4, r1, r0, ror #29
   149f8:	andeq	r4, r1, r0, ror #29
   149fc:	andeq	r4, r1, r0, ror #29
   14a00:	andeq	r4, r1, r0, ror #29
   14a04:	andeq	r4, r1, r0, ror #29
   14a08:	andeq	r4, r1, r0, ror #29
   14a0c:	andeq	r4, r1, r0, ror #29
   14a10:	andeq	r4, r1, r0, ror #29
   14a14:	andeq	r4, r1, r0, ror #29
   14a18:	andeq	r4, r1, r0, ror #29
   14a1c:	andeq	r4, r1, r0, ror #29
   14a20:	andeq	r4, r1, r0, ror #29
   14a24:	andeq	r4, r1, r0, ror #29
   14a28:	andeq	r4, r1, r0, ror #29
   14a2c:	andeq	r4, r1, r0, ror #29
   14a30:	andeq	r4, r1, r0, ror #29
   14a34:	andeq	r4, r1, r0, ror #29
   14a38:	andeq	r4, r1, r0, ror #29
   14a3c:	andeq	r4, r1, r0, ror #29
   14a40:	andeq	r4, r1, r0, ror #29
   14a44:	andeq	r4, r1, r0, ror #29
   14a48:	andeq	r4, r1, r0, ror #29
   14a4c:	andeq	r4, r1, r0, ror #29
   14a50:	andeq	r4, r1, r0, ror #29
   14a54:	andeq	r4, r1, r0, ror #29
   14a58:	andeq	r4, r1, r0, ror #29
   14a5c:	andeq	r4, r1, r0, ror #29
   14a60:	andeq	r4, r1, r0, ror #29
   14a64:	andeq	r4, r1, r0, ror #29
   14a68:	andeq	r4, r1, r0, ror #29
   14a6c:	andeq	r4, r1, r0, ror #29
   14a70:	andeq	r4, r1, r0, ror #29
   14a74:	andeq	r4, r1, r0, ror #29
   14a78:	andeq	r4, r1, r0, ror #29
   14a7c:	andeq	r4, r1, r0, ror #29
   14a80:	andeq	r4, r1, r0, ror #29
   14a84:	andeq	r4, r1, r0, ror #29
   14a88:	andeq	r4, r1, r0, ror #29
   14a8c:	andeq	r4, r1, r0, ror #29
   14a90:	andeq	r4, r1, r0, ror #29
   14a94:	andeq	r4, r1, r0, ror #29
   14a98:	andeq	r4, r1, r0, ror #29
   14a9c:	andeq	r4, r1, r0, ror #29
   14aa0:	andeq	r4, r1, r0, ror #29
   14aa4:	andeq	r4, r1, r0, ror #29
   14aa8:	andeq	r4, r1, r0, ror #29
   14aac:	andeq	r4, r1, r0, ror #29
   14ab0:	andeq	r4, r1, r0, ror #29
   14ab4:	andeq	r4, r1, r0, ror #29
   14ab8:	andeq	r4, r1, r0, ror #29
   14abc:	andeq	r4, r1, r0, ror #29
   14ac0:	andeq	r4, r1, r0, ror #29
   14ac4:	andeq	r4, r1, r0, ror #29
   14ac8:	andeq	r4, r1, r0, lsr #23
   14acc:	andeq	r4, r1, ip, lsr #22
   14ad0:	ldrd	r2, [sl, #24]
   14ad4:	orrs	r3, r2, r3
   14ad8:	bne	14af0 <__assert_fail@plt+0x370c>
   14adc:	ldr	r3, [pc, #1860]	; 15228 <__assert_fail@plt+0x3e44>
   14ae0:	ldr	r2, [r3]
   14ae4:	ldrb	r3, [r2]
   14ae8:	cmp	r3, #43	; 0x2b
   14aec:	beq	14b10 <__assert_fail@plt+0x372c>
   14af0:	ldr	r3, [pc, #1840]	; 15228 <__assert_fail@plt+0x3e44>
   14af4:	ldr	r3, [r3]
   14af8:	ldr	r1, [sp, #32]
   14afc:	ldr	r2, [sp, #20]
   14b00:	str	r3, [r1, r2, lsl #2]
   14b04:	add	r3, r2, #1
   14b08:	str	r3, [sp, #20]
   14b0c:	b	14bbc <__assert_fail@plt+0x37d8>
   14b10:	add	r2, r2, #1
   14b14:	mov	r1, #43	; 0x2b
   14b18:	mvn	r0, #1
   14b1c:	bl	1172c <__assert_fail@plt+0x348>
   14b20:	cmp	r0, #0
   14b24:	bne	14bbc <__assert_fail@plt+0x37d8>
   14b28:	b	14af0 <__assert_fail@plt+0x370c>
   14b2c:	ldr	r3, [pc, #1780]	; 15228 <__assert_fail@plt+0x3e44>
   14b30:	ldr	r2, [r3]
   14b34:	cmp	r2, #0
   14b38:	beq	14b80 <__assert_fail@plt+0x379c>
   14b3c:	mov	r1, #0
   14b40:	ldr	r0, [sp, #52]	; 0x34
   14b44:	bl	1172c <__assert_fail@plt+0x348>
   14b48:	cmp	r0, #0
   14b4c:	bne	14bbc <__assert_fail@plt+0x37d8>
   14b50:	mov	r2, #5
   14b54:	ldr	r1, [pc, #1744]	; 1522c <__assert_fail@plt+0x3e48>
   14b58:	bl	11168 <dcgettext@plt>
   14b5c:	mov	r4, r0
   14b60:	ldr	r3, [pc, #1728]	; 15228 <__assert_fail@plt+0x3e44>
   14b64:	ldr	r0, [r3]
   14b68:	bl	18f70 <__assert_fail@plt+0x7b8c>
   14b6c:	mov	r3, r0
   14b70:	mov	r2, r4
   14b74:	mov	r1, #0
   14b78:	mov	r0, #1
   14b7c:	bl	11204 <error@plt>
   14b80:	mov	r2, #5
   14b84:	ldr	r1, [pc, #1700]	; 15230 <__assert_fail@plt+0x3e4c>
   14b88:	mov	r0, #0
   14b8c:	bl	11168 <dcgettext@plt>
   14b90:	mov	r2, r0
   14b94:	mov	r1, #0
   14b98:	mov	r0, #1
   14b9c:	bl	11204 <error@plt>
   14ba0:	ldr	r3, [pc, #1664]	; 15228 <__assert_fail@plt+0x3e44>
   14ba4:	ldr	r0, [r3]
   14ba8:	bl	118e8 <__assert_fail@plt+0x504>
   14bac:	mov	r0, r7
   14bb0:	bl	15598 <__assert_fail@plt+0x41b4>
   14bb4:	mov	r7, #0
   14bb8:	str	r7, [sp, #60]	; 0x3c
   14bbc:	mov	r5, #0
   14bc0:	b	1464c <__assert_fail@plt+0x3268>
   14bc4:	mov	r3, #1
   14bc8:	strb	r3, [sl, #181]	; 0xb5
   14bcc:	mov	r3, #0
   14bd0:	strb	r3, [fp, #4]
   14bd4:	b	14bbc <__assert_fail@plt+0x37d8>
   14bd8:	mov	r3, #1
   14bdc:	strb	r3, [sl, #177]	; 0xb1
   14be0:	b	14bbc <__assert_fail@plt+0x37d8>
   14be4:	mov	r3, #1
   14be8:	strb	r3, [sl, #146]	; 0x92
   14bec:	b	14bbc <__assert_fail@plt+0x37d8>
   14bf0:	mov	r3, #1
   14bf4:	strb	r3, [sl, #176]	; 0xb0
   14bf8:	b	14bbc <__assert_fail@plt+0x37d8>
   14bfc:	ldr	r3, [pc, #1572]	; 15228 <__assert_fail@plt+0x3e44>
   14c00:	ldr	r3, [r3]
   14c04:	str	r3, [sl, #80]	; 0x50
   14c08:	b	14bbc <__assert_fail@plt+0x37d8>
   14c0c:	ldr	r3, [pc, #1556]	; 15228 <__assert_fail@plt+0x3e44>
   14c10:	ldr	r0, [r3]
   14c14:	cmp	r0, #0
   14c18:	beq	14c2c <__assert_fail@plt+0x3848>
   14c1c:	add	r3, fp, #48	; 0x30
   14c20:	add	r2, fp, #45	; 0x2d
   14c24:	mov	r1, #101	; 0x65
   14c28:	bl	144dc <__assert_fail@plt+0x30f8>
   14c2c:	mov	r3, #1
   14c30:	strb	r3, [sl, #144]	; 0x90
   14c34:	b	14bbc <__assert_fail@plt+0x37d8>
   14c38:	mov	r3, #1
   14c3c:	strb	r3, [sl, #180]	; 0xb4
   14c40:	b	14bbc <__assert_fail@plt+0x37d8>
   14c44:	ldr	r3, [pc, #1500]	; 15228 <__assert_fail@plt+0x3e44>
   14c48:	ldr	r3, [r3]
   14c4c:	str	r3, [sl, #88]	; 0x58
   14c50:	b	14bbc <__assert_fail@plt+0x37d8>
   14c54:	ldr	r3, [pc, #1484]	; 15228 <__assert_fail@plt+0x3e44>
   14c58:	ldr	r0, [r3]
   14c5c:	cmp	r0, #0
   14c60:	beq	14c74 <__assert_fail@plt+0x3890>
   14c64:	add	r3, fp, #28
   14c68:	add	r2, fp, #44	; 0x2c
   14c6c:	mov	r1, #105	; 0x69
   14c70:	bl	144dc <__assert_fail@plt+0x30f8>
   14c74:	mov	r3, #1
   14c78:	strb	r3, [sl, #103]	; 0x67
   14c7c:	b	14bbc <__assert_fail@plt+0x37d8>
   14c80:	mov	r3, #1
   14c84:	strb	r3, [sl, #178]	; 0xb2
   14c88:	b	14bbc <__assert_fail@plt+0x37d8>
   14c8c:	ldr	r3, [pc, #1428]	; 15228 <__assert_fail@plt+0x3e44>
   14c90:	ldr	r4, [r3]
   14c94:	mov	r2, #5
   14c98:	ldr	r1, [pc, #1428]	; 15234 <__assert_fail@plt+0x3e50>
   14c9c:	mov	r0, #0
   14ca0:	bl	11168 <dcgettext@plt>
   14ca4:	mov	r3, r0
   14ca8:	add	r2, fp, #56	; 0x38
   14cac:	mov	r1, #1
   14cb0:	mov	r0, r4
   14cb4:	bl	118a0 <__assert_fail@plt+0x4bc>
   14cb8:	b	14bbc <__assert_fail@plt+0x37d8>
   14cbc:	mov	r3, #1
   14cc0:	strb	r3, [sl, #4]
   14cc4:	mov	r3, #0
   14cc8:	strb	r3, [fp, #4]
   14ccc:	b	14bbc <__assert_fail@plt+0x37d8>
   14cd0:	mov	r3, #1
   14cd4:	strb	r3, [sl, #179]	; 0xb3
   14cd8:	ldr	r3, [pc, #1352]	; 15228 <__assert_fail@plt+0x3e44>
   14cdc:	ldr	r0, [r3]
   14ce0:	cmp	r0, #0
   14ce4:	beq	14bbc <__assert_fail@plt+0x37d8>
   14ce8:	add	r3, fp, #20
   14cec:	add	r2, fp, #24
   14cf0:	mov	r1, #110	; 0x6e
   14cf4:	bl	144dc <__assert_fail@plt+0x30f8>
   14cf8:	b	14bbc <__assert_fail@plt+0x37d8>
   14cfc:	mov	r0, #0
   14d00:	strb	r0, [fp, #36]	; 0x24
   14d04:	ldr	r3, [pc, #1308]	; 15228 <__assert_fail@plt+0x3e44>
   14d08:	ldr	r4, [r3]
   14d0c:	mov	r2, #5
   14d10:	ldr	r1, [pc, #1312]	; 15238 <__assert_fail@plt+0x3e54>
   14d14:	bl	11168 <dcgettext@plt>
   14d18:	mov	r3, r0
   14d1c:	add	r2, fp, #60	; 0x3c
   14d20:	mov	r1, #-2147483648	; 0x80000000
   14d24:	mov	r0, r4
   14d28:	bl	118a0 <__assert_fail@plt+0x4bc>
   14d2c:	b	14bbc <__assert_fail@plt+0x37d8>
   14d30:	ldr	r3, [pc, #1264]	; 15228 <__assert_fail@plt+0x3e44>
   14d34:	ldr	r4, [r3]
   14d38:	mov	r2, #5
   14d3c:	ldr	r1, [pc, #1272]	; 1523c <__assert_fail@plt+0x3e58>
   14d40:	mov	r0, #0
   14d44:	bl	11168 <dcgettext@plt>
   14d48:	mov	r3, r0
   14d4c:	ldr	r2, [sp, #44]	; 0x2c
   14d50:	mov	r1, #0
   14d54:	mov	r0, r4
   14d58:	bl	118a0 <__assert_fail@plt+0x4bc>
   14d5c:	b	14bbc <__assert_fail@plt+0x37d8>
   14d60:	mov	r3, #1
   14d64:	strb	r3, [sl, #39]	; 0x27
   14d68:	b	14bbc <__assert_fail@plt+0x37d8>
   14d6c:	ldrb	r3, [sl, #116]	; 0x74
   14d70:	str	r3, [sp, #24]
   14d74:	cmp	r3, #0
   14d78:	ldrne	r3, [sp, #24]
   14d7c:	strne	r3, [sp, #36]	; 0x24
   14d80:	bne	14bbc <__assert_fail@plt+0x37d8>
   14d84:	ldr	r3, [pc, #1180]	; 15228 <__assert_fail@plt+0x3e44>
   14d88:	ldr	r0, [r3]
   14d8c:	cmp	r0, #0
   14d90:	beq	14ee8 <__assert_fail@plt+0x3b04>
   14d94:	bl	1186c <__assert_fail@plt+0x488>
   14d98:	mov	r3, #1
   14d9c:	str	r3, [sp, #36]	; 0x24
   14da0:	str	r3, [sp, #24]
   14da4:	b	14bbc <__assert_fail@plt+0x37d8>
   14da8:	ldr	r3, [pc, #1116]	; 1520c <__assert_fail@plt+0x3e28>
   14dac:	str	r3, [fp, #16]
   14db0:	mov	r3, #0
   14db4:	str	r3, [sl, #32]
   14db8:	mov	r3, #1
   14dbc:	strb	r3, [sl, #116]	; 0x74
   14dc0:	ldr	r3, [pc, #1120]	; 15228 <__assert_fail@plt+0x3e44>
   14dc4:	ldr	r0, [r3]
   14dc8:	cmp	r0, #0
   14dcc:	beq	14ef8 <__assert_fail@plt+0x3b14>
   14dd0:	bl	1186c <__assert_fail@plt+0x488>
   14dd4:	mov	r3, #0
   14dd8:	str	r3, [sp, #36]	; 0x24
   14ddc:	b	14bbc <__assert_fail@plt+0x37d8>
   14de0:	mov	r3, #0
   14de4:	strb	r3, [fp, #52]	; 0x34
   14de8:	mov	r3, #1
   14dec:	strb	r3, [sl, #101]	; 0x65
   14df0:	b	14bbc <__assert_fail@plt+0x37d8>
   14df4:	mov	r3, #0
   14df8:	strb	r3, [fp, #52]	; 0x34
   14dfc:	strb	r3, [sl, #101]	; 0x65
   14e00:	b	14bbc <__assert_fail@plt+0x37d8>
   14e04:	mov	r3, #1
   14e08:	strb	r3, [sl, #145]	; 0x91
   14e0c:	b	14bbc <__assert_fail@plt+0x37d8>
   14e10:	ldr	r3, [pc, #1040]	; 15228 <__assert_fail@plt+0x3e44>
   14e14:	ldr	r4, [r3]
   14e18:	mov	r2, #5
   14e1c:	ldr	r1, [pc, #1052]	; 15240 <__assert_fail@plt+0x3e5c>
   14e20:	mov	r0, #0
   14e24:	bl	11168 <dcgettext@plt>
   14e28:	mov	r3, r0
   14e2c:	add	r2, sp, #56	; 0x38
   14e30:	mov	r1, #1
   14e34:	mov	r0, r4
   14e38:	bl	118a0 <__assert_fail@plt+0x4bc>
   14e3c:	ldrb	r3, [sl, #60]	; 0x3c
   14e40:	cmp	r3, #0
   14e44:	ldreq	r3, [sp, #56]	; 0x38
   14e48:	streq	r3, [fp, #32]
   14e4c:	mov	r3, #1
   14e50:	str	r3, [sp, #28]
   14e54:	str	r3, [sp, #24]
   14e58:	b	14bbc <__assert_fail@plt+0x37d8>
   14e5c:	mov	r4, #1
   14e60:	strb	r4, [sl, #60]	; 0x3c
   14e64:	ldr	r3, [pc, #956]	; 15228 <__assert_fail@plt+0x3e44>
   14e68:	ldr	r5, [r3]
   14e6c:	mov	r2, #5
   14e70:	ldr	r1, [pc, #972]	; 15244 <__assert_fail@plt+0x3e60>
   14e74:	mov	r0, #0
   14e78:	bl	11168 <dcgettext@plt>
   14e7c:	mov	r3, r0
   14e80:	ldr	r2, [sp, #40]	; 0x28
   14e84:	mov	r1, r4
   14e88:	mov	r0, r5
   14e8c:	bl	118a0 <__assert_fail@plt+0x4bc>
   14e90:	mov	r3, #0
   14e94:	str	r3, [sp, #28]
   14e98:	b	14bbc <__assert_fail@plt+0x37d8>
   14e9c:	mov	r0, #0
   14ea0:	bl	1402c <__assert_fail@plt+0x2c48>
   14ea4:	mov	r4, #0
   14ea8:	str	r4, [sp, #8]
   14eac:	ldr	r3, [pc, #916]	; 15248 <__assert_fail@plt+0x3e64>
   14eb0:	str	r3, [sp, #4]
   14eb4:	ldr	r3, [pc, #912]	; 1524c <__assert_fail@plt+0x3e68>
   14eb8:	str	r3, [sp]
   14ebc:	ldr	r3, [pc, #908]	; 15250 <__assert_fail@plt+0x3e6c>
   14ec0:	ldr	r3, [r3]
   14ec4:	ldr	r2, [pc, #904]	; 15254 <__assert_fail@plt+0x3e70>
   14ec8:	ldr	r1, [pc, #904]	; 15258 <__assert_fail@plt+0x3e74>
   14ecc:	ldr	r0, [pc, #904]	; 1525c <__assert_fail@plt+0x3e78>
   14ed0:	ldr	r0, [r0]
   14ed4:	bl	199cc <__assert_fail@plt+0x85e8>
   14ed8:	mov	r0, r4
   14edc:	bl	11288 <exit@plt>
   14ee0:	mov	r0, #1
   14ee4:	bl	1402c <__assert_fail@plt+0x2c48>
   14ee8:	mov	r3, #1
   14eec:	str	r3, [sp, #36]	; 0x24
   14ef0:	str	r3, [sp, #24]
   14ef4:	b	14bbc <__assert_fail@plt+0x37d8>
   14ef8:	mov	r3, #0
   14efc:	str	r3, [sp, #36]	; 0x24
   14f00:	b	14bbc <__assert_fail@plt+0x37d8>
   14f04:	cmp	r7, #0
   14f08:	beq	14f1c <__assert_fail@plt+0x3b38>
   14f0c:	mov	r0, r7
   14f10:	bl	118e8 <__assert_fail@plt+0x504>
   14f14:	mov	r0, r7
   14f18:	bl	15598 <__assert_fail@plt+0x41b4>
   14f1c:	ldr	r3, [pc, #764]	; 15220 <__assert_fail@plt+0x3e3c>
   14f20:	ldr	r3, [r3, #80]	; 0x50
   14f24:	cmp	r3, #0
   14f28:	beq	150c8 <__assert_fail@plt+0x3ce4>
   14f2c:	ldr	r0, [pc, #812]	; 15260 <__assert_fail@plt+0x3e7c>
   14f30:	bl	11210 <getenv@plt>
   14f34:	bl	19058 <__assert_fail@plt+0x7c74>
   14f38:	ldr	r3, [pc, #736]	; 15220 <__assert_fail@plt+0x3e3c>
   14f3c:	str	r0, [r3, #76]	; 0x4c
   14f40:	ldrd	r2, [r3, #24]
   14f44:	orrs	r3, r2, r3
   14f48:	moveq	r0, #1
   14f4c:	moveq	r1, #0
   14f50:	ldreq	r3, [pc, #712]	; 15220 <__assert_fail@plt+0x3e3c>
   14f54:	strdeq	r0, [r3, #24]
   14f58:	ldr	r3, [pc, #704]	; 15220 <__assert_fail@plt+0x3e3c>
   14f5c:	ldrb	ip, [r3, #4]
   14f60:	cmp	ip, #0
   14f64:	beq	14f84 <__assert_fail@plt+0x3ba0>
   14f68:	ldrb	r3, [r3, #36]	; 0x24
   14f6c:	cmp	r3, #0
   14f70:	bne	15104 <__assert_fail@plt+0x3d20>
   14f74:	ldr	r3, [pc, #676]	; 15220 <__assert_fail@plt+0x3e3c>
   14f78:	ldrb	r3, [r3, #181]	; 0xb5
   14f7c:	cmp	r3, #0
   14f80:	bne	15124 <__assert_fail@plt+0x3d40>
   14f84:	ldr	r3, [sp, #24]
   14f88:	cmp	r3, #0
   14f8c:	beq	14fd0 <__assert_fail@plt+0x3bec>
   14f90:	ldr	r3, [sp, #28]
   14f94:	cmp	r3, #0
   14f98:	beq	15154 <__assert_fail@plt+0x3d70>
   14f9c:	cmp	ip, #0
   14fa0:	bne	14fb4 <__assert_fail@plt+0x3bd0>
   14fa4:	ldr	r3, [pc, #628]	; 15220 <__assert_fail@plt+0x3e3c>
   14fa8:	ldrb	r3, [r3, #36]	; 0x24
   14fac:	cmp	r3, #0
   14fb0:	beq	15144 <__assert_fail@plt+0x3d60>
   14fb4:	mov	r2, #1
   14fb8:	ldr	r3, [pc, #608]	; 15220 <__assert_fail@plt+0x3e3c>
   14fbc:	strb	r2, [r3, #60]	; 0x3c
   14fc0:	ldr	r3, [sp, #36]	; 0x24
   14fc4:	cmp	r3, #0
   14fc8:	ldrne	r3, [pc, #592]	; 15220 <__assert_fail@plt+0x3e3c>
   14fcc:	strbne	r2, [r3, #116]	; 0x74
   14fd0:	ldr	r3, [pc, #652]	; 15264 <__assert_fail@plt+0x3e80>
   14fd4:	ldr	r4, [r3]
   14fd8:	cmp	r9, r4
   14fdc:	ble	15028 <__assert_fail@plt+0x3c44>
   14fe0:	add	r3, r4, #1
   14fe4:	ldr	r2, [sp, #16]
   14fe8:	add	r8, r2, r4, lsl #2
   14fec:	ldr	r2, [sp, #32]
   14ff0:	ldr	r1, [sp, #20]
   14ff4:	add	r2, r2, r1, lsl #2
   14ff8:	add	lr, r9, #1
   14ffc:	ldr	r0, [pc, #608]	; 15264 <__assert_fail@plt+0x3e80>
   15000:	ldr	r1, [r8], #4
   15004:	str	r1, [r2], #4
   15008:	str	r3, [r0]
   1500c:	add	r3, r3, #1
   15010:	cmp	r3, lr
   15014:	bne	15000 <__assert_fail@plt+0x3c1c>
   15018:	sub	r9, r9, r4
   1501c:	ldr	r3, [sp, #20]
   15020:	add	r3, r3, r9
   15024:	str	r3, [sp, #20]
   15028:	ldr	r3, [sp, #20]
   1502c:	cmp	r3, #0
   15030:	beq	151c4 <__assert_fail@plt+0x3de0>
   15034:	cmp	ip, #0
   15038:	bne	151d4 <__assert_fail@plt+0x3df0>
   1503c:	ldr	r4, [sp, #32]
   15040:	mov	r5, #0
   15044:	mov	r6, #1
   15048:	ldr	r7, [sp, #20]
   1504c:	mov	r1, r4
   15050:	mov	r0, r6
   15054:	bl	12df8 <__assert_fail@plt+0x1a14>
   15058:	add	r5, r5, #1
   1505c:	add	r4, r4, #4
   15060:	cmp	r5, r7
   15064:	bne	1504c <__assert_fail@plt+0x3c68>
   15068:	ldr	r4, [pc, #432]	; 15220 <__assert_fail@plt+0x3e3c>
   1506c:	ldr	r0, [r4, #44]	; 0x2c
   15070:	bl	15598 <__assert_fail@plt+0x41b4>
   15074:	ldr	r0, [r4, #140]	; 0x8c
   15078:	bl	15598 <__assert_fail@plt+0x41b4>
   1507c:	ldr	r0, [r4]
   15080:	bl	15598 <__assert_fail@plt+0x41b4>
   15084:	ldr	r0, [r4, #148]	; 0x94
   15088:	bl	15598 <__assert_fail@plt+0x41b4>
   1508c:	ldr	r0, [r4, #156]	; 0x9c
   15090:	bl	15598 <__assert_fail@plt+0x41b4>
   15094:	ldr	r0, [r4, #20]
   15098:	bl	15598 <__assert_fail@plt+0x41b4>
   1509c:	ldrb	r3, [r4, #37]	; 0x25
   150a0:	cmp	r3, #0
   150a4:	beq	150bc <__assert_fail@plt+0x3cd8>
   150a8:	ldr	r3, [pc, #440]	; 15268 <__assert_fail@plt+0x3e84>
   150ac:	ldr	r0, [r3]
   150b0:	bl	153f0 <__assert_fail@plt+0x400c>
   150b4:	cmn	r0, #1
   150b8:	beq	151e4 <__assert_fail@plt+0x3e00>
   150bc:	ldr	r3, [pc, #348]	; 15220 <__assert_fail@plt+0x3e3c>
   150c0:	ldrb	r0, [r3, #38]	; 0x26
   150c4:	bl	11288 <exit@plt>
   150c8:	ldr	r0, [pc, #412]	; 1526c <__assert_fail@plt+0x3e88>
   150cc:	bl	11210 <getenv@plt>
   150d0:	cmp	r0, #0
   150d4:	beq	150fc <__assert_fail@plt+0x3d18>
   150d8:	mov	r0, #2
   150dc:	bl	156d4 <__assert_fail@plt+0x42f0>
   150e0:	ldr	r2, [pc, #392]	; 15270 <__assert_fail@plt+0x3e8c>
   150e4:	ldr	r3, [pc, #392]	; 15274 <__assert_fail@plt+0x3e90>
   150e8:	cmp	r0, #0
   150ec:	movne	r3, r2
   150f0:	ldr	r2, [pc, #296]	; 15220 <__assert_fail@plt+0x3e3c>
   150f4:	str	r3, [r2, #80]	; 0x50
   150f8:	b	14f2c <__assert_fail@plt+0x3b48>
   150fc:	ldr	r3, [pc, #364]	; 15270 <__assert_fail@plt+0x3e8c>
   15100:	b	150f0 <__assert_fail@plt+0x3d0c>
   15104:	mov	r2, #5
   15108:	ldr	r1, [pc, #360]	; 15278 <__assert_fail@plt+0x3e94>
   1510c:	mov	r0, #0
   15110:	bl	11168 <dcgettext@plt>
   15114:	mov	r2, r0
   15118:	mov	r1, #0
   1511c:	mov	r0, #1
   15120:	bl	11204 <error@plt>
   15124:	mov	r2, #5
   15128:	ldr	r1, [pc, #332]	; 1527c <__assert_fail@plt+0x3e98>
   1512c:	mov	r0, #0
   15130:	bl	11168 <dcgettext@plt>
   15134:	mov	r2, r0
   15138:	mov	r1, #0
   1513c:	mov	r0, #1
   15140:	bl	11204 <error@plt>
   15144:	mov	r2, #1
   15148:	ldr	r3, [pc, #208]	; 15220 <__assert_fail@plt+0x3e3c>
   1514c:	strb	r2, [r3, #178]	; 0xb2
   15150:	b	14fd0 <__assert_fail@plt+0x3bec>
   15154:	ldr	r3, [pc, #196]	; 15220 <__assert_fail@plt+0x3e3c>
   15158:	ldrb	r3, [r3, #116]	; 0x74
   1515c:	eor	r3, r3, #1
   15160:	ldr	r2, [sp, #36]	; 0x24
   15164:	tst	r2, r3
   15168:	beq	14fd0 <__assert_fail@plt+0x3bec>
   1516c:	cmp	ip, #0
   15170:	bne	15184 <__assert_fail@plt+0x3da0>
   15174:	ldr	r3, [pc, #164]	; 15220 <__assert_fail@plt+0x3e3c>
   15178:	ldrb	r3, [r3, #36]	; 0x24
   1517c:	cmp	r3, #0
   15180:	beq	14fd0 <__assert_fail@plt+0x3bec>
   15184:	ldr	r3, [pc, #148]	; 15220 <__assert_fail@plt+0x3e3c>
   15188:	ldrb	r3, [r3, #60]	; 0x3c
   1518c:	cmp	r3, #0
   15190:	bne	151b4 <__assert_fail@plt+0x3dd0>
   15194:	ldr	r3, [pc, #132]	; 15220 <__assert_fail@plt+0x3e3c>
   15198:	mov	r2, #1
   1519c:	strb	r2, [r3, #178]	; 0xb2
   151a0:	ldr	r3, [r3, #32]
   151a4:	cmp	r3, #0
   151a8:	ldrgt	r3, [pc, #112]	; 15220 <__assert_fail@plt+0x3e3c>
   151ac:	strbgt	r2, [r3, #116]	; 0x74
   151b0:	b	14fd0 <__assert_fail@plt+0x3bec>
   151b4:	mov	r2, #1
   151b8:	ldr	r3, [pc, #96]	; 15220 <__assert_fail@plt+0x3e3c>
   151bc:	strb	r2, [r3, #116]	; 0x74
   151c0:	b	14fd0 <__assert_fail@plt+0x3bec>
   151c4:	mov	r1, #0
   151c8:	mov	r0, r1
   151cc:	bl	12df8 <__assert_fail@plt+0x1a14>
   151d0:	b	15068 <__assert_fail@plt+0x3c84>
   151d4:	ldr	r1, [sp, #32]
   151d8:	ldr	r0, [sp, #20]
   151dc:	bl	12df8 <__assert_fail@plt+0x1a14>
   151e0:	b	15068 <__assert_fail@plt+0x3c84>
   151e4:	bl	112c4 <__errno_location@plt>
   151e8:	ldr	r4, [r0]
   151ec:	mov	r2, #5
   151f0:	ldr	r1, [pc, #136]	; 15280 <__assert_fail@plt+0x3e9c>
   151f4:	mov	r0, #0
   151f8:	bl	11168 <dcgettext@plt>
   151fc:	mov	r2, r0
   15200:	mov	r1, r4
   15204:	mov	r0, #1
   15208:	bl	11204 <error@plt>
   1520c:	andeq	ip, r1, ip, ror #3
   15210:	andeq	sp, r1, r8, ror #4
   15214:	andeq	sp, r1, r0, ror r3
   15218:	andeq	r5, r1, r4, lsr #5
   1521c:	andeq	fp, r1, r4, asr #30
   15220:	strdeq	lr, [r2], -r0
   15224:	andeq	lr, r2, r0, asr #2
   15228:	andeq	lr, r2, r8, ror #3
   1522c:			; <UNDEFINED> instruction: 0x0001d3bc
   15230:	andeq	sp, r1, r8, lsl #7
   15234:	ldrdeq	sp, [r1], -r4
   15238:	andeq	sp, r1, r0, lsl #8
   1523c:	andeq	sp, r1, ip, lsr #8
   15240:	andeq	sp, r1, ip, asr #8
   15244:	andeq	sp, r1, ip, ror r4
   15248:	andeq	sp, r1, ip, lsr #9
   1524c:			; <UNDEFINED> instruction: 0x0001d4bc
   15250:	andeq	lr, r2, r0, lsl #3
   15254:	andeq	sp, r1, r4, ror #4
   15258:	andeq	ip, r1, ip, asr #4
   1525c:	andeq	lr, r2, r4, ror #3
   15260:	ldrdeq	sp, [r1], -ip
   15264:	ldrdeq	lr, [r2], -r0
   15268:	andeq	lr, r2, r0, ror #3
   1526c:	andeq	sp, r1, ip, asr #9
   15270:	andeq	sp, r1, r0, ror #6
   15274:	andeq	sp, r1, r0, asr r3
   15278:	andeq	sp, r1, r0, ror #9
   1527c:	andeq	sp, r1, ip, lsl r5
   15280:	muleq	r1, r8, r1
   15284:	ldr	r3, [pc, #4]	; 15290 <__assert_fail@plt+0x3eac>
   15288:	str	r0, [r3]
   1528c:	bx	lr
   15290:	andeq	lr, r2, r8, lsr #5
   15294:	ldr	r3, [pc, #4]	; 152a0 <__assert_fail@plt+0x3ebc>
   15298:	strb	r0, [r3, #4]
   1529c:	bx	lr
   152a0:	andeq	lr, r2, r8, lsr #5
   152a4:	push	{r4, r5, r6, lr}
   152a8:	sub	sp, sp, #8
   152ac:	ldr	r3, [pc, #200]	; 1537c <__assert_fail@plt+0x3f98>
   152b0:	ldr	r0, [r3]
   152b4:	bl	1b480 <__assert_fail@plt+0xa09c>
   152b8:	cmp	r0, #0
   152bc:	beq	152e0 <__assert_fail@plt+0x3efc>
   152c0:	ldr	r3, [pc, #184]	; 15380 <__assert_fail@plt+0x3f9c>
   152c4:	ldrb	r3, [r3, #4]
   152c8:	cmp	r3, #0
   152cc:	beq	152fc <__assert_fail@plt+0x3f18>
   152d0:	bl	112c4 <__errno_location@plt>
   152d4:	ldr	r3, [r0]
   152d8:	cmp	r3, #32
   152dc:	bne	152fc <__assert_fail@plt+0x3f18>
   152e0:	ldr	r3, [pc, #156]	; 15384 <__assert_fail@plt+0x3fa0>
   152e4:	ldr	r0, [r3]
   152e8:	bl	1b480 <__assert_fail@plt+0xa09c>
   152ec:	cmp	r0, #0
   152f0:	bne	15370 <__assert_fail@plt+0x3f8c>
   152f4:	add	sp, sp, #8
   152f8:	pop	{r4, r5, r6, pc}
   152fc:	mov	r2, #5
   15300:	ldr	r1, [pc, #128]	; 15388 <__assert_fail@plt+0x3fa4>
   15304:	mov	r0, #0
   15308:	bl	11168 <dcgettext@plt>
   1530c:	mov	r4, r0
   15310:	ldr	r3, [pc, #104]	; 15380 <__assert_fail@plt+0x3f9c>
   15314:	ldr	r5, [r3]
   15318:	cmp	r5, #0
   1531c:	beq	15354 <__assert_fail@plt+0x3f70>
   15320:	bl	112c4 <__errno_location@plt>
   15324:	ldr	r6, [r0]
   15328:	mov	r0, r5
   1532c:	bl	18de8 <__assert_fail@plt+0x7a04>
   15330:	str	r4, [sp]
   15334:	mov	r3, r0
   15338:	ldr	r2, [pc, #76]	; 1538c <__assert_fail@plt+0x3fa8>
   1533c:	mov	r1, r6
   15340:	mov	r0, #0
   15344:	bl	11204 <error@plt>
   15348:	ldr	r3, [pc, #64]	; 15390 <__assert_fail@plt+0x3fac>
   1534c:	ldr	r0, [r3]
   15350:	bl	11120 <_exit@plt>
   15354:	bl	112c4 <__errno_location@plt>
   15358:	mov	r3, r4
   1535c:	ldr	r2, [pc, #48]	; 15394 <__assert_fail@plt+0x3fb0>
   15360:	ldr	r1, [r0]
   15364:	mov	r0, #0
   15368:	bl	11204 <error@plt>
   1536c:	b	15348 <__assert_fail@plt+0x3f64>
   15370:	ldr	r3, [pc, #24]	; 15390 <__assert_fail@plt+0x3fac>
   15374:	ldr	r0, [r3]
   15378:	bl	11120 <_exit@plt>
   1537c:	andeq	lr, r2, r4, ror #3
   15380:	andeq	lr, r2, r8, lsr #5
   15384:	ldrdeq	lr, [r2], -r8
   15388:	andeq	sp, r1, r4, lsl r7
   1538c:	andeq	sp, r1, r0, lsr #14
   15390:	andeq	lr, r2, r4, lsl #3
   15394:	andeq	sp, r1, r4, lsr #14
   15398:	push	{r4, r5, lr}
   1539c:	sub	sp, sp, #20
   153a0:	ldr	r1, [sp, #40]	; 0x28
   153a4:	str	r1, [sp, #8]
   153a8:	ldrd	r4, [sp, #32]
   153ac:	strd	r4, [sp]
   153b0:	bl	110d8 <posix_fadvise64@plt>
   153b4:	add	sp, sp, #20
   153b8:	pop	{r4, r5, pc}
   153bc:	cmp	r0, #0
   153c0:	bxeq	lr
   153c4:	push	{r4, lr}
   153c8:	sub	sp, sp, #16
   153cc:	mov	r4, r1
   153d0:	bl	11300 <fileno@plt>
   153d4:	str	r4, [sp, #8]
   153d8:	mov	r2, #0
   153dc:	mov	r3, #0
   153e0:	strd	r2, [sp]
   153e4:	bl	110d8 <posix_fadvise64@plt>
   153e8:	add	sp, sp, #16
   153ec:	pop	{r4, pc}
   153f0:	push	{r4, r5, r6, lr}
   153f4:	sub	sp, sp, #8
   153f8:	mov	r4, r0
   153fc:	bl	11300 <fileno@plt>
   15400:	cmp	r0, #0
   15404:	blt	1547c <__assert_fail@plt+0x4098>
   15408:	mov	r0, r4
   1540c:	bl	11240 <__freading@plt>
   15410:	cmp	r0, #0
   15414:	beq	15448 <__assert_fail@plt+0x4064>
   15418:	mov	r0, r4
   1541c:	bl	11300 <fileno@plt>
   15420:	mov	r3, #1
   15424:	str	r3, [sp]
   15428:	mov	r2, #0
   1542c:	mov	r3, #0
   15430:	bl	111d4 <lseek64@plt>
   15434:	mvn	r2, #0
   15438:	mvn	r3, #0
   1543c:	cmp	r1, r3
   15440:	cmpeq	r0, r2
   15444:	beq	15488 <__assert_fail@plt+0x40a4>
   15448:	mov	r0, r4
   1544c:	bl	15498 <__assert_fail@plt+0x40b4>
   15450:	cmp	r0, #0
   15454:	beq	15488 <__assert_fail@plt+0x40a4>
   15458:	bl	112c4 <__errno_location@plt>
   1545c:	mov	r5, r0
   15460:	ldr	r6, [r0]
   15464:	mov	r0, r4
   15468:	bl	11318 <fclose@plt>
   1546c:	cmp	r6, #0
   15470:	strne	r6, [r5]
   15474:	mvnne	r0, #0
   15478:	b	15490 <__assert_fail@plt+0x40ac>
   1547c:	mov	r0, r4
   15480:	bl	11318 <fclose@plt>
   15484:	b	15490 <__assert_fail@plt+0x40ac>
   15488:	mov	r0, r4
   1548c:	bl	11318 <fclose@plt>
   15490:	add	sp, sp, #8
   15494:	pop	{r4, r5, r6, pc}
   15498:	push	{r4, lr}
   1549c:	sub	sp, sp, #8
   154a0:	subs	r4, r0, #0
   154a4:	beq	154b8 <__assert_fail@plt+0x40d4>
   154a8:	mov	r0, r4
   154ac:	bl	11240 <__freading@plt>
   154b0:	cmp	r0, #0
   154b4:	bne	154c8 <__assert_fail@plt+0x40e4>
   154b8:	mov	r0, r4
   154bc:	bl	110f0 <fflush@plt>
   154c0:	add	sp, sp, #8
   154c4:	pop	{r4, pc}
   154c8:	ldr	r3, [r4]
   154cc:	tst	r3, #256	; 0x100
   154d0:	bne	154e0 <__assert_fail@plt+0x40fc>
   154d4:	mov	r0, r4
   154d8:	bl	110f0 <fflush@plt>
   154dc:	b	154c0 <__assert_fail@plt+0x40dc>
   154e0:	mov	r3, #1
   154e4:	str	r3, [sp]
   154e8:	mov	r2, #0
   154ec:	mov	r3, #0
   154f0:	mov	r0, r4
   154f4:	bl	155f0 <__assert_fail@plt+0x420c>
   154f8:	b	154d4 <__assert_fail@plt+0x40f0>
   154fc:	push	{r4, r5, r6, lr}
   15500:	mov	r5, r1
   15504:	bl	1139c <fopen64@plt>
   15508:	subs	r4, r0, #0
   1550c:	beq	15520 <__assert_fail@plt+0x413c>
   15510:	mov	r0, r4
   15514:	bl	11300 <fileno@plt>
   15518:	cmp	r0, #2
   1551c:	bls	15528 <__assert_fail@plt+0x4144>
   15520:	mov	r0, r4
   15524:	pop	{r4, r5, r6, pc}
   15528:	bl	19500 <__assert_fail@plt+0x811c>
   1552c:	subs	r6, r0, #0
   15530:	blt	15578 <__assert_fail@plt+0x4194>
   15534:	mov	r0, r4
   15538:	bl	153f0 <__assert_fail@plt+0x400c>
   1553c:	cmp	r0, #0
   15540:	bne	15558 <__assert_fail@plt+0x4174>
   15544:	mov	r1, r5
   15548:	mov	r0, r6
   1554c:	bl	11084 <fdopen@plt>
   15550:	subs	r4, r0, #0
   15554:	bne	15520 <__assert_fail@plt+0x413c>
   15558:	bl	112c4 <__errno_location@plt>
   1555c:	mov	r4, r0
   15560:	ldr	r5, [r0]
   15564:	mov	r0, r6
   15568:	bl	113d8 <close@plt>
   1556c:	str	r5, [r4]
   15570:	mov	r4, #0
   15574:	b	15520 <__assert_fail@plt+0x413c>
   15578:	bl	112c4 <__errno_location@plt>
   1557c:	mov	r5, r0
   15580:	ldr	r6, [r0]
   15584:	mov	r0, r4
   15588:	bl	153f0 <__assert_fail@plt+0x400c>
   1558c:	str	r6, [r5]
   15590:	mov	r4, #0
   15594:	b	15520 <__assert_fail@plt+0x413c>
   15598:	push	{r4, r5, lr}
   1559c:	sub	sp, sp, #12
   155a0:	mov	r5, r0
   155a4:	bl	112c4 <__errno_location@plt>
   155a8:	mov	r4, r0
   155ac:	ldr	r3, [r0]
   155b0:	str	r3, [sp]
   155b4:	str	r3, [sp, #4]
   155b8:	mov	r3, #0
   155bc:	str	r3, [r0]
   155c0:	mov	r0, r5
   155c4:	bl	11108 <free@plt>
   155c8:	ldr	r3, [r4]
   155cc:	cmp	r3, #0
   155d0:	moveq	r3, #4
   155d4:	movne	r3, #0
   155d8:	add	r2, sp, #8
   155dc:	add	r3, r2, r3
   155e0:	ldr	r3, [r3, #-8]
   155e4:	str	r3, [r4]
   155e8:	add	sp, sp, #12
   155ec:	pop	{r4, r5, pc}
   155f0:	push	{r4, r5, r6, r7, lr}
   155f4:	sub	sp, sp, #12
   155f8:	mov	r4, r0
   155fc:	mov	r6, r2
   15600:	mov	r7, r3
   15604:	ldr	r5, [sp, #32]
   15608:	ldr	r2, [r0, #8]
   1560c:	ldr	r3, [r0, #4]
   15610:	cmp	r2, r3
   15614:	beq	15634 <__assert_fail@plt+0x4250>
   15618:	str	r5, [sp]
   1561c:	mov	r2, r6
   15620:	mov	r3, r7
   15624:	mov	r0, r4
   15628:	bl	11324 <fseeko64@plt>
   1562c:	add	sp, sp, #12
   15630:	pop	{r4, r5, r6, r7, pc}
   15634:	ldr	r2, [r0, #20]
   15638:	ldr	r3, [r0, #16]
   1563c:	cmp	r2, r3
   15640:	bne	15618 <__assert_fail@plt+0x4234>
   15644:	ldr	r3, [r0, #36]	; 0x24
   15648:	cmp	r3, #0
   1564c:	bne	15618 <__assert_fail@plt+0x4234>
   15650:	bl	11300 <fileno@plt>
   15654:	str	r5, [sp]
   15658:	mov	r2, r6
   1565c:	mov	r3, r7
   15660:	bl	111d4 <lseek64@plt>
   15664:	mvn	r2, #0
   15668:	mvn	r3, #0
   1566c:	cmp	r1, r3
   15670:	cmpeq	r0, r2
   15674:	beq	15690 <__assert_fail@plt+0x42ac>
   15678:	ldr	r3, [r4]
   1567c:	bic	r3, r3, #16
   15680:	str	r3, [r4]
   15684:	strd	r0, [r4, #80]	; 0x50
   15688:	mov	r0, #0
   1568c:	b	1562c <__assert_fail@plt+0x4248>
   15690:	mvn	r0, #0
   15694:	b	1562c <__assert_fail@plt+0x4248>
   15698:	push	{r4, lr}
   1569c:	mov	r1, r0
   156a0:	mov	r0, #0
   156a4:	bl	11114 <clock_gettime@plt>
   156a8:	pop	{r4, pc}
   156ac:	push	{r4, r5, lr}
   156b0:	sub	sp, sp, #12
   156b4:	mov	r4, r0
   156b8:	mov	r0, sp
   156bc:	bl	15698 <__assert_fail@plt+0x42b4>
   156c0:	ldm	sp, {r0, r1}
   156c4:	stm	r4, {r0, r1}
   156c8:	mov	r0, r4
   156cc:	add	sp, sp, #12
   156d0:	pop	{r4, r5, pc}
   156d4:	push	{lr}		; (str lr, [sp, #-4]!)
   156d8:	sub	sp, sp, #268	; 0x10c
   156dc:	ldr	r2, [pc, #68]	; 15728 <__assert_fail@plt+0x4344>
   156e0:	add	r1, sp, #4
   156e4:	bl	18f84 <__assert_fail@plt+0x7ba0>
   156e8:	cmp	r0, #0
   156ec:	movne	r0, #0
   156f0:	bne	15720 <__assert_fail@plt+0x433c>
   156f4:	ldr	r1, [pc, #48]	; 1572c <__assert_fail@plt+0x4348>
   156f8:	add	r0, sp, #4
   156fc:	bl	110c0 <strcmp@plt>
   15700:	cmp	r0, #0
   15704:	moveq	r0, #0
   15708:	beq	15720 <__assert_fail@plt+0x433c>
   1570c:	ldr	r1, [pc, #28]	; 15730 <__assert_fail@plt+0x434c>
   15710:	add	r0, sp, #4
   15714:	bl	110c0 <strcmp@plt>
   15718:	adds	r0, r0, #0
   1571c:	movne	r0, #1
   15720:	add	sp, sp, #268	; 0x10c
   15724:	pop	{pc}		; (ldr pc, [sp], #4)
   15728:	andeq	r0, r0, r1, lsl #2
   1572c:	andeq	sp, r1, r8, lsr #14
   15730:	andeq	sp, r1, ip, lsr #14
   15734:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15738:	mov	r4, r0
   1573c:	mov	r5, r1
   15740:	add	r6, r2, #20
   15744:	mov	r3, #0
   15748:	strb	r3, [r2, #20]
   1574c:	cmp	r0, #0
   15750:	sbcs	r3, r1, #0
   15754:	movlt	r8, #10
   15758:	movlt	r9, #0
   1575c:	blt	157b4 <__assert_fail@plt+0x43d0>
   15760:	mov	r8, #10
   15764:	mov	r9, #0
   15768:	mov	r2, r8
   1576c:	mov	r3, r9
   15770:	mov	r0, r4
   15774:	mov	r1, r5
   15778:	bl	1bc74 <__assert_fail@plt+0xa890>
   1577c:	add	r2, r2, #48	; 0x30
   15780:	strb	r2, [r6, #-1]!
   15784:	mov	r2, r8
   15788:	mov	r3, r9
   1578c:	mov	r0, r4
   15790:	mov	r1, r5
   15794:	bl	1bc74 <__assert_fail@plt+0xa890>
   15798:	mov	r4, r0
   1579c:	mov	r5, r1
   157a0:	orrs	r3, r4, r5
   157a4:	bne	15768 <__assert_fail@plt+0x4384>
   157a8:	mov	r0, r6
   157ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   157b0:	mov	r6, r7
   157b4:	sub	r7, r6, #1
   157b8:	mov	r2, r8
   157bc:	mov	r3, r9
   157c0:	mov	r0, r4
   157c4:	mov	r1, r5
   157c8:	bl	1bc74 <__assert_fail@plt+0xa890>
   157cc:	rsb	r2, r2, #48	; 0x30
   157d0:	strb	r2, [r6, #-1]
   157d4:	mov	r2, r8
   157d8:	mov	r3, r9
   157dc:	mov	r0, r4
   157e0:	mov	r1, r5
   157e4:	bl	1bc74 <__assert_fail@plt+0xa890>
   157e8:	mov	r4, r0
   157ec:	mov	r5, r1
   157f0:	orrs	r3, r4, r5
   157f4:	bne	157b0 <__assert_fail@plt+0x43cc>
   157f8:	sub	r6, r6, #2
   157fc:	mov	r3, #45	; 0x2d
   15800:	strb	r3, [r7, #-1]
   15804:	b	157a8 <__assert_fail@plt+0x43c4>
   15808:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1580c:	sub	sp, sp, #28
   15810:	mov	r5, r0
   15814:	mov	r4, r2
   15818:	add	r8, r0, r1
   1581c:	bl	111e0 <__ctype_get_mb_cur_max@plt>
   15820:	cmp	r0, #1
   15824:	bls	1584c <__assert_fail@plt+0x4468>
   15828:	cmp	r5, r8
   1582c:	bcs	159e8 <__assert_fail@plt+0x4604>
   15830:	mov	r6, #0
   15834:	mov	fp, r6
   15838:	and	sl, r4, #2
   1583c:	mvn	r9, #-2147483648	; 0x80000000
   15840:	and	r3, r4, #1
   15844:	str	r3, [sp, #4]
   15848:	b	15898 <__assert_fail@plt+0x44b4>
   1584c:	cmp	r5, r8
   15850:	movcs	r6, #0
   15854:	bcs	15990 <__assert_fail@plt+0x45ac>
   15858:	bl	1127c <__ctype_b_loc@plt>
   1585c:	ldr	r1, [r0]
   15860:	mov	r6, #0
   15864:	and	r2, r4, #2
   15868:	b	159a8 <__assert_fail@plt+0x45c4>
   1586c:	cmp	r3, #65	; 0x41
   15870:	bcc	158b8 <__assert_fail@plt+0x44d4>
   15874:	cmp	r3, #95	; 0x5f
   15878:	bls	15888 <__assert_fail@plt+0x44a4>
   1587c:	sub	r3, r3, #97	; 0x61
   15880:	cmp	r3, #29
   15884:	bhi	158b8 <__assert_fail@plt+0x44d4>
   15888:	add	r5, r5, #1
   1588c:	add	r6, r6, #1
   15890:	cmp	r8, r5
   15894:	bls	15990 <__assert_fail@plt+0x45ac>
   15898:	ldrb	r3, [r5]
   1589c:	cmp	r3, #63	; 0x3f
   158a0:	bhi	1586c <__assert_fail@plt+0x4488>
   158a4:	cmp	r3, #37	; 0x25
   158a8:	bcs	15888 <__assert_fail@plt+0x44a4>
   158ac:	sub	r3, r3, #32
   158b0:	cmp	r3, #3
   158b4:	bls	15888 <__assert_fail@plt+0x44a4>
   158b8:	add	r7, sp, #24
   158bc:	str	fp, [r7, #-8]!
   158c0:	str	fp, [sp, #20]
   158c4:	b	15930 <__assert_fail@plt+0x454c>
   158c8:	ldr	r3, [sp, #4]
   158cc:	cmp	r3, #0
   158d0:	bne	15984 <__assert_fail@plt+0x45a0>
   158d4:	add	r5, r5, #1
   158d8:	add	r6, r6, #1
   158dc:	b	15890 <__assert_fail@plt+0x44ac>
   158e0:	ldr	r3, [sp, #4]
   158e4:	cmp	r3, #0
   158e8:	bne	15984 <__assert_fail@plt+0x45a0>
   158ec:	add	r6, r6, #1
   158f0:	mov	r5, r8
   158f4:	b	15890 <__assert_fail@plt+0x44ac>
   158f8:	cmp	sl, #0
   158fc:	bne	15984 <__assert_fail@plt+0x45a0>
   15900:	ldr	r0, [sp, #12]
   15904:	bl	11198 <iswcntrl@plt>
   15908:	cmp	r0, #0
   1590c:	bne	1591c <__assert_fail@plt+0x4538>
   15910:	cmn	r6, #-2147483647	; 0x80000001
   15914:	beq	1598c <__assert_fail@plt+0x45a8>
   15918:	add	r6, r6, #1
   1591c:	add	r5, r5, r4
   15920:	mov	r0, r7
   15924:	bl	11144 <mbsinit@plt>
   15928:	cmp	r0, #0
   1592c:	bne	15890 <__assert_fail@plt+0x44ac>
   15930:	mov	r3, r7
   15934:	sub	r2, r8, r5
   15938:	mov	r1, r5
   1593c:	add	r0, sp, #12
   15940:	bl	1b784 <__assert_fail@plt+0xa3a0>
   15944:	mov	r4, r0
   15948:	cmn	r0, #1
   1594c:	beq	158c8 <__assert_fail@plt+0x44e4>
   15950:	cmn	r0, #2
   15954:	beq	158e0 <__assert_fail@plt+0x44fc>
   15958:	cmp	r0, #0
   1595c:	moveq	r4, #1
   15960:	ldr	r0, [sp, #12]
   15964:	bl	110fc <wcwidth@plt>
   15968:	cmp	r0, #0
   1596c:	blt	158f8 <__assert_fail@plt+0x4514>
   15970:	sub	r3, r9, r6
   15974:	cmp	r0, r3
   15978:	bgt	1598c <__assert_fail@plt+0x45a8>
   1597c:	add	r6, r6, r0
   15980:	b	1591c <__assert_fail@plt+0x4538>
   15984:	mvn	r6, #0
   15988:	b	15990 <__assert_fail@plt+0x45ac>
   1598c:	mvn	r6, #-2147483648	; 0x80000000
   15990:	mov	r0, r6
   15994:	add	sp, sp, #28
   15998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1599c:	add	r6, r6, #1
   159a0:	cmp	r8, r5
   159a4:	beq	15990 <__assert_fail@plt+0x45ac>
   159a8:	ldrb	r3, [r5], #1
   159ac:	lsl	r3, r3, #1
   159b0:	ldrh	r3, [r1, r3]
   159b4:	tst	r3, #16384	; 0x4000
   159b8:	beq	159c8 <__assert_fail@plt+0x45e4>
   159bc:	cmn	r6, #-2147483647	; 0x80000001
   159c0:	bne	1599c <__assert_fail@plt+0x45b8>
   159c4:	b	15990 <__assert_fail@plt+0x45ac>
   159c8:	cmp	r2, #0
   159cc:	bne	159f0 <__assert_fail@plt+0x460c>
   159d0:	tst	r3, #2
   159d4:	bne	159a0 <__assert_fail@plt+0x45bc>
   159d8:	cmn	r6, #-2147483647	; 0x80000001
   159dc:	beq	15990 <__assert_fail@plt+0x45ac>
   159e0:	add	r6, r6, #1
   159e4:	b	159a0 <__assert_fail@plt+0x45bc>
   159e8:	mov	r6, #0
   159ec:	b	15990 <__assert_fail@plt+0x45ac>
   159f0:	mvn	r6, #0
   159f4:	b	15990 <__assert_fail@plt+0x45ac>
   159f8:	push	{r4, r5, r6, lr}
   159fc:	mov	r4, r0
   15a00:	mov	r5, r1
   15a04:	bl	11294 <strlen@plt>
   15a08:	mov	r2, r5
   15a0c:	mov	r1, r0
   15a10:	mov	r0, r4
   15a14:	bl	15808 <__assert_fail@plt+0x4424>
   15a18:	pop	{r4, r5, r6, pc}
   15a1c:	push	{r4, r5, r6, lr}
   15a20:	mov	r5, r0
   15a24:	subs	r4, r2, #0
   15a28:	beq	15a58 <__assert_fail@plt+0x4674>
   15a2c:	mov	r6, r1
   15a30:	bl	1124c <__ctype_tolower_loc@plt>
   15a34:	add	r3, r6, r4
   15a38:	add	r2, r5, r4
   15a3c:	mov	r1, r6
   15a40:	ldrb	lr, [r3, #-1]!
   15a44:	ldr	ip, [r0]
   15a48:	ldr	ip, [ip, lr, lsl #2]
   15a4c:	strb	ip, [r2, #-1]!
   15a50:	cmp	r3, r1
   15a54:	bne	15a40 <__assert_fail@plt+0x465c>
   15a58:	mov	r0, r5
   15a5c:	pop	{r4, r5, r6, pc}
   15a60:	push	{r4, r5, r6, lr}
   15a64:	mov	r5, r0
   15a68:	subs	r4, r2, #0
   15a6c:	beq	15a9c <__assert_fail@plt+0x46b8>
   15a70:	mov	r6, r1
   15a74:	bl	11258 <__ctype_toupper_loc@plt>
   15a78:	add	r3, r6, r4
   15a7c:	add	r2, r5, r4
   15a80:	mov	r1, r6
   15a84:	ldrb	lr, [r3, #-1]!
   15a88:	ldr	ip, [r0]
   15a8c:	ldr	ip, [ip, lr, lsl #2]
   15a90:	strb	ip, [r2, #-1]!
   15a94:	cmp	r3, r1
   15a98:	bne	15a84 <__assert_fail@plt+0x46a0>
   15a9c:	mov	r0, r5
   15aa0:	pop	{r4, r5, r6, pc}
   15aa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15aa8:	sub	sp, sp, #1104	; 0x450
   15aac:	sub	sp, sp, #12
   15ab0:	mov	sl, r0
   15ab4:	str	r1, [sp, #32]
   15ab8:	mov	r9, r2
   15abc:	mov	r4, r3
   15ac0:	str	r3, [sp, #36]	; 0x24
   15ac4:	ldrb	r3, [sp, #1152]	; 0x480
   15ac8:	str	r3, [sp, #56]	; 0x38
   15acc:	ldr	r5, [sp, #1160]	; 0x488
   15ad0:	bl	112c4 <__errno_location@plt>
   15ad4:	str	r0, [sp, #44]	; 0x2c
   15ad8:	ldr	r3, [r0]
   15adc:	str	r3, [sp, #64]	; 0x40
   15ae0:	ldr	r2, [r4, #8]
   15ae4:	mov	r0, r2
   15ae8:	str	r2, [sp, #48]	; 0x30
   15aec:	ldr	r3, [r4, #40]	; 0x28
   15af0:	mov	r1, r3
   15af4:	ldr	r3, [pc, #4012]	; 16aa8 <__assert_fail@plt+0x56c4>
   15af8:	mov	r2, r1
   15afc:	cmp	r1, #0
   15b00:	moveq	r2, r3
   15b04:	str	r2, [sp, #60]	; 0x3c
   15b08:	cmp	r0, #12
   15b0c:	ble	15b30 <__assert_fail@plt+0x474c>
   15b10:	sub	r3, r0, #12
   15b14:	str	r3, [sp, #48]	; 0x30
   15b18:	ldrb	r3, [r9]
   15b1c:	cmp	r3, #0
   15b20:	beq	1726c <__assert_fail@plt+0x5e88>
   15b24:	mov	fp, #0
   15b28:	ldr	r6, [pc, #3964]	; 16aac <__assert_fail@plt+0x56c8>
   15b2c:	b	15b94 <__assert_fail@plt+0x47b0>
   15b30:	ldr	r2, [sp, #48]	; 0x30
   15b34:	mov	r3, r2
   15b38:	cmp	r2, #0
   15b3c:	moveq	r3, #12
   15b40:	str	r3, [sp, #48]	; 0x30
   15b44:	b	15b18 <__assert_fail@plt+0x4734>
   15b48:	cmp	sl, #0
   15b4c:	beq	15b78 <__assert_fail@plt+0x4794>
   15b50:	cmp	r5, #1
   15b54:	bls	15b70 <__assert_fail@plt+0x478c>
   15b58:	sub	r5, r5, #1
   15b5c:	mov	r2, r5
   15b60:	mov	r1, #32
   15b64:	mov	r0, sl
   15b68:	bl	112e8 <memset@plt>
   15b6c:	add	sl, sl, r5
   15b70:	ldrb	r3, [r9]
   15b74:	strb	r3, [sl], #1
   15b78:	add	fp, fp, r4
   15b7c:	mov	r7, r9
   15b80:	add	r9, r7, #1
   15b84:	ldrb	r3, [r7, #1]
   15b88:	mvn	r5, #0
   15b8c:	cmp	r3, #0
   15b90:	beq	17270 <__assert_fail@plt+0x5e8c>
   15b94:	cmp	r3, #37	; 0x25
   15b98:	beq	15cf0 <__assert_fail@plt+0x490c>
   15b9c:	bic	r5, r5, r5, asr #31
   15ba0:	cmp	r5, #1
   15ba4:	movcs	r4, r5
   15ba8:	movcc	r4, #1
   15bac:	ldr	r3, [sp, #32]
   15bb0:	sub	r3, r3, fp
   15bb4:	cmp	r4, r3
   15bb8:	bcc	15b48 <__assert_fail@plt+0x4764>
   15bbc:	mov	r3, #34	; 0x22
   15bc0:	ldr	r2, [sp, #44]	; 0x2c
   15bc4:	str	r3, [r2]
   15bc8:	mov	fp, #0
   15bcc:	mov	r0, fp
   15bd0:	add	sp, sp, #1104	; 0x450
   15bd4:	add	sp, sp, #12
   15bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bdc:	str	r3, [sp, #28]
   15be0:	b	15be8 <__assert_fail@plt+0x4804>
   15be4:	mov	r8, r1
   15be8:	ldrb	r3, [r7, #1]!
   15bec:	sub	r2, r3, #35	; 0x23
   15bf0:	cmp	r2, #60	; 0x3c
   15bf4:	ldrls	pc, [pc, r2, lsl #2]
   15bf8:	b	15d18 <__assert_fail@plt+0x4934>
   15bfc:	andeq	r5, r1, r4, ror #23
   15c00:	andeq	r5, r1, r8, lsl sp
   15c04:	andeq	r5, r1, r8, lsl sp
   15c08:	andeq	r5, r1, r8, lsl sp
   15c0c:	andeq	r5, r1, r8, lsl sp
   15c10:	andeq	r5, r1, r8, lsl sp
   15c14:	andeq	r5, r1, r8, lsl sp
   15c18:	andeq	r5, r1, r8, lsl sp
   15c1c:	ldrdeq	r5, [r1], -ip
   15c20:	andeq	r5, r1, r8, lsl sp
   15c24:	ldrdeq	r5, [r1], -ip
   15c28:	andeq	r5, r1, r8, lsl sp
   15c2c:	andeq	r5, r1, r8, lsl sp
   15c30:	ldrdeq	r5, [r1], -ip
   15c34:	andeq	r5, r1, r8, lsl sp
   15c38:	andeq	r5, r1, r8, lsl sp
   15c3c:	andeq	r5, r1, r8, lsl sp
   15c40:	andeq	r5, r1, r8, lsl sp
   15c44:	andeq	r5, r1, r8, lsl sp
   15c48:	andeq	r5, r1, r8, lsl sp
   15c4c:	andeq	r5, r1, r8, lsl sp
   15c50:	andeq	r5, r1, r8, lsl sp
   15c54:	andeq	r5, r1, r8, lsl sp
   15c58:	andeq	r5, r1, r8, lsl sp
   15c5c:	andeq	r5, r1, r8, lsl sp
   15c60:	andeq	r5, r1, r8, lsl sp
   15c64:	andeq	r5, r1, r8, lsl sp
   15c68:	andeq	r5, r1, r8, lsl sp
   15c6c:	andeq	r5, r1, r8, lsl sp
   15c70:	andeq	r5, r1, r8, lsl sp
   15c74:	andeq	r5, r1, r8, lsl sp
   15c78:	andeq	r5, r1, r8, lsl sp
   15c7c:	andeq	r5, r1, r8, lsl sp
   15c80:	andeq	r5, r1, r8, lsl sp
   15c84:	andeq	r5, r1, r8, lsl sp
   15c88:	andeq	r5, r1, r8, lsl sp
   15c8c:	andeq	r5, r1, r8, lsl sp
   15c90:	andeq	r5, r1, r8, lsl sp
   15c94:	andeq	r5, r1, r8, lsl sp
   15c98:	andeq	r5, r1, r8, lsl sp
   15c9c:	andeq	r5, r1, r8, lsl sp
   15ca0:	andeq	r5, r1, r8, lsl sp
   15ca4:	andeq	r5, r1, r8, lsl sp
   15ca8:	andeq	r5, r1, r8, lsl sp
   15cac:	andeq	r5, r1, r8, lsl sp
   15cb0:	andeq	r5, r1, r8, lsl sp
   15cb4:	andeq	r5, r1, r8, lsl sp
   15cb8:	andeq	r5, r1, r8, lsl sp
   15cbc:	andeq	r5, r1, r8, lsl sp
   15cc0:	andeq	r5, r1, r8, lsl sp
   15cc4:	andeq	r5, r1, r8, lsl sp
   15cc8:	andeq	r5, r1, r8, lsl sp
   15ccc:	andeq	r5, r1, r8, lsl sp
   15cd0:	andeq	r5, r1, r8, lsl sp
   15cd4:	andeq	r5, r1, r8, lsl sp
   15cd8:	andeq	r5, r1, r8, lsl sp
   15cdc:	andeq	r5, r1, r8, lsl sp
   15ce0:	andeq	r5, r1, r8, lsl sp
   15ce4:	andeq	r5, r1, r8, lsl sp
   15ce8:	andeq	r5, r1, ip, lsl #26
   15cec:	ldrdeq	r5, [r1], -ip
   15cf0:	ldr	r3, [sp, #56]	; 0x38
   15cf4:	str	r3, [sp, #40]	; 0x28
   15cf8:	mov	r7, r9
   15cfc:	mov	r8, #0
   15d00:	str	r8, [sp, #28]
   15d04:	mov	r1, #1
   15d08:	b	15be8 <__assert_fail@plt+0x4804>
   15d0c:	mov	r3, #1
   15d10:	str	r3, [sp, #40]	; 0x28
   15d14:	b	15be8 <__assert_fail@plt+0x4804>
   15d18:	sub	r3, r3, #48	; 0x30
   15d1c:	cmp	r3, #9
   15d20:	bhi	15df8 <__assert_fail@plt+0x4a14>
   15d24:	mov	r5, #0
   15d28:	ldr	r4, [pc, #3456]	; 16ab0 <__assert_fail@plt+0x56cc>
   15d2c:	b	15d88 <__assert_fail@plt+0x49a4>
   15d30:	cmn	r5, #1
   15d34:	moveq	r0, #0
   15d38:	beq	15d9c <__assert_fail@plt+0x49b8>
   15d3c:	mov	r1, r5
   15d40:	mov	r0, #-2147483648	; 0x80000000
   15d44:	bl	1ba34 <__assert_fail@plt+0xa650>
   15d48:	cmp	r0, #9
   15d4c:	movgt	r0, #0
   15d50:	movle	r0, #1
   15d54:	b	15d9c <__assert_fail@plt+0x49b8>
   15d58:	rsb	r3, r2, #-2147483600	; 0x80000030
   15d5c:	cmp	r5, r3
   15d60:	movge	r3, #0
   15d64:	movlt	r3, #1
   15d68:	cmp	r3, #0
   15d6c:	addeq	r5, r2, r5
   15d70:	subeq	r5, r5, #48	; 0x30
   15d74:	mvnne	r5, #-2147483648	; 0x80000000
   15d78:	ldrb	r3, [r7, #1]!
   15d7c:	sub	r3, r3, #48	; 0x30
   15d80:	cmp	r3, #9
   15d84:	bhi	15df8 <__assert_fail@plt+0x4a14>
   15d88:	cmp	r5, #0
   15d8c:	blt	15d30 <__assert_fail@plt+0x494c>
   15d90:	cmp	r5, r4
   15d94:	movle	r0, #0
   15d98:	movgt	r0, #1
   15d9c:	cmp	r0, #0
   15da0:	mvnne	r5, #-2147483648	; 0x80000000
   15da4:	bne	15d78 <__assert_fail@plt+0x4994>
   15da8:	add	r5, r5, r5, lsl #2
   15dac:	lsl	r5, r5, #1
   15db0:	ldrb	r2, [r7]
   15db4:	subs	r3, r2, #48	; 0x30
   15db8:	bmi	15d58 <__assert_fail@plt+0x4974>
   15dbc:	cmp	r5, #0
   15dc0:	blt	15de4 <__assert_fail@plt+0x4a00>
   15dc4:	rsb	r3, r3, #2130706432	; 0x7f000000
   15dc8:	add	r3, r3, #16711680	; 0xff0000
   15dcc:	add	r3, r3, #65280	; 0xff00
   15dd0:	add	r3, r3, #255	; 0xff
   15dd4:	cmp	r5, r3
   15dd8:	movle	r3, #0
   15ddc:	movgt	r3, #1
   15de0:	b	15d68 <__assert_fail@plt+0x4984>
   15de4:	rsb	r1, r5, #-2147483648	; 0x80000000
   15de8:	cmp	r3, r1
   15dec:	movge	r3, #0
   15df0:	movlt	r3, #1
   15df4:	b	15d68 <__assert_fail@plt+0x4984>
   15df8:	ldrb	r2, [r7]
   15dfc:	cmp	r2, #69	; 0x45
   15e00:	beq	16010 <__assert_fail@plt+0x4c2c>
   15e04:	cmp	r2, #79	; 0x4f
   15e08:	movne	r2, #0
   15e0c:	beq	16010 <__assert_fail@plt+0x4c2c>
   15e10:	ldrb	r1, [r7]
   15e14:	mov	r4, r1
   15e18:	cmp	r1, #122	; 0x7a
   15e1c:	ldrls	pc, [pc, r1, lsl #2]
   15e20:	b	16158 <__assert_fail@plt+0x4d74>
   15e24:	andeq	r6, r1, r4, asr r1
   15e28:	andeq	r6, r1, r8, asr r1
   15e2c:	andeq	r6, r1, r8, asr r1
   15e30:	andeq	r6, r1, r8, asr r1
   15e34:	andeq	r6, r1, r8, asr r1
   15e38:	andeq	r6, r1, r8, asr r1
   15e3c:	andeq	r6, r1, r8, asr r1
   15e40:	andeq	r6, r1, r8, asr r1
   15e44:	andeq	r6, r1, r8, asr r1
   15e48:	andeq	r6, r1, r8, asr r1
   15e4c:	andeq	r6, r1, r8, asr r1
   15e50:	andeq	r6, r1, r8, asr r1
   15e54:	andeq	r6, r1, r8, asr r1
   15e58:	andeq	r6, r1, r8, asr r1
   15e5c:	andeq	r6, r1, r8, asr r1
   15e60:	andeq	r6, r1, r8, asr r1
   15e64:	andeq	r6, r1, r8, asr r1
   15e68:	andeq	r6, r1, r8, asr r1
   15e6c:	andeq	r6, r1, r8, asr r1
   15e70:	andeq	r6, r1, r8, asr r1
   15e74:	andeq	r6, r1, r8, asr r1
   15e78:	andeq	r6, r1, r8, asr r1
   15e7c:	andeq	r6, r1, r8, asr r1
   15e80:	andeq	r6, r1, r8, asr r1
   15e84:	andeq	r6, r1, r8, asr r1
   15e88:	andeq	r6, r1, r8, asr r1
   15e8c:	andeq	r6, r1, r8, asr r1
   15e90:	andeq	r6, r1, r8, asr r1
   15e94:	andeq	r6, r1, r8, asr r1
   15e98:	andeq	r6, r1, r8, asr r1
   15e9c:	andeq	r6, r1, r8, asr r1
   15ea0:	andeq	r6, r1, r8, asr r1
   15ea4:	andeq	r6, r1, r8, asr r1
   15ea8:	andeq	r6, r1, r8, asr r1
   15eac:	andeq	r6, r1, r8, asr r1
   15eb0:	andeq	r6, r1, r8, asr r1
   15eb4:	andeq	r6, r1, r8, asr r1
   15eb8:	andeq	r6, r1, r8, asr #2
   15ebc:	andeq	r6, r1, r8, asr r1
   15ec0:	andeq	r6, r1, r8, asr r1
   15ec4:	andeq	r6, r1, r8, asr r1
   15ec8:	andeq	r6, r1, r8, asr r1
   15ecc:	andeq	r6, r1, r8, asr r1
   15ed0:	andeq	r6, r1, r8, asr r1
   15ed4:	andeq	r6, r1, r8, asr r1
   15ed8:	andeq	r6, r1, r8, asr r1
   15edc:	andeq	r6, r1, r8, asr r1
   15ee0:	andeq	r6, r1, r8, asr r1
   15ee4:	andeq	r6, r1, r8, asr r1
   15ee8:	andeq	r6, r1, r8, asr r1
   15eec:	andeq	r6, r1, r8, asr r1
   15ef0:	andeq	r6, r1, r8, asr r1
   15ef4:	andeq	r6, r1, r8, asr r1
   15ef8:	andeq	r6, r1, r8, asr r1
   15efc:	andeq	r6, r1, r8, asr r1
   15f00:	andeq	r6, r1, r8, asr r1
   15f04:	andeq	r6, r1, r8, asr r1
   15f08:	andeq	r6, r1, r8, asr r1
   15f0c:	andeq	r6, r1, r4, lsr #2
   15f10:	andeq	r6, r1, r8, asr r1
   15f14:	andeq	r6, r1, r8, asr r1
   15f18:	andeq	r6, r1, r8, asr r1
   15f1c:	andeq	r6, r1, r8, asr r1
   15f20:	andeq	r6, r1, r8, asr r1
   15f24:	andeq	r6, r1, r8, asr r1
   15f28:			; <UNDEFINED> instruction: 0x000162bc
   15f2c:	strdeq	r6, [r1], -ip
   15f30:	andeq	r6, r1, r0, lsr #9
   15f34:	andeq	r6, r1, r0, asr #10
   15f38:	andeq	r6, r1, r8, asr r1
   15f3c:	strdeq	r6, [r1], -r8
   15f40:	andeq	r6, r1, r4, lsr #25
   15f44:	andeq	r6, r1, r0, lsr r7
   15f48:	andeq	r6, r1, r8, asr #14
   15f4c:	andeq	r6, r1, r8, asr r1
   15f50:	andeq	r6, r1, r8, asr r1
   15f54:	andeq	r6, r1, r8, asr r1
   15f58:			; <UNDEFINED> instruction: 0x000167b4
   15f5c:	andeq	r6, r1, r0, lsl #16
   15f60:	andeq	r6, r1, r8, asr r1
   15f64:	andeq	r6, r1, r8, lsl sl
   15f68:	andeq	r6, r1, r8, asr r1
   15f6c:	andeq	r6, r1, r0, lsr r3
   15f70:	muleq	r1, r0, sl
   15f74:	andeq	r6, r1, r8, lsl r0
   15f78:	andeq	r6, r1, ip, ror #24
   15f7c:	andeq	r6, r1, r4, lsr #25
   15f80:	andeq	r6, r1, r4, lsl pc
   15f84:	muleq	r1, r4, fp
   15f88:	andeq	r6, r1, r4, lsl #31
   15f8c:	andeq	r7, r1, r4, lsl r0
   15f90:	andeq	r6, r1, r8, asr r1
   15f94:	andeq	r6, r1, r8, asr r1
   15f98:	andeq	r6, r1, r8, asr r1
   15f9c:	andeq	r6, r1, r8, asr r1
   15fa0:	andeq	r6, r1, r8, asr r1
   15fa4:	andeq	r6, r1, r8, asr r1
   15fa8:	andeq	r6, r1, r4, lsl #5
   15fac:	ldrdeq	r6, [r1], -ip
   15fb0:	andeq	r6, r1, ip, lsl r3
   15fb4:	andeq	r6, r1, r8, asr r5
   15fb8:	andeq	r6, r1, r0, ror r5
   15fbc:	andeq	r6, r1, r8, asr r1
   15fc0:	andeq	r6, r1, r4, lsr #25
   15fc4:	ldrdeq	r6, [r1], -ip
   15fc8:	andeq	r6, r1, r8, asr r1
   15fcc:	andeq	r6, r1, r0, lsl #15
   15fd0:	andeq	r6, r1, ip, asr r7
   15fd4:	andeq	r6, r1, r0, ror r7
   15fd8:	andeq	r6, r1, ip, asr #15
   15fdc:	andeq	r6, r1, r8, lsl #19
   15fe0:	andeq	r6, r1, r8, asr r1
   15fe4:	andeq	r6, r1, r8, lsr sl
   15fe8:	andeq	r6, r1, r0, asr #20
   15fec:	andeq	r6, r1, r8, ror #6
   15ff0:	andeq	r6, r1, r8, ror #21
   15ff4:	andeq	r6, r1, r8, lsr #23
   15ff8:	andeq	r6, r1, r8, lsr ip
   15ffc:	andeq	r6, r1, r8, asr r1
   16000:	andeq	r6, r1, ip, ror #30
   16004:	andeq	r6, r1, ip, lsr #10
   16008:	andeq	r6, r1, r0, asr #31
   1600c:	andeq	r7, r1, r8, lsr #2
   16010:	add	r7, r7, #1
   16014:	b	15e10 <__assert_fail@plt+0x4a2c>
   16018:	mvn	r8, #0
   1601c:	ldr	r3, [pc, #2704]	; 16ab4 <__assert_fail@plt+0x56d0>
   16020:	str	r3, [sp, #52]	; 0x34
   16024:	ldr	r3, [sp, #1172]	; 0x494
   16028:	str	r3, [sp, #20]
   1602c:	ldr	r3, [sp, #1168]	; 0x490
   16030:	str	r3, [sp, #16]
   16034:	ldr	r3, [sp, #1164]	; 0x48c
   16038:	str	r3, [sp, #12]
   1603c:	str	r8, [sp, #8]
   16040:	ldr	r4, [sp, #28]
   16044:	str	r4, [sp, #4]
   16048:	ldr	r3, [sp, #40]	; 0x28
   1604c:	str	r3, [sp]
   16050:	ldr	r3, [sp, #36]	; 0x24
   16054:	ldr	r2, [sp, #52]	; 0x34
   16058:	mvn	r1, #0
   1605c:	mov	r0, #0
   16060:	bl	15aa4 <__assert_fail@plt+0x46c0>
   16064:	mov	r9, r0
   16068:	subs	r3, r4, #45	; 0x2d
   1606c:	movne	r3, #1
   16070:	cmp	r5, #0
   16074:	movlt	r3, #0
   16078:	cmp	r3, #0
   1607c:	moveq	r5, #0
   16080:	mov	r4, r5
   16084:	cmp	r5, r0
   16088:	movcc	r5, r0
   1608c:	ldr	r3, [sp, #32]
   16090:	sub	r3, r3, fp
   16094:	str	r3, [sp, #68]	; 0x44
   16098:	cmp	r5, r3
   1609c:	bcs	16358 <__assert_fail@plt+0x4f74>
   160a0:	cmp	sl, #0
   160a4:	beq	1611c <__assert_fail@plt+0x4d38>
   160a8:	cmp	r4, r0
   160ac:	bls	160d8 <__assert_fail@plt+0x4cf4>
   160b0:	sub	r4, r4, r0
   160b4:	ldr	r3, [sp, #28]
   160b8:	cmp	r3, #43	; 0x2b
   160bc:	cmpne	r3, #48	; 0x30
   160c0:	mov	r2, r4
   160c4:	moveq	r1, #48	; 0x30
   160c8:	movne	r1, #32
   160cc:	mov	r0, sl
   160d0:	bl	112e8 <memset@plt>
   160d4:	add	sl, sl, r4
   160d8:	ldr	r3, [sp, #1172]	; 0x494
   160dc:	str	r3, [sp, #20]
   160e0:	ldr	r3, [sp, #1168]	; 0x490
   160e4:	str	r3, [sp, #16]
   160e8:	ldr	r3, [sp, #1164]	; 0x48c
   160ec:	str	r3, [sp, #12]
   160f0:	str	r8, [sp, #8]
   160f4:	ldr	r3, [sp, #28]
   160f8:	str	r3, [sp, #4]
   160fc:	ldr	r3, [sp, #40]	; 0x28
   16100:	str	r3, [sp]
   16104:	ldr	r3, [sp, #36]	; 0x24
   16108:	ldr	r2, [sp, #52]	; 0x34
   1610c:	ldr	r1, [sp, #68]	; 0x44
   16110:	mov	r0, sl
   16114:	bl	15aa4 <__assert_fail@plt+0x46c0>
   16118:	add	sl, sl, r9
   1611c:	add	fp, fp, r5
   16120:	b	15b80 <__assert_fail@plt+0x479c>
   16124:	add	r0, r7, #1
   16128:	ldrb	r3, [r7, #1]
   1612c:	cmp	r3, #58	; 0x3a
   16130:	movne	lr, #1
   16134:	beq	17108 <__assert_fail@plt+0x5d24>
   16138:	cmp	r3, #122	; 0x7a
   1613c:	moveq	r7, r0
   16140:	bne	16158 <__assert_fail@plt+0x4d74>
   16144:	b	1712c <__assert_fail@plt+0x5d48>
   16148:	sub	r3, r7, #1
   1614c:	cmp	r9, r3
   16150:	beq	161f8 <__assert_fail@plt+0x4e14>
   16154:	sub	r7, r7, #1
   16158:	sub	r8, r7, r9
   1615c:	add	r8, r8, #1
   16160:	ldr	r3, [sp, #28]
   16164:	subs	r3, r3, #45	; 0x2d
   16168:	movne	r3, #1
   1616c:	cmp	r5, #0
   16170:	movlt	r3, #0
   16174:	cmp	r3, #0
   16178:	moveq	r5, #0
   1617c:	mov	r4, r5
   16180:	cmp	r5, r8
   16184:	movcc	r5, r8
   16188:	ldr	r3, [sp, #32]
   1618c:	sub	r3, r3, fp
   16190:	cmp	r5, r3
   16194:	bcs	17248 <__assert_fail@plt+0x5e64>
   16198:	cmp	sl, #0
   1619c:	beq	161f0 <__assert_fail@plt+0x4e0c>
   161a0:	cmp	r4, r8
   161a4:	bls	161d0 <__assert_fail@plt+0x4dec>
   161a8:	sub	r4, r4, r8
   161ac:	ldr	r3, [sp, #28]
   161b0:	cmp	r3, #43	; 0x2b
   161b4:	cmpne	r3, #48	; 0x30
   161b8:	mov	r2, r4
   161bc:	moveq	r1, #48	; 0x30
   161c0:	movne	r1, #32
   161c4:	mov	r0, sl
   161c8:	bl	112e8 <memset@plt>
   161cc:	add	sl, sl, r4
   161d0:	ldr	r3, [sp, #40]	; 0x28
   161d4:	cmp	r3, #0
   161d8:	beq	17258 <__assert_fail@plt+0x5e74>
   161dc:	mov	r2, r8
   161e0:	mov	r1, r9
   161e4:	mov	r0, sl
   161e8:	bl	15a60 <__assert_fail@plt+0x467c>
   161ec:	add	sl, sl, r8
   161f0:	add	fp, fp, r5
   161f4:	b	15b80 <__assert_fail@plt+0x479c>
   161f8:	ldr	r3, [sp, #28]
   161fc:	subs	r3, r3, #45	; 0x2d
   16200:	movne	r3, #1
   16204:	cmp	r5, #0
   16208:	movlt	r3, #0
   1620c:	cmp	r3, #0
   16210:	moveq	r5, #0
   16214:	mov	r4, r5
   16218:	cmp	r5, #1
   1621c:	movcc	r5, #1
   16220:	ldr	r3, [sp, #32]
   16224:	sub	r3, r3, fp
   16228:	cmp	r5, r3
   1622c:	movcs	r3, #34	; 0x22
   16230:	ldrcs	r2, [sp, #44]	; 0x2c
   16234:	strcs	r3, [r2]
   16238:	bcs	15bc8 <__assert_fail@plt+0x47e4>
   1623c:	cmp	sl, #0
   16240:	beq	1627c <__assert_fail@plt+0x4e98>
   16244:	cmp	r4, #1
   16248:	bls	16274 <__assert_fail@plt+0x4e90>
   1624c:	sub	r4, r4, #1
   16250:	ldr	r3, [sp, #28]
   16254:	cmp	r3, #43	; 0x2b
   16258:	cmpne	r3, #48	; 0x30
   1625c:	mov	r2, r4
   16260:	moveq	r1, #48	; 0x30
   16264:	movne	r1, #32
   16268:	mov	r0, sl
   1626c:	bl	112e8 <memset@plt>
   16270:	add	sl, sl, r4
   16274:	ldrb	r3, [r7]
   16278:	strb	r3, [sl], #1
   1627c:	add	fp, fp, r5
   16280:	b	15b80 <__assert_fail@plt+0x479c>
   16284:	cmp	r2, #0
   16288:	bne	16158 <__assert_fail@plt+0x4d74>
   1628c:	ldr	r3, [sp, #40]	; 0x28
   16290:	cmp	r8, #0
   16294:	movne	r3, r8
   16298:	str	r3, [sp, #40]	; 0x28
   1629c:	mov	r4, #97	; 0x61
   162a0:	mov	r3, #32
   162a4:	strb	r3, [sp, #72]	; 0x48
   162a8:	mov	r3, #37	; 0x25
   162ac:	strb	r3, [sp, #73]	; 0x49
   162b0:	mov	r8, #0
   162b4:	add	r3, sp, #74	; 0x4a
   162b8:	b	1639c <__assert_fail@plt+0x4fb8>
   162bc:	cmp	r2, #0
   162c0:	bne	16158 <__assert_fail@plt+0x4d74>
   162c4:	ldr	r3, [sp, #40]	; 0x28
   162c8:	cmp	r8, #0
   162cc:	movne	r3, r8
   162d0:	str	r3, [sp, #40]	; 0x28
   162d4:	mov	r4, #65	; 0x41
   162d8:	b	162a0 <__assert_fail@plt+0x4ebc>
   162dc:	ldr	r3, [sp, #40]	; 0x28
   162e0:	cmp	r8, #0
   162e4:	movne	r3, r8
   162e8:	str	r3, [sp, #40]	; 0x28
   162ec:	cmp	r2, #69	; 0x45
   162f0:	movne	r8, #0
   162f4:	bne	16374 <__assert_fail@plt+0x4f90>
   162f8:	b	16158 <__assert_fail@plt+0x4d74>
   162fc:	cmp	r2, #69	; 0x45
   16300:	beq	16158 <__assert_fail@plt+0x4d74>
   16304:	cmp	r8, #0
   16308:	moveq	r4, #66	; 0x42
   1630c:	strne	r8, [sp, #40]	; 0x28
   16310:	movne	r4, #66	; 0x42
   16314:	movne	r8, #0
   16318:	b	16374 <__assert_fail@plt+0x4f90>
   1631c:	cmp	r2, #79	; 0x4f
   16320:	beq	16158 <__assert_fail@plt+0x4d74>
   16324:	mov	r4, #99	; 0x63
   16328:	mov	r8, #0
   1632c:	b	16374 <__assert_fail@plt+0x4f90>
   16330:	mvn	r8, #0
   16334:	ldr	r3, [pc, #1916]	; 16ab8 <__assert_fail@plt+0x56d4>
   16338:	str	r3, [sp, #52]	; 0x34
   1633c:	b	16024 <__assert_fail@plt+0x4c40>
   16340:	mov	r8, #4
   16344:	ldr	r3, [pc, #1904]	; 16abc <__assert_fail@plt+0x56d8>
   16348:	str	r3, [sp, #52]	; 0x34
   1634c:	mov	r3, #43	; 0x2b
   16350:	str	r3, [sp, #28]
   16354:	b	16024 <__assert_fail@plt+0x4c40>
   16358:	mov	r3, #34	; 0x22
   1635c:	ldr	r2, [sp, #44]	; 0x2c
   16360:	str	r3, [r2]
   16364:	b	15bc8 <__assert_fail@plt+0x47e4>
   16368:	mov	r8, #0
   1636c:	b	16374 <__assert_fail@plt+0x4f90>
   16370:	mov	r8, #0
   16374:	mov	r3, #32
   16378:	strb	r3, [sp, #72]	; 0x48
   1637c:	mov	r3, #37	; 0x25
   16380:	strb	r3, [sp, #73]	; 0x49
   16384:	cmp	r2, #0
   16388:	addeq	r3, sp, #72	; 0x48
   1638c:	addeq	r3, sp, #74	; 0x4a
   16390:	beq	1639c <__assert_fail@plt+0x4fb8>
   16394:	strb	r2, [sp, #74]	; 0x4a
   16398:	add	r3, sp, #75	; 0x4b
   1639c:	strb	r4, [r3]
   163a0:	mov	r2, #0
   163a4:	strb	r2, [r3, #1]
   163a8:	ldr	r3, [sp, #36]	; 0x24
   163ac:	add	r2, sp, #72	; 0x48
   163b0:	mov	r1, #1024	; 0x400
   163b4:	add	r0, sp, #88	; 0x58
   163b8:	bl	11234 <strftime@plt>
   163bc:	cmp	r0, #0
   163c0:	beq	15b80 <__assert_fail@plt+0x479c>
   163c4:	sub	r9, r0, #1
   163c8:	ldr	r3, [sp, #28]
   163cc:	subs	r3, r3, #45	; 0x2d
   163d0:	movne	r3, #1
   163d4:	cmp	r5, #0
   163d8:	movlt	r3, #0
   163dc:	cmp	r3, #0
   163e0:	moveq	r5, #0
   163e4:	mov	r4, r5
   163e8:	cmp	r5, r9
   163ec:	movcc	r5, r9
   163f0:	ldr	r3, [sp, #32]
   163f4:	sub	r3, r3, fp
   163f8:	cmp	r5, r3
   163fc:	bcs	16460 <__assert_fail@plt+0x507c>
   16400:	cmp	sl, #0
   16404:	beq	16484 <__assert_fail@plt+0x50a0>
   16408:	cmp	r4, r9
   1640c:	bls	16438 <__assert_fail@plt+0x5054>
   16410:	sub	r4, r4, r9
   16414:	ldr	r3, [sp, #28]
   16418:	cmp	r3, #43	; 0x2b
   1641c:	cmpne	r3, #48	; 0x30
   16420:	mov	r2, r4
   16424:	moveq	r1, #48	; 0x30
   16428:	movne	r1, #32
   1642c:	mov	r0, sl
   16430:	bl	112e8 <memset@plt>
   16434:	add	sl, sl, r4
   16438:	cmp	r8, #0
   1643c:	bne	16470 <__assert_fail@plt+0x508c>
   16440:	ldr	r3, [sp, #40]	; 0x28
   16444:	cmp	r3, #0
   16448:	beq	1648c <__assert_fail@plt+0x50a8>
   1644c:	mov	r2, r9
   16450:	add	r1, sp, #89	; 0x59
   16454:	mov	r0, sl
   16458:	bl	15a60 <__assert_fail@plt+0x467c>
   1645c:	b	16480 <__assert_fail@plt+0x509c>
   16460:	mov	r3, #34	; 0x22
   16464:	ldr	r2, [sp, #44]	; 0x2c
   16468:	str	r3, [r2]
   1646c:	b	15bc8 <__assert_fail@plt+0x47e4>
   16470:	mov	r2, r9
   16474:	add	r1, sp, #89	; 0x59
   16478:	mov	r0, sl
   1647c:	bl	15a1c <__assert_fail@plt+0x4638>
   16480:	add	sl, sl, r9
   16484:	add	fp, fp, r5
   16488:	b	15b80 <__assert_fail@plt+0x479c>
   1648c:	mov	r2, r9
   16490:	add	r1, sp, #89	; 0x59
   16494:	mov	r0, sl
   16498:	bl	1112c <memcpy@plt>
   1649c:	b	16480 <__assert_fail@plt+0x509c>
   164a0:	cmp	r2, #69	; 0x45
   164a4:	beq	17294 <__assert_fail@plt+0x5eb0>
   164a8:	ldr	r3, [sp, #36]	; 0x24
   164ac:	ldr	r1, [r3, #20]
   164b0:	ldr	r3, [pc, #1564]	; 16ad4 <__assert_fail@plt+0x56f0>
   164b4:	cmp	r1, r3
   164b8:	movge	r3, #0
   164bc:	movlt	r3, #1
   164c0:	str	r3, [sp, #52]	; 0x34
   164c4:	add	r3, r1, #1888	; 0x760
   164c8:	add	r3, r3, #12
   164cc:	ldr	r0, [pc, #1516]	; 16ac0 <__assert_fail@plt+0x56dc>
   164d0:	cmp	r3, r0
   164d4:	movhi	r3, #0
   164d8:	movls	r3, #1
   164dc:	mvn	r0, #98	; 0x62
   164e0:	mla	r3, r0, r3, r1
   164e4:	ldr	r1, [pc, #1516]	; 16ad8 <__assert_fail@plt+0x56f4>
   164e8:	smull	r0, r1, r1, r3
   164ec:	asr	r3, r3, #31
   164f0:	rsb	r3, r3, r1, asr #5
   164f4:	add	r3, r3, #19
   164f8:	mov	r8, #2
   164fc:	ldr	r0, [sp, #28]
   16500:	mov	r1, r0
   16504:	ldr	ip, [sp, #1156]	; 0x484
   16508:	cmp	r0, #0
   1650c:	moveq	r1, ip
   16510:	str	r1, [sp, #28]
   16514:	cmp	r1, #43	; 0x2b
   16518:	movne	r1, #0
   1651c:	beq	16678 <__assert_fail@plt+0x5294>
   16520:	mov	r9, r1
   16524:	mov	r0, #0
   16528:	b	165a4 <__assert_fail@plt+0x51c0>
   1652c:	cmp	r2, #79	; 0x4f
   16530:	beq	16158 <__assert_fail@plt+0x4d74>
   16534:	mov	r4, #120	; 0x78
   16538:	mov	r8, #0
   1653c:	b	16374 <__assert_fail@plt+0x4f90>
   16540:	cmp	r2, #0
   16544:	bne	16158 <__assert_fail@plt+0x4d74>
   16548:	mvn	r8, #0
   1654c:	ldr	r3, [pc, #1392]	; 16ac4 <__assert_fail@plt+0x56e0>
   16550:	str	r3, [sp, #52]	; 0x34
   16554:	b	16024 <__assert_fail@plt+0x4c40>
   16558:	cmp	r2, #69	; 0x45
   1655c:	beq	16158 <__assert_fail@plt+0x4d74>
   16560:	ldr	r3, [sp, #36]	; 0x24
   16564:	ldr	r3, [r3, #12]
   16568:	mov	r8, #2
   1656c:	b	16594 <__assert_fail@plt+0x51b0>
   16570:	cmp	r2, #69	; 0x45
   16574:	beq	16158 <__assert_fail@plt+0x4d74>
   16578:	ldr	r3, [sp, #36]	; 0x24
   1657c:	ldr	r3, [r3, #12]
   16580:	ldr	r1, [sp, #28]
   16584:	cmp	r1, #0
   16588:	mov	r8, #2
   1658c:	moveq	r1, #95	; 0x5f
   16590:	streq	r1, [sp, #28]
   16594:	lsr	r1, r3, #31
   16598:	str	r1, [sp, #52]	; 0x34
   1659c:	mov	r0, #0
   165a0:	mov	r9, r0
   165a4:	ldr	ip, [sp, #52]	; 0x34
   165a8:	eor	r1, ip, #1
   165ac:	cmp	r2, #79	; 0x4f
   165b0:	movne	r1, #0
   165b4:	andeq	r1, r1, #1
   165b8:	cmp	r1, #0
   165bc:	bne	16370 <__assert_fail@plt+0x4f8c>
   165c0:	mov	r1, ip
   165c4:	cmp	ip, #0
   165c8:	rsbne	r3, r3, #0
   165cc:	add	r4, sp, #86	; 0x56
   165d0:	mov	lr, #58	; 0x3a
   165d4:	mov	ip, r3
   165d8:	tst	r0, #1
   165dc:	subne	r1, r4, #1
   165e0:	strbne	lr, [r4, #-1]
   165e4:	moveq	r1, r4
   165e8:	sub	r4, r1, #1
   165ec:	ldr	r3, [pc, #1236]	; 16ac8 <__assert_fail@plt+0x56e4>
   165f0:	umull	r3, r2, r3, ip
   165f4:	lsr	r2, r2, #3
   165f8:	add	r3, r2, r2, lsl #2
   165fc:	sub	r3, ip, r3, lsl #1
   16600:	add	r3, r3, #48	; 0x30
   16604:	strb	r3, [r1, #-1]
   16608:	mov	ip, r2
   1660c:	asrs	r0, r0, #1
   16610:	movne	r3, #1
   16614:	moveq	r3, #0
   16618:	cmp	r2, #0
   1661c:	moveq	r2, r3
   16620:	orrne	r2, r3, #1
   16624:	cmp	r2, #0
   16628:	bne	165d8 <__assert_fail@plt+0x51f4>
   1662c:	ldr	r2, [sp, #28]
   16630:	mov	r3, r2
   16634:	cmp	r2, #0
   16638:	moveq	r3, #48	; 0x30
   1663c:	str	r3, [sp, #28]
   16640:	cmp	r5, #0
   16644:	movlt	r5, r8
   16648:	ldr	r3, [sp, #52]	; 0x34
   1664c:	cmp	r3, #0
   16650:	bne	172c0 <__assert_fail@plt+0x5edc>
   16654:	cmp	r9, #0
   16658:	bne	173bc <__assert_fail@plt+0x5fd8>
   1665c:	add	r8, sp, #86	; 0x56
   16660:	sub	r3, r8, r4
   16664:	str	r3, [sp, #68]	; 0x44
   16668:	ldr	r3, [sp, #28]
   1666c:	subs	r9, r3, #45	; 0x2d
   16670:	movne	r9, #1
   16674:	b	17328 <__assert_fail@plt+0x5f44>
   16678:	ldr	r0, [pc, #1100]	; 16acc <__assert_fail@plt+0x56e8>
   1667c:	cmp	r8, #2
   16680:	moveq	r0, #99	; 0x63
   16684:	cmp	r8, r5
   16688:	movge	r1, #0
   1668c:	movlt	r1, #1
   16690:	cmp	r3, r0
   16694:	orrhi	r1, r1, #1
   16698:	b	16520 <__assert_fail@plt+0x513c>
   1669c:	cmp	sl, #0
   166a0:	beq	166b8 <__assert_fail@plt+0x52d4>
   166a4:	mov	r2, r8
   166a8:	mov	r1, #32
   166ac:	mov	r0, sl
   166b0:	bl	112e8 <memset@plt>
   166b4:	add	sl, sl, r8
   166b8:	add	fp, fp, r8
   166bc:	sub	r5, r5, r8
   166c0:	b	17304 <__assert_fail@plt+0x5f20>
   166c4:	mov	r3, #34	; 0x22
   166c8:	ldr	r2, [sp, #44]	; 0x2c
   166cc:	str	r3, [r2]
   166d0:	b	15bc8 <__assert_fail@plt+0x47e4>
   166d4:	mov	r3, #34	; 0x22
   166d8:	ldr	r2, [sp, #44]	; 0x2c
   166dc:	str	r3, [r2]
   166e0:	b	15bc8 <__assert_fail@plt+0x47e4>
   166e4:	mov	r2, r8
   166e8:	mov	r1, r4
   166ec:	mov	r0, sl
   166f0:	bl	1112c <memcpy@plt>
   166f4:	b	173b0 <__assert_fail@plt+0x5fcc>
   166f8:	cmp	r2, #0
   166fc:	bne	16158 <__assert_fail@plt+0x4d74>
   16700:	lsr	r3, r5, #31
   16704:	ldr	r2, [sp, #28]
   16708:	cmp	r2, #0
   1670c:	movne	r3, #0
   16710:	andeq	r3, r3, #1
   16714:	cmp	r3, #0
   16718:	bne	16340 <__assert_fail@plt+0x4f5c>
   1671c:	sub	r8, r5, #6
   16720:	bic	r8, r8, r8, asr #31
   16724:	ldr	r3, [pc, #912]	; 16abc <__assert_fail@plt+0x56d8>
   16728:	str	r3, [sp, #52]	; 0x34
   1672c:	b	16024 <__assert_fail@plt+0x4c40>
   16730:	cmp	r2, #69	; 0x45
   16734:	beq	16158 <__assert_fail@plt+0x4d74>
   16738:	ldr	r3, [sp, #36]	; 0x24
   1673c:	ldr	r3, [r3, #8]
   16740:	mov	r8, #2
   16744:	b	16594 <__assert_fail@plt+0x51b0>
   16748:	cmp	r2, #69	; 0x45
   1674c:	beq	16158 <__assert_fail@plt+0x4d74>
   16750:	ldr	r3, [sp, #48]	; 0x30
   16754:	mov	r8, #2
   16758:	b	16594 <__assert_fail@plt+0x51b0>
   1675c:	cmp	r2, #69	; 0x45
   16760:	beq	16158 <__assert_fail@plt+0x4d74>
   16764:	ldr	r3, [sp, #36]	; 0x24
   16768:	ldr	r3, [r3, #8]
   1676c:	b	16580 <__assert_fail@plt+0x519c>
   16770:	cmp	r2, #69	; 0x45
   16774:	beq	16158 <__assert_fail@plt+0x4d74>
   16778:	ldr	r3, [sp, #48]	; 0x30
   1677c:	b	16580 <__assert_fail@plt+0x519c>
   16780:	cmp	r2, #69	; 0x45
   16784:	beq	16158 <__assert_fail@plt+0x4d74>
   16788:	ldr	r3, [sp, #36]	; 0x24
   1678c:	ldr	r3, [r3, #28]
   16790:	cmn	r3, #1
   16794:	movge	r1, #0
   16798:	movlt	r1, #1
   1679c:	str	r1, [sp, #52]	; 0x34
   167a0:	add	r3, r3, #1
   167a4:	mov	r0, #0
   167a8:	mov	r9, r0
   167ac:	mov	r8, #3
   167b0:	b	165a4 <__assert_fail@plt+0x51c0>
   167b4:	cmp	r2, #69	; 0x45
   167b8:	beq	16158 <__assert_fail@plt+0x4d74>
   167bc:	ldr	r3, [sp, #36]	; 0x24
   167c0:	ldr	r3, [r3, #4]
   167c4:	mov	r8, #2
   167c8:	b	16594 <__assert_fail@plt+0x51b0>
   167cc:	cmp	r2, #69	; 0x45
   167d0:	beq	16158 <__assert_fail@plt+0x4d74>
   167d4:	ldr	r3, [sp, #36]	; 0x24
   167d8:	ldr	r3, [r3, #16]
   167dc:	cmn	r3, #1
   167e0:	movge	r1, #0
   167e4:	movlt	r1, #1
   167e8:	str	r1, [sp, #52]	; 0x34
   167ec:	add	r3, r3, #1
   167f0:	mov	r0, #0
   167f4:	mov	r9, r0
   167f8:	mov	r8, #2
   167fc:	b	165a4 <__assert_fail@plt+0x51c0>
   16800:	cmp	r2, #69	; 0x45
   16804:	beq	16158 <__assert_fail@plt+0x4d74>
   16808:	cmp	r5, #0
   1680c:	movle	r5, #9
   16810:	ldr	r3, [sp, #1172]	; 0x494
   16814:	mov	r4, #9
   16818:	b	1682c <__assert_fail@plt+0x5448>
   1681c:	sub	r4, r4, #1
   16820:	smull	r1, r2, r6, r3
   16824:	asr	r3, r3, #31
   16828:	rsb	r3, r3, r2, asr #2
   1682c:	cmp	r4, r5
   16830:	bgt	1681c <__assert_fail@plt+0x5438>
   16834:	cmp	r4, #1
   16838:	ble	16854 <__assert_fail@plt+0x5470>
   1683c:	smull	r2, r1, r6, r3
   16840:	asr	r2, r3, #31
   16844:	rsb	r2, r2, r1, asr #2
   16848:	add	r2, r2, r2, lsl #2
   1684c:	cmp	r3, r2, lsl #1
   16850:	beq	1681c <__assert_fail@plt+0x5438>
   16854:	cmp	r4, #0
   16858:	ble	1688c <__assert_fail@plt+0x54a8>
   1685c:	add	r1, sp, #72	; 0x48
   16860:	add	r0, r1, r4
   16864:	smull	r2, ip, r6, r3
   16868:	asr	r2, r3, #31
   1686c:	rsb	r2, r2, ip, asr #2
   16870:	add	ip, r2, r2, lsl #2
   16874:	sub	r3, r3, ip, lsl #1
   16878:	add	r3, r3, #48	; 0x30
   1687c:	strb	r3, [r0, #-1]!
   16880:	mov	r3, r2
   16884:	cmp	r0, r1
   16888:	bne	16864 <__assert_fail@plt+0x5480>
   1688c:	ldr	r2, [sp, #28]
   16890:	mov	r3, r2
   16894:	cmp	r2, #0
   16898:	moveq	r3, #48	; 0x30
   1689c:	str	r3, [sp, #28]
   168a0:	mov	r8, r4
   168a4:	cmp	r4, #0
   168a8:	movcs	r9, r4
   168ac:	movcc	r9, #0
   168b0:	ldr	r3, [sp, #32]
   168b4:	sub	r3, r3, fp
   168b8:	cmp	r9, r3
   168bc:	bcs	16954 <__assert_fail@plt+0x5570>
   168c0:	cmp	sl, #0
   168c4:	beq	168e8 <__assert_fail@plt+0x5504>
   168c8:	ldr	r3, [sp, #40]	; 0x28
   168cc:	cmp	r3, #0
   168d0:	beq	16964 <__assert_fail@plt+0x5580>
   168d4:	mov	r2, r4
   168d8:	add	r1, sp, #72	; 0x48
   168dc:	mov	r0, sl
   168e0:	bl	15a60 <__assert_fail@plt+0x467c>
   168e4:	add	sl, sl, r8
   168e8:	add	fp, r9, fp
   168ec:	ldr	r3, [sp, #28]
   168f0:	cmp	r3, #45	; 0x2d
   168f4:	beq	173c8 <__assert_fail@plt+0x5fe4>
   168f8:	subs	r4, r5, r4
   168fc:	bmi	173c8 <__assert_fail@plt+0x5fe4>
   16900:	cmp	r4, #0
   16904:	movcs	r5, r4
   16908:	movcc	r5, #0
   1690c:	ldr	r3, [sp, #32]
   16910:	sub	r3, r3, fp
   16914:	cmp	r5, r3
   16918:	bcs	16978 <__assert_fail@plt+0x5594>
   1691c:	cmp	r4, #0
   16920:	cmpne	sl, #0
   16924:	beq	1694c <__assert_fail@plt+0x5568>
   16928:	ldr	r3, [sp, #28]
   1692c:	cmp	r3, #43	; 0x2b
   16930:	cmpne	r3, #48	; 0x30
   16934:	mov	r2, r4
   16938:	moveq	r1, #48	; 0x30
   1693c:	movne	r1, #32
   16940:	mov	r0, sl
   16944:	bl	112e8 <memset@plt>
   16948:	add	sl, sl, r4
   1694c:	add	fp, fp, r5
   16950:	b	15b80 <__assert_fail@plt+0x479c>
   16954:	mov	r3, #34	; 0x22
   16958:	ldr	r2, [sp, #44]	; 0x2c
   1695c:	str	r3, [r2]
   16960:	b	15bc8 <__assert_fail@plt+0x47e4>
   16964:	mov	r2, r4
   16968:	add	r1, sp, #72	; 0x48
   1696c:	mov	r0, sl
   16970:	bl	1112c <memcpy@plt>
   16974:	b	168e4 <__assert_fail@plt+0x5500>
   16978:	mov	r3, #34	; 0x22
   1697c:	ldr	r2, [sp, #44]	; 0x2c
   16980:	str	r3, [r2]
   16984:	b	15bc8 <__assert_fail@plt+0x47e4>
   16988:	ldr	r2, [sp, #28]
   1698c:	mvn	r3, r5
   16990:	lsr	r3, r3, #31
   16994:	cmp	r2, #45	; 0x2d
   16998:	moveq	r3, #0
   1699c:	cmp	r3, #0
   169a0:	moveq	r5, #0
   169a4:	mov	r4, r5
   169a8:	cmp	r5, #1
   169ac:	movcc	r5, #1
   169b0:	ldr	r3, [sp, #32]
   169b4:	sub	r3, r3, fp
   169b8:	cmp	r5, r3
   169bc:	bcs	16a08 <__assert_fail@plt+0x5624>
   169c0:	cmp	sl, #0
   169c4:	beq	16a00 <__assert_fail@plt+0x561c>
   169c8:	cmp	r4, #1
   169cc:	bls	169f8 <__assert_fail@plt+0x5614>
   169d0:	sub	r4, r4, #1
   169d4:	ldr	r3, [sp, #28]
   169d8:	cmp	r3, #43	; 0x2b
   169dc:	cmpne	r3, #48	; 0x30
   169e0:	mov	r2, r4
   169e4:	moveq	r1, #48	; 0x30
   169e8:	movne	r1, #32
   169ec:	mov	r0, sl
   169f0:	bl	112e8 <memset@plt>
   169f4:	add	sl, sl, r4
   169f8:	mov	r3, #10
   169fc:	strb	r3, [sl], #1
   16a00:	add	fp, fp, r5
   16a04:	b	15b80 <__assert_fail@plt+0x479c>
   16a08:	mov	r3, #34	; 0x22
   16a0c:	ldr	r2, [sp, #44]	; 0x2c
   16a10:	str	r3, [r2]
   16a14:	b	15bc8 <__assert_fail@plt+0x47e4>
   16a18:	mov	r3, #1
   16a1c:	cmp	r8, #0
   16a20:	moveq	r8, r3
   16a24:	moveq	r4, #112	; 0x70
   16a28:	movne	r4, #112	; 0x70
   16a2c:	movne	r3, #0
   16a30:	strne	r3, [sp, #40]	; 0x28
   16a34:	b	16374 <__assert_fail@plt+0x4f90>
   16a38:	mov	r3, #0
   16a3c:	b	16a1c <__assert_fail@plt+0x5638>
   16a40:	ldr	r3, [sp, #36]	; 0x24
   16a44:	ldr	r3, [r3, #16]
   16a48:	cmp	r2, #79	; 0x4f
   16a4c:	bne	16a6c <__assert_fail@plt+0x5688>
   16a50:	mov	r3, #32
   16a54:	strb	r3, [sp, #72]	; 0x48
   16a58:	mov	r3, #37	; 0x25
   16a5c:	strb	r3, [sp, #73]	; 0x49
   16a60:	mov	r4, #113	; 0x71
   16a64:	mov	r8, #0
   16a68:	b	16394 <__assert_fail@plt+0x4fb0>
   16a6c:	add	r2, r3, r3, lsl #2
   16a70:	add	r3, r3, r2, lsl #1
   16a74:	asr	r3, r3, #5
   16a78:	add	r3, r3, #1
   16a7c:	mov	r0, #0
   16a80:	mov	r9, r0
   16a84:	str	r0, [sp, #52]	; 0x34
   16a88:	mov	r8, #1
   16a8c:	b	165cc <__assert_fail@plt+0x51e8>
   16a90:	cmp	r2, #69	; 0x45
   16a94:	beq	16158 <__assert_fail@plt+0x4d74>
   16a98:	ldr	r3, [sp, #36]	; 0x24
   16a9c:	ldr	r3, [r3]
   16aa0:	mov	r8, #2
   16aa4:	b	16594 <__assert_fail@plt+0x51b0>
   16aa8:	andeq	ip, r1, ip, ror #3
   16aac:	strbtvs	r6, [r6], -r7, ror #12
   16ab0:	stcleq	12, cr12, [ip], {204}	; 0xcc
   16ab4:	andeq	sp, r1, r8, asr #14
   16ab8:	andeq	sp, r1, r4, lsr r7
   16abc:	andeq	sp, r1, ip, lsr r7
   16ac0:	andeq	r0, r0, fp, ror #14
   16ac4:	andeq	sp, r1, r4, asr r7
   16ac8:	stclgt	12, cr12, [ip], {205}	; 0xcd
   16acc:	andeq	r2, r0, pc, lsl #14
   16ad0:	subls	r2, r9, #-1828716544	; 0x93000000
   16ad4:			; <UNDEFINED> instruction: 0xfffff894
   16ad8:	mvnpl	r8, pc, lsl r5
   16adc:			; <UNDEFINED> instruction: 0x91a2b3c5
   16ae0:	stmhi	r8, {r0, r3, r7, fp, pc}
   16ae4:	andeq	r2, r0, r0, lsl r7
   16ae8:	add	ip, sp, #88	; 0x58
   16aec:	ldr	lr, [sp, #36]	; 0x24
   16af0:	ldm	lr!, {r0, r1, r2, r3}
   16af4:	stmia	ip!, {r0, r1, r2, r3}
   16af8:	ldm	lr!, {r0, r1, r2, r3}
   16afc:	stmia	ip!, {r0, r1, r2, r3}
   16b00:	ldm	lr, {r0, r1, r2}
   16b04:	stm	ip, {r0, r1, r2}
   16b08:	mvn	r3, #0
   16b0c:	str	r3, [sp, #116]	; 0x74
   16b10:	add	r1, sp, #88	; 0x58
   16b14:	ldr	r0, [sp, #1168]	; 0x490
   16b18:	bl	1940c <__assert_fail@plt+0x8028>
   16b1c:	ldr	r3, [sp, #116]	; 0x74
   16b20:	cmp	r3, #0
   16b24:	blt	16b84 <__assert_fail@plt+0x57a0>
   16b28:	lsr	r3, r0, #31
   16b2c:	str	r3, [sp, #52]	; 0x34
   16b30:	add	r2, sp, #85	; 0x55
   16b34:	mov	r1, r0
   16b38:	smull	r3, ip, r6, r1
   16b3c:	asr	r3, r1, #31
   16b40:	rsb	r3, r3, ip, asr #2
   16b44:	mov	ip, r3
   16b48:	add	r3, r3, r3, lsl #2
   16b4c:	sub	r3, r1, r3, lsl #1
   16b50:	mov	r1, ip
   16b54:	mov	r4, r2
   16b58:	cmp	r0, #0
   16b5c:	rsblt	r3, r3, #48	; 0x30
   16b60:	addge	r3, r3, #48	; 0x30
   16b64:	uxtb	r3, r3
   16b68:	strb	r3, [r2]
   16b6c:	sub	r2, r2, #1
   16b70:	cmp	ip, #0
   16b74:	bne	16b38 <__assert_fail@plt+0x5754>
   16b78:	mov	r9, #0
   16b7c:	mov	r8, #1
   16b80:	b	1662c <__assert_fail@plt+0x5248>
   16b84:	mov	r3, #75	; 0x4b
   16b88:	ldr	r2, [sp, #44]	; 0x2c
   16b8c:	str	r3, [r2]
   16b90:	b	15bc8 <__assert_fail@plt+0x47e4>
   16b94:	cmp	r2, #79	; 0x4f
   16b98:	beq	16158 <__assert_fail@plt+0x4d74>
   16b9c:	mov	r4, #88	; 0x58
   16ba0:	mov	r8, #0
   16ba4:	b	16374 <__assert_fail@plt+0x4f90>
   16ba8:	ldr	r3, [sp, #28]
   16bac:	subs	r3, r3, #45	; 0x2d
   16bb0:	movne	r3, #1
   16bb4:	cmp	r5, #0
   16bb8:	movlt	r3, #0
   16bbc:	cmp	r3, #0
   16bc0:	moveq	r5, #0
   16bc4:	mov	r4, r5
   16bc8:	cmp	r5, #1
   16bcc:	movcc	r5, #1
   16bd0:	ldr	r3, [sp, #32]
   16bd4:	sub	r3, r3, fp
   16bd8:	cmp	r5, r3
   16bdc:	bcs	16c28 <__assert_fail@plt+0x5844>
   16be0:	cmp	sl, #0
   16be4:	beq	16c20 <__assert_fail@plt+0x583c>
   16be8:	cmp	r4, #1
   16bec:	bls	16c18 <__assert_fail@plt+0x5834>
   16bf0:	sub	r4, r4, #1
   16bf4:	ldr	r3, [sp, #28]
   16bf8:	cmp	r3, #43	; 0x2b
   16bfc:	cmpne	r3, #48	; 0x30
   16c00:	mov	r2, r4
   16c04:	moveq	r1, #48	; 0x30
   16c08:	movne	r1, #32
   16c0c:	mov	r0, sl
   16c10:	bl	112e8 <memset@plt>
   16c14:	add	sl, sl, r4
   16c18:	mov	r3, #9
   16c1c:	strb	r3, [sl], #1
   16c20:	add	fp, fp, r5
   16c24:	b	15b80 <__assert_fail@plt+0x479c>
   16c28:	mov	r3, #34	; 0x22
   16c2c:	ldr	r2, [sp, #44]	; 0x2c
   16c30:	str	r3, [r2]
   16c34:	b	15bc8 <__assert_fail@plt+0x47e4>
   16c38:	ldr	r3, [sp, #36]	; 0x24
   16c3c:	ldr	r3, [r3, #24]
   16c40:	add	r3, r3, #6
   16c44:	ldr	r1, [pc, #-380]	; 16ad0 <__assert_fail@plt+0x56ec>
   16c48:	smull	r0, r1, r1, r3
   16c4c:	add	r0, r1, r3
   16c50:	asr	r1, r3, #31
   16c54:	rsb	r1, r1, r0, asr #2
   16c58:	rsb	r1, r1, r1, lsl #3
   16c5c:	sub	r3, r3, r1
   16c60:	add	r3, r3, #1
   16c64:	mov	r8, #1
   16c68:	b	16594 <__assert_fail@plt+0x51b0>
   16c6c:	cmp	r2, #69	; 0x45
   16c70:	beq	16158 <__assert_fail@plt+0x4d74>
   16c74:	ldr	r1, [sp, #36]	; 0x24
   16c78:	ldr	r3, [r1, #28]
   16c7c:	ldr	r1, [r1, #24]
   16c80:	sub	r3, r3, r1
   16c84:	add	r3, r3, #7
   16c88:	ldr	r1, [pc, #-448]	; 16ad0 <__assert_fail@plt+0x56ec>
   16c8c:	smull	r0, r1, r1, r3
   16c90:	add	r1, r1, r3
   16c94:	asr	r3, r3, #31
   16c98:	rsb	r3, r3, r1, asr #2
   16c9c:	mov	r8, #2
   16ca0:	b	16594 <__assert_fail@plt+0x51b0>
   16ca4:	cmp	r2, #69	; 0x45
   16ca8:	beq	16158 <__assert_fail@plt+0x4d74>
   16cac:	ldr	r0, [sp, #36]	; 0x24
   16cb0:	mov	r3, r0
   16cb4:	ldr	r8, [r0, #20]
   16cb8:	cmp	r8, #0
   16cbc:	movlt	r3, #300	; 0x12c
   16cc0:	mvnge	r3, #99	; 0x63
   16cc4:	add	r3, r3, r8
   16cc8:	ldr	lr, [r0, #28]
   16ccc:	ldr	r0, [r0, #24]
   16cd0:	str	r0, [sp, #52]	; 0x34
   16cd4:	sub	r0, lr, r0
   16cd8:	add	r0, r0, #380	; 0x17c
   16cdc:	add	r0, r0, #2
   16ce0:	ldr	ip, [pc, #-536]	; 16ad0 <__assert_fail@plt+0x56ec>
   16ce4:	smull	r9, ip, ip, r0
   16ce8:	add	r9, ip, r0
   16cec:	asr	ip, r0, #31
   16cf0:	rsb	ip, ip, r9, asr #2
   16cf4:	rsb	ip, ip, ip, lsl #3
   16cf8:	sub	ip, r0, ip
   16cfc:	sub	r9, lr, ip
   16d00:	adds	r9, r9, #3
   16d04:	bmi	16e28 <__assert_fail@plt+0x5a44>
   16d08:	tst	r3, #3
   16d0c:	movne	r0, #0
   16d10:	bne	16d5c <__assert_fail@plt+0x5978>
   16d14:	ldr	r0, [pc, #-580]	; 16ad8 <__assert_fail@plt+0x56f4>
   16d18:	smull	ip, r0, r0, r3
   16d1c:	asr	ip, r3, #31
   16d20:	rsb	r0, ip, r0, asr #5
   16d24:	mov	ip, #100	; 0x64
   16d28:	mul	r0, ip, r0
   16d2c:	cmp	r3, r0
   16d30:	movne	r0, #1
   16d34:	bne	16d5c <__assert_fail@plt+0x5978>
   16d38:	ldr	r0, [pc, #-616]	; 16ad8 <__assert_fail@plt+0x56f4>
   16d3c:	smull	ip, r0, r0, r3
   16d40:	asr	ip, r3, #31
   16d44:	rsb	ip, ip, r0, asr #7
   16d48:	mov	r0, #400	; 0x190
   16d4c:	mul	r0, r0, ip
   16d50:	cmp	r3, r0
   16d54:	movne	r0, #0
   16d58:	moveq	r0, #1
   16d5c:	add	r3, r0, #364	; 0x16c
   16d60:	add	r3, r3, #1
   16d64:	sub	r3, lr, r3
   16d68:	ldr	r0, [sp, #52]	; 0x34
   16d6c:	sub	r0, r3, r0
   16d70:	add	r0, r0, #380	; 0x17c
   16d74:	add	r0, r0, #2
   16d78:	ldr	ip, [pc, #-688]	; 16ad0 <__assert_fail@plt+0x56ec>
   16d7c:	smull	ip, lr, ip, r0
   16d80:	add	lr, lr, r0
   16d84:	asr	ip, r0, #31
   16d88:	rsb	ip, ip, lr, asr #2
   16d8c:	rsb	ip, ip, ip, lsl #3
   16d90:	sub	ip, r0, ip
   16d94:	sub	r3, r3, ip
   16d98:	add	r3, r3, #3
   16d9c:	cmp	r3, #0
   16da0:	movge	r9, r3
   16da4:	mvn	lr, r3
   16da8:	lsr	lr, lr, #31
   16dac:	cmp	r1, #71	; 0x47
   16db0:	beq	16ec8 <__assert_fail@plt+0x5ae4>
   16db4:	cmp	r1, #103	; 0x67
   16db8:	bne	16ef4 <__assert_fail@plt+0x5b10>
   16dbc:	ldr	r3, [pc, #-748]	; 16ad8 <__assert_fail@plt+0x56f4>
   16dc0:	smull	r1, r3, r3, r8
   16dc4:	asr	r1, r8, #31
   16dc8:	rsb	r1, r1, r3, asr #5
   16dcc:	mov	r0, #100	; 0x64
   16dd0:	mul	r1, r0, r1
   16dd4:	sub	r1, r8, r1
   16dd8:	add	r1, r1, lr
   16ddc:	ldr	r3, [pc, #-780]	; 16ad8 <__assert_fail@plt+0x56f4>
   16de0:	smull	r3, ip, r3, r1
   16de4:	asr	r3, r1, #31
   16de8:	rsb	r3, r3, ip, asr #5
   16dec:	mul	r3, r0, r3
   16df0:	subs	r3, r1, r3
   16df4:	movpl	r1, #0
   16df8:	strpl	r1, [sp, #52]	; 0x34
   16dfc:	movpl	r8, #2
   16e00:	bpl	164fc <__assert_fail@plt+0x5118>
   16e04:	ldr	r1, [pc, #-824]	; 16ad4 <__assert_fail@plt+0x56f0>
   16e08:	sub	r1, r1, lr
   16e0c:	cmp	r8, r1
   16e10:	rsblt	r3, r3, #0
   16e14:	addge	r3, r3, #100	; 0x64
   16e18:	mov	r1, #0
   16e1c:	str	r1, [sp, #52]	; 0x34
   16e20:	mov	r8, #2
   16e24:	b	164fc <__assert_fail@plt+0x5118>
   16e28:	sub	r3, r3, #1
   16e2c:	tst	r3, #3
   16e30:	movne	r3, #0
   16e34:	bne	16e80 <__assert_fail@plt+0x5a9c>
   16e38:	ldr	r0, [pc, #-872]	; 16ad8 <__assert_fail@plt+0x56f4>
   16e3c:	smull	ip, r0, r0, r3
   16e40:	asr	ip, r3, #31
   16e44:	rsb	r0, ip, r0, asr #5
   16e48:	mov	ip, #100	; 0x64
   16e4c:	mul	r0, ip, r0
   16e50:	cmp	r3, r0
   16e54:	movne	r3, #1
   16e58:	bne	16e80 <__assert_fail@plt+0x5a9c>
   16e5c:	ldr	r0, [pc, #-908]	; 16ad8 <__assert_fail@plt+0x56f4>
   16e60:	smull	ip, r0, r0, r3
   16e64:	asr	ip, r3, #31
   16e68:	rsb	ip, ip, r0, asr #7
   16e6c:	mov	r0, #400	; 0x190
   16e70:	mul	r0, r0, ip
   16e74:	cmp	r3, r0
   16e78:	movne	r3, #0
   16e7c:	moveq	r3, #1
   16e80:	add	r3, r3, #364	; 0x16c
   16e84:	add	r3, r3, #1
   16e88:	add	r3, r3, lr
   16e8c:	ldr	r0, [sp, #52]	; 0x34
   16e90:	sub	r0, r3, r0
   16e94:	add	r0, r0, #380	; 0x17c
   16e98:	add	r0, r0, #2
   16e9c:	ldr	ip, [pc, #-980]	; 16ad0 <__assert_fail@plt+0x56ec>
   16ea0:	smull	ip, lr, ip, r0
   16ea4:	add	lr, lr, r0
   16ea8:	asr	ip, r0, #31
   16eac:	rsb	ip, ip, lr, asr #2
   16eb0:	rsb	ip, ip, ip, lsl #3
   16eb4:	sub	ip, r0, ip
   16eb8:	sub	ip, r3, ip
   16ebc:	add	r9, ip, #3
   16ec0:	mvn	lr, #0
   16ec4:	b	16dac <__assert_fail@plt+0x59c8>
   16ec8:	ldr	r3, [pc, #-1020]	; 16ad4 <__assert_fail@plt+0x56f0>
   16ecc:	sub	r3, r3, lr
   16ed0:	cmp	r8, r3
   16ed4:	movge	r3, #0
   16ed8:	movlt	r3, #1
   16edc:	str	r3, [sp, #52]	; 0x34
   16ee0:	add	r3, r8, #1888	; 0x760
   16ee4:	add	r3, r3, #12
   16ee8:	add	r3, r3, lr
   16eec:	mov	r8, #4
   16ef0:	b	164fc <__assert_fail@plt+0x5118>
   16ef4:	ldr	r3, [pc, #-1068]	; 16ad0 <__assert_fail@plt+0x56ec>
   16ef8:	smull	r1, r3, r3, r9
   16efc:	add	r1, r3, r9
   16f00:	asr	r3, r9, #31
   16f04:	rsb	r3, r3, r1, asr #2
   16f08:	add	r3, r3, #1
   16f0c:	mov	r8, #2
   16f10:	b	16594 <__assert_fail@plt+0x51b0>
   16f14:	cmp	r2, #69	; 0x45
   16f18:	beq	16158 <__assert_fail@plt+0x4d74>
   16f1c:	ldr	ip, [sp, #36]	; 0x24
   16f20:	ldr	r3, [ip, #24]
   16f24:	add	r3, r3, #6
   16f28:	ldr	r1, [pc, #-1120]	; 16ad0 <__assert_fail@plt+0x56ec>
   16f2c:	smull	r0, r1, r1, r3
   16f30:	add	r0, r1, r3
   16f34:	asr	r1, r3, #31
   16f38:	rsb	r1, r1, r0, asr #2
   16f3c:	rsb	r1, r1, r1, lsl #3
   16f40:	sub	r1, r3, r1
   16f44:	ldr	r3, [ip, #28]
   16f48:	sub	r3, r3, r1
   16f4c:	add	r3, r3, #7
   16f50:	ldr	r1, [pc, #-1160]	; 16ad0 <__assert_fail@plt+0x56ec>
   16f54:	smull	r0, r1, r1, r3
   16f58:	add	r1, r1, r3
   16f5c:	asr	r3, r3, #31
   16f60:	rsb	r3, r3, r1, asr #2
   16f64:	mov	r8, #2
   16f68:	b	16594 <__assert_fail@plt+0x51b0>
   16f6c:	cmp	r2, #69	; 0x45
   16f70:	beq	16158 <__assert_fail@plt+0x4d74>
   16f74:	ldr	r3, [sp, #36]	; 0x24
   16f78:	ldr	r3, [r3, #24]
   16f7c:	mov	r8, #1
   16f80:	b	16594 <__assert_fail@plt+0x51b0>
   16f84:	cmp	r2, #69	; 0x45
   16f88:	beq	172b0 <__assert_fail@plt+0x5ecc>
   16f8c:	cmp	r2, #79	; 0x4f
   16f90:	beq	16158 <__assert_fail@plt+0x4d74>
   16f94:	ldr	r3, [sp, #36]	; 0x24
   16f98:	ldr	r3, [r3, #20]
   16f9c:	ldr	r1, [pc, #-1232]	; 16ad4 <__assert_fail@plt+0x56f0>
   16fa0:	cmp	r3, r1
   16fa4:	movge	r1, #0
   16fa8:	movlt	r1, #1
   16fac:	str	r1, [sp, #52]	; 0x34
   16fb0:	add	r3, r3, #1888	; 0x760
   16fb4:	add	r3, r3, #12
   16fb8:	mov	r8, #4
   16fbc:	b	164fc <__assert_fail@plt+0x5118>
   16fc0:	cmp	r2, #69	; 0x45
   16fc4:	beq	172b8 <__assert_fail@plt+0x5ed4>
   16fc8:	ldr	r3, [sp, #36]	; 0x24
   16fcc:	ldr	r1, [r3, #20]
   16fd0:	ldr	r3, [pc, #-1280]	; 16ad8 <__assert_fail@plt+0x56f4>
   16fd4:	smull	r3, r0, r3, r1
   16fd8:	asr	r3, r1, #31
   16fdc:	rsb	r3, r3, r0, asr #5
   16fe0:	mov	r0, #100	; 0x64
   16fe4:	mul	r3, r0, r3
   16fe8:	subs	r3, r1, r3
   16fec:	bmi	17000 <__assert_fail@plt+0x5c1c>
   16ff0:	mov	r1, #0
   16ff4:	str	r1, [sp, #52]	; 0x34
   16ff8:	mov	r8, #2
   16ffc:	b	164fc <__assert_fail@plt+0x5118>
   17000:	sub	r0, r0, #2000	; 0x7d0
   17004:	cmp	r1, r0
   17008:	rsblt	r3, r3, #0
   1700c:	addge	r3, r3, #100	; 0x64
   17010:	b	16ff0 <__assert_fail@plt+0x5c0c>
   17014:	ldr	r3, [sp, #40]	; 0x28
   17018:	cmp	r8, #0
   1701c:	movne	r3, #0
   17020:	str	r3, [sp, #40]	; 0x28
   17024:	ldr	r0, [sp, #60]	; 0x3c
   17028:	bl	11294 <strlen@plt>
   1702c:	mov	r9, r0
   17030:	ldr	r3, [sp, #28]
   17034:	subs	r3, r3, #45	; 0x2d
   17038:	movne	r3, #1
   1703c:	cmp	r5, #0
   17040:	movlt	r3, #0
   17044:	cmp	r3, #0
   17048:	moveq	r5, #0
   1704c:	mov	r4, r5
   17050:	cmp	r5, r0
   17054:	movcc	r5, r0
   17058:	ldr	r3, [sp, #32]
   1705c:	sub	r3, r3, fp
   17060:	cmp	r5, r3
   17064:	bcs	170c8 <__assert_fail@plt+0x5ce4>
   17068:	cmp	sl, #0
   1706c:	beq	170ec <__assert_fail@plt+0x5d08>
   17070:	cmp	r4, r0
   17074:	bls	170a0 <__assert_fail@plt+0x5cbc>
   17078:	sub	r4, r4, r0
   1707c:	ldr	r3, [sp, #28]
   17080:	cmp	r3, #43	; 0x2b
   17084:	cmpne	r3, #48	; 0x30
   17088:	mov	r2, r4
   1708c:	moveq	r1, #48	; 0x30
   17090:	movne	r1, #32
   17094:	mov	r0, sl
   17098:	bl	112e8 <memset@plt>
   1709c:	add	sl, sl, r4
   170a0:	cmp	r8, #0
   170a4:	bne	170d8 <__assert_fail@plt+0x5cf4>
   170a8:	ldr	r3, [sp, #40]	; 0x28
   170ac:	cmp	r3, #0
   170b0:	beq	170f4 <__assert_fail@plt+0x5d10>
   170b4:	mov	r2, r9
   170b8:	ldr	r1, [sp, #60]	; 0x3c
   170bc:	mov	r0, sl
   170c0:	bl	15a60 <__assert_fail@plt+0x467c>
   170c4:	b	170e8 <__assert_fail@plt+0x5d04>
   170c8:	mov	r3, #34	; 0x22
   170cc:	ldr	r2, [sp, #44]	; 0x2c
   170d0:	str	r3, [r2]
   170d4:	b	15bc8 <__assert_fail@plt+0x47e4>
   170d8:	mov	r2, r9
   170dc:	ldr	r1, [sp, #60]	; 0x3c
   170e0:	mov	r0, sl
   170e4:	bl	15a1c <__assert_fail@plt+0x4638>
   170e8:	add	sl, sl, r9
   170ec:	add	fp, fp, r5
   170f0:	b	15b80 <__assert_fail@plt+0x479c>
   170f4:	mov	r2, r9
   170f8:	ldr	r1, [sp, #60]	; 0x3c
   170fc:	mov	r0, sl
   17100:	bl	1112c <memcpy@plt>
   17104:	b	170e8 <__assert_fail@plt+0x5d04>
   17108:	add	r1, r7, #2
   1710c:	mov	lr, #1
   17110:	add	lr, lr, #1
   17114:	mov	r0, r1
   17118:	ldrb	r3, [r1], #1
   1711c:	cmp	r3, #58	; 0x3a
   17120:	bne	16138 <__assert_fail@plt+0x4d54>
   17124:	b	17110 <__assert_fail@plt+0x5d2c>
   17128:	mov	lr, #0
   1712c:	ldr	r1, [sp, #36]	; 0x24
   17130:	ldr	r3, [r1, #32]
   17134:	cmp	r3, #0
   17138:	blt	15b80 <__assert_fail@plt+0x479c>
   1713c:	mov	r3, r1
   17140:	ldr	r1, [r1, #36]	; 0x24
   17144:	cmp	r1, #0
   17148:	movlt	r3, #1
   1714c:	blt	1716c <__assert_fail@plt+0x5d88>
   17150:	movne	r3, #0
   17154:	bne	1716c <__assert_fail@plt+0x5d88>
   17158:	ldr	r3, [sp, #60]	; 0x3c
   1715c:	ldrb	r3, [r3]
   17160:	cmp	r3, #45	; 0x2d
   17164:	movne	r3, #0
   17168:	moveq	r3, #1
   1716c:	str	r3, [sp, #52]	; 0x34
   17170:	ldr	r3, [pc, #-1692]	; 16adc <__assert_fail@plt+0x56f8>
   17174:	smull	r0, r3, r3, r1
   17178:	add	r3, r3, r1
   1717c:	asr	r0, r1, #31
   17180:	rsb	r8, r0, r3, asr #11
   17184:	ldr	r3, [pc, #-1708]	; 16ae0 <__assert_fail@plt+0x56fc>
   17188:	smull	ip, r3, r3, r1
   1718c:	add	r3, r3, r1
   17190:	rsb	r3, r0, r3, asr #5
   17194:	ldr	r0, [pc, #-1724]	; 16ae0 <__assert_fail@plt+0x56fc>
   17198:	smull	ip, r0, r0, r3
   1719c:	add	r0, r0, r3
   171a0:	asr	ip, r3, #31
   171a4:	rsb	r0, ip, r0, asr #5
   171a8:	rsb	r0, r0, r0, lsl #4
   171ac:	sub	r0, r3, r0, lsl #2
   171b0:	rsb	r3, r3, r3, lsl #4
   171b4:	sub	r3, r1, r3, lsl #2
   171b8:	cmp	lr, #3
   171bc:	ldrls	pc, [pc, lr, lsl #2]
   171c0:	b	16158 <__assert_fail@plt+0x4d74>
   171c4:	ldrdeq	r7, [r1], -r4
   171c8:	andeq	r7, r1, ip, ror #3
   171cc:	andeq	r7, r1, r4, lsl #4
   171d0:	andeq	r7, r1, r8, lsr #4
   171d4:	mov	r3, #100	; 0x64
   171d8:	mla	r3, r3, r8, r0
   171dc:	mov	r0, #0
   171e0:	mov	r9, #1
   171e4:	mov	r8, #5
   171e8:	b	165a4 <__assert_fail@plt+0x51c0>
   171ec:	mov	r3, #100	; 0x64
   171f0:	mla	r3, r3, r8, r0
   171f4:	mov	r0, #4
   171f8:	mov	r9, #1
   171fc:	mov	r8, #6
   17200:	b	165a4 <__assert_fail@plt+0x51c0>
   17204:	mov	r1, #100	; 0x64
   17208:	mul	r0, r1, r0
   1720c:	ldr	r1, [pc, #-1840]	; 16ae4 <__assert_fail@plt+0x5700>
   17210:	mla	r0, r1, r8, r0
   17214:	add	r3, r0, r3
   17218:	mov	r0, #20
   1721c:	mov	r9, #1
   17220:	mov	r8, #9
   17224:	b	165a4 <__assert_fail@plt+0x51c0>
   17228:	cmp	r3, #0
   1722c:	bne	17204 <__assert_fail@plt+0x5e20>
   17230:	cmp	r0, #0
   17234:	bne	171ec <__assert_fail@plt+0x5e08>
   17238:	mov	r3, r8
   1723c:	mov	r9, #1
   17240:	mov	r8, #3
   17244:	b	165a4 <__assert_fail@plt+0x51c0>
   17248:	mov	r3, #34	; 0x22
   1724c:	ldr	r2, [sp, #44]	; 0x2c
   17250:	str	r3, [r2]
   17254:	b	15bc8 <__assert_fail@plt+0x47e4>
   17258:	mov	r2, r8
   1725c:	mov	r1, r9
   17260:	mov	r0, sl
   17264:	bl	1112c <memcpy@plt>
   17268:	b	161ec <__assert_fail@plt+0x4e08>
   1726c:	mov	fp, #0
   17270:	ldr	r3, [sp, #32]
   17274:	cmp	sl, #0
   17278:	cmpne	r3, #0
   1727c:	movne	r3, #0
   17280:	strbne	r3, [sl]
   17284:	ldr	r3, [sp, #44]	; 0x2c
   17288:	ldr	r2, [sp, #64]	; 0x40
   1728c:	str	r2, [r3]
   17290:	b	15bcc <__assert_fail@plt+0x47e8>
   17294:	mov	r4, #67	; 0x43
   17298:	mov	r3, #32
   1729c:	strb	r3, [sp, #72]	; 0x48
   172a0:	mov	r3, #37	; 0x25
   172a4:	strb	r3, [sp, #73]	; 0x49
   172a8:	mov	r8, #0
   172ac:	b	16394 <__assert_fail@plt+0x4fb0>
   172b0:	mov	r4, #89	; 0x59
   172b4:	b	17298 <__assert_fail@plt+0x5eb4>
   172b8:	mov	r4, #121	; 0x79
   172bc:	b	17298 <__assert_fail@plt+0x5eb4>
   172c0:	mov	r3, #45	; 0x2d
   172c4:	str	r3, [sp, #52]	; 0x34
   172c8:	add	r8, sp, #86	; 0x56
   172cc:	sub	r3, r8, r4
   172d0:	str	r3, [sp, #68]	; 0x44
   172d4:	sub	r8, r5, #1
   172d8:	sub	r8, r8, r3
   172dc:	ldr	r2, [sp, #28]
   172e0:	subs	r9, r2, #45	; 0x2d
   172e4:	movne	r9, #1
   172e8:	cmp	r8, #0
   172ec:	movle	r3, #0
   172f0:	andgt	r3, r9, #1
   172f4:	cmp	r3, #0
   172f8:	moveq	r8, #0
   172fc:	cmp	r2, #95	; 0x5f
   17300:	beq	1669c <__assert_fail@plt+0x52b8>
   17304:	ldr	r3, [sp, #32]
   17308:	sub	r3, r3, fp
   1730c:	cmp	r3, #1
   17310:	bls	166c4 <__assert_fail@plt+0x52e0>
   17314:	cmp	sl, #0
   17318:	ldrbne	r3, [sp, #52]	; 0x34
   1731c:	strbne	r3, [sl], #1
   17320:	add	fp, fp, #1
   17324:	sub	r5, r5, #1
   17328:	ldr	r8, [sp, #68]	; 0x44
   1732c:	cmp	r5, #0
   17330:	movlt	r9, #0
   17334:	andge	r9, r9, #1
   17338:	cmp	r9, #0
   1733c:	moveq	r5, #0
   17340:	cmp	r5, r8
   17344:	movcs	r9, r5
   17348:	movcc	r9, r8
   1734c:	ldr	r2, [sp, #32]
   17350:	sub	r2, r2, fp
   17354:	cmp	r9, r2
   17358:	bcs	166d4 <__assert_fail@plt+0x52f0>
   1735c:	cmp	sl, #0
   17360:	beq	173b4 <__assert_fail@plt+0x5fd0>
   17364:	cmp	r5, r8
   17368:	bls	17394 <__assert_fail@plt+0x5fb0>
   1736c:	sub	r5, r5, r8
   17370:	ldr	r3, [sp, #28]
   17374:	cmp	r3, #43	; 0x2b
   17378:	cmpne	r3, #48	; 0x30
   1737c:	mov	r2, r5
   17380:	moveq	r1, #48	; 0x30
   17384:	movne	r1, #32
   17388:	mov	r0, sl
   1738c:	bl	112e8 <memset@plt>
   17390:	add	sl, sl, r5
   17394:	ldr	r3, [sp, #40]	; 0x28
   17398:	cmp	r3, #0
   1739c:	beq	166e4 <__assert_fail@plt+0x5300>
   173a0:	mov	r2, r8
   173a4:	mov	r1, r4
   173a8:	mov	r0, sl
   173ac:	bl	15a60 <__assert_fail@plt+0x467c>
   173b0:	add	sl, sl, r8
   173b4:	add	fp, fp, r9
   173b8:	b	15b80 <__assert_fail@plt+0x479c>
   173bc:	mov	r3, #43	; 0x2b
   173c0:	str	r3, [sp, #52]	; 0x34
   173c4:	b	172c8 <__assert_fail@plt+0x5ee4>
   173c8:	ldr	r3, [sp, #32]
   173cc:	cmp	r3, fp
   173d0:	beq	16978 <__assert_fail@plt+0x5594>
   173d4:	mov	r5, #0
   173d8:	b	1694c <__assert_fail@plt+0x5568>
   173dc:	push	{r4, lr}
   173e0:	sub	sp, sp, #32
   173e4:	mov	ip, #0
   173e8:	add	lr, sp, #32
   173ec:	strb	ip, [lr, #-1]!
   173f0:	ldr	r4, [sp, #44]	; 0x2c
   173f4:	str	r4, [sp, #20]
   173f8:	ldr	r4, [sp, #40]	; 0x28
   173fc:	str	r4, [sp, #16]
   17400:	str	lr, [sp, #12]
   17404:	mvn	lr, #0
   17408:	str	lr, [sp, #8]
   1740c:	str	ip, [sp, #4]
   17410:	str	ip, [sp]
   17414:	bl	15aa4 <__assert_fail@plt+0x46c0>
   17418:	add	sp, sp, #32
   1741c:	pop	{r4, pc}
   17420:	push	{r4, r5, r6, lr}
   17424:	subs	r4, r0, #0
   17428:	beq	174a0 <__assert_fail@plt+0x60bc>
   1742c:	mov	r1, #47	; 0x2f
   17430:	mov	r0, r4
   17434:	bl	11360 <strrchr@plt>
   17438:	cmp	r0, #0
   1743c:	addne	r5, r0, #1
   17440:	moveq	r5, r4
   17444:	sub	r3, r5, r4
   17448:	cmp	r3, #6
   1744c:	ble	1748c <__assert_fail@plt+0x60a8>
   17450:	mov	r2, #7
   17454:	ldr	r1, [pc, #96]	; 174bc <__assert_fail@plt+0x60d8>
   17458:	sub	r0, r5, #7
   1745c:	bl	113c0 <strncmp@plt>
   17460:	cmp	r0, #0
   17464:	bne	1748c <__assert_fail@plt+0x60a8>
   17468:	mov	r2, #3
   1746c:	ldr	r1, [pc, #76]	; 174c0 <__assert_fail@plt+0x60dc>
   17470:	mov	r0, r5
   17474:	bl	113c0 <strncmp@plt>
   17478:	cmp	r0, #0
   1747c:	addeq	r4, r5, #3
   17480:	ldreq	r3, [pc, #60]	; 174c4 <__assert_fail@plt+0x60e0>
   17484:	streq	r4, [r3]
   17488:	movne	r4, r5
   1748c:	ldr	r3, [pc, #52]	; 174c8 <__assert_fail@plt+0x60e4>
   17490:	str	r4, [r3]
   17494:	ldr	r3, [pc, #48]	; 174cc <__assert_fail@plt+0x60e8>
   17498:	str	r4, [r3]
   1749c:	pop	{r4, r5, r6, pc}
   174a0:	ldr	r3, [pc, #40]	; 174d0 <__assert_fail@plt+0x60ec>
   174a4:	ldr	r3, [r3]
   174a8:	mov	r2, #55	; 0x37
   174ac:	mov	r1, #1
   174b0:	ldr	r0, [pc, #28]	; 174d4 <__assert_fail@plt+0x60f0>
   174b4:	bl	111c8 <fwrite@plt>
   174b8:	bl	113cc <abort@plt>
   174bc:	muleq	r1, r8, r7
   174c0:	andeq	sp, r1, r0, lsr #15
   174c4:	andeq	lr, r2, r8, asr #3
   174c8:			; <UNDEFINED> instruction: 0x0002e2b0
   174cc:	andeq	lr, r2, ip, asr #3
   174d0:	ldrdeq	lr, [r2], -r8
   174d4:	andeq	sp, r1, r0, ror #14
   174d8:	push	{r4, r5, r6, lr}
   174dc:	mov	r5, r0
   174e0:	mov	r4, r1
   174e4:	mov	r2, #48	; 0x30
   174e8:	mov	r1, #0
   174ec:	bl	112e8 <memset@plt>
   174f0:	cmp	r4, #10
   174f4:	beq	17504 <__assert_fail@plt+0x6120>
   174f8:	str	r4, [r5]
   174fc:	mov	r0, r5
   17500:	pop	{r4, r5, r6, pc}
   17504:	bl	113cc <abort@plt>
   17508:	push	{r4, r5, r6, lr}
   1750c:	mov	r4, r0
   17510:	mov	r5, r1
   17514:	mov	r2, #5
   17518:	mov	r1, r0
   1751c:	mov	r0, #0
   17520:	bl	11168 <dcgettext@plt>
   17524:	cmp	r4, r0
   17528:	popne	{r4, r5, r6, pc}
   1752c:	bl	1b750 <__assert_fail@plt+0xa36c>
   17530:	ldrb	r3, [r0]
   17534:	bic	r3, r3, #32
   17538:	cmp	r3, #85	; 0x55
   1753c:	beq	175b8 <__assert_fail@plt+0x61d4>
   17540:	cmp	r3, #71	; 0x47
   17544:	bne	17614 <__assert_fail@plt+0x6230>
   17548:	ldrb	r3, [r0, #1]
   1754c:	bic	r3, r3, #32
   17550:	cmp	r3, #66	; 0x42
   17554:	bne	17614 <__assert_fail@plt+0x6230>
   17558:	ldrb	r3, [r0, #2]
   1755c:	cmp	r3, #49	; 0x31
   17560:	bne	17614 <__assert_fail@plt+0x6230>
   17564:	ldrb	r3, [r0, #3]
   17568:	cmp	r3, #56	; 0x38
   1756c:	bne	17614 <__assert_fail@plt+0x6230>
   17570:	ldrb	r3, [r0, #4]
   17574:	cmp	r3, #48	; 0x30
   17578:	bne	17614 <__assert_fail@plt+0x6230>
   1757c:	ldrb	r3, [r0, #5]
   17580:	cmp	r3, #51	; 0x33
   17584:	bne	17614 <__assert_fail@plt+0x6230>
   17588:	ldrb	r3, [r0, #6]
   1758c:	cmp	r3, #48	; 0x30
   17590:	bne	17614 <__assert_fail@plt+0x6230>
   17594:	ldrb	r3, [r0, #7]
   17598:	cmp	r3, #0
   1759c:	bne	17614 <__assert_fail@plt+0x6230>
   175a0:	ldrb	r2, [r4]
   175a4:	ldr	r3, [pc, #124]	; 17628 <__assert_fail@plt+0x6244>
   175a8:	ldr	r0, [pc, #124]	; 1762c <__assert_fail@plt+0x6248>
   175ac:	cmp	r2, #96	; 0x60
   175b0:	movne	r0, r3
   175b4:	pop	{r4, r5, r6, pc}
   175b8:	ldrb	r3, [r0, #1]
   175bc:	bic	r3, r3, #32
   175c0:	cmp	r3, #84	; 0x54
   175c4:	bne	17614 <__assert_fail@plt+0x6230>
   175c8:	ldrb	r3, [r0, #2]
   175cc:	bic	r3, r3, #32
   175d0:	cmp	r3, #70	; 0x46
   175d4:	bne	17614 <__assert_fail@plt+0x6230>
   175d8:	ldrb	r3, [r0, #3]
   175dc:	cmp	r3, #45	; 0x2d
   175e0:	bne	17614 <__assert_fail@plt+0x6230>
   175e4:	ldrb	r3, [r0, #4]
   175e8:	cmp	r3, #56	; 0x38
   175ec:	bne	17614 <__assert_fail@plt+0x6230>
   175f0:	ldrb	r3, [r0, #5]
   175f4:	cmp	r3, #0
   175f8:	bne	17614 <__assert_fail@plt+0x6230>
   175fc:	ldrb	r2, [r4]
   17600:	ldr	r3, [pc, #40]	; 17630 <__assert_fail@plt+0x624c>
   17604:	ldr	r0, [pc, #40]	; 17634 <__assert_fail@plt+0x6250>
   17608:	cmp	r2, #96	; 0x60
   1760c:	movne	r0, r3
   17610:	pop	{r4, r5, r6, pc}
   17614:	ldr	r3, [pc, #28]	; 17638 <__assert_fail@plt+0x6254>
   17618:	ldr	r0, [pc, #28]	; 1763c <__assert_fail@plt+0x6258>
   1761c:	cmp	r5, #9
   17620:	movne	r0, r3
   17624:	pop	{r4, r5, r6, pc}
   17628:	strdeq	sp, [r1], -ip
   1762c:	andeq	sp, r1, r8, lsl #16
   17630:	strdeq	sp, [r1], -r8
   17634:	andeq	sp, r1, ip, lsl #16
   17638:	andeq	sp, r1, r0, lsl #16
   1763c:	andeq	sp, r1, r4, lsl #16
   17640:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17644:	sub	sp, sp, #116	; 0x74
   17648:	str	r0, [sp, #36]	; 0x24
   1764c:	mov	sl, r1
   17650:	str	r2, [sp, #52]	; 0x34
   17654:	str	r3, [sp, #28]
   17658:	ldr	r8, [sp, #152]	; 0x98
   1765c:	bl	111e0 <__ctype_get_mb_cur_max@plt>
   17660:	str	r0, [sp, #84]	; 0x54
   17664:	ldr	r3, [sp, #156]	; 0x9c
   17668:	lsr	r3, r3, #1
   1766c:	and	r3, r3, #1
   17670:	str	r3, [sp, #32]
   17674:	mov	r3, #1
   17678:	str	r3, [sp, #40]	; 0x28
   1767c:	mov	r3, #0
   17680:	str	r3, [sp, #80]	; 0x50
   17684:	str	r3, [sp, #44]	; 0x2c
   17688:	str	r3, [sp, #48]	; 0x30
   1768c:	str	r3, [sp, #60]	; 0x3c
   17690:	str	r3, [sp, #72]	; 0x48
   17694:	str	r3, [sp, #76]	; 0x4c
   17698:	mov	r7, sl
   1769c:	mov	sl, r8
   176a0:	cmp	sl, #10
   176a4:	ldrls	pc, [pc, sl, lsl #2]
   176a8:	b	17860 <__assert_fail@plt+0x647c>
   176ac:	andeq	r7, r1, r0, lsl r7
   176b0:	andeq	r7, r1, r0, ror #13
   176b4:	andeq	r7, r1, ip, lsr r8
   176b8:	ldrdeq	r7, [r1], -r8
   176bc:	strdeq	r7, [r1], -r0
   176c0:	andeq	r7, r1, r0, lsr #14
   176c4:	andeq	r8, r1, ip, lsl #15
   176c8:	andeq	r7, r1, r4, ror #16
   176cc:	andeq	r7, r1, ip, asr r7
   176d0:	andeq	r7, r1, ip, asr r7
   176d4:	andeq	r7, r1, ip, asr r7
   176d8:	mov	r3, #1
   176dc:	str	r3, [sp, #48]	; 0x30
   176e0:	mov	r3, #1
   176e4:	str	r3, [sp, #32]
   176e8:	str	r3, [sp, #60]	; 0x3c
   176ec:	ldr	r3, [pc, #4068]	; 186d8 <__assert_fail@plt+0x72f4>
   176f0:	str	r3, [sp, #72]	; 0x48
   176f4:	mov	fp, #0
   176f8:	mov	sl, #2
   176fc:	mov	r6, #0
   17700:	ldr	r3, [sp, #48]	; 0x30
   17704:	eor	r3, r3, #1
   17708:	str	r3, [sp, #68]	; 0x44
   1770c:	b	17ff4 <__assert_fail@plt+0x6c10>
   17710:	mov	r3, #0
   17714:	str	r3, [sp, #32]
   17718:	mov	fp, r3
   1771c:	b	176fc <__assert_fail@plt+0x6318>
   17720:	ldr	r3, [sp, #32]
   17724:	cmp	r3, #0
   17728:	bne	1787c <__assert_fail@plt+0x6498>
   1772c:	cmp	r7, #0
   17730:	beq	1789c <__assert_fail@plt+0x64b8>
   17734:	ldr	r3, [sp, #36]	; 0x24
   17738:	mov	r2, #34	; 0x22
   1773c:	strb	r2, [r3]
   17740:	mov	r3, #1
   17744:	str	r3, [sp, #48]	; 0x30
   17748:	str	r3, [sp, #60]	; 0x3c
   1774c:	ldr	r3, [pc, #3980]	; 186e0 <__assert_fail@plt+0x72fc>
   17750:	str	r3, [sp, #72]	; 0x48
   17754:	mov	fp, #1
   17758:	b	176fc <__assert_fail@plt+0x6318>
   1775c:	cmp	sl, #10
   17760:	beq	17784 <__assert_fail@plt+0x63a0>
   17764:	mov	r1, sl
   17768:	ldr	r0, [pc, #3948]	; 186dc <__assert_fail@plt+0x72f8>
   1776c:	bl	17508 <__assert_fail@plt+0x6124>
   17770:	str	r0, [sp, #164]	; 0xa4
   17774:	mov	r1, sl
   17778:	ldr	r0, [pc, #3928]	; 186d8 <__assert_fail@plt+0x72f4>
   1777c:	bl	17508 <__assert_fail@plt+0x6124>
   17780:	str	r0, [sp, #168]	; 0xa8
   17784:	ldr	r3, [sp, #32]
   17788:	cmp	r3, #0
   1778c:	movne	fp, #0
   17790:	bne	177c8 <__assert_fail@plt+0x63e4>
   17794:	ldr	r3, [sp, #164]	; 0xa4
   17798:	ldrb	r3, [r3]
   1779c:	cmp	r3, #0
   177a0:	beq	177e8 <__assert_fail@plt+0x6404>
   177a4:	ldr	r2, [sp, #164]	; 0xa4
   177a8:	mov	fp, #0
   177ac:	ldr	r1, [sp, #36]	; 0x24
   177b0:	cmp	r7, fp
   177b4:	strbhi	r3, [r1, fp]
   177b8:	add	fp, fp, #1
   177bc:	ldrb	r3, [r2, #1]!
   177c0:	cmp	r3, #0
   177c4:	bne	177b0 <__assert_fail@plt+0x63cc>
   177c8:	ldr	r0, [sp, #168]	; 0xa8
   177cc:	bl	11294 <strlen@plt>
   177d0:	str	r0, [sp, #60]	; 0x3c
   177d4:	ldr	r3, [sp, #168]	; 0xa8
   177d8:	str	r3, [sp, #72]	; 0x48
   177dc:	mov	r3, #1
   177e0:	str	r3, [sp, #48]	; 0x30
   177e4:	b	176fc <__assert_fail@plt+0x6318>
   177e8:	mov	fp, #0
   177ec:	b	177c8 <__assert_fail@plt+0x63e4>
   177f0:	ldr	r3, [sp, #32]
   177f4:	cmp	r3, #0
   177f8:	bne	178b8 <__assert_fail@plt+0x64d4>
   177fc:	mov	r3, #1
   17800:	str	r3, [sp, #48]	; 0x30
   17804:	cmp	r7, #0
   17808:	beq	178d4 <__assert_fail@plt+0x64f0>
   1780c:	ldr	r3, [sp, #36]	; 0x24
   17810:	mov	r2, #39	; 0x27
   17814:	strb	r2, [r3]
   17818:	mov	r3, #0
   1781c:	str	r3, [sp, #32]
   17820:	mov	r3, #1
   17824:	str	r3, [sp, #60]	; 0x3c
   17828:	ldr	r3, [pc, #3752]	; 186d8 <__assert_fail@plt+0x72f4>
   1782c:	str	r3, [sp, #72]	; 0x48
   17830:	mov	fp, #1
   17834:	mov	sl, #2
   17838:	b	176fc <__assert_fail@plt+0x6318>
   1783c:	ldr	r3, [sp, #32]
   17840:	cmp	r3, #0
   17844:	beq	17804 <__assert_fail@plt+0x6420>
   17848:	mov	r3, #1
   1784c:	str	r3, [sp, #60]	; 0x3c
   17850:	ldr	r3, [pc, #3712]	; 186d8 <__assert_fail@plt+0x72f4>
   17854:	str	r3, [sp, #72]	; 0x48
   17858:	mov	fp, #0
   1785c:	b	176fc <__assert_fail@plt+0x6318>
   17860:	bl	113cc <abort@plt>
   17864:	mov	r3, #0
   17868:	str	r3, [sp, #32]
   1786c:	mov	r3, #1
   17870:	str	r3, [sp, #48]	; 0x30
   17874:	mov	fp, #0
   17878:	b	176fc <__assert_fail@plt+0x6318>
   1787c:	ldr	r3, [sp, #32]
   17880:	str	r3, [sp, #48]	; 0x30
   17884:	mov	r3, #1
   17888:	str	r3, [sp, #60]	; 0x3c
   1788c:	ldr	r3, [pc, #3660]	; 186e0 <__assert_fail@plt+0x72fc>
   17890:	str	r3, [sp, #72]	; 0x48
   17894:	mov	fp, #0
   17898:	b	176fc <__assert_fail@plt+0x6318>
   1789c:	mov	r3, #1
   178a0:	str	r3, [sp, #48]	; 0x30
   178a4:	str	r3, [sp, #60]	; 0x3c
   178a8:	ldr	r3, [pc, #3632]	; 186e0 <__assert_fail@plt+0x72fc>
   178ac:	str	r3, [sp, #72]	; 0x48
   178b0:	mov	fp, #1
   178b4:	b	176fc <__assert_fail@plt+0x6318>
   178b8:	mov	r3, #1
   178bc:	str	r3, [sp, #60]	; 0x3c
   178c0:	ldr	r3, [pc, #3600]	; 186d8 <__assert_fail@plt+0x72f4>
   178c4:	str	r3, [sp, #72]	; 0x48
   178c8:	mov	fp, #0
   178cc:	mov	sl, #2
   178d0:	b	176fc <__assert_fail@plt+0x6318>
   178d4:	mov	r3, #0
   178d8:	str	r3, [sp, #32]
   178dc:	mov	r3, #1
   178e0:	str	r3, [sp, #60]	; 0x3c
   178e4:	ldr	r3, [pc, #3564]	; 186d8 <__assert_fail@plt+0x72f4>
   178e8:	str	r3, [sp, #72]	; 0x48
   178ec:	mov	fp, #1
   178f0:	mov	sl, #2
   178f4:	b	176fc <__assert_fail@plt+0x6318>
   178f8:	mov	r3, #0
   178fc:	str	r3, [sp, #56]	; 0x38
   17900:	ldr	r3, [sp, #52]	; 0x34
   17904:	add	r2, r3, r6
   17908:	str	r2, [sp, #64]	; 0x40
   1790c:	ldrb	r4, [r3, r6]
   17910:	cmp	r4, #126	; 0x7e
   17914:	ldrls	pc, [pc, r4, lsl #2]
   17918:	b	18154 <__assert_fail@plt+0x6d70>
   1791c:	andeq	r7, r1, r4, lsr fp
   17920:	andeq	r8, r1, r4, asr r1
   17924:	andeq	r8, r1, r4, asr r1
   17928:	andeq	r8, r1, r4, asr r1
   1792c:	andeq	r8, r1, r4, asr r1
   17930:	andeq	r8, r1, r4, asr r1
   17934:	andeq	r8, r1, r4, asr r1
   17938:	muleq	r1, r0, lr
   1793c:	andeq	r7, r1, ip, lsr #22
   17940:	andeq	r7, r1, r8, asr #28
   17944:	andeq	r7, r1, r0, asr #28
   17948:			; <UNDEFINED> instruction: 0x00017db0
   1794c:	andeq	r7, r1, r8, lsr #27
   17950:	andeq	r7, r1, r4, lsr #22
   17954:	andeq	r8, r1, r4, asr r1
   17958:	andeq	r8, r1, r4, asr r1
   1795c:	andeq	r8, r1, r4, asr r1
   17960:	andeq	r8, r1, r4, asr r1
   17964:	andeq	r8, r1, r4, asr r1
   17968:	andeq	r8, r1, r4, asr r1
   1796c:	andeq	r8, r1, r4, asr r1
   17970:	andeq	r8, r1, r4, asr r1
   17974:	andeq	r8, r1, r4, asr r1
   17978:	andeq	r8, r1, r4, asr r1
   1797c:	andeq	r8, r1, r4, asr r1
   17980:	andeq	r8, r1, r4, asr r1
   17984:	andeq	r8, r1, r4, asr r1
   17988:	andeq	r8, r1, r4, asr r1
   1798c:	andeq	r8, r1, r4, asr r1
   17990:	andeq	r8, r1, r4, asr r1
   17994:	andeq	r8, r1, r4, asr r1
   17998:	andeq	r8, r1, r4, asr r1
   1799c:	andeq	r7, r1, r4, ror #29
   179a0:	andeq	r7, r1, r0, ror #29
   179a4:	andeq	r7, r1, r0, ror #29
   179a8:			; <UNDEFINED> instruction: 0x00017eb8
   179ac:	andeq	r7, r1, r0, ror #29
   179b0:	andeq	r8, r1, r8, lsr #10
   179b4:	andeq	r7, r1, r0, ror #29
   179b8:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   179bc:	andeq	r7, r1, r0, ror #29
   179c0:	andeq	r7, r1, r0, ror #29
   179c4:	andeq	r7, r1, r0, ror #29
   179c8:	andeq	r8, r1, r8, lsr #10
   179cc:	andeq	r8, r1, r8, lsr #10
   179d0:	andeq	r8, r1, r8, lsr #10
   179d4:	andeq	r8, r1, r8, lsr #10
   179d8:	andeq	r8, r1, r8, lsr #10
   179dc:	andeq	r8, r1, r8, lsr #10
   179e0:	andeq	r8, r1, r8, lsr #10
   179e4:	andeq	r8, r1, r8, lsr #10
   179e8:	andeq	r8, r1, r8, lsr #10
   179ec:	andeq	r8, r1, r8, lsr #10
   179f0:	andeq	r8, r1, r8, lsr #10
   179f4:	andeq	r8, r1, r8, lsr #10
   179f8:	andeq	r8, r1, r8, lsr #10
   179fc:	andeq	r8, r1, r8, lsr #10
   17a00:	andeq	r8, r1, r8, lsr #10
   17a04:	andeq	r8, r1, r8, lsr #10
   17a08:	andeq	r7, r1, r0, ror #29
   17a0c:	andeq	r7, r1, r0, ror #29
   17a10:	andeq	r7, r1, r0, ror #29
   17a14:	andeq	r7, r1, r0, ror #29
   17a18:	andeq	r7, r1, ip, lsr ip
   17a1c:	andeq	r8, r1, r4, asr r1
   17a20:	andeq	r8, r1, r8, lsr #10
   17a24:	andeq	r8, r1, r8, lsr #10
   17a28:	andeq	r8, r1, r8, lsr #10
   17a2c:	andeq	r8, r1, r8, lsr #10
   17a30:	andeq	r8, r1, r8, lsr #10
   17a34:	andeq	r8, r1, r8, lsr #10
   17a38:	andeq	r8, r1, r8, lsr #10
   17a3c:	andeq	r8, r1, r8, lsr #10
   17a40:	andeq	r8, r1, r8, lsr #10
   17a44:	andeq	r8, r1, r8, lsr #10
   17a48:	andeq	r8, r1, r8, lsr #10
   17a4c:	andeq	r8, r1, r8, lsr #10
   17a50:	andeq	r8, r1, r8, lsr #10
   17a54:	andeq	r8, r1, r8, lsr #10
   17a58:	andeq	r8, r1, r8, lsr #10
   17a5c:	andeq	r8, r1, r8, lsr #10
   17a60:	andeq	r8, r1, r8, lsr #10
   17a64:	andeq	r8, r1, r8, lsr #10
   17a68:	andeq	r8, r1, r8, lsr #10
   17a6c:	andeq	r8, r1, r8, lsr #10
   17a70:	andeq	r8, r1, r8, lsr #10
   17a74:	andeq	r8, r1, r8, lsr #10
   17a78:	andeq	r8, r1, r8, lsr #10
   17a7c:	andeq	r8, r1, r8, lsr #10
   17a80:	andeq	r8, r1, r8, lsr #10
   17a84:	andeq	r8, r1, r8, lsr #10
   17a88:	andeq	r7, r1, r0, ror #29
   17a8c:			; <UNDEFINED> instruction: 0x00017db8
   17a90:	andeq	r8, r1, r8, lsr #10
   17a94:	andeq	r7, r1, r0, ror #29
   17a98:	andeq	r8, r1, r8, lsr #10
   17a9c:	andeq	r7, r1, r0, ror #29
   17aa0:	andeq	r8, r1, r8, lsr #10
   17aa4:	andeq	r8, r1, r8, lsr #10
   17aa8:	andeq	r8, r1, r8, lsr #10
   17aac:	andeq	r8, r1, r8, lsr #10
   17ab0:	andeq	r8, r1, r8, lsr #10
   17ab4:	andeq	r8, r1, r8, lsr #10
   17ab8:	andeq	r8, r1, r8, lsr #10
   17abc:	andeq	r8, r1, r8, lsr #10
   17ac0:	andeq	r8, r1, r8, lsr #10
   17ac4:	andeq	r8, r1, r8, lsr #10
   17ac8:	andeq	r8, r1, r8, lsr #10
   17acc:	andeq	r8, r1, r8, lsr #10
   17ad0:	andeq	r8, r1, r8, lsr #10
   17ad4:	andeq	r8, r1, r8, lsr #10
   17ad8:	andeq	r8, r1, r8, lsr #10
   17adc:	andeq	r8, r1, r8, lsr #10
   17ae0:	andeq	r8, r1, r8, lsr #10
   17ae4:	andeq	r8, r1, r8, lsr #10
   17ae8:	andeq	r8, r1, r8, lsr #10
   17aec:	andeq	r8, r1, r8, lsr #10
   17af0:	andeq	r8, r1, r8, lsr #10
   17af4:	andeq	r8, r1, r8, lsr #10
   17af8:	andeq	r8, r1, r8, lsr #10
   17afc:	andeq	r8, r1, r8, lsr #10
   17b00:	andeq	r8, r1, r8, lsr #10
   17b04:	andeq	r8, r1, r8, lsr #10
   17b08:	muleq	r1, r8, lr
   17b0c:	andeq	r7, r1, r0, ror #29
   17b10:	muleq	r1, r8, lr
   17b14:			; <UNDEFINED> instruction: 0x00017eb8
   17b18:	mov	r3, #0
   17b1c:	str	r3, [sp, #56]	; 0x38
   17b20:	b	17900 <__assert_fail@plt+0x651c>
   17b24:	mov	r3, #114	; 0x72
   17b28:	b	17e4c <__assert_fail@plt+0x6a68>
   17b2c:	mov	r3, #98	; 0x62
   17b30:	b	17e64 <__assert_fail@plt+0x6a80>
   17b34:	ldr	r3, [sp, #48]	; 0x30
   17b38:	cmp	r3, #0
   17b3c:	beq	17c24 <__assert_fail@plt+0x6840>
   17b40:	ldr	r3, [sp, #32]
   17b44:	cmp	r3, #0
   17b48:	bne	186ac <__assert_fail@plt+0x72c8>
   17b4c:	ldr	r3, [sp, #44]	; 0x2c
   17b50:	eor	r3, r3, #1
   17b54:	cmp	sl, #2
   17b58:	movne	r3, #0
   17b5c:	andeq	r3, r3, #1
   17b60:	cmp	r3, #0
   17b64:	moveq	r2, fp
   17b68:	beq	17bac <__assert_fail@plt+0x67c8>
   17b6c:	cmp	r7, fp
   17b70:	ldrhi	r2, [sp, #36]	; 0x24
   17b74:	movhi	r1, #39	; 0x27
   17b78:	strbhi	r1, [r2, fp]
   17b7c:	add	r2, fp, #1
   17b80:	cmp	r7, r2
   17b84:	ldrhi	r1, [sp, #36]	; 0x24
   17b88:	movhi	r0, #36	; 0x24
   17b8c:	strbhi	r0, [r1, r2]
   17b90:	add	r2, fp, #2
   17b94:	cmp	r7, r2
   17b98:	ldrhi	r1, [sp, #36]	; 0x24
   17b9c:	movhi	r0, #39	; 0x27
   17ba0:	strbhi	r0, [r1, r2]
   17ba4:	add	r2, fp, #3
   17ba8:	str	r3, [sp, #44]	; 0x2c
   17bac:	cmp	r7, r2
   17bb0:	ldrhi	r3, [sp, #36]	; 0x24
   17bb4:	movhi	r1, #92	; 0x5c
   17bb8:	strbhi	r1, [r3, r2]
   17bbc:	add	fp, r2, #1
   17bc0:	cmp	r5, #0
   17bc4:	beq	18530 <__assert_fail@plt+0x714c>
   17bc8:	add	r3, r6, #1
   17bcc:	ldr	r1, [sp, #28]
   17bd0:	cmp	r1, r3
   17bd4:	bls	18540 <__assert_fail@plt+0x715c>
   17bd8:	ldr	r1, [sp, #52]	; 0x34
   17bdc:	ldrb	r3, [r1, r3]
   17be0:	sub	r3, r3, #48	; 0x30
   17be4:	uxtb	r3, r3
   17be8:	cmp	r3, #9
   17bec:	bhi	1854c <__assert_fail@plt+0x7168>
   17bf0:	cmp	r7, fp
   17bf4:	movhi	r3, #48	; 0x30
   17bf8:	ldrhi	r1, [sp, #36]	; 0x24
   17bfc:	strbhi	r3, [r1, fp]
   17c00:	add	r3, r2, #2
   17c04:	cmp	r7, r3
   17c08:	movhi	r1, #48	; 0x30
   17c0c:	ldrhi	r0, [sp, #36]	; 0x24
   17c10:	strbhi	r1, [r0, r3]
   17c14:	add	fp, r2, #3
   17c18:	ldr	r8, [sp, #32]
   17c1c:	mov	r4, #48	; 0x30
   17c20:	b	17efc <__assert_fail@plt+0x6b18>
   17c24:	ldr	r3, [sp, #156]	; 0x9c
   17c28:	tst	r3, #1
   17c2c:	bne	17ff0 <__assert_fail@plt+0x6c0c>
   17c30:	ldr	r5, [sp, #48]	; 0x30
   17c34:	mov	r8, r5
   17c38:	b	17efc <__assert_fail@plt+0x6b18>
   17c3c:	cmp	sl, #2
   17c40:	beq	17c58 <__assert_fail@plt+0x6874>
   17c44:	cmp	sl, #5
   17c48:	beq	17c70 <__assert_fail@plt+0x688c>
   17c4c:	mov	r8, #0
   17c50:	mov	r5, r8
   17c54:	b	17efc <__assert_fail@plt+0x6b18>
   17c58:	ldr	r3, [sp, #32]
   17c5c:	cmp	r3, #0
   17c60:	bne	186c0 <__assert_fail@plt+0x72dc>
   17c64:	mov	r8, r3
   17c68:	mov	r5, r3
   17c6c:	b	17efc <__assert_fail@plt+0x6b18>
   17c70:	ldr	r3, [sp, #156]	; 0x9c
   17c74:	tst	r3, #4
   17c78:	beq	18558 <__assert_fail@plt+0x7174>
   17c7c:	add	r3, r6, #2
   17c80:	ldr	r2, [sp, #28]
   17c84:	cmp	r2, r3
   17c88:	bls	18564 <__assert_fail@plt+0x7180>
   17c8c:	ldr	r2, [sp, #52]	; 0x34
   17c90:	add	r2, r2, r6
   17c94:	ldrb	r2, [r2, #1]
   17c98:	cmp	r2, #63	; 0x3f
   17c9c:	movne	r8, #0
   17ca0:	movne	r5, r8
   17ca4:	bne	17efc <__assert_fail@plt+0x6b18>
   17ca8:	ldr	r2, [sp, #52]	; 0x34
   17cac:	ldrb	r2, [r2, r3]
   17cb0:	sub	r1, r2, #33	; 0x21
   17cb4:	cmp	r1, #29
   17cb8:	ldrls	pc, [pc, r1, lsl #2]
   17cbc:	b	18570 <__assert_fail@plt+0x718c>
   17cc0:	andeq	r7, r1, r8, lsr sp
   17cc4:	andeq	r8, r1, r0, ror r5
   17cc8:	andeq	r8, r1, r0, ror r5
   17ccc:	andeq	r8, r1, r0, ror r5
   17cd0:	andeq	r8, r1, r0, ror r5
   17cd4:	andeq	r8, r1, r0, ror r5
   17cd8:	andeq	r7, r1, r8, lsr sp
   17cdc:	andeq	r7, r1, r8, lsr sp
   17ce0:	andeq	r7, r1, r8, lsr sp
   17ce4:	andeq	r8, r1, r0, ror r5
   17ce8:	andeq	r8, r1, r0, ror r5
   17cec:	andeq	r8, r1, r0, ror r5
   17cf0:	andeq	r7, r1, r8, lsr sp
   17cf4:	andeq	r8, r1, r0, ror r5
   17cf8:	andeq	r7, r1, r8, lsr sp
   17cfc:	andeq	r8, r1, r0, ror r5
   17d00:	andeq	r8, r1, r0, ror r5
   17d04:	andeq	r8, r1, r0, ror r5
   17d08:	andeq	r8, r1, r0, ror r5
   17d0c:	andeq	r8, r1, r0, ror r5
   17d10:	andeq	r8, r1, r0, ror r5
   17d14:	andeq	r8, r1, r0, ror r5
   17d18:	andeq	r8, r1, r0, ror r5
   17d1c:	andeq	r8, r1, r0, ror r5
   17d20:	andeq	r8, r1, r0, ror r5
   17d24:	andeq	r8, r1, r0, ror r5
   17d28:	andeq	r8, r1, r0, ror r5
   17d2c:	andeq	r7, r1, r8, lsr sp
   17d30:	andeq	r7, r1, r8, lsr sp
   17d34:	andeq	r7, r1, r8, lsr sp
   17d38:	ldr	r1, [sp, #32]
   17d3c:	cmp	r1, #0
   17d40:	bne	18780 <__assert_fail@plt+0x739c>
   17d44:	cmp	r7, fp
   17d48:	movhi	r1, #63	; 0x3f
   17d4c:	ldrhi	r0, [sp, #36]	; 0x24
   17d50:	strbhi	r1, [r0, fp]
   17d54:	add	r1, fp, #1
   17d58:	cmp	r7, r1
   17d5c:	ldrhi	r0, [sp, #36]	; 0x24
   17d60:	movhi	ip, #34	; 0x22
   17d64:	strbhi	ip, [r0, r1]
   17d68:	add	r1, fp, #2
   17d6c:	cmp	r7, r1
   17d70:	ldrhi	r0, [sp, #36]	; 0x24
   17d74:	movhi	ip, #34	; 0x22
   17d78:	strbhi	ip, [r0, r1]
   17d7c:	add	r1, fp, #3
   17d80:	cmp	r7, r1
   17d84:	movhi	r0, #63	; 0x3f
   17d88:	ldrhi	ip, [sp, #36]	; 0x24
   17d8c:	strbhi	r0, [ip, r1]
   17d90:	add	fp, fp, #4
   17d94:	ldr	r5, [sp, #32]
   17d98:	mov	r8, r5
   17d9c:	mov	r4, r2
   17da0:	mov	r6, r3
   17da4:	b	17efc <__assert_fail@plt+0x6b18>
   17da8:	mov	r3, #102	; 0x66
   17dac:	b	17e64 <__assert_fail@plt+0x6a80>
   17db0:	mov	r3, #118	; 0x76
   17db4:	b	17e64 <__assert_fail@plt+0x6a80>
   17db8:	cmp	sl, #2
   17dbc:	beq	17e28 <__assert_fail@plt+0x6a44>
   17dc0:	ldr	r3, [sp, #48]	; 0x30
   17dc4:	ldr	r2, [sp, #32]
   17dc8:	and	r3, r3, r2
   17dcc:	tst	r9, r3
   17dd0:	moveq	r3, r4
   17dd4:	beq	17e64 <__assert_fail@plt+0x6a80>
   17dd8:	mov	r8, #0
   17ddc:	mov	r5, r8
   17de0:	eor	r5, r5, #1
   17de4:	ldr	r3, [sp, #44]	; 0x2c
   17de8:	and	r5, r5, r3
   17dec:	tst	r5, #255	; 0xff
   17df0:	beq	17fd0 <__assert_fail@plt+0x6bec>
   17df4:	cmp	r7, fp
   17df8:	ldrhi	r3, [sp, #36]	; 0x24
   17dfc:	movhi	r2, #39	; 0x27
   17e00:	strbhi	r2, [r3, fp]
   17e04:	add	r3, fp, #1
   17e08:	cmp	r7, r3
   17e0c:	ldrhi	r2, [sp, #36]	; 0x24
   17e10:	movhi	r1, #39	; 0x27
   17e14:	strbhi	r1, [r2, r3]
   17e18:	add	fp, fp, #2
   17e1c:	mov	r3, #0
   17e20:	str	r3, [sp, #44]	; 0x2c
   17e24:	b	17fd0 <__assert_fail@plt+0x6bec>
   17e28:	ldr	r3, [sp, #32]
   17e2c:	cmp	r3, #0
   17e30:	bne	186cc <__assert_fail@plt+0x72e8>
   17e34:	mov	r8, r3
   17e38:	mov	r5, r3
   17e3c:	b	17de0 <__assert_fail@plt+0x69fc>
   17e40:	mov	r3, #110	; 0x6e
   17e44:	b	17e4c <__assert_fail@plt+0x6a68>
   17e48:	mov	r3, #116	; 0x74
   17e4c:	ldr	r2, [sp, #32]
   17e50:	cmp	sl, #2
   17e54:	movne	r2, #0
   17e58:	andeq	r2, r2, #1
   17e5c:	cmp	r2, #0
   17e60:	bne	17e84 <__assert_fail@plt+0x6aa0>
   17e64:	ldr	r2, [sp, #48]	; 0x30
   17e68:	cmp	r2, #0
   17e6c:	moveq	r8, r2
   17e70:	moveq	r5, r2
   17e74:	beq	17efc <__assert_fail@plt+0x6b18>
   17e78:	mov	r4, r3
   17e7c:	mov	r8, #0
   17e80:	b	17f54 <__assert_fail@plt+0x6b70>
   17e84:	mov	r8, sl
   17e88:	mov	sl, r7
   17e8c:	b	186f8 <__assert_fail@plt+0x7314>
   17e90:	mov	r3, #97	; 0x61
   17e94:	b	17e64 <__assert_fail@plt+0x6a80>
   17e98:	ldr	r3, [sp, #28]
   17e9c:	cmn	r3, #1
   17ea0:	beq	17ecc <__assert_fail@plt+0x6ae8>
   17ea4:	ldr	r3, [sp, #28]
   17ea8:	subs	r3, r3, #1
   17eac:	movne	r3, #1
   17eb0:	cmp	r3, #0
   17eb4:	bne	1857c <__assert_fail@plt+0x7198>
   17eb8:	cmp	r6, #0
   17ebc:	beq	17ee4 <__assert_fail@plt+0x6b00>
   17ec0:	mov	r8, #0
   17ec4:	mov	r5, r8
   17ec8:	b	17efc <__assert_fail@plt+0x6b18>
   17ecc:	ldr	r3, [sp, #52]	; 0x34
   17ed0:	ldrb	r3, [r3, #1]
   17ed4:	adds	r3, r3, #0
   17ed8:	movne	r3, #1
   17edc:	b	17eb0 <__assert_fail@plt+0x6acc>
   17ee0:	mov	r8, #0
   17ee4:	ldr	r5, [sp, #32]
   17ee8:	cmp	sl, #2
   17eec:	movne	r5, #0
   17ef0:	andeq	r5, r5, #1
   17ef4:	cmp	r5, #0
   17ef8:	bne	180ac <__assert_fail@plt+0x6cc8>
   17efc:	ldr	r3, [sp, #68]	; 0x44
   17f00:	cmp	sl, #2
   17f04:	orreq	r3, r3, #1
   17f08:	eor	r3, r3, #1
   17f0c:	ldr	r2, [sp, #32]
   17f10:	orr	r3, r2, r3
   17f14:	tst	r3, #255	; 0xff
   17f18:	beq	17f48 <__assert_fail@plt+0x6b64>
   17f1c:	ldr	r3, [sp, #160]	; 0xa0
   17f20:	cmp	r3, #0
   17f24:	beq	17f48 <__assert_fail@plt+0x6b64>
   17f28:	lsr	r2, r4, #5
   17f2c:	uxtb	r2, r2
   17f30:	and	r3, r4, #31
   17f34:	ldr	r1, [sp, #160]	; 0xa0
   17f38:	ldr	r2, [r1, r2, lsl #2]
   17f3c:	lsr	r3, r2, r3
   17f40:	tst	r3, #1
   17f44:	bne	17f54 <__assert_fail@plt+0x6b70>
   17f48:	ldr	r3, [sp, #56]	; 0x38
   17f4c:	cmp	r3, #0
   17f50:	beq	17de0 <__assert_fail@plt+0x69fc>
   17f54:	ldr	r3, [sp, #32]
   17f58:	cmp	r3, #0
   17f5c:	bne	18768 <__assert_fail@plt+0x7384>
   17f60:	ldr	r3, [sp, #44]	; 0x2c
   17f64:	eor	r3, r3, #1
   17f68:	cmp	sl, #2
   17f6c:	movne	r3, #0
   17f70:	andeq	r3, r3, #1
   17f74:	cmp	r3, #0
   17f78:	beq	17fbc <__assert_fail@plt+0x6bd8>
   17f7c:	cmp	r7, fp
   17f80:	ldrhi	r2, [sp, #36]	; 0x24
   17f84:	movhi	r1, #39	; 0x27
   17f88:	strbhi	r1, [r2, fp]
   17f8c:	add	r2, fp, #1
   17f90:	cmp	r7, r2
   17f94:	ldrhi	r1, [sp, #36]	; 0x24
   17f98:	movhi	r0, #36	; 0x24
   17f9c:	strbhi	r0, [r1, r2]
   17fa0:	add	r2, fp, #2
   17fa4:	cmp	r7, r2
   17fa8:	ldrhi	r1, [sp, #36]	; 0x24
   17fac:	movhi	r0, #39	; 0x27
   17fb0:	strbhi	r0, [r1, r2]
   17fb4:	add	fp, fp, #3
   17fb8:	str	r3, [sp, #44]	; 0x2c
   17fbc:	cmp	r7, fp
   17fc0:	ldrhi	r3, [sp, #36]	; 0x24
   17fc4:	movhi	r2, #92	; 0x5c
   17fc8:	strbhi	r2, [r3, fp]
   17fcc:	add	fp, fp, #1
   17fd0:	cmp	fp, r7
   17fd4:	ldrcc	r3, [sp, #36]	; 0x24
   17fd8:	strbcc	r4, [r3, fp]
   17fdc:	add	fp, fp, #1
   17fe0:	ldr	r3, [sp, #40]	; 0x28
   17fe4:	cmp	r8, #0
   17fe8:	moveq	r3, #0
   17fec:	str	r3, [sp, #40]	; 0x28
   17ff0:	add	r6, r6, #1
   17ff4:	ldr	r3, [sp, #28]
   17ff8:	cmn	r3, #1
   17ffc:	beq	18588 <__assert_fail@plt+0x71a4>
   18000:	ldr	r3, [sp, #28]
   18004:	subs	r8, r3, r6
   18008:	movne	r8, #1
   1800c:	cmp	r8, #0
   18010:	beq	1859c <__assert_fail@plt+0x71b8>
   18014:	ldr	r5, [sp, #48]	; 0x30
   18018:	cmp	sl, #2
   1801c:	moveq	r5, #0
   18020:	andne	r5, r5, #1
   18024:	ldr	r3, [sp, #60]	; 0x3c
   18028:	adds	r9, r3, #0
   1802c:	movne	r9, #1
   18030:	ands	r2, r5, r9
   18034:	str	r2, [sp, #56]	; 0x38
   18038:	beq	17900 <__assert_fail@plt+0x651c>
   1803c:	add	r4, r6, r3
   18040:	ldr	r2, [sp, #28]
   18044:	cmp	r3, #1
   18048:	movls	r3, #0
   1804c:	movhi	r3, #1
   18050:	cmn	r2, #1
   18054:	movne	r3, #0
   18058:	cmp	r3, #0
   1805c:	beq	1806c <__assert_fail@plt+0x6c88>
   18060:	ldr	r0, [sp, #52]	; 0x34
   18064:	bl	11294 <strlen@plt>
   18068:	str	r0, [sp, #28]
   1806c:	ldr	r3, [sp, #28]
   18070:	cmp	r3, r4
   18074:	bcc	178f8 <__assert_fail@plt+0x6514>
   18078:	ldr	r2, [sp, #60]	; 0x3c
   1807c:	ldr	r1, [sp, #72]	; 0x48
   18080:	ldr	r3, [sp, #52]	; 0x34
   18084:	add	r0, r3, r6
   18088:	bl	11150 <memcmp@plt>
   1808c:	cmp	r0, #0
   18090:	bne	17b18 <__assert_fail@plt+0x6734>
   18094:	ldr	r3, [sp, #32]
   18098:	cmp	r3, #0
   1809c:	beq	17900 <__assert_fail@plt+0x651c>
   180a0:	mov	r8, sl
   180a4:	mov	sl, r7
   180a8:	b	186f8 <__assert_fail@plt+0x7314>
   180ac:	mov	r8, sl
   180b0:	mov	sl, r7
   180b4:	b	186f8 <__assert_fail@plt+0x7314>
   180b8:	cmp	sl, #2
   180bc:	strne	r8, [sp, #80]	; 0x50
   180c0:	movne	r5, #0
   180c4:	bne	17efc <__assert_fail@plt+0x6b18>
   180c8:	ldr	r3, [sp, #32]
   180cc:	cmp	r3, #0
   180d0:	bne	186e4 <__assert_fail@plt+0x7300>
   180d4:	ldr	r2, [sp, #76]	; 0x4c
   180d8:	adds	r3, r7, #0
   180dc:	movne	r3, #1
   180e0:	cmp	r2, #0
   180e4:	movne	r3, #0
   180e8:	cmp	r3, #0
   180ec:	movne	r3, #0
   180f0:	bne	18120 <__assert_fail@plt+0x6d3c>
   180f4:	cmp	r7, fp
   180f8:	ldrhi	r3, [sp, #36]	; 0x24
   180fc:	movhi	r2, #39	; 0x27
   18100:	strbhi	r2, [r3, fp]
   18104:	add	r3, fp, #1
   18108:	cmp	r7, r3
   1810c:	ldrhi	r2, [sp, #36]	; 0x24
   18110:	movhi	r1, #92	; 0x5c
   18114:	strbhi	r1, [r2, r3]
   18118:	mov	r3, r7
   1811c:	ldr	r7, [sp, #76]	; 0x4c
   18120:	add	r2, fp, #2
   18124:	cmp	r2, r3
   18128:	ldrcc	r1, [sp, #36]	; 0x24
   1812c:	movcc	r0, #39	; 0x27
   18130:	strbcc	r0, [r1, r2]
   18134:	add	fp, fp, #3
   18138:	ldr	r2, [sp, #32]
   1813c:	mov	r5, r2
   18140:	str	r8, [sp, #80]	; 0x50
   18144:	str	r2, [sp, #44]	; 0x2c
   18148:	str	r7, [sp, #76]	; 0x4c
   1814c:	mov	r7, r3
   18150:	b	17efc <__assert_fail@plt+0x6b18>
   18154:	ldr	r5, [sp, #84]	; 0x54
   18158:	cmp	r5, #1
   1815c:	beq	1818c <__assert_fail@plt+0x6da8>
   18160:	mov	r3, #0
   18164:	str	r3, [sp, #104]	; 0x68
   18168:	str	r3, [sp, #108]	; 0x6c
   1816c:	ldr	r3, [sp, #28]
   18170:	cmn	r3, #1
   18174:	beq	181c0 <__assert_fail@plt+0x6ddc>
   18178:	mov	r3, #0
   1817c:	str	r4, [sp, #88]	; 0x58
   18180:	str	fp, [sp, #92]	; 0x5c
   18184:	mov	fp, r3
   18188:	b	182e8 <__assert_fail@plt+0x6f04>
   1818c:	bl	1127c <__ctype_b_loc@plt>
   18190:	ldr	r2, [r0]
   18194:	lsl	r3, r4, #1
   18198:	ldrh	r8, [r2, r3]
   1819c:	lsr	r8, r8, #14
   181a0:	and	r8, r8, #1
   181a4:	mov	r2, r5
   181a8:	eor	r5, r8, #1
   181ac:	ldr	r3, [sp, #48]	; 0x30
   181b0:	and	r5, r5, r3
   181b4:	ands	r5, r5, #255	; 0xff
   181b8:	beq	17efc <__assert_fail@plt+0x6b18>
   181bc:	b	18380 <__assert_fail@plt+0x6f9c>
   181c0:	ldr	r0, [sp, #52]	; 0x34
   181c4:	bl	11294 <strlen@plt>
   181c8:	str	r0, [sp, #28]
   181cc:	b	18178 <__assert_fail@plt+0x6d94>
   181d0:	mov	r2, fp
   181d4:	mov	r1, r4
   181d8:	ldr	r4, [sp, #88]	; 0x58
   181dc:	ldr	fp, [sp, #92]	; 0x5c
   181e0:	ldr	r0, [sp, #28]
   181e4:	cmp	r0, r5
   181e8:	bls	183b4 <__assert_fail@plt+0x6fd0>
   181ec:	ldrb	r3, [r1]
   181f0:	cmp	r3, #0
   181f4:	beq	183bc <__assert_fail@plt+0x6fd8>
   181f8:	mov	r3, r1
   181fc:	add	r2, r2, #1
   18200:	add	r1, r6, r2
   18204:	cmp	r0, r1
   18208:	bls	183c4 <__assert_fail@plt+0x6fe0>
   1820c:	ldrb	r1, [r3, #1]!
   18210:	cmp	r1, #0
   18214:	bne	181fc <__assert_fail@plt+0x6e18>
   18218:	mov	r8, #0
   1821c:	b	18378 <__assert_fail@plt+0x6f94>
   18220:	cmp	r4, r5
   18224:	beq	182c4 <__assert_fail@plt+0x6ee0>
   18228:	ldrb	r3, [r4, #1]!
   1822c:	sub	r3, r3, #91	; 0x5b
   18230:	cmp	r3, #33	; 0x21
   18234:	ldrls	pc, [pc, r3, lsl #2]
   18238:	b	18220 <__assert_fail@plt+0x6e3c>
   1823c:	strdeq	r8, [r1], -r0
   18240:	strdeq	r8, [r1], -r0
   18244:	andeq	r8, r1, r0, lsr #4
   18248:	strdeq	r8, [r1], -r0
   1824c:	andeq	r8, r1, r0, lsr #4
   18250:	strdeq	r8, [r1], -r0
   18254:	andeq	r8, r1, r0, lsr #4
   18258:	andeq	r8, r1, r0, lsr #4
   1825c:	andeq	r8, r1, r0, lsr #4
   18260:	andeq	r8, r1, r0, lsr #4
   18264:	andeq	r8, r1, r0, lsr #4
   18268:	andeq	r8, r1, r0, lsr #4
   1826c:	andeq	r8, r1, r0, lsr #4
   18270:	andeq	r8, r1, r0, lsr #4
   18274:	andeq	r8, r1, r0, lsr #4
   18278:	andeq	r8, r1, r0, lsr #4
   1827c:	andeq	r8, r1, r0, lsr #4
   18280:	andeq	r8, r1, r0, lsr #4
   18284:	andeq	r8, r1, r0, lsr #4
   18288:	andeq	r8, r1, r0, lsr #4
   1828c:	andeq	r8, r1, r0, lsr #4
   18290:	andeq	r8, r1, r0, lsr #4
   18294:	andeq	r8, r1, r0, lsr #4
   18298:	andeq	r8, r1, r0, lsr #4
   1829c:	andeq	r8, r1, r0, lsr #4
   182a0:	andeq	r8, r1, r0, lsr #4
   182a4:	andeq	r8, r1, r0, lsr #4
   182a8:	andeq	r8, r1, r0, lsr #4
   182ac:	andeq	r8, r1, r0, lsr #4
   182b0:	andeq	r8, r1, r0, lsr #4
   182b4:	andeq	r8, r1, r0, lsr #4
   182b8:	andeq	r8, r1, r0, lsr #4
   182bc:	andeq	r8, r1, r0, lsr #4
   182c0:	strdeq	r8, [r1], -r0
   182c4:	ldr	r0, [sp, #100]	; 0x64
   182c8:	bl	111a4 <iswprint@plt>
   182cc:	cmp	r0, #0
   182d0:	moveq	r8, #0
   182d4:	add	fp, fp, r9
   182d8:	add	r0, sp, #104	; 0x68
   182dc:	bl	11144 <mbsinit@plt>
   182e0:	cmp	r0, #0
   182e4:	bne	18358 <__assert_fail@plt+0x6f74>
   182e8:	add	r5, r6, fp
   182ec:	ldr	r3, [sp, #52]	; 0x34
   182f0:	add	r4, r3, r5
   182f4:	add	r3, sp, #104	; 0x68
   182f8:	ldr	r2, [sp, #28]
   182fc:	sub	r2, r2, r5
   18300:	mov	r1, r4
   18304:	add	r0, sp, #100	; 0x64
   18308:	bl	1b784 <__assert_fail@plt+0xa3a0>
   1830c:	subs	r9, r0, #0
   18310:	beq	183cc <__assert_fail@plt+0x6fe8>
   18314:	cmn	r9, #1
   18318:	beq	18368 <__assert_fail@plt+0x6f84>
   1831c:	cmn	r9, #2
   18320:	beq	181d0 <__assert_fail@plt+0x6dec>
   18324:	ldr	r3, [sp, #32]
   18328:	cmp	sl, #2
   1832c:	movne	r3, #0
   18330:	andeq	r3, r3, #1
   18334:	cmp	r3, #0
   18338:	beq	182c4 <__assert_fail@plt+0x6ee0>
   1833c:	cmp	r9, #1
   18340:	bls	182c4 <__assert_fail@plt+0x6ee0>
   18344:	sub	r3, r9, #1
   18348:	add	r5, r3, r5
   1834c:	ldr	r3, [sp, #52]	; 0x34
   18350:	add	r5, r3, r5
   18354:	b	18228 <__assert_fail@plt+0x6e44>
   18358:	ldr	r4, [sp, #88]	; 0x58
   1835c:	mov	r2, fp
   18360:	ldr	fp, [sp, #92]	; 0x5c
   18364:	b	18378 <__assert_fail@plt+0x6f94>
   18368:	ldr	r4, [sp, #88]	; 0x58
   1836c:	mov	r2, fp
   18370:	ldr	fp, [sp, #92]	; 0x5c
   18374:	mov	r8, #0
   18378:	cmp	r2, #1
   1837c:	bls	181a8 <__assert_fail@plt+0x6dc4>
   18380:	add	r1, r6, r2
   18384:	ldr	ip, [sp, #64]	; 0x40
   18388:	mov	r5, #0
   1838c:	eor	r3, r8, #1
   18390:	ldr	r2, [sp, #48]	; 0x30
   18394:	and	r3, r3, r2
   18398:	uxtb	r3, r3
   1839c:	ldr	r9, [sp, #32]
   183a0:	ldr	lr, [sp, #44]	; 0x2c
   183a4:	ldr	r2, [sp, #56]	; 0x38
   183a8:	str	r8, [sp, #56]	; 0x38
   183ac:	ldr	r0, [sp, #36]	; 0x24
   183b0:	b	1844c <__assert_fail@plt+0x7068>
   183b4:	mov	r8, #0
   183b8:	b	18378 <__assert_fail@plt+0x6f94>
   183bc:	mov	r8, #0
   183c0:	b	18378 <__assert_fail@plt+0x6f94>
   183c4:	mov	r8, #0
   183c8:	b	18378 <__assert_fail@plt+0x6f94>
   183cc:	ldr	r4, [sp, #88]	; 0x58
   183d0:	mov	r2, fp
   183d4:	ldr	fp, [sp, #92]	; 0x5c
   183d8:	b	18378 <__assert_fail@plt+0x6f94>
   183dc:	cmp	r2, #0
   183e0:	beq	183f4 <__assert_fail@plt+0x7010>
   183e4:	cmp	r7, fp
   183e8:	movhi	r2, #92	; 0x5c
   183ec:	strbhi	r2, [r0, fp]
   183f0:	add	fp, fp, #1
   183f4:	add	r8, r6, #1
   183f8:	cmp	r1, r8
   183fc:	bls	18504 <__assert_fail@plt+0x7120>
   18400:	eor	r2, r5, #1
   18404:	and	r2, r2, lr
   18408:	ands	r2, r2, #255	; 0xff
   1840c:	beq	18520 <__assert_fail@plt+0x713c>
   18410:	cmp	r7, fp
   18414:	movhi	r2, #39	; 0x27
   18418:	strbhi	r2, [r0, fp]
   1841c:	add	r2, fp, #1
   18420:	cmp	r7, r2
   18424:	movhi	lr, #39	; 0x27
   18428:	strbhi	lr, [r0, r2]
   1842c:	add	fp, fp, #2
   18430:	mov	r6, r8
   18434:	mov	r2, r3
   18438:	mov	lr, r3
   1843c:	cmp	r7, fp
   18440:	strbhi	r4, [r0, fp]
   18444:	add	fp, fp, #1
   18448:	ldrb	r4, [ip, #1]!
   1844c:	cmp	r3, #0
   18450:	beq	183dc <__assert_fail@plt+0x6ff8>
   18454:	cmp	r9, #0
   18458:	bne	1875c <__assert_fail@plt+0x7378>
   1845c:	eor	r5, lr, #1
   18460:	cmp	sl, #2
   18464:	movne	r5, #0
   18468:	andeq	r5, r5, #1
   1846c:	cmp	r5, #0
   18470:	beq	184a8 <__assert_fail@plt+0x70c4>
   18474:	cmp	r7, fp
   18478:	movhi	lr, #39	; 0x27
   1847c:	strbhi	lr, [r0, fp]
   18480:	add	lr, fp, #1
   18484:	cmp	r7, lr
   18488:	movhi	r8, #36	; 0x24
   1848c:	strbhi	r8, [r0, lr]
   18490:	add	lr, fp, #2
   18494:	cmp	r7, lr
   18498:	movhi	r8, #39	; 0x27
   1849c:	strbhi	r8, [r0, lr]
   184a0:	add	fp, fp, #3
   184a4:	mov	lr, r5
   184a8:	cmp	r7, fp
   184ac:	movhi	r5, #92	; 0x5c
   184b0:	strbhi	r5, [r0, fp]
   184b4:	add	r5, fp, #1
   184b8:	cmp	r7, r5
   184bc:	lsrhi	r8, r4, #6
   184c0:	addhi	r8, r8, #48	; 0x30
   184c4:	strbhi	r8, [r0, r5]
   184c8:	add	r8, fp, #2
   184cc:	cmp	r7, r8
   184d0:	lsrhi	r5, r4, #3
   184d4:	andhi	r5, r5, #7
   184d8:	addhi	r5, r5, #48	; 0x30
   184dc:	strbhi	r5, [r0, r8]
   184e0:	add	fp, fp, #3
   184e4:	and	r4, r4, #7
   184e8:	add	r4, r4, #48	; 0x30
   184ec:	add	r5, r6, #1
   184f0:	cmp	r1, r5
   184f4:	bls	18510 <__assert_fail@plt+0x712c>
   184f8:	mov	r6, r5
   184fc:	mov	r5, r3
   18500:	b	1843c <__assert_fail@plt+0x7058>
   18504:	str	lr, [sp, #44]	; 0x2c
   18508:	ldr	r8, [sp, #56]	; 0x38
   1850c:	b	17de0 <__assert_fail@plt+0x69fc>
   18510:	str	lr, [sp, #44]	; 0x2c
   18514:	ldr	r8, [sp, #56]	; 0x38
   18518:	mov	r5, r3
   1851c:	b	17de0 <__assert_fail@plt+0x69fc>
   18520:	mov	r6, r8
   18524:	b	1843c <__assert_fail@plt+0x7058>
   18528:	mov	r5, #0
   1852c:	b	17efc <__assert_fail@plt+0x6b18>
   18530:	mov	r8, r5
   18534:	ldr	r5, [sp, #48]	; 0x30
   18538:	mov	r4, #48	; 0x30
   1853c:	b	17efc <__assert_fail@plt+0x6b18>
   18540:	ldr	r8, [sp, #32]
   18544:	mov	r4, #48	; 0x30
   18548:	b	17efc <__assert_fail@plt+0x6b18>
   1854c:	ldr	r8, [sp, #32]
   18550:	mov	r4, #48	; 0x30
   18554:	b	17efc <__assert_fail@plt+0x6b18>
   18558:	mov	r8, #0
   1855c:	mov	r5, r8
   18560:	b	17efc <__assert_fail@plt+0x6b18>
   18564:	mov	r8, #0
   18568:	mov	r5, r8
   1856c:	b	17efc <__assert_fail@plt+0x6b18>
   18570:	mov	r8, #0
   18574:	mov	r5, r8
   18578:	b	17efc <__assert_fail@plt+0x6b18>
   1857c:	mov	r8, #0
   18580:	mov	r5, r8
   18584:	b	17efc <__assert_fail@plt+0x6b18>
   18588:	ldr	r3, [sp, #52]	; 0x34
   1858c:	ldrb	r8, [r3, r6]
   18590:	adds	r8, r8, #0
   18594:	movne	r8, #1
   18598:	b	1800c <__assert_fail@plt+0x6c28>
   1859c:	cmp	sl, #2
   185a0:	movne	r3, #0
   185a4:	moveq	r3, #1
   185a8:	ldr	r1, [sp, #32]
   185ac:	mov	r2, r1
   185b0:	and	r2, r2, r3
   185b4:	cmp	fp, #0
   185b8:	movne	r2, #0
   185bc:	andeq	r2, r2, #1
   185c0:	cmp	r2, #0
   185c4:	bne	18774 <__assert_fail@plt+0x7390>
   185c8:	eor	r2, r1, #1
   185cc:	and	r3, r3, r2
   185d0:	ldr	r1, [sp, #80]	; 0x50
   185d4:	tst	r1, r3
   185d8:	beq	18650 <__assert_fail@plt+0x726c>
   185dc:	ldr	r3, [sp, #40]	; 0x28
   185e0:	cmp	r3, #0
   185e4:	bne	1860c <__assert_fail@plt+0x7228>
   185e8:	ldr	r1, [sp, #76]	; 0x4c
   185ec:	clz	r3, r7
   185f0:	lsr	r3, r3, #5
   185f4:	cmp	r1, #0
   185f8:	moveq	r3, #0
   185fc:	cmp	r3, #0
   18600:	beq	18650 <__assert_fail@plt+0x726c>
   18604:	ldr	r7, [sp, #76]	; 0x4c
   18608:	b	176a0 <__assert_fail@plt+0x62bc>
   1860c:	ldr	r3, [sp, #168]	; 0xa8
   18610:	str	r3, [sp, #16]
   18614:	ldr	r3, [sp, #164]	; 0xa4
   18618:	str	r3, [sp, #12]
   1861c:	ldr	r3, [sp, #160]	; 0xa0
   18620:	str	r3, [sp, #8]
   18624:	ldr	r3, [sp, #156]	; 0x9c
   18628:	str	r3, [sp, #4]
   1862c:	mov	r3, #5
   18630:	str	r3, [sp]
   18634:	ldr	r3, [sp, #28]
   18638:	ldr	r2, [sp, #52]	; 0x34
   1863c:	ldr	r1, [sp, #76]	; 0x4c
   18640:	ldr	r0, [sp, #36]	; 0x24
   18644:	bl	17640 <__assert_fail@plt+0x625c>
   18648:	mov	fp, r0
   1864c:	b	18750 <__assert_fail@plt+0x736c>
   18650:	mov	sl, r7
   18654:	ldr	r3, [sp, #72]	; 0x48
   18658:	cmp	r3, #0
   1865c:	moveq	r2, #0
   18660:	andne	r2, r2, #1
   18664:	cmp	r2, #0
   18668:	beq	18698 <__assert_fail@plt+0x72b4>
   1866c:	mov	r2, r3
   18670:	ldrb	r3, [r3]
   18674:	cmp	r3, #0
   18678:	beq	18698 <__assert_fail@plt+0x72b4>
   1867c:	ldr	r1, [sp, #36]	; 0x24
   18680:	cmp	sl, fp
   18684:	strbhi	r3, [r1, fp]
   18688:	add	fp, fp, #1
   1868c:	ldrb	r3, [r2, #1]!
   18690:	cmp	r3, #0
   18694:	bne	18680 <__assert_fail@plt+0x729c>
   18698:	cmp	sl, fp
   1869c:	movhi	r3, #0
   186a0:	ldrhi	r2, [sp, #36]	; 0x24
   186a4:	strbhi	r3, [r2, fp]
   186a8:	b	18750 <__assert_fail@plt+0x736c>
   186ac:	mov	r8, sl
   186b0:	mov	sl, r7
   186b4:	ldr	r3, [sp, #32]
   186b8:	str	r3, [sp, #48]	; 0x30
   186bc:	b	186f8 <__assert_fail@plt+0x7314>
   186c0:	mov	r8, sl
   186c4:	mov	sl, r7
   186c8:	b	186f8 <__assert_fail@plt+0x7314>
   186cc:	mov	r8, sl
   186d0:	mov	sl, r7
   186d4:	b	186f8 <__assert_fail@plt+0x7314>
   186d8:	andeq	sp, r1, r0, lsl #16
   186dc:	andeq	sp, r1, r0, lsl r8
   186e0:	andeq	sp, r1, r4, lsl #16
   186e4:	mov	r8, sl
   186e8:	mov	sl, r7
   186ec:	b	186f8 <__assert_fail@plt+0x7314>
   186f0:	mov	r8, sl
   186f4:	mov	sl, r7
   186f8:	ldr	r3, [sp, #48]	; 0x30
   186fc:	cmp	r8, #2
   18700:	movne	r3, #0
   18704:	andeq	r3, r3, #1
   18708:	cmp	r3, #0
   1870c:	movne	r8, #4
   18710:	ldr	r3, [sp, #168]	; 0xa8
   18714:	str	r3, [sp, #16]
   18718:	ldr	r3, [sp, #164]	; 0xa4
   1871c:	str	r3, [sp, #12]
   18720:	mov	r3, #0
   18724:	str	r3, [sp, #8]
   18728:	ldr	r3, [sp, #156]	; 0x9c
   1872c:	bic	r3, r3, #2
   18730:	str	r3, [sp, #4]
   18734:	str	r8, [sp]
   18738:	ldr	r3, [sp, #28]
   1873c:	ldr	r2, [sp, #52]	; 0x34
   18740:	mov	r1, sl
   18744:	ldr	r0, [sp, #36]	; 0x24
   18748:	bl	17640 <__assert_fail@plt+0x625c>
   1874c:	mov	fp, r0
   18750:	mov	r0, fp
   18754:	add	sp, sp, #116	; 0x74
   18758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1875c:	mov	r8, sl
   18760:	mov	sl, r7
   18764:	b	186f8 <__assert_fail@plt+0x7314>
   18768:	mov	r8, sl
   1876c:	mov	sl, r7
   18770:	b	186f8 <__assert_fail@plt+0x7314>
   18774:	mov	r8, sl
   18778:	mov	sl, r7
   1877c:	b	186f8 <__assert_fail@plt+0x7314>
   18780:	mov	r8, sl
   18784:	mov	sl, r7
   18788:	b	18710 <__assert_fail@plt+0x732c>
   1878c:	mov	r3, #1
   18790:	str	r3, [sp, #32]
   18794:	str	r3, [sp, #48]	; 0x30
   18798:	str	r3, [sp, #60]	; 0x3c
   1879c:	ldr	r3, [pc, #-196]	; 186e0 <__assert_fail@plt+0x72fc>
   187a0:	str	r3, [sp, #72]	; 0x48
   187a4:	mov	fp, #0
   187a8:	mov	sl, #5
   187ac:	b	176fc <__assert_fail@plt+0x6318>
   187b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187b4:	sub	sp, sp, #52	; 0x34
   187b8:	mov	r5, r0
   187bc:	str	r1, [sp, #24]
   187c0:	str	r2, [sp, #28]
   187c4:	mov	r4, r3
   187c8:	bl	112c4 <__errno_location@plt>
   187cc:	str	r0, [sp, #32]
   187d0:	ldr	r3, [r0]
   187d4:	str	r3, [sp, #36]	; 0x24
   187d8:	ldr	r3, [pc, #396]	; 1896c <__assert_fail@plt+0x7588>
   187dc:	ldr	r6, [r3]
   187e0:	cmn	r5, #-2147483647	; 0x80000001
   187e4:	movne	r3, #0
   187e8:	moveq	r3, #1
   187ec:	orrs	r3, r3, r5, lsr #31
   187f0:	bne	18930 <__assert_fail@plt+0x754c>
   187f4:	ldr	r3, [pc, #368]	; 1896c <__assert_fail@plt+0x7588>
   187f8:	ldr	r2, [r3, #4]
   187fc:	cmp	r5, r2
   18800:	blt	18868 <__assert_fail@plt+0x7484>
   18804:	str	r2, [sp, #44]	; 0x2c
   18808:	add	r3, r3, #8
   1880c:	cmp	r6, r3
   18810:	beq	18934 <__assert_fail@plt+0x7550>
   18814:	sub	r2, r5, r2
   18818:	mov	r3, #8
   1881c:	str	r3, [sp]
   18820:	mvn	r3, #-2147483648	; 0x80000000
   18824:	add	r2, r2, #1
   18828:	add	r1, sp, #44	; 0x2c
   1882c:	mov	r0, r6
   18830:	bl	19c44 <__assert_fail@plt+0x8860>
   18834:	mov	r6, r0
   18838:	ldr	r3, [pc, #300]	; 1896c <__assert_fail@plt+0x7588>
   1883c:	str	r0, [r3]
   18840:	ldr	r7, [pc, #292]	; 1896c <__assert_fail@plt+0x7588>
   18844:	ldr	r0, [r7, #4]
   18848:	ldr	r2, [sp, #44]	; 0x2c
   1884c:	sub	r2, r2, r0
   18850:	lsl	r2, r2, #3
   18854:	mov	r1, #0
   18858:	add	r0, r6, r0, lsl #3
   1885c:	bl	112e8 <memset@plt>
   18860:	ldr	r3, [sp, #44]	; 0x2c
   18864:	str	r3, [r7, #4]
   18868:	add	fp, r6, r5, lsl #3
   1886c:	ldr	r8, [r6, r5, lsl #3]
   18870:	ldr	r7, [fp, #4]
   18874:	ldr	r9, [r4, #4]
   18878:	orr	r9, r9, #1
   1887c:	add	sl, r4, #8
   18880:	ldr	r3, [r4, #44]	; 0x2c
   18884:	str	r3, [sp, #16]
   18888:	ldr	r3, [r4, #40]	; 0x28
   1888c:	str	r3, [sp, #12]
   18890:	str	sl, [sp, #8]
   18894:	str	r9, [sp, #4]
   18898:	ldr	r3, [r4]
   1889c:	str	r3, [sp]
   188a0:	ldr	r3, [sp, #28]
   188a4:	ldr	r2, [sp, #24]
   188a8:	mov	r1, r8
   188ac:	mov	r0, r7
   188b0:	bl	17640 <__assert_fail@plt+0x625c>
   188b4:	cmp	r8, r0
   188b8:	bhi	18918 <__assert_fail@plt+0x7534>
   188bc:	add	r8, r0, #1
   188c0:	str	r8, [r6, r5, lsl #3]
   188c4:	ldr	r3, [pc, #164]	; 18970 <__assert_fail@plt+0x758c>
   188c8:	cmp	r7, r3
   188cc:	beq	188d8 <__assert_fail@plt+0x74f4>
   188d0:	mov	r0, r7
   188d4:	bl	15598 <__assert_fail@plt+0x41b4>
   188d8:	mov	r0, r8
   188dc:	bl	19ac0 <__assert_fail@plt+0x86dc>
   188e0:	mov	r7, r0
   188e4:	str	r0, [fp, #4]
   188e8:	ldr	r3, [r4, #44]	; 0x2c
   188ec:	str	r3, [sp, #16]
   188f0:	ldr	r3, [r4, #40]	; 0x28
   188f4:	str	r3, [sp, #12]
   188f8:	str	sl, [sp, #8]
   188fc:	str	r9, [sp, #4]
   18900:	ldr	r3, [r4]
   18904:	str	r3, [sp]
   18908:	ldr	r3, [sp, #28]
   1890c:	ldr	r2, [sp, #24]
   18910:	mov	r1, r8
   18914:	bl	17640 <__assert_fail@plt+0x625c>
   18918:	ldr	r3, [sp, #32]
   1891c:	ldr	r2, [sp, #36]	; 0x24
   18920:	str	r2, [r3]
   18924:	mov	r0, r7
   18928:	add	sp, sp, #52	; 0x34
   1892c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18930:	bl	113cc <abort@plt>
   18934:	sub	r2, r5, r2
   18938:	mov	r3, #8
   1893c:	str	r3, [sp]
   18940:	mvn	r3, #-2147483648	; 0x80000000
   18944:	add	r2, r2, #1
   18948:	add	r1, sp, #44	; 0x2c
   1894c:	mov	r0, #0
   18950:	bl	19c44 <__assert_fail@plt+0x8860>
   18954:	mov	r6, r0
   18958:	ldr	r3, [pc, #12]	; 1896c <__assert_fail@plt+0x7588>
   1895c:	str	r0, [r3], #8
   18960:	ldm	r3, {r0, r1}
   18964:	stm	r6, {r0, r1}
   18968:	b	18840 <__assert_fail@plt+0x745c>
   1896c:	andeq	lr, r2, r8, lsl #3
   18970:			; <UNDEFINED> instruction: 0x0002e2b4
   18974:	push	{r4, r5, r6, lr}
   18978:	mov	r4, r0
   1897c:	bl	112c4 <__errno_location@plt>
   18980:	mov	r5, r0
   18984:	ldr	r6, [r0]
   18988:	cmp	r4, #0
   1898c:	ldr	r3, [pc, #20]	; 189a8 <__assert_fail@plt+0x75c4>
   18990:	moveq	r4, r3
   18994:	mov	r1, #48	; 0x30
   18998:	mov	r0, r4
   1899c:	bl	19fac <__assert_fail@plt+0x8bc8>
   189a0:	str	r6, [r5]
   189a4:	pop	{r4, r5, r6, pc}
   189a8:			; <UNDEFINED> instruction: 0x0002e3b4
   189ac:	subs	r3, r0, #0
   189b0:	ldr	r2, [pc, #8]	; 189c0 <__assert_fail@plt+0x75dc>
   189b4:	moveq	r3, r2
   189b8:	ldr	r0, [r3]
   189bc:	bx	lr
   189c0:			; <UNDEFINED> instruction: 0x0002e3b4
   189c4:	subs	r3, r0, #0
   189c8:	ldr	r2, [pc, #8]	; 189d8 <__assert_fail@plt+0x75f4>
   189cc:	moveq	r3, r2
   189d0:	str	r1, [r3]
   189d4:	bx	lr
   189d8:			; <UNDEFINED> instruction: 0x0002e3b4
   189dc:	push	{lr}		; (str lr, [sp, #-4]!)
   189e0:	subs	r3, r0, #0
   189e4:	ldr	r0, [pc, #44]	; 18a18 <__assert_fail@plt+0x7634>
   189e8:	moveq	r3, r0
   189ec:	add	r3, r3, #8
   189f0:	lsr	lr, r1, #5
   189f4:	and	r1, r1, #31
   189f8:	ldr	ip, [r3, lr, lsl #2]
   189fc:	lsr	r0, ip, r1
   18a00:	eor	r2, r2, r0
   18a04:	and	r2, r2, #1
   18a08:	eor	r1, ip, r2, lsl r1
   18a0c:	str	r1, [r3, lr, lsl #2]
   18a10:	and	r0, r0, #1
   18a14:	pop	{pc}		; (ldr pc, [sp], #4)
   18a18:			; <UNDEFINED> instruction: 0x0002e3b4
   18a1c:	subs	r3, r0, #0
   18a20:	ldr	r2, [pc, #12]	; 18a34 <__assert_fail@plt+0x7650>
   18a24:	moveq	r3, r2
   18a28:	ldr	r0, [r3, #4]
   18a2c:	str	r1, [r3, #4]
   18a30:	bx	lr
   18a34:			; <UNDEFINED> instruction: 0x0002e3b4
   18a38:	subs	r3, r0, #0
   18a3c:	ldr	r0, [pc, #40]	; 18a6c <__assert_fail@plt+0x7688>
   18a40:	moveq	r3, r0
   18a44:	mov	r0, #10
   18a48:	str	r0, [r3]
   18a4c:	cmp	r2, #0
   18a50:	cmpne	r1, #0
   18a54:	beq	18a64 <__assert_fail@plt+0x7680>
   18a58:	str	r1, [r3, #40]	; 0x28
   18a5c:	str	r2, [r3, #44]	; 0x2c
   18a60:	bx	lr
   18a64:	push	{r4, lr}
   18a68:	bl	113cc <abort@plt>
   18a6c:			; <UNDEFINED> instruction: 0x0002e3b4
   18a70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18a74:	sub	sp, sp, #24
   18a78:	mov	r7, r0
   18a7c:	mov	r8, r1
   18a80:	mov	r9, r2
   18a84:	mov	sl, r3
   18a88:	ldr	r4, [sp, #56]	; 0x38
   18a8c:	cmp	r4, #0
   18a90:	ldr	r3, [pc, #84]	; 18aec <__assert_fail@plt+0x7708>
   18a94:	moveq	r4, r3
   18a98:	bl	112c4 <__errno_location@plt>
   18a9c:	mov	r5, r0
   18aa0:	ldr	r6, [r0]
   18aa4:	ldr	r3, [r4, #44]	; 0x2c
   18aa8:	str	r3, [sp, #16]
   18aac:	ldr	r3, [r4, #40]	; 0x28
   18ab0:	str	r3, [sp, #12]
   18ab4:	add	r3, r4, #8
   18ab8:	str	r3, [sp, #8]
   18abc:	ldr	r3, [r4, #4]
   18ac0:	str	r3, [sp, #4]
   18ac4:	ldr	r3, [r4]
   18ac8:	str	r3, [sp]
   18acc:	mov	r3, sl
   18ad0:	mov	r2, r9
   18ad4:	mov	r1, r8
   18ad8:	mov	r0, r7
   18adc:	bl	17640 <__assert_fail@plt+0x625c>
   18ae0:	str	r6, [r5]
   18ae4:	add	sp, sp, #24
   18ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18aec:			; <UNDEFINED> instruction: 0x0002e3b4
   18af0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18af4:	sub	sp, sp, #44	; 0x2c
   18af8:	str	r0, [sp, #28]
   18afc:	str	r1, [sp, #32]
   18b00:	mov	r6, r2
   18b04:	subs	r4, r3, #0
   18b08:	ldr	r3, [pc, #172]	; 18bbc <__assert_fail@plt+0x77d8>
   18b0c:	moveq	r4, r3
   18b10:	bl	112c4 <__errno_location@plt>
   18b14:	mov	r7, r0
   18b18:	ldr	fp, [r0]
   18b1c:	ldr	r5, [r4, #4]
   18b20:	cmp	r6, #0
   18b24:	orreq	r5, r5, #1
   18b28:	add	r9, r4, #8
   18b2c:	ldr	r3, [r4, #44]	; 0x2c
   18b30:	str	r3, [sp, #16]
   18b34:	ldr	r3, [r4, #40]	; 0x28
   18b38:	str	r3, [sp, #12]
   18b3c:	str	r9, [sp, #8]
   18b40:	str	r5, [sp, #4]
   18b44:	ldr	r3, [r4]
   18b48:	str	r3, [sp]
   18b4c:	ldr	r3, [sp, #32]
   18b50:	ldr	r2, [sp, #28]
   18b54:	mov	r1, #0
   18b58:	mov	r0, r1
   18b5c:	bl	17640 <__assert_fail@plt+0x625c>
   18b60:	mov	sl, r0
   18b64:	add	r8, r0, #1
   18b68:	mov	r0, r8
   18b6c:	bl	19ac0 <__assert_fail@plt+0x86dc>
   18b70:	str	r0, [sp, #36]	; 0x24
   18b74:	ldr	r3, [r4, #44]	; 0x2c
   18b78:	str	r3, [sp, #16]
   18b7c:	ldr	r3, [r4, #40]	; 0x28
   18b80:	str	r3, [sp, #12]
   18b84:	str	r9, [sp, #8]
   18b88:	str	r5, [sp, #4]
   18b8c:	ldr	r3, [r4]
   18b90:	str	r3, [sp]
   18b94:	ldr	r3, [sp, #32]
   18b98:	ldr	r2, [sp, #28]
   18b9c:	mov	r1, r8
   18ba0:	bl	17640 <__assert_fail@plt+0x625c>
   18ba4:	str	fp, [r7]
   18ba8:	cmp	r6, #0
   18bac:	strne	sl, [r6]
   18bb0:	ldr	r0, [sp, #36]	; 0x24
   18bb4:	add	sp, sp, #44	; 0x2c
   18bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bbc:			; <UNDEFINED> instruction: 0x0002e3b4
   18bc0:	push	{r4, lr}
   18bc4:	mov	r3, r2
   18bc8:	mov	r2, #0
   18bcc:	bl	18af0 <__assert_fail@plt+0x770c>
   18bd0:	pop	{r4, pc}
   18bd4:	push	{r4, r5, r6, r7, r8, lr}
   18bd8:	ldr	r3, [pc, #140]	; 18c6c <__assert_fail@plt+0x7888>
   18bdc:	ldr	r7, [r3]
   18be0:	ldr	r3, [r3, #4]
   18be4:	cmp	r3, #1
   18be8:	ble	18c14 <__assert_fail@plt+0x7830>
   18bec:	mov	r5, r7
   18bf0:	mov	r4, #1
   18bf4:	ldr	r6, [pc, #112]	; 18c6c <__assert_fail@plt+0x7888>
   18bf8:	ldr	r0, [r5, #12]
   18bfc:	bl	15598 <__assert_fail@plt+0x41b4>
   18c00:	add	r4, r4, #1
   18c04:	add	r5, r5, #8
   18c08:	ldr	r3, [r6, #4]
   18c0c:	cmp	r3, r4
   18c10:	bgt	18bf8 <__assert_fail@plt+0x7814>
   18c14:	ldr	r0, [r7, #4]
   18c18:	ldr	r3, [pc, #80]	; 18c70 <__assert_fail@plt+0x788c>
   18c1c:	cmp	r0, r3
   18c20:	beq	18c3c <__assert_fail@plt+0x7858>
   18c24:	bl	15598 <__assert_fail@plt+0x41b4>
   18c28:	ldr	r3, [pc, #60]	; 18c6c <__assert_fail@plt+0x7888>
   18c2c:	mov	r2, #256	; 0x100
   18c30:	str	r2, [r3, #8]
   18c34:	ldr	r2, [pc, #52]	; 18c70 <__assert_fail@plt+0x788c>
   18c38:	str	r2, [r3, #12]
   18c3c:	ldr	r3, [pc, #48]	; 18c74 <__assert_fail@plt+0x7890>
   18c40:	cmp	r7, r3
   18c44:	beq	18c5c <__assert_fail@plt+0x7878>
   18c48:	mov	r0, r7
   18c4c:	bl	15598 <__assert_fail@plt+0x41b4>
   18c50:	ldr	r3, [pc, #20]	; 18c6c <__assert_fail@plt+0x7888>
   18c54:	add	r2, r3, #8
   18c58:	str	r2, [r3]
   18c5c:	mov	r2, #1
   18c60:	ldr	r3, [pc, #4]	; 18c6c <__assert_fail@plt+0x7888>
   18c64:	str	r2, [r3, #4]
   18c68:	pop	{r4, r5, r6, r7, r8, pc}
   18c6c:	andeq	lr, r2, r8, lsl #3
   18c70:			; <UNDEFINED> instruction: 0x0002e2b4
   18c74:	muleq	r2, r0, r1
   18c78:	push	{r4, lr}
   18c7c:	ldr	r3, [pc, #8]	; 18c8c <__assert_fail@plt+0x78a8>
   18c80:	mvn	r2, #0
   18c84:	bl	187b0 <__assert_fail@plt+0x73cc>
   18c88:	pop	{r4, pc}
   18c8c:			; <UNDEFINED> instruction: 0x0002e3b4
   18c90:	push	{r4, lr}
   18c94:	ldr	r3, [pc, #4]	; 18ca0 <__assert_fail@plt+0x78bc>
   18c98:	bl	187b0 <__assert_fail@plt+0x73cc>
   18c9c:	pop	{r4, pc}
   18ca0:			; <UNDEFINED> instruction: 0x0002e3b4
   18ca4:	push	{r4, lr}
   18ca8:	mov	r1, r0
   18cac:	mov	r0, #0
   18cb0:	bl	18c78 <__assert_fail@plt+0x7894>
   18cb4:	pop	{r4, pc}
   18cb8:	push	{r4, lr}
   18cbc:	mov	r2, r1
   18cc0:	mov	r1, r0
   18cc4:	mov	r0, #0
   18cc8:	bl	18c90 <__assert_fail@plt+0x78ac>
   18ccc:	pop	{r4, pc}
   18cd0:	push	{r4, r5, lr}
   18cd4:	sub	sp, sp, #52	; 0x34
   18cd8:	mov	r4, r0
   18cdc:	mov	r5, r2
   18ce0:	mov	r0, sp
   18ce4:	bl	174d8 <__assert_fail@plt+0x60f4>
   18ce8:	mov	r3, sp
   18cec:	mvn	r2, #0
   18cf0:	mov	r1, r5
   18cf4:	mov	r0, r4
   18cf8:	bl	187b0 <__assert_fail@plt+0x73cc>
   18cfc:	add	sp, sp, #52	; 0x34
   18d00:	pop	{r4, r5, pc}
   18d04:	push	{r4, r5, r6, lr}
   18d08:	sub	sp, sp, #48	; 0x30
   18d0c:	mov	r4, r0
   18d10:	mov	r5, r2
   18d14:	mov	r6, r3
   18d18:	mov	r0, sp
   18d1c:	bl	174d8 <__assert_fail@plt+0x60f4>
   18d20:	mov	r3, sp
   18d24:	mov	r2, r6
   18d28:	mov	r1, r5
   18d2c:	mov	r0, r4
   18d30:	bl	187b0 <__assert_fail@plt+0x73cc>
   18d34:	add	sp, sp, #48	; 0x30
   18d38:	pop	{r4, r5, r6, pc}
   18d3c:	push	{r4, lr}
   18d40:	mov	r2, r1
   18d44:	mov	r1, r0
   18d48:	mov	r0, #0
   18d4c:	bl	18cd0 <__assert_fail@plt+0x78ec>
   18d50:	pop	{r4, pc}
   18d54:	push	{r4, lr}
   18d58:	mov	r3, r2
   18d5c:	mov	r2, r1
   18d60:	mov	r1, r0
   18d64:	mov	r0, #0
   18d68:	bl	18d04 <__assert_fail@plt+0x7920>
   18d6c:	pop	{r4, pc}
   18d70:	push	{r4, r5, r6, lr}
   18d74:	sub	sp, sp, #48	; 0x30
   18d78:	mov	r4, r0
   18d7c:	mov	r5, r1
   18d80:	mov	r6, r2
   18d84:	mov	ip, sp
   18d88:	ldr	lr, [pc, #64]	; 18dd0 <__assert_fail@plt+0x79ec>
   18d8c:	ldm	lr!, {r0, r1, r2, r3}
   18d90:	stmia	ip!, {r0, r1, r2, r3}
   18d94:	ldm	lr!, {r0, r1, r2, r3}
   18d98:	stmia	ip!, {r0, r1, r2, r3}
   18d9c:	ldm	lr, {r0, r1, r2, r3}
   18da0:	stm	ip, {r0, r1, r2, r3}
   18da4:	mov	r2, #1
   18da8:	mov	r1, r6
   18dac:	mov	r0, sp
   18db0:	bl	189dc <__assert_fail@plt+0x75f8>
   18db4:	mov	r3, sp
   18db8:	mov	r2, r5
   18dbc:	mov	r1, r4
   18dc0:	mov	r0, #0
   18dc4:	bl	187b0 <__assert_fail@plt+0x73cc>
   18dc8:	add	sp, sp, #48	; 0x30
   18dcc:	pop	{r4, r5, r6, pc}
   18dd0:			; <UNDEFINED> instruction: 0x0002e3b4
   18dd4:	push	{r4, lr}
   18dd8:	mov	r2, r1
   18ddc:	mvn	r1, #0
   18de0:	bl	18d70 <__assert_fail@plt+0x798c>
   18de4:	pop	{r4, pc}
   18de8:	push	{r4, lr}
   18dec:	mov	r1, #58	; 0x3a
   18df0:	bl	18dd4 <__assert_fail@plt+0x79f0>
   18df4:	pop	{r4, pc}
   18df8:	push	{r4, lr}
   18dfc:	mov	r2, #58	; 0x3a
   18e00:	bl	18d70 <__assert_fail@plt+0x798c>
   18e04:	pop	{r4, pc}
   18e08:	push	{r4, r5, lr}
   18e0c:	sub	sp, sp, #100	; 0x64
   18e10:	mov	r4, r0
   18e14:	mov	r5, r2
   18e18:	mov	r0, sp
   18e1c:	bl	174d8 <__assert_fail@plt+0x60f4>
   18e20:	add	lr, sp, #48	; 0x30
   18e24:	mov	ip, sp
   18e28:	ldm	ip!, {r0, r1, r2, r3}
   18e2c:	stmia	lr!, {r0, r1, r2, r3}
   18e30:	ldm	ip!, {r0, r1, r2, r3}
   18e34:	stmia	lr!, {r0, r1, r2, r3}
   18e38:	ldm	ip, {r0, r1, r2, r3}
   18e3c:	stm	lr, {r0, r1, r2, r3}
   18e40:	mov	r2, #1
   18e44:	mov	r1, #58	; 0x3a
   18e48:	add	r0, sp, #48	; 0x30
   18e4c:	bl	189dc <__assert_fail@plt+0x75f8>
   18e50:	add	r3, sp, #48	; 0x30
   18e54:	mvn	r2, #0
   18e58:	mov	r1, r5
   18e5c:	mov	r0, r4
   18e60:	bl	187b0 <__assert_fail@plt+0x73cc>
   18e64:	add	sp, sp, #100	; 0x64
   18e68:	pop	{r4, r5, pc}
   18e6c:	push	{r4, r5, r6, r7, lr}
   18e70:	sub	sp, sp, #52	; 0x34
   18e74:	mov	r4, r0
   18e78:	mov	r6, r1
   18e7c:	mov	r7, r2
   18e80:	mov	r5, r3
   18e84:	mov	ip, sp
   18e88:	ldr	lr, [pc, #64]	; 18ed0 <__assert_fail@plt+0x7aec>
   18e8c:	ldm	lr!, {r0, r1, r2, r3}
   18e90:	stmia	ip!, {r0, r1, r2, r3}
   18e94:	ldm	lr!, {r0, r1, r2, r3}
   18e98:	stmia	ip!, {r0, r1, r2, r3}
   18e9c:	ldm	lr, {r0, r1, r2, r3}
   18ea0:	stm	ip, {r0, r1, r2, r3}
   18ea4:	mov	r2, r7
   18ea8:	mov	r1, r6
   18eac:	mov	r0, sp
   18eb0:	bl	18a38 <__assert_fail@plt+0x7654>
   18eb4:	mov	r3, sp
   18eb8:	ldr	r2, [sp, #72]	; 0x48
   18ebc:	mov	r1, r5
   18ec0:	mov	r0, r4
   18ec4:	bl	187b0 <__assert_fail@plt+0x73cc>
   18ec8:	add	sp, sp, #52	; 0x34
   18ecc:	pop	{r4, r5, r6, r7, pc}
   18ed0:			; <UNDEFINED> instruction: 0x0002e3b4
   18ed4:	push	{lr}		; (str lr, [sp, #-4]!)
   18ed8:	sub	sp, sp, #12
   18edc:	mvn	ip, #0
   18ee0:	str	ip, [sp]
   18ee4:	bl	18e6c <__assert_fail@plt+0x7a88>
   18ee8:	add	sp, sp, #12
   18eec:	pop	{pc}		; (ldr pc, [sp], #4)
   18ef0:	push	{r4, lr}
   18ef4:	mov	r3, r2
   18ef8:	mov	r2, r1
   18efc:	mov	r1, r0
   18f00:	mov	r0, #0
   18f04:	bl	18ed4 <__assert_fail@plt+0x7af0>
   18f08:	pop	{r4, pc}
   18f0c:	push	{lr}		; (str lr, [sp, #-4]!)
   18f10:	sub	sp, sp, #12
   18f14:	str	r3, [sp]
   18f18:	mov	r3, r2
   18f1c:	mov	r2, r1
   18f20:	mov	r1, r0
   18f24:	mov	r0, #0
   18f28:	bl	18e6c <__assert_fail@plt+0x7a88>
   18f2c:	add	sp, sp, #12
   18f30:	pop	{pc}		; (ldr pc, [sp], #4)
   18f34:	push	{r4, lr}
   18f38:	ldr	r3, [pc, #4]	; 18f44 <__assert_fail@plt+0x7b60>
   18f3c:	bl	187b0 <__assert_fail@plt+0x73cc>
   18f40:	pop	{r4, pc}
   18f44:	muleq	r2, r8, r1
   18f48:	push	{r4, lr}
   18f4c:	mov	r2, r1
   18f50:	mov	r1, r0
   18f54:	mov	r0, #0
   18f58:	bl	18f34 <__assert_fail@plt+0x7b50>
   18f5c:	pop	{r4, pc}
   18f60:	push	{r4, lr}
   18f64:	mvn	r2, #0
   18f68:	bl	18f34 <__assert_fail@plt+0x7b50>
   18f6c:	pop	{r4, pc}
   18f70:	push	{r4, lr}
   18f74:	mov	r1, r0
   18f78:	mov	r0, #0
   18f7c:	bl	18f60 <__assert_fail@plt+0x7b7c>
   18f80:	pop	{r4, pc}
   18f84:	push	{r4, r5, r6, lr}
   18f88:	mov	r6, r1
   18f8c:	mov	r4, r2
   18f90:	mov	r1, #0
   18f94:	bl	11354 <setlocale@plt>
   18f98:	subs	r5, r0, #0
   18f9c:	beq	18fc0 <__assert_fail@plt+0x7bdc>
   18fa0:	mov	r0, r5
   18fa4:	bl	11294 <strlen@plt>
   18fa8:	cmp	r4, r0
   18fac:	bhi	18fd8 <__assert_fail@plt+0x7bf4>
   18fb0:	cmp	r4, #0
   18fb4:	bne	18ff0 <__assert_fail@plt+0x7c0c>
   18fb8:	mov	r0, #34	; 0x22
   18fbc:	pop	{r4, r5, r6, pc}
   18fc0:	cmp	r4, #0
   18fc4:	beq	19014 <__assert_fail@plt+0x7c30>
   18fc8:	mov	r3, #0
   18fcc:	strb	r3, [r6]
   18fd0:	mov	r0, #22
   18fd4:	pop	{r4, r5, r6, pc}
   18fd8:	add	r2, r0, #1
   18fdc:	mov	r1, r5
   18fe0:	mov	r0, r6
   18fe4:	bl	1112c <memcpy@plt>
   18fe8:	mov	r0, #0
   18fec:	pop	{r4, r5, r6, pc}
   18ff0:	sub	r4, r4, #1
   18ff4:	mov	r2, r4
   18ff8:	mov	r1, r5
   18ffc:	mov	r0, r6
   19000:	bl	1112c <memcpy@plt>
   19004:	mov	r3, #0
   19008:	strb	r3, [r6, r4]
   1900c:	mov	r0, #34	; 0x22
   19010:	pop	{r4, r5, r6, pc}
   19014:	mov	r0, #22
   19018:	pop	{r4, r5, r6, pc}
   1901c:	push	{r4, lr}
   19020:	mov	r1, #0
   19024:	bl	11354 <setlocale@plt>
   19028:	pop	{r4, pc}
   1902c:	push	{r4, lr}
   19030:	subs	r1, r0, #0
   19034:	beq	19048 <__assert_fail@plt+0x7c64>
   19038:	mov	r2, #1
   1903c:	ldr	r0, [pc, #16]	; 19054 <__assert_fail@plt+0x7c70>
   19040:	bl	112ac <setenv@plt>
   19044:	pop	{r4, pc}
   19048:	ldr	r0, [pc, #4]	; 19054 <__assert_fail@plt+0x7c70>
   1904c:	bl	113b4 <unsetenv@plt>
   19050:	pop	{r4, pc}
   19054:	ldrdeq	sp, [r1], -ip
   19058:	push	{r4, r5, r6, r7, r8, lr}
   1905c:	subs	r6, r0, #0
   19060:	beq	190cc <__assert_fail@plt+0x7ce8>
   19064:	mov	r0, r6
   19068:	bl	11294 <strlen@plt>
   1906c:	add	r7, r0, #1
   19070:	cmp	r7, #58	; 0x3a
   19074:	addhi	r0, r0, #2
   19078:	bls	19104 <__assert_fail@plt+0x7d20>
   1907c:	add	r0, r0, #8
   19080:	bic	r0, r0, #3
   19084:	bl	1b400 <__assert_fail@plt+0xa01c>
   19088:	subs	r4, r0, #0
   1908c:	beq	190c4 <__assert_fail@plt+0x7ce0>
   19090:	mov	r3, #0
   19094:	str	r3, [r4]
   19098:	subs	r2, r6, r3
   1909c:	movne	r2, #1
   190a0:	strb	r2, [r4, #4]
   190a4:	strb	r3, [r4, #5]
   190a8:	add	r5, r4, #5
   190ac:	mov	r2, r7
   190b0:	mov	r1, r6
   190b4:	mov	r0, r5
   190b8:	bl	1112c <memcpy@plt>
   190bc:	mov	r3, #0
   190c0:	strb	r3, [r5, r7]
   190c4:	mov	r0, r4
   190c8:	pop	{r4, r5, r6, r7, r8, pc}
   190cc:	mov	r0, #64	; 0x40
   190d0:	bl	1b400 <__assert_fail@plt+0xa01c>
   190d4:	subs	r4, r0, #0
   190d8:	beq	190c4 <__assert_fail@plt+0x7ce0>
   190dc:	mov	r3, #0
   190e0:	str	r3, [r4]
   190e4:	cmp	r6, r3
   190e8:	movne	r2, #1
   190ec:	moveq	r2, r3
   190f0:	strb	r2, [r4, #4]
   190f4:	strb	r3, [r4, #5]
   190f8:	beq	190c4 <__assert_fail@plt+0x7ce0>
   190fc:	mov	r7, r3
   19100:	b	190a8 <__assert_fail@plt+0x7cc4>
   19104:	mov	r0, #59	; 0x3b
   19108:	b	1907c <__assert_fail@plt+0x7c98>
   1910c:	push	{r4, r5, r6, r7, r8, lr}
   19110:	ldr	r6, [r1, #40]	; 0x28
   19114:	cmp	r6, #0
   19118:	beq	19214 <__assert_fail@plt+0x7e30>
   1911c:	mov	r5, r0
   19120:	mov	r7, r1
   19124:	cmp	r1, r6
   19128:	bhi	19138 <__assert_fail@plt+0x7d54>
   1912c:	add	r3, r1, #44	; 0x2c
   19130:	cmp	r6, r3
   19134:	bcc	1921c <__assert_fail@plt+0x7e38>
   19138:	ldrb	r3, [r6]
   1913c:	cmp	r3, #0
   19140:	addne	r4, r5, #5
   19144:	bne	191a4 <__assert_fail@plt+0x7dc0>
   19148:	ldr	r4, [pc, #220]	; 1922c <__assert_fail@plt+0x7e48>
   1914c:	str	r4, [r7, #40]	; 0x28
   19150:	mov	r0, #1
   19154:	pop	{r4, r5, r6, r7, r8, pc}
   19158:	mov	r0, r6
   1915c:	bl	19058 <__assert_fail@plt+0x7c74>
   19160:	str	r0, [r5]
   19164:	cmp	r0, #0
   19168:	beq	19224 <__assert_fail@plt+0x7e40>
   1916c:	mov	r3, #0
   19170:	strb	r3, [r0, #4]
   19174:	add	r4, r0, #5
   19178:	b	1914c <__assert_fail@plt+0x7d68>
   1917c:	mov	r0, r4
   19180:	bl	11294 <strlen@plt>
   19184:	add	r0, r0, #1
   19188:	ldrb	r3, [r4, r0]!
   1918c:	cmp	r3, #0
   19190:	bne	191a4 <__assert_fail@plt+0x7dc0>
   19194:	ldr	r3, [r5]
   19198:	cmp	r3, #0
   1919c:	addne	r4, r3, #5
   191a0:	movne	r5, r3
   191a4:	mov	r1, r6
   191a8:	mov	r0, r4
   191ac:	bl	110c0 <strcmp@plt>
   191b0:	cmp	r0, #0
   191b4:	beq	1914c <__assert_fail@plt+0x7d68>
   191b8:	ldrb	r3, [r4]
   191bc:	cmp	r3, #0
   191c0:	bne	1917c <__assert_fail@plt+0x7d98>
   191c4:	add	r3, r5, #5
   191c8:	cmp	r4, r3
   191cc:	bne	191dc <__assert_fail@plt+0x7df8>
   191d0:	ldrb	r3, [r5, #4]
   191d4:	cmp	r3, #0
   191d8:	bne	1917c <__assert_fail@plt+0x7d98>
   191dc:	mov	r0, r6
   191e0:	bl	11294 <strlen@plt>
   191e4:	add	r8, r0, #1
   191e8:	add	r3, r5, #64	; 0x40
   191ec:	sub	r3, r3, r4
   191f0:	cmp	r8, r3
   191f4:	bge	19158 <__assert_fail@plt+0x7d74>
   191f8:	mov	r2, r8
   191fc:	mov	r1, r6
   19200:	mov	r0, r4
   19204:	bl	1112c <memcpy@plt>
   19208:	mov	r3, #0
   1920c:	strb	r3, [r4, r8]
   19210:	b	1914c <__assert_fail@plt+0x7d68>
   19214:	mov	r0, #1
   19218:	pop	{r4, r5, r6, r7, r8, pc}
   1921c:	mov	r0, #1
   19220:	pop	{r4, r5, r6, r7, r8, pc}
   19224:	mov	r0, #0
   19228:	pop	{r4, r5, r6, r7, r8, pc}
   1922c:	andeq	ip, r1, ip, ror #3
   19230:	cmp	r0, #1
   19234:	bxeq	lr
   19238:	cmp	r0, #0
   1923c:	bxeq	lr
   19240:	push	{r4, lr}
   19244:	ldr	r4, [r0]
   19248:	bl	15598 <__assert_fail@plt+0x41b4>
   1924c:	mov	r0, r4
   19250:	cmp	r4, #0
   19254:	bne	19244 <__assert_fail@plt+0x7e60>
   19258:	pop	{r4, pc}
   1925c:	push	{r4, r5, r6, lr}
   19260:	mov	r4, r0
   19264:	ldr	r0, [pc, #164]	; 19310 <__assert_fail@plt+0x7f2c>
   19268:	bl	11210 <getenv@plt>
   1926c:	subs	r5, r0, #0
   19270:	beq	192ac <__assert_fail@plt+0x7ec8>
   19274:	ldrb	r3, [r4, #4]
   19278:	cmp	r3, #0
   1927c:	moveq	r0, #0
   19280:	beq	19298 <__assert_fail@plt+0x7eb4>
   19284:	mov	r1, r5
   19288:	add	r0, r4, #5
   1928c:	bl	110c0 <strcmp@plt>
   19290:	clz	r0, r0
   19294:	lsr	r0, r0, #5
   19298:	cmp	r0, #0
   1929c:	movne	r5, #1
   192a0:	beq	192bc <__assert_fail@plt+0x7ed8>
   192a4:	mov	r0, r5
   192a8:	pop	{r4, r5, r6, pc}
   192ac:	ldrb	r0, [r4, #4]
   192b0:	clz	r0, r0
   192b4:	lsr	r0, r0, #5
   192b8:	b	19298 <__assert_fail@plt+0x7eb4>
   192bc:	mov	r0, r5
   192c0:	bl	19058 <__assert_fail@plt+0x7c74>
   192c4:	subs	r5, r0, #0
   192c8:	beq	192a4 <__assert_fail@plt+0x7ec0>
   192cc:	ldrb	r3, [r4, #4]
   192d0:	cmp	r3, #0
   192d4:	addne	r0, r4, #5
   192d8:	moveq	r0, #0
   192dc:	bl	1902c <__assert_fail@plt+0x7c48>
   192e0:	cmp	r0, #0
   192e4:	beq	19308 <__assert_fail@plt+0x7f24>
   192e8:	bl	112c4 <__errno_location@plt>
   192ec:	mov	r4, r0
   192f0:	ldr	r6, [r0]
   192f4:	mov	r0, r5
   192f8:	bl	19230 <__assert_fail@plt+0x7e4c>
   192fc:	str	r6, [r4]
   19300:	mov	r5, #0
   19304:	b	192a4 <__assert_fail@plt+0x7ec0>
   19308:	bl	111b0 <tzset@plt>
   1930c:	b	192a4 <__assert_fail@plt+0x7ec0>
   19310:	ldrdeq	sp, [r1], -ip
   19314:	push	{r4, r5, r6, r7, r8, lr}
   19318:	cmp	r0, #1
   1931c:	moveq	r7, #1
   19320:	beq	19364 <__assert_fail@plt+0x7f80>
   19324:	mov	r4, r0
   19328:	bl	112c4 <__errno_location@plt>
   1932c:	mov	r5, r0
   19330:	ldr	r6, [r0]
   19334:	ldrb	r3, [r4, #4]
   19338:	cmp	r3, #0
   1933c:	addne	r0, r4, #5
   19340:	moveq	r0, #0
   19344:	bl	1902c <__assert_fail@plt+0x7c48>
   19348:	cmp	r0, #0
   1934c:	beq	1936c <__assert_fail@plt+0x7f88>
   19350:	ldr	r6, [r5]
   19354:	mov	r7, #0
   19358:	mov	r0, r4
   1935c:	bl	19230 <__assert_fail@plt+0x7e4c>
   19360:	str	r6, [r5]
   19364:	mov	r0, r7
   19368:	pop	{r4, r5, r6, r7, r8, pc}
   1936c:	bl	111b0 <tzset@plt>
   19370:	mov	r7, #1
   19374:	b	19358 <__assert_fail@plt+0x7f74>
   19378:	push	{r4, r5, r6, r7, r8, lr}
   1937c:	mov	r6, r1
   19380:	mov	r4, r2
   19384:	subs	r5, r0, #0
   19388:	beq	193e0 <__assert_fail@plt+0x7ffc>
   1938c:	mov	r0, r5
   19390:	bl	1925c <__assert_fail@plt+0x7e78>
   19394:	subs	r7, r0, #0
   19398:	beq	193f4 <__assert_fail@plt+0x8010>
   1939c:	mov	r1, r4
   193a0:	mov	r0, r6
   193a4:	bl	11180 <localtime_r@plt>
   193a8:	subs	r6, r0, #0
   193ac:	beq	193fc <__assert_fail@plt+0x8018>
   193b0:	mov	r1, r4
   193b4:	mov	r0, r5
   193b8:	bl	1910c <__assert_fail@plt+0x7d28>
   193bc:	mov	r5, r0
   193c0:	mov	r0, r7
   193c4:	bl	19314 <__assert_fail@plt+0x7f30>
   193c8:	and	r0, r0, r5
   193cc:	uxtb	r0, r0
   193d0:	cmp	r0, #0
   193d4:	moveq	r4, #0
   193d8:	mov	r0, r4
   193dc:	pop	{r4, r5, r6, r7, r8, pc}
   193e0:	mov	r1, r2
   193e4:	mov	r0, r6
   193e8:	bl	110b4 <gmtime_r@plt>
   193ec:	mov	r4, r0
   193f0:	b	193d8 <__assert_fail@plt+0x7ff4>
   193f4:	mov	r4, #0
   193f8:	b	193d8 <__assert_fail@plt+0x7ff4>
   193fc:	mov	r0, r7
   19400:	bl	19314 <__assert_fail@plt+0x7f30>
   19404:	mov	r4, r6
   19408:	b	193d8 <__assert_fail@plt+0x7ff4>
   1940c:	push	{r4, r5, r6, r7, lr}
   19410:	sub	sp, sp, #52	; 0x34
   19414:	mov	r4, r1
   19418:	subs	r5, r0, #0
   1941c:	beq	194d8 <__assert_fail@plt+0x80f4>
   19420:	mov	r0, r5
   19424:	bl	1925c <__assert_fail@plt+0x7e78>
   19428:	subs	r7, r0, #0
   1942c:	beq	194e8 <__assert_fail@plt+0x8104>
   19430:	ldr	r3, [r4]
   19434:	str	r3, [sp, #4]
   19438:	ldr	r3, [r4, #4]
   1943c:	str	r3, [sp, #8]
   19440:	ldr	r3, [r4, #8]
   19444:	str	r3, [sp, #12]
   19448:	ldr	r3, [r4, #12]
   1944c:	str	r3, [sp, #16]
   19450:	ldr	r3, [r4, #16]
   19454:	str	r3, [sp, #20]
   19458:	ldr	r3, [r4, #20]
   1945c:	str	r3, [sp, #24]
   19460:	mvn	r3, #0
   19464:	str	r3, [sp, #32]
   19468:	ldr	r3, [r4, #32]
   1946c:	str	r3, [sp, #36]	; 0x24
   19470:	add	r0, sp, #4
   19474:	bl	110e4 <mktime@plt>
   19478:	mov	r6, r0
   1947c:	ldr	r3, [sp, #32]
   19480:	cmp	r3, #0
   19484:	blt	194f0 <__assert_fail@plt+0x810c>
   19488:	add	r1, sp, #4
   1948c:	mov	r0, r5
   19490:	bl	1910c <__assert_fail@plt+0x7d28>
   19494:	mov	r5, r0
   19498:	mov	r0, r7
   1949c:	bl	19314 <__assert_fail@plt+0x7f30>
   194a0:	and	r0, r0, r5
   194a4:	tst	r0, #255	; 0xff
   194a8:	beq	194f8 <__assert_fail@plt+0x8114>
   194ac:	mov	ip, r4
   194b0:	add	lr, sp, #4
   194b4:	ldm	lr!, {r0, r1, r2, r3}
   194b8:	stmia	ip!, {r0, r1, r2, r3}
   194bc:	ldm	lr!, {r0, r1, r2, r3}
   194c0:	stmia	ip!, {r0, r1, r2, r3}
   194c4:	ldm	lr, {r0, r1, r2}
   194c8:	stm	ip, {r0, r1, r2}
   194cc:	mov	r0, r6
   194d0:	add	sp, sp, #52	; 0x34
   194d4:	pop	{r4, r5, r6, r7, pc}
   194d8:	mov	r0, r1
   194dc:	bl	11378 <timegm@plt>
   194e0:	mov	r6, r0
   194e4:	b	194cc <__assert_fail@plt+0x80e8>
   194e8:	mvn	r6, #0
   194ec:	b	194cc <__assert_fail@plt+0x80e8>
   194f0:	mov	r0, r7
   194f4:	bl	19314 <__assert_fail@plt+0x7f30>
   194f8:	mvn	r6, #0
   194fc:	b	194cc <__assert_fail@plt+0x80e8>
   19500:	push	{r4, lr}
   19504:	mov	r2, #3
   19508:	mov	r1, #0
   1950c:	bl	1b4f8 <__assert_fail@plt+0xa114>
   19510:	pop	{r4, pc}
   19514:	push	{r4, r5, r6, lr}
   19518:	sub	sp, sp, #32
   1951c:	mov	r4, r0
   19520:	ldr	r5, [sp, #48]	; 0x30
   19524:	ldr	r6, [sp, #52]	; 0x34
   19528:	cmp	r1, #0
   1952c:	beq	195e4 <__assert_fail@plt+0x8200>
   19530:	str	r3, [sp, #4]
   19534:	str	r2, [sp]
   19538:	mov	r3, r1
   1953c:	ldr	r2, [pc, #940]	; 198f0 <__assert_fail@plt+0x850c>
   19540:	mov	r1, #1
   19544:	bl	1130c <__fprintf_chk@plt>
   19548:	mov	r2, #5
   1954c:	ldr	r1, [pc, #928]	; 198f4 <__assert_fail@plt+0x8510>
   19550:	mov	r0, #0
   19554:	bl	11168 <dcgettext@plt>
   19558:	ldr	r3, [pc, #920]	; 198f8 <__assert_fail@plt+0x8514>
   1955c:	str	r3, [sp]
   19560:	mov	r3, r0
   19564:	ldr	r2, [pc, #912]	; 198fc <__assert_fail@plt+0x8518>
   19568:	mov	r1, #1
   1956c:	mov	r0, r4
   19570:	bl	1130c <__fprintf_chk@plt>
   19574:	mov	r1, r4
   19578:	mov	r0, #10
   1957c:	bl	1115c <fputc_unlocked@plt>
   19580:	mov	r2, #5
   19584:	ldr	r1, [pc, #884]	; 19900 <__assert_fail@plt+0x851c>
   19588:	mov	r0, #0
   1958c:	bl	11168 <dcgettext@plt>
   19590:	ldr	r3, [pc, #876]	; 19904 <__assert_fail@plt+0x8520>
   19594:	mov	r2, r0
   19598:	mov	r1, #1
   1959c:	mov	r0, r4
   195a0:	bl	1130c <__fprintf_chk@plt>
   195a4:	mov	r1, r4
   195a8:	mov	r0, #10
   195ac:	bl	1115c <fputc_unlocked@plt>
   195b0:	cmp	r6, #9
   195b4:	ldrls	pc, [pc, r6, lsl #2]
   195b8:	b	19888 <__assert_fail@plt+0x84a4>
   195bc:	andeq	r9, r1, r0, lsr #12
   195c0:	strdeq	r9, [r1], -ip
   195c4:	andeq	r9, r1, r8, lsr #12
   195c8:	andeq	r9, r1, r8, asr r6
   195cc:	muleq	r1, r0, r6
   195d0:	ldrdeq	r9, [r1], -r0
   195d4:	andeq	r9, r1, r8, lsl r7
   195d8:	andeq	r9, r1, r8, ror #14
   195dc:	andeq	r9, r1, r0, asr #15
   195e0:	andeq	r9, r1, r0, lsr #16
   195e4:	str	r3, [sp]
   195e8:	mov	r3, r2
   195ec:	ldr	r2, [pc, #788]	; 19908 <__assert_fail@plt+0x8524>
   195f0:	mov	r1, #1
   195f4:	bl	1130c <__fprintf_chk@plt>
   195f8:	b	19548 <__assert_fail@plt+0x8164>
   195fc:	mov	r2, #5
   19600:	ldr	r1, [pc, #772]	; 1990c <__assert_fail@plt+0x8528>
   19604:	mov	r0, #0
   19608:	bl	11168 <dcgettext@plt>
   1960c:	ldr	r3, [r5]
   19610:	mov	r2, r0
   19614:	mov	r1, #1
   19618:	mov	r0, r4
   1961c:	bl	1130c <__fprintf_chk@plt>
   19620:	add	sp, sp, #32
   19624:	pop	{r4, r5, r6, pc}
   19628:	mov	r2, #5
   1962c:	ldr	r1, [pc, #732]	; 19910 <__assert_fail@plt+0x852c>
   19630:	mov	r0, #0
   19634:	bl	11168 <dcgettext@plt>
   19638:	ldr	r3, [r5]
   1963c:	ldr	r2, [r5, #4]
   19640:	str	r2, [sp]
   19644:	mov	r2, r0
   19648:	mov	r1, #1
   1964c:	mov	r0, r4
   19650:	bl	1130c <__fprintf_chk@plt>
   19654:	b	19620 <__assert_fail@plt+0x823c>
   19658:	mov	r2, #5
   1965c:	ldr	r1, [pc, #688]	; 19914 <__assert_fail@plt+0x8530>
   19660:	mov	r0, #0
   19664:	bl	11168 <dcgettext@plt>
   19668:	ldr	r3, [r5]
   1966c:	ldr	r2, [r5, #8]
   19670:	str	r2, [sp, #4]
   19674:	ldr	r2, [r5, #4]
   19678:	str	r2, [sp]
   1967c:	mov	r2, r0
   19680:	mov	r1, #1
   19684:	mov	r0, r4
   19688:	bl	1130c <__fprintf_chk@plt>
   1968c:	b	19620 <__assert_fail@plt+0x823c>
   19690:	mov	r2, #5
   19694:	ldr	r1, [pc, #636]	; 19918 <__assert_fail@plt+0x8534>
   19698:	mov	r0, #0
   1969c:	bl	11168 <dcgettext@plt>
   196a0:	ldr	r3, [r5]
   196a4:	ldr	r2, [r5, #12]
   196a8:	str	r2, [sp, #8]
   196ac:	ldr	r2, [r5, #8]
   196b0:	str	r2, [sp, #4]
   196b4:	ldr	r2, [r5, #4]
   196b8:	str	r2, [sp]
   196bc:	mov	r2, r0
   196c0:	mov	r1, #1
   196c4:	mov	r0, r4
   196c8:	bl	1130c <__fprintf_chk@plt>
   196cc:	b	19620 <__assert_fail@plt+0x823c>
   196d0:	mov	r2, #5
   196d4:	ldr	r1, [pc, #576]	; 1991c <__assert_fail@plt+0x8538>
   196d8:	mov	r0, #0
   196dc:	bl	11168 <dcgettext@plt>
   196e0:	ldr	r3, [r5]
   196e4:	ldr	r2, [r5, #16]
   196e8:	str	r2, [sp, #12]
   196ec:	ldr	r2, [r5, #12]
   196f0:	str	r2, [sp, #8]
   196f4:	ldr	r2, [r5, #8]
   196f8:	str	r2, [sp, #4]
   196fc:	ldr	r2, [r5, #4]
   19700:	str	r2, [sp]
   19704:	mov	r2, r0
   19708:	mov	r1, #1
   1970c:	mov	r0, r4
   19710:	bl	1130c <__fprintf_chk@plt>
   19714:	b	19620 <__assert_fail@plt+0x823c>
   19718:	mov	r2, #5
   1971c:	ldr	r1, [pc, #508]	; 19920 <__assert_fail@plt+0x853c>
   19720:	mov	r0, #0
   19724:	bl	11168 <dcgettext@plt>
   19728:	ldr	r3, [r5]
   1972c:	ldr	r2, [r5, #20]
   19730:	str	r2, [sp, #16]
   19734:	ldr	r2, [r5, #16]
   19738:	str	r2, [sp, #12]
   1973c:	ldr	r2, [r5, #12]
   19740:	str	r2, [sp, #8]
   19744:	ldr	r2, [r5, #8]
   19748:	str	r2, [sp, #4]
   1974c:	ldr	r2, [r5, #4]
   19750:	str	r2, [sp]
   19754:	mov	r2, r0
   19758:	mov	r1, #1
   1975c:	mov	r0, r4
   19760:	bl	1130c <__fprintf_chk@plt>
   19764:	b	19620 <__assert_fail@plt+0x823c>
   19768:	mov	r2, #5
   1976c:	ldr	r1, [pc, #432]	; 19924 <__assert_fail@plt+0x8540>
   19770:	mov	r0, #0
   19774:	bl	11168 <dcgettext@plt>
   19778:	ldr	r3, [r5]
   1977c:	ldr	r2, [r5, #24]
   19780:	str	r2, [sp, #20]
   19784:	ldr	r2, [r5, #20]
   19788:	str	r2, [sp, #16]
   1978c:	ldr	r2, [r5, #16]
   19790:	str	r2, [sp, #12]
   19794:	ldr	r2, [r5, #12]
   19798:	str	r2, [sp, #8]
   1979c:	ldr	r2, [r5, #8]
   197a0:	str	r2, [sp, #4]
   197a4:	ldr	r2, [r5, #4]
   197a8:	str	r2, [sp]
   197ac:	mov	r2, r0
   197b0:	mov	r1, #1
   197b4:	mov	r0, r4
   197b8:	bl	1130c <__fprintf_chk@plt>
   197bc:	b	19620 <__assert_fail@plt+0x823c>
   197c0:	mov	r2, #5
   197c4:	ldr	r1, [pc, #348]	; 19928 <__assert_fail@plt+0x8544>
   197c8:	mov	r0, #0
   197cc:	bl	11168 <dcgettext@plt>
   197d0:	ldr	r3, [r5]
   197d4:	ldr	r2, [r5, #28]
   197d8:	str	r2, [sp, #24]
   197dc:	ldr	r2, [r5, #24]
   197e0:	str	r2, [sp, #20]
   197e4:	ldr	r2, [r5, #20]
   197e8:	str	r2, [sp, #16]
   197ec:	ldr	r2, [r5, #16]
   197f0:	str	r2, [sp, #12]
   197f4:	ldr	r2, [r5, #12]
   197f8:	str	r2, [sp, #8]
   197fc:	ldr	r2, [r5, #8]
   19800:	str	r2, [sp, #4]
   19804:	ldr	r2, [r5, #4]
   19808:	str	r2, [sp]
   1980c:	mov	r2, r0
   19810:	mov	r1, #1
   19814:	mov	r0, r4
   19818:	bl	1130c <__fprintf_chk@plt>
   1981c:	b	19620 <__assert_fail@plt+0x823c>
   19820:	mov	r2, #5
   19824:	ldr	r1, [pc, #256]	; 1992c <__assert_fail@plt+0x8548>
   19828:	mov	r0, #0
   1982c:	bl	11168 <dcgettext@plt>
   19830:	ldr	r3, [r5]
   19834:	ldr	r2, [r5, #32]
   19838:	str	r2, [sp, #28]
   1983c:	ldr	r2, [r5, #28]
   19840:	str	r2, [sp, #24]
   19844:	ldr	r2, [r5, #24]
   19848:	str	r2, [sp, #20]
   1984c:	ldr	r2, [r5, #20]
   19850:	str	r2, [sp, #16]
   19854:	ldr	r2, [r5, #16]
   19858:	str	r2, [sp, #12]
   1985c:	ldr	r2, [r5, #12]
   19860:	str	r2, [sp, #8]
   19864:	ldr	r2, [r5, #8]
   19868:	str	r2, [sp, #4]
   1986c:	ldr	r2, [r5, #4]
   19870:	str	r2, [sp]
   19874:	mov	r2, r0
   19878:	mov	r1, #1
   1987c:	mov	r0, r4
   19880:	bl	1130c <__fprintf_chk@plt>
   19884:	b	19620 <__assert_fail@plt+0x823c>
   19888:	mov	r2, #5
   1988c:	ldr	r1, [pc, #156]	; 19930 <__assert_fail@plt+0x854c>
   19890:	mov	r0, #0
   19894:	bl	11168 <dcgettext@plt>
   19898:	ldr	r3, [r5]
   1989c:	ldr	r2, [r5, #32]
   198a0:	str	r2, [sp, #28]
   198a4:	ldr	r2, [r5, #28]
   198a8:	str	r2, [sp, #24]
   198ac:	ldr	r2, [r5, #24]
   198b0:	str	r2, [sp, #20]
   198b4:	ldr	r2, [r5, #20]
   198b8:	str	r2, [sp, #16]
   198bc:	ldr	r2, [r5, #16]
   198c0:	str	r2, [sp, #12]
   198c4:	ldr	r2, [r5, #12]
   198c8:	str	r2, [sp, #8]
   198cc:	ldr	r2, [r5, #8]
   198d0:	str	r2, [sp, #4]
   198d4:	ldr	r2, [r5, #4]
   198d8:	str	r2, [sp]
   198dc:	mov	r2, r0
   198e0:	mov	r1, #1
   198e4:	mov	r0, r4
   198e8:	bl	1130c <__fprintf_chk@plt>
   198ec:	b	19620 <__assert_fail@plt+0x823c>
   198f0:	andeq	sp, r1, r8, ror r8
   198f4:	andeq	sp, r1, ip, lsl #17
   198f8:	andeq	r0, r0, r6, ror #15
   198fc:	andeq	sp, r1, r4, ror #22
   19900:	muleq	r1, r0, r8
   19904:	andeq	sp, r1, ip, lsr r9
   19908:	andeq	sp, r1, r4, lsl #17
   1990c:	andeq	sp, r1, r0, ror #18
   19910:	andeq	sp, r1, r0, ror r9
   19914:	andeq	sp, r1, r8, lsl #19
   19918:	andeq	sp, r1, r4, lsr #19
   1991c:	andeq	sp, r1, r4, asr #19
   19920:	andeq	sp, r1, r8, ror #19
   19924:	andeq	sp, r1, r0, lsl sl
   19928:	andeq	sp, r1, ip, lsr sl
   1992c:	andeq	sp, r1, ip, ror #20
   19930:	andeq	sp, r1, r0, lsr #21
   19934:	push	{r4, r5, lr}
   19938:	sub	sp, sp, #12
   1993c:	ldr	r5, [sp, #24]
   19940:	ldr	ip, [r5]
   19944:	cmp	ip, #0
   19948:	beq	19978 <__assert_fail@plt+0x8594>
   1994c:	mov	lr, r5
   19950:	mov	ip, #0
   19954:	add	ip, ip, #1
   19958:	ldr	r4, [lr, #4]!
   1995c:	cmp	r4, #0
   19960:	bne	19954 <__assert_fail@plt+0x8570>
   19964:	str	ip, [sp, #4]
   19968:	str	r5, [sp]
   1996c:	bl	19514 <__assert_fail@plt+0x8130>
   19970:	add	sp, sp, #12
   19974:	pop	{r4, r5, pc}
   19978:	mov	ip, #0
   1997c:	b	19964 <__assert_fail@plt+0x8580>
   19980:	push	{r4, r5, lr}
   19984:	sub	sp, sp, #52	; 0x34
   19988:	ldr	r4, [sp, #64]	; 0x40
   1998c:	sub	r4, r4, #4
   19990:	add	r5, sp, #4
   19994:	mov	ip, #0
   19998:	ldr	lr, [r4, #4]!
   1999c:	str	lr, [r5, #4]!
   199a0:	cmp	lr, #0
   199a4:	beq	199b4 <__assert_fail@plt+0x85d0>
   199a8:	add	ip, ip, #1
   199ac:	cmp	ip, #10
   199b0:	bne	19998 <__assert_fail@plt+0x85b4>
   199b4:	str	ip, [sp, #4]
   199b8:	add	ip, sp, #8
   199bc:	str	ip, [sp]
   199c0:	bl	19514 <__assert_fail@plt+0x8130>
   199c4:	add	sp, sp, #52	; 0x34
   199c8:	pop	{r4, r5, pc}
   199cc:	push	{r3}		; (str r3, [sp, #-4]!)
   199d0:	push	{lr}		; (str lr, [sp, #-4]!)
   199d4:	sub	sp, sp, #16
   199d8:	add	r3, sp, #24
   199dc:	str	r3, [sp, #12]
   199e0:	str	r3, [sp]
   199e4:	ldr	r3, [sp, #20]
   199e8:	bl	19980 <__assert_fail@plt+0x859c>
   199ec:	add	sp, sp, #16
   199f0:	pop	{lr}		; (ldr lr, [sp], #4)
   199f4:	add	sp, sp, #4
   199f8:	bx	lr
   199fc:	push	{r4, lr}
   19a00:	ldr	r3, [pc, #112]	; 19a78 <__assert_fail@plt+0x8694>
   19a04:	ldr	r1, [r3]
   19a08:	mov	r0, #10
   19a0c:	bl	1115c <fputc_unlocked@plt>
   19a10:	mov	r2, #5
   19a14:	ldr	r1, [pc, #96]	; 19a7c <__assert_fail@plt+0x8698>
   19a18:	mov	r0, #0
   19a1c:	bl	11168 <dcgettext@plt>
   19a20:	ldr	r2, [pc, #88]	; 19a80 <__assert_fail@plt+0x869c>
   19a24:	mov	r1, r0
   19a28:	mov	r0, #1
   19a2c:	bl	112f4 <__printf_chk@plt>
   19a30:	mov	r2, #5
   19a34:	ldr	r1, [pc, #72]	; 19a84 <__assert_fail@plt+0x86a0>
   19a38:	mov	r0, #0
   19a3c:	bl	11168 <dcgettext@plt>
   19a40:	ldr	r3, [pc, #64]	; 19a88 <__assert_fail@plt+0x86a4>
   19a44:	ldr	r2, [pc, #64]	; 19a8c <__assert_fail@plt+0x86a8>
   19a48:	mov	r1, r0
   19a4c:	mov	r0, #1
   19a50:	bl	112f4 <__printf_chk@plt>
   19a54:	mov	r2, #5
   19a58:	ldr	r1, [pc, #48]	; 19a90 <__assert_fail@plt+0x86ac>
   19a5c:	mov	r0, #0
   19a60:	bl	11168 <dcgettext@plt>
   19a64:	ldr	r2, [pc, #40]	; 19a94 <__assert_fail@plt+0x86b0>
   19a68:	mov	r1, r0
   19a6c:	mov	r0, #1
   19a70:	bl	112f4 <__printf_chk@plt>
   19a74:	pop	{r4, pc}
   19a78:	andeq	lr, r2, r4, ror #3
   19a7c:	ldrdeq	sp, [r1], -ip
   19a80:	strdeq	sp, [r1], -r0
   19a84:	andeq	sp, r1, r8, lsl #22
   19a88:	andeq	sp, r1, ip, lsr r2
   19a8c:	andeq	sp, r1, r4, ror #4
   19a90:	andeq	sp, r1, ip, lsl fp
   19a94:	andeq	sp, r1, r4, asr #22
   19a98:	push	{r4, lr}
   19a9c:	bl	1b400 <__assert_fail@plt+0xa01c>
   19aa0:	cmp	r0, #0
   19aa4:	popne	{r4, pc}
   19aa8:	bl	1a03c <__assert_fail@plt+0x8c58>
   19aac:	push	{r4, lr}
   19ab0:	bl	1b400 <__assert_fail@plt+0xa01c>
   19ab4:	cmp	r0, #0
   19ab8:	popne	{r4, pc}
   19abc:	bl	1a03c <__assert_fail@plt+0x8c58>
   19ac0:	push	{r4, lr}
   19ac4:	bl	19a98 <__assert_fail@plt+0x86b4>
   19ac8:	pop	{r4, pc}
   19acc:	push	{r4, r5, r6, lr}
   19ad0:	mov	r5, r0
   19ad4:	mov	r4, r1
   19ad8:	bl	1b430 <__assert_fail@plt+0xa04c>
   19adc:	cmp	r0, #0
   19ae0:	popne	{r4, r5, r6, pc}
   19ae4:	adds	r4, r4, #0
   19ae8:	movne	r4, #1
   19aec:	cmp	r5, #0
   19af0:	orreq	r4, r4, #1
   19af4:	cmp	r4, #0
   19af8:	popeq	{r4, r5, r6, pc}
   19afc:	bl	1a03c <__assert_fail@plt+0x8c58>
   19b00:	push	{r4, lr}
   19b04:	cmp	r1, #0
   19b08:	orreq	r1, r1, #1
   19b0c:	bl	1b430 <__assert_fail@plt+0xa04c>
   19b10:	cmp	r0, #0
   19b14:	popne	{r4, pc}
   19b18:	bl	1a03c <__assert_fail@plt+0x8c58>
   19b1c:	push	{r4, r5, r6, lr}
   19b20:	mov	r6, r0
   19b24:	mov	r5, r1
   19b28:	mov	r4, r2
   19b2c:	bl	1b7dc <__assert_fail@plt+0xa3f8>
   19b30:	cmp	r0, #0
   19b34:	popne	{r4, r5, r6, pc}
   19b38:	cmp	r6, #0
   19b3c:	beq	19b4c <__assert_fail@plt+0x8768>
   19b40:	cmp	r5, #0
   19b44:	cmpne	r4, #0
   19b48:	popeq	{r4, r5, r6, pc}
   19b4c:	bl	1a03c <__assert_fail@plt+0x8c58>
   19b50:	push	{r4, lr}
   19b54:	bl	19b1c <__assert_fail@plt+0x8738>
   19b58:	pop	{r4, pc}
   19b5c:	push	{r4, lr}
   19b60:	mov	ip, r1
   19b64:	mov	r3, r2
   19b68:	cmp	r2, #0
   19b6c:	cmpne	r1, #0
   19b70:	moveq	r3, #1
   19b74:	moveq	ip, r3
   19b78:	mov	r2, r3
   19b7c:	mov	r1, ip
   19b80:	bl	1b7dc <__assert_fail@plt+0xa3f8>
   19b84:	cmp	r0, #0
   19b88:	popne	{r4, pc}
   19b8c:	bl	1a03c <__assert_fail@plt+0x8c58>
   19b90:	push	{r4, lr}
   19b94:	mov	r2, r1
   19b98:	mov	r1, r0
   19b9c:	mov	r0, #0
   19ba0:	bl	19b1c <__assert_fail@plt+0x8738>
   19ba4:	pop	{r4, pc}
   19ba8:	push	{r4, lr}
   19bac:	mov	r2, r1
   19bb0:	mov	r1, r0
   19bb4:	mov	r0, #0
   19bb8:	bl	19b5c <__assert_fail@plt+0x8778>
   19bbc:	pop	{r4, pc}
   19bc0:	push	{r4, r5, r6, r7, r8, lr}
   19bc4:	mov	r5, r1
   19bc8:	mov	r6, r2
   19bcc:	ldr	r4, [r1]
   19bd0:	subs	r7, r0, #0
   19bd4:	beq	19bf0 <__assert_fail@plt+0x880c>
   19bd8:	lsr	r2, r4, #1
   19bdc:	add	r3, r2, #1
   19be0:	mvn	r3, r3
   19be4:	cmp	r4, r3
   19be8:	bls	19c14 <__assert_fail@plt+0x8830>
   19bec:	bl	1a03c <__assert_fail@plt+0x8c58>
   19bf0:	cmp	r4, #0
   19bf4:	bne	19c1c <__assert_fail@plt+0x8838>
   19bf8:	mov	r1, r2
   19bfc:	mov	r0, #64	; 0x40
   19c00:	bl	1b828 <__assert_fail@plt+0xa444>
   19c04:	cmp	r0, #0
   19c08:	movne	r4, r0
   19c0c:	addeq	r4, r0, #1
   19c10:	b	19c1c <__assert_fail@plt+0x8838>
   19c14:	add	r4, r4, #1
   19c18:	add	r4, r4, r2
   19c1c:	mov	r2, r6
   19c20:	mov	r1, r4
   19c24:	mov	r0, r7
   19c28:	bl	19b1c <__assert_fail@plt+0x8738>
   19c2c:	str	r4, [r5]
   19c30:	pop	{r4, r5, r6, r7, r8, pc}
   19c34:	push	{r4, lr}
   19c38:	mov	r2, #1
   19c3c:	bl	19bc0 <__assert_fail@plt+0x87dc>
   19c40:	pop	{r4, pc}
   19c44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c48:	sub	sp, sp, #12
   19c4c:	mov	fp, r0
   19c50:	mov	sl, r1
   19c54:	mov	r9, r2
   19c58:	mov	r7, r3
   19c5c:	ldr	r6, [sp, #48]	; 0x30
   19c60:	ldr	r5, [r1]
   19c64:	asrs	r4, r5, #1
   19c68:	bmi	19dc4 <__assert_fail@plt+0x89e0>
   19c6c:	cmp	r5, #0
   19c70:	blt	19dd8 <__assert_fail@plt+0x89f4>
   19c74:	mvn	r3, #-2147483648	; 0x80000000
   19c78:	sub	r3, r3, r4
   19c7c:	cmp	r5, r3
   19c80:	movle	r3, #0
   19c84:	movgt	r3, #1
   19c88:	cmp	r3, #0
   19c8c:	addeq	r4, r4, r5
   19c90:	mvnne	r4, #-2147483648	; 0x80000000
   19c94:	mvn	r8, r7
   19c98:	lsr	r8, r8, #31
   19c9c:	cmp	r7, r4
   19ca0:	movge	r3, #0
   19ca4:	andlt	r3, r8, #1
   19ca8:	cmp	r3, #0
   19cac:	movne	r4, r7
   19cb0:	cmp	r6, #0
   19cb4:	blt	19dec <__assert_fail@plt+0x8a08>
   19cb8:	cmp	r6, #0
   19cbc:	beq	19e98 <__assert_fail@plt+0x8ab4>
   19cc0:	cmp	r4, #0
   19cc4:	blt	19e48 <__assert_fail@plt+0x8a64>
   19cc8:	mov	r1, r6
   19ccc:	mvn	r0, #-2147483648	; 0x80000000
   19cd0:	bl	1ba34 <__assert_fail@plt+0xa650>
   19cd4:	cmp	r0, r4
   19cd8:	movge	r0, #0
   19cdc:	movlt	r0, #1
   19ce0:	cmp	r0, #0
   19ce4:	mvnne	r3, #-2147483648	; 0x80000000
   19ce8:	strne	r3, [sp, #4]
   19cec:	beq	19e80 <__assert_fail@plt+0x8a9c>
   19cf0:	mov	r1, r6
   19cf4:	ldr	r0, [sp, #4]
   19cf8:	bl	1ba34 <__assert_fail@plt+0xa650>
   19cfc:	mov	r4, r0
   19d00:	mov	r1, r6
   19d04:	ldr	r0, [sp, #4]
   19d08:	bl	1bc54 <__assert_fail@plt+0xa870>
   19d0c:	ldr	r3, [sp, #4]
   19d10:	sub	r1, r3, r1
   19d14:	cmp	fp, #0
   19d18:	moveq	r3, #0
   19d1c:	streq	r3, [sl]
   19d20:	sub	r3, r4, r5
   19d24:	cmp	r3, r9
   19d28:	bge	19db0 <__assert_fail@plt+0x89cc>
   19d2c:	cmp	r9, #0
   19d30:	blt	19ea4 <__assert_fail@plt+0x8ac0>
   19d34:	cmp	r5, #0
   19d38:	blt	19eb8 <__assert_fail@plt+0x8ad4>
   19d3c:	mvn	r3, #-2147483648	; 0x80000000
   19d40:	sub	r3, r3, r9
   19d44:	cmp	r5, r3
   19d48:	movle	r3, #0
   19d4c:	movgt	r3, #1
   19d50:	cmp	r3, #0
   19d54:	bne	19f60 <__assert_fail@plt+0x8b7c>
   19d58:	add	r5, r5, r9
   19d5c:	mov	r4, r5
   19d60:	cmp	r7, r5
   19d64:	movge	r7, #0
   19d68:	andlt	r7, r8, #1
   19d6c:	cmp	r7, #0
   19d70:	bne	19f60 <__assert_fail@plt+0x8b7c>
   19d74:	cmp	r6, #0
   19d78:	blt	19ecc <__assert_fail@plt+0x8ae8>
   19d7c:	cmp	r6, #0
   19d80:	beq	19dac <__assert_fail@plt+0x89c8>
   19d84:	cmp	r5, #0
   19d88:	blt	19f28 <__assert_fail@plt+0x8b44>
   19d8c:	mov	r1, r6
   19d90:	mvn	r0, #-2147483648	; 0x80000000
   19d94:	bl	1ba34 <__assert_fail@plt+0xa650>
   19d98:	cmp	r5, r0
   19d9c:	movle	r0, #0
   19da0:	movgt	r0, #1
   19da4:	cmp	r0, #0
   19da8:	bne	19f60 <__assert_fail@plt+0x8b7c>
   19dac:	mul	r1, r5, r6
   19db0:	mov	r0, fp
   19db4:	bl	19acc <__assert_fail@plt+0x86e8>
   19db8:	str	r4, [sl]
   19dbc:	add	sp, sp, #12
   19dc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19dc4:	rsb	r3, r4, #-2147483648	; 0x80000000
   19dc8:	cmp	r5, r3
   19dcc:	movge	r3, #0
   19dd0:	movlt	r3, #1
   19dd4:	b	19c88 <__assert_fail@plt+0x88a4>
   19dd8:	rsb	r3, r5, #-2147483648	; 0x80000000
   19ddc:	cmp	r4, r3
   19de0:	movge	r3, #0
   19de4:	movlt	r3, #1
   19de8:	b	19c88 <__assert_fail@plt+0x88a4>
   19dec:	cmp	r4, #0
   19df0:	blt	19e18 <__assert_fail@plt+0x8a34>
   19df4:	cmn	r6, #1
   19df8:	beq	19e34 <__assert_fail@plt+0x8a50>
   19dfc:	mov	r1, r6
   19e00:	mov	r0, #-2147483648	; 0x80000000
   19e04:	bl	1ba34 <__assert_fail@plt+0xa650>
   19e08:	cmp	r0, r4
   19e0c:	movge	r0, #0
   19e10:	movlt	r0, #1
   19e14:	b	19ce0 <__assert_fail@plt+0x88fc>
   19e18:	mov	r1, r6
   19e1c:	mvn	r0, #-2147483648	; 0x80000000
   19e20:	bl	1ba34 <__assert_fail@plt+0xa650>
   19e24:	cmp	r0, r4
   19e28:	movle	r0, #0
   19e2c:	movgt	r0, #1
   19e30:	b	19ce0 <__assert_fail@plt+0x88fc>
   19e34:	add	r0, r4, #-2147483648	; 0x80000000
   19e38:	cmp	r0, #0
   19e3c:	movle	r0, #0
   19e40:	movgt	r0, #1
   19e44:	b	19ce0 <__assert_fail@plt+0x88fc>
   19e48:	cmn	r4, #1
   19e4c:	beq	19e6c <__assert_fail@plt+0x8a88>
   19e50:	mov	r1, r4
   19e54:	mov	r0, #-2147483648	; 0x80000000
   19e58:	bl	1ba34 <__assert_fail@plt+0xa650>
   19e5c:	cmp	r6, r0
   19e60:	movle	r0, #0
   19e64:	movgt	r0, #1
   19e68:	b	19ce0 <__assert_fail@plt+0x88fc>
   19e6c:	add	r0, r6, #-2147483648	; 0x80000000
   19e70:	cmp	r0, #0
   19e74:	movle	r0, #0
   19e78:	movgt	r0, #1
   19e7c:	b	19ce0 <__assert_fail@plt+0x88fc>
   19e80:	mul	r1, r6, r4
   19e84:	cmp	r1, #63	; 0x3f
   19e88:	movle	r3, #64	; 0x40
   19e8c:	strle	r3, [sp, #4]
   19e90:	bgt	19d14 <__assert_fail@plt+0x8930>
   19e94:	b	19cf0 <__assert_fail@plt+0x890c>
   19e98:	mov	r3, #64	; 0x40
   19e9c:	str	r3, [sp, #4]
   19ea0:	b	19cf0 <__assert_fail@plt+0x890c>
   19ea4:	rsb	r3, r9, #-2147483648	; 0x80000000
   19ea8:	cmp	r5, r3
   19eac:	movge	r3, #0
   19eb0:	movlt	r3, #1
   19eb4:	b	19d50 <__assert_fail@plt+0x896c>
   19eb8:	rsb	r3, r5, #-2147483648	; 0x80000000
   19ebc:	cmp	r9, r3
   19ec0:	movge	r3, #0
   19ec4:	movlt	r3, #1
   19ec8:	b	19d50 <__assert_fail@plt+0x896c>
   19ecc:	cmp	r5, #0
   19ed0:	blt	19ef8 <__assert_fail@plt+0x8b14>
   19ed4:	cmn	r6, #1
   19ed8:	beq	19f14 <__assert_fail@plt+0x8b30>
   19edc:	mov	r1, r6
   19ee0:	mov	r0, #-2147483648	; 0x80000000
   19ee4:	bl	1ba34 <__assert_fail@plt+0xa650>
   19ee8:	cmp	r5, r0
   19eec:	movle	r0, #0
   19ef0:	movgt	r0, #1
   19ef4:	b	19da4 <__assert_fail@plt+0x89c0>
   19ef8:	mov	r1, r6
   19efc:	mvn	r0, #-2147483648	; 0x80000000
   19f00:	bl	1ba34 <__assert_fail@plt+0xa650>
   19f04:	cmp	r5, r0
   19f08:	movge	r0, #0
   19f0c:	movlt	r0, #1
   19f10:	b	19da4 <__assert_fail@plt+0x89c0>
   19f14:	add	r0, r5, #-2147483648	; 0x80000000
   19f18:	cmp	r0, #0
   19f1c:	movle	r0, #0
   19f20:	movgt	r0, #1
   19f24:	b	19da4 <__assert_fail@plt+0x89c0>
   19f28:	cmn	r5, #1
   19f2c:	beq	19f4c <__assert_fail@plt+0x8b68>
   19f30:	mov	r1, r5
   19f34:	mov	r0, #-2147483648	; 0x80000000
   19f38:	bl	1ba34 <__assert_fail@plt+0xa650>
   19f3c:	cmp	r6, r0
   19f40:	movle	r0, #0
   19f44:	movgt	r0, #1
   19f48:	b	19da4 <__assert_fail@plt+0x89c0>
   19f4c:	add	r0, r6, #-2147483648	; 0x80000000
   19f50:	cmp	r0, #0
   19f54:	movle	r0, #0
   19f58:	movgt	r0, #1
   19f5c:	b	19da4 <__assert_fail@plt+0x89c0>
   19f60:	bl	1a03c <__assert_fail@plt+0x8c58>
   19f64:	push	{r4, lr}
   19f68:	bl	1b3b0 <__assert_fail@plt+0x9fcc>
   19f6c:	cmp	r0, #0
   19f70:	popne	{r4, pc}
   19f74:	bl	1a03c <__assert_fail@plt+0x8c58>
   19f78:	push	{r4, lr}
   19f7c:	mov	r1, #1
   19f80:	bl	19f64 <__assert_fail@plt+0x8b80>
   19f84:	pop	{r4, pc}
   19f88:	push	{r4, lr}
   19f8c:	bl	1b3b0 <__assert_fail@plt+0x9fcc>
   19f90:	cmp	r0, #0
   19f94:	popne	{r4, pc}
   19f98:	bl	1a03c <__assert_fail@plt+0x8c58>
   19f9c:	push	{r4, lr}
   19fa0:	mov	r1, #1
   19fa4:	bl	19f88 <__assert_fail@plt+0x8ba4>
   19fa8:	pop	{r4, pc}
   19fac:	push	{r4, r5, r6, lr}
   19fb0:	mov	r5, r0
   19fb4:	mov	r4, r1
   19fb8:	mov	r0, r1
   19fbc:	bl	19a98 <__assert_fail@plt+0x86b4>
   19fc0:	mov	r2, r4
   19fc4:	mov	r1, r5
   19fc8:	bl	1112c <memcpy@plt>
   19fcc:	pop	{r4, r5, r6, pc}
   19fd0:	push	{r4, r5, r6, lr}
   19fd4:	mov	r5, r0
   19fd8:	mov	r4, r1
   19fdc:	mov	r0, r1
   19fe0:	bl	19aac <__assert_fail@plt+0x86c8>
   19fe4:	mov	r2, r4
   19fe8:	mov	r1, r5
   19fec:	bl	1112c <memcpy@plt>
   19ff0:	pop	{r4, r5, r6, pc}
   19ff4:	push	{r4, r5, r6, lr}
   19ff8:	mov	r5, r0
   19ffc:	mov	r4, r1
   1a000:	add	r0, r1, #1
   1a004:	bl	19aac <__assert_fail@plt+0x86c8>
   1a008:	mov	r2, #0
   1a00c:	strb	r2, [r0, r4]
   1a010:	mov	r2, r4
   1a014:	mov	r1, r5
   1a018:	bl	1112c <memcpy@plt>
   1a01c:	pop	{r4, r5, r6, pc}
   1a020:	push	{r4, lr}
   1a024:	mov	r4, r0
   1a028:	bl	11294 <strlen@plt>
   1a02c:	add	r1, r0, #1
   1a030:	mov	r0, r4
   1a034:	bl	19fac <__assert_fail@plt+0x8bc8>
   1a038:	pop	{r4, pc}
   1a03c:	push	{r4, lr}
   1a040:	ldr	r3, [pc, #40]	; 1a070 <__assert_fail@plt+0x8c8c>
   1a044:	ldr	r4, [r3]
   1a048:	mov	r2, #5
   1a04c:	ldr	r1, [pc, #32]	; 1a074 <__assert_fail@plt+0x8c90>
   1a050:	mov	r0, #0
   1a054:	bl	11168 <dcgettext@plt>
   1a058:	mov	r3, r0
   1a05c:	ldr	r2, [pc, #20]	; 1a078 <__assert_fail@plt+0x8c94>
   1a060:	mov	r1, #0
   1a064:	mov	r0, r4
   1a068:	bl	11204 <error@plt>
   1a06c:	bl	113cc <abort@plt>
   1a070:	andeq	lr, r2, r4, lsl #3
   1a074:	muleq	r1, r4, fp
   1a078:	andeq	sp, r1, r4, lsr #14
   1a07c:	push	{r4, r5, r6, r7, lr}
   1a080:	sub	sp, sp, #20
   1a084:	mov	r7, r0
   1a088:	mov	r4, r2
   1a08c:	mov	r5, r3
   1a090:	ldr	r6, [sp, #56]	; 0x38
   1a094:	ldr	r3, [sp, #48]	; 0x30
   1a098:	str	r3, [sp]
   1a09c:	add	r3, sp, #8
   1a0a0:	mov	r2, r1
   1a0a4:	mov	r1, #0
   1a0a8:	bl	1a3cc <__assert_fail@plt+0x8fe8>
   1a0ac:	cmp	r0, #0
   1a0b0:	bne	1a14c <__assert_fail@plt+0x8d68>
   1a0b4:	ldrd	r0, [sp, #8]
   1a0b8:	ldrd	r2, [sp, #40]	; 0x28
   1a0bc:	cmp	r2, r0
   1a0c0:	sbcs	r3, r3, r1
   1a0c4:	movlt	r3, #1
   1a0c8:	movge	r3, #0
   1a0cc:	cmp	r0, r4
   1a0d0:	sbcs	r2, r1, r5
   1a0d4:	orrlt	r3, r3, #1
   1a0d8:	cmp	r3, #0
   1a0dc:	beq	1a1c4 <__assert_fail@plt+0x8de0>
   1a0e0:	cmp	r0, #1073741824	; 0x40000000
   1a0e4:	sbcs	r3, r1, #0
   1a0e8:	blt	1a118 <__assert_fail@plt+0x8d34>
   1a0ec:	bl	112c4 <__errno_location@plt>
   1a0f0:	mov	r3, #75	; 0x4b
   1a0f4:	str	r3, [r0]
   1a0f8:	cmp	r6, #0
   1a0fc:	bne	1a1b8 <__assert_fail@plt+0x8dd4>
   1a100:	mov	r6, #1
   1a104:	bl	112c4 <__errno_location@plt>
   1a108:	ldr	r4, [r0]
   1a10c:	cmp	r4, #22
   1a110:	moveq	r4, #0
   1a114:	b	1a188 <__assert_fail@plt+0x8da4>
   1a118:	mov	r2, #-1073741824	; 0xc0000000
   1a11c:	mvn	r3, #0
   1a120:	cmp	r0, r2
   1a124:	sbcs	r3, r1, r3
   1a128:	bge	1a13c <__assert_fail@plt+0x8d58>
   1a12c:	bl	112c4 <__errno_location@plt>
   1a130:	mov	r3, #75	; 0x4b
   1a134:	str	r3, [r0]
   1a138:	b	1a0f8 <__assert_fail@plt+0x8d14>
   1a13c:	bl	112c4 <__errno_location@plt>
   1a140:	mov	r3, #34	; 0x22
   1a144:	str	r3, [r0]
   1a148:	b	1a0f8 <__assert_fail@plt+0x8d14>
   1a14c:	cmp	r0, #1
   1a150:	beq	1a168 <__assert_fail@plt+0x8d84>
   1a154:	cmp	r0, #3
   1a158:	beq	1a1a8 <__assert_fail@plt+0x8dc4>
   1a15c:	cmp	r6, #0
   1a160:	moveq	r6, #1
   1a164:	b	1a104 <__assert_fail@plt+0x8d20>
   1a168:	bl	112c4 <__errno_location@plt>
   1a16c:	mov	r3, #75	; 0x4b
   1a170:	str	r3, [r0]
   1a174:	cmp	r6, #0
   1a178:	bne	1a104 <__assert_fail@plt+0x8d20>
   1a17c:	bl	112c4 <__errno_location@plt>
   1a180:	ldr	r4, [r0]
   1a184:	mov	r6, #1
   1a188:	mov	r0, r7
   1a18c:	bl	18f70 <__assert_fail@plt+0x7b8c>
   1a190:	str	r0, [sp]
   1a194:	ldr	r3, [sp, #52]	; 0x34
   1a198:	ldr	r2, [pc, #44]	; 1a1cc <__assert_fail@plt+0x8de8>
   1a19c:	mov	r1, r4
   1a1a0:	mov	r0, r6
   1a1a4:	bl	11204 <error@plt>
   1a1a8:	bl	112c4 <__errno_location@plt>
   1a1ac:	mov	r3, #0
   1a1b0:	str	r3, [r0]
   1a1b4:	b	1a174 <__assert_fail@plt+0x8d90>
   1a1b8:	bl	112c4 <__errno_location@plt>
   1a1bc:	ldr	r4, [r0]
   1a1c0:	b	1a188 <__assert_fail@plt+0x8da4>
   1a1c4:	add	sp, sp, #20
   1a1c8:	pop	{r4, r5, r6, r7, pc}
   1a1cc:	andeq	sp, r1, r0, lsr #14
   1a1d0:	push	{r4, r5, lr}
   1a1d4:	sub	sp, sp, #28
   1a1d8:	ldr	r1, [sp, #56]	; 0x38
   1a1dc:	str	r1, [sp, #16]
   1a1e0:	ldr	r1, [sp, #52]	; 0x34
   1a1e4:	str	r1, [sp, #12]
   1a1e8:	ldr	r1, [sp, #48]	; 0x30
   1a1ec:	str	r1, [sp, #8]
   1a1f0:	ldrd	r4, [sp, #40]	; 0x28
   1a1f4:	strd	r4, [sp]
   1a1f8:	mov	r1, #10
   1a1fc:	bl	1a07c <__assert_fail@plt+0x8c98>
   1a200:	add	sp, sp, #28
   1a204:	pop	{r4, r5, pc}
   1a208:	push	{r4, r5, r6, r7, r8, lr}
   1a20c:	mov	r5, r0
   1a210:	subs	r4, r1, #0
   1a214:	blt	1a270 <__assert_fail@plt+0x8e8c>
   1a218:	cmp	r4, #0
   1a21c:	beq	1a2e4 <__assert_fail@plt+0x8f00>
   1a220:	ldrd	r6, [r0]
   1a224:	cmp	r6, #0
   1a228:	sbcs	r3, r7, #0
   1a22c:	blt	1a328 <__assert_fail@plt+0x8f44>
   1a230:	mov	r2, r4
   1a234:	asr	r3, r4, #31
   1a238:	mvn	r0, #0
   1a23c:	mvn	r1, #-2147483648	; 0x80000000
   1a240:	bl	1bc74 <__assert_fail@plt+0xa890>
   1a244:	cmp	r0, r6
   1a248:	sbcs	r3, r1, r7
   1a24c:	movlt	r3, #1
   1a250:	movge	r3, #0
   1a254:	cmp	r3, #0
   1a258:	mvnne	r2, #0
   1a25c:	mvnne	r3, #-2147483648	; 0x80000000
   1a260:	beq	1a2e4 <__assert_fail@plt+0x8f00>
   1a264:	strd	r2, [r5]
   1a268:	mov	r0, #1
   1a26c:	pop	{r4, r5, r6, r7, r8, pc}
   1a270:	ldrd	r6, [r0]
   1a274:	cmp	r6, #0
   1a278:	sbcs	r3, r7, #0
   1a27c:	blt	1a2b0 <__assert_fail@plt+0x8ecc>
   1a280:	cmn	r4, #1
   1a284:	beq	1a30c <__assert_fail@plt+0x8f28>
   1a288:	mov	r2, r4
   1a28c:	asr	r3, r4, #31
   1a290:	mov	r0, #0
   1a294:	mov	r1, #-2147483648	; 0x80000000
   1a298:	bl	1bc74 <__assert_fail@plt+0xa890>
   1a29c:	cmp	r0, r6
   1a2a0:	sbcs	r3, r1, r7
   1a2a4:	movlt	r3, #1
   1a2a8:	movge	r3, #0
   1a2ac:	b	1a254 <__assert_fail@plt+0x8e70>
   1a2b0:	mov	r2, r4
   1a2b4:	asr	r3, r4, #31
   1a2b8:	mvn	r0, #0
   1a2bc:	mvn	r1, #-2147483648	; 0x80000000
   1a2c0:	bl	1bc74 <__assert_fail@plt+0xa890>
   1a2c4:	cmp	r6, r0
   1a2c8:	sbcs	r3, r7, r1
   1a2cc:	movlt	r3, #1
   1a2d0:	movge	r3, #0
   1a2d4:	cmp	r3, #0
   1a2d8:	movne	r2, #0
   1a2dc:	movne	r3, #-2147483648	; 0x80000000
   1a2e0:	bne	1a264 <__assert_fail@plt+0x8e80>
   1a2e4:	asr	r3, r4, #31
   1a2e8:	ldr	r1, [r5, #4]
   1a2ec:	ldr	r2, [r5]
   1a2f0:	mul	r3, r3, r2
   1a2f4:	mla	r1, r4, r1, r3
   1a2f8:	umull	r2, r3, r2, r4
   1a2fc:	add	r3, r1, r3
   1a300:	strd	r2, [r5]
   1a304:	mov	r0, #0
   1a308:	pop	{r4, r5, r6, r7, r8, pc}
   1a30c:	adds	r6, r6, #0
   1a310:	adc	r7, r7, #-2147483648	; 0x80000000
   1a314:	cmp	r6, #1
   1a318:	sbcs	r3, r7, #0
   1a31c:	movge	r3, #1
   1a320:	movlt	r3, #0
   1a324:	b	1a254 <__assert_fail@plt+0x8e70>
   1a328:	mvn	r2, #0
   1a32c:	mvn	r3, #0
   1a330:	cmp	r7, r3
   1a334:	cmpeq	r6, r2
   1a338:	beq	1a36c <__assert_fail@plt+0x8f88>
   1a33c:	mov	r2, r6
   1a340:	mov	r3, r7
   1a344:	mov	r0, #0
   1a348:	mov	r1, #-2147483648	; 0x80000000
   1a34c:	bl	1bc74 <__assert_fail@plt+0xa890>
   1a350:	mov	r2, r4
   1a354:	asr	r3, r4, #31
   1a358:	cmp	r0, r4
   1a35c:	sbcs	r3, r1, r3
   1a360:	movlt	r3, #1
   1a364:	movge	r3, #0
   1a368:	b	1a2d4 <__assert_fail@plt+0x8ef0>
   1a36c:	asr	r3, r4, #31
   1a370:	adds	r2, r4, #0
   1a374:	adc	r3, r3, #-2147483648	; 0x80000000
   1a378:	cmp	r2, #1
   1a37c:	sbcs	r3, r3, #0
   1a380:	movge	r3, #1
   1a384:	movlt	r3, #0
   1a388:	b	1a2d4 <__assert_fail@plt+0x8ef0>
   1a38c:	push	{r4, r5, r6, r7, r8, lr}
   1a390:	subs	r4, r2, #0
   1a394:	beq	1a3c4 <__assert_fail@plt+0x8fe0>
   1a398:	mov	r7, r1
   1a39c:	mov	r6, r0
   1a3a0:	mov	r5, #0
   1a3a4:	mov	r1, r7
   1a3a8:	mov	r0, r6
   1a3ac:	bl	1a208 <__assert_fail@plt+0x8e24>
   1a3b0:	orr	r5, r5, r0
   1a3b4:	subs	r4, r4, #1
   1a3b8:	bne	1a3a4 <__assert_fail@plt+0x8fc0>
   1a3bc:	mov	r0, r5
   1a3c0:	pop	{r4, r5, r6, r7, r8, pc}
   1a3c4:	mov	r5, #0
   1a3c8:	b	1a3bc <__assert_fail@plt+0x8fd8>
   1a3cc:	push	{r4, r5, r6, r7, r8, lr}
   1a3d0:	sub	sp, sp, #16
   1a3d4:	cmp	r2, #36	; 0x24
   1a3d8:	bhi	1a444 <__assert_fail@plt+0x9060>
   1a3dc:	mov	r6, r0
   1a3e0:	mov	r4, r1
   1a3e4:	mov	r5, r2
   1a3e8:	mov	r8, r3
   1a3ec:	cmp	r1, #0
   1a3f0:	addeq	r4, sp, #12
   1a3f4:	bl	112c4 <__errno_location@plt>
   1a3f8:	mov	r7, r0
   1a3fc:	mov	r3, #0
   1a400:	str	r3, [r0]
   1a404:	mov	r2, r5
   1a408:	mov	r1, r4
   1a40c:	mov	r0, r6
   1a410:	bl	11390 <__strtoll_internal@plt>
   1a414:	strd	r0, [sp]
   1a418:	ldr	r5, [r4]
   1a41c:	cmp	r6, r5
   1a420:	beq	1a458 <__assert_fail@plt+0x9074>
   1a424:	ldr	r3, [r7]
   1a428:	cmp	r3, #0
   1a42c:	beq	1a4a0 <__assert_fail@plt+0x90bc>
   1a430:	cmp	r3, #34	; 0x22
   1a434:	moveq	r6, #1
   1a438:	beq	1a4a4 <__assert_fail@plt+0x90c0>
   1a43c:	mov	r6, #4
   1a440:	b	1a7f8 <__assert_fail@plt+0x9414>
   1a444:	ldr	r3, [pc, #952]	; 1a804 <__assert_fail@plt+0x9420>
   1a448:	mov	r2, #85	; 0x55
   1a44c:	ldr	r1, [pc, #948]	; 1a808 <__assert_fail@plt+0x9424>
   1a450:	ldr	r0, [pc, #948]	; 1a80c <__assert_fail@plt+0x9428>
   1a454:	bl	113e4 <__assert_fail@plt>
   1a458:	ldr	r3, [sp, #40]	; 0x28
   1a45c:	cmp	r3, #0
   1a460:	moveq	r6, #4
   1a464:	beq	1a7f8 <__assert_fail@plt+0x9414>
   1a468:	ldrb	r1, [r5]
   1a46c:	cmp	r1, #0
   1a470:	moveq	r6, #4
   1a474:	beq	1a7f8 <__assert_fail@plt+0x9414>
   1a478:	mov	r0, r3
   1a47c:	bl	112a0 <strchr@plt>
   1a480:	cmp	r0, #0
   1a484:	moveq	r6, #4
   1a488:	beq	1a7f8 <__assert_fail@plt+0x9414>
   1a48c:	mov	r2, #1
   1a490:	mov	r3, #0
   1a494:	strd	r2, [sp]
   1a498:	mov	r6, #0
   1a49c:	b	1a4b0 <__assert_fail@plt+0x90cc>
   1a4a0:	mov	r6, #0
   1a4a4:	ldr	r3, [sp, #40]	; 0x28
   1a4a8:	cmp	r3, #0
   1a4ac:	beq	1a5a0 <__assert_fail@plt+0x91bc>
   1a4b0:	ldrb	r7, [r5]
   1a4b4:	cmp	r7, #0
   1a4b8:	beq	1a7f0 <__assert_fail@plt+0x940c>
   1a4bc:	mov	r1, r7
   1a4c0:	ldr	r0, [sp, #40]	; 0x28
   1a4c4:	bl	112a0 <strchr@plt>
   1a4c8:	cmp	r0, #0
   1a4cc:	beq	1a5a8 <__assert_fail@plt+0x91c4>
   1a4d0:	sub	r3, r7, #69	; 0x45
   1a4d4:	cmp	r3, #47	; 0x2f
   1a4d8:	ldrls	pc, [pc, r3, lsl #2]
   1a4dc:	b	1a614 <__assert_fail@plt+0x9230>
   1a4e0:			; <UNDEFINED> instruction: 0x0001a5b8
   1a4e4:	andeq	sl, r1, r4, lsl r6
   1a4e8:			; <UNDEFINED> instruction: 0x0001a5b8
   1a4ec:	andeq	sl, r1, r4, lsl r6
   1a4f0:	andeq	sl, r1, r4, lsl r6
   1a4f4:	andeq	sl, r1, r4, lsl r6
   1a4f8:			; <UNDEFINED> instruction: 0x0001a5b8
   1a4fc:	andeq	sl, r1, r4, lsl r6
   1a500:			; <UNDEFINED> instruction: 0x0001a5b8
   1a504:	andeq	sl, r1, r4, lsl r6
   1a508:	andeq	sl, r1, r4, lsl r6
   1a50c:			; <UNDEFINED> instruction: 0x0001a5b8
   1a510:	andeq	sl, r1, r4, lsl r6
   1a514:	andeq	sl, r1, r4, lsl r6
   1a518:	andeq	sl, r1, r4, lsl r6
   1a51c:			; <UNDEFINED> instruction: 0x0001a5b8
   1a520:	andeq	sl, r1, r4, lsl r6
   1a524:	andeq	sl, r1, r4, lsl r6
   1a528:	andeq	sl, r1, r4, lsl r6
   1a52c:	andeq	sl, r1, r4, lsl r6
   1a530:			; <UNDEFINED> instruction: 0x0001a5b8
   1a534:			; <UNDEFINED> instruction: 0x0001a5b8
   1a538:	andeq	sl, r1, r4, lsl r6
   1a53c:	andeq	sl, r1, r4, lsl r6
   1a540:	andeq	sl, r1, r4, lsl r6
   1a544:	andeq	sl, r1, r4, lsl r6
   1a548:	andeq	sl, r1, r4, lsl r6
   1a54c:	andeq	sl, r1, r4, lsl r6
   1a550:	andeq	sl, r1, r4, lsl r6
   1a554:	andeq	sl, r1, r4, lsl r6
   1a558:	andeq	sl, r1, r4, lsl r6
   1a55c:	andeq	sl, r1, r4, lsl r6
   1a560:	andeq	sl, r1, r4, lsl r6
   1a564:	andeq	sl, r1, r4, lsl r6
   1a568:			; <UNDEFINED> instruction: 0x0001a5b8
   1a56c:	andeq	sl, r1, r4, lsl r6
   1a570:	andeq	sl, r1, r4, lsl r6
   1a574:	andeq	sl, r1, r4, lsl r6
   1a578:			; <UNDEFINED> instruction: 0x0001a5b8
   1a57c:	andeq	sl, r1, r4, lsl r6
   1a580:			; <UNDEFINED> instruction: 0x0001a5b8
   1a584:	andeq	sl, r1, r4, lsl r6
   1a588:	andeq	sl, r1, r4, lsl r6
   1a58c:	andeq	sl, r1, r4, lsl r6
   1a590:	andeq	sl, r1, r4, lsl r6
   1a594:	andeq	sl, r1, r4, lsl r6
   1a598:	andeq	sl, r1, r4, lsl r6
   1a59c:			; <UNDEFINED> instruction: 0x0001a5b8
   1a5a0:	strd	r0, [r8]
   1a5a4:	b	1a7f8 <__assert_fail@plt+0x9414>
   1a5a8:	ldrd	r2, [sp]
   1a5ac:	strd	r2, [r8]
   1a5b0:	orr	r6, r6, #2
   1a5b4:	b	1a7f8 <__assert_fail@plt+0x9414>
   1a5b8:	mov	r1, #48	; 0x30
   1a5bc:	ldr	r0, [sp, #40]	; 0x28
   1a5c0:	bl	112a0 <strchr@plt>
   1a5c4:	cmp	r0, #0
   1a5c8:	beq	1a704 <__assert_fail@plt+0x9320>
   1a5cc:	ldrb	r3, [r5, #1]
   1a5d0:	cmp	r3, #68	; 0x44
   1a5d4:	beq	1a5f0 <__assert_fail@plt+0x920c>
   1a5d8:	cmp	r3, #105	; 0x69
   1a5dc:	beq	1a5fc <__assert_fail@plt+0x9218>
   1a5e0:	cmp	r3, #66	; 0x42
   1a5e4:	movne	r5, #1
   1a5e8:	movne	r1, #1024	; 0x400
   1a5ec:	bne	1a61c <__assert_fail@plt+0x9238>
   1a5f0:	mov	r5, #2
   1a5f4:	mov	r1, #1000	; 0x3e8
   1a5f8:	b	1a61c <__assert_fail@plt+0x9238>
   1a5fc:	ldrb	r5, [r5, #2]
   1a600:	cmp	r5, #66	; 0x42
   1a604:	movne	r5, #1
   1a608:	moveq	r5, #3
   1a60c:	mov	r1, #1024	; 0x400
   1a610:	b	1a61c <__assert_fail@plt+0x9238>
   1a614:	mov	r5, #1
   1a618:	mov	r1, #1024	; 0x400
   1a61c:	sub	r7, r7, #66	; 0x42
   1a620:	cmp	r7, #53	; 0x35
   1a624:	ldrls	pc, [pc, r7, lsl #2]
   1a628:	b	1a7c0 <__assert_fail@plt+0x93dc>
   1a62c:	andeq	sl, r1, r0, lsr #14
   1a630:	andeq	sl, r1, r0, asr #15
   1a634:	andeq	sl, r1, r0, asr #15
   1a638:	andeq	sl, r1, r0, lsr r7
   1a63c:	andeq	sl, r1, r0, asr #15
   1a640:	andeq	sl, r1, r0, asr #14
   1a644:	andeq	sl, r1, r0, asr #15
   1a648:	andeq	sl, r1, r0, asr #15
   1a64c:	andeq	sl, r1, r0, asr #15
   1a650:	andeq	sl, r1, r0, asr r7
   1a654:	andeq	sl, r1, r0, asr #15
   1a658:	andeq	sl, r1, r0, ror #14
   1a65c:	andeq	sl, r1, r0, asr #15
   1a660:	andeq	sl, r1, r0, asr #15
   1a664:	andeq	sl, r1, r0, ror r7
   1a668:	andeq	sl, r1, r0, asr #15
   1a66c:	andeq	sl, r1, r0, asr #15
   1a670:	andeq	sl, r1, r0, asr #15
   1a674:	andeq	sl, r1, r0, lsl #15
   1a678:	andeq	sl, r1, r0, asr #15
   1a67c:	andeq	sl, r1, r0, asr #15
   1a680:	andeq	sl, r1, r0, asr #15
   1a684:	andeq	sl, r1, r0, asr #15
   1a688:	andeq	sl, r1, r0, lsr #15
   1a68c:			; <UNDEFINED> instruction: 0x0001a7b0
   1a690:	andeq	sl, r1, r0, asr #15
   1a694:	andeq	sl, r1, r0, asr #15
   1a698:	andeq	sl, r1, r0, asr #15
   1a69c:	andeq	sl, r1, r0, asr #15
   1a6a0:	andeq	sl, r1, r0, asr #15
   1a6a4:	andeq	sl, r1, r0, asr #15
   1a6a8:	andeq	sl, r1, r0, asr #15
   1a6ac:	andeq	sl, r1, r0, lsl r7
   1a6b0:	ldrdeq	sl, [r1], -r0
   1a6b4:	andeq	sl, r1, r0, asr #15
   1a6b8:	andeq	sl, r1, r0, asr #15
   1a6bc:	andeq	sl, r1, r0, asr #15
   1a6c0:	andeq	sl, r1, r0, asr #14
   1a6c4:	andeq	sl, r1, r0, asr #15
   1a6c8:	andeq	sl, r1, r0, asr #15
   1a6cc:	andeq	sl, r1, r0, asr #15
   1a6d0:	andeq	sl, r1, r0, asr r7
   1a6d4:	andeq	sl, r1, r0, asr #15
   1a6d8:	andeq	sl, r1, r0, ror #14
   1a6dc:	andeq	sl, r1, r0, asr #15
   1a6e0:	andeq	sl, r1, r0, asr #15
   1a6e4:	andeq	sl, r1, r0, asr #15
   1a6e8:	andeq	sl, r1, r0, asr #15
   1a6ec:	andeq	sl, r1, r0, asr #15
   1a6f0:	andeq	sl, r1, r0, asr #15
   1a6f4:	andeq	sl, r1, r0, lsl #15
   1a6f8:	andeq	sl, r1, r0, asr #15
   1a6fc:	andeq	sl, r1, r0, asr #15
   1a700:	muleq	r1, r0, r7
   1a704:	mov	r5, #1
   1a708:	mov	r1, #1024	; 0x400
   1a70c:	b	1a61c <__assert_fail@plt+0x9238>
   1a710:	mov	r1, #512	; 0x200
   1a714:	mov	r0, sp
   1a718:	bl	1a208 <__assert_fail@plt+0x8e24>
   1a71c:	b	1a7d4 <__assert_fail@plt+0x93f0>
   1a720:	mov	r1, #1024	; 0x400
   1a724:	mov	r0, sp
   1a728:	bl	1a208 <__assert_fail@plt+0x8e24>
   1a72c:	b	1a7d4 <__assert_fail@plt+0x93f0>
   1a730:	mov	r2, #6
   1a734:	mov	r0, sp
   1a738:	bl	1a38c <__assert_fail@plt+0x8fa8>
   1a73c:	b	1a7d4 <__assert_fail@plt+0x93f0>
   1a740:	mov	r2, #3
   1a744:	mov	r0, sp
   1a748:	bl	1a38c <__assert_fail@plt+0x8fa8>
   1a74c:	b	1a7d4 <__assert_fail@plt+0x93f0>
   1a750:	mov	r2, #1
   1a754:	mov	r0, sp
   1a758:	bl	1a38c <__assert_fail@plt+0x8fa8>
   1a75c:	b	1a7d4 <__assert_fail@plt+0x93f0>
   1a760:	mov	r2, #2
   1a764:	mov	r0, sp
   1a768:	bl	1a38c <__assert_fail@plt+0x8fa8>
   1a76c:	b	1a7d4 <__assert_fail@plt+0x93f0>
   1a770:	mov	r2, #5
   1a774:	mov	r0, sp
   1a778:	bl	1a38c <__assert_fail@plt+0x8fa8>
   1a77c:	b	1a7d4 <__assert_fail@plt+0x93f0>
   1a780:	mov	r2, #4
   1a784:	mov	r0, sp
   1a788:	bl	1a38c <__assert_fail@plt+0x8fa8>
   1a78c:	b	1a7d4 <__assert_fail@plt+0x93f0>
   1a790:	mov	r1, #2
   1a794:	mov	r0, sp
   1a798:	bl	1a208 <__assert_fail@plt+0x8e24>
   1a79c:	b	1a7d4 <__assert_fail@plt+0x93f0>
   1a7a0:	mov	r2, #8
   1a7a4:	mov	r0, sp
   1a7a8:	bl	1a38c <__assert_fail@plt+0x8fa8>
   1a7ac:	b	1a7d4 <__assert_fail@plt+0x93f0>
   1a7b0:	mov	r2, #7
   1a7b4:	mov	r0, sp
   1a7b8:	bl	1a38c <__assert_fail@plt+0x8fa8>
   1a7bc:	b	1a7d4 <__assert_fail@plt+0x93f0>
   1a7c0:	ldrd	r2, [sp]
   1a7c4:	strd	r2, [r8]
   1a7c8:	orr	r6, r6, #2
   1a7cc:	b	1a7f8 <__assert_fail@plt+0x9414>
   1a7d0:	mov	r0, #0
   1a7d4:	orr	r6, r6, r0
   1a7d8:	ldr	r3, [r4]
   1a7dc:	add	r2, r3, r5
   1a7e0:	str	r2, [r4]
   1a7e4:	ldrb	r3, [r3, r5]
   1a7e8:	cmp	r3, #0
   1a7ec:	orrne	r6, r6, #2
   1a7f0:	ldrd	r2, [sp]
   1a7f4:	strd	r2, [r8]
   1a7f8:	mov	r0, r6
   1a7fc:	add	sp, sp, #16
   1a800:	pop	{r4, r5, r6, r7, r8, pc}
   1a804:	andeq	sp, r1, r8, lsr #23
   1a808:			; <UNDEFINED> instruction: 0x0001dbb4
   1a80c:	andeq	sp, r1, r4, asr #23
   1a810:	push	{r4, r5, r6, lr}
   1a814:	mov	r5, r0
   1a818:	subs	r6, r1, #0
   1a81c:	blt	1a864 <__assert_fail@plt+0x9480>
   1a820:	cmp	r6, #0
   1a824:	beq	1a8b8 <__assert_fail@plt+0x94d4>
   1a828:	ldr	r4, [r0]
   1a82c:	cmp	r4, #0
   1a830:	blt	1a8e0 <__assert_fail@plt+0x94fc>
   1a834:	mov	r1, r6
   1a838:	mvn	r0, #-2147483648	; 0x80000000
   1a83c:	bl	1ba34 <__assert_fail@plt+0xa650>
   1a840:	cmp	r4, r0
   1a844:	movle	r0, #0
   1a848:	movgt	r0, #1
   1a84c:	cmp	r0, #0
   1a850:	mvnne	r3, #-2147483648	; 0x80000000
   1a854:	beq	1a8b8 <__assert_fail@plt+0x94d4>
   1a858:	str	r3, [r5]
   1a85c:	mov	r0, #1
   1a860:	pop	{r4, r5, r6, pc}
   1a864:	ldr	r4, [r0]
   1a868:	cmp	r4, #0
   1a86c:	blt	1a894 <__assert_fail@plt+0x94b0>
   1a870:	cmn	r6, #1
   1a874:	beq	1a8cc <__assert_fail@plt+0x94e8>
   1a878:	mov	r1, r6
   1a87c:	mov	r0, #-2147483648	; 0x80000000
   1a880:	bl	1ba34 <__assert_fail@plt+0xa650>
   1a884:	cmp	r4, r0
   1a888:	movle	r0, #0
   1a88c:	movgt	r0, #1
   1a890:	b	1a84c <__assert_fail@plt+0x9468>
   1a894:	mov	r1, r6
   1a898:	mvn	r0, #-2147483648	; 0x80000000
   1a89c:	bl	1ba34 <__assert_fail@plt+0xa650>
   1a8a0:	cmp	r4, r0
   1a8a4:	movge	r0, #0
   1a8a8:	movlt	r0, #1
   1a8ac:	cmp	r0, #0
   1a8b0:	movne	r3, #-2147483648	; 0x80000000
   1a8b4:	bne	1a858 <__assert_fail@plt+0x9474>
   1a8b8:	ldr	r3, [r5]
   1a8bc:	mul	r6, r6, r3
   1a8c0:	str	r6, [r5]
   1a8c4:	mov	r0, #0
   1a8c8:	pop	{r4, r5, r6, pc}
   1a8cc:	add	r0, r4, #-2147483648	; 0x80000000
   1a8d0:	cmp	r0, #0
   1a8d4:	movle	r0, #0
   1a8d8:	movgt	r0, #1
   1a8dc:	b	1a84c <__assert_fail@plt+0x9468>
   1a8e0:	cmn	r4, #1
   1a8e4:	beq	1a904 <__assert_fail@plt+0x9520>
   1a8e8:	mov	r1, r4
   1a8ec:	mov	r0, #-2147483648	; 0x80000000
   1a8f0:	bl	1ba34 <__assert_fail@plt+0xa650>
   1a8f4:	cmp	r6, r0
   1a8f8:	movle	r0, #0
   1a8fc:	movgt	r0, #1
   1a900:	b	1a8ac <__assert_fail@plt+0x94c8>
   1a904:	add	r0, r6, #-2147483648	; 0x80000000
   1a908:	cmp	r0, #0
   1a90c:	movle	r0, #0
   1a910:	movgt	r0, #1
   1a914:	b	1a8ac <__assert_fail@plt+0x94c8>
   1a918:	push	{r4, r5, r6, r7, r8, lr}
   1a91c:	subs	r4, r2, #0
   1a920:	beq	1a950 <__assert_fail@plt+0x956c>
   1a924:	mov	r7, r1
   1a928:	mov	r6, r0
   1a92c:	mov	r5, #0
   1a930:	mov	r1, r7
   1a934:	mov	r0, r6
   1a938:	bl	1a810 <__assert_fail@plt+0x942c>
   1a93c:	orr	r5, r5, r0
   1a940:	subs	r4, r4, #1
   1a944:	bne	1a930 <__assert_fail@plt+0x954c>
   1a948:	mov	r0, r5
   1a94c:	pop	{r4, r5, r6, r7, r8, pc}
   1a950:	mov	r5, #0
   1a954:	b	1a948 <__assert_fail@plt+0x9564>
   1a958:	push	{r4, r5, r6, r7, r8, lr}
   1a95c:	sub	sp, sp, #8
   1a960:	cmp	r2, #36	; 0x24
   1a964:	bhi	1a9d0 <__assert_fail@plt+0x95ec>
   1a968:	mov	r6, r0
   1a96c:	mov	r4, r1
   1a970:	mov	r5, r2
   1a974:	mov	r8, r3
   1a978:	cmp	r1, #0
   1a97c:	addeq	r4, sp, #4
   1a980:	bl	112c4 <__errno_location@plt>
   1a984:	mov	r7, r0
   1a988:	mov	r3, #0
   1a98c:	str	r3, [r0]
   1a990:	mov	r2, r5
   1a994:	mov	r1, r4
   1a998:	mov	r0, r6
   1a99c:	bl	110cc <strtol@plt>
   1a9a0:	str	r0, [sp]
   1a9a4:	ldr	r5, [r4]
   1a9a8:	cmp	r6, r5
   1a9ac:	beq	1a9e4 <__assert_fail@plt+0x9600>
   1a9b0:	ldr	r3, [r7]
   1a9b4:	cmp	r3, #0
   1a9b8:	beq	1aa28 <__assert_fail@plt+0x9644>
   1a9bc:	cmp	r3, #34	; 0x22
   1a9c0:	moveq	r6, #1
   1a9c4:	beq	1aa2c <__assert_fail@plt+0x9648>
   1a9c8:	mov	r6, #4
   1a9cc:	b	1ad7c <__assert_fail@plt+0x9998>
   1a9d0:	ldr	r3, [pc, #944]	; 1ad88 <__assert_fail@plt+0x99a4>
   1a9d4:	mov	r2, #85	; 0x55
   1a9d8:	ldr	r1, [pc, #940]	; 1ad8c <__assert_fail@plt+0x99a8>
   1a9dc:	ldr	r0, [pc, #940]	; 1ad90 <__assert_fail@plt+0x99ac>
   1a9e0:	bl	113e4 <__assert_fail@plt>
   1a9e4:	ldr	r3, [sp, #32]
   1a9e8:	cmp	r3, #0
   1a9ec:	moveq	r6, #4
   1a9f0:	beq	1ad7c <__assert_fail@plt+0x9998>
   1a9f4:	ldrb	r1, [r5]
   1a9f8:	cmp	r1, #0
   1a9fc:	moveq	r6, #4
   1aa00:	beq	1ad7c <__assert_fail@plt+0x9998>
   1aa04:	mov	r0, r3
   1aa08:	bl	112a0 <strchr@plt>
   1aa0c:	cmp	r0, #0
   1aa10:	moveq	r6, #4
   1aa14:	beq	1ad7c <__assert_fail@plt+0x9998>
   1aa18:	mov	r3, #1
   1aa1c:	str	r3, [sp]
   1aa20:	mov	r6, #0
   1aa24:	b	1aa3c <__assert_fail@plt+0x9658>
   1aa28:	mov	r6, #0
   1aa2c:	ldr	r3, [sp, #32]
   1aa30:	cmp	r3, #0
   1aa34:	streq	r0, [r8]
   1aa38:	beq	1ad7c <__assert_fail@plt+0x9998>
   1aa3c:	ldrb	r7, [r5]
   1aa40:	cmp	r7, #0
   1aa44:	beq	1ad74 <__assert_fail@plt+0x9990>
   1aa48:	mov	r1, r7
   1aa4c:	ldr	r0, [sp, #32]
   1aa50:	bl	112a0 <strchr@plt>
   1aa54:	cmp	r0, #0
   1aa58:	beq	1ab2c <__assert_fail@plt+0x9748>
   1aa5c:	sub	r3, r7, #69	; 0x45
   1aa60:	cmp	r3, #47	; 0x2f
   1aa64:	ldrls	pc, [pc, r3, lsl #2]
   1aa68:	b	1ab98 <__assert_fail@plt+0x97b4>
   1aa6c:	andeq	sl, r1, ip, lsr fp
   1aa70:	muleq	r1, r8, fp
   1aa74:	andeq	sl, r1, ip, lsr fp
   1aa78:	muleq	r1, r8, fp
   1aa7c:	muleq	r1, r8, fp
   1aa80:	muleq	r1, r8, fp
   1aa84:	andeq	sl, r1, ip, lsr fp
   1aa88:	muleq	r1, r8, fp
   1aa8c:	andeq	sl, r1, ip, lsr fp
   1aa90:	muleq	r1, r8, fp
   1aa94:	muleq	r1, r8, fp
   1aa98:	andeq	sl, r1, ip, lsr fp
   1aa9c:	muleq	r1, r8, fp
   1aaa0:	muleq	r1, r8, fp
   1aaa4:	muleq	r1, r8, fp
   1aaa8:	andeq	sl, r1, ip, lsr fp
   1aaac:	muleq	r1, r8, fp
   1aab0:	muleq	r1, r8, fp
   1aab4:	muleq	r1, r8, fp
   1aab8:	muleq	r1, r8, fp
   1aabc:	andeq	sl, r1, ip, lsr fp
   1aac0:	andeq	sl, r1, ip, lsr fp
   1aac4:	muleq	r1, r8, fp
   1aac8:	muleq	r1, r8, fp
   1aacc:	muleq	r1, r8, fp
   1aad0:	muleq	r1, r8, fp
   1aad4:	muleq	r1, r8, fp
   1aad8:	muleq	r1, r8, fp
   1aadc:	muleq	r1, r8, fp
   1aae0:	muleq	r1, r8, fp
   1aae4:	muleq	r1, r8, fp
   1aae8:	muleq	r1, r8, fp
   1aaec:	muleq	r1, r8, fp
   1aaf0:	muleq	r1, r8, fp
   1aaf4:	andeq	sl, r1, ip, lsr fp
   1aaf8:	muleq	r1, r8, fp
   1aafc:	muleq	r1, r8, fp
   1ab00:	muleq	r1, r8, fp
   1ab04:	andeq	sl, r1, ip, lsr fp
   1ab08:	muleq	r1, r8, fp
   1ab0c:	andeq	sl, r1, ip, lsr fp
   1ab10:	muleq	r1, r8, fp
   1ab14:	muleq	r1, r8, fp
   1ab18:	muleq	r1, r8, fp
   1ab1c:	muleq	r1, r8, fp
   1ab20:	muleq	r1, r8, fp
   1ab24:	muleq	r1, r8, fp
   1ab28:	andeq	sl, r1, ip, lsr fp
   1ab2c:	ldr	r3, [sp]
   1ab30:	str	r3, [r8]
   1ab34:	orr	r6, r6, #2
   1ab38:	b	1ad7c <__assert_fail@plt+0x9998>
   1ab3c:	mov	r1, #48	; 0x30
   1ab40:	ldr	r0, [sp, #32]
   1ab44:	bl	112a0 <strchr@plt>
   1ab48:	cmp	r0, #0
   1ab4c:	beq	1ac88 <__assert_fail@plt+0x98a4>
   1ab50:	ldrb	r3, [r5, #1]
   1ab54:	cmp	r3, #68	; 0x44
   1ab58:	beq	1ab74 <__assert_fail@plt+0x9790>
   1ab5c:	cmp	r3, #105	; 0x69
   1ab60:	beq	1ab80 <__assert_fail@plt+0x979c>
   1ab64:	cmp	r3, #66	; 0x42
   1ab68:	movne	r5, #1
   1ab6c:	movne	r1, #1024	; 0x400
   1ab70:	bne	1aba0 <__assert_fail@plt+0x97bc>
   1ab74:	mov	r5, #2
   1ab78:	mov	r1, #1000	; 0x3e8
   1ab7c:	b	1aba0 <__assert_fail@plt+0x97bc>
   1ab80:	ldrb	r5, [r5, #2]
   1ab84:	cmp	r5, #66	; 0x42
   1ab88:	movne	r5, #1
   1ab8c:	moveq	r5, #3
   1ab90:	mov	r1, #1024	; 0x400
   1ab94:	b	1aba0 <__assert_fail@plt+0x97bc>
   1ab98:	mov	r5, #1
   1ab9c:	mov	r1, #1024	; 0x400
   1aba0:	sub	r7, r7, #66	; 0x42
   1aba4:	cmp	r7, #53	; 0x35
   1aba8:	ldrls	pc, [pc, r7, lsl #2]
   1abac:	b	1ad44 <__assert_fail@plt+0x9960>
   1abb0:	andeq	sl, r1, r4, lsr #25
   1abb4:	andeq	sl, r1, r4, asr #26
   1abb8:	andeq	sl, r1, r4, asr #26
   1abbc:			; <UNDEFINED> instruction: 0x0001acb4
   1abc0:	andeq	sl, r1, r4, asr #26
   1abc4:	andeq	sl, r1, r4, asr #25
   1abc8:	andeq	sl, r1, r4, asr #26
   1abcc:	andeq	sl, r1, r4, asr #26
   1abd0:	andeq	sl, r1, r4, asr #26
   1abd4:	ldrdeq	sl, [r1], -r4
   1abd8:	andeq	sl, r1, r4, asr #26
   1abdc:	andeq	sl, r1, r4, ror #25
   1abe0:	andeq	sl, r1, r4, asr #26
   1abe4:	andeq	sl, r1, r4, asr #26
   1abe8:	strdeq	sl, [r1], -r4
   1abec:	andeq	sl, r1, r4, asr #26
   1abf0:	andeq	sl, r1, r4, asr #26
   1abf4:	andeq	sl, r1, r4, asr #26
   1abf8:	andeq	sl, r1, r4, lsl #26
   1abfc:	andeq	sl, r1, r4, asr #26
   1ac00:	andeq	sl, r1, r4, asr #26
   1ac04:	andeq	sl, r1, r4, asr #26
   1ac08:	andeq	sl, r1, r4, asr #26
   1ac0c:	andeq	sl, r1, r4, lsr #26
   1ac10:	andeq	sl, r1, r4, lsr sp
   1ac14:	andeq	sl, r1, r4, asr #26
   1ac18:	andeq	sl, r1, r4, asr #26
   1ac1c:	andeq	sl, r1, r4, asr #26
   1ac20:	andeq	sl, r1, r4, asr #26
   1ac24:	andeq	sl, r1, r4, asr #26
   1ac28:	andeq	sl, r1, r4, asr #26
   1ac2c:	andeq	sl, r1, r4, asr #26
   1ac30:	muleq	r1, r4, ip
   1ac34:	andeq	sl, r1, r4, asr sp
   1ac38:	andeq	sl, r1, r4, asr #26
   1ac3c:	andeq	sl, r1, r4, asr #26
   1ac40:	andeq	sl, r1, r4, asr #26
   1ac44:	andeq	sl, r1, r4, asr #25
   1ac48:	andeq	sl, r1, r4, asr #26
   1ac4c:	andeq	sl, r1, r4, asr #26
   1ac50:	andeq	sl, r1, r4, asr #26
   1ac54:	ldrdeq	sl, [r1], -r4
   1ac58:	andeq	sl, r1, r4, asr #26
   1ac5c:	andeq	sl, r1, r4, ror #25
   1ac60:	andeq	sl, r1, r4, asr #26
   1ac64:	andeq	sl, r1, r4, asr #26
   1ac68:	andeq	sl, r1, r4, asr #26
   1ac6c:	andeq	sl, r1, r4, asr #26
   1ac70:	andeq	sl, r1, r4, asr #26
   1ac74:	andeq	sl, r1, r4, asr #26
   1ac78:	andeq	sl, r1, r4, lsl #26
   1ac7c:	andeq	sl, r1, r4, asr #26
   1ac80:	andeq	sl, r1, r4, asr #26
   1ac84:	andeq	sl, r1, r4, lsl sp
   1ac88:	mov	r5, #1
   1ac8c:	mov	r1, #1024	; 0x400
   1ac90:	b	1aba0 <__assert_fail@plt+0x97bc>
   1ac94:	mov	r1, #512	; 0x200
   1ac98:	mov	r0, sp
   1ac9c:	bl	1a810 <__assert_fail@plt+0x942c>
   1aca0:	b	1ad58 <__assert_fail@plt+0x9974>
   1aca4:	mov	r1, #1024	; 0x400
   1aca8:	mov	r0, sp
   1acac:	bl	1a810 <__assert_fail@plt+0x942c>
   1acb0:	b	1ad58 <__assert_fail@plt+0x9974>
   1acb4:	mov	r2, #6
   1acb8:	mov	r0, sp
   1acbc:	bl	1a918 <__assert_fail@plt+0x9534>
   1acc0:	b	1ad58 <__assert_fail@plt+0x9974>
   1acc4:	mov	r2, #3
   1acc8:	mov	r0, sp
   1accc:	bl	1a918 <__assert_fail@plt+0x9534>
   1acd0:	b	1ad58 <__assert_fail@plt+0x9974>
   1acd4:	mov	r2, #1
   1acd8:	mov	r0, sp
   1acdc:	bl	1a918 <__assert_fail@plt+0x9534>
   1ace0:	b	1ad58 <__assert_fail@plt+0x9974>
   1ace4:	mov	r2, #2
   1ace8:	mov	r0, sp
   1acec:	bl	1a918 <__assert_fail@plt+0x9534>
   1acf0:	b	1ad58 <__assert_fail@plt+0x9974>
   1acf4:	mov	r2, #5
   1acf8:	mov	r0, sp
   1acfc:	bl	1a918 <__assert_fail@plt+0x9534>
   1ad00:	b	1ad58 <__assert_fail@plt+0x9974>
   1ad04:	mov	r2, #4
   1ad08:	mov	r0, sp
   1ad0c:	bl	1a918 <__assert_fail@plt+0x9534>
   1ad10:	b	1ad58 <__assert_fail@plt+0x9974>
   1ad14:	mov	r1, #2
   1ad18:	mov	r0, sp
   1ad1c:	bl	1a810 <__assert_fail@plt+0x942c>
   1ad20:	b	1ad58 <__assert_fail@plt+0x9974>
   1ad24:	mov	r2, #8
   1ad28:	mov	r0, sp
   1ad2c:	bl	1a918 <__assert_fail@plt+0x9534>
   1ad30:	b	1ad58 <__assert_fail@plt+0x9974>
   1ad34:	mov	r2, #7
   1ad38:	mov	r0, sp
   1ad3c:	bl	1a918 <__assert_fail@plt+0x9534>
   1ad40:	b	1ad58 <__assert_fail@plt+0x9974>
   1ad44:	ldr	r3, [sp]
   1ad48:	str	r3, [r8]
   1ad4c:	orr	r6, r6, #2
   1ad50:	b	1ad7c <__assert_fail@plt+0x9998>
   1ad54:	mov	r0, #0
   1ad58:	orr	r6, r6, r0
   1ad5c:	ldr	r3, [r4]
   1ad60:	add	r2, r3, r5
   1ad64:	str	r2, [r4]
   1ad68:	ldrb	r3, [r3, r5]
   1ad6c:	cmp	r3, #0
   1ad70:	orrne	r6, r6, #2
   1ad74:	ldr	r3, [sp]
   1ad78:	str	r3, [r8]
   1ad7c:	mov	r0, r6
   1ad80:	add	sp, sp, #8
   1ad84:	pop	{r4, r5, r6, r7, r8, pc}
   1ad88:	andeq	sp, r1, ip, ror #23
   1ad8c:			; <UNDEFINED> instruction: 0x0001dbb4
   1ad90:	andeq	sp, r1, r4, asr #23
   1ad94:	push	{lr}		; (str lr, [sp, #-4]!)
   1ad98:	sub	sp, sp, #20
   1ad9c:	ldr	ip, [pc, #144]	; 1ae34 <__assert_fail@plt+0x9a50>
   1ada0:	ldr	r5, [ip]
   1ada4:	sub	r0, r0, #1
   1ada8:	cmp	r0, #3
   1adac:	ldrls	pc, [pc, r0, lsl #2]
   1adb0:	b	1adcc <__assert_fail@plt+0x99e8>
   1adb4:	ldrdeq	sl, [r1], -r0
   1adb8:	andeq	sl, r1, r4, asr #27
   1adbc:	andeq	sl, r1, r4, asr #27
   1adc0:	ldrdeq	sl, [r1], -r8
   1adc4:	ldr	r0, [pc, #108]	; 1ae38 <__assert_fail@plt+0x9a54>
   1adc8:	b	1addc <__assert_fail@plt+0x99f8>
   1adcc:	bl	113cc <abort@plt>
   1add0:	ldr	r0, [pc, #100]	; 1ae3c <__assert_fail@plt+0x9a58>
   1add4:	b	1addc <__assert_fail@plt+0x99f8>
   1add8:	ldr	r0, [pc, #96]	; 1ae40 <__assert_fail@plt+0x9a5c>
   1addc:	cmp	r1, #0
   1ade0:	ldrlt	r4, [pc, #92]	; 1ae44 <__assert_fail@plt+0x9a60>
   1ade4:	sublt	r4, r4, r1
   1ade8:	strblt	r2, [sp, #12]
   1adec:	movlt	r3, #0
   1adf0:	strblt	r3, [sp, #13]
   1adf4:	addlt	r6, sp, #12
   1adf8:	ldrge	r6, [r3, r1, lsl #4]
   1adfc:	ldrge	r4, [pc, #64]	; 1ae44 <__assert_fail@plt+0x9a60>
   1ae00:	mov	r2, #5
   1ae04:	mov	r1, r0
   1ae08:	mov	r0, #0
   1ae0c:	bl	11168 <dcgettext@plt>
   1ae10:	ldr	r3, [sp, #24]
   1ae14:	str	r3, [sp, #4]
   1ae18:	str	r6, [sp]
   1ae1c:	mov	r3, r4
   1ae20:	mov	r2, r0
   1ae24:	mov	r1, #0
   1ae28:	mov	r0, r5
   1ae2c:	bl	11204 <error@plt>
   1ae30:	bl	113cc <abort@plt>
   1ae34:	andeq	lr, r2, r4, lsl #3
   1ae38:	andeq	sp, r1, r0, lsl ip
   1ae3c:	andeq	sp, r1, r8, lsr ip
   1ae40:	strdeq	sp, [r1], -r4
   1ae44:	andeq	sp, r1, r8, asr ip
   1ae48:	push	{r4, r5, r6, lr}
   1ae4c:	mov	r5, r0
   1ae50:	subs	r4, r1, #0
   1ae54:	blt	1aea8 <__assert_fail@plt+0x9ac4>
   1ae58:	cmp	r4, #0
   1ae5c:	moveq	r3, #0
   1ae60:	beq	1ae8c <__assert_fail@plt+0x9aa8>
   1ae64:	mov	r2, r4
   1ae68:	asr	r3, r4, #31
   1ae6c:	mvn	r0, #0
   1ae70:	mvn	r1, #0
   1ae74:	bl	1bd48 <__assert_fail@plt+0xa964>
   1ae78:	ldrd	r2, [r5]
   1ae7c:	cmp	r1, r3
   1ae80:	cmpeq	r0, r2
   1ae84:	movcc	r3, #1
   1ae88:	movcs	r3, #0
   1ae8c:	cmp	r3, #0
   1ae90:	beq	1aec8 <__assert_fail@plt+0x9ae4>
   1ae94:	mvn	r2, #0
   1ae98:	mvn	r3, #0
   1ae9c:	strd	r2, [r5]
   1aea0:	mov	r0, #1
   1aea4:	pop	{r4, r5, r6, pc}
   1aea8:	mov	r1, r4
   1aeac:	mov	r0, #0
   1aeb0:	bl	1ba34 <__assert_fail@plt+0xa650>
   1aeb4:	ldrd	r2, [r5]
   1aeb8:	orrs	r3, r2, r3
   1aebc:	movne	r3, #1
   1aec0:	moveq	r3, #0
   1aec4:	b	1ae8c <__assert_fail@plt+0x9aa8>
   1aec8:	asr	r3, r4, #31
   1aecc:	ldr	r1, [r5, #4]
   1aed0:	ldr	r2, [r5]
   1aed4:	mul	r3, r3, r2
   1aed8:	mla	r1, r4, r1, r3
   1aedc:	umull	r2, r3, r2, r4
   1aee0:	add	r3, r1, r3
   1aee4:	strd	r2, [r5]
   1aee8:	mov	r0, #0
   1aeec:	pop	{r4, r5, r6, pc}
   1aef0:	push	{r4, r5, r6, r7, r8, lr}
   1aef4:	subs	r4, r2, #0
   1aef8:	beq	1af28 <__assert_fail@plt+0x9b44>
   1aefc:	mov	r7, r1
   1af00:	mov	r6, r0
   1af04:	mov	r5, #0
   1af08:	mov	r1, r7
   1af0c:	mov	r0, r6
   1af10:	bl	1ae48 <__assert_fail@plt+0x9a64>
   1af14:	orr	r5, r5, r0
   1af18:	subs	r4, r4, #1
   1af1c:	bne	1af08 <__assert_fail@plt+0x9b24>
   1af20:	mov	r0, r5
   1af24:	pop	{r4, r5, r6, r7, r8, pc}
   1af28:	mov	r5, #0
   1af2c:	b	1af20 <__assert_fail@plt+0x9b3c>
   1af30:	push	{r4, r5, r6, r7, r8, r9, lr}
   1af34:	sub	sp, sp, #20
   1af38:	cmp	r2, #36	; 0x24
   1af3c:	bhi	1af7c <__assert_fail@plt+0x9b98>
   1af40:	mov	r5, r0
   1af44:	mov	r6, r1
   1af48:	mov	r7, r2
   1af4c:	mov	r9, r3
   1af50:	cmp	r1, #0
   1af54:	addeq	r6, sp, #12
   1af58:	bl	112c4 <__errno_location@plt>
   1af5c:	mov	r8, r0
   1af60:	mov	r3, #0
   1af64:	str	r3, [r0]
   1af68:	ldrb	r4, [r5]
   1af6c:	bl	1127c <__ctype_b_loc@plt>
   1af70:	ldr	r1, [r0]
   1af74:	mov	r2, r5
   1af78:	b	1af94 <__assert_fail@plt+0x9bb0>
   1af7c:	ldr	r3, [pc, #1056]	; 1b3a4 <__assert_fail@plt+0x9fc0>
   1af80:	mov	r2, #85	; 0x55
   1af84:	ldr	r1, [pc, #1052]	; 1b3a8 <__assert_fail@plt+0x9fc4>
   1af88:	ldr	r0, [pc, #1052]	; 1b3ac <__assert_fail@plt+0x9fc8>
   1af8c:	bl	113e4 <__assert_fail@plt>
   1af90:	ldrb	r4, [r2, #1]!
   1af94:	lsl	r3, r4, #1
   1af98:	ldrh	r3, [r1, r3]
   1af9c:	tst	r3, #8192	; 0x2000
   1afa0:	bne	1af90 <__assert_fail@plt+0x9bac>
   1afa4:	cmp	r4, #45	; 0x2d
   1afa8:	moveq	r4, #4
   1afac:	bne	1afbc <__assert_fail@plt+0x9bd8>
   1afb0:	mov	r0, r4
   1afb4:	add	sp, sp, #20
   1afb8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1afbc:	mov	r3, #0
   1afc0:	mov	r2, r7
   1afc4:	mov	r1, r6
   1afc8:	mov	r0, r5
   1afcc:	bl	11138 <__strtoull_internal@plt>
   1afd0:	strd	r0, [sp]
   1afd4:	ldr	r7, [r6]
   1afd8:	cmp	r5, r7
   1afdc:	beq	1b000 <__assert_fail@plt+0x9c1c>
   1afe0:	ldr	r3, [r8]
   1afe4:	cmp	r3, #0
   1afe8:	beq	1b048 <__assert_fail@plt+0x9c64>
   1afec:	cmp	r3, #34	; 0x22
   1aff0:	moveq	r4, #1
   1aff4:	beq	1b04c <__assert_fail@plt+0x9c68>
   1aff8:	mov	r4, #4
   1affc:	b	1afb0 <__assert_fail@plt+0x9bcc>
   1b000:	ldr	r3, [sp, #48]	; 0x30
   1b004:	cmp	r3, #0
   1b008:	moveq	r4, #4
   1b00c:	beq	1afb0 <__assert_fail@plt+0x9bcc>
   1b010:	ldrb	r1, [r7]
   1b014:	cmp	r1, #0
   1b018:	moveq	r4, #4
   1b01c:	beq	1afb0 <__assert_fail@plt+0x9bcc>
   1b020:	mov	r0, r3
   1b024:	bl	112a0 <strchr@plt>
   1b028:	cmp	r0, #0
   1b02c:	moveq	r4, #4
   1b030:	beq	1afb0 <__assert_fail@plt+0x9bcc>
   1b034:	mov	r2, #1
   1b038:	mov	r3, #0
   1b03c:	strd	r2, [sp]
   1b040:	mov	r4, #0
   1b044:	b	1b058 <__assert_fail@plt+0x9c74>
   1b048:	mov	r4, #0
   1b04c:	ldr	r3, [sp, #48]	; 0x30
   1b050:	cmp	r3, #0
   1b054:	beq	1b148 <__assert_fail@plt+0x9d64>
   1b058:	ldrb	r5, [r7]
   1b05c:	cmp	r5, #0
   1b060:	beq	1b2e0 <__assert_fail@plt+0x9efc>
   1b064:	mov	r1, r5
   1b068:	ldr	r0, [sp, #48]	; 0x30
   1b06c:	bl	112a0 <strchr@plt>
   1b070:	cmp	r0, #0
   1b074:	beq	1b150 <__assert_fail@plt+0x9d6c>
   1b078:	sub	r3, r5, #69	; 0x45
   1b07c:	cmp	r3, #47	; 0x2f
   1b080:	ldrls	pc, [pc, r3, lsl #2]
   1b084:	b	1b1bc <__assert_fail@plt+0x9dd8>
   1b088:	andeq	fp, r1, r0, ror #2
   1b08c:			; <UNDEFINED> instruction: 0x0001b1bc
   1b090:	andeq	fp, r1, r0, ror #2
   1b094:			; <UNDEFINED> instruction: 0x0001b1bc
   1b098:			; <UNDEFINED> instruction: 0x0001b1bc
   1b09c:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0a0:	andeq	fp, r1, r0, ror #2
   1b0a4:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0a8:	andeq	fp, r1, r0, ror #2
   1b0ac:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0b0:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0b4:	andeq	fp, r1, r0, ror #2
   1b0b8:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0bc:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0c0:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0c4:	andeq	fp, r1, r0, ror #2
   1b0c8:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0cc:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0d0:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0d4:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0d8:	andeq	fp, r1, r0, ror #2
   1b0dc:	andeq	fp, r1, r0, ror #2
   1b0e0:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0e4:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0e8:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0ec:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0f0:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0f4:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0f8:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0fc:			; <UNDEFINED> instruction: 0x0001b1bc
   1b100:			; <UNDEFINED> instruction: 0x0001b1bc
   1b104:			; <UNDEFINED> instruction: 0x0001b1bc
   1b108:			; <UNDEFINED> instruction: 0x0001b1bc
   1b10c:			; <UNDEFINED> instruction: 0x0001b1bc
   1b110:	andeq	fp, r1, r0, ror #2
   1b114:			; <UNDEFINED> instruction: 0x0001b1bc
   1b118:			; <UNDEFINED> instruction: 0x0001b1bc
   1b11c:			; <UNDEFINED> instruction: 0x0001b1bc
   1b120:	andeq	fp, r1, r0, ror #2
   1b124:			; <UNDEFINED> instruction: 0x0001b1bc
   1b128:	andeq	fp, r1, r0, ror #2
   1b12c:			; <UNDEFINED> instruction: 0x0001b1bc
   1b130:			; <UNDEFINED> instruction: 0x0001b1bc
   1b134:			; <UNDEFINED> instruction: 0x0001b1bc
   1b138:			; <UNDEFINED> instruction: 0x0001b1bc
   1b13c:			; <UNDEFINED> instruction: 0x0001b1bc
   1b140:			; <UNDEFINED> instruction: 0x0001b1bc
   1b144:	andeq	fp, r1, r0, ror #2
   1b148:	strd	r0, [r9]
   1b14c:	b	1afb0 <__assert_fail@plt+0x9bcc>
   1b150:	ldrd	r2, [sp]
   1b154:	strd	r2, [r9]
   1b158:	orr	r4, r4, #2
   1b15c:	b	1afb0 <__assert_fail@plt+0x9bcc>
   1b160:	mov	r1, #48	; 0x30
   1b164:	ldr	r0, [sp, #48]	; 0x30
   1b168:	bl	112a0 <strchr@plt>
   1b16c:	cmp	r0, #0
   1b170:	beq	1b2ac <__assert_fail@plt+0x9ec8>
   1b174:	ldrb	r3, [r7, #1]
   1b178:	cmp	r3, #68	; 0x44
   1b17c:	beq	1b198 <__assert_fail@plt+0x9db4>
   1b180:	cmp	r3, #105	; 0x69
   1b184:	beq	1b1a4 <__assert_fail@plt+0x9dc0>
   1b188:	cmp	r3, #66	; 0x42
   1b18c:	movne	r7, #1
   1b190:	movne	r1, #1024	; 0x400
   1b194:	bne	1b1c4 <__assert_fail@plt+0x9de0>
   1b198:	mov	r7, #2
   1b19c:	mov	r1, #1000	; 0x3e8
   1b1a0:	b	1b1c4 <__assert_fail@plt+0x9de0>
   1b1a4:	ldrb	r7, [r7, #2]
   1b1a8:	cmp	r7, #66	; 0x42
   1b1ac:	movne	r7, #1
   1b1b0:	moveq	r7, #3
   1b1b4:	mov	r1, #1024	; 0x400
   1b1b8:	b	1b1c4 <__assert_fail@plt+0x9de0>
   1b1bc:	mov	r7, #1
   1b1c0:	mov	r1, #1024	; 0x400
   1b1c4:	sub	r5, r5, #66	; 0x42
   1b1c8:	cmp	r5, #53	; 0x35
   1b1cc:	ldrls	pc, [pc, r5, lsl #2]
   1b1d0:	b	1b38c <__assert_fail@plt+0x9fa8>
   1b1d4:	andeq	fp, r1, ip, ror #5
   1b1d8:	andeq	fp, r1, ip, lsl #7
   1b1dc:	andeq	fp, r1, ip, lsl #7
   1b1e0:	strdeq	fp, [r1], -ip
   1b1e4:	andeq	fp, r1, ip, lsl #7
   1b1e8:	andeq	fp, r1, ip, lsl #6
   1b1ec:	andeq	fp, r1, ip, lsl #7
   1b1f0:	andeq	fp, r1, ip, lsl #7
   1b1f4:	andeq	fp, r1, ip, lsl #7
   1b1f8:	andeq	fp, r1, ip, lsl r3
   1b1fc:	andeq	fp, r1, ip, lsl #7
   1b200:	andeq	fp, r1, ip, lsr #6
   1b204:	andeq	fp, r1, ip, lsl #7
   1b208:	andeq	fp, r1, ip, lsl #7
   1b20c:	andeq	fp, r1, ip, lsr r3
   1b210:	andeq	fp, r1, ip, lsl #7
   1b214:	andeq	fp, r1, ip, lsl #7
   1b218:	andeq	fp, r1, ip, lsl #7
   1b21c:	andeq	fp, r1, ip, asr #6
   1b220:	andeq	fp, r1, ip, lsl #7
   1b224:	andeq	fp, r1, ip, lsl #7
   1b228:	andeq	fp, r1, ip, lsl #7
   1b22c:	andeq	fp, r1, ip, lsl #7
   1b230:	andeq	fp, r1, ip, ror #6
   1b234:	andeq	fp, r1, ip, ror r3
   1b238:	andeq	fp, r1, ip, lsl #7
   1b23c:	andeq	fp, r1, ip, lsl #7
   1b240:	andeq	fp, r1, ip, lsl #7
   1b244:	andeq	fp, r1, ip, lsl #7
   1b248:	andeq	fp, r1, ip, lsl #7
   1b24c:	andeq	fp, r1, ip, lsl #7
   1b250:	andeq	fp, r1, ip, lsl #7
   1b254:			; <UNDEFINED> instruction: 0x0001b2b8
   1b258:	muleq	r1, ip, r3
   1b25c:	andeq	fp, r1, ip, lsl #7
   1b260:	andeq	fp, r1, ip, lsl #7
   1b264:	andeq	fp, r1, ip, lsl #7
   1b268:	andeq	fp, r1, ip, lsl #6
   1b26c:	andeq	fp, r1, ip, lsl #7
   1b270:	andeq	fp, r1, ip, lsl #7
   1b274:	andeq	fp, r1, ip, lsl #7
   1b278:	andeq	fp, r1, ip, lsl r3
   1b27c:	andeq	fp, r1, ip, lsl #7
   1b280:	andeq	fp, r1, ip, lsr #6
   1b284:	andeq	fp, r1, ip, lsl #7
   1b288:	andeq	fp, r1, ip, lsl #7
   1b28c:	andeq	fp, r1, ip, lsl #7
   1b290:	andeq	fp, r1, ip, lsl #7
   1b294:	andeq	fp, r1, ip, lsl #7
   1b298:	andeq	fp, r1, ip, lsl #7
   1b29c:	andeq	fp, r1, ip, asr #6
   1b2a0:	andeq	fp, r1, ip, lsl #7
   1b2a4:	andeq	fp, r1, ip, lsl #7
   1b2a8:	andeq	fp, r1, ip, asr r3
   1b2ac:	mov	r7, #1
   1b2b0:	mov	r1, #1024	; 0x400
   1b2b4:	b	1b1c4 <__assert_fail@plt+0x9de0>
   1b2b8:	mov	r1, #512	; 0x200
   1b2bc:	mov	r0, sp
   1b2c0:	bl	1ae48 <__assert_fail@plt+0x9a64>
   1b2c4:	orr	r4, r4, r0
   1b2c8:	ldr	r3, [r6]
   1b2cc:	add	r2, r3, r7
   1b2d0:	str	r2, [r6]
   1b2d4:	ldrb	r3, [r3, r7]
   1b2d8:	cmp	r3, #0
   1b2dc:	orrne	r4, r4, #2
   1b2e0:	ldrd	r2, [sp]
   1b2e4:	strd	r2, [r9]
   1b2e8:	b	1afb0 <__assert_fail@plt+0x9bcc>
   1b2ec:	mov	r1, #1024	; 0x400
   1b2f0:	mov	r0, sp
   1b2f4:	bl	1ae48 <__assert_fail@plt+0x9a64>
   1b2f8:	b	1b2c4 <__assert_fail@plt+0x9ee0>
   1b2fc:	mov	r2, #6
   1b300:	mov	r0, sp
   1b304:	bl	1aef0 <__assert_fail@plt+0x9b0c>
   1b308:	b	1b2c4 <__assert_fail@plt+0x9ee0>
   1b30c:	mov	r2, #3
   1b310:	mov	r0, sp
   1b314:	bl	1aef0 <__assert_fail@plt+0x9b0c>
   1b318:	b	1b2c4 <__assert_fail@plt+0x9ee0>
   1b31c:	mov	r2, #1
   1b320:	mov	r0, sp
   1b324:	bl	1aef0 <__assert_fail@plt+0x9b0c>
   1b328:	b	1b2c4 <__assert_fail@plt+0x9ee0>
   1b32c:	mov	r2, #2
   1b330:	mov	r0, sp
   1b334:	bl	1aef0 <__assert_fail@plt+0x9b0c>
   1b338:	b	1b2c4 <__assert_fail@plt+0x9ee0>
   1b33c:	mov	r2, #5
   1b340:	mov	r0, sp
   1b344:	bl	1aef0 <__assert_fail@plt+0x9b0c>
   1b348:	b	1b2c4 <__assert_fail@plt+0x9ee0>
   1b34c:	mov	r2, #4
   1b350:	mov	r0, sp
   1b354:	bl	1aef0 <__assert_fail@plt+0x9b0c>
   1b358:	b	1b2c4 <__assert_fail@plt+0x9ee0>
   1b35c:	mov	r1, #2
   1b360:	mov	r0, sp
   1b364:	bl	1ae48 <__assert_fail@plt+0x9a64>
   1b368:	b	1b2c4 <__assert_fail@plt+0x9ee0>
   1b36c:	mov	r2, #8
   1b370:	mov	r0, sp
   1b374:	bl	1aef0 <__assert_fail@plt+0x9b0c>
   1b378:	b	1b2c4 <__assert_fail@plt+0x9ee0>
   1b37c:	mov	r2, #7
   1b380:	mov	r0, sp
   1b384:	bl	1aef0 <__assert_fail@plt+0x9b0c>
   1b388:	b	1b2c4 <__assert_fail@plt+0x9ee0>
   1b38c:	ldrd	r2, [sp]
   1b390:	strd	r2, [r9]
   1b394:	orr	r4, r4, #2
   1b398:	b	1afb0 <__assert_fail@plt+0x9bcc>
   1b39c:	mov	r0, #0
   1b3a0:	b	1b2c4 <__assert_fail@plt+0x9ee0>
   1b3a4:	andeq	sp, r1, ip, asr ip
   1b3a8:			; <UNDEFINED> instruction: 0x0001dbb4
   1b3ac:	andeq	sp, r1, r4, asr #23
   1b3b0:	push	{r4, lr}
   1b3b4:	mov	r2, r0
   1b3b8:	mov	r3, r1
   1b3bc:	cmp	r1, #0
   1b3c0:	cmpne	r0, #0
   1b3c4:	moveq	r3, #1
   1b3c8:	moveq	r2, r3
   1b3cc:	umull	r0, r1, r2, r3
   1b3d0:	cmp	r0, #0
   1b3d4:	cmpge	r1, #0
   1b3d8:	bne	1b3ec <__assert_fail@plt+0xa008>
   1b3dc:	mov	r1, r3
   1b3e0:	mov	r0, r2
   1b3e4:	bl	11090 <calloc@plt>
   1b3e8:	pop	{r4, pc}
   1b3ec:	bl	112c4 <__errno_location@plt>
   1b3f0:	mov	r3, #12
   1b3f4:	str	r3, [r0]
   1b3f8:	mov	r0, #0
   1b3fc:	pop	{r4, pc}
   1b400:	push	{r4, lr}
   1b404:	cmp	r0, #0
   1b408:	moveq	r0, #1
   1b40c:	cmp	r0, #0
   1b410:	blt	1b41c <__assert_fail@plt+0xa038>
   1b414:	bl	1121c <malloc@plt>
   1b418:	pop	{r4, pc}
   1b41c:	bl	112c4 <__errno_location@plt>
   1b420:	mov	r3, #12
   1b424:	str	r3, [r0]
   1b428:	mov	r0, #0
   1b42c:	pop	{r4, pc}
   1b430:	push	{r4, lr}
   1b434:	cmp	r0, #0
   1b438:	beq	1b454 <__assert_fail@plt+0xa070>
   1b43c:	cmp	r1, #0
   1b440:	beq	1b460 <__assert_fail@plt+0xa07c>
   1b444:	cmp	r1, #0
   1b448:	blt	1b46c <__assert_fail@plt+0xa088>
   1b44c:	bl	11174 <realloc@plt>
   1b450:	pop	{r4, pc}
   1b454:	mov	r0, r1
   1b458:	bl	1b400 <__assert_fail@plt+0xa01c>
   1b45c:	pop	{r4, pc}
   1b460:	bl	15598 <__assert_fail@plt+0x41b4>
   1b464:	mov	r0, #0
   1b468:	pop	{r4, pc}
   1b46c:	bl	112c4 <__errno_location@plt>
   1b470:	mov	r3, #12
   1b474:	str	r3, [r0]
   1b478:	mov	r0, #0
   1b47c:	pop	{r4, pc}
   1b480:	push	{r4, r5, r6, lr}
   1b484:	mov	r5, r0
   1b488:	bl	111ec <__fpending@plt>
   1b48c:	mov	r6, r0
   1b490:	ldr	r4, [r5]
   1b494:	and	r4, r4, #32
   1b498:	mov	r0, r5
   1b49c:	bl	153f0 <__assert_fail@plt+0x400c>
   1b4a0:	cmp	r4, #0
   1b4a4:	bne	1b4cc <__assert_fail@plt+0xa0e8>
   1b4a8:	cmp	r0, #0
   1b4ac:	popeq	{r4, r5, r6, pc}
   1b4b0:	cmp	r6, #0
   1b4b4:	bne	1b4e8 <__assert_fail@plt+0xa104>
   1b4b8:	bl	112c4 <__errno_location@plt>
   1b4bc:	ldr	r0, [r0]
   1b4c0:	subs	r0, r0, #9
   1b4c4:	mvnne	r0, #0
   1b4c8:	pop	{r4, r5, r6, pc}
   1b4cc:	cmp	r0, #0
   1b4d0:	bne	1b4f0 <__assert_fail@plt+0xa10c>
   1b4d4:	bl	112c4 <__errno_location@plt>
   1b4d8:	mov	r3, #0
   1b4dc:	str	r3, [r0]
   1b4e0:	mvn	r0, #0
   1b4e4:	pop	{r4, r5, r6, pc}
   1b4e8:	mvn	r0, #0
   1b4ec:	pop	{r4, r5, r6, pc}
   1b4f0:	mvn	r0, #0
   1b4f4:	pop	{r4, r5, r6, pc}
   1b4f8:	push	{r1, r2, r3}
   1b4fc:	push	{r4, r5, r6, lr}
   1b500:	sub	sp, sp, #12
   1b504:	mov	r5, r0
   1b508:	ldr	r1, [sp, #28]
   1b50c:	add	r3, sp, #32
   1b510:	str	r3, [sp, #4]
   1b514:	cmp	r1, #0
   1b518:	beq	1b560 <__assert_fail@plt+0xa17c>
   1b51c:	ldr	r3, [pc, #540]	; 1b740 <__assert_fail@plt+0xa35c>
   1b520:	cmp	r1, r3
   1b524:	beq	1b590 <__assert_fail@plt+0xa1ac>
   1b528:	cmp	r1, #11
   1b52c:	beq	1b730 <__assert_fail@plt+0xa34c>
   1b530:	bgt	1b6bc <__assert_fail@plt+0xa2d8>
   1b534:	cmp	r1, #3
   1b538:	beq	1b730 <__assert_fail@plt+0xa34c>
   1b53c:	ble	1b67c <__assert_fail@plt+0xa298>
   1b540:	cmp	r1, #8
   1b544:	beq	1b69c <__assert_fail@plt+0xa2b8>
   1b548:	ble	1b694 <__assert_fail@plt+0xa2b0>
   1b54c:	cmp	r1, #9
   1b550:	beq	1b730 <__assert_fail@plt+0xa34c>
   1b554:	cmp	r1, #10
   1b558:	bne	1b6f4 <__assert_fail@plt+0xa310>
   1b55c:	b	1b69c <__assert_fail@plt+0xa2b8>
   1b560:	ldr	r3, [sp, #4]
   1b564:	add	r2, r3, #4
   1b568:	str	r2, [sp, #4]
   1b56c:	ldr	r2, [r3]
   1b570:	mov	r1, #0
   1b574:	bl	11330 <fcntl64@plt>
   1b578:	mov	r4, r0
   1b57c:	mov	r0, r4
   1b580:	add	sp, sp, #12
   1b584:	pop	{r4, r5, r6, lr}
   1b588:	add	sp, sp, #12
   1b58c:	bx	lr
   1b590:	ldr	r3, [sp, #4]
   1b594:	add	r2, r3, #4
   1b598:	str	r2, [sp, #4]
   1b59c:	ldr	r6, [r3]
   1b5a0:	ldr	r3, [pc, #412]	; 1b744 <__assert_fail@plt+0xa360>
   1b5a4:	ldr	r3, [r3]
   1b5a8:	cmp	r3, #0
   1b5ac:	blt	1b60c <__assert_fail@plt+0xa228>
   1b5b0:	mov	r2, r6
   1b5b4:	ldr	r1, [pc, #388]	; 1b740 <__assert_fail@plt+0xa35c>
   1b5b8:	bl	11330 <fcntl64@plt>
   1b5bc:	subs	r4, r0, #0
   1b5c0:	blt	1b5d4 <__assert_fail@plt+0xa1f0>
   1b5c4:	mov	r2, #1
   1b5c8:	ldr	r3, [pc, #372]	; 1b744 <__assert_fail@plt+0xa360>
   1b5cc:	str	r2, [r3]
   1b5d0:	b	1b57c <__assert_fail@plt+0xa198>
   1b5d4:	bl	112c4 <__errno_location@plt>
   1b5d8:	ldr	r3, [r0]
   1b5dc:	cmp	r3, #22
   1b5e0:	bne	1b5c4 <__assert_fail@plt+0xa1e0>
   1b5e4:	mov	r2, r6
   1b5e8:	mov	r1, #0
   1b5ec:	mov	r0, r5
   1b5f0:	bl	11330 <fcntl64@plt>
   1b5f4:	subs	r4, r0, #0
   1b5f8:	blt	1b57c <__assert_fail@plt+0xa198>
   1b5fc:	mvn	r2, #0
   1b600:	ldr	r3, [pc, #316]	; 1b744 <__assert_fail@plt+0xa360>
   1b604:	str	r2, [r3]
   1b608:	b	1b630 <__assert_fail@plt+0xa24c>
   1b60c:	mov	r2, r6
   1b610:	mov	r1, #0
   1b614:	bl	11330 <fcntl64@plt>
   1b618:	subs	r4, r0, #0
   1b61c:	blt	1b57c <__assert_fail@plt+0xa198>
   1b620:	ldr	r3, [pc, #284]	; 1b744 <__assert_fail@plt+0xa360>
   1b624:	ldr	r3, [r3]
   1b628:	cmn	r3, #1
   1b62c:	bne	1b57c <__assert_fail@plt+0xa198>
   1b630:	mov	r1, #1
   1b634:	mov	r0, r4
   1b638:	bl	11330 <fcntl64@plt>
   1b63c:	subs	r2, r0, #0
   1b640:	blt	1b65c <__assert_fail@plt+0xa278>
   1b644:	orr	r2, r2, #1
   1b648:	mov	r1, #2
   1b64c:	mov	r0, r4
   1b650:	bl	11330 <fcntl64@plt>
   1b654:	cmn	r0, #1
   1b658:	bne	1b57c <__assert_fail@plt+0xa198>
   1b65c:	bl	112c4 <__errno_location@plt>
   1b660:	mov	r5, r0
   1b664:	ldr	r6, [r0]
   1b668:	mov	r0, r4
   1b66c:	bl	113d8 <close@plt>
   1b670:	str	r6, [r5]
   1b674:	mvn	r4, #0
   1b678:	b	1b57c <__assert_fail@plt+0xa198>
   1b67c:	cmp	r1, #1
   1b680:	beq	1b730 <__assert_fail@plt+0xa34c>
   1b684:	bgt	1b69c <__assert_fail@plt+0xa2b8>
   1b688:	cmp	r1, #0
   1b68c:	bne	1b6f4 <__assert_fail@plt+0xa310>
   1b690:	b	1b69c <__assert_fail@plt+0xa2b8>
   1b694:	cmp	r1, #4
   1b698:	bne	1b6f4 <__assert_fail@plt+0xa310>
   1b69c:	ldr	r3, [sp, #4]
   1b6a0:	add	r2, r3, #4
   1b6a4:	str	r2, [sp, #4]
   1b6a8:	ldr	r2, [r3]
   1b6ac:	mov	r0, r5
   1b6b0:	bl	11330 <fcntl64@plt>
   1b6b4:	mov	r4, r0
   1b6b8:	b	1b57c <__assert_fail@plt+0xa198>
   1b6bc:	ldr	r3, [pc, #132]	; 1b748 <__assert_fail@plt+0xa364>
   1b6c0:	cmp	r1, r3
   1b6c4:	bgt	1b714 <__assert_fail@plt+0xa330>
   1b6c8:	sub	r3, r3, #1
   1b6cc:	cmp	r1, r3
   1b6d0:	bge	1b69c <__assert_fail@plt+0xa2b8>
   1b6d4:	sub	r3, r3, #5
   1b6d8:	cmp	r1, r3
   1b6dc:	beq	1b730 <__assert_fail@plt+0xa34c>
   1b6e0:	add	r3, r3, #1
   1b6e4:	cmp	r1, r3
   1b6e8:	beq	1b69c <__assert_fail@plt+0xa2b8>
   1b6ec:	cmp	r1, #1024	; 0x400
   1b6f0:	beq	1b69c <__assert_fail@plt+0xa2b8>
   1b6f4:	ldr	r3, [sp, #4]
   1b6f8:	add	r2, r3, #4
   1b6fc:	str	r2, [sp, #4]
   1b700:	ldr	r2, [r3]
   1b704:	mov	r0, r5
   1b708:	bl	11330 <fcntl64@plt>
   1b70c:	mov	r4, r0
   1b710:	b	1b57c <__assert_fail@plt+0xa198>
   1b714:	ldr	r3, [pc, #48]	; 1b74c <__assert_fail@plt+0xa368>
   1b718:	cmp	r1, r3
   1b71c:	beq	1b69c <__assert_fail@plt+0xa2b8>
   1b720:	blt	1b730 <__assert_fail@plt+0xa34c>
   1b724:	add	r3, r3, #1
   1b728:	cmp	r1, r3
   1b72c:	bne	1b6f4 <__assert_fail@plt+0xa310>
   1b730:	mov	r0, r5
   1b734:	bl	11330 <fcntl64@plt>
   1b738:	mov	r4, r0
   1b73c:	b	1b57c <__assert_fail@plt+0xa198>
   1b740:	andeq	r0, r0, r6, lsl #8
   1b744:	andeq	lr, r2, r4, ror #7
   1b748:	andeq	r0, r0, r7, lsl #8
   1b74c:	andeq	r0, r0, r9, lsl #8
   1b750:	push	{r4, lr}
   1b754:	mov	r0, #14
   1b758:	bl	1136c <nl_langinfo@plt>
   1b75c:	cmp	r0, #0
   1b760:	beq	1b778 <__assert_fail@plt+0xa394>
   1b764:	ldrb	r2, [r0]
   1b768:	ldr	r3, [pc, #16]	; 1b780 <__assert_fail@plt+0xa39c>
   1b76c:	cmp	r2, #0
   1b770:	moveq	r0, r3
   1b774:	pop	{r4, pc}
   1b778:	ldr	r0, [pc]	; 1b780 <__assert_fail@plt+0xa39c>
   1b77c:	pop	{r4, pc}
   1b780:	andeq	sp, r1, r8, ror #24
   1b784:	push	{r4, r5, r6, r7, lr}
   1b788:	sub	sp, sp, #12
   1b78c:	mov	r7, r1
   1b790:	mov	r5, r2
   1b794:	subs	r6, r0, #0
   1b798:	addeq	r6, sp, #4
   1b79c:	mov	r0, r6
   1b7a0:	bl	111f8 <mbrtowc@plt>
   1b7a4:	mov	r4, r0
   1b7a8:	cmp	r5, #0
   1b7ac:	cmnne	r0, #3
   1b7b0:	bhi	1b7c0 <__assert_fail@plt+0xa3dc>
   1b7b4:	mov	r0, r4
   1b7b8:	add	sp, sp, #12
   1b7bc:	pop	{r4, r5, r6, r7, pc}
   1b7c0:	mov	r0, #0
   1b7c4:	bl	156d4 <__assert_fail@plt+0x42f0>
   1b7c8:	cmp	r0, #0
   1b7cc:	ldrbeq	r3, [r7]
   1b7d0:	streq	r3, [r6]
   1b7d4:	moveq	r4, #1
   1b7d8:	b	1b7b4 <__assert_fail@plt+0xa3d0>
   1b7dc:	push	{r4, r5, r6, lr}
   1b7e0:	mov	r6, r0
   1b7e4:	mov	r5, r1
   1b7e8:	subs	r4, r2, #0
   1b7ec:	beq	1b818 <__assert_fail@plt+0xa434>
   1b7f0:	mov	r1, r4
   1b7f4:	mvn	r0, #0
   1b7f8:	bl	1b828 <__assert_fail@plt+0xa444>
   1b7fc:	cmp	r0, r5
   1b800:	bcs	1b818 <__assert_fail@plt+0xa434>
   1b804:	bl	112c4 <__errno_location@plt>
   1b808:	mov	r3, #12
   1b80c:	str	r3, [r0]
   1b810:	mov	r0, #0
   1b814:	pop	{r4, r5, r6, pc}
   1b818:	mul	r1, r5, r4
   1b81c:	mov	r0, r6
   1b820:	bl	1b430 <__assert_fail@plt+0xa04c>
   1b824:	pop	{r4, r5, r6, pc}
   1b828:	subs	r2, r1, #1
   1b82c:	bxeq	lr
   1b830:	bcc	1ba08 <__assert_fail@plt+0xa624>
   1b834:	cmp	r0, r1
   1b838:	bls	1b9ec <__assert_fail@plt+0xa608>
   1b83c:	tst	r1, r2
   1b840:	beq	1b9f8 <__assert_fail@plt+0xa614>
   1b844:	clz	r3, r0
   1b848:	clz	r2, r1
   1b84c:	sub	r3, r2, r3
   1b850:	rsbs	r3, r3, #31
   1b854:	addne	r3, r3, r3, lsl #1
   1b858:	mov	r2, #0
   1b85c:	addne	pc, pc, r3, lsl #2
   1b860:	nop			; (mov r0, r0)
   1b864:	cmp	r0, r1, lsl #31
   1b868:	adc	r2, r2, r2
   1b86c:	subcs	r0, r0, r1, lsl #31
   1b870:	cmp	r0, r1, lsl #30
   1b874:	adc	r2, r2, r2
   1b878:	subcs	r0, r0, r1, lsl #30
   1b87c:	cmp	r0, r1, lsl #29
   1b880:	adc	r2, r2, r2
   1b884:	subcs	r0, r0, r1, lsl #29
   1b888:	cmp	r0, r1, lsl #28
   1b88c:	adc	r2, r2, r2
   1b890:	subcs	r0, r0, r1, lsl #28
   1b894:	cmp	r0, r1, lsl #27
   1b898:	adc	r2, r2, r2
   1b89c:	subcs	r0, r0, r1, lsl #27
   1b8a0:	cmp	r0, r1, lsl #26
   1b8a4:	adc	r2, r2, r2
   1b8a8:	subcs	r0, r0, r1, lsl #26
   1b8ac:	cmp	r0, r1, lsl #25
   1b8b0:	adc	r2, r2, r2
   1b8b4:	subcs	r0, r0, r1, lsl #25
   1b8b8:	cmp	r0, r1, lsl #24
   1b8bc:	adc	r2, r2, r2
   1b8c0:	subcs	r0, r0, r1, lsl #24
   1b8c4:	cmp	r0, r1, lsl #23
   1b8c8:	adc	r2, r2, r2
   1b8cc:	subcs	r0, r0, r1, lsl #23
   1b8d0:	cmp	r0, r1, lsl #22
   1b8d4:	adc	r2, r2, r2
   1b8d8:	subcs	r0, r0, r1, lsl #22
   1b8dc:	cmp	r0, r1, lsl #21
   1b8e0:	adc	r2, r2, r2
   1b8e4:	subcs	r0, r0, r1, lsl #21
   1b8e8:	cmp	r0, r1, lsl #20
   1b8ec:	adc	r2, r2, r2
   1b8f0:	subcs	r0, r0, r1, lsl #20
   1b8f4:	cmp	r0, r1, lsl #19
   1b8f8:	adc	r2, r2, r2
   1b8fc:	subcs	r0, r0, r1, lsl #19
   1b900:	cmp	r0, r1, lsl #18
   1b904:	adc	r2, r2, r2
   1b908:	subcs	r0, r0, r1, lsl #18
   1b90c:	cmp	r0, r1, lsl #17
   1b910:	adc	r2, r2, r2
   1b914:	subcs	r0, r0, r1, lsl #17
   1b918:	cmp	r0, r1, lsl #16
   1b91c:	adc	r2, r2, r2
   1b920:	subcs	r0, r0, r1, lsl #16
   1b924:	cmp	r0, r1, lsl #15
   1b928:	adc	r2, r2, r2
   1b92c:	subcs	r0, r0, r1, lsl #15
   1b930:	cmp	r0, r1, lsl #14
   1b934:	adc	r2, r2, r2
   1b938:	subcs	r0, r0, r1, lsl #14
   1b93c:	cmp	r0, r1, lsl #13
   1b940:	adc	r2, r2, r2
   1b944:	subcs	r0, r0, r1, lsl #13
   1b948:	cmp	r0, r1, lsl #12
   1b94c:	adc	r2, r2, r2
   1b950:	subcs	r0, r0, r1, lsl #12
   1b954:	cmp	r0, r1, lsl #11
   1b958:	adc	r2, r2, r2
   1b95c:	subcs	r0, r0, r1, lsl #11
   1b960:	cmp	r0, r1, lsl #10
   1b964:	adc	r2, r2, r2
   1b968:	subcs	r0, r0, r1, lsl #10
   1b96c:	cmp	r0, r1, lsl #9
   1b970:	adc	r2, r2, r2
   1b974:	subcs	r0, r0, r1, lsl #9
   1b978:	cmp	r0, r1, lsl #8
   1b97c:	adc	r2, r2, r2
   1b980:	subcs	r0, r0, r1, lsl #8
   1b984:	cmp	r0, r1, lsl #7
   1b988:	adc	r2, r2, r2
   1b98c:	subcs	r0, r0, r1, lsl #7
   1b990:	cmp	r0, r1, lsl #6
   1b994:	adc	r2, r2, r2
   1b998:	subcs	r0, r0, r1, lsl #6
   1b99c:	cmp	r0, r1, lsl #5
   1b9a0:	adc	r2, r2, r2
   1b9a4:	subcs	r0, r0, r1, lsl #5
   1b9a8:	cmp	r0, r1, lsl #4
   1b9ac:	adc	r2, r2, r2
   1b9b0:	subcs	r0, r0, r1, lsl #4
   1b9b4:	cmp	r0, r1, lsl #3
   1b9b8:	adc	r2, r2, r2
   1b9bc:	subcs	r0, r0, r1, lsl #3
   1b9c0:	cmp	r0, r1, lsl #2
   1b9c4:	adc	r2, r2, r2
   1b9c8:	subcs	r0, r0, r1, lsl #2
   1b9cc:	cmp	r0, r1, lsl #1
   1b9d0:	adc	r2, r2, r2
   1b9d4:	subcs	r0, r0, r1, lsl #1
   1b9d8:	cmp	r0, r1
   1b9dc:	adc	r2, r2, r2
   1b9e0:	subcs	r0, r0, r1
   1b9e4:	mov	r0, r2
   1b9e8:	bx	lr
   1b9ec:	moveq	r0, #1
   1b9f0:	movne	r0, #0
   1b9f4:	bx	lr
   1b9f8:	clz	r2, r1
   1b9fc:	rsb	r2, r2, #31
   1ba00:	lsr	r0, r0, r2
   1ba04:	bx	lr
   1ba08:	cmp	r0, #0
   1ba0c:	mvnne	r0, #0
   1ba10:	b	1bd84 <__assert_fail@plt+0xa9a0>
   1ba14:	cmp	r1, #0
   1ba18:	beq	1ba08 <__assert_fail@plt+0xa624>
   1ba1c:	push	{r0, r1, lr}
   1ba20:	bl	1b828 <__assert_fail@plt+0xa444>
   1ba24:	pop	{r1, r2, lr}
   1ba28:	mul	r3, r2, r0
   1ba2c:	sub	r1, r1, r3
   1ba30:	bx	lr
   1ba34:	cmp	r1, #0
   1ba38:	beq	1bc44 <__assert_fail@plt+0xa860>
   1ba3c:	eor	ip, r0, r1
   1ba40:	rsbmi	r1, r1, #0
   1ba44:	subs	r2, r1, #1
   1ba48:	beq	1bc10 <__assert_fail@plt+0xa82c>
   1ba4c:	movs	r3, r0
   1ba50:	rsbmi	r3, r0, #0
   1ba54:	cmp	r3, r1
   1ba58:	bls	1bc1c <__assert_fail@plt+0xa838>
   1ba5c:	tst	r1, r2
   1ba60:	beq	1bc2c <__assert_fail@plt+0xa848>
   1ba64:	clz	r2, r3
   1ba68:	clz	r0, r1
   1ba6c:	sub	r2, r0, r2
   1ba70:	rsbs	r2, r2, #31
   1ba74:	addne	r2, r2, r2, lsl #1
   1ba78:	mov	r0, #0
   1ba7c:	addne	pc, pc, r2, lsl #2
   1ba80:	nop			; (mov r0, r0)
   1ba84:	cmp	r3, r1, lsl #31
   1ba88:	adc	r0, r0, r0
   1ba8c:	subcs	r3, r3, r1, lsl #31
   1ba90:	cmp	r3, r1, lsl #30
   1ba94:	adc	r0, r0, r0
   1ba98:	subcs	r3, r3, r1, lsl #30
   1ba9c:	cmp	r3, r1, lsl #29
   1baa0:	adc	r0, r0, r0
   1baa4:	subcs	r3, r3, r1, lsl #29
   1baa8:	cmp	r3, r1, lsl #28
   1baac:	adc	r0, r0, r0
   1bab0:	subcs	r3, r3, r1, lsl #28
   1bab4:	cmp	r3, r1, lsl #27
   1bab8:	adc	r0, r0, r0
   1babc:	subcs	r3, r3, r1, lsl #27
   1bac0:	cmp	r3, r1, lsl #26
   1bac4:	adc	r0, r0, r0
   1bac8:	subcs	r3, r3, r1, lsl #26
   1bacc:	cmp	r3, r1, lsl #25
   1bad0:	adc	r0, r0, r0
   1bad4:	subcs	r3, r3, r1, lsl #25
   1bad8:	cmp	r3, r1, lsl #24
   1badc:	adc	r0, r0, r0
   1bae0:	subcs	r3, r3, r1, lsl #24
   1bae4:	cmp	r3, r1, lsl #23
   1bae8:	adc	r0, r0, r0
   1baec:	subcs	r3, r3, r1, lsl #23
   1baf0:	cmp	r3, r1, lsl #22
   1baf4:	adc	r0, r0, r0
   1baf8:	subcs	r3, r3, r1, lsl #22
   1bafc:	cmp	r3, r1, lsl #21
   1bb00:	adc	r0, r0, r0
   1bb04:	subcs	r3, r3, r1, lsl #21
   1bb08:	cmp	r3, r1, lsl #20
   1bb0c:	adc	r0, r0, r0
   1bb10:	subcs	r3, r3, r1, lsl #20
   1bb14:	cmp	r3, r1, lsl #19
   1bb18:	adc	r0, r0, r0
   1bb1c:	subcs	r3, r3, r1, lsl #19
   1bb20:	cmp	r3, r1, lsl #18
   1bb24:	adc	r0, r0, r0
   1bb28:	subcs	r3, r3, r1, lsl #18
   1bb2c:	cmp	r3, r1, lsl #17
   1bb30:	adc	r0, r0, r0
   1bb34:	subcs	r3, r3, r1, lsl #17
   1bb38:	cmp	r3, r1, lsl #16
   1bb3c:	adc	r0, r0, r0
   1bb40:	subcs	r3, r3, r1, lsl #16
   1bb44:	cmp	r3, r1, lsl #15
   1bb48:	adc	r0, r0, r0
   1bb4c:	subcs	r3, r3, r1, lsl #15
   1bb50:	cmp	r3, r1, lsl #14
   1bb54:	adc	r0, r0, r0
   1bb58:	subcs	r3, r3, r1, lsl #14
   1bb5c:	cmp	r3, r1, lsl #13
   1bb60:	adc	r0, r0, r0
   1bb64:	subcs	r3, r3, r1, lsl #13
   1bb68:	cmp	r3, r1, lsl #12
   1bb6c:	adc	r0, r0, r0
   1bb70:	subcs	r3, r3, r1, lsl #12
   1bb74:	cmp	r3, r1, lsl #11
   1bb78:	adc	r0, r0, r0
   1bb7c:	subcs	r3, r3, r1, lsl #11
   1bb80:	cmp	r3, r1, lsl #10
   1bb84:	adc	r0, r0, r0
   1bb88:	subcs	r3, r3, r1, lsl #10
   1bb8c:	cmp	r3, r1, lsl #9
   1bb90:	adc	r0, r0, r0
   1bb94:	subcs	r3, r3, r1, lsl #9
   1bb98:	cmp	r3, r1, lsl #8
   1bb9c:	adc	r0, r0, r0
   1bba0:	subcs	r3, r3, r1, lsl #8
   1bba4:	cmp	r3, r1, lsl #7
   1bba8:	adc	r0, r0, r0
   1bbac:	subcs	r3, r3, r1, lsl #7
   1bbb0:	cmp	r3, r1, lsl #6
   1bbb4:	adc	r0, r0, r0
   1bbb8:	subcs	r3, r3, r1, lsl #6
   1bbbc:	cmp	r3, r1, lsl #5
   1bbc0:	adc	r0, r0, r0
   1bbc4:	subcs	r3, r3, r1, lsl #5
   1bbc8:	cmp	r3, r1, lsl #4
   1bbcc:	adc	r0, r0, r0
   1bbd0:	subcs	r3, r3, r1, lsl #4
   1bbd4:	cmp	r3, r1, lsl #3
   1bbd8:	adc	r0, r0, r0
   1bbdc:	subcs	r3, r3, r1, lsl #3
   1bbe0:	cmp	r3, r1, lsl #2
   1bbe4:	adc	r0, r0, r0
   1bbe8:	subcs	r3, r3, r1, lsl #2
   1bbec:	cmp	r3, r1, lsl #1
   1bbf0:	adc	r0, r0, r0
   1bbf4:	subcs	r3, r3, r1, lsl #1
   1bbf8:	cmp	r3, r1
   1bbfc:	adc	r0, r0, r0
   1bc00:	subcs	r3, r3, r1
   1bc04:	cmp	ip, #0
   1bc08:	rsbmi	r0, r0, #0
   1bc0c:	bx	lr
   1bc10:	teq	ip, r0
   1bc14:	rsbmi	r0, r0, #0
   1bc18:	bx	lr
   1bc1c:	movcc	r0, #0
   1bc20:	asreq	r0, ip, #31
   1bc24:	orreq	r0, r0, #1
   1bc28:	bx	lr
   1bc2c:	clz	r2, r1
   1bc30:	rsb	r2, r2, #31
   1bc34:	cmp	ip, #0
   1bc38:	lsr	r0, r3, r2
   1bc3c:	rsbmi	r0, r0, #0
   1bc40:	bx	lr
   1bc44:	cmp	r0, #0
   1bc48:	mvngt	r0, #-2147483648	; 0x80000000
   1bc4c:	movlt	r0, #-2147483648	; 0x80000000
   1bc50:	b	1bd84 <__assert_fail@plt+0xa9a0>
   1bc54:	cmp	r1, #0
   1bc58:	beq	1bc44 <__assert_fail@plt+0xa860>
   1bc5c:	push	{r0, r1, lr}
   1bc60:	bl	1ba3c <__assert_fail@plt+0xa658>
   1bc64:	pop	{r1, r2, lr}
   1bc68:	mul	r3, r2, r0
   1bc6c:	sub	r1, r1, r3
   1bc70:	bx	lr
   1bc74:	cmp	r3, #0
   1bc78:	cmpeq	r2, #0
   1bc7c:	bne	1bca0 <__assert_fail@plt+0xa8bc>
   1bc80:	cmp	r1, #0
   1bc84:	movlt	r1, #-2147483648	; 0x80000000
   1bc88:	movlt	r0, #0
   1bc8c:	blt	1bc9c <__assert_fail@plt+0xa8b8>
   1bc90:	cmpeq	r0, #0
   1bc94:	mvnne	r1, #-2147483648	; 0x80000000
   1bc98:	mvnne	r0, #0
   1bc9c:	b	1bd84 <__assert_fail@plt+0xa9a0>
   1bca0:	sub	sp, sp, #8
   1bca4:	push	{sp, lr}
   1bca8:	cmp	r1, #0
   1bcac:	blt	1bccc <__assert_fail@plt+0xa8e8>
   1bcb0:	cmp	r3, #0
   1bcb4:	blt	1bd00 <__assert_fail@plt+0xa91c>
   1bcb8:	bl	1bd94 <__assert_fail@plt+0xa9b0>
   1bcbc:	ldr	lr, [sp, #4]
   1bcc0:	add	sp, sp, #8
   1bcc4:	pop	{r2, r3}
   1bcc8:	bx	lr
   1bccc:	rsbs	r0, r0, #0
   1bcd0:	sbc	r1, r1, r1, lsl #1
   1bcd4:	cmp	r3, #0
   1bcd8:	blt	1bd24 <__assert_fail@plt+0xa940>
   1bcdc:	bl	1bd94 <__assert_fail@plt+0xa9b0>
   1bce0:	ldr	lr, [sp, #4]
   1bce4:	add	sp, sp, #8
   1bce8:	pop	{r2, r3}
   1bcec:	rsbs	r0, r0, #0
   1bcf0:	sbc	r1, r1, r1, lsl #1
   1bcf4:	rsbs	r2, r2, #0
   1bcf8:	sbc	r3, r3, r3, lsl #1
   1bcfc:	bx	lr
   1bd00:	rsbs	r2, r2, #0
   1bd04:	sbc	r3, r3, r3, lsl #1
   1bd08:	bl	1bd94 <__assert_fail@plt+0xa9b0>
   1bd0c:	ldr	lr, [sp, #4]
   1bd10:	add	sp, sp, #8
   1bd14:	pop	{r2, r3}
   1bd18:	rsbs	r0, r0, #0
   1bd1c:	sbc	r1, r1, r1, lsl #1
   1bd20:	bx	lr
   1bd24:	rsbs	r2, r2, #0
   1bd28:	sbc	r3, r3, r3, lsl #1
   1bd2c:	bl	1bd94 <__assert_fail@plt+0xa9b0>
   1bd30:	ldr	lr, [sp, #4]
   1bd34:	add	sp, sp, #8
   1bd38:	pop	{r2, r3}
   1bd3c:	rsbs	r2, r2, #0
   1bd40:	sbc	r3, r3, r3, lsl #1
   1bd44:	bx	lr
   1bd48:	cmp	r3, #0
   1bd4c:	cmpeq	r2, #0
   1bd50:	bne	1bd68 <__assert_fail@plt+0xa984>
   1bd54:	cmp	r1, #0
   1bd58:	cmpeq	r0, #0
   1bd5c:	mvnne	r1, #0
   1bd60:	mvnne	r0, #0
   1bd64:	b	1bd84 <__assert_fail@plt+0xa9a0>
   1bd68:	sub	sp, sp, #8
   1bd6c:	push	{sp, lr}
   1bd70:	bl	1bd94 <__assert_fail@plt+0xa9b0>
   1bd74:	ldr	lr, [sp, #4]
   1bd78:	add	sp, sp, #8
   1bd7c:	pop	{r2, r3}
   1bd80:	bx	lr
   1bd84:	push	{r1, lr}
   1bd88:	mov	r0, #8
   1bd8c:	bl	110a8 <raise@plt>
   1bd90:	pop	{r1, pc}
   1bd94:	cmp	r1, r3
   1bd98:	push	{r4, r5, r6, r7, r8, r9, lr}
   1bd9c:	cmpeq	r0, r2
   1bda0:	mov	r4, r0
   1bda4:	mov	r5, r1
   1bda8:	ldr	r9, [sp, #28]
   1bdac:	movcc	r0, #0
   1bdb0:	movcc	r1, #0
   1bdb4:	bcc	1beac <__assert_fail@plt+0xaac8>
   1bdb8:	cmp	r3, #0
   1bdbc:	clzeq	ip, r2
   1bdc0:	clzne	ip, r3
   1bdc4:	addeq	ip, ip, #32
   1bdc8:	cmp	r5, #0
   1bdcc:	clzeq	r1, r4
   1bdd0:	addeq	r1, r1, #32
   1bdd4:	clzne	r1, r5
   1bdd8:	sub	ip, ip, r1
   1bddc:	sub	lr, ip, #32
   1bde0:	lsl	r7, r3, ip
   1bde4:	rsb	r8, ip, #32
   1bde8:	orr	r7, r7, r2, lsl lr
   1bdec:	orr	r7, r7, r2, lsr r8
   1bdf0:	lsl	r6, r2, ip
   1bdf4:	cmp	r5, r7
   1bdf8:	cmpeq	r4, r6
   1bdfc:	movcc	r0, #0
   1be00:	movcc	r1, #0
   1be04:	bcc	1be20 <__assert_fail@plt+0xaa3c>
   1be08:	mov	r3, #1
   1be0c:	subs	r4, r4, r6
   1be10:	lsl	r1, r3, lr
   1be14:	lsl	r0, r3, ip
   1be18:	orr	r1, r1, r3, lsr r8
   1be1c:	sbc	r5, r5, r7
   1be20:	cmp	ip, #0
   1be24:	beq	1beac <__assert_fail@plt+0xaac8>
   1be28:	lsrs	r3, r7, #1
   1be2c:	rrx	r2, r6
   1be30:	mov	r6, ip
   1be34:	b	1be58 <__assert_fail@plt+0xaa74>
   1be38:	subs	r4, r4, r2
   1be3c:	sbc	r5, r5, r3
   1be40:	adds	r4, r4, r4
   1be44:	adc	r5, r5, r5
   1be48:	adds	r4, r4, #1
   1be4c:	adc	r5, r5, #0
   1be50:	subs	r6, r6, #1
   1be54:	beq	1be74 <__assert_fail@plt+0xaa90>
   1be58:	cmp	r5, r3
   1be5c:	cmpeq	r4, r2
   1be60:	bcs	1be38 <__assert_fail@plt+0xaa54>
   1be64:	adds	r4, r4, r4
   1be68:	adc	r5, r5, r5
   1be6c:	subs	r6, r6, #1
   1be70:	bne	1be58 <__assert_fail@plt+0xaa74>
   1be74:	lsr	r6, r4, ip
   1be78:	lsr	r7, r5, ip
   1be7c:	orr	r6, r6, r5, lsl r8
   1be80:	adds	r2, r0, r4
   1be84:	orr	r6, r6, r5, lsr lr
   1be88:	adc	r3, r1, r5
   1be8c:	lsl	r1, r7, ip
   1be90:	orr	r1, r1, r6, lsl lr
   1be94:	lsl	r0, r6, ip
   1be98:	orr	r1, r1, r6, lsr r8
   1be9c:	subs	r0, r2, r0
   1bea0:	mov	r4, r6
   1bea4:	mov	r5, r7
   1bea8:	sbc	r1, r3, r1
   1beac:	cmp	r9, #0
   1beb0:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1beb4:	strd	r4, [r9]
   1beb8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1bebc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bec0:	mov	r7, r0
   1bec4:	ldr	r6, [pc, #72]	; 1bf14 <__assert_fail@plt+0xab30>
   1bec8:	ldr	r5, [pc, #72]	; 1bf18 <__assert_fail@plt+0xab34>
   1becc:	add	r6, pc, r6
   1bed0:	add	r5, pc, r5
   1bed4:	sub	r6, r6, r5
   1bed8:	mov	r8, r1
   1bedc:	mov	r9, r2
   1bee0:	bl	11064 <fdopen@plt-0x20>
   1bee4:	asrs	r6, r6, #2
   1bee8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1beec:	mov	r4, #0
   1bef0:	add	r4, r4, #1
   1bef4:	ldr	r3, [r5], #4
   1bef8:	mov	r2, r9
   1befc:	mov	r1, r8
   1bf00:	mov	r0, r7
   1bf04:	blx	r3
   1bf08:	cmp	r6, r4
   1bf0c:	bne	1bef0 <__assert_fail@plt+0xab0c>
   1bf10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bf14:	andeq	r2, r1, ip, lsr r0
   1bf18:	andeq	r2, r1, r4, lsr r0
   1bf1c:	bx	lr
   1bf20:	ldr	r3, [pc, #12]	; 1bf34 <__assert_fail@plt+0xab50>
   1bf24:	mov	r1, #0
   1bf28:	add	r3, pc, r3
   1bf2c:	ldr	r2, [r3]
   1bf30:	b	112dc <__cxa_atexit@plt>
   1bf34:	andeq	r2, r1, ip, lsl #4

Disassembly of section .fini:

0001bf38 <.fini>:
   1bf38:	push	{r3, lr}
   1bf3c:	pop	{r3, pc}
