
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf32-littlearm


Disassembly of section .init:

00012350 <.init>:
   12350:	push	{r3, lr}
   12354:	bl	12460 <_start@@Base+0x3c>
   12358:	pop	{r3, pc}

Disassembly of section .plt:

0001235c <strcmp@plt-0x14>:
   1235c:	push	{lr}		; (str lr, [sp, #-4]!)
   12360:	ldr	lr, [pc, #4]	; 1236c <strcmp@plt-0x4>
   12364:	add	lr, pc, lr
   12368:	ldr	pc, [lr, #8]!
   1236c:	muleq	r1, r4, ip

00012370 <strcmp@plt>:
   12370:	add	ip, pc, #0, 12
   12374:	add	ip, ip, #24, 20	; 0x18000
   12378:	ldr	pc, [ip, #3220]!	; 0xc94

0001237c <free@plt>:
   1237c:	add	ip, pc, #0, 12
   12380:	add	ip, ip, #24, 20	; 0x18000
   12384:	ldr	pc, [ip, #3212]!	; 0xc8c

00012388 <memcpy@plt>:
   12388:	add	ip, pc, #0, 12
   1238c:	add	ip, ip, #24, 20	; 0x18000
   12390:	ldr	pc, [ip, #3204]!	; 0xc84

00012394 <memcmp@plt>:
   12394:	add	ip, pc, #0, 12
   12398:	add	ip, ip, #24, 20	; 0x18000
   1239c:	ldr	pc, [ip, #3196]!	; 0xc7c

000123a0 <realloc@plt>:
   123a0:	add	ip, pc, #0, 12
   123a4:	add	ip, ip, #24, 20	; 0x18000
   123a8:	ldr	pc, [ip, #3188]!	; 0xc74

000123ac <puts@plt>:
   123ac:	add	ip, pc, #0, 12
   123b0:	add	ip, ip, #24, 20	; 0x18000
   123b4:	ldr	pc, [ip, #3180]!	; 0xc6c

000123b8 <malloc@plt>:
   123b8:	add	ip, pc, #0, 12
   123bc:	add	ip, ip, #24, 20	; 0x18000
   123c0:	ldr	pc, [ip, #3172]!	; 0xc64

000123c4 <__libc_start_main@plt>:
   123c4:	add	ip, pc, #0, 12
   123c8:	add	ip, ip, #24, 20	; 0x18000
   123cc:	ldr	pc, [ip, #3164]!	; 0xc5c

000123d0 <__gmon_start__@plt>:
   123d0:	add	ip, pc, #0, 12
   123d4:	add	ip, ip, #24, 20	; 0x18000
   123d8:	ldr	pc, [ip, #3156]!	; 0xc54

000123dc <strlen@plt>:
   123dc:	add	ip, pc, #0, 12
   123e0:	add	ip, ip, #24, 20	; 0x18000
   123e4:	ldr	pc, [ip, #3148]!	; 0xc4c

000123e8 <posix_memalign@plt>:
   123e8:	add	ip, pc, #0, 12
   123ec:	add	ip, ip, #24, 20	; 0x18000
   123f0:	ldr	pc, [ip, #3140]!	; 0xc44

000123f4 <memset@plt>:
   123f4:	add	ip, pc, #0, 12
   123f8:	add	ip, ip, #24, 20	; 0x18000
   123fc:	ldr	pc, [ip, #3132]!	; 0xc3c

00012400 <memchr@plt>:
   12400:	add	ip, pc, #0, 12
   12404:	add	ip, ip, #24, 20	; 0x18000
   12408:	ldr	pc, [ip, #3124]!	; 0xc34

0001240c <abort@plt>:
   1240c:	add	ip, pc, #0, 12
   12410:	add	ip, ip, #24, 20	; 0x18000
   12414:	ldr	pc, [ip, #3116]!	; 0xc2c

00012418 <__assert_fail@plt>:
   12418:	add	ip, pc, #0, 12
   1241c:	add	ip, ip, #24, 20	; 0x18000
   12420:	ldr	pc, [ip, #3108]!	; 0xc24

Disassembly of section .text:

00012424 <_start@@Base>:
   12424:	mov	fp, #0
   12428:	mov	lr, #0
   1242c:	pop	{r1}		; (ldr r1, [sp], #4)
   12430:	mov	r2, sp
   12434:	push	{r2}		; (str r2, [sp, #-4]!)
   12438:	push	{r0}		; (str r0, [sp, #-4]!)
   1243c:	ldr	ip, [pc, #16]	; 12454 <_start@@Base+0x30>
   12440:	push	{ip}		; (str ip, [sp, #-4]!)
   12444:	ldr	r0, [pc, #12]	; 12458 <_start@@Base+0x34>
   12448:	ldr	r3, [pc, #12]	; 1245c <_start@@Base+0x38>
   1244c:	bl	123c4 <__libc_start_main@plt>
   12450:	bl	1240c <abort@plt>
   12454:	andeq	r8, r1, ip, lsr #16
   12458:	andeq	r3, r1, r0, ror #7
   1245c:	andeq	r8, r1, ip, asr #15
   12460:	ldr	r3, [pc, #20]	; 1247c <_start@@Base+0x58>
   12464:	ldr	r2, [pc, #20]	; 12480 <_start@@Base+0x5c>
   12468:	add	r3, pc, r3
   1246c:	ldr	r2, [r3, r2]
   12470:	cmp	r2, #0
   12474:	bxeq	lr
   12478:	b	123d0 <__gmon_start__@plt>
   1247c:	muleq	r1, r0, fp
   12480:	andeq	r0, r0, ip, asr #32
   12484:	ldr	r0, [pc, #24]	; 124a4 <_start@@Base+0x80>
   12488:	ldr	r3, [pc, #24]	; 124a8 <_start@@Base+0x84>
   1248c:	cmp	r3, r0
   12490:	bxeq	lr
   12494:	ldr	r3, [pc, #16]	; 124ac <_start@@Base+0x88>
   12498:	cmp	r3, #0
   1249c:	bxeq	lr
   124a0:	bx	r3
   124a4:	andeq	fp, r2, r0, rrx
   124a8:	andeq	fp, r2, r0, rrx
   124ac:	andeq	r0, r0, r0
   124b0:	ldr	r0, [pc, #36]	; 124dc <_start@@Base+0xb8>
   124b4:	ldr	r1, [pc, #36]	; 124e0 <_start@@Base+0xbc>
   124b8:	sub	r1, r1, r0
   124bc:	asr	r1, r1, #2
   124c0:	add	r1, r1, r1, lsr #31
   124c4:	asrs	r1, r1, #1
   124c8:	bxeq	lr
   124cc:	ldr	r3, [pc, #16]	; 124e4 <_start@@Base+0xc0>
   124d0:	cmp	r3, #0
   124d4:	bxeq	lr
   124d8:	bx	r3
   124dc:	andeq	fp, r2, r0, rrx
   124e0:	andeq	fp, r2, r0, rrx
   124e4:	andeq	r0, r0, r0
   124e8:	push	{r4, lr}
   124ec:	ldr	r4, [pc, #24]	; 1250c <_start@@Base+0xe8>
   124f0:	ldrb	r3, [r4]
   124f4:	cmp	r3, #0
   124f8:	popne	{r4, pc}
   124fc:	bl	12484 <_start@@Base+0x60>
   12500:	mov	r3, #1
   12504:	strb	r3, [r4]
   12508:	pop	{r4, pc}
   1250c:	andeq	fp, r2, r0, rrx
   12510:	b	124b0 <_start@@Base+0x8c>

00012514 <create_monster_bottom_up@@Base>:
   12514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12518:	add	fp, sp, #28
   1251c:	sub	sp, sp, #20
   12520:	mov	r9, r1
   12524:	ldr	r1, [pc, #1260]	; 12a18 <create_monster_bottom_up@@Base+0x504>
   12528:	mov	r4, r0
   1252c:	add	r1, pc, r1
   12530:	bl	17c60 <flatcc_builder_create_string_str@@Base>
   12534:	ldr	r1, [pc, #1248]	; 12a1c <create_monster_bottom_up@@Base+0x508>
   12538:	mov	r5, r0
   1253c:	mov	r0, r4
   12540:	add	r1, pc, r1
   12544:	bl	17c60 <flatcc_builder_create_string_str@@Base>
   12548:	mov	r6, r0
   1254c:	mov	r0, r4
   12550:	mov	r1, #2
   12554:	bl	159d8 <flatcc_builder_start_table@@Base>
   12558:	mov	r8, #0
   1255c:	cmp	r5, #0
   12560:	mov	r7, #0
   12564:	beq	125dc <create_monster_bottom_up@@Base+0xc8>
   12568:	cmp	r0, #0
   1256c:	mov	r7, #0
   12570:	bne	125dc <create_monster_bottom_up@@Base+0xc8>
   12574:	mov	r0, r4
   12578:	mov	r1, #0
   1257c:	mov	r7, #0
   12580:	bl	16cc8 <flatcc_builder_table_add_offset@@Base>
   12584:	cmp	r0, #0
   12588:	beq	125dc <create_monster_bottom_up@@Base+0xc8>
   1258c:	str	r5, [r0]
   12590:	mov	r0, r4
   12594:	mov	r1, #1
   12598:	mov	r2, #2
   1259c:	mov	r3, #2
   125a0:	bl	16e7c <flatcc_builder_table_add@@Base>
   125a4:	cmp	r0, #0
   125a8:	beq	125dc <create_monster_bottom_up@@Base+0xc8>
   125ac:	mov	r1, #3
   125b0:	mov	r2, #0
   125b4:	strh	r1, [r0]
   125b8:	mov	r0, r4
   125bc:	ldr	r1, [pc, #1116]	; 12a20 <create_monster_bottom_up@@Base+0x50c>
   125c0:	add	r1, pc, r1
   125c4:	bl	1636c <flatcc_builder_check_required@@Base>
   125c8:	cmp	r0, #0
   125cc:	beq	129f8 <create_monster_bottom_up@@Base+0x4e4>
   125d0:	mov	r0, r4
   125d4:	bl	16408 <flatcc_builder_end_table@@Base>
   125d8:	mov	r7, r0
   125dc:	mov	r0, r4
   125e0:	mov	r1, #2
   125e4:	bl	159d8 <flatcc_builder_start_table@@Base>
   125e8:	cmp	r6, #0
   125ec:	beq	12660 <create_monster_bottom_up@@Base+0x14c>
   125f0:	cmp	r0, #0
   125f4:	bne	12660 <create_monster_bottom_up@@Base+0x14c>
   125f8:	mov	r0, r4
   125fc:	mov	r1, #0
   12600:	mov	r8, #0
   12604:	bl	16cc8 <flatcc_builder_table_add_offset@@Base>
   12608:	cmp	r0, #0
   1260c:	beq	12660 <create_monster_bottom_up@@Base+0x14c>
   12610:	str	r6, [r0]
   12614:	mov	r0, r4
   12618:	mov	r1, #1
   1261c:	mov	r2, #2
   12620:	mov	r3, #2
   12624:	bl	16e7c <flatcc_builder_table_add@@Base>
   12628:	cmp	r0, #0
   1262c:	beq	12660 <create_monster_bottom_up@@Base+0x14c>
   12630:	mov	r1, #5
   12634:	mov	r2, #0
   12638:	strh	r1, [r0]
   1263c:	mov	r0, r4
   12640:	ldr	r1, [pc, #988]	; 12a24 <create_monster_bottom_up@@Base+0x510>
   12644:	add	r1, pc, r1
   12648:	bl	1636c <flatcc_builder_check_required@@Base>
   1264c:	cmp	r0, #0
   12650:	beq	129f8 <create_monster_bottom_up@@Base+0x4e4>
   12654:	mov	r0, r4
   12658:	bl	16408 <flatcc_builder_end_table@@Base>
   1265c:	mov	r8, r0
   12660:	ldr	r1, [pc, #960]	; 12a28 <create_monster_bottom_up@@Base+0x514>
   12664:	mov	r0, r4
   12668:	add	r1, pc, r1
   1266c:	bl	17c60 <flatcc_builder_create_string_str@@Base>
   12670:	mov	r6, r0
   12674:	ldr	r0, [pc, #944]	; 12a2c <create_monster_bottom_up@@Base+0x518>
   12678:	mov	r1, #1
   1267c:	mov	r2, #10
   12680:	mov	r3, #1
   12684:	str	r1, [sp]
   12688:	add	r1, sp, #8
   1268c:	add	r0, pc, r0
   12690:	vldr	d16, [r0]
   12694:	movw	r0, #2312	; 0x908
   12698:	strh	r0, [sp, #16]
   1269c:	mvn	r0, #0
   126a0:	str	r0, [sp, #4]
   126a4:	mov	r0, r4
   126a8:	vstr	d16, [sp, #8]
   126ac:	bl	165cc <flatcc_builder_create_vector@@Base>
   126b0:	mov	sl, r0
   126b4:	mov	r0, r4
   126b8:	bl	15558 <flatcc_builder_start_offset_vector@@Base>
   126bc:	cmp	r7, #0
   126c0:	beq	126d0 <create_monster_bottom_up@@Base+0x1bc>
   126c4:	mov	r0, r4
   126c8:	mov	r1, r7
   126cc:	bl	14da0 <flatcc_builder_offset_vector_push@@Base>
   126d0:	cmp	r8, #0
   126d4:	beq	126e4 <create_monster_bottom_up@@Base+0x1d0>
   126d8:	mov	r0, r4
   126dc:	mov	r1, r8
   126e0:	bl	14da0 <flatcc_builder_offset_vector_push@@Base>
   126e4:	mov	r0, r4
   126e8:	bl	15740 <flatcc_builder_end_offset_vector@@Base>
   126ec:	mov	r5, r0
   126f0:	mov	r0, r4
   126f4:	mov	r1, #0
   126f8:	mov	r2, #0
   126fc:	mov	r3, #0
   12700:	bl	14400 <flatcc_builder_start_buffer@@Base>
   12704:	cmp	r9, #0
   12708:	beq	12860 <create_monster_bottom_up@@Base+0x34c>
   1270c:	cmp	r0, #0
   12710:	bne	12720 <create_monster_bottom_up@@Base+0x20c>
   12714:	mov	r0, r4
   12718:	mov	r1, #10
   1271c:	bl	159d8 <flatcc_builder_start_table@@Base>
   12720:	mov	r0, r4
   12724:	mov	r1, #0
   12728:	mov	r2, #12
   1272c:	mov	r3, #4
   12730:	bl	16e7c <flatcc_builder_table_add@@Base>
   12734:	cmp	r0, #0
   12738:	beq	12754 <create_monster_bottom_up@@Base+0x240>
   1273c:	movw	r3, #0
   12740:	mov	r2, #1065353216	; 0x3f800000
   12744:	mov	r1, #1073741824	; 0x40000000
   12748:	movt	r3, #16448	; 0x4040
   1274c:	str	r2, [r0]
   12750:	stmib	r0, {r1, r3}
   12754:	mov	r0, r4
   12758:	mov	r1, #2
   1275c:	mov	r2, #2
   12760:	mov	r3, #2
   12764:	bl	16e7c <flatcc_builder_table_add@@Base>
   12768:	cmp	r0, #0
   1276c:	movne	r1, #300	; 0x12c
   12770:	strhne	r1, [r0]
   12774:	cmp	r6, #0
   12778:	beq	12790 <create_monster_bottom_up@@Base+0x27c>
   1277c:	mov	r0, r4
   12780:	mov	r1, #3
   12784:	bl	16cc8 <flatcc_builder_table_add_offset@@Base>
   12788:	cmp	r0, #0
   1278c:	strne	r6, [r0]
   12790:	cmp	sl, #0
   12794:	beq	127ac <create_monster_bottom_up@@Base+0x298>
   12798:	mov	r0, r4
   1279c:	mov	r1, #5
   127a0:	bl	16cc8 <flatcc_builder_table_add_offset@@Base>
   127a4:	cmp	r0, #0
   127a8:	strne	sl, [r0]
   127ac:	mov	r0, r4
   127b0:	mov	r1, #6
   127b4:	mov	r2, #1
   127b8:	mov	r3, #1
   127bc:	bl	16e7c <flatcc_builder_table_add@@Base>
   127c0:	cmp	r0, #0
   127c4:	movne	r1, #0
   127c8:	strbne	r1, [r0]
   127cc:	cmp	r5, #0
   127d0:	beq	127e8 <create_monster_bottom_up@@Base+0x2d4>
   127d4:	mov	r0, r4
   127d8:	mov	r1, #7
   127dc:	bl	16cc8 <flatcc_builder_table_add_offset@@Base>
   127e0:	cmp	r0, #0
   127e4:	strne	r5, [r0]
   127e8:	cmp	r8, #0
   127ec:	beq	1282c <create_monster_bottom_up@@Base+0x318>
   127f0:	mov	r0, r4
   127f4:	mov	r1, #8
   127f8:	mov	r2, #1
   127fc:	mov	r3, #1
   12800:	bl	16e7c <flatcc_builder_table_add@@Base>
   12804:	cmp	r0, #0
   12808:	beq	1282c <create_monster_bottom_up@@Base+0x318>
   1280c:	mov	r5, r0
   12810:	mov	r0, r4
   12814:	mov	r1, #9
   12818:	bl	16cc8 <flatcc_builder_table_add_offset@@Base>
   1281c:	cmp	r0, #0
   12820:	movne	r1, #1
   12824:	strbne	r1, [r5]
   12828:	strne	r8, [r0]
   1282c:	ldr	r1, [pc, #512]	; 12a34 <create_monster_bottom_up@@Base+0x520>
   12830:	mov	r0, r4
   12834:	mov	r2, #0
   12838:	add	r1, pc, r1
   1283c:	bl	1636c <flatcc_builder_check_required@@Base>
   12840:	cmp	r0, #0
   12844:	beq	129d8 <create_monster_bottom_up@@Base+0x4c4>
   12848:	mov	r0, r4
   1284c:	bl	16408 <flatcc_builder_end_table@@Base>
   12850:	mov	r1, r0
   12854:	mov	r0, r4
   12858:	bl	14600 <flatcc_builder_end_buffer@@Base>
   1285c:	b	12868 <create_monster_bottom_up@@Base+0x354>
   12860:	cmp	r0, #0
   12864:	beq	12874 <create_monster_bottom_up@@Base+0x360>
   12868:	mov	r0, #0
   1286c:	sub	sp, fp, #28
   12870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12874:	mov	r0, r4
   12878:	mov	r1, #10
   1287c:	bl	159d8 <flatcc_builder_start_table@@Base>
   12880:	mov	r9, #0
   12884:	cmp	r0, #0
   12888:	beq	12898 <create_monster_bottom_up@@Base+0x384>
   1288c:	mov	r0, r4
   12890:	mov	r1, r9
   12894:	b	12858 <create_monster_bottom_up@@Base+0x344>
   12898:	mov	r0, r4
   1289c:	mov	r1, #0
   128a0:	mov	r2, #12
   128a4:	mov	r3, #4
   128a8:	mov	r9, #0
   128ac:	bl	16e7c <flatcc_builder_table_add@@Base>
   128b0:	cmp	r0, #0
   128b4:	beq	1288c <create_monster_bottom_up@@Base+0x378>
   128b8:	movw	r3, #0
   128bc:	mov	r2, #1065353216	; 0x3f800000
   128c0:	cmp	r6, #0
   128c4:	mov	r1, #1073741824	; 0x40000000
   128c8:	movt	r3, #16448	; 0x4040
   128cc:	str	r2, [r0]
   128d0:	stmib	r0, {r1, r3}
   128d4:	beq	1288c <create_monster_bottom_up@@Base+0x378>
   128d8:	mov	r0, r4
   128dc:	mov	r1, #3
   128e0:	bl	16cc8 <flatcc_builder_table_add_offset@@Base>
   128e4:	cmp	r0, #0
   128e8:	strne	r6, [r0]
   128ec:	cmpne	sl, #0
   128f0:	beq	1288c <create_monster_bottom_up@@Base+0x378>
   128f4:	mov	r0, r4
   128f8:	mov	r1, #5
   128fc:	bl	16cc8 <flatcc_builder_table_add_offset@@Base>
   12900:	cmp	r0, #0
   12904:	strne	sl, [r0]
   12908:	cmpne	r5, #0
   1290c:	beq	1288c <create_monster_bottom_up@@Base+0x378>
   12910:	mov	r0, r4
   12914:	mov	r1, #7
   12918:	bl	16cc8 <flatcc_builder_table_add_offset@@Base>
   1291c:	cmp	r0, #0
   12920:	beq	1288c <create_monster_bottom_up@@Base+0x378>
   12924:	str	r5, [r0]
   12928:	mov	r0, r4
   1292c:	mov	r1, #9
   12930:	bl	16cc8 <flatcc_builder_table_add_offset@@Base>
   12934:	cmp	r0, #0
   12938:	beq	1288c <create_monster_bottom_up@@Base+0x378>
   1293c:	str	r8, [r0]
   12940:	mov	r0, r4
   12944:	mov	r1, #2
   12948:	mov	r2, #2
   1294c:	mov	r3, #2
   12950:	bl	16e7c <flatcc_builder_table_add@@Base>
   12954:	cmp	r0, #0
   12958:	beq	1288c <create_monster_bottom_up@@Base+0x378>
   1295c:	mov	r1, #300	; 0x12c
   12960:	mov	r2, #1
   12964:	mov	r3, #1
   12968:	strh	r1, [r0]
   1296c:	mov	r0, r4
   12970:	mov	r1, #6
   12974:	bl	16e7c <flatcc_builder_table_add@@Base>
   12978:	cmp	r0, #0
   1297c:	beq	1288c <create_monster_bottom_up@@Base+0x378>
   12980:	mov	r9, #0
   12984:	mov	r1, #8
   12988:	mov	r2, #1
   1298c:	mov	r3, #1
   12990:	mov	r5, #1
   12994:	strb	r9, [r0]
   12998:	mov	r0, r4
   1299c:	bl	16e7c <flatcc_builder_table_add@@Base>
   129a0:	cmp	r0, #0
   129a4:	beq	1288c <create_monster_bottom_up@@Base+0x378>
   129a8:	strb	r5, [r0]
   129ac:	mov	r0, r4
   129b0:	mov	r2, #0
   129b4:	ldr	r1, [pc, #116]	; 12a30 <create_monster_bottom_up@@Base+0x51c>
   129b8:	add	r1, pc, r1
   129bc:	bl	1636c <flatcc_builder_check_required@@Base>
   129c0:	cmp	r0, #0
   129c4:	beq	129d8 <create_monster_bottom_up@@Base+0x4c4>
   129c8:	mov	r0, r4
   129cc:	bl	16408 <flatcc_builder_end_table@@Base>
   129d0:	mov	r9, r0
   129d4:	b	1288c <create_monster_bottom_up@@Base+0x378>
   129d8:	ldr	r0, [pc, #100]	; 12a44 <create_monster_bottom_up@@Base+0x530>
   129dc:	ldr	r1, [pc, #100]	; 12a48 <create_monster_bottom_up@@Base+0x534>
   129e0:	ldr	r3, [pc, #100]	; 12a4c <create_monster_bottom_up@@Base+0x538>
   129e4:	mov	r2, #50	; 0x32
   129e8:	add	r0, pc, r0
   129ec:	add	r1, pc, r1
   129f0:	add	r3, pc, r3
   129f4:	bl	12418 <__assert_fail@plt>
   129f8:	ldr	r0, [pc, #56]	; 12a38 <create_monster_bottom_up@@Base+0x524>
   129fc:	ldr	r1, [pc, #56]	; 12a3c <create_monster_bottom_up@@Base+0x528>
   12a00:	ldr	r3, [pc, #56]	; 12a40 <create_monster_bottom_up@@Base+0x52c>
   12a04:	mov	r2, #52	; 0x34
   12a08:	add	r0, pc, r0
   12a0c:	add	r1, pc, r1
   12a10:	add	r3, pc, r3
   12a14:	bl	12418 <__assert_fail@plt>
   12a18:	andeq	r6, r0, r0, lsl r3
   12a1c:	andeq	r6, r0, r2, lsl #6
   12a20:	andeq	r6, r0, r2, asr r6
   12a24:	andeq	r6, r0, lr, asr #11
   12a28:	ldrdeq	r6, [r0], -lr
   12a2c:	andeq	r6, r0, ip, ror r5
   12a30:	andeq	r6, r0, ip, asr r2
   12a34:	ldrdeq	r6, [r0], -ip
   12a38:	andeq	r5, r0, lr, asr #29
   12a3c:	andeq	r5, r0, r6, ror #30
   12a40:	ldrdeq	r5, [r0], -r5	; <UNPREDICTABLE>
   12a44:	andeq	r6, r0, sl, asr #32
   12a48:	andeq	r5, r0, r6, lsl #31
   12a4c:	andeq	r6, r0, r1, ror #1

00012a50 <create_monster_top_down@@Base>:
   12a50:	push	{r4, r5, r6, sl, fp, lr}
   12a54:	add	fp, sp, #16
   12a58:	sub	sp, sp, #24
   12a5c:	mov	r4, r0
   12a60:	ldr	r0, [pc, #564]	; 12c9c <create_monster_top_down@@Base+0x24c>
   12a64:	mov	r1, #0
   12a68:	mov	r2, #0
   12a6c:	mov	r3, #0
   12a70:	add	r0, pc, r0
   12a74:	vldr	d16, [r0]
   12a78:	movw	r0, #2312	; 0x908
   12a7c:	strh	r0, [sp, #16]
   12a80:	mov	r0, r4
   12a84:	vstr	d16, [sp, #8]
   12a88:	bl	14400 <flatcc_builder_start_buffer@@Base>
   12a8c:	cmp	r0, #0
   12a90:	bne	12aa0 <create_monster_top_down@@Base+0x50>
   12a94:	mov	r0, r4
   12a98:	mov	r1, #10
   12a9c:	bl	159d8 <flatcc_builder_start_table@@Base>
   12aa0:	mov	r0, r4
   12aa4:	mov	r1, #0
   12aa8:	mov	r2, #12
   12aac:	mov	r3, #4
   12ab0:	bl	16e7c <flatcc_builder_table_add@@Base>
   12ab4:	cmp	r0, #0
   12ab8:	beq	12ad4 <create_monster_top_down@@Base+0x84>
   12abc:	movw	r3, #0
   12ac0:	mov	r2, #1065353216	; 0x3f800000
   12ac4:	mov	r1, #1073741824	; 0x40000000
   12ac8:	movt	r3, #16448	; 0x4040
   12acc:	str	r2, [r0]
   12ad0:	stmib	r0, {r1, r3}
   12ad4:	mov	r0, r4
   12ad8:	mov	r1, #2
   12adc:	mov	r2, #2
   12ae0:	mov	r3, #2
   12ae4:	bl	16e7c <flatcc_builder_table_add@@Base>
   12ae8:	cmp	r0, #0
   12aec:	movne	r1, #300	; 0x12c
   12af0:	strhne	r1, [r0]
   12af4:	mov	r0, r4
   12af8:	ldr	r1, [pc, #416]	; 12ca0 <create_monster_top_down@@Base+0x250>
   12afc:	add	r1, pc, r1
   12b00:	bl	17c60 <flatcc_builder_create_string_str@@Base>
   12b04:	cmp	r0, #0
   12b08:	beq	12b24 <create_monster_top_down@@Base+0xd4>
   12b0c:	mov	r5, r0
   12b10:	mov	r0, r4
   12b14:	mov	r1, #3
   12b18:	bl	16cc8 <flatcc_builder_table_add_offset@@Base>
   12b1c:	cmp	r0, #0
   12b20:	strne	r5, [r0]
   12b24:	mvn	r0, #0
   12b28:	mov	r1, #1
   12b2c:	mov	r2, #10
   12b30:	mov	r3, #1
   12b34:	str	r1, [sp]
   12b38:	str	r0, [sp, #4]
   12b3c:	add	r1, sp, #8
   12b40:	mov	r0, r4
   12b44:	bl	165cc <flatcc_builder_create_vector@@Base>
   12b48:	cmp	r0, #0
   12b4c:	beq	12b68 <create_monster_top_down@@Base+0x118>
   12b50:	mov	r5, r0
   12b54:	mov	r0, r4
   12b58:	mov	r1, #5
   12b5c:	bl	16cc8 <flatcc_builder_table_add_offset@@Base>
   12b60:	cmp	r0, #0
   12b64:	strne	r5, [r0]
   12b68:	mov	r0, r4
   12b6c:	mov	r1, #6
   12b70:	mov	r2, #1
   12b74:	mov	r3, #1
   12b78:	bl	16e7c <flatcc_builder_table_add@@Base>
   12b7c:	cmp	r0, #0
   12b80:	movne	r1, #0
   12b84:	strbne	r1, [r0]
   12b88:	mov	r0, r4
   12b8c:	bl	15558 <flatcc_builder_start_offset_vector@@Base>
   12b90:	ldr	r1, [pc, #268]	; 12ca4 <create_monster_top_down@@Base+0x254>
   12b94:	mov	r0, r4
   12b98:	add	r1, pc, r1
   12b9c:	bl	17c60 <flatcc_builder_create_string_str@@Base>
   12ba0:	mov	r1, r0
   12ba4:	mov	r0, r4
   12ba8:	mov	r2, #3
   12bac:	bl	12cbc <create_monster_top_down@@Base+0x26c>
   12bb0:	ldr	r1, [pc, #240]	; 12ca8 <create_monster_top_down@@Base+0x258>
   12bb4:	mov	r0, r4
   12bb8:	add	r1, pc, r1
   12bbc:	bl	17c60 <flatcc_builder_create_string_str@@Base>
   12bc0:	mov	r1, r0
   12bc4:	mov	r0, r4
   12bc8:	mov	r2, #5
   12bcc:	bl	12cbc <create_monster_top_down@@Base+0x26c>
   12bd0:	ldr	r6, [r0]
   12bd4:	mov	r0, r4
   12bd8:	bl	15740 <flatcc_builder_end_offset_vector@@Base>
   12bdc:	cmp	r0, #0
   12be0:	beq	12bfc <create_monster_top_down@@Base+0x1ac>
   12be4:	mov	r5, r0
   12be8:	mov	r0, r4
   12bec:	mov	r1, #7
   12bf0:	bl	16cc8 <flatcc_builder_table_add_offset@@Base>
   12bf4:	cmp	r0, #0
   12bf8:	strne	r5, [r0]
   12bfc:	cmp	r6, #0
   12c00:	beq	12c40 <create_monster_top_down@@Base+0x1f0>
   12c04:	mov	r0, r4
   12c08:	mov	r1, #8
   12c0c:	mov	r2, #1
   12c10:	mov	r3, #1
   12c14:	bl	16e7c <flatcc_builder_table_add@@Base>
   12c18:	cmp	r0, #0
   12c1c:	beq	12c40 <create_monster_top_down@@Base+0x1f0>
   12c20:	mov	r5, r0
   12c24:	mov	r0, r4
   12c28:	mov	r1, #9
   12c2c:	bl	16cc8 <flatcc_builder_table_add_offset@@Base>
   12c30:	cmp	r0, #0
   12c34:	movne	r1, #1
   12c38:	strbne	r1, [r5]
   12c3c:	strne	r6, [r0]
   12c40:	ldr	r1, [pc, #100]	; 12cac <create_monster_top_down@@Base+0x25c>
   12c44:	mov	r0, r4
   12c48:	mov	r2, #0
   12c4c:	add	r1, pc, r1
   12c50:	bl	1636c <flatcc_builder_check_required@@Base>
   12c54:	cmp	r0, #0
   12c58:	beq	12c7c <create_monster_top_down@@Base+0x22c>
   12c5c:	mov	r0, r4
   12c60:	bl	16408 <flatcc_builder_end_table@@Base>
   12c64:	mov	r1, r0
   12c68:	mov	r0, r4
   12c6c:	bl	14600 <flatcc_builder_end_buffer@@Base>
   12c70:	mov	r0, #0
   12c74:	sub	sp, fp, #16
   12c78:	pop	{r4, r5, r6, sl, fp, pc}
   12c7c:	ldr	r0, [pc, #44]	; 12cb0 <create_monster_top_down@@Base+0x260>
   12c80:	ldr	r1, [pc, #44]	; 12cb4 <create_monster_top_down@@Base+0x264>
   12c84:	ldr	r3, [pc, #44]	; 12cb8 <create_monster_top_down@@Base+0x268>
   12c88:	mov	r2, #50	; 0x32
   12c8c:	add	r0, pc, r0
   12c90:	add	r1, pc, r1
   12c94:	add	r3, pc, r3
   12c98:	bl	12418 <__assert_fail@plt>
   12c9c:	muleq	r0, r8, r1
   12ca0:	andeq	r5, r0, sl, asr #26
   12ca4:	andeq	r5, r0, r4, lsr #25
   12ca8:	andeq	r5, r0, sl, lsl #25
   12cac:	andeq	r5, r0, r8, asr #31
   12cb0:	andeq	r5, r0, r6, lsr #27
   12cb4:	andeq	r5, r0, r2, ror #25
   12cb8:	andeq	r5, r0, sp, lsr lr
   12cbc:	push	{r4, r5, r6, sl, fp, lr}
   12cc0:	add	fp, sp, #16
   12cc4:	mov	r6, r1
   12cc8:	mov	r1, #2
   12ccc:	mov	r5, r2
   12cd0:	mov	r4, r0
   12cd4:	bl	159d8 <flatcc_builder_start_table@@Base>
   12cd8:	cmp	r6, #0
   12cdc:	beq	12d64 <create_monster_top_down@@Base+0x314>
   12ce0:	cmp	r0, #0
   12ce4:	bne	12d64 <create_monster_top_down@@Base+0x314>
   12ce8:	mov	r0, r4
   12cec:	mov	r1, #0
   12cf0:	bl	16cc8 <flatcc_builder_table_add_offset@@Base>
   12cf4:	cmp	r0, #0
   12cf8:	beq	12d64 <create_monster_top_down@@Base+0x314>
   12cfc:	cmp	r5, #0
   12d00:	str	r6, [r0]
   12d04:	beq	12d28 <create_monster_top_down@@Base+0x2d8>
   12d08:	mov	r0, r4
   12d0c:	mov	r1, #1
   12d10:	mov	r2, #2
   12d14:	mov	r3, #2
   12d18:	bl	16e7c <flatcc_builder_table_add@@Base>
   12d1c:	cmp	r0, #0
   12d20:	beq	12d64 <create_monster_top_down@@Base+0x314>
   12d24:	strh	r5, [r0]
   12d28:	ldr	r1, [pc, #92]	; 12d8c <create_monster_top_down@@Base+0x33c>
   12d2c:	mov	r0, r4
   12d30:	mov	r2, #0
   12d34:	add	r1, pc, r1
   12d38:	bl	1636c <flatcc_builder_check_required@@Base>
   12d3c:	cmp	r0, #0
   12d40:	beq	12d6c <create_monster_top_down@@Base+0x31c>
   12d44:	mov	r0, r4
   12d48:	bl	16408 <flatcc_builder_end_table@@Base>
   12d4c:	cmp	r0, #0
   12d50:	beq	12d64 <create_monster_top_down@@Base+0x314>
   12d54:	mov	r1, r0
   12d58:	mov	r0, r4
   12d5c:	pop	{r4, r5, r6, sl, fp, lr}
   12d60:	b	14da0 <flatcc_builder_offset_vector_push@@Base>
   12d64:	mov	r0, #0
   12d68:	pop	{r4, r5, r6, sl, fp, pc}
   12d6c:	ldr	r0, [pc, #28]	; 12d90 <create_monster_top_down@@Base+0x340>
   12d70:	ldr	r1, [pc, #28]	; 12d94 <create_monster_top_down@@Base+0x344>
   12d74:	ldr	r3, [pc, #28]	; 12d98 <create_monster_top_down@@Base+0x348>
   12d78:	mov	r2, #52	; 0x34
   12d7c:	add	r0, pc, r0
   12d80:	add	r1, pc, r1
   12d84:	add	r3, pc, r3
   12d88:	bl	12418 <__assert_fail@plt>
   12d8c:	ldrdeq	r5, [r0], -lr
   12d90:	andeq	r5, r0, sl, asr fp
   12d94:	strdeq	r5, [r0], -r2
   12d98:	andeq	r5, r0, r1, ror #24

00012d9c <access_monster_buffer@@Base>:
   12d9c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12da0:	add	fp, sp, #24
   12da4:	cmp	r0, #0
   12da8:	beq	13124 <access_monster_buffer@@Base+0x388>
   12dac:	mov	r4, r0
   12db0:	ldr	r0, [r0]
   12db4:	ldr	r0, [r4, r0]!
   12db8:	mov	r5, r4
   12dbc:	ldrh	r8, [r5, -r0]!
   12dc0:	cmp	r8, #9
   12dc4:	bls	12de0 <access_monster_buffer@@Base+0x44>
   12dc8:	ldrh	r0, [r5, #8]
   12dcc:	cmp	r0, #0
   12dd0:	beq	12df0 <access_monster_buffer@@Base+0x54>
   12dd4:	add	r0, r4, r0
   12dd8:	ldrh	r1, [r0]
   12ddc:	b	12df4 <access_monster_buffer@@Base+0x58>
   12de0:	mov	r1, #100	; 0x64
   12de4:	cmp	r8, #8
   12de8:	bcs	12df4 <access_monster_buffer@@Base+0x58>
   12dec:	b	1302c <access_monster_buffer@@Base+0x290>
   12df0:	mov	r1, #100	; 0x64
   12df4:	ldrh	r7, [r5, #6]
   12df8:	mov	r6, #0
   12dfc:	cmp	r7, #0
   12e00:	addne	r0, r4, r7
   12e04:	ldrhne	r2, [r0]
   12e08:	mov	r0, #0
   12e0c:	moveq	r2, #150	; 0x96
   12e10:	cmp	r8, #12
   12e14:	bcc	12e34 <access_monster_buffer@@Base+0x98>
   12e18:	ldrh	r0, [r5, #10]
   12e1c:	cmp	r0, #0
   12e20:	beq	1301c <access_monster_buffer@@Base+0x280>
   12e24:	mov	r3, r4
   12e28:	ldr	r0, [r3, r0]!
   12e2c:	ldr	r6, [r3, r0]!
   12e30:	add	r0, r3, #4
   12e34:	cmp	r1, #300	; 0x12c
   12e38:	bne	1302c <access_monster_buffer@@Base+0x290>
   12e3c:	cmp	r2, #150	; 0x96
   12e40:	bne	13144 <access_monster_buffer@@Base+0x3a8>
   12e44:	ldr	r1, [pc, #1176]	; 132e4 <access_monster_buffer@@Base+0x548>
   12e48:	add	r1, pc, r1
   12e4c:	bl	12370 <strcmp@plt>
   12e50:	cmp	r0, #0
   12e54:	bne	13164 <access_monster_buffer@@Base+0x3c8>
   12e58:	cmp	r6, #3
   12e5c:	bne	13184 <access_monster_buffer@@Base+0x3e8>
   12e60:	cmp	r8, #10
   12e64:	bcc	130c4 <access_monster_buffer@@Base+0x328>
   12e68:	ldrh	r0, [r5, #8]
   12e6c:	cmp	r0, #0
   12e70:	beq	130c4 <access_monster_buffer@@Base+0x328>
   12e74:	cmp	r7, #0
   12e78:	bne	131a4 <access_monster_buffer@@Base+0x408>
   12e7c:	ldrh	r0, [r5, #4]
   12e80:	cmp	r0, #0
   12e84:	addsne	r0, r4, r0
   12e88:	bne	12eac <access_monster_buffer@@Base+0x110>
   12e8c:	ldr	r0, [pc, #1200]	; 13344 <access_monster_buffer@@Base+0x5a8>
   12e90:	ldr	r1, [pc, #1200]	; 13348 <access_monster_buffer@@Base+0x5ac>
   12e94:	ldr	r3, [pc, #1200]	; 1334c <access_monster_buffer@@Base+0x5b0>
   12e98:	mov	r2, #232	; 0xe8
   12e9c:	add	r0, pc, r0
   12ea0:	add	r1, pc, r1
   12ea4:	add	r3, pc, r3
   12ea8:	bl	12418 <__assert_fail@plt>
   12eac:	vldr	s0, [r0]
   12eb0:	vmov.f32	s2, #112	; 0x3f800000  1.0
   12eb4:	vcmp.f32	s0, s2
   12eb8:	vmrs	APSR_nzcv, fpscr
   12ebc:	bne	131e4 <access_monster_buffer@@Base+0x448>
   12ec0:	vldr	s0, [r0, #4]
   12ec4:	vmov.f32	s2, #0	; 0x40000000  2.0
   12ec8:	vcmp.f32	s0, s2
   12ecc:	vmrs	APSR_nzcv, fpscr
   12ed0:	bne	13204 <access_monster_buffer@@Base+0x468>
   12ed4:	vldr	s0, [r0, #8]
   12ed8:	vmov.f32	s2, #8	; 0x40400000  3.0
   12edc:	vcmp.f32	s0, s2
   12ee0:	vmrs	APSR_nzcv, fpscr
   12ee4:	bne	13224 <access_monster_buffer@@Base+0x488>
   12ee8:	cmp	r8, #16
   12eec:	bcc	131c4 <access_monster_buffer@@Base+0x428>
   12ef0:	ldrh	r1, [r5, #14]
   12ef4:	cmp	r1, #0
   12ef8:	beq	131c4 <access_monster_buffer@@Base+0x428>
   12efc:	mov	r0, r4
   12f00:	ldr	r1, [r0, r1]!
   12f04:	ldr	r1, [r0, r1]!
   12f08:	cmp	r1, #10
   12f0c:	bne	13244 <access_monster_buffer@@Base+0x4a8>
   12f10:	add	r0, r0, #4
   12f14:	ldrb	r0, [r0, #2]
   12f18:	cmp	r0, #2
   12f1c:	bne	13264 <access_monster_buffer@@Base+0x4c8>
   12f20:	cmp	r8, #20
   12f24:	bcc	130e4 <access_monster_buffer@@Base+0x348>
   12f28:	ldrh	r1, [r5, #18]
   12f2c:	cmp	r1, #0
   12f30:	beq	130e4 <access_monster_buffer@@Base+0x348>
   12f34:	mov	r0, r4
   12f38:	ldr	r1, [r0, r1]!
   12f3c:	ldr	r1, [r0, r1]!
   12f40:	cmp	r1, #2
   12f44:	bne	130e4 <access_monster_buffer@@Base+0x348>
   12f48:	add	r1, r0, #4
   12f4c:	ldr	r0, [r1, #4]!
   12f50:	ldr	r0, [r1, r0]!
   12f54:	mov	r2, r1
   12f58:	ldrh	r3, [r2, -r0]!
   12f5c:	cmp	r3, #6
   12f60:	bcc	13104 <access_monster_buffer@@Base+0x368>
   12f64:	ldrh	r6, [r2, #4]
   12f68:	mov	r0, #0
   12f6c:	mov	r7, #0
   12f70:	cmp	r6, #0
   12f74:	movne	r0, r1
   12f78:	ldrne	r6, [r0, r6]!
   12f7c:	addne	r0, r0, r6
   12f80:	addne	r0, r0, #4
   12f84:	cmp	r3, #8
   12f88:	bcc	12f9c <access_monster_buffer@@Base+0x200>
   12f8c:	ldrh	r2, [r2, #6]
   12f90:	cmp	r2, #0
   12f94:	addne	r1, r1, r2
   12f98:	ldrhne	r7, [r1]
   12f9c:	cmp	r0, #0
   12fa0:	beq	13104 <access_monster_buffer@@Base+0x368>
   12fa4:	ldr	r1, [pc, #828]	; 132e8 <access_monster_buffer@@Base+0x54c>
   12fa8:	add	r1, pc, r1
   12fac:	bl	12370 <strcmp@plt>
   12fb0:	cmp	r0, #0
   12fb4:	bne	13104 <access_monster_buffer@@Base+0x368>
   12fb8:	cmp	r7, #5
   12fbc:	bne	13284 <access_monster_buffer@@Base+0x4e8>
   12fc0:	cmp	r8, #22
   12fc4:	bcc	130bc <access_monster_buffer@@Base+0x320>
   12fc8:	ldrh	r0, [r5, #20]
   12fcc:	cmp	r0, #0
   12fd0:	beq	130bc <access_monster_buffer@@Base+0x320>
   12fd4:	ldrb	r0, [r4, r0]
   12fd8:	cmp	r0, #1
   12fdc:	bne	130bc <access_monster_buffer@@Base+0x320>
   12fe0:	cmp	r8, #24
   12fe4:	bcc	12ffc <access_monster_buffer@@Base+0x260>
   12fe8:	ldrh	r0, [r5, #22]
   12fec:	cmp	r0, #0
   12ff0:	ldrne	r0, [r4, r0]!
   12ff4:	addsne	r1, r4, r0
   12ff8:	bne	1304c <access_monster_buffer@@Base+0x2b0>
   12ffc:	ldr	r0, [pc, #952]	; 133bc <access_monster_buffer@@Base+0x620>
   13000:	ldr	r1, [pc, #952]	; 133c0 <access_monster_buffer@@Base+0x624>
   13004:	ldr	r3, [pc, #952]	; 133c4 <access_monster_buffer@@Base+0x628>
   13008:	mov	r2, #148	; 0x94
   1300c:	add	r0, pc, r0
   13010:	add	r1, pc, r1
   13014:	add	r3, pc, r3
   13018:	bl	12418 <__assert_fail@plt>
   1301c:	mov	r0, #0
   13020:	mov	r6, #0
   13024:	cmp	r1, #300	; 0x12c
   13028:	beq	12e3c <access_monster_buffer@@Base+0xa0>
   1302c:	ldr	r0, [pc, #712]	; 132fc <access_monster_buffer@@Base+0x560>
   13030:	ldr	r1, [pc, #712]	; 13300 <access_monster_buffer@@Base+0x564>
   13034:	ldr	r3, [pc, #712]	; 13304 <access_monster_buffer@@Base+0x568>
   13038:	mov	r2, #219	; 0xdb
   1303c:	add	r0, pc, r0
   13040:	add	r1, pc, r1
   13044:	add	r3, pc, r3
   13048:	bl	12418 <__assert_fail@plt>
   1304c:	ldr	r0, [r1]
   13050:	mov	r2, r1
   13054:	mov	r4, #0
   13058:	ldrh	r3, [r2, -r0]!
   1305c:	mov	r0, #0
   13060:	cmp	r3, #6
   13064:	bcc	130a0 <access_monster_buffer@@Base+0x304>
   13068:	ldrh	r7, [r2, #4]
   1306c:	mov	r0, #0
   13070:	mov	r4, #0
   13074:	cmp	r7, #0
   13078:	movne	r0, r1
   1307c:	ldrne	r7, [r0, r7]!
   13080:	addne	r0, r0, r7
   13084:	addne	r0, r0, #4
   13088:	cmp	r3, #8
   1308c:	bcc	130a0 <access_monster_buffer@@Base+0x304>
   13090:	ldrh	r2, [r2, #6]
   13094:	cmp	r2, #0
   13098:	addne	r1, r1, r2
   1309c:	ldrhne	r4, [r1]
   130a0:	ldr	r1, [pc, #580]	; 132ec <access_monster_buffer@@Base+0x550>
   130a4:	add	r1, pc, r1
   130a8:	bl	12370 <strcmp@plt>
   130ac:	cmp	r0, #0
   130b0:	bne	132a4 <access_monster_buffer@@Base+0x508>
   130b4:	cmp	r4, #5
   130b8:	bne	132c4 <access_monster_buffer@@Base+0x528>
   130bc:	mov	r0, #0
   130c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   130c4:	ldr	r0, [pc, #608]	; 1332c <access_monster_buffer@@Base+0x590>
   130c8:	ldr	r1, [pc, #608]	; 13330 <access_monster_buffer@@Base+0x594>
   130cc:	ldr	r3, [pc, #608]	; 13334 <access_monster_buffer@@Base+0x598>
   130d0:	mov	r2, #227	; 0xe3
   130d4:	add	r0, pc, r0
   130d8:	add	r1, pc, r1
   130dc:	add	r3, pc, r3
   130e0:	bl	12418 <__assert_fail@plt>
   130e4:	ldr	r0, [pc, #684]	; 13398 <access_monster_buffer@@Base+0x5fc>
   130e8:	ldr	r1, [pc, #684]	; 1339c <access_monster_buffer@@Base+0x600>
   130ec:	ldr	r3, [pc, #684]	; 133a0 <access_monster_buffer@@Base+0x604>
   130f0:	movw	r2, #271	; 0x10f
   130f4:	add	r0, pc, r0
   130f8:	add	r1, pc, r1
   130fc:	add	r3, pc, r3
   13100:	bl	12418 <__assert_fail@plt>
   13104:	ldr	r0, [pc, #664]	; 133a4 <access_monster_buffer@@Base+0x608>
   13108:	ldr	r1, [pc, #664]	; 133a8 <access_monster_buffer@@Base+0x60c>
   1310c:	ldr	r3, [pc, #664]	; 133ac <access_monster_buffer@@Base+0x610>
   13110:	movw	r2, #275	; 0x113
   13114:	add	r0, pc, r0
   13118:	add	r1, pc, r1
   1311c:	add	r3, pc, r3
   13120:	bl	12418 <__assert_fail@plt>
   13124:	ldr	r0, [pc, #452]	; 132f0 <access_monster_buffer@@Base+0x554>
   13128:	ldr	r1, [pc, #452]	; 132f4 <access_monster_buffer@@Base+0x558>
   1312c:	ldr	r3, [pc, #452]	; 132f8 <access_monster_buffer@@Base+0x55c>
   13130:	mov	r2, #211	; 0xd3
   13134:	add	r0, pc, r0
   13138:	add	r1, pc, r1
   1313c:	add	r3, pc, r3
   13140:	bl	12418 <__assert_fail@plt>
   13144:	ldr	r0, [pc, #444]	; 13308 <access_monster_buffer@@Base+0x56c>
   13148:	ldr	r1, [pc, #444]	; 1330c <access_monster_buffer@@Base+0x570>
   1314c:	ldr	r3, [pc, #444]	; 13310 <access_monster_buffer@@Base+0x574>
   13150:	mov	r2, #221	; 0xdd
   13154:	add	r0, pc, r0
   13158:	add	r1, pc, r1
   1315c:	add	r3, pc, r3
   13160:	bl	12418 <__assert_fail@plt>
   13164:	ldr	r0, [pc, #424]	; 13314 <access_monster_buffer@@Base+0x578>
   13168:	ldr	r1, [pc, #424]	; 13318 <access_monster_buffer@@Base+0x57c>
   1316c:	ldr	r3, [pc, #424]	; 1331c <access_monster_buffer@@Base+0x580>
   13170:	mov	r2, #222	; 0xde
   13174:	add	r0, pc, r0
   13178:	add	r1, pc, r1
   1317c:	add	r3, pc, r3
   13180:	bl	12418 <__assert_fail@plt>
   13184:	ldr	r0, [pc, #404]	; 13320 <access_monster_buffer@@Base+0x584>
   13188:	ldr	r1, [pc, #404]	; 13324 <access_monster_buffer@@Base+0x588>
   1318c:	ldr	r3, [pc, #404]	; 13328 <access_monster_buffer@@Base+0x58c>
   13190:	mov	r2, #223	; 0xdf
   13194:	add	r0, pc, r0
   13198:	add	r1, pc, r1
   1319c:	add	r3, pc, r3
   131a0:	bl	12418 <__assert_fail@plt>
   131a4:	ldr	r0, [pc, #396]	; 13338 <access_monster_buffer@@Base+0x59c>
   131a8:	ldr	r1, [pc, #396]	; 1333c <access_monster_buffer@@Base+0x5a0>
   131ac:	ldr	r3, [pc, #396]	; 13340 <access_monster_buffer@@Base+0x5a4>
   131b0:	mov	r2, #228	; 0xe4
   131b4:	add	r0, pc, r0
   131b8:	add	r1, pc, r1
   131bc:	add	r3, pc, r3
   131c0:	bl	12418 <__assert_fail@plt>
   131c4:	ldr	r0, [pc, #424]	; 13374 <access_monster_buffer@@Base+0x5d8>
   131c8:	ldr	r1, [pc, #424]	; 13378 <access_monster_buffer@@Base+0x5dc>
   131cc:	ldr	r3, [pc, #424]	; 1337c <access_monster_buffer@@Base+0x5e0>
   131d0:	movw	r2, #261	; 0x105
   131d4:	add	r0, pc, r0
   131d8:	add	r1, pc, r1
   131dc:	add	r3, pc, r3
   131e0:	bl	12418 <__assert_fail@plt>
   131e4:	ldr	r0, [pc, #356]	; 13350 <access_monster_buffer@@Base+0x5b4>
   131e8:	ldr	r1, [pc, #356]	; 13354 <access_monster_buffer@@Base+0x5b8>
   131ec:	ldr	r3, [pc, #356]	; 13358 <access_monster_buffer@@Base+0x5bc>
   131f0:	mov	r2, #240	; 0xf0
   131f4:	add	r0, pc, r0
   131f8:	add	r1, pc, r1
   131fc:	add	r3, pc, r3
   13200:	bl	12418 <__assert_fail@plt>
   13204:	ldr	r0, [pc, #336]	; 1335c <access_monster_buffer@@Base+0x5c0>
   13208:	ldr	r1, [pc, #336]	; 13360 <access_monster_buffer@@Base+0x5c4>
   1320c:	ldr	r3, [pc, #336]	; 13364 <access_monster_buffer@@Base+0x5c8>
   13210:	mov	r2, #241	; 0xf1
   13214:	add	r0, pc, r0
   13218:	add	r1, pc, r1
   1321c:	add	r3, pc, r3
   13220:	bl	12418 <__assert_fail@plt>
   13224:	ldr	r0, [pc, #316]	; 13368 <access_monster_buffer@@Base+0x5cc>
   13228:	ldr	r1, [pc, #316]	; 1336c <access_monster_buffer@@Base+0x5d0>
   1322c:	ldr	r3, [pc, #316]	; 13370 <access_monster_buffer@@Base+0x5d4>
   13230:	mov	r2, #242	; 0xf2
   13234:	add	r0, pc, r0
   13238:	add	r1, pc, r1
   1323c:	add	r3, pc, r3
   13240:	bl	12418 <__assert_fail@plt>
   13244:	ldr	r0, [pc, #308]	; 13380 <access_monster_buffer@@Base+0x5e4>
   13248:	ldr	r1, [pc, #308]	; 13384 <access_monster_buffer@@Base+0x5e8>
   1324c:	ldr	r3, [pc, #308]	; 13388 <access_monster_buffer@@Base+0x5ec>
   13250:	movw	r2, #263	; 0x107
   13254:	add	r0, pc, r0
   13258:	add	r1, pc, r1
   1325c:	add	r3, pc, r3
   13260:	bl	12418 <__assert_fail@plt>
   13264:	ldr	r0, [pc, #288]	; 1338c <access_monster_buffer@@Base+0x5f0>
   13268:	ldr	r1, [pc, #288]	; 13390 <access_monster_buffer@@Base+0x5f4>
   1326c:	ldr	r3, [pc, #288]	; 13394 <access_monster_buffer@@Base+0x5f8>
   13270:	movw	r2, #267	; 0x10b
   13274:	add	r0, pc, r0
   13278:	add	r1, pc, r1
   1327c:	add	r3, pc, r3
   13280:	bl	12418 <__assert_fail@plt>
   13284:	ldr	r0, [pc, #292]	; 133b0 <access_monster_buffer@@Base+0x614>
   13288:	ldr	r1, [pc, #292]	; 133b4 <access_monster_buffer@@Base+0x618>
   1328c:	ldr	r3, [pc, #292]	; 133b8 <access_monster_buffer@@Base+0x61c>
   13290:	mov	r2, #276	; 0x114
   13294:	add	r0, pc, r0
   13298:	add	r1, pc, r1
   1329c:	add	r3, pc, r3
   132a0:	bl	12418 <__assert_fail@plt>
   132a4:	ldr	r0, [pc, #284]	; 133c8 <access_monster_buffer@@Base+0x62c>
   132a8:	ldr	r1, [pc, #284]	; 133cc <access_monster_buffer@@Base+0x630>
   132ac:	ldr	r3, [pc, #284]	; 133d0 <access_monster_buffer@@Base+0x634>
   132b0:	movw	r2, #286	; 0x11e
   132b4:	add	r0, pc, r0
   132b8:	add	r1, pc, r1
   132bc:	add	r3, pc, r3
   132c0:	bl	12418 <__assert_fail@plt>
   132c4:	ldr	r0, [pc, #264]	; 133d4 <access_monster_buffer@@Base+0x638>
   132c8:	ldr	r1, [pc, #264]	; 133d8 <access_monster_buffer@@Base+0x63c>
   132cc:	ldr	r3, [pc, #264]	; 133dc <access_monster_buffer@@Base+0x640>
   132d0:	movw	r2, #287	; 0x11f
   132d4:	add	r0, pc, r0
   132d8:	add	r1, pc, r1
   132dc:	add	r3, pc, r3
   132e0:	bl	12418 <__assert_fail@plt>
   132e4:	strdeq	r5, [r0], -lr
   132e8:	muleq	r0, sl, r8
   132ec:	muleq	r0, lr, r7
   132f0:	strdeq	r6, [r0], -r3
   132f4:	andeq	r5, r0, r2, lsl r7
   132f8:	andeq	r5, r0, pc, ror #14
   132fc:	andeq	r6, r0, fp, ror #31
   13300:	andeq	r5, r0, sl, lsl #16
   13304:	andeq	r5, r0, r7, ror #16
   13308:	ldrdeq	r6, [r0], -r3
   1330c:	strdeq	r5, [r0], -r2
   13310:	andeq	r5, r0, pc, asr #14
   13314:			; <UNDEFINED> instruction: 0x00006eb3
   13318:	ldrdeq	r5, [r0], -r2
   1331c:	andeq	r5, r0, pc, lsr #14
   13320:	muleq	r0, r3, lr
   13324:			; <UNDEFINED> instruction: 0x000056b2
   13328:	andeq	r5, r0, pc, lsl #14
   1332c:	andeq	r6, r0, r3, asr pc
   13330:	andeq	r5, r0, r2, ror r7
   13334:	andeq	r5, r0, pc, asr #15
   13338:	andeq	r6, r0, r3, ror lr
   1333c:	muleq	r0, r2, r6
   13340:	andeq	r5, r0, pc, ror #13
   13344:	andeq	r7, r0, fp, lsl #3
   13348:	andeq	r5, r0, sl, lsr #19
   1334c:	andeq	r5, r0, r7, lsl #20
   13350:	andeq	r6, r0, r3, lsr lr
   13354:	andeq	r5, r0, r2, asr r6
   13358:	andeq	r5, r0, pc, lsr #13
   1335c:	andeq	r6, r0, r3, lsl lr
   13360:	andeq	r5, r0, r2, lsr r6
   13364:	andeq	r5, r0, pc, lsl #13
   13368:	strdeq	r6, [r0], -r3
   1336c:	andeq	r5, r0, r2, lsl r6
   13370:	andeq	r5, r0, pc, ror #12
   13374:	andeq	r6, r0, r3, asr lr
   13378:	andeq	r5, r0, r2, ror r6
   1337c:	andeq	r5, r0, pc, asr #13
   13380:	ldrdeq	r6, [r0], -r3
   13384:	strdeq	r5, [r0], -r2
   13388:	andeq	r5, r0, pc, asr #12
   1338c:			; <UNDEFINED> instruction: 0x00006db3
   13390:	ldrdeq	r5, [r0], -r2
   13394:	andeq	r5, r0, pc, lsr #12
   13398:	andeq	r6, r0, r3, lsr pc
   1339c:	andeq	r5, r0, r2, asr r7
   133a0:	andeq	r5, r0, pc, lsr #15
   133a4:	andeq	r6, r0, r3, lsl pc
   133a8:	andeq	r5, r0, r2, lsr r7
   133ac:	andeq	r5, r0, pc, lsl #15
   133b0:	muleq	r0, r3, sp
   133b4:			; <UNDEFINED> instruction: 0x000055b2
   133b8:	andeq	r5, r0, pc, lsl #12
   133bc:	andeq	r5, r0, r4, lsl fp
   133c0:	andeq	r5, r0, r6, lsr fp
   133c4:	andeq	r5, r0, r4, lsr #23
   133c8:	andeq	r6, r0, r3, ror sp
   133cc:	muleq	r0, r2, r5
   133d0:	andeq	r5, r0, pc, ror #11
   133d4:	andeq	r6, r0, r3, asr sp
   133d8:	andeq	r5, r0, r2, ror r5
   133dc:	andeq	r5, r0, pc, asr #11

000133e0 <main@@Base>:
   133e0:	push	{r4, r5, r6, sl, fp, lr}
   133e4:	add	fp, sp, #16
   133e8:	sub	sp, sp, #240	; 0xf0
   133ec:	add	r4, sp, #8
   133f0:	mov	r0, r4
   133f4:	bl	1365c <flatcc_builder_init@@Base>
   133f8:	mov	r0, r4
   133fc:	mov	r1, #0
   13400:	bl	12514 <create_monster_bottom_up@@Base>
   13404:	add	r5, sp, #4
   13408:	mov	r0, r4
   1340c:	mov	r1, r5
   13410:	bl	180f8 <flatcc_builder_finalize_aligned_buffer@@Base>
   13414:	bl	18238 <flatcc_builder_aligned_free@@Base>
   13418:	mov	r0, r4
   1341c:	bl	13800 <flatcc_builder_reset@@Base>
   13420:	mov	r0, r4
   13424:	mov	r1, #1
   13428:	bl	12514 <create_monster_bottom_up@@Base>
   1342c:	mov	r0, r4
   13430:	mov	r1, r5
   13434:	bl	180f8 <flatcc_builder_finalize_aligned_buffer@@Base>
   13438:	mov	r6, r0
   1343c:	bl	12d9c <access_monster_buffer@@Base>
   13440:	mov	r0, r6
   13444:	bl	18238 <flatcc_builder_aligned_free@@Base>
   13448:	mov	r0, r4
   1344c:	bl	13800 <flatcc_builder_reset@@Base>
   13450:	mov	r0, r4
   13454:	bl	12a50 <create_monster_top_down@@Base>
   13458:	mov	r0, r4
   1345c:	mov	r1, r5
   13460:	bl	18018 <flatcc_builder_finalize_buffer@@Base>
   13464:	mov	r5, r0
   13468:	bl	12d9c <access_monster_buffer@@Base>
   1346c:	mov	r0, r5
   13470:	bl	1237c <free@plt>
   13474:	mov	r0, r4
   13478:	bl	139c4 <flatcc_builder_clear@@Base>
   1347c:	ldr	r0, [pc, #16]	; 13494 <main@@Base+0xb4>
   13480:	add	r0, pc, r0
   13484:	bl	123ac <puts@plt>
   13488:	mov	r0, #0
   1348c:	sub	sp, fp, #16
   13490:	pop	{r4, r5, r6, sl, fp, pc}
   13494:	muleq	r0, r8, r7

00013498 <flatcc_builder_default_alloc@@Base>:
   13498:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1349c:	add	fp, sp, #24
   134a0:	mov	r4, r1
   134a4:	cmp	r2, #0
   134a8:	beq	134f4 <flatcc_builder_default_alloc@@Base+0x5c>
   134ac:	ldr	r0, [fp, #8]
   134b0:	mov	r8, r3
   134b4:	sub	r1, r0, #1
   134b8:	cmp	r1, #6
   134bc:	bhi	13520 <flatcc_builder_default_alloc@@Base+0x88>
   134c0:	add	r3, pc, #8
   134c4:	mov	r0, #256	; 0x100
   134c8:	ldr	r1, [r3, r1, lsl #2]
   134cc:	add	pc, r3, r1
   134d0:	andeq	r0, r0, r4, rrx
   134d4:	andeq	r0, r0, r0, asr r0
   134d8:	andeq	r0, r0, r0, asr r0
   134dc:	andeq	r0, r0, ip, lsl r0
   134e0:	andeq	r0, r0, r8, asr r0
   134e4:	andeq	r0, r0, r0, asr r0
   134e8:	andeq	r0, r0, r0, rrx
   134ec:	mov	r0, #288	; 0x120
   134f0:	b	13534 <flatcc_builder_default_alloc@@Base+0x9c>
   134f4:	ldr	r0, [r4]
   134f8:	cmp	r0, #0
   134fc:	moveq	r6, #0
   13500:	moveq	r0, r6
   13504:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13508:	bl	1237c <free@plt>
   1350c:	mov	r6, #0
   13510:	mov	r0, r6
   13514:	str	r6, [r4]
   13518:	str	r6, [r4, #4]
   1351c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13520:	mov	r0, #32
   13524:	b	13534 <flatcc_builder_default_alloc@@Base+0x9c>
   13528:	mov	r0, r2
   1352c:	b	13534 <flatcc_builder_default_alloc@@Base+0x9c>
   13530:	mov	r0, #64	; 0x40
   13534:	mov	r7, r0
   13538:	lsl	r0, r0, #1
   1353c:	cmp	r7, r2
   13540:	bcc	13534 <flatcc_builder_default_alloc@@Base+0x9c>
   13544:	ldr	r0, [r4, #4]
   13548:	mov	r6, #0
   1354c:	cmp	r0, r2
   13550:	lsrcs	r0, r0, #1
   13554:	cmpcs	r0, r7
   13558:	bcs	13590 <flatcc_builder_default_alloc@@Base+0xf8>
   1355c:	ldr	r0, [r4]
   13560:	mov	r1, r7
   13564:	bl	123a0 <realloc@plt>
   13568:	cmp	r0, #0
   1356c:	mvneq	r6, #0
   13570:	moveq	r0, r6
   13574:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13578:	cmp	r8, #0
   1357c:	mov	r5, r0
   13580:	ldrne	r1, [r4, #4]
   13584:	cmpne	r7, r1
   13588:	bhi	13598 <flatcc_builder_default_alloc@@Base+0x100>
   1358c:	stm	r4, {r5, r7}
   13590:	mov	r0, r6
   13594:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13598:	add	r0, r5, r1
   1359c:	sub	r2, r7, r1
   135a0:	mov	r1, #0
   135a4:	bl	123f4 <memset@plt>
   135a8:	b	1358c <flatcc_builder_default_alloc@@Base+0xf4>

000135ac <flatcc_builder_flush_vtable_cache@@Base>:
   135ac:	push	{r4, r5, fp, lr}
   135b0:	add	fp, sp, #8
   135b4:	mov	r4, r0
   135b8:	ldr	r0, [r0, #116]	; 0x74
   135bc:	cmp	r0, #0
   135c0:	popeq	{r4, r5, fp, pc}
   135c4:	ldr	r0, [r4, #92]	; 0x5c
   135c8:	ldr	r2, [r4, #96]	; 0x60
   135cc:	mov	r1, #0
   135d0:	mov	r5, #0
   135d4:	bl	123f4 <memset@plt>
   135d8:	mov	r0, #16
   135dc:	str	r5, [r4, #120]	; 0x78
   135e0:	str	r0, [r4, #124]	; 0x7c
   135e4:	pop	{r4, r5, fp, pc}

000135e8 <flatcc_builder_custom_init@@Base>:
   135e8:	push	{r4, r5, r6, r7, fp, lr}
   135ec:	add	fp, sp, #16
   135f0:	mov	r6, r2
   135f4:	mov	r7, r1
   135f8:	mov	r1, #0
   135fc:	mov	r2, #232	; 0xe8
   13600:	mov	r5, r3
   13604:	mov	r4, r0
   13608:	bl	123f4 <memset@plt>
   1360c:	ldr	r0, [fp, #8]
   13610:	cmp	r7, #0
   13614:	bne	1362c <flatcc_builder_custom_init@@Base+0x44>
   13618:	mov	r1, #1
   1361c:	add	r6, r4, #188	; 0xbc
   13620:	str	r1, [r4, #184]	; 0xb8
   13624:	ldr	r7, [pc, #40]	; 13654 <flatcc_builder_custom_init@@Base+0x6c>
   13628:	ldr	r7, [pc, r7]
   1362c:	ldr	r1, [pc, #36]	; 13658 <flatcc_builder_custom_init@@Base+0x70>
   13630:	cmp	r5, #0
   13634:	ldr	r1, [pc, r1]
   13638:	str	r6, [r4, #36]	; 0x24
   1363c:	str	r0, [r4, #40]	; 0x28
   13640:	mov	r0, #0
   13644:	str	r7, [r4, #44]	; 0x2c
   13648:	movne	r1, r5
   1364c:	str	r1, [r4, #48]	; 0x30
   13650:	pop	{r4, r5, r6, r7, fp, pc}
   13654:	andeq	r7, r1, r4, lsr #20
   13658:	andeq	r7, r1, r4, lsl sl

0001365c <flatcc_builder_init@@Base>:
   1365c:	push	{r4, r5, fp, lr}
   13660:	add	fp, sp, #8
   13664:	mov	r1, #0
   13668:	mov	r2, #232	; 0xe8
   1366c:	mov	r4, r0
   13670:	mov	r5, #0
   13674:	bl	123f4 <memset@plt>
   13678:	mov	r0, #1
   1367c:	str	r0, [r4, #184]	; 0xb8
   13680:	add	r0, r4, #188	; 0xbc
   13684:	ldr	r1, [pc, #32]	; 136ac <flatcc_builder_init@@Base+0x50>
   13688:	ldr	r1, [pc, r1]
   1368c:	ldr	r2, [pc, #28]	; 136b0 <flatcc_builder_init@@Base+0x54>
   13690:	ldr	r2, [pc, r2]
   13694:	str	r0, [r4, #36]	; 0x24
   13698:	mov	r0, #0
   1369c:	str	r5, [r4, #40]	; 0x28
   136a0:	str	r2, [r4, #44]	; 0x2c
   136a4:	str	r1, [r4, #48]	; 0x30
   136a8:	pop	{r4, r5, fp, pc}
   136ac:	andeq	r7, r1, r0, asr #19
   136b0:			; <UNDEFINED> instruction: 0x000179bc

000136b4 <flatcc_builder_custom_reset@@Base>:
   136b4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   136b8:	add	fp, sp, #24
   136bc:	sub	sp, sp, #8
   136c0:	mov	r9, r2
   136c4:	mov	r8, r1
   136c8:	mov	r4, r0
   136cc:	add	r7, r0, #52	; 0x34
   136d0:	mov	r5, #0
   136d4:	ldr	r0, [r7]
   136d8:	cmp	r0, #0
   136dc:	beq	13724 <flatcc_builder_custom_reset@@Base+0x70>
   136e0:	cmp	r9, #0
   136e4:	cmpne	r5, #5
   136e8:	beq	13714 <flatcc_builder_custom_reset@@Base+0x60>
   136ec:	ldr	r0, [r4, #40]	; 0x28
   136f0:	ldr	r6, [r4, #48]	; 0x30
   136f4:	mov	r1, r7
   136f8:	mov	r2, #1
   136fc:	mov	r3, #1
   13700:	str	r5, [sp]
   13704:	blx	r6
   13708:	cmp	r0, #0
   1370c:	bne	137c4 <flatcc_builder_custom_reset@@Base+0x110>
   13710:	ldr	r0, [r7]
   13714:	ldr	r2, [r7, #4]
   13718:	mov	r1, #0
   1371c:	bl	123f4 <memset@plt>
   13720:	b	13730 <flatcc_builder_custom_reset@@Base+0x7c>
   13724:	ldr	r0, [r7, #4]
   13728:	cmp	r0, #0
   1372c:	bne	137d4 <flatcc_builder_custom_reset@@Base+0x120>
   13730:	add	r5, r5, #1
   13734:	add	r7, r7, #8
   13738:	cmp	r5, #8
   1373c:	bcc	136d4 <flatcc_builder_custom_reset@@Base+0x20>
   13740:	mov	r0, #0
   13744:	vmov.i32	q8, #0	; 0x00000000
   13748:	mov	r5, #0
   1374c:	str	r0, [r4, #120]	; 0x78
   13750:	ldr	r1, [r4, #124]	; 0x7c
   13754:	cmp	r1, #0
   13758:	movne	r1, #16
   1375c:	strne	r1, [r4, #124]	; 0x7c
   13760:	add	r1, r4, #148	; 0x94
   13764:	strh	r0, [r4, #128]	; 0x80
   13768:	str	r0, [r4, #136]	; 0x88
   1376c:	str	r0, [r4, #140]	; 0x8c
   13770:	str	r0, [r4, #32]
   13774:	cmp	r8, #0
   13778:	vst1.32	{d16-d17}, [r1]
   1377c:	ldr	r2, [r4, #60]	; 0x3c
   13780:	ldr	r1, [r4, #52]	; 0x34
   13784:	ldr	r3, [r4, #76]	; 0x4c
   13788:	str	r2, [r4, #16]
   1378c:	str	r0, [r4, #20]
   13790:	str	r0, [r4, #24]
   13794:	movne	r0, #0
   13798:	str	r3, [r4]
   1379c:	str	r1, [r4, #4]
   137a0:	strne	r0, [r4, #172]	; 0xac
   137a4:	strne	r0, [r4, #176]	; 0xb0
   137a8:	strne	r0, [r4, #180]	; 0xb4
   137ac:	ldr	r0, [r4, #184]	; 0xb8
   137b0:	cmp	r0, #0
   137b4:	beq	137c8 <flatcc_builder_custom_reset@@Base+0x114>
   137b8:	add	r0, r4, #188	; 0xbc
   137bc:	bl	18298 <flatcc_emitter_reset@@Base>
   137c0:	b	137c8 <flatcc_builder_custom_reset@@Base+0x114>
   137c4:	mvn	r5, #0
   137c8:	mov	r0, r5
   137cc:	sub	sp, fp, #24
   137d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   137d4:	ldr	r0, [pc, #24]	; 137f4 <flatcc_builder_custom_reset@@Base+0x140>
   137d8:	ldr	r1, [pc, #24]	; 137f8 <flatcc_builder_custom_reset@@Base+0x144>
   137dc:	ldr	r3, [pc, #24]	; 137fc <flatcc_builder_custom_reset@@Base+0x148>
   137e0:	movw	r2, #434	; 0x1b2
   137e4:	add	r0, pc, r0
   137e8:	add	r1, pc, r1
   137ec:	add	r3, pc, r3
   137f0:	bl	12418 <__assert_fail@plt>
   137f4:	andeq	r5, r0, r4, ror r6
   137f8:	andeq	r5, r0, r2, lsl #13
   137fc:	ldrdeq	r5, [r0], -fp

00013800 <flatcc_builder_reset@@Base>:
   13800:	push	{r4, sl, fp, lr}
   13804:	add	fp, sp, #8
   13808:	mov	r4, r0
   1380c:	ldr	r0, [r0, #52]	; 0x34
   13810:	ldr	r2, [r4, #56]	; 0x38
   13814:	cmp	r0, #0
   13818:	beq	13828 <flatcc_builder_reset@@Base+0x28>
   1381c:	mov	r1, #0
   13820:	bl	123f4 <memset@plt>
   13824:	b	13830 <flatcc_builder_reset@@Base+0x30>
   13828:	cmp	r2, #0
   1382c:	bne	13998 <flatcc_builder_reset@@Base+0x198>
   13830:	ldr	r0, [r4, #60]	; 0x3c
   13834:	ldr	r2, [r4, #64]	; 0x40
   13838:	cmp	r0, #0
   1383c:	beq	1384c <flatcc_builder_reset@@Base+0x4c>
   13840:	mov	r1, #0
   13844:	bl	123f4 <memset@plt>
   13848:	b	13854 <flatcc_builder_reset@@Base+0x54>
   1384c:	cmp	r2, #0
   13850:	bne	13998 <flatcc_builder_reset@@Base+0x198>
   13854:	ldr	r0, [r4, #68]	; 0x44
   13858:	ldr	r2, [r4, #72]	; 0x48
   1385c:	cmp	r0, #0
   13860:	beq	13870 <flatcc_builder_reset@@Base+0x70>
   13864:	mov	r1, #0
   13868:	bl	123f4 <memset@plt>
   1386c:	b	13878 <flatcc_builder_reset@@Base+0x78>
   13870:	cmp	r2, #0
   13874:	bne	13998 <flatcc_builder_reset@@Base+0x198>
   13878:	ldr	r0, [r4, #76]	; 0x4c
   1387c:	ldr	r2, [r4, #80]	; 0x50
   13880:	cmp	r0, #0
   13884:	beq	13894 <flatcc_builder_reset@@Base+0x94>
   13888:	mov	r1, #0
   1388c:	bl	123f4 <memset@plt>
   13890:	b	1389c <flatcc_builder_reset@@Base+0x9c>
   13894:	cmp	r2, #0
   13898:	bne	13998 <flatcc_builder_reset@@Base+0x198>
   1389c:	ldr	r0, [r4, #84]	; 0x54
   138a0:	ldr	r2, [r4, #88]	; 0x58
   138a4:	cmp	r0, #0
   138a8:	beq	138b8 <flatcc_builder_reset@@Base+0xb8>
   138ac:	mov	r1, #0
   138b0:	bl	123f4 <memset@plt>
   138b4:	b	138c0 <flatcc_builder_reset@@Base+0xc0>
   138b8:	cmp	r2, #0
   138bc:	bne	13998 <flatcc_builder_reset@@Base+0x198>
   138c0:	ldr	r0, [r4, #92]	; 0x5c
   138c4:	ldr	r2, [r4, #96]	; 0x60
   138c8:	cmp	r0, #0
   138cc:	beq	138dc <flatcc_builder_reset@@Base+0xdc>
   138d0:	mov	r1, #0
   138d4:	bl	123f4 <memset@plt>
   138d8:	b	138e4 <flatcc_builder_reset@@Base+0xe4>
   138dc:	cmp	r2, #0
   138e0:	bne	13998 <flatcc_builder_reset@@Base+0x198>
   138e4:	ldr	r0, [r4, #100]	; 0x64
   138e8:	ldr	r2, [r4, #104]	; 0x68
   138ec:	cmp	r0, #0
   138f0:	beq	13900 <flatcc_builder_reset@@Base+0x100>
   138f4:	mov	r1, #0
   138f8:	bl	123f4 <memset@plt>
   138fc:	b	13908 <flatcc_builder_reset@@Base+0x108>
   13900:	cmp	r2, #0
   13904:	bne	13998 <flatcc_builder_reset@@Base+0x198>
   13908:	ldr	r0, [r4, #108]	; 0x6c
   1390c:	ldr	r2, [r4, #112]	; 0x70
   13910:	cmp	r0, #0
   13914:	beq	13924 <flatcc_builder_reset@@Base+0x124>
   13918:	mov	r1, #0
   1391c:	bl	123f4 <memset@plt>
   13920:	b	1392c <flatcc_builder_reset@@Base+0x12c>
   13924:	cmp	r2, #0
   13928:	bne	13998 <flatcc_builder_reset@@Base+0x198>
   1392c:	mov	r0, #0
   13930:	str	r0, [r4, #120]	; 0x78
   13934:	ldr	r1, [r4, #124]	; 0x7c
   13938:	cmp	r1, #0
   1393c:	movne	r1, #16
   13940:	strne	r1, [r4, #124]	; 0x7c
   13944:	vmov.i32	q8, #0	; 0x00000000
   13948:	add	r1, r4, #148	; 0x94
   1394c:	strh	r0, [r4, #128]	; 0x80
   13950:	str	r0, [r4, #136]	; 0x88
   13954:	str	r0, [r4, #140]	; 0x8c
   13958:	str	r0, [r4, #32]
   1395c:	vst1.32	{d16-d17}, [r1]
   13960:	ldr	r1, [r4, #184]	; 0xb8
   13964:	ldr	ip, [r4, #52]	; 0x34
   13968:	ldr	r2, [r4, #60]	; 0x3c
   1396c:	ldr	r3, [r4, #76]	; 0x4c
   13970:	cmp	r1, #0
   13974:	str	r2, [r4, #16]
   13978:	str	r0, [r4, #20]
   1397c:	str	r0, [r4, #24]
   13980:	stm	r4, {r3, ip}
   13984:	beq	13990 <flatcc_builder_reset@@Base+0x190>
   13988:	add	r0, r4, #188	; 0xbc
   1398c:	bl	18298 <flatcc_emitter_reset@@Base>
   13990:	mov	r0, #0
   13994:	pop	{r4, sl, fp, pc}
   13998:	ldr	r0, [pc, #24]	; 139b8 <flatcc_builder_reset@@Base+0x1b8>
   1399c:	ldr	r1, [pc, #24]	; 139bc <flatcc_builder_reset@@Base+0x1bc>
   139a0:	ldr	r3, [pc, #24]	; 139c0 <flatcc_builder_reset@@Base+0x1c0>
   139a4:	movw	r2, #434	; 0x1b2
   139a8:	add	r0, pc, r0
   139ac:	add	r1, pc, r1
   139b0:	add	r3, pc, r3
   139b4:	bl	12418 <__assert_fail@plt>
   139b8:			; <UNDEFINED> instruction: 0x000054b0
   139bc:			; <UNDEFINED> instruction: 0x000054be
   139c0:	andeq	r5, r0, r7, lsl r5

000139c4 <flatcc_builder_clear@@Base>:
   139c4:	push	{r4, sl, fp, lr}
   139c8:	add	fp, sp, #8
   139cc:	sub	sp, sp, #8
   139d0:	mov	r4, r0
   139d4:	ldr	r0, [r0, #40]	; 0x28
   139d8:	mov	r1, #0
   139dc:	mov	r2, #0
   139e0:	mov	r3, #0
   139e4:	ldr	ip, [r4, #48]	; 0x30
   139e8:	str	r1, [sp]
   139ec:	add	r1, r4, #52	; 0x34
   139f0:	blx	ip
   139f4:	ldr	r0, [r4, #40]	; 0x28
   139f8:	ldr	ip, [r4, #48]	; 0x30
   139fc:	mov	r1, #1
   13a00:	mov	r2, #0
   13a04:	mov	r3, #0
   13a08:	str	r1, [sp]
   13a0c:	add	r1, r4, #60	; 0x3c
   13a10:	blx	ip
   13a14:	ldr	r0, [r4, #40]	; 0x28
   13a18:	ldr	ip, [r4, #48]	; 0x30
   13a1c:	mov	r1, #2
   13a20:	mov	r2, #0
   13a24:	mov	r3, #0
   13a28:	str	r1, [sp]
   13a2c:	add	r1, r4, #68	; 0x44
   13a30:	blx	ip
   13a34:	ldr	r0, [r4, #40]	; 0x28
   13a38:	ldr	ip, [r4, #48]	; 0x30
   13a3c:	mov	r1, #3
   13a40:	mov	r2, #0
   13a44:	mov	r3, #0
   13a48:	str	r1, [sp]
   13a4c:	add	r1, r4, #76	; 0x4c
   13a50:	blx	ip
   13a54:	ldr	r0, [r4, #40]	; 0x28
   13a58:	ldr	ip, [r4, #48]	; 0x30
   13a5c:	mov	r1, #4
   13a60:	mov	r2, #0
   13a64:	mov	r3, #0
   13a68:	str	r1, [sp]
   13a6c:	add	r1, r4, #84	; 0x54
   13a70:	blx	ip
   13a74:	ldr	r0, [r4, #40]	; 0x28
   13a78:	ldr	ip, [r4, #48]	; 0x30
   13a7c:	mov	r1, #5
   13a80:	mov	r2, #0
   13a84:	mov	r3, #0
   13a88:	str	r1, [sp]
   13a8c:	add	r1, r4, #92	; 0x5c
   13a90:	blx	ip
   13a94:	ldr	r0, [r4, #40]	; 0x28
   13a98:	ldr	ip, [r4, #48]	; 0x30
   13a9c:	mov	r1, #6
   13aa0:	mov	r2, #0
   13aa4:	mov	r3, #0
   13aa8:	str	r1, [sp]
   13aac:	add	r1, r4, #100	; 0x64
   13ab0:	blx	ip
   13ab4:	ldr	r0, [r4, #40]	; 0x28
   13ab8:	ldr	ip, [r4, #48]	; 0x30
   13abc:	mov	r1, #7
   13ac0:	mov	r2, #0
   13ac4:	mov	r3, #0
   13ac8:	str	r1, [sp]
   13acc:	add	r1, r4, #108	; 0x6c
   13ad0:	blx	ip
   13ad4:	ldr	r0, [r4, #184]	; 0xb8
   13ad8:	cmp	r0, #0
   13adc:	beq	13ae8 <flatcc_builder_clear@@Base+0x124>
   13ae0:	add	r0, r4, #188	; 0xbc
   13ae4:	bl	18364 <flatcc_emitter_clear@@Base>
   13ae8:	mov	r0, r4
   13aec:	mov	r1, #0
   13af0:	mov	r2, #232	; 0xe8
   13af4:	sub	sp, fp, #8
   13af8:	pop	{r4, sl, fp, lr}
   13afc:	b	123f4 <memset@plt>

00013b00 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13b00:	push	{r4, r5, r6, r7, fp, lr}
   13b04:	add	fp, sp, #16
   13b08:	sub	sp, sp, #8
   13b0c:	mov	r4, r0
   13b10:	ldr	r0, [r0, #112]	; 0x70
   13b14:	add	r1, r1, #7
   13b18:	ldr	r7, [r4, #228]	; 0xe4
   13b1c:	bic	r5, r1, #3
   13b20:	add	r6, r4, #108	; 0x6c
   13b24:	add	r2, r7, r5
   13b28:	cmp	r2, r0
   13b2c:	bls	13b54 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   13b30:	ldr	r0, [r4, #40]	; 0x28
   13b34:	ldr	ip, [r4, #48]	; 0x30
   13b38:	mov	r1, #7
   13b3c:	mov	r3, #0
   13b40:	str	r1, [sp]
   13b44:	mov	r1, r6
   13b48:	blx	ip
   13b4c:	cmp	r0, #0
   13b50:	bne	13ba0 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   13b54:	ldr	r0, [r6]
   13b58:	adds	r6, r0, r7
   13b5c:	beq	13b90 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   13b60:	mov	r0, r6
   13b64:	mov	r1, #0
   13b68:	mov	r2, r5
   13b6c:	bl	123f4 <memset@plt>
   13b70:	ldr	r0, [r4, #224]	; 0xe0
   13b74:	str	r0, [r6], #4
   13b78:	ldr	r0, [r4, #228]	; 0xe4
   13b7c:	add	r1, r0, #4
   13b80:	add	r0, r0, r5
   13b84:	str	r1, [r4, #224]	; 0xe0
   13b88:	str	r0, [r4, #228]	; 0xe4
   13b8c:	b	13b94 <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   13b90:	mov	r6, #0
   13b94:	mov	r0, r6
   13b98:	sub	sp, fp, #16
   13b9c:	pop	{r4, r5, r6, r7, fp, pc}
   13ba0:	ldr	r0, [pc, #24]	; 13bc0 <flatcc_builder_enter_user_frame_ptr@@Base+0xc0>
   13ba4:	ldr	r1, [pc, #24]	; 13bc4 <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   13ba8:	ldr	r3, [pc, #24]	; 13bc8 <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   13bac:	mov	r2, #308	; 0x134
   13bb0:	add	r0, pc, r0
   13bb4:	add	r1, pc, r1
   13bb8:	add	r3, pc, r3
   13bbc:	bl	12418 <__assert_fail@plt>
   13bc0:	andeq	r6, r0, r7, ror r4
   13bc4:			; <UNDEFINED> instruction: 0x000052b6
   13bc8:	andeq	r6, r0, r9, lsr #5

00013bcc <flatcc_builder_enter_user_frame@@Base>:
   13bcc:	push	{r4, r5, r6, r7, fp, lr}
   13bd0:	add	fp, sp, #16
   13bd4:	sub	sp, sp, #8
   13bd8:	mov	r4, r0
   13bdc:	ldr	r0, [r0, #112]	; 0x70
   13be0:	add	r1, r1, #7
   13be4:	ldr	r7, [r4, #228]	; 0xe4
   13be8:	bic	r5, r1, #3
   13bec:	add	r6, r4, #108	; 0x6c
   13bf0:	add	r2, r7, r5
   13bf4:	cmp	r2, r0
   13bf8:	bls	13c20 <flatcc_builder_enter_user_frame@@Base+0x54>
   13bfc:	ldr	r0, [r4, #40]	; 0x28
   13c00:	ldr	ip, [r4, #48]	; 0x30
   13c04:	mov	r1, #7
   13c08:	mov	r3, #0
   13c0c:	str	r1, [sp]
   13c10:	mov	r1, r6
   13c14:	blx	ip
   13c18:	cmp	r0, #0
   13c1c:	bne	13c68 <flatcc_builder_enter_user_frame@@Base+0x9c>
   13c20:	ldr	r0, [r6]
   13c24:	adds	r6, r0, r7
   13c28:	moveq	r0, #0
   13c2c:	subeq	sp, fp, #16
   13c30:	popeq	{r4, r5, r6, r7, fp, pc}
   13c34:	mov	r0, r6
   13c38:	mov	r1, #0
   13c3c:	mov	r2, r5
   13c40:	bl	123f4 <memset@plt>
   13c44:	ldr	r0, [r4, #224]	; 0xe0
   13c48:	str	r0, [r6]
   13c4c:	ldr	r1, [r4, #228]	; 0xe4
   13c50:	add	r0, r1, #4
   13c54:	add	r1, r1, r5
   13c58:	str	r0, [r4, #224]	; 0xe0
   13c5c:	str	r1, [r4, #228]	; 0xe4
   13c60:	sub	sp, fp, #16
   13c64:	pop	{r4, r5, r6, r7, fp, pc}
   13c68:	ldr	r0, [pc, #24]	; 13c88 <flatcc_builder_enter_user_frame@@Base+0xbc>
   13c6c:	ldr	r1, [pc, #24]	; 13c8c <flatcc_builder_enter_user_frame@@Base+0xc0>
   13c70:	ldr	r3, [pc, #24]	; 13c90 <flatcc_builder_enter_user_frame@@Base+0xc4>
   13c74:	mov	r2, #308	; 0x134
   13c78:	add	r0, pc, r0
   13c7c:	add	r1, pc, r1
   13c80:	add	r3, pc, r3
   13c84:	bl	12418 <__assert_fail@plt>
   13c88:	andeq	r6, r0, pc, lsr #7
   13c8c:	andeq	r5, r0, lr, ror #3
   13c90:	andeq	r6, r0, r1, ror #3

00013c94 <flatcc_builder_exit_user_frame@@Base>:
   13c94:	ldr	r1, [r0, #224]	; 0xe0
   13c98:	cmp	r1, #0
   13c9c:	subne	r2, r1, #4
   13ca0:	strne	r2, [r0, #228]	; 0xe4
   13ca4:	ldrne	r2, [r0, #108]	; 0x6c
   13ca8:	addne	r1, r2, r1
   13cac:	ldrne	r1, [r1, #-4]
   13cb0:	strne	r1, [r0, #224]	; 0xe0
   13cb4:	movne	r0, r1
   13cb8:	bxne	lr
   13cbc:	push	{fp, lr}
   13cc0:	mov	fp, sp
   13cc4:	ldr	r0, [pc, #24]	; 13ce4 <flatcc_builder_exit_user_frame@@Base+0x50>
   13cc8:	ldr	r1, [pc, #24]	; 13ce8 <flatcc_builder_exit_user_frame@@Base+0x54>
   13ccc:	ldr	r3, [pc, #24]	; 13cec <flatcc_builder_exit_user_frame@@Base+0x58>
   13cd0:	movw	r2, #542	; 0x21e
   13cd4:	add	r0, pc, r0
   13cd8:	add	r1, pc, r1
   13cdc:	add	r3, pc, r3
   13ce0:	bl	12418 <__assert_fail@plt>
   13ce4:	andeq	r5, r0, r1, lsr r2
   13ce8:	muleq	r0, r2, r1
   13cec:	andeq	r5, r0, r2, asr #4

00013cf0 <flatcc_builder_exit_user_frame_at@@Base>:
   13cf0:	push	{fp, lr}
   13cf4:	mov	fp, sp
   13cf8:	ldr	r2, [r0, #224]	; 0xe0
   13cfc:	cmp	r2, r1
   13d00:	bcc	13d4c <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   13d04:	cmp	r1, #0
   13d08:	str	r1, [r0, #224]	; 0xe0
   13d0c:	subne	r2, r1, #4
   13d10:	strne	r2, [r0, #228]	; 0xe4
   13d14:	ldrne	r2, [r0, #108]	; 0x6c
   13d18:	addne	r1, r2, r1
   13d1c:	ldrne	r1, [r1, #-4]
   13d20:	strne	r1, [r0, #224]	; 0xe0
   13d24:	movne	r0, r1
   13d28:	popne	{fp, pc}
   13d2c:	ldr	r0, [pc, #68]	; 13d78 <flatcc_builder_exit_user_frame_at@@Base+0x88>
   13d30:	ldr	r1, [pc, #68]	; 13d7c <flatcc_builder_exit_user_frame_at@@Base+0x8c>
   13d34:	ldr	r3, [pc, #68]	; 13d80 <flatcc_builder_exit_user_frame_at@@Base+0x90>
   13d38:	movw	r2, #542	; 0x21e
   13d3c:	add	r0, pc, r0
   13d40:	add	r1, pc, r1
   13d44:	add	r3, pc, r3
   13d48:	bl	12418 <__assert_fail@plt>
   13d4c:	ldr	r0, [pc, #24]	; 13d6c <flatcc_builder_exit_user_frame_at@@Base+0x7c>
   13d50:	ldr	r1, [pc, #24]	; 13d70 <flatcc_builder_exit_user_frame_at@@Base+0x80>
   13d54:	ldr	r3, [pc, #24]	; 13d74 <flatcc_builder_exit_user_frame_at@@Base+0x84>
   13d58:	movw	r2, #551	; 0x227
   13d5c:	add	r0, pc, r0
   13d60:	add	r1, pc, r1
   13d64:	add	r3, pc, r3
   13d68:	bl	12418 <__assert_fail@plt>
   13d6c:	strdeq	r5, [r0], -ip
   13d70:	andeq	r5, r0, sl, lsl #2
   13d74:	andeq	r5, r0, r3, lsl r2
   13d78:	andeq	r5, r0, r9, asr #3
   13d7c:	andeq	r5, r0, sl, lsr #2
   13d80:	ldrdeq	r5, [r0], -sl

00013d84 <flatcc_builder_get_current_user_frame@@Base>:
   13d84:	ldr	r0, [r0, #224]	; 0xe0
   13d88:	bx	lr

00013d8c <flatcc_builder_get_user_frame_ptr@@Base>:
   13d8c:	ldr	r0, [r0, #108]	; 0x6c
   13d90:	add	r0, r0, r1
   13d94:	bx	lr

00013d98 <flatcc_builder_embed_buffer@@Base>:
   13d98:	push	{r4, r5, r6, r7, fp, lr}
   13d9c:	add	fp, sp, #16
   13da0:	sub	sp, sp, #88	; 0x58
   13da4:	mov	r4, r0
   13da8:	ldr	r0, [fp, #8]
   13dac:	mov	r5, r3
   13db0:	mov	r7, r2
   13db4:	mov	r2, r1
   13db8:	sub	r1, fp, #18
   13dbc:	strh	r0, [fp, #-18]	; 0xffffffee
   13dc0:	mov	r0, r4
   13dc4:	ldr	r3, [r4, #152]	; 0x98
   13dc8:	cmp	r3, #0
   13dcc:	movwne	r3, #1
   13dd0:	bl	13f24 <flatcc_builder_embed_buffer@@Base+0x18c>
   13dd4:	ldr	r1, [fp, #12]
   13dd8:	ldrh	r3, [fp, #-18]	; 0xffffffee
   13ddc:	ldr	r0, [r4, #136]	; 0x88
   13de0:	mov	r2, #0
   13de4:	str	r2, [sp, #8]
   13de8:	str	r2, [sp, #12]
   13dec:	and	r1, r1, #2
   13df0:	sub	r3, r3, #1
   13df4:	add	r1, r5, r1, lsl #1
   13df8:	sub	r1, r0, r1
   13dfc:	and	r3, r1, r3
   13e00:	add	r1, r3, r5
   13e04:	str	r1, [fp, #-24]	; 0xffffffe8
   13e08:	ldr	r1, [r4, #152]	; 0x98
   13e0c:	cmp	r1, #0
   13e10:	mov	r1, #0
   13e14:	beq	13e34 <flatcc_builder_embed_buffer@@Base+0x9c>
   13e18:	sub	r1, fp, #24
   13e1c:	mov	r2, #1
   13e20:	str	r1, [sp, #16]
   13e24:	mov	r1, #4
   13e28:	str	r1, [sp, #8]
   13e2c:	str	r1, [sp, #20]
   13e30:	str	r2, [sp, #12]
   13e34:	cmp	r5, #0
   13e38:	beq	13e5c <flatcc_builder_embed_buffer@@Base+0xc4>
   13e3c:	add	r6, sp, #8
   13e40:	add	r1, r1, r5
   13e44:	add	r6, r6, r2, lsl #3
   13e48:	add	r2, r2, #1
   13e4c:	str	r1, [sp, #8]
   13e50:	str	r7, [r6, #8]
   13e54:	str	r5, [r6, #12]
   13e58:	str	r2, [sp, #12]
   13e5c:	cmp	r3, #0
   13e60:	beq	13e8c <flatcc_builder_embed_buffer@@Base+0xf4>
   13e64:	add	r1, r1, r3
   13e68:	add	r7, sp, #8
   13e6c:	str	r1, [sp, #8]
   13e70:	add	r7, r7, r2, lsl #3
   13e74:	add	r2, r2, #1
   13e78:	ldr	r6, [pc, #136]	; 13f08 <flatcc_builder_embed_buffer@@Base+0x170>
   13e7c:	ldr	r6, [pc, r6]
   13e80:	str	r6, [r7, #8]
   13e84:	str	r3, [r7, #12]
   13e88:	str	r2, [sp, #12]
   13e8c:	cmp	r1, #0
   13e90:	ble	13ee8 <flatcc_builder_embed_buffer@@Base+0x150>
   13e94:	sub	r5, r0, r1
   13e98:	ldr	r0, [r4, #36]	; 0x24
   13e9c:	ldr	r7, [r4, #44]	; 0x2c
   13ea0:	str	r1, [sp]
   13ea4:	add	r1, sp, #8
   13ea8:	add	r1, r1, #8
   13eac:	mov	r3, r5
   13eb0:	blx	r7
   13eb4:	cmp	r0, #0
   13eb8:	streq	r5, [r4, #136]	; 0x88
   13ebc:	moveq	r0, r5
   13ec0:	subeq	sp, fp, #16
   13ec4:	popeq	{r4, r5, r6, r7, fp, pc}
   13ec8:	ldr	r0, [pc, #72]	; 13f18 <flatcc_builder_embed_buffer@@Base+0x180>
   13ecc:	ldr	r1, [pc, #72]	; 13f1c <flatcc_builder_embed_buffer@@Base+0x184>
   13ed0:	ldr	r3, [pc, #72]	; 13f20 <flatcc_builder_embed_buffer@@Base+0x188>
   13ed4:	movw	r2, #651	; 0x28b
   13ed8:	add	r0, pc, r0
   13edc:	add	r1, pc, r1
   13ee0:	add	r3, pc, r3
   13ee4:	bl	12418 <__assert_fail@plt>
   13ee8:	ldr	r0, [pc, #28]	; 13f0c <flatcc_builder_embed_buffer@@Base+0x174>
   13eec:	ldr	r1, [pc, #28]	; 13f10 <flatcc_builder_embed_buffer@@Base+0x178>
   13ef0:	ldr	r3, [pc, #28]	; 13f14 <flatcc_builder_embed_buffer@@Base+0x17c>
   13ef4:	movw	r2, #647	; 0x287
   13ef8:	add	r0, pc, r0
   13efc:	add	r1, pc, r1
   13f00:	add	r3, pc, r3
   13f04:	bl	12418 <__assert_fail@plt>
   13f08:	andeq	r7, r1, r4, asr #3
   13f0c:	andeq	r6, r0, pc, lsr #2
   13f10:	andeq	r4, r0, lr, ror #30
   13f14:	andeq	r5, r0, r6, ror #31
   13f18:	andeq	r6, r0, pc, asr #2
   13f1c:	andeq	r4, r0, lr, lsl #31
   13f20:	andeq	r6, r0, r6
   13f24:	push	{r4, sl, fp, lr}
   13f28:	add	fp, sp, #8
   13f2c:	sub	sp, sp, #80	; 0x50
   13f30:	cmp	r2, #0
   13f34:	bne	13f44 <flatcc_builder_embed_buffer@@Base+0x1ac>
   13f38:	ldrh	r2, [r0, #132]	; 0x84
   13f3c:	cmp	r2, #0
   13f40:	movweq	r2, #1
   13f44:	ldrh	r4, [r1]
   13f48:	cmp	r4, #4
   13f4c:	movwcc	r4, #4
   13f50:	cmpcs	r4, r2
   13f54:	bcs	13f64 <flatcc_builder_embed_buffer@@Base+0x1cc>
   13f58:	cmp	r4, r2
   13f5c:	movcc	r4, r2
   13f60:	strh	r4, [r1]
   13f64:	cmp	r3, #0
   13f68:	bne	13fdc <flatcc_builder_embed_buffer@@Base+0x244>
   13f6c:	ldr	r4, [r0, #140]	; 0x8c
   13f70:	sub	r1, r2, #1
   13f74:	ands	r1, r4, r1
   13f78:	beq	13fdc <flatcc_builder_embed_buffer@@Base+0x244>
   13f7c:	mov	r2, #1
   13f80:	str	r1, [sp, #8]
   13f84:	str	r1, [sp, #20]
   13f88:	cmn	r1, #1
   13f8c:	str	r2, [sp, #12]
   13f90:	ldr	r2, [pc, #172]	; 14044 <flatcc_builder_embed_buffer@@Base+0x2ac>
   13f94:	ldr	r2, [pc, r2]
   13f98:	str	r2, [sp, #16]
   13f9c:	add	r2, r1, r4
   13fa0:	str	r2, [r0, #140]	; 0x8c
   13fa4:	ble	13fe4 <flatcc_builder_embed_buffer@@Base+0x24c>
   13fa8:	ldr	r2, [r0, #36]	; 0x24
   13fac:	ldr	ip, [r0, #44]	; 0x2c
   13fb0:	add	r0, sp, #8
   13fb4:	str	r1, [sp]
   13fb8:	mov	r3, r4
   13fbc:	add	r1, r0, #8
   13fc0:	mov	r0, r2
   13fc4:	mov	r2, #1
   13fc8:	blx	ip
   13fcc:	cmp	r0, #0
   13fd0:	bne	14004 <flatcc_builder_embed_buffer@@Base+0x26c>
   13fd4:	cmn	r4, #1
   13fd8:	beq	14024 <flatcc_builder_embed_buffer@@Base+0x28c>
   13fdc:	sub	sp, fp, #8
   13fe0:	pop	{r4, sl, fp, pc}
   13fe4:	ldr	r0, [pc, #92]	; 14048 <flatcc_builder_embed_buffer@@Base+0x2b0>
   13fe8:	ldr	r1, [pc, #92]	; 1404c <flatcc_builder_embed_buffer@@Base+0x2b4>
   13fec:	ldr	r3, [pc, #92]	; 14050 <flatcc_builder_embed_buffer@@Base+0x2b8>
   13ff0:	movw	r2, #673	; 0x2a1
   13ff4:	add	r0, pc, r0
   13ff8:	add	r1, pc, r1
   13ffc:	add	r3, pc, r3
   14000:	bl	12418 <__assert_fail@plt>
   14004:	ldr	r0, [pc, #72]	; 14054 <flatcc_builder_embed_buffer@@Base+0x2bc>
   14008:	ldr	r1, [pc, #72]	; 14058 <flatcc_builder_embed_buffer@@Base+0x2c0>
   1400c:	ldr	r3, [pc, #72]	; 1405c <flatcc_builder_embed_buffer@@Base+0x2c4>
   14010:	movw	r2, #677	; 0x2a5
   14014:	add	r0, pc, r0
   14018:	add	r1, pc, r1
   1401c:	add	r3, pc, r3
   14020:	bl	12418 <__assert_fail@plt>
   14024:	ldr	r0, [pc, #52]	; 14060 <flatcc_builder_embed_buffer@@Base+0x2c8>
   14028:	ldr	r1, [pc, #52]	; 14064 <flatcc_builder_embed_buffer@@Base+0x2cc>
   1402c:	ldr	r3, [pc, #52]	; 14068 <flatcc_builder_embed_buffer@@Base+0x2d0>
   14030:	movw	r2, #702	; 0x2be
   14034:	add	r0, pc, r0
   14038:	add	r1, pc, r1
   1403c:	add	r3, pc, r3
   14040:	bl	12418 <__assert_fail@plt>
   14044:	andeq	r7, r1, ip, lsr #1
   14048:	andeq	r6, r0, r3, lsr r0
   1404c:	andeq	r4, r0, r2, ror lr
   14050:	andeq	r5, r0, r6, lsr #31
   14054:	andeq	r6, r0, r3, lsl r0
   14058:	andeq	r4, r0, r2, asr lr
   1405c:	andeq	r5, r0, r6, lsl #31
   14060:	strdeq	r5, [r0], -r3
   14064:	andeq	r4, r0, r2, lsr lr
   14068:	andeq	r5, r0, r8, ror #28

0001406c <flatcc_builder_create_buffer@@Base>:
   1406c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14070:	add	fp, sp, #28
   14074:	sub	sp, sp, #100	; 0x64
   14078:	ldr	r8, [fp, #12]
   1407c:	mov	r4, r0
   14080:	ldr	r0, [fp, #8]
   14084:	mov	r7, r1
   14088:	mov	r5, #0
   1408c:	mov	r9, r3
   14090:	sub	r1, fp, #30
   14094:	str	r5, [sp, #12]
   14098:	and	r6, r8, #1
   1409c:	strh	r0, [fp, #-30]	; 0xffffffe2
   140a0:	mov	r0, r4
   140a4:	mov	r3, r6
   140a8:	bl	13f24 <flatcc_builder_embed_buffer@@Base+0x18c>
   140ac:	ldrh	r0, [r4, #128]	; 0x80
   140b0:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   140b4:	cmp	r0, r1
   140b8:	strhcc	r1, [r4, #128]	; 0x80
   140bc:	cmp	r7, #0
   140c0:	stmib	sp, {r6, r9}
   140c4:	beq	140e0 <flatcc_builder_create_buffer@@Base+0x74>
   140c8:	ldr	r5, [r7]
   140cc:	cmp	r5, #0
   140d0:	str	r5, [sp, #12]
   140d4:	movwne	r5, #1
   140d8:	lsl	r7, r5, #2
   140dc:	b	140e4 <flatcc_builder_create_buffer@@Base+0x78>
   140e0:	mov	r7, #0
   140e4:	ldr	r9, [r4, #136]	; 0x88
   140e8:	mov	sl, #4
   140ec:	mvn	r6, #3
   140f0:	mov	r3, #0
   140f4:	ands	ip, r8, #3
   140f8:	and	r2, sl, r8, lsl #1
   140fc:	str	r3, [sp, #20]
   14100:	str	r3, [sp, #16]
   14104:	sub	r2, r6, r2
   14108:	sub	r6, r1, #1
   1410c:	mov	r1, #4
   14110:	add	r2, r2, r9
   14114:	sub	r2, r2, r7
   14118:	beq	1413c <flatcc_builder_create_buffer@@Base+0xd0>
   1411c:	sub	r1, fp, #40	; 0x28
   14120:	mov	r3, #1
   14124:	str	r1, [sp, #24]
   14128:	mov	r1, #4
   1412c:	str	r1, [sp, #16]
   14130:	str	r1, [sp, #28]
   14134:	mov	r1, #8
   14138:	str	r3, [sp, #20]
   1413c:	add	lr, sp, #16
   14140:	and	r6, r2, r6
   14144:	sub	r0, fp, #36	; 0x24
   14148:	str	r1, [sp, #16]
   1414c:	cmp	r5, #0
   14150:	add	r2, lr, r3, lsl #3
   14154:	str	r0, [r2, #8]
   14158:	str	sl, [r2, #12]
   1415c:	add	r2, r3, #1
   14160:	str	r2, [sp, #20]
   14164:	beq	14188 <flatcc_builder_create_buffer@@Base+0x11c>
   14168:	add	r1, r1, r7
   1416c:	add	r0, lr, r2, lsl #3
   14170:	add	r2, sp, #12
   14174:	str	r1, [sp, #16]
   14178:	str	r2, [r0, #8]
   1417c:	orr	r2, r3, #2
   14180:	str	r7, [r0, #12]
   14184:	str	r2, [sp, #20]
   14188:	cmp	r6, #0
   1418c:	beq	141b4 <flatcc_builder_create_buffer@@Base+0x148>
   14190:	add	r1, r1, r6
   14194:	add	r0, lr, r2, lsl #3
   14198:	add	r2, r2, #1
   1419c:	str	r1, [sp, #16]
   141a0:	ldr	r3, [pc, #224]	; 14288 <flatcc_builder_create_buffer@@Base+0x21c>
   141a4:	ldr	r3, [pc, r3]
   141a8:	str	r3, [r0, #8]
   141ac:	str	r6, [r0, #12]
   141b0:	str	r2, [sp, #20]
   141b4:	ldr	r5, [sp, #4]
   141b8:	sub	r7, r9, r1
   141bc:	cmp	ip, #0
   141c0:	mov	r6, #144	; 0x90
   141c4:	ldr	r3, [sp, #8]
   141c8:	mov	r0, r7
   141cc:	addne	r0, r0, #4
   141d0:	cmp	r5, #0
   141d4:	sub	r3, r3, r0
   141d8:	movweq	r6, #140	; 0x8c
   141dc:	cmp	r1, #0
   141e0:	ldr	r6, [r4, r6]
   141e4:	str	r3, [fp, #-36]	; 0xffffffdc
   141e8:	sub	r0, r6, r0
   141ec:	str	r0, [fp, #-40]	; 0xffffffd8
   141f0:	ble	14248 <flatcc_builder_create_buffer@@Base+0x1dc>
   141f4:	ldr	r0, [r4, #36]	; 0x24
   141f8:	ldr	r6, [r4, #44]	; 0x2c
   141fc:	str	r1, [sp]
   14200:	add	r1, lr, #8
   14204:	mov	r3, r7
   14208:	blx	r6
   1420c:	cmp	r0, #0
   14210:	bne	14268 <flatcc_builder_create_buffer@@Base+0x1fc>
   14214:	cmp	r7, #0
   14218:	str	r7, [r4, #136]	; 0x88
   1421c:	movne	r0, r7
   14220:	subne	sp, fp, #28
   14224:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14228:	ldr	r0, [pc, #116]	; 142a4 <flatcc_builder_create_buffer@@Base+0x238>
   1422c:	ldr	r1, [pc, #116]	; 142a8 <flatcc_builder_create_buffer@@Base+0x23c>
   14230:	ldr	r3, [pc, #116]	; 142ac <flatcc_builder_create_buffer@@Base+0x240>
   14234:	mov	r2, #772	; 0x304
   14238:	add	r0, pc, r0
   1423c:	add	r1, pc, r1
   14240:	add	r3, pc, r3
   14244:	bl	12418 <__assert_fail@plt>
   14248:	ldr	r0, [pc, #60]	; 1428c <flatcc_builder_create_buffer@@Base+0x220>
   1424c:	ldr	r1, [pc, #60]	; 14290 <flatcc_builder_create_buffer@@Base+0x224>
   14250:	ldr	r3, [pc, #60]	; 14294 <flatcc_builder_create_buffer@@Base+0x228>
   14254:	movw	r2, #647	; 0x287
   14258:	add	r0, pc, r0
   1425c:	add	r1, pc, r1
   14260:	add	r3, pc, r3
   14264:	bl	12418 <__assert_fail@plt>
   14268:	ldr	r0, [pc, #40]	; 14298 <flatcc_builder_create_buffer@@Base+0x22c>
   1426c:	ldr	r1, [pc, #40]	; 1429c <flatcc_builder_create_buffer@@Base+0x230>
   14270:	ldr	r3, [pc, #40]	; 142a0 <flatcc_builder_create_buffer@@Base+0x234>
   14274:	movw	r2, #651	; 0x28b
   14278:	add	r0, pc, r0
   1427c:	add	r1, pc, r1
   14280:	add	r3, pc, r3
   14284:	bl	12418 <__assert_fail@plt>
   14288:	muleq	r1, ip, lr
   1428c:	andeq	r5, r0, pc, asr #27
   14290:	andeq	r4, r0, lr, lsl #24
   14294:	andeq	r5, r0, r6, lsl #25
   14298:	andeq	r5, r0, pc, lsr #27
   1429c:	andeq	r4, r0, lr, ror #23
   142a0:	andeq	r5, r0, r6, ror #24
   142a4:	andeq	r5, r0, pc, ror #27
   142a8:	andeq	r4, r0, lr, lsr #24
   142ac:	andeq	r4, r0, ip, ror sp

000142b0 <flatcc_builder_create_struct@@Base>:
   142b0:	push	{r4, r5, r6, sl, fp, lr}
   142b4:	add	fp, sp, #16
   142b8:	sub	sp, sp, #80	; 0x50
   142bc:	cmp	r3, #0
   142c0:	beq	14398 <flatcc_builder_create_struct@@Base+0xe8>
   142c4:	mov	r5, r0
   142c8:	ldrh	r0, [r0, #128]	; 0x80
   142cc:	mov	r4, #0
   142d0:	cmp	r0, r3
   142d4:	strhcc	r3, [r5, #128]	; 0x80
   142d8:	sub	r3, r3, #1
   142dc:	cmp	r2, #0
   142e0:	ldr	r0, [r5, #136]	; 0x88
   142e4:	str	r4, [sp, #12]
   142e8:	str	r4, [sp, #8]
   142ec:	movne	r4, #1
   142f0:	strne	r1, [sp, #16]
   142f4:	strne	r2, [sp, #8]
   142f8:	strne	r2, [sp, #20]
   142fc:	strne	r4, [sp, #12]
   14300:	sub	r6, r0, r2
   14304:	and	r3, r6, r3
   14308:	cmp	r3, #0
   1430c:	beq	14338 <flatcc_builder_create_struct@@Base+0x88>
   14310:	add	r2, r3, r2
   14314:	add	r1, sp, #8
   14318:	str	r2, [sp, #8]
   1431c:	add	r1, r1, r4, lsl #3
   14320:	add	r4, r4, #1
   14324:	ldr	r6, [pc, #172]	; 143d8 <flatcc_builder_create_struct@@Base+0x128>
   14328:	ldr	r6, [pc, r6]
   1432c:	str	r6, [r1, #8]
   14330:	str	r3, [r1, #12]
   14334:	str	r4, [sp, #12]
   14338:	cmp	r2, #0
   1433c:	ble	143b8 <flatcc_builder_create_struct@@Base+0x108>
   14340:	sub	r6, r0, r2
   14344:	ldr	r0, [r5, #36]	; 0x24
   14348:	ldr	ip, [r5, #44]	; 0x2c
   1434c:	add	r1, sp, #8
   14350:	str	r2, [sp]
   14354:	mov	r2, r4
   14358:	add	r1, r1, #8
   1435c:	mov	r3, r6
   14360:	blx	ip
   14364:	cmp	r0, #0
   14368:	streq	r6, [r5, #136]	; 0x88
   1436c:	moveq	r0, r6
   14370:	subeq	sp, fp, #16
   14374:	popeq	{r4, r5, r6, sl, fp, pc}
   14378:	ldr	r0, [pc, #116]	; 143f4 <flatcc_builder_create_struct@@Base+0x144>
   1437c:	ldr	r1, [pc, #116]	; 143f8 <flatcc_builder_create_struct@@Base+0x148>
   14380:	ldr	r3, [pc, #116]	; 143fc <flatcc_builder_create_struct@@Base+0x14c>
   14384:	movw	r2, #651	; 0x28b
   14388:	add	r0, pc, r0
   1438c:	add	r1, pc, r1
   14390:	add	r3, pc, r3
   14394:	bl	12418 <__assert_fail@plt>
   14398:	ldr	r0, [pc, #60]	; 143dc <flatcc_builder_create_struct@@Base+0x12c>
   1439c:	ldr	r1, [pc, #60]	; 143e0 <flatcc_builder_create_struct@@Base+0x130>
   143a0:	ldr	r3, [pc, #60]	; 143e4 <flatcc_builder_create_struct@@Base+0x134>
   143a4:	movw	r2, #783	; 0x30f
   143a8:	add	r0, pc, r0
   143ac:	add	r1, pc, r1
   143b0:	add	r3, pc, r3
   143b4:	bl	12418 <__assert_fail@plt>
   143b8:	ldr	r0, [pc, #40]	; 143e8 <flatcc_builder_create_struct@@Base+0x138>
   143bc:	ldr	r1, [pc, #40]	; 143ec <flatcc_builder_create_struct@@Base+0x13c>
   143c0:	ldr	r3, [pc, #40]	; 143f0 <flatcc_builder_create_struct@@Base+0x140>
   143c4:	movw	r2, #647	; 0x287
   143c8:	add	r0, pc, r0
   143cc:	add	r1, pc, r1
   143d0:	add	r3, pc, r3
   143d4:	bl	12418 <__assert_fail@plt>
   143d8:	andeq	r6, r1, r8, lsl sp
   143dc:	muleq	r0, r7, ip
   143e0:			; <UNDEFINED> instruction: 0x00004abe
   143e4:	muleq	r0, sl, ip
   143e8:	andeq	r5, r0, pc, asr ip
   143ec:	muleq	r0, lr, sl
   143f0:	andeq	r5, r0, r6, lsl fp
   143f4:	muleq	r0, pc, ip	; <UNPREDICTABLE>
   143f8:	ldrdeq	r4, [r0], -lr
   143fc:	andeq	r5, r0, r6, asr fp

00014400 <flatcc_builder_start_buffer@@Base>:
   14400:	push	{r4, r5, r6, r7, fp, lr}
   14404:	add	fp, sp, #16
   14408:	mov	r5, r1
   1440c:	ldrh	r1, [r0, #128]	; 0x80
   14410:	mov	r6, r3
   14414:	mov	r7, r2
   14418:	mov	r4, r0
   1441c:	bl	144c0 <flatcc_builder_start_buffer@@Base+0xc0>
   14420:	mov	r1, r0
   14424:	mvn	r0, #0
   14428:	cmp	r1, #0
   1442c:	popne	{r4, r5, r6, r7, fp, pc}
   14430:	mov	r0, #1
   14434:	cmp	r5, #0
   14438:	strh	r0, [r4, #128]	; 0x80
   1443c:	ldrh	r1, [r4, #132]	; 0x84
   14440:	ldr	r2, [r4, #32]
   14444:	strh	r1, [r2, #34]	; 0x22
   14448:	strh	r7, [r4, #132]	; 0x84
   1444c:	ldrh	r1, [r4, #164]	; 0xa4
   14450:	ldr	r2, [r4, #32]
   14454:	strh	r1, [r2, #32]
   14458:	strh	r6, [r4, #164]	; 0xa4
   1445c:	ldr	r1, [r4, #32]
   14460:	ldr	r2, [r4, #144]	; 0x90
   14464:	str	r2, [r1, #20]
   14468:	ldr	r1, [r4, #32]
   1446c:	ldr	r2, [r4, #152]	; 0x98
   14470:	str	r2, [r1, #28]
   14474:	ldr	r3, [r4, #148]	; 0x94
   14478:	ldr	r1, [r4, #32]
   1447c:	ldr	r2, [r4, #136]	; 0x88
   14480:	ldr	r7, [r4, #168]	; 0xa8
   14484:	add	r6, r3, #1
   14488:	str	r2, [r4, #144]	; 0x90
   1448c:	str	r6, [r4, #148]	; 0x94
   14490:	str	r3, [r4, #152]	; 0x98
   14494:	str	r7, [r1, #16]
   14498:	ldr	r1, [pc, #28]	; 144bc <flatcc_builder_start_buffer@@Base+0xbc>
   1449c:	ldr	r1, [pc, r1]
   144a0:	movne	r1, r5
   144a4:	ldr	r1, [r1]
   144a8:	str	r1, [r4, #168]	; 0xa8
   144ac:	ldr	r1, [r4, #32]
   144b0:	strh	r0, [r1, #14]
   144b4:	mov	r0, #0
   144b8:	pop	{r4, r5, r6, r7, fp, pc}
   144bc:	andeq	r6, r1, r4, lsr #23
   144c0:	push	{r4, r5, r6, r7, fp, lr}
   144c4:	add	fp, sp, #16
   144c8:	sub	sp, sp, #8
   144cc:	mov	r5, r1
   144d0:	ldr	r1, [r0, #156]	; 0x9c
   144d4:	ldr	r2, [r0, #160]	; 0xa0
   144d8:	mov	r4, r0
   144dc:	add	r0, r1, #1
   144e0:	cmp	r1, r2
   144e4:	str	r0, [r4, #156]	; 0x9c
   144e8:	bge	144fc <flatcc_builder_start_buffer@@Base+0xfc>
   144ec:	ldr	r0, [r4, #32]
   144f0:	add	r0, r0, #36	; 0x24
   144f4:	str	r0, [r4, #32]
   144f8:	b	14590 <flatcc_builder_start_buffer@@Base+0x190>
   144fc:	ldr	r2, [r4, #176]	; 0xb0
   14500:	mvn	r6, #0
   14504:	cmp	r2, #1
   14508:	cmpge	r1, r2
   1450c:	bge	145c8 <flatcc_builder_start_buffer@@Base+0x1c8>
   14510:	add	r7, r0, r0, lsl #3
   14514:	ldr	r0, [r4, #88]	; 0x58
   14518:	lsl	r2, r7, #2
   1451c:	cmp	r2, r0
   14520:	bls	14548 <flatcc_builder_start_buffer@@Base+0x148>
   14524:	ldr	r0, [r4, #40]	; 0x28
   14528:	ldr	ip, [r4, #48]	; 0x30
   1452c:	mov	r3, #4
   14530:	add	r1, r4, #84	; 0x54
   14534:	str	r3, [sp]
   14538:	mov	r3, #0
   1453c:	blx	ip
   14540:	cmp	r0, #0
   14544:	bne	145d4 <flatcc_builder_start_buffer@@Base+0x1d4>
   14548:	ldr	r1, [r4, #84]	; 0x54
   1454c:	mvn	r0, #35	; 0x23
   14550:	add	r0, r0, r7, lsl #2
   14554:	adds	r0, r0, r1
   14558:	str	r0, [r4, #32]
   1455c:	beq	145c8 <flatcc_builder_start_buffer@@Base+0x1c8>
   14560:	ldr	r1, [r4, #88]	; 0x58
   14564:	movw	r3, #36409	; 0x8e39
   14568:	ldr	r2, [r4, #176]	; 0xb0
   1456c:	movt	r3, #14563	; 0x38e3
   14570:	umull	r1, r3, r1, r3
   14574:	lsr	r1, r3, #3
   14578:	cmp	r2, r3, lsr #3
   1457c:	mov	r3, r1
   14580:	movlt	r3, r2
   14584:	cmp	r2, #0
   14588:	movle	r3, r1
   1458c:	str	r3, [r4, #160]	; 0xa0
   14590:	ldr	r1, [r4, #20]
   14594:	mvn	r3, #3
   14598:	mov	r6, #0
   1459c:	str	r1, [r0, #8]
   145a0:	ldrh	r2, [r4, #130]	; 0x82
   145a4:	strh	r2, [r0, #12]
   145a8:	strh	r5, [r4, #130]	; 0x82
   145ac:	ldr	r2, [r4, #28]
   145b0:	stm	r0, {r2, r3}
   145b4:	add	r0, r1, r2
   145b8:	str	r6, [r4, #20]
   145bc:	add	r0, r0, #7
   145c0:	bic	r0, r0, #7
   145c4:	str	r0, [r4, #28]
   145c8:	mov	r0, r6
   145cc:	sub	sp, fp, #16
   145d0:	pop	{r4, r5, r6, r7, fp, pc}
   145d4:	ldr	r0, [pc, #24]	; 145f4 <flatcc_builder_start_buffer@@Base+0x1f4>
   145d8:	ldr	r1, [pc, #24]	; 145f8 <flatcc_builder_start_buffer@@Base+0x1f8>
   145dc:	ldr	r3, [pc, #24]	; 145fc <flatcc_builder_start_buffer@@Base+0x1fc>
   145e0:	mov	r2, #308	; 0x134
   145e4:	add	r0, pc, r0
   145e8:	add	r1, pc, r1
   145ec:	add	r3, pc, r3
   145f0:	bl	12418 <__assert_fail@plt>
   145f4:	andeq	r5, r0, r3, asr #20
   145f8:	andeq	r4, r0, r2, lsl #17
   145fc:	andeq	r5, r0, r5, ror r8

00014600 <flatcc_builder_end_buffer@@Base>:
   14600:	push	{r4, r5, r6, sl, fp, lr}
   14604:	add	fp, sp, #16
   14608:	sub	sp, sp, #8
   1460c:	mov	r4, r0
   14610:	ldr	r0, [r0, #32]
   14614:	ldrh	r0, [r0, #14]
   14618:	cmp	r0, #1
   1461c:	bne	14710 <flatcc_builder_end_buffer@@Base+0x110>
   14620:	mov	r3, r1
   14624:	ldr	r1, [r4, #152]	; 0x98
   14628:	ldrh	r0, [r4, #164]	; 0xa4
   1462c:	ldrh	r2, [r4, #132]	; 0x84
   14630:	cmp	r1, #0
   14634:	ldrh	r1, [r4, #128]	; 0x80
   14638:	and	r0, r0, #2
   1463c:	orrne	r0, r0, #1
   14640:	cmp	r1, r2
   14644:	movcc	r1, r2
   14648:	strhcc	r2, [r4, #128]	; 0x80
   1464c:	str	r0, [sp, #4]
   14650:	mov	r0, r4
   14654:	str	r1, [sp]
   14658:	add	r1, r4, #168	; 0xa8
   1465c:	bl	1406c <flatcc_builder_create_buffer@@Base>
   14660:	mov	r6, r0
   14664:	cmp	r0, #0
   14668:	beq	14704 <flatcc_builder_end_buffer@@Base+0x104>
   1466c:	ldr	r1, [r4, #32]
   14670:	ldr	r0, [r4, #16]
   14674:	ldr	r2, [r4, #20]
   14678:	ldr	r3, [r1, #20]
   1467c:	str	r3, [r4, #144]	; 0x90
   14680:	ldr	r3, [r1, #28]
   14684:	str	r3, [r4, #152]	; 0x98
   14688:	ldr	r3, [r1, #16]
   1468c:	str	r3, [r4, #168]	; 0xa8
   14690:	ldrh	r1, [r1, #32]
   14694:	strh	r1, [r4, #164]	; 0xa4
   14698:	mov	r1, #0
   1469c:	bl	123f4 <memset@plt>
   146a0:	ldr	r0, [r4, #32]
   146a4:	ldr	r1, [r4, #60]	; 0x3c
   146a8:	ldr	r2, [r4, #64]	; 0x40
   146ac:	ldr	r3, [r0, #8]
   146b0:	str	r3, [r4, #20]
   146b4:	ldr	r3, [r0]
   146b8:	str	r3, [r4, #28]
   146bc:	add	r1, r1, r3
   146c0:	ldr	r5, [r0, #4]
   146c4:	str	r1, [r4, #16]
   146c8:	sub	r1, r2, r3
   146cc:	cmp	r1, r5
   146d0:	movhi	r1, r5
   146d4:	str	r1, [r4, #24]
   146d8:	ldrh	r1, [r4, #130]	; 0x82
   146dc:	ldrh	r2, [r4, #128]	; 0x80
   146e0:	cmp	r2, r1
   146e4:	strhcc	r1, [r4, #128]	; 0x80
   146e8:	ldrh	r1, [r0, #12]
   146ec:	sub	r0, r0, #36	; 0x24
   146f0:	str	r0, [r4, #32]
   146f4:	strh	r1, [r4, #130]	; 0x82
   146f8:	ldr	r0, [r4, #156]	; 0x9c
   146fc:	sub	r0, r0, #1
   14700:	str	r0, [r4, #156]	; 0x9c
   14704:	mov	r0, r6
   14708:	sub	sp, fp, #16
   1470c:	pop	{r4, r5, r6, sl, fp, pc}
   14710:	ldr	r0, [pc, #24]	; 14730 <flatcc_builder_end_buffer@@Base+0x130>
   14714:	ldr	r1, [pc, #24]	; 14734 <flatcc_builder_end_buffer@@Base+0x134>
   14718:	ldr	r3, [pc, #24]	; 14738 <flatcc_builder_end_buffer@@Base+0x138>
   1471c:	movw	r2, #838	; 0x346
   14720:	add	r0, pc, r0
   14724:	add	r1, pc, r1
   14728:	add	r3, pc, r3
   1472c:	bl	12418 <__assert_fail@plt>
   14730:	muleq	r0, r0, r9
   14734:	andeq	r4, r0, r6, asr #14
   14738:			; <UNDEFINED> instruction: 0x000049b4

0001473c <flatcc_builder_start_struct@@Base>:
   1473c:	push	{r4, r5, r6, r7, fp, lr}
   14740:	add	fp, sp, #16
   14744:	sub	sp, sp, #8
   14748:	mov	r6, r1
   1474c:	mov	r1, r2
   14750:	mov	r4, r0
   14754:	bl	144c0 <flatcc_builder_start_buffer@@Base+0xc0>
   14758:	mov	r5, #0
   1475c:	cmp	r0, #0
   14760:	bne	14810 <flatcc_builder_start_struct@@Base+0xd4>
   14764:	ldr	r2, [r4, #32]
   14768:	mov	r0, #2
   1476c:	mvn	r7, #3
   14770:	strh	r0, [r2, #14]
   14774:	ldr	r1, [r4, #28]
   14778:	ldr	r3, [r4, #64]	; 0x40
   1477c:	ldr	r0, [r4, #60]	; 0x3c
   14780:	sub	r3, r3, r1
   14784:	add	r0, r0, r1
   14788:	cmn	r3, #4
   1478c:	str	r0, [r4, #16]
   14790:	movcs	r3, r7
   14794:	str	r3, [r4, #24]
   14798:	str	r7, [r2, #4]
   1479c:	ldr	r7, [r4, #20]
   147a0:	add	r2, r7, r6
   147a4:	cmp	r2, r3
   147a8:	str	r2, [r4, #20]
   147ac:	bcc	1480c <flatcc_builder_start_struct@@Base+0xd0>
   147b0:	ldr	r0, [r4, #40]	; 0x28
   147b4:	ldr	r6, [r4, #48]	; 0x30
   147b8:	add	r1, r1, r2
   147bc:	mov	r3, #1
   147c0:	str	r3, [sp]
   147c4:	add	r2, r1, #1
   147c8:	add	r1, r4, #60	; 0x3c
   147cc:	mov	r3, #1
   147d0:	blx	r6
   147d4:	cmp	r0, #0
   147d8:	bne	14810 <flatcc_builder_start_struct@@Base+0xd4>
   147dc:	ldr	r1, [r4, #28]
   147e0:	ldr	r0, [r4, #60]	; 0x3c
   147e4:	ldr	r3, [r4, #64]	; 0x40
   147e8:	ldr	r2, [r4, #32]
   147ec:	add	r0, r0, r1
   147f0:	sub	r1, r3, r1
   147f4:	mvn	r3, #3
   147f8:	cmn	r1, #4
   147fc:	str	r0, [r4, #16]
   14800:	movcs	r1, r3
   14804:	str	r1, [r4, #24]
   14808:	str	r3, [r2, #4]
   1480c:	add	r5, r0, r7
   14810:	mov	r0, r5
   14814:	sub	sp, fp, #16
   14818:	pop	{r4, r5, r6, r7, fp, pc}

0001481c <flatcc_builder_struct_edit@@Base>:
   1481c:	ldr	r0, [r0, #16]
   14820:	bx	lr

00014824 <flatcc_builder_end_struct@@Base>:
   14824:	push	{r4, r5, fp, lr}
   14828:	add	fp, sp, #8
   1482c:	mov	r4, r0
   14830:	ldr	r0, [r0, #32]
   14834:	ldrh	r0, [r0, #14]
   14838:	cmp	r0, #2
   1483c:	bne	148dc <flatcc_builder_end_struct@@Base+0xb8>
   14840:	ldrh	r3, [r4, #130]	; 0x82
   14844:	ldr	r1, [r4, #16]
   14848:	ldr	r2, [r4, #20]
   1484c:	mov	r0, r4
   14850:	bl	142b0 <flatcc_builder_create_struct@@Base>
   14854:	mov	r5, r0
   14858:	cmp	r0, #0
   1485c:	beq	148d4 <flatcc_builder_end_struct@@Base+0xb0>
   14860:	ldr	r0, [r4, #16]
   14864:	ldr	r2, [r4, #20]
   14868:	mov	r1, #0
   1486c:	bl	123f4 <memset@plt>
   14870:	ldr	r0, [r4, #32]
   14874:	ldr	r1, [r4, #60]	; 0x3c
   14878:	ldr	ip, [r4, #64]	; 0x40
   1487c:	ldr	r3, [r0, #8]
   14880:	str	r3, [r4, #20]
   14884:	ldr	r3, [r0]
   14888:	str	r3, [r4, #28]
   1488c:	add	r1, r1, r3
   14890:	ldr	r2, [r0, #4]
   14894:	str	r1, [r4, #16]
   14898:	sub	r1, ip, r3
   1489c:	cmp	r1, r2
   148a0:	movhi	r1, r2
   148a4:	str	r1, [r4, #24]
   148a8:	ldrh	r1, [r4, #130]	; 0x82
   148ac:	ldrh	r2, [r4, #128]	; 0x80
   148b0:	cmp	r2, r1
   148b4:	strhcc	r1, [r4, #128]	; 0x80
   148b8:	ldrh	r1, [r0, #12]
   148bc:	sub	r0, r0, #36	; 0x24
   148c0:	str	r0, [r4, #32]
   148c4:	strh	r1, [r4, #130]	; 0x82
   148c8:	ldr	r0, [r4, #156]	; 0x9c
   148cc:	sub	r0, r0, #1
   148d0:	str	r0, [r4, #156]	; 0x9c
   148d4:	mov	r0, r5
   148d8:	pop	{r4, r5, fp, pc}
   148dc:	ldr	r0, [pc, #24]	; 148fc <flatcc_builder_end_struct@@Base+0xd8>
   148e0:	ldr	r1, [pc, #24]	; 14900 <flatcc_builder_end_struct@@Base+0xdc>
   148e4:	ldr	r3, [pc, #24]	; 14904 <flatcc_builder_end_struct@@Base+0xe0>
   148e8:	mov	r2, #872	; 0x368
   148ec:	add	r0, pc, r0
   148f0:	add	r1, pc, r1
   148f4:	add	r3, pc, r3
   148f8:	bl	12418 <__assert_fail@plt>
   148fc:	andeq	r4, r0, r9, asr #16
   14900:	andeq	r4, r0, sl, ror r5
   14904:	andeq	r4, r0, sp, ror #16

00014908 <flatcc_builder_extend_vector@@Base>:
   14908:	push	{r4, r5, fp, lr}
   1490c:	add	fp, sp, #8
   14910:	sub	sp, sp, #8
   14914:	mov	r4, r0
   14918:	ldr	r0, [r0, #32]
   1491c:	ldr	r2, [r0, #20]
   14920:	adds	r2, r2, r1
   14924:	bcs	149dc <flatcc_builder_extend_vector@@Base+0xd4>
   14928:	ldr	r3, [r0, #24]
   1492c:	cmp	r2, r3
   14930:	bhi	149dc <flatcc_builder_extend_vector@@Base+0xd4>
   14934:	str	r2, [r0, #20]
   14938:	ldr	r2, [r4, #32]
   1493c:	ldr	r5, [r4, #20]
   14940:	ldr	r0, [r4, #24]
   14944:	ldr	r2, [r2, #16]
   14948:	mla	r1, r2, r1, r5
   1494c:	cmp	r1, r0
   14950:	str	r1, [r4, #20]
   14954:	bcs	14960 <flatcc_builder_extend_vector@@Base+0x58>
   14958:	ldr	r0, [r4, #16]
   1495c:	b	149d0 <flatcc_builder_extend_vector@@Base+0xc8>
   14960:	ldr	r2, [r4, #28]
   14964:	ldr	r0, [r4, #40]	; 0x28
   14968:	ldr	ip, [r4, #48]	; 0x30
   1496c:	mov	r3, #1
   14970:	str	r3, [sp]
   14974:	mov	r3, #1
   14978:	add	r1, r1, r2
   1497c:	add	r2, r1, #1
   14980:	add	r1, r4, #60	; 0x3c
   14984:	blx	ip
   14988:	mov	r1, r0
   1498c:	mov	r0, #0
   14990:	cmp	r1, #0
   14994:	beq	149a0 <flatcc_builder_extend_vector@@Base+0x98>
   14998:	sub	sp, fp, #8
   1499c:	pop	{r4, r5, fp, pc}
   149a0:	ldr	r1, [r4, #28]
   149a4:	ldr	r0, [r4, #60]	; 0x3c
   149a8:	ldr	r3, [r4, #64]	; 0x40
   149ac:	ldr	r2, [r4, #32]
   149b0:	add	r0, r0, r1
   149b4:	sub	r1, r3, r1
   149b8:	mvn	r3, #3
   149bc:	cmn	r1, #4
   149c0:	str	r0, [r4, #16]
   149c4:	movcs	r1, r3
   149c8:	str	r1, [r4, #24]
   149cc:	str	r3, [r2, #4]
   149d0:	add	r0, r0, r5
   149d4:	sub	sp, fp, #8
   149d8:	pop	{r4, r5, fp, pc}
   149dc:	ldr	r0, [pc, #24]	; 149fc <flatcc_builder_extend_vector@@Base+0xf4>
   149e0:	ldr	r1, [pc, #24]	; 14a00 <flatcc_builder_extend_vector@@Base+0xf8>
   149e4:	ldr	r3, [pc, #24]	; 14a04 <flatcc_builder_extend_vector@@Base+0xfc>
   149e8:	mov	r2, #892	; 0x37c
   149ec:	add	r0, pc, r0
   149f0:	add	r1, pc, r1
   149f4:	add	r3, pc, r3
   149f8:	bl	12418 <__assert_fail@plt>
   149fc:	andeq	r5, r0, r4, asr #10
   14a00:	andeq	r4, r0, sl, ror r4
   14a04:	andeq	r5, r0, r7, asr r5

00014a08 <flatcc_builder_vector_push@@Base>:
   14a08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14a0c:	add	fp, sp, #24
   14a10:	sub	sp, sp, #8
   14a14:	mov	r5, r0
   14a18:	ldr	r0, [r0, #32]
   14a1c:	mov	r8, r1
   14a20:	ldrh	r1, [r0, #14]
   14a24:	cmp	r1, #4
   14a28:	bne	14b00 <flatcc_builder_vector_push@@Base+0xf8>
   14a2c:	ldr	r1, [r0, #20]
   14a30:	ldr	r2, [r0, #24]
   14a34:	cmp	r1, r2
   14a38:	bhi	14b20 <flatcc_builder_vector_push@@Base+0x118>
   14a3c:	add	r1, r1, #1
   14a40:	str	r1, [r0, #20]
   14a44:	ldr	r1, [r5, #32]
   14a48:	ldr	r4, [r5, #20]
   14a4c:	ldr	r0, [r5, #24]
   14a50:	ldr	r6, [r1, #16]
   14a54:	add	r1, r4, r6
   14a58:	cmp	r1, r0
   14a5c:	str	r1, [r5, #20]
   14a60:	bcs	14a84 <flatcc_builder_vector_push@@Base+0x7c>
   14a64:	ldr	r0, [r5, #16]
   14a68:	adds	r7, r0, r4
   14a6c:	beq	14af0 <flatcc_builder_vector_push@@Base+0xe8>
   14a70:	mov	r0, r7
   14a74:	mov	r1, r8
   14a78:	mov	r2, r6
   14a7c:	bl	12388 <memcpy@plt>
   14a80:	b	14af4 <flatcc_builder_vector_push@@Base+0xec>
   14a84:	ldr	r2, [r5, #28]
   14a88:	ldr	r0, [r5, #40]	; 0x28
   14a8c:	ldr	r7, [r5, #48]	; 0x30
   14a90:	mov	r3, #1
   14a94:	str	r3, [sp]
   14a98:	mov	r3, #1
   14a9c:	add	r1, r1, r2
   14aa0:	add	r2, r1, #1
   14aa4:	add	r1, r5, #60	; 0x3c
   14aa8:	blx	r7
   14aac:	mov	r7, #0
   14ab0:	cmp	r0, #0
   14ab4:	bne	14af4 <flatcc_builder_vector_push@@Base+0xec>
   14ab8:	ldr	r1, [r5, #28]
   14abc:	ldr	r0, [r5, #60]	; 0x3c
   14ac0:	ldr	r3, [r5, #64]	; 0x40
   14ac4:	ldr	r2, [r5, #32]
   14ac8:	add	r0, r0, r1
   14acc:	sub	r1, r3, r1
   14ad0:	mvn	r3, #3
   14ad4:	cmn	r1, #4
   14ad8:	str	r0, [r5, #16]
   14adc:	movcs	r1, r3
   14ae0:	str	r1, [r5, #24]
   14ae4:	str	r3, [r2, #4]
   14ae8:	adds	r7, r0, r4
   14aec:	bne	14a70 <flatcc_builder_vector_push@@Base+0x68>
   14af0:	mov	r7, #0
   14af4:	mov	r0, r7
   14af8:	sub	sp, fp, #24
   14afc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b00:	ldr	r0, [pc, #56]	; 14b40 <flatcc_builder_vector_push@@Base+0x138>
   14b04:	ldr	r1, [pc, #56]	; 14b44 <flatcc_builder_vector_push@@Base+0x13c>
   14b08:	ldr	r3, [pc, #56]	; 14b48 <flatcc_builder_vector_push@@Base+0x140>
   14b0c:	movw	r2, #907	; 0x38b
   14b10:	add	r0, pc, r0
   14b14:	add	r1, pc, r1
   14b18:	add	r3, pc, r3
   14b1c:	bl	12418 <__assert_fail@plt>
   14b20:	ldr	r0, [pc, #36]	; 14b4c <flatcc_builder_vector_push@@Base+0x144>
   14b24:	ldr	r1, [pc, #36]	; 14b50 <flatcc_builder_vector_push@@Base+0x148>
   14b28:	ldr	r3, [pc, #36]	; 14b54 <flatcc_builder_vector_push@@Base+0x14c>
   14b2c:	mov	r2, #908	; 0x38c
   14b30:	add	r0, pc, r0
   14b34:	add	r1, pc, r1
   14b38:	add	r3, pc, r3
   14b3c:	bl	12418 <__assert_fail@plt>
   14b40:	muleq	r0, r4, r6
   14b44:	andeq	r4, r0, r6, asr r3
   14b48:			; <UNDEFINED> instruction: 0x000046b8
   14b4c:	andeq	r4, r0, r3, ror #13
   14b50:	andeq	r4, r0, r6, lsr r3
   14b54:	muleq	r0, r8, r6

00014b58 <flatcc_builder_append_vector@@Base>:
   14b58:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14b5c:	add	fp, sp, #24
   14b60:	sub	sp, sp, #8
   14b64:	mov	r6, r0
   14b68:	ldr	r0, [r0, #32]
   14b6c:	mov	r8, r1
   14b70:	ldrh	r1, [r0, #14]
   14b74:	cmp	r1, #4
   14b78:	bne	14c78 <flatcc_builder_append_vector@@Base+0x120>
   14b7c:	ldr	r1, [r0, #20]
   14b80:	mov	r5, r2
   14b84:	adds	r1, r1, r2
   14b88:	bcs	14c58 <flatcc_builder_append_vector@@Base+0x100>
   14b8c:	ldr	r2, [r0, #24]
   14b90:	cmp	r1, r2
   14b94:	bhi	14c58 <flatcc_builder_append_vector@@Base+0x100>
   14b98:	str	r1, [r0, #20]
   14b9c:	ldr	r1, [r6, #32]
   14ba0:	ldr	r4, [r6, #20]
   14ba4:	ldr	r0, [r6, #24]
   14ba8:	ldr	r9, [r1, #16]
   14bac:	mla	r1, r9, r5, r4
   14bb0:	cmp	r1, r0
   14bb4:	str	r1, [r6, #20]
   14bb8:	bcs	14bdc <flatcc_builder_append_vector@@Base+0x84>
   14bbc:	ldr	r0, [r6, #16]
   14bc0:	adds	r7, r0, r4
   14bc4:	beq	14c48 <flatcc_builder_append_vector@@Base+0xf0>
   14bc8:	mul	r2, r9, r5
   14bcc:	mov	r0, r7
   14bd0:	mov	r1, r8
   14bd4:	bl	12388 <memcpy@plt>
   14bd8:	b	14c4c <flatcc_builder_append_vector@@Base+0xf4>
   14bdc:	ldr	r2, [r6, #28]
   14be0:	ldr	r0, [r6, #40]	; 0x28
   14be4:	ldr	r7, [r6, #48]	; 0x30
   14be8:	mov	r3, #1
   14bec:	str	r3, [sp]
   14bf0:	mov	r3, #1
   14bf4:	add	r1, r1, r2
   14bf8:	add	r2, r1, #1
   14bfc:	add	r1, r6, #60	; 0x3c
   14c00:	blx	r7
   14c04:	mov	r7, #0
   14c08:	cmp	r0, #0
   14c0c:	bne	14c4c <flatcc_builder_append_vector@@Base+0xf4>
   14c10:	ldr	r1, [r6, #28]
   14c14:	ldr	r0, [r6, #60]	; 0x3c
   14c18:	ldr	r3, [r6, #64]	; 0x40
   14c1c:	ldr	r2, [r6, #32]
   14c20:	add	r0, r0, r1
   14c24:	sub	r1, r3, r1
   14c28:	mvn	r3, #3
   14c2c:	cmn	r1, #4
   14c30:	str	r0, [r6, #16]
   14c34:	movcs	r1, r3
   14c38:	str	r1, [r6, #24]
   14c3c:	str	r3, [r2, #4]
   14c40:	adds	r7, r0, r4
   14c44:	bne	14bc8 <flatcc_builder_append_vector@@Base+0x70>
   14c48:	mov	r7, #0
   14c4c:	mov	r0, r7
   14c50:	sub	sp, fp, #24
   14c54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c58:	ldr	r0, [pc, #68]	; 14ca4 <flatcc_builder_append_vector@@Base+0x14c>
   14c5c:	ldr	r1, [pc, #68]	; 14ca8 <flatcc_builder_append_vector@@Base+0x150>
   14c60:	ldr	r3, [pc, #68]	; 14cac <flatcc_builder_append_vector@@Base+0x154>
   14c64:	mov	r2, #892	; 0x37c
   14c68:	add	r0, pc, r0
   14c6c:	add	r1, pc, r1
   14c70:	add	r3, pc, r3
   14c74:	bl	12418 <__assert_fail@plt>
   14c78:	ldr	r0, [pc, #24]	; 14c98 <flatcc_builder_append_vector@@Base+0x140>
   14c7c:	ldr	r1, [pc, #24]	; 14c9c <flatcc_builder_append_vector@@Base+0x144>
   14c80:	ldr	r3, [pc, #24]	; 14ca0 <flatcc_builder_append_vector@@Base+0x148>
   14c84:	movw	r2, #915	; 0x393
   14c88:	add	r0, pc, r0
   14c8c:	add	r1, pc, r1
   14c90:	add	r3, pc, r3
   14c94:	bl	12418 <__assert_fail@plt>
   14c98:	andeq	r4, r0, ip, lsl r5
   14c9c:	ldrdeq	r4, [r0], -lr
   14ca0:	andeq	r4, r0, r0, asr #11
   14ca4:	andeq	r5, r0, r8, asr #5
   14ca8:	strdeq	r4, [r0], -lr
   14cac:	ldrdeq	r5, [r0], -fp

00014cb0 <flatcc_builder_extend_offset_vector@@Base>:
   14cb0:	push	{r4, r5, fp, lr}
   14cb4:	add	fp, sp, #8
   14cb8:	sub	sp, sp, #8
   14cbc:	mov	r4, r0
   14cc0:	ldr	r0, [r0, #32]
   14cc4:	ldr	r2, [r0, #20]
   14cc8:	adds	r2, r2, r1
   14ccc:	cmpcc	r2, #1073741824	; 0x40000000
   14cd0:	bcc	14cf4 <flatcc_builder_extend_offset_vector@@Base+0x44>
   14cd4:	ldr	r0, [pc, #184]	; 14d94 <flatcc_builder_extend_offset_vector@@Base+0xe4>
   14cd8:	ldr	r1, [pc, #184]	; 14d98 <flatcc_builder_extend_offset_vector@@Base+0xe8>
   14cdc:	ldr	r3, [pc, #184]	; 14d9c <flatcc_builder_extend_offset_vector@@Base+0xec>
   14ce0:	mov	r2, #892	; 0x37c
   14ce4:	add	r0, pc, r0
   14ce8:	add	r1, pc, r1
   14cec:	add	r3, pc, r3
   14cf0:	bl	12418 <__assert_fail@plt>
   14cf4:	str	r2, [r0, #20]
   14cf8:	ldr	r5, [r4, #20]
   14cfc:	ldr	r0, [r4, #24]
   14d00:	add	r1, r5, r1, lsl #2
   14d04:	cmp	r1, r0
   14d08:	str	r1, [r4, #20]
   14d0c:	bcs	14d18 <flatcc_builder_extend_offset_vector@@Base+0x68>
   14d10:	ldr	r0, [r4, #16]
   14d14:	b	14d88 <flatcc_builder_extend_offset_vector@@Base+0xd8>
   14d18:	ldr	r2, [r4, #28]
   14d1c:	ldr	r0, [r4, #40]	; 0x28
   14d20:	ldr	ip, [r4, #48]	; 0x30
   14d24:	mov	r3, #1
   14d28:	str	r3, [sp]
   14d2c:	mov	r3, #1
   14d30:	add	r1, r1, r2
   14d34:	add	r2, r1, #1
   14d38:	add	r1, r4, #60	; 0x3c
   14d3c:	blx	ip
   14d40:	mov	r1, r0
   14d44:	mov	r0, #0
   14d48:	cmp	r1, #0
   14d4c:	beq	14d58 <flatcc_builder_extend_offset_vector@@Base+0xa8>
   14d50:	sub	sp, fp, #8
   14d54:	pop	{r4, r5, fp, pc}
   14d58:	ldr	r1, [r4, #28]
   14d5c:	ldr	r0, [r4, #60]	; 0x3c
   14d60:	ldr	r3, [r4, #64]	; 0x40
   14d64:	ldr	r2, [r4, #32]
   14d68:	add	r0, r0, r1
   14d6c:	sub	r1, r3, r1
   14d70:	mvn	r3, #3
   14d74:	cmn	r1, #4
   14d78:	str	r0, [r4, #16]
   14d7c:	movcs	r1, r3
   14d80:	str	r1, [r4, #24]
   14d84:	str	r3, [r2, #4]
   14d88:	add	r0, r0, r5
   14d8c:	sub	sp, fp, #8
   14d90:	pop	{r4, r5, fp, pc}
   14d94:	andeq	r5, r0, ip, asr #4
   14d98:	andeq	r4, r0, r2, lsl #3
   14d9c:	andeq	r5, r0, pc, asr r2

00014da0 <flatcc_builder_offset_vector_push@@Base>:
   14da0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14da4:	add	fp, sp, #24
   14da8:	sub	sp, sp, #8
   14dac:	mov	r6, r0
   14db0:	ldr	r0, [r0, #32]
   14db4:	mov	r8, r1
   14db8:	ldrh	r1, [r0, #14]
   14dbc:	cmp	r1, #5
   14dc0:	bne	14e74 <flatcc_builder_offset_vector_push@@Base+0xd4>
   14dc4:	ldr	r1, [r0, #20]
   14dc8:	mov	r5, #0
   14dcc:	cmn	r1, #-1073741823	; 0xc0000001
   14dd0:	beq	14e68 <flatcc_builder_offset_vector_push@@Base+0xc8>
   14dd4:	add	r1, r1, #1
   14dd8:	str	r1, [r0, #20]
   14ddc:	ldr	r7, [r6, #20]
   14de0:	ldr	r0, [r6, #24]
   14de4:	add	r1, r7, #4
   14de8:	cmp	r1, r0
   14dec:	str	r1, [r6, #20]
   14df0:	bcs	14dfc <flatcc_builder_offset_vector_push@@Base+0x5c>
   14df4:	ldr	r0, [r6, #16]
   14df8:	b	14e5c <flatcc_builder_offset_vector_push@@Base+0xbc>
   14dfc:	ldr	r1, [r6, #28]
   14e00:	ldr	r0, [r6, #40]	; 0x28
   14e04:	ldr	r4, [r6, #48]	; 0x30
   14e08:	mov	r2, #1
   14e0c:	mov	r3, #1
   14e10:	str	r2, [sp]
   14e14:	add	r1, r7, r1
   14e18:	add	r2, r1, #5
   14e1c:	add	r1, r6, #60	; 0x3c
   14e20:	blx	r4
   14e24:	cmp	r0, #0
   14e28:	bne	14e68 <flatcc_builder_offset_vector_push@@Base+0xc8>
   14e2c:	ldr	r1, [r6, #28]
   14e30:	ldr	r0, [r6, #60]	; 0x3c
   14e34:	ldr	r3, [r6, #64]	; 0x40
   14e38:	ldr	r2, [r6, #32]
   14e3c:	add	r0, r0, r1
   14e40:	sub	r1, r3, r1
   14e44:	mvn	r3, #3
   14e48:	cmn	r1, #4
   14e4c:	str	r0, [r6, #16]
   14e50:	movcs	r1, r3
   14e54:	str	r1, [r6, #24]
   14e58:	str	r3, [r2, #4]
   14e5c:	adds	r0, r0, r7
   14e60:	movne	r5, r0
   14e64:	strne	r8, [r0]
   14e68:	mov	r0, r5
   14e6c:	sub	sp, fp, #24
   14e70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e74:	ldr	r0, [pc, #24]	; 14e94 <flatcc_builder_offset_vector_push@@Base+0xf4>
   14e78:	ldr	r1, [pc, #24]	; 14e98 <flatcc_builder_offset_vector_push@@Base+0xf8>
   14e7c:	ldr	r3, [pc, #24]	; 14e9c <flatcc_builder_offset_vector_push@@Base+0xfc>
   14e80:	movw	r2, #934	; 0x3a6
   14e84:	add	r0, pc, r0
   14e88:	add	r1, pc, r1
   14e8c:	add	r3, pc, r3
   14e90:	bl	12418 <__assert_fail@plt>
   14e94:	andeq	r4, r0, r9, lsl r4
   14e98:	andeq	r3, r0, r2, ror #31
   14e9c:	andeq	r4, r0, r4, asr #8

00014ea0 <flatcc_builder_append_offset_vector@@Base>:
   14ea0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ea4:	add	fp, sp, #24
   14ea8:	sub	sp, sp, #8
   14eac:	mov	r6, r0
   14eb0:	ldr	r0, [r0, #32]
   14eb4:	mov	r8, r1
   14eb8:	ldrh	r1, [r0, #14]
   14ebc:	cmp	r1, #5
   14ec0:	bne	14fb0 <flatcc_builder_append_offset_vector@@Base+0x110>
   14ec4:	ldr	r1, [r0, #20]
   14ec8:	mov	r5, r2
   14ecc:	adds	r1, r1, r2
   14ed0:	cmpcc	r1, #1073741824	; 0x40000000
   14ed4:	bcc	14ef8 <flatcc_builder_append_offset_vector@@Base+0x58>
   14ed8:	ldr	r0, [pc, #252]	; 14fdc <flatcc_builder_append_offset_vector@@Base+0x13c>
   14edc:	ldr	r1, [pc, #252]	; 14fe0 <flatcc_builder_append_offset_vector@@Base+0x140>
   14ee0:	ldr	r3, [pc, #252]	; 14fe4 <flatcc_builder_append_offset_vector@@Base+0x144>
   14ee4:	mov	r2, #892	; 0x37c
   14ee8:	add	r0, pc, r0
   14eec:	add	r1, pc, r1
   14ef0:	add	r3, pc, r3
   14ef4:	bl	12418 <__assert_fail@plt>
   14ef8:	str	r1, [r0, #20]
   14efc:	ldr	r4, [r6, #20]
   14f00:	ldr	r0, [r6, #24]
   14f04:	add	r1, r4, r5, lsl #2
   14f08:	cmp	r1, r0
   14f0c:	str	r1, [r6, #20]
   14f10:	bcs	14f34 <flatcc_builder_append_offset_vector@@Base+0x94>
   14f14:	ldr	r0, [r6, #16]
   14f18:	adds	r7, r0, r4
   14f1c:	beq	14fa0 <flatcc_builder_append_offset_vector@@Base+0x100>
   14f20:	lsl	r2, r5, #2
   14f24:	mov	r0, r7
   14f28:	mov	r1, r8
   14f2c:	bl	12388 <memcpy@plt>
   14f30:	b	14fa4 <flatcc_builder_append_offset_vector@@Base+0x104>
   14f34:	ldr	r2, [r6, #28]
   14f38:	ldr	r0, [r6, #40]	; 0x28
   14f3c:	ldr	r7, [r6, #48]	; 0x30
   14f40:	mov	r3, #1
   14f44:	str	r3, [sp]
   14f48:	mov	r3, #1
   14f4c:	add	r1, r1, r2
   14f50:	add	r2, r1, #1
   14f54:	add	r1, r6, #60	; 0x3c
   14f58:	blx	r7
   14f5c:	mov	r7, #0
   14f60:	cmp	r0, #0
   14f64:	bne	14fa4 <flatcc_builder_append_offset_vector@@Base+0x104>
   14f68:	ldr	r1, [r6, #28]
   14f6c:	ldr	r0, [r6, #60]	; 0x3c
   14f70:	ldr	r3, [r6, #64]	; 0x40
   14f74:	ldr	r2, [r6, #32]
   14f78:	add	r0, r0, r1
   14f7c:	sub	r1, r3, r1
   14f80:	mvn	r3, #3
   14f84:	cmn	r1, #4
   14f88:	str	r0, [r6, #16]
   14f8c:	movcs	r1, r3
   14f90:	str	r1, [r6, #24]
   14f94:	str	r3, [r2, #4]
   14f98:	adds	r7, r0, r4
   14f9c:	bne	14f20 <flatcc_builder_append_offset_vector@@Base+0x80>
   14fa0:	mov	r7, #0
   14fa4:	mov	r0, r7
   14fa8:	sub	sp, fp, #24
   14fac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14fb0:	ldr	r0, [pc, #24]	; 14fd0 <flatcc_builder_append_offset_vector@@Base+0x130>
   14fb4:	ldr	r1, [pc, #24]	; 14fd4 <flatcc_builder_append_offset_vector@@Base+0x134>
   14fb8:	ldr	r3, [pc, #24]	; 14fd8 <flatcc_builder_append_offset_vector@@Base+0x138>
   14fbc:	mov	r2, #948	; 0x3b4
   14fc0:	add	r0, pc, r0
   14fc4:	add	r1, pc, r1
   14fc8:	add	r3, pc, r3
   14fcc:	bl	12418 <__assert_fail@plt>
   14fd0:	ldrdeq	r4, [r0], -sp
   14fd4:	andeq	r3, r0, r6, lsr #29
   14fd8:	andeq	r4, r0, sl, ror #6
   14fdc:	andeq	r5, r0, r8, asr #32
   14fe0:	andeq	r3, r0, lr, ror pc
   14fe4:	andeq	r5, r0, fp, asr r0

00014fe8 <flatcc_builder_extend_string@@Base>:
   14fe8:	push	{r4, r5, fp, lr}
   14fec:	add	fp, sp, #8
   14ff0:	sub	sp, sp, #8
   14ff4:	mov	r4, r0
   14ff8:	ldr	r0, [r0, #32]
   14ffc:	ldrh	r2, [r0, #14]
   15000:	cmp	r2, #6
   15004:	bne	150b4 <flatcc_builder_extend_string@@Base+0xcc>
   15008:	ldr	r2, [r0, #20]
   1500c:	adds	r2, r2, r1
   15010:	bcs	150d4 <flatcc_builder_extend_string@@Base+0xec>
   15014:	str	r2, [r0, #20]
   15018:	ldr	r5, [r4, #20]
   1501c:	ldr	r0, [r4, #24]
   15020:	add	r1, r5, r1
   15024:	cmp	r1, r0
   15028:	str	r1, [r4, #20]
   1502c:	bcs	15038 <flatcc_builder_extend_string@@Base+0x50>
   15030:	ldr	r0, [r4, #16]
   15034:	b	150a8 <flatcc_builder_extend_string@@Base+0xc0>
   15038:	ldr	r2, [r4, #28]
   1503c:	ldr	r0, [r4, #40]	; 0x28
   15040:	ldr	ip, [r4, #48]	; 0x30
   15044:	mov	r3, #1
   15048:	str	r3, [sp]
   1504c:	mov	r3, #1
   15050:	add	r1, r1, r2
   15054:	add	r2, r1, #1
   15058:	add	r1, r4, #60	; 0x3c
   1505c:	blx	ip
   15060:	mov	r1, r0
   15064:	mov	r0, #0
   15068:	cmp	r1, #0
   1506c:	beq	15078 <flatcc_builder_extend_string@@Base+0x90>
   15070:	sub	sp, fp, #8
   15074:	pop	{r4, r5, fp, pc}
   15078:	ldr	r1, [r4, #28]
   1507c:	ldr	r0, [r4, #60]	; 0x3c
   15080:	ldr	r3, [r4, #64]	; 0x40
   15084:	ldr	r2, [r4, #32]
   15088:	add	r0, r0, r1
   1508c:	sub	r1, r3, r1
   15090:	mvn	r3, #3
   15094:	cmn	r1, #4
   15098:	str	r0, [r4, #16]
   1509c:	movcs	r1, r3
   150a0:	str	r1, [r4, #24]
   150a4:	str	r3, [r2, #4]
   150a8:	add	r0, r0, r5
   150ac:	sub	sp, fp, #8
   150b0:	pop	{r4, r5, fp, pc}
   150b4:	ldr	r0, [pc, #56]	; 150f4 <flatcc_builder_extend_string@@Base+0x10c>
   150b8:	ldr	r1, [pc, #56]	; 150f8 <flatcc_builder_extend_string@@Base+0x110>
   150bc:	ldr	r3, [pc, #56]	; 150fc <flatcc_builder_extend_string@@Base+0x114>
   150c0:	movw	r2, #957	; 0x3bd
   150c4:	add	r0, pc, r0
   150c8:	add	r1, pc, r1
   150cc:	add	r3, pc, r3
   150d0:	bl	12418 <__assert_fail@plt>
   150d4:	ldr	r0, [pc, #36]	; 15100 <flatcc_builder_extend_string@@Base+0x118>
   150d8:	ldr	r1, [pc, #36]	; 15104 <flatcc_builder_extend_string@@Base+0x11c>
   150dc:	ldr	r3, [pc, #36]	; 15108 <flatcc_builder_extend_string@@Base+0x120>
   150e0:	mov	r2, #892	; 0x37c
   150e4:	add	r0, pc, r0
   150e8:	add	r1, pc, r1
   150ec:	add	r3, pc, r3
   150f0:	bl	12418 <__assert_fail@plt>
   150f4:	andeq	r4, r0, r2, ror #5
   150f8:	andeq	r3, r0, r2, lsr #27
   150fc:	andeq	r4, r0, r6, lsl #6
   15100:	andeq	r4, r0, ip, asr #28
   15104:	andeq	r3, r0, r2, lsl #27
   15108:	andeq	r4, r0, pc, asr lr

0001510c <flatcc_builder_append_string@@Base>:
   1510c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15110:	add	fp, sp, #24
   15114:	sub	sp, sp, #8
   15118:	mov	r6, r0
   1511c:	ldr	r0, [r0, #32]
   15120:	mov	r8, r1
   15124:	ldrh	r1, [r0, #14]
   15128:	cmp	r1, #6
   1512c:	bne	151f8 <flatcc_builder_append_string@@Base+0xec>
   15130:	ldr	r1, [r0, #20]
   15134:	mov	r4, r2
   15138:	adds	r1, r1, r2
   1513c:	bcs	15218 <flatcc_builder_append_string@@Base+0x10c>
   15140:	str	r1, [r0, #20]
   15144:	ldr	r5, [r6, #20]
   15148:	ldr	r0, [r6, #24]
   1514c:	add	r1, r5, r4
   15150:	cmp	r1, r0
   15154:	str	r1, [r6, #20]
   15158:	bcs	1517c <flatcc_builder_append_string@@Base+0x70>
   1515c:	ldr	r0, [r6, #16]
   15160:	adds	r7, r0, r5
   15164:	beq	151e8 <flatcc_builder_append_string@@Base+0xdc>
   15168:	mov	r0, r7
   1516c:	mov	r1, r8
   15170:	mov	r2, r4
   15174:	bl	12388 <memcpy@plt>
   15178:	b	151ec <flatcc_builder_append_string@@Base+0xe0>
   1517c:	ldr	r2, [r6, #28]
   15180:	ldr	r0, [r6, #40]	; 0x28
   15184:	ldr	r7, [r6, #48]	; 0x30
   15188:	mov	r3, #1
   1518c:	str	r3, [sp]
   15190:	mov	r3, #1
   15194:	add	r1, r1, r2
   15198:	add	r2, r1, #1
   1519c:	add	r1, r6, #60	; 0x3c
   151a0:	blx	r7
   151a4:	mov	r7, #0
   151a8:	cmp	r0, #0
   151ac:	bne	151ec <flatcc_builder_append_string@@Base+0xe0>
   151b0:	ldr	r1, [r6, #28]
   151b4:	ldr	r0, [r6, #60]	; 0x3c
   151b8:	ldr	r3, [r6, #64]	; 0x40
   151bc:	ldr	r2, [r6, #32]
   151c0:	add	r0, r0, r1
   151c4:	sub	r1, r3, r1
   151c8:	mvn	r3, #3
   151cc:	cmn	r1, #4
   151d0:	str	r0, [r6, #16]
   151d4:	movcs	r1, r3
   151d8:	str	r1, [r6, #24]
   151dc:	str	r3, [r2, #4]
   151e0:	adds	r7, r0, r5
   151e4:	bne	15168 <flatcc_builder_append_string@@Base+0x5c>
   151e8:	mov	r7, #0
   151ec:	mov	r0, r7
   151f0:	sub	sp, fp, #24
   151f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   151f8:	ldr	r0, [pc, #56]	; 15238 <flatcc_builder_append_string@@Base+0x12c>
   151fc:	ldr	r1, [pc, #56]	; 1523c <flatcc_builder_append_string@@Base+0x130>
   15200:	ldr	r3, [pc, #56]	; 15240 <flatcc_builder_append_string@@Base+0x134>
   15204:	movw	r2, #966	; 0x3c6
   15208:	add	r0, pc, r0
   1520c:	add	r1, pc, r1
   15210:	add	r3, pc, r3
   15214:	bl	12418 <__assert_fail@plt>
   15218:	ldr	r0, [pc, #36]	; 15244 <flatcc_builder_append_string@@Base+0x138>
   1521c:	ldr	r1, [pc, #36]	; 15248 <flatcc_builder_append_string@@Base+0x13c>
   15220:	ldr	r3, [pc, #36]	; 1524c <flatcc_builder_append_string@@Base+0x140>
   15224:	mov	r2, #892	; 0x37c
   15228:	add	r0, pc, r0
   1522c:	add	r1, pc, r1
   15230:	add	r3, pc, r3
   15234:	bl	12418 <__assert_fail@plt>
   15238:	muleq	r0, lr, r1
   1523c:	andeq	r3, r0, lr, asr ip
   15240:	andeq	r4, r0, r1, lsl #4
   15244:	andeq	r4, r0, r8, lsl #26
   15248:	andeq	r3, r0, lr, lsr ip
   1524c:	andeq	r4, r0, fp, lsl sp

00015250 <flatcc_builder_append_string_str@@Base>:
   15250:	push	{r4, r5, fp, lr}
   15254:	add	fp, sp, #8
   15258:	mov	r5, r0
   1525c:	mov	r0, r1
   15260:	mov	r4, r1
   15264:	bl	123dc <strlen@plt>
   15268:	mov	r2, r0
   1526c:	mov	r0, r5
   15270:	mov	r1, r4
   15274:	pop	{r4, r5, fp, lr}
   15278:	b	1510c <flatcc_builder_append_string@@Base>

0001527c <flatcc_builder_append_string_strn@@Base>:
   1527c:	push	{r4, r5, r6, sl, fp, lr}
   15280:	add	fp, sp, #16
   15284:	mov	r6, r0
   15288:	mov	r5, r1
   1528c:	mov	r0, r1
   15290:	mov	r1, #0
   15294:	mov	r4, r2
   15298:	bl	12400 <memchr@plt>
   1529c:	cmp	r0, #0
   152a0:	mov	r1, r5
   152a4:	subne	r4, r0, r5
   152a8:	mov	r0, r6
   152ac:	mov	r2, r4
   152b0:	pop	{r4, r5, r6, sl, fp, lr}
   152b4:	b	1510c <flatcc_builder_append_string@@Base>

000152b8 <flatcc_builder_truncate_vector@@Base>:
   152b8:	push	{fp, lr}
   152bc:	mov	fp, sp
   152c0:	ldr	r2, [r0, #32]
   152c4:	ldrh	r3, [r2, #14]
   152c8:	cmp	r3, #4
   152cc:	bne	15314 <flatcc_builder_truncate_vector@@Base+0x5c>
   152d0:	ldr	r3, [r2, #20]
   152d4:	cmp	r3, r1
   152d8:	bcc	15334 <flatcc_builder_truncate_vector@@Base+0x7c>
   152dc:	sub	r3, r3, r1
   152e0:	str	r3, [r2, #20]
   152e4:	ldr	r2, [r0, #32]
   152e8:	ldr	r3, [r0, #20]
   152ec:	ldr	ip, [r0, #16]
   152f0:	ldr	r2, [r2, #16]
   152f4:	mls	r3, r2, r1, r3
   152f8:	mul	r2, r2, r1
   152fc:	mov	r1, #0
   15300:	str	r3, [r0, #20]
   15304:	add	r0, ip, r3
   15308:	bl	123f4 <memset@plt>
   1530c:	mov	r0, #0
   15310:	pop	{fp, pc}
   15314:	ldr	r0, [pc, #56]	; 15354 <flatcc_builder_truncate_vector@@Base+0x9c>
   15318:	ldr	r1, [pc, #56]	; 15358 <flatcc_builder_truncate_vector@@Base+0xa0>
   1531c:	ldr	r3, [pc, #56]	; 1535c <flatcc_builder_truncate_vector@@Base+0xa4>
   15320:	movw	r2, #985	; 0x3d9
   15324:	add	r0, pc, r0
   15328:	add	r1, pc, r1
   1532c:	add	r3, pc, r3
   15330:	bl	12418 <__assert_fail@plt>
   15334:	ldr	r0, [pc, #36]	; 15360 <flatcc_builder_truncate_vector@@Base+0xa8>
   15338:	ldr	r1, [pc, #36]	; 15364 <flatcc_builder_truncate_vector@@Base+0xac>
   1533c:	ldr	r3, [pc, #36]	; 15368 <flatcc_builder_truncate_vector@@Base+0xb0>
   15340:	movw	r2, #986	; 0x3da
   15344:	add	r0, pc, r0
   15348:	add	r1, pc, r1
   1534c:	add	r3, pc, r3
   15350:	bl	12418 <__assert_fail@plt>
   15354:	andeq	r3, r0, r0, lsl #29
   15358:	andeq	r3, r0, r2, asr #22
   1535c:	andeq	r4, r0, r2, lsr r1
   15360:	andeq	r4, r0, r9, asr r1
   15364:	andeq	r3, r0, r2, lsr #22
   15368:	andeq	r4, r0, r2, lsl r1

0001536c <flatcc_builder_truncate_offset_vector@@Base>:
   1536c:	push	{fp, lr}
   15370:	mov	fp, sp
   15374:	ldr	r2, [r0, #32]
   15378:	ldrh	r3, [r2, #14]
   1537c:	cmp	r3, #5
   15380:	bne	153c8 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   15384:	ldr	r3, [r2, #20]
   15388:	cmp	r3, r1
   1538c:	bcc	153e8 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   15390:	sub	r3, r3, r1
   15394:	str	r3, [r2, #20]
   15398:	ldr	r2, [r0, #32]
   1539c:	ldr	r3, [r0, #20]
   153a0:	ldr	ip, [r0, #16]
   153a4:	ldr	r2, [r2, #16]
   153a8:	mls	r3, r2, r1, r3
   153ac:	mul	r2, r2, r1
   153b0:	mov	r1, #0
   153b4:	str	r3, [r0, #20]
   153b8:	add	r0, ip, r3
   153bc:	bl	123f4 <memset@plt>
   153c0:	mov	r0, #0
   153c4:	pop	{fp, pc}
   153c8:	ldr	r0, [pc, #56]	; 15408 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   153cc:	ldr	r1, [pc, #56]	; 1540c <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   153d0:	ldr	r3, [pc, #56]	; 15410 <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   153d4:	movw	r2, #994	; 0x3e2
   153d8:	add	r0, pc, r0
   153dc:	add	r1, pc, r1
   153e0:	add	r3, pc, r3
   153e4:	bl	12418 <__assert_fail@plt>
   153e8:	ldr	r0, [pc, #36]	; 15414 <flatcc_builder_truncate_offset_vector@@Base+0xa8>
   153ec:	ldr	r1, [pc, #36]	; 15418 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   153f0:	ldr	r3, [pc, #36]	; 1541c <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   153f4:	movw	r2, #995	; 0x3e3
   153f8:	add	r0, pc, r0
   153fc:	add	r1, pc, r1
   15400:	add	r3, pc, r3
   15404:	bl	12418 <__assert_fail@plt>
   15408:	andeq	r3, r0, r5, asr #29
   1540c:	andeq	r3, r0, lr, lsl #21
   15410:	andeq	r4, r0, r1, ror #1
   15414:	andeq	r4, r0, pc, lsl #2
   15418:	andeq	r3, r0, lr, ror #20
   1541c:	andeq	r4, r0, r1, asr #1

00015420 <flatcc_builder_truncate_string@@Base>:
   15420:	push	{fp, lr}
   15424:	mov	fp, sp
   15428:	mov	r2, r1
   1542c:	ldr	r1, [r0, #32]
   15430:	ldrh	r3, [r1, #14]
   15434:	cmp	r3, #6
   15438:	bne	15474 <flatcc_builder_truncate_string@@Base+0x54>
   1543c:	ldr	r3, [r1, #20]
   15440:	cmp	r3, r2
   15444:	bcc	15494 <flatcc_builder_truncate_string@@Base+0x74>
   15448:	sub	r3, r3, r2
   1544c:	str	r3, [r1, #20]
   15450:	ldr	r3, [r0, #20]
   15454:	ldr	r1, [r0, #16]
   15458:	sub	r3, r3, r2
   1545c:	str	r3, [r0, #20]
   15460:	add	r0, r1, r3
   15464:	mov	r1, #0
   15468:	bl	123f4 <memset@plt>
   1546c:	mov	r0, #0
   15470:	pop	{fp, pc}
   15474:	ldr	r0, [pc, #56]	; 154b4 <flatcc_builder_truncate_string@@Base+0x94>
   15478:	ldr	r1, [pc, #56]	; 154b8 <flatcc_builder_truncate_string@@Base+0x98>
   1547c:	ldr	r3, [pc, #56]	; 154bc <flatcc_builder_truncate_string@@Base+0x9c>
   15480:	movw	r2, #1003	; 0x3eb
   15484:	add	r0, pc, r0
   15488:	add	r1, pc, r1
   1548c:	add	r3, pc, r3
   15490:	bl	12418 <__assert_fail@plt>
   15494:	ldr	r0, [pc, #36]	; 154c0 <flatcc_builder_truncate_string@@Base+0xa0>
   15498:	ldr	r1, [pc, #36]	; 154c4 <flatcc_builder_truncate_string@@Base+0xa4>
   1549c:	ldr	r3, [pc, #36]	; 154c8 <flatcc_builder_truncate_string@@Base+0xa8>
   154a0:	mov	r2, #1004	; 0x3ec
   154a4:	add	r0, pc, r0
   154a8:	add	r1, pc, r1
   154ac:	add	r3, pc, r3
   154b0:	bl	12418 <__assert_fail@plt>
   154b4:	andeq	r3, r0, r2, lsr #30
   154b8:	andeq	r3, r0, r2, ror #19
   154bc:	strheq	r4, [r0], -r6
   154c0:	ldrdeq	r4, [r0], -sp
   154c4:	andeq	r3, r0, r2, asr #19
   154c8:	muleq	r0, r6, r0

000154cc <flatcc_builder_start_vector@@Base>:
   154cc:	push	{r4, r5, r6, r7, fp, lr}
   154d0:	add	fp, sp, #16
   154d4:	mov	r7, #4
   154d8:	cmp	r2, #4
   154dc:	mov	r6, r1
   154e0:	mov	r5, r3
   154e4:	mov	r4, r0
   154e8:	movls	r2, r7
   154ec:	mov	r1, r2
   154f0:	bl	144c0 <flatcc_builder_start_buffer@@Base+0xc0>
   154f4:	mov	r1, r0
   154f8:	mvn	r0, #0
   154fc:	cmp	r1, #0
   15500:	popne	{r4, r5, r6, r7, fp, pc}
   15504:	ldr	r0, [r4, #32]
   15508:	str	r6, [r0, #16]
   1550c:	mov	r0, #0
   15510:	ldr	r1, [r4, #32]
   15514:	str	r0, [r1, #20]
   15518:	ldr	r1, [r4, #32]
   1551c:	str	r5, [r1, #24]
   15520:	ldr	r1, [r4, #32]
   15524:	strh	r7, [r1, #14]
   15528:	ldr	r2, [r4, #28]
   1552c:	ldr	r3, [r4, #60]	; 0x3c
   15530:	ldr	r7, [r4, #64]	; 0x40
   15534:	add	r3, r3, r2
   15538:	sub	r2, r7, r2
   1553c:	str	r3, [r4, #16]
   15540:	mvn	r3, #3
   15544:	cmn	r2, #4
   15548:	movcs	r2, r3
   1554c:	str	r2, [r4, #24]
   15550:	str	r3, [r1, #4]
   15554:	pop	{r4, r5, r6, r7, fp, pc}

00015558 <flatcc_builder_start_offset_vector@@Base>:
   15558:	push	{r4, r5, fp, lr}
   1555c:	add	fp, sp, #8
   15560:	mov	r1, #4
   15564:	mov	r4, r0
   15568:	mov	r5, #4
   1556c:	bl	144c0 <flatcc_builder_start_buffer@@Base+0xc0>
   15570:	mov	r1, r0
   15574:	mvn	r0, #0
   15578:	cmp	r1, #0
   1557c:	popne	{r4, r5, fp, pc}
   15580:	ldr	r0, [r4, #32]
   15584:	mov	r2, #5
   15588:	str	r5, [r0, #16]
   1558c:	mov	r0, #0
   15590:	ldr	r1, [r4, #32]
   15594:	str	r0, [r1, #20]
   15598:	ldr	r1, [r4, #32]
   1559c:	strh	r2, [r1, #14]
   155a0:	ldr	r2, [r4, #28]
   155a4:	ldr	r3, [r4, #60]	; 0x3c
   155a8:	ldr	r5, [r4, #64]	; 0x40
   155ac:	add	r3, r3, r2
   155b0:	sub	r2, r5, r2
   155b4:	str	r3, [r4, #16]
   155b8:	mvn	r3, #3
   155bc:	cmn	r2, #4
   155c0:	movcs	r2, r3
   155c4:	str	r2, [r4, #24]
   155c8:	str	r3, [r1, #4]
   155cc:	pop	{r4, r5, fp, pc}

000155d0 <flatcc_builder_create_offset_vector@@Base>:
   155d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   155d4:	add	fp, sp, #24
   155d8:	sub	sp, sp, #8
   155dc:	mov	r8, r1
   155e0:	mov	r1, #4
   155e4:	mov	r6, r2
   155e8:	mov	r4, r0
   155ec:	mov	r7, #4
   155f0:	bl	144c0 <flatcc_builder_start_buffer@@Base+0xc0>
   155f4:	cmp	r0, #0
   155f8:	beq	15608 <flatcc_builder_create_offset_vector@@Base+0x38>
   155fc:	mov	r0, #0
   15600:	sub	sp, fp, #24
   15604:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15608:	ldr	r0, [r4, #32]
   1560c:	mov	r1, #0
   15610:	str	r7, [r0, #16]
   15614:	ldr	r0, [r4, #32]
   15618:	str	r1, [r0, #20]
   1561c:	mov	r1, #5
   15620:	ldr	r0, [r4, #32]
   15624:	strh	r1, [r0, #14]
   15628:	ldr	r1, [r4, #28]
   1562c:	ldr	r2, [r4, #60]	; 0x3c
   15630:	ldr	r3, [r4, #64]	; 0x40
   15634:	add	r2, r2, r1
   15638:	sub	r1, r3, r1
   1563c:	str	r2, [r4, #16]
   15640:	mvn	r2, #3
   15644:	cmn	r1, #4
   15648:	movcs	r1, r2
   1564c:	str	r1, [r4, #24]
   15650:	str	r2, [r0, #4]
   15654:	ldr	r1, [r0, #20]
   15658:	adds	r1, r1, r6
   1565c:	cmpcc	r1, #1073741824	; 0x40000000
   15660:	bcc	15684 <flatcc_builder_create_offset_vector@@Base+0xb4>
   15664:	ldr	r0, [pc, #200]	; 15734 <flatcc_builder_create_offset_vector@@Base+0x164>
   15668:	ldr	r1, [pc, #200]	; 15738 <flatcc_builder_create_offset_vector@@Base+0x168>
   1566c:	ldr	r3, [pc, #200]	; 1573c <flatcc_builder_create_offset_vector@@Base+0x16c>
   15670:	mov	r2, #892	; 0x37c
   15674:	add	r0, pc, r0
   15678:	add	r1, pc, r1
   1567c:	add	r3, pc, r3
   15680:	bl	12418 <__assert_fail@plt>
   15684:	str	r1, [r0, #20]
   15688:	ldr	r7, [r4, #20]
   1568c:	ldr	r0, [r4, #24]
   15690:	add	r1, r7, r6, lsl #2
   15694:	cmp	r1, r0
   15698:	str	r1, [r4, #20]
   1569c:	bcs	156b0 <flatcc_builder_create_offset_vector@@Base+0xe0>
   156a0:	ldr	r0, [r4, #16]
   156a4:	adds	r0, r0, r7
   156a8:	bne	15718 <flatcc_builder_create_offset_vector@@Base+0x148>
   156ac:	b	155fc <flatcc_builder_create_offset_vector@@Base+0x2c>
   156b0:	ldr	r2, [r4, #28]
   156b4:	ldr	r0, [r4, #40]	; 0x28
   156b8:	ldr	r5, [r4, #48]	; 0x30
   156bc:	mov	r3, #1
   156c0:	str	r3, [sp]
   156c4:	mov	r3, #1
   156c8:	add	r1, r1, r2
   156cc:	add	r2, r1, #1
   156d0:	add	r1, r4, #60	; 0x3c
   156d4:	blx	r5
   156d8:	cmp	r0, #0
   156dc:	bne	155fc <flatcc_builder_create_offset_vector@@Base+0x2c>
   156e0:	ldr	r1, [r4, #28]
   156e4:	ldr	r0, [r4, #60]	; 0x3c
   156e8:	ldr	r3, [r4, #64]	; 0x40
   156ec:	ldr	r2, [r4, #32]
   156f0:	add	r0, r0, r1
   156f4:	sub	r1, r3, r1
   156f8:	mvn	r3, #3
   156fc:	cmn	r1, #4
   15700:	str	r0, [r4, #16]
   15704:	movcs	r1, r3
   15708:	str	r1, [r4, #24]
   1570c:	str	r3, [r2, #4]
   15710:	adds	r0, r0, r7
   15714:	beq	155fc <flatcc_builder_create_offset_vector@@Base+0x2c>
   15718:	lsl	r2, r6, #2
   1571c:	mov	r1, r8
   15720:	bl	12388 <memcpy@plt>
   15724:	mov	r0, r4
   15728:	sub	sp, fp, #24
   1572c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15730:	b	15740 <flatcc_builder_end_offset_vector@@Base>
   15734:			; <UNDEFINED> instruction: 0x000048bc
   15738:	strdeq	r3, [r0], -r2
   1573c:	andeq	r4, r0, pc, asr #17

00015740 <flatcc_builder_end_offset_vector@@Base>:
   15740:	push	{r4, r5, fp, lr}
   15744:	add	fp, sp, #8
   15748:	mov	r4, r0
   1574c:	ldr	r0, [r0, #32]
   15750:	ldrh	r1, [r0, #14]
   15754:	cmp	r1, #5
   15758:	bne	157f8 <flatcc_builder_end_offset_vector@@Base+0xb8>
   1575c:	ldr	r2, [r0, #20]
   15760:	ldr	r1, [r4, #16]
   15764:	mov	r0, r4
   15768:	mov	r3, #0
   1576c:	bl	16864 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15770:	mov	r5, r0
   15774:	cmp	r0, #0
   15778:	beq	157f0 <flatcc_builder_end_offset_vector@@Base+0xb0>
   1577c:	ldr	r0, [r4, #16]
   15780:	ldr	r2, [r4, #20]
   15784:	mov	r1, #0
   15788:	bl	123f4 <memset@plt>
   1578c:	ldr	r0, [r4, #32]
   15790:	ldr	r1, [r4, #60]	; 0x3c
   15794:	ldr	ip, [r4, #64]	; 0x40
   15798:	ldr	r3, [r0, #8]
   1579c:	str	r3, [r4, #20]
   157a0:	ldr	r3, [r0]
   157a4:	str	r3, [r4, #28]
   157a8:	add	r1, r1, r3
   157ac:	ldr	r2, [r0, #4]
   157b0:	str	r1, [r4, #16]
   157b4:	sub	r1, ip, r3
   157b8:	cmp	r1, r2
   157bc:	movhi	r1, r2
   157c0:	str	r1, [r4, #24]
   157c4:	ldrh	r1, [r4, #130]	; 0x82
   157c8:	ldrh	r2, [r4, #128]	; 0x80
   157cc:	cmp	r2, r1
   157d0:	strhcc	r1, [r4, #128]	; 0x80
   157d4:	ldrh	r1, [r0, #12]
   157d8:	sub	r0, r0, #36	; 0x24
   157dc:	str	r0, [r4, #32]
   157e0:	strh	r1, [r4, #130]	; 0x82
   157e4:	ldr	r0, [r4, #156]	; 0x9c
   157e8:	sub	r0, r0, #1
   157ec:	str	r0, [r4, #156]	; 0x9c
   157f0:	mov	r0, r5
   157f4:	pop	{r4, r5, fp, pc}
   157f8:	ldr	r0, [pc, #24]	; 15818 <flatcc_builder_end_offset_vector@@Base+0xd8>
   157fc:	ldr	r1, [pc, #24]	; 1581c <flatcc_builder_end_offset_vector@@Base+0xdc>
   15800:	ldr	r3, [pc, #24]	; 15820 <flatcc_builder_end_offset_vector@@Base+0xe0>
   15804:	movw	r2, #1480	; 0x5c8
   15808:	add	r0, pc, r0
   1580c:	add	r1, pc, r1
   15810:	add	r3, pc, r3
   15814:	bl	12418 <__assert_fail@plt>
   15818:	muleq	r0, r5, sl
   1581c:	andeq	r3, r0, lr, asr r6
   15820:	strheq	r4, [r0], -ip

00015824 <flatcc_builder_start_string@@Base>:
   15824:	push	{r4, r5, fp, lr}
   15828:	add	fp, sp, #8
   1582c:	mov	r1, #1
   15830:	mov	r4, r0
   15834:	mov	r5, #1
   15838:	bl	144c0 <flatcc_builder_start_buffer@@Base+0xc0>
   1583c:	mov	r1, r0
   15840:	mvn	r0, #0
   15844:	cmp	r1, #0
   15848:	popne	{r4, r5, fp, pc}
   1584c:	ldr	r0, [r4, #32]
   15850:	mov	r2, #6
   15854:	str	r5, [r0, #16]
   15858:	mov	r0, #0
   1585c:	ldr	r1, [r4, #32]
   15860:	str	r0, [r1, #20]
   15864:	ldr	r1, [r4, #32]
   15868:	strh	r2, [r1, #14]
   1586c:	ldr	r2, [r4, #28]
   15870:	ldr	r3, [r4, #60]	; 0x3c
   15874:	ldr	r5, [r4, #64]	; 0x40
   15878:	add	r3, r3, r2
   1587c:	sub	r2, r5, r2
   15880:	str	r3, [r4, #16]
   15884:	mvn	r3, #3
   15888:	cmn	r2, #4
   1588c:	movcs	r2, r3
   15890:	str	r2, [r4, #24]
   15894:	str	r3, [r1, #4]
   15898:	pop	{r4, r5, fp, pc}

0001589c <flatcc_builder_reserve_table@@Base>:
   1589c:	push	{r4, r5, r6, sl, fp, lr}
   158a0:	add	fp, sp, #16
   158a4:	sub	sp, sp, #8
   158a8:	cmn	r1, #1
   158ac:	ble	15980 <flatcc_builder_reserve_table@@Base+0xe4>
   158b0:	mov	r4, r0
   158b4:	ldr	r0, [r0, #32]
   158b8:	mov	r5, r1
   158bc:	ldr	r1, [r4, #56]	; 0x38
   158c0:	ldrh	r2, [r0, #28]
   158c4:	ldr	r0, [r0, #16]
   158c8:	add	r6, r0, r2, lsl #1
   158cc:	add	r0, r6, r5, lsl #1
   158d0:	add	r2, r0, #4
   158d4:	cmp	r2, r1
   158d8:	bls	15900 <flatcc_builder_reserve_table@@Base+0x64>
   158dc:	ldr	r0, [r4, #40]	; 0x28
   158e0:	ldr	ip, [r4, #48]	; 0x30
   158e4:	mov	r3, #0
   158e8:	add	r1, r4, #52	; 0x34
   158ec:	str	r3, [sp]
   158f0:	mov	r3, #1
   158f4:	blx	ip
   158f8:	cmp	r0, #0
   158fc:	bne	159a0 <flatcc_builder_reserve_table@@Base+0x104>
   15900:	ldr	r0, [r4, #52]	; 0x34
   15904:	adds	r0, r0, r6
   15908:	str	r0, [r4, #4]
   1590c:	mvneq	r0, #0
   15910:	subeq	sp, fp, #16
   15914:	popeq	{r4, r5, r6, sl, fp, pc}
   15918:	add	r0, r0, #4
   1591c:	lsl	r1, r5, #1
   15920:	str	r0, [r4, #4]
   15924:	ldr	r0, [r4, #32]
   15928:	ldr	r3, [r4, #80]	; 0x50
   1592c:	ldr	r5, [r0, #20]
   15930:	orr	r0, r1, #1
   15934:	add	r2, r5, r0
   15938:	cmp	r2, r3
   1593c:	bls	15964 <flatcc_builder_reserve_table@@Base+0xc8>
   15940:	ldr	r0, [r4, #40]	; 0x28
   15944:	ldr	r6, [r4, #48]	; 0x30
   15948:	mov	r3, #3
   1594c:	add	r1, r4, #76	; 0x4c
   15950:	str	r3, [sp]
   15954:	mov	r3, #0
   15958:	blx	r6
   1595c:	cmp	r0, #0
   15960:	bne	159a0 <flatcc_builder_reserve_table@@Base+0x104>
   15964:	ldr	r0, [r4, #76]	; 0x4c
   15968:	adds	r0, r0, r5
   1596c:	str	r0, [r4]
   15970:	mov	r0, #0
   15974:	mvneq	r0, #0
   15978:	sub	sp, fp, #16
   1597c:	pop	{r4, r5, r6, sl, fp, pc}
   15980:	ldr	r0, [pc, #56]	; 159c0 <flatcc_builder_reserve_table@@Base+0x124>
   15984:	ldr	r1, [pc, #56]	; 159c4 <flatcc_builder_reserve_table@@Base+0x128>
   15988:	ldr	r3, [pc, #56]	; 159c8 <flatcc_builder_reserve_table@@Base+0x12c>
   1598c:	movw	r2, #1065	; 0x429
   15990:	add	r0, pc, r0
   15994:	add	r1, pc, r1
   15998:	add	r3, pc, r3
   1599c:	bl	12418 <__assert_fail@plt>
   159a0:	ldr	r0, [pc, #36]	; 159cc <flatcc_builder_reserve_table@@Base+0x130>
   159a4:	ldr	r1, [pc, #36]	; 159d0 <flatcc_builder_reserve_table@@Base+0x134>
   159a8:	ldr	r3, [pc, #36]	; 159d4 <flatcc_builder_reserve_table@@Base+0x138>
   159ac:	mov	r2, #308	; 0x134
   159b0:	add	r0, pc, r0
   159b4:	add	r1, pc, r1
   159b8:	add	r3, pc, r3
   159bc:	bl	12418 <__assert_fail@plt>
   159c0:	andeq	r3, r0, r4, asr ip
   159c4:	ldrdeq	r3, [r0], -r6
   159c8:	andeq	r3, r0, fp, lsl #24
   159cc:	andeq	r4, r0, r7, ror r6
   159d0:			; <UNDEFINED> instruction: 0x000034b6
   159d4:	andeq	r4, r0, r9, lsr #9

000159d8 <flatcc_builder_start_table@@Base>:
   159d8:	push	{r4, r5, r6, r7, fp, lr}
   159dc:	add	fp, sp, #16
   159e0:	sub	sp, sp, #8
   159e4:	mov	r6, r1
   159e8:	mov	r1, #4
   159ec:	mov	r4, r0
   159f0:	bl	144c0 <flatcc_builder_start_buffer@@Base+0xc0>
   159f4:	mvn	r5, #0
   159f8:	cmp	r0, #0
   159fc:	beq	15a0c <flatcc_builder_start_table@@Base+0x34>
   15a00:	mov	r0, r5
   15a04:	sub	sp, fp, #16
   15a08:	pop	{r4, r5, r6, r7, fp, pc}
   15a0c:	mov	r1, r4
   15a10:	ldr	r2, [r4, #4]
   15a14:	ldr	r3, [r4, #32]
   15a18:	ldr	r0, [r1, #52]!	; 0x34
   15a1c:	sub	r0, r2, r0
   15a20:	str	r0, [r3, #16]
   15a24:	ldr	r0, [r4]
   15a28:	ldr	r3, [r4, #76]	; 0x4c
   15a2c:	ldr	r2, [r4, #32]
   15a30:	sub	r0, r0, r3
   15a34:	mov	r3, #0
   15a38:	str	r0, [r2, #20]
   15a3c:	ldr	r0, [r4, #12]
   15a40:	ldr	r2, [r4, #32]
   15a44:	str	r0, [r2, #24]
   15a48:	ldr	r0, [r4, #32]
   15a4c:	ldrh	r2, [r4, #8]
   15a50:	strh	r2, [r0, #28]
   15a54:	movw	r0, #15186	; 0x3b52
   15a58:	strh	r3, [r4, #8]
   15a5c:	mov	r2, #3
   15a60:	movt	r0, #12137	; 0x2f69
   15a64:	str	r0, [r4, #12]
   15a68:	ldr	r0, [r4, #32]
   15a6c:	strh	r2, [r0, #14]
   15a70:	ldrh	r2, [r0, #28]
   15a74:	ldr	r0, [r0, #16]
   15a78:	add	r7, r0, r2, lsl #1
   15a7c:	add	r0, r7, r6, lsl #1
   15a80:	add	r2, r0, #4
   15a84:	ldr	r0, [r4, #56]	; 0x38
   15a88:	cmp	r2, r0
   15a8c:	bls	15aac <flatcc_builder_start_table@@Base+0xd4>
   15a90:	ldr	r0, [r4, #40]	; 0x28
   15a94:	ldr	ip, [r4, #48]	; 0x30
   15a98:	str	r3, [sp]
   15a9c:	mov	r3, #1
   15aa0:	blx	ip
   15aa4:	cmp	r0, #0
   15aa8:	bne	15b50 <flatcc_builder_start_table@@Base+0x178>
   15aac:	ldr	r0, [r4, #52]	; 0x34
   15ab0:	adds	r0, r0, r7
   15ab4:	str	r0, [r4, #4]
   15ab8:	beq	15a00 <flatcc_builder_start_table@@Base+0x28>
   15abc:	add	r0, r0, #4
   15ac0:	lsl	r1, r6, #1
   15ac4:	str	r0, [r4, #4]
   15ac8:	ldr	r0, [r4, #32]
   15acc:	ldr	r3, [r4, #80]	; 0x50
   15ad0:	ldr	r6, [r0, #20]
   15ad4:	orr	r0, r1, #1
   15ad8:	add	r2, r6, r0
   15adc:	cmp	r2, r3
   15ae0:	bls	15b08 <flatcc_builder_start_table@@Base+0x130>
   15ae4:	ldr	r0, [r4, #40]	; 0x28
   15ae8:	ldr	r7, [r4, #48]	; 0x30
   15aec:	mov	r3, #3
   15af0:	add	r1, r4, #76	; 0x4c
   15af4:	str	r3, [sp]
   15af8:	mov	r3, #0
   15afc:	blx	r7
   15b00:	cmp	r0, #0
   15b04:	bne	15b50 <flatcc_builder_start_table@@Base+0x178>
   15b08:	ldr	r0, [r4, #76]	; 0x4c
   15b0c:	adds	r0, r0, r6
   15b10:	str	r0, [r4]
   15b14:	beq	15a00 <flatcc_builder_start_table@@Base+0x28>
   15b18:	ldr	r0, [r4, #28]
   15b1c:	ldr	r2, [r4, #60]	; 0x3c
   15b20:	ldr	r3, [r4, #64]	; 0x40
   15b24:	ldr	r1, [r4, #32]
   15b28:	mov	r5, #0
   15b2c:	add	r2, r2, r0
   15b30:	sub	r0, r3, r0
   15b34:	str	r2, [r4, #16]
   15b38:	movw	r2, #65532	; 0xfffc
   15b3c:	cmp	r0, r2
   15b40:	movcs	r0, r2
   15b44:	str	r0, [r4, #24]
   15b48:	str	r2, [r1, #4]
   15b4c:	b	15a00 <flatcc_builder_start_table@@Base+0x28>
   15b50:	ldr	r0, [pc, #24]	; 15b70 <flatcc_builder_start_table@@Base+0x198>
   15b54:	ldr	r1, [pc, #24]	; 15b74 <flatcc_builder_start_table@@Base+0x19c>
   15b58:	ldr	r3, [pc, #24]	; 15b78 <flatcc_builder_start_table@@Base+0x1a0>
   15b5c:	mov	r2, #308	; 0x134
   15b60:	add	r0, pc, r0
   15b64:	add	r1, pc, r1
   15b68:	add	r3, pc, r3
   15b6c:	bl	12418 <__assert_fail@plt>
   15b70:	andeq	r4, r0, r7, asr #9
   15b74:	andeq	r3, r0, r6, lsl #6
   15b78:	strdeq	r4, [r0], -r9

00015b7c <flatcc_builder_create_vtable@@Base>:
   15b7c:	push	{r4, r5, fp, lr}
   15b80:	add	fp, sp, #8
   15b84:	sub	sp, sp, #80	; 0x50
   15b88:	mov	r3, r2
   15b8c:	mov	r2, #0
   15b90:	mov	r4, r0
   15b94:	cmp	r3, #0
   15b98:	str	r2, [sp, #12]
   15b9c:	str	r2, [sp, #8]
   15ba0:	movne	r2, #1
   15ba4:	strne	r1, [sp, #16]
   15ba8:	strne	r3, [sp, #8]
   15bac:	strne	r3, [sp, #20]
   15bb0:	strne	r2, [sp, #12]
   15bb4:	ldr	r0, [r4, #152]	; 0x98
   15bb8:	cmp	r0, #0
   15bbc:	bne	15bcc <flatcc_builder_create_vtable@@Base+0x50>
   15bc0:	ldr	r0, [r4, #180]	; 0xb4
   15bc4:	cmp	r0, #0
   15bc8:	beq	15c18 <flatcc_builder_create_vtable@@Base+0x9c>
   15bcc:	cmp	r3, #0
   15bd0:	beq	15c5c <flatcc_builder_create_vtable@@Base+0xe0>
   15bd4:	ldr	r0, [r4, #136]	; 0x88
   15bd8:	ldr	ip, [r4, #44]	; 0x2c
   15bdc:	add	r1, sp, #8
   15be0:	add	r1, r1, #8
   15be4:	sub	r5, r0, r3
   15be8:	ldr	r0, [r4, #36]	; 0x24
   15bec:	str	r3, [sp]
   15bf0:	mov	r3, r5
   15bf4:	blx	ip
   15bf8:	cmp	r0, #0
   15bfc:	bne	15c7c <flatcc_builder_create_vtable@@Base+0x100>
   15c00:	cmp	r5, #0
   15c04:	str	r5, [r4, #136]	; 0x88
   15c08:	beq	15c50 <flatcc_builder_create_vtable@@Base+0xd4>
   15c0c:	add	r0, r5, #1
   15c10:	sub	sp, fp, #8
   15c14:	pop	{r4, r5, fp, pc}
   15c18:	ldr	r5, [r4, #140]	; 0x8c
   15c1c:	ldr	r0, [r4, #36]	; 0x24
   15c20:	ldr	ip, [r4, #44]	; 0x2c
   15c24:	add	r1, r5, r3
   15c28:	str	r1, [r4, #140]	; 0x8c
   15c2c:	add	r1, sp, #8
   15c30:	str	r3, [sp]
   15c34:	mov	r3, r5
   15c38:	add	r1, r1, #8
   15c3c:	blx	ip
   15c40:	cmp	r0, #0
   15c44:	bne	15c9c <flatcc_builder_create_vtable@@Base+0x120>
   15c48:	adds	r0, r5, #1
   15c4c:	bne	15c10 <flatcc_builder_create_vtable@@Base+0x94>
   15c50:	mov	r0, #0
   15c54:	sub	sp, fp, #8
   15c58:	pop	{r4, r5, fp, pc}
   15c5c:	ldr	r0, [pc, #100]	; 15cc8 <flatcc_builder_create_vtable@@Base+0x14c>
   15c60:	ldr	r1, [pc, #100]	; 15ccc <flatcc_builder_create_vtable@@Base+0x150>
   15c64:	ldr	r3, [pc, #100]	; 15cd0 <flatcc_builder_create_vtable@@Base+0x154>
   15c68:	movw	r2, #647	; 0x287
   15c6c:	add	r0, pc, r0
   15c70:	add	r1, pc, r1
   15c74:	add	r3, pc, r3
   15c78:	bl	12418 <__assert_fail@plt>
   15c7c:	ldr	r0, [pc, #80]	; 15cd4 <flatcc_builder_create_vtable@@Base+0x158>
   15c80:	ldr	r1, [pc, #80]	; 15cd8 <flatcc_builder_create_vtable@@Base+0x15c>
   15c84:	ldr	r3, [pc, #80]	; 15cdc <flatcc_builder_create_vtable@@Base+0x160>
   15c88:	movw	r2, #651	; 0x28b
   15c8c:	add	r0, pc, r0
   15c90:	add	r1, pc, r1
   15c94:	add	r3, pc, r3
   15c98:	bl	12418 <__assert_fail@plt>
   15c9c:	ldr	r0, [pc, #24]	; 15cbc <flatcc_builder_create_vtable@@Base+0x140>
   15ca0:	ldr	r1, [pc, #24]	; 15cc0 <flatcc_builder_create_vtable@@Base+0x144>
   15ca4:	ldr	r3, [pc, #24]	; 15cc4 <flatcc_builder_create_vtable@@Base+0x148>
   15ca8:	movw	r2, #677	; 0x2a5
   15cac:	add	r0, pc, r0
   15cb0:	add	r1, pc, r1
   15cb4:	add	r3, pc, r3
   15cb8:	bl	12418 <__assert_fail@plt>
   15cbc:	andeq	r4, r0, fp, ror r3
   15cc0:			; <UNDEFINED> instruction: 0x000031ba
   15cc4:	andeq	r4, r0, lr, ror #5
   15cc8:			; <UNDEFINED> instruction: 0x000043bb
   15ccc:	strdeq	r3, [r0], -sl
   15cd0:	andeq	r4, r0, r2, ror r2
   15cd4:	muleq	r0, fp, r3
   15cd8:	ldrdeq	r3, [r0], -sl
   15cdc:	andeq	r4, r0, r2, asr r2

00015ce0 <flatcc_builder_create_cached_vtable@@Base>:
   15ce0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ce4:	add	fp, sp, #28
   15ce8:	sub	sp, sp, #20
   15cec:	mov	sl, r0
   15cf0:	ldr	r0, [r0, #116]	; 0x74
   15cf4:	mov	r8, r3
   15cf8:	mov	r5, r2
   15cfc:	str	r1, [sp, #16]
   15d00:	cmp	r0, #0
   15d04:	beq	15da8 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   15d08:	ldr	r1, [sl, #92]	; 0x5c
   15d0c:	rsb	r0, r0, #32
   15d10:	lsr	r0, r8, r0
   15d14:	add	r6, r1, r0, lsl #2
   15d18:	cmp	r6, #0
   15d1c:	beq	15e6c <flatcc_builder_create_cached_vtable@@Base+0x18c>
   15d20:	ldr	r7, [r6]
   15d24:	str	r6, [sp, #12]
   15d28:	cmp	r7, #0
   15d2c:	beq	15e74 <flatcc_builder_create_cached_vtable@@Base+0x194>
   15d30:	ldr	r4, [sl, #68]	; 0x44
   15d34:	ldr	r8, [sl, #100]	; 0x64
   15d38:	mov	r0, #0
   15d3c:	str	r0, [sp, #8]
   15d40:	add	r9, r8, r7
   15d44:	mov	r1, r4
   15d48:	ldr	r0, [r9, #8]
   15d4c:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   15d50:	cmp	r0, r5
   15d54:	bne	15d6c <flatcc_builder_create_cached_vtable@@Base+0x8c>
   15d58:	ldr	r0, [sp, #16]
   15d5c:	mov	r2, r5
   15d60:	bl	12394 <memcmp@plt>
   15d64:	cmp	r0, #0
   15d68:	beq	15d80 <flatcc_builder_create_cached_vtable@@Base+0xa0>
   15d6c:	ldr	r7, [r9, #12]!
   15d70:	cmp	r7, #0
   15d74:	mov	r6, r9
   15d78:	bne	15d40 <flatcc_builder_create_cached_vtable@@Base+0x60>
   15d7c:	b	15e64 <flatcc_builder_create_cached_vtable@@Base+0x184>
   15d80:	ldr	r0, [sl, #152]	; 0x98
   15d84:	ldr	r1, [r9, #4]
   15d88:	cmp	r1, r0
   15d8c:	beq	15fd8 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   15d90:	mov	r6, r9
   15d94:	mov	r0, r9
   15d98:	ldr	r7, [r6, #12]!
   15d9c:	cmp	r7, #0
   15da0:	bne	15d3c <flatcc_builder_create_cached_vtable@@Base+0x5c>
   15da4:	b	15e78 <flatcc_builder_create_cached_vtable@@Base+0x198>
   15da8:	ldr	r0, [sl, #124]	; 0x7c
   15dac:	cmp	r0, #0
   15db0:	bne	16024 <flatcc_builder_create_cached_vtable@@Base+0x344>
   15db4:	ldr	r0, [sl, #104]	; 0x68
   15db8:	add	r7, sl, #100	; 0x64
   15dbc:	cmp	r0, #15
   15dc0:	bhi	15dec <flatcc_builder_create_cached_vtable@@Base+0x10c>
   15dc4:	ldr	r0, [sl, #40]	; 0x28
   15dc8:	ldr	r6, [sl, #48]	; 0x30
   15dcc:	mov	r1, #6
   15dd0:	mov	r2, #16
   15dd4:	mov	r3, #0
   15dd8:	str	r1, [sp]
   15ddc:	mov	r1, r7
   15de0:	blx	r6
   15de4:	cmp	r0, #0
   15de8:	bne	16004 <flatcc_builder_create_cached_vtable@@Base+0x324>
   15dec:	ldr	r0, [r7]
   15df0:	mov	r7, #0
   15df4:	cmp	r0, #0
   15df8:	beq	15f18 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15dfc:	mov	r0, #16
   15e00:	mov	r2, #5
   15e04:	add	r1, sl, #92	; 0x5c
   15e08:	mov	r3, #1
   15e0c:	mov	r4, #256	; 0x100
   15e10:	str	r0, [sl, #124]	; 0x7c
   15e14:	ldr	r0, [sl, #40]	; 0x28
   15e18:	ldr	r6, [sl, #48]	; 0x30
   15e1c:	str	r2, [sp]
   15e20:	mov	r2, #256	; 0x100
   15e24:	blx	r6
   15e28:	cmp	r0, #0
   15e2c:	bne	15f18 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15e30:	ldr	r0, [sl, #96]	; 0x60
   15e34:	mov	r1, r4
   15e38:	lsl	r4, r4, #1
   15e3c:	cmp	r0, r1, lsl #1
   15e40:	bcs	15e34 <flatcc_builder_create_cached_vtable@@Base+0x154>
   15e44:	lsr	r1, r1, #2
   15e48:	mvn	r0, #0
   15e4c:	mov	r2, #1
   15e50:	add	r0, r0, #1
   15e54:	cmp	r1, r2, lsl r0
   15e58:	bhi	15e50 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15e5c:	str	r0, [sl, #116]	; 0x74
   15e60:	b	15d08 <flatcc_builder_create_cached_vtable@@Base+0x28>
   15e64:	ldr	r9, [sp, #8]
   15e68:	b	15e78 <flatcc_builder_create_cached_vtable@@Base+0x198>
   15e6c:	mov	r7, #0
   15e70:	b	15f18 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15e74:	mov	r9, #0
   15e78:	ldr	r4, [sl, #124]	; 0x7c
   15e7c:	ldr	r0, [sl, #104]	; 0x68
   15e80:	add	r7, sl, #100	; 0x64
   15e84:	add	r2, r4, #16
   15e88:	cmp	r2, r0
   15e8c:	bls	15eb4 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   15e90:	ldr	r0, [sl, #40]	; 0x28
   15e94:	ldr	r6, [sl, #48]	; 0x30
   15e98:	mov	r1, #6
   15e9c:	mov	r3, #0
   15ea0:	str	r1, [sp]
   15ea4:	mov	r1, r7
   15ea8:	blx	r6
   15eac:	cmp	r0, #0
   15eb0:	bne	16004 <flatcc_builder_create_cached_vtable@@Base+0x324>
   15eb4:	ldr	r0, [r7]
   15eb8:	mov	r7, #0
   15ebc:	adds	r4, r0, r4
   15ec0:	beq	15f18 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15ec4:	ldr	r0, [sl, #124]	; 0x7c
   15ec8:	ldr	r1, [sl, #152]	; 0x98
   15ecc:	add	r2, r0, #16
   15ed0:	str	r2, [sl, #124]	; 0x7c
   15ed4:	ldr	r2, [sp, #12]
   15ed8:	str	r1, [r4, #4]
   15edc:	ldr	r1, [r2]
   15ee0:	str	r1, [r4, #12]
   15ee4:	ldr	r1, [sp, #16]
   15ee8:	str	r0, [r2]
   15eec:	mov	r0, sl
   15ef0:	mov	r2, r5
   15ef4:	bl	15b7c <flatcc_builder_create_vtable@@Base>
   15ef8:	cmp	r0, #0
   15efc:	str	r0, [r4]
   15f00:	beq	15f18 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15f04:	cmp	r9, #0
   15f08:	beq	15f24 <flatcc_builder_create_cached_vtable@@Base+0x244>
   15f0c:	ldr	r0, [r9, #8]
   15f10:	str	r0, [r4, #8]
   15f14:	ldr	r7, [r4]
   15f18:	mov	r0, r7
   15f1c:	sub	sp, fp, #28
   15f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f24:	ldr	r6, [sl, #120]	; 0x78
   15f28:	ldr	r0, [sl, #172]	; 0xac
   15f2c:	add	r2, r6, r5
   15f30:	cmp	r0, #0
   15f34:	beq	15f70 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15f38:	cmp	r0, r2
   15f3c:	bcs	15f70 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15f40:	ldr	r0, [sl, #116]	; 0x74
   15f44:	cmp	r0, #0
   15f48:	beq	15f14 <flatcc_builder_create_cached_vtable@@Base+0x234>
   15f4c:	ldr	r0, [sl, #92]	; 0x5c
   15f50:	ldr	r2, [sl, #96]	; 0x60
   15f54:	mov	r1, #0
   15f58:	mov	r5, #0
   15f5c:	bl	123f4 <memset@plt>
   15f60:	mov	r0, #16
   15f64:	str	r5, [sl, #120]	; 0x78
   15f68:	str	r0, [sl, #124]	; 0x7c
   15f6c:	b	15f14 <flatcc_builder_create_cached_vtable@@Base+0x234>
   15f70:	ldr	r0, [sl, #72]	; 0x48
   15f74:	add	r7, sl, #68	; 0x44
   15f78:	cmp	r2, r0
   15f7c:	bls	15fa4 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   15f80:	ldr	r0, [sl, #40]	; 0x28
   15f84:	ldr	ip, [sl, #48]	; 0x30
   15f88:	mov	r1, #2
   15f8c:	mov	r3, #0
   15f90:	str	r1, [sp]
   15f94:	mov	r1, r7
   15f98:	blx	ip
   15f9c:	cmp	r0, #0
   15fa0:	bne	16004 <flatcc_builder_create_cached_vtable@@Base+0x324>
   15fa4:	ldr	r0, [r7]
   15fa8:	adds	r0, r0, r6
   15fac:	beq	15fd0 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   15fb0:	ldr	r1, [sl, #120]	; 0x78
   15fb4:	mov	r2, r5
   15fb8:	str	r1, [r4, #8]
   15fbc:	add	r1, r1, r5
   15fc0:	str	r1, [sl, #120]	; 0x78
   15fc4:	ldr	r1, [sp, #16]
   15fc8:	bl	12388 <memcpy@plt>
   15fcc:	b	15f14 <flatcc_builder_create_cached_vtable@@Base+0x234>
   15fd0:	mvn	r7, #0
   15fd4:	b	15f18 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15fd8:	ldr	r0, [sp, #12]
   15fdc:	cmp	r6, r0
   15fe0:	beq	15ffc <flatcc_builder_create_cached_vtable@@Base+0x31c>
   15fe4:	mov	r1, r0
   15fe8:	ldr	r0, [r9, #12]
   15fec:	str	r0, [r6]
   15ff0:	ldr	r0, [r1]
   15ff4:	str	r0, [r9, #12]
   15ff8:	str	r7, [r1]
   15ffc:	ldr	r7, [r9]
   16000:	b	15f18 <flatcc_builder_create_cached_vtable@@Base+0x238>
   16004:	ldr	r0, [pc, #68]	; 16050 <flatcc_builder_create_cached_vtable@@Base+0x370>
   16008:	ldr	r1, [pc, #68]	; 16054 <flatcc_builder_create_cached_vtable@@Base+0x374>
   1600c:	ldr	r3, [pc, #68]	; 16058 <flatcc_builder_create_cached_vtable@@Base+0x378>
   16010:	mov	r2, #308	; 0x134
   16014:	add	r0, pc, r0
   16018:	add	r1, pc, r1
   1601c:	add	r3, pc, r3
   16020:	bl	12418 <__assert_fail@plt>
   16024:	ldr	r0, [pc, #24]	; 16044 <flatcc_builder_create_cached_vtable@@Base+0x364>
   16028:	ldr	r1, [pc, #24]	; 16048 <flatcc_builder_create_cached_vtable@@Base+0x368>
   1602c:	ldr	r3, [pc, #24]	; 1604c <flatcc_builder_create_cached_vtable@@Base+0x36c>
   16030:	movw	r2, #342	; 0x156
   16034:	add	r0, pc, r0
   16038:	add	r1, pc, r1
   1603c:	add	r3, pc, r3
   16040:	bl	12418 <__assert_fail@plt>
   16044:			; <UNDEFINED> instruction: 0x00003fb7
   16048:	andeq	r2, r0, r2, lsr lr
   1604c:			; <UNDEFINED> instruction: 0x00003fbe
   16050:	andeq	r4, r0, r3, lsl r0
   16054:	andeq	r2, r0, r2, asr lr
   16058:	andeq	r3, r0, r5, asr #28

0001605c <flatcc_builder_create_table@@Base>:
   1605c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16060:	add	fp, sp, #24
   16064:	sub	sp, sp, #80	; 0x50
   16068:	ldr	r5, [fp, #12]
   1606c:	cmn	r5, #1
   16070:	ble	161c4 <flatcc_builder_create_table@@Base+0x168>
   16074:	ldr	ip, [fp, #16]
   16078:	tst	ip, #1
   1607c:	beq	161e4 <flatcc_builder_create_table@@Base+0x188>
   16080:	mov	r8, r0
   16084:	ldrh	r0, [r0, #128]	; 0x80
   16088:	cmp	r3, #4
   1608c:	movls	r3, #4
   16090:	cmp	r0, r3
   16094:	strhcc	r3, [r8, #128]	; 0x80
   16098:	sub	r3, r3, #1
   1609c:	cmp	r5, #1
   160a0:	ldr	r4, [r8, #136]	; 0x88
   160a4:	sub	r0, r4, r2
   160a8:	and	r0, r0, r3
   160ac:	add	r3, ip, r0
   160b0:	mvn	ip, #3
   160b4:	sub	r6, ip, r2
   160b8:	add	r4, r6, r4
   160bc:	add	r6, r4, #1
   160c0:	sub	r3, r6, r3
   160c4:	str	r3, [fp, #-28]	; 0xffffffe4
   160c8:	blt	160f4 <flatcc_builder_create_table@@Base+0x98>
   160cc:	ldr	r3, [fp, #8]
   160d0:	sub	r6, r4, r0
   160d4:	sub	r4, ip, r6
   160d8:	ldrh	r6, [r3], #2
   160dc:	subs	r5, r5, #1
   160e0:	ldr	r7, [r6, r1]
   160e4:	add	r7, r4, r7
   160e8:	sub	r7, r7, r6
   160ec:	str	r7, [r6, r1]
   160f0:	bne	160d8 <flatcc_builder_create_table@@Base+0x7c>
   160f4:	sub	r3, fp, #28
   160f8:	mov	r4, #4
   160fc:	cmp	r2, #0
   16100:	str	r3, [sp, #12]
   16104:	mov	r3, #1
   16108:	str	r4, [sp, #4]
   1610c:	str	r4, [sp, #16]
   16110:	str	r3, [sp, #8]
   16114:	beq	16130 <flatcc_builder_create_table@@Base+0xd4>
   16118:	mov	r3, #2
   1611c:	add	r4, r2, #4
   16120:	str	r1, [sp, #20]
   16124:	str	r2, [sp, #24]
   16128:	str	r3, [sp, #8]
   1612c:	str	r4, [sp, #4]
   16130:	cmp	r0, #0
   16134:	beq	16160 <flatcc_builder_create_table@@Base+0x104>
   16138:	add	r4, r4, r0
   1613c:	add	r1, sp, #4
   16140:	str	r4, [sp, #4]
   16144:	add	r1, r1, r3, lsl #3
   16148:	add	r3, r3, #1
   1614c:	ldr	r2, [pc, #208]	; 16224 <flatcc_builder_create_table@@Base+0x1c8>
   16150:	ldr	r2, [pc, r2]
   16154:	str	r2, [r1, #8]
   16158:	str	r0, [r1, #12]
   1615c:	str	r3, [sp, #8]
   16160:	cmp	r4, #0
   16164:	ble	16204 <flatcc_builder_create_table@@Base+0x1a8>
   16168:	ldr	r0, [r8, #136]	; 0x88
   1616c:	ldr	r7, [r8, #44]	; 0x2c
   16170:	add	r1, sp, #4
   16174:	mov	r2, r3
   16178:	add	r1, r1, #8
   1617c:	sub	r5, r0, r4
   16180:	ldr	r0, [r8, #36]	; 0x24
   16184:	str	r4, [sp]
   16188:	mov	r3, r5
   1618c:	blx	r7
   16190:	cmp	r0, #0
   16194:	streq	r5, [r8, #136]	; 0x88
   16198:	moveq	r0, r5
   1619c:	subeq	sp, fp, #24
   161a0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   161a4:	ldr	r0, [pc, #160]	; 1624c <flatcc_builder_create_table@@Base+0x1f0>
   161a8:	ldr	r1, [pc, #160]	; 16250 <flatcc_builder_create_table@@Base+0x1f4>
   161ac:	ldr	r3, [pc, #160]	; 16254 <flatcc_builder_create_table@@Base+0x1f8>
   161b0:	movw	r2, #651	; 0x28b
   161b4:	add	r0, pc, r0
   161b8:	add	r1, pc, r1
   161bc:	add	r3, pc, r3
   161c0:	bl	12418 <__assert_fail@plt>
   161c4:	ldr	r0, [pc, #92]	; 16228 <flatcc_builder_create_table@@Base+0x1cc>
   161c8:	ldr	r1, [pc, #92]	; 1622c <flatcc_builder_create_table@@Base+0x1d0>
   161cc:	ldr	r3, [pc, #92]	; 16230 <flatcc_builder_create_table@@Base+0x1d4>
   161d0:	movw	r2, #1237	; 0x4d5
   161d4:	add	r0, pc, r0
   161d8:	add	r1, pc, r1
   161dc:	add	r3, pc, r3
   161e0:	bl	12418 <__assert_fail@plt>
   161e4:	ldr	r0, [pc, #72]	; 16234 <flatcc_builder_create_table@@Base+0x1d8>
   161e8:	ldr	r1, [pc, #72]	; 16238 <flatcc_builder_create_table@@Base+0x1dc>
   161ec:	ldr	r3, [pc, #72]	; 1623c <flatcc_builder_create_table@@Base+0x1e0>
   161f0:	movw	r2, #1243	; 0x4db
   161f4:	add	r0, pc, r0
   161f8:	add	r1, pc, r1
   161fc:	add	r3, pc, r3
   16200:	bl	12418 <__assert_fail@plt>
   16204:	ldr	r0, [pc, #52]	; 16240 <flatcc_builder_create_table@@Base+0x1e4>
   16208:	ldr	r1, [pc, #52]	; 16244 <flatcc_builder_create_table@@Base+0x1e8>
   1620c:	ldr	r3, [pc, #52]	; 16248 <flatcc_builder_create_table@@Base+0x1ec>
   16210:	movw	r2, #647	; 0x287
   16214:	add	r0, pc, r0
   16218:	add	r1, pc, r1
   1621c:	add	r3, pc, r3
   16220:	bl	12418 <__assert_fail@plt>
   16224:	strdeq	r4, [r1], -r0
   16228:	andeq	r3, r0, r9, lsl #8
   1622c:	muleq	r0, r2, ip
   16230:	andeq	r3, r0, r3, lsl r4
   16234:	muleq	r0, r7, r4
   16238:	andeq	r2, r0, r2, ror ip
   1623c:	strdeq	r3, [r0], -r3	; <UNPREDICTABLE>
   16240:	andeq	r3, r0, r3, lsl lr
   16244:	andeq	r2, r0, r2, asr ip
   16248:	andeq	r3, r0, sl, asr #25
   1624c:	andeq	r3, r0, r3, ror lr
   16250:			; <UNDEFINED> instruction: 0x00002cb2
   16254:	andeq	r3, r0, sl, lsr #26

00016258 <flatcc_builder_check_required_field@@Base>:
   16258:	ldr	r2, [r0, #32]
   1625c:	ldrh	r2, [r2, #14]
   16260:	cmp	r2, #3
   16264:	bne	16294 <flatcc_builder_check_required_field@@Base+0x3c>
   16268:	ldrh	r3, [r0, #8]
   1626c:	mov	r2, #0
   16270:	cmp	r3, r1
   16274:	bls	1628c <flatcc_builder_check_required_field@@Base+0x34>
   16278:	ldr	r0, [r0, #4]
   1627c:	add	r0, r0, r1, lsl #1
   16280:	ldrh	r2, [r0]
   16284:	cmp	r2, #0
   16288:	movwne	r2, #1
   1628c:	mov	r0, r2
   16290:	bx	lr
   16294:	push	{fp, lr}
   16298:	mov	fp, sp
   1629c:	ldr	r0, [pc, #24]	; 162bc <flatcc_builder_check_required_field@@Base+0x64>
   162a0:	ldr	r1, [pc, #24]	; 162c0 <flatcc_builder_check_required_field@@Base+0x68>
   162a4:	ldr	r3, [pc, #24]	; 162c4 <flatcc_builder_check_required_field@@Base+0x6c>
   162a8:	movw	r2, #1272	; 0x4f8
   162ac:	add	r0, pc, r0
   162b0:	add	r1, pc, r1
   162b4:	add	r3, pc, r3
   162b8:	bl	12418 <__assert_fail@plt>
   162bc:	andeq	r3, r0, sl, ror #7
   162c0:			; <UNDEFINED> instruction: 0x00002bba
   162c4:	andeq	r3, r0, sp, lsl #8

000162c8 <flatcc_builder_check_union_field@@Base>:
   162c8:	mov	r2, r0
   162cc:	ldr	r0, [r0, #32]
   162d0:	ldrh	r0, [r0, #14]
   162d4:	cmp	r0, #3
   162d8:	bne	16338 <flatcc_builder_check_union_field@@Base+0x70>
   162dc:	cmp	r1, #0
   162e0:	mov	r0, #0
   162e4:	ldrhne	r3, [r2, #8]
   162e8:	cmpne	r3, r1
   162ec:	bhi	162f4 <flatcc_builder_check_union_field@@Base+0x2c>
   162f0:	bx	lr
   162f4:	ldr	r0, [r2, #4]
   162f8:	add	r0, r0, r1, lsl #1
   162fc:	ldrh	r1, [r0, #-2]
   16300:	cmp	r1, #0
   16304:	beq	16328 <flatcc_builder_check_union_field@@Base+0x60>
   16308:	ldr	r2, [r2, #16]
   1630c:	ldrh	r0, [r0]
   16310:	ldrb	r1, [r2, r1]
   16314:	cmp	r1, #0
   16318:	beq	1632c <flatcc_builder_check_union_field@@Base+0x64>
   1631c:	cmp	r0, #0
   16320:	movwne	r0, #1
   16324:	bx	lr
   16328:	ldrh	r0, [r0]
   1632c:	clz	r0, r0
   16330:	lsr	r0, r0, #5
   16334:	bx	lr
   16338:	push	{fp, lr}
   1633c:	mov	fp, sp
   16340:	ldr	r0, [pc, #24]	; 16360 <flatcc_builder_check_union_field@@Base+0x98>
   16344:	ldr	r1, [pc, #24]	; 16364 <flatcc_builder_check_union_field@@Base+0x9c>
   16348:	ldr	r3, [pc, #24]	; 16368 <flatcc_builder_check_union_field@@Base+0xa0>
   1634c:	movw	r2, #1279	; 0x4ff
   16350:	add	r0, pc, r0
   16354:	add	r1, pc, r1
   16358:	add	r3, pc, r3
   1635c:	bl	12418 <__assert_fail@plt>
   16360:	andeq	r3, r0, r6, asr #6
   16364:	andeq	r2, r0, r6, lsl fp
   16368:			; <UNDEFINED> instruction: 0x000033bc

0001636c <flatcc_builder_check_required@@Base>:
   1636c:	push	{fp, lr}
   16370:	mov	fp, sp
   16374:	mov	r3, r0
   16378:	ldr	r0, [r0, #32]
   1637c:	ldrh	r0, [r0, #14]
   16380:	cmp	r0, #3
   16384:	bne	163dc <flatcc_builder_check_required@@Base+0x70>
   16388:	ldrh	ip, [r3, #8]
   1638c:	mov	r0, #0
   16390:	cmp	ip, r2
   16394:	movge	r0, #1
   16398:	cmpge	r2, #1
   1639c:	bge	163a4 <flatcc_builder_check_required@@Base+0x38>
   163a0:	pop	{fp, pc}
   163a4:	ldr	ip, [r3, #4]
   163a8:	mov	lr, #0
   163ac:	b	163c0 <flatcc_builder_check_required@@Base+0x54>
   163b0:	add	lr, lr, #1
   163b4:	add	r1, r1, #2
   163b8:	cmp	lr, r2
   163bc:	popge	{fp, pc}
   163c0:	ldrh	r3, [r1]
   163c4:	add	r3, ip, r3, lsl #1
   163c8:	ldrh	r3, [r3]
   163cc:	cmp	r3, #0
   163d0:	bne	163b0 <flatcc_builder_check_required@@Base+0x44>
   163d4:	mov	r0, #0
   163d8:	pop	{fp, pc}
   163dc:	ldr	r0, [pc, #24]	; 163fc <flatcc_builder_check_required@@Base+0x90>
   163e0:	ldr	r1, [pc, #24]	; 16400 <flatcc_builder_check_required@@Base+0x94>
   163e4:	ldr	r3, [pc, #24]	; 16404 <flatcc_builder_check_required@@Base+0x98>
   163e8:	movw	r2, #1297	; 0x511
   163ec:	add	r0, pc, r0
   163f0:	add	r1, pc, r1
   163f4:	add	r3, pc, r3
   163f8:	bl	12418 <__assert_fail@plt>
   163fc:	andeq	r3, r0, sl, lsr #5
   16400:	andeq	r2, r0, sl, ror sl
   16404:	andeq	r3, r0, r0, ror r3

00016408 <flatcc_builder_end_table@@Base>:
   16408:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1640c:	add	fp, sp, #24
   16410:	sub	sp, sp, #16
   16414:	mov	r4, r0
   16418:	ldr	r0, [r0, #32]
   1641c:	ldrh	r0, [r0, #14]
   16420:	cmp	r0, #3
   16424:	bne	165a0 <flatcc_builder_end_table@@Base+0x198>
   16428:	ldrh	r0, [r4, #8]
   1642c:	ldr	r5, [r4, #4]
   16430:	mov	r1, #4
   16434:	movw	r2, #31153	; 0x79b1
   16438:	movt	r2, #40503	; 0x9e37
   1643c:	add	r0, r1, r0, lsl #1
   16440:	strh	r0, [r5, #-4]!
   16444:	ldrh	r1, [r4, #20]
   16448:	uxth	r6, r0
   1644c:	add	r1, r1, #4
   16450:	strh	r1, [r5, #2]
   16454:	uxth	r1, r1
   16458:	ldr	r0, [r4, #12]
   1645c:	eor	r0, r0, r6
   16460:	mul	r0, r0, r2
   16464:	eor	r0, r0, r1
   16468:	mov	r1, r5
   1646c:	mul	r3, r0, r2
   16470:	mov	r0, r4
   16474:	mov	r2, r6
   16478:	str	r3, [r4, #12]
   1647c:	bl	15ce0 <flatcc_builder_create_cached_vtable@@Base>
   16480:	cmp	r0, #0
   16484:	beq	16590 <flatcc_builder_end_table@@Base+0x188>
   16488:	mov	r7, r0
   1648c:	mov	r0, r5
   16490:	mov	r1, #0
   16494:	mov	r2, r6
   16498:	mov	r8, #0
   1649c:	bl	123f4 <memset@plt>
   164a0:	ldr	r5, [r4, #32]
   164a4:	ldr	r0, [r4, #76]	; 0x4c
   164a8:	ldr	r6, [r4]
   164ac:	ldrh	r3, [r4, #130]	; 0x82
   164b0:	ldr	r1, [r4, #16]
   164b4:	ldr	r2, [r4, #20]
   164b8:	ldr	r5, [r5, #20]
   164bc:	add	r0, r0, r5
   164c0:	sub	r6, r6, r0
   164c4:	asr	r6, r6, #1
   164c8:	stm	sp, {r0, r6, r7}
   164cc:	mov	r0, r4
   164d0:	bl	1605c <flatcc_builder_create_table@@Base>
   164d4:	cmp	r0, #0
   164d8:	beq	16594 <flatcc_builder_end_table@@Base+0x18c>
   164dc:	ldr	r1, [r4, #32]
   164e0:	mov	r5, r0
   164e4:	ldr	r0, [r4, #16]
   164e8:	ldr	r2, [r4, #20]
   164ec:	ldr	r3, [r4, #52]	; 0x34
   164f0:	ldr	r7, [r1, #24]
   164f4:	str	r7, [r4, #12]
   164f8:	ldrh	r7, [r1, #28]
   164fc:	strh	r7, [r4, #8]
   16500:	ldr	r7, [r1, #16]
   16504:	add	r3, r3, r7
   16508:	str	r3, [r4, #4]
   1650c:	ldr	r3, [r4, #76]	; 0x4c
   16510:	ldr	r1, [r1, #20]
   16514:	add	r1, r3, r1
   16518:	str	r1, [r4]
   1651c:	mov	r1, #0
   16520:	bl	123f4 <memset@plt>
   16524:	ldr	r0, [r4, #32]
   16528:	ldr	r1, [r4, #60]	; 0x3c
   1652c:	ldr	r2, [r4, #64]	; 0x40
   16530:	mov	r8, r5
   16534:	ldr	r3, [r0, #8]
   16538:	str	r3, [r4, #20]
   1653c:	ldr	r3, [r0]
   16540:	str	r3, [r4, #28]
   16544:	add	r1, r1, r3
   16548:	ldr	r7, [r0, #4]
   1654c:	str	r1, [r4, #16]
   16550:	sub	r1, r2, r3
   16554:	cmp	r1, r7
   16558:	movhi	r1, r7
   1655c:	str	r1, [r4, #24]
   16560:	ldrh	r1, [r4, #130]	; 0x82
   16564:	ldrh	r2, [r4, #128]	; 0x80
   16568:	cmp	r2, r1
   1656c:	strhcc	r1, [r4, #128]	; 0x80
   16570:	ldrh	r1, [r0, #12]
   16574:	sub	r0, r0, #36	; 0x24
   16578:	str	r0, [r4, #32]
   1657c:	strh	r1, [r4, #130]	; 0x82
   16580:	ldr	r0, [r4, #156]	; 0x9c
   16584:	sub	r0, r0, #1
   16588:	str	r0, [r4, #156]	; 0x9c
   1658c:	b	16594 <flatcc_builder_end_table@@Base+0x18c>
   16590:	mov	r8, #0
   16594:	mov	r0, r8
   16598:	sub	sp, fp, #24
   1659c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   165a0:	ldr	r0, [pc, #24]	; 165c0 <flatcc_builder_end_table@@Base+0x1b8>
   165a4:	ldr	r1, [pc, #24]	; 165c4 <flatcc_builder_end_table@@Base+0x1bc>
   165a8:	ldr	r3, [pc, #24]	; 165c8 <flatcc_builder_end_table@@Base+0x1c0>
   165ac:	movw	r2, #1317	; 0x525
   165b0:	add	r0, pc, r0
   165b4:	add	r1, pc, r1
   165b8:	add	r3, pc, r3
   165bc:	bl	12418 <__assert_fail@plt>
   165c0:	andeq	r3, r0, r6, ror #1
   165c4:			; <UNDEFINED> instruction: 0x000028b6
   165c8:	andeq	r3, r0, r6, lsl #4

000165cc <flatcc_builder_create_vector@@Base>:
   165cc:	push	{r4, r5, r6, r7, fp, lr}
   165d0:	add	fp, sp, #16
   165d4:	sub	sp, sp, #80	; 0x50
   165d8:	mov	r7, r0
   165dc:	ldr	r0, [fp, #12]
   165e0:	cmp	r2, r0
   165e4:	bhi	166e4 <flatcc_builder_create_vector@@Base+0x118>
   165e8:	ldr	r0, [fp, #8]
   165ec:	mov	r4, r2
   165f0:	ldrh	r2, [r7, #128]	; 0x80
   165f4:	mov	r5, #4
   165f8:	cmp	r0, #4
   165fc:	movls	r0, r5
   16600:	cmp	r2, r0
   16604:	sub	r2, fp, #20
   16608:	strhcc	r0, [r7, #128]	; 0x80
   1660c:	str	r4, [fp, #-20]	; 0xffffffec
   16610:	sub	r0, r0, #1
   16614:	ldr	ip, [r7, #136]	; 0x88
   16618:	str	r2, [sp, #12]
   1661c:	mov	r2, #1
   16620:	str	r5, [sp, #4]
   16624:	str	r5, [sp, #16]
   16628:	str	r2, [sp, #8]
   1662c:	mls	r6, r3, r4, ip
   16630:	mul	r3, r3, r4
   16634:	and	r0, r6, r0
   16638:	cmp	r3, #0
   1663c:	beq	16658 <flatcc_builder_create_vector@@Base+0x8c>
   16640:	mov	r2, #2
   16644:	add	r5, r3, #4
   16648:	str	r1, [sp, #20]
   1664c:	str	r3, [sp, #24]
   16650:	str	r2, [sp, #8]
   16654:	str	r5, [sp, #4]
   16658:	cmp	r0, #0
   1665c:	beq	16688 <flatcc_builder_create_vector@@Base+0xbc>
   16660:	add	r5, r5, r0
   16664:	add	r1, sp, #4
   16668:	str	r5, [sp, #4]
   1666c:	add	r1, r1, r2, lsl #3
   16670:	add	r2, r2, #1
   16674:	ldr	r3, [pc, #168]	; 16724 <flatcc_builder_create_vector@@Base+0x158>
   16678:	ldr	r3, [pc, r3]
   1667c:	str	r3, [r1, #8]
   16680:	str	r0, [r1, #12]
   16684:	str	r2, [sp, #8]
   16688:	cmp	r5, #0
   1668c:	ble	16704 <flatcc_builder_create_vector@@Base+0x138>
   16690:	ldr	r0, [r7, #36]	; 0x24
   16694:	ldr	r6, [r7, #44]	; 0x2c
   16698:	add	r1, sp, #4
   1669c:	sub	r4, ip, r5
   166a0:	str	r5, [sp]
   166a4:	add	r1, r1, #8
   166a8:	mov	r3, r4
   166ac:	blx	r6
   166b0:	cmp	r0, #0
   166b4:	streq	r4, [r7, #136]	; 0x88
   166b8:	moveq	r0, r4
   166bc:	subeq	sp, fp, #16
   166c0:	popeq	{r4, r5, r6, r7, fp, pc}
   166c4:	ldr	r0, [pc, #116]	; 16740 <flatcc_builder_create_vector@@Base+0x174>
   166c8:	ldr	r1, [pc, #116]	; 16744 <flatcc_builder_create_vector@@Base+0x178>
   166cc:	ldr	r3, [pc, #116]	; 16748 <flatcc_builder_create_vector@@Base+0x17c>
   166d0:	movw	r2, #651	; 0x28b
   166d4:	add	r0, pc, r0
   166d8:	add	r1, pc, r1
   166dc:	add	r3, pc, r3
   166e0:	bl	12418 <__assert_fail@plt>
   166e4:	ldr	r0, [pc, #60]	; 16728 <flatcc_builder_create_vector@@Base+0x15c>
   166e8:	ldr	r1, [pc, #60]	; 1672c <flatcc_builder_create_vector@@Base+0x160>
   166ec:	ldr	r3, [pc, #60]	; 16730 <flatcc_builder_create_vector@@Base+0x164>
   166f0:	movw	r2, #1365	; 0x555
   166f4:	add	r0, pc, r0
   166f8:	add	r1, pc, r1
   166fc:	add	r3, pc, r3
   16700:	bl	12418 <__assert_fail@plt>
   16704:	ldr	r0, [pc, #40]	; 16734 <flatcc_builder_create_vector@@Base+0x168>
   16708:	ldr	r1, [pc, #40]	; 16738 <flatcc_builder_create_vector@@Base+0x16c>
   1670c:	ldr	r3, [pc, #40]	; 1673c <flatcc_builder_create_vector@@Base+0x170>
   16710:	movw	r2, #647	; 0x287
   16714:	add	r0, pc, r0
   16718:	add	r1, pc, r1
   1671c:	add	r3, pc, r3
   16720:	bl	12418 <__assert_fail@plt>
   16724:	andeq	r4, r1, r8, asr #19
   16728:	andeq	r3, r0, ip, lsl #2
   1672c:	andeq	r2, r0, r2, ror r7
   16730:	andeq	r3, r0, r7, lsl r1
   16734:	andeq	r3, r0, r3, lsl r9
   16738:	andeq	r2, r0, r2, asr r7
   1673c:	andeq	r3, r0, sl, asr #15
   16740:	andeq	r3, r0, r3, asr r9
   16744:	muleq	r0, r2, r7
   16748:	andeq	r3, r0, sl, lsl #16

0001674c <flatcc_builder_end_vector@@Base>:
   1674c:	push	{r4, r5, fp, lr}
   16750:	add	fp, sp, #8
   16754:	sub	sp, sp, #8
   16758:	mov	r4, r0
   1675c:	ldr	r0, [r0, #32]
   16760:	ldrh	r1, [r0, #14]
   16764:	cmp	r1, #4
   16768:	bne	1681c <flatcc_builder_end_vector@@Base+0xd0>
   1676c:	ldr	r3, [r0, #16]
   16770:	ldr	r2, [r0, #20]
   16774:	ldr	r0, [r0, #24]
   16778:	ldr	r1, [r4, #16]
   1677c:	ldrh	r5, [r4, #130]	; 0x82
   16780:	str	r0, [sp, #4]
   16784:	mov	r0, r4
   16788:	str	r5, [sp]
   1678c:	bl	165cc <flatcc_builder_create_vector@@Base>
   16790:	mov	r5, r0
   16794:	cmp	r0, #0
   16798:	beq	16810 <flatcc_builder_end_vector@@Base+0xc4>
   1679c:	ldr	r0, [r4, #16]
   167a0:	ldr	r2, [r4, #20]
   167a4:	mov	r1, #0
   167a8:	bl	123f4 <memset@plt>
   167ac:	ldr	r0, [r4, #32]
   167b0:	ldr	r1, [r4, #60]	; 0x3c
   167b4:	ldr	ip, [r4, #64]	; 0x40
   167b8:	ldr	r3, [r0, #8]
   167bc:	str	r3, [r4, #20]
   167c0:	ldr	r3, [r0]
   167c4:	str	r3, [r4, #28]
   167c8:	add	r1, r1, r3
   167cc:	ldr	r2, [r0, #4]
   167d0:	str	r1, [r4, #16]
   167d4:	sub	r1, ip, r3
   167d8:	cmp	r1, r2
   167dc:	movhi	r1, r2
   167e0:	str	r1, [r4, #24]
   167e4:	ldrh	r1, [r4, #130]	; 0x82
   167e8:	ldrh	r2, [r4, #128]	; 0x80
   167ec:	cmp	r2, r1
   167f0:	strhcc	r1, [r4, #128]	; 0x80
   167f4:	ldrh	r1, [r0, #12]
   167f8:	sub	r0, r0, #36	; 0x24
   167fc:	str	r0, [r4, #32]
   16800:	strh	r1, [r4, #130]	; 0x82
   16804:	ldr	r0, [r4, #156]	; 0x9c
   16808:	sub	r0, r0, #1
   1680c:	str	r0, [r4, #156]	; 0x9c
   16810:	mov	r0, r5
   16814:	sub	sp, fp, #8
   16818:	pop	{r4, r5, fp, pc}
   1681c:	ldr	r0, [pc, #24]	; 1683c <flatcc_builder_end_vector@@Base+0xf0>
   16820:	ldr	r1, [pc, #24]	; 16840 <flatcc_builder_end_vector@@Base+0xf4>
   16824:	ldr	r3, [pc, #24]	; 16844 <flatcc_builder_end_vector@@Base+0xf8>
   16828:	movw	r2, #1400	; 0x578
   1682c:	add	r0, pc, r0
   16830:	add	r1, pc, r1
   16834:	add	r3, pc, r3
   16838:	bl	12418 <__assert_fail@plt>
   1683c:	andeq	r2, r0, r8, ror r9
   16840:	andeq	r2, r0, sl, lsr r6
   16844:	andeq	r3, r0, r5, asr r0

00016848 <flatcc_builder_vector_count@@Base>:
   16848:	ldr	r0, [r0, #32]
   1684c:	ldr	r0, [r0, #20]
   16850:	bx	lr

00016854 <flatcc_builder_vector_edit@@Base>:
   16854:	ldr	r0, [r0, #16]
   16858:	bx	lr

0001685c <flatcc_builder_create_offset_vector_direct@@Base>:
   1685c:	mov	r3, #0
   16860:	b	16864 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16864:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16868:	add	fp, sp, #24
   1686c:	sub	sp, sp, #80	; 0x50
   16870:	mov	r6, #0
   16874:	cmn	r2, #-1073741823	; 0xc0000001
   16878:	bhi	169b4 <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   1687c:	mov	r8, r0
   16880:	ldrh	r0, [r0, #128]	; 0x80
   16884:	sub	r7, fp, #28
   16888:	mov	r5, #4
   1688c:	mov	r4, #1
   16890:	cmp	r0, #3
   16894:	movls	r0, #4
   16898:	strhls	r0, [r8, #128]	; 0x80
   1689c:	str	r2, [fp, #-28]	; 0xffffffe4
   168a0:	ldr	ip, [r8, #136]	; 0x88
   168a4:	str	r7, [sp, #12]
   168a8:	mov	r7, #0
   168ac:	str	r5, [sp, #4]
   168b0:	str	r5, [sp, #16]
   168b4:	str	r4, [sp, #8]
   168b8:	cmp	r7, r2, lsl #2
   168bc:	and	r6, ip, #3
   168c0:	beq	168e0 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   168c4:	lsl	r7, r2, #2
   168c8:	mov	r4, #2
   168cc:	str	r1, [sp, #20]
   168d0:	add	r5, r7, #4
   168d4:	str	r7, [sp, #24]
   168d8:	str	r4, [sp, #8]
   168dc:	str	r5, [sp, #4]
   168e0:	cmp	r6, #0
   168e4:	beq	16910 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   168e8:	add	r5, r5, r6
   168ec:	add	r7, sp, #4
   168f0:	str	r5, [sp, #4]
   168f4:	add	r7, r7, r4, lsl #3
   168f8:	add	r4, r4, #1
   168fc:	ldr	r0, [pc, #348]	; 16a60 <flatcc_builder_create_offset_vector_direct@@Base+0x204>
   16900:	ldr	r0, [pc, r0]
   16904:	str	r0, [r7, #8]
   16908:	str	r6, [r7, #12]
   1690c:	str	r4, [sp, #8]
   16910:	cmp	r2, #0
   16914:	beq	1697c <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   16918:	mvn	r0, #3
   1691c:	mov	r6, #0
   16920:	sub	r0, r0, ip
   16924:	add	r0, r0, r5
   16928:	ldr	r7, [r1, r6, lsl #2]
   1692c:	cmp	r7, #0
   16930:	beq	16954 <flatcc_builder_create_offset_vector_direct@@Base+0xf8>
   16934:	add	r7, r0, r7
   16938:	cmp	r3, #0
   1693c:	str	r7, [r1, r6, lsl #2]
   16940:	beq	16968 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   16944:	ldrb	r7, [r3, r6]
   16948:	cmp	r7, #0
   1694c:	bne	16968 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   16950:	b	169c0 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   16954:	cmp	r3, #0
   16958:	beq	16a00 <flatcc_builder_create_offset_vector_direct@@Base+0x1a4>
   1695c:	ldrb	r7, [r3, r6]
   16960:	cmp	r7, #0
   16964:	bne	169e0 <flatcc_builder_create_offset_vector_direct@@Base+0x184>
   16968:	add	r6, r6, #1
   1696c:	sub	r0, r0, #4
   16970:	cmp	r6, r2
   16974:	bcc	16928 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   16978:	ldr	ip, [r8, #136]	; 0x88
   1697c:	cmp	r5, #0
   16980:	ble	16a20 <flatcc_builder_create_offset_vector_direct@@Base+0x1c4>
   16984:	ldr	r0, [r8, #36]	; 0x24
   16988:	ldr	r7, [r8, #44]	; 0x2c
   1698c:	add	r1, sp, #4
   16990:	sub	r6, ip, r5
   16994:	mov	r2, r4
   16998:	str	r5, [sp]
   1699c:	add	r1, r1, #8
   169a0:	mov	r3, r6
   169a4:	blx	r7
   169a8:	cmp	r0, #0
   169ac:	bne	16a40 <flatcc_builder_create_offset_vector_direct@@Base+0x1e4>
   169b0:	str	r6, [r8, #136]	; 0x88
   169b4:	mov	r0, r6
   169b8:	sub	sp, fp, #24
   169bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   169c0:	ldr	r0, [pc, #156]	; 16a64 <flatcc_builder_create_offset_vector_direct@@Base+0x208>
   169c4:	ldr	r1, [pc, #156]	; 16a68 <flatcc_builder_create_offset_vector_direct@@Base+0x20c>
   169c8:	ldr	r3, [pc, #156]	; 16a6c <flatcc_builder_create_offset_vector_direct@@Base+0x210>
   169cc:	movw	r2, #1457	; 0x5b1
   169d0:	add	r0, pc, r0
   169d4:	add	r1, pc, r1
   169d8:	add	r3, pc, r3
   169dc:	bl	12418 <__assert_fail@plt>
   169e0:	ldr	r0, [pc, #136]	; 16a70 <flatcc_builder_create_offset_vector_direct@@Base+0x214>
   169e4:	ldr	r1, [pc, #136]	; 16a74 <flatcc_builder_create_offset_vector_direct@@Base+0x218>
   169e8:	ldr	r3, [pc, #136]	; 16a78 <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
   169ec:	movw	r2, #1461	; 0x5b5
   169f0:	add	r0, pc, r0
   169f4:	add	r1, pc, r1
   169f8:	add	r3, pc, r3
   169fc:	bl	12418 <__assert_fail@plt>
   16a00:	ldr	r0, [pc, #116]	; 16a7c <flatcc_builder_create_offset_vector_direct@@Base+0x220>
   16a04:	ldr	r1, [pc, #116]	; 16a80 <flatcc_builder_create_offset_vector_direct@@Base+0x224>
   16a08:	ldr	r3, [pc, #116]	; 16a84 <flatcc_builder_create_offset_vector_direct@@Base+0x228>
   16a0c:	movw	r2, #1463	; 0x5b7
   16a10:	add	r0, pc, r0
   16a14:	add	r1, pc, r1
   16a18:	add	r3, pc, r3
   16a1c:	bl	12418 <__assert_fail@plt>
   16a20:	ldr	r0, [pc, #96]	; 16a88 <flatcc_builder_create_offset_vector_direct@@Base+0x22c>
   16a24:	ldr	r1, [pc, #96]	; 16a8c <flatcc_builder_create_offset_vector_direct@@Base+0x230>
   16a28:	ldr	r3, [pc, #96]	; 16a90 <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   16a2c:	movw	r2, #647	; 0x287
   16a30:	add	r0, pc, r0
   16a34:	add	r1, pc, r1
   16a38:	add	r3, pc, r3
   16a3c:	bl	12418 <__assert_fail@plt>
   16a40:	ldr	r0, [pc, #76]	; 16a94 <flatcc_builder_create_offset_vector_direct@@Base+0x238>
   16a44:	ldr	r1, [pc, #76]	; 16a98 <flatcc_builder_create_offset_vector_direct@@Base+0x23c>
   16a48:	ldr	r3, [pc, #76]	; 16a9c <flatcc_builder_create_offset_vector_direct@@Base+0x240>
   16a4c:	movw	r2, #651	; 0x28b
   16a50:	add	r0, pc, r0
   16a54:	add	r1, pc, r1
   16a58:	add	r3, pc, r3
   16a5c:	bl	12418 <__assert_fail@plt>
   16a60:	andeq	r4, r1, r0, asr #14
   16a64:	andeq	r3, r0, fp, asr #12
   16a68:	muleq	r0, r6, r4
   16a6c:	andeq	r3, r0, r1, asr r6
   16a70:			; <UNDEFINED> instruction: 0x000036bc
   16a74:	andeq	r2, r0, r6, ror r4
   16a78:	andeq	r3, r0, r1, lsr r6
   16a7c:	andeq	r3, r0, r7, lsl r6
   16a80:	andeq	r2, r0, r6, asr r4
   16a84:	andeq	r3, r0, r1, lsl r6
   16a88:	strdeq	r3, [r0], -r7
   16a8c:	andeq	r2, r0, r6, lsr r4
   16a90:	andeq	r3, r0, lr, lsr #9
   16a94:	ldrdeq	r3, [r0], -r7
   16a98:	andeq	r2, r0, r6, lsl r4
   16a9c:	andeq	r3, r0, lr, lsl #9

00016aa0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   16aa0:	push	{r4, r5, fp, lr}
   16aa4:	add	fp, sp, #8
   16aa8:	mov	r4, r0
   16aac:	ldr	r0, [r0, #32]
   16ab0:	mov	r3, r1
   16ab4:	ldrh	r1, [r0, #14]
   16ab8:	cmp	r1, #5
   16abc:	bne	16b58 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   16ac0:	ldr	r2, [r0, #20]
   16ac4:	ldr	r1, [r4, #16]
   16ac8:	mov	r0, r4
   16acc:	bl	16864 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16ad0:	mov	r5, r0
   16ad4:	cmp	r0, #0
   16ad8:	beq	16b50 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   16adc:	ldr	r0, [r4, #16]
   16ae0:	ldr	r2, [r4, #20]
   16ae4:	mov	r1, #0
   16ae8:	bl	123f4 <memset@plt>
   16aec:	ldr	r0, [r4, #32]
   16af0:	ldr	r1, [r4, #60]	; 0x3c
   16af4:	ldr	ip, [r4, #64]	; 0x40
   16af8:	ldr	r3, [r0, #8]
   16afc:	str	r3, [r4, #20]
   16b00:	ldr	r3, [r0]
   16b04:	str	r3, [r4, #28]
   16b08:	add	r1, r1, r3
   16b0c:	ldr	r2, [r0, #4]
   16b10:	str	r1, [r4, #16]
   16b14:	sub	r1, ip, r3
   16b18:	cmp	r1, r2
   16b1c:	movhi	r1, r2
   16b20:	str	r1, [r4, #24]
   16b24:	ldrh	r1, [r4, #130]	; 0x82
   16b28:	ldrh	r2, [r4, #128]	; 0x80
   16b2c:	cmp	r2, r1
   16b30:	strhcc	r1, [r4, #128]	; 0x80
   16b34:	ldrh	r1, [r0, #12]
   16b38:	sub	r0, r0, #36	; 0x24
   16b3c:	str	r0, [r4, #32]
   16b40:	strh	r1, [r4, #130]	; 0x82
   16b44:	ldr	r0, [r4, #156]	; 0x9c
   16b48:	sub	r0, r0, #1
   16b4c:	str	r0, [r4, #156]	; 0x9c
   16b50:	mov	r0, r5
   16b54:	pop	{r4, r5, fp, pc}
   16b58:	ldr	r0, [pc, #24]	; 16b78 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   16b5c:	ldr	r1, [pc, #24]	; 16b7c <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   16b60:	ldr	r3, [pc, #24]	; 16b80 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe0>
   16b64:	movw	r2, #1493	; 0x5d5
   16b68:	add	r0, pc, r0
   16b6c:	add	r1, pc, r1
   16b70:	add	r3, pc, r3
   16b74:	bl	12418 <__assert_fail@plt>
   16b78:	andeq	r2, r0, r5, lsr r7
   16b7c:	strdeq	r2, [r0], -lr
   16b80:	andeq	r2, r0, r6, lsr #27

00016b84 <flatcc_builder_offset_vector_edit@@Base>:
   16b84:	ldr	r0, [r0, #16]
   16b88:	bx	lr

00016b8c <flatcc_builder_offset_vector_count@@Base>:
   16b8c:	ldr	r0, [r0, #32]
   16b90:	ldr	r0, [r0, #20]
   16b94:	bx	lr

00016b98 <flatcc_builder_table_add_union@@Base>:
   16b98:	push	{r4, r5, r6, r7, fp, lr}
   16b9c:	add	fp, sp, #16
   16ba0:	mov	r5, r0
   16ba4:	ldr	r0, [r0, #32]
   16ba8:	ldrh	r0, [r0, #14]
   16bac:	cmp	r0, #3
   16bb0:	bne	16c38 <flatcc_builder_table_add_union@@Base+0xa0>
   16bb4:	mov	r7, r3
   16bb8:	mov	r4, r2
   16bbc:	mov	r6, r1
   16bc0:	cmp	r3, #0
   16bc4:	beq	16bd4 <flatcc_builder_table_add_union@@Base+0x3c>
   16bc8:	uxtb	r0, r4
   16bcc:	cmp	r0, #0
   16bd0:	beq	16c58 <flatcc_builder_table_add_union@@Base+0xc0>
   16bd4:	cmp	r7, #0
   16bd8:	beq	16bf4 <flatcc_builder_table_add_union@@Base+0x5c>
   16bdc:	mov	r0, r5
   16be0:	mov	r1, r6
   16be4:	bl	16cc8 <flatcc_builder_table_add_offset@@Base>
   16be8:	cmp	r0, #0
   16bec:	beq	16c78 <flatcc_builder_table_add_union@@Base+0xe0>
   16bf0:	str	r7, [r0]
   16bf4:	sub	r1, r6, #1
   16bf8:	mov	r0, r5
   16bfc:	mov	r2, #1
   16c00:	mov	r3, #1
   16c04:	bl	16e7c <flatcc_builder_table_add@@Base>
   16c08:	cmp	r0, #0
   16c0c:	strbne	r4, [r0]
   16c10:	movne	r0, #0
   16c14:	popne	{r4, r5, r6, r7, fp, pc}
   16c18:	ldr	r0, [pc, #156]	; 16cbc <flatcc_builder_table_add_union@@Base+0x124>
   16c1c:	ldr	r1, [pc, #156]	; 16cc0 <flatcc_builder_table_add_union@@Base+0x128>
   16c20:	ldr	r3, [pc, #156]	; 16cc4 <flatcc_builder_table_add_union@@Base+0x12c>
   16c24:	movw	r2, #1526	; 0x5f6
   16c28:	add	r0, pc, r0
   16c2c:	add	r1, pc, r1
   16c30:	add	r3, pc, r3
   16c34:	bl	12418 <__assert_fail@plt>
   16c38:	ldr	r0, [pc, #88]	; 16c98 <flatcc_builder_table_add_union@@Base+0x100>
   16c3c:	ldr	r1, [pc, #88]	; 16c9c <flatcc_builder_table_add_union@@Base+0x104>
   16c40:	ldr	r3, [pc, #88]	; 16ca0 <flatcc_builder_table_add_union@@Base+0x108>
   16c44:	movw	r2, #1518	; 0x5ee
   16c48:	add	r0, pc, r0
   16c4c:	add	r1, pc, r1
   16c50:	add	r3, pc, r3
   16c54:	bl	12418 <__assert_fail@plt>
   16c58:	ldr	r0, [pc, #68]	; 16ca4 <flatcc_builder_table_add_union@@Base+0x10c>
   16c5c:	ldr	r1, [pc, #68]	; 16ca8 <flatcc_builder_table_add_union@@Base+0x110>
   16c60:	ldr	r3, [pc, #68]	; 16cac <flatcc_builder_table_add_union@@Base+0x114>
   16c64:	movw	r2, #1519	; 0x5ef
   16c68:	add	r0, pc, r0
   16c6c:	add	r1, pc, r1
   16c70:	add	r3, pc, r3
   16c74:	bl	12418 <__assert_fail@plt>
   16c78:	ldr	r0, [pc, #48]	; 16cb0 <flatcc_builder_table_add_union@@Base+0x118>
   16c7c:	ldr	r1, [pc, #48]	; 16cb4 <flatcc_builder_table_add_union@@Base+0x11c>
   16c80:	ldr	r3, [pc, #48]	; 16cb8 <flatcc_builder_table_add_union@@Base+0x120>
   16c84:	movw	r2, #1522	; 0x5f2
   16c88:	add	r0, pc, r0
   16c8c:	add	r1, pc, r1
   16c90:	add	r3, pc, r3
   16c94:	bl	12418 <__assert_fail@plt>
   16c98:	andeq	r2, r0, lr, asr #20
   16c9c:	andeq	r2, r0, lr, lsl r2
   16ca0:	andeq	r2, r0, r8, lsr sp
   16ca4:	andeq	r2, r0, r8, ror sp
   16ca8:	strdeq	r2, [r0], -lr
   16cac:	andeq	r2, r0, r8, lsl sp
   16cb0:	andeq	r2, r0, sl, ror sp
   16cb4:	ldrdeq	r2, [r0], -lr
   16cb8:	strdeq	r2, [r0], -r8
   16cbc:	andeq	r2, r0, r4, ror #27
   16cc0:	andeq	r2, r0, lr, lsr r2
   16cc4:	andeq	r2, r0, r8, asr sp

00016cc8 <flatcc_builder_table_add_offset@@Base>:
   16cc8:	push	{r4, r5, r6, r7, fp, lr}
   16ccc:	add	fp, sp, #16
   16cd0:	sub	sp, sp, #8
   16cd4:	mov	r4, r0
   16cd8:	ldr	r0, [r0, #32]
   16cdc:	ldrh	r0, [r0, #14]
   16ce0:	cmp	r0, #3
   16ce4:	bne	16df8 <flatcc_builder_table_add_offset@@Base+0x130>
   16ce8:	movw	r0, #32765	; 0x7ffd
   16cec:	mov	r5, r1
   16cf0:	cmp	r1, r0
   16cf4:	bcs	16e18 <flatcc_builder_table_add_offset@@Base+0x150>
   16cf8:	ldr	r0, [r4, #4]
   16cfc:	add	r1, r0, r5, lsl #1
   16d00:	ldrh	r1, [r1]
   16d04:	cmp	r1, #0
   16d08:	bne	16e38 <flatcc_builder_table_add_offset@@Base+0x170>
   16d0c:	ldr	r2, [r4, #20]
   16d10:	ldr	r1, [r4, #12]
   16d14:	ldr	r3, [r4, #24]
   16d18:	add	r2, r2, #3
   16d1c:	eor	r1, r1, r5
   16d20:	bic	r6, r2, #3
   16d24:	movw	r2, #31153	; 0x79b1
   16d28:	movt	r2, #40503	; 0x9e37
   16d2c:	add	r7, r6, #4
   16d30:	mul	r1, r1, r2
   16d34:	cmp	r7, r3
   16d38:	str	r7, [r4, #20]
   16d3c:	eor	r1, r1, #4
   16d40:	mul	r1, r1, r2
   16d44:	str	r1, [r4, #12]
   16d48:	bls	16dbc <flatcc_builder_table_add_offset@@Base+0xf4>
   16d4c:	ldr	r1, [r4, #28]
   16d50:	ldr	r0, [r4, #40]	; 0x28
   16d54:	ldr	ip, [r4, #48]	; 0x30
   16d58:	mov	r2, #1
   16d5c:	mov	r3, #1
   16d60:	str	r2, [sp]
   16d64:	add	r2, r1, r7
   16d68:	add	r1, r4, #60	; 0x3c
   16d6c:	blx	ip
   16d70:	mov	r1, r0
   16d74:	mov	r0, #0
   16d78:	cmp	r1, #0
   16d7c:	beq	16d88 <flatcc_builder_table_add_offset@@Base+0xc0>
   16d80:	sub	sp, fp, #16
   16d84:	pop	{r4, r5, r6, r7, fp, pc}
   16d88:	ldr	r0, [r4, #28]
   16d8c:	ldr	r2, [r4, #60]	; 0x3c
   16d90:	ldr	r3, [r4, #64]	; 0x40
   16d94:	ldr	r1, [r4, #32]
   16d98:	add	r2, r2, r0
   16d9c:	sub	r0, r3, r0
   16da0:	str	r2, [r4, #16]
   16da4:	movw	r2, #65532	; 0xfffc
   16da8:	cmp	r0, r2
   16dac:	movcs	r0, r2
   16db0:	str	r0, [r4, #24]
   16db4:	str	r2, [r1, #4]
   16db8:	ldr	r0, [r4, #4]
   16dbc:	uxth	r1, r5
   16dc0:	add	r0, r0, r1, lsl #1
   16dc4:	strh	r7, [r0]
   16dc8:	ldrh	r0, [r4, #8]
   16dcc:	cmp	r0, r1
   16dd0:	addls	r0, r5, #1
   16dd4:	strhls	r0, [r4, #8]
   16dd8:	ldr	r0, [r4]
   16ddc:	add	r1, r0, #2
   16de0:	str	r1, [r4]
   16de4:	strh	r6, [r0]
   16de8:	ldr	r0, [r4, #16]
   16dec:	add	r0, r0, r6
   16df0:	sub	sp, fp, #16
   16df4:	pop	{r4, r5, r6, r7, fp, pc}
   16df8:	ldr	r0, [pc, #88]	; 16e58 <flatcc_builder_table_add_offset@@Base+0x190>
   16dfc:	ldr	r1, [pc, #88]	; 16e5c <flatcc_builder_table_add_offset@@Base+0x194>
   16e00:	ldr	r3, [pc, #88]	; 16e60 <flatcc_builder_table_add_offset@@Base+0x198>
   16e04:	movw	r2, #1811	; 0x713
   16e08:	add	r0, pc, r0
   16e0c:	add	r1, pc, r1
   16e10:	add	r3, pc, r3
   16e14:	bl	12418 <__assert_fail@plt>
   16e18:	ldr	r0, [pc, #68]	; 16e64 <flatcc_builder_table_add_offset@@Base+0x19c>
   16e1c:	ldr	r1, [pc, #68]	; 16e68 <flatcc_builder_table_add_offset@@Base+0x1a0>
   16e20:	ldr	r3, [pc, #68]	; 16e6c <flatcc_builder_table_add_offset@@Base+0x1a4>
   16e24:	movw	r2, #1812	; 0x714
   16e28:	add	r0, pc, r0
   16e2c:	add	r1, pc, r1
   16e30:	add	r3, pc, r3
   16e34:	bl	12418 <__assert_fail@plt>
   16e38:	ldr	r0, [pc, #48]	; 16e70 <flatcc_builder_table_add_offset@@Base+0x1a8>
   16e3c:	ldr	r1, [pc, #48]	; 16e74 <flatcc_builder_table_add_offset@@Base+0x1ac>
   16e40:	ldr	r3, [pc, #48]	; 16e78 <flatcc_builder_table_add_offset@@Base+0x1b0>
   16e44:	movw	r2, #1819	; 0x71b
   16e48:	add	r0, pc, r0
   16e4c:	add	r1, pc, r1
   16e50:	add	r3, pc, r3
   16e54:	bl	12418 <__assert_fail@plt>
   16e58:	andeq	r2, r0, lr, lsl #17
   16e5c:	andeq	r2, r0, lr, asr r0
   16e60:	andeq	r2, r0, sl, ror pc
   16e64:	andeq	r2, r0, r2, ror #29
   16e68:	andeq	r2, r0, lr, lsr r0
   16e6c:	andeq	r2, r0, sl, asr pc
   16e70:	ldrdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   16e74:	andeq	r2, r0, lr, lsl r0
   16e78:	andeq	r2, r0, sl, lsr pc

00016e7c <flatcc_builder_table_add@@Base>:
   16e7c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16e80:	add	fp, sp, #24
   16e84:	sub	sp, sp, #8
   16e88:	mov	r4, r0
   16e8c:	ldr	r0, [r0, #32]
   16e90:	ldrh	r0, [r0, #14]
   16e94:	cmp	r0, #3
   16e98:	bne	16fb8 <flatcc_builder_table_add@@Base+0x13c>
   16e9c:	movw	r0, #32765	; 0x7ffd
   16ea0:	mov	r8, r1
   16ea4:	cmp	r1, r0
   16ea8:	bcs	16fd8 <flatcc_builder_table_add@@Base+0x15c>
   16eac:	ldrh	r0, [r4, #130]	; 0x82
   16eb0:	cmp	r0, r3
   16eb4:	strhcc	r3, [r4, #130]	; 0x82
   16eb8:	ldr	r0, [r4, #4]
   16ebc:	add	r1, r0, r8, lsl #1
   16ec0:	ldrh	r1, [r1]
   16ec4:	cmp	r1, #0
   16ec8:	bne	16ff8 <flatcc_builder_table_add@@Base+0x17c>
   16ecc:	ldr	r1, [r4, #12]
   16ed0:	movw	r7, #31153	; 0x79b1
   16ed4:	ldr	r6, [r4, #20]
   16ed8:	ldr	r5, [r4, #24]
   16edc:	movt	r7, #40503	; 0x9e37
   16ee0:	eor	r1, r1, r8
   16ee4:	mul	r1, r1, r7
   16ee8:	eor	r1, r1, r2
   16eec:	mul	r1, r1, r7
   16ef0:	str	r1, [r4, #12]
   16ef4:	add	r1, r3, r6
   16ef8:	rsb	r3, r3, #0
   16efc:	sub	r1, r1, #1
   16f00:	and	r6, r1, r3
   16f04:	add	r1, r6, r2
   16f08:	cmp	r1, r5
   16f0c:	str	r1, [r4, #20]
   16f10:	bcc	16f88 <flatcc_builder_table_add@@Base+0x10c>
   16f14:	ldr	r2, [r4, #28]
   16f18:	ldr	r0, [r4, #40]	; 0x28
   16f1c:	ldr	r7, [r4, #48]	; 0x30
   16f20:	mov	r3, #1
   16f24:	str	r3, [sp]
   16f28:	mov	r3, #1
   16f2c:	add	r1, r1, r2
   16f30:	add	r2, r1, #1
   16f34:	add	r1, r4, #60	; 0x3c
   16f38:	blx	r7
   16f3c:	mov	r1, r0
   16f40:	mov	r0, #0
   16f44:	cmp	r1, #0
   16f48:	beq	16f54 <flatcc_builder_table_add@@Base+0xd8>
   16f4c:	sub	sp, fp, #24
   16f50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16f54:	ldr	r0, [r4, #28]
   16f58:	ldr	r2, [r4, #60]	; 0x3c
   16f5c:	ldr	r3, [r4, #64]	; 0x40
   16f60:	ldr	r1, [r4, #32]
   16f64:	add	r2, r2, r0
   16f68:	sub	r0, r3, r0
   16f6c:	str	r2, [r4, #16]
   16f70:	movw	r2, #65532	; 0xfffc
   16f74:	cmp	r0, r2
   16f78:	movcs	r0, r2
   16f7c:	str	r0, [r4, #24]
   16f80:	str	r2, [r1, #4]
   16f84:	ldr	r0, [r4, #4]
   16f88:	uxth	r1, r8
   16f8c:	add	r2, r6, #4
   16f90:	add	r0, r0, r1, lsl #1
   16f94:	strh	r2, [r0]
   16f98:	ldrh	r0, [r4, #8]
   16f9c:	cmp	r0, r1
   16fa0:	addls	r0, r8, #1
   16fa4:	strhls	r0, [r4, #8]
   16fa8:	ldr	r0, [r4, #16]
   16fac:	add	r0, r0, r6
   16fb0:	sub	sp, fp, #24
   16fb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16fb8:	ldr	r0, [pc, #88]	; 17018 <flatcc_builder_table_add@@Base+0x19c>
   16fbc:	ldr	r1, [pc, #88]	; 1701c <flatcc_builder_table_add@@Base+0x1a0>
   16fc0:	ldr	r3, [pc, #88]	; 17020 <flatcc_builder_table_add@@Base+0x1a4>
   16fc4:	movw	r2, #1773	; 0x6ed
   16fc8:	add	r0, pc, r0
   16fcc:	add	r1, pc, r1
   16fd0:	add	r3, pc, r3
   16fd4:	bl	12418 <__assert_fail@plt>
   16fd8:	ldr	r0, [pc, #68]	; 17024 <flatcc_builder_table_add@@Base+0x1a8>
   16fdc:	ldr	r1, [pc, #68]	; 17028 <flatcc_builder_table_add@@Base+0x1ac>
   16fe0:	ldr	r3, [pc, #68]	; 1702c <flatcc_builder_table_add@@Base+0x1b0>
   16fe4:	movw	r2, #1774	; 0x6ee
   16fe8:	add	r0, pc, r0
   16fec:	add	r1, pc, r1
   16ff0:	add	r3, pc, r3
   16ff4:	bl	12418 <__assert_fail@plt>
   16ff8:	ldr	r0, [pc, #48]	; 17030 <flatcc_builder_table_add@@Base+0x1b4>
   16ffc:	ldr	r1, [pc, #48]	; 17034 <flatcc_builder_table_add@@Base+0x1b8>
   17000:	ldr	r3, [pc, #48]	; 17038 <flatcc_builder_table_add@@Base+0x1bc>
   17004:	movw	r2, #1784	; 0x6f8
   17008:	add	r0, pc, r0
   1700c:	add	r1, pc, r1
   17010:	add	r3, pc, r3
   17014:	bl	12418 <__assert_fail@plt>
   17018:	andeq	r2, r0, lr, asr #13
   1701c:	muleq	r0, lr, lr
   17020:	strdeq	r2, [r0], -r0
   17024:	andeq	r2, r0, r2, lsr #26
   17028:	andeq	r1, r0, lr, ror lr
   1702c:	ldrdeq	r2, [r0], -r0
   17030:	andeq	r3, r0, pc, lsl r0
   17034:	andeq	r1, r0, lr, asr lr
   17038:			; <UNDEFINED> instruction: 0x00002cb0

0001703c <flatcc_builder_table_add_union_vector@@Base>:
   1703c:	push	{r4, r5, r6, r7, fp, lr}
   17040:	add	fp, sp, #16
   17044:	mov	r6, r0
   17048:	ldr	r0, [r0, #32]
   1704c:	ldrh	r0, [r0, #14]
   17050:	cmp	r0, #3
   17054:	bne	170bc <flatcc_builder_table_add_union_vector@@Base+0x80>
   17058:	clz	r0, r3
   1705c:	mov	r5, r1
   17060:	clz	r1, r2
   17064:	mov	r4, r3
   17068:	mov	r7, r2
   1706c:	lsr	r0, r0, #5
   17070:	lsr	r1, r1, #5
   17074:	cmp	r1, r0
   17078:	bne	170dc <flatcc_builder_table_add_union_vector@@Base+0xa0>
   1707c:	cmp	r7, #0
   17080:	beq	170b4 <flatcc_builder_table_add_union_vector@@Base+0x78>
   17084:	sub	r1, r5, #1
   17088:	mov	r0, r6
   1708c:	bl	16cc8 <flatcc_builder_table_add_offset@@Base>
   17090:	cmp	r0, #0
   17094:	beq	170fc <flatcc_builder_table_add_union_vector@@Base+0xc0>
   17098:	str	r7, [r0]
   1709c:	mov	r0, r6
   170a0:	mov	r1, r5
   170a4:	bl	16cc8 <flatcc_builder_table_add_offset@@Base>
   170a8:	cmp	r0, #0
   170ac:	beq	1711c <flatcc_builder_table_add_union_vector@@Base+0xe0>
   170b0:	str	r4, [r0]
   170b4:	mov	r0, #0
   170b8:	pop	{r4, r5, r6, r7, fp, pc}
   170bc:	ldr	r0, [pc, #120]	; 1713c <flatcc_builder_table_add_union_vector@@Base+0x100>
   170c0:	ldr	r1, [pc, #120]	; 17140 <flatcc_builder_table_add_union_vector@@Base+0x104>
   170c4:	ldr	r3, [pc, #120]	; 17144 <flatcc_builder_table_add_union_vector@@Base+0x108>
   170c8:	mov	r2, #1536	; 0x600
   170cc:	add	r0, pc, r0
   170d0:	add	r1, pc, r1
   170d4:	add	r3, pc, r3
   170d8:	bl	12418 <__assert_fail@plt>
   170dc:	ldr	r0, [pc, #100]	; 17148 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   170e0:	ldr	r1, [pc, #100]	; 1714c <flatcc_builder_table_add_union_vector@@Base+0x110>
   170e4:	ldr	r3, [pc, #100]	; 17150 <flatcc_builder_table_add_union_vector@@Base+0x114>
   170e8:	movw	r2, #1537	; 0x601
   170ec:	add	r0, pc, r0
   170f0:	add	r1, pc, r1
   170f4:	add	r3, pc, r3
   170f8:	bl	12418 <__assert_fail@plt>
   170fc:	ldr	r0, [pc, #80]	; 17154 <flatcc_builder_table_add_union_vector@@Base+0x118>
   17100:	ldr	r1, [pc, #80]	; 17158 <flatcc_builder_table_add_union_vector@@Base+0x11c>
   17104:	ldr	r3, [pc, #80]	; 1715c <flatcc_builder_table_add_union_vector@@Base+0x120>
   17108:	movw	r2, #1540	; 0x604
   1710c:	add	r0, pc, r0
   17110:	add	r1, pc, r1
   17114:	add	r3, pc, r3
   17118:	bl	12418 <__assert_fail@plt>
   1711c:	ldr	r0, [pc, #60]	; 17160 <flatcc_builder_table_add_union_vector@@Base+0x124>
   17120:	ldr	r1, [pc, #60]	; 17164 <flatcc_builder_table_add_union_vector@@Base+0x128>
   17124:	ldr	r3, [pc, #60]	; 17168 <flatcc_builder_table_add_union_vector@@Base+0x12c>
   17128:	movw	r2, #1544	; 0x608
   1712c:	add	r0, pc, r0
   17130:	add	r1, pc, r1
   17134:	add	r3, pc, r3
   17138:	bl	12418 <__assert_fail@plt>
   1713c:	andeq	r2, r0, sl, asr #11
   17140:	muleq	r0, sl, sp
   17144:	andeq	r2, r0, r4, asr #18
   17148:	andeq	r2, r0, pc, lsl #19
   1714c:	andeq	r1, r0, sl, ror sp
   17150:	andeq	r2, r0, r4, lsr #18
   17154:	strdeq	r2, [r0], -r6
   17158:	andeq	r1, r0, sl, asr sp
   1715c:	andeq	r2, r0, r4, lsl #18
   17160:	ldrdeq	r2, [r0], -r6
   17164:	andeq	r1, r0, sl, lsr sp
   17168:	andeq	r2, r0, r4, ror #17

0001716c <flatcc_builder_create_union_vector@@Base>:
   1716c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17170:	add	fp, sp, #28
   17174:	sub	sp, sp, #12
   17178:	mov	r7, #0
   1717c:	mov	r4, r1
   17180:	mov	r5, r0
   17184:	mov	sl, r3
   17188:	mov	r9, r2
   1718c:	mov	r6, #4
   17190:	str	r7, [r0]
   17194:	str	r7, [r0, #4]
   17198:	mov	r0, r1
   1719c:	mov	r1, #4
   171a0:	bl	144c0 <flatcc_builder_start_buffer@@Base+0xc0>
   171a4:	cmp	r0, #0
   171a8:	beq	171b4 <flatcc_builder_create_union_vector@@Base+0x48>
   171ac:	sub	sp, fp, #28
   171b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171b4:	ldr	r0, [r4, #32]
   171b8:	mov	r1, #5
   171bc:	str	r6, [r0, #16]
   171c0:	ldr	r0, [r4, #32]
   171c4:	str	r7, [r0, #20]
   171c8:	ldr	r0, [r4, #32]
   171cc:	strh	r1, [r0, #14]
   171d0:	ldr	r1, [r4, #28]
   171d4:	ldr	r2, [r4, #60]	; 0x3c
   171d8:	ldr	r3, [r4, #64]	; 0x40
   171dc:	add	r2, r2, r1
   171e0:	sub	r1, r3, r1
   171e4:	str	r2, [r4, #16]
   171e8:	mvn	r2, #3
   171ec:	cmn	r1, #4
   171f0:	movcs	r1, r2
   171f4:	str	r1, [r4, #24]
   171f8:	str	r2, [r0, #4]
   171fc:	ldr	r1, [r0, #20]
   17200:	adds	r1, r1, sl
   17204:	cmpcc	r1, #1073741824	; 0x40000000
   17208:	bcc	1722c <flatcc_builder_create_union_vector@@Base+0xc0>
   1720c:	ldr	r0, [pc, #556]	; 17440 <flatcc_builder_create_union_vector@@Base+0x2d4>
   17210:	ldr	r1, [pc, #556]	; 17444 <flatcc_builder_create_union_vector@@Base+0x2d8>
   17214:	ldr	r3, [pc, #556]	; 17448 <flatcc_builder_create_union_vector@@Base+0x2dc>
   17218:	mov	r2, #892	; 0x37c
   1721c:	add	r0, pc, r0
   17220:	add	r1, pc, r1
   17224:	add	r3, pc, r3
   17228:	bl	12418 <__assert_fail@plt>
   1722c:	str	r1, [r0, #20]
   17230:	ldr	r7, [r4, #20]
   17234:	ldr	r0, [r4, #24]
   17238:	add	r1, r7, sl, lsl #2
   1723c:	cmp	r1, r0
   17240:	str	r1, [r4, #20]
   17244:	bcs	17258 <flatcc_builder_create_union_vector@@Base+0xec>
   17248:	ldr	r1, [r4, #16]
   1724c:	adds	r2, r1, r7
   17250:	bne	172c0 <flatcc_builder_create_union_vector@@Base+0x154>
   17254:	b	171ac <flatcc_builder_create_union_vector@@Base+0x40>
   17258:	ldr	r2, [r4, #28]
   1725c:	ldr	r0, [r4, #40]	; 0x28
   17260:	ldr	r6, [r4, #48]	; 0x30
   17264:	mov	r3, #1
   17268:	str	r3, [sp]
   1726c:	mov	r3, #1
   17270:	add	r1, r1, r2
   17274:	add	r2, r1, #1
   17278:	add	r1, r4, #60	; 0x3c
   1727c:	blx	r6
   17280:	cmp	r0, #0
   17284:	bne	171ac <flatcc_builder_create_union_vector@@Base+0x40>
   17288:	ldr	r0, [r4, #28]
   1728c:	ldr	r1, [r4, #60]	; 0x3c
   17290:	ldr	r3, [r4, #64]	; 0x40
   17294:	ldr	r2, [r4, #32]
   17298:	add	r1, r1, r0
   1729c:	sub	r0, r3, r0
   172a0:	mvn	r3, #3
   172a4:	cmn	r0, #4
   172a8:	str	r1, [r4, #16]
   172ac:	movcs	r0, r3
   172b0:	str	r0, [r4, #24]
   172b4:	str	r3, [r2, #4]
   172b8:	adds	r2, r1, r7
   172bc:	beq	171ac <flatcc_builder_create_union_vector@@Base+0x40>
   172c0:	ldr	r7, [r4, #20]
   172c4:	add	r2, r7, sl
   172c8:	cmp	r2, r0
   172cc:	str	r2, [r4, #20]
   172d0:	bcc	17334 <flatcc_builder_create_union_vector@@Base+0x1c8>
   172d4:	ldr	r1, [r4, #28]
   172d8:	ldr	r0, [r4, #40]	; 0x28
   172dc:	ldr	r6, [r4, #48]	; 0x30
   172e0:	mov	r3, #1
   172e4:	str	r3, [sp]
   172e8:	mov	r3, #1
   172ec:	add	r1, r2, r1
   172f0:	add	r2, r1, #1
   172f4:	add	r1, r4, #60	; 0x3c
   172f8:	blx	r6
   172fc:	cmp	r0, #0
   17300:	bne	171ac <flatcc_builder_create_union_vector@@Base+0x40>
   17304:	ldr	r0, [r4, #28]
   17308:	ldr	r1, [r4, #60]	; 0x3c
   1730c:	ldr	r3, [r4, #64]	; 0x40
   17310:	ldr	r2, [r4, #32]
   17314:	add	r1, r1, r0
   17318:	sub	r0, r3, r0
   1731c:	mvn	r3, #3
   17320:	cmn	r0, #4
   17324:	str	r1, [r4, #16]
   17328:	movcs	r0, r3
   1732c:	str	r0, [r4, #24]
   17330:	str	r3, [r2, #4]
   17334:	adds	r8, r1, r7
   17338:	beq	171ac <flatcc_builder_create_union_vector@@Base+0x40>
   1733c:	cmp	sl, #0
   17340:	beq	17370 <flatcc_builder_create_union_vector@@Base+0x204>
   17344:	add	r0, r9, #4
   17348:	mov	r2, sl
   1734c:	mov	r3, r1
   17350:	mov	r7, r8
   17354:	ldrb	r6, [r0, #-4]
   17358:	subs	r2, r2, #1
   1735c:	strb	r6, [r7], #1
   17360:	ldr	r6, [r0]
   17364:	add	r0, r0, #8
   17368:	str	r6, [r3], #4
   1736c:	bne	17354 <flatcc_builder_create_union_vector@@Base+0x1e8>
   17370:	mov	r0, r4
   17374:	mov	r2, sl
   17378:	mov	r3, r8
   1737c:	bl	16864 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17380:	mov	r7, r0
   17384:	mov	r9, #0
   17388:	cmp	r0, #0
   1738c:	beq	173b8 <flatcc_builder_create_union_vector@@Base+0x24c>
   17390:	mvn	r0, #0
   17394:	mov	r1, #1
   17398:	mov	r2, sl
   1739c:	mov	r3, #1
   173a0:	str	r1, [sp]
   173a4:	str	r0, [sp, #4]
   173a8:	mov	r0, r4
   173ac:	mov	r1, r8
   173b0:	bl	165cc <flatcc_builder_create_vector@@Base>
   173b4:	b	173bc <flatcc_builder_create_union_vector@@Base+0x250>
   173b8:	mov	r0, #0
   173bc:	orr	r1, r9, r7
   173c0:	stm	r5, {r0, r1}
   173c4:	mov	r1, #0
   173c8:	ldr	r0, [r4, #16]
   173cc:	ldr	r2, [r4, #20]
   173d0:	bl	123f4 <memset@plt>
   173d4:	ldr	r0, [r4, #32]
   173d8:	ldr	r1, [r4, #60]	; 0x3c
   173dc:	ldr	r2, [r4, #64]	; 0x40
   173e0:	ldr	r3, [r0, #8]
   173e4:	str	r3, [r4, #20]
   173e8:	ldr	r3, [r0]
   173ec:	str	r3, [r4, #28]
   173f0:	add	r1, r1, r3
   173f4:	ldr	r7, [r0, #4]
   173f8:	str	r1, [r4, #16]
   173fc:	sub	r1, r2, r3
   17400:	cmp	r1, r7
   17404:	movhi	r1, r7
   17408:	str	r1, [r4, #24]
   1740c:	ldrh	r1, [r4, #130]	; 0x82
   17410:	ldrh	r2, [r4, #128]	; 0x80
   17414:	cmp	r2, r1
   17418:	strhcc	r1, [r4, #128]	; 0x80
   1741c:	ldrh	r1, [r0, #12]
   17420:	sub	r0, r0, #36	; 0x24
   17424:	str	r0, [r4, #32]
   17428:	strh	r1, [r4, #130]	; 0x82
   1742c:	ldr	r0, [r4, #156]	; 0x9c
   17430:	sub	r0, r0, #1
   17434:	str	r0, [r4, #156]	; 0x9c
   17438:	sub	sp, fp, #28
   1743c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17440:	andeq	r2, r0, r4, lsl sp
   17444:	andeq	r1, r0, sl, asr #24
   17448:	andeq	r2, r0, r7, lsr #26

0001744c <flatcc_builder_create_union_vector_direct@@Base>:
   1744c:	push	{r4, r5, r6, r7, fp, lr}
   17450:	add	fp, sp, #16
   17454:	sub	sp, sp, #8
   17458:	ldr	r7, [fp, #8]
   1745c:	mov	r5, r2
   17460:	mov	r4, r0
   17464:	mov	r0, #0
   17468:	mov	r6, r1
   1746c:	str	r0, [r4]
   17470:	str	r0, [r4, #4]
   17474:	mov	r0, r1
   17478:	mov	r1, r3
   1747c:	mov	r3, r5
   17480:	mov	r2, r7
   17484:	bl	16864 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17488:	cmp	r0, #0
   1748c:	str	r0, [r4, #4]
   17490:	beq	174bc <flatcc_builder_create_union_vector_direct@@Base+0x70>
   17494:	mvn	r0, #0
   17498:	mov	r1, #1
   1749c:	mov	r2, r7
   174a0:	mov	r3, #1
   174a4:	str	r1, [sp]
   174a8:	str	r0, [sp, #4]
   174ac:	mov	r0, r6
   174b0:	mov	r1, r5
   174b4:	bl	165cc <flatcc_builder_create_vector@@Base>
   174b8:	str	r0, [r4]
   174bc:	sub	sp, fp, #16
   174c0:	pop	{r4, r5, r6, r7, fp, pc}

000174c4 <flatcc_builder_start_union_vector@@Base>:
   174c4:	push	{r4, sl, fp, lr}
   174c8:	add	fp, sp, #8
   174cc:	mov	r1, #4
   174d0:	mov	r4, r0
   174d4:	bl	144c0 <flatcc_builder_start_buffer@@Base+0xc0>
   174d8:	mov	r1, r0
   174dc:	mvn	r0, #0
   174e0:	cmp	r1, #0
   174e4:	popne	{r4, sl, fp, pc}
   174e8:	ldr	r0, [r4, #32]
   174ec:	mov	r1, #8
   174f0:	mov	r2, #7
   174f4:	str	r1, [r0, #16]
   174f8:	mov	r0, #0
   174fc:	ldr	r1, [r4, #32]
   17500:	str	r0, [r1, #20]
   17504:	ldr	r1, [r4, #32]
   17508:	strh	r2, [r1, #14]
   1750c:	ldr	r2, [r4, #28]
   17510:	ldr	r3, [r4, #60]	; 0x3c
   17514:	ldr	ip, [r4, #64]	; 0x40
   17518:	add	r3, r3, r2
   1751c:	sub	r2, ip, r2
   17520:	str	r3, [r4, #16]
   17524:	mvn	r3, #3
   17528:	cmn	r2, #4
   1752c:	movcs	r2, r3
   17530:	str	r2, [r4, #24]
   17534:	str	r3, [r1, #4]
   17538:	pop	{r4, sl, fp, pc}

0001753c <flatcc_builder_end_union_vector@@Base>:
   1753c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17540:	add	fp, sp, #28
   17544:	sub	sp, sp, #12
   17548:	mov	sl, r0
   1754c:	mov	r0, #0
   17550:	mov	r4, r1
   17554:	str	r0, [sl]
   17558:	str	r0, [sl, #4]
   1755c:	ldr	r0, [r1, #32]
   17560:	ldrh	r1, [r0, #14]
   17564:	cmp	r1, #7
   17568:	bne	1770c <flatcc_builder_end_union_vector@@Base+0x1d0>
   1756c:	ldr	r6, [r0, #20]
   17570:	ldr	r7, [r4, #20]
   17574:	ldr	r2, [r4, #24]
   17578:	add	r0, r6, r6, lsl #2
   1757c:	add	r1, r7, r0
   17580:	cmp	r1, r2
   17584:	str	r1, [r4, #20]
   17588:	bcs	1759c <flatcc_builder_end_union_vector@@Base+0x60>
   1758c:	ldr	r0, [r4, #16]
   17590:	adds	r1, r0, r7
   17594:	bne	17604 <flatcc_builder_end_union_vector@@Base+0xc8>
   17598:	b	17704 <flatcc_builder_end_union_vector@@Base+0x1c8>
   1759c:	ldr	r2, [r4, #28]
   175a0:	ldr	r0, [r4, #40]	; 0x28
   175a4:	ldr	r5, [r4, #48]	; 0x30
   175a8:	mov	r3, #1
   175ac:	str	r3, [sp]
   175b0:	mov	r3, #1
   175b4:	add	r1, r1, r2
   175b8:	add	r2, r1, #1
   175bc:	add	r1, r4, #60	; 0x3c
   175c0:	blx	r5
   175c4:	cmp	r0, #0
   175c8:	bne	17704 <flatcc_builder_end_union_vector@@Base+0x1c8>
   175cc:	ldr	r1, [r4, #28]
   175d0:	ldr	r0, [r4, #60]	; 0x3c
   175d4:	ldr	r3, [r4, #64]	; 0x40
   175d8:	ldr	r2, [r4, #32]
   175dc:	add	r0, r0, r1
   175e0:	sub	r1, r3, r1
   175e4:	mvn	r3, #3
   175e8:	cmn	r1, #4
   175ec:	str	r0, [r4, #16]
   175f0:	movcs	r1, r3
   175f4:	str	r1, [r4, #24]
   175f8:	str	r3, [r2, #4]
   175fc:	adds	r1, r0, r7
   17600:	beq	17704 <flatcc_builder_end_union_vector@@Base+0x1c8>
   17604:	add	r8, r1, r6, lsl #2
   17608:	cmp	r6, #0
   1760c:	beq	1763c <flatcc_builder_end_union_vector@@Base+0x100>
   17610:	add	r0, r0, #4
   17614:	mov	r2, r6
   17618:	mov	r3, r1
   1761c:	mov	r7, r8
   17620:	ldrb	r5, [r0, #-4]
   17624:	subs	r2, r2, #1
   17628:	strb	r5, [r7], #1
   1762c:	ldr	r5, [r0]
   17630:	add	r0, r0, #8
   17634:	str	r5, [r3], #4
   17638:	bne	17620 <flatcc_builder_end_union_vector@@Base+0xe4>
   1763c:	mov	r0, r4
   17640:	mov	r2, r6
   17644:	mov	r3, r8
   17648:	bl	16864 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1764c:	mov	r7, r0
   17650:	mov	r9, #0
   17654:	cmp	r0, #0
   17658:	beq	17684 <flatcc_builder_end_union_vector@@Base+0x148>
   1765c:	mvn	r0, #0
   17660:	mov	r1, #1
   17664:	mov	r2, r6
   17668:	mov	r3, #1
   1766c:	str	r1, [sp]
   17670:	str	r0, [sp, #4]
   17674:	mov	r0, r4
   17678:	mov	r1, r8
   1767c:	bl	165cc <flatcc_builder_create_vector@@Base>
   17680:	b	17688 <flatcc_builder_end_union_vector@@Base+0x14c>
   17684:	mov	r0, #0
   17688:	orr	r1, r9, r7
   1768c:	stm	sl, {r0, r1}
   17690:	mov	r1, #0
   17694:	ldr	r0, [r4, #16]
   17698:	ldr	r2, [r4, #20]
   1769c:	bl	123f4 <memset@plt>
   176a0:	ldr	r0, [r4, #32]
   176a4:	ldr	r1, [r4, #60]	; 0x3c
   176a8:	ldr	r2, [r4, #64]	; 0x40
   176ac:	ldr	r3, [r0, #8]
   176b0:	str	r3, [r4, #20]
   176b4:	ldr	r3, [r0]
   176b8:	str	r3, [r4, #28]
   176bc:	add	r1, r1, r3
   176c0:	ldr	r7, [r0, #4]
   176c4:	str	r1, [r4, #16]
   176c8:	sub	r1, r2, r3
   176cc:	cmp	r1, r7
   176d0:	movhi	r1, r7
   176d4:	str	r1, [r4, #24]
   176d8:	ldrh	r1, [r4, #130]	; 0x82
   176dc:	ldrh	r2, [r4, #128]	; 0x80
   176e0:	cmp	r2, r1
   176e4:	strhcc	r1, [r4, #128]	; 0x80
   176e8:	ldrh	r1, [r0, #12]
   176ec:	sub	r0, r0, #36	; 0x24
   176f0:	str	r0, [r4, #32]
   176f4:	strh	r1, [r4, #130]	; 0x82
   176f8:	ldr	r0, [r4, #156]	; 0x9c
   176fc:	sub	r0, r0, #1
   17700:	str	r0, [r4, #156]	; 0x9c
   17704:	sub	sp, fp, #28
   17708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1770c:	ldr	r0, [pc, #24]	; 1772c <flatcc_builder_end_union_vector@@Base+0x1f0>
   17710:	ldr	r1, [pc, #24]	; 17730 <flatcc_builder_end_union_vector@@Base+0x1f4>
   17714:	ldr	r3, [pc, #24]	; 17734 <flatcc_builder_end_union_vector@@Base+0x1f8>
   17718:	movw	r2, #1617	; 0x651
   1771c:	add	r0, pc, r0
   17720:	add	r1, pc, r1
   17724:	add	r3, pc, r3
   17728:	bl	12418 <__assert_fail@plt>
   1772c:	andeq	r2, r0, r7, lsl #7
   17730:	andeq	r1, r0, sl, asr #14
   17734:			; <UNDEFINED> instruction: 0x000023b1

00017738 <flatcc_builder_union_vector_count@@Base>:
   17738:	ldr	r0, [r0, #32]
   1773c:	ldr	r0, [r0, #20]
   17740:	bx	lr

00017744 <flatcc_builder_union_vector_edit@@Base>:
   17744:	ldr	r0, [r0, #16]
   17748:	bx	lr

0001774c <flatcc_builder_extend_union_vector@@Base>:
   1774c:	push	{r4, r5, fp, lr}
   17750:	add	fp, sp, #8
   17754:	sub	sp, sp, #8
   17758:	mov	r4, r0
   1775c:	ldr	r0, [r0, #32]
   17760:	ldr	r2, [r0, #20]
   17764:	adds	r2, r2, r1
   17768:	cmpcc	r2, #536870912	; 0x20000000
   1776c:	bcc	17790 <flatcc_builder_extend_union_vector@@Base+0x44>
   17770:	ldr	r0, [pc, #184]	; 17830 <flatcc_builder_extend_union_vector@@Base+0xe4>
   17774:	ldr	r1, [pc, #184]	; 17834 <flatcc_builder_extend_union_vector@@Base+0xe8>
   17778:	ldr	r3, [pc, #184]	; 17838 <flatcc_builder_extend_union_vector@@Base+0xec>
   1777c:	mov	r2, #892	; 0x37c
   17780:	add	r0, pc, r0
   17784:	add	r1, pc, r1
   17788:	add	r3, pc, r3
   1778c:	bl	12418 <__assert_fail@plt>
   17790:	str	r2, [r0, #20]
   17794:	ldr	r5, [r4, #20]
   17798:	ldr	r0, [r4, #24]
   1779c:	add	r1, r5, r1, lsl #3
   177a0:	cmp	r1, r0
   177a4:	str	r1, [r4, #20]
   177a8:	bcs	177b4 <flatcc_builder_extend_union_vector@@Base+0x68>
   177ac:	ldr	r0, [r4, #16]
   177b0:	b	17824 <flatcc_builder_extend_union_vector@@Base+0xd8>
   177b4:	ldr	r2, [r4, #28]
   177b8:	ldr	r0, [r4, #40]	; 0x28
   177bc:	ldr	ip, [r4, #48]	; 0x30
   177c0:	mov	r3, #1
   177c4:	str	r3, [sp]
   177c8:	mov	r3, #1
   177cc:	add	r1, r1, r2
   177d0:	add	r2, r1, #1
   177d4:	add	r1, r4, #60	; 0x3c
   177d8:	blx	ip
   177dc:	mov	r1, r0
   177e0:	mov	r0, #0
   177e4:	cmp	r1, #0
   177e8:	beq	177f4 <flatcc_builder_extend_union_vector@@Base+0xa8>
   177ec:	sub	sp, fp, #8
   177f0:	pop	{r4, r5, fp, pc}
   177f4:	ldr	r1, [r4, #28]
   177f8:	ldr	r0, [r4, #60]	; 0x3c
   177fc:	ldr	r3, [r4, #64]	; 0x40
   17800:	ldr	r2, [r4, #32]
   17804:	add	r0, r0, r1
   17808:	sub	r1, r3, r1
   1780c:	mvn	r3, #3
   17810:	cmn	r1, #4
   17814:	str	r0, [r4, #16]
   17818:	movcs	r1, r3
   1781c:	str	r1, [r4, #24]
   17820:	str	r3, [r2, #4]
   17824:	add	r0, r0, r5
   17828:	sub	sp, fp, #8
   1782c:	pop	{r4, r5, fp, pc}
   17830:			; <UNDEFINED> instruction: 0x000027b0
   17834:	andeq	r1, r0, r6, ror #13
   17838:	andeq	r2, r0, r3, asr #15

0001783c <flatcc_builder_truncate_union_vector@@Base>:
   1783c:	push	{fp, lr}
   17840:	mov	fp, sp
   17844:	ldr	r2, [r0, #32]
   17848:	ldrh	r3, [r2, #14]
   1784c:	cmp	r3, #7
   17850:	bne	17898 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   17854:	ldr	r3, [r2, #20]
   17858:	cmp	r3, r1
   1785c:	bcc	178b8 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   17860:	sub	r3, r3, r1
   17864:	str	r3, [r2, #20]
   17868:	ldr	r2, [r0, #32]
   1786c:	ldr	r3, [r0, #20]
   17870:	ldr	ip, [r0, #16]
   17874:	ldr	r2, [r2, #16]
   17878:	mls	r3, r2, r1, r3
   1787c:	mul	r2, r2, r1
   17880:	mov	r1, #0
   17884:	str	r3, [r0, #20]
   17888:	add	r0, ip, r3
   1788c:	bl	123f4 <memset@plt>
   17890:	mov	r0, #0
   17894:	pop	{fp, pc}
   17898:	ldr	r0, [pc, #56]	; 178d8 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   1789c:	ldr	r1, [pc, #56]	; 178dc <flatcc_builder_truncate_union_vector@@Base+0xa0>
   178a0:	ldr	r3, [pc, #56]	; 178e0 <flatcc_builder_truncate_union_vector@@Base+0xa4>
   178a4:	movw	r2, #1665	; 0x681
   178a8:	add	r0, pc, r0
   178ac:	add	r1, pc, r1
   178b0:	add	r3, pc, r3
   178b4:	bl	12418 <__assert_fail@plt>
   178b8:	ldr	r0, [pc, #36]	; 178e4 <flatcc_builder_truncate_union_vector@@Base+0xa8>
   178bc:	ldr	r1, [pc, #36]	; 178e8 <flatcc_builder_truncate_union_vector@@Base+0xac>
   178c0:	ldr	r3, [pc, #36]	; 178ec <flatcc_builder_truncate_union_vector@@Base+0xb0>
   178c4:	movw	r2, #1666	; 0x682
   178c8:	add	r0, pc, r0
   178cc:	add	r1, pc, r1
   178d0:	add	r3, pc, r3
   178d4:	bl	12418 <__assert_fail@plt>
   178d8:	strdeq	r2, [r0], -fp
   178dc:			; <UNDEFINED> instruction: 0x000015be
   178e0:	andeq	r2, r0, r8, ror r2
   178e4:	andeq	r1, r0, pc, lsr ip
   178e8:	muleq	r0, lr, r5
   178ec:	andeq	r2, r0, r8, asr r2

000178f0 <flatcc_builder_union_vector_push@@Base>:
   178f0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   178f4:	add	fp, sp, #24
   178f8:	sub	sp, sp, #8
   178fc:	mov	r7, r0
   17900:	ldr	r0, [r0, #32]
   17904:	mov	r9, r1
   17908:	ldrh	r1, [r0, #14]
   1790c:	cmp	r1, #7
   17910:	bne	179cc <flatcc_builder_union_vector_push@@Base+0xdc>
   17914:	ldr	r1, [r0, #20]
   17918:	mov	r6, #0
   1791c:	cmn	r1, #-536870911	; 0xe0000001
   17920:	beq	179c0 <flatcc_builder_union_vector_push@@Base+0xd0>
   17924:	add	r1, r1, #1
   17928:	mov	r8, r2
   1792c:	str	r1, [r0, #20]
   17930:	ldr	r4, [r7, #20]
   17934:	ldr	r0, [r7, #24]
   17938:	add	r1, r4, #8
   1793c:	cmp	r1, r0
   17940:	str	r1, [r7, #20]
   17944:	bcs	17950 <flatcc_builder_union_vector_push@@Base+0x60>
   17948:	ldr	r0, [r7, #16]
   1794c:	b	179b0 <flatcc_builder_union_vector_push@@Base+0xc0>
   17950:	ldr	r1, [r7, #28]
   17954:	ldr	r0, [r7, #40]	; 0x28
   17958:	ldr	r5, [r7, #48]	; 0x30
   1795c:	mov	r2, #1
   17960:	mov	r3, #1
   17964:	str	r2, [sp]
   17968:	add	r1, r4, r1
   1796c:	add	r2, r1, #9
   17970:	add	r1, r7, #60	; 0x3c
   17974:	blx	r5
   17978:	cmp	r0, #0
   1797c:	bne	179c0 <flatcc_builder_union_vector_push@@Base+0xd0>
   17980:	ldr	r1, [r7, #28]
   17984:	ldr	r0, [r7, #60]	; 0x3c
   17988:	ldr	r3, [r7, #64]	; 0x40
   1798c:	ldr	r2, [r7, #32]
   17990:	add	r0, r0, r1
   17994:	sub	r1, r3, r1
   17998:	mvn	r3, #3
   1799c:	cmn	r1, #4
   179a0:	str	r0, [r7, #16]
   179a4:	movcs	r1, r3
   179a8:	str	r1, [r7, #24]
   179ac:	str	r3, [r2, #4]
   179b0:	adds	r0, r0, r4
   179b4:	movne	r6, r0
   179b8:	strne	r9, [r0]
   179bc:	strne	r8, [r0, #4]
   179c0:	mov	r0, r6
   179c4:	sub	sp, fp, #24
   179c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   179cc:	ldr	r0, [pc, #24]	; 179ec <flatcc_builder_union_vector_push@@Base+0xfc>
   179d0:	ldr	r1, [pc, #24]	; 179f0 <flatcc_builder_union_vector_push@@Base+0x100>
   179d4:	ldr	r3, [pc, #24]	; 179f4 <flatcc_builder_union_vector_push@@Base+0x104>
   179d8:	movw	r2, #1677	; 0x68d
   179dc:	add	r0, pc, r0
   179e0:	add	r1, pc, r1
   179e4:	add	r3, pc, r3
   179e8:	bl	12418 <__assert_fail@plt>
   179ec:	andeq	r2, r0, r7, asr #1
   179f0:	andeq	r1, r0, sl, lsl #9
   179f4:	andeq	r2, r0, r9, lsl #3

000179f8 <flatcc_builder_append_union_vector@@Base>:
   179f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   179fc:	add	fp, sp, #24
   17a00:	sub	sp, sp, #8
   17a04:	mov	r6, r0
   17a08:	ldr	r0, [r0, #32]
   17a0c:	mov	r8, r1
   17a10:	ldrh	r1, [r0, #14]
   17a14:	cmp	r1, #7
   17a18:	bne	17b08 <flatcc_builder_append_union_vector@@Base+0x110>
   17a1c:	ldr	r1, [r0, #20]
   17a20:	mov	r5, r2
   17a24:	adds	r1, r1, r2
   17a28:	cmpcc	r1, #536870912	; 0x20000000
   17a2c:	bcc	17a50 <flatcc_builder_append_union_vector@@Base+0x58>
   17a30:	ldr	r0, [pc, #252]	; 17b34 <flatcc_builder_append_union_vector@@Base+0x13c>
   17a34:	ldr	r1, [pc, #252]	; 17b38 <flatcc_builder_append_union_vector@@Base+0x140>
   17a38:	ldr	r3, [pc, #252]	; 17b3c <flatcc_builder_append_union_vector@@Base+0x144>
   17a3c:	mov	r2, #892	; 0x37c
   17a40:	add	r0, pc, r0
   17a44:	add	r1, pc, r1
   17a48:	add	r3, pc, r3
   17a4c:	bl	12418 <__assert_fail@plt>
   17a50:	str	r1, [r0, #20]
   17a54:	ldr	r4, [r6, #20]
   17a58:	ldr	r0, [r6, #24]
   17a5c:	add	r1, r4, r5, lsl #3
   17a60:	cmp	r1, r0
   17a64:	str	r1, [r6, #20]
   17a68:	bcs	17a8c <flatcc_builder_append_union_vector@@Base+0x94>
   17a6c:	ldr	r0, [r6, #16]
   17a70:	adds	r7, r0, r4
   17a74:	beq	17af8 <flatcc_builder_append_union_vector@@Base+0x100>
   17a78:	lsl	r2, r5, #3
   17a7c:	mov	r0, r7
   17a80:	mov	r1, r8
   17a84:	bl	12388 <memcpy@plt>
   17a88:	b	17afc <flatcc_builder_append_union_vector@@Base+0x104>
   17a8c:	ldr	r2, [r6, #28]
   17a90:	ldr	r0, [r6, #40]	; 0x28
   17a94:	ldr	r7, [r6, #48]	; 0x30
   17a98:	mov	r3, #1
   17a9c:	str	r3, [sp]
   17aa0:	mov	r3, #1
   17aa4:	add	r1, r1, r2
   17aa8:	add	r2, r1, #1
   17aac:	add	r1, r6, #60	; 0x3c
   17ab0:	blx	r7
   17ab4:	mov	r7, #0
   17ab8:	cmp	r0, #0
   17abc:	bne	17afc <flatcc_builder_append_union_vector@@Base+0x104>
   17ac0:	ldr	r1, [r6, #28]
   17ac4:	ldr	r0, [r6, #60]	; 0x3c
   17ac8:	ldr	r3, [r6, #64]	; 0x40
   17acc:	ldr	r2, [r6, #32]
   17ad0:	add	r0, r0, r1
   17ad4:	sub	r1, r3, r1
   17ad8:	mvn	r3, #3
   17adc:	cmn	r1, #4
   17ae0:	str	r0, [r6, #16]
   17ae4:	movcs	r1, r3
   17ae8:	str	r1, [r6, #24]
   17aec:	str	r3, [r2, #4]
   17af0:	adds	r7, r0, r4
   17af4:	bne	17a78 <flatcc_builder_append_union_vector@@Base+0x80>
   17af8:	mov	r7, #0
   17afc:	mov	r0, r7
   17b00:	sub	sp, fp, #24
   17b04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17b08:	ldr	r0, [pc, #24]	; 17b28 <flatcc_builder_append_union_vector@@Base+0x130>
   17b0c:	ldr	r1, [pc, #24]	; 17b2c <flatcc_builder_append_union_vector@@Base+0x134>
   17b10:	ldr	r3, [pc, #24]	; 17b30 <flatcc_builder_append_union_vector@@Base+0x138>
   17b14:	movw	r2, #1692	; 0x69c
   17b18:	add	r0, pc, r0
   17b1c:	add	r1, pc, r1
   17b20:	add	r3, pc, r3
   17b24:	bl	12418 <__assert_fail@plt>
   17b28:	andeq	r1, r0, fp, lsl #31
   17b2c:	andeq	r1, r0, lr, asr #6
   17b30:	strheq	r2, [r0], -sl
   17b34:	strdeq	r2, [r0], -r0
   17b38:	andeq	r1, r0, r6, lsr #8
   17b3c:	andeq	r2, r0, r3, lsl #10

00017b40 <flatcc_builder_create_string@@Base>:
   17b40:	push	{r4, r5, r6, sl, fp, lr}
   17b44:	add	fp, sp, #16
   17b48:	sub	sp, sp, #80	; 0x50
   17b4c:	str	r2, [fp, #-20]	; 0xffffffec
   17b50:	mvn	r5, r2
   17b54:	mov	r6, r0
   17b58:	mov	r3, #1
   17b5c:	cmp	r2, #0
   17b60:	ldr	ip, [r0, #136]	; 0x88
   17b64:	sub	r0, fp, #20
   17b68:	str	r0, [sp, #12]
   17b6c:	mov	r0, #4
   17b70:	str	r0, [sp, #4]
   17b74:	str	r0, [sp, #16]
   17b78:	str	r3, [sp, #8]
   17b7c:	add	r5, ip, r5
   17b80:	and	r5, r5, #3
   17b84:	add	r5, r5, #1
   17b88:	beq	17ba4 <flatcc_builder_create_string@@Base+0x64>
   17b8c:	mov	r3, #2
   17b90:	add	r0, r2, #4
   17b94:	str	r1, [sp, #20]
   17b98:	str	r2, [sp, #24]
   17b9c:	str	r3, [sp, #8]
   17ba0:	str	r0, [sp, #4]
   17ba4:	add	r1, r0, r5
   17ba8:	add	lr, sp, #4
   17bac:	str	r1, [sp, #4]
   17bb0:	add	r0, lr, r3, lsl #3
   17bb4:	cmp	r1, #0
   17bb8:	ldr	r2, [pc, #132]	; 17c44 <flatcc_builder_create_string@@Base+0x104>
   17bbc:	ldr	r2, [pc, r2]
   17bc0:	str	r2, [r0, #8]
   17bc4:	add	r2, r3, #1
   17bc8:	str	r5, [r0, #12]
   17bcc:	str	r2, [sp, #8]
   17bd0:	ble	17c24 <flatcc_builder_create_string@@Base+0xe4>
   17bd4:	ldr	r0, [r6, #36]	; 0x24
   17bd8:	ldr	r4, [r6, #44]	; 0x2c
   17bdc:	sub	r5, ip, r1
   17be0:	str	r1, [sp]
   17be4:	add	r1, lr, #8
   17be8:	mov	r3, r5
   17bec:	blx	r4
   17bf0:	cmp	r0, #0
   17bf4:	streq	r5, [r6, #136]	; 0x88
   17bf8:	moveq	r0, r5
   17bfc:	subeq	sp, fp, #16
   17c00:	popeq	{r4, r5, r6, sl, fp, pc}
   17c04:	ldr	r0, [pc, #72]	; 17c54 <flatcc_builder_create_string@@Base+0x114>
   17c08:	ldr	r1, [pc, #72]	; 17c58 <flatcc_builder_create_string@@Base+0x118>
   17c0c:	ldr	r3, [pc, #72]	; 17c5c <flatcc_builder_create_string@@Base+0x11c>
   17c10:	movw	r2, #651	; 0x28b
   17c14:	add	r0, pc, r0
   17c18:	add	r1, pc, r1
   17c1c:	add	r3, pc, r3
   17c20:	bl	12418 <__assert_fail@plt>
   17c24:	ldr	r0, [pc, #28]	; 17c48 <flatcc_builder_create_string@@Base+0x108>
   17c28:	ldr	r1, [pc, #28]	; 17c4c <flatcc_builder_create_string@@Base+0x10c>
   17c2c:	ldr	r3, [pc, #28]	; 17c50 <flatcc_builder_create_string@@Base+0x110>
   17c30:	movw	r2, #647	; 0x287
   17c34:	add	r0, pc, r0
   17c38:	add	r1, pc, r1
   17c3c:	add	r3, pc, r3
   17c40:	bl	12418 <__assert_fail@plt>
   17c44:	andeq	r3, r1, r4, lsl #9
   17c48:	strdeq	r2, [r0], -r3
   17c4c:	andeq	r1, r0, r2, lsr r2
   17c50:	andeq	r2, r0, sl, lsr #5
   17c54:	andeq	r2, r0, r3, lsl r4
   17c58:	andeq	r1, r0, r2, asr r2
   17c5c:	andeq	r2, r0, sl, asr #5

00017c60 <flatcc_builder_create_string_str@@Base>:
   17c60:	push	{r4, r5, fp, lr}
   17c64:	add	fp, sp, #8
   17c68:	mov	r5, r0
   17c6c:	mov	r0, r1
   17c70:	mov	r4, r1
   17c74:	bl	123dc <strlen@plt>
   17c78:	mov	r2, r0
   17c7c:	mov	r0, r5
   17c80:	mov	r1, r4
   17c84:	pop	{r4, r5, fp, lr}
   17c88:	b	17b40 <flatcc_builder_create_string@@Base>

00017c8c <flatcc_builder_create_string_strn@@Base>:
   17c8c:	push	{r4, r5, r6, sl, fp, lr}
   17c90:	add	fp, sp, #16
   17c94:	mov	r6, r0
   17c98:	mov	r5, r1
   17c9c:	mov	r0, r1
   17ca0:	mov	r1, #0
   17ca4:	mov	r4, r2
   17ca8:	bl	12400 <memchr@plt>
   17cac:	cmp	r0, #0
   17cb0:	mov	r1, r5
   17cb4:	subne	r4, r0, r5
   17cb8:	mov	r0, r6
   17cbc:	mov	r2, r4
   17cc0:	pop	{r4, r5, r6, sl, fp, lr}
   17cc4:	b	17b40 <flatcc_builder_create_string@@Base>

00017cc8 <flatcc_builder_end_string@@Base>:
   17cc8:	push	{r4, r5, fp, lr}
   17ccc:	add	fp, sp, #8
   17cd0:	mov	r4, r0
   17cd4:	ldr	r0, [r0, #32]
   17cd8:	ldrh	r1, [r0, #14]
   17cdc:	cmp	r1, #6
   17ce0:	bne	17d88 <flatcc_builder_end_string@@Base+0xc0>
   17ce4:	ldr	r2, [r0, #20]
   17ce8:	ldr	r0, [r4, #20]
   17cec:	cmp	r2, r0
   17cf0:	bne	17da8 <flatcc_builder_end_string@@Base+0xe0>
   17cf4:	ldr	r1, [r4, #16]
   17cf8:	mov	r0, r4
   17cfc:	bl	17b40 <flatcc_builder_create_string@@Base>
   17d00:	mov	r5, r0
   17d04:	cmp	r0, #0
   17d08:	beq	17d80 <flatcc_builder_end_string@@Base+0xb8>
   17d0c:	ldr	r0, [r4, #16]
   17d10:	ldr	r2, [r4, #20]
   17d14:	mov	r1, #0
   17d18:	bl	123f4 <memset@plt>
   17d1c:	ldr	r0, [r4, #32]
   17d20:	ldr	r1, [r4, #60]	; 0x3c
   17d24:	ldr	ip, [r4, #64]	; 0x40
   17d28:	ldr	r3, [r0, #8]
   17d2c:	str	r3, [r4, #20]
   17d30:	ldr	r3, [r0]
   17d34:	str	r3, [r4, #28]
   17d38:	add	r1, r1, r3
   17d3c:	ldr	r2, [r0, #4]
   17d40:	str	r1, [r4, #16]
   17d44:	sub	r1, ip, r3
   17d48:	cmp	r1, r2
   17d4c:	movhi	r1, r2
   17d50:	str	r1, [r4, #24]
   17d54:	ldrh	r1, [r4, #130]	; 0x82
   17d58:	ldrh	r2, [r4, #128]	; 0x80
   17d5c:	cmp	r2, r1
   17d60:	strhcc	r1, [r4, #128]	; 0x80
   17d64:	ldrh	r1, [r0, #12]
   17d68:	sub	r0, r0, #36	; 0x24
   17d6c:	str	r0, [r4, #32]
   17d70:	strh	r1, [r4, #130]	; 0x82
   17d74:	ldr	r0, [r4, #156]	; 0x9c
   17d78:	sub	r0, r0, #1
   17d7c:	str	r0, [r4, #156]	; 0x9c
   17d80:	mov	r0, r5
   17d84:	pop	{r4, r5, fp, pc}
   17d88:	ldr	r0, [pc, #56]	; 17dc8 <flatcc_builder_end_string@@Base+0x100>
   17d8c:	ldr	r1, [pc, #56]	; 17dcc <flatcc_builder_end_string@@Base+0x104>
   17d90:	ldr	r3, [pc, #56]	; 17dd0 <flatcc_builder_end_string@@Base+0x108>
   17d94:	movw	r2, #1732	; 0x6c4
   17d98:	add	r0, pc, r0
   17d9c:	add	r1, pc, r1
   17da0:	add	r3, pc, r3
   17da4:	bl	12418 <__assert_fail@plt>
   17da8:	ldr	r0, [pc, #36]	; 17dd4 <flatcc_builder_end_string@@Base+0x10c>
   17dac:	ldr	r1, [pc, #36]	; 17dd8 <flatcc_builder_end_string@@Base+0x110>
   17db0:	ldr	r3, [pc, #36]	; 17ddc <flatcc_builder_end_string@@Base+0x114>
   17db4:	movw	r2, #1733	; 0x6c5
   17db8:	add	r0, pc, r0
   17dbc:	add	r1, pc, r1
   17dc0:	add	r3, pc, r3
   17dc4:	bl	12418 <__assert_fail@plt>
   17dc8:	andeq	r1, r0, lr, lsl #12
   17dcc:	andeq	r1, r0, lr, asr #1
   17dd0:			; <UNDEFINED> instruction: 0x00001eb9
   17dd4:	andeq	r1, r0, r4, ror #29
   17dd8:	andeq	r1, r0, lr, lsr #1
   17ddc:	muleq	r0, r9, lr

00017de0 <flatcc_builder_string_edit@@Base>:
   17de0:	ldr	r0, [r0, #16]
   17de4:	bx	lr

00017de8 <flatcc_builder_string_len@@Base>:
   17de8:	ldr	r0, [r0, #32]
   17dec:	ldr	r0, [r0, #20]
   17df0:	bx	lr

00017df4 <flatcc_builder_table_edit@@Base>:
   17df4:	ldr	r2, [r0, #32]
   17df8:	ldrh	r2, [r2, #14]
   17dfc:	cmp	r2, #3
   17e00:	ldreq	r2, [r0, #16]
   17e04:	ldreq	r0, [r0, #20]
   17e08:	addeq	r0, r2, r0
   17e0c:	subeq	r0, r0, r1
   17e10:	bxeq	lr
   17e14:	push	{fp, lr}
   17e18:	mov	fp, sp
   17e1c:	ldr	r0, [pc, #24]	; 17e3c <flatcc_builder_table_edit@@Base+0x48>
   17e20:	ldr	r1, [pc, #24]	; 17e40 <flatcc_builder_table_edit@@Base+0x4c>
   17e24:	ldr	r3, [pc, #24]	; 17e44 <flatcc_builder_table_edit@@Base+0x50>
   17e28:	movw	r2, #1794	; 0x702
   17e2c:	add	r0, pc, r0
   17e30:	add	r1, pc, r1
   17e34:	add	r3, pc, r3
   17e38:	bl	12418 <__assert_fail@plt>
   17e3c:	andeq	r1, r0, sl, ror #16
   17e40:	andeq	r1, r0, sl, lsr r0
   17e44:	andeq	r1, r0, sl, lsl pc

00017e48 <flatcc_builder_table_add_copy@@Base>:
   17e48:	push	{r4, r5, r6, sl, fp, lr}
   17e4c:	add	fp, sp, #16
   17e50:	mov	r4, r3
   17e54:	ldr	r3, [fp, #8]
   17e58:	mov	r5, r2
   17e5c:	mov	r2, r4
   17e60:	bl	16e7c <flatcc_builder_table_add@@Base>
   17e64:	mov	r6, r0
   17e68:	cmp	r0, #0
   17e6c:	beq	17e80 <flatcc_builder_table_add_copy@@Base+0x38>
   17e70:	mov	r0, r6
   17e74:	mov	r1, r5
   17e78:	mov	r2, r4
   17e7c:	bl	12388 <memcpy@plt>
   17e80:	mov	r0, r6
   17e84:	pop	{r4, r5, r6, sl, fp, pc}

00017e88 <flatcc_builder_push_buffer_alignment@@Base>:
   17e88:	ldrh	r1, [r0, #128]	; 0x80
   17e8c:	mov	r2, #4
   17e90:	strh	r2, [r0, #128]	; 0x80
   17e94:	mov	r0, r1
   17e98:	bx	lr

00017e9c <flatcc_builder_pop_buffer_alignment@@Base>:
   17e9c:	ldrh	r2, [r0, #128]	; 0x80
   17ea0:	cmp	r2, r1
   17ea4:	strhcc	r1, [r0, #128]	; 0x80
   17ea8:	bx	lr

00017eac <flatcc_builder_get_buffer_alignment@@Base>:
   17eac:	ldrh	r0, [r0, #128]	; 0x80
   17eb0:	bx	lr

00017eb4 <flatcc_builder_set_vtable_clustering@@Base>:
   17eb4:	clz	r1, r1
   17eb8:	lsr	r1, r1, #5
   17ebc:	str	r1, [r0, #180]	; 0xb4
   17ec0:	bx	lr

00017ec4 <flatcc_builder_set_block_align@@Base>:
   17ec4:	strh	r1, [r0, #132]	; 0x84
   17ec8:	bx	lr

00017ecc <flatcc_builder_get_level@@Base>:
   17ecc:	ldr	r0, [r0, #156]	; 0x9c
   17ed0:	bx	lr

00017ed4 <flatcc_builder_set_max_level@@Base>:
   17ed4:	str	r1, [r0, #176]	; 0xb0
   17ed8:	ldr	r2, [r0, #160]	; 0xa0
   17edc:	cmp	r2, r1
   17ee0:	strlt	r1, [r0, #160]	; 0xa0
   17ee4:	bx	lr

00017ee8 <flatcc_builder_get_buffer_size@@Base>:
   17ee8:	ldr	r1, [r0, #136]	; 0x88
   17eec:	ldr	r0, [r0, #140]	; 0x8c
   17ef0:	sub	r0, r0, r1
   17ef4:	bx	lr

00017ef8 <flatcc_builder_get_buffer_start@@Base>:
   17ef8:	ldr	r0, [r0, #136]	; 0x88
   17efc:	bx	lr

00017f00 <flatcc_builder_get_buffer_end@@Base>:
   17f00:	ldr	r0, [r0, #140]	; 0x8c
   17f04:	bx	lr

00017f08 <flatcc_builder_set_vtable_cache_limit@@Base>:
   17f08:	str	r1, [r0, #172]	; 0xac
   17f0c:	bx	lr

00017f10 <flatcc_builder_set_identifier@@Base>:
   17f10:	ldr	r2, [pc, #20]	; 17f2c <flatcc_builder_set_identifier@@Base+0x1c>
   17f14:	cmp	r1, #0
   17f18:	ldr	r2, [pc, r2]
   17f1c:	movne	r2, r1
   17f20:	ldr	r1, [r2]
   17f24:	str	r1, [r0, #168]	; 0xa8
   17f28:	bx	lr
   17f2c:	andeq	r3, r1, r8, lsr #2

00017f30 <flatcc_builder_get_type@@Base>:
   17f30:	ldr	r0, [r0, #32]
   17f34:	cmp	r0, #0
   17f38:	ldrhne	r0, [r0, #14]
   17f3c:	moveq	r0, #0
   17f40:	bx	lr

00017f44 <flatcc_builder_get_type_at@@Base>:
   17f44:	mov	r2, r0
   17f48:	cmp	r1, #1
   17f4c:	mov	r0, #0
   17f50:	ldrge	r3, [r2, #156]	; 0x9c
   17f54:	cmpge	r3, r1
   17f58:	bge	17f60 <flatcc_builder_get_type_at@@Base+0x1c>
   17f5c:	bx	lr
   17f60:	sub	r0, r1, r3
   17f64:	ldr	r1, [r2, #32]
   17f68:	add	r0, r0, r0, lsl #3
   17f6c:	add	r0, r1, r0, lsl #2
   17f70:	ldrh	r0, [r0, #14]
   17f74:	bx	lr

00017f78 <flatcc_builder_get_direct_buffer@@Base>:
   17f78:	ldr	r2, [r0, #184]	; 0xb8
   17f7c:	cmp	r2, #0
   17f80:	beq	17f94 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   17f84:	ldr	r2, [r0, #188]	; 0xbc
   17f88:	ldr	r3, [r0, #192]	; 0xc0
   17f8c:	cmp	r2, r3
   17f90:	beq	17fac <flatcc_builder_get_direct_buffer@@Base+0x34>
   17f94:	cmp	r1, #0
   17f98:	moveq	r0, #0
   17f9c:	bxeq	lr
   17fa0:	mov	r0, #0
   17fa4:	str	r0, [r1]
   17fa8:	bx	lr
   17fac:	cmp	r1, #0
   17fb0:	ldrne	r2, [r0, #212]	; 0xd4
   17fb4:	strne	r2, [r1]
   17fb8:	ldr	r0, [r0, #196]	; 0xc4
   17fbc:	bx	lr

00017fc0 <flatcc_builder_copy_buffer@@Base>:
   17fc0:	push	{fp, lr}
   17fc4:	mov	fp, sp
   17fc8:	ldr	r3, [r0, #184]	; 0xb8
   17fcc:	cmp	r3, #0
   17fd0:	beq	18004 <flatcc_builder_copy_buffer@@Base+0x44>
   17fd4:	add	r0, r0, #188	; 0xbc
   17fd8:	bl	18710 <flatcc_emitter_copy_buffer@@Base>
   17fdc:	cmp	r0, #0
   17fe0:	popne	{fp, pc}
   17fe4:	ldr	r0, [pc, #32]	; 1800c <flatcc_builder_copy_buffer@@Base+0x4c>
   17fe8:	ldr	r1, [pc, #32]	; 18010 <flatcc_builder_copy_buffer@@Base+0x50>
   17fec:	ldr	r3, [pc, #32]	; 18014 <flatcc_builder_copy_buffer@@Base+0x54>
   17ff0:	movw	r2, #1926	; 0x786
   17ff4:	add	r0, pc, r0
   17ff8:	add	r1, pc, r1
   17ffc:	add	r3, pc, r3
   18000:	bl	12418 <__assert_fail@plt>
   18004:	mov	r0, #0
   18008:	pop	{fp, pc}
   1800c:	andeq	r1, r0, r1, ror #1
   18010:	andeq	r0, r0, r2, ror lr
   18014:	ldrdeq	r1, [r0], -sp

00018018 <flatcc_builder_finalize_buffer@@Base>:
   18018:	push	{r4, r5, r6, sl, fp, lr}
   1801c:	add	fp, sp, #16
   18020:	mov	r5, r0
   18024:	ldr	r0, [r0, #136]	; 0x88
   18028:	cmp	r1, #0
   1802c:	ldr	r2, [r5, #140]	; 0x8c
   18030:	sub	r4, r2, r0
   18034:	mov	r0, r4
   18038:	strne	r4, [r1]
   1803c:	bl	123b8 <malloc@plt>
   18040:	cmp	r0, #0
   18044:	beq	18094 <flatcc_builder_finalize_buffer@@Base+0x7c>
   18048:	mov	r6, r0
   1804c:	ldr	r0, [r5, #184]	; 0xb8
   18050:	cmp	r0, #0
   18054:	beq	180b4 <flatcc_builder_finalize_buffer@@Base+0x9c>
   18058:	add	r0, r5, #188	; 0xbc
   1805c:	mov	r1, r6
   18060:	mov	r2, r4
   18064:	bl	18710 <flatcc_emitter_copy_buffer@@Base>
   18068:	cmp	r0, #0
   1806c:	movne	r0, r6
   18070:	popne	{r4, r5, r6, sl, fp, pc}
   18074:	ldr	r0, [pc, #88]	; 180d4 <flatcc_builder_finalize_buffer@@Base+0xbc>
   18078:	ldr	r1, [pc, #88]	; 180d8 <flatcc_builder_finalize_buffer@@Base+0xc0>
   1807c:	ldr	r3, [pc, #88]	; 180dc <flatcc_builder_finalize_buffer@@Base+0xc4>
   18080:	movw	r2, #1926	; 0x786
   18084:	add	r0, pc, r0
   18088:	add	r1, pc, r1
   1808c:	add	r3, pc, r3
   18090:	bl	12418 <__assert_fail@plt>
   18094:	ldr	r0, [pc, #80]	; 180ec <flatcc_builder_finalize_buffer@@Base+0xd4>
   18098:	ldr	r1, [pc, #80]	; 180f0 <flatcc_builder_finalize_buffer@@Base+0xd8>
   1809c:	ldr	r3, [pc, #80]	; 180f4 <flatcc_builder_finalize_buffer@@Base+0xdc>
   180a0:	movw	r2, #1944	; 0x798
   180a4:	add	r0, pc, r0
   180a8:	add	r1, pc, r1
   180ac:	add	r3, pc, r3
   180b0:	bl	12418 <__assert_fail@plt>
   180b4:	ldr	r0, [pc, #36]	; 180e0 <flatcc_builder_finalize_buffer@@Base+0xc8>
   180b8:	ldr	r1, [pc, #36]	; 180e4 <flatcc_builder_finalize_buffer@@Base+0xcc>
   180bc:	ldr	r3, [pc, #36]	; 180e8 <flatcc_builder_finalize_buffer@@Base+0xd0>
   180c0:	movw	r2, #1948	; 0x79c
   180c4:	add	r0, pc, r0
   180c8:	add	r1, pc, r1
   180cc:	add	r3, pc, r3
   180d0:	bl	12418 <__assert_fail@plt>
   180d4:	andeq	r1, r0, r1, asr r0
   180d8:	andeq	r0, r0, r2, ror #27
   180dc:	andeq	r1, r0, sp, asr #26
   180e0:	andeq	r1, r0, r3, ror #30
   180e4:	andeq	r0, r0, r2, lsr #27
   180e8:	andeq	r1, r0, r2, asr sp
   180ec:	andeq	r1, r0, r3, lsl #31
   180f0:	andeq	r0, r0, r2, asr #27
   180f4:	andeq	r1, r0, r2, ror sp

000180f8 <flatcc_builder_finalize_aligned_buffer@@Base>:
   180f8:	push	{r4, r5, r6, r7, fp, lr}
   180fc:	add	fp, sp, #16
   18100:	sub	sp, sp, #8
   18104:	mov	r5, r0
   18108:	mov	r4, r1
   1810c:	ldr	r0, [r0, #136]	; 0x88
   18110:	ldr	r1, [r5, #140]	; 0x8c
   18114:	cmp	r4, #0
   18118:	sub	r0, r1, r0
   1811c:	mov	r1, #0
   18120:	strne	r0, [r4]
   18124:	ldrh	r2, [r5, #128]	; 0x80
   18128:	str	r1, [sp, #4]
   1812c:	add	r0, r0, r2
   18130:	cmp	r2, #4
   18134:	mov	r1, r2
   18138:	rsb	r2, r2, #0
   1813c:	sub	r0, r0, #1
   18140:	movls	r1, #4
   18144:	and	r7, r0, r2
   18148:	add	r0, sp, #4
   1814c:	mov	r2, r7
   18150:	bl	123e8 <posix_memalign@plt>
   18154:	ldr	r6, [sp, #4]
   18158:	cmp	r0, #0
   1815c:	cmpne	r6, #0
   18160:	bne	181b0 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   18164:	cmp	r6, #0
   18168:	beq	181b8 <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   1816c:	ldr	r0, [r5, #184]	; 0xb8
   18170:	cmp	r0, #0
   18174:	beq	181b0 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   18178:	add	r0, r5, #188	; 0xbc
   1817c:	mov	r1, r6
   18180:	mov	r2, r7
   18184:	bl	18710 <flatcc_emitter_copy_buffer@@Base>
   18188:	cmp	r0, #0
   1818c:	bne	181c4 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   18190:	ldr	r0, [pc, #56]	; 181d0 <flatcc_builder_finalize_aligned_buffer@@Base+0xd8>
   18194:	ldr	r1, [pc, #56]	; 181d4 <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   18198:	ldr	r3, [pc, #56]	; 181d8 <flatcc_builder_finalize_aligned_buffer@@Base+0xe0>
   1819c:	movw	r2, #1926	; 0x786
   181a0:	add	r0, pc, r0
   181a4:	add	r1, pc, r1
   181a8:	add	r3, pc, r3
   181ac:	bl	12418 <__assert_fail@plt>
   181b0:	mov	r0, r6
   181b4:	bl	1237c <free@plt>
   181b8:	mov	r6, #0
   181bc:	cmp	r4, #0
   181c0:	strne	r6, [r4]
   181c4:	mov	r0, r6
   181c8:	sub	sp, fp, #16
   181cc:	pop	{r4, r5, r6, r7, fp, pc}
   181d0:	andeq	r0, r0, r5, lsr pc
   181d4:	andeq	r0, r0, r6, asr #25
   181d8:	andeq	r1, r0, r1, lsr ip

000181dc <flatcc_builder_aligned_alloc@@Base>:
   181dc:	push	{fp, lr}
   181e0:	mov	fp, sp
   181e4:	sub	sp, sp, #8
   181e8:	mov	r2, r1
   181ec:	mov	r1, r0
   181f0:	mov	r0, #0
   181f4:	cmp	r1, #4
   181f8:	str	r0, [sp, #4]
   181fc:	add	r0, sp, #4
   18200:	movls	r1, #4
   18204:	bl	123e8 <posix_memalign@plt>
   18208:	mov	r1, r0
   1820c:	ldr	r0, [sp, #4]
   18210:	cmp	r1, #0
   18214:	cmpne	r0, #0
   18218:	bne	18224 <flatcc_builder_aligned_alloc@@Base+0x48>
   1821c:	mov	sp, fp
   18220:	pop	{fp, pc}
   18224:	bl	1237c <free@plt>
   18228:	mov	r0, #0
   1822c:	str	r0, [sp, #4]
   18230:	mov	sp, fp
   18234:	pop	{fp, pc}

00018238 <flatcc_builder_aligned_free@@Base>:
   18238:	b	1237c <free@plt>

0001823c <flatcc_builder_get_emit_context@@Base>:
   1823c:	ldr	r0, [r0, #36]	; 0x24
   18240:	bx	lr

00018244 <flatcc_emitter_recycle_page@@Base>:
   18244:	ldr	r3, [r0]
   18248:	mov	r2, r0
   1824c:	mvn	r0, #0
   18250:	cmp	r3, r1
   18254:	ldrne	r2, [r2, #4]
   18258:	cmpne	r2, r1
   1825c:	bne	18264 <flatcc_emitter_recycle_page@@Base+0x20>
   18260:	bx	lr
   18264:	ldr	r0, [r1, #2944]	; 0xb80
   18268:	ldr	r2, [r1, #2948]	; 0xb84
   1826c:	str	r2, [r0, #2948]	; 0xb84
   18270:	ldr	r2, [r1, #2948]	; 0xb84
   18274:	str	r0, [r2, #2944]	; 0xb80
   18278:	ldr	r0, [r3, #2948]	; 0xb84
   1827c:	str	r3, [r1, #2944]	; 0xb80
   18280:	str	r0, [r1, #2948]	; 0xb84
   18284:	str	r1, [r0, #2944]	; 0xb80
   18288:	ldr	r0, [r1, #2944]	; 0xb80
   1828c:	str	r1, [r0, #2948]	; 0xb84
   18290:	mov	r0, #0
   18294:	bx	lr

00018298 <flatcc_emitter_reset@@Base>:
   18298:	push	{r4, sl, fp, lr}
   1829c:	add	fp, sp, #8
   182a0:	ldr	r1, [r0]
   182a4:	cmp	r1, #0
   182a8:	beq	18360 <flatcc_emitter_reset@@Base+0xc8>
   182ac:	mov	r4, r0
   182b0:	add	r2, r1, #1472	; 0x5c0
   182b4:	mov	r0, #1472	; 0x5c0
   182b8:	mov	r3, #0
   182bc:	stmib	r4, {r1, r2}
   182c0:	str	r0, [r4, #12]
   182c4:	str	r2, [r4, #16]
   182c8:	str	r0, [r4, #20]
   182cc:	movw	r0, #64064	; 0xfa40
   182d0:	movt	r0, #65535	; 0xffff
   182d4:	str	r0, [r1, #2952]	; 0xb88
   182d8:	ldr	r2, [r4, #32]
   182dc:	ldr	r0, [r4, #24]
   182e0:	cmp	r2, #0
   182e4:	moveq	r2, r0
   182e8:	streq	r0, [r4, #32]
   182ec:	str	r3, [r4, #24]
   182f0:	add	r2, r2, r2, lsl #1
   182f4:	lsr	r2, r2, #2
   182f8:	add	r0, r2, r0, lsr #2
   182fc:	str	r0, [r4, #32]
   18300:	ldr	r2, [r4, #28]
   18304:	cmp	r2, r0, lsl #1
   18308:	bls	18360 <flatcc_emitter_reset@@Base+0xc8>
   1830c:	mov	r2, r1
   18310:	ldr	r0, [r2, #2944]!	; 0xb80
   18314:	cmp	r0, r1
   18318:	beq	18360 <flatcc_emitter_reset@@Base+0xc8>
   1831c:	ldr	r3, [r0, #2944]	; 0xb80
   18320:	str	r3, [r2]
   18324:	ldr	r2, [r0, #2944]	; 0xb80
   18328:	str	r1, [r2, #2948]	; 0xb84
   1832c:	bl	1237c <free@plt>
   18330:	ldr	r0, [r4, #28]
   18334:	ldr	r1, [r4, #32]
   18338:	sub	r0, r0, #2944	; 0xb80
   1833c:	cmp	r0, r1, lsl #1
   18340:	str	r0, [r4, #28]
   18344:	popls	{r4, sl, fp, pc}
   18348:	ldr	r1, [r4, #4]
   1834c:	ldr	r3, [r4]
   18350:	mov	r2, r1
   18354:	ldr	r0, [r2, #2944]!	; 0xb80
   18358:	cmp	r0, r3
   1835c:	bne	1831c <flatcc_emitter_reset@@Base+0x84>
   18360:	pop	{r4, sl, fp, pc}

00018364 <flatcc_emitter_clear@@Base>:
   18364:	push	{r4, r5, r6, sl, fp, lr}
   18368:	add	fp, sp, #16
   1836c:	ldr	r5, [r0]
   18370:	cmp	r5, #0
   18374:	popeq	{r4, r5, r6, sl, fp, pc}
   18378:	mov	r4, r0
   1837c:	ldr	r0, [r5, #2948]	; 0xb84
   18380:	mov	r6, #0
   18384:	str	r6, [r0, #2944]	; 0xb80
   18388:	b	18398 <flatcc_emitter_clear@@Base+0x34>
   1838c:	mov	r5, r0
   18390:	ldr	r0, [r0, #2948]	; 0xb84
   18394:	bl	1237c <free@plt>
   18398:	ldr	r0, [r5, #2944]	; 0xb80
   1839c:	cmp	r0, #0
   183a0:	bne	1838c <flatcc_emitter_clear@@Base+0x28>
   183a4:	mov	r0, r5
   183a8:	bl	1237c <free@plt>
   183ac:	vmov.i32	q8, #0	; 0x00000000
   183b0:	add	r0, r4, #16
   183b4:	vst1.32	{d16-d17}, [r0]
   183b8:	mov	r0, #32
   183bc:	vst1.32	{d16-d17}, [r4], r0
   183c0:	str	r6, [r4]
   183c4:	pop	{r4, r5, r6, sl, fp, pc}

000183c8 <flatcc_emitter@@Base>:
   183c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183cc:	add	fp, sp, #28
   183d0:	sub	sp, sp, #4
   183d4:	mov	r6, r0
   183d8:	mov	r7, r1
   183dc:	ldr	r0, [r0, #24]
   183e0:	ldr	r1, [fp, #8]
   183e4:	mov	r4, r2
   183e8:	cmn	r3, #1
   183ec:	mov	r9, r6
   183f0:	add	r0, r0, r1
   183f4:	str	r0, [r6, #24]
   183f8:	ble	18538 <flatcc_emitter@@Base+0x170>
   183fc:	ldr	r0, [r9, #20]!
   18400:	cmp	r0, r1
   18404:	bcs	186ac <flatcc_emitter@@Base+0x2e4>
   18408:	mov	r8, #0
   1840c:	cmp	r4, #0
   18410:	beq	18704 <flatcc_emitter@@Base+0x33c>
   18414:	movw	sl, #64064	; 0xfa40
   18418:	movt	sl, #65535	; 0xffff
   1841c:	ldr	r8, [r7, #4]
   18420:	cmp	r8, #0
   18424:	beq	18528 <flatcc_emitter@@Base+0x160>
   18428:	ldr	r9, [r7]
   1842c:	cmp	r8, r0
   18430:	mov	r5, r8
   18434:	bls	184f4 <flatcc_emitter@@Base+0x12c>
   18438:	mov	r5, r0
   1843c:	cmp	r5, #0
   18440:	bne	184f4 <flatcc_emitter@@Base+0x12c>
   18444:	ldr	r5, [r6, #4]
   18448:	cmp	r5, #0
   1844c:	beq	18460 <flatcc_emitter@@Base+0x98>
   18450:	ldr	r0, [r5, #2944]	; 0xb80
   18454:	ldr	r1, [r6]
   18458:	cmp	r0, r1
   1845c:	bne	18498 <flatcc_emitter@@Base+0xd0>
   18460:	movw	r0, #2956	; 0xb8c
   18464:	bl	123b8 <malloc@plt>
   18468:	cmp	r0, #0
   1846c:	beq	186bc <flatcc_emitter@@Base+0x2f4>
   18470:	ldr	r1, [r6, #28]
   18474:	cmp	r5, #0
   18478:	add	r1, r1, #2944	; 0xb80
   1847c:	str	r1, [r6, #28]
   18480:	beq	184c4 <flatcc_emitter@@Base+0xfc>
   18484:	ldr	r1, [r6]
   18488:	str	r1, [r0, #2944]	; 0xb80
   1848c:	str	r5, [r0, #2948]	; 0xb84
   18490:	str	r0, [r1, #2948]	; 0xb84
   18494:	str	r0, [r5, #2944]	; 0xb80
   18498:	mov	r5, #2944	; 0xb80
   1849c:	str	r0, [r6, #4]
   184a0:	str	r0, [r6, #16]
   184a4:	str	r5, [r6, #20]
   184a8:	ldr	r1, [r0, #2948]	; 0xb84
   184ac:	ldr	r1, [r1, #2952]	; 0xb88
   184b0:	add	r1, r1, #2944	; 0xb80
   184b4:	str	r1, [r0, #2952]	; 0xb88
   184b8:	cmp	r8, r5
   184bc:	bhi	1843c <flatcc_emitter@@Base+0x74>
   184c0:	b	184f0 <flatcc_emitter@@Base+0x128>
   184c4:	add	r1, r0, #1472	; 0x5c0
   184c8:	mov	r5, #1472	; 0x5c0
   184cc:	str	r0, [r6]
   184d0:	stmib	r6, {r0, r1, r5}
   184d4:	str	r1, [r6, #16]
   184d8:	str	r5, [r6, #20]
   184dc:	str	r0, [r0, #2944]	; 0xb80
   184e0:	str	r0, [r0, #2948]	; 0xb84
   184e4:	str	sl, [r0, #2952]	; 0xb88
   184e8:	cmp	r8, r5
   184ec:	bhi	1843c <flatcc_emitter@@Base+0x74>
   184f0:	mov	r5, r8
   184f4:	ldr	r0, [r6, #16]
   184f8:	mov	r1, r9
   184fc:	mov	r2, r5
   18500:	bl	12388 <memcpy@plt>
   18504:	ldr	r0, [r6, #16]
   18508:	ldr	r1, [r6, #20]
   1850c:	add	r9, r9, r5
   18510:	subs	r8, r8, r5
   18514:	add	r2, r0, r5
   18518:	sub	r0, r1, r5
   1851c:	str	r2, [r6, #16]
   18520:	str	r0, [r6, #20]
   18524:	bne	1842c <flatcc_emitter@@Base+0x64>
   18528:	subs	r4, r4, #1
   1852c:	add	r7, r7, #8
   18530:	bne	1841c <flatcc_emitter@@Base+0x54>
   18534:	b	186a4 <flatcc_emitter@@Base+0x2dc>
   18538:	ldr	r0, [r9, #12]!
   1853c:	cmp	r0, r1
   18540:	bcs	186c4 <flatcc_emitter@@Base+0x2fc>
   18544:	mov	r8, #0
   18548:	cmp	r4, #0
   1854c:	beq	18704 <flatcc_emitter@@Base+0x33c>
   18550:	add	r0, r7, r4, lsl #3
   18554:	movw	sl, #2952	; 0xb88
   18558:	ldr	r8, [r0, #-4]
   1855c:	sub	r1, r0, #8
   18560:	str	r1, [sp]
   18564:	cmp	r8, #0
   18568:	beq	18698 <flatcc_emitter@@Base+0x2d0>
   1856c:	ldr	r0, [sp]
   18570:	ldr	r0, [r0]
   18574:	add	r7, r0, r8
   18578:	ldr	r1, [r9]
   1857c:	cmp	r8, r1
   18580:	bls	18668 <flatcc_emitter@@Base+0x2a0>
   18584:	cmp	r1, #0
   18588:	mov	r5, r1
   1858c:	bne	1866c <flatcc_emitter@@Base+0x2a4>
   18590:	ldr	r5, [r6]
   18594:	cmp	r5, #0
   18598:	beq	185c4 <flatcc_emitter@@Base+0x1fc>
   1859c:	ldr	r0, [r5, #2948]	; 0xb84
   185a0:	ldr	r1, [r6, #4]
   185a4:	cmp	r0, r1
   185a8:	beq	185c4 <flatcc_emitter@@Base+0x1fc>
   185ac:	ldr	r1, [r5, #2952]	; 0xb88
   185b0:	mov	r2, r0
   185b4:	sub	r1, r1, #2944	; 0xb80
   185b8:	str	r1, [r2, #2952]!	; 0xb88
   185bc:	str	r0, [r6]
   185c0:	b	18604 <flatcc_emitter@@Base+0x23c>
   185c4:	movw	r0, #2956	; 0xb8c
   185c8:	bl	123b8 <malloc@plt>
   185cc:	cmp	r0, #0
   185d0:	beq	186bc <flatcc_emitter@@Base+0x2f4>
   185d4:	ldr	r1, [r6, #28]
   185d8:	cmp	r5, #0
   185dc:	add	r1, r1, #2944	; 0xb80
   185e0:	str	r1, [r6, #28]
   185e4:	beq	18630 <flatcc_emitter@@Base+0x268>
   185e8:	ldr	r1, [r6, #4]
   185ec:	add	r2, r0, sl
   185f0:	str	r5, [r0, #2944]	; 0xb80
   185f4:	str	r1, [r0, #2948]	; 0xb84
   185f8:	str	r0, [r5, #2948]	; 0xb84
   185fc:	str	r0, [r1, #2944]	; 0xb80
   18600:	str	r0, [r6]
   18604:	add	r3, r0, #2944	; 0xb80
   18608:	mov	r1, #2944	; 0xb80
   1860c:	str	r3, [r6, #8]
   18610:	str	r1, [r6, #12]
   18614:	ldr	r0, [r0, #2944]	; 0xb80
   18618:	ldr	r0, [r0, #2952]	; 0xb88
   1861c:	sub	r0, r0, #2944	; 0xb80
   18620:	str	r0, [r2]
   18624:	cmp	r8, r1
   18628:	bhi	18584 <flatcc_emitter@@Base+0x1bc>
   1862c:	b	18668 <flatcc_emitter@@Base+0x2a0>
   18630:	add	r2, r0, #1472	; 0x5c0
   18634:	mov	r1, #1472	; 0x5c0
   18638:	str	r0, [r6]
   1863c:	stmib	r6, {r0, r2}
   18640:	str	r1, [r6, #12]
   18644:	str	r2, [r6, #16]
   18648:	movw	r2, #64064	; 0xfa40
   1864c:	str	r1, [r6, #20]
   18650:	str	r0, [r0, #2944]	; 0xb80
   18654:	str	r0, [r0, #2948]	; 0xb84
   18658:	movt	r2, #65535	; 0xffff
   1865c:	str	r2, [r0, #2952]	; 0xb88
   18660:	cmp	r8, r1
   18664:	bhi	18584 <flatcc_emitter@@Base+0x1bc>
   18668:	mov	r5, r8
   1866c:	sub	r0, r1, r5
   18670:	sub	r7, r7, r5
   18674:	mov	r2, r5
   18678:	str	r0, [r6, #12]
   1867c:	mov	r1, r7
   18680:	ldr	r0, [r6, #8]
   18684:	sub	r0, r0, r5
   18688:	str	r0, [r6, #8]
   1868c:	bl	12388 <memcpy@plt>
   18690:	subs	r8, r8, r5
   18694:	bne	18578 <flatcc_emitter@@Base+0x1b0>
   18698:	ldr	r0, [sp]
   1869c:	subs	r4, r4, #1
   186a0:	bne	18558 <flatcc_emitter@@Base+0x190>
   186a4:	mov	r8, #0
   186a8:	b	18704 <flatcc_emitter@@Base+0x33c>
   186ac:	ldr	r5, [r6, #16]
   186b0:	add	r2, r5, r1
   186b4:	str	r2, [r6, #16]
   186b8:	b	186d0 <flatcc_emitter@@Base+0x308>
   186bc:	mvn	r8, #0
   186c0:	b	18704 <flatcc_emitter@@Base+0x33c>
   186c4:	ldr	r2, [r6, #8]
   186c8:	sub	r5, r2, r1
   186cc:	str	r5, [r6, #8]
   186d0:	sub	r0, r0, r1
   186d4:	mov	r8, #0
   186d8:	cmp	r4, #0
   186dc:	str	r0, [r9]
   186e0:	beq	18704 <flatcc_emitter@@Base+0x33c>
   186e4:	ldm	r7, {r1, r2}
   186e8:	mov	r0, r5
   186ec:	bl	12388 <memcpy@plt>
   186f0:	ldr	r0, [r7, #4]
   186f4:	add	r7, r7, #8
   186f8:	subs	r4, r4, #1
   186fc:	add	r5, r5, r0
   18700:	bne	186e4 <flatcc_emitter@@Base+0x31c>
   18704:	mov	r0, r8
   18708:	sub	sp, fp, #28
   1870c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018710 <flatcc_emitter_copy_buffer@@Base>:
   18710:	push	{r4, r5, r6, sl, fp, lr}
   18714:	add	fp, sp, #16
   18718:	mov	r3, r2
   1871c:	ldr	r2, [r0, #24]
   18720:	mov	r5, #0
   18724:	cmp	r2, r3
   18728:	bhi	187b0 <flatcc_emitter_copy_buffer@@Base+0xa0>
   1872c:	mov	r4, r0
   18730:	ldr	r0, [r0]
   18734:	cmp	r0, #0
   18738:	beq	187b0 <flatcc_emitter_copy_buffer@@Base+0xa0>
   1873c:	mov	r6, r1
   18740:	ldr	r1, [r4, #4]
   18744:	cmp	r0, r1
   18748:	beq	187b8 <flatcc_emitter_copy_buffer@@Base+0xa8>
   1874c:	ldr	r0, [r4, #12]
   18750:	ldr	r1, [r4, #8]
   18754:	rsb	r5, r0, #2944	; 0xb80
   18758:	mov	r0, r6
   1875c:	mov	r2, r5
   18760:	bl	12388 <memcpy@plt>
   18764:	ldm	r4, {r0, r1}
   18768:	add	r5, r6, r5
   1876c:	ldr	r6, [r0, #2944]	; 0xb80
   18770:	cmp	r6, r1
   18774:	beq	1879c <flatcc_emitter_copy_buffer@@Base+0x8c>
   18778:	mov	r0, r5
   1877c:	mov	r1, r6
   18780:	mov	r2, #2944	; 0xb80
   18784:	bl	12388 <memcpy@plt>
   18788:	ldr	r6, [r6, #2944]	; 0xb80
   1878c:	ldr	r0, [r4, #4]
   18790:	add	r5, r5, #2944	; 0xb80
   18794:	cmp	r6, r0
   18798:	bne	18778 <flatcc_emitter_copy_buffer@@Base+0x68>
   1879c:	ldr	r0, [r4, #20]
   187a0:	mov	r1, r6
   187a4:	rsb	r2, r0, #2944	; 0xb80
   187a8:	mov	r0, r5
   187ac:	bl	12388 <memcpy@plt>
   187b0:	mov	r0, r5
   187b4:	pop	{r4, r5, r6, sl, fp, pc}
   187b8:	ldr	r1, [r4, #8]
   187bc:	mov	r0, r6
   187c0:	bl	12388 <memcpy@plt>
   187c4:	mov	r0, r6
   187c8:	pop	{r4, r5, r6, sl, fp, pc}

000187cc <__libc_csu_init@@Base>:
   187cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   187d0:	mov	r7, r0
   187d4:	ldr	r6, [pc, #72]	; 18824 <__libc_csu_init@@Base+0x58>
   187d8:	ldr	r5, [pc, #72]	; 18828 <__libc_csu_init@@Base+0x5c>
   187dc:	add	r6, pc, r6
   187e0:	add	r5, pc, r5
   187e4:	sub	r6, r6, r5
   187e8:	mov	r8, r1
   187ec:	mov	r9, r2
   187f0:	bl	12350 <strcmp@plt-0x20>
   187f4:	asrs	r6, r6, #2
   187f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   187fc:	mov	r4, #0
   18800:	add	r4, r4, #1
   18804:	ldr	r3, [r5], #4
   18808:	mov	r2, r9
   1880c:	mov	r1, r8
   18810:	mov	r0, r7
   18814:	blx	r3
   18818:	cmp	r6, r4
   1881c:	bne	18800 <__libc_csu_init@@Base+0x34>
   18820:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18824:	andeq	r2, r1, r8, lsr #14
   18828:	andeq	r2, r1, r0, lsr #14

0001882c <__libc_csu_fini@@Base>:
   1882c:	bx	lr

Disassembly of section .fini:

00018830 <.fini>:
   18830:	push	{r3, lr}
   18834:	pop	{r3, pc}
