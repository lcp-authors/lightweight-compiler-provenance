
../repos/coreutils/src/tr:     file format elf32-littlearm


Disassembly of section .init:

00010e20 <.init>:
   10e20:	push	{r3, lr}
   10e24:	bl	11104 <__assert_fail@plt+0x48>
   10e28:	pop	{r3, pc}

Disassembly of section .plt:

00010e2c <calloc@plt-0x14>:
   10e2c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e30:	ldr	lr, [pc, #4]	; 10e3c <calloc@plt-0x4>
   10e34:	add	lr, pc, lr
   10e38:	ldr	pc, [lr, #8]!
   10e3c:	andeq	r8, r1, r4, asr #3

00010e40 <calloc@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #24, 20	; 0x18000
   10e48:	ldr	pc, [ip, #452]!	; 0x1c4

00010e4c <fputs_unlocked@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #24, 20	; 0x18000
   10e54:	ldr	pc, [ip, #444]!	; 0x1bc

00010e58 <raise@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #24, 20	; 0x18000
   10e60:	ldr	pc, [ip, #436]!	; 0x1b4

00010e64 <strcmp@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #24, 20	; 0x18000
   10e6c:	ldr	pc, [ip, #428]!	; 0x1ac

00010e70 <posix_fadvise64@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #24, 20	; 0x18000
   10e78:	ldr	pc, [ip, #420]!	; 0x1a4

00010e7c <read@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #24, 20	; 0x18000
   10e84:	ldr	pc, [ip, #412]!	; 0x19c

00010e88 <fflush@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #24, 20	; 0x18000
   10e90:	ldr	pc, [ip, #404]!	; 0x194

00010e94 <free@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #24, 20	; 0x18000
   10e9c:	ldr	pc, [ip, #396]!	; 0x18c

00010ea0 <_exit@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #24, 20	; 0x18000
   10ea8:	ldr	pc, [ip, #388]!	; 0x184

00010eac <memcpy@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #24, 20	; 0x18000
   10eb4:	ldr	pc, [ip, #380]!	; 0x17c

00010eb8 <tolower@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #24, 20	; 0x18000
   10ec0:	ldr	pc, [ip, #372]!	; 0x174

00010ec4 <mbsinit@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #24, 20	; 0x18000
   10ecc:	ldr	pc, [ip, #364]!	; 0x16c

00010ed0 <fwrite_unlocked@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #24, 20	; 0x18000
   10ed8:	ldr	pc, [ip, #356]!	; 0x164

00010edc <memcmp@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #24, 20	; 0x18000
   10ee4:	ldr	pc, [ip, #348]!	; 0x15c

00010ee8 <stpcpy@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #24, 20	; 0x18000
   10ef0:	ldr	pc, [ip, #340]!	; 0x154

00010ef4 <dcgettext@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #24, 20	; 0x18000
   10efc:	ldr	pc, [ip, #332]!	; 0x14c

00010f00 <realloc@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #24, 20	; 0x18000
   10f08:	ldr	pc, [ip, #324]!	; 0x144

00010f0c <textdomain@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #24, 20	; 0x18000
   10f14:	ldr	pc, [ip, #316]!	; 0x13c

00010f18 <iswprint@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #24, 20	; 0x18000
   10f20:	ldr	pc, [ip, #308]!	; 0x134

00010f24 <fwrite@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #24, 20	; 0x18000
   10f2c:	ldr	pc, [ip, #300]!	; 0x12c

00010f30 <lseek64@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #24, 20	; 0x18000
   10f38:	ldr	pc, [ip, #292]!	; 0x124

00010f3c <__ctype_get_mb_cur_max@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #24, 20	; 0x18000
   10f44:	ldr	pc, [ip, #284]!	; 0x11c

00010f48 <__fpending@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #24, 20	; 0x18000
   10f50:	ldr	pc, [ip, #276]!	; 0x114

00010f54 <ferror_unlocked@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #24, 20	; 0x18000
   10f5c:	ldr	pc, [ip, #268]!	; 0x10c

00010f60 <mbrtowc@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #24, 20	; 0x18000
   10f68:	ldr	pc, [ip, #260]!	; 0x104

00010f6c <error@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #24, 20	; 0x18000
   10f74:	ldr	pc, [ip, #252]!	; 0xfc

00010f78 <malloc@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #24, 20	; 0x18000
   10f80:	ldr	pc, [ip, #244]!	; 0xf4

00010f84 <__libc_start_main@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #24, 20	; 0x18000
   10f8c:	ldr	pc, [ip, #236]!	; 0xec

00010f90 <__freading@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #24, 20	; 0x18000
   10f98:	ldr	pc, [ip, #228]!	; 0xe4

00010f9c <__gmon_start__@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #24, 20	; 0x18000
   10fa4:	ldr	pc, [ip, #220]!	; 0xdc

00010fa8 <getopt_long@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #24, 20	; 0x18000
   10fb0:	ldr	pc, [ip, #212]!	; 0xd4

00010fb4 <__ctype_b_loc@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #24, 20	; 0x18000
   10fbc:	ldr	pc, [ip, #204]!	; 0xcc

00010fc0 <exit@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #24, 20	; 0x18000
   10fc8:	ldr	pc, [ip, #196]!	; 0xc4

00010fcc <strlen@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #24, 20	; 0x18000
   10fd4:	ldr	pc, [ip, #188]!	; 0xbc

00010fd8 <strchr@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #24, 20	; 0x18000
   10fe0:	ldr	pc, [ip, #180]!	; 0xb4

00010fe4 <__errno_location@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #24, 20	; 0x18000
   10fec:	ldr	pc, [ip, #172]!	; 0xac

00010ff0 <__sprintf_chk@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #24, 20	; 0x18000
   10ff8:	ldr	pc, [ip, #164]!	; 0xa4

00010ffc <__cxa_atexit@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #24, 20	; 0x18000
   11004:	ldr	pc, [ip, #156]!	; 0x9c

00011008 <memset@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #24, 20	; 0x18000
   11010:	ldr	pc, [ip, #148]!	; 0x94

00011014 <__printf_chk@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #24, 20	; 0x18000
   1101c:	ldr	pc, [ip, #140]!	; 0x8c

00011020 <fileno@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #24, 20	; 0x18000
   11028:	ldr	pc, [ip, #132]!	; 0x84

0001102c <strtoumax@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #24, 20	; 0x18000
   11034:	ldr	pc, [ip, #124]!	; 0x7c

00011038 <__fprintf_chk@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #24, 20	; 0x18000
   11040:	ldr	pc, [ip, #116]!	; 0x74

00011044 <fclose@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #24, 20	; 0x18000
   1104c:	ldr	pc, [ip, #108]!	; 0x6c

00011050 <fseeko64@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #24, 20	; 0x18000
   11058:	ldr	pc, [ip, #100]!	; 0x64

0001105c <setlocale@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #24, 20	; 0x18000
   11064:	ldr	pc, [ip, #92]!	; 0x5c

00011068 <toupper@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #24, 20	; 0x18000
   11070:	ldr	pc, [ip, #84]!	; 0x54

00011074 <strrchr@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #24, 20	; 0x18000
   1107c:	ldr	pc, [ip, #76]!	; 0x4c

00011080 <nl_langinfo@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #24, 20	; 0x18000
   11088:	ldr	pc, [ip, #68]!	; 0x44

0001108c <bindtextdomain@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #24, 20	; 0x18000
   11094:	ldr	pc, [ip, #60]!	; 0x3c

00011098 <strncmp@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #24, 20	; 0x18000
   110a0:	ldr	pc, [ip, #52]!	; 0x34

000110a4 <abort@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #24, 20	; 0x18000
   110ac:	ldr	pc, [ip, #44]!	; 0x2c

000110b0 <close@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #24, 20	; 0x18000
   110b8:	ldr	pc, [ip, #36]!	; 0x24

000110bc <__assert_fail@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #24, 20	; 0x18000
   110c4:	ldr	pc, [ip, #28]!

Disassembly of section .text:

000110c8 <.text>:
   110c8:	mov	fp, #0
   110cc:	mov	lr, #0
   110d0:	pop	{r1}		; (ldr r1, [sp], #4)
   110d4:	mov	r2, sp
   110d8:	push	{r2}		; (str r2, [sp, #-4]!)
   110dc:	push	{r0}		; (str r0, [sp, #-4]!)
   110e0:	ldr	ip, [pc, #16]	; 110f8 <__assert_fail@plt+0x3c>
   110e4:	push	{ip}		; (str ip, [sp, #-4]!)
   110e8:	ldr	r0, [pc, #12]	; 110fc <__assert_fail@plt+0x40>
   110ec:	ldr	r3, [pc, #12]	; 11100 <__assert_fail@plt+0x44>
   110f0:	bl	10f84 <__libc_start_main@plt>
   110f4:	bl	110a4 <abort@plt>
   110f8:	andeq	r7, r1, ip, lsl #3
   110fc:	muleq	r1, r8, r4
   11100:	andeq	r7, r1, ip, lsr #2
   11104:	ldr	r3, [pc, #20]	; 11120 <__assert_fail@plt+0x64>
   11108:	ldr	r2, [pc, #20]	; 11124 <__assert_fail@plt+0x68>
   1110c:	add	r3, pc, r3
   11110:	ldr	r2, [r3, r2]
   11114:	cmp	r2, #0
   11118:	bxeq	lr
   1111c:	b	10f9c <__gmon_start__@plt>
   11120:	andeq	r7, r1, ip, ror #29
   11124:	andeq	r0, r0, r4, ror #1
   11128:	ldr	r0, [pc, #24]	; 11148 <__assert_fail@plt+0x8c>
   1112c:	ldr	r3, [pc, #24]	; 1114c <__assert_fail@plt+0x90>
   11130:	cmp	r3, r0
   11134:	bxeq	lr
   11138:	ldr	r3, [pc, #16]	; 11150 <__assert_fail@plt+0x94>
   1113c:	cmp	r3, #0
   11140:	bxeq	lr
   11144:	bx	r3
   11148:	andeq	r9, r2, r8, lsr r1
   1114c:	andeq	r9, r2, r8, lsr r1
   11150:	andeq	r0, r0, r0
   11154:	ldr	r0, [pc, #36]	; 11180 <__assert_fail@plt+0xc4>
   11158:	ldr	r1, [pc, #36]	; 11184 <__assert_fail@plt+0xc8>
   1115c:	sub	r1, r1, r0
   11160:	asr	r1, r1, #2
   11164:	add	r1, r1, r1, lsr #31
   11168:	asrs	r1, r1, #1
   1116c:	bxeq	lr
   11170:	ldr	r3, [pc, #16]	; 11188 <__assert_fail@plt+0xcc>
   11174:	cmp	r3, #0
   11178:	bxeq	lr
   1117c:	bx	r3
   11180:	andeq	r9, r2, r8, lsr r1
   11184:	andeq	r9, r2, r8, lsr r1
   11188:	andeq	r0, r0, r0
   1118c:	push	{r4, lr}
   11190:	ldr	r4, [pc, #24]	; 111b0 <__assert_fail@plt+0xf4>
   11194:	ldrb	r3, [r4]
   11198:	cmp	r3, #0
   1119c:	popne	{r4, pc}
   111a0:	bl	11128 <__assert_fail@plt+0x6c>
   111a4:	mov	r3, #1
   111a8:	strb	r3, [r4]
   111ac:	pop	{r4, pc}
   111b0:	andeq	r9, r2, r8, asr r1
   111b4:	b	11154 <__assert_fail@plt+0x98>
   111b8:	push	{fp, lr}
   111bc:	mov	fp, sp
   111c0:	mov	r4, r0
   111c4:	cmp	r0, #0
   111c8:	bne	112d0 <__assert_fail@plt+0x214>
   111cc:	movw	r1, #29147	; 0x71db
   111d0:	movt	r1, #1
   111d4:	mov	r0, #0
   111d8:	mov	r2, #5
   111dc:	bl	10ef4 <dcgettext@plt>
   111e0:	mov	r1, r0
   111e4:	movw	r0, #46184	; 0xb468
   111e8:	movt	r0, #2
   111ec:	ldr	r2, [r0]
   111f0:	mov	r0, #1
   111f4:	bl	11014 <__printf_chk@plt>
   111f8:	movw	r1, #29182	; 0x71fe
   111fc:	movt	r1, #1
   11200:	mov	r0, #0
   11204:	mov	r2, #5
   11208:	bl	10ef4 <dcgettext@plt>
   1120c:	movw	r5, #37204	; 0x9154
   11210:	movt	r5, #2
   11214:	ldr	r1, [r5]
   11218:	bl	10e4c <fputs_unlocked@plt>
   1121c:	movw	r1, #29678	; 0x73ee
   11220:	movt	r1, #1
   11224:	mov	r0, #0
   11228:	mov	r2, #5
   1122c:	bl	10ef4 <dcgettext@plt>
   11230:	ldr	r1, [r5]
   11234:	bl	10e4c <fputs_unlocked@plt>
   11238:	movw	r1, #29723	; 0x741b
   1123c:	movt	r1, #1
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	bl	10ef4 <dcgettext@plt>
   1124c:	ldr	r1, [r5]
   11250:	bl	10e4c <fputs_unlocked@plt>
   11254:	movw	r1, #29777	; 0x7451
   11258:	movt	r1, #1
   1125c:	mov	r0, #0
   11260:	mov	r2, #5
   11264:	bl	10ef4 <dcgettext@plt>
   11268:	ldr	r1, [r5]
   1126c:	bl	10e4c <fputs_unlocked@plt>
   11270:	movw	r1, #30150	; 0x75c6
   11274:	movt	r1, #1
   11278:	mov	r0, #0
   1127c:	mov	r2, #5
   11280:	bl	10ef4 <dcgettext@plt>
   11284:	ldr	r1, [r5]
   11288:	bl	10e4c <fputs_unlocked@plt>
   1128c:	movw	r1, #30575	; 0x776f
   11290:	movt	r1, #1
   11294:	mov	r0, #0
   11298:	mov	r2, #5
   1129c:	bl	10ef4 <dcgettext@plt>
   112a0:	ldr	r1, [r5]
   112a4:	bl	10e4c <fputs_unlocked@plt>
   112a8:	movw	r1, #30986	; 0x790a
   112ac:	movt	r1, #1
   112b0:	mov	r0, #0
   112b4:	mov	r2, #5
   112b8:	bl	10ef4 <dcgettext@plt>
   112bc:	ldr	r1, [r5]
   112c0:	bl	10e4c <fputs_unlocked@plt>
   112c4:	bl	11314 <__assert_fail@plt+0x258>
   112c8:	mov	r0, r4
   112cc:	bl	10fc0 <exit@plt>
   112d0:	movw	r0, #37192	; 0x9148
   112d4:	movt	r0, #2
   112d8:	ldr	r5, [r0]
   112dc:	movw	r1, #29108	; 0x71b4
   112e0:	movt	r1, #1
   112e4:	mov	r0, #0
   112e8:	mov	r2, #5
   112ec:	bl	10ef4 <dcgettext@plt>
   112f0:	mov	r2, r0
   112f4:	movw	r0, #46184	; 0xb468
   112f8:	movt	r0, #2
   112fc:	ldr	r3, [r0]
   11300:	mov	r0, r5
   11304:	mov	r1, #1
   11308:	bl	11038 <__fprintf_chk@plt>
   1130c:	mov	r0, r4
   11310:	bl	10fc0 <exit@plt>
   11314:	push	{r4, r5, fp, lr}
   11318:	add	fp, sp, #8
   1131c:	sub	sp, sp, #56	; 0x38
   11320:	movw	r0, #34456	; 0x8698
   11324:	movt	r0, #1
   11328:	add	r1, r0, #32
   1132c:	mov	r5, sp
   11330:	mov	r2, #48	; 0x30
   11334:	vld1.64	{d16-d17}, [r1]
   11338:	add	r1, r5, #32
   1133c:	add	r3, r0, #16
   11340:	vld1.64	{d18-d19}, [r0], r2
   11344:	vld1.64	{d20-d21}, [r3]
   11348:	vldr	d22, [r0]
   1134c:	vst1.64	{d16-d17}, [r1]
   11350:	add	r0, r5, #16
   11354:	vst1.64	{d20-d21}, [r0]
   11358:	mov	r0, r5
   1135c:	vst1.64	{d18-d19}, [r0], r2
   11360:	vstr	d22, [r0]
   11364:	ldr	r1, [sp]
   11368:	cmp	r1, #0
   1136c:	beq	11394 <__assert_fail@plt+0x2d8>
   11370:	mov	r5, sp
   11374:	movw	r4, #31458	; 0x7ae2
   11378:	movt	r4, #1
   1137c:	mov	r0, r4
   11380:	bl	10e64 <strcmp@plt>
   11384:	cmp	r0, #0
   11388:	ldrne	r1, [r5, #8]!
   1138c:	cmpne	r1, #0
   11390:	bne	1137c <__assert_fail@plt+0x2c0>
   11394:	ldr	r4, [r5, #4]
   11398:	movw	r1, #31968	; 0x7ce0
   1139c:	movt	r1, #1
   113a0:	mov	r0, #0
   113a4:	mov	r2, #5
   113a8:	bl	10ef4 <dcgettext@plt>
   113ac:	mov	r1, r0
   113b0:	movw	r2, #31495	; 0x7b07
   113b4:	movt	r2, #1
   113b8:	movw	r3, #31991	; 0x7cf7
   113bc:	movt	r3, #1
   113c0:	mov	r0, #1
   113c4:	bl	11014 <__printf_chk@plt>
   113c8:	movw	r5, #31458	; 0x7ae2
   113cc:	movt	r5, #1
   113d0:	cmp	r4, #0
   113d4:	moveq	r4, r5
   113d8:	mov	r0, #5
   113dc:	mov	r1, #0
   113e0:	bl	1105c <setlocale@plt>
   113e4:	cmp	r0, #0
   113e8:	beq	11428 <__assert_fail@plt+0x36c>
   113ec:	movw	r1, #32031	; 0x7d1f
   113f0:	movt	r1, #1
   113f4:	mov	r2, #3
   113f8:	bl	11098 <strncmp@plt>
   113fc:	cmp	r0, #0
   11400:	beq	11428 <__assert_fail@plt+0x36c>
   11404:	movw	r1, #32035	; 0x7d23
   11408:	movt	r1, #1
   1140c:	mov	r0, #0
   11410:	mov	r2, #5
   11414:	bl	10ef4 <dcgettext@plt>
   11418:	movw	r1, #37204	; 0x9154
   1141c:	movt	r1, #2
   11420:	ldr	r1, [r1]
   11424:	bl	10e4c <fputs_unlocked@plt>
   11428:	movw	r1, #32106	; 0x7d6a
   1142c:	movt	r1, #1
   11430:	mov	r0, #0
   11434:	mov	r2, #5
   11438:	bl	10ef4 <dcgettext@plt>
   1143c:	mov	r1, r0
   11440:	movw	r2, #31991	; 0x7cf7
   11444:	movt	r2, #1
   11448:	mov	r0, #1
   1144c:	mov	r3, r5
   11450:	bl	11014 <__printf_chk@plt>
   11454:	movw	r1, #32133	; 0x7d85
   11458:	movt	r1, #1
   1145c:	mov	r0, #0
   11460:	mov	r2, #5
   11464:	bl	10ef4 <dcgettext@plt>
   11468:	mov	r1, r0
   1146c:	movw	r0, #31901	; 0x7c9d
   11470:	movt	r0, #1
   11474:	movw	r3, #32183	; 0x7db7
   11478:	movt	r3, #1
   1147c:	cmp	r4, r5
   11480:	moveq	r3, r0
   11484:	mov	r0, #1
   11488:	mov	r2, r4
   1148c:	bl	11014 <__printf_chk@plt>
   11490:	sub	sp, fp, #8
   11494:	pop	{r4, r5, fp, pc}
   11498:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1149c:	add	fp, sp, #28
   114a0:	sub	sp, sp, #100	; 0x64
   114a4:	mov	r5, r1
   114a8:	mov	r4, r0
   114ac:	ldr	r0, [r1]
   114b0:	bl	13c74 <__assert_fail@plt+0x2bb8>
   114b4:	movw	r1, #32183	; 0x7db7
   114b8:	movt	r1, #1
   114bc:	mov	r0, #6
   114c0:	bl	1105c <setlocale@plt>
   114c4:	movw	r6, #31499	; 0x7b0b
   114c8:	movt	r6, #1
   114cc:	movw	r1, #31461	; 0x7ae5
   114d0:	movt	r1, #1
   114d4:	mov	r0, r6
   114d8:	bl	1108c <bindtextdomain@plt>
   114dc:	mov	r0, r6
   114e0:	bl	10f0c <textdomain@plt>
   114e4:	movw	r0, #15140	; 0x3b24
   114e8:	movt	r0, #1
   114ec:	bl	17190 <__assert_fail@plt+0x60d4>
   114f0:	mov	r9, #0
   114f4:	movw	r6, #31485	; 0x7afd
   114f8:	movt	r6, #1
   114fc:	movw	r7, #34344	; 0x8628
   11500:	movt	r7, #1
   11504:	movw	r8, #31493	; 0x7b05
   11508:	movt	r8, #1
   1150c:	mov	sl, #1
   11510:	b	11520 <__assert_fail@plt+0x464>
   11514:	movw	r0, #37209	; 0x9159
   11518:	movt	r0, #2
   1151c:	strb	sl, [r0]
   11520:	str	r9, [sp]
   11524:	mov	r0, r4
   11528:	mov	r1, r5
   1152c:	mov	r2, r6
   11530:	mov	r3, r7
   11534:	bl	10fa8 <getopt_long@plt>
   11538:	cmp	r0, #64	; 0x40
   1153c:	ble	11670 <__assert_fail@plt+0x5b4>
   11540:	sub	r0, r0, #65	; 0x41
   11544:	cmp	r0, #51	; 0x33
   11548:	bhi	11d00 <__assert_fail@plt+0xc44>
   1154c:	add	r1, pc, #0
   11550:	ldr	pc, [r1, r0, lsl #2]
   11554:	andeq	r1, r1, r4, lsr #12
   11558:	andeq	r1, r1, r0, lsl #26
   1155c:	andeq	r1, r1, r4, lsl r5
   11560:	andeq	r1, r1, r0, lsl #26
   11564:	andeq	r1, r1, r0, lsl #26
   11568:	andeq	r1, r1, r0, lsl #26
   1156c:	andeq	r1, r1, r0, lsl #26
   11570:	andeq	r1, r1, r0, lsl #26
   11574:	andeq	r1, r1, r0, lsl #26
   11578:	andeq	r1, r1, r0, lsl #26
   1157c:	andeq	r1, r1, r0, lsl #26
   11580:	andeq	r1, r1, r0, lsl #26
   11584:	andeq	r1, r1, r0, lsl #26
   11588:	andeq	r1, r1, r0, lsl #26
   1158c:	andeq	r1, r1, r0, lsl #26
   11590:	andeq	r1, r1, r0, lsl #26
   11594:	andeq	r1, r1, r0, lsl #26
   11598:	andeq	r1, r1, r0, lsl #26
   1159c:	andeq	r1, r1, r0, lsl #26
   115a0:	andeq	r1, r1, r0, lsl #26
   115a4:	andeq	r1, r1, r0, lsl #26
   115a8:	andeq	r1, r1, r0, lsl #26
   115ac:	andeq	r1, r1, r0, lsl #26
   115b0:	andeq	r1, r1, r0, lsl #26
   115b4:	andeq	r1, r1, r0, lsl #26
   115b8:	andeq	r1, r1, r0, lsl #26
   115bc:	andeq	r1, r1, r0, lsl #26
   115c0:	andeq	r1, r1, r0, lsl #26
   115c4:	andeq	r1, r1, r0, lsl #26
   115c8:	andeq	r1, r1, r0, lsl #26
   115cc:	andeq	r1, r1, r0, lsl #26
   115d0:	andeq	r1, r1, r0, lsl #26
   115d4:	andeq	r1, r1, r0, lsl #26
   115d8:	andeq	r1, r1, r0, lsl #26
   115dc:	andeq	r1, r1, r4, lsl r5
   115e0:	andeq	r1, r1, r0, ror #12
   115e4:	andeq	r1, r1, r0, lsl #26
   115e8:	andeq	r1, r1, r0, lsl #26
   115ec:	andeq	r1, r1, r0, lsl #26
   115f0:	andeq	r1, r1, r0, lsl #26
   115f4:	andeq	r1, r1, r0, lsl #26
   115f8:	andeq	r1, r1, r0, lsl #26
   115fc:	andeq	r1, r1, r0, lsl #26
   11600:	andeq	r1, r1, r0, lsl #26
   11604:	andeq	r1, r1, r0, lsl #26
   11608:	andeq	r1, r1, r0, lsl #26
   1160c:	andeq	r1, r1, r0, lsl #26
   11610:	andeq	r1, r1, r0, lsl #26
   11614:	andeq	r1, r1, r0, lsl #26
   11618:	andeq	r1, r1, r0, lsl #26
   1161c:	andeq	r1, r1, r0, asr r6
   11620:	andeq	r1, r1, r0, asr #12
   11624:	mov	r0, #3
   11628:	mov	r1, r8
   1162c:	bl	1105c <setlocale@plt>
   11630:	mov	r0, #0
   11634:	mov	r1, r8
   11638:	bl	1105c <setlocale@plt>
   1163c:	b	11520 <__assert_fail@plt+0x464>
   11640:	movw	r0, #37212	; 0x915c
   11644:	movt	r0, #2
   11648:	strb	sl, [r0]
   1164c:	b	11520 <__assert_fail@plt+0x464>
   11650:	movw	r0, #37211	; 0x915b
   11654:	movt	r0, #2
   11658:	strb	sl, [r0]
   1165c:	b	11520 <__assert_fail@plt+0x464>
   11660:	movw	r0, #37210	; 0x915a
   11664:	movt	r0, #2
   11668:	strb	sl, [r0]
   1166c:	b	11520 <__assert_fail@plt+0x464>
   11670:	cmn	r0, #1
   11674:	bne	11b84 <__assert_fail@plt+0xac8>
   11678:	movw	r8, #37184	; 0x9140
   1167c:	movt	r8, #2
   11680:	ldr	r0, [r8]
   11684:	sub	r7, r4, r0
   11688:	mov	r0, #0
   1168c:	cmp	r7, #2
   11690:	movweq	r0, #37210	; 0x915a
   11694:	movteq	r0, #2
   11698:	ldrbeq	r0, [r0]
   1169c:	eoreq	r0, r0, #1
   116a0:	and	r0, r0, #1
   116a4:	movw	r9, #37213	; 0x915d
   116a8:	movt	r9, #2
   116ac:	strb	r0, [r9]
   116b0:	movw	r0, #37211	; 0x915b
   116b4:	movt	r0, #2
   116b8:	ldrb	r0, [r0]
   116bc:	movw	r1, #37210	; 0x915a
   116c0:	movt	r1, #2
   116c4:	ldrb	r1, [r1]
   116c8:	mov	r6, #2
   116cc:	teq	r1, r0
   116d0:	mov	r2, #2
   116d4:	movwne	r2, #1
   116d8:	cmp	r1, #0
   116dc:	movwne	r6, #1
   116e0:	cmp	r0, #0
   116e4:	movwne	r6, #2
   116e8:	cmp	r7, r2
   116ec:	blt	11be4 <__assert_fail@plt+0xb28>
   116f0:	cmp	r6, r7
   116f4:	blt	11c18 <__assert_fail@plt+0xb5c>
   116f8:	add	r4, sp, #56	; 0x38
   116fc:	mov	r0, r4
   11700:	bl	11d3c <__assert_fail@plt+0xc80>
   11704:	ldr	r0, [r8]
   11708:	ldr	r0, [r5, r0, lsl #2]
   1170c:	mov	r1, r4
   11710:	bl	11d64 <__assert_fail@plt+0xca8>
   11714:	mov	r6, #1
   11718:	cmp	r0, #0
   1171c:	beq	11b78 <__assert_fail@plt+0xabc>
   11720:	mov	sl, #0
   11724:	cmp	r7, #2
   11728:	bne	11754 <__assert_fail@plt+0x698>
   1172c:	add	sl, sp, #16
   11730:	mov	r0, sl
   11734:	bl	11d3c <__assert_fail@plt+0xc80>
   11738:	ldr	r0, [r8]
   1173c:	add	r0, r5, r0, lsl #2
   11740:	ldr	r0, [r0, #4]
   11744:	mov	r1, sl
   11748:	bl	11d64 <__assert_fail@plt+0xca8>
   1174c:	cmp	r0, #0
   11750:	beq	11b78 <__assert_fail@plt+0xabc>
   11754:	add	r0, sp, #56	; 0x38
   11758:	mov	r1, sl
   1175c:	bl	11da4 <__assert_fail@plt+0xce8>
   11760:	mov	r0, #0
   11764:	mov	r1, #0
   11768:	bl	16210 <__assert_fail@plt+0x5154>
   1176c:	mov	r0, #1
   11770:	mov	r1, #0
   11774:	bl	16210 <__assert_fail@plt+0x5154>
   11778:	movw	r0, #37200	; 0x9150
   1177c:	movt	r0, #2
   11780:	ldr	r0, [r0]
   11784:	mov	r1, #2
   11788:	bl	13c10 <__assert_fail@plt+0x2b54>
   1178c:	movw	r0, #37211	; 0x915b
   11790:	movt	r0, #2
   11794:	ldrb	r0, [r0]
   11798:	cmp	r7, #1
   1179c:	bne	117d4 <__assert_fail@plt+0x718>
   117a0:	cmp	r0, #0
   117a4:	beq	117d4 <__assert_fail@plt+0x718>
   117a8:	movw	r0, #37209	; 0x9159
   117ac:	movt	r0, #2
   117b0:	ldrb	r1, [r0]
   117b4:	add	r0, sp, #56	; 0x38
   117b8:	movw	r2, #37214	; 0x915e
   117bc:	movt	r2, #2
   117c0:	bl	11f28 <__assert_fail@plt+0xe6c>
   117c4:	movw	r0, #8524	; 0x214c
   117c8:	movt	r0, #1
   117cc:	bl	11fa0 <__assert_fail@plt+0xee4>
   117d0:	b	11b64 <__assert_fail@plt+0xaa8>
   117d4:	movw	r1, #37210	; 0x915a
   117d8:	movt	r1, #2
   117dc:	ldrb	r1, [r1]
   117e0:	cmp	r7, #1
   117e4:	bne	1187c <__assert_fail@plt+0x7c0>
   117e8:	cmp	r1, #0
   117ec:	beq	1187c <__assert_fail@plt+0x7c0>
   117f0:	movw	r0, #37209	; 0x9159
   117f4:	movt	r0, #2
   117f8:	ldrb	r1, [r0]
   117fc:	add	r0, sp, #56	; 0x38
   11800:	movw	r2, #45662	; 0xb25e
   11804:	movt	r2, #2
   11808:	bl	11f28 <__assert_fail@plt+0xe6c>
   1180c:	movw	r4, #37470	; 0x925e
   11810:	movt	r4, #2
   11814:	movw	r6, #37204	; 0x9154
   11818:	movt	r6, #2
   1181c:	mov	r0, r4
   11820:	mov	r1, #8192	; 0x2000
   11824:	bl	12198 <__assert_fail@plt+0x10dc>
   11828:	cmp	r0, #0
   1182c:	beq	11b64 <__assert_fail@plt+0xaa8>
   11830:	mov	r5, r0
   11834:	ldr	r3, [r6]
   11838:	mov	r0, r4
   1183c:	mov	r1, #1
   11840:	mov	r2, r5
   11844:	bl	10ed0 <fwrite_unlocked@plt>
   11848:	cmp	r0, r5
   1184c:	beq	1181c <__assert_fail@plt+0x760>
   11850:	bl	10fe4 <__errno_location@plt>
   11854:	ldr	r4, [r0]
   11858:	movw	r1, #31762	; 0x7c12
   1185c:	movt	r1, #1
   11860:	mov	r0, #0
   11864:	mov	r2, #5
   11868:	bl	10ef4 <dcgettext@plt>
   1186c:	mov	r2, r0
   11870:	mov	r0, #1
   11874:	mov	r1, r4
   11878:	bl	10f6c <error@plt>
   1187c:	sub	r2, r7, #2
   11880:	clz	r2, r2
   11884:	lsr	r2, r2, #5
   11888:	and	r1, r2, r1
   1188c:	and	r0, r0, r1
   11890:	cmp	r0, #1
   11894:	bne	118d4 <__assert_fail@plt+0x818>
   11898:	movw	r0, #37209	; 0x9159
   1189c:	movt	r0, #2
   118a0:	ldrb	r1, [r0]
   118a4:	add	r0, sp, #56	; 0x38
   118a8:	movw	r2, #45662	; 0xb25e
   118ac:	movt	r2, #2
   118b0:	bl	11f28 <__assert_fail@plt+0xe6c>
   118b4:	movw	r2, #37214	; 0x915e
   118b8:	movt	r2, #2
   118bc:	mov	r0, sl
   118c0:	mov	r1, #0
   118c4:	bl	11f28 <__assert_fail@plt+0xe6c>
   118c8:	movw	r0, #8600	; 0x2198
   118cc:	movt	r0, #1
   118d0:	b	117cc <__assert_fail@plt+0x710>
   118d4:	ldrb	r0, [r9]
   118d8:	cmp	r0, #0
   118dc:	beq	11b64 <__assert_fail@plt+0xaa8>
   118e0:	movw	r0, #37209	; 0x9159
   118e4:	movt	r0, #2
   118e8:	ldrb	r0, [r0]
   118ec:	cmp	r0, #1
   118f0:	bne	1196c <__assert_fail@plt+0x8b0>
   118f4:	add	r0, sp, #56	; 0x38
   118f8:	mov	r4, #0
   118fc:	movw	r5, #45662	; 0xb25e
   11900:	movt	r5, #2
   11904:	mov	r1, #0
   11908:	mov	r2, r5
   1190c:	bl	11f28 <__assert_fail@plt+0xe6c>
   11910:	mvn	r1, #0
   11914:	mvn	r0, #1
   11918:	strd	r0, [sl, #8]
   1191c:	movw	r6, #45918	; 0xb35e
   11920:	movt	r6, #2
   11924:	strb	r4, [r6, r4]
   11928:	add	r4, r4, #1
   1192c:	cmp	r4, #256	; 0x100
   11930:	bne	11924 <__assert_fail@plt+0x868>
   11934:	mov	r4, #0
   11938:	ldrb	r0, [r5, r4]
   1193c:	cmp	r0, #0
   11940:	bne	1195c <__assert_fail@plt+0x8a0>
   11944:	mov	r0, sl
   11948:	mov	r1, #0
   1194c:	bl	1224c <__assert_fail@plt+0x1190>
   11950:	cmn	r0, #1
   11954:	beq	11ad4 <__assert_fail@plt+0xa18>
   11958:	strb	r0, [r6, r4]
   1195c:	add	r4, r4, #1
   11960:	cmp	r4, #256	; 0x100
   11964:	bcc	11938 <__assert_fail@plt+0x87c>
   11968:	b	11ae8 <__assert_fail@plt+0xa2c>
   1196c:	mov	r0, #0
   11970:	movw	r5, #45918	; 0xb35e
   11974:	movt	r5, #2
   11978:	strb	r0, [r5, r0]
   1197c:	add	r0, r0, #1
   11980:	cmp	r0, #256	; 0x100
   11984:	bne	11978 <__assert_fail@plt+0x8bc>
   11988:	mvn	r1, #0
   1198c:	str	r1, [sp, #68]	; 0x44
   11990:	mvn	r0, #1
   11994:	str	r0, [sp, #64]	; 0x40
   11998:	strd	r0, [sl, #8]
   1199c:	add	r4, sp, #56	; 0x38
   119a0:	b	119b4 <__assert_fail@plt+0x8f8>
   119a4:	mov	r0, r4
   119a8:	bl	124d4 <__assert_fail@plt+0x1418>
   119ac:	mov	r0, sl
   119b0:	bl	124d4 <__assert_fail@plt+0x1418>
   119b4:	mov	r0, r4
   119b8:	add	r1, sp, #12
   119bc:	bl	1224c <__assert_fail@plt+0x1190>
   119c0:	mov	r6, r0
   119c4:	mov	r0, sl
   119c8:	add	r1, sp, #8
   119cc:	bl	1224c <__assert_fail@plt+0x1190>
   119d0:	ldr	r8, [sp, #8]
   119d4:	ldr	r1, [sp, #12]
   119d8:	cmp	r1, #0
   119dc:	cmpeq	r8, #1
   119e0:	beq	11a04 <__assert_fail@plt+0x948>
   119e4:	cmp	r1, #1
   119e8:	cmpeq	r8, #0
   119ec:	beq	11a48 <__assert_fail@plt+0x98c>
   119f0:	cmn	r6, #1
   119f4:	cmnne	r0, #1
   119f8:	beq	11a98 <__assert_fail@plt+0x9dc>
   119fc:	strb	r0, [r5, r6]
   11a00:	b	11a88 <__assert_fail@plt+0x9cc>
   11a04:	mov	r9, #0
   11a08:	bl	10fb4 <__ctype_b_loc@plt>
   11a0c:	mov	r6, r0
   11a10:	mov	r7, #0
   11a14:	ldr	r0, [r6]
   11a18:	add	r0, r0, r9
   11a1c:	ldrb	r0, [r0, #1]
   11a20:	tst	r0, #2
   11a24:	beq	11a34 <__assert_fail@plt+0x978>
   11a28:	mov	r0, r7
   11a2c:	bl	11068 <toupper@plt>
   11a30:	strb	r0, [r5, r7]
   11a34:	add	r9, r9, #2
   11a38:	add	r7, r7, #1
   11a3c:	cmp	r7, #256	; 0x100
   11a40:	bne	11a14 <__assert_fail@plt+0x958>
   11a44:	b	11a88 <__assert_fail@plt+0x9cc>
   11a48:	mov	r4, #0
   11a4c:	bl	10fb4 <__ctype_b_loc@plt>
   11a50:	mov	r6, r0
   11a54:	mov	r7, #0
   11a58:	ldr	r0, [r6]
   11a5c:	add	r0, r0, r4
   11a60:	ldrb	r0, [r0, #1]
   11a64:	tst	r0, #1
   11a68:	beq	11a78 <__assert_fail@plt+0x9bc>
   11a6c:	mov	r0, r7
   11a70:	bl	10eb8 <tolower@plt>
   11a74:	strb	r0, [r5, r7]
   11a78:	add	r4, r4, #2
   11a7c:	add	r7, r7, #1
   11a80:	cmp	r7, #256	; 0x100
   11a84:	bne	11a58 <__assert_fail@plt+0x99c>
   11a88:	cmp	r8, #2
   11a8c:	add	r4, sp, #56	; 0x38
   11a90:	beq	119b4 <__assert_fail@plt+0x8f8>
   11a94:	b	119a4 <__assert_fail@plt+0x8e8>
   11a98:	cmn	r6, #1
   11a9c:	beq	11ae8 <__assert_fail@plt+0xa2c>
   11aa0:	movw	r0, #37212	; 0x915c
   11aa4:	movt	r0, #2
   11aa8:	ldrb	r0, [r0]
   11aac:	cmp	r0, #0
   11ab0:	bne	11ae8 <__assert_fail@plt+0xa2c>
   11ab4:	movw	r0, #31832	; 0x7c58
   11ab8:	movt	r0, #1
   11abc:	movw	r1, #31800	; 0x7c38
   11ac0:	movt	r1, #1
   11ac4:	movw	r3, #31809	; 0x7c41
   11ac8:	movt	r3, #1
   11acc:	movw	r2, #1893	; 0x765
   11ad0:	bl	110bc <__assert_fail@plt>
   11ad4:	movw	r0, #37212	; 0x915c
   11ad8:	movt	r0, #2
   11adc:	ldrb	r0, [r0]
   11ae0:	cmp	r0, #0
   11ae4:	beq	11d1c <__assert_fail@plt+0xc60>
   11ae8:	movw	r0, #37211	; 0x915b
   11aec:	movt	r0, #2
   11af0:	ldrb	r0, [r0]
   11af4:	cmp	r0, #0
   11af8:	beq	11b1c <__assert_fail@plt+0xa60>
   11afc:	movw	r2, #37214	; 0x915e
   11b00:	movt	r2, #2
   11b04:	mov	r0, sl
   11b08:	mov	r1, #0
   11b0c:	bl	11f28 <__assert_fail@plt+0xe6c>
   11b10:	movw	r0, #9452	; 0x24ec
   11b14:	movt	r0, #1
   11b18:	b	117cc <__assert_fail@plt+0x710>
   11b1c:	movw	r4, #37470	; 0x925e
   11b20:	movt	r4, #2
   11b24:	movw	r6, #37204	; 0x9154
   11b28:	movt	r6, #2
   11b2c:	mov	r0, r4
   11b30:	mov	r1, #8192	; 0x2000
   11b34:	bl	124ec <__assert_fail@plt+0x1430>
   11b38:	cmp	r0, #0
   11b3c:	beq	11b64 <__assert_fail@plt+0xaa8>
   11b40:	mov	r5, r0
   11b44:	ldr	r3, [r6]
   11b48:	mov	r0, r4
   11b4c:	mov	r1, #1
   11b50:	mov	r2, r5
   11b54:	bl	10ed0 <fwrite_unlocked@plt>
   11b58:	cmp	r0, r5
   11b5c:	beq	11b2c <__assert_fail@plt+0xa70>
   11b60:	b	11850 <__assert_fail@plt+0x794>
   11b64:	mov	r6, #0
   11b68:	mov	r0, #0
   11b6c:	bl	110b0 <close@plt>
   11b70:	cmp	r0, #0
   11b74:	bne	11d08 <__assert_fail@plt+0xc4c>
   11b78:	mov	r0, r6
   11b7c:	sub	sp, fp, #28
   11b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b84:	cmn	r0, #3
   11b88:	bne	11bd4 <__assert_fail@plt+0xb18>
   11b8c:	movw	r0, #37104	; 0x90f0
   11b90:	movt	r0, #2
   11b94:	ldr	r3, [r0]
   11b98:	movw	r0, #37204	; 0x9154
   11b9c:	movt	r0, #2
   11ba0:	ldr	r0, [r0]
   11ba4:	mov	r1, #0
   11ba8:	movw	r2, #31509	; 0x7b15
   11bac:	movt	r2, #1
   11bb0:	str	r2, [sp]
   11bb4:	str	r1, [sp, #4]
   11bb8:	movw	r1, #31458	; 0x7ae2
   11bbc:	movt	r1, #1
   11bc0:	movw	r2, #31495	; 0x7b07
   11bc4:	movt	r2, #1
   11bc8:	bl	15d10 <__assert_fail@plt+0x4c54>
   11bcc:	mov	r0, #0
   11bd0:	bl	10fc0 <exit@plt>
   11bd4:	cmn	r0, #2
   11bd8:	bne	11d00 <__assert_fail@plt+0xc44>
   11bdc:	mov	r0, #0
   11be0:	bl	111b8 <__assert_fail@plt+0xfc>
   11be4:	cmp	r7, #0
   11be8:	bne	11c74 <__assert_fail@plt+0xbb8>
   11bec:	movw	r1, #31522	; 0x7b22
   11bf0:	movt	r1, #1
   11bf4:	mov	r0, #0
   11bf8:	mov	r2, #5
   11bfc:	bl	10ef4 <dcgettext@plt>
   11c00:	mov	r2, r0
   11c04:	mov	r0, #0
   11c08:	mov	r1, #0
   11c0c:	bl	10f6c <error@plt>
   11c10:	mov	r0, #1
   11c14:	bl	111b8 <__assert_fail@plt+0xfc>
   11c18:	movw	r1, #31675	; 0x7bbb
   11c1c:	movt	r1, #1
   11c20:	mov	r0, #0
   11c24:	mov	r2, #5
   11c28:	bl	10ef4 <dcgettext@plt>
   11c2c:	mov	r4, r0
   11c30:	ldr	r0, [r8]
   11c34:	add	r0, r0, r6
   11c38:	ldr	r0, [r5, r0, lsl #2]
   11c3c:	bl	154ac <__assert_fail@plt+0x43f0>
   11c40:	mov	r3, r0
   11c44:	mov	r0, #0
   11c48:	mov	r1, #0
   11c4c:	mov	r2, r4
   11c50:	bl	10f6c <error@plt>
   11c54:	cmp	r7, #2
   11c58:	bne	11d00 <__assert_fail@plt+0xc44>
   11c5c:	movw	r0, #37192	; 0x9148
   11c60:	movt	r0, #2
   11c64:	ldr	r4, [r0]
   11c68:	movw	r1, #31692	; 0x7bcc
   11c6c:	movt	r1, #1
   11c70:	b	11cdc <__assert_fail@plt+0xc20>
   11c74:	movw	r1, #31538	; 0x7b32
   11c78:	movt	r1, #1
   11c7c:	mov	r0, #0
   11c80:	mov	r2, #5
   11c84:	bl	10ef4 <dcgettext@plt>
   11c88:	mov	r6, r0
   11c8c:	add	r0, r5, r4, lsl #2
   11c90:	ldr	r0, [r0, #-4]
   11c94:	bl	154ac <__assert_fail@plt+0x43f0>
   11c98:	mov	r3, r0
   11c9c:	mov	r0, #0
   11ca0:	mov	r1, #0
   11ca4:	mov	r2, r6
   11ca8:	bl	10f6c <error@plt>
   11cac:	movw	r0, #37211	; 0x915b
   11cb0:	movt	r0, #2
   11cb4:	ldrb	r0, [r0]
   11cb8:	movw	r2, #31563	; 0x7b4b
   11cbc:	movt	r2, #1
   11cc0:	movw	r1, #31631	; 0x7b8f
   11cc4:	movt	r1, #1
   11cc8:	cmp	r0, #0
   11ccc:	movne	r1, r2
   11cd0:	movw	r0, #37192	; 0x9148
   11cd4:	movt	r0, #2
   11cd8:	ldr	r4, [r0]
   11cdc:	mov	r0, #0
   11ce0:	mov	r2, #5
   11ce4:	bl	10ef4 <dcgettext@plt>
   11ce8:	mov	r3, r0
   11cec:	movw	r2, #34840	; 0x8818
   11cf0:	movt	r2, #1
   11cf4:	mov	r0, r4
   11cf8:	mov	r1, #1
   11cfc:	bl	11038 <__fprintf_chk@plt>
   11d00:	mov	r0, #1
   11d04:	bl	111b8 <__assert_fail@plt+0xfc>
   11d08:	bl	10fe4 <__errno_location@plt>
   11d0c:	ldr	r4, [r0]
   11d10:	movw	r1, #31858	; 0x7c72
   11d14:	movt	r1, #1
   11d18:	b	11860 <__assert_fail@plt+0x7a4>
   11d1c:	movw	r0, #31774	; 0x7c1e
   11d20:	movt	r0, #1
   11d24:	movw	r1, #31800	; 0x7c38
   11d28:	movt	r1, #1
   11d2c:	movw	r3, #31809	; 0x7c41
   11d30:	movt	r3, #1
   11d34:	mov	r2, #1840	; 0x730
   11d38:	bl	110bc <__assert_fail@plt>
   11d3c:	push	{r4, sl, fp, lr}
   11d40:	add	fp, sp, #8
   11d44:	mov	r4, r0
   11d48:	mov	r0, #24
   11d4c:	bl	15e18 <__assert_fail@plt+0x4d5c>
   11d50:	str	r0, [r4]
   11d54:	str	r0, [r4, #4]
   11d58:	mov	r1, #0
   11d5c:	str	r1, [r0, #4]
   11d60:	pop	{r4, sl, fp, pc}
   11d64:	push	{r4, r5, fp, lr}
   11d68:	add	fp, sp, #8
   11d6c:	sub	sp, sp, #16
   11d70:	mov	r4, r1
   11d74:	add	r5, sp, #4
   11d78:	mov	r1, r5
   11d7c:	bl	12534 <__assert_fail@plt+0x1478>
   11d80:	mov	r0, r5
   11d84:	mov	r1, r4
   11d88:	bl	128bc <__assert_fail@plt+0x1800>
   11d8c:	mov	r4, r0
   11d90:	mov	r0, r5
   11d94:	bl	12ba4 <__assert_fail@plt+0x1ae8>
   11d98:	mov	r0, r4
   11d9c:	sub	sp, fp, #8
   11da0:	pop	{r4, r5, fp, pc}
   11da4:	push	{r4, r5, r6, r7, fp, lr}
   11da8:	add	fp, sp, #16
   11dac:	mov	r4, r1
   11db0:	mov	r5, r0
   11db4:	bl	13340 <__assert_fail@plt+0x2284>
   11db8:	ldr	r0, [r5, #24]
   11dbc:	cmp	r0, #0
   11dc0:	bne	11ee0 <__assert_fail@plt+0xe24>
   11dc4:	cmp	r4, #0
   11dc8:	beq	11eb0 <__assert_fail@plt+0xdf4>
   11dcc:	mov	r6, r5
   11dd0:	ldr	r2, [r6, #16]!
   11dd4:	ldr	r3, [r6, #4]
   11dd8:	mov	r0, r4
   11ddc:	bl	13378 <__assert_fail@plt+0x22bc>
   11de0:	ldr	r0, [r4, #24]
   11de4:	cmp	r0, #2
   11de8:	bcs	11eec <__assert_fail@plt+0xe30>
   11dec:	movw	r1, #37213	; 0x915d
   11df0:	movt	r1, #2
   11df4:	ldrb	r1, [r1]
   11df8:	cmp	r1, #0
   11dfc:	beq	11eb4 <__assert_fail@plt+0xdf8>
   11e00:	ldrb	r0, [r4, #32]
   11e04:	cmp	r0, #0
   11e08:	bne	11ef8 <__assert_fail@plt+0xe3c>
   11e0c:	ldrb	r0, [r4, #34]	; 0x22
   11e10:	cmp	r0, #0
   11e14:	bne	11f04 <__assert_fail@plt+0xe48>
   11e18:	mov	r0, r5
   11e1c:	mov	r1, r4
   11e20:	bl	133d0 <__assert_fail@plt+0x2314>
   11e24:	mov	r7, r4
   11e28:	ldr	r0, [r7, #16]!
   11e2c:	ldr	r1, [r7, #4]
   11e30:	ldrd	r2, [r6]
   11e34:	subs	r2, r0, r2
   11e38:	sbcs	r2, r1, r3
   11e3c:	bcs	11e68 <__assert_fail@plt+0xdac>
   11e40:	movw	r2, #37212	; 0x915c
   11e44:	movt	r2, #2
   11e48:	ldrb	r2, [r2]
   11e4c:	cmp	r2, #0
   11e50:	bne	11e68 <__assert_fail@plt+0xdac>
   11e54:	orrs	r0, r0, r1
   11e58:	beq	11f1c <__assert_fail@plt+0xe60>
   11e5c:	mov	r0, r5
   11e60:	mov	r1, r4
   11e64:	bl	13650 <__assert_fail@plt+0x2594>
   11e68:	movw	r0, #37209	; 0x9159
   11e6c:	movt	r0, #2
   11e70:	ldrb	r0, [r0]
   11e74:	cmp	r0, #1
   11e78:	bne	11eb0 <__assert_fail@plt+0xdf4>
   11e7c:	ldrb	r0, [r5, #33]	; 0x21
   11e80:	cmp	r0, #0
   11e84:	beq	11eb0 <__assert_fail@plt+0xdf4>
   11e88:	ldrd	r0, [r6]
   11e8c:	ldrd	r2, [r7]
   11e90:	eor	r1, r3, r1
   11e94:	eor	r0, r2, r0
   11e98:	orrs	r0, r0, r1
   11e9c:	bne	11f10 <__assert_fail@plt+0xe54>
   11ea0:	mov	r0, r4
   11ea4:	bl	1377c <__assert_fail@plt+0x26c0>
   11ea8:	cmp	r0, #0
   11eac:	beq	11f10 <__assert_fail@plt+0xe54>
   11eb0:	pop	{r4, r5, r6, r7, fp, pc}
   11eb4:	cmp	r0, #0
   11eb8:	popeq	{r4, r5, r6, r7, fp, pc}
   11ebc:	movw	r1, #33659	; 0x837b
   11ec0:	movt	r1, #1
   11ec4:	mov	r0, #0
   11ec8:	mov	r2, #5
   11ecc:	bl	10ef4 <dcgettext@plt>
   11ed0:	mov	r2, r0
   11ed4:	mov	r0, #1
   11ed8:	mov	r1, #0
   11edc:	bl	10f6c <error@plt>
   11ee0:	movw	r1, #33238	; 0x81d6
   11ee4:	movt	r1, #1
   11ee8:	b	11ec4 <__assert_fail@plt+0xe08>
   11eec:	movw	r1, #33290	; 0x820a
   11ef0:	movt	r1, #1
   11ef4:	b	11ec4 <__assert_fail@plt+0xe08>
   11ef8:	movw	r1, #33343	; 0x823f
   11efc:	movt	r1, #1
   11f00:	b	11ec4 <__assert_fail@plt+0xe08>
   11f04:	movw	r1, #33404	; 0x827c
   11f08:	movt	r1, #1
   11f0c:	b	11ec4 <__assert_fail@plt+0xe08>
   11f10:	movw	r1, #33552	; 0x8310
   11f14:	movt	r1, #1
   11f18:	b	11ec4 <__assert_fail@plt+0xe08>
   11f1c:	movw	r1, #33500	; 0x82dc
   11f20:	movt	r1, #1
   11f24:	b	11ec4 <__assert_fail@plt+0xe08>
   11f28:	push	{r4, r5, r6, r7, fp, lr}
   11f2c:	add	fp, sp, #16
   11f30:	mov	r4, r2
   11f34:	mov	r5, r1
   11f38:	mov	r6, r0
   11f3c:	mvn	r1, #0
   11f40:	mvn	r0, #1
   11f44:	strd	r0, [r6, #8]
   11f48:	mov	r0, r6
   11f4c:	mov	r1, #0
   11f50:	bl	1224c <__assert_fail@plt+0x1190>
   11f54:	cmn	r0, #1
   11f58:	beq	11f78 <__assert_fail@plt+0xebc>
   11f5c:	mov	r7, #1
   11f60:	strb	r7, [r4, r0]
   11f64:	mov	r0, r6
   11f68:	mov	r1, #0
   11f6c:	bl	1224c <__assert_fail@plt+0x1190>
   11f70:	cmn	r0, #1
   11f74:	bne	11f60 <__assert_fail@plt+0xea4>
   11f78:	cmp	r5, #0
   11f7c:	popeq	{r4, r5, r6, r7, fp, pc}
   11f80:	mov	r0, #0
   11f84:	ldrb	r1, [r4, r0]
   11f88:	eor	r1, r1, #1
   11f8c:	strb	r1, [r4, r0]
   11f90:	add	r0, r0, #1
   11f94:	cmp	r0, #256	; 0x100
   11f98:	bne	11f84 <__assert_fail@plt+0xec8>
   11f9c:	pop	{r4, r5, r6, r7, fp, pc}
   11fa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fa4:	add	fp, sp, #28
   11fa8:	push	{r0}		; (str r0, [sp, #-4]!)
   11fac:	mvn	r5, #-2147483648	; 0x80000000
   11fb0:	mov	r8, #0
   11fb4:	movw	sl, #37470	; 0x925e
   11fb8:	movt	sl, #2
   11fbc:	mov	r6, #0
   11fc0:	b	11fcc <__assert_fail@plt+0xf10>
   11fc4:	mov	r8, r4
   11fc8:	mvn	r5, #-2147483648	; 0x80000000
   11fcc:	cmp	r8, r6
   11fd0:	bcc	11ff8 <__assert_fail@plt+0xf3c>
   11fd4:	mov	r0, sl
   11fd8:	mov	r1, #8192	; 0x2000
   11fdc:	ldr	r2, [sp]
   11fe0:	blx	r2
   11fe4:	cmp	r0, #0
   11fe8:	subeq	sp, fp, #28
   11fec:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ff0:	mov	r6, r0
   11ff4:	mov	r8, #0
   11ff8:	mov	r9, r5
   11ffc:	cmn	r5, #-2147483647	; 0x80000001
   12000:	bne	12074 <__assert_fail@plt+0xfb8>
   12004:	cmp	r6, r8
   12008:	mov	r7, r8
   1200c:	movw	r5, #37214	; 0x915e
   12010:	movt	r5, #2
   12014:	bls	1203c <__assert_fail@plt+0xf80>
   12018:	mov	r7, r8
   1201c:	ldrb	r0, [sl, r7]
   12020:	bl	132d0 <__assert_fail@plt+0x2214>
   12024:	ldrb	r0, [r5, r0]
   12028:	cmp	r0, #0
   1202c:	bne	1203c <__assert_fail@plt+0xf80>
   12030:	add	r7, r7, #2
   12034:	cmp	r7, r6
   12038:	bcc	1201c <__assert_fail@plt+0xf60>
   1203c:	cmp	r7, r6
   12040:	bne	1207c <__assert_fail@plt+0xfc0>
   12044:	sub	r4, r7, #1
   12048:	ldrb	r0, [sl, r4]
   1204c:	bl	132d0 <__assert_fail@plt+0x2214>
   12050:	ldrb	r0, [r5, r0]
   12054:	cmp	r0, #0
   12058:	moveq	r4, r7
   1205c:	cmp	r4, r6
   12060:	bcc	12088 <__assert_fail@plt+0xfcc>
   12064:	sub	r7, r6, r8
   12068:	cmp	r7, #0
   1206c:	bne	120b8 <__assert_fail@plt+0xffc>
   12070:	b	120dc <__assert_fail@plt+0x1020>
   12074:	mov	r4, r8
   12078:	b	120ec <__assert_fail@plt+0x1030>
   1207c:	mov	r4, r7
   12080:	cmp	r4, r6
   12084:	bcs	12064 <__assert_fail@plt+0xfa8>
   12088:	ldrb	r9, [sl, r4]
   1208c:	sub	r0, r4, r8
   12090:	add	r7, r0, #1
   12094:	cmp	r4, #0
   12098:	beq	120ac <__assert_fail@plt+0xff0>
   1209c:	add	r1, sl, r4
   120a0:	ldrb	r1, [r1, #-1]
   120a4:	cmp	r1, r9
   120a8:	moveq	r7, r0
   120ac:	add	r4, r4, #1
   120b0:	cmp	r7, #0
   120b4:	beq	120dc <__assert_fail@plt+0x1020>
   120b8:	add	r0, sl, r8
   120bc:	movw	r1, #37204	; 0x9154
   120c0:	movt	r1, #2
   120c4:	ldr	r3, [r1]
   120c8:	mov	r1, #1
   120cc:	mov	r2, r7
   120d0:	bl	10ed0 <fwrite_unlocked@plt>
   120d4:	cmp	r0, r7
   120d8:	bne	12120 <__assert_fail@plt+0x1064>
   120dc:	cmn	r9, #-2147483647	; 0x80000001
   120e0:	mov	r8, r4
   120e4:	mvn	r5, #-2147483648	; 0x80000000
   120e8:	beq	11fcc <__assert_fail@plt+0xf10>
   120ec:	cmp	r4, r6
   120f0:	mov	r8, r4
   120f4:	mov	r5, r9
   120f8:	bcs	11fcc <__assert_fail@plt+0xf10>
   120fc:	ldrb	r0, [sl, r4]
   12100:	cmp	r9, r0
   12104:	bne	11fc4 <__assert_fail@plt+0xf08>
   12108:	add	r4, r4, #1
   1210c:	cmp	r4, r6
   12110:	bcc	120fc <__assert_fail@plt+0x1040>
   12114:	mov	r8, r4
   12118:	mov	r5, r9
   1211c:	b	11fcc <__assert_fail@plt+0xf10>
   12120:	bl	10fe4 <__errno_location@plt>
   12124:	ldr	r4, [r0]
   12128:	movw	r1, #31762	; 0x7c12
   1212c:	movt	r1, #1
   12130:	mov	r0, #0
   12134:	mov	r2, #5
   12138:	bl	10ef4 <dcgettext@plt>
   1213c:	mov	r2, r0
   12140:	mov	r0, #1
   12144:	mov	r1, r4
   12148:	bl	10f6c <error@plt>
   1214c:	push	{r4, sl, fp, lr}
   12150:	add	fp, sp, #8
   12154:	mov	r2, r1
   12158:	mov	r1, r0
   1215c:	mov	r0, #0
   12160:	bl	158c0 <__assert_fail@plt+0x4804>
   12164:	cmn	r0, #1
   12168:	popne	{r4, sl, fp, pc}
   1216c:	bl	10fe4 <__errno_location@plt>
   12170:	ldr	r4, [r0]
   12174:	movw	r1, #34213	; 0x85a5
   12178:	movt	r1, #1
   1217c:	mov	r0, #0
   12180:	mov	r2, #5
   12184:	bl	10ef4 <dcgettext@plt>
   12188:	mov	r2, r0
   1218c:	mov	r0, #1
   12190:	mov	r1, r4
   12194:	bl	10f6c <error@plt>
   12198:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1219c:	add	fp, sp, #28
   121a0:	sub	sp, sp, #4
   121a4:	mov	r9, r1
   121a8:	mov	r5, r0
   121ac:	add	r8, r0, #1
   121b0:	movw	sl, #45662	; 0xb25e
   121b4:	movt	sl, #2
   121b8:	mov	r0, r5
   121bc:	mov	r1, r9
   121c0:	bl	1214c <__assert_fail@plt+0x1090>
   121c4:	cmp	r0, #0
   121c8:	beq	1223c <__assert_fail@plt+0x1180>
   121cc:	mov	r7, r0
   121d0:	mov	r6, #0
   121d4:	ldrb	r0, [r5, r6]
   121d8:	bl	132d0 <__assert_fail@plt+0x2214>
   121dc:	ldrb	r0, [sl, r0]
   121e0:	cmp	r0, #0
   121e4:	bne	121f4 <__assert_fail@plt+0x1138>
   121e8:	add	r6, r6, #1
   121ec:	cmp	r6, r7
   121f0:	bcc	121d4 <__assert_fail@plt+0x1118>
   121f4:	add	r0, r6, #1
   121f8:	cmp	r0, r7
   121fc:	bcs	12230 <__assert_fail@plt+0x1174>
   12200:	add	r4, r8, r6
   12204:	sub	r0, r7, #1
   12208:	sub	r7, r0, r6
   1220c:	ldrb	r0, [r4]
   12210:	bl	132d0 <__assert_fail@plt+0x2214>
   12214:	ldrb	r1, [sl, r0]
   12218:	cmp	r1, #0
   1221c:	strbeq	r0, [r5, r6]
   12220:	addeq	r6, r6, #1
   12224:	add	r4, r4, #1
   12228:	subs	r7, r7, #1
   1222c:	bne	1220c <__assert_fail@plt+0x1150>
   12230:	cmp	r6, #0
   12234:	beq	121b8 <__assert_fail@plt+0x10fc>
   12238:	b	12240 <__assert_fail@plt+0x1184>
   1223c:	mov	r6, #0
   12240:	mov	r0, r6
   12244:	sub	sp, fp, #28
   12248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1224c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12250:	add	fp, sp, #28
   12254:	sub	sp, sp, #4
   12258:	mov	sl, r0
   1225c:	add	r6, r0, #8
   12260:	mvn	r9, #0
   12264:	mov	r0, #2
   12268:	b	1227c <__assert_fail@plt+0x11c0>
   1226c:	ldr	r2, [r7, #4]
   12270:	str	r2, [sl, #4]
   12274:	str	r9, [r6]
   12278:	str	r9, [r6, #4]
   1227c:	cmp	r1, #0
   12280:	strne	r0, [r1]
   12284:	subs	r2, r9, #1
   12288:	sbc	r3, r9, #0
   1228c:	ldrd	r4, [r6]
   12290:	eor	r3, r5, r3
   12294:	eor	r2, r4, r2
   12298:	orrs	r2, r2, r3
   1229c:	bne	122c0 <__assert_fail@plt+0x1204>
   122a0:	ldr	r2, [sl]
   122a4:	ldr	r7, [r2, #4]
   122a8:	str	r7, [sl, #4]
   122ac:	str	r9, [r6]
   122b0:	str	r9, [r6, #4]
   122b4:	cmp	r7, #0
   122b8:	bne	122cc <__assert_fail@plt+0x1210>
   122bc:	b	124a8 <__assert_fail@plt+0x13ec>
   122c0:	ldr	r7, [sl, #4]
   122c4:	cmp	r7, #0
   122c8:	beq	124a8 <__assert_fail@plt+0x13ec>
   122cc:	ldr	r2, [r7]
   122d0:	cmp	r2, #4
   122d4:	bhi	124b0 <__assert_fail@plt+0x13f4>
   122d8:	add	r3, pc, #0
   122dc:	ldr	pc, [r3, r2, lsl #2]
   122e0:	andeq	r2, r1, r0, asr r3
   122e4:	andeq	r2, r1, ip, lsl #7
   122e8:	andeq	r2, r1, r8, ror #6
   122ec:	andeq	r2, r1, r0, asr r3
   122f0:	strdeq	r2, [r1], -r4
   122f4:	mov	r2, r7
   122f8:	ldr	r3, [r2, #16]!
   122fc:	ldr	r5, [r2, #4]
   12300:	orrs	r3, r3, r5
   12304:	beq	1226c <__assert_fail@plt+0x11b0>
   12308:	ldrd	r0, [r6]
   1230c:	eor	r1, r1, r9
   12310:	eor	r0, r0, r9
   12314:	orrs	r0, r0, r1
   12318:	moveq	r0, #0
   1231c:	streq	r0, [r6]
   12320:	streq	r0, [r6, #4]
   12324:	ldrd	r0, [r6]
   12328:	adds	r0, r0, #1
   1232c:	adc	r1, r1, #0
   12330:	strd	r0, [r6]
   12334:	ldrd	r2, [r2]
   12338:	eor	r1, r1, r3
   1233c:	eor	r0, r0, r2
   12340:	orrs	r0, r0, r1
   12344:	ldrb	r8, [r7, #8]
   12348:	beq	1248c <__assert_fail@plt+0x13d0>
   1234c:	b	1249c <__assert_fail@plt+0x13e0>
   12350:	ldrb	r8, [r7, #8]
   12354:	str	r9, [r6]
   12358:	str	r9, [r6, #4]
   1235c:	ldr	r0, [r7, #4]
   12360:	str	r0, [sl, #4]
   12364:	b	1249c <__assert_fail@plt+0x13e0>
   12368:	cmp	r1, #0
   1236c:	beq	123d8 <__assert_fail@plt+0x131c>
   12370:	ldr	r0, [r7, #8]
   12374:	cmp	r0, #10
   12378:	beq	123d0 <__assert_fail@plt+0x1314>
   1237c:	cmp	r0, #6
   12380:	bne	123d8 <__assert_fail@plt+0x131c>
   12384:	mov	r0, #0
   12388:	b	123d4 <__assert_fail@plt+0x1318>
   1238c:	ldrd	r0, [r6]
   12390:	eor	r2, r1, r9
   12394:	eor	r3, r0, r9
   12398:	orrs	r2, r3, r2
   1239c:	bne	123ac <__assert_fail@plt+0x12f0>
   123a0:	ldrb	r8, [r7, #8]
   123a4:	mov	r1, #0
   123a8:	b	123b4 <__assert_fail@plt+0x12f8>
   123ac:	adds	r8, r0, #1
   123b0:	adc	r1, r1, #0
   123b4:	str	r8, [r6]
   123b8:	str	r1, [r6, #4]
   123bc:	ldrb	r0, [r7, #9]
   123c0:	eor	r0, r8, r0
   123c4:	orrs	r0, r0, r1
   123c8:	beq	1248c <__assert_fail@plt+0x13d0>
   123cc:	b	1249c <__assert_fail@plt+0x13e0>
   123d0:	mov	r0, #1
   123d4:	str	r0, [r1]
   123d8:	ldrd	r0, [r6]
   123dc:	eor	r1, r1, r9
   123e0:	eor	r0, r0, r9
   123e4:	orrs	r0, r0, r1
   123e8:	bne	12440 <__assert_fail@plt+0x1384>
   123ec:	ldr	r5, [r7, #8]
   123f0:	mov	r8, #0
   123f4:	uxtb	r1, r8
   123f8:	mov	r0, r5
   123fc:	bl	13a30 <__assert_fail@plt+0x2974>
   12400:	cmp	r0, #0
   12404:	bne	12434 <__assert_fail@plt+0x1378>
   12408:	add	r8, r8, #1
   1240c:	cmp	r8, #256	; 0x100
   12410:	bcc	123f4 <__assert_fail@plt+0x1338>
   12414:	movw	r0, #34224	; 0x85b0
   12418:	movt	r0, #1
   1241c:	movw	r1, #31800	; 0x7c38
   12420:	movt	r1, #1
   12424:	movw	r3, #34236	; 0x85bc
   12428:	movt	r3, #1
   1242c:	movw	r2, #1079	; 0x437
   12430:	bl	110bc <__assert_fail@plt>
   12434:	mov	r1, #0
   12438:	str	r8, [r6]
   1243c:	str	r1, [r6, #4]
   12440:	ldr	r5, [r7, #8]
   12444:	ldr	r8, [r6]
   12448:	uxtb	r1, r8
   1244c:	mov	r0, r5
   12450:	bl	13a30 <__assert_fail@plt+0x2974>
   12454:	cmp	r0, #0
   12458:	beq	124b4 <__assert_fail@plt+0x13f8>
   1245c:	mov	r4, r8
   12460:	add	r4, r4, #1
   12464:	cmp	r4, #255	; 0xff
   12468:	bgt	1248c <__assert_fail@plt+0x13d0>
   1246c:	uxtb	r1, r4
   12470:	mov	r0, r5
   12474:	bl	13a30 <__assert_fail@plt+0x2974>
   12478:	cmp	r0, #0
   1247c:	beq	12460 <__assert_fail@plt+0x13a4>
   12480:	asr	r5, r4, #31
   12484:	strd	r4, [r6]
   12488:	b	1249c <__assert_fail@plt+0x13e0>
   1248c:	ldr	r0, [r7, #4]
   12490:	str	r0, [sl, #4]
   12494:	str	r9, [r6]
   12498:	str	r9, [r6, #4]
   1249c:	mov	r0, r8
   124a0:	sub	sp, fp, #28
   124a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124a8:	mvn	r8, #0
   124ac:	b	1249c <__assert_fail@plt+0x13e0>
   124b0:	bl	110a4 <abort@plt>
   124b4:	movw	r0, #34295	; 0x85f7
   124b8:	movt	r0, #1
   124bc:	movw	r1, #31800	; 0x7c38
   124c0:	movt	r1, #1
   124c4:	movw	r3, #34236	; 0x85bc
   124c8:	movt	r3, #1
   124cc:	movw	r2, #1082	; 0x43a
   124d0:	bl	110bc <__assert_fail@plt>
   124d4:	ldr	r1, [r0, #4]
   124d8:	ldr	r1, [r1, #4]
   124dc:	mvn	r2, #0
   124e0:	stmib	r0, {r1, r2}
   124e4:	str	r2, [r0, #12]
   124e8:	bx	lr
   124ec:	push	{r4, r5, r6, r7, fp, lr}
   124f0:	add	fp, sp, #16
   124f4:	mov	r4, r0
   124f8:	bl	1214c <__assert_fail@plt+0x1090>
   124fc:	mov	r5, r0
   12500:	cmp	r0, #0
   12504:	beq	1252c <__assert_fail@plt+0x1470>
   12508:	movw	r6, #45918	; 0xb35e
   1250c:	movt	r6, #2
   12510:	mov	r7, r5
   12514:	ldrb	r0, [r4]
   12518:	bl	132d0 <__assert_fail@plt+0x2214>
   1251c:	ldrb	r0, [r6, r0]
   12520:	strb	r0, [r4], #1
   12524:	subs	r7, r7, #1
   12528:	bne	12514 <__assert_fail@plt+0x1458>
   1252c:	mov	r0, r5
   12530:	pop	{r4, r5, r6, r7, fp, pc}
   12534:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12538:	add	fp, sp, #28
   1253c:	sub	sp, sp, #20
   12540:	mov	r4, r1
   12544:	mov	r5, r0
   12548:	bl	10fcc <strlen@plt>
   1254c:	mov	r6, r0
   12550:	bl	15e18 <__assert_fail@plt+0x4d5c>
   12554:	str	r0, [r4]
   12558:	mov	sl, #1
   1255c:	mov	r0, r6
   12560:	mov	r1, #1
   12564:	bl	160dc <__assert_fail@plt+0x5020>
   12568:	str	r0, [r4, #4]
   1256c:	mov	r6, #0
   12570:	mov	r9, #0
   12574:	b	12588 <__assert_fail@plt+0x14cc>
   12578:	ldr	r1, [r4]
   1257c:	strb	r0, [r1, r6]
   12580:	add	r9, r9, #1
   12584:	add	r6, r6, #1
   12588:	ldrb	r0, [r5, r9]
   1258c:	cmp	r0, #92	; 0x5c
   12590:	beq	125a0 <__assert_fail@plt+0x14e4>
   12594:	cmp	r0, #0
   12598:	bne	12578 <__assert_fail@plt+0x14bc>
   1259c:	b	128b0 <__assert_fail@plt+0x17f4>
   125a0:	ldr	r0, [r4, #4]
   125a4:	strb	sl, [r0, r6]
   125a8:	add	r8, r9, #1
   125ac:	ldrb	r0, [r5, r8]
   125b0:	cmp	r0, #118	; 0x76
   125b4:	bhi	128a8 <__assert_fail@plt+0x17ec>
   125b8:	add	r1, pc, #0
   125bc:	ldr	pc, [r1, r0, lsl #2]
   125c0:	andeq	r2, r1, ip, ror #15
   125c4:	andeq	r2, r1, r8, lsr #17
   125c8:	andeq	r2, r1, r8, lsr #17
   125cc:	andeq	r2, r1, r8, lsr #17
   125d0:	andeq	r2, r1, r8, lsr #17
   125d4:	andeq	r2, r1, r8, lsr #17
   125d8:	andeq	r2, r1, r8, lsr #17
   125dc:	andeq	r2, r1, r8, lsr #17
   125e0:	andeq	r2, r1, r8, lsr #17
   125e4:	andeq	r2, r1, r8, lsr #17
   125e8:	andeq	r2, r1, r8, lsr #17
   125ec:	andeq	r2, r1, r8, lsr #17
   125f0:	andeq	r2, r1, r8, lsr #17
   125f4:	andeq	r2, r1, r8, lsr #17
   125f8:	andeq	r2, r1, r8, lsr #17
   125fc:	andeq	r2, r1, r8, lsr #17
   12600:	andeq	r2, r1, r8, lsr #17
   12604:	andeq	r2, r1, r8, lsr #17
   12608:	andeq	r2, r1, r8, lsr #17
   1260c:	andeq	r2, r1, r8, lsr #17
   12610:	andeq	r2, r1, r8, lsr #17
   12614:	andeq	r2, r1, r8, lsr #17
   12618:	andeq	r2, r1, r8, lsr #17
   1261c:	andeq	r2, r1, r8, lsr #17
   12620:	andeq	r2, r1, r8, lsr #17
   12624:	andeq	r2, r1, r8, lsr #17
   12628:	andeq	r2, r1, r8, lsr #17
   1262c:	andeq	r2, r1, r8, lsr #17
   12630:	andeq	r2, r1, r8, lsr #17
   12634:	andeq	r2, r1, r8, lsr #17
   12638:	andeq	r2, r1, r8, lsr #17
   1263c:	andeq	r2, r1, r8, lsr #17
   12640:	andeq	r2, r1, r8, lsr #17
   12644:	andeq	r2, r1, r8, lsr #17
   12648:	andeq	r2, r1, r8, lsr #17
   1264c:	andeq	r2, r1, r8, lsr #17
   12650:	andeq	r2, r1, r8, lsr #17
   12654:	andeq	r2, r1, r8, lsr #17
   12658:	andeq	r2, r1, r8, lsr #17
   1265c:	andeq	r2, r1, r8, lsr #17
   12660:	andeq	r2, r1, r8, lsr #17
   12664:	andeq	r2, r1, r8, lsr #17
   12668:	andeq	r2, r1, r8, lsr #17
   1266c:	andeq	r2, r1, r8, lsr #17
   12670:	andeq	r2, r1, r8, lsr #17
   12674:	andeq	r2, r1, r8, lsr #17
   12678:	andeq	r2, r1, r8, lsr #17
   1267c:	andeq	r2, r1, r8, lsr #17
   12680:	muleq	r1, ip, r7
   12684:	muleq	r1, ip, r7
   12688:	muleq	r1, ip, r7
   1268c:	muleq	r1, ip, r7
   12690:	muleq	r1, ip, r7
   12694:	muleq	r1, ip, r7
   12698:	muleq	r1, ip, r7
   1269c:	muleq	r1, ip, r7
   126a0:	andeq	r2, r1, r8, lsr #17
   126a4:	andeq	r2, r1, r8, lsr #17
   126a8:	andeq	r2, r1, r8, lsr #17
   126ac:	andeq	r2, r1, r8, lsr #17
   126b0:	andeq	r2, r1, r8, lsr #17
   126b4:	andeq	r2, r1, r8, lsr #17
   126b8:	andeq	r2, r1, r8, lsr #17
   126bc:	andeq	r2, r1, r8, lsr #17
   126c0:	andeq	r2, r1, r8, lsr #17
   126c4:	andeq	r2, r1, r8, lsr #17
   126c8:	andeq	r2, r1, r8, lsr #17
   126cc:	andeq	r2, r1, r8, lsr #17
   126d0:	andeq	r2, r1, r8, lsr #17
   126d4:	andeq	r2, r1, r8, lsr #17
   126d8:	andeq	r2, r1, r8, lsr #17
   126dc:	andeq	r2, r1, r8, lsr #17
   126e0:	andeq	r2, r1, r8, lsr #17
   126e4:	andeq	r2, r1, r8, lsr #17
   126e8:	andeq	r2, r1, r8, lsr #17
   126ec:	andeq	r2, r1, r8, lsr #17
   126f0:	andeq	r2, r1, r8, lsr #17
   126f4:	andeq	r2, r1, r8, lsr #17
   126f8:	andeq	r2, r1, r8, lsr #17
   126fc:	andeq	r2, r1, r8, lsr #17
   12700:	andeq	r2, r1, r8, lsr #17
   12704:	andeq	r2, r1, r8, lsr #17
   12708:	andeq	r2, r1, r8, lsr #17
   1270c:	andeq	r2, r1, r8, lsr #17
   12710:	andeq	r2, r1, r8, lsr #17
   12714:	andeq	r2, r1, r8, lsr #17
   12718:	andeq	r2, r1, r8, lsr #17
   1271c:	andeq	r2, r1, r8, lsr #17
   12720:	andeq	r2, r1, r8, lsr #17
   12724:	andeq	r2, r1, r8, lsr #17
   12728:	andeq	r2, r1, r8, lsr #17
   1272c:	andeq	r2, r1, r8, lsr #17
   12730:	andeq	r2, r1, r8, lsr #17
   12734:	andeq	r2, r1, r8, lsr #17
   12738:	andeq	r2, r1, r8, lsr #17
   1273c:	andeq	r2, r1, r8, lsr #17
   12740:	andeq	r2, r1, r8, lsr #17
   12744:	andeq	r2, r1, r8, lsr #16
   12748:	andeq	r2, r1, r0, lsr r8
   1274c:	andeq	r2, r1, r8, lsr #17
   12750:	andeq	r2, r1, r8, lsr #17
   12754:	andeq	r2, r1, r8, lsr #17
   12758:	andeq	r2, r1, r8, lsr r8
   1275c:	andeq	r2, r1, r8, lsr #17
   12760:	andeq	r2, r1, r8, lsr #17
   12764:	andeq	r2, r1, r8, lsr #17
   12768:	andeq	r2, r1, r8, lsr #17
   1276c:	andeq	r2, r1, r8, lsr #17
   12770:	andeq	r2, r1, r8, lsr #17
   12774:	andeq	r2, r1, r8, lsr #17
   12778:	andeq	r2, r1, r0, asr #16
   1277c:	andeq	r2, r1, r8, lsr #17
   12780:	andeq	r2, r1, r8, lsr #17
   12784:	andeq	r2, r1, r8, lsr #17
   12788:	andeq	r2, r1, r8, asr #16
   1278c:	andeq	r2, r1, r8, lsr #17
   12790:	andeq	r2, r1, r0, asr r8
   12794:	andeq	r2, r1, r8, lsr #17
   12798:	andeq	r2, r1, r8, asr r8
   1279c:	add	r7, r9, #2
   127a0:	ldrb	r1, [r5, r7]
   127a4:	and	r2, r1, #248	; 0xf8
   127a8:	sub	r0, r0, #48	; 0x30
   127ac:	cmp	r2, #48	; 0x30
   127b0:	bne	128a8 <__assert_fail@plt+0x17ec>
   127b4:	add	r0, r1, r0, lsl #3
   127b8:	sub	sl, r0, #48	; 0x30
   127bc:	add	r9, r9, #3
   127c0:	ldrb	r0, [r5, r9]
   127c4:	and	r1, r0, #248	; 0xf8
   127c8:	cmp	r1, #48	; 0x30
   127cc:	bne	1289c <__assert_fail@plt+0x17e0>
   127d0:	uxtb	r1, sl
   127d4:	add	r0, r0, r1, lsl #3
   127d8:	sub	r0, r0, #48	; 0x30
   127dc:	cmp	r0, #255	; 0xff
   127e0:	bgt	12860 <__assert_fail@plt+0x17a4>
   127e4:	mov	r9, r7
   127e8:	b	128a4 <__assert_fail@plt+0x17e8>
   127ec:	mov	r0, #0
   127f0:	movw	r1, #32345	; 0x7e59
   127f4:	movt	r1, #1
   127f8:	mov	r2, #5
   127fc:	bl	10ef4 <dcgettext@plt>
   12800:	mov	r2, r0
   12804:	mov	r0, #0
   12808:	mov	r1, #0
   1280c:	bl	10f6c <error@plt>
   12810:	ldr	r0, [r4, #4]
   12814:	mov	r1, #0
   12818:	strb	r1, [r0, r6]
   1281c:	sub	r9, r9, #1
   12820:	mov	r0, #92	; 0x5c
   12824:	b	128a8 <__assert_fail@plt+0x17ec>
   12828:	mov	r0, #7
   1282c:	b	128a8 <__assert_fail@plt+0x17ec>
   12830:	mov	r0, #8
   12834:	b	128a8 <__assert_fail@plt+0x17ec>
   12838:	mov	r0, #12
   1283c:	b	128a8 <__assert_fail@plt+0x17ec>
   12840:	mov	r0, #10
   12844:	b	128a8 <__assert_fail@plt+0x17ec>
   12848:	mov	r0, #13
   1284c:	b	128a8 <__assert_fail@plt+0x17ec>
   12850:	mov	r0, #9
   12854:	b	128a8 <__assert_fail@plt+0x17ec>
   12858:	mov	r0, #11
   1285c:	b	128a8 <__assert_fail@plt+0x17ec>
   12860:	mov	r0, #0
   12864:	movw	r1, #32245	; 0x7df5
   12868:	movt	r1, #1
   1286c:	mov	r2, #5
   12870:	bl	10ef4 <dcgettext@plt>
   12874:	mov	r2, r0
   12878:	ldrb	r3, [r5, r8]
   1287c:	ldrb	r0, [r5, r7]
   12880:	ldrb	r1, [r5, r9]
   12884:	stm	sp, {r0, r1, r3}
   12888:	str	r0, [sp, #12]
   1288c:	str	r1, [sp, #16]
   12890:	mov	r0, #0
   12894:	mov	r1, #0
   12898:	bl	10f6c <error@plt>
   1289c:	mov	r9, r8
   128a0:	mov	r0, sl
   128a4:	mov	sl, #1
   128a8:	add	r9, r9, #1
   128ac:	b	12578 <__assert_fail@plt+0x14bc>
   128b0:	str	r6, [r4, #8]
   128b4:	sub	sp, fp, #28
   128b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128c0:	add	fp, sp, #28
   128c4:	sub	sp, sp, #44	; 0x2c
   128c8:	mov	r4, r1
   128cc:	mov	r5, r0
   128d0:	ldr	sl, [r0]
   128d4:	ldr	r0, [r0, #8]
   128d8:	mov	r6, #0
   128dc:	cmp	r0, #3
   128e0:	bcc	12a94 <__assert_fail@plt+0x19d8>
   128e4:	add	r0, sl, #2
   128e8:	str	r0, [sp, #16]
   128ec:	mov	r6, #0
   128f0:	mov	r7, #2
   128f4:	add	r9, sp, #20
   128f8:	mov	r0, r5
   128fc:	mov	r1, r6
   12900:	mov	r2, #91	; 0x5b
   12904:	bl	12bc4 <__assert_fail@plt+0x1b08>
   12908:	cmp	r0, #0
   1290c:	beq	12a18 <__assert_fail@plt+0x195c>
   12910:	add	r8, r6, #1
   12914:	mov	r0, r5
   12918:	mov	r1, r8
   1291c:	mov	r2, #58	; 0x3a
   12920:	bl	12bc4 <__assert_fail@plt+0x1b08>
   12924:	cmp	r0, #0
   12928:	bne	12944 <__assert_fail@plt+0x1888>
   1292c:	mov	r0, r5
   12930:	mov	r1, r8
   12934:	mov	r2, #61	; 0x3d
   12938:	bl	12bc4 <__assert_fail@plt+0x1b08>
   1293c:	cmp	r0, #0
   12940:	beq	129ec <__assert_fail@plt+0x1930>
   12944:	ldrb	r2, [sl, r8]
   12948:	mov	r0, r5
   1294c:	mov	r1, r7
   12950:	mov	r3, r9
   12954:	bl	12bec <__assert_fail@plt+0x1b30>
   12958:	cmp	r0, #0
   1295c:	beq	129ec <__assert_fail@plt+0x1930>
   12960:	ldrb	r0, [sl, r8]
   12964:	mvn	r1, #1
   12968:	sub	r1, r1, r6
   1296c:	ldr	r9, [sp, #20]
   12970:	adds	r2, r1, r9
   12974:	beq	12acc <__assert_fail@plt+0x1a10>
   12978:	ldr	r1, [sp, #16]
   1297c:	add	r1, r1, r6
   12980:	cmp	r0, #58	; 0x3a
   12984:	str	r2, [sp, #12]
   12988:	str	r1, [sp, #8]
   1298c:	mov	r0, r4
   12990:	bne	129bc <__assert_fail@plt+0x1900>
   12994:	bl	12c70 <__assert_fail@plt+0x1bb4>
   12998:	cmp	r0, #0
   1299c:	bne	129c8 <__assert_fail@plt+0x190c>
   129a0:	mov	r0, r5
   129a4:	mov	r1, r7
   129a8:	bl	12cf0 <__assert_fail@plt+0x1c34>
   129ac:	cmp	r0, #0
   129b0:	add	r9, sp, #20
   129b4:	bne	129ec <__assert_fail@plt+0x1930>
   129b8:	b	12b0c <__assert_fail@plt+0x1a50>
   129bc:	bl	12ea8 <__assert_fail@plt+0x1dec>
   129c0:	cmp	r0, #0
   129c4:	beq	129d4 <__assert_fail@plt+0x1918>
   129c8:	add	r6, r9, #2
   129cc:	add	r9, sp, #20
   129d0:	b	12a84 <__assert_fail@plt+0x19c8>
   129d4:	mov	r0, r5
   129d8:	mov	r1, r7
   129dc:	bl	12cf0 <__assert_fail@plt+0x1c34>
   129e0:	cmp	r0, #0
   129e4:	add	r9, sp, #20
   129e8:	beq	12b54 <__assert_fail@plt+0x1a98>
   129ec:	sub	r0, fp, #32
   129f0:	str	r0, [sp]
   129f4:	mov	r0, r5
   129f8:	mov	r1, r8
   129fc:	sub	r2, fp, #33	; 0x21
   12a00:	add	r3, sp, #24
   12a04:	bl	12f20 <__assert_fail@plt+0x1e64>
   12a08:	cmp	r0, #0
   12a0c:	beq	12a68 <__assert_fail@plt+0x19ac>
   12a10:	cmn	r0, #1
   12a14:	bne	12ac4 <__assert_fail@plt+0x1a08>
   12a18:	add	r7, r6, #1
   12a1c:	mov	r0, r5
   12a20:	mov	r1, r7
   12a24:	mov	r2, #45	; 0x2d
   12a28:	bl	12bc4 <__assert_fail@plt+0x1b08>
   12a2c:	ldrb	r1, [sl, r6]
   12a30:	cmp	r0, #0
   12a34:	beq	12a58 <__assert_fail@plt+0x199c>
   12a38:	add	r0, sl, r6
   12a3c:	ldrb	r2, [r0, #2]
   12a40:	mov	r0, r4
   12a44:	bl	1313c <__assert_fail@plt+0x2080>
   12a48:	cmp	r0, #0
   12a4c:	beq	12ac4 <__assert_fail@plt+0x1a08>
   12a50:	add	r6, r6, #3
   12a54:	b	12a84 <__assert_fail@plt+0x19c8>
   12a58:	mov	r0, r4
   12a5c:	bl	13214 <__assert_fail@plt+0x2158>
   12a60:	mov	r6, r7
   12a64:	b	12a84 <__assert_fail@plt+0x19c8>
   12a68:	ldr	r2, [sp, #24]
   12a6c:	ldr	r3, [sp, #28]
   12a70:	ldrb	r1, [fp, #-33]	; 0xffffffdf
   12a74:	mov	r0, r4
   12a78:	bl	130d0 <__assert_fail@plt+0x2014>
   12a7c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12a80:	add	r6, r0, #1
   12a84:	ldr	r0, [r5, #8]
   12a88:	add	r7, r6, #2
   12a8c:	cmp	r7, r0
   12a90:	bcc	128f8 <__assert_fail@plt+0x183c>
   12a94:	ldr	r0, [r5, #8]
   12a98:	mov	r7, #1
   12a9c:	cmp	r6, r0
   12aa0:	bcs	12b98 <__assert_fail@plt+0x1adc>
   12aa4:	ldrb	r1, [sl, r6]
   12aa8:	mov	r0, r4
   12aac:	bl	13214 <__assert_fail@plt+0x2158>
   12ab0:	add	r6, r6, #1
   12ab4:	ldr	r0, [r5, #8]
   12ab8:	cmp	r6, r0
   12abc:	bcc	12aa4 <__assert_fail@plt+0x19e8>
   12ac0:	b	12b98 <__assert_fail@plt+0x1adc>
   12ac4:	mov	r7, #0
   12ac8:	b	12b98 <__assert_fail@plt+0x1adc>
   12acc:	mov	r7, #0
   12ad0:	cmp	r0, #58	; 0x3a
   12ad4:	bne	12ae4 <__assert_fail@plt+0x1a28>
   12ad8:	movw	r1, #32410	; 0x7e9a
   12adc:	movt	r1, #1
   12ae0:	b	12aec <__assert_fail@plt+0x1a30>
   12ae4:	movw	r1, #32446	; 0x7ebe
   12ae8:	movt	r1, #1
   12aec:	mov	r0, #0
   12af0:	mov	r2, #5
   12af4:	bl	10ef4 <dcgettext@plt>
   12af8:	mov	r2, r0
   12afc:	mov	r0, #0
   12b00:	mov	r1, #0
   12b04:	bl	10f6c <error@plt>
   12b08:	b	12b98 <__assert_fail@plt+0x1adc>
   12b0c:	ldr	r0, [sp, #8]
   12b10:	ldr	r1, [sp, #12]
   12b14:	bl	12d6c <__assert_fail@plt+0x1cb0>
   12b18:	mov	r4, r0
   12b1c:	mov	r7, #0
   12b20:	movw	r1, #32489	; 0x7ee9
   12b24:	movt	r1, #1
   12b28:	mov	r0, #0
   12b2c:	mov	r2, #5
   12b30:	bl	10ef4 <dcgettext@plt>
   12b34:	mov	r5, r0
   12b38:	mov	r0, r4
   12b3c:	bl	154ac <__assert_fail@plt+0x43f0>
   12b40:	mov	r3, r0
   12b44:	mov	r0, #0
   12b48:	mov	r1, #0
   12b4c:	mov	r2, r5
   12b50:	b	12b8c <__assert_fail@plt+0x1ad0>
   12b54:	ldr	r0, [sp, #8]
   12b58:	ldr	r1, [sp, #12]
   12b5c:	bl	12d6c <__assert_fail@plt+0x1cb0>
   12b60:	mov	r4, r0
   12b64:	mov	r7, #0
   12b68:	movw	r1, #32516	; 0x7f04
   12b6c:	movt	r1, #1
   12b70:	mov	r0, #0
   12b74:	mov	r2, #5
   12b78:	bl	10ef4 <dcgettext@plt>
   12b7c:	mov	r2, r0
   12b80:	mov	r0, #0
   12b84:	mov	r1, #0
   12b88:	mov	r3, r4
   12b8c:	bl	10f6c <error@plt>
   12b90:	mov	r0, r4
   12b94:	bl	13c4c <__assert_fail@plt+0x2b90>
   12b98:	mov	r0, r7
   12b9c:	sub	sp, fp, #28
   12ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ba4:	push	{r4, sl, fp, lr}
   12ba8:	add	fp, sp, #8
   12bac:	mov	r4, r0
   12bb0:	ldr	r0, [r0]
   12bb4:	bl	13c4c <__assert_fail@plt+0x2b90>
   12bb8:	ldr	r0, [r4, #4]
   12bbc:	pop	{r4, sl, fp, lr}
   12bc0:	b	13c4c <__assert_fail@plt+0x2b90>
   12bc4:	ldr	r3, [r0]
   12bc8:	ldrb	ip, [r3, r1]
   12bcc:	mov	r3, #0
   12bd0:	cmp	ip, r2
   12bd4:	ldreq	r0, [r0, #4]
   12bd8:	ldrbeq	r0, [r0, r1]
   12bdc:	clzeq	r0, r0
   12be0:	lsreq	r3, r0, #5
   12be4:	mov	r0, r3
   12be8:	bx	lr
   12bec:	push	{r4, r5, fp, lr}
   12bf0:	add	fp, sp, #8
   12bf4:	mov	ip, r0
   12bf8:	ldr	r0, [r0, #8]
   12bfc:	sub	r4, r0, #1
   12c00:	mov	r0, #0
   12c04:	cmp	r4, r1
   12c08:	popls	{r4, r5, fp, pc}
   12c0c:	ldr	lr, [ip]
   12c10:	ldrb	r4, [lr, r1]
   12c14:	cmp	r4, r2
   12c18:	bne	12c4c <__assert_fail@plt+0x1b90>
   12c1c:	add	r4, lr, r1
   12c20:	ldrb	r4, [r4, #1]
   12c24:	cmp	r4, #93	; 0x5d
   12c28:	bne	12c4c <__assert_fail@plt+0x1b90>
   12c2c:	ldr	r4, [ip, #4]
   12c30:	ldrb	r5, [r4, r1]
   12c34:	cmp	r5, #0
   12c38:	bne	12c4c <__assert_fail@plt+0x1b90>
   12c3c:	add	r4, r4, r1
   12c40:	ldrb	r4, [r4, #1]
   12c44:	cmp	r4, #0
   12c48:	beq	12c64 <__assert_fail@plt+0x1ba8>
   12c4c:	add	r1, r1, #1
   12c50:	ldr	r4, [ip, #8]
   12c54:	sub	r4, r4, #1
   12c58:	cmp	r1, r4
   12c5c:	bcc	12c10 <__assert_fail@plt+0x1b54>
   12c60:	pop	{r4, r5, fp, pc}
   12c64:	str	r1, [r3]
   12c68:	mov	r0, #1
   12c6c:	pop	{r4, r5, fp, pc}
   12c70:	push	{r4, r5, fp, lr}
   12c74:	add	fp, sp, #8
   12c78:	mov	r4, r0
   12c7c:	mov	r0, r1
   12c80:	mov	r1, r2
   12c84:	bl	13270 <__assert_fail@plt+0x21b4>
   12c88:	mov	r5, r0
   12c8c:	mov	r0, #0
   12c90:	movw	r1, #9999	; 0x270f
   12c94:	cmp	r5, r1
   12c98:	popeq	{r4, r5, fp, pc}
   12c9c:	mov	r0, #24
   12ca0:	bl	15e18 <__assert_fail@plt+0x4d5c>
   12ca4:	mov	r1, #0
   12ca8:	mov	r2, #2
   12cac:	str	r2, [r0]
   12cb0:	stmib	r0, {r1, r5}
   12cb4:	ldr	r1, [r4, #4]
   12cb8:	cmp	r1, #0
   12cbc:	beq	12cd0 <__assert_fail@plt+0x1c14>
   12cc0:	str	r0, [r1, #4]
   12cc4:	str	r0, [r4, #4]
   12cc8:	mov	r0, #1
   12ccc:	pop	{r4, r5, fp, pc}
   12cd0:	movw	r0, #32573	; 0x7f3d
   12cd4:	movt	r0, #1
   12cd8:	movw	r1, #31800	; 0x7c38
   12cdc:	movt	r1, #1
   12ce0:	movw	r3, #32584	; 0x7f48
   12ce4:	movt	r3, #1
   12ce8:	movw	r2, #701	; 0x2bd
   12cec:	bl	110bc <__assert_fail@plt>
   12cf0:	push	{r4, r5, r6, sl, fp, lr}
   12cf4:	add	fp, sp, #16
   12cf8:	mov	r5, r1
   12cfc:	mov	r4, r0
   12d00:	mov	r2, #42	; 0x2a
   12d04:	bl	12bc4 <__assert_fail@plt+0x1b08>
   12d08:	cmp	r0, #0
   12d0c:	beq	12d64 <__assert_fail@plt+0x1ca8>
   12d10:	add	r0, r5, #1
   12d14:	ldr	r6, [r4, #8]
   12d18:	cmp	r0, r6
   12d1c:	bcs	12d64 <__assert_fail@plt+0x1ca8>
   12d20:	mov	r5, r0
   12d24:	ldr	r0, [r4]
   12d28:	ldrb	r0, [r0, r5]
   12d2c:	bl	132d0 <__assert_fail@plt+0x2214>
   12d30:	sub	r0, r0, #48	; 0x30
   12d34:	cmp	r0, #9
   12d38:	bhi	12d50 <__assert_fail@plt+0x1c94>
   12d3c:	ldr	r0, [r4, #4]
   12d40:	ldrb	r1, [r0, r5]
   12d44:	add	r0, r5, #1
   12d48:	cmp	r1, #0
   12d4c:	beq	12d18 <__assert_fail@plt+0x1c5c>
   12d50:	mov	r0, r4
   12d54:	mov	r1, r5
   12d58:	mov	r2, #93	; 0x5d
   12d5c:	pop	{r4, r5, r6, sl, fp, lr}
   12d60:	b	12bc4 <__assert_fail@plt+0x1b08>
   12d64:	mov	r0, #0
   12d68:	pop	{r4, r5, r6, sl, fp, pc}
   12d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d70:	add	fp, sp, #28
   12d74:	sub	sp, sp, #12
   12d78:	mov	r4, r1
   12d7c:	mov	r5, r0
   12d80:	add	r0, r1, #1
   12d84:	mov	r1, #4
   12d88:	bl	15eb4 <__assert_fail@plt+0x4df8>
   12d8c:	mov	sl, r0
   12d90:	cmp	r4, #0
   12d94:	beq	12e9c <__assert_fail@plt+0x1de0>
   12d98:	movw	r7, #32717	; 0x7fcd
   12d9c:	movt	r7, #1
   12da0:	add	r9, sp, #7
   12da4:	mov	r6, sl
   12da8:	ldrb	r8, [r5]
   12dac:	sub	r0, r8, #7
   12db0:	cmp	r0, #6
   12db4:	bhi	12de8 <__assert_fail@plt+0x1d2c>
   12db8:	add	r1, pc, #0
   12dbc:	ldr	pc, [r1, r0, lsl #2]
   12dc0:	ldrdeq	r2, [r1], -ip
   12dc4:	andeq	r2, r1, ip, lsr #28
   12dc8:	andeq	r2, r1, r8, lsr lr
   12dcc:	andeq	r2, r1, r4, asr #28
   12dd0:	andeq	r2, r1, r0, asr lr
   12dd4:	andeq	r2, r1, ip, asr lr
   12dd8:	andeq	r2, r1, r8, ror #28
   12ddc:	movw	r1, #32719	; 0x7fcf
   12de0:	movt	r1, #1
   12de4:	b	12e84 <__assert_fail@plt+0x1dc8>
   12de8:	cmp	r8, #92	; 0x5c
   12dec:	mov	r1, r7
   12df0:	beq	12e84 <__assert_fail@plt+0x1dc8>
   12df4:	bl	10fb4 <__ctype_b_loc@plt>
   12df8:	ldr	r0, [r0]
   12dfc:	add	r0, r0, r8, lsl #1
   12e00:	ldrb	r0, [r0, #1]
   12e04:	tst	r0, #64	; 0x40
   12e08:	bne	12e74 <__assert_fail@plt+0x1db8>
   12e0c:	str	r8, [sp]
   12e10:	mov	r0, r9
   12e14:	mov	r1, #1
   12e18:	mov	r2, #5
   12e1c:	movw	r3, #32740	; 0x7fe4
   12e20:	movt	r3, #1
   12e24:	bl	10ff0 <__sprintf_chk@plt>
   12e28:	b	12e80 <__assert_fail@plt+0x1dc4>
   12e2c:	movw	r1, #32722	; 0x7fd2
   12e30:	movt	r1, #1
   12e34:	b	12e84 <__assert_fail@plt+0x1dc8>
   12e38:	movw	r1, #32734	; 0x7fde
   12e3c:	movt	r1, #1
   12e40:	b	12e84 <__assert_fail@plt+0x1dc8>
   12e44:	movw	r1, #32728	; 0x7fd8
   12e48:	movt	r1, #1
   12e4c:	b	12e84 <__assert_fail@plt+0x1dc8>
   12e50:	movw	r1, #32737	; 0x7fe1
   12e54:	movt	r1, #1
   12e58:	b	12e84 <__assert_fail@plt+0x1dc8>
   12e5c:	movw	r1, #32725	; 0x7fd5
   12e60:	movt	r1, #1
   12e64:	b	12e84 <__assert_fail@plt+0x1dc8>
   12e68:	movw	r1, #32731	; 0x7fdb
   12e6c:	movt	r1, #1
   12e70:	b	12e84 <__assert_fail@plt+0x1dc8>
   12e74:	mov	r0, #0
   12e78:	strb	r0, [sp, #8]
   12e7c:	strb	r8, [sp, #7]
   12e80:	mov	r1, r9
   12e84:	mov	r0, r6
   12e88:	bl	10ee8 <stpcpy@plt>
   12e8c:	mov	r6, r0
   12e90:	subs	r4, r4, #1
   12e94:	add	r5, r5, #1
   12e98:	bne	12da8 <__assert_fail@plt+0x1cec>
   12e9c:	mov	r0, sl
   12ea0:	sub	sp, fp, #28
   12ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ea8:	push	{r4, r5, fp, lr}
   12eac:	add	fp, sp, #8
   12eb0:	mov	r4, r0
   12eb4:	mov	r0, #0
   12eb8:	cmp	r2, #1
   12ebc:	popne	{r4, r5, fp, pc}
   12ec0:	mov	r5, r1
   12ec4:	mov	r0, #24
   12ec8:	bl	15e18 <__assert_fail@plt+0x4d5c>
   12ecc:	mov	r1, #0
   12ed0:	mov	r2, #3
   12ed4:	str	r2, [r0]
   12ed8:	str	r1, [r0, #4]
   12edc:	ldrb	r1, [r5]
   12ee0:	strb	r1, [r0, #8]
   12ee4:	ldr	r1, [r4, #4]
   12ee8:	cmp	r1, #0
   12eec:	beq	12f00 <__assert_fail@plt+0x1e44>
   12ef0:	str	r0, [r1, #4]
   12ef4:	str	r0, [r4, #4]
   12ef8:	mov	r0, #1
   12efc:	pop	{r4, r5, fp, pc}
   12f00:	movw	r0, #32573	; 0x7f3d
   12f04:	movt	r0, #1
   12f08:	movw	r1, #31800	; 0x7c38
   12f0c:	movt	r1, #1
   12f10:	movw	r3, #32746	; 0x7fea
   12f14:	movt	r3, #1
   12f18:	movw	r2, #743	; 0x2e7
   12f1c:	bl	110bc <__assert_fail@plt>
   12f20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f24:	add	fp, sp, #28
   12f28:	sub	sp, sp, #12
   12f2c:	mov	r4, r1
   12f30:	add	r1, r1, #1
   12f34:	ldr	sl, [r0, #8]
   12f38:	cmp	r1, sl
   12f3c:	bcs	130b0 <__assert_fail@plt+0x1ff4>
   12f40:	mov	r8, r3
   12f44:	mov	r9, r2
   12f48:	mov	r7, r0
   12f4c:	mov	r2, #42	; 0x2a
   12f50:	bl	12bc4 <__assert_fail@plt+0x1b08>
   12f54:	mov	r1, r0
   12f58:	mvn	r0, #0
   12f5c:	cmp	r1, #0
   12f60:	beq	12fb4 <__assert_fail@plt+0x1ef8>
   12f64:	add	r5, r4, #2
   12f68:	cmp	r5, sl
   12f6c:	bcs	12fb4 <__assert_fail@plt+0x1ef8>
   12f70:	ldr	ip, [fp, #8]
   12f74:	ldr	r1, [r7, #4]
   12f78:	add	r1, r1, r5
   12f7c:	mov	r6, #0
   12f80:	ldrb	r2, [r1, r6]
   12f84:	cmp	r2, #0
   12f88:	bne	12fb4 <__assert_fail@plt+0x1ef8>
   12f8c:	ldr	r2, [r7]
   12f90:	add	r3, r2, r4
   12f94:	add	r3, r3, r6
   12f98:	ldrb	r3, [r3, #2]
   12f9c:	cmp	r3, #93	; 0x5d
   12fa0:	beq	12fbc <__assert_fail@plt+0x1f00>
   12fa4:	add	r6, r6, #1
   12fa8:	add	r2, r5, r6
   12fac:	cmp	r2, sl
   12fb0:	bcc	12f80 <__assert_fail@plt+0x1ec4>
   12fb4:	sub	sp, fp, #28
   12fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fbc:	ldrb	r0, [r2, r4]
   12fc0:	strb	r0, [r9]
   12fc4:	cmp	r6, #0
   12fc8:	beq	13060 <__assert_fail@plt+0x1fa4>
   12fcc:	mov	sl, ip
   12fd0:	ldr	r9, [r7]
   12fd4:	mov	r7, r9
   12fd8:	ldrb	r0, [r7, r5]!
   12fdc:	mov	r1, #0
   12fe0:	str	r1, [sp]
   12fe4:	mov	r2, #10
   12fe8:	cmp	r0, #48	; 0x30
   12fec:	movweq	r2, #8
   12ff0:	add	r1, sp, #8
   12ff4:	mov	r0, r7
   12ff8:	mov	r3, r8
   12ffc:	bl	16214 <__assert_fail@plt+0x5158>
   13000:	cmp	r0, #0
   13004:	beq	13080 <__assert_fail@plt+0x1fc4>
   13008:	mov	r0, r7
   1300c:	mov	r1, r6
   13010:	bl	12d6c <__assert_fail@plt+0x1cb0>
   13014:	mov	r4, r0
   13018:	movw	r1, #32932	; 0x80a4
   1301c:	movt	r1, #1
   13020:	mov	r0, #0
   13024:	mov	r2, #5
   13028:	bl	10ef4 <dcgettext@plt>
   1302c:	mov	r5, r0
   13030:	mov	r0, r4
   13034:	bl	154ac <__assert_fail@plt+0x43f0>
   13038:	mov	r3, r0
   1303c:	mov	r0, #0
   13040:	mov	r1, #0
   13044:	mov	r2, r5
   13048:	bl	10f6c <error@plt>
   1304c:	mov	r0, r4
   13050:	bl	13c4c <__assert_fail@plt+0x2b90>
   13054:	mvn	r0, #1
   13058:	sub	sp, fp, #28
   1305c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13060:	mov	r0, #0
   13064:	str	r0, [r8]
   13068:	str	r0, [r8, #4]
   1306c:	add	r0, r5, r6
   13070:	str	r0, [ip]
   13074:	mov	r0, #0
   13078:	sub	sp, fp, #28
   1307c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13080:	ldrd	r0, [r8]
   13084:	and	r0, r0, r1
   13088:	cmn	r0, #1
   1308c:	beq	13008 <__assert_fail@plt+0x1f4c>
   13090:	add	r0, r9, r4
   13094:	ldr	r1, [sp, #8]
   13098:	sub	r1, r1, #2
   1309c:	sub	r0, r1, r0
   130a0:	cmp	r0, r6
   130a4:	bne	13008 <__assert_fail@plt+0x1f4c>
   130a8:	mov	ip, sl
   130ac:	b	1306c <__assert_fail@plt+0x1fb0>
   130b0:	movw	r0, #32813	; 0x802d
   130b4:	movt	r0, #1
   130b8:	movw	r1, #31800	; 0x7c38
   130bc:	movt	r1, #1
   130c0:	movw	r3, #32837	; 0x8045
   130c4:	movt	r3, #1
   130c8:	mov	r2, #784	; 0x310
   130cc:	bl	110bc <__assert_fail@plt>
   130d0:	push	{r4, r5, r6, r7, fp, lr}
   130d4:	add	fp, sp, #16
   130d8:	mov	r7, r3
   130dc:	mov	r6, r2
   130e0:	mov	r5, r1
   130e4:	mov	r4, r0
   130e8:	mov	r0, #24
   130ec:	bl	15e18 <__assert_fail@plt+0x4d5c>
   130f0:	mov	r1, #0
   130f4:	mov	r2, #4
   130f8:	str	r2, [r0]
   130fc:	str	r1, [r0, #4]
   13100:	strb	r5, [r0, #8]
   13104:	strd	r6, [r0, #16]
   13108:	ldr	r1, [r4, #4]
   1310c:	cmp	r1, #0
   13110:	strne	r0, [r1, #4]
   13114:	strne	r0, [r4, #4]
   13118:	popne	{r4, r5, r6, r7, fp, pc}
   1311c:	movw	r0, #32573	; 0x7f3d
   13120:	movt	r0, #1
   13124:	movw	r1, #31800	; 0x7c38
   13128:	movt	r1, #1
   1312c:	movw	r3, #32975	; 0x80cf
   13130:	movt	r3, #1
   13134:	movw	r2, #721	; 0x2d1
   13138:	bl	110bc <__assert_fail@plt>
   1313c:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   13140:	add	fp, sp, #24
   13144:	sub	sp, sp, #8
   13148:	mov	r4, r2
   1314c:	mov	r6, r1
   13150:	cmp	r2, r1
   13154:	bcs	131b4 <__assert_fail@plt+0x20f8>
   13158:	mov	r0, r6
   1315c:	bl	132d4 <__assert_fail@plt+0x2218>
   13160:	mov	r5, r0
   13164:	mov	r0, r4
   13168:	bl	132d4 <__assert_fail@plt+0x2218>
   1316c:	mov	r4, r0
   13170:	mov	r8, #0
   13174:	movw	r1, #33043	; 0x8113
   13178:	movt	r1, #1
   1317c:	mov	r0, #0
   13180:	mov	r2, #5
   13184:	bl	10ef4 <dcgettext@plt>
   13188:	mov	r2, r0
   1318c:	str	r4, [sp]
   13190:	mov	r0, #0
   13194:	mov	r1, #0
   13198:	mov	r3, r5
   1319c:	bl	10f6c <error@plt>
   131a0:	mov	r0, r5
   131a4:	bl	13c4c <__assert_fail@plt+0x2b90>
   131a8:	mov	r0, r4
   131ac:	bl	13c4c <__assert_fail@plt+0x2b90>
   131b0:	b	131e8 <__assert_fail@plt+0x212c>
   131b4:	mov	r5, r0
   131b8:	mov	r0, #24
   131bc:	bl	15e18 <__assert_fail@plt+0x4d5c>
   131c0:	mov	r9, #0
   131c4:	mov	r8, #1
   131c8:	strd	r8, [r0]
   131cc:	strb	r6, [r0, #8]
   131d0:	strb	r4, [r0, #9]
   131d4:	ldr	r1, [r5, #4]
   131d8:	cmp	r1, #0
   131dc:	beq	131f4 <__assert_fail@plt+0x2138>
   131e0:	str	r0, [r1, #4]
   131e4:	str	r0, [r5, #4]
   131e8:	mov	r0, r8
   131ec:	sub	sp, fp, #24
   131f0:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   131f4:	movw	r0, #32573	; 0x7f3d
   131f8:	movt	r0, #1
   131fc:	movw	r1, #31800	; 0x7c38
   13200:	movt	r1, #1
   13204:	movw	r3, #33110	; 0x8156
   13208:	movt	r3, #1
   1320c:	movw	r2, #679	; 0x2a7
   13210:	bl	110bc <__assert_fail@plt>
   13214:	push	{r4, r5, fp, lr}
   13218:	add	fp, sp, #8
   1321c:	mov	r5, r1
   13220:	mov	r4, r0
   13224:	mov	r0, #24
   13228:	bl	15e18 <__assert_fail@plt+0x4d5c>
   1322c:	mov	r1, #0
   13230:	str	r1, [r0]
   13234:	str	r1, [r0, #4]
   13238:	strb	r5, [r0, #8]
   1323c:	ldr	r1, [r4, #4]
   13240:	cmp	r1, #0
   13244:	strne	r0, [r1, #4]
   13248:	strne	r0, [r4, #4]
   1324c:	popne	{r4, r5, fp, pc}
   13250:	movw	r0, #32573	; 0x7f3d
   13254:	movt	r0, #1
   13258:	movw	r1, #31800	; 0x7c38
   1325c:	movt	r1, #1
   13260:	movw	r3, #33179	; 0x819b
   13264:	movt	r3, #1
   13268:	movw	r2, #649	; 0x289
   1326c:	bl	110bc <__assert_fail@plt>
   13270:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13274:	add	fp, sp, #24
   13278:	mov	r5, r1
   1327c:	mov	r6, r0
   13280:	mov	r4, #0
   13284:	movw	r8, #34512	; 0x86d0
   13288:	movt	r8, #1
   1328c:	ldr	r7, [r8, r4, lsl #2]
   13290:	mov	r0, r6
   13294:	mov	r1, r7
   13298:	mov	r2, r5
   1329c:	bl	11098 <strncmp@plt>
   132a0:	cmp	r0, #0
   132a4:	bne	132b8 <__assert_fail@plt+0x21fc>
   132a8:	mov	r0, r7
   132ac:	bl	10fcc <strlen@plt>
   132b0:	cmp	r0, r5
   132b4:	beq	132c8 <__assert_fail@plt+0x220c>
   132b8:	add	r4, r4, #1
   132bc:	cmp	r4, #12
   132c0:	bcc	1328c <__assert_fail@plt+0x21d0>
   132c4:	movw	r4, #9999	; 0x270f
   132c8:	mov	r0, r4
   132cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   132d0:	bx	lr
   132d4:	push	{r4, r5, fp, lr}
   132d8:	add	fp, sp, #8
   132dc:	sub	sp, sp, #8
   132e0:	mov	r5, r0
   132e4:	mov	r0, #5
   132e8:	bl	15e18 <__assert_fail@plt+0x4d5c>
   132ec:	mov	r4, r0
   132f0:	bl	10fb4 <__ctype_b_loc@plt>
   132f4:	ldr	r0, [r0]
   132f8:	add	r0, r0, r5, lsl #1
   132fc:	ldrb	r0, [r0, #1]
   13300:	tst	r0, #64	; 0x40
   13304:	bne	13328 <__assert_fail@plt+0x226c>
   13308:	str	r5, [sp]
   1330c:	movw	r3, #32740	; 0x7fe4
   13310:	movt	r3, #1
   13314:	mov	r0, r4
   13318:	mov	r1, #1
   1331c:	mov	r2, #5
   13320:	bl	10ff0 <__sprintf_chk@plt>
   13324:	b	13334 <__assert_fail@plt+0x2278>
   13328:	mov	r0, #0
   1332c:	strb	r0, [r4, #1]
   13330:	strb	r5, [r4]
   13334:	mov	r0, r4
   13338:	sub	sp, fp, #8
   1333c:	pop	{r4, r5, fp, pc}
   13340:	push	{r4, sl, fp, lr}
   13344:	add	fp, sp, #8
   13348:	mov	r4, r0
   1334c:	bl	137e4 <__assert_fail@plt+0x2728>
   13350:	movw	r0, #37209	; 0x9159
   13354:	movt	r0, #2
   13358:	ldrb	r0, [r0]
   1335c:	cmp	r0, #1
   13360:	popne	{r4, sl, fp, pc}
   13364:	mov	r0, r4
   13368:	bl	139b0 <__assert_fail@plt+0x28f4>
   1336c:	asr	r1, r0, #31
   13370:	strd	r0, [r4, #16]
   13374:	pop	{r4, sl, fp, pc}
   13378:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   1337c:	add	fp, sp, #24
   13380:	mov	r5, r3
   13384:	mov	r6, r2
   13388:	mov	r4, r0
   1338c:	bl	137e4 <__assert_fail@plt+0x2728>
   13390:	mov	r0, r4
   13394:	ldr	r1, [r0, #16]!
   13398:	ldr	r2, [r0, #4]
   1339c:	subs	r3, r6, r1
   133a0:	sbcs	r3, r5, r2
   133a4:	bcc	133cc <__assert_fail@plt+0x2310>
   133a8:	ldr	r3, [r4, #24]
   133ac:	cmp	r3, #1
   133b0:	popne	{r4, r5, r6, r8, r9, sl, fp, pc}
   133b4:	subs	r8, r6, r1
   133b8:	sbc	r9, r5, r2
   133bc:	ldr	r1, [r4, #28]
   133c0:	strd	r8, [r1, #16]
   133c4:	str	r6, [r0]
   133c8:	str	r5, [r0, #4]
   133cc:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   133d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133d4:	add	fp, sp, #28
   133d8:	sub	sp, sp, #52	; 0x34
   133dc:	str	r0, [sp, #40]	; 0x28
   133e0:	movw	r0, #37209	; 0x9159
   133e4:	movt	r0, #2
   133e8:	ldrb	r0, [r0]
   133ec:	cmp	r0, #0
   133f0:	bne	13604 <__assert_fail@plt+0x2548>
   133f4:	mov	r7, r1
   133f8:	ldrb	r0, [r1, #33]	; 0x21
   133fc:	cmp	r0, #0
   13400:	beq	13604 <__assert_fail@plt+0x2548>
   13404:	mov	r1, r7
   13408:	ldr	r0, [r1, #16]!
   1340c:	str	r0, [sp, #16]
   13410:	ldr	r0, [r1, #-12]
   13414:	str	r0, [sp, #20]
   13418:	str	r1, [sp, #28]
   1341c:	ldr	r0, [r1, #4]
   13420:	str	r0, [sp, #8]
   13424:	ldr	r1, [sp, #40]	; 0x28
   13428:	ldr	r0, [r1, #16]!
   1342c:	str	r0, [sp, #4]
   13430:	ldr	r0, [r1, #-12]
   13434:	str	r0, [sp, #12]
   13438:	str	r1, [sp, #24]
   1343c:	ldr	r0, [r1, #4]
   13440:	str	r0, [sp]
   13444:	bl	10fb4 <__ctype_b_loc@plt>
   13448:	ldr	r0, [r0]
   1344c:	mov	r1, #0
   13450:	mov	r9, #0
   13454:	mov	sl, #0
   13458:	add	r2, r0, r1
   1345c:	ldrh	r2, [r2]
   13460:	ubfx	r3, r2, #9, #1
   13464:	add	sl, sl, r3
   13468:	ubfx	r2, r2, #8, #1
   1346c:	add	r9, r9, r2
   13470:	add	r1, r1, #2
   13474:	cmp	r1, #512	; 0x200
   13478:	bne	13458 <__assert_fail@plt+0x239c>
   1347c:	mvn	r0, #1
   13480:	ldr	r1, [sp, #40]	; 0x28
   13484:	str	r0, [r1, #8]!
   13488:	mvn	r2, #0
   1348c:	str	r1, [sp, #36]	; 0x24
   13490:	str	r2, [r1, #4]
   13494:	mov	r1, r7
   13498:	str	r0, [r1, #8]!
   1349c:	str	r1, [sp, #32]
   134a0:	str	r2, [r1, #4]
   134a4:	mov	r4, #1
   134a8:	mov	r8, #1
   134ac:	ldr	r0, [sp, #40]	; 0x28
   134b0:	sub	r1, fp, #32
   134b4:	bl	1224c <__assert_fail@plt+0x1190>
   134b8:	mov	r6, r0
   134bc:	mov	r5, r7
   134c0:	mov	r0, r7
   134c4:	sub	r1, fp, #36	; 0x24
   134c8:	bl	1224c <__assert_fail@plt+0x1190>
   134cc:	mov	r7, r0
   134d0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   134d4:	tst	r4, #1
   134d8:	cmpne	r0, #2
   134dc:	bne	134ec <__assert_fail@plt+0x2430>
   134e0:	cmp	r0, #2
   134e4:	bne	13500 <__assert_fail@plt+0x2444>
   134e8:	b	13560 <__assert_fail@plt+0x24a4>
   134ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   134f0:	subs	r0, r0, #2
   134f4:	movwne	r0, #1
   134f8:	tst	r8, r0
   134fc:	beq	1360c <__assert_fail@plt+0x2550>
   13500:	ldr	r0, [sp, #40]	; 0x28
   13504:	bl	124d4 <__assert_fail@plt+0x1418>
   13508:	mov	r0, r5
   1350c:	bl	124d4 <__assert_fail@plt+0x1418>
   13510:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13514:	cmp	r0, #1
   13518:	mov	r0, sl
   1351c:	moveq	r0, r9
   13520:	sub	r0, r0, #1
   13524:	ldr	r4, [sp, #24]
   13528:	ldrd	r2, [r4]
   1352c:	subs	r0, r2, r0
   13530:	sbc	r1, r3, #0
   13534:	strd	r0, [r4]
   13538:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1353c:	cmp	r0, #1
   13540:	mov	r0, sl
   13544:	moveq	r0, r9
   13548:	sub	r0, r0, #1
   1354c:	ldr	r4, [sp, #28]
   13550:	ldrd	r2, [r4]
   13554:	subs	r0, r2, r0
   13558:	sbc	r1, r3, #0
   1355c:	strd	r0, [r4]
   13560:	mvn	r0, #1
   13564:	adds	r0, r0, #1
   13568:	mvn	r1, #0
   1356c:	adc	r1, r1, #0
   13570:	cmn	r7, #1
   13574:	mov	r7, r5
   13578:	ldrne	r2, [sp, #32]
   1357c:	ldrdne	r2, [r2]
   13580:	eorne	r3, r3, r1
   13584:	eorne	r2, r2, r0
   13588:	orrne	r2, r2, r3
   1358c:	clzne	r2, r2
   13590:	lsrne	r4, r2, #5
   13594:	ldrne	r2, [sp, #36]	; 0x24
   13598:	ldrdne	r2, [r2]
   1359c:	eorne	r1, r3, r1
   135a0:	eorne	r0, r2, r0
   135a4:	orrne	r0, r0, r1
   135a8:	clzne	r0, r0
   135ac:	lsrne	r8, r0, #5
   135b0:	cmnne	r6, #1
   135b4:	bne	134ac <__assert_fail@plt+0x23f0>
   135b8:	ldr	r0, [sp, #24]
   135bc:	ldrd	r0, [r0]
   135c0:	ldr	r2, [sp, #4]
   135c4:	subs	r0, r2, r0
   135c8:	ldr	r0, [sp]
   135cc:	sbcs	r0, r0, r1
   135d0:	bcc	13630 <__assert_fail@plt+0x2574>
   135d4:	ldr	r0, [sp, #28]
   135d8:	ldrd	r0, [r0]
   135dc:	ldr	r2, [sp, #16]
   135e0:	subs	r0, r2, r0
   135e4:	ldr	r0, [sp, #8]
   135e8:	sbcs	r0, r0, r1
   135ec:	bcc	13630 <__assert_fail@plt+0x2574>
   135f0:	ldr	r0, [sp, #40]	; 0x28
   135f4:	ldr	r1, [sp, #12]
   135f8:	str	r1, [r0, #4]
   135fc:	ldr	r0, [sp, #20]
   13600:	str	r0, [r7, #4]
   13604:	sub	sp, fp, #28
   13608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1360c:	movw	r1, #33835	; 0x842b
   13610:	movt	r1, #1
   13614:	mov	r0, #0
   13618:	mov	r2, #5
   1361c:	bl	10ef4 <dcgettext@plt>
   13620:	mov	r2, r0
   13624:	mov	r0, #1
   13628:	mov	r1, #0
   1362c:	bl	10f6c <error@plt>
   13630:	movw	r0, #33883	; 0x845b
   13634:	movt	r0, #1
   13638:	movw	r1, #31800	; 0x7c38
   1363c:	movt	r1, #1
   13640:	movw	r3, #33936	; 0x8490
   13644:	movt	r3, #1
   13648:	movw	r2, #1224	; 0x4c8
   1364c:	bl	110bc <__assert_fail@plt>
   13650:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13654:	add	fp, sp, #24
   13658:	mov	r4, r0
   1365c:	movw	r0, #37213	; 0x915d
   13660:	movt	r0, #2
   13664:	ldrb	r0, [r0]
   13668:	cmp	r0, #0
   1366c:	beq	136f8 <__assert_fail@plt+0x263c>
   13670:	mov	ip, r1
   13674:	mov	r5, r1
   13678:	ldr	r0, [r5, #16]!
   1367c:	ldr	r1, [r5, #4]
   13680:	ldr	r8, [r4, #16]!
   13684:	ldr	r7, [r4, #4]
   13688:	subs	r2, r0, r8
   1368c:	sbcs	r2, r1, r7
   13690:	bcs	13718 <__assert_fail@plt+0x265c>
   13694:	orrs	r2, r0, r1
   13698:	beq	13738 <__assert_fail@plt+0x267c>
   1369c:	ldr	r2, [ip, #4]
   136a0:	ldr	r3, [r2]
   136a4:	cmp	r3, #4
   136a8:	bhi	136f4 <__assert_fail@plt+0x2638>
   136ac:	add	r6, pc, #0
   136b0:	ldr	pc, [r6, r3, lsl #2]
   136b4:	andeq	r3, r1, r8, asr #13
   136b8:	ldrdeq	r3, [r1], -r0
   136bc:	andeq	r3, r1, r8, asr r7
   136c0:	strdeq	r3, [r1], -r4
   136c4:	andeq	r3, r1, r8, asr #13
   136c8:	add	lr, r2, #8
   136cc:	b	136d4 <__assert_fail@plt+0x2618>
   136d0:	add	lr, r2, #9
   136d4:	subs	r2, r8, r0
   136d8:	sbc	r3, r7, r1
   136dc:	ldrb	r1, [lr]
   136e0:	mov	r0, ip
   136e4:	bl	130d0 <__assert_fail@plt+0x2014>
   136e8:	ldrd	r0, [r4]
   136ec:	strd	r0, [r5]
   136f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   136f4:	bl	110a4 <abort@plt>
   136f8:	movw	r0, #33392	; 0x8270
   136fc:	movt	r0, #1
   13700:	movw	r1, #31800	; 0x7c38
   13704:	movt	r1, #1
   13708:	movw	r3, #34003	; 0x84d3
   1370c:	movt	r3, #1
   13710:	movw	r2, #1377	; 0x561
   13714:	bl	110bc <__assert_fail@plt>
   13718:	movw	r0, #34069	; 0x8515
   1371c:	movt	r0, #1
   13720:	movw	r1, #31800	; 0x7c38
   13724:	movt	r1, #1
   13728:	movw	r3, #34003	; 0x84d3
   1372c:	movt	r3, #1
   13730:	movw	r2, #1378	; 0x562
   13734:	bl	110bc <__assert_fail@plt>
   13738:	movw	r0, #34093	; 0x852d
   1373c:	movt	r0, #1
   13740:	movw	r1, #31800	; 0x7c38
   13744:	movt	r1, #1
   13748:	movw	r3, #34003	; 0x84d3
   1374c:	movt	r3, #1
   13750:	movw	r2, #1379	; 0x563
   13754:	bl	110bc <__assert_fail@plt>
   13758:	movw	r1, #34108	; 0x853c
   1375c:	movt	r1, #1
   13760:	mov	r0, #0
   13764:	mov	r2, #5
   13768:	bl	10ef4 <dcgettext@plt>
   1376c:	mov	r2, r0
   13770:	mov	r0, #1
   13774:	mov	r1, #0
   13778:	bl	10f6c <error@plt>
   1377c:	push	{r4, r5, r6, sl, fp, lr}
   13780:	add	fp, sp, #16
   13784:	mov	r4, r0
   13788:	mvn	r1, #0
   1378c:	mvn	r0, #1
   13790:	strd	r0, [r4, #8]
   13794:	mov	r6, #0
   13798:	mov	r0, r4
   1379c:	mov	r1, #0
   137a0:	bl	1224c <__assert_fail@plt+0x1190>
   137a4:	cmn	r0, #1
   137a8:	beq	137d0 <__assert_fail@plt+0x2714>
   137ac:	mov	r5, r0
   137b0:	mov	r0, r4
   137b4:	mov	r1, #0
   137b8:	bl	1224c <__assert_fail@plt+0x1190>
   137bc:	cmn	r0, #1
   137c0:	beq	137d8 <__assert_fail@plt+0x271c>
   137c4:	cmp	r0, r5
   137c8:	beq	137b0 <__assert_fail@plt+0x26f4>
   137cc:	mov	r6, #0
   137d0:	mov	r0, r6
   137d4:	pop	{r4, r5, r6, sl, fp, pc}
   137d8:	mov	r6, #1
   137dc:	mov	r0, r6
   137e0:	pop	{r4, r5, r6, sl, fp, pc}
   137e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137e8:	add	fp, sp, #28
   137ec:	sub	sp, sp, #4
   137f0:	mov	r7, r0
   137f4:	mov	r2, #0
   137f8:	str	r2, [r0, #24]
   137fc:	strb	r2, [r0, #34]	; 0x22
   13800:	strh	r2, [r0, #32]
   13804:	ldr	r8, [r0]
   13808:	mov	r9, #0
   1380c:	ldr	r8, [r8, #4]
   13810:	cmp	r8, #0
   13814:	beq	1397c <__assert_fail@plt+0x28c0>
   13818:	ldr	r0, [r8]
   1381c:	cmp	r0, #4
   13820:	bhi	1398c <__assert_fail@plt+0x28d0>
   13824:	mov	r5, #0
   13828:	mov	r4, #1
   1382c:	add	r1, pc, #0
   13830:	ldr	pc, [r1, r0, lsl #2]
   13834:	andeq	r3, r1, r0, lsr r9
   13838:	andeq	r3, r1, r8, asr #16
   1383c:	muleq	r1, r0, r8
   13840:	andeq	r3, r1, r8, ror #17
   13844:	andeq	r3, r1, r8, ror #16
   13848:	ldrb	r0, [r8, #8]
   1384c:	ldrb	r1, [r8, #9]
   13850:	cmp	r1, r0
   13854:	bcc	13990 <__assert_fail@plt+0x28d4>
   13858:	add	r1, r1, #1
   1385c:	sub	r4, r1, r0
   13860:	asr	r5, r4, #31
   13864:	b	13930 <__assert_fail@plt+0x2874>
   13868:	ldrd	r4, [r8, #16]
   1386c:	orrs	r0, r4, r5
   13870:	bne	13930 <__assert_fail@plt+0x2874>
   13874:	str	r8, [r7, #28]
   13878:	ldr	r0, [r7, #24]
   1387c:	add	r0, r0, #1
   13880:	str	r0, [r7, #24]
   13884:	mov	r4, #0
   13888:	mov	r5, #0
   1388c:	b	13930 <__assert_fail@plt+0x2874>
   13890:	str	r2, [sp]
   13894:	mov	r0, #1
   13898:	strb	r0, [r7, #33]	; 0x21
   1389c:	ldr	sl, [r8, #8]
   138a0:	mov	r6, #0
   138a4:	mov	r4, #0
   138a8:	mov	r5, #0
   138ac:	uxtb	r1, r6
   138b0:	mov	r0, sl
   138b4:	bl	13a30 <__assert_fail@plt+0x2974>
   138b8:	adds	r4, r4, r0
   138bc:	adc	r5, r5, #0
   138c0:	add	r6, r6, #1
   138c4:	cmp	r6, #256	; 0x100
   138c8:	bne	138ac <__assert_fail@plt+0x27f0>
   138cc:	cmp	sl, #6
   138d0:	beq	1392c <__assert_fail@plt+0x2870>
   138d4:	cmp	sl, #10
   138d8:	ldr	r2, [sp]
   138dc:	movne	r0, #1
   138e0:	strbne	r0, [r7, #34]	; 0x22
   138e4:	b	13930 <__assert_fail@plt+0x2874>
   138e8:	str	r2, [sp]
   138ec:	mov	sl, r7
   138f0:	ldrb	r7, [r8, #8]
   138f4:	mov	r6, #0
   138f8:	mov	r4, #0
   138fc:	mov	r5, #0
   13900:	uxtb	r1, r6
   13904:	mov	r0, r7
   13908:	bl	13af4 <__assert_fail@plt+0x2a38>
   1390c:	adds	r4, r4, r0
   13910:	adc	r5, r5, #0
   13914:	add	r6, r6, #1
   13918:	cmp	r6, #256	; 0x100
   1391c:	bne	13900 <__assert_fail@plt+0x2844>
   13920:	mov	r7, sl
   13924:	mov	r0, #1
   13928:	strb	r0, [sl, #32]
   1392c:	ldr	r2, [sp]
   13930:	adds	r0, r4, r2
   13934:	adc	r1, r5, r9
   13938:	subs	r2, r0, r2
   1393c:	sbcs	r2, r1, r9
   13940:	bcc	13958 <__assert_fail@plt+0x289c>
   13944:	and	r2, r0, r1
   13948:	cmn	r2, #1
   1394c:	mov	r2, r0
   13950:	mov	r9, r1
   13954:	bne	1380c <__assert_fail@plt+0x2750>
   13958:	movw	r1, #33808	; 0x8410
   1395c:	movt	r1, #1
   13960:	mov	r0, #0
   13964:	mov	r2, #5
   13968:	bl	10ef4 <dcgettext@plt>
   1396c:	mov	r2, r0
   13970:	mov	r0, #1
   13974:	mov	r1, #0
   13978:	bl	10f6c <error@plt>
   1397c:	str	r2, [r7, #16]
   13980:	str	r9, [r7, #20]
   13984:	sub	sp, fp, #28
   13988:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1398c:	bl	110a4 <abort@plt>
   13990:	movw	r0, #33722	; 0x83ba
   13994:	movt	r0, #1
   13998:	movw	r1, #31800	; 0x7c38
   1399c:	movt	r1, #1
   139a0:	movw	r3, #33768	; 0x83e8
   139a4:	movt	r3, #1
   139a8:	movw	r2, #1265	; 0x4f1
   139ac:	bl	110bc <__assert_fail@plt>
   139b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   139b4:	add	fp, sp, #24
   139b8:	sub	sp, sp, #256	; 0x100
   139bc:	mov	r4, r0
   139c0:	mov	r5, sp
   139c4:	mov	r6, #256	; 0x100
   139c8:	mov	r0, r5
   139cc:	mov	r1, #0
   139d0:	mov	r2, #256	; 0x100
   139d4:	bl	11008 <memset@plt>
   139d8:	mvn	r1, #0
   139dc:	mvn	r0, #1
   139e0:	strd	r0, [r4, #8]
   139e4:	mov	r0, r4
   139e8:	mov	r1, #0
   139ec:	bl	1224c <__assert_fail@plt+0x1190>
   139f0:	cmn	r0, #1
   139f4:	beq	13a24 <__assert_fail@plt+0x2968>
   139f8:	mov	r6, #256	; 0x100
   139fc:	mov	r7, #1
   13a00:	ldrb	r1, [r5, r0]
   13a04:	strb	r7, [r5, r0]
   13a08:	eor	r0, r1, #1
   13a0c:	sub	r6, r6, r0
   13a10:	mov	r0, r4
   13a14:	mov	r1, #0
   13a18:	bl	1224c <__assert_fail@plt+0x1190>
   13a1c:	cmn	r0, #1
   13a20:	bne	13a00 <__assert_fail@plt+0x2944>
   13a24:	mov	r0, r6
   13a28:	sub	sp, fp, #24
   13a2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13a30:	push	{r4, r5, fp, lr}
   13a34:	add	fp, sp, #8
   13a38:	cmp	r0, #11
   13a3c:	bhi	13af0 <__assert_fail@plt+0x2a34>
   13a40:	mov	r4, r1
   13a44:	mov	r5, #8
   13a48:	add	r1, pc, #0
   13a4c:	ldr	pc, [r1, r0, lsl #2]
   13a50:	ldrdeq	r3, [r1], -r4
   13a54:	andeq	r3, r1, r0, lsl #21
   13a58:	muleq	r1, r8, sl
   13a5c:	andeq	r3, r1, r8, lsr #21
   13a60:	muleq	r1, r0, sl
   13a64:			; <UNDEFINED> instruction: 0x00013ab8
   13a68:	andeq	r3, r1, r0, asr #21
   13a6c:			; <UNDEFINED> instruction: 0x00013ab0
   13a70:	andeq	r3, r1, r8, asr #21
   13a74:	andeq	r3, r1, r0, lsr #21
   13a78:	ldrdeq	r3, [r1], -r0
   13a7c:	andeq	r3, r1, r8, lsl #21
   13a80:	mov	r5, #1024	; 0x400
   13a84:	b	13ad4 <__assert_fail@plt+0x2a18>
   13a88:	mov	r5, #4096	; 0x1000
   13a8c:	b	13ad4 <__assert_fail@plt+0x2a18>
   13a90:	mov	r5, #2048	; 0x800
   13a94:	b	13ad4 <__assert_fail@plt+0x2a18>
   13a98:	mov	r5, #1
   13a9c:	b	13ad4 <__assert_fail@plt+0x2a18>
   13aa0:	mov	r5, #8192	; 0x2000
   13aa4:	b	13ad4 <__assert_fail@plt+0x2a18>
   13aa8:	mov	r5, #2
   13aac:	b	13ad4 <__assert_fail@plt+0x2a18>
   13ab0:	mov	r5, #16384	; 0x4000
   13ab4:	b	13ad4 <__assert_fail@plt+0x2a18>
   13ab8:	mov	r5, #32768	; 0x8000
   13abc:	b	13ad4 <__assert_fail@plt+0x2a18>
   13ac0:	mov	r5, #512	; 0x200
   13ac4:	b	13ad4 <__assert_fail@plt+0x2a18>
   13ac8:	mov	r5, #4
   13acc:	b	13ad4 <__assert_fail@plt+0x2a18>
   13ad0:	mov	r5, #256	; 0x100
   13ad4:	bl	10fb4 <__ctype_b_loc@plt>
   13ad8:	ldr	r0, [r0]
   13adc:	add	r0, r0, r4, lsl #1
   13ae0:	ldrh	r0, [r0]
   13ae4:	ands	r0, r0, r5
   13ae8:	movwne	r0, #1
   13aec:	pop	{r4, r5, fp, pc}
   13af0:	bl	110a4 <abort@plt>
   13af4:	sub	r0, r0, r1
   13af8:	clz	r0, r0
   13afc:	lsr	r0, r0, #5
   13b00:	bx	lr
   13b04:	movw	r1, #46176	; 0xb460
   13b08:	movt	r1, #2
   13b0c:	str	r0, [r1]
   13b10:	bx	lr
   13b14:	movw	r1, #46180	; 0xb464
   13b18:	movt	r1, #2
   13b1c:	strb	r0, [r1]
   13b20:	bx	lr
   13b24:	push	{r4, r5, r6, sl, fp, lr}
   13b28:	add	fp, sp, #16
   13b2c:	sub	sp, sp, #8
   13b30:	movw	r0, #37204	; 0x9154
   13b34:	movt	r0, #2
   13b38:	ldr	r0, [r0]
   13b3c:	bl	16b54 <__assert_fail@plt+0x5a98>
   13b40:	cmp	r0, #0
   13b44:	beq	13b6c <__assert_fail@plt+0x2ab0>
   13b48:	movw	r0, #46180	; 0xb464
   13b4c:	movt	r0, #2
   13b50:	ldrb	r0, [r0]
   13b54:	cmp	r0, #0
   13b58:	beq	13b8c <__assert_fail@plt+0x2ad0>
   13b5c:	bl	10fe4 <__errno_location@plt>
   13b60:	ldr	r0, [r0]
   13b64:	cmp	r0, #32
   13b68:	bne	13b8c <__assert_fail@plt+0x2ad0>
   13b6c:	movw	r0, #37192	; 0x9148
   13b70:	movt	r0, #2
   13b74:	ldr	r0, [r0]
   13b78:	bl	16b54 <__assert_fail@plt+0x5a98>
   13b7c:	cmp	r0, #0
   13b80:	subeq	sp, fp, #16
   13b84:	popeq	{r4, r5, r6, sl, fp, pc}
   13b88:	b	13bfc <__assert_fail@plt+0x2b40>
   13b8c:	movw	r1, #31762	; 0x7c12
   13b90:	movt	r1, #1
   13b94:	mov	r0, #0
   13b98:	mov	r2, #5
   13b9c:	bl	10ef4 <dcgettext@plt>
   13ba0:	mov	r4, r0
   13ba4:	movw	r0, #46176	; 0xb460
   13ba8:	movt	r0, #2
   13bac:	ldr	r6, [r0]
   13bb0:	bl	10fe4 <__errno_location@plt>
   13bb4:	ldr	r5, [r0]
   13bb8:	cmp	r6, #0
   13bbc:	bne	13bd8 <__assert_fail@plt+0x2b1c>
   13bc0:	movw	r2, #34579	; 0x8713
   13bc4:	movt	r2, #1
   13bc8:	mov	r0, #0
   13bcc:	mov	r1, r5
   13bd0:	mov	r3, r4
   13bd4:	b	13bf8 <__assert_fail@plt+0x2b3c>
   13bd8:	mov	r0, r6
   13bdc:	bl	1535c <__assert_fail@plt+0x42a0>
   13be0:	mov	r3, r0
   13be4:	str	r4, [sp]
   13be8:	movw	r2, #34575	; 0x870f
   13bec:	movt	r2, #1
   13bf0:	mov	r0, #0
   13bf4:	mov	r1, r5
   13bf8:	bl	10f6c <error@plt>
   13bfc:	movw	r0, #37108	; 0x90f4
   13c00:	movt	r0, #2
   13c04:	ldr	r0, [r0]
   13c08:	bl	10ea0 <_exit@plt>
   13c0c:	b	10e70 <posix_fadvise64@plt>
   13c10:	cmp	r0, #0
   13c14:	bxeq	lr
   13c18:	push	{r4, sl, fp, lr}
   13c1c:	add	fp, sp, #8
   13c20:	sub	sp, sp, #16
   13c24:	mov	r4, r1
   13c28:	bl	11020 <fileno@plt>
   13c2c:	mov	r1, #0
   13c30:	str	r1, [sp]
   13c34:	stmib	sp, {r1, r4}
   13c38:	mov	r2, #0
   13c3c:	mov	r3, #0
   13c40:	bl	13c0c <__assert_fail@plt+0x2b50>
   13c44:	sub	sp, fp, #8
   13c48:	pop	{r4, sl, fp, pc}
   13c4c:	push	{r4, r5, r6, sl, fp, lr}
   13c50:	add	fp, sp, #16
   13c54:	mov	r4, r0
   13c58:	bl	10fe4 <__errno_location@plt>
   13c5c:	mov	r5, r0
   13c60:	ldr	r6, [r0]
   13c64:	mov	r0, r4
   13c68:	bl	10e94 <free@plt>
   13c6c:	str	r6, [r5]
   13c70:	pop	{r4, r5, r6, sl, fp, pc}
   13c74:	push	{r4, r5, fp, lr}
   13c78:	add	fp, sp, #8
   13c7c:	cmp	r0, #0
   13c80:	beq	13d14 <__assert_fail@plt+0x2c58>
   13c84:	mov	r4, r0
   13c88:	mov	r1, #47	; 0x2f
   13c8c:	bl	11074 <strrchr@plt>
   13c90:	cmp	r0, #0
   13c94:	mov	r5, r4
   13c98:	addne	r5, r0, #1
   13c9c:	sub	r0, r5, r4
   13ca0:	cmp	r0, #7
   13ca4:	blt	13cf8 <__assert_fail@plt+0x2c3c>
   13ca8:	sub	r0, r5, #7
   13cac:	movw	r1, #34638	; 0x874e
   13cb0:	movt	r1, #1
   13cb4:	mov	r2, #7
   13cb8:	bl	11098 <strncmp@plt>
   13cbc:	cmp	r0, #0
   13cc0:	bne	13cf8 <__assert_fail@plt+0x2c3c>
   13cc4:	movw	r1, #34646	; 0x8756
   13cc8:	movt	r1, #1
   13ccc:	mov	r0, r5
   13cd0:	mov	r2, #3
   13cd4:	bl	11098 <strncmp@plt>
   13cd8:	cmp	r0, #0
   13cdc:	beq	13ce8 <__assert_fail@plt+0x2c2c>
   13ce0:	mov	r4, r5
   13ce4:	b	13cf8 <__assert_fail@plt+0x2c3c>
   13ce8:	add	r4, r5, #3
   13cec:	movw	r0, #37176	; 0x9138
   13cf0:	movt	r0, #2
   13cf4:	str	r4, [r0]
   13cf8:	movw	r0, #37180	; 0x913c
   13cfc:	movt	r0, #2
   13d00:	str	r4, [r0]
   13d04:	movw	r0, #46184	; 0xb468
   13d08:	movt	r0, #2
   13d0c:	str	r4, [r0]
   13d10:	pop	{r4, r5, fp, pc}
   13d14:	movw	r0, #37192	; 0x9148
   13d18:	movt	r0, #2
   13d1c:	ldr	r3, [r0]
   13d20:	movw	r0, #34582	; 0x8716
   13d24:	movt	r0, #1
   13d28:	mov	r1, #55	; 0x37
   13d2c:	mov	r2, #1
   13d30:	bl	10f24 <fwrite@plt>
   13d34:	bl	110a4 <abort@plt>
   13d38:	push	{r4, r5, r6, sl, fp, lr}
   13d3c:	add	fp, sp, #16
   13d40:	mov	r4, r0
   13d44:	movw	r0, #46192	; 0xb470
   13d48:	movt	r0, #2
   13d4c:	cmp	r4, #0
   13d50:	moveq	r4, r0
   13d54:	bl	10fe4 <__errno_location@plt>
   13d58:	mov	r5, r0
   13d5c:	ldr	r6, [r0]
   13d60:	mov	r0, r4
   13d64:	mov	r1, #48	; 0x30
   13d68:	bl	1610c <__assert_fail@plt+0x5050>
   13d6c:	str	r6, [r5]
   13d70:	pop	{r4, r5, r6, sl, fp, pc}
   13d74:	movw	r1, #46192	; 0xb470
   13d78:	movt	r1, #2
   13d7c:	cmp	r0, #0
   13d80:	movne	r1, r0
   13d84:	ldr	r0, [r1]
   13d88:	bx	lr
   13d8c:	movw	r2, #46192	; 0xb470
   13d90:	movt	r2, #2
   13d94:	cmp	r0, #0
   13d98:	movne	r2, r0
   13d9c:	str	r1, [r2]
   13da0:	bx	lr
   13da4:	movw	r3, #46192	; 0xb470
   13da8:	movt	r3, #2
   13dac:	cmp	r0, #0
   13db0:	movne	r3, r0
   13db4:	ubfx	r0, r1, #5, #3
   13db8:	add	r0, r3, r0, lsl #2
   13dbc:	ldr	r3, [r0, #8]
   13dc0:	and	r1, r1, #31
   13dc4:	eor	r2, r2, r3, lsr r1
   13dc8:	and	r2, r2, #1
   13dcc:	eor	r2, r3, r2, lsl r1
   13dd0:	str	r2, [r0, #8]
   13dd4:	mov	r0, #1
   13dd8:	and	r0, r0, r3, lsr r1
   13ddc:	bx	lr
   13de0:	movw	r2, #46192	; 0xb470
   13de4:	movt	r2, #2
   13de8:	cmp	r0, #0
   13dec:	movne	r2, r0
   13df0:	ldr	r0, [r2, #4]
   13df4:	str	r1, [r2, #4]
   13df8:	bx	lr
   13dfc:	movw	r3, #46192	; 0xb470
   13e00:	movt	r3, #2
   13e04:	cmp	r0, #0
   13e08:	movne	r3, r0
   13e0c:	mov	r0, #10
   13e10:	str	r0, [r3]
   13e14:	cmp	r1, #0
   13e18:	cmpne	r2, #0
   13e1c:	bne	13e2c <__assert_fail@plt+0x2d70>
   13e20:	push	{fp, lr}
   13e24:	mov	fp, sp
   13e28:	bl	110a4 <abort@plt>
   13e2c:	str	r1, [r3, #40]	; 0x28
   13e30:	str	r2, [r3, #44]	; 0x2c
   13e34:	bx	lr
   13e38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e3c:	add	fp, sp, #28
   13e40:	sub	sp, sp, #20
   13e44:	mov	r8, r3
   13e48:	mov	r9, r2
   13e4c:	mov	sl, r1
   13e50:	mov	r7, r0
   13e54:	ldr	r0, [fp, #8]
   13e58:	movw	r5, #46192	; 0xb470
   13e5c:	movt	r5, #2
   13e60:	cmp	r0, #0
   13e64:	movne	r5, r0
   13e68:	bl	10fe4 <__errno_location@plt>
   13e6c:	mov	r4, r0
   13e70:	ldm	r5, {r0, r1}
   13e74:	ldr	r2, [r5, #40]	; 0x28
   13e78:	ldr	r3, [r5, #44]	; 0x2c
   13e7c:	ldr	r6, [r4]
   13e80:	add	r5, r5, #8
   13e84:	stm	sp, {r0, r1, r5}
   13e88:	str	r2, [sp, #12]
   13e8c:	str	r3, [sp, #16]
   13e90:	mov	r0, r7
   13e94:	mov	r1, sl
   13e98:	mov	r2, r9
   13e9c:	mov	r3, r8
   13ea0:	bl	13eb0 <__assert_fail@plt+0x2df4>
   13ea4:	str	r6, [r4]
   13ea8:	sub	sp, fp, #28
   13eac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13eb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13eb4:	add	fp, sp, #28
   13eb8:	sub	sp, sp, #156	; 0x9c
   13ebc:	mov	r9, r3
   13ec0:	str	r2, [fp, #-84]	; 0xffffffac
   13ec4:	mov	r6, r1
   13ec8:	mov	r7, r0
   13ecc:	ldr	r0, [fp, #12]
   13ed0:	and	r1, r0, #4
   13ed4:	str	r1, [sp, #32]
   13ed8:	and	r1, r0, #1
   13edc:	str	r1, [sp, #36]	; 0x24
   13ee0:	ubfx	sl, r0, #1, #1
   13ee4:	bl	10f3c <__ctype_get_mb_cur_max@plt>
   13ee8:	str	r0, [sp, #40]	; 0x28
   13eec:	ldr	r0, [fp, #24]
   13ef0:	str	r0, [sp, #76]	; 0x4c
   13ef4:	ldr	r0, [fp, #20]
   13ef8:	str	r0, [sp, #68]	; 0x44
   13efc:	ldr	r0, [fp, #8]
   13f00:	str	r0, [fp, #-60]	; 0xffffffc4
   13f04:	mov	r0, #0
   13f08:	str	r0, [sp, #72]	; 0x48
   13f0c:	mov	r0, #0
   13f10:	str	r0, [sp, #92]	; 0x5c
   13f14:	mov	r0, #0
   13f18:	str	r0, [fp, #-72]	; 0xffffffb8
   13f1c:	mov	r0, #0
   13f20:	mov	r1, #0
   13f24:	str	r1, [fp, #-56]	; 0xffffffc8
   13f28:	mov	r1, #0
   13f2c:	str	r1, [sp, #56]	; 0x38
   13f30:	mov	r5, #1
   13f34:	str	r7, [sp, #80]	; 0x50
   13f38:	mov	r4, r6
   13f3c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13f40:	cmp	r6, #10
   13f44:	bhi	14eac <__assert_fail@plt+0x3df0>
   13f48:	add	r1, pc, #20
   13f4c:	mov	r8, #0
   13f50:	mov	r2, #1
   13f54:	mov	r3, #0
   13f58:	ldr	ip, [fp, #-84]	; 0xffffffac
   13f5c:	mov	lr, r9
   13f60:	ldr	pc, [r1, r6, lsl #2]
   13f64:	andeq	r4, r1, ip, lsr r0
   13f68:	andeq	r4, r1, ip, rrx
   13f6c:	andeq	r4, r1, ip, lsr #32
   13f70:	andeq	r4, r1, r4, lsr #32
   13f74:	andeq	r4, r1, r0, rrx
   13f78:	andeq	r4, r1, r0, asr #1
   13f7c:	andeq	r4, r1, ip, asr #32
   13f80:	andeq	r4, r1, ip, lsl r1
   13f84:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   13f88:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   13f8c:			; <UNDEFINED> instruction: 0x00013fb8
   13f90:	movw	r0, #34728	; 0x87a8
   13f94:	movt	r0, #1
   13f98:	mov	r1, r6
   13f9c:	bl	154b8 <__assert_fail@plt+0x43fc>
   13fa0:	str	r0, [sp, #68]	; 0x44
   13fa4:	movw	r0, #32444	; 0x7ebc
   13fa8:	movt	r0, #1
   13fac:	mov	r1, r6
   13fb0:	bl	154b8 <__assert_fail@plt+0x43fc>
   13fb4:	str	r0, [sp, #76]	; 0x4c
   13fb8:	mov	r8, #0
   13fbc:	tst	sl, #1
   13fc0:	bne	13ff8 <__assert_fail@plt+0x2f3c>
   13fc4:	ldr	r0, [sp, #68]	; 0x44
   13fc8:	ldrb	r0, [r0]
   13fcc:	cmp	r0, #0
   13fd0:	beq	13ff8 <__assert_fail@plt+0x2f3c>
   13fd4:	ldr	r1, [sp, #68]	; 0x44
   13fd8:	add	r1, r1, #1
   13fdc:	mov	r8, #0
   13fe0:	cmp	r8, r4
   13fe4:	strbcc	r0, [r7, r8]
   13fe8:	ldrb	r0, [r1, r8]
   13fec:	add	r8, r8, #1
   13ff0:	cmp	r0, #0
   13ff4:	bne	13fe0 <__assert_fail@plt+0x2f24>
   13ff8:	ldr	r6, [sp, #76]	; 0x4c
   13ffc:	mov	r0, r6
   14000:	bl	10fcc <strlen@plt>
   14004:	str	r0, [fp, #-72]	; 0xffffffb8
   14008:	str	r6, [sp, #92]	; 0x5c
   1400c:	mov	r2, #1
   14010:	mov	r3, sl
   14014:	ldr	ip, [fp, #-84]	; 0xffffffac
   14018:	mov	lr, r9
   1401c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14020:	b	1411c <__assert_fail@plt+0x3060>
   14024:	mov	r0, #1
   14028:	b	1406c <__assert_fail@plt+0x2fb0>
   1402c:	tst	sl, #1
   14030:	bne	1406c <__assert_fail@plt+0x2fb0>
   14034:	mov	r2, r0
   14038:	b	14094 <__assert_fail@plt+0x2fd8>
   1403c:	mov	r6, #0
   14040:	mov	r8, #0
   14044:	mov	r2, r0
   14048:	b	14118 <__assert_fail@plt+0x305c>
   1404c:	mov	r0, #1
   14050:	str	r0, [fp, #-72]	; 0xffffffb8
   14054:	mov	r8, #0
   14058:	mov	r6, #5
   1405c:	b	140d8 <__assert_fail@plt+0x301c>
   14060:	mov	r2, #1
   14064:	tst	sl, #1
   14068:	beq	14094 <__assert_fail@plt+0x2fd8>
   1406c:	mov	r1, #1
   14070:	str	r1, [fp, #-72]	; 0xffffffb8
   14074:	mov	r8, #0
   14078:	mov	r6, #2
   1407c:	movw	r1, #32444	; 0x7ebc
   14080:	movt	r1, #1
   14084:	str	r1, [sp, #92]	; 0x5c
   14088:	mov	r2, r0
   1408c:	mov	r3, #1
   14090:	b	1411c <__assert_fail@plt+0x3060>
   14094:	mov	r8, #1
   14098:	mov	r6, #2
   1409c:	cmp	r4, #0
   140a0:	movne	r0, #39	; 0x27
   140a4:	strbne	r0, [r7]
   140a8:	movw	r0, #32444	; 0x7ebc
   140ac:	movt	r0, #1
   140b0:	str	r0, [sp, #92]	; 0x5c
   140b4:	mov	r0, #1
   140b8:	str	r0, [fp, #-72]	; 0xffffffb8
   140bc:	b	14118 <__assert_fail@plt+0x305c>
   140c0:	mov	r6, #5
   140c4:	tst	sl, #1
   140c8:	beq	140f0 <__assert_fail@plt+0x3034>
   140cc:	mov	r0, #1
   140d0:	str	r0, [fp, #-72]	; 0xffffffb8
   140d4:	mov	r8, #0
   140d8:	movw	r0, #34726	; 0x87a6
   140dc:	movt	r0, #1
   140e0:	str	r0, [sp, #92]	; 0x5c
   140e4:	mov	r2, #1
   140e8:	mov	r3, #1
   140ec:	b	1411c <__assert_fail@plt+0x3060>
   140f0:	cmp	r4, #0
   140f4:	movne	r0, #34	; 0x22
   140f8:	strbne	r0, [r7]
   140fc:	mov	r8, #1
   14100:	movw	r0, #34726	; 0x87a6
   14104:	movt	r0, #1
   14108:	str	r0, [sp, #92]	; 0x5c
   1410c:	mov	r0, #1
   14110:	str	r0, [fp, #-72]	; 0xffffffb8
   14114:	mov	r2, #1
   14118:	mov	r3, #0
   1411c:	ldr	r0, [fp, #16]
   14120:	cmp	r0, #0
   14124:	movwne	r0, #1
   14128:	and	r0, r0, r3
   1412c:	str	r0, [fp, #-88]	; 0xffffffa8
   14130:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14134:	cmp	r0, #0
   14138:	movwne	r0, #1
   1413c:	and	r1, r0, r3
   14140:	and	r1, r2, r1
   14144:	str	r1, [sp, #48]	; 0x30
   14148:	str	r6, [fp, #-60]	; 0xffffffc4
   1414c:	subs	r6, r6, #2
   14150:	clz	r1, r6
   14154:	lsr	r1, r1, #5
   14158:	and	r1, r1, r3
   1415c:	str	r1, [sp, #60]	; 0x3c
   14160:	str	r6, [fp, #-80]	; 0xffffffb0
   14164:	mov	r1, r6
   14168:	movwne	r1, #1
   1416c:	str	r3, [fp, #-76]	; 0xffffffb4
   14170:	eor	r3, r3, #1
   14174:	str	r3, [sp, #88]	; 0x58
   14178:	orr	r3, r1, r3
   1417c:	str	r3, [sp, #64]	; 0x40
   14180:	and	r1, r1, r2
   14184:	str	r1, [fp, #-68]	; 0xffffffbc
   14188:	and	r0, r0, r1
   1418c:	str	r0, [fp, #-64]	; 0xffffffc0
   14190:	str	r2, [sp, #84]	; 0x54
   14194:	eor	r0, r2, #1
   14198:	str	r0, [sp, #52]	; 0x34
   1419c:	mov	r6, #0
   141a0:	cmn	lr, #1
   141a4:	beq	141b4 <__assert_fail@plt+0x30f8>
   141a8:	cmp	r6, lr
   141ac:	bne	141c0 <__assert_fail@plt+0x3104>
   141b0:	b	14d2c <__assert_fail@plt+0x3c70>
   141b4:	ldrb	r0, [ip, r6]
   141b8:	cmp	r0, #0
   141bc:	beq	14d2c <__assert_fail@plt+0x3c70>
   141c0:	str	r5, [fp, #-48]	; 0xffffffd0
   141c4:	mov	sl, #0
   141c8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   141cc:	cmp	r0, #0
   141d0:	beq	14204 <__assert_fail@plt+0x3148>
   141d4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   141d8:	add	r5, r6, r0
   141dc:	cmp	r0, #2
   141e0:	bcc	141fc <__assert_fail@plt+0x3140>
   141e4:	cmn	lr, #1
   141e8:	bne	141fc <__assert_fail@plt+0x3140>
   141ec:	mov	r0, ip
   141f0:	bl	10fcc <strlen@plt>
   141f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   141f8:	mov	lr, r0
   141fc:	cmp	r5, lr
   14200:	bls	14210 <__assert_fail@plt+0x3154>
   14204:	mov	r0, #0
   14208:	str	r0, [fp, #-52]	; 0xffffffcc
   1420c:	b	1425c <__assert_fail@plt+0x31a0>
   14210:	mov	r5, r4
   14214:	mov	r4, lr
   14218:	add	r0, ip, r6
   1421c:	ldr	r1, [sp, #92]	; 0x5c
   14220:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14224:	bl	10edc <memcmp@plt>
   14228:	cmp	r0, #0
   1422c:	mov	r1, r0
   14230:	movwne	r1, #1
   14234:	ldr	r2, [sp, #88]	; 0x58
   14238:	orr	r1, r1, r2
   1423c:	tst	r1, #1
   14240:	beq	14df0 <__assert_fail@plt+0x3d34>
   14244:	clz	r0, r0
   14248:	lsr	r0, r0, #5
   1424c:	str	r0, [fp, #-52]	; 0xffffffcc
   14250:	ldr	ip, [fp, #-84]	; 0xffffffac
   14254:	mov	lr, r4
   14258:	mov	r4, r5
   1425c:	ldrb	r5, [ip, r6]
   14260:	cmp	r5, #126	; 0x7e
   14264:	bhi	14620 <__assert_fail@plt+0x3564>
   14268:	mov	r9, #1
   1426c:	mov	r2, #110	; 0x6e
   14270:	mov	r0, #97	; 0x61
   14274:	add	r3, pc, #4
   14278:	mov	r1, #0
   1427c:	ldr	pc, [r3, r5, lsl #2]
   14280:	andeq	r4, r1, r8, lsl r5
   14284:	andeq	r4, r1, r0, lsr #12
   14288:	andeq	r4, r1, r0, lsr #12
   1428c:	andeq	r4, r1, r0, lsr #12
   14290:	andeq	r4, r1, r0, lsr #12
   14294:	andeq	r4, r1, r0, lsr #12
   14298:	andeq	r4, r1, r0, lsr #12
   1429c:	andeq	r4, r1, r4, ror #13
   142a0:	strdeq	r4, [r1], -r8
   142a4:	strdeq	r4, [r1], -r0
   142a8:	andeq	r4, r1, r4, lsl #10
   142ac:	andeq	r4, r1, r8, lsl #11
   142b0:	andeq	r4, r1, r8, ror #9
   142b4:	andeq	r4, r1, r0, lsl #10
   142b8:	andeq	r4, r1, r0, lsr #12
   142bc:	andeq	r4, r1, r0, lsr #12
   142c0:	andeq	r4, r1, r0, lsr #12
   142c4:	andeq	r4, r1, r0, lsr #12
   142c8:	andeq	r4, r1, r0, lsr #12
   142cc:	andeq	r4, r1, r0, lsr #12
   142d0:	andeq	r4, r1, r0, lsr #12
   142d4:	andeq	r4, r1, r0, lsr #12
   142d8:	andeq	r4, r1, r0, lsr #12
   142dc:	andeq	r4, r1, r0, lsr #12
   142e0:	andeq	r4, r1, r0, lsr #12
   142e4:	andeq	r4, r1, r0, lsr #12
   142e8:	andeq	r4, r1, r0, lsr #12
   142ec:	andeq	r4, r1, r0, lsr #12
   142f0:	andeq	r4, r1, r0, lsr #12
   142f4:	andeq	r4, r1, r0, lsr #12
   142f8:	andeq	r4, r1, r0, lsr #12
   142fc:	andeq	r4, r1, r0, lsr #12
   14300:	muleq	r1, r4, r6
   14304:	muleq	r1, r8, r6
   14308:	muleq	r1, r8, r6
   1430c:	muleq	r1, r0, r4
   14310:	muleq	r1, r8, r6
   14314:	andeq	r4, r1, ip, ror r4
   14318:	muleq	r1, r8, r6
   1431c:	muleq	r1, r0, r5
   14320:	muleq	r1, r8, r6
   14324:	muleq	r1, r8, r6
   14328:	muleq	r1, r8, r6
   1432c:	andeq	r4, r1, ip, ror r4
   14330:	andeq	r4, r1, ip, ror r4
   14334:	andeq	r4, r1, ip, ror r4
   14338:	andeq	r4, r1, ip, ror r4
   1433c:	andeq	r4, r1, ip, ror r4
   14340:	andeq	r4, r1, ip, ror r4
   14344:	andeq	r4, r1, ip, ror r4
   14348:	andeq	r4, r1, ip, ror r4
   1434c:	andeq	r4, r1, ip, ror r4
   14350:	andeq	r4, r1, ip, ror r4
   14354:	andeq	r4, r1, ip, ror r4
   14358:	andeq	r4, r1, ip, ror r4
   1435c:	andeq	r4, r1, ip, ror r4
   14360:	andeq	r4, r1, ip, ror r4
   14364:	andeq	r4, r1, ip, ror r4
   14368:	andeq	r4, r1, ip, ror r4
   1436c:	muleq	r1, r8, r6
   14370:	muleq	r1, r8, r6
   14374:	muleq	r1, r8, r6
   14378:	muleq	r1, r8, r6
   1437c:	andeq	r4, r1, r8, asr r5
   14380:	andeq	r4, r1, r0, lsr #12
   14384:	andeq	r4, r1, ip, ror r4
   14388:	andeq	r4, r1, ip, ror r4
   1438c:	andeq	r4, r1, ip, ror r4
   14390:	andeq	r4, r1, ip, ror r4
   14394:	andeq	r4, r1, ip, ror r4
   14398:	andeq	r4, r1, ip, ror r4
   1439c:	andeq	r4, r1, ip, ror r4
   143a0:	andeq	r4, r1, ip, ror r4
   143a4:	andeq	r4, r1, ip, ror r4
   143a8:	andeq	r4, r1, ip, ror r4
   143ac:	andeq	r4, r1, ip, ror r4
   143b0:	andeq	r4, r1, ip, ror r4
   143b4:	andeq	r4, r1, ip, ror r4
   143b8:	andeq	r4, r1, ip, ror r4
   143bc:	andeq	r4, r1, ip, ror r4
   143c0:	andeq	r4, r1, ip, ror r4
   143c4:	andeq	r4, r1, ip, ror r4
   143c8:	andeq	r4, r1, ip, ror r4
   143cc:	andeq	r4, r1, ip, ror r4
   143d0:	andeq	r4, r1, ip, ror r4
   143d4:	andeq	r4, r1, ip, ror r4
   143d8:	andeq	r4, r1, ip, ror r4
   143dc:	andeq	r4, r1, ip, ror r4
   143e0:	andeq	r4, r1, ip, ror r4
   143e4:	andeq	r4, r1, ip, ror r4
   143e8:	andeq	r4, r1, ip, ror r4
   143ec:	muleq	r1, r8, r6
   143f0:	andeq	r4, r1, r4, asr #9
   143f4:	andeq	r4, r1, ip, ror r4
   143f8:	muleq	r1, r8, r6
   143fc:	andeq	r4, r1, ip, ror r4
   14400:	muleq	r1, r8, r6
   14404:	andeq	r4, r1, ip, ror r4
   14408:	andeq	r4, r1, ip, ror r4
   1440c:	andeq	r4, r1, ip, ror r4
   14410:	andeq	r4, r1, ip, ror r4
   14414:	andeq	r4, r1, ip, ror r4
   14418:	andeq	r4, r1, ip, ror r4
   1441c:	andeq	r4, r1, ip, ror r4
   14420:	andeq	r4, r1, ip, ror r4
   14424:	andeq	r4, r1, ip, ror r4
   14428:	andeq	r4, r1, ip, ror r4
   1442c:	andeq	r4, r1, ip, ror r4
   14430:	andeq	r4, r1, ip, ror r4
   14434:	andeq	r4, r1, ip, ror r4
   14438:	andeq	r4, r1, ip, ror r4
   1443c:	andeq	r4, r1, ip, ror r4
   14440:	andeq	r4, r1, ip, ror r4
   14444:	andeq	r4, r1, ip, ror r4
   14448:	andeq	r4, r1, ip, ror r4
   1444c:	andeq	r4, r1, ip, ror r4
   14450:	andeq	r4, r1, ip, ror r4
   14454:	andeq	r4, r1, ip, ror r4
   14458:	andeq	r4, r1, ip, ror r4
   1445c:	andeq	r4, r1, ip, ror r4
   14460:	andeq	r4, r1, ip, ror r4
   14464:	andeq	r4, r1, ip, ror r4
   14468:	andeq	r4, r1, ip, ror r4
   1446c:	andeq	r4, r1, r4, lsr #9
   14470:	muleq	r1, r8, r6
   14474:	andeq	r4, r1, r4, lsr #9
   14478:	muleq	r1, r0, r4
   1447c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14480:	cmp	r0, #0
   14484:	beq	146f8 <__assert_fail@plt+0x363c>
   14488:	ldr	r0, [fp, #16]
   1448c:	b	146fc <__assert_fail@plt+0x3640>
   14490:	mov	r9, #0
   14494:	cmp	r6, #0
   14498:	beq	14694 <__assert_fail@plt+0x35d8>
   1449c:	mov	sl, #0
   144a0:	b	1447c <__assert_fail@plt+0x33c0>
   144a4:	mov	r9, #0
   144a8:	cmn	lr, #1
   144ac:	beq	14678 <__assert_fail@plt+0x35bc>
   144b0:	cmp	r6, #0
   144b4:	bne	1449c <__assert_fail@plt+0x33e0>
   144b8:	cmp	lr, #1
   144bc:	beq	14694 <__assert_fail@plt+0x35d8>
   144c0:	b	1449c <__assert_fail@plt+0x33e0>
   144c4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   144c8:	cmp	r0, #2
   144cc:	bne	146c0 <__assert_fail@plt+0x3604>
   144d0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   144d4:	tst	r0, #1
   144d8:	bne	14e08 <__assert_fail@plt+0x3d4c>
   144dc:	mov	sl, #0
   144e0:	mov	r0, #92	; 0x5c
   144e4:	b	146d4 <__assert_fail@plt+0x3618>
   144e8:	mov	r0, #102	; 0x66
   144ec:	b	146e4 <__assert_fail@plt+0x3628>
   144f0:	mov	r2, #116	; 0x74
   144f4:	b	14504 <__assert_fail@plt+0x3448>
   144f8:	mov	r0, #98	; 0x62
   144fc:	b	146e4 <__assert_fail@plt+0x3628>
   14500:	mov	r2, #114	; 0x72
   14504:	ldr	r0, [sp, #64]	; 0x40
   14508:	tst	r0, #1
   1450c:	mov	r0, r2
   14510:	bne	146e4 <__assert_fail@plt+0x3628>
   14514:	b	14e08 <__assert_fail@plt+0x3d4c>
   14518:	ldr	r0, [sp, #84]	; 0x54
   1451c:	tst	r0, #1
   14520:	beq	147d4 <__assert_fail@plt+0x3718>
   14524:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14528:	tst	r0, #1
   1452c:	bne	14e08 <__assert_fail@plt+0x3d4c>
   14530:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14534:	cmp	r0, #2
   14538:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1453c:	movwne	r0, #1
   14540:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14544:	orr	r0, r0, r2
   14548:	tst	r0, #1
   1454c:	beq	14bc8 <__assert_fail@plt+0x3b0c>
   14550:	mov	r0, r8
   14554:	b	14bfc <__assert_fail@plt+0x3b40>
   14558:	mov	sl, #0
   1455c:	mov	r5, #63	; 0x3f
   14560:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14564:	cmp	r0, #5
   14568:	beq	14988 <__assert_fail@plt+0x38cc>
   1456c:	cmp	r0, #2
   14570:	bne	14a28 <__assert_fail@plt+0x396c>
   14574:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14578:	tst	r0, #1
   1457c:	mov	r9, #0
   14580:	beq	1447c <__assert_fail@plt+0x33c0>
   14584:	b	14e08 <__assert_fail@plt+0x3d4c>
   14588:	mov	r0, #118	; 0x76
   1458c:	b	146e4 <__assert_fail@plt+0x3628>
   14590:	mov	r5, #39	; 0x27
   14594:	mov	r0, #1
   14598:	str	r0, [sp, #56]	; 0x38
   1459c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   145a0:	cmp	r0, #2
   145a4:	bne	147f4 <__assert_fail@plt+0x3738>
   145a8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   145ac:	tst	r0, #1
   145b0:	bne	14e08 <__assert_fail@plt+0x3d4c>
   145b4:	ldr	r2, [sp, #72]	; 0x48
   145b8:	cmp	r2, #0
   145bc:	mov	r0, r2
   145c0:	movwne	r0, #1
   145c4:	clz	r1, r4
   145c8:	lsr	r1, r1, #5
   145cc:	orrs	r0, r0, r1
   145d0:	moveq	r2, r4
   145d4:	str	r2, [sp, #72]	; 0x48
   145d8:	moveq	r4, r0
   145dc:	cmp	r8, r4
   145e0:	movcc	r0, #39	; 0x27
   145e4:	strbcc	r0, [r7, r8]
   145e8:	add	r0, r8, #1
   145ec:	cmp	r0, r4
   145f0:	movcc	r1, #92	; 0x5c
   145f4:	strbcc	r1, [r7, r0]
   145f8:	add	r0, r8, #2
   145fc:	cmp	r0, r4
   14600:	movcc	r1, #39	; 0x27
   14604:	strbcc	r1, [r7, r0]
   14608:	add	r8, r8, #3
   1460c:	mov	r0, #0
   14610:	str	r0, [fp, #-56]	; 0xffffffc8
   14614:	mov	sl, #0
   14618:	mov	r9, #1
   1461c:	b	1447c <__assert_fail@plt+0x33c0>
   14620:	str	r4, [sp, #24]
   14624:	ldr	r0, [sp, #40]	; 0x28
   14628:	cmp	r0, #1
   1462c:	bne	147fc <__assert_fail@plt+0x3740>
   14630:	str	lr, [sp, #28]
   14634:	bl	10fb4 <__ctype_b_loc@plt>
   14638:	ldr	ip, [fp, #-84]	; 0xffffffac
   1463c:	ldr	r0, [r0]
   14640:	add	r0, r0, r5, lsl #1
   14644:	ldrb	r0, [r0, #1]
   14648:	ubfx	r9, r0, #6, #1
   1464c:	mov	r1, #1
   14650:	ldr	r4, [sp, #24]
   14654:	ldr	r0, [sp, #52]	; 0x34
   14658:	orr	r0, r9, r0
   1465c:	mov	r2, r1
   14660:	cmp	r1, #1
   14664:	bhi	14a30 <__assert_fail@plt+0x3974>
   14668:	tst	r0, #1
   1466c:	beq	14a30 <__assert_fail@plt+0x3974>
   14670:	ldr	lr, [sp, #28]
   14674:	b	1447c <__assert_fail@plt+0x33c0>
   14678:	cmp	r6, #0
   1467c:	ldrbeq	r0, [ip, #1]
   14680:	cmpeq	r0, #0
   14684:	beq	14694 <__assert_fail@plt+0x35d8>
   14688:	mvn	lr, #0
   1468c:	mov	sl, #0
   14690:	b	1447c <__assert_fail@plt+0x33c0>
   14694:	mov	r1, #1
   14698:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1469c:	cmp	r0, #2
   146a0:	bne	146b8 <__assert_fail@plt+0x35fc>
   146a4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   146a8:	tst	r0, #1
   146ac:	mov	r9, r1
   146b0:	beq	1447c <__assert_fail@plt+0x33c0>
   146b4:	b	14e08 <__assert_fail@plt+0x3d4c>
   146b8:	mov	r9, r1
   146bc:	b	1447c <__assert_fail@plt+0x33c0>
   146c0:	mov	sl, #0
   146c4:	mov	r0, #92	; 0x5c
   146c8:	ldr	r1, [sp, #48]	; 0x30
   146cc:	cmp	r1, #0
   146d0:	beq	146e4 <__assert_fail@plt+0x3628>
   146d4:	mov	r9, #0
   146d8:	cmp	sl, #0
   146dc:	beq	14c94 <__assert_fail@plt+0x3bd8>
   146e0:	b	14cd0 <__assert_fail@plt+0x3c14>
   146e4:	mov	r9, #0
   146e8:	ldr	r1, [sp, #84]	; 0x54
   146ec:	tst	r1, #1
   146f0:	mov	sl, #0
   146f4:	bne	14734 <__assert_fail@plt+0x3678>
   146f8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   146fc:	cmp	r0, #0
   14700:	mov	r0, r5
   14704:	beq	14728 <__assert_fail@plt+0x366c>
   14708:	ubfx	r0, r5, #5, #3
   1470c:	ldr	r1, [fp, #16]
   14710:	ldr	r0, [r1, r0, lsl #2]
   14714:	and	r1, r5, #31
   14718:	mov	r2, #1
   1471c:	tst	r0, r2, lsl r1
   14720:	mov	r0, r5
   14724:	bne	14734 <__assert_fail@plt+0x3678>
   14728:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1472c:	cmp	r1, #0
   14730:	beq	14c8c <__assert_fail@plt+0x3bd0>
   14734:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14738:	tst	r1, #1
   1473c:	bne	14e08 <__assert_fail@plt+0x3d4c>
   14740:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14744:	cmp	r1, #2
   14748:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1474c:	movwne	r1, #1
   14750:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14754:	orr	r1, r1, r2
   14758:	tst	r1, #1
   1475c:	beq	14768 <__assert_fail@plt+0x36ac>
   14760:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14764:	b	147a4 <__assert_fail@plt+0x36e8>
   14768:	cmp	r8, r4
   1476c:	movcc	r1, #39	; 0x27
   14770:	strbcc	r1, [r7, r8]
   14774:	add	r1, r8, #1
   14778:	cmp	r1, r4
   1477c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14780:	movcc	r2, #36	; 0x24
   14784:	strbcc	r2, [r7, r1]
   14788:	add	r1, r8, #2
   1478c:	cmp	r1, r4
   14790:	movcc	r2, #39	; 0x27
   14794:	strbcc	r2, [r7, r1]
   14798:	add	r8, r8, #3
   1479c:	mov	r1, #1
   147a0:	str	r1, [fp, #-56]	; 0xffffffc8
   147a4:	cmp	r8, r4
   147a8:	movcc	r1, #92	; 0x5c
   147ac:	strbcc	r1, [r7, r8]
   147b0:	add	r8, r8, #1
   147b4:	cmp	r8, r4
   147b8:	strbcc	r0, [r7, r8]
   147bc:	and	r5, r5, r9
   147c0:	add	r8, r8, #1
   147c4:	add	r6, r6, #1
   147c8:	cmn	lr, #1
   147cc:	bne	141a8 <__assert_fail@plt+0x30ec>
   147d0:	b	141b4 <__assert_fail@plt+0x30f8>
   147d4:	mov	r9, #0
   147d8:	ldr	r0, [sp, #36]	; 0x24
   147dc:	cmp	r0, #0
   147e0:	mov	sl, #0
   147e4:	mov	r5, #0
   147e8:	beq	146f8 <__assert_fail@plt+0x363c>
   147ec:	ldr	r5, [fp, #-48]	; 0xffffffd0
   147f0:	b	147c4 <__assert_fail@plt+0x3708>
   147f4:	mov	r9, #1
   147f8:	b	1447c <__assert_fail@plt+0x33c0>
   147fc:	mov	r0, #0
   14800:	str	r0, [fp, #-36]	; 0xffffffdc
   14804:	str	r0, [fp, #-40]	; 0xffffffd8
   14808:	cmn	lr, #1
   1480c:	bne	14820 <__assert_fail@plt+0x3764>
   14810:	mov	r0, ip
   14814:	bl	10fcc <strlen@plt>
   14818:	ldr	ip, [fp, #-84]	; 0xffffffac
   1481c:	mov	lr, r0
   14820:	add	r0, ip, r6
   14824:	str	r0, [sp, #20]
   14828:	mov	r9, #1
   1482c:	mov	r7, #0
   14830:	sub	r4, fp, #40	; 0x28
   14834:	str	lr, [sp, #28]
   14838:	str	r7, [sp, #44]	; 0x2c
   1483c:	add	r7, r7, r6
   14840:	add	r1, ip, r7
   14844:	sub	r2, lr, r7
   14848:	sub	r0, fp, #44	; 0x2c
   1484c:	mov	r3, r4
   14850:	bl	16e10 <__assert_fail@plt+0x5d54>
   14854:	cmp	r0, #0
   14858:	beq	14d18 <__assert_fail@plt+0x3c5c>
   1485c:	cmn	r0, #1
   14860:	beq	14cd8 <__assert_fail@plt+0x3c1c>
   14864:	cmn	r0, #2
   14868:	ldr	lr, [sp, #28]
   1486c:	beq	14ce0 <__assert_fail@plt+0x3c24>
   14870:	cmp	r0, #2
   14874:	mov	r1, #0
   14878:	movwcc	r1, #1
   1487c:	ldr	r2, [sp, #60]	; 0x3c
   14880:	eor	r2, r2, #1
   14884:	orrs	r1, r2, r1
   14888:	ldr	r4, [sp, #24]
   1488c:	bne	1494c <__assert_fail@plt+0x3890>
   14890:	ldr	r1, [sp, #44]	; 0x2c
   14894:	ldr	r2, [sp, #20]
   14898:	add	r1, r2, r1
   1489c:	mov	r2, #1
   148a0:	ldrb	r3, [r1, r2]
   148a4:	sub	r3, r3, #91	; 0x5b
   148a8:	cmp	r3, #33	; 0x21
   148ac:	bhi	14940 <__assert_fail@plt+0x3884>
   148b0:	add	r7, pc, #0
   148b4:	ldr	pc, [r7, r3, lsl #2]
   148b8:	andeq	r4, r1, r0, lsl #28
   148bc:	andeq	r4, r1, r0, lsl #28
   148c0:	andeq	r4, r1, r0, asr #18
   148c4:	andeq	r4, r1, r0, lsl #28
   148c8:	andeq	r4, r1, r0, asr #18
   148cc:	andeq	r4, r1, r0, lsl #28
   148d0:	andeq	r4, r1, r0, asr #18
   148d4:	andeq	r4, r1, r0, asr #18
   148d8:	andeq	r4, r1, r0, asr #18
   148dc:	andeq	r4, r1, r0, asr #18
   148e0:	andeq	r4, r1, r0, asr #18
   148e4:	andeq	r4, r1, r0, asr #18
   148e8:	andeq	r4, r1, r0, asr #18
   148ec:	andeq	r4, r1, r0, asr #18
   148f0:	andeq	r4, r1, r0, asr #18
   148f4:	andeq	r4, r1, r0, asr #18
   148f8:	andeq	r4, r1, r0, asr #18
   148fc:	andeq	r4, r1, r0, asr #18
   14900:	andeq	r4, r1, r0, asr #18
   14904:	andeq	r4, r1, r0, asr #18
   14908:	andeq	r4, r1, r0, asr #18
   1490c:	andeq	r4, r1, r0, asr #18
   14910:	andeq	r4, r1, r0, asr #18
   14914:	andeq	r4, r1, r0, asr #18
   14918:	andeq	r4, r1, r0, asr #18
   1491c:	andeq	r4, r1, r0, asr #18
   14920:	andeq	r4, r1, r0, asr #18
   14924:	andeq	r4, r1, r0, asr #18
   14928:	andeq	r4, r1, r0, asr #18
   1492c:	andeq	r4, r1, r0, asr #18
   14930:	andeq	r4, r1, r0, asr #18
   14934:	andeq	r4, r1, r0, asr #18
   14938:	andeq	r4, r1, r0, asr #18
   1493c:	andeq	r4, r1, r0, lsl #28
   14940:	add	r2, r2, #1
   14944:	cmp	r2, r0
   14948:	bcc	148a0 <__assert_fail@plt+0x37e4>
   1494c:	ldr	r7, [sp, #44]	; 0x2c
   14950:	add	r7, r0, r7
   14954:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14958:	bl	10f18 <iswprint@plt>
   1495c:	cmp	r0, #0
   14960:	movwne	r0, #1
   14964:	and	r9, r9, r0
   14968:	sub	r4, fp, #40	; 0x28
   1496c:	mov	r0, r4
   14970:	bl	10ec4 <mbsinit@plt>
   14974:	ldr	lr, [sp, #28]
   14978:	cmp	r0, #0
   1497c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14980:	beq	14838 <__assert_fail@plt+0x377c>
   14984:	b	14d20 <__assert_fail@plt+0x3c64>
   14988:	ldr	r0, [sp, #32]
   1498c:	cmp	r0, #0
   14990:	beq	14a28 <__assert_fail@plt+0x396c>
   14994:	add	r0, r6, #2
   14998:	cmp	r0, lr
   1499c:	bcs	14a28 <__assert_fail@plt+0x396c>
   149a0:	add	r1, ip, r6
   149a4:	ldrb	r1, [r1, #1]
   149a8:	cmp	r1, #63	; 0x3f
   149ac:	bne	14a28 <__assert_fail@plt+0x396c>
   149b0:	ldrb	r9, [ip, r0]
   149b4:	sub	r2, r9, #33	; 0x21
   149b8:	cmp	r2, #29
   149bc:	bhi	14a28 <__assert_fail@plt+0x396c>
   149c0:	mov	r3, #1
   149c4:	movw	r1, #20929	; 0x51c1
   149c8:	movt	r1, #14336	; 0x3800
   149cc:	tst	r1, r3, lsl r2
   149d0:	beq	14a28 <__assert_fail@plt+0x396c>
   149d4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   149d8:	tst	r1, #1
   149dc:	bne	14e08 <__assert_fail@plt+0x3d4c>
   149e0:	cmp	r8, r4
   149e4:	movcc	r1, #63	; 0x3f
   149e8:	strbcc	r1, [r7, r8]
   149ec:	add	r2, r8, #1
   149f0:	cmp	r2, r4
   149f4:	movcc	r1, #34	; 0x22
   149f8:	strbcc	r1, [r7, r2]
   149fc:	add	r2, r8, #2
   14a00:	cmp	r2, r4
   14a04:	movcc	r1, #34	; 0x22
   14a08:	strbcc	r1, [r7, r2]
   14a0c:	add	r2, r8, #3
   14a10:	cmp	r2, r4
   14a14:	movcc	r1, #63	; 0x3f
   14a18:	strbcc	r1, [r7, r2]
   14a1c:	add	r8, r8, #4
   14a20:	mov	r6, r0
   14a24:	mov	r5, r9
   14a28:	mov	r9, #0
   14a2c:	b	1447c <__assert_fail@plt+0x33c0>
   14a30:	add	r1, r2, r6
   14a34:	str	r1, [sp, #44]	; 0x2c
   14a38:	add	r1, r6, #1
   14a3c:	mov	r3, #0
   14a40:	ldr	lr, [sp, #28]
   14a44:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14a48:	tst	r0, #1
   14a4c:	bne	14b40 <__assert_fail@plt+0x3a84>
   14a50:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14a54:	tst	r2, #1
   14a58:	bne	14e08 <__assert_fail@plt+0x3d4c>
   14a5c:	cmp	r6, #2
   14a60:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14a64:	movwne	r3, #1
   14a68:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14a6c:	orr	r3, r3, r2
   14a70:	tst	r3, #1
   14a74:	bne	14ab0 <__assert_fail@plt+0x39f4>
   14a78:	cmp	r8, r4
   14a7c:	movcc	r2, #39	; 0x27
   14a80:	strbcc	r2, [r7, r8]
   14a84:	add	r3, r8, #1
   14a88:	cmp	r3, r4
   14a8c:	movcc	r2, #36	; 0x24
   14a90:	strbcc	r2, [r7, r3]
   14a94:	add	r3, r8, #2
   14a98:	cmp	r3, r4
   14a9c:	movcc	r2, #39	; 0x27
   14aa0:	strbcc	r2, [r7, r3]
   14aa4:	add	r8, r8, #3
   14aa8:	mov	r2, #1
   14aac:	str	r2, [fp, #-56]	; 0xffffffc8
   14ab0:	cmp	r8, r4
   14ab4:	movcc	r2, #92	; 0x5c
   14ab8:	strbcc	r2, [r7, r8]
   14abc:	add	r3, r8, #1
   14ac0:	cmp	r3, r4
   14ac4:	bcs	14ae4 <__assert_fail@plt+0x3a28>
   14ac8:	and	r7, r5, #192	; 0xc0
   14acc:	mov	r2, #48	; 0x30
   14ad0:	orr	r7, r2, r7, lsr #6
   14ad4:	ldr	r6, [sp, #80]	; 0x50
   14ad8:	strb	r7, [r6, r3]
   14adc:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14ae0:	ldr	r7, [sp, #80]	; 0x50
   14ae4:	add	r3, r8, #2
   14ae8:	cmp	r3, r4
   14aec:	bcs	14b0c <__assert_fail@plt+0x3a50>
   14af0:	lsr	r7, r5, #3
   14af4:	mov	r2, #6
   14af8:	bfi	r7, r2, #3, #29
   14afc:	ldr	r6, [sp, #80]	; 0x50
   14b00:	strb	r7, [r6, r3]
   14b04:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14b08:	ldr	r7, [sp, #80]	; 0x50
   14b0c:	mov	r2, #6
   14b10:	bfi	r5, r2, #3, #29
   14b14:	add	r8, r8, #3
   14b18:	mov	r3, #1
   14b1c:	b	14b64 <__assert_fail@plt+0x3aa8>
   14b20:	ldr	r7, [sp, #80]	; 0x50
   14b24:	cmp	r8, r4
   14b28:	strbcc	r5, [r7, r8]
   14b2c:	ldrb	r5, [ip, r1]
   14b30:	add	r1, r1, #1
   14b34:	add	r8, r8, #1
   14b38:	tst	r0, #1
   14b3c:	beq	14a50 <__assert_fail@plt+0x3994>
   14b40:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14b44:	tst	r2, #1
   14b48:	beq	14b5c <__assert_fail@plt+0x3aa0>
   14b4c:	cmp	r8, r4
   14b50:	movcc	r2, #92	; 0x5c
   14b54:	strbcc	r2, [r7, r8]
   14b58:	add	r8, r8, #1
   14b5c:	mov	r2, #0
   14b60:	str	r2, [fp, #-52]	; 0xffffffcc
   14b64:	and	sl, r3, #1
   14b68:	ldr	r2, [sp, #44]	; 0x2c
   14b6c:	cmp	r2, r1
   14b70:	bls	14c7c <__assert_fail@plt+0x3bc0>
   14b74:	cmp	sl, #0
   14b78:	movwne	sl, #1
   14b7c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14b80:	mvn	r7, r2
   14b84:	orr	r7, r7, sl
   14b88:	tst	r7, #1
   14b8c:	bne	14b20 <__assert_fail@plt+0x3a64>
   14b90:	cmp	r8, r4
   14b94:	ldrcc	r7, [sp, #80]	; 0x50
   14b98:	movcc	r2, #39	; 0x27
   14b9c:	strbcc	r2, [r7, r8]
   14ba0:	add	r7, r8, #1
   14ba4:	cmp	r7, r4
   14ba8:	ldrcc	r6, [sp, #80]	; 0x50
   14bac:	movcc	r2, #39	; 0x27
   14bb0:	strbcc	r2, [r6, r7]
   14bb4:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   14bb8:	add	r8, r8, #2
   14bbc:	mov	r2, #0
   14bc0:	str	r2, [fp, #-56]	; 0xffffffc8
   14bc4:	b	14b20 <__assert_fail@plt+0x3a64>
   14bc8:	cmp	r8, r4
   14bcc:	movcc	r0, #39	; 0x27
   14bd0:	strbcc	r0, [r7, r8]
   14bd4:	add	r0, r8, #1
   14bd8:	cmp	r0, r4
   14bdc:	movcc	r1, #36	; 0x24
   14be0:	strbcc	r1, [r7, r0]
   14be4:	add	r0, r8, #2
   14be8:	cmp	r0, r4
   14bec:	movcc	r1, #39	; 0x27
   14bf0:	strbcc	r1, [r7, r0]
   14bf4:	add	r0, r8, #3
   14bf8:	mov	r2, #1
   14bfc:	cmp	r0, r4
   14c00:	movcc	r1, #92	; 0x5c
   14c04:	strbcc	r1, [r7, r0]
   14c08:	str	r2, [fp, #-56]	; 0xffffffc8
   14c0c:	add	r8, r0, #1
   14c10:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14c14:	cmp	r1, #2
   14c18:	beq	14c6c <__assert_fail@plt+0x3bb0>
   14c1c:	add	r1, r6, #1
   14c20:	mov	r9, #0
   14c24:	mov	sl, #1
   14c28:	mov	r5, #48	; 0x30
   14c2c:	cmp	r1, lr
   14c30:	bcs	1447c <__assert_fail@plt+0x33c0>
   14c34:	ldrb	r1, [ip, r1]
   14c38:	sub	r1, r1, #48	; 0x30
   14c3c:	uxtb	r1, r1
   14c40:	cmp	r1, #9
   14c44:	bhi	1447c <__assert_fail@plt+0x33c0>
   14c48:	cmp	r8, r4
   14c4c:	movcc	r1, #48	; 0x30
   14c50:	strbcc	r1, [r7, r8]
   14c54:	add	r1, r0, #2
   14c58:	cmp	r1, r4
   14c5c:	movcc	r2, #48	; 0x30
   14c60:	strbcc	r2, [r7, r1]
   14c64:	add	r8, r0, #3
   14c68:	b	1447c <__assert_fail@plt+0x33c0>
   14c6c:	mov	r0, #48	; 0x30
   14c70:	mov	sl, #1
   14c74:	mov	r9, #0
   14c78:	b	14728 <__assert_fail@plt+0x366c>
   14c7c:	sub	r6, r1, #1
   14c80:	cmp	sl, #0
   14c84:	movwne	sl, #1
   14c88:	mov	r0, r5
   14c8c:	cmp	sl, #0
   14c90:	bne	14cd0 <__assert_fail@plt+0x3c14>
   14c94:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14c98:	tst	r1, #1
   14c9c:	beq	14cd0 <__assert_fail@plt+0x3c14>
   14ca0:	cmp	r8, r4
   14ca4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14ca8:	movcc	r1, #39	; 0x27
   14cac:	strbcc	r1, [r7, r8]
   14cb0:	add	r1, r8, #1
   14cb4:	cmp	r1, r4
   14cb8:	movcc	r2, #39	; 0x27
   14cbc:	strbcc	r2, [r7, r1]
   14cc0:	add	r8, r8, #2
   14cc4:	mov	r1, #0
   14cc8:	str	r1, [fp, #-56]	; 0xffffffc8
   14ccc:	b	147b4 <__assert_fail@plt+0x36f8>
   14cd0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14cd4:	b	147b4 <__assert_fail@plt+0x36f8>
   14cd8:	mov	r9, #0
   14cdc:	b	14d18 <__assert_fail@plt+0x3c5c>
   14ce0:	mov	r9, #0
   14ce4:	cmp	r7, lr
   14ce8:	bcs	14d18 <__assert_fail@plt+0x3c5c>
   14cec:	ldr	ip, [fp, #-84]	; 0xffffffac
   14cf0:	ldr	r7, [sp, #44]	; 0x2c
   14cf4:	ldr	r0, [sp, #20]
   14cf8:	ldrb	r0, [r0, r7]
   14cfc:	cmp	r0, #0
   14d00:	beq	14d20 <__assert_fail@plt+0x3c64>
   14d04:	add	r7, r7, #1
   14d08:	add	r0, r6, r7
   14d0c:	cmp	r0, lr
   14d10:	bcc	14cf4 <__assert_fail@plt+0x3c38>
   14d14:	b	14d20 <__assert_fail@plt+0x3c64>
   14d18:	ldr	ip, [fp, #-84]	; 0xffffffac
   14d1c:	ldr	r7, [sp, #44]	; 0x2c
   14d20:	mov	r1, r7
   14d24:	ldr	r7, [sp, #80]	; 0x50
   14d28:	b	14650 <__assert_fail@plt+0x3594>
   14d2c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14d30:	eor	r0, r1, #2
   14d34:	orr	r0, r0, r8
   14d38:	clz	r0, r0
   14d3c:	lsr	r0, r0, #5
   14d40:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14d44:	tst	r2, r0
   14d48:	bne	14e08 <__assert_fail@plt+0x3d4c>
   14d4c:	cmp	r1, #2
   14d50:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14d54:	movwne	r0, #1
   14d58:	orr	r0, r2, r0
   14d5c:	tst	r0, #1
   14d60:	ldreq	r0, [sp, #56]	; 0x38
   14d64:	eoreq	r0, r0, #1
   14d68:	tsteq	r0, #1
   14d6c:	bne	14da0 <__assert_fail@plt+0x3ce4>
   14d70:	mov	r9, lr
   14d74:	tst	r5, #1
   14d78:	bne	14e70 <__assert_fail@plt+0x3db4>
   14d7c:	ldr	r0, [sp, #72]	; 0x48
   14d80:	cmp	r0, #0
   14d84:	beq	14da0 <__assert_fail@plt+0x3ce4>
   14d88:	mov	r5, #0
   14d8c:	cmp	r4, #0
   14d90:	ldr	r0, [sp, #84]	; 0x54
   14d94:	mov	sl, r2
   14d98:	ldr	r6, [sp, #72]	; 0x48
   14d9c:	beq	13f38 <__assert_fail@plt+0x2e7c>
   14da0:	ldr	r1, [sp, #92]	; 0x5c
   14da4:	clz	r0, r1
   14da8:	lsr	r0, r0, #5
   14dac:	orr	r0, r0, r2
   14db0:	tst	r0, #1
   14db4:	bne	14de0 <__assert_fail@plt+0x3d24>
   14db8:	ldrb	r0, [r1]
   14dbc:	cmp	r0, #0
   14dc0:	beq	14de0 <__assert_fail@plt+0x3d24>
   14dc4:	add	r1, r1, #1
   14dc8:	cmp	r8, r4
   14dcc:	strbcc	r0, [r7, r8]
   14dd0:	add	r8, r8, #1
   14dd4:	ldrb	r0, [r1], #1
   14dd8:	cmp	r0, #0
   14ddc:	bne	14dc8 <__assert_fail@plt+0x3d0c>
   14de0:	cmp	r8, r4
   14de4:	movcc	r0, #0
   14de8:	strbcc	r0, [r7, r8]
   14dec:	b	14e64 <__assert_fail@plt+0x3da8>
   14df0:	ldr	ip, [fp, #-84]	; 0xffffffac
   14df4:	mov	lr, r4
   14df8:	mov	r4, r5
   14dfc:	b	14e08 <__assert_fail@plt+0x3d4c>
   14e00:	ldr	r7, [sp, #80]	; 0x50
   14e04:	ldr	ip, [fp, #-84]	; 0xffffffac
   14e08:	mov	r0, #0
   14e0c:	ldr	r1, [fp, #12]
   14e10:	bic	r1, r1, #2
   14e14:	ldr	r2, [sp, #84]	; 0x54
   14e18:	tst	r2, #1
   14e1c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14e20:	mov	r2, r3
   14e24:	movwne	r2, #4
   14e28:	cmp	r3, #2
   14e2c:	movne	r2, r3
   14e30:	str	r2, [sp]
   14e34:	str	r1, [sp, #4]
   14e38:	str	r0, [sp, #8]
   14e3c:	ldr	r0, [sp, #68]	; 0x44
   14e40:	str	r0, [sp, #12]
   14e44:	ldr	r0, [sp, #76]	; 0x4c
   14e48:	str	r0, [sp, #16]
   14e4c:	mov	r0, r7
   14e50:	mov	r1, r4
   14e54:	mov	r2, ip
   14e58:	mov	r3, lr
   14e5c:	bl	13eb0 <__assert_fail@plt+0x2df4>
   14e60:	mov	r8, r0
   14e64:	mov	r0, r8
   14e68:	sub	sp, fp, #28
   14e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e70:	mov	r0, #5
   14e74:	str	r0, [sp]
   14e78:	ldr	r0, [fp, #12]
   14e7c:	str	r0, [sp, #4]
   14e80:	ldr	r0, [fp, #16]
   14e84:	str	r0, [sp, #8]
   14e88:	ldr	r0, [sp, #68]	; 0x44
   14e8c:	str	r0, [sp, #12]
   14e90:	ldr	r0, [sp, #76]	; 0x4c
   14e94:	str	r0, [sp, #16]
   14e98:	mov	r0, r7
   14e9c:	ldr	r1, [sp, #72]	; 0x48
   14ea0:	ldr	r2, [fp, #-84]	; 0xffffffac
   14ea4:	mov	r3, r9
   14ea8:	b	14e5c <__assert_fail@plt+0x3da0>
   14eac:	bl	110a4 <abort@plt>
   14eb0:	mov	r3, r2
   14eb4:	mov	r2, #0
   14eb8:	b	14ebc <__assert_fail@plt+0x3e00>
   14ebc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ec0:	add	fp, sp, #28
   14ec4:	sub	sp, sp, #36	; 0x24
   14ec8:	mov	r4, r2
   14ecc:	str	r2, [sp, #24]
   14ed0:	mov	r5, r1
   14ed4:	mov	r6, r0
   14ed8:	str	r0, [sp, #20]
   14edc:	movw	r8, #46192	; 0xb470
   14ee0:	movt	r8, #2
   14ee4:	cmp	r3, #0
   14ee8:	movne	r8, r3
   14eec:	bl	10fe4 <__errno_location@plt>
   14ef0:	str	r0, [sp, #28]
   14ef4:	ldm	r8, {r3, r9}
   14ef8:	ldr	r1, [r8, #40]	; 0x28
   14efc:	ldr	r2, [r8, #44]	; 0x2c
   14f00:	ldr	r7, [r0]
   14f04:	str	r7, [sp, #32]
   14f08:	add	sl, r8, #8
   14f0c:	cmp	r4, #0
   14f10:	orreq	r9, r9, #1
   14f14:	stm	sp, {r3, r9, sl}
   14f18:	str	r1, [sp, #12]
   14f1c:	str	r2, [sp, #16]
   14f20:	mov	r0, #0
   14f24:	mov	r1, #0
   14f28:	mov	r2, r6
   14f2c:	mov	r3, r5
   14f30:	mov	r7, r5
   14f34:	bl	13eb0 <__assert_fail@plt+0x2df4>
   14f38:	mov	r5, r0
   14f3c:	add	r4, r0, #1
   14f40:	mov	r0, r4
   14f44:	bl	15e54 <__assert_fail@plt+0x4d98>
   14f48:	mov	r6, r0
   14f4c:	ldr	r0, [r8]
   14f50:	ldr	r1, [r8, #40]	; 0x28
   14f54:	ldr	r2, [r8, #44]	; 0x2c
   14f58:	stm	sp, {r0, r9, sl}
   14f5c:	str	r1, [sp, #12]
   14f60:	str	r2, [sp, #16]
   14f64:	mov	r0, r6
   14f68:	mov	r1, r4
   14f6c:	ldr	r2, [sp, #20]
   14f70:	mov	r3, r7
   14f74:	bl	13eb0 <__assert_fail@plt+0x2df4>
   14f78:	ldr	r0, [sp, #24]
   14f7c:	ldr	r1, [sp, #32]
   14f80:	ldr	r2, [sp, #28]
   14f84:	str	r1, [r2]
   14f88:	cmp	r0, #0
   14f8c:	strne	r5, [r0]
   14f90:	mov	r0, r6
   14f94:	sub	sp, fp, #28
   14f98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f9c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14fa0:	add	fp, sp, #24
   14fa4:	movw	r8, #37112	; 0x90f8
   14fa8:	movt	r8, #2
   14fac:	ldr	r4, [r8]
   14fb0:	movw	r5, #37116	; 0x90fc
   14fb4:	movt	r5, #2
   14fb8:	ldr	r0, [r5]
   14fbc:	cmp	r0, #2
   14fc0:	blt	14fec <__assert_fail@plt+0x3f30>
   14fc4:	add	r7, r4, #12
   14fc8:	mov	r6, #0
   14fcc:	ldr	r0, [r7, r6, lsl #3]
   14fd0:	bl	13c4c <__assert_fail@plt+0x2b90>
   14fd4:	add	r0, r6, #1
   14fd8:	ldr	r1, [r5]
   14fdc:	add	r2, r6, #2
   14fe0:	cmp	r2, r1
   14fe4:	mov	r6, r0
   14fe8:	blt	14fcc <__assert_fail@plt+0x3f10>
   14fec:	ldr	r0, [r4, #4]
   14ff0:	movw	r7, #46240	; 0xb4a0
   14ff4:	movt	r7, #2
   14ff8:	cmp	r0, r7
   14ffc:	beq	15014 <__assert_fail@plt+0x3f58>
   15000:	bl	13c4c <__assert_fail@plt+0x2b90>
   15004:	movw	r0, #37120	; 0x9100
   15008:	movt	r0, #2
   1500c:	mov	r6, #256	; 0x100
   15010:	strd	r6, [r0]
   15014:	movw	r6, #37120	; 0x9100
   15018:	movt	r6, #2
   1501c:	cmp	r4, r6
   15020:	beq	15030 <__assert_fail@plt+0x3f74>
   15024:	mov	r0, r4
   15028:	bl	13c4c <__assert_fail@plt+0x2b90>
   1502c:	str	r6, [r8]
   15030:	mov	r0, #1
   15034:	str	r0, [r5]
   15038:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1503c:	movw	r3, #46192	; 0xb470
   15040:	movt	r3, #2
   15044:	mvn	r2, #0
   15048:	b	1504c <__assert_fail@plt+0x3f90>
   1504c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15050:	add	fp, sp, #28
   15054:	sub	sp, sp, #44	; 0x2c
   15058:	mov	r7, r3
   1505c:	str	r2, [sp, #36]	; 0x24
   15060:	str	r1, [sp, #32]
   15064:	mov	r5, r0
   15068:	bl	10fe4 <__errno_location@plt>
   1506c:	cmp	r5, #0
   15070:	blt	151dc <__assert_fail@plt+0x4120>
   15074:	cmn	r5, #-2147483647	; 0x80000001
   15078:	beq	151dc <__assert_fail@plt+0x4120>
   1507c:	movw	r4, #37112	; 0x90f8
   15080:	movt	r4, #2
   15084:	ldr	r6, [r4]
   15088:	str	r0, [sp, #28]
   1508c:	ldr	r0, [r0]
   15090:	str	r0, [sp, #24]
   15094:	movw	r8, #37116	; 0x90fc
   15098:	movt	r8, #2
   1509c:	ldr	r1, [r8]
   150a0:	cmp	r1, r5
   150a4:	ble	150b0 <__assert_fail@plt+0x3ff4>
   150a8:	mov	sl, r6
   150ac:	b	15118 <__assert_fail@plt+0x405c>
   150b0:	str	r1, [fp, #-32]	; 0xffffffe0
   150b4:	mov	r0, #8
   150b8:	str	r0, [sp]
   150bc:	movw	r9, #37120	; 0x9100
   150c0:	movt	r9, #2
   150c4:	subs	r0, r6, r9
   150c8:	movne	r0, r6
   150cc:	add	r2, r5, #1
   150d0:	sub	r2, r2, r1
   150d4:	sub	r1, fp, #32
   150d8:	mvn	r3, #-2147483648	; 0x80000000
   150dc:	bl	15f3c <__assert_fail@plt+0x4e80>
   150e0:	mov	sl, r0
   150e4:	str	r0, [r4]
   150e8:	cmp	r6, r9
   150ec:	ldrdeq	r0, [r9]
   150f0:	stmeq	sl, {r0, r1}
   150f4:	ldr	r1, [r8]
   150f8:	add	r0, sl, r1, lsl #3
   150fc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15100:	sub	r1, r2, r1
   15104:	lsl	r2, r1, #3
   15108:	mov	r1, #0
   1510c:	bl	11008 <memset@plt>
   15110:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15114:	str	r0, [r8]
   15118:	mov	r9, sl
   1511c:	ldr	r6, [r9, r5, lsl #3]!
   15120:	ldr	r4, [r9, #4]!
   15124:	ldm	r7, {r0, r1}
   15128:	ldr	r2, [r7, #40]	; 0x28
   1512c:	ldr	r3, [r7, #44]	; 0x2c
   15130:	orr	r8, r1, #1
   15134:	add	r1, r7, #8
   15138:	stm	sp, {r0, r8}
   1513c:	str	r1, [sp, #20]
   15140:	add	r0, sp, #8
   15144:	stm	r0, {r1, r2, r3}
   15148:	mov	r0, r4
   1514c:	mov	r1, r6
   15150:	ldr	r2, [sp, #32]
   15154:	ldr	r3, [sp, #36]	; 0x24
   15158:	bl	13eb0 <__assert_fail@plt+0x2df4>
   1515c:	cmp	r6, r0
   15160:	bhi	151c4 <__assert_fail@plt+0x4108>
   15164:	add	r6, r0, #1
   15168:	str	r6, [sl, r5, lsl #3]
   1516c:	movw	r0, #46240	; 0xb4a0
   15170:	movt	r0, #2
   15174:	cmp	r4, r0
   15178:	beq	15184 <__assert_fail@plt+0x40c8>
   1517c:	mov	r0, r4
   15180:	bl	13c4c <__assert_fail@plt+0x2b90>
   15184:	mov	r0, r6
   15188:	bl	15e54 <__assert_fail@plt+0x4d98>
   1518c:	mov	r4, r0
   15190:	str	r0, [r9]
   15194:	ldr	r0, [r7]
   15198:	ldr	r1, [r7, #40]	; 0x28
   1519c:	ldr	r2, [r7, #44]	; 0x2c
   151a0:	stm	sp, {r0, r8}
   151a4:	ldr	r0, [sp, #20]
   151a8:	add	r3, sp, #8
   151ac:	stm	r3, {r0, r1, r2}
   151b0:	mov	r0, r4
   151b4:	mov	r1, r6
   151b8:	ldr	r2, [sp, #32]
   151bc:	ldr	r3, [sp, #36]	; 0x24
   151c0:	bl	13eb0 <__assert_fail@plt+0x2df4>
   151c4:	ldr	r0, [sp, #28]
   151c8:	ldr	r1, [sp, #24]
   151cc:	str	r1, [r0]
   151d0:	mov	r0, r4
   151d4:	sub	sp, fp, #28
   151d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151dc:	bl	110a4 <abort@plt>
   151e0:	movw	r3, #46192	; 0xb470
   151e4:	movt	r3, #2
   151e8:	b	1504c <__assert_fail@plt+0x3f90>
   151ec:	mov	r1, r0
   151f0:	mov	r0, #0
   151f4:	b	1503c <__assert_fail@plt+0x3f80>
   151f8:	mov	r2, r1
   151fc:	mov	r1, r0
   15200:	mov	r0, #0
   15204:	b	151e0 <__assert_fail@plt+0x4124>
   15208:	push	{r4, r5, r6, sl, fp, lr}
   1520c:	add	fp, sp, #16
   15210:	sub	sp, sp, #48	; 0x30
   15214:	mov	r4, r2
   15218:	mov	r5, r0
   1521c:	mov	r6, sp
   15220:	mov	r0, r6
   15224:	bl	15244 <__assert_fail@plt+0x4188>
   15228:	mov	r0, r5
   1522c:	mov	r1, r4
   15230:	mvn	r2, #0
   15234:	mov	r3, r6
   15238:	bl	1504c <__assert_fail@plt+0x3f90>
   1523c:	sub	sp, fp, #16
   15240:	pop	{r4, r5, r6, sl, fp, pc}
   15244:	vmov.i32	q8, #0	; 0x00000000
   15248:	mov	r2, #32
   1524c:	mov	r3, r0
   15250:	vst1.32	{d16-d17}, [r3], r2
   15254:	vst1.32	{d16-d17}, [r3]
   15258:	add	r2, r0, #16
   1525c:	vst1.32	{d16-d17}, [r2]
   15260:	cmp	r1, #10
   15264:	strne	r1, [r0]
   15268:	bxne	lr
   1526c:	push	{fp, lr}
   15270:	mov	fp, sp
   15274:	bl	110a4 <abort@plt>
   15278:	push	{r4, r5, r6, r7, fp, lr}
   1527c:	add	fp, sp, #16
   15280:	sub	sp, sp, #48	; 0x30
   15284:	mov	r4, r3
   15288:	mov	r5, r2
   1528c:	mov	r6, r0
   15290:	mov	r7, sp
   15294:	mov	r0, r7
   15298:	bl	15244 <__assert_fail@plt+0x4188>
   1529c:	mov	r0, r6
   152a0:	mov	r1, r5
   152a4:	mov	r2, r4
   152a8:	mov	r3, r7
   152ac:	bl	1504c <__assert_fail@plt+0x3f90>
   152b0:	sub	sp, fp, #16
   152b4:	pop	{r4, r5, r6, r7, fp, pc}
   152b8:	mov	r2, r1
   152bc:	mov	r1, r0
   152c0:	mov	r0, #0
   152c4:	b	15208 <__assert_fail@plt+0x414c>
   152c8:	mov	r3, r2
   152cc:	mov	r2, r1
   152d0:	mov	r1, r0
   152d4:	mov	r0, #0
   152d8:	b	15278 <__assert_fail@plt+0x41bc>
   152dc:	push	{r4, r5, r6, sl, fp, lr}
   152e0:	add	fp, sp, #16
   152e4:	sub	sp, sp, #48	; 0x30
   152e8:	mov	r4, r1
   152ec:	mov	r5, r0
   152f0:	mov	r0, #32
   152f4:	movw	r1, #46192	; 0xb470
   152f8:	movt	r1, #2
   152fc:	add	r3, r1, #16
   15300:	vld1.64	{d16-d17}, [r1], r0
   15304:	mov	r6, sp
   15308:	vld1.64	{d18-d19}, [r3]
   1530c:	add	r3, r6, #16
   15310:	vld1.64	{d20-d21}, [r1]
   15314:	vst1.64	{d18-d19}, [r3]
   15318:	mov	r1, r6
   1531c:	vst1.64	{d16-d17}, [r1], r0
   15320:	vst1.64	{d20-d21}, [r1]
   15324:	mov	r0, r6
   15328:	mov	r1, r2
   1532c:	mov	r2, #1
   15330:	bl	13da4 <__assert_fail@plt+0x2ce8>
   15334:	mov	r0, #0
   15338:	mov	r1, r5
   1533c:	mov	r2, r4
   15340:	mov	r3, r6
   15344:	bl	1504c <__assert_fail@plt+0x3f90>
   15348:	sub	sp, fp, #16
   1534c:	pop	{r4, r5, r6, sl, fp, pc}
   15350:	mov	r2, r1
   15354:	mvn	r1, #0
   15358:	b	152dc <__assert_fail@plt+0x4220>
   1535c:	mov	r1, #58	; 0x3a
   15360:	b	15350 <__assert_fail@plt+0x4294>
   15364:	mov	r2, #58	; 0x3a
   15368:	b	152dc <__assert_fail@plt+0x4220>
   1536c:	push	{r4, r5, r6, sl, fp, lr}
   15370:	add	fp, sp, #16
   15374:	sub	sp, sp, #48	; 0x30
   15378:	mov	r4, r2
   1537c:	mov	r5, r0
   15380:	mov	r6, sp
   15384:	mov	r0, r6
   15388:	bl	15244 <__assert_fail@plt+0x4188>
   1538c:	mov	r0, r6
   15390:	mov	r1, #58	; 0x3a
   15394:	mov	r2, #1
   15398:	bl	13da4 <__assert_fail@plt+0x2ce8>
   1539c:	mov	r0, r5
   153a0:	mov	r1, r4
   153a4:	mvn	r2, #0
   153a8:	mov	r3, r6
   153ac:	bl	1504c <__assert_fail@plt+0x3f90>
   153b0:	sub	sp, fp, #16
   153b4:	pop	{r4, r5, r6, sl, fp, pc}
   153b8:	push	{fp, lr}
   153bc:	mov	fp, sp
   153c0:	sub	sp, sp, #8
   153c4:	mvn	ip, #0
   153c8:	str	ip, [sp]
   153cc:	bl	153d8 <__assert_fail@plt+0x431c>
   153d0:	mov	sp, fp
   153d4:	pop	{fp, pc}
   153d8:	push	{r4, r5, r6, r7, fp, lr}
   153dc:	add	fp, sp, #16
   153e0:	sub	sp, sp, #48	; 0x30
   153e4:	mov	r7, r3
   153e8:	mov	r5, r0
   153ec:	mov	r0, #32
   153f0:	movw	r3, #46192	; 0xb470
   153f4:	movt	r3, #2
   153f8:	add	r4, r3, #16
   153fc:	vld1.64	{d16-d17}, [r3], r0
   15400:	mov	r6, sp
   15404:	vld1.64	{d18-d19}, [r4]
   15408:	add	r4, r6, #16
   1540c:	vld1.64	{d20-d21}, [r3]
   15410:	vst1.64	{d18-d19}, [r4]
   15414:	mov	r3, r6
   15418:	vst1.64	{d16-d17}, [r3], r0
   1541c:	vst1.64	{d20-d21}, [r3]
   15420:	mov	r0, r6
   15424:	bl	13dfc <__assert_fail@plt+0x2d40>
   15428:	ldr	r2, [fp, #8]
   1542c:	mov	r0, r5
   15430:	mov	r1, r7
   15434:	mov	r3, r6
   15438:	bl	1504c <__assert_fail@plt+0x3f90>
   1543c:	sub	sp, fp, #16
   15440:	pop	{r4, r5, r6, r7, fp, pc}
   15444:	mov	r3, r2
   15448:	mov	r2, r1
   1544c:	mov	r1, r0
   15450:	mov	r0, #0
   15454:	b	153b8 <__assert_fail@plt+0x42fc>
   15458:	push	{fp, lr}
   1545c:	mov	fp, sp
   15460:	sub	sp, sp, #8
   15464:	mov	ip, r2
   15468:	mov	r2, r1
   1546c:	mov	r1, r0
   15470:	str	r3, [sp]
   15474:	mov	r0, #0
   15478:	mov	r3, ip
   1547c:	bl	153d8 <__assert_fail@plt+0x431c>
   15480:	mov	sp, fp
   15484:	pop	{fp, pc}
   15488:	movw	r3, #37128	; 0x9108
   1548c:	movt	r3, #2
   15490:	b	1504c <__assert_fail@plt+0x3f90>
   15494:	mov	r2, r1
   15498:	mov	r1, r0
   1549c:	mov	r0, #0
   154a0:	b	15488 <__assert_fail@plt+0x43cc>
   154a4:	mvn	r2, #0
   154a8:	b	15488 <__assert_fail@plt+0x43cc>
   154ac:	mov	r1, r0
   154b0:	mov	r0, #0
   154b4:	b	154a4 <__assert_fail@plt+0x43e8>
   154b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   154bc:	add	fp, sp, #24
   154c0:	sub	sp, sp, #16
   154c4:	mov	r4, r1
   154c8:	mov	r5, r0
   154cc:	mov	r7, #0
   154d0:	mov	r0, #0
   154d4:	mov	r1, r5
   154d8:	mov	r2, #5
   154dc:	bl	10ef4 <dcgettext@plt>
   154e0:	cmp	r0, r5
   154e4:	beq	154f0 <__assert_fail@plt+0x4434>
   154e8:	sub	sp, fp, #24
   154ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   154f0:	bl	16dd8 <__assert_fail@plt+0x5d1c>
   154f4:	mov	r6, r0
   154f8:	mov	r8, #56	; 0x38
   154fc:	mov	r0, #45	; 0x2d
   15500:	stm	sp, {r0, r8}
   15504:	str	r7, [sp, #8]
   15508:	str	r7, [sp, #12]
   1550c:	mov	r0, r6
   15510:	mov	r1, #85	; 0x55
   15514:	mov	r2, #84	; 0x54
   15518:	mov	r3, #70	; 0x46
   1551c:	bl	155b4 <__assert_fail@plt+0x44f8>
   15520:	cmp	r0, #0
   15524:	beq	15540 <__assert_fail@plt+0x4484>
   15528:	ldrb	r1, [r5]
   1552c:	movw	r2, #34730	; 0x87aa
   15530:	movt	r2, #1
   15534:	movw	r0, #34734	; 0x87ae
   15538:	movt	r0, #1
   1553c:	b	15584 <__assert_fail@plt+0x44c8>
   15540:	mov	r0, #48	; 0x30
   15544:	mov	r1, #51	; 0x33
   15548:	str	r8, [sp]
   1554c:	stmib	sp, {r0, r1}
   15550:	str	r0, [sp, #12]
   15554:	mov	r0, r6
   15558:	mov	r1, #71	; 0x47
   1555c:	mov	r2, #66	; 0x42
   15560:	mov	r3, #49	; 0x31
   15564:	bl	155b4 <__assert_fail@plt+0x44f8>
   15568:	cmp	r0, #0
   1556c:	beq	15594 <__assert_fail@plt+0x44d8>
   15570:	ldrb	r1, [r5]
   15574:	movw	r2, #34738	; 0x87b2
   15578:	movt	r2, #1
   1557c:	movw	r0, #34742	; 0x87b6
   15580:	movt	r0, #1
   15584:	cmp	r1, #96	; 0x60
   15588:	moveq	r0, r2
   1558c:	sub	sp, fp, #24
   15590:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15594:	movw	r1, #34726	; 0x87a6
   15598:	movt	r1, #1
   1559c:	movw	r0, #32444	; 0x7ebc
   155a0:	movt	r0, #1
   155a4:	cmp	r4, #9
   155a8:	moveq	r0, r1
   155ac:	sub	sp, fp, #24
   155b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   155b4:	push	{r4, r5, r6, r7, fp, lr}
   155b8:	add	fp, sp, #16
   155bc:	sub	sp, sp, #16
   155c0:	mov	r4, r3
   155c4:	mov	r5, r2
   155c8:	mov	r7, r1
   155cc:	mov	r6, r0
   155d0:	mov	r0, r1
   155d4:	bl	16ae4 <__assert_fail@plt+0x5a28>
   155d8:	ldrb	r1, [r6]
   155dc:	cmp	r0, #0
   155e0:	andne	r1, r1, #223	; 0xdf
   155e4:	mov	r0, #0
   155e8:	cmp	r1, r7
   155ec:	bne	1562c <__assert_fail@plt+0x4570>
   155f0:	cmp	r7, #0
   155f4:	moveq	r0, #1
   155f8:	subeq	sp, fp, #16
   155fc:	popeq	{r4, r5, r6, r7, fp, pc}
   15600:	ldr	r0, [fp, #20]
   15604:	ldr	r1, [fp, #16]
   15608:	ldr	r2, [fp, #12]
   1560c:	ldr	r3, [fp, #8]
   15610:	str	r2, [sp]
   15614:	str	r1, [sp, #4]
   15618:	str	r0, [sp, #8]
   1561c:	mov	r0, r6
   15620:	mov	r1, r5
   15624:	mov	r2, r4
   15628:	bl	15634 <__assert_fail@plt+0x4578>
   1562c:	sub	sp, fp, #16
   15630:	pop	{r4, r5, r6, r7, fp, pc}
   15634:	push	{r4, r5, r6, r7, fp, lr}
   15638:	add	fp, sp, #16
   1563c:	sub	sp, sp, #8
   15640:	mov	r4, r3
   15644:	mov	r5, r2
   15648:	mov	r7, r1
   1564c:	mov	r6, r0
   15650:	mov	r0, r1
   15654:	bl	16ae4 <__assert_fail@plt+0x5a28>
   15658:	ldrb	r1, [r6, #1]
   1565c:	cmp	r0, #0
   15660:	andne	r1, r1, #223	; 0xdf
   15664:	mov	r0, #0
   15668:	cmp	r1, r7
   1566c:	bne	156a4 <__assert_fail@plt+0x45e8>
   15670:	cmp	r7, #0
   15674:	moveq	r0, #1
   15678:	subeq	sp, fp, #16
   1567c:	popeq	{r4, r5, r6, r7, fp, pc}
   15680:	ldr	r0, [fp, #16]
   15684:	ldr	r1, [fp, #12]
   15688:	ldr	r3, [fp, #8]
   1568c:	str	r1, [sp]
   15690:	str	r0, [sp, #4]
   15694:	mov	r0, r6
   15698:	mov	r1, r5
   1569c:	mov	r2, r4
   156a0:	bl	156ac <__assert_fail@plt+0x45f0>
   156a4:	sub	sp, fp, #16
   156a8:	pop	{r4, r5, r6, r7, fp, pc}
   156ac:	push	{r4, r5, r6, r7, fp, lr}
   156b0:	add	fp, sp, #16
   156b4:	sub	sp, sp, #8
   156b8:	mov	r4, r3
   156bc:	mov	r5, r2
   156c0:	mov	r7, r1
   156c4:	mov	r6, r0
   156c8:	mov	r0, r1
   156cc:	bl	16ae4 <__assert_fail@plt+0x5a28>
   156d0:	ldrb	r1, [r6, #2]
   156d4:	cmp	r0, #0
   156d8:	andne	r1, r1, #223	; 0xdf
   156dc:	mov	r0, #0
   156e0:	cmp	r1, r7
   156e4:	bne	15714 <__assert_fail@plt+0x4658>
   156e8:	cmp	r7, #0
   156ec:	moveq	r0, #1
   156f0:	subeq	sp, fp, #16
   156f4:	popeq	{r4, r5, r6, r7, fp, pc}
   156f8:	ldr	r0, [fp, #12]
   156fc:	ldr	r3, [fp, #8]
   15700:	str	r0, [sp]
   15704:	mov	r0, r6
   15708:	mov	r1, r5
   1570c:	mov	r2, r4
   15710:	bl	1571c <__assert_fail@plt+0x4660>
   15714:	sub	sp, fp, #16
   15718:	pop	{r4, r5, r6, r7, fp, pc}
   1571c:	push	{r4, r5, r6, r7, fp, lr}
   15720:	add	fp, sp, #16
   15724:	mov	r4, r3
   15728:	mov	r5, r2
   1572c:	mov	r7, r1
   15730:	mov	r6, r0
   15734:	mov	r0, r1
   15738:	bl	16ae4 <__assert_fail@plt+0x5a28>
   1573c:	ldrb	r1, [r6, #3]
   15740:	ldr	r3, [fp, #8]
   15744:	cmp	r0, #0
   15748:	andne	r1, r1, #223	; 0xdf
   1574c:	mov	r0, #0
   15750:	cmp	r1, r7
   15754:	popne	{r4, r5, r6, r7, fp, pc}
   15758:	cmp	r7, #0
   1575c:	beq	15774 <__assert_fail@plt+0x46b8>
   15760:	mov	r0, r6
   15764:	mov	r1, r5
   15768:	mov	r2, r4
   1576c:	pop	{r4, r5, r6, r7, fp, lr}
   15770:	b	1577c <__assert_fail@plt+0x46c0>
   15774:	mov	r0, #1
   15778:	pop	{r4, r5, r6, r7, fp, pc}
   1577c:	push	{r4, r5, r6, r7, fp, lr}
   15780:	add	fp, sp, #16
   15784:	mov	r4, r3
   15788:	mov	r5, r2
   1578c:	mov	r7, r1
   15790:	mov	r6, r0
   15794:	mov	r0, r1
   15798:	bl	16ae4 <__assert_fail@plt+0x5a28>
   1579c:	ldrb	r1, [r6, #4]
   157a0:	cmp	r0, #0
   157a4:	andne	r1, r1, #223	; 0xdf
   157a8:	mov	r0, #0
   157ac:	cmp	r1, r7
   157b0:	popne	{r4, r5, r6, r7, fp, pc}
   157b4:	cmp	r7, #0
   157b8:	beq	157d0 <__assert_fail@plt+0x4714>
   157bc:	mov	r0, r6
   157c0:	mov	r1, r5
   157c4:	mov	r2, r4
   157c8:	pop	{r4, r5, r6, r7, fp, lr}
   157cc:	b	157d8 <__assert_fail@plt+0x471c>
   157d0:	mov	r0, #1
   157d4:	pop	{r4, r5, r6, r7, fp, pc}
   157d8:	push	{r4, r5, r6, sl, fp, lr}
   157dc:	add	fp, sp, #16
   157e0:	mov	r4, r2
   157e4:	mov	r6, r1
   157e8:	mov	r5, r0
   157ec:	mov	r0, r1
   157f0:	bl	16ae4 <__assert_fail@plt+0x5a28>
   157f4:	ldrb	r1, [r5, #5]
   157f8:	cmp	r0, #0
   157fc:	andne	r1, r1, #223	; 0xdf
   15800:	mov	r0, #0
   15804:	cmp	r1, r6
   15808:	popne	{r4, r5, r6, sl, fp, pc}
   1580c:	cmp	r6, #0
   15810:	beq	15824 <__assert_fail@plt+0x4768>
   15814:	mov	r0, r5
   15818:	mov	r1, r4
   1581c:	pop	{r4, r5, r6, sl, fp, lr}
   15820:	b	1582c <__assert_fail@plt+0x4770>
   15824:	mov	r0, #1
   15828:	pop	{r4, r5, r6, sl, fp, pc}
   1582c:	push	{r4, r5, fp, lr}
   15830:	add	fp, sp, #8
   15834:	mov	r5, r1
   15838:	mov	r4, r0
   1583c:	mov	r0, r1
   15840:	bl	16ae4 <__assert_fail@plt+0x5a28>
   15844:	ldrb	r1, [r4, #6]
   15848:	cmp	r0, #0
   1584c:	andne	r1, r1, #223	; 0xdf
   15850:	mov	r0, #0
   15854:	cmp	r1, r5
   15858:	popne	{r4, r5, fp, pc}
   1585c:	cmp	r5, #0
   15860:	beq	15870 <__assert_fail@plt+0x47b4>
   15864:	mov	r0, r4
   15868:	pop	{r4, r5, fp, lr}
   1586c:	b	15878 <__assert_fail@plt+0x47bc>
   15870:	mov	r0, #1
   15874:	pop	{r4, r5, fp, pc}
   15878:	push	{r4, sl, fp, lr}
   1587c:	add	fp, sp, #8
   15880:	mov	r4, r0
   15884:	mov	r0, #0
   15888:	bl	16ae4 <__assert_fail@plt+0x5a28>
   1588c:	ldrb	r1, [r4, #7]
   15890:	cmp	r0, #0
   15894:	beq	158ac <__assert_fail@plt+0x47f0>
   15898:	tst	r1, #223	; 0xdf
   1589c:	moveq	r0, #1
   158a0:	popeq	{r4, sl, fp, pc}
   158a4:	mov	r0, #0
   158a8:	pop	{r4, sl, fp, pc}
   158ac:	cmp	r1, #0
   158b0:	moveq	r0, #1
   158b4:	popeq	{r4, sl, fp, pc}
   158b8:	mov	r0, #0
   158bc:	pop	{r4, sl, fp, pc}
   158c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   158c4:	add	fp, sp, #24
   158c8:	mov	r7, r2
   158cc:	mov	r5, r1
   158d0:	mov	r6, r0
   158d4:	movw	r9, #0
   158d8:	movt	r9, #32752	; 0x7ff0
   158dc:	mov	r0, r6
   158e0:	mov	r1, r5
   158e4:	mov	r2, r7
   158e8:	bl	10e7c <read@plt>
   158ec:	mov	r4, r0
   158f0:	cmn	r0, #1
   158f4:	movgt	r0, r4
   158f8:	popgt	{r4, r5, r6, r7, r8, r9, fp, pc}
   158fc:	bl	10fe4 <__errno_location@plt>
   15900:	ldr	r0, [r0]
   15904:	cmp	r0, #4
   15908:	beq	158dc <__assert_fail@plt+0x4820>
   1590c:	cmp	r7, r9
   15910:	mov	r1, #0
   15914:	movwhi	r1, #1
   15918:	sub	r2, r0, #22
   1591c:	clz	r2, r2
   15920:	lsr	r2, r2, #5
   15924:	ands	r1, r1, r2
   15928:	moveq	r8, r4
   1592c:	mov	r1, r7
   15930:	movwne	r1, #0
   15934:	movtne	r1, #32752	; 0x7ff0
   15938:	cmp	r7, r9
   1593c:	bls	1594c <__assert_fail@plt+0x4890>
   15940:	cmp	r0, #22
   15944:	mov	r7, r1
   15948:	beq	158dc <__assert_fail@plt+0x4820>
   1594c:	mov	r0, r8
   15950:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15954:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15958:	add	fp, sp, #24
   1595c:	sub	sp, sp, #32
   15960:	mov	r4, r2
   15964:	mov	r8, r0
   15968:	ldr	r6, [fp, #12]
   1596c:	ldr	r7, [fp, #8]
   15970:	cmp	r1, #0
   15974:	beq	1599c <__assert_fail@plt+0x48e0>
   15978:	mov	r5, r1
   1597c:	str	r4, [sp]
   15980:	str	r3, [sp, #4]
   15984:	movw	r2, #34832	; 0x8810
   15988:	movt	r2, #1
   1598c:	mov	r0, r8
   15990:	mov	r1, #1
   15994:	mov	r3, r5
   15998:	b	159b4 <__assert_fail@plt+0x48f8>
   1599c:	str	r3, [sp]
   159a0:	movw	r2, #34844	; 0x881c
   159a4:	movt	r2, #1
   159a8:	mov	r0, r8
   159ac:	mov	r1, #1
   159b0:	mov	r3, r4
   159b4:	bl	11038 <__fprintf_chk@plt>
   159b8:	movw	r1, #34851	; 0x8823
   159bc:	movt	r1, #1
   159c0:	mov	r0, #0
   159c4:	mov	r2, #5
   159c8:	bl	10ef4 <dcgettext@plt>
   159cc:	mov	r3, r0
   159d0:	movw	r0, #2022	; 0x7e6
   159d4:	str	r0, [sp]
   159d8:	movw	r2, #35569	; 0x8af1
   159dc:	movt	r2, #1
   159e0:	mov	r0, r8
   159e4:	mov	r1, #1
   159e8:	bl	11038 <__fprintf_chk@plt>
   159ec:	movw	r4, #32182	; 0x7db6
   159f0:	movt	r4, #1
   159f4:	mov	r0, r4
   159f8:	mov	r1, r8
   159fc:	bl	10e4c <fputs_unlocked@plt>
   15a00:	movw	r1, #34855	; 0x8827
   15a04:	movt	r1, #1
   15a08:	mov	r0, #0
   15a0c:	mov	r2, #5
   15a10:	bl	10ef4 <dcgettext@plt>
   15a14:	mov	r2, r0
   15a18:	movw	r3, #35026	; 0x88d2
   15a1c:	movt	r3, #1
   15a20:	mov	r0, r8
   15a24:	mov	r1, #1
   15a28:	bl	11038 <__fprintf_chk@plt>
   15a2c:	mov	r0, r4
   15a30:	mov	r1, r8
   15a34:	bl	10e4c <fputs_unlocked@plt>
   15a38:	cmp	r6, #9
   15a3c:	bhi	15a78 <__assert_fail@plt+0x49bc>
   15a40:	add	r0, pc, #0
   15a44:	ldr	pc, [r0, r6, lsl #2]
   15a48:	andeq	r5, r1, r0, ror sl
   15a4c:	andeq	r5, r1, r4, lsl #21
   15a50:			; <UNDEFINED> instruction: 0x00015ab4
   15a54:	ldrdeq	r5, [r1], -ip
   15a58:	andeq	r5, r1, r4, lsl #22
   15a5c:	andeq	r5, r1, ip, lsr #22
   15a60:	andeq	r5, r1, r4, asr fp
   15a64:	andeq	r5, r1, ip, lsl #23
   15a68:	andeq	r5, r1, ip, lsr #24
   15a6c:	ldrdeq	r5, [r1], -r4
   15a70:	sub	sp, fp, #24
   15a74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a78:	movw	r1, #35379	; 0x8a33
   15a7c:	movt	r1, #1
   15a80:	b	15bdc <__assert_fail@plt+0x4b20>
   15a84:	movw	r1, #35060	; 0x88f4
   15a88:	movt	r1, #1
   15a8c:	mov	r0, #0
   15a90:	mov	r2, #5
   15a94:	bl	10ef4 <dcgettext@plt>
   15a98:	mov	r2, r0
   15a9c:	ldr	r3, [r7]
   15aa0:	mov	r0, r8
   15aa4:	mov	r1, #1
   15aa8:	sub	sp, fp, #24
   15aac:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ab0:	b	11038 <__fprintf_chk@plt>
   15ab4:	movw	r1, #35076	; 0x8904
   15ab8:	movt	r1, #1
   15abc:	mov	r0, #0
   15ac0:	mov	r2, #5
   15ac4:	bl	10ef4 <dcgettext@plt>
   15ac8:	mov	r2, r0
   15acc:	ldr	r3, [r7]
   15ad0:	ldr	r0, [r7, #4]
   15ad4:	str	r0, [sp]
   15ad8:	b	15bc8 <__assert_fail@plt+0x4b0c>
   15adc:	movw	r1, #35099	; 0x891b
   15ae0:	movt	r1, #1
   15ae4:	mov	r0, #0
   15ae8:	mov	r2, #5
   15aec:	bl	10ef4 <dcgettext@plt>
   15af0:	mov	r2, r0
   15af4:	ldr	r3, [r7]
   15af8:	ldmib	r7, {r0, r1}
   15afc:	stm	sp, {r0, r1}
   15b00:	b	15bc8 <__assert_fail@plt+0x4b0c>
   15b04:	movw	r1, #35127	; 0x8937
   15b08:	movt	r1, #1
   15b0c:	mov	r0, #0
   15b10:	mov	r2, #5
   15b14:	bl	10ef4 <dcgettext@plt>
   15b18:	mov	r2, r0
   15b1c:	ldr	r3, [r7]
   15b20:	ldmib	r7, {r0, r1, r7}
   15b24:	stm	sp, {r0, r1, r7}
   15b28:	b	15bc8 <__assert_fail@plt+0x4b0c>
   15b2c:	movw	r1, #35159	; 0x8957
   15b30:	movt	r1, #1
   15b34:	mov	r0, #0
   15b38:	mov	r2, #5
   15b3c:	bl	10ef4 <dcgettext@plt>
   15b40:	mov	r2, r0
   15b44:	ldr	r3, [r7]
   15b48:	ldmib	r7, {r0, r1, r6, r7}
   15b4c:	stm	sp, {r0, r1, r6, r7}
   15b50:	b	15bc8 <__assert_fail@plt+0x4b0c>
   15b54:	movw	r1, #35195	; 0x897b
   15b58:	movt	r1, #1
   15b5c:	mov	r0, #0
   15b60:	mov	r2, #5
   15b64:	bl	10ef4 <dcgettext@plt>
   15b68:	mov	r2, r0
   15b6c:	ldr	r3, [r7]
   15b70:	ldmib	r7, {r0, r1, r6}
   15b74:	ldr	r5, [r7, #16]
   15b78:	ldr	r7, [r7, #20]
   15b7c:	stm	sp, {r0, r1, r6}
   15b80:	str	r5, [sp, #12]
   15b84:	str	r7, [sp, #16]
   15b88:	b	15bc8 <__assert_fail@plt+0x4b0c>
   15b8c:	movw	r1, #35235	; 0x89a3
   15b90:	movt	r1, #1
   15b94:	mov	r0, #0
   15b98:	mov	r2, #5
   15b9c:	bl	10ef4 <dcgettext@plt>
   15ba0:	mov	r2, r0
   15ba4:	ldr	r3, [r7]
   15ba8:	ldmib	r7, {r0, r1, r6}
   15bac:	ldr	r5, [r7, #16]
   15bb0:	ldr	r4, [r7, #20]
   15bb4:	ldr	r7, [r7, #24]
   15bb8:	stm	sp, {r0, r1, r6}
   15bbc:	str	r5, [sp, #12]
   15bc0:	str	r4, [sp, #16]
   15bc4:	str	r7, [sp, #20]
   15bc8:	mov	r0, r8
   15bcc:	mov	r1, #1
   15bd0:	b	15c7c <__assert_fail@plt+0x4bc0>
   15bd4:	movw	r1, #35327	; 0x89ff
   15bd8:	movt	r1, #1
   15bdc:	mov	r0, #0
   15be0:	mov	r2, #5
   15be4:	bl	10ef4 <dcgettext@plt>
   15be8:	mov	ip, r0
   15bec:	ldr	r3, [r7]
   15bf0:	ldr	r0, [r7, #4]
   15bf4:	ldr	r1, [r7, #8]
   15bf8:	ldr	r6, [r7, #12]
   15bfc:	ldr	r5, [r7, #16]
   15c00:	ldr	r4, [r7, #20]
   15c04:	ldr	r2, [r7, #24]
   15c08:	ldr	lr, [r7, #28]
   15c0c:	ldr	r7, [r7, #32]
   15c10:	stm	sp, {r0, r1, r6}
   15c14:	str	r5, [sp, #12]
   15c18:	str	r4, [sp, #16]
   15c1c:	str	r2, [sp, #20]
   15c20:	str	lr, [sp, #24]
   15c24:	str	r7, [sp, #28]
   15c28:	b	15c70 <__assert_fail@plt+0x4bb4>
   15c2c:	movw	r1, #35279	; 0x89cf
   15c30:	movt	r1, #1
   15c34:	mov	r0, #0
   15c38:	mov	r2, #5
   15c3c:	bl	10ef4 <dcgettext@plt>
   15c40:	mov	ip, r0
   15c44:	ldr	r3, [r7]
   15c48:	ldmib	r7, {r0, r1, r6}
   15c4c:	ldr	r5, [r7, #16]
   15c50:	ldr	r4, [r7, #20]
   15c54:	ldr	r2, [r7, #24]
   15c58:	ldr	r7, [r7, #28]
   15c5c:	stm	sp, {r0, r1, r6}
   15c60:	str	r5, [sp, #12]
   15c64:	str	r4, [sp, #16]
   15c68:	str	r2, [sp, #20]
   15c6c:	str	r7, [sp, #24]
   15c70:	mov	r0, r8
   15c74:	mov	r1, #1
   15c78:	mov	r2, ip
   15c7c:	bl	11038 <__fprintf_chk@plt>
   15c80:	sub	sp, fp, #24
   15c84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15c88:	push	{r4, sl, fp, lr}
   15c8c:	add	fp, sp, #8
   15c90:	sub	sp, sp, #8
   15c94:	mov	lr, #0
   15c98:	ldr	ip, [fp, #8]
   15c9c:	ldr	r4, [ip, lr, lsl #2]
   15ca0:	add	lr, lr, #1
   15ca4:	cmp	r4, #0
   15ca8:	bne	15c9c <__assert_fail@plt+0x4be0>
   15cac:	sub	r4, lr, #1
   15cb0:	str	ip, [sp]
   15cb4:	str	r4, [sp, #4]
   15cb8:	bl	15954 <__assert_fail@plt+0x4898>
   15cbc:	sub	sp, fp, #8
   15cc0:	pop	{r4, sl, fp, pc}
   15cc4:	push	{r4, r5, fp, lr}
   15cc8:	add	fp, sp, #8
   15ccc:	sub	sp, sp, #48	; 0x30
   15cd0:	mov	ip, #0
   15cd4:	ldr	r4, [fp, #8]
   15cd8:	add	lr, sp, #8
   15cdc:	ldr	r5, [r4]
   15ce0:	str	r5, [lr, ip, lsl #2]
   15ce4:	cmp	r5, #0
   15ce8:	beq	15cfc <__assert_fail@plt+0x4c40>
   15cec:	add	ip, ip, #1
   15cf0:	add	r4, r4, #4
   15cf4:	cmp	ip, #10
   15cf8:	bcc	15cdc <__assert_fail@plt+0x4c20>
   15cfc:	str	lr, [sp]
   15d00:	str	ip, [sp, #4]
   15d04:	bl	15954 <__assert_fail@plt+0x4898>
   15d08:	sub	sp, fp, #8
   15d0c:	pop	{r4, r5, fp, pc}
   15d10:	push	{fp, lr}
   15d14:	mov	fp, sp
   15d18:	sub	sp, sp, #8
   15d1c:	add	ip, fp, #8
   15d20:	str	ip, [sp, #4]
   15d24:	str	ip, [sp]
   15d28:	bl	15cc4 <__assert_fail@plt+0x4c08>
   15d2c:	mov	sp, fp
   15d30:	pop	{fp, pc}
   15d34:	push	{fp, lr}
   15d38:	mov	fp, sp
   15d3c:	movw	r0, #37204	; 0x9154
   15d40:	movt	r0, #2
   15d44:	ldr	r1, [r0]
   15d48:	movw	r0, #32182	; 0x7db6
   15d4c:	movt	r0, #1
   15d50:	bl	10e4c <fputs_unlocked@plt>
   15d54:	movw	r1, #35439	; 0x8a6f
   15d58:	movt	r1, #1
   15d5c:	mov	r0, #0
   15d60:	mov	r2, #5
   15d64:	bl	10ef4 <dcgettext@plt>
   15d68:	mov	r1, r0
   15d6c:	movw	r2, #35459	; 0x8a83
   15d70:	movt	r2, #1
   15d74:	mov	r0, #1
   15d78:	bl	11014 <__printf_chk@plt>
   15d7c:	movw	r1, #35481	; 0x8a99
   15d80:	movt	r1, #1
   15d84:	mov	r0, #0
   15d88:	mov	r2, #5
   15d8c:	bl	10ef4 <dcgettext@plt>
   15d90:	mov	r1, r0
   15d94:	movw	r2, #31495	; 0x7b07
   15d98:	movt	r2, #1
   15d9c:	movw	r3, #31991	; 0x7cf7
   15da0:	movt	r3, #1
   15da4:	mov	r0, #1
   15da8:	bl	11014 <__printf_chk@plt>
   15dac:	movw	r1, #35501	; 0x8aad
   15db0:	movt	r1, #1
   15db4:	mov	r0, #0
   15db8:	mov	r2, #5
   15dbc:	bl	10ef4 <dcgettext@plt>
   15dc0:	mov	r1, r0
   15dc4:	movw	r2, #35540	; 0x8ad4
   15dc8:	movt	r2, #1
   15dcc:	mov	r0, #1
   15dd0:	pop	{fp, lr}
   15dd4:	b	11014 <__printf_chk@plt>
   15dd8:	b	15ddc <__assert_fail@plt+0x4d20>
   15ddc:	push	{r4, r5, r6, sl, fp, lr}
   15de0:	add	fp, sp, #16
   15de4:	mov	r4, r2
   15de8:	mov	r5, r1
   15dec:	mov	r6, r0
   15df0:	bl	16e70 <__assert_fail@plt+0x5db4>
   15df4:	cmp	r0, #0
   15df8:	popne	{r4, r5, r6, sl, fp, pc}
   15dfc:	cmp	r6, #0
   15e00:	beq	15e14 <__assert_fail@plt+0x4d58>
   15e04:	cmp	r5, #0
   15e08:	cmpne	r4, #0
   15e0c:	bne	15e14 <__assert_fail@plt+0x4d58>
   15e10:	pop	{r4, r5, r6, sl, fp, pc}
   15e14:	bl	161c8 <__assert_fail@plt+0x510c>
   15e18:	push	{fp, lr}
   15e1c:	mov	fp, sp
   15e20:	bl	1679c <__assert_fail@plt+0x56e0>
   15e24:	bl	15e2c <__assert_fail@plt+0x4d70>
   15e28:	pop	{fp, pc}
   15e2c:	cmp	r0, #0
   15e30:	bxne	lr
   15e34:	push	{fp, lr}
   15e38:	mov	fp, sp
   15e3c:	bl	161c8 <__assert_fail@plt+0x510c>
   15e40:	push	{fp, lr}
   15e44:	mov	fp, sp
   15e48:	bl	16da4 <__assert_fail@plt+0x5ce8>
   15e4c:	bl	15e2c <__assert_fail@plt+0x4d70>
   15e50:	pop	{fp, pc}
   15e54:	b	15e18 <__assert_fail@plt+0x4d5c>
   15e58:	push	{r4, r5, fp, lr}
   15e5c:	add	fp, sp, #8
   15e60:	mov	r4, r1
   15e64:	mov	r5, r0
   15e68:	bl	167cc <__assert_fail@plt+0x5710>
   15e6c:	cmp	r0, #0
   15e70:	popne	{r4, r5, fp, pc}
   15e74:	cmp	r5, #0
   15e78:	beq	15e88 <__assert_fail@plt+0x4dcc>
   15e7c:	cmp	r4, #0
   15e80:	bne	15e88 <__assert_fail@plt+0x4dcc>
   15e84:	pop	{r4, r5, fp, pc}
   15e88:	bl	161c8 <__assert_fail@plt+0x510c>
   15e8c:	push	{fp, lr}
   15e90:	mov	fp, sp
   15e94:	bl	16da8 <__assert_fail@plt+0x5cec>
   15e98:	bl	15e2c <__assert_fail@plt+0x4d70>
   15e9c:	pop	{fp, pc}
   15ea0:	push	{fp, lr}
   15ea4:	mov	fp, sp
   15ea8:	bl	16db8 <__assert_fail@plt+0x5cfc>
   15eac:	bl	15e2c <__assert_fail@plt+0x4d70>
   15eb0:	pop	{fp, pc}
   15eb4:	push	{fp, lr}
   15eb8:	mov	fp, sp
   15ebc:	mov	r2, r1
   15ec0:	mov	r1, r0
   15ec4:	mov	r0, #0
   15ec8:	bl	15ddc <__assert_fail@plt+0x4d20>
   15ecc:	pop	{fp, pc}
   15ed0:	mov	r2, r1
   15ed4:	mov	r1, r0
   15ed8:	mov	r0, #0
   15edc:	b	15ea0 <__assert_fail@plt+0x4de4>
   15ee0:	mov	r2, #1
   15ee4:	b	15ee8 <__assert_fail@plt+0x4e2c>
   15ee8:	push	{r4, r5, fp, lr}
   15eec:	add	fp, sp, #8
   15ef0:	mov	r4, r1
   15ef4:	ldr	r5, [r1]
   15ef8:	cmp	r0, #0
   15efc:	beq	15f14 <__assert_fail@plt+0x4e58>
   15f00:	mov	r1, #1
   15f04:	add	r1, r1, r5, lsr #1
   15f08:	adds	r5, r5, r1
   15f0c:	bcc	15f2c <__assert_fail@plt+0x4e70>
   15f10:	bl	161c8 <__assert_fail@plt+0x510c>
   15f14:	cmp	r5, #0
   15f18:	bne	15f2c <__assert_fail@plt+0x4e70>
   15f1c:	mov	r1, #64	; 0x40
   15f20:	udiv	r5, r1, r2
   15f24:	cmp	r2, #64	; 0x40
   15f28:	addhi	r5, r5, #1
   15f2c:	mov	r1, r5
   15f30:	bl	15ddc <__assert_fail@plt+0x4d20>
   15f34:	str	r5, [r4]
   15f38:	pop	{r4, r5, fp, pc}
   15f3c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f40:	add	fp, sp, #24
   15f44:	mov	r8, r1
   15f48:	ldr	r6, [r1]
   15f4c:	add	r1, r6, r6, asr #1
   15f50:	cmp	r1, r6
   15f54:	mvnvs	r1, #-2147483648	; 0x80000000
   15f58:	cmp	r1, r3
   15f5c:	mov	r5, r1
   15f60:	movgt	r5, r3
   15f64:	cmn	r3, #1
   15f68:	movle	r5, r1
   15f6c:	ldr	r4, [fp, #8]
   15f70:	cmn	r4, #1
   15f74:	ble	15f9c <__assert_fail@plt+0x4ee0>
   15f78:	cmp	r4, #0
   15f7c:	beq	15ff0 <__assert_fail@plt+0x4f34>
   15f80:	cmn	r5, #1
   15f84:	ble	15fc4 <__assert_fail@plt+0x4f08>
   15f88:	mvn	r7, #-2147483648	; 0x80000000
   15f8c:	udiv	r1, r7, r4
   15f90:	cmp	r1, r5
   15f94:	bge	15ff0 <__assert_fail@plt+0x4f34>
   15f98:	b	16000 <__assert_fail@plt+0x4f44>
   15f9c:	cmn	r5, #1
   15fa0:	ble	15fe0 <__assert_fail@plt+0x4f24>
   15fa4:	cmn	r4, #1
   15fa8:	beq	15ff0 <__assert_fail@plt+0x4f34>
   15fac:	mov	r1, #-2147483648	; 0x80000000
   15fb0:	sdiv	r1, r1, r4
   15fb4:	mvn	r7, #-2147483648	; 0x80000000
   15fb8:	cmp	r1, r5
   15fbc:	bge	15ff0 <__assert_fail@plt+0x4f34>
   15fc0:	b	16000 <__assert_fail@plt+0x4f44>
   15fc4:	beq	15ff0 <__assert_fail@plt+0x4f34>
   15fc8:	mov	r1, #-2147483648	; 0x80000000
   15fcc:	sdiv	r1, r1, r5
   15fd0:	mvn	r7, #-2147483648	; 0x80000000
   15fd4:	cmp	r1, r4
   15fd8:	bge	15ff0 <__assert_fail@plt+0x4f34>
   15fdc:	b	16000 <__assert_fail@plt+0x4f44>
   15fe0:	mvn	r7, #-2147483648	; 0x80000000
   15fe4:	sdiv	r1, r7, r4
   15fe8:	cmp	r5, r1
   15fec:	blt	16000 <__assert_fail@plt+0x4f44>
   15ff0:	mul	r1, r5, r4
   15ff4:	mov	r7, #64	; 0x40
   15ff8:	cmp	r1, #63	; 0x3f
   15ffc:	bgt	16008 <__assert_fail@plt+0x4f4c>
   16000:	sdiv	r5, r7, r4
   16004:	mul	r1, r5, r4
   16008:	cmp	r0, #0
   1600c:	moveq	r7, #0
   16010:	streq	r7, [r8]
   16014:	sub	r7, r5, r6
   16018:	cmp	r7, r2
   1601c:	bge	160c8 <__assert_fail@plt+0x500c>
   16020:	add	r5, r6, r2
   16024:	mov	r1, #0
   16028:	cmp	r5, r3
   1602c:	mov	r2, #0
   16030:	movwgt	r2, #1
   16034:	cmn	r3, #1
   16038:	movwgt	r1, #1
   1603c:	cmp	r5, r6
   16040:	bvs	160b0 <__assert_fail@plt+0x4ff4>
   16044:	ands	r1, r1, r2
   16048:	bne	160b0 <__assert_fail@plt+0x4ff4>
   1604c:	cmn	r4, #1
   16050:	ble	16078 <__assert_fail@plt+0x4fbc>
   16054:	cmp	r4, #0
   16058:	beq	160c4 <__assert_fail@plt+0x5008>
   1605c:	cmn	r5, #1
   16060:	ble	1609c <__assert_fail@plt+0x4fe0>
   16064:	mvn	r1, #-2147483648	; 0x80000000
   16068:	udiv	r1, r1, r4
   1606c:	cmp	r1, r5
   16070:	bge	160c4 <__assert_fail@plt+0x5008>
   16074:	b	160b0 <__assert_fail@plt+0x4ff4>
   16078:	cmn	r5, #1
   1607c:	ble	160b4 <__assert_fail@plt+0x4ff8>
   16080:	cmn	r4, #1
   16084:	beq	160c4 <__assert_fail@plt+0x5008>
   16088:	mov	r1, #-2147483648	; 0x80000000
   1608c:	sdiv	r1, r1, r4
   16090:	cmp	r1, r5
   16094:	bge	160c4 <__assert_fail@plt+0x5008>
   16098:	b	160b0 <__assert_fail@plt+0x4ff4>
   1609c:	beq	160c4 <__assert_fail@plt+0x5008>
   160a0:	mov	r1, #-2147483648	; 0x80000000
   160a4:	sdiv	r1, r1, r5
   160a8:	cmp	r1, r4
   160ac:	bge	160c4 <__assert_fail@plt+0x5008>
   160b0:	bl	161c8 <__assert_fail@plt+0x510c>
   160b4:	mvn	r1, #-2147483648	; 0x80000000
   160b8:	sdiv	r1, r1, r4
   160bc:	cmp	r5, r1
   160c0:	blt	160b0 <__assert_fail@plt+0x4ff4>
   160c4:	mul	r1, r5, r4
   160c8:	bl	15e58 <__assert_fail@plt+0x4d9c>
   160cc:	str	r5, [r8]
   160d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   160d4:	mov	r1, #1
   160d8:	b	160dc <__assert_fail@plt+0x5020>
   160dc:	push	{fp, lr}
   160e0:	mov	fp, sp
   160e4:	bl	16748 <__assert_fail@plt+0x568c>
   160e8:	bl	15e2c <__assert_fail@plt+0x4d70>
   160ec:	pop	{fp, pc}
   160f0:	mov	r1, #1
   160f4:	b	160f8 <__assert_fail@plt+0x503c>
   160f8:	push	{fp, lr}
   160fc:	mov	fp, sp
   16100:	bl	16db4 <__assert_fail@plt+0x5cf8>
   16104:	bl	15e2c <__assert_fail@plt+0x4d70>
   16108:	pop	{fp, pc}
   1610c:	push	{r4, r5, r6, sl, fp, lr}
   16110:	add	fp, sp, #16
   16114:	mov	r4, r1
   16118:	mov	r5, r0
   1611c:	mov	r0, r1
   16120:	bl	15e18 <__assert_fail@plt+0x4d5c>
   16124:	mov	r6, r0
   16128:	mov	r1, r5
   1612c:	mov	r2, r4
   16130:	bl	10eac <memcpy@plt>
   16134:	mov	r0, r6
   16138:	pop	{r4, r5, r6, sl, fp, pc}
   1613c:	push	{r4, r5, r6, sl, fp, lr}
   16140:	add	fp, sp, #16
   16144:	mov	r4, r1
   16148:	mov	r5, r0
   1614c:	mov	r0, r1
   16150:	bl	15e40 <__assert_fail@plt+0x4d84>
   16154:	mov	r6, r0
   16158:	mov	r1, r5
   1615c:	mov	r2, r4
   16160:	bl	10eac <memcpy@plt>
   16164:	mov	r0, r6
   16168:	pop	{r4, r5, r6, sl, fp, pc}
   1616c:	push	{r4, r5, r6, sl, fp, lr}
   16170:	add	fp, sp, #16
   16174:	mov	r4, r1
   16178:	mov	r5, r0
   1617c:	add	r0, r1, #1
   16180:	bl	15e40 <__assert_fail@plt+0x4d84>
   16184:	mov	r6, r0
   16188:	mov	r0, #0
   1618c:	strb	r0, [r6, r4]
   16190:	mov	r0, r6
   16194:	mov	r1, r5
   16198:	mov	r2, r4
   1619c:	bl	10eac <memcpy@plt>
   161a0:	mov	r0, r6
   161a4:	pop	{r4, r5, r6, sl, fp, pc}
   161a8:	push	{r4, sl, fp, lr}
   161ac:	add	fp, sp, #8
   161b0:	mov	r4, r0
   161b4:	bl	10fcc <strlen@plt>
   161b8:	add	r1, r0, #1
   161bc:	mov	r0, r4
   161c0:	pop	{r4, sl, fp, lr}
   161c4:	b	1610c <__assert_fail@plt+0x5050>
   161c8:	push	{fp, lr}
   161cc:	mov	fp, sp
   161d0:	movw	r0, #37108	; 0x90f4
   161d4:	movt	r0, #2
   161d8:	ldr	r4, [r0]
   161dc:	movw	r1, #35616	; 0x8b20
   161e0:	movt	r1, #1
   161e4:	mov	r0, #0
   161e8:	mov	r2, #5
   161ec:	bl	10ef4 <dcgettext@plt>
   161f0:	mov	r3, r0
   161f4:	movw	r2, #34579	; 0x8713
   161f8:	movt	r2, #1
   161fc:	mov	r0, r4
   16200:	mov	r1, #0
   16204:	bl	10f6c <error@plt>
   16208:	bl	110a4 <abort@plt>
   1620c:	bx	lr
   16210:	b	16828 <__assert_fail@plt+0x576c>
   16214:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16218:	add	fp, sp, #28
   1621c:	sub	sp, sp, #20
   16220:	cmp	r2, #37	; 0x25
   16224:	bcs	16654 <__assert_fail@plt+0x5598>
   16228:	mov	r5, r2
   1622c:	mov	r6, r1
   16230:	mov	r4, r0
   16234:	str	r3, [sp, #4]
   16238:	ldr	sl, [fp, #8]
   1623c:	bl	10fe4 <__errno_location@plt>
   16240:	mov	r7, r0
   16244:	mov	r0, #0
   16248:	str	r0, [r7]
   1624c:	bl	10fb4 <__ctype_b_loc@plt>
   16250:	ldr	r1, [r0]
   16254:	mov	r2, r4
   16258:	ldrb	r0, [r2], #1
   1625c:	add	r3, r1, r0, lsl #1
   16260:	ldrb	r3, [r3, #1]
   16264:	tst	r3, #32
   16268:	bne	16258 <__assert_fail@plt+0x519c>
   1626c:	add	r9, sp, #16
   16270:	cmp	r6, #0
   16274:	movne	r9, r6
   16278:	mov	r8, #4
   1627c:	cmp	r0, #45	; 0x2d
   16280:	beq	16648 <__assert_fail@plt+0x558c>
   16284:	mov	r0, r4
   16288:	mov	r1, r9
   1628c:	mov	r2, r5
   16290:	bl	1102c <strtoumax@plt>
   16294:	str	r1, [sp, #12]
   16298:	str	r0, [sp, #8]
   1629c:	ldr	r6, [r9]
   162a0:	cmp	r6, r4
   162a4:	beq	162cc <__assert_fail@plt+0x5210>
   162a8:	ldr	r0, [r7]
   162ac:	cmp	r0, #0
   162b0:	beq	16300 <__assert_fail@plt+0x5244>
   162b4:	cmp	r0, #34	; 0x22
   162b8:	bne	16648 <__assert_fail@plt+0x558c>
   162bc:	mov	r8, #1
   162c0:	cmp	sl, #0
   162c4:	bne	1630c <__assert_fail@plt+0x5250>
   162c8:	b	16638 <__assert_fail@plt+0x557c>
   162cc:	cmp	sl, #0
   162d0:	ldrbne	r1, [r6]
   162d4:	cmpne	r1, #0
   162d8:	beq	16648 <__assert_fail@plt+0x558c>
   162dc:	mov	r0, sl
   162e0:	bl	10fd8 <strchr@plt>
   162e4:	cmp	r0, #0
   162e8:	beq	16648 <__assert_fail@plt+0x558c>
   162ec:	mov	r8, #0
   162f0:	str	r8, [sp, #12]
   162f4:	mov	r0, #1
   162f8:	str	r0, [sp, #8]
   162fc:	b	1630c <__assert_fail@plt+0x5250>
   16300:	mov	r8, r0
   16304:	cmp	sl, #0
   16308:	beq	16638 <__assert_fail@plt+0x557c>
   1630c:	ldrb	r4, [r6]
   16310:	cmp	r4, #0
   16314:	beq	16638 <__assert_fail@plt+0x557c>
   16318:	mov	r0, sl
   1631c:	mov	r1, r4
   16320:	bl	10fd8 <strchr@plt>
   16324:	cmp	r0, #0
   16328:	beq	16538 <__assert_fail@plt+0x547c>
   1632c:	sub	r0, r4, #69	; 0x45
   16330:	mov	r7, #1
   16334:	mov	r5, #1024	; 0x400
   16338:	cmp	r0, #47	; 0x2f
   1633c:	bhi	16434 <__assert_fail@plt+0x5378>
   16340:	add	r1, pc, #0
   16344:	ldr	pc, [r1, r0, lsl #2]
   16348:	andeq	r6, r1, r8, lsl #8
   1634c:	andeq	r6, r1, r4, lsr r4
   16350:	andeq	r6, r1, r8, lsl #8
   16354:	andeq	r6, r1, r4, lsr r4
   16358:	andeq	r6, r1, r4, lsr r4
   1635c:	andeq	r6, r1, r4, lsr r4
   16360:	andeq	r6, r1, r8, lsl #8
   16364:	andeq	r6, r1, r4, lsr r4
   16368:	andeq	r6, r1, r8, lsl #8
   1636c:	andeq	r6, r1, r4, lsr r4
   16370:	andeq	r6, r1, r4, lsr r4
   16374:	andeq	r6, r1, r8, lsl #8
   16378:	andeq	r6, r1, r4, lsr r4
   1637c:	andeq	r6, r1, r4, lsr r4
   16380:	andeq	r6, r1, r4, lsr r4
   16384:	andeq	r6, r1, r8, lsl #8
   16388:	andeq	r6, r1, r4, lsr r4
   1638c:	andeq	r6, r1, r4, lsr r4
   16390:	andeq	r6, r1, r4, lsr r4
   16394:	andeq	r6, r1, r4, lsr r4
   16398:	andeq	r6, r1, r8, lsl #8
   1639c:	andeq	r6, r1, r8, lsl #8
   163a0:	andeq	r6, r1, r4, lsr r4
   163a4:	andeq	r6, r1, r4, lsr r4
   163a8:	andeq	r6, r1, r4, lsr r4
   163ac:	andeq	r6, r1, r4, lsr r4
   163b0:	andeq	r6, r1, r4, lsr r4
   163b4:	andeq	r6, r1, r4, lsr r4
   163b8:	andeq	r6, r1, r4, lsr r4
   163bc:	andeq	r6, r1, r4, lsr r4
   163c0:	andeq	r6, r1, r4, lsr r4
   163c4:	andeq	r6, r1, r4, lsr r4
   163c8:	andeq	r6, r1, r4, lsr r4
   163cc:	andeq	r6, r1, r4, lsr r4
   163d0:	andeq	r6, r1, r8, lsl #8
   163d4:	andeq	r6, r1, r4, lsr r4
   163d8:	andeq	r6, r1, r4, lsr r4
   163dc:	andeq	r6, r1, r4, lsr r4
   163e0:	andeq	r6, r1, r8, lsl #8
   163e4:	andeq	r6, r1, r4, lsr r4
   163e8:	andeq	r6, r1, r8, lsl #8
   163ec:	andeq	r6, r1, r4, lsr r4
   163f0:	andeq	r6, r1, r4, lsr r4
   163f4:	andeq	r6, r1, r4, lsr r4
   163f8:	andeq	r6, r1, r4, lsr r4
   163fc:	andeq	r6, r1, r4, lsr r4
   16400:	andeq	r6, r1, r4, lsr r4
   16404:	andeq	r6, r1, r8, lsl #8
   16408:	mov	r0, sl
   1640c:	mov	r1, #48	; 0x30
   16410:	bl	10fd8 <strchr@plt>
   16414:	cmp	r0, #0
   16418:	beq	16434 <__assert_fail@plt+0x5378>
   1641c:	ldrb	r0, [r6, #1]
   16420:	cmp	r0, #66	; 0x42
   16424:	cmpne	r0, #68	; 0x44
   16428:	bne	16550 <__assert_fail@plt+0x5494>
   1642c:	mov	r7, #2
   16430:	mov	r5, #1000	; 0x3e8
   16434:	sub	r1, r4, #66	; 0x42
   16438:	cmp	r1, #53	; 0x35
   1643c:	bhi	16538 <__assert_fail@plt+0x547c>
   16440:	mov	r0, #0
   16444:	add	r2, pc, #0
   16448:	ldr	pc, [r2, r1, lsl #2]
   1644c:			; <UNDEFINED> instruction: 0x000165bc
   16450:	andeq	r6, r1, r8, lsr r5
   16454:	andeq	r6, r1, r8, lsr r5
   16458:	andeq	r6, r1, r8, asr #11
   1645c:	andeq	r6, r1, r8, lsr r5
   16460:	andeq	r6, r1, r4, lsr #10
   16464:	andeq	r6, r1, r8, lsr r5
   16468:	andeq	r6, r1, r8, lsr r5
   1646c:	andeq	r6, r1, r8, lsr r5
   16470:	andeq	r6, r1, ip, ror #10
   16474:	andeq	r6, r1, r8, lsr r5
   16478:	andeq	r6, r1, r0, lsl #11
   1647c:	andeq	r6, r1, r8, lsr r5
   16480:	andeq	r6, r1, r8, lsr r5
   16484:	ldrdeq	r6, [r1], -ip
   16488:	andeq	r6, r1, r8, lsr r5
   1648c:	andeq	r6, r1, r8, lsr r5
   16490:	andeq	r6, r1, r8, lsr r5
   16494:	muleq	r1, r4, r5
   16498:	andeq	r6, r1, r8, lsr r5
   1649c:	andeq	r6, r1, r8, lsr r5
   164a0:	andeq	r6, r1, r8, lsr r5
   164a4:	andeq	r6, r1, r8, lsr r5
   164a8:	strdeq	r6, [r1], -r0
   164ac:	andeq	r6, r1, r8, lsr #11
   164b0:	andeq	r6, r1, r8, lsr r5
   164b4:	andeq	r6, r1, r8, lsr r5
   164b8:	andeq	r6, r1, r8, lsr r5
   164bc:	andeq	r6, r1, r8, lsr r5
   164c0:	andeq	r6, r1, r8, lsr r5
   164c4:	andeq	r6, r1, r8, lsr r5
   164c8:	andeq	r6, r1, r8, lsr r5
   164cc:	andeq	r6, r1, r4, lsl #12
   164d0:	andeq	r6, r1, ip, lsl r6
   164d4:	andeq	r6, r1, r8, lsr r5
   164d8:	andeq	r6, r1, r8, lsr r5
   164dc:	andeq	r6, r1, r8, lsr r5
   164e0:	andeq	r6, r1, r4, lsr #10
   164e4:	andeq	r6, r1, r8, lsr r5
   164e8:	andeq	r6, r1, r8, lsr r5
   164ec:	andeq	r6, r1, r8, lsr r5
   164f0:	andeq	r6, r1, ip, ror #10
   164f4:	andeq	r6, r1, r8, lsr r5
   164f8:	andeq	r6, r1, r0, lsl #11
   164fc:	andeq	r6, r1, r8, lsr r5
   16500:	andeq	r6, r1, r8, lsr r5
   16504:	andeq	r6, r1, r8, lsr r5
   16508:	andeq	r6, r1, r8, lsr r5
   1650c:	andeq	r6, r1, r8, lsr r5
   16510:	andeq	r6, r1, r8, lsr r5
   16514:	muleq	r1, r4, r5
   16518:	andeq	r6, r1, r8, lsr r5
   1651c:	andeq	r6, r1, r8, lsr r5
   16520:	andeq	r6, r1, r0, lsl r6
   16524:	add	r0, sp, #8
   16528:	mov	r1, r5
   1652c:	mov	r2, #3
   16530:	bl	16700 <__assert_fail@plt+0x5644>
   16534:	b	1661c <__assert_fail@plt+0x5560>
   16538:	ldr	r0, [sp, #8]
   1653c:	ldr	r1, [sp, #12]
   16540:	ldr	r2, [sp, #4]
   16544:	strd	r0, [r2]
   16548:	orr	r8, r8, #2
   1654c:	b	16648 <__assert_fail@plt+0x558c>
   16550:	cmp	r0, #105	; 0x69
   16554:	bne	16434 <__assert_fail@plt+0x5378>
   16558:	ldrb	r0, [r6, #2]
   1655c:	mov	r7, #1
   16560:	cmp	r0, #66	; 0x42
   16564:	movweq	r7, #3
   16568:	b	16434 <__assert_fail@plt+0x5378>
   1656c:	add	r0, sp, #8
   16570:	mov	r1, r5
   16574:	mov	r2, #1
   16578:	bl	16700 <__assert_fail@plt+0x5644>
   1657c:	b	1661c <__assert_fail@plt+0x5560>
   16580:	add	r0, sp, #8
   16584:	mov	r1, r5
   16588:	mov	r2, #2
   1658c:	bl	16700 <__assert_fail@plt+0x5644>
   16590:	b	1661c <__assert_fail@plt+0x5560>
   16594:	add	r0, sp, #8
   16598:	mov	r1, r5
   1659c:	mov	r2, #4
   165a0:	bl	16700 <__assert_fail@plt+0x5644>
   165a4:	b	1661c <__assert_fail@plt+0x5560>
   165a8:	add	r0, sp, #8
   165ac:	mov	r1, r5
   165b0:	mov	r2, #7
   165b4:	bl	16700 <__assert_fail@plt+0x5644>
   165b8:	b	1661c <__assert_fail@plt+0x5560>
   165bc:	add	r0, sp, #8
   165c0:	mov	r1, #1024	; 0x400
   165c4:	b	16618 <__assert_fail@plt+0x555c>
   165c8:	add	r0, sp, #8
   165cc:	mov	r1, r5
   165d0:	mov	r2, #6
   165d4:	bl	16700 <__assert_fail@plt+0x5644>
   165d8:	b	1661c <__assert_fail@plt+0x5560>
   165dc:	add	r0, sp, #8
   165e0:	mov	r1, r5
   165e4:	mov	r2, #5
   165e8:	bl	16700 <__assert_fail@plt+0x5644>
   165ec:	b	1661c <__assert_fail@plt+0x5560>
   165f0:	add	r0, sp, #8
   165f4:	mov	r1, r5
   165f8:	mov	r2, #8
   165fc:	bl	16700 <__assert_fail@plt+0x5644>
   16600:	b	1661c <__assert_fail@plt+0x5560>
   16604:	add	r0, sp, #8
   16608:	mov	r1, #512	; 0x200
   1660c:	b	16618 <__assert_fail@plt+0x555c>
   16610:	add	r0, sp, #8
   16614:	mov	r1, #2
   16618:	bl	16674 <__assert_fail@plt+0x55b8>
   1661c:	ldr	r1, [r9]
   16620:	add	r2, r1, r7
   16624:	str	r2, [r9]
   16628:	ldrb	r1, [r1, r7]
   1662c:	orr	r8, r0, r8
   16630:	cmp	r1, #0
   16634:	orrne	r8, r8, #2
   16638:	ldr	r0, [sp, #8]
   1663c:	ldr	r1, [sp, #12]
   16640:	ldr	r2, [sp, #4]
   16644:	strd	r0, [r2]
   16648:	mov	r0, r8
   1664c:	sub	sp, fp, #28
   16650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16654:	movw	r0, #35633	; 0x8b31
   16658:	movt	r0, #1
   1665c:	movw	r1, #35671	; 0x8b57
   16660:	movt	r1, #1
   16664:	movw	r3, #35687	; 0x8b67
   16668:	movt	r3, #1
   1666c:	mov	r2, #85	; 0x55
   16670:	bl	110bc <__assert_fail@plt>
   16674:	push	{r4, r5, r6, r7, fp, lr}
   16678:	add	fp, sp, #16
   1667c:	mov	r5, r1
   16680:	mov	r4, r0
   16684:	cmn	r1, #1
   16688:	ble	166c0 <__assert_fail@plt+0x5604>
   1668c:	cmp	r5, #0
   16690:	beq	166e0 <__assert_fail@plt+0x5624>
   16694:	asr	r3, r5, #31
   16698:	mvn	r6, #0
   1669c:	mvn	r0, #0
   166a0:	mvn	r1, #0
   166a4:	mov	r2, r5
   166a8:	bl	16fb8 <__assert_fail@plt+0x5efc>
   166ac:	ldrd	r2, [r4]
   166b0:	subs	r0, r0, r2
   166b4:	sbcs	r0, r1, r3
   166b8:	bcc	166d0 <__assert_fail@plt+0x5614>
   166bc:	b	166e0 <__assert_fail@plt+0x5624>
   166c0:	ldrd	r0, [r4]
   166c4:	orrs	r0, r0, r1
   166c8:	beq	166e0 <__assert_fail@plt+0x5624>
   166cc:	mvn	r6, #0
   166d0:	mov	r0, #1
   166d4:	mvn	r7, #0
   166d8:	strd	r6, [r4]
   166dc:	pop	{r4, r5, r6, r7, fp, pc}
   166e0:	ldrd	r0, [r4]
   166e4:	umull	r6, r2, r0, r5
   166e8:	asr	r3, r5, #31
   166ec:	mla	r0, r0, r3, r2
   166f0:	mla	r7, r1, r5, r0
   166f4:	mov	r0, #0
   166f8:	strd	r6, [r4]
   166fc:	pop	{r4, r5, r6, r7, fp, pc}
   16700:	push	{r4, r5, r6, r7, fp, lr}
   16704:	add	fp, sp, #16
   16708:	cmp	r2, #0
   1670c:	moveq	r6, #0
   16710:	moveq	r0, r6
   16714:	popeq	{r4, r5, r6, r7, fp, pc}
   16718:	mov	r4, r2
   1671c:	mov	r5, r1
   16720:	mov	r7, r0
   16724:	mov	r6, #0
   16728:	mov	r0, r7
   1672c:	mov	r1, r5
   16730:	bl	16674 <__assert_fail@plt+0x55b8>
   16734:	orr	r6, r0, r6
   16738:	subs	r4, r4, #1
   1673c:	bne	16728 <__assert_fail@plt+0x566c>
   16740:	mov	r0, r6
   16744:	pop	{r4, r5, r6, r7, fp, pc}
   16748:	clz	r2, r1
   1674c:	lsr	r2, r2, #5
   16750:	clz	r3, r0
   16754:	lsr	r3, r3, #5
   16758:	orrs	r2, r3, r2
   1675c:	movwne	r1, #1
   16760:	movwne	r0, #1
   16764:	cmp	r1, #0
   16768:	beq	16798 <__assert_fail@plt+0x56dc>
   1676c:	mvn	r2, #-2147483648	; 0x80000000
   16770:	udiv	r2, r2, r1
   16774:	cmp	r2, r0
   16778:	bcs	16798 <__assert_fail@plt+0x56dc>
   1677c:	push	{fp, lr}
   16780:	mov	fp, sp
   16784:	bl	10fe4 <__errno_location@plt>
   16788:	mov	r1, #12
   1678c:	str	r1, [r0]
   16790:	mov	r0, #0
   16794:	pop	{fp, pc}
   16798:	b	10e40 <calloc@plt>
   1679c:	cmp	r0, #0
   167a0:	movweq	r0, #1
   167a4:	cmn	r0, #1
   167a8:	ble	167b0 <__assert_fail@plt+0x56f4>
   167ac:	b	10f78 <malloc@plt>
   167b0:	push	{fp, lr}
   167b4:	mov	fp, sp
   167b8:	bl	10fe4 <__errno_location@plt>
   167bc:	mov	r1, #12
   167c0:	str	r1, [r0]
   167c4:	mov	r0, #0
   167c8:	pop	{fp, pc}
   167cc:	push	{fp, lr}
   167d0:	mov	fp, sp
   167d4:	cmp	r0, #0
   167d8:	beq	167f4 <__assert_fail@plt+0x5738>
   167dc:	cmp	r1, #0
   167e0:	beq	16800 <__assert_fail@plt+0x5744>
   167e4:	cmn	r1, #1
   167e8:	ble	1680c <__assert_fail@plt+0x5750>
   167ec:	pop	{fp, lr}
   167f0:	b	10f00 <realloc@plt>
   167f4:	mov	r0, r1
   167f8:	pop	{fp, lr}
   167fc:	b	1679c <__assert_fail@plt+0x56e0>
   16800:	bl	13c4c <__assert_fail@plt+0x2b90>
   16804:	mov	r0, #0
   16808:	pop	{fp, pc}
   1680c:	bl	10fe4 <__errno_location@plt>
   16810:	mov	r1, #12
   16814:	str	r1, [r0]
   16818:	mov	r0, #0
   1681c:	pop	{fp, pc}
   16820:	mov	r0, #0
   16824:	bx	lr
   16828:	mov	r0, #0
   1682c:	bx	lr
   16830:	mov	r1, r0
   16834:	sub	r2, r0, #65	; 0x41
   16838:	mov	r0, #1
   1683c:	cmp	r2, #26
   16840:	subcs	r2, r1, #97	; 0x61
   16844:	cmpcs	r2, #26
   16848:	bcs	16850 <__assert_fail@plt+0x5794>
   1684c:	bx	lr
   16850:	sub	r1, r1, #48	; 0x30
   16854:	cmp	r1, #10
   16858:	movcs	r0, #0
   1685c:	bx	lr
   16860:	mov	r1, r0
   16864:	sub	r2, r0, #65	; 0x41
   16868:	mov	r0, #1
   1686c:	cmp	r2, #26
   16870:	subcs	r1, r1, #97	; 0x61
   16874:	cmpcs	r1, #26
   16878:	movcs	r0, #0
   1687c:	bx	lr
   16880:	mov	r1, #0
   16884:	cmp	r0, #128	; 0x80
   16888:	movwcc	r1, #1
   1688c:	mov	r0, r1
   16890:	bx	lr
   16894:	sub	r1, r0, #9
   16898:	clz	r1, r1
   1689c:	lsr	r1, r1, #5
   168a0:	sub	r0, r0, #32
   168a4:	clz	r0, r0
   168a8:	lsr	r0, r0, #5
   168ac:	orr	r0, r0, r1
   168b0:	bx	lr
   168b4:	mov	r1, r0
   168b8:	mov	r0, #1
   168bc:	cmp	r1, #32
   168c0:	bxcc	lr
   168c4:	cmp	r1, #127	; 0x7f
   168c8:	movne	r0, #0
   168cc:	bx	lr
   168d0:	sub	r1, r0, #48	; 0x30
   168d4:	mov	r0, #0
   168d8:	cmp	r1, #10
   168dc:	movwcc	r0, #1
   168e0:	bx	lr
   168e4:	sub	r1, r0, #33	; 0x21
   168e8:	mov	r0, #0
   168ec:	cmp	r1, #94	; 0x5e
   168f0:	movwcc	r0, #1
   168f4:	bx	lr
   168f8:	sub	r1, r0, #97	; 0x61
   168fc:	mov	r0, #0
   16900:	cmp	r1, #26
   16904:	movwcc	r0, #1
   16908:	bx	lr
   1690c:	sub	r1, r0, #32
   16910:	mov	r0, #0
   16914:	cmp	r1, #95	; 0x5f
   16918:	movwcc	r0, #1
   1691c:	bx	lr
   16920:	sub	r1, r0, #33	; 0x21
   16924:	cmp	r1, #93	; 0x5d
   16928:	bhi	16ab4 <__assert_fail@plt+0x59f8>
   1692c:	mov	r0, #1
   16930:	add	r2, pc, #0
   16934:	ldr	pc, [r2, r1, lsl #2]
   16938:			; <UNDEFINED> instruction: 0x00016ab0
   1693c:			; <UNDEFINED> instruction: 0x00016ab0
   16940:			; <UNDEFINED> instruction: 0x00016ab0
   16944:			; <UNDEFINED> instruction: 0x00016ab0
   16948:			; <UNDEFINED> instruction: 0x00016ab0
   1694c:			; <UNDEFINED> instruction: 0x00016ab0
   16950:			; <UNDEFINED> instruction: 0x00016ab0
   16954:			; <UNDEFINED> instruction: 0x00016ab0
   16958:			; <UNDEFINED> instruction: 0x00016ab0
   1695c:			; <UNDEFINED> instruction: 0x00016ab0
   16960:			; <UNDEFINED> instruction: 0x00016ab0
   16964:			; <UNDEFINED> instruction: 0x00016ab0
   16968:			; <UNDEFINED> instruction: 0x00016ab0
   1696c:			; <UNDEFINED> instruction: 0x00016ab0
   16970:			; <UNDEFINED> instruction: 0x00016ab0
   16974:			; <UNDEFINED> instruction: 0x00016ab4
   16978:			; <UNDEFINED> instruction: 0x00016ab4
   1697c:			; <UNDEFINED> instruction: 0x00016ab4
   16980:			; <UNDEFINED> instruction: 0x00016ab4
   16984:			; <UNDEFINED> instruction: 0x00016ab4
   16988:			; <UNDEFINED> instruction: 0x00016ab4
   1698c:			; <UNDEFINED> instruction: 0x00016ab4
   16990:			; <UNDEFINED> instruction: 0x00016ab4
   16994:			; <UNDEFINED> instruction: 0x00016ab4
   16998:			; <UNDEFINED> instruction: 0x00016ab4
   1699c:			; <UNDEFINED> instruction: 0x00016ab0
   169a0:			; <UNDEFINED> instruction: 0x00016ab0
   169a4:			; <UNDEFINED> instruction: 0x00016ab0
   169a8:			; <UNDEFINED> instruction: 0x00016ab0
   169ac:			; <UNDEFINED> instruction: 0x00016ab0
   169b0:			; <UNDEFINED> instruction: 0x00016ab0
   169b4:			; <UNDEFINED> instruction: 0x00016ab0
   169b8:			; <UNDEFINED> instruction: 0x00016ab4
   169bc:			; <UNDEFINED> instruction: 0x00016ab4
   169c0:			; <UNDEFINED> instruction: 0x00016ab4
   169c4:			; <UNDEFINED> instruction: 0x00016ab4
   169c8:			; <UNDEFINED> instruction: 0x00016ab4
   169cc:			; <UNDEFINED> instruction: 0x00016ab4
   169d0:			; <UNDEFINED> instruction: 0x00016ab4
   169d4:			; <UNDEFINED> instruction: 0x00016ab4
   169d8:			; <UNDEFINED> instruction: 0x00016ab4
   169dc:			; <UNDEFINED> instruction: 0x00016ab4
   169e0:			; <UNDEFINED> instruction: 0x00016ab4
   169e4:			; <UNDEFINED> instruction: 0x00016ab4
   169e8:			; <UNDEFINED> instruction: 0x00016ab4
   169ec:			; <UNDEFINED> instruction: 0x00016ab4
   169f0:			; <UNDEFINED> instruction: 0x00016ab4
   169f4:			; <UNDEFINED> instruction: 0x00016ab4
   169f8:			; <UNDEFINED> instruction: 0x00016ab4
   169fc:			; <UNDEFINED> instruction: 0x00016ab4
   16a00:			; <UNDEFINED> instruction: 0x00016ab4
   16a04:			; <UNDEFINED> instruction: 0x00016ab4
   16a08:			; <UNDEFINED> instruction: 0x00016ab4
   16a0c:			; <UNDEFINED> instruction: 0x00016ab4
   16a10:			; <UNDEFINED> instruction: 0x00016ab4
   16a14:			; <UNDEFINED> instruction: 0x00016ab4
   16a18:			; <UNDEFINED> instruction: 0x00016ab4
   16a1c:			; <UNDEFINED> instruction: 0x00016ab4
   16a20:			; <UNDEFINED> instruction: 0x00016ab0
   16a24:			; <UNDEFINED> instruction: 0x00016ab0
   16a28:			; <UNDEFINED> instruction: 0x00016ab0
   16a2c:			; <UNDEFINED> instruction: 0x00016ab0
   16a30:			; <UNDEFINED> instruction: 0x00016ab0
   16a34:			; <UNDEFINED> instruction: 0x00016ab0
   16a38:			; <UNDEFINED> instruction: 0x00016ab4
   16a3c:			; <UNDEFINED> instruction: 0x00016ab4
   16a40:			; <UNDEFINED> instruction: 0x00016ab4
   16a44:			; <UNDEFINED> instruction: 0x00016ab4
   16a48:			; <UNDEFINED> instruction: 0x00016ab4
   16a4c:			; <UNDEFINED> instruction: 0x00016ab4
   16a50:			; <UNDEFINED> instruction: 0x00016ab4
   16a54:			; <UNDEFINED> instruction: 0x00016ab4
   16a58:			; <UNDEFINED> instruction: 0x00016ab4
   16a5c:			; <UNDEFINED> instruction: 0x00016ab4
   16a60:			; <UNDEFINED> instruction: 0x00016ab4
   16a64:			; <UNDEFINED> instruction: 0x00016ab4
   16a68:			; <UNDEFINED> instruction: 0x00016ab4
   16a6c:			; <UNDEFINED> instruction: 0x00016ab4
   16a70:			; <UNDEFINED> instruction: 0x00016ab4
   16a74:			; <UNDEFINED> instruction: 0x00016ab4
   16a78:			; <UNDEFINED> instruction: 0x00016ab4
   16a7c:			; <UNDEFINED> instruction: 0x00016ab4
   16a80:			; <UNDEFINED> instruction: 0x00016ab4
   16a84:			; <UNDEFINED> instruction: 0x00016ab4
   16a88:			; <UNDEFINED> instruction: 0x00016ab4
   16a8c:			; <UNDEFINED> instruction: 0x00016ab4
   16a90:			; <UNDEFINED> instruction: 0x00016ab4
   16a94:			; <UNDEFINED> instruction: 0x00016ab4
   16a98:			; <UNDEFINED> instruction: 0x00016ab4
   16a9c:			; <UNDEFINED> instruction: 0x00016ab4
   16aa0:			; <UNDEFINED> instruction: 0x00016ab0
   16aa4:			; <UNDEFINED> instruction: 0x00016ab0
   16aa8:			; <UNDEFINED> instruction: 0x00016ab0
   16aac:			; <UNDEFINED> instruction: 0x00016ab0
   16ab0:	bx	lr
   16ab4:	mov	r0, #0
   16ab8:	bx	lr
   16abc:	sub	r0, r0, #9
   16ac0:	cmp	r0, #23
   16ac4:	movhi	r0, #0
   16ac8:	bxhi	lr
   16acc:	bic	r0, r0, #-16777216	; 0xff000000
   16ad0:	movw	r1, #31
   16ad4:	movt	r1, #128	; 0x80
   16ad8:	mov	r2, #1
   16adc:	and	r0, r2, r1, lsr r0
   16ae0:	bx	lr
   16ae4:	sub	r1, r0, #65	; 0x41
   16ae8:	mov	r0, #0
   16aec:	cmp	r1, #26
   16af0:	movwcc	r0, #1
   16af4:	bx	lr
   16af8:	mov	r1, r0
   16afc:	sub	r2, r0, #48	; 0x30
   16b00:	mov	r0, #1
   16b04:	cmp	r2, #22
   16b08:	bhi	16b20 <__assert_fail@plt+0x5a64>
   16b0c:	mov	ip, #1
   16b10:	movw	r3, #1023	; 0x3ff
   16b14:	movt	r3, #126	; 0x7e
   16b18:	tst	r3, ip, lsl r2
   16b1c:	bxne	lr
   16b20:	sub	r1, r1, #97	; 0x61
   16b24:	cmp	r1, #6
   16b28:	movcs	r0, #0
   16b2c:	bxcs	lr
   16b30:	bx	lr
   16b34:	sub	r1, r0, #65	; 0x41
   16b38:	cmp	r1, #26
   16b3c:	addcc	r0, r0, #32
   16b40:	bx	lr
   16b44:	sub	r1, r0, #97	; 0x61
   16b48:	cmp	r1, #26
   16b4c:	subcc	r0, r0, #32
   16b50:	bx	lr
   16b54:	push	{r4, r5, r6, sl, fp, lr}
   16b58:	add	fp, sp, #16
   16b5c:	mov	r4, r0
   16b60:	bl	10f48 <__fpending@plt>
   16b64:	mov	r5, r0
   16b68:	mov	r0, r4
   16b6c:	bl	10f54 <ferror_unlocked@plt>
   16b70:	mov	r6, r0
   16b74:	mov	r0, r4
   16b78:	bl	16bdc <__assert_fail@plt+0x5b20>
   16b7c:	cmp	r6, #0
   16b80:	beq	16ba0 <__assert_fail@plt+0x5ae4>
   16b84:	mvn	r4, #0
   16b88:	cmp	r0, #0
   16b8c:	bne	16bd4 <__assert_fail@plt+0x5b18>
   16b90:	bl	10fe4 <__errno_location@plt>
   16b94:	mov	r1, #0
   16b98:	str	r1, [r0]
   16b9c:	b	16bd4 <__assert_fail@plt+0x5b18>
   16ba0:	cmp	r0, #0
   16ba4:	mov	r4, r0
   16ba8:	mvnne	r4, #0
   16bac:	cmp	r5, #0
   16bb0:	bne	16bd4 <__assert_fail@plt+0x5b18>
   16bb4:	cmp	r0, #0
   16bb8:	beq	16bd4 <__assert_fail@plt+0x5b18>
   16bbc:	bl	10fe4 <__errno_location@plt>
   16bc0:	ldr	r0, [r0]
   16bc4:	subs	r4, r0, #9
   16bc8:	mvnne	r4, #0
   16bcc:	mov	r0, r4
   16bd0:	pop	{r4, r5, r6, sl, fp, pc}
   16bd4:	mov	r0, r4
   16bd8:	pop	{r4, r5, r6, sl, fp, pc}
   16bdc:	push	{r4, r5, fp, lr}
   16be0:	add	fp, sp, #8
   16be4:	sub	sp, sp, #8
   16be8:	mov	r4, r0
   16bec:	bl	11020 <fileno@plt>
   16bf0:	cmn	r0, #1
   16bf4:	ble	16c6c <__assert_fail@plt+0x5bb0>
   16bf8:	mov	r0, r4
   16bfc:	bl	10f90 <__freading@plt>
   16c00:	cmp	r0, #0
   16c04:	beq	16c30 <__assert_fail@plt+0x5b74>
   16c08:	mov	r0, r4
   16c0c:	bl	11020 <fileno@plt>
   16c10:	mov	r1, #1
   16c14:	str	r1, [sp]
   16c18:	mov	r2, #0
   16c1c:	mov	r3, #0
   16c20:	bl	10f30 <lseek64@plt>
   16c24:	and	r0, r0, r1
   16c28:	cmn	r0, #1
   16c2c:	beq	16c6c <__assert_fail@plt+0x5bb0>
   16c30:	mov	r0, r4
   16c34:	bl	16c7c <__assert_fail@plt+0x5bc0>
   16c38:	cmp	r0, #0
   16c3c:	beq	16c6c <__assert_fail@plt+0x5bb0>
   16c40:	bl	10fe4 <__errno_location@plt>
   16c44:	ldr	r5, [r0]
   16c48:	mov	r0, r4
   16c4c:	bl	11044 <fclose@plt>
   16c50:	cmp	r5, #0
   16c54:	beq	16c64 <__assert_fail@plt+0x5ba8>
   16c58:	bl	10fe4 <__errno_location@plt>
   16c5c:	str	r5, [r0]
   16c60:	mvn	r0, #0
   16c64:	sub	sp, fp, #8
   16c68:	pop	{r4, r5, fp, pc}
   16c6c:	mov	r0, r4
   16c70:	sub	sp, fp, #8
   16c74:	pop	{r4, r5, fp, lr}
   16c78:	b	11044 <fclose@plt>
   16c7c:	push	{r4, sl, fp, lr}
   16c80:	add	fp, sp, #8
   16c84:	mov	r4, r0
   16c88:	cmp	r0, #0
   16c8c:	beq	16ca4 <__assert_fail@plt+0x5be8>
   16c90:	mov	r0, r4
   16c94:	bl	10f90 <__freading@plt>
   16c98:	cmp	r0, #0
   16c9c:	movne	r0, r4
   16ca0:	blne	16cb0 <__assert_fail@plt+0x5bf4>
   16ca4:	mov	r0, r4
   16ca8:	pop	{r4, sl, fp, lr}
   16cac:	b	10e88 <fflush@plt>
   16cb0:	ldrb	r1, [r0, #1]
   16cb4:	tst	r1, #1
   16cb8:	bxeq	lr
   16cbc:	push	{fp, lr}
   16cc0:	mov	fp, sp
   16cc4:	sub	sp, sp, #8
   16cc8:	mov	r1, #1
   16ccc:	str	r1, [sp]
   16cd0:	mov	r2, #0
   16cd4:	mov	r3, #0
   16cd8:	bl	16ce4 <__assert_fail@plt+0x5c28>
   16cdc:	mov	sp, fp
   16ce0:	pop	{fp, pc}
   16ce4:	push	{r4, r5, r6, r7, fp, lr}
   16ce8:	add	fp, sp, #16
   16cec:	sub	sp, sp, #8
   16cf0:	mov	r5, r3
   16cf4:	mov	r6, r2
   16cf8:	mov	r4, r0
   16cfc:	ldr	r0, [r0, #4]
   16d00:	ldr	r1, [r4, #8]
   16d04:	cmp	r1, r0
   16d08:	bne	16d24 <__assert_fail@plt+0x5c68>
   16d0c:	ldrd	r0, [r4, #16]
   16d10:	cmp	r1, r0
   16d14:	bne	16d24 <__assert_fail@plt+0x5c68>
   16d18:	ldr	r0, [r4, #36]	; 0x24
   16d1c:	cmp	r0, #0
   16d20:	beq	16d3c <__assert_fail@plt+0x5c80>
   16d24:	mov	r0, r4
   16d28:	mov	r2, r6
   16d2c:	mov	r3, r5
   16d30:	sub	sp, fp, #16
   16d34:	pop	{r4, r5, r6, r7, fp, lr}
   16d38:	b	11050 <fseeko64@plt>
   16d3c:	ldr	r7, [fp, #8]
   16d40:	mov	r0, r4
   16d44:	bl	11020 <fileno@plt>
   16d48:	str	r7, [sp]
   16d4c:	mov	r2, r6
   16d50:	mov	r3, r5
   16d54:	bl	10f30 <lseek64@plt>
   16d58:	and	r2, r0, r1
   16d5c:	cmn	r2, #1
   16d60:	mvneq	r0, #0
   16d64:	subeq	sp, fp, #16
   16d68:	popeq	{r4, r5, r6, r7, fp, pc}
   16d6c:	strd	r0, [r4, #80]	; 0x50
   16d70:	ldr	r0, [r4]
   16d74:	bic	r0, r0, #16
   16d78:	str	r0, [r4]
   16d7c:	mov	r0, #0
   16d80:	sub	sp, fp, #16
   16d84:	pop	{r4, r5, r6, r7, fp, pc}
   16d88:	push	{fp, lr}
   16d8c:	mov	fp, sp
   16d90:	bl	10fe4 <__errno_location@plt>
   16d94:	mov	r1, #12
   16d98:	str	r1, [r0]
   16d9c:	mov	r0, #0
   16da0:	pop	{fp, pc}
   16da4:	b	1679c <__assert_fail@plt+0x56e0>
   16da8:	cmp	r1, #0
   16dac:	orreq	r1, r1, #1
   16db0:	b	167cc <__assert_fail@plt+0x5710>
   16db4:	b	16748 <__assert_fail@plt+0x568c>
   16db8:	clz	r3, r2
   16dbc:	lsr	ip, r3, #5
   16dc0:	clz	r3, r1
   16dc4:	lsr	r3, r3, #5
   16dc8:	orrs	r3, r3, ip
   16dcc:	movwne	r1, #1
   16dd0:	movwne	r2, #1
   16dd4:	b	16e70 <__assert_fail@plt+0x5db4>
   16dd8:	push	{fp, lr}
   16ddc:	mov	fp, sp
   16de0:	mov	r0, #14
   16de4:	bl	11080 <nl_langinfo@plt>
   16de8:	movw	r1, #32183	; 0x7db7
   16dec:	movt	r1, #1
   16df0:	cmp	r0, #0
   16df4:	movne	r1, r0
   16df8:	ldrb	r2, [r1]
   16dfc:	movw	r0, #35766	; 0x8bb6
   16e00:	movt	r0, #1
   16e04:	cmp	r2, #0
   16e08:	movne	r0, r1
   16e0c:	pop	{fp, pc}
   16e10:	push	{r4, r5, r6, r7, fp, lr}
   16e14:	add	fp, sp, #16
   16e18:	sub	sp, sp, #8
   16e1c:	mov	r7, r2
   16e20:	mov	r4, r1
   16e24:	add	r5, sp, #4
   16e28:	cmp	r0, #0
   16e2c:	movne	r5, r0
   16e30:	mov	r0, r5
   16e34:	bl	10f60 <mbrtowc@plt>
   16e38:	mov	r6, r0
   16e3c:	cmp	r7, #0
   16e40:	beq	16e64 <__assert_fail@plt+0x5da8>
   16e44:	cmn	r6, #2
   16e48:	bcc	16e64 <__assert_fail@plt+0x5da8>
   16e4c:	mov	r0, #0
   16e50:	bl	16eac <__assert_fail@plt+0x5df0>
   16e54:	cmp	r0, #0
   16e58:	ldrbeq	r0, [r4]
   16e5c:	streq	r0, [r5]
   16e60:	moveq	r6, #1
   16e64:	mov	r0, r6
   16e68:	sub	sp, fp, #16
   16e6c:	pop	{r4, r5, r6, r7, fp, pc}
   16e70:	cmp	r2, #0
   16e74:	beq	16ea4 <__assert_fail@plt+0x5de8>
   16e78:	mvn	r3, #0
   16e7c:	udiv	r3, r3, r2
   16e80:	cmp	r3, r1
   16e84:	bcs	16ea4 <__assert_fail@plt+0x5de8>
   16e88:	push	{fp, lr}
   16e8c:	mov	fp, sp
   16e90:	bl	10fe4 <__errno_location@plt>
   16e94:	mov	r1, #12
   16e98:	str	r1, [r0]
   16e9c:	mov	r0, #0
   16ea0:	pop	{fp, pc}
   16ea4:	mul	r1, r2, r1
   16ea8:	b	167cc <__assert_fail@plt+0x5710>
   16eac:	push	{r4, sl, fp, lr}
   16eb0:	add	fp, sp, #8
   16eb4:	sub	sp, sp, #264	; 0x108
   16eb8:	add	r1, sp, #7
   16ebc:	movw	r2, #257	; 0x101
   16ec0:	bl	16f10 <__assert_fail@plt+0x5e54>
   16ec4:	mov	r4, #0
   16ec8:	cmp	r0, #0
   16ecc:	bne	16f04 <__assert_fail@plt+0x5e48>
   16ed0:	add	r0, sp, #7
   16ed4:	movw	r1, #31493	; 0x7b05
   16ed8:	movt	r1, #1
   16edc:	bl	10e64 <strcmp@plt>
   16ee0:	cmp	r0, #0
   16ee4:	beq	16f04 <__assert_fail@plt+0x5e48>
   16ee8:	add	r0, sp, #7
   16eec:	movw	r1, #35772	; 0x8bbc
   16ef0:	movt	r1, #1
   16ef4:	bl	10e64 <strcmp@plt>
   16ef8:	mov	r4, r0
   16efc:	cmp	r0, #0
   16f00:	movwne	r4, #1
   16f04:	mov	r0, r4
   16f08:	sub	sp, fp, #8
   16f0c:	pop	{r4, sl, fp, pc}
   16f10:	b	16f14 <__assert_fail@plt+0x5e58>
   16f14:	push	{r4, r5, r6, r7, fp, lr}
   16f18:	add	fp, sp, #16
   16f1c:	mov	r6, r2
   16f20:	mov	r4, r1
   16f24:	bl	16fb0 <__assert_fail@plt+0x5ef4>
   16f28:	cmp	r0, #0
   16f2c:	beq	16f5c <__assert_fail@plt+0x5ea0>
   16f30:	mov	r7, r0
   16f34:	bl	10fcc <strlen@plt>
   16f38:	cmp	r0, r6
   16f3c:	bcs	16f7c <__assert_fail@plt+0x5ec0>
   16f40:	add	r2, r0, #1
   16f44:	mov	r0, r4
   16f48:	mov	r1, r7
   16f4c:	bl	10eac <memcpy@plt>
   16f50:	mov	r5, #0
   16f54:	mov	r0, r5
   16f58:	pop	{r4, r5, r6, r7, fp, pc}
   16f5c:	mov	r5, #22
   16f60:	cmp	r6, #0
   16f64:	movne	r0, #0
   16f68:	strbne	r0, [r4]
   16f6c:	movne	r0, r5
   16f70:	popne	{r4, r5, r6, r7, fp, pc}
   16f74:	mov	r0, r5
   16f78:	pop	{r4, r5, r6, r7, fp, pc}
   16f7c:	mov	r5, #34	; 0x22
   16f80:	cmp	r6, #0
   16f84:	beq	16fa4 <__assert_fail@plt+0x5ee8>
   16f88:	sub	r6, r6, #1
   16f8c:	mov	r0, r4
   16f90:	mov	r1, r7
   16f94:	mov	r2, r6
   16f98:	bl	10eac <memcpy@plt>
   16f9c:	mov	r0, #0
   16fa0:	strb	r0, [r4, r6]
   16fa4:	mov	r0, r5
   16fa8:	pop	{r4, r5, r6, r7, fp, pc}
   16fac:	b	16fb0 <__assert_fail@plt+0x5ef4>
   16fb0:	mov	r1, #0
   16fb4:	b	1105c <setlocale@plt>
   16fb8:	cmp	r3, #0
   16fbc:	cmpeq	r2, #0
   16fc0:	bne	16fd8 <__assert_fail@plt+0x5f1c>
   16fc4:	cmp	r1, #0
   16fc8:	cmpeq	r0, #0
   16fcc:	mvnne	r1, #0
   16fd0:	mvnne	r0, #0
   16fd4:	b	16ff4 <__assert_fail@plt+0x5f38>
   16fd8:	sub	sp, sp, #8
   16fdc:	push	{sp, lr}
   16fe0:	bl	17004 <__assert_fail@plt+0x5f48>
   16fe4:	ldr	lr, [sp, #4]
   16fe8:	add	sp, sp, #8
   16fec:	pop	{r2, r3}
   16ff0:	bx	lr
   16ff4:	push	{r1, lr}
   16ff8:	mov	r0, #8
   16ffc:	bl	10e58 <raise@plt>
   17000:	pop	{r1, pc}
   17004:	cmp	r1, r3
   17008:	cmpeq	r0, r2
   1700c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17010:	mov	r4, r0
   17014:	movcc	r0, #0
   17018:	mov	r5, r1
   1701c:	ldr	lr, [sp, #36]	; 0x24
   17020:	movcc	r1, r0
   17024:	bcc	17120 <__assert_fail@plt+0x6064>
   17028:	cmp	r3, #0
   1702c:	clzeq	ip, r2
   17030:	clzne	ip, r3
   17034:	addeq	ip, ip, #32
   17038:	cmp	r5, #0
   1703c:	clzeq	r1, r4
   17040:	addeq	r1, r1, #32
   17044:	clzne	r1, r5
   17048:	sub	ip, ip, r1
   1704c:	sub	sl, ip, #32
   17050:	lsl	r9, r3, ip
   17054:	rsb	fp, ip, #32
   17058:	orr	r9, r9, r2, lsl sl
   1705c:	orr	r9, r9, r2, lsr fp
   17060:	lsl	r8, r2, ip
   17064:	cmp	r5, r9
   17068:	cmpeq	r4, r8
   1706c:	movcc	r0, #0
   17070:	movcc	r1, r0
   17074:	bcc	17090 <__assert_fail@plt+0x5fd4>
   17078:	mov	r0, #1
   1707c:	subs	r4, r4, r8
   17080:	lsl	r1, r0, sl
   17084:	orr	r1, r1, r0, lsr fp
   17088:	lsl	r0, r0, ip
   1708c:	sbc	r5, r5, r9
   17090:	cmp	ip, #0
   17094:	beq	17120 <__assert_fail@plt+0x6064>
   17098:	lsr	r6, r8, #1
   1709c:	orr	r6, r6, r9, lsl #31
   170a0:	lsr	r7, r9, #1
   170a4:	mov	r2, ip
   170a8:	b	170cc <__assert_fail@plt+0x6010>
   170ac:	subs	r3, r4, r6
   170b0:	sbc	r8, r5, r7
   170b4:	adds	r3, r3, r3
   170b8:	adc	r8, r8, r8
   170bc:	adds	r4, r3, #1
   170c0:	adc	r5, r8, #0
   170c4:	subs	r2, r2, #1
   170c8:	beq	170e8 <__assert_fail@plt+0x602c>
   170cc:	cmp	r5, r7
   170d0:	cmpeq	r4, r6
   170d4:	bcs	170ac <__assert_fail@plt+0x5ff0>
   170d8:	adds	r4, r4, r4
   170dc:	adc	r5, r5, r5
   170e0:	subs	r2, r2, #1
   170e4:	bne	170cc <__assert_fail@plt+0x6010>
   170e8:	lsr	r3, r4, ip
   170ec:	orr	r3, r3, r5, lsl fp
   170f0:	lsr	r2, r5, ip
   170f4:	orr	r3, r3, r5, lsr sl
   170f8:	adds	r0, r0, r4
   170fc:	mov	r4, r3
   17100:	lsl	r3, r2, ip
   17104:	orr	r3, r3, r4, lsl sl
   17108:	lsl	ip, r4, ip
   1710c:	orr	r3, r3, r4, lsr fp
   17110:	adc	r1, r1, r5
   17114:	subs	r0, r0, ip
   17118:	mov	r5, r2
   1711c:	sbc	r1, r1, r3
   17120:	cmp	lr, #0
   17124:	strdne	r4, [lr]
   17128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1712c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17130:	mov	r7, r0
   17134:	ldr	r6, [pc, #72]	; 17184 <__assert_fail@plt+0x60c8>
   17138:	ldr	r5, [pc, #72]	; 17188 <__assert_fail@plt+0x60cc>
   1713c:	add	r6, pc, r6
   17140:	add	r5, pc, r5
   17144:	sub	r6, r6, r5
   17148:	mov	r8, r1
   1714c:	mov	r9, r2
   17150:	bl	10e20 <calloc@plt-0x20>
   17154:	asrs	r6, r6, #2
   17158:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1715c:	mov	r4, #0
   17160:	add	r4, r4, #1
   17164:	ldr	r3, [r5], #4
   17168:	mov	r2, r9
   1716c:	mov	r1, r8
   17170:	mov	r0, r7
   17174:	blx	r3
   17178:	cmp	r6, r4
   1717c:	bne	17160 <__assert_fail@plt+0x60a4>
   17180:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17184:	andeq	r1, r1, r8, asr #27
   17188:	andeq	r1, r1, r0, asr #27
   1718c:	bx	lr
   17190:	ldr	r3, [pc, #12]	; 171a4 <__assert_fail@plt+0x60e8>
   17194:	mov	r1, #0
   17198:	add	r3, pc, r3
   1719c:	ldr	r2, [r3]
   171a0:	b	10ffc <__cxa_atexit@plt>
   171a4:	andeq	r1, r1, ip, asr #30

Disassembly of section .fini:

000171a8 <.fini>:
   171a8:	push	{r3, lr}
   171ac:	pop	{r3, pc}
