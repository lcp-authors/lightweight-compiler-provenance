
../repos/prog2/7.1:     file format elf32-littlearm


Disassembly of section .init:

00010c28 <.init>:
   10c28:	push	{r3, lr}
   10c2c:	bl	10ef8 <_start@@Base+0x3c>
   10c30:	pop	{r3, pc}

Disassembly of section .plt:

00010c34 <strcmp@plt-0x14>:
   10c34:	push	{lr}		; (str lr, [sp, #-4]!)
   10c38:	ldr	lr, [pc, #4]	; 10c44 <strcmp@plt-0x4>
   10c3c:	add	lr, pc, lr
   10c40:	ldr	pc, [lr, #8]!
   10c44:			; <UNDEFINED> instruction: 0x000113bc

00010c48 <strcmp@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #69632	; 0x11000
   10c50:	ldr	pc, [ip, #956]!	; 0x3bc

00010c54 <printf@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #69632	; 0x11000
   10c5c:	ldr	pc, [ip, #948]!	; 0x3b4

00010c60 <fopen@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #69632	; 0x11000
   10c68:	ldr	pc, [ip, #940]!	; 0x3ac

00010c6c <free@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #69632	; 0x11000
   10c74:	ldr	pc, [ip, #932]!	; 0x3a4

00010c78 <fgets@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #69632	; 0x11000
   10c80:	ldr	pc, [ip, #924]!	; 0x39c

00010c84 <realloc@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #69632	; 0x11000
   10c8c:	ldr	pc, [ip, #916]!	; 0x394

00010c90 <strcpy@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #69632	; 0x11000
   10c98:	ldr	pc, [ip, #908]!	; 0x38c

00010c9c <puts@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #69632	; 0x11000
   10ca4:	ldr	pc, [ip, #900]!	; 0x384

00010ca8 <malloc@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #69632	; 0x11000
   10cb0:	ldr	pc, [ip, #892]!	; 0x37c

00010cb4 <__libc_start_main@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #69632	; 0x11000
   10cbc:	ldr	pc, [ip, #884]!	; 0x374

00010cc0 <__gmon_start__@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #69632	; 0x11000
   10cc8:	ldr	pc, [ip, #876]!	; 0x36c

00010ccc <strlen@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #69632	; 0x11000
   10cd4:	ldr	pc, [ip, #868]!	; 0x364

00010cd8 <putchar@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #69632	; 0x11000
   10ce0:	ldr	pc, [ip, #860]!	; 0x35c

00010ce4 <fclose@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #69632	; 0x11000
   10cec:	ldr	pc, [ip, #852]!	; 0x354

00010cf0 <strtok@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #69632	; 0x11000
   10cf8:	ldr	pc, [ip, #844]!	; 0x34c

00010cfc <abort@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #69632	; 0x11000
   10d04:	ldr	pc, [ip, #836]!	; 0x344

Disassembly of section .text:

00010d08 <main@@Base>:
   10d08:	push	{r4, r5, r6, lr}
   10d0c:	sub	sp, sp, #144	; 0x90
   10d10:	mov	r5, #0
   10d14:	add	r6, sp, #4
   10d18:	ldr	r0, [pc, #368]	; 10e90 <main@@Base+0x188>
   10d1c:	bl	10c9c <puts@plt>
   10d20:	ldr	lr, [pc, #364]	; 10e94 <main@@Base+0x18c>
   10d24:	add	ip, sp, #4
   10d28:	ldm	lr!, {r0, r1, r2, r3}
   10d2c:	stmia	ip!, {r0, r1, r2, r3}
   10d30:	ldm	lr!, {r0, r1, r2, r3}
   10d34:	stmia	ip!, {r0, r1, r2, r3}
   10d38:	ldm	lr, {r0, r1}
   10d3c:	stm	ip, {r0, r1}
   10d40:	bl	115bc <bst_nova@@Base>
   10d44:	mov	r4, r0
   10d48:	mov	r0, r4
   10d4c:	add	r5, r5, #1
   10d50:	ldr	r1, [r6], #4
   10d54:	bl	1174c <bst_insere@@Base>
   10d58:	cmp	r5, #10
   10d5c:	bne	10d48 <main@@Base+0x40>
   10d60:	ldr	r0, [r4]
   10d64:	bl	11904 <bst_altura@@Base>
   10d68:	mov	r1, r0
   10d6c:	ldr	r0, [pc, #292]	; 10e98 <main@@Base+0x190>
   10d70:	bl	10c54 <printf@plt>
   10d74:	mov	r0, r4
   10d78:	ldr	r6, [pc, #284]	; 10e9c <main@@Base+0x194>
   10d7c:	bl	11990 <bst_imprime@@Base>
   10d80:	ldr	r0, [pc, #280]	; 10ea0 <main@@Base+0x198>
   10d84:	bl	10c9c <puts@plt>
   10d88:	bl	10fac <avl_nova@@Base>
   10d8c:	mov	r4, r0
   10d90:	ldr	r1, [pc, #268]	; 10ea4 <main@@Base+0x19c>
   10d94:	ldr	r0, [pc, #268]	; 10ea8 <main@@Base+0x1a0>
   10d98:	bl	10c60 <fopen@plt>
   10d9c:	mov	r5, r0
   10da0:	mov	r2, r5
   10da4:	mov	r1, #100	; 0x64
   10da8:	add	r0, sp, #44	; 0x2c
   10dac:	bl	10c78 <fgets@plt>
   10db0:	cmp	r0, #0
   10db4:	bne	10e38 <main@@Base+0x130>
   10db8:	mov	r0, r5
   10dbc:	bl	10ce4 <fclose@plt>
   10dc0:	ldr	r1, [pc, #228]	; 10eac <main@@Base+0x1a4>
   10dc4:	mov	r0, r4
   10dc8:	bl	111b8 <avl_pesquisa@@Base>
   10dcc:	cmp	r0, #0
   10dd0:	beq	10de4 <main@@Base+0xdc>
   10dd4:	ldr	r1, [r0]
   10dd8:	ldr	r2, [r0, #16]
   10ddc:	ldr	r0, [pc, #204]	; 10eb0 <main@@Base+0x1a8>
   10de0:	bl	10c54 <printf@plt>
   10de4:	ldr	r1, [pc, #200]	; 10eb4 <main@@Base+0x1ac>
   10de8:	mov	r0, r4
   10dec:	bl	111b8 <avl_pesquisa@@Base>
   10df0:	cmp	r0, #0
   10df4:	beq	10e08 <main@@Base+0x100>
   10df8:	ldr	r1, [r0]
   10dfc:	ldr	r2, [r0, #16]
   10e00:	ldr	r0, [pc, #168]	; 10eb0 <main@@Base+0x1a8>
   10e04:	bl	10c54 <printf@plt>
   10e08:	ldr	r1, [pc, #168]	; 10eb8 <main@@Base+0x1b0>
   10e0c:	mov	r0, r4
   10e10:	bl	111b8 <avl_pesquisa@@Base>
   10e14:	cmp	r0, #0
   10e18:	beq	10e2c <main@@Base+0x124>
   10e1c:	ldr	r1, [r0]
   10e20:	ldr	r2, [r0, #16]
   10e24:	ldr	r0, [pc, #132]	; 10eb0 <main@@Base+0x1a8>
   10e28:	bl	10c54 <printf@plt>
   10e2c:	mov	r0, #0
   10e30:	add	sp, sp, #144	; 0x90
   10e34:	pop	{r4, r5, r6, pc}
   10e38:	mov	r1, r6
   10e3c:	add	r0, sp, #44	; 0x2c
   10e40:	bl	10cf0 <strtok@plt>
   10e44:	mov	r1, r0
   10e48:	add	r0, sp, #44	; 0x2c
   10e4c:	bl	10c90 <strcpy@plt>
   10e50:	mov	r1, r6
   10e54:	mov	r0, #0
   10e58:	bl	10cf0 <strtok@plt>
   10e5c:	mov	r1, r0
   10e60:	add	r0, sp, #44	; 0x2c
   10e64:	bl	10c90 <strcpy@plt>
   10e68:	add	r0, sp, #44	; 0x2c
   10e6c:	bl	10ccc <strlen@plt>
   10e70:	add	r3, sp, #144	; 0x90
   10e74:	add	r1, sp, #44	; 0x2c
   10e78:	add	r0, r3, r0
   10e7c:	mov	r3, #0
   10e80:	strb	r3, [r0, #-101]	; 0xffffff9b
   10e84:	mov	r0, r4
   10e88:	bl	112d8 <avl_insere@@Base>
   10e8c:	b	10da0 <main@@Base+0x98>
   10e90:	andeq	r1, r1, r4, asr sl
   10e94:	andeq	r1, r1, ip, lsr #20
   10e98:	andeq	r1, r1, r8, asr sl
   10e9c:	andeq	r1, r1, lr, ror sl
   10ea0:	andeq	r1, r1, ip, ror #20
   10ea4:	andeq	r1, r1, r0, ror sl
   10ea8:	andeq	r1, r1, r2, ror sl
   10eac:	andeq	r1, r1, r0, lsl #21
   10eb0:	andeq	r1, r1, r9, lsl #21
   10eb4:	muleq	r1, r2, sl
   10eb8:	muleq	r1, r8, sl

00010ebc <_start@@Base>:
   10ebc:	mov	fp, #0
   10ec0:	mov	lr, #0
   10ec4:	pop	{r1}		; (ldr r1, [sp], #4)
   10ec8:	mov	r2, sp
   10ecc:	push	{r2}		; (str r2, [sp, #-4]!)
   10ed0:	push	{r0}		; (str r0, [sp, #-4]!)
   10ed4:	ldr	ip, [pc, #16]	; 10eec <_start@@Base+0x30>
   10ed8:	push	{ip}		; (str ip, [sp, #-4]!)
   10edc:	ldr	r0, [pc, #12]	; 10ef0 <_start@@Base+0x34>
   10ee0:	ldr	r3, [pc, #12]	; 10ef4 <_start@@Base+0x38>
   10ee4:	bl	10cb4 <__libc_start_main@plt>
   10ee8:	bl	10cfc <abort@plt>
   10eec:	andeq	r1, r1, ip, lsl sl
   10ef0:	andeq	r0, r1, r8, lsl #26
   10ef4:			; <UNDEFINED> instruction: 0x000119bc
   10ef8:	ldr	r3, [pc, #20]	; 10f14 <_start@@Base+0x58>
   10efc:	ldr	r2, [pc, #20]	; 10f18 <_start@@Base+0x5c>
   10f00:	add	r3, pc, r3
   10f04:	ldr	r2, [r3, r2]
   10f08:	cmp	r2, #0
   10f0c:	bxeq	lr
   10f10:	b	10cc0 <__gmon_start__@plt>
   10f14:	strdeq	r1, [r1], -r8
   10f18:	andeq	r0, r0, ip, asr #32
   10f1c:	ldr	r0, [pc, #24]	; 10f3c <_start@@Base+0x80>
   10f20:	ldr	r3, [pc, #24]	; 10f40 <_start@@Base+0x84>
   10f24:	cmp	r3, r0
   10f28:	bxeq	lr
   10f2c:	ldr	r3, [pc, #16]	; 10f44 <_start@@Base+0x88>
   10f30:	cmp	r3, #0
   10f34:	bxeq	lr
   10f38:	bx	r3
   10f3c:	andeq	r2, r2, r8, asr r0
   10f40:	andeq	r2, r2, r8, asr r0
   10f44:	andeq	r0, r0, r0
   10f48:	ldr	r0, [pc, #36]	; 10f74 <_start@@Base+0xb8>
   10f4c:	ldr	r1, [pc, #36]	; 10f78 <_start@@Base+0xbc>
   10f50:	sub	r1, r1, r0
   10f54:	asr	r1, r1, #2
   10f58:	add	r1, r1, r1, lsr #31
   10f5c:	asrs	r1, r1, #1
   10f60:	bxeq	lr
   10f64:	ldr	r3, [pc, #16]	; 10f7c <_start@@Base+0xc0>
   10f68:	cmp	r3, #0
   10f6c:	bxeq	lr
   10f70:	bx	r3
   10f74:	andeq	r2, r2, r8, asr r0
   10f78:	andeq	r2, r2, r8, asr r0
   10f7c:	andeq	r0, r0, r0
   10f80:	push	{r4, lr}
   10f84:	ldr	r4, [pc, #24]	; 10fa4 <_start@@Base+0xe8>
   10f88:	ldrb	r3, [r4]
   10f8c:	cmp	r3, #0
   10f90:	popne	{r4, pc}
   10f94:	bl	10f1c <_start@@Base+0x60>
   10f98:	mov	r3, #1
   10f9c:	strb	r3, [r4]
   10fa0:	pop	{r4, pc}
   10fa4:	andeq	r2, r2, r8, asr r0
   10fa8:	b	10f48 <_start@@Base+0x8c>

00010fac <avl_nova@@Base>:
   10fac:	push	{r4, lr}
   10fb0:	mov	r0, #4
   10fb4:	bl	10ca8 <malloc@plt>
   10fb8:	cmp	r0, #0
   10fbc:	movne	r3, #0
   10fc0:	strne	r3, [r0]
   10fc4:	pop	{r4, pc}

00010fc8 <avl_min@@Base>:
   10fc8:	cmp	r0, #0
   10fcc:	ldrne	r3, [r0]
   10fd0:	bxeq	lr
   10fd4:	ldr	r2, [r3, #4]
   10fd8:	cmp	r2, #0
   10fdc:	bne	10fe8 <avl_min@@Base+0x20>
   10fe0:	ldr	r0, [r3]
   10fe4:	bx	lr
   10fe8:	mov	r3, r2
   10fec:	b	10fd4 <avl_min@@Base+0xc>

00010ff0 <avl_max@@Base>:
   10ff0:	cmp	r0, #0
   10ff4:	ldrne	r3, [r0]
   10ff8:	bxeq	lr
   10ffc:	ldr	r2, [r3, #8]
   11000:	cmp	r2, #0
   11004:	bne	11010 <avl_max@@Base+0x20>
   11008:	ldr	r0, [r3]
   1100c:	bx	lr
   11010:	mov	r3, r2
   11014:	b	10ffc <avl_max@@Base+0xc>

00011018 <avl_altura@@Base>:
   11018:	cmp	r0, #0
   1101c:	ldrne	r0, [r0, #12]
   11020:	mvneq	r0, #0
   11024:	bx	lr

00011028 <max@@Base>:
   11028:	cmp	r1, r0
   1102c:	movge	r0, r1
   11030:	bx	lr

00011034 <avl_novo_no@@Base>:
   11034:	push	{r4, r5, r6, lr}
   11038:	mov	r5, r0
   1103c:	mov	r0, #20
   11040:	bl	10ca8 <malloc@plt>
   11044:	mov	r4, r0
   11048:	mov	r0, r5
   1104c:	bl	10ccc <strlen@plt>
   11050:	add	r0, r0, #1
   11054:	bl	10ca8 <malloc@plt>
   11058:	mov	r1, r5
   1105c:	str	r0, [r4]
   11060:	bl	10c90 <strcpy@plt>
   11064:	mov	r3, #0
   11068:	mov	r0, r4
   1106c:	str	r3, [r4, #4]
   11070:	str	r3, [r4, #8]
   11074:	str	r3, [r4, #12]
   11078:	mov	r3, #1
   1107c:	str	r3, [r4, #16]
   11080:	pop	{r4, r5, r6, pc}

00011084 <roda_direita@@Base>:
   11084:	ldr	r2, [r0, #4]
   11088:	ldr	r3, [r2, #8]
   1108c:	str	r0, [r2, #8]
   11090:	cmp	r3, #0
   11094:	str	r3, [r0, #4]
   11098:	ldrne	r1, [r3, #12]
   1109c:	mvneq	r1, #0
   110a0:	ldr	r3, [r0, #8]
   110a4:	cmp	r3, #0
   110a8:	ldrne	r3, [r3, #12]
   110ac:	mvneq	r3, #0
   110b0:	cmp	r3, r1
   110b4:	movlt	r3, r1
   110b8:	ldr	r1, [r2, #4]
   110bc:	add	r3, r3, #1
   110c0:	str	r3, [r0, #12]
   110c4:	mov	r0, r2
   110c8:	cmp	r1, #0
   110cc:	ldrne	r1, [r1, #12]
   110d0:	mvneq	r1, #0
   110d4:	cmp	r3, r1
   110d8:	movlt	r3, r1
   110dc:	add	r3, r3, #1
   110e0:	str	r3, [r2, #12]
   110e4:	bx	lr

000110e8 <roda_esquerda@@Base>:
   110e8:	ldr	r2, [r0, #8]
   110ec:	ldr	r3, [r2, #4]
   110f0:	str	r0, [r2, #4]
   110f4:	ldr	r1, [r0, #4]
   110f8:	str	r3, [r0, #8]
   110fc:	cmp	r1, #0
   11100:	ldrne	r1, [r1, #12]
   11104:	mvneq	r1, #0
   11108:	cmp	r3, #0
   1110c:	mvneq	r3, #0
   11110:	ldrne	r3, [r3, #12]
   11114:	cmp	r3, r1
   11118:	movlt	r3, r1
   1111c:	ldr	r1, [r2, #8]
   11120:	add	r3, r3, #1
   11124:	str	r3, [r0, #12]
   11128:	mov	r0, r2
   1112c:	cmp	r1, #0
   11130:	ldrne	r1, [r1, #12]
   11134:	mvneq	r1, #0
   11138:	cmp	r3, r1
   1113c:	movlt	r3, r1
   11140:	add	r3, r3, #1
   11144:	str	r3, [r2, #12]
   11148:	bx	lr

0001114c <calc_balanceamento@@Base>:
   1114c:	cmp	r0, #0
   11150:	bxeq	lr
   11154:	ldr	r2, [r0, #4]
   11158:	ldr	r3, [r0, #8]
   1115c:	cmp	r3, #0
   11160:	ldrne	r3, [r3, #12]
   11164:	mvneq	r3, #0
   11168:	cmp	r2, #0
   1116c:	mvneq	r0, #0
   11170:	ldrne	r0, [r2, #12]
   11174:	sub	r0, r3, r0
   11178:	bx	lr

0001117c <avl_pesquisa_impl@@Base>:
   1117c:	push	{r4, r5, r6, lr}
   11180:	mov	r5, r1
   11184:	mov	r4, r0
   11188:	cmp	r4, #0
   1118c:	beq	111b0 <avl_pesquisa_impl@@Base+0x34>
   11190:	mov	r0, r5
   11194:	ldr	r1, [r4]
   11198:	bl	10c48 <strcmp@plt>
   1119c:	cmp	r0, #0
   111a0:	ldrlt	r4, [r4, #4]
   111a4:	blt	11188 <avl_pesquisa_impl@@Base+0xc>
   111a8:	ldrne	r4, [r4, #8]
   111ac:	bne	11188 <avl_pesquisa_impl@@Base+0xc>
   111b0:	mov	r0, r4
   111b4:	pop	{r4, r5, r6, pc}

000111b8 <avl_pesquisa@@Base>:
   111b8:	cmp	r1, #0
   111bc:	cmpne	r0, #0
   111c0:	beq	111cc <avl_pesquisa@@Base+0x14>
   111c4:	ldr	r0, [r0]
   111c8:	b	1117c <avl_pesquisa_impl@@Base>
   111cc:	mov	r0, #0
   111d0:	bx	lr

000111d4 <avl_insere_impl@@Base>:
   111d4:	push	{r4, r5, r6, lr}
   111d8:	subs	r4, r0, #0
   111dc:	bne	111ec <avl_insere_impl@@Base+0x18>
   111e0:	mov	r0, r1
   111e4:	pop	{r4, r5, r6, lr}
   111e8:	b	11034 <avl_novo_no@@Base>
   111ec:	mov	r0, r1
   111f0:	mov	r5, r1
   111f4:	ldr	r1, [r4]
   111f8:	bl	10c48 <strcmp@plt>
   111fc:	cmp	r0, #0
   11200:	bge	1127c <avl_insere_impl@@Base+0xa8>
   11204:	mov	r1, r5
   11208:	ldr	r0, [r4, #4]
   1120c:	bl	111d4 <avl_insere_impl@@Base>
   11210:	str	r0, [r4, #4]
   11214:	ldr	r1, [r4, #4]
   11218:	mov	r0, r4
   1121c:	ldr	r5, [r4, #8]
   11220:	cmp	r1, #0
   11224:	ldrne	r3, [r1, #12]
   11228:	mvneq	r3, #0
   1122c:	cmp	r5, #0
   11230:	ldrne	r2, [r5, #12]
   11234:	mvneq	r2, #0
   11238:	cmp	r3, r2
   1123c:	movlt	r3, r2
   11240:	add	r3, r3, #1
   11244:	str	r3, [r4, #12]
   11248:	bl	1114c <calc_balanceamento@@Base>
   1124c:	cmp	r0, #1
   11250:	ble	112a8 <avl_insere_impl@@Base+0xd4>
   11254:	mov	r0, r5
   11258:	bl	1114c <calc_balanceamento@@Base>
   1125c:	cmp	r0, #0
   11260:	bge	11270 <avl_insere_impl@@Base+0x9c>
   11264:	mov	r0, r5
   11268:	bl	11084 <roda_direita@@Base>
   1126c:	str	r0, [r4, #8]
   11270:	mov	r0, r4
   11274:	pop	{r4, r5, r6, lr}
   11278:	b	110e8 <roda_esquerda@@Base>
   1127c:	beq	11294 <avl_insere_impl@@Base+0xc0>
   11280:	mov	r1, r5
   11284:	ldr	r0, [r4, #8]
   11288:	bl	111d4 <avl_insere_impl@@Base>
   1128c:	str	r0, [r4, #8]
   11290:	b	11214 <avl_insere_impl@@Base+0x40>
   11294:	ldr	r3, [r4, #16]
   11298:	add	r3, r3, #1
   1129c:	str	r3, [r4, #16]
   112a0:	mov	r0, r4
   112a4:	pop	{r4, r5, r6, pc}
   112a8:	cmn	r0, #1
   112ac:	bge	112a0 <avl_insere_impl@@Base+0xcc>
   112b0:	mov	r0, r1
   112b4:	bl	1114c <calc_balanceamento@@Base>
   112b8:	cmp	r0, #0
   112bc:	ble	112cc <avl_insere_impl@@Base+0xf8>
   112c0:	mov	r0, r1
   112c4:	bl	110e8 <roda_esquerda@@Base>
   112c8:	str	r0, [r4, #4]
   112cc:	mov	r0, r4
   112d0:	pop	{r4, r5, r6, lr}
   112d4:	b	11084 <roda_direita@@Base>

000112d8 <avl_insere@@Base>:
   112d8:	clz	r3, r1
   112dc:	cmp	r0, #0
   112e0:	push	{r4, r5, r6, lr}
   112e4:	lsr	r3, r3, #5
   112e8:	moveq	r4, #1
   112ec:	movne	r4, r3
   112f0:	cmp	r4, #0
   112f4:	bne	11310 <avl_insere@@Base+0x38>
   112f8:	mov	r5, r0
   112fc:	ldr	r0, [r0]
   11300:	bl	111d4 <avl_insere_impl@@Base>
   11304:	str	r0, [r5]
   11308:	mov	r0, r4
   1130c:	pop	{r4, r5, r6, pc}
   11310:	mvn	r0, #0
   11314:	pop	{r4, r5, r6, pc}

00011318 <avl_no_valormin@@Base>:
   11318:	ldr	r3, [r0, #4]
   1131c:	cmp	r3, #0
   11320:	bxeq	lr
   11324:	mov	r0, r3
   11328:	b	11318 <avl_no_valormin@@Base>

0001132c <avl_no_valormax@@Base>:
   1132c:	ldr	r3, [r0, #8]
   11330:	cmp	r3, #0
   11334:	bxeq	lr
   11338:	mov	r0, r3
   1133c:	b	1132c <avl_no_valormax@@Base>

00011340 <avl_remove_impl@@Base>:
   11340:	push	{r4, r5, r6, r7, r8, lr}
   11344:	subs	r4, r0, #0
   11348:	bne	11358 <avl_remove_impl@@Base+0x18>
   1134c:	mov	r4, #0
   11350:	mov	r0, r4
   11354:	pop	{r4, r5, r6, r7, r8, pc}
   11358:	ldr	r7, [r4]
   1135c:	mov	r0, r1
   11360:	mov	r6, r1
   11364:	mov	r1, r7
   11368:	bl	10c48 <strcmp@plt>
   1136c:	cmp	r0, #0
   11370:	bge	113ec <avl_remove_impl@@Base+0xac>
   11374:	mov	r1, r6
   11378:	ldr	r0, [r4, #4]
   1137c:	bl	11340 <avl_remove_impl@@Base>
   11380:	str	r0, [r4, #4]
   11384:	ldr	r1, [r4, #4]
   11388:	mov	r0, r4
   1138c:	ldr	r5, [r4, #8]
   11390:	cmp	r1, #0
   11394:	ldrne	r2, [r1, #12]
   11398:	mvneq	r2, #0
   1139c:	cmp	r5, #0
   113a0:	ldrne	r3, [r5, #12]
   113a4:	mvneq	r3, #0
   113a8:	cmp	r3, r2
   113ac:	movlt	r3, r2
   113b0:	add	r3, r3, #1
   113b4:	str	r3, [r4, #12]
   113b8:	bl	1114c <calc_balanceamento@@Base>
   113bc:	cmp	r0, #1
   113c0:	ble	114c0 <avl_remove_impl@@Base+0x180>
   113c4:	mov	r0, r5
   113c8:	bl	1114c <calc_balanceamento@@Base>
   113cc:	cmp	r0, #0
   113d0:	bge	113e0 <avl_remove_impl@@Base+0xa0>
   113d4:	mov	r0, r5
   113d8:	bl	11084 <roda_direita@@Base>
   113dc:	str	r0, [r4, #8]
   113e0:	mov	r0, r4
   113e4:	pop	{r4, r5, r6, r7, r8, lr}
   113e8:	b	110e8 <roda_esquerda@@Base>
   113ec:	ldr	r5, [r4, #8]
   113f0:	movne	r1, r6
   113f4:	movne	r0, r5
   113f8:	bne	114b4 <avl_remove_impl@@Base+0x174>
   113fc:	ldr	r6, [r4, #4]
   11400:	cmp	r6, #0
   11404:	beq	11464 <avl_remove_impl@@Base+0x124>
   11408:	cmp	r5, #0
   1140c:	bne	11480 <avl_remove_impl@@Base+0x140>
   11410:	ldr	r0, [r6]
   11414:	bl	10ccc <strlen@plt>
   11418:	add	r1, r0, #1
   1141c:	mov	r0, r7
   11420:	bl	10c84 <realloc@plt>
   11424:	str	r0, [r4]
   11428:	ldr	r1, [r6]
   1142c:	bl	10c90 <strcpy@plt>
   11430:	ldr	r3, [r6, #4]
   11434:	str	r3, [r4, #4]
   11438:	ldr	r3, [r6, #8]
   1143c:	str	r3, [r4, #8]
   11440:	ldr	r3, [r6, #12]
   11444:	str	r3, [r4, #12]
   11448:	ldr	r0, [r6]
   1144c:	bl	10c6c <free@plt>
   11450:	mov	r0, r6
   11454:	bl	10c6c <free@plt>
   11458:	cmp	r4, #0
   1145c:	bne	11384 <avl_remove_impl@@Base+0x44>
   11460:	b	1134c <avl_remove_impl@@Base+0xc>
   11464:	cmp	r5, #0
   11468:	moveq	r6, r4
   1146c:	moveq	r4, r5
   11470:	beq	11448 <avl_remove_impl@@Base+0x108>
   11474:	mov	r6, r5
   11478:	b	11410 <avl_remove_impl@@Base+0xd0>
   1147c:	mov	r5, r3
   11480:	ldr	r3, [r5, #4]
   11484:	cmp	r3, #0
   11488:	bne	1147c <avl_remove_impl@@Base+0x13c>
   1148c:	ldr	r0, [r5]
   11490:	bl	10ccc <strlen@plt>
   11494:	add	r1, r0, #1
   11498:	mov	r0, r7
   1149c:	bl	10c84 <realloc@plt>
   114a0:	str	r0, [r4]
   114a4:	ldr	r1, [r5]
   114a8:	bl	10c90 <strcpy@plt>
   114ac:	ldr	r1, [r5]
   114b0:	ldr	r0, [r4, #8]
   114b4:	bl	11340 <avl_remove_impl@@Base>
   114b8:	str	r0, [r4, #8]
   114bc:	b	11384 <avl_remove_impl@@Base+0x44>
   114c0:	cmn	r0, #1
   114c4:	bge	11350 <avl_remove_impl@@Base+0x10>
   114c8:	mov	r0, r1
   114cc:	bl	1114c <calc_balanceamento@@Base>
   114d0:	cmp	r0, #0
   114d4:	ble	114e4 <avl_remove_impl@@Base+0x1a4>
   114d8:	mov	r0, r1
   114dc:	bl	110e8 <roda_esquerda@@Base>
   114e0:	str	r0, [r4, #4]
   114e4:	mov	r0, r4
   114e8:	pop	{r4, r5, r6, r7, r8, lr}
   114ec:	b	11084 <roda_direita@@Base>

000114f0 <avl_apaga@@Base>:
   114f0:	push	{r4, lr}
   114f4:	subs	r4, r0, #0
   114f8:	popeq	{r4, pc}
   114fc:	ldr	r0, [r4]
   11500:	cmp	r0, #0
   11504:	bne	11514 <avl_apaga@@Base+0x24>
   11508:	mov	r0, r4
   1150c:	pop	{r4, lr}
   11510:	b	10c6c <free@plt>
   11514:	ldr	r1, [r0]
   11518:	bl	11340 <avl_remove_impl@@Base>
   1151c:	str	r0, [r4]
   11520:	b	114fc <avl_apaga@@Base+0xc>

00011524 <avl_remove@@Base>:
   11524:	clz	r3, r1
   11528:	cmp	r0, #0
   1152c:	push	{r4, r5, r6, lr}
   11530:	lsr	r3, r3, #5
   11534:	moveq	r4, #1
   11538:	movne	r4, r3
   1153c:	cmp	r4, #0
   11540:	bne	1155c <avl_remove@@Base+0x38>
   11544:	mov	r5, r0
   11548:	ldr	r0, [r0]
   1154c:	bl	11340 <avl_remove_impl@@Base>
   11550:	str	r0, [r5]
   11554:	mov	r0, r4
   11558:	pop	{r4, r5, r6, pc}
   1155c:	mvn	r0, #0
   11560:	pop	{r4, r5, r6, pc}

00011564 <avl_preordem_impl@@Base>:
   11564:	push	{r4, r5, r6, lr}
   11568:	mov	r4, r0
   1156c:	ldr	r5, [pc, #36]	; 11598 <avl_preordem_impl@@Base+0x34>
   11570:	cmp	r4, #0
   11574:	popeq	{r4, r5, r6, pc}
   11578:	mov	r0, r5
   1157c:	ldr	r1, [r4]
   11580:	ldr	r2, [r4, #16]
   11584:	bl	10c54 <printf@plt>
   11588:	ldr	r0, [r4, #4]
   1158c:	bl	11564 <avl_preordem_impl@@Base>
   11590:	ldr	r4, [r4, #8]
   11594:	b	11570 <avl_preordem_impl@@Base+0xc>
   11598:			; <UNDEFINED> instruction: 0x00011ab1

0001159c <avl_imprime@@Base>:
   1159c:	cmp	r0, #0
   115a0:	bxeq	lr
   115a4:	push	{r4, lr}
   115a8:	ldr	r0, [r0]
   115ac:	bl	11564 <avl_preordem_impl@@Base>
   115b0:	mov	r0, #10
   115b4:	pop	{r4, lr}
   115b8:	b	10cd8 <putchar@plt>

000115bc <bst_nova@@Base>:
   115bc:	push	{r4, lr}
   115c0:	mov	r0, #4
   115c4:	bl	10ca8 <malloc@plt>
   115c8:	cmp	r0, #0
   115cc:	movne	r3, #0
   115d0:	strne	r3, [r0]
   115d4:	pop	{r4, pc}

000115d8 <bst_min@@Base>:
   115d8:	cmp	r0, #0
   115dc:	ldrne	r3, [r0]
   115e0:	bxeq	lr
   115e4:	ldr	r2, [r3, #4]
   115e8:	cmp	r2, #0
   115ec:	bne	115f8 <bst_min@@Base+0x20>
   115f0:	ldr	r0, [r3]
   115f4:	bx	lr
   115f8:	mov	r3, r2
   115fc:	b	115e4 <bst_min@@Base+0xc>

00011600 <bst_max@@Base>:
   11600:	cmp	r0, #0
   11604:	ldrne	r3, [r0]
   11608:	bxeq	lr
   1160c:	ldr	r2, [r3, #8]
   11610:	cmp	r2, #0
   11614:	bne	11620 <bst_max@@Base+0x20>
   11618:	ldr	r0, [r3]
   1161c:	bx	lr
   11620:	mov	r3, r2
   11624:	b	1160c <bst_max@@Base+0xc>

00011628 <bst_novo_no@@Base>:
   11628:	push	{r4, r5, r6, lr}
   1162c:	mov	r5, r0
   11630:	mov	r0, #12
   11634:	bl	10ca8 <malloc@plt>
   11638:	mov	r4, r0
   1163c:	mov	r0, r5
   11640:	bl	10ccc <strlen@plt>
   11644:	add	r0, r0, #1
   11648:	bl	10ca8 <malloc@plt>
   1164c:	mov	r1, r5
   11650:	str	r0, [r4]
   11654:	bl	10c90 <strcpy@plt>
   11658:	mov	r3, #0
   1165c:	mov	r0, r4
   11660:	str	r3, [r4, #4]
   11664:	str	r3, [r4, #8]
   11668:	pop	{r4, r5, r6, pc}

0001166c <bst_no_valormin@@Base>:
   1166c:	ldr	r3, [r0, #4]
   11670:	cmp	r3, #0
   11674:	bxeq	lr
   11678:	mov	r0, r3
   1167c:	b	1166c <bst_no_valormin@@Base>

00011680 <bst_no_valormax@@Base>:
   11680:	ldr	r3, [r0, #8]
   11684:	cmp	r3, #0
   11688:	bxeq	lr
   1168c:	mov	r0, r3
   11690:	b	11680 <bst_no_valormax@@Base>

00011694 <bst_pesquisa_impl@@Base>:
   11694:	push	{r4, r5, r6, lr}
   11698:	mov	r5, r1
   1169c:	mov	r4, r0
   116a0:	cmp	r4, #0
   116a4:	beq	116c8 <bst_pesquisa_impl@@Base+0x34>
   116a8:	mov	r0, r5
   116ac:	ldr	r1, [r4]
   116b0:	bl	10c48 <strcmp@plt>
   116b4:	cmp	r0, #0
   116b8:	ldrlt	r4, [r4, #4]
   116bc:	blt	116a0 <bst_pesquisa_impl@@Base+0xc>
   116c0:	ldrne	r4, [r4, #8]
   116c4:	bne	116a0 <bst_pesquisa_impl@@Base+0xc>
   116c8:	mov	r0, r4
   116cc:	pop	{r4, r5, r6, pc}

000116d0 <bst_pesquisa@@Base>:
   116d0:	cmp	r1, #0
   116d4:	cmpne	r0, #0
   116d8:	beq	116e4 <bst_pesquisa@@Base+0x14>
   116dc:	ldr	r0, [r0]
   116e0:	b	11694 <bst_pesquisa_impl@@Base>
   116e4:	mov	r0, #0
   116e8:	bx	lr

000116ec <bst_insere_impl@@Base>:
   116ec:	push	{r4, r5, r6, lr}
   116f0:	subs	r4, r0, #0
   116f4:	bne	11704 <bst_insere_impl@@Base+0x18>
   116f8:	mov	r0, r1
   116fc:	pop	{r4, r5, r6, lr}
   11700:	b	11628 <bst_novo_no@@Base>
   11704:	mov	r0, r1
   11708:	mov	r5, r1
   1170c:	ldr	r1, [r4]
   11710:	bl	10c48 <strcmp@plt>
   11714:	cmp	r0, #0
   11718:	bge	11734 <bst_insere_impl@@Base+0x48>
   1171c:	mov	r1, r5
   11720:	ldr	r0, [r4, #4]
   11724:	bl	116ec <bst_insere_impl@@Base>
   11728:	str	r0, [r4, #4]
   1172c:	mov	r0, r4
   11730:	pop	{r4, r5, r6, pc}
   11734:	beq	1172c <bst_insere_impl@@Base+0x40>
   11738:	mov	r1, r5
   1173c:	ldr	r0, [r4, #8]
   11740:	bl	116ec <bst_insere_impl@@Base>
   11744:	str	r0, [r4, #8]
   11748:	b	1172c <bst_insere_impl@@Base+0x40>

0001174c <bst_insere@@Base>:
   1174c:	clz	r3, r1
   11750:	cmp	r0, #0
   11754:	push	{r4, r5, r6, lr}
   11758:	lsr	r3, r3, #5
   1175c:	moveq	r4, #1
   11760:	movne	r4, r3
   11764:	cmp	r4, #0
   11768:	bne	11784 <bst_insere@@Base+0x38>
   1176c:	mov	r5, r0
   11770:	ldr	r0, [r0]
   11774:	bl	116ec <bst_insere_impl@@Base>
   11778:	str	r0, [r5]
   1177c:	mov	r0, r4
   11780:	pop	{r4, r5, r6, pc}
   11784:	mvn	r0, #0
   11788:	pop	{r4, r5, r6, pc}

0001178c <bst_remove_impl@@Base>:
   1178c:	push	{r4, r5, r6, r7, r8, lr}
   11790:	subs	r4, r0, #0
   11794:	beq	117c4 <bst_remove_impl@@Base+0x38>
   11798:	mov	r0, r1
   1179c:	mov	r6, r1
   117a0:	ldr	r7, [r4]
   117a4:	mov	r1, r7
   117a8:	bl	10c48 <strcmp@plt>
   117ac:	cmp	r0, #0
   117b0:	bge	117cc <bst_remove_impl@@Base+0x40>
   117b4:	mov	r1, r6
   117b8:	ldr	r0, [r4, #4]
   117bc:	bl	1178c <bst_remove_impl@@Base>
   117c0:	str	r0, [r4, #4]
   117c4:	mov	r0, r4
   117c8:	pop	{r4, r5, r6, r7, r8, pc}
   117cc:	ldr	r5, [r4, #8]
   117d0:	movne	r1, r6
   117d4:	movne	r0, r5
   117d8:	bne	11888 <bst_remove_impl@@Base+0xfc>
   117dc:	ldr	r6, [r4, #4]
   117e0:	cmp	r6, #0
   117e4:	beq	11840 <bst_remove_impl@@Base+0xb4>
   117e8:	cmp	r5, #0
   117ec:	bne	11854 <bst_remove_impl@@Base+0xc8>
   117f0:	ldr	r0, [r6]
   117f4:	mov	r5, r4
   117f8:	bl	10ccc <strlen@plt>
   117fc:	add	r1, r0, #1
   11800:	mov	r0, r7
   11804:	bl	10c84 <realloc@plt>
   11808:	str	r0, [r4]
   1180c:	ldr	r1, [r6]
   11810:	bl	10c90 <strcpy@plt>
   11814:	ldr	r3, [r6, #4]
   11818:	str	r3, [r4, #4]
   1181c:	ldr	r3, [r6, #8]
   11820:	str	r3, [r4, #8]
   11824:	mov	r4, r6
   11828:	ldr	r0, [r4]
   1182c:	bl	10c6c <free@plt>
   11830:	mov	r0, r4
   11834:	mov	r4, r5
   11838:	bl	10c6c <free@plt>
   1183c:	b	117c4 <bst_remove_impl@@Base+0x38>
   11840:	cmp	r5, #0
   11844:	beq	11828 <bst_remove_impl@@Base+0x9c>
   11848:	mov	r6, r5
   1184c:	b	117f0 <bst_remove_impl@@Base+0x64>
   11850:	mov	r5, r3
   11854:	ldr	r3, [r5, #4]
   11858:	cmp	r3, #0
   1185c:	bne	11850 <bst_remove_impl@@Base+0xc4>
   11860:	ldr	r0, [r5]
   11864:	bl	10ccc <strlen@plt>
   11868:	add	r1, r0, #1
   1186c:	mov	r0, r7
   11870:	bl	10c84 <realloc@plt>
   11874:	str	r0, [r4]
   11878:	ldr	r1, [r5]
   1187c:	bl	10c90 <strcpy@plt>
   11880:	ldr	r1, [r5]
   11884:	ldr	r0, [r4, #8]
   11888:	bl	1178c <bst_remove_impl@@Base>
   1188c:	str	r0, [r4, #8]
   11890:	b	117c4 <bst_remove_impl@@Base+0x38>

00011894 <bst_apaga@@Base>:
   11894:	push	{r4, lr}
   11898:	mov	r4, r0
   1189c:	ldr	r0, [r4]
   118a0:	cmp	r0, #0
   118a4:	bne	118b4 <bst_apaga@@Base+0x20>
   118a8:	mov	r0, r4
   118ac:	pop	{r4, lr}
   118b0:	b	10c6c <free@plt>
   118b4:	ldr	r1, [r0]
   118b8:	bl	1178c <bst_remove_impl@@Base>
   118bc:	str	r0, [r4]
   118c0:	b	1189c <bst_apaga@@Base+0x8>

000118c4 <bst_remove@@Base>:
   118c4:	clz	r3, r1
   118c8:	cmp	r0, #0
   118cc:	push	{r4, r5, r6, lr}
   118d0:	lsr	r3, r3, #5
   118d4:	moveq	r4, #1
   118d8:	movne	r4, r3
   118dc:	cmp	r4, #0
   118e0:	bne	118fc <bst_remove@@Base+0x38>
   118e4:	mov	r5, r0
   118e8:	ldr	r0, [r0]
   118ec:	bl	1178c <bst_remove_impl@@Base>
   118f0:	str	r0, [r5]
   118f4:	mov	r0, r4
   118f8:	pop	{r4, r5, r6, pc}
   118fc:	mvn	r0, #0
   11900:	pop	{r4, r5, r6, pc}

00011904 <bst_altura@@Base>:
   11904:	push	{r4, r5, r6, r7, r8, lr}
   11908:	mov	r5, #0
   1190c:	cmp	r0, #0
   11910:	beq	11950 <bst_altura@@Base+0x4c>
   11914:	ldmib	r0, {r4, r6}
   11918:	cmp	r6, #0
   1191c:	bne	11928 <bst_altura@@Base+0x24>
   11920:	cmp	r4, #0
   11924:	beq	11954 <bst_altura@@Base+0x50>
   11928:	mov	r0, r4
   1192c:	add	r5, r5, #1
   11930:	bl	11904 <bst_altura@@Base>
   11934:	mov	r7, r0
   11938:	mov	r0, r6
   1193c:	bl	11904 <bst_altura@@Base>
   11940:	cmp	r7, r0
   11944:	movle	r0, r6
   11948:	movgt	r0, r4
   1194c:	b	1190c <bst_altura@@Base+0x8>
   11950:	mvn	r4, #0
   11954:	add	r0, r4, r5
   11958:	pop	{r4, r5, r6, r7, r8, pc}

0001195c <bst_preordem_impl@@Base>:
   1195c:	push	{r4, r5, r6, lr}
   11960:	mov	r4, r0
   11964:	ldr	r5, [pc, #32]	; 1198c <bst_preordem_impl@@Base+0x30>
   11968:	cmp	r4, #0
   1196c:	popeq	{r4, r5, r6, pc}
   11970:	mov	r0, r5
   11974:	ldr	r1, [r4]
   11978:	bl	10c54 <printf@plt>
   1197c:	ldr	r0, [r4, #4]
   11980:	bl	1195c <bst_preordem_impl@@Base>
   11984:	ldr	r4, [r4, #8]
   11988:	b	11968 <bst_preordem_impl@@Base+0xc>
   1198c:			; <UNDEFINED> instruction: 0x00011ab8

00011990 <bst_imprime@@Base>:
   11990:	push	{r4, lr}
   11994:	subs	r4, r0, #0
   11998:	popeq	{r4, pc}
   1199c:	ldr	r0, [pc, #20]	; 119b8 <bst_imprime@@Base+0x28>
   119a0:	bl	10c54 <printf@plt>
   119a4:	ldr	r0, [r4]
   119a8:	bl	1195c <bst_preordem_impl@@Base>
   119ac:	mov	r0, #10
   119b0:	pop	{r4, lr}
   119b4:	b	10cd8 <putchar@plt>
   119b8:			; <UNDEFINED> instruction: 0x00011abc

000119bc <__libc_csu_init@@Base>:
   119bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   119c0:	mov	r7, r0
   119c4:	ldr	r6, [pc, #72]	; 11a14 <__libc_csu_init@@Base+0x58>
   119c8:	ldr	r5, [pc, #72]	; 11a18 <__libc_csu_init@@Base+0x5c>
   119cc:	add	r6, pc, r6
   119d0:	add	r5, pc, r5
   119d4:	sub	r6, r6, r5
   119d8:	mov	r8, r1
   119dc:	mov	r9, r2
   119e0:	bl	10c28 <strcmp@plt-0x20>
   119e4:	asrs	r6, r6, #2
   119e8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   119ec:	mov	r4, #0
   119f0:	add	r4, r4, #1
   119f4:	ldr	r3, [r5], #4
   119f8:	mov	r2, r9
   119fc:	mov	r1, r8
   11a00:	mov	r0, r7
   11a04:	blx	r3
   11a08:	cmp	r6, r4
   11a0c:	bne	119f0 <__libc_csu_init@@Base+0x34>
   11a10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11a14:	andeq	r0, r1, r0, asr #10
   11a18:	andeq	r0, r1, r8, lsr r5

00011a1c <__libc_csu_fini@@Base>:
   11a1c:	bx	lr

Disassembly of section .fini:

00011a20 <.fini>:
   11a20:	push	{r3, lr}
   11a24:	pop	{r3, pc}
