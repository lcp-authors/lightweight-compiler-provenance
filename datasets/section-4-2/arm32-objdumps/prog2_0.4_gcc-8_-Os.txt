
../repos/prog2/0.4:     file format elf32-littlearm


Disassembly of section .init:

000105bc <.init>:
   105bc:	push	{r3, lr}
   105c0:	bl	10770 <_start@@Base+0x3c>
   105c4:	pop	{r3, pc}

Disassembly of section .plt:

000105c8 <printf@plt-0x14>:
   105c8:	push	{lr}		; (str lr, [sp, #-4]!)
   105cc:	ldr	lr, [pc, #4]	; 105d8 <printf@plt-0x4>
   105d0:	add	lr, pc, lr
   105d4:	ldr	pc, [lr, #8]!
   105d8:	andeq	r0, r1, r8, lsr #20

000105dc <printf@plt>:
   105dc:	add	ip, pc, #0, 12
   105e0:	add	ip, ip, #16, 20	; 0x10000
   105e4:	ldr	pc, [ip, #2600]!	; 0xa28

000105e8 <puts@plt>:
   105e8:	add	ip, pc, #0, 12
   105ec:	add	ip, ip, #16, 20	; 0x10000
   105f0:	ldr	pc, [ip, #2592]!	; 0xa20

000105f4 <malloc@plt>:
   105f4:	add	ip, pc, #0, 12
   105f8:	add	ip, ip, #16, 20	; 0x10000
   105fc:	ldr	pc, [ip, #2584]!	; 0xa18

00010600 <__libc_start_main@plt>:
   10600:	add	ip, pc, #0, 12
   10604:	add	ip, ip, #16, 20	; 0x10000
   10608:	ldr	pc, [ip, #2576]!	; 0xa10

0001060c <__gmon_start__@plt>:
   1060c:	add	ip, pc, #0, 12
   10610:	add	ip, ip, #16, 20	; 0x10000
   10614:	ldr	pc, [ip, #2568]!	; 0xa08

00010618 <__isoc99_scanf@plt>:
   10618:	add	ip, pc, #0, 12
   1061c:	add	ip, ip, #16, 20	; 0x10000
   10620:	ldr	pc, [ip, #2560]!	; 0xa00

00010624 <abort@plt>:
   10624:	add	ip, pc, #0, 12
   10628:	add	ip, ip, #16, 20	; 0x10000
   1062c:	ldr	pc, [ip, #2552]!	; 0x9f8

Disassembly of section .text:

00010630 <main@@Base>:
   10630:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   10634:	ldr	r0, [pc, #216]	; 10714 <main@@Base+0xe4>
   10638:	bl	105dc <printf@plt>
   1063c:	add	r1, sp, #4
   10640:	ldr	r0, [pc, #208]	; 10718 <main@@Base+0xe8>
   10644:	bl	10618 <__isoc99_scanf@plt>
   10648:	ldr	r3, [sp, #4]
   1064c:	cmp	r3, #100	; 0x64
   10650:	ble	10664 <main@@Base+0x34>
   10654:	ldr	r0, [pc, #192]	; 1071c <main@@Base+0xec>
   10658:	bl	105dc <printf@plt>
   1065c:	mov	r3, #100	; 0x64
   10660:	str	r3, [sp, #4]
   10664:	ldr	r0, [sp, #4]
   10668:	mov	r4, #0
   1066c:	ldr	r7, [pc, #172]	; 10720 <main@@Base+0xf0>
   10670:	ldr	r8, [pc, #160]	; 10718 <main@@Base+0xe8>
   10674:	lsl	r0, r0, #2
   10678:	bl	105f4 <malloc@plt>
   1067c:	mov	r5, r0
   10680:	mov	r6, r0
   10684:	ldr	r1, [sp, #4]
   10688:	cmp	r1, r4
   1068c:	bgt	106d4 <main@@Base+0xa4>
   10690:	mov	r0, r5
   10694:	bl	10824 <ordenado@@Base>
   10698:	cmp	r0, #0
   1069c:	beq	10708 <main@@Base+0xd8>
   106a0:	ldr	r0, [pc, #124]	; 10724 <main@@Base+0xf4>
   106a4:	bl	105dc <printf@plt>
   106a8:	ldr	r4, [sp, #4]
   106ac:	ldr	r6, [pc, #116]	; 10728 <main@@Base+0xf8>
   106b0:	sub	r4, r4, #1
   106b4:	cmp	r4, #0
   106b8:	ldr	r1, [r5, r4, lsl #2]
   106bc:	bgt	106f8 <main@@Base+0xc8>
   106c0:	ldr	r0, [pc, #100]	; 1072c <main@@Base+0xfc>
   106c4:	bl	105dc <printf@plt>
   106c8:	mov	r0, #0
   106cc:	add	sp, sp, #8
   106d0:	pop	{r4, r5, r6, r7, r8, pc}
   106d4:	add	r4, r4, #1
   106d8:	mov	r0, r7
   106dc:	mov	r1, r4
   106e0:	bl	105dc <printf@plt>
   106e4:	mov	r1, r6
   106e8:	mov	r0, r8
   106ec:	bl	10618 <__isoc99_scanf@plt>
   106f0:	add	r6, r6, #4
   106f4:	b	10684 <main@@Base+0x54>
   106f8:	mov	r0, r6
   106fc:	sub	r4, r4, #1
   10700:	bl	105dc <printf@plt>
   10704:	b	106b4 <main@@Base+0x84>
   10708:	ldr	r0, [pc, #32]	; 10730 <main@@Base+0x100>
   1070c:	bl	105e8 <puts@plt>
   10710:	b	106c8 <main@@Base+0x98>
   10714:	andeq	r0, r1, r8, asr #17
   10718:	andeq	r0, r1, r9, ror #17
   1071c:	andeq	r0, r1, ip, ror #17
   10720:	andeq	r0, r1, r9, lsl r9
   10724:	andeq	r0, r1, r1, lsr r9
   10728:	andeq	r0, r1, r4, ror r9
   1072c:	andeq	r0, r1, r8, ror r9
   10730:	andeq	r0, r1, sp, ror r9

00010734 <_start@@Base>:
   10734:	mov	fp, #0
   10738:	mov	lr, #0
   1073c:	pop	{r1}		; (ldr r1, [sp], #4)
   10740:	mov	r2, sp
   10744:	push	{r2}		; (str r2, [sp, #-4]!)
   10748:	push	{r0}		; (str r0, [sp, #-4]!)
   1074c:	ldr	ip, [pc, #16]	; 10764 <_start@@Base+0x30>
   10750:	push	{ip}		; (str ip, [sp, #-4]!)
   10754:	ldr	r0, [pc, #12]	; 10768 <_start@@Base+0x34>
   10758:	ldr	r3, [pc, #12]	; 1076c <_start@@Base+0x38>
   1075c:	bl	10600 <__libc_start_main@plt>
   10760:	bl	10624 <abort@plt>
   10764:			; <UNDEFINED> instruction: 0x000108b8
   10768:	andeq	r0, r1, r0, lsr r6
   1076c:	andeq	r0, r1, r8, asr r8
   10770:	ldr	r3, [pc, #20]	; 1078c <_start@@Base+0x58>
   10774:	ldr	r2, [pc, #20]	; 10790 <_start@@Base+0x5c>
   10778:	add	r3, pc, r3
   1077c:	ldr	r2, [r3, r2]
   10780:	cmp	r2, #0
   10784:	bxeq	lr
   10788:	b	1060c <__gmon_start__@plt>
   1078c:	andeq	r0, r1, r0, lsl #17
   10790:	andeq	r0, r0, r8, lsr #32
   10794:	ldr	r0, [pc, #24]	; 107b4 <_start@@Base+0x80>
   10798:	ldr	r3, [pc, #24]	; 107b8 <_start@@Base+0x84>
   1079c:	cmp	r3, r0
   107a0:	bxeq	lr
   107a4:	ldr	r3, [pc, #16]	; 107bc <_start@@Base+0x88>
   107a8:	cmp	r3, #0
   107ac:	bxeq	lr
   107b0:	bx	r3
   107b4:	andeq	r1, r2, r4, lsr r0
   107b8:	andeq	r1, r2, r4, lsr r0
   107bc:	andeq	r0, r0, r0
   107c0:	ldr	r0, [pc, #36]	; 107ec <_start@@Base+0xb8>
   107c4:	ldr	r1, [pc, #36]	; 107f0 <_start@@Base+0xbc>
   107c8:	sub	r1, r1, r0
   107cc:	asr	r1, r1, #2
   107d0:	add	r1, r1, r1, lsr #31
   107d4:	asrs	r1, r1, #1
   107d8:	bxeq	lr
   107dc:	ldr	r3, [pc, #16]	; 107f4 <_start@@Base+0xc0>
   107e0:	cmp	r3, #0
   107e4:	bxeq	lr
   107e8:	bx	r3
   107ec:	andeq	r1, r2, r4, lsr r0
   107f0:	andeq	r1, r2, r4, lsr r0
   107f4:	andeq	r0, r0, r0
   107f8:	push	{r4, lr}
   107fc:	ldr	r4, [pc, #24]	; 1081c <_start@@Base+0xe8>
   10800:	ldrb	r3, [r4]
   10804:	cmp	r3, #0
   10808:	popne	{r4, pc}
   1080c:	bl	10794 <_start@@Base+0x60>
   10810:	mov	r3, #1
   10814:	strb	r3, [r4]
   10818:	pop	{r4, pc}
   1081c:	andeq	r1, r2, r4, lsr r0
   10820:	b	107c0 <_start@@Base+0x8c>

00010824 <ordenado@@Base>:
   10824:	ldr	r2, [r0]
   10828:	mov	r3, #1
   1082c:	cmp	r3, r1
   10830:	blt	1083c <ordenado@@Base+0x18>
   10834:	mov	r0, #1
   10838:	bx	lr
   1083c:	ldr	ip, [r0, r3, lsl #2]
   10840:	cmp	ip, r2
   10844:	addge	r3, r3, #1
   10848:	movge	r2, ip
   1084c:	bge	1082c <ordenado@@Base+0x8>
   10850:	mov	r0, #0
   10854:	bx	lr

00010858 <__libc_csu_init@@Base>:
   10858:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1085c:	mov	r7, r0
   10860:	ldr	r6, [pc, #72]	; 108b0 <__libc_csu_init@@Base+0x58>
   10864:	ldr	r5, [pc, #72]	; 108b4 <__libc_csu_init@@Base+0x5c>
   10868:	add	r6, pc, r6
   1086c:	add	r5, pc, r5
   10870:	sub	r6, r6, r5
   10874:	mov	r8, r1
   10878:	mov	r9, r2
   1087c:	bl	105bc <printf@plt-0x20>
   10880:	asrs	r6, r6, #2
   10884:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10888:	mov	r4, #0
   1088c:	add	r4, r4, #1
   10890:	ldr	r3, [r5], #4
   10894:	mov	r2, r9
   10898:	mov	r1, r8
   1089c:	mov	r0, r7
   108a0:	blx	r3
   108a4:	cmp	r6, r4
   108a8:	bne	1088c <__libc_csu_init@@Base+0x34>
   108ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108b0:	andeq	r0, r1, r4, lsr #13
   108b4:	muleq	r1, ip, r6

000108b8 <__libc_csu_fini@@Base>:
   108b8:	bx	lr

Disassembly of section .fini:

000108bc <.fini>:
   108bc:	push	{r3, lr}
   108c0:	pop	{r3, pc}
