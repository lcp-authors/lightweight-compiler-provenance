
../repos/findutils/find/find:     file format elf32-littlearm


Disassembly of section .init:

00011e84 <.init>:
   11e84:	push	{r3, lr}
   11e88:	bl	12c64 <__assert_fail@plt+0x670>
   11e8c:	pop	{r3, pc}

Disassembly of section .plt:

00011e90 <pthread_mutex_unlock@plt-0x14>:
   11e90:	push	{lr}		; (str lr, [sp, #-4]!)
   11e94:	ldr	lr, [pc, #4]	; 11ea0 <pthread_mutex_unlock@plt-0x4>
   11e98:	add	lr, pc, lr
   11e9c:	ldr	pc, [lr, #8]!
   11ea0:	andeq	r7, r4, r0, ror #2

00011ea4 <pthread_mutex_unlock@plt>:
   11ea4:	add	ip, pc, #0, 12
   11ea8:	add	ip, ip, #290816	; 0x47000
   11eac:	ldr	pc, [ip, #352]!	; 0x160

00011eb0 <fdopen@plt>:
   11eb0:	add	ip, pc, #0, 12
   11eb4:	add	ip, ip, #290816	; 0x47000
   11eb8:	ldr	pc, [ip, #344]!	; 0x158

00011ebc <fstatfs64@plt>:
   11ebc:	add	ip, pc, #0, 12
   11ec0:	add	ip, ip, #290816	; 0x47000
   11ec4:	ldr	pc, [ip, #336]!	; 0x150

00011ec8 <calloc@plt>:
   11ec8:	add	ip, pc, #0, 12
   11ecc:	add	ip, ip, #290816	; 0x47000
   11ed0:	ldr	pc, [ip, #328]!	; 0x148

00011ed4 <endgrent@plt>:
   11ed4:	add	ip, pc, #0, 12
   11ed8:	add	ip, ip, #290816	; 0x47000
   11edc:	ldr	pc, [ip, #320]!	; 0x140

00011ee0 <wctype@plt>:
   11ee0:	add	ip, pc, #0, 12
   11ee4:	add	ip, ip, #290816	; 0x47000
   11ee8:	ldr	pc, [ip, #312]!	; 0x138

00011eec <raise@plt>:
   11eec:	add	ip, pc, #0, 12
   11ef0:	add	ip, ip, #290816	; 0x47000
   11ef4:	ldr	pc, [ip, #304]!	; 0x130

00011ef8 <wcrtomb@plt>:
   11ef8:	add	ip, pc, #0, 12
   11efc:	add	ip, ip, #290816	; 0x47000
   11f00:	ldr	pc, [ip, #296]!	; 0x128

00011f04 <gmtime_r@plt>:
   11f04:	add	ip, pc, #0, 12
   11f08:	add	ip, ip, #290816	; 0x47000
   11f0c:	ldr	pc, [ip, #288]!	; 0x120

00011f10 <__getdelim@plt>:
   11f10:	add	ip, pc, #0, 12
   11f14:	add	ip, ip, #290816	; 0x47000
   11f18:	ldr	pc, [ip, #280]!	; 0x118

00011f1c <getpwnam@plt>:
   11f1c:	add	ip, pc, #0, 12
   11f20:	add	ip, ip, #290816	; 0x47000
   11f24:	ldr	pc, [ip, #272]!	; 0x110

00011f28 <is_selinux_enabled@plt>:
   11f28:	add	ip, pc, #0, 12
   11f2c:	add	ip, ip, #290816	; 0x47000
   11f30:	ldr	pc, [ip, #264]!	; 0x108

00011f34 <iswctype@plt>:
   11f34:	add	ip, pc, #0, 12
   11f38:	add	ip, ip, #290816	; 0x47000
   11f3c:	ldr	pc, [ip, #256]!	; 0x100

00011f40 <strcmp@plt>:
   11f40:	add	ip, pc, #0, 12
   11f44:	add	ip, ip, #290816	; 0x47000
   11f48:	ldr	pc, [ip, #248]!	; 0xf8

00011f4c <strtol@plt>:
   11f4c:	add	ip, pc, #0, 12
   11f50:	add	ip, ip, #290816	; 0x47000
   11f54:	ldr	pc, [ip, #240]!	; 0xf0

00011f58 <getpwuid@plt>:
   11f58:	add	ip, pc, #0, 12
   11f5c:	add	ip, ip, #290816	; 0x47000
   11f60:	ldr	pc, [ip, #232]!	; 0xe8

00011f64 <printf@plt>:
   11f64:	add	ip, pc, #0, 12
   11f68:	add	ip, ip, #290816	; 0x47000
   11f6c:	ldr	pc, [ip, #224]!	; 0xe0

00011f70 <pthread_mutex_destroy@plt>:
   11f70:	add	ip, pc, #0, 12
   11f74:	add	ip, ip, #290816	; 0x47000
   11f78:	ldr	pc, [ip, #216]!	; 0xd8

00011f7c <mktime@plt>:
   11f7c:	add	ip, pc, #0, 12
   11f80:	add	ip, ip, #290816	; 0x47000
   11f84:	ldr	pc, [ip, #208]!	; 0xd0

00011f88 <fflush@plt>:
   11f88:	add	ip, pc, #0, 12
   11f8c:	add	ip, ip, #290816	; 0x47000
   11f90:	ldr	pc, [ip, #200]!	; 0xc8

00011f94 <unlinkat@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #290816	; 0x47000
   11f9c:	ldr	pc, [ip, #192]!	; 0xc0

00011fa0 <wcwidth@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #290816	; 0x47000
   11fa8:	ldr	pc, [ip, #184]!	; 0xb8

00011fac <lsetfilecon@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #290816	; 0x47000
   11fb4:	ldr	pc, [ip, #176]!	; 0xb0

00011fb8 <memmove@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #290816	; 0x47000
   11fc0:	ldr	pc, [ip, #168]!	; 0xa8

00011fc4 <free@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #290816	; 0x47000
   11fcc:	ldr	pc, [ip, #160]!	; 0xa0

00011fd0 <pthread_mutex_lock@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #290816	; 0x47000
   11fd8:	ldr	pc, [ip, #152]!	; 0x98

00011fdc <faccessat@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #290816	; 0x47000
   11fe4:	ldr	pc, [ip, #144]!	; 0x90

00011fe8 <ferror@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #290816	; 0x47000
   11ff0:	ldr	pc, [ip, #136]!	; 0x88

00011ff4 <thrd_exit@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #290816	; 0x47000
   11ffc:	ldr	pc, [ip, #128]!	; 0x80

00012000 <strndup@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #290816	; 0x47000
   12008:	ldr	pc, [ip, #120]!	; 0x78

0001200c <clock_gettime@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #290816	; 0x47000
   12014:	ldr	pc, [ip, #112]!	; 0x70

00012018 <_exit@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #290816	; 0x47000
   12020:	ldr	pc, [ip, #104]!	; 0x68

00012024 <memcpy@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #290816	; 0x47000
   1202c:	ldr	pc, [ip, #96]!	; 0x60

00012030 <execvp@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #290816	; 0x47000
   12038:	ldr	pc, [ip, #88]!	; 0x58

0001203c <pthread_mutex_init@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #290816	; 0x47000
   12044:	ldr	pc, [ip, #80]!	; 0x50

00012048 <__strtoull_internal@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #290816	; 0x47000
   12050:	ldr	pc, [ip, #72]!	; 0x48

00012054 <towlower@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #290816	; 0x47000
   1205c:	ldr	pc, [ip, #64]!	; 0x40

00012060 <mbsinit@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #290816	; 0x47000
   12068:	ldr	pc, [ip, #56]!	; 0x38

0001206c <signal@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #290816	; 0x47000
   12074:	ldr	pc, [ip, #48]!	; 0x30

00012078 <time@plt>:
   12078:	add	ip, pc, #0, 12
   1207c:	add	ip, ip, #290816	; 0x47000
   12080:	ldr	pc, [ip, #40]!	; 0x28

00012084 <memcmp@plt>:
   12084:	add	ip, pc, #0, 12
   12088:	add	ip, ip, #290816	; 0x47000
   1208c:	ldr	pc, [ip, #32]!

00012090 <stpcpy@plt>:
   12090:	add	ip, pc, #0, 12
   12094:	add	ip, ip, #290816	; 0x47000
   12098:	ldr	pc, [ip, #24]!

0001209c <uname@plt>:
   1209c:	add	ip, pc, #0, 12
   120a0:	add	ip, ip, #290816	; 0x47000
   120a4:	ldr	pc, [ip, #16]!

000120a8 <ctime@plt>:
   120a8:	add	ip, pc, #0, 12
   120ac:	add	ip, ip, #290816	; 0x47000
   120b0:	ldr	pc, [ip, #8]!

000120b4 <dcgettext@plt>:
   120b4:	add	ip, pc, #0, 12
   120b8:	add	ip, ip, #290816	; 0x47000
   120bc:	ldr	pc, [ip, #0]!

000120c0 <strdup@plt>:
   120c0:	add	ip, pc, #0, 12
   120c4:	add	ip, ip, #286720	; 0x46000
   120c8:	ldr	pc, [ip, #4088]!	; 0xff8

000120cc <sysconf@plt>:
   120cc:	add	ip, pc, #0, 12
   120d0:	add	ip, ip, #286720	; 0x46000
   120d4:	ldr	pc, [ip, #4080]!	; 0xff0

000120d8 <getrlimit64@plt>:
   120d8:	add	ip, pc, #0, 12
   120dc:	add	ip, ip, #286720	; 0x46000
   120e0:	ldr	pc, [ip, #4072]!	; 0xfe8

000120e4 <realloc@plt>:
   120e4:	add	ip, pc, #0, 12
   120e8:	add	ip, ip, #286720	; 0x46000
   120ec:	ldr	pc, [ip, #4064]!	; 0xfe0

000120f0 <fgetfilecon@plt>:
   120f0:	add	ip, pc, #0, 12
   120f4:	add	ip, ip, #286720	; 0x46000
   120f8:	ldr	pc, [ip, #4056]!	; 0xfd8

000120fc <localtime_r@plt>:
   120fc:	add	ip, pc, #0, 12
   12100:	add	ip, ip, #286720	; 0x46000
   12104:	ldr	pc, [ip, #4048]!	; 0xfd0

00012108 <textdomain@plt>:
   12108:	add	ip, pc, #0, 12
   1210c:	add	ip, ip, #286720	; 0x46000
   12110:	ldr	pc, [ip, #4040]!	; 0xfc8

00012114 <iswcntrl@plt>:
   12114:	add	ip, pc, #0, 12
   12118:	add	ip, ip, #286720	; 0x46000
   1211c:	ldr	pc, [ip, #4032]!	; 0xfc0

00012120 <chdir@plt>:
   12120:	add	ip, pc, #0, 12
   12124:	add	ip, ip, #286720	; 0x46000
   12128:	ldr	pc, [ip, #4024]!	; 0xfb8

0001212c <__fxstatat64@plt>:
   1212c:	add	ip, pc, #0, 12
   12130:	add	ip, ip, #286720	; 0x46000
   12134:	ldr	pc, [ip, #4016]!	; 0xfb0

00012138 <iswprint@plt>:
   12138:	add	ip, pc, #0, 12
   1213c:	add	ip, ip, #286720	; 0x46000
   12140:	ldr	pc, [ip, #4008]!	; 0xfa8

00012144 <tzset@plt>:
   12144:	add	ip, pc, #0, 12
   12148:	add	ip, ip, #286720	; 0x46000
   1214c:	ldr	pc, [ip, #4000]!	; 0xfa0

00012150 <poll@plt>:
   12150:	add	ip, pc, #0, 12
   12154:	add	ip, ip, #286720	; 0x46000
   12158:	ldr	pc, [ip, #3992]!	; 0xf98

0001215c <__fxstat64@plt>:
   1215c:	add	ip, pc, #0, 12
   12160:	add	ip, ip, #286720	; 0x46000
   12164:	ldr	pc, [ip, #3984]!	; 0xf90

00012168 <fwrite@plt>:
   12168:	add	ip, pc, #0, 12
   1216c:	add	ip, ip, #286720	; 0x46000
   12170:	ldr	pc, [ip, #3976]!	; 0xf88

00012174 <strcat@plt>:
   12174:	add	ip, pc, #0, 12
   12178:	add	ip, ip, #286720	; 0x46000
   1217c:	ldr	pc, [ip, #3968]!	; 0xf80

00012180 <lseek64@plt>:
   12180:	add	ip, pc, #0, 12
   12184:	add	ip, ip, #286720	; 0x46000
   12188:	ldr	pc, [ip, #3960]!	; 0xf78

0001218c <waitpid@plt>:
   1218c:	add	ip, pc, #0, 12
   12190:	add	ip, ip, #286720	; 0x46000
   12194:	ldr	pc, [ip, #3952]!	; 0xf70

00012198 <__ctype_get_mb_cur_max@plt>:
   12198:	add	ip, pc, #0, 12
   1219c:	add	ip, ip, #286720	; 0x46000
   121a0:	ldr	pc, [ip, #3944]!	; 0xf68

000121a4 <hasmntopt@plt>:
   121a4:	add	ip, pc, #0, 12
   121a8:	add	ip, ip, #286720	; 0x46000
   121ac:	ldr	pc, [ip, #3936]!	; 0xf60

000121b0 <strcpy@plt>:
   121b0:	add	ip, pc, #0, 12
   121b4:	add	ip, ip, #286720	; 0x46000
   121b8:	ldr	pc, [ip, #3928]!	; 0xf58

000121bc <gettimeofday@plt>:
   121bc:	add	ip, pc, #0, 12
   121c0:	add	ip, ip, #286720	; 0x46000
   121c4:	ldr	pc, [ip, #3920]!	; 0xf50

000121c8 <__fpending@plt>:
   121c8:	add	ip, pc, #0, 12
   121cc:	add	ip, ip, #286720	; 0x46000
   121d0:	ldr	pc, [ip, #3912]!	; 0xf48

000121d4 <mbrtowc@plt>:
   121d4:	add	ip, pc, #0, 12
   121d8:	add	ip, ip, #286720	; 0x46000
   121dc:	ldr	pc, [ip, #3904]!	; 0xf40

000121e0 <strtok_r@plt>:
   121e0:	add	ip, pc, #0, 12
   121e4:	add	ip, ip, #286720	; 0x46000
   121e8:	ldr	pc, [ip, #3896]!	; 0xf38

000121ec <error@plt>:
   121ec:	add	ip, pc, #0, 12
   121f0:	add	ip, ip, #286720	; 0x46000
   121f4:	ldr	pc, [ip, #3888]!	; 0xf30

000121f8 <getmntent@plt>:
   121f8:	add	ip, pc, #0, 12
   121fc:	add	ip, ip, #286720	; 0x46000
   12200:	ldr	pc, [ip, #3880]!	; 0xf28

00012204 <opendir@plt>:
   12204:	add	ip, pc, #0, 12
   12208:	add	ip, ip, #286720	; 0x46000
   1220c:	ldr	pc, [ip, #3872]!	; 0xf20

00012210 <fnmatch@plt>:
   12210:	add	ip, pc, #0, 12
   12214:	add	ip, ip, #286720	; 0x46000
   12218:	ldr	pc, [ip, #3864]!	; 0xf18

0001221c <open64@plt>:
   1221c:	add	ip, pc, #0, 12
   12220:	add	ip, ip, #286720	; 0x46000
   12224:	ldr	pc, [ip, #3856]!	; 0xf10

00012228 <getenv@plt>:
   12228:	add	ip, pc, #0, 12
   1222c:	add	ip, ip, #286720	; 0x46000
   12230:	ldr	pc, [ip, #3848]!	; 0xf08

00012234 <lgetfilecon@plt>:
   12234:	add	ip, pc, #0, 12
   12238:	add	ip, ip, #286720	; 0x46000
   1223c:	ldr	pc, [ip, #3840]!	; 0xf00

00012240 <malloc@plt>:
   12240:	add	ip, pc, #0, 12
   12244:	add	ip, ip, #286720	; 0x46000
   12248:	ldr	pc, [ip, #3832]!	; 0xef8

0001224c <__libc_start_main@plt>:
   1224c:	add	ip, pc, #0, 12
   12250:	add	ip, ip, #286720	; 0x46000
   12254:	ldr	pc, [ip, #3824]!	; 0xef0

00012258 <readlinkat@plt>:
   12258:	add	ip, pc, #0, 12
   1225c:	add	ip, ip, #286720	; 0x46000
   12260:	ldr	pc, [ip, #3816]!	; 0xee8

00012264 <strftime@plt>:
   12264:	add	ip, pc, #0, 12
   12268:	add	ip, ip, #286720	; 0x46000
   1226c:	ldr	pc, [ip, #3808]!	; 0xee0

00012270 <__freading@plt>:
   12270:	add	ip, pc, #0, 12
   12274:	add	ip, ip, #286720	; 0x46000
   12278:	ldr	pc, [ip, #3800]!	; 0xed8

0001227c <localtime@plt>:
   1227c:	add	ip, pc, #0, 12
   12280:	add	ip, ip, #286720	; 0x46000
   12284:	ldr	pc, [ip, #3792]!	; 0xed0

00012288 <__ctype_tolower_loc@plt>:
   12288:	add	ip, pc, #0, 12
   1228c:	add	ip, ip, #286720	; 0x46000
   12290:	ldr	pc, [ip, #3784]!	; 0xec8

00012294 <modf@plt>:
   12294:	add	ip, pc, #0, 12
   12298:	add	ip, ip, #286720	; 0x46000
   1229c:	ldr	pc, [ip, #3776]!	; 0xec0

000122a0 <__ctype_toupper_loc@plt>:
   122a0:	add	ip, pc, #0, 12
   122a4:	add	ip, ip, #286720	; 0x46000
   122a8:	ldr	pc, [ip, #3768]!	; 0xeb8

000122ac <__gmon_start__@plt>:
   122ac:	add	ip, pc, #0, 12
   122b0:	add	ip, ip, #286720	; 0x46000
   122b4:	ldr	pc, [ip, #3760]!	; 0xeb0

000122b8 <__ctype_b_loc@plt>:
   122b8:	add	ip, pc, #0, 12
   122bc:	add	ip, ip, #286720	; 0x46000
   122c0:	ldr	pc, [ip, #3752]!	; 0xea8

000122c4 <getcwd@plt>:
   122c4:	add	ip, pc, #0, 12
   122c8:	add	ip, ip, #286720	; 0x46000
   122cc:	ldr	pc, [ip, #3744]!	; 0xea0

000122d0 <exit@plt>:
   122d0:	add	ip, pc, #0, 12
   122d4:	add	ip, ip, #286720	; 0x46000
   122d8:	ldr	pc, [ip, #3736]!	; 0xe98

000122dc <feof@plt>:
   122dc:	add	ip, pc, #0, 12
   122e0:	add	ip, ip, #286720	; 0x46000
   122e4:	ldr	pc, [ip, #3728]!	; 0xe90

000122e8 <getfilecon@plt>:
   122e8:	add	ip, pc, #0, 12
   122ec:	add	ip, ip, #286720	; 0x46000
   122f0:	ldr	pc, [ip, #3720]!	; 0xe88

000122f4 <strtoul@plt>:
   122f4:	add	ip, pc, #0, 12
   122f8:	add	ip, ip, #286720	; 0x46000
   122fc:	ldr	pc, [ip, #3712]!	; 0xe80

00012300 <strlen@plt>:
   12300:	add	ip, pc, #0, 12
   12304:	add	ip, ip, #286720	; 0x46000
   12308:	ldr	pc, [ip, #3704]!	; 0xe78

0001230c <strchr@plt>:
   1230c:	add	ip, pc, #0, 12
   12310:	add	ip, ip, #286720	; 0x46000
   12314:	ldr	pc, [ip, #3696]!	; 0xe70

00012318 <setenv@plt>:
   12318:	add	ip, pc, #0, 12
   1231c:	add	ip, ip, #286720	; 0x46000
   12320:	ldr	pc, [ip, #3688]!	; 0xe68

00012324 <openat64@plt>:
   12324:	add	ip, pc, #0, 12
   12328:	add	ip, ip, #286720	; 0x46000
   1232c:	ldr	pc, [ip, #3680]!	; 0xe60

00012330 <memrchr@plt>:
   12330:	add	ip, pc, #0, 12
   12334:	add	ip, ip, #286720	; 0x46000
   12338:	ldr	pc, [ip, #3672]!	; 0xe58

0001233c <fprintf@plt>:
   1233c:	add	ip, pc, #0, 12
   12340:	add	ip, ip, #286720	; 0x46000
   12344:	ldr	pc, [ip, #3664]!	; 0xe50

00012348 <__errno_location@plt>:
   12348:	add	ip, pc, #0, 12
   1234c:	add	ip, ip, #286720	; 0x46000
   12350:	ldr	pc, [ip, #3656]!	; 0xe48

00012354 <iswalnum@plt>:
   12354:	add	ip, pc, #0, 12
   12358:	add	ip, ip, #286720	; 0x46000
   1235c:	ldr	pc, [ip, #3648]!	; 0xe40

00012360 <snprintf@plt>:
   12360:	add	ip, pc, #0, 12
   12364:	add	ip, ip, #286720	; 0x46000
   12368:	ldr	pc, [ip, #3640]!	; 0xe38

0001236c <__cxa_atexit@plt>:
   1236c:	add	ip, pc, #0, 12
   12370:	add	ip, ip, #286720	; 0x46000
   12374:	ldr	pc, [ip, #3632]!	; 0xe30

00012378 <memset@plt>:
   12378:	add	ip, pc, #0, 12
   1237c:	add	ip, ip, #286720	; 0x46000
   12380:	ldr	pc, [ip, #3624]!	; 0xe28

00012384 <putchar@plt>:
   12384:	add	ip, pc, #0, 12
   12388:	add	ip, ip, #286720	; 0x46000
   1238c:	ldr	pc, [ip, #3616]!	; 0xe20

00012390 <strncpy@plt>:
   12390:	add	ip, pc, #0, 12
   12394:	add	ip, ip, #286720	; 0x46000
   12398:	ldr	pc, [ip, #3608]!	; 0xe18

0001239c <pthread_mutexattr_gettype@plt>:
   1239c:	add	ip, pc, #0, 12
   123a0:	add	ip, ip, #286720	; 0x46000
   123a4:	ldr	pc, [ip, #3600]!	; 0xe10

000123a8 <btowc@plt>:
   123a8:	add	ip, pc, #0, 12
   123ac:	add	ip, ip, #286720	; 0x46000
   123b0:	ldr	pc, [ip, #3592]!	; 0xe08

000123b4 <strtod@plt>:
   123b4:	add	ip, pc, #0, 12
   123b8:	add	ip, ip, #286720	; 0x46000
   123bc:	ldr	pc, [ip, #3584]!	; 0xe00

000123c0 <fileno@plt>:
   123c0:	add	ip, pc, #0, 12
   123c4:	add	ip, ip, #286720	; 0x46000
   123c8:	ldr	pc, [ip, #3576]!	; 0xdf8

000123cc <difftime@plt>:
   123cc:	add	ip, pc, #0, 12
   123d0:	add	ip, ip, #286720	; 0x46000
   123d4:	ldr	pc, [ip, #3568]!	; 0xdf0

000123d8 <memchr@plt>:
   123d8:	add	ip, pc, #0, 12
   123dc:	add	ip, ip, #286720	; 0x46000
   123e0:	ldr	pc, [ip, #3560]!	; 0xde8

000123e4 <setfilecon@plt>:
   123e4:	add	ip, pc, #0, 12
   123e8:	add	ip, ip, #286720	; 0x46000
   123ec:	ldr	pc, [ip, #3552]!	; 0xde0

000123f0 <access@plt>:
   123f0:	add	ip, pc, #0, 12
   123f4:	add	ip, ip, #286720	; 0x46000
   123f8:	ldr	pc, [ip, #3544]!	; 0xdd8

000123fc <fclose@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #286720	; 0x46000
   12404:	ldr	pc, [ip, #3536]!	; 0xdd0

00012408 <strnlen@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #286720	; 0x46000
   12410:	ldr	pc, [ip, #3528]!	; 0xdc8

00012414 <fseeko64@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #286720	; 0x46000
   1241c:	ldr	pc, [ip, #3520]!	; 0xdc0

00012420 <endmntent@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #286720	; 0x46000
   12428:	ldr	pc, [ip, #3512]!	; 0xdb8

0001242c <fcntl64@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #286720	; 0x46000
   12434:	ldr	pc, [ip, #3504]!	; 0xdb0

00012438 <rpmatch@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #286720	; 0x46000
   12440:	ldr	pc, [ip, #3496]!	; 0xda8

00012444 <setlocale@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #286720	; 0x46000
   1244c:	ldr	pc, [ip, #3488]!	; 0xda0

00012450 <fork@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #286720	; 0x46000
   12458:	ldr	pc, [ip, #3480]!	; 0xd98

0001245c <endpwent@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #286720	; 0x46000
   12464:	ldr	pc, [ip, #3472]!	; 0xd90

00012468 <strrchr@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #286720	; 0x46000
   12470:	ldr	pc, [ip, #3464]!	; 0xd88

00012474 <vfprintf@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #286720	; 0x46000
   1247c:	ldr	pc, [ip, #3456]!	; 0xd80

00012480 <nl_langinfo@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #286720	; 0x46000
   12488:	ldr	pc, [ip, #3448]!	; 0xd78

0001248c <fputc@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #286720	; 0x46000
   12494:	ldr	pc, [ip, #3440]!	; 0xd70

00012498 <sscanf@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #286720	; 0x46000
   124a0:	ldr	pc, [ip, #3432]!	; 0xd68

000124a4 <localeconv@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #286720	; 0x46000
   124ac:	ldr	pc, [ip, #3424]!	; 0xd60

000124b0 <sprintf@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #286720	; 0x46000
   124b8:	ldr	pc, [ip, #3416]!	; 0xd58

000124bc <readdir64@plt>:
   124bc:	add	ip, pc, #0, 12
   124c0:	add	ip, ip, #286720	; 0x46000
   124c4:	ldr	pc, [ip, #3408]!	; 0xd50

000124c8 <fdopendir@plt>:
   124c8:	add	ip, pc, #0, 12
   124cc:	add	ip, ip, #286720	; 0x46000
   124d0:	ldr	pc, [ip, #3400]!	; 0xd48

000124d4 <timegm@plt>:
   124d4:	add	ip, pc, #0, 12
   124d8:	add	ip, ip, #286720	; 0x46000
   124dc:	ldr	pc, [ip, #3392]!	; 0xd40

000124e0 <putc@plt>:
   124e0:	add	ip, pc, #0, 12
   124e4:	add	ip, ip, #286720	; 0x46000
   124e8:	ldr	pc, [ip, #3384]!	; 0xd38

000124ec <dirfd@plt>:
   124ec:	add	ip, pc, #0, 12
   124f0:	add	ip, ip, #286720	; 0x46000
   124f4:	ldr	pc, [ip, #3376]!	; 0xd30

000124f8 <fchdir@plt>:
   124f8:	add	ip, pc, #0, 12
   124fc:	add	ip, ip, #286720	; 0x46000
   12500:	ldr	pc, [ip, #3368]!	; 0xd28

00012504 <fopen64@plt>:
   12504:	add	ip, pc, #0, 12
   12508:	add	ip, ip, #286720	; 0x46000
   1250c:	ldr	pc, [ip, #3360]!	; 0xd20

00012510 <qsort@plt>:
   12510:	add	ip, pc, #0, 12
   12514:	add	ip, ip, #286720	; 0x46000
   12518:	ldr	pc, [ip, #3352]!	; 0xd18

0001251c <freecon@plt>:
   1251c:	add	ip, pc, #0, 12
   12520:	add	ip, ip, #286720	; 0x46000
   12524:	ldr	pc, [ip, #3344]!	; 0xd10

00012528 <strpbrk@plt>:
   12528:	add	ip, pc, #0, 12
   1252c:	add	ip, ip, #286720	; 0x46000
   12530:	ldr	pc, [ip, #3336]!	; 0xd08

00012534 <setmntent@plt>:
   12534:	add	ip, pc, #0, 12
   12538:	add	ip, ip, #286720	; 0x46000
   1253c:	ldr	pc, [ip, #3328]!	; 0xd00

00012540 <bindtextdomain@plt>:
   12540:	add	ip, pc, #0, 12
   12544:	add	ip, ip, #286720	; 0x46000
   12548:	ldr	pc, [ip, #3320]!	; 0xcf8

0001254c <getdelim@plt>:
   1254c:	add	ip, pc, #0, 12
   12550:	add	ip, ip, #286720	; 0x46000
   12554:	ldr	pc, [ip, #3312]!	; 0xcf0

00012558 <__xstat64@plt>:
   12558:	add	ip, pc, #0, 12
   1255c:	add	ip, ip, #286720	; 0x46000
   12560:	ldr	pc, [ip, #3304]!	; 0xce8

00012564 <isatty@plt>:
   12564:	add	ip, pc, #0, 12
   12568:	add	ip, ip, #286720	; 0x46000
   1256c:	ldr	pc, [ip, #3296]!	; 0xce0

00012570 <unsetenv@plt>:
   12570:	add	ip, pc, #0, 12
   12574:	add	ip, ip, #286720	; 0x46000
   12578:	ldr	pc, [ip, #3288]!	; 0xcd8

0001257c <towupper@plt>:
   1257c:	add	ip, pc, #0, 12
   12580:	add	ip, ip, #286720	; 0x46000
   12584:	ldr	pc, [ip, #3280]!	; 0xcd0

00012588 <fputs@plt>:
   12588:	add	ip, pc, #0, 12
   1258c:	add	ip, ip, #286720	; 0x46000
   12590:	ldr	pc, [ip, #3272]!	; 0xcc8

00012594 <strncmp@plt>:
   12594:	add	ip, pc, #0, 12
   12598:	add	ip, ip, #286720	; 0x46000
   1259c:	ldr	pc, [ip, #3264]!	; 0xcc0

000125a0 <abort@plt>:
   125a0:	add	ip, pc, #0, 12
   125a4:	add	ip, ip, #286720	; 0x46000
   125a8:	ldr	pc, [ip, #3256]!	; 0xcb8

000125ac <close@plt>:
   125ac:	add	ip, pc, #0, 12
   125b0:	add	ip, ip, #286720	; 0x46000
   125b4:	ldr	pc, [ip, #3248]!	; 0xcb0

000125b8 <__lxstat64@plt>:
   125b8:	add	ip, pc, #0, 12
   125bc:	add	ip, ip, #286720	; 0x46000
   125c0:	ldr	pc, [ip, #3240]!	; 0xca8

000125c4 <closedir@plt>:
   125c4:	add	ip, pc, #0, 12
   125c8:	add	ip, ip, #286720	; 0x46000
   125cc:	ldr	pc, [ip, #3232]!	; 0xca0

000125d0 <getgrgid@plt>:
   125d0:	add	ip, pc, #0, 12
   125d4:	add	ip, ip, #286720	; 0x46000
   125d8:	ldr	pc, [ip, #3224]!	; 0xc98

000125dc <getgrnam@plt>:
   125dc:	add	ip, pc, #0, 12
   125e0:	add	ip, ip, #286720	; 0x46000
   125e4:	ldr	pc, [ip, #3216]!	; 0xc90

000125e8 <strspn@plt>:
   125e8:	add	ip, pc, #0, 12
   125ec:	add	ip, ip, #286720	; 0x46000
   125f0:	ldr	pc, [ip, #3208]!	; 0xc88

000125f4 <__assert_fail@plt>:
   125f4:	add	ip, pc, #0, 12
   125f8:	add	ip, ip, #286720	; 0x46000
   125fc:	ldr	pc, [ip, #3200]!	; 0xc80

Disassembly of section .text:

00012600 <.text>:
   12600:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12604:	mov	r4, r0
   12608:	mov	r5, r1
   1260c:	ldr	r0, [r1]
   12610:	strd	r6, [sp, #8]
   12614:	movw	r6, #40512	; 0x9e40
   12618:	movt	r6, #5
   1261c:	strd	r8, [sp, #16]
   12620:	strd	sl, [sp, #24]
   12624:	str	lr, [sp, #32]
   12628:	sub	sp, sp, #244	; 0xf4
   1262c:	cmp	r0, #0
   12630:	movweq	r0, #10972	; 0x2adc
   12634:	movteq	r0, #4
   12638:	bl	2a924 <__assert_fail@plt+0x18330>
   1263c:	bl	1844c <__assert_fail@plt+0x5e58>
   12640:	mov	r3, #0
   12644:	mvn	r2, #99	; 0x63
   12648:	str	r2, [r6, #16]
   1264c:	str	r3, [r6, #28]
   12650:	strb	r3, [r6, #32]
   12654:	strb	r3, [r6, #40]	; 0x28
   12658:	bl	20d18 <__assert_fail@plt+0xe724>
   1265c:	cmp	r0, #0
   12660:	bne	12a28 <__assert_fail@plt+0x434>
   12664:	movw	r0, #10980	; 0x2ae4
   12668:	movt	r0, #4
   1266c:	bl	19448 <__assert_fail@plt+0x6e54>
   12670:	cmp	r0, #0
   12674:	str	r0, [r6, #36]	; 0x24
   12678:	beq	12ae8 <__assert_fail@plt+0x4f4>
   1267c:	movw	r7, #40556	; 0x9e6c
   12680:	movt	r7, #5
   12684:	mov	r0, r7
   12688:	bl	1902c <__assert_fail@plt+0x6a38>
   1268c:	movw	r1, #17776	; 0x4570
   12690:	movt	r1, #4
   12694:	mov	r0, #6
   12698:	bl	12444 <setlocale@plt>
   1269c:	movw	r1, #11028	; 0x2b14
   126a0:	movt	r1, #4
   126a4:	movw	r0, #27312	; 0x6ab0
   126a8:	movt	r0, #4
   126ac:	bl	12540 <bindtextdomain@plt>
   126b0:	movw	r0, #27312	; 0x6ab0
   126b4:	movt	r0, #4
   126b8:	bl	12108 <textdomain@plt>
   126bc:	movw	r0, #8904	; 0x22c8
   126c0:	movt	r0, #2
   126c4:	bl	4278c <__assert_fail@plt+0x30198>
   126c8:	cmp	r0, #0
   126cc:	bne	12b14 <__assert_fail@plt+0x520>
   126d0:	mov	r1, r5
   126d4:	mov	r0, r4
   126d8:	bl	18ba8 <__assert_fail@plt+0x65b4>
   126dc:	ldr	r3, [r7, #44]	; 0x2c
   126e0:	mov	r8, r0
   126e4:	tst	r3, #2
   126e8:	bne	12864 <__assert_fail@plt+0x270>
   126ec:	tst	r3, #128	; 0x80
   126f0:	bne	12a30 <__assert_fail@plt+0x43c>
   126f4:	mov	r0, r4
   126f8:	mov	r2, r8
   126fc:	mov	r1, r5
   12700:	sub	r4, r4, r8
   12704:	bl	17568 <__assert_fail@plt+0x4f74>
   12708:	cmp	r4, #0
   1270c:	str	r0, [sp, #28]
   12710:	bgt	129e8 <__assert_fail@plt+0x3f4>
   12714:	ldr	r4, [r7, #76]	; 0x4c
   12718:	cmp	r4, #0
   1271c:	beq	12a5c <__assert_fail@plt+0x468>
   12720:	movw	r1, #11180	; 0x2bac
   12724:	movt	r1, #4
   12728:	mov	r0, r4
   1272c:	bl	11f40 <strcmp@plt>
   12730:	subs	r5, r0, #0
   12734:	bne	12874 <__assert_fail@plt+0x280>
   12738:	ldrb	r4, [r7, #80]	; 0x50
   1273c:	cmp	r4, #0
   12740:	bne	12b84 <__assert_fail@plt+0x590>
   12744:	mov	r2, #5
   12748:	movw	r1, #11268	; 0x2c04
   1274c:	movt	r1, #4
   12750:	bl	120b4 <dcgettext@plt>
   12754:	mov	r1, r0
   12758:	mov	r0, r4
   1275c:	bl	192f4 <__assert_fail@plt+0x6d00>
   12760:	movw	r3, #38224	; 0x9550
   12764:	movt	r3, #5
   12768:	str	r0, [sp, #20]
   1276c:	ldr	r3, [r3]
   12770:	str	r3, [sp, #16]
   12774:	ldr	r0, [sp, #16]
   12778:	bl	21f24 <__assert_fail@plt+0xf930>
   1277c:	mov	r8, r0
   12780:	cmp	r8, #0
   12784:	beq	12ae4 <__assert_fail@plt+0x4f0>
   12788:	movw	r3, #11520	; 0x2d00
   1278c:	movt	r3, #4
   12790:	movw	sl, #11488	; 0x2ce0
   12794:	movt	sl, #4
   12798:	movw	fp, #28236	; 0x6e4c
   1279c:	movt	fp, #4
   127a0:	str	r3, [sp, #24]
   127a4:	mov	r3, #1
   127a8:	str	r3, [sp, #12]
   127ac:	add	r1, sp, #136	; 0x88
   127b0:	mov	r0, r8
   127b4:	bl	21f64 <__assert_fail@plt+0xf970>
   127b8:	subs	r4, r0, #0
   127bc:	beq	1296c <__assert_fail@plt+0x378>
   127c0:	ldrb	r9, [r4]
   127c4:	ldr	r5, [r7, #76]	; 0x4c
   127c8:	cmp	r9, #0
   127cc:	beq	128f4 <__assert_fail@plt+0x300>
   127d0:	cmp	r5, #0
   127d4:	beq	128e0 <__assert_fail@plt+0x2ec>
   127d8:	mov	r0, r4
   127dc:	bl	12300 <strlen@plt>
   127e0:	str	r0, [r6, #20]
   127e4:	mov	r0, r4
   127e8:	bl	12e0c <__assert_fail@plt+0x818>
   127ec:	cmp	r0, #0
   127f0:	bne	127ac <__assert_fail@plt+0x1b8>
   127f4:	str	r0, [sp, #12]
   127f8:	mov	r0, r8
   127fc:	bl	22040 <__assert_fail@plt+0xfa4c>
   12800:	ldr	r3, [sp, #12]
   12804:	cmp	r3, #0
   12808:	beq	12844 <__assert_fail@plt+0x250>
   1280c:	ldr	r3, [r7, #76]	; 0x4c
   12810:	cmp	r3, #0
   12814:	beq	12838 <__assert_fail@plt+0x244>
   12818:	ldr	r0, [sp, #16]
   1281c:	bl	11fe8 <ferror@plt>
   12820:	cmp	r0, #0
   12824:	bne	12bac <__assert_fail@plt+0x5b8>
   12828:	ldr	r0, [sp, #16]
   1282c:	bl	123fc <fclose@plt>
   12830:	cmp	r0, #0
   12834:	bne	12bac <__assert_fail@plt+0x5b8>
   12838:	ldr	r0, [sp, #28]
   1283c:	bl	15098 <__assert_fail@plt+0x2aa4>
   12840:	bl	184ec <__assert_fail@plt+0x5ef8>
   12844:	ldr	r0, [r6, #28]
   12848:	add	sp, sp, #244	; 0xf4
   1284c:	ldrd	r4, [sp]
   12850:	ldrd	r6, [sp, #8]
   12854:	ldrd	r8, [sp, #16]
   12858:	ldrd	sl, [sp, #24]
   1285c:	add	sp, sp, #32
   12860:	pop	{pc}		; (ldr pc, [sp], #4)
   12864:	movw	r2, #34944	; 0x8880
   12868:	movt	r2, #1
   1286c:	str	r2, [r7, #52]	; 0x34
   12870:	b	126ec <__assert_fail@plt+0xf8>
   12874:	mov	r1, r4
   12878:	mov	r0, #0
   1287c:	bl	192f4 <__assert_fail@plt+0x6d00>
   12880:	movw	r1, #34332	; 0x861c
   12884:	movt	r1, #4
   12888:	str	r0, [sp, #20]
   1288c:	ldr	r0, [r7, #76]	; 0x4c
   12890:	bl	12504 <fopen64@plt>
   12894:	subs	r3, r0, #0
   12898:	str	r3, [sp, #16]
   1289c:	beq	12bd4 <__assert_fail@plt+0x5e0>
   128a0:	bl	123c0 <fileno@plt>
   128a4:	subs	r8, r0, #0
   128a8:	blt	12c04 <__assert_fail@plt+0x610>
   128ac:	ldrb	r3, [r7, #80]	; 0x50
   128b0:	cmp	r3, #0
   128b4:	beq	128d0 <__assert_fail@plt+0x2dc>
   128b8:	mov	r1, r8
   128bc:	add	r2, sp, #32
   128c0:	mov	r0, #3
   128c4:	bl	1215c <__fxstat64@plt>
   128c8:	subs	r1, r0, #0
   128cc:	beq	12a78 <__assert_fail@plt+0x484>
   128d0:	mov	r0, r8
   128d4:	mov	r1, #1
   128d8:	bl	22228 <__assert_fail@plt+0xfc34>
   128dc:	b	12774 <__assert_fail@plt+0x180>
   128e0:	mov	r1, #1
   128e4:	bl	18b24 <__assert_fail@plt+0x6530>
   128e8:	cmp	r0, #0
   128ec:	beq	127d8 <__assert_fail@plt+0x1e4>
   128f0:	b	127f8 <__assert_fail@plt+0x204>
   128f4:	cmp	r5, #0
   128f8:	beq	12948 <__assert_fail@plt+0x354>
   128fc:	mov	r0, r8
   12900:	bl	22018 <__assert_fail@plt+0xfa24>
   12904:	mov	r4, r0
   12908:	mov	r2, #5
   1290c:	mov	r1, sl
   12910:	mov	r0, r9
   12914:	bl	120b4 <dcgettext@plt>
   12918:	mov	r1, r9
   1291c:	str	r4, [sp]
   12920:	str	r0, [sp, #4]
   12924:	mov	r0, r9
   12928:	ldr	r3, [sp, #20]
   1292c:	ldr	r2, [sp, #24]
   12930:	bl	121ec <error@plt>
   12934:	mov	r3, #1
   12938:	mov	r2, #0
   1293c:	str	r2, [sp, #12]
   12940:	str	r3, [r6, #28]
   12944:	b	127ac <__assert_fail@plt+0x1b8>
   12948:	mov	r1, r4
   1294c:	mov	r0, r5
   12950:	bl	192f4 <__assert_fail@plt+0x6d00>
   12954:	mov	r3, r0
   12958:	mov	r2, fp
   1295c:	mov	r0, r5
   12960:	mov	r1, #2
   12964:	bl	121ec <error@plt>
   12968:	b	12934 <__assert_fail@plt+0x340>
   1296c:	ldr	r3, [sp, #136]	; 0x88
   12970:	cmp	r3, #3
   12974:	beq	12ae4 <__assert_fail@plt+0x4f0>
   12978:	cmp	r3, #4
   1297c:	bne	129c4 <__assert_fail@plt+0x3d0>
   12980:	bl	12348 <__errno_location@plt>
   12984:	ldr	r5, [r0]
   12988:	mov	r2, #5
   1298c:	mov	r0, r4
   12990:	movw	r1, #11432	; 0x2ca8
   12994:	movt	r1, #4
   12998:	bl	120b4 <dcgettext@plt>
   1299c:	mov	r2, r0
   129a0:	mov	r0, r4
   129a4:	ldr	r3, [sp, #20]
   129a8:	mov	r1, r5
   129ac:	bl	121ec <error@plt>
   129b0:	mov	r3, #1
   129b4:	mov	r0, r8
   129b8:	str	r3, [r6, #28]
   129bc:	bl	22040 <__assert_fail@plt+0xfa4c>
   129c0:	b	12844 <__assert_fail@plt+0x250>
   129c4:	cmp	r3, #2
   129c8:	beq	127f8 <__assert_fail@plt+0x204>
   129cc:	movw	r1, #10272	; 0x2820
   129d0:	movt	r1, #4
   129d4:	ldr	r3, [pc, #580]	; 12c20 <__assert_fail@plt+0x62c>
   129d8:	movw	r0, #11448	; 0x2cb8
   129dc:	movt	r0, #4
   129e0:	movw	r2, #675	; 0x2a3
   129e4:	bl	125f4 <__assert_fail@plt>
   129e8:	mov	r1, #1
   129ec:	ldr	r0, [r5, r8, lsl #2]
   129f0:	add	r4, r5, r8, lsl #2
   129f4:	bl	18b24 <__assert_fail@plt+0x6530>
   129f8:	subs	r9, r0, #0
   129fc:	bne	12714 <__assert_fail@plt+0x120>
   12a00:	ldr	r3, [r7, #76]	; 0x4c
   12a04:	cmp	r3, #0
   12a08:	str	r3, [sp, #16]
   12a0c:	bne	12b24 <__assert_fail@plt+0x530>
   12a10:	ldr	r3, [sp, #16]
   12a14:	mov	r0, r4
   12a18:	str	r3, [sp, #20]
   12a1c:	bl	21eec <__assert_fail@plt+0xf8f8>
   12a20:	mov	r8, r0
   12a24:	b	12780 <__assert_fail@plt+0x18c>
   12a28:	bl	20ba4 <__assert_fail@plt+0xe5b0>
   12a2c:	b	12664 <__assert_fail@plt+0x70>
   12a30:	movw	r3, #38216	; 0x9548
   12a34:	movt	r3, #5
   12a38:	ldr	r0, [pc, #484]	; 12c24 <__assert_fail@plt+0x630>
   12a3c:	ldr	r9, [r3]
   12a40:	bl	120a8 <ctime@plt>
   12a44:	mov	r2, r0
   12a48:	movw	r1, #11088	; 0x2b50
   12a4c:	movt	r1, #4
   12a50:	mov	r0, r9
   12a54:	bl	1233c <fprintf@plt>
   12a58:	b	126f4 <__assert_fail@plt+0x100>
   12a5c:	mov	r3, #46	; 0x2e
   12a60:	add	r0, sp, #136	; 0x88
   12a64:	strh	r3, [sp, #136]	; 0x88
   12a68:	bl	12e0c <__assert_fail@plt+0x818>
   12a6c:	cmp	r0, #0
   12a70:	beq	12844 <__assert_fail@plt+0x250>
   12a74:	b	12838 <__assert_fail@plt+0x244>
   12a78:	add	r2, sp, #136	; 0x88
   12a7c:	mov	r0, #3
   12a80:	bl	1215c <__fxstat64@plt>
   12a84:	subs	r9, r0, #0
   12a88:	bne	128d0 <__assert_fail@plt+0x2dc>
   12a8c:	ldrd	r4, [sp, #128]	; 0x80
   12a90:	ldrd	r2, [sp, #232]	; 0xe8
   12a94:	cmp	r5, r3
   12a98:	cmpeq	r4, r2
   12a9c:	bne	128d0 <__assert_fail@plt+0x2dc>
   12aa0:	ldrd	r4, [sp, #32]
   12aa4:	ldrd	r2, [sp, #136]	; 0x88
   12aa8:	cmp	r5, r3
   12aac:	cmpeq	r4, r2
   12ab0:	bne	128d0 <__assert_fail@plt+0x2dc>
   12ab4:	mov	r2, #5
   12ab8:	movw	r1, #11324	; 0x2c3c
   12abc:	movt	r1, #4
   12ac0:	bl	120b4 <dcgettext@plt>
   12ac4:	ldr	r2, [sp, #20]
   12ac8:	mov	r3, r0
   12acc:	mov	r1, r9
   12ad0:	mov	r0, #1
   12ad4:	str	r2, [sp]
   12ad8:	movw	r2, #11424	; 0x2ca0
   12adc:	movt	r2, #4
   12ae0:	bl	121ec <error@plt>
   12ae4:	bl	2dea4 <__assert_fail@plt+0x1b8b0>
   12ae8:	bl	12348 <__errno_location@plt>
   12aec:	movw	r1, #10984	; 0x2ae8
   12af0:	movt	r1, #4
   12af4:	ldr	r4, [r0]
   12af8:	mov	r2, #5
   12afc:	mov	r0, #0
   12b00:	bl	120b4 <dcgettext@plt>
   12b04:	mov	r2, r0
   12b08:	mov	r0, #1
   12b0c:	mov	r1, r4
   12b10:	bl	121ec <error@plt>
   12b14:	bl	12348 <__errno_location@plt>
   12b18:	movw	r1, #11052	; 0x2b2c
   12b1c:	movt	r1, #4
   12b20:	b	12af4 <__assert_fail@plt+0x500>
   12b24:	mov	r2, #5
   12b28:	movw	r1, #11108	; 0x2b64
   12b2c:	movt	r1, #4
   12b30:	bl	120b4 <dcgettext@plt>
   12b34:	mov	r4, r0
   12b38:	mov	r0, r9
   12b3c:	ldr	r1, [r5, r8, lsl #2]
   12b40:	bl	192f4 <__assert_fail@plt+0x6d00>
   12b44:	mov	r3, r0
   12b48:	mov	r2, r4
   12b4c:	mov	r1, r9
   12b50:	mov	r0, r9
   12b54:	bl	121ec <error@plt>
   12b58:	mov	r2, #5
   12b5c:	movw	r1, #11128	; 0x2b78
   12b60:	movt	r1, #4
   12b64:	mov	r0, r9
   12b68:	bl	120b4 <dcgettext@plt>
   12b6c:	mov	r3, r0
   12b70:	movw	r2, #28236	; 0x6e4c
   12b74:	movt	r2, #4
   12b78:	mov	r1, r9
   12b7c:	mov	r0, #1
   12b80:	bl	121ec <error@plt>
   12b84:	mov	r2, #5
   12b88:	movw	r1, #11184	; 0x2bb0
   12b8c:	movt	r1, #4
   12b90:	bl	120b4 <dcgettext@plt>
   12b94:	mov	r3, r0
   12b98:	movw	r2, #32508	; 0x7efc
   12b9c:	movt	r2, #4
   12ba0:	mov	r1, r5
   12ba4:	mov	r0, #1
   12ba8:	bl	121ec <error@plt>
   12bac:	mov	r2, #5
   12bb0:	movw	r1, #11532	; 0x2d0c
   12bb4:	movt	r1, #4
   12bb8:	mov	r0, #0
   12bbc:	bl	120b4 <dcgettext@plt>
   12bc0:	mov	r2, r0
   12bc4:	mov	r1, #0
   12bc8:	ldr	r3, [sp, #20]
   12bcc:	mov	r0, #1
   12bd0:	bl	121ec <error@plt>
   12bd4:	bl	12348 <__errno_location@plt>
   12bd8:	ldr	r4, [r0]
   12bdc:	mov	r2, #5
   12be0:	movw	r1, #11288	; 0x2c18
   12be4:	movt	r1, #4
   12be8:	ldr	r0, [sp, #16]
   12bec:	bl	120b4 <dcgettext@plt>
   12bf0:	mov	r2, r0
   12bf4:	mov	r0, #1
   12bf8:	ldr	r3, [sp, #20]
   12bfc:	mov	r1, r4
   12c00:	bl	121ec <error@plt>
   12c04:	movw	r1, #10272	; 0x2820
   12c08:	movt	r1, #4
   12c0c:	ldr	r3, [pc, #12]	; 12c20 <__assert_fail@plt+0x62c>
   12c10:	movw	r0, #11316	; 0x2c34
   12c14:	movt	r0, #4
   12c18:	movw	r2, #610	; 0x262
   12c1c:	bl	125f4 <__assert_fail@plt>
   12c20:	andeq	r2, r4, r8, lsl #16
   12c24:	andeq	r9, r5, r8, lsl #29
   12c28:	mov	fp, #0
   12c2c:	mov	lr, #0
   12c30:	pop	{r1}		; (ldr r1, [sp], #4)
   12c34:	mov	r2, sp
   12c38:	push	{r2}		; (str r2, [sp, #-4]!)
   12c3c:	push	{r0}		; (str r0, [sp, #-4]!)
   12c40:	ldr	ip, [pc, #16]	; 12c58 <__assert_fail@plt+0x664>
   12c44:	push	{ip}		; (str ip, [sp, #-4]!)
   12c48:	ldr	r0, [pc, #12]	; 12c5c <__assert_fail@plt+0x668>
   12c4c:	ldr	r3, [pc, #12]	; 12c60 <__assert_fail@plt+0x66c>
   12c50:	bl	1224c <__libc_start_main@plt>
   12c54:	bl	125a0 <abort@plt>
   12c58:	andeq	r2, r4, r8, lsl #15
   12c5c:	andeq	r2, r1, r0, lsl #12
   12c60:	andeq	r2, r4, r8, lsr #14
   12c64:	ldr	r3, [pc, #20]	; 12c80 <__assert_fail@plt+0x68c>
   12c68:	ldr	r2, [pc, #20]	; 12c84 <__assert_fail@plt+0x690>
   12c6c:	add	r3, pc, r3
   12c70:	ldr	r2, [r3, r2]
   12c74:	cmp	r2, #0
   12c78:	bxeq	lr
   12c7c:	b	122ac <__gmon_start__@plt>
   12c80:	andeq	r6, r4, ip, lsl #7
   12c84:	andeq	r0, r0, r0, lsl #5
   12c88:	ldr	r0, [pc, #24]	; 12ca8 <__assert_fail@plt+0x6b4>
   12c8c:	ldr	r3, [pc, #24]	; 12cac <__assert_fail@plt+0x6b8>
   12c90:	cmp	r3, r0
   12c94:	bxeq	lr
   12c98:	ldr	r3, [pc, #16]	; 12cb0 <__assert_fail@plt+0x6bc>
   12c9c:	cmp	r3, #0
   12ca0:	bxeq	lr
   12ca4:	bx	r3
   12ca8:	andeq	r9, r5, r8, lsr r5
   12cac:	andeq	r9, r5, r8, lsr r5
   12cb0:	andeq	r0, r0, r0
   12cb4:	ldr	r0, [pc, #36]	; 12ce0 <__assert_fail@plt+0x6ec>
   12cb8:	ldr	r1, [pc, #36]	; 12ce4 <__assert_fail@plt+0x6f0>
   12cbc:	sub	r1, r1, r0
   12cc0:	asr	r1, r1, #2
   12cc4:	add	r1, r1, r1, lsr #31
   12cc8:	asrs	r1, r1, #1
   12ccc:	bxeq	lr
   12cd0:	ldr	r3, [pc, #16]	; 12ce8 <__assert_fail@plt+0x6f4>
   12cd4:	cmp	r3, #0
   12cd8:	bxeq	lr
   12cdc:	bx	r3
   12ce0:	andeq	r9, r5, r8, lsr r5
   12ce4:	andeq	r9, r5, r8, lsr r5
   12ce8:	andeq	r0, r0, r0
   12cec:	push	{r4, lr}
   12cf0:	ldr	r4, [pc, #24]	; 12d10 <__assert_fail@plt+0x71c>
   12cf4:	ldrb	r3, [r4]
   12cf8:	cmp	r3, #0
   12cfc:	popne	{r4, pc}
   12d00:	bl	12c88 <__assert_fail@plt+0x694>
   12d04:	mov	r3, #1
   12d08:	strb	r3, [r4]
   12d0c:	pop	{r4, pc}
   12d10:	andeq	r9, r5, r8, asr r5
   12d14:	b	12cb4 <__assert_fail@plt+0x6c0>
   12d18:	movw	r3, #40556	; 0x9e6c
   12d1c:	movt	r3, #5
   12d20:	push	{lr}		; (str lr, [sp, #-4]!)
   12d24:	sub	sp, sp, #108	; 0x6c
   12d28:	ldr	r3, [r3, #52]	; 0x34
   12d2c:	mov	r1, sp
   12d30:	blx	r3
   12d34:	cmp	r0, #0
   12d38:	beq	12d50 <__assert_fail@plt+0x75c>
   12d3c:	bl	12348 <__errno_location@plt>
   12d40:	ldr	r0, [r0]
   12d44:	sub	r0, r0, #40	; 0x28
   12d48:	clz	r0, r0
   12d4c:	lsr	r0, r0, #5
   12d50:	add	sp, sp, #108	; 0x6c
   12d54:	pop	{pc}		; (ldr pc, [sp], #4)
   12d58:	str	r4, [sp, #-8]!
   12d5c:	movw	r4, #37516	; 0x928c
   12d60:	movt	r4, #5
   12d64:	ldr	r2, [r4]
   12d68:	str	lr, [sp, #4]
   12d6c:	tst	r2, #512	; 0x200
   12d70:	beq	12dac <__assert_fail@plt+0x7b8>
   12d74:	cmn	r0, #100	; 0x64
   12d78:	cmpne	r0, #0
   12d7c:	blt	12db8 <__assert_fail@plt+0x7c4>
   12d80:	ldr	r1, [r4, #4]
   12d84:	movw	r2, #40512	; 0x9e40
   12d88:	movt	r2, #5
   12d8c:	str	r0, [r2, #16]
   12d90:	cmp	r1, #0
   12d94:	bge	12dac <__assert_fail@plt+0x7b8>
   12d98:	cmn	r0, #100	; 0x64
   12d9c:	streq	r0, [r4, #4]
   12da0:	beq	12dac <__assert_fail@plt+0x7b8>
   12da4:	bl	2229c <__assert_fail@plt+0xfca8>
   12da8:	str	r0, [r4, #4]
   12dac:	ldr	r4, [sp]
   12db0:	add	sp, sp, #4
   12db4:	pop	{pc}		; (ldr pc, [sp], #4)
   12db8:	movw	r3, #10160	; 0x27b0
   12dbc:	movt	r3, #4
   12dc0:	movw	r1, #10272	; 0x2820
   12dc4:	movt	r1, #4
   12dc8:	movw	r0, #10284	; 0x282c
   12dcc:	movt	r0, #4
   12dd0:	mov	r2, #107	; 0x6b
   12dd4:	bl	125f4 <__assert_fail@plt>
   12dd8:	str	r4, [sp, #-8]!
   12ddc:	movw	r4, #37516	; 0x928c
   12de0:	movt	r4, #5
   12de4:	ldr	r0, [r4, #4]
   12de8:	str	lr, [sp, #4]
   12dec:	cmp	r0, #0
   12df0:	blt	12e00 <__assert_fail@plt+0x80c>
   12df4:	bl	125ac <close@plt>
   12df8:	mvn	r3, #0
   12dfc:	str	r3, [r4, #4]
   12e00:	ldr	r4, [sp]
   12e04:	add	sp, sp, #4
   12e08:	pop	{pc}		; (ldr pc, [sp], #4)
   12e0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12e10:	movw	r5, #40512	; 0x9e40
   12e14:	movt	r5, #5
   12e18:	strd	r6, [sp, #8]
   12e1c:	mov	r4, r0
   12e20:	strd	r8, [sp, #16]
   12e24:	movw	r9, #37516	; 0x928c
   12e28:	movt	r9, #5
   12e2c:	strd	sl, [sp, #24]
   12e30:	movw	fp, #40556	; 0x9e6c
   12e34:	movt	fp, #5
   12e38:	str	lr, [sp, #32]
   12e3c:	sub	sp, sp, #180	; 0xb4
   12e40:	str	r0, [sp, #52]	; 0x34
   12e44:	bl	12300 <strlen@plt>
   12e48:	str	r0, [r5, #20]
   12e4c:	mvn	r0, #99	; 0x63
   12e50:	bl	12d58 <__assert_fail@plt+0x764>
   12e54:	ldr	r3, [fp, #48]	; 0x30
   12e58:	mov	r2, #0
   12e5c:	str	r4, [sp, #64]	; 0x40
   12e60:	str	r2, [sp, #68]	; 0x44
   12e64:	ldr	r1, [r9]
   12e68:	cmp	r3, #1
   12e6c:	beq	13510 <__assert_fail@plt+0xf1c>
   12e70:	cmp	r3, r2
   12e74:	beq	13504 <__assert_fail@plt+0xf10>
   12e78:	cmp	r3, #2
   12e7c:	orreq	r1, r1, #17
   12e80:	streq	r1, [r9]
   12e84:	ldrb	r3, [fp, #13]
   12e88:	mov	r2, #0
   12e8c:	add	r0, sp, #64	; 0x40
   12e90:	cmp	r3, #0
   12e94:	orrne	r1, r1, #64	; 0x40
   12e98:	strne	r1, [r9]
   12e9c:	bl	30cdc <__assert_fail@plt+0x1e6e8>
   12ea0:	mov	sl, r0
   12ea4:	bl	12348 <__errno_location@plt>
   12ea8:	cmp	sl, #0
   12eac:	str	r0, [sp, #20]
   12eb0:	beq	135b4 <__assert_fail@plt+0xfc0>
   12eb4:	movw	r3, #38216	; 0x9548
   12eb8:	movt	r3, #5
   12ebc:	mov	r7, #-2147483648	; 0x80000000
   12ec0:	mov	r8, sl
   12ec4:	str	r3, [sp, #40]	; 0x28
   12ec8:	movw	r3, #10348	; 0x286c
   12ecc:	movt	r3, #4
   12ed0:	str	r3, [sp, #44]	; 0x2c
   12ed4:	movw	r3, #10340	; 0x2864
   12ed8:	movt	r3, #4
   12edc:	str	r3, [sp, #48]	; 0x30
   12ee0:	ldr	r2, [sp, #20]
   12ee4:	mov	r3, #0
   12ee8:	mov	r0, r8
   12eec:	str	r3, [r2]
   12ef0:	bl	31200 <__assert_fail@plt+0x1ec0c>
   12ef4:	subs	r4, r0, #0
   12ef8:	beq	13338 <__assert_fail@plt+0xd44>
   12efc:	ldrb	r3, [r5, #32]
   12f00:	ldr	sl, [r4, #48]	; 0x30
   12f04:	cmp	r3, #0
   12f08:	beq	12f1c <__assert_fail@plt+0x928>
   12f0c:	cmp	r7, sl
   12f10:	beq	12f1c <__assert_fail@plt+0x928>
   12f14:	bl	18408 <__assert_fail@plt+0x5e14>
   12f18:	ldr	sl, [r4, #48]	; 0x30
   12f1c:	mov	r0, #0
   12f20:	ldr	r3, [r4, #80]	; 0x50
   12f24:	strb	r0, [r5, #4]
   12f28:	ldr	r2, [fp, #44]	; 0x2c
   12f2c:	str	r3, [r5, #8]
   12f30:	subs	r3, r3, r0
   12f34:	movne	r3, #1
   12f38:	tst	r2, #4
   12f3c:	strb	r3, [r5, #5]
   12f40:	strb	r0, [r5, #40]	; 0x28
   12f44:	bne	131fc <__assert_fail@plt+0xc08>
   12f48:	ldrh	r3, [r4, #56]	; 0x38
   12f4c:	cmp	r3, #6
   12f50:	beq	12f74 <__assert_fail@plt+0x980>
   12f54:	ldr	r2, [r4, #48]	; 0x30
   12f58:	ldr	r1, [r9, #8]
   12f5c:	clz	r3, r2
   12f60:	lsr	r3, r3, #5
   12f64:	cmp	r2, r1
   12f68:	orrgt	r3, r3, #1
   12f6c:	cmp	r3, #0
   12f70:	beq	12f84 <__assert_fail@plt+0x990>
   12f74:	ldr	r3, [r9]
   12f78:	tst	r3, #512	; 0x200
   12f7c:	beq	12f84 <__assert_fail@plt+0x990>
   12f80:	bl	12dd8 <__assert_fail@plt+0x7e4>
   12f84:	ldr	r0, [r8, #32]
   12f88:	bl	12d58 <__assert_fail@plt+0x764>
   12f8c:	ldrh	r1, [r4, #56]	; 0x38
   12f90:	ldr	r0, [r4, #48]	; 0x30
   12f94:	ldrd	r2, [r4, #160]	; 0xa0
   12f98:	cmp	r1, #7
   12f9c:	str	r0, [r9, #8]
   12fa0:	strd	r2, [sp, #168]	; 0xa8
   12fa4:	beq	132b0 <__assert_fail@plt+0xcbc>
   12fa8:	cmp	r1, #4
   12fac:	beq	13290 <__assert_fail@plt+0xc9c>
   12fb0:	cmp	r1, #2
   12fb4:	beq	13400 <__assert_fail@plt+0xe0c>
   12fb8:	cmp	r1, #13
   12fbc:	beq	13318 <__assert_fail@plt+0xd24>
   12fc0:	cmp	r1, #10
   12fc4:	beq	132f0 <__assert_fail@plt+0xcfc>
   12fc8:	sub	r3, r1, #10
   12fcc:	cmp	r3, #1
   12fd0:	bls	13104 <__assert_fail@plt+0xb10>
   12fd4:	add	r3, sp, #72	; 0x48
   12fd8:	movw	ip, #257	; 0x101
   12fdc:	mov	r0, r3
   12fe0:	mov	r2, #104	; 0x68
   12fe4:	add	r1, r4, #64	; 0x40
   12fe8:	strh	ip, [r5, #4]
   12fec:	bl	12024 <memcpy@plt>
   12ff0:	ldr	r6, [sp, #88]	; 0x58
   12ff4:	mov	r3, r0
   12ff8:	cmp	r6, #0
   12ffc:	str	r6, [r5, #8]
   13000:	str	r6, [sp, #60]	; 0x3c
   13004:	beq	13378 <__assert_fail@plt+0xd84>
   13008:	ldr	r2, [r4, #48]	; 0x30
   1300c:	str	r2, [r5]
   13010:	mov	ip, #0
   13014:	add	r2, r4, #168	; 0xa8
   13018:	ldr	r1, [r4, #28]
   1301c:	add	r0, sp, #60	; 0x3c
   13020:	str	ip, [sp]
   13024:	bl	189a4 <__assert_fail@plt+0x63b0>
   13028:	cmp	r0, #0
   1302c:	beq	130fc <__assert_fail@plt+0xb08>
   13030:	ldr	r3, [sp, #60]	; 0x3c
   13034:	ldrh	r1, [r4, #56]	; 0x38
   13038:	and	r3, r3, #61440	; 0xf000
   1303c:	cmp	r3, #16384	; 0x4000
   13040:	bne	1313c <__assert_fail@plt+0xb48>
   13044:	cmp	r1, #11
   13048:	beq	134c0 <__assert_fail@plt+0xecc>
   1304c:	ldr	r3, [fp, #4]
   13050:	mov	r7, #1
   13054:	cmp	r3, #0
   13058:	blt	13068 <__assert_fail@plt+0xa74>
   1305c:	ldr	r2, [r4, #48]	; 0x30
   13060:	cmp	r2, r3
   13064:	bge	133d4 <__assert_fail@plt+0xde0>
   13068:	mov	r6, #0
   1306c:	ldr	r3, [fp, #44]	; 0x2c
   13070:	cmp	r1, #1
   13074:	and	r3, r3, #4
   13078:	beq	132c0 <__assert_fail@plt+0xccc>
   1307c:	cmp	r1, #6
   13080:	bne	13090 <__assert_fail@plt+0xa9c>
   13084:	ldrb	r2, [fp]
   13088:	cmp	r2, #0
   1308c:	bne	132dc <__assert_fail@plt+0xce8>
   13090:	ldr	r2, [fp, #8]
   13094:	ldr	r0, [r4, #48]	; 0x30
   13098:	cmp	r0, r2
   1309c:	blt	13180 <__assert_fail@plt+0xb8c>
   130a0:	cmp	r3, #0
   130a4:	bne	1318c <__assert_fail@plt+0xb98>
   130a8:	cmp	r6, #0
   130ac:	bne	130f4 <__assert_fail@plt+0xb00>
   130b0:	ldr	r2, [r4, #24]
   130b4:	sub	r1, r1, #10
   130b8:	cmp	r1, #1
   130bc:	ldr	r3, [r8, #32]
   130c0:	movls	r1, #0
   130c4:	movhi	r1, #1
   130c8:	strb	r1, [r5, #4]
   130cc:	strd	r2, [r5, #12]
   130d0:	bl	16310 <__assert_fail@plt+0x3d1c>
   130d4:	mov	r2, r0
   130d8:	add	r1, sp, #72	; 0x48
   130dc:	ldr	r0, [r4, #28]
   130e0:	bl	191ac <__assert_fail@plt+0x6bb8>
   130e4:	ldrb	r3, [r5, #24]
   130e8:	cmp	r3, #0
   130ec:	bne	13490 <__assert_fail@plt+0xe9c>
   130f0:	ldrh	r1, [r4, #56]	; 0x38
   130f4:	cmp	r1, #6
   130f8:	beq	132e4 <__assert_fail@plt+0xcf0>
   130fc:	mov	r7, sl
   13100:	b	12ee0 <__assert_fail@plt+0x8ec>
   13104:	ldrb	r3, [r5, #4]
   13108:	cmp	r3, #0
   1310c:	bne	13604 <__assert_fail@plt+0x1010>
   13110:	cmp	r1, #11
   13114:	ldr	r3, [r5, #8]
   13118:	beq	13124 <__assert_fail@plt+0xb30>
   1311c:	cmp	r3, #0
   13120:	bne	13620 <__assert_fail@plt+0x102c>
   13124:	str	r3, [sp, #60]	; 0x3c
   13128:	cmp	r3, #0
   1312c:	ldr	r3, [r4, #48]	; 0x30
   13130:	str	r3, [r5]
   13134:	bne	1363c <__assert_fail@plt+0x1048>
   13138:	ldrh	r1, [r4, #56]	; 0x38
   1313c:	sub	r6, r1, #1
   13140:	cmp	r1, #6
   13144:	cmpne	r6, #1
   13148:	movls	r6, #1
   1314c:	movhi	r6, #0
   13150:	bls	13044 <__assert_fail@plt+0xa50>
   13154:	ldr	r3, [fp, #4]
   13158:	cmp	r3, #0
   1315c:	movge	r7, r6
   13160:	bge	1305c <__assert_fail@plt+0xa68>
   13164:	ldr	r2, [fp, #8]
   13168:	mov	r7, r6
   1316c:	ldr	r0, [r4, #48]	; 0x30
   13170:	ldr	r3, [fp, #44]	; 0x2c
   13174:	cmp	r0, r2
   13178:	and	r3, r3, #4
   1317c:	bge	130a0 <__assert_fail@plt+0xaac>
   13180:	cmp	r3, #0
   13184:	beq	130f4 <__assert_fail@plt+0xb00>
   13188:	mov	r6, #1
   1318c:	ldr	r3, [sp, #40]	; 0x28
   13190:	mov	r0, #0
   13194:	ldr	r2, [r4, #28]
   13198:	ldr	r1, [fp, #72]	; 0x48
   1319c:	ldr	r3, [r3]
   131a0:	str	r3, [sp, #24]
   131a4:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   131a8:	ldrh	r2, [r4, #56]	; 0x38
   131ac:	str	r0, [sp, #28]
   131b0:	sub	r1, r2, #1
   131b4:	cmp	r1, #13
   131b8:	bhi	134a4 <__assert_fail@plt+0xeb0>
   131bc:	movw	r3, #10160	; 0x27b0
   131c0:	movt	r3, #4
   131c4:	add	r3, r3, r1, lsl #2
   131c8:	ldr	r3, [r3, #12]
   131cc:	movw	r1, #10764	; 0x2a0c
   131d0:	movt	r1, #4
   131d4:	str	r7, [sp]
   131d8:	ldrb	ip, [r5, #5]
   131dc:	ldrb	lr, [r5, #4]
   131e0:	ldr	r0, [sp, #24]
   131e4:	ldr	r2, [sp, #28]
   131e8:	stmib	sp, {r6, lr}
   131ec:	str	ip, [sp, #12]
   131f0:	bl	1233c <fprintf@plt>
   131f4:	ldrh	r1, [r4, #56]	; 0x38
   131f8:	b	130a8 <__assert_fail@plt+0xab4>
   131fc:	ldr	r3, [sp, #40]	; 0x28
   13200:	ldr	r2, [r4, #28]
   13204:	ldr	r1, [fp, #72]	; 0x48
   13208:	ldr	r3, [r3]
   1320c:	str	r3, [sp, #24]
   13210:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   13214:	ldrh	r2, [r4, #56]	; 0x38
   13218:	str	r0, [sp, #28]
   1321c:	sub	r1, r2, #1
   13220:	cmp	r1, #13
   13224:	bhi	133bc <__assert_fail@plt+0xdc8>
   13228:	movw	r3, #10160	; 0x27b0
   1322c:	movt	r3, #4
   13230:	add	r3, r3, r1, lsl #2
   13234:	ldr	r6, [r3, #12]
   13238:	mov	r0, #1
   1323c:	ldr	r2, [r4, #28]
   13240:	ldr	r3, [r4, #48]	; 0x30
   13244:	ldr	r1, [fp, #72]	; 0x48
   13248:	ldr	r7, [r9, #8]
   1324c:	str	r3, [sp, #32]
   13250:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   13254:	str	r0, [sp, #36]	; 0x24
   13258:	mov	r0, #2
   1325c:	ldr	r2, [r4, #24]
   13260:	ldr	r1, [fp, #72]	; 0x48
   13264:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   13268:	mov	r3, r6
   1326c:	str	r0, [sp, #12]
   13270:	ldr	r1, [sp, #32]
   13274:	ldr	ip, [sp, #36]	; 0x24
   13278:	ldr	r0, [sp, #24]
   1327c:	ldr	r2, [sp, #28]
   13280:	stm	sp, {r1, r7, ip}
   13284:	ldr	r1, [sp, #44]	; 0x2c
   13288:	bl	1233c <fprintf@plt>
   1328c:	b	12f48 <__assert_fail@plt+0x954>
   13290:	ldr	r1, [r4, #28]
   13294:	ldr	r0, [r4, #32]
   13298:	bl	19308 <__assert_fail@plt+0x6d14>
   1329c:	ldrb	r3, [fp]
   132a0:	cmp	r3, #0
   132a4:	bne	130fc <__assert_fail@plt+0xb08>
   132a8:	ldrh	r1, [r4, #56]	; 0x38
   132ac:	b	12fc8 <__assert_fail@plt+0x9d4>
   132b0:	ldr	r1, [r4, #28]
   132b4:	ldr	r0, [r4, #32]
   132b8:	bl	19308 <__assert_fail@plt+0x6d14>
   132bc:	b	130fc <__assert_fail@plt+0xb08>
   132c0:	ldrb	r2, [fp]
   132c4:	cmp	r2, #0
   132c8:	bne	13090 <__assert_fail@plt+0xa9c>
   132cc:	cmp	r3, #0
   132d0:	beq	130fc <__assert_fail@plt+0xb08>
   132d4:	mov	r6, r1
   132d8:	b	1318c <__assert_fail@plt+0xb98>
   132dc:	cmp	r3, #0
   132e0:	bne	13188 <__assert_fail@plt+0xb94>
   132e4:	mov	r3, #0
   132e8:	strb	r3, [r5, #24]
   132ec:	b	130fc <__assert_fail@plt+0xb08>
   132f0:	cmp	r0, #0
   132f4:	beq	132b0 <__assert_fail@plt+0xcbc>
   132f8:	ldr	r0, [r4, #24]
   132fc:	bl	12d18 <__assert_fail@plt+0x724>
   13300:	cmp	r0, #0
   13304:	bne	13328 <__assert_fail@plt+0xd34>
   13308:	ldr	r1, [r4, #28]
   1330c:	ldr	r0, [r4, #32]
   13310:	bl	19308 <__assert_fail@plt+0x6d14>
   13314:	b	132a8 <__assert_fail@plt+0xcb4>
   13318:	ldr	r0, [r4, #24]
   1331c:	bl	12d18 <__assert_fail@plt+0x724>
   13320:	cmp	r0, #0
   13324:	beq	132a8 <__assert_fail@plt+0xcb4>
   13328:	mov	r0, #40	; 0x28
   1332c:	ldr	r1, [r4, #28]
   13330:	bl	19308 <__assert_fail@plt+0x6d14>
   13334:	b	130fc <__assert_fail@plt+0xb08>
   13338:	ldr	r3, [sp, #20]
   1333c:	ldr	r6, [r3]
   13340:	cmp	r6, #0
   13344:	bne	134d4 <__assert_fail@plt+0xee0>
   13348:	mov	r0, r8
   1334c:	bl	31074 <__assert_fail@plt+0x1ea80>
   13350:	cmp	r0, #0
   13354:	moveq	r0, #1
   13358:	bne	13574 <__assert_fail@plt+0xf80>
   1335c:	add	sp, sp, #180	; 0xb4
   13360:	ldrd	r4, [sp]
   13364:	ldrd	r6, [sp, #8]
   13368:	ldrd	r8, [sp, #16]
   1336c:	ldrd	sl, [sp, #24]
   13370:	add	sp, sp, #32
   13374:	pop	{pc}		; (ldr pc, [sp], #4)
   13378:	mov	r2, #5
   1337c:	movw	r1, #10720	; 0x29e0
   13380:	movt	r1, #4
   13384:	mov	r0, r6
   13388:	bl	120b4 <dcgettext@plt>
   1338c:	mov	r7, r0
   13390:	mov	r0, r6
   13394:	ldr	r2, [r4, #28]
   13398:	ldr	r1, [fp, #72]	; 0x48
   1339c:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   133a0:	mov	r3, r0
   133a4:	mov	r2, r7
   133a8:	mov	r1, r6
   133ac:	mov	r0, r6
   133b0:	bl	121ec <error@plt>
   133b4:	ldr	r3, [sp, #60]	; 0x3c
   133b8:	b	13128 <__assert_fail@plt+0xb34>
   133bc:	movw	r0, #38236	; 0x955c
   133c0:	movt	r0, #5
   133c4:	ldr	r1, [sp, #48]	; 0x30
   133c8:	mov	r6, r0
   133cc:	bl	124b0 <sprintf@plt>
   133d0:	b	13238 <__assert_fail@plt+0xc44>
   133d4:	mov	r1, r4
   133d8:	mov	r2, #4
   133dc:	mov	r0, r8
   133e0:	bl	318b4 <__assert_fail@plt+0x1f2c0>
   133e4:	ldr	r3, [fp, #4]
   133e8:	ldr	r6, [r4, #48]	; 0x30
   133ec:	ldrh	r1, [r4, #56]	; 0x38
   133f0:	cmp	r6, r3
   133f4:	movle	r6, #0
   133f8:	movgt	r6, #1
   133fc:	b	1306c <__assert_fail@plt+0xa78>
   13400:	ldr	r3, [r4, #80]	; 0x50
   13404:	and	r3, r3, #61440	; 0xf000
   13408:	cmp	r3, #40960	; 0xa000
   1340c:	beq	1351c <__assert_fail@plt+0xf28>
   13410:	mov	r2, #5
   13414:	movw	r1, #10576	; 0x2950
   13418:	movt	r1, #4
   1341c:	mov	r0, #0
   13420:	bl	120b4 <dcgettext@plt>
   13424:	str	r0, [sp, #24]
   13428:	mov	r0, #0
   1342c:	ldr	r1, [r4, #28]
   13430:	bl	192f4 <__assert_fail@plt+0x6d00>
   13434:	ldr	r3, [r4]
   13438:	mov	r7, r0
   1343c:	ldr	r1, [fp, #72]	; 0x48
   13440:	ldr	r4, [r3, #40]	; 0x28
   13444:	cmp	r4, #0
   13448:	beq	13560 <__assert_fail@plt+0xf6c>
   1344c:	ldr	r6, [r3, #28]
   13450:	mov	r3, #0
   13454:	mov	r0, #1
   13458:	ldrb	r2, [r6, r4]
   1345c:	strb	r3, [r6, r4]
   13460:	str	r2, [sp, #28]
   13464:	mov	r2, r6
   13468:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   1346c:	ldr	r2, [sp, #28]
   13470:	strb	r2, [r6, r4]
   13474:	mov	r1, #0
   13478:	mov	r3, r7
   1347c:	str	r0, [sp]
   13480:	mov	r0, r1
   13484:	ldr	r2, [sp, #24]
   13488:	bl	121ec <error@plt>
   1348c:	b	13554 <__assert_fail@plt+0xf60>
   13490:	mov	r2, #4
   13494:	mov	r1, r4
   13498:	mov	r0, r8
   1349c:	bl	318b4 <__assert_fail@plt+0x1f2c0>
   134a0:	b	130f0 <__assert_fail@plt+0xafc>
   134a4:	movw	r0, #38236	; 0x955c
   134a8:	movt	r0, #5
   134ac:	ldr	r1, [sp, #48]	; 0x30
   134b0:	bl	124b0 <sprintf@plt>
   134b4:	movw	r3, #38236	; 0x955c
   134b8:	movt	r3, #5
   134bc:	b	131cc <__assert_fail@plt+0xbd8>
   134c0:	mov	r1, r4
   134c4:	mov	r2, #1
   134c8:	mov	r0, r8
   134cc:	bl	318b4 <__assert_fail@plt+0x1f2c0>
   134d0:	b	130fc <__assert_fail@plt+0xb08>
   134d4:	ldr	r1, [sp, #52]	; 0x34
   134d8:	bl	192f4 <__assert_fail@plt+0x6d00>
   134dc:	mov	r3, r0
   134e0:	mov	r1, r6
   134e4:	mov	r0, r4
   134e8:	movw	r2, #10856	; 0x2a68
   134ec:	movt	r2, #4
   134f0:	bl	121ec <error@plt>
   134f4:	mov	r3, #1
   134f8:	mov	r0, r4
   134fc:	str	r3, [r5, #28]
   13500:	b	1335c <__assert_fail@plt+0xd68>
   13504:	orr	r1, r1, #16
   13508:	str	r1, [r9]
   1350c:	b	12e84 <__assert_fail@plt+0x890>
   13510:	orr	r1, r1, #3
   13514:	str	r1, [r9]
   13518:	b	12e84 <__assert_fail@plt+0x890>
   1351c:	mov	r2, #5
   13520:	movw	r1, #10452	; 0x28d4
   13524:	movt	r1, #4
   13528:	mov	r0, #0
   1352c:	bl	120b4 <dcgettext@plt>
   13530:	mov	r6, r0
   13534:	mov	r0, #0
   13538:	ldr	r1, [r4, #28]
   1353c:	bl	192f4 <__assert_fail@plt+0x6d00>
   13540:	mov	r1, #0
   13544:	mov	r3, r0
   13548:	mov	r2, r6
   1354c:	mov	r0, r1
   13550:	bl	121ec <error@plt>
   13554:	mov	r3, #1
   13558:	str	r3, [r5, #28]
   1355c:	b	130fc <__assert_fail@plt+0xb08>
   13560:	movw	r2, #17776	; 0x4570
   13564:	movt	r2, #4
   13568:	mov	r0, #1
   1356c:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   13570:	b	13474 <__assert_fail@plt+0xe80>
   13574:	ldr	r3, [sp, #20]
   13578:	mov	r2, #5
   1357c:	movw	r1, #10916	; 0x2aa4
   13580:	movt	r1, #4
   13584:	mov	r0, r6
   13588:	ldr	r4, [r3]
   1358c:	bl	120b4 <dcgettext@plt>
   13590:	mov	r2, r0
   13594:	mov	r0, r6
   13598:	ldr	r3, [sp, #52]	; 0x34
   1359c:	mov	r1, r4
   135a0:	bl	121ec <error@plt>
   135a4:	mov	r3, #1
   135a8:	mov	r0, r6
   135ac:	str	r3, [r5, #28]
   135b0:	b	1335c <__assert_fail@plt+0xd68>
   135b4:	mov	r3, r0
   135b8:	mov	r2, #5
   135bc:	ldr	r4, [r3]
   135c0:	movw	r1, #10320	; 0x2850
   135c4:	movt	r1, #4
   135c8:	mov	r0, sl
   135cc:	bl	120b4 <dcgettext@plt>
   135d0:	mov	r6, r0
   135d4:	mov	r0, sl
   135d8:	ldr	r1, [sp, #52]	; 0x34
   135dc:	bl	192f4 <__assert_fail@plt+0x6d00>
   135e0:	mov	r3, r0
   135e4:	mov	r2, r6
   135e8:	mov	r0, sl
   135ec:	mov	r1, r4
   135f0:	bl	121ec <error@plt>
   135f4:	mov	r3, #1
   135f8:	mov	r0, r3
   135fc:	str	r3, [r5, #28]
   13600:	b	1335c <__assert_fail@plt+0xd68>
   13604:	movw	r1, #10272	; 0x2820
   13608:	movt	r1, #4
   1360c:	ldr	r3, [pc, #48]	; 13644 <__assert_fail@plt+0x1050>
   13610:	movw	r0, #10652	; 0x299c
   13614:	movt	r0, #4
   13618:	mov	r2, #380	; 0x17c
   1361c:	bl	125f4 <__assert_fail@plt>
   13620:	movw	r1, #10272	; 0x2820
   13624:	movt	r1, #4
   13628:	ldr	r3, [pc, #20]	; 13644 <__assert_fail@plt+0x1050>
   1362c:	movw	r0, #10672	; 0x29b0
   13630:	movt	r0, #4
   13634:	movw	r2, #381	; 0x17d
   13638:	bl	125f4 <__assert_fail@plt>
   1363c:	add	r3, sp, #72	; 0x48
   13640:	b	13010 <__assert_fail@plt+0xa1c>
   13644:	strdeq	r2, [r4], -r4
   13648:	movw	r3, #37516	; 0x928c
   1364c:	movt	r3, #5
   13650:	ldr	r3, [r3]
   13654:	str	r3, [r0]
   13658:	mov	r0, #1
   1365c:	bx	lr
   13660:	strd	r4, [sp, #-12]!
   13664:	str	lr, [sp, #8]
   13668:	sub	sp, sp, #20
   1366c:	add	lr, sp, #16
   13670:	mov	ip, sp
   13674:	stmdb	lr, {r0, r1}
   13678:	ldr	r0, [sp, #8]
   1367c:	stm	ip, {r2, r3}
   13680:	ldr	r4, [sp, #12]
   13684:	cmp	r0, r2
   13688:	cmpeq	r3, r4
   1368c:	moveq	r0, #0
   13690:	beq	136c4 <__assert_fail@plt+0x10d0>
   13694:	mov	r5, r3
   13698:	mov	r1, r2
   1369c:	sub	r4, r4, r5
   136a0:	bl	123cc <difftime@plt>
   136a4:	vmov	s15, r4
   136a8:	vldr	d6, [pc, #40]	; 136d8 <__assert_fail@plt+0x10e4>
   136ac:	vcvt.f64.s32	d7, s15
   136b0:	vmla.f64	d0, d7, d6
   136b4:	vcmpe.f64	d0, #0.0
   136b8:	vmrs	APSR_nzcv, fpscr
   136bc:	mvnmi	r0, #0
   136c0:	movpl	r0, #1
   136c4:	add	sp, sp, #20
   136c8:	ldrd	r4, [sp]
   136cc:	add	sp, sp, #8
   136d0:	pop	{pc}		; (ldr pc, [sp], #4)
   136d4:	nop	{0}
   136d8:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   136dc:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   136e0:	ldr	ip, [r2, #44]	; 0x2c
   136e4:	strd	r4, [sp, #-12]!
   136e8:	mov	r4, r2
   136ec:	str	lr, [sp, #8]
   136f0:	sub	sp, sp, #12
   136f4:	mov	r2, sp
   136f8:	cmp	ip, #1
   136fc:	stm	r2, {r0, r1}
   13700:	beq	137a4 <__assert_fail@plt+0x11b0>
   13704:	cmp	ip, #0
   13708:	beq	13778 <__assert_fail@plt+0x1184>
   1370c:	cmp	ip, #2
   13710:	bne	137c8 <__assert_fail@plt+0x11d4>
   13714:	ldr	r0, [sp]
   13718:	mov	r5, r3
   1371c:	ldr	r1, [r4, #48]	; 0x30
   13720:	bl	123cc <difftime@plt>
   13724:	ldr	r2, [sp, #4]
   13728:	ldr	r3, [r4, #52]	; 0x34
   1372c:	vldr	d6, [pc, #180]	; 137e8 <__assert_fail@plt+0x11f4>
   13730:	sub	r2, r2, r3
   13734:	vmov	s15, r2
   13738:	vcvt.f64.s32	d7, s15
   1373c:	vmla.f64	d0, d7, d6
   13740:	vcmpe.f64	d0, #0.0
   13744:	vmrs	APSR_nzcv, fpscr
   13748:	movle	r0, #0
   1374c:	ble	13768 <__assert_fail@plt+0x1174>
   13750:	vmov	s15, r5
   13754:	vcvt.f64.s32	d7, s15
   13758:	vcmpe.f64	d7, d0
   1375c:	vmrs	APSR_nzcv, fpscr
   13760:	movge	r0, #1
   13764:	movlt	r0, #0
   13768:	add	sp, sp, #12
   1376c:	ldrd	r4, [sp]
   13770:	add	sp, sp, #8
   13774:	pop	{pc}		; (ldr pc, [sp], #4)
   13778:	add	r4, r4, #48	; 0x30
   1377c:	ldm	r2, {r0, r1}
   13780:	ldm	r4, {r2, r3}
   13784:	bl	13660 <__assert_fail@plt+0x106c>
   13788:	cmp	r0, #0
   1378c:	movle	r0, #0
   13790:	movgt	r0, #1
   13794:	add	sp, sp, #12
   13798:	ldrd	r4, [sp]
   1379c:	add	sp, sp, #8
   137a0:	pop	{pc}		; (ldr pc, [sp], #4)
   137a4:	add	r4, r4, #48	; 0x30
   137a8:	ldm	r2, {r0, r1}
   137ac:	ldm	r4, {r2, r3}
   137b0:	bl	13660 <__assert_fail@plt+0x106c>
   137b4:	lsr	r0, r0, #31
   137b8:	add	sp, sp, #12
   137bc:	ldrd	r4, [sp]
   137c0:	add	sp, sp, #8
   137c4:	pop	{pc}		; (ldr pc, [sp], #4)
   137c8:	movw	r3, #11680	; 0x2da0
   137cc:	movt	r3, #4
   137d0:	movw	r1, #11792	; 0x2e10
   137d4:	movt	r1, #4
   137d8:	movw	r0, #28528	; 0x6f70
   137dc:	movt	r0, #4
   137e0:	mov	r2, #138	; 0x8a
   137e4:	bl	125f4 <__assert_fail@plt>
   137e8:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   137ec:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   137f0:	str	r4, [sp, #-8]!
   137f4:	str	lr, [sp, #4]
   137f8:	bl	184ec <__assert_fail@plt+0x5ef8>
   137fc:	movw	r3, #40512	; 0x9e40
   13800:	movt	r3, #5
   13804:	ldr	r0, [r3, #28]
   13808:	bl	122d0 <exit@plt>
   1380c:	movw	r3, #40556	; 0x9e6c
   13810:	movt	r3, #5
   13814:	ldrb	r3, [r3]
   13818:	cmp	r3, #0
   1381c:	beq	13850 <__assert_fail@plt+0x125c>
   13820:	movw	r3, #40512	; 0x9e40
   13824:	movt	r3, #5
   13828:	ldrb	r2, [r3, #4]
   1382c:	cmp	r2, #0
   13830:	beq	13858 <__assert_fail@plt+0x1264>
   13834:	cmp	r1, #0
   13838:	beq	13850 <__assert_fail@plt+0x125c>
   1383c:	ldr	r2, [r1, #16]
   13840:	and	r2, r2, #61440	; 0xf000
   13844:	cmp	r2, #16384	; 0x4000
   13848:	moveq	r2, #1
   1384c:	strbeq	r2, [r3, #24]
   13850:	mov	r0, #1
   13854:	bx	lr
   13858:	movw	r1, #11792	; 0x2e10
   1385c:	movt	r1, #4
   13860:	ldr	r3, [pc, #20]	; 1387c <__assert_fail@plt+0x1288>
   13864:	movw	r0, #11800	; 0x2e18
   13868:	movt	r0, #4
   1386c:	str	r4, [sp, #-8]!
   13870:	movw	r2, #853	; 0x355
   13874:	str	lr, [sp, #4]
   13878:	bl	125f4 <__assert_fail@plt>
   1387c:			; <UNDEFINED> instruction: 0x00042db0
   13880:	strd	r4, [sp, #-16]!
   13884:	mov	r4, r2
   13888:	mov	r5, r0
   1388c:	ldr	r2, [r2, #156]	; 0x9c
   13890:	str	r6, [sp, #8]
   13894:	mov	r6, r1
   13898:	str	lr, [sp, #12]
   1389c:	cmp	r2, #0
   138a0:	beq	138b0 <__assert_fail@plt+0x12bc>
   138a4:	bl	191ac <__assert_fail@plt+0x6bb8>
   138a8:	cmp	r0, #0
   138ac:	beq	138d0 <__assert_fail@plt+0x12dc>
   138b0:	mov	r1, r6
   138b4:	mov	r0, r5
   138b8:	ldr	r6, [sp, #8]
   138bc:	ldr	lr, [sp, #12]
   138c0:	ldr	r2, [r4, #160]	; 0xa0
   138c4:	ldrd	r4, [sp]
   138c8:	add	sp, sp, #16
   138cc:	b	191ac <__assert_fail@plt+0x6bb8>
   138d0:	ldrd	r4, [sp]
   138d4:	ldr	r6, [sp, #8]
   138d8:	add	sp, sp, #12
   138dc:	pop	{pc}		; (ldr pc, [sp], #4)
   138e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   138e4:	movw	r4, #40512	; 0x9e40
   138e8:	movt	r4, #5
   138ec:	mov	r5, r1
   138f0:	ldr	r1, [r4, #12]
   138f4:	str	r8, [sp, #16]
   138f8:	mov	r8, r0
   138fc:	ldr	r0, [r4, #16]
   13900:	strd	r6, [sp, #8]
   13904:	mov	r7, r2
   13908:	str	lr, [sp, #20]
   1390c:	bl	21ebc <__assert_fail@plt+0xf8c8>
   13910:	subs	r6, r0, #0
   13914:	beq	13958 <__assert_fail@plt+0x1364>
   13918:	cmp	r7, #0
   1391c:	mov	r1, r6
   13920:	ldr	r0, [r5]
   13924:	movne	r2, #16
   13928:	moveq	r2, #0
   1392c:	bl	12210 <fnmatch@plt>
   13930:	clz	r5, r0
   13934:	lsr	r5, r5, #5
   13938:	mov	r0, r6
   1393c:	bl	2f668 <__assert_fail@plt+0x1d074>
   13940:	mov	r0, r5
   13944:	ldrd	r4, [sp]
   13948:	ldrd	r6, [sp, #8]
   1394c:	ldr	r8, [sp, #16]
   13950:	add	sp, sp, #20
   13954:	pop	{pc}		; (ldr pc, [sp], #4)
   13958:	bl	12348 <__errno_location@plt>
   1395c:	mov	r1, r8
   13960:	ldr	r0, [r0]
   13964:	mov	r5, r6
   13968:	bl	19308 <__assert_fail@plt+0x6d14>
   1396c:	mov	r3, #1
   13970:	str	r3, [r4, #28]
   13974:	b	13938 <__assert_fail@plt+0x1344>
   13978:	movw	r3, #38228	; 0x9554
   1397c:	movt	r3, #5
   13980:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13984:	movw	r4, #38216	; 0x9548
   13988:	movt	r4, #5
   1398c:	strd	r6, [sp, #8]
   13990:	mov	r6, r0
   13994:	ldr	r0, [r3]
   13998:	mov	r7, r1
   1399c:	str	r8, [sp, #16]
   139a0:	str	lr, [sp, #20]
   139a4:	bl	2f608 <__assert_fail@plt+0x1d014>
   139a8:	ldr	r5, [r4]
   139ac:	mov	r2, #5
   139b0:	movw	r1, #11816	; 0x2e28
   139b4:	movt	r1, #4
   139b8:	mov	r0, #0
   139bc:	bl	120b4 <dcgettext@plt>
   139c0:	mov	r1, r0
   139c4:	mov	r3, r7
   139c8:	mov	r2, r6
   139cc:	mov	r0, r5
   139d0:	bl	1233c <fprintf@plt>
   139d4:	cmp	r0, #0
   139d8:	blt	139fc <__assert_fail@plt+0x1408>
   139dc:	ldr	r0, [r4]
   139e0:	bl	2f608 <__assert_fail@plt+0x1d014>
   139e4:	ldrd	r4, [sp]
   139e8:	ldrd	r6, [sp, #8]
   139ec:	ldr	r8, [sp, #16]
   139f0:	ldr	lr, [sp, #20]
   139f4:	add	sp, sp, #24
   139f8:	b	2f000 <__assert_fail@plt+0x1ca0c>
   139fc:	bl	12348 <__errno_location@plt>
   13a00:	ldr	r4, [r0]
   13a04:	mov	r2, #5
   13a08:	movw	r1, #11836	; 0x2e3c
   13a0c:	movt	r1, #4
   13a10:	mov	r0, #0
   13a14:	bl	120b4 <dcgettext@plt>
   13a18:	mov	r2, r0
   13a1c:	mov	r0, #1
   13a20:	mov	r1, r4
   13a24:	bl	121ec <error@plt>
   13a28:	strd	r4, [sp, #-12]!
   13a2c:	mov	r4, r1
   13a30:	mov	r5, r0
   13a34:	ldr	r1, [r1, #156]	; 0x9c
   13a38:	str	lr, [sp, #8]
   13a3c:	sub	sp, sp, #12
   13a40:	bl	13b60 <__assert_fail@plt+0x156c>
   13a44:	ldrb	r2, [r4, #20]
   13a48:	movw	r1, #17776	; 0x4570
   13a4c:	movt	r1, #4
   13a50:	movw	r0, #11900	; 0x2e7c
   13a54:	movt	r0, #4
   13a58:	ldrb	lr, [r4, #19]
   13a5c:	movw	r3, #11884	; 0x2e6c
   13a60:	movt	r3, #4
   13a64:	ldrb	ip, [r4, #18]
   13a68:	cmp	r2, #0
   13a6c:	movw	r2, #11868	; 0x2e5c
   13a70:	movt	r2, #4
   13a74:	moveq	r0, r1
   13a78:	cmp	lr, #0
   13a7c:	moveq	r3, r1
   13a80:	str	r0, [sp]
   13a84:	mov	r0, r5
   13a88:	cmp	ip, #0
   13a8c:	moveq	r2, r1
   13a90:	movw	r1, #11916	; 0x2e8c
   13a94:	movt	r1, #4
   13a98:	bl	1233c <fprintf@plt>
   13a9c:	mov	r1, r4
   13aa0:	mov	r0, r5
   13aa4:	bl	162e8 <__assert_fail@plt+0x3cf4>
   13aa8:	vldr	s15, [r4, #28]
   13aac:	mov	r0, r5
   13ab0:	movw	r1, #11924	; 0x2e94
   13ab4:	movt	r1, #4
   13ab8:	vcvt.f64.f32	d7, s15
   13abc:	vmov	r2, r3, d7
   13ac0:	bl	1233c <fprintf@plt>
   13ac4:	movw	r3, #40556	; 0x9e6c
   13ac8:	movt	r3, #5
   13acc:	ldr	r3, [r3, #44]	; 0x2c
   13ad0:	tst	r3, #64	; 0x40
   13ad4:	bne	13af4 <__assert_fail@plt+0x1500>
   13ad8:	ldr	r1, [r4, #160]	; 0xa0
   13adc:	mov	r0, r5
   13ae0:	add	sp, sp, #12
   13ae4:	ldrd	r4, [sp]
   13ae8:	ldr	lr, [sp, #8]
   13aec:	add	sp, sp, #12
   13af0:	b	13b60 <__assert_fail@plt+0x156c>
   13af4:	movw	r1, #11952	; 0x2eb0
   13af8:	movt	r1, #4
   13afc:	ldr	r3, [r4, #164]	; 0xa4
   13b00:	mov	r0, r5
   13b04:	ldr	r2, [r4, #168]	; 0xa8
   13b08:	bl	1233c <fprintf@plt>
   13b0c:	ldr	r3, [r4, #164]	; 0xa4
   13b10:	cmp	r3, #0
   13b14:	beq	13b44 <__assert_fail@plt+0x1550>
   13b18:	vmov	s15, r3
   13b1c:	movw	r1, #11980	; 0x2ecc
   13b20:	movt	r1, #4
   13b24:	vldr	s13, [r4, #168]	; 0xa8
   13b28:	mov	r0, r5
   13b2c:	vcvt.f64.u32	d6, s13
   13b30:	vcvt.f64.u32	d7, s15
   13b34:	vdiv.f64	d7, d6, d7
   13b38:	vmov	r2, r3, d7
   13b3c:	bl	1233c <fprintf@plt>
   13b40:	b	13ad8 <__assert_fail@plt+0x14e4>
   13b44:	movw	r0, #11988	; 0x2ed4
   13b48:	movt	r0, #4
   13b4c:	mov	r3, r5
   13b50:	mov	r2, #4
   13b54:	mov	r1, #1
   13b58:	bl	12168 <fwrite@plt>
   13b5c:	b	13ad8 <__assert_fail@plt+0x14e4>
   13b60:	strd	r4, [sp, #-16]!
   13b64:	subs	r4, r1, #0
   13b68:	str	r6, [sp, #8]
   13b6c:	str	lr, [sp, #12]
   13b70:	beq	13c14 <__assert_fail@plt+0x1620>
   13b74:	ldr	r3, [r4]
   13b78:	mov	r5, r0
   13b7c:	movw	r1, #14464	; 0x3880
   13b80:	movt	r1, #1
   13b84:	movw	r0, #15444	; 0x3c54
   13b88:	movt	r0, #1
   13b8c:	ldr	r2, [r4, #156]	; 0x9c
   13b90:	cmp	r3, r0
   13b94:	cmpne	r3, r1
   13b98:	beq	13bc0 <__assert_fail@plt+0x15cc>
   13b9c:	b	13c24 <__assert_fail@plt+0x1630>
   13ba0:	ldr	r4, [r4, #160]	; 0xa0
   13ba4:	cmp	r4, #0
   13ba8:	beq	13c14 <__assert_fail@plt+0x1620>
   13bac:	ldr	r3, [r4]
   13bb0:	ldr	r2, [r4, #156]	; 0x9c
   13bb4:	cmp	r3, r1
   13bb8:	cmpne	r3, r0
   13bbc:	bne	13c24 <__assert_fail@plt+0x1630>
   13bc0:	cmp	r2, #0
   13bc4:	beq	13ba0 <__assert_fail@plt+0x15ac>
   13bc8:	mov	r3, r5
   13bcc:	mov	r2, #3
   13bd0:	mov	r1, #1
   13bd4:	movw	r0, #11996	; 0x2edc
   13bd8:	movt	r0, #4
   13bdc:	bl	12168 <fwrite@plt>
   13be0:	mov	r1, r4
   13be4:	mov	r0, r5
   13be8:	bl	13a28 <__assert_fail@plt+0x1434>
   13bec:	mov	r3, r5
   13bf0:	movw	r0, #12000	; 0x2ee0
   13bf4:	movt	r0, #4
   13bf8:	mov	r2, #3
   13bfc:	ldrd	r4, [sp]
   13c00:	mov	r1, #1
   13c04:	ldr	r6, [sp, #8]
   13c08:	ldr	lr, [sp, #12]
   13c0c:	add	sp, sp, #16
   13c10:	b	12168 <fwrite@plt>
   13c14:	ldrd	r4, [sp]
   13c18:	ldr	r6, [sp, #8]
   13c1c:	add	sp, sp, #12
   13c20:	pop	{pc}		; (ldr pc, [sp], #4)
   13c24:	cmp	r2, #0
   13c28:	bne	13bc8 <__assert_fail@plt+0x15d4>
   13c2c:	ldr	r3, [r4, #160]	; 0xa0
   13c30:	cmp	r3, #0
   13c34:	bne	13bc8 <__assert_fail@plt+0x15d4>
   13c38:	mov	r1, r4
   13c3c:	mov	r0, r5
   13c40:	ldrd	r4, [sp]
   13c44:	ldr	r6, [sp, #8]
   13c48:	ldr	lr, [sp, #12]
   13c4c:	add	sp, sp, #16
   13c50:	b	13a28 <__assert_fail@plt+0x1434>
   13c54:	strd	r4, [sp, #-16]!
   13c58:	mov	r4, r2
   13c5c:	mov	r5, r0
   13c60:	ldr	r2, [r2, #156]	; 0x9c
   13c64:	str	r6, [sp, #8]
   13c68:	mov	r6, r1
   13c6c:	str	lr, [sp, #12]
   13c70:	cmp	r2, #0
   13c74:	beq	13c84 <__assert_fail@plt+0x1690>
   13c78:	bl	191ac <__assert_fail@plt+0x6bb8>
   13c7c:	cmp	r0, #0
   13c80:	bne	13ca4 <__assert_fail@plt+0x16b0>
   13c84:	mov	r1, r6
   13c88:	mov	r0, r5
   13c8c:	ldr	r6, [sp, #8]
   13c90:	ldr	lr, [sp, #12]
   13c94:	ldr	r2, [r4, #160]	; 0xa0
   13c98:	ldrd	r4, [sp]
   13c9c:	add	sp, sp, #16
   13ca0:	b	191ac <__assert_fail@plt+0x6bb8>
   13ca4:	ldrd	r4, [sp]
   13ca8:	ldr	r6, [sp, #8]
   13cac:	add	sp, sp, #12
   13cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   13cb4:	ldrd	r0, [r1, #72]	; 0x48
   13cb8:	sub	sp, sp, #8
   13cbc:	mov	r3, #60	; 0x3c
   13cc0:	strd	r0, [sp]
   13cc4:	add	r1, sp, #8
   13cc8:	ldmdb	r1, {r0, r1}
   13ccc:	add	sp, sp, #8
   13cd0:	b	136e0 <__assert_fail@plt+0x10ec>
   13cd4:	ldr	r3, [r2, #44]	; 0x2c
   13cd8:	push	{lr}		; (str lr, [sp, #-4]!)
   13cdc:	sub	sp, sp, #12
   13ce0:	cmp	r3, #0
   13ce4:	bne	13d18 <__assert_fail@plt+0x1724>
   13ce8:	ldrd	r0, [r1, #72]	; 0x48
   13cec:	add	r2, r2, #48	; 0x30
   13cf0:	ldm	r2, {r2, r3}
   13cf4:	strd	r0, [sp]
   13cf8:	add	r1, sp, #8
   13cfc:	ldmdb	r1, {r0, r1}
   13d00:	bl	13660 <__assert_fail@plt+0x106c>
   13d04:	cmp	r0, #0
   13d08:	movle	r0, #0
   13d0c:	movgt	r0, #1
   13d10:	add	sp, sp, #12
   13d14:	pop	{pc}		; (ldr pc, [sp], #4)
   13d18:	movw	r1, #11792	; 0x2e10
   13d1c:	movt	r1, #4
   13d20:	ldr	r3, [pc, #12]	; 13d34 <__assert_fail@plt+0x1740>
   13d24:	movw	r0, #12004	; 0x2ee4
   13d28:	movt	r0, #4
   13d2c:	mov	r2, #166	; 0xa6
   13d30:	bl	125f4 <__assert_fail@plt>
   13d34:			; <UNDEFINED> instruction: 0x00042dbc
   13d38:	ldrd	r0, [r1, #72]	; 0x48
   13d3c:	sub	sp, sp, #8
   13d40:	movw	r3, #20864	; 0x5180
   13d44:	movt	r3, #1
   13d48:	strd	r0, [sp]
   13d4c:	add	r1, sp, #8
   13d50:	ldmdb	r1, {r0, r1}
   13d54:	add	sp, sp, #8
   13d58:	b	136e0 <__assert_fail@plt+0x10ec>
   13d5c:	mov	r0, #1
   13d60:	bx	lr
   13d64:	ldrd	r0, [r1, #88]	; 0x58
   13d68:	sub	sp, sp, #8
   13d6c:	mov	r3, #60	; 0x3c
   13d70:	strd	r0, [sp]
   13d74:	add	r1, sp, #8
   13d78:	ldmdb	r1, {r0, r1}
   13d7c:	add	sp, sp, #8
   13d80:	b	136e0 <__assert_fail@plt+0x10ec>
   13d84:	ldr	r3, [r2, #44]	; 0x2c
   13d88:	push	{lr}		; (str lr, [sp, #-4]!)
   13d8c:	sub	sp, sp, #12
   13d90:	cmp	r3, #0
   13d94:	bne	13dc8 <__assert_fail@plt+0x17d4>
   13d98:	ldrd	r0, [r1, #88]	; 0x58
   13d9c:	add	r2, r2, #48	; 0x30
   13da0:	ldm	r2, {r2, r3}
   13da4:	strd	r0, [sp]
   13da8:	add	r1, sp, #8
   13dac:	ldmdb	r1, {r0, r1}
   13db0:	bl	13660 <__assert_fail@plt+0x106c>
   13db4:	cmp	r0, #0
   13db8:	movle	r0, #0
   13dbc:	movgt	r0, #1
   13dc0:	add	sp, sp, #12
   13dc4:	pop	{pc}		; (ldr pc, [sp], #4)
   13dc8:	movw	r1, #11792	; 0x2e10
   13dcc:	movt	r1, #4
   13dd0:	ldr	r3, [pc, #12]	; 13de4 <__assert_fail@plt+0x17f0>
   13dd4:	movw	r0, #12004	; 0x2ee4
   13dd8:	movt	r0, #4
   13ddc:	mov	r2, #199	; 0xc7
   13de0:	bl	125f4 <__assert_fail@plt>
   13de4:	andeq	r2, r4, r8, asr #27
   13de8:	strd	r4, [sp, #-16]!
   13dec:	mov	r4, r2
   13df0:	mov	r5, r0
   13df4:	ldr	r2, [r2, #156]	; 0x9c
   13df8:	str	r6, [sp, #8]
   13dfc:	mov	r6, r1
   13e00:	str	lr, [sp, #12]
   13e04:	cmp	r2, #0
   13e08:	beq	13e10 <__assert_fail@plt+0x181c>
   13e0c:	bl	191ac <__assert_fail@plt+0x6bb8>
   13e10:	mov	r1, r6
   13e14:	mov	r0, r5
   13e18:	ldr	r6, [sp, #8]
   13e1c:	ldr	lr, [sp, #12]
   13e20:	ldr	r2, [r4, #160]	; 0xa0
   13e24:	ldrd	r4, [sp]
   13e28:	add	sp, sp, #16
   13e2c:	b	191ac <__assert_fail@plt+0x6bb8>
   13e30:	ldrd	r0, [r1, #88]	; 0x58
   13e34:	sub	sp, sp, #8
   13e38:	movw	r3, #20864	; 0x5180
   13e3c:	movt	r3, #1
   13e40:	strd	r0, [sp]
   13e44:	add	r1, sp, #8
   13e48:	ldmdb	r1, {r0, r1}
   13e4c:	add	sp, sp, #8
   13e50:	b	136e0 <__assert_fail@plt+0x10ec>
   13e54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13e58:	movw	r4, #40512	; 0x9e40
   13e5c:	movt	r4, #5
   13e60:	strd	r6, [sp, #8]
   13e64:	mov	r5, r1
   13e68:	mov	r7, r0
   13e6c:	ldr	r6, [r4, #12]
   13e70:	movw	r1, #24608	; 0x6020
   13e74:	movt	r1, #4
   13e78:	str	r8, [sp, #16]
   13e7c:	str	lr, [sp, #20]
   13e80:	mov	r0, r6
   13e84:	bl	11f40 <strcmp@plt>
   13e88:	cmp	r0, #0
   13e8c:	beq	13f34 <__assert_fail@plt+0x1940>
   13e90:	ldrb	r2, [r4, #4]
   13e94:	cmp	r2, #0
   13e98:	moveq	r5, r2
   13e9c:	beq	13eb4 <__assert_fail@plt+0x18c0>
   13ea0:	ldr	r3, [r5, #16]
   13ea4:	and	r3, r3, #61440	; 0xf000
   13ea8:	cmp	r3, #16384	; 0x4000
   13eac:	movne	r5, #0
   13eb0:	moveq	r5, #512	; 0x200
   13eb4:	mov	r1, r6
   13eb8:	mov	r2, r5
   13ebc:	ldr	r0, [r4, #16]
   13ec0:	bl	11f94 <unlinkat@plt>
   13ec4:	cmp	r0, #0
   13ec8:	beq	13f34 <__assert_fail@plt+0x1940>
   13ecc:	bl	12348 <__errno_location@plt>
   13ed0:	ldr	r6, [r0]
   13ed4:	mov	r8, r0
   13ed8:	cmp	r6, #2
   13edc:	beq	13f6c <__assert_fail@plt+0x1978>
   13ee0:	cmp	r6, #21
   13ee4:	cmpeq	r5, #0
   13ee8:	beq	13f4c <__assert_fail@plt+0x1958>
   13eec:	mov	r2, #5
   13ef0:	movw	r1, #12044	; 0x2f0c
   13ef4:	movt	r1, #4
   13ef8:	mov	r0, #0
   13efc:	bl	120b4 <dcgettext@plt>
   13f00:	mov	r5, r0
   13f04:	mov	r1, r7
   13f08:	mov	r0, #0
   13f0c:	bl	192f4 <__assert_fail@plt+0x6d00>
   13f10:	mov	r3, r0
   13f14:	mov	r2, r5
   13f18:	mov	r0, #0
   13f1c:	mov	r1, r6
   13f20:	bl	121ec <error@plt>
   13f24:	mov	r3, #1
   13f28:	mov	r0, #0
   13f2c:	str	r3, [r4, #28]
   13f30:	b	13f38 <__assert_fail@plt+0x1944>
   13f34:	mov	r0, #1
   13f38:	ldrd	r4, [sp]
   13f3c:	ldrd	r6, [sp, #8]
   13f40:	ldr	r8, [sp, #16]
   13f44:	add	sp, sp, #20
   13f48:	pop	{pc}		; (ldr pc, [sp], #4)
   13f4c:	mov	r2, #512	; 0x200
   13f50:	ldr	r1, [r4, #12]
   13f54:	ldr	r0, [r4, #16]
   13f58:	bl	11f94 <unlinkat@plt>
   13f5c:	cmp	r0, #0
   13f60:	beq	13f34 <__assert_fail@plt+0x1940>
   13f64:	ldr	r6, [r8]
   13f68:	b	13eec <__assert_fail@plt+0x18f8>
   13f6c:	movw	r3, #40556	; 0x9e6c
   13f70:	movt	r3, #5
   13f74:	ldrb	r0, [r3, #14]
   13f78:	cmp	r0, #0
   13f7c:	movne	r3, #0
   13f80:	strne	r3, [r8]
   13f84:	beq	13eec <__assert_fail@plt+0x18f8>
   13f88:	b	13f38 <__assert_fail@plt+0x1944>
   13f8c:	ldr	r3, [r1, #16]
   13f90:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13f94:	strd	r6, [sp, #8]
   13f98:	strd	r8, [sp, #16]
   13f9c:	str	sl, [sp, #24]
   13fa0:	and	r3, r3, #61440	; 0xf000
   13fa4:	str	lr, [sp, #28]
   13fa8:	cmp	r3, #16384	; 0x4000
   13fac:	beq	13fe8 <__assert_fail@plt+0x19f4>
   13fb0:	cmp	r3, #32768	; 0x8000
   13fb4:	movne	r4, #0
   13fb8:	bne	13fcc <__assert_fail@plt+0x19d8>
   13fbc:	ldrd	r2, [r1, #48]	; 0x30
   13fc0:	orrs	r3, r2, r3
   13fc4:	moveq	r4, #1
   13fc8:	movne	r4, #0
   13fcc:	mov	r0, r4
   13fd0:	ldrd	r4, [sp]
   13fd4:	ldrd	r6, [sp, #8]
   13fd8:	ldrd	r8, [sp, #16]
   13fdc:	ldr	sl, [sp, #24]
   13fe0:	add	sp, sp, #28
   13fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   13fe8:	mov	r4, #0
   13fec:	mov	r5, r0
   13ff0:	movw	r7, #40512	; 0x9e40
   13ff4:	movt	r7, #5
   13ff8:	bl	12348 <__errno_location@plt>
   13ffc:	mov	r8, r0
   14000:	mov	r2, #18688	; 0x4900
   14004:	movt	r2, #10
   14008:	ldr	r1, [r7, #12]
   1400c:	str	r4, [r0]
   14010:	ldr	r0, [r7, #16]
   14014:	bl	268c8 <__assert_fail@plt+0x142d4>
   14018:	subs	r9, r0, #0
   1401c:	blt	140bc <__assert_fail@plt+0x1ac8>
   14020:	bl	124c8 <fdopendir@plt>
   14024:	subs	r6, r0, #0
   14028:	strne	r4, [r8]
   1402c:	beq	14134 <__assert_fail@plt+0x1b40>
   14030:	bl	124bc <readdir64@plt>
   14034:	subs	r3, r0, #0
   14038:	beq	140f0 <__assert_fail@plt+0x1afc>
   1403c:	ldrb	r2, [r3, #19]
   14040:	cmp	r2, #46	; 0x2e
   14044:	bne	14064 <__assert_fail@plt+0x1a70>
   14048:	ldrb	r2, [r3, #20]
   1404c:	mov	r0, r6
   14050:	cmp	r2, #0
   14054:	beq	14030 <__assert_fail@plt+0x1a3c>
   14058:	ldrh	r3, [r3, #20]
   1405c:	cmp	r3, #46	; 0x2e
   14060:	beq	14030 <__assert_fail@plt+0x1a3c>
   14064:	mov	r4, #0
   14068:	ldr	r9, [r8]
   1406c:	cmp	r9, #0
   14070:	bne	140f8 <__assert_fail@plt+0x1b04>
   14074:	mov	r0, r6
   14078:	bl	125c4 <closedir@plt>
   1407c:	cmp	r0, #0
   14080:	beq	13fcc <__assert_fail@plt+0x19d8>
   14084:	ldr	r6, [r8]
   14088:	mov	r1, r5
   1408c:	mov	r0, r9
   14090:	bl	192f4 <__assert_fail@plt+0x6d00>
   14094:	mov	r3, r0
   14098:	movw	r2, #28236	; 0x6e4c
   1409c:	movt	r2, #4
   140a0:	mov	r0, r9
   140a4:	mov	r4, r9
   140a8:	mov	r1, r6
   140ac:	bl	121ec <error@plt>
   140b0:	mov	r3, #1
   140b4:	str	r3, [r7, #28]
   140b8:	b	13fcc <__assert_fail@plt+0x19d8>
   140bc:	ldr	r6, [r8]
   140c0:	mov	r1, r5
   140c4:	mov	r0, r4
   140c8:	bl	192f4 <__assert_fail@plt+0x6d00>
   140cc:	mov	r3, r0
   140d0:	movw	r2, #28236	; 0x6e4c
   140d4:	movt	r2, #4
   140d8:	mov	r0, r4
   140dc:	mov	r1, r6
   140e0:	bl	121ec <error@plt>
   140e4:	mov	r3, #1
   140e8:	str	r3, [r7, #28]
   140ec:	b	13fcc <__assert_fail@plt+0x19d8>
   140f0:	mov	r4, #1
   140f4:	b	14068 <__assert_fail@plt+0x1a74>
   140f8:	mov	r1, r5
   140fc:	mov	r0, #0
   14100:	bl	192f4 <__assert_fail@plt+0x6d00>
   14104:	mov	r3, r0
   14108:	mov	r1, r9
   1410c:	mov	r0, #0
   14110:	movw	r2, #28236	; 0x6e4c
   14114:	movt	r2, #4
   14118:	mov	r4, r0
   1411c:	bl	121ec <error@plt>
   14120:	mov	r3, #1
   14124:	mov	r0, r6
   14128:	str	r3, [r7, #28]
   1412c:	bl	125c4 <closedir@plt>
   14130:	b	13fcc <__assert_fail@plt+0x19d8>
   14134:	ldr	r8, [r8]
   14138:	mov	r1, r5
   1413c:	mov	r4, r6
   14140:	bl	192f4 <__assert_fail@plt+0x6d00>
   14144:	mov	r3, r0
   14148:	movw	r2, #28236	; 0x6e4c
   1414c:	movt	r2, #4
   14150:	mov	r0, r6
   14154:	mov	r1, r8
   14158:	bl	121ec <error@plt>
   1415c:	mov	r3, #1
   14160:	mov	r0, r9
   14164:	str	r3, [r7, #28]
   14168:	bl	125ac <close@plt>
   1416c:	b	13fcc <__assert_fail@plt+0x19d8>
   14170:	b	1538c <__assert_fail@plt+0x2d98>
   14174:	movw	r3, #40512	; 0x9e40
   14178:	movt	r3, #5
   1417c:	ldr	r0, [r3, #12]
   14180:	b	1538c <__assert_fail@plt+0x2d98>
   14184:	mov	r0, #0
   14188:	bx	lr
   1418c:	str	r4, [sp, #-8]!
   14190:	movw	ip, #40556	; 0x9e6c
   14194:	movt	ip, #5
   14198:	ldr	r4, [r2, #44]	; 0x2c
   1419c:	mov	r3, r1
   141a0:	movw	r1, #40512	; 0x9e40
   141a4:	movt	r1, #5
   141a8:	ldrb	r2, [r2, #32]
   141ac:	str	lr, [sp, #4]
   141b0:	sub	sp, sp, #16
   141b4:	ldr	lr, [ip, #20]
   141b8:	str	r4, [sp, #12]
   141bc:	ldr	ip, [ip, #40]	; 0x28
   141c0:	str	r2, [sp, #8]
   141c4:	ldr	r2, [r1, #12]
   141c8:	str	lr, [sp]
   141cc:	ldr	r1, [r1, #16]
   141d0:	str	ip, [sp, #4]
   141d4:	bl	21054 <__assert_fail@plt+0xea60>
   141d8:	mov	r0, #1
   141dc:	add	sp, sp, #16
   141e0:	ldr	r4, [sp]
   141e4:	add	sp, sp, #4
   141e8:	pop	{pc}		; (ldr pc, [sp], #4)
   141ec:	push	{lr}		; (str lr, [sp, #-4]!)
   141f0:	sub	sp, sp, #12
   141f4:	mov	r1, r2
   141f8:	ldrb	r2, [r2, #52]	; 0x34
   141fc:	movw	r3, #32508	; 0x7efc
   14200:	movt	r3, #4
   14204:	str	r0, [sp]
   14208:	ldr	r0, [r1, #44]	; 0x2c
   1420c:	ldr	r1, [r1, #56]	; 0x38
   14210:	bl	21728 <__assert_fail@plt+0xf134>
   14214:	mov	r0, #1
   14218:	add	sp, sp, #12
   1421c:	pop	{pc}		; (ldr pc, [sp], #4)
   14220:	str	r4, [sp, #-8]!
   14224:	ldr	r4, [r2, #44]	; 0x2c
   14228:	str	lr, [sp, #4]
   1422c:	mov	r1, r4
   14230:	bl	12588 <fputs@plt>
   14234:	mov	r1, r4
   14238:	mov	r0, #0
   1423c:	bl	124e0 <putc@plt>
   14240:	ldr	r4, [sp]
   14244:	add	sp, sp, #4
   14248:	mov	r0, #1
   1424c:	pop	{pc}		; (ldr pc, [sp], #4)
   14250:	mov	r3, r1
   14254:	mov	r1, r0
   14258:	str	r4, [sp, #-8]!
   1425c:	mov	r0, r3
   14260:	mov	r4, r2
   14264:	str	lr, [sp, #4]
   14268:	bl	1b46c <__assert_fail@plt+0x8e78>
   1426c:	ldr	r1, [r4, #40]	; 0x28
   14270:	bl	11f40 <strcmp@plt>
   14274:	clz	r0, r0
   14278:	ldr	r4, [sp]
   1427c:	add	sp, sp, #4
   14280:	lsr	r0, r0, #5
   14284:	pop	{pc}		; (ldr pc, [sp], #4)
   14288:	ldr	r3, [r2, #40]	; 0x28
   1428c:	cmp	r3, #1
   14290:	beq	142d0 <__assert_fail@plt+0x1cdc>
   14294:	cmp	r3, #0
   14298:	beq	142f4 <__assert_fail@plt+0x1d00>
   1429c:	cmp	r3, #2
   142a0:	bne	142c8 <__assert_fail@plt+0x1cd4>
   142a4:	ldr	r3, [r1, #28]
   142a8:	ldrd	r0, [r2, #48]	; 0x30
   142ac:	mov	r2, r3
   142b0:	mov	r3, #0
   142b4:	cmp	r1, r3
   142b8:	cmpeq	r0, r2
   142bc:	moveq	r0, #1
   142c0:	movne	r0, #0
   142c4:	bx	lr
   142c8:	mov	r0, #0
   142cc:	bx	lr
   142d0:	ldr	r3, [r1, #28]
   142d4:	ldrd	r0, [r2, #48]	; 0x30
   142d8:	mov	r2, r3
   142dc:	mov	r3, #0
   142e0:	cmp	r3, r1
   142e4:	cmpeq	r2, r0
   142e8:	movcc	r0, #1
   142ec:	movcs	r0, #0
   142f0:	bx	lr
   142f4:	ldr	r3, [r1, #28]
   142f8:	ldrd	r0, [r2, #48]	; 0x30
   142fc:	mov	r2, r3
   14300:	mov	r3, #0
   14304:	cmp	r3, r1
   14308:	cmpeq	r2, r0
   1430c:	movhi	r0, #1
   14310:	movls	r0, #0
   14314:	bx	lr
   14318:	ldr	r3, [r1, #28]
   1431c:	ldr	r0, [r2, #40]	; 0x28
   14320:	sub	r0, r0, r3
   14324:	clz	r0, r0
   14328:	lsr	r0, r0, #5
   1432c:	bx	lr
   14330:	ldr	r3, [r1, #16]
   14334:	and	r3, r3, #61440	; 0xf000
   14338:	cmp	r3, #40960	; 0xa000
   1433c:	beq	14348 <__assert_fail@plt+0x1d54>
   14340:	mov	r0, #0
   14344:	bx	lr
   14348:	add	r1, r2, #40	; 0x28
   1434c:	mov	r2, #1
   14350:	b	138e0 <__assert_fail@plt+0x12ec>
   14354:	strd	r4, [sp, #-16]!
   14358:	ldr	r5, [r2, #40]	; 0x28
   1435c:	str	r6, [sp, #8]
   14360:	str	lr, [sp, #12]
   14364:	bl	22450 <__assert_fail@plt+0xfe5c>
   14368:	mov	r4, r0
   1436c:	bl	225bc <__assert_fail@plt+0xffc8>
   14370:	mov	r1, r4
   14374:	mov	r2, #16
   14378:	mov	r0, r5
   1437c:	bl	12210 <fnmatch@plt>
   14380:	mov	r5, r0
   14384:	mov	r0, r4
   14388:	bl	2f668 <__assert_fail@plt+0x1d074>
   1438c:	clz	r0, r5
   14390:	ldrd	r4, [sp]
   14394:	lsr	r0, r0, #5
   14398:	ldr	r6, [sp, #8]
   1439c:	add	sp, sp, #12
   143a0:	pop	{pc}		; (ldr pc, [sp], #4)
   143a4:	ldr	r3, [r2, #40]	; 0x28
   143a8:	cmp	r3, #1
   143ac:	beq	143e4 <__assert_fail@plt+0x1df0>
   143b0:	cmp	r3, #0
   143b4:	beq	14400 <__assert_fail@plt+0x1e0c>
   143b8:	cmp	r3, #2
   143bc:	bne	143dc <__assert_fail@plt+0x1de8>
   143c0:	ldrd	r2, [r2, #48]	; 0x30
   143c4:	ldrd	r0, [r1, #96]	; 0x60
   143c8:	cmp	r1, r3
   143cc:	cmpeq	r0, r2
   143d0:	moveq	r0, #1
   143d4:	movne	r0, #0
   143d8:	bx	lr
   143dc:	mov	r0, #0
   143e0:	bx	lr
   143e4:	ldrd	r2, [r2, #48]	; 0x30
   143e8:	ldrd	r0, [r1, #96]	; 0x60
   143ec:	cmp	r1, r3
   143f0:	cmpeq	r0, r2
   143f4:	movcc	r0, #1
   143f8:	movcs	r0, #0
   143fc:	bx	lr
   14400:	ldrd	r2, [r2, #48]	; 0x30
   14404:	ldrd	r0, [r1, #96]	; 0x60
   14408:	cmp	r1, r3
   1440c:	cmpeq	r0, r2
   14410:	movhi	r0, #1
   14414:	movls	r0, #0
   14418:	bx	lr
   1441c:	ldr	r3, [r2, #40]	; 0x28
   14420:	mov	r1, r0
   14424:	mov	r2, #16
   14428:	str	r4, [sp, #-8]!
   1442c:	str	lr, [sp, #4]
   14430:	mov	r0, r3
   14434:	bl	12210 <fnmatch@plt>
   14438:	clz	r0, r0
   1443c:	ldr	r4, [sp]
   14440:	add	sp, sp, #4
   14444:	lsr	r0, r0, #5
   14448:	pop	{pc}		; (ldr pc, [sp], #4)
   1444c:	ldr	r3, [r2, #40]	; 0x28
   14450:	cmp	r3, #1
   14454:	beq	14494 <__assert_fail@plt+0x1ea0>
   14458:	cmp	r3, #0
   1445c:	beq	144b8 <__assert_fail@plt+0x1ec4>
   14460:	cmp	r3, #2
   14464:	bne	1448c <__assert_fail@plt+0x1e98>
   14468:	ldr	r3, [r1, #20]
   1446c:	ldrd	r0, [r2, #48]	; 0x30
   14470:	mov	r2, r3
   14474:	mov	r3, #0
   14478:	cmp	r1, r3
   1447c:	cmpeq	r0, r2
   14480:	moveq	r0, #1
   14484:	movne	r0, #0
   14488:	bx	lr
   1448c:	mov	r0, #0
   14490:	bx	lr
   14494:	ldr	r3, [r1, #20]
   14498:	ldrd	r0, [r2, #48]	; 0x30
   1449c:	mov	r2, r3
   144a0:	mov	r3, #0
   144a4:	cmp	r3, r1
   144a8:	cmpeq	r2, r0
   144ac:	movcc	r0, #1
   144b0:	movcs	r0, #0
   144b4:	bx	lr
   144b8:	ldr	r3, [r1, #20]
   144bc:	ldrd	r0, [r2, #48]	; 0x30
   144c0:	mov	r2, r3
   144c4:	mov	r3, #0
   144c8:	cmp	r3, r1
   144cc:	cmpeq	r2, r0
   144d0:	movhi	r0, #1
   144d4:	movls	r0, #0
   144d8:	bx	lr
   144dc:	ldr	r3, [r1, #16]
   144e0:	and	r3, r3, #61440	; 0xf000
   144e4:	cmp	r3, #40960	; 0xa000
   144e8:	beq	144f4 <__assert_fail@plt+0x1f00>
   144ec:	mov	r0, #0
   144f0:	bx	lr
   144f4:	add	r1, r2, #40	; 0x28
   144f8:	mov	r2, #0
   144fc:	b	138e0 <__assert_fail@plt+0x12ec>
   14500:	b	1418c <__assert_fail@plt+0x1b98>
   14504:	ldrd	r0, [r1, #80]	; 0x50
   14508:	sub	sp, sp, #8
   1450c:	mov	r3, #60	; 0x3c
   14510:	strd	r0, [sp]
   14514:	add	r1, sp, #8
   14518:	ldmdb	r1, {r0, r1}
   1451c:	add	sp, sp, #8
   14520:	b	136e0 <__assert_fail@plt+0x10ec>
   14524:	ldrd	r0, [r1, #80]	; 0x50
   14528:	sub	sp, sp, #8
   1452c:	movw	r3, #20864	; 0x5180
   14530:	movt	r3, #1
   14534:	strd	r0, [sp]
   14538:	add	r1, sp, #8
   1453c:	ldmdb	r1, {r0, r1}
   14540:	add	sp, sp, #8
   14544:	b	136e0 <__assert_fail@plt+0x10ec>
   14548:	strd	r4, [sp, #-16]!
   1454c:	ldr	r5, [r2, #40]	; 0x28
   14550:	str	r6, [sp, #8]
   14554:	str	lr, [sp, #12]
   14558:	bl	22450 <__assert_fail@plt+0xfe5c>
   1455c:	mov	r4, r0
   14560:	bl	225bc <__assert_fail@plt+0xffc8>
   14564:	mov	r1, r4
   14568:	mov	r2, #0
   1456c:	mov	r0, r5
   14570:	bl	12210 <fnmatch@plt>
   14574:	mov	r5, r0
   14578:	mov	r0, r4
   1457c:	bl	2f668 <__assert_fail@plt+0x1d074>
   14580:	clz	r0, r5
   14584:	ldrd	r4, [sp]
   14588:	lsr	r0, r0, #5
   1458c:	ldr	r6, [sp, #8]
   14590:	add	sp, sp, #12
   14594:	pop	{pc}		; (ldr pc, [sp], #4)
   14598:	str	r4, [sp, #-8]!
   1459c:	ldr	r2, [r2, #160]	; 0xa0
   145a0:	str	lr, [sp, #4]
   145a4:	bl	191ac <__assert_fail@plt+0x6bb8>
   145a8:	eor	r0, r0, #1
   145ac:	ldr	r4, [sp]
   145b0:	add	sp, sp, #4
   145b4:	uxtb	r0, r0
   145b8:	pop	{pc}		; (ldr pc, [sp], #4)
   145bc:	ldr	r3, [r2, #44]	; 0x2c
   145c0:	push	{lr}		; (str lr, [sp, #-4]!)
   145c4:	sub	sp, sp, #12
   145c8:	cmp	r3, #0
   145cc:	bne	14600 <__assert_fail@plt+0x200c>
   145d0:	ldrd	r0, [r1, #80]	; 0x50
   145d4:	add	r2, r2, #48	; 0x30
   145d8:	ldm	r2, {r2, r3}
   145dc:	strd	r0, [sp]
   145e0:	add	r1, sp, #8
   145e4:	ldmdb	r1, {r0, r1}
   145e8:	bl	13660 <__assert_fail@plt+0x106c>
   145ec:	cmp	r0, #0
   145f0:	movle	r0, #0
   145f4:	movgt	r0, #1
   145f8:	add	sp, sp, #12
   145fc:	pop	{pc}		; (ldr pc, [sp], #4)
   14600:	movw	r1, #11792	; 0x2e10
   14604:	movt	r1, #4
   14608:	ldr	r3, [pc, #12]	; 1461c <__assert_fail@plt+0x2028>
   1460c:	movw	r0, #12004	; 0x2ee4
   14610:	movt	r0, #4
   14614:	movw	r2, #621	; 0x26d
   14618:	bl	125f4 <__assert_fail@plt>
   1461c:	ldrdeq	r2, [r4], -r4
   14620:	ldr	r3, [r2, #44]	; 0x2c
   14624:	strd	r4, [sp, #-12]!
   14628:	str	lr, [sp, #8]
   1462c:	sub	sp, sp, #12
   14630:	cmp	r3, #0
   14634:	bne	14728 <__assert_fail@plt+0x2134>
   14638:	ldr	r3, [r2, #40]	; 0x28
   1463c:	cmp	r3, #4
   14640:	ldrls	pc, [pc, r3, lsl #2]
   14644:	b	14744 <__assert_fail@plt+0x2150>
   14648:	muleq	r1, ip, r6
   1464c:	andeq	r4, r1, ip, lsr #13
   14650:	strdeq	r4, [r1], -ip
   14654:	andeq	r4, r1, ip, asr r6
   14658:	andeq	r4, r1, ip, lsl #14
   1465c:	ldr	r0, [r1, #80]	; 0x50
   14660:	ldr	r3, [r1, #84]	; 0x54
   14664:	str	r0, [sp]
   14668:	add	r2, r2, #48	; 0x30
   1466c:	str	r3, [sp, #4]
   14670:	add	r3, sp, #8
   14674:	ldmdb	r3, {r0, r1}
   14678:	ldm	r2, {r2, r3}
   1467c:	bl	13660 <__assert_fail@plt+0x106c>
   14680:	cmp	r0, #0
   14684:	movle	r0, #0
   14688:	movgt	r0, #1
   1468c:	add	sp, sp, #12
   14690:	ldrd	r4, [sp]
   14694:	add	sp, sp, #8
   14698:	pop	{pc}		; (ldr pc, [sp], #4)
   1469c:	ldrd	r4, [r1, #72]	; 0x48
   146a0:	ldr	r3, [r1, #76]	; 0x4c
   146a4:	strd	r4, [sp]
   146a8:	b	14668 <__assert_fail@plt+0x2074>
   146ac:	mov	r4, r0
   146b0:	mov	r2, #5
   146b4:	movw	r1, #12120	; 0x2f58
   146b8:	movt	r1, #4
   146bc:	mov	r0, #0
   146c0:	bl	120b4 <dcgettext@plt>
   146c4:	mov	r5, r0
   146c8:	mov	r1, r4
   146cc:	mov	r0, #0
   146d0:	bl	192f4 <__assert_fail@plt+0x6d00>
   146d4:	mov	r1, #0
   146d8:	mov	r3, r0
   146dc:	mov	r2, r5
   146e0:	mov	r0, r1
   146e4:	bl	121ec <error@plt>
   146e8:	mov	r0, #0
   146ec:	add	sp, sp, #12
   146f0:	ldrd	r4, [sp]
   146f4:	add	sp, sp, #8
   146f8:	pop	{pc}		; (ldr pc, [sp], #4)
   146fc:	ldr	r0, [r1, #88]	; 0x58
   14700:	ldr	r3, [r1, #92]	; 0x5c
   14704:	str	r0, [sp]
   14708:	b	14668 <__assert_fail@plt+0x2074>
   1470c:	movw	r1, #11792	; 0x2e10
   14710:	movt	r1, #4
   14714:	ldr	r3, [pc, #68]	; 14760 <__assert_fail@plt+0x216c>
   14718:	movw	r0, #12076	; 0x2f2c
   1471c:	movt	r0, #4
   14720:	mov	r2, #636	; 0x27c
   14724:	bl	125f4 <__assert_fail@plt>
   14728:	movw	r1, #11792	; 0x2e10
   1472c:	movt	r1, #4
   14730:	ldr	r3, [pc, #40]	; 14760 <__assert_fail@plt+0x216c>
   14734:	movw	r0, #12004	; 0x2ee4
   14738:	movt	r0, #4
   1473c:	movw	r2, #631	; 0x277
   14740:	bl	125f4 <__assert_fail@plt>
   14744:	movw	r1, #11792	; 0x2e10
   14748:	movt	r1, #4
   1474c:	ldr	r3, [pc, #12]	; 14760 <__assert_fail@plt+0x216c>
   14750:	movw	r0, #12064	; 0x2f20
   14754:	movt	r0, #4
   14758:	movw	r2, #667	; 0x29b
   1475c:	bl	125f4 <__assert_fail@plt>
   14760:	andeq	r2, r4, r0, ror #27
   14764:	str	r4, [sp, #-8]!
   14768:	ldr	r0, [r1, #28]
   1476c:	str	lr, [sp, #4]
   14770:	bl	125d0 <getgrgid@plt>
   14774:	clz	r0, r0
   14778:	ldr	r4, [sp]
   1477c:	add	sp, sp, #4
   14780:	lsr	r0, r0, #5
   14784:	pop	{pc}		; (ldr pc, [sp], #4)
   14788:	str	r4, [sp, #-8]!
   1478c:	ldr	r0, [r1, #24]
   14790:	str	lr, [sp, #4]
   14794:	bl	11f58 <getpwuid@plt>
   14798:	clz	r0, r0
   1479c:	ldr	r4, [sp]
   147a0:	add	sp, sp, #4
   147a4:	lsr	r0, r0, #5
   147a8:	pop	{pc}		; (ldr pc, [sp], #4)
   147ac:	ldr	r3, [r2, #132]	; 0x84
   147b0:	strd	r4, [sp, #-16]!
   147b4:	mov	r4, r0
   147b8:	mov	r5, r2
   147bc:	str	r6, [sp, #8]
   147c0:	mov	r6, r1
   147c4:	mov	r1, r0
   147c8:	str	lr, [sp, #12]
   147cc:	ldr	r0, [r3]
   147d0:	bl	13978 <__assert_fail@plt+0x1384>
   147d4:	cmp	r0, #0
   147d8:	bne	147ec <__assert_fail@plt+0x21f8>
   147dc:	ldrd	r4, [sp]
   147e0:	ldr	r6, [sp, #8]
   147e4:	add	sp, sp, #12
   147e8:	pop	{pc}		; (ldr pc, [sp], #4)
   147ec:	mov	r2, r5
   147f0:	mov	r1, r6
   147f4:	ldr	r6, [sp, #8]
   147f8:	mov	r0, r4
   147fc:	ldrd	r4, [sp]
   14800:	ldr	lr, [sp, #12]
   14804:	add	sp, sp, #16
   14808:	b	1538c <__assert_fail@plt+0x2d98>
   1480c:	ldr	r3, [r2, #132]	; 0x84
   14810:	strd	r4, [sp, #-16]!
   14814:	mov	r5, r1
   14818:	mov	r1, r0
   1481c:	mov	r4, r2
   14820:	ldr	r0, [r3]
   14824:	str	r6, [sp, #8]
   14828:	str	lr, [sp, #12]
   1482c:	bl	13978 <__assert_fail@plt+0x1384>
   14830:	cmp	r0, #0
   14834:	bne	14848 <__assert_fail@plt+0x2254>
   14838:	ldrd	r4, [sp]
   1483c:	ldr	r6, [sp, #8]
   14840:	add	sp, sp, #12
   14844:	pop	{pc}		; (ldr pc, [sp], #4)
   14848:	movw	r3, #40512	; 0x9e40
   1484c:	movt	r3, #5
   14850:	ldr	r6, [sp, #8]
   14854:	mov	r2, r4
   14858:	mov	r1, r5
   1485c:	ldrd	r4, [sp]
   14860:	ldr	lr, [sp, #12]
   14864:	add	sp, sp, #16
   14868:	ldr	r0, [r3, #12]
   1486c:	b	1538c <__assert_fail@plt+0x2d98>
   14870:	mov	r0, #1
   14874:	bx	lr
   14878:	ldr	r3, [r2, #40]	; 0x28
   1487c:	mov	r1, r0
   14880:	mov	r2, #0
   14884:	str	r4, [sp, #-8]!
   14888:	str	lr, [sp, #4]
   1488c:	mov	r0, r3
   14890:	bl	12210 <fnmatch@plt>
   14894:	clz	r0, r0
   14898:	ldr	r4, [sp]
   1489c:	add	sp, sp, #4
   148a0:	lsr	r0, r0, #5
   148a4:	pop	{pc}		; (ldr pc, [sp], #4)
   148a8:	ldr	r1, [r1, #16]
   148ac:	ldr	r0, [r2, #40]	; 0x28
   148b0:	and	r3, r1, #61440	; 0xf000
   148b4:	cmp	r3, #16384	; 0x4000
   148b8:	moveq	r3, #44	; 0x2c
   148bc:	movne	r3, #40	; 0x28
   148c0:	add	r2, r2, r3
   148c4:	cmp	r0, #1
   148c8:	ldr	r3, [r2, #4]
   148cc:	beq	14904 <__assert_fail@plt+0x2310>
   148d0:	cmp	r0, #0
   148d4:	bne	148e8 <__assert_fail@plt+0x22f4>
   148d8:	bics	r3, r3, r1
   148dc:	moveq	r0, #1
   148e0:	movne	r0, #0
   148e4:	bx	lr
   148e8:	cmp	r0, #2
   148ec:	bne	1491c <__assert_fail@plt+0x2328>
   148f0:	ubfx	r0, r1, #0, #12
   148f4:	sub	r0, r0, r3
   148f8:	clz	r0, r0
   148fc:	lsr	r0, r0, #5
   14900:	bx	lr
   14904:	cmp	r3, #0
   14908:	bxeq	lr
   1490c:	tst	r1, r3
   14910:	movne	r0, #1
   14914:	moveq	r0, #0
   14918:	bx	lr
   1491c:	str	r4, [sp, #-8]!
   14920:	str	lr, [sp, #4]
   14924:	bl	125a0 <abort@plt>
   14928:	movw	r0, #40512	; 0x9e40
   1492c:	movt	r0, #5
   14930:	str	r4, [sp, #-8]!
   14934:	mov	r3, #0
   14938:	mov	r2, #1
   1493c:	ldr	r1, [r0, #12]
   14940:	ldr	r0, [r0, #16]
   14944:	str	lr, [sp, #4]
   14948:	bl	11fdc <faccessat@plt>
   1494c:	clz	r0, r0
   14950:	ldr	r4, [sp]
   14954:	add	sp, sp, #4
   14958:	lsr	r0, r0, #5
   1495c:	pop	{pc}		; (ldr pc, [sp], #4)
   14960:	movw	r0, #40512	; 0x9e40
   14964:	movt	r0, #5
   14968:	str	r4, [sp, #-8]!
   1496c:	mov	r3, #0
   14970:	mov	r2, #4
   14974:	ldr	r1, [r0, #12]
   14978:	ldr	r0, [r0, #16]
   1497c:	str	lr, [sp, #4]
   14980:	bl	11fdc <faccessat@plt>
   14984:	clz	r0, r0
   14988:	ldr	r4, [sp]
   1498c:	add	sp, sp, #4
   14990:	lsr	r0, r0, #5
   14994:	pop	{pc}		; (ldr pc, [sp], #4)
   14998:	movw	r0, #40512	; 0x9e40
   1499c:	movt	r0, #5
   149a0:	str	r4, [sp, #-8]!
   149a4:	mov	r3, #0
   149a8:	mov	r2, #2
   149ac:	ldr	r1, [r0, #12]
   149b0:	ldr	r0, [r0, #16]
   149b4:	str	lr, [sp, #4]
   149b8:	bl	11fdc <faccessat@plt>
   149bc:	clz	r0, r0
   149c0:	ldr	r4, [sp]
   149c4:	add	sp, sp, #4
   149c8:	lsr	r0, r0, #5
   149cc:	pop	{pc}		; (ldr pc, [sp], #4)
   149d0:	b	141ec <__assert_fail@plt+0x1bf8>
   149d4:	b	14220 <__assert_fail@plt+0x1c2c>
   149d8:	strd	r4, [sp, #-16]!
   149dc:	mov	r5, r0
   149e0:	str	r6, [sp, #8]
   149e4:	mov	r6, r2
   149e8:	str	lr, [sp, #12]
   149ec:	sub	sp, sp, #8
   149f0:	bl	12300 <strlen@plt>
   149f4:	mov	r3, #0
   149f8:	mov	r4, r0
   149fc:	mov	r2, r0
   14a00:	mov	r1, r5
   14a04:	ldr	r0, [r6, #40]	; 0x28
   14a08:	str	r3, [sp]
   14a0c:	bl	402cc <__assert_fail@plt+0x2dcd8>
   14a10:	sub	r0, r0, r4
   14a14:	clz	r0, r0
   14a18:	lsr	r0, r0, #5
   14a1c:	add	sp, sp, #8
   14a20:	ldrd	r4, [sp]
   14a24:	ldr	r6, [sp, #8]
   14a28:	add	sp, sp, #12
   14a2c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a30:	str	r4, [sp, #-16]!
   14a34:	mov	r4, r2
   14a38:	ldr	r2, [r2, #44]	; 0x2c
   14a3c:	ldrd	r0, [r1, #48]	; 0x30
   14a40:	strd	r6, [sp, #4]
   14a44:	str	lr, [sp, #12]
   14a48:	asr	r3, r2, #31
   14a4c:	bl	424a0 <__assert_fail@plt+0x2feac>
   14a50:	ldr	ip, [r4, #40]	; 0x28
   14a54:	orrs	r3, r2, r3
   14a58:	movne	r3, #1
   14a5c:	moveq	r3, #0
   14a60:	adds	r6, r0, r3
   14a64:	adc	r7, r1, #0
   14a68:	cmp	ip, #1
   14a6c:	beq	14aa8 <__assert_fail@plt+0x24b4>
   14a70:	cmp	ip, #0
   14a74:	beq	14acc <__assert_fail@plt+0x24d8>
   14a78:	cmp	ip, #2
   14a7c:	movne	r0, #0
   14a80:	bne	14a98 <__assert_fail@plt+0x24a4>
   14a84:	ldrd	r2, [r4, #48]	; 0x30
   14a88:	cmp	r3, r7
   14a8c:	cmpeq	r2, r6
   14a90:	moveq	r0, #1
   14a94:	movne	r0, #0
   14a98:	ldr	r4, [sp]
   14a9c:	ldrd	r6, [sp, #4]
   14aa0:	add	sp, sp, #12
   14aa4:	pop	{pc}		; (ldr pc, [sp], #4)
   14aa8:	ldrd	r2, [r4, #48]	; 0x30
   14aac:	ldr	r4, [sp]
   14ab0:	cmp	r3, r7
   14ab4:	cmpeq	r2, r6
   14ab8:	ldrd	r6, [sp, #4]
   14abc:	add	sp, sp, #12
   14ac0:	movhi	r0, #1
   14ac4:	movls	r0, #0
   14ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   14acc:	ldrd	r2, [r4, #48]	; 0x30
   14ad0:	ldr	r4, [sp]
   14ad4:	cmp	r3, r7
   14ad8:	cmpeq	r2, r6
   14adc:	ldrd	r6, [sp, #4]
   14ae0:	add	sp, sp, #12
   14ae4:	movcc	r0, #1
   14ae8:	movcs	r0, #0
   14aec:	pop	{pc}		; (ldr pc, [sp], #4)
   14af0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14af4:	strd	r6, [sp, #8]
   14af8:	ldrd	r6, [r1, #96]	; 0x60
   14afc:	strd	r8, [sp, #16]
   14b00:	str	sl, [sp, #24]
   14b04:	str	lr, [sp, #28]
   14b08:	orrs	r3, r6, r7
   14b0c:	beq	14b3c <__assert_fail@plt+0x2548>
   14b10:	ldrd	r4, [r2, #40]	; 0x28
   14b14:	cmp	r7, r5
   14b18:	cmpeq	r6, r4
   14b1c:	beq	14b3c <__assert_fail@plt+0x2548>
   14b20:	mov	r0, #0
   14b24:	ldrd	r4, [sp]
   14b28:	ldrd	r6, [sp, #8]
   14b2c:	ldrd	r8, [sp, #16]
   14b30:	ldr	sl, [sp, #24]
   14b34:	add	sp, sp, #28
   14b38:	pop	{pc}		; (ldr pc, [sp], #4)
   14b3c:	movw	r3, #40512	; 0x9e40
   14b40:	movt	r3, #5
   14b44:	mov	r5, r2
   14b48:	mov	r4, r1
   14b4c:	mov	r2, r1
   14b50:	ldr	r1, [r3, #12]
   14b54:	bl	1824c <__assert_fail@plt+0x5c58>
   14b58:	cmp	r0, #0
   14b5c:	bne	14b20 <__assert_fail@plt+0x252c>
   14b60:	ldrd	r6, [r5, #40]	; 0x28
   14b64:	ldrd	r8, [r4, #96]	; 0x60
   14b68:	cmp	r9, r7
   14b6c:	cmpeq	r8, r6
   14b70:	bne	14b24 <__assert_fail@plt+0x2530>
   14b74:	ldrd	r0, [r4]
   14b78:	ldrd	r2, [r5, #48]	; 0x30
   14b7c:	cmp	r1, r3
   14b80:	cmpeq	r0, r2
   14b84:	moveq	r0, #1
   14b88:	movne	r0, #0
   14b8c:	b	14b24 <__assert_fail@plt+0x2530>
   14b90:	mov	r0, #1
   14b94:	bx	lr
   14b98:	movw	r3, #40512	; 0x9e40
   14b9c:	movt	r3, #5
   14ba0:	ldrb	r0, [r3, #5]
   14ba4:	cmp	r0, #0
   14ba8:	beq	14c64 <__assert_fail@plt+0x2670>
   14bac:	ldr	r0, [r3, #8]
   14bb0:	cmp	r0, #0
   14bb4:	bxeq	lr
   14bb8:	ldrb	r3, [r3, #4]
   14bbc:	cmp	r3, #0
   14bc0:	ldrne	r0, [r1, #16]
   14bc4:	and	r0, r0, #61440	; 0xf000
   14bc8:	cmp	r0, #24576	; 0x6000
   14bcc:	beq	14c5c <__assert_fail@plt+0x2668>
   14bd0:	bhi	14bf4 <__assert_fail@plt+0x2600>
   14bd4:	cmp	r0, #8192	; 0x2000
   14bd8:	beq	14c4c <__assert_fail@plt+0x2658>
   14bdc:	cmp	r0, #16384	; 0x4000
   14be0:	beq	14c2c <__assert_fail@plt+0x2638>
   14be4:	cmp	r0, #4096	; 0x1000
   14be8:	beq	14c1c <__assert_fail@plt+0x2628>
   14bec:	mov	r0, #0
   14bf0:	bx	lr
   14bf4:	cmp	r0, #40960	; 0xa000
   14bf8:	beq	14c54 <__assert_fail@plt+0x2660>
   14bfc:	cmp	r0, #49152	; 0xc000
   14c00:	beq	14c3c <__assert_fail@plt+0x2648>
   14c04:	cmp	r0, #32768	; 0x8000
   14c08:	moveq	r3, #3
   14c0c:	bne	14bec <__assert_fail@plt+0x25f8>
   14c10:	add	r2, r2, r3
   14c14:	ldrb	r0, [r2, #40]	; 0x28
   14c18:	bx	lr
   14c1c:	mov	r3, #5
   14c20:	add	r2, r2, r3
   14c24:	ldrb	r0, [r2, #40]	; 0x28
   14c28:	bx	lr
   14c2c:	mov	r3, #2
   14c30:	add	r2, r2, r3
   14c34:	ldrb	r0, [r2, #40]	; 0x28
   14c38:	bx	lr
   14c3c:	mov	r3, #6
   14c40:	add	r2, r2, r3
   14c44:	ldrb	r0, [r2, #40]	; 0x28
   14c48:	bx	lr
   14c4c:	mov	r3, #1
   14c50:	b	14c10 <__assert_fail@plt+0x261c>
   14c54:	mov	r3, #4
   14c58:	b	14c10 <__assert_fail@plt+0x261c>
   14c5c:	mov	r3, #0
   14c60:	b	14c10 <__assert_fail@plt+0x261c>
   14c64:	movw	r1, #11792	; 0x2e10
   14c68:	movt	r1, #4
   14c6c:	ldr	r3, [pc, #20]	; 14c88 <__assert_fail@plt+0x2694>
   14c70:	movw	r0, #12168	; 0x2f88
   14c74:	movt	r0, #4
   14c78:	str	r4, [sp, #-8]!
   14c7c:	movw	r2, #977	; 0x3d1
   14c80:	str	lr, [sp, #4]
   14c84:	bl	125f4 <__assert_fail@plt>
   14c88:	strdeq	r2, [r4], -r0
   14c8c:	ldr	r3, [r2, #40]	; 0x28
   14c90:	cmp	r3, #1
   14c94:	beq	14cd4 <__assert_fail@plt+0x26e0>
   14c98:	cmp	r3, #0
   14c9c:	beq	14cf8 <__assert_fail@plt+0x2704>
   14ca0:	cmp	r3, #2
   14ca4:	bne	14ccc <__assert_fail@plt+0x26d8>
   14ca8:	ldr	r3, [r1, #24]
   14cac:	ldrd	r0, [r2, #48]	; 0x30
   14cb0:	mov	r2, r3
   14cb4:	mov	r3, #0
   14cb8:	cmp	r1, r3
   14cbc:	cmpeq	r0, r2
   14cc0:	moveq	r0, #1
   14cc4:	movne	r0, #0
   14cc8:	bx	lr
   14ccc:	mov	r0, #0
   14cd0:	bx	lr
   14cd4:	ldr	r3, [r1, #24]
   14cd8:	ldrd	r0, [r2, #48]	; 0x30
   14cdc:	mov	r2, r3
   14ce0:	mov	r3, #0
   14ce4:	cmp	r3, r1
   14ce8:	cmpeq	r2, r0
   14cec:	movcc	r0, #1
   14cf0:	movcs	r0, #0
   14cf4:	bx	lr
   14cf8:	ldr	r3, [r1, #24]
   14cfc:	ldrd	r0, [r2, #48]	; 0x30
   14d00:	mov	r2, r3
   14d04:	mov	r3, #0
   14d08:	cmp	r3, r1
   14d0c:	cmpeq	r2, r0
   14d10:	movhi	r0, #1
   14d14:	movls	r0, #0
   14d18:	bx	lr
   14d1c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14d20:	ldr	r5, [r1, #88]	; 0x58
   14d24:	ldr	r4, [r1, #92]	; 0x5c
   14d28:	strd	r6, [sp, #8]
   14d2c:	mov	r7, r2
   14d30:	str	r8, [sp, #16]
   14d34:	ldr	r8, [r1, #72]	; 0x48
   14d38:	str	lr, [sp, #20]
   14d3c:	sub	sp, sp, #24
   14d40:	ldr	r6, [r1, #76]	; 0x4c
   14d44:	add	r3, sp, #8
   14d48:	str	r8, [sp, #8]
   14d4c:	str	r5, [sp, #16]
   14d50:	str	r6, [sp, #12]
   14d54:	ldm	r3, {r0, r1}
   14d58:	add	r3, sp, #24
   14d5c:	str	r4, [sp, #20]
   14d60:	ldmdb	r3, {r2, r3}
   14d64:	bl	13660 <__assert_fail@plt+0x106c>
   14d68:	cmp	r0, #0
   14d6c:	blt	14dc8 <__assert_fail@plt+0x27d4>
   14d70:	subs	r4, r4, r6
   14d74:	sub	r5, r5, r8
   14d78:	bmi	14db4 <__assert_fail@plt+0x27c0>
   14d7c:	mov	r1, sp
   14d80:	str	r5, [sp]
   14d84:	mov	r2, r7
   14d88:	str	r4, [sp, #4]
   14d8c:	movw	r3, #20864	; 0x5180
   14d90:	movt	r3, #1
   14d94:	ldm	r1, {r0, r1}
   14d98:	add	sp, sp, #24
   14d9c:	ldrd	r4, [sp]
   14da0:	ldrd	r6, [sp, #8]
   14da4:	ldr	r8, [sp, #16]
   14da8:	ldr	lr, [sp, #20]
   14dac:	add	sp, sp, #24
   14db0:	b	136e0 <__assert_fail@plt+0x10ec>
   14db4:	add	r4, r4, #998244352	; 0x3b800000
   14db8:	sub	r5, r5, #1
   14dbc:	add	r4, r4, #1753088	; 0x1ac000
   14dc0:	add	r4, r4, #2560	; 0xa00
   14dc4:	b	14d7c <__assert_fail@plt+0x2788>
   14dc8:	mov	r0, #0
   14dcc:	add	sp, sp, #24
   14dd0:	ldrd	r4, [sp]
   14dd4:	ldrd	r6, [sp, #8]
   14dd8:	ldr	r8, [sp, #16]
   14ddc:	add	sp, sp, #20
   14de0:	pop	{pc}		; (ldr pc, [sp], #4)
   14de4:	ldr	r3, [r1, #24]
   14de8:	ldr	r0, [r2, #40]	; 0x28
   14dec:	sub	r0, r0, r3
   14df0:	clz	r0, r0
   14df4:	lsr	r0, r0, #5
   14df8:	bx	lr
   14dfc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14e00:	movw	r5, #40512	; 0x9e40
   14e04:	movt	r5, #5
   14e08:	strd	r6, [sp, #8]
   14e0c:	mov	r7, r2
   14e10:	mov	r6, r0
   14e14:	str	r8, [sp, #16]
   14e18:	mov	r8, r1
   14e1c:	movw	r4, #34648	; 0x8758
   14e20:	movt	r4, #1
   14e24:	str	lr, [sp, #20]
   14e28:	sub	sp, sp, #104	; 0x68
   14e2c:	bl	18968 <__assert_fail@plt+0x6374>
   14e30:	cmp	r0, #0
   14e34:	movw	r3, #34844	; 0x881c
   14e38:	movt	r3, #1
   14e3c:	mov	r0, sp
   14e40:	movne	r4, r3
   14e44:	bl	18248 <__assert_fail@plt+0x5c54>
   14e48:	mov	r1, sp
   14e4c:	ldr	r0, [r5, #12]
   14e50:	blx	r4
   14e54:	cmp	r0, #0
   14e58:	beq	14ec4 <__assert_fail@plt+0x28d0>
   14e5c:	bl	18968 <__assert_fail@plt+0x6374>
   14e60:	mov	r4, r0
   14e64:	bl	12348 <__errno_location@plt>
   14e68:	cmp	r4, #0
   14e6c:	ldr	r4, [r0]
   14e70:	beq	14e7c <__assert_fail@plt+0x2888>
   14e74:	cmp	r4, #2
   14e78:	beq	14ed8 <__assert_fail@plt+0x28e4>
   14e7c:	mov	r1, r6
   14e80:	mov	r0, #0
   14e84:	bl	192f4 <__assert_fail@plt+0x6d00>
   14e88:	mov	r3, r0
   14e8c:	mov	r1, r4
   14e90:	mov	r0, #0
   14e94:	movw	r2, #28236	; 0x6e4c
   14e98:	movt	r2, #4
   14e9c:	bl	121ec <error@plt>
   14ea0:	mov	r3, #1
   14ea4:	mov	r0, #0
   14ea8:	str	r3, [r5, #28]
   14eac:	add	sp, sp, #104	; 0x68
   14eb0:	ldrd	r4, [sp]
   14eb4:	ldrd	r6, [sp, #8]
   14eb8:	ldr	r8, [sp, #16]
   14ebc:	add	sp, sp, #20
   14ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ec4:	mov	r2, r7
   14ec8:	mov	r1, sp
   14ecc:	mov	r0, r6
   14ed0:	bl	14b98 <__assert_fail@plt+0x25a4>
   14ed4:	b	14eac <__assert_fail@plt+0x28b8>
   14ed8:	mov	r2, r7
   14edc:	mov	r1, r8
   14ee0:	mov	r0, r6
   14ee4:	bl	14b98 <__assert_fail@plt+0x25a4>
   14ee8:	b	14eac <__assert_fail@plt+0x28b8>
   14eec:	movw	r3, #40512	; 0x9e40
   14ef0:	movt	r3, #5
   14ef4:	strd	r4, [sp, #-20]!	; 0xffffffec
   14ef8:	movw	ip, #40556	; 0x9e6c
   14efc:	movt	ip, #5
   14f00:	ldr	r1, [r3, #12]
   14f04:	mov	r5, r0
   14f08:	mov	r4, r2
   14f0c:	ldr	r0, [r3, #16]
   14f10:	strd	r6, [sp, #8]
   14f14:	str	lr, [sp, #16]
   14f18:	sub	sp, sp, #12
   14f1c:	add	r2, sp, #4
   14f20:	ldr	r3, [ip, #64]	; 0x40
   14f24:	blx	r3
   14f28:	cmp	r0, #0
   14f2c:	blt	14f68 <__assert_fail@plt+0x2974>
   14f30:	mov	r2, #0
   14f34:	ldr	r1, [sp, #4]
   14f38:	ldr	r0, [r4, #40]	; 0x28
   14f3c:	bl	12210 <fnmatch@plt>
   14f40:	clz	r4, r0
   14f44:	ldr	r0, [sp, #4]
   14f48:	lsr	r4, r4, #5
   14f4c:	bl	1251c <freecon@plt>
   14f50:	mov	r0, r4
   14f54:	add	sp, sp, #12
   14f58:	ldrd	r4, [sp]
   14f5c:	ldrd	r6, [sp, #8]
   14f60:	add	sp, sp, #16
   14f64:	pop	{pc}		; (ldr pc, [sp], #4)
   14f68:	bl	12348 <__errno_location@plt>
   14f6c:	ldr	r6, [r0]
   14f70:	mov	r2, #5
   14f74:	movw	r1, #12184	; 0x2f98
   14f78:	movt	r1, #4
   14f7c:	mov	r0, #0
   14f80:	bl	120b4 <dcgettext@plt>
   14f84:	mov	r7, r0
   14f88:	mov	r1, r5
   14f8c:	mov	r0, #0
   14f90:	mov	r4, r0
   14f94:	bl	192f4 <__assert_fail@plt+0x6d00>
   14f98:	mov	r3, r0
   14f9c:	mov	r2, r7
   14fa0:	mov	r1, r6
   14fa4:	mov	r0, r4
   14fa8:	bl	121ec <error@plt>
   14fac:	b	14f50 <__assert_fail@plt+0x295c>
   14fb0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14fb4:	strd	r6, [sp, #8]
   14fb8:	mov	r6, r0
   14fbc:	str	r8, [sp, #16]
   14fc0:	subs	r8, r1, #0
   14fc4:	str	lr, [sp, #20]
   14fc8:	sub	sp, sp, #256	; 0x100
   14fcc:	beq	1505c <__assert_fail@plt+0x2a68>
   14fd0:	movw	r5, #12208	; 0x2fb0
   14fd4:	movt	r5, #4
   14fd8:	mov	r4, sp
   14fdc:	mov	r7, #0
   14fe0:	ldr	r2, [r8, #4]
   14fe4:	cmp	r2, #0
   14fe8:	beq	15044 <__assert_fail@plt+0x2a50>
   14fec:	mov	r1, r2
   14ff0:	mov	r0, r4
   14ff4:	bl	12090 <stpcpy@plt>
   14ff8:	sub	r3, r0, r4
   14ffc:	subs	r3, r3, #1
   15000:	bcc	15038 <__assert_fail@plt+0x2a44>
   15004:	ldrb	r1, [r4, r3]
   15008:	add	r2, r4, r3
   1500c:	cmp	r1, #9
   15010:	cmpne	r1, #32
   15014:	beq	15030 <__assert_fail@plt+0x2a3c>
   15018:	b	1503c <__assert_fail@plt+0x2a48>
   1501c:	ldrb	r1, [r2, #-1]!
   15020:	cmp	r1, #9
   15024:	cmpne	r1, #32
   15028:	bne	15080 <__assert_fail@plt+0x2a8c>
   1502c:	mov	r3, r0
   15030:	subs	r0, r3, #1
   15034:	bcs	1501c <__assert_fail@plt+0x2a28>
   15038:	mov	r0, r4
   1503c:	mov	r2, r4
   15040:	strb	r7, [r0]
   15044:	mov	r1, r5
   15048:	mov	r0, r6
   1504c:	bl	1233c <fprintf@plt>
   15050:	ldr	r8, [r8, #152]	; 0x98
   15054:	cmp	r8, #0
   15058:	bne	14fe0 <__assert_fail@plt+0x29ec>
   1505c:	mov	r1, r6
   15060:	mov	r0, #10
   15064:	bl	1248c <fputc@plt>
   15068:	add	sp, sp, #256	; 0x100
   1506c:	ldrd	r4, [sp]
   15070:	ldrd	r6, [sp, #8]
   15074:	ldr	r8, [sp, #16]
   15078:	add	sp, sp, #20
   1507c:	pop	{pc}		; (ldr pc, [sp], #4)
   15080:	add	r0, r4, r3
   15084:	b	1503c <__assert_fail@plt+0x2a48>
   15088:	cmp	r1, #0
   1508c:	beq	15094 <__assert_fail@plt+0x2aa0>
   15090:	b	13a28 <__assert_fail@plt+0x1434>
   15094:	bx	lr
   15098:	movw	r3, #40556	; 0x9e6c
   1509c:	movt	r3, #5
   150a0:	ldr	r3, [r3, #44]	; 0x2c
   150a4:	tst	r3, #64	; 0x40
   150a8:	bxeq	lr
   150ac:	strd	r4, [sp, #-16]!
   150b0:	movw	r5, #38216	; 0x9548
   150b4:	movt	r5, #5
   150b8:	mov	r4, r0
   150bc:	mov	r2, #42	; 0x2a
   150c0:	ldr	r3, [r5]
   150c4:	movw	r0, #12216	; 0x2fb8
   150c8:	movt	r0, #4
   150cc:	str	r6, [sp, #8]
   150d0:	mov	r1, #1
   150d4:	str	lr, [sp, #12]
   150d8:	bl	12168 <fwrite@plt>
   150dc:	cmp	r4, #0
   150e0:	ldr	r0, [r5]
   150e4:	beq	150f4 <__assert_fail@plt+0x2b00>
   150e8:	mov	r1, r4
   150ec:	bl	13a28 <__assert_fail@plt+0x1434>
   150f0:	ldr	r0, [r5]
   150f4:	mov	r1, r0
   150f8:	mov	r0, #10
   150fc:	ldrd	r4, [sp]
   15100:	ldr	r6, [sp, #8]
   15104:	ldr	lr, [sp, #12]
   15108:	add	sp, sp, #16
   1510c:	b	1248c <fputc@plt>
   15110:	cmp	r0, #0
   15114:	bxeq	lr
   15118:	str	r4, [sp, #-8]!
   1511c:	ldr	r2, [r0]
   15120:	str	lr, [sp, #4]
   15124:	cmp	r2, #0
   15128:	beq	15280 <__assert_fail@plt+0x2c8c>
   1512c:	ldr	r3, [r0, #172]	; 0xac
   15130:	cmp	r3, #0
   15134:	beq	15264 <__assert_fail@plt+0x2c70>
   15138:	ldr	r1, [r3, #12]
   1513c:	cmp	r1, #0
   15140:	cmpne	r2, r1
   15144:	bne	151dc <__assert_fail@plt+0x2be8>
   15148:	movw	lr, #14348	; 0x380c
   1514c:	movt	lr, #1
   15150:	movw	ip, #14320	; 0x37f0
   15154:	movt	ip, #1
   15158:	ldr	r3, [r3]
   1515c:	cmp	r3, #6
   15160:	ldrls	pc, [pc, r3, lsl #2]
   15164:	b	151a8 <__assert_fail@plt+0x2bb4>
   15168:	strdeq	r5, [r1], -r8
   1516c:	andeq	r5, r1, r4, lsr #4
   15170:	strdeq	r5, [r1], -r8
   15174:	andeq	r5, r1, r4, lsr #4
   15178:	andeq	r5, r1, r4, lsr #4
   1517c:	andeq	r5, r1, r4, lsr #4
   15180:	andeq	r5, r1, r4, lsl #3
   15184:	ldrb	r3, [r0, #16]
   15188:	cmp	r3, #0
   1518c:	beq	152d4 <__assert_fail@plt+0x2ce0>
   15190:	cmp	r2, lr
   15194:	cmpne	r2, ip
   15198:	beq	151a8 <__assert_fail@plt+0x2bb4>
   1519c:	ldrb	r3, [r0, #17]
   151a0:	cmp	r3, #0
   151a4:	beq	152f0 <__assert_fail@plt+0x2cfc>
   151a8:	ldr	r0, [r0, #152]	; 0x98
   151ac:	cmp	r0, #0
   151b0:	beq	15258 <__assert_fail@plt+0x2c64>
   151b4:	ldr	r2, [r0]
   151b8:	cmp	r2, #0
   151bc:	beq	15280 <__assert_fail@plt+0x2c8c>
   151c0:	ldr	r3, [r0, #172]	; 0xac
   151c4:	cmp	r3, #0
   151c8:	beq	15264 <__assert_fail@plt+0x2c70>
   151cc:	ldr	r1, [r3, #12]
   151d0:	cmp	r1, #0
   151d4:	cmpne	r2, r1
   151d8:	beq	15158 <__assert_fail@plt+0x2b64>
   151dc:	movw	r1, #11792	; 0x2e10
   151e0:	movt	r1, #4
   151e4:	ldr	r3, [pc, #288]	; 1530c <__assert_fail@plt+0x2d18>
   151e8:	movw	r0, #12308	; 0x3014
   151ec:	movt	r0, #4
   151f0:	movw	r2, #1322	; 0x52a
   151f4:	bl	125f4 <__assert_fail@plt>
   151f8:	cmp	r3, #0
   151fc:	beq	152b8 <__assert_fail@plt+0x2cc4>
   15200:	cmp	r3, #2
   15204:	bne	151a8 <__assert_fail@plt+0x2bb4>
   15208:	movw	r1, #11792	; 0x2e10
   1520c:	movt	r1, #4
   15210:	ldr	r3, [pc, #244]	; 1530c <__assert_fail@plt+0x2d18>
   15214:	movw	r0, #12388	; 0x3064
   15218:	movt	r0, #4
   1521c:	movw	r2, #1339	; 0x53b
   15220:	bl	125f4 <__assert_fail@plt>
   15224:	ldrb	r3, [r0, #17]
   15228:	cmp	r3, #0
   1522c:	bne	1529c <__assert_fail@plt+0x2ca8>
   15230:	ldrb	r3, [r0, #16]
   15234:	cmp	r3, #0
   15238:	beq	151a8 <__assert_fail@plt+0x2bb4>
   1523c:	movw	r1, #11792	; 0x2e10
   15240:	movt	r1, #4
   15244:	ldr	r3, [pc, #192]	; 1530c <__assert_fail@plt+0x2d18>
   15248:	movw	r0, #12496	; 0x30d0
   1524c:	movt	r0, #4
   15250:	movw	r2, #1364	; 0x554
   15254:	bl	125f4 <__assert_fail@plt>
   15258:	ldr	r4, [sp]
   1525c:	add	sp, sp, #4
   15260:	pop	{pc}		; (ldr pc, [sp], #4)
   15264:	movw	r1, #11792	; 0x2e10
   15268:	movt	r1, #4
   1526c:	ldr	r3, [pc, #152]	; 1530c <__assert_fail@plt+0x2d18>
   15270:	movw	r0, #12284	; 0x2ffc
   15274:	movt	r0, #4
   15278:	movw	r2, #1313	; 0x521
   1527c:	bl	125f4 <__assert_fail@plt>
   15280:	movw	r1, #11792	; 0x2e10
   15284:	movt	r1, #4
   15288:	ldr	r3, [pc, #124]	; 1530c <__assert_fail@plt+0x2d18>
   1528c:	movw	r0, #12260	; 0x2fe4
   15290:	movt	r0, #4
   15294:	movw	r2, #1310	; 0x51e
   15298:	bl	125f4 <__assert_fail@plt>
   1529c:	movw	r1, #11792	; 0x2e10
   152a0:	movt	r1, #4
   152a4:	ldr	r3, [pc, #96]	; 1530c <__assert_fail@plt+0x2d18>
   152a8:	movw	r0, #12472	; 0x30b8
   152ac:	movt	r0, #4
   152b0:	movw	r2, #1363	; 0x553
   152b4:	bl	125f4 <__assert_fail@plt>
   152b8:	movw	r1, #11792	; 0x2e10
   152bc:	movt	r1, #4
   152c0:	ldr	r3, [pc, #68]	; 1530c <__assert_fail@plt+0x2d18>
   152c4:	movw	r0, #12352	; 0x3040
   152c8:	movt	r0, #4
   152cc:	movw	r2, #1338	; 0x53a
   152d0:	bl	125f4 <__assert_fail@plt>
   152d4:	movw	r1, #11792	; 0x2e10
   152d8:	movt	r1, #4
   152dc:	ldr	r3, [pc, #40]	; 1530c <__assert_fail@plt+0x2d18>
   152e0:	movw	r0, #12436	; 0x3094
   152e4:	movt	r0, #4
   152e8:	movw	r2, #1343	; 0x53f
   152ec:	bl	125f4 <__assert_fail@plt>
   152f0:	movw	r1, #11792	; 0x2e10
   152f4:	movt	r1, #4
   152f8:	ldr	r3, [pc, #12]	; 1530c <__assert_fail@plt+0x2d18>
   152fc:	movw	r0, #12452	; 0x30a4
   15300:	movt	r0, #4
   15304:	movw	r2, #1349	; 0x545
   15308:	bl	125f4 <__assert_fail@plt>
   1530c:	strdeq	r2, [r4], -ip
   15310:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15314:	mov	r4, #0
   15318:	strd	r6, [sp, #8]
   1531c:	mov	r6, r0
   15320:	mov	r0, #8
   15324:	mov	r7, r1
   15328:	str	r8, [sp, #16]
   1532c:	mov	r8, r2
   15330:	str	lr, [sp, #20]
   15334:	bl	2da2c <__assert_fail@plt+0x1b438>
   15338:	mov	r5, r0
   1533c:	mov	r1, r8
   15340:	mov	r0, r7
   15344:	mov	r2, r4
   15348:	str	r5, [r6]
   1534c:	str	r4, [r5, #4]
   15350:	bl	268c8 <__assert_fail@plt+0x142d4>
   15354:	ldr	r3, [r6]
   15358:	str	r0, [r5]
   1535c:	ldr	r0, [r3]
   15360:	cmp	r0, r4
   15364:	movlt	r0, r4
   15368:	blt	15378 <__assert_fail@plt+0x2d84>
   1536c:	mov	r1, #1
   15370:	bl	22228 <__assert_fail@plt+0xfc34>
   15374:	mov	r0, #1
   15378:	ldrd	r4, [sp]
   1537c:	ldrd	r6, [sp, #8]
   15380:	ldr	r8, [sp, #16]
   15384:	add	sp, sp, #20
   15388:	pop	{pc}		; (ldr pc, [sp], #4)
   1538c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15390:	mov	r5, r2
   15394:	strd	r6, [sp, #8]
   15398:	mov	r6, r0
   1539c:	strd	r8, [sp, #16]
   153a0:	strd	sl, [sp, #24]
   153a4:	str	lr, [sp, #32]
   153a8:	sub	sp, sp, #44	; 0x2c
   153ac:	ldr	r0, [r2]
   153b0:	bl	192d0 <__assert_fail@plt+0x6cdc>
   153b4:	subs	r3, r0, #0
   153b8:	str	r3, [sp, #32]
   153bc:	bne	15554 <__assert_fail@plt+0x2f60>
   153c0:	movw	r3, #38252	; 0x956c
   153c4:	movt	r3, #5
   153c8:	ldr	r2, [r5, #144]	; 0x90
   153cc:	ldr	r3, [r3]
   153d0:	cmp	r2, r3
   153d4:	bne	1562c <__assert_fail@plt+0x3038>
   153d8:	ldr	r3, [sp, #32]
   153dc:	mov	r9, r3
   153e0:	str	r3, [sp, #28]
   153e4:	str	r3, [sp, #36]	; 0x24
   153e8:	ldrb	r4, [r5, #40]	; 0x28
   153ec:	add	r8, r5, #44	; 0x2c
   153f0:	add	r7, r5, #88	; 0x58
   153f4:	cmp	r4, #0
   153f8:	bne	154e4 <__assert_fail@plt+0x2ef0>
   153fc:	ldr	r3, [r5, #136]	; 0x88
   15400:	cmp	r3, #0
   15404:	ble	15460 <__assert_fail@plt+0x2e6c>
   15408:	ldr	r3, [r5, #132]	; 0x84
   1540c:	ldr	sl, [r3, r4, lsl #2]
   15410:	add	r4, r4, #1
   15414:	mov	r0, sl
   15418:	bl	12300 <strlen@plt>
   1541c:	mov	fp, r0
   15420:	mov	r0, r6
   15424:	bl	12300 <strlen@plt>
   15428:	ldr	ip, [sp, #28]
   1542c:	mov	r3, fp
   15430:	mov	r2, sl
   15434:	mov	r1, r7
   15438:	stm	sp, {r9, ip}
   1543c:	mov	ip, #0
   15440:	str	r6, [sp, #8]
   15444:	str	r0, [sp, #12]
   15448:	mov	r0, r8
   1544c:	str	ip, [sp, #16]
   15450:	bl	1fd1c <__assert_fail@plt+0xd728>
   15454:	ldr	r3, [r5, #136]	; 0x88
   15458:	cmp	r3, r4
   1545c:	bgt	15408 <__assert_fail@plt+0x2e14>
   15460:	mov	r1, r7
   15464:	mov	r0, r8
   15468:	bl	1fef4 <__assert_fail@plt+0xd900>
   1546c:	ldr	r3, [r5, #148]	; 0x94
   15470:	ubfx	r2, r3, #8, #8
   15474:	and	r3, r3, #127	; 0x7f
   15478:	orrs	r3, r2, r3
   1547c:	ldr	r3, [sp, #32]
   15480:	moveq	r4, #1
   15484:	movne	r4, #0
   15488:	cmp	r3, #0
   1548c:	bne	154bc <__assert_fail@plt+0x2ec8>
   15490:	ldr	r3, [sp, #36]	; 0x24
   15494:	cmp	r3, #0
   15498:	bne	15534 <__assert_fail@plt+0x2f40>
   1549c:	mov	r0, r4
   154a0:	add	sp, sp, #44	; 0x2c
   154a4:	ldrd	r4, [sp]
   154a8:	ldrd	r6, [sp, #8]
   154ac:	ldrd	r8, [sp, #16]
   154b0:	ldrd	sl, [sp, #24]
   154b4:	add	sp, sp, #32
   154b8:	pop	{pc}		; (ldr pc, [sp], #4)
   154bc:	ldr	r0, [r5, #144]	; 0x90
   154c0:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   154c4:	ldr	r3, [sp, #36]	; 0x24
   154c8:	cmp	r3, #0
   154cc:	strne	r4, [sp, #32]
   154d0:	beq	1549c <__assert_fail@plt+0x2ea8>
   154d4:	ldr	r4, [sp, #32]
   154d8:	ldr	r0, [sp, #36]	; 0x24
   154dc:	bl	2f668 <__assert_fail@plt+0x1d074>
   154e0:	b	1549c <__assert_fail@plt+0x2ea8>
   154e4:	mov	r0, r6
   154e8:	bl	12300 <strlen@plt>
   154ec:	add	r3, r0, #1
   154f0:	ldr	r0, [sp, #28]
   154f4:	mov	ip, #0
   154f8:	mov	r2, r6
   154fc:	mov	r1, r7
   15500:	str	r9, [sp]
   15504:	stmib	sp, {r0, ip}
   15508:	mov	r0, r8
   1550c:	bl	1fa5c <__assert_fail@plt+0xd468>
   15510:	ldr	r3, [r5, #116]	; 0x74
   15514:	cmp	r3, #0
   15518:	bne	155e8 <__assert_fail@plt+0x2ff4>
   1551c:	ldr	r3, [sp, #36]	; 0x24
   15520:	cmp	r3, #0
   15524:	beq	1549c <__assert_fail@plt+0x2ea8>
   15528:	ldr	r3, [sp, #32]
   1552c:	cmp	r3, #0
   15530:	bne	154d4 <__assert_fail@plt+0x2ee0>
   15534:	movw	r3, #12516	; 0x30e4
   15538:	movt	r3, #4
   1553c:	movw	r1, #12612	; 0x3144
   15540:	movt	r1, #4
   15544:	movw	r0, #12656	; 0x3170
   15548:	movt	r0, #4
   1554c:	mov	r2, #208	; 0xd0
   15550:	bl	125f4 <__assert_fail@plt>
   15554:	ldr	r3, [r5, #116]	; 0x74
   15558:	movw	r4, #40512	; 0x9e40
   1555c:	movt	r4, #5
   15560:	ldr	r7, [r4, #12]
   15564:	cmp	r3, #0
   15568:	bne	155b8 <__assert_fail@plt+0x2fc4>
   1556c:	mov	r1, #47	; 0x2f
   15570:	mov	r0, r7
   15574:	bl	1230c <strchr@plt>
   15578:	cmp	r0, #0
   1557c:	add	r8, r5, #144	; 0x90
   15580:	beq	15610 <__assert_fail@plt+0x301c>
   15584:	mov	r0, r7
   15588:	bl	22548 <__assert_fail@plt+0xff54>
   1558c:	mov	r7, r0
   15590:	mov	r2, r0
   15594:	ldr	r1, [r4, #16]
   15598:	mov	r0, r8
   1559c:	bl	15310 <__assert_fail@plt+0x2d1c>
   155a0:	mov	r8, r0
   155a4:	mov	r0, r7
   155a8:	bl	2f668 <__assert_fail@plt+0x1d074>
   155ac:	cmp	r8, #0
   155b0:	beq	1564c <__assert_fail@plt+0x3058>
   155b4:	ldr	r7, [r4, #12]
   155b8:	mov	r0, r7
   155bc:	bl	22450 <__assert_fail@plt+0xfe5c>
   155c0:	ldrb	r3, [r0]
   155c4:	mov	r6, r0
   155c8:	str	r0, [sp, #36]	; 0x24
   155cc:	cmp	r3, #47	; 0x2f
   155d0:	beq	155fc <__assert_fail@plt+0x3008>
   155d4:	mov	r3, #2
   155d8:	movw	r9, #12540	; 0x30fc
   155dc:	movt	r9, #4
   155e0:	str	r3, [sp, #28]
   155e4:	b	153e8 <__assert_fail@plt+0x2df4>
   155e8:	movw	r3, #40512	; 0x9e40
   155ec:	movt	r3, #5
   155f0:	mov	r2, #1
   155f4:	strb	r2, [r3, #32]
   155f8:	b	1551c <__assert_fail@plt+0x2f28>
   155fc:	mov	r3, #0
   15600:	ldr	r6, [sp, #36]	; 0x24
   15604:	mov	r9, r3
   15608:	str	r3, [sp, #28]
   1560c:	b	153e8 <__assert_fail@plt+0x2df4>
   15610:	mov	r0, r8
   15614:	movw	r2, #24608	; 0x6020
   15618:	movt	r2, #4
   1561c:	ldr	r1, [r4, #16]
   15620:	bl	15310 <__assert_fail@plt+0x2d1c>
   15624:	mov	r8, r0
   15628:	b	155ac <__assert_fail@plt+0x2fb8>
   1562c:	movw	r3, #12516	; 0x30e4
   15630:	movt	r3, #4
   15634:	movw	r1, #12612	; 0x3144
   15638:	movt	r1, #4
   1563c:	movw	r0, #12620	; 0x314c
   15640:	movt	r0, #4
   15644:	mov	r2, #148	; 0x94
   15648:	bl	125f4 <__assert_fail@plt>
   1564c:	bl	12348 <__errno_location@plt>
   15650:	ldr	r4, [r0]
   15654:	mov	r2, #5
   15658:	movw	r1, #12544	; 0x3100
   1565c:	movt	r1, #4
   15660:	mov	r0, r8
   15664:	bl	120b4 <dcgettext@plt>
   15668:	mov	r5, r0
   1566c:	mov	r1, r6
   15670:	mov	r0, r8
   15674:	bl	192f4 <__assert_fail@plt+0x6d00>
   15678:	mov	r3, r0
   1567c:	mov	r2, r5
   15680:	mov	r1, r4
   15684:	mov	r0, #1
   15688:	bl	121ec <error@plt>
   1568c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15690:	mov	r5, r1
   15694:	strd	r6, [sp, #8]
   15698:	movw	r7, #40556	; 0x9e6c
   1569c:	movt	r7, #5
   156a0:	ldr	r2, [r7, #44]	; 0x2c
   156a4:	strd	r8, [sp, #16]
   156a8:	mov	r8, r3
   156ac:	str	sl, [sp, #24]
   156b0:	str	lr, [sp, #28]
   156b4:	sub	sp, sp, #24
   156b8:	tst	r2, #32
   156bc:	bne	15810 <__assert_fail@plt+0x321c>
   156c0:	movw	r6, #38216	; 0x9548
   156c4:	movt	r6, #5
   156c8:	movw	r3, #38228	; 0x9554
   156cc:	movt	r3, #5
   156d0:	ldr	r0, [r3]
   156d4:	bl	2f608 <__assert_fail@plt+0x1d014>
   156d8:	ldr	r0, [r6]
   156dc:	bl	2f608 <__assert_fail@plt+0x1d014>
   156e0:	movw	r3, #37528	; 0x9298
   156e4:	movt	r3, #5
   156e8:	ldr	r2, [r3]
   156ec:	cmp	r2, #0
   156f0:	bne	157f8 <__assert_fail@plt+0x3204>
   156f4:	bl	12450 <fork@plt>
   156f8:	cmn	r0, #1
   156fc:	mov	r9, r0
   15700:	beq	15ab4 <__assert_fail@plt+0x34c0>
   15704:	cmp	r0, #0
   15708:	bne	15790 <__assert_fail@plt+0x319c>
   1570c:	ldr	r4, [r5, #104]	; 0x68
   15710:	cmp	r4, #0
   15714:	beq	15ae0 <__assert_fail@plt+0x34ec>
   15718:	bl	12348 <__errno_location@plt>
   1571c:	ldrb	r3, [r5, #100]	; 0x64
   15720:	mov	r6, r0
   15724:	cmp	r3, #0
   15728:	bne	15988 <__assert_fail@plt+0x3394>
   1572c:	mov	r0, r4
   15730:	bl	2cca0 <__assert_fail@plt+0x1a6ac>
   15734:	cmp	r0, #0
   15738:	bne	159fc <__assert_fail@plt+0x3408>
   1573c:	bl	20d18 <__assert_fail@plt+0xe724>
   15740:	cmp	r0, #0
   15744:	bne	15900 <__assert_fail@plt+0x330c>
   15748:	mov	r0, r8
   1574c:	bl	20438 <__assert_fail@plt+0xde44>
   15750:	cmp	r0, #0
   15754:	beq	15908 <__assert_fail@plt+0x3314>
   15758:	mov	r3, #7
   1575c:	mov	r4, r3
   15760:	str	r3, [r6]
   15764:	mov	r0, #0
   15768:	ldr	r1, [r8]
   1576c:	bl	192f4 <__assert_fail@plt+0x6d00>
   15770:	mov	r3, r0
   15774:	movw	r2, #28236	; 0x6e4c
   15778:	movt	r2, #4
   1577c:	mov	r1, r4
   15780:	mov	r0, #0
   15784:	bl	121ec <error@plt>
   15788:	mov	r0, #1
   1578c:	bl	12018 <_exit@plt>
   15790:	add	sl, r5, #108	; 0x6c
   15794:	b	157a8 <__assert_fail@plt+0x31b4>
   15798:	bl	12348 <__errno_location@plt>
   1579c:	ldr	r4, [r0]
   157a0:	cmp	r4, #4
   157a4:	bne	15898 <__assert_fail@plt+0x32a4>
   157a8:	mov	r2, #0
   157ac:	mov	r1, sl
   157b0:	mov	r0, r9
   157b4:	bl	1218c <waitpid@plt>
   157b8:	cmn	r0, #1
   157bc:	beq	15798 <__assert_fail@plt+0x31a4>
   157c0:	ldr	r2, [r5, #108]	; 0x6c
   157c4:	and	r3, r2, #127	; 0x7f
   157c8:	add	r3, r3, #1
   157cc:	sbfx	r3, r3, #1, #7
   157d0:	cmp	r3, #0
   157d4:	bgt	1591c <__assert_fail@plt+0x3328>
   157d8:	ldr	r3, [r7, #44]	; 0x2c
   157dc:	ubfx	r4, r2, #8, #8
   157e0:	tst	r3, #32
   157e4:	bne	15a98 <__assert_fail@plt+0x34a4>
   157e8:	cmp	r4, #0
   157ec:	bne	15964 <__assert_fail@plt+0x3370>
   157f0:	mov	r0, #1
   157f4:	b	158e4 <__assert_fail@plt+0x32f0>
   157f8:	mov	r2, #0
   157fc:	mov	r0, #17
   15800:	mov	r1, r2
   15804:	str	r2, [r3]
   15808:	bl	1206c <signal@plt>
   1580c:	b	156f4 <__assert_fail@plt+0x3100>
   15810:	ldr	r2, [r5, #48]	; 0x30
   15814:	mov	r3, #0
   15818:	movw	r6, #38216	; 0x9548
   1581c:	movt	r6, #5
   15820:	movw	r1, #12664	; 0x3178
   15824:	movt	r1, #4
   15828:	ldr	r0, [r6]
   1582c:	subs	r2, r2, #1
   15830:	sbc	r3, r3, #0
   15834:	bl	1233c <fprintf@plt>
   15838:	ldr	r3, [r5, #48]	; 0x30
   1583c:	cmp	r3, #1
   15840:	movwne	r9, #34520	; 0x86d8
   15844:	movne	r4, #0
   15848:	movtne	r9, #4
   1584c:	beq	15888 <__assert_fail@plt+0x3294>
   15850:	ldr	r3, [r5, #52]	; 0x34
   15854:	mov	r0, #0
   15858:	ldr	sl, [r6]
   1585c:	ldr	r1, [r3, r4, lsl #2]
   15860:	add	r4, r4, #1
   15864:	bl	192f4 <__assert_fail@plt+0x6d00>
   15868:	mov	r2, r0
   1586c:	mov	r1, r9
   15870:	mov	r0, sl
   15874:	bl	1233c <fprintf@plt>
   15878:	ldr	r3, [r5, #48]	; 0x30
   1587c:	sub	r3, r3, #1
   15880:	cmp	r3, r4
   15884:	bhi	15850 <__assert_fail@plt+0x325c>
   15888:	mov	r0, #10
   1588c:	ldr	r1, [r6]
   15890:	bl	1248c <fputc@plt>
   15894:	b	156c8 <__assert_fail@plt+0x30d4>
   15898:	mov	r2, #5
   1589c:	movw	r1, #12808	; 0x3208
   158a0:	movt	r1, #4
   158a4:	mov	r0, #0
   158a8:	bl	120b4 <dcgettext@plt>
   158ac:	mov	r5, r0
   158b0:	mov	r0, #0
   158b4:	ldr	r1, [r8]
   158b8:	bl	192f4 <__assert_fail@plt+0x6d00>
   158bc:	mov	r3, r0
   158c0:	mov	r2, r5
   158c4:	mov	r0, #0
   158c8:	mov	r1, r4
   158cc:	bl	121ec <error@plt>
   158d0:	movw	r3, #40512	; 0x9e40
   158d4:	movt	r3, #5
   158d8:	mov	r2, #1
   158dc:	mov	r0, #0
   158e0:	str	r2, [r3, #28]
   158e4:	add	sp, sp, #24
   158e8:	ldrd	r4, [sp]
   158ec:	ldrd	r6, [sp, #8]
   158f0:	ldrd	r8, [sp, #16]
   158f4:	ldr	sl, [sp, #24]
   158f8:	add	sp, sp, #28
   158fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15900:	bl	20d40 <__assert_fail@plt+0xe74c>
   15904:	b	15748 <__assert_fail@plt+0x3154>
   15908:	mov	r1, r8
   1590c:	ldr	r0, [r8]
   15910:	bl	12030 <execvp@plt>
   15914:	ldr	r4, [r6]
   15918:	b	15764 <__assert_fail@plt+0x3170>
   1591c:	mov	r2, #5
   15920:	movw	r1, #12832	; 0x3220
   15924:	movt	r1, #4
   15928:	mov	r0, #0
   1592c:	bl	120b4 <dcgettext@plt>
   15930:	mov	r4, r0
   15934:	mov	r0, #0
   15938:	ldr	r2, [r8]
   1593c:	ldr	r1, [r7, #72]	; 0x48
   15940:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   15944:	ldr	ip, [r5, #108]	; 0x6c
   15948:	mov	r1, #0
   1594c:	mov	r3, r0
   15950:	mov	r2, r4
   15954:	mov	r0, r1
   15958:	and	ip, ip, #127	; 0x7f
   1595c:	str	ip, [sp]
   15960:	bl	121ec <error@plt>
   15964:	ldrb	r3, [r5]
   15968:	cmp	r3, #0
   1596c:	beq	157f0 <__assert_fail@plt+0x31fc>
   15970:	mov	r2, #1
   15974:	movw	r3, #40512	; 0x9e40
   15978:	movt	r3, #5
   1597c:	mov	r0, r2
   15980:	str	r2, [r3, #28]
   15984:	b	158e4 <__assert_fail@plt+0x32f0>
   15988:	movw	r1, #12924	; 0x327c
   1598c:	movt	r1, #4
   15990:	ldrd	r2, [r1]
   15994:	mov	r0, r9
   15998:	ldrh	r1, [r1, #8]
   1599c:	strd	r2, [sp, #12]
   159a0:	strh	r1, [sp, #20]
   159a4:	bl	125ac <close@plt>
   159a8:	cmp	r0, #0
   159ac:	blt	15a5c <__assert_fail@plt+0x3468>
   159b0:	mov	r1, #131072	; 0x20000
   159b4:	add	r0, sp, #12
   159b8:	bl	22600 <__assert_fail@plt+0x1000c>
   159bc:	cmp	r0, #0
   159c0:	bge	1572c <__assert_fail@plt+0x3138>
   159c4:	ldr	r5, [r6]
   159c8:	add	r1, sp, #12
   159cc:	mov	r0, r9
   159d0:	bl	192f4 <__assert_fail@plt+0x6d00>
   159d4:	mov	r3, r0
   159d8:	movw	r2, #28236	; 0x6e4c
   159dc:	movt	r2, #4
   159e0:	mov	r0, r9
   159e4:	mov	r1, r5
   159e8:	bl	121ec <error@plt>
   159ec:	mov	r0, r4
   159f0:	bl	2cca0 <__assert_fail@plt+0x1a6ac>
   159f4:	cmp	r0, #0
   159f8:	beq	1573c <__assert_fail@plt+0x3148>
   159fc:	mov	r2, #5
   15a00:	movw	r1, #12748	; 0x31cc
   15a04:	movt	r1, #4
   15a08:	mov	r0, #0
   15a0c:	ldr	r5, [r6]
   15a10:	bl	120b4 <dcgettext@plt>
   15a14:	ldr	r3, [r4]
   15a18:	mov	r2, r0
   15a1c:	cmp	r3, #0
   15a20:	blt	15a44 <__assert_fail@plt+0x3450>
   15a24:	movw	r3, #17776	; 0x4570
   15a28:	movt	r3, #4
   15a2c:	mov	r1, r3
   15a30:	mov	r0, #0
   15a34:	str	r1, [sp]
   15a38:	mov	r1, r5
   15a3c:	bl	121ec <error@plt>
   15a40:	b	15788 <__assert_fail@plt+0x3194>
   15a44:	ldr	r1, [r4, #4]
   15a48:	cmp	r1, #0
   15a4c:	movwne	r3, #21960	; 0x55c8
   15a50:	movtne	r3, #4
   15a54:	bne	15a30 <__assert_fail@plt+0x343c>
   15a58:	b	15a24 <__assert_fail@plt+0x3430>
   15a5c:	ldr	r5, [r6]
   15a60:	mov	r2, #5
   15a64:	movw	r1, #12780	; 0x31ec
   15a68:	movt	r1, #4
   15a6c:	mov	r0, r9
   15a70:	bl	120b4 <dcgettext@plt>
   15a74:	mov	r2, r0
   15a78:	mov	r0, r9
   15a7c:	mov	r1, r5
   15a80:	bl	121ec <error@plt>
   15a84:	mov	r0, r4
   15a88:	bl	2cca0 <__assert_fail@plt+0x1a6ac>
   15a8c:	cmp	r0, #0
   15a90:	beq	15788 <__assert_fail@plt+0x3194>
   15a94:	b	159fc <__assert_fail@plt+0x3408>
   15a98:	mov	r2, r9
   15a9c:	movw	r1, #12860	; 0x323c
   15aa0:	movt	r1, #4
   15aa4:	mov	r3, r4
   15aa8:	ldr	r0, [r6]
   15aac:	bl	1233c <fprintf@plt>
   15ab0:	b	157e8 <__assert_fail@plt+0x31f4>
   15ab4:	bl	12348 <__errno_location@plt>
   15ab8:	ldr	r4, [r0]
   15abc:	mov	r2, #5
   15ac0:	movw	r1, #12708	; 0x31a4
   15ac4:	movt	r1, #4
   15ac8:	mov	r0, #0
   15acc:	bl	120b4 <dcgettext@plt>
   15ad0:	mov	r2, r0
   15ad4:	mov	r0, #1
   15ad8:	mov	r1, r4
   15adc:	bl	121ec <error@plt>
   15ae0:	movw	r1, #12612	; 0x3144
   15ae4:	movt	r1, #4
   15ae8:	ldr	r3, [pc, #12]	; 15afc <__assert_fail@plt+0x3508>
   15aec:	movw	r0, #12720	; 0x31b0
   15af0:	movt	r0, #4
   15af4:	movw	r2, #321	; 0x141
   15af8:	bl	125f4 <__assert_fail@plt>
   15afc:	strdeq	r3, [r4], -r4
   15b00:	str	r4, [sp, #-8]!
   15b04:	mov	r4, r0
   15b08:	str	lr, [sp, #4]
   15b0c:	cmp	r4, #0
   15b10:	beq	15b2c <__assert_fail@plt+0x3538>
   15b14:	ldrb	r0, [r4, #16]
   15b18:	cmp	r0, #0
   15b1c:	beq	15b3c <__assert_fail@plt+0x3548>
   15b20:	ldr	r4, [sp]
   15b24:	add	sp, sp, #4
   15b28:	pop	{pc}		; (ldr pc, [sp], #4)
   15b2c:	mov	r0, r4
   15b30:	ldr	r4, [sp]
   15b34:	add	sp, sp, #4
   15b38:	pop	{pc}		; (ldr pc, [sp], #4)
   15b3c:	ldr	r0, [r4, #156]	; 0x9c
   15b40:	bl	15b00 <__assert_fail@plt+0x350c>
   15b44:	cmp	r0, #0
   15b48:	bne	15b20 <__assert_fail@plt+0x352c>
   15b4c:	ldr	r4, [r4, #160]	; 0xa0
   15b50:	b	15b0c <__assert_fail@plt+0x3518>
   15b54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15b58:	ldr	r4, [r0]
   15b5c:	strd	r6, [sp, #8]
   15b60:	str	r8, [sp, #16]
   15b64:	str	lr, [sp, #20]
   15b68:	cmp	r4, #0
   15b6c:	beq	15d48 <__assert_fail@plt+0x3754>
   15b70:	ldr	r3, [r4, #8]
   15b74:	mov	r5, r0
   15b78:	mov	r6, r1
   15b7c:	cmp	r3, #5
   15b80:	ldrls	pc, [pc, r3, lsl #2]
   15b84:	b	15e0c <__assert_fail@plt+0x3818>
   15b88:	andeq	r5, r1, r8, asr #26
   15b8c:	muleq	r1, r8, ip
   15b90:	andeq	r5, r1, r0, asr ip
   15b94:	andeq	r5, r1, r0, lsr #27
   15b98:	strdeq	r5, [r1], -r4
   15b9c:	andeq	r5, r1, r0, lsr #23
   15ba0:	cmp	r2, #0
   15ba4:	mov	r7, r2
   15ba8:	movweq	r1, #13272	; 0x33d8
   15bac:	movteq	r1, #4
   15bb0:	beq	15da8 <__assert_fail@plt+0x37b4>
   15bb4:	ldr	r3, [r2, #8]
   15bb8:	ldrb	r4, [r4, #33]	; 0x21
   15bbc:	sub	r3, r3, #2
   15bc0:	cmp	r3, #1
   15bc4:	bls	15cd8 <__assert_fail@plt+0x36e4>
   15bc8:	cmp	r4, #0
   15bcc:	movweq	r1, #13428	; 0x3474
   15bd0:	movteq	r1, #4
   15bd4:	bne	15ce8 <__assert_fail@plt+0x36f4>
   15bd8:	mov	r2, #5
   15bdc:	mov	r0, #0
   15be0:	bl	120b4 <dcgettext@plt>
   15be4:	mov	r2, r0
   15be8:	mov	r1, #0
   15bec:	mov	r0, #1
   15bf0:	bl	121ec <error@plt>
   15bf4:	ldr	r3, [r4, #152]	; 0x98
   15bf8:	cmp	r3, #0
   15bfc:	beq	15dc8 <__assert_fail@plt+0x37d4>
   15c00:	ldrb	r7, [r3, #33]	; 0x21
   15c04:	cmp	r7, #0
   15c08:	bne	15dc8 <__assert_fail@plt+0x37d4>
   15c0c:	ldr	r2, [r3, #8]
   15c10:	str	r3, [r0]
   15c14:	cmp	r2, #5
   15c18:	bne	15ca4 <__assert_fail@plt+0x36b0>
   15c1c:	ldrb	r4, [r4, #33]	; 0x21
   15c20:	cmp	r4, #0
   15c24:	beq	15d94 <__assert_fail@plt+0x37a0>
   15c28:	movw	r1, #13272	; 0x33d8
   15c2c:	movt	r1, #4
   15c30:	mov	r0, r7
   15c34:	bl	120b4 <dcgettext@plt>
   15c38:	ldr	r3, [r5]
   15c3c:	mov	r2, r0
   15c40:	mov	r1, r7
   15c44:	mov	r0, #1
   15c48:	ldr	r3, [r3, #4]
   15c4c:	bl	121ec <error@plt>
   15c50:	ldr	r3, [r4, #152]	; 0x98
   15c54:	mov	r2, r4
   15c58:	mov	r1, #4
   15c5c:	str	r3, [r0]
   15c60:	bl	15b54 <__assert_fail@plt+0x3560>
   15c64:	str	r0, [r4, #160]	; 0xa0
   15c68:	ldr	r2, [r5]
   15c6c:	cmp	r2, #0
   15c70:	beq	15c80 <__assert_fail@plt+0x368c>
   15c74:	ldr	r3, [r2, #12]
   15c78:	cmp	r3, r6
   15c7c:	bgt	15d10 <__assert_fail@plt+0x371c>
   15c80:	mov	r0, r4
   15c84:	ldrd	r4, [sp]
   15c88:	ldrd	r6, [sp, #8]
   15c8c:	ldr	r8, [sp, #16]
   15c90:	add	sp, sp, #20
   15c94:	pop	{pc}		; (ldr pc, [sp], #4)
   15c98:	ldr	r2, [r4, #152]	; 0x98
   15c9c:	str	r2, [r0]
   15ca0:	b	15c6c <__assert_fail@plt+0x3678>
   15ca4:	mov	r2, r4
   15ca8:	mov	r1, r7
   15cac:	bl	15b54 <__assert_fail@plt+0x3560>
   15cb0:	ldr	r3, [r5]
   15cb4:	mov	r4, r0
   15cb8:	cmp	r3, #0
   15cbc:	beq	15dd4 <__assert_fail@plt+0x37e0>
   15cc0:	ldr	r2, [r3, #8]
   15cc4:	cmp	r2, #5
   15cc8:	bne	15dd4 <__assert_fail@plt+0x37e0>
   15ccc:	ldr	r2, [r3, #152]	; 0x98
   15cd0:	str	r2, [r5]
   15cd4:	b	15c6c <__assert_fail@plt+0x3678>
   15cd8:	cmp	r4, #0
   15cdc:	movweq	r1, #13348	; 0x3424
   15ce0:	movteq	r1, #4
   15ce4:	beq	15cf0 <__assert_fail@plt+0x36fc>
   15ce8:	movw	r1, #13392	; 0x3450
   15cec:	movt	r1, #4
   15cf0:	mov	r2, #5
   15cf4:	mov	r0, #0
   15cf8:	bl	120b4 <dcgettext@plt>
   15cfc:	mov	r2, r0
   15d00:	mov	r1, #0
   15d04:	ldr	r3, [r7, #4]
   15d08:	mov	r0, #1
   15d0c:	bl	121ec <error@plt>
   15d10:	ldr	r3, [r2, #8]
   15d14:	cmp	r3, #5
   15d18:	beq	15d48 <__assert_fail@plt+0x3754>
   15d1c:	cmp	r3, #5
   15d20:	ldrls	pc, [pc, r3, lsl #2]
   15d24:	b	15de0 <__assert_fail@plt+0x37ec>
   15d28:	andeq	r5, r1, r8, asr #26
   15d2c:	andeq	r5, r1, r8, asr #26
   15d30:	andeq	r5, r1, r8, asr #26
   15d34:	andeq	r5, r1, r4, asr sp
   15d38:	andeq	r5, r1, r8, asr #26
   15d3c:	andeq	r5, r1, r0, asr #26
   15d40:	cmp	r4, #0
   15d44:	bne	15c80 <__assert_fail@plt+0x368c>
   15d48:	movw	r1, #13168	; 0x3370
   15d4c:	movt	r1, #4
   15d50:	b	15bd8 <__assert_fail@plt+0x35e4>
   15d54:	str	r4, [r2, #156]	; 0x9c
   15d58:	mov	r0, r5
   15d5c:	ldr	r4, [r5]
   15d60:	ldr	r3, [r4, #152]	; 0x98
   15d64:	ldrsh	r1, [r4, #12]
   15d68:	str	r3, [r5]
   15d6c:	bl	15b54 <__assert_fail@plt+0x3560>
   15d70:	str	r0, [r4, #160]	; 0xa0
   15d74:	ldr	r2, [r5]
   15d78:	cmp	r2, #0
   15d7c:	beq	15c80 <__assert_fail@plt+0x368c>
   15d80:	ldr	r3, [r2, #12]
   15d84:	cmp	r6, r3
   15d88:	bge	15c80 <__assert_fail@plt+0x368c>
   15d8c:	ldr	r3, [r2, #8]
   15d90:	b	15d1c <__assert_fail@plt+0x3728>
   15d94:	movw	r1, #13584	; 0x3510
   15d98:	movt	r1, #4
   15d9c:	b	15bdc <__assert_fail@plt+0x35e8>
   15da0:	movw	r1, #13188	; 0x3384
   15da4:	movt	r1, #4
   15da8:	mov	r2, #5
   15dac:	mov	r0, #0
   15db0:	bl	120b4 <dcgettext@plt>
   15db4:	mov	r2, r0
   15db8:	mov	r1, #0
   15dbc:	ldr	r3, [r4, #4]
   15dc0:	mov	r0, #1
   15dc4:	bl	121ec <error@plt>
   15dc8:	movw	r1, #13472	; 0x34a0
   15dcc:	movt	r1, #4
   15dd0:	b	15da8 <__assert_fail@plt+0x37b4>
   15dd4:	movw	r1, #13640	; 0x3548
   15dd8:	movt	r1, #4
   15ddc:	b	15bd8 <__assert_fail@plt+0x35e4>
   15de0:	mov	r2, #5
   15de4:	movw	r1, #13760	; 0x35c0
   15de8:	movt	r1, #4
   15dec:	mov	r0, #0
   15df0:	bl	120b4 <dcgettext@plt>
   15df4:	ldr	r3, [r5]
   15df8:	mov	r2, r0
   15dfc:	mov	r1, #0
   15e00:	mov	r0, #1
   15e04:	ldr	r3, [r3, #8]
   15e08:	bl	121ec <error@plt>
   15e0c:	movw	r1, #13724	; 0x359c
   15e10:	movt	r1, #4
   15e14:	b	15bd8 <__assert_fail@plt+0x35e4>
   15e18:	ldr	ip, [r0]
   15e1c:	mov	r2, #4
   15e20:	push	{lr}		; (str lr, [sp, #-4]!)
   15e24:	sub	sp, sp, #12
   15e28:	ldr	r3, [r1]
   15e2c:	mov	r0, sp
   15e30:	add	r1, sp, r2
   15e34:	str	ip, [sp]
   15e38:	str	r3, [sp, #4]
   15e3c:	bl	12084 <memcmp@plt>
   15e40:	add	sp, sp, #12
   15e44:	pop	{pc}		; (ldr pc, [sp], #4)
   15e48:	strd	r4, [sp, #-16]!
   15e4c:	mov	r5, r0
   15e50:	mov	r0, #176	; 0xb0
   15e54:	mov	r4, r1
   15e58:	str	r6, [sp, #8]
   15e5c:	mov	r6, r2
   15e60:	str	lr, [sp, #12]
   15e64:	bl	2dd04 <__assert_fail@plt+0x1b710>
   15e68:	mov	r1, #3
   15e6c:	mov	r2, #0
   15e70:	cmp	r4, #2
   15e74:	mov	r3, r0
   15e78:	str	r1, [r0, #8]
   15e7c:	str	r4, [r0, #12]
   15e80:	str	r2, [r0, #24]
   15e84:	beq	15eb4 <__assert_fail@plt+0x38c0>
   15e88:	cmp	r4, r1
   15e8c:	beq	15f18 <__assert_fail@plt+0x3924>
   15e90:	cmp	r4, #1
   15e94:	beq	15ef8 <__assert_fail@plt+0x3904>
   15e98:	str	r3, [r6]
   15e9c:	mov	r0, r3
   15ea0:	str	r5, [r3, #160]	; 0xa0
   15ea4:	ldrd	r4, [sp]
   15ea8:	ldr	r6, [sp, #8]
   15eac:	add	sp, sp, #12
   15eb0:	pop	{pc}		; (ldr pc, [sp], #4)
   15eb4:	vldr	s14, [pc, #116]	; 15f30 <__assert_fail@plt+0x393c>
   15eb8:	movw	r1, #15444	; 0x3c54
   15ebc:	movt	r1, #1
   15ec0:	movw	r2, #13804	; 0x35ec
   15ec4:	movt	r2, #4
   15ec8:	vldr	s15, [r5, #28]
   15ecc:	stm	r3, {r1, r2}
   15ed0:	vcmpe.f32	s15, s14
   15ed4:	vmrs	APSR_nzcv, fpscr
   15ed8:	vmovgt.f32	s15, s14
   15edc:	bgt	15ef0 <__assert_fail@plt+0x38fc>
   15ee0:	vcmp.f32	s15, #0.0
   15ee4:	vldr	s14, [pc, #72]	; 15f34 <__assert_fail@plt+0x3940>
   15ee8:	vmrs	APSR_nzcv, fpscr
   15eec:	vmovmi.f32	s15, s14
   15ef0:	vstr	s15, [r3, #28]
   15ef4:	b	15e98 <__assert_fail@plt+0x38a4>
   15ef8:	mov	r0, #1065353216	; 0x3f800000
   15efc:	movw	r1, #15848	; 0x3de8
   15f00:	movt	r1, #1
   15f04:	movw	r2, #13800	; 0x35e8
   15f08:	movt	r2, #4
   15f0c:	stm	r3, {r1, r2}
   15f10:	str	r0, [r3, #28]
   15f14:	b	15e98 <__assert_fail@plt+0x38a4>
   15f18:	movw	r1, #14464	; 0x3880
   15f1c:	movt	r1, #1
   15f20:	vldr	s14, [pc, #8]	; 15f30 <__assert_fail@plt+0x393c>
   15f24:	movw	r2, #13808	; 0x35f0
   15f28:	movt	r2, #4
   15f2c:	b	15ec8 <__assert_fail@plt+0x38d4>
   15f30:	svccc	0x00800000
   15f34:	andeq	r0, r0, r0
   15f38:	cmp	r1, #0
   15f3c:	str	r4, [sp, #-8]!
   15f40:	mov	r4, r0
   15f44:	str	lr, [sp, #4]
   15f48:	beq	15f58 <__assert_fail@plt+0x3964>
   15f4c:	ldr	r3, [r0, #8]
   15f50:	cmp	r3, #3
   15f54:	bne	15fb0 <__assert_fail@plt+0x39bc>
   15f58:	ldr	r0, [r4, #156]	; 0x9c
   15f5c:	cmp	r0, #0
   15f60:	beq	15f78 <__assert_fail@plt+0x3984>
   15f64:	ldr	r3, [r0, #8]
   15f68:	cmp	r3, #3
   15f6c:	bne	15f90 <__assert_fail@plt+0x399c>
   15f70:	mov	r1, #0
   15f74:	bl	15f38 <__assert_fail@plt+0x3944>
   15f78:	ldr	r4, [r4, #160]	; 0xa0
   15f7c:	cmp	r4, #0
   15f80:	bne	15f58 <__assert_fail@plt+0x3964>
   15f84:	ldr	r4, [sp]
   15f88:	add	sp, sp, #4
   15f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f90:	movw	r3, #12936	; 0x3288
   15f94:	movt	r3, #4
   15f98:	movw	r1, #13812	; 0x35f4
   15f9c:	movt	r1, #4
   15fa0:	movw	r0, #13840	; 0x3610
   15fa4:	movt	r0, #4
   15fa8:	movw	r2, #1235	; 0x4d3
   15fac:	bl	125f4 <__assert_fail@plt>
   15fb0:	movw	r3, #12936	; 0x3288
   15fb4:	movt	r3, #4
   15fb8:	movw	r1, #13812	; 0x35f4
   15fbc:	movt	r1, #4
   15fc0:	movw	r0, #13820	; 0x35fc
   15fc4:	movt	r0, #4
   15fc8:	movw	r2, #1230	; 0x4ce
   15fcc:	bl	125f4 <__assert_fail@plt>
   15fd0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15fd4:	subs	r5, r0, #0
   15fd8:	strd	r6, [sp, #8]
   15fdc:	strd	r8, [sp, #16]
   15fe0:	str	sl, [sp, #24]
   15fe4:	str	lr, [sp, #28]
   15fe8:	sub	sp, sp, #8
   15fec:	beq	16044 <__assert_fail@plt+0x3a50>
   15ff0:	ldr	r0, [r5, #160]	; 0xa0
   15ff4:	bl	15fd0 <__assert_fail@plt+0x39dc>
   15ff8:	ldr	r0, [r5, #156]	; 0x9c
   15ffc:	bl	15fd0 <__assert_fail@plt+0x39dc>
   16000:	ldrb	r3, [r5, #18]
   16004:	cmp	r3, #0
   16008:	movne	r8, #3
   1600c:	beq	16060 <__assert_fail@plt+0x3a6c>
   16010:	ldr	r1, [r5]
   16014:	movw	r2, #16752	; 0x4170
   16018:	movt	r2, #1
   1601c:	movw	r3, #16756	; 0x4174
   16020:	movt	r3, #1
   16024:	cmp	r1, r3
   16028:	cmpne	r1, r2
   1602c:	bne	16084 <__assert_fail@plt+0x3a90>
   16030:	ldrb	r3, [r5, #40]	; 0x28
   16034:	cmp	r3, #0
   16038:	movne	r8, #7
   1603c:	moveq	r8, #8
   16040:	str	r8, [r5, #24]
   16044:	add	sp, sp, #8
   16048:	ldrd	r4, [sp]
   1604c:	ldrd	r6, [sp, #8]
   16050:	ldrd	r8, [sp, #16]
   16054:	ldr	sl, [sp, #24]
   16058:	add	sp, sp, #28
   1605c:	pop	{pc}		; (ldr pc, [sp], #4)
   16060:	ldrb	r3, [r5, #20]
   16064:	cmp	r3, #0
   16068:	movne	r8, #1
   1606c:	bne	16010 <__assert_fail@plt+0x3a1c>
   16070:	ldrb	r3, [r5, #19]
   16074:	cmp	r3, #0
   16078:	movne	r8, #2
   1607c:	moveq	r8, #0
   16080:	b	16010 <__assert_fail@plt+0x3a1c>
   16084:	movw	r3, #43232	; 0xa8e0
   16088:	movt	r3, #1
   1608c:	cmp	r1, r3
   16090:	beq	1611c <__assert_fail@plt+0x3b28>
   16094:	movw	sl, #38256	; 0x9570
   16098:	movt	sl, #5
   1609c:	ldr	r3, [sl]
   160a0:	movw	r7, #37532	; 0x929c
   160a4:	movt	r7, #5
   160a8:	cmp	r3, #0
   160ac:	beq	1614c <__assert_fail@plt+0x3b58>
   160b0:	mov	r9, #59	; 0x3b
   160b4:	mov	r6, #0
   160b8:	str	r1, [sp]
   160bc:	add	r4, r6, r9
   160c0:	mov	r0, sp
   160c4:	lsr	r4, r4, #1
   160c8:	add	sl, r7, r4, lsl #3
   160cc:	mov	r1, sl
   160d0:	bl	15e18 <__assert_fail@plt+0x3824>
   160d4:	cmp	r0, #0
   160d8:	blt	1612c <__assert_fail@plt+0x3b38>
   160dc:	beq	1613c <__assert_fail@plt+0x3b48>
   160e0:	add	r6, r4, #1
   160e4:	cmp	r6, r9
   160e8:	bcc	160bc <__assert_fail@plt+0x3ac8>
   160ec:	mov	r2, #5
   160f0:	movw	r1, #13884	; 0x363c
   160f4:	movt	r1, #4
   160f8:	mov	r0, #0
   160fc:	bl	120b4 <dcgettext@plt>
   16100:	mov	r1, #0
   16104:	mov	r2, r0
   16108:	ldr	r3, [r5, #4]
   1610c:	mov	r0, r1
   16110:	bl	121ec <error@plt>
   16114:	mov	r3, #10
   16118:	b	16120 <__assert_fail@plt+0x3b2c>
   1611c:	ldr	r3, [r5, #24]
   16120:	cmp	r8, r3
   16124:	movcc	r8, r3
   16128:	b	16040 <__assert_fail@plt+0x3a4c>
   1612c:	cmp	r6, r4
   16130:	bcs	160ec <__assert_fail@plt+0x3af8>
   16134:	mov	r9, r4
   16138:	b	160bc <__assert_fail@plt+0x3ac8>
   1613c:	cmp	sl, #0
   16140:	beq	160ec <__assert_fail@plt+0x3af8>
   16144:	ldr	r3, [sl, #4]
   16148:	b	16120 <__assert_fail@plt+0x3b2c>
   1614c:	movw	r3, #24088	; 0x5e18
   16150:	movt	r3, #1
   16154:	mov	r0, r7
   16158:	mov	r2, #8
   1615c:	mov	r1, #59	; 0x3b
   16160:	mov	r4, r7
   16164:	add	r9, r7, #464	; 0x1d0
   16168:	bl	12510 <qsort@plt>
   1616c:	add	r6, r4, #8
   16170:	mov	r1, r4
   16174:	mov	r0, r6
   16178:	bl	15e18 <__assert_fail@plt+0x3824>
   1617c:	cmp	r0, #0
   16180:	blt	161d0 <__assert_fail@plt+0x3bdc>
   16184:	mov	r0, r4
   16188:	mov	r1, r6
   1618c:	bl	15e18 <__assert_fail@plt+0x3824>
   16190:	cmp	r0, #0
   16194:	bgt	161b4 <__assert_fail@plt+0x3bc0>
   16198:	cmp	r9, r6
   1619c:	mov	r4, r6
   161a0:	bne	1616c <__assert_fail@plt+0x3b78>
   161a4:	mov	r3, #1
   161a8:	ldr	r1, [r5]
   161ac:	str	r3, [sl]
   161b0:	b	160b0 <__assert_fail@plt+0x3abc>
   161b4:	movw	r1, #13812	; 0x35f4
   161b8:	movt	r1, #4
   161bc:	ldr	r3, [pc, #32]	; 161e4 <__assert_fail@plt+0x3bf0>
   161c0:	movw	r0, #13872	; 0x3630
   161c4:	movt	r0, #4
   161c8:	movw	r2, #1013	; 0x3f5
   161cc:	bl	125f4 <__assert_fail@plt>
   161d0:	movw	r2, #13996	; 0x36ac
   161d4:	movt	r2, #4
   161d8:	mov	r1, #0
   161dc:	mov	r0, #1
   161e0:	bl	121ec <error@plt>
   161e4:	muleq	r4, ip, r2
   161e8:	strd	r4, [sp, #-16]!
   161ec:	mov	r5, r0
   161f0:	ldr	r0, [r0, #156]	; 0x9c
   161f4:	str	r6, [sp, #8]
   161f8:	str	lr, [sp, #12]
   161fc:	cmp	r0, #0
   16200:	moveq	r4, r0
   16204:	beq	16210 <__assert_fail@plt+0x3c1c>
   16208:	bl	161e8 <__assert_fail@plt+0x3bf4>
   1620c:	mov	r4, r0
   16210:	ldr	r0, [r5, #160]	; 0xa0
   16214:	cmp	r0, #0
   16218:	beq	16220 <__assert_fail@plt+0x3c2c>
   1621c:	bl	161e8 <__assert_fail@plt+0x3bf4>
   16220:	ldr	r3, [r5, #24]
   16224:	ldr	r6, [sp, #8]
   16228:	cmp	r4, r3
   1622c:	movcs	r3, r4
   16230:	ldrd	r4, [sp]
   16234:	add	sp, sp, #12
   16238:	cmp	r3, r0
   1623c:	movcs	r0, r3
   16240:	pop	{pc}		; (ldr pc, [sp], #4)
   16244:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16248:	movw	r5, #38256	; 0x9570
   1624c:	movt	r5, #5
   16250:	ldr	r3, [r5, #4]
   16254:	cmp	r1, #0
   16258:	strd	r6, [sp, #8]
   1625c:	moveq	r6, #0
   16260:	movne	r6, #16
   16264:	str	r8, [sp, #16]
   16268:	str	lr, [sp, #20]
   1626c:	cmp	r3, #0
   16270:	beq	162cc <__assert_fail@plt+0x3cd8>
   16274:	mov	r7, r0
   16278:	mov	r4, #0
   1627c:	b	1628c <__assert_fail@plt+0x3c98>
   16280:	ldr	r3, [r5, #4]
   16284:	cmp	r3, r4
   16288:	bls	162c4 <__assert_fail@plt+0x3cd0>
   1628c:	ldr	r3, [r5, #8]
   16290:	mov	r2, r6
   16294:	mov	r0, r7
   16298:	ldr	r1, [r3, r4, lsl #2]
   1629c:	add	r4, r4, #1
   162a0:	bl	12210 <fnmatch@plt>
   162a4:	cmp	r0, #0
   162a8:	bne	16280 <__assert_fail@plt+0x3c8c>
   162ac:	mov	r0, #1
   162b0:	ldrd	r4, [sp]
   162b4:	ldrd	r6, [sp, #8]
   162b8:	ldr	r8, [sp, #16]
   162bc:	add	sp, sp, #20
   162c0:	pop	{pc}		; (ldr pc, [sp], #4)
   162c4:	mov	r0, #0
   162c8:	b	162b0 <__assert_fail@plt+0x3cbc>
   162cc:	mov	r2, r6
   162d0:	movw	r1, #24608	; 0x6020
   162d4:	movt	r1, #4
   162d8:	bl	12210 <fnmatch@plt>
   162dc:	clz	r0, r0
   162e0:	lsr	r0, r0, #5
   162e4:	b	162b0 <__assert_fail@plt+0x3cbc>
   162e8:	ldr	r2, [r1, #4]
   162ec:	ldr	r3, [r1, #36]	; 0x24
   162f0:	cmp	r3, #0
   162f4:	beq	16304 <__assert_fail@plt+0x3d10>
   162f8:	movw	r1, #14032	; 0x36d0
   162fc:	movt	r1, #4
   16300:	b	1233c <fprintf@plt>
   16304:	mov	r1, r0
   16308:	mov	r0, r2
   1630c:	b	12588 <fputs@plt>
   16310:	movw	r3, #38256	; 0x9570
   16314:	movt	r3, #5
   16318:	ldr	r0, [r3, #12]
   1631c:	bx	lr
   16320:	str	r4, [sp, #-8]!
   16324:	subs	r4, r0, #0
   16328:	str	lr, [sp, #4]
   1632c:	beq	164f4 <__assert_fail@plt+0x3f00>
   16330:	ldr	r0, [r4, #160]	; 0xa0
   16334:	cmp	r0, #0
   16338:	beq	16340 <__assert_fail@plt+0x3d4c>
   1633c:	bl	16320 <__assert_fail@plt+0x3d2c>
   16340:	ldr	r0, [r4, #156]	; 0x9c
   16344:	cmp	r0, #0
   16348:	beq	16350 <__assert_fail@plt+0x3d5c>
   1634c:	bl	16320 <__assert_fail@plt+0x3d2c>
   16350:	ldr	r3, [r4, #8]
   16354:	cmp	r3, #5
   16358:	beq	164d8 <__assert_fail@plt+0x3ee4>
   1635c:	cmp	r3, #4
   16360:	beq	16510 <__assert_fail@plt+0x3f1c>
   16364:	cmp	r3, #3
   16368:	ldrls	pc, [pc, r3, lsl #2]
   1636c:	b	165d4 <__assert_fail@plt+0x3fe0>
   16370:	andeq	r6, r1, ip, lsl #8
   16374:	andeq	r6, r1, r4, lsr r4
   16378:	andeq	r6, r1, r8, ror #8
   1637c:	andeq	r6, r1, r0, lsl #7
   16380:	ldr	r2, [r4]
   16384:	movw	r3, #14464	; 0x3880
   16388:	movt	r3, #1
   1638c:	cmp	r2, r3
   16390:	beq	164a8 <__assert_fail@plt+0x3eb4>
   16394:	movw	r3, #15848	; 0x3de8
   16398:	movt	r3, #1
   1639c:	cmp	r2, r3
   163a0:	beq	164d0 <__assert_fail@plt+0x3edc>
   163a4:	movw	r3, #15444	; 0x3c54
   163a8:	movt	r3, #1
   163ac:	cmp	r2, r3
   163b0:	bne	165b8 <__assert_fail@plt+0x3fc4>
   163b4:	ldr	r3, [r4, #160]	; 0xa0
   163b8:	cmp	r3, #0
   163bc:	vldrne	s15, [r3, #28]
   163c0:	ldr	r3, [r4, #156]	; 0x9c
   163c4:	vldreq	s15, [pc, #548]	; 165f0 <__assert_fail@plt+0x3ffc>
   163c8:	cmp	r3, #0
   163cc:	vldrne	s0, [r3, #28]
   163d0:	vldreq	s0, [pc, #536]	; 165f0 <__assert_fail@plt+0x3ffc>
   163d4:	vadd.f32	s0, s0, s15
   163d8:	vldr	s15, [pc, #528]	; 165f0 <__assert_fail@plt+0x3ffc>
   163dc:	vcmpe.f32	s0, s15
   163e0:	vmrs	APSR_nzcv, fpscr
   163e4:	vmovgt.f32	s0, s15
   163e8:	bgt	163fc <__assert_fail@plt+0x3e08>
   163ec:	vcmp.f32	s0, #0.0
   163f0:	vldr	s15, [pc, #508]	; 165f4 <__assert_fail@plt+0x4000>
   163f4:	vmrs	APSR_nzcv, fpscr
   163f8:	vmovmi.f32	s0, s15
   163fc:	vstr	s0, [r4, #28]
   16400:	ldr	r4, [sp]
   16404:	add	sp, sp, #4
   16408:	pop	{pc}		; (ldr pc, [sp], #4)
   1640c:	ldr	r3, [r4, #160]	; 0xa0
   16410:	cmp	r3, #0
   16414:	bne	1659c <__assert_fail@plt+0x3fa8>
   16418:	ldr	r3, [r4, #156]	; 0x9c
   1641c:	cmp	r3, #0
   16420:	bne	16580 <__assert_fail@plt+0x3f8c>
   16424:	vldr	s0, [r4, #28]
   16428:	ldr	r4, [sp]
   1642c:	add	sp, sp, #4
   16430:	pop	{pc}		; (ldr pc, [sp], #4)
   16434:	ldr	r3, [r4, #160]	; 0xa0
   16438:	cmp	r3, #0
   1643c:	bne	16564 <__assert_fail@plt+0x3f70>
   16440:	ldr	r3, [r4, #156]	; 0x9c
   16444:	cmp	r3, #0
   16448:	beq	16424 <__assert_fail@plt+0x3e30>
   1644c:	movw	r1, #13812	; 0x35f4
   16450:	movt	r1, #4
   16454:	ldr	r3, [pc, #412]	; 165f8 <__assert_fail@plt+0x4004>
   16458:	movw	r0, #14128	; 0x3730
   1645c:	movt	r0, #4
   16460:	movw	r2, #1175	; 0x497
   16464:	bl	125f4 <__assert_fail@plt>
   16468:	ldr	r2, [r4]
   1646c:	movw	r3, #17816	; 0x4598
   16470:	movt	r3, #1
   16474:	cmp	r2, r3
   16478:	bne	16548 <__assert_fail@plt+0x3f54>
   1647c:	ldr	r3, [r4, #156]	; 0x9c
   16480:	cmp	r3, #0
   16484:	bne	1652c <__assert_fail@plt+0x3f38>
   16488:	ldr	r3, [r4, #160]	; 0xa0
   1648c:	vldr	s0, [pc, #348]	; 165f0 <__assert_fail@plt+0x3ffc>
   16490:	vldr	s15, [r3, #28]
   16494:	vsub.f32	s0, s0, s15
   16498:	vstr	s0, [r4, #28]
   1649c:	ldr	r4, [sp]
   164a0:	add	sp, sp, #4
   164a4:	pop	{pc}		; (ldr pc, [sp], #4)
   164a8:	ldr	r3, [r4, #160]	; 0xa0
   164ac:	cmp	r3, #0
   164b0:	vldrne	s0, [r3, #28]
   164b4:	ldr	r3, [r4, #156]	; 0x9c
   164b8:	vldreq	s0, [pc, #304]	; 165f0 <__assert_fail@plt+0x3ffc>
   164bc:	cmp	r3, #0
   164c0:	beq	163d8 <__assert_fail@plt+0x3de4>
   164c4:	vldr	s15, [r3, #28]
   164c8:	vmul.f32	s0, s0, s15
   164cc:	b	163d8 <__assert_fail@plt+0x3de4>
   164d0:	vldr	s0, [pc, #280]	; 165f0 <__assert_fail@plt+0x3ffc>
   164d4:	b	163fc <__assert_fail@plt+0x3e08>
   164d8:	movw	r1, #13812	; 0x35f4
   164dc:	movt	r1, #4
   164e0:	ldr	r3, [pc, #272]	; 165f8 <__assert_fail@plt+0x4004>
   164e4:	movw	r0, #14052	; 0x36e4
   164e8:	movt	r0, #4
   164ec:	movw	r2, #1163	; 0x48b
   164f0:	bl	125f4 <__assert_fail@plt>
   164f4:	movw	r1, #13812	; 0x35f4
   164f8:	movt	r1, #4
   164fc:	ldr	r3, [pc, #244]	; 165f8 <__assert_fail@plt+0x4004>
   16500:	movw	r0, #14040	; 0x36d8
   16504:	movt	r0, #4
   16508:	movw	r2, #1156	; 0x484
   1650c:	bl	125f4 <__assert_fail@plt>
   16510:	movw	r1, #13812	; 0x35f4
   16514:	movt	r1, #4
   16518:	ldr	r3, [pc, #216]	; 165f8 <__assert_fail@plt+0x4004>
   1651c:	movw	r0, #14080	; 0x3700
   16520:	movt	r0, #4
   16524:	movw	r2, #1164	; 0x48c
   16528:	bl	125f4 <__assert_fail@plt>
   1652c:	movw	r1, #13812	; 0x35f4
   16530:	movt	r1, #4
   16534:	ldr	r3, [pc, #188]	; 165f8 <__assert_fail@plt+0x4004>
   16538:	movw	r0, #14128	; 0x3730
   1653c:	movt	r0, #4
   16540:	movw	r2, #1181	; 0x49d
   16544:	bl	125f4 <__assert_fail@plt>
   16548:	movw	r1, #13812	; 0x35f4
   1654c:	movt	r1, #4
   16550:	ldr	r3, [pc, #160]	; 165f8 <__assert_fail@plt+0x4004>
   16554:	movw	r0, #14152	; 0x3748
   16558:	movt	r0, #4
   1655c:	movw	r2, #1180	; 0x49c
   16560:	bl	125f4 <__assert_fail@plt>
   16564:	movw	r1, #13812	; 0x35f4
   16568:	movt	r1, #4
   1656c:	ldr	r3, [pc, #132]	; 165f8 <__assert_fail@plt+0x4004>
   16570:	movw	r0, #14104	; 0x3718
   16574:	movt	r0, #4
   16578:	movw	r2, #1174	; 0x496
   1657c:	bl	125f4 <__assert_fail@plt>
   16580:	movw	r1, #13812	; 0x35f4
   16584:	movt	r1, #4
   16588:	ldr	r3, [pc, #104]	; 165f8 <__assert_fail@plt+0x4004>
   1658c:	movw	r0, #14128	; 0x3730
   16590:	movt	r0, #4
   16594:	movw	r2, #1170	; 0x492
   16598:	bl	125f4 <__assert_fail@plt>
   1659c:	movw	r1, #13812	; 0x35f4
   165a0:	movt	r1, #4
   165a4:	ldr	r3, [pc, #76]	; 165f8 <__assert_fail@plt+0x4004>
   165a8:	movw	r0, #14104	; 0x3718
   165ac:	movt	r0, #4
   165b0:	movw	r2, #1169	; 0x491
   165b4:	bl	125f4 <__assert_fail@plt>
   165b8:	movw	r1, #13812	; 0x35f4
   165bc:	movt	r1, #4
   165c0:	ldr	r3, [pc, #48]	; 165f8 <__assert_fail@plt+0x4004>
   165c4:	movw	r0, #28528	; 0x6f70
   165c8:	movt	r0, #4
   165cc:	movw	r2, #1204	; 0x4b4
   165d0:	bl	125f4 <__assert_fail@plt>
   165d4:	movw	r1, #13812	; 0x35f4
   165d8:	movt	r1, #4
   165dc:	ldr	r3, [pc, #20]	; 165f8 <__assert_fail@plt+0x4004>
   165e0:	movw	r0, #28528	; 0x6f70
   165e4:	movt	r0, #4
   165e8:	mov	r2, #1216	; 0x4c0
   165ec:	bl	125f4 <__assert_fail@plt>
   165f0:	svccc	0x00800000
   165f4:	andeq	r0, r0, r0
   165f8:	andeq	r3, r4, ip, lsr #5
   165fc:	ldr	r3, [r0]
   16600:	str	r4, [sp, #-8]!
   16604:	str	lr, [sp, #4]
   16608:	cmp	r3, #0
   1660c:	beq	166a4 <__assert_fail@plt+0x40b0>
   16610:	cmp	r3, #2
   16614:	beq	166c0 <__assert_fail@plt+0x40cc>
   16618:	mov	r4, r0
   1661c:	mov	r0, #176	; 0xb0
   16620:	bl	2dd04 <__assert_fail@plt+0x1b710>
   16624:	movw	r2, #38256	; 0x9570
   16628:	movt	r2, #5
   1662c:	ldr	r1, [r2, #16]
   16630:	mov	r3, r0
   16634:	mov	lr, #1065353216	; 0x3f800000
   16638:	cmp	r1, #0
   1663c:	ldrne	r1, [r2, #20]
   16640:	streq	r0, [r2, #16]
   16644:	str	r0, [r2, #20]
   16648:	movw	r2, #40556	; 0x9e6c
   1664c:	movt	r2, #5
   16650:	ldrb	ip, [r2, #15]
   16654:	mov	r2, #0
   16658:	strne	r0, [r1, #152]	; 0x98
   1665c:	movw	r1, #14248	; 0x37a8
   16660:	movt	r1, #4
   16664:	movw	r0, #257	; 0x101
   16668:	str	r2, [r3, #8]
   1666c:	str	r4, [r3, #172]	; 0xac
   16670:	str	r1, [r3, #36]	; 0x24
   16674:	mov	r1, #10
   16678:	ldr	r4, [sp]
   1667c:	add	sp, sp, #4
   16680:	str	r2, [r3, #12]
   16684:	strh	r0, [r3, #18]
   16688:	mov	r0, r3
   1668c:	str	r1, [r3, #24]
   16690:	str	lr, [r3, #28]
   16694:	strb	ip, [r3, #32]
   16698:	str	r2, [r3, #164]	; 0xa4
   1669c:	str	r2, [r3, #168]	; 0xa8
   166a0:	pop	{pc}		; (ldr pc, [sp], #4)
   166a4:	movw	r1, #13812	; 0x35f4
   166a8:	movt	r1, #4
   166ac:	ldr	r3, [pc, #40]	; 166dc <__assert_fail@plt+0x40e8>
   166b0:	movw	r0, #14180	; 0x3764
   166b4:	movt	r0, #4
   166b8:	movw	r2, #1485	; 0x5cd
   166bc:	bl	125f4 <__assert_fail@plt>
   166c0:	movw	r1, #13812	; 0x35f4
   166c4:	movt	r1, #4
   166c8:	ldr	r3, [pc, #12]	; 166dc <__assert_fail@plt+0x40e8>
   166cc:	movw	r0, #14208	; 0x3780
   166d0:	movt	r0, #4
   166d4:	movw	r2, #1486	; 0x5ce
   166d8:	bl	125f4 <__assert_fail@plt>
   166dc:	andeq	r3, r4, r4, asr #5
   166e0:	str	r4, [sp, #-8]!
   166e4:	str	lr, [sp, #4]
   166e8:	bl	165fc <__assert_fail@plt+0x4008>
   166ec:	cmp	r0, #0
   166f0:	ldr	r4, [sp]
   166f4:	add	sp, sp, #4
   166f8:	movne	r3, #0
   166fc:	strne	r3, [r0, #36]	; 0x24
   16700:	pop	{pc}		; (ldr pc, [sp], #4)
   16704:	strd	r4, [sp, #-16]!
   16708:	movw	r4, #38256	; 0x9570
   1670c:	movt	r4, #5
   16710:	ldr	r3, [r4, #24]
   16714:	mov	r5, r0
   16718:	str	r6, [sp, #8]
   1671c:	mov	r6, r1
   16720:	str	lr, [sp, #12]
   16724:	cmp	r3, #0
   16728:	beq	167b4 <__assert_fail@plt+0x41c0>
   1672c:	ldr	r2, [r4, #20]
   16730:	cmp	r2, #0
   16734:	beq	16754 <__assert_fail@plt+0x4160>
   16738:	ldr	r4, [r2, #8]
   1673c:	cmp	r4, #1
   16740:	beq	16774 <__assert_fail@plt+0x4180>
   16744:	cmp	r4, #0
   16748:	beq	167ec <__assert_fail@plt+0x41f8>
   1674c:	cmp	r4, #5
   16750:	beq	16774 <__assert_fail@plt+0x4180>
   16754:	mov	r0, r5
   16758:	bl	165fc <__assert_fail@plt+0x4008>
   1675c:	str	r6, [r0, #36]	; 0x24
   16760:	str	r5, [r0, #172]	; 0xac
   16764:	ldrd	r4, [sp]
   16768:	ldr	r6, [sp, #8]
   1676c:	add	sp, sp, #12
   16770:	pop	{pc}		; (ldr pc, [sp], #4)
   16774:	mov	r0, r3
   16778:	bl	165fc <__assert_fail@plt+0x4008>
   1677c:	movw	r1, #14464	; 0x3880
   16780:	movt	r1, #1
   16784:	movw	r2, #13808	; 0x35f0
   16788:	movt	r2, #4
   1678c:	mov	r3, #0
   16790:	stm	r0, {r1, r2}
   16794:	mov	r1, #3
   16798:	str	r1, [r0, #8]
   1679c:	str	r1, [r0, #12]
   167a0:	str	r3, [r0, #16]
   167a4:	strb	r3, [r0, #20]
   167a8:	str	r3, [r0, #36]	; 0x24
   167ac:	str	r3, [r0, #40]	; 0x28
   167b0:	b	16754 <__assert_fail@plt+0x4160>
   167b4:	movw	r0, #14280	; 0x37c8
   167b8:	movt	r0, #4
   167bc:	bl	1f6d8 <__assert_fail@plt+0xd0e4>
   167c0:	cmp	r0, #0
   167c4:	mov	r3, r0
   167c8:	str	r0, [r4, #24]
   167cc:	bne	1672c <__assert_fail@plt+0x4138>
   167d0:	movw	r1, #13812	; 0x35f4
   167d4:	movt	r1, #4
   167d8:	ldr	r3, [pc, #48]	; 16810 <__assert_fail@plt+0x421c>
   167dc:	movw	r0, #14284	; 0x37cc
   167e0:	movt	r0, #4
   167e4:	movw	r2, #1528	; 0x5f8
   167e8:	bl	125f4 <__assert_fail@plt>
   167ec:	mov	r2, #5
   167f0:	movw	r1, #14304	; 0x37e0
   167f4:	movt	r1, #4
   167f8:	mov	r0, r4
   167fc:	bl	120b4 <dcgettext@plt>
   16800:	mov	r2, r0
   16804:	mov	r1, r4
   16808:	mov	r0, #1
   1680c:	bl	121ec <error@plt>
   16810:	ldrdeq	r3, [r4], -r4
   16814:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16818:	strd	r6, [sp, #8]
   1681c:	subs	r7, r1, #0
   16820:	strd	r8, [sp, #16]
   16824:	strd	sl, [sp, #24]
   16828:	str	lr, [sp, #32]
   1682c:	sub	sp, sp, #20
   16830:	beq	16af0 <__assert_fail@plt+0x44fc>
   16834:	movw	sl, #37532	; 0x929c
   16838:	movt	sl, #5
   1683c:	movw	r6, #14372	; 0x3824
   16840:	movt	r6, #4
   16844:	movw	r9, #14364	; 0x381c
   16848:	movt	r9, #4
   1684c:	mov	r4, r0
   16850:	mov	r5, r2
   16854:	add	r8, sl, #472	; 0x1d8
   16858:	cmp	r5, #0
   1685c:	movgt	fp, #0
   16860:	ble	16884 <__assert_fail@plt+0x4290>
   16864:	add	fp, fp, #1
   16868:	mov	r3, r4
   1686c:	mov	r2, #4
   16870:	mov	r1, #1
   16874:	mov	r0, r6
   16878:	bl	12168 <fwrite@plt>
   1687c:	cmp	fp, r5
   16880:	bne	16864 <__assert_fail@plt+0x4270>
   16884:	mov	r3, r4
   16888:	mov	r2, #6
   1688c:	mov	r1, #1
   16890:	mov	r0, r9
   16894:	bl	12168 <fwrite@plt>
   16898:	mov	r0, r4
   1689c:	mov	r1, r7
   168a0:	bl	162e8 <__assert_fail@plt+0x3cf4>
   168a4:	ldrsh	r0, [r7, #8]
   168a8:	cmp	r0, #0
   168ac:	beq	16ba4 <__assert_fail@plt+0x45b0>
   168b0:	ldr	r2, [pc, #832]	; 16bf8 <__assert_fail@plt+0x4604>
   168b4:	mov	r3, #1
   168b8:	mov	r1, #0
   168bc:	b	168c4 <__assert_fail@plt+0x42d0>
   168c0:	ldrsh	r3, [r2, #8]
   168c4:	cmn	r3, #1
   168c8:	cmpne	r0, r3
   168cc:	add	r1, r1, #1
   168d0:	add	r2, r2, #8
   168d4:	bne	168c0 <__assert_fail@plt+0x42cc>
   168d8:	movw	r3, #12936	; 0x3288
   168dc:	movt	r3, #4
   168e0:	add	r1, r3, r1, lsl #3
   168e4:	ldr	r2, [r1, #100]	; 0x64
   168e8:	ldrsh	ip, [r7, #12]
   168ec:	cmp	ip, #0
   168f0:	beq	16b98 <__assert_fail@plt+0x45a4>
   168f4:	ldr	r1, [pc, #768]	; 16bfc <__assert_fail@plt+0x4608>
   168f8:	mov	r3, #1
   168fc:	mov	r0, #0
   16900:	b	16908 <__assert_fail@plt+0x4314>
   16904:	ldrsh	r3, [r1, #8]
   16908:	cmn	r3, #1
   1690c:	cmpne	ip, r3
   16910:	add	r0, r0, #1
   16914:	add	r1, r1, #8
   16918:	bne	16904 <__assert_fail@plt+0x4310>
   1691c:	movw	r3, #12936	; 0x3288
   16920:	movt	r3, #4
   16924:	add	r0, r3, r0, lsl #3
   16928:	ldr	r3, [r0, #156]	; 0x9c
   1692c:	movw	r1, #14380	; 0x382c
   16930:	movt	r1, #4
   16934:	mov	r0, r4
   16938:	bl	1233c <fprintf@plt>
   1693c:	ldr	r1, [r7, #24]
   16940:	mov	r3, #0
   16944:	ldr	r2, [r8, r3, lsl #3]
   16948:	cmp	r1, r2
   1694c:	beq	16b0c <__assert_fail@plt+0x4518>
   16950:	add	r3, r3, #1
   16954:	cmp	r3, #11
   16958:	bne	16944 <__assert_fail@plt+0x4350>
   1695c:	movw	r2, #14352	; 0x3810
   16960:	movt	r2, #4
   16964:	vldr	s14, [r7, #28]
   16968:	movw	ip, #14360	; 0x3818
   1696c:	movt	ip, #4
   16970:	movw	r3, #17776	; 0x4570
   16974:	movt	r3, #4
   16978:	ldrb	lr, [r7, #16]
   1697c:	movw	r1, #14400	; 0x3840
   16980:	movt	r1, #4
   16984:	mov	r0, r4
   16988:	vcvt.f64.f32	d7, s14
   1698c:	cmp	lr, #0
   16990:	moveq	r3, ip
   16994:	vstr	d7, [sp]
   16998:	str	r3, [sp, #8]
   1699c:	bl	1233c <fprintf@plt>
   169a0:	ldrh	r3, [r7, #18]
   169a4:	cmp	r3, #0
   169a8:	bne	169b8 <__assert_fail@plt+0x43c4>
   169ac:	ldrb	r3, [r7, #20]
   169b0:	cmp	r3, #0
   169b4:	beq	16a24 <__assert_fail@plt+0x4430>
   169b8:	mov	r3, r4
   169bc:	movw	r0, #14448	; 0x3870
   169c0:	movt	r0, #4
   169c4:	mov	r2, #6
   169c8:	mov	r1, #1
   169cc:	bl	12168 <fwrite@plt>
   169d0:	ldrb	r3, [r7, #18]
   169d4:	cmp	r3, #0
   169d8:	bne	16b58 <__assert_fail@plt+0x4564>
   169dc:	ldrb	r3, [r7, #20]
   169e0:	cmp	r3, #0
   169e4:	beq	16b40 <__assert_fail@plt+0x454c>
   169e8:	movw	r2, #17776	; 0x4570
   169ec:	movt	r2, #4
   169f0:	movw	r1, #14456	; 0x3878
   169f4:	movt	r1, #4
   169f8:	mov	r0, r4
   169fc:	bl	1233c <fprintf@plt>
   16a00:	ldrb	r3, [r7, #19]
   16a04:	cmp	r3, #0
   16a08:	beq	16a24 <__assert_fail@plt+0x4430>
   16a0c:	movw	r2, #13800	; 0x35e8
   16a10:	movt	r2, #4
   16a14:	movw	r1, #14464	; 0x3880
   16a18:	movt	r1, #4
   16a1c:	mov	r0, r4
   16a20:	bl	1233c <fprintf@plt>
   16a24:	mov	r1, r4
   16a28:	mov	r0, #10
   16a2c:	bl	1248c <fputc@plt>
   16a30:	cmp	r5, #0
   16a34:	movgt	fp, #0
   16a38:	ble	16a5c <__assert_fail@plt+0x4468>
   16a3c:	add	fp, fp, #1
   16a40:	mov	r3, r4
   16a44:	mov	r2, #4
   16a48:	mov	r1, #1
   16a4c:	mov	r0, r6
   16a50:	bl	12168 <fwrite@plt>
   16a54:	cmp	fp, r5
   16a58:	bne	16a3c <__assert_fail@plt+0x4448>
   16a5c:	ldr	r3, [r7, #156]	; 0x9c
   16a60:	cmp	r3, #0
   16a64:	beq	16b18 <__assert_fail@plt+0x4524>
   16a68:	mov	r2, #6
   16a6c:	mov	r1, #1
   16a70:	movw	r0, #14488	; 0x3898
   16a74:	movt	r0, #4
   16a78:	mov	r3, r4
   16a7c:	bl	12168 <fwrite@plt>
   16a80:	add	r2, r5, #1
   16a84:	mov	r0, r4
   16a88:	ldr	r1, [r7, #156]	; 0x9c
   16a8c:	bl	16814 <__assert_fail@plt+0x4220>
   16a90:	cmp	r5, #0
   16a94:	movgt	fp, #0
   16a98:	ble	16abc <__assert_fail@plt+0x44c8>
   16a9c:	add	fp, fp, #1
   16aa0:	mov	r3, r4
   16aa4:	mov	r2, #4
   16aa8:	mov	r1, #1
   16aac:	mov	r0, r6
   16ab0:	bl	12168 <fwrite@plt>
   16ab4:	cmp	fp, r5
   16ab8:	bne	16a9c <__assert_fail@plt+0x44a8>
   16abc:	ldr	r3, [r7, #160]	; 0xa0
   16ac0:	cmp	r3, #0
   16ac4:	beq	16bb0 <__assert_fail@plt+0x45bc>
   16ac8:	mov	r1, #1
   16acc:	movw	r0, #14508	; 0x38ac
   16ad0:	movt	r0, #4
   16ad4:	mov	r3, r4
   16ad8:	mov	r2, #7
   16adc:	add	r5, r5, r1
   16ae0:	bl	12168 <fwrite@plt>
   16ae4:	ldr	r7, [r7, #160]	; 0xa0
   16ae8:	cmp	r7, #0
   16aec:	bne	16858 <__assert_fail@plt+0x4264>
   16af0:	add	sp, sp, #20
   16af4:	ldrd	r4, [sp]
   16af8:	ldrd	r6, [sp, #8]
   16afc:	ldrd	r8, [sp, #16]
   16b00:	ldrd	sl, [sp, #24]
   16b04:	add	sp, sp, #32
   16b08:	pop	{pc}		; (ldr pc, [sp], #4)
   16b0c:	add	r3, sl, r3, lsl #3
   16b10:	ldr	r2, [r3, #476]	; 0x1dc
   16b14:	b	16964 <__assert_fail@plt+0x4370>
   16b18:	ldr	r3, [r7, #160]	; 0xa0
   16b1c:	cmp	r3, #0
   16b20:	beq	16be4 <__assert_fail@plt+0x45f0>
   16b24:	movw	r0, #14496	; 0x38a0
   16b28:	movt	r0, #4
   16b2c:	mov	r3, r4
   16b30:	mov	r2, #9
   16b34:	mov	r1, #1
   16b38:	bl	12168 <fwrite@plt>
   16b3c:	b	16a90 <__assert_fail@plt+0x449c>
   16b40:	ldrb	r3, [r7, #19]
   16b44:	cmp	r3, #0
   16b48:	beq	16a24 <__assert_fail@plt+0x4430>
   16b4c:	movw	r2, #17776	; 0x4570
   16b50:	movt	r2, #4
   16b54:	b	16a14 <__assert_fail@plt+0x4420>
   16b58:	mov	r3, r4
   16b5c:	movw	r0, #10664	; 0x29a8
   16b60:	movt	r0, #4
   16b64:	mov	r2, #4
   16b68:	mov	r1, #1
   16b6c:	bl	12168 <fwrite@plt>
   16b70:	ldrb	r3, [r7, #20]
   16b74:	cmp	r3, #0
   16b78:	bne	16b8c <__assert_fail@plt+0x4598>
   16b7c:	ldrb	r3, [r7, #19]
   16b80:	cmp	r3, #0
   16b84:	beq	16a24 <__assert_fail@plt+0x4430>
   16b88:	b	16a0c <__assert_fail@plt+0x4418>
   16b8c:	movw	r2, #13800	; 0x35e8
   16b90:	movt	r2, #4
   16b94:	b	169f0 <__assert_fail@plt+0x43fc>
   16b98:	movw	r3, #14348	; 0x380c
   16b9c:	movt	r3, #4
   16ba0:	b	1692c <__assert_fail@plt+0x4338>
   16ba4:	movw	r2, #14348	; 0x380c
   16ba8:	movt	r2, #4
   16bac:	b	168e8 <__assert_fail@plt+0x42f4>
   16bb0:	movw	r0, #14516	; 0x38b4
   16bb4:	movt	r0, #4
   16bb8:	mov	r3, r4
   16bbc:	mov	r2, #10
   16bc0:	mov	r1, #1
   16bc4:	add	sp, sp, #20
   16bc8:	ldrd	r4, [sp]
   16bcc:	ldrd	r6, [sp, #8]
   16bd0:	ldrd	r8, [sp, #16]
   16bd4:	ldrd	sl, [sp, #24]
   16bd8:	ldr	lr, [sp, #32]
   16bdc:	add	sp, sp, #36	; 0x24
   16be0:	b	12168 <fwrite@plt>
   16be4:	movw	r0, #14472	; 0x3888
   16be8:	movt	r0, #4
   16bec:	mov	r3, r4
   16bf0:	mov	r2, #13
   16bf4:	b	16bc0 <__assert_fail@plt+0x45cc>
   16bf8:	andeq	r3, r4, r8, ror #5
   16bfc:	andeq	r3, r4, r0, lsr #6
   16c00:	ldr	r3, [r0]
   16c04:	cmp	r3, #0
   16c08:	bxeq	lr
   16c0c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16c10:	strd	r6, [sp, #8]
   16c14:	mov	r7, r1
   16c18:	mov	r6, r0
   16c1c:	strd	r8, [sp, #16]
   16c20:	movw	r8, #40556	; 0x9e6c
   16c24:	movt	r8, #5
   16c28:	ldr	r2, [r8, #44]	; 0x2c
   16c2c:	str	sl, [sp, #24]
   16c30:	str	lr, [sp, #28]
   16c34:	tst	r2, #8
   16c38:	bne	16d50 <__assert_fail@plt+0x475c>
   16c3c:	mov	r0, r3
   16c40:	mov	r5, #0
   16c44:	bl	16320 <__assert_fail@plt+0x3d2c>
   16c48:	ldr	r3, [r6]
   16c4c:	mov	r4, r5
   16c50:	mov	sl, r5
   16c54:	cmp	r3, #0
   16c58:	beq	16ce4 <__assert_fail@plt+0x46f0>
   16c5c:	ldr	r1, [r3, #156]	; 0x9c
   16c60:	cmp	r4, #0
   16c64:	str	r1, [r6]
   16c68:	str	sl, [r3, #156]	; 0x9c
   16c6c:	beq	16cc4 <__assert_fail@plt+0x46d0>
   16c70:	ldr	r0, [r3, #160]	; 0xa0
   16c74:	mov	r2, r4
   16c78:	ldr	r9, [r0, #24]
   16c7c:	ldr	ip, [r2, #160]	; 0xa0
   16c80:	ldr	lr, [ip, #24]
   16c84:	cmp	lr, r9
   16c88:	bne	16d28 <__assert_fail@plt+0x4734>
   16c8c:	vldr	s14, [ip, #28]
   16c90:	vldr	s15, [r0, #28]
   16c94:	ldr	ip, [r2, #12]
   16c98:	vcmp.f32	s14, s15
   16c9c:	vmrs	APSR_nzcv, fpscr
   16ca0:	beq	16d2c <__assert_fail@plt+0x4738>
   16ca4:	cmp	ip, #2
   16ca8:	vcmpe.f32	s14, s15
   16cac:	beq	16d44 <__assert_fail@plt+0x4750>
   16cb0:	vmrs	APSR_nzcv, fpscr
   16cb4:	bpl	16d2c <__assert_fail@plt+0x4738>
   16cb8:	ldr	r2, [r2, #156]	; 0x9c
   16cbc:	cmp	r2, #0
   16cc0:	bne	16c7c <__assert_fail@plt+0x4688>
   16cc4:	cmp	r5, #0
   16cc8:	str	r4, [r3, #156]	; 0x9c
   16ccc:	moveq	r5, r3
   16cd0:	moveq	r4, r5
   16cd4:	movne	r4, r3
   16cd8:	mov	r3, r1
   16cdc:	cmp	r3, #0
   16ce0:	bne	16c5c <__assert_fail@plt+0x4668>
   16ce4:	ldr	r3, [r8, #44]	; 0x2c
   16ce8:	tst	r3, #8
   16cec:	bne	16d88 <__assert_fail@plt+0x4794>
   16cf0:	mov	r0, r4
   16cf4:	bl	16320 <__assert_fail@plt+0x3d2c>
   16cf8:	ldr	r2, [r7]
   16cfc:	mov	r3, #0
   16d00:	ldrd	r8, [sp, #16]
   16d04:	ldr	sl, [sp, #24]
   16d08:	str	r2, [r5, #156]	; 0x9c
   16d0c:	str	r4, [r7]
   16d10:	str	r3, [r6]
   16d14:	str	r3, [r6, #4]
   16d18:	ldrd	r4, [sp]
   16d1c:	ldrd	r6, [sp, #8]
   16d20:	add	sp, sp, #28
   16d24:	pop	{pc}		; (ldr pc, [sp], #4)
   16d28:	bcc	16cb8 <__assert_fail@plt+0x46c4>
   16d2c:	ldr	r0, [r2, #156]	; 0x9c
   16d30:	cmp	r0, #0
   16d34:	str	r0, [r3, #156]	; 0x9c
   16d38:	moveq	r5, r3
   16d3c:	str	r3, [r2, #156]	; 0x9c
   16d40:	b	16cd8 <__assert_fail@plt+0x46e4>
   16d44:	vmrs	APSR_nzcv, fpscr
   16d48:	bmi	16d2c <__assert_fail@plt+0x4738>
   16d4c:	b	16cb8 <__assert_fail@plt+0x46c4>
   16d50:	movw	r4, #38216	; 0x9548
   16d54:	movt	r4, #5
   16d58:	movw	r2, #14528	; 0x38c0
   16d5c:	movt	r2, #4
   16d60:	ldr	r0, [r4]
   16d64:	movw	r1, #14556	; 0x38dc
   16d68:	movt	r1, #4
   16d6c:	bl	1233c <fprintf@plt>
   16d70:	mov	r2, #2
   16d74:	ldr	r0, [r4]
   16d78:	ldr	r1, [r6]
   16d7c:	bl	16814 <__assert_fail@plt+0x4220>
   16d80:	ldr	r3, [r6]
   16d84:	b	16c3c <__assert_fail@plt+0x4648>
   16d88:	movw	r8, #38216	; 0x9548
   16d8c:	movt	r8, #5
   16d90:	movw	r2, #14564	; 0x38e4
   16d94:	movt	r2, #4
   16d98:	ldr	r0, [r8]
   16d9c:	movw	r1, #14556	; 0x38dc
   16da0:	movt	r1, #4
   16da4:	bl	1233c <fprintf@plt>
   16da8:	mov	r2, #2
   16dac:	mov	r1, r4
   16db0:	ldr	r0, [r8]
   16db4:	bl	16814 <__assert_fail@plt+0x4220>
   16db8:	b	16cf0 <__assert_fail@plt+0x46fc>
   16dbc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16dc0:	movw	r5, #38256	; 0x9570
   16dc4:	movt	r5, #5
   16dc8:	strd	r6, [sp, #8]
   16dcc:	mov	r6, r3
   16dd0:	movw	r3, #27648	; 0x6c00
   16dd4:	movt	r3, #1
   16dd8:	mov	r4, r0
   16ddc:	str	r8, [sp, #16]
   16de0:	mov	r0, r1
   16de4:	mov	r8, r2
   16de8:	str	lr, [sp, #20]
   16dec:	mov	r1, r6
   16df0:	str	r3, [r5, #28]
   16df4:	add	r7, r4, #88	; 0x58
   16df8:	bl	16c00 <__assert_fail@plt+0x460c>
   16dfc:	mov	r0, r8
   16e00:	mov	r1, r6
   16e04:	ldr	r3, [r5, #28]
   16e08:	blx	r3
   16e0c:	mov	r0, r4
   16e10:	mov	r1, r6
   16e14:	ldr	r3, [r5, #28]
   16e18:	add	r4, r4, #8
   16e1c:	blx	r3
   16e20:	cmp	r4, r7
   16e24:	bne	16e0c <__assert_fail@plt+0x4818>
   16e28:	ldrd	r4, [sp]
   16e2c:	ldrd	r6, [sp, #8]
   16e30:	ldr	r8, [sp, #16]
   16e34:	add	sp, sp, #20
   16e38:	pop	{pc}		; (ldr pc, [sp], #4)
   16e3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16e40:	mov	r2, #0
   16e44:	ldr	r4, [r0]
   16e48:	strd	r6, [sp, #8]
   16e4c:	strd	r8, [sp, #16]
   16e50:	strd	sl, [sp, #24]
   16e54:	str	lr, [sp, #32]
   16e58:	sub	sp, sp, #108	; 0x6c
   16e5c:	cmp	r4, r2
   16e60:	str	r2, [sp]
   16e64:	str	r2, [sp, #4]
   16e68:	str	r2, [sp, #8]
   16e6c:	str	r2, [sp, #12]
   16e70:	beq	171f0 <__assert_fail@plt+0x4bfc>
   16e74:	mov	r5, r0
   16e78:	add	r3, sp, #16
   16e7c:	add	r1, sp, #104	; 0x68
   16e80:	str	r2, [r3, #4]
   16e84:	str	r2, [r3], #8
   16e88:	cmp	r3, r1
   16e8c:	bne	16e80 <__assert_fail@plt+0x488c>
   16e90:	ldr	r0, [r4, #156]	; 0x9c
   16e94:	cmp	r0, #0
   16e98:	beq	17208 <__assert_fail@plt+0x4c14>
   16e9c:	mov	r2, r4
   16ea0:	b	16eac <__assert_fail@plt+0x48b8>
   16ea4:	mov	r2, r0
   16ea8:	mov	r0, r3
   16eac:	ldr	r3, [r0, #156]	; 0x9c
   16eb0:	ldr	r1, [r2, #12]
   16eb4:	cmp	r3, #0
   16eb8:	bne	16ea4 <__assert_fail@plt+0x48b0>
   16ebc:	add	r2, r2, #156	; 0x9c
   16ec0:	ldr	r3, [r0, #8]
   16ec4:	movw	r8, #40556	; 0x9e6c
   16ec8:	movt	r8, #5
   16ecc:	cmp	r3, #3
   16ed0:	bne	16f34 <__assert_fail@plt+0x4940>
   16ed4:	ldr	r3, [r8, #44]	; 0x2c
   16ed8:	tst	r3, #9
   16edc:	bne	17168 <__assert_fail@plt+0x4b74>
   16ee0:	ldr	r3, [r4, #8]
   16ee4:	cmp	r3, #3
   16ee8:	movne	r6, #0
   16eec:	ldreq	r6, [r4, #12]
   16ef0:	movw	sl, #37532	; 0x929c
   16ef4:	movt	sl, #5
   16ef8:	ldr	r3, [r4, #8]
   16efc:	movw	r9, #17736	; 0x4548
   16f00:	movt	r9, #1
   16f04:	mov	r7, #0
   16f08:	cmp	r3, #3
   16f0c:	beq	16fc0 <__assert_fail@plt+0x49cc>
   16f10:	ldr	fp, [r4, #160]	; 0xa0
   16f14:	ldr	r2, [fp, #8]
   16f18:	cmp	r2, #3
   16f1c:	ldrls	pc, [pc, r2, lsl #2]
   16f20:	b	172b8 <__assert_fail@plt+0x4cc4>
   16f24:	andeq	r7, r1, ip, lsl r0
   16f28:	andeq	r7, r1, ip, lsl r0
   16f2c:	andeq	r6, r1, r4, ror #31
   16f30:	andeq	r6, r1, r8, lsl #31
   16f34:	bl	15e48 <__assert_fail@plt+0x3854>
   16f38:	ldr	r3, [r8, #44]	; 0x2c
   16f3c:	tst	r3, #9
   16f40:	bne	17168 <__assert_fail@plt+0x4b74>
   16f44:	ldr	r4, [r5]
   16f48:	cmp	r4, #0
   16f4c:	bne	16ee0 <__assert_fail@plt+0x48ec>
   16f50:	mov	r7, r4
   16f54:	mov	r3, r5
   16f58:	add	r0, sp, #16
   16f5c:	mov	r2, sp
   16f60:	add	r1, sp, #8
   16f64:	bl	16dbc <__assert_fail@plt+0x47c8>
   16f68:	mov	r0, r7
   16f6c:	add	sp, sp, #108	; 0x6c
   16f70:	ldrd	r4, [sp]
   16f74:	ldrd	r6, [sp, #8]
   16f78:	ldrd	r8, [sp, #16]
   16f7c:	ldrd	sl, [sp, #24]
   16f80:	add	sp, sp, #32
   16f84:	pop	{pc}		; (ldr pc, [sp], #4)
   16f88:	add	r0, r4, #160	; 0xa0
   16f8c:	bl	16e3c <__assert_fail@plt+0x4848>
   16f90:	ldr	r2, [r4, #160]	; 0xa0
   16f94:	strb	r0, [fp, #16]
   16f98:	ldrb	r2, [r2, #16]
   16f9c:	cmp	r2, #0
   16fa0:	bne	17000 <__assert_fail@plt+0x4a0c>
   16fa4:	add	r5, r4, #156	; 0x9c
   16fa8:	ldr	r4, [r5]
   16fac:	cmp	r4, #0
   16fb0:	beq	16f54 <__assert_fail@plt+0x4960>
   16fb4:	ldr	r3, [r4, #8]
   16fb8:	cmp	r3, #3
   16fbc:	bne	16f10 <__assert_fail@plt+0x491c>
   16fc0:	ldr	r3, [r4, #12]
   16fc4:	cmp	r3, r6
   16fc8:	beq	16f10 <__assert_fail@plt+0x491c>
   16fcc:	mov	r0, r4
   16fd0:	mov	r2, r5
   16fd4:	mov	r1, r6
   16fd8:	bl	15e48 <__assert_fail@plt+0x3854>
   16fdc:	mov	r4, r0
   16fe0:	b	16f10 <__assert_fail@plt+0x491c>
   16fe4:	add	r0, fp, #160	; 0xa0
   16fe8:	bl	16e3c <__assert_fail@plt+0x4848>
   16fec:	ldr	r2, [r4, #160]	; 0xa0
   16ff0:	strb	r0, [fp, #16]
   16ff4:	ldrb	r2, [r2, #16]
   16ff8:	cmp	r2, #0
   16ffc:	beq	16fa4 <__assert_fail@plt+0x49b0>
   17000:	mov	r3, r5
   17004:	mov	r2, sp
   17008:	add	r1, sp, #8
   1700c:	add	r0, sp, #16
   17010:	bl	16dbc <__assert_fail@plt+0x47c8>
   17014:	mov	r7, #1
   17018:	b	16fa4 <__assert_fail@plt+0x49b0>
   1701c:	cmp	r6, #1
   17020:	ldrb	r2, [fp, #16]
   17024:	beq	16f9c <__assert_fail@plt+0x49a8>
   17028:	cmp	r2, #0
   1702c:	bne	17000 <__assert_fail@plt+0x4a0c>
   17030:	ldr	r1, [fp]
   17034:	movw	r2, #18552	; 0x4878
   17038:	movt	r2, #1
   1703c:	movw	ip, #17236	; 0x4354
   17040:	movt	ip, #1
   17044:	movw	r0, #17436	; 0x441c
   17048:	movt	r0, #1
   1704c:	cmp	r1, r2
   17050:	cmpne	r1, r9
   17054:	moveq	r2, #1
   17058:	movne	r2, #0
   1705c:	cmp	r1, ip
   17060:	orreq	r2, r2, #1
   17064:	cmp	r1, r0
   17068:	orreq	r2, r2, #1
   1706c:	cmp	r2, #0
   17070:	beq	170a4 <__assert_fail@plt+0x4ab0>
   17074:	ldr	r3, [r8, #44]	; 0x2c
   17078:	tst	r3, #8
   1707c:	bne	171ac <__assert_fail@plt+0x4bb8>
   17080:	ldr	r3, [r4, #156]	; 0x9c
   17084:	str	r3, [r5]
   17088:	ldr	r3, [sp, #8]
   1708c:	str	r4, [sp, #8]
   17090:	ldr	r2, [sp, #12]
   17094:	str	r3, [r4, #156]	; 0x9c
   17098:	cmp	r2, #0
   1709c:	streq	r4, [sp, #12]
   170a0:	b	16fa8 <__assert_fail@plt+0x49b4>
   170a4:	ldrh	r2, [r8, #68]	; 0x44
   170a8:	movw	r0, #17816	; 0x4598
   170ac:	movt	r0, #1
   170b0:	movw	ip, #14464	; 0x3880
   170b4:	movt	ip, #1
   170b8:	cmp	r1, ip
   170bc:	cmpne	r1, r0
   170c0:	movw	lr, #15848	; 0x3de8
   170c4:	movt	lr, #1
   170c8:	moveq	r0, #1
   170cc:	movne	r0, #0
   170d0:	movw	ip, #15444	; 0x3c54
   170d4:	movt	ip, #1
   170d8:	cmp	r2, #0
   170dc:	moveq	r0, #1
   170e0:	cmp	r1, lr
   170e4:	orreq	r0, r0, #1
   170e8:	cmp	r1, ip
   170ec:	orreq	r0, r0, #1
   170f0:	cmp	r0, #0
   170f4:	beq	1719c <__assert_fail@plt+0x4ba8>
   170f8:	movw	r0, #18904	; 0x49d8
   170fc:	movt	r0, #1
   17100:	cmp	r1, r0
   17104:	beq	17218 <__assert_fail@plt+0x4c24>
   17108:	cmp	r2, #1
   1710c:	bls	16fa4 <__assert_fail@plt+0x49b0>
   17110:	ldr	r1, [fp, #24]
   17114:	sub	r0, r1, #1
   17118:	cmp	r0, #1
   1711c:	bls	171f8 <__assert_fail@plt+0x4c04>
   17120:	cmp	r2, #2
   17124:	beq	16fa4 <__assert_fail@plt+0x49b0>
   17128:	ldr	r3, [r8, #44]	; 0x2c
   1712c:	tst	r3, #8
   17130:	bne	1723c <__assert_fail@plt+0x4c48>
   17134:	ldr	r2, [r4, #156]	; 0x9c
   17138:	add	r3, sp, #104	; 0x68
   1713c:	add	r3, r3, r1, lsl #3
   17140:	str	r2, [r5]
   17144:	add	r2, sp, #16
   17148:	ldr	r2, [r2, r1, lsl #3]
   1714c:	str	r2, [r4, #156]	; 0x9c
   17150:	add	r2, sp, #16
   17154:	str	r4, [r2, r1, lsl #3]
   17158:	ldr	r2, [r3, #-84]	; 0xffffffac
   1715c:	cmp	r2, #0
   17160:	streq	r4, [r3, #-84]	; 0xffffffac
   17164:	b	16fa8 <__assert_fail@plt+0x49b4>
   17168:	movw	r4, #38216	; 0x9548
   1716c:	movt	r4, #5
   17170:	mov	r2, #22
   17174:	mov	r1, #1
   17178:	ldr	r3, [r4]
   1717c:	movw	r0, #14592	; 0x3900
   17180:	movt	r0, #4
   17184:	bl	12168 <fwrite@plt>
   17188:	mov	r2, #0
   1718c:	ldr	r0, [r4]
   17190:	ldr	r1, [r5]
   17194:	bl	16814 <__assert_fail@plt+0x4220>
   17198:	b	16f44 <__assert_fail@plt+0x4950>
   1719c:	ldr	r0, [fp, #24]
   171a0:	cmp	r0, #0
   171a4:	bne	170f8 <__assert_fail@plt+0x4b04>
   171a8:	b	17074 <__assert_fail@plt+0x4a80>
   171ac:	movw	fp, #38216	; 0x9548
   171b0:	movt	fp, #5
   171b4:	ldrh	r2, [r8, #68]	; 0x44
   171b8:	movw	r1, #14616	; 0x3918
   171bc:	movt	r1, #4
   171c0:	ldr	r0, [fp]
   171c4:	bl	1233c <fprintf@plt>
   171c8:	ldr	r0, [fp]
   171cc:	ldr	r1, [r4, #160]	; 0xa0
   171d0:	bl	162e8 <__assert_fail@plt+0x3cf4>
   171d4:	movw	r0, #14652	; 0x393c
   171d8:	movt	r0, #4
   171dc:	ldr	r3, [fp]
   171e0:	mov	r2, #16
   171e4:	mov	r1, #1
   171e8:	bl	12168 <fwrite@plt>
   171ec:	b	17080 <__assert_fail@plt+0x4a8c>
   171f0:	mov	r7, r4
   171f4:	b	16f68 <__assert_fail@plt+0x4974>
   171f8:	ldrb	r3, [fp, #18]
   171fc:	cmp	r3, #0
   17200:	beq	17128 <__assert_fail@plt+0x4b34>
   17204:	b	17120 <__assert_fail@plt+0x4b2c>
   17208:	mov	r2, r5
   1720c:	mov	r0, r4
   17210:	mov	r1, #3
   17214:	b	16ec0 <__assert_fail@plt+0x48cc>
   17218:	ldr	r3, [r4, #156]	; 0x9c
   1721c:	str	r3, [r5]
   17220:	ldr	r3, [sp]
   17224:	str	r4, [sp]
   17228:	ldr	r2, [sp, #4]
   1722c:	str	r3, [r4, #156]	; 0x9c
   17230:	cmp	r2, #0
   17234:	streq	r4, [sp, #4]
   17238:	b	16fa8 <__assert_fail@plt+0x49b4>
   1723c:	movw	fp, #38216	; 0x9548
   17240:	movt	fp, #5
   17244:	movw	r1, #14672	; 0x3950
   17248:	movt	r1, #4
   1724c:	ldr	r0, [fp]
   17250:	bl	1233c <fprintf@plt>
   17254:	ldr	r0, [fp]
   17258:	ldr	r1, [r4, #160]	; 0xa0
   1725c:	bl	162e8 <__assert_fail@plt+0x3cf4>
   17260:	ldr	r1, [r4, #160]	; 0xa0
   17264:	mov	r2, #0
   17268:	ldr	r0, [fp]
   1726c:	ldr	r1, [r1, #24]
   17270:	ldr	r3, [pc, #100]	; 172dc <__assert_fail@plt+0x4ce8>
   17274:	ldr	r3, [r3, r2, lsl #3]
   17278:	cmp	r1, r3
   1727c:	beq	172ac <__assert_fail@plt+0x4cb8>
   17280:	add	r2, r2, #1
   17284:	cmp	r2, #11
   17288:	bne	17270 <__assert_fail@plt+0x4c7c>
   1728c:	movw	r2, #14352	; 0x3810
   17290:	movt	r2, #4
   17294:	movw	r1, #14704	; 0x3970
   17298:	movt	r1, #4
   1729c:	bl	1233c <fprintf@plt>
   172a0:	ldr	r3, [r4, #160]	; 0xa0
   172a4:	ldr	r1, [r3, #24]
   172a8:	b	17134 <__assert_fail@plt+0x4b40>
   172ac:	add	r2, sl, r2, lsl #3
   172b0:	ldr	r2, [r2, #476]	; 0x1dc
   172b4:	b	17294 <__assert_fail@plt+0x4ca0>
   172b8:	mov	r2, #5
   172bc:	movw	r1, #13724	; 0x359c
   172c0:	movt	r1, #4
   172c4:	mov	r0, #0
   172c8:	bl	120b4 <dcgettext@plt>
   172cc:	mov	r2, r0
   172d0:	mov	r1, #0
   172d4:	mov	r0, #1
   172d8:	bl	121ec <error@plt>
   172dc:	andeq	r9, r5, r4, ror r4
   172e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   172e4:	subs	r4, r0, #0
   172e8:	strd	r6, [sp, #8]
   172ec:	strd	r8, [sp, #16]
   172f0:	strd	sl, [sp, #24]
   172f4:	str	lr, [sp, #32]
   172f8:	vpush	{d8}
   172fc:	sub	sp, sp, #20
   17300:	beq	17370 <__assert_fail@plt+0x4d7c>
   17304:	movw	r7, #40556	; 0x9e6c
   17308:	movt	r7, #5
   1730c:	movw	r6, #14776	; 0x39b8
   17310:	movt	r6, #4
   17314:	movw	r8, #15444	; 0x3c54
   17318:	movt	r8, #1
   1731c:	movw	r5, #38216	; 0x9548
   17320:	movt	r5, #5
   17324:	movw	r3, #14752	; 0x39a0
   17328:	movt	r3, #4
   1732c:	str	r3, [sp, #12]
   17330:	ldr	r3, [r4, #8]
   17334:	ldr	r1, [r7, #44]	; 0x2c
   17338:	cmp	r3, #3
   1733c:	and	r1, r1, #8
   17340:	beq	173b8 <__assert_fail@plt+0x4dc4>
   17344:	mov	r2, r6
   17348:	cmp	r1, #0
   1734c:	bne	17394 <__assert_fail@plt+0x4da0>
   17350:	ldr	r0, [r4, #156]	; 0x9c
   17354:	bl	172e0 <__assert_fail@plt+0x4cec>
   17358:	cmp	r0, #0
   1735c:	bne	17330 <__assert_fail@plt+0x4d3c>
   17360:	ldr	r0, [r4, #160]	; 0xa0
   17364:	bl	172e0 <__assert_fail@plt+0x4cec>
   17368:	cmp	r0, #0
   1736c:	bne	17324 <__assert_fail@plt+0x4d30>
   17370:	mov	r0, #0
   17374:	add	sp, sp, #20
   17378:	vpop	{d8}
   1737c:	ldrd	r4, [sp]
   17380:	ldrd	r6, [sp, #8]
   17384:	ldrd	r8, [sp, #16]
   17388:	ldrd	sl, [sp, #24]
   1738c:	add	sp, sp, #32
   17390:	pop	{pc}		; (ldr pc, [sp], #4)
   17394:	movw	r1, #15048	; 0x3ac8
   17398:	movt	r1, #4
   1739c:	ldr	r0, [r5]
   173a0:	bl	1233c <fprintf@plt>
   173a4:	mov	r2, #0
   173a8:	mov	r1, r4
   173ac:	ldr	r0, [r5]
   173b0:	bl	16814 <__assert_fail@plt+0x4220>
   173b4:	b	17350 <__assert_fail@plt+0x4d5c>
   173b8:	ldr	r3, [r4, #156]	; 0x9c
   173bc:	cmp	r3, #0
   173c0:	beq	174c8 <__assert_fail@plt+0x4ed4>
   173c4:	ldr	r2, [r4, #160]	; 0xa0
   173c8:	cmp	r2, #0
   173cc:	beq	174c8 <__assert_fail@plt+0x4ed4>
   173d0:	ldr	r2, [r3, #160]	; 0xa0
   173d4:	cmp	r2, #0
   173d8:	beq	1748c <__assert_fail@plt+0x4e98>
   173dc:	movw	sl, #14464	; 0x3880
   173e0:	movt	sl, #1
   173e4:	mov	r0, r2
   173e8:	bl	15b00 <__assert_fail@plt+0x350c>
   173ec:	cmp	r0, #0
   173f0:	beq	17400 <__assert_fail@plt+0x4e0c>
   173f4:	movw	r2, #14800	; 0x39d0
   173f8:	movt	r2, #4
   173fc:	b	17348 <__assert_fail@plt+0x4d54>
   17400:	ldr	fp, [r4, #160]	; 0xa0
   17404:	mov	r0, fp
   17408:	bl	15b00 <__assert_fail@plt+0x350c>
   1740c:	cmp	r0, #0
   17410:	beq	17420 <__assert_fail@plt+0x4e2c>
   17414:	movw	r2, #14868	; 0x3a14
   17418:	movt	r2, #4
   1741c:	b	17348 <__assert_fail@plt+0x4d54>
   17420:	mov	r0, r2
   17424:	bl	161e8 <__assert_fail@plt+0x3bf4>
   17428:	mov	r9, r0
   1742c:	subs	r0, fp, #0
   17430:	beq	17438 <__assert_fail@plt+0x4e44>
   17434:	bl	161e8 <__assert_fail@plt+0x3bf4>
   17438:	cmp	r9, r0
   1743c:	bge	1744c <__assert_fail@plt+0x4e58>
   17440:	movw	r2, #14852	; 0x3a04
   17444:	movt	r2, #4
   17448:	b	17348 <__assert_fail@plt+0x4d54>
   1744c:	beq	17498 <__assert_fail@plt+0x4ea4>
   17450:	cmp	r1, #0
   17454:	bne	174d0 <__assert_fail@plt+0x4edc>
   17458:	ldr	ip, [r4, #8]
   1745c:	ldr	r3, [r4, #156]	; 0x9c
   17460:	ldr	r0, [r4, #160]	; 0xa0
   17464:	cmp	ip, #3
   17468:	ldr	r2, [r3, #160]	; 0xa0
   1746c:	str	r0, [r3, #160]	; 0xa0
   17470:	str	r2, [r4, #160]	; 0xa0
   17474:	bne	17344 <__assert_fail@plt+0x4d50>
   17478:	cmp	r2, #0
   1747c:	beq	174c8 <__assert_fail@plt+0x4ed4>
   17480:	ldr	r2, [r3, #160]	; 0xa0
   17484:	cmp	r2, #0
   17488:	bne	173e4 <__assert_fail@plt+0x4df0>
   1748c:	movw	r2, #14720	; 0x3980
   17490:	movt	r2, #4
   17494:	b	17348 <__assert_fail@plt+0x4d54>
   17498:	cmp	r1, #0
   1749c:	vldr	s17, [r2, #28]
   174a0:	vldr	s16, [fp, #28]
   174a4:	bne	17504 <__assert_fail@plt+0x4f10>
   174a8:	ldr	r3, [r4]
   174ac:	cmp	r3, r8
   174b0:	beq	17538 <__assert_fail@plt+0x4f44>
   174b4:	cmp	r3, sl
   174b8:	beq	17550 <__assert_fail@plt+0x4f5c>
   174bc:	movw	r2, #14832	; 0x39f0
   174c0:	movt	r2, #4
   174c4:	b	17348 <__assert_fail@plt+0x4d54>
   174c8:	ldr	r2, [sp, #12]
   174cc:	b	17348 <__assert_fail@plt+0x4d54>
   174d0:	mov	r2, #24
   174d4:	mov	r1, #1
   174d8:	ldr	r3, [r5]
   174dc:	movw	r0, #15020	; 0x3aac
   174e0:	movt	r0, #4
   174e4:	bl	12168 <fwrite@plt>
   174e8:	mov	r1, r4
   174ec:	mov	r2, #0
   174f0:	ldr	r0, [r5]
   174f4:	bl	16814 <__assert_fail@plt+0x4220>
   174f8:	ldr	r1, [r7, #44]	; 0x2c
   174fc:	and	r1, r1, #8
   17500:	b	17458 <__assert_fail@plt+0x4e64>
   17504:	vcvt.f64.f32	d7, s16
   17508:	vcvt.f64.f32	d6, s17
   1750c:	movw	r1, #14992	; 0x3a90
   17510:	movt	r1, #4
   17514:	ldr	r0, [r5]
   17518:	vmov	r2, r3, d6
   1751c:	vstr	d7, [sp]
   17520:	bl	1233c <fprintf@plt>
   17524:	ldr	r3, [r4]
   17528:	ldr	r1, [r7, #44]	; 0x2c
   1752c:	cmp	r3, r8
   17530:	and	r1, r1, #8
   17534:	bne	174b4 <__assert_fail@plt+0x4ec0>
   17538:	vcmpe.f32	s17, s16
   1753c:	vmrs	APSR_nzcv, fpscr
   17540:	bgt	17450 <__assert_fail@plt+0x4e5c>
   17544:	movw	r2, #14900	; 0x3a34
   17548:	movt	r2, #4
   1754c:	b	17348 <__assert_fail@plt+0x4d54>
   17550:	vcmpe.f32	s17, s16
   17554:	vmrs	APSR_nzcv, fpscr
   17558:	bmi	17450 <__assert_fail@plt+0x4e5c>
   1755c:	movw	r2, #14944	; 0x3a60
   17560:	movt	r2, #4
   17564:	b	17348 <__assert_fail@plt+0x4d54>
   17568:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1756c:	mov	r4, r1
   17570:	add	r1, r1, r2, lsl #2
   17574:	mov	r3, #0
   17578:	strd	r6, [sp, #8]
   1757c:	movw	r6, #38256	; 0x9570
   17580:	movt	r6, #5
   17584:	strd	r8, [sp, #16]
   17588:	cmp	r2, r0
   1758c:	strd	sl, [sp, #24]
   17590:	str	lr, [sp, #32]
   17594:	sub	sp, sp, #36	; 0x24
   17598:	str	r1, [r6, #8]
   1759c:	str	r3, [r6, #16]
   175a0:	str	r0, [sp, #20]
   175a4:	str	r2, [sp, #28]
   175a8:	blt	175d4 <__assert_fail@plt+0x4fe0>
   175ac:	b	175e8 <__assert_fail@plt+0x4ff4>
   175b0:	ldr	r3, [r6, #4]
   175b4:	ldr	r1, [sp, #20]
   175b8:	ldr	r2, [sp, #28]
   175bc:	add	r3, r3, #1
   175c0:	str	r3, [r6, #4]
   175c4:	add	r2, r2, #1
   175c8:	cmp	r2, r1
   175cc:	str	r2, [sp, #28]
   175d0:	bge	175e8 <__assert_fail@plt+0x4ff4>
   175d4:	mov	r1, #1
   175d8:	ldr	r0, [r4, r2, lsl #2]
   175dc:	bl	18b24 <__assert_fail@plt+0x6530>
   175e0:	cmp	r0, #0
   175e4:	beq	175b0 <__assert_fail@plt+0x4fbc>
   175e8:	movw	r5, #15084	; 0x3aec
   175ec:	movt	r5, #4
   175f0:	mov	r0, r5
   175f4:	bl	1f6d8 <__assert_fail@plt+0xd0e4>
   175f8:	mov	r7, r0
   175fc:	movw	r0, #19140	; 0x4ac4
   17600:	movt	r0, #4
   17604:	bl	1f6d8 <__assert_fail@plt+0xd0e4>
   17608:	str	r0, [sp, #16]
   1760c:	movw	r0, #15088	; 0x3af0
   17610:	movt	r0, #4
   17614:	bl	1f6d8 <__assert_fail@plt+0xd0e4>
   17618:	cmp	r7, #0
   1761c:	str	r0, [sp, #12]
   17620:	beq	17ba8 <__assert_fail@plt+0x55b4>
   17624:	ldr	r3, [sp, #16]
   17628:	cmp	r3, #0
   1762c:	beq	17b8c <__assert_fail@plt+0x5598>
   17630:	ldr	r3, [sp, #12]
   17634:	cmp	r3, #0
   17638:	beq	17b70 <__assert_fail@plt+0x557c>
   1763c:	add	r2, sp, #20
   17640:	mov	r1, r4
   17644:	mov	r0, r7
   17648:	bl	1d9ac <__assert_fail@plt+0xb3b8>
   1764c:	ldr	ip, [r6, #16]
   17650:	mov	lr, #1
   17654:	mov	r0, r4
   17658:	ldr	r2, [r6, #20]
   1765c:	ldr	r1, [sp, #20]
   17660:	mov	r3, ip
   17664:	str	r5, [r2, #4]
   17668:	strb	lr, [ip, #33]	; 0x21
   1766c:	bl	1f6c0 <__assert_fail@plt+0xd0cc>
   17670:	ldr	r0, [r6, #20]
   17674:	bl	15110 <__assert_fail@plt+0x2b1c>
   17678:	ldr	r1, [sp, #20]
   1767c:	ldr	r3, [sp, #28]
   17680:	cmp	r3, r1
   17684:	bge	17788 <__assert_fail@plt+0x5194>
   17688:	movw	r8, #40512	; 0x9e40
   1768c:	movt	r8, #5
   17690:	mov	r9, #0
   17694:	b	176d4 <__assert_fail@plt+0x50e0>
   17698:	ldr	r2, [sp, #28]
   1769c:	ldr	r3, [r6, #20]
   176a0:	cmp	r2, fp
   176a4:	moveq	r2, #0
   176a8:	str	r7, [r3, #4]
   176ac:	mov	r0, r3
   176b0:	ldrne	r2, [r4, fp, lsl #2]
   176b4:	str	r2, [r3, #36]	; 0x24
   176b8:	bl	15110 <__assert_fail@plt+0x2b1c>
   176bc:	ldr	r0, [r6, #16]
   176c0:	bl	15110 <__assert_fail@plt+0x2b1c>
   176c4:	ldr	r1, [sp, #20]
   176c8:	ldr	r3, [sp, #28]
   176cc:	cmp	r3, r1
   176d0:	bge	17788 <__assert_fail@plt+0x5194>
   176d4:	mov	r1, #0
   176d8:	ldr	r0, [r4, r3, lsl #2]
   176dc:	strb	r9, [r8, #40]	; 0x28
   176e0:	bl	18b24 <__assert_fail@plt+0x6530>
   176e4:	subs	r5, r0, #0
   176e8:	beq	17aa8 <__assert_fail@plt+0x54b4>
   176ec:	ldr	r3, [sp, #28]
   176f0:	ldr	r7, [r4, r3, lsl #2]
   176f4:	mov	r0, r7
   176f8:	bl	1f6d8 <__assert_fail@plt+0xd0e4>
   176fc:	subs	r5, r0, #0
   17700:	beq	17af0 <__assert_fail@plt+0x54fc>
   17704:	ldr	r3, [r5]
   17708:	add	r2, sp, #28
   1770c:	mov	r1, r4
   17710:	mov	r0, r5
   17714:	ldr	fp, [sp, #28]
   17718:	cmp	r3, #4
   1771c:	ldr	r3, [r5, #8]
   17720:	addne	fp, fp, #1
   17724:	strne	fp, [sp, #28]
   17728:	blx	r3
   1772c:	subs	sl, r0, #0
   17730:	bne	17698 <__assert_fail@plt+0x50a4>
   17734:	ldr	r1, [sp, #28]
   17738:	ldr	r6, [r4, r1, lsl #2]
   1773c:	cmp	r6, #0
   17740:	beq	17b40 <__assert_fail@plt+0x554c>
   17744:	ldr	r2, [r5]
   17748:	cmp	r2, #4
   1774c:	cmpeq	r1, fp
   17750:	moveq	r5, #1
   17754:	movne	r5, #0
   17758:	beq	179e8 <__assert_fail@plt+0x53f4>
   1775c:	mov	r2, #5
   17760:	movw	r1, #15288	; 0x3bb8
   17764:	movt	r1, #4
   17768:	bl	120b4 <dcgettext@plt>
   1776c:	ldr	r3, [sp, #28]
   17770:	mov	r2, r0
   17774:	mov	r1, r5
   17778:	mov	r0, #1
   1777c:	str	r7, [sp]
   17780:	ldr	r3, [r4, r3, lsl #2]
   17784:	bl	121ec <error@plt>
   17788:	mov	r0, r4
   1778c:	ldr	r3, [r6, #16]
   17790:	ldr	r2, [r6, #20]
   17794:	bl	1f6d4 <__assert_fail@plt+0xd0e0>
   17798:	ldr	r2, [r6, #16]
   1779c:	ldr	r3, [r2, #152]	; 0x98
   177a0:	cmp	r3, #0
   177a4:	beq	1797c <__assert_fail@plt+0x5388>
   177a8:	mov	r0, r3
   177ac:	bl	18ae4 <__assert_fail@plt+0x64f0>
   177b0:	cmp	r0, #0
   177b4:	beq	178b8 <__assert_fail@plt+0x52c4>
   177b8:	mov	r1, r4
   177bc:	add	r2, sp, #20
   177c0:	ldr	r0, [sp, #16]
   177c4:	bl	1d760 <__assert_fail@plt+0xb16c>
   177c8:	ldr	r3, [r6, #20]
   177cc:	mov	r5, #1
   177d0:	movw	r2, #19140	; 0x4ac4
   177d4:	movt	r2, #4
   177d8:	mov	r0, r3
   177dc:	str	r2, [r3, #4]
   177e0:	strb	r5, [r3, #33]	; 0x21
   177e4:	bl	15110 <__assert_fail@plt+0x2b1c>
   177e8:	add	r2, sp, #20
   177ec:	mov	r1, r4
   177f0:	ldr	r0, [sp, #12]
   177f4:	bl	1cba4 <__assert_fail@plt+0xa5b0>
   177f8:	ldr	r3, [r6, #20]
   177fc:	movw	r2, #15348	; 0x3bf4
   17800:	movt	r2, #4
   17804:	mov	r0, r3
   17808:	str	r2, [r3, #4]
   1780c:	strb	r5, [r3, #33]	; 0x21
   17810:	bl	15110 <__assert_fail@plt+0x2b1c>
   17814:	ldr	r0, [r6, #16]
   17818:	bl	15110 <__assert_fail@plt+0x2b1c>
   1781c:	movw	r4, #40556	; 0x9e6c
   17820:	movt	r4, #5
   17824:	ldr	r3, [r4, #44]	; 0x2c
   17828:	tst	r3, #9
   1782c:	bne	178dc <__assert_fail@plt+0x52e8>
   17830:	ldr	r0, [r6, #16]
   17834:	bl	1f590 <__assert_fail@plt+0xcf9c>
   17838:	ldr	r0, [r6, #16]
   1783c:	bl	15110 <__assert_fail@plt+0x2b1c>
   17840:	ldr	r3, [r6, #16]
   17844:	mov	r2, #0
   17848:	add	r0, sp, #24
   1784c:	mov	r1, r2
   17850:	str	r3, [sp, #24]
   17854:	bl	15b54 <__assert_fail@plt+0x3560>
   17858:	str	r0, [r6, #12]
   1785c:	bl	16320 <__assert_fail@plt+0x3d2c>
   17860:	ldr	r5, [sp, #24]
   17864:	cmp	r5, #0
   17868:	beq	1790c <__assert_fail@plt+0x5318>
   1786c:	ldr	r2, [r5]
   17870:	movw	r3, #15708	; 0x3d5c
   17874:	movt	r3, #1
   17878:	cmp	r2, r3
   1787c:	beq	17b64 <__assert_fail@plt+0x5570>
   17880:	ldr	r4, [r5, #4]
   17884:	cmp	r4, #0
   17888:	beq	179c4 <__assert_fail@plt+0x53d0>
   1788c:	mov	r2, #5
   17890:	movw	r1, #15376	; 0x3c10
   17894:	movt	r1, #4
   17898:	mov	r0, #0
   1789c:	bl	120b4 <dcgettext@plt>
   178a0:	ldr	r3, [sp, #24]
   178a4:	mov	r2, r0
   178a8:	mov	r1, #0
   178ac:	mov	r0, #1
   178b0:	ldr	r3, [r3, #4]
   178b4:	bl	121ec <error@plt>
   178b8:	ldr	r2, [r6, #16]
   178bc:	ldr	r3, [r2, #152]	; 0x98
   178c0:	str	r2, [sp, #24]
   178c4:	mov	r0, r3
   178c8:	str	r3, [r6, #16]
   178cc:	bl	15110 <__assert_fail@plt+0x2b1c>
   178d0:	ldr	r0, [sp, #24]
   178d4:	bl	2f668 <__assert_fail@plt+0x1d074>
   178d8:	b	1781c <__assert_fail@plt+0x5228>
   178dc:	movw	r5, #38216	; 0x9548
   178e0:	movt	r5, #5
   178e4:	mov	r2, #16
   178e8:	mov	r1, #1
   178ec:	ldr	r3, [r5]
   178f0:	movw	r0, #15356	; 0x3bfc
   178f4:	movt	r0, #4
   178f8:	bl	12168 <fwrite@plt>
   178fc:	ldr	r0, [r5]
   17900:	ldr	r1, [r6, #16]
   17904:	bl	14fb0 <__assert_fail@plt+0x29bc>
   17908:	b	17830 <__assert_fail@plt+0x523c>
   1790c:	ldr	r3, [r4, #44]	; 0x2c
   17910:	tst	r3, #9
   17914:	bne	17a0c <__assert_fail@plt+0x5418>
   17918:	ldr	r0, [r6, #12]
   1791c:	bl	15fd0 <__assert_fail@plt+0x39dc>
   17920:	ldr	r0, [pc, #668]	; 17bc4 <__assert_fail@plt+0x55d0>
   17924:	bl	16e3c <__assert_fail@plt+0x4848>
   17928:	ldr	r5, [r6, #12]
   1792c:	mov	r1, #1
   17930:	mov	r0, r5
   17934:	bl	15f38 <__assert_fail@plt+0x3944>
   17938:	mov	r0, r5
   1793c:	bl	172e0 <__assert_fail@plt+0x4cec>
   17940:	ldr	r5, [r6, #12]
   17944:	mov	r1, #1
   17948:	mov	r0, r5
   1794c:	bl	15f38 <__assert_fail@plt+0x3944>
   17950:	ldr	r3, [r4, #44]	; 0x2c
   17954:	tst	r3, #9
   17958:	bne	17a40 <__assert_fail@plt+0x544c>
   1795c:	mov	r0, r5
   17960:	add	sp, sp, #36	; 0x24
   17964:	ldrd	r4, [sp]
   17968:	ldrd	r6, [sp, #8]
   1796c:	ldrd	r8, [sp, #16]
   17970:	ldrd	sl, [sp, #24]
   17974:	add	sp, sp, #32
   17978:	pop	{pc}		; (ldr pc, [sp], #4)
   1797c:	mov	r0, r2
   17980:	str	r3, [r6, #16]
   17984:	str	r3, [r6, #20]
   17988:	str	r2, [sp, #24]
   1798c:	bl	2f668 <__assert_fail@plt+0x1d074>
   17990:	add	r2, sp, #20
   17994:	mov	r1, r4
   17998:	ldr	r0, [sp, #12]
   1799c:	bl	1cba4 <__assert_fail@plt+0xa5b0>
   179a0:	ldr	r2, [r6, #20]
   179a4:	movw	r3, #15348	; 0x3bf4
   179a8:	movt	r3, #4
   179ac:	mov	r0, r2
   179b0:	str	r3, [r2, #4]
   179b4:	bl	15110 <__assert_fail@plt+0x2b1c>
   179b8:	ldr	r0, [r6, #16]
   179bc:	bl	15110 <__assert_fail@plt+0x2b1c>
   179c0:	b	1781c <__assert_fail@plt+0x5228>
   179c4:	movw	r1, #15408	; 0x3c30
   179c8:	movt	r1, #4
   179cc:	mov	r2, #5
   179d0:	mov	r0, #0
   179d4:	bl	120b4 <dcgettext@plt>
   179d8:	mov	r2, r0
   179dc:	mov	r1, #0
   179e0:	mov	r0, #1
   179e4:	bl	121ec <error@plt>
   179e8:	mov	r2, #5
   179ec:	movw	r1, #15264	; 0x3ba0
   179f0:	movt	r1, #4
   179f4:	bl	120b4 <dcgettext@plt>
   179f8:	mov	r2, r0
   179fc:	mov	r3, r7
   17a00:	mov	r1, sl
   17a04:	mov	r0, #1
   17a08:	bl	121ec <error@plt>
   17a0c:	movw	r7, #38216	; 0x9548
   17a10:	movt	r7, #5
   17a14:	mov	r2, #11
   17a18:	mov	r1, #1
   17a1c:	ldr	r3, [r7]
   17a20:	movw	r0, #15436	; 0x3c4c
   17a24:	movt	r0, #4
   17a28:	bl	12168 <fwrite@plt>
   17a2c:	mov	r2, r5
   17a30:	ldr	r0, [r7]
   17a34:	ldr	r1, [r6, #12]
   17a38:	bl	16814 <__assert_fail@plt+0x4220>
   17a3c:	b	17918 <__assert_fail@plt+0x5324>
   17a40:	movw	r4, #38216	; 0x9548
   17a44:	movt	r4, #5
   17a48:	mov	r2, #21
   17a4c:	mov	r1, #1
   17a50:	ldr	r3, [r4]
   17a54:	movw	r0, #15448	; 0x3c58
   17a58:	movt	r0, #4
   17a5c:	bl	12168 <fwrite@plt>
   17a60:	mov	r2, #0
   17a64:	ldr	r0, [r4]
   17a68:	ldr	r1, [r6, #12]
   17a6c:	bl	16814 <__assert_fail@plt+0x4220>
   17a70:	mov	r2, #24
   17a74:	mov	r1, #1
   17a78:	ldr	r3, [r4]
   17a7c:	movw	r0, #15472	; 0x3c70
   17a80:	movt	r0, #4
   17a84:	bl	12168 <fwrite@plt>
   17a88:	ldr	r0, [r4]
   17a8c:	ldr	r1, [r6, #12]
   17a90:	bl	15088 <__assert_fail@plt+0x2a94>
   17a94:	mov	r0, #10
   17a98:	ldr	r1, [r4]
   17a9c:	bl	1248c <fputc@plt>
   17aa0:	ldr	r5, [r6, #12]
   17aa4:	b	1795c <__assert_fail@plt+0x5368>
   17aa8:	mov	r2, #5
   17aac:	movw	r1, #15156	; 0x3b34
   17ab0:	movt	r1, #4
   17ab4:	bl	120b4 <dcgettext@plt>
   17ab8:	ldr	r3, [sp, #28]
   17abc:	mov	r2, r0
   17ac0:	mov	r1, r5
   17ac4:	mov	r0, r5
   17ac8:	ldr	r3, [r4, r3, lsl #2]
   17acc:	bl	121ec <error@plt>
   17ad0:	ldr	r3, [sp, #28]
   17ad4:	mov	r1, r5
   17ad8:	ldr	r0, [r4, r3, lsl #2]
   17adc:	bl	123f0 <access@plt>
   17ae0:	subs	r4, r0, #0
   17ae4:	beq	17b14 <__assert_fail@plt+0x5520>
   17ae8:	mov	r0, #1
   17aec:	bl	122d0 <exit@plt>
   17af0:	mov	r2, #5
   17af4:	movw	r1, #15240	; 0x3b88
   17af8:	movt	r1, #4
   17afc:	bl	120b4 <dcgettext@plt>
   17b00:	mov	r2, r0
   17b04:	mov	r3, r7
   17b08:	mov	r1, r5
   17b0c:	mov	r0, #1
   17b10:	bl	121ec <error@plt>
   17b14:	mov	r2, #5
   17b18:	movw	r1, #15192	; 0x3b58
   17b1c:	movt	r1, #4
   17b20:	bl	120b4 <dcgettext@plt>
   17b24:	ldr	r3, [r6, #20]
   17b28:	mov	r2, r0
   17b2c:	mov	r1, r4
   17b30:	mov	r0, r4
   17b34:	ldr	r3, [r3, #4]
   17b38:	bl	121ec <error@plt>
   17b3c:	b	17ae8 <__assert_fail@plt+0x54f4>
   17b40:	mov	r2, #5
   17b44:	movw	r1, #15320	; 0x3bd8
   17b48:	movt	r1, #4
   17b4c:	bl	120b4 <dcgettext@plt>
   17b50:	mov	r2, r0
   17b54:	mov	r3, r7
   17b58:	mov	r1, r6
   17b5c:	mov	r0, #1
   17b60:	bl	121ec <error@plt>
   17b64:	movw	r1, #13448	; 0x3488
   17b68:	movt	r1, #4
   17b6c:	b	179cc <__assert_fail@plt+0x53d8>
   17b70:	movw	r1, #13812	; 0x35f4
   17b74:	movt	r1, #4
   17b78:	ldr	r3, [pc, #72]	; 17bc8 <__assert_fail@plt+0x55d4>
   17b7c:	movw	r0, #15136	; 0x3b20
   17b80:	movt	r0, #4
   17b84:	movw	r2, #1272	; 0x4f8
   17b88:	bl	125f4 <__assert_fail@plt>
   17b8c:	movw	r1, #13812	; 0x35f4
   17b90:	movt	r1, #4
   17b94:	ldr	r3, [pc, #44]	; 17bc8 <__assert_fail@plt+0x55d4>
   17b98:	movw	r0, #15116	; 0x3b0c
   17b9c:	movt	r0, #4
   17ba0:	movw	r2, #1271	; 0x4f7
   17ba4:	bl	125f4 <__assert_fail@plt>
   17ba8:	movw	r1, #13812	; 0x35f4
   17bac:	movt	r1, #4
   17bb0:	ldr	r3, [pc, #16]	; 17bc8 <__assert_fail@plt+0x55d4>
   17bb4:	movw	r0, #15096	; 0x3af8
   17bb8:	movt	r0, #4
   17bbc:	movw	r2, #1270	; 0x4f6
   17bc0:	bl	125f4 <__assert_fail@plt>
   17bc4:	andeq	r9, r5, ip, ror r5
   17bc8:	andeq	r3, r4, r8, asr r3
   17bcc:	strd	r4, [sp, #-16]!
   17bd0:	mov	r4, r0
   17bd4:	mov	r5, r1
   17bd8:	str	r6, [sp, #8]
   17bdc:	str	lr, [sp, #12]
   17be0:	ldr	r3, [r4, #156]	; 0x9c
   17be4:	mov	r1, r5
   17be8:	subs	r0, r3, #0
   17bec:	beq	17bf4 <__assert_fail@plt+0x5600>
   17bf0:	bl	17bcc <__assert_fail@plt+0x55d8>
   17bf4:	mov	r0, r4
   17bf8:	blx	r5
   17bfc:	ldr	r4, [r4, #160]	; 0xa0
   17c00:	cmp	r4, #0
   17c04:	bne	17be0 <__assert_fail@plt+0x55ec>
   17c08:	ldrd	r4, [sp]
   17c0c:	ldr	r6, [sp, #8]
   17c10:	add	sp, sp, #12
   17c14:	pop	{pc}		; (ldr pc, [sp], #4)
   17c18:	ldr	r2, [r0]
   17c1c:	movw	r3, #16876	; 0x41ec
   17c20:	movt	r3, #1
   17c24:	push	{lr}		; (str lr, [sp, #-4]!)
   17c28:	movw	lr, #43232	; 0xa8e0
   17c2c:	movt	lr, #1
   17c30:	movw	ip, #16780	; 0x418c
   17c34:	movt	ip, #1
   17c38:	movw	r1, #16928	; 0x4220
   17c3c:	movt	r1, #1
   17c40:	cmp	r2, lr
   17c44:	cmpne	r2, r3
   17c48:	moveq	r3, #1
   17c4c:	movne	r3, #0
   17c50:	cmp	r2, ip
   17c54:	orreq	r3, r3, #1
   17c58:	cmp	r2, r1
   17c5c:	orreq	r3, r3, #1
   17c60:	cmp	r3, #0
   17c64:	movne	r3, #0
   17c68:	strne	r3, [r0, #44]	; 0x2c
   17c6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17c70:	subs	ip, r2, #0
   17c74:	strd	r4, [sp, #-16]!
   17c78:	mov	r5, r0
   17c7c:	str	r6, [sp, #8]
   17c80:	mov	r6, r1
   17c84:	str	lr, [sp, #12]
   17c88:	beq	17cb8 <__assert_fail@plt+0x56c4>
   17c8c:	movw	r4, #40512	; 0x9e40
   17c90:	movt	r4, #5
   17c94:	ldrb	r0, [r4, #40]	; 0x28
   17c98:	cmp	r0, #0
   17c9c:	beq	17d08 <__assert_fail@plt+0x5714>
   17ca0:	mov	r3, #1
   17ca4:	ldr	r6, [sp, #8]
   17ca8:	strb	r3, [r4, #40]	; 0x28
   17cac:	ldrd	r4, [sp]
   17cb0:	add	sp, sp, #12
   17cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   17cb8:	movw	r1, #40556	; 0x9e6c
   17cbc:	movt	r1, #5
   17cc0:	mov	r2, r3
   17cc4:	mov	r0, ip
   17cc8:	ldr	r1, [r1, #72]	; 0x48
   17ccc:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   17cd0:	mov	r3, r0
   17cd4:	mov	r1, r6
   17cd8:	mov	r0, r5
   17cdc:	movw	r2, #28236	; 0x6e4c
   17ce0:	movt	r2, #4
   17ce4:	bl	121ec <error@plt>
   17ce8:	movw	r3, #40512	; 0x9e40
   17cec:	movt	r3, #5
   17cf0:	ldrd	r4, [sp]
   17cf4:	mov	r2, #1
   17cf8:	ldr	r6, [sp, #8]
   17cfc:	add	sp, sp, #12
   17d00:	str	r2, [r3, #28]
   17d04:	pop	{pc}		; (ldr pc, [sp], #4)
   17d08:	movw	r1, #40556	; 0x9e6c
   17d0c:	movt	r1, #5
   17d10:	mov	r2, r3
   17d14:	ldr	r1, [r1, #72]	; 0x48
   17d18:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   17d1c:	mov	r3, r0
   17d20:	mov	r1, r6
   17d24:	mov	r0, r5
   17d28:	movw	r2, #28236	; 0x6e4c
   17d2c:	movt	r2, #4
   17d30:	bl	121ec <error@plt>
   17d34:	mov	r3, #1
   17d38:	str	r3, [r4, #28]
   17d3c:	b	17ca0 <__assert_fail@plt+0x56ac>
   17d40:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17d44:	subs	r4, r0, #0
   17d48:	strd	r6, [sp, #8]
   17d4c:	strd	r8, [sp, #16]
   17d50:	str	sl, [sp, #24]
   17d54:	str	lr, [sp, #28]
   17d58:	beq	17de0 <__assert_fail@plt+0x57ec>
   17d5c:	movw	r7, #40512	; 0x9e40
   17d60:	movt	r7, #5
   17d64:	ldrb	r3, [r7, #32]
   17d68:	cmp	r3, #0
   17d6c:	beq	17e2c <__assert_fail@plt+0x5838>
   17d70:	movw	r6, #16756	; 0x4174
   17d74:	movt	r6, #1
   17d78:	movw	r5, #18444	; 0x480c
   17d7c:	movt	r5, #1
   17d80:	movw	r9, #32332	; 0x7e4c
   17d84:	movt	r9, #1
   17d88:	movw	r8, #38252	; 0x956c
   17d8c:	movt	r8, #5
   17d90:	mov	sl, #0
   17d94:	b	17da4 <__assert_fail@plt+0x57b0>
   17d98:	ldrb	r3, [r7, #32]
   17d9c:	cmp	r3, #0
   17da0:	beq	17e2c <__assert_fail@plt+0x5838>
   17da4:	ldr	r0, [r4, #156]	; 0x9c
   17da8:	bl	17d40 <__assert_fail@plt+0x574c>
   17dac:	ldr	r3, [r4]
   17db0:	cmp	r3, r5
   17db4:	cmpne	r3, r6
   17db8:	bne	17dd4 <__assert_fail@plt+0x57e0>
   17dbc:	ldrb	r3, [r4, #40]	; 0x28
   17dc0:	cmp	r3, #0
   17dc4:	beq	17dd4 <__assert_fail@plt+0x57e0>
   17dc8:	ldr	r3, [r4, #116]	; 0x74
   17dcc:	cmp	r3, #0
   17dd0:	bne	17df8 <__assert_fail@plt+0x5804>
   17dd4:	ldr	r4, [r4, #160]	; 0xa0
   17dd8:	cmp	r4, #0
   17ddc:	bne	17d98 <__assert_fail@plt+0x57a4>
   17de0:	ldrd	r4, [sp]
   17de4:	ldrd	r6, [sp, #8]
   17de8:	ldrd	r8, [sp, #16]
   17dec:	ldr	sl, [sp, #24]
   17df0:	add	sp, sp, #28
   17df4:	pop	{pc}		; (ldr pc, [sp], #4)
   17df8:	add	r2, r4, #40	; 0x28
   17dfc:	mov	r1, r9
   17e00:	ldr	r0, [r4, #144]	; 0x90
   17e04:	bl	204d8 <__assert_fail@plt+0xdee4>
   17e08:	ldr	r3, [r8]
   17e0c:	ldr	r0, [r4, #144]	; 0x90
   17e10:	cmp	r0, r3
   17e14:	beq	17dd4 <__assert_fail@plt+0x57e0>
   17e18:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   17e1c:	ldr	r0, [r4, #144]	; 0x90
   17e20:	bl	2f668 <__assert_fail@plt+0x1d074>
   17e24:	str	sl, [r4, #144]	; 0x90
   17e28:	b	17dd4 <__assert_fail@plt+0x57e0>
   17e2c:	movw	r3, #15720	; 0x3d68
   17e30:	movt	r3, #4
   17e34:	movw	r1, #15940	; 0x3e44
   17e38:	movt	r1, #4
   17e3c:	movw	r0, #15948	; 0x3e4c
   17e40:	movt	r0, #4
   17e44:	mov	r2, #396	; 0x18c
   17e48:	bl	125f4 <__assert_fail@plt>
   17e4c:	add	r1, r0, #48	; 0x30
   17e50:	add	r0, r0, #4
   17e54:	str	r4, [sp, #-8]!
   17e58:	str	lr, [sp, #4]
   17e5c:	bl	1fef4 <__assert_fail@plt+0xd900>
   17e60:	ldr	r4, [sp]
   17e64:	add	sp, sp, #4
   17e68:	mov	r0, #0
   17e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e70:	strd	r4, [sp, #-16]!
   17e74:	subs	r4, r0, #0
   17e78:	str	r6, [sp, #8]
   17e7c:	str	lr, [sp, #12]
   17e80:	beq	17eac <__assert_fail@plt+0x58b8>
   17e84:	movw	r5, #16752	; 0x4170
   17e88:	movt	r5, #1
   17e8c:	ldr	r0, [r4, #156]	; 0x9c
   17e90:	bl	17e70 <__assert_fail@plt+0x587c>
   17e94:	ldr	r3, [r4]
   17e98:	cmp	r3, r5
   17e9c:	beq	17ebc <__assert_fail@plt+0x58c8>
   17ea0:	ldr	r4, [r4, #160]	; 0xa0
   17ea4:	cmp	r4, #0
   17ea8:	bne	17e8c <__assert_fail@plt+0x5898>
   17eac:	ldrd	r4, [sp]
   17eb0:	ldr	r6, [sp, #8]
   17eb4:	add	sp, sp, #12
   17eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   17ebc:	ldrb	r3, [r4, #40]	; 0x28
   17ec0:	cmp	r3, #0
   17ec4:	beq	17ea0 <__assert_fail@plt+0x58ac>
   17ec8:	ldr	r3, [r4, #116]	; 0x74
   17ecc:	cmp	r3, #0
   17ed0:	beq	17ea0 <__assert_fail@plt+0x58ac>
   17ed4:	add	r1, r4, #88	; 0x58
   17ed8:	add	r0, r4, #44	; 0x2c
   17edc:	bl	1fef4 <__assert_fail@plt+0xd900>
   17ee0:	b	17ea0 <__assert_fail@plt+0x58ac>
   17ee4:	movw	r3, #40556	; 0x9e6c
   17ee8:	movt	r3, #5
   17eec:	strd	r4, [sp, #-12]!
   17ef0:	ldr	r3, [r3, #44]	; 0x2c
   17ef4:	mov	r4, r0
   17ef8:	mov	r5, r1
   17efc:	str	lr, [sp, #8]
   17f00:	sub	sp, sp, #12
   17f04:	tst	r3, #2
   17f08:	bne	17f40 <__assert_fail@plt+0x594c>
   17f0c:	mov	ip, #256	; 0x100
   17f10:	movw	r1, #40512	; 0x9e40
   17f14:	movt	r1, #5
   17f18:	mov	r3, r5
   17f1c:	str	ip, [sp]
   17f20:	mov	r2, r4
   17f24:	mov	r0, #3
   17f28:	ldr	r1, [r1, #16]
   17f2c:	bl	1212c <__fxstatat64@plt>
   17f30:	add	sp, sp, #12
   17f34:	ldrd	r4, [sp]
   17f38:	add	sp, sp, #8
   17f3c:	pop	{pc}		; (ldr pc, [sp], #4)
   17f40:	movw	r3, #38216	; 0x9548
   17f44:	movt	r3, #5
   17f48:	mov	r2, r0
   17f4c:	movw	r1, #15976	; 0x3e68
   17f50:	movt	r1, #4
   17f54:	ldr	r0, [r3]
   17f58:	bl	1233c <fprintf@plt>
   17f5c:	b	17f0c <__assert_fail@plt+0x5918>
   17f60:	strd	r4, [sp, #-16]!
   17f64:	mov	r4, r1
   17f68:	mov	r5, r0
   17f6c:	mov	r1, r2
   17f70:	str	r6, [sp, #8]
   17f74:	str	lr, [sp, #12]
   17f78:	bl	16704 <__assert_fail@plt+0x4110>
   17f7c:	ldr	r1, [r5, #4]
   17f80:	mov	r2, #0
   17f84:	mov	ip, #1
   17f88:	ldr	r6, [sp, #8]
   17f8c:	str	r4, [r0]
   17f90:	ldrd	r4, [sp]
   17f94:	add	sp, sp, #12
   17f98:	stmib	r0, {r1, ip}
   17f9c:	str	r2, [r0, #12]
   17fa0:	str	r2, [r0, #40]	; 0x28
   17fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   17fa8:	strd	r4, [sp, #-16]!
   17fac:	ldr	r4, [r0, #12]
   17fb0:	str	r6, [sp, #8]
   17fb4:	str	lr, [sp, #12]
   17fb8:	cmp	r4, #0
   17fbc:	beq	17ff4 <__assert_fail@plt+0x5a00>
   17fc0:	mov	r5, r0
   17fc4:	bl	16704 <__assert_fail@plt+0x4110>
   17fc8:	ldr	r1, [r5, #4]
   17fcc:	mov	r2, #0
   17fd0:	mov	ip, #1
   17fd4:	ldr	r6, [sp, #8]
   17fd8:	str	r4, [r0]
   17fdc:	ldrd	r4, [sp]
   17fe0:	add	sp, sp, #12
   17fe4:	stmib	r0, {r1, ip}
   17fe8:	str	r2, [r0, #12]
   17fec:	str	r2, [r0, #40]	; 0x28
   17ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ff4:	movw	r1, #15940	; 0x3e44
   17ff8:	movt	r1, #4
   17ffc:	ldr	r3, [pc, #12]	; 18010 <__assert_fail@plt+0x5a1c>
   18000:	movw	r0, #16036	; 0x3ea4
   18004:	movt	r0, #4
   18008:	mov	r2, #123	; 0x7b
   1800c:	bl	125f4 <__assert_fail@plt>
   18010:	andeq	r3, r4, r8, lsl #27
   18014:	mov	r1, #0
   18018:	b	17fa8 <__assert_fail@plt+0x59b4>
   1801c:	subs	r4, r0, #0
   18020:	str	r7, [sp, #-8]!
   18024:	str	lr, [sp, #4]
   18028:	beq	1806c <__assert_fail@plt+0x5a78>
   1802c:	movw	r3, #38216	; 0x9548
   18030:	movt	r3, #5
   18034:	ldr	r5, [r3]
   18038:	mov	r2, #5
   1803c:	movw	r1, #16064	; 0x3ec0
   18040:	movt	r1, #4
   18044:	mov	r0, #0
   18048:	bl	120b4 <dcgettext@plt>
   1804c:	movw	r3, #40196	; 0x9d04
   18050:	movt	r3, #5
   18054:	mov	r1, r0
   18058:	ldr	r2, [r3]
   1805c:	mov	r0, r5
   18060:	bl	1233c <fprintf@plt>
   18064:	mov	r0, r4
   18068:	bl	122d0 <exit@plt>
   1806c:	movw	r5, #38228	; 0x9554
   18070:	movt	r5, #5
   18074:	ldr	r7, [pc, #456]	; 18244 <__assert_fail@plt+0x5c50>
   18078:	mov	r2, #5
   1807c:	movw	r1, #16104	; 0x3ee8
   18080:	movt	r1, #4
   18084:	ldr	r6, [r5]
   18088:	movw	r8, #40196	; 0x9d04
   1808c:	movt	r8, #5
   18090:	movw	sl, #17776	; 0x4570
   18094:	movt	sl, #4
   18098:	movw	r9, #17808	; 0x4590
   1809c:	movt	r9, #4
   180a0:	bl	120b4 <dcgettext@plt>
   180a4:	mov	r1, r0
   180a8:	mov	r0, r6
   180ac:	ldr	r2, [r8]
   180b0:	bl	1233c <fprintf@plt>
   180b4:	mov	r2, #5
   180b8:	mov	r0, r4
   180bc:	movw	r1, #16180	; 0x3f34
   180c0:	movt	r1, #4
   180c4:	bl	120b4 <dcgettext@plt>
   180c8:	ldr	r1, [r5]
   180cc:	movw	r6, #17936	; 0x4610
   180d0:	movt	r6, #4
   180d4:	bl	12588 <fputs@plt>
   180d8:	mov	r2, #5
   180dc:	mov	r0, r4
   180e0:	movw	r1, #16320	; 0x3fc0
   180e4:	movt	r1, #4
   180e8:	bl	120b4 <dcgettext@plt>
   180ec:	ldr	r1, [r5]
   180f0:	bl	12588 <fputs@plt>
   180f4:	mov	r2, #5
   180f8:	mov	r0, r4
   180fc:	movw	r1, #16528	; 0x4090
   18100:	movt	r1, #4
   18104:	bl	120b4 <dcgettext@plt>
   18108:	ldr	r1, [r5]
   1810c:	bl	12588 <fputs@plt>
   18110:	mov	r2, #5
   18114:	mov	r0, r4
   18118:	movw	r1, #16616	; 0x40e8
   1811c:	movt	r1, #4
   18120:	bl	120b4 <dcgettext@plt>
   18124:	ldr	r1, [r5]
   18128:	bl	12588 <fputs@plt>
   1812c:	mov	r2, #5
   18130:	mov	r0, r4
   18134:	movw	r1, #16824	; 0x41b8
   18138:	movt	r1, #4
   1813c:	bl	120b4 <dcgettext@plt>
   18140:	ldr	r1, [r5]
   18144:	bl	12588 <fputs@plt>
   18148:	mov	r2, #5
   1814c:	mov	r0, r4
   18150:	movw	r1, #17368	; 0x43d8
   18154:	movt	r1, #4
   18158:	bl	120b4 <dcgettext@plt>
   1815c:	ldr	r1, [r5]
   18160:	bl	12588 <fputs@plt>
   18164:	mov	r2, #5
   18168:	mov	r0, r4
   1816c:	movw	r1, #17624	; 0x44d8
   18170:	movt	r1, #4
   18174:	bl	120b4 <dcgettext@plt>
   18178:	ldr	r1, [r5]
   1817c:	bl	12588 <fputs@plt>
   18180:	mov	r2, #5
   18184:	mov	r0, r4
   18188:	movw	r1, #17648	; 0x44f0
   1818c:	movt	r1, #4
   18190:	bl	120b4 <dcgettext@plt>
   18194:	ldr	r1, [r5]
   18198:	bl	12588 <fputs@plt>
   1819c:	mov	r2, #5
   181a0:	mov	r0, r4
   181a4:	movw	r1, #17708	; 0x452c
   181a8:	movt	r1, #4
   181ac:	bl	120b4 <dcgettext@plt>
   181b0:	ldr	r1, [r5]
   181b4:	bl	12588 <fputs@plt>
   181b8:	mov	r2, #5
   181bc:	mov	r0, r4
   181c0:	movw	r1, #17780	; 0x4574
   181c4:	movt	r1, #4
   181c8:	bl	120b4 <dcgettext@plt>
   181cc:	ldr	r1, [r5]
   181d0:	bl	12588 <fputs@plt>
   181d4:	b	181f0 <__assert_fail@plt+0x5bfc>
   181d8:	mov	r2, r9
   181dc:	mov	r1, r6
   181e0:	bl	1233c <fprintf@plt>
   181e4:	cmp	r4, #9
   181e8:	beq	18214 <__assert_fail@plt+0x5c20>
   181ec:	add	r7, r7, #12
   181f0:	cmp	r4, #0
   181f4:	add	r4, r4, #1
   181f8:	ldr	r0, [r5]
   181fc:	ldr	r3, [r7]
   18200:	bne	181d8 <__assert_fail@plt+0x5be4>
   18204:	mov	r2, sl
   18208:	mov	r1, r6
   1820c:	bl	1233c <fprintf@plt>
   18210:	b	181ec <__assert_fail@plt+0x5bf8>
   18214:	mov	r2, #5
   18218:	movw	r1, #17812	; 0x4594
   1821c:	movt	r1, #4
   18220:	mov	r0, #0
   18224:	bl	120b4 <dcgettext@plt>
   18228:	ldr	r1, [r5]
   1822c:	bl	12588 <fputs@plt>
   18230:	ldr	r0, [r5]
   18234:	ldr	r1, [r8]
   18238:	bl	21e48 <__assert_fail@plt+0xf854>
   1823c:	mov	r0, #0
   18240:	bl	122d0 <exit@plt>
   18244:	muleq	r4, r8, sp
   18248:	bx	lr
   1824c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18250:	movw	r4, #40512	; 0x9e40
   18254:	movt	r4, #5
   18258:	ldrb	r3, [r4, #4]
   1825c:	strd	r6, [sp, #8]
   18260:	strd	r8, [sp, #16]
   18264:	str	sl, [sp, #24]
   18268:	str	lr, [sp, #28]
   1826c:	cmp	r3, #0
   18270:	bne	182f4 <__assert_fail@plt+0x5d00>
   18274:	mov	r8, r1
   18278:	movw	r7, #40556	; 0x9e6c
   1827c:	movt	r7, #5
   18280:	mov	r6, r0
   18284:	mov	r1, r2
   18288:	mov	r0, r8
   1828c:	ldr	r3, [r7, #52]	; 0x34
   18290:	mov	r5, r2
   18294:	blx	r3
   18298:	cmp	r0, #0
   1829c:	bne	18320 <__assert_fail@plt+0x5d2c>
   182a0:	ldr	r6, [r5, #16]
   182a4:	cmp	r6, #0
   182a8:	bne	182f8 <__assert_fail@plt+0x5d04>
   182ac:	mov	r2, #5
   182b0:	movw	r1, #10720	; 0x29e0
   182b4:	movt	r1, #4
   182b8:	bl	120b4 <dcgettext@plt>
   182bc:	mov	r9, r0
   182c0:	mov	r2, r8
   182c4:	ldr	r1, [r7, #72]	; 0x48
   182c8:	mov	r0, r6
   182cc:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   182d0:	mov	r3, r0
   182d4:	mov	r1, r6
   182d8:	mov	r0, r6
   182dc:	mov	r2, r9
   182e0:	bl	121ec <error@plt>
   182e4:	mov	r3, #1
   182e8:	ldr	r6, [r5, #16]
   182ec:	str	r3, [r4, #28]
   182f0:	b	182f8 <__assert_fail@plt+0x5d04>
   182f4:	ldr	r6, [r2, #16]
   182f8:	movw	r3, #257	; 0x101
   182fc:	mov	r0, #0
   18300:	strh	r3, [r4, #4]
   18304:	str	r6, [r4, #8]
   18308:	ldrd	r4, [sp]
   1830c:	ldrd	r6, [sp, #8]
   18310:	ldrd	r8, [sp, #16]
   18314:	ldr	sl, [sp, #24]
   18318:	add	sp, sp, #28
   1831c:	pop	{pc}		; (ldr pc, [sp], #4)
   18320:	ldrb	r4, [r7, #14]
   18324:	bl	12348 <__errno_location@plt>
   18328:	ldr	r1, [r0]
   1832c:	cmp	r4, #0
   18330:	beq	18340 <__assert_fail@plt+0x5d4c>
   18334:	cmp	r1, #2
   18338:	mvneq	r0, #0
   1833c:	beq	18308 <__assert_fail@plt+0x5d14>
   18340:	mov	r0, #0
   18344:	mov	r3, r6
   18348:	mov	r2, #1
   1834c:	bl	17c70 <__assert_fail@plt+0x567c>
   18350:	mvn	r0, #0
   18354:	b	18308 <__assert_fail@plt+0x5d14>
   18358:	push	{lr}		; (str lr, [sp, #-4]!)
   1835c:	vpush	{d8}
   18360:	sub	sp, sp, #396	; 0x18c
   18364:	mov	r0, sp
   18368:	bl	1209c <uname@plt>
   1836c:	subs	r1, r0, #0
   18370:	bne	183b0 <__assert_fail@plt+0x5dbc>
   18374:	add	r0, sp, #130	; 0x82
   18378:	bl	123b4 <strtod@plt>
   1837c:	movw	r0, #17880	; 0x45d8
   18380:	movt	r0, #4
   18384:	vcvt.f32.f64	s16, d0
   18388:	mov	r1, sp
   1838c:	bl	11f40 <strcmp@plt>
   18390:	cmp	r0, #0
   18394:	beq	183c0 <__assert_fail@plt+0x5dcc>
   18398:	mov	r1, sp
   1839c:	movw	r0, #17888	; 0x45e0
   183a0:	movt	r0, #4
   183a4:	bl	11f40 <strcmp@plt>
   183a8:	cmp	r0, #0
   183ac:	beq	183e0 <__assert_fail@plt+0x5dec>
   183b0:	mov	r0, #1
   183b4:	add	sp, sp, #396	; 0x18c
   183b8:	vpop	{d8}
   183bc:	pop	{pc}		; (ldr pc, [sp], #4)
   183c0:	vldr	s15, [pc, #56]	; 18400 <__assert_fail@plt+0x5e0c>
   183c4:	vcmpe.f32	s16, s15
   183c8:	vmrs	APSR_nzcv, fpscr
   183cc:	movge	r0, #1
   183d0:	movlt	r0, #0
   183d4:	add	sp, sp, #396	; 0x18c
   183d8:	vpop	{d8}
   183dc:	pop	{pc}		; (ldr pc, [sp], #4)
   183e0:	vldr	s15, [pc, #28]	; 18404 <__assert_fail@plt+0x5e10>
   183e4:	vcmpe.f32	s16, s15
   183e8:	vmrs	APSR_nzcv, fpscr
   183ec:	movge	r0, #1
   183f0:	movlt	r0, #0
   183f4:	add	sp, sp, #396	; 0x18c
   183f8:	vpop	{d8}
   183fc:	pop	{pc}		; (ldr pc, [sp], #4)
   18400:	andmi	ip, ip, sp, asr #25
   18404:	submi	r6, r6, r6, ror #12
   18408:	str	r4, [sp, #-8]!
   1840c:	movw	r4, #40512	; 0x9e40
   18410:	movt	r4, #5
   18414:	ldrb	r3, [r4, #32]
   18418:	str	lr, [sp, #4]
   1841c:	cmp	r3, #0
   18420:	bne	18430 <__assert_fail@plt+0x5e3c>
   18424:	ldr	r4, [sp]
   18428:	add	sp, sp, #4
   1842c:	pop	{pc}		; (ldr pc, [sp], #4)
   18430:	bl	16310 <__assert_fail@plt+0x3d1c>
   18434:	bl	17d40 <__assert_fail@plt+0x574c>
   18438:	mov	r3, #0
   1843c:	strb	r3, [r4, #32]
   18440:	ldr	r4, [sp]
   18444:	add	sp, sp, #4
   18448:	pop	{pc}		; (ldr pc, [sp], #4)
   1844c:	mov	r0, #8
   18450:	strd	r4, [sp, #-12]!
   18454:	movw	r4, #38252	; 0x956c
   18458:	movt	r4, #5
   1845c:	str	lr, [sp, #8]
   18460:	sub	sp, sp, #12
   18464:	bl	2da2c <__assert_fail@plt+0x1b438>
   18468:	str	r0, [r4]
   1846c:	bl	2cc2c <__assert_fail@plt+0x1a638>
   18470:	cmp	r0, #0
   18474:	bne	18488 <__assert_fail@plt+0x5e94>
   18478:	add	sp, sp, #12
   1847c:	ldrd	r4, [sp]
   18480:	add	sp, sp, #8
   18484:	pop	{pc}		; (ldr pc, [sp], #4)
   18488:	bl	12348 <__errno_location@plt>
   1848c:	mov	r2, #5
   18490:	movw	r1, #17896	; 0x45e8
   18494:	movt	r1, #4
   18498:	ldr	r5, [r0]
   1849c:	mov	r0, #0
   184a0:	bl	120b4 <dcgettext@plt>
   184a4:	ldr	r3, [r4]
   184a8:	mov	r2, r0
   184ac:	ldr	r1, [r3]
   184b0:	cmp	r1, #0
   184b4:	blt	184d4 <__assert_fail@plt+0x5ee0>
   184b8:	movw	r3, #17776	; 0x4570
   184bc:	movt	r3, #4
   184c0:	mov	r1, r3
   184c4:	mov	r0, #1
   184c8:	str	r1, [sp]
   184cc:	mov	r1, r5
   184d0:	bl	121ec <error@plt>
   184d4:	ldr	r1, [r3, #4]
   184d8:	cmp	r1, #0
   184dc:	movwne	r3, #21960	; 0x55c8
   184e0:	movtne	r3, #4
   184e4:	bne	184c4 <__assert_fail@plt+0x5ed0>
   184e8:	b	184b8 <__assert_fail@plt+0x5ec4>
   184ec:	strd	r4, [sp, #-12]!
   184f0:	str	lr, [sp, #8]
   184f4:	sub	sp, sp, #12
   184f8:	bl	16310 <__assert_fail@plt+0x3d1c>
   184fc:	subs	r5, r0, #0
   18500:	beq	1859c <__assert_fail@plt+0x5fa8>
   18504:	movw	r1, #32368	; 0x7e70
   18508:	movt	r1, #1
   1850c:	movw	r4, #40512	; 0x9e40
   18510:	movt	r4, #5
   18514:	bl	17bcc <__assert_fail@plt+0x55d8>
   18518:	ldrb	r3, [r4, #32]
   1851c:	cmp	r3, #0
   18520:	bne	185e8 <__assert_fail@plt+0x5ff4>
   18524:	ldr	r0, [r4, #36]	; 0x24
   18528:	bl	194f4 <__assert_fail@plt+0x6f00>
   1852c:	movw	r1, #31768	; 0x7c18
   18530:	movt	r1, #1
   18534:	mov	r0, r5
   18538:	bl	17bcc <__assert_fail@plt+0x55d8>
   1853c:	movw	r4, #38252	; 0x956c
   18540:	movt	r4, #5
   18544:	ldr	r0, [r4]
   18548:	bl	2cca0 <__assert_fail@plt+0x1a6ac>
   1854c:	subs	r5, r0, #0
   18550:	bne	185fc <__assert_fail@plt+0x6008>
   18554:	ldr	r0, [r4]
   18558:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   1855c:	ldr	r0, [r4]
   18560:	bl	2f668 <__assert_fail@plt+0x1d074>
   18564:	str	r5, [r4]
   18568:	bl	20d18 <__assert_fail@plt+0xe724>
   1856c:	cmp	r0, #0
   18570:	bne	185b0 <__assert_fail@plt+0x5fbc>
   18574:	movw	r3, #38228	; 0x9554
   18578:	movt	r3, #5
   1857c:	ldr	r0, [r3]
   18580:	bl	2f608 <__assert_fail@plt+0x1d014>
   18584:	cmn	r0, #1
   18588:	beq	185bc <__assert_fail@plt+0x5fc8>
   1858c:	add	sp, sp, #12
   18590:	ldrd	r4, [sp]
   18594:	add	sp, sp, #8
   18598:	pop	{pc}		; (ldr pc, [sp], #4)
   1859c:	movw	r3, #40512	; 0x9e40
   185a0:	movt	r3, #5
   185a4:	ldr	r0, [r3, #36]	; 0x24
   185a8:	bl	194f4 <__assert_fail@plt+0x6f00>
   185ac:	b	1853c <__assert_fail@plt+0x5f48>
   185b0:	bl	20d40 <__assert_fail@plt+0xe74c>
   185b4:	bl	20ce8 <__assert_fail@plt+0xe6f4>
   185b8:	b	18574 <__assert_fail@plt+0x5f80>
   185bc:	bl	12348 <__errno_location@plt>
   185c0:	ldr	r1, [r0]
   185c4:	mov	r2, #0
   185c8:	movw	r3, #17992	; 0x4648
   185cc:	movt	r3, #4
   185d0:	mov	r0, r2
   185d4:	add	sp, sp, #12
   185d8:	ldrd	r4, [sp]
   185dc:	ldr	lr, [sp, #8]
   185e0:	add	sp, sp, #12
   185e4:	b	17c70 <__assert_fail@plt+0x567c>
   185e8:	bl	16310 <__assert_fail@plt+0x3d1c>
   185ec:	bl	17d40 <__assert_fail@plt+0x574c>
   185f0:	mov	r3, #0
   185f4:	strb	r3, [r4, #32]
   185f8:	b	18524 <__assert_fail@plt+0x5f30>
   185fc:	bl	12348 <__errno_location@plt>
   18600:	mov	r2, #5
   18604:	movw	r1, #17944	; 0x4618
   18608:	movt	r1, #4
   1860c:	ldr	r5, [r0]
   18610:	mov	r0, #0
   18614:	bl	120b4 <dcgettext@plt>
   18618:	ldr	r3, [r4]
   1861c:	mov	r2, r0
   18620:	ldr	r1, [r3]
   18624:	cmp	r1, #0
   18628:	blt	18650 <__assert_fail@plt+0x605c>
   1862c:	movw	r3, #17776	; 0x4570
   18630:	movt	r3, #4
   18634:	mov	r1, r3
   18638:	mov	r0, #0
   1863c:	str	r1, [sp]
   18640:	mov	r1, r5
   18644:	bl	121ec <error@plt>
   18648:	mov	r0, #1
   1864c:	bl	12018 <_exit@plt>
   18650:	ldr	r1, [r3, #4]
   18654:	cmp	r1, #0
   18658:	movwne	r3, #21960	; 0x55c8
   1865c:	movtne	r3, #4
   18660:	bne	18638 <__assert_fail@plt+0x6044>
   18664:	b	1862c <__assert_fail@plt+0x6038>
   18668:	movw	r3, #40512	; 0x9e40
   1866c:	movt	r3, #5
   18670:	strd	r4, [sp, #-16]!
   18674:	ldr	ip, [r3, #16]
   18678:	str	r6, [sp, #8]
   1867c:	str	lr, [sp, #12]
   18680:	sub	sp, sp, #8
   18684:	cmn	ip, #100	; 0x64
   18688:	cmpne	ip, #0
   1868c:	blt	18738 <__assert_fail@plt+0x6144>
   18690:	ldr	r2, [r3]
   18694:	mov	r4, r0
   18698:	mov	r5, r1
   1869c:	cmp	r2, #0
   186a0:	bne	18714 <__assert_fail@plt+0x6120>
   186a4:	mov	r1, ip
   186a8:	mov	r3, r5
   186ac:	str	r2, [sp]
   186b0:	mov	r0, #3
   186b4:	mov	r2, r4
   186b8:	bl	1212c <__fxstatat64@plt>
   186bc:	subs	r6, r0, #0
   186c0:	bne	186dc <__assert_fail@plt+0x60e8>
   186c4:	mov	r0, r6
   186c8:	add	sp, sp, #8
   186cc:	ldrd	r4, [sp]
   186d0:	ldr	r6, [sp, #8]
   186d4:	add	sp, sp, #12
   186d8:	pop	{pc}		; (ldr pc, [sp], #4)
   186dc:	bl	12348 <__errno_location@plt>
   186e0:	ldr	r3, [r0]
   186e4:	cmp	r3, #2
   186e8:	beq	186f4 <__assert_fail@plt+0x6100>
   186ec:	cmp	r3, #20
   186f0:	bne	186c4 <__assert_fail@plt+0x60d0>
   186f4:	mov	r1, r5
   186f8:	mov	r0, r4
   186fc:	add	sp, sp, #8
   18700:	ldrd	r4, [sp]
   18704:	ldr	r6, [sp, #8]
   18708:	ldr	lr, [sp, #12]
   1870c:	add	sp, sp, #16
   18710:	b	17ee4 <__assert_fail@plt+0x58f0>
   18714:	mov	lr, #256	; 0x100
   18718:	mov	r3, r1
   1871c:	mov	r2, r0
   18720:	mov	r1, ip
   18724:	mov	r0, #3
   18728:	str	lr, [sp]
   1872c:	bl	1212c <__fxstatat64@plt>
   18730:	mov	r6, r0
   18734:	b	186c4 <__assert_fail@plt+0x60d0>
   18738:	movw	r1, #15940	; 0x3e44
   1873c:	movt	r1, #4
   18740:	ldr	r3, [pc, #12]	; 18754 <__assert_fail@plt+0x6160>
   18744:	movw	r0, #18008	; 0x4658
   18748:	movt	r0, #4
   1874c:	movw	r2, #605	; 0x25d
   18750:	bl	125f4 <__assert_fail@plt>
   18754:	andeq	r3, r4, r4, lsl #28
   18758:	movw	r3, #40512	; 0x9e40
   1875c:	movt	r3, #5
   18760:	strd	r4, [sp, #-16]!
   18764:	ldr	r3, [r3, #16]
   18768:	str	r6, [sp, #8]
   1876c:	str	lr, [sp, #12]
   18770:	sub	sp, sp, #8
   18774:	cmn	r3, #100	; 0x64
   18778:	cmpne	r3, #0
   1877c:	blt	187fc <__assert_fail@plt+0x6208>
   18780:	mov	r4, r0
   18784:	mov	r0, #0
   18788:	mov	r5, r1
   1878c:	mov	r2, r4
   18790:	mov	r1, r3
   18794:	mov	r3, r5
   18798:	str	r0, [sp]
   1879c:	mov	r0, #3
   187a0:	bl	1212c <__fxstatat64@plt>
   187a4:	subs	r6, r0, #0
   187a8:	bne	187c4 <__assert_fail@plt+0x61d0>
   187ac:	mov	r0, r6
   187b0:	add	sp, sp, #8
   187b4:	ldrd	r4, [sp]
   187b8:	ldr	r6, [sp, #8]
   187bc:	add	sp, sp, #12
   187c0:	pop	{pc}		; (ldr pc, [sp], #4)
   187c4:	bl	12348 <__errno_location@plt>
   187c8:	ldr	r3, [r0]
   187cc:	cmp	r3, #2
   187d0:	beq	187dc <__assert_fail@plt+0x61e8>
   187d4:	cmp	r3, #20
   187d8:	bne	187ac <__assert_fail@plt+0x61b8>
   187dc:	mov	r1, r5
   187e0:	mov	r0, r4
   187e4:	add	sp, sp, #8
   187e8:	ldrd	r4, [sp]
   187ec:	ldr	r6, [sp, #8]
   187f0:	ldr	lr, [sp, #12]
   187f4:	add	sp, sp, #16
   187f8:	b	17ee4 <__assert_fail@plt+0x58f0>
   187fc:	movw	r1, #15940	; 0x3e44
   18800:	movt	r1, #4
   18804:	ldr	r3, [pc, #12]	; 18818 <__assert_fail@plt+0x6224>
   18808:	movw	r0, #18008	; 0x4658
   1880c:	movt	r0, #4
   18810:	mov	r2, #636	; 0x27c
   18814:	bl	125f4 <__assert_fail@plt>
   18818:	andeq	r3, r4, r4, lsl lr
   1881c:	movw	r3, #40512	; 0x9e40
   18820:	movt	r3, #5
   18824:	push	{lr}		; (str lr, [sp, #-4]!)
   18828:	ldr	ip, [r3, #16]
   1882c:	sub	sp, sp, #12
   18830:	cmn	ip, #100	; 0x64
   18834:	cmpne	ip, #0
   18838:	blt	18860 <__assert_fail@plt+0x626c>
   1883c:	mov	lr, #256	; 0x100
   18840:	mov	r3, r1
   18844:	mov	r2, r0
   18848:	mov	r1, ip
   1884c:	mov	r0, #3
   18850:	str	lr, [sp]
   18854:	bl	1212c <__fxstatat64@plt>
   18858:	add	sp, sp, #12
   1885c:	pop	{pc}		; (ldr pc, [sp], #4)
   18860:	movw	r1, #15940	; 0x3e44
   18864:	movt	r1, #4
   18868:	ldr	r3, [pc, #12]	; 1887c <__assert_fail@plt+0x6288>
   1886c:	movw	r0, #18032	; 0x4670
   18870:	movt	r0, #4
   18874:	movw	r2, #653	; 0x28d
   18878:	bl	125f4 <__assert_fail@plt>
   1887c:	andeq	r3, r4, r4, lsr #28
   18880:	movw	r3, #38288	; 0x9590
   18884:	movt	r3, #5
   18888:	strd	r4, [sp, #-16]!
   1888c:	mov	r5, r0
   18890:	movw	r0, #38216	; 0x9548
   18894:	movt	r0, #5
   18898:	ldr	ip, [r3]
   1889c:	mov	r4, r1
   188a0:	mov	r2, r5
   188a4:	movw	r1, #18088	; 0x46a8
   188a8:	movt	r1, #4
   188ac:	ldr	r0, [r0]
   188b0:	str	r6, [sp, #8]
   188b4:	str	lr, [sp, #12]
   188b8:	ldr	lr, [r3, #4]
   188bc:	adds	ip, ip, #1
   188c0:	str	ip, [r3]
   188c4:	adc	lr, lr, #0
   188c8:	str	lr, [r3, #4]
   188cc:	bl	1233c <fprintf@plt>
   188d0:	movw	r3, #40556	; 0x9e6c
   188d4:	movt	r3, #5
   188d8:	ldr	r3, [r3, #48]	; 0x30
   188dc:	cmp	r3, #1
   188e0:	beq	18910 <__assert_fail@plt+0x631c>
   188e4:	cmp	r3, #0
   188e8:	beq	1892c <__assert_fail@plt+0x6338>
   188ec:	cmp	r3, #2
   188f0:	bne	18948 <__assert_fail@plt+0x6354>
   188f4:	mov	r1, r4
   188f8:	mov	r0, r5
   188fc:	ldrd	r4, [sp]
   18900:	ldr	r6, [sp, #8]
   18904:	ldr	lr, [sp, #12]
   18908:	add	sp, sp, #16
   1890c:	b	18668 <__assert_fail@plt+0x6074>
   18910:	mov	r1, r4
   18914:	mov	r0, r5
   18918:	ldrd	r4, [sp]
   1891c:	ldr	r6, [sp, #8]
   18920:	ldr	lr, [sp, #12]
   18924:	add	sp, sp, #16
   18928:	b	18758 <__assert_fail@plt+0x6164>
   1892c:	mov	r1, r4
   18930:	mov	r0, r5
   18934:	ldrd	r4, [sp]
   18938:	ldr	r6, [sp, #8]
   1893c:	ldr	lr, [sp, #12]
   18940:	add	sp, sp, #16
   18944:	b	1881c <__assert_fail@plt+0x6228>
   18948:	movw	r1, #15940	; 0x3e44
   1894c:	movt	r1, #4
   18950:	ldr	r3, [pc, #12]	; 18964 <__assert_fail@plt+0x6370>
   18954:	movw	r0, #28528	; 0x6f70
   18958:	movt	r0, #4
   1895c:	movw	r2, #677	; 0x2a5
   18960:	bl	125f4 <__assert_fail@plt>
   18964:	andeq	r3, r4, r4, lsr lr
   18968:	movw	r3, #40556	; 0x9e6c
   1896c:	movt	r3, #5
   18970:	ldr	r0, [r3, #48]	; 0x30
   18974:	cmp	r0, #1
   18978:	beq	189a0 <__assert_fail@plt+0x63ac>
   1897c:	cmp	r0, #2
   18980:	bne	1899c <__assert_fail@plt+0x63a8>
   18984:	movw	r3, #40512	; 0x9e40
   18988:	movt	r3, #5
   1898c:	ldr	r0, [r3]
   18990:	clz	r0, r0
   18994:	lsr	r0, r0, #5
   18998:	bx	lr
   1899c:	mov	r0, #0
   189a0:	bx	lr
   189a4:	strd	r4, [sp, #-16]!
   189a8:	mov	r4, r0
   189ac:	mov	r5, r3
   189b0:	ldr	ip, [r4]
   189b4:	mov	r0, r1
   189b8:	str	r6, [sp, #8]
   189bc:	str	lr, [sp, #12]
   189c0:	ldrb	lr, [sp, #16]
   189c4:	cmp	ip, #0
   189c8:	beq	18a04 <__assert_fail@plt+0x6410>
   189cc:	and	r3, ip, #61440	; 0xf000
   189d0:	cmp	r3, #40960	; 0xa000
   189d4:	beq	18a30 <__assert_fail@plt+0x643c>
   189d8:	movw	lr, #40512	; 0x9e40
   189dc:	movt	lr, #5
   189e0:	mov	r3, #1
   189e4:	str	ip, [r5, #16]
   189e8:	mov	r0, r3
   189ec:	strb	r3, [lr, #5]
   189f0:	str	ip, [lr, #8]
   189f4:	ldrd	r4, [sp]
   189f8:	ldr	r6, [sp, #8]
   189fc:	add	sp, sp, #12
   18a00:	pop	{pc}		; (ldr pc, [sp], #4)
   18a04:	cmp	lr, #0
   18a08:	beq	18a98 <__assert_fail@plt+0x64a4>
   18a0c:	movw	r3, #40512	; 0x9e40
   18a10:	movt	r3, #5
   18a14:	ldrd	r4, [sp]
   18a18:	mov	r0, lr
   18a1c:	ldr	r6, [sp, #8]
   18a20:	add	sp, sp, #12
   18a24:	strh	ip, [r3, #4]
   18a28:	str	ip, [r3, #8]
   18a2c:	pop	{pc}		; (ldr pc, [sp], #4)
   18a30:	movw	r3, #40556	; 0x9e6c
   18a34:	movt	r3, #5
   18a38:	ldr	r3, [r3, #48]	; 0x30
   18a3c:	cmp	r3, #1
   18a40:	beq	18a60 <__assert_fail@plt+0x646c>
   18a44:	cmp	r3, #2
   18a48:	movw	lr, #40512	; 0x9e40
   18a4c:	movt	lr, #5
   18a50:	bne	189e0 <__assert_fail@plt+0x63ec>
   18a54:	ldr	r3, [lr]
   18a58:	cmp	r3, #0
   18a5c:	bne	189e0 <__assert_fail@plt+0x63ec>
   18a60:	mov	r1, r2
   18a64:	mov	r2, r5
   18a68:	bl	1824c <__assert_fail@plt+0x5c58>
   18a6c:	cmp	r0, #0
   18a70:	bne	18adc <__assert_fail@plt+0x64e8>
   18a74:	ldr	r1, [r5, #16]
   18a78:	mov	r2, #1
   18a7c:	movw	r3, #40512	; 0x9e40
   18a80:	movt	r3, #5
   18a84:	mov	r0, r2
   18a88:	str	r1, [r3, #8]
   18a8c:	str	r1, [r4]
   18a90:	strb	r2, [r3, #5]
   18a94:	b	189f4 <__assert_fail@plt+0x6400>
   18a98:	mov	r1, r2
   18a9c:	mov	r2, r3
   18aa0:	bl	1824c <__assert_fail@plt+0x5c58>
   18aa4:	cmp	r0, #0
   18aa8:	bne	18adc <__assert_fail@plt+0x64e8>
   18aac:	ldr	r2, [r5, #16]
   18ab0:	mov	r1, #1
   18ab4:	movw	r3, #40512	; 0x9e40
   18ab8:	movt	r3, #5
   18abc:	mov	r0, r1
   18ac0:	ldr	r6, [sp, #8]
   18ac4:	str	r2, [r4]
   18ac8:	ldrd	r4, [sp]
   18acc:	add	sp, sp, #12
   18ad0:	strb	r1, [r3, #5]
   18ad4:	str	r2, [r3, #8]
   18ad8:	pop	{pc}		; (ldr pc, [sp], #4)
   18adc:	mov	r0, #0
   18ae0:	b	189f4 <__assert_fail@plt+0x6400>
   18ae4:	subs	r3, r0, #0
   18ae8:	beq	18b14 <__assert_fail@plt+0x6520>
   18aec:	ldrb	r0, [r3, #17]
   18af0:	cmp	r0, #0
   18af4:	beq	18b08 <__assert_fail@plt+0x6514>
   18af8:	b	18b1c <__assert_fail@plt+0x6528>
   18afc:	ldrb	r2, [r3, #17]
   18b00:	cmp	r2, #0
   18b04:	bne	18b20 <__assert_fail@plt+0x652c>
   18b08:	ldr	r3, [r3, #152]	; 0x98
   18b0c:	cmp	r3, #0
   18b10:	bne	18afc <__assert_fail@plt+0x6508>
   18b14:	mov	r0, #1
   18b18:	bx	lr
   18b1c:	mov	r0, #0
   18b20:	bx	lr
   18b24:	ldrb	r3, [r0]
   18b28:	sub	r3, r3, #33	; 0x21
   18b2c:	cmp	r3, #12
   18b30:	ldrls	pc, [pc, r3, lsl #2]
   18b34:	b	18b88 <__assert_fail@plt+0x6594>
   18b38:	muleq	r1, r0, fp
   18b3c:	andeq	r8, r1, r8, lsl #23
   18b40:	andeq	r8, r1, r8, lsl #23
   18b44:	andeq	r8, r1, r8, lsl #23
   18b48:	andeq	r8, r1, r8, lsl #23
   18b4c:	andeq	r8, r1, r8, lsl #23
   18b50:	andeq	r8, r1, r8, lsl #23
   18b54:	muleq	r1, r0, fp
   18b58:	andeq	r8, r1, ip, ror fp
   18b5c:	andeq	r8, r1, r8, lsl #23
   18b60:	andeq	r8, r1, r8, lsl #23
   18b64:	andeq	r8, r1, ip, ror fp
   18b68:	andeq	r8, r1, ip, ror #22
   18b6c:	ldrb	r0, [r0, #1]
   18b70:	adds	r0, r0, #0
   18b74:	movne	r0, #1
   18b78:	bx	lr
   18b7c:	ldrb	r3, [r0, #1]
   18b80:	cmp	r3, #0
   18b84:	beq	18ba0 <__assert_fail@plt+0x65ac>
   18b88:	mov	r0, #0
   18b8c:	bx	lr
   18b90:	ldrb	r0, [r0, #1]
   18b94:	clz	r0, r0
   18b98:	lsr	r0, r0, #5
   18b9c:	bx	lr
   18ba0:	eor	r0, r1, #1
   18ba4:	bx	lr
   18ba8:	cmp	r0, #1
   18bac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18bb0:	strd	r6, [sp, #8]
   18bb4:	strd	r8, [sp, #16]
   18bb8:	strd	sl, [sp, #24]
   18bbc:	str	lr, [sp, #32]
   18bc0:	sub	sp, sp, #36	; 0x24
   18bc4:	ble	18f5c <__assert_fail@plt+0x6968>
   18bc8:	movw	r3, #18188	; 0x470c
   18bcc:	movt	r3, #4
   18bd0:	str	r1, [sp, #4]
   18bd4:	movw	r8, #18108	; 0x46bc
   18bd8:	movt	r8, #4
   18bdc:	str	r0, [sp, #8]
   18be0:	mov	r4, #1
   18be4:	str	r3, [sp, #12]
   18be8:	ldr	r3, [sp, #4]
   18bec:	lsl	r6, r4, #2
   18bf0:	ldr	r0, [sp, #12]
   18bf4:	ldr	r5, [r3, r4, lsl #2]
   18bf8:	mov	r1, r5
   18bfc:	bl	11f40 <strcmp@plt>
   18c00:	cmp	r0, #0
   18c04:	beq	18db0 <__assert_fail@plt+0x67bc>
   18c08:	movw	r0, #18192	; 0x4710
   18c0c:	movt	r0, #4
   18c10:	mov	r1, r5
   18c14:	bl	11f40 <strcmp@plt>
   18c18:	cmp	r0, #0
   18c1c:	beq	18dbc <__assert_fail@plt+0x67c8>
   18c20:	movw	r0, #18196	; 0x4714
   18c24:	movt	r0, #4
   18c28:	mov	r1, r5
   18c2c:	bl	11f40 <strcmp@plt>
   18c30:	cmp	r0, #0
   18c34:	beq	18dc8 <__assert_fail@plt+0x67d4>
   18c38:	movw	r0, #18200	; 0x4718
   18c3c:	movt	r0, #4
   18c40:	mov	r1, r5
   18c44:	bl	11f40 <strcmp@plt>
   18c48:	cmp	r0, #0
   18c4c:	beq	18f54 <__assert_fail@plt+0x6960>
   18c50:	movw	r0, #18204	; 0x471c
   18c54:	movt	r0, #4
   18c58:	mov	r1, r5
   18c5c:	bl	11f40 <strcmp@plt>
   18c60:	subs	r7, r0, #0
   18c64:	bne	18dd0 <__assert_fail@plt+0x67dc>
   18c68:	ldr	r3, [sp, #8]
   18c6c:	add	r4, r4, #1
   18c70:	cmp	r4, r3
   18c74:	bge	18fec <__assert_fail@plt+0x69f8>
   18c78:	ldr	r3, [sp, #4]
   18c7c:	add	r1, sp, #24
   18c80:	str	r7, [sp, #28]
   18c84:	add	r6, r3, r6
   18c88:	mov	r3, #44	; 0x2c
   18c8c:	ldr	r2, [r6, #4]
   18c90:	strh	r3, [sp, #24]
   18c94:	mov	r0, r2
   18c98:	add	r2, sp, #28
   18c9c:	str	r0, [sp, #16]
   18ca0:	bl	121e0 <strtok_r@plt>
   18ca4:	subs	r5, r0, #0
   18ca8:	beq	18f2c <__assert_fail@plt+0x6938>
   18cac:	ldr	r9, [pc, #880]	; 19024 <__assert_fail@plt+0x6a30>
   18cb0:	movw	r7, #40556	; 0x9e6c
   18cb4:	movt	r7, #5
   18cb8:	movw	fp, #18556	; 0x487c
   18cbc:	movt	fp, #4
   18cc0:	str	r4, [sp, #20]
   18cc4:	ldr	r6, [pc, #856]	; 19024 <__assert_fail@plt+0x6a30>
   18cc8:	mov	sl, r9
   18ccc:	mov	r0, r8
   18cd0:	mov	r4, #0
   18cd4:	b	18cdc <__assert_fail@plt+0x66e8>
   18cd8:	ldr	r0, [sl, #-12]
   18cdc:	mov	r1, r5
   18ce0:	bl	11f40 <strcmp@plt>
   18ce4:	cmp	r0, #0
   18ce8:	beq	18d8c <__assert_fail@plt+0x6798>
   18cec:	add	r4, r4, #1
   18cf0:	add	sl, sl, #12
   18cf4:	cmp	r4, #9
   18cf8:	bne	18cd8 <__assert_fail@plt+0x66e4>
   18cfc:	mov	r2, #5
   18d00:	mov	r1, fp
   18d04:	mov	r0, #0
   18d08:	bl	120b4 <dcgettext@plt>
   18d0c:	mov	r5, r0
   18d10:	mov	r0, #0
   18d14:	ldr	r2, [sp, #16]
   18d18:	ldr	r1, [r7, #72]	; 0x48
   18d1c:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   18d20:	mov	r1, #0
   18d24:	mov	r3, r0
   18d28:	mov	r2, r5
   18d2c:	mov	r0, r1
   18d30:	bl	121ec <error@plt>
   18d34:	add	r2, sp, #28
   18d38:	add	r1, sp, #24
   18d3c:	mov	r0, #0
   18d40:	bl	121e0 <strtok_r@plt>
   18d44:	subs	r5, r0, #0
   18d48:	bne	18cc4 <__assert_fail@plt+0x66d0>
   18d4c:	ldr	r3, [r7, #44]	; 0x2c
   18d50:	ldr	r4, [sp, #20]
   18d54:	tst	r3, #16
   18d58:	bne	18ec4 <__assert_fail@plt+0x68d0>
   18d5c:	ldr	r3, [sp, #8]
   18d60:	add	r4, r4, #1
   18d64:	cmp	r3, r4
   18d68:	bgt	18be8 <__assert_fail@plt+0x65f4>
   18d6c:	mov	r0, r4
   18d70:	add	sp, sp, #36	; 0x24
   18d74:	ldrd	r4, [sp]
   18d78:	ldrd	r6, [sp, #8]
   18d7c:	ldrd	r8, [sp, #16]
   18d80:	ldrd	sl, [sp, #24]
   18d84:	add	sp, sp, #32
   18d88:	pop	{pc}		; (ldr pc, [sp], #4)
   18d8c:	add	r3, r4, r4, lsl #1
   18d90:	movw	r2, #15720	; 0x3d68
   18d94:	movt	r2, #4
   18d98:	ldr	r1, [r7, #44]	; 0x2c
   18d9c:	add	r3, r2, r3, lsl #2
   18da0:	ldr	r3, [r3, #52]	; 0x34
   18da4:	orr	r3, r1, r3
   18da8:	str	r3, [r7, #44]	; 0x2c
   18dac:	b	18d34 <__assert_fail@plt+0x6740>
   18db0:	mov	r0, #2
   18db4:	bl	1f624 <__assert_fail@plt+0xd030>
   18db8:	b	18d5c <__assert_fail@plt+0x6768>
   18dbc:	mov	r0, #1
   18dc0:	bl	1f624 <__assert_fail@plt+0xd030>
   18dc4:	b	18d5c <__assert_fail@plt+0x6768>
   18dc8:	bl	1f624 <__assert_fail@plt+0xd030>
   18dcc:	b	18d5c <__assert_fail@plt+0x6768>
   18dd0:	movw	r0, #18296	; 0x4778
   18dd4:	movt	r0, #4
   18dd8:	mov	r2, #2
   18ddc:	mov	r1, r5
   18de0:	bl	12594 <strncmp@plt>
   18de4:	subs	r7, r0, #0
   18de8:	bne	18d6c <__assert_fail@plt+0x6778>
   18dec:	ldrb	r6, [r5, #2]
   18df0:	add	r5, r5, #2
   18df4:	cmp	r6, #0
   18df8:	beq	19014 <__assert_fail@plt+0x6a20>
   18dfc:	bl	122b8 <__ctype_b_loc@plt>
   18e00:	ldr	r3, [r0]
   18e04:	lsl	r6, r6, #1
   18e08:	ldrh	r3, [r3, r6]
   18e0c:	ands	r3, r3, #2048	; 0x800
   18e10:	beq	18fd8 <__assert_fail@plt+0x69e4>
   18e14:	bl	12348 <__errno_location@plt>
   18e18:	mov	r6, r0
   18e1c:	mov	r2, #10
   18e20:	add	r1, sp, #28
   18e24:	mov	r0, r5
   18e28:	ldr	r9, [r6]
   18e2c:	str	r7, [r6]
   18e30:	bl	122f4 <strtoul@plt>
   18e34:	cmp	r0, #0
   18e38:	ldr	r3, [sp, #28]
   18e3c:	bne	18e68 <__assert_fail@plt+0x6874>
   18e40:	cmp	r5, r3
   18e44:	beq	18fb4 <__assert_fail@plt+0x69c0>
   18e48:	ldrb	r3, [r3]
   18e4c:	cmp	r3, #0
   18e50:	bne	18f8c <__assert_fail@plt+0x6998>
   18e54:	movw	r7, #40556	; 0x9e6c
   18e58:	movt	r7, #5
   18e5c:	strh	r0, [r7, #68]	; 0x44
   18e60:	str	r9, [r6]
   18e64:	b	18d5c <__assert_fail@plt+0x6768>
   18e68:	ldrb	r3, [r3]
   18e6c:	cmp	r3, #0
   18e70:	bne	18f8c <__assert_fail@plt+0x6998>
   18e74:	cmn	r0, #1
   18e78:	bne	18eb4 <__assert_fail@plt+0x68c0>
   18e7c:	ldr	r4, [r6]
   18e80:	mov	sl, r0
   18e84:	cmp	r4, #0
   18e88:	bne	18f64 <__assert_fail@plt+0x6970>
   18e8c:	mov	r2, #5
   18e90:	movw	r1, #18452	; 0x4814
   18e94:	movt	r1, #4
   18e98:	mov	r0, #0
   18e9c:	bl	120b4 <dcgettext@plt>
   18ea0:	mov	r2, r0
   18ea4:	mov	r3, sl
   18ea8:	mov	r1, #0
   18eac:	mov	r0, #1
   18eb0:	bl	121ec <error@plt>
   18eb4:	cmp	r0, #65536	; 0x10000
   18eb8:	bcc	18e54 <__assert_fail@plt+0x6860>
   18ebc:	mov	sl, r0
   18ec0:	b	18e8c <__assert_fail@plt+0x6898>
   18ec4:	mov	r2, #5
   18ec8:	movw	r1, #17780	; 0x4574
   18ecc:	movt	r1, #4
   18ed0:	movw	r4, #38228	; 0x9554
   18ed4:	movt	r4, #5
   18ed8:	movw	r5, #18284	; 0x476c
   18edc:	movt	r5, #4
   18ee0:	ldr	r7, [pc, #320]	; 19028 <__assert_fail@plt+0x6a34>
   18ee4:	bl	120b4 <dcgettext@plt>
   18ee8:	ldr	r1, [r4]
   18eec:	bl	12588 <fputs@plt>
   18ef0:	movw	r3, #18116	; 0x46c4
   18ef4:	movt	r3, #4
   18ef8:	movw	r2, #18108	; 0x46bc
   18efc:	movt	r2, #4
   18f00:	b	18f0c <__assert_fail@plt+0x6918>
   18f04:	ldr	r2, [r6, #-12]
   18f08:	ldr	r3, [r6, #-4]
   18f0c:	add	r6, r6, #12
   18f10:	mov	r1, r5
   18f14:	ldr	r0, [r4]
   18f18:	bl	1233c <fprintf@plt>
   18f1c:	cmp	r6, r7
   18f20:	bne	18f04 <__assert_fail@plt+0x6910>
   18f24:	mov	r0, #0
   18f28:	bl	122d0 <exit@plt>
   18f2c:	mov	r2, #5
   18f30:	movw	r1, #18248	; 0x4748
   18f34:	movt	r1, #4
   18f38:	bl	120b4 <dcgettext@plt>
   18f3c:	mov	r2, r0
   18f40:	mov	r1, r5
   18f44:	mov	r0, r5
   18f48:	bl	121ec <error@plt>
   18f4c:	mov	r0, #1
   18f50:	bl	1801c <__assert_fail@plt+0x5a28>
   18f54:	add	r4, r4, #1
   18f58:	b	18d6c <__assert_fail@plt+0x6778>
   18f5c:	mov	r4, #1
   18f60:	b	18d6c <__assert_fail@plt+0x6778>
   18f64:	mov	r2, #5
   18f68:	movw	r1, #18420	; 0x47f4
   18f6c:	movt	r1, #4
   18f70:	mov	r0, #0
   18f74:	bl	120b4 <dcgettext@plt>
   18f78:	mov	r2, r0
   18f7c:	mov	r3, r5
   18f80:	mov	r1, r4
   18f84:	mov	r0, #1
   18f88:	bl	121ec <error@plt>
   18f8c:	mov	r2, #5
   18f90:	movw	r1, #18420	; 0x47f4
   18f94:	movt	r1, #4
   18f98:	mov	r0, #0
   18f9c:	bl	120b4 <dcgettext@plt>
   18fa0:	mov	r2, r0
   18fa4:	mov	r3, r5
   18fa8:	mov	r1, #0
   18fac:	mov	r0, #1
   18fb0:	bl	121ec <error@plt>
   18fb4:	movw	r1, #18364	; 0x47bc
   18fb8:	movt	r1, #4
   18fbc:	mov	r2, #5
   18fc0:	mov	r0, #0
   18fc4:	bl	120b4 <dcgettext@plt>
   18fc8:	mov	r2, r0
   18fcc:	mov	r1, #0
   18fd0:	mov	r0, #1
   18fd4:	bl	121ec <error@plt>
   18fd8:	movw	r1, #18364	; 0x47bc
   18fdc:	movt	r1, #4
   18fe0:	mov	r2, #5
   18fe4:	mov	r0, r3
   18fe8:	b	18fc4 <__assert_fail@plt+0x69d0>
   18fec:	mov	r2, #5
   18ff0:	movw	r1, #18208	; 0x4720
   18ff4:	movt	r1, #4
   18ff8:	bl	120b4 <dcgettext@plt>
   18ffc:	mov	r2, r0
   19000:	mov	r1, r7
   19004:	mov	r0, r7
   19008:	bl	121ec <error@plt>
   1900c:	mov	r0, #1
   19010:	bl	1801c <__assert_fail@plt+0x5a28>
   19014:	movw	r1, #18300	; 0x477c
   19018:	movt	r1, #4
   1901c:	mov	r2, #5
   19020:	b	18fc4 <__assert_fail@plt+0x69d0>
   19024:	andeq	r3, r4, r4, lsr #27
   19028:	andeq	r3, r4, r0, lsl lr
   1902c:	strd	r4, [sp, #-16]!
   19030:	mov	r4, r0
   19034:	movw	r0, #18592	; 0x48a0
   19038:	movt	r0, #4
   1903c:	str	r6, [sp, #8]
   19040:	mov	r5, #0
   19044:	str	lr, [sp, #12]
   19048:	sub	sp, sp, #8
   1904c:	bl	12228 <getenv@plt>
   19050:	subs	r0, r0, r5
   19054:	movne	r0, #1
   19058:	strb	r0, [r4, #17]
   1905c:	bl	18358 <__assert_fail@plt+0x5d64>
   19060:	strb	r0, [r4, #56]	; 0x38
   19064:	mov	r0, r5
   19068:	str	r5, [r4, #60]	; 0x3c
   1906c:	bl	12564 <isatty@plt>
   19070:	cmp	r0, #0
   19074:	strbeq	r0, [r4, #15]
   19078:	strbeq	r0, [r4, #16]
   1907c:	beq	1908c <__assert_fail@plt+0x6a98>
   19080:	mov	r3, #1
   19084:	strb	r5, [r4, #15]
   19088:	strb	r3, [r4, #16]
   1908c:	ldrb	r3, [r4, #17]
   19090:	mov	r2, #1
   19094:	mov	r1, #0
   19098:	mov	r0, sp
   1909c:	strh	r2, [r4]
   190a0:	cmp	r3, #0
   190a4:	movne	r3, #0
   190a8:	strbne	r3, [r4, #16]
   190ac:	mvn	r3, #0
   190b0:	str	r3, [r4, #4]
   190b4:	str	r3, [r4, #8]
   190b8:	bl	121bc <gettimeofday@plt>
   190bc:	cmp	r0, #0
   190c0:	bne	19154 <__assert_fail@plt+0x6b60>
   190c4:	ldm	sp, {r0, r2}
   190c8:	mov	r3, #1000	; 0x3e8
   190cc:	mul	r3, r3, r2
   190d0:	ldrb	ip, [r4, #17]
   190d4:	sub	r2, r0, #86016	; 0x15000
   190d8:	mov	r5, #0
   190dc:	sub	r2, r2, #384	; 0x180
   190e0:	mov	r1, #2
   190e4:	strb	r5, [r4, #13]
   190e8:	strb	r5, [r4, #14]
   190ec:	strd	r2, [r4, #28]
   190f0:	cmp	ip, r5
   190f4:	str	r0, [r4, #20]
   190f8:	movw	r0, #18624	; 0x48c0
   190fc:	movt	r0, #4
   19100:	movne	r2, #512	; 0x200
   19104:	str	r3, [r4, #24]
   19108:	moveq	r2, #1024	; 0x400
   1910c:	strb	r5, [r4, #36]	; 0x24
   19110:	str	r2, [r4, #40]	; 0x28
   19114:	str	r5, [r4, #44]	; 0x2c
   19118:	strh	r1, [r4, #68]	; 0x44
   1911c:	bl	12228 <getenv@plt>
   19120:	subs	r6, r0, #0
   19124:	bne	19184 <__assert_fail@plt+0x6b90>
   19128:	strb	r6, [r4, #12]
   1912c:	bl	1f624 <__assert_fail@plt+0xd030>
   19130:	mov	r3, #8
   19134:	str	r3, [r4, #72]	; 0x48
   19138:	str	r6, [r4, #76]	; 0x4c
   1913c:	strb	r6, [r4, #80]	; 0x50
   19140:	add	sp, sp, #8
   19144:	ldrd	r4, [sp]
   19148:	ldr	r6, [sp, #8]
   1914c:	add	sp, sp, #12
   19150:	pop	{pc}		; (ldr pc, [sp], #4)
   19154:	mov	r0, #0
   19158:	bl	12078 <time@plt>
   1915c:	cmn	r0, #1
   19160:	movne	r3, #0
   19164:	bne	190d0 <__assert_fail@plt+0x6adc>
   19168:	movw	r1, #15940	; 0x3e44
   1916c:	movt	r1, #4
   19170:	ldr	r3, [pc, #48]	; 191a8 <__assert_fail@plt+0x6bb4>
   19174:	movw	r0, #18608	; 0x48b0
   19178:	movt	r0, #4
   1917c:	movw	r2, #978	; 0x3d2
   19180:	bl	125f4 <__assert_fail@plt>
   19184:	mov	r2, #5
   19188:	movw	r1, #18640	; 0x48d0
   1918c:	movt	r1, #4
   19190:	mov	r0, r5
   19194:	bl	120b4 <dcgettext@plt>
   19198:	mov	r2, r0
   1919c:	mov	r1, r5
   191a0:	mov	r0, #1
   191a4:	bl	121ec <error@plt>
   191a8:	andeq	r3, r4, r0, asr #28
   191ac:	ldr	r3, [r2, #164]	; 0xa4
   191b0:	strd	r4, [sp, #-16]!
   191b4:	mov	r4, r2
   191b8:	mov	r5, r1
   191bc:	ldrh	r2, [r2, #18]
   191c0:	str	r6, [sp, #8]
   191c4:	mov	r6, r0
   191c8:	str	lr, [sp, #12]
   191cc:	add	r3, r3, #1
   191d0:	cmp	r2, #0
   191d4:	str	r3, [r4, #164]	; 0xa4
   191d8:	bne	191e8 <__assert_fail@plt+0x6bf4>
   191dc:	ldrb	r3, [r4, #20]
   191e0:	cmp	r3, #0
   191e4:	beq	1922c <__assert_fail@plt+0x6c38>
   191e8:	ldrb	r3, [r4, #18]
   191ec:	cmp	r3, #0
   191f0:	bne	19278 <__assert_fail@plt+0x6c84>
   191f4:	ldrb	r3, [r4, #19]
   191f8:	cmp	r3, #0
   191fc:	beq	19290 <__assert_fail@plt+0x6c9c>
   19200:	movw	r3, #40512	; 0x9e40
   19204:	movt	r3, #5
   19208:	ldrb	r2, [r3, #5]
   1920c:	cmp	r2, #0
   19210:	bne	19290 <__assert_fail@plt+0x6c9c>
   19214:	mov	r2, r5
   19218:	mov	r0, r6
   1921c:	ldr	r1, [r3, #12]
   19220:	bl	1824c <__assert_fail@plt+0x5c58>
   19224:	cmp	r0, #0
   19228:	bne	19248 <__assert_fail@plt+0x6c54>
   1922c:	mov	r1, r5
   19230:	mov	r0, r6
   19234:	ldr	r3, [r4]
   19238:	mov	r2, r4
   1923c:	blx	r3
   19240:	cmp	r0, #0
   19244:	bne	1925c <__assert_fail@plt+0x6c68>
   19248:	ldrd	r4, [sp]
   1924c:	mov	r0, #0
   19250:	ldr	r6, [sp, #8]
   19254:	add	sp, sp, #12
   19258:	pop	{pc}		; (ldr pc, [sp], #4)
   1925c:	ldr	r3, [r4, #168]	; 0xa8
   19260:	ldr	r6, [sp, #8]
   19264:	add	r3, r3, #1
   19268:	str	r3, [r4, #168]	; 0xa8
   1926c:	ldrd	r4, [sp]
   19270:	add	sp, sp, #12
   19274:	pop	{pc}		; (ldr pc, [sp], #4)
   19278:	movw	r3, #40512	; 0x9e40
   1927c:	movt	r3, #5
   19280:	ldrb	r2, [r3, #4]
   19284:	cmp	r2, #0
   19288:	beq	19214 <__assert_fail@plt+0x6c20>
   1928c:	b	191f4 <__assert_fail@plt+0x6c00>
   19290:	ldrb	r3, [r4, #20]
   19294:	cmp	r3, #0
   19298:	beq	1922c <__assert_fail@plt+0x6c38>
   1929c:	ldrd	r2, [r5, #96]	; 0x60
   192a0:	orrs	r3, r2, r3
   192a4:	movw	r3, #40512	; 0x9e40
   192a8:	movt	r3, #5
   192ac:	beq	19214 <__assert_fail@plt+0x6c20>
   192b0:	ldrb	r2, [r3, #5]
   192b4:	cmp	r2, #0
   192b8:	beq	19214 <__assert_fail@plt+0x6c20>
   192bc:	ldr	r2, [r5, #16]
   192c0:	and	r2, r2, #61440	; 0xf000
   192c4:	cmp	r2, #16384	; 0x4000
   192c8:	bne	1922c <__assert_fail@plt+0x6c38>
   192cc:	b	19214 <__assert_fail@plt+0x6c20>
   192d0:	movw	r2, #18444	; 0x480c
   192d4:	movt	r2, #1
   192d8:	movw	r3, #16756	; 0x4174
   192dc:	movt	r3, #1
   192e0:	cmp	r3, r0
   192e4:	cmpne	r2, r0
   192e8:	moveq	r0, #1
   192ec:	movne	r0, #0
   192f0:	bx	lr
   192f4:	movw	r3, #40556	; 0x9e6c
   192f8:	movt	r3, #5
   192fc:	mov	r2, r1
   19300:	ldr	r1, [r3, #72]	; 0x48
   19304:	b	2c8d4 <__assert_fail@plt+0x1a2e0>
   19308:	mov	r3, r1
   1930c:	mov	r2, #1
   19310:	mov	r1, r0
   19314:	mov	r0, #0
   19318:	b	17c70 <__assert_fail@plt+0x567c>
   1931c:	mov	r2, #1
   19320:	mov	r3, r1
   19324:	str	r4, [sp, #-8]!
   19328:	mov	r1, r0
   1932c:	mov	r0, r2
   19330:	str	lr, [sp, #4]
   19334:	bl	17c70 <__assert_fail@plt+0x567c>
   19338:	bl	125a0 <abort@plt>
   1933c:	mov	r2, #0
   19340:	mov	r3, r1
   19344:	mov	r1, r0
   19348:	mov	r0, r2
   1934c:	b	17c70 <__assert_fail@plt+0x567c>
   19350:	movw	ip, #40512	; 0x9e40
   19354:	movt	ip, #5
   19358:	str	r4, [sp, #-8]!
   1935c:	str	lr, [sp, #4]
   19360:	mov	lr, #0
   19364:	mov	r3, r1
   19368:	mov	r2, lr
   1936c:	mov	r1, r0
   19370:	mov	r0, #1
   19374:	strb	lr, [ip, #40]	; 0x28
   19378:	bl	17c70 <__assert_fail@plt+0x567c>
   1937c:	bl	125a0 <abort@plt>
   19380:	strd	r4, [sp, #-8]!
   19384:	ldrd	r2, [r1, #8]
   19388:	ldrd	r4, [r0, #8]
   1938c:	cmp	r5, r3
   19390:	cmpeq	r4, r2
   19394:	movne	r0, #0
   19398:	bne	193b4 <__assert_fail@plt+0x6dc0>
   1939c:	ldrd	r4, [r0]
   193a0:	ldrd	r2, [r1]
   193a4:	cmp	r5, r3
   193a8:	cmpeq	r4, r2
   193ac:	moveq	r0, #1
   193b0:	movne	r0, #0
   193b4:	ldrd	r4, [sp]
   193b8:	add	sp, sp, #8
   193bc:	bx	lr
   193c0:	mov	r2, r1
   193c4:	str	r4, [sp, #-8]!
   193c8:	mov	r3, #0
   193cc:	ldm	r0, {r4, ip}
   193d0:	ldr	r1, [r0, #12]
   193d4:	str	lr, [sp, #4]
   193d8:	ldr	lr, [r0, #8]
   193dc:	eor	r1, r1, ip
   193e0:	eor	r0, r4, lr
   193e4:	bl	42574 <__assert_fail@plt+0x2ff80>
   193e8:	ldr	r4, [sp]
   193ec:	add	sp, sp, #4
   193f0:	mov	r0, r2
   193f4:	pop	{pc}		; (ldr pc, [sp], #4)
   193f8:	str	r4, [sp, #-8]!
   193fc:	mov	r4, r0
   19400:	ldr	r0, [r0, #20]
   19404:	str	lr, [sp, #4]
   19408:	cmp	r0, #0
   1940c:	beq	1941c <__assert_fail@plt+0x6e28>
   19410:	bl	123fc <fclose@plt>
   19414:	cmp	r0, #0
   19418:	bne	19438 <__assert_fail@plt+0x6e44>
   1941c:	ldr	r0, [r4, #16]
   19420:	bl	2f668 <__assert_fail@plt+0x1d074>
   19424:	mov	r0, r4
   19428:	ldr	r4, [sp]
   1942c:	ldr	lr, [sp, #4]
   19430:	add	sp, sp, #8
   19434:	b	2f668 <__assert_fail@plt+0x1d074>
   19438:	bl	12348 <__errno_location@plt>
   1943c:	ldr	r0, [r0]
   19440:	ldr	r1, [r4, #16]
   19444:	bl	19350 <__assert_fail@plt+0x6d5c>
   19448:	strd	r4, [sp, #-12]!
   1944c:	mov	r5, r0
   19450:	mov	r0, #8
   19454:	str	lr, [sp, #8]
   19458:	sub	sp, sp, #12
   1945c:	bl	31b54 <__assert_fail@plt+0x1f560>
   19460:	subs	r4, r0, #0
   19464:	beq	194b8 <__assert_fail@plt+0x6ec4>
   19468:	mov	r0, r5
   1946c:	bl	120c0 <strdup@plt>
   19470:	cmp	r0, #0
   19474:	mov	r3, r0
   19478:	str	r0, [r4]
   1947c:	beq	194cc <__assert_fail@plt+0x6ed8>
   19480:	movw	r1, #37880	; 0x93f8
   19484:	movt	r1, #1
   19488:	movw	r3, #37760	; 0x9380
   1948c:	movt	r3, #1
   19490:	movw	r2, #37824	; 0x93c0
   19494:	movt	r2, #1
   19498:	str	r1, [sp]
   1949c:	mov	r0, #11
   194a0:	mov	r1, #0
   194a4:	bl	23228 <__assert_fail@plt+0x10c34>
   194a8:	cmp	r0, #0
   194ac:	mov	r5, r0
   194b0:	str	r0, [r4, #4]
   194b4:	beq	194dc <__assert_fail@plt+0x6ee8>
   194b8:	mov	r0, r4
   194bc:	add	sp, sp, #12
   194c0:	ldrd	r4, [sp]
   194c4:	add	sp, sp, #8
   194c8:	pop	{pc}		; (ldr pc, [sp], #4)
   194cc:	mov	r0, r4
   194d0:	mov	r4, r3
   194d4:	bl	2f668 <__assert_fail@plt+0x1d074>
   194d8:	b	194b8 <__assert_fail@plt+0x6ec4>
   194dc:	ldr	r0, [r4]
   194e0:	bl	2f668 <__assert_fail@plt+0x1d074>
   194e4:	mov	r0, r4
   194e8:	mov	r4, r5
   194ec:	bl	2f668 <__assert_fail@plt+0x1d074>
   194f0:	b	194b8 <__assert_fail@plt+0x6ec4>
   194f4:	str	r4, [sp, #-8]!
   194f8:	mov	r4, r0
   194fc:	ldr	r0, [r0]
   19500:	str	lr, [sp, #4]
   19504:	bl	2f668 <__assert_fail@plt+0x1d074>
   19508:	ldr	r0, [r4, #4]
   1950c:	ldr	r4, [sp]
   19510:	ldr	lr, [sp, #4]
   19514:	add	sp, sp, #8
   19518:	b	2345c <__assert_fail@plt+0x10e68>
   1951c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19520:	mov	r5, r1
   19524:	strd	r6, [sp, #8]
   19528:	str	r8, [sp, #16]
   1952c:	mov	r8, r0
   19530:	mov	r0, #24
   19534:	str	lr, [sp, #20]
   19538:	sub	sp, sp, #104	; 0x68
   1953c:	bl	31b54 <__assert_fail@plt+0x1f560>
   19540:	subs	r4, r0, #0
   19544:	beq	195d4 <__assert_fail@plt+0x6fe0>
   19548:	mov	r0, r5
   1954c:	bl	120c0 <strdup@plt>
   19550:	cmp	r0, #0
   19554:	mov	r3, r0
   19558:	str	r0, [r4, #16]
   1955c:	beq	1961c <__assert_fail@plt+0x7028>
   19560:	mov	r0, r5
   19564:	ldr	r1, [r8]
   19568:	bl	2279c <__assert_fail@plt+0x101a8>
   1956c:	cmp	r0, #0
   19570:	str	r0, [r4, #20]
   19574:	beq	1960c <__assert_fail@plt+0x7018>
   19578:	bl	123c0 <fileno@plt>
   1957c:	subs	r5, r0, #0
   19580:	blt	1964c <__assert_fail@plt+0x7058>
   19584:	mov	r1, #1
   19588:	bl	22228 <__assert_fail@plt+0xfc34>
   1958c:	mov	r1, r5
   19590:	mov	r2, sp
   19594:	mov	r0, #3
   19598:	bl	1215c <__fxstat64@plt>
   1959c:	cmp	r0, #0
   195a0:	blt	1960c <__assert_fail@plt+0x7018>
   195a4:	ldrd	r6, [sp]
   195a8:	mov	r1, r4
   195ac:	ldrd	r2, [sp, #96]	; 0x60
   195b0:	ldr	r0, [r8, #4]
   195b4:	strd	r6, [r4]
   195b8:	strd	r2, [r4, #8]
   195bc:	bl	22f08 <__assert_fail@plt+0x10914>
   195c0:	subs	r5, r0, #0
   195c4:	beq	195f0 <__assert_fail@plt+0x6ffc>
   195c8:	mov	r0, r4
   195cc:	bl	193f8 <__assert_fail@plt+0x6e04>
   195d0:	ldr	r4, [r5, #20]
   195d4:	mov	r0, r4
   195d8:	add	sp, sp, #104	; 0x68
   195dc:	ldrd	r4, [sp]
   195e0:	ldrd	r6, [sp, #8]
   195e4:	ldr	r8, [sp, #16]
   195e8:	add	sp, sp, #20
   195ec:	pop	{pc}		; (ldr pc, [sp], #4)
   195f0:	mov	r1, r4
   195f4:	ldr	r0, [r8, #4]
   195f8:	bl	23880 <__assert_fail@plt+0x1128c>
   195fc:	subs	r5, r0, #0
   19600:	beq	1962c <__assert_fail@plt+0x7038>
   19604:	ldr	r4, [r4, #20]
   19608:	b	195d4 <__assert_fail@plt+0x6fe0>
   1960c:	mov	r0, r4
   19610:	mov	r4, #0
   19614:	bl	193f8 <__assert_fail@plt+0x6e04>
   19618:	b	195d4 <__assert_fail@plt+0x6fe0>
   1961c:	mov	r0, r4
   19620:	mov	r4, r3
   19624:	bl	2f668 <__assert_fail@plt+0x1d074>
   19628:	b	195d4 <__assert_fail@plt+0x6fe0>
   1962c:	bl	12348 <__errno_location@plt>
   19630:	mov	r6, r0
   19634:	mov	r0, r4
   19638:	ldr	r7, [r6]
   1963c:	mov	r4, r5
   19640:	bl	193f8 <__assert_fail@plt+0x6e04>
   19644:	str	r7, [r6]
   19648:	b	195d4 <__assert_fail@plt+0x6fe0>
   1964c:	movw	r3, #19184	; 0x4af0
   19650:	movt	r3, #4
   19654:	movw	r1, #19200	; 0x4b00
   19658:	movt	r1, #4
   1965c:	movw	r0, #11316	; 0x2c34
   19660:	movt	r0, #4
   19664:	mov	r2, #166	; 0xa6
   19668:	bl	125f4 <__assert_fail@plt>
   1966c:	andeq	r0, r0, r0
   19670:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19674:	cmp	r2, #43	; 0x2b
   19678:	strd	r6, [sp, #8]
   1967c:	strd	r8, [sp, #16]
   19680:	strd	sl, [sp, #24]
   19684:	str	lr, [sp, #32]
   19688:	sub	sp, sp, #156	; 0x9c
   1968c:	add	r5, sp, #56	; 0x38
   19690:	stm	r5, {r0, r1}
   19694:	beq	19a2c <__assert_fail@plt+0x7438>
   19698:	mov	r4, r2
   1969c:	mov	r1, #37	; 0x25
   196a0:	mov	r2, #0
   196a4:	sub	r3, r4, #64	; 0x40
   196a8:	strb	r1, [sp, #64]	; 0x40
   196ac:	strb	r4, [sp, #65]	; 0x41
   196b0:	strb	r2, [sp, #66]	; 0x42
   196b4:	cmp	r3, #24
   196b8:	ldrls	pc, [pc, r3, lsl #2]
   196bc:	b	19824 <__assert_fail@plt+0x7230>
   196c0:	andeq	r9, r1, r4, lsr #14
   196c4:	andeq	r9, r1, r4, lsr #16
   196c8:	andeq	r9, r1, r4, lsr #16
   196cc:	andeq	r9, r1, r4, lsr #16
   196d0:	andeq	r9, r1, r4, lsr #16
   196d4:	andeq	r9, r1, r4, lsr #16
   196d8:	andeq	r9, r1, r4, lsr #16
   196dc:	andeq	r9, r1, r4, lsr #16
   196e0:	andeq	r9, r1, r4, lsr #16
   196e4:	andeq	r9, r1, r4, lsr #16
   196e8:	andeq	r9, r1, r4, lsr #16
   196ec:	andeq	r9, r1, r4, lsr #16
   196f0:	andeq	r9, r1, r4, lsr #16
   196f4:	andeq	r9, r1, r4, lsr #16
   196f8:	andeq	r9, r1, r4, lsr #16
   196fc:	andeq	r9, r1, r4, lsr #16
   19700:	andeq	r9, r1, r4, lsr #16
   19704:	andeq	r9, r1, r4, lsr #16
   19708:	andeq	r9, r1, r4, lsr #16
   1970c:	andeq	r9, r1, r4, lsr #14
   19710:	andeq	r9, r1, r4, lsr #14
   19714:	andeq	r9, r1, r4, lsr #16
   19718:	andeq	r9, r1, r4, lsr #16
   1971c:	andeq	r9, r1, r4, lsr #16
   19720:	andeq	r9, r1, r4, lsr #14
   19724:	movw	r2, #19392	; 0x4bc0
   19728:	movt	r2, #4
   1972c:	ldr	r3, [sp, #60]	; 0x3c
   19730:	mov	r1, #32
   19734:	add	r0, sp, #76	; 0x4c
   19738:	bl	12360 <snprintf@plt>
   1973c:	mov	r3, #1
   19740:	cmp	r4, #64	; 0x40
   19744:	str	r3, [sp, #20]
   19748:	str	r0, [sp, #24]
   1974c:	bne	1983c <__assert_fail@plt+0x7248>
   19750:	ldr	r0, [sp, #56]	; 0x38
   19754:	cmp	r0, #0
   19758:	asr	r1, r0, #31
   1975c:	bge	19768 <__assert_fail@plt+0x7174>
   19760:	rsbs	r0, r0, #0
   19764:	rsc	r1, r1, #0
   19768:	ldr	r5, [pc, #1148]	; 19bec <__assert_fail@plt+0x75f8>
   1976c:	mov	r6, #1
   19770:	mov	r7, #0
   19774:	mov	r3, #0
   19778:	strd	r6, [sp]
   1977c:	strd	r6, [sp, #8]
   19780:	add	r2, r5, #1
   19784:	bl	239e0 <__assert_fail@plt+0x113ec>
   19788:	cmp	r0, r5
   1978c:	mov	r4, r0
   19790:	bls	19b94 <__assert_fail@plt+0x75a0>
   19794:	add	r3, r5, #788	; 0x314
   19798:	add	r3, r3, #3
   1979c:	cmp	r0, r3
   197a0:	bcs	19b78 <__assert_fail@plt+0x7584>
   197a4:	ldr	r3, [sp, #56]	; 0x38
   197a8:	cmp	r3, #0
   197ac:	bge	197bc <__assert_fail@plt+0x71c8>
   197b0:	mov	r3, #45	; 0x2d
   197b4:	sub	r4, r0, #1
   197b8:	strb	r3, [r0, #-1]
   197bc:	ldr	r3, [sp, #20]
   197c0:	cmp	r3, #0
   197c4:	beq	19804 <__assert_fail@plt+0x7210>
   197c8:	mov	r0, r4
   197cc:	sub	r5, r4, r5
   197d0:	bl	12300 <strlen@plt>
   197d4:	add	r5, r5, r0
   197d8:	movw	r3, #790	; 0x316
   197dc:	cmp	r5, r3
   197e0:	bhi	19bb0 <__assert_fail@plt+0x75bc>
   197e4:	add	r0, sp, #76	; 0x4c
   197e8:	sub	r5, r3, r5
   197ec:	bl	12300 <strlen@plt>
   197f0:	cmp	r0, r5
   197f4:	bcs	19b08 <__assert_fail@plt+0x7514>
   197f8:	add	r1, sp, #76	; 0x4c
   197fc:	mov	r0, r4
   19800:	bl	12174 <strcat@plt>
   19804:	mov	r0, r4
   19808:	add	sp, sp, #156	; 0x9c
   1980c:	ldrd	r4, [sp]
   19810:	ldrd	r6, [sp, #8]
   19814:	ldrd	r8, [sp, #16]
   19818:	ldrd	sl, [sp, #24]
   1981c:	add	sp, sp, #32
   19820:	pop	{pc}		; (ldr pc, [sp], #4)
   19824:	mov	r3, #0
   19828:	cmp	r4, #64	; 0x40
   1982c:	str	r3, [sp, #20]
   19830:	str	r3, [sp, #24]
   19834:	strb	r3, [sp, #76]	; 0x4c
   19838:	beq	19750 <__assert_fail@plt+0x715c>
   1983c:	mov	r0, r5
   19840:	bl	1227c <localtime@plt>
   19844:	subs	r5, r0, #0
   19848:	beq	19750 <__assert_fail@plt+0x715c>
   1984c:	add	r0, sp, #64	; 0x40
   19850:	movw	r7, #38296	; 0x9598
   19854:	movt	r7, #5
   19858:	bl	12300 <strlen@plt>
   1985c:	mov	r4, r0
   19860:	add	r0, r0, #2
   19864:	bl	2da2c <__assert_fail@plt+0x1b438>
   19868:	mov	r3, #95	; 0x5f
   1986c:	add	r2, r4, #1
   19870:	str	r0, [sp, #32]
   19874:	add	r1, sp, #64	; 0x40
   19878:	strb	r3, [r0], #1
   1987c:	bl	12024 <memcpy@plt>
   19880:	ldrd	r2, [r5]
   19884:	ldr	r4, [r7]
   19888:	strd	r2, [sp, #108]	; 0x6c
   1988c:	ldrd	r2, [r5, #8]
   19890:	ldr	r1, [sp, #108]	; 0x6c
   19894:	strd	r2, [sp, #116]	; 0x74
   19898:	ldrd	r2, [r5, #16]
   1989c:	cmp	r1, #10
   198a0:	subgt	r1, r1, #11
   198a4:	addle	r1, r1, #11
   198a8:	cmp	r4, #0
   198ac:	str	r1, [sp, #108]	; 0x6c
   198b0:	strd	r2, [sp, #124]	; 0x7c
   198b4:	ldrd	r2, [r5, #24]
   198b8:	strd	r2, [sp, #132]	; 0x84
   198bc:	ldrd	r2, [r5, #32]
   198c0:	strd	r2, [sp, #140]	; 0x8c
   198c4:	ldr	r3, [r5, #40]	; 0x28
   198c8:	str	r3, [sp, #148]	; 0x94
   198cc:	beq	19b5c <__assert_fail@plt+0x7568>
   198d0:	ldr	r6, [pc, #792]	; 19bf0 <__assert_fail@plt+0x75fc>
   198d4:	ldr	r8, [sp, #32]
   198d8:	b	198f4 <__assert_fail@plt+0x7300>
   198dc:	mov	r0, r4
   198e0:	mov	r2, #1
   198e4:	mov	r1, r6
   198e8:	bl	2dbb4 <__assert_fail@plt+0x1b5c0>
   198ec:	mov	r4, r0
   198f0:	str	r0, [r7]
   198f4:	mov	r3, r5
   198f8:	mov	r2, r8
   198fc:	ldr	r1, [r7, #4]
   19900:	mov	r0, r4
   19904:	bl	12264 <strftime@plt>
   19908:	cmp	r0, #0
   1990c:	beq	198dc <__assert_fail@plt+0x72e8>
   19910:	ldr	r3, [r7, #4]
   19914:	cmp	r0, r3
   19918:	bcs	198dc <__assert_fail@plt+0x72e8>
   1991c:	ldr	r3, [sp, #24]
   19920:	mov	sl, r0
   19924:	mov	r0, r4
   19928:	add	r3, r3, #1
   1992c:	add	r3, r3, sl
   19930:	mov	r4, r3
   19934:	mov	r1, r3
   19938:	str	r3, [sp, #52]	; 0x34
   1993c:	bl	2da98 <__assert_fail@plt+0x1b4a4>
   19940:	mov	r3, r4
   19944:	stm	r7, {r0, r3}
   19948:	mov	r0, r4
   1994c:	bl	2da2c <__assert_fail@plt+0x1b438>
   19950:	add	r3, sp, #108	; 0x6c
   19954:	ldr	r1, [r7, #4]
   19958:	mov	r4, r0
   1995c:	str	r0, [sp, #36]	; 0x24
   19960:	ldr	r2, [sp, #32]
   19964:	bl	12264 <strftime@plt>
   19968:	ldr	r1, [r7]
   1996c:	ldrb	r5, [r1]
   19970:	str	r1, [sp, #44]	; 0x2c
   19974:	cmp	r5, #0
   19978:	beq	19ae8 <__assert_fail@plt+0x74f4>
   1997c:	mov	r2, r4
   19980:	ldrb	r4, [r4]
   19984:	cmp	r4, #0
   19988:	beq	19ae8 <__assert_fail@plt+0x74f4>
   1998c:	add	r9, r2, #1
   19990:	mvn	r2, r2
   19994:	mov	r6, #0
   19998:	mov	fp, r6
   1999c:	str	r2, [sp, #28]
   199a0:	str	r7, [sp, #40]	; 0x28
   199a4:	mov	r7, r6
   199a8:	str	sl, [sp, #48]	; 0x30
   199ac:	mov	sl, r1
   199b0:	b	199dc <__assert_fail@plt+0x73e8>
   199b4:	sub	r8, r8, fp
   199b8:	cmp	r8, r6
   199bc:	bne	19b54 <__assert_fail@plt+0x7560>
   199c0:	add	r6, r6, #1
   199c4:	ldrb	r5, [sl, #1]!
   199c8:	ldrb	r4, [r9], #1
   199cc:	cmp	r5, #0
   199d0:	beq	19a6c <__assert_fail@plt+0x7478>
   199d4:	cmp	r4, #0
   199d8:	beq	19b54 <__assert_fail@plt+0x7560>
   199dc:	ldr	r3, [sp, #28]
   199e0:	cmp	r4, r5
   199e4:	add	r8, r3, r9
   199e8:	beq	199c4 <__assert_fail@plt+0x73d0>
   199ec:	bl	122b8 <__ctype_b_loc@plt>
   199f0:	ldr	r0, [r0]
   199f4:	lsl	r5, r5, #1
   199f8:	ldrh	ip, [r0, r5]
   199fc:	tst	ip, #2048	; 0x800
   19a00:	beq	19b54 <__assert_fail@plt+0x7560>
   19a04:	lsl	r4, r4, #1
   19a08:	ldrh	r0, [r0, r4]
   19a0c:	tst	r0, #2048	; 0x800
   19a10:	beq	19b54 <__assert_fail@plt+0x7560>
   19a14:	cmp	r7, #0
   19a18:	bne	199b4 <__assert_fail@plt+0x73c0>
   19a1c:	mov	r6, #1
   19a20:	mov	fp, r8
   19a24:	mov	r7, r6
   19a28:	b	199c4 <__assert_fail@plt+0x73d0>
   19a2c:	movw	r1, #19592	; 0x4c88
   19a30:	movt	r1, #4
   19a34:	ldr	r3, [sp, #60]	; 0x3c
   19a38:	mov	lr, #1
   19a3c:	movw	r2, #19392	; 0x4bc0
   19a40:	movt	r2, #4
   19a44:	ldrd	r6, [r1]
   19a48:	add	r0, sp, #76	; 0x4c
   19a4c:	str	lr, [sp, #20]
   19a50:	ldr	ip, [r1, #8]
   19a54:	mov	r1, #32
   19a58:	strd	r6, [sp, #64]	; 0x40
   19a5c:	str	ip, [sp, #72]	; 0x48
   19a60:	bl	12360 <snprintf@plt>
   19a64:	str	r0, [sp, #24]
   19a68:	b	1983c <__assert_fail@plt+0x7248>
   19a6c:	cmp	r6, #2
   19a70:	cmpeq	r4, #0
   19a74:	ldr	r7, [sp, #40]	; 0x28
   19a78:	ldr	sl, [sp, #48]	; 0x30
   19a7c:	bne	19ae8 <__assert_fail@plt+0x74f4>
   19a80:	bl	122b8 <__ctype_b_loc@plt>
   19a84:	ldr	r3, [sp, #44]	; 0x2c
   19a88:	add	r2, fp, #2
   19a8c:	ldr	r1, [r0]
   19a90:	add	r4, r3, r2
   19a94:	ldrb	r3, [r3, r2]
   19a98:	lsl	r3, r3, #1
   19a9c:	ldrh	r3, [r1, r3]
   19aa0:	tst	r3, #2048	; 0x800
   19aa4:	bne	19ae8 <__assert_fail@plt+0x74f4>
   19aa8:	ldr	r3, [sp, #24]
   19aac:	add	sl, sl, #1
   19ab0:	ldr	r1, [sp, #52]	; 0x34
   19ab4:	add	r0, r3, r2
   19ab8:	add	r3, r3, sl
   19abc:	sub	r2, sl, r2
   19ac0:	cmp	r1, r3
   19ac4:	bne	19bcc <__assert_fail@plt+0x75d8>
   19ac8:	ldr	r3, [sp, #44]	; 0x2c
   19acc:	mov	r1, r4
   19ad0:	add	r0, r3, r0
   19ad4:	bl	11fb8 <memmove@plt>
   19ad8:	mov	r0, r4
   19adc:	add	r1, sp, #76	; 0x4c
   19ae0:	ldr	r2, [sp, #24]
   19ae4:	bl	12024 <memcpy@plt>
   19ae8:	ldr	r0, [sp, #32]
   19aec:	bl	2f668 <__assert_fail@plt+0x1d074>
   19af0:	ldr	r0, [sp, #36]	; 0x24
   19af4:	bl	2f668 <__assert_fail@plt+0x1d074>
   19af8:	ldr	r4, [r7]
   19afc:	adds	r4, r4, #1
   19b00:	bne	19804 <__assert_fail@plt+0x7210>
   19b04:	b	19750 <__assert_fail@plt+0x715c>
   19b08:	add	ip, sp, #76	; 0x4c
   19b0c:	mov	r1, #0
   19b10:	ldr	r3, [sp, #24]
   19b14:	mov	r0, r1
   19b18:	movw	r2, #19516	; 0x4c3c
   19b1c:	movt	r2, #4
   19b20:	stm	sp, {r5, ip}
   19b24:	bl	121ec <error@plt>
   19b28:	add	r0, sp, #76	; 0x4c
   19b2c:	bl	12300 <strlen@plt>
   19b30:	cmp	r0, r5
   19b34:	bcc	197f8 <__assert_fail@plt+0x7204>
   19b38:	movw	r1, #19400	; 0x4bc8
   19b3c:	movt	r1, #4
   19b40:	ldr	r3, [pc, #172]	; 19bf4 <__assert_fail@plt+0x7600>
   19b44:	movw	r0, #19564	; 0x4c6c
   19b48:	movt	r0, #4
   19b4c:	mov	r2, #720	; 0x2d0
   19b50:	bl	125f4 <__assert_fail@plt>
   19b54:	ldr	r7, [sp, #40]	; 0x28
   19b58:	b	19ae8 <__assert_fail@plt+0x74f4>
   19b5c:	mov	r3, #1
   19b60:	mov	r0, r3
   19b64:	str	r3, [r7, #4]
   19b68:	bl	2da2c <__assert_fail@plt+0x1b438>
   19b6c:	mov	r4, r0
   19b70:	str	r0, [r7]
   19b74:	b	198d0 <__assert_fail@plt+0x72dc>
   19b78:	movw	r1, #19400	; 0x4bc8
   19b7c:	movt	r1, #4
   19b80:	ldr	r3, [pc, #108]	; 19bf4 <__assert_fail@plt+0x7600>
   19b84:	movw	r0, #19468	; 0x4c0c
   19b88:	movt	r0, #4
   19b8c:	movw	r2, #698	; 0x2ba
   19b90:	bl	125f4 <__assert_fail@plt>
   19b94:	movw	r1, #19400	; 0x4bc8
   19b98:	movt	r1, #4
   19b9c:	ldr	r3, [pc, #80]	; 19bf4 <__assert_fail@plt+0x7600>
   19ba0:	movw	r0, #19460	; 0x4c04
   19ba4:	movt	r0, #4
   19ba8:	movw	r2, #697	; 0x2b9
   19bac:	bl	125f4 <__assert_fail@plt>
   19bb0:	movw	r1, #19400	; 0x4bc8
   19bb4:	movt	r1, #4
   19bb8:	ldr	r3, [pc, #52]	; 19bf4 <__assert_fail@plt+0x7600>
   19bbc:	movw	r0, #19496	; 0x4c28
   19bc0:	movt	r0, #4
   19bc4:	movw	r2, #711	; 0x2c7
   19bc8:	bl	125f4 <__assert_fail@plt>
   19bcc:	movw	r3, #19212	; 0x4b0c
   19bd0:	movt	r3, #4
   19bd4:	movw	r1, #19400	; 0x4bc8
   19bd8:	movt	r1, #4
   19bdc:	movw	r0, #19408	; 0x4bd0
   19be0:	movt	r0, #4
   19be4:	movw	r2, #549	; 0x225
   19be8:	bl	125f4 <__assert_fail@plt>
   19bec:	andeq	r9, r5, r0, lsr #11
   19bf0:	muleq	r5, ip, r5
   19bf4:	andeq	r4, r4, ip, lsl fp
   19bf8:	strd	r4, [sp, #-20]!	; 0xffffffec
   19bfc:	strd	r6, [sp, #8]
   19c00:	str	lr, [sp, #16]
   19c04:	sub	sp, sp, #44	; 0x2c
   19c08:	add	r4, sp, #32
   19c0c:	stm	r4, {r0, r1}
   19c10:	mov	r0, r4
   19c14:	bl	1227c <localtime@plt>
   19c18:	cmp	r0, #0
   19c1c:	beq	19cec <__assert_fail@plt+0x76f8>
   19c20:	ldr	r1, [r0, #24]
   19c24:	cmp	r1, #0
   19c28:	blt	19cfc <__assert_fail@plt+0x7708>
   19c2c:	cmp	r1, #6
   19c30:	bgt	19ddc <__assert_fail@plt+0x77e8>
   19c34:	ldr	r2, [r0, #16]
   19c38:	cmp	r2, #0
   19c3c:	blt	19dc0 <__assert_fail@plt+0x77cc>
   19c40:	cmp	r2, #11
   19c44:	bgt	19da4 <__assert_fail@plt+0x77b0>
   19c48:	ldr	r4, [r0, #8]
   19c4c:	cmp	r4, #0
   19c50:	blt	19d88 <__assert_fail@plt+0x7794>
   19c54:	cmp	r4, #23
   19c58:	bgt	19d6c <__assert_fail@plt+0x7778>
   19c5c:	ldr	r6, [r0, #4]
   19c60:	cmp	r6, #59	; 0x3b
   19c64:	bgt	19d50 <__assert_fail@plt+0x775c>
   19c68:	ldr	r5, [r0]
   19c6c:	cmp	r5, #61	; 0x3d
   19c70:	bgt	19d34 <__assert_fail@plt+0x7740>
   19c74:	ldr	lr, [r0, #20]
   19c78:	movw	r3, #19212	; 0x4b0c
   19c7c:	movt	r3, #4
   19c80:	add	ip, r3, r2, lsl #2
   19c84:	str	r4, [sp, #8]
   19c88:	movw	r2, #19764	; 0x4d34
   19c8c:	movt	r2, #4
   19c90:	ldr	r7, [sp, #36]	; 0x24
   19c94:	add	r3, r3, r1, lsl #2
   19c98:	str	r6, [sp, #12]
   19c9c:	mov	r1, #1024	; 0x400
   19ca0:	str	r5, [sp, #16]
   19ca4:	add	lr, lr, #1888	; 0x760
   19ca8:	ldr	r4, [ip, #72]	; 0x48
   19cac:	add	lr, lr, #12
   19cb0:	str	r7, [sp, #20]
   19cb4:	str	lr, [sp, #24]
   19cb8:	ldr	ip, [r0, #12]
   19cbc:	ldr	r0, [pc, #308]	; 19df8 <__assert_fail@plt+0x7804>
   19cc0:	ldr	r3, [r3, #44]	; 0x2c
   19cc4:	stm	sp, {r4, ip}
   19cc8:	bl	12360 <snprintf@plt>
   19ccc:	cmp	r0, #1024	; 0x400
   19cd0:	ldrlt	r0, [pc, #288]	; 19df8 <__assert_fail@plt+0x7804>
   19cd4:	bge	19d18 <__assert_fail@plt+0x7724>
   19cd8:	add	sp, sp, #44	; 0x2c
   19cdc:	ldrd	r4, [sp]
   19ce0:	ldrd	r6, [sp, #8]
   19ce4:	add	sp, sp, #16
   19ce8:	pop	{pc}		; (ldr pc, [sp], #4)
   19cec:	mov	r2, #64	; 0x40
   19cf0:	ldm	r4, {r0, r1}
   19cf4:	bl	19670 <__assert_fail@plt+0x707c>
   19cf8:	b	19cd8 <__assert_fail@plt+0x76e4>
   19cfc:	movw	r1, #19400	; 0x4bc8
   19d00:	movt	r1, #4
   19d04:	ldr	r3, [pc, #240]	; 19dfc <__assert_fail@plt+0x7808>
   19d08:	movw	r0, #19604	; 0x4c94
   19d0c:	movt	r0, #4
   19d10:	movw	r2, #749	; 0x2ed
   19d14:	bl	125f4 <__assert_fail@plt>
   19d18:	movw	r1, #19400	; 0x4bc8
   19d1c:	movt	r1, #4
   19d20:	ldr	r3, [pc, #212]	; 19dfc <__assert_fail@plt+0x7808>
   19d24:	movw	r0, #19804	; 0x4d5c
   19d28:	movt	r0, #4
   19d2c:	movw	r2, #770	; 0x302
   19d30:	bl	125f4 <__assert_fail@plt>
   19d34:	movw	r1, #19400	; 0x4bc8
   19d38:	movt	r1, #4
   19d3c:	ldr	r3, [pc, #184]	; 19dfc <__assert_fail@plt+0x7808>
   19d40:	movw	r0, #19744	; 0x4d20
   19d44:	movt	r0, #4
   19d48:	mov	r2, #756	; 0x2f4
   19d4c:	bl	125f4 <__assert_fail@plt>
   19d50:	movw	r1, #19400	; 0x4bc8
   19d54:	movt	r1, #4
   19d58:	ldr	r3, [pc, #156]	; 19dfc <__assert_fail@plt+0x7808>
   19d5c:	movw	r0, #19724	; 0x4d0c
   19d60:	movt	r0, #4
   19d64:	movw	r2, #755	; 0x2f3
   19d68:	bl	125f4 <__assert_fail@plt>
   19d6c:	movw	r1, #19400	; 0x4bc8
   19d70:	movt	r1, #4
   19d74:	ldr	r3, [pc, #128]	; 19dfc <__assert_fail@plt+0x7808>
   19d78:	movw	r0, #19704	; 0x4cf8
   19d7c:	movt	r0, #4
   19d80:	movw	r2, #754	; 0x2f2
   19d84:	bl	125f4 <__assert_fail@plt>
   19d88:	movw	r1, #19400	; 0x4bc8
   19d8c:	movt	r1, #4
   19d90:	ldr	r3, [pc, #100]	; 19dfc <__assert_fail@plt+0x7808>
   19d94:	movw	r0, #19684	; 0x4ce4
   19d98:	movt	r0, #4
   19d9c:	movw	r2, #753	; 0x2f1
   19da0:	bl	125f4 <__assert_fail@plt>
   19da4:	movw	r1, #19400	; 0x4bc8
   19da8:	movt	r1, #4
   19dac:	ldr	r3, [pc, #72]	; 19dfc <__assert_fail@plt+0x7808>
   19db0:	movw	r0, #19664	; 0x4cd0
   19db4:	movt	r0, #4
   19db8:	mov	r2, #752	; 0x2f0
   19dbc:	bl	125f4 <__assert_fail@plt>
   19dc0:	movw	r1, #19400	; 0x4bc8
   19dc4:	movt	r1, #4
   19dc8:	ldr	r3, [pc, #44]	; 19dfc <__assert_fail@plt+0x7808>
   19dcc:	movw	r0, #19644	; 0x4cbc
   19dd0:	movt	r0, #4
   19dd4:	movw	r2, #751	; 0x2ef
   19dd8:	bl	125f4 <__assert_fail@plt>
   19ddc:	movw	r1, #19400	; 0x4bc8
   19de0:	movt	r1, #4
   19de4:	ldr	r3, [pc, #16]	; 19dfc <__assert_fail@plt+0x7808>
   19de8:	movw	r0, #19624	; 0x4ca8
   19dec:	movt	r0, #4
   19df0:	movw	r2, #750	; 0x2ee
   19df4:	bl	125f4 <__assert_fail@plt>
   19df8:			; <UNDEFINED> instruction: 0x000598b8
   19dfc:	andeq	r4, r4, r8, lsr #22
   19e00:	push	{r1, r2, r3}
   19e04:	str	r4, [sp, #-8]!
   19e08:	mov	r4, r0
   19e0c:	ldr	r0, [r0, #4]
   19e10:	str	lr, [sp, #4]
   19e14:	sub	sp, sp, #12
   19e18:	add	r3, sp, #24
   19e1c:	ldr	r1, [sp, #20]
   19e20:	mov	r2, r3
   19e24:	str	r3, [sp, #4]
   19e28:	bl	12474 <vfprintf@plt>
   19e2c:	cmp	r0, #0
   19e30:	blt	19e4c <__assert_fail@plt+0x7858>
   19e34:	add	sp, sp, #12
   19e38:	ldr	r4, [sp]
   19e3c:	ldr	lr, [sp, #4]
   19e40:	add	sp, sp, #8
   19e44:	add	sp, sp, #12
   19e48:	bx	lr
   19e4c:	bl	12348 <__errno_location@plt>
   19e50:	ldr	r0, [r0]
   19e54:	ldr	r1, [r4, #8]
   19e58:	bl	1933c <__assert_fail@plt+0x6d48>
   19e5c:	b	19e34 <__assert_fail@plt+0x7840>
   19e60:	cmp	r0, #32768	; 0x8000
   19e64:	beq	19eb0 <__assert_fail@plt+0x78bc>
   19e68:	cmp	r0, #16384	; 0x4000
   19e6c:	beq	19ec8 <__assert_fail@plt+0x78d4>
   19e70:	cmp	r0, #40960	; 0xa000
   19e74:	beq	19ebc <__assert_fail@plt+0x78c8>
   19e78:	cmp	r0, #49152	; 0xc000
   19e7c:	beq	19ed4 <__assert_fail@plt+0x78e0>
   19e80:	cmp	r0, #24576	; 0x6000
   19e84:	beq	19ee0 <__assert_fail@plt+0x78ec>
   19e88:	cmp	r0, #8192	; 0x2000
   19e8c:	beq	19eec <__assert_fail@plt+0x78f8>
   19e90:	cmp	r0, #4096	; 0x1000
   19e94:	movw	r3, #19824	; 0x4d70
   19e98:	movt	r3, #4
   19e9c:	movw	r2, #14048	; 0x36e0
   19ea0:	movt	r2, #4
   19ea4:	movne	r0, r3
   19ea8:	moveq	r0, r2
   19eac:	bx	lr
   19eb0:	movw	r0, #28404	; 0x6ef4
   19eb4:	movt	r0, #4
   19eb8:	bx	lr
   19ebc:	movw	r0, #12660	; 0x3174
   19ec0:	movt	r0, #4
   19ec4:	bx	lr
   19ec8:	movw	r0, #33552	; 0x8310
   19ecc:	movt	r0, #4
   19ed0:	bx	lr
   19ed4:	movw	r0, #25160	; 0x6248
   19ed8:	movt	r0, #4
   19edc:	bx	lr
   19ee0:	movw	r0, #33824	; 0x8420
   19ee4:	movt	r0, #4
   19ee8:	bx	lr
   19eec:	movw	r0, #10280	; 0x2828
   19ef0:	movt	r0, #4
   19ef4:	bx	lr
   19ef8:	str	r4, [sp, #-8]!
   19efc:	mov	r4, r0
   19f00:	mov	r3, r1
   19f04:	str	lr, [sp, #4]
   19f08:	sub	sp, sp, #8
   19f0c:	str	r2, [sp]
   19f10:	ldrb	r2, [r0, #12]
   19f14:	ldr	r0, [r0, #4]
   19f18:	ldr	r1, [r4, #16]
   19f1c:	bl	21728 <__assert_fail@plt+0xf134>
   19f20:	cmp	r0, #0
   19f24:	blt	19f38 <__assert_fail@plt+0x7944>
   19f28:	add	sp, sp, #8
   19f2c:	ldr	r4, [sp]
   19f30:	add	sp, sp, #4
   19f34:	pop	{pc}		; (ldr pc, [sp], #4)
   19f38:	bl	12348 <__errno_location@plt>
   19f3c:	ldr	r0, [r0]
   19f40:	ldr	r1, [r4, #8]
   19f44:	add	sp, sp, #8
   19f48:	ldr	r4, [sp]
   19f4c:	ldr	lr, [sp, #4]
   19f50:	add	sp, sp, #8
   19f54:	b	1933c <__assert_fail@plt+0x6d48>
   19f58:	str	r4, [sp, #-8]!
   19f5c:	mov	r4, r0
   19f60:	str	lr, [sp, #4]
   19f64:	bl	12348 <__errno_location@plt>
   19f68:	ldr	r0, [r0]
   19f6c:	ldr	r1, [r4]
   19f70:	ldr	r4, [sp]
   19f74:	ldr	lr, [sp, #4]
   19f78:	add	sp, sp, #8
   19f7c:	b	1933c <__assert_fail@plt+0x6d48>
   19f80:	strd	r4, [sp, #-28]!	; 0xffffffe4
   19f84:	mov	r4, r1
   19f88:	mov	r5, r0
   19f8c:	ldr	r1, [r1]
   19f90:	strd	r6, [sp, #8]
   19f94:	strd	r8, [sp, #16]
   19f98:	str	lr, [sp, #24]
   19f9c:	vpush	{d8}
   19fa0:	sub	sp, sp, #692	; 0x2b4
   19fa4:	cmp	r1, #1
   19fa8:	beq	1a2a4 <__assert_fail@plt+0x7cb0>
   19fac:	cmp	r1, #0
   19fb0:	beq	1a278 <__assert_fail@plt+0x7c84>
   19fb4:	cmp	r1, #2
   19fb8:	bne	1a25c <__assert_fail@plt+0x7c68>
   19fbc:	mov	r6, r3
   19fc0:	ldrb	r3, [r4, #4]
   19fc4:	mov	r7, r2
   19fc8:	cmp	r3, #121	; 0x79
   19fcc:	ldrls	pc, [pc, r3, lsl #2]
   19fd0:	b	1a25c <__assert_fail@plt+0x7c68>
   19fd4:	andeq	sl, r1, r0, lsl #15
   19fd8:	andeq	sl, r1, ip, asr r2
   19fdc:	andeq	sl, r1, ip, asr r2
   19fe0:	andeq	sl, r1, ip, asr r2
   19fe4:	andeq	sl, r1, ip, asr r2
   19fe8:	andeq	sl, r1, ip, asr r2
   19fec:	andeq	sl, r1, ip, asr r2
   19ff0:	andeq	sl, r1, ip, asr r2
   19ff4:	andeq	sl, r1, ip, asr r2
   19ff8:	andeq	sl, r1, ip, asr r2
   19ffc:	andeq	sl, r1, ip, asr r2
   1a000:	andeq	sl, r1, ip, asr r2
   1a004:	andeq	sl, r1, ip, asr r2
   1a008:	andeq	sl, r1, ip, asr r2
   1a00c:	andeq	sl, r1, ip, asr r2
   1a010:	andeq	sl, r1, ip, asr r2
   1a014:	andeq	sl, r1, ip, asr r2
   1a018:	andeq	sl, r1, ip, asr r2
   1a01c:	andeq	sl, r1, ip, asr r2
   1a020:	andeq	sl, r1, ip, asr r2
   1a024:	andeq	sl, r1, ip, asr r2
   1a028:	andeq	sl, r1, ip, asr r2
   1a02c:	andeq	sl, r1, ip, asr r2
   1a030:	andeq	sl, r1, ip, asr r2
   1a034:	andeq	sl, r1, ip, asr r2
   1a038:	andeq	sl, r1, ip, asr r2
   1a03c:	andeq	sl, r1, ip, asr r2
   1a040:	andeq	sl, r1, ip, asr r2
   1a044:	andeq	sl, r1, ip, asr r2
   1a048:	andeq	sl, r1, ip, asr r2
   1a04c:	andeq	sl, r1, ip, asr r2
   1a050:	andeq	sl, r1, ip, asr r2
   1a054:	andeq	sl, r1, ip, asr r2
   1a058:	andeq	sl, r1, ip, asr r2
   1a05c:	andeq	sl, r1, ip, asr r2
   1a060:	andeq	sl, r1, ip, asr r2
   1a064:	andeq	sl, r1, ip, asr r2
   1a068:	andeq	sl, r1, r8, ror r2
   1a06c:	andeq	sl, r1, ip, asr r2
   1a070:	andeq	sl, r1, ip, asr r2
   1a074:	andeq	sl, r1, ip, asr r2
   1a078:	andeq	sl, r1, ip, asr r2
   1a07c:	andeq	sl, r1, ip, asr r2
   1a080:	andeq	sl, r1, ip, asr r2
   1a084:	andeq	sl, r1, ip, asr r2
   1a088:	andeq	sl, r1, ip, asr r2
   1a08c:	andeq	sl, r1, ip, asr r2
   1a090:	andeq	sl, r1, ip, asr r2
   1a094:	andeq	sl, r1, ip, asr r2
   1a098:	andeq	sl, r1, ip, asr r2
   1a09c:	andeq	sl, r1, ip, asr r2
   1a0a0:	andeq	sl, r1, ip, asr r2
   1a0a4:	andeq	sl, r1, ip, asr r2
   1a0a8:	andeq	sl, r1, ip, asr r2
   1a0ac:	andeq	sl, r1, ip, asr r2
   1a0b0:	andeq	sl, r1, ip, asr r2
   1a0b4:	andeq	sl, r1, ip, asr r2
   1a0b8:	andeq	sl, r1, ip, asr r2
   1a0bc:	andeq	sl, r1, ip, asr r2
   1a0c0:	andeq	sl, r1, ip, asr r2
   1a0c4:	andeq	sl, r1, ip, asr r2
   1a0c8:	andeq	sl, r1, ip, asr r2
   1a0cc:	andeq	sl, r1, ip, asr r2
   1a0d0:	andeq	sl, r1, ip, asr r2
   1a0d4:	andeq	sl, r1, ip, asr r2
   1a0d8:	andeq	sl, r1, ip, asr r2
   1a0dc:	andeq	sl, r1, ip, asr r2
   1a0e0:	andeq	sl, r1, ip, asr r2
   1a0e4:	andeq	sl, r1, r4, lsr #10
   1a0e8:	andeq	sl, r1, ip, asr r2
   1a0ec:	andeq	sl, r1, r0, ror r5
   1a0f0:	strdeq	sl, [r1], -r0
   1a0f4:	muleq	r1, r4, r5
   1a0f8:	andeq	sl, r1, ip, asr r2
   1a0fc:	andeq	sl, r1, ip, asr r2
   1a100:	andeq	sl, r1, ip, asr r2
   1a104:	andeq	sl, r1, ip, asr r2
   1a108:	strdeq	sl, [r1], -r8
   1a10c:	andeq	sl, r1, ip, asr r2
   1a110:	andeq	sl, r1, ip, asr r2
   1a114:			; <UNDEFINED> instruction: 0x0001a6b8
   1a118:	andeq	sl, r1, ip, asr r2
   1a11c:	andeq	sl, r1, ip, asr r2
   1a120:	andeq	sl, r1, r4, ror r6
   1a124:	andeq	sl, r1, ip, asr r2
   1a128:	andeq	sl, r1, ip, lsr r3
   1a12c:	andeq	sl, r1, ip, asr r2
   1a130:	andeq	sl, r1, ip, asr r2
   1a134:	andeq	sl, r1, ip, asr r2
   1a138:			; <UNDEFINED> instruction: 0x0001a1bc
   1a13c:	strdeq	sl, [r1], -r4
   1a140:	andeq	sl, r1, ip, asr r2
   1a144:	andeq	sl, r1, ip, asr r2
   1a148:	andeq	sl, r1, ip, asr r2
   1a14c:	andeq	sl, r1, ip, asr r2
   1a150:	andeq	sl, r1, ip, asr r2
   1a154:	andeq	sl, r1, ip, asr r2
   1a158:	andeq	sl, r1, r0, ror #11
   1a15c:	andeq	sl, r1, r0, asr r6
   1a160:	andeq	sl, r1, r8, lsr r7
   1a164:	andeq	sl, r1, r0, lsr #14
   1a168:	andeq	sl, r1, ip, asr r2
   1a16c:	andeq	sl, r1, r8, asr #10
   1a170:	andeq	sl, r1, ip, asr #8
   1a174:			; <UNDEFINED> instruction: 0x0001a3b4
   1a178:	muleq	r1, r0, r3
   1a17c:	andeq	sl, r1, ip, asr r2
   1a180:	andeq	sl, r1, r4, ror #6
   1a184:	andeq	sl, r1, ip, asr #14
   1a188:	andeq	sl, r1, ip, lsr r6
   1a18c:	strdeq	sl, [r1], -ip
   1a190:	andeq	sl, r1, ip, asr r2
   1a194:	strdeq	sl, [r1], -r0
   1a198:	andeq	sl, r1, ip, asr r2
   1a19c:	andeq	sl, r1, ip, asr r2
   1a1a0:	andeq	sl, r1, ip, asr #9
   1a1a4:	andeq	sl, r1, r0, lsr #9
   1a1a8:	andeq	sl, r1, ip, lsr #6
   1a1ac:	andeq	sl, r1, ip, asr r2
   1a1b0:	andeq	sl, r1, ip, asr r2
   1a1b4:	andeq	sl, r1, ip, asr r2
   1a1b8:	andeq	sl, r1, r0, lsl #9
   1a1bc:	ldr	r0, [r6, #16]
   1a1c0:	and	r0, r0, #61440	; 0xf000
   1a1c4:	cmp	r0, #40960	; 0xa000
   1a1c8:	bne	1a488 <__assert_fail@plt+0x7e94>
   1a1cc:	mov	r2, #0
   1a1d0:	movw	r1, #40512	; 0x9e40
   1a1d4:	movt	r1, #5
   1a1d8:	add	r3, sp, #32
   1a1dc:	mov	r0, #3
   1a1e0:	str	r2, [sp]
   1a1e4:	ldr	r2, [r1, #12]
   1a1e8:	ldr	r1, [r1, #16]
   1a1ec:	bl	1212c <__fxstatat64@plt>
   1a1f0:	cmp	r0, #0
   1a1f4:	beq	1a87c <__assert_fail@plt+0x8288>
   1a1f8:	bl	12348 <__errno_location@plt>
   1a1fc:	mov	r6, r0
   1a200:	mov	r0, r5
   1a204:	ldr	r1, [r4, #8]
   1a208:	ldr	r3, [r6]
   1a20c:	cmp	r3, #20
   1a210:	cmpne	r3, #2
   1a214:	moveq	r4, #1
   1a218:	movne	r4, #0
   1a21c:	beq	1a884 <__assert_fail@plt+0x8290>
   1a220:	cmp	r3, #40	; 0x28
   1a224:	beq	1a8b0 <__assert_fail@plt+0x82bc>
   1a228:	movw	r2, #25072	; 0x61f0
   1a22c:	movt	r2, #4
   1a230:	bl	19e00 <__assert_fail@plt+0x780c>
   1a234:	ldr	r5, [r6]
   1a238:	mov	r1, r7
   1a23c:	mov	r0, r4
   1a240:	bl	192f4 <__assert_fail@plt+0x6d00>
   1a244:	mov	r3, r0
   1a248:	movw	r2, #28236	; 0x6e4c
   1a24c:	movt	r2, #4
   1a250:	mov	r0, r4
   1a254:	mov	r1, r5
   1a258:	bl	121ec <error@plt>
   1a25c:	add	sp, sp, #692	; 0x2b4
   1a260:	vpop	{d8}
   1a264:	ldrd	r4, [sp]
   1a268:	ldrd	r6, [sp, #8]
   1a26c:	ldrd	r8, [sp, #16]
   1a270:	add	sp, sp, #24
   1a274:	pop	{pc}		; (ldr pc, [sp], #4)
   1a278:	mov	r1, #1
   1a27c:	ldr	r3, [r5, #4]
   1a280:	ldr	r6, [r4, #12]
   1a284:	ldr	r0, [r4, #8]
   1a288:	mov	r2, r6
   1a28c:	bl	12168 <fwrite@plt>
   1a290:	cmp	r6, r0
   1a294:	bls	1a25c <__assert_fail@plt+0x7c68>
   1a298:	add	r0, r5, #8
   1a29c:	bl	19f58 <__assert_fail@plt+0x7964>
   1a2a0:	b	1a25c <__assert_fail@plt+0x7c68>
   1a2a4:	ldr	r3, [r5, #4]
   1a2a8:	ldr	r6, [r4, #12]
   1a2ac:	ldr	r0, [r4, #8]
   1a2b0:	mov	r2, r6
   1a2b4:	bl	12168 <fwrite@plt>
   1a2b8:	cmp	r6, r0
   1a2bc:	bhi	1a2e4 <__assert_fail@plt+0x7cf0>
   1a2c0:	ldr	r0, [r5, #4]
   1a2c4:	bl	2f608 <__assert_fail@plt+0x1d014>
   1a2c8:	cmp	r0, #0
   1a2cc:	beq	1a25c <__assert_fail@plt+0x7c68>
   1a2d0:	bl	12348 <__errno_location@plt>
   1a2d4:	ldr	r0, [r0]
   1a2d8:	ldr	r1, [r5, #8]
   1a2dc:	bl	1933c <__assert_fail@plt+0x6d48>
   1a2e0:	b	1a25c <__assert_fail@plt+0x7c68>
   1a2e4:	add	r0, r5, #8
   1a2e8:	bl	19f58 <__assert_fail@plt+0x7964>
   1a2ec:	b	1a2c0 <__assert_fail@plt+0x7ccc>
   1a2f0:	mov	r8, #1
   1a2f4:	mov	r9, #0
   1a2f8:	ldr	r4, [r4, #8]
   1a2fc:	mov	r3, #0
   1a300:	add	r2, sp, #32
   1a304:	strd	r8, [sp]
   1a308:	mov	r1, r3
   1a30c:	strd	r8, [sp, #8]
   1a310:	ldr	r0, [r6, #28]
   1a314:	bl	239e0 <__assert_fail@plt+0x113ec>
   1a318:	mov	r2, r0
   1a31c:	mov	r1, r4
   1a320:	mov	r0, r5
   1a324:	bl	19e00 <__assert_fail@plt+0x780c>
   1a328:	b	1a25c <__assert_fail@plt+0x7c68>
   1a32c:	ldr	r0, [r6, #24]
   1a330:	bl	11f58 <getpwuid@plt>
   1a334:	subs	r3, r0, #0
   1a338:	bne	1a45c <__assert_fail@plt+0x7e68>
   1a33c:	mov	r8, #1
   1a340:	mov	r9, #0
   1a344:	ldr	r4, [r4, #8]
   1a348:	mov	r3, #0
   1a34c:	add	r2, sp, #32
   1a350:	mov	r1, r3
   1a354:	strd	r8, [sp]
   1a358:	strd	r8, [sp, #8]
   1a35c:	ldr	r0, [r6, #24]
   1a360:	b	1a314 <__assert_fail@plt+0x7d20>
   1a364:	mov	r0, #1024	; 0x400
   1a368:	mov	r1, #0
   1a36c:	ldr	r4, [r4, #8]
   1a370:	mov	r2, #512	; 0x200
   1a374:	mov	r3, #0
   1a378:	strd	r2, [sp]
   1a37c:	mov	r3, #0
   1a380:	add	r2, sp, #32
   1a384:	strd	r0, [sp, #8]
   1a388:	ldrd	r0, [r6, #64]	; 0x40
   1a38c:	b	1a314 <__assert_fail@plt+0x7d20>
   1a390:	mov	r0, #1
   1a394:	mov	r1, #0
   1a398:	ldr	r4, [r4, #8]
   1a39c:	mov	r3, #0
   1a3a0:	add	r2, sp, #32
   1a3a4:	strd	r0, [sp]
   1a3a8:	strd	r0, [sp, #8]
   1a3ac:	ldrd	r0, [r6, #96]	; 0x60
   1a3b0:	b	1a314 <__assert_fail@plt+0x7d20>
   1a3b4:	mov	r0, r2
   1a3b8:	bl	2de7c <__assert_fail@plt+0x1b888>
   1a3bc:	mov	r6, r0
   1a3c0:	bl	12300 <strlen@plt>
   1a3c4:	sub	r0, r0, #1
   1a3c8:	adds	r2, r6, r0
   1a3cc:	bcs	1a404 <__assert_fail@plt+0x7e10>
   1a3d0:	ldrb	r3, [r6, r0]
   1a3d4:	cmp	r3, #47	; 0x2f
   1a3d8:	bne	1a404 <__assert_fail@plt+0x7e10>
   1a3dc:	sub	r3, r2, #1
   1a3e0:	sub	r0, r6, #1
   1a3e4:	b	1a3f8 <__assert_fail@plt+0x7e04>
   1a3e8:	ldrb	r1, [r2]
   1a3ec:	sub	r3, r3, #1
   1a3f0:	cmp	r1, #47	; 0x2f
   1a3f4:	bne	1a404 <__assert_fail@plt+0x7e10>
   1a3f8:	cmp	r0, r3
   1a3fc:	mov	r2, r3
   1a400:	bne	1a3e8 <__assert_fail@plt+0x7df4>
   1a404:	cmp	r2, r6
   1a408:	bls	1a41c <__assert_fail@plt+0x7e28>
   1a40c:	ldrb	r3, [r2, #1]
   1a410:	cmp	r3, #47	; 0x2f
   1a414:	moveq	r3, #0
   1a418:	strbeq	r3, [r2, #1]
   1a41c:	mov	r1, #47	; 0x2f
   1a420:	mov	r0, r6
   1a424:	bl	12468 <strrchr@plt>
   1a428:	subs	r3, r0, #0
   1a42c:	ldr	r1, [r4, #8]
   1a430:	beq	1a868 <__assert_fail@plt+0x8274>
   1a434:	mov	ip, #0
   1a438:	mov	r0, r5
   1a43c:	mov	r2, r6
   1a440:	strb	ip, [r3]
   1a444:	bl	19ef8 <__assert_fail@plt+0x7904>
   1a448:	b	1a774 <__assert_fail@plt+0x8180>
   1a44c:	ldr	r0, [r6, #28]
   1a450:	bl	125d0 <getgrgid@plt>
   1a454:	subs	r3, r0, #0
   1a458:	beq	1a2f0 <__assert_fail@plt+0x7cfc>
   1a45c:	ldr	r1, [r4, #8]
   1a460:	mov	ip, #115	; 0x73
   1a464:	mov	r0, r5
   1a468:	ldr	r2, [r4, #12]
   1a46c:	strb	ip, [r1, r2]
   1a470:	ldr	r2, [r3]
   1a474:	ldr	r1, [r4, #8]
   1a478:	bl	19e00 <__assert_fail@plt+0x780c>
   1a47c:	b	1a25c <__assert_fail@plt+0x7c68>
   1a480:	ldr	r0, [r6, #16]
   1a484:	and	r0, r0, #61440	; 0xf000
   1a488:	bl	19e60 <__assert_fail@plt+0x786c>
   1a48c:	mov	r2, r0
   1a490:	mov	r0, r5
   1a494:	ldr	r1, [r4, #8]
   1a498:	bl	19e00 <__assert_fail@plt+0x780c>
   1a49c:	b	1a25c <__assert_fail@plt+0x7c68>
   1a4a0:	ldr	r4, [r4, #8]
   1a4a4:	add	r3, sp, #32
   1a4a8:	ldrd	r0, [r6, #80]	; 0x50
   1a4ac:	strd	r0, [sp, #32]
   1a4b0:	ldm	r3, {r0, r1}
   1a4b4:	bl	19bf8 <__assert_fail@plt+0x7604>
   1a4b8:	mov	r2, r0
   1a4bc:	mov	r1, r4
   1a4c0:	mov	r0, r5
   1a4c4:	bl	19e00 <__assert_fail@plt+0x780c>
   1a4c8:	b	1a25c <__assert_fail@plt+0x7c68>
   1a4cc:	mov	r0, #1
   1a4d0:	mov	r1, #0
   1a4d4:	ldr	r4, [r4, #8]
   1a4d8:	mov	r3, #0
   1a4dc:	add	r2, sp, #32
   1a4e0:	strd	r0, [sp]
   1a4e4:	strd	r0, [sp, #8]
   1a4e8:	ldrd	r0, [r6, #48]	; 0x30
   1a4ec:	b	1a314 <__assert_fail@plt+0x7d20>
   1a4f0:	ldr	r1, [r4, #8]
   1a4f4:	bl	19ef8 <__assert_fail@plt+0x7904>
   1a4f8:	b	1a25c <__assert_fail@plt+0x7c68>
   1a4fc:	mov	r8, #1
   1a500:	mov	r9, #0
   1a504:	ldr	r4, [r4, #8]
   1a508:	mov	r3, #0
   1a50c:	add	r2, sp, #32
   1a510:	mov	r1, r3
   1a514:	strd	r8, [sp]
   1a518:	strd	r8, [sp, #8]
   1a51c:	ldr	r0, [r6, #20]
   1a520:	b	1a314 <__assert_fail@plt+0x7d20>
   1a524:	mov	r0, #1
   1a528:	mov	r1, #0
   1a52c:	ldr	r4, [r4, #8]
   1a530:	mov	r3, #0
   1a534:	add	r2, sp, #32
   1a538:	strd	r0, [sp]
   1a53c:	strd	r0, [sp, #8]
   1a540:	ldrd	r0, [r6]
   1a544:	b	1a314 <__assert_fail@plt+0x7d20>
   1a548:	mov	r0, r2
   1a54c:	bl	22450 <__assert_fail@plt+0xfe5c>
   1a550:	mov	r6, r0
   1a554:	mov	r2, r0
   1a558:	ldr	r1, [r4, #8]
   1a55c:	mov	r0, r5
   1a560:	bl	19ef8 <__assert_fail@plt+0x7904>
   1a564:	mov	r0, r6
   1a568:	bl	2f668 <__assert_fail@plt+0x1d074>
   1a56c:	b	1a25c <__assert_fail@plt+0x7c68>
   1a570:	ldr	r4, [r4, #8]
   1a574:	mov	r1, r2
   1a578:	mov	r0, r6
   1a57c:	bl	1b46c <__assert_fail@plt+0x8e78>
   1a580:	mov	r2, r0
   1a584:	mov	r0, r5
   1a588:	mov	r1, r4
   1a58c:	bl	19ef8 <__assert_fail@plt+0x7904>
   1a590:	b	1a25c <__assert_fail@plt+0x7c68>
   1a594:	movw	r6, #40512	; 0x9e40
   1a598:	movt	r6, #5
   1a59c:	ldr	r0, [r6, #20]
   1a5a0:	add	r0, r0, #1
   1a5a4:	bl	2da2c <__assert_fail@plt+0x1b438>
   1a5a8:	ldr	r6, [r6, #20]
   1a5ac:	mov	r1, r7
   1a5b0:	mov	r8, r0
   1a5b4:	mov	r2, r6
   1a5b8:	bl	12024 <memcpy@plt>
   1a5bc:	mov	r3, #0
   1a5c0:	mov	r0, r5
   1a5c4:	ldr	r1, [r4, #8]
   1a5c8:	mov	r2, r8
   1a5cc:	strb	r3, [r8, r6]
   1a5d0:	bl	19e00 <__assert_fail@plt+0x780c>
   1a5d4:	mov	r0, r8
   1a5d8:	bl	2f668 <__assert_fail@plt+0x1d074>
   1a5dc:	b	1a25c <__assert_fail@plt+0x7c68>
   1a5e0:	ldrd	r0, [r6, #72]	; 0x48
   1a5e4:	add	r3, sp, #16
   1a5e8:	ldr	r4, [r4, #8]
   1a5ec:	strd	r0, [sp, #16]
   1a5f0:	b	1a4b0 <__assert_fail@plt+0x7ebc>
   1a5f4:	movw	r6, #40512	; 0x9e40
   1a5f8:	movt	r6, #5
   1a5fc:	movw	r3, #40556	; 0x9e6c
   1a600:	movt	r3, #5
   1a604:	ldr	r1, [r6, #12]
   1a608:	add	r2, sp, #32
   1a60c:	ldr	r0, [r6, #16]
   1a610:	ldr	r3, [r3, #64]	; 0x40
   1a614:	blx	r3
   1a618:	cmp	r0, #0
   1a61c:	mov	r0, r5
   1a620:	blt	1a7ac <__assert_fail@plt+0x81b8>
   1a624:	ldr	r1, [r4, #8]
   1a628:	ldr	r2, [sp, #32]
   1a62c:	bl	19e00 <__assert_fail@plt+0x780c>
   1a630:	ldr	r0, [sp, #32]
   1a634:	bl	1251c <freecon@plt>
   1a638:	b	1a25c <__assert_fail@plt+0x7c68>
   1a63c:	ldr	r2, [r6, #16]
   1a640:	ldr	r1, [r4, #8]
   1a644:	ubfx	r2, r2, #0, #12
   1a648:	bl	19e00 <__assert_fail@plt+0x780c>
   1a64c:	b	1a25c <__assert_fail@plt+0x7c68>
   1a650:	mov	r0, #512	; 0x200
   1a654:	mov	r1, #0
   1a658:	ldr	r4, [r4, #8]
   1a65c:	mov	r3, #0
   1a660:	add	r2, sp, #32
   1a664:	strd	r0, [sp]
   1a668:	strd	r0, [sp, #8]
   1a66c:	ldrd	r0, [r6, #64]	; 0x40
   1a670:	b	1a314 <__assert_fail@plt+0x7d20>
   1a674:	ldrd	r8, [r6, #48]	; 0x30
   1a678:	ldr	r4, [r4, #8]
   1a67c:	ldrd	r0, [r6, #64]	; 0x40
   1a680:	orrs	r3, r8, r9
   1a684:	bne	1a808 <__assert_fail@plt+0x8214>
   1a688:	orrs	r3, r0, r1
   1a68c:	beq	1a860 <__assert_fail@plt+0x826c>
   1a690:	vldr	d7, [pc, #552]	; 1a8c0 <__assert_fail@plt+0x82cc>
   1a694:	cmp	r0, #0
   1a698:	sbcs	r3, r1, #0
   1a69c:	vldr	d6, [pc, #548]	; 1a8c8 <__assert_fail@plt+0x82d4>
   1a6a0:	vmovge.f64	d7, d6
   1a6a4:	mov	r1, r4
   1a6a8:	mov	r0, r5
   1a6ac:	vmov	r2, r3, d7
   1a6b0:	bl	19e00 <__assert_fail@plt+0x780c>
   1a6b4:	b	1a25c <__assert_fail@plt+0x7c68>
   1a6b8:	movw	r3, #40512	; 0x9e40
   1a6bc:	movt	r3, #5
   1a6c0:	ldr	r2, [r3]
   1a6c4:	cmp	r2, #0
   1a6c8:	movwle	r2, #17776	; 0x4570
   1a6cc:	movtle	r2, #4
   1a6d0:	ble	1a6e8 <__assert_fail@plt+0x80f4>
   1a6d4:	ldr	r2, [r3, #20]
   1a6d8:	ldrb	r3, [r7, r2]
   1a6dc:	add	r2, r7, r2
   1a6e0:	cmp	r3, #47	; 0x2f
   1a6e4:	addeq	r2, r2, #1
   1a6e8:	mov	r0, r5
   1a6ec:	ldr	r1, [r4, #8]
   1a6f0:	bl	19ef8 <__assert_fail@plt+0x7904>
   1a6f4:	b	1a25c <__assert_fail@plt+0x7c68>
   1a6f8:	mov	r0, r6
   1a6fc:	add	r1, sp, #32
   1a700:	bl	22794 <__assert_fail@plt+0x101a0>
   1a704:	mov	r3, #0
   1a708:	add	r2, sp, #32
   1a70c:	ldr	r1, [r4, #8]
   1a710:	mov	r0, r5
   1a714:	strb	r3, [sp, #42]	; 0x2a
   1a718:	bl	19e00 <__assert_fail@plt+0x780c>
   1a71c:	b	1a25c <__assert_fail@plt+0x7c68>
   1a720:	movw	r3, #40512	; 0x9e40
   1a724:	movt	r3, #5
   1a728:	ldr	r1, [r4, #8]
   1a72c:	ldr	r2, [r3]
   1a730:	bl	19e00 <__assert_fail@plt+0x780c>
   1a734:	b	1a25c <__assert_fail@plt+0x7c68>
   1a738:	ldrd	r0, [r6, #88]	; 0x58
   1a73c:	add	r3, sp, #24
   1a740:	ldr	r4, [r4, #8]
   1a744:	strd	r0, [sp, #24]
   1a748:	b	1a4b0 <__assert_fail@plt+0x7ebc>
   1a74c:	ldr	r3, [r6, #16]
   1a750:	and	r3, r3, #61440	; 0xf000
   1a754:	cmp	r3, #40960	; 0xa000
   1a758:	beq	1a830 <__assert_fail@plt+0x823c>
   1a75c:	movw	r2, #17776	; 0x4570
   1a760:	movt	r2, #4
   1a764:	ldr	r1, [r4, #8]
   1a768:	mov	r0, r5
   1a76c:	mov	r6, #0
   1a770:	bl	19ef8 <__assert_fail@plt+0x7904>
   1a774:	mov	r0, r6
   1a778:	bl	2f668 <__assert_fail@plt+0x1d074>
   1a77c:	b	1a25c <__assert_fail@plt+0x7c68>
   1a780:	mov	r2, #5
   1a784:	movw	r1, #19828	; 0x4d74
   1a788:	movt	r1, #4
   1a78c:	mov	r0, #0
   1a790:	bl	120b4 <dcgettext@plt>
   1a794:	mov	r2, r0
   1a798:	movw	r3, #19864	; 0x4d98
   1a79c:	movt	r3, #4
   1a7a0:	mov	r1, #0
   1a7a4:	mov	r0, #1
   1a7a8:	bl	121ec <error@plt>
   1a7ac:	movw	r2, #17776	; 0x4570
   1a7b0:	movt	r2, #4
   1a7b4:	ldr	r1, [r4, #8]
   1a7b8:	bl	19e00 <__assert_fail@plt+0x780c>
   1a7bc:	bl	12348 <__errno_location@plt>
   1a7c0:	ldr	r4, [r0]
   1a7c4:	mov	r2, #5
   1a7c8:	movw	r1, #12184	; 0x2f98
   1a7cc:	movt	r1, #4
   1a7d0:	mov	r0, #0
   1a7d4:	bl	120b4 <dcgettext@plt>
   1a7d8:	mov	r5, r0
   1a7dc:	mov	r1, r7
   1a7e0:	mov	r0, #0
   1a7e4:	bl	192f4 <__assert_fail@plt+0x6d00>
   1a7e8:	mov	r3, r0
   1a7ec:	mov	r2, r5
   1a7f0:	mov	r1, r4
   1a7f4:	mov	r0, #0
   1a7f8:	bl	121ec <error@plt>
   1a7fc:	mov	r3, #1
   1a800:	str	r3, [r6, #28]
   1a804:	b	1a25c <__assert_fail@plt+0x7c68>
   1a808:	bl	42440 <__assert_fail@plt+0x2fe4c>
   1a80c:	vmov	d7, r0, r1
   1a810:	mov	r0, r8
   1a814:	mov	r1, r9
   1a818:	vldr	d8, [pc, #176]	; 1a8d0 <__assert_fail@plt+0x82dc>
   1a81c:	vmul.f64	d8, d7, d8
   1a820:	bl	42440 <__assert_fail@plt+0x2fe4c>
   1a824:	vmov	d7, r0, r1
   1a828:	vdiv.f64	d7, d8, d7
   1a82c:	b	1a6a4 <__assert_fail@plt+0x80b0>
   1a830:	movw	r8, #40512	; 0x9e40
   1a834:	movt	r8, #5
   1a838:	ldr	r1, [r8, #12]
   1a83c:	ldr	r0, [r8, #16]
   1a840:	bl	21ebc <__assert_fail@plt+0xf8c8>
   1a844:	subs	r6, r0, #0
   1a848:	beq	1a894 <__assert_fail@plt+0x82a0>
   1a84c:	mov	r0, r5
   1a850:	mov	r2, r6
   1a854:	ldr	r1, [r4, #8]
   1a858:	bl	19ef8 <__assert_fail@plt+0x7904>
   1a85c:	b	1a774 <__assert_fail@plt+0x8180>
   1a860:	vldr	d7, [pc, #112]	; 1a8d8 <__assert_fail@plt+0x82e4>
   1a864:	b	1a6a4 <__assert_fail@plt+0x80b0>
   1a868:	mov	r0, r5
   1a86c:	movw	r2, #24608	; 0x6020
   1a870:	movt	r2, #4
   1a874:	bl	19ef8 <__assert_fail@plt+0x7904>
   1a878:	b	1a774 <__assert_fail@plt+0x8180>
   1a87c:	ldr	r0, [sp, #48]	; 0x30
   1a880:	b	1a484 <__assert_fail@plt+0x7e90>
   1a884:	movw	r2, #14204	; 0x377c
   1a888:	movt	r2, #4
   1a88c:	bl	19e00 <__assert_fail@plt+0x780c>
   1a890:	b	1a25c <__assert_fail@plt+0x7c68>
   1a894:	bl	12348 <__errno_location@plt>
   1a898:	mov	r1, r7
   1a89c:	ldr	r0, [r0]
   1a8a0:	bl	19308 <__assert_fail@plt+0x6d14>
   1a8a4:	mov	r3, #1
   1a8a8:	str	r3, [r8, #28]
   1a8ac:	b	1a75c <__assert_fail@plt+0x8168>
   1a8b0:	movw	r2, #32020	; 0x7d14
   1a8b4:	movt	r2, #4
   1a8b8:	bl	19e00 <__assert_fail@plt+0x780c>
   1a8bc:	b	1a25c <__assert_fail@plt+0x7c68>
   1a8c0:	andeq	r0, r0, r0
   1a8c4:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1a8c8:	andeq	r0, r0, r0
   1a8cc:	svcvc	0x00f00000	; IMB
   1a8d0:	andeq	r0, r0, r0
   1a8d4:	addmi	r0, r0, r0
   1a8d8:	andeq	r0, r0, r0
   1a8dc:	svccc	0x00f00000	; IMB
   1a8e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a8e4:	ldr	r4, [r2, #40]	; 0x28
   1a8e8:	strd	r6, [sp, #8]
   1a8ec:	strd	r8, [sp, #16]
   1a8f0:	strd	sl, [sp, #24]
   1a8f4:	str	lr, [sp, #32]
   1a8f8:	sub	sp, sp, #12
   1a8fc:	cmp	r4, #0
   1a900:	beq	1a9d4 <__assert_fail@plt+0x83e0>
   1a904:	movw	r9, #17776	; 0x4570
   1a908:	movt	r9, #4
   1a90c:	add	r6, r2, #40	; 0x28
   1a910:	mov	r5, r1
   1a914:	mov	r7, r0
   1a918:	mov	r8, sp
   1a91c:	mvn	sl, #0
   1a920:	ldr	r3, [r4]
   1a924:	cmp	r3, #2
   1a928:	bne	1aa48 <__assert_fail@plt+0x8454>
   1a92c:	ldrb	r2, [r4, #5]
   1a930:	cmp	r2, #0
   1a934:	beq	1aa48 <__assert_fail@plt+0x8454>
   1a938:	ldrb	r3, [r4, #4]
   1a93c:	sub	r3, r3, #65	; 0x41
   1a940:	cmp	r3, #19
   1a944:	ldrls	pc, [pc, r3, lsl #2]
   1a948:	b	1aa60 <__assert_fail@plt+0x846c>
   1a94c:	andeq	sl, r1, r4, lsr sl
   1a950:	andeq	sl, r1, r8, lsl #20
   1a954:	strdeq	sl, [r1], -r4
   1a958:	andeq	sl, r1, r0, ror #20
   1a95c:	andeq	sl, r1, r0, ror #20
   1a960:	andeq	sl, r1, r0, ror #20
   1a964:	andeq	sl, r1, r0, ror #20
   1a968:	andeq	sl, r1, r0, ror #20
   1a96c:	andeq	sl, r1, r0, ror #20
   1a970:	andeq	sl, r1, r0, ror #20
   1a974:	andeq	sl, r1, r0, ror #20
   1a978:	andeq	sl, r1, r0, ror #20
   1a97c:	andeq	sl, r1, r0, ror #20
   1a980:	andeq	sl, r1, r0, ror #20
   1a984:	andeq	sl, r1, r0, ror #20
   1a988:	andeq	sl, r1, r0, ror #20
   1a98c:	andeq	sl, r1, r0, ror #20
   1a990:	andeq	sl, r1, r0, ror #20
   1a994:	andeq	sl, r1, r0, ror #20
   1a998:	muleq	r1, ip, r9
   1a99c:	ldr	fp, [r4, #8]
   1a9a0:	ldr	r1, [r5, #80]	; 0x50
   1a9a4:	ldr	r3, [r5, #84]	; 0x54
   1a9a8:	str	r1, [sp]
   1a9ac:	str	r3, [sp, #4]
   1a9b0:	ldm	r8, {r0, r1}
   1a9b4:	bl	19670 <__assert_fail@plt+0x707c>
   1a9b8:	mov	r2, r0
   1a9bc:	mov	r1, fp
   1a9c0:	mov	r0, r6
   1a9c4:	bl	19e00 <__assert_fail@plt+0x780c>
   1a9c8:	ldr	r4, [r4, #16]
   1a9cc:	cmp	r4, #0
   1a9d0:	bne	1a920 <__assert_fail@plt+0x832c>
   1a9d4:	mov	r0, #1
   1a9d8:	add	sp, sp, #12
   1a9dc:	ldrd	r4, [sp]
   1a9e0:	ldrd	r6, [sp, #8]
   1a9e4:	ldrd	r8, [sp, #16]
   1a9e8:	ldrd	sl, [sp, #24]
   1a9ec:	add	sp, sp, #32
   1a9f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9f4:	ldr	r1, [r5, #88]	; 0x58
   1a9f8:	ldr	fp, [r4, #8]
   1a9fc:	ldr	r3, [r5, #92]	; 0x5c
   1aa00:	str	r1, [sp]
   1aa04:	b	1a9ac <__assert_fail@plt+0x83b8>
   1aa08:	cmp	r2, #64	; 0x40
   1aa0c:	str	sl, [sp]
   1aa10:	mvneq	r3, #0
   1aa14:	str	sl, [sp, #4]
   1aa18:	ldr	fp, [r4, #8]
   1aa1c:	beq	1a9ac <__assert_fail@plt+0x83b8>
   1aa20:	mov	r1, fp
   1aa24:	mov	r2, r9
   1aa28:	mov	r0, r6
   1aa2c:	bl	19e00 <__assert_fail@plt+0x780c>
   1aa30:	b	1a9c8 <__assert_fail@plt+0x83d4>
   1aa34:	ldrd	r0, [r5, #72]	; 0x48
   1aa38:	ldr	fp, [r4, #8]
   1aa3c:	ldr	r3, [r5, #76]	; 0x4c
   1aa40:	strd	r0, [r8]
   1aa44:	b	1a9ac <__assert_fail@plt+0x83b8>
   1aa48:	mov	r3, r5
   1aa4c:	mov	r2, r7
   1aa50:	mov	r1, r4
   1aa54:	mov	r0, r6
   1aa58:	bl	19f80 <__assert_fail@plt+0x798c>
   1aa5c:	b	1a9c8 <__assert_fail@plt+0x83d4>
   1aa60:	movw	r1, #19400	; 0x4bc8
   1aa64:	movt	r1, #4
   1aa68:	ldr	r3, [pc, #12]	; 1aa7c <__assert_fail@plt+0x8488>
   1aa6c:	movw	r0, #28528	; 0x6f70
   1aa70:	movt	r0, #4
   1aa74:	movw	r2, #1304	; 0x518
   1aa78:	bl	125f4 <__assert_fail@plt>
   1aa7c:	andeq	r4, r4, r4, lsl #23
   1aa80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aa84:	strd	r6, [sp, #8]
   1aa88:	strd	r8, [sp, #16]
   1aa8c:	strd	sl, [sp, #24]
   1aa90:	str	lr, [sp, #32]
   1aa94:	sub	sp, sp, #4
   1aa98:	ldrb	r5, [sp, #40]	; 0x28
   1aa9c:	ldrb	r8, [sp, #44]	; 0x2c
   1aaa0:	ldr	r9, [sp, #48]	; 0x30
   1aaa4:	cmp	r5, #123	; 0x7b
   1aaa8:	beq	1ae10 <__assert_fail@plt+0x881c>
   1aaac:	cmp	r5, #91	; 0x5b
   1aab0:	beq	1adf4 <__assert_fail@plt+0x8800>
   1aab4:	cmp	r5, #40	; 0x28
   1aab8:	beq	1ae2c <__assert_fail@plt+0x8838>
   1aabc:	mov	r7, r0
   1aac0:	mov	r0, #20
   1aac4:	mov	r6, r2
   1aac8:	mov	sl, r3
   1aacc:	mov	fp, r1
   1aad0:	bl	2da2c <__assert_fail@plt+0x1b438>
   1aad4:	mov	r4, r0
   1aad8:	mov	r3, #0
   1aadc:	add	r0, r6, #2
   1aae0:	str	r4, [r7]
   1aae4:	str	sl, [r4]
   1aae8:	strb	r5, [r4, #4]
   1aaec:	strb	r8, [r4, #5]
   1aaf0:	str	r6, [r4, #12]
   1aaf4:	str	r3, [r4, #16]
   1aaf8:	bl	2da2c <__assert_fail@plt+0x1b438>
   1aafc:	mov	r2, r6
   1ab00:	mov	r1, fp
   1ab04:	str	r0, [r4, #8]
   1ab08:	bl	12390 <strncpy@plt>
   1ab0c:	cmp	sl, #1
   1ab10:	mov	r3, r0
   1ab14:	add	r2, r0, r6
   1ab18:	bls	1ac88 <__assert_fail@plt+0x8694>
   1ab1c:	cmp	sl, #2
   1ab20:	bne	1ae64 <__assert_fail@plt+0x8870>
   1ab24:	sub	r5, r5, #37	; 0x25
   1ab28:	cmp	r5, #84	; 0x54
   1ab2c:	ldrls	pc, [pc, r5, lsl #2]
   1ab30:	b	1adec <__assert_fail@plt+0x87f8>
   1ab34:	andeq	sl, r1, r0, asr #27
   1ab38:	andeq	sl, r1, ip, ror #27
   1ab3c:	andeq	sl, r1, ip, ror #27
   1ab40:	andeq	sl, r1, ip, ror #27
   1ab44:	andeq	sl, r1, ip, ror #27
   1ab48:	andeq	sl, r1, ip, ror #27
   1ab4c:	andeq	sl, r1, ip, ror #27
   1ab50:	andeq	sl, r1, ip, ror #27
   1ab54:	andeq	sl, r1, ip, ror #27
   1ab58:	andeq	sl, r1, ip, ror #27
   1ab5c:	andeq	sl, r1, ip, ror #27
   1ab60:	andeq	sl, r1, ip, ror #27
   1ab64:	andeq	sl, r1, ip, ror #27
   1ab68:	andeq	sl, r1, ip, ror #27
   1ab6c:	andeq	sl, r1, ip, ror #27
   1ab70:	andeq	sl, r1, ip, ror #27
   1ab74:	andeq	sl, r1, ip, ror #27
   1ab78:	andeq	sl, r1, ip, ror #27
   1ab7c:	andeq	sl, r1, ip, ror #27
   1ab80:	andeq	sl, r1, ip, ror #27
   1ab84:	andeq	sl, r1, ip, ror #27
   1ab88:	andeq	sl, r1, ip, ror #27
   1ab8c:	andeq	sl, r1, ip, ror #27
   1ab90:	andeq	sl, r1, ip, ror #27
   1ab94:	andeq	sl, r1, ip, ror #27
   1ab98:	andeq	sl, r1, ip, ror #27
   1ab9c:	andeq	sl, r1, ip, ror #27
   1aba0:	andeq	sl, r1, ip, ror #27
   1aba4:	andeq	sl, r1, r0, ror #25
   1aba8:	andeq	sl, r1, r0, ror #25
   1abac:	andeq	sl, r1, r0, ror #25
   1abb0:	andeq	sl, r1, r0, ror #25
   1abb4:	andeq	sl, r1, ip, ror #27
   1abb8:	andeq	sl, r1, r0, ror #25
   1abbc:	andeq	sl, r1, r0, ror #25
   1abc0:	andeq	sl, r1, r0, asr #25
   1abc4:	andeq	sl, r1, ip, ror #27
   1abc8:	andeq	sl, r1, ip, ror #27
   1abcc:	andeq	sl, r1, ip, ror #27
   1abd0:	andeq	sl, r1, ip, ror #27
   1abd4:	andeq	sl, r1, r0, ror #25
   1abd8:	andeq	sl, r1, ip, ror #27
   1abdc:	andeq	sl, r1, ip, ror #27
   1abe0:	andeq	sl, r1, r0, asr #25
   1abe4:	andeq	sl, r1, ip, ror #27
   1abe8:	andeq	sl, r1, ip, ror #27
   1abec:	andeq	sl, r1, ip, lsr #26
   1abf0:	andeq	sl, r1, r0, ror #25
   1abf4:	andeq	sl, r1, r0, ror #25
   1abf8:	andeq	sl, r1, ip, ror #27
   1abfc:	andeq	sl, r1, ip, ror #27
   1ac00:	andeq	sl, r1, ip, ror #27
   1ac04:	andeq	sl, r1, r4, lsr #27
   1ac08:	muleq	r1, r0, sp
   1ac0c:	andeq	sl, r1, ip, ror #27
   1ac10:	andeq	sl, r1, ip, ror #27
   1ac14:	andeq	sl, r1, ip, ror #27
   1ac18:	andeq	sl, r1, ip, ror #27
   1ac1c:	andeq	sl, r1, ip, ror #27
   1ac20:	andeq	sl, r1, ip, ror #27
   1ac24:	andeq	sl, r1, r0, ror #25
   1ac28:	andeq	sl, r1, r0, ror #25
   1ac2c:	andeq	sl, r1, r0, ror #25
   1ac30:	andeq	sl, r1, r0, lsl #27
   1ac34:	andeq	sl, r1, ip, ror #27
   1ac38:	andeq	sl, r1, r0, asr #25
   1ac3c:	andeq	sl, r1, r0, ror #25
   1ac40:	andeq	sl, r1, r0, asr #25
   1ac44:	andeq	sl, r1, r4, ror #26
   1ac48:	andeq	sl, r1, ip, ror #27
   1ac4c:	andeq	sl, r1, r0, ror #25
   1ac50:	ldrdeq	sl, [r1], -r0
   1ac54:	andeq	sl, r1, r8, asr #26
   1ac58:	andeq	sl, r1, r0, ror #25
   1ac5c:	andeq	sl, r1, ip, ror #27
   1ac60:	andeq	sl, r1, r0, asr #25
   1ac64:	andeq	sl, r1, ip, ror #27
   1ac68:	andeq	sl, r1, ip, ror #27
   1ac6c:	andeq	sl, r1, r0, ror #25
   1ac70:	andeq	sl, r1, r0, ror #25
   1ac74:	andeq	sl, r1, r0, ror #25
   1ac78:	andeq	sl, r1, ip, ror #27
   1ac7c:	andeq	sl, r1, ip, ror #27
   1ac80:	andeq	sl, r1, ip, ror #27
   1ac84:	andeq	sl, r1, r0, lsl sp
   1ac88:	cmp	r5, #0
   1ac8c:	bne	1ae48 <__assert_fail@plt+0x8854>
   1ac90:	cmp	r8, #0
   1ac94:	bne	1ae80 <__assert_fail@plt+0x888c>
   1ac98:	strb	r8, [r0, r6]
   1ac9c:	ldr	r0, [r7]
   1aca0:	add	r0, r0, #16
   1aca4:	add	sp, sp, #4
   1aca8:	ldrd	r4, [sp]
   1acac:	ldrd	r6, [sp, #8]
   1acb0:	ldrd	r8, [sp, #16]
   1acb4:	ldrd	sl, [sp, #24]
   1acb8:	add	sp, sp, #32
   1acbc:	pop	{pc}		; (ldr pc, [sp], #4)
   1acc0:	mov	r1, #115	; 0x73
   1acc4:	add	r2, r2, #1
   1acc8:	strb	r1, [r0, r6]
   1accc:	mov	r3, #0
   1acd0:	strb	r3, [r2]
   1acd4:	ldr	r0, [r7]
   1acd8:	add	r0, r0, #16
   1acdc:	b	1aca4 <__assert_fail@plt+0x86b0>
   1ace0:	mov	r1, #115	; 0x73
   1ace4:	mov	r0, #1
   1ace8:	add	r2, r2, r0
   1acec:	strb	r1, [r3, r6]
   1acf0:	mov	r1, #3
   1acf4:	strb	r0, [r9, #18]
   1acf8:	ldr	r3, [r9, #24]
   1acfc:	mov	r0, #0
   1ad00:	strb	r0, [r2]
   1ad04:	cmp	r3, r1
   1ad08:	strcc	r1, [r9, #24]
   1ad0c:	b	1acd4 <__assert_fail@plt+0x86e0>
   1ad10:	mov	r0, #1
   1ad14:	mov	r1, #115	; 0x73
   1ad18:	add	r2, r2, r0
   1ad1c:	strb	r1, [r3, r6]
   1ad20:	mov	r1, #2
   1ad24:	strb	r0, [r9, #19]
   1ad28:	b	1acf8 <__assert_fail@plt+0x8704>
   1ad2c:	mov	r0, #1
   1ad30:	mov	r1, #103	; 0x67
   1ad34:	add	r2, r2, r0
   1ad38:	strb	r1, [r3, r6]
   1ad3c:	mov	r1, #3
   1ad40:	strb	r0, [r9, #18]
   1ad44:	b	1acf8 <__assert_fail@plt+0x8704>
   1ad48:	mov	r1, #111	; 0x6f
   1ad4c:	mov	r0, #1
   1ad50:	add	r2, r2, r0
   1ad54:	strb	r1, [r3, r6]
   1ad58:	mov	r1, #3
   1ad5c:	strb	r0, [r9, #18]
   1ad60:	b	1acf8 <__assert_fail@plt+0x8704>
   1ad64:	mov	r0, #1
   1ad68:	mov	ip, #115	; 0x73
   1ad6c:	add	r2, r2, r0
   1ad70:	mov	r1, r0
   1ad74:	strb	ip, [r3, r6]
   1ad78:	strb	r0, [r9, #20]
   1ad7c:	b	1acf8 <__assert_fail@plt+0x8704>
   1ad80:	mov	r1, #100	; 0x64
   1ad84:	add	r2, r2, #1
   1ad88:	strb	r1, [r0, r6]
   1ad8c:	b	1accc <__assert_fail@plt+0x86d8>
   1ad90:	mov	r0, #115	; 0x73
   1ad94:	add	r2, r2, #1
   1ad98:	mov	r1, #5
   1ad9c:	strb	r0, [r3, r6]
   1ada0:	b	1acf8 <__assert_fail@plt+0x8704>
   1ada4:	mov	r0, #1
   1ada8:	mov	r1, #115	; 0x73
   1adac:	add	r2, r2, r0
   1adb0:	strb	r1, [r3, r6]
   1adb4:	mov	r1, #2
   1adb8:	strb	r0, [r9, #18]
   1adbc:	b	1acf8 <__assert_fail@plt+0x8704>
   1adc0:	mov	r1, #37	; 0x25
   1adc4:	add	r2, r2, #1
   1adc8:	strb	r1, [r0, r6]
   1adcc:	b	1accc <__assert_fail@plt+0x86d8>
   1add0:	mov	r0, #1
   1add4:	mov	r1, #115	; 0x73
   1add8:	add	r2, r2, r0
   1addc:	strb	r1, [r3, r6]
   1ade0:	mov	r1, #4
   1ade4:	strb	r0, [r9, #18]
   1ade8:	b	1acf8 <__assert_fail@plt+0x8704>
   1adec:	mov	r1, #0
   1adf0:	b	1acf8 <__assert_fail@plt+0x8704>
   1adf4:	movw	r1, #19400	; 0x4bc8
   1adf8:	movt	r1, #4
   1adfc:	ldr	r3, [pc, #152]	; 1ae9c <__assert_fail@plt+0x88a8>
   1ae00:	movw	r0, #19888	; 0x4db0
   1ae04:	movt	r0, #4
   1ae08:	mov	r2, #79	; 0x4f
   1ae0c:	bl	125f4 <__assert_fail@plt>
   1ae10:	movw	r1, #19400	; 0x4bc8
   1ae14:	movt	r1, #4
   1ae18:	ldr	r3, [pc, #124]	; 1ae9c <__assert_fail@plt+0x88a8>
   1ae1c:	movw	r0, #19868	; 0x4d9c
   1ae20:	movt	r0, #4
   1ae24:	mov	r2, #78	; 0x4e
   1ae28:	bl	125f4 <__assert_fail@plt>
   1ae2c:	movw	r1, #19400	; 0x4bc8
   1ae30:	movt	r1, #4
   1ae34:	ldr	r3, [pc, #96]	; 1ae9c <__assert_fail@plt+0x88a8>
   1ae38:	movw	r0, #19908	; 0x4dc4
   1ae3c:	movt	r0, #4
   1ae40:	mov	r2, #80	; 0x50
   1ae44:	bl	125f4 <__assert_fail@plt>
   1ae48:	movw	r1, #19400	; 0x4bc8
   1ae4c:	movt	r1, #4
   1ae50:	ldr	r3, [pc, #68]	; 1ae9c <__assert_fail@plt+0x88a8>
   1ae54:	movw	r0, #19928	; 0x4dd8
   1ae58:	movt	r0, #4
   1ae5c:	mov	r2, #97	; 0x61
   1ae60:	bl	125f4 <__assert_fail@plt>
   1ae64:	movw	r1, #19400	; 0x4bc8
   1ae68:	movt	r1, #4
   1ae6c:	ldr	r3, [pc, #40]	; 1ae9c <__assert_fail@plt+0x88a8>
   1ae70:	movw	r0, #19972	; 0x4e04
   1ae74:	movt	r0, #4
   1ae78:	mov	r2, #105	; 0x69
   1ae7c:	bl	125f4 <__assert_fail@plt>
   1ae80:	movw	r1, #19400	; 0x4bc8
   1ae84:	movt	r1, #4
   1ae88:	ldr	r3, [pc, #12]	; 1ae9c <__assert_fail@plt+0x88a8>
   1ae8c:	movw	r0, #19948	; 0x4dec
   1ae90:	movt	r0, #4
   1ae94:	mov	r2, #98	; 0x62
   1ae98:	bl	125f4 <__assert_fail@plt>
   1ae9c:	muleq	r4, r4, fp
   1aea0:	mov	r3, r1
   1aea4:	movw	r1, #43232	; 0xa8e0
   1aea8:	movt	r1, #1
   1aeac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aeb0:	mov	r4, r0
   1aeb4:	mov	r0, r3
   1aeb8:	strd	r6, [sp, #8]
   1aebc:	mov	r5, r2
   1aec0:	strd	r8, [sp, #16]
   1aec4:	strd	sl, [sp, #24]
   1aec8:	str	lr, [sp, #32]
   1aecc:	sub	sp, sp, #36	; 0x24
   1aed0:	bl	17f60 <__assert_fail@plt+0x596c>
   1aed4:	ldrd	r2, [r4]
   1aed8:	mov	lr, r0
   1aedc:	movw	ip, #257	; 0x101
   1aee0:	add	r1, r0, #40	; 0x28
   1aee4:	str	r0, [sp, #20]
   1aee8:	strd	r2, [r0, #40]	; 0x28
   1aeec:	mov	r0, #0
   1aef0:	ldrd	r2, [r4, #8]
   1aef4:	strd	r2, [lr, #48]	; 0x30
   1aef8:	ldr	r3, [r4, #16]
   1aefc:	str	ip, [lr, #16]
   1af00:	str	r0, [lr, #24]
   1af04:	str	r0, [lr, #40]	; 0x28
   1af08:	str	r3, [lr, #56]	; 0x38
   1af0c:	ldrb	r3, [r5]
   1af10:	cmp	r3, r0
   1af14:	beq	1b024 <__assert_fail@plt+0x8a30>
   1af18:	movw	r2, #20084	; 0x4e74
   1af1c:	movt	r2, #4
   1af20:	movw	r9, #20076	; 0x4e6c
   1af24:	movt	r9, #4
   1af28:	str	r2, [sp, #28]
   1af2c:	movw	r2, #20264	; 0x4f28
   1af30:	movt	r2, #4
   1af34:	mov	sl, r1
   1af38:	mov	r8, r5
   1af3c:	str	r2, [sp, #24]
   1af40:	mov	r2, r3
   1af44:	b	1af60 <__assert_fail@plt+0x896c>
   1af48:	cmp	r2, #37	; 0x25
   1af4c:	beq	1b080 <__assert_fail@plt+0x8a8c>
   1af50:	add	r5, r5, #1
   1af54:	mov	r2, r4
   1af58:	cmp	r2, #0
   1af5c:	beq	1b018 <__assert_fail@plt+0x8a24>
   1af60:	cmp	r2, #92	; 0x5c
   1af64:	ldrb	r4, [r5, #1]
   1af68:	bne	1af48 <__assert_fail@plt+0x8954>
   1af6c:	cmp	r4, #99	; 0x63
   1af70:	beq	1b308 <__assert_fail@plt+0x8d14>
   1af74:	cmp	r4, #0
   1af78:	add	r7, r5, #1
   1af7c:	beq	1b188 <__assert_fail@plt+0x8b94>
   1af80:	sub	r2, r4, #48	; 0x30
   1af84:	uxtb	r1, r2
   1af88:	cmp	r1, #7
   1af8c:	movls	ip, #0
   1af90:	movls	r1, r7
   1af94:	movls	r0, ip
   1af98:	bls	1b044 <__assert_fail@plt+0x8a50>
   1af9c:	sub	r3, r4, #92	; 0x5c
   1afa0:	uxtb	r3, r3
   1afa4:	cmp	r3, #26
   1afa8:	bhi	1b1b4 <__assert_fail@plt+0x8bc0>
   1afac:	movw	r2, #19212	; 0x4b0c
   1afb0:	movt	r2, #4
   1afb4:	add	r3, r2, r3
   1afb8:	ldrb	r3, [r3, #152]	; 0x98
   1afbc:	cmp	r3, #0
   1afc0:	beq	1b1b4 <__assert_fail@plt+0x8bc0>
   1afc4:	mov	r2, r5
   1afc8:	mov	r6, r7
   1afcc:	strb	r3, [r2], #2
   1afd0:	mov	r7, r2
   1afd4:	ldr	r3, [sp, #20]
   1afd8:	mov	ip, #0
   1afdc:	sub	r2, r5, r8
   1afe0:	add	r2, r2, #1
   1afe4:	mov	r1, r8
   1afe8:	mov	r0, sl
   1afec:	str	ip, [sp]
   1aff0:	mov	r5, r7
   1aff4:	str	ip, [sp, #4]
   1aff8:	mov	r8, r7
   1affc:	str	r3, [sp, #8]
   1b000:	mov	r3, ip
   1b004:	bl	1aa80 <__assert_fail@plt+0x848c>
   1b008:	ldrb	r2, [r6, #1]
   1b00c:	mov	sl, r0
   1b010:	cmp	r2, #0
   1b014:	bne	1af60 <__assert_fail@plt+0x896c>
   1b018:	cmp	r8, r5
   1b01c:	mov	r3, r2
   1b020:	bcc	1b2e8 <__assert_fail@plt+0x8cf4>
   1b024:	mov	r0, #1
   1b028:	add	sp, sp, #36	; 0x24
   1b02c:	ldrd	r4, [sp]
   1b030:	ldrd	r6, [sp, #8]
   1b034:	ldrd	r8, [sp, #16]
   1b038:	ldrd	sl, [sp, #24]
   1b03c:	add	sp, sp, #32
   1b040:	pop	{pc}		; (ldr pc, [sp], #4)
   1b044:	uxtb	r2, r2
   1b048:	add	r3, ip, #1
   1b04c:	cmp	r2, #7
   1b050:	mov	r6, r1
   1b054:	bhi	1b28c <__assert_fail@plt+0x8c98>
   1b058:	add	r0, r4, r0, lsl #3
   1b05c:	add	r1, r1, #1
   1b060:	cmp	r3, #3
   1b064:	mov	r7, r1
   1b068:	sub	r0, r0, #48	; 0x30
   1b06c:	beq	1b294 <__assert_fail@plt+0x8ca0>
   1b070:	ldrb	r4, [r1]
   1b074:	mov	ip, r3
   1b078:	sub	r2, r4, #48	; 0x30
   1b07c:	b	1b044 <__assert_fail@plt+0x8a50>
   1b080:	cmp	r4, #0
   1b084:	beq	1b350 <__assert_fail@plt+0x8d5c>
   1b088:	cmp	r4, #37	; 0x25
   1b08c:	beq	1b1e8 <__assert_fail@plt+0x8bf4>
   1b090:	add	fp, r5, #2
   1b094:	mvn	r7, r5
   1b098:	b	1b0b4 <__assert_fail@plt+0x8ac0>
   1b09c:	mov	r1, r4
   1b0a0:	mov	r0, r9
   1b0a4:	bl	1230c <strchr@plt>
   1b0a8:	cmp	r0, #0
   1b0ac:	beq	1b0c0 <__assert_fail@plt+0x8acc>
   1b0b0:	ldrb	r4, [fp], #1
   1b0b4:	cmp	r4, #0
   1b0b8:	add	r6, r7, fp
   1b0bc:	bne	1b09c <__assert_fail@plt+0x8aa8>
   1b0c0:	bl	122b8 <__ctype_b_loc@plt>
   1b0c4:	add	r6, r6, #1
   1b0c8:	ldr	r1, [r0]
   1b0cc:	add	r6, r5, r6
   1b0d0:	b	1b0d8 <__assert_fail@plt+0x8ae4>
   1b0d4:	ldrb	r4, [r6], #1
   1b0d8:	lsl	r3, r4, #1
   1b0dc:	add	r0, r7, r6
   1b0e0:	ldrh	r3, [r1, r3]
   1b0e4:	tst	r3, #2048	; 0x800
   1b0e8:	bne	1b0d4 <__assert_fail@plt+0x8ae0>
   1b0ec:	cmp	r4, #46	; 0x2e
   1b0f0:	addne	r6, r5, r0
   1b0f4:	beq	1b29c <__assert_fail@plt+0x8ca8>
   1b0f8:	mov	r1, r4
   1b0fc:	ldr	r0, [sp, #28]
   1b100:	bl	1230c <strchr@plt>
   1b104:	cmp	r0, #0
   1b108:	beq	1b220 <__assert_fail@plt+0x8c2c>
   1b10c:	cmp	r4, #0
   1b110:	bne	1b2dc <__assert_fail@plt+0x8ce8>
   1b114:	mov	r1, r4
   1b118:	ldr	r0, [sp, #24]
   1b11c:	bl	1230c <strchr@plt>
   1b120:	subs	r7, r0, #0
   1b124:	bne	1b378 <__assert_fail@plt+0x8d84>
   1b128:	mov	r2, #5
   1b12c:	movw	r1, #20268	; 0x4f2c
   1b130:	movt	r1, #4
   1b134:	mov	r5, r6
   1b138:	bl	120b4 <dcgettext@plt>
   1b13c:	mov	r2, r0
   1b140:	ldrb	r3, [r5], #1
   1b144:	mov	r1, r7
   1b148:	mov	r0, r7
   1b14c:	bl	121ec <error@plt>
   1b150:	ldr	r3, [sp, #20]
   1b154:	mov	ip, #0
   1b158:	mov	r0, sl
   1b15c:	sub	r2, r5, r8
   1b160:	mov	r1, r8
   1b164:	str	ip, [sp]
   1b168:	str	ip, [sp, #4]
   1b16c:	str	r3, [sp, #8]
   1b170:	mov	r3, ip
   1b174:	bl	1aa80 <__assert_fail@plt+0x848c>
   1b178:	mov	sl, r0
   1b17c:	ldrb	r2, [r6, #1]
   1b180:	mov	r8, r5
   1b184:	b	1af58 <__assert_fail@plt+0x8964>
   1b188:	mov	r2, #5
   1b18c:	mov	r0, r4
   1b190:	movw	r1, #19992	; 0x4e18
   1b194:	movt	r1, #4
   1b198:	bl	120b4 <dcgettext@plt>
   1b19c:	mov	r2, r0
   1b1a0:	mov	r1, r4
   1b1a4:	mov	r0, r4
   1b1a8:	mov	r6, r5
   1b1ac:	bl	121ec <error@plt>
   1b1b0:	b	1afd4 <__assert_fail@plt+0x89e0>
   1b1b4:	mov	r2, #5
   1b1b8:	movw	r1, #20040	; 0x4e48
   1b1bc:	movt	r1, #4
   1b1c0:	mov	r0, #0
   1b1c4:	bl	120b4 <dcgettext@plt>
   1b1c8:	mov	r1, #0
   1b1cc:	mov	r2, r0
   1b1d0:	ldrb	r3, [r5, #1]
   1b1d4:	mov	r0, r1
   1b1d8:	add	r5, r5, #2
   1b1dc:	bl	121ec <error@plt>
   1b1e0:	ldrb	r2, [r5]
   1b1e4:	b	1af58 <__assert_fail@plt+0x8964>
   1b1e8:	add	r2, r5, #1
   1b1ec:	mov	ip, #0
   1b1f0:	mov	r6, r2
   1b1f4:	stm	sp, {r4, ip}
   1b1f8:	mov	r0, sl
   1b1fc:	sub	r2, r2, r8
   1b200:	ldr	ip, [sp, #20]
   1b204:	mov	r1, r8
   1b208:	mov	r3, #2
   1b20c:	add	r5, r6, #1
   1b210:	str	ip, [sp, #8]
   1b214:	bl	1aa80 <__assert_fail@plt+0x848c>
   1b218:	mov	sl, r0
   1b21c:	b	1b17c <__assert_fail@plt+0x8b88>
   1b220:	movw	r0, #20116	; 0x4e94
   1b224:	movt	r0, #4
   1b228:	mov	r1, r4
   1b22c:	bl	1230c <strchr@plt>
   1b230:	cmp	r0, #0
   1b234:	beq	1b114 <__assert_fail@plt+0x8b20>
   1b238:	ldrb	ip, [r6, #1]
   1b23c:	add	r5, r6, #1
   1b240:	cmp	ip, #0
   1b244:	movne	r2, r6
   1b248:	movne	r6, r5
   1b24c:	bne	1b1f4 <__assert_fail@plt+0x8c00>
   1b250:	mov	r1, r4
   1b254:	ldr	r0, [sp, #24]
   1b258:	bl	1230c <strchr@plt>
   1b25c:	subs	r7, r0, #0
   1b260:	bne	1b378 <__assert_fail@plt+0x8d84>
   1b264:	mov	r2, #5
   1b268:	movw	r1, #20188	; 0x4edc
   1b26c:	movt	r1, #4
   1b270:	bl	120b4 <dcgettext@plt>
   1b274:	mov	r2, r0
   1b278:	ldrb	r3, [r6]
   1b27c:	mov	r1, r7
   1b280:	mov	r0, r7
   1b284:	bl	121ec <error@plt>
   1b288:	b	1b150 <__assert_fail@plt+0x8b5c>
   1b28c:	mov	r7, r1
   1b290:	add	r6, r5, ip
   1b294:	strb	r0, [r5]
   1b298:	b	1afd4 <__assert_fail@plt+0x89e0>
   1b29c:	add	r6, r0, #1
   1b2a0:	ldrb	r4, [r5, r6]
   1b2a4:	add	r6, r5, r6
   1b2a8:	lsl	r2, r4, #1
   1b2ac:	ldrh	r2, [r1, r2]
   1b2b0:	tst	r2, #2048	; 0x800
   1b2b4:	beq	1b0f8 <__assert_fail@plt+0x8b04>
   1b2b8:	add	r0, r0, #2
   1b2bc:	add	r5, r5, r0
   1b2c0:	mov	r6, r5
   1b2c4:	ldrb	r4, [r5], #1
   1b2c8:	lsl	r3, r4, #1
   1b2cc:	ldrh	r3, [r1, r3]
   1b2d0:	tst	r3, #2048	; 0x800
   1b2d4:	bne	1b2c0 <__assert_fail@plt+0x8ccc>
   1b2d8:	b	1b0f8 <__assert_fail@plt+0x8b04>
   1b2dc:	mov	r2, r6
   1b2e0:	mov	ip, #0
   1b2e4:	b	1b1f4 <__assert_fail@plt+0x8c00>
   1b2e8:	ldr	ip, [sp, #20]
   1b2ec:	sub	r2, r5, r8
   1b2f0:	mov	r1, r8
   1b2f4:	mov	r0, sl
   1b2f8:	str	r3, [sp]
   1b2fc:	stmib	sp, {r3, ip}
   1b300:	bl	1aa80 <__assert_fail@plt+0x848c>
   1b304:	b	1b024 <__assert_fail@plt+0x8a30>
   1b308:	ldr	r4, [sp, #20]
   1b30c:	mov	ip, #0
   1b310:	mov	r3, #1
   1b314:	sub	r2, r5, r8
   1b318:	mov	r1, r8
   1b31c:	mov	r0, sl
   1b320:	str	ip, [sp]
   1b324:	str	ip, [sp, #4]
   1b328:	str	r4, [sp, #8]
   1b32c:	bl	1aa80 <__assert_fail@plt+0x848c>
   1b330:	ldrb	r3, [r4, #18]
   1b334:	cmp	r3, #0
   1b338:	beq	1b024 <__assert_fail@plt+0x8a30>
   1b33c:	ldr	r3, [r4, #24]
   1b340:	cmp	r3, #2
   1b344:	movls	r3, #3
   1b348:	strls	r3, [r4, #24]
   1b34c:	b	1b024 <__assert_fail@plt+0x8a30>
   1b350:	mov	r2, #5
   1b354:	movw	r1, #19828	; 0x4d74
   1b358:	movt	r1, #4
   1b35c:	mov	r0, r4
   1b360:	bl	120b4 <dcgettext@plt>
   1b364:	mov	r2, r0
   1b368:	mov	r3, r5
   1b36c:	mov	r1, r4
   1b370:	mov	r0, #1
   1b374:	bl	121ec <error@plt>
   1b378:	mov	r2, #5
   1b37c:	movw	r1, #20124	; 0x4e9c
   1b380:	movt	r1, #4
   1b384:	mov	r0, #0
   1b388:	bl	120b4 <dcgettext@plt>
   1b38c:	mov	r2, r0
   1b390:	ldrb	r3, [r6]
   1b394:	mov	r1, #0
   1b398:	mov	r0, #1
   1b39c:	bl	121ec <error@plt>
   1b3a0:	strd	r4, [sp, #-16]!
   1b3a4:	movw	r4, #40120	; 0x9cb8
   1b3a8:	movt	r4, #5
   1b3ac:	ldr	r3, [r4]
   1b3b0:	str	r6, [sp, #8]
   1b3b4:	mov	r6, r0
   1b3b8:	str	lr, [sp, #12]
   1b3bc:	cmp	r3, #0
   1b3c0:	beq	1b400 <__assert_fail@plt+0x8e0c>
   1b3c4:	ldrb	r2, [r4, #4]
   1b3c8:	eor	r2, r2, #1
   1b3cc:	tst	r0, r2
   1b3d0:	bne	1b3e8 <__assert_fail@plt+0x8df4>
   1b3d4:	ldrd	r4, [sp]
   1b3d8:	mov	r0, r3
   1b3dc:	ldr	r6, [sp, #8]
   1b3e0:	add	sp, sp, #12
   1b3e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3e8:	ldr	r5, [r3, #28]
   1b3ec:	mov	r0, r3
   1b3f0:	bl	31cbc <__assert_fail@plt+0x1f6c8>
   1b3f4:	subs	r3, r5, #0
   1b3f8:	bne	1b3e8 <__assert_fail@plt+0x8df4>
   1b3fc:	str	r3, [r4]
   1b400:	mov	r0, r6
   1b404:	bl	31d0c <__assert_fail@plt+0x1f718>
   1b408:	mov	r3, r0
   1b40c:	str	r0, [r4]
   1b410:	strb	r6, [r4, #4]
   1b414:	b	1b3d4 <__assert_fail@plt+0x8de0>
   1b418:	strd	r4, [sp, #-12]!
   1b41c:	mov	r4, r0
   1b420:	mov	r5, r1
   1b424:	str	lr, [sp, #8]
   1b428:	sub	sp, sp, #108	; 0x6c
   1b42c:	mov	r0, sp
   1b430:	bl	18248 <__assert_fail@plt+0x5c54>
   1b434:	movw	r3, #40556	; 0x9e6c
   1b438:	movt	r3, #5
   1b43c:	ldr	r0, [r4]
   1b440:	mov	r1, sp
   1b444:	ldr	r3, [r3, #52]	; 0x34
   1b448:	blx	r3
   1b44c:	cmp	r0, #0
   1b450:	ldrdeq	r2, [sp]
   1b454:	mvnne	r0, #0
   1b458:	strdeq	r2, [r5]
   1b45c:	add	sp, sp, #108	; 0x6c
   1b460:	ldrd	r4, [sp]
   1b464:	add	sp, sp, #8
   1b468:	pop	{pc}		; (ldr pc, [sp], #4)
   1b46c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1b470:	movw	r5, #40120	; 0x9cb8
   1b474:	movt	r5, #5
   1b478:	ldr	ip, [r5, #8]
   1b47c:	strd	r6, [sp, #8]
   1b480:	mov	r7, r0
   1b484:	str	r8, [sp, #16]
   1b488:	strd	sl, [sp, #20]
   1b48c:	str	lr, [sp, #28]
   1b490:	cmp	ip, #0
   1b494:	beq	1b4c0 <__assert_fail@plt+0x8ecc>
   1b498:	ldrb	r3, [r5, #12]
   1b49c:	cmp	r3, #0
   1b4a0:	beq	1b4b8 <__assert_fail@plt+0x8ec4>
   1b4a4:	ldrd	r0, [r0]
   1b4a8:	ldrd	r2, [r5, #16]
   1b4ac:	cmp	r1, r3
   1b4b0:	cmpeq	r0, r2
   1b4b4:	beq	1b56c <__assert_fail@plt+0x8f78>
   1b4b8:	mov	r0, ip
   1b4bc:	bl	2f668 <__assert_fail@plt+0x1d074>
   1b4c0:	ldrd	r2, [r7]
   1b4c4:	mov	r0, #1
   1b4c8:	strd	r2, [r5, #16]
   1b4cc:	bl	1b3a0 <__assert_fail@plt+0x8dac>
   1b4d0:	subs	r4, r0, #0
   1b4d4:	beq	1b5ac <__assert_fail@plt+0x8fb8>
   1b4d8:	movw	r6, #20432	; 0x4fd0
   1b4dc:	movt	r6, #4
   1b4e0:	mov	r8, #0
   1b4e4:	mvn	sl, #0
   1b4e8:	mvn	fp, #0
   1b4ec:	b	1b50c <__assert_fail@plt+0x8f18>
   1b4f0:	ldrd	r2, [r7]
   1b4f4:	cmp	r3, r1
   1b4f8:	cmpeq	r2, r0
   1b4fc:	moveq	r8, r4
   1b500:	ldr	r4, [r4, #28]
   1b504:	cmp	r4, #0
   1b508:	beq	1b54c <__assert_fail@plt+0x8f58>
   1b50c:	mov	r1, r6
   1b510:	ldr	r0, [r4, #12]
   1b514:	bl	11f40 <strcmp@plt>
   1b518:	cmp	r0, #0
   1b51c:	beq	1b500 <__assert_fail@plt+0x8f0c>
   1b520:	ldrd	r0, [r4, #16]
   1b524:	cmp	r1, fp
   1b528:	cmpeq	r0, sl
   1b52c:	bne	1b4f0 <__assert_fail@plt+0x8efc>
   1b530:	add	r1, r4, #16
   1b534:	add	r0, r4, #4
   1b538:	bl	1b418 <__assert_fail@plt+0x8e24>
   1b53c:	cmp	r0, #0
   1b540:	bne	1b500 <__assert_fail@plt+0x8f0c>
   1b544:	ldrd	r0, [r4, #16]
   1b548:	b	1b4f0 <__assert_fail@plt+0x8efc>
   1b54c:	cmp	r8, #0
   1b550:	beq	1b588 <__assert_fail@plt+0x8f94>
   1b554:	ldr	r0, [r8, #12]
   1b558:	bl	2de7c <__assert_fail@plt+0x1b888>
   1b55c:	mov	ip, r0
   1b560:	mov	r3, #1
   1b564:	strb	r3, [r5, #12]
   1b568:	str	ip, [r5, #8]
   1b56c:	ldrd	r4, [sp]
   1b570:	mov	r0, ip
   1b574:	ldrd	r6, [sp, #8]
   1b578:	ldr	r8, [sp, #16]
   1b57c:	ldrd	sl, [sp, #20]
   1b580:	add	sp, sp, #28
   1b584:	pop	{pc}		; (ldr pc, [sp], #4)
   1b588:	mov	r2, #5
   1b58c:	mov	r0, r8
   1b590:	strb	r8, [r5, #12]
   1b594:	movw	r1, #14352	; 0x3810
   1b598:	movt	r1, #4
   1b59c:	bl	120b4 <dcgettext@plt>
   1b5a0:	bl	2de7c <__assert_fail@plt+0x1b888>
   1b5a4:	mov	ip, r0
   1b5a8:	b	1b568 <__assert_fail@plt+0x8f74>
   1b5ac:	mov	r2, #5
   1b5b0:	movw	r1, #20392	; 0x4fa8
   1b5b4:	movt	r1, #4
   1b5b8:	bl	120b4 <dcgettext@plt>
   1b5bc:	mov	r2, r0
   1b5c0:	mov	r1, r4
   1b5c4:	mov	r0, #1
   1b5c8:	bl	121ec <error@plt>
   1b5cc:	strd	r4, [sp, #-16]!
   1b5d0:	mov	r5, r0
   1b5d4:	movw	r0, #20440	; 0x4fd8
   1b5d8:	movt	r0, #4
   1b5dc:	mov	r1, r5
   1b5e0:	str	r6, [sp, #8]
   1b5e4:	str	lr, [sp, #12]
   1b5e8:	bl	11f40 <strcmp@plt>
   1b5ec:	cmp	r0, #0
   1b5f0:	bne	1b608 <__assert_fail@plt+0x9014>
   1b5f4:	ldrd	r4, [sp]
   1b5f8:	mov	r0, #1
   1b5fc:	ldr	r6, [sp, #8]
   1b600:	add	sp, sp, #12
   1b604:	pop	{pc}		; (ldr pc, [sp], #4)
   1b608:	mov	r0, #0
   1b60c:	bl	1b3a0 <__assert_fail@plt+0x8dac>
   1b610:	subs	r4, r0, #0
   1b614:	beq	1b5f4 <__assert_fail@plt+0x9000>
   1b618:	mov	r0, r5
   1b61c:	ldr	r1, [r4, #12]
   1b620:	bl	11f40 <strcmp@plt>
   1b624:	cmp	r0, #0
   1b628:	beq	1b5f4 <__assert_fail@plt+0x9000>
   1b62c:	ldr	r4, [r4, #28]
   1b630:	cmp	r4, #0
   1b634:	bne	1b618 <__assert_fail@plt+0x9024>
   1b638:	mov	r0, r4
   1b63c:	ldrd	r4, [sp]
   1b640:	ldr	r6, [sp, #8]
   1b644:	add	sp, sp, #12
   1b648:	pop	{pc}		; (ldr pc, [sp], #4)
   1b64c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b650:	strd	r6, [sp, #8]
   1b654:	mov	r7, #0
   1b658:	strd	r8, [sp, #16]
   1b65c:	mov	r9, r0
   1b660:	mov	r0, r7
   1b664:	strd	sl, [sp, #24]
   1b668:	str	lr, [sp, #32]
   1b66c:	sub	sp, sp, #12
   1b670:	str	r7, [sp, #4]
   1b674:	bl	31d0c <__assert_fail@plt+0x1f718>
   1b678:	subs	r6, r0, #0
   1b67c:	beq	1b754 <__assert_fail@plt+0x9160>
   1b680:	mov	r4, r6
   1b684:	mov	sl, r7
   1b688:	b	1b6c0 <__assert_fail@plt+0x90cc>
   1b68c:	ldrd	r0, [r4, #16]
   1b690:	mvn	r3, #0
   1b694:	mvn	r2, #0
   1b698:	mov	r7, fp
   1b69c:	cmp	r1, r3
   1b6a0:	cmpeq	r0, r2
   1b6a4:	beq	1b734 <__assert_fail@plt+0x9140>
   1b6a8:	add	r5, fp, r5
   1b6ac:	mov	sl, r8
   1b6b0:	strd	r0, [r5, #-8]
   1b6b4:	ldr	r4, [r4, #28]
   1b6b8:	cmp	r4, #0
   1b6bc:	beq	1b6f8 <__assert_fail@plt+0x9104>
   1b6c0:	add	r8, sl, #1
   1b6c4:	add	r2, sp, #4
   1b6c8:	lsl	r5, r8, #3
   1b6cc:	mov	r0, r7
   1b6d0:	mov	r1, r5
   1b6d4:	bl	20698 <__assert_fail@plt+0xe0a4>
   1b6d8:	subs	fp, r0, #0
   1b6dc:	bne	1b68c <__assert_fail@plt+0x9098>
   1b6e0:	mov	r0, r7
   1b6e4:	mov	r7, fp
   1b6e8:	bl	2f668 <__assert_fail@plt+0x1d074>
   1b6ec:	ldr	r4, [r4, #28]
   1b6f0:	cmp	r4, #0
   1b6f4:	bne	1b6c0 <__assert_fail@plt+0x90cc>
   1b6f8:	ldr	r4, [r6, #28]
   1b6fc:	mov	r0, r6
   1b700:	bl	31cbc <__assert_fail@plt+0x1f6c8>
   1b704:	subs	r6, r4, #0
   1b708:	bne	1b6f8 <__assert_fail@plt+0x9104>
   1b70c:	cmp	fp, #0
   1b710:	strne	sl, [r9]
   1b714:	mov	r0, r7
   1b718:	add	sp, sp, #12
   1b71c:	ldrd	r4, [sp]
   1b720:	ldrd	r6, [sp, #8]
   1b724:	ldrd	r8, [sp, #16]
   1b728:	ldrd	sl, [sp, #24]
   1b72c:	add	sp, sp, #32
   1b730:	pop	{pc}		; (ldr pc, [sp], #4)
   1b734:	add	r1, r4, #16
   1b738:	add	r0, r4, #4
   1b73c:	bl	1b418 <__assert_fail@plt+0x8e24>
   1b740:	cmp	r0, #0
   1b744:	movne	r7, fp
   1b748:	bne	1b6b4 <__assert_fail@plt+0x90c0>
   1b74c:	ldrd	r0, [r4, #16]
   1b750:	b	1b6a8 <__assert_fail@plt+0x90b4>
   1b754:	mov	r7, r6
   1b758:	b	1b714 <__assert_fail@plt+0x9120>
   1b75c:	andeq	r0, r0, r0
   1b760:	subs	r0, r1, #0
   1b764:	beq	1b798 <__assert_fail@plt+0x91a4>
   1b768:	ldr	r3, [r2]
   1b76c:	ldr	r1, [r0, r3, lsl #2]
   1b770:	cmp	r1, #0
   1b774:	beq	1b794 <__assert_fail@plt+0x91a0>
   1b778:	add	r3, r3, #1
   1b77c:	movw	ip, #40556	; 0x9e6c
   1b780:	movt	ip, #5
   1b784:	mov	r0, #1
   1b788:	str	r3, [r2]
   1b78c:	str	r1, [ip, #76]	; 0x4c
   1b790:	bx	lr
   1b794:	mov	r0, r1
   1b798:	bx	lr
   1b79c:	b	2cec0 <__assert_fail@plt+0x1a8cc>
   1b7a0:	movw	r0, #10972	; 0x2adc
   1b7a4:	movt	r0, #4
   1b7a8:	push	{lr}		; (str lr, [sp, #-4]!)
   1b7ac:	sub	sp, sp, #12
   1b7b0:	movw	r4, #40556	; 0x9e6c
   1b7b4:	movt	r4, #5
   1b7b8:	bl	20e08 <__assert_fail@plt+0xe814>
   1b7bc:	mov	r2, #5
   1b7c0:	movw	r1, #21944	; 0x55b8
   1b7c4:	movt	r1, #4
   1b7c8:	mov	r0, #0
   1b7cc:	bl	120b4 <dcgettext@plt>
   1b7d0:	bl	11f64 <printf@plt>
   1b7d4:	movw	r0, #21964	; 0x55cc
   1b7d8:	movt	r0, #4
   1b7dc:	bl	11f64 <printf@plt>
   1b7e0:	ldrb	r1, [r4, #56]	; 0x38
   1b7e4:	movw	r2, #21924	; 0x55a4
   1b7e8:	movt	r2, #4
   1b7ec:	movw	r3, #21932	; 0x55ac
   1b7f0:	movt	r3, #4
   1b7f4:	movw	r0, #21972	; 0x55d4
   1b7f8:	movt	r0, #4
   1b7fc:	cmp	r1, #0
   1b800:	movne	r1, r2
   1b804:	moveq	r1, r3
   1b808:	bl	11f64 <printf@plt>
   1b80c:	movw	r0, #21988	; 0x55e4
   1b810:	movt	r0, #4
   1b814:	bl	11f64 <printf@plt>
   1b818:	bl	11f28 <is_selinux_enabled@plt>
   1b81c:	cmp	r0, #0
   1b820:	ble	1b830 <__assert_fail@plt+0x923c>
   1b824:	movw	r0, #22008	; 0x55f8
   1b828:	movt	r0, #4
   1b82c:	bl	11f64 <printf@plt>
   1b830:	mov	r3, #0
   1b834:	add	r0, sp, #4
   1b838:	str	r3, [sp, #4]
   1b83c:	bl	13648 <__assert_fail@plt+0x1054>
   1b840:	cmp	r0, #0
   1b844:	bne	1b868 <__assert_fail@plt+0x9274>
   1b848:	ldrh	r1, [r4, #68]	; 0x44
   1b84c:	movw	r0, #22040	; 0x5618
   1b850:	movt	r0, #4
   1b854:	bl	11f64 <printf@plt>
   1b858:	mov	r0, #10
   1b85c:	bl	12384 <putchar@plt>
   1b860:	mov	r0, #0
   1b864:	bl	122d0 <exit@plt>
   1b868:	movw	r0, #22020	; 0x5604
   1b86c:	movt	r0, #4
   1b870:	bl	11f64 <printf@plt>
   1b874:	ldr	r3, [sp, #4]
   1b878:	tst	r3, #512	; 0x200
   1b87c:	bne	1b890 <__assert_fail@plt+0x929c>
   1b880:	movw	r0, #22052	; 0x5624
   1b884:	movt	r0, #4
   1b888:	bl	11f64 <printf@plt>
   1b88c:	b	1b848 <__assert_fail@plt+0x9254>
   1b890:	movw	r0, #22028	; 0x560c
   1b894:	movt	r0, #4
   1b898:	bl	11f64 <printf@plt>
   1b89c:	b	1b880 <__assert_fail@plt+0x928c>
   1b8a0:	mov	r0, #0
   1b8a4:	str	r4, [sp, #-8]!
   1b8a8:	str	lr, [sp, #4]
   1b8ac:	bl	1801c <__assert_fail@plt+0x5a28>
   1b8b0:	str	r4, [sp, #-8]!
   1b8b4:	str	lr, [sp, #4]
   1b8b8:	bl	18014 <__assert_fail@plt+0x5a20>
   1b8bc:	mov	r3, r0
   1b8c0:	mov	r2, #1065353216	; 0x3f800000
   1b8c4:	ldr	r4, [sp]
   1b8c8:	mov	r1, #0
   1b8cc:	add	sp, sp, #4
   1b8d0:	mov	r0, #1
   1b8d4:	strh	r1, [r3, #18]
   1b8d8:	str	r2, [r3, #28]
   1b8dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b8e0:	str	r4, [sp, #-8]!
   1b8e4:	str	lr, [sp, #4]
   1b8e8:	bl	18014 <__assert_fail@plt+0x5a20>
   1b8ec:	mov	r3, r0
   1b8f0:	mov	r2, #1
   1b8f4:	ldr	r4, [sp]
   1b8f8:	mov	r1, #1065353216	; 0x3f800000
   1b8fc:	add	sp, sp, #4
   1b900:	mov	r0, r2
   1b904:	str	r2, [r3, #16]
   1b908:	str	r1, [r3, #28]
   1b90c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b910:	str	r4, [sp, #-8]!
   1b914:	str	lr, [sp, #4]
   1b918:	bl	18014 <__assert_fail@plt+0x5a20>
   1b91c:	movw	r3, #40556	; 0x9e6c
   1b920:	movt	r3, #5
   1b924:	ldr	r4, [sp]
   1b928:	mov	r2, r0
   1b92c:	add	sp, sp, #4
   1b930:	ldrb	r3, [r3]
   1b934:	cmp	r3, #0
   1b938:	strheq	r3, [r0, #18]
   1b93c:	mov	r3, #1
   1b940:	mov	r0, r3
   1b944:	strh	r3, [r2, #16]
   1b948:	pop	{pc}		; (ldr pc, [sp], #4)
   1b94c:	str	r4, [sp, #-8]!
   1b950:	str	lr, [sp, #4]
   1b954:	bl	18014 <__assert_fail@plt+0x5a20>
   1b958:	movw	r3, #4719	; 0x126f
   1b95c:	movt	r3, #14979	; 0x3a83
   1b960:	ldr	r4, [sp]
   1b964:	add	sp, sp, #4
   1b968:	str	r3, [r0, #28]
   1b96c:	mov	r0, #1
   1b970:	pop	{pc}		; (ldr pc, [sp], #4)
   1b974:	str	r4, [sp, #-8]!
   1b978:	str	lr, [sp, #4]
   1b97c:	bl	18014 <__assert_fail@plt+0x5a20>
   1b980:	mov	r3, r0
   1b984:	vldr	s15, [pc, #48]	; 1b9bc <__assert_fail@plt+0x93c8>
   1b988:	movw	r2, #18728	; 0x4928
   1b98c:	movt	r2, #1
   1b990:	mov	ip, #0
   1b994:	ldr	r1, [r3]
   1b998:	mov	r0, #1
   1b99c:	vldr	s14, [pc, #28]	; 1b9c0 <__assert_fail@plt+0x93cc>
   1b9a0:	ldr	r4, [sp]
   1b9a4:	add	sp, sp, #4
   1b9a8:	cmp	r1, r2
   1b9ac:	str	ip, [r3, #16]
   1b9b0:	vmovne.f32	s15, s14
   1b9b4:	vstr	s15, [r3, #28]
   1b9b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9bc:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1b9c0:	svccc	0x00666666
   1b9c4:	str	r4, [sp, #-8]!
   1b9c8:	str	lr, [sp, #4]
   1b9cc:	bl	18014 <__assert_fail@plt+0x5a20>
   1b9d0:	movw	r3, #55050	; 0xd70a
   1b9d4:	movt	r3, #15395	; 0x3c23
   1b9d8:	ldr	r4, [sp]
   1b9dc:	add	sp, sp, #4
   1b9e0:	str	r3, [r0, #28]
   1b9e4:	mov	r0, #1
   1b9e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9ec:	str	r4, [sp, #-8]!
   1b9f0:	str	lr, [sp, #4]
   1b9f4:	bl	18014 <__assert_fail@plt+0x5a20>
   1b9f8:	mov	r2, r0
   1b9fc:	mov	r1, #1065353216	; 0x3f800000
   1ba00:	ldr	r4, [sp]
   1ba04:	movw	r0, #257	; 0x101
   1ba08:	mov	ip, #0
   1ba0c:	movw	r3, #40556	; 0x9e6c
   1ba10:	movt	r3, #5
   1ba14:	add	sp, sp, #4
   1ba18:	str	r0, [r2, #16]
   1ba1c:	mov	r0, #1
   1ba20:	strb	ip, [r3]
   1ba24:	str	r1, [r2, #28]
   1ba28:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ba30:	movw	r5, #19964	; 0x4dfc
   1ba34:	movt	r5, #1
   1ba38:	cmp	r3, r5
   1ba3c:	movw	ip, #22064	; 0x5630
   1ba40:	movt	ip, #4
   1ba44:	strd	r6, [sp, #8]
   1ba48:	movw	r6, #22056	; 0x5628
   1ba4c:	movt	r6, #4
   1ba50:	movne	r6, ip
   1ba54:	str	r8, [sp, #16]
   1ba58:	subs	r4, r0, #0
   1ba5c:	str	lr, [sp, #20]
   1ba60:	sub	sp, sp, #8
   1ba64:	beq	1bbec <__assert_fail@plt+0x95f8>
   1ba68:	ldr	ip, [r1]
   1ba6c:	ldr	r7, [r4, ip, lsl #2]
   1ba70:	cmp	r7, #0
   1ba74:	beq	1bc98 <__assert_fail@plt+0x96a4>
   1ba78:	add	ip, ip, #1
   1ba7c:	mov	r0, r2
   1ba80:	mov	r4, r3
   1ba84:	str	ip, [r1]
   1ba88:	ldrb	r8, [r7]
   1ba8c:	cmp	r8, #0
   1ba90:	beq	1bd14 <__assert_fail@plt+0x9720>
   1ba94:	mov	r1, r3
   1ba98:	mov	r2, r7
   1ba9c:	bl	17f60 <__assert_fail@plt+0x596c>
   1baa0:	mov	r3, #0
   1baa4:	cmp	r4, r5
   1baa8:	str	r3, [r0, #28]
   1baac:	movne	r3, #256	; 0x100
   1bab0:	moveq	r3, #1
   1bab4:	strhne	r3, [r0, #18]
   1bab8:	strheq	r3, [r0, #18]
   1babc:	ldrb	r5, [r7]
   1bac0:	cmp	r5, #0
   1bac4:	beq	1bc90 <__assert_fail@plt+0x969c>
   1bac8:	vldr	s7, [pc, #620]	; 1bd3c <__assert_fail@plt+0x9748>
   1bacc:	vldr	s9, [pc, #620]	; 1bd40 <__assert_fail@plt+0x974c>
   1bad0:	vldr	s10, [pc, #620]	; 1bd44 <__assert_fail@plt+0x9750>
   1bad4:	vldr	s11, [pc, #620]	; 1bd48 <__assert_fail@plt+0x9754>
   1bad8:	vldr	s12, [pc, #620]	; 1bd4c <__assert_fail@plt+0x9758>
   1badc:	vldr	s13, [pc, #620]	; 1bd50 <__assert_fail@plt+0x975c>
   1bae0:	vldr	s8, [pc, #620]	; 1bd54 <__assert_fail@plt+0x9760>
   1bae4:	sub	r5, r5, #68	; 0x44
   1bae8:	cmp	r5, #47	; 0x2f
   1baec:	ldrls	pc, [pc, r5, lsl #2]
   1baf0:	b	1bcd0 <__assert_fail@plt+0x96dc>
   1baf4:	andeq	fp, r1, r0, lsr #25
   1baf8:	ldrdeq	fp, [r1], -r0
   1bafc:	ldrdeq	fp, [r1], -r0
   1bb00:	ldrdeq	fp, [r1], -r0
   1bb04:	ldrdeq	fp, [r1], -r0
   1bb08:	ldrdeq	fp, [r1], -r0
   1bb0c:	ldrdeq	fp, [r1], -r0
   1bb10:	ldrdeq	fp, [r1], -r0
   1bb14:	ldrdeq	fp, [r1], -r0
   1bb18:	ldrdeq	fp, [r1], -r0
   1bb1c:	ldrdeq	fp, [r1], -r0
   1bb20:	ldrdeq	fp, [r1], -r0
   1bb24:	ldrdeq	fp, [r1], -r0
   1bb28:	ldrdeq	fp, [r1], -r0
   1bb2c:	ldrdeq	fp, [r1], -r0
   1bb30:	ldrdeq	fp, [r1], -r0
   1bb34:	ldrdeq	fp, [r1], -r0
   1bb38:	ldrdeq	fp, [r1], -r0
   1bb3c:	ldrdeq	fp, [r1], -r0
   1bb40:	ldrdeq	fp, [r1], -r0
   1bb44:	ldrdeq	fp, [r1], -r0
   1bb48:	ldrdeq	fp, [r1], -r0
   1bb4c:	ldrdeq	fp, [r1], -r0
   1bb50:	ldrdeq	fp, [r1], -r0
   1bb54:	ldrdeq	fp, [r1], -r0
   1bb58:	ldrdeq	fp, [r1], -r0
   1bb5c:	ldrdeq	fp, [r1], -r0
   1bb60:	ldrdeq	fp, [r1], -r0
   1bb64:	ldrdeq	fp, [r1], -r0
   1bb68:	ldrdeq	fp, [r1], -r0
   1bb6c:			; <UNDEFINED> instruction: 0x0001bbb4
   1bb70:	andeq	fp, r1, r4, asr #24
   1bb74:	andeq	fp, r1, r8, lsr ip
   1bb78:	ldrdeq	fp, [r1], -r0
   1bb7c:	andeq	fp, r1, ip, lsr #24
   1bb80:	ldrdeq	fp, [r1], -r0
   1bb84:	ldrdeq	fp, [r1], -r0
   1bb88:	ldrdeq	fp, [r1], -r0
   1bb8c:	ldrdeq	fp, [r1], -r0
   1bb90:	ldrdeq	fp, [r1], -r0
   1bb94:	andeq	fp, r1, r0, lsr #24
   1bb98:	ldrdeq	fp, [r1], -r0
   1bb9c:	ldrdeq	fp, [r1], -r0
   1bba0:	ldrdeq	fp, [r1], -r0
   1bba4:	andeq	fp, r1, r4, lsl ip
   1bba8:	ldrdeq	fp, [r1], -r0
   1bbac:	ldrdeq	fp, [r1], -r0
   1bbb0:	andeq	fp, r1, r8, lsl #24
   1bbb4:	vmov.f32	s14, s9
   1bbb8:	mov	r3, #0
   1bbbc:	add	r3, r0, r3
   1bbc0:	ldrb	r5, [r3, #40]	; 0x28
   1bbc4:	cmp	r5, #0
   1bbc8:	bne	1bcdc <__assert_fail@plt+0x96e8>
   1bbcc:	vldr	s15, [r0, #28]
   1bbd0:	mov	r4, #1
   1bbd4:	vadd.f32	s15, s15, s14
   1bbd8:	vstr	s15, [r0, #28]
   1bbdc:	strb	r4, [r3, #40]	; 0x28
   1bbe0:	ldrb	r3, [r7, #1]
   1bbe4:	cmp	r3, #0
   1bbe8:	bne	1bc50 <__assert_fail@plt+0x965c>
   1bbec:	mov	r0, r4
   1bbf0:	add	sp, sp, #8
   1bbf4:	ldrd	r4, [sp]
   1bbf8:	ldrd	r6, [sp, #8]
   1bbfc:	ldr	r8, [sp, #16]
   1bc00:	add	sp, sp, #20
   1bc04:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc08:	vmov.f32	s14, s10
   1bc0c:	mov	r3, #6
   1bc10:	b	1bbbc <__assert_fail@plt+0x95c8>
   1bc14:	vmov.f32	s14, s11
   1bc18:	mov	r3, #5
   1bc1c:	b	1bbbc <__assert_fail@plt+0x95c8>
   1bc20:	vmov.f32	s14, s12
   1bc24:	mov	r3, #4
   1bc28:	b	1bbbc <__assert_fail@plt+0x95c8>
   1bc2c:	vmov.f32	s14, s13
   1bc30:	mov	r3, #3
   1bc34:	b	1bbbc <__assert_fail@plt+0x95c8>
   1bc38:	vmov.f32	s14, s7
   1bc3c:	mov	r3, #2
   1bc40:	b	1bbbc <__assert_fail@plt+0x95c8>
   1bc44:	vmov.f32	s14, s8
   1bc48:	mov	r3, #1
   1bc4c:	b	1bbbc <__assert_fail@plt+0x95c8>
   1bc50:	cmp	r3, #44	; 0x2c
   1bc54:	bne	1bd08 <__assert_fail@plt+0x9714>
   1bc58:	ldrb	r5, [r7, #2]
   1bc5c:	add	r7, r7, #2
   1bc60:	cmp	r5, #0
   1bc64:	bne	1bae4 <__assert_fail@plt+0x94f0>
   1bc68:	movw	r1, #22364	; 0x575c
   1bc6c:	movt	r1, #4
   1bc70:	mov	r2, #5
   1bc74:	mov	r0, r5
   1bc78:	bl	120b4 <dcgettext@plt>
   1bc7c:	mov	r2, r0
   1bc80:	mov	r3, r6
   1bc84:	mov	r1, r5
   1bc88:	mov	r0, r4
   1bc8c:	bl	121ec <error@plt>
   1bc90:	mov	r4, #1
   1bc94:	b	1bbec <__assert_fail@plt+0x95f8>
   1bc98:	mov	r4, r7
   1bc9c:	b	1bbec <__assert_fail@plt+0x95f8>
   1bca0:	movw	r1, #22124	; 0x566c
   1bca4:	movt	r1, #4
   1bca8:	mov	r2, #5
   1bcac:	mov	r0, #0
   1bcb0:	bl	120b4 <dcgettext@plt>
   1bcb4:	ldrb	ip, [r7]
   1bcb8:	mov	r2, r0
   1bcbc:	mov	r3, r6
   1bcc0:	mov	r1, #0
   1bcc4:	mov	r0, #1
   1bcc8:	str	ip, [sp]
   1bccc:	bl	121ec <error@plt>
   1bcd0:	movw	r1, #22228	; 0x56d4
   1bcd4:	movt	r1, #4
   1bcd8:	b	1bca8 <__assert_fail@plt+0x96b4>
   1bcdc:	mov	r2, #5
   1bce0:	movw	r1, #22256	; 0x56f0
   1bce4:	movt	r1, #4
   1bce8:	mov	r0, #0
   1bcec:	bl	120b4 <dcgettext@plt>
   1bcf0:	mov	r2, r0
   1bcf4:	ldrb	r3, [r7]
   1bcf8:	mov	r1, #0
   1bcfc:	mov	r0, #1
   1bd00:	str	r6, [sp]
   1bd04:	bl	121ec <error@plt>
   1bd08:	movw	r1, #22312	; 0x5728
   1bd0c:	movt	r1, #4
   1bd10:	b	1bc70 <__assert_fail@plt+0x967c>
   1bd14:	mov	r2, #5
   1bd18:	movw	r1, #22072	; 0x5638
   1bd1c:	movt	r1, #4
   1bd20:	mov	r0, r8
   1bd24:	bl	120b4 <dcgettext@plt>
   1bd28:	mov	r2, r0
   1bd2c:	mov	r3, r6
   1bd30:	mov	r1, r8
   1bd34:	mov	r0, #1
   1bd38:	bl	121ec <error@plt>
   1bd3c:	ldccc	3, cr13, [ip, #364]!	; 0x16c
   1bd40:	bcc	1a4dff8 <stdout@@GLIBC_2.4+0x19f4aa4>
   1bd44:			; <UNDEFINED> instruction: 0x378560fd
   1bd48:	usatcc	r7, #29, lr, asr #16
   1bd4c:	cfldr64cc	mvdx12, [lr], #436	; 0x1b4
   1bd50:	svccc	0x00600000
   1bd54:	stmibcc	r8!, {r2, r4, r5, r6, r9, lr}^
   1bd58:	mov	r3, r1
   1bd5c:	mov	ip, r2
   1bd60:	mov	r1, ip
   1bd64:	mov	r2, r0
   1bd68:	mov	r0, r3
   1bd6c:	movw	r3, #19964	; 0x4dfc
   1bd70:	movt	r3, #1
   1bd74:	b	1ba2c <__assert_fail@plt+0x9438>
   1bd78:	mov	r3, r1
   1bd7c:	mov	ip, r2
   1bd80:	mov	r1, ip
   1bd84:	mov	r2, r0
   1bd88:	mov	r0, r3
   1bd8c:	movw	r3, #19352	; 0x4b98
   1bd90:	movt	r3, #1
   1bd94:	b	1ba2c <__assert_fail@plt+0x9438>
   1bd98:	cmp	r1, #0
   1bd9c:	beq	1becc <__assert_fail@plt+0x98d8>
   1bda0:	ldr	r3, [r2]
   1bda4:	strd	r4, [sp, #-16]!
   1bda8:	ldr	r4, [r1, r3, lsl #2]
   1bdac:	str	r6, [sp, #8]
   1bdb0:	str	lr, [sp, #12]
   1bdb4:	cmp	r4, #0
   1bdb8:	beq	1be94 <__assert_fail@plt+0x98a0>
   1bdbc:	add	r3, r3, #1
   1bdc0:	mov	r5, r0
   1bdc4:	mov	r0, r4
   1bdc8:	str	r3, [r2]
   1bdcc:	bl	11f1c <getpwnam@plt>
   1bdd0:	mov	r6, r0
   1bdd4:	bl	1245c <endpwent@plt>
   1bdd8:	cmp	r6, #0
   1bddc:	beq	1be20 <__assert_fail@plt+0x982c>
   1bde0:	ldr	r6, [r6, #8]
   1bde4:	mov	r1, r4
   1bde8:	mov	r0, r5
   1bdec:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1bdf0:	vldr	s15, [pc, #248]	; 1bef0 <__assert_fail@plt+0x98fc>
   1bdf4:	cmp	r6, #100	; 0x64
   1bdf8:	mov	r3, r0
   1bdfc:	mov	r0, #1
   1be00:	vldr	s14, [pc, #236]	; 1bef4 <__assert_fail@plt+0x9900>
   1be04:	str	r6, [r3, #40]	; 0x28
   1be08:	ldrd	r4, [sp]
   1be0c:	ldr	r6, [sp, #8]
   1be10:	add	sp, sp, #12
   1be14:	vmovcs.f32	s15, s14
   1be18:	vstr	s15, [r3, #28]
   1be1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1be20:	movw	r1, #22444	; 0x57ac
   1be24:	movt	r1, #4
   1be28:	mov	r0, r4
   1be2c:	bl	125e8 <strspn@plt>
   1be30:	cmp	r0, #0
   1be34:	beq	1be44 <__assert_fail@plt+0x9850>
   1be38:	ldrb	r3, [r4, r0]
   1be3c:	cmp	r3, #0
   1be40:	beq	1bed4 <__assert_fail@plt+0x98e0>
   1be44:	ldrb	r5, [r4]
   1be48:	cmp	r5, #0
   1be4c:	beq	1bea8 <__assert_fail@plt+0x98b4>
   1be50:	mov	r2, #5
   1be54:	movw	r1, #22456	; 0x57b8
   1be58:	movt	r1, #4
   1be5c:	mov	r0, #0
   1be60:	bl	120b4 <dcgettext@plt>
   1be64:	movw	r3, #40556	; 0x9e6c
   1be68:	movt	r3, #5
   1be6c:	mov	r5, r0
   1be70:	mov	r2, r4
   1be74:	ldr	r1, [r3, #72]	; 0x48
   1be78:	mov	r0, #0
   1be7c:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   1be80:	mov	r3, r0
   1be84:	mov	r2, r5
   1be88:	mov	r1, #0
   1be8c:	mov	r0, #1
   1be90:	bl	121ec <error@plt>
   1be94:	mov	r0, r4
   1be98:	ldrd	r4, [sp]
   1be9c:	ldr	r6, [sp, #8]
   1bea0:	add	sp, sp, #12
   1bea4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bea8:	mov	r2, #5
   1beac:	movw	r1, #22492	; 0x57dc
   1beb0:	movt	r1, #4
   1beb4:	mov	r0, r5
   1beb8:	bl	120b4 <dcgettext@plt>
   1bebc:	mov	r2, r0
   1bec0:	mov	r1, r5
   1bec4:	mov	r0, #1
   1bec8:	bl	121ec <error@plt>
   1becc:	mov	r0, r1
   1bed0:	bx	lr
   1bed4:	movw	r3, #40556	; 0x9e6c
   1bed8:	movt	r3, #5
   1bedc:	mov	r0, r4
   1bee0:	ldr	r1, [r3, #72]	; 0x48
   1bee4:	bl	21c70 <__assert_fail@plt+0xf67c>
   1bee8:	mov	r6, r0
   1beec:	b	1bde4 <__assert_fail@plt+0x97f0>
   1bef0:	svccc	0x007d70a4
   1bef4:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1bef8:	mov	r1, #0
   1befc:	str	r4, [sp, #-8]!
   1bf00:	str	lr, [sp, #4]
   1bf04:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1bf08:	movw	r3, #46871	; 0xb717
   1bf0c:	movt	r3, #14545	; 0x38d1
   1bf10:	ldr	r4, [sp]
   1bf14:	add	sp, sp, #4
   1bf18:	str	r3, [r0, #28]
   1bf1c:	mov	r0, #1
   1bf20:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf24:	cmp	r1, #0
   1bf28:	beq	1bf9c <__assert_fail@plt+0x99a8>
   1bf2c:	ldr	r3, [r2]
   1bf30:	strd	r4, [sp, #-16]!
   1bf34:	ldr	r4, [r1, r3, lsl #2]
   1bf38:	str	r6, [sp, #8]
   1bf3c:	str	lr, [sp, #12]
   1bf40:	cmp	r4, #0
   1bf44:	moveq	r0, r4
   1bf48:	beq	1bf8c <__assert_fail@plt+0x9998>
   1bf4c:	add	r3, r3, #1
   1bf50:	mov	r1, r4
   1bf54:	str	r3, [r2]
   1bf58:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1bf5c:	mov	r5, r0
   1bf60:	movw	r1, #22536	; 0x5808
   1bf64:	movt	r1, #4
   1bf68:	mov	r0, r4
   1bf6c:	str	r4, [r5, #40]	; 0x28
   1bf70:	bl	12528 <strpbrk@plt>
   1bf74:	vldr	s15, [pc, #40]	; 1bfa4 <__assert_fail@plt+0x99b0>
   1bf78:	cmp	r0, #0
   1bf7c:	mov	r0, #1
   1bf80:	vldr	s14, [pc, #32]	; 1bfa8 <__assert_fail@plt+0x99b4>
   1bf84:	vmoveq.f32	s15, s14
   1bf88:	vstr	s15, [r5, #28]
   1bf8c:	ldrd	r4, [sp]
   1bf90:	ldr	r6, [sp, #8]
   1bf94:	add	sp, sp, #12
   1bf98:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf9c:	mov	r0, r1
   1bfa0:	bx	lr
   1bfa4:	stccc	7, cr13, [r3, #44]!	; 0x2c
   1bfa8:	stccc	7, cr13, [r3], #-44	; 0xffffffd4
   1bfac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1bfb0:	mov	r5, r0
   1bfb4:	mov	r4, r3
   1bfb8:	strd	r6, [sp, #8]
   1bfbc:	mov	r6, r1
   1bfc0:	mov	r7, r2
   1bfc4:	str	r8, [sp, #16]
   1bfc8:	str	lr, [sp, #20]
   1bfcc:	vpush	{d8}
   1bfd0:	sub	sp, sp, #24
   1bfd4:	vmov.f64	d8, d0
   1bfd8:	ldrb	r1, [r5]
   1bfdc:	mov	r0, sp
   1bfe0:	stm	r0, {r2, r3}
   1bfe4:	cmp	r1, #43	; 0x2b
   1bfe8:	beq	1c0e0 <__assert_fail@plt+0x9aec>
   1bfec:	cmp	r1, #45	; 0x2d
   1bff0:	beq	1c0f0 <__assert_fail@plt+0x9afc>
   1bff4:	mov	r3, #2
   1bff8:	str	r3, [r6, #4]
   1bffc:	movw	r3, #9140	; 0x23b4
   1c000:	movt	r3, #1
   1c004:	add	r2, sp, #8
   1c008:	mov	r1, #0
   1c00c:	mov	r0, r5
   1c010:	bl	2dee8 <__assert_fail@plt+0x1b8f4>
   1c014:	subs	r8, r0, #0
   1c018:	bne	1c03c <__assert_fail@plt+0x9a48>
   1c01c:	mov	r0, r8
   1c020:	add	sp, sp, #24
   1c024:	vpop	{d8}
   1c028:	ldrd	r4, [sp]
   1c02c:	ldrd	r6, [sp, #8]
   1c030:	ldr	r8, [sp, #16]
   1c034:	add	sp, sp, #20
   1c038:	pop	{pc}		; (ldr pc, [sp], #4)
   1c03c:	vldr	d0, [sp, #8]
   1c040:	add	r0, sp, #16
   1c044:	vmul.f64	d0, d8, d0
   1c048:	bl	12294 <modf@plt>
   1c04c:	vldr	d7, [pc, #228]	; 1c138 <__assert_fail@plt+0x9b44>
   1c050:	vmul.f64	d0, d0, d7
   1c054:	vcmpe.f64	d0, d7
   1c058:	vmrs	APSR_nzcv, fpscr
   1c05c:	bpl	1c100 <__assert_fail@plt+0x9b0c>
   1c060:	vmov	s15, r7
   1c064:	vcvt.f64.s32	d6, s15
   1c068:	vldr	d7, [sp, #16]
   1c06c:	vsub.f64	d6, d6, d7
   1c070:	vcmpe.f64	d7, #0.0
   1c074:	vcvt.s32.f64	s15, d6
   1c078:	vmrs	APSR_nzcv, fpscr
   1c07c:	movmi	r2, #1
   1c080:	movpl	r2, #0
   1c084:	vmov	r3, s15
   1c088:	vstr	s15, [r6, #8]
   1c08c:	cmp	r3, r7
   1c090:	movle	r7, #0
   1c094:	movgt	r7, #1
   1c098:	cmp	r7, r2
   1c09c:	bne	1c120 <__assert_fail@plt+0x9b2c>
   1c0a0:	vmov	s15, r4
   1c0a4:	vcvt.f64.s32	d7, s15
   1c0a8:	vcmpe.f64	d7, d0
   1c0ac:	vsub.f64	d7, d7, d0
   1c0b0:	vcvt.s32.f64	s14, d7
   1c0b4:	vmrs	APSR_nzcv, fpscr
   1c0b8:	vstrpl	s14, [r6, #12]
   1c0bc:	bpl	1c01c <__assert_fail@plt+0x9a28>
   1c0c0:	vmov	r1, s14
   1c0c4:	mov	r2, #51712	; 0xca00
   1c0c8:	movt	r2, #15258	; 0x3b9a
   1c0cc:	sub	r3, r3, #1
   1c0d0:	str	r3, [r6, #8]
   1c0d4:	add	r2, r1, r2
   1c0d8:	str	r2, [r6, #12]
   1c0dc:	b	1c01c <__assert_fail@plt+0x9a28>
   1c0e0:	mov	r3, #1
   1c0e4:	add	r5, r5, r3
   1c0e8:	str	r3, [r6, #4]
   1c0ec:	b	1bffc <__assert_fail@plt+0x9a08>
   1c0f0:	mov	r3, #0
   1c0f4:	add	r5, r5, #1
   1c0f8:	str	r3, [r6, #4]
   1c0fc:	b	1bffc <__assert_fail@plt+0x9a08>
   1c100:	movw	r3, #20444	; 0x4fdc
   1c104:	movt	r3, #4
   1c108:	movw	r1, #22540	; 0x580c
   1c10c:	movt	r1, #4
   1c110:	movw	r0, #22552	; 0x5818
   1c114:	movt	r0, #4
   1c118:	movw	r2, #3149	; 0xc4d
   1c11c:	bl	125f4 <__assert_fail@plt>
   1c120:	mov	r3, r5
   1c124:	mov	r1, #0
   1c128:	ldr	r2, [sp, #56]	; 0x38
   1c12c:	mov	r0, #1
   1c130:	bl	121ec <error@plt>
   1c134:	nop	{0}
   1c138:	andeq	r0, r0, r0
   1c13c:	bicmi	ip, sp, r5, ror #26
   1c140:	cmp	r0, #0
   1c144:	bxeq	lr
   1c148:	push	{lr}		; (str lr, [sp, #-4]!)
   1c14c:	sub	sp, sp, #20
   1c150:	ldrb	r3, [r0]
   1c154:	cmp	r3, #43	; 0x2b
   1c158:	beq	1c1a8 <__assert_fail@plt+0x9bb4>
   1c15c:	cmp	r3, #45	; 0x2d
   1c160:	bne	1c19c <__assert_fail@plt+0x9ba8>
   1c164:	mov	r3, #1
   1c168:	add	r0, r0, r3
   1c16c:	str	r3, [r2]
   1c170:	movw	ip, #17776	; 0x4570
   1c174:	movt	ip, #4
   1c178:	mov	r3, r1
   1c17c:	mov	r2, #10
   1c180:	add	r1, sp, #12
   1c184:	str	ip, [sp]
   1c188:	bl	2e5e0 <__assert_fail@plt+0x1bfec>
   1c18c:	clz	r0, r0
   1c190:	lsr	r0, r0, #5
   1c194:	add	sp, sp, #20
   1c198:	pop	{pc}		; (ldr pc, [sp], #4)
   1c19c:	mov	r3, #2
   1c1a0:	str	r3, [r2]
   1c1a4:	b	1c170 <__assert_fail@plt+0x9b7c>
   1c1a8:	mov	r3, #0
   1c1ac:	add	r0, r0, #1
   1c1b0:	str	r3, [r2]
   1c1b4:	b	1c170 <__assert_fail@plt+0x9b7c>
   1c1b8:	strd	r4, [sp, #-12]!
   1c1bc:	subs	r4, r0, #0
   1c1c0:	str	lr, [sp, #8]
   1c1c4:	sub	sp, sp, #20
   1c1c8:	beq	1c208 <__assert_fail@plt+0x9c14>
   1c1cc:	ldr	ip, [r1]
   1c1d0:	ldr	r4, [r4, ip, lsl #2]
   1c1d4:	cmp	r4, #0
   1c1d8:	beq	1c208 <__assert_fail@plt+0x9c14>
   1c1dc:	mov	r3, r1
   1c1e0:	add	ip, ip, #1
   1c1e4:	mov	r0, r4
   1c1e8:	mov	r5, r2
   1c1ec:	add	r1, sp, #8
   1c1f0:	add	r2, sp, #4
   1c1f4:	str	ip, [r3]
   1c1f8:	bl	1c140 <__assert_fail@plt+0x9b4c>
   1c1fc:	cmp	r0, #0
   1c200:	moveq	r4, r0
   1c204:	bne	1c21c <__assert_fail@plt+0x9c28>
   1c208:	mov	r0, r4
   1c20c:	add	sp, sp, #20
   1c210:	ldrd	r4, [sp]
   1c214:	add	sp, sp, #8
   1c218:	pop	{pc}		; (ldr pc, [sp], #4)
   1c21c:	mov	r1, r4
   1c220:	mov	r0, r5
   1c224:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1c228:	movw	r3, #40556	; 0x9e6c
   1c22c:	movt	r3, #5
   1c230:	ldr	r1, [r3, #44]	; 0x2c
   1c234:	mov	r4, r0
   1c238:	ldr	r0, [sp, #4]
   1c23c:	ldrd	r2, [sp, #8]
   1c240:	tst	r1, #1
   1c244:	str	r0, [r4, #40]	; 0x28
   1c248:	strd	r2, [r4, #48]	; 0x30
   1c24c:	beq	1c208 <__assert_fail@plt+0x9c14>
   1c250:	movw	r5, #38216	; 0x9548
   1c254:	movt	r5, #5
   1c258:	ldr	r2, [r4, #4]
   1c25c:	movw	r1, #22608	; 0x5850
   1c260:	movt	r1, #4
   1c264:	ldr	r0, [r5]
   1c268:	bl	1233c <fprintf@plt>
   1c26c:	ldr	r3, [sp, #4]
   1c270:	ldr	r0, [r5]
   1c274:	cmp	r3, #0
   1c278:	beq	1c2b4 <__assert_fail@plt+0x9cc0>
   1c27c:	cmp	r3, #1
   1c280:	beq	1c2e8 <__assert_fail@plt+0x9cf4>
   1c284:	cmp	r3, #2
   1c288:	movw	ip, #22600	; 0x5848
   1c28c:	movt	ip, #4
   1c290:	movw	r1, #22604	; 0x584c
   1c294:	movt	r1, #4
   1c298:	movw	r2, #25072	; 0x61f0
   1c29c:	movt	r2, #4
   1c2a0:	movw	r3, #22596	; 0x5844
   1c2a4:	movt	r3, #4
   1c2a8:	moveq	r2, ip
   1c2ac:	moveq	r3, r1
   1c2b0:	b	1c2c4 <__assert_fail@plt+0x9cd0>
   1c2b4:	movw	r2, #22580	; 0x5834
   1c2b8:	movt	r2, #4
   1c2bc:	movw	r3, #22584	; 0x5838
   1c2c0:	movt	r3, #4
   1c2c4:	movw	r1, #22624	; 0x5860
   1c2c8:	movt	r1, #4
   1c2cc:	bl	1233c <fprintf@plt>
   1c2d0:	movw	r1, #22648	; 0x5878
   1c2d4:	movt	r1, #4
   1c2d8:	ldr	r0, [r5]
   1c2dc:	ldrd	r2, [r4, #48]	; 0x30
   1c2e0:	bl	1233c <fprintf@plt>
   1c2e4:	b	1c208 <__assert_fail@plt+0x9c14>
   1c2e8:	movw	r2, #22588	; 0x583c
   1c2ec:	movt	r2, #4
   1c2f0:	movw	r3, #22592	; 0x5840
   1c2f4:	movt	r3, #4
   1c2f8:	b	1c2c4 <__assert_fail@plt+0x9cd0>
   1c2fc:	mov	r3, r1
   1c300:	str	r4, [sp, #-8]!
   1c304:	mov	r4, r2
   1c308:	mov	r1, r4
   1c30c:	mov	r2, r0
   1c310:	str	lr, [sp, #4]
   1c314:	mov	r0, r3
   1c318:	bl	1c1b8 <__assert_fail@plt+0x9bc4>
   1c31c:	subs	r3, r0, #0
   1c320:	beq	1c37c <__assert_fail@plt+0x9d88>
   1c324:	ldrd	r0, [r3, #48]	; 0x30
   1c328:	cmp	r1, #0
   1c32c:	cmpeq	r0, #1
   1c330:	beq	1c360 <__assert_fail@plt+0x9d6c>
   1c334:	cmp	r1, #0
   1c338:	ldr	r4, [sp]
   1c33c:	add	sp, sp, #4
   1c340:	cmpeq	r0, #2
   1c344:	mov	r0, #1
   1c348:	movweq	r2, #55050	; 0xd70a
   1c34c:	movwne	r2, #4719	; 0x126f
   1c350:	movteq	r2, #15395	; 0x3c23
   1c354:	movtne	r2, #14979	; 0x3a83
   1c358:	str	r2, [r3, #28]
   1c35c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c360:	movw	r2, #28836	; 0x70a4
   1c364:	movt	r2, #16253	; 0x3f7d
   1c368:	ldr	r4, [sp]
   1c36c:	add	sp, sp, #4
   1c370:	mov	r0, #1
   1c374:	str	r2, [r3, #28]
   1c378:	pop	{pc}		; (ldr pc, [sp], #4)
   1c37c:	ldr	r2, [r4]
   1c380:	mov	r0, r3
   1c384:	sub	r2, r2, #1
   1c388:	str	r2, [r4]
   1c38c:	ldr	r4, [sp]
   1c390:	add	sp, sp, #4
   1c394:	pop	{pc}		; (ldr pc, [sp], #4)
   1c398:	mov	r3, r1
   1c39c:	str	r4, [sp, #-8]!
   1c3a0:	mov	r4, r2
   1c3a4:	mov	r1, r4
   1c3a8:	mov	r2, r0
   1c3ac:	str	lr, [sp, #4]
   1c3b0:	mov	r0, r3
   1c3b4:	bl	1c1b8 <__assert_fail@plt+0x9bc4>
   1c3b8:	subs	r3, r0, #0
   1c3bc:	beq	1c3ec <__assert_fail@plt+0x9df8>
   1c3c0:	mov	r2, #1
   1c3c4:	movw	r1, #14269	; 0x37bd
   1c3c8:	movt	r1, #13702	; 0x3586
   1c3cc:	mov	ip, #0
   1c3d0:	ldr	r4, [sp]
   1c3d4:	add	sp, sp, #4
   1c3d8:	mov	r0, r2
   1c3dc:	strh	ip, [r3, #18]
   1c3e0:	strb	r2, [r3, #20]
   1c3e4:	str	r1, [r3, #28]
   1c3e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c3ec:	ldr	r2, [r4]
   1c3f0:	mov	r0, r3
   1c3f4:	sub	r2, r2, #1
   1c3f8:	str	r2, [r4]
   1c3fc:	ldr	r4, [sp]
   1c400:	add	sp, sp, #4
   1c404:	pop	{pc}		; (ldr pc, [sp], #4)
   1c408:	mov	r3, r1
   1c40c:	strd	r4, [sp, #-16]!
   1c410:	mov	r4, r2
   1c414:	mov	r1, r4
   1c418:	mov	r2, r0
   1c41c:	str	r6, [sp, #8]
   1c420:	mov	r0, r3
   1c424:	str	lr, [sp, #12]
   1c428:	bl	1c1b8 <__assert_fail@plt+0x9bc4>
   1c42c:	subs	r3, r0, #0
   1c430:	beq	1c464 <__assert_fail@plt+0x9e70>
   1c434:	ldrd	r4, [r3, #48]	; 0x30
   1c438:	mov	r0, #1
   1c43c:	vldr	s15, [pc, #64]	; 1c484 <__assert_fail@plt+0x9e90>
   1c440:	vldr	s14, [pc, #64]	; 1c488 <__assert_fail@plt+0x9e94>
   1c444:	cmp	r5, #0
   1c448:	cmpeq	r4, #100	; 0x64
   1c44c:	ldrd	r4, [sp]
   1c450:	ldr	r6, [sp, #8]
   1c454:	add	sp, sp, #12
   1c458:	vmovcs.f32	s15, s14
   1c45c:	vstr	s15, [r3, #28]
   1c460:	pop	{pc}		; (ldr pc, [sp], #4)
   1c464:	ldr	r2, [r4]
   1c468:	mov	r0, r3
   1c46c:	ldr	r6, [sp, #8]
   1c470:	sub	r2, r2, #1
   1c474:	str	r2, [r4]
   1c478:	ldrd	r4, [sp]
   1c47c:	add	sp, sp, #12
   1c480:	pop	{pc}		; (ldr pc, [sp], #4)
   1c484:	svccc	0x007d70a4
   1c488:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1c48c:	b	1c408 <__assert_fail@plt+0x9e14>
   1c490:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c494:	subs	r4, r1, #0
   1c498:	strd	r6, [sp, #8]
   1c49c:	strd	r8, [sp, #16]
   1c4a0:	str	sl, [sp, #24]
   1c4a4:	str	lr, [sp, #28]
   1c4a8:	sub	sp, sp, #24
   1c4ac:	beq	1c6a4 <__assert_fail@plt+0xa0b0>
   1c4b0:	ldr	r3, [r2]
   1c4b4:	ldr	r5, [r4, r3, lsl #2]
   1c4b8:	cmp	r5, #0
   1c4bc:	beq	1c74c <__assert_fail@plt+0xa158>
   1c4c0:	mov	r9, r0
   1c4c4:	mov	r0, r5
   1c4c8:	mov	r6, r2
   1c4cc:	bl	12300 <strlen@plt>
   1c4d0:	subs	r8, r0, #0
   1c4d4:	beq	1c7b8 <__assert_fail@plt+0xa1c4>
   1c4d8:	sub	r8, r8, #1
   1c4dc:	ldrb	sl, [r5, r8]
   1c4e0:	sub	r3, sl, #48	; 0x30
   1c4e4:	cmp	r3, #71	; 0x47
   1c4e8:	ldrls	pc, [pc, r3, lsl #2]
   1c4ec:	b	1c754 <__assert_fail@plt+0xa160>
   1c4f0:	andeq	ip, r1, r4, asr #13
   1c4f4:	andeq	ip, r1, r4, asr #13
   1c4f8:	andeq	ip, r1, r4, asr #13
   1c4fc:	andeq	ip, r1, r4, asr #13
   1c500:	andeq	ip, r1, r4, asr #13
   1c504:	andeq	ip, r1, r4, asr #13
   1c508:	andeq	ip, r1, r4, asr #13
   1c50c:	andeq	ip, r1, r4, asr #13
   1c510:	andeq	ip, r1, r4, asr #13
   1c514:	andeq	ip, r1, r4, asr #13
   1c518:	andeq	ip, r1, r4, asr r7
   1c51c:	andeq	ip, r1, r4, asr r7
   1c520:	andeq	ip, r1, r4, asr r7
   1c524:	andeq	ip, r1, r4, asr r7
   1c528:	andeq	ip, r1, r4, asr r7
   1c52c:	andeq	ip, r1, r4, asr r7
   1c530:	andeq	ip, r1, r4, asr r7
   1c534:	andeq	ip, r1, r4, asr r7
   1c538:	andeq	ip, r1, r4, asr r7
   1c53c:	andeq	ip, r1, r4, asr r7
   1c540:	andeq	ip, r1, r4, asr r7
   1c544:	andeq	ip, r1, r4, asr r7
   1c548:	andeq	ip, r1, r4, asr r7
   1c54c:	andeq	ip, r1, r0, lsl r7
   1c550:	andeq	ip, r1, r4, asr r7
   1c554:	andeq	ip, r1, r4, asr r7
   1c558:	andeq	ip, r1, r4, asr r7
   1c55c:	andeq	ip, r1, r4, asr r7
   1c560:	andeq	ip, r1, r4, asr r7
   1c564:	ldrdeq	ip, [r1], -r0
   1c568:	andeq	ip, r1, r4, asr r7
   1c56c:	andeq	ip, r1, r4, asr r7
   1c570:	andeq	ip, r1, r4, asr r7
   1c574:	andeq	ip, r1, r4, asr r7
   1c578:	andeq	ip, r1, r4, asr r7
   1c57c:	andeq	ip, r1, r4, asr r7
   1c580:	andeq	ip, r1, r4, asr r7
   1c584:	andeq	ip, r1, r4, asr r7
   1c588:	andeq	ip, r1, r4, asr r7
   1c58c:	andeq	ip, r1, r4, asr r7
   1c590:	andeq	ip, r1, r4, asr r7
   1c594:	andeq	ip, r1, r4, asr r7
   1c598:	andeq	ip, r1, r4, asr r7
   1c59c:	andeq	ip, r1, r4, asr r7
   1c5a0:	andeq	ip, r1, r4, asr r7
   1c5a4:	andeq	ip, r1, r4, asr r7
   1c5a8:	andeq	ip, r1, r4, asr r7
   1c5ac:	andeq	ip, r1, r4, asr r7
   1c5b0:	andeq	ip, r1, r4, asr r7
   1c5b4:	andeq	ip, r1, r4, asr r7
   1c5b8:	andeq	ip, r1, r0, ror #13
   1c5bc:	strdeq	ip, [r1], -r0
   1c5c0:	andeq	ip, r1, r4, asr r7
   1c5c4:	andeq	ip, r1, r4, asr r7
   1c5c8:	andeq	ip, r1, r4, asr r7
   1c5cc:	andeq	ip, r1, r4, asr r7
   1c5d0:	andeq	ip, r1, r4, asr r7
   1c5d4:	andeq	ip, r1, r4, asr r7
   1c5d8:	andeq	ip, r1, r4, asr r7
   1c5dc:	andeq	ip, r1, r0, lsl #14
   1c5e0:	andeq	ip, r1, r4, asr r7
   1c5e4:	andeq	ip, r1, r4, asr r7
   1c5e8:	andeq	ip, r1, r4, asr r7
   1c5ec:	andeq	ip, r1, r4, asr r7
   1c5f0:	andeq	ip, r1, r4, asr r7
   1c5f4:	andeq	ip, r1, r4, asr r7
   1c5f8:	andeq	ip, r1, r4, asr r7
   1c5fc:	andeq	ip, r1, r4, asr r7
   1c600:	andeq	ip, r1, r4, asr r7
   1c604:	andeq	ip, r1, r4, asr r7
   1c608:	andeq	ip, r1, r4, asr r7
   1c60c:	andeq	ip, r1, r0, lsl r6
   1c610:	mov	r3, #0
   1c614:	mov	r7, #2
   1c618:	strb	r3, [r5, r8]
   1c61c:	add	r2, sp, #12
   1c620:	add	r1, sp, #16
   1c624:	mov	r0, r5
   1c628:	bl	1c140 <__assert_fail@plt+0x9b4c>
   1c62c:	subs	r4, r0, #0
   1c630:	beq	1c784 <__assert_fail@plt+0xa190>
   1c634:	mov	r1, r5
   1c638:	mov	r0, r9
   1c63c:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1c640:	mov	r3, #1
   1c644:	ldr	r2, [sp, #12]
   1c648:	strh	r3, [r0, #18]
   1c64c:	ldr	ip, [sp, #16]
   1c650:	ldr	r3, [sp, #20]
   1c654:	cmp	r2, #0
   1c658:	str	r2, [r0, #40]	; 0x28
   1c65c:	str	r7, [r0, #44]	; 0x2c
   1c660:	str	ip, [r0, #48]	; 0x30
   1c664:	str	r3, [r0, #52]	; 0x34
   1c668:	bne	1c720 <__assert_fail@plt+0xa12c>
   1c66c:	vldr	s15, [pc, #356]	; 1c7d8 <__assert_fail@plt+0xa1e4>
   1c670:	mul	r1, r7, r3
   1c674:	asr	r9, r7, #31
   1c678:	vldr	s14, [pc, #348]	; 1c7dc <__assert_fail@plt+0xa1e8>
   1c67c:	umull	r2, r3, r7, ip
   1c680:	mla	r1, ip, r9, r1
   1c684:	add	r3, r1, r3
   1c688:	cmp	r3, #0
   1c68c:	cmpeq	r2, #20480	; 0x5000
   1c690:	vmovls.f32	s15, s14
   1c694:	vstr	s15, [r0, #28]
   1c698:	ldr	r3, [r6]
   1c69c:	add	r3, r3, #1
   1c6a0:	str	r3, [r6]
   1c6a4:	mov	r0, r4
   1c6a8:	add	sp, sp, #24
   1c6ac:	ldrd	r4, [sp]
   1c6b0:	ldrd	r6, [sp, #8]
   1c6b4:	ldrd	r8, [sp, #16]
   1c6b8:	ldr	sl, [sp, #24]
   1c6bc:	add	sp, sp, #28
   1c6c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6c4:	mov	r7, #512	; 0x200
   1c6c8:	mov	sl, #0
   1c6cc:	b	1c61c <__assert_fail@plt+0xa028>
   1c6d0:	mov	r3, #0
   1c6d4:	mov	r7, #1048576	; 0x100000
   1c6d8:	strb	r3, [r5, r8]
   1c6dc:	b	1c61c <__assert_fail@plt+0xa028>
   1c6e0:	mov	r3, #0
   1c6e4:	mov	r7, #512	; 0x200
   1c6e8:	strb	r3, [r5, r8]
   1c6ec:	b	1c61c <__assert_fail@plt+0xa028>
   1c6f0:	mov	r3, #0
   1c6f4:	mov	r7, #1
   1c6f8:	strb	r3, [r5, r8]
   1c6fc:	b	1c61c <__assert_fail@plt+0xa028>
   1c700:	mov	r3, #0
   1c704:	mov	r7, #1024	; 0x400
   1c708:	strb	r3, [r5, r8]
   1c70c:	b	1c61c <__assert_fail@plt+0xa028>
   1c710:	mov	r3, #0
   1c714:	mov	r7, #1073741824	; 0x40000000
   1c718:	strb	r3, [r5, r8]
   1c71c:	b	1c61c <__assert_fail@plt+0xa028>
   1c720:	cmp	r2, #1
   1c724:	movwne	r3, #55050	; 0xd70a
   1c728:	movtne	r3, #15395	; 0x3c23
   1c72c:	strne	r3, [r0, #28]
   1c730:	bne	1c698 <__assert_fail@plt+0xa0a4>
   1c734:	mul	r1, r7, r3
   1c738:	vldr	s15, [pc, #156]	; 1c7dc <__assert_fail@plt+0xa1e8>
   1c73c:	asr	r9, r7, #31
   1c740:	umull	r2, r3, r7, ip
   1c744:	vldr	s14, [pc, #140]	; 1c7d8 <__assert_fail@plt+0xa1e4>
   1c748:	b	1c680 <__assert_fail@plt+0xa08c>
   1c74c:	mov	r4, r5
   1c750:	b	1c6a4 <__assert_fail@plt+0xa0b0>
   1c754:	mov	r2, #5
   1c758:	movw	r1, #22688	; 0x58a0
   1c75c:	movt	r1, #4
   1c760:	mov	r0, #0
   1c764:	bl	120b4 <dcgettext@plt>
   1c768:	ldr	r3, [r6]
   1c76c:	mov	r2, r0
   1c770:	mov	r1, #0
   1c774:	mov	r0, #1
   1c778:	ldr	r3, [r4, r3, lsl #2]
   1c77c:	ldrb	r3, [r3, r8]
   1c780:	bl	121ec <error@plt>
   1c784:	mov	r2, #5
   1c788:	movw	r1, #22712	; 0x58b8
   1c78c:	movt	r1, #4
   1c790:	strb	sl, [sp, #8]
   1c794:	strb	r4, [sp, #9]
   1c798:	bl	120b4 <dcgettext@plt>
   1c79c:	add	ip, sp, #8
   1c7a0:	mov	r2, r0
   1c7a4:	mov	r3, r5
   1c7a8:	mov	r1, r4
   1c7ac:	mov	r0, #1
   1c7b0:	str	ip, [sp]
   1c7b4:	bl	121ec <error@plt>
   1c7b8:	mov	r2, #5
   1c7bc:	movw	r1, #22656	; 0x5880
   1c7c0:	movt	r1, #4
   1c7c4:	bl	120b4 <dcgettext@plt>
   1c7c8:	mov	r2, r0
   1c7cc:	mov	r1, r8
   1c7d0:	mov	r0, #1
   1c7d4:	bl	121ec <error@plt>
   1c7d8:	stclcc	12, cr12, [ip, #820]	; 0x334
   1c7dc:	svccc	0x00666666
   1c7e0:	cmp	r0, #0
   1c7e4:	beq	1c858 <__assert_fail@plt+0xa264>
   1c7e8:	ldr	ip, [r1]
   1c7ec:	str	r4, [sp, #-8]!
   1c7f0:	ldr	r4, [r0, ip, lsl #2]
   1c7f4:	str	lr, [sp, #4]
   1c7f8:	cmp	r4, #0
   1c7fc:	beq	1c840 <__assert_fail@plt+0xa24c>
   1c800:	mov	r0, r1
   1c804:	add	ip, ip, #1
   1c808:	movw	lr, #40556	; 0x9e6c
   1c80c:	movt	lr, #5
   1c810:	mov	r1, r2
   1c814:	str	ip, [r0]
   1c818:	mov	r0, r4
   1c81c:	str	r4, [r3]
   1c820:	ldr	r3, [lr, #52]	; 0x34
   1c824:	blx	r3
   1c828:	cmp	r0, #0
   1c82c:	moveq	r0, #1
   1c830:	bne	1c868 <__assert_fail@plt+0xa274>
   1c834:	ldr	r4, [sp]
   1c838:	add	sp, sp, #4
   1c83c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c840:	mov	r2, #0
   1c844:	ldr	r4, [sp]
   1c848:	add	sp, sp, #4
   1c84c:	mov	r0, r2
   1c850:	str	r2, [r3]
   1c854:	pop	{pc}		; (ldr pc, [sp], #4)
   1c858:	mov	r2, #0
   1c85c:	mov	r0, r2
   1c860:	str	r2, [r3]
   1c864:	bx	lr
   1c868:	bl	12348 <__errno_location@plt>
   1c86c:	mov	r1, r4
   1c870:	ldr	r0, [r0]
   1c874:	bl	1931c <__assert_fail@plt+0x6d28>
   1c878:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c87c:	mov	r4, r1
   1c880:	mov	r5, r0
   1c884:	strd	r6, [sp, #8]
   1c888:	mov	r6, r2
   1c88c:	str	lr, [sp, #16]
   1c890:	sub	sp, sp, #220	; 0xdc
   1c894:	add	r0, sp, #8
   1c898:	bl	18248 <__assert_fail@plt+0x5c54>
   1c89c:	mov	r0, r4
   1c8a0:	mov	r1, r6
   1c8a4:	add	r2, sp, #8
   1c8a8:	add	r3, sp, #4
   1c8ac:	bl	1c7e0 <__assert_fail@plt+0xa1ec>
   1c8b0:	subs	r4, r0, #0
   1c8b4:	bne	1c8d0 <__assert_fail@plt+0xa2dc>
   1c8b8:	mov	r0, r4
   1c8bc:	add	sp, sp, #220	; 0xdc
   1c8c0:	ldrd	r4, [sp]
   1c8c4:	ldrd	r6, [sp, #8]
   1c8c8:	add	sp, sp, #16
   1c8cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c8d0:	movw	r7, #40556	; 0x9e6c
   1c8d4:	movt	r7, #5
   1c8d8:	add	r0, sp, #112	; 0x70
   1c8dc:	bl	18248 <__assert_fail@plt+0x5c54>
   1c8e0:	ldr	r3, [r7, #48]	; 0x30
   1c8e4:	cmp	r3, #0
   1c8e8:	bne	1ca08 <__assert_fail@plt+0xa414>
   1c8ec:	ldrb	r1, [r7, #56]	; 0x38
   1c8f0:	cmp	r1, #0
   1c8f4:	bne	1c950 <__assert_fail@plt+0xa35c>
   1c8f8:	ldr	r3, [sp, #24]
   1c8fc:	and	r3, r3, #61440	; 0xf000
   1c900:	cmp	r3, #40960	; 0xa000
   1c904:	beq	1ca10 <__assert_fail@plt+0xa41c>
   1c908:	ldr	r0, [sp, #4]
   1c90c:	bl	20bfc <__assert_fail@plt+0xe608>
   1c910:	subs	r6, r0, #0
   1c914:	bge	1c964 <__assert_fail@plt+0xa370>
   1c918:	mov	r0, r5
   1c91c:	ldr	r1, [sp, #4]
   1c920:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1c924:	ldrd	r2, [sp, #104]	; 0x68
   1c928:	movw	r1, #55050	; 0xd70a
   1c92c:	movt	r1, #15395	; 0x3c23
   1c930:	mov	ip, #1
   1c934:	str	r6, [r0, #56]	; 0x38
   1c938:	ldrd	r6, [sp, #8]
   1c93c:	strh	ip, [r0, #18]
   1c940:	str	r1, [r0, #28]
   1c944:	strd	r2, [r0, #40]	; 0x28
   1c948:	strd	r6, [r0, #48]	; 0x30
   1c94c:	b	1c8b8 <__assert_fail@plt+0xa2c4>
   1c950:	mov	r1, #32768	; 0x8000
   1c954:	ldr	r0, [sp, #4]
   1c958:	bl	20bfc <__assert_fail@plt+0xe608>
   1c95c:	subs	r6, r0, #0
   1c960:	blt	1c918 <__assert_fail@plt+0xa324>
   1c964:	add	r2, sp, #112	; 0x70
   1c968:	mov	r1, r6
   1c96c:	mov	r0, #3
   1c970:	bl	1215c <__fxstat64@plt>
   1c974:	cmp	r0, #0
   1c978:	bne	1ca18 <__assert_fail@plt+0xa424>
   1c97c:	add	r1, sp, #8
   1c980:	ldr	r0, [sp, #4]
   1c984:	ldr	r3, [r7, #52]	; 0x34
   1c988:	blx	r3
   1c98c:	cmp	r0, #0
   1c990:	bne	1ca18 <__assert_fail@plt+0xa424>
   1c994:	ldr	r3, [r7, #48]	; 0x30
   1c998:	cmp	r3, #0
   1c99c:	bne	1c9f4 <__assert_fail@plt+0xa400>
   1c9a0:	ldrb	r3, [r7, #56]	; 0x38
   1c9a4:	cmp	r3, #0
   1c9a8:	bne	1c9f4 <__assert_fail@plt+0xa400>
   1c9ac:	ldr	r3, [sp, #24]
   1c9b0:	and	r3, r3, #61440	; 0xf000
   1c9b4:	cmp	r3, #40960	; 0xa000
   1c9b8:	beq	1c9e4 <__assert_fail@plt+0xa3f0>
   1c9bc:	ldrd	r0, [sp, #8]
   1c9c0:	ldrd	r2, [sp, #112]	; 0x70
   1c9c4:	cmp	r1, r3
   1c9c8:	cmpeq	r0, r2
   1c9cc:	bne	1c9e4 <__assert_fail@plt+0xa3f0>
   1c9d0:	ldrd	r0, [sp, #104]	; 0x68
   1c9d4:	ldrd	r2, [sp, #208]	; 0xd0
   1c9d8:	cmp	r1, r3
   1c9dc:	cmpeq	r0, r2
   1c9e0:	beq	1c918 <__assert_fail@plt+0xa324>
   1c9e4:	mov	r0, r6
   1c9e8:	mvn	r6, #0
   1c9ec:	bl	125ac <close@plt>
   1c9f0:	b	1c918 <__assert_fail@plt+0xa324>
   1c9f4:	add	r1, sp, #112	; 0x70
   1c9f8:	add	r0, sp, #8
   1c9fc:	mov	r2, #104	; 0x68
   1ca00:	bl	12024 <memcpy@plt>
   1ca04:	b	1c918 <__assert_fail@plt+0xa324>
   1ca08:	mov	r1, #0
   1ca0c:	b	1c908 <__assert_fail@plt+0xa314>
   1ca10:	mvn	r6, #1
   1ca14:	b	1c918 <__assert_fail@plt+0xa324>
   1ca18:	bl	12348 <__errno_location@plt>
   1ca1c:	ldr	r0, [r0]
   1ca20:	ldr	r1, [sp, #4]
   1ca24:	bl	1931c <__assert_fail@plt+0x6d28>
   1ca28:	mov	r3, #0
   1ca2c:	strd	r4, [sp, #-16]!
   1ca30:	mov	r4, r1
   1ca34:	mov	r5, r0
   1ca38:	mov	r0, r3
   1ca3c:	str	r6, [sp, #8]
   1ca40:	str	lr, [sp, #12]
   1ca44:	str	r3, [r1]
   1ca48:	bl	2c53c <__assert_fail@plt+0x19f48>
   1ca4c:	movw	r1, #22748	; 0x58dc
   1ca50:	movt	r1, #4
   1ca54:	str	r0, [r4, #16]
   1ca58:	mov	r0, r5
   1ca5c:	bl	11f40 <strcmp@plt>
   1ca60:	cmp	r0, #0
   1ca64:	beq	1cafc <__assert_fail@plt+0xa508>
   1ca68:	movw	r1, #22776	; 0x58f8
   1ca6c:	movt	r1, #4
   1ca70:	mov	r0, r5
   1ca74:	bl	11f40 <strcmp@plt>
   1ca78:	cmp	r0, #0
   1ca7c:	beq	1cad0 <__assert_fail@plt+0xa4dc>
   1ca80:	movw	r3, #40512	; 0x9e40
   1ca84:	movt	r3, #5
   1ca88:	mov	r1, r5
   1ca8c:	ldr	r0, [r3, #36]	; 0x24
   1ca90:	bl	1951c <__assert_fail@plt+0x6f28>
   1ca94:	cmp	r0, #0
   1ca98:	stmib	r4, {r0, r5}
   1ca9c:	beq	1cb14 <__assert_fail@plt+0xa520>
   1caa0:	bl	123c0 <fileno@plt>
   1caa4:	cmn	r0, #1
   1caa8:	moveq	r0, #0
   1caac:	beq	1cabc <__assert_fail@plt+0xa4c8>
   1cab0:	bl	12564 <isatty@plt>
   1cab4:	adds	r0, r0, #0
   1cab8:	movne	r0, #1
   1cabc:	ldr	r6, [sp, #8]
   1cac0:	strb	r0, [r4, #12]
   1cac4:	ldrd	r4, [sp]
   1cac8:	add	sp, sp, #12
   1cacc:	pop	{pc}		; (ldr pc, [sp], #4)
   1cad0:	movw	r3, #38228	; 0x9554
   1cad4:	movt	r3, #5
   1cad8:	ldr	r3, [r3]
   1cadc:	movw	r1, #17992	; 0x4648
   1cae0:	movt	r1, #4
   1cae4:	mov	r2, #5
   1cae8:	str	r3, [r4, #4]
   1caec:	bl	120b4 <dcgettext@plt>
   1caf0:	str	r0, [r4, #8]
   1caf4:	ldr	r0, [r4, #4]
   1caf8:	b	1caa0 <__assert_fail@plt+0xa4ac>
   1cafc:	movw	r3, #38216	; 0x9548
   1cb00:	movt	r3, #5
   1cb04:	movw	r1, #22760	; 0x58e8
   1cb08:	movt	r1, #4
   1cb0c:	ldr	r3, [r3]
   1cb10:	b	1cae4 <__assert_fail@plt+0xa4f0>
   1cb14:	bl	12348 <__errno_location@plt>
   1cb18:	mov	r1, r5
   1cb1c:	ldr	r0, [r0]
   1cb20:	bl	19350 <__assert_fail@plt+0x6d5c>
   1cb24:	cmp	r1, #0
   1cb28:	beq	1cb9c <__assert_fail@plt+0xa5a8>
   1cb2c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1cb30:	strd	r6, [sp, #8]
   1cb34:	ldr	r7, [r2]
   1cb38:	str	lr, [sp, #16]
   1cb3c:	sub	sp, sp, #28
   1cb40:	ldr	r4, [r1, r7, lsl #2]
   1cb44:	cmp	r4, #0
   1cb48:	moveq	r0, r4
   1cb4c:	beq	1cb88 <__assert_fail@plt+0xa594>
   1cb50:	add	r3, r7, #1
   1cb54:	mov	r6, r0
   1cb58:	add	r1, sp, #4
   1cb5c:	movw	r0, #22776	; 0x58f8
   1cb60:	movt	r0, #4
   1cb64:	str	r3, [r2]
   1cb68:	mov	r5, r2
   1cb6c:	bl	1ca28 <__assert_fail@plt+0xa434>
   1cb70:	mov	r2, r4
   1cb74:	mov	r1, r6
   1cb78:	add	r0, sp, #4
   1cb7c:	bl	1aea0 <__assert_fail@plt+0x88ac>
   1cb80:	cmp	r0, #0
   1cb84:	streq	r7, [r5]
   1cb88:	add	sp, sp, #28
   1cb8c:	ldrd	r4, [sp]
   1cb90:	ldrd	r6, [sp, #8]
   1cb94:	add	sp, sp, #16
   1cb98:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb9c:	mov	r0, r1
   1cba0:	bx	lr
   1cba4:	str	r4, [sp, #-8]!
   1cba8:	str	lr, [sp, #4]
   1cbac:	bl	18014 <__assert_fail@plt+0x5a20>
   1cbb0:	mov	r3, r0
   1cbb4:	movw	r2, #257	; 0x101
   1cbb8:	add	r1, r0, #40	; 0x28
   1cbbc:	movw	r0, #22776	; 0x58f8
   1cbc0:	movt	r0, #4
   1cbc4:	str	r2, [r3, #16]
   1cbc8:	bl	1ca28 <__assert_fail@plt+0xa434>
   1cbcc:	ldr	r4, [sp]
   1cbd0:	add	sp, sp, #4
   1cbd4:	mov	r0, #1
   1cbd8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cbdc:	strd	r4, [sp, #-16]!
   1cbe0:	mov	r5, r1
   1cbe4:	str	r6, [sp, #8]
   1cbe8:	str	lr, [sp, #12]
   1cbec:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1cbf0:	cmp	r5, #0
   1cbf4:	mov	r4, r0
   1cbf8:	movweq	r0, #22776	; 0x58f8
   1cbfc:	movne	r0, r5
   1cc00:	movteq	r0, #4
   1cc04:	add	r1, r4, #40	; 0x28
   1cc08:	bl	1ca28 <__assert_fail@plt+0xa434>
   1cc0c:	mov	r3, #1065353216	; 0x3f800000
   1cc10:	movw	r2, #257	; 0x101
   1cc14:	ldr	r6, [sp, #8]
   1cc18:	mov	r0, #1
   1cc1c:	str	r2, [r4, #16]
   1cc20:	str	r3, [r4, #28]
   1cc24:	ldrd	r4, [sp]
   1cc28:	add	sp, sp, #12
   1cc2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc30:	mov	r1, #0
   1cc34:	b	1cbdc <__assert_fail@plt+0xa5e8>
   1cc38:	cmp	r1, #0
   1cc3c:	beq	1cc88 <__assert_fail@plt+0xa694>
   1cc40:	ldr	r3, [r2]
   1cc44:	ldr	r1, [r1, r3, lsl #2]
   1cc48:	cmp	r1, #0
   1cc4c:	beq	1cc88 <__assert_fail@plt+0xa694>
   1cc50:	add	r3, r3, #1
   1cc54:	str	r4, [sp, #-8]!
   1cc58:	mov	r4, r2
   1cc5c:	str	lr, [sp, #4]
   1cc60:	str	r3, [r2]
   1cc64:	bl	1cbdc <__assert_fail@plt+0xa5e8>
   1cc68:	cmp	r0, #0
   1cc6c:	bne	1cc7c <__assert_fail@plt+0xa688>
   1cc70:	ldr	r3, [r4]
   1cc74:	sub	r3, r3, #1
   1cc78:	str	r3, [r4]
   1cc7c:	ldr	r4, [sp]
   1cc80:	add	sp, sp, #4
   1cc84:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc88:	mov	r0, r1
   1cc8c:	bx	lr
   1cc90:	cmp	r1, #0
   1cc94:	beq	1ccf8 <__assert_fail@plt+0xa704>
   1cc98:	ldr	r3, [r2]
   1cc9c:	strd	r4, [sp, #-16]!
   1cca0:	ldr	r4, [r1, r3, lsl #2]
   1cca4:	str	r6, [sp, #8]
   1cca8:	str	lr, [sp, #12]
   1ccac:	cmp	r4, #0
   1ccb0:	moveq	r0, r4
   1ccb4:	beq	1cce8 <__assert_fail@plt+0xa6f4>
   1ccb8:	add	r3, r3, #1
   1ccbc:	str	r3, [r2]
   1ccc0:	bl	18014 <__assert_fail@plt+0x5a20>
   1ccc4:	mov	r5, r0
   1ccc8:	mov	r0, r4
   1cccc:	add	r1, r5, #40	; 0x28
   1ccd0:	bl	1ca28 <__assert_fail@plt+0xa434>
   1ccd4:	mov	r3, #1065353216	; 0x3f800000
   1ccd8:	movw	r2, #257	; 0x101
   1ccdc:	mov	r0, #1
   1cce0:	strh	r2, [r5, #16]
   1cce4:	str	r3, [r5, #28]
   1cce8:	ldrd	r4, [sp]
   1ccec:	ldr	r6, [sp, #8]
   1ccf0:	add	sp, sp, #12
   1ccf4:	pop	{pc}		; (ldr pc, [sp], #4)
   1ccf8:	mov	r0, r1
   1ccfc:	bx	lr
   1cd00:	cmp	r1, #0
   1cd04:	strd	r4, [sp, #-20]!	; 0xffffffec
   1cd08:	mov	r5, r2
   1cd0c:	ldr	r4, [r2]
   1cd10:	strd	r6, [sp, #8]
   1cd14:	str	lr, [sp, #16]
   1cd18:	sub	sp, sp, #28
   1cd1c:	beq	1cd78 <__assert_fail@plt+0xa784>
   1cd20:	mov	r7, r0
   1cd24:	ldr	r0, [r1, r4, lsl #2]
   1cd28:	lsl	r3, r4, #2
   1cd2c:	cmp	r0, #0
   1cd30:	beq	1cd78 <__assert_fail@plt+0xa784>
   1cd34:	add	r1, r1, r3
   1cd38:	add	r3, r4, #1
   1cd3c:	ldr	r6, [r1, #4]
   1cd40:	str	r3, [r2]
   1cd44:	cmp	r6, #0
   1cd48:	beq	1cd78 <__assert_fail@plt+0xa784>
   1cd4c:	add	r4, r4, #2
   1cd50:	add	r1, sp, #4
   1cd54:	str	r4, [r2]
   1cd58:	bl	1ca28 <__assert_fail@plt+0xa434>
   1cd5c:	add	r0, sp, #4
   1cd60:	mov	r2, r6
   1cd64:	ldr	r4, [r5]
   1cd68:	mov	r1, r7
   1cd6c:	bl	1aea0 <__assert_fail@plt+0x88ac>
   1cd70:	cmp	r0, #0
   1cd74:	bne	1cd80 <__assert_fail@plt+0xa78c>
   1cd78:	mov	r0, #0
   1cd7c:	str	r4, [r5]
   1cd80:	add	sp, sp, #28
   1cd84:	ldrd	r4, [sp]
   1cd88:	ldrd	r6, [sp, #8]
   1cd8c:	add	sp, sp, #16
   1cd90:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd94:	cmp	r1, #0
   1cd98:	beq	1ce00 <__assert_fail@plt+0xa80c>
   1cd9c:	ldr	r3, [r2]
   1cda0:	strd	r4, [sp, #-16]!
   1cda4:	ldr	r4, [r1, r3, lsl #2]
   1cda8:	str	r6, [sp, #8]
   1cdac:	str	lr, [sp, #12]
   1cdb0:	cmp	r4, #0
   1cdb4:	moveq	r0, r4
   1cdb8:	beq	1cdf0 <__assert_fail@plt+0xa7fc>
   1cdbc:	add	r3, r3, #1
   1cdc0:	mov	r1, r4
   1cdc4:	str	r3, [r2]
   1cdc8:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1cdcc:	mov	r5, r0
   1cdd0:	mov	r0, r4
   1cdd4:	add	r1, r5, #40	; 0x28
   1cdd8:	bl	1ca28 <__assert_fail@plt+0xa434>
   1cddc:	mov	r3, #1065353216	; 0x3f800000
   1cde0:	movw	r2, #257	; 0x101
   1cde4:	mov	r0, #1
   1cde8:	str	r2, [r5, #16]
   1cdec:	str	r3, [r5, #28]
   1cdf0:	ldrd	r4, [sp]
   1cdf4:	ldr	r6, [sp, #8]
   1cdf8:	add	sp, sp, #12
   1cdfc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce00:	mov	r0, r1
   1ce04:	bx	lr
   1ce08:	cmp	r1, #0
   1ce0c:	beq	1cf6c <__assert_fail@plt+0xa978>
   1ce10:	ldr	r3, [r2]
   1ce14:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ce18:	ldr	r4, [r1, r3, lsl #2]
   1ce1c:	strd	r6, [sp, #8]
   1ce20:	strd	r8, [sp, #16]
   1ce24:	strd	sl, [sp, #24]
   1ce28:	str	lr, [sp, #32]
   1ce2c:	sub	sp, sp, #20
   1ce30:	cmp	r4, #0
   1ce34:	beq	1cf64 <__assert_fail@plt+0xa970>
   1ce38:	add	r3, r3, #1
   1ce3c:	str	r3, [r2]
   1ce40:	ldrb	r3, [r4]
   1ce44:	cmp	r3, #45	; 0x2d
   1ce48:	beq	1cf50 <__assert_fail@plt+0xa95c>
   1ce4c:	cmp	r3, #47	; 0x2f
   1ce50:	beq	1cf3c <__assert_fail@plt+0xa948>
   1ce54:	movw	fp, #55050	; 0xd70a
   1ce58:	movt	fp, #15395	; 0x3c23
   1ce5c:	mov	r3, r4
   1ce60:	mov	r8, #2
   1ce64:	mov	sl, r0
   1ce68:	mov	r0, r3
   1ce6c:	bl	262d0 <__assert_fail@plt+0x13cdc>
   1ce70:	subs	r7, r0, #0
   1ce74:	beq	1cfac <__assert_fail@plt+0xa9b8>
   1ce78:	ldrb	r3, [r4]
   1ce7c:	cmp	r3, #43	; 0x2b
   1ce80:	bne	1ce94 <__assert_fail@plt+0xa8a0>
   1ce84:	ldrb	r3, [r4, #1]
   1ce88:	sub	r3, r3, #48	; 0x30
   1ce8c:	cmp	r3, #7
   1ce90:	bls	1cfac <__assert_fail@plt+0xa9b8>
   1ce94:	mov	r5, #0
   1ce98:	mov	r3, r7
   1ce9c:	mov	r2, r5
   1cea0:	mov	r1, r5
   1cea4:	mov	r0, r5
   1cea8:	str	r5, [sp]
   1ceac:	bl	266d0 <__assert_fail@plt+0x140dc>
   1ceb0:	mov	r6, r0
   1ceb4:	mov	r3, r7
   1ceb8:	str	r5, [sp]
   1cebc:	mov	r2, r5
   1cec0:	mov	r1, #1
   1cec4:	mov	r0, r5
   1cec8:	str	r6, [sp, #8]
   1cecc:	bl	266d0 <__assert_fail@plt+0x140dc>
   1ced0:	mov	r9, r0
   1ced4:	mov	r0, r7
   1ced8:	orr	r6, r6, r9
   1cedc:	str	r9, [sp, #12]
   1cee0:	bl	2f668 <__assert_fail@plt+0x1d074>
   1cee4:	ldrb	r3, [r4]
   1cee8:	cmp	r3, #47	; 0x2f
   1ceec:	cmpeq	r6, r5
   1cef0:	beq	1cf74 <__assert_fail@plt+0xa980>
   1cef4:	mov	r1, r4
   1cef8:	mov	r0, sl
   1cefc:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1cf00:	ldr	r1, [sp, #8]
   1cf04:	mov	r3, r0
   1cf08:	mov	r0, #1
   1cf0c:	ldr	r2, [sp, #12]
   1cf10:	str	fp, [r3, #28]
   1cf14:	str	r8, [r3, #40]	; 0x28
   1cf18:	str	r1, [r3, #44]	; 0x2c
   1cf1c:	str	r2, [r3, #48]	; 0x30
   1cf20:	add	sp, sp, #20
   1cf24:	ldrd	r4, [sp]
   1cf28:	ldrd	r6, [sp, #8]
   1cf2c:	ldrd	r8, [sp, #16]
   1cf30:	ldrd	sl, [sp, #24]
   1cf34:	add	sp, sp, #32
   1cf38:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf3c:	movw	fp, #39322	; 0x999a
   1cf40:	movt	fp, #16025	; 0x3e99
   1cf44:	add	r3, r4, #1
   1cf48:	mov	r8, #1
   1cf4c:	b	1ce64 <__assert_fail@plt+0xa870>
   1cf50:	movw	fp, #52429	; 0xcccd
   1cf54:	movt	fp, #15948	; 0x3e4c
   1cf58:	add	r3, r4, #1
   1cf5c:	mov	r8, #0
   1cf60:	b	1ce64 <__assert_fail@plt+0xa870>
   1cf64:	mov	r0, r4
   1cf68:	b	1cf20 <__assert_fail@plt+0xa92c>
   1cf6c:	mov	r0, r1
   1cf70:	bx	lr
   1cf74:	mov	r2, #5
   1cf78:	mov	r0, r5
   1cf7c:	movw	r1, #22804	; 0x5914
   1cf80:	movt	r1, #4
   1cf84:	bl	120b4 <dcgettext@plt>
   1cf88:	mov	r2, r0
   1cf8c:	mov	r3, r4
   1cf90:	mov	r1, r5
   1cf94:	mov	r0, r5
   1cf98:	movw	fp, #42048	; 0xa440
   1cf9c:	movt	fp, #16255	; 0x3f7f
   1cfa0:	mov	r8, r5
   1cfa4:	bl	121ec <error@plt>
   1cfa8:	b	1cef4 <__assert_fail@plt+0xa900>
   1cfac:	mov	r2, #5
   1cfb0:	movw	r1, #22788	; 0x5904
   1cfb4:	movt	r1, #4
   1cfb8:	mov	r0, #0
   1cfbc:	bl	120b4 <dcgettext@plt>
   1cfc0:	movw	r3, #40556	; 0x9e6c
   1cfc4:	movt	r3, #5
   1cfc8:	mov	r5, r0
   1cfcc:	mov	r2, r4
   1cfd0:	ldr	r1, [r3, #72]	; 0x48
   1cfd4:	mov	r0, #0
   1cfd8:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   1cfdc:	mov	r3, r0
   1cfe0:	mov	r2, r5
   1cfe4:	mov	r1, #0
   1cfe8:	mov	r0, #1
   1cfec:	bl	121ec <error@plt>
   1cff0:	cmp	r2, #0
   1cff4:	beq	1d4c0 <__assert_fail@plt+0xaecc>
   1cff8:	ldr	ip, [r3]
   1cffc:	ldr	ip, [r2, ip, lsl #2]
   1d000:	cmp	ip, #0
   1d004:	beq	1d3a0 <__assert_fail@plt+0xadac>
   1d008:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d00c:	strd	r6, [sp, #8]
   1d010:	mov	r7, r0
   1d014:	mov	r0, r1
   1d018:	strd	r8, [sp, #16]
   1d01c:	ldr	r8, [r1, #12]
   1d020:	strd	sl, [sp, #24]
   1d024:	movw	sl, #18348	; 0x47ac
   1d028:	movt	sl, #1
   1d02c:	str	lr, [sp, #32]
   1d030:	sub	sp, sp, #76	; 0x4c
   1d034:	str	r3, [sp, #32]
   1d038:	movw	r3, #18444	; 0x480c
   1d03c:	movt	r3, #1
   1d040:	mov	r4, r3
   1d044:	mov	r1, r8
   1d048:	str	r3, [sp, #24]
   1d04c:	str	r2, [sp, #36]	; 0x24
   1d050:	movw	r2, #23032	; 0x59f8
   1d054:	movt	r2, #4
   1d058:	bl	17f60 <__assert_fail@plt+0x596c>
   1d05c:	cmp	r8, sl
   1d060:	cmpne	r8, r4
   1d064:	mov	r1, r4
   1d068:	str	r0, [sp, #28]
   1d06c:	movw	r2, #257	; 0x101
   1d070:	mov	r3, #0
   1d074:	movne	r1, #1
   1d078:	moveq	r1, #0
   1d07c:	str	r2, [r0, #16]
   1d080:	str	r1, [sp, #16]
   1d084:	str	r3, [r0, #144]	; 0x90
   1d088:	bne	1d180 <__assert_fail@plt+0xab8c>
   1d08c:	movw	r2, #16756	; 0x4174
   1d090:	movt	r2, #1
   1d094:	mov	r1, r2
   1d098:	movw	r3, #40556	; 0x9e6c
   1d09c:	movt	r3, #5
   1d0a0:	cmp	r8, r1
   1d0a4:	str	r1, [sp, #20]
   1d0a8:	mov	r2, #1
   1d0ac:	ldr	r1, [sp, #28]
   1d0b0:	strb	r2, [r3, #80]	; 0x50
   1d0b4:	strb	r2, [r1, #140]	; 0x8c
   1d0b8:	beq	1d0c8 <__assert_fail@plt+0xaad4>
   1d0bc:	ldr	r2, [sp, #24]
   1d0c0:	cmp	r8, r2
   1d0c4:	bne	1d1a0 <__assert_fail@plt+0xabac>
   1d0c8:	mov	r2, #0
   1d0cc:	movw	r0, #23468	; 0x5bac
   1d0d0:	movt	r0, #4
   1d0d4:	strb	r2, [r3, #14]
   1d0d8:	bl	12228 <getenv@plt>
   1d0dc:	subs	r4, r0, #0
   1d0e0:	beq	1d1bc <__assert_fail@plt+0xabc8>
   1d0e4:	add	r6, sp, #52	; 0x34
   1d0e8:	add	r3, sp, #48	; 0x30
   1d0ec:	movw	r1, #12704	; 0x31a0
   1d0f0:	movt	r1, #4
   1d0f4:	mov	r2, #1
   1d0f8:	str	r6, [sp]
   1d0fc:	mov	r5, r1
   1d100:	bl	21d98 <__assert_fail@plt+0xf7a4>
   1d104:	b	1d130 <__assert_fail@plt+0xab3c>
   1d108:	cmp	r3, #47	; 0x2f
   1d10c:	bne	1d574 <__assert_fail@plt+0xaf80>
   1d110:	add	r3, sp, #48	; 0x30
   1d114:	mov	r2, #0
   1d118:	str	r6, [sp]
   1d11c:	mov	r1, r5
   1d120:	mov	r0, r4
   1d124:	bl	21d98 <__assert_fail@plt+0xf7a4>
   1d128:	cmp	r0, #0
   1d12c:	beq	1d1bc <__assert_fail@plt+0xabc8>
   1d130:	ldr	r1, [sp, #52]	; 0x34
   1d134:	cmp	r1, #0
   1d138:	beq	1d158 <__assert_fail@plt+0xab64>
   1d13c:	ldr	r3, [sp, #48]	; 0x30
   1d140:	cmp	r1, #1
   1d144:	add	r0, r4, r3
   1d148:	ldrb	r3, [r4, r3]
   1d14c:	bne	1d108 <__assert_fail@plt+0xab14>
   1d150:	cmp	r3, #46	; 0x2e
   1d154:	bne	1d108 <__assert_fail@plt+0xab14>
   1d158:	mov	r2, #5
   1d15c:	movw	r1, #23056	; 0x5a10
   1d160:	movt	r1, #4
   1d164:	mov	r0, #0
   1d168:	bl	120b4 <dcgettext@plt>
   1d16c:	mov	r2, r0
   1d170:	mov	r3, r7
   1d174:	mov	r1, #0
   1d178:	mov	r0, #1
   1d17c:	bl	121ec <error@plt>
   1d180:	movw	r1, #16756	; 0x4174
   1d184:	movt	r1, #1
   1d188:	strb	r3, [r0, #140]	; 0x8c
   1d18c:	cmp	r8, r1
   1d190:	movweq	r3, #40556	; 0x9e6c
   1d194:	str	r1, [sp, #20]
   1d198:	movteq	r3, #5
   1d19c:	beq	1d0c8 <__assert_fail@plt+0xaad4>
   1d1a0:	movw	r3, #38252	; 0x956c
   1d1a4:	movt	r3, #5
   1d1a8:	ldr	r3, [r3]
   1d1ac:	cmp	r3, #0
   1d1b0:	beq	1d5c4 <__assert_fail@plt+0xafd0>
   1d1b4:	ldr	r2, [sp, #28]
   1d1b8:	str	r3, [r2, #144]	; 0x90
   1d1bc:	ldr	r3, [sp, #28]
   1d1c0:	mov	r9, #0
   1d1c4:	strb	r9, [r3, #40]	; 0x28
   1d1c8:	ldr	r3, [sp, #32]
   1d1cc:	ldr	r4, [r3]
   1d1d0:	ldr	r3, [sp, #36]	; 0x24
   1d1d4:	str	r4, [sp, #40]	; 0x28
   1d1d8:	ldr	sl, [r3, r4, lsl #2]
   1d1dc:	add	r5, r3, r4, lsl #2
   1d1e0:	cmp	sl, r9
   1d1e4:	beq	1d4c8 <__assert_fail@plt+0xaed4>
   1d1e8:	movw	r7, #23496	; 0x5bc8
   1d1ec:	movt	r7, #4
   1d1f0:	str	r5, [sp, #44]	; 0x2c
   1d1f4:	mov	r6, r9
   1d1f8:	mov	r0, r9
   1d1fc:	mov	fp, r5
   1d200:	b	1d26c <__assert_fail@plt+0xac78>
   1d204:	ldr	r3, [sp, #16]
   1d208:	cmp	r1, #43	; 0x2b
   1d20c:	movne	r3, #0
   1d210:	andeq	r3, r3, #1
   1d214:	cmp	r3, #0
   1d218:	bne	1d378 <__assert_fail@plt+0xad84>
   1d21c:	mov	r1, r7
   1d220:	mov	r0, sl
   1d224:	bl	253dc <__assert_fail@plt+0x12de8>
   1d228:	cmp	r0, #0
   1d22c:	beq	1d258 <__assert_fail@plt+0xac64>
   1d230:	cmp	r4, #0
   1d234:	add	r6, r6, #1
   1d238:	bne	1d250 <__assert_fail@plt+0xac5c>
   1d23c:	ldr	r3, [sp, #20]
   1d240:	ldr	r2, [sp, #24]
   1d244:	cmp	r8, r2
   1d248:	cmpne	r8, r3
   1d24c:	beq	1d550 <__assert_fail@plt+0xaf5c>
   1d250:	mov	r9, sl
   1d254:	mov	r0, #1
   1d258:	ldr	sl, [r5, #4]!
   1d25c:	add	r4, r4, #1
   1d260:	add	fp, fp, #4
   1d264:	cmp	sl, #0
   1d268:	beq	1d4cc <__assert_fail@plt+0xaed8>
   1d26c:	ldrb	r1, [sl]
   1d270:	cmp	r1, #59	; 0x3b
   1d274:	bne	1d204 <__assert_fail@plt+0xac10>
   1d278:	ldrb	r1, [sl, #1]
   1d27c:	cmp	r1, #0
   1d280:	bne	1d21c <__assert_fail@plt+0xac28>
   1d284:	mov	r5, fp
   1d288:	ldr	r3, [sp, #40]	; 0x28
   1d28c:	cmp	r3, r4
   1d290:	beq	1d4cc <__assert_fail@plt+0xaed8>
   1d294:	ldr	r3, [r5]
   1d298:	cmp	r3, #0
   1d29c:	beq	1d4cc <__assert_fail@plt+0xaed8>
   1d2a0:	ldr	r3, [sp, #28]
   1d2a4:	ldrb	r3, [r3, #40]	; 0x28
   1d2a8:	cmp	r3, #0
   1d2ac:	beq	1d3a8 <__assert_fail@plt+0xadb4>
   1d2b0:	ldr	r1, [sp, #20]
   1d2b4:	movw	r2, #25948	; 0x655c
   1d2b8:	movt	r2, #4
   1d2bc:	movw	r3, #17776	; 0x4570
   1d2c0:	movt	r3, #4
   1d2c4:	cmp	r8, r1
   1d2c8:	moveq	r8, r2
   1d2cc:	movne	r8, r3
   1d2d0:	cmp	r6, #1
   1d2d4:	bgt	1d5e0 <__assert_fail@plt+0xafec>
   1d2d8:	mov	r0, r9
   1d2dc:	bl	12300 <strlen@plt>
   1d2e0:	cmp	r0, #2
   1d2e4:	beq	1d3a8 <__assert_fail@plt+0xadb4>
   1d2e8:	mov	r3, r8
   1d2ec:	mov	r1, #19
   1d2f0:	add	r0, sp, #52	; 0x34
   1d2f4:	movw	r2, #23672	; 0x5c78
   1d2f8:	movt	r2, #4
   1d2fc:	movw	r4, #40556	; 0x9e6c
   1d300:	movt	r4, #5
   1d304:	bl	12360 <snprintf@plt>
   1d308:	mov	r2, #5
   1d30c:	movw	r1, #23692	; 0x5c8c
   1d310:	movt	r1, #4
   1d314:	mov	r0, #0
   1d318:	bl	120b4 <dcgettext@plt>
   1d31c:	mov	r6, r0
   1d320:	add	r2, sp, #52	; 0x34
   1d324:	ldr	r1, [r4, #72]	; 0x48
   1d328:	mov	r0, #0
   1d32c:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   1d330:	mov	r7, r0
   1d334:	movw	r2, #23496	; 0x5bc8
   1d338:	movt	r2, #4
   1d33c:	mov	r0, #1
   1d340:	ldr	r1, [r4, #72]	; 0x48
   1d344:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   1d348:	mov	r5, r0
   1d34c:	mov	r2, r9
   1d350:	ldr	r1, [r4, #72]	; 0x48
   1d354:	mov	r0, #2
   1d358:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   1d35c:	mov	r3, r7
   1d360:	mov	r2, r6
   1d364:	str	r5, [sp]
   1d368:	mov	r1, #0
   1d36c:	str	r0, [sp, #4]
   1d370:	mov	r0, #1
   1d374:	bl	121ec <error@plt>
   1d378:	ldrb	r1, [sl, #1]
   1d37c:	cmp	r1, #0
   1d380:	movne	r0, #0
   1d384:	cmp	r0, #0
   1d388:	beq	1d21c <__assert_fail@plt+0xac28>
   1d38c:	ldr	r2, [sp, #28]
   1d390:	mov	r3, #1
   1d394:	mov	r5, fp
   1d398:	strb	r3, [r2, #40]	; 0x28
   1d39c:	b	1d288 <__assert_fail@plt+0xac94>
   1d3a0:	mov	r0, ip
   1d3a4:	bx	lr
   1d3a8:	ldr	r3, [sp, #28]
   1d3ac:	mov	r1, #2048	; 0x800
   1d3b0:	add	r6, r3, #44	; 0x2c
   1d3b4:	add	r8, r3, #40	; 0x28
   1d3b8:	mov	r0, r6
   1d3bc:	bl	20270 <__assert_fail@plt+0xdc7c>
   1d3c0:	sub	r0, r0, #1
   1d3c4:	cmp	r0, #1
   1d3c8:	bls	1d608 <__assert_fail@plt+0xb014>
   1d3cc:	ldr	r9, [sp, #28]
   1d3d0:	mov	r0, r6
   1d3d4:	bl	2035c <__assert_fail@plt+0xdd68>
   1d3d8:	ldr	sl, [sp, #40]	; 0x28
   1d3dc:	movw	r3, #22156	; 0x568c
   1d3e0:	movt	r3, #1
   1d3e4:	ldrb	r1, [r9, #40]	; 0x28
   1d3e8:	add	r7, r9, #88	; 0x58
   1d3ec:	mov	r0, r9
   1d3f0:	mov	ip, r9
   1d3f4:	str	r3, [r9, #76]	; 0x4c
   1d3f8:	sub	r2, r4, sl
   1d3fc:	cmp	r1, #0
   1d400:	beq	1d4e4 <__assert_fail@plt+0xaef0>
   1d404:	mov	r9, #0
   1d408:	sub	r3, r2, #1
   1d40c:	mov	r1, r7
   1d410:	mov	r2, r8
   1d414:	str	r9, [r0, #64]	; 0x40
   1d418:	str	r9, [r0, #68]	; 0x44
   1d41c:	str	r3, [r0, #72]	; 0x48
   1d420:	mov	r0, r6
   1d424:	str	r9, [ip, #80]	; 0x50
   1d428:	str	r9, [ip, #84]	; 0x54
   1d42c:	str	r9, [ip, #132]	; 0x84
   1d430:	bl	2037c <__assert_fail@plt+0xdd88>
   1d434:	sub	r3, r4, #1
   1d438:	cmp	r3, sl
   1d43c:	ble	1d48c <__assert_fail@plt+0xae98>
   1d440:	ldr	r3, [sp, #36]	; 0x24
   1d444:	mov	sl, #1
   1d448:	str	r4, [sp, #16]
   1d44c:	ldr	fp, [sp, #44]	; 0x2c
   1d450:	sub	r8, r3, #4
   1d454:	add	r8, r8, r4, lsl #2
   1d458:	ldr	r4, [fp], #4
   1d45c:	mov	r0, r4
   1d460:	bl	12300 <strlen@plt>
   1d464:	add	r3, r0, #1
   1d468:	mov	r2, r4
   1d46c:	str	r9, [sp]
   1d470:	mov	r1, r7
   1d474:	mov	r0, r6
   1d478:	stmib	sp, {r9, sl}
   1d47c:	bl	1fa5c <__assert_fail@plt+0xd468>
   1d480:	cmp	fp, r8
   1d484:	bne	1d458 <__assert_fail@plt+0xae64>
   1d488:	ldr	r4, [sp, #16]
   1d48c:	mov	r0, #1
   1d490:	ldr	r3, [r5]
   1d494:	cmp	r3, #0
   1d498:	ldr	r3, [sp, #32]
   1d49c:	addne	r4, r4, #1
   1d4a0:	str	r4, [r3]
   1d4a4:	add	sp, sp, #76	; 0x4c
   1d4a8:	ldrd	r4, [sp]
   1d4ac:	ldrd	r6, [sp, #8]
   1d4b0:	ldrd	r8, [sp, #16]
   1d4b4:	ldrd	sl, [sp, #24]
   1d4b8:	add	sp, sp, #32
   1d4bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1d4c0:	mov	r0, r2
   1d4c4:	bx	lr
   1d4c8:	ldr	r4, [sp, #40]	; 0x28
   1d4cc:	ldr	r0, [sp, #28]
   1d4d0:	ldr	r3, [sp, #32]
   1d4d4:	str	r4, [r3]
   1d4d8:	bl	2f668 <__assert_fail@plt+0x1d074>
   1d4dc:	mov	r0, #0
   1d4e0:	b	1d4a4 <__assert_fail@plt+0xaeb0>
   1d4e4:	ldr	r9, [sp, #28]
   1d4e8:	movw	r3, #23496	; 0x5bc8
   1d4ec:	movt	r3, #4
   1d4f0:	str	r3, [r9, #68]	; 0x44
   1d4f4:	str	r1, [r9, #80]	; 0x50
   1d4f8:	str	r1, [r9, #84]	; 0x54
   1d4fc:	mov	r1, #2
   1d500:	lsl	r0, r2, r1
   1d504:	str	r1, [r9, #64]	; 0x40
   1d508:	str	r2, [r9, #136]	; 0x88
   1d50c:	bl	2da2c <__assert_fail@plt+0x1b438>
   1d510:	mov	r1, r7
   1d514:	mov	r2, r8
   1d518:	str	r0, [r9, #132]	; 0x84
   1d51c:	mov	r0, r6
   1d520:	bl	2037c <__assert_fail@plt+0xdd88>
   1d524:	ldr	r1, [r9, #136]	; 0x88
   1d528:	cmp	r1, #0
   1d52c:	ble	1d48c <__assert_fail@plt+0xae98>
   1d530:	ldr	r3, [r9, #132]	; 0x84
   1d534:	ldr	r2, [sp, #44]	; 0x2c
   1d538:	add	r1, r3, r1, lsl #2
   1d53c:	ldr	r0, [r2], #4
   1d540:	str	r0, [r3], #4
   1d544:	cmp	r1, r3
   1d548:	bne	1d53c <__assert_fail@plt+0xaf48>
   1d54c:	b	1d48c <__assert_fail@plt+0xae98>
   1d550:	mov	r2, #5
   1d554:	movw	r1, #23500	; 0x5bcc
   1d558:	movt	r1, #4
   1d55c:	mov	r0, r4
   1d560:	bl	120b4 <dcgettext@plt>
   1d564:	mov	r2, r0
   1d568:	mov	r1, r4
   1d56c:	mov	r0, #1
   1d570:	bl	121ec <error@plt>
   1d574:	bl	12000 <strndup@plt>
   1d578:	mov	r5, r0
   1d57c:	mov	r2, #5
   1d580:	movw	r1, #23308	; 0x5b0c
   1d584:	movt	r1, #4
   1d588:	mov	r0, #0
   1d58c:	bl	120b4 <dcgettext@plt>
   1d590:	cmp	r5, #0
   1d594:	mov	r6, r0
   1d598:	ldreq	r5, [sp, #48]	; 0x30
   1d59c:	mov	r0, #0
   1d5a0:	addeq	r5, r4, r5
   1d5a4:	mov	r1, r5
   1d5a8:	bl	192f4 <__assert_fail@plt+0x6d00>
   1d5ac:	mov	r3, r0
   1d5b0:	mov	r2, r6
   1d5b4:	str	r7, [sp]
   1d5b8:	mov	r1, #0
   1d5bc:	mov	r0, #1
   1d5c0:	bl	121ec <error@plt>
   1d5c4:	movw	r1, #22540	; 0x580c
   1d5c8:	movt	r1, #4
   1d5cc:	ldr	r3, [pc, #88]	; 1d62c <__assert_fail@plt+0xb038>
   1d5d0:	movw	r0, #23476	; 0x5bb4
   1d5d4:	movt	r0, #4
   1d5d8:	movw	r2, #2937	; 0xb79
   1d5dc:	bl	125f4 <__assert_fail@plt>
   1d5e0:	mov	r2, #5
   1d5e4:	movw	r1, #23616	; 0x5c40
   1d5e8:	movt	r1, #4
   1d5ec:	mov	r0, #0
   1d5f0:	bl	120b4 <dcgettext@plt>
   1d5f4:	mov	r2, r0
   1d5f8:	mov	r3, r8
   1d5fc:	mov	r1, #0
   1d600:	mov	r0, #1
   1d604:	bl	121ec <error@plt>
   1d608:	mov	r2, #5
   1d60c:	movw	r1, #23752	; 0x5cc8
   1d610:	movt	r1, #4
   1d614:	mov	r0, #0
   1d618:	bl	120b4 <dcgettext@plt>
   1d61c:	mov	r2, r0
   1d620:	mov	r1, #0
   1d624:	mov	r0, #1
   1d628:	bl	121ec <error@plt>
   1d62c:	strdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   1d630:	mov	r3, r2
   1d634:	mov	r2, r1
   1d638:	mov	r1, r0
   1d63c:	movw	r0, #11416	; 0x2c98
   1d640:	movt	r0, #4
   1d644:	b	1cff0 <__assert_fail@plt+0xa9fc>
   1d648:	mov	r3, r2
   1d64c:	mov	r2, r1
   1d650:	mov	r1, r0
   1d654:	movw	r0, #23796	; 0x5cf4
   1d658:	movt	r0, #4
   1d65c:	b	1cff0 <__assert_fail@plt+0xa9fc>
   1d660:	mov	r3, r2
   1d664:	mov	r2, r1
   1d668:	mov	r1, r0
   1d66c:	movw	r0, #23800	; 0x5cf8
   1d670:	movt	r0, #4
   1d674:	b	1cff0 <__assert_fail@plt+0xa9fc>
   1d678:	mov	r3, r2
   1d67c:	mov	r2, r1
   1d680:	mov	r1, r0
   1d684:	movw	r0, #23812	; 0x5d04
   1d688:	movt	r0, #4
   1d68c:	b	1cff0 <__assert_fail@plt+0xa9fc>
   1d690:	str	r4, [sp, #-8]!
   1d694:	str	lr, [sp, #4]
   1d698:	bl	166e0 <__assert_fail@plt+0x40ec>
   1d69c:	mov	r3, r0
   1d6a0:	movw	r2, #15444	; 0x3c54
   1d6a4:	movt	r2, #1
   1d6a8:	mov	lr, #3
   1d6ac:	ldr	r4, [sp]
   1d6b0:	mov	ip, #2
   1d6b4:	mov	r1, #0
   1d6b8:	add	sp, sp, #4
   1d6bc:	mov	r0, #1
   1d6c0:	str	r2, [r3]
   1d6c4:	str	lr, [r3, #8]
   1d6c8:	str	ip, [r3, #12]
   1d6cc:	strh	r1, [r3, #18]
   1d6d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d6d4:	str	r4, [sp, #-8]!
   1d6d8:	str	lr, [sp, #4]
   1d6dc:	bl	166e0 <__assert_fail@plt+0x40ec>
   1d6e0:	mov	r3, r0
   1d6e4:	mov	r1, #3
   1d6e8:	ldr	r4, [sp]
   1d6ec:	movw	r2, #14464	; 0x3880
   1d6f0:	movt	r2, #1
   1d6f4:	mov	ip, #0
   1d6f8:	add	sp, sp, #4
   1d6fc:	mov	r0, #1
   1d700:	str	r2, [r3]
   1d704:	str	r1, [r3, #8]
   1d708:	str	r1, [r3, #12]
   1d70c:	strh	ip, [r3, #18]
   1d710:	pop	{pc}		; (ldr pc, [sp], #4)
   1d714:	str	r4, [sp, #-8]!
   1d718:	mov	r4, #3
   1d71c:	str	lr, [sp, #4]
   1d720:	bl	166e0 <__assert_fail@plt+0x40ec>
   1d724:	mov	r3, r0
   1d728:	mov	r1, #1
   1d72c:	mov	ip, #1065353216	; 0x3f800000
   1d730:	movw	r2, #15848	; 0x3de8
   1d734:	movt	r2, #1
   1d738:	mov	lr, #0
   1d73c:	mov	r0, r1
   1d740:	str	r2, [r3]
   1d744:	str	r4, [r3, #8]
   1d748:	ldr	r4, [sp]
   1d74c:	add	sp, sp, #4
   1d750:	str	r1, [r3, #12]
   1d754:	strh	lr, [r3, #18]
   1d758:	str	ip, [r3, #28]
   1d75c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d760:	str	r4, [sp, #-8]!
   1d764:	str	lr, [sp, #4]
   1d768:	bl	166e0 <__assert_fail@plt+0x40ec>
   1d76c:	mov	r3, r0
   1d770:	mov	r1, #0
   1d774:	ldr	r4, [sp]
   1d778:	movw	r2, #15708	; 0x3d5c
   1d77c:	movt	r2, #1
   1d780:	mov	ip, #5
   1d784:	add	sp, sp, #4
   1d788:	mov	r0, #1
   1d78c:	str	r2, [r3]
   1d790:	str	ip, [r3, #8]
   1d794:	str	r1, [r3, #12]
   1d798:	strh	r1, [r3, #18]
   1d79c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d7a0:	cmp	r1, #0
   1d7a4:	beq	1d8d8 <__assert_fail@plt+0xb2e4>
   1d7a8:	ldr	r3, [r2]
   1d7ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d7b0:	ldr	r4, [r1, r3, lsl #2]
   1d7b4:	strd	r6, [sp, #8]
   1d7b8:	str	r8, [sp, #16]
   1d7bc:	str	lr, [sp, #20]
   1d7c0:	sub	sp, sp, #8
   1d7c4:	cmp	r4, #0
   1d7c8:	beq	1d884 <__assert_fail@plt+0xb290>
   1d7cc:	add	r3, r3, #1
   1d7d0:	mov	r5, r0
   1d7d4:	mov	r0, r4
   1d7d8:	str	r3, [r2]
   1d7dc:	bl	125dc <getgrnam@plt>
   1d7e0:	mov	r6, r0
   1d7e4:	bl	11ed4 <endgrent@plt>
   1d7e8:	cmp	r6, #0
   1d7ec:	beq	1d840 <__assert_fail@plt+0xb24c>
   1d7f0:	ldr	r6, [r6, #8]
   1d7f4:	mov	r1, r4
   1d7f8:	mov	r0, r5
   1d7fc:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1d800:	mov	r3, r0
   1d804:	vldr	s15, [pc, #336]	; 1d95c <__assert_fail@plt+0xb368>
   1d808:	mov	r0, #1
   1d80c:	ldrd	r4, [r3, #48]	; 0x30
   1d810:	str	r6, [r3, #40]	; 0x28
   1d814:	vldr	s14, [pc, #324]	; 1d960 <__assert_fail@plt+0xb36c>
   1d818:	cmp	r5, #0
   1d81c:	cmpeq	r4, #100	; 0x64
   1d820:	vmovcs.f32	s15, s14
   1d824:	vstr	s15, [r3, #28]
   1d828:	add	sp, sp, #8
   1d82c:	ldrd	r4, [sp]
   1d830:	ldrd	r6, [sp, #8]
   1d834:	ldr	r8, [sp, #16]
   1d838:	add	sp, sp, #20
   1d83c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d840:	movw	r1, #22444	; 0x57ac
   1d844:	movt	r1, #4
   1d848:	mov	r0, r4
   1d84c:	bl	125e8 <strspn@plt>
   1d850:	subs	r7, r0, #0
   1d854:	beq	1d88c <__assert_fail@plt+0xb298>
   1d858:	ldrb	r3, [r4, r7]
   1d85c:	add	r7, r4, r7
   1d860:	cmp	r3, #0
   1d864:	bne	1d900 <__assert_fail@plt+0xb30c>
   1d868:	movw	r3, #40556	; 0x9e6c
   1d86c:	movt	r3, #5
   1d870:	mov	r0, r4
   1d874:	ldr	r1, [r3, #72]	; 0x48
   1d878:	bl	21c70 <__assert_fail@plt+0xf67c>
   1d87c:	mov	r6, r0
   1d880:	b	1d7f4 <__assert_fail@plt+0xb200>
   1d884:	mov	r0, r4
   1d888:	b	1d828 <__assert_fail@plt+0xb234>
   1d88c:	ldrb	r5, [r4]
   1d890:	cmp	r5, #0
   1d894:	beq	1d8e0 <__assert_fail@plt+0xb2ec>
   1d898:	mov	r2, #5
   1d89c:	movw	r1, #23948	; 0x5d8c
   1d8a0:	movt	r1, #4
   1d8a4:	bl	120b4 <dcgettext@plt>
   1d8a8:	movw	r3, #40556	; 0x9e6c
   1d8ac:	movt	r3, #5
   1d8b0:	mov	r5, r0
   1d8b4:	mov	r2, r4
   1d8b8:	ldr	r1, [r3, #72]	; 0x48
   1d8bc:	mov	r0, r7
   1d8c0:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   1d8c4:	mov	r3, r0
   1d8c8:	mov	r2, r5
   1d8cc:	mov	r1, r7
   1d8d0:	mov	r0, #1
   1d8d4:	bl	121ec <error@plt>
   1d8d8:	mov	r0, r1
   1d8dc:	bx	lr
   1d8e0:	mov	r2, #5
   1d8e4:	movw	r1, #23988	; 0x5db4
   1d8e8:	movt	r1, #4
   1d8ec:	bl	120b4 <dcgettext@plt>
   1d8f0:	mov	r2, r0
   1d8f4:	mov	r1, r5
   1d8f8:	mov	r0, #1
   1d8fc:	bl	121ec <error@plt>
   1d900:	mov	r2, #5
   1d904:	movw	r1, #23820	; 0x5d0c
   1d908:	movt	r1, #4
   1d90c:	mov	r0, r6
   1d910:	bl	120b4 <dcgettext@plt>
   1d914:	movw	r5, #40556	; 0x9e6c
   1d918:	movt	r5, #5
   1d91c:	mov	r2, r4
   1d920:	mov	r8, r0
   1d924:	ldr	r1, [r5, #72]	; 0x48
   1d928:	mov	r0, r6
   1d92c:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   1d930:	mov	r4, r0
   1d934:	mov	r2, r7
   1d938:	ldr	r1, [r5, #72]	; 0x48
   1d93c:	mov	r0, #1
   1d940:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   1d944:	mov	r3, r4
   1d948:	mov	r2, r8
   1d94c:	str	r0, [sp]
   1d950:	mov	r1, r6
   1d954:	mov	r0, #1
   1d958:	bl	121ec <error@plt>
   1d95c:	svccc	0x007d70a4
   1d960:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d964:	mov	r1, #0
   1d968:	str	r4, [sp, #-8]!
   1d96c:	str	lr, [sp, #4]
   1d970:	bl	16704 <__assert_fail@plt+0x4110>
   1d974:	mov	r3, r0
   1d978:	movw	r2, #17816	; 0x4598
   1d97c:	movt	r2, #1
   1d980:	mov	lr, #2
   1d984:	ldr	r4, [sp]
   1d988:	mov	ip, #4
   1d98c:	mov	r1, #0
   1d990:	add	sp, sp, #4
   1d994:	mov	r0, #1
   1d998:	str	r2, [r3]
   1d99c:	str	lr, [r3, #8]
   1d9a0:	str	ip, [r3, #12]
   1d9a4:	strh	r1, [r3, #18]
   1d9a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d9ac:	mov	r1, #0
   1d9b0:	str	r4, [sp, #-8]!
   1d9b4:	str	lr, [sp, #4]
   1d9b8:	bl	16704 <__assert_fail@plt+0x4110>
   1d9bc:	mov	r3, r0
   1d9c0:	mov	r1, #0
   1d9c4:	ldr	r4, [sp]
   1d9c8:	movw	r2, #18544	; 0x4870
   1d9cc:	movt	r2, #1
   1d9d0:	mov	ip, #4
   1d9d4:	add	sp, sp, #4
   1d9d8:	mov	r0, #1
   1d9dc:	str	r2, [r3]
   1d9e0:	str	ip, [r3, #8]
   1d9e4:	str	r1, [r3, #12]
   1d9e8:	strh	r1, [r3, #18]
   1d9ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1d9f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d9f4:	strd	r6, [sp, #8]
   1d9f8:	subs	r6, r1, #0
   1d9fc:	strd	r8, [sp, #16]
   1da00:	strd	sl, [sp, #24]
   1da04:	str	lr, [sp, #32]
   1da08:	sub	sp, sp, #124	; 0x7c
   1da0c:	beq	1dc28 <__assert_fail@plt+0xb634>
   1da10:	ldr	r7, [r2]
   1da14:	ldr	r4, [r6, r7, lsl #2]
   1da18:	lsl	r9, r7, #2
   1da1c:	cmp	r4, #0
   1da20:	beq	1dc2c <__assert_fail@plt+0xb638>
   1da24:	mov	r8, r0
   1da28:	mov	r0, r4
   1da2c:	mov	r5, r2
   1da30:	bl	12300 <strlen@plt>
   1da34:	cmp	r0, #8
   1da38:	bne	1dc28 <__assert_fail@plt+0xb634>
   1da3c:	movw	r3, #24404	; 0x5f54
   1da40:	movt	r3, #4
   1da44:	ldrh	ip, [r3, #4]
   1da48:	movw	r0, #24044	; 0x5dec
   1da4c:	movt	r0, #4
   1da50:	mov	r2, #6
   1da54:	mov	r1, r4
   1da58:	ldr	r3, [r3]
   1da5c:	str	r3, [sp, #8]
   1da60:	strh	ip, [sp, #12]
   1da64:	bl	12594 <strncmp@plt>
   1da68:	subs	r3, r0, #0
   1da6c:	bne	1dddc <__assert_fail@plt+0xb7e8>
   1da70:	ldrb	sl, [r4, #6]
   1da74:	ldrb	fp, [r4, #7]
   1da78:	cmp	fp, #66	; 0x42
   1da7c:	cmpne	sl, #66	; 0x42
   1da80:	moveq	r4, #1
   1da84:	movne	r4, #0
   1da88:	beq	1dcd8 <__assert_fail@plt+0xb6e4>
   1da8c:	cmp	sl, #116	; 0x74
   1da90:	beq	1dc2c <__assert_fail@plt+0xb638>
   1da94:	mov	r1, sl
   1da98:	add	r0, sp, #8
   1da9c:	bl	1230c <strchr@plt>
   1daa0:	cmp	r0, #0
   1daa4:	beq	1dc2c <__assert_fail@plt+0xb638>
   1daa8:	mov	r1, fp
   1daac:	add	r0, sp, #8
   1dab0:	bl	1230c <strchr@plt>
   1dab4:	cmp	r0, #0
   1dab8:	beq	1dc2c <__assert_fail@plt+0xb638>
   1dabc:	add	r9, r6, r9
   1dac0:	add	r7, r7, #1
   1dac4:	ldr	r4, [r9, #4]
   1dac8:	cmp	r4, #0
   1dacc:	beq	1dd94 <__assert_fail@plt+0xb7a0>
   1dad0:	mov	r1, r4
   1dad4:	mov	r0, r8
   1dad8:	str	r7, [r5]
   1dadc:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1dae0:	cmp	sl, #97	; 0x61
   1dae4:	mov	r4, r0
   1dae8:	beq	1dd5c <__assert_fail@plt+0xb768>
   1daec:	bls	1dc98 <__assert_fail@plt+0xb6a4>
   1daf0:	cmp	sl, #99	; 0x63
   1daf4:	beq	1dd50 <__assert_fail@plt+0xb75c>
   1daf8:	cmp	sl, #109	; 0x6d
   1dafc:	moveq	r2, #3
   1db00:	streq	r2, [r0, #40]	; 0x28
   1db04:	bne	1dca8 <__assert_fail@plt+0xb6b4>
   1db08:	cmp	fp, #116	; 0x74
   1db0c:	beq	1dd1c <__assert_fail@plt+0xb728>
   1db10:	add	r0, sp, #16
   1db14:	movw	r7, #40556	; 0x9e6c
   1db18:	movt	r7, #5
   1db1c:	bl	18248 <__assert_fail@plt+0x5c54>
   1db20:	ldr	r0, [r5]
   1db24:	add	r1, sp, #16
   1db28:	ldr	r2, [r7, #52]	; 0x34
   1db2c:	ldr	r0, [r6, r0, lsl #2]
   1db30:	blx	r2
   1db34:	subs	r8, r0, #0
   1db38:	bne	1de74 <__assert_fail@plt+0xb880>
   1db3c:	cmp	fp, #97	; 0x61
   1db40:	beq	1dd70 <__assert_fail@plt+0xb77c>
   1db44:	bls	1dc4c <__assert_fail@plt+0xb658>
   1db48:	cmp	fp, #99	; 0x63
   1db4c:	beq	1dd08 <__assert_fail@plt+0xb714>
   1db50:	cmp	fp, #109	; 0x6d
   1db54:	bne	1ddf8 <__assert_fail@plt+0xb804>
   1db58:	ldr	r3, [sp, #96]	; 0x60
   1db5c:	ldr	r2, [sp, #100]	; 0x64
   1db60:	str	r3, [r4, #48]	; 0x30
   1db64:	str	r2, [r4, #52]	; 0x34
   1db68:	ldr	r1, [r7, #28]
   1db6c:	mov	r0, #0
   1db70:	movw	r2, #17671	; 0x4507
   1db74:	movt	r2, #49710	; 0xc22e
   1db78:	str	r0, [r4, #44]	; 0x2c
   1db7c:	vldr	s14, [pc, #800]	; 1dea4 <__assert_fail@plt+0xb8b0>
   1db80:	sub	r1, r1, r3
   1db84:	asr	r3, r1, #31
   1db88:	smull	r0, r2, r2, r1
   1db8c:	add	r2, r2, r1
   1db90:	rsb	r3, r3, r2, asr #16
   1db94:	vmov	s15, r3
   1db98:	vcvt.f32.s32	s15, s15
   1db9c:	vcmpe.f32	s15, s14
   1dba0:	vmrs	APSR_nzcv, fpscr
   1dba4:	bmi	1dd48 <__assert_fail@plt+0xb754>
   1dba8:	vldr	s14, [pc, #760]	; 1dea8 <__assert_fail@plt+0xb8b4>
   1dbac:	vcmpe.f32	s15, s14
   1dbb0:	vmrs	APSR_nzcv, fpscr
   1dbb4:	bmi	1dd68 <__assert_fail@plt+0xb774>
   1dbb8:	vldr	s12, [pc, #748]	; 1deac <__assert_fail@plt+0xb8b8>
   1dbbc:	vldr	s14, [pc, #748]	; 1deb0 <__assert_fail@plt+0xb8bc>
   1dbc0:	vldr	s13, [pc, #748]	; 1deb4 <__assert_fail@plt+0xb8c0>
   1dbc4:	vcmpe.f32	s15, s12
   1dbc8:	vmrs	APSR_nzcv, fpscr
   1dbcc:	vmovle.f32	s15, s13
   1dbd0:	vmovgt.f32	s15, s14
   1dbd4:	ldr	r3, [r5]
   1dbd8:	vstr	s15, [r4, #28]
   1dbdc:	ldr	r2, [r4]
   1dbe0:	add	r3, r3, #1
   1dbe4:	cmp	r2, #0
   1dbe8:	str	r3, [r5]
   1dbec:	beq	1de58 <__assert_fail@plt+0xb864>
   1dbf0:	movw	r3, #17952	; 0x4620
   1dbf4:	movt	r3, #1
   1dbf8:	cmp	r2, r3
   1dbfc:	bne	1de88 <__assert_fail@plt+0xb894>
   1dc00:	ldrb	r4, [r4, #18]
   1dc04:	cmp	r4, #0
   1dc08:	bne	1dc2c <__assert_fail@plt+0xb638>
   1dc0c:	movw	r1, #22540	; 0x580c
   1dc10:	movt	r1, #4
   1dc14:	ldr	r3, [pc, #672]	; 1debc <__assert_fail@plt+0xb8c8>
   1dc18:	movw	r0, #24384	; 0x5f40
   1dc1c:	movt	r0, #4
   1dc20:	movw	r2, #1649	; 0x671
   1dc24:	bl	125f4 <__assert_fail@plt>
   1dc28:	mov	r4, #0
   1dc2c:	mov	r0, r4
   1dc30:	add	sp, sp, #124	; 0x7c
   1dc34:	ldrd	r4, [sp]
   1dc38:	ldrd	r6, [sp, #8]
   1dc3c:	ldrd	r8, [sp, #16]
   1dc40:	ldrd	sl, [sp, #24]
   1dc44:	add	sp, sp, #32
   1dc48:	pop	{pc}		; (ldr pc, [sp], #4)
   1dc4c:	cmp	fp, #66	; 0x42
   1dc50:	bne	1ddf8 <__assert_fail@plt+0xb804>
   1dc54:	mvn	r3, #0
   1dc58:	mov	r2, #5
   1dc5c:	movw	r1, #24284	; 0x5edc
   1dc60:	movt	r1, #4
   1dc64:	str	r3, [r4, #48]	; 0x30
   1dc68:	str	r3, [r4, #52]	; 0x34
   1dc6c:	bl	120b4 <dcgettext@plt>
   1dc70:	ldr	r3, [r5]
   1dc74:	mov	r4, r0
   1dc78:	mov	r0, r8
   1dc7c:	ldr	r1, [r6, r3, lsl #2]
   1dc80:	bl	192f4 <__assert_fail@plt+0x6d00>
   1dc84:	mov	r3, r0
   1dc88:	mov	r2, r4
   1dc8c:	mov	r1, r8
   1dc90:	mov	r0, #1
   1dc94:	bl	121ec <error@plt>
   1dc98:	cmp	sl, #66	; 0x42
   1dc9c:	moveq	r2, #1
   1dca0:	streq	r2, [r0, #40]	; 0x28
   1dca4:	beq	1db08 <__assert_fail@plt+0xb514>
   1dca8:	mov	r1, sl
   1dcac:	add	r0, sp, #8
   1dcb0:	bl	1230c <strchr@plt>
   1dcb4:	cmp	r0, #0
   1dcb8:	movw	r1, #22540	; 0x580c
   1dcbc:	movt	r1, #4
   1dcc0:	ldr	r3, [pc, #500]	; 1debc <__assert_fail@plt+0xb8c8>
   1dcc4:	beq	1dd84 <__assert_fail@plt+0xb790>
   1dcc8:	movw	r0, #28528	; 0x6f70
   1dccc:	movt	r0, #4
   1dcd0:	movw	r2, #1612	; 0x64c
   1dcd4:	bl	125f4 <__assert_fail@plt>
   1dcd8:	mov	r2, #5
   1dcdc:	movw	r1, #24096	; 0x5e20
   1dce0:	movt	r1, #4
   1dce4:	mov	r4, r3
   1dce8:	str	r3, [sp, #4]
   1dcec:	bl	120b4 <dcgettext@plt>
   1dcf0:	ldr	r3, [sp, #4]
   1dcf4:	mov	r2, r0
   1dcf8:	mov	r1, r3
   1dcfc:	mov	r0, r3
   1dd00:	bl	121ec <error@plt>
   1dd04:	b	1dc2c <__assert_fail@plt+0xb638>
   1dd08:	ldr	r3, [sp, #104]	; 0x68
   1dd0c:	ldr	r2, [sp, #108]	; 0x6c
   1dd10:	str	r3, [r4, #48]	; 0x30
   1dd14:	str	r2, [r4, #52]	; 0x34
   1dd18:	b	1db68 <__assert_fail@plt+0xb574>
   1dd1c:	ldr	r3, [r5]
   1dd20:	add	r0, r4, #48	; 0x30
   1dd24:	ldr	r2, [pc, #404]	; 1dec0 <__assert_fail@plt+0xb8cc>
   1dd28:	ldr	r1, [r6, r3, lsl #2]
   1dd2c:	bl	2a8b4 <__assert_fail@plt+0x182c0>
   1dd30:	subs	r7, r0, #0
   1dd34:	beq	1de14 <__assert_fail@plt+0xb820>
   1dd38:	movw	r7, #40556	; 0x9e6c
   1dd3c:	movt	r7, #5
   1dd40:	ldr	r3, [r4, #48]	; 0x30
   1dd44:	b	1db68 <__assert_fail@plt+0xb574>
   1dd48:	vldr	s15, [pc, #360]	; 1deb8 <__assert_fail@plt+0xb8c4>
   1dd4c:	b	1dbd4 <__assert_fail@plt+0xb5e0>
   1dd50:	mov	r2, #2
   1dd54:	str	r2, [r0, #40]	; 0x28
   1dd58:	b	1db08 <__assert_fail@plt+0xb514>
   1dd5c:	mov	r2, #0
   1dd60:	str	r2, [r0, #40]	; 0x28
   1dd64:	b	1db08 <__assert_fail@plt+0xb514>
   1dd68:	vldr	s15, [pc, #320]	; 1deb0 <__assert_fail@plt+0xb8bc>
   1dd6c:	b	1dbd4 <__assert_fail@plt+0xb5e0>
   1dd70:	ldr	r3, [sp, #88]	; 0x58
   1dd74:	ldr	r2, [sp, #92]	; 0x5c
   1dd78:	str	r3, [r4, #48]	; 0x30
   1dd7c:	str	r2, [r4, #52]	; 0x34
   1dd80:	b	1db68 <__assert_fail@plt+0xb574>
   1dd84:	movw	r0, #24200	; 0x5e88
   1dd88:	movt	r0, #4
   1dd8c:	movw	r2, #1611	; 0x64b
   1dd90:	bl	125f4 <__assert_fail@plt>
   1dd94:	mov	r2, #5
   1dd98:	movw	r1, #24168	; 0x5e68
   1dd9c:	movt	r1, #4
   1dda0:	mov	r0, r4
   1dda4:	bl	120b4 <dcgettext@plt>
   1dda8:	ldr	r2, [r5]
   1ddac:	movw	r3, #40556	; 0x9e6c
   1ddb0:	movt	r3, #5
   1ddb4:	mov	r7, r0
   1ddb8:	mov	r0, r4
   1ddbc:	ldr	r1, [r3, #72]	; 0x48
   1ddc0:	ldr	r2, [r6, r2, lsl #2]
   1ddc4:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   1ddc8:	mov	r3, r0
   1ddcc:	mov	r2, r7
   1ddd0:	mov	r1, r4
   1ddd4:	mov	r0, #1
   1ddd8:	bl	121ec <error@plt>
   1dddc:	movw	r1, #22540	; 0x580c
   1dde0:	movt	r1, #4
   1dde4:	ldr	r3, [pc, #208]	; 1debc <__assert_fail@plt+0xb8c8>
   1dde8:	movw	r0, #24052	; 0x5df4
   1ddec:	movt	r0, #4
   1ddf0:	movw	r2, #1555	; 0x613
   1ddf4:	bl	125f4 <__assert_fail@plt>
   1ddf8:	movw	r1, #22540	; 0x580c
   1ddfc:	movt	r1, #4
   1de00:	ldr	r3, [pc, #188]	; 1dec4 <__assert_fail@plt+0xb8d0>
   1de04:	movw	r0, #28528	; 0x6f70
   1de08:	movt	r0, #4
   1de0c:	movw	r2, #498	; 0x1f2
   1de10:	bl	125f4 <__assert_fail@plt>
   1de14:	mov	r2, #5
   1de18:	movw	r1, #24224	; 0x5ea0
   1de1c:	movt	r1, #4
   1de20:	bl	120b4 <dcgettext@plt>
   1de24:	ldr	r2, [r5]
   1de28:	movw	r3, #40556	; 0x9e6c
   1de2c:	movt	r3, #5
   1de30:	mov	r4, r0
   1de34:	mov	r0, r7
   1de38:	ldr	r1, [r3, #72]	; 0x48
   1de3c:	ldr	r2, [r6, r2, lsl #2]
   1de40:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   1de44:	mov	r3, r0
   1de48:	mov	r2, r4
   1de4c:	mov	r1, r7
   1de50:	mov	r0, #1
   1de54:	bl	121ec <error@plt>
   1de58:	movw	r1, #22540	; 0x580c
   1de5c:	movt	r1, #4
   1de60:	ldr	r3, [pc, #84]	; 1debc <__assert_fail@plt+0xb8c8>
   1de64:	movw	r0, #24320	; 0x5f00
   1de68:	movt	r0, #4
   1de6c:	movw	r2, #1647	; 0x66f
   1de70:	bl	125f4 <__assert_fail@plt>
   1de74:	bl	12348 <__errno_location@plt>
   1de78:	ldr	r3, [r5]
   1de7c:	ldr	r0, [r0]
   1de80:	ldr	r1, [r6, r3, lsl #2]
   1de84:	bl	1931c <__assert_fail@plt+0x6d28>
   1de88:	movw	r1, #22540	; 0x580c
   1de8c:	movt	r1, #4
   1de90:	ldr	r3, [pc, #36]	; 1debc <__assert_fail@plt+0xb8c8>
   1de94:	movw	r0, #24348	; 0x5f1c
   1de98:	movt	r0, #4
   1de9c:	mov	r2, #1648	; 0x670
   1dea0:	bl	125f4 <__assert_fail@plt>
   1dea4:	stclcc	12, cr12, [ip, #820]	; 0x334
   1dea8:	svccc	0x00800000
   1deac:	sbcmi	r0, r8, #0
   1deb0:			; <UNDEFINED> instruction: 0x3e99999a
   1deb4:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1deb8:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1debc:	andeq	r5, r4, r4
   1dec0:	andeq	r9, r5, r0, lsl #29
   1dec4:	andeq	r5, r4, r4, lsl r0
   1dec8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1decc:	mov	r5, r3
   1ded0:	mov	r4, r1
   1ded4:	strd	r6, [sp, #8]
   1ded8:	mov	r6, r0
   1dedc:	mov	r7, r2
   1dee0:	str	r8, [sp, #16]
   1dee4:	str	lr, [sp, #20]
   1dee8:	bl	12348 <__errno_location@plt>
   1deec:	ldr	r3, [r0]
   1def0:	cmp	r3, #2
   1def4:	beq	1df18 <__assert_fail@plt+0xb924>
   1def8:	cmp	r3, #20
   1defc:	beq	1df18 <__assert_fail@plt+0xb924>
   1df00:	mov	r0, r5
   1df04:	ldrd	r4, [sp]
   1df08:	ldrd	r6, [sp, #8]
   1df0c:	ldr	r8, [sp, #16]
   1df10:	add	sp, sp, #20
   1df14:	pop	{pc}		; (ldr pc, [sp], #4)
   1df18:	movw	r3, #40556	; 0x9e6c
   1df1c:	movt	r3, #5
   1df20:	ldr	r3, [r3, #44]	; 0x2c
   1df24:	tst	r3, #2
   1df28:	bne	1df50 <__assert_fail@plt+0xb95c>
   1df2c:	mov	r2, r7
   1df30:	mov	r1, r4
   1df34:	ldrd	r4, [sp]
   1df38:	mov	r0, r6
   1df3c:	ldrd	r6, [sp, #8]
   1df40:	ldr	r8, [sp, #16]
   1df44:	ldr	lr, [sp, #20]
   1df48:	add	sp, sp, #24
   1df4c:	b	2cec0 <__assert_fail@plt+0x1a8cc>
   1df50:	movw	r3, #38216	; 0x9548
   1df54:	movt	r3, #5
   1df58:	movw	r1, #24412	; 0x5f5c
   1df5c:	movt	r1, #4
   1df60:	ldr	r0, [r3]
   1df64:	mov	r2, r4
   1df68:	bl	1233c <fprintf@plt>
   1df6c:	b	1df2c <__assert_fail@plt+0xb938>
   1df70:	strd	r4, [sp, #-16]!
   1df74:	mov	r4, r0
   1df78:	mov	r5, r1
   1df7c:	str	r6, [sp, #8]
   1df80:	mov	r6, r2
   1df84:	str	lr, [sp, #12]
   1df88:	bl	2ccec <__assert_fail@plt+0x1a6f8>
   1df8c:	subs	r3, r0, #0
   1df90:	bne	1dfa4 <__assert_fail@plt+0xb9b0>
   1df94:	ldrd	r4, [sp]
   1df98:	ldr	r6, [sp, #8]
   1df9c:	add	sp, sp, #12
   1dfa0:	pop	{pc}		; (ldr pc, [sp], #4)
   1dfa4:	mov	r2, r6
   1dfa8:	mov	r1, r5
   1dfac:	ldr	r6, [sp, #8]
   1dfb0:	mov	r0, r4
   1dfb4:	ldrd	r4, [sp]
   1dfb8:	ldr	lr, [sp, #12]
   1dfbc:	add	sp, sp, #16
   1dfc0:	b	1dec8 <__assert_fail@plt+0xb8d4>
   1dfc4:	movw	r3, #40512	; 0x9e40
   1dfc8:	movt	r3, #5
   1dfcc:	strd	r4, [sp, #-16]!
   1dfd0:	ldr	r4, [r3]
   1dfd4:	str	r6, [sp, #8]
   1dfd8:	str	lr, [sp, #12]
   1dfdc:	cmp	r4, #0
   1dfe0:	bne	1e02c <__assert_fail@plt+0xba38>
   1dfe4:	mov	r5, r1
   1dfe8:	mov	r6, r2
   1dfec:	mov	r4, r0
   1dff0:	bl	2ccec <__assert_fail@plt+0x1a6f8>
   1dff4:	subs	r3, r0, #0
   1dff8:	bne	1e00c <__assert_fail@plt+0xba18>
   1dffc:	ldrd	r4, [sp]
   1e000:	ldr	r6, [sp, #8]
   1e004:	add	sp, sp, #12
   1e008:	pop	{pc}		; (ldr pc, [sp], #4)
   1e00c:	mov	r2, r6
   1e010:	mov	r1, r5
   1e014:	ldr	r6, [sp, #8]
   1e018:	mov	r0, r4
   1e01c:	ldrd	r4, [sp]
   1e020:	ldr	lr, [sp, #12]
   1e024:	add	sp, sp, #16
   1e028:	b	1dec8 <__assert_fail@plt+0xb8d4>
   1e02c:	ldrd	r4, [sp]
   1e030:	ldr	r6, [sp, #8]
   1e034:	ldr	lr, [sp, #12]
   1e038:	add	sp, sp, #16
   1e03c:	b	2cec0 <__assert_fail@plt+0x1a8cc>
   1e040:	movw	ip, #40144	; 0x9cd0
   1e044:	movt	ip, #5
   1e048:	str	r4, [sp, #-8]!
   1e04c:	ldr	r0, [ip]
   1e050:	str	lr, [sp, #4]
   1e054:	cmp	r0, #0
   1e058:	beq	1e084 <__assert_fail@plt+0xba90>
   1e05c:	bl	18014 <__assert_fail@plt+0x5a20>
   1e060:	mov	r3, r0
   1e064:	mov	r2, #1065353216	; 0x3f800000
   1e068:	ldr	r4, [sp]
   1e06c:	mov	r1, #0
   1e070:	add	sp, sp, #4
   1e074:	mov	r0, #1
   1e078:	strh	r1, [r3, #18]
   1e07c:	str	r2, [r3, #28]
   1e080:	pop	{pc}		; (ldr pc, [sp], #4)
   1e084:	ldr	lr, [pc, #56]	; 1e0c4 <__assert_fail@plt+0xbad0>
   1e088:	movw	r0, #24492	; 0x5fac
   1e08c:	movt	r0, #4
   1e090:	mov	r2, #0
   1e094:	mov	r3, lr
   1e098:	b	1e0a0 <__assert_fail@plt+0xbaac>
   1e09c:	ldr	r0, [r3, #20]
   1e0a0:	cmp	r0, #0
   1e0a4:	add	r2, r2, #1
   1e0a8:	beq	1e05c <__assert_fail@plt+0xba68>
   1e0ac:	ldr	r1, [r3, #16]!
   1e0b0:	cmp	r1, #1
   1e0b4:	bne	1e09c <__assert_fail@plt+0xbaa8>
   1e0b8:	add	r0, lr, r2, lsl #4
   1e0bc:	str	r0, [ip]
   1e0c0:	b	1e05c <__assert_fail@plt+0xba68>
   1e0c4:	andeq	r5, r4, r4, lsr #32
   1e0c8:	movw	r3, #40556	; 0x9e6c
   1e0cc:	movt	r3, #5
   1e0d0:	mov	r2, #1
   1e0d4:	strb	r2, [r3, #16]
   1e0d8:	b	1e040 <__assert_fail@plt+0xba4c>
   1e0dc:	movw	r3, #40556	; 0x9e6c
   1e0e0:	movt	r3, #5
   1e0e4:	mov	r2, #0
   1e0e8:	strb	r2, [r3, #16]
   1e0ec:	b	1e040 <__assert_fail@plt+0xba4c>
   1e0f0:	movw	r3, #40556	; 0x9e6c
   1e0f4:	movt	r3, #5
   1e0f8:	mov	r2, #0
   1e0fc:	strb	r2, [r3, #14]
   1e100:	b	1e040 <__assert_fail@plt+0xba4c>
   1e104:	movw	r3, #40556	; 0x9e6c
   1e108:	movt	r3, #5
   1e10c:	mov	r2, #1
   1e110:	strb	r2, [r3, #12]
   1e114:	b	1e040 <__assert_fail@plt+0xba4c>
   1e118:	movw	r3, #40556	; 0x9e6c
   1e11c:	movt	r3, #5
   1e120:	mov	r2, #1
   1e124:	strb	r2, [r3, #13]
   1e128:	b	1e040 <__assert_fail@plt+0xba4c>
   1e12c:	movw	r3, #40556	; 0x9e6c
   1e130:	movt	r3, #5
   1e134:	mov	r2, #1
   1e138:	strb	r2, [r3, #14]
   1e13c:	b	1e040 <__assert_fail@plt+0xba4c>
   1e140:	movw	r3, #40556	; 0x9e6c
   1e144:	movt	r3, #5
   1e148:	mov	r2, #256	; 0x100
   1e14c:	strh	r2, [r3]
   1e150:	b	1e040 <__assert_fail@plt+0xba4c>
   1e154:	strd	r4, [sp, #-16]!
   1e158:	movw	r4, #40556	; 0x9e6c
   1e15c:	movt	r4, #5
   1e160:	ldrb	r5, [r4, #17]
   1e164:	str	r6, [sp, #8]
   1e168:	str	lr, [sp, #12]
   1e16c:	cmp	r5, #0
   1e170:	bne	1e180 <__assert_fail@plt+0xbb8c>
   1e174:	ldrb	r3, [r4, #16]
   1e178:	cmp	r3, #0
   1e17c:	bne	1e19c <__assert_fail@plt+0xbba8>
   1e180:	mov	r3, #256	; 0x100
   1e184:	ldr	r6, [sp, #8]
   1e188:	strh	r3, [r4]
   1e18c:	ldrd	r4, [sp]
   1e190:	ldr	lr, [sp, #12]
   1e194:	add	sp, sp, #16
   1e198:	b	1e040 <__assert_fail@plt+0xba4c>
   1e19c:	mov	r2, #5
   1e1a0:	mov	r0, r5
   1e1a4:	movw	r1, #24496	; 0x5fb0
   1e1a8:	movt	r1, #4
   1e1ac:	bl	120b4 <dcgettext@plt>
   1e1b0:	mov	r2, r0
   1e1b4:	mov	r1, r5
   1e1b8:	mov	r0, r5
   1e1bc:	bl	121ec <error@plt>
   1e1c0:	b	1e180 <__assert_fail@plt+0xbb8c>
   1e1c4:	cmp	r1, #0
   1e1c8:	beq	1e20c <__assert_fail@plt+0xbc18>
   1e1cc:	ldr	r3, [r2]
   1e1d0:	ldr	r0, [r1, r3, lsl #2]
   1e1d4:	cmp	r0, #0
   1e1d8:	beq	1e20c <__assert_fail@plt+0xbc18>
   1e1dc:	add	r3, r3, #1
   1e1e0:	str	r4, [sp, #-8]!
   1e1e4:	str	lr, [sp, #4]
   1e1e8:	str	r3, [r2]
   1e1ec:	bl	21a24 <__assert_fail@plt+0xf430>
   1e1f0:	movw	r3, #40556	; 0x9e6c
   1e1f4:	movt	r3, #5
   1e1f8:	ldr	r4, [sp]
   1e1fc:	ldr	lr, [sp, #4]
   1e200:	add	sp, sp, #8
   1e204:	str	r0, [r3, #60]	; 0x3c
   1e208:	b	1e040 <__assert_fail@plt+0xba4c>
   1e20c:	mov	r0, #0
   1e210:	bx	lr
   1e214:	movw	r3, #40556	; 0x9e6c
   1e218:	movt	r3, #5
   1e21c:	ldr	ip, [r3, #44]	; 0x2c
   1e220:	mov	r0, #1
   1e224:	movw	r1, #34648	; 0x8758
   1e228:	movt	r1, #1
   1e22c:	movw	r2, #57200	; 0xdf70
   1e230:	movt	r2, #1
   1e234:	strb	r0, [r3, #12]
   1e238:	strd	r0, [r3, #48]	; 0x30
   1e23c:	str	r2, [r3, #64]	; 0x40
   1e240:	tst	ip, #2
   1e244:	beq	1e254 <__assert_fail@plt+0xbc60>
   1e248:	movw	r2, #34944	; 0x8880
   1e24c:	movt	r2, #1
   1e250:	str	r2, [r3, #52]	; 0x34
   1e254:	b	1e040 <__assert_fail@plt+0xba4c>
   1e258:	str	r4, [sp, #-8]!
   1e25c:	movw	r4, #40144	; 0x9cd0
   1e260:	movt	r4, #5
   1e264:	ldrb	r2, [r4, #4]
   1e268:	str	lr, [sp, #4]
   1e26c:	cmp	r2, #0
   1e270:	beq	1e284 <__assert_fail@plt+0xbc90>
   1e274:	ldr	r4, [sp]
   1e278:	add	sp, sp, #4
   1e27c:	mov	r0, #1
   1e280:	pop	{pc}		; (ldr pc, [sp], #4)
   1e284:	movw	r1, #24612	; 0x6024
   1e288:	movt	r1, #4
   1e28c:	mov	r0, r1
   1e290:	bl	12210 <fnmatch@plt>
   1e294:	subs	r2, r0, #0
   1e298:	bne	1e2f0 <__assert_fail@plt+0xbcfc>
   1e29c:	movw	r1, #24612	; 0x6024
   1e2a0:	movt	r1, #4
   1e2a4:	movw	r0, #24672	; 0x6060
   1e2a8:	movt	r0, #4
   1e2ac:	bl	12210 <fnmatch@plt>
   1e2b0:	cmp	r0, #0
   1e2b4:	beq	1e2f0 <__assert_fail@plt+0xbcfc>
   1e2b8:	movw	r1, #24612	; 0x6024
   1e2bc:	movt	r1, #4
   1e2c0:	movw	r0, #24672	; 0x6060
   1e2c4:	movt	r0, #4
   1e2c8:	mov	r2, #16
   1e2cc:	bl	12210 <fnmatch@plt>
   1e2d0:	cmp	r0, #0
   1e2d4:	bne	1e2f0 <__assert_fail@plt+0xbcfc>
   1e2d8:	mov	r3, #1
   1e2dc:	mov	r0, #1
   1e2e0:	strb	r3, [r4, #4]
   1e2e4:	ldr	r4, [sp]
   1e2e8:	add	sp, sp, #4
   1e2ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1e2f0:	mov	r2, #5
   1e2f4:	movw	r1, #24616	; 0x6028
   1e2f8:	movt	r1, #4
   1e2fc:	mov	r0, #0
   1e300:	bl	120b4 <dcgettext@plt>
   1e304:	mov	r2, r0
   1e308:	mov	r1, #0
   1e30c:	mov	r0, #1
   1e310:	bl	121ec <error@plt>
   1e314:	strd	r4, [sp, #-20]!	; 0xffffffec
   1e318:	mov	r4, r1
   1e31c:	mov	r5, r2
   1e320:	strd	r6, [sp, #8]
   1e324:	mov	r7, r0
   1e328:	mov	r6, r3
   1e32c:	str	lr, [sp, #16]
   1e330:	sub	sp, sp, #12
   1e334:	bl	1e258 <__assert_fail@plt+0xbc64>
   1e338:	cmp	r4, #0
   1e33c:	beq	1e3c8 <__assert_fail@plt+0xbdd4>
   1e340:	ldr	r3, [r5]
   1e344:	ldr	r4, [r4, r3, lsl #2]
   1e348:	cmp	r4, #0
   1e34c:	beq	1e3c8 <__assert_fail@plt+0xbdd4>
   1e350:	add	r3, r3, #1
   1e354:	mov	r2, r4
   1e358:	ldr	r1, [sp, #32]
   1e35c:	mov	r0, r7
   1e360:	str	r3, [r5]
   1e364:	bl	17f60 <__assert_fail@plt+0x596c>
   1e368:	mov	r5, r0
   1e36c:	mov	r3, #0
   1e370:	movw	r1, #22536	; 0x5808
   1e374:	movt	r1, #4
   1e378:	mov	r0, r4
   1e37c:	strh	r3, [r5, #18]
   1e380:	str	r4, [r5, #40]	; 0x28
   1e384:	bl	12528 <strpbrk@plt>
   1e388:	vldr	s15, [pc, #196]	; 1e454 <__assert_fail@plt+0xbe60>
   1e38c:	movw	r3, #40556	; 0x9e6c
   1e390:	movt	r3, #5
   1e394:	cmp	r0, #0
   1e398:	vldr	s14, [pc, #184]	; 1e458 <__assert_fail@plt+0xbe64>
   1e39c:	ldrb	r3, [r3, #17]
   1e3a0:	vmoveq.f32	s15, s14
   1e3a4:	cmp	r3, #0
   1e3a8:	vstr	s15, [r5, #28]
   1e3ac:	beq	1e3d0 <__assert_fail@plt+0xbddc>
   1e3b0:	mov	r0, #1
   1e3b4:	add	sp, sp, #12
   1e3b8:	ldrd	r4, [sp]
   1e3bc:	ldrd	r6, [sp, #8]
   1e3c0:	add	sp, sp, #16
   1e3c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e3c8:	mov	r0, r4
   1e3cc:	b	1e3b4 <__assert_fail@plt+0xbdc0>
   1e3d0:	mov	r1, #47	; 0x2f
   1e3d4:	mov	r0, r4
   1e3d8:	bl	12468 <strrchr@plt>
   1e3dc:	cmp	r0, #0
   1e3e0:	beq	1e3b0 <__assert_fail@plt+0xbdbc>
   1e3e4:	ldrb	r3, [r0, #1]
   1e3e8:	cmp	r3, #0
   1e3ec:	bne	1e3b0 <__assert_fail@plt+0xbdbc>
   1e3f0:	ldr	r3, [sp, #32]
   1e3f4:	movw	r1, #17436	; 0x441c
   1e3f8:	movt	r1, #1
   1e3fc:	mov	r0, r4
   1e400:	sub	r1, r3, r1
   1e404:	clz	r1, r1
   1e408:	lsr	r1, r1, #5
   1e40c:	bl	16244 <__assert_fail@plt+0x3c50>
   1e410:	subs	r7, r0, #0
   1e414:	bne	1e3b0 <__assert_fail@plt+0xbdbc>
   1e418:	mov	r2, #5
   1e41c:	movw	r1, #24676	; 0x6064
   1e420:	movt	r1, #4
   1e424:	bl	120b4 <dcgettext@plt>
   1e428:	mov	r2, r0
   1e42c:	mov	r3, r6
   1e430:	str	r4, [sp]
   1e434:	mov	r0, r7
   1e438:	mov	r1, r7
   1e43c:	bl	121ec <error@plt>
   1e440:	movw	r3, #52343	; 0xcc77
   1e444:	movt	r3, #12843	; 0x322b
   1e448:	mov	r0, #1
   1e44c:	str	r3, [r5, #28]
   1e450:	b	1e3b4 <__assert_fail@plt+0xbdc0>
   1e454:	svccc	0x004ccccd
   1e458:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e45c:	movw	ip, #18552	; 0x4878
   1e460:	movt	ip, #1
   1e464:	push	{lr}		; (str lr, [sp, #-4]!)
   1e468:	sub	sp, sp, #12
   1e46c:	movw	r3, #24740	; 0x60a4
   1e470:	movt	r3, #4
   1e474:	str	ip, [sp]
   1e478:	bl	1e314 <__assert_fail@plt+0xbd20>
   1e47c:	add	sp, sp, #12
   1e480:	pop	{pc}		; (ldr pc, [sp], #4)
   1e484:	movw	ip, #18552	; 0x4878
   1e488:	movt	ip, #1
   1e48c:	push	{lr}		; (str lr, [sp, #-4]!)
   1e490:	sub	sp, sp, #12
   1e494:	movw	r3, #24752	; 0x60b0
   1e498:	movt	r3, #4
   1e49c:	str	ip, [sp]
   1e4a0:	bl	1e314 <__assert_fail@plt+0xbd20>
   1e4a4:	add	sp, sp, #12
   1e4a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e4ac:	movw	ip, #17436	; 0x441c
   1e4b0:	movt	ip, #1
   1e4b4:	push	{lr}		; (str lr, [sp, #-4]!)
   1e4b8:	sub	sp, sp, #12
   1e4bc:	movw	r3, #24760	; 0x60b8
   1e4c0:	movt	r3, #4
   1e4c4:	str	ip, [sp]
   1e4c8:	bl	1e314 <__assert_fail@plt+0xbd20>
   1e4cc:	add	sp, sp, #12
   1e4d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1e4d4:	movw	ip, #17436	; 0x441c
   1e4d8:	movt	ip, #1
   1e4dc:	push	{lr}		; (str lr, [sp, #-4]!)
   1e4e0:	sub	sp, sp, #12
   1e4e4:	movw	r3, #24772	; 0x60c4
   1e4e8:	movt	r3, #4
   1e4ec:	str	ip, [sp]
   1e4f0:	bl	1e314 <__assert_fail@plt+0xbd20>
   1e4f4:	add	sp, sp, #12
   1e4f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e4fc:	strd	r4, [sp, #-16]!
   1e500:	mov	r4, r1
   1e504:	mov	r5, r2
   1e508:	str	r6, [sp, #8]
   1e50c:	mov	r6, r0
   1e510:	str	lr, [sp, #12]
   1e514:	bl	1e258 <__assert_fail@plt+0xbc64>
   1e518:	cmp	r4, #0
   1e51c:	beq	1e584 <__assert_fail@plt+0xbf90>
   1e520:	ldr	r3, [r5]
   1e524:	ldr	r4, [r4, r3, lsl #2]
   1e528:	cmp	r4, #0
   1e52c:	beq	1e584 <__assert_fail@plt+0xbf90>
   1e530:	add	r3, r3, #1
   1e534:	mov	r1, r4
   1e538:	mov	r0, r6
   1e53c:	str	r3, [r5]
   1e540:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1e544:	mov	r5, r0
   1e548:	movw	r1, #22536	; 0x5808
   1e54c:	movt	r1, #4
   1e550:	mov	r0, r4
   1e554:	str	r4, [r5, #40]	; 0x28
   1e558:	bl	12528 <strpbrk@plt>
   1e55c:	vldr	s15, [pc, #52]	; 1e598 <__assert_fail@plt+0xbfa4>
   1e560:	cmp	r0, #0
   1e564:	mov	r0, #1
   1e568:	vldr	s14, [pc, #44]	; 1e59c <__assert_fail@plt+0xbfa8>
   1e56c:	ldr	r6, [sp, #8]
   1e570:	vmoveq.f32	s15, s14
   1e574:	vstr	s15, [r5, #28]
   1e578:	ldrd	r4, [sp]
   1e57c:	add	sp, sp, #12
   1e580:	pop	{pc}		; (ldr pc, [sp], #4)
   1e584:	mov	r0, r4
   1e588:	ldrd	r4, [sp]
   1e58c:	ldr	r6, [sp, #8]
   1e590:	add	sp, sp, #12
   1e594:	pop	{pc}		; (ldr pc, [sp], #4)
   1e598:	stccc	7, cr13, [r3, #44]!	; 0x2c
   1e59c:	stccc	7, cr13, [r3], #-44	; 0xffffffd4
   1e5a0:	cmp	r0, #0
   1e5a4:	ldr	r3, [r1]
   1e5a8:	beq	1e660 <__assert_fail@plt+0xc06c>
   1e5ac:	strd	r4, [sp, #-20]!	; 0xffffffec
   1e5b0:	ldr	r5, [r0, r3, lsl #2]
   1e5b4:	strd	r6, [sp, #8]
   1e5b8:	str	lr, [sp, #16]
   1e5bc:	sub	sp, sp, #12
   1e5c0:	lsl	lr, r3, #2
   1e5c4:	cmp	r5, #0
   1e5c8:	beq	1e648 <__assert_fail@plt+0xc054>
   1e5cc:	mov	ip, r1
   1e5d0:	add	r3, r3, #1
   1e5d4:	add	r0, r0, lr
   1e5d8:	movw	r1, #22444	; 0x57ac
   1e5dc:	movt	r1, #4
   1e5e0:	ldr	r7, [r0, #-4]
   1e5e4:	mov	r0, r5
   1e5e8:	str	r3, [ip]
   1e5ec:	mov	r4, r2
   1e5f0:	bl	125e8 <strspn@plt>
   1e5f4:	cmp	r0, #0
   1e5f8:	movwle	r6, #40556	; 0x9e6c
   1e5fc:	movtle	r6, #5
   1e600:	ble	1e668 <__assert_fail@plt+0xc074>
   1e604:	ldrb	r3, [r5, r0]
   1e608:	movw	r6, #40556	; 0x9e6c
   1e60c:	movt	r6, #5
   1e610:	cmp	r3, #0
   1e614:	bne	1e668 <__assert_fail@plt+0xc074>
   1e618:	mov	r0, r5
   1e61c:	ldr	r1, [r6, #72]	; 0x48
   1e620:	bl	21c70 <__assert_fail@plt+0xf67c>
   1e624:	cmp	r0, #0
   1e628:	str	r0, [r4]
   1e62c:	blt	1e668 <__assert_fail@plt+0xc074>
   1e630:	add	sp, sp, #12
   1e634:	ldrd	r4, [sp]
   1e638:	ldrd	r6, [sp, #8]
   1e63c:	ldr	lr, [sp, #16]
   1e640:	add	sp, sp, #20
   1e644:	b	1e040 <__assert_fail@plt+0xba4c>
   1e648:	mov	r0, #0
   1e64c:	add	sp, sp, #12
   1e650:	ldrd	r4, [sp]
   1e654:	ldrd	r6, [sp, #8]
   1e658:	add	sp, sp, #16
   1e65c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e660:	mov	r0, #0
   1e664:	bx	lr
   1e668:	mov	r2, #5
   1e66c:	movw	r1, #24780	; 0x60cc
   1e670:	movt	r1, #4
   1e674:	mov	r0, #0
   1e678:	bl	120b4 <dcgettext@plt>
   1e67c:	mov	r4, r0
   1e680:	mov	r2, r5
   1e684:	ldr	r1, [r6, #72]	; 0x48
   1e688:	mov	r0, #0
   1e68c:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   1e690:	mov	r2, r4
   1e694:	mov	r3, r7
   1e698:	str	r0, [sp]
   1e69c:	mov	r1, #0
   1e6a0:	mov	r0, #1
   1e6a4:	bl	121ec <error@plt>
   1e6a8:	mov	r3, r2
   1e6ac:	mov	r0, r1
   1e6b0:	ldr	r2, [pc, #4]	; 1e6bc <__assert_fail@plt+0xc0c8>
   1e6b4:	mov	r1, r3
   1e6b8:	b	1e5a0 <__assert_fail@plt+0xbfac>
   1e6bc:	andeq	r9, r5, r4, ror lr
   1e6c0:	mov	r3, r2
   1e6c4:	mov	r0, r1
   1e6c8:	ldr	r2, [pc, #4]	; 1e6d4 <__assert_fail@plt+0xc0e0>
   1e6cc:	mov	r1, r3
   1e6d0:	b	1e5a0 <__assert_fail@plt+0xbfac>
   1e6d4:	andeq	r9, r5, r0, ror lr
   1e6d8:	strd	r4, [sp, #-16]!
   1e6dc:	subs	r4, r1, #0
   1e6e0:	str	r6, [sp, #8]
   1e6e4:	str	lr, [sp, #12]
   1e6e8:	beq	1e774 <__assert_fail@plt+0xc180>
   1e6ec:	ldr	r3, [r2]
   1e6f0:	ldr	r3, [r4, r3, lsl #2]
   1e6f4:	cmp	r3, #0
   1e6f8:	beq	1e760 <__assert_fail@plt+0xc16c>
   1e6fc:	mov	r6, r2
   1e700:	mov	r5, r0
   1e704:	bl	11f28 <is_selinux_enabled@plt>
   1e708:	cmp	r0, #0
   1e70c:	ble	1e788 <__assert_fail@plt+0xc194>
   1e710:	mov	r0, r5
   1e714:	mov	r1, #0
   1e718:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1e71c:	ldr	r2, [r6]
   1e720:	mov	r3, r0
   1e724:	mov	r1, #0
   1e728:	mov	r0, #1
   1e72c:	ldr	r2, [r4, r2, lsl #2]
   1e730:	strb	r1, [r3, #18]
   1e734:	movw	r1, #55050	; 0xd70a
   1e738:	movt	r1, #15395	; 0x3c23
   1e73c:	ldrd	r4, [sp]
   1e740:	str	r1, [r3, #28]
   1e744:	str	r2, [r3, #40]	; 0x28
   1e748:	ldr	r3, [r6]
   1e74c:	add	r3, r3, r0
   1e750:	str	r3, [r6]
   1e754:	ldr	r6, [sp, #8]
   1e758:	add	sp, sp, #12
   1e75c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e760:	ldrd	r4, [sp]
   1e764:	mov	r0, r3
   1e768:	ldr	r6, [sp, #8]
   1e76c:	add	sp, sp, #12
   1e770:	pop	{pc}		; (ldr pc, [sp], #4)
   1e774:	mov	r0, r4
   1e778:	ldrd	r4, [sp]
   1e77c:	ldr	r6, [sp, #8]
   1e780:	add	sp, sp, #12
   1e784:	pop	{pc}		; (ldr pc, [sp], #4)
   1e788:	mov	r2, #5
   1e78c:	movw	r1, #24844	; 0x610c
   1e790:	movt	r1, #4
   1e794:	mov	r0, #0
   1e798:	bl	120b4 <dcgettext@plt>
   1e79c:	mov	r2, r0
   1e7a0:	mov	r1, #0
   1e7a4:	mov	r0, #1
   1e7a8:	bl	121ec <error@plt>
   1e7ac:	movw	r3, #40556	; 0x9e6c
   1e7b0:	movt	r3, #5
   1e7b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1e7b8:	ldrb	r4, [r3, #17]
   1e7bc:	strd	r6, [sp, #8]
   1e7c0:	str	r8, [sp, #16]
   1e7c4:	str	lr, [sp, #20]
   1e7c8:	sub	sp, sp, #8
   1e7cc:	cmp	r4, #0
   1e7d0:	bne	1e860 <__assert_fail@plt+0xc26c>
   1e7d4:	ldrb	r3, [r3, #16]
   1e7d8:	cmp	r3, #0
   1e7dc:	beq	1e860 <__assert_fail@plt+0xc26c>
   1e7e0:	mov	r5, r1
   1e7e4:	mov	r6, r0
   1e7e8:	mov	r1, #47	; 0x2f
   1e7ec:	mov	r0, r2
   1e7f0:	bl	1230c <strchr@plt>
   1e7f4:	cmp	r0, #0
   1e7f8:	beq	1e860 <__assert_fail@plt+0xc26c>
   1e7fc:	mov	r2, #5
   1e800:	movw	r1, #24896	; 0x6140
   1e804:	movt	r1, #4
   1e808:	mov	r0, r4
   1e80c:	bl	120b4 <dcgettext@plt>
   1e810:	mov	r7, r0
   1e814:	mov	r1, r6
   1e818:	mov	r0, r4
   1e81c:	bl	192f4 <__assert_fail@plt+0x6d00>
   1e820:	mov	r8, r0
   1e824:	movw	r1, #34572	; 0x870c
   1e828:	movt	r1, #4
   1e82c:	mov	r0, #1
   1e830:	bl	192f4 <__assert_fail@plt+0x6d00>
   1e834:	mov	r6, r0
   1e838:	mov	r1, r5
   1e83c:	mov	r0, #2
   1e840:	bl	192f4 <__assert_fail@plt+0x6d00>
   1e844:	mov	r3, r8
   1e848:	mov	r2, r7
   1e84c:	str	r6, [sp]
   1e850:	mov	r1, r4
   1e854:	str	r0, [sp, #4]
   1e858:	mov	r0, r4
   1e85c:	bl	121ec <error@plt>
   1e860:	mov	r0, #1
   1e864:	add	sp, sp, #8
   1e868:	ldrd	r4, [sp]
   1e86c:	ldrd	r6, [sp, #8]
   1e870:	ldr	r8, [sp, #16]
   1e874:	add	sp, sp, #20
   1e878:	pop	{pc}		; (ldr pc, [sp], #4)
   1e87c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1e880:	subs	r4, r1, #0
   1e884:	strd	r6, [sp, #8]
   1e888:	str	r8, [sp, #16]
   1e88c:	str	lr, [sp, #20]
   1e890:	beq	1e8e0 <__assert_fail@plt+0xc2ec>
   1e894:	ldr	r7, [r2]
   1e898:	ldr	r6, [r4, r7, lsl #2]
   1e89c:	cmp	r6, #0
   1e8a0:	moveq	r4, r6
   1e8a4:	beq	1e8e0 <__assert_fail@plt+0xc2ec>
   1e8a8:	add	r3, r7, #1
   1e8ac:	mov	r5, r2
   1e8b0:	mov	r8, r0
   1e8b4:	str	r3, [r2]
   1e8b8:	bl	1e258 <__assert_fail@plt+0xbc64>
   1e8bc:	mov	r2, r6
   1e8c0:	movw	r1, #25076	; 0x61f4
   1e8c4:	movt	r1, #4
   1e8c8:	movw	r0, #25088	; 0x6200
   1e8cc:	movt	r0, #4
   1e8d0:	bl	1e7ac <__assert_fail@plt+0xc1b8>
   1e8d4:	subs	r4, r0, #0
   1e8d8:	streq	r7, [r5]
   1e8dc:	bne	1e8f8 <__assert_fail@plt+0xc304>
   1e8e0:	mov	r0, r4
   1e8e4:	ldrd	r4, [sp]
   1e8e8:	ldrd	r6, [sp, #8]
   1e8ec:	ldr	r8, [sp, #16]
   1e8f0:	add	sp, sp, #20
   1e8f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e8f8:	mov	r1, r6
   1e8fc:	mov	r0, r8
   1e900:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1e904:	mov	r5, r0
   1e908:	mov	r3, #0
   1e90c:	mov	r0, r6
   1e910:	movw	r1, #22536	; 0x5808
   1e914:	movt	r1, #4
   1e918:	strh	r3, [r5, #18]
   1e91c:	str	r6, [r5, #40]	; 0x28
   1e920:	bl	12528 <strpbrk@plt>
   1e924:	vldr	s15, [pc, #16]	; 1e93c <__assert_fail@plt+0xc348>
   1e928:	cmp	r0, #0
   1e92c:	vldr	s14, [pc, #12]	; 1e940 <__assert_fail@plt+0xc34c>
   1e930:	vmoveq.f32	s15, s14
   1e934:	vstr	s15, [r5, #28]
   1e938:	b	1e8e0 <__assert_fail@plt+0xc2ec>
   1e93c:	svccc	0x004ccccd
   1e940:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e944:	strd	r4, [sp, #-16]!
   1e948:	mov	r4, r1
   1e94c:	mov	r5, r2
   1e950:	str	r6, [sp, #8]
   1e954:	mov	r6, r0
   1e958:	str	lr, [sp, #12]
   1e95c:	bl	1e258 <__assert_fail@plt+0xbc64>
   1e960:	cmp	r4, #0
   1e964:	beq	1e9a0 <__assert_fail@plt+0xc3ac>
   1e968:	ldr	r3, [r5]
   1e96c:	ldr	r4, [r4, r3, lsl #2]
   1e970:	cmp	r4, #0
   1e974:	beq	1e9a0 <__assert_fail@plt+0xc3ac>
   1e978:	add	r3, r3, #1
   1e97c:	movw	r1, #25096	; 0x6208
   1e980:	movt	r1, #4
   1e984:	movw	r0, #25108	; 0x6214
   1e988:	movt	r0, #4
   1e98c:	mov	r2, r4
   1e990:	str	r3, [r5]
   1e994:	bl	1e7ac <__assert_fail@plt+0xc1b8>
   1e998:	subs	r5, r0, #0
   1e99c:	bne	1e9b8 <__assert_fail@plt+0xc3c4>
   1e9a0:	mov	r5, #0
   1e9a4:	mov	r0, r5
   1e9a8:	ldrd	r4, [sp]
   1e9ac:	ldr	r6, [sp, #8]
   1e9b0:	add	sp, sp, #12
   1e9b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e9b8:	mov	r0, r6
   1e9bc:	mov	r1, r4
   1e9c0:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1e9c4:	mov	r6, r0
   1e9c8:	mov	r3, #0
   1e9cc:	mov	r0, r4
   1e9d0:	movw	r1, #22536	; 0x5808
   1e9d4:	movt	r1, #4
   1e9d8:	strh	r3, [r6, #18]
   1e9dc:	str	r4, [r6, #40]	; 0x28
   1e9e0:	bl	12528 <strpbrk@plt>
   1e9e4:	vldr	s15, [pc, #16]	; 1e9fc <__assert_fail@plt+0xc408>
   1e9e8:	cmp	r0, #0
   1e9ec:	vldr	s14, [pc, #12]	; 1ea00 <__assert_fail@plt+0xc40c>
   1e9f0:	vmoveq.f32	s15, s14
   1e9f4:	vstr	s15, [r6, #28]
   1e9f8:	b	1e9a4 <__assert_fail@plt+0xc3b0>
   1e9fc:	svccc	0x004ccccd
   1ea00:	stclcc	12, cr12, [ip, #820]	; 0x334
   1ea04:	str	r4, [sp, #-8]!
   1ea08:	movw	r4, #40556	; 0x9e6c
   1ea0c:	movt	r4, #5
   1ea10:	ldrb	r3, [r4, #36]	; 0x24
   1ea14:	str	lr, [sp, #4]
   1ea18:	cmp	r3, #0
   1ea1c:	beq	1ea30 <__assert_fail@plt+0xc43c>
   1ea20:	ldr	r4, [sp]
   1ea24:	add	sp, sp, #4
   1ea28:	mov	r0, #1
   1ea2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea30:	ldr	r2, [r4, #28]
   1ea34:	add	r0, r4, #28
   1ea38:	str	r3, [r4, #32]
   1ea3c:	add	r3, r2, #86016	; 0x15000
   1ea40:	add	r3, r3, #384	; 0x180
   1ea44:	str	r3, [r4, #28]
   1ea48:	bl	1227c <localtime@plt>
   1ea4c:	cmp	r0, #0
   1ea50:	ldr	r3, [r4, #28]
   1ea54:	beq	1ea90 <__assert_fail@plt+0xc49c>
   1ea58:	ldr	ip, [r0]
   1ea5c:	mov	lr, #3600	; 0xe10
   1ea60:	ldmib	r0, {r1, r2}
   1ea64:	rsb	r1, r1, r1, lsl #4
   1ea68:	add	r1, ip, r1, lsl #2
   1ea6c:	mla	r2, lr, r2, r1
   1ea70:	sub	r3, r3, r2
   1ea74:	mov	r2, #1
   1ea78:	mov	r0, #1
   1ea7c:	str	r3, [r4, #28]
   1ea80:	strb	r2, [r4, #36]	; 0x24
   1ea84:	ldr	r4, [sp]
   1ea88:	add	sp, sp, #4
   1ea8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea90:	movw	r1, #17671	; 0x4507
   1ea94:	movt	r1, #49710	; 0xc22e
   1ea98:	asr	r2, r3, #31
   1ea9c:	movw	r0, #20864	; 0x5180
   1eaa0:	movt	r0, #1
   1eaa4:	smull	ip, r1, r1, r3
   1eaa8:	add	r1, r1, r3
   1eaac:	rsb	r2, r2, r1, asr #16
   1eab0:	mls	r2, r0, r2, r3
   1eab4:	b	1ea70 <__assert_fail@plt+0xc47c>
   1eab8:	cmp	r0, #0
   1eabc:	bxeq	lr
   1eac0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1eac4:	strd	r6, [sp, #8]
   1eac8:	str	lr, [sp, #20]
   1eacc:	ldr	lr, [r1]
   1ead0:	str	r8, [sp, #16]
   1ead4:	sub	sp, sp, #8
   1ead8:	ldr	r4, [r0, lr, lsl #2]
   1eadc:	cmp	r4, #0
   1eae0:	beq	1ebc8 <__assert_fail@plt+0xc5d4>
   1eae4:	mov	ip, r1
   1eae8:	add	lr, lr, #1
   1eaec:	mov	r0, r2
   1eaf0:	movw	r1, #18904	; 0x49d8
   1eaf4:	movt	r1, #1
   1eaf8:	mov	r2, r4
   1eafc:	str	lr, [ip]
   1eb00:	mov	r6, r3
   1eb04:	mov	r7, #0
   1eb08:	bl	17f60 <__assert_fail@plt+0x596c>
   1eb0c:	mov	r8, r0
   1eb10:	mov	r0, #32
   1eb14:	strh	r7, [r8, #18]
   1eb18:	bl	2da2c <__assert_fail@plt+0x1b438>
   1eb1c:	mov	r5, r0
   1eb20:	mov	r3, #100	; 0x64
   1eb24:	mov	r0, r3
   1eb28:	str	r5, [r8, #40]	; 0x28
   1eb2c:	str	r3, [r5, #4]
   1eb30:	bl	2da2c <__assert_fail@plt+0x1b438>
   1eb34:	str	r0, [r5]
   1eb38:	mov	r0, r6
   1eb3c:	str	r7, [r5, #16]
   1eb40:	bl	3f9a8 <__assert_fail@plt+0x2d3b4>
   1eb44:	mov	r0, r4
   1eb48:	str	r6, [r5, #12]
   1eb4c:	str	r7, [r5, #20]
   1eb50:	bl	12300 <strlen@plt>
   1eb54:	mov	r1, r0
   1eb58:	mov	r2, r5
   1eb5c:	mov	r0, r4
   1eb60:	bl	3f924 <__assert_fail@plt+0x2d330>
   1eb64:	subs	r5, r0, #0
   1eb68:	bne	1ebd0 <__assert_fail@plt+0xc5dc>
   1eb6c:	movw	r1, #22536	; 0x5808
   1eb70:	movt	r1, #4
   1eb74:	mov	r0, r4
   1eb78:	bl	12528 <strpbrk@plt>
   1eb7c:	cmp	r0, #0
   1eb80:	beq	1eba8 <__assert_fail@plt+0xc5b4>
   1eb84:	vldr	s15, [pc, #112]	; 1ebfc <__assert_fail@plt+0xc608>
   1eb88:	mov	r0, #1
   1eb8c:	vstr	s15, [r8, #28]
   1eb90:	add	sp, sp, #8
   1eb94:	ldrd	r4, [sp]
   1eb98:	ldrd	r6, [sp, #8]
   1eb9c:	ldr	r8, [sp, #16]
   1eba0:	add	sp, sp, #20
   1eba4:	pop	{pc}		; (ldr pc, [sp], #4)
   1eba8:	mov	r0, r4
   1ebac:	mov	r1, #46	; 0x2e
   1ebb0:	bl	1230c <strchr@plt>
   1ebb4:	vldr	s15, [pc, #64]	; 1ebfc <__assert_fail@plt+0xc608>
   1ebb8:	cmp	r0, #0
   1ebbc:	vldr	s14, [pc, #60]	; 1ec00 <__assert_fail@plt+0xc60c>
   1ebc0:	vmoveq.f32	s15, s14
   1ebc4:	b	1eb88 <__assert_fail@plt+0xc594>
   1ebc8:	mov	r0, r4
   1ebcc:	b	1eb90 <__assert_fail@plt+0xc59c>
   1ebd0:	mov	r2, #5
   1ebd4:	movw	r1, #25116	; 0x621c
   1ebd8:	movt	r1, #4
   1ebdc:	mov	r0, r7
   1ebe0:	bl	120b4 <dcgettext@plt>
   1ebe4:	mov	r2, r0
   1ebe8:	mov	r3, r4
   1ebec:	str	r5, [sp]
   1ebf0:	mov	r1, r7
   1ebf4:	mov	r0, #1
   1ebf8:	bl	121ec <error@plt>
   1ebfc:	svccc	0x004ccccd
   1ec00:	stclcc	12, cr12, [ip, #820]	; 0x334
   1ec04:	mov	ip, r1
   1ec08:	movw	r3, #40556	; 0x9e6c
   1ec0c:	movt	r3, #5
   1ec10:	mov	r1, r2
   1ec14:	mov	r2, r0
   1ec18:	mov	r0, ip
   1ec1c:	ldr	r3, [r3, #60]	; 0x3c
   1ec20:	b	1eab8 <__assert_fail@plt+0xc4c4>
   1ec24:	movw	r3, #40556	; 0x9e6c
   1ec28:	movt	r3, #5
   1ec2c:	push	{lr}		; (str lr, [sp, #-4]!)
   1ec30:	ldr	r3, [r3, #60]	; 0x3c
   1ec34:	mov	lr, r2
   1ec38:	mov	ip, r1
   1ec3c:	mov	r2, r0
   1ec40:	mov	r1, lr
   1ec44:	mov	r0, ip
   1ec48:	pop	{lr}		; (ldr lr, [sp], #4)
   1ec4c:	orr	r3, r3, #4194304	; 0x400000
   1ec50:	b	1eab8 <__assert_fail@plt+0xc4c4>
   1ec54:	str	r4, [sp, #-8]!
   1ec58:	str	lr, [sp, #4]
   1ec5c:	bl	18014 <__assert_fail@plt+0x5a20>
   1ec60:	mov	r4, r0
   1ec64:	movw	r0, #22776	; 0x58f8
   1ec68:	movt	r0, #4
   1ec6c:	add	r1, r4, #40	; 0x28
   1ec70:	bl	1ca28 <__assert_fail@plt+0xa434>
   1ec74:	mov	r3, #1065353216	; 0x3f800000
   1ec78:	movw	r2, #257	; 0x101
   1ec7c:	mov	r0, #1
   1ec80:	strh	r2, [r4, #16]
   1ec84:	str	r3, [r4, #28]
   1ec88:	ldr	r4, [sp]
   1ec8c:	add	sp, sp, #4
   1ec90:	pop	{pc}		; (ldr pc, [sp], #4)
   1ec94:	strd	r4, [sp, #-16]!
   1ec98:	str	r6, [sp, #8]
   1ec9c:	subs	r6, r1, #0
   1eca0:	str	lr, [sp, #12]
   1eca4:	sub	sp, sp, #32
   1eca8:	beq	1ed80 <__assert_fail@plt+0xc78c>
   1ecac:	ldr	r3, [r2]
   1ecb0:	ldr	r4, [r6, r3, lsl #2]
   1ecb4:	cmp	r4, #0
   1ecb8:	beq	1ed98 <__assert_fail@plt+0xc7a4>
   1ecbc:	mov	r1, #0
   1ecc0:	add	r3, r3, #1
   1ecc4:	vldr	d0, [pc, #268]	; 1edd8 <__assert_fail@plt+0xc7e4>
   1ecc8:	movw	ip, #25164	; 0x624c
   1eccc:	movt	ip, #4
   1ecd0:	add	lr, sp, #8
   1ecd4:	mov	r5, r0
   1ecd8:	str	r3, [r2]
   1ecdc:	mov	r0, r4
   1ece0:	str	ip, [sp]
   1ece4:	str	r1, [sp, #8]
   1ece8:	str	r1, [sp, #12]
   1ecec:	add	r1, sp, #16
   1ecf0:	ldm	lr, {r2, r3}
   1ecf4:	bl	1bfac <__assert_fail@plt+0x99b8>
   1ecf8:	subs	r6, r0, #0
   1ecfc:	beq	1edb0 <__assert_fail@plt+0xc7bc>
   1ed00:	mov	r1, r4
   1ed04:	mov	r0, r5
   1ed08:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1ed0c:	movw	r3, #17671	; 0x4507
   1ed10:	movt	r3, #49710	; 0xc22e
   1ed14:	vldr	s14, [pc, #196]	; 1ede0 <__assert_fail@plt+0xc7ec>
   1ed18:	ldr	r1, [sp, #24]
   1ed1c:	ldrd	r4, [sp, #16]
   1ed20:	smull	r3, r2, r3, r1
   1ed24:	asr	r3, r1, #31
   1ed28:	strd	r4, [r0, #40]	; 0x28
   1ed2c:	add	r2, r2, r1
   1ed30:	ldrd	r4, [sp, #24]
   1ed34:	rsb	r3, r3, r2, asr #16
   1ed38:	vmov	s15, r3
   1ed3c:	strd	r4, [r0, #48]	; 0x30
   1ed40:	vcvt.f32.s32	s15, s15
   1ed44:	vcmpe.f32	s15, s14
   1ed48:	vmrs	APSR_nzcv, fpscr
   1ed4c:	bmi	1eda0 <__assert_fail@plt+0xc7ac>
   1ed50:	vldr	s14, [pc, #140]	; 1ede4 <__assert_fail@plt+0xc7f0>
   1ed54:	vcmpe.f32	s15, s14
   1ed58:	vmrs	APSR_nzcv, fpscr
   1ed5c:	bmi	1eda8 <__assert_fail@plt+0xc7b4>
   1ed60:	vldr	s12, [pc, #128]	; 1ede8 <__assert_fail@plt+0xc7f4>
   1ed64:	vldr	s14, [pc, #128]	; 1edec <__assert_fail@plt+0xc7f8>
   1ed68:	vldr	s13, [pc, #128]	; 1edf0 <__assert_fail@plt+0xc7fc>
   1ed6c:	vcmpe.f32	s15, s12
   1ed70:	vmrs	APSR_nzcv, fpscr
   1ed74:	vmovle.f32	s15, s13
   1ed78:	vmovgt.f32	s15, s14
   1ed7c:	vstr	s15, [r0, #28]
   1ed80:	mov	r0, r6
   1ed84:	add	sp, sp, #32
   1ed88:	ldrd	r4, [sp]
   1ed8c:	ldr	r6, [sp, #8]
   1ed90:	add	sp, sp, #12
   1ed94:	pop	{pc}		; (ldr pc, [sp], #4)
   1ed98:	mov	r6, r4
   1ed9c:	b	1ed80 <__assert_fail@plt+0xc78c>
   1eda0:	vldr	s15, [pc, #76]	; 1edf4 <__assert_fail@plt+0xc800>
   1eda4:	b	1ed7c <__assert_fail@plt+0xc788>
   1eda8:	vldr	s15, [pc, #60]	; 1edec <__assert_fail@plt+0xc7f8>
   1edac:	b	1ed7c <__assert_fail@plt+0xc788>
   1edb0:	mov	r2, #5
   1edb4:	movw	r1, #25232	; 0x6290
   1edb8:	movt	r1, #4
   1edbc:	bl	120b4 <dcgettext@plt>
   1edc0:	mov	r2, r0
   1edc4:	mov	r3, r4
   1edc8:	mov	r1, r6
   1edcc:	mov	r0, #1
   1edd0:	bl	121ec <error@plt>
   1edd4:	nop	{0}
   1edd8:	andeq	r0, r0, r0
   1eddc:	rscsmi	r1, r5, r0, lsl #16
   1ede0:	stclcc	12, cr12, [ip, #820]	; 0x334
   1ede4:	svccc	0x00800000
   1ede8:	sbcmi	r0, r8, #0
   1edec:			; <UNDEFINED> instruction: 0x3e99999a
   1edf0:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1edf4:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1edf8:	strd	r4, [sp, #-16]!
   1edfc:	mov	r4, r1
   1ee00:	mov	r5, r2
   1ee04:	str	r6, [sp, #8]
   1ee08:	mov	r6, r0
   1ee0c:	str	lr, [sp, #12]
   1ee10:	sub	sp, sp, #112	; 0x70
   1ee14:	add	r0, sp, #8
   1ee18:	bl	18248 <__assert_fail@plt+0x5c54>
   1ee1c:	mov	r0, r4
   1ee20:	add	r2, sp, #8
   1ee24:	mov	r1, r5
   1ee28:	add	r3, sp, #4
   1ee2c:	bl	1c7e0 <__assert_fail@plt+0xa1ec>
   1ee30:	subs	r4, r0, #0
   1ee34:	bne	1ee50 <__assert_fail@plt+0xc85c>
   1ee38:	mov	r0, r4
   1ee3c:	add	sp, sp, #112	; 0x70
   1ee40:	ldrd	r4, [sp]
   1ee44:	ldr	r6, [sp, #8]
   1ee48:	add	sp, sp, #12
   1ee4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ee50:	mov	r0, r6
   1ee54:	ldr	r1, [sp, #4]
   1ee58:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1ee5c:	movw	r3, #40556	; 0x9e6c
   1ee60:	movt	r3, #5
   1ee64:	ldr	ip, [sp, #88]	; 0x58
   1ee68:	movw	r2, #17671	; 0x4507
   1ee6c:	movt	r2, #49710	; 0xc22e
   1ee70:	ldr	r1, [r3, #28]
   1ee74:	mov	r3, #3
   1ee78:	ldr	lr, [sp, #92]	; 0x5c
   1ee7c:	str	r3, [r0, #40]	; 0x28
   1ee80:	str	ip, [r0, #48]	; 0x30
   1ee84:	sub	r1, r1, ip
   1ee88:	vldr	s14, [pc, #112]	; 1ef00 <__assert_fail@plt+0xc90c>
   1ee8c:	asr	r3, r1, #31
   1ee90:	smull	ip, r2, r2, r1
   1ee94:	mov	ip, #0
   1ee98:	str	ip, [r0, #44]	; 0x2c
   1ee9c:	add	r2, r2, r1
   1eea0:	str	lr, [r0, #52]	; 0x34
   1eea4:	rsb	r3, r3, r2, asr #16
   1eea8:	vmov	s15, r3
   1eeac:	vcvt.f32.s32	s15, s15
   1eeb0:	vcmpe.f32	s15, s14
   1eeb4:	vmrs	APSR_nzcv, fpscr
   1eeb8:	bmi	1eef0 <__assert_fail@plt+0xc8fc>
   1eebc:	vldr	s14, [pc, #64]	; 1ef04 <__assert_fail@plt+0xc910>
   1eec0:	vcmpe.f32	s15, s14
   1eec4:	vmrs	APSR_nzcv, fpscr
   1eec8:	bmi	1eef8 <__assert_fail@plt+0xc904>
   1eecc:	vldr	s12, [pc, #52]	; 1ef08 <__assert_fail@plt+0xc914>
   1eed0:	vldr	s14, [pc, #52]	; 1ef0c <__assert_fail@plt+0xc918>
   1eed4:	vldr	s13, [pc, #52]	; 1ef10 <__assert_fail@plt+0xc91c>
   1eed8:	vcmpe.f32	s15, s12
   1eedc:	vmrs	APSR_nzcv, fpscr
   1eee0:	vmovle.f32	s15, s13
   1eee4:	vmovgt.f32	s15, s14
   1eee8:	vstr	s15, [r0, #28]
   1eeec:	b	1ee38 <__assert_fail@plt+0xc844>
   1eef0:	vldr	s15, [pc, #28]	; 1ef14 <__assert_fail@plt+0xc920>
   1eef4:	b	1eee8 <__assert_fail@plt+0xc8f4>
   1eef8:	vldr	s15, [pc, #12]	; 1ef0c <__assert_fail@plt+0xc918>
   1eefc:	b	1eee8 <__assert_fail@plt+0xc8f4>
   1ef00:	stclcc	12, cr12, [ip, #820]	; 0x334
   1ef04:	svccc	0x00800000
   1ef08:	sbcmi	r0, r8, #0
   1ef0c:			; <UNDEFINED> instruction: 0x3e99999a
   1ef10:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1ef14:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1ef18:	strd	r4, [sp, #-16]!
   1ef1c:	mov	r4, r1
   1ef20:	mov	r5, r2
   1ef24:	str	r6, [sp, #8]
   1ef28:	mov	r6, r0
   1ef2c:	str	lr, [sp, #12]
   1ef30:	sub	sp, sp, #112	; 0x70
   1ef34:	add	r0, sp, #8
   1ef38:	bl	18248 <__assert_fail@plt+0x5c54>
   1ef3c:	mov	r0, r4
   1ef40:	add	r2, sp, #8
   1ef44:	mov	r1, r5
   1ef48:	add	r3, sp, #4
   1ef4c:	bl	1c7e0 <__assert_fail@plt+0xa1ec>
   1ef50:	subs	r4, r0, #0
   1ef54:	bne	1ef70 <__assert_fail@plt+0xc97c>
   1ef58:	mov	r0, r4
   1ef5c:	add	sp, sp, #112	; 0x70
   1ef60:	ldrd	r4, [sp]
   1ef64:	ldr	r6, [sp, #8]
   1ef68:	add	sp, sp, #12
   1ef6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef70:	mov	r0, r6
   1ef74:	ldr	r1, [sp, #4]
   1ef78:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1ef7c:	movw	r3, #40556	; 0x9e6c
   1ef80:	movt	r3, #5
   1ef84:	ldr	ip, [sp, #88]	; 0x58
   1ef88:	movw	r2, #17671	; 0x4507
   1ef8c:	movt	r2, #49710	; 0xc22e
   1ef90:	ldr	r1, [r3, #28]
   1ef94:	vldr	s14, [pc, #128]	; 1f01c <__assert_fail@plt+0xca28>
   1ef98:	ldr	lr, [sp, #92]	; 0x5c
   1ef9c:	sub	r1, r1, ip
   1efa0:	str	ip, [r0, #48]	; 0x30
   1efa4:	mov	ip, #0
   1efa8:	smull	r3, r2, r2, r1
   1efac:	str	ip, [r0, #40]	; 0x28
   1efb0:	asr	r3, r1, #31
   1efb4:	str	ip, [r0, #44]	; 0x2c
   1efb8:	str	lr, [r0, #52]	; 0x34
   1efbc:	add	r2, r2, r1
   1efc0:	rsb	r3, r3, r2, asr #16
   1efc4:	vmov	s15, r3
   1efc8:	vcvt.f32.s32	s15, s15
   1efcc:	vcmpe.f32	s15, s14
   1efd0:	vmrs	APSR_nzcv, fpscr
   1efd4:	bmi	1f00c <__assert_fail@plt+0xca18>
   1efd8:	vldr	s14, [pc, #64]	; 1f020 <__assert_fail@plt+0xca2c>
   1efdc:	vcmpe.f32	s15, s14
   1efe0:	vmrs	APSR_nzcv, fpscr
   1efe4:	bmi	1f014 <__assert_fail@plt+0xca20>
   1efe8:	vldr	s12, [pc, #52]	; 1f024 <__assert_fail@plt+0xca30>
   1efec:	vldr	s14, [pc, #52]	; 1f028 <__assert_fail@plt+0xca34>
   1eff0:	vldr	s13, [pc, #52]	; 1f02c <__assert_fail@plt+0xca38>
   1eff4:	vcmpe.f32	s15, s12
   1eff8:	vmrs	APSR_nzcv, fpscr
   1effc:	vmovle.f32	s15, s13
   1f000:	vmovgt.f32	s15, s14
   1f004:	vstr	s15, [r0, #28]
   1f008:	b	1ef58 <__assert_fail@plt+0xc964>
   1f00c:	vldr	s15, [pc, #28]	; 1f030 <__assert_fail@plt+0xca3c>
   1f010:	b	1f004 <__assert_fail@plt+0xca10>
   1f014:	vldr	s15, [pc, #12]	; 1f028 <__assert_fail@plt+0xca34>
   1f018:	b	1f004 <__assert_fail@plt+0xca10>
   1f01c:	stclcc	12, cr12, [ip, #820]	; 0x334
   1f020:	svccc	0x00800000
   1f024:	sbcmi	r0, r8, #0
   1f028:			; <UNDEFINED> instruction: 0x3e99999a
   1f02c:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1f030:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1f034:	strd	r4, [sp, #-16]!
   1f038:	mov	r4, r1
   1f03c:	mov	r5, r2
   1f040:	str	r6, [sp, #8]
   1f044:	mov	r6, r0
   1f048:	str	lr, [sp, #12]
   1f04c:	sub	sp, sp, #112	; 0x70
   1f050:	add	r0, sp, #8
   1f054:	bl	18248 <__assert_fail@plt+0x5c54>
   1f058:	mov	r0, r4
   1f05c:	add	r2, sp, #8
   1f060:	mov	r1, r5
   1f064:	add	r3, sp, #4
   1f068:	bl	1c7e0 <__assert_fail@plt+0xa1ec>
   1f06c:	subs	r4, r0, #0
   1f070:	bne	1f08c <__assert_fail@plt+0xca98>
   1f074:	mov	r0, r4
   1f078:	add	sp, sp, #112	; 0x70
   1f07c:	ldrd	r4, [sp]
   1f080:	ldr	r6, [sp, #8]
   1f084:	add	sp, sp, #12
   1f088:	pop	{pc}		; (ldr pc, [sp], #4)
   1f08c:	mov	r0, r6
   1f090:	ldr	r1, [sp, #4]
   1f094:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1f098:	movw	r3, #40556	; 0x9e6c
   1f09c:	movt	r3, #5
   1f0a0:	ldr	ip, [sp, #88]	; 0x58
   1f0a4:	mov	lr, #2
   1f0a8:	movw	r2, #17671	; 0x4507
   1f0ac:	movt	r2, #49710	; 0xc22e
   1f0b0:	ldr	r1, [r3, #28]
   1f0b4:	mov	r3, #0
   1f0b8:	str	lr, [r0, #40]	; 0x28
   1f0bc:	ldr	lr, [sp, #92]	; 0x5c
   1f0c0:	str	r3, [r0, #44]	; 0x2c
   1f0c4:	str	ip, [r0, #48]	; 0x30
   1f0c8:	sub	r1, r1, ip
   1f0cc:	vldr	s14, [pc, #104]	; 1f13c <__assert_fail@plt+0xcb48>
   1f0d0:	asr	r3, r1, #31
   1f0d4:	smull	ip, r2, r2, r1
   1f0d8:	str	lr, [r0, #52]	; 0x34
   1f0dc:	add	r2, r2, r1
   1f0e0:	rsb	r3, r3, r2, asr #16
   1f0e4:	vmov	s15, r3
   1f0e8:	vcvt.f32.s32	s15, s15
   1f0ec:	vcmpe.f32	s15, s14
   1f0f0:	vmrs	APSR_nzcv, fpscr
   1f0f4:	bmi	1f12c <__assert_fail@plt+0xcb38>
   1f0f8:	vldr	s14, [pc, #64]	; 1f140 <__assert_fail@plt+0xcb4c>
   1f0fc:	vcmpe.f32	s15, s14
   1f100:	vmrs	APSR_nzcv, fpscr
   1f104:	bmi	1f134 <__assert_fail@plt+0xcb40>
   1f108:	vldr	s12, [pc, #52]	; 1f144 <__assert_fail@plt+0xcb50>
   1f10c:	vldr	s14, [pc, #52]	; 1f148 <__assert_fail@plt+0xcb54>
   1f110:	vldr	s13, [pc, #52]	; 1f14c <__assert_fail@plt+0xcb58>
   1f114:	vcmpe.f32	s15, s12
   1f118:	vmrs	APSR_nzcv, fpscr
   1f11c:	vmovle.f32	s15, s13
   1f120:	vmovgt.f32	s15, s14
   1f124:	vstr	s15, [r0, #28]
   1f128:	b	1f074 <__assert_fail@plt+0xca80>
   1f12c:	vldr	s15, [pc, #28]	; 1f150 <__assert_fail@plt+0xcb5c>
   1f130:	b	1f124 <__assert_fail@plt+0xcb30>
   1f134:	vldr	s15, [pc, #12]	; 1f148 <__assert_fail@plt+0xcb54>
   1f138:	b	1f124 <__assert_fail@plt+0xcb30>
   1f13c:	stclcc	12, cr12, [ip, #820]	; 0x334
   1f140:	svccc	0x00800000
   1f144:	sbcmi	r0, r8, #0
   1f148:			; <UNDEFINED> instruction: 0x3e99999a
   1f14c:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1f150:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1f154:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1f158:	mov	r4, r1
   1f15c:	movw	r1, #25164	; 0x624c
   1f160:	movt	r1, #4
   1f164:	strd	r6, [sp, #8]
   1f168:	mov	r7, r2
   1f16c:	mov	r2, #5
   1f170:	strd	r8, [sp, #16]
   1f174:	mov	r9, r0
   1f178:	mov	r0, #0
   1f17c:	str	lr, [sp, #24]
   1f180:	sub	sp, sp, #44	; 0x2c
   1f184:	bl	120b4 <dcgettext@plt>
   1f188:	cmp	r4, #0
   1f18c:	beq	1f1fc <__assert_fail@plt+0xcc08>
   1f190:	ldr	r8, [r7]
   1f194:	ldr	r6, [r4, r8, lsl #2]
   1f198:	cmp	r6, #0
   1f19c:	moveq	r4, r6
   1f1a0:	beq	1f1fc <__assert_fail@plt+0xcc08>
   1f1a4:	add	r3, r8, #1
   1f1a8:	movw	r5, #40556	; 0x9e6c
   1f1ac:	movt	r5, #5
   1f1b0:	mov	ip, r0
   1f1b4:	ldr	r0, [r5, #28]
   1f1b8:	str	r3, [r7]
   1f1bc:	ldrb	r1, [r6]
   1f1c0:	ldrd	r2, [r5, #28]
   1f1c4:	cmp	r1, #45	; 0x2d
   1f1c8:	strd	r2, [sp, #16]
   1f1cc:	beq	1f314 <__assert_fail@plt+0xcd20>
   1f1d0:	add	r3, sp, #16
   1f1d4:	vldr	d0, [pc, #516]	; 1f3e0 <__assert_fail@plt+0xcdec>
   1f1d8:	add	r1, sp, #24
   1f1dc:	str	ip, [sp]
   1f1e0:	str	r0, [sp, #16]
   1f1e4:	mov	r0, r6
   1f1e8:	ldm	r3, {r2, r3}
   1f1ec:	bl	1bfac <__assert_fail@plt+0x99b8>
   1f1f0:	subs	r4, r0, #0
   1f1f4:	streq	r8, [r7]
   1f1f8:	bne	1f218 <__assert_fail@plt+0xcc24>
   1f1fc:	mov	r0, r4
   1f200:	add	sp, sp, #44	; 0x2c
   1f204:	ldrd	r4, [sp]
   1f208:	ldrd	r6, [sp, #8]
   1f20c:	ldrd	r8, [sp, #16]
   1f210:	add	sp, sp, #24
   1f214:	pop	{pc}		; (ldr pc, [sp], #4)
   1f218:	mov	r1, r6
   1f21c:	mov	r0, r9
   1f220:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1f224:	ldr	ip, [r5, #28]
   1f228:	mov	r6, r0
   1f22c:	movw	r0, #17671	; 0x4507
   1f230:	movt	r0, #49710	; 0xc22e
   1f234:	vldr	s14, [pc, #428]	; 1f3e8 <__assert_fail@plt+0xcdf4>
   1f238:	ldr	r1, [sp, #32]
   1f23c:	ldrd	r2, [sp, #24]
   1f240:	sub	ip, ip, r1
   1f244:	smull	r1, r0, r0, ip
   1f248:	strd	r2, [r6, #40]	; 0x28
   1f24c:	asr	r1, ip, #31
   1f250:	ldrd	r2, [sp, #32]
   1f254:	add	r0, r0, ip
   1f258:	rsb	r1, r1, r0, asr #16
   1f25c:	strd	r2, [r6, #48]	; 0x30
   1f260:	vmov	s15, r1
   1f264:	vcvt.f32.s32	s15, s15
   1f268:	vcmpe.f32	s15, s14
   1f26c:	vmrs	APSR_nzcv, fpscr
   1f270:	bmi	1f32c <__assert_fail@plt+0xcd38>
   1f274:	vldr	s14, [pc, #368]	; 1f3ec <__assert_fail@plt+0xcdf8>
   1f278:	vcmpe.f32	s15, s14
   1f27c:	vmrs	APSR_nzcv, fpscr
   1f280:	bmi	1f324 <__assert_fail@plt+0xcd30>
   1f284:	vldr	s12, [pc, #356]	; 1f3f0 <__assert_fail@plt+0xcdfc>
   1f288:	vldr	s14, [pc, #356]	; 1f3f4 <__assert_fail@plt+0xce00>
   1f28c:	vldr	s13, [pc, #356]	; 1f3f8 <__assert_fail@plt+0xce04>
   1f290:	vcmpe.f32	s15, s12
   1f294:	vmrs	APSR_nzcv, fpscr
   1f298:	vmovle.f32	s15, s13
   1f29c:	vmovgt.f32	s15, s14
   1f2a0:	ldr	r3, [r5, #44]	; 0x2c
   1f2a4:	vstr	s15, [r6, #28]
   1f2a8:	tst	r3, #1
   1f2ac:	beq	1f1fc <__assert_fail@plt+0xcc08>
   1f2b0:	movw	r5, #38216	; 0x9548
   1f2b4:	movt	r5, #5
   1f2b8:	ldr	r2, [r6, #4]
   1f2bc:	movw	r1, #22608	; 0x5850
   1f2c0:	movt	r1, #4
   1f2c4:	ldr	r0, [r5]
   1f2c8:	bl	1233c <fprintf@plt>
   1f2cc:	ldr	r3, [sp, #28]
   1f2d0:	ldr	r0, [r5]
   1f2d4:	cmp	r3, #0
   1f2d8:	beq	1f334 <__assert_fail@plt+0xcd40>
   1f2dc:	cmp	r3, #1
   1f2e0:	beq	1f3c8 <__assert_fail@plt+0xcdd4>
   1f2e4:	cmp	r3, #2
   1f2e8:	movw	ip, #22600	; 0x5848
   1f2ec:	movt	ip, #4
   1f2f0:	movw	r1, #25264	; 0x62b0
   1f2f4:	movt	r1, #4
   1f2f8:	movw	r2, #25072	; 0x61f0
   1f2fc:	movt	r2, #4
   1f300:	movw	r3, #22596	; 0x5844
   1f304:	movt	r3, #4
   1f308:	moveq	r2, ip
   1f30c:	moveq	r3, r1
   1f310:	b	1f344 <__assert_fail@plt+0xcd50>
   1f314:	add	r0, r0, #86016	; 0x15000
   1f318:	add	r0, r0, #380	; 0x17c
   1f31c:	add	r0, r0, #3
   1f320:	b	1f1d0 <__assert_fail@plt+0xcbdc>
   1f324:	vldr	s15, [pc, #200]	; 1f3f4 <__assert_fail@plt+0xce00>
   1f328:	b	1f2a0 <__assert_fail@plt+0xccac>
   1f32c:	vldr	s15, [pc, #200]	; 1f3fc <__assert_fail@plt+0xce08>
   1f330:	b	1f2a0 <__assert_fail@plt+0xccac>
   1f334:	movw	r2, #22580	; 0x5834
   1f338:	movt	r2, #4
   1f33c:	movw	r3, #22584	; 0x5838
   1f340:	movt	r3, #4
   1f344:	movw	r1, #22624	; 0x5860
   1f348:	movt	r1, #4
   1f34c:	bl	1233c <fprintf@plt>
   1f350:	ldr	r7, [r6, #48]	; 0x30
   1f354:	add	r0, sp, #12
   1f358:	ldr	r8, [r5]
   1f35c:	str	r7, [sp, #12]
   1f360:	bl	120a8 <ctime@plt>
   1f364:	asr	r3, r7, #31
   1f368:	mov	r2, r7
   1f36c:	movw	r1, #25288	; 0x62c8
   1f370:	movt	r1, #4
   1f374:	str	r0, [sp]
   1f378:	mov	r0, r8
   1f37c:	bl	1233c <fprintf@plt>
   1f380:	ldr	r3, [sp, #28]
   1f384:	cmp	r3, #2
   1f388:	bne	1f1fc <__assert_fail@plt+0xcc08>
   1f38c:	ldr	r2, [r6, #48]	; 0x30
   1f390:	add	r0, sp, #12
   1f394:	ldr	r6, [r5]
   1f398:	add	r5, r2, #86016	; 0x15000
   1f39c:	add	r5, r5, #384	; 0x180
   1f3a0:	str	r5, [sp, #12]
   1f3a4:	bl	120a8 <ctime@plt>
   1f3a8:	mov	r2, r5
   1f3ac:	asr	r3, r5, #31
   1f3b0:	movw	r1, #25268	; 0x62b4
   1f3b4:	movt	r1, #4
   1f3b8:	str	r0, [sp]
   1f3bc:	mov	r0, r6
   1f3c0:	bl	1233c <fprintf@plt>
   1f3c4:	b	1f1fc <__assert_fail@plt+0xcc08>
   1f3c8:	movw	r2, #22588	; 0x583c
   1f3cc:	movt	r2, #4
   1f3d0:	movw	r3, #22592	; 0x5840
   1f3d4:	movt	r3, #4
   1f3d8:	b	1f344 <__assert_fail@plt+0xcd50>
   1f3dc:	nop	{0}
   1f3e0:	andeq	r0, r0, r0
   1f3e4:	rscsmi	r1, r5, r0, lsl #16
   1f3e8:	stclcc	12, cr12, [ip, #820]	; 0x334
   1f3ec:	svccc	0x00800000
   1f3f0:	sbcmi	r0, r8, #0
   1f3f4:			; <UNDEFINED> instruction: 0x3e99999a
   1f3f8:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1f3fc:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1f400:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1f404:	strd	r6, [sp, #8]
   1f408:	subs	r6, r1, #0
   1f40c:	strd	r8, [sp, #16]
   1f410:	str	sl, [sp, #24]
   1f414:	str	lr, [sp, #28]
   1f418:	sub	sp, sp, #32
   1f41c:	beq	1f498 <__assert_fail@plt+0xcea4>
   1f420:	ldr	r8, [r2]
   1f424:	ldr	r9, [r6, r8, lsl #2]
   1f428:	cmp	r9, #0
   1f42c:	moveq	r6, r9
   1f430:	beq	1f498 <__assert_fail@plt+0xcea4>
   1f434:	movw	r5, #40556	; 0x9e6c
   1f438:	movt	r5, #5
   1f43c:	str	r3, [sp, #16]
   1f440:	ldr	r3, [r5, #28]
   1f444:	movw	r1, #25296	; 0x62d0
   1f448:	movt	r1, #4
   1f44c:	mov	r4, r2
   1f450:	add	r2, r8, #1
   1f454:	str	r1, [sp]
   1f458:	add	ip, sp, #8
   1f45c:	mov	sl, r0
   1f460:	ldrd	r6, [r5, #28]
   1f464:	mov	r0, r9
   1f468:	add	r1, sp, #16
   1f46c:	str	r2, [r4]
   1f470:	add	r3, r3, #86016	; 0x15000
   1f474:	vldr	d0, [pc, #220]	; 1f558 <__assert_fail@plt+0xcf64>
   1f478:	add	r3, r3, #384	; 0x180
   1f47c:	strd	r6, [sp, #8]
   1f480:	str	r3, [sp, #8]
   1f484:	ldm	ip, {r2, r3}
   1f488:	bl	1bfac <__assert_fail@plt+0x99b8>
   1f48c:	subs	r6, r0, #0
   1f490:	streq	r8, [r4]
   1f494:	bne	1f4b8 <__assert_fail@plt+0xcec4>
   1f498:	mov	r0, r6
   1f49c:	add	sp, sp, #32
   1f4a0:	ldrd	r4, [sp]
   1f4a4:	ldrd	r6, [sp, #8]
   1f4a8:	ldrd	r8, [sp, #16]
   1f4ac:	ldr	sl, [sp, #24]
   1f4b0:	add	sp, sp, #28
   1f4b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f4b8:	mov	r1, r9
   1f4bc:	mov	r0, sl
   1f4c0:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1f4c4:	ldr	r3, [sp, #24]
   1f4c8:	movw	r2, #17671	; 0x4507
   1f4cc:	movt	r2, #49710	; 0xc22e
   1f4d0:	ldr	r1, [r5, #28]
   1f4d4:	vldr	s14, [pc, #132]	; 1f560 <__assert_fail@plt+0xcf6c>
   1f4d8:	ldrd	r4, [sp, #16]
   1f4dc:	sub	r1, r1, r3
   1f4e0:	smull	r3, r2, r2, r1
   1f4e4:	asr	r3, r1, #31
   1f4e8:	strd	r4, [r0, #40]	; 0x28
   1f4ec:	add	r2, r2, r1
   1f4f0:	ldrd	r4, [sp, #24]
   1f4f4:	rsb	r3, r3, r2, asr #16
   1f4f8:	vmov	s15, r3
   1f4fc:	strd	r4, [r0, #48]	; 0x30
   1f500:	vcvt.f32.s32	s15, s15
   1f504:	vcmpe.f32	s15, s14
   1f508:	vmrs	APSR_nzcv, fpscr
   1f50c:	bmi	1f544 <__assert_fail@plt+0xcf50>
   1f510:	vldr	s14, [pc, #76]	; 1f564 <__assert_fail@plt+0xcf70>
   1f514:	vcmpe.f32	s15, s14
   1f518:	vmrs	APSR_nzcv, fpscr
   1f51c:	bmi	1f54c <__assert_fail@plt+0xcf58>
   1f520:	vldr	s12, [pc, #64]	; 1f568 <__assert_fail@plt+0xcf74>
   1f524:	vldr	s14, [pc, #64]	; 1f56c <__assert_fail@plt+0xcf78>
   1f528:	vldr	s13, [pc, #64]	; 1f570 <__assert_fail@plt+0xcf7c>
   1f52c:	vcmpe.f32	s15, s12
   1f530:	vmrs	APSR_nzcv, fpscr
   1f534:	vmovle.f32	s15, s13
   1f538:	vmovgt.f32	s15, s14
   1f53c:	vstr	s15, [r0, #28]
   1f540:	b	1f498 <__assert_fail@plt+0xcea4>
   1f544:	vldr	s15, [pc, #40]	; 1f574 <__assert_fail@plt+0xcf80>
   1f548:	b	1f53c <__assert_fail@plt+0xcf48>
   1f54c:	vldr	s15, [pc, #24]	; 1f56c <__assert_fail@plt+0xcf78>
   1f550:	b	1f53c <__assert_fail@plt+0xcf48>
   1f554:	nop	{0}
   1f558:	andeq	r0, r0, r0
   1f55c:	submi	r0, lr, r0
   1f560:	stclcc	12, cr12, [ip, #820]	; 0x334
   1f564:	svccc	0x00800000
   1f568:	sbcmi	r0, r8, #0
   1f56c:			; <UNDEFINED> instruction: 0x3e99999a
   1f570:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1f574:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1f578:	mov	r3, #3
   1f57c:	b	1f400 <__assert_fail@plt+0xce0c>
   1f580:	mov	r3, #2
   1f584:	b	1f400 <__assert_fail@plt+0xce0c>
   1f588:	mov	r3, #0
   1f58c:	b	1f400 <__assert_fail@plt+0xce0c>
   1f590:	str	r4, [sp, #-8]!
   1f594:	subs	r4, r0, #0
   1f598:	str	lr, [sp, #4]
   1f59c:	beq	1f5e0 <__assert_fail@plt+0xcfec>
   1f5a0:	movw	r2, #15956	; 0x3e54
   1f5a4:	movt	r2, #1
   1f5a8:	movw	r0, #14348	; 0x380c
   1f5ac:	movt	r0, #1
   1f5b0:	mov	r1, #0
   1f5b4:	ldr	r3, [r4]
   1f5b8:	cmp	r3, r2
   1f5bc:	orreq	r1, r1, #1
   1f5c0:	beq	1f5cc <__assert_fail@plt+0xcfd8>
   1f5c4:	cmp	r3, r0
   1f5c8:	orreq	r1, r1, #2
   1f5cc:	ldr	r4, [r4, #152]	; 0x98
   1f5d0:	cmp	r4, #0
   1f5d4:	bne	1f5b4 <__assert_fail@plt+0xcfc0>
   1f5d8:	cmp	r1, #3
   1f5dc:	beq	1f5ec <__assert_fail@plt+0xcff8>
   1f5e0:	ldr	r4, [sp]
   1f5e4:	add	sp, sp, #4
   1f5e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f5ec:	movw	r3, #40556	; 0x9e6c
   1f5f0:	movt	r3, #5
   1f5f4:	ldrb	r3, [r3, #1]
   1f5f8:	cmp	r3, #0
   1f5fc:	bne	1f5e0 <__assert_fail@plt+0xcfec>
   1f600:	mov	r2, #5
   1f604:	movw	r1, #25368	; 0x6318
   1f608:	movt	r1, #4
   1f60c:	mov	r0, r4
   1f610:	bl	120b4 <dcgettext@plt>
   1f614:	mov	r2, r0
   1f618:	mov	r1, r4
   1f61c:	mov	r0, #1
   1f620:	bl	121ec <error@plt>
   1f624:	cmp	r0, #1
   1f628:	movw	r3, #40556	; 0x9e6c
   1f62c:	movt	r3, #5
   1f630:	beq	1f684 <__assert_fail@plt+0xd090>
   1f634:	cmp	r0, #0
   1f638:	beq	1f6a4 <__assert_fail@plt+0xd0b0>
   1f63c:	cmp	r0, #2
   1f640:	bne	1f664 <__assert_fail@plt+0xd070>
   1f644:	movw	r1, #34408	; 0x8668
   1f648:	movt	r1, #1
   1f64c:	movw	r2, #57284	; 0xdfc4
   1f650:	movt	r2, #1
   1f654:	mov	ip, #1
   1f658:	strb	ip, [r3, #12]
   1f65c:	str	r1, [r3, #52]	; 0x34
   1f660:	str	r2, [r3, #64]	; 0x40
   1f664:	ldr	r2, [r3, #44]	; 0x2c
   1f668:	str	r0, [r3, #48]	; 0x30
   1f66c:	tst	r2, #2
   1f670:	beq	1f680 <__assert_fail@plt+0xd08c>
   1f674:	movw	r2, #34944	; 0x8880
   1f678:	movt	r2, #1
   1f67c:	str	r2, [r3, #52]	; 0x34
   1f680:	bx	lr
   1f684:	movw	r1, #34648	; 0x8758
   1f688:	movt	r1, #1
   1f68c:	strb	r0, [r3, #12]
   1f690:	movw	r2, #57200	; 0xdf70
   1f694:	movt	r2, #1
   1f698:	str	r1, [r3, #52]	; 0x34
   1f69c:	str	r2, [r3, #64]	; 0x40
   1f6a0:	b	1f664 <__assert_fail@plt+0xd070>
   1f6a4:	movw	r1, #34844	; 0x881c
   1f6a8:	movt	r1, #1
   1f6ac:	movw	r2, #47004	; 0xb79c
   1f6b0:	movt	r2, #1
   1f6b4:	str	r1, [r3, #52]	; 0x34
   1f6b8:	str	r2, [r3, #64]	; 0x40
   1f6bc:	b	1f664 <__assert_fail@plt+0xd070>
   1f6c0:	movw	r3, #40144	; 0x9cd0
   1f6c4:	movt	r3, #5
   1f6c8:	mov	r2, #0
   1f6cc:	str	r2, [r3, #8]
   1f6d0:	bx	lr
   1f6d4:	bx	lr
   1f6d8:	mov	r1, r0
   1f6dc:	mov	r2, #6
   1f6e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1f6e4:	strd	r6, [sp, #8]
   1f6e8:	str	r8, [sp, #16]
   1f6ec:	mov	r8, r0
   1f6f0:	movw	r0, #24044	; 0x5dec
   1f6f4:	movt	r0, #4
   1f6f8:	str	lr, [sp, #20]
   1f6fc:	sub	sp, sp, #8
   1f700:	bl	12594 <strncmp@plt>
   1f704:	cmp	r0, #0
   1f708:	bne	1f71c <__assert_fail@plt+0xd128>
   1f70c:	mov	r0, r8
   1f710:	bl	12300 <strlen@plt>
   1f714:	cmp	r0, #8
   1f718:	beq	1f824 <__assert_fail@plt+0xd230>
   1f71c:	ldrb	r3, [r8]
   1f720:	movw	r4, #13796	; 0x35e4
   1f724:	movt	r4, #4
   1f728:	mov	r5, #0
   1f72c:	ldr	r6, [pc, #276]	; 1f848 <__assert_fail@plt+0xd254>
   1f730:	cmp	r3, #45	; 0x2d
   1f734:	addeq	r7, r8, #1
   1f738:	movne	r7, r8
   1f73c:	b	1f754 <__assert_fail@plt+0xd160>
   1f740:	add	r5, r5, #1
   1f744:	add	r3, r6, r5, lsl #4
   1f748:	ldr	r4, [r3, #4]
   1f74c:	cmp	r4, #0
   1f750:	beq	1f7fc <__assert_fail@plt+0xd208>
   1f754:	mov	r0, r4
   1f758:	mov	r1, r7
   1f75c:	bl	11f40 <strcmp@plt>
   1f760:	subs	r3, r0, #0
   1f764:	bne	1f740 <__assert_fail@plt+0xd14c>
   1f768:	lsl	r4, r5, #4
   1f76c:	movw	r2, #20444	; 0x4fdc
   1f770:	movt	r2, #4
   1f774:	add	r2, r2, r4
   1f778:	add	r4, r6, r4
   1f77c:	ldr	r2, [r2, #72]	; 0x48
   1f780:	cmp	r2, #2
   1f784:	beq	1f7fc <__assert_fail@plt+0xd208>
   1f788:	cmp	r2, #1
   1f78c:	beq	1f840 <__assert_fail@plt+0xd24c>
   1f790:	movw	r5, #40144	; 0x9cd0
   1f794:	movt	r5, #5
   1f798:	cmp	r2, #0
   1f79c:	ldr	r3, [r5, #8]
   1f7a0:	bne	1f818 <__assert_fail@plt+0xd224>
   1f7a4:	cmp	r3, #0
   1f7a8:	beq	1f7fc <__assert_fail@plt+0xd208>
   1f7ac:	movw	r3, #40556	; 0x9e6c
   1f7b0:	movt	r3, #5
   1f7b4:	ldrb	r6, [r3, #17]
   1f7b8:	cmp	r6, #0
   1f7bc:	bne	1f7fc <__assert_fail@plt+0xd208>
   1f7c0:	ldrb	r3, [r3, #16]
   1f7c4:	cmp	r3, #0
   1f7c8:	beq	1f7fc <__assert_fail@plt+0xd208>
   1f7cc:	mov	r2, #5
   1f7d0:	movw	r1, #25540	; 0x63c4
   1f7d4:	movt	r1, #4
   1f7d8:	bl	120b4 <dcgettext@plt>
   1f7dc:	ldr	ip, [r5, #8]
   1f7e0:	mov	r2, r0
   1f7e4:	mov	r3, r8
   1f7e8:	mov	r1, r6
   1f7ec:	mov	r0, r6
   1f7f0:	str	ip, [sp]
   1f7f4:	str	r8, [sp, #4]
   1f7f8:	bl	121ec <error@plt>
   1f7fc:	mov	r0, r4
   1f800:	add	sp, sp, #8
   1f804:	ldrd	r4, [sp]
   1f808:	ldrd	r6, [sp, #8]
   1f80c:	ldr	r8, [sp, #16]
   1f810:	add	sp, sp, #20
   1f814:	pop	{pc}		; (ldr pc, [sp], #4)
   1f818:	cmp	r3, #0
   1f81c:	streq	r8, [r5, #8]
   1f820:	b	1f7fc <__assert_fail@plt+0xd208>
   1f824:	movw	r3, #40144	; 0x9cd0
   1f828:	movt	r3, #5
   1f82c:	ldr	r4, [pc, #24]	; 1f84c <__assert_fail@plt+0xd258>
   1f830:	ldr	r2, [r3, #8]
   1f834:	cmp	r2, #0
   1f838:	streq	r8, [r3, #8]
   1f83c:	b	1f7fc <__assert_fail@plt+0xd208>
   1f840:	mov	r4, r3
   1f844:	b	1f7fc <__assert_fail@plt+0xd208>
   1f848:	andeq	r5, r4, r4, lsr #32
   1f84c:	muleq	r4, r4, r5
   1f850:	movw	r0, #25788	; 0x64bc
   1f854:	movt	r0, #4
   1f858:	str	r4, [sp, #-8]!
   1f85c:	str	lr, [sp, #4]
   1f860:	bl	1f6d8 <__assert_fail@plt+0xd0e4>
   1f864:	bl	18014 <__assert_fail@plt+0x5a20>
   1f868:	mov	r3, r0
   1f86c:	mov	r2, #0
   1f870:	ldr	r4, [sp]
   1f874:	mov	r1, #0
   1f878:	add	sp, sp, #4
   1f87c:	mov	r0, #1
   1f880:	str	r1, [r3, #16]
   1f884:	str	r2, [r3, #28]
   1f888:	pop	{pc}		; (ldr pc, [sp], #4)
   1f88c:	b	1f850 <__assert_fail@plt+0xd25c>
   1f890:	cmp	r1, #0
   1f894:	beq	1f970 <__assert_fail@plt+0xd37c>
   1f898:	ldr	r3, [r2]
   1f89c:	strd	r4, [sp, #-16]!
   1f8a0:	ldr	r4, [r1, r3, lsl #2]
   1f8a4:	str	r6, [sp, #8]
   1f8a8:	str	lr, [sp, #12]
   1f8ac:	sub	sp, sp, #104	; 0x68
   1f8b0:	cmp	r4, #0
   1f8b4:	moveq	r0, r4
   1f8b8:	beq	1f8fc <__assert_fail@plt+0xd308>
   1f8bc:	movw	r6, #40556	; 0x9e6c
   1f8c0:	movt	r6, #5
   1f8c4:	ldrh	r1, [r6, #68]	; 0x44
   1f8c8:	add	r3, r3, #1
   1f8cc:	mov	r5, r0
   1f8d0:	str	r3, [r2]
   1f8d4:	cmp	r1, #1
   1f8d8:	bls	1f910 <__assert_fail@plt+0xd31c>
   1f8dc:	mov	r0, r4
   1f8e0:	bl	1b5cc <__assert_fail@plt+0x8fd8>
   1f8e4:	cmp	r0, #0
   1f8e8:	bne	1f910 <__assert_fail@plt+0xd31c>
   1f8ec:	ldr	r3, [r6, #44]	; 0x2c
   1f8f0:	tst	r3, #8
   1f8f4:	bne	1f950 <__assert_fail@plt+0xd35c>
   1f8f8:	bl	1f850 <__assert_fail@plt+0xd25c>
   1f8fc:	add	sp, sp, #104	; 0x68
   1f900:	ldrd	r4, [sp]
   1f904:	ldr	r6, [sp, #8]
   1f908:	add	sp, sp, #12
   1f90c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f910:	mov	r0, r5
   1f914:	mov	r1, r4
   1f918:	bl	17fa8 <__assert_fail@plt+0x59b4>
   1f91c:	mov	r5, r0
   1f920:	mov	r2, sp
   1f924:	movw	r1, #34572	; 0x870c
   1f928:	movt	r1, #4
   1f92c:	mov	r0, #3
   1f930:	str	r4, [r5, #40]	; 0x28
   1f934:	bl	12558 <__xstat64@plt>
   1f938:	cmp	r0, #0
   1f93c:	beq	1f978 <__assert_fail@plt+0xd384>
   1f940:	vldr	s15, [pc, #96]	; 1f9a8 <__assert_fail@plt+0xd3b4>
   1f944:	mov	r0, #1
   1f948:	vstr	s15, [r5, #28]
   1f94c:	b	1f8fc <__assert_fail@plt+0xd308>
   1f950:	movw	r3, #38216	; 0x9548
   1f954:	movt	r3, #5
   1f958:	mov	r2, r4
   1f95c:	movw	r1, #25796	; 0x64c4
   1f960:	movt	r1, #4
   1f964:	ldr	r0, [r3]
   1f968:	bl	1233c <fprintf@plt>
   1f96c:	b	1f8f8 <__assert_fail@plt+0xd304>
   1f970:	mov	r0, r1
   1f974:	bx	lr
   1f978:	mov	r0, sp
   1f97c:	movw	r1, #34572	; 0x870c
   1f980:	movt	r1, #4
   1f984:	bl	1b46c <__assert_fail@plt+0x8e78>
   1f988:	mov	r1, r0
   1f98c:	mov	r0, r4
   1f990:	bl	11f40 <strcmp@plt>
   1f994:	vldr	s15, [pc, #16]	; 1f9ac <__assert_fail@plt+0xd3b8>
   1f998:	cmp	r0, #0
   1f99c:	vldr	s14, [pc, #12]	; 1f9b0 <__assert_fail@plt+0xd3bc>
   1f9a0:	vmovne.f32	s15, s14
   1f9a4:	b	1f944 <__assert_fail@plt+0xd350>
   1f9a8:	svccc	0x00800000
   1f9ac:	svccc	0x00333333
   1f9b0:			; <UNDEFINED> instruction: 0x3e99999a
   1f9b4:	mov	r0, #0
   1f9b8:	bx	lr
   1f9bc:	strd	r4, [sp, #-16]!
   1f9c0:	mov	r4, r1
   1f9c4:	str	r6, [sp, #8]
   1f9c8:	mov	r6, r0
   1f9cc:	str	lr, [sp, #12]
   1f9d0:	sub	sp, sp, #16
   1f9d4:	bl	12228 <getenv@plt>
   1f9d8:	subs	r3, r0, #0
   1f9dc:	beq	1fa24 <__assert_fail@plt+0xd430>
   1f9e0:	mov	r5, #0
   1f9e4:	add	r3, sp, #12
   1f9e8:	mov	r2, #10
   1f9ec:	add	r1, sp, #8
   1f9f0:	str	r5, [sp]
   1f9f4:	bl	2dfac <__assert_fail@plt+0x1b9b8>
   1f9f8:	cmp	r0, r5
   1f9fc:	bne	1fa2c <__assert_fail@plt+0xd438>
   1fa00:	ldr	r0, [sp, #12]
   1fa04:	cmp	r0, r4
   1fa08:	movcs	r0, #0
   1fa0c:	movcc	r0, #1
   1fa10:	add	sp, sp, #16
   1fa14:	ldrd	r4, [sp]
   1fa18:	ldr	r6, [sp, #8]
   1fa1c:	add	sp, sp, #12
   1fa20:	pop	{pc}		; (ldr pc, [sp], #4)
   1fa24:	mov	r0, r3
   1fa28:	b	1fa10 <__assert_fail@plt+0xd41c>
   1fa2c:	bl	12348 <__errno_location@plt>
   1fa30:	ldr	r4, [r0]
   1fa34:	mov	r2, #5
   1fa38:	movw	r1, #26464	; 0x6760
   1fa3c:	movt	r1, #4
   1fa40:	mov	r0, r5
   1fa44:	bl	120b4 <dcgettext@plt>
   1fa48:	mov	r2, r0
   1fa4c:	mov	r3, r6
   1fa50:	mov	r0, #1
   1fa54:	mov	r1, r4
   1fa58:	bl	121ec <error@plt>
   1fa5c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1fa60:	strd	r6, [sp, #8]
   1fa64:	str	sl, [sp, #24]
   1fa68:	subs	sl, r2, #0
   1fa6c:	strd	r8, [sp, #16]
   1fa70:	str	lr, [sp, #28]
   1fa74:	ldr	r9, [sp, #36]	; 0x24
   1fa78:	ldr	r7, [sp, #40]	; 0x28
   1fa7c:	beq	1fccc <__assert_fail@plt+0xd6d8>
   1fa80:	movw	r6, #26552	; 0x67b8
   1fa84:	movt	r6, #4
   1fa88:	cmp	sl, r6
   1fa8c:	mov	r5, r0
   1fa90:	mov	r4, r1
   1fa94:	mov	r8, r3
   1fa98:	beq	1fb40 <__assert_fail@plt+0xd54c>
   1fa9c:	add	r2, r3, r9
   1faa0:	ldr	r3, [r1, #16]
   1faa4:	ldr	r1, [r0, #12]
   1faa8:	add	r2, r2, r3
   1faac:	cmp	r2, r1
   1fab0:	bls	1fc58 <__assert_fail@plt+0xd664>
   1fab4:	cmp	r7, #0
   1fab8:	bne	1fcec <__assert_fail@plt+0xd6f8>
   1fabc:	ldr	r2, [r4]
   1fac0:	ldr	r3, [r0, #28]
   1fac4:	cmp	r2, r3
   1fac8:	beq	1fcec <__assert_fail@plt+0xd6f8>
   1facc:	ldr	r3, [r0, #24]
   1fad0:	cmp	r3, #0
   1fad4:	bne	1fd10 <__assert_fail@plt+0xd71c>
   1fad8:	ldr	r3, [r0]
   1fadc:	cmp	r3, #0
   1fae0:	beq	1fafc <__assert_fail@plt+0xd508>
   1fae4:	ldr	r3, [r0, #36]	; 0x24
   1fae8:	cmp	r3, #0
   1faec:	bne	1fd10 <__assert_fail@plt+0xd71c>
   1faf0:	ldr	r3, [r0, #40]	; 0x28
   1faf4:	cmp	r3, #0
   1faf8:	bne	1fd10 <__assert_fail@plt+0xd71c>
   1fafc:	mov	r1, r4
   1fb00:	mov	r0, r5
   1fb04:	bl	1fef4 <__assert_fail@plt+0xd900>
   1fb08:	ldr	r2, [r4]
   1fb0c:	ldr	r3, [r5, #40]	; 0x28
   1fb10:	cmp	r3, #0
   1fb14:	beq	1fb28 <__assert_fail@plt+0xd534>
   1fb18:	ldr	r1, [r5, #28]
   1fb1c:	sub	r1, r2, r1
   1fb20:	cmp	r3, r1
   1fb24:	beq	1fb34 <__assert_fail@plt+0xd540>
   1fb28:	ldr	r3, [r5, #16]
   1fb2c:	cmp	r3, r2
   1fb30:	bne	1fb48 <__assert_fail@plt+0xd554>
   1fb34:	mov	r1, r4
   1fb38:	mov	r0, r5
   1fb3c:	bl	1fef4 <__assert_fail@plt+0xd900>
   1fb40:	cmp	r7, #0
   1fb44:	bne	1fb50 <__assert_fail@plt+0xd55c>
   1fb48:	mov	r3, #1
   1fb4c:	str	r3, [r4, #28]
   1fb50:	ldr	r3, [r4]
   1fb54:	ldrd	r0, [r4, #4]
   1fb58:	cmp	r3, r1
   1fb5c:	bcs	1fc34 <__assert_fail@plt+0xd640>
   1fb60:	cmp	sl, r6
   1fb64:	add	r1, r0, r3, lsl #2
   1fb68:	add	r2, r3, #1
   1fb6c:	moveq	r1, #0
   1fb70:	streq	r2, [r4]
   1fb74:	streq	r1, [r0, r3, lsl #2]
   1fb78:	beq	1fc14 <__assert_fail@plt+0xd620>
   1fb7c:	ldr	r3, [r4, #16]
   1fb80:	str	r2, [r4]
   1fb84:	ldr	r2, [r4, #12]
   1fb88:	ldr	r0, [sp, #32]
   1fb8c:	add	r2, r2, r3
   1fb90:	cmp	r0, #0
   1fb94:	str	r2, [r1]
   1fb98:	beq	1fbb8 <__assert_fail@plt+0xd5c4>
   1fb9c:	ldr	r0, [r4, #12]
   1fba0:	ldr	r1, [sp, #32]
   1fba4:	add	r0, r0, r3
   1fba8:	bl	121b0 <strcpy@plt>
   1fbac:	ldr	r3, [r4, #16]
   1fbb0:	add	r3, r9, r3
   1fbb4:	str	r3, [r4, #16]
   1fbb8:	ldr	r0, [r4, #12]
   1fbbc:	mov	r1, sl
   1fbc0:	add	r0, r0, r3
   1fbc4:	bl	121b0 <strcpy@plt>
   1fbc8:	cmp	r7, #0
   1fbcc:	ldr	r2, [r4]
   1fbd0:	ldr	r3, [r4, #16]
   1fbd4:	add	r8, r8, r3
   1fbd8:	str	r8, [r4, #16]
   1fbdc:	bne	1fc88 <__assert_fail@plt+0xd694>
   1fbe0:	ldr	r3, [r5, #40]	; 0x28
   1fbe4:	cmp	r3, #0
   1fbe8:	beq	1fbfc <__assert_fail@plt+0xd608>
   1fbec:	ldr	r1, [r5, #28]
   1fbf0:	sub	r1, r2, r1
   1fbf4:	cmp	r3, r1
   1fbf8:	beq	1fc08 <__assert_fail@plt+0xd614>
   1fbfc:	ldr	r3, [r5, #16]
   1fc00:	cmp	r2, r3
   1fc04:	bne	1fc1c <__assert_fail@plt+0xd628>
   1fc08:	mov	r0, r5
   1fc0c:	mov	r1, r4
   1fc10:	bl	1fef4 <__assert_fail@plt+0xd900>
   1fc14:	cmp	r7, #0
   1fc18:	bne	1fca4 <__assert_fail@plt+0xd6b0>
   1fc1c:	ldrd	r4, [sp]
   1fc20:	ldrd	r6, [sp, #8]
   1fc24:	ldrd	r8, [sp, #16]
   1fc28:	ldr	sl, [sp, #24]
   1fc2c:	add	sp, sp, #28
   1fc30:	pop	{pc}		; (ldr pc, [sp], #4)
   1fc34:	cmp	r0, #0
   1fc38:	beq	1fcb0 <__assert_fail@plt+0xd6bc>
   1fc3c:	lsl	r3, r1, #1
   1fc40:	lsl	r1, r1, #3
   1fc44:	str	r3, [r4, #8]
   1fc48:	bl	2da98 <__assert_fail@plt+0x1b4a4>
   1fc4c:	str	r0, [r4, #4]
   1fc50:	ldr	r3, [r4]
   1fc54:	b	1fb60 <__assert_fail@plt+0xd56c>
   1fc58:	cmp	r7, #0
   1fc5c:	ldr	r2, [r4]
   1fc60:	beq	1fb0c <__assert_fail@plt+0xd518>
   1fc64:	ldr	r1, [r0, #16]
   1fc68:	cmp	r2, r1
   1fc6c:	beq	1fb34 <__assert_fail@plt+0xd540>
   1fc70:	ldrd	r0, [r4, #4]
   1fc74:	cmp	r2, r1
   1fc78:	bcs	1fc34 <__assert_fail@plt+0xd640>
   1fc7c:	add	r1, r0, r2, lsl #2
   1fc80:	add	r2, r2, #1
   1fc84:	b	1fb80 <__assert_fail@plt+0xd58c>
   1fc88:	ldr	r3, [r5, #16]
   1fc8c:	cmp	r2, r3
   1fc90:	bne	1fca8 <__assert_fail@plt+0xd6b4>
   1fc94:	mov	r0, r5
   1fc98:	mov	r1, r4
   1fc9c:	bl	1fef4 <__assert_fail@plt+0xd900>
   1fca0:	b	1fc14 <__assert_fail@plt+0xd620>
   1fca4:	ldr	r8, [r4, #16]
   1fca8:	str	r8, [r4, #20]
   1fcac:	b	1fc1c <__assert_fail@plt+0xd628>
   1fcb0:	mov	r3, #64	; 0x40
   1fcb4:	mov	r0, #256	; 0x100
   1fcb8:	str	r3, [r4, #8]
   1fcbc:	bl	2da2c <__assert_fail@plt+0x1b438>
   1fcc0:	str	r0, [r4, #4]
   1fcc4:	ldr	r3, [r4]
   1fcc8:	b	1fb60 <__assert_fail@plt+0xd56c>
   1fccc:	movw	r3, #26392	; 0x6718
   1fcd0:	movt	r3, #4
   1fcd4:	movw	r1, #26528	; 0x67a0
   1fcd8:	movt	r1, #4
   1fcdc:	movw	r0, #26540	; 0x67ac
   1fce0:	movt	r0, #4
   1fce4:	movw	r2, #341	; 0x155
   1fce8:	bl	125f4 <__assert_fail@plt>
   1fcec:	movw	r1, #26564	; 0x67c4
   1fcf0:	movt	r1, #4
   1fcf4:	mov	r2, #5
   1fcf8:	mov	r0, #0
   1fcfc:	bl	120b4 <dcgettext@plt>
   1fd00:	mov	r2, r0
   1fd04:	mov	r1, #0
   1fd08:	mov	r0, #1
   1fd0c:	bl	121ec <error@plt>
   1fd10:	movw	r1, #26624	; 0x6800
   1fd14:	movt	r1, #4
   1fd18:	b	1fcf4 <__assert_fail@plt+0xd700>
   1fd1c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1fd20:	movw	r5, #40156	; 0x9cdc
   1fd24:	movt	r5, #5
   1fd28:	strd	r6, [sp, #8]
   1fd2c:	mov	r7, r3
   1fd30:	mov	r4, r2
   1fd34:	strd	r8, [sp, #16]
   1fd38:	mov	r9, r0
   1fd3c:	strd	sl, [sp, #24]
   1fd40:	str	lr, [sp, #32]
   1fd44:	sub	sp, sp, #36	; 0x24
   1fd48:	ldr	r0, [r0, #12]
   1fd4c:	str	r1, [sp, #24]
   1fd50:	ldr	r3, [sp, #76]	; 0x4c
   1fd54:	ldr	r1, [r5]
   1fd58:	sub	r6, r0, #1
   1fd5c:	ldr	ip, [sp, #72]	; 0x48
   1fd60:	cmp	r1, #0
   1fd64:	str	r3, [sp, #16]
   1fd68:	ldr	r3, [sp, #80]	; 0x50
   1fd6c:	str	ip, [sp, #8]
   1fd70:	str	r3, [sp, #12]
   1fd74:	ldr	r3, [sp, #84]	; 0x54
   1fd78:	str	r1, [sp, #20]
   1fd7c:	str	r3, [sp, #4]
   1fd80:	ldr	r3, [sp, #88]	; 0x58
   1fd84:	str	r3, [sp, #28]
   1fd88:	beq	1fee0 <__assert_fail@plt+0xd8ec>
   1fd8c:	ldr	r3, [sp, #4]
   1fd90:	ldr	r2, [sp, #16]
   1fd94:	ldr	r5, [sp, #20]
   1fd98:	add	sl, r3, r2
   1fd9c:	b	1fe1c <__assert_fail@plt+0xd828>
   1fda0:	sub	fp, r8, r4
   1fda4:	cmp	r6, fp
   1fda8:	bls	1feb0 <__assert_fail@plt+0xd8bc>
   1fdac:	mov	r0, r5
   1fdb0:	mov	r1, r4
   1fdb4:	sub	r6, r6, fp
   1fdb8:	mov	r2, fp
   1fdbc:	bl	12390 <strncpy@plt>
   1fdc0:	cmp	sl, r6
   1fdc4:	add	r5, r5, fp
   1fdc8:	bcs	1feac <__assert_fail@plt+0xd8b8>
   1fdcc:	ldr	r1, [sp, #8]
   1fdd0:	sub	r6, r6, sl
   1fdd4:	cmp	r1, #0
   1fdd8:	beq	1fdec <__assert_fail@plt+0xd7f8>
   1fddc:	ldr	r3, [sp, #16]
   1fde0:	mov	r0, r5
   1fde4:	add	r5, r5, r3
   1fde8:	bl	121b0 <strcpy@plt>
   1fdec:	mov	r0, r5
   1fdf0:	ldr	r1, [sp, #12]
   1fdf4:	bl	121b0 <strcpy@plt>
   1fdf8:	ldr	r4, [r9, #20]
   1fdfc:	ldr	r3, [sp, #4]
   1fe00:	sub	r7, r7, r4
   1fe04:	add	r4, r8, r4
   1fe08:	sub	r7, r7, fp
   1fe0c:	add	r5, r5, r3
   1fe10:	ldrb	r3, [r4]
   1fe14:	cmp	r3, #0
   1fe18:	beq	1fe64 <__assert_fail@plt+0xd870>
   1fe1c:	mov	r0, r4
   1fe20:	ldr	r1, [r9, #24]
   1fe24:	bl	253dc <__assert_fail@plt+0x12de8>
   1fe28:	subs	r8, r0, #0
   1fe2c:	bne	1fda0 <__assert_fail@plt+0xd7ac>
   1fe30:	cmp	r7, r6
   1fe34:	bcs	1feb0 <__assert_fail@plt+0xd8bc>
   1fe38:	mov	r1, r4
   1fe3c:	mov	r0, r5
   1fe40:	mov	r2, r7
   1fe44:	add	r4, r4, r7
   1fe48:	bl	12390 <strncpy@plt>
   1fe4c:	ldrb	r3, [r4]
   1fe50:	sub	r6, r6, r7
   1fe54:	add	r5, r5, r7
   1fe58:	mov	r7, r8
   1fe5c:	cmp	r3, #0
   1fe60:	bne	1fe1c <__assert_fail@plt+0xd828>
   1fe64:	mov	ip, #0
   1fe68:	ldr	r2, [sp, #20]
   1fe6c:	mov	r0, r9
   1fe70:	strb	ip, [r5], #1
   1fe74:	str	ip, [sp, #72]	; 0x48
   1fe78:	str	ip, [sp, #76]	; 0x4c
   1fe7c:	ldr	r1, [sp, #24]
   1fe80:	sub	r3, r5, r2
   1fe84:	ldr	ip, [sp, #28]
   1fe88:	str	ip, [sp, #80]	; 0x50
   1fe8c:	add	sp, sp, #36	; 0x24
   1fe90:	ldrd	r4, [sp]
   1fe94:	ldrd	r6, [sp, #8]
   1fe98:	ldrd	r8, [sp, #16]
   1fe9c:	ldrd	sl, [sp, #24]
   1fea0:	ldr	lr, [sp, #32]
   1fea4:	add	sp, sp, #36	; 0x24
   1fea8:	b	1fa5c <__assert_fail@plt+0xd468>
   1feac:	mov	r4, r8
   1feb0:	ldrb	r3, [r4]
   1feb4:	cmp	r3, #0
   1feb8:	beq	1fe64 <__assert_fail@plt+0xd870>
   1febc:	mov	r2, #5
   1fec0:	movw	r1, #26648	; 0x6818
   1fec4:	movt	r1, #4
   1fec8:	mov	r0, #0
   1fecc:	bl	120b4 <dcgettext@plt>
   1fed0:	mov	r2, r0
   1fed4:	mov	r1, #0
   1fed8:	mov	r0, #1
   1fedc:	bl	121ec <error@plt>
   1fee0:	add	r0, r0, #1
   1fee4:	bl	2da2c <__assert_fail@plt+0x1b438>
   1fee8:	str	r0, [r5]
   1feec:	str	r0, [sp, #20]
   1fef0:	b	1fd8c <__assert_fail@plt+0xd798>
   1fef4:	mov	ip, #0
   1fef8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1fefc:	movw	r2, #26552	; 0x67b8
   1ff00:	movt	r2, #4
   1ff04:	strd	r6, [sp, #8]
   1ff08:	mov	r3, ip
   1ff0c:	strd	r8, [sp, #16]
   1ff10:	mov	r6, r1
   1ff14:	mov	r8, r0
   1ff18:	strd	sl, [sp, #24]
   1ff1c:	str	lr, [sp, #32]
   1ff20:	sub	sp, sp, #20
   1ff24:	str	ip, [sp]
   1ff28:	str	ip, [sp, #4]
   1ff2c:	str	ip, [sp, #8]
   1ff30:	bl	1fa5c <__assert_fail@plt+0xd468>
   1ff34:	ldr	r3, [r6]
   1ff38:	cmp	r3, #0
   1ff3c:	beq	201c8 <__assert_fail@plt+0xdbd4>
   1ff40:	ldr	r2, [r6, #4]
   1ff44:	sub	r3, r3, #-1073741823	; 0xc0000001
   1ff48:	lsl	r0, r3, #2
   1ff4c:	ldr	r9, [r2, r3, lsl #2]
   1ff50:	cmp	r9, #0
   1ff54:	bne	201ac <__assert_fail@plt+0xdbb8>
   1ff58:	add	r0, r0, #8
   1ff5c:	mov	sl, r9
   1ff60:	bl	2da2c <__assert_fail@plt+0x1b438>
   1ff64:	ldr	r1, [r6]
   1ff68:	mov	r7, r0
   1ff6c:	ldr	r3, [r8, #28]
   1ff70:	mov	r4, r1
   1ff74:	cmp	r3, #0
   1ff78:	beq	20168 <__assert_fail@plt+0xdb74>
   1ff7c:	ldr	r2, [r6, #4]
   1ff80:	sub	r0, r7, #4
   1ff84:	add	lr, r2, r3, lsl #2
   1ff88:	ldr	ip, [r2], #4
   1ff8c:	cmp	lr, r2
   1ff90:	str	ip, [r0, #4]!
   1ff94:	bne	1ff88 <__assert_fail@plt+0xd994>
   1ff98:	add	ip, r9, r3
   1ff9c:	cmp	r4, r3
   1ffa0:	movls	r2, #0
   1ffa4:	movhi	r2, #1
   1ffa8:	cmp	ip, r1
   1ffac:	movcs	r2, #0
   1ffb0:	cmp	r2, #0
   1ffb4:	moveq	r5, r3
   1ffb8:	beq	1fff4 <__assert_fail@plt+0xda00>
   1ffbc:	ldr	r2, [r6, #4]
   1ffc0:	add	lr, r7, r3, lsl #2
   1ffc4:	mov	r5, r3
   1ffc8:	add	r2, r2, ip, lsl #2
   1ffcc:	ldr	fp, [r2], #4
   1ffd0:	add	r5, r5, #1
   1ffd4:	add	r0, r5, ip
   1ffd8:	sub	r0, r0, r3
   1ffdc:	cmp	r1, r0
   1ffe0:	cmphi	r4, r5
   1ffe4:	str	fp, [lr], #4
   1ffe8:	bhi	1ffcc <__assert_fail@plt+0xd9d8>
   1ffec:	cmp	r5, r3
   1fff0:	bcc	20170 <__assert_fail@plt+0xdb7c>
   1fff4:	mov	r3, r7
   1fff8:	mov	r2, r5
   1fffc:	str	sl, [r7, r5, lsl #2]
   20000:	mov	r0, r8
   20004:	ldr	r1, [r6, #24]
   20008:	ldr	fp, [r8, #32]
   2000c:	blx	fp
   20010:	subs	fp, r0, #0
   20014:	bne	200ec <__assert_fail@plt+0xdaf8>
   20018:	ldr	r2, [r8, #28]
   2001c:	add	ip, r2, #1
   20020:	cmp	ip, r4
   20024:	bcs	2018c <__assert_fail@plt+0xdb98>
   20028:	ldr	r1, [r6, #40]	; 0x28
   2002c:	clz	r3, r1
   20030:	lsr	r3, r3, #5
   20034:	cmp	r4, r1
   20038:	orrcc	r3, r3, #1
   2003c:	ldr	r1, [r6, #36]	; 0x24
   20040:	cmp	r3, #0
   20044:	moveq	r3, r2
   20048:	strne	r4, [r6, #40]	; 0x28
   2004c:	ldrne	r3, [r8, #28]
   20050:	cmp	r1, #0
   20054:	beq	200e4 <__assert_fail@plt+0xdaf0>
   20058:	ldr	r0, [r6, #40]	; 0x28
   2005c:	cmp	r1, r0
   20060:	bcs	200e4 <__assert_fail@plt+0xdaf0>
   20064:	sub	r1, r0, r1
   20068:	cmp	r1, #1
   2006c:	subne	r4, r4, r1, lsr #1
   20070:	subeq	r4, r4, #1
   20074:	cmp	r2, #0
   20078:	beq	20088 <__assert_fail@plt+0xda94>
   2007c:	cmp	ip, r4
   20080:	bcc	20090 <__assert_fail@plt+0xda9c>
   20084:	mov	r4, ip
   20088:	cmp	r4, #0
   2008c:	moveq	r4, #1
   20090:	ldr	r1, [r6]
   20094:	add	r2, r9, #1
   20098:	sub	r0, r1, r3
   2009c:	cmp	r2, r0
   200a0:	bcc	1ff74 <__assert_fail@plt+0xd980>
   200a4:	mov	r0, r7
   200a8:	bl	2f668 <__assert_fail@plt+0x1d074>
   200ac:	ldr	r2, [r6, #20]
   200b0:	mov	r0, #0
   200b4:	mvn	r1, #0
   200b8:	ldr	r3, [r8, #28]
   200bc:	strd	r0, [r6, #28]
   200c0:	str	r3, [r6]
   200c4:	str	r2, [r6, #16]
   200c8:	add	sp, sp, #20
   200cc:	ldrd	r4, [sp]
   200d0:	ldrd	r6, [sp, #8]
   200d4:	ldrd	r8, [sp, #16]
   200d8:	ldrd	sl, [sp, #24]
   200dc:	add	sp, sp, #32
   200e0:	pop	{pc}		; (ldr pc, [sp], #4)
   200e4:	lsr	r4, r4, #1
   200e8:	b	20074 <__assert_fail@plt+0xda80>
   200ec:	ldr	r1, [r6, #36]	; 0x24
   200f0:	ldr	r2, [r8, #28]
   200f4:	cmp	r4, r1
   200f8:	movhi	r1, r4
   200fc:	strhi	r4, [r6, #36]	; 0x24
   20100:	movls	r3, r2
   20104:	ldrhi	r3, [r8, #28]
   20108:	cmp	r1, #0
   2010c:	beq	20154 <__assert_fail@plt+0xdb60>
   20110:	ldr	r0, [r6, #40]	; 0x28
   20114:	cmp	r0, r1
   20118:	bls	20154 <__assert_fail@plt+0xdb60>
   2011c:	sub	r1, r0, r1
   20120:	cmp	r1, #1
   20124:	addne	r4, r4, r1, lsr #1
   20128:	addeq	r4, r4, #1
   2012c:	cmp	r2, #0
   20130:	beq	20140 <__assert_fail@plt+0xdb4c>
   20134:	add	r2, r2, #1
   20138:	cmp	r4, r2
   2013c:	movcc	r4, r2
   20140:	cmp	r4, #0
   20144:	moveq	r4, #1
   20148:	add	r9, r9, r5
   2014c:	sub	r9, r9, r3
   20150:	b	20090 <__assert_fail@plt+0xda9c>
   20154:	cmn	r4, #1
   20158:	addne	r4, r4, #1
   2015c:	cmp	r2, #0
   20160:	bne	20134 <__assert_fail@plt+0xdb40>
   20164:	b	20148 <__assert_fail@plt+0xdb54>
   20168:	mov	ip, r9
   2016c:	b	1ff9c <__assert_fail@plt+0xd9a8>
   20170:	movw	r1, #26528	; 0x67a0
   20174:	movt	r1, #4
   20178:	ldr	r3, [pc, #100]	; 201e4 <__assert_fail@plt+0xdbf0>
   2017c:	movw	r0, #26732	; 0x686c
   20180:	movt	r0, #4
   20184:	mov	r2, #242	; 0xf2
   20188:	bl	125f4 <__assert_fail@plt>
   2018c:	mov	r2, #5
   20190:	movw	r1, #26764	; 0x688c
   20194:	movt	r1, #4
   20198:	bl	120b4 <dcgettext@plt>
   2019c:	mov	r2, r0
   201a0:	mov	r1, fp
   201a4:	mov	r0, #1
   201a8:	bl	121ec <error@plt>
   201ac:	movw	r1, #26528	; 0x67a0
   201b0:	movt	r1, #4
   201b4:	ldr	r3, [pc, #44]	; 201e8 <__assert_fail@plt+0xdbf4>
   201b8:	movw	r0, #26688	; 0x6840
   201bc:	movt	r0, #4
   201c0:	movw	r2, #262	; 0x106
   201c4:	bl	125f4 <__assert_fail@plt>
   201c8:	movw	r1, #26528	; 0x67a0
   201cc:	movt	r1, #4
   201d0:	ldr	r3, [pc, #16]	; 201e8 <__assert_fail@plt+0xdbf4>
   201d4:	movw	r0, #26668	; 0x682c
   201d8:	movt	r0, #4
   201dc:	movw	r2, #261	; 0x105
   201e0:	bl	125f4 <__assert_fail@plt>
   201e4:	andeq	r6, r4, r0, lsr r7
   201e8:	andeq	r6, r4, r4, lsr #14
   201ec:	mov	r0, #0
   201f0:	str	r4, [sp, #-8]!
   201f4:	str	lr, [sp, #4]
   201f8:	bl	120cc <sysconf@plt>
   201fc:	cmp	r0, #0
   20200:	ldr	r4, [sp]
   20204:	add	sp, sp, #4
   20208:	mvnle	r0, #-2147483648	; 0x80000000
   2020c:	pop	{pc}		; (ldr pc, [sp], #4)
   20210:	movw	r3, #38204	; 0x953c
   20214:	movt	r3, #5
   20218:	strd	r4, [sp, #-16]!
   2021c:	ldr	r4, [r3]
   20220:	ldr	r3, [r4]
   20224:	str	r6, [sp, #8]
   20228:	str	lr, [sp, #12]
   2022c:	cmp	r3, #0
   20230:	beq	20268 <__assert_fail@plt+0xdc74>
   20234:	mov	r5, #0
   20238:	mov	r0, r3
   2023c:	bl	12300 <strlen@plt>
   20240:	ldr	r3, [r4, #4]!
   20244:	add	r0, r0, #1
   20248:	add	r5, r5, r0
   2024c:	cmp	r3, #0
   20250:	bne	20238 <__assert_fail@plt+0xdc44>
   20254:	mov	r0, r5
   20258:	ldrd	r4, [sp]
   2025c:	ldr	r6, [sp, #8]
   20260:	add	sp, sp, #12
   20264:	pop	{pc}		; (ldr pc, [sp], #4)
   20268:	mov	r5, r3
   2026c:	b	20254 <__assert_fail@plt+0xdc60>
   20270:	strd	r4, [sp, #-16]!
   20274:	mov	r4, r0
   20278:	str	r6, [sp, #8]
   2027c:	mov	r6, r1
   20280:	str	lr, [sp, #12]
   20284:	bl	20210 <__assert_fail@plt+0xdc1c>
   20288:	mov	r3, #4096	; 0x1000
   2028c:	mov	r5, r0
   20290:	mov	r0, #0
   20294:	str	r3, [r4, #8]
   20298:	bl	120cc <sysconf@plt>
   2029c:	cmp	r0, #0
   202a0:	mov	r3, #0
   202a4:	mvnle	r0, #-2147483648	; 0x80000000
   202a8:	cmp	r5, r0
   202ac:	str	r3, [r4]
   202b0:	str	r0, [r4, #4]
   202b4:	bhi	20314 <__assert_fail@plt+0xdd20>
   202b8:	add	r5, r5, r6
   202bc:	cmp	r5, r0
   202c0:	bcs	20328 <__assert_fail@plt+0xdd34>
   202c4:	sub	r0, r0, r5
   202c8:	lsr	r2, r0, #2
   202cc:	str	r0, [r4, #4]
   202d0:	sub	r2, r2, #2
   202d4:	cmp	r2, r3
   202d8:	str	r2, [r4, #16]
   202dc:	beq	2033c <__assert_fail@plt+0xdd48>
   202e0:	movw	r2, #63924	; 0xf9b4
   202e4:	movt	r2, #1
   202e8:	str	r0, [r4, #12]
   202ec:	str	r3, [r4, #20]
   202f0:	mov	r0, r3
   202f4:	str	r3, [r4, #24]
   202f8:	str	r3, [r4, #28]
   202fc:	strd	r2, [r4, #32]
   20300:	str	r3, [r4, #40]	; 0x28
   20304:	ldrd	r4, [sp]
   20308:	ldr	r6, [sp, #8]
   2030c:	add	sp, sp, #12
   20310:	pop	{pc}		; (ldr pc, [sp], #4)
   20314:	ldrd	r4, [sp]
   20318:	mov	r0, #1
   2031c:	ldr	r6, [sp, #8]
   20320:	add	sp, sp, #12
   20324:	pop	{pc}		; (ldr pc, [sp], #4)
   20328:	ldrd	r4, [sp]
   2032c:	mov	r0, #2
   20330:	ldr	r6, [sp, #8]
   20334:	add	sp, sp, #12
   20338:	pop	{pc}		; (ldr pc, [sp], #4)
   2033c:	movw	r1, #26528	; 0x67a0
   20340:	movt	r1, #4
   20344:	ldr	r3, [pc, #12]	; 20358 <__assert_fail@plt+0xdd64>
   20348:	movw	r0, #26816	; 0x68c0
   2034c:	movt	r0, #4
   20350:	movw	r2, #518	; 0x206
   20354:	bl	125f4 <__assert_fail@plt>
   20358:	andeq	r6, r4, ip, lsr r7
   2035c:	ldr	r3, [r0, #4]
   20360:	cmp	r3, #131072	; 0x20000
   20364:	bcc	20374 <__assert_fail@plt+0xdd80>
   20368:	ldr	r3, [r0, #8]
   2036c:	cmp	r3, #131072	; 0x20000
   20370:	movls	r3, #131072	; 0x20000
   20374:	str	r3, [r0, #12]
   20378:	bx	lr
   2037c:	ldr	r0, [r0, #12]
   20380:	movw	r3, #63487	; 0xf7ff
   20384:	movt	r3, #32767	; 0x7fff
   20388:	strd	r4, [sp, #-16]!
   2038c:	mov	r5, #0
   20390:	str	r6, [sp, #8]
   20394:	str	lr, [sp, #12]
   20398:	str	r5, [r1]
   2039c:	cmp	r0, r3
   203a0:	str	r5, [r1, #4]
   203a4:	str	r5, [r1, #8]
   203a8:	str	r5, [r1, #16]
   203ac:	str	r5, [r1, #36]	; 0x24
   203b0:	str	r5, [r1, #40]	; 0x28
   203b4:	bhi	203f4 <__assert_fail@plt+0xde00>
   203b8:	add	r0, r0, #1
   203bc:	mov	r4, r1
   203c0:	mov	r6, r2
   203c4:	bl	2da2c <__assert_fail@plt+0x1b438>
   203c8:	mvn	r3, #0
   203cc:	str	r0, [r4, #12]
   203d0:	str	r5, [r4, #16]
   203d4:	str	r5, [r4, #20]
   203d8:	str	r6, [r4, #24]
   203dc:	str	r5, [r4, #28]
   203e0:	str	r3, [r4, #32]
   203e4:	ldrd	r4, [sp]
   203e8:	ldr	r6, [sp, #8]
   203ec:	add	sp, sp, #12
   203f0:	pop	{pc}		; (ldr pc, [sp], #4)
   203f4:	movw	r1, #26528	; 0x67a0
   203f8:	movt	r1, #4
   203fc:	ldr	r3, [pc, #12]	; 20410 <__assert_fail@plt+0xde1c>
   20400:	movw	r0, #26840	; 0x68d8
   20404:	movt	r0, #4
   20408:	mov	r2, #572	; 0x23c
   2040c:	bl	125f4 <__assert_fail@plt>
   20410:	andeq	r6, r4, r0, asr r7
   20414:	ldr	r3, [r1, #20]
   20418:	mov	ip, #0
   2041c:	ldr	r2, [r0, #28]
   20420:	mvn	r0, #0
   20424:	str	ip, [r1, #28]
   20428:	str	r0, [r1, #32]
   2042c:	str	r2, [r1]
   20430:	str	r3, [r1, #16]
   20434:	bx	lr
   20438:	ldr	r3, [r0]
   2043c:	strd	r4, [sp, #-16]!
   20440:	str	r6, [sp, #8]
   20444:	str	lr, [sp, #12]
   20448:	cmp	r3, #0
   2044c:	beq	204cc <__assert_fail@plt+0xded8>
   20450:	mov	r4, #0
   20454:	mov	r5, r0
   20458:	mov	r6, r4
   2045c:	mov	r0, r3
   20460:	add	r4, r4, #1
   20464:	bl	12300 <strlen@plt>
   20468:	ldr	r3, [r5, #4]!
   2046c:	add	r6, r6, r0
   20470:	cmp	r3, #0
   20474:	bne	2045c <__assert_fail@plt+0xde68>
   20478:	mov	r1, r4
   2047c:	movw	r0, #26876	; 0x68fc
   20480:	movt	r0, #4
   20484:	bl	1f9bc <__assert_fail@plt+0xd3c8>
   20488:	cmp	r0, #0
   2048c:	movne	r0, #1
   20490:	beq	204a4 <__assert_fail@plt+0xdeb0>
   20494:	ldrd	r4, [sp]
   20498:	ldr	r6, [sp, #8]
   2049c:	add	sp, sp, #12
   204a0:	pop	{pc}		; (ldr pc, [sp], #4)
   204a4:	mov	r1, r6
   204a8:	movw	r0, #26916	; 0x6924
   204ac:	movt	r0, #4
   204b0:	bl	1f9bc <__assert_fail@plt+0xd3c8>
   204b4:	adds	r0, r0, #0
   204b8:	ldrd	r4, [sp]
   204bc:	movne	r0, #1
   204c0:	ldr	r6, [sp, #8]
   204c4:	add	sp, sp, #12
   204c8:	pop	{pc}		; (ldr pc, [sp], #4)
   204cc:	mov	r4, r3
   204d0:	mov	r6, r3
   204d4:	b	20478 <__assert_fail@plt+0xde84>
   204d8:	strd	r4, [sp, #-16]!
   204dc:	mov	r4, r1
   204e0:	mov	r5, r2
   204e4:	str	r6, [sp, #8]
   204e8:	mov	r6, r0
   204ec:	str	lr, [sp, #12]
   204f0:	sub	sp, sp, #8
   204f4:	mov	r0, sp
   204f8:	bl	2cc2c <__assert_fail@plt+0x1a638>
   204fc:	cmp	r0, #0
   20500:	bne	20590 <__assert_fail@plt+0xdf9c>
   20504:	mov	r0, r6
   20508:	bl	2cca0 <__assert_fail@plt+0x1a6ac>
   2050c:	cmp	r0, #0
   20510:	bne	20584 <__assert_fail@plt+0xdf90>
   20514:	mov	r0, r5
   20518:	blx	r4
   2051c:	subs	r4, r0, #0
   20520:	blt	20554 <__assert_fail@plt+0xdf60>
   20524:	mov	r0, sp
   20528:	bl	2cca0 <__assert_fail@plt+0x1a6ac>
   2052c:	cmp	r0, #0
   20530:	bne	20584 <__assert_fail@plt+0xdf90>
   20534:	mov	r0, sp
   20538:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   2053c:	mov	r0, r4
   20540:	add	sp, sp, #8
   20544:	ldrd	r4, [sp]
   20548:	ldr	r6, [sp, #8]
   2054c:	add	sp, sp, #12
   20550:	pop	{pc}		; (ldr pc, [sp], #4)
   20554:	bl	12348 <__errno_location@plt>
   20558:	mov	r5, r0
   2055c:	mov	r0, sp
   20560:	ldr	r6, [r5]
   20564:	bl	2cca0 <__assert_fail@plt+0x1a6ac>
   20568:	cmp	r0, #0
   2056c:	bne	20584 <__assert_fail@plt+0xdf90>
   20570:	mov	r0, sp
   20574:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   20578:	cmp	r6, #0
   2057c:	strne	r6, [r5]
   20580:	b	2053c <__assert_fail@plt+0xdf48>
   20584:	bl	12348 <__errno_location@plt>
   20588:	ldr	r0, [r0]
   2058c:	bl	26888 <__assert_fail@plt+0x14294>
   20590:	bl	12348 <__errno_location@plt>
   20594:	ldr	r0, [r0]
   20598:	bl	26848 <__assert_fail@plt+0x14254>
   2059c:	cmn	r0, #100	; 0x64
   205a0:	strd	r4, [sp, #-16]!
   205a4:	mov	r5, r1
   205a8:	str	r6, [sp, #8]
   205ac:	mov	r6, r2
   205b0:	str	lr, [sp, #12]
   205b4:	sub	sp, sp, #8
   205b8:	beq	20650 <__assert_fail@plt+0xe05c>
   205bc:	mov	r4, r0
   205c0:	mov	r0, sp
   205c4:	bl	2cc2c <__assert_fail@plt+0x1a638>
   205c8:	cmp	r0, #0
   205cc:	bne	20680 <__assert_fail@plt+0xe08c>
   205d0:	mov	r0, r4
   205d4:	bl	124f8 <fchdir@plt>
   205d8:	cmp	r0, #0
   205dc:	bne	20660 <__assert_fail@plt+0xe06c>
   205e0:	mov	r0, r6
   205e4:	blx	r5
   205e8:	subs	r4, r0, #0
   205ec:	blt	20620 <__assert_fail@plt+0xe02c>
   205f0:	mov	r0, sp
   205f4:	bl	2cca0 <__assert_fail@plt+0x1a6ac>
   205f8:	cmp	r0, #0
   205fc:	bne	2068c <__assert_fail@plt+0xe098>
   20600:	mov	r0, sp
   20604:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   20608:	mov	r0, r4
   2060c:	add	sp, sp, #8
   20610:	ldrd	r4, [sp]
   20614:	ldr	r6, [sp, #8]
   20618:	add	sp, sp, #12
   2061c:	pop	{pc}		; (ldr pc, [sp], #4)
   20620:	bl	12348 <__errno_location@plt>
   20624:	mov	r5, r0
   20628:	mov	r0, sp
   2062c:	ldr	r6, [r5]
   20630:	bl	2cca0 <__assert_fail@plt+0x1a6ac>
   20634:	cmp	r0, #0
   20638:	bne	2068c <__assert_fail@plt+0xe098>
   2063c:	mov	r0, sp
   20640:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   20644:	cmp	r6, #0
   20648:	strne	r6, [r5]
   2064c:	b	20608 <__assert_fail@plt+0xe014>
   20650:	mov	r0, r2
   20654:	blx	r1
   20658:	mov	r4, r0
   2065c:	b	20608 <__assert_fail@plt+0xe014>
   20660:	bl	12348 <__errno_location@plt>
   20664:	mov	r5, r0
   20668:	mov	r0, sp
   2066c:	ldr	r6, [r5]
   20670:	mvn	r4, #0
   20674:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   20678:	str	r6, [r5]
   2067c:	b	20608 <__assert_fail@plt+0xe014>
   20680:	bl	12348 <__errno_location@plt>
   20684:	ldr	r0, [r0]
   20688:	bl	26848 <__assert_fail@plt+0x14254>
   2068c:	bl	12348 <__errno_location@plt>
   20690:	ldr	r0, [r0]
   20694:	bl	26888 <__assert_fail@plt+0x14294>
   20698:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2069c:	mov	r4, r1
   206a0:	mov	r5, r0
   206a4:	strd	r6, [sp, #8]
   206a8:	mov	r6, r2
   206ac:	str	r8, [sp, #16]
   206b0:	str	lr, [sp, #20]
   206b4:	bl	12348 <__errno_location@plt>
   206b8:	cmp	r4, #0
   206bc:	ldr	r8, [r0]
   206c0:	beq	2079c <__assert_fail@plt+0xe1a8>
   206c4:	ldr	r1, [r6]
   206c8:	mov	r7, r0
   206cc:	cmp	r1, #0
   206d0:	beq	20740 <__assert_fail@plt+0xe14c>
   206d4:	cmp	r1, r4
   206d8:	bcs	20768 <__assert_fail@plt+0xe174>
   206dc:	lsl	r3, r1, #1
   206e0:	cmp	r1, r3
   206e4:	bls	206fc <__assert_fail@plt+0xe108>
   206e8:	b	2077c <__assert_fail@plt+0xe188>
   206ec:	lsl	ip, r3, #1
   206f0:	cmp	r3, ip
   206f4:	bhi	20754 <__assert_fail@plt+0xe160>
   206f8:	mov	r3, ip
   206fc:	cmp	r3, r4
   20700:	bcc	206ec <__assert_fail@plt+0xe0f8>
   20704:	cmp	r1, #0
   20708:	bne	20760 <__assert_fail@plt+0xe16c>
   2070c:	cmp	r5, #0
   20710:	bne	207bc <__assert_fail@plt+0xe1c8>
   20714:	mov	r0, r3
   20718:	str	r3, [r6]
   2071c:	bl	31b54 <__assert_fail@plt+0x1f560>
   20720:	cmp	r0, #0
   20724:	beq	20774 <__assert_fail@plt+0xe180>
   20728:	str	r8, [r7]
   2072c:	ldrd	r4, [sp]
   20730:	ldrd	r6, [sp, #8]
   20734:	ldr	r8, [sp, #16]
   20738:	add	sp, sp, #20
   2073c:	pop	{pc}		; (ldr pc, [sp], #4)
   20740:	cmp	r4, #16
   20744:	movls	r3, #16
   20748:	bls	2070c <__assert_fail@plt+0xe118>
   2074c:	mov	r3, #32
   20750:	b	206fc <__assert_fail@plt+0xe108>
   20754:	cmp	r1, #0
   20758:	mov	r3, r4
   2075c:	beq	2070c <__assert_fail@plt+0xe118>
   20760:	cmp	r1, r3
   20764:	bne	20780 <__assert_fail@plt+0xe18c>
   20768:	mov	r0, r5
   2076c:	cmp	r0, #0
   20770:	bne	20728 <__assert_fail@plt+0xe134>
   20774:	mov	r0, #0
   20778:	b	2072c <__assert_fail@plt+0xe138>
   2077c:	mov	r3, r4
   20780:	mov	r0, r5
   20784:	mov	r1, r3
   20788:	str	r3, [r6]
   2078c:	bl	32624 <__assert_fail@plt+0x20030>
   20790:	cmp	r0, #0
   20794:	bne	20728 <__assert_fail@plt+0xe134>
   20798:	b	20774 <__assert_fail@plt+0xe180>
   2079c:	movw	r3, #26956	; 0x694c
   207a0:	movt	r3, #4
   207a4:	movw	r1, #26968	; 0x6958
   207a8:	movt	r1, #4
   207ac:	movw	r0, #26980	; 0x6964
   207b0:	movt	r0, #4
   207b4:	mov	r2, #71	; 0x47
   207b8:	bl	125f4 <__assert_fail@plt>
   207bc:	movw	r3, #26956	; 0x694c
   207c0:	movt	r3, #4
   207c4:	movw	r1, #26968	; 0x6958
   207c8:	movt	r1, #4
   207cc:	movw	r0, #26992	; 0x6970
   207d0:	movt	r0, #4
   207d4:	mov	r2, #79	; 0x4f
   207d8:	bl	125f4 <__assert_fail@plt>
   207dc:	str	r4, [sp, #-8]!
   207e0:	mov	r4, r0
   207e4:	str	lr, [sp, #4]
   207e8:	bl	20698 <__assert_fail@plt+0xe0a4>
   207ec:	cmp	r0, #0
   207f0:	beq	20800 <__assert_fail@plt+0xe20c>
   207f4:	ldr	r4, [sp]
   207f8:	add	sp, sp, #4
   207fc:	pop	{pc}		; (ldr pc, [sp], #4)
   20800:	mov	r0, r4
   20804:	bl	2f668 <__assert_fail@plt+0x1d074>
   20808:	bl	2dea4 <__assert_fail@plt+0x1b8b0>
   2080c:	movw	r0, #27040	; 0x69a0
   20810:	movt	r0, #4
   20814:	strd	r4, [sp, #-32]!	; 0xffffffe0
   20818:	strd	r6, [sp, #8]
   2081c:	strd	r8, [sp, #16]
   20820:	str	sl, [sp, #24]
   20824:	str	lr, [sp, #28]
   20828:	bl	223b4 <__assert_fail@plt+0xfdc0>
   2082c:	subs	r6, r0, #0
   20830:	beq	2090c <__assert_fail@plt+0xe318>
   20834:	mov	r9, #0
   20838:	mvn	r5, #0
   2083c:	bl	12348 <__errno_location@plt>
   20840:	mov	r8, r9
   20844:	mov	r7, r0
   20848:	mov	r0, r6
   2084c:	str	r8, [r7]
   20850:	bl	124bc <readdir64@plt>
   20854:	subs	r4, r0, #0
   20858:	mov	r1, #0
   2085c:	beq	2089c <__assert_fail@plt+0xe2a8>
   20860:	ldrb	r3, [r4, #19]
   20864:	add	r0, r4, #19
   20868:	cmp	r3, #46	; 0x2e
   2086c:	bne	20888 <__assert_fail@plt+0xe294>
   20870:	ldrb	r3, [r4, #20]
   20874:	cmp	r3, #0
   20878:	beq	20848 <__assert_fail@plt+0xe254>
   2087c:	ldrh	r3, [r4, #20]
   20880:	cmp	r3, #46	; 0x2e
   20884:	beq	20848 <__assert_fail@plt+0xe254>
   20888:	bl	21c70 <__assert_fail@plt+0xf67c>
   2088c:	cmp	r5, r0
   20890:	mov	r9, #1
   20894:	movlt	r5, r0
   20898:	b	20848 <__assert_fail@plt+0xe254>
   2089c:	ldr	r7, [r7]
   208a0:	cmp	r7, r1
   208a4:	bne	208d4 <__assert_fail@plt+0xe2e0>
   208a8:	mov	r0, r6
   208ac:	bl	125c4 <closedir@plt>
   208b0:	cmp	r9, #0
   208b4:	beq	2090c <__assert_fail@plt+0xe318>
   208b8:	mov	r0, r5
   208bc:	ldrd	r4, [sp]
   208c0:	ldrd	r6, [sp, #8]
   208c4:	ldrd	r8, [sp, #16]
   208c8:	ldr	sl, [sp, #24]
   208cc:	add	sp, sp, #28
   208d0:	pop	{pc}		; (ldr pc, [sp], #4)
   208d4:	mov	r1, #8
   208d8:	movw	r2, #27040	; 0x69a0
   208dc:	movt	r2, #4
   208e0:	mvn	r5, #0
   208e4:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   208e8:	mov	r3, r0
   208ec:	mov	r1, r7
   208f0:	mov	r0, r4
   208f4:	movw	r2, #28236	; 0x6e4c
   208f8:	movt	r2, #4
   208fc:	bl	121ec <error@plt>
   20900:	mov	r0, r6
   20904:	bl	125c4 <closedir@plt>
   20908:	b	208b8 <__assert_fail@plt+0xe2c4>
   2090c:	mvn	r5, #0
   20910:	b	208b8 <__assert_fail@plt+0xe2c4>
   20914:	strd	r4, [sp, #-16]!
   20918:	mov	r4, r1
   2091c:	mov	r1, #1
   20920:	str	r6, [sp, #8]
   20924:	mov	r6, r0
   20928:	str	lr, [sp, #12]
   2092c:	bl	2f420 <__assert_fail@plt+0x1ce2c>
   20930:	ands	r5, r0, #1
   20934:	movne	r5, #0
   20938:	beq	20950 <__assert_fail@plt+0xe35c>
   2093c:	mov	r0, r5
   20940:	ldrd	r4, [sp]
   20944:	ldr	r6, [sp, #8]
   20948:	add	sp, sp, #12
   2094c:	pop	{pc}		; (ldr pc, [sp], #4)
   20950:	ldrd	r0, [r4]
   20954:	add	r2, r4, #8
   20958:	add	r1, r1, #1
   2095c:	lsl	r1, r1, #2
   20960:	bl	20698 <__assert_fail@plt+0xe0a4>
   20964:	cmp	r0, #0
   20968:	beq	20988 <__assert_fail@plt+0xe394>
   2096c:	ldr	r3, [r4, #4]
   20970:	str	r0, [r4]
   20974:	str	r6, [r0, r3, lsl #2]
   20978:	ldr	r3, [r4, #4]
   2097c:	add	r3, r3, #1
   20980:	str	r3, [r4, #4]
   20984:	b	2093c <__assert_fail@plt+0xe348>
   20988:	mvn	r5, #0
   2098c:	b	2093c <__assert_fail@plt+0xe348>
   20990:	strd	r4, [sp, #-16]!
   20994:	mov	r4, r1
   20998:	mov	r1, #1
   2099c:	mov	r5, r0
   209a0:	str	r6, [sp, #8]
   209a4:	str	lr, [sp, #12]
   209a8:	bl	2f420 <__assert_fail@plt+0x1ce2c>
   209ac:	tst	r0, #1
   209b0:	bne	20a18 <__assert_fail@plt+0xe424>
   209b4:	ldmib	r4, {r0, r3}
   209b8:	cmp	r3, r0
   209bc:	bcs	209f8 <__assert_fail@plt+0xe404>
   209c0:	ldr	r2, [r4]
   209c4:	ldr	r1, [r2, r3, lsl #2]
   209c8:	add	r2, r2, r3, lsl #2
   209cc:	cmp	r1, r5
   209d0:	bge	20a10 <__assert_fail@plt+0xe41c>
   209d4:	add	r3, r3, #1
   209d8:	b	209e8 <__assert_fail@plt+0xe3f4>
   209dc:	ldr	r1, [r2, #4]!
   209e0:	cmp	r5, r1
   209e4:	ble	20a10 <__assert_fail@plt+0xe41c>
   209e8:	cmp	r0, r3
   209ec:	str	r3, [r4, #8]
   209f0:	add	r3, r3, #1
   209f4:	bne	209dc <__assert_fail@plt+0xe3e8>
   209f8:	str	r5, [r4, #12]
   209fc:	mvn	r0, #0
   20a00:	ldrd	r4, [sp]
   20a04:	ldr	r6, [sp, #8]
   20a08:	add	sp, sp, #12
   20a0c:	pop	{pc}		; (ldr pc, [sp], #4)
   20a10:	cmp	r5, r1
   20a14:	bne	209f8 <__assert_fail@plt+0xe404>
   20a18:	ldrd	r4, [sp]
   20a1c:	mov	r0, #0
   20a20:	ldr	r6, [sp, #8]
   20a24:	add	sp, sp, #12
   20a28:	pop	{pc}		; (ldr pc, [sp], #4)
   20a2c:	mov	r0, #4
   20a30:	str	r4, [sp, #-8]!
   20a34:	str	lr, [sp, #4]
   20a38:	sub	sp, sp, #16
   20a3c:	bl	120cc <sysconf@plt>
   20a40:	cmn	r0, #1
   20a44:	mov	r1, sp
   20a48:	movne	r4, r0
   20a4c:	mov	r0, #7
   20a50:	moveq	r4, #20
   20a54:	bl	120d8 <getrlimit64@plt>
   20a58:	cmp	r0, #0
   20a5c:	bne	20a78 <__assert_fail@plt+0xe484>
   20a60:	ldrd	r2, [sp]
   20a64:	mvn	r1, #0
   20a68:	mvn	r0, #0
   20a6c:	cmp	r3, r1
   20a70:	cmpeq	r2, r0
   20a74:	movne	r4, r2
   20a78:	mov	r0, r4
   20a7c:	add	sp, sp, #16
   20a80:	ldr	r4, [sp]
   20a84:	add	sp, sp, #4
   20a88:	pop	{pc}		; (ldr pc, [sp], #4)
   20a8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20a90:	strd	r6, [sp, #8]
   20a94:	strd	sl, [sp, #24]
   20a98:	subs	sl, r0, #0
   20a9c:	strd	r8, [sp, #16]
   20aa0:	str	lr, [sp, #32]
   20aa4:	sub	sp, sp, #524	; 0x20c
   20aa8:	ble	20b64 <__assert_fail@plt+0xe570>
   20aac:	mov	r5, #0
   20ab0:	mov	r6, r2
   20ab4:	str	sl, [sp, #4]
   20ab8:	mov	r9, r1
   20abc:	mov	r8, r5
   20ac0:	mov	r7, #5
   20ac4:	ldr	r3, [sp, #4]
   20ac8:	sub	r3, r3, r5
   20acc:	cmp	r3, #64	; 0x40
   20ad0:	movlt	fp, r3
   20ad4:	movge	fp, #64	; 0x40
   20ad8:	cmp	r3, #0
   20adc:	ble	20b84 <__assert_fail@plt+0xe590>
   20ae0:	add	r4, sp, #8
   20ae4:	mov	r3, #0
   20ae8:	mov	r2, r4
   20aec:	add	r1, r5, r3
   20af0:	add	r3, r3, #1
   20af4:	strh	r7, [r2, #4]
   20af8:	cmp	r3, fp
   20afc:	strh	r8, [r2, #6]
   20b00:	str	r1, [r2], #8
   20b04:	blt	20aec <__assert_fail@plt+0xe4f8>
   20b08:	mov	r2, #0
   20b0c:	mov	r1, fp
   20b10:	add	r0, sp, #8
   20b14:	bl	12150 <poll@plt>
   20b18:	cmn	r0, #1
   20b1c:	beq	20b9c <__assert_fail@plt+0xe5a8>
   20b20:	mov	sl, #0
   20b24:	ldrsh	r2, [r4, #6]
   20b28:	mov	r1, r6
   20b2c:	add	sl, sl, #1
   20b30:	cmp	r2, #32
   20b34:	beq	20b48 <__assert_fail@plt+0xe554>
   20b38:	ldr	r0, [r4]
   20b3c:	blx	r9
   20b40:	cmp	r0, #0
   20b44:	bne	20b68 <__assert_fail@plt+0xe574>
   20b48:	cmp	sl, fp
   20b4c:	add	r4, r4, #8
   20b50:	blt	20b24 <__assert_fail@plt+0xe530>
   20b54:	ldr	r3, [sp, #4]
   20b58:	add	r5, r5, fp
   20b5c:	cmp	r3, r5
   20b60:	bgt	20ac4 <__assert_fail@plt+0xe4d0>
   20b64:	mov	r0, #0
   20b68:	add	sp, sp, #524	; 0x20c
   20b6c:	ldrd	r4, [sp]
   20b70:	ldrd	r6, [sp, #8]
   20b74:	ldrd	r8, [sp, #16]
   20b78:	ldrd	sl, [sp, #24]
   20b7c:	add	sp, sp, #32
   20b80:	pop	{pc}		; (ldr pc, [sp], #4)
   20b84:	mov	r2, #0
   20b88:	mov	r1, fp
   20b8c:	add	r0, sp, #8
   20b90:	bl	12150 <poll@plt>
   20b94:	cmn	r0, #1
   20b98:	bne	20b54 <__assert_fail@plt+0xe560>
   20b9c:	mvn	r0, #0
   20ba0:	b	20b68 <__assert_fail@plt+0xe574>
   20ba4:	push	{lr}		; (str lr, [sp, #-4]!)
   20ba8:	sub	sp, sp, #20
   20bac:	bl	2080c <__assert_fail@plt+0xe218>
   20bb0:	cmp	r0, #0
   20bb4:	bge	20bbc <__assert_fail@plt+0xe5c8>
   20bb8:	bl	20a2c <__assert_fail@plt+0xe438>
   20bbc:	mov	r3, #0
   20bc0:	cmn	r0, #-2147483647	; 0x80000001
   20bc4:	add	r2, sp, #4
   20bc8:	addne	r0, r0, #1
   20bcc:	movw	r1, #2324	; 0x914
   20bd0:	movt	r1, #2
   20bd4:	str	r3, [sp, #4]
   20bd8:	str	r3, [sp, #8]
   20bdc:	str	r3, [sp, #12]
   20be0:	bl	20a8c <__assert_fail@plt+0xe498>
   20be4:	ldmib	sp, {r1, r2}
   20be8:	movw	r3, #40160	; 0x9ce0
   20bec:	movt	r3, #5
   20bf0:	stm	r3, {r1, r2}
   20bf4:	add	sp, sp, #20
   20bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   20bfc:	push	{r1, r2, r3}
   20c00:	strd	r4, [sp, #-28]!	; 0xffffffe4
   20c04:	strd	r6, [sp, #8]
   20c08:	strd	r8, [sp, #16]
   20c0c:	mov	r8, r0
   20c10:	str	lr, [sp, #24]
   20c14:	sub	sp, sp, #8
   20c18:	ldr	r5, [sp, #36]	; 0x24
   20c1c:	ands	r6, r5, #64	; 0x40
   20c20:	bne	20ca8 <__assert_fail@plt+0xe6b4>
   20c24:	movw	r4, #40160	; 0x9ce0
   20c28:	movt	r4, #5
   20c2c:	ldrb	r7, [r4, #8]
   20c30:	cmp	r7, #0
   20c34:	beq	20c80 <__assert_fail@plt+0xe68c>
   20c38:	orr	r1, r5, #524288	; 0x80000
   20c3c:	mov	r2, r6
   20c40:	mov	r0, r8
   20c44:	bl	22600 <__assert_fail@plt+0x1000c>
   20c48:	subs	r5, r0, #0
   20c4c:	blt	20c5c <__assert_fail@plt+0xe668>
   20c50:	ldrb	r3, [r4, #9]
   20c54:	cmp	r3, #0
   20c58:	beq	20cb8 <__assert_fail@plt+0xe6c4>
   20c5c:	mov	r0, r5
   20c60:	add	sp, sp, #8
   20c64:	ldrd	r4, [sp]
   20c68:	ldrd	r6, [sp, #8]
   20c6c:	ldrd	r8, [sp, #16]
   20c70:	ldr	lr, [sp, #24]
   20c74:	add	sp, sp, #28
   20c78:	add	sp, sp, #12
   20c7c:	bx	lr
   20c80:	movw	r0, #34572	; 0x870c
   20c84:	movt	r0, #4
   20c88:	mov	r1, #524288	; 0x80000
   20c8c:	bl	22600 <__assert_fail@plt+0x1000c>
   20c90:	subs	r9, r0, #0
   20c94:	bge	20cc4 <__assert_fail@plt+0xe6d0>
   20c98:	mov	r3, #1
   20c9c:	strb	r3, [r4, #8]
   20ca0:	strb	r7, [r4, #9]
   20ca4:	b	20c38 <__assert_fail@plt+0xe644>
   20ca8:	add	r3, sp, #40	; 0x28
   20cac:	ldr	r6, [sp, #40]	; 0x28
   20cb0:	str	r3, [sp, #4]
   20cb4:	b	20c24 <__assert_fail@plt+0xe630>
   20cb8:	mov	r1, #1
   20cbc:	bl	22228 <__assert_fail@plt+0xfc34>
   20cc0:	b	20c5c <__assert_fail@plt+0xe668>
   20cc4:	mov	r1, #1
   20cc8:	bl	2f420 <__assert_fail@plt+0x1ce2c>
   20ccc:	and	r7, r0, #1
   20cd0:	mov	r0, r9
   20cd4:	bl	125ac <close@plt>
   20cd8:	mov	r3, #1
   20cdc:	strb	r3, [r4, #8]
   20ce0:	strb	r7, [r4, #9]
   20ce4:	b	20c38 <__assert_fail@plt+0xe644>
   20ce8:	str	r4, [sp, #-8]!
   20cec:	movw	r4, #40160	; 0x9ce0
   20cf0:	movt	r4, #5
   20cf4:	ldr	r0, [r4]
   20cf8:	str	lr, [sp, #4]
   20cfc:	bl	2f668 <__assert_fail@plt+0x1d074>
   20d00:	mov	r3, #0
   20d04:	str	r3, [r4]
   20d08:	str	r3, [r4, #4]
   20d0c:	ldr	r4, [sp]
   20d10:	add	sp, sp, #4
   20d14:	pop	{pc}		; (ldr pc, [sp], #4)
   20d18:	movw	r0, #27056	; 0x69b0
   20d1c:	movt	r0, #4
   20d20:	str	r4, [sp, #-8]!
   20d24:	str	lr, [sp, #4]
   20d28:	bl	12228 <getenv@plt>
   20d2c:	adds	r0, r0, #0
   20d30:	ldr	r4, [sp]
   20d34:	add	sp, sp, #4
   20d38:	movne	r0, #1
   20d3c:	pop	{pc}		; (ldr pc, [sp], #4)
   20d40:	movw	r3, #40160	; 0x9ce0
   20d44:	movt	r3, #5
   20d48:	strd	r4, [sp, #-16]!
   20d4c:	ldr	r5, [r3, #4]
   20d50:	str	r6, [sp, #8]
   20d54:	str	lr, [sp, #12]
   20d58:	sub	sp, sp, #16
   20d5c:	ldr	r6, [r3]
   20d60:	bl	2080c <__assert_fail@plt+0xe218>
   20d64:	cmp	r0, #0
   20d68:	bge	20d70 <__assert_fail@plt+0xe77c>
   20d6c:	bl	20a2c <__assert_fail@plt+0xe438>
   20d70:	cmn	r0, #-2147483647	; 0x80000001
   20d74:	mov	r4, #0
   20d78:	str	r6, [sp]
   20d7c:	mvn	r3, #0
   20d80:	addne	r0, r0, #1
   20d84:	str	r5, [sp, #4]
   20d88:	movw	r1, #2448	; 0x990
   20d8c:	movt	r1, #2
   20d90:	str	r4, [sp, #8]
   20d94:	mov	r2, sp
   20d98:	str	r3, [sp, #12]
   20d9c:	bl	20a8c <__assert_fail@plt+0xe498>
   20da0:	ldr	r5, [sp, #12]
   20da4:	cmp	r5, r4
   20da8:	bge	20dc0 <__assert_fail@plt+0xe7cc>
   20dac:	add	sp, sp, #16
   20db0:	ldrd	r4, [sp]
   20db4:	ldr	r6, [sp, #8]
   20db8:	add	sp, sp, #12
   20dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   20dc0:	mov	r2, #5
   20dc4:	movw	r1, #27084	; 0x69cc
   20dc8:	movt	r1, #4
   20dcc:	mov	r0, r4
   20dd0:	bl	120b4 <dcgettext@plt>
   20dd4:	mov	r2, r0
   20dd8:	mov	r3, r5
   20ddc:	mov	r1, r4
   20de0:	mov	r0, r4
   20de4:	bl	121ec <error@plt>
   20de8:	movw	r3, #27012	; 0x6984
   20dec:	movt	r3, #4
   20df0:	movw	r1, #27236	; 0x6a64
   20df4:	movt	r1, #4
   20df8:	movw	r0, #27248	; 0x6a70
   20dfc:	movt	r0, #4
   20e00:	mov	r2, #396	; 0x18c
   20e04:	bl	125f4 <__assert_fail@plt>
   20e08:	movw	r3, #38216	; 0x9548
   20e0c:	movt	r3, #5
   20e10:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20e14:	strd	r6, [sp, #8]
   20e18:	mov	r6, r0
   20e1c:	str	r8, [sp, #16]
   20e20:	str	lr, [sp, #20]
   20e24:	sub	sp, sp, #16
   20e28:	ldr	r0, [r3]
   20e2c:	bl	2f608 <__assert_fail@plt+0x1d014>
   20e30:	movw	r2, #38228	; 0x9554
   20e34:	movt	r2, #5
   20e38:	movw	r3, #38092	; 0x94cc
   20e3c:	movt	r3, #5
   20e40:	ldr	r4, [r2]
   20e44:	movw	r1, #27260	; 0x6a7c
   20e48:	movt	r1, #4
   20e4c:	mov	r2, #5
   20e50:	mov	r0, #0
   20e54:	ldr	r8, [r3]
   20e58:	bl	120b4 <dcgettext@plt>
   20e5c:	mov	r7, r0
   20e60:	mov	r2, #5
   20e64:	movw	r1, #27276	; 0x6a8c
   20e68:	movt	r1, #4
   20e6c:	mov	r0, #0
   20e70:	bl	120b4 <dcgettext@plt>
   20e74:	mov	r5, r0
   20e78:	mov	r2, #5
   20e7c:	movw	r1, #27292	; 0x6a9c
   20e80:	movt	r1, #4
   20e84:	mov	r0, #0
   20e88:	bl	120b4 <dcgettext@plt>
   20e8c:	mov	ip, #0
   20e90:	mov	r3, r8
   20e94:	str	r7, [sp]
   20e98:	mov	r1, r6
   20e9c:	movw	r2, #27308	; 0x6aac
   20ea0:	movt	r2, #4
   20ea4:	str	r5, [sp, #4]
   20ea8:	str	r0, [sp, #8]
   20eac:	mov	r0, r4
   20eb0:	str	ip, [sp, #12]
   20eb4:	bl	2d934 <__assert_fail@plt+0x1b340>
   20eb8:	add	sp, sp, #16
   20ebc:	ldrd	r4, [sp]
   20ec0:	ldrd	r6, [sp, #8]
   20ec4:	ldr	r8, [sp, #16]
   20ec8:	add	sp, sp, #20
   20ecc:	pop	{pc}		; (ldr pc, [sp], #4)
   20ed0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20ed4:	mov	r4, r0
   20ed8:	mov	r5, r1
   20edc:	strd	r6, [sp, #8]
   20ee0:	movw	r7, #27360	; 0x6ae0
   20ee4:	movt	r7, #4
   20ee8:	movw	r6, #27364	; 0x6ae4
   20eec:	movt	r6, #4
   20ef0:	str	r8, [sp, #16]
   20ef4:	movw	r8, #27372	; 0x6aec
   20ef8:	movt	r8, #4
   20efc:	str	lr, [sp, #20]
   20f00:	b	20f24 <__assert_fail@plt+0xe930>
   20f04:	cmp	r2, #92	; 0x5c
   20f08:	bne	20fa4 <__assert_fail@plt+0xe9b0>
   20f0c:	movw	r1, #27340	; 0x6acc
   20f10:	movt	r1, #4
   20f14:	mov	r0, r5
   20f18:	bl	1233c <fprintf@plt>
   20f1c:	cmp	r0, #0
   20f20:	blt	20f68 <__assert_fail@plt+0xe974>
   20f24:	ldrb	r2, [r4], #1
   20f28:	cmp	r2, #0
   20f2c:	beq	20fd0 <__assert_fail@plt+0xe9dc>
   20f30:	cmp	r2, #12
   20f34:	beq	21034 <__assert_fail@plt+0xea40>
   20f38:	bls	20f8c <__assert_fail@plt+0xe998>
   20f3c:	cmp	r2, #32
   20f40:	beq	21024 <__assert_fail@plt+0xea30>
   20f44:	bls	20f70 <__assert_fail@plt+0xe97c>
   20f48:	cmp	r2, #34	; 0x22
   20f4c:	bne	20f04 <__assert_fail@plt+0xe910>
   20f50:	movw	r1, #27368	; 0x6ae8
   20f54:	movt	r1, #4
   20f58:	mov	r0, r5
   20f5c:	bl	1233c <fprintf@plt>
   20f60:	cmp	r0, #0
   20f64:	bge	20f24 <__assert_fail@plt+0xe930>
   20f68:	mov	r0, #0
   20f6c:	b	20fd4 <__assert_fail@plt+0xe9e0>
   20f70:	cmp	r2, #13
   20f74:	bne	20fa4 <__assert_fail@plt+0xe9b0>
   20f78:	movw	r1, #27352	; 0x6ad8
   20f7c:	movt	r1, #4
   20f80:	mov	r0, r5
   20f84:	bl	1233c <fprintf@plt>
   20f88:	b	20f1c <__assert_fail@plt+0xe928>
   20f8c:	cmp	r2, #9
   20f90:	beq	21010 <__assert_fail@plt+0xea1c>
   20f94:	cmp	r2, #10
   20f98:	beq	20ffc <__assert_fail@plt+0xea08>
   20f9c:	cmp	r2, #8
   20fa0:	beq	20fe8 <__assert_fail@plt+0xe9f4>
   20fa4:	sub	r3, r2, #33	; 0x21
   20fa8:	cmp	r3, #93	; 0x5d
   20fac:	bhi	21044 <__assert_fail@plt+0xea50>
   20fb0:	mov	r0, r2
   20fb4:	mov	r1, r5
   20fb8:	bl	124e0 <putc@plt>
   20fbc:	cmn	r0, #1
   20fc0:	beq	20f68 <__assert_fail@plt+0xe974>
   20fc4:	ldrb	r2, [r4], #1
   20fc8:	cmp	r2, #0
   20fcc:	bne	20f30 <__assert_fail@plt+0xe93c>
   20fd0:	mov	r0, #1
   20fd4:	ldrd	r4, [sp]
   20fd8:	ldrd	r6, [sp, #8]
   20fdc:	ldr	r8, [sp, #16]
   20fe0:	add	sp, sp, #20
   20fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   20fe8:	movw	r1, #27348	; 0x6ad4
   20fec:	movt	r1, #4
   20ff0:	mov	r0, r5
   20ff4:	bl	1233c <fprintf@plt>
   20ff8:	b	20f1c <__assert_fail@plt+0xe928>
   20ffc:	movw	r1, #27344	; 0x6ad0
   21000:	movt	r1, #4
   21004:	mov	r0, r5
   21008:	bl	1233c <fprintf@plt>
   2100c:	b	20f1c <__assert_fail@plt+0xe928>
   21010:	movw	r1, #27356	; 0x6adc
   21014:	movt	r1, #4
   21018:	mov	r0, r5
   2101c:	bl	1233c <fprintf@plt>
   21020:	b	20f1c <__assert_fail@plt+0xe928>
   21024:	mov	r1, r6
   21028:	mov	r0, r5
   2102c:	bl	1233c <fprintf@plt>
   21030:	b	20f1c <__assert_fail@plt+0xe928>
   21034:	mov	r1, r7
   21038:	mov	r0, r5
   2103c:	bl	1233c <fprintf@plt>
   21040:	b	20f1c <__assert_fail@plt+0xe928>
   21044:	mov	r1, r8
   21048:	mov	r0, r5
   2104c:	bl	1233c <fprintf@plt>
   21050:	b	20f1c <__assert_fail@plt+0xe928>
   21054:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21058:	movw	r4, #38096	; 0x94d0
   2105c:	movt	r4, #5
   21060:	strd	r6, [sp, #8]
   21064:	mov	r5, r3
   21068:	strd	r8, [sp, #16]
   2106c:	mov	r9, r0
   21070:	strd	sl, [sp, #24]
   21074:	add	fp, sp, #32
   21078:	mov	sl, r2
   2107c:	str	lr, [sp, #32]
   21080:	sub	sp, sp, #956	; 0x3bc
   21084:	str	r1, [fp, #-968]	; 0xfffffc38
   21088:	sub	r1, fp, #956	; 0x3bc
   2108c:	ldr	r0, [r3, #16]
   21090:	bl	22640 <__assert_fail@plt+0x1004c>
   21094:	ldr	r6, [r4]
   21098:	mov	r0, #1
   2109c:	mov	r1, #0
   210a0:	sub	r2, fp, #688	; 0x2b0
   210a4:	mov	r3, #0
   210a8:	strd	r0, [sp]
   210ac:	strd	r0, [sp, #8]
   210b0:	ldrd	r0, [r5, #96]	; 0x60
   210b4:	bl	239e0 <__assert_fail@plt+0x113ec>
   210b8:	mov	r3, r0
   210bc:	mov	r2, r6
   210c0:	ldr	r0, [fp, #16]
   210c4:	movw	r1, #27404	; 0x6b0c
   210c8:	movt	r1, #4
   210cc:	bl	1233c <fprintf@plt>
   210d0:	cmp	r0, #0
   210d4:	blt	213f4 <__assert_fail@plt+0xee00>
   210d8:	ldr	r3, [r4]
   210dc:	ldr	r1, [fp, #16]
   210e0:	cmp	r3, r0
   210e4:	strlt	r0, [r4]
   210e8:	mov	r0, #32
   210ec:	bl	124e0 <putc@plt>
   210f0:	ldr	r2, [fp, #8]
   210f4:	sub	r1, fp, #964	; 0x3c4
   210f8:	cmn	r0, #1
   210fc:	mov	r0, #512	; 0x200
   21100:	moveq	r6, #150	; 0x96
   21104:	ldr	r7, [r4, #4]
   21108:	movne	r8, #1
   2110c:	asr	r3, r2, #31
   21110:	strd	r2, [r1]
   21114:	mov	r1, #0
   21118:	mov	r3, #0
   2111c:	sub	r2, fp, #688	; 0x2b0
   21120:	movne	r6, r3
   21124:	strd	r0, [sp]
   21128:	sub	r1, fp, #964	; 0x3c4
   2112c:	moveq	r8, r3
   21130:	ldrd	r0, [r1]
   21134:	strd	r0, [sp, #8]
   21138:	ldrd	r0, [r5, #64]	; 0x40
   2113c:	bl	239e0 <__assert_fail@plt+0x113ec>
   21140:	mov	r3, r0
   21144:	mov	r2, r7
   21148:	ldr	r0, [fp, #16]
   2114c:	movw	r1, #27404	; 0x6b0c
   21150:	movt	r1, #4
   21154:	bl	1233c <fprintf@plt>
   21158:	cmp	r0, #0
   2115c:	blt	21428 <__assert_fail@plt+0xee34>
   21160:	ldr	r3, [r4, #4]
   21164:	cmp	r3, r0
   21168:	strlt	r0, [r4, #4]
   2116c:	cmp	r8, #0
   21170:	beq	213f8 <__assert_fail@plt+0xee04>
   21174:	mov	r0, #32
   21178:	ldr	r1, [fp, #16]
   2117c:	bl	124e0 <putc@plt>
   21180:	cmn	r0, #1
   21184:	beq	2146c <__assert_fail@plt+0xee78>
   21188:	sub	r0, fp, #956	; 0x3bc
   2118c:	ldr	r1, [fp, #16]
   21190:	bl	12588 <fputs@plt>
   21194:	cmp	r0, #0
   21198:	blt	21660 <__assert_fail@plt+0xf06c>
   2119c:	movw	r1, #27424	; 0x6b20
   211a0:	movt	r1, #4
   211a4:	ldr	r2, [r4, #8]
   211a8:	ldr	r0, [fp, #16]
   211ac:	ldr	r3, [r5, #20]
   211b0:	bl	1233c <fprintf@plt>
   211b4:	cmp	r0, #0
   211b8:	blt	21668 <__assert_fail@plt+0xf074>
   211bc:	ldr	r3, [r4, #8]
   211c0:	ldr	r1, [fp, #16]
   211c4:	cmp	r3, r0
   211c8:	strlt	r0, [r4, #8]
   211cc:	mov	r0, #32
   211d0:	bl	124e0 <putc@plt>
   211d4:	ldr	r0, [r5, #24]
   211d8:	bl	245bc <__assert_fail@plt+0x11fc8>
   211dc:	subs	r6, r0, #0
   211e0:	beq	2147c <__assert_fail@plt+0xee88>
   211e4:	mov	r1, #0
   211e8:	bl	26298 <__assert_fail@plt+0x13ca4>
   211ec:	ldr	r2, [r4, #12]
   211f0:	mov	r3, r6
   211f4:	movw	r1, #27500	; 0x6b6c
   211f8:	movt	r1, #4
   211fc:	cmp	r2, r0
   21200:	movlt	r2, r0
   21204:	strlt	r0, [r4, #12]
   21208:	ldr	r0, [fp, #16]
   2120c:	bl	1233c <fprintf@plt>
   21210:	cmp	r0, #0
   21214:	blt	21474 <__assert_fail@plt+0xee80>
   21218:	ldr	r0, [r5, #28]
   2121c:	bl	24798 <__assert_fail@plt+0x121a4>
   21220:	subs	r6, r0, #0
   21224:	beq	215b8 <__assert_fail@plt+0xefc4>
   21228:	mov	r1, #0
   2122c:	bl	26298 <__assert_fail@plt+0x13ca4>
   21230:	ldr	r2, [r4, #16]
   21234:	mov	r3, r6
   21238:	movw	r1, #27500	; 0x6b6c
   2123c:	movt	r1, #4
   21240:	cmp	r2, r0
   21244:	movlt	r2, r0
   21248:	strlt	r0, [r4, #16]
   2124c:	ldr	r0, [fp, #16]
   21250:	bl	1233c <fprintf@plt>
   21254:	cmp	r0, #0
   21258:	movlt	r6, #500	; 0x1f4
   2125c:	blt	213f8 <__assert_fail@plt+0xee04>
   21260:	ldr	r3, [r5, #16]
   21264:	and	r3, r3, #45056	; 0xb000
   21268:	cmp	r3, #8192	; 0x2000
   2126c:	beq	21514 <__assert_fail@plt+0xef20>
   21270:	ldr	r3, [fp, #8]
   21274:	cmp	r3, #0
   21278:	blt	2128c <__assert_fail@plt+0xec98>
   2127c:	mov	r2, #1
   21280:	mov	r3, #0
   21284:	sub	r1, fp, #964	; 0x3c4
   21288:	strd	r2, [r1]
   2128c:	sub	r2, fp, #964	; 0x3c4
   21290:	mov	r0, #1
   21294:	ldrd	r6, [r2]
   21298:	mov	r1, #0
   2129c:	mov	r3, #0
   212a0:	sub	r2, fp, #688	; 0x2b0
   212a4:	strd	r6, [sp, #8]
   212a8:	ldr	r6, [r4, #28]
   212ac:	strd	r0, [sp]
   212b0:	ldrd	r0, [r5, #48]	; 0x30
   212b4:	bl	239e0 <__assert_fail@plt+0x113ec>
   212b8:	mov	r3, r0
   212bc:	movw	r1, #27404	; 0x6b0c
   212c0:	movt	r1, #4
   212c4:	mov	r2, r6
   212c8:	ldr	r0, [fp, #16]
   212cc:	bl	1233c <fprintf@plt>
   212d0:	cmp	r0, #0
   212d4:	blt	21604 <__assert_fail@plt+0xf010>
   212d8:	ldr	r3, [r4, #28]
   212dc:	cmp	r3, r0
   212e0:	strlt	r0, [r4, #28]
   212e4:	mov	r0, #32
   212e8:	ldr	r1, [fp, #16]
   212ec:	bl	124e0 <putc@plt>
   212f0:	cmn	r0, #1
   212f4:	beq	21670 <__assert_fail@plt+0xf07c>
   212f8:	add	r0, r5, #80	; 0x50
   212fc:	bl	1227c <localtime@plt>
   21300:	subs	r8, r0, #0
   21304:	beq	2160c <__assert_fail@plt+0xf018>
   21308:	ldr	r3, [fp, #4]
   2130c:	movw	r7, #27380	; 0x6af4
   21310:	movt	r7, #4
   21314:	ldr	r2, [r5, #80]	; 0x50
   21318:	sub	r3, r3, #15532032	; 0xed0000
   2131c:	sub	r3, r3, #19968	; 0x4e00
   21320:	cmp	r3, r2
   21324:	ble	21450 <__assert_fail@plt+0xee5c>
   21328:	mov	r4, #256	; 0x100
   2132c:	sub	r6, fp, #944	; 0x3b0
   21330:	b	21348 <__assert_fail@plt+0xed54>
   21334:	lsl	r4, r4, #1
   21338:	add	r3, r4, #7
   2133c:	bic	r3, r3, #7
   21340:	sub	sp, sp, r3
   21344:	add	r6, sp, #16
   21348:	mov	r3, r8
   2134c:	mov	r2, r7
   21350:	mov	r1, r4
   21354:	mov	r0, r6
   21358:	bl	12264 <strftime@plt>
   2135c:	cmp	r0, #0
   21360:	beq	21334 <__assert_fail@plt+0xed40>
   21364:	mov	r2, r6
   21368:	movw	r1, #27432	; 0x6b28
   2136c:	movt	r1, #4
   21370:	ldr	r0, [fp, #16]
   21374:	bl	1233c <fprintf@plt>
   21378:	cmp	r0, #0
   2137c:	movlt	r6, #900	; 0x384
   21380:	blt	213f8 <__assert_fail@plt+0xee04>
   21384:	ldr	r3, [fp, #12]
   21388:	cmp	r3, #0
   2138c:	bne	21430 <__assert_fail@plt+0xee3c>
   21390:	mov	r0, r9
   21394:	ldr	r1, [fp, #16]
   21398:	bl	20ed0 <__assert_fail@plt+0xe8dc>
   2139c:	cmp	r0, #0
   213a0:	moveq	r6, #1200	; 0x4b0
   213a4:	beq	213f8 <__assert_fail@plt+0xee04>
   213a8:	ldr	r3, [r5, #16]
   213ac:	and	r3, r3, #61440	; 0xf000
   213b0:	cmp	r3, #40960	; 0xa000
   213b4:	bne	214e4 <__assert_fail@plt+0xeef0>
   213b8:	mov	r1, sl
   213bc:	ldr	r0, [fp, #-968]	; 0xfffffc38
   213c0:	bl	21ebc <__assert_fail@plt+0xf8c8>
   213c4:	subs	r4, r0, #0
   213c8:	beq	216d8 <__assert_fail@plt+0xf0e4>
   213cc:	movw	r0, #27452	; 0x6b3c
   213d0:	movt	r0, #4
   213d4:	ldr	r1, [fp, #16]
   213d8:	bl	12588 <fputs@plt>
   213dc:	cmp	r0, #0
   213e0:	bge	214ac <__assert_fail@plt+0xeeb8>
   213e4:	mov	r0, r4
   213e8:	movw	r6, #1300	; 0x514
   213ec:	bl	2f668 <__assert_fail@plt+0x1d074>
   213f0:	b	213f8 <__assert_fail@plt+0xee04>
   213f4:	mov	r6, #100	; 0x64
   213f8:	bl	12348 <__errno_location@plt>
   213fc:	ldr	r4, [r0]
   21400:	mov	r2, #5
   21404:	movw	r1, #27460	; 0x6b44
   21408:	movt	r1, #4
   2140c:	mov	r0, #0
   21410:	bl	120b4 <dcgettext@plt>
   21414:	mov	r2, r0
   21418:	mov	r3, r6
   2141c:	mov	r0, #1
   21420:	mov	r1, r4
   21424:	bl	121ec <error@plt>
   21428:	mov	r6, #200	; 0xc8
   2142c:	b	213f8 <__assert_fail@plt+0xee04>
   21430:	movw	r1, #28236	; 0x6e4c
   21434:	movt	r1, #4
   21438:	ldr	r0, [fp, #16]
   2143c:	mov	r2, r9
   21440:	bl	1233c <fprintf@plt>
   21444:	mvn	r0, r0
   21448:	lsr	r0, r0, #31
   2144c:	b	2139c <__assert_fail@plt+0xeda8>
   21450:	ldr	r1, [fp, #4]
   21454:	movw	r3, #27392	; 0x6b00
   21458:	movt	r3, #4
   2145c:	add	r1, r1, #3600	; 0xe10
   21460:	cmp	r2, r1
   21464:	movle	r7, r3
   21468:	b	21328 <__assert_fail@plt+0xed34>
   2146c:	mov	r6, #250	; 0xfa
   21470:	b	213f8 <__assert_fail@plt+0xee04>
   21474:	mov	r6, #400	; 0x190
   21478:	b	213f8 <__assert_fail@plt+0xee04>
   2147c:	movw	r1, #27408	; 0x6b10
   21480:	movt	r1, #4
   21484:	ldr	r0, [fp, #16]
   21488:	ldr	r2, [r5, #24]
   2148c:	bl	1233c <fprintf@plt>
   21490:	ldr	r3, [r4, #12]
   21494:	cmp	r3, r0
   21498:	strlt	r0, [r4, #12]
   2149c:	cmp	r0, #0
   214a0:	bgt	21218 <__assert_fail@plt+0xec24>
   214a4:	movw	r6, #450	; 0x1c2
   214a8:	b	213f8 <__assert_fail@plt+0xee04>
   214ac:	ldr	r3, [fp, #12]
   214b0:	cmp	r3, #0
   214b4:	beq	21708 <__assert_fail@plt+0xf114>
   214b8:	movw	r1, #28236	; 0x6e4c
   214bc:	movt	r1, #4
   214c0:	ldr	r0, [fp, #16]
   214c4:	mov	r2, r4
   214c8:	bl	1233c <fprintf@plt>
   214cc:	mvn	r0, r0
   214d0:	lsr	r0, r0, #31
   214d4:	cmp	r0, #0
   214d8:	beq	21718 <__assert_fail@plt+0xf124>
   214dc:	mov	r0, r4
   214e0:	bl	2f668 <__assert_fail@plt+0x1d074>
   214e4:	mov	r0, #10
   214e8:	ldr	r1, [fp, #16]
   214ec:	bl	124e0 <putc@plt>
   214f0:	cmn	r0, #1
   214f4:	beq	21678 <__assert_fail@plt+0xf084>
   214f8:	sub	sp, fp, #32
   214fc:	ldrd	r4, [sp]
   21500:	ldrd	r6, [sp, #8]
   21504:	ldrd	r8, [sp, #16]
   21508:	ldrd	sl, [sp, #24]
   2150c:	add	sp, sp, #32
   21510:	pop	{pc}		; (ldr pc, [sp], #4)
   21514:	ldr	ip, [r5, #32]
   21518:	movw	r1, #27424	; 0x6b20
   2151c:	movt	r1, #4
   21520:	ldr	r3, [r5, #36]	; 0x24
   21524:	ldr	r0, [fp, #16]
   21528:	ubfx	ip, ip, #8, #12
   2152c:	ldr	r2, [r4, #20]
   21530:	bic	r3, r3, #4080	; 0xff0
   21534:	bic	r3, r3, #15
   21538:	orr	r3, r3, ip
   2153c:	bl	1233c <fprintf@plt>
   21540:	cmp	r0, #0
   21544:	movlt	r6, #600	; 0x258
   21548:	blt	213f8 <__assert_fail@plt+0xee04>
   2154c:	ldr	r3, [r4, #20]
   21550:	movw	r1, #17808	; 0x4590
   21554:	movt	r1, #4
   21558:	cmp	r0, r3
   2155c:	strgt	r0, [r4, #20]
   21560:	ldr	r0, [fp, #16]
   21564:	bl	1233c <fprintf@plt>
   21568:	cmp	r0, #0
   2156c:	blt	21700 <__assert_fail@plt+0xf10c>
   21570:	ldr	r3, [r5, #32]
   21574:	movw	r1, #27424	; 0x6b20
   21578:	movt	r1, #4
   2157c:	ldr	lr, [r5, #36]	; 0x24
   21580:	ldr	r0, [fp, #16]
   21584:	lsr	ip, r3, #12
   21588:	uxtb	r3, r3
   2158c:	ldr	r2, [r4, #24]
   21590:	orr	ip, ip, lr, lsl #20
   21594:	bic	ip, ip, #255	; 0xff
   21598:	orr	r3, ip, r3
   2159c:	bl	1233c <fprintf@plt>
   215a0:	cmp	r0, #0
   215a4:	blt	21680 <__assert_fail@plt+0xf08c>
   215a8:	ldr	r3, [r4, #24]
   215ac:	cmp	r3, r0
   215b0:	strlt	r0, [r4, #24]
   215b4:	b	212e4 <__assert_fail@plt+0xecf0>
   215b8:	movw	r1, #27416	; 0x6b18
   215bc:	movt	r1, #4
   215c0:	ldr	r2, [r4, #16]
   215c4:	ldr	r0, [fp, #16]
   215c8:	ldr	r3, [r5, #28]
   215cc:	bl	1233c <fprintf@plt>
   215d0:	ldr	r3, [r4, #16]
   215d4:	cmp	r3, r0
   215d8:	strlt	r0, [r4, #16]
   215dc:	cmp	r0, #0
   215e0:	movwlt	r6, #550	; 0x226
   215e4:	blt	213f8 <__assert_fail@plt+0xee04>
   215e8:	mov	r0, #32
   215ec:	ldr	r1, [fp, #16]
   215f0:	bl	124e0 <putc@plt>
   215f4:	cmn	r0, #1
   215f8:	bne	21260 <__assert_fail@plt+0xec6c>
   215fc:	movw	r6, #525	; 0x20d
   21600:	b	213f8 <__assert_fail@plt+0xee04>
   21604:	mov	r6, #800	; 0x320
   21608:	b	213f8 <__assert_fail@plt+0xee04>
   2160c:	ldr	r0, [r5, #80]	; 0x50
   21610:	mov	r6, #1
   21614:	mov	r7, #0
   21618:	mov	r3, r8
   2161c:	sub	r2, fp, #688	; 0x2b0
   21620:	cmp	r0, #0
   21624:	asr	r1, r0, #31
   21628:	blt	21688 <__assert_fail@plt+0xf094>
   2162c:	strd	r6, [sp]
   21630:	strd	r6, [sp, #8]
   21634:	bl	239e0 <__assert_fail@plt+0x113ec>
   21638:	mov	r3, r0
   2163c:	movw	r1, #27444	; 0x6b34
   21640:	movt	r1, #4
   21644:	mov	r2, #12
   21648:	ldr	r0, [fp, #16]
   2164c:	bl	1233c <fprintf@plt>
   21650:	cmp	r0, #0
   21654:	bge	21384 <__assert_fail@plt+0xed90>
   21658:	movw	r6, #1100	; 0x44c
   2165c:	b	213f8 <__assert_fail@plt+0xee04>
   21660:	movw	r6, #275	; 0x113
   21664:	b	213f8 <__assert_fail@plt+0xee04>
   21668:	mov	r6, #300	; 0x12c
   2166c:	b	213f8 <__assert_fail@plt+0xee04>
   21670:	movw	r6, #850	; 0x352
   21674:	b	213f8 <__assert_fail@plt+0xee04>
   21678:	movw	r6, #1400	; 0x578
   2167c:	b	213f8 <__assert_fail@plt+0xee04>
   21680:	movw	r6, #650	; 0x28a
   21684:	b	213f8 <__assert_fail@plt+0xee04>
   21688:	rsbs	r0, r0, #0
   2168c:	strd	r6, [sp]
   21690:	rsc	r1, r1, #0
   21694:	strd	r6, [sp, #8]
   21698:	bl	239e0 <__assert_fail@plt+0x113ec>
   2169c:	mov	r4, r0
   216a0:	bl	12300 <strlen@plt>
   216a4:	rsb	r2, r0, #12
   216a8:	movw	r3, #11180	; 0x2bac
   216ac:	movt	r3, #4
   216b0:	bic	r2, r2, r2, asr #31
   216b4:	movw	r1, #27436	; 0x6b2c
   216b8:	movt	r1, #4
   216bc:	str	r4, [sp]
   216c0:	ldr	r0, [fp, #16]
   216c4:	bl	1233c <fprintf@plt>
   216c8:	cmp	r0, #0
   216cc:	bge	21384 <__assert_fail@plt+0xed90>
   216d0:	mov	r6, #1000	; 0x3e8
   216d4:	b	213f8 <__assert_fail@plt+0xee04>
   216d8:	bl	12348 <__errno_location@plt>
   216dc:	mov	r3, r9
   216e0:	movw	r2, #28236	; 0x6e4c
   216e4:	movt	r2, #4
   216e8:	ldr	r1, [r0]
   216ec:	mov	r0, r4
   216f0:	bl	121ec <error@plt>
   216f4:	mov	r0, r4
   216f8:	bl	2f668 <__assert_fail@plt+0x1d074>
   216fc:	b	214e4 <__assert_fail@plt+0xeef0>
   21700:	movw	r6, #625	; 0x271
   21704:	b	213f8 <__assert_fail@plt+0xee04>
   21708:	mov	r0, r4
   2170c:	ldr	r1, [fp, #16]
   21710:	bl	20ed0 <__assert_fail@plt+0xe8dc>
   21714:	b	214d4 <__assert_fail@plt+0xeee0>
   21718:	mov	r0, r4
   2171c:	movw	r6, #1350	; 0x546
   21720:	bl	2f668 <__assert_fail@plt+0x1d074>
   21724:	b	213f8 <__assert_fail@plt+0xee04>
   21728:	cmp	r2, #0
   2172c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   21730:	mov	r4, r3
   21734:	strd	r6, [sp, #8]
   21738:	strd	r8, [sp, #16]
   2173c:	str	lr, [sp, #24]
   21740:	sub	sp, sp, #8192	; 0x2000
   21744:	sub	sp, sp, #12
   21748:	beq	21830 <__assert_fail@plt+0xf23c>
   2174c:	mov	r5, r1
   21750:	add	r2, sp, #8192	; 0x2000
   21754:	add	r2, r2, #40	; 0x28
   21758:	mov	r7, r0
   2175c:	mvn	r3, #0
   21760:	add	r0, sp, #8
   21764:	str	r5, [sp]
   21768:	mov	r1, #8192	; 0x2000
   2176c:	ldr	r2, [r2]
   21770:	bl	2c64c <__assert_fail@plt+0x1a058>
   21774:	cmp	r0, #8192	; 0x2000
   21778:	mov	r6, r0
   2177c:	bcs	217cc <__assert_fail@plt+0xf1d8>
   21780:	mov	r1, r0
   21784:	add	r0, sp, #8
   21788:	bl	2184c <__assert_fail@plt+0xf258>
   2178c:	mov	r3, r0
   21790:	mov	ip, #0
   21794:	add	r2, sp, #8
   21798:	mov	r1, r4
   2179c:	mov	r0, r7
   217a0:	strb	ip, [r2, r3]
   217a4:	bl	1233c <fprintf@plt>
   217a8:	mov	r4, r0
   217ac:	mov	r0, r4
   217b0:	add	sp, sp, #8192	; 0x2000
   217b4:	add	sp, sp, #12
   217b8:	ldrd	r4, [sp]
   217bc:	ldrd	r6, [sp, #8]
   217c0:	ldrd	r8, [sp, #16]
   217c4:	add	sp, sp, #24
   217c8:	pop	{pc}		; (ldr pc, [sp], #4)
   217cc:	add	r9, r0, #1
   217d0:	mov	r0, r9
   217d4:	bl	2da2c <__assert_fail@plt+0x1b438>
   217d8:	add	r2, sp, #8192	; 0x2000
   217dc:	mov	r8, r0
   217e0:	str	r5, [sp]
   217e4:	add	r2, r2, #40	; 0x28
   217e8:	mov	r1, r9
   217ec:	mvn	r3, #0
   217f0:	ldr	r2, [r2]
   217f4:	bl	2c64c <__assert_fail@plt+0x1a058>
   217f8:	mov	r1, r6
   217fc:	mov	r0, r8
   21800:	bl	2184c <__assert_fail@plt+0xf258>
   21804:	mov	r3, r0
   21808:	mov	ip, #0
   2180c:	mov	r1, r4
   21810:	mov	r0, r7
   21814:	mov	r2, r8
   21818:	strb	ip, [r8, r3]
   2181c:	bl	1233c <fprintf@plt>
   21820:	mov	r4, r0
   21824:	mov	r0, r8
   21828:	bl	2f668 <__assert_fail@plt+0x1d074>
   2182c:	b	217ac <__assert_fail@plt+0xf1b8>
   21830:	mov	r1, r3
   21834:	add	r3, sp, #8192	; 0x2000
   21838:	add	r3, r3, #40	; 0x28
   2183c:	ldr	r2, [r3]
   21840:	bl	1233c <fprintf@plt>
   21844:	mov	r4, r0
   21848:	b	217ac <__assert_fail@plt+0xf1b8>
   2184c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   21850:	mov	r5, r1
   21854:	strd	r6, [sp, #8]
   21858:	str	r8, [sp, #16]
   2185c:	strd	sl, [sp, #20]
   21860:	mov	sl, r0
   21864:	str	lr, [sp, #28]
   21868:	sub	sp, sp, #16
   2186c:	add	r7, sl, r5
   21870:	bl	12198 <__ctype_get_mb_cur_max@plt>
   21874:	cmp	r0, #1
   21878:	bls	219dc <__assert_fail@plt+0xf3e8>
   2187c:	cmp	sl, r7
   21880:	bcs	21a1c <__assert_fail@plt+0xf428>
   21884:	mov	r5, sl
   21888:	mov	r4, sl
   2188c:	mov	fp, #63	; 0x3f
   21890:	b	218bc <__assert_fail@plt+0xf2c8>
   21894:	cmp	r3, #37	; 0x25
   21898:	bcs	218a8 <__assert_fail@plt+0xf2b4>
   2189c:	sub	r2, r3, #32
   218a0:	cmp	r2, #3
   218a4:	bhi	218e8 <__assert_fail@plt+0xf2f4>
   218a8:	add	r4, r4, #1
   218ac:	strb	r3, [r5]
   218b0:	mov	r5, r6
   218b4:	cmp	r4, r7
   218b8:	bcs	219a0 <__assert_fail@plt+0xf3ac>
   218bc:	ldrb	r3, [r4]
   218c0:	add	r6, r5, #1
   218c4:	cmp	r3, #63	; 0x3f
   218c8:	bls	21894 <__assert_fail@plt+0xf2a0>
   218cc:	cmp	r3, #65	; 0x41
   218d0:	bcc	218e8 <__assert_fail@plt+0xf2f4>
   218d4:	cmp	r3, #95	; 0x5f
   218d8:	bls	218a8 <__assert_fail@plt+0xf2b4>
   218dc:	sub	r2, r3, #97	; 0x61
   218e0:	cmp	r2, #29
   218e4:	bls	218a8 <__assert_fail@plt+0xf2b4>
   218e8:	mov	r2, #0
   218ec:	mov	r3, #0
   218f0:	strd	r2, [sp, #8]
   218f4:	b	21928 <__assert_fail@plt+0xf334>
   218f8:	bl	11fa0 <wcwidth@plt>
   218fc:	cmp	r0, #0
   21900:	addlt	r3, r4, r8
   21904:	bge	21980 <__assert_fail@plt+0xf38c>
   21908:	mov	r4, r3
   2190c:	strb	fp, [r5]
   21910:	mov	r5, r6
   21914:	add	r0, sp, #8
   21918:	bl	12060 <mbsinit@plt>
   2191c:	cmp	r0, #0
   21920:	bne	218b4 <__assert_fail@plt+0xf2c0>
   21924:	add	r6, r5, #1
   21928:	add	r3, sp, #8
   2192c:	sub	r2, r7, r4
   21930:	mov	r1, r4
   21934:	add	r0, sp, #4
   21938:	bl	31b90 <__assert_fail@plt+0x1f59c>
   2193c:	cmn	r0, #1
   21940:	mov	r8, r0
   21944:	beq	219c0 <__assert_fail@plt+0xf3cc>
   21948:	cmn	r0, #2
   2194c:	beq	219d0 <__assert_fail@plt+0xf3dc>
   21950:	cmp	r0, #0
   21954:	ldr	r0, [sp, #4]
   21958:	bne	218f8 <__assert_fail@plt+0xf304>
   2195c:	bl	11fa0 <wcwidth@plt>
   21960:	cmp	r0, #0
   21964:	add	r3, r4, #1
   21968:	blt	21908 <__assert_fail@plt+0xf314>
   2196c:	ldrb	r2, [r4]
   21970:	mov	r4, r3
   21974:	strb	r2, [r5]
   21978:	mov	r5, r6
   2197c:	b	21914 <__assert_fail@plt+0xf320>
   21980:	sub	r2, r5, #1
   21984:	add	r0, r4, r8
   21988:	ldrb	r1, [r4], #1
   2198c:	cmp	r0, r4
   21990:	strb	r1, [r2, #1]!
   21994:	bne	21988 <__assert_fail@plt+0xf394>
   21998:	add	r5, r5, r8
   2199c:	b	21914 <__assert_fail@plt+0xf320>
   219a0:	sub	r0, r5, sl
   219a4:	add	sp, sp, #16
   219a8:	ldrd	r4, [sp]
   219ac:	ldrd	r6, [sp, #8]
   219b0:	ldr	r8, [sp, #16]
   219b4:	ldrd	sl, [sp, #20]
   219b8:	add	sp, sp, #28
   219bc:	pop	{pc}		; (ldr pc, [sp], #4)
   219c0:	add	r4, r4, #1
   219c4:	strb	fp, [r5]
   219c8:	mov	r5, r6
   219cc:	b	218b4 <__assert_fail@plt+0xf2c0>
   219d0:	mov	r4, r7
   219d4:	strb	fp, [r5]
   219d8:	b	219c8 <__assert_fail@plt+0xf3d4>
   219dc:	cmp	sl, r7
   219e0:	bcs	21a14 <__assert_fail@plt+0xf420>
   219e4:	bl	122b8 <__ctype_b_loc@plt>
   219e8:	sub	sl, sl, #1
   219ec:	sub	r7, r7, #1
   219f0:	mov	r1, #63	; 0x3f
   219f4:	ldrb	r3, [sl, #1]!
   219f8:	ldr	r2, [r0]
   219fc:	lsl	r3, r3, #1
   21a00:	ldrh	r3, [r2, r3]
   21a04:	tst	r3, #16384	; 0x4000
   21a08:	strbeq	r1, [sl]
   21a0c:	cmp	r7, sl
   21a10:	bne	219f4 <__assert_fail@plt+0xf400>
   21a14:	mov	r0, r5
   21a18:	b	219a4 <__assert_fail@plt+0xf3b0>
   21a1c:	mov	r0, #0
   21a20:	b	219a4 <__assert_fail@plt+0xf3b0>
   21a24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21a28:	movw	r4, #27664	; 0x6c10
   21a2c:	movt	r4, #4
   21a30:	strd	r6, [sp, #8]
   21a34:	movw	r6, #27508	; 0x6b74
   21a38:	movt	r6, #4
   21a3c:	mov	r7, #0
   21a40:	strd	r8, [sp, #16]
   21a44:	mov	r8, r0
   21a48:	mov	r9, r6
   21a4c:	mov	r5, r7
   21a50:	strd	sl, [sp, #24]
   21a54:	mov	sl, r6
   21a58:	str	lr, [sp, #32]
   21a5c:	sub	sp, sp, #12
   21a60:	b	21a68 <__assert_fail@plt+0xf474>
   21a64:	ldr	r4, [sl, #12]!
   21a68:	mov	r1, r8
   21a6c:	mov	r0, r4
   21a70:	bl	11f40 <strcmp@plt>
   21a74:	cmp	r0, #0
   21a78:	beq	21b60 <__assert_fail@plt+0xf56c>
   21a7c:	mov	r0, r4
   21a80:	add	r5, r5, #1
   21a84:	bl	2cc14 <__assert_fail@plt+0x1a620>
   21a88:	bl	12300 <strlen@plt>
   21a8c:	add	r0, r0, #2
   21a90:	cmp	r5, #13
   21a94:	add	r7, r7, r0
   21a98:	bne	21a64 <__assert_fail@plt+0xf470>
   21a9c:	add	r0, r7, #1
   21aa0:	movw	sl, #17808	; 0x4590
   21aa4:	movt	sl, #4
   21aa8:	movw	r9, #28236	; 0x6e4c
   21aac:	movt	r9, #4
   21ab0:	mov	r4, #0
   21ab4:	bl	2da2c <__assert_fail@plt+0x1b438>
   21ab8:	mov	fp, r0
   21abc:	movw	r0, #27664	; 0x6c10
   21ac0:	movt	r0, #4
   21ac4:	mov	r5, fp
   21ac8:	b	21aec <__assert_fail@plt+0xf4f8>
   21acc:	bl	2cc14 <__assert_fail@plt+0x1a620>
   21ad0:	mov	r2, r0
   21ad4:	mov	r1, r9
   21ad8:	mov	r0, r5
   21adc:	bl	124b0 <sprintf@plt>
   21ae0:	add	r5, r5, r0
   21ae4:	ldr	r0, [r6, #12]!
   21ae8:	add	r4, r4, #1
   21aec:	cmp	r4, #0
   21af0:	beq	21acc <__assert_fail@plt+0xf4d8>
   21af4:	ldrh	r2, [sl]
   21af8:	mov	r7, r5
   21afc:	ldrb	r3, [sl, #2]
   21b00:	strh	r2, [r5]
   21b04:	strb	r3, [r7, #2]!
   21b08:	bl	2cc14 <__assert_fail@plt+0x1a620>
   21b0c:	mov	r2, r0
   21b10:	mov	r1, r9
   21b14:	mov	r0, r7
   21b18:	bl	124b0 <sprintf@plt>
   21b1c:	cmp	r4, #12
   21b20:	add	r5, r7, r0
   21b24:	bne	21ae4 <__assert_fail@plt+0xf4f0>
   21b28:	mov	r2, #5
   21b2c:	movw	r1, #27684	; 0x6c24
   21b30:	movt	r1, #4
   21b34:	mov	r0, #0
   21b38:	bl	120b4 <dcgettext@plt>
   21b3c:	mov	r4, r0
   21b40:	mov	r0, r8
   21b44:	bl	2cc14 <__assert_fail@plt+0x1a620>
   21b48:	mov	r3, r0
   21b4c:	mov	r2, r4
   21b50:	str	fp, [sp]
   21b54:	mov	r1, #0
   21b58:	mov	r0, #1
   21b5c:	bl	121ec <error@plt>
   21b60:	add	r5, r5, r5, lsl #1
   21b64:	add	r5, r9, r5, lsl #2
   21b68:	ldr	r0, [r5, #8]
   21b6c:	add	sp, sp, #12
   21b70:	ldrd	r4, [sp]
   21b74:	ldrd	r6, [sp, #8]
   21b78:	ldrd	r8, [sp, #16]
   21b7c:	ldrd	sl, [sp, #24]
   21b80:	add	sp, sp, #32
   21b84:	pop	{pc}		; (ldr pc, [sp], #4)
   21b88:	cmp	r0, #12
   21b8c:	bhi	21ba4 <__assert_fail@plt+0xf5b0>
   21b90:	add	r0, r0, r0, lsl #1
   21b94:	movw	r3, #27508	; 0x6b74
   21b98:	movt	r3, #4
   21b9c:	ldr	r0, [r3, r0, lsl #2]
   21ba0:	bx	lr
   21ba4:	mov	r0, #0
   21ba8:	bx	lr
   21bac:	cmp	r0, #12
   21bb0:	bhi	21bcc <__assert_fail@plt+0xf5d8>
   21bb4:	add	r0, r0, r0, lsl #1
   21bb8:	movw	r3, #27508	; 0x6b74
   21bbc:	movt	r3, #4
   21bc0:	add	r0, r3, r0, lsl #2
   21bc4:	ldr	r0, [r0, #8]
   21bc8:	bx	lr
   21bcc:	mvn	r0, #0
   21bd0:	bx	lr
   21bd4:	cmp	r0, #12
   21bd8:	bhi	21bf4 <__assert_fail@plt+0xf600>
   21bdc:	add	r0, r0, r0, lsl #1
   21be0:	movw	r3, #27508	; 0x6b74
   21be4:	movt	r3, #4
   21be8:	add	r0, r3, r0, lsl #2
   21bec:	ldr	r0, [r0, #4]
   21bf0:	bx	lr
   21bf4:	mov	r0, #0
   21bf8:	bx	lr
   21bfc:	cmp	r0, #12
   21c00:	bhi	21c68 <__assert_fail@plt+0xf674>
   21c04:	add	r2, r0, r0, lsl #1
   21c08:	movw	r3, #27508	; 0x6b74
   21c0c:	movt	r3, #4
   21c10:	cmp	r0, #0
   21c14:	push	{lr}		; (str lr, [sp, #-4]!)
   21c18:	add	r2, r3, r2, lsl #2
   21c1c:	ldr	lr, [r2, #8]
   21c20:	beq	21c58 <__assert_fail@plt+0xf664>
   21c24:	mov	ip, #1
   21c28:	mov	r2, #0
   21c2c:	b	21c34 <__assert_fail@plt+0xf640>
   21c30:	ldr	ip, [r3, #4]
   21c34:	tst	ip, r1
   21c38:	beq	21c48 <__assert_fail@plt+0xf654>
   21c3c:	ldr	ip, [r3, #8]
   21c40:	cmp	ip, lr
   21c44:	beq	21c60 <__assert_fail@plt+0xf66c>
   21c48:	add	r2, r2, #1
   21c4c:	add	r3, r3, #12
   21c50:	cmp	r0, r2
   21c54:	bne	21c30 <__assert_fail@plt+0xf63c>
   21c58:	mvn	r0, #0
   21c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   21c60:	mov	r0, r2
   21c64:	pop	{pc}		; (ldr pc, [sp], #4)
   21c68:	mvn	r0, #0
   21c6c:	bx	lr
   21c70:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21c74:	mov	r4, r0
   21c78:	strd	r6, [sp, #8]
   21c7c:	mov	r7, r1
   21c80:	mov	r6, #0
   21c84:	str	r8, [sp, #16]
   21c88:	str	lr, [sp, #20]
   21c8c:	sub	sp, sp, #16
   21c90:	bl	12348 <__errno_location@plt>
   21c94:	mov	r5, r0
   21c98:	mov	r2, #10
   21c9c:	mov	r0, r4
   21ca0:	add	r1, sp, #12
   21ca4:	str	r6, [r5]
   21ca8:	bl	11f4c <strtol@plt>
   21cac:	sub	r3, r0, #-2147483647	; 0x80000001
   21cb0:	cmn	r3, #3
   21cb4:	bls	21cd0 <__assert_fail@plt+0xf6dc>
   21cb8:	ldr	r1, [r5]
   21cbc:	movw	r2, #28236	; 0x6e4c
   21cc0:	movt	r2, #4
   21cc4:	mov	r3, r4
   21cc8:	mov	r0, #1
   21ccc:	bl	121ec <error@plt>
   21cd0:	ldr	r3, [sp, #12]
   21cd4:	ldrb	r8, [r3]
   21cd8:	cmp	r8, #0
   21cdc:	bne	21d00 <__assert_fail@plt+0xf70c>
   21ce0:	cmp	r4, r3
   21ce4:	beq	21d58 <__assert_fail@plt+0xf764>
   21ce8:	add	sp, sp, #16
   21cec:	ldrd	r4, [sp]
   21cf0:	ldrd	r6, [sp, #8]
   21cf4:	ldr	r8, [sp, #16]
   21cf8:	add	sp, sp, #20
   21cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   21d00:	mov	r2, #5
   21d04:	mov	r0, r6
   21d08:	ldr	r5, [r5]
   21d0c:	movw	r1, #27848	; 0x6cc8
   21d10:	movt	r1, #4
   21d14:	bl	120b4 <dcgettext@plt>
   21d18:	mov	r8, r0
   21d1c:	mov	r1, r7
   21d20:	ldr	r2, [sp, #12]
   21d24:	mov	r0, r6
   21d28:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   21d2c:	mov	r6, r0
   21d30:	mov	r2, r4
   21d34:	mov	r1, r7
   21d38:	mov	r0, #1
   21d3c:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   21d40:	mov	r3, r6
   21d44:	mov	r2, r8
   21d48:	str	r0, [sp]
   21d4c:	mov	r1, r5
   21d50:	mov	r0, #1
   21d54:	bl	121ec <error@plt>
   21d58:	ldr	r5, [r5]
   21d5c:	mov	r2, #5
   21d60:	movw	r1, #27876	; 0x6ce4
   21d64:	movt	r1, #4
   21d68:	mov	r0, r8
   21d6c:	bl	120b4 <dcgettext@plt>
   21d70:	mov	r6, r0
   21d74:	mov	r2, r4
   21d78:	mov	r1, r7
   21d7c:	mov	r0, r8
   21d80:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   21d84:	mov	r3, r0
   21d88:	mov	r2, r6
   21d8c:	mov	r1, r5
   21d90:	mov	r0, #1
   21d94:	b	21ccc <__assert_fail@plt+0xf6d8>
   21d98:	cmp	r2, #0
   21d9c:	strd	r4, [sp, #-16]!
   21da0:	str	r6, [sp, #8]
   21da4:	str	lr, [sp, #12]
   21da8:	ldr	r5, [sp, #16]
   21dac:	beq	21e0c <__assert_fail@plt+0xf818>
   21db0:	mov	r2, #0
   21db4:	str	r2, [r3]
   21db8:	str	r2, [r5]
   21dbc:	ldr	r4, [r3]
   21dc0:	ldrb	r3, [r1]
   21dc4:	add	r4, r0, r4
   21dc8:	cmp	r3, #0
   21dcc:	bne	21df4 <__assert_fail@plt+0xf800>
   21dd0:	mov	r0, r4
   21dd4:	bl	12300 <strlen@plt>
   21dd8:	mov	r4, r0
   21ddc:	mov	r0, #1
   21de0:	str	r4, [r5]
   21de4:	ldrd	r4, [sp]
   21de8:	ldr	r6, [sp, #8]
   21dec:	add	sp, sp, #12
   21df0:	pop	{pc}		; (ldr pc, [sp], #4)
   21df4:	mov	r0, r4
   21df8:	bl	12528 <strpbrk@plt>
   21dfc:	cmp	r0, #0
   21e00:	subne	r4, r0, r4
   21e04:	bne	21ddc <__assert_fail@plt+0xf7e8>
   21e08:	b	21dd0 <__assert_fail@plt+0xf7dc>
   21e0c:	ldr	r2, [r5]
   21e10:	ldr	r4, [r3]
   21e14:	add	r4, r4, r2
   21e18:	str	r4, [r3]
   21e1c:	ldrb	r2, [r0, r4]
   21e20:	cmp	r2, #0
   21e24:	moveq	r0, r2
   21e28:	beq	21de4 <__assert_fail@plt+0xf7f0>
   21e2c:	add	r4, r4, #1
   21e30:	str	r4, [r3]
   21e34:	add	r4, r0, r4
   21e38:	ldrb	r3, [r1]
   21e3c:	cmp	r3, #0
   21e40:	beq	21dd0 <__assert_fail@plt+0xf7dc>
   21e44:	b	21df4 <__assert_fail@plt+0xf800>
   21e48:	mov	r2, #5
   21e4c:	strd	r4, [sp, #-12]!
   21e50:	mov	r5, r1
   21e54:	mov	r4, r0
   21e58:	movw	r1, #27900	; 0x6cfc
   21e5c:	movt	r1, #4
   21e60:	mov	r0, #0
   21e64:	str	lr, [sp, #8]
   21e68:	sub	sp, sp, #20
   21e6c:	bl	120b4 <dcgettext@plt>
   21e70:	movw	r1, #28148	; 0x6df4
   21e74:	movt	r1, #4
   21e78:	movw	r2, #28172	; 0x6e0c
   21e7c:	movt	r2, #4
   21e80:	movw	ip, #27308	; 0x6aac
   21e84:	movt	ip, #4
   21e88:	mov	r3, r5
   21e8c:	str	ip, [sp]
   21e90:	str	r2, [sp, #4]
   21e94:	movw	r2, #28108	; 0x6dcc
   21e98:	movt	r2, #4
   21e9c:	str	r1, [sp, #8]
   21ea0:	mov	r1, r0
   21ea4:	mov	r0, r4
   21ea8:	bl	1233c <fprintf@plt>
   21eac:	add	sp, sp, #20
   21eb0:	ldrd	r4, [sp]
   21eb4:	add	sp, sp, #8
   21eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   21ebc:	mov	ip, #0
   21ec0:	movw	r2, #8792	; 0x2258
   21ec4:	movt	r2, #1
   21ec8:	push	{lr}		; (str lr, [sp, #-4]!)
   21ecc:	sub	sp, sp, #12
   21ed0:	mov	r3, ip
   21ed4:	str	ip, [sp]
   21ed8:	str	r2, [sp, #4]
   21edc:	mov	r2, ip
   21ee0:	bl	22074 <__assert_fail@plt+0xfa80>
   21ee4:	add	sp, sp, #12
   21ee8:	pop	{pc}		; (ldr pc, [sp], #4)
   21eec:	str	r4, [sp, #-8]!
   21ef0:	mov	r4, r0
   21ef4:	mov	r0, #24
   21ef8:	str	lr, [sp, #4]
   21efc:	bl	31b54 <__assert_fail@plt+0x1f560>
   21f00:	cmp	r0, #0
   21f04:	beq	21f18 <__assert_fail@plt+0xf924>
   21f08:	mov	r3, #0
   21f0c:	str	r3, [r0]
   21f10:	str	r4, [r0, #16]
   21f14:	str	r4, [r0, #20]
   21f18:	ldr	r4, [sp]
   21f1c:	add	sp, sp, #4
   21f20:	pop	{pc}		; (ldr pc, [sp], #4)
   21f24:	str	r4, [sp, #-8]!
   21f28:	mov	r4, r0
   21f2c:	mov	r0, #24
   21f30:	str	lr, [sp, #4]
   21f34:	bl	31b54 <__assert_fail@plt+0x1f560>
   21f38:	cmp	r0, #0
   21f3c:	beq	21f58 <__assert_fail@plt+0xf964>
   21f40:	mov	r3, #0
   21f44:	str	r4, [r0]
   21f48:	str	r3, [r0, #4]
   21f4c:	str	r3, [r0, #8]
   21f50:	str	r3, [r0, #12]
   21f54:	str	r3, [r0, #16]
   21f58:	ldr	r4, [sp]
   21f5c:	add	sp, sp, #4
   21f60:	pop	{pc}		; (ldr pc, [sp], #4)
   21f64:	ldr	r3, [r0]
   21f68:	cmp	r3, #0
   21f6c:	beq	21fc8 <__assert_fail@plt+0xf9d4>
   21f70:	mov	r2, #0
   21f74:	strd	r4, [sp, #-16]!
   21f78:	mov	r5, r1
   21f7c:	mov	r4, r0
   21f80:	add	r1, r0, #12
   21f84:	str	r6, [sp, #8]
   21f88:	add	r0, r0, #8
   21f8c:	str	lr, [sp, #12]
   21f90:	bl	1254c <getdelim@plt>
   21f94:	cmp	r0, #0
   21f98:	blt	21ff8 <__assert_fail@plt+0xfa04>
   21f9c:	mov	r3, #1
   21fa0:	ldr	r2, [r4, #4]
   21fa4:	str	r3, [r5]
   21fa8:	ldr	r3, [r4, #8]
   21fac:	add	r2, r2, #1
   21fb0:	str	r2, [r4, #4]
   21fb4:	ldrd	r4, [sp]
   21fb8:	mov	r0, r3
   21fbc:	ldr	r6, [sp, #8]
   21fc0:	add	sp, sp, #12
   21fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   21fc8:	ldr	r2, [r0, #20]
   21fcc:	ldr	r3, [r2]
   21fd0:	cmp	r3, #0
   21fd4:	moveq	r2, #2
   21fd8:	streq	r2, [r1]
   21fdc:	beq	21ff0 <__assert_fail@plt+0xf9fc>
   21fe0:	add	r2, r2, #4
   21fe4:	mov	ip, #1
   21fe8:	str	ip, [r1]
   21fec:	str	r2, [r0, #20]
   21ff0:	mov	r0, r3
   21ff4:	bx	lr
   21ff8:	ldr	r0, [r4]
   21ffc:	bl	122dc <feof@plt>
   22000:	cmp	r0, #0
   22004:	mov	r3, #0
   22008:	movne	r2, #2
   2200c:	moveq	r2, #4
   22010:	str	r2, [r5]
   22014:	b	21fb4 <__assert_fail@plt+0xf9c0>
   22018:	ldr	r3, [r0]
   2201c:	cmp	r3, #0
   22020:	beq	2202c <__assert_fail@plt+0xfa38>
   22024:	ldr	r0, [r0, #4]
   22028:	bx	lr
   2202c:	ldr	r3, [r0, #16]
   22030:	ldr	r0, [r0, #20]
   22034:	sub	r0, r0, r3
   22038:	asr	r0, r0, #2
   2203c:	bx	lr
   22040:	ldr	r3, [r0]
   22044:	str	r4, [sp, #-8]!
   22048:	mov	r4, r0
   2204c:	str	lr, [sp, #4]
   22050:	cmp	r3, #0
   22054:	beq	22060 <__assert_fail@plt+0xfa6c>
   22058:	ldr	r0, [r0, #8]
   2205c:	bl	2f668 <__assert_fail@plt+0x1d074>
   22060:	mov	r0, r4
   22064:	ldr	r4, [sp]
   22068:	ldr	lr, [sp, #4]
   2206c:	add	sp, sp, #8
   22070:	b	2f668 <__assert_fail@plt+0x1d074>
   22074:	strd	r4, [sp, #-32]!	; 0xffffffe0
   22078:	movw	ip, #34416	; 0x8670
   2207c:	movt	ip, #4
   22080:	strd	r6, [sp, #8]
   22084:	strd	r8, [sp, #16]
   22088:	mov	r8, r0
   2208c:	mov	r9, r1
   22090:	str	sl, [sp, #24]
   22094:	str	lr, [sp, #28]
   22098:	sub	sp, sp, #1024	; 0x400
   2209c:	ldr	r6, [sp, #1056]	; 0x420
   220a0:	ldr	sl, [sp, #1060]	; 0x424
   220a4:	cmp	r6, #0
   220a8:	moveq	r6, ip
   220ac:	subs	r7, r2, #0
   220b0:	beq	22164 <__assert_fail@plt+0xfb70>
   220b4:	mvn	r4, #-2147483648	; 0x80000000
   220b8:	cmp	r3, r4
   220bc:	movcc	r4, r3
   220c0:	mov	r5, r7
   220c4:	mov	r3, r4
   220c8:	mov	r2, r5
   220cc:	mov	r1, r9
   220d0:	mov	r0, r8
   220d4:	blx	sl
   220d8:	subs	r3, r0, #0
   220dc:	mov	r0, r5
   220e0:	blt	22170 <__assert_fail@plt+0xfb7c>
   220e4:	cmp	r3, r4
   220e8:	blt	221a0 <__assert_fail@plt+0xfbac>
   220ec:	cmp	r7, r5
   220f0:	beq	220fc <__assert_fail@plt+0xfb08>
   220f4:	ldr	r3, [r6, #8]
   220f8:	blx	r3
   220fc:	cmn	r4, #-1073741822	; 0xc0000002
   22100:	lsl	r3, r4, #1
   22104:	bgt	221e4 <__assert_fail@plt+0xfbf0>
   22108:	add	r4, r3, #1
   2210c:	ldr	r3, [r6]
   22110:	mov	r0, r4
   22114:	blx	r3
   22118:	subs	r5, r0, #0
   2211c:	bne	220c4 <__assert_fail@plt+0xfad0>
   22120:	ldr	r3, [r6, #12]
   22124:	cmp	r3, #0
   22128:	beq	22134 <__assert_fail@plt+0xfb40>
   2212c:	mov	r0, r4
   22130:	blx	r3
   22134:	bl	12348 <__errno_location@plt>
   22138:	mov	r5, #0
   2213c:	mov	r3, #12
   22140:	str	r3, [r0]
   22144:	mov	r0, r5
   22148:	add	sp, sp, #1024	; 0x400
   2214c:	ldrd	r4, [sp]
   22150:	ldrd	r6, [sp, #8]
   22154:	ldrd	r8, [sp, #16]
   22158:	ldr	sl, [sp, #24]
   2215c:	add	sp, sp, #28
   22160:	pop	{pc}		; (ldr pc, [sp], #4)
   22164:	mov	r4, #1024	; 0x400
   22168:	mov	r7, sp
   2216c:	b	220c0 <__assert_fail@plt+0xfacc>
   22170:	cmp	r7, r5
   22174:	moveq	r5, #0
   22178:	beq	22144 <__assert_fail@plt+0xfb50>
   2217c:	bl	12348 <__errno_location@plt>
   22180:	mov	r4, r0
   22184:	ldr	r3, [r6, #8]
   22188:	mov	r0, r5
   2218c:	mov	r5, #0
   22190:	ldr	r6, [r4]
   22194:	blx	r3
   22198:	str	r6, [r4]
   2219c:	b	22144 <__assert_fail@plt+0xfb50>
   221a0:	mov	r2, #0
   221a4:	mov	r1, sp
   221a8:	cmp	r5, r1
   221ac:	add	r8, r3, #1
   221b0:	strb	r2, [r5, r3]
   221b4:	beq	221f8 <__assert_fail@plt+0xfc04>
   221b8:	cmp	r7, r5
   221bc:	cmpne	r8, r4
   221c0:	bge	22144 <__assert_fail@plt+0xfb50>
   221c4:	ldr	r3, [r6, #4]
   221c8:	cmp	r3, #0
   221cc:	beq	22144 <__assert_fail@plt+0xfb50>
   221d0:	mov	r1, r8
   221d4:	blx	r3
   221d8:	cmp	r0, #0
   221dc:	movne	r5, r0
   221e0:	b	22144 <__assert_fail@plt+0xfb50>
   221e4:	bl	12348 <__errno_location@plt>
   221e8:	mov	r3, #36	; 0x24
   221ec:	mov	r5, #0
   221f0:	str	r3, [r0]
   221f4:	b	22144 <__assert_fail@plt+0xfb50>
   221f8:	mov	r0, r8
   221fc:	ldr	r3, [r6]
   22200:	blx	r3
   22204:	cmp	r0, #0
   22208:	beq	22220 <__assert_fail@plt+0xfc2c>
   2220c:	mov	r1, r5
   22210:	mov	r2, r8
   22214:	bl	12024 <memcpy@plt>
   22218:	mov	r5, r0
   2221c:	b	22144 <__assert_fail@plt+0xfb50>
   22220:	mov	r4, r8
   22224:	b	22120 <__assert_fail@plt+0xfb2c>
   22228:	mov	r2, #0
   2222c:	strd	r4, [sp, #-16]!
   22230:	mov	r4, r1
   22234:	mov	r1, #1
   22238:	mov	r5, r0
   2223c:	str	r6, [sp, #8]
   22240:	str	lr, [sp, #12]
   22244:	bl	2f420 <__assert_fail@plt+0x1ce2c>
   22248:	cmp	r0, #0
   2224c:	blt	22294 <__assert_fail@plt+0xfca0>
   22250:	cmp	r4, #0
   22254:	biceq	r2, r0, #1
   22258:	orrne	r2, r0, #1
   2225c:	cmp	r2, r0
   22260:	moveq	r0, #0
   22264:	beq	22284 <__assert_fail@plt+0xfc90>
   22268:	mov	r0, r5
   2226c:	mov	r1, #2
   22270:	bl	2f420 <__assert_fail@plt+0x1ce2c>
   22274:	cmn	r0, #1
   22278:	movne	r0, #0
   2227c:	moveq	r0, #1
   22280:	rsb	r0, r0, #0
   22284:	ldrd	r4, [sp]
   22288:	ldr	r6, [sp, #8]
   2228c:	add	sp, sp, #12
   22290:	pop	{pc}		; (ldr pc, [sp], #4)
   22294:	mvn	r0, #0
   22298:	b	22284 <__assert_fail@plt+0xfc90>
   2229c:	mov	r2, #0
   222a0:	movw	r1, #1030	; 0x406
   222a4:	b	2f420 <__assert_fail@plt+0x1ce2c>
   222a8:	movw	r3, #40172	; 0x9cec
   222ac:	movt	r3, #5
   222b0:	str	r0, [r3]
   222b4:	bx	lr
   222b8:	movw	r3, #40172	; 0x9cec
   222bc:	movt	r3, #5
   222c0:	strb	r0, [r3, #4]
   222c4:	bx	lr
   222c8:	movw	r3, #38228	; 0x9554
   222cc:	movt	r3, #5
   222d0:	strd	r4, [sp, #-16]!
   222d4:	ldr	r0, [r3]
   222d8:	str	r6, [sp, #8]
   222dc:	str	lr, [sp, #12]
   222e0:	sub	sp, sp, #8
   222e4:	bl	41840 <__assert_fail@plt+0x2f24c>
   222e8:	cmp	r0, #0
   222ec:	beq	22318 <__assert_fail@plt+0xfd24>
   222f0:	movw	r4, #40172	; 0x9cec
   222f4:	movt	r4, #5
   222f8:	ldrb	r6, [r4, #4]
   222fc:	bl	12348 <__errno_location@plt>
   22300:	mov	r5, r0
   22304:	cmp	r6, #0
   22308:	beq	22344 <__assert_fail@plt+0xfd50>
   2230c:	ldr	r3, [r0]
   22310:	cmp	r3, #32
   22314:	bne	22344 <__assert_fail@plt+0xfd50>
   22318:	movw	r3, #38216	; 0x9548
   2231c:	movt	r3, #5
   22320:	ldr	r0, [r3]
   22324:	bl	41840 <__assert_fail@plt+0x2f24c>
   22328:	cmp	r0, #0
   2232c:	bne	2238c <__assert_fail@plt+0xfd98>
   22330:	add	sp, sp, #8
   22334:	ldrd	r4, [sp]
   22338:	ldr	r6, [sp, #8]
   2233c:	add	sp, sp, #12
   22340:	pop	{pc}		; (ldr pc, [sp], #4)
   22344:	movw	r1, #28220	; 0x6e3c
   22348:	movt	r1, #4
   2234c:	mov	r2, #5
   22350:	mov	r0, #0
   22354:	bl	120b4 <dcgettext@plt>
   22358:	mov	r6, r0
   2235c:	ldr	r0, [r4]
   22360:	cmp	r0, #0
   22364:	beq	2239c <__assert_fail@plt+0xfda8>
   22368:	ldr	r4, [r5]
   2236c:	bl	2ca28 <__assert_fail@plt+0x1a434>
   22370:	mov	r3, r0
   22374:	movw	r2, #28232	; 0x6e48
   22378:	movt	r2, #4
   2237c:	mov	r0, #0
   22380:	str	r6, [sp]
   22384:	mov	r1, r4
   22388:	bl	121ec <error@plt>
   2238c:	movw	r3, #38128	; 0x94f0
   22390:	movt	r3, #5
   22394:	ldr	r0, [r3]
   22398:	bl	12018 <_exit@plt>
   2239c:	mov	r3, r6
   223a0:	movw	r2, #28236	; 0x6e4c
   223a4:	movt	r2, #4
   223a8:	ldr	r1, [r5]
   223ac:	bl	121ec <error@plt>
   223b0:	b	2238c <__assert_fail@plt+0xfd98>
   223b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   223b8:	strd	r6, [sp, #8]
   223bc:	str	r8, [sp, #16]
   223c0:	str	lr, [sp, #20]
   223c4:	bl	12204 <opendir@plt>
   223c8:	subs	r4, r0, #0
   223cc:	beq	223dc <__assert_fail@plt+0xfde8>
   223d0:	bl	124ec <dirfd@plt>
   223d4:	cmp	r0, #2
   223d8:	bls	223f4 <__assert_fail@plt+0xfe00>
   223dc:	mov	r0, r4
   223e0:	ldrd	r4, [sp]
   223e4:	ldrd	r6, [sp, #8]
   223e8:	ldr	r8, [sp, #16]
   223ec:	add	sp, sp, #20
   223f0:	pop	{pc}		; (ldr pc, [sp], #4)
   223f4:	mov	r2, #3
   223f8:	movw	r1, #1030	; 0x406
   223fc:	bl	2f420 <__assert_fail@plt+0x1ce2c>
   22400:	mov	r6, r0
   22404:	bl	12348 <__errno_location@plt>
   22408:	cmp	r6, #0
   2240c:	mov	r5, r0
   22410:	bge	22430 <__assert_fail@plt+0xfe3c>
   22414:	ldr	r7, [r0]
   22418:	mov	r8, #0
   2241c:	mov	r0, r4
   22420:	mov	r4, r8
   22424:	bl	125c4 <closedir@plt>
   22428:	str	r7, [r5]
   2242c:	b	223dc <__assert_fail@plt+0xfde8>
   22430:	mov	r0, r6
   22434:	bl	124c8 <fdopendir@plt>
   22438:	subs	r8, r0, #0
   2243c:	ldr	r7, [r5]
   22440:	bne	2241c <__assert_fail@plt+0xfe28>
   22444:	mov	r0, r6
   22448:	bl	125ac <close@plt>
   2244c:	b	2241c <__assert_fail@plt+0xfe28>
   22450:	strd	r4, [sp, #-16]!
   22454:	mov	r5, r0
   22458:	str	r6, [sp, #8]
   2245c:	str	lr, [sp, #12]
   22460:	bl	41788 <__assert_fail@plt+0x2f194>
   22464:	ldrb	r3, [r0]
   22468:	cmp	r3, #0
   2246c:	beq	224b4 <__assert_fail@plt+0xfec0>
   22470:	mov	r4, r0
   22474:	bl	417d8 <__assert_fail@plt+0x2f1e4>
   22478:	ldrb	r3, [r4, r0]
   2247c:	cmp	r3, #47	; 0x2f
   22480:	addeq	r0, r0, #1
   22484:	mov	r5, r0
   22488:	add	r0, r0, #1
   2248c:	bl	2da50 <__assert_fail@plt+0x1b45c>
   22490:	mov	r2, r5
   22494:	mov	r1, r4
   22498:	bl	12024 <memcpy@plt>
   2249c:	mov	r2, #0
   224a0:	strb	r2, [r0, r5]
   224a4:	ldrd	r4, [sp]
   224a8:	ldr	r6, [sp, #8]
   224ac:	add	sp, sp, #12
   224b0:	pop	{pc}		; (ldr pc, [sp], #4)
   224b4:	mov	r0, r5
   224b8:	mov	r4, r5
   224bc:	bl	417d8 <__assert_fail@plt+0x2f1e4>
   224c0:	mov	r5, r0
   224c4:	b	22488 <__assert_fail@plt+0xfe94>
   224c8:	strd	r4, [sp, #-16]!
   224cc:	mov	r4, r0
   224d0:	str	r6, [sp, #8]
   224d4:	str	lr, [sp, #12]
   224d8:	ldrb	ip, [r0]
   224dc:	sub	r5, ip, #47	; 0x2f
   224e0:	clz	r5, r5
   224e4:	bl	41788 <__assert_fail@plt+0x2f194>
   224e8:	lsr	r5, r5, #5
   224ec:	sub	r0, r0, r4
   224f0:	cmp	r0, r5
   224f4:	bls	22538 <__assert_fail@plt+0xff44>
   224f8:	add	r3, r4, r0
   224fc:	ldrb	r3, [r3, #-1]
   22500:	cmp	r3, #47	; 0x2f
   22504:	bne	22538 <__assert_fail@plt+0xff44>
   22508:	sub	r0, r0, #2
   2250c:	sub	ip, r4, #1
   22510:	add	r3, r4, r0
   22514:	add	ip, ip, r5
   22518:	rsb	r2, r4, #1
   2251c:	b	2252c <__assert_fail@plt+0xff38>
   22520:	ldrb	r1, [r3], #-1
   22524:	cmp	r1, #47	; 0x2f
   22528:	bne	22538 <__assert_fail@plt+0xff44>
   2252c:	cmp	r3, ip
   22530:	add	r0, r2, r3
   22534:	bne	22520 <__assert_fail@plt+0xff2c>
   22538:	ldrd	r4, [sp]
   2253c:	ldr	r6, [sp, #8]
   22540:	add	sp, sp, #12
   22544:	pop	{pc}		; (ldr pc, [sp], #4)
   22548:	strd	r4, [sp, #-16]!
   2254c:	str	r6, [sp, #8]
   22550:	mov	r6, r0
   22554:	str	lr, [sp, #12]
   22558:	bl	224c8 <__assert_fail@plt+0xfed4>
   2255c:	add	r3, r0, #1
   22560:	mov	r4, r0
   22564:	cmp	r0, #0
   22568:	movne	r0, r3
   2256c:	addeq	r0, r3, #1
   22570:	bl	31b54 <__assert_fail@plt+0x1f560>
   22574:	subs	r5, r0, #0
   22578:	beq	22598 <__assert_fail@plt+0xffa4>
   2257c:	mov	r1, r6
   22580:	mov	r2, r4
   22584:	bl	12024 <memcpy@plt>
   22588:	cmp	r4, #0
   2258c:	beq	225ac <__assert_fail@plt+0xffb8>
   22590:	mov	r3, #0
   22594:	strb	r3, [r5, r4]
   22598:	mov	r0, r5
   2259c:	ldrd	r4, [sp]
   225a0:	ldr	r6, [sp, #8]
   225a4:	add	sp, sp, #12
   225a8:	pop	{pc}		; (ldr pc, [sp], #4)
   225ac:	mov	r3, #46	; 0x2e
   225b0:	mov	r4, #1
   225b4:	strb	r3, [r5]
   225b8:	b	22590 <__assert_fail@plt+0xff9c>
   225bc:	str	r4, [sp, #-8]!
   225c0:	mov	r4, r0
   225c4:	str	lr, [sp, #4]
   225c8:	bl	41788 <__assert_fail@plt+0x2f194>
   225cc:	ldrb	r3, [r0]
   225d0:	cmp	r3, #0
   225d4:	movne	r4, r0
   225d8:	mov	r0, r4
   225dc:	bl	417d8 <__assert_fail@plt+0x2f1e4>
   225e0:	ldrb	r3, [r4, r0]
   225e4:	mov	r2, #0
   225e8:	strb	r2, [r4, r0]
   225ec:	ldr	r4, [sp]
   225f0:	add	sp, sp, #4
   225f4:	subs	r0, r3, r2
   225f8:	movne	r0, #1
   225fc:	pop	{pc}		; (ldr pc, [sp], #4)
   22600:	push	{r1, r2, r3}
   22604:	push	{lr}		; (str lr, [sp, #-4]!)
   22608:	sub	sp, sp, #8
   2260c:	ldr	r1, [sp, #12]
   22610:	ands	r2, r1, #64	; 0x40
   22614:	bne	22630 <__assert_fail@plt+0x1003c>
   22618:	bl	1221c <open64@plt>
   2261c:	bl	2d488 <__assert_fail@plt+0x1ae94>
   22620:	add	sp, sp, #8
   22624:	pop	{lr}		; (ldr lr, [sp], #4)
   22628:	add	sp, sp, #12
   2262c:	bx	lr
   22630:	add	r3, sp, #16
   22634:	ldr	r2, [sp, #16]
   22638:	str	r3, [sp, #4]
   2263c:	b	22618 <__assert_fail@plt+0x10024>
   22640:	and	r3, r0, #61440	; 0xf000
   22644:	cmp	r3, #32768	; 0x8000
   22648:	moveq	r2, #45	; 0x2d
   2264c:	beq	22698 <__assert_fail@plt+0x100a4>
   22650:	cmp	r3, #16384	; 0x4000
   22654:	moveq	r2, #100	; 0x64
   22658:	beq	22698 <__assert_fail@plt+0x100a4>
   2265c:	cmp	r3, #24576	; 0x6000
   22660:	moveq	r2, #98	; 0x62
   22664:	beq	22698 <__assert_fail@plt+0x100a4>
   22668:	cmp	r3, #8192	; 0x2000
   2266c:	moveq	r2, #99	; 0x63
   22670:	beq	22698 <__assert_fail@plt+0x100a4>
   22674:	cmp	r3, #40960	; 0xa000
   22678:	moveq	r2, #108	; 0x6c
   2267c:	beq	22698 <__assert_fail@plt+0x100a4>
   22680:	cmp	r3, #4096	; 0x1000
   22684:	moveq	r2, #112	; 0x70
   22688:	beq	22698 <__assert_fail@plt+0x100a4>
   2268c:	cmp	r3, #49152	; 0xc000
   22690:	moveq	r2, #115	; 0x73
   22694:	movne	r2, #63	; 0x3f
   22698:	tst	r0, #256	; 0x100
   2269c:	strb	r2, [r1]
   226a0:	and	r3, r0, #64	; 0x40
   226a4:	movne	ip, #114	; 0x72
   226a8:	moveq	ip, #45	; 0x2d
   226ac:	tst	r0, #128	; 0x80
   226b0:	movne	r2, #119	; 0x77
   226b4:	moveq	r2, #45	; 0x2d
   226b8:	strb	ip, [r1, #1]
   226bc:	tst	r0, #2048	; 0x800
   226c0:	strb	r2, [r1, #2]
   226c4:	beq	22764 <__assert_fail@plt+0x10170>
   226c8:	cmp	r3, #0
   226cc:	movne	r2, #115	; 0x73
   226d0:	moveq	r2, #83	; 0x53
   226d4:	tst	r0, #32
   226d8:	strb	r2, [r1, #3]
   226dc:	and	r3, r0, #8
   226e0:	movne	ip, #114	; 0x72
   226e4:	moveq	ip, #45	; 0x2d
   226e8:	tst	r0, #16
   226ec:	movne	r2, #119	; 0x77
   226f0:	moveq	r2, #45	; 0x2d
   226f4:	strb	ip, [r1, #4]
   226f8:	tst	r0, #1024	; 0x400
   226fc:	strb	r2, [r1, #5]
   22700:	beq	22774 <__assert_fail@plt+0x10180>
   22704:	cmp	r3, #0
   22708:	movne	r2, #115	; 0x73
   2270c:	moveq	r2, #83	; 0x53
   22710:	tst	r0, #4
   22714:	strb	r2, [r1, #6]
   22718:	and	r3, r0, #1
   2271c:	movne	ip, #114	; 0x72
   22720:	moveq	ip, #45	; 0x2d
   22724:	tst	r0, #2
   22728:	movne	r2, #119	; 0x77
   2272c:	moveq	r2, #45	; 0x2d
   22730:	strb	ip, [r1, #7]
   22734:	tst	r0, #512	; 0x200
   22738:	strb	r2, [r1, #8]
   2273c:	beq	22784 <__assert_fail@plt+0x10190>
   22740:	cmp	r3, #0
   22744:	movne	r0, #116	; 0x74
   22748:	moveq	r0, #84	; 0x54
   2274c:	mov	r2, #32
   22750:	mov	r3, #0
   22754:	strb	r0, [r1, #9]
   22758:	strb	r2, [r1, #10]
   2275c:	strb	r3, [r1, #11]
   22760:	bx	lr
   22764:	cmp	r3, #0
   22768:	movne	r2, #120	; 0x78
   2276c:	moveq	r2, #45	; 0x2d
   22770:	b	226d4 <__assert_fail@plt+0x100e0>
   22774:	cmp	r3, #0
   22778:	movne	r2, #120	; 0x78
   2277c:	moveq	r2, #45	; 0x2d
   22780:	b	22710 <__assert_fail@plt+0x1011c>
   22784:	cmp	r3, #0
   22788:	movne	r0, #120	; 0x78
   2278c:	moveq	r0, #45	; 0x2d
   22790:	b	2274c <__assert_fail@plt+0x10158>
   22794:	ldr	r0, [r0, #16]
   22798:	b	22640 <__assert_fail@plt+0x1004c>
   2279c:	strd	r4, [sp, #-16]!
   227a0:	mov	r5, r1
   227a4:	str	r6, [sp, #8]
   227a8:	str	lr, [sp, #12]
   227ac:	bl	12504 <fopen64@plt>
   227b0:	subs	r4, r0, #0
   227b4:	beq	227c4 <__assert_fail@plt+0x101d0>
   227b8:	bl	123c0 <fileno@plt>
   227bc:	cmp	r0, #2
   227c0:	bls	227d8 <__assert_fail@plt+0x101e4>
   227c4:	mov	r0, r4
   227c8:	ldrd	r4, [sp]
   227cc:	ldr	r6, [sp, #8]
   227d0:	add	sp, sp, #12
   227d4:	pop	{pc}		; (ldr pc, [sp], #4)
   227d8:	bl	2d47c <__assert_fail@plt+0x1ae88>
   227dc:	subs	r6, r0, #0
   227e0:	blt	22828 <__assert_fail@plt+0x10234>
   227e4:	mov	r0, r4
   227e8:	bl	123fc <fclose@plt>
   227ec:	cmp	r0, #0
   227f0:	bne	22808 <__assert_fail@plt+0x10214>
   227f4:	mov	r1, r5
   227f8:	mov	r0, r6
   227fc:	bl	11eb0 <fdopen@plt>
   22800:	subs	r4, r0, #0
   22804:	bne	227c4 <__assert_fail@plt+0x101d0>
   22808:	bl	12348 <__errno_location@plt>
   2280c:	mov	r5, r0
   22810:	mov	r0, r6
   22814:	ldr	r6, [r5]
   22818:	mov	r4, #0
   2281c:	bl	125ac <close@plt>
   22820:	str	r6, [r5]
   22824:	b	227c4 <__assert_fail@plt+0x101d0>
   22828:	bl	12348 <__errno_location@plt>
   2282c:	mov	r5, r0
   22830:	mov	r0, r4
   22834:	ldr	r6, [r5]
   22838:	mov	r4, #0
   2283c:	bl	123fc <fclose@plt>
   22840:	str	r6, [r5]
   22844:	b	227c4 <__assert_fail@plt+0x101d0>
   22848:	cmp	r0, #10
   2284c:	movcc	r0, #10
   22850:	orr	r0, r0, #1
   22854:	cmn	r0, #1
   22858:	bxeq	lr
   2285c:	push	{lr}		; (str lr, [sp, #-4]!)
   22860:	movw	lr, #43691	; 0xaaab
   22864:	movt	lr, #43690	; 0xaaaa
   22868:	umull	r2, r3, lr, r0
   2286c:	cmp	r0, #9
   22870:	lsr	r3, r3, #1
   22874:	add	r3, r3, r3, lsl #1
   22878:	sub	r3, r0, r3
   2287c:	bls	228bc <__assert_fail@plt+0x102c8>
   22880:	cmp	r3, #0
   22884:	beq	228c4 <__assert_fail@plt+0x102d0>
   22888:	mov	ip, #16
   2288c:	mov	r1, #9
   22890:	mov	r2, #3
   22894:	b	228a0 <__assert_fail@plt+0x102ac>
   22898:	cmp	r3, #0
   2289c:	beq	228c4 <__assert_fail@plt+0x102d0>
   228a0:	add	r2, r2, #2
   228a4:	add	r1, r1, ip
   228a8:	cmp	r1, r0
   228ac:	add	ip, ip, #8
   228b0:	udiv	r3, r0, r2
   228b4:	mls	r3, r2, r3, r0
   228b8:	bcc	22898 <__assert_fail@plt+0x102a4>
   228bc:	cmp	r3, #0
   228c0:	bne	228d0 <__assert_fail@plt+0x102dc>
   228c4:	add	r0, r0, #2
   228c8:	cmn	r0, #1
   228cc:	bne	22868 <__assert_fail@plt+0x10274>
   228d0:	pop	{pc}		; (ldr pc, [sp], #4)
   228d4:	ror	r0, r0, #3
   228d8:	udiv	r3, r0, r1
   228dc:	mls	r0, r3, r1, r0
   228e0:	bx	lr
   228e4:	sub	r0, r1, r0
   228e8:	clz	r0, r0
   228ec:	lsr	r0, r0, #5
   228f0:	bx	lr
   228f4:	str	r4, [sp, #-8]!
   228f8:	mov	r4, r0
   228fc:	mov	r0, r1
   22900:	ldr	r1, [r4, #8]
   22904:	ldr	r3, [r4, #24]
   22908:	str	lr, [sp, #4]
   2290c:	blx	r3
   22910:	ldr	r3, [r4, #8]
   22914:	cmp	r3, r0
   22918:	bls	22930 <__assert_fail@plt+0x1033c>
   2291c:	ldr	r3, [r4]
   22920:	ldr	r4, [sp]
   22924:	add	sp, sp, #4
   22928:	add	r0, r3, r0, lsl #3
   2292c:	pop	{pc}		; (ldr pc, [sp], #4)
   22930:	bl	125a0 <abort@plt>
   22934:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22938:	mov	r5, r1
   2293c:	strd	r6, [sp, #8]
   22940:	mov	r7, r3
   22944:	mov	r6, r0
   22948:	str	r8, [sp, #16]
   2294c:	mov	r8, r2
   22950:	str	lr, [sp, #20]
   22954:	bl	228f4 <__assert_fail@plt+0x10300>
   22958:	str	r0, [r8]
   2295c:	ldr	r1, [r0]
   22960:	cmp	r1, #0
   22964:	beq	22a54 <__assert_fail@plt+0x10460>
   22968:	cmp	r1, r5
   2296c:	mov	r4, r0
   22970:	beq	22a1c <__assert_fail@plt+0x10428>
   22974:	mov	r0, r5
   22978:	ldr	r3, [r6, #28]
   2297c:	blx	r3
   22980:	cmp	r0, #0
   22984:	bne	22a18 <__assert_fail@plt+0x10424>
   22988:	ldr	r3, [r4, #4]
   2298c:	cmp	r3, #0
   22990:	beq	22a54 <__assert_fail@plt+0x10460>
   22994:	ldr	r1, [r3]
   22998:	cmp	r5, r1
   2299c:	bne	229c0 <__assert_fail@plt+0x103cc>
   229a0:	b	229dc <__assert_fail@plt+0x103e8>
   229a4:	ldr	r4, [r4, #4]
   229a8:	ldr	r3, [r4, #4]
   229ac:	cmp	r3, #0
   229b0:	beq	22a54 <__assert_fail@plt+0x10460>
   229b4:	ldr	r1, [r3]
   229b8:	cmp	r1, r5
   229bc:	beq	229dc <__assert_fail@plt+0x103e8>
   229c0:	mov	r0, r5
   229c4:	ldr	r3, [r6, #28]
   229c8:	blx	r3
   229cc:	cmp	r0, #0
   229d0:	beq	229a4 <__assert_fail@plt+0x103b0>
   229d4:	ldr	r3, [r4, #4]
   229d8:	ldr	r1, [r3]
   229dc:	cmp	r7, #0
   229e0:	beq	22a00 <__assert_fail@plt+0x1040c>
   229e4:	ldr	r0, [r3, #4]
   229e8:	mov	r2, #0
   229ec:	str	r0, [r4, #4]
   229f0:	str	r2, [r3]
   229f4:	ldr	r2, [r6, #36]	; 0x24
   229f8:	str	r2, [r3, #4]
   229fc:	str	r3, [r6, #36]	; 0x24
   22a00:	ldrd	r4, [sp]
   22a04:	mov	r0, r1
   22a08:	ldrd	r6, [sp, #8]
   22a0c:	ldr	r8, [sp, #16]
   22a10:	add	sp, sp, #20
   22a14:	pop	{pc}		; (ldr pc, [sp], #4)
   22a18:	ldr	r1, [r4]
   22a1c:	cmp	r7, #0
   22a20:	beq	22a00 <__assert_fail@plt+0x1040c>
   22a24:	ldr	r0, [r4, #4]
   22a28:	cmp	r0, #0
   22a2c:	streq	r0, [r4]
   22a30:	beq	22a00 <__assert_fail@plt+0x1040c>
   22a34:	ldrd	r2, [r0]
   22a38:	mov	ip, #0
   22a3c:	strd	r2, [r4]
   22a40:	str	ip, [r0]
   22a44:	ldr	r3, [r6, #36]	; 0x24
   22a48:	str	r3, [r0, #4]
   22a4c:	str	r0, [r6, #36]	; 0x24
   22a50:	b	22a00 <__assert_fail@plt+0x1040c>
   22a54:	mov	r1, #0
   22a58:	b	22a00 <__assert_fail@plt+0x1040c>
   22a5c:	ldr	r2, [r0]
   22a60:	movw	r3, #28240	; 0x6e50
   22a64:	movt	r3, #4
   22a68:	mov	r1, r0
   22a6c:	cmp	r2, r3
   22a70:	beq	22af8 <__assert_fail@plt+0x10504>
   22a74:	vldr	s14, [pc, #132]	; 22b00 <__assert_fail@plt+0x1050c>
   22a78:	vldr	s15, [r2, #8]
   22a7c:	vcmpe.f32	s15, s14
   22a80:	vmrs	APSR_nzcv, fpscr
   22a84:	ble	22aec <__assert_fail@plt+0x104f8>
   22a88:	vldr	s13, [pc, #116]	; 22b04 <__assert_fail@plt+0x10510>
   22a8c:	vcmpe.f32	s15, s13
   22a90:	vmrs	APSR_nzcv, fpscr
   22a94:	bpl	22aec <__assert_fail@plt+0x104f8>
   22a98:	vldr	s13, [pc, #104]	; 22b08 <__assert_fail@plt+0x10514>
   22a9c:	vldr	s12, [r2, #12]
   22aa0:	vcmpe.f32	s12, s13
   22aa4:	vmrs	APSR_nzcv, fpscr
   22aa8:	ble	22aec <__assert_fail@plt+0x104f8>
   22aac:	vldr	s13, [r2]
   22ab0:	vcmpe.f32	s13, #0.0
   22ab4:	vmrs	APSR_nzcv, fpscr
   22ab8:	blt	22aec <__assert_fail@plt+0x104f8>
   22abc:	vadd.f32	s14, s13, s14
   22ac0:	vldr	s13, [r2, #4]
   22ac4:	vcmpe.f32	s14, s13
   22ac8:	vmrs	APSR_nzcv, fpscr
   22acc:	bpl	22aec <__assert_fail@plt+0x104f8>
   22ad0:	vldr	s12, [pc, #52]	; 22b0c <__assert_fail@plt+0x10518>
   22ad4:	vcmpe.f32	s13, s12
   22ad8:	vmrs	APSR_nzcv, fpscr
   22adc:	bhi	22aec <__assert_fail@plt+0x104f8>
   22ae0:	vcmpe.f32	s15, s14
   22ae4:	vmrs	APSR_nzcv, fpscr
   22ae8:	bgt	22af8 <__assert_fail@plt+0x10504>
   22aec:	mov	r0, #0
   22af0:	str	r3, [r1]
   22af4:	bx	lr
   22af8:	mov	r0, #1
   22afc:	bx	lr
   22b00:	stclcc	12, cr12, [ip, #820]	; 0x334
   22b04:	svccc	0x00666666
   22b08:	svccc	0x008ccccd
   22b0c:	svccc	0x00800000
   22b10:	strd	r4, [sp, #-32]!	; 0xffffffe0
   22b14:	ldr	r3, [r1, #4]
   22b18:	strd	r6, [sp, #8]
   22b1c:	ldr	r6, [r1]
   22b20:	strd	r8, [sp, #16]
   22b24:	str	sl, [sp, #24]
   22b28:	str	lr, [sp, #28]
   22b2c:	cmp	r6, r3
   22b30:	bcs	22bf8 <__assert_fail@plt+0x10604>
   22b34:	mov	r8, r2
   22b38:	mov	r5, r0
   22b3c:	mov	r7, r1
   22b40:	add	r6, r6, #8
   22b44:	mov	r9, #0
   22b48:	b	22b58 <__assert_fail@plt+0x10564>
   22b4c:	cmp	r3, r6
   22b50:	add	r6, r6, #8
   22b54:	bls	22bf8 <__assert_fail@plt+0x10604>
   22b58:	ldr	sl, [r6, #-8]
   22b5c:	cmp	sl, #0
   22b60:	beq	22b4c <__assert_fail@plt+0x10558>
   22b64:	ldr	r4, [r6, #-4]
   22b68:	cmp	r4, #0
   22b6c:	bne	22b8c <__assert_fail@plt+0x10598>
   22b70:	b	22bdc <__assert_fail@plt+0x105e8>
   22b74:	ldr	r2, [r0, #4]
   22b78:	cmp	r3, #0
   22b7c:	str	r2, [r4, #4]
   22b80:	str	r4, [r0, #4]
   22b84:	mov	r4, r3
   22b88:	beq	22bd8 <__assert_fail@plt+0x105e4>
   22b8c:	ldr	sl, [r4]
   22b90:	mov	r0, r5
   22b94:	mov	r1, sl
   22b98:	bl	228f4 <__assert_fail@plt+0x10300>
   22b9c:	ldr	r2, [r0]
   22ba0:	ldr	r3, [r4, #4]
   22ba4:	cmp	r2, #0
   22ba8:	bne	22b74 <__assert_fail@plt+0x10580>
   22bac:	ldr	r1, [r5, #12]
   22bb0:	cmp	r3, #0
   22bb4:	str	sl, [r0]
   22bb8:	add	r1, r1, #1
   22bbc:	str	r1, [r5, #12]
   22bc0:	str	r2, [r4]
   22bc4:	ldr	r2, [r5, #36]	; 0x24
   22bc8:	str	r2, [r4, #4]
   22bcc:	str	r4, [r5, #36]	; 0x24
   22bd0:	mov	r4, r3
   22bd4:	bne	22b8c <__assert_fail@plt+0x10598>
   22bd8:	ldr	sl, [r6, #-8]
   22bdc:	cmp	r8, #0
   22be0:	str	r9, [r6, #-4]
   22be4:	beq	22c14 <__assert_fail@plt+0x10620>
   22be8:	ldr	r3, [r7, #4]
   22bec:	cmp	r3, r6
   22bf0:	add	r6, r6, #8
   22bf4:	bhi	22b58 <__assert_fail@plt+0x10564>
   22bf8:	mov	r0, #1
   22bfc:	ldrd	r4, [sp]
   22c00:	ldrd	r6, [sp, #8]
   22c04:	ldrd	r8, [sp, #16]
   22c08:	ldr	sl, [sp, #24]
   22c0c:	add	sp, sp, #28
   22c10:	pop	{pc}		; (ldr pc, [sp], #4)
   22c14:	mov	r1, sl
   22c18:	mov	r0, r5
   22c1c:	bl	228f4 <__assert_fail@plt+0x10300>
   22c20:	ldr	r3, [r0]
   22c24:	mov	r4, r0
   22c28:	cmp	r3, #0
   22c2c:	beq	22c6c <__assert_fail@plt+0x10678>
   22c30:	ldr	r0, [r5, #36]	; 0x24
   22c34:	cmp	r0, #0
   22c38:	beq	22c80 <__assert_fail@plt+0x1068c>
   22c3c:	ldr	r3, [r0, #4]
   22c40:	str	r3, [r5, #36]	; 0x24
   22c44:	ldr	r3, [r4, #4]
   22c48:	str	sl, [r0]
   22c4c:	str	r3, [r0, #4]
   22c50:	str	r0, [r4, #4]
   22c54:	ldr	r2, [r7, #12]
   22c58:	str	r9, [r6, #-8]
   22c5c:	ldr	r3, [r7, #4]
   22c60:	sub	r2, r2, #1
   22c64:	str	r2, [r7, #12]
   22c68:	b	22b4c <__assert_fail@plt+0x10558>
   22c6c:	ldr	r3, [r5, #12]
   22c70:	str	sl, [r0]
   22c74:	add	r3, r3, #1
   22c78:	str	r3, [r5, #12]
   22c7c:	b	22c54 <__assert_fail@plt+0x10660>
   22c80:	mov	r0, #8
   22c84:	bl	31b54 <__assert_fail@plt+0x1f560>
   22c88:	cmp	r0, #0
   22c8c:	bne	22c44 <__assert_fail@plt+0x10650>
   22c90:	mov	r0, r8
   22c94:	b	22bfc <__assert_fail@plt+0x10608>
   22c98:	ldr	r0, [r0, #8]
   22c9c:	bx	lr
   22ca0:	ldr	r0, [r0, #12]
   22ca4:	bx	lr
   22ca8:	ldr	r0, [r0, #16]
   22cac:	bx	lr
   22cb0:	ldm	r0, {r1, r3}
   22cb4:	cmp	r1, r3
   22cb8:	bcs	22d2c <__assert_fail@plt+0x10738>
   22cbc:	sub	ip, r3, #1
   22cc0:	add	r3, r1, #16
   22cc4:	sub	ip, ip, r1
   22cc8:	mov	r0, #0
   22ccc:	bic	ip, ip, #7
   22cd0:	add	r1, r1, #8
   22cd4:	add	ip, ip, r3
   22cd8:	b	22ce8 <__assert_fail@plt+0x106f4>
   22cdc:	add	r1, r1, #8
   22ce0:	cmp	r1, ip
   22ce4:	beq	22d28 <__assert_fail@plt+0x10734>
   22ce8:	ldr	r3, [r1, #-8]
   22cec:	cmp	r3, #0
   22cf0:	beq	22cdc <__assert_fail@plt+0x106e8>
   22cf4:	ldr	r3, [r1, #-4]
   22cf8:	mov	r2, #1
   22cfc:	cmp	r3, #0
   22d00:	beq	22d14 <__assert_fail@plt+0x10720>
   22d04:	ldr	r3, [r3, #4]
   22d08:	add	r2, r2, #1
   22d0c:	cmp	r3, #0
   22d10:	bne	22d04 <__assert_fail@plt+0x10710>
   22d14:	cmp	r0, r2
   22d18:	add	r1, r1, #8
   22d1c:	movcc	r0, r2
   22d20:	cmp	r1, ip
   22d24:	bne	22ce8 <__assert_fail@plt+0x106f4>
   22d28:	bx	lr
   22d2c:	mov	r0, #0
   22d30:	bx	lr
   22d34:	ldm	r0, {r1, r3}
   22d38:	push	{lr}		; (str lr, [sp, #-4]!)
   22d3c:	cmp	r1, r3
   22d40:	bcs	22dd4 <__assert_fail@plt+0x107e0>
   22d44:	sub	ip, r3, #1
   22d48:	mov	r2, #0
   22d4c:	sub	ip, ip, r1
   22d50:	add	r3, r1, #16
   22d54:	bic	ip, ip, #7
   22d58:	add	r1, r1, #8
   22d5c:	add	ip, ip, r3
   22d60:	mov	lr, r2
   22d64:	b	22d74 <__assert_fail@plt+0x10780>
   22d68:	add	r1, r1, #8
   22d6c:	cmp	r1, ip
   22d70:	beq	22db0 <__assert_fail@plt+0x107bc>
   22d74:	ldr	r3, [r1, #-8]
   22d78:	cmp	r3, #0
   22d7c:	beq	22d68 <__assert_fail@plt+0x10774>
   22d80:	ldr	r3, [r1, #-4]
   22d84:	add	lr, lr, #1
   22d88:	add	r2, r2, #1
   22d8c:	cmp	r3, #0
   22d90:	beq	22d68 <__assert_fail@plt+0x10774>
   22d94:	ldr	r3, [r3, #4]
   22d98:	add	r2, r2, #1
   22d9c:	cmp	r3, #0
   22da0:	bne	22d94 <__assert_fail@plt+0x107a0>
   22da4:	add	r1, r1, #8
   22da8:	cmp	r1, ip
   22dac:	bne	22d74 <__assert_fail@plt+0x10780>
   22db0:	ldr	r3, [r0, #12]
   22db4:	cmp	r3, lr
   22db8:	movne	r0, #0
   22dbc:	bne	22dd0 <__assert_fail@plt+0x107dc>
   22dc0:	ldr	r0, [r0, #16]
   22dc4:	sub	r0, r0, r2
   22dc8:	clz	r0, r0
   22dcc:	lsr	r0, r0, #5
   22dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   22dd4:	mov	r2, #0
   22dd8:	mov	lr, r2
   22ddc:	b	22db0 <__assert_fail@plt+0x107bc>
   22de0:	strd	r4, [sp, #-20]!	; 0xffffffec
   22de4:	mov	r4, r1
   22de8:	ldr	r3, [r0]
   22dec:	ldr	r1, [r0, #4]
   22df0:	ldr	r2, [r0, #16]
   22df4:	strd	r6, [sp, #8]
   22df8:	str	lr, [sp, #16]
   22dfc:	sub	sp, sp, #12
   22e00:	cmp	r3, r1
   22e04:	ldrd	r6, [r0, #8]
   22e08:	bcs	22ef8 <__assert_fail@plt+0x10904>
   22e0c:	sub	ip, r1, #1
   22e10:	add	r1, r3, #16
   22e14:	sub	ip, ip, r3
   22e18:	add	r0, r3, #8
   22e1c:	bic	ip, ip, #7
   22e20:	mov	r5, #0
   22e24:	add	ip, ip, r1
   22e28:	b	22e38 <__assert_fail@plt+0x10844>
   22e2c:	add	r0, r0, #8
   22e30:	cmp	r0, ip
   22e34:	beq	22e78 <__assert_fail@plt+0x10884>
   22e38:	ldr	r3, [r0, #-8]
   22e3c:	cmp	r3, #0
   22e40:	beq	22e2c <__assert_fail@plt+0x10838>
   22e44:	ldr	r3, [r0, #-4]
   22e48:	mov	r1, #1
   22e4c:	cmp	r3, #0
   22e50:	beq	22e64 <__assert_fail@plt+0x10870>
   22e54:	ldr	r3, [r3, #4]
   22e58:	add	r1, r1, #1
   22e5c:	cmp	r3, #0
   22e60:	bne	22e54 <__assert_fail@plt+0x10860>
   22e64:	cmp	r5, r1
   22e68:	add	r0, r0, #8
   22e6c:	movcc	r5, r1
   22e70:	cmp	r0, ip
   22e74:	bne	22e38 <__assert_fail@plt+0x10844>
   22e78:	mov	r0, r4
   22e7c:	movw	r1, #28260	; 0x6e64
   22e80:	movt	r1, #4
   22e84:	bl	1233c <fprintf@plt>
   22e88:	mov	r2, r6
   22e8c:	mov	r0, r4
   22e90:	movw	r1, #28284	; 0x6e7c
   22e94:	movt	r1, #4
   22e98:	bl	1233c <fprintf@plt>
   22e9c:	vmov	s15, r7
   22ea0:	mov	r2, r7
   22ea4:	mov	r0, r4
   22ea8:	vldr	d5, [pc, #80]	; 22f00 <__assert_fail@plt+0x1090c>
   22eac:	movw	r1, #28308	; 0x6e94
   22eb0:	movt	r1, #4
   22eb4:	vcvt.f64.u32	d6, s15
   22eb8:	vmov	s15, r6
   22ebc:	vmul.f64	d6, d6, d5
   22ec0:	vcvt.f64.u32	d7, s15
   22ec4:	vdiv.f64	d5, d6, d7
   22ec8:	vstr	d5, [sp]
   22ecc:	bl	1233c <fprintf@plt>
   22ed0:	mov	r2, r5
   22ed4:	mov	r0, r4
   22ed8:	movw	r1, #28344	; 0x6eb8
   22edc:	movt	r1, #4
   22ee0:	add	sp, sp, #12
   22ee4:	ldrd	r4, [sp]
   22ee8:	ldrd	r6, [sp, #8]
   22eec:	ldr	lr, [sp, #16]
   22ef0:	add	sp, sp, #20
   22ef4:	b	1233c <fprintf@plt>
   22ef8:	mov	r5, #0
   22efc:	b	22e78 <__assert_fail@plt+0x10884>
   22f00:	andeq	r0, r0, r0
   22f04:	subsmi	r0, r9, r0
   22f08:	strd	r4, [sp, #-16]!
   22f0c:	mov	r5, r1
   22f10:	str	r6, [sp, #8]
   22f14:	mov	r6, r0
   22f18:	str	lr, [sp, #12]
   22f1c:	bl	228f4 <__assert_fail@plt+0x10300>
   22f20:	ldr	r3, [r0]
   22f24:	cmp	r3, #0
   22f28:	beq	22f64 <__assert_fail@plt+0x10970>
   22f2c:	mov	r4, r0
   22f30:	b	22f38 <__assert_fail@plt+0x10944>
   22f34:	ldr	r3, [r4]
   22f38:	cmp	r3, r5
   22f3c:	mov	r1, r3
   22f40:	mov	r0, r5
   22f44:	beq	22f7c <__assert_fail@plt+0x10988>
   22f48:	ldr	r3, [r6, #28]
   22f4c:	blx	r3
   22f50:	cmp	r0, #0
   22f54:	bne	22f78 <__assert_fail@plt+0x10984>
   22f58:	ldr	r4, [r4, #4]
   22f5c:	cmp	r4, #0
   22f60:	bne	22f34 <__assert_fail@plt+0x10940>
   22f64:	ldrd	r4, [sp]
   22f68:	mov	r0, #0
   22f6c:	ldr	r6, [sp, #8]
   22f70:	add	sp, sp, #12
   22f74:	pop	{pc}		; (ldr pc, [sp], #4)
   22f78:	ldr	r5, [r4]
   22f7c:	mov	r0, r5
   22f80:	ldrd	r4, [sp]
   22f84:	ldr	r6, [sp, #8]
   22f88:	add	sp, sp, #12
   22f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   22f90:	ldr	r3, [r0, #16]
   22f94:	cmp	r3, #0
   22f98:	beq	22fec <__assert_fail@plt+0x109f8>
   22f9c:	ldr	r3, [r0]
   22fa0:	ldr	r2, [r0, #4]
   22fa4:	cmp	r3, r2
   22fa8:	bcs	22fe0 <__assert_fail@plt+0x109ec>
   22fac:	ldr	r0, [r3]
   22fb0:	cmp	r0, #0
   22fb4:	bxne	lr
   22fb8:	sub	r2, r2, #1
   22fbc:	sub	r2, r2, r3
   22fc0:	bic	r2, r2, #7
   22fc4:	add	r2, r3, r2
   22fc8:	b	22fd8 <__assert_fail@plt+0x109e4>
   22fcc:	ldr	r0, [r3, #8]!
   22fd0:	cmp	r0, #0
   22fd4:	bxne	lr
   22fd8:	cmp	r3, r2
   22fdc:	bne	22fcc <__assert_fail@plt+0x109d8>
   22fe0:	str	r4, [sp, #-8]!
   22fe4:	str	lr, [sp, #4]
   22fe8:	bl	125a0 <abort@plt>
   22fec:	mov	r0, r3
   22ff0:	bx	lr
   22ff4:	strd	r4, [sp, #-16]!
   22ff8:	mov	r5, r0
   22ffc:	mov	r4, r1
   23000:	str	r6, [sp, #8]
   23004:	str	lr, [sp, #12]
   23008:	bl	228f4 <__assert_fail@plt+0x10300>
   2300c:	mov	r2, r0
   23010:	mov	r3, r0
   23014:	b	23020 <__assert_fail@plt+0x10a2c>
   23018:	cmp	r3, #0
   2301c:	beq	23038 <__assert_fail@plt+0x10a44>
   23020:	ldm	r3, {r1, r3}
   23024:	cmp	r1, r4
   23028:	bne	23018 <__assert_fail@plt+0x10a24>
   2302c:	cmp	r3, #0
   23030:	ldrne	r0, [r3]
   23034:	bne	2305c <__assert_fail@plt+0x10a68>
   23038:	ldr	r3, [r5, #4]
   2303c:	b	2304c <__assert_fail@plt+0x10a58>
   23040:	ldr	r0, [r2]
   23044:	cmp	r0, #0
   23048:	bne	2305c <__assert_fail@plt+0x10a68>
   2304c:	add	r2, r2, #8
   23050:	cmp	r3, r2
   23054:	bhi	23040 <__assert_fail@plt+0x10a4c>
   23058:	mov	r0, #0
   2305c:	ldrd	r4, [sp]
   23060:	ldr	r6, [sp, #8]
   23064:	add	sp, sp, #12
   23068:	pop	{pc}		; (ldr pc, [sp], #4)
   2306c:	strd	r4, [sp, #-12]!
   23070:	ldr	r5, [r0]
   23074:	str	lr, [sp, #8]
   23078:	ldr	lr, [r0, #4]
   2307c:	cmp	lr, r5
   23080:	bls	2310c <__assert_fail@plt+0x10b18>
   23084:	mov	ip, #0
   23088:	ldr	r3, [r5]
   2308c:	cmp	r3, #0
   23090:	bne	230b4 <__assert_fail@plt+0x10ac0>
   23094:	add	r5, r5, #8
   23098:	cmp	lr, r5
   2309c:	bhi	23088 <__assert_fail@plt+0x10a94>
   230a0:	mov	r2, ip
   230a4:	ldrd	r4, [sp]
   230a8:	add	sp, sp, #8
   230ac:	mov	r0, r2
   230b0:	pop	{pc}		; (ldr pc, [sp], #4)
   230b4:	cmp	r2, ip
   230b8:	bls	230a0 <__assert_fail@plt+0x10aac>
   230bc:	str	r3, [r1, ip, lsl #2]
   230c0:	add	r4, ip, #1
   230c4:	add	lr, r1, ip, lsl #2
   230c8:	ldr	r3, [r5, #4]
   230cc:	cmp	r3, #0
   230d0:	beq	23100 <__assert_fail@plt+0x10b0c>
   230d4:	mov	ip, r4
   230d8:	cmp	r2, ip
   230dc:	add	ip, ip, #1
   230e0:	beq	230a4 <__assert_fail@plt+0x10ab0>
   230e4:	ldr	r4, [r3]
   230e8:	str	r4, [lr, #4]!
   230ec:	ldr	r3, [r3, #4]
   230f0:	cmp	r3, #0
   230f4:	bne	230d8 <__assert_fail@plt+0x10ae4>
   230f8:	ldr	lr, [r0, #4]
   230fc:	b	23094 <__assert_fail@plt+0x10aa0>
   23100:	mov	ip, r4
   23104:	ldr	lr, [r0, #4]
   23108:	b	23094 <__assert_fail@plt+0x10aa0>
   2310c:	mov	r2, #0
   23110:	b	230a4 <__assert_fail@plt+0x10ab0>
   23114:	strd	r4, [sp, #-32]!	; 0xffffffe0
   23118:	ldr	r3, [r0, #4]
   2311c:	strd	r6, [sp, #8]
   23120:	strd	r8, [sp, #16]
   23124:	ldr	r8, [r0]
   23128:	str	sl, [sp, #24]
   2312c:	str	lr, [sp, #28]
   23130:	cmp	r3, r8
   23134:	bls	231b0 <__assert_fail@plt+0x10bbc>
   23138:	mov	r7, r2
   2313c:	mov	r6, r1
   23140:	mov	r9, r0
   23144:	mov	r5, #0
   23148:	ldr	r0, [r8]
   2314c:	cmp	r0, #0
   23150:	bne	2317c <__assert_fail@plt+0x10b88>
   23154:	add	r8, r8, #8
   23158:	cmp	r3, r8
   2315c:	bhi	23148 <__assert_fail@plt+0x10b54>
   23160:	mov	r0, r5
   23164:	ldrd	r4, [sp]
   23168:	ldrd	r6, [sp, #8]
   2316c:	ldrd	r8, [sp, #16]
   23170:	ldr	sl, [sp, #24]
   23174:	add	sp, sp, #28
   23178:	pop	{pc}		; (ldr pc, [sp], #4)
   2317c:	mov	r4, r8
   23180:	b	23188 <__assert_fail@plt+0x10b94>
   23184:	ldr	r0, [r4]
   23188:	mov	r1, r7
   2318c:	blx	r6
   23190:	cmp	r0, #0
   23194:	beq	23160 <__assert_fail@plt+0x10b6c>
   23198:	ldr	r4, [r4, #4]
   2319c:	add	r5, r5, #1
   231a0:	cmp	r4, #0
   231a4:	bne	23184 <__assert_fail@plt+0x10b90>
   231a8:	ldr	r3, [r9, #4]
   231ac:	b	23154 <__assert_fail@plt+0x10b60>
   231b0:	mov	r5, #0
   231b4:	b	23160 <__assert_fail@plt+0x10b6c>
   231b8:	ldrb	r2, [r0]
   231bc:	cmp	r2, #0
   231c0:	beq	231ec <__assert_fail@plt+0x10bf8>
   231c4:	mov	r3, #0
   231c8:	rsb	r3, r3, r3, lsl #5
   231cc:	add	r3, r3, r2
   231d0:	ldrb	r2, [r0, #1]!
   231d4:	udiv	ip, r3, r1
   231d8:	cmp	r2, #0
   231dc:	mls	r3, r1, ip, r3
   231e0:	bne	231c8 <__assert_fail@plt+0x10bd4>
   231e4:	mov	r0, r3
   231e8:	bx	lr
   231ec:	mov	r3, r2
   231f0:	mov	r0, r3
   231f4:	bx	lr
   231f8:	movw	r3, #28240	; 0x6e50
   231fc:	movt	r3, #4
   23200:	strd	r4, [sp, #-8]!
   23204:	ldrd	r4, [r3]
   23208:	ldr	r1, [r3, #16]
   2320c:	ldrd	r2, [r3, #8]
   23210:	strd	r4, [r0]
   23214:	ldrd	r4, [sp]
   23218:	add	sp, sp, #8
   2321c:	strd	r2, [r0, #8]
   23220:	str	r1, [r0, #16]
   23224:	bx	lr
   23228:	strd	r4, [sp, #-20]!	; 0xffffffec
   2322c:	cmp	r2, #0
   23230:	movw	ip, #10468	; 0x28e4
   23234:	movt	ip, #2
   23238:	strd	r6, [sp, #8]
   2323c:	movne	r6, r2
   23240:	str	lr, [sp, #16]
   23244:	sub	sp, sp, #12
   23248:	movw	lr, #10452	; 0x28d4
   2324c:	movt	lr, #2
   23250:	mov	r7, r1
   23254:	moveq	r6, lr
   23258:	cmp	r3, #0
   2325c:	str	r0, [sp, #4]
   23260:	mov	r0, #40	; 0x28
   23264:	movne	r5, r3
   23268:	moveq	r5, ip
   2326c:	bl	31b54 <__assert_fail@plt+0x1f560>
   23270:	subs	r4, r0, #0
   23274:	beq	2330c <__assert_fail@plt+0x10d18>
   23278:	cmp	r7, #0
   2327c:	add	r0, r4, #20
   23280:	beq	23324 <__assert_fail@plt+0x10d30>
   23284:	str	r7, [r4, #20]
   23288:	bl	22a5c <__assert_fail@plt+0x10468>
   2328c:	cmp	r0, #0
   23290:	beq	2336c <__assert_fail@plt+0x10d78>
   23294:	ldrb	r3, [r7, #16]
   23298:	cmp	r3, #0
   2329c:	beq	2337c <__assert_fail@plt+0x10d88>
   232a0:	ldr	r0, [sp, #4]
   232a4:	bl	22848 <__assert_fail@plt+0x10254>
   232a8:	lsrs	r2, r0, #30
   232ac:	movne	r7, #1
   232b0:	moveq	r7, #0
   232b4:	tst	r0, #536870912	; 0x20000000
   232b8:	bne	23364 <__assert_fail@plt+0x10d70>
   232bc:	cmp	r7, #0
   232c0:	bne	23364 <__assert_fail@plt+0x10d70>
   232c4:	cmp	r0, #0
   232c8:	str	r0, [r4, #8]
   232cc:	beq	2336c <__assert_fail@plt+0x10d78>
   232d0:	mov	r1, #8
   232d4:	bl	2f080 <__assert_fail@plt+0x1ca8c>
   232d8:	cmp	r0, #0
   232dc:	str	r0, [r4]
   232e0:	beq	2336c <__assert_fail@plt+0x10d78>
   232e4:	ldr	r3, [r4, #8]
   232e8:	str	r7, [r4, #12]
   232ec:	str	r7, [r4, #16]
   232f0:	str	r6, [r4, #24]
   232f4:	str	r5, [r4, #28]
   232f8:	add	r0, r0, r3, lsl #3
   232fc:	ldr	r3, [sp, #32]
   23300:	str	r0, [r4, #4]
   23304:	str	r3, [r4, #32]
   23308:	str	r7, [r4, #36]	; 0x24
   2330c:	mov	r0, r4
   23310:	add	sp, sp, #12
   23314:	ldrd	r4, [sp]
   23318:	ldrd	r6, [sp, #8]
   2331c:	add	sp, sp, #16
   23320:	pop	{pc}		; (ldr pc, [sp], #4)
   23324:	movw	r3, #28240	; 0x6e50
   23328:	movt	r3, #4
   2332c:	str	r3, [r4, #20]
   23330:	bl	22a5c <__assert_fail@plt+0x10468>
   23334:	cmp	r0, #0
   23338:	beq	2336c <__assert_fail@plt+0x10d78>
   2333c:	vldr	s13, [pc, #64]	; 23384 <__assert_fail@plt+0x10d90>
   23340:	vldr	s15, [sp, #4]
   23344:	vldr	s14, [pc, #60]	; 23388 <__assert_fail@plt+0x10d94>
   23348:	vcvt.f32.u32	s12, s15
   2334c:	vdiv.f32	s15, s12, s13
   23350:	vcmpe.f32	s15, s14
   23354:	vmrs	APSR_nzcv, fpscr
   23358:	vcvtlt.u32.f32	s15, s15
   2335c:	vstrlt	s15, [sp, #4]
   23360:	blt	232a0 <__assert_fail@plt+0x10cac>
   23364:	mov	r3, #0
   23368:	str	r3, [r4, #8]
   2336c:	mov	r0, r4
   23370:	mov	r4, #0
   23374:	bl	2f668 <__assert_fail@plt+0x1d074>
   23378:	b	2330c <__assert_fail@plt+0x10d18>
   2337c:	vldr	s13, [r7, #8]
   23380:	b	23340 <__assert_fail@plt+0x10d4c>
   23384:	svccc	0x004ccccd
   23388:	svcmi	0x00800000
   2338c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23390:	mov	r5, r0
   23394:	ldr	r2, [r0, #4]
   23398:	strd	r6, [sp, #8]
   2339c:	ldr	r6, [r0]
   233a0:	str	r8, [sp, #16]
   233a4:	str	lr, [sp, #20]
   233a8:	cmp	r6, r2
   233ac:	addcc	r6, r6, #8
   233b0:	movcc	r7, #0
   233b4:	bcc	233c8 <__assert_fail@plt+0x10dd4>
   233b8:	b	2343c <__assert_fail@plt+0x10e48>
   233bc:	cmp	r2, r6
   233c0:	add	r6, r6, #8
   233c4:	bls	2343c <__assert_fail@plt+0x10e48>
   233c8:	ldr	r3, [r6, #-8]
   233cc:	cmp	r3, #0
   233d0:	beq	233bc <__assert_fail@plt+0x10dc8>
   233d4:	ldr	r4, [r6, #-4]
   233d8:	ldr	r2, [r5, #32]
   233dc:	cmp	r4, #0
   233e0:	beq	23414 <__assert_fail@plt+0x10e20>
   233e4:	cmp	r2, #0
   233e8:	beq	233f8 <__assert_fail@plt+0x10e04>
   233ec:	ldr	r0, [r4]
   233f0:	blx	r2
   233f4:	ldr	r2, [r5, #32]
   233f8:	ldr	r3, [r4, #4]
   233fc:	ldr	r1, [r5, #36]	; 0x24
   23400:	str	r7, [r4]
   23404:	str	r1, [r4, #4]
   23408:	str	r4, [r5, #36]	; 0x24
   2340c:	subs	r4, r3, #0
   23410:	bne	233e4 <__assert_fail@plt+0x10df0>
   23414:	cmp	r2, #0
   23418:	beq	23424 <__assert_fail@plt+0x10e30>
   2341c:	ldr	r0, [r6, #-8]
   23420:	blx	r2
   23424:	str	r7, [r6, #-8]
   23428:	str	r7, [r6, #-4]
   2342c:	ldr	r2, [r5, #4]
   23430:	cmp	r2, r6
   23434:	add	r6, r6, #8
   23438:	bhi	233c8 <__assert_fail@plt+0x10dd4>
   2343c:	mov	r3, #0
   23440:	ldrd	r6, [sp, #8]
   23444:	ldr	r8, [sp, #16]
   23448:	str	r3, [r5, #12]
   2344c:	str	r3, [r5, #16]
   23450:	ldrd	r4, [sp]
   23454:	add	sp, sp, #20
   23458:	pop	{pc}		; (ldr pc, [sp], #4)
   2345c:	strd	r4, [sp, #-16]!
   23460:	ldr	r2, [r0, #32]
   23464:	ldr	r5, [r0]
   23468:	ldr	r3, [r0, #4]
   2346c:	cmp	r2, #0
   23470:	str	r6, [sp, #8]
   23474:	mov	r6, r0
   23478:	str	lr, [sp, #12]
   2347c:	beq	234e4 <__assert_fail@plt+0x10ef0>
   23480:	ldr	r2, [r0, #16]
   23484:	cmp	r2, #0
   23488:	beq	234e4 <__assert_fail@plt+0x10ef0>
   2348c:	cmp	r5, r3
   23490:	bcc	234a4 <__assert_fail@plt+0x10eb0>
   23494:	b	23518 <__assert_fail@plt+0x10f24>
   23498:	add	r5, r5, #8
   2349c:	cmp	r3, r5
   234a0:	bls	234e0 <__assert_fail@plt+0x10eec>
   234a4:	ldr	r0, [r5]
   234a8:	cmp	r0, #0
   234ac:	beq	23498 <__assert_fail@plt+0x10ea4>
   234b0:	mov	r4, r5
   234b4:	b	234bc <__assert_fail@plt+0x10ec8>
   234b8:	ldr	r0, [r4]
   234bc:	ldr	r3, [r6, #32]
   234c0:	blx	r3
   234c4:	ldr	r4, [r4, #4]
   234c8:	cmp	r4, #0
   234cc:	bne	234b8 <__assert_fail@plt+0x10ec4>
   234d0:	ldr	r3, [r6, #4]
   234d4:	add	r5, r5, #8
   234d8:	cmp	r3, r5
   234dc:	bhi	234a4 <__assert_fail@plt+0x10eb0>
   234e0:	ldr	r5, [r6]
   234e4:	cmp	r5, r3
   234e8:	bcs	23518 <__assert_fail@plt+0x10f24>
   234ec:	ldr	r0, [r5, #4]
   234f0:	cmp	r0, #0
   234f4:	beq	2350c <__assert_fail@plt+0x10f18>
   234f8:	ldr	r4, [r0, #4]
   234fc:	bl	2f668 <__assert_fail@plt+0x1d074>
   23500:	subs	r0, r4, #0
   23504:	bne	234f8 <__assert_fail@plt+0x10f04>
   23508:	ldr	r3, [r6, #4]
   2350c:	add	r5, r5, #8
   23510:	cmp	r3, r5
   23514:	bhi	234ec <__assert_fail@plt+0x10ef8>
   23518:	ldr	r0, [r6, #36]	; 0x24
   2351c:	cmp	r0, #0
   23520:	beq	23534 <__assert_fail@plt+0x10f40>
   23524:	ldr	r4, [r0, #4]
   23528:	bl	2f668 <__assert_fail@plt+0x1d074>
   2352c:	subs	r0, r4, #0
   23530:	bne	23524 <__assert_fail@plt+0x10f30>
   23534:	ldr	r0, [r6]
   23538:	bl	2f668 <__assert_fail@plt+0x1d074>
   2353c:	mov	r0, r6
   23540:	ldrd	r4, [sp]
   23544:	ldr	r6, [sp, #8]
   23548:	ldr	lr, [sp, #12]
   2354c:	add	sp, sp, #16
   23550:	b	2f668 <__assert_fail@plt+0x1d074>
   23554:	ldr	r3, [r0, #20]
   23558:	strd	r4, [sp, #-20]!	; 0xffffffec
   2355c:	ldrb	r2, [r3, #16]
   23560:	strd	r6, [sp, #8]
   23564:	mov	r6, r0
   23568:	str	lr, [sp, #16]
   2356c:	sub	sp, sp, #52	; 0x34
   23570:	str	r1, [sp, #4]
   23574:	cmp	r2, #0
   23578:	bne	235a4 <__assert_fail@plt+0x10fb0>
   2357c:	vmov	s15, r1
   23580:	vldr	s13, [r3, #8]
   23584:	vldr	s14, [pc, #340]	; 236e0 <__assert_fail@plt+0x110ec>
   23588:	vcvt.f32.u32	s12, s15
   2358c:	vdiv.f32	s15, s12, s13
   23590:	vcmpe.f32	s15, s14
   23594:	vmrs	APSR_nzcv, fpscr
   23598:	vcvtlt.u32.f32	s15, s15
   2359c:	vstrlt	s15, [sp, #4]
   235a0:	bge	235d4 <__assert_fail@plt+0x10fe0>
   235a4:	ldr	r0, [sp, #4]
   235a8:	bl	22848 <__assert_fail@plt+0x10254>
   235ac:	lsrs	r3, r0, #30
   235b0:	mov	r5, r0
   235b4:	movne	r4, #1
   235b8:	moveq	r4, #0
   235bc:	tst	r0, #536870912	; 0x20000000
   235c0:	movne	r4, #1
   235c4:	cmp	r0, #0
   235c8:	moveq	r4, #1
   235cc:	cmp	r4, #0
   235d0:	beq	235f0 <__assert_fail@plt+0x10ffc>
   235d4:	mov	r4, #0
   235d8:	mov	r0, r4
   235dc:	add	sp, sp, #52	; 0x34
   235e0:	ldrd	r4, [sp]
   235e4:	ldrd	r6, [sp, #8]
   235e8:	add	sp, sp, #16
   235ec:	pop	{pc}		; (ldr pc, [sp], #4)
   235f0:	ldr	r3, [r6, #8]
   235f4:	cmp	r3, r0
   235f8:	beq	236a8 <__assert_fail@plt+0x110b4>
   235fc:	mov	r1, #8
   23600:	bl	2f080 <__assert_fail@plt+0x1ca8c>
   23604:	cmp	r0, #0
   23608:	str	r0, [sp, #8]
   2360c:	beq	235d4 <__assert_fail@plt+0x10fe0>
   23610:	add	r3, r0, r5, lsl #3
   23614:	ldr	r7, [r6, #20]
   23618:	mov	r2, r4
   2361c:	add	r0, sp, #8
   23620:	mov	r1, r6
   23624:	ldr	lr, [r6, #28]
   23628:	str	r3, [sp, #12]
   2362c:	str	r5, [sp, #16]
   23630:	ldr	r5, [r6, #24]
   23634:	str	r4, [sp, #20]
   23638:	ldr	ip, [r6, #32]
   2363c:	str	r4, [sp, #24]
   23640:	ldr	r3, [r6, #36]	; 0x24
   23644:	str	r7, [sp, #28]
   23648:	str	r5, [sp, #32]
   2364c:	str	lr, [sp, #36]	; 0x24
   23650:	str	ip, [sp, #40]	; 0x28
   23654:	str	r3, [sp, #44]	; 0x2c
   23658:	bl	22b10 <__assert_fail@plt+0x1051c>
   2365c:	subs	r4, r0, #0
   23660:	bne	236b0 <__assert_fail@plt+0x110bc>
   23664:	ldr	r3, [sp, #44]	; 0x2c
   23668:	mov	r2, #1
   2366c:	add	r1, sp, #8
   23670:	mov	r0, r6
   23674:	str	r3, [r6, #36]	; 0x24
   23678:	bl	22b10 <__assert_fail@plt+0x1051c>
   2367c:	cmp	r0, #0
   23680:	beq	236dc <__assert_fail@plt+0x110e8>
   23684:	add	r1, sp, #8
   23688:	mov	r0, r6
   2368c:	mov	r2, r4
   23690:	bl	22b10 <__assert_fail@plt+0x1051c>
   23694:	cmp	r0, #0
   23698:	beq	236dc <__assert_fail@plt+0x110e8>
   2369c:	ldr	r0, [sp, #8]
   236a0:	bl	2f668 <__assert_fail@plt+0x1d074>
   236a4:	b	235d8 <__assert_fail@plt+0x10fe4>
   236a8:	mov	r4, #1
   236ac:	b	235d8 <__assert_fail@plt+0x10fe4>
   236b0:	ldr	r0, [r6]
   236b4:	bl	2f668 <__assert_fail@plt+0x1d074>
   236b8:	ldrd	r2, [sp, #8]
   236bc:	ldr	r1, [sp, #16]
   236c0:	strd	r2, [r6]
   236c4:	ldr	r2, [sp, #20]
   236c8:	str	r1, [r6, #8]
   236cc:	ldr	r3, [sp, #44]	; 0x2c
   236d0:	str	r2, [r6, #12]
   236d4:	str	r3, [r6, #36]	; 0x24
   236d8:	b	235d8 <__assert_fail@plt+0x10fe4>
   236dc:	bl	125a0 <abort@plt>
   236e0:	svcmi	0x00800000
   236e4:	strd	r4, [sp, #-16]!
   236e8:	str	r6, [sp, #8]
   236ec:	subs	r6, r1, #0
   236f0:	str	lr, [sp, #12]
   236f4:	sub	sp, sp, #8
   236f8:	beq	23878 <__assert_fail@plt+0x11284>
   236fc:	mov	r3, #0
   23700:	mov	r5, r2
   23704:	add	r2, sp, #4
   23708:	mov	r4, r0
   2370c:	bl	22934 <__assert_fail@plt+0x10340>
   23710:	subs	r3, r0, #0
   23714:	beq	23740 <__assert_fail@plt+0x1114c>
   23718:	cmp	r5, #0
   2371c:	moveq	r0, r5
   23720:	beq	2372c <__assert_fail@plt+0x11138>
   23724:	mov	r0, #0
   23728:	str	r3, [r5]
   2372c:	add	sp, sp, #8
   23730:	ldrd	r4, [sp]
   23734:	ldr	r6, [sp, #8]
   23738:	add	sp, sp, #12
   2373c:	pop	{pc}		; (ldr pc, [sp], #4)
   23740:	vldr	s15, [r4, #8]
   23744:	vldr	s14, [r4, #12]
   23748:	ldr	r3, [r4, #20]
   2374c:	vcvt.f32.u32	s15, s15
   23750:	vcvt.f32.u32	s14, s14
   23754:	vldr	s13, [r3, #8]
   23758:	vmul.f32	s15, s15, s13
   2375c:	vcmpe.f32	s14, s15
   23760:	vmrs	APSR_nzcv, fpscr
   23764:	bgt	237ac <__assert_fail@plt+0x111b8>
   23768:	ldr	r2, [sp, #4]
   2376c:	ldr	r3, [r2]
   23770:	cmp	r3, #0
   23774:	beq	23808 <__assert_fail@plt+0x11214>
   23778:	ldr	r3, [r4, #36]	; 0x24
   2377c:	cmp	r3, #0
   23780:	beq	2382c <__assert_fail@plt+0x11238>
   23784:	ldr	r1, [r3, #4]
   23788:	str	r1, [r4, #36]	; 0x24
   2378c:	ldr	r1, [r4, #16]
   23790:	mov	r0, #1
   23794:	ldr	ip, [r2, #4]
   23798:	add	r1, r1, r0
   2379c:	stm	r3, {r6, ip}
   237a0:	str	r3, [r2, #4]
   237a4:	str	r1, [r4, #16]
   237a8:	b	2372c <__assert_fail@plt+0x11138>
   237ac:	add	r0, r4, #20
   237b0:	bl	22a5c <__assert_fail@plt+0x10468>
   237b4:	vldr	s15, [r4, #8]
   237b8:	vldr	s14, [r4, #12]
   237bc:	ldr	r3, [r4, #20]
   237c0:	vcvt.f32.u32	s15, s15
   237c4:	vcvt.f32.u32	s14, s14
   237c8:	vldr	s13, [r3, #8]
   237cc:	vmul.f32	s12, s13, s15
   237d0:	vcmpe.f32	s14, s12
   237d4:	vmrs	APSR_nzcv, fpscr
   237d8:	ble	23768 <__assert_fail@plt+0x11174>
   237dc:	vldr	s14, [r3, #12]
   237e0:	ldrb	r2, [r3, #16]
   237e4:	vmul.f32	s15, s15, s14
   237e8:	vldr	s14, [pc, #140]	; 2387c <__assert_fail@plt+0x11288>
   237ec:	cmp	r2, #0
   237f0:	vmuleq.f32	s15, s15, s13
   237f4:	vcmpe.f32	s15, s14
   237f8:	vmrs	APSR_nzcv, fpscr
   237fc:	blt	23844 <__assert_fail@plt+0x11250>
   23800:	mvn	r0, #0
   23804:	b	2372c <__assert_fail@plt+0x11138>
   23808:	ldr	r1, [r4, #12]
   2380c:	mov	r0, #1
   23810:	ldr	r3, [r4, #16]
   23814:	str	r6, [r2]
   23818:	add	r2, r1, r0
   2381c:	add	r3, r3, r0
   23820:	str	r2, [r4, #12]
   23824:	str	r3, [r4, #16]
   23828:	b	2372c <__assert_fail@plt+0x11138>
   2382c:	mov	r0, #8
   23830:	bl	31b54 <__assert_fail@plt+0x1f560>
   23834:	subs	r3, r0, #0
   23838:	beq	23800 <__assert_fail@plt+0x1120c>
   2383c:	ldr	r2, [sp, #4]
   23840:	b	2378c <__assert_fail@plt+0x11198>
   23844:	vcvt.u32.f32	s15, s15
   23848:	mov	r0, r4
   2384c:	vmov	r1, s15
   23850:	bl	23554 <__assert_fail@plt+0x10f60>
   23854:	cmp	r0, #0
   23858:	beq	23800 <__assert_fail@plt+0x1120c>
   2385c:	add	r2, sp, #4
   23860:	mov	r3, #0
   23864:	mov	r1, r6
   23868:	mov	r0, r4
   2386c:	bl	22934 <__assert_fail@plt+0x10340>
   23870:	cmp	r0, #0
   23874:	beq	23768 <__assert_fail@plt+0x11174>
   23878:	bl	125a0 <abort@plt>
   2387c:	svcmi	0x00800000
   23880:	str	r4, [sp, #-8]!
   23884:	mov	r4, r1
   23888:	str	lr, [sp, #4]
   2388c:	sub	sp, sp, #8
   23890:	add	r2, sp, #4
   23894:	bl	236e4 <__assert_fail@plt+0x110f0>
   23898:	cmn	r0, #1
   2389c:	moveq	r0, #0
   238a0:	beq	238b0 <__assert_fail@plt+0x112bc>
   238a4:	cmp	r0, #0
   238a8:	ldreq	r0, [sp, #4]
   238ac:	movne	r0, r4
   238b0:	add	sp, sp, #8
   238b4:	ldr	r4, [sp]
   238b8:	add	sp, sp, #4
   238bc:	pop	{pc}		; (ldr pc, [sp], #4)
   238c0:	strd	r4, [sp, #-16]!
   238c4:	mov	r3, #1
   238c8:	mov	r4, r0
   238cc:	str	r6, [sp, #8]
   238d0:	str	lr, [sp, #12]
   238d4:	sub	sp, sp, #8
   238d8:	add	r2, sp, #4
   238dc:	bl	22934 <__assert_fail@plt+0x10340>
   238e0:	subs	r5, r0, #0
   238e4:	beq	23904 <__assert_fail@plt+0x11310>
   238e8:	ldr	r2, [sp, #4]
   238ec:	ldr	r3, [r4, #16]
   238f0:	ldr	r2, [r2]
   238f4:	sub	r3, r3, #1
   238f8:	str	r3, [r4, #16]
   238fc:	cmp	r2, #0
   23900:	beq	2391c <__assert_fail@plt+0x11328>
   23904:	mov	r0, r5
   23908:	add	sp, sp, #8
   2390c:	ldrd	r4, [sp]
   23910:	ldr	r6, [sp, #8]
   23914:	add	sp, sp, #12
   23918:	pop	{pc}		; (ldr pc, [sp], #4)
   2391c:	vldr	s15, [r4, #8]
   23920:	ldr	r3, [r4, #12]
   23924:	ldr	r2, [r4, #20]
   23928:	vcvt.f32.u32	s15, s15
   2392c:	sub	r3, r3, #1
   23930:	vmov	s14, r3
   23934:	vldr	s13, [r2]
   23938:	str	r3, [r4, #12]
   2393c:	vmul.f32	s15, s15, s13
   23940:	vcvt.f32.u32	s14, s14
   23944:	vcmpe.f32	s14, s15
   23948:	vmrs	APSR_nzcv, fpscr
   2394c:	bpl	23904 <__assert_fail@plt+0x11310>
   23950:	add	r0, r4, #20
   23954:	bl	22a5c <__assert_fail@plt+0x10468>
   23958:	vldr	s15, [r4, #8]
   2395c:	vldr	s13, [r4, #12]
   23960:	ldr	r3, [r4, #20]
   23964:	vcvt.f32.u32	s15, s15
   23968:	vcvt.f32.u32	s13, s13
   2396c:	vldr	s14, [r3]
   23970:	vmul.f32	s14, s15, s14
   23974:	vcmpe.f32	s13, s14
   23978:	vmrs	APSR_nzcv, fpscr
   2397c:	bpl	23904 <__assert_fail@plt+0x11310>
   23980:	ldrb	r2, [r3, #16]
   23984:	mov	r0, r4
   23988:	vldr	s14, [r3, #4]
   2398c:	cmp	r2, #0
   23990:	vmul.f32	s15, s15, s14
   23994:	vldreq	s14, [r3, #8]
   23998:	vmuleq.f32	s15, s15, s14
   2399c:	vcvt.u32.f32	s15, s15
   239a0:	vmov	r1, s15
   239a4:	bl	23554 <__assert_fail@plt+0x10f60>
   239a8:	cmp	r0, #0
   239ac:	bne	23904 <__assert_fail@plt+0x11310>
   239b0:	ldr	r0, [r4, #36]	; 0x24
   239b4:	cmp	r0, #0
   239b8:	beq	239cc <__assert_fail@plt+0x113d8>
   239bc:	ldr	r6, [r0, #4]
   239c0:	bl	2f668 <__assert_fail@plt+0x1d074>
   239c4:	subs	r0, r6, #0
   239c8:	bne	239bc <__assert_fail@plt+0x113c8>
   239cc:	mov	r3, #0
   239d0:	str	r3, [r4, #36]	; 0x24
   239d4:	b	23904 <__assert_fail@plt+0x11310>
   239d8:	b	238c0 <__assert_fail@plt+0x112cc>
   239dc:	andeq	r0, r0, r0
   239e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   239e4:	strd	r6, [sp, #8]
   239e8:	mov	r7, r1
   239ec:	mov	r6, r0
   239f0:	strd	r8, [sp, #16]
   239f4:	mov	r9, r3
   239f8:	ands	r3, r3, #32
   239fc:	strd	sl, [sp, #24]
   23a00:	str	lr, [sp, #32]
   23a04:	vpush	{d8-d9}
   23a08:	sub	sp, sp, #116	; 0x74
   23a0c:	str	r2, [sp, #12]
   23a10:	str	r3, [sp, #40]	; 0x28
   23a14:	movne	r3, #1024	; 0x400
   23a18:	moveq	r3, #1000	; 0x3e8
   23a1c:	strd	r6, [sp, #24]
   23a20:	str	r3, [sp, #36]	; 0x24
   23a24:	add	r3, r2, #644	; 0x284
   23a28:	mov	r5, r3
   23a2c:	bl	124a4 <localeconv@plt>
   23a30:	add	r3, r5, #3
   23a34:	ldr	r5, [r0]
   23a38:	mov	r4, r0
   23a3c:	str	r3, [sp, #8]
   23a40:	and	r3, r9, #3
   23a44:	str	r3, [sp, #32]
   23a48:	mov	r0, r5
   23a4c:	bl	12300 <strlen@plt>
   23a50:	ldrd	sl, [r4, #4]
   23a54:	sub	r2, r0, #1
   23a58:	movw	r3, #24608	; 0x6020
   23a5c:	movt	r3, #4
   23a60:	cmp	r2, #16
   23a64:	movcc	r3, r5
   23a68:	mov	r2, r0
   23a6c:	movcc	r2, r0
   23a70:	movcs	r2, #1
   23a74:	mov	r0, sl
   23a78:	str	r2, [sp, #4]
   23a7c:	str	r3, [sp, #44]	; 0x2c
   23a80:	bl	12300 <strlen@plt>
   23a84:	cmp	r0, #16
   23a88:	movw	r3, #17776	; 0x4570
   23a8c:	movt	r3, #4
   23a90:	ldrd	r4, [sp, #168]	; 0xa8
   23a94:	movhi	sl, r3
   23a98:	ldrd	r2, [sp, #176]	; 0xb0
   23a9c:	cmp	r3, r5
   23aa0:	cmpeq	r2, r4
   23aa4:	bhi	23d48 <__assert_fail@plt+0x11754>
   23aa8:	mov	r0, r4
   23aac:	mov	r1, r5
   23ab0:	bl	42574 <__assert_fail@plt+0x2ff80>
   23ab4:	orrs	r3, r2, r3
   23ab8:	bne	23af8 <__assert_fail@plt+0x11504>
   23abc:	mul	ip, r0, r7
   23ac0:	mov	r4, r6
   23ac4:	mov	r5, r7
   23ac8:	mov	r3, r1
   23acc:	umull	r6, r7, r0, r6
   23ad0:	mov	r2, r0
   23ad4:	mla	r1, r4, r1, ip
   23ad8:	strd	r6, [sp, #16]
   23adc:	add	r1, r1, r7
   23ae0:	str	r1, [sp, #20]
   23ae4:	ldrd	r0, [sp, #16]
   23ae8:	bl	42574 <__assert_fail@plt+0x2ff80>
   23aec:	cmp	r1, r5
   23af0:	cmpeq	r0, r4
   23af4:	beq	24094 <__assert_fail@plt+0x11aa0>
   23af8:	ldrd	r0, [sp, #168]	; 0xa8
   23afc:	bl	4242c <__assert_fail@plt+0x2fe38>
   23b00:	vmov	d9, r0, r1
   23b04:	ldrd	r0, [sp, #176]	; 0xb0
   23b08:	bl	4242c <__assert_fail@plt+0x2fe38>
   23b0c:	vmov	d7, r0, r1
   23b10:	ldrd	r0, [sp, #24]
   23b14:	vdiv.f64	d8, d9, d7
   23b18:	bl	4242c <__assert_fail@plt+0x2fe38>
   23b1c:	vmov	d7, r0, r1
   23b20:	tst	r9, #16
   23b24:	vmul.f64	d8, d8, d7
   23b28:	beq	23c94 <__assert_fail@plt+0x116a0>
   23b2c:	ldr	r6, [sp, #4]
   23b30:	mov	r7, #0
   23b34:	vldr	s15, [sp, #36]	; 0x24
   23b38:	vcvt.f64.s32	d6, s15
   23b3c:	vmov.f64	d7, d6
   23b40:	vmov.f64	d5, d7
   23b44:	vmul.f64	d7, d7, d6
   23b48:	add	r7, r7, #1
   23b4c:	vcmpe.f64	d7, d8
   23b50:	vmrs	APSR_nzcv, fpscr
   23b54:	bhi	23b60 <__assert_fail@plt+0x1156c>
   23b58:	cmp	r7, #8
   23b5c:	bne	23b40 <__assert_fail@plt+0x1154c>
   23b60:	ldr	r3, [sp, #40]	; 0x28
   23b64:	add	r8, r6, #1
   23b68:	vdiv.f64	d9, d8, d5
   23b6c:	str	r6, [sp, #4]
   23b70:	clz	r4, r3
   23b74:	ldr	r3, [sp, #32]
   23b78:	lsr	r4, r4, #5
   23b7c:	add	r4, r4, #1
   23b80:	add	r4, r4, r8
   23b84:	cmp	r3, #1
   23b88:	beq	24164 <__assert_fail@plt+0x11b70>
   23b8c:	vldr	d7, [pc, #980]	; 23f68 <__assert_fail@plt+0x11974>
   23b90:	vcmpe.f64	d9, d7
   23b94:	vmrs	APSR_nzcv, fpscr
   23b98:	vmovpl.f64	d7, d9
   23b9c:	bpl	23be0 <__assert_fail@plt+0x115ec>
   23ba0:	vmov	r0, r1, d9
   23ba4:	bl	425c0 <__assert_fail@plt+0x2ffcc>
   23ba8:	mov	r5, r0
   23bac:	mov	r6, r1
   23bb0:	bl	4242c <__assert_fail@plt+0x2fe38>
   23bb4:	ldr	r3, [sp, #32]
   23bb8:	vmov	d7, r0, r1
   23bbc:	cmp	r3, #0
   23bc0:	bne	23be0 <__assert_fail@plt+0x115ec>
   23bc4:	vcmp.f64	d9, d7
   23bc8:	vmrs	APSR_nzcv, fpscr
   23bcc:	beq	23be0 <__assert_fail@plt+0x115ec>
   23bd0:	adds	r0, r5, #1
   23bd4:	adc	r1, r6, #0
   23bd8:	bl	4242c <__assert_fail@plt+0x2fe38>
   23bdc:	vmov	d7, r0, r1
   23be0:	ldr	r5, [sp, #12]
   23be4:	movw	r1, #28408	; 0x6ef8
   23be8:	movt	r1, #4
   23bec:	vmov	r2, r3, d7
   23bf0:	mov	r0, r5
   23bf4:	bl	124b0 <sprintf@plt>
   23bf8:	mov	r0, r5
   23bfc:	bl	12300 <strlen@plt>
   23c00:	cmp	r0, r4
   23c04:	bls	2402c <__assert_fail@plt+0x11a38>
   23c08:	vldr	d7, [pc, #864]	; 23f70 <__assert_fail@plt+0x1197c>
   23c0c:	vmul.f64	d9, d9, d7
   23c10:	vldr	d7, [pc, #848]	; 23f68 <__assert_fail@plt+0x11974>
   23c14:	vcmpe.f64	d9, d7
   23c18:	vmrs	APSR_nzcv, fpscr
   23c1c:	bpl	23c64 <__assert_fail@plt+0x11670>
   23c20:	vmov	r0, r1, d9
   23c24:	bl	425c0 <__assert_fail@plt+0x2ffcc>
   23c28:	mov	r4, r0
   23c2c:	mov	r5, r1
   23c30:	bl	4242c <__assert_fail@plt+0x2fe38>
   23c34:	ldr	r3, [sp, #32]
   23c38:	vmov	d7, r0, r1
   23c3c:	cmp	r3, #0
   23c40:	bne	23c60 <__assert_fail@plt+0x1166c>
   23c44:	vcmp.f64	d9, d7
   23c48:	vmrs	APSR_nzcv, fpscr
   23c4c:	beq	23c60 <__assert_fail@plt+0x1166c>
   23c50:	adds	r0, r4, #1
   23c54:	adc	r1, r5, #0
   23c58:	bl	4242c <__assert_fail@plt+0x2fe38>
   23c5c:	vmov	d7, r0, r1
   23c60:	vmov.f64	d9, d7
   23c64:	vldr	d7, [pc, #772]	; 23f70 <__assert_fail@plt+0x1197c>
   23c68:	movw	r1, #28400	; 0x6ef0
   23c6c:	movt	r1, #4
   23c70:	ldr	r4, [sp, #12]
   23c74:	vdiv.f64	d7, d9, d7
   23c78:	mov	r0, r4
   23c7c:	vmov	r2, r3, d7
   23c80:	bl	124b0 <sprintf@plt>
   23c84:	mov	r0, r4
   23c88:	bl	12300 <strlen@plt>
   23c8c:	mov	r8, r0
   23c90:	b	23cd8 <__assert_fail@plt+0x116e4>
   23c94:	and	r6, r9, #3
   23c98:	cmp	r6, #1
   23c9c:	beq	23cb0 <__assert_fail@plt+0x116bc>
   23ca0:	vldr	d7, [pc, #704]	; 23f68 <__assert_fail@plt+0x11974>
   23ca4:	vcmpe.f64	d8, d7
   23ca8:	vmrs	APSR_nzcv, fpscr
   23cac:	bmi	24050 <__assert_fail@plt+0x11a5c>
   23cb0:	ldr	r4, [sp, #12]
   23cb4:	movw	r1, #28400	; 0x6ef0
   23cb8:	movt	r1, #4
   23cbc:	vmov	r2, r3, d8
   23cc0:	mvn	r7, #0
   23cc4:	mov	r0, r4
   23cc8:	bl	124b0 <sprintf@plt>
   23ccc:	mov	r0, r4
   23cd0:	bl	12300 <strlen@plt>
   23cd4:	mov	r8, r0
   23cd8:	ldr	r3, [sp, #8]
   23cdc:	mov	r2, r0
   23ce0:	ldr	r1, [sp, #12]
   23ce4:	sub	r6, r3, r0
   23ce8:	mov	r0, r6
   23cec:	add	r8, r6, r8
   23cf0:	bl	11fb8 <memmove@plt>
   23cf4:	tst	r9, #4
   23cf8:	bne	23ebc <__assert_fail@plt+0x118c8>
   23cfc:	tst	r9, #128	; 0x80
   23d00:	beq	23d18 <__assert_fail@plt+0x11724>
   23d04:	cmn	r7, #1
   23d08:	beq	23f78 <__assert_fail@plt+0x11984>
   23d0c:	and	r3, r9, #256	; 0x100
   23d10:	orrs	r2, r3, r7
   23d14:	bne	241e4 <__assert_fail@plt+0x11bf0>
   23d18:	ldr	r2, [sp, #8]
   23d1c:	mov	r3, #0
   23d20:	mov	r0, r6
   23d24:	strb	r3, [r2]
   23d28:	add	sp, sp, #116	; 0x74
   23d2c:	vpop	{d8-d9}
   23d30:	ldrd	r4, [sp]
   23d34:	ldrd	r6, [sp, #8]
   23d38:	ldrd	r8, [sp, #16]
   23d3c:	ldrd	sl, [sp, #24]
   23d40:	add	sp, sp, #32
   23d44:	pop	{pc}		; (ldr pc, [sp], #4)
   23d48:	ldrd	r2, [sp, #168]	; 0xa8
   23d4c:	orrs	r3, r2, r3
   23d50:	beq	23af8 <__assert_fail@plt+0x11504>
   23d54:	ldrd	r2, [sp, #168]	; 0xa8
   23d58:	ldrd	r0, [sp, #176]	; 0xb0
   23d5c:	bl	42574 <__assert_fail@plt+0x2ff80>
   23d60:	orrs	r3, r2, r3
   23d64:	mov	r4, r0
   23d68:	mov	r5, r1
   23d6c:	bne	23af8 <__assert_fail@plt+0x11504>
   23d70:	mov	r2, r4
   23d74:	mov	r3, r5
   23d78:	ldrd	r0, [sp, #24]
   23d7c:	bl	42574 <__assert_fail@plt+0x2ff80>
   23d80:	mov	lr, r2
   23d84:	mov	r8, r1
   23d88:	lsl	r1, r3, #2
   23d8c:	mov	r7, r0
   23d90:	lsl	r0, lr, #2
   23d94:	mov	ip, r3
   23d98:	orr	r1, r1, lr, lsr #30
   23d9c:	mov	r2, r4
   23da0:	mov	r3, r5
   23da4:	adds	r0, r0, lr
   23da8:	adc	r1, r1, ip
   23dac:	adds	r0, r0, r0
   23db0:	adc	r1, r1, r1
   23db4:	bl	42574 <__assert_fail@plt+0x2ff80>
   23db8:	adds	r1, r2, r2
   23dbc:	mov	r2, r4
   23dc0:	str	r7, [sp, #16]
   23dc4:	adc	r3, r3, r3
   23dc8:	mov	lr, r0
   23dcc:	str	r8, [sp, #20]
   23dd0:	str	r1, [sp, #48]	; 0x30
   23dd4:	str	r3, [sp, #52]	; 0x34
   23dd8:	mov	r3, r5
   23ddc:	ldrd	r4, [sp, #48]	; 0x30
   23de0:	cmp	r3, r5
   23de4:	cmpeq	r2, r4
   23de8:	bls	241cc <__assert_fail@plt+0x11bd8>
   23dec:	mov	r3, r4
   23df0:	orrs	r3, r3, r5
   23df4:	movne	r3, #1
   23df8:	moveq	r3, #0
   23dfc:	mov	r6, r3
   23e00:	ands	r3, r9, #16
   23e04:	str	r3, [sp, #48]	; 0x30
   23e08:	beq	240ac <__assert_fail@plt+0x11ab8>
   23e0c:	ldrd	r4, [sp, #16]
   23e10:	mov	r3, #0
   23e14:	mov	r7, #0
   23e18:	ldr	r8, [sp, #36]	; 0x24
   23e1c:	cmp	r3, r5
   23e20:	mov	r2, r8
   23e24:	cmpeq	r8, r4
   23e28:	strd	r2, [sp, #24]
   23e2c:	bhi	240b0 <__assert_fail@plt+0x11abc>
   23e30:	str	sl, [sp, #56]	; 0x38
   23e34:	mov	sl, r6
   23e38:	mov	r6, lr
   23e3c:	str	r9, [sp, #60]	; 0x3c
   23e40:	ldr	r9, [sp, #4]
   23e44:	b	23e6c <__assert_fail@plt+0x11878>
   23e48:	adds	sl, sl, #0
   23e4c:	movne	sl, #1
   23e50:	ldrd	r2, [sp, #24]
   23e54:	add	r7, r7, #1
   23e58:	cmp	r3, r1
   23e5c:	cmpeq	r2, r0
   23e60:	bhi	24268 <__assert_fail@plt+0x11c74>
   23e64:	cmp	r7, #8
   23e68:	beq	24230 <__assert_fail@plt+0x11c3c>
   23e6c:	mov	r0, r4
   23e70:	mov	r1, r5
   23e74:	ldrd	r2, [sp, #24]
   23e78:	bl	42574 <__assert_fail@plt+0x2ff80>
   23e7c:	add	r2, r2, r2, lsl #2
   23e80:	mov	r4, r0
   23e84:	mov	r5, r1
   23e88:	asr	r3, sl, #1
   23e8c:	add	r6, r6, r2, lsl #1
   23e90:	udiv	ip, r6, r8
   23e94:	mls	r2, r8, ip, r6
   23e98:	mov	r6, ip
   23e9c:	add	r3, r3, r2, lsl #1
   23ea0:	cmp	r8, r3
   23ea4:	add	sl, sl, r3
   23ea8:	bhi	23e48 <__assert_fail@plt+0x11854>
   23eac:	cmp	r8, sl
   23eb0:	movcc	sl, #3
   23eb4:	movcs	sl, #2
   23eb8:	b	23e50 <__assert_fail@plt+0x1185c>
   23ebc:	mov	r0, sl
   23ec0:	sub	r4, r8, r6
   23ec4:	bl	12300 <strlen@plt>
   23ec8:	add	r3, sp, #68	; 0x44
   23ecc:	mov	r1, r6
   23ed0:	str	r0, [sp, #16]
   23ed4:	mov	r2, r4
   23ed8:	mov	r0, r3
   23edc:	bl	12024 <memcpy@plt>
   23ee0:	ldr	r6, [sp, #16]
   23ee4:	mvn	r5, #0
   23ee8:	str	r7, [sp, #4]
   23eec:	ldrb	r3, [fp]
   23ef0:	cmp	r3, #0
   23ef4:	beq	23f08 <__assert_fail@plt+0x11914>
   23ef8:	cmp	r3, #255	; 0xff
   23efc:	add	fp, fp, #1
   23f00:	movne	r5, r3
   23f04:	moveq	r5, r4
   23f08:	sub	r7, r8, r5
   23f0c:	cmp	r5, r4
   23f10:	mov	r2, r5
   23f14:	mov	r0, r7
   23f18:	bls	23f38 <__assert_fail@plt+0x11944>
   23f1c:	sub	r6, r8, r4
   23f20:	mov	r2, r4
   23f24:	ldr	r7, [sp, #4]
   23f28:	add	r1, sp, #68	; 0x44
   23f2c:	mov	r0, r6
   23f30:	bl	12024 <memcpy@plt>
   23f34:	b	23cfc <__assert_fail@plt+0x11708>
   23f38:	sub	r4, r4, r5
   23f3c:	add	r3, sp, #68	; 0x44
   23f40:	add	r1, r3, r4
   23f44:	sub	r8, r7, r6
   23f48:	bl	12024 <memcpy@plt>
   23f4c:	cmp	r4, #0
   23f50:	mov	r2, r6
   23f54:	mov	r1, sl
   23f58:	mov	r0, r8
   23f5c:	beq	243d4 <__assert_fail@plt+0x11de0>
   23f60:	bl	12024 <memcpy@plt>
   23f64:	b	23eec <__assert_fail@plt+0x118f8>
   23f68:	andeq	r0, r0, r0
   23f6c:	mvnsmi	r0, #0
   23f70:	andeq	r0, r0, r0
   23f74:	eormi	r0, r4, r0
   23f78:	ldrd	r2, [sp, #176]	; 0xb0
   23f7c:	cmp	r3, #0
   23f80:	cmpeq	r2, #1
   23f84:	bls	24228 <__assert_fail@plt+0x11c34>
   23f88:	ldr	r1, [sp, #36]	; 0x24
   23f8c:	mov	r7, #1
   23f90:	mov	r2, #1
   23f94:	mov	r3, #0
   23f98:	ldrd	r4, [sp, #176]	; 0xb0
   23f9c:	mul	r0, r1, r3
   23fa0:	umull	r2, r3, r2, r1
   23fa4:	add	r3, r0, r3
   23fa8:	cmp	r5, r3
   23fac:	cmpeq	r4, r2
   23fb0:	bls	23fc0 <__assert_fail@plt+0x119cc>
   23fb4:	add	r7, r7, #1
   23fb8:	cmp	r7, #8
   23fbc:	bne	23f9c <__assert_fail@plt+0x119a8>
   23fc0:	tst	r9, #64	; 0x40
   23fc4:	and	r3, r9, #256	; 0x100
   23fc8:	beq	23fe8 <__assert_fail@plt+0x119f4>
   23fcc:	ldr	r1, [sp, #12]
   23fd0:	mov	r2, #32
   23fd4:	add	r0, r1, #648	; 0x288
   23fd8:	strb	r2, [r1, #647]	; 0x287
   23fdc:	str	r0, [sp, #8]
   23fe0:	cmp	r7, #0
   23fe4:	beq	243c4 <__assert_fail@plt+0x11dd0>
   23fe8:	ldr	r0, [sp, #40]	; 0x28
   23fec:	cmp	r0, #0
   23ff0:	cmpeq	r7, #1
   23ff4:	beq	2424c <__assert_fail@plt+0x11c58>
   23ff8:	movw	r2, #28368	; 0x6ed0
   23ffc:	movt	r2, #4
   24000:	ldrb	r1, [r2, r7]
   24004:	cmp	r3, #0
   24008:	ldr	r2, [sp, #8]
   2400c:	strb	r1, [r2], #1
   24010:	beq	24260 <__assert_fail@plt+0x11c6c>
   24014:	cmp	r0, #0
   24018:	bne	241f0 <__assert_fail@plt+0x11bfc>
   2401c:	mov	r3, #66	; 0x42
   24020:	strb	r3, [r2], #1
   24024:	str	r2, [sp, #8]
   24028:	b	23d18 <__assert_fail@plt+0x11724>
   2402c:	tst	r9, #8
   24030:	beq	24048 <__assert_fail@plt+0x11a54>
   24034:	ldr	r3, [sp, #12]
   24038:	add	r3, r3, r0
   2403c:	ldrb	r3, [r3, #-1]
   24040:	cmp	r3, #48	; 0x30
   24044:	beq	24314 <__assert_fail@plt+0x11d20>
   24048:	sub	r8, r0, r8
   2404c:	b	23cd8 <__assert_fail@plt+0x116e4>
   24050:	vmov	r0, r1, d8
   24054:	bl	425c0 <__assert_fail@plt+0x2ffcc>
   24058:	mov	r4, r0
   2405c:	mov	r5, r1
   24060:	bl	4242c <__assert_fail@plt+0x2fe38>
   24064:	cmp	r6, #0
   24068:	vmov	d7, r0, r1
   2406c:	bne	2408c <__assert_fail@plt+0x11a98>
   24070:	vcmp.f64	d8, d7
   24074:	vmrs	APSR_nzcv, fpscr
   24078:	beq	2408c <__assert_fail@plt+0x11a98>
   2407c:	adds	r0, r4, #1
   24080:	adc	r1, r5, #0
   24084:	bl	4242c <__assert_fail@plt+0x2fe38>
   24088:	vmov	d7, r0, r1
   2408c:	vmov.f64	d8, d7
   24090:	b	23cb0 <__assert_fail@plt+0x116bc>
   24094:	mov	r3, #0
   24098:	mov	r6, r3
   2409c:	mov	lr, r3
   240a0:	ands	r3, r9, #16
   240a4:	str	r3, [sp, #48]	; 0x30
   240a8:	bne	23e0c <__assert_fail@plt+0x11818>
   240ac:	mvn	r7, #0
   240b0:	ldr	r3, [sp, #32]
   240b4:	cmp	r3, #1
   240b8:	beq	24198 <__assert_fail@plt+0x11ba4>
   240bc:	ldr	r8, [sp, #8]
   240c0:	ldr	r3, [sp, #32]
   240c4:	cmp	r3, #0
   240c8:	bne	24114 <__assert_fail@plt+0x11b20>
   240cc:	add	r3, r6, lr
   240d0:	cmp	r3, #0
   240d4:	ble	24114 <__assert_fail@plt+0x11b20>
   240d8:	ldr	r3, [sp, #16]
   240dc:	adds	r3, r3, #1
   240e0:	str	r3, [sp, #16]
   240e4:	ldr	r3, [sp, #20]
   240e8:	adc	r3, r3, #0
   240ec:	str	r3, [sp, #20]
   240f0:	ldr	r3, [sp, #48]	; 0x30
   240f4:	cmp	r3, #0
   240f8:	beq	24114 <__assert_fail@plt+0x11b20>
   240fc:	ldrd	r0, [sp, #16]
   24100:	mov	r3, #0
   24104:	ldr	r2, [sp, #36]	; 0x24
   24108:	cmp	r3, r1
   2410c:	cmpeq	r2, r0
   24110:	beq	24204 <__assert_fail@plt+0x11c10>
   24114:	ldrd	r4, [sp, #16]
   24118:	mov	r6, r8
   2411c:	mov	r0, r4
   24120:	mov	r1, r5
   24124:	mov	r2, #10
   24128:	mov	r3, #0
   2412c:	bl	42574 <__assert_fail@plt+0x2ff80>
   24130:	add	r2, r2, #48	; 0x30
   24134:	mov	r0, r4
   24138:	mov	r1, r5
   2413c:	mov	r3, #0
   24140:	strb	r2, [r6, #-1]!
   24144:	mov	r2, #10
   24148:	bl	42574 <__assert_fail@plt+0x2ff80>
   2414c:	cmp	r5, #0
   24150:	mov	r5, r1
   24154:	cmpeq	r4, #9
   24158:	mov	r4, r0
   2415c:	bhi	2411c <__assert_fail@plt+0x11b28>
   24160:	b	23cf4 <__assert_fail@plt+0x11700>
   24164:	ldr	r5, [sp, #12]
   24168:	movw	r1, #28408	; 0x6ef8
   2416c:	movt	r1, #4
   24170:	vmov	r2, r3, d9
   24174:	mov	r0, r5
   24178:	bl	124b0 <sprintf@plt>
   2417c:	mov	r0, r5
   24180:	bl	12300 <strlen@plt>
   24184:	cmp	r4, r0
   24188:	bcs	2402c <__assert_fail@plt+0x11a38>
   2418c:	vldr	d7, [pc, #-548]	; 23f70 <__assert_fail@plt+0x1197c>
   24190:	vmul.f64	d9, d9, d7
   24194:	b	23c64 <__assert_fail@plt+0x11670>
   24198:	mov	r5, #0
   2419c:	ldr	r8, [sp, #8]
   241a0:	ldr	r3, [sp, #16]
   241a4:	and	r4, r3, #1
   241a8:	adds	r2, r4, r6
   241ac:	adc	r3, r5, r6, asr #31
   241b0:	orr	r2, r2, r3
   241b4:	mov	r3, lr
   241b8:	cmp	r2, r5
   241bc:	addne	r3, r3, #1
   241c0:	cmp	r3, #5
   241c4:	bgt	240d8 <__assert_fail@plt+0x11ae4>
   241c8:	b	24114 <__assert_fail@plt+0x11b20>
   241cc:	movcs	r3, #2
   241d0:	movcs	r6, r3
   241d4:	bcs	23e00 <__assert_fail@plt+0x1180c>
   241d8:	mov	r3, #3
   241dc:	mov	r6, r3
   241e0:	b	23e00 <__assert_fail@plt+0x1180c>
   241e4:	tst	r9, #64	; 0x40
   241e8:	beq	23fe0 <__assert_fail@plt+0x119ec>
   241ec:	b	23fcc <__assert_fail@plt+0x119d8>
   241f0:	ldr	r1, [sp, #8]
   241f4:	mov	r3, #105	; 0x69
   241f8:	add	r2, r1, #2
   241fc:	strb	r3, [r1, #1]
   24200:	b	2401c <__assert_fail@plt+0x11a28>
   24204:	cmp	r7, #8
   24208:	beq	24114 <__assert_fail@plt+0x11b20>
   2420c:	tst	r9, #8
   24210:	add	r7, r7, #1
   24214:	beq	2438c <__assert_fail@plt+0x11d98>
   24218:	mov	r3, #49	; 0x31
   2421c:	sub	r6, r8, #1
   24220:	strb	r3, [r8, #-1]
   24224:	b	23cf4 <__assert_fail@plt+0x11700>
   24228:	mov	r7, #0
   2422c:	b	23d0c <__assert_fail@plt+0x11718>
   24230:	mov	lr, r6
   24234:	mov	r6, sl
   24238:	str	r9, [sp, #4]
   2423c:	strd	r4, [sp, #16]
   24240:	ldr	sl, [sp, #56]	; 0x38
   24244:	ldr	r9, [sp, #60]	; 0x3c
   24248:	b	240b0 <__assert_fail@plt+0x11abc>
   2424c:	ldr	r2, [sp, #8]
   24250:	mov	r1, #107	; 0x6b
   24254:	cmp	r3, #0
   24258:	strb	r1, [r2], #1
   2425c:	bne	2401c <__assert_fail@plt+0x11a28>
   24260:	str	r2, [sp, #8]
   24264:	b	23d18 <__assert_fail@plt+0x11724>
   24268:	cmp	r1, #0
   2426c:	mov	lr, r6
   24270:	str	r9, [sp, #4]
   24274:	cmpeq	r0, #9
   24278:	mov	r6, sl
   2427c:	strd	r4, [sp, #16]
   24280:	ldr	sl, [sp, #56]	; 0x38
   24284:	ldr	r9, [sp, #60]	; 0x3c
   24288:	bhi	240b0 <__assert_fail@plt+0x11abc>
   2428c:	ldr	r3, [sp, #32]
   24290:	cmp	r3, #1
   24294:	beq	24340 <__assert_fail@plt+0x11d4c>
   24298:	ldr	r2, [sp, #32]
   2429c:	adds	r3, r6, #0
   242a0:	movne	r3, #1
   242a4:	cmp	r2, #0
   242a8:	movne	r3, #0
   242ac:	cmp	r3, #0
   242b0:	bne	2432c <__assert_fail@plt+0x11d38>
   242b4:	cmp	ip, #0
   242b8:	addne	r3, ip, #48	; 0x30
   242bc:	uxtbne	r3, r3
   242c0:	bne	242d0 <__assert_fail@plt+0x11cdc>
   242c4:	tst	r9, #8
   242c8:	bne	24384 <__assert_fail@plt+0x11d90>
   242cc:	mov	r3, #48	; 0x30
   242d0:	ldr	r2, [sp, #4]
   242d4:	ldr	r1, [sp, #12]
   242d8:	add	r8, r1, #644	; 0x284
   242dc:	strb	r3, [r1, #646]	; 0x286
   242e0:	mov	r3, #0
   242e4:	add	r8, r8, #2
   242e8:	ldr	r1, [sp, #44]	; 0x2c
   242ec:	mov	r6, r3
   242f0:	sub	r8, r8, r2
   242f4:	mov	r0, r8
   242f8:	bl	12024 <memcpy@plt>
   242fc:	ldr	r3, [sp, #32]
   24300:	cmp	r3, #1
   24304:	beq	24114 <__assert_fail@plt+0x11b20>
   24308:	mov	r3, #0
   2430c:	mov	lr, r3
   24310:	b	240c0 <__assert_fail@plt+0x11acc>
   24314:	vldr	d7, [pc, #-940]	; 23f70 <__assert_fail@plt+0x1197c>
   24318:	ldr	r3, [sp, #32]
   2431c:	vmul.f64	d9, d9, d7
   24320:	cmp	r3, #1
   24324:	bne	23c10 <__assert_fail@plt+0x1161c>
   24328:	b	23c64 <__assert_fail@plt+0x11670>
   2432c:	cmp	ip, #9
   24330:	beq	24358 <__assert_fail@plt+0x11d64>
   24334:	add	r3, ip, #49	; 0x31
   24338:	uxtb	r3, r3
   2433c:	b	242d0 <__assert_fail@plt+0x11cdc>
   24340:	and	r3, ip, #1
   24344:	add	r3, r3, r6
   24348:	cmp	r3, #2
   2434c:	movle	r3, #0
   24350:	movgt	r3, #1
   24354:	b	242ac <__assert_fail@plt+0x11cb8>
   24358:	adds	r3, r0, #1
   2435c:	str	r3, [sp, #16]
   24360:	adc	r3, r1, #0
   24364:	str	r3, [sp, #20]
   24368:	ldrd	r2, [sp, #16]
   2436c:	cmp	r3, #0
   24370:	cmpeq	r2, #10
   24374:	beq	243b4 <__assert_fail@plt+0x11dc0>
   24378:	mov	r3, #0
   2437c:	mov	r6, r3
   24380:	b	242c4 <__assert_fail@plt+0x11cd0>
   24384:	ldr	r8, [sp, #8]
   24388:	b	242fc <__assert_fail@plt+0x11d08>
   2438c:	ldr	r3, [sp, #4]
   24390:	mov	r0, #48	; 0x30
   24394:	strb	r0, [r8, #-1]
   24398:	ldr	r2, [sp, #4]
   2439c:	mvn	r3, r3
   243a0:	ldr	r1, [sp, #44]	; 0x2c
   243a4:	add	r8, r8, r3
   243a8:	mov	r0, r8
   243ac:	bl	12024 <memcpy@plt>
   243b0:	b	24218 <__assert_fail@plt+0x11c24>
   243b4:	mov	r3, #0
   243b8:	ldr	r8, [sp, #8]
   243bc:	mov	r6, r3
   243c0:	b	242fc <__assert_fail@plt+0x11d08>
   243c4:	cmp	r3, #0
   243c8:	ldrne	r2, [sp, #8]
   243cc:	bne	2401c <__assert_fail@plt+0x11a28>
   243d0:	b	23d18 <__assert_fail@plt+0x11724>
   243d4:	mov	r6, r7
   243d8:	ldr	r7, [sp, #4]
   243dc:	b	23cfc <__assert_fail@plt+0x11708>
   243e0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   243e4:	subs	r4, r0, #0
   243e8:	strd	r6, [sp, #8]
   243ec:	mov	r7, r1
   243f0:	mov	r6, r2
   243f4:	str	r8, [sp, #16]
   243f8:	strd	sl, [sp, #20]
   243fc:	str	lr, [sp, #28]
   24400:	sub	sp, sp, #16
   24404:	beq	24524 <__assert_fail@plt+0x11f30>
   24408:	ldrb	r3, [r4]
   2440c:	movw	r5, #28368	; 0x6ed0
   24410:	movt	r5, #4
   24414:	add	r2, r5, #12
   24418:	add	r1, r5, #20
   2441c:	cmp	r3, #39	; 0x27
   24420:	mov	r3, #4
   24424:	addeq	r4, r4, #1
   24428:	moveq	r8, #4
   2442c:	mov	r0, r4
   24430:	movne	r8, #0
   24434:	bl	412d4 <__assert_fail@plt+0x2ece0>
   24438:	cmp	r0, #0
   2443c:	blt	2447c <__assert_fail@plt+0x11e88>
   24440:	add	r5, r5, r0, lsl #2
   24444:	mov	sl, #1
   24448:	mov	fp, #0
   2444c:	mov	r0, #0
   24450:	ldr	r3, [r5, #12]
   24454:	strd	sl, [r6]
   24458:	orr	r3, r8, r3
   2445c:	str	r3, [r7]
   24460:	add	sp, sp, #16
   24464:	ldrd	r4, [sp]
   24468:	ldrd	r6, [sp, #8]
   2446c:	ldr	r8, [sp, #16]
   24470:	ldrd	sl, [sp, #20]
   24474:	add	sp, sp, #28
   24478:	pop	{pc}		; (ldr pc, [sp], #4)
   2447c:	movw	r0, #28440	; 0x6f18
   24480:	movt	r0, #4
   24484:	mov	r3, r6
   24488:	mov	r2, #0
   2448c:	add	r1, sp, #12
   24490:	str	r0, [sp]
   24494:	mov	r0, r4
   24498:	bl	2e5e0 <__assert_fail@plt+0x1bfec>
   2449c:	cmp	r0, #0
   244a0:	bne	244e8 <__assert_fail@plt+0x11ef4>
   244a4:	ldrb	r3, [r4]
   244a8:	sub	r3, r3, #48	; 0x30
   244ac:	cmp	r3, #9
   244b0:	bls	244dc <__assert_fail@plt+0x11ee8>
   244b4:	ldr	r2, [sp, #12]
   244b8:	cmp	r4, r2
   244bc:	bne	244cc <__assert_fail@plt+0x11ed8>
   244c0:	b	24578 <__assert_fail@plt+0x11f84>
   244c4:	cmp	r2, r4
   244c8:	beq	24578 <__assert_fail@plt+0x11f84>
   244cc:	ldrb	r3, [r4, #1]!
   244d0:	sub	r3, r3, #48	; 0x30
   244d4:	cmp	r3, #9
   244d8:	bhi	244c4 <__assert_fail@plt+0x11ed0>
   244dc:	ldrd	r2, [r6]
   244e0:	str	r8, [r7]
   244e4:	b	244f4 <__assert_fail@plt+0x11f00>
   244e8:	mov	r1, #0
   244ec:	ldrd	r2, [r6]
   244f0:	str	r1, [r7]
   244f4:	orrs	r3, r2, r3
   244f8:	bne	24460 <__assert_fail@plt+0x11e6c>
   244fc:	movw	r0, #18592	; 0x48a0
   24500:	movt	r0, #4
   24504:	bl	12228 <getenv@plt>
   24508:	cmp	r0, #0
   2450c:	mov	r3, #0
   24510:	moveq	r2, #1024	; 0x400
   24514:	movne	r2, #512	; 0x200
   24518:	mov	r0, #4
   2451c:	strd	r2, [r6]
   24520:	b	24460 <__assert_fail@plt+0x11e6c>
   24524:	movw	r0, #28416	; 0x6f00
   24528:	movt	r0, #4
   2452c:	bl	12228 <getenv@plt>
   24530:	subs	r4, r0, #0
   24534:	bne	24408 <__assert_fail@plt+0x11e14>
   24538:	movw	r0, #28428	; 0x6f0c
   2453c:	movt	r0, #4
   24540:	bl	12228 <getenv@plt>
   24544:	subs	r4, r0, #0
   24548:	bne	24408 <__assert_fail@plt+0x11e14>
   2454c:	movw	r0, #18592	; 0x48a0
   24550:	movt	r0, #4
   24554:	bl	12228 <getenv@plt>
   24558:	subs	r3, r0, #0
   2455c:	beq	245a4 <__assert_fail@plt+0x11fb0>
   24560:	mov	r2, #512	; 0x200
   24564:	mov	r3, #0
   24568:	mov	r0, r4
   2456c:	strd	r2, [r6]
   24570:	str	r4, [r7]
   24574:	b	24460 <__assert_fail@plt+0x11e6c>
   24578:	ldrb	r3, [r2, #-1]
   2457c:	cmp	r3, #66	; 0x42
   24580:	orrne	r8, r8, #128	; 0x80
   24584:	beq	24590 <__assert_fail@plt+0x11f9c>
   24588:	orr	r8, r8, #32
   2458c:	b	244dc <__assert_fail@plt+0x11ee8>
   24590:	ldrb	r3, [r2, #-2]
   24594:	orr	r8, r8, #384	; 0x180
   24598:	cmp	r3, #105	; 0x69
   2459c:	bne	244dc <__assert_fail@plt+0x11ee8>
   245a0:	b	24588 <__assert_fail@plt+0x11f94>
   245a4:	mov	r4, #1024	; 0x400
   245a8:	mov	r5, #0
   245ac:	mov	r0, r3
   245b0:	strd	r4, [r6]
   245b4:	str	r3, [r7]
   245b8:	b	24460 <__assert_fail@plt+0x11e6c>
   245bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   245c0:	strd	r6, [sp, #8]
   245c4:	movw	r6, #40180	; 0x9cf4
   245c8:	movt	r6, #5
   245cc:	ldr	r4, [r6]
   245d0:	str	r8, [sp, #16]
   245d4:	str	lr, [sp, #20]
   245d8:	cmp	r4, #0
   245dc:	beq	24608 <__assert_fail@plt+0x12014>
   245e0:	ldr	r3, [r4]
   245e4:	cmp	r0, r3
   245e8:	bne	245fc <__assert_fail@plt+0x12008>
   245ec:	b	24658 <__assert_fail@plt+0x12064>
   245f0:	ldr	r3, [r4]
   245f4:	cmp	r3, r0
   245f8:	beq	24658 <__assert_fail@plt+0x12064>
   245fc:	ldr	r4, [r4, #4]
   24600:	cmp	r4, #0
   24604:	bne	245f0 <__assert_fail@plt+0x11ffc>
   24608:	mov	r5, r0
   2460c:	bl	11f58 <getpwuid@plt>
   24610:	cmp	r0, #0
   24614:	movweq	r7, #17776	; 0x4570
   24618:	moveq	r0, #12
   2461c:	movteq	r7, #4
   24620:	beq	24638 <__assert_fail@plt+0x12044>
   24624:	ldr	r7, [r0]
   24628:	mov	r0, r7
   2462c:	bl	12300 <strlen@plt>
   24630:	add	r0, r0, #12
   24634:	bic	r0, r0, #3
   24638:	bl	2da2c <__assert_fail@plt+0x1b438>
   2463c:	mov	r4, r0
   24640:	mov	r1, r7
   24644:	str	r5, [r0], #8
   24648:	bl	121b0 <strcpy@plt>
   2464c:	ldr	r3, [r6]
   24650:	str	r4, [r6]
   24654:	str	r3, [r4, #4]
   24658:	ldrb	r0, [r4, #8]
   2465c:	ldrd	r6, [sp, #8]
   24660:	ldr	r8, [sp, #16]
   24664:	cmp	r0, #0
   24668:	addne	r0, r4, #8
   2466c:	ldrd	r4, [sp]
   24670:	add	sp, sp, #20
   24674:	pop	{pc}		; (ldr pc, [sp], #4)
   24678:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2467c:	mov	r5, r0
   24680:	strd	r6, [sp, #8]
   24684:	movw	r6, #40180	; 0x9cf4
   24688:	movt	r6, #5
   2468c:	ldr	r4, [r6]
   24690:	str	r8, [sp, #16]
   24694:	str	lr, [sp, #20]
   24698:	cmp	r4, #0
   2469c:	beq	246ec <__assert_fail@plt+0x120f8>
   246a0:	ldrb	r7, [r0]
   246a4:	b	246b4 <__assert_fail@plt+0x120c0>
   246a8:	ldr	r4, [r4, #4]
   246ac:	cmp	r4, #0
   246b0:	beq	246ec <__assert_fail@plt+0x120f8>
   246b4:	ldrb	r3, [r4, #8]
   246b8:	cmp	r3, r7
   246bc:	bne	246a8 <__assert_fail@plt+0x120b4>
   246c0:	mov	r1, r5
   246c4:	add	r0, r4, #8
   246c8:	bl	11f40 <strcmp@plt>
   246cc:	cmp	r0, #0
   246d0:	bne	246a8 <__assert_fail@plt+0x120b4>
   246d4:	mov	r0, r4
   246d8:	ldrd	r4, [sp]
   246dc:	ldrd	r6, [sp, #8]
   246e0:	ldr	r8, [sp, #16]
   246e4:	add	sp, sp, #20
   246e8:	pop	{pc}		; (ldr pc, [sp], #4)
   246ec:	ldr	r4, [r6, #4]
   246f0:	cmp	r4, #0
   246f4:	beq	24734 <__assert_fail@plt+0x12140>
   246f8:	ldrb	r7, [r5]
   246fc:	b	2470c <__assert_fail@plt+0x12118>
   24700:	ldr	r4, [r4, #4]
   24704:	cmp	r4, #0
   24708:	beq	24734 <__assert_fail@plt+0x12140>
   2470c:	ldrb	r3, [r4, #8]
   24710:	cmp	r3, r7
   24714:	bne	24700 <__assert_fail@plt+0x1210c>
   24718:	mov	r1, r5
   2471c:	add	r0, r4, #8
   24720:	bl	11f40 <strcmp@plt>
   24724:	cmp	r0, #0
   24728:	bne	24700 <__assert_fail@plt+0x1210c>
   2472c:	mov	r4, r0
   24730:	b	246d4 <__assert_fail@plt+0x120e0>
   24734:	mov	r0, r5
   24738:	bl	11f1c <getpwnam@plt>
   2473c:	mov	r4, r0
   24740:	mov	r0, r5
   24744:	bl	12300 <strlen@plt>
   24748:	add	r0, r0, #12
   2474c:	bic	r0, r0, #3
   24750:	bl	2da2c <__assert_fail@plt+0x1b438>
   24754:	mov	r7, r0
   24758:	mov	r1, r5
   2475c:	add	r0, r0, #8
   24760:	bl	121b0 <strcpy@plt>
   24764:	cmp	r4, #0
   24768:	beq	24788 <__assert_fail@plt+0x12194>
   2476c:	ldr	r2, [r6]
   24770:	str	r7, [r6]
   24774:	ldr	r3, [r4, #8]
   24778:	mov	r4, r7
   2477c:	str	r3, [r7]
   24780:	str	r2, [r7, #4]
   24784:	b	246d4 <__assert_fail@plt+0x120e0>
   24788:	ldr	r3, [r6, #4]
   2478c:	str	r7, [r6, #4]
   24790:	str	r3, [r7, #4]
   24794:	b	246d4 <__assert_fail@plt+0x120e0>
   24798:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2479c:	strd	r6, [sp, #8]
   247a0:	movw	r6, #40180	; 0x9cf4
   247a4:	movt	r6, #5
   247a8:	ldr	r4, [r6, #8]
   247ac:	str	r8, [sp, #16]
   247b0:	str	lr, [sp, #20]
   247b4:	cmp	r4, #0
   247b8:	beq	247e4 <__assert_fail@plt+0x121f0>
   247bc:	ldr	r3, [r4]
   247c0:	cmp	r0, r3
   247c4:	bne	247d8 <__assert_fail@plt+0x121e4>
   247c8:	b	24834 <__assert_fail@plt+0x12240>
   247cc:	ldr	r3, [r4]
   247d0:	cmp	r3, r0
   247d4:	beq	24834 <__assert_fail@plt+0x12240>
   247d8:	ldr	r4, [r4, #4]
   247dc:	cmp	r4, #0
   247e0:	bne	247cc <__assert_fail@plt+0x121d8>
   247e4:	mov	r5, r0
   247e8:	bl	125d0 <getgrgid@plt>
   247ec:	cmp	r0, #0
   247f0:	movweq	r7, #17776	; 0x4570
   247f4:	moveq	r0, #12
   247f8:	movteq	r7, #4
   247fc:	beq	24814 <__assert_fail@plt+0x12220>
   24800:	ldr	r7, [r0]
   24804:	mov	r0, r7
   24808:	bl	12300 <strlen@plt>
   2480c:	add	r0, r0, #12
   24810:	bic	r0, r0, #3
   24814:	bl	2da2c <__assert_fail@plt+0x1b438>
   24818:	mov	r4, r0
   2481c:	mov	r1, r7
   24820:	str	r5, [r0], #8
   24824:	bl	121b0 <strcpy@plt>
   24828:	ldr	r3, [r6, #8]
   2482c:	str	r4, [r6, #8]
   24830:	str	r3, [r4, #4]
   24834:	ldrb	r0, [r4, #8]
   24838:	ldrd	r6, [sp, #8]
   2483c:	ldr	r8, [sp, #16]
   24840:	cmp	r0, #0
   24844:	addne	r0, r4, #8
   24848:	ldrd	r4, [sp]
   2484c:	add	sp, sp, #20
   24850:	pop	{pc}		; (ldr pc, [sp], #4)
   24854:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24858:	mov	r5, r0
   2485c:	strd	r6, [sp, #8]
   24860:	movw	r6, #40180	; 0x9cf4
   24864:	movt	r6, #5
   24868:	ldr	r4, [r6, #8]
   2486c:	str	r8, [sp, #16]
   24870:	str	lr, [sp, #20]
   24874:	cmp	r4, #0
   24878:	beq	248c8 <__assert_fail@plt+0x122d4>
   2487c:	ldrb	r7, [r0]
   24880:	b	24890 <__assert_fail@plt+0x1229c>
   24884:	ldr	r4, [r4, #4]
   24888:	cmp	r4, #0
   2488c:	beq	248c8 <__assert_fail@plt+0x122d4>
   24890:	ldrb	r3, [r4, #8]
   24894:	cmp	r3, r7
   24898:	bne	24884 <__assert_fail@plt+0x12290>
   2489c:	mov	r1, r5
   248a0:	add	r0, r4, #8
   248a4:	bl	11f40 <strcmp@plt>
   248a8:	cmp	r0, #0
   248ac:	bne	24884 <__assert_fail@plt+0x12290>
   248b0:	mov	r0, r4
   248b4:	ldrd	r4, [sp]
   248b8:	ldrd	r6, [sp, #8]
   248bc:	ldr	r8, [sp, #16]
   248c0:	add	sp, sp, #20
   248c4:	pop	{pc}		; (ldr pc, [sp], #4)
   248c8:	ldr	r4, [r6, #12]
   248cc:	cmp	r4, #0
   248d0:	beq	24910 <__assert_fail@plt+0x1231c>
   248d4:	ldrb	r7, [r5]
   248d8:	b	248e8 <__assert_fail@plt+0x122f4>
   248dc:	ldr	r4, [r4, #4]
   248e0:	cmp	r4, #0
   248e4:	beq	24910 <__assert_fail@plt+0x1231c>
   248e8:	ldrb	r3, [r4, #8]
   248ec:	cmp	r3, r7
   248f0:	bne	248dc <__assert_fail@plt+0x122e8>
   248f4:	mov	r1, r5
   248f8:	add	r0, r4, #8
   248fc:	bl	11f40 <strcmp@plt>
   24900:	cmp	r0, #0
   24904:	bne	248dc <__assert_fail@plt+0x122e8>
   24908:	mov	r4, r0
   2490c:	b	248b0 <__assert_fail@plt+0x122bc>
   24910:	mov	r0, r5
   24914:	bl	125dc <getgrnam@plt>
   24918:	mov	r4, r0
   2491c:	mov	r0, r5
   24920:	bl	12300 <strlen@plt>
   24924:	add	r0, r0, #12
   24928:	bic	r0, r0, #3
   2492c:	bl	2da2c <__assert_fail@plt+0x1b438>
   24930:	mov	r7, r0
   24934:	mov	r1, r5
   24938:	add	r0, r0, #8
   2493c:	bl	121b0 <strcpy@plt>
   24940:	cmp	r4, #0
   24944:	beq	24960 <__assert_fail@plt+0x1236c>
   24948:	ldr	r2, [r4, #8]
   2494c:	mov	r4, r7
   24950:	ldr	r3, [r6, #8]
   24954:	str	r7, [r6, #8]
   24958:	strd	r2, [r7]
   2495c:	b	248b0 <__assert_fail@plt+0x122bc>
   24960:	ldr	r3, [r6, #12]
   24964:	str	r7, [r6, #12]
   24968:	str	r3, [r7, #4]
   2496c:	b	248b0 <__assert_fail@plt+0x122bc>
   24970:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24974:	mov	r5, r0
   24978:	strd	r6, [sp, #8]
   2497c:	mov	r6, r2
   24980:	lsrs	r2, r6, #30
   24984:	str	fp, [sp, #16]
   24988:	add	fp, sp, #20
   2498c:	movne	r2, #1
   24990:	moveq	r2, #0
   24994:	lsls	r0, r6, #2
   24998:	str	lr, [sp, #20]
   2499c:	bmi	24aa4 <__assert_fail@plt+0x124b0>
   249a0:	cmp	r2, #0
   249a4:	bne	24aa4 <__assert_fail@plt+0x124b0>
   249a8:	cmp	r0, #4016	; 0xfb0
   249ac:	mov	r4, r1
   249b0:	mov	r7, r3
   249b4:	bhi	24a98 <__assert_fail@plt+0x124a4>
   249b8:	add	r3, r0, #22
   249bc:	bic	r3, r3, #7
   249c0:	sub	sp, sp, r3
   249c4:	add	r0, sp, #15
   249c8:	bic	r0, r0, #15
   249cc:	cmp	r0, #0
   249d0:	beq	24aa4 <__assert_fail@plt+0x124b0>
   249d4:	mov	r3, #1
   249d8:	cmp	r6, #2
   249dc:	movhi	r2, r4
   249e0:	movhi	ip, #0
   249e4:	str	r3, [r0, #4]
   249e8:	movhi	r3, #2
   249ec:	bls	24a34 <__assert_fail@plt+0x12440>
   249f0:	ldrb	r1, [r2, #1]!
   249f4:	ldrb	lr, [r4, ip]
   249f8:	cmp	lr, r1
   249fc:	bne	24a18 <__assert_fail@plt+0x12424>
   24a00:	b	24ad8 <__assert_fail@plt+0x124e4>
   24a04:	ldr	lr, [r0, ip, lsl #2]
   24a08:	sub	ip, ip, lr
   24a0c:	ldrb	lr, [r4, ip]
   24a10:	cmp	lr, r1
   24a14:	beq	24ad8 <__assert_fail@plt+0x124e4>
   24a18:	cmp	ip, #0
   24a1c:	bne	24a04 <__assert_fail@plt+0x12410>
   24a20:	mov	ip, #0
   24a24:	str	r3, [r0, r3, lsl #2]
   24a28:	add	r3, r3, #1
   24a2c:	cmp	r6, r3
   24a30:	bne	249f0 <__assert_fail@plt+0x123fc>
   24a34:	mov	r3, #0
   24a38:	mov	r1, r5
   24a3c:	mov	r2, r3
   24a40:	str	r3, [r7]
   24a44:	ldrb	r3, [r5]
   24a48:	cmp	r3, #0
   24a4c:	beq	24a78 <__assert_fail@plt+0x12484>
   24a50:	ldrb	ip, [r4, r2]
   24a54:	cmp	ip, r3
   24a58:	beq	24aac <__assert_fail@plt+0x124b8>
   24a5c:	cmp	r2, #0
   24a60:	beq	24ac8 <__assert_fail@plt+0x124d4>
   24a64:	ldr	ip, [r0, r2, lsl #2]
   24a68:	cmp	r3, #0
   24a6c:	add	r5, r5, ip
   24a70:	sub	r2, r2, ip
   24a74:	bne	24a50 <__assert_fail@plt+0x1245c>
   24a78:	bl	41cc4 <__assert_fail@plt+0x2f6d0>
   24a7c:	mov	r0, #1
   24a80:	sub	sp, fp, #20
   24a84:	ldrd	r4, [sp]
   24a88:	ldrd	r6, [sp, #8]
   24a8c:	ldr	fp, [sp, #16]
   24a90:	add	sp, sp, #20
   24a94:	pop	{pc}		; (ldr pc, [sp], #4)
   24a98:	bl	41c6c <__assert_fail@plt+0x2f678>
   24a9c:	cmp	r0, #0
   24aa0:	bne	249d4 <__assert_fail@plt+0x123e0>
   24aa4:	mov	r0, #0
   24aa8:	b	24a80 <__assert_fail@plt+0x1248c>
   24aac:	add	r2, r2, #1
   24ab0:	add	ip, r1, #1
   24ab4:	cmp	r6, r2
   24ab8:	beq	24ae8 <__assert_fail@plt+0x124f4>
   24abc:	ldrb	r3, [r1, #1]
   24ac0:	mov	r1, ip
   24ac4:	b	24a48 <__assert_fail@plt+0x12454>
   24ac8:	ldrb	r3, [r1, #1]
   24acc:	add	r5, r5, #1
   24ad0:	add	r1, r1, #1
   24ad4:	b	24a48 <__assert_fail@plt+0x12454>
   24ad8:	add	ip, ip, #1
   24adc:	sub	r1, r3, ip
   24ae0:	str	r1, [r0, r3, lsl #2]
   24ae4:	b	24a28 <__assert_fail@plt+0x12434>
   24ae8:	str	r5, [r7]
   24aec:	b	24a78 <__assert_fail@plt+0x12484>
   24af0:	movw	r3, #28480	; 0x6f40
   24af4:	movt	r3, #4
   24af8:	str	r4, [sp, #-8]!
   24afc:	movw	r1, #28500	; 0x6f54
   24b00:	movt	r1, #4
   24b04:	str	lr, [sp, #4]
   24b08:	movw	r0, #28512	; 0x6f60
   24b0c:	movt	r0, #4
   24b10:	mov	r2, #172	; 0xac
   24b14:	bl	125f4 <__assert_fail@plt>
   24b18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   24b1c:	mov	r4, r1
   24b20:	strd	r6, [sp, #8]
   24b24:	strd	r8, [sp, #16]
   24b28:	strd	sl, [sp, #24]
   24b2c:	add	fp, sp, #32
   24b30:	str	lr, [sp, #32]
   24b34:	sub	sp, sp, #188	; 0xbc
   24b38:	str	r2, [fp, #-220]	; 0xffffff24
   24b3c:	str	r0, [fp, #-212]	; 0xffffff2c
   24b40:	mov	r0, r1
   24b44:	bl	41dac <__assert_fail@plt+0x2f7b8>
   24b48:	mov	r3, #44	; 0x2c
   24b4c:	str	r0, [fp, #-208]	; 0xffffff30
   24b50:	umull	r0, r1, r0, r3
   24b54:	adds	r2, r1, #0
   24b58:	movne	r2, #1
   24b5c:	cmp	r0, #0
   24b60:	blt	24f48 <__assert_fail@plt+0x12954>
   24b64:	cmp	r2, #0
   24b68:	bne	24f48 <__assert_fail@plt+0x12954>
   24b6c:	ldr	r2, [fp, #-208]	; 0xffffff30
   24b70:	mul	r0, r3, r2
   24b74:	cmp	r0, #4016	; 0xfb0
   24b78:	bhi	24f68 <__assert_fail@plt+0x12974>
   24b7c:	add	r3, r0, #22
   24b80:	bic	r3, r3, #7
   24b84:	sub	sp, sp, r3
   24b88:	add	r3, sp, #15
   24b8c:	bic	sl, r3, #15
   24b90:	cmp	sl, #0
   24b94:	beq	24f48 <__assert_fail@plt+0x12954>
   24b98:	ldr	r3, [fp, #-208]	; 0xffffff30
   24b9c:	mov	r1, #0
   24ba0:	mov	r2, #0
   24ba4:	movw	r8, #34644	; 0x8754
   24ba8:	movt	r8, #4
   24bac:	mov	r6, r1
   24bb0:	add	r5, sl, #16
   24bb4:	strb	r1, [fp, #-204]	; 0xffffff34
   24bb8:	strb	r1, [fp, #-192]	; 0xffffff40
   24bbc:	str	r4, [fp, #-188]	; 0xffffff44
   24bc0:	add	r9, r3, r3, lsl #2
   24bc4:	mov	r3, #0
   24bc8:	add	r9, sl, r9, lsl #3
   24bcc:	str	r9, [fp, #-216]	; 0xffffff28
   24bd0:	strd	r2, [fp, #-200]	; 0xffffff38
   24bd4:	b	24c58 <__assert_fail@plt+0x12664>
   24bd8:	ldrb	r3, [r4]
   24bdc:	lsr	r2, r3, #5
   24be0:	and	r3, r3, #31
   24be4:	ldr	r2, [r8, r2, lsl #2]
   24be8:	lsr	r3, r2, r3
   24bec:	tst	r3, #1
   24bf0:	beq	24f74 <__assert_fail@plt+0x12980>
   24bf4:	mov	r3, #1
   24bf8:	str	r3, [fp, #-184]	; 0xffffff48
   24bfc:	ldrb	r2, [r4]
   24c00:	strb	r3, [fp, #-192]	; 0xffffff40
   24c04:	strb	r3, [fp, #-180]	; 0xffffff4c
   24c08:	mov	r4, r2
   24c0c:	str	r2, [fp, #-176]	; 0xffffff50
   24c10:	cmp	r4, #0
   24c14:	beq	24cd4 <__assert_fail@plt+0x126e0>
   24c18:	mov	r9, #1
   24c1c:	ldr	r4, [fp, #-188]	; 0xffffff44
   24c20:	sub	r2, fp, #172	; 0xac
   24c24:	ldr	r7, [fp, #-184]	; 0xffffff48
   24c28:	cmp	r4, r2
   24c2c:	strne	r4, [r5, #-16]
   24c30:	beq	24f94 <__assert_fail@plt+0x129a0>
   24c34:	cmp	r9, #0
   24c38:	add	r4, r4, r7
   24c3c:	str	r7, [r5, #-12]
   24c40:	ldrne	r3, [fp, #-176]	; 0xffffff50
   24c44:	add	r5, r5, #40	; 0x28
   24c48:	strb	r9, [r5, #-48]	; 0xffffffd0
   24c4c:	strb	r6, [fp, #-192]	; 0xffffff40
   24c50:	str	r4, [fp, #-188]	; 0xffffff44
   24c54:	strne	r3, [r5, #-44]	; 0xffffffd4
   24c58:	ldrb	r3, [fp, #-204]	; 0xffffff34
   24c5c:	ldr	r4, [fp, #-188]	; 0xffffff44
   24c60:	cmp	r3, #0
   24c64:	subne	r7, fp, #200	; 0xc8
   24c68:	beq	24bd8 <__assert_fail@plt+0x125e4>
   24c6c:	bl	12198 <__ctype_get_mb_cur_max@plt>
   24c70:	mov	r1, r0
   24c74:	mov	r0, r4
   24c78:	bl	2d43c <__assert_fail@plt+0x1ae48>
   24c7c:	mov	r2, r0
   24c80:	mov	r3, r7
   24c84:	mov	r1, r4
   24c88:	sub	r0, fp, #176	; 0xb0
   24c8c:	bl	31b90 <__assert_fail@plt+0x1f59c>
   24c90:	cmn	r0, #1
   24c94:	str	r0, [fp, #-184]	; 0xffffff48
   24c98:	beq	24fac <__assert_fail@plt+0x129b8>
   24c9c:	cmn	r0, #2
   24ca0:	beq	24fc4 <__assert_fail@plt+0x129d0>
   24ca4:	cmp	r0, #0
   24ca8:	beq	24fe4 <__assert_fail@plt+0x129f0>
   24cac:	ldr	r4, [fp, #-176]	; 0xffffff50
   24cb0:	mov	r9, #1
   24cb4:	mov	r0, r7
   24cb8:	strb	r9, [fp, #-180]	; 0xffffff4c
   24cbc:	bl	12060 <mbsinit@plt>
   24cc0:	cmp	r0, #0
   24cc4:	strb	r9, [fp, #-192]	; 0xffffff40
   24cc8:	strbne	r6, [fp, #-204]	; 0xffffff34
   24ccc:	cmp	r4, #0
   24cd0:	bne	24c18 <__assert_fail@plt+0x12624>
   24cd4:	ldr	r9, [fp, #-216]	; 0xffffff28
   24cd8:	mov	r3, #1
   24cdc:	mov	r7, r4
   24ce0:	ldr	r2, [fp, #-208]	; 0xffffff30
   24ce4:	str	r3, [r9, #4]
   24ce8:	cmp	r2, #2
   24cec:	bls	24d8c <__assert_fail@plt+0x12798>
   24cf0:	mov	r8, #2
   24cf4:	mov	r5, sl
   24cf8:	str	r4, [fp, #-216]	; 0xffffff28
   24cfc:	mov	r7, r8
   24d00:	ldr	r8, [fp, #-208]	; 0xffffff30
   24d04:	ldrb	r6, [r5, #48]	; 0x30
   24d08:	b	24d38 <__assert_fail@plt+0x12744>
   24d0c:	ldrb	r2, [r3, #8]
   24d10:	cmp	r2, #0
   24d14:	beq	24d48 <__assert_fail@plt+0x12754>
   24d18:	ldr	r3, [r3, #12]
   24d1c:	ldr	r2, [r5, #52]	; 0x34
   24d20:	cmp	r2, r3
   24d24:	beq	24d6c <__assert_fail@plt+0x12778>
   24d28:	cmp	r4, #0
   24d2c:	beq	252dc <__assert_fail@plt+0x12ce8>
   24d30:	ldr	r3, [r9, r4, lsl #2]
   24d34:	sub	r4, r4, r3
   24d38:	add	r3, r4, r4, lsl #2
   24d3c:	cmp	r6, #0
   24d40:	add	r3, sl, r3, lsl #3
   24d44:	bne	24d0c <__assert_fail@plt+0x12718>
   24d48:	ldr	r1, [r3, #4]
   24d4c:	ldr	r2, [r5, #44]	; 0x2c
   24d50:	cmp	r2, r1
   24d54:	bne	24d28 <__assert_fail@plt+0x12734>
   24d58:	ldr	r1, [r3]
   24d5c:	ldr	r0, [r5, #40]	; 0x28
   24d60:	bl	12084 <memcmp@plt>
   24d64:	cmp	r0, #0
   24d68:	bne	24d28 <__assert_fail@plt+0x12734>
   24d6c:	add	r4, r4, #1
   24d70:	sub	r2, r7, r4
   24d74:	str	r2, [r9, r7, lsl #2]
   24d78:	add	r7, r7, #1
   24d7c:	add	r5, r5, #40	; 0x28
   24d80:	cmp	r8, r7
   24d84:	bne	24d04 <__assert_fail@plt+0x12710>
   24d88:	ldr	r7, [fp, #-216]	; 0xffffff28
   24d8c:	mov	r1, #0
   24d90:	mov	r0, #0
   24d94:	str	r9, [fp, #-216]	; 0xffffff28
   24d98:	ldr	r3, [fp, #-212]	; 0xffffff2c
   24d9c:	mov	r2, #0
   24da0:	movw	ip, #34644	; 0x8754
   24da4:	movt	ip, #4
   24da8:	mov	r6, #1
   24dac:	strd	r0, [fp, #-144]	; 0xffffff70
   24db0:	mov	r9, ip
   24db4:	strd	r0, [fp, #-88]	; 0xffffffa8
   24db8:	ldr	r1, [fp, #-220]	; 0xffffff24
   24dbc:	strb	r2, [fp, #-148]	; 0xffffff6c
   24dc0:	str	r3, [fp, #-132]	; 0xffffff7c
   24dc4:	str	r3, [fp, #-76]	; 0xffffffb4
   24dc8:	mov	r3, r2
   24dcc:	strb	r2, [fp, #-136]	; 0xffffff78
   24dd0:	strb	r2, [fp, #-92]	; 0xffffffa4
   24dd4:	strb	r2, [fp, #-80]	; 0xffffffb0
   24dd8:	str	r2, [r1]
   24ddc:	cmp	r3, #0
   24de0:	ldreq	r5, [fp, #-76]	; 0xffffffb4
   24de4:	beq	24e98 <__assert_fail@plt+0x128a4>
   24de8:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   24dec:	cmp	r3, #0
   24df0:	bne	25338 <__assert_fail@plt+0x12d44>
   24df4:	add	r3, r7, r7, lsl #2
   24df8:	add	r3, sl, r3, lsl #3
   24dfc:	ldr	r4, [fp, #-72]	; 0xffffffb8
   24e00:	ldr	r2, [r3, #4]
   24e04:	cmp	r2, r4
   24e08:	beq	25088 <__assert_fail@plt+0x12a94>
   24e0c:	cmp	r7, #0
   24e10:	bne	250ac <__assert_fail@plt+0x12ab8>
   24e14:	ldrb	r3, [fp, #-136]	; 0xffffff78
   24e18:	cmp	r3, #0
   24e1c:	bne	25324 <__assert_fail@plt+0x12d30>
   24e20:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   24e24:	ldr	r4, [fp, #-132]	; 0xffffff7c
   24e28:	cmp	r3, #0
   24e2c:	subne	r8, fp, #144	; 0x90
   24e30:	bne	25278 <__assert_fail@plt+0x12c84>
   24e34:	ldrb	r3, [r4]
   24e38:	lsr	r2, r3, #5
   24e3c:	and	r3, r3, #31
   24e40:	ldr	r2, [r9, r2, lsl #2]
   24e44:	lsr	r3, r2, r3
   24e48:	tst	r3, #1
   24e4c:	beq	25260 <__assert_fail@plt+0x12c6c>
   24e50:	str	r6, [fp, #-128]	; 0xffffff80
   24e54:	ldrb	r4, [r4]
   24e58:	strb	r6, [fp, #-136]	; 0xffffff78
   24e5c:	strb	r6, [fp, #-124]	; 0xffffff84
   24e60:	str	r4, [fp, #-120]	; 0xffffff88
   24e64:	cmp	r4, #0
   24e68:	beq	25148 <__assert_fail@plt+0x12b54>
   24e6c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   24e70:	mov	r3, #0
   24e74:	ldr	r2, [fp, #-128]	; 0xffffff80
   24e78:	strb	r3, [fp, #-136]	; 0xffffff78
   24e7c:	strb	r3, [fp, #-80]	; 0xffffffb0
   24e80:	ldr	r5, [fp, #-76]	; 0xffffffb4
   24e84:	ldr	r3, [fp, #-72]	; 0xffffffb8
   24e88:	add	r4, r4, r2
   24e8c:	str	r4, [fp, #-132]	; 0xffffff7c
   24e90:	add	r5, r5, r3
   24e94:	str	r5, [fp, #-76]	; 0xffffffb4
   24e98:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   24e9c:	cmp	r3, #0
   24ea0:	subne	r4, fp, #88	; 0x58
   24ea4:	bne	25024 <__assert_fail@plt+0x12a30>
   24ea8:	ldrb	r3, [r5]
   24eac:	lsr	r2, r3, #5
   24eb0:	and	r3, r3, #31
   24eb4:	ldr	r2, [r9, r2, lsl #2]
   24eb8:	lsr	r3, r2, r3
   24ebc:	tst	r3, #1
   24ec0:	beq	2500c <__assert_fail@plt+0x12a18>
   24ec4:	str	r6, [fp, #-72]	; 0xffffffb8
   24ec8:	ldrb	r3, [r5]
   24ecc:	strb	r6, [fp, #-80]	; 0xffffffb0
   24ed0:	strb	r6, [fp, #-68]	; 0xffffffbc
   24ed4:	mov	r5, r3
   24ed8:	str	r3, [fp, #-64]	; 0xffffffc0
   24edc:	cmp	r5, #0
   24ee0:	beq	24f38 <__assert_fail@plt+0x12944>
   24ee4:	add	r3, r7, r7, lsl #2
   24ee8:	add	r3, sl, r3, lsl #3
   24eec:	ldrb	r2, [r3, #8]
   24ef0:	cmp	r2, #0
   24ef4:	beq	24dfc <__assert_fail@plt+0x12808>
   24ef8:	ldr	r3, [r3, #12]
   24efc:	cmp	r3, r5
   24f00:	bne	24e0c <__assert_fail@plt+0x12818>
   24f04:	ldr	r5, [fp, #-76]	; 0xffffffb4
   24f08:	ldr	r4, [fp, #-72]	; 0xffffffb8
   24f0c:	add	r7, r7, #1
   24f10:	add	r5, r5, r4
   24f14:	ldr	r2, [fp, #-208]	; 0xffffff30
   24f18:	mov	r3, #0
   24f1c:	strb	r3, [fp, #-80]	; 0xffffffb0
   24f20:	str	r5, [fp, #-76]	; 0xffffffb4
   24f24:	cmp	r2, r7
   24f28:	bne	24e98 <__assert_fail@plt+0x128a4>
   24f2c:	ldr	r2, [fp, #-220]	; 0xffffff24
   24f30:	ldr	r3, [fp, #-132]	; 0xffffff7c
   24f34:	str	r3, [r2]
   24f38:	mov	r0, sl
   24f3c:	bl	41cc4 <__assert_fail@plt+0x2f6d0>
   24f40:	mov	r0, #1
   24f44:	b	24f4c <__assert_fail@plt+0x12958>
   24f48:	mov	r0, #0
   24f4c:	sub	sp, fp, #32
   24f50:	ldrd	r4, [sp]
   24f54:	ldrd	r6, [sp, #8]
   24f58:	ldrd	r8, [sp, #16]
   24f5c:	ldrd	sl, [sp, #24]
   24f60:	add	sp, sp, #32
   24f64:	pop	{pc}		; (ldr pc, [sp], #4)
   24f68:	bl	41c6c <__assert_fail@plt+0x2f678>
   24f6c:	mov	sl, r0
   24f70:	b	24b90 <__assert_fail@plt+0x1259c>
   24f74:	sub	r7, fp, #200	; 0xc8
   24f78:	mov	r0, r7
   24f7c:	bl	12060 <mbsinit@plt>
   24f80:	cmp	r0, #0
   24f84:	beq	2539c <__assert_fail@plt+0x12da8>
   24f88:	mov	r3, #1
   24f8c:	strb	r3, [fp, #-204]	; 0xffffff34
   24f90:	b	24c6c <__assert_fail@plt+0x12678>
   24f94:	mov	r2, r7
   24f98:	mov	r1, r4
   24f9c:	mov	r0, r5
   24fa0:	bl	12024 <memcpy@plt>
   24fa4:	str	r5, [r5, #-16]
   24fa8:	b	24c34 <__assert_fail@plt+0x12640>
   24fac:	mov	r2, #1
   24fb0:	mov	r9, #0
   24fb4:	strb	r2, [fp, #-192]	; 0xffffff40
   24fb8:	str	r2, [fp, #-184]	; 0xffffff48
   24fbc:	strb	r6, [fp, #-180]	; 0xffffff4c
   24fc0:	b	24c1c <__assert_fail@plt+0x12628>
   24fc4:	ldr	r0, [fp, #-188]	; 0xffffff44
   24fc8:	mov	r9, #0
   24fcc:	bl	12300 <strlen@plt>
   24fd0:	mov	r2, #1
   24fd4:	strb	r2, [fp, #-192]	; 0xffffff40
   24fd8:	str	r0, [fp, #-184]	; 0xffffff48
   24fdc:	strb	r6, [fp, #-180]	; 0xffffff4c
   24fe0:	b	24c1c <__assert_fail@plt+0x12628>
   24fe4:	ldr	r3, [fp, #-188]	; 0xffffff44
   24fe8:	mov	r2, #1
   24fec:	str	r2, [fp, #-184]	; 0xffffff48
   24ff0:	ldrb	r3, [r3]
   24ff4:	cmp	r3, #0
   24ff8:	bne	253bc <__assert_fail@plt+0x12dc8>
   24ffc:	ldr	r4, [fp, #-176]	; 0xffffff50
   25000:	cmp	r4, #0
   25004:	beq	24cb0 <__assert_fail@plt+0x126bc>
   25008:	bl	24af0 <__assert_fail@plt+0x124fc>
   2500c:	sub	r4, fp, #88	; 0x58
   25010:	mov	r0, r4
   25014:	bl	12060 <mbsinit@plt>
   25018:	cmp	r0, #0
   2501c:	beq	2539c <__assert_fail@plt+0x12da8>
   25020:	strb	r6, [fp, #-92]	; 0xffffffa4
   25024:	bl	12198 <__ctype_get_mb_cur_max@plt>
   25028:	mov	r1, r0
   2502c:	mov	r0, r5
   25030:	bl	2d43c <__assert_fail@plt+0x1ae48>
   25034:	mov	r2, r0
   25038:	mov	r3, r4
   2503c:	mov	r1, r5
   25040:	sub	r0, fp, #64	; 0x40
   25044:	bl	31b90 <__assert_fail@plt+0x1f59c>
   25048:	cmn	r0, #1
   2504c:	str	r0, [fp, #-72]	; 0xffffffb8
   25050:	beq	2524c <__assert_fail@plt+0x12c58>
   25054:	cmn	r0, #2
   25058:	beq	252e4 <__assert_fail@plt+0x12cf0>
   2505c:	cmp	r0, #0
   25060:	beq	25300 <__assert_fail@plt+0x12d0c>
   25064:	ldr	r5, [fp, #-64]	; 0xffffffc0
   25068:	mov	r0, r4
   2506c:	strb	r6, [fp, #-68]	; 0xffffffbc
   25070:	bl	12060 <mbsinit@plt>
   25074:	cmp	r0, #0
   25078:	strb	r6, [fp, #-80]	; 0xffffffb0
   2507c:	movne	r3, #0
   25080:	strbne	r3, [fp, #-92]	; 0xffffffa4
   25084:	b	24edc <__assert_fail@plt+0x128e8>
   25088:	ldr	r5, [fp, #-76]	; 0xffffffb4
   2508c:	mov	r2, r4
   25090:	ldr	r0, [r3]
   25094:	mov	r1, r5
   25098:	bl	12084 <memcmp@plt>
   2509c:	cmp	r0, #0
   250a0:	beq	24f0c <__assert_fail@plt+0x12918>
   250a4:	cmp	r7, #0
   250a8:	beq	24e14 <__assert_fail@plt+0x12820>
   250ac:	ldr	r3, [fp, #-216]	; 0xffffff28
   250b0:	ldr	r5, [r3, r7, lsl #2]
   250b4:	sub	r3, r7, r5
   250b8:	cmp	r5, #0
   250bc:	str	r3, [fp, #-212]	; 0xffffff2c
   250c0:	beq	25244 <__assert_fail@plt+0x12c50>
   250c4:	ldrb	r3, [fp, #-136]	; 0xffffff78
   250c8:	cmp	r3, #0
   250cc:	beq	25340 <__assert_fail@plt+0x12d4c>
   250d0:	ldrb	r3, [fp, #-124]	; 0xffffff84
   250d4:	cmp	r3, #0
   250d8:	bne	25238 <__assert_fail@plt+0x12c44>
   250dc:	ldr	r4, [fp, #-132]	; 0xffffff7c
   250e0:	mov	r2, #0
   250e4:	subs	r5, r5, #1
   250e8:	ldr	r3, [fp, #-128]	; 0xffffff80
   250ec:	strb	r2, [fp, #-136]	; 0xffffff78
   250f0:	add	r4, r4, r3
   250f4:	str	r4, [fp, #-132]	; 0xffffff7c
   250f8:	beq	25240 <__assert_fail@plt+0x12c4c>
   250fc:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   25100:	cmp	r3, #0
   25104:	subne	r8, fp, #144	; 0x90
   25108:	bne	25164 <__assert_fail@plt+0x12b70>
   2510c:	ldrb	r3, [r4]
   25110:	lsr	r2, r3, #5
   25114:	and	r3, r3, #31
   25118:	ldr	r2, [r9, r2, lsl #2]
   2511c:	lsr	r3, r2, r3
   25120:	tst	r3, #1
   25124:	beq	2514c <__assert_fail@plt+0x12b58>
   25128:	str	r6, [fp, #-128]	; 0xffffff80
   2512c:	ldrb	r3, [r4]
   25130:	strb	r6, [fp, #-136]	; 0xffffff78
   25134:	strb	r6, [fp, #-124]	; 0xffffff84
   25138:	mov	r4, r3
   2513c:	str	r3, [fp, #-120]	; 0xffffff88
   25140:	cmp	r4, #0
   25144:	bne	250dc <__assert_fail@plt+0x12ae8>
   25148:	bl	125a0 <abort@plt>
   2514c:	sub	r8, fp, #144	; 0x90
   25150:	mov	r0, r8
   25154:	bl	12060 <mbsinit@plt>
   25158:	cmp	r0, #0
   2515c:	beq	2539c <__assert_fail@plt+0x12da8>
   25160:	strb	r6, [fp, #-148]	; 0xffffff6c
   25164:	bl	12198 <__ctype_get_mb_cur_max@plt>
   25168:	mov	r1, r0
   2516c:	mov	r0, r4
   25170:	bl	2d43c <__assert_fail@plt+0x1ae48>
   25174:	mov	r2, r0
   25178:	mov	r3, r8
   2517c:	mov	r1, r4
   25180:	sub	r0, fp, #120	; 0x78
   25184:	bl	31b90 <__assert_fail@plt+0x1f59c>
   25188:	cmn	r0, #1
   2518c:	str	r0, [fp, #-128]	; 0xffffff80
   25190:	beq	251c8 <__assert_fail@plt+0x12bd4>
   25194:	cmn	r0, #2
   25198:	beq	251dc <__assert_fail@plt+0x12be8>
   2519c:	cmp	r0, #0
   251a0:	beq	251f8 <__assert_fail@plt+0x12c04>
   251a4:	ldr	r4, [fp, #-120]	; 0xffffff88
   251a8:	mov	r0, r8
   251ac:	strb	r6, [fp, #-124]	; 0xffffff84
   251b0:	bl	12060 <mbsinit@plt>
   251b4:	cmp	r0, #0
   251b8:	strb	r6, [fp, #-136]	; 0xffffff78
   251bc:	movne	r3, #0
   251c0:	strbne	r3, [fp, #-148]	; 0xffffff6c
   251c4:	b	25140 <__assert_fail@plt+0x12b4c>
   251c8:	mov	r3, #0
   251cc:	str	r6, [fp, #-128]	; 0xffffff80
   251d0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   251d4:	strb	r3, [fp, #-124]	; 0xffffff84
   251d8:	b	250e0 <__assert_fail@plt+0x12aec>
   251dc:	ldr	r4, [fp, #-132]	; 0xffffff7c
   251e0:	mov	r0, r4
   251e4:	bl	12300 <strlen@plt>
   251e8:	mov	r3, #0
   251ec:	str	r0, [fp, #-128]	; 0xffffff80
   251f0:	strb	r3, [fp, #-124]	; 0xffffff84
   251f4:	b	250e0 <__assert_fail@plt+0x12aec>
   251f8:	ldr	r4, [fp, #-132]	; 0xffffff7c
   251fc:	str	r6, [fp, #-128]	; 0xffffff80
   25200:	ldrb	r3, [r4]
   25204:	cmp	r3, #0
   25208:	bne	253bc <__assert_fail@plt+0x12dc8>
   2520c:	ldr	r4, [fp, #-120]	; 0xffffff88
   25210:	cmp	r4, #0
   25214:	beq	251a8 <__assert_fail@plt+0x12bb4>
   25218:	movw	r3, #28480	; 0x6f40
   2521c:	movt	r3, #4
   25220:	movw	r1, #28500	; 0x6f54
   25224:	movt	r1, #4
   25228:	movw	r0, #28512	; 0x6f60
   2522c:	movt	r0, #4
   25230:	mov	r2, #172	; 0xac
   25234:	bl	125f4 <__assert_fail@plt>
   25238:	ldr	r4, [fp, #-120]	; 0xffffff88
   2523c:	b	25140 <__assert_fail@plt+0x12b4c>
   25240:	ldr	r7, [fp, #-212]	; 0xffffff2c
   25244:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   25248:	b	24ddc <__assert_fail@plt+0x127e8>
   2524c:	mov	r3, #0
   25250:	strb	r6, [fp, #-80]	; 0xffffffb0
   25254:	str	r6, [fp, #-72]	; 0xffffffb8
   25258:	strb	r3, [fp, #-68]	; 0xffffffbc
   2525c:	b	24df4 <__assert_fail@plt+0x12800>
   25260:	sub	r8, fp, #144	; 0x90
   25264:	mov	r0, r8
   25268:	bl	12060 <mbsinit@plt>
   2526c:	cmp	r0, #0
   25270:	beq	2539c <__assert_fail@plt+0x12da8>
   25274:	strb	r6, [fp, #-148]	; 0xffffff6c
   25278:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2527c:	mov	r1, r0
   25280:	mov	r0, r4
   25284:	bl	2d43c <__assert_fail@plt+0x1ae48>
   25288:	mov	r2, r0
   2528c:	mov	r3, r8
   25290:	mov	r1, r4
   25294:	sub	r0, fp, #120	; 0x78
   25298:	bl	31b90 <__assert_fail@plt+0x1f59c>
   2529c:	cmn	r0, #1
   252a0:	str	r0, [fp, #-128]	; 0xffffff80
   252a4:	beq	25348 <__assert_fail@plt+0x12d54>
   252a8:	cmn	r0, #2
   252ac:	beq	2535c <__assert_fail@plt+0x12d68>
   252b0:	cmp	r0, #0
   252b4:	beq	25378 <__assert_fail@plt+0x12d84>
   252b8:	ldr	r4, [fp, #-120]	; 0xffffff88
   252bc:	mov	r0, r8
   252c0:	strb	r6, [fp, #-124]	; 0xffffff84
   252c4:	bl	12060 <mbsinit@plt>
   252c8:	cmp	r0, #0
   252cc:	strb	r6, [fp, #-136]	; 0xffffff78
   252d0:	movne	r3, #0
   252d4:	strbne	r3, [fp, #-148]	; 0xffffff6c
   252d8:	b	24e64 <__assert_fail@plt+0x12870>
   252dc:	str	r7, [r9, r7, lsl #2]
   252e0:	b	24d78 <__assert_fail@plt+0x12784>
   252e4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   252e8:	bl	12300 <strlen@plt>
   252ec:	mov	r3, #0
   252f0:	strb	r6, [fp, #-80]	; 0xffffffb0
   252f4:	str	r0, [fp, #-72]	; 0xffffffb8
   252f8:	strb	r3, [fp, #-68]	; 0xffffffbc
   252fc:	b	24df4 <__assert_fail@plt+0x12800>
   25300:	ldr	r5, [fp, #-76]	; 0xffffffb4
   25304:	str	r6, [fp, #-72]	; 0xffffffb8
   25308:	ldrb	r3, [r5]
   2530c:	cmp	r3, #0
   25310:	bne	253bc <__assert_fail@plt+0x12dc8>
   25314:	ldr	r5, [fp, #-64]	; 0xffffffc0
   25318:	cmp	r5, #0
   2531c:	beq	25068 <__assert_fail@plt+0x12a74>
   25320:	b	25008 <__assert_fail@plt+0x12a14>
   25324:	ldrb	r3, [fp, #-124]	; 0xffffff84
   25328:	cmp	r3, #0
   2532c:	beq	24e6c <__assert_fail@plt+0x12878>
   25330:	ldr	r4, [fp, #-120]	; 0xffffff88
   25334:	b	24e64 <__assert_fail@plt+0x12870>
   25338:	ldr	r5, [fp, #-64]	; 0xffffffc0
   2533c:	b	24edc <__assert_fail@plt+0x128e8>
   25340:	ldr	r4, [fp, #-132]	; 0xffffff7c
   25344:	b	250fc <__assert_fail@plt+0x12b08>
   25348:	mov	r3, #0
   2534c:	str	r6, [fp, #-128]	; 0xffffff80
   25350:	ldr	r4, [fp, #-132]	; 0xffffff7c
   25354:	strb	r3, [fp, #-124]	; 0xffffff84
   25358:	b	24e70 <__assert_fail@plt+0x1287c>
   2535c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   25360:	mov	r0, r4
   25364:	bl	12300 <strlen@plt>
   25368:	mov	r3, #0
   2536c:	str	r0, [fp, #-128]	; 0xffffff80
   25370:	strb	r3, [fp, #-124]	; 0xffffff84
   25374:	b	24e70 <__assert_fail@plt+0x1287c>
   25378:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2537c:	str	r6, [fp, #-128]	; 0xffffff80
   25380:	ldrb	r3, [r4]
   25384:	cmp	r3, #0
   25388:	bne	253bc <__assert_fail@plt+0x12dc8>
   2538c:	ldr	r4, [fp, #-120]	; 0xffffff88
   25390:	cmp	r4, #0
   25394:	beq	252bc <__assert_fail@plt+0x12cc8>
   25398:	b	25008 <__assert_fail@plt+0x12a14>
   2539c:	movw	r3, #28480	; 0x6f40
   253a0:	movt	r3, #4
   253a4:	movw	r1, #28500	; 0x6f54
   253a8:	movt	r1, #4
   253ac:	movw	r0, #28532	; 0x6f74
   253b0:	movt	r0, #4
   253b4:	mov	r2, #143	; 0x8f
   253b8:	bl	125f4 <__assert_fail@plt>
   253bc:	movw	r3, #28480	; 0x6f40
   253c0:	movt	r3, #4
   253c4:	movw	r1, #28500	; 0x6f54
   253c8:	movt	r1, #4
   253cc:	movw	r0, #28556	; 0x6f8c
   253d0:	movt	r0, #4
   253d4:	mov	r2, #171	; 0xab
   253d8:	bl	125f4 <__assert_fail@plt>
   253dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   253e0:	strd	r6, [sp, #8]
   253e4:	strd	r8, [sp, #16]
   253e8:	mov	r8, r1
   253ec:	strd	sl, [sp, #24]
   253f0:	str	lr, [sp, #32]
   253f4:	sub	sp, sp, #332	; 0x14c
   253f8:	str	r0, [sp, #8]
   253fc:	bl	12198 <__ctype_get_mb_cur_max@plt>
   25400:	cmp	r0, #1
   25404:	bhi	25614 <__assert_fail@plt+0x13020>
   25408:	ldrb	r7, [r8]
   2540c:	cmp	r7, #0
   25410:	beq	25590 <__assert_fail@plt+0x12f9c>
   25414:	ldr	r3, [sp, #8]
   25418:	ldrb	sl, [r3]
   2541c:	add	r3, r8, #1
   25420:	str	r3, [sp, #12]
   25424:	cmp	sl, #0
   25428:	beq	2560c <__assert_fail@plt+0x13018>
   2542c:	ldr	r3, [sp, #8]
   25430:	mov	r5, #0
   25434:	mov	fp, r8
   25438:	mov	ip, r5
   2543c:	mov	lr, #1
   25440:	str	r5, [sp, #4]
   25444:	mov	r6, r3
   25448:	mov	r9, r3
   2544c:	b	254b0 <__assert_fail@plt+0x12ebc>
   25450:	cmp	fp, #0
   25454:	str	r3, [sp, #8]
   25458:	beq	25480 <__assert_fail@plt+0x12e8c>
   2545c:	ldr	r3, [sp, #4]
   25460:	mov	r0, fp
   25464:	sub	r1, r4, r3
   25468:	bl	12408 <strnlen@plt>
   2546c:	ldrb	r2, [fp, r0]!
   25470:	ldr	r3, [sp, #8]
   25474:	cmp	r2, #0
   25478:	bne	25dc4 <__assert_fail@plt+0x137d0>
   2547c:	str	r4, [sp, #4]
   25480:	mov	r0, r8
   25484:	bl	12300 <strlen@plt>
   25488:	mov	r2, r0
   2548c:	add	r3, sp, #272	; 0x110
   25490:	mov	r1, r8
   25494:	mov	r0, r6
   25498:	bl	24970 <__assert_fail@plt+0x1237c>
   2549c:	subs	lr, r0, #0
   254a0:	bne	26030 <__assert_fail@plt+0x13a3c>
   254a4:	ldrb	sl, [r9, r5]
   254a8:	mov	fp, lr
   254ac:	mov	ip, r4
   254b0:	add	r5, r5, #1
   254b4:	mov	r0, r6
   254b8:	cmp	r7, sl
   254bc:	add	r6, r5, r9
   254c0:	mov	r1, r6
   254c4:	add	r4, ip, #1
   254c8:	beq	255b0 <__assert_fail@plt+0x12fbc>
   254cc:	ldrb	sl, [r9, r5]
   254d0:	cmp	sl, #0
   254d4:	beq	2560c <__assert_fail@plt+0x13018>
   254d8:	cmp	r5, #9
   254dc:	movls	r3, #0
   254e0:	andhi	r3, lr, #1
   254e4:	cmp	r3, #0
   254e8:	beq	254ac <__assert_fail@plt+0x12eb8>
   254ec:	add	r2, r5, r5, lsl #2
   254f0:	cmp	r4, r2
   254f4:	bcs	25450 <__assert_fail@plt+0x12e5c>
   254f8:	mov	lr, r3
   254fc:	b	254ac <__assert_fail@plt+0x12eb8>
   25500:	add	r0, sp, #52	; 0x34
   25504:	bl	12060 <mbsinit@plt>
   25508:	cmp	r0, #0
   2550c:	beq	2608c <__assert_fail@plt+0x13a98>
   25510:	mov	r5, #1
   25514:	strb	r5, [sp, #48]	; 0x30
   25518:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2551c:	mov	r1, r0
   25520:	mov	r0, r8
   25524:	bl	2d43c <__assert_fail@plt+0x1ae48>
   25528:	mov	r2, r0
   2552c:	add	r3, sp, #52	; 0x34
   25530:	mov	r1, r8
   25534:	add	r0, sp, #76	; 0x4c
   25538:	bl	31b90 <__assert_fail@plt+0x1f59c>
   2553c:	cmn	r0, #1
   25540:	str	r0, [sp, #68]	; 0x44
   25544:	strbeq	r5, [sp, #60]	; 0x3c
   25548:	streq	r5, [sp, #68]	; 0x44
   2554c:	strbeq	r4, [sp, #72]	; 0x48
   25550:	beq	25684 <__assert_fail@plt+0x13090>
   25554:	cmn	r0, #2
   25558:	beq	25670 <__assert_fail@plt+0x1307c>
   2555c:	cmp	r0, #0
   25560:	beq	25ff0 <__assert_fail@plt+0x139fc>
   25564:	ldr	r4, [sp, #76]	; 0x4c
   25568:	mov	r5, #1
   2556c:	add	r0, sp, #52	; 0x34
   25570:	strb	r5, [sp, #72]	; 0x48
   25574:	bl	12060 <mbsinit@plt>
   25578:	cmp	r0, #0
   2557c:	strb	r5, [sp, #60]	; 0x3c
   25580:	movne	r3, #0
   25584:	strbne	r3, [sp, #48]	; 0x30
   25588:	cmp	r4, #0
   2558c:	bne	25684 <__assert_fail@plt+0x13090>
   25590:	ldr	r0, [sp, #8]
   25594:	add	sp, sp, #332	; 0x14c
   25598:	ldrd	r4, [sp]
   2559c:	ldrd	r6, [sp, #8]
   255a0:	ldrd	r8, [sp, #16]
   255a4:	ldrd	sl, [sp, #24]
   255a8:	add	sp, sp, #32
   255ac:	pop	{pc}		; (ldr pc, [sp], #4)
   255b0:	ldrb	r3, [r8, #1]
   255b4:	cmp	r3, #0
   255b8:	beq	25594 <__assert_fail@plt+0x12fa0>
   255bc:	ldrb	sl, [r9, r5]
   255c0:	cmp	sl, #0
   255c4:	beq	2560c <__assert_fail@plt+0x13018>
   255c8:	cmp	r3, sl
   255cc:	add	r4, ip, #2
   255d0:	bne	254d8 <__assert_fail@plt+0x12ee4>
   255d4:	ldr	r3, [sp, #12]
   255d8:	add	r3, r3, #1
   255dc:	b	255f4 <__assert_fail@plt+0x13000>
   255e0:	add	r3, r3, #1
   255e4:	cmp	r2, r4
   255e8:	sub	r4, r3, r8
   255ec:	add	r4, r4, ip
   255f0:	bne	254d8 <__assert_fail@plt+0x12ee4>
   255f4:	ldrb	r2, [r3]
   255f8:	cmp	r2, #0
   255fc:	beq	25594 <__assert_fail@plt+0x12fa0>
   25600:	ldrb	r4, [r1, #1]!
   25604:	cmp	r4, #0
   25608:	bne	255e0 <__assert_fail@plt+0x12fec>
   2560c:	mov	r0, #0
   25610:	b	25594 <__assert_fail@plt+0x12fa0>
   25614:	ldrb	r2, [r8]
   25618:	mov	r3, #0
   2561c:	movw	r7, #34644	; 0x8754
   25620:	movt	r7, #4
   25624:	mov	r4, #0
   25628:	strb	r3, [sp, #48]	; 0x30
   2562c:	mov	r5, #0
   25630:	strb	r3, [sp, #60]	; 0x3c
   25634:	lsr	r3, r2, #5
   25638:	and	r1, r2, #31
   2563c:	strd	r4, [sp, #52]	; 0x34
   25640:	str	r8, [sp, #64]	; 0x40
   25644:	ldr	r3, [r7, r3, lsl #2]
   25648:	lsr	r3, r3, r1
   2564c:	ands	r4, r3, #1
   25650:	beq	25500 <__assert_fail@plt+0x12f0c>
   25654:	mov	r3, #1
   25658:	mov	r4, r2
   2565c:	strb	r3, [sp, #60]	; 0x3c
   25660:	str	r3, [sp, #68]	; 0x44
   25664:	strb	r3, [sp, #72]	; 0x48
   25668:	str	r2, [sp, #76]	; 0x4c
   2566c:	b	25588 <__assert_fail@plt+0x12f94>
   25670:	ldr	r0, [sp, #64]	; 0x40
   25674:	bl	12300 <strlen@plt>
   25678:	strb	r5, [sp, #60]	; 0x3c
   2567c:	str	r0, [sp, #68]	; 0x44
   25680:	strb	r4, [sp, #72]	; 0x48
   25684:	mov	r3, #0
   25688:	ldr	r5, [sp, #8]
   2568c:	mov	r0, #1
   25690:	mov	sl, r3
   25694:	mov	r6, r3
   25698:	mov	r4, r0
   2569c:	mov	fp, r0
   256a0:	str	r0, [sp, #4]
   256a4:	str	r3, [sp, #32]
   256a8:	str	r3, [sp, #36]	; 0x24
   256ac:	str	r3, [sp, #40]	; 0x28
   256b0:	strb	r3, [sp, #104]	; 0x68
   256b4:	str	r3, [sp, #108]	; 0x6c
   256b8:	str	r3, [sp, #112]	; 0x70
   256bc:	strb	r3, [sp, #116]	; 0x74
   256c0:	strb	r3, [sp, #160]	; 0xa0
   256c4:	str	r3, [sp, #164]	; 0xa4
   256c8:	str	r3, [sp, #168]	; 0xa8
   256cc:	strb	r3, [sp, #172]	; 0xac
   256d0:	ldrb	r3, [sp, #160]	; 0xa0
   256d4:	str	r8, [sp, #12]
   256d8:	str	r8, [sp, #120]	; 0x78
   256dc:	str	r5, [sp, #176]	; 0xb0
   256e0:	cmp	r3, #0
   256e4:	addne	r8, sp, #164	; 0xa4
   256e8:	bne	25a20 <__assert_fail@plt+0x1342c>
   256ec:	ldrb	r3, [r5]
   256f0:	lsr	r2, r3, #5
   256f4:	and	r3, r3, #31
   256f8:	ldr	r2, [r7, r2, lsl #2]
   256fc:	lsr	r3, r2, r3
   25700:	tst	r3, #1
   25704:	beq	25be0 <__assert_fail@plt+0x135ec>
   25708:	str	fp, [sp, #180]	; 0xb4
   2570c:	ldrb	r5, [r5]
   25710:	strb	r4, [sp, #172]	; 0xac
   25714:	strb	r4, [sp, #184]	; 0xb8
   25718:	str	r5, [sp, #188]	; 0xbc
   2571c:	cmp	r5, #0
   25720:	beq	2560c <__assert_fail@plt+0x13018>
   25724:	ldr	r3, [sp, #4]
   25728:	cmp	sl, #9
   2572c:	movls	r3, #0
   25730:	andhi	r3, r3, #1
   25734:	cmp	r3, #0
   25738:	addeq	r6, r6, #1
   2573c:	beq	25754 <__assert_fail@plt+0x13160>
   25740:	add	r2, sl, sl, lsl #2
   25744:	cmp	r6, r2
   25748:	addcc	r6, r6, #1
   2574c:	strcc	r3, [sp, #4]
   25750:	bcs	25c38 <__assert_fail@plt+0x13644>
   25754:	ldrb	r3, [sp, #72]	; 0x48
   25758:	cmp	r3, #0
   2575c:	beq	25b50 <__assert_fail@plt+0x1355c>
   25760:	ldr	r3, [sp, #76]	; 0x4c
   25764:	ldr	r2, [sp, #188]	; 0xbc
   25768:	cmp	r2, r3
   2576c:	bne	259f4 <__assert_fail@plt+0x13400>
   25770:	ldr	ip, [sp, #12]
   25774:	ldr	r3, [sp, #32]
   25778:	ldr	r1, [sp, #176]	; 0xb0
   2577c:	ldrb	r0, [ip]
   25780:	str	r3, [sp, #276]	; 0x114
   25784:	ldr	r3, [sp, #36]	; 0x24
   25788:	str	ip, [sp, #288]	; 0x120
   2578c:	ldr	r2, [sp, #180]	; 0xb4
   25790:	and	lr, r0, #31
   25794:	str	r3, [sp, #280]	; 0x118
   25798:	lsr	r3, r0, #5
   2579c:	str	r2, [sp, #236]	; 0xec
   257a0:	ldr	r8, [r7, r3, lsl #2]
   257a4:	ldrd	r2, [sp, #168]	; 0xa8
   257a8:	ldr	ip, [sp, #236]	; 0xec
   257ac:	lsr	r8, r8, lr
   257b0:	strd	r2, [sp, #224]	; 0xe0
   257b4:	ands	lr, r8, #1
   257b8:	ldrd	r2, [sp, #184]	; 0xb8
   257bc:	add	ip, ip, r1
   257c0:	mov	r1, #0
   257c4:	str	lr, [sp, #44]	; 0x2c
   257c8:	strb	r1, [sp, #228]	; 0xe4
   257cc:	str	ip, [sp, #232]	; 0xe8
   257d0:	mov	r8, r2
   257d4:	mov	r9, r3
   257d8:	ldrd	r2, [sp, #160]	; 0xa0
   257dc:	strd	r2, [sp, #216]	; 0xd8
   257e0:	mov	r2, r8
   257e4:	mov	r3, r9
   257e8:	ldrd	r8, [sp, #200]	; 0xc8
   257ec:	strb	r1, [sp, #272]	; 0x110
   257f0:	strb	r1, [sp, #284]	; 0x11c
   257f4:	strd	r8, [sp, #16]
   257f8:	ldrd	r8, [sp, #208]	; 0xd0
   257fc:	strd	r2, [sp, #240]	; 0xf0
   25800:	ldrd	r2, [sp, #192]	; 0xc0
   25804:	strd	r8, [sp, #24]
   25808:	ldrd	r8, [sp, #16]
   2580c:	strd	r2, [sp, #248]	; 0xf8
   25810:	add	r3, sp, #256	; 0x100
   25814:	strd	r8, [r3]
   25818:	add	r3, sp, #264	; 0x108
   2581c:	ldrd	r8, [sp, #24]
   25820:	strd	r8, [r3]
   25824:	beq	25e98 <__assert_fail@plt+0x138a4>
   25828:	mov	r5, r0
   2582c:	strb	r4, [sp, #284]	; 0x11c
   25830:	cmp	r5, #0
   25834:	str	fp, [sp, #292]	; 0x124
   25838:	strb	r4, [sp, #296]	; 0x128
   2583c:	str	r0, [sp, #300]	; 0x12c
   25840:	beq	25f18 <__assert_fail@plt+0x13924>
   25844:	ldr	r5, [sp, #288]	; 0x120
   25848:	mov	r3, #0
   2584c:	add	r6, r6, #1
   25850:	ldr	r2, [sp, #292]	; 0x124
   25854:	mov	r9, r3
   25858:	strb	r3, [sp, #284]	; 0x11c
   2585c:	add	r5, r5, r2
   25860:	str	r5, [sp, #288]	; 0x120
   25864:	b	2594c <__assert_fail@plt+0x13358>
   25868:	ldrb	r3, [r5]
   2586c:	lsr	r2, r3, #5
   25870:	and	r3, r3, #31
   25874:	ldr	r2, [r7, r2, lsl #2]
   25878:	lsr	r3, r2, r3
   2587c:	tst	r3, #1
   25880:	beq	25b34 <__assert_fail@plt+0x13540>
   25884:	str	fp, [sp, #292]	; 0x124
   25888:	ldrb	r5, [r5]
   2588c:	strb	r4, [sp, #284]	; 0x11c
   25890:	strb	r4, [sp, #296]	; 0x128
   25894:	cmp	r5, #0
   25898:	str	r5, [sp, #300]	; 0x12c
   2589c:	beq	259c8 <__assert_fail@plt+0x133d4>
   258a0:	ldrb	r3, [sp, #228]	; 0xe4
   258a4:	cmp	r3, #0
   258a8:	bne	25b08 <__assert_fail@plt+0x13514>
   258ac:	ldrb	r3, [sp, #216]	; 0xd8
   258b0:	ldr	r5, [sp, #232]	; 0xe8
   258b4:	cmp	r3, #0
   258b8:	addne	r8, sp, #220	; 0xdc
   258bc:	bne	25a9c <__assert_fail@plt+0x134a8>
   258c0:	ldrb	r3, [r5]
   258c4:	lsr	r2, r3, #5
   258c8:	and	r3, r3, #31
   258cc:	ldr	r2, [r7, r2, lsl #2]
   258d0:	lsr	r3, r2, r3
   258d4:	tst	r3, #1
   258d8:	beq	25a84 <__assert_fail@plt+0x13490>
   258dc:	str	fp, [sp, #236]	; 0xec
   258e0:	ldrb	r0, [r5]
   258e4:	strb	r4, [sp, #228]	; 0xe4
   258e8:	strb	r4, [sp, #240]	; 0xf0
   258ec:	mov	r5, r0
   258f0:	str	r0, [sp, #244]	; 0xf4
   258f4:	cmp	r5, #0
   258f8:	beq	2560c <__assert_fail@plt+0x13018>
   258fc:	ldrb	r3, [sp, #296]	; 0x128
   25900:	cmp	r3, #0
   25904:	beq	259e4 <__assert_fail@plt+0x133f0>
   25908:	ldr	r0, [sp, #300]	; 0x12c
   2590c:	subs	r0, r0, r5
   25910:	movne	r0, #1
   25914:	cmp	r0, #0
   25918:	add	r2, r6, #1
   2591c:	bne	259f4 <__assert_fail@plt+0x13400>
   25920:	mov	r6, r2
   25924:	ldr	r3, [sp, #232]	; 0xe8
   25928:	strb	r0, [sp, #228]	; 0xe4
   2592c:	ldr	r1, [sp, #236]	; 0xec
   25930:	strb	r0, [sp, #284]	; 0x11c
   25934:	ldr	r5, [sp, #288]	; 0x120
   25938:	ldr	r2, [sp, #292]	; 0x124
   2593c:	add	r3, r3, r1
   25940:	str	r3, [sp, #232]	; 0xe8
   25944:	add	r5, r5, r2
   25948:	str	r5, [sp, #288]	; 0x120
   2594c:	ldrb	r3, [sp, #272]	; 0x110
   25950:	cmp	r3, #0
   25954:	beq	25868 <__assert_fail@plt+0x13274>
   25958:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2595c:	mov	r1, r0
   25960:	mov	r0, r5
   25964:	bl	2d43c <__assert_fail@plt+0x1ae48>
   25968:	mov	r2, r0
   2596c:	add	r3, sp, #276	; 0x114
   25970:	mov	r1, r5
   25974:	add	r0, sp, #300	; 0x12c
   25978:	bl	31b90 <__assert_fail@plt+0x1f59c>
   2597c:	cmn	r0, #1
   25980:	str	r0, [sp, #292]	; 0x124
   25984:	strbeq	r4, [sp, #284]	; 0x11c
   25988:	streq	fp, [sp, #292]	; 0x124
   2598c:	strbeq	r9, [sp, #296]	; 0x128
   25990:	beq	258a0 <__assert_fail@plt+0x132ac>
   25994:	cmn	r0, #2
   25998:	beq	25b80 <__assert_fail@plt+0x1358c>
   2599c:	cmp	r0, #0
   259a0:	beq	25b98 <__assert_fail@plt+0x135a4>
   259a4:	ldr	r5, [sp, #300]	; 0x12c
   259a8:	add	r0, sp, #276	; 0x114
   259ac:	strb	r4, [sp, #296]	; 0x128
   259b0:	bl	12060 <mbsinit@plt>
   259b4:	cmp	r0, #0
   259b8:	strb	r4, [sp, #284]	; 0x11c
   259bc:	strbne	r9, [sp, #272]	; 0x110
   259c0:	cmp	r5, #0
   259c4:	bne	258a0 <__assert_fail@plt+0x132ac>
   259c8:	ldr	r0, [sp, #176]	; 0xb0
   259cc:	b	25594 <__assert_fail@plt+0x12fa0>
   259d0:	ldr	r0, [sp, #232]	; 0xe8
   259d4:	bl	12300 <strlen@plt>
   259d8:	strb	r4, [sp, #228]	; 0xe4
   259dc:	str	r0, [sp, #236]	; 0xec
   259e0:	strb	r9, [sp, #240]	; 0xf0
   259e4:	ldr	r2, [sp, #236]	; 0xec
   259e8:	ldr	r3, [sp, #292]	; 0x124
   259ec:	cmp	r2, r3
   259f0:	beq	25b1c <__assert_fail@plt+0x13528>
   259f4:	ldr	r5, [sp, #176]	; 0xb0
   259f8:	ldr	r8, [sp, #180]	; 0xb4
   259fc:	mov	r3, #0
   25a00:	add	r5, r5, r8
   25a04:	add	sl, sl, #1
   25a08:	strb	r3, [sp, #172]	; 0xac
   25a0c:	ldrb	r3, [sp, #160]	; 0xa0
   25a10:	str	r5, [sp, #176]	; 0xb0
   25a14:	cmp	r3, #0
   25a18:	addne	r8, sp, #164	; 0xa4
   25a1c:	beq	256ec <__assert_fail@plt+0x130f8>
   25a20:	bl	12198 <__ctype_get_mb_cur_max@plt>
   25a24:	mov	r1, r0
   25a28:	mov	r0, r5
   25a2c:	bl	2d43c <__assert_fail@plt+0x1ae48>
   25a30:	mov	r2, r0
   25a34:	mov	r3, r8
   25a38:	mov	r1, r5
   25a3c:	add	r0, sp, #188	; 0xbc
   25a40:	bl	31b90 <__assert_fail@plt+0x1f59c>
   25a44:	cmn	r0, #1
   25a48:	str	r0, [sp, #180]	; 0xb4
   25a4c:	beq	25bfc <__assert_fail@plt+0x13608>
   25a50:	cmn	r0, #2
   25a54:	beq	25e04 <__assert_fail@plt+0x13810>
   25a58:	cmp	r0, #0
   25a5c:	bne	25dd8 <__assert_fail@plt+0x137e4>
   25a60:	ldr	r5, [sp, #176]	; 0xb0
   25a64:	str	fp, [sp, #180]	; 0xb4
   25a68:	ldrb	r3, [r5]
   25a6c:	cmp	r3, #0
   25a70:	bne	260ac <__assert_fail@plt+0x13ab8>
   25a74:	ldr	r5, [sp, #188]	; 0xbc
   25a78:	cmp	r5, #0
   25a7c:	beq	25ddc <__assert_fail@plt+0x137e8>
   25a80:	b	26010 <__assert_fail@plt+0x13a1c>
   25a84:	add	r8, sp, #220	; 0xdc
   25a88:	mov	r0, r8
   25a8c:	bl	12060 <mbsinit@plt>
   25a90:	cmp	r0, #0
   25a94:	beq	2608c <__assert_fail@plt+0x13a98>
   25a98:	strb	r4, [sp, #216]	; 0xd8
   25a9c:	bl	12198 <__ctype_get_mb_cur_max@plt>
   25aa0:	mov	r1, r0
   25aa4:	mov	r0, r5
   25aa8:	bl	2d43c <__assert_fail@plt+0x1ae48>
   25aac:	mov	r2, r0
   25ab0:	mov	r3, r8
   25ab4:	mov	r1, r5
   25ab8:	add	r0, sp, #244	; 0xf4
   25abc:	bl	31b90 <__assert_fail@plt+0x1f59c>
   25ac0:	cmn	r0, #1
   25ac4:	str	r0, [sp, #236]	; 0xec
   25ac8:	strbeq	r4, [sp, #228]	; 0xe4
   25acc:	streq	fp, [sp, #236]	; 0xec
   25ad0:	strbeq	r9, [sp, #240]	; 0xf0
   25ad4:	beq	259e4 <__assert_fail@plt+0x133f0>
   25ad8:	cmn	r0, #2
   25adc:	beq	259d0 <__assert_fail@plt+0x133dc>
   25ae0:	cmp	r0, #0
   25ae4:	beq	25bbc <__assert_fail@plt+0x135c8>
   25ae8:	ldr	r5, [sp, #244]	; 0xf4
   25aec:	mov	r0, r8
   25af0:	strb	r4, [sp, #240]	; 0xf0
   25af4:	bl	12060 <mbsinit@plt>
   25af8:	cmp	r0, #0
   25afc:	strb	r4, [sp, #228]	; 0xe4
   25b00:	strbne	r9, [sp, #216]	; 0xd8
   25b04:	b	258f4 <__assert_fail@plt+0x13300>
   25b08:	ldrb	r3, [sp, #240]	; 0xf0
   25b0c:	cmp	r3, #0
   25b10:	beq	259e4 <__assert_fail@plt+0x133f0>
   25b14:	ldr	r5, [sp, #244]	; 0xf4
   25b18:	b	258f4 <__assert_fail@plt+0x13300>
   25b1c:	ldr	r0, [sp, #232]	; 0xe8
   25b20:	ldr	r1, [sp, #288]	; 0x120
   25b24:	bl	12084 <memcmp@plt>
   25b28:	adds	r0, r0, #0
   25b2c:	movne	r0, #1
   25b30:	b	25914 <__assert_fail@plt+0x13320>
   25b34:	add	r0, sp, #276	; 0x114
   25b38:	bl	12060 <mbsinit@plt>
   25b3c:	cmp	r0, #0
   25b40:	beq	2608c <__assert_fail@plt+0x13a98>
   25b44:	strb	r4, [sp, #272]	; 0x110
   25b48:	b	25958 <__assert_fail@plt+0x13364>
   25b4c:	add	r6, r6, #1
   25b50:	ldr	r3, [sp, #68]	; 0x44
   25b54:	ldr	r5, [sp, #176]	; 0xb0
   25b58:	ldr	r8, [sp, #180]	; 0xb4
   25b5c:	cmp	r8, r3
   25b60:	bne	259fc <__assert_fail@plt+0x13408>
   25b64:	mov	r2, r8
   25b68:	mov	r0, r5
   25b6c:	ldr	r1, [sp, #64]	; 0x40
   25b70:	bl	12084 <memcmp@plt>
   25b74:	cmp	r0, #0
   25b78:	bne	259fc <__assert_fail@plt+0x13408>
   25b7c:	b	25770 <__assert_fail@plt+0x1317c>
   25b80:	ldr	r0, [sp, #288]	; 0x120
   25b84:	bl	12300 <strlen@plt>
   25b88:	strb	r4, [sp, #284]	; 0x11c
   25b8c:	str	r0, [sp, #292]	; 0x124
   25b90:	strb	r9, [sp, #296]	; 0x128
   25b94:	b	258a0 <__assert_fail@plt+0x132ac>
   25b98:	ldr	r3, [sp, #288]	; 0x120
   25b9c:	str	fp, [sp, #292]	; 0x124
   25ba0:	ldrb	r3, [r3]
   25ba4:	cmp	r3, #0
   25ba8:	bne	260ac <__assert_fail@plt+0x13ab8>
   25bac:	ldr	r5, [sp, #300]	; 0x12c
   25bb0:	cmp	r5, #0
   25bb4:	beq	259a8 <__assert_fail@plt+0x133b4>
   25bb8:	b	26010 <__assert_fail@plt+0x13a1c>
   25bbc:	ldr	r3, [sp, #232]	; 0xe8
   25bc0:	str	fp, [sp, #236]	; 0xec
   25bc4:	ldrb	r3, [r3]
   25bc8:	cmp	r3, #0
   25bcc:	bne	260ac <__assert_fail@plt+0x13ab8>
   25bd0:	ldr	r5, [sp, #244]	; 0xf4
   25bd4:	cmp	r5, #0
   25bd8:	beq	25aec <__assert_fail@plt+0x134f8>
   25bdc:	b	26010 <__assert_fail@plt+0x13a1c>
   25be0:	add	r8, sp, #164	; 0xa4
   25be4:	mov	r0, r8
   25be8:	bl	12060 <mbsinit@plt>
   25bec:	cmp	r0, #0
   25bf0:	beq	2608c <__assert_fail@plt+0x13a98>
   25bf4:	strb	r4, [sp, #160]	; 0xa0
   25bf8:	b	25a20 <__assert_fail@plt+0x1342c>
   25bfc:	mov	r3, #0
   25c00:	strb	r4, [sp, #172]	; 0xac
   25c04:	str	fp, [sp, #180]	; 0xb4
   25c08:	strb	r3, [sp, #184]	; 0xb8
   25c0c:	ldr	r3, [sp, #4]
   25c10:	cmp	sl, #9
   25c14:	movls	r3, #0
   25c18:	andhi	r3, r3, #1
   25c1c:	cmp	r3, #0
   25c20:	beq	25b4c <__assert_fail@plt+0x13558>
   25c24:	add	r2, sl, sl, lsl #2
   25c28:	cmp	r6, r2
   25c2c:	addcc	r6, r6, #1
   25c30:	strcc	r3, [sp, #4]
   25c34:	bcc	25b50 <__assert_fail@plt+0x1355c>
   25c38:	ldr	r3, [sp, #40]	; 0x28
   25c3c:	subs	r8, r6, r3
   25c40:	ldrb	r3, [sp, #116]	; 0x74
   25c44:	beq	26070 <__assert_fail@plt+0x13a7c>
   25c48:	cmp	r3, #0
   25c4c:	beq	25dfc <__assert_fail@plt+0x13808>
   25c50:	ldrb	r3, [sp, #128]	; 0x80
   25c54:	cmp	r3, #0
   25c58:	bne	25dd0 <__assert_fail@plt+0x137dc>
   25c5c:	ldr	r5, [sp, #120]	; 0x78
   25c60:	mov	r2, #0
   25c64:	subs	r8, r8, #1
   25c68:	ldr	r3, [sp, #124]	; 0x7c
   25c6c:	strb	r2, [sp, #116]	; 0x74
   25c70:	add	r5, r5, r3
   25c74:	str	r5, [sp, #4]
   25c78:	str	r5, [sp, #120]	; 0x78
   25c7c:	beq	25e28 <__assert_fail@plt+0x13834>
   25c80:	ldrb	r3, [sp, #104]	; 0x68
   25c84:	cmp	r3, #0
   25c88:	addne	r9, sp, #108	; 0x6c
   25c8c:	bne	25d0c <__assert_fail@plt+0x13718>
   25c90:	ldrb	r3, [r5]
   25c94:	lsr	r2, r3, #5
   25c98:	and	r3, r3, #31
   25c9c:	ldr	r2, [r7, r2, lsl #2]
   25ca0:	lsr	r3, r2, r3
   25ca4:	tst	r3, #1
   25ca8:	beq	25cf4 <__assert_fail@plt+0x13700>
   25cac:	str	fp, [sp, #124]	; 0x7c
   25cb0:	ldrb	r5, [r5]
   25cb4:	strb	r4, [sp, #116]	; 0x74
   25cb8:	strb	r4, [sp, #128]	; 0x80
   25cbc:	str	r5, [sp, #132]	; 0x84
   25cc0:	cmp	r5, #0
   25cc4:	bne	25c5c <__assert_fail@plt+0x13668>
   25cc8:	ldrb	r3, [sp, #116]	; 0x74
   25ccc:	cmp	r3, #0
   25cd0:	beq	25e20 <__assert_fail@plt+0x1382c>
   25cd4:	add	r2, sp, #272	; 0x110
   25cd8:	ldrd	r0, [sp, #8]
   25cdc:	bl	24b18 <__assert_fail@plt+0x12524>
   25ce0:	subs	r3, r0, #0
   25ce4:	str	r3, [sp, #4]
   25ce8:	bne	26030 <__assert_fail@plt+0x13a3c>
   25cec:	ldrb	r3, [sp, #184]	; 0xb8
   25cf0:	b	25e80 <__assert_fail@plt+0x1388c>
   25cf4:	add	r9, sp, #108	; 0x6c
   25cf8:	mov	r0, r9
   25cfc:	bl	12060 <mbsinit@plt>
   25d00:	cmp	r0, #0
   25d04:	beq	2608c <__assert_fail@plt+0x13a98>
   25d08:	strb	r4, [sp, #104]	; 0x68
   25d0c:	bl	12198 <__ctype_get_mb_cur_max@plt>
   25d10:	mov	r1, r0
   25d14:	mov	r0, r5
   25d18:	bl	2d43c <__assert_fail@plt+0x1ae48>
   25d1c:	mov	r2, r0
   25d20:	mov	r3, r9
   25d24:	mov	r1, r5
   25d28:	add	r0, sp, #132	; 0x84
   25d2c:	bl	31b90 <__assert_fail@plt+0x1f59c>
   25d30:	cmn	r0, #1
   25d34:	str	r0, [sp, #124]	; 0x7c
   25d38:	beq	25d70 <__assert_fail@plt+0x1377c>
   25d3c:	cmn	r0, #2
   25d40:	beq	25d84 <__assert_fail@plt+0x13790>
   25d44:	cmp	r0, #0
   25d48:	beq	25da0 <__assert_fail@plt+0x137ac>
   25d4c:	ldr	r5, [sp, #132]	; 0x84
   25d50:	mov	r0, r9
   25d54:	strb	r4, [sp, #128]	; 0x80
   25d58:	bl	12060 <mbsinit@plt>
   25d5c:	cmp	r0, #0
   25d60:	strb	r4, [sp, #116]	; 0x74
   25d64:	movne	r3, #0
   25d68:	strbne	r3, [sp, #104]	; 0x68
   25d6c:	b	25cc0 <__assert_fail@plt+0x136cc>
   25d70:	mov	r3, #0
   25d74:	str	fp, [sp, #124]	; 0x7c
   25d78:	ldr	r5, [sp, #120]	; 0x78
   25d7c:	strb	r3, [sp, #128]	; 0x80
   25d80:	b	25c60 <__assert_fail@plt+0x1366c>
   25d84:	ldr	r5, [sp, #120]	; 0x78
   25d88:	mov	r0, r5
   25d8c:	bl	12300 <strlen@plt>
   25d90:	mov	r3, #0
   25d94:	str	r0, [sp, #124]	; 0x7c
   25d98:	strb	r3, [sp, #128]	; 0x80
   25d9c:	b	25c60 <__assert_fail@plt+0x1366c>
   25da0:	ldr	r5, [sp, #120]	; 0x78
   25da4:	str	fp, [sp, #124]	; 0x7c
   25da8:	ldrb	r3, [r5]
   25dac:	cmp	r3, #0
   25db0:	bne	260ac <__assert_fail@plt+0x13ab8>
   25db4:	ldr	r5, [sp, #132]	; 0x84
   25db8:	cmp	r5, #0
   25dbc:	beq	25d50 <__assert_fail@plt+0x1375c>
   25dc0:	b	26010 <__assert_fail@plt+0x13a1c>
   25dc4:	mov	lr, r3
   25dc8:	str	r4, [sp, #4]
   25dcc:	b	254ac <__assert_fail@plt+0x12eb8>
   25dd0:	ldr	r5, [sp, #132]	; 0x84
   25dd4:	b	25cc0 <__assert_fail@plt+0x136cc>
   25dd8:	ldr	r5, [sp, #188]	; 0xbc
   25ddc:	mov	r0, r8
   25de0:	strb	r4, [sp, #184]	; 0xb8
   25de4:	bl	12060 <mbsinit@plt>
   25de8:	cmp	r0, #0
   25dec:	strb	r4, [sp, #172]	; 0xac
   25df0:	movne	r3, #0
   25df4:	strbne	r3, [sp, #160]	; 0xa0
   25df8:	b	2571c <__assert_fail@plt+0x13128>
   25dfc:	ldr	r5, [sp, #120]	; 0x78
   25e00:	b	25c80 <__assert_fail@plt+0x1368c>
   25e04:	ldr	r0, [sp, #176]	; 0xb0
   25e08:	bl	12300 <strlen@plt>
   25e0c:	mov	r3, #0
   25e10:	strb	r4, [sp, #172]	; 0xac
   25e14:	str	r0, [sp, #180]	; 0xb4
   25e18:	strb	r3, [sp, #184]	; 0xb8
   25e1c:	b	25c0c <__assert_fail@plt+0x13618>
   25e20:	ldr	r3, [sp, #120]	; 0x78
   25e24:	str	r3, [sp, #4]
   25e28:	ldrb	r3, [sp, #104]	; 0x68
   25e2c:	cmp	r3, #0
   25e30:	addne	r9, sp, #108	; 0x6c
   25e34:	bne	25f34 <__assert_fail@plt+0x13940>
   25e38:	ldr	r1, [sp, #4]
   25e3c:	ldrb	r3, [r1]
   25e40:	lsr	r2, r3, #5
   25e44:	and	r3, r3, #31
   25e48:	ldr	r2, [r7, r2, lsl #2]
   25e4c:	lsr	r3, r2, r3
   25e50:	tst	r3, #1
   25e54:	beq	25f1c <__assert_fail@plt+0x13928>
   25e58:	str	fp, [sp, #124]	; 0x7c
   25e5c:	ldrb	r5, [r1]
   25e60:	strb	r4, [sp, #116]	; 0x74
   25e64:	strb	r4, [sp, #128]	; 0x80
   25e68:	str	r5, [sp, #132]	; 0x84
   25e6c:	cmp	r5, #0
   25e70:	beq	25cd4 <__assert_fail@plt+0x136e0>
   25e74:	ldrb	r3, [sp, #184]	; 0xb8
   25e78:	mov	r2, #1
   25e7c:	str	r2, [sp, #4]
   25e80:	cmp	r3, #0
   25e84:	add	r3, r6, #1
   25e88:	str	r6, [sp, #40]	; 0x28
   25e8c:	mov	r6, r3
   25e90:	bne	25754 <__assert_fail@plt+0x13160>
   25e94:	b	25b50 <__assert_fail@plt+0x1355c>
   25e98:	add	r0, sp, #276	; 0x114
   25e9c:	bl	12060 <mbsinit@plt>
   25ea0:	cmp	r0, #0
   25ea4:	beq	2608c <__assert_fail@plt+0x13a98>
   25ea8:	strb	r4, [sp, #272]	; 0x110
   25eac:	bl	12198 <__ctype_get_mb_cur_max@plt>
   25eb0:	ldr	r5, [sp, #12]
   25eb4:	mov	r1, r0
   25eb8:	mov	r0, r5
   25ebc:	bl	2d43c <__assert_fail@plt+0x1ae48>
   25ec0:	mov	r2, r0
   25ec4:	add	r3, sp, #276	; 0x114
   25ec8:	mov	r1, r5
   25ecc:	add	r0, sp, #300	; 0x12c
   25ed0:	bl	31b90 <__assert_fail@plt+0x1f59c>
   25ed4:	cmn	r0, #1
   25ed8:	str	r0, [sp, #292]	; 0x124
   25edc:	beq	25f9c <__assert_fail@plt+0x139a8>
   25ee0:	cmn	r0, #2
   25ee4:	beq	25fb0 <__assert_fail@plt+0x139bc>
   25ee8:	cmp	r0, #0
   25eec:	beq	25fcc <__assert_fail@plt+0x139d8>
   25ef0:	ldr	r5, [sp, #300]	; 0x12c
   25ef4:	add	r0, sp, #276	; 0x114
   25ef8:	strb	r4, [sp, #296]	; 0x128
   25efc:	bl	12060 <mbsinit@plt>
   25f00:	cmp	r0, #0
   25f04:	strb	r4, [sp, #284]	; 0x11c
   25f08:	movne	r3, #0
   25f0c:	strbne	r3, [sp, #272]	; 0x110
   25f10:	cmp	r5, #0
   25f14:	bne	25844 <__assert_fail@plt+0x13250>
   25f18:	bl	125a0 <abort@plt>
   25f1c:	add	r9, sp, #108	; 0x6c
   25f20:	mov	r0, r9
   25f24:	bl	12060 <mbsinit@plt>
   25f28:	cmp	r0, #0
   25f2c:	beq	2608c <__assert_fail@plt+0x13a98>
   25f30:	strb	r4, [sp, #104]	; 0x68
   25f34:	bl	12198 <__ctype_get_mb_cur_max@plt>
   25f38:	ldr	r5, [sp, #4]
   25f3c:	mov	r1, r0
   25f40:	mov	r0, r5
   25f44:	bl	2d43c <__assert_fail@plt+0x1ae48>
   25f48:	mov	r2, r0
   25f4c:	mov	r3, r9
   25f50:	mov	r1, r5
   25f54:	add	r0, sp, #132	; 0x84
   25f58:	bl	31b90 <__assert_fail@plt+0x1f59c>
   25f5c:	cmn	r0, #1
   25f60:	str	r0, [sp, #124]	; 0x7c
   25f64:	beq	26038 <__assert_fail@plt+0x13a44>
   25f68:	cmn	r0, #2
   25f6c:	beq	26014 <__assert_fail@plt+0x13a20>
   25f70:	cmp	r0, #0
   25f74:	beq	2604c <__assert_fail@plt+0x13a58>
   25f78:	ldr	r5, [sp, #132]	; 0x84
   25f7c:	mov	r0, r9
   25f80:	strb	r4, [sp, #128]	; 0x80
   25f84:	bl	12060 <mbsinit@plt>
   25f88:	cmp	r0, #0
   25f8c:	strb	r4, [sp, #116]	; 0x74
   25f90:	movne	r3, #0
   25f94:	strbne	r3, [sp, #104]	; 0x68
   25f98:	b	25e6c <__assert_fail@plt+0x13878>
   25f9c:	ldr	r3, [sp, #44]	; 0x2c
   25fa0:	str	fp, [sp, #292]	; 0x124
   25fa4:	ldr	r5, [sp, #288]	; 0x120
   25fa8:	strb	r3, [sp, #296]	; 0x128
   25fac:	b	25848 <__assert_fail@plt+0x13254>
   25fb0:	ldr	r5, [sp, #288]	; 0x120
   25fb4:	mov	r0, r5
   25fb8:	bl	12300 <strlen@plt>
   25fbc:	ldr	r3, [sp, #44]	; 0x2c
   25fc0:	str	r0, [sp, #292]	; 0x124
   25fc4:	strb	r3, [sp, #296]	; 0x128
   25fc8:	b	25848 <__assert_fail@plt+0x13254>
   25fcc:	ldr	r5, [sp, #288]	; 0x120
   25fd0:	str	fp, [sp, #292]	; 0x124
   25fd4:	ldrb	r3, [r5]
   25fd8:	cmp	r3, #0
   25fdc:	bne	260ac <__assert_fail@plt+0x13ab8>
   25fe0:	ldr	r5, [sp, #300]	; 0x12c
   25fe4:	cmp	r5, #0
   25fe8:	beq	25ef4 <__assert_fail@plt+0x13900>
   25fec:	b	26010 <__assert_fail@plt+0x13a1c>
   25ff0:	ldr	r3, [sp, #64]	; 0x40
   25ff4:	str	r5, [sp, #68]	; 0x44
   25ff8:	ldrb	r3, [r3]
   25ffc:	cmp	r3, #0
   26000:	bne	260ac <__assert_fail@plt+0x13ab8>
   26004:	ldr	r4, [sp, #76]	; 0x4c
   26008:	cmp	r4, #0
   2600c:	beq	25568 <__assert_fail@plt+0x12f74>
   26010:	bl	24af0 <__assert_fail@plt+0x124fc>
   26014:	ldr	r0, [sp, #120]	; 0x78
   26018:	bl	12300 <strlen@plt>
   2601c:	mov	r3, #0
   26020:	strb	r4, [sp, #116]	; 0x74
   26024:	str	r0, [sp, #124]	; 0x7c
   26028:	strb	r3, [sp, #128]	; 0x80
   2602c:	b	25e74 <__assert_fail@plt+0x13880>
   26030:	ldr	r0, [sp, #272]	; 0x110
   26034:	b	25594 <__assert_fail@plt+0x12fa0>
   26038:	mov	r3, #0
   2603c:	strb	r4, [sp, #116]	; 0x74
   26040:	str	fp, [sp, #124]	; 0x7c
   26044:	strb	r3, [sp, #128]	; 0x80
   26048:	b	25e74 <__assert_fail@plt+0x13880>
   2604c:	ldr	r5, [sp, #120]	; 0x78
   26050:	str	fp, [sp, #124]	; 0x7c
   26054:	ldrb	r3, [r5]
   26058:	cmp	r3, #0
   2605c:	bne	260ac <__assert_fail@plt+0x13ab8>
   26060:	ldr	r5, [sp, #132]	; 0x84
   26064:	cmp	r5, #0
   26068:	beq	25f7c <__assert_fail@plt+0x13988>
   2606c:	b	26010 <__assert_fail@plt+0x13a1c>
   26070:	cmp	r3, #0
   26074:	beq	25e20 <__assert_fail@plt+0x1382c>
   26078:	ldrb	r3, [sp, #128]	; 0x80
   2607c:	cmp	r3, #0
   26080:	ldrne	r5, [sp, #132]	; 0x84
   26084:	beq	25e74 <__assert_fail@plt+0x13880>
   26088:	b	25e6c <__assert_fail@plt+0x13878>
   2608c:	movw	r3, #28480	; 0x6f40
   26090:	movt	r3, #4
   26094:	movw	r1, #28500	; 0x6f54
   26098:	movt	r1, #4
   2609c:	movw	r0, #28532	; 0x6f74
   260a0:	movt	r0, #4
   260a4:	mov	r2, #143	; 0x8f
   260a8:	bl	125f4 <__assert_fail@plt>
   260ac:	movw	r3, #28480	; 0x6f40
   260b0:	movt	r3, #4
   260b4:	movw	r1, #28500	; 0x6f54
   260b8:	movt	r1, #4
   260bc:	movw	r0, #28556	; 0x6f8c
   260c0:	movt	r0, #4
   260c4:	mov	r2, #171	; 0xab
   260c8:	bl	125f4 <__assert_fail@plt>
   260cc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   260d0:	mov	r4, r0
   260d4:	strd	r6, [sp, #8]
   260d8:	add	r6, r0, r1
   260dc:	str	r8, [sp, #16]
   260e0:	strd	sl, [sp, #20]
   260e4:	mov	fp, r2
   260e8:	str	lr, [sp, #28]
   260ec:	sub	sp, sp, #16
   260f0:	bl	12198 <__ctype_get_mb_cur_max@plt>
   260f4:	cmp	r0, #1
   260f8:	bls	2621c <__assert_fail@plt+0x13c28>
   260fc:	cmp	r4, r6
   26100:	mov	r5, #0
   26104:	bcs	261fc <__assert_fail@plt+0x13c08>
   26108:	and	sl, fp, #2
   2610c:	b	26134 <__assert_fail@plt+0x13b40>
   26110:	cmp	r3, #37	; 0x25
   26114:	bcs	26124 <__assert_fail@plt+0x13b30>
   26118:	sub	r3, r3, #32
   2611c:	cmp	r3, #3
   26120:	bhi	2615c <__assert_fail@plt+0x13b68>
   26124:	add	r4, r4, #1
   26128:	add	r5, r5, #1
   2612c:	cmp	r4, r6
   26130:	bcs	261fc <__assert_fail@plt+0x13c08>
   26134:	ldrb	r3, [r4]
   26138:	cmp	r3, #63	; 0x3f
   2613c:	bls	26110 <__assert_fail@plt+0x13b1c>
   26140:	cmp	r3, #65	; 0x41
   26144:	bcc	2615c <__assert_fail@plt+0x13b68>
   26148:	cmp	r3, #95	; 0x5f
   2614c:	bls	26124 <__assert_fail@plt+0x13b30>
   26150:	sub	r3, r3, #97	; 0x61
   26154:	cmp	r3, #29
   26158:	bls	26124 <__assert_fail@plt+0x13b30>
   2615c:	mov	r2, #0
   26160:	mov	r3, #0
   26164:	mvn	r7, #-2147483648	; 0x80000000
   26168:	strd	r2, [sp, #8]
   2616c:	b	26190 <__assert_fail@plt+0x13b9c>
   26170:	cmp	r2, r0
   26174:	add	r5, r5, r0
   26178:	blt	261f8 <__assert_fail@plt+0x13c04>
   2617c:	add	r0, sp, #8
   26180:	add	r4, r4, r8
   26184:	bl	12060 <mbsinit@plt>
   26188:	cmp	r0, #0
   2618c:	bne	2612c <__assert_fail@plt+0x13b38>
   26190:	add	r3, sp, #8
   26194:	sub	r2, r6, r4
   26198:	mov	r1, r4
   2619c:	add	r0, sp, #4
   261a0:	bl	31b90 <__assert_fail@plt+0x1f59c>
   261a4:	cmn	r0, #1
   261a8:	mov	r8, r0
   261ac:	beq	26274 <__assert_fail@plt+0x13c80>
   261b0:	cmn	r0, #2
   261b4:	beq	26284 <__assert_fail@plt+0x13c90>
   261b8:	cmp	r0, #0
   261bc:	ldr	r0, [sp, #4]
   261c0:	moveq	r8, #1
   261c4:	bl	11fa0 <wcwidth@plt>
   261c8:	cmp	r0, #0
   261cc:	sub	r2, r7, r5
   261d0:	bge	26170 <__assert_fail@plt+0x13b7c>
   261d4:	cmp	sl, #0
   261d8:	bne	2627c <__assert_fail@plt+0x13c88>
   261dc:	ldr	r0, [sp, #4]
   261e0:	bl	12114 <iswcntrl@plt>
   261e4:	cmp	r0, #0
   261e8:	bne	2617c <__assert_fail@plt+0x13b88>
   261ec:	cmn	r5, #-2147483647	; 0x80000001
   261f0:	add	r5, r5, #1
   261f4:	bne	2617c <__assert_fail@plt+0x13b88>
   261f8:	mvn	r5, #-2147483648	; 0x80000000
   261fc:	mov	r0, r5
   26200:	add	sp, sp, #16
   26204:	ldrd	r4, [sp]
   26208:	ldrd	r6, [sp, #8]
   2620c:	ldr	r8, [sp, #16]
   26210:	ldrd	sl, [sp, #20]
   26214:	add	sp, sp, #28
   26218:	pop	{pc}		; (ldr pc, [sp], #4)
   2621c:	cmp	r4, r6
   26220:	movcs	r5, #0
   26224:	bcs	261fc <__assert_fail@plt+0x13c08>
   26228:	bl	122b8 <__ctype_b_loc@plt>
   2622c:	ldr	r2, [r0]
   26230:	and	fp, fp, #2
   26234:	mov	r5, #0
   26238:	ldrb	r3, [r4], #1
   2623c:	lsl	r3, r3, #1
   26240:	ldrh	r3, [r2, r3]
   26244:	tst	r3, #16384	; 0x4000
   26248:	bne	2625c <__assert_fail@plt+0x13c68>
   2624c:	cmp	fp, #0
   26250:	bne	2627c <__assert_fail@plt+0x13c88>
   26254:	tst	r3, #2
   26258:	bne	26268 <__assert_fail@plt+0x13c74>
   2625c:	cmn	r5, #-2147483647	; 0x80000001
   26260:	beq	261fc <__assert_fail@plt+0x13c08>
   26264:	add	r5, r5, #1
   26268:	cmp	r6, r4
   2626c:	bne	26238 <__assert_fail@plt+0x13c44>
   26270:	b	261fc <__assert_fail@plt+0x13c08>
   26274:	tst	fp, #1
   26278:	beq	26124 <__assert_fail@plt+0x13b30>
   2627c:	mvn	r5, #0
   26280:	b	261fc <__assert_fail@plt+0x13c08>
   26284:	tst	fp, #1
   26288:	bne	2627c <__assert_fail@plt+0x13c88>
   2628c:	add	r5, r5, #1
   26290:	mov	r4, r6
   26294:	b	2612c <__assert_fail@plt+0x13b38>
   26298:	strd	r4, [sp, #-16]!
   2629c:	mov	r5, r1
   262a0:	mov	r4, r0
   262a4:	str	r6, [sp, #8]
   262a8:	str	lr, [sp, #12]
   262ac:	bl	12300 <strlen@plt>
   262b0:	mov	r1, r0
   262b4:	mov	r2, r5
   262b8:	ldr	r6, [sp, #8]
   262bc:	mov	r0, r4
   262c0:	ldrd	r4, [sp]
   262c4:	ldr	lr, [sp, #12]
   262c8:	add	sp, sp, #16
   262cc:	b	260cc <__assert_fail@plt+0x13ad8>
   262d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   262d4:	mov	r4, r0
   262d8:	strd	r6, [sp, #8]
   262dc:	strd	r8, [sp, #16]
   262e0:	strd	sl, [sp, #24]
   262e4:	str	lr, [sp, #32]
   262e8:	sub	sp, sp, #4
   262ec:	ldrb	r3, [r0]
   262f0:	sub	r2, r3, #48	; 0x30
   262f4:	cmp	r2, #7
   262f8:	bls	26444 <__assert_fail@plt+0x13e50>
   262fc:	cmp	r3, #0
   26300:	moveq	r0, #1
   26304:	beq	26334 <__assert_fail@plt+0x13d40>
   26308:	mov	r2, r4
   2630c:	mov	r0, #1
   26310:	and	r1, r3, #239	; 0xef
   26314:	cmp	r3, #43	; 0x2b
   26318:	cmpne	r1, #45	; 0x2d
   2631c:	ldrb	r3, [r2, #1]!
   26320:	moveq	r1, #1
   26324:	movne	r1, #0
   26328:	add	r0, r0, r1
   2632c:	cmp	r3, #0
   26330:	bne	26310 <__assert_fail@plt+0x13d1c>
   26334:	mov	r1, #16
   26338:	movw	sl, #519	; 0x207
   2633c:	bl	2db94 <__assert_fail@plt+0x1b5a0>
   26340:	mov	r7, #3
   26344:	mov	lr, #0
   26348:	mov	r5, #0
   2634c:	ldrb	r1, [r4]
   26350:	mov	r2, r4
   26354:	add	r4, r4, #1
   26358:	cmp	r1, #97	; 0x61
   2635c:	beq	265e8 <__assert_fail@plt+0x13ff4>
   26360:	bls	263a0 <__assert_fail@plt+0x13dac>
   26364:	cmp	r1, #111	; 0x6f
   26368:	beq	265e0 <__assert_fail@plt+0x13fec>
   2636c:	cmp	r1, #117	; 0x75
   26370:	beq	265f0 <__assert_fail@plt+0x13ffc>
   26374:	cmp	r1, #103	; 0x67
   26378:	beq	265f8 <__assert_fail@plt+0x14004>
   2637c:	bl	2f668 <__assert_fail@plt+0x1d074>
   26380:	mov	r0, #0
   26384:	add	sp, sp, #4
   26388:	ldrd	r4, [sp]
   2638c:	ldrd	r6, [sp, #8]
   26390:	ldrd	r8, [sp, #16]
   26394:	ldrd	sl, [sp, #24]
   26398:	add	sp, sp, #32
   2639c:	pop	{pc}		; (ldr pc, [sp], #4)
   263a0:	cmp	r1, #45	; 0x2d
   263a4:	beq	263b8 <__assert_fail@plt+0x13dc4>
   263a8:	cmp	r1, #61	; 0x3d
   263ac:	beq	263b8 <__assert_fail@plt+0x13dc4>
   263b0:	cmp	r1, #43	; 0x2b
   263b4:	bne	2637c <__assert_fail@plt+0x13d88>
   263b8:	add	r6, lr, #1
   263bc:	mov	r9, #1
   263c0:	add	lr, r0, lr, lsl #4
   263c4:	movw	r8, #4095	; 0xfff
   263c8:	b	2641c <__assert_fail@plt+0x13e28>
   263cc:	cmp	r3, #117	; 0x75
   263d0:	addeq	r3, r2, #2
   263d4:	moveq	r4, #448	; 0x1c0
   263d8:	bne	264e8 <__assert_fail@plt+0x13ef4>
   263dc:	strb	r1, [lr]
   263e0:	ldrb	r1, [r2, #2]
   263e4:	mov	r2, r3
   263e8:	strb	r7, [lr, #1]
   263ec:	str	r5, [lr, #4]
   263f0:	str	r4, [lr, #8]
   263f4:	cmp	r5, #0
   263f8:	andne	r4, r4, r5
   263fc:	and	r3, r1, #239	; 0xef
   26400:	add	lr, lr, #16
   26404:	str	r4, [lr, #-4]
   26408:	cmp	r1, #43	; 0x2b
   2640c:	cmpne	r3, #45	; 0x2d
   26410:	add	r3, r6, #1
   26414:	bne	2664c <__assert_fail@plt+0x14058>
   26418:	mov	r6, r3
   2641c:	ldrb	r3, [r2, #1]
   26420:	add	ip, r2, #1
   26424:	cmp	r3, #103	; 0x67
   26428:	beq	265d4 <__assert_fail@plt+0x13fe0>
   2642c:	bls	2647c <__assert_fail@plt+0x13e88>
   26430:	cmp	r3, #111	; 0x6f
   26434:	bne	263cc <__assert_fail@plt+0x13dd8>
   26438:	add	r3, r2, #2
   2643c:	mov	r4, #7
   26440:	b	263dc <__assert_fail@plt+0x13de8>
   26444:	add	r1, r0, #1
   26448:	mov	r5, #0
   2644c:	b	26460 <__assert_fail@plt+0x13e6c>
   26450:	ldrb	r3, [r1], #1
   26454:	sub	r0, r3, #48	; 0x30
   26458:	cmp	r0, #7
   2645c:	bhi	26604 <__assert_fail@plt+0x14010>
   26460:	add	r5, r3, r5, lsl #3
   26464:	mov	r2, r1
   26468:	sub	r5, r5, #48	; 0x30
   2646c:	cmp	r5, #4096	; 0x1000
   26470:	bcc	26450 <__assert_fail@plt+0x13e5c>
   26474:	mov	r0, #0
   26478:	b	26384 <__assert_fail@plt+0x13d90>
   2647c:	sub	r4, r3, #48	; 0x30
   26480:	cmp	r4, #7
   26484:	addls	r4, r2, #2
   26488:	movls	ip, #0
   2648c:	bhi	264e8 <__assert_fail@plt+0x13ef4>
   26490:	add	ip, r3, ip, lsl #3
   26494:	mov	r2, r4
   26498:	sub	ip, ip, #48	; 0x30
   2649c:	cmp	ip, #4096	; 0x1000
   264a0:	bcs	2637c <__assert_fail@plt+0x13d88>
   264a4:	ldrb	r3, [r4]
   264a8:	add	r4, r4, #1
   264ac:	sub	fp, r3, #48	; 0x30
   264b0:	cmp	fp, #7
   264b4:	bls	26490 <__assert_fail@plt+0x13e9c>
   264b8:	cmp	r5, #0
   264bc:	bne	2637c <__assert_fail@plt+0x13d88>
   264c0:	cmp	r3, #0
   264c4:	cmpne	r3, #44	; 0x2c
   264c8:	bne	2637c <__assert_fail@plt+0x13d88>
   264cc:	movw	r5, #4095	; 0xfff
   264d0:	strb	r1, [lr]
   264d4:	mov	r1, r3
   264d8:	mov	r4, r5
   264dc:	strb	r9, [lr, #1]
   264e0:	stmib	lr, {r8, ip}
   264e4:	b	263fc <__assert_fail@plt+0x13e08>
   264e8:	mov	fp, #1
   264ec:	mov	r4, #0
   264f0:	sub	r2, r3, #88	; 0x58
   264f4:	cmp	r2, #32
   264f8:	ldrls	pc, [pc, r2, lsl #2]
   264fc:	b	265b8 <__assert_fail@plt+0x13fc4>
   26500:	andeq	r6, r2, r4, lsl #11
   26504:			; <UNDEFINED> instruction: 0x000265b8
   26508:			; <UNDEFINED> instruction: 0x000265b8
   2650c:			; <UNDEFINED> instruction: 0x000265b8
   26510:			; <UNDEFINED> instruction: 0x000265b8
   26514:			; <UNDEFINED> instruction: 0x000265b8
   26518:			; <UNDEFINED> instruction: 0x000265b8
   2651c:			; <UNDEFINED> instruction: 0x000265b8
   26520:			; <UNDEFINED> instruction: 0x000265b8
   26524:			; <UNDEFINED> instruction: 0x000265b8
   26528:			; <UNDEFINED> instruction: 0x000265b8
   2652c:			; <UNDEFINED> instruction: 0x000265b8
   26530:			; <UNDEFINED> instruction: 0x000265b8
   26534:			; <UNDEFINED> instruction: 0x000265b8
   26538:			; <UNDEFINED> instruction: 0x000265b8
   2653c:			; <UNDEFINED> instruction: 0x000265b8
   26540:			; <UNDEFINED> instruction: 0x000265b8
   26544:			; <UNDEFINED> instruction: 0x000265b8
   26548:			; <UNDEFINED> instruction: 0x000265b8
   2654c:			; <UNDEFINED> instruction: 0x000265b8
   26550:			; <UNDEFINED> instruction: 0x000265b8
   26554:			; <UNDEFINED> instruction: 0x000265b8
   26558:			; <UNDEFINED> instruction: 0x000265b8
   2655c:			; <UNDEFINED> instruction: 0x000265b8
   26560:			; <UNDEFINED> instruction: 0x000265b8
   26564:			; <UNDEFINED> instruction: 0x000265b8
   26568:			; <UNDEFINED> instruction: 0x000265b0
   2656c:	andeq	r6, r2, r8, lsr #11
   26570:	andeq	r6, r2, r0, lsr #11
   26574:			; <UNDEFINED> instruction: 0x000265b8
   26578:			; <UNDEFINED> instruction: 0x000265b8
   2657c:	muleq	r2, r8, r5
   26580:	muleq	r2, r0, r5
   26584:	mov	fp, #2
   26588:	ldrb	r3, [ip, #1]!
   2658c:	b	264f0 <__assert_fail@plt+0x13efc>
   26590:	orr	r4, r4, #73	; 0x49
   26594:	b	26588 <__assert_fail@plt+0x13f94>
   26598:	orr	r4, r4, #146	; 0x92
   2659c:	b	26588 <__assert_fail@plt+0x13f94>
   265a0:	orr	r4, r4, #512	; 0x200
   265a4:	b	26588 <__assert_fail@plt+0x13f94>
   265a8:	orr	r4, r4, #3072	; 0xc00
   265ac:	b	26588 <__assert_fail@plt+0x13f94>
   265b0:	orr	r4, r4, #292	; 0x124
   265b4:	b	26588 <__assert_fail@plt+0x13f94>
   265b8:	mov	r2, ip
   265bc:	strb	r1, [lr]
   265c0:	mov	r1, r3
   265c4:	strb	fp, [lr, #1]
   265c8:	str	r5, [lr, #4]
   265cc:	str	r4, [lr, #8]
   265d0:	b	263f4 <__assert_fail@plt+0x13e00>
   265d4:	add	r3, r2, #2
   265d8:	mov	r4, #56	; 0x38
   265dc:	b	263dc <__assert_fail@plt+0x13de8>
   265e0:	orr	r5, r5, sl
   265e4:	b	2634c <__assert_fail@plt+0x13d58>
   265e8:	movw	r5, #4095	; 0xfff
   265ec:	b	2634c <__assert_fail@plt+0x13d58>
   265f0:	orr	r5, r5, #2496	; 0x9c0
   265f4:	b	2634c <__assert_fail@plt+0x13d58>
   265f8:	orr	r5, r5, #1072	; 0x430
   265fc:	orr	r5, r5, #8
   26600:	b	2634c <__assert_fail@plt+0x13d58>
   26604:	cmp	r3, #0
   26608:	bne	26474 <__assert_fail@plt+0x13e80>
   2660c:	sub	r2, r2, r4
   26610:	mov	r0, #32
   26614:	cmp	r2, #4
   26618:	andle	r4, r5, #3072	; 0xc00
   2661c:	movwgt	r4, #4095	; 0xfff
   26620:	mvnle	r4, r4, lsr #10
   26624:	mvnle	r4, r4, lsl #10
   26628:	bl	2da2c <__assert_fail@plt+0x1b438>
   2662c:	movw	r1, #317	; 0x13d
   26630:	movw	r2, #4095	; 0xfff
   26634:	mov	r3, #0
   26638:	strh	r1, [r0]
   2663c:	stmib	r0, {r2, r5}
   26640:	str	r4, [r0, #12]
   26644:	strb	r3, [r0, #17]
   26648:	b	26384 <__assert_fail@plt+0x13d90>
   2664c:	cmp	r1, #44	; 0x2c
   26650:	bne	26660 <__assert_fail@plt+0x1406c>
   26654:	add	r4, r2, #1
   26658:	mov	lr, r6
   2665c:	b	26348 <__assert_fail@plt+0x13d54>
   26660:	cmp	r1, #0
   26664:	addeq	r6, r0, r6, lsl #4
   26668:	strbeq	r1, [r6, #1]
   2666c:	beq	26384 <__assert_fail@plt+0x13d90>
   26670:	b	2637c <__assert_fail@plt+0x13d88>
   26674:	strd	r4, [sp, #-12]!
   26678:	mov	r1, r0
   2667c:	mov	r0, #3
   26680:	str	lr, [sp, #8]
   26684:	sub	sp, sp, #108	; 0x6c
   26688:	mov	r2, sp
   2668c:	bl	12558 <__xstat64@plt>
   26690:	subs	r4, r0, #0
   26694:	movne	r0, #0
   26698:	bne	266c0 <__assert_fail@plt+0x140cc>
   2669c:	ldr	r5, [sp, #16]
   266a0:	mov	r0, #32
   266a4:	bl	2da2c <__assert_fail@plt+0x1b438>
   266a8:	movw	r3, #4095	; 0xfff
   266ac:	movw	r2, #317	; 0x13d
   266b0:	strh	r2, [r0]
   266b4:	stmib	r0, {r3, r5}
   266b8:	str	r3, [r0, #12]
   266bc:	strb	r4, [r0, #17]
   266c0:	add	sp, sp, #108	; 0x6c
   266c4:	ldrd	r4, [sp]
   266c8:	add	sp, sp, #8
   266cc:	pop	{pc}		; (ldr pc, [sp], #4)
   266d0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   266d4:	ubfx	r0, r0, #0, #12
   266d8:	strd	r6, [sp, #8]
   266dc:	strd	r8, [sp, #16]
   266e0:	str	lr, [sp, #24]
   266e4:	ldrb	r4, [r3, #1]
   266e8:	ldr	r9, [sp, #28]
   266ec:	cmp	r4, #0
   266f0:	beq	26840 <__assert_fail@plt+0x1424c>
   266f4:	add	r3, r3, #16
   266f8:	mvn	r2, r2
   266fc:	mov	r7, #0
   26700:	mvn	r8, #3072	; 0xc00
   26704:	b	26780 <__assert_fail@plt+0x1418c>
   26708:	cmp	r4, #2
   2670c:	mvn	lr, #0
   26710:	beq	26830 <__assert_fail@plt+0x1423c>
   26714:	mov	r5, r1
   26718:	cmp	r4, #3
   2671c:	bne	26744 <__assert_fail@plt+0x14150>
   26720:	and	ip, ip, r0
   26724:	tst	ip, #292	; 0x124
   26728:	movne	r4, #292	; 0x124
   2672c:	moveq	r4, #0
   26730:	tst	ip, #146	; 0x92
   26734:	orrne	r4, r4, #146	; 0x92
   26738:	tst	ip, #73	; 0x49
   2673c:	orrne	r4, r4, #73	; 0x49
   26740:	orr	ip, r4, ip
   26744:	cmp	r6, #0
   26748:	and	ip, ip, lr
   2674c:	ldrb	r4, [r3, #-16]
   26750:	bne	267bc <__assert_fail@plt+0x141c8>
   26754:	cmp	r4, #45	; 0x2d
   26758:	and	ip, ip, r2
   2675c:	beq	26818 <__assert_fail@plt+0x14224>
   26760:	cmp	r4, #61	; 0x3d
   26764:	beq	267dc <__assert_fail@plt+0x141e8>
   26768:	cmp	r4, #43	; 0x2b
   2676c:	beq	26824 <__assert_fail@plt+0x14230>
   26770:	add	r3, r3, #16
   26774:	ldrb	r4, [r3, #-15]
   26778:	cmp	r4, #0
   2677c:	beq	267fc <__assert_fail@plt+0x14208>
   26780:	cmp	r1, #0
   26784:	ldr	r6, [r3, #-12]
   26788:	ldr	ip, [r3, #-8]
   2678c:	beq	26708 <__assert_fail@plt+0x14114>
   26790:	cmp	r4, #2
   26794:	ldr	lr, [r3, #-4]
   26798:	mvn	r5, lr
   2679c:	orr	lr, lr, r8
   267a0:	and	r5, r5, #3072	; 0xc00
   267a4:	bne	26718 <__assert_fail@plt+0x14124>
   267a8:	orr	ip, ip, #73	; 0x49
   267ac:	cmp	r6, #0
   267b0:	ldrb	r4, [r3, #-16]
   267b4:	and	ip, ip, lr
   267b8:	beq	26754 <__assert_fail@plt+0x14160>
   267bc:	cmp	r4, #45	; 0x2d
   267c0:	and	ip, ip, r6
   267c4:	beq	26818 <__assert_fail@plt+0x14224>
   267c8:	cmp	r4, #61	; 0x3d
   267cc:	bne	26768 <__assert_fail@plt+0x14174>
   267d0:	mvn	r6, r6
   267d4:	orr	r5, r5, r6
   267d8:	mvn	lr, r5
   267dc:	add	r3, r3, #16
   267e0:	ldrb	r4, [r3, #-15]
   267e4:	ubfx	lr, lr, #0, #12
   267e8:	and	r0, r0, r5
   267ec:	orr	r0, r0, ip
   267f0:	orr	r7, r7, lr
   267f4:	cmp	r4, #0
   267f8:	bne	26780 <__assert_fail@plt+0x1418c>
   267fc:	cmp	r9, #0
   26800:	ldrd	r4, [sp]
   26804:	strne	r7, [r9]
   26808:	ldrd	r6, [sp, #8]
   2680c:	ldrd	r8, [sp, #16]
   26810:	add	sp, sp, #24
   26814:	pop	{pc}		; (ldr pc, [sp], #4)
   26818:	orr	r7, r7, ip
   2681c:	bic	r0, r0, ip
   26820:	b	26770 <__assert_fail@plt+0x1417c>
   26824:	orr	r7, r7, ip
   26828:	orr	r0, r0, ip
   2682c:	b	26770 <__assert_fail@plt+0x1417c>
   26830:	ands	r5, r0, #73	; 0x49
   26834:	beq	26744 <__assert_fail@plt+0x14150>
   26838:	mov	r5, r1
   2683c:	b	267a8 <__assert_fail@plt+0x141b4>
   26840:	mov	r7, r4
   26844:	b	267fc <__assert_fail@plt+0x14208>
   26848:	movw	r3, #38128	; 0x94f0
   2684c:	movt	r3, #5
   26850:	str	r4, [sp, #-8]!
   26854:	ldr	r4, [r3]
   26858:	mov	r5, r0
   2685c:	mov	r2, #5
   26860:	movw	r1, #28580	; 0x6fa4
   26864:	movt	r1, #4
   26868:	str	lr, [sp, #4]
   2686c:	mov	r0, #0
   26870:	bl	120b4 <dcgettext@plt>
   26874:	mov	r2, r0
   26878:	mov	r1, r5
   2687c:	mov	r0, r4
   26880:	bl	121ec <error@plt>
   26884:	bl	125a0 <abort@plt>
   26888:	movw	r3, #38128	; 0x94f0
   2688c:	movt	r3, #5
   26890:	str	r4, [sp, #-8]!
   26894:	ldr	r4, [r3]
   26898:	mov	r5, r0
   2689c:	mov	r2, #5
   268a0:	movw	r1, #28624	; 0x6fd0
   268a4:	movt	r1, #4
   268a8:	str	lr, [sp, #4]
   268ac:	mov	r0, #0
   268b0:	bl	120b4 <dcgettext@plt>
   268b4:	mov	r2, r0
   268b8:	mov	r1, r5
   268bc:	mov	r0, r4
   268c0:	bl	121ec <error@plt>
   268c4:	bl	125a0 <abort@plt>
   268c8:	push	{r2, r3}
   268cc:	push	{lr}		; (str lr, [sp, #-4]!)
   268d0:	sub	sp, sp, #12
   268d4:	ldr	r2, [sp, #16]
   268d8:	ands	r3, r2, #64	; 0x40
   268dc:	bne	268f8 <__assert_fail@plt+0x14304>
   268e0:	bl	12324 <openat64@plt>
   268e4:	bl	2d488 <__assert_fail@plt+0x1ae94>
   268e8:	add	sp, sp, #12
   268ec:	pop	{lr}		; (ldr lr, [sp], #4)
   268f0:	add	sp, sp, #8
   268f4:	bx	lr
   268f8:	add	ip, sp, #20
   268fc:	ldr	r3, [sp, #20]
   26900:	str	ip, [sp, #4]
   26904:	b	268e0 <__assert_fail@plt+0x142ec>
   26908:	sub	sp, sp, #8
   2690c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   26910:	mov	r4, r0
   26914:	add	r0, sp, #32
   26918:	ldr	r1, [r4, #156]	; 0x9c
   2691c:	strd	r6, [sp, #8]
   26920:	strd	r8, [sp, #16]
   26924:	str	sl, [sp, #24]
   26928:	str	lr, [sp, #28]
   2692c:	cmp	r1, #0
   26930:	ldrd	r6, [sp, #40]	; 0x28
   26934:	stm	r0, {r2, r3}
   26938:	ldr	r5, [sp, #48]	; 0x30
   2693c:	beq	2698c <__assert_fail@plt+0x14398>
   26940:	ldr	r3, [r4, #48]	; 0x30
   26944:	cmp	r3, #0
   26948:	bne	2698c <__assert_fail@plt+0x14398>
   2694c:	ldrb	r3, [r4, #153]	; 0x99
   26950:	cmp	r3, #0
   26954:	bne	2698c <__assert_fail@plt+0x14398>
   26958:	ldr	r3, [r4, #172]	; 0xac
   2695c:	cmp	r5, #2
   26960:	cmple	r3, #0
   26964:	beq	26a74 <__assert_fail@plt+0x14480>
   26968:	ldrd	r2, [r0]
   2696c:	mov	ip, #1
   26970:	ldrd	r6, [r0, #8]
   26974:	ldrd	r8, [r0, #16]
   26978:	strd	r2, [r4, #32]
   2697c:	strd	r6, [r4, #40]	; 0x28
   26980:	strb	ip, [r4, #180]	; 0xb4
   26984:	strd	r8, [r4, #48]	; 0x30
   26988:	b	269f8 <__assert_fail@plt+0x14404>
   2698c:	cmp	r5, #4
   26990:	ble	26a18 <__assert_fail@plt+0x14424>
   26994:	add	ip, r1, #1
   26998:	mov	r2, #100	; 0x64
   2699c:	mov	r3, #0
   269a0:	mov	r0, r6
   269a4:	mov	r1, r7
   269a8:	str	ip, [r4, #156]	; 0x9c
   269ac:	sub	r5, r5, #4
   269b0:	bl	424a0 <__assert_fail@plt+0x2feac>
   269b4:	mov	r0, r6
   269b8:	mov	r1, r7
   269bc:	strd	r2, [r4, #64]	; 0x40
   269c0:	mov	r2, #100	; 0x64
   269c4:	mov	r3, #0
   269c8:	bl	424a0 <__assert_fail@plt+0x2feac>
   269cc:	mov	r2, #100	; 0x64
   269d0:	mov	r3, #0
   269d4:	bl	424a0 <__assert_fail@plt+0x2feac>
   269d8:	mov	r0, r6
   269dc:	mov	r1, r7
   269e0:	strd	r2, [r4, #56]	; 0x38
   269e4:	movw	r2, #10000	; 0x2710
   269e8:	mov	r3, #0
   269ec:	bl	424a0 <__assert_fail@plt+0x2feac>
   269f0:	strd	r0, [r4, #40]	; 0x28
   269f4:	str	r5, [r4, #48]	; 0x30
   269f8:	ldrd	r4, [sp]
   269fc:	ldrd	r6, [sp, #8]
   26a00:	ldrd	r8, [sp, #16]
   26a04:	ldr	sl, [sp, #24]
   26a08:	ldr	lr, [sp, #28]
   26a0c:	add	sp, sp, #32
   26a10:	add	sp, sp, #8
   26a14:	bx	lr
   26a18:	ldr	r3, [r4, #172]	; 0xac
   26a1c:	cmp	r5, #2
   26a20:	add	r3, r3, #1
   26a24:	str	r3, [r4, #172]	; 0xac
   26a28:	ble	26a7c <__assert_fail@plt+0x14488>
   26a2c:	mov	r2, #100	; 0x64
   26a30:	mov	r3, #0
   26a34:	mov	r0, r6
   26a38:	mov	r1, r7
   26a3c:	bl	424a0 <__assert_fail@plt+0x2feac>
   26a40:	mov	r2, #100	; 0x64
   26a44:	mov	r3, #0
   26a48:	strd	r0, [r4, #72]	; 0x48
   26a4c:	mov	r0, r6
   26a50:	mov	r1, r7
   26a54:	bl	424a0 <__assert_fail@plt+0x2feac>
   26a58:	strd	r2, [r4, #80]	; 0x50
   26a5c:	mov	r3, #0
   26a60:	mov	r2, #2
   26a64:	str	r2, [r4, #28]
   26a68:	str	r3, [r4, #88]	; 0x58
   26a6c:	str	r3, [r4, #92]	; 0x5c
   26a70:	b	269f8 <__assert_fail@plt+0x14404>
   26a74:	mov	r3, #1
   26a78:	str	r3, [r4, #172]	; 0xac
   26a7c:	mov	r2, #0
   26a80:	mov	r3, #0
   26a84:	strd	r6, [r4, #72]	; 0x48
   26a88:	strd	r2, [r4, #80]	; 0x50
   26a8c:	b	26a5c <__assert_fail@plt+0x14468>
   26a90:	ldr	r3, [r1, #24]
   26a94:	cmp	r3, #0
   26a98:	blt	26b0c <__assert_fail@plt+0x14518>
   26a9c:	ldm	r0, {r3, ip}
   26aa0:	strd	r4, [sp, #-12]!
   26aa4:	ldr	r2, [r1]
   26aa8:	ldr	r5, [r1, #8]
   26aac:	ldr	r4, [r1, #12]
   26ab0:	eor	r3, r3, r2
   26ab4:	ldr	r2, [r0, #8]
   26ab8:	str	lr, [sp, #8]
   26abc:	ldr	lr, [r1, #4]
   26ac0:	eor	r2, r2, r5
   26ac4:	eor	ip, ip, lr
   26ac8:	ldr	lr, [r0, #12]
   26acc:	orr	r3, r3, ip
   26ad0:	orr	r3, r3, r2
   26ad4:	ldr	ip, [r0, #16]
   26ad8:	ldr	r2, [r0, #20]
   26adc:	eor	lr, lr, r4
   26ae0:	ldrd	r0, [r1, #16]
   26ae4:	orr	r3, r3, lr
   26ae8:	ldrd	r4, [sp]
   26aec:	add	sp, sp, #8
   26af0:	eor	ip, ip, r0
   26af4:	eor	r2, r2, r1
   26af8:	orr	r3, r3, ip
   26afc:	orrs	r3, r3, r2
   26b00:	moveq	r0, #1
   26b04:	movne	r0, #0
   26b08:	pop	{pc}		; (ldr pc, [sp], #4)
   26b0c:	mov	r0, #0
   26b10:	bx	lr
   26b14:	strd	r4, [sp, #-24]!	; 0xffffffe8
   26b18:	movw	r5, #28672	; 0x7000
   26b1c:	movt	r5, #4
   26b20:	strd	r6, [sp, #8]
   26b24:	mov	r6, r1
   26b28:	mov	r7, r0
   26b2c:	movw	r1, #31336	; 0x7a68
   26b30:	movt	r1, #4
   26b34:	str	r8, [sp, #16]
   26b38:	str	lr, [sp, #20]
   26b3c:	b	26b4c <__assert_fail@plt+0x14558>
   26b40:	ldr	r1, [r5, #12]!
   26b44:	cmp	r1, #0
   26b48:	beq	26b78 <__assert_fail@plt+0x14584>
   26b4c:	mov	r0, r6
   26b50:	mov	r4, r5
   26b54:	bl	11f40 <strcmp@plt>
   26b58:	cmp	r0, #0
   26b5c:	bne	26b40 <__assert_fail@plt+0x1454c>
   26b60:	mov	r0, r4
   26b64:	ldrd	r4, [sp]
   26b68:	ldrd	r6, [sp, #8]
   26b6c:	ldr	r8, [sp, #16]
   26b70:	add	sp, sp, #20
   26b74:	pop	{pc}		; (ldr pc, [sp], #4)
   26b78:	ldr	r1, [r7, #188]	; 0xbc
   26b7c:	cmp	r1, #0
   26b80:	beq	26bb0 <__assert_fail@plt+0x145bc>
   26b84:	add	r7, r7, #188	; 0xbc
   26b88:	b	26b98 <__assert_fail@plt+0x145a4>
   26b8c:	ldr	r1, [r7, #12]!
   26b90:	cmp	r1, #0
   26b94:	beq	26bb0 <__assert_fail@plt+0x145bc>
   26b98:	mov	r0, r6
   26b9c:	mov	r4, r7
   26ba0:	bl	11f40 <strcmp@plt>
   26ba4:	cmp	r0, #0
   26ba8:	bne	26b8c <__assert_fail@plt+0x14598>
   26bac:	b	26b60 <__assert_fail@plt+0x1456c>
   26bb0:	movw	r1, #31340	; 0x7a6c
   26bb4:	movt	r1, #4
   26bb8:	ldr	r3, [pc, #48]	; 26bf0 <__assert_fail@plt+0x145fc>
   26bbc:	b	26bcc <__assert_fail@plt+0x145d8>
   26bc0:	ldr	r1, [r4, #12]
   26bc4:	cmp	r1, #0
   26bc8:	beq	26be8 <__assert_fail@plt+0x145f4>
   26bcc:	mov	r0, r6
   26bd0:	mov	r4, r3
   26bd4:	bl	11f40 <strcmp@plt>
   26bd8:	cmp	r0, #0
   26bdc:	add	r3, r4, #12
   26be0:	bne	26bc0 <__assert_fail@plt+0x145cc>
   26be4:	b	26b60 <__assert_fail@plt+0x1456c>
   26be8:	mov	r4, r1
   26bec:	b	26b60 <__assert_fail@plt+0x1456c>
   26bf0:	andeq	r7, r4, r0, lsr r0
   26bf4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26bf8:	mov	r3, #0
   26bfc:	mov	r5, #38	; 0x26
   26c00:	strd	r6, [sp, #8]
   26c04:	cmn	r5, #93	; 0x5d
   26c08:	mov	r4, r5
   26c0c:	strd	r8, [sp, #16]
   26c10:	mov	r8, r3
   26c14:	strd	sl, [sp, #24]
   26c18:	movw	sl, #28672	; 0x7000
   26c1c:	movt	sl, #4
   26c20:	str	lr, [sp, #32]
   26c24:	sub	sp, sp, #1536	; 0x600
   26c28:	sub	sp, sp, #4
   26c2c:	add	fp, sp, #264	; 0x108
   26c30:	add	r9, sp, #416	; 0x1a0
   26c34:	str	r0, [sp, #28]
   26c38:	strh	r3, [fp]
   26c3c:	str	r3, [sp, #80]	; 0x50
   26c40:	mov	r3, #51712	; 0xca00
   26c44:	movt	r3, #15258	; 0x3b9a
   26c48:	str	r3, [sp, #84]	; 0x54
   26c4c:	mvn	r3, #1
   26c50:	str	r3, [sp, #24]
   26c54:	beq	26d68 <__assert_fail@plt+0x14774>
   26c58:	ldr	r3, [sp, #24]
   26c5c:	cmn	r3, #2
   26c60:	beq	27198 <__assert_fail@plt+0x14ba4>
   26c64:	ldr	r2, [sp, #24]
   26c68:	cmp	r2, #0
   26c6c:	ble	2717c <__assert_fail@plt+0x14b88>
   26c70:	movw	r3, #277	; 0x115
   26c74:	cmp	r2, r3
   26c78:	ble	273b0 <__assert_fail@plt+0x14dbc>
   26c7c:	add	r4, r5, #2
   26c80:	mov	r1, #2
   26c84:	cmp	r4, #112	; 0x70
   26c88:	bhi	26d68 <__assert_fail@plt+0x14774>
   26c8c:	add	r4, sl, r4
   26c90:	movw	r3, #2076	; 0x81c
   26c94:	ldrsb	r3, [r4, r3]
   26c98:	cmp	r3, r1
   26c9c:	bne	26d68 <__assert_fail@plt+0x14774>
   26ca0:	ldrb	r8, [r4, #2192]	; 0x890
   26ca4:	cmp	r8, #0
   26ca8:	beq	27524 <__assert_fail@plt+0x14f30>
   26cac:	ldr	r3, [sp, #80]	; 0x50
   26cb0:	add	r2, sp, #304	; 0x130
   26cb4:	add	ip, sp, #312	; 0x138
   26cb8:	ldrd	r4, [sp, #88]	; 0x58
   26cbc:	cmp	r3, #0
   26cc0:	subne	r3, r3, #1
   26cc4:	strne	r3, [sp, #80]	; 0x50
   26cc8:	ldr	r3, [sp, #232]	; 0xe8
   26ccc:	str	r3, [sp, #320]	; 0x140
   26cd0:	mov	r3, fp
   26cd4:	ldrd	r0, [r2]
   26cd8:	add	r2, r9, #56	; 0x38
   26cdc:	strd	r4, [ip]
   26ce0:	add	ip, sp, #320	; 0x140
   26ce4:	ldrd	r6, [ip]
   26ce8:	strd	r0, [r9, #56]	; 0x38
   26cec:	mvn	r1, #1
   26cf0:	str	r1, [sp, #24]
   26cf4:	add	r1, sp, #328	; 0x148
   26cf8:	add	ip, sp, #336	; 0x150
   26cfc:	ldrd	r0, [r1]
   26d00:	strd	r4, [r9, #64]	; 0x40
   26d04:	strd	r6, [r9, #72]	; 0x48
   26d08:	ldrd	r4, [ip]
   26d0c:	add	ip, sp, #352	; 0x160
   26d10:	strd	r0, [r9, #80]	; 0x50
   26d14:	add	r1, sp, #344	; 0x158
   26d18:	ldrd	r0, [r1]
   26d1c:	strd	r4, [r9, #88]	; 0x58
   26d20:	ldrd	r4, [ip]
   26d24:	strd	r0, [r9, #96]	; 0x60
   26d28:	mov	r9, r2
   26d2c:	strd	r4, [r2, #48]	; 0x30
   26d30:	add	r2, sp, #272	; 0x110
   26d34:	add	fp, r3, #2
   26d38:	strh	r8, [r3, #2]
   26d3c:	add	r2, r2, #30
   26d40:	cmp	fp, r2
   26d44:	bcs	2906c <__assert_fail@plt+0x16a78>
   26d48:	cmp	r8, #12
   26d4c:	beq	29074 <__assert_fail@plt+0x16a80>
   26d50:	add	r3, sl, r8
   26d54:	add	r3, r3, #624	; 0x270
   26d58:	ldrsb	r5, [r3]
   26d5c:	cmn	r5, #93	; 0x5d
   26d60:	mov	r4, r5
   26d64:	bne	26c58 <__assert_fail@plt+0x14664>
   26d68:	add	r3, sl, r8
   26d6c:	ldrb	ip, [r3, #2308]	; 0x904
   26d70:	cmp	ip, #0
   26d74:	bne	26e30 <__assert_fail@plt+0x1483c>
   26d78:	ldr	r3, [sp, #80]	; 0x50
   26d7c:	cmp	r3, #3
   26d80:	bne	26d94 <__assert_fail@plt+0x147a0>
   26d84:	ldr	r3, [sp, #24]
   26d88:	cmp	r3, #0
   26d8c:	bgt	2718c <__assert_fail@plt+0x14b98>
   26d90:	beq	27158 <__assert_fail@plt+0x14b64>
   26d94:	movw	r0, #2076	; 0x81c
   26d98:	add	r1, sp, #264	; 0x108
   26d9c:	ldr	r7, [sp, #24]
   26da0:	b	26db4 <__assert_fail@plt+0x147c0>
   26da4:	cmp	fp, r1
   26da8:	sub	r9, r9, #56	; 0x38
   26dac:	beq	27158 <__assert_fail@plt+0x14b64>
   26db0:	ldrsh	r8, [fp, #-2]!
   26db4:	add	r8, sl, r8
   26db8:	add	r8, r8, #624	; 0x270
   26dbc:	ldrsb	r3, [r8]
   26dc0:	cmn	r3, #93	; 0x5d
   26dc4:	add	r2, r3, #1
   26dc8:	beq	26da4 <__assert_fail@plt+0x147b0>
   26dcc:	cmp	r2, #112	; 0x70
   26dd0:	add	r3, sl, r2
   26dd4:	bhi	26da4 <__assert_fail@plt+0x147b0>
   26dd8:	ldrsb	r2, [r3, r0]
   26ddc:	cmp	r2, #1
   26de0:	bne	26da4 <__assert_fail@plt+0x147b0>
   26de4:	ldrb	r8, [r3, #2192]	; 0x890
   26de8:	cmp	r8, #0
   26dec:	beq	26da4 <__assert_fail@plt+0x147b0>
   26df0:	add	r2, sp, #304	; 0x130
   26df4:	ldrd	r4, [sp, #88]	; 0x58
   26df8:	add	ip, sp, #312	; 0x138
   26dfc:	str	r7, [sp, #24]
   26e00:	ldr	r3, [sp, #232]	; 0xe8
   26e04:	str	r3, [sp, #320]	; 0x140
   26e08:	mov	r3, fp
   26e0c:	ldrd	r0, [r2]
   26e10:	add	r2, r9, #56	; 0x38
   26e14:	strd	r4, [ip]
   26e18:	add	ip, sp, #320	; 0x140
   26e1c:	ldrd	r6, [ip]
   26e20:	strd	r0, [r9, #56]	; 0x38
   26e24:	mov	r1, #3
   26e28:	str	r1, [sp, #80]	; 0x50
   26e2c:	b	26cf4 <__assert_fail@plt+0x14700>
   26e30:	add	r3, sl, ip
   26e34:	add	r5, sp, #368	; 0x170
   26e38:	ldrb	r2, [r3, #2424]	; 0x978
   26e3c:	mov	r4, r5
   26e40:	sub	lr, ip, #4
   26e44:	rsb	r1, r2, #1
   26e48:	rsb	r1, r1, r1, lsl #3
   26e4c:	lsl	r1, r1, #3
   26e50:	add	r3, r9, r1
   26e54:	ldrd	r0, [r1, r9]
   26e58:	ldr	r8, [r3, #16]
   26e5c:	ldr	r7, [r3, #20]
   26e60:	strd	r0, [r5, #-8]
   26e64:	ldrd	r0, [r3, #8]
   26e68:	ldr	r6, [r3, #24]
   26e6c:	strd	r0, [r4], #-8
   26e70:	str	r8, [r4, #16]
   26e74:	strd	r0, [sp, #40]	; 0x28
   26e78:	str	r8, [sp, #48]	; 0x30
   26e7c:	ldr	r8, [r3, #28]
   26e80:	str	r7, [r4, #20]
   26e84:	ldr	r1, [r3, #32]
   26e88:	str	r6, [r4, #24]
   26e8c:	str	r7, [sp, #52]	; 0x34
   26e90:	str	r8, [r4, #28]
   26e94:	ldr	r7, [r3, #36]	; 0x24
   26e98:	str	r1, [r4, #32]
   26e9c:	str	r1, [sp, #56]	; 0x38
   26ea0:	ldrd	r0, [r3, #48]	; 0x30
   26ea4:	str	r6, [sp, #64]	; 0x40
   26ea8:	str	r8, [sp, #68]	; 0x44
   26eac:	ldr	r6, [r3, #40]	; 0x28
   26eb0:	str	r7, [r4, #36]	; 0x24
   26eb4:	ldr	r8, [r3, #44]	; 0x2c
   26eb8:	ldr	r3, [r3, #48]	; 0x30
   26ebc:	str	r6, [sp, #16]
   26ec0:	str	r6, [r4, #40]	; 0x28
   26ec4:	strd	r0, [r4, #48]	; 0x30
   26ec8:	str	r7, [sp, #60]	; 0x3c
   26ecc:	str	r8, [r4, #44]	; 0x2c
   26ed0:	str	r8, [sp, #20]
   26ed4:	str	r3, [sp, #32]
   26ed8:	cmp	lr, #87	; 0x57
   26edc:	ldrls	pc, [pc, lr, lsl #2]
   26ee0:	b	29978 <__assert_fail@plt+0x17384>
   26ee4:	andeq	r7, r2, r8, ror #24
   26ee8:	andeq	r9, r2, r8, ror r9
   26eec:	andeq	r9, r2, r8, ror r9
   26ef0:	andeq	r7, r2, r0, lsr #24
   26ef4:	andeq	r7, r2, r4, ror #26
   26ef8:	andeq	r7, r2, r8, lsr #26
   26efc:	andeq	r7, r2, ip, ror #25
   26f00:			; <UNDEFINED> instruction: 0x00027cb0
   26f04:	strdeq	r7, [r2], -r0
   26f08:	andeq	r7, r2, r4, ror #29
   26f0c:	ldrdeq	r7, [r2], -r8
   26f10:	andeq	r7, r2, ip, lsr #29
   26f14:	andeq	r9, r2, r8, ror r9
   26f18:	andeq	r9, r2, r8, ror r9
   26f1c:	andeq	r7, r2, r4, ror #28
   26f20:	andeq	r7, r2, r4, lsr #28
   26f24:	andeq	r7, r2, r4, ror #27
   26f28:	andeq	r9, r2, r8, ror r9
   26f2c:	andeq	r7, r2, r0, lsr #27
   26f30:	andeq	r8, r2, ip, ror #25
   26f34:	andeq	r8, r2, r4, lsr #25
   26f38:	andeq	r9, r2, r8, ror r9
   26f3c:	andeq	r9, r2, r8, ror r9
   26f40:	ldrdeq	r8, [r2], -r4
   26f44:	andeq	r8, r2, r4, asr #27
   26f48:	muleq	r2, r4, sp
   26f4c:	andeq	r8, r2, r4, ror sp
   26f50:	andeq	r8, r2, ip, asr #26
   26f54:	andeq	r7, r2, r4, asr #32
   26f58:	andeq	r8, r2, r8, asr #12
   26f5c:	andeq	r8, r2, r8, asr r5
   26f60:	strdeq	r7, [r2], -r0
   26f64:	andeq	r7, r2, r8, asr #31
   26f68:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   26f6c:	andeq	r7, r2, ip, ror #30
   26f70:	andeq	r7, r2, r0, ror #30
   26f74:	andeq	r7, r2, ip, lsr #30
   26f78:	andeq	r8, r2, ip, ror #6
   26f7c:	andeq	r8, r2, r0, lsl #6
   26f80:	andeq	r8, r2, r4, asr #5
   26f84:	andeq	r8, r2, r4, asr r2
   26f88:	andeq	r8, r2, r8, lsr #4
   26f8c:	strdeq	r8, [r2], -r4
   26f90:	andeq	r8, r2, r8, asr #3
   26f94:	andeq	r8, r2, r8, ror r1
   26f98:	andeq	r9, r2, r8, ror r9
   26f9c:	andeq	r8, r2, r0
   26fa0:	andeq	r8, r2, r0, ror #16
   26fa4:	andeq	r7, r2, ip, ror #13
   26fa8:	andeq	r7, r2, ip, ror #13
   26fac:	andeq	r8, r2, r0, ror r1
   26fb0:	andeq	r8, r2, r4, lsl r1
   26fb4:	andeq	r8, r2, r8, asr #1
   26fb8:	andeq	r8, r2, r0, lsl #1
   26fbc:	ldrdeq	r7, [r2], -r0
   26fc0:	andeq	r7, r2, r0, ror fp
   26fc4:	strdeq	r7, [r2], -r8
   26fc8:	andeq	r7, r2, ip, asr sl
   26fcc:	andeq	r7, r2, r0, lsl #20
   26fd0:			; <UNDEFINED> instruction: 0x000279b4
   26fd4:	andeq	r7, r2, r8, ror #18
   26fd8:	andeq	r7, r2, r8, lsl #18
   26fdc:	andeq	r7, r2, r4, lsr #17
   26fe0:	andeq	r8, r2, r8, lsl #23
   26fe4:	andeq	r8, r2, r8, lsr #22
   26fe8:	andeq	r7, r2, r8, asr #16
   26fec:	strdeq	r8, [r2], -ip
   26ff0:	andeq	r7, r2, r8, lsl #13
   26ff4:	andeq	r7, r2, r8, lsl #13
   26ff8:	andeq	r8, r2, r4, ror #15
   26ffc:	andeq	r9, r2, r8, ror r9
   27000:	andeq	r8, r2, r8, lsl #15
   27004:	andeq	r8, r2, r4, lsr pc
   27008:	muleq	r2, r8, lr
   2700c:	andeq	r8, r2, ip, asr #28
   27010:	andeq	r8, r2, r4, ror #27
   27014:	andeq	r8, r2, ip, ror sl
   27018:	andeq	r8, r2, r0, lsr sl
   2701c:	andeq	r9, r2, r8, ror r9
   27020:	andeq	r9, r2, r8, ror r9
   27024:	andeq	r9, r2, r8, ror r9
   27028:	ldrdeq	r8, [r2], -r4
   2702c:	andeq	r9, r2, r8, ror r9
   27030:	andeq	r8, r2, r4, lsl #10
   27034:	ldrdeq	r8, [r2], -r0
   27038:	andeq	r8, r2, ip, ror r3
   2703c:	andeq	r8, r2, r0, asr #16
   27040:	andeq	r8, r2, ip, lsr #26
   27044:	ldr	r8, [sp, #28]
   27048:	ldr	r1, [r9, #48]	; 0x30
   2704c:	ldrd	r6, [r8, #128]	; 0x80
   27050:	ldrd	r2, [r8, #136]	; 0x88
   27054:	ldr	r0, [r8, #144]	; 0x90
   27058:	strd	r6, [sp, #72]	; 0x48
   2705c:	ldrd	r6, [r9, #40]	; 0x28
   27060:	adds	r1, r0, r1
   27064:	movvs	ip, #1
   27068:	movvc	ip, #0
   2706c:	adds	r0, r2, r6
   27070:	str	r1, [r8, #144]	; 0x90
   27074:	adcs	r1, r3, r7
   27078:	ldrd	r6, [r8, #120]	; 0x78
   2707c:	movvs	r3, #1
   27080:	movvc	r3, #0
   27084:	strd	r0, [r8, #136]	; 0x88
   27088:	orr	ip, ip, r3
   2708c:	ldrd	r0, [r9, #32]
   27090:	strd	r6, [sp, #120]	; 0x78
   27094:	ldrd	r6, [sp, #72]	; 0x48
   27098:	adds	r2, r6, r0
   2709c:	adcs	r3, r7, r1
   270a0:	ldrd	r6, [r8, #112]	; 0x70
   270a4:	movvs	lr, #1
   270a8:	movvc	lr, #0
   270ac:	ldrd	r0, [r9, #24]
   270b0:	orr	ip, ip, lr
   270b4:	strd	r2, [r8, #128]	; 0x80
   270b8:	strd	r6, [sp, #128]	; 0x80
   270bc:	ldrd	r6, [sp, #120]	; 0x78
   270c0:	adds	r2, r6, r0
   270c4:	adcs	r3, r7, r1
   270c8:	ldrd	r6, [sp, #128]	; 0x80
   270cc:	movvs	r1, #1
   270d0:	movvc	r1, #0
   270d4:	orr	ip, ip, r1
   270d8:	strd	r2, [r8, #120]	; 0x78
   270dc:	ldrd	r0, [r9, #16]
   270e0:	ldrd	r2, [r8, #104]	; 0x68
   270e4:	strd	r2, [sp, #72]	; 0x48
   270e8:	adds	r2, r6, r0
   270ec:	adcs	r3, r7, r1
   270f0:	ldrd	r0, [r9, #8]
   270f4:	movvs	lr, #1
   270f8:	movvc	lr, #0
   270fc:	strd	r2, [r8, #112]	; 0x70
   27100:	orr	ip, ip, lr
   27104:	ldrd	r6, [sp, #72]	; 0x48
   27108:	ldrd	r2, [r8, #96]	; 0x60
   2710c:	ldr	lr, [r9, #-56]	; 0xffffffc8
   27110:	strd	r2, [sp, #120]	; 0x78
   27114:	adds	r2, r6, r0
   27118:	adcs	r3, r7, r1
   2711c:	ldrd	r6, [sp, #120]	; 0x78
   27120:	movvs	r1, #1
   27124:	movvc	r1, #0
   27128:	strd	r2, [r8, #104]	; 0x68
   2712c:	str	r1, [sp, #72]	; 0x48
   27130:	ldrd	r0, [r9]
   27134:	str	lr, [r8, #24]
   27138:	adds	r2, r6, r0
   2713c:	adcs	r3, r7, r1
   27140:	ldr	r1, [sp, #72]	; 0x48
   27144:	strd	r2, [r8, #96]	; 0x60
   27148:	orrvc	r0, ip, r1
   2714c:	movvs	r0, #1
   27150:	cmp	r0, #0
   27154:	beq	28758 <__assert_fail@plt+0x16164>
   27158:	mov	r0, #1
   2715c:	add	sp, sp, #1536	; 0x600
   27160:	add	sp, sp, #4
   27164:	ldrd	r4, [sp]
   27168:	ldrd	r6, [sp, #8]
   2716c:	ldrd	r8, [sp, #16]
   27170:	ldrd	sl, [sp, #24]
   27174:	add	sp, sp, #32
   27178:	pop	{pc}		; (ldr pc, [sp], #4)
   2717c:	mov	r3, #0
   27180:	mov	r1, r3
   27184:	str	r3, [sp, #24]
   27188:	b	26c84 <__assert_fail@plt+0x14690>
   2718c:	mvn	r3, #1
   27190:	str	r3, [sp, #24]
   27194:	b	26d94 <__assert_fail@plt+0x147a0>
   27198:	ldr	lr, [sp, #28]
   2719c:	ldr	r2, [lr]
   271a0:	ldrb	r3, [r2]
   271a4:	cmp	r3, #9
   271a8:	bcc	271d0 <__assert_fail@plt+0x14bdc>
   271ac:	cmp	r3, #13
   271b0:	bls	271bc <__assert_fail@plt+0x14bc8>
   271b4:	cmp	r3, #32
   271b8:	bne	271d0 <__assert_fail@plt+0x14bdc>
   271bc:	add	r2, r2, #1
   271c0:	str	r2, [lr]
   271c4:	ldrb	r3, [r2]
   271c8:	cmp	r3, #9
   271cc:	bcs	271ac <__assert_fail@plt+0x14bb8>
   271d0:	sub	ip, r3, #48	; 0x30
   271d4:	sub	r1, r3, #43	; 0x2b
   271d8:	cmp	ip, #9
   271dc:	and	r1, r1, #253	; 0xfd
   271e0:	bls	27254 <__assert_fail@plt+0x14c60>
   271e4:	cmp	r1, #0
   271e8:	beq	273e0 <__assert_fail@plt+0x14dec>
   271ec:	cmp	r3, #65	; 0x41
   271f0:	bcc	27208 <__assert_fail@plt+0x14c14>
   271f4:	cmp	r3, #90	; 0x5a
   271f8:	bls	27514 <__assert_fail@plt+0x14f20>
   271fc:	sub	r1, r3, #97	; 0x61
   27200:	cmp	r1, #25
   27204:	bls	27440 <__assert_fail@plt+0x14e4c>
   27208:	cmp	r3, #40	; 0x28
   2720c:	bne	2978c <__assert_fail@plt+0x17198>
   27210:	mov	r3, #0
   27214:	b	27238 <__assert_fail@plt+0x14c44>
   27218:	cmp	r1, #40	; 0x28
   2721c:	addeq	r3, r3, #1
   27220:	beq	2722c <__assert_fail@plt+0x14c38>
   27224:	cmp	r1, #41	; 0x29
   27228:	subeq	r3, r3, #1
   2722c:	cmp	r3, #0
   27230:	beq	29060 <__assert_fail@plt+0x16a6c>
   27234:	mov	r2, r0
   27238:	add	r0, r2, #1
   2723c:	str	r0, [lr]
   27240:	ldrb	r1, [r0, #-1]
   27244:	cmp	r1, #0
   27248:	bne	27218 <__assert_fail@plt+0x14c24>
   2724c:	str	r1, [sp, #24]
   27250:	b	26c84 <__assert_fail@plt+0x14690>
   27254:	sub	r0, r3, #45	; 0x2d
   27258:	cmp	r1, #0
   2725c:	clz	r0, r0
   27260:	lsr	r0, r0, #5
   27264:	bne	290cc <__assert_fail@plt+0x16ad8>
   27268:	cmp	r0, #0
   2726c:	moveq	r6, #1
   27270:	mvnne	r6, #0
   27274:	add	r2, r2, #1
   27278:	str	r2, [lr]
   2727c:	ldrb	r3, [r2]
   27280:	cmp	r3, #9
   27284:	bcc	27298 <__assert_fail@plt+0x14ca4>
   27288:	cmp	r3, #13
   2728c:	bls	27274 <__assert_fail@plt+0x14c80>
   27290:	cmp	r3, #32
   27294:	beq	27274 <__assert_fail@plt+0x14c80>
   27298:	sub	ip, r3, #48	; 0x30
   2729c:	cmp	ip, #9
   272a0:	bhi	271a4 <__assert_fail@plt+0x14bb0>
   272a4:	mov	lr, #0
   272a8:	mov	r7, #10
   272ac:	cmn	r6, #1
   272b0:	rsbeq	ip, r3, #48	; 0x30
   272b4:	add	r3, r2, #1
   272b8:	adds	r4, lr, ip
   272bc:	str	r3, [sp, #24]
   272c0:	bvs	273d0 <__assert_fail@plt+0x14ddc>
   272c4:	ldrb	r3, [r2, #1]
   272c8:	smull	r0, r1, r4, r7
   272cc:	mov	lr, r0
   272d0:	sub	ip, r3, #48	; 0x30
   272d4:	cmp	ip, #9
   272d8:	bls	273c4 <__assert_fail@plt+0x14dd0>
   272dc:	and	r3, r3, #253	; 0xfd
   272e0:	cmp	r3, #44	; 0x2c
   272e4:	bne	273f0 <__assert_fail@plt+0x14dfc>
   272e8:	ldr	r3, [sp, #24]
   272ec:	ldrb	r3, [r3, #1]
   272f0:	sub	r3, r3, #48	; 0x30
   272f4:	cmp	r3, #9
   272f8:	bhi	273f0 <__assert_fail@plt+0x14dfc>
   272fc:	ldrb	ip, [r2, #3]
   27300:	mov	r0, #8
   27304:	add	r2, r2, #3
   27308:	sub	r1, ip, #48	; 0x30
   2730c:	add	r3, r3, r3, lsl #2
   27310:	cmp	r1, #9
   27314:	mov	lr, r1
   27318:	lsl	r3, r3, #1
   2731c:	bhi	27334 <__assert_fail@plt+0x14d40>
   27320:	ldrb	ip, [r2, #1]
   27324:	add	r3, r3, r1
   27328:	add	r2, r2, #1
   2732c:	sub	r1, ip, #48	; 0x30
   27330:	mov	lr, r1
   27334:	subs	r0, r0, #1
   27338:	bne	2730c <__assert_fail@plt+0x14d18>
   2733c:	cmn	r6, #1
   27340:	beq	27810 <__assert_fail@plt+0x1521c>
   27344:	cmp	lr, #9
   27348:	bhi	2735c <__assert_fail@plt+0x14d68>
   2734c:	ldrb	r1, [r2, #1]!
   27350:	sub	r1, r1, #48	; 0x30
   27354:	cmp	r1, #9
   27358:	bls	2734c <__assert_fail@plt+0x14d58>
   2735c:	adds	r1, r3, #0
   27360:	movne	r1, #1
   27364:	ands	r1, r1, r6, lsr #31
   27368:	bne	28f90 <__assert_fail@plt+0x1699c>
   2736c:	cmp	r6, #0
   27370:	movw	r0, #277	; 0x115
   27374:	str	r4, [sp, #304]	; 0x130
   27378:	str	r3, [sp, #308]	; 0x134
   2737c:	movne	r0, #276	; 0x114
   27380:	moveq	r1, #22
   27384:	ldr	r3, [sp, #28]
   27388:	movne	r1, #21
   2738c:	str	r0, [sp, #24]
   27390:	str	r2, [r3]
   27394:	b	273bc <__assert_fail@plt+0x14dc8>
   27398:	movw	r1, #273	; 0x111
   2739c:	mov	r2, #3600	; 0xe10
   273a0:	mov	r3, #0
   273a4:	str	r1, [sp, #24]
   273a8:	add	r1, sp, #304	; 0x130
   273ac:	strd	r2, [r1]
   273b0:	ldr	r3, [sp, #24]
   273b4:	add	r3, sl, r3
   273b8:	ldrb	r1, [r3, #1796]	; 0x704
   273bc:	add	r4, r5, r1
   273c0:	b	26c84 <__assert_fail@plt+0x14690>
   273c4:	cmp	r1, r0, asr #31
   273c8:	ldr	r2, [sp, #24]
   273cc:	beq	272ac <__assert_fail@plt+0x14cb8>
   273d0:	mov	r3, #63	; 0x3f
   273d4:	mov	r1, #2
   273d8:	str	r3, [sp, #24]
   273dc:	b	273bc <__assert_fail@plt+0x14dc8>
   273e0:	sub	r0, r3, #45	; 0x2d
   273e4:	clz	r0, r0
   273e8:	lsr	r0, r0, #5
   273ec:	b	27268 <__assert_fail@plt+0x14c74>
   273f0:	ldr	ip, [sp, #24]
   273f4:	cmp	r6, #0
   273f8:	movw	r1, #275	; 0x113
   273fc:	movw	r0, #274	; 0x112
   27400:	lsr	r2, r6, #31
   27404:	movne	r1, #19
   27408:	ldr	r3, [sp, #28]
   2740c:	strb	r2, [sp, #304]	; 0x130
   27410:	mov	r2, r4
   27414:	ldr	lr, [r3]
   27418:	str	ip, [r3]
   2741c:	moveq	r3, r1
   27420:	movne	r3, r0
   27424:	moveq	r1, #20
   27428:	str	r3, [sp, #24]
   2742c:	asr	r3, r4, #31
   27430:	strd	r2, [sp, #88]	; 0x58
   27434:	sub	r3, ip, lr
   27438:	str	r3, [sp, #232]	; 0xe8
   2743c:	b	273bc <__assert_fail@plt+0x14dc8>
   27440:	add	r6, sp, #244	; 0xf4
   27444:	add	ip, sp, #256	; 0x100
   27448:	mov	r1, r6
   2744c:	add	ip, ip, #7
   27450:	mov	r0, r1
   27454:	cmp	r1, ip
   27458:	add	r2, r2, #1
   2745c:	strbcc	r3, [r0], #1
   27460:	movcc	r1, r0
   27464:	ldr	r3, [sp, #28]
   27468:	str	r2, [r3]
   2746c:	ldrb	r3, [r2]
   27470:	cmp	r3, #65	; 0x41
   27474:	sub	r0, r3, #97	; 0x61
   27478:	bcc	2748c <__assert_fail@plt+0x14e98>
   2747c:	cmp	r3, #90	; 0x5a
   27480:	bls	27450 <__assert_fail@plt+0x14e5c>
   27484:	cmp	r0, #25
   27488:	bls	27450 <__assert_fail@plt+0x14e5c>
   2748c:	cmp	r3, #46	; 0x2e
   27490:	beq	27450 <__assert_fail@plt+0x14e5c>
   27494:	mov	r3, #0
   27498:	strb	r3, [r1]
   2749c:	ldrb	r3, [sp, #244]	; 0xf4
   274a0:	cmp	r3, #0
   274a4:	movne	r2, r6
   274a8:	beq	274cc <__assert_fail@plt+0x14ed8>
   274ac:	sub	r1, r3, #97	; 0x61
   274b0:	sub	r0, r3, #32
   274b4:	cmp	r1, #25
   274b8:	uxtbls	r3, r0
   274bc:	strb	r3, [r2]
   274c0:	ldrb	r3, [r2, #1]!
   274c4:	cmp	r3, #0
   274c8:	bne	274ac <__assert_fail@plt+0x14eb8>
   274cc:	movw	r1, #31344	; 0x7a70
   274d0:	movt	r1, #4
   274d4:	ldr	r7, [pc, #4068]	; 284c0 <__assert_fail@plt+0x15ecc>
   274d8:	b	274e8 <__assert_fail@plt+0x14ef4>
   274dc:	ldr	r1, [r7, #12]!
   274e0:	cmp	r1, #0
   274e4:	beq	28fc0 <__assert_fail@plt+0x169cc>
   274e8:	mov	r0, r6
   274ec:	bl	11f40 <strcmp@plt>
   274f0:	cmp	r0, #0
   274f4:	bne	274dc <__assert_fail@plt+0x14ee8>
   274f8:	ldr	r3, [r7, #4]
   274fc:	ldr	r2, [r7, #8]
   27500:	str	r3, [sp, #24]
   27504:	asr	r3, r2, #31
   27508:	add	r1, sp, #304	; 0x130
   2750c:	strd	r2, [r1]
   27510:	b	26c64 <__assert_fail@plt+0x14670>
   27514:	add	ip, sp, #256	; 0x100
   27518:	sub	r6, ip, #12
   2751c:	mov	r1, r6
   27520:	b	2744c <__assert_fail@plt+0x14e58>
   27524:	ldrd	r0, [r9, #56]	; 0x38
   27528:	add	r5, sp, #368	; 0x170
   2752c:	mov	r3, fp
   27530:	mov	r4, r5
   27534:	str	r9, [sp, #72]	; 0x48
   27538:	mvn	r2, #27
   2753c:	ldrd	r6, [r9, #64]	; 0x40
   27540:	ldr	ip, [r9, #64]	; 0x40
   27544:	strd	r0, [r5, #-8]
   27548:	ldrd	r0, [r9, #80]	; 0x50
   2754c:	strd	r6, [r4], #-8
   27550:	ldrd	r6, [r9, #88]	; 0x58
   27554:	str	ip, [sp, #40]	; 0x28
   27558:	ldr	ip, [r9, #68]	; 0x44
   2755c:	strd	r0, [r4, #24]
   27560:	ldrd	r0, [r9, #104]	; 0x68
   27564:	strd	r6, [r4, #32]
   27568:	ldrd	r6, [r9, #72]	; 0x48
   2756c:	str	ip, [sp, #44]	; 0x2c
   27570:	strd	r0, [r4, #48]	; 0x30
   27574:	ldr	r1, [r9, #72]	; 0x48
   27578:	strd	r6, [r4, #16]
   2757c:	ldrd	r6, [r9, #96]	; 0x60
   27580:	str	r1, [sp, #48]	; 0x30
   27584:	ldr	r1, [r9, #76]	; 0x4c
   27588:	mov	r0, r6
   2758c:	strd	r6, [r4, #40]	; 0x28
   27590:	str	r1, [sp, #52]	; 0x34
   27594:	ldr	r1, [r9, #80]	; 0x50
   27598:	str	r1, [sp, #64]	; 0x40
   2759c:	ldr	r1, [r9, #84]	; 0x54
   275a0:	str	r1, [sp, #68]	; 0x44
   275a4:	ldr	r1, [r9, #88]	; 0x58
   275a8:	str	r1, [sp, #56]	; 0x38
   275ac:	ldr	r1, [r9, #92]	; 0x5c
   275b0:	str	r1, [sp, #60]	; 0x3c
   275b4:	mov	r1, r7
   275b8:	strd	r0, [sp, #16]
   275bc:	ldr	r1, [r9, #104]	; 0x68
   275c0:	str	r1, [sp, #32]
   275c4:	ldr	r1, [sp, #32]
   275c8:	ldr	lr, [sp, #72]	; 0x48
   275cc:	ldrsh	ip, [r3]
   275d0:	str	r1, [sp, #408]	; 0x198
   275d4:	ldr	r1, [sp, #40]	; 0x28
   275d8:	add	r9, lr, #56	; 0x38
   275dc:	add	r8, ip, r8
   275e0:	cmp	r8, #112	; 0x70
   275e4:	str	r1, [r5]
   275e8:	ldr	r1, [sp, #44]	; 0x2c
   275ec:	str	r1, [r5, #4]
   275f0:	ldr	r1, [sp, #48]	; 0x30
   275f4:	str	r1, [r5, #8]
   275f8:	ldr	r1, [sp, #52]	; 0x34
   275fc:	str	r1, [r5, #12]
   27600:	ldr	r1, [sp, #64]	; 0x40
   27604:	str	r1, [r5, #16]
   27608:	ldr	r1, [sp, #68]	; 0x44
   2760c:	str	r1, [r5, #20]
   27610:	ldr	r1, [sp, #56]	; 0x38
   27614:	str	r1, [r5, #24]
   27618:	ldr	r1, [sp, #60]	; 0x3c
   2761c:	str	r1, [r5, #28]
   27620:	ldrd	r0, [sp, #16]
   27624:	strd	r0, [r5, #32]
   27628:	ldrd	r0, [r4]
   2762c:	ldrd	r6, [r4, #24]
   27630:	strd	r0, [lr, #56]	; 0x38
   27634:	ldrd	r0, [r4, #8]
   27638:	strd	r0, [r9, #8]
   2763c:	ldrd	r0, [r4, #32]
   27640:	strd	r0, [r9, #32]
   27644:	ldrd	r0, [r4, #16]
   27648:	strd	r0, [r9, #16]
   2764c:	ldrd	r0, [r4, #40]	; 0x28
   27650:	strd	r0, [r9, #40]	; 0x28
   27654:	ldrd	r0, [r4, #48]	; 0x30
   27658:	strd	r6, [r9, #24]
   2765c:	strd	r0, [r9, #48]	; 0x30
   27660:	bhi	27678 <__assert_fail@plt+0x15084>
   27664:	add	r8, sl, r8
   27668:	movw	r1, #2076	; 0x81c
   2766c:	ldrsb	r1, [r8, r1]
   27670:	cmp	r1, ip
   27674:	beq	28f80 <__assert_fail@plt+0x1698c>
   27678:	add	r2, sl, r2
   2767c:	movw	r1, #2636	; 0xa4c
   27680:	ldrsb	r8, [r2, r1]
   27684:	b	26d30 <__assert_fail@plt+0x1473c>
   27688:	mov	r1, #0
   2768c:	mov	r2, #56	; 0x38
   27690:	mov	r0, r4
   27694:	mov	r6, r1
   27698:	str	r1, [sp, #56]	; 0x38
   2769c:	bl	12378 <memset@plt>
   276a0:	ldr	r1, [r9, #-56]	; 0xffffffc8
   276a4:	sub	r2, r9, #112	; 0x70
   276a8:	sub	r3, fp, #4
   276ac:	str	r6, [sp, #40]	; 0x28
   276b0:	ldr	r0, [r9, #-52]	; 0xffffffcc
   276b4:	asr	r9, r1, #31
   276b8:	mov	r8, r1
   276bc:	str	r6, [sp, #44]	; 0x2c
   276c0:	strd	r8, [sp, #16]
   276c4:	mvn	r8, #92	; 0x5c
   276c8:	str	r0, [sp, #32]
   276cc:	str	r6, [sp, #48]	; 0x30
   276d0:	str	r6, [sp, #52]	; 0x34
   276d4:	str	r6, [sp, #60]	; 0x3c
   276d8:	str	r6, [sp, #64]	; 0x40
   276dc:	str	r6, [sp, #68]	; 0x44
   276e0:	str	r2, [sp, #72]	; 0x48
   276e4:	mov	r2, #17
   276e8:	b	275c4 <__assert_fail@plt+0x14fd0>
   276ec:	ldr	r8, [sp, #28]
   276f0:	ldr	r1, [r9, #48]	; 0x30
   276f4:	ldrd	r6, [r8, #128]	; 0x80
   276f8:	ldrd	r2, [r8, #136]	; 0x88
   276fc:	ldr	r0, [r8, #144]	; 0x90
   27700:	strd	r6, [sp, #72]	; 0x48
   27704:	ldrd	r6, [r9, #40]	; 0x28
   27708:	adds	r1, r0, r1
   2770c:	movvs	ip, #1
   27710:	movvc	ip, #0
   27714:	adds	r0, r2, r6
   27718:	str	r1, [r8, #144]	; 0x90
   2771c:	adcs	r1, r3, r7
   27720:	ldrd	r6, [r8, #120]	; 0x78
   27724:	movvs	r3, #1
   27728:	movvc	r3, #0
   2772c:	strd	r0, [r8, #136]	; 0x88
   27730:	orr	ip, ip, r3
   27734:	ldrd	r0, [r9, #32]
   27738:	strd	r6, [sp, #120]	; 0x78
   2773c:	ldrd	r6, [sp, #72]	; 0x48
   27740:	adds	r2, r6, r0
   27744:	adcs	r3, r7, r1
   27748:	ldrd	r6, [r8, #112]	; 0x70
   2774c:	movvs	lr, #1
   27750:	movvc	lr, #0
   27754:	ldrd	r0, [r9, #24]
   27758:	orr	ip, ip, lr
   2775c:	strd	r2, [r8, #128]	; 0x80
   27760:	strd	r6, [sp, #128]	; 0x80
   27764:	ldrd	r6, [sp, #120]	; 0x78
   27768:	adds	r2, r6, r0
   2776c:	adcs	r3, r7, r1
   27770:	ldrd	r6, [sp, #128]	; 0x80
   27774:	movvs	r1, #1
   27778:	movvc	r1, #0
   2777c:	orr	ip, ip, r1
   27780:	strd	r2, [r8, #120]	; 0x78
   27784:	ldrd	r0, [r9, #16]
   27788:	ldrd	r2, [r8, #104]	; 0x68
   2778c:	strd	r2, [sp, #72]	; 0x48
   27790:	adds	r2, r6, r0
   27794:	adcs	r3, r7, r1
   27798:	ldrd	r6, [r8, #96]	; 0x60
   2779c:	movvs	lr, #1
   277a0:	movvc	lr, #0
   277a4:	ldrd	r0, [r9, #8]
   277a8:	orr	ip, ip, lr
   277ac:	strd	r2, [r8, #112]	; 0x70
   277b0:	strd	r6, [sp, #120]	; 0x78
   277b4:	ldrd	r6, [sp, #72]	; 0x48
   277b8:	adds	r2, r6, r0
   277bc:	adcs	r3, r7, r1
   277c0:	ldrd	r0, [r9]
   277c4:	movvs	lr, #1
   277c8:	movvc	lr, #0
   277cc:	ldrd	r6, [sp, #120]	; 0x78
   277d0:	strd	r2, [r8, #104]	; 0x68
   277d4:	adds	r2, r6, r0
   277d8:	adcs	r3, r7, r1
   277dc:	orrvc	ip, ip, lr
   277e0:	movvs	ip, #1
   277e4:	cmp	ip, #0
   277e8:	strd	r2, [r8, #96]	; 0x60
   277ec:	bne	27158 <__assert_fail@plt+0x14b64>
   277f0:	sub	r3, r9, #56	; 0x38
   277f4:	mov	r1, #1
   277f8:	mov	r2, #16
   277fc:	str	r3, [sp, #72]	; 0x48
   27800:	sub	r3, fp, #2
   27804:	strb	r1, [r8, #153]	; 0x99
   27808:	mvn	r8, #92	; 0x5c
   2780c:	b	275c4 <__assert_fail@plt+0x14fd0>
   27810:	cmp	r1, #9
   27814:	bhi	28f88 <__assert_fail@plt+0x16994>
   27818:	cmp	ip, #48	; 0x30
   2781c:	bne	27838 <__assert_fail@plt+0x15244>
   27820:	ldrb	r1, [r2, #1]!
   27824:	sub	r0, r1, #48	; 0x30
   27828:	cmp	r0, #9
   2782c:	bhi	28f88 <__assert_fail@plt+0x16994>
   27830:	cmp	r1, #48	; 0x30
   27834:	beq	27820 <__assert_fail@plt+0x1522c>
   27838:	ldrb	lr, [r2]
   2783c:	add	r3, r3, #1
   27840:	sub	lr, lr, #48	; 0x30
   27844:	b	27344 <__assert_fail@plt+0x14d50>
   27848:	mov	r1, #0
   2784c:	mov	r2, #56	; 0x38
   27850:	mov	r6, r1
   27854:	mov	r7, r1
   27858:	mov	r0, r4
   2785c:	strd	r6, [sp, #56]	; 0x38
   27860:	str	r1, [sp, #64]	; 0x40
   27864:	bl	12378 <memset@plt>
   27868:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   2786c:	mov	r2, r6
   27870:	sub	r3, fp, #4
   27874:	str	r6, [sp, #48]	; 0x30
   27878:	mvn	r8, #92	; 0x5c
   2787c:	strd	r0, [sp, #16]
   27880:	str	r2, [sp, #40]	; 0x28
   27884:	sub	r2, r9, #112	; 0x70
   27888:	str	r7, [sp, #32]
   2788c:	str	r7, [sp, #44]	; 0x2c
   27890:	str	r7, [sp, #52]	; 0x34
   27894:	str	r7, [sp, #68]	; 0x44
   27898:	str	r2, [sp, #72]	; 0x48
   2789c:	mov	r2, #17
   278a0:	b	275c4 <__assert_fail@plt+0x14fd0>
   278a4:	mov	r6, #0
   278a8:	mov	r7, #0
   278ac:	mov	r2, #56	; 0x38
   278b0:	mov	r1, #0
   278b4:	mov	r0, r4
   278b8:	strd	r6, [sp, #16]
   278bc:	bl	12378 <memset@plt>
   278c0:	ldr	r2, [r9, #-56]	; 0xffffffc8
   278c4:	sub	r3, fp, #4
   278c8:	str	r6, [sp, #40]	; 0x28
   278cc:	str	r7, [sp, #44]	; 0x2c
   278d0:	str	r6, [sp, #48]	; 0x30
   278d4:	str	r7, [sp, #52]	; 0x34
   278d8:	str	r2, [sp, #56]	; 0x38
   278dc:	ldr	r2, [r9, #-52]	; 0xffffffcc
   278e0:	str	r2, [sp, #60]	; 0x3c
   278e4:	str	r6, [sp, #64]	; 0x40
   278e8:	str	r7, [sp, #68]	; 0x44
   278ec:	sub	r2, r9, #112	; 0x70
   278f0:	mov	r1, #0
   278f4:	mvn	r8, #92	; 0x5c
   278f8:	str	r1, [sp, #32]
   278fc:	str	r2, [sp, #72]	; 0x48
   27900:	mov	r2, #17
   27904:	b	275c4 <__assert_fail@plt+0x14fd0>
   27908:	mov	r6, #0
   2790c:	mov	r7, #0
   27910:	sub	r3, r9, #56	; 0x38
   27914:	mov	r2, #56	; 0x38
   27918:	mov	r1, #0
   2791c:	mov	r0, r4
   27920:	strd	r6, [sp, #16]
   27924:	str	r6, [sp, #56]	; 0x38
   27928:	mvn	r8, #92	; 0x5c
   2792c:	str	r3, [sp, #72]	; 0x48
   27930:	bl	12378 <memset@plt>
   27934:	mov	r1, #0
   27938:	sub	r3, fp, #2
   2793c:	mov	r2, #17
   27940:	str	r6, [sp, #40]	; 0x28
   27944:	str	r7, [sp, #44]	; 0x2c
   27948:	str	r6, [sp, #48]	; 0x30
   2794c:	mov	r6, #1
   27950:	str	r7, [sp, #52]	; 0x34
   27954:	str	r7, [sp, #60]	; 0x3c
   27958:	mov	r7, #0
   2795c:	str	r1, [sp, #32]
   27960:	strd	r6, [sp, #64]	; 0x40
   27964:	b	275c4 <__assert_fail@plt+0x14fd0>
   27968:	mov	r6, #0
   2796c:	mov	r7, #0
   27970:	mov	r2, #56	; 0x38
   27974:	mov	r1, #0
   27978:	mov	r0, r4
   2797c:	strd	r6, [sp, #16]
   27980:	bl	12378 <memset@plt>
   27984:	ldr	r2, [r9, #-48]	; 0xffffffd0
   27988:	sub	r3, fp, #4
   2798c:	str	r6, [sp, #40]	; 0x28
   27990:	str	r7, [sp, #44]	; 0x2c
   27994:	str	r6, [sp, #48]	; 0x30
   27998:	str	r7, [sp, #52]	; 0x34
   2799c:	str	r6, [sp, #56]	; 0x38
   279a0:	str	r2, [sp, #64]	; 0x40
   279a4:	ldr	r2, [r9, #-44]	; 0xffffffd4
   279a8:	str	r7, [sp, #60]	; 0x3c
   279ac:	str	r2, [sp, #68]	; 0x44
   279b0:	b	278ec <__assert_fail@plt+0x152f8>
   279b4:	mov	r6, #0
   279b8:	mov	r7, #0
   279bc:	mov	r2, #56	; 0x38
   279c0:	mov	r1, #0
   279c4:	mov	r0, r4
   279c8:	strd	r6, [sp, #16]
   279cc:	bl	12378 <memset@plt>
   279d0:	ldr	r2, [r9, #-56]	; 0xffffffc8
   279d4:	sub	r3, fp, #4
   279d8:	str	r6, [sp, #40]	; 0x28
   279dc:	str	r7, [sp, #44]	; 0x2c
   279e0:	str	r6, [sp, #48]	; 0x30
   279e4:	str	r7, [sp, #52]	; 0x34
   279e8:	str	r6, [sp, #56]	; 0x38
   279ec:	str	r2, [sp, #64]	; 0x40
   279f0:	ldr	r2, [r9, #-52]	; 0xffffffcc
   279f4:	str	r7, [sp, #60]	; 0x3c
   279f8:	str	r2, [sp, #68]	; 0x44
   279fc:	b	278ec <__assert_fail@plt+0x152f8>
   27a00:	mov	r2, #56	; 0x38
   27a04:	mov	r1, #0
   27a08:	mov	r0, r4
   27a0c:	mov	r8, #0
   27a10:	bl	12378 <memset@plt>
   27a14:	mov	r3, r9
   27a18:	mov	r2, #17
   27a1c:	str	r8, [sp, #40]	; 0x28
   27a20:	ldrd	r0, [r3], #-56	; 0xffffffc8
   27a24:	mov	r9, #0
   27a28:	strd	r8, [sp, #16]
   27a2c:	str	r9, [sp, #44]	; 0x2c
   27a30:	str	r8, [sp, #56]	; 0x38
   27a34:	str	r9, [sp, #60]	; 0x3c
   27a38:	str	r3, [sp, #72]	; 0x48
   27a3c:	sub	r3, fp, #2
   27a40:	str	r8, [sp, #64]	; 0x40
   27a44:	str	r9, [sp, #68]	; 0x44
   27a48:	strd	r0, [sp, #48]	; 0x30
   27a4c:	mov	r1, #0
   27a50:	mvn	r8, #92	; 0x5c
   27a54:	str	r1, [sp, #32]
   27a58:	b	275c4 <__assert_fail@plt+0x14fd0>
   27a5c:	mov	r2, #56	; 0x38
   27a60:	mov	r1, #0
   27a64:	mov	r0, r4
   27a68:	bl	12378 <memset@plt>
   27a6c:	ldr	r0, [r9, #-48]	; 0xffffffd0
   27a70:	mov	r3, #0
   27a74:	ldr	ip, [r9, #-44]	; 0xffffffd4
   27a78:	str	r3, [sp, #40]	; 0x28
   27a7c:	ldr	r2, [r9]
   27a80:	ldr	r3, [r9, #4]
   27a84:	cmp	ip, r0, asr #31
   27a88:	asr	r1, r2, #31
   27a8c:	bne	29658 <__assert_fail@plt+0x17064>
   27a90:	cmp	r1, r3
   27a94:	bne	29550 <__assert_fail@plt+0x16f5c>
   27a98:	smull	r2, r3, r0, r2
   27a9c:	strd	r2, [sp, #104]	; 0x68
   27aa0:	ldr	r2, [sp, #40]	; 0x28
   27aa4:	ldrd	r0, [sp, #104]	; 0x68
   27aa8:	cmp	r2, #0
   27aac:	str	r0, [sp, #48]	; 0x30
   27ab0:	str	r1, [sp, #52]	; 0x34
   27ab4:	bne	27158 <__assert_fail@plt+0x14b64>
   27ab8:	sub	r3, r9, #112	; 0x70
   27abc:	mov	r0, #0
   27ac0:	str	r2, [sp, #32]
   27ac4:	mov	r1, #0
   27ac8:	str	r3, [sp, #72]	; 0x48
   27acc:	sub	r3, fp, #4
   27ad0:	strd	r0, [sp, #16]
   27ad4:	str	r0, [sp, #56]	; 0x38
   27ad8:	str	r1, [sp, #60]	; 0x3c
   27adc:	str	r0, [sp, #64]	; 0x40
   27ae0:	str	r1, [sp, #68]	; 0x44
   27ae4:	mvn	r8, #92	; 0x5c
   27ae8:	mov	r2, #17
   27aec:	str	r0, [sp, #40]	; 0x28
   27af0:	str	r1, [sp, #44]	; 0x2c
   27af4:	b	275c4 <__assert_fail@plt+0x14fd0>
   27af8:	mov	r2, #56	; 0x38
   27afc:	mov	r1, #0
   27b00:	mov	r0, r4
   27b04:	bl	12378 <memset@plt>
   27b08:	ldr	r6, [r9, #-56]	; 0xffffffc8
   27b0c:	mov	r3, #0
   27b10:	ldr	r8, [r9, #-52]	; 0xffffffcc
   27b14:	str	r3, [sp, #32]
   27b18:	ldr	r2, [r9]
   27b1c:	ldr	r3, [r9, #4]
   27b20:	cmp	r8, r6, asr #31
   27b24:	asr	r1, r2, #31
   27b28:	bne	29678 <__assert_fail@plt+0x17084>
   27b2c:	cmp	r1, r3
   27b30:	bne	295e0 <__assert_fail@plt+0x16fec>
   27b34:	smull	r2, r3, r6, r2
   27b38:	strd	r2, [sp, #96]	; 0x60
   27b3c:	ldr	r2, [sp, #32]
   27b40:	ldrd	r0, [sp, #96]	; 0x60
   27b44:	cmp	r2, #0
   27b48:	str	r0, [sp, #48]	; 0x30
   27b4c:	str	r1, [sp, #52]	; 0x34
   27b50:	bne	27158 <__assert_fail@plt+0x14b64>
   27b54:	sub	r3, r9, #112	; 0x70
   27b58:	mov	r0, #0
   27b5c:	mov	r1, #0
   27b60:	strd	r0, [sp, #16]
   27b64:	str	r3, [sp, #72]	; 0x48
   27b68:	sub	r3, fp, #4
   27b6c:	b	27ad4 <__assert_fail@plt+0x154e0>
   27b70:	mov	r6, #0
   27b74:	mov	r7, #0
   27b78:	sub	r3, r9, #56	; 0x38
   27b7c:	mov	r2, #56	; 0x38
   27b80:	mov	r1, #0
   27b84:	mov	r0, r4
   27b88:	strd	r6, [sp, #16]
   27b8c:	str	r6, [sp, #56]	; 0x38
   27b90:	mvn	r8, #92	; 0x5c
   27b94:	str	r3, [sp, #72]	; 0x48
   27b98:	bl	12378 <memset@plt>
   27b9c:	mov	r1, #0
   27ba0:	sub	r3, fp, #2
   27ba4:	mov	r2, #17
   27ba8:	str	r6, [sp, #48]	; 0x30
   27bac:	str	r7, [sp, #52]	; 0x34
   27bb0:	str	r7, [sp, #60]	; 0x3c
   27bb4:	str	r6, [sp, #64]	; 0x40
   27bb8:	mov	r6, #1
   27bbc:	str	r7, [sp, #68]	; 0x44
   27bc0:	mov	r7, #0
   27bc4:	str	r1, [sp, #32]
   27bc8:	strd	r6, [sp, #40]	; 0x28
   27bcc:	b	275c4 <__assert_fail@plt+0x14fd0>
   27bd0:	mov	r6, #0
   27bd4:	mov	r7, #0
   27bd8:	mov	r2, #56	; 0x38
   27bdc:	mov	r1, #0
   27be0:	mov	r0, r4
   27be4:	strd	r6, [sp, #16]
   27be8:	bl	12378 <memset@plt>
   27bec:	ldr	r2, [r9, #-48]	; 0xffffffd0
   27bf0:	mov	r1, r7
   27bf4:	sub	r3, fp, #4
   27bf8:	str	r2, [sp, #40]	; 0x28
   27bfc:	ldr	r2, [r9, #-44]	; 0xffffffd4
   27c00:	str	r6, [sp, #48]	; 0x30
   27c04:	str	r6, [sp, #56]	; 0x38
   27c08:	str	r7, [sp, #60]	; 0x3c
   27c0c:	str	r6, [sp, #64]	; 0x40
   27c10:	str	r7, [sp, #68]	; 0x44
   27c14:	str	r2, [sp, #44]	; 0x2c
   27c18:	str	r1, [sp, #52]	; 0x34
   27c1c:	b	278ec <__assert_fail@plt+0x152f8>
   27c20:	ldr	lr, [sp, #28]
   27c24:	sub	r3, r9, #56	; 0x38
   27c28:	mov	r2, #5
   27c2c:	movw	r1, #31400	; 0x7aa8
   27c30:	movt	r1, #4
   27c34:	str	r3, [sp, #72]	; 0x48
   27c38:	mov	r0, #0
   27c3c:	mvn	r8, #92	; 0x5c
   27c40:	ldr	ip, [lr, #156]	; 0x9c
   27c44:	ldr	r3, [lr, #172]	; 0xac
   27c48:	add	ip, ip, #1
   27c4c:	add	r3, r3, #1
   27c50:	str	ip, [lr, #156]	; 0x9c
   27c54:	str	r3, [lr, #172]	; 0xac
   27c58:	bl	120b4 <dcgettext@plt>
   27c5c:	sub	r3, fp, #2
   27c60:	mov	r2, #4
   27c64:	b	275c4 <__assert_fail@plt+0x14fd0>
   27c68:	mov	r2, r9
   27c6c:	ldr	ip, [sp, #28]
   27c70:	mov	r3, #1
   27c74:	mvn	r8, #92	; 0x5c
   27c78:	ldrd	r0, [r2], #-112	; 0xffffff90
   27c7c:	strb	r3, [ip, #152]	; 0x98
   27c80:	mov	r6, r0
   27c84:	mov	r7, r1
   27c88:	str	r2, [sp, #72]	; 0x48
   27c8c:	movw	r1, #31380	; 0x7a94
   27c90:	movt	r1, #4
   27c94:	mov	r2, #5
   27c98:	mov	r0, #0
   27c9c:	strd	r6, [ip, #88]	; 0x58
   27ca0:	bl	120b4 <dcgettext@plt>
   27ca4:	sub	r3, fp, #4
   27ca8:	mov	r2, #2
   27cac:	b	275c4 <__assert_fail@plt+0x14fd0>
   27cb0:	ldr	ip, [sp, #28]
   27cb4:	sub	lr, r9, #56	; 0x38
   27cb8:	mov	r2, #5
   27cbc:	movw	r1, #31432	; 0x7ac8
   27cc0:	movt	r1, #4
   27cc4:	mov	r0, #0
   27cc8:	mvn	r8, #92	; 0x5c
   27ccc:	str	lr, [sp, #72]	; 0x48
   27cd0:	ldr	r3, [ip, #156]	; 0x9c
   27cd4:	add	r3, r3, #1
   27cd8:	str	r3, [ip, #156]	; 0x9c
   27cdc:	bl	120b4 <dcgettext@plt>
   27ce0:	sub	r3, fp, #2
   27ce4:	mov	r2, #4
   27ce8:	b	275c4 <__assert_fail@plt+0x14fd0>
   27cec:	ldr	ip, [sp, #28]
   27cf0:	sub	lr, r9, #56	; 0x38
   27cf4:	mov	r2, #5
   27cf8:	movw	r1, #31424	; 0x7ac0
   27cfc:	movt	r1, #4
   27d00:	mov	r0, #0
   27d04:	mvn	r8, #92	; 0x5c
   27d08:	str	lr, [sp, #72]	; 0x48
   27d0c:	ldr	r3, [ip, #176]	; 0xb0
   27d10:	add	r3, r3, #1
   27d14:	str	r3, [ip, #176]	; 0xb0
   27d18:	bl	120b4 <dcgettext@plt>
   27d1c:	sub	r3, fp, #2
   27d20:	mov	r2, #4
   27d24:	b	275c4 <__assert_fail@plt+0x14fd0>
   27d28:	ldr	ip, [sp, #28]
   27d2c:	sub	lr, r9, #56	; 0x38
   27d30:	mov	r2, #5
   27d34:	movw	r1, #31412	; 0x7ab4
   27d38:	movt	r1, #4
   27d3c:	mov	r0, #0
   27d40:	mvn	r8, #92	; 0x5c
   27d44:	str	lr, [sp, #72]	; 0x48
   27d48:	ldr	r3, [ip, #164]	; 0xa4
   27d4c:	add	r3, r3, #1
   27d50:	str	r3, [ip, #164]	; 0xa4
   27d54:	bl	120b4 <dcgettext@plt>
   27d58:	sub	r3, fp, #2
   27d5c:	mov	r2, #4
   27d60:	b	275c4 <__assert_fail@plt+0x14fd0>
   27d64:	ldr	ip, [sp, #28]
   27d68:	sub	lr, r9, #56	; 0x38
   27d6c:	mov	r2, #5
   27d70:	movw	r1, #31404	; 0x7aac
   27d74:	movt	r1, #4
   27d78:	mov	r0, #0
   27d7c:	mvn	r8, #92	; 0x5c
   27d80:	str	lr, [sp, #72]	; 0x48
   27d84:	ldr	r3, [ip, #172]	; 0xac
   27d88:	add	r3, r3, #1
   27d8c:	str	r3, [ip, #172]	; 0xac
   27d90:	bl	120b4 <dcgettext@plt>
   27d94:	sub	r3, fp, #2
   27d98:	mov	r2, #4
   27d9c:	b	275c4 <__assert_fail@plt+0x14fd0>
   27da0:	sub	lr, r9, #112	; 0x70
   27da4:	ldrd	r0, [r9, #-48]	; 0xffffffd0
   27da8:	mov	r2, #0
   27dac:	mov	ip, #2
   27db0:	mov	r6, #0
   27db4:	str	lr, [sp, #72]	; 0x48
   27db8:	mov	r7, #0
   27dbc:	sub	r3, fp, #4
   27dc0:	ldr	lr, [sp, #28]
   27dc4:	mov	r8, #20
   27dc8:	str	ip, [lr, #28]
   27dcc:	strd	r0, [lr, #72]	; 0x48
   27dd0:	strd	r6, [lr, #80]	; 0x50
   27dd4:	str	r2, [lr, #88]	; 0x58
   27dd8:	str	r2, [lr, #92]	; 0x5c
   27ddc:	mov	r2, #8
   27de0:	b	275c4 <__assert_fail@plt+0x14fd0>
   27de4:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   27de8:	sub	r2, r9, #272	; 0x110
   27dec:	sub	r3, fp, #12
   27df0:	mvn	r8, #92	; 0x5c
   27df4:	ldr	lr, [sp, #28]
   27df8:	ldrd	r6, [r2]
   27dfc:	mov	r2, r9
   27e00:	ldr	ip, [r2], #-336	; 0xfffffeb0
   27e04:	strd	r0, [lr, #88]	; 0x58
   27e08:	ldrd	r0, [r9, #-160]	; 0xffffff60
   27e0c:	str	ip, [lr, #28]
   27e10:	str	r2, [sp, #72]	; 0x48
   27e14:	mov	r2, #7
   27e18:	strd	r6, [lr, #72]	; 0x48
   27e1c:	strd	r0, [lr, #80]	; 0x50
   27e20:	b	275c4 <__assert_fail@plt+0x14fd0>
   27e24:	mov	ip, r9
   27e28:	ldrd	r6, [r9, #-160]	; 0xffffff60
   27e2c:	sub	r3, fp, #8
   27e30:	mvn	r8, #92	; 0x5c
   27e34:	ldr	r2, [ip], #-224	; 0xffffff20
   27e38:	ldrd	r0, [r9, #-48]	; 0xffffffd0
   27e3c:	ldr	lr, [sp, #28]
   27e40:	str	ip, [sp, #72]	; 0x48
   27e44:	mov	ip, #0
   27e48:	str	r2, [lr, #28]
   27e4c:	mov	r2, #7
   27e50:	strd	r6, [lr, #72]	; 0x48
   27e54:	strd	r0, [lr, #80]	; 0x50
   27e58:	str	ip, [lr, #88]	; 0x58
   27e5c:	str	ip, [lr, #92]	; 0x5c
   27e60:	b	275c4 <__assert_fail@plt+0x14fd0>
   27e64:	mov	ip, r9
   27e68:	ldr	r2, [sp, #28]
   27e6c:	mov	r6, #0
   27e70:	mov	r7, #0
   27e74:	sub	r3, fp, #4
   27e78:	ldr	lr, [ip], #-112	; 0xffffff90
   27e7c:	mvn	r8, #92	; 0x5c
   27e80:	ldrd	r0, [r9, #-48]	; 0xffffffd0
   27e84:	strd	r6, [r2, #80]	; 0x50
   27e88:	mov	r6, r2
   27e8c:	mov	r2, #7
   27e90:	str	ip, [sp, #72]	; 0x48
   27e94:	mov	ip, #0
   27e98:	str	lr, [r6, #28]
   27e9c:	strd	r0, [r6, #72]	; 0x48
   27ea0:	str	ip, [r6, #88]	; 0x58
   27ea4:	str	ip, [r6, #92]	; 0x5c
   27ea8:	b	275c4 <__assert_fail@plt+0x14fd0>
   27eac:	movw	r1, #31464	; 0x7ae8
   27eb0:	movt	r1, #4
   27eb4:	sub	r3, r9, #56	; 0x38
   27eb8:	mov	r2, #5
   27ebc:	mov	r0, #0
   27ec0:	mvn	r8, #92	; 0x5c
   27ec4:	str	r3, [sp, #72]	; 0x48
   27ec8:	bl	120b4 <dcgettext@plt>
   27ecc:	sub	r3, fp, #2
   27ed0:	mov	r2, #4
   27ed4:	b	275c4 <__assert_fail@plt+0x14fd0>
   27ed8:	movw	r1, #31456	; 0x7ae0
   27edc:	movt	r1, #4
   27ee0:	b	27eb4 <__assert_fail@plt+0x158c0>
   27ee4:	movw	r1, #31444	; 0x7ad4
   27ee8:	movt	r1, #4
   27eec:	b	27eb4 <__assert_fail@plt+0x158c0>
   27ef0:	ldr	ip, [sp, #28]
   27ef4:	sub	lr, r9, #56	; 0x38
   27ef8:	mov	r2, #5
   27efc:	movw	r1, #31440	; 0x7ad0
   27f00:	movt	r1, #4
   27f04:	mov	r0, #0
   27f08:	mvn	r8, #92	; 0x5c
   27f0c:	str	lr, [sp, #72]	; 0x48
   27f10:	ldr	r3, [ip, #160]	; 0xa0
   27f14:	add	r3, r3, #1
   27f18:	str	r3, [ip, #160]	; 0xa0
   27f1c:	bl	120b4 <dcgettext@plt>
   27f20:	sub	r3, fp, #2
   27f24:	mov	r2, #4
   27f28:	b	275c4 <__assert_fail@plt+0x14fd0>
   27f2c:	ldrd	r0, [r9, #-48]	; 0xffffffd0
   27f30:	mov	r2, r9
   27f34:	sub	r3, fp, #4
   27f38:	mvn	r8, #92	; 0x5c
   27f3c:	ldr	ip, [r2], #-112	; 0xffffff90
   27f40:	ldr	lr, [sp, #28]
   27f44:	str	r2, [sp, #72]	; 0x48
   27f48:	mov	r2, #1
   27f4c:	strd	r0, [lr, #8]
   27f50:	str	ip, [lr, #16]
   27f54:	strb	r2, [lr, #187]	; 0xbb
   27f58:	mov	r2, #13
   27f5c:	b	275c4 <__assert_fail@plt+0x14fd0>
   27f60:	mov	r2, r9
   27f64:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   27f68:	b	27f34 <__assert_fail@plt+0x15940>
   27f6c:	ldr	r1, [r9, #-56]	; 0xffffffc8
   27f70:	sub	r2, r9, #112	; 0x70
   27f74:	mov	r6, #0
   27f78:	mov	r7, #0
   27f7c:	sub	r3, fp, #4
   27f80:	ldr	r0, [sp, #28]
   27f84:	mvn	r8, #92	; 0x5c
   27f88:	str	r2, [sp, #72]	; 0x48
   27f8c:	mov	r2, #13
   27f90:	strd	r6, [r0, #8]
   27f94:	str	r1, [r0, #16]
   27f98:	b	275c4 <__assert_fail@plt+0x14fd0>
   27f9c:	ldr	ip, [sp, #28]
   27fa0:	mov	r1, #0
   27fa4:	mov	r0, #0
   27fa8:	sub	r3, fp, #2
   27fac:	mov	r2, #13
   27fb0:	mvn	r8, #92	; 0x5c
   27fb4:	strd	r0, [ip, #8]
   27fb8:	ldr	r1, [r9], #-56	; 0xffffffc8
   27fbc:	str	r1, [ip, #16]
   27fc0:	str	r9, [sp, #72]	; 0x48
   27fc4:	b	275c4 <__assert_fail@plt+0x14fd0>
   27fc8:	ldr	r1, [r9, #-56]	; 0xffffffc8
   27fcc:	sub	r2, r9, #112	; 0x70
   27fd0:	sub	r3, fp, #4
   27fd4:	str	r2, [sp, #72]	; 0x48
   27fd8:	ldr	r0, [sp, #28]
   27fdc:	add	r1, r1, #3600	; 0xe10
   27fe0:	mov	r2, #12
   27fe4:	mvn	r8, #92	; 0x5c
   27fe8:	str	r1, [r0, #24]
   27fec:	b	275c4 <__assert_fail@plt+0x14fd0>
   27ff0:	ldr	r1, [r9], #-56	; 0xffffffc8
   27ff4:	sub	r3, fp, #2
   27ff8:	str	r9, [sp, #72]	; 0x48
   27ffc:	b	27fd8 <__assert_fail@plt+0x159e4>
   28000:	ldr	r6, [sp, #28]
   28004:	ldrd	r0, [r9, #-104]	; 0xffffff98
   28008:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   2800c:	add	lr, r6, #32
   28010:	mov	r8, r6
   28014:	ldrd	r6, [r9, #-112]	; 0xffffff90
   28018:	rsbs	r2, r2, #0
   2801c:	rscs	r3, r3, #0
   28020:	strd	r6, [r8, #32]
   28024:	strd	r0, [lr, #8]
   28028:	mov	r1, #0
   2802c:	movvs	r1, #1
   28030:	ldrd	r6, [r9, #-96]	; 0xffffffa0
   28034:	cmp	r1, #0
   28038:	ldr	r0, [sp, #28]
   2803c:	strd	r6, [lr, #16]
   28040:	strd	r2, [r0, #56]	; 0x38
   28044:	bne	27158 <__assert_fail@plt+0x14b64>
   28048:	ldrd	r2, [r9, #8]
   2804c:	rsbs	r2, r2, #0
   28050:	rscs	r3, r3, #0
   28054:	movvs	r1, #1
   28058:	cmp	r1, #0
   2805c:	ldr	r1, [sp, #28]
   28060:	strd	r2, [r1, #64]	; 0x40
   28064:	bne	27158 <__assert_fail@plt+0x14b64>
   28068:	sub	r3, r9, #168	; 0xa8
   2806c:	mov	r2, #15
   28070:	mvn	r8, #92	; 0x5c
   28074:	str	r3, [sp, #72]	; 0x48
   28078:	sub	r3, fp, #6
   2807c:	b	275c4 <__assert_fail@plt+0x14fd0>
   28080:	mov	r6, #0
   28084:	mov	r7, #0
   28088:	mov	r2, #56	; 0x38
   2808c:	mov	r1, #0
   28090:	mov	r0, r4
   28094:	strd	r6, [sp, #16]
   28098:	bl	12378 <memset@plt>
   2809c:	ldr	r2, [r9, #-56]	; 0xffffffc8
   280a0:	mov	r1, r7
   280a4:	sub	r3, fp, #4
   280a8:	str	r2, [sp, #40]	; 0x28
   280ac:	str	r6, [sp, #48]	; 0x30
   280b0:	str	r6, [sp, #56]	; 0x38
   280b4:	str	r7, [sp, #60]	; 0x3c
   280b8:	str	r6, [sp, #64]	; 0x40
   280bc:	str	r7, [sp, #68]	; 0x44
   280c0:	ldr	r2, [r9, #-52]	; 0xffffffcc
   280c4:	b	27c14 <__assert_fail@plt+0x15620>
   280c8:	mov	r0, #0
   280cc:	mov	r1, #0
   280d0:	mov	r2, #0
   280d4:	sub	r3, r9, #56	; 0x38
   280d8:	mov	r6, #1
   280dc:	mov	r7, #0
   280e0:	strd	r0, [sp, #16]
   280e4:	str	r2, [sp, #32]
   280e8:	strd	r6, [r5, #-8]
   280ec:	str	r0, [sp, #48]	; 0x30
   280f0:	str	r1, [sp, #52]	; 0x34
   280f4:	str	r0, [sp, #56]	; 0x38
   280f8:	str	r1, [sp, #60]	; 0x3c
   280fc:	str	r0, [sp, #64]	; 0x40
   28100:	str	r1, [sp, #68]	; 0x44
   28104:	str	r3, [sp, #72]	; 0x48
   28108:	sub	r3, fp, #2
   2810c:	str	r2, [sp, #412]	; 0x19c
   28110:	b	27ae4 <__assert_fail@plt+0x154f0>
   28114:	ldrd	r6, [r9, #-48]	; 0xffffffd0
   28118:	mov	r1, #0
   2811c:	mov	r0, #0
   28120:	strd	r6, [r5, #-8]
   28124:	mov	r2, #0
   28128:	sub	ip, r9, #112	; 0x70
   2812c:	mov	r9, r1
   28130:	sub	r3, fp, #4
   28134:	strd	r0, [sp, #16]
   28138:	mvn	r8, #92	; 0x5c
   2813c:	str	r2, [sp, #32]
   28140:	str	r0, [sp, #40]	; 0x28
   28144:	str	r9, [sp, #44]	; 0x2c
   28148:	str	r0, [sp, #48]	; 0x30
   2814c:	str	r9, [sp, #52]	; 0x34
   28150:	str	r0, [sp, #56]	; 0x38
   28154:	str	r9, [sp, #60]	; 0x3c
   28158:	str	r0, [sp, #64]	; 0x40
   2815c:	str	r9, [sp, #68]	; 0x44
   28160:	str	ip, [sp, #72]	; 0x48
   28164:	str	r2, [sp, #412]	; 0x19c
   28168:	mov	r2, #17
   2816c:	b	275c4 <__assert_fail@plt+0x14fd0>
   28170:	ldrd	r6, [r9, #-56]	; 0xffffffc8
   28174:	b	28118 <__assert_fail@plt+0x15b24>
   28178:	ldrd	r0, [r9, #-104]	; 0xffffff98
   2817c:	sub	lr, r9, #168	; 0xa8
   28180:	sub	r3, fp, #6
   28184:	ldr	r2, [sp, #28]
   28188:	str	lr, [sp, #72]	; 0x48
   2818c:	ldrd	r6, [r9]
   28190:	strd	r0, [r2, #64]	; 0x40
   28194:	add	ip, r2, #32
   28198:	ldrd	r0, [r9, #8]
   2819c:	strd	r0, [sp, #120]	; 0x78
   281a0:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   281a4:	strd	r0, [r2, #56]	; 0x38
   281a8:	strd	r6, [r2, #32]
   281ac:	mvn	r8, #92	; 0x5c
   281b0:	ldrd	r0, [r9, #16]
   281b4:	ldrd	r6, [sp, #120]	; 0x78
   281b8:	strd	r6, [r2, #40]	; 0x28
   281bc:	mov	r2, #14
   281c0:	strd	r0, [ip, #16]
   281c4:	b	275c4 <__assert_fail@plt+0x14fd0>
   281c8:	mov	r2, r9
   281cc:	ldrd	r6, [r9, #-48]	; 0xffffffd0
   281d0:	sub	r3, fp, #4
   281d4:	mvn	r8, #92	; 0x5c
   281d8:	ldrd	r0, [r2], #-112	; 0xffffff90
   281dc:	ldr	ip, [sp, #28]
   281e0:	str	r2, [sp, #72]	; 0x48
   281e4:	mov	r2, #14
   281e8:	strd	r0, [ip, #56]	; 0x38
   281ec:	strd	r6, [ip, #64]	; 0x40
   281f0:	b	275c4 <__assert_fail@plt+0x14fd0>
   281f4:	ldrd	r0, [r9, #-168]	; 0xffffff58
   281f8:	sub	lr, r9, #224	; 0xe0
   281fc:	sub	r3, fp, #8
   28200:	ldr	r2, [sp, #28]
   28204:	str	lr, [sp, #72]	; 0x48
   28208:	ldrd	r6, [r9]
   2820c:	strd	r0, [r2, #56]	; 0x38
   28210:	add	ip, r2, #32
   28214:	ldrd	r0, [r9, #8]
   28218:	strd	r0, [sp, #120]	; 0x78
   2821c:	ldrd	r0, [r9, #-104]	; 0xffffff98
   28220:	strd	r0, [r2, #64]	; 0x40
   28224:	b	281a8 <__assert_fail@plt+0x15bb4>
   28228:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   2822c:	sub	r3, fp, #4
   28230:	sub	r2, r9, #112	; 0x70
   28234:	mvn	r8, #92	; 0x5c
   28238:	str	r2, [sp, #72]	; 0x48
   2823c:	mov	r2, #14
   28240:	ldrd	r6, [r9, #8]
   28244:	ldr	ip, [sp, #28]
   28248:	strd	r0, [ip, #56]	; 0x38
   2824c:	strd	r6, [ip, #64]	; 0x40
   28250:	b	275c4 <__assert_fail@plt+0x14fd0>
   28254:	ldrd	r0, [r9, #-112]	; 0xffffff90
   28258:	mov	ip, #0
   2825c:	ldr	lr, [sp, #28]
   28260:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   28264:	strd	r0, [lr, #56]	; 0x38
   28268:	ldr	r0, [sp, #28]
   2826c:	rsbs	r2, r2, #0
   28270:	rscs	r3, r3, #0
   28274:	movvs	ip, #1
   28278:	subs	r1, ip, #0
   2827c:	strd	r2, [r0, #64]	; 0x40
   28280:	bne	27158 <__assert_fail@plt+0x14b64>
   28284:	ldrd	r2, [r9, #8]
   28288:	ldr	r0, [sp, #28]
   2828c:	rsbs	r2, r2, #0
   28290:	rscs	r3, r3, #0
   28294:	movvs	r1, #1
   28298:	cmp	r1, #0
   2829c:	strd	r2, [r0, #40]	; 0x28
   282a0:	bne	27158 <__assert_fail@plt+0x14b64>
   282a4:	ldr	r1, [r9, #16]
   282a8:	sub	r2, r9, #168	; 0xa8
   282ac:	sub	r3, fp, #6
   282b0:	mvn	r8, #92	; 0x5c
   282b4:	str	r2, [sp, #72]	; 0x48
   282b8:	mov	r2, #14
   282bc:	str	r1, [r0, #48]	; 0x30
   282c0:	b	275c4 <__assert_fail@plt+0x14fd0>
   282c4:	ldrd	r0, [r9, #-104]	; 0xffffff98
   282c8:	mov	ip, #0
   282cc:	ldr	lr, [sp, #28]
   282d0:	ldrd	r2, [r9, #8]
   282d4:	strd	r0, [lr, #64]	; 0x40
   282d8:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   282dc:	rsbs	r2, r2, #0
   282e0:	rscs	r3, r3, #0
   282e4:	movvs	ip, #1
   282e8:	cmp	ip, #0
   282ec:	strd	r0, [lr, #56]	; 0x38
   282f0:	ldr	r0, [sp, #28]
   282f4:	strd	r2, [r0, #40]	; 0x28
   282f8:	beq	282a4 <__assert_fail@plt+0x15cb0>
   282fc:	b	27158 <__assert_fail@plt+0x14b64>
   28300:	sub	r1, r9, #280	; 0x118
   28304:	ldr	r2, [r9, #-208]	; 0xffffff30
   28308:	sub	r3, fp, #10
   2830c:	str	r1, [sp, #72]	; 0x48
   28310:	ldrd	r0, [r9, #-104]	; 0xffffff98
   28314:	cmp	r2, #3
   28318:	strd	r0, [sp, #120]	; 0x78
   2831c:	ble	29150 <__assert_fail@plt+0x16b5c>
   28320:	sub	lr, r9, #224	; 0xe0
   28324:	ldrd	r6, [r9, #-224]	; 0xffffff20
   28328:	ldrd	r0, [r9, #-216]	; 0xffffff28
   2832c:	ldrd	r8, [r9, #8]
   28330:	ldr	r2, [sp, #28]
   28334:	strd	r8, [sp, #128]	; 0x80
   28338:	mvn	r8, #92	; 0x5c
   2833c:	mov	r9, r2
   28340:	add	ip, r2, #32
   28344:	mov	r2, #14
   28348:	strd	r6, [r9, #32]
   2834c:	strd	r0, [ip, #8]
   28350:	ldrd	r6, [lr, #16]
   28354:	ldrd	r0, [sp, #120]	; 0x78
   28358:	strd	r6, [ip, #16]
   2835c:	strd	r0, [r9, #56]	; 0x38
   28360:	ldrd	r0, [sp, #128]	; 0x80
   28364:	strd	r0, [r9, #64]	; 0x40
   28368:	b	275c4 <__assert_fail@plt+0x14fd0>
   2836c:	sub	r3, fp, #6
   28370:	sub	r2, r9, #168	; 0xa8
   28374:	ldrd	r0, [r9, #-104]	; 0xffffff98
   28378:	b	28234 <__assert_fail@plt+0x15c40>
   2837c:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   28380:	sub	r1, r9, #56	; 0x38
   28384:	ldr	r8, [sp, #28]
   28388:	strd	r2, [sp]
   2838c:	ldrd	r2, [r9, #-40]	; 0xffffffd8
   28390:	mov	r0, r8
   28394:	strd	r2, [sp, #8]
   28398:	ldm	r1, {r2, r3}
   2839c:	bl	26908 <__assert_fail@plt+0x14314>
   283a0:	ldrd	r6, [r8, #128]	; 0x80
   283a4:	ldr	r1, [r9, #48]	; 0x30
   283a8:	ldrd	r2, [r8, #136]	; 0x88
   283ac:	strd	r6, [sp, #72]	; 0x48
   283b0:	ldr	r0, [r8, #144]	; 0x90
   283b4:	ldrd	r6, [r9, #40]	; 0x28
   283b8:	adds	r1, r0, r1
   283bc:	movvs	ip, #1
   283c0:	movvc	ip, #0
   283c4:	adds	r0, r2, r6
   283c8:	str	r1, [r8, #144]	; 0x90
   283cc:	adcs	r1, r3, r7
   283d0:	ldrd	r6, [r8, #120]	; 0x78
   283d4:	movvs	r3, #1
   283d8:	movvc	r3, #0
   283dc:	strd	r0, [r8, #136]	; 0x88
   283e0:	orr	ip, ip, r3
   283e4:	ldrd	r0, [r9, #32]
   283e8:	strd	r6, [sp, #120]	; 0x78
   283ec:	ldrd	r6, [sp, #72]	; 0x48
   283f0:	adds	r2, r6, r0
   283f4:	adcs	r3, r7, r1
   283f8:	ldrd	r6, [r8, #112]	; 0x70
   283fc:	movvs	lr, #1
   28400:	movvc	lr, #0
   28404:	ldrd	r0, [r9, #24]
   28408:	orr	ip, ip, lr
   2840c:	strd	r2, [r8, #128]	; 0x80
   28410:	strd	r6, [sp, #128]	; 0x80
   28414:	ldrd	r6, [sp, #120]	; 0x78
   28418:	adds	r2, r6, r0
   2841c:	adcs	r3, r7, r1
   28420:	ldrd	r6, [sp, #128]	; 0x80
   28424:	movvs	r1, #1
   28428:	movvc	r1, #0
   2842c:	orr	ip, ip, r1
   28430:	strd	r2, [r8, #120]	; 0x78
   28434:	ldrd	r0, [r9, #16]
   28438:	ldrd	r2, [r8, #104]	; 0x68
   2843c:	strd	r2, [sp, #72]	; 0x48
   28440:	adds	r2, r6, r0
   28444:	adcs	r3, r7, r1
   28448:	ldrd	r6, [r8, #96]	; 0x60
   2844c:	movvs	lr, #1
   28450:	movvc	lr, #0
   28454:	ldrd	r0, [r9, #8]
   28458:	orr	ip, ip, lr
   2845c:	strd	r2, [r8, #112]	; 0x70
   28460:	strd	r6, [sp, #120]	; 0x78
   28464:	ldrd	r6, [sp, #72]	; 0x48
   28468:	adds	r2, r6, r0
   2846c:	adcs	r3, r7, r1
   28470:	ldrd	r0, [r9]
   28474:	movvs	lr, #1
   28478:	movvc	lr, #0
   2847c:	ldrd	r6, [sp, #120]	; 0x78
   28480:	strd	r2, [r8, #104]	; 0x68
   28484:	adds	r2, r6, r0
   28488:	adcs	r3, r7, r1
   2848c:	orrvc	ip, ip, lr
   28490:	movvs	ip, #1
   28494:	cmp	ip, #0
   28498:	strd	r2, [r8, #96]	; 0x60
   2849c:	bne	27158 <__assert_fail@plt+0x14b64>
   284a0:	sub	r3, r9, #112	; 0x70
   284a4:	mov	r1, #1
   284a8:	mov	r2, #24
   284ac:	str	r3, [sp, #72]	; 0x48
   284b0:	sub	r3, fp, #4
   284b4:	strb	r1, [r8, #153]	; 0x99
   284b8:	mvn	r8, #92	; 0x5c
   284bc:	b	275c4 <__assert_fail@plt+0x14fd0>
   284c0:	andeq	r7, r4, r4, ror #5
   284c4:	andeq	r7, r4, r0, lsr #6
   284c8:	andeq	r7, r4, ip, asr #8
   284cc:	ldrdeq	r7, [r4], -r0
   284d0:	ldrd	r2, [r9, #8]
   284d4:	sub	r1, r9, #56	; 0x38
   284d8:	mvn	r8, #92	; 0x5c
   284dc:	ldr	r0, [sp, #28]
   284e0:	strd	r2, [sp]
   284e4:	ldrd	r2, [r9, #16]
   284e8:	str	r1, [sp, #72]	; 0x48
   284ec:	strd	r2, [sp, #8]
   284f0:	ldm	r9, {r2, r3}
   284f4:	bl	26908 <__assert_fail@plt+0x14314>
   284f8:	sub	r3, fp, #2
   284fc:	mov	r2, #23
   28500:	b	275c4 <__assert_fail@plt+0x14fd0>
   28504:	ldr	r3, [r9, #8]
   28508:	mov	r1, #0
   2850c:	mvn	r0, #0
   28510:	ldr	r2, [r9, #12]
   28514:	adds	ip, r3, #-2147483648	; 0x80000000
   28518:	adc	r2, r2, #0
   2851c:	str	ip, [sp, #216]	; 0xd8
   28520:	str	r2, [sp, #220]	; 0xdc
   28524:	ldrd	r6, [sp, #216]	; 0xd8
   28528:	cmp	r7, r1
   2852c:	cmpeq	r6, r0
   28530:	bhi	27158 <__assert_fail@plt+0x14b64>
   28534:	sub	r2, r9, #56	; 0x38
   28538:	mov	r1, #0
   2853c:	mvn	r8, #91	; 0x5b
   28540:	str	r2, [sp, #72]	; 0x48
   28544:	mov	r2, #22
   28548:	str	r3, [sp, #360]	; 0x168
   2854c:	sub	r3, fp, #2
   28550:	str	r1, [sp, #364]	; 0x16c
   28554:	b	275c4 <__assert_fail@plt+0x14fd0>
   28558:	ldr	r6, [r9, #-48]	; 0xffffffd0
   2855c:	ldr	r3, [r9, #-40]	; 0xffffffd8
   28560:	ldr	r8, [r9, #-44]	; 0xffffffd4
   28564:	cmp	r3, #2
   28568:	ldrd	r2, [r9]
   2856c:	strd	r2, [sp, #72]	; 0x48
   28570:	bgt	29190 <__assert_fail@plt+0x16b9c>
   28574:	cmp	r2, #0
   28578:	sbcs	r3, r3, #0
   2857c:	blt	293f4 <__assert_fail@plt+0x16e00>
   28580:	cmp	r8, r6, asr #31
   28584:	mov	lr, #0
   28588:	bne	29748 <__assert_fail@plt+0x17154>
   2858c:	mov	r2, #60	; 0x3c
   28590:	smull	r2, r3, r6, r2
   28594:	mov	r6, r2
   28598:	ldrb	ip, [r9, #-56]	; 0xffffffc8
   2859c:	mov	r0, r6
   285a0:	mov	r1, r3
   285a4:	ldrd	r6, [sp, #72]	; 0x48
   285a8:	cmp	ip, #0
   285ac:	beq	293bc <__assert_fail@plt+0x16dc8>
   285b0:	subs	r2, r0, r6
   285b4:	mov	r1, #0
   285b8:	sbcs	r3, r3, r7
   285bc:	mov	r0, r2
   285c0:	movvs	r1, #1
   285c4:	mov	r8, r3
   285c8:	orrs	r3, lr, r1
   285cc:	bne	27158 <__assert_fail@plt+0x14b64>
   285d0:	adds	r3, r0, #1440	; 0x5a0
   285d4:	str	r3, [sp, #200]	; 0xc8
   285d8:	adc	r3, r8, #0
   285dc:	str	r3, [sp, #204]	; 0xcc
   285e0:	ldrd	r2, [sp, #200]	; 0xc8
   285e4:	cmp	r3, #0
   285e8:	cmpeq	r2, #2880	; 0xb40
   285ec:	bhi	27158 <__assert_fail@plt+0x14b64>
   285f0:	rsb	r2, r0, r0, lsl #4
   285f4:	ldrd	r6, [r9, #-112]	; 0xffffff90
   285f8:	lsl	r2, r2, #2
   285fc:	asr	r3, r2, #31
   28600:	adds	r0, r2, r6
   28604:	adcs	r1, r3, r7
   28608:	asr	r3, r0, #31
   2860c:	movvs	ip, #1
   28610:	movvc	ip, #0
   28614:	cmp	r1, r3
   28618:	ldr	r3, [sp, #28]
   2861c:	cmpeq	r0, r0
   28620:	movne	ip, #1
   28624:	cmp	ip, #0
   28628:	str	r0, [r3, #24]
   2862c:	bne	27158 <__assert_fail@plt+0x14b64>
   28630:	sub	r3, r9, #168	; 0xa8
   28634:	mov	r2, #12
   28638:	mvn	r8, #92	; 0x5c
   2863c:	str	r3, [sp, #72]	; 0x48
   28640:	sub	r3, fp, #6
   28644:	b	275c4 <__assert_fail@plt+0x14fd0>
   28648:	ldr	r8, [sp, #28]
   2864c:	movw	r3, #40336	; 0x9d90
   28650:	movt	r3, #65535	; 0xffff
   28654:	ldr	r1, [r9, #48]	; 0x30
   28658:	ldrd	r6, [r8, #128]	; 0x80
   2865c:	str	r3, [r8, #24]
   28660:	ldrd	r2, [r8, #136]	; 0x88
   28664:	ldr	r0, [r8, #144]	; 0x90
   28668:	strd	r6, [sp, #72]	; 0x48
   2866c:	ldrd	r6, [r9, #40]	; 0x28
   28670:	adds	r1, r0, r1
   28674:	movvs	ip, #1
   28678:	movvc	ip, #0
   2867c:	adds	r0, r2, r6
   28680:	str	r1, [r8, #144]	; 0x90
   28684:	adcs	r1, r3, r7
   28688:	ldrd	r6, [r8, #120]	; 0x78
   2868c:	movvs	r3, #1
   28690:	movvc	r3, #0
   28694:	strd	r0, [r8, #136]	; 0x88
   28698:	orr	ip, ip, r3
   2869c:	ldrd	r0, [r9, #32]
   286a0:	strd	r6, [sp, #120]	; 0x78
   286a4:	ldrd	r6, [sp, #72]	; 0x48
   286a8:	adds	r2, r6, r0
   286ac:	adcs	r3, r7, r1
   286b0:	ldrd	r6, [r8, #112]	; 0x70
   286b4:	movvs	lr, #1
   286b8:	movvc	lr, #0
   286bc:	ldrd	r0, [r9, #24]
   286c0:	orr	ip, ip, lr
   286c4:	strd	r2, [r8, #128]	; 0x80
   286c8:	strd	r6, [sp, #128]	; 0x80
   286cc:	ldrd	r6, [sp, #120]	; 0x78
   286d0:	adds	r2, r6, r0
   286d4:	adcs	r3, r7, r1
   286d8:	ldrd	r6, [sp, #128]	; 0x80
   286dc:	movvs	r1, #1
   286e0:	movvc	r1, #0
   286e4:	orr	ip, ip, r1
   286e8:	strd	r2, [r8, #120]	; 0x78
   286ec:	ldrd	r0, [r9, #16]
   286f0:	ldrd	r2, [r8, #104]	; 0x68
   286f4:	strd	r2, [sp, #72]	; 0x48
   286f8:	adds	r2, r6, r0
   286fc:	adcs	r3, r7, r1
   28700:	ldrd	r6, [r8, #96]	; 0x60
   28704:	movvs	lr, #1
   28708:	movvc	lr, #0
   2870c:	ldrd	r0, [r9, #8]
   28710:	orr	ip, ip, lr
   28714:	strd	r2, [r8, #112]	; 0x70
   28718:	strd	r6, [sp, #120]	; 0x78
   2871c:	ldrd	r6, [sp, #72]	; 0x48
   28720:	adds	r2, r6, r0
   28724:	adcs	r3, r7, r1
   28728:	ldrd	r0, [r9]
   2872c:	movvs	lr, #1
   28730:	movvc	lr, #0
   28734:	ldrd	r6, [sp, #120]	; 0x78
   28738:	strd	r2, [r8, #104]	; 0x68
   2873c:	adds	r2, r6, r0
   28740:	adcs	r3, r7, r1
   28744:	orrvc	r0, ip, lr
   28748:	movvs	r0, #1
   2874c:	cmp	r0, #0
   28750:	strd	r2, [r8, #96]	; 0x60
   28754:	bne	27158 <__assert_fail@plt+0x14b64>
   28758:	mov	r3, #1
   2875c:	mov	r2, #5
   28760:	movw	r1, #31444	; 0x7ad4
   28764:	movt	r1, #4
   28768:	strb	r3, [r8, #153]	; 0x99
   2876c:	sub	r3, r9, #112	; 0x70
   28770:	mvn	r8, #92	; 0x5c
   28774:	str	r3, [sp, #72]	; 0x48
   28778:	bl	120b4 <dcgettext@plt>
   2877c:	sub	r3, fp, #4
   28780:	mov	r2, #12
   28784:	b	275c4 <__assert_fail@plt+0x14fd0>
   28788:	ldrd	r6, [r9, #-48]	; 0xffffffd0
   2878c:	mov	r1, #0
   28790:	mov	r0, #0
   28794:	mov	r2, #0
   28798:	sub	ip, r9, #112	; 0x70
   2879c:	mov	r9, r1
   287a0:	sub	r3, fp, #4
   287a4:	strd	r0, [sp, #16]
   287a8:	mov	r8, #60	; 0x3c
   287ac:	str	r2, [sp, #32]
   287b0:	str	r0, [sp, #40]	; 0x28
   287b4:	strd	r6, [r5, #-8]
   287b8:	str	r9, [sp, #44]	; 0x2c
   287bc:	str	r0, [sp, #48]	; 0x30
   287c0:	str	r9, [sp, #52]	; 0x34
   287c4:	str	r0, [sp, #56]	; 0x38
   287c8:	str	r9, [sp, #60]	; 0x3c
   287cc:	str	r0, [sp, #64]	; 0x40
   287d0:	str	r9, [sp, #68]	; 0x44
   287d4:	str	ip, [sp, #72]	; 0x48
   287d8:	str	r2, [sp, #412]	; 0x19c
   287dc:	mov	r2, #18
   287e0:	b	275c4 <__assert_fail@plt+0x14fd0>
   287e4:	mov	r1, #0
   287e8:	sub	r3, r9, #56	; 0x38
   287ec:	mov	r6, r1
   287f0:	mov	r7, r1
   287f4:	mov	r2, #56	; 0x38
   287f8:	mov	r0, r4
   287fc:	strd	r6, [sp, #56]	; 0x38
   28800:	mvn	r8, #92	; 0x5c
   28804:	str	r3, [sp, #72]	; 0x48
   28808:	bl	12378 <memset@plt>
   2880c:	mov	r0, #1
   28810:	mov	r1, #0
   28814:	sub	r3, fp, #2
   28818:	mov	r2, #17
   2881c:	strd	r0, [sp, #16]
   28820:	str	r6, [sp, #32]
   28824:	str	r6, [sp, #40]	; 0x28
   28828:	str	r6, [sp, #44]	; 0x2c
   2882c:	str	r6, [sp, #48]	; 0x30
   28830:	str	r6, [sp, #52]	; 0x34
   28834:	str	r6, [sp, #64]	; 0x40
   28838:	str	r6, [sp, #68]	; 0x44
   2883c:	b	275c4 <__assert_fail@plt+0x14fd0>
   28840:	mvn	r0, #0
   28844:	mvn	r1, #0
   28848:	str	r9, [sp, #72]	; 0x48
   2884c:	mov	r3, fp
   28850:	mov	r2, #25
   28854:	mov	r8, #43	; 0x2b
   28858:	strd	r0, [r5, #-8]
   2885c:	b	275c4 <__assert_fail@plt+0x14fd0>
   28860:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   28864:	ldr	r3, [r9]
   28868:	strd	r0, [sp, #72]	; 0x48
   2886c:	ldrd	r0, [r9, #-48]	; 0xffffffd0
   28870:	cmp	r3, #0
   28874:	ldrd	r2, [r9, #-40]	; 0xffffffd8
   28878:	strd	r0, [sp, #120]	; 0x78
   2887c:	strd	r2, [sp, #128]	; 0x80
   28880:	ldrd	r2, [r9, #-32]	; 0xffffffe0
   28884:	strd	r2, [sp, #136]	; 0x88
   28888:	ldrd	r2, [r9, #-24]	; 0xffffffe8
   2888c:	strd	r2, [sp, #144]	; 0x90
   28890:	ldrd	r2, [r9, #-16]
   28894:	mov	r6, r2
   28898:	ldr	r2, [sp, #28]
   2889c:	mov	r7, r3
   288a0:	ldr	r3, [r9, #-8]
   288a4:	ldrd	r0, [r2, #96]	; 0x60
   288a8:	strd	r0, [sp, #184]	; 0xb8
   288ac:	ldrd	r0, [r2, #104]	; 0x68
   288b0:	strd	r0, [sp, #176]	; 0xb0
   288b4:	ldrd	r0, [r2, #112]	; 0x70
   288b8:	strd	r0, [sp, #168]	; 0xa8
   288bc:	ldrd	r0, [r2, #120]	; 0x78
   288c0:	strd	r0, [sp, #160]	; 0xa0
   288c4:	ldrd	r0, [r2, #128]	; 0x80
   288c8:	strd	r0, [sp, #152]	; 0x98
   288cc:	ldrd	r0, [r2, #136]	; 0x88
   288d0:	ldr	r2, [r2, #144]	; 0x90
   288d4:	blt	29278 <__assert_fail@plt+0x16c84>
   288d8:	adds	r8, r2, r3
   288dc:	mov	r3, r7
   288e0:	movvs	lr, #1
   288e4:	movvc	lr, #0
   288e8:	ldr	ip, [sp, #28]
   288ec:	adds	r6, r0, r6
   288f0:	adcs	r7, r1, r7
   288f4:	ldrd	r0, [sp, #152]	; 0x98
   288f8:	movvs	r3, #1
   288fc:	movvc	r3, #0
   28900:	strd	r6, [sp, #224]	; 0xe0
   28904:	ldrd	r6, [sp, #144]	; 0x90
   28908:	str	r3, [sp, #236]	; 0xec
   2890c:	str	r8, [ip, #144]	; 0x90
   28910:	adds	r2, r0, r6
   28914:	adcs	r3, r1, r7
   28918:	ldrd	r0, [sp, #160]	; 0xa0
   2891c:	movvs	r8, #1
   28920:	movvc	r8, #0
   28924:	strd	r2, [sp, #144]	; 0x90
   28928:	ldrd	r6, [sp, #224]	; 0xe0
   2892c:	ldr	r3, [sp, #236]	; 0xec
   28930:	strd	r6, [ip, #136]	; 0x88
   28934:	orr	lr, lr, r3
   28938:	ldrd	r2, [sp, #136]	; 0x88
   2893c:	orr	lr, lr, r8
   28940:	adds	r6, r0, r2
   28944:	adcs	r7, r1, r3
   28948:	ldrd	r2, [sp, #128]	; 0x80
   2894c:	movvs	r8, #1
   28950:	movvc	r8, #0
   28954:	strd	r6, [sp, #136]	; 0x88
   28958:	orr	lr, lr, r8
   2895c:	ldrd	r0, [sp, #144]	; 0x90
   28960:	ldrd	r6, [sp, #168]	; 0xa8
   28964:	strd	r0, [ip, #128]	; 0x80
   28968:	adds	r0, r6, r2
   2896c:	adcs	r1, r7, r3
   28970:	ldrd	r6, [sp, #136]	; 0x88
   28974:	movvs	r8, #1
   28978:	movvc	r8, #0
   2897c:	strd	r0, [sp, #128]	; 0x80
   28980:	orr	lr, lr, r8
   28984:	ldrd	r0, [sp, #120]	; 0x78
   28988:	ldrd	r2, [sp, #176]	; 0xb0
   2898c:	strd	r6, [ip, #120]	; 0x78
   28990:	adds	r6, r2, r0
   28994:	adcs	r7, r3, r1
   28998:	ldrd	r2, [sp, #72]	; 0x48
   2899c:	movvs	r8, #1
   289a0:	movvc	r8, #0
   289a4:	strd	r6, [sp, #120]	; 0x78
   289a8:	ldrd	r0, [sp, #128]	; 0x80
   289ac:	ldrd	r6, [sp, #184]	; 0xb8
   289b0:	strd	r0, [ip, #112]	; 0x70
   289b4:	adds	r0, r6, r2
   289b8:	adcs	r1, r7, r3
   289bc:	ldrd	r6, [sp, #120]	; 0x78
   289c0:	orrvc	r3, lr, r8
   289c4:	movvs	r3, #1
   289c8:	strd	r0, [ip, #96]	; 0x60
   289cc:	strd	r6, [ip, #104]	; 0x68
   289d0:	cmp	r3, #0
   289d4:	bne	27158 <__assert_fail@plt+0x14b64>
   289d8:	ldr	r0, [sp, #28]
   289dc:	sub	r3, r9, #112	; 0x70
   289e0:	mov	r1, #1
   289e4:	mov	r2, #16
   289e8:	mvn	r8, #92	; 0x5c
   289ec:	str	r3, [sp, #72]	; 0x48
   289f0:	sub	r3, fp, #4
   289f4:	strb	r1, [r0, #153]	; 0x99
   289f8:	b	275c4 <__assert_fail@plt+0x14fd0>
   289fc:	mov	r1, #0
   28a00:	mov	r2, #56	; 0x38
   28a04:	mov	r6, r1
   28a08:	mov	r7, r1
   28a0c:	mov	r0, r4
   28a10:	strd	r6, [sp, #56]	; 0x38
   28a14:	str	r1, [sp, #64]	; 0x40
   28a18:	bl	12378 <memset@plt>
   28a1c:	mov	r2, r6
   28a20:	sub	r3, fp, #4
   28a24:	str	r6, [sp, #48]	; 0x30
   28a28:	ldrd	r0, [r9, #-48]	; 0xffffffd0
   28a2c:	b	27878 <__assert_fail@plt+0x15284>
   28a30:	mov	r2, #56	; 0x38
   28a34:	mov	r1, #0
   28a38:	mov	r0, r4
   28a3c:	mov	r8, #0
   28a40:	bl	12378 <memset@plt>
   28a44:	mov	r3, r9
   28a48:	mov	r9, #0
   28a4c:	ldrd	r0, [r3], #-56	; 0xffffffc8
   28a50:	mov	r2, #19
   28a54:	strd	r8, [sp, #16]
   28a58:	str	r8, [sp, #40]	; 0x28
   28a5c:	str	r9, [sp, #44]	; 0x2c
   28a60:	str	r8, [sp, #56]	; 0x38
   28a64:	str	r9, [sp, #60]	; 0x3c
   28a68:	str	r8, [sp, #64]	; 0x40
   28a6c:	str	r9, [sp, #68]	; 0x44
   28a70:	str	r3, [sp, #72]	; 0x48
   28a74:	sub	r3, fp, #2
   28a78:	b	27a48 <__assert_fail@plt+0x15454>
   28a7c:	mov	r1, #0
   28a80:	mov	r2, #56	; 0x38
   28a84:	mov	r6, r1
   28a88:	mov	r7, r1
   28a8c:	mov	r0, r4
   28a90:	mov	r8, #60	; 0x3c
   28a94:	strd	r6, [sp, #56]	; 0x38
   28a98:	str	r1, [sp, #64]	; 0x40
   28a9c:	bl	12378 <memset@plt>
   28aa0:	ldrd	r0, [r9, #-48]	; 0xffffffd0
   28aa4:	sub	r2, r9, #112	; 0x70
   28aa8:	sub	r3, fp, #4
   28aac:	strd	r0, [sp, #16]
   28ab0:	str	r6, [sp, #32]
   28ab4:	str	r6, [sp, #40]	; 0x28
   28ab8:	str	r6, [sp, #44]	; 0x2c
   28abc:	str	r6, [sp, #48]	; 0x30
   28ac0:	str	r6, [sp, #52]	; 0x34
   28ac4:	str	r6, [sp, #68]	; 0x44
   28ac8:	str	r2, [sp, #72]	; 0x48
   28acc:	mov	r2, #18
   28ad0:	b	275c4 <__assert_fail@plt+0x14fd0>
   28ad4:	ldr	r3, [r9, #8]
   28ad8:	mov	r1, #0
   28adc:	mvn	r0, #0
   28ae0:	ldr	r2, [r9, #12]
   28ae4:	adds	ip, r3, #-2147483648	; 0x80000000
   28ae8:	adc	r2, r2, #0
   28aec:	str	ip, [sp, #208]	; 0xd0
   28af0:	str	r2, [sp, #212]	; 0xd4
   28af4:	ldrd	r6, [sp, #208]	; 0xd0
   28af8:	cmp	r7, r1
   28afc:	cmpeq	r6, r0
   28b00:	bhi	27158 <__assert_fail@plt+0x14b64>
   28b04:	sub	r2, r9, #56	; 0x38
   28b08:	mov	r1, #0
   28b0c:	mvn	r8, #92	; 0x5c
   28b10:	str	r2, [sp, #72]	; 0x48
   28b14:	mov	r2, #21
   28b18:	str	r3, [sp, #360]	; 0x168
   28b1c:	sub	r3, fp, #2
   28b20:	str	r1, [sp, #364]	; 0x16c
   28b24:	b	275c4 <__assert_fail@plt+0x14fd0>
   28b28:	mov	r6, #0
   28b2c:	mov	r7, #0
   28b30:	sub	r3, r9, #56	; 0x38
   28b34:	mov	r2, #56	; 0x38
   28b38:	mov	r1, #0
   28b3c:	mov	r0, r4
   28b40:	strd	r6, [sp, #16]
   28b44:	str	r6, [sp, #64]	; 0x40
   28b48:	mvn	r8, #92	; 0x5c
   28b4c:	str	r3, [sp, #72]	; 0x48
   28b50:	bl	12378 <memset@plt>
   28b54:	mov	r1, #0
   28b58:	sub	r3, fp, #2
   28b5c:	mov	r2, #17
   28b60:	str	r6, [sp, #40]	; 0x28
   28b64:	str	r7, [sp, #44]	; 0x2c
   28b68:	str	r6, [sp, #48]	; 0x30
   28b6c:	mov	r6, #1
   28b70:	str	r7, [sp, #52]	; 0x34
   28b74:	str	r7, [sp, #68]	; 0x44
   28b78:	mov	r7, #0
   28b7c:	str	r1, [sp, #32]
   28b80:	strd	r6, [sp, #56]	; 0x38
   28b84:	b	275c4 <__assert_fail@plt+0x14fd0>
   28b88:	mov	r6, #0
   28b8c:	mov	r7, #0
   28b90:	mov	r2, #56	; 0x38
   28b94:	mov	r1, #0
   28b98:	mov	r0, r4
   28b9c:	strd	r6, [sp, #16]
   28ba0:	bl	12378 <memset@plt>
   28ba4:	ldr	r2, [r9, #-48]	; 0xffffffd0
   28ba8:	sub	r3, fp, #4
   28bac:	str	r6, [sp, #40]	; 0x28
   28bb0:	str	r7, [sp, #44]	; 0x2c
   28bb4:	str	r6, [sp, #48]	; 0x30
   28bb8:	str	r7, [sp, #52]	; 0x34
   28bbc:	str	r2, [sp, #56]	; 0x38
   28bc0:	ldr	r2, [r9, #-44]	; 0xffffffd4
   28bc4:	str	r2, [sp, #60]	; 0x3c
   28bc8:	str	r6, [sp, #64]	; 0x40
   28bcc:	str	r7, [sp, #68]	; 0x44
   28bd0:	b	278ec <__assert_fail@plt+0x152f8>
   28bd4:	ldr	r1, [sp, #28]
   28bd8:	ldr	r6, [r9, #-48]	; 0xffffffd0
   28bdc:	ldr	r2, [r9, #-40]	; 0xffffffd8
   28be0:	ldr	r3, [r1, #176]	; 0xb0
   28be4:	ldr	r8, [r9, #-44]	; 0xffffffd4
   28be8:	cmp	r2, #2
   28bec:	add	r3, r3, #1
   28bf0:	str	r3, [r1, #176]	; 0xb0
   28bf4:	ldrd	r2, [r9]
   28bf8:	strd	r2, [sp, #72]	; 0x48
   28bfc:	bgt	29204 <__assert_fail@plt+0x16c10>
   28c00:	cmp	r2, #0
   28c04:	sbcs	r3, r3, #0
   28c08:	blt	29400 <__assert_fail@plt+0x16e0c>
   28c0c:	cmp	r8, r6, asr #31
   28c10:	mov	lr, #0
   28c14:	bne	2969c <__assert_fail@plt+0x170a8>
   28c18:	mov	r2, #60	; 0x3c
   28c1c:	smull	r2, r3, r6, r2
   28c20:	mov	r6, r2
   28c24:	ldrb	ip, [r9, #-56]	; 0xffffffc8
   28c28:	mov	r0, r6
   28c2c:	mov	r1, r3
   28c30:	ldrd	r6, [sp, #72]	; 0x48
   28c34:	cmp	ip, #0
   28c38:	beq	293d8 <__assert_fail@plt+0x16de4>
   28c3c:	subs	r2, r0, r6
   28c40:	mov	r1, #0
   28c44:	sbcs	r3, r3, r7
   28c48:	mov	r0, r2
   28c4c:	movvs	r1, #1
   28c50:	mov	r8, r3
   28c54:	orrs	r3, lr, r1
   28c58:	bne	27158 <__assert_fail@plt+0x14b64>
   28c5c:	adds	r3, r0, #1440	; 0x5a0
   28c60:	str	r3, [sp, #192]	; 0xc0
   28c64:	adc	r3, r8, #0
   28c68:	str	r3, [sp, #196]	; 0xc4
   28c6c:	ldrd	r2, [sp, #192]	; 0xc0
   28c70:	cmp	r3, #0
   28c74:	cmpeq	r2, #2880	; 0xb40
   28c78:	bhi	27158 <__assert_fail@plt+0x14b64>
   28c7c:	rsb	r1, r0, r0, lsl #4
   28c80:	ldr	r0, [sp, #28]
   28c84:	sub	r3, r9, #112	; 0x70
   28c88:	mov	r2, #10
   28c8c:	mvn	r8, #26
   28c90:	lsl	r1, r1, #2
   28c94:	str	r3, [sp, #72]	; 0x48
   28c98:	sub	r3, fp, #4
   28c9c:	str	r1, [r0, #24]
   28ca0:	b	275c4 <__assert_fail@plt+0x14fd0>
   28ca4:	sub	ip, r9, #272	; 0x110
   28ca8:	mov	r2, #2
   28cac:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   28cb0:	sub	r3, fp, #12
   28cb4:	ldrd	r6, [ip]
   28cb8:	ldr	ip, [sp, #28]
   28cbc:	str	r2, [ip, #28]
   28cc0:	sub	r2, r9, #336	; 0x150
   28cc4:	ldrd	r8, [r9, #-160]	; 0xffffff60
   28cc8:	str	r2, [sp, #72]	; 0x48
   28ccc:	mov	r2, #8
   28cd0:	strd	r0, [ip, #88]	; 0x58
   28cd4:	strd	r6, [ip, #72]	; 0x48
   28cd8:	strd	r8, [sp, #120]	; 0x78
   28cdc:	mov	r8, #20
   28ce0:	ldrd	r0, [sp, #120]	; 0x78
   28ce4:	strd	r0, [ip, #80]	; 0x50
   28ce8:	b	275c4 <__assert_fail@plt+0x14fd0>
   28cec:	sub	lr, r9, #224	; 0xe0
   28cf0:	ldrd	r6, [r9, #-160]	; 0xffffff60
   28cf4:	mov	r2, #0
   28cf8:	mov	ip, #2
   28cfc:	sub	r3, fp, #8
   28d00:	str	lr, [sp, #72]	; 0x48
   28d04:	mov	r8, #20
   28d08:	ldrd	r0, [r9, #-48]	; 0xffffffd0
   28d0c:	ldr	lr, [sp, #28]
   28d10:	str	ip, [lr, #28]
   28d14:	strd	r6, [lr, #72]	; 0x48
   28d18:	strd	r0, [lr, #80]	; 0x50
   28d1c:	str	r2, [lr, #88]	; 0x58
   28d20:	str	r2, [lr, #92]	; 0x5c
   28d24:	mov	r2, #8
   28d28:	b	275c4 <__assert_fail@plt+0x14fd0>
   28d2c:	ldrd	r0, [r9, #8]
   28d30:	sub	r2, r9, #112	; 0x70
   28d34:	sub	r3, fp, #4
   28d38:	mov	r8, #43	; 0x2b
   28d3c:	str	r2, [sp, #72]	; 0x48
   28d40:	mov	r2, #25
   28d44:	strd	r0, [r5, #-8]
   28d48:	b	275c4 <__assert_fail@plt+0x14fd0>
   28d4c:	ldr	r0, [sp, #28]
   28d50:	sub	r3, r9, #56	; 0x38
   28d54:	movw	r1, #40336	; 0x9d90
   28d58:	movt	r1, #65535	; 0xffff
   28d5c:	mov	r2, #12
   28d60:	mvn	r8, #92	; 0x5c
   28d64:	str	r3, [sp, #72]	; 0x48
   28d68:	sub	r3, fp, #2
   28d6c:	str	r1, [r0, #24]
   28d70:	b	275c4 <__assert_fail@plt+0x14fd0>
   28d74:	ldr	r1, [r9], #-56	; 0xffffffc8
   28d78:	sub	r3, fp, #2
   28d7c:	mov	r2, #12
   28d80:	mvn	r8, #92	; 0x5c
   28d84:	ldr	r0, [sp, #28]
   28d88:	str	r9, [sp, #72]	; 0x48
   28d8c:	str	r1, [r0, #24]
   28d90:	b	275c4 <__assert_fail@plt+0x14fd0>
   28d94:	ldr	ip, [sp, #28]
   28d98:	mov	r0, #1
   28d9c:	sub	r3, r9, #112	; 0x70
   28da0:	mov	r2, #11
   28da4:	mvn	r8, #92	; 0x5c
   28da8:	str	r3, [sp, #72]	; 0x48
   28dac:	sub	r3, fp, #4
   28db0:	ldr	r1, [ip, #168]	; 0xa8
   28db4:	str	r0, [ip, #20]
   28db8:	add	r1, r1, r0
   28dbc:	str	r1, [ip, #168]	; 0xa8
   28dc0:	b	275c4 <__assert_fail@plt+0x14fd0>
   28dc4:	ldr	r1, [r9], #-56	; 0xffffffc8
   28dc8:	sub	r3, fp, #2
   28dcc:	mov	r2, #11
   28dd0:	mvn	r8, #92	; 0x5c
   28dd4:	ldr	r0, [sp, #28]
   28dd8:	str	r9, [sp, #72]	; 0x48
   28ddc:	str	r1, [r0, #20]
   28de0:	b	275c4 <__assert_fail@plt+0x14fd0>
   28de4:	mov	r6, #0
   28de8:	mov	r7, #0
   28dec:	mov	r2, #56	; 0x38
   28df0:	mov	r1, #0
   28df4:	mov	r0, r4
   28df8:	strd	r6, [sp, #16]
   28dfc:	bl	12378 <memset@plt>
   28e00:	ldr	r2, [r9, #-48]	; 0xffffffd0
   28e04:	mov	r1, r7
   28e08:	sub	r3, fp, #4
   28e0c:	str	r6, [sp, #40]	; 0x28
   28e10:	str	r6, [sp, #48]	; 0x30
   28e14:	str	r7, [sp, #52]	; 0x34
   28e18:	str	r2, [sp, #56]	; 0x38
   28e1c:	ldr	r2, [r9, #-44]	; 0xffffffd4
   28e20:	str	r6, [sp, #64]	; 0x40
   28e24:	str	r7, [sp, #68]	; 0x44
   28e28:	str	r2, [sp, #60]	; 0x3c
   28e2c:	str	r1, [sp, #44]	; 0x2c
   28e30:	sub	r2, r9, #112	; 0x70
   28e34:	mov	r1, #0
   28e38:	mov	r8, #60	; 0x3c
   28e3c:	str	r1, [sp, #32]
   28e40:	str	r2, [sp, #72]	; 0x48
   28e44:	mov	r2, #18
   28e48:	b	275c4 <__assert_fail@plt+0x14fd0>
   28e4c:	mov	r6, #0
   28e50:	mov	r7, #0
   28e54:	mov	r2, #56	; 0x38
   28e58:	mov	r1, #0
   28e5c:	mov	r0, r4
   28e60:	strd	r6, [sp, #16]
   28e64:	bl	12378 <memset@plt>
   28e68:	ldr	r2, [r9, #-48]	; 0xffffffd0
   28e6c:	mov	r1, r7
   28e70:	sub	r3, fp, #4
   28e74:	str	r6, [sp, #40]	; 0x28
   28e78:	str	r6, [sp, #48]	; 0x30
   28e7c:	str	r7, [sp, #52]	; 0x34
   28e80:	str	r6, [sp, #56]	; 0x38
   28e84:	str	r7, [sp, #60]	; 0x3c
   28e88:	str	r2, [sp, #64]	; 0x40
   28e8c:	ldr	r2, [r9, #-44]	; 0xffffffd4
   28e90:	str	r2, [sp, #68]	; 0x44
   28e94:	b	28e2c <__assert_fail@plt+0x16838>
   28e98:	mov	r2, #56	; 0x38
   28e9c:	mov	r1, #0
   28ea0:	mov	r0, r4
   28ea4:	bl	12378 <memset@plt>
   28ea8:	ldr	r0, [r9, #-48]	; 0xffffffd0
   28eac:	mov	r3, #0
   28eb0:	ldr	ip, [r9, #-44]	; 0xffffffd4
   28eb4:	str	r3, [sp, #40]	; 0x28
   28eb8:	ldr	r2, [r9]
   28ebc:	ldr	r3, [r9, #4]
   28ec0:	cmp	ip, r0, asr #31
   28ec4:	asr	r1, r2, #31
   28ec8:	bne	29530 <__assert_fail@plt+0x16f3c>
   28ecc:	cmp	r1, r3
   28ed0:	bne	294a0 <__assert_fail@plt+0x16eac>
   28ed4:	smull	r2, r3, r0, r2
   28ed8:	strd	r2, [sp, #112]	; 0x70
   28edc:	ldr	r2, [sp, #40]	; 0x28
   28ee0:	ldrd	r0, [sp, #112]	; 0x70
   28ee4:	cmp	r2, #0
   28ee8:	str	r0, [sp, #48]	; 0x30
   28eec:	str	r1, [sp, #52]	; 0x34
   28ef0:	bne	27158 <__assert_fail@plt+0x14b64>
   28ef4:	mov	r0, #0
   28ef8:	mov	r1, #0
   28efc:	sub	r3, r9, #112	; 0x70
   28f00:	mov	r8, #60	; 0x3c
   28f04:	strd	r0, [sp, #16]
   28f08:	str	r2, [sp, #32]
   28f0c:	mov	r2, #18
   28f10:	str	r0, [sp, #40]	; 0x28
   28f14:	str	r1, [sp, #44]	; 0x2c
   28f18:	str	r0, [sp, #56]	; 0x38
   28f1c:	str	r1, [sp, #60]	; 0x3c
   28f20:	str	r0, [sp, #64]	; 0x40
   28f24:	str	r1, [sp, #68]	; 0x44
   28f28:	str	r3, [sp, #72]	; 0x48
   28f2c:	sub	r3, fp, #4
   28f30:	b	275c4 <__assert_fail@plt+0x14fd0>
   28f34:	mov	r6, #0
   28f38:	mov	r7, #0
   28f3c:	mov	r2, #56	; 0x38
   28f40:	mov	r1, #0
   28f44:	mov	r0, r4
   28f48:	strd	r6, [sp, #16]
   28f4c:	bl	12378 <memset@plt>
   28f50:	ldr	r2, [r9, #-48]	; 0xffffffd0
   28f54:	sub	r3, fp, #4
   28f58:	str	r2, [sp, #40]	; 0x28
   28f5c:	ldr	r2, [r9, #-44]	; 0xffffffd4
   28f60:	str	r6, [sp, #48]	; 0x30
   28f64:	str	r7, [sp, #52]	; 0x34
   28f68:	str	r6, [sp, #56]	; 0x38
   28f6c:	str	r7, [sp, #60]	; 0x3c
   28f70:	str	r2, [sp, #44]	; 0x2c
   28f74:	str	r6, [sp, #64]	; 0x40
   28f78:	str	r7, [sp, #68]	; 0x44
   28f7c:	b	28e30 <__assert_fail@plt+0x1683c>
   28f80:	ldrb	r8, [r8, #2192]	; 0x890
   28f84:	b	26d30 <__assert_fail@plt+0x1473c>
   28f88:	cmp	r3, #0
   28f8c:	beq	2985c <__assert_fail@plt+0x17268>
   28f90:	subs	r1, r4, #1
   28f94:	bvs	273d0 <__assert_fail@plt+0x14ddc>
   28f98:	ldr	r0, [sp, #84]	; 0x54
   28f9c:	str	r1, [sp, #304]	; 0x130
   28fa0:	mov	r1, #21
   28fa4:	sub	r3, r0, r3
   28fa8:	ldr	r0, [sp, #28]
   28fac:	str	r3, [sp, #308]	; 0x134
   28fb0:	str	r2, [r0]
   28fb4:	mov	r2, #276	; 0x114
   28fb8:	str	r2, [sp, #24]
   28fbc:	b	273bc <__assert_fail@plt+0x14dc8>
   28fc0:	mov	r0, r6
   28fc4:	str	r1, [sp, #16]
   28fc8:	bl	12300 <strlen@plt>
   28fcc:	cmp	r0, #3
   28fd0:	mov	r3, r0
   28fd4:	str	r0, [sp, #24]
   28fd8:	moveq	r3, #1
   28fdc:	beq	29000 <__assert_fail@plt+0x16a0c>
   28fe0:	ldr	r1, [sp, #16]
   28fe4:	cmp	r3, #4
   28fe8:	movne	r3, r1
   28fec:	bne	29000 <__assert_fail@plt+0x16a0c>
   28ff0:	ldrb	r7, [sp, #247]	; 0xf7
   28ff4:	sub	r3, r7, #46	; 0x2e
   28ff8:	clz	r3, r3
   28ffc:	lsr	r3, r3, #5
   29000:	ldr	r7, [pc, #-2884]	; 284c4 <__assert_fail@plt+0x15ed0>
   29004:	movw	ip, #31348	; 0x7a74
   29008:	movt	ip, #4
   2900c:	str	r4, [sp, #16]
   29010:	mov	r4, r7
   29014:	mov	r7, r3
   29018:	b	2903c <__assert_fail@plt+0x16a48>
   2901c:	bl	12594 <strncmp@plt>
   29020:	clz	r0, r0
   29024:	lsr	r0, r0, #5
   29028:	cmp	r0, #0
   2902c:	bne	290b4 <__assert_fail@plt+0x16ac0>
   29030:	ldr	ip, [r4, #12]!
   29034:	cmp	ip, #0
   29038:	beq	2907c <__assert_fail@plt+0x16a88>
   2903c:	cmp	r7, #0
   29040:	mov	r1, ip
   29044:	mov	r0, r6
   29048:	mov	r2, #3
   2904c:	bne	2901c <__assert_fail@plt+0x16a28>
   29050:	bl	11f40 <strcmp@plt>
   29054:	clz	r0, r0
   29058:	lsr	r0, r0, #5
   2905c:	b	29028 <__assert_fail@plt+0x16a34>
   29060:	ldrb	r3, [r2, #1]
   29064:	mov	r2, r0
   29068:	b	271a4 <__assert_fail@plt+0x14bb0>
   2906c:	mov	r0, #2
   29070:	b	2715c <__assert_fail@plt+0x14b68>
   29074:	mov	r0, #0
   29078:	b	2715c <__assert_fail@plt+0x14b68>
   2907c:	mov	r2, r0
   29080:	mov	r1, r6
   29084:	ldr	r4, [sp, #16]
   29088:	ldr	r0, [sp, #28]
   2908c:	str	r2, [sp, #16]
   29090:	bl	26b14 <__assert_fail@plt+0x14520>
   29094:	cmp	r0, #0
   29098:	ldr	r2, [sp, #16]
   2909c:	beq	290d4 <__assert_fail@plt+0x16ae0>
   290a0:	ldr	r3, [r0, #4]
   290a4:	ldr	r2, [r0, #8]
   290a8:	str	r3, [sp, #24]
   290ac:	asr	r3, r2, #31
   290b0:	b	27508 <__assert_fail@plt+0x14f14>
   290b4:	ldr	r3, [r4, #4]
   290b8:	ldr	r2, [r4, #8]
   290bc:	ldr	r4, [sp, #16]
   290c0:	str	r3, [sp, #24]
   290c4:	asr	r3, r2, #31
   290c8:	b	27508 <__assert_fail@plt+0x14f14>
   290cc:	mov	r6, #0
   290d0:	b	272a4 <__assert_fail@plt+0x14cb0>
   290d4:	movw	r1, #31376	; 0x7a90
   290d8:	movt	r1, #4
   290dc:	str	r2, [sp, #16]
   290e0:	mov	r0, r6
   290e4:	bl	11f40 <strcmp@plt>
   290e8:	cmp	r0, #0
   290ec:	ldr	r2, [sp, #16]
   290f0:	beq	2940c <__assert_fail@plt+0x16e18>
   290f4:	ldr	r3, [pc, #-3124]	; 284c8 <__assert_fail@plt+0x15ed4>
   290f8:	movw	r1, #31356	; 0x7a7c
   290fc:	movt	r1, #4
   29100:	mov	r7, r5
   29104:	mov	r5, r2
   29108:	str	r3, [sp, #16]
   2910c:	str	r4, [sp, #32]
   29110:	mov	r4, r3
   29114:	b	29124 <__assert_fail@plt+0x16b30>
   29118:	ldr	r1, [r4, #12]!
   2911c:	cmp	r1, #0
   29120:	beq	29428 <__assert_fail@plt+0x16e34>
   29124:	mov	r0, r6
   29128:	bl	11f40 <strcmp@plt>
   2912c:	cmp	r0, #0
   29130:	bne	29118 <__assert_fail@plt+0x16b24>
   29134:	ldr	r3, [r4, #4]
   29138:	mov	r5, r7
   2913c:	ldr	r2, [r4, #8]
   29140:	ldr	r4, [sp, #32]
   29144:	str	r3, [sp, #24]
   29148:	asr	r3, r2, #31
   2914c:	b	27508 <__assert_fail@plt+0x14f14>
   29150:	ldr	lr, [sp, #28]
   29154:	mov	r2, #14
   29158:	mvn	r8, #92	; 0x5c
   2915c:	ldrd	r0, [sp, #120]	; 0x78
   29160:	ldrd	r6, [r9]
   29164:	strd	r0, [lr, #64]	; 0x40
   29168:	ldrd	r0, [r9, #8]
   2916c:	strd	r6, [lr, #32]
   29170:	strd	r0, [sp, #120]	; 0x78
   29174:	ldrd	r0, [r9, #-216]	; 0xffffff28
   29178:	ldrd	r6, [sp, #120]	; 0x78
   2917c:	strd	r0, [lr, #56]	; 0x38
   29180:	ldrd	r0, [r9, #16]
   29184:	strd	r6, [lr, #40]	; 0x28
   29188:	strd	r0, [lr, #48]	; 0x30
   2918c:	b	275c4 <__assert_fail@plt+0x14fd0>
   29190:	ldrd	r2, [sp, #72]	; 0x48
   29194:	cmp	r2, #0
   29198:	sbcs	r3, r3, #0
   2919c:	bge	28580 <__assert_fail@plt+0x15f8c>
   291a0:	mov	r2, #100	; 0x64
   291a4:	mov	r3, #0
   291a8:	mov	r0, r6
   291ac:	mov	r1, r8
   291b0:	bl	424a0 <__assert_fail@plt+0x2feac>
   291b4:	mov	lr, r0
   291b8:	mov	ip, r1
   291bc:	mov	r0, r6
   291c0:	mov	r1, r8
   291c4:	mov	r2, #100	; 0x64
   291c8:	mov	r3, #0
   291cc:	mov	r6, lr
   291d0:	mov	r8, ip
   291d4:	bl	424a0 <__assert_fail@plt+0x2feac>
   291d8:	lsl	r1, r8, #4
   291dc:	lsl	r0, r6, #4
   291e0:	orr	r1, r1, r6, lsr #28
   291e4:	subs	r6, r0, r6
   291e8:	sbc	r8, r1, r8
   291ec:	lsl	r1, r6, #2
   291f0:	lsl	r8, r8, #2
   291f4:	adds	r0, r1, r2
   291f8:	orr	r8, r8, r6, lsr #30
   291fc:	adc	r8, r8, r3
   29200:	b	285d0 <__assert_fail@plt+0x15fdc>
   29204:	ldrd	r2, [sp, #72]	; 0x48
   29208:	cmp	r2, #0
   2920c:	sbcs	r3, r3, #0
   29210:	bge	28c0c <__assert_fail@plt+0x16618>
   29214:	mov	r2, #100	; 0x64
   29218:	mov	r3, #0
   2921c:	mov	r0, r6
   29220:	mov	r1, r8
   29224:	bl	424a0 <__assert_fail@plt+0x2feac>
   29228:	mov	lr, r0
   2922c:	mov	ip, r1
   29230:	mov	r0, r6
   29234:	mov	r1, r8
   29238:	mov	r2, #100	; 0x64
   2923c:	mov	r3, #0
   29240:	mov	r6, lr
   29244:	mov	r8, ip
   29248:	bl	424a0 <__assert_fail@plt+0x2feac>
   2924c:	lsl	r1, r8, #4
   29250:	lsl	r0, r6, #4
   29254:	orr	r1, r1, r6, lsr #28
   29258:	subs	r6, r0, r6
   2925c:	sbc	r8, r1, r8
   29260:	lsl	r1, r6, #2
   29264:	lsl	r8, r8, #2
   29268:	adds	r0, r1, r2
   2926c:	orr	r8, r8, r6, lsr #30
   29270:	adc	r8, r8, r3
   29274:	b	28c5c <__assert_fail@plt+0x16668>
   29278:	subs	ip, r2, r3
   2927c:	mov	r8, #0
   29280:	ldr	r3, [sp, #28]
   29284:	movvs	r8, #1
   29288:	subs	r6, r0, r6
   2928c:	sbcs	r7, r1, r7
   29290:	ldrd	r0, [sp, #152]	; 0x98
   29294:	mov	lr, #0
   29298:	movvs	lr, #1
   2929c:	strd	r6, [sp, #224]	; 0xe0
   292a0:	ldrd	r6, [sp, #144]	; 0x90
   292a4:	str	ip, [r3, #144]	; 0x90
   292a8:	mov	ip, #0
   292ac:	subs	r2, r0, r6
   292b0:	sbcs	r3, r1, r7
   292b4:	ldr	r1, [sp, #28]
   292b8:	movvs	ip, #1
   292bc:	strd	r2, [sp, #144]	; 0x90
   292c0:	ldrd	r6, [sp, #136]	; 0x88
   292c4:	ldrd	r2, [sp, #224]	; 0xe0
   292c8:	strd	r2, [r1, #136]	; 0x88
   292cc:	ldrd	r0, [sp, #160]	; 0xa0
   292d0:	subs	r2, r0, r6
   292d4:	sbcs	r3, r1, r7
   292d8:	ldr	r1, [sp, #28]
   292dc:	strd	r2, [sp, #152]	; 0x98
   292e0:	mov	r3, #0
   292e4:	ldrd	r6, [sp, #168]	; 0xa8
   292e8:	str	r3, [sp, #136]	; 0x88
   292ec:	ldrd	r2, [sp, #144]	; 0x90
   292f0:	strd	r2, [r1, #128]	; 0x80
   292f4:	movvs	r3, #1
   292f8:	ldrd	r0, [sp, #128]	; 0x80
   292fc:	strvs	r3, [sp, #136]	; 0x88
   29300:	subs	r2, r6, r0
   29304:	sbcs	r3, r7, r1
   29308:	ldr	r1, [sp, #28]
   2930c:	strd	r2, [sp, #144]	; 0x90
   29310:	mov	r3, #0
   29314:	ldrd	r6, [sp, #176]	; 0xb0
   29318:	str	r3, [sp, #128]	; 0x80
   2931c:	ldrd	r2, [sp, #152]	; 0x98
   29320:	strd	r2, [r1, #120]	; 0x78
   29324:	movvs	r3, #1
   29328:	ldrd	r0, [sp, #120]	; 0x78
   2932c:	strvs	r3, [sp, #128]	; 0x80
   29330:	subs	r2, r6, r0
   29334:	sbcs	r3, r7, r1
   29338:	ldr	r1, [sp, #28]
   2933c:	strd	r2, [sp, #152]	; 0x98
   29340:	mov	r3, #0
   29344:	str	r3, [sp, #120]	; 0x78
   29348:	ldrd	r2, [sp, #144]	; 0x90
   2934c:	strd	r2, [r1, #112]	; 0x70
   29350:	movvs	r3, #1
   29354:	strvs	r3, [sp, #120]	; 0x78
   29358:	ldrd	r6, [sp, #72]	; 0x48
   2935c:	ldrd	r0, [sp, #184]	; 0xb8
   29360:	subs	r2, r0, r6
   29364:	sbcs	r3, r1, r7
   29368:	ldrd	r0, [sp, #152]	; 0x98
   2936c:	mov	r6, r2
   29370:	mov	r7, r3
   29374:	mov	r2, #0
   29378:	ldr	r3, [sp, #28]
   2937c:	movvs	r2, #1
   29380:	strd	r0, [r3, #104]	; 0x68
   29384:	orr	r3, r8, lr
   29388:	mov	r1, r7
   2938c:	ldr	lr, [sp, #28]
   29390:	mov	r0, r6
   29394:	orr	r3, r3, ip
   29398:	strd	r0, [lr, #96]	; 0x60
   2939c:	ldr	r1, [sp, #136]	; 0x88
   293a0:	orr	r3, r3, r1
   293a4:	ldr	r1, [sp, #128]	; 0x80
   293a8:	orr	r3, r3, r1
   293ac:	ldr	r1, [sp, #120]	; 0x78
   293b0:	orr	r3, r3, r1
   293b4:	orr	r3, r3, r2
   293b8:	b	289d0 <__assert_fail@plt+0x163dc>
   293bc:	adds	r2, r0, r6
   293c0:	adcs	r3, r3, r7
   293c4:	mov	r0, r2
   293c8:	mov	r8, r3
   293cc:	movvs	r1, #1
   293d0:	movvc	r1, #0
   293d4:	b	285c8 <__assert_fail@plt+0x15fd4>
   293d8:	adds	r2, r0, r6
   293dc:	adcs	r3, r3, r7
   293e0:	mov	r0, r2
   293e4:	mov	r8, r3
   293e8:	movvs	r1, #1
   293ec:	movvc	r1, #0
   293f0:	b	28c54 <__assert_fail@plt+0x16660>
   293f4:	mov	r2, #0
   293f8:	mov	r3, r2
   293fc:	b	291d8 <__assert_fail@plt+0x16be4>
   29400:	mov	r2, #0
   29404:	mov	r3, r2
   29408:	b	2924c <__assert_fail@plt+0x16c58>
   2940c:	movw	r3, #259	; 0x103
   29410:	mov	r2, #0
   29414:	add	r1, sp, #304	; 0x130
   29418:	str	r3, [sp, #24]
   2941c:	mov	r3, #0
   29420:	strd	r2, [r1]
   29424:	b	273b0 <__assert_fail@plt+0x14dbc>
   29428:	ldr	r3, [sp, #24]
   2942c:	mov	r2, r5
   29430:	mov	r5, r7
   29434:	ldr	r4, [sp, #32]
   29438:	sub	r0, r3, #1
   2943c:	ldrb	r3, [r6, r0]
   29440:	add	r7, r6, r0
   29444:	cmp	r3, #83	; 0x53
   29448:	beq	297b0 <__assert_fail@plt+0x171bc>
   2944c:	movw	r1, #31364	; 0x7a84
   29450:	movt	r1, #4
   29454:	ldr	r7, [pc, #-3984]	; 284cc <__assert_fail@plt+0x15ed8>
   29458:	str	sl, [sp, #16]
   2945c:	mov	sl, r5
   29460:	mov	r5, r2
   29464:	b	29474 <__assert_fail@plt+0x16e80>
   29468:	ldr	r1, [r7, #12]!
   2946c:	cmp	r1, #0
   29470:	beq	296e0 <__assert_fail@plt+0x170ec>
   29474:	mov	r0, r6
   29478:	bl	11f40 <strcmp@plt>
   2947c:	cmp	r0, #0
   29480:	bne	29468 <__assert_fail@plt+0x16e74>
   29484:	ldr	r3, [r7, #4]
   29488:	mov	r5, sl
   2948c:	ldr	r2, [r7, #8]
   29490:	ldr	sl, [sp, #16]
   29494:	str	r3, [sp, #24]
   29498:	asr	r3, r2, #31
   2949c:	b	27508 <__assert_fail@plt+0x14f14>
   294a0:	ldm	r9, {r6, r8}
   294a4:	mov	lr, r3
   294a8:	mov	r1, r0
   294ac:	str	r6, [sp, #44]	; 0x2c
   294b0:	umull	r6, r7, r0, r2
   294b4:	cmp	lr, #0
   294b8:	strd	r6, [sp, #32]
   294bc:	umull	r6, r7, r1, lr
   294c0:	strd	r6, [sp, #16]
   294c4:	bge	294e0 <__assert_fail@plt+0x16eec>
   294c8:	mov	r7, #0
   294cc:	subs	r6, r6, r7
   294d0:	str	r6, [sp, #16]
   294d4:	ldr	r6, [sp, #20]
   294d8:	sbc	lr, r6, r1
   294dc:	str	lr, [sp, #20]
   294e0:	cmp	r1, #0
   294e4:	bge	29504 <__assert_fail@plt+0x16f10>
   294e8:	ldr	r1, [sp, #16]
   294ec:	ldr	lr, [sp, #44]	; 0x2c
   294f0:	subs	r1, r1, lr
   294f4:	str	r1, [sp, #16]
   294f8:	ldr	r1, [sp, #20]
   294fc:	sbc	r1, r1, r8
   29500:	str	r1, [sp, #20]
   29504:	ldrd	r6, [sp, #16]
   29508:	mov	lr, #0
   2950c:	ldr	r1, [sp, #36]	; 0x24
   29510:	adds	r1, r6, r1
   29514:	adc	lr, r7, lr
   29518:	cmp	lr, r1, asr #31
   2951c:	bne	299d4 <__assert_fail@plt+0x173e0>
   29520:	ldr	r3, [sp, #32]
   29524:	str	r3, [sp, #112]	; 0x70
   29528:	str	r1, [sp, #116]	; 0x74
   2952c:	b	28edc <__assert_fail@plt+0x168e8>
   29530:	cmp	r1, r3
   29534:	bne	2992c <__assert_fail@plt+0x17338>
   29538:	ldr	r1, [r9, #-48]	; 0xffffffd0
   2953c:	mov	lr, ip
   29540:	ldr	r8, [r9, #-44]	; 0xffffffd4
   29544:	str	r1, [sp, #44]	; 0x2c
   29548:	mov	r1, r2
   2954c:	b	294b0 <__assert_fail@plt+0x16ebc>
   29550:	ldm	r9, {r6, r8}
   29554:	mov	lr, r3
   29558:	mov	r1, r0
   2955c:	str	r6, [sp, #44]	; 0x2c
   29560:	umull	r6, r7, r0, r2
   29564:	cmp	lr, #0
   29568:	strd	r6, [sp, #32]
   2956c:	umull	r6, r7, r1, lr
   29570:	strd	r6, [sp, #16]
   29574:	bge	29590 <__assert_fail@plt+0x16f9c>
   29578:	mov	r7, #0
   2957c:	subs	r6, r6, r7
   29580:	str	r6, [sp, #16]
   29584:	ldr	r6, [sp, #20]
   29588:	sbc	lr, r6, r1
   2958c:	str	lr, [sp, #20]
   29590:	cmp	r1, #0
   29594:	bge	295b4 <__assert_fail@plt+0x16fc0>
   29598:	ldr	r1, [sp, #16]
   2959c:	ldr	lr, [sp, #44]	; 0x2c
   295a0:	subs	r1, r1, lr
   295a4:	str	r1, [sp, #16]
   295a8:	ldr	r1, [sp, #20]
   295ac:	sbc	r1, r1, r8
   295b0:	str	r1, [sp, #20]
   295b4:	ldrd	r6, [sp, #16]
   295b8:	mov	lr, #0
   295bc:	ldr	r1, [sp, #36]	; 0x24
   295c0:	adds	r1, r6, r1
   295c4:	adc	lr, r7, lr
   295c8:	cmp	lr, r1, asr #31
   295cc:	bne	29a00 <__assert_fail@plt+0x1740c>
   295d0:	ldr	r3, [sp, #32]
   295d4:	str	r3, [sp, #104]	; 0x68
   295d8:	str	r1, [sp, #108]	; 0x6c
   295dc:	b	27aa0 <__assert_fail@plt+0x154ac>
   295e0:	ldr	r1, [r9]
   295e4:	mov	lr, r3
   295e8:	mov	ip, r6
   295ec:	str	r1, [sp, #40]	; 0x28
   295f0:	ldr	r1, [r9, #4]
   295f4:	str	r1, [sp, #44]	; 0x2c
   295f8:	umull	r0, r1, r6, r2
   295fc:	cmp	lr, #0
   29600:	strd	r0, [sp, #16]
   29604:	umull	r0, r1, ip, lr
   29608:	bge	29618 <__assert_fail@plt+0x17024>
   2960c:	mov	r7, #0
   29610:	subs	r0, r0, r7
   29614:	sbc	r1, r1, ip
   29618:	cmp	ip, #0
   2961c:	bge	29630 <__assert_fail@plt+0x1703c>
   29620:	ldr	ip, [sp, #40]	; 0x28
   29624:	subs	r0, r0, ip
   29628:	ldr	ip, [sp, #44]	; 0x2c
   2962c:	sbc	r1, r1, ip
   29630:	ldr	ip, [sp, #20]
   29634:	mov	lr, #0
   29638:	adds	ip, r0, ip
   2963c:	adc	lr, r1, lr
   29640:	cmp	lr, ip, asr #31
   29644:	bne	29a64 <__assert_fail@plt+0x17470>
   29648:	ldr	r3, [sp, #16]
   2964c:	str	r3, [sp, #96]	; 0x60
   29650:	str	ip, [sp, #100]	; 0x64
   29654:	b	27b3c <__assert_fail@plt+0x15548>
   29658:	cmp	r1, r3
   2965c:	bne	29a20 <__assert_fail@plt+0x1742c>
   29660:	ldr	r1, [r9, #-48]	; 0xffffffd0
   29664:	mov	lr, ip
   29668:	ldr	r8, [r9, #-44]	; 0xffffffd4
   2966c:	str	r1, [sp, #44]	; 0x2c
   29670:	mov	r1, r2
   29674:	b	29560 <__assert_fail@plt+0x16f6c>
   29678:	cmp	r1, r3
   2967c:	bne	298d4 <__assert_fail@plt+0x172e0>
   29680:	ldr	r1, [r9, #-56]	; 0xffffffc8
   29684:	mov	lr, r8
   29688:	mov	ip, r2
   2968c:	str	r1, [sp, #40]	; 0x28
   29690:	ldr	r1, [r9, #-52]	; 0xffffffcc
   29694:	str	r1, [sp, #44]	; 0x2c
   29698:	b	295f8 <__assert_fail@plt+0x17004>
   2969c:	mov	r1, #60	; 0x3c
   296a0:	cmp	r8, #0
   296a4:	umull	r2, r3, r6, r1
   296a8:	strd	r2, [sp, #120]	; 0x78
   296ac:	umull	r2, r3, r1, r8
   296b0:	bge	296bc <__assert_fail@plt+0x170c8>
   296b4:	subs	r2, r2, lr
   296b8:	sbc	r3, r3, r1
   296bc:	ldr	r1, [sp, #124]	; 0x7c
   296c0:	mov	r0, #0
   296c4:	adds	r1, r2, r1
   296c8:	adc	r0, r3, r0
   296cc:	cmp	r0, r1, asr #31
   296d0:	bne	29894 <__assert_fail@plt+0x172a0>
   296d4:	mov	r3, r1
   296d8:	ldr	r6, [sp, #120]	; 0x78
   296dc:	b	28c24 <__assert_fail@plt+0x16630>
   296e0:	ldr	r3, [sp, #24]
   296e4:	mov	r2, r5
   296e8:	mov	r5, sl
   296ec:	ldrb	r0, [sp, #244]	; 0xf4
   296f0:	ldr	sl, [sp, #16]
   296f4:	cmp	r3, #1
   296f8:	beq	29820 <__assert_fail@plt+0x1722c>
   296fc:	cmp	r0, #0
   29700:	beq	29814 <__assert_fail@plt+0x17220>
   29704:	mov	r1, r6
   29708:	mov	r3, r6
   2970c:	cmp	r0, #46	; 0x2e
   29710:	ldrb	r0, [r1, #1]!
   29714:	addne	r3, r3, #1
   29718:	moveq	r2, #1
   2971c:	cmp	r0, #0
   29720:	strb	r0, [r3]
   29724:	bne	2970c <__assert_fail@plt+0x17118>
   29728:	cmp	r2, #0
   2972c:	beq	273d0 <__assert_fail@plt+0x14ddc>
   29730:	mov	r1, r6
   29734:	ldr	r0, [sp, #28]
   29738:	bl	26b14 <__assert_fail@plt+0x14520>
   2973c:	cmp	r0, #0
   29740:	bne	290a0 <__assert_fail@plt+0x16aac>
   29744:	b	273d0 <__assert_fail@plt+0x14ddc>
   29748:	mov	r1, #60	; 0x3c
   2974c:	cmp	r8, #0
   29750:	umull	r2, r3, r6, r1
   29754:	strd	r2, [sp, #120]	; 0x78
   29758:	umull	r2, r3, r1, r8
   2975c:	bge	29768 <__assert_fail@plt+0x17174>
   29760:	subs	r2, r2, lr
   29764:	sbc	r3, r3, r1
   29768:	ldr	r1, [sp, #124]	; 0x7c
   2976c:	mov	r0, #0
   29770:	adds	r1, r2, r1
   29774:	adc	r0, r3, r0
   29778:	cmp	r0, r1, asr #31
   2977c:	bne	299a8 <__assert_fail@plt+0x173b4>
   29780:	mov	r3, r1
   29784:	ldr	r6, [sp, #120]	; 0x78
   29788:	b	28598 <__assert_fail@plt+0x15fa4>
   2978c:	ldr	r1, [sp, #28]
   29790:	add	r3, r2, #1
   29794:	str	r3, [r1]
   29798:	ldrb	r3, [r2]
   2979c:	cmp	r3, #0
   297a0:	str	r3, [sp, #24]
   297a4:	ldreq	r1, [sp, #24]
   297a8:	bne	273b4 <__assert_fail@plt+0x14dc0>
   297ac:	b	26c84 <__assert_fail@plt+0x14690>
   297b0:	movw	r3, #31356	; 0x7a7c
   297b4:	movt	r3, #4
   297b8:	strb	r1, [r6, r0]
   297bc:	mov	r1, r3
   297c0:	str	sl, [sp, #32]
   297c4:	mov	sl, r5
   297c8:	mov	r5, r2
   297cc:	b	297e4 <__assert_fail@plt+0x171f0>
   297d0:	ldr	r3, [sp, #16]
   297d4:	ldr	r1, [r3, #12]!
   297d8:	cmp	r1, #0
   297dc:	str	r3, [sp, #16]
   297e0:	beq	2987c <__assert_fail@plt+0x17288>
   297e4:	mov	r0, r6
   297e8:	bl	11f40 <strcmp@plt>
   297ec:	cmp	r0, #0
   297f0:	bne	297d0 <__assert_fail@plt+0x171dc>
   297f4:	ldr	r3, [sp, #16]
   297f8:	mov	r5, sl
   297fc:	ldr	sl, [sp, #32]
   29800:	ldr	r2, [r3, #8]
   29804:	ldr	r3, [r3, #4]
   29808:	str	r3, [sp, #24]
   2980c:	asr	r3, r2, #31
   29810:	b	27508 <__assert_fail@plt+0x14f14>
   29814:	mov	r3, #63	; 0x3f
   29818:	str	r3, [sp, #24]
   2981c:	b	273b0 <__assert_fail@plt+0x14dbc>
   29820:	cmp	r0, #65	; 0x41
   29824:	ldrne	r3, [pc, #632]	; 29aa4 <__assert_fail@plt+0x174b0>
   29828:	bne	2983c <__assert_fail@plt+0x17248>
   2982c:	b	27398 <__assert_fail@plt+0x14da4>
   29830:	ldrb	ip, [ip]
   29834:	cmp	ip, r0
   29838:	beq	298c0 <__assert_fail@plt+0x172cc>
   2983c:	ldr	ip, [r3, #12]
   29840:	mov	r1, r3
   29844:	add	r3, r3, #12
   29848:	cmp	ip, #0
   2984c:	bne	29830 <__assert_fail@plt+0x1723c>
   29850:	cmp	r0, #0
   29854:	bne	29704 <__assert_fail@plt+0x17110>
   29858:	b	273d0 <__assert_fail@plt+0x14ddc>
   2985c:	mov	r0, #276	; 0x114
   29860:	mov	r1, #21
   29864:	str	r3, [sp, #308]	; 0x134
   29868:	ldr	r3, [sp, #28]
   2986c:	str	r0, [sp, #24]
   29870:	str	r4, [sp, #304]	; 0x130
   29874:	str	r2, [r3]
   29878:	b	273bc <__assert_fail@plt+0x14dc8>
   2987c:	mov	r3, #83	; 0x53
   29880:	mov	r2, r5
   29884:	mov	r5, sl
   29888:	ldr	sl, [sp, #32]
   2988c:	strb	r3, [r7]
   29890:	b	2944c <__assert_fail@plt+0x16e58>
   29894:	lsl	r3, r8, #4
   29898:	mov	lr, #1
   2989c:	lsl	r2, r6, #4
   298a0:	orr	r3, r3, r6, lsr #28
   298a4:	subs	r2, r2, r6
   298a8:	sbc	r3, r3, r8
   298ac:	lsl	r1, r2, #2
   298b0:	lsl	r3, r3, #2
   298b4:	mov	r6, r1
   298b8:	orr	r3, r3, r2, lsr #30
   298bc:	b	28c24 <__assert_fail@plt+0x16630>
   298c0:	ldr	r3, [r1, #16]
   298c4:	ldr	r2, [r1, #20]
   298c8:	str	r3, [sp, #24]
   298cc:	asr	r3, r2, #31
   298d0:	b	27508 <__assert_fail@plt+0x14f14>
   298d4:	mul	r1, r6, r3
   298d8:	add	r0, r8, #1
   298dc:	umull	r6, r7, r6, r2
   298e0:	cmp	r0, #1
   298e4:	mla	r2, r2, r8, r1
   298e8:	mov	r0, r6
   298ec:	add	r2, r2, r7
   298f0:	mov	r1, r2
   298f4:	mov	r7, r2
   298f8:	strd	r0, [sp, #96]	; 0x60
   298fc:	bhi	29920 <__assert_fail@plt+0x1732c>
   29900:	add	r2, r3, #1
   29904:	cmp	r2, #1
   29908:	bhi	29920 <__assert_fail@plt+0x1732c>
   2990c:	cmp	r8, r3
   29910:	bne	299ec <__assert_fail@plt+0x173f8>
   29914:	cmp	r6, #1
   29918:	sbcs	r3, r7, #0
   2991c:	bge	27b3c <__assert_fail@plt+0x15548>
   29920:	mov	r3, #1
   29924:	str	r3, [sp, #32]
   29928:	b	27b3c <__assert_fail@plt+0x15548>
   2992c:	mul	r8, r0, r3
   29930:	add	lr, ip, #1
   29934:	umull	r0, r1, r0, r2
   29938:	cmp	lr, #1
   2993c:	mla	r2, r2, ip, r8
   29940:	add	r1, r2, r1
   29944:	strd	r0, [sp, #112]	; 0x70
   29948:	bhi	2996c <__assert_fail@plt+0x17378>
   2994c:	add	r2, r3, #1
   29950:	cmp	r2, #1
   29954:	bhi	2996c <__assert_fail@plt+0x17378>
   29958:	cmp	ip, r3
   2995c:	bne	29a7c <__assert_fail@plt+0x17488>
   29960:	cmp	r0, #1
   29964:	sbcs	r3, r1, #0
   29968:	bge	28edc <__assert_fail@plt+0x168e8>
   2996c:	mov	r3, #1
   29970:	str	r3, [sp, #40]	; 0x28
   29974:	b	28edc <__assert_fail@plt+0x168e8>
   29978:	add	ip, sl, ip
   2997c:	sxth	r3, r2
   29980:	ldrb	r2, [ip, #2516]	; 0x9d4
   29984:	rsb	r6, r3, r3, lsl #3
   29988:	sub	r3, fp, r3, lsl #1
   2998c:	sub	r1, r9, r6, lsl #3
   29990:	sub	r2, r2, #28
   29994:	str	r1, [sp, #72]	; 0x48
   29998:	add	r1, sl, r2
   2999c:	add	r1, r1, #2608	; 0xa30
   299a0:	ldrsb	r8, [r1]
   299a4:	b	275c4 <__assert_fail@plt+0x14fd0>
   299a8:	lsl	r3, r8, #4
   299ac:	mov	lr, #1
   299b0:	lsl	r2, r6, #4
   299b4:	orr	r3, r3, r6, lsr #28
   299b8:	subs	r2, r2, r6
   299bc:	sbc	r3, r3, r8
   299c0:	lsl	r1, r2, #2
   299c4:	lsl	r3, r3, #2
   299c8:	mov	r6, r1
   299cc:	orr	r3, r3, r2, lsr #30
   299d0:	b	28598 <__assert_fail@plt+0x15fa4>
   299d4:	mul	r3, r0, r3
   299d8:	umull	r0, r1, r0, r2
   299dc:	mla	r3, r2, ip, r3
   299e0:	add	r1, r3, r1
   299e4:	strd	r0, [sp, #112]	; 0x70
   299e8:	b	2996c <__assert_fail@plt+0x17378>
   299ec:	ldrd	r2, [sp, #96]	; 0x60
   299f0:	cmp	r2, #0
   299f4:	sbcs	r3, r3, #0
   299f8:	blt	27b3c <__assert_fail@plt+0x15548>
   299fc:	b	29920 <__assert_fail@plt+0x1732c>
   29a00:	mul	r3, r0, r3
   29a04:	umull	r0, r1, r0, r2
   29a08:	mla	r2, r2, ip, r3
   29a0c:	add	r1, r2, r1
   29a10:	strd	r0, [sp, #104]	; 0x68
   29a14:	mov	r3, #1
   29a18:	str	r3, [sp, #40]	; 0x28
   29a1c:	b	27aa0 <__assert_fail@plt+0x154ac>
   29a20:	mul	r8, r0, r3
   29a24:	add	lr, ip, #1
   29a28:	umull	r0, r1, r0, r2
   29a2c:	cmp	lr, #1
   29a30:	mla	r2, r2, ip, r8
   29a34:	add	r1, r2, r1
   29a38:	strd	r0, [sp, #104]	; 0x68
   29a3c:	bhi	29a14 <__assert_fail@plt+0x17420>
   29a40:	add	r2, r3, #1
   29a44:	cmp	r2, #1
   29a48:	bhi	29a14 <__assert_fail@plt+0x17420>
   29a4c:	cmp	ip, r3
   29a50:	bne	29a90 <__assert_fail@plt+0x1749c>
   29a54:	cmp	r0, #1
   29a58:	sbcs	r3, r1, #0
   29a5c:	bge	27aa0 <__assert_fail@plt+0x154ac>
   29a60:	b	29a14 <__assert_fail@plt+0x17420>
   29a64:	mul	r3, r6, r3
   29a68:	umull	r0, r1, r6, r2
   29a6c:	mla	r2, r2, r8, r3
   29a70:	add	r1, r2, r1
   29a74:	strd	r0, [sp, #96]	; 0x60
   29a78:	b	29920 <__assert_fail@plt+0x1732c>
   29a7c:	ldrd	r2, [sp, #112]	; 0x70
   29a80:	cmp	r2, #0
   29a84:	sbcs	r3, r3, #0
   29a88:	blt	28edc <__assert_fail@plt+0x168e8>
   29a8c:	b	2996c <__assert_fail@plt+0x17378>
   29a90:	ldrd	r2, [sp, #104]	; 0x68
   29a94:	cmp	r2, #0
   29a98:	sbcs	r3, r3, #0
   29a9c:	blt	27aa0 <__assert_fail@plt+0x154ac>
   29aa0:	b	29a14 <__assert_fail@plt+0x17420>
   29aa4:	andeq	r7, r4, ip, asr #11
   29aa8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29aac:	subs	r5, r2, #0
   29ab0:	strd	r6, [sp, #8]
   29ab4:	strd	r8, [sp, #16]
   29ab8:	mov	r8, r3
   29abc:	strd	sl, [sp, #24]
   29ac0:	str	lr, [sp, #32]
   29ac4:	sub	sp, sp, #620	; 0x26c
   29ac8:	str	r0, [sp, #4]
   29acc:	beq	2a5d0 <__assert_fail@plt+0x17fdc>
   29ad0:	ldm	r5, {r7, sl}
   29ad4:	mov	r6, r1
   29ad8:	ldrb	r3, [r1], #1
   29adc:	cmp	r3, #9
   29ae0:	bcc	29af4 <__assert_fail@plt+0x17500>
   29ae4:	cmp	r3, #13
   29ae8:	bls	29ad4 <__assert_fail@plt+0x174e0>
   29aec:	cmp	r3, #32
   29af0:	beq	29ad4 <__assert_fail@plt+0x174e0>
   29af4:	mov	r2, #56	; 0x38
   29af8:	mov	r1, #0
   29afc:	add	r0, sp, #232	; 0xe8
   29b00:	bl	12378 <memset@plt>
   29b04:	movw	r1, #31472	; 0x7af0
   29b08:	movt	r1, #4
   29b0c:	mov	r2, #4
   29b10:	mov	r0, r6
   29b14:	bl	12594 <strncmp@plt>
   29b18:	cmp	r0, #0
   29b1c:	bne	29b7c <__assert_fail@plt+0x17588>
   29b20:	ldrb	ip, [r6, #4]
   29b24:	add	fp, r6, #4
   29b28:	cmp	ip, #0
   29b2c:	beq	29b7c <__assert_fail@plt+0x17588>
   29b30:	mov	r1, fp
   29b34:	mov	r3, ip
   29b38:	mov	r0, #1
   29b3c:	b	29b5c <__assert_fail@plt+0x17568>
   29b40:	cmp	r3, #34	; 0x22
   29b44:	beq	2a508 <__assert_fail@plt+0x17f14>
   29b48:	ldrb	r3, [r2, #1]
   29b4c:	add	r0, r0, #1
   29b50:	add	r1, r2, #1
   29b54:	cmp	r3, #0
   29b58:	beq	29b7c <__assert_fail@plt+0x17588>
   29b5c:	cmp	r3, #92	; 0x5c
   29b60:	mov	r2, r1
   29b64:	bne	29b40 <__assert_fail@plt+0x1754c>
   29b68:	ldrb	r3, [r1, #1]
   29b6c:	add	r2, r1, #1
   29b70:	cmp	r3, #92	; 0x5c
   29b74:	cmpne	r3, #34	; 0x22
   29b78:	beq	29b48 <__assert_fail@plt+0x17554>
   29b7c:	mov	r1, r5
   29b80:	add	r2, sp, #144	; 0x90
   29b84:	mov	r0, r8
   29b88:	bl	410e0 <__assert_fail@plt+0x2eaec>
   29b8c:	cmp	r0, #0
   29b90:	beq	2a5e8 <__assert_fail@plt+0x17ff4>
   29b94:	mov	r9, #0
   29b98:	str	r8, [sp]
   29b9c:	ldr	r2, [sp, #160]	; 0xa0
   29ba0:	add	r1, sp, #448	; 0x1c0
   29ba4:	movw	lr, #28528	; 0x6f70
   29ba8:	movt	lr, #4
   29bac:	movw	r0, #1900	; 0x76c
   29bb0:	str	sl, [sp, #484]	; 0x1e4
   29bb4:	ldrb	r5, [r6]
   29bb8:	add	r4, sp, #432	; 0x1b0
   29bbc:	add	ip, sp, #488	; 0x1e8
   29bc0:	ldr	sl, [sp, #152]	; 0x98
   29bc4:	add	r2, r2, #1
   29bc8:	asr	r3, r2, #31
   29bcc:	cmp	r5, #0
   29bd0:	ldr	r5, [sp, #144]	; 0x90
   29bd4:	moveq	r6, lr
   29bd8:	strd	r2, [r1]
   29bdc:	mov	r1, #0
   29be0:	asr	fp, sl, #31
   29be4:	ldr	lr, [sp, #156]	; 0x9c
   29be8:	mov	r3, #0
   29bec:	str	r6, [sp, #392]	; 0x188
   29bf0:	mov	r6, #39936	; 0x9c00
   29bf4:	movt	r6, #474	; 0x1da
   29bf8:	ldr	r2, [sp, #164]	; 0xa4
   29bfc:	str	r3, [sp, #440]	; 0x1b8
   29c00:	str	r5, [sp, #480]	; 0x1e0
   29c04:	adds	r0, r0, r2
   29c08:	adc	r1, r1, r2, asr #31
   29c0c:	ldr	r2, [sp, #176]	; 0xb0
   29c10:	strd	r0, [r4]
   29c14:	asr	r1, lr, #31
   29c18:	mov	r0, lr
   29c1c:	add	lr, sp, #456	; 0x1c8
   29c20:	add	r4, sp, #472	; 0x1d8
   29c24:	str	r2, [sp, #132]	; 0x84
   29c28:	strd	r0, [lr]
   29c2c:	add	lr, sp, #464	; 0x1d0
   29c30:	ldr	r0, [sp, #148]	; 0x94
   29c34:	strd	sl, [lr]
   29c38:	mov	lr, #2
   29c3c:	ldrd	sl, [sp, #240]	; 0xf0
   29c40:	str	lr, [sp, #420]	; 0x1a4
   29c44:	add	lr, sp, #264	; 0x108
   29c48:	asr	r1, r0, #31
   29c4c:	strd	sl, [ip, #8]
   29c50:	strd	r0, [r4]
   29c54:	ldrd	r0, [sp, #232]	; 0xe8
   29c58:	ldrd	r4, [sp, #248]	; 0xf8
   29c5c:	ldrd	sl, [lr]
   29c60:	add	lr, sp, #272	; 0x110
   29c64:	strd	r0, [ip]
   29c68:	add	r1, sp, #256	; 0x100
   29c6c:	ldrd	r0, [r1]
   29c70:	strd	r4, [ip, #16]
   29c74:	ldrd	r4, [lr]
   29c78:	strd	r0, [ip, #24]
   29c7c:	add	r1, sp, #280	; 0x118
   29c80:	ldrd	r0, [r1]
   29c84:	strd	r4, [ip, #40]	; 0x28
   29c88:	mov	r5, #42752	; 0xa700
   29c8c:	movt	r5, #118	; 0x76
   29c90:	strd	r0, [ip, #48]	; 0x30
   29c94:	movw	r1, #269	; 0x10d
   29c98:	strd	sl, [ip, #32]
   29c9c:	add	ip, sp, #544	; 0x220
   29ca0:	ldr	r4, [sp]
   29ca4:	strh	r3, [ip]
   29ca8:	ldr	r0, [sp, #184]	; 0xb8
   29cac:	str	r3, [sp, #548]	; 0x224
   29cb0:	str	r3, [sp, #552]	; 0x228
   29cb4:	str	r3, [sp, #556]	; 0x22c
   29cb8:	str	r3, [sp, #560]	; 0x230
   29cbc:	str	r3, [sp, #564]	; 0x234
   29cc0:	str	r3, [sp, #568]	; 0x238
   29cc4:	str	r3, [sp, #572]	; 0x23c
   29cc8:	str	r3, [sp, #576]	; 0x240
   29ccc:	str	r0, [sp, #580]	; 0x244
   29cd0:	str	r1, [sp, #584]	; 0x248
   29cd4:	str	r2, [sp, #588]	; 0x24c
   29cd8:	str	r3, [sp, #592]	; 0x250
   29cdc:	adds	r3, r7, r5
   29ce0:	add	r5, r5, #7733248	; 0x760000
   29ce4:	movvs	sl, #1
   29ce8:	movvc	sl, #0
   29cec:	cmp	sl, #0
   29cf0:	add	r2, sp, #188	; 0xbc
   29cf4:	str	r3, [sp, #68]	; 0x44
   29cf8:	add	r1, sp, #68	; 0x44
   29cfc:	mov	r0, r4
   29d00:	add	r5, r5, #42752	; 0xa700
   29d04:	bne	29d38 <__assert_fail@plt+0x17744>
   29d08:	bl	410e0 <__assert_fail@plt+0x2eaec>
   29d0c:	cmp	r0, #0
   29d10:	beq	29d30 <__assert_fail@plt+0x1773c>
   29d14:	ldr	r3, [sp, #228]	; 0xe4
   29d18:	cmp	r3, #0
   29d1c:	beq	29d30 <__assert_fail@plt+0x1773c>
   29d20:	ldr	r2, [sp, #220]	; 0xdc
   29d24:	ldr	r1, [sp, #588]	; 0x24c
   29d28:	cmp	r2, r1
   29d2c:	bne	2a670 <__assert_fail@plt+0x1807c>
   29d30:	cmp	r5, r6
   29d34:	bne	29cdc <__assert_fail@plt+0x176e8>
   29d38:	str	r4, [sp]
   29d3c:	ldr	r0, [sp, #580]	; 0x244
   29d40:	cmp	r0, #0
   29d44:	beq	29d60 <__assert_fail@plt+0x1776c>
   29d48:	ldr	r1, [sp, #592]	; 0x250
   29d4c:	cmp	r1, #0
   29d50:	beq	29d60 <__assert_fail@plt+0x1776c>
   29d54:	bl	11f40 <strcmp@plt>
   29d58:	cmp	r0, #0
   29d5c:	beq	2a5a8 <__assert_fail@plt+0x17fb4>
   29d60:	add	r0, sp, #392	; 0x188
   29d64:	bl	26bf4 <__assert_fail@plt+0x14600>
   29d68:	cmp	r0, #0
   29d6c:	bne	2a500 <__assert_fail@plt+0x17f0c>
   29d70:	ldrb	r5, [sp, #544]	; 0x220
   29d74:	cmp	r5, #0
   29d78:	beq	29dc4 <__assert_fail@plt+0x177d0>
   29d7c:	add	r3, sp, #480	; 0x1e0
   29d80:	ldr	r1, [sp, #4]
   29d84:	ldrd	r2, [r3]
   29d88:	strd	r2, [r1]
   29d8c:	ldr	r0, [sp]
   29d90:	cmp	r0, r8
   29d94:	beq	29d9c <__assert_fail@plt+0x177a8>
   29d98:	bl	410d0 <__assert_fail@plt+0x2eadc>
   29d9c:	mov	r0, r9
   29da0:	bl	2f668 <__assert_fail@plt+0x1d074>
   29da4:	mov	r0, r5
   29da8:	add	sp, sp, #620	; 0x26c
   29dac:	ldrd	r4, [sp]
   29db0:	ldrd	r6, [sp, #8]
   29db4:	ldrd	r8, [sp, #16]
   29db8:	ldrd	sl, [sp, #24]
   29dbc:	add	sp, sp, #32
   29dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   29dc4:	ldr	ip, [sp, #548]	; 0x224
   29dc8:	ldr	r1, [sp, #552]	; 0x228
   29dcc:	ldr	lr, [sp, #556]	; 0x22c
   29dd0:	ldr	fp, [sp, #564]	; 0x234
   29dd4:	str	r1, [sp, #8]
   29dd8:	ldr	r3, [sp, #568]	; 0x238
   29ddc:	ldr	r2, [sp, #560]	; 0x230
   29de0:	orr	sl, fp, ip
   29de4:	orr	sl, sl, r1
   29de8:	add	r3, lr, r3
   29dec:	orr	r3, r3, r2
   29df0:	orr	r3, r3, sl
   29df4:	cmp	r3, #1
   29df8:	bgt	29d8c <__assert_fail@plt+0x17798>
   29dfc:	add	r3, sp, #432	; 0x1b0
   29e00:	ldrd	r2, [r3]
   29e04:	cmp	r2, #0
   29e08:	sbcs	r1, r3, #0
   29e0c:	blt	2a630 <__assert_fail@plt+0x1803c>
   29e10:	ldr	r1, [sp, #440]	; 0x1b8
   29e14:	cmp	r1, #2
   29e18:	beq	2a610 <__assert_fail@plt+0x1801c>
   29e1c:	movw	r6, #63636	; 0xf894
   29e20:	movt	r6, #65535	; 0xffff
   29e24:	adds	r0, r2, r6
   29e28:	mvn	r7, #0
   29e2c:	movw	r6, #1900	; 0x76c
   29e30:	mov	r1, #0
   29e34:	str	r0, [sp, #16]
   29e38:	adc	r0, r3, r7
   29e3c:	mov	r7, #0
   29e40:	cmp	r3, r7
   29e44:	cmpeq	r2, r6
   29e48:	str	r0, [sp, #20]
   29e4c:	ldrd	r2, [sp, #16]
   29e50:	bcs	2a5fc <__assert_fail@plt+0x18008>
   29e54:	cmp	r2, #0
   29e58:	sbcs	r3, r3, #0
   29e5c:	bge	2a608 <__assert_fail@plt+0x18014>
   29e60:	ldrd	r6, [sp, #16]
   29e64:	asr	r3, r6, #31
   29e68:	str	r6, [sp, #120]	; 0x78
   29e6c:	cmp	r7, r3
   29e70:	cmpeq	r6, r6
   29e74:	movne	r1, #1
   29e78:	and	r1, r1, #1
   29e7c:	cmp	r1, #0
   29e80:	bne	29d8c <__assert_fail@plt+0x17798>
   29e84:	add	r3, sp, #448	; 0x1c0
   29e88:	mvn	r6, #0
   29e8c:	ldrd	r2, [r3]
   29e90:	mvn	r7, #0
   29e94:	adds	r4, r2, r6
   29e98:	adcs	r5, r3, r7
   29e9c:	asr	r3, r4, #31
   29ea0:	mov	r6, r4
   29ea4:	mov	r7, r5
   29ea8:	movvs	r5, #1
   29eac:	movvc	r5, #0
   29eb0:	cmp	r7, r3
   29eb4:	cmpeq	r4, r4
   29eb8:	strd	r6, [sp, #16]
   29ebc:	movne	r5, #1
   29ec0:	str	r4, [sp, #116]	; 0x74
   29ec4:	cmp	r5, #0
   29ec8:	bne	2a668 <__assert_fail@plt+0x18074>
   29ecc:	add	r3, sp, #456	; 0x1c8
   29ed0:	ldrd	r4, [r3]
   29ed4:	asr	r3, r4, #31
   29ed8:	strd	r4, [sp, #24]
   29edc:	str	r4, [sp, #112]	; 0x70
   29ee0:	cmp	r5, r3
   29ee4:	cmpeq	r4, r4
   29ee8:	bne	2a668 <__assert_fail@plt+0x18074>
   29eec:	cmp	fp, #0
   29ef0:	bne	2a68c <__assert_fail@plt+0x18098>
   29ef4:	ldr	r2, [sp, #8]
   29ef8:	ldrb	r3, [sp, #545]	; 0x221
   29efc:	orrs	r2, ip, r2
   29f00:	movne	r3, #0
   29f04:	andeq	r3, r3, #1
   29f08:	cmp	r3, #0
   29f0c:	bne	2a68c <__assert_fail@plt+0x18098>
   29f10:	str	fp, [sp, #8]
   29f14:	str	fp, [sp, #32]
   29f18:	str	fp, [sp, #100]	; 0x64
   29f1c:	str	fp, [sp, #104]	; 0x68
   29f20:	str	fp, [sp, #108]	; 0x6c
   29f24:	str	fp, [sp, #484]	; 0x1e4
   29f28:	cmp	sl, #0
   29f2c:	mvnne	r3, #0
   29f30:	strne	r3, [sp, #132]	; 0x84
   29f34:	cmp	lr, #0
   29f38:	bne	2a6dc <__assert_fail@plt+0x180e8>
   29f3c:	ldr	r3, [sp, #132]	; 0x84
   29f40:	str	r3, [sp, #40]	; 0x28
   29f44:	mvn	r3, #0
   29f48:	add	r1, sp, #100	; 0x64
   29f4c:	ldr	r0, [sp]
   29f50:	str	r3, [sp, #124]	; 0x7c
   29f54:	ldr	r3, [sp, #32]
   29f58:	str	fp, [sp, #188]	; 0xbc
   29f5c:	ldr	r2, [sp, #120]	; 0x78
   29f60:	str	r3, [sp, #192]	; 0xc0
   29f64:	ldr	r3, [sp, #8]
   29f68:	str	r2, [sp, #48]	; 0x30
   29f6c:	str	r3, [sp, #196]	; 0xc4
   29f70:	ldr	r3, [sp, #24]
   29f74:	str	r2, [sp, #208]	; 0xd0
   29f78:	str	r3, [sp, #200]	; 0xc8
   29f7c:	ldr	r3, [sp, #16]
   29f80:	str	r3, [sp, #204]	; 0xcc
   29f84:	ldr	r3, [sp, #40]	; 0x28
   29f88:	str	r3, [sp, #220]	; 0xdc
   29f8c:	bl	411a4 <__assert_fail@plt+0x2ebb0>
   29f90:	mov	sl, r0
   29f94:	add	r1, sp, #100	; 0x64
   29f98:	add	r0, sp, #188	; 0xbc
   29f9c:	bl	26a90 <__assert_fail@plt+0x1449c>
   29fa0:	subs	r5, r0, #0
   29fa4:	bne	2a130 <__assert_fail@plt+0x17b3c>
   29fa8:	ldr	r3, [sp, #568]	; 0x238
   29fac:	cmp	r3, #0
   29fb0:	beq	29d8c <__assert_fail@plt+0x17798>
   29fb4:	ldr	r7, [sp, #416]	; 0x1a0
   29fb8:	movw	r3, #46021	; 0xb3c5
   29fbc:	movt	r3, #37282	; 0x91a2
   29fc0:	mov	r2, #88	; 0x58
   29fc4:	movw	r0, #22616	; 0x5858
   29fc8:	add	sl, sp, #68	; 0x44
   29fcc:	movw	r1, #31480	; 0x7af8
   29fd0:	movt	r1, #4
   29fd4:	strh	r0, [sl], #3
   29fd8:	mov	r0, sl
   29fdc:	smull	ip, r3, r3, r7
   29fe0:	cmp	r7, #0
   29fe4:	strb	r2, [sp, #70]	; 0x46
   29fe8:	asr	r6, r7, #31
   29fec:	movlt	r2, #45	; 0x2d
   29ff0:	movge	r2, #43	; 0x2b
   29ff4:	add	r3, r3, r7
   29ff8:	rsb	r6, r6, r3, asr #11
   29ffc:	eor	r3, r6, r6, asr #31
   2a000:	sub	r3, r3, r6, asr #31
   2a004:	bl	124b0 <sprintf@plt>
   2a008:	mov	r3, #3600	; 0xe10
   2a00c:	mov	r1, r0
   2a010:	mls	r6, r3, r6, r7
   2a014:	cmp	r6, #0
   2a018:	beq	2a0b8 <__assert_fail@plt+0x17ac4>
   2a01c:	cmp	r6, #0
   2a020:	movw	r3, #34953	; 0x8889
   2a024:	movt	r3, #34952	; 0x8888
   2a028:	rsblt	r6, r6, #0
   2a02c:	movw	r0, #33205	; 0x81b5
   2a030:	movt	r0, #6990	; 0x1b4e
   2a034:	umull	ip, r3, r3, r6
   2a038:	movw	r2, #52429	; 0xcccd
   2a03c:	movt	r2, #52428	; 0xcccc
   2a040:	umull	ip, r0, r0, r6
   2a044:	mov	r7, #58	; 0x3a
   2a048:	lsr	ip, r3, #5
   2a04c:	strb	r7, [sl, r1]
   2a050:	add	r1, sl, r1
   2a054:	lsr	r0, r0, #6
   2a058:	rsb	r3, ip, ip, lsl #4
   2a05c:	umull	r4, lr, r2, ip
   2a060:	add	r0, r0, #48	; 0x30
   2a064:	subs	r3, r6, r3, lsl #2
   2a068:	strb	r0, [r1, #1]
   2a06c:	lsr	lr, lr, #3
   2a070:	add	r0, lr, lr, lsl #2
   2a074:	sub	r0, ip, r0, lsl #1
   2a078:	add	r0, r0, #48	; 0x30
   2a07c:	strb	r0, [r1, #2]
   2a080:	addeq	r0, r1, #3
   2a084:	beq	2a0b0 <__assert_fail@plt+0x17abc>
   2a088:	umull	r0, r2, r2, r3
   2a08c:	add	r0, r1, #6
   2a090:	strb	r7, [r1, #3]
   2a094:	lsr	r2, r2, #3
   2a098:	add	ip, r2, r2, lsl #2
   2a09c:	add	r2, r2, #48	; 0x30
   2a0a0:	sub	r3, r3, ip, lsl #1
   2a0a4:	strb	r2, [r1, #4]
   2a0a8:	add	r3, r3, #48	; 0x30
   2a0ac:	strb	r3, [r1, #5]
   2a0b0:	mov	r3, #0
   2a0b4:	strb	r3, [r0]
   2a0b8:	add	r0, sp, #68	; 0x44
   2a0bc:	bl	40e44 <__assert_fail@plt+0x2e850>
   2a0c0:	subs	r6, r0, #0
   2a0c4:	beq	29d8c <__assert_fail@plt+0x17798>
   2a0c8:	ldr	r2, [sp, #32]
   2a0cc:	mvn	r3, #0
   2a0d0:	add	r1, sp, #100	; 0x64
   2a0d4:	str	fp, [sp, #100]	; 0x64
   2a0d8:	str	r2, [sp, #104]	; 0x68
   2a0dc:	ldr	r2, [sp, #8]
   2a0e0:	str	r3, [sp, #124]	; 0x7c
   2a0e4:	ldr	r3, [sp, #40]	; 0x28
   2a0e8:	str	r2, [sp, #108]	; 0x6c
   2a0ec:	ldr	r2, [sp, #24]
   2a0f0:	str	r2, [sp, #112]	; 0x70
   2a0f4:	ldr	r2, [sp, #16]
   2a0f8:	str	r3, [sp, #132]	; 0x84
   2a0fc:	str	r2, [sp, #116]	; 0x74
   2a100:	ldr	r2, [sp, #48]	; 0x30
   2a104:	str	r2, [sp, #120]	; 0x78
   2a108:	bl	411a4 <__assert_fail@plt+0x2ebb0>
   2a10c:	mov	sl, r0
   2a110:	add	r1, sp, #100	; 0x64
   2a114:	add	r0, sp, #188	; 0xbc
   2a118:	bl	26a90 <__assert_fail@plt+0x1449c>
   2a11c:	mov	r5, r0
   2a120:	mov	r0, r6
   2a124:	bl	410d0 <__assert_fail@plt+0x2eadc>
   2a128:	cmp	r5, #0
   2a12c:	beq	29d8c <__assert_fail@plt+0x17798>
   2a130:	ldr	r3, [sp, #552]	; 0x228
   2a134:	cmp	r3, #0
   2a138:	beq	2a250 <__assert_fail@plt+0x17c5c>
   2a13c:	ldr	r3, [sp, #548]	; 0x224
   2a140:	cmp	r3, #0
   2a144:	bne	2a250 <__assert_fail@plt+0x17c5c>
   2a148:	add	r3, sp, #400	; 0x190
   2a14c:	ldrd	r4, [r3]
   2a150:	cmp	r4, #1
   2a154:	strd	r4, [sp, #16]
   2a158:	sbcs	r3, r5, #0
   2a15c:	blt	2a184 <__assert_fail@plt+0x17b90>
   2a160:	ldr	r0, [sp, #124]	; 0x7c
   2a164:	ldr	r1, [sp, #408]	; 0x198
   2a168:	cmp	r0, r1
   2a16c:	beq	2a184 <__assert_fail@plt+0x17b90>
   2a170:	subs	r3, r4, #1
   2a174:	str	r3, [sp, #16]
   2a178:	ldr	r3, [sp, #20]
   2a17c:	sbc	r3, r3, #0
   2a180:	str	r3, [sp, #20]
   2a184:	ldrd	r0, [sp, #16]
   2a188:	mov	ip, #0
   2a18c:	cmp	r1, r0, asr #31
   2a190:	bne	2a7a4 <__assert_fail@plt+0x181b0>
   2a194:	mov	r3, #7
   2a198:	smull	r2, r3, r0, r3
   2a19c:	mov	r6, r2
   2a1a0:	mov	lr, r3
   2a1a4:	cmp	ip, #0
   2a1a8:	mov	r1, lr
   2a1ac:	bne	2a500 <__assert_fail@plt+0x17f0c>
   2a1b0:	ldr	r2, [sp, #124]	; 0x7c
   2a1b4:	movw	lr, #9363	; 0x2493
   2a1b8:	movt	lr, #37449	; 0x9249
   2a1bc:	ldr	r3, [sp, #408]	; 0x198
   2a1c0:	sub	r3, r3, r2
   2a1c4:	add	r3, r3, #7
   2a1c8:	asr	r2, r3, #31
   2a1cc:	smull	r4, lr, lr, r3
   2a1d0:	add	lr, lr, r3
   2a1d4:	rsb	r2, r2, lr, asr #2
   2a1d8:	rsb	r2, r2, r2, lsl #3
   2a1dc:	sub	r3, r3, r2
   2a1e0:	mov	r2, r3
   2a1e4:	asr	r3, r3, #31
   2a1e8:	adds	r6, r2, r6
   2a1ec:	adcs	r7, r3, r1
   2a1f0:	movvs	r5, #1
   2a1f4:	movvc	r5, #0
   2a1f8:	bvs	2a500 <__assert_fail@plt+0x17f0c>
   2a1fc:	ldr	r2, [sp, #112]	; 0x70
   2a200:	asr	r3, r2, #31
   2a204:	adds	r0, r6, r2
   2a208:	adcs	r1, r7, r3
   2a20c:	asr	r3, r0, #31
   2a210:	str	r0, [sp, #112]	; 0x70
   2a214:	movvs	ip, #1
   2a218:	movvc	ip, #0
   2a21c:	cmp	r1, r3
   2a220:	cmpeq	r0, r0
   2a224:	movne	ip, #1
   2a228:	cmp	ip, #0
   2a22c:	bne	29d8c <__assert_fail@plt+0x17798>
   2a230:	mvn	r3, #0
   2a234:	add	r1, sp, #100	; 0x64
   2a238:	ldr	r0, [sp]
   2a23c:	str	r3, [sp, #132]	; 0x84
   2a240:	bl	411a4 <__assert_fail@plt+0x2ebb0>
   2a244:	cmn	r0, #1
   2a248:	mov	sl, r0
   2a24c:	beq	29d8c <__assert_fail@plt+0x17798>
   2a250:	add	r1, sp, #496	; 0x1f0
   2a254:	add	r3, sp, #488	; 0x1e8
   2a258:	ldrd	r4, [r1]
   2a25c:	add	r1, sp, #504	; 0x1f8
   2a260:	ldrd	r0, [r1]
   2a264:	ldrd	r6, [r3]
   2a268:	strd	r0, [sp, #16]
   2a26c:	ldr	ip, [sp, #16]
   2a270:	orr	r0, r6, r4
   2a274:	orr	r1, r7, r5
   2a278:	orr	r2, r0, ip
   2a27c:	ldr	ip, [sp, #20]
   2a280:	orr	r3, r1, ip
   2a284:	orrs	r3, r2, r3
   2a288:	beq	2a380 <__assert_fail@plt+0x17d8c>
   2a28c:	ldr	r2, [sp, #120]	; 0x78
   2a290:	asr	r3, r2, #31
   2a294:	adds	r0, r2, r6
   2a298:	mov	r6, r0
   2a29c:	adcs	r1, r3, r7
   2a2a0:	asr	r3, r0, #31
   2a2a4:	mov	r7, r1
   2a2a8:	movvs	r1, #1
   2a2ac:	movvc	r1, #0
   2a2b0:	cmp	r7, r3
   2a2b4:	cmpeq	r0, r0
   2a2b8:	strd	r6, [sp, #24]
   2a2bc:	bne	2a500 <__assert_fail@plt+0x17f0c>
   2a2c0:	cmp	r1, #0
   2a2c4:	bne	2a500 <__assert_fail@plt+0x17f0c>
   2a2c8:	ldr	r2, [sp, #116]	; 0x74
   2a2cc:	asr	r3, r2, #31
   2a2d0:	adds	r0, r2, r4
   2a2d4:	mov	r4, r0
   2a2d8:	adcs	r1, r3, r5
   2a2dc:	asr	r3, r0, #31
   2a2e0:	mov	r5, r1
   2a2e4:	movvs	r1, #1
   2a2e8:	movvc	r1, #0
   2a2ec:	cmp	r5, r3
   2a2f0:	cmpeq	r0, r0
   2a2f4:	strd	r4, [sp, #48]	; 0x30
   2a2f8:	bne	2a500 <__assert_fail@plt+0x17f0c>
   2a2fc:	cmp	r1, #0
   2a300:	bne	2a500 <__assert_fail@plt+0x17f0c>
   2a304:	ldrd	r0, [sp, #16]
   2a308:	ldr	r2, [sp, #112]	; 0x70
   2a30c:	asr	r3, r2, #31
   2a310:	adds	r6, r2, r0
   2a314:	adcs	r7, r3, r1
   2a318:	asr	r3, r6, #31
   2a31c:	movvs	r5, #1
   2a320:	movvc	r5, #0
   2a324:	cmp	r7, r3
   2a328:	cmpeq	r6, r6
   2a32c:	bne	2a500 <__assert_fail@plt+0x17f0c>
   2a330:	cmp	r5, #0
   2a334:	bne	2a500 <__assert_fail@plt+0x17f0c>
   2a338:	add	r1, sp, #100	; 0x64
   2a33c:	ldr	r0, [sp]
   2a340:	str	fp, [sp, #100]	; 0x64
   2a344:	ldr	r3, [sp, #32]
   2a348:	str	r3, [sp, #104]	; 0x68
   2a34c:	ldr	r3, [sp, #8]
   2a350:	str	r6, [sp, #112]	; 0x70
   2a354:	str	r3, [sp, #108]	; 0x6c
   2a358:	ldr	r3, [sp, #48]	; 0x30
   2a35c:	str	r3, [sp, #116]	; 0x74
   2a360:	ldr	r3, [sp, #24]
   2a364:	str	r3, [sp, #120]	; 0x78
   2a368:	ldr	r3, [sp, #40]	; 0x28
   2a36c:	str	r3, [sp, #132]	; 0x84
   2a370:	bl	411a4 <__assert_fail@plt+0x2ebb0>
   2a374:	cmn	r0, #1
   2a378:	mov	sl, r0
   2a37c:	beq	29d8c <__assert_fail@plt+0x17798>
   2a380:	ldr	r3, [sp, #568]	; 0x238
   2a384:	cmp	r3, #0
   2a388:	beq	2a3bc <__assert_fail@plt+0x17dc8>
   2a38c:	ldr	r2, [sp, #136]	; 0x88
   2a390:	ldr	r1, [sp, #416]	; 0x1a0
   2a394:	asr	r5, r2, #31
   2a398:	subs	r2, r1, r2
   2a39c:	rsc	r3, r5, r1, asr #31
   2a3a0:	subs	r4, sl, r2
   2a3a4:	asr	r1, r4, #31
   2a3a8:	rsc	r5, r3, sl, asr #31
   2a3ac:	cmp	r5, r1
   2a3b0:	cmpeq	r4, r4
   2a3b4:	bne	2a500 <__assert_fail@plt+0x17f0c>
   2a3b8:	mov	sl, r4
   2a3bc:	ldr	r0, [sp, #512]	; 0x200
   2a3c0:	mov	r5, #0
   2a3c4:	ldr	r2, [sp, #516]	; 0x204
   2a3c8:	cmp	r2, r0, asr #31
   2a3cc:	bne	2a76c <__assert_fail@plt+0x18178>
   2a3d0:	mov	r2, #3600	; 0xe10
   2a3d4:	smull	r2, r3, r0, r2
   2a3d8:	mov	r0, r2
   2a3dc:	cmp	r5, #0
   2a3e0:	bne	2a500 <__assert_fail@plt+0x17f0c>
   2a3e4:	asr	fp, sl, #31
   2a3e8:	adds	r0, sl, r0
   2a3ec:	adcs	r1, fp, r3
   2a3f0:	movvs	r3, #1
   2a3f4:	movvc	r3, #0
   2a3f8:	bvs	29d8c <__assert_fail@plt+0x17798>
   2a3fc:	ldr	r2, [sp, #520]	; 0x208
   2a400:	mov	r5, r3
   2a404:	ldr	r6, [sp, #524]	; 0x20c
   2a408:	cmp	r6, r2, asr #31
   2a40c:	bne	2a7f8 <__assert_fail@plt+0x18204>
   2a410:	mov	r6, #60	; 0x3c
   2a414:	smull	r6, r7, r2, r6
   2a418:	mov	lr, r6
   2a41c:	mov	ip, r7
   2a420:	cmp	r5, #0
   2a424:	bne	2a500 <__assert_fail@plt+0x17f0c>
   2a428:	adds	r6, r0, lr
   2a42c:	adcs	r7, r1, ip
   2a430:	movvs	r1, #1
   2a434:	movvc	r1, #0
   2a438:	bvs	29d8c <__assert_fail@plt+0x17798>
   2a43c:	add	r3, sp, #528	; 0x210
   2a440:	ldrd	r2, [r3]
   2a444:	adds	r4, r6, r2
   2a448:	adcs	r5, r7, r3
   2a44c:	strd	r4, [sp, #8]
   2a450:	movvs	r5, #1
   2a454:	movvc	r5, #0
   2a458:	bvs	2a668 <__assert_fail@plt+0x18074>
   2a45c:	ldr	ip, [sp, #484]	; 0x1e4
   2a460:	mov	r6, #51712	; 0xca00
   2a464:	movt	r6, #15258	; 0x3b9a
   2a468:	mov	r4, #0
   2a46c:	ldr	r0, [sp, #536]	; 0x218
   2a470:	add	r3, pc, #952	; 0x3b8
   2a474:	ldrd	r2, [r3]
   2a478:	asr	r1, r0, #31
   2a47c:	adds	sl, r0, ip
   2a480:	mov	r0, sl
   2a484:	adc	fp, r1, ip, asr #31
   2a488:	mov	r1, fp
   2a48c:	bl	424a0 <__assert_fail@plt+0x2feac>
   2a490:	adds	r0, r2, r6
   2a494:	mov	r2, r6
   2a498:	adc	r1, r3, r4
   2a49c:	mov	r3, r4
   2a4a0:	bl	424a0 <__assert_fail@plt+0x2feac>
   2a4a4:	mov	r7, r2
   2a4a8:	mov	r1, r3
   2a4ac:	subs	r0, sl, r7
   2a4b0:	mov	r2, r6
   2a4b4:	sbc	r1, fp, r1
   2a4b8:	mov	r3, r4
   2a4bc:	bl	424a0 <__assert_fail@plt+0x2feac>
   2a4c0:	ldrd	sl, [sp, #8]
   2a4c4:	asr	r1, r0, #31
   2a4c8:	adds	r2, sl, r0
   2a4cc:	adcs	r3, fp, r1
   2a4d0:	asr	r1, r2, #31
   2a4d4:	movvs	ip, #1
   2a4d8:	movvc	ip, r4
   2a4dc:	cmp	r3, r1
   2a4e0:	cmpeq	r2, r2
   2a4e4:	bne	29d8c <__assert_fail@plt+0x17798>
   2a4e8:	cmp	ip, r4
   2a4ec:	bne	29d8c <__assert_fail@plt+0x17798>
   2a4f0:	ldr	r1, [sp, #4]
   2a4f4:	mov	r5, #1
   2a4f8:	stm	r1, {r2, r7}
   2a4fc:	b	29d8c <__assert_fail@plt+0x17798>
   2a500:	mov	r5, #0
   2a504:	b	29d8c <__assert_fail@plt+0x17798>
   2a508:	cmp	r0, #100	; 0x64
   2a50c:	addle	r0, sp, #292	; 0x124
   2a510:	movle	r9, #0
   2a514:	bgt	2a5b8 <__assert_fail@plt+0x17fc4>
   2a518:	cmp	ip, #34	; 0x22
   2a51c:	mov	r2, r0
   2a520:	beq	2a54c <__assert_fail@plt+0x17f58>
   2a524:	sub	ip, ip, #92	; 0x5c
   2a528:	clz	ip, ip
   2a52c:	lsr	ip, ip, #5
   2a530:	add	r3, fp, ip
   2a534:	ldrb	r1, [fp, ip]
   2a538:	add	fp, r3, #1
   2a53c:	ldrb	ip, [r3, #1]
   2a540:	strb	r1, [r2], #1
   2a544:	cmp	ip, #34	; 0x22
   2a548:	bne	2a524 <__assert_fail@plt+0x17f30>
   2a54c:	mov	r3, #0
   2a550:	strb	r3, [r2]
   2a554:	bl	40e44 <__assert_fail@plt+0x2e850>
   2a558:	subs	r4, r0, #0
   2a55c:	str	r4, [sp]
   2a560:	beq	2a5f4 <__assert_fail@plt+0x18000>
   2a564:	add	fp, fp, #1
   2a568:	mov	r6, fp
   2a56c:	ldrb	r3, [fp], #1
   2a570:	cmp	r3, #9
   2a574:	bcc	2a588 <__assert_fail@plt+0x17f94>
   2a578:	cmp	r3, #13
   2a57c:	bls	2a568 <__assert_fail@plt+0x17f74>
   2a580:	cmp	r3, #32
   2a584:	beq	2a568 <__assert_fail@plt+0x17f74>
   2a588:	str	r4, [sp]
   2a58c:	mov	r1, r5
   2a590:	add	r2, sp, #144	; 0x90
   2a594:	ldr	r0, [sp]
   2a598:	bl	410e0 <__assert_fail@plt+0x2eaec>
   2a59c:	subs	r5, r0, #0
   2a5a0:	bne	29b9c <__assert_fail@plt+0x175a8>
   2a5a4:	b	29d8c <__assert_fail@plt+0x17798>
   2a5a8:	mvn	r3, #0
   2a5ac:	str	r3, [sp, #588]	; 0x24c
   2a5b0:	str	r0, [sp, #592]	; 0x250
   2a5b4:	b	29d60 <__assert_fail@plt+0x1776c>
   2a5b8:	bl	31b54 <__assert_fail@plt+0x1f560>
   2a5bc:	subs	r9, r0, #0
   2a5c0:	beq	2a5e8 <__assert_fail@plt+0x17ff4>
   2a5c4:	ldrb	ip, [r6, #4]
   2a5c8:	mov	r0, r9
   2a5cc:	b	2a518 <__assert_fail@plt+0x17f24>
   2a5d0:	add	r0, sp, #60	; 0x3c
   2a5d4:	str	r1, [sp]
   2a5d8:	mov	r5, r0
   2a5dc:	bl	41ab8 <__assert_fail@plt+0x2f4c4>
   2a5e0:	ldr	r1, [sp]
   2a5e4:	b	29ad0 <__assert_fail@plt+0x174dc>
   2a5e8:	mov	r5, #0
   2a5ec:	mov	r9, r5
   2a5f0:	b	29d9c <__assert_fail@plt+0x177a8>
   2a5f4:	ldr	r5, [sp]
   2a5f8:	b	29d9c <__assert_fail@plt+0x177a8>
   2a5fc:	cmp	r2, #0
   2a600:	sbcs	r3, r3, #0
   2a604:	bge	29e60 <__assert_fail@plt+0x1786c>
   2a608:	mov	r1, #1
   2a60c:	b	29e60 <__assert_fail@plt+0x1786c>
   2a610:	cmp	r2, #69	; 0x45
   2a614:	sbcs	r1, r3, #0
   2a618:	mov	r1, #0
   2a61c:	movwge	r6, #1900	; 0x76c
   2a620:	movlt	r6, #2000	; 0x7d0
   2a624:	adds	r2, r2, r6
   2a628:	adc	r3, r3, r1
   2a62c:	b	29e1c <__assert_fail@plt+0x17828>
   2a630:	movw	r0, #63636	; 0xf894
   2a634:	movt	r0, #65535	; 0xffff
   2a638:	subs	r6, r0, r2
   2a63c:	mvn	r1, #0
   2a640:	sbcs	r7, r1, r3
   2a644:	asr	r3, r6, #31
   2a648:	mov	r4, r5
   2a64c:	movvs	r4, #1
   2a650:	str	r6, [sp, #120]	; 0x78
   2a654:	cmp	r7, r3
   2a658:	cmpeq	r6, r6
   2a65c:	movne	r4, #1
   2a660:	and	r1, r4, #1
   2a664:	b	29e7c <__assert_fail@plt+0x17888>
   2a668:	mov	r5, r1
   2a66c:	b	29d8c <__assert_fail@plt+0x17798>
   2a670:	movw	r1, #269	; 0x10d
   2a674:	str	r4, [sp]
   2a678:	str	r3, [sp, #592]	; 0x250
   2a67c:	str	r1, [sp, #596]	; 0x254
   2a680:	str	r2, [sp, #600]	; 0x258
   2a684:	str	sl, [sp, #604]	; 0x25c
   2a688:	b	29d3c <__assert_fail@plt+0x17748>
   2a68c:	ldr	r1, [sp, #420]	; 0x1a4
   2a690:	add	r3, sp, #464	; 0x1d0
   2a694:	ldrd	r2, [r3]
   2a698:	cmp	r1, #0
   2a69c:	str	r1, [sp, #8]
   2a6a0:	beq	2a73c <__assert_fail@plt+0x18148>
   2a6a4:	cmp	r1, #1
   2a6a8:	beq	2a6ec <__assert_fail@plt+0x180f8>
   2a6ac:	cmp	r3, #0
   2a6b0:	cmpeq	r2, #23
   2a6b4:	bhi	2a72c <__assert_fail@plt+0x18138>
   2a6b8:	str	r2, [sp, #8]
   2a6bc:	ldr	r3, [sp, #8]
   2a6c0:	str	r3, [sp, #108]	; 0x6c
   2a6c4:	ldr	r3, [sp, #472]	; 0x1d8
   2a6c8:	ldr	fp, [sp, #480]	; 0x1e0
   2a6cc:	str	r3, [sp, #32]
   2a6d0:	str	fp, [sp, #100]	; 0x64
   2a6d4:	str	r3, [sp, #104]	; 0x68
   2a6d8:	b	29f28 <__assert_fail@plt+0x17934>
   2a6dc:	ldr	r3, [sp, #412]	; 0x19c
   2a6e0:	str	r3, [sp, #40]	; 0x28
   2a6e4:	str	r3, [sp, #132]	; 0x84
   2a6e8:	b	29f44 <__assert_fail@plt+0x17950>
   2a6ec:	subs	r1, r2, #1
   2a6f0:	str	r1, [sp, #40]	; 0x28
   2a6f4:	sbc	r1, r3, #0
   2a6f8:	str	r1, [sp, #44]	; 0x2c
   2a6fc:	ldrd	r0, [sp, #40]	; 0x28
   2a700:	cmp	r1, #0
   2a704:	cmpeq	r0, #10
   2a708:	addls	r3, r2, #12
   2a70c:	strls	r3, [sp, #8]
   2a710:	bls	2a6bc <__assert_fail@plt+0x180c8>
   2a714:	cmp	r3, #0
   2a718:	cmpeq	r2, #12
   2a71c:	moveq	r3, #12
   2a720:	streq	r3, [sp, #8]
   2a724:	streq	r3, [sp, #108]	; 0x6c
   2a728:	beq	2a6c4 <__assert_fail@plt+0x180d0>
   2a72c:	mvn	r3, #0
   2a730:	mov	r5, #0
   2a734:	str	r3, [sp, #108]	; 0x6c
   2a738:	b	29d8c <__assert_fail@plt+0x17798>
   2a73c:	subs	r1, r2, #1
   2a740:	str	r1, [sp, #32]
   2a744:	sbc	r1, r3, #0
   2a748:	str	r1, [sp, #36]	; 0x24
   2a74c:	ldrd	r0, [sp, #32]
   2a750:	cmp	r1, #0
   2a754:	cmpeq	r0, #10
   2a758:	bls	2a6b8 <__assert_fail@plt+0x180c4>
   2a75c:	cmp	r3, #0
   2a760:	cmpeq	r2, #12
   2a764:	beq	2a6bc <__assert_fail@plt+0x180c8>
   2a768:	b	2a72c <__assert_fail@plt+0x18138>
   2a76c:	mov	ip, #3600	; 0xe10
   2a770:	cmp	r2, #0
   2a774:	umull	r0, r1, r0, ip
   2a778:	umull	r6, r7, ip, r2
   2a77c:	bge	2a788 <__assert_fail@plt+0x18194>
   2a780:	subs	r6, r6, r5
   2a784:	sbc	r7, r7, ip
   2a788:	adds	r2, r6, r1
   2a78c:	mov	lr, #0
   2a790:	adc	r3, r7, lr
   2a794:	cmp	r3, r2, asr #31
   2a798:	bne	2a838 <__assert_fail@plt+0x18244>
   2a79c:	mov	r3, r2
   2a7a0:	b	2a3dc <__assert_fail@plt+0x17de8>
   2a7a4:	ldrd	r2, [sp, #16]
   2a7a8:	mov	lr, #7
   2a7ac:	cmp	r3, #0
   2a7b0:	umull	r6, r7, r2, lr
   2a7b4:	umull	r0, r1, lr, r3
   2a7b8:	bge	2a7c4 <__assert_fail@plt+0x181d0>
   2a7bc:	subs	r0, r0, ip
   2a7c0:	sbc	r1, r1, lr
   2a7c4:	adds	lr, r0, r7
   2a7c8:	mov	r5, #0
   2a7cc:	adc	r5, r1, r5
   2a7d0:	cmp	r5, lr, asr #31
   2a7d4:	beq	2a1a4 <__assert_fail@plt+0x17bb0>
   2a7d8:	ldrd	r2, [sp, #16]
   2a7dc:	mov	ip, #1
   2a7e0:	lsl	lr, r3, #3
   2a7e4:	lsl	r1, r2, #3
   2a7e8:	orr	lr, lr, r2, lsr #29
   2a7ec:	subs	r6, r1, r2
   2a7f0:	sbc	lr, lr, r3
   2a7f4:	b	2a1a4 <__assert_fail@plt+0x17bb0>
   2a7f8:	mov	ip, #60	; 0x3c
   2a7fc:	cmp	r6, #0
   2a800:	umull	r2, r3, r2, ip
   2a804:	umull	r6, r7, ip, r6
   2a808:	bge	2a814 <__assert_fail@plt+0x18220>
   2a80c:	subs	r6, r6, r5
   2a810:	sbc	r7, r7, ip
   2a814:	adds	ip, r6, r3
   2a818:	mov	lr, #0
   2a81c:	adc	lr, r7, lr
   2a820:	cmp	lr, ip, asr #31
   2a824:	bne	2a880 <__assert_fail@plt+0x1828c>
   2a828:	mov	lr, r2
   2a82c:	b	2a420 <__assert_fail@plt+0x17e2c>
   2a830:	blcc	fe6dd038 <stdout@@GLIBC_2.4+0xfe683ae4>
   2a834:	andeq	r0, r0, r0
   2a838:	ldr	r0, [sp, #512]	; 0x200
   2a83c:	mov	r5, #1
   2a840:	ldr	r1, [sp, #516]	; 0x204
   2a844:	lsl	r2, r0, #3
   2a848:	lsl	r3, r1, #3
   2a84c:	subs	r2, r2, r0
   2a850:	lsl	ip, r2, #5
   2a854:	orr	r3, r3, r0, lsr #29
   2a858:	sbc	r3, r3, r1
   2a85c:	lsl	r3, r3, #5
   2a860:	orr	r3, r3, r2, lsr #27
   2a864:	adds	r2, ip, r0
   2a868:	adc	r3, r3, r1
   2a86c:	lsl	r1, r2, #4
   2a870:	lsl	r3, r3, #4
   2a874:	mov	r0, r1
   2a878:	orr	r3, r3, r2, lsr #28
   2a87c:	b	2a3dc <__assert_fail@plt+0x17de8>
   2a880:	ldr	lr, [sp, #520]	; 0x208
   2a884:	mov	r5, #1
   2a888:	ldr	r3, [sp, #524]	; 0x20c
   2a88c:	lsl	r2, lr, #4
   2a890:	lsl	ip, r3, #4
   2a894:	subs	r2, r2, lr
   2a898:	orr	ip, ip, lr, lsr #28
   2a89c:	sbc	ip, ip, r3
   2a8a0:	lsl	r3, r2, #2
   2a8a4:	lsl	ip, ip, #2
   2a8a8:	orr	ip, ip, r2, lsr #30
   2a8ac:	mov	r2, r3
   2a8b0:	b	2a828 <__assert_fail@plt+0x18234>
   2a8b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2a8b8:	mov	r5, r0
   2a8bc:	movw	r0, #31488	; 0x7b00
   2a8c0:	movt	r0, #4
   2a8c4:	strd	r6, [sp, #8]
   2a8c8:	mov	r6, r1
   2a8cc:	mov	r7, r2
   2a8d0:	str	r8, [sp, #16]
   2a8d4:	str	lr, [sp, #20]
   2a8d8:	bl	12228 <getenv@plt>
   2a8dc:	bl	40e44 <__assert_fail@plt+0x2e850>
   2a8e0:	subs	r4, r0, #0
   2a8e4:	moveq	r5, r4
   2a8e8:	beq	2a90c <__assert_fail@plt+0x18318>
   2a8ec:	mov	r0, r5
   2a8f0:	mov	r2, r7
   2a8f4:	mov	r1, r6
   2a8f8:	mov	r3, r4
   2a8fc:	bl	29aa8 <__assert_fail@plt+0x174b4>
   2a900:	mov	r5, r0
   2a904:	mov	r0, r4
   2a908:	bl	410d0 <__assert_fail@plt+0x2eadc>
   2a90c:	mov	r0, r5
   2a910:	ldrd	r4, [sp]
   2a914:	ldrd	r6, [sp, #8]
   2a918:	ldr	r8, [sp, #16]
   2a91c:	add	sp, sp, #20
   2a920:	pop	{pc}		; (ldr pc, [sp], #4)
   2a924:	strd	r4, [sp, #-16]!
   2a928:	subs	r4, r0, #0
   2a92c:	str	r6, [sp, #8]
   2a930:	str	lr, [sp, #12]
   2a934:	beq	2a9cc <__assert_fail@plt+0x183d8>
   2a938:	mov	r1, #47	; 0x2f
   2a93c:	bl	12468 <strrchr@plt>
   2a940:	subs	r5, r0, #0
   2a944:	beq	2a9a4 <__assert_fail@plt+0x183b0>
   2a948:	add	r6, r5, #1
   2a94c:	sub	r3, r6, r4
   2a950:	cmp	r3, #6
   2a954:	ble	2a9a4 <__assert_fail@plt+0x183b0>
   2a958:	movw	r1, #32280	; 0x7e18
   2a95c:	movt	r1, #4
   2a960:	mov	r2, #7
   2a964:	sub	r0, r5, #6
   2a968:	bl	12594 <strncmp@plt>
   2a96c:	cmp	r0, #0
   2a970:	bne	2a9a4 <__assert_fail@plt+0x183b0>
   2a974:	movw	r1, #32288	; 0x7e20
   2a978:	movt	r1, #4
   2a97c:	mov	r2, #3
   2a980:	mov	r0, r6
   2a984:	bl	12594 <strncmp@plt>
   2a988:	cmp	r0, #0
   2a98c:	movne	r4, r6
   2a990:	bne	2a9a4 <__assert_fail@plt+0x183b0>
   2a994:	add	r4, r5, #4
   2a998:	movw	r3, #38200	; 0x9538
   2a99c:	movt	r3, #5
   2a9a0:	str	r4, [r3]
   2a9a4:	movw	r2, #40196	; 0x9d04
   2a9a8:	movt	r2, #5
   2a9ac:	ldr	r6, [sp, #8]
   2a9b0:	movw	r3, #38208	; 0x9540
   2a9b4:	movt	r3, #5
   2a9b8:	str	r4, [r2]
   2a9bc:	str	r4, [r3]
   2a9c0:	ldrd	r4, [sp]
   2a9c4:	add	sp, sp, #12
   2a9c8:	pop	{pc}		; (ldr pc, [sp], #4)
   2a9cc:	movw	r3, #38216	; 0x9548
   2a9d0:	movt	r3, #5
   2a9d4:	movw	r0, #32224	; 0x7de0
   2a9d8:	movt	r0, #4
   2a9dc:	ldr	r3, [r3]
   2a9e0:	mov	r2, #55	; 0x37
   2a9e4:	mov	r1, #1
   2a9e8:	bl	12168 <fwrite@plt>
   2a9ec:	bl	125a0 <abort@plt>
   2a9f0:	strd	r4, [sp, #-16]!
   2a9f4:	mov	r4, #0
   2a9f8:	mov	r5, #0
   2a9fc:	cmp	r1, #10
   2aa00:	str	r6, [sp, #8]
   2aa04:	strd	r4, [r0]
   2aa08:	strd	r4, [r0, #8]
   2aa0c:	str	lr, [sp, #12]
   2aa10:	strd	r4, [r0, #16]
   2aa14:	strd	r4, [r0, #24]
   2aa18:	strd	r4, [r0, #32]
   2aa1c:	strd	r4, [r0, #40]	; 0x28
   2aa20:	beq	2aa38 <__assert_fail@plt+0x18444>
   2aa24:	ldrd	r4, [sp]
   2aa28:	str	r1, [r0]
   2aa2c:	ldr	r6, [sp, #8]
   2aa30:	add	sp, sp, #12
   2aa34:	pop	{pc}		; (ldr pc, [sp], #4)
   2aa38:	bl	125a0 <abort@plt>
   2aa3c:	mov	r2, #5
   2aa40:	strd	r4, [sp, #-16]!
   2aa44:	mov	r5, r0
   2aa48:	str	r6, [sp, #8]
   2aa4c:	mov	r6, r1
   2aa50:	mov	r1, r0
   2aa54:	mov	r0, #0
   2aa58:	str	lr, [sp, #12]
   2aa5c:	bl	120b4 <dcgettext@plt>
   2aa60:	cmp	r5, r0
   2aa64:	mov	r4, r0
   2aa68:	beq	2aa80 <__assert_fail@plt+0x1848c>
   2aa6c:	mov	r0, r4
   2aa70:	ldrd	r4, [sp]
   2aa74:	ldr	r6, [sp, #8]
   2aa78:	add	sp, sp, #12
   2aa7c:	pop	{pc}		; (ldr pc, [sp], #4)
   2aa80:	bl	41c20 <__assert_fail@plt+0x2f62c>
   2aa84:	ldrb	r3, [r0]
   2aa88:	bic	r3, r3, #32
   2aa8c:	cmp	r3, #85	; 0x55
   2aa90:	bne	2aaf8 <__assert_fail@plt+0x18504>
   2aa94:	ldrb	r3, [r0, #1]
   2aa98:	bic	r3, r3, #32
   2aa9c:	cmp	r3, #84	; 0x54
   2aaa0:	bne	2ab78 <__assert_fail@plt+0x18584>
   2aaa4:	ldrb	r3, [r0, #2]
   2aaa8:	bic	r3, r3, #32
   2aaac:	cmp	r3, #70	; 0x46
   2aab0:	bne	2ab78 <__assert_fail@plt+0x18584>
   2aab4:	ldrb	r3, [r0, #3]
   2aab8:	cmp	r3, #45	; 0x2d
   2aabc:	bne	2ab78 <__assert_fail@plt+0x18584>
   2aac0:	ldrb	r3, [r0, #4]
   2aac4:	cmp	r3, #56	; 0x38
   2aac8:	bne	2ab78 <__assert_fail@plt+0x18584>
   2aacc:	ldrb	r3, [r0, #5]
   2aad0:	cmp	r3, #0
   2aad4:	bne	2ab78 <__assert_fail@plt+0x18584>
   2aad8:	ldrb	r2, [r4]
   2aadc:	movw	r3, #32380	; 0x7e7c
   2aae0:	movt	r3, #4
   2aae4:	movw	r4, #32392	; 0x7e88
   2aae8:	movt	r4, #4
   2aaec:	cmp	r2, #96	; 0x60
   2aaf0:	movne	r4, r3
   2aaf4:	b	2aa6c <__assert_fail@plt+0x18478>
   2aaf8:	cmp	r3, #71	; 0x47
   2aafc:	bne	2ab78 <__assert_fail@plt+0x18584>
   2ab00:	ldrb	r3, [r0, #1]
   2ab04:	bic	r3, r3, #32
   2ab08:	cmp	r3, #66	; 0x42
   2ab0c:	bne	2ab78 <__assert_fail@plt+0x18584>
   2ab10:	ldrb	r3, [r0, #2]
   2ab14:	cmp	r3, #49	; 0x31
   2ab18:	bne	2ab78 <__assert_fail@plt+0x18584>
   2ab1c:	ldrb	r3, [r0, #3]
   2ab20:	cmp	r3, #56	; 0x38
   2ab24:	bne	2ab78 <__assert_fail@plt+0x18584>
   2ab28:	ldrb	r3, [r0, #4]
   2ab2c:	cmp	r3, #48	; 0x30
   2ab30:	bne	2ab78 <__assert_fail@plt+0x18584>
   2ab34:	ldrb	r3, [r0, #5]
   2ab38:	cmp	r3, #51	; 0x33
   2ab3c:	bne	2ab78 <__assert_fail@plt+0x18584>
   2ab40:	ldrb	r3, [r0, #6]
   2ab44:	cmp	r3, #48	; 0x30
   2ab48:	bne	2ab78 <__assert_fail@plt+0x18584>
   2ab4c:	ldrb	r3, [r0, #7]
   2ab50:	cmp	r3, #0
   2ab54:	bne	2ab78 <__assert_fail@plt+0x18584>
   2ab58:	ldrb	r2, [r4]
   2ab5c:	movw	r3, #32384	; 0x7e80
   2ab60:	movt	r3, #4
   2ab64:	movw	r4, #32388	; 0x7e84
   2ab68:	movt	r4, #4
   2ab6c:	cmp	r2, #96	; 0x60
   2ab70:	movne	r4, r3
   2ab74:	b	2aa6c <__assert_fail@plt+0x18478>
   2ab78:	movw	r3, #13468	; 0x349c
   2ab7c:	movt	r3, #4
   2ab80:	cmp	r6, #9
   2ab84:	movw	r4, #32376	; 0x7e78
   2ab88:	movt	r4, #4
   2ab8c:	movne	r4, r3
   2ab90:	b	2aa6c <__assert_fail@plt+0x18478>
   2ab94:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2ab98:	strd	r6, [sp, #8]
   2ab9c:	strd	r8, [sp, #16]
   2aba0:	strd	sl, [sp, #24]
   2aba4:	mov	fp, r0
   2aba8:	mov	sl, r1
   2abac:	str	lr, [sp, #32]
   2abb0:	sub	sp, sp, #116	; 0x74
   2abb4:	ldr	r8, [sp, #152]	; 0x98
   2abb8:	str	r3, [sp, #28]
   2abbc:	ldr	r3, [sp, #156]	; 0x9c
   2abc0:	str	r2, [sp, #32]
   2abc4:	and	r4, r3, #2
   2abc8:	ubfx	r3, r3, #1, #1
   2abcc:	str	r3, [sp, #44]	; 0x2c
   2abd0:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2abd4:	str	r0, [sp, #64]	; 0x40
   2abd8:	cmp	r8, #10
   2abdc:	ldrls	pc, [pc, r8, lsl #2]
   2abe0:	b	2c350 <__assert_fail@plt+0x19d5c>
   2abe4:	andeq	sl, r2, r8, ror #31
   2abe8:	andeq	fp, r2, r4, lsl #1
   2abec:	andeq	fp, r2, r0, ror #12
   2abf0:	andeq	fp, r2, r4, lsr #1
   2abf4:	andeq	sl, r2, ip, asr #30
   2abf8:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   2abfc:	andeq	fp, r2, r8, lsl r0
   2ac00:	andeq	fp, r2, r4, asr r0
   2ac04:	andeq	sl, r2, r0, lsl ip
   2ac08:	andeq	sl, r2, r0, lsl ip
   2ac0c:	andeq	sl, r2, r0, lsl ip
   2ac10:	cmp	r8, #10
   2ac14:	beq	2ac40 <__assert_fail@plt+0x1864c>
   2ac18:	mov	r1, r8
   2ac1c:	movw	r0, #32396	; 0x7e8c
   2ac20:	movt	r0, #4
   2ac24:	bl	2aa3c <__assert_fail@plt+0x18448>
   2ac28:	mov	r1, r8
   2ac2c:	str	r0, [sp, #164]	; 0xa4
   2ac30:	movw	r0, #13468	; 0x349c
   2ac34:	movt	r0, #4
   2ac38:	bl	2aa3c <__assert_fail@plt+0x18448>
   2ac3c:	str	r0, [sp, #168]	; 0xa8
   2ac40:	cmp	r4, #0
   2ac44:	movne	r4, #0
   2ac48:	beq	2c02c <__assert_fail@plt+0x19a38>
   2ac4c:	mov	r3, #1
   2ac50:	mov	r5, #0
   2ac54:	ldr	r0, [sp, #168]	; 0xa8
   2ac58:	str	r3, [sp, #36]	; 0x24
   2ac5c:	str	r3, [sp, #40]	; 0x28
   2ac60:	str	r5, [sp, #68]	; 0x44
   2ac64:	bl	12300 <strlen@plt>
   2ac68:	ldr	r3, [sp, #168]	; 0xa8
   2ac6c:	str	r5, [sp, #48]	; 0x30
   2ac70:	str	r0, [sp, #56]	; 0x38
   2ac74:	str	r3, [sp, #60]	; 0x3c
   2ac78:	str	r5, [sp, #72]	; 0x48
   2ac7c:	str	r8, [sp, #152]	; 0x98
   2ac80:	mov	r8, fp
   2ac84:	mov	r9, #0
   2ac88:	ldr	fp, [sp, #152]	; 0x98
   2ac8c:	ldr	r3, [sp, #28]
   2ac90:	cmn	r3, #1
   2ac94:	beq	2b1f4 <__assert_fail@plt+0x18c00>
   2ac98:	ldr	r3, [sp, #28]
   2ac9c:	subs	r6, r3, r9
   2aca0:	movne	r6, #1
   2aca4:	cmp	r6, #0
   2aca8:	beq	2b20c <__assert_fail@plt+0x18c18>
   2acac:	ldr	r0, [sp, #32]
   2acb0:	ldr	r7, [sp, #40]	; 0x28
   2acb4:	add	r3, r0, r9
   2acb8:	cmp	fp, #2
   2acbc:	moveq	r7, #0
   2acc0:	andne	r7, r7, #1
   2acc4:	str	r3, [sp, #52]	; 0x34
   2acc8:	cmp	r7, #0
   2accc:	beq	2b6a8 <__assert_fail@plt+0x190b4>
   2acd0:	ldr	r2, [sp, #56]	; 0x38
   2acd4:	cmp	r2, #0
   2acd8:	beq	2b944 <__assert_fail@plt+0x19350>
   2acdc:	ldr	r1, [sp, #28]
   2ace0:	cmp	r2, #1
   2ace4:	mov	r3, r2
   2ace8:	movls	r3, #0
   2acec:	movhi	r3, #1
   2acf0:	add	r5, r9, r2
   2acf4:	cmn	r1, #1
   2acf8:	movne	r3, #0
   2acfc:	cmp	r3, #0
   2ad00:	beq	2ad0c <__assert_fail@plt+0x18718>
   2ad04:	bl	12300 <strlen@plt>
   2ad08:	str	r0, [sp, #28]
   2ad0c:	ldr	r3, [sp, #28]
   2ad10:	cmp	r5, r3
   2ad14:	bhi	2b944 <__assert_fail@plt+0x19350>
   2ad18:	ldr	r0, [sp, #52]	; 0x34
   2ad1c:	ldr	r2, [sp, #56]	; 0x38
   2ad20:	ldr	r1, [sp, #60]	; 0x3c
   2ad24:	bl	12084 <memcmp@plt>
   2ad28:	cmp	r0, #0
   2ad2c:	bne	2b944 <__assert_fail@plt+0x19350>
   2ad30:	ldr	r3, [sp, #44]	; 0x2c
   2ad34:	cmp	r3, #0
   2ad38:	bne	2c274 <__assert_fail@plt+0x19c80>
   2ad3c:	ldr	r3, [sp, #52]	; 0x34
   2ad40:	ldrb	r5, [r3]
   2ad44:	cmp	r5, #126	; 0x7e
   2ad48:	ldrls	pc, [pc, r5, lsl #2]
   2ad4c:	b	2b604 <__assert_fail@plt+0x19010>
   2ad50:	andeq	fp, r2, r8, lsl #10
   2ad54:	andeq	fp, r2, r4, lsl #12
   2ad58:	andeq	fp, r2, r4, lsl #12
   2ad5c:	andeq	fp, r2, r4, lsl #12
   2ad60:	andeq	fp, r2, r4, lsl #12
   2ad64:	andeq	fp, r2, r4, lsl #12
   2ad68:	andeq	fp, r2, r4, lsl #12
   2ad6c:	ldrdeq	fp, [r2], -ip
   2ad70:	ldrdeq	fp, [r2], -r4
   2ad74:	andeq	fp, r2, ip, lsl r4
   2ad78:	andeq	fp, r2, r8, asr #9
   2ad7c:	andeq	fp, r2, r4, lsl r4
   2ad80:	andeq	fp, r2, r4, lsr #9
   2ad84:	strdeq	fp, [r2], -r0
   2ad88:	andeq	fp, r2, r4, lsl #12
   2ad8c:	andeq	fp, r2, r4, lsl #12
   2ad90:	andeq	fp, r2, r4, lsl #12
   2ad94:	andeq	fp, r2, r4, lsl #12
   2ad98:	andeq	fp, r2, r4, lsl #12
   2ad9c:	andeq	fp, r2, r4, lsl #12
   2ada0:	andeq	fp, r2, r4, lsl #12
   2ada4:	andeq	fp, r2, r4, lsl #12
   2ada8:	andeq	fp, r2, r4, lsl #12
   2adac:	andeq	fp, r2, r4, lsl #12
   2adb0:	andeq	fp, r2, r4, lsl #12
   2adb4:	andeq	fp, r2, r4, lsl #12
   2adb8:	andeq	fp, r2, r4, lsl #12
   2adbc:	andeq	fp, r2, r4, lsl #12
   2adc0:	andeq	fp, r2, r4, lsl #12
   2adc4:	andeq	fp, r2, r4, lsl #12
   2adc8:	andeq	fp, r2, r4, lsl #12
   2adcc:	andeq	fp, r2, r4, lsl #12
   2add0:	andeq	fp, r2, r0, ror #11
   2add4:	andeq	fp, r2, r8, ror #9
   2add8:	andeq	fp, r2, r8, ror #9
   2addc:	andeq	fp, r2, r4, asr #11
   2ade0:	andeq	fp, r2, r8, ror #9
   2ade4:	strdeq	fp, [r2], -r8
   2ade8:	andeq	fp, r2, r8, ror #9
   2adec:	andeq	fp, r2, r4, asr #6
   2adf0:	andeq	fp, r2, r8, ror #9
   2adf4:	andeq	fp, r2, r8, ror #9
   2adf8:	andeq	fp, r2, r8, ror #9
   2adfc:	strdeq	fp, [r2], -r8
   2ae00:	strdeq	fp, [r2], -r8
   2ae04:	strdeq	fp, [r2], -r8
   2ae08:	strdeq	fp, [r2], -r8
   2ae0c:	strdeq	fp, [r2], -r8
   2ae10:	strdeq	fp, [r2], -r8
   2ae14:	strdeq	fp, [r2], -r8
   2ae18:	strdeq	fp, [r2], -r8
   2ae1c:	strdeq	fp, [r2], -r8
   2ae20:	strdeq	fp, [r2], -r8
   2ae24:	strdeq	fp, [r2], -r8
   2ae28:	strdeq	fp, [r2], -r8
   2ae2c:	strdeq	fp, [r2], -r8
   2ae30:	strdeq	fp, [r2], -r8
   2ae34:	strdeq	fp, [r2], -r8
   2ae38:	strdeq	fp, [r2], -r8
   2ae3c:	andeq	fp, r2, r8, ror #9
   2ae40:	andeq	fp, r2, r8, ror #9
   2ae44:	andeq	fp, r2, r8, ror #9
   2ae48:	andeq	fp, r2, r8, ror #9
   2ae4c:	andeq	fp, r2, r8, lsl r3
   2ae50:	andeq	fp, r2, r4, lsl #12
   2ae54:	strdeq	fp, [r2], -r8
   2ae58:	strdeq	fp, [r2], -r8
   2ae5c:	strdeq	fp, [r2], -r8
   2ae60:	strdeq	fp, [r2], -r8
   2ae64:	strdeq	fp, [r2], -r8
   2ae68:	strdeq	fp, [r2], -r8
   2ae6c:	strdeq	fp, [r2], -r8
   2ae70:	strdeq	fp, [r2], -r8
   2ae74:	strdeq	fp, [r2], -r8
   2ae78:	strdeq	fp, [r2], -r8
   2ae7c:	strdeq	fp, [r2], -r8
   2ae80:	strdeq	fp, [r2], -r8
   2ae84:	strdeq	fp, [r2], -r8
   2ae88:	strdeq	fp, [r2], -r8
   2ae8c:	strdeq	fp, [r2], -r8
   2ae90:	strdeq	fp, [r2], -r8
   2ae94:	strdeq	fp, [r2], -r8
   2ae98:	strdeq	fp, [r2], -r8
   2ae9c:	strdeq	fp, [r2], -r8
   2aea0:	strdeq	fp, [r2], -r8
   2aea4:	strdeq	fp, [r2], -r8
   2aea8:	strdeq	fp, [r2], -r8
   2aeac:	strdeq	fp, [r2], -r8
   2aeb0:	strdeq	fp, [r2], -r8
   2aeb4:	strdeq	fp, [r2], -r8
   2aeb8:	strdeq	fp, [r2], -r8
   2aebc:	andeq	fp, r2, r8, ror #9
   2aec0:	andeq	fp, r2, r0, asr #5
   2aec4:	strdeq	fp, [r2], -r8
   2aec8:	andeq	fp, r2, r8, ror #9
   2aecc:	strdeq	fp, [r2], -r8
   2aed0:	andeq	fp, r2, r8, ror #9
   2aed4:	strdeq	fp, [r2], -r8
   2aed8:	strdeq	fp, [r2], -r8
   2aedc:	strdeq	fp, [r2], -r8
   2aee0:	strdeq	fp, [r2], -r8
   2aee4:	strdeq	fp, [r2], -r8
   2aee8:	strdeq	fp, [r2], -r8
   2aeec:	strdeq	fp, [r2], -r8
   2aef0:	strdeq	fp, [r2], -r8
   2aef4:	strdeq	fp, [r2], -r8
   2aef8:	strdeq	fp, [r2], -r8
   2aefc:	strdeq	fp, [r2], -r8
   2af00:	strdeq	fp, [r2], -r8
   2af04:	strdeq	fp, [r2], -r8
   2af08:	strdeq	fp, [r2], -r8
   2af0c:	strdeq	fp, [r2], -r8
   2af10:	strdeq	fp, [r2], -r8
   2af14:	strdeq	fp, [r2], -r8
   2af18:	strdeq	fp, [r2], -r8
   2af1c:	strdeq	fp, [r2], -r8
   2af20:	strdeq	fp, [r2], -r8
   2af24:	strdeq	fp, [r2], -r8
   2af28:	strdeq	fp, [r2], -r8
   2af2c:	strdeq	fp, [r2], -r8
   2af30:	strdeq	fp, [r2], -r8
   2af34:	strdeq	fp, [r2], -r8
   2af38:	strdeq	fp, [r2], -r8
   2af3c:	andeq	fp, r2, r4, ror #1
   2af40:	andeq	fp, r2, r8, ror #9
   2af44:	andeq	fp, r2, r4, ror #1
   2af48:	andeq	fp, r2, r4, asr #11
   2af4c:	cmp	r4, #0
   2af50:	moveq	r3, #1
   2af54:	streq	r3, [sp, #40]	; 0x28
   2af58:	beq	2b66c <__assert_fail@plt+0x19078>
   2af5c:	mov	r3, #0
   2af60:	mov	r2, #1
   2af64:	mov	r4, r3
   2af68:	str	r2, [sp, #36]	; 0x24
   2af6c:	str	r2, [sp, #44]	; 0x2c
   2af70:	str	r2, [sp, #56]	; 0x38
   2af74:	str	r3, [sp, #68]	; 0x44
   2af78:	movw	r3, #13468	; 0x349c
   2af7c:	movt	r3, #4
   2af80:	str	r4, [sp, #40]	; 0x28
   2af84:	mov	r8, #2
   2af88:	str	r4, [sp, #48]	; 0x30
   2af8c:	str	r3, [sp, #60]	; 0x3c
   2af90:	str	r4, [sp, #72]	; 0x48
   2af94:	b	2ac7c <__assert_fail@plt+0x18688>
   2af98:	cmp	r4, #0
   2af9c:	bne	2c1e8 <__assert_fail@plt+0x19bf4>
   2afa0:	cmp	sl, #0
   2afa4:	beq	2bfa8 <__assert_fail@plt+0x199b4>
   2afa8:	mov	r3, #34	; 0x22
   2afac:	mov	r1, r4
   2afb0:	mov	r2, #1
   2afb4:	strb	r3, [fp]
   2afb8:	movw	r3, #32376	; 0x7e78
   2afbc:	movt	r3, #4
   2afc0:	mov	r4, r2
   2afc4:	str	r2, [sp, #36]	; 0x24
   2afc8:	str	r2, [sp, #40]	; 0x28
   2afcc:	str	r1, [sp, #44]	; 0x2c
   2afd0:	str	r1, [sp, #48]	; 0x30
   2afd4:	str	r2, [sp, #56]	; 0x38
   2afd8:	str	r3, [sp, #60]	; 0x3c
   2afdc:	str	r1, [sp, #68]	; 0x44
   2afe0:	str	r1, [sp, #72]	; 0x48
   2afe4:	b	2ac7c <__assert_fail@plt+0x18688>
   2afe8:	mov	r3, #0
   2afec:	mov	r4, r8
   2aff0:	str	r3, [sp, #40]	; 0x28
   2aff4:	str	r3, [sp, #44]	; 0x2c
   2aff8:	str	r3, [sp, #48]	; 0x30
   2affc:	str	r8, [sp, #56]	; 0x38
   2b000:	str	r3, [sp, #60]	; 0x3c
   2b004:	str	r3, [sp, #68]	; 0x44
   2b008:	mov	r3, #1
   2b00c:	str	r3, [sp, #36]	; 0x24
   2b010:	str	r8, [sp, #72]	; 0x48
   2b014:	b	2ac7c <__assert_fail@plt+0x18688>
   2b018:	mov	r3, #1
   2b01c:	mov	r2, #0
   2b020:	mov	r4, r2
   2b024:	mov	r8, #5
   2b028:	str	r3, [sp, #36]	; 0x24
   2b02c:	str	r3, [sp, #40]	; 0x28
   2b030:	str	r3, [sp, #44]	; 0x2c
   2b034:	str	r2, [sp, #48]	; 0x30
   2b038:	str	r3, [sp, #56]	; 0x38
   2b03c:	movw	r3, #32376	; 0x7e78
   2b040:	movt	r3, #4
   2b044:	str	r3, [sp, #60]	; 0x3c
   2b048:	str	r2, [sp, #68]	; 0x44
   2b04c:	str	r2, [sp, #72]	; 0x48
   2b050:	b	2ac7c <__assert_fail@plt+0x18688>
   2b054:	mov	r3, #0
   2b058:	mov	r2, #1
   2b05c:	mov	r4, r3
   2b060:	str	r2, [sp, #36]	; 0x24
   2b064:	str	r2, [sp, #40]	; 0x28
   2b068:	str	r3, [sp, #44]	; 0x2c
   2b06c:	str	r3, [sp, #48]	; 0x30
   2b070:	str	r3, [sp, #56]	; 0x38
   2b074:	str	r3, [sp, #60]	; 0x3c
   2b078:	str	r3, [sp, #68]	; 0x44
   2b07c:	str	r3, [sp, #72]	; 0x48
   2b080:	b	2ac7c <__assert_fail@plt+0x18688>
   2b084:	mov	r2, #1
   2b088:	mov	r3, #0
   2b08c:	mov	r4, r3
   2b090:	str	r2, [sp, #36]	; 0x24
   2b094:	str	r2, [sp, #44]	; 0x2c
   2b098:	str	r8, [sp, #56]	; 0x38
   2b09c:	str	r3, [sp, #68]	; 0x44
   2b0a0:	b	2af78 <__assert_fail@plt+0x18984>
   2b0a4:	mov	r3, #1
   2b0a8:	mov	r2, #0
   2b0ac:	mov	r4, r2
   2b0b0:	mov	r8, #2
   2b0b4:	str	r3, [sp, #36]	; 0x24
   2b0b8:	str	r3, [sp, #40]	; 0x28
   2b0bc:	str	r3, [sp, #44]	; 0x2c
   2b0c0:	str	r2, [sp, #48]	; 0x30
   2b0c4:	str	r3, [sp, #56]	; 0x38
   2b0c8:	movw	r3, #13468	; 0x349c
   2b0cc:	movt	r3, #4
   2b0d0:	str	r3, [sp, #60]	; 0x3c
   2b0d4:	str	r2, [sp, #68]	; 0x44
   2b0d8:	str	r2, [sp, #72]	; 0x48
   2b0dc:	b	2ac7c <__assert_fail@plt+0x18688>
   2b0e0:	mov	r7, #0
   2b0e4:	ldr	r3, [sp, #28]
   2b0e8:	cmn	r3, #1
   2b0ec:	beq	2bbc4 <__assert_fail@plt+0x195d0>
   2b0f0:	ldr	r3, [sp, #28]
   2b0f4:	subs	r2, r3, #1
   2b0f8:	movne	r2, #1
   2b0fc:	sub	r3, fp, #2
   2b100:	cmp	r2, #0
   2b104:	clz	r3, r3
   2b108:	lsr	r3, r3, #5
   2b10c:	bne	2b118 <__assert_fail@plt+0x18b24>
   2b110:	cmp	r9, #0
   2b114:	beq	2b924 <__assert_fail@plt+0x19330>
   2b118:	mov	r6, #0
   2b11c:	ldr	r2, [sp, #40]	; 0x28
   2b120:	eor	r2, r2, #1
   2b124:	orrs	r3, r3, r2
   2b128:	bne	2b300 <__assert_fail@plt+0x18d0c>
   2b12c:	ldr	r2, [sp, #160]	; 0xa0
   2b130:	cmp	r2, #0
   2b134:	beq	2b154 <__assert_fail@plt+0x18b60>
   2b138:	ldr	r0, [sp, #160]	; 0xa0
   2b13c:	ubfx	r1, r5, #5, #8
   2b140:	and	r2, r5, #31
   2b144:	ldr	r1, [r0, r1, lsl #2]
   2b148:	lsr	r2, r1, r2
   2b14c:	tst	r2, #1
   2b150:	bne	2b15c <__assert_fail@plt+0x18b68>
   2b154:	cmp	r7, #0
   2b158:	beq	2b3cc <__assert_fail@plt+0x18dd8>
   2b15c:	ldr	r2, [sp, #44]	; 0x2c
   2b160:	sub	r3, fp, #2
   2b164:	clz	r3, r3
   2b168:	lsr	r3, r3, #5
   2b16c:	cmp	r2, #0
   2b170:	bne	2bf18 <__assert_fail@plt+0x19924>
   2b174:	ldr	r2, [sp, #48]	; 0x30
   2b178:	eor	r2, r2, #1
   2b17c:	ands	r3, r3, r2
   2b180:	beq	2b1b8 <__assert_fail@plt+0x18bc4>
   2b184:	cmp	sl, r4
   2b188:	str	r3, [sp, #48]	; 0x30
   2b18c:	movhi	r2, #39	; 0x27
   2b190:	strbhi	r2, [r8, r4]
   2b194:	add	r2, r4, #1
   2b198:	cmp	sl, r2
   2b19c:	movhi	r1, #36	; 0x24
   2b1a0:	strbhi	r1, [r8, r2]
   2b1a4:	add	r2, r4, #2
   2b1a8:	add	r4, r4, #3
   2b1ac:	cmp	sl, r2
   2b1b0:	movhi	r1, #39	; 0x27
   2b1b4:	strbhi	r1, [r8, r2]
   2b1b8:	cmp	r4, sl
   2b1bc:	add	r9, r9, #1
   2b1c0:	movcc	r3, #92	; 0x5c
   2b1c4:	strbcc	r3, [r8, r4]
   2b1c8:	add	r4, r4, #1
   2b1cc:	cmp	r4, sl
   2b1d0:	ldr	r3, [sp, #36]	; 0x24
   2b1d4:	strbcc	r5, [r8, r4]
   2b1d8:	cmp	r6, #0
   2b1dc:	add	r4, r4, #1
   2b1e0:	moveq	r3, #0
   2b1e4:	str	r3, [sp, #36]	; 0x24
   2b1e8:	ldr	r3, [sp, #28]
   2b1ec:	cmn	r3, #1
   2b1f0:	bne	2ac98 <__assert_fail@plt+0x186a4>
   2b1f4:	ldr	r3, [sp, #32]
   2b1f8:	ldrb	r6, [r3, r9]
   2b1fc:	adds	r6, r6, #0
   2b200:	movne	r6, #1
   2b204:	cmp	r6, #0
   2b208:	bne	2acac <__assert_fail@plt+0x186b8>
   2b20c:	str	fp, [sp, #152]	; 0x98
   2b210:	mov	fp, r8
   2b214:	cmp	r4, #0
   2b218:	ldr	r1, [sp, #44]	; 0x2c
   2b21c:	movne	r3, #0
   2b220:	ldr	r8, [sp, #152]	; 0x98
   2b224:	sub	r2, r8, #2
   2b228:	clz	r2, r2
   2b22c:	lsr	r2, r2, #5
   2b230:	andeq	r3, r2, r1
   2b234:	cmp	r3, #0
   2b238:	bne	2c2f4 <__assert_fail@plt+0x19d00>
   2b23c:	eor	r3, r1, #1
   2b240:	ands	r2, r2, r3
   2b244:	beq	2c220 <__assert_fail@plt+0x19c2c>
   2b248:	ldr	r3, [sp, #68]	; 0x44
   2b24c:	cmp	r3, #0
   2b250:	beq	2c224 <__assert_fail@plt+0x19c30>
   2b254:	ldr	r3, [sp, #36]	; 0x24
   2b258:	cmp	r3, #0
   2b25c:	bne	2c2b0 <__assert_fail@plt+0x19cbc>
   2b260:	ldr	r3, [sp, #72]	; 0x48
   2b264:	adds	r3, r3, #0
   2b268:	movne	r3, #1
   2b26c:	cmp	sl, #0
   2b270:	movne	r3, #0
   2b274:	cmp	r3, #0
   2b278:	ldreq	r2, [sp, #68]	; 0x44
   2b27c:	beq	2c224 <__assert_fail@plt+0x19c30>
   2b280:	ldr	r2, [sp, #72]	; 0x48
   2b284:	str	r3, [sp, #68]	; 0x44
   2b288:	movw	r3, #13468	; 0x349c
   2b28c:	movt	r3, #4
   2b290:	mov	r1, #39	; 0x27
   2b294:	mov	r4, #1
   2b298:	ldr	sl, [sp, #72]	; 0x48
   2b29c:	mov	r8, #2
   2b2a0:	str	r3, [sp, #60]	; 0x3c
   2b2a4:	mov	r3, #0
   2b2a8:	strb	r1, [fp]
   2b2ac:	str	r3, [sp, #44]	; 0x2c
   2b2b0:	str	r4, [sp, #56]	; 0x38
   2b2b4:	str	r2, [sp, #72]	; 0x48
   2b2b8:	b	2ac7c <__assert_fail@plt+0x18688>
   2b2bc:	mov	r7, #0
   2b2c0:	cmp	fp, #2
   2b2c4:	beq	2bba4 <__assert_fail@plt+0x195b0>
   2b2c8:	ldr	r2, [sp, #40]	; 0x28
   2b2cc:	ldr	r3, [sp, #56]	; 0x38
   2b2d0:	ldr	r1, [sp, #44]	; 0x2c
   2b2d4:	cmp	r3, #0
   2b2d8:	moveq	r3, #0
   2b2dc:	andne	r3, r2, r1
   2b2e0:	cmp	r3, #0
   2b2e4:	moveq	r5, #92	; 0x5c
   2b2e8:	moveq	r3, r5
   2b2ec:	bne	2bbb0 <__assert_fail@plt+0x195bc>
   2b2f0:	ldr	r2, [sp, #40]	; 0x28
   2b2f4:	cmp	r2, #0
   2b2f8:	bne	2bfec <__assert_fail@plt+0x199f8>
   2b2fc:	mov	r6, #0
   2b300:	ldr	r3, [sp, #44]	; 0x2c
   2b304:	cmp	r3, #0
   2b308:	beq	2bb9c <__assert_fail@plt+0x195a8>
   2b30c:	mov	r3, #0
   2b310:	b	2b12c <__assert_fail@plt+0x18b38>
   2b314:	mov	r7, #0
   2b318:	cmp	fp, #2
   2b31c:	beq	2bc14 <__assert_fail@plt+0x19620>
   2b320:	cmp	fp, #5
   2b324:	beq	2bbd8 <__assert_fail@plt+0x195e4>
   2b328:	sub	r3, fp, #2
   2b32c:	mov	r6, #0
   2b330:	clz	r3, r3
   2b334:	mov	r5, #63	; 0x3f
   2b338:	lsr	r3, r3, #5
   2b33c:	b	2b11c <__assert_fail@plt+0x18b28>
   2b340:	mov	r7, #0
   2b344:	cmp	fp, #2
   2b348:	movne	r3, #0
   2b34c:	movne	r5, #39	; 0x27
   2b350:	strne	r6, [sp, #68]	; 0x44
   2b354:	bne	2b11c <__assert_fail@plt+0x18b28>
   2b358:	ldr	r3, [sp, #44]	; 0x2c
   2b35c:	cmp	r3, #0
   2b360:	bne	2c01c <__assert_fail@plt+0x19a28>
   2b364:	ldr	r3, [sp, #72]	; 0x48
   2b368:	cmp	sl, #0
   2b36c:	clz	r3, r3
   2b370:	lsr	r3, r3, #5
   2b374:	moveq	r3, #0
   2b378:	cmp	r3, #0
   2b37c:	bne	2bf48 <__assert_fail@plt+0x19954>
   2b380:	cmp	sl, r4
   2b384:	movhi	r3, #39	; 0x27
   2b388:	strbhi	r3, [r8, r4]
   2b38c:	add	r3, r4, #1
   2b390:	cmp	sl, r3
   2b394:	movhi	r2, #92	; 0x5c
   2b398:	strbhi	r2, [r8, r3]
   2b39c:	add	r3, r4, #2
   2b3a0:	cmp	sl, r3
   2b3a4:	bls	2b3b0 <__assert_fail@plt+0x18dbc>
   2b3a8:	mov	r2, #39	; 0x27
   2b3ac:	strb	r2, [r8, r3]
   2b3b0:	mov	r3, #0
   2b3b4:	cmp	r7, #0
   2b3b8:	add	r4, r4, #3
   2b3bc:	mov	r5, #39	; 0x27
   2b3c0:	str	r3, [sp, #48]	; 0x30
   2b3c4:	str	r6, [sp, #68]	; 0x44
   2b3c8:	bne	2b15c <__assert_fail@plt+0x18b68>
   2b3cc:	ldr	r2, [sp, #48]	; 0x30
   2b3d0:	eor	r3, r3, #1
   2b3d4:	add	r9, r9, #1
   2b3d8:	and	r3, r3, r2
   2b3dc:	uxtb	r3, r3
   2b3e0:	cmp	r3, #0
   2b3e4:	beq	2b1cc <__assert_fail@plt+0x18bd8>
   2b3e8:	cmp	sl, r4
   2b3ec:	movhi	r3, #39	; 0x27
   2b3f0:	strbhi	r3, [r8, r4]
   2b3f4:	add	r3, r4, #1
   2b3f8:	add	r4, r4, #2
   2b3fc:	cmp	sl, r3
   2b400:	movhi	r2, #39	; 0x27
   2b404:	strbhi	r2, [r8, r3]
   2b408:	mov	r3, #0
   2b40c:	str	r3, [sp, #48]	; 0x30
   2b410:	b	2b1cc <__assert_fail@plt+0x18bd8>
   2b414:	mov	r3, #118	; 0x76
   2b418:	b	2b2f0 <__assert_fail@plt+0x18cfc>
   2b41c:	mov	r3, #116	; 0x74
   2b420:	ldr	r2, [sp, #44]	; 0x2c
   2b424:	cmp	fp, #2
   2b428:	movne	r2, #0
   2b42c:	andeq	r2, r2, #1
   2b430:	cmp	r2, #0
   2b434:	beq	2b2f0 <__assert_fail@plt+0x18cfc>
   2b438:	mov	fp, r8
   2b43c:	mov	r8, #2
   2b440:	ldr	r3, [sp, #40]	; 0x28
   2b444:	cmp	r3, #0
   2b448:	movne	r8, #4
   2b44c:	mov	lr, #0
   2b450:	mov	r0, fp
   2b454:	ldr	r2, [sp, #32]
   2b458:	ldr	r3, [sp, #156]	; 0x9c
   2b45c:	ldr	r1, [sp, #164]	; 0xa4
   2b460:	bic	ip, r3, #2
   2b464:	ldr	r3, [sp, #28]
   2b468:	stm	sp, {r8, ip, lr}
   2b46c:	ldr	ip, [sp, #168]	; 0xa8
   2b470:	str	r1, [sp, #12]
   2b474:	mov	r1, sl
   2b478:	str	ip, [sp, #16]
   2b47c:	bl	2ab94 <__assert_fail@plt+0x185a0>
   2b480:	mov	r4, r0
   2b484:	mov	r0, r4
   2b488:	add	sp, sp, #116	; 0x74
   2b48c:	ldrd	r4, [sp]
   2b490:	ldrd	r6, [sp, #8]
   2b494:	ldrd	r8, [sp, #16]
   2b498:	ldrd	sl, [sp, #24]
   2b49c:	add	sp, sp, #32
   2b4a0:	pop	{pc}		; (ldr pc, [sp], #4)
   2b4a4:	mov	r5, #102	; 0x66
   2b4a8:	ldr	r2, [sp, #44]	; 0x2c
   2b4ac:	sub	r3, fp, #2
   2b4b0:	clz	r3, r3
   2b4b4:	lsr	r3, r3, #5
   2b4b8:	cmp	r2, #0
   2b4bc:	bne	2bf18 <__assert_fail@plt+0x19924>
   2b4c0:	mov	r6, r2
   2b4c4:	b	2b1b8 <__assert_fail@plt+0x18bc4>
   2b4c8:	mov	r5, #110	; 0x6e
   2b4cc:	mov	r6, #0
   2b4d0:	b	2b15c <__assert_fail@plt+0x18b68>
   2b4d4:	mov	r5, #98	; 0x62
   2b4d8:	b	2b4a8 <__assert_fail@plt+0x18eb4>
   2b4dc:	mov	r5, #97	; 0x61
   2b4e0:	b	2b4a8 <__assert_fail@plt+0x18eb4>
   2b4e4:	mov	r7, #0
   2b4e8:	mov	r6, #0
   2b4ec:	b	2b30c <__assert_fail@plt+0x18d18>
   2b4f0:	mov	r5, #114	; 0x72
   2b4f4:	b	2b4cc <__assert_fail@plt+0x18ed8>
   2b4f8:	ldr	r3, [sp, #44]	; 0x2c
   2b4fc:	cmp	r3, #0
   2b500:	bne	2c290 <__assert_fail@plt+0x19c9c>
   2b504:	mov	r7, r3
   2b508:	ldr	r3, [sp, #48]	; 0x30
   2b50c:	sub	r2, fp, #2
   2b510:	clz	r2, r2
   2b514:	lsr	r2, r2, #5
   2b518:	eor	r3, r3, #1
   2b51c:	ands	r3, r2, r3
   2b520:	beq	2bf34 <__assert_fail@plt+0x19940>
   2b524:	cmp	sl, r4
   2b528:	movhi	r1, #39	; 0x27
   2b52c:	strbhi	r1, [r8, r4]
   2b530:	add	r1, r4, #1
   2b534:	cmp	sl, r1
   2b538:	movhi	r0, #36	; 0x24
   2b53c:	strbhi	r0, [r8, r1]
   2b540:	add	r1, r4, #2
   2b544:	cmp	sl, r1
   2b548:	movhi	r0, #39	; 0x27
   2b54c:	strbhi	r0, [r8, r1]
   2b550:	add	r1, r4, #3
   2b554:	cmp	sl, r1
   2b558:	bls	2bf8c <__assert_fail@plt+0x19998>
   2b55c:	mov	r4, r1
   2b560:	mov	r1, #92	; 0x5c
   2b564:	mov	r0, r4
   2b568:	str	r3, [sp, #48]	; 0x30
   2b56c:	strb	r1, [r8, r4]
   2b570:	cmp	fp, #2
   2b574:	add	r4, r4, #1
   2b578:	beq	2bfdc <__assert_fail@plt+0x199e8>
   2b57c:	ldr	r1, [sp, #28]
   2b580:	add	r3, r9, #1
   2b584:	cmp	r3, r1
   2b588:	bcs	2b5a0 <__assert_fail@plt+0x18fac>
   2b58c:	ldr	r1, [sp, #32]
   2b590:	ldrb	r3, [r1, r3]
   2b594:	sub	r3, r3, #48	; 0x30
   2b598:	cmp	r3, #9
   2b59c:	bls	2bff4 <__assert_fail@plt+0x19a00>
   2b5a0:	mov	r5, #48	; 0x30
   2b5a4:	ldr	r3, [sp, #40]	; 0x28
   2b5a8:	eor	r3, r3, #1
   2b5ac:	orrs	r2, r2, r3
   2b5b0:	mov	r3, r6
   2b5b4:	moveq	r6, r2
   2b5b8:	beq	2b12c <__assert_fail@plt+0x18b38>
   2b5bc:	mov	r6, #0
   2b5c0:	b	2b154 <__assert_fail@plt+0x18b60>
   2b5c4:	cmp	r9, #0
   2b5c8:	mov	r2, r7
   2b5cc:	bne	2bb6c <__assert_fail@plt+0x19578>
   2b5d0:	mov	r6, r7
   2b5d4:	mov	r3, r9
   2b5d8:	mov	r7, r2
   2b5dc:	b	2b11c <__assert_fail@plt+0x18b28>
   2b5e0:	mov	r2, r7
   2b5e4:	mov	r6, r7
   2b5e8:	mov	r3, #0
   2b5ec:	mov	r7, r2
   2b5f0:	mov	r5, #32
   2b5f4:	b	2b11c <__assert_fail@plt+0x18b28>
   2b5f8:	mov	r6, r7
   2b5fc:	b	2b30c <__assert_fail@plt+0x18d18>
   2b600:	mov	r7, #0
   2b604:	ldr	r3, [sp, #64]	; 0x40
   2b608:	cmp	r3, #1
   2b60c:	bne	2bc2c <__assert_fail@plt+0x19638>
   2b610:	bl	122b8 <__ctype_b_loc@plt>
   2b614:	ldr	r2, [r0]
   2b618:	sxth	r3, r5
   2b61c:	lsl	r3, r3, #1
   2b620:	ldr	r1, [sp, #64]	; 0x40
   2b624:	ldrh	r3, [r2, r3]
   2b628:	mov	ip, r1
   2b62c:	and	r3, r3, #16384	; 0x4000
   2b630:	cmp	r3, #0
   2b634:	ldr	r3, [sp, #40]	; 0x28
   2b638:	movne	r6, #1
   2b63c:	moveq	r6, #0
   2b640:	movne	r2, #0
   2b644:	andeq	r2, r3, #1
   2b648:	cmp	r2, #0
   2b64c:	bne	2bf74 <__assert_fail@plt+0x19980>
   2b650:	sub	r3, fp, #2
   2b654:	clz	r3, r3
   2b658:	lsr	r3, r3, #5
   2b65c:	b	2b11c <__assert_fail@plt+0x18b28>
   2b660:	cmp	r4, #0
   2b664:	bne	2c304 <__assert_fail@plt+0x19d10>
   2b668:	str	r4, [sp, #40]	; 0x28
   2b66c:	cmp	sl, #0
   2b670:	bne	2c334 <__assert_fail@plt+0x19d40>
   2b674:	mov	r3, #1
   2b678:	movw	r2, #13468	; 0x349c
   2b67c:	movt	r2, #4
   2b680:	mov	r4, r3
   2b684:	mov	r8, #2
   2b688:	str	r3, [sp, #36]	; 0x24
   2b68c:	str	sl, [sp, #44]	; 0x2c
   2b690:	str	sl, [sp, #48]	; 0x30
   2b694:	str	r3, [sp, #56]	; 0x38
   2b698:	str	r2, [sp, #60]	; 0x3c
   2b69c:	str	sl, [sp, #68]	; 0x44
   2b6a0:	str	sl, [sp, #72]	; 0x48
   2b6a4:	b	2ac7c <__assert_fail@plt+0x18688>
   2b6a8:	ldr	r3, [sp, #32]
   2b6ac:	ldrb	r5, [r3, r9]
   2b6b0:	cmp	r5, #126	; 0x7e
   2b6b4:	ldrls	pc, [pc, r5, lsl #2]
   2b6b8:	b	2b604 <__assert_fail@plt+0x19010>
   2b6bc:	andeq	fp, r2, r0, ror #17
   2b6c0:	andeq	fp, r2, r4, lsl #12
   2b6c4:	andeq	fp, r2, r4, lsl #12
   2b6c8:	andeq	fp, r2, r4, lsl #12
   2b6cc:	andeq	fp, r2, r4, lsl #12
   2b6d0:	andeq	fp, r2, r4, lsl #12
   2b6d4:	andeq	fp, r2, r4, lsl #12
   2b6d8:	ldrdeq	fp, [r2], -r8
   2b6dc:	ldrdeq	fp, [r2], -r0
   2b6e0:	andeq	fp, r2, ip, lsl r4
   2b6e4:	andeq	fp, r2, r8, asr #17
   2b6e8:	andeq	fp, r2, r4, lsl r4
   2b6ec:	andeq	fp, r2, r0, asr #17
   2b6f0:			; <UNDEFINED> instruction: 0x0002b8b8
   2b6f4:	andeq	fp, r2, r4, lsl #12
   2b6f8:	andeq	fp, r2, r4, lsl #12
   2b6fc:	andeq	fp, r2, r4, lsl #12
   2b700:	andeq	fp, r2, r4, lsl #12
   2b704:	andeq	fp, r2, r4, lsl #12
   2b708:	andeq	fp, r2, r4, lsl #12
   2b70c:	andeq	fp, r2, r4, lsl #12
   2b710:	andeq	fp, r2, r4, lsl #12
   2b714:	andeq	fp, r2, r4, lsl #12
   2b718:	andeq	fp, r2, r4, lsl #12
   2b71c:	andeq	fp, r2, r4, lsl #12
   2b720:	andeq	fp, r2, r4, lsl #12
   2b724:	andeq	fp, r2, r4, lsl #12
   2b728:	andeq	fp, r2, r4, lsl #12
   2b72c:	andeq	fp, r2, r4, lsl #12
   2b730:	andeq	fp, r2, r4, lsl #12
   2b734:	andeq	fp, r2, r4, lsl #12
   2b738:	andeq	fp, r2, r4, lsl #12
   2b73c:	andeq	fp, r2, r4, lsr r9
   2b740:	andeq	fp, r2, r4, lsl r9
   2b744:	andeq	fp, r2, r4, lsl r9
   2b748:	andeq	fp, r2, r4, lsl #18
   2b74c:	andeq	fp, r2, r4, lsl r9
   2b750:	andeq	fp, r2, r0, asr r6
   2b754:	andeq	fp, r2, r4, lsl r9
   2b758:	andeq	fp, r2, r4, asr #6
   2b75c:	andeq	fp, r2, r4, lsl r9
   2b760:	andeq	fp, r2, r4, lsl r9
   2b764:	andeq	fp, r2, r4, lsl r9
   2b768:	andeq	fp, r2, r0, asr r6
   2b76c:	andeq	fp, r2, r0, asr r6
   2b770:	andeq	fp, r2, r0, asr r6
   2b774:	andeq	fp, r2, r0, asr r6
   2b778:	andeq	fp, r2, r0, asr r6
   2b77c:	andeq	fp, r2, r0, asr r6
   2b780:	andeq	fp, r2, r0, asr r6
   2b784:	andeq	fp, r2, r0, asr r6
   2b788:	andeq	fp, r2, r0, asr r6
   2b78c:	andeq	fp, r2, r0, asr r6
   2b790:	andeq	fp, r2, r0, asr r6
   2b794:	andeq	fp, r2, r0, asr r6
   2b798:	andeq	fp, r2, r0, asr r6
   2b79c:	andeq	fp, r2, r0, asr r6
   2b7a0:	andeq	fp, r2, r0, asr r6
   2b7a4:	andeq	fp, r2, r0, asr r6
   2b7a8:	andeq	fp, r2, r4, lsl r9
   2b7ac:	andeq	fp, r2, r4, lsl r9
   2b7b0:	andeq	fp, r2, r4, lsl r9
   2b7b4:	andeq	fp, r2, r4, lsl r9
   2b7b8:	andeq	fp, r2, r8, lsl r3
   2b7bc:	andeq	fp, r2, r4, lsl #12
   2b7c0:	andeq	fp, r2, r0, asr r6
   2b7c4:	andeq	fp, r2, r0, asr r6
   2b7c8:	andeq	fp, r2, r0, asr r6
   2b7cc:	andeq	fp, r2, r0, asr r6
   2b7d0:	andeq	fp, r2, r0, asr r6
   2b7d4:	andeq	fp, r2, r0, asr r6
   2b7d8:	andeq	fp, r2, r0, asr r6
   2b7dc:	andeq	fp, r2, r0, asr r6
   2b7e0:	andeq	fp, r2, r0, asr r6
   2b7e4:	andeq	fp, r2, r0, asr r6
   2b7e8:	andeq	fp, r2, r0, asr r6
   2b7ec:	andeq	fp, r2, r0, asr r6
   2b7f0:	andeq	fp, r2, r0, asr r6
   2b7f4:	andeq	fp, r2, r0, asr r6
   2b7f8:	andeq	fp, r2, r0, asr r6
   2b7fc:	andeq	fp, r2, r0, asr r6
   2b800:	andeq	fp, r2, r0, asr r6
   2b804:	andeq	fp, r2, r0, asr r6
   2b808:	andeq	fp, r2, r0, asr r6
   2b80c:	andeq	fp, r2, r0, asr r6
   2b810:	andeq	fp, r2, r0, asr r6
   2b814:	andeq	fp, r2, r0, asr r6
   2b818:	andeq	fp, r2, r0, asr r6
   2b81c:	andeq	fp, r2, r0, asr r6
   2b820:	andeq	fp, r2, r0, asr r6
   2b824:	andeq	fp, r2, r0, asr r6
   2b828:	andeq	fp, r2, r4, lsl r9
   2b82c:	andeq	fp, r2, r0, asr #5
   2b830:	andeq	fp, r2, r0, asr r6
   2b834:	andeq	fp, r2, r4, lsl r9
   2b838:	andeq	fp, r2, r0, asr r6
   2b83c:	andeq	fp, r2, r4, lsl r9
   2b840:	andeq	fp, r2, r0, asr r6
   2b844:	andeq	fp, r2, r0, asr r6
   2b848:	andeq	fp, r2, r0, asr r6
   2b84c:	andeq	fp, r2, r0, asr r6
   2b850:	andeq	fp, r2, r0, asr r6
   2b854:	andeq	fp, r2, r0, asr r6
   2b858:	andeq	fp, r2, r0, asr r6
   2b85c:	andeq	fp, r2, r0, asr r6
   2b860:	andeq	fp, r2, r0, asr r6
   2b864:	andeq	fp, r2, r0, asr r6
   2b868:	andeq	fp, r2, r0, asr r6
   2b86c:	andeq	fp, r2, r0, asr r6
   2b870:	andeq	fp, r2, r0, asr r6
   2b874:	andeq	fp, r2, r0, asr r6
   2b878:	andeq	fp, r2, r0, asr r6
   2b87c:	andeq	fp, r2, r0, asr r6
   2b880:	andeq	fp, r2, r0, asr r6
   2b884:	andeq	fp, r2, r0, asr r6
   2b888:	andeq	fp, r2, r0, asr r6
   2b88c:	andeq	fp, r2, r0, asr r6
   2b890:	andeq	fp, r2, r0, asr r6
   2b894:	andeq	fp, r2, r0, asr r6
   2b898:	andeq	fp, r2, r0, asr r6
   2b89c:	andeq	fp, r2, r0, asr r6
   2b8a0:	andeq	fp, r2, r0, asr r6
   2b8a4:	andeq	fp, r2, r0, asr r6
   2b8a8:	andeq	fp, r2, r4, ror #1
   2b8ac:	andeq	fp, r2, r4, lsl r9
   2b8b0:	andeq	fp, r2, r4, ror #1
   2b8b4:	andeq	fp, r2, r4, lsl #18
   2b8b8:	mov	r3, #114	; 0x72
   2b8bc:	b	2b420 <__assert_fail@plt+0x18e2c>
   2b8c0:	mov	r3, #102	; 0x66
   2b8c4:	b	2b2f0 <__assert_fail@plt+0x18cfc>
   2b8c8:	mov	r3, #110	; 0x6e
   2b8cc:	b	2b420 <__assert_fail@plt+0x18e2c>
   2b8d0:	mov	r3, #98	; 0x62
   2b8d4:	b	2b2f0 <__assert_fail@plt+0x18cfc>
   2b8d8:	mov	r3, #97	; 0x61
   2b8dc:	b	2b2f0 <__assert_fail@plt+0x18cfc>
   2b8e0:	ldr	r3, [sp, #40]	; 0x28
   2b8e4:	cmp	r3, #0
   2b8e8:	bne	2b4f8 <__assert_fail@plt+0x18f04>
   2b8ec:	ldr	r3, [sp, #156]	; 0x9c
   2b8f0:	tst	r3, #1
   2b8f4:	addne	r9, r9, #1
   2b8f8:	bne	2ac8c <__assert_fail@plt+0x18698>
   2b8fc:	ldr	r7, [sp, #40]	; 0x28
   2b900:	b	2b2fc <__assert_fail@plt+0x18d08>
   2b904:	sub	r3, fp, #2
   2b908:	clz	r3, r3
   2b90c:	lsr	r3, r3, #5
   2b910:	b	2b110 <__assert_fail@plt+0x18b1c>
   2b914:	sub	r3, fp, #2
   2b918:	mov	r6, #0
   2b91c:	clz	r3, r3
   2b920:	lsr	r3, r3, #5
   2b924:	ldr	r2, [sp, #44]	; 0x2c
   2b928:	tst	r2, r3
   2b92c:	beq	2b11c <__assert_fail@plt+0x18b28>
   2b930:	b	2b438 <__assert_fail@plt+0x18e44>
   2b934:	sub	r3, fp, #2
   2b938:	clz	r3, r3
   2b93c:	lsr	r3, r3, #5
   2b940:	b	2b924 <__assert_fail@plt+0x19330>
   2b944:	ldr	r3, [sp, #52]	; 0x34
   2b948:	ldrb	r5, [r3]
   2b94c:	cmp	r5, #126	; 0x7e
   2b950:	ldrls	pc, [pc, r5, lsl #2]
   2b954:	b	2b600 <__assert_fail@plt+0x1900c>
   2b958:	strdeq	fp, [r2], -r8
   2b95c:	andeq	fp, r2, r0, lsl #12
   2b960:	andeq	fp, r2, r0, lsl #12
   2b964:	andeq	fp, r2, r0, lsl #12
   2b968:	andeq	fp, r2, r0, lsl #12
   2b96c:	andeq	fp, r2, r0, lsl #12
   2b970:	andeq	fp, r2, r0, lsl #12
   2b974:	ldrdeq	fp, [r2], -ip
   2b978:	ldrdeq	fp, [r2], -r4
   2b97c:	muleq	r2, r0, fp
   2b980:	andeq	fp, r2, r8, asr #9
   2b984:	andeq	fp, r2, r4, lsl #23
   2b988:	andeq	fp, r2, r4, lsr #9
   2b98c:	strdeq	fp, [r2], -r0
   2b990:	andeq	fp, r2, r0, lsl #12
   2b994:	andeq	fp, r2, r0, lsl #12
   2b998:	andeq	fp, r2, r0, lsl #12
   2b99c:	andeq	fp, r2, r0, lsl #12
   2b9a0:	andeq	fp, r2, r0, lsl #12
   2b9a4:	andeq	fp, r2, r0, lsl #12
   2b9a8:	andeq	fp, r2, r0, lsl #12
   2b9ac:	andeq	fp, r2, r0, lsl #12
   2b9b0:	andeq	fp, r2, r0, lsl #12
   2b9b4:	andeq	fp, r2, r0, lsl #12
   2b9b8:	andeq	fp, r2, r0, lsl #12
   2b9bc:	andeq	fp, r2, r0, lsl #12
   2b9c0:	andeq	fp, r2, r0, lsl #12
   2b9c4:	andeq	fp, r2, r0, lsl #12
   2b9c8:	andeq	fp, r2, r0, lsl #12
   2b9cc:	andeq	fp, r2, r0, lsl #12
   2b9d0:	andeq	fp, r2, r0, lsl #12
   2b9d4:	andeq	fp, r2, r0, lsl #12
   2b9d8:	andeq	fp, r2, ip, ror fp
   2b9dc:	andeq	fp, r2, r4, ror #9
   2b9e0:	andeq	fp, r2, r4, ror #9
   2b9e4:	andeq	fp, r2, r0, ror #22
   2b9e8:	andeq	fp, r2, r4, ror #9
   2b9ec:	andeq	fp, r2, r4, asr fp
   2b9f0:	andeq	fp, r2, r4, ror #9
   2b9f4:	andeq	fp, r2, r0, asr #6
   2b9f8:	andeq	fp, r2, r4, ror #9
   2b9fc:	andeq	fp, r2, r4, ror #9
   2ba00:	andeq	fp, r2, r4, ror #9
   2ba04:	andeq	fp, r2, r4, asr fp
   2ba08:	andeq	fp, r2, r4, asr fp
   2ba0c:	andeq	fp, r2, r4, asr fp
   2ba10:	andeq	fp, r2, r4, asr fp
   2ba14:	andeq	fp, r2, r4, asr fp
   2ba18:	andeq	fp, r2, r4, asr fp
   2ba1c:	andeq	fp, r2, r4, asr fp
   2ba20:	andeq	fp, r2, r4, asr fp
   2ba24:	andeq	fp, r2, r4, asr fp
   2ba28:	andeq	fp, r2, r4, asr fp
   2ba2c:	andeq	fp, r2, r4, asr fp
   2ba30:	andeq	fp, r2, r4, asr fp
   2ba34:	andeq	fp, r2, r4, asr fp
   2ba38:	andeq	fp, r2, r4, asr fp
   2ba3c:	andeq	fp, r2, r4, asr fp
   2ba40:	andeq	fp, r2, r4, asr fp
   2ba44:	andeq	fp, r2, r4, ror #9
   2ba48:	andeq	fp, r2, r4, ror #9
   2ba4c:	andeq	fp, r2, r4, ror #9
   2ba50:	andeq	fp, r2, r4, ror #9
   2ba54:	andeq	fp, r2, r4, lsl r3
   2ba58:	andeq	fp, r2, r0, lsl #12
   2ba5c:	andeq	fp, r2, r4, asr fp
   2ba60:	andeq	fp, r2, r4, asr fp
   2ba64:	andeq	fp, r2, r4, asr fp
   2ba68:	andeq	fp, r2, r4, asr fp
   2ba6c:	andeq	fp, r2, r4, asr fp
   2ba70:	andeq	fp, r2, r4, asr fp
   2ba74:	andeq	fp, r2, r4, asr fp
   2ba78:	andeq	fp, r2, r4, asr fp
   2ba7c:	andeq	fp, r2, r4, asr fp
   2ba80:	andeq	fp, r2, r4, asr fp
   2ba84:	andeq	fp, r2, r4, asr fp
   2ba88:	andeq	fp, r2, r4, asr fp
   2ba8c:	andeq	fp, r2, r4, asr fp
   2ba90:	andeq	fp, r2, r4, asr fp
   2ba94:	andeq	fp, r2, r4, asr fp
   2ba98:	andeq	fp, r2, r4, asr fp
   2ba9c:	andeq	fp, r2, r4, asr fp
   2baa0:	andeq	fp, r2, r4, asr fp
   2baa4:	andeq	fp, r2, r4, asr fp
   2baa8:	andeq	fp, r2, r4, asr fp
   2baac:	andeq	fp, r2, r4, asr fp
   2bab0:	andeq	fp, r2, r4, asr fp
   2bab4:	andeq	fp, r2, r4, asr fp
   2bab8:	andeq	fp, r2, r4, asr fp
   2babc:	andeq	fp, r2, r4, asr fp
   2bac0:	andeq	fp, r2, r4, asr fp
   2bac4:	andeq	fp, r2, r4, ror #9
   2bac8:			; <UNDEFINED> instruction: 0x0002b2bc
   2bacc:	andeq	fp, r2, r4, asr fp
   2bad0:	andeq	fp, r2, r4, ror #9
   2bad4:	andeq	fp, r2, r4, asr fp
   2bad8:	andeq	fp, r2, r4, ror #9
   2badc:	andeq	fp, r2, r4, asr fp
   2bae0:	andeq	fp, r2, r4, asr fp
   2bae4:	andeq	fp, r2, r4, asr fp
   2bae8:	andeq	fp, r2, r4, asr fp
   2baec:	andeq	fp, r2, r4, asr fp
   2baf0:	andeq	fp, r2, r4, asr fp
   2baf4:	andeq	fp, r2, r4, asr fp
   2baf8:	andeq	fp, r2, r4, asr fp
   2bafc:	andeq	fp, r2, r4, asr fp
   2bb00:	andeq	fp, r2, r4, asr fp
   2bb04:	andeq	fp, r2, r4, asr fp
   2bb08:	andeq	fp, r2, r4, asr fp
   2bb0c:	andeq	fp, r2, r4, asr fp
   2bb10:	andeq	fp, r2, r4, asr fp
   2bb14:	andeq	fp, r2, r4, asr fp
   2bb18:	andeq	fp, r2, r4, asr fp
   2bb1c:	andeq	fp, r2, r4, asr fp
   2bb20:	andeq	fp, r2, r4, asr fp
   2bb24:	andeq	fp, r2, r4, asr fp
   2bb28:	andeq	fp, r2, r4, asr fp
   2bb2c:	andeq	fp, r2, r4, asr fp
   2bb30:	andeq	fp, r2, r4, asr fp
   2bb34:	andeq	fp, r2, r4, asr fp
   2bb38:	andeq	fp, r2, r4, asr fp
   2bb3c:	andeq	fp, r2, r4, asr fp
   2bb40:	andeq	fp, r2, r4, asr fp
   2bb44:	andeq	fp, r2, r0, ror #1
   2bb48:	andeq	fp, r2, r4, ror #9
   2bb4c:	andeq	fp, r2, r0, ror #1
   2bb50:	andeq	fp, r2, r0, ror #22
   2bb54:	mov	r6, r7
   2bb58:	mov	r7, #0
   2bb5c:	b	2b30c <__assert_fail@plt+0x18d18>
   2bb60:	cmp	r9, #0
   2bb64:	mov	r2, #0
   2bb68:	beq	2b5d0 <__assert_fail@plt+0x18fdc>
   2bb6c:	mov	r6, #0
   2bb70:	mov	r7, r2
   2bb74:	mov	r3, r6
   2bb78:	b	2b12c <__assert_fail@plt+0x18b38>
   2bb7c:	mov	r2, #0
   2bb80:	b	2b5e4 <__assert_fail@plt+0x18ff0>
   2bb84:	mov	r7, #0
   2bb88:	mov	r3, #118	; 0x76
   2bb8c:	b	2b2f0 <__assert_fail@plt+0x18cfc>
   2bb90:	mov	r7, #0
   2bb94:	mov	r3, #116	; 0x74
   2bb98:	b	2b420 <__assert_fail@plt+0x18e2c>
   2bb9c:	ldr	r3, [sp, #44]	; 0x2c
   2bba0:	b	2b154 <__assert_fail@plt+0x18b60>
   2bba4:	ldr	r3, [sp, #44]	; 0x2c
   2bba8:	cmp	r3, #0
   2bbac:	bne	2c01c <__assert_fail@plt+0x19a28>
   2bbb0:	add	r9, r9, #1
   2bbb4:	mov	r6, #0
   2bbb8:	ldr	r3, [sp, #48]	; 0x30
   2bbbc:	mov	r5, #92	; 0x5c
   2bbc0:	b	2b3e0 <__assert_fail@plt+0x18dec>
   2bbc4:	ldr	r3, [sp, #32]
   2bbc8:	ldrb	r2, [r3, #1]
   2bbcc:	adds	r2, r2, #0
   2bbd0:	movne	r2, #1
   2bbd4:	b	2b0fc <__assert_fail@plt+0x18b08>
   2bbd8:	ldr	r3, [sp, #156]	; 0x9c
   2bbdc:	ands	r3, r3, #4
   2bbe0:	beq	2bc08 <__assert_fail@plt+0x19614>
   2bbe4:	ldr	r2, [sp, #28]
   2bbe8:	add	r3, r9, #2
   2bbec:	cmp	r3, r2
   2bbf0:	bcs	2bc04 <__assert_fail@plt+0x19610>
   2bbf4:	ldr	r2, [sp, #52]	; 0x34
   2bbf8:	ldrb	r5, [r2, #1]
   2bbfc:	cmp	r5, #63	; 0x3f
   2bc00:	beq	2c080 <__assert_fail@plt+0x19a8c>
   2bc04:	mov	r3, #0
   2bc08:	mov	r5, #63	; 0x3f
   2bc0c:	mov	r6, r3
   2bc10:	b	2b11c <__assert_fail@plt+0x18b28>
   2bc14:	ldr	r3, [sp, #44]	; 0x2c
   2bc18:	cmp	r3, #0
   2bc1c:	bne	2c01c <__assert_fail@plt+0x19a28>
   2bc20:	mov	r6, r3
   2bc24:	mov	r5, #63	; 0x3f
   2bc28:	b	2b154 <__assert_fail@plt+0x18b60>
   2bc2c:	ldr	r1, [sp, #28]
   2bc30:	mov	r2, #0
   2bc34:	mov	r3, #0
   2bc38:	strd	r2, [sp, #104]	; 0x68
   2bc3c:	cmn	r1, #1
   2bc40:	bne	2bc50 <__assert_fail@plt+0x1965c>
   2bc44:	ldr	r0, [sp, #32]
   2bc48:	bl	12300 <strlen@plt>
   2bc4c:	str	r0, [sp, #28]
   2bc50:	str	r8, [sp, #76]	; 0x4c
   2bc54:	mov	r3, #0
   2bc58:	str	sl, [sp, #80]	; 0x50
   2bc5c:	ldr	sl, [sp, #32]
   2bc60:	str	r5, [sp, #84]	; 0x54
   2bc64:	mov	r5, r3
   2bc68:	ldr	r8, [sp, #44]	; 0x2c
   2bc6c:	str	r7, [sp, #88]	; 0x58
   2bc70:	str	r4, [sp, #92]	; 0x5c
   2bc74:	ldr	r2, [sp, #28]
   2bc78:	add	r4, r9, r5
   2bc7c:	add	r3, sp, #104	; 0x68
   2bc80:	add	r7, sl, r4
   2bc84:	add	r0, sp, #100	; 0x64
   2bc88:	mov	r1, r7
   2bc8c:	sub	r2, r2, r4
   2bc90:	bl	31b90 <__assert_fail@plt+0x1f59c>
   2bc94:	subs	r1, r0, #0
   2bc98:	beq	2bce4 <__assert_fail@plt+0x196f0>
   2bc9c:	cmn	r1, #1
   2bca0:	beq	2c05c <__assert_fail@plt+0x19a68>
   2bca4:	cmn	r1, #2
   2bca8:	beq	2c17c <__assert_fail@plt+0x19b88>
   2bcac:	cmp	fp, #2
   2bcb0:	movne	r3, #0
   2bcb4:	andeq	r3, r8, #1
   2bcb8:	cmp	r3, #0
   2bcbc:	bne	2be48 <__assert_fail@plt+0x19854>
   2bcc0:	ldr	r0, [sp, #100]	; 0x64
   2bcc4:	add	r5, r5, r1
   2bcc8:	bl	12138 <iswprint@plt>
   2bccc:	cmp	r0, #0
   2bcd0:	add	r0, sp, #104	; 0x68
   2bcd4:	moveq	r6, #0
   2bcd8:	bl	12060 <mbsinit@plt>
   2bcdc:	cmp	r0, #0
   2bce0:	beq	2bc74 <__assert_fail@plt+0x19680>
   2bce4:	ldr	r3, [sp, #40]	; 0x28
   2bce8:	mov	ip, r5
   2bcec:	eor	r2, r6, #1
   2bcf0:	ldr	r8, [sp, #76]	; 0x4c
   2bcf4:	ldr	sl, [sp, #80]	; 0x50
   2bcf8:	and	r2, r2, r3
   2bcfc:	ldr	r5, [sp, #84]	; 0x54
   2bd00:	ldr	r7, [sp, #88]	; 0x58
   2bd04:	ldr	r4, [sp, #92]	; 0x5c
   2bd08:	cmp	ip, #1
   2bd0c:	bls	2b648 <__assert_fail@plt+0x19054>
   2bd10:	add	r1, r9, ip
   2bd14:	mov	r0, #39	; 0x27
   2bd18:	ldr	lr, [sp, #52]	; 0x34
   2bd1c:	mov	ip, #0
   2bd20:	str	r6, [sp, #52]	; 0x34
   2bd24:	ldr	r6, [sp, #48]	; 0x30
   2bd28:	b	2bde4 <__assert_fail@plt+0x197f0>
   2bd2c:	ldr	ip, [sp, #44]	; 0x2c
   2bd30:	sub	r3, fp, #2
   2bd34:	clz	r3, r3
   2bd38:	lsr	r3, r3, #5
   2bd3c:	cmp	ip, #0
   2bd40:	bne	2bf54 <__assert_fail@plt+0x19960>
   2bd44:	eor	ip, r6, #1
   2bd48:	ands	r3, r3, ip
   2bd4c:	beq	2bd7c <__assert_fail@plt+0x19788>
   2bd50:	cmp	sl, r4
   2bd54:	add	ip, r4, #1
   2bd58:	strbhi	r0, [r8, r4]
   2bd5c:	cmp	sl, ip
   2bd60:	movhi	r6, #36	; 0x24
   2bd64:	strbhi	r6, [r8, ip]
   2bd68:	add	ip, r4, #2
   2bd6c:	mov	r6, r3
   2bd70:	cmp	sl, ip
   2bd74:	add	r4, r4, #3
   2bd78:	strbhi	r0, [r8, ip]
   2bd7c:	cmp	sl, r4
   2bd80:	movhi	r3, #92	; 0x5c
   2bd84:	strbhi	r3, [r8, r4]
   2bd88:	add	r3, r4, #1
   2bd8c:	cmp	sl, r3
   2bd90:	bls	2bda0 <__assert_fail@plt+0x197ac>
   2bd94:	lsr	ip, r5, #6
   2bd98:	add	ip, ip, #48	; 0x30
   2bd9c:	strb	ip, [r8, r3]
   2bda0:	add	r3, r4, #2
   2bda4:	cmp	sl, r3
   2bda8:	bls	2bdb8 <__assert_fail@plt+0x197c4>
   2bdac:	ubfx	ip, r5, #3, #3
   2bdb0:	add	ip, ip, #48	; 0x30
   2bdb4:	strb	ip, [r8, r3]
   2bdb8:	add	r9, r9, #1
   2bdbc:	and	r5, r5, #7
   2bdc0:	cmp	r9, r1
   2bdc4:	add	r5, r5, #48	; 0x30
   2bdc8:	add	r4, r4, #3
   2bdcc:	bcs	2bf80 <__assert_fail@plt+0x1998c>
   2bdd0:	mov	ip, r2
   2bdd4:	cmp	sl, r4
   2bdd8:	strbhi	r5, [r8, r4]
   2bddc:	add	r4, r4, #1
   2bde0:	ldrb	r5, [lr, #1]!
   2bde4:	cmp	r2, #0
   2bde8:	bne	2bd2c <__assert_fail@plt+0x19738>
   2bdec:	eor	r3, ip, #1
   2bdf0:	cmp	r7, #0
   2bdf4:	and	r3, r3, r6
   2bdf8:	uxtb	r3, r3
   2bdfc:	beq	2be10 <__assert_fail@plt+0x1981c>
   2be00:	cmp	sl, r4
   2be04:	movhi	r7, #92	; 0x5c
   2be08:	strbhi	r7, [r8, r4]
   2be0c:	add	r4, r4, #1
   2be10:	add	r9, r9, #1
   2be14:	cmp	r9, r1
   2be18:	bcs	2bf68 <__assert_fail@plt+0x19974>
   2be1c:	cmp	r3, #0
   2be20:	beq	2bfa0 <__assert_fail@plt+0x199ac>
   2be24:	cmp	sl, r4
   2be28:	add	r3, r4, #1
   2be2c:	mov	r7, #0
   2be30:	strbhi	r0, [r8, r4]
   2be34:	cmp	sl, r3
   2be38:	add	r4, r4, #2
   2be3c:	mov	r6, r7
   2be40:	strbhi	r0, [r8, r3]
   2be44:	b	2bdd4 <__assert_fail@plt+0x197e0>
   2be48:	cmp	r1, #1
   2be4c:	beq	2bcc0 <__assert_fail@plt+0x196cc>
   2be50:	add	r2, r4, #1
   2be54:	add	r3, sl, r1
   2be58:	add	r2, sl, r2
   2be5c:	add	r4, r3, r4
   2be60:	ldrb	r3, [r2], #1
   2be64:	sub	r3, r3, #91	; 0x5b
   2be68:	cmp	r3, #33	; 0x21
   2be6c:	ldrls	pc, [pc, r3, lsl #2]
   2be70:	b	2befc <__assert_fail@plt+0x19908>
   2be74:	andeq	fp, r2, r8, lsl #30
   2be78:	andeq	fp, r2, r8, lsl #30
   2be7c:	strdeq	fp, [r2], -ip
   2be80:	andeq	fp, r2, r8, lsl #30
   2be84:	strdeq	fp, [r2], -ip
   2be88:	andeq	fp, r2, r8, lsl #30
   2be8c:	strdeq	fp, [r2], -ip
   2be90:	strdeq	fp, [r2], -ip
   2be94:	strdeq	fp, [r2], -ip
   2be98:	strdeq	fp, [r2], -ip
   2be9c:	strdeq	fp, [r2], -ip
   2bea0:	strdeq	fp, [r2], -ip
   2bea4:	strdeq	fp, [r2], -ip
   2bea8:	strdeq	fp, [r2], -ip
   2beac:	strdeq	fp, [r2], -ip
   2beb0:	strdeq	fp, [r2], -ip
   2beb4:	strdeq	fp, [r2], -ip
   2beb8:	strdeq	fp, [r2], -ip
   2bebc:	strdeq	fp, [r2], -ip
   2bec0:	strdeq	fp, [r2], -ip
   2bec4:	strdeq	fp, [r2], -ip
   2bec8:	strdeq	fp, [r2], -ip
   2becc:	strdeq	fp, [r2], -ip
   2bed0:	strdeq	fp, [r2], -ip
   2bed4:	strdeq	fp, [r2], -ip
   2bed8:	strdeq	fp, [r2], -ip
   2bedc:	strdeq	fp, [r2], -ip
   2bee0:	strdeq	fp, [r2], -ip
   2bee4:	strdeq	fp, [r2], -ip
   2bee8:	strdeq	fp, [r2], -ip
   2beec:	strdeq	fp, [r2], -ip
   2bef0:	strdeq	fp, [r2], -ip
   2bef4:	strdeq	fp, [r2], -ip
   2bef8:	andeq	fp, r2, r8, lsl #30
   2befc:	cmp	r4, r2
   2bf00:	bne	2be60 <__assert_fail@plt+0x1986c>
   2bf04:	b	2bcc0 <__assert_fail@plt+0x196cc>
   2bf08:	mov	r8, #2
   2bf0c:	ldr	fp, [sp, #76]	; 0x4c
   2bf10:	ldr	sl, [sp, #80]	; 0x50
   2bf14:	b	2b440 <__assert_fail@plt+0x18e4c>
   2bf18:	ldr	r2, [sp, #40]	; 0x28
   2bf1c:	str	fp, [sp, #152]	; 0x98
   2bf20:	mov	fp, r8
   2bf24:	ldr	r8, [sp, #152]	; 0x98
   2bf28:	and	r2, r2, r3
   2bf2c:	str	r2, [sp, #40]	; 0x28
   2bf30:	b	2b440 <__assert_fail@plt+0x18e4c>
   2bf34:	cmp	sl, r4
   2bf38:	movls	r0, r4
   2bf3c:	bls	2b570 <__assert_fail@plt+0x18f7c>
   2bf40:	ldr	r3, [sp, #48]	; 0x30
   2bf44:	b	2b560 <__assert_fail@plt+0x18f6c>
   2bf48:	str	sl, [sp, #72]	; 0x48
   2bf4c:	ldr	sl, [sp, #44]	; 0x2c
   2bf50:	b	2b3b0 <__assert_fail@plt+0x18dbc>
   2bf54:	str	r3, [sp, #40]	; 0x28
   2bf58:	str	fp, [sp, #152]	; 0x98
   2bf5c:	mov	fp, r8
   2bf60:	ldr	r8, [sp, #152]	; 0x98
   2bf64:	b	2b440 <__assert_fail@plt+0x18e4c>
   2bf68:	str	r6, [sp, #48]	; 0x30
   2bf6c:	ldr	r6, [sp, #52]	; 0x34
   2bf70:	b	2b3e0 <__assert_fail@plt+0x18dec>
   2bf74:	mov	r6, #0
   2bf78:	ldr	r2, [sp, #40]	; 0x28
   2bf7c:	b	2bd10 <__assert_fail@plt+0x1971c>
   2bf80:	str	r6, [sp, #48]	; 0x30
   2bf84:	ldr	r6, [sp, #52]	; 0x34
   2bf88:	b	2b1cc <__assert_fail@plt+0x18bd8>
   2bf8c:	add	r4, r4, #4
   2bf90:	mov	r6, #0
   2bf94:	str	r3, [sp, #48]	; 0x30
   2bf98:	mov	r5, #48	; 0x30
   2bf9c:	b	2b154 <__assert_fail@plt+0x18b60>
   2bfa0:	mov	r7, r3
   2bfa4:	b	2bdd4 <__assert_fail@plt+0x197e0>
   2bfa8:	mov	r3, #1
   2bfac:	movw	r2, #32376	; 0x7e78
   2bfb0:	movt	r2, #4
   2bfb4:	mov	r4, r3
   2bfb8:	str	r3, [sp, #36]	; 0x24
   2bfbc:	str	r3, [sp, #40]	; 0x28
   2bfc0:	str	sl, [sp, #44]	; 0x2c
   2bfc4:	str	sl, [sp, #48]	; 0x30
   2bfc8:	str	r3, [sp, #56]	; 0x38
   2bfcc:	str	r2, [sp, #60]	; 0x3c
   2bfd0:	str	sl, [sp, #68]	; 0x44
   2bfd4:	str	sl, [sp, #72]	; 0x48
   2bfd8:	b	2ac7c <__assert_fail@plt+0x18688>
   2bfdc:	mov	r3, r6
   2bfe0:	mov	r5, #48	; 0x30
   2bfe4:	mov	r6, #0
   2bfe8:	b	2b154 <__assert_fail@plt+0x18b60>
   2bfec:	mov	r5, r3
   2bff0:	b	2b4cc <__assert_fail@plt+0x18ed8>
   2bff4:	cmp	sl, r4
   2bff8:	mov	r5, #48	; 0x30
   2bffc:	movhi	r3, #48	; 0x30
   2c000:	strbhi	r3, [r8, r4]
   2c004:	add	r3, r0, #2
   2c008:	add	r4, r0, #3
   2c00c:	cmp	sl, r3
   2c010:	movhi	r1, #48	; 0x30
   2c014:	strbhi	r1, [r8, r3]
   2c018:	b	2b5a4 <__assert_fail@plt+0x18fb0>
   2c01c:	str	fp, [sp, #152]	; 0x98
   2c020:	mov	fp, r8
   2c024:	ldr	r8, [sp, #152]	; 0x98
   2c028:	b	2b440 <__assert_fail@plt+0x18e4c>
   2c02c:	ldr	r3, [sp, #164]	; 0xa4
   2c030:	ldrb	r3, [r3]
   2c034:	cmp	r3, #0
   2c038:	beq	2ac4c <__assert_fail@plt+0x18658>
   2c03c:	ldr	r2, [sp, #164]	; 0xa4
   2c040:	cmp	sl, r4
   2c044:	strbhi	r3, [fp, r4]
   2c048:	add	r4, r4, #1
   2c04c:	ldrb	r3, [r2, #1]!
   2c050:	cmp	r3, #0
   2c054:	bne	2c040 <__assert_fail@plt+0x19a4c>
   2c058:	b	2ac4c <__assert_fail@plt+0x18658>
   2c05c:	mov	ip, r5
   2c060:	mov	r6, #0
   2c064:	ldr	r2, [sp, #40]	; 0x28
   2c068:	ldr	r8, [sp, #76]	; 0x4c
   2c06c:	ldr	sl, [sp, #80]	; 0x50
   2c070:	ldr	r5, [sp, #84]	; 0x54
   2c074:	ldr	r7, [sp, #88]	; 0x58
   2c078:	ldr	r4, [sp, #92]	; 0x5c
   2c07c:	b	2bd08 <__assert_fail@plt+0x19714>
   2c080:	ldr	r2, [sp, #32]
   2c084:	ldrb	r1, [r2, r3]
   2c088:	sub	r2, r1, #33	; 0x21
   2c08c:	cmp	r2, #29
   2c090:	ldrls	pc, [pc, r2, lsl #2]
   2c094:	b	2c170 <__assert_fail@plt+0x19b7c>
   2c098:	andeq	ip, r2, r0, lsl r1
   2c09c:	andeq	ip, r2, r0, ror r1
   2c0a0:	andeq	ip, r2, r0, ror r1
   2c0a4:	andeq	ip, r2, r0, ror r1
   2c0a8:	andeq	ip, r2, r0, ror r1
   2c0ac:	andeq	ip, r2, r0, ror r1
   2c0b0:	andeq	ip, r2, r0, lsl r1
   2c0b4:	andeq	ip, r2, r0, lsl r1
   2c0b8:	andeq	ip, r2, r0, lsl r1
   2c0bc:	andeq	ip, r2, r0, ror r1
   2c0c0:	andeq	ip, r2, r0, ror r1
   2c0c4:	andeq	ip, r2, r0, ror r1
   2c0c8:	andeq	ip, r2, r0, lsl r1
   2c0cc:	andeq	ip, r2, r0, ror r1
   2c0d0:	andeq	ip, r2, r0, lsl r1
   2c0d4:	andeq	ip, r2, r0, ror r1
   2c0d8:	andeq	ip, r2, r0, ror r1
   2c0dc:	andeq	ip, r2, r0, ror r1
   2c0e0:	andeq	ip, r2, r0, ror r1
   2c0e4:	andeq	ip, r2, r0, ror r1
   2c0e8:	andeq	ip, r2, r0, ror r1
   2c0ec:	andeq	ip, r2, r0, ror r1
   2c0f0:	andeq	ip, r2, r0, ror r1
   2c0f4:	andeq	ip, r2, r0, ror r1
   2c0f8:	andeq	ip, r2, r0, ror r1
   2c0fc:	andeq	ip, r2, r0, ror r1
   2c100:	andeq	ip, r2, r0, ror r1
   2c104:	andeq	ip, r2, r0, lsl r1
   2c108:	andeq	ip, r2, r0, lsl r1
   2c10c:	andeq	ip, r2, r0, lsl r1
   2c110:	ldr	r2, [sp, #44]	; 0x2c
   2c114:	cmp	r2, #0
   2c118:	bne	2c274 <__assert_fail@plt+0x19c80>
   2c11c:	cmp	sl, r4
   2c120:	mov	r5, r1
   2c124:	movhi	r2, #63	; 0x3f
   2c128:	mov	r9, r3
   2c12c:	strbhi	r2, [r8, r4]
   2c130:	add	r2, r4, #1
   2c134:	cmp	sl, r2
   2c138:	movhi	r0, #34	; 0x22
   2c13c:	strbhi	r0, [r8, r2]
   2c140:	add	r2, r4, #2
   2c144:	cmp	sl, r2
   2c148:	movhi	r0, #34	; 0x22
   2c14c:	strbhi	r0, [r8, r2]
   2c150:	add	r2, r4, #3
   2c154:	add	r4, r4, #4
   2c158:	cmp	sl, r2
   2c15c:	movhi	r0, #63	; 0x3f
   2c160:	strbhi	r0, [r8, r2]
   2c164:	mov	r2, #0
   2c168:	mov	r6, r2
   2c16c:	b	2b5a4 <__assert_fail@plt+0x18fb0>
   2c170:	mov	r3, #0
   2c174:	mov	r6, r3
   2c178:	b	2b11c <__assert_fail@plt+0x18b28>
   2c17c:	ldr	r0, [sp, #28]
   2c180:	mov	r1, r4
   2c184:	mov	r2, r7
   2c188:	mov	r3, r5
   2c18c:	mov	ip, r5
   2c190:	ldr	r8, [sp, #76]	; 0x4c
   2c194:	ldr	sl, [sp, #80]	; 0x50
   2c198:	cmp	r1, r0
   2c19c:	ldr	r5, [sp, #84]	; 0x54
   2c1a0:	ldr	r7, [sp, #88]	; 0x58
   2c1a4:	ldr	r4, [sp, #92]	; 0x5c
   2c1a8:	bcs	2c1dc <__assert_fail@plt+0x19be8>
   2c1ac:	ldrb	r6, [r2]
   2c1b0:	cmp	r6, #0
   2c1b4:	bne	2c1c8 <__assert_fail@plt+0x19bd4>
   2c1b8:	b	2c2fc <__assert_fail@plt+0x19d08>
   2c1bc:	ldrb	r6, [r2, #1]!
   2c1c0:	cmp	r6, #0
   2c1c4:	beq	2c284 <__assert_fail@plt+0x19c90>
   2c1c8:	add	r3, r3, #1
   2c1cc:	add	r1, r9, r3
   2c1d0:	cmp	r1, r0
   2c1d4:	bcc	2c1bc <__assert_fail@plt+0x19bc8>
   2c1d8:	mov	ip, r3
   2c1dc:	mov	r6, #0
   2c1e0:	ldr	r2, [sp, #40]	; 0x28
   2c1e4:	b	2bd08 <__assert_fail@plt+0x19714>
   2c1e8:	mov	r3, #1
   2c1ec:	mov	r2, #0
   2c1f0:	mov	r4, r2
   2c1f4:	str	r3, [sp, #36]	; 0x24
   2c1f8:	str	r3, [sp, #40]	; 0x28
   2c1fc:	str	r3, [sp, #44]	; 0x2c
   2c200:	str	r2, [sp, #48]	; 0x30
   2c204:	str	r3, [sp, #56]	; 0x38
   2c208:	movw	r3, #32376	; 0x7e78
   2c20c:	movt	r3, #4
   2c210:	str	r3, [sp, #60]	; 0x3c
   2c214:	str	r2, [sp, #68]	; 0x44
   2c218:	str	r2, [sp, #72]	; 0x48
   2c21c:	b	2ac7c <__assert_fail@plt+0x18688>
   2c220:	mov	r2, r3
   2c224:	ldr	r3, [sp, #60]	; 0x3c
   2c228:	cmp	r3, #0
   2c22c:	moveq	r2, #0
   2c230:	andne	r2, r2, #1
   2c234:	cmp	r2, #0
   2c238:	beq	2c264 <__assert_fail@plt+0x19c70>
   2c23c:	mov	r2, r3
   2c240:	ldrb	r3, [r3]
   2c244:	cmp	r3, #0
   2c248:	beq	2c264 <__assert_fail@plt+0x19c70>
   2c24c:	cmp	sl, r4
   2c250:	strbhi	r3, [fp, r4]
   2c254:	add	r4, r4, #1
   2c258:	ldrb	r3, [r2, #1]!
   2c25c:	cmp	r3, #0
   2c260:	bne	2c24c <__assert_fail@plt+0x19c58>
   2c264:	cmp	sl, r4
   2c268:	movhi	r3, #0
   2c26c:	strbhi	r3, [fp, r4]
   2c270:	b	2b484 <__assert_fail@plt+0x18e90>
   2c274:	str	fp, [sp, #152]	; 0x98
   2c278:	mov	fp, r8
   2c27c:	ldr	r8, [sp, #152]	; 0x98
   2c280:	b	2b44c <__assert_fail@plt+0x18e58>
   2c284:	mov	ip, r3
   2c288:	ldr	r2, [sp, #40]	; 0x28
   2c28c:	b	2bd08 <__assert_fail@plt+0x19714>
   2c290:	str	fp, [sp, #152]	; 0x98
   2c294:	mov	fp, r8
   2c298:	ldr	r8, [sp, #152]	; 0x98
   2c29c:	sub	r3, r8, #2
   2c2a0:	clz	r3, r3
   2c2a4:	lsr	r3, r3, #5
   2c2a8:	str	r3, [sp, #40]	; 0x28
   2c2ac:	b	2b440 <__assert_fail@plt+0x18e4c>
   2c2b0:	mov	ip, #5
   2c2b4:	ldr	r3, [sp, #28]
   2c2b8:	str	ip, [sp]
   2c2bc:	ldr	r2, [sp, #156]	; 0x9c
   2c2c0:	ldr	ip, [sp, #164]	; 0xa4
   2c2c4:	ldr	r0, [sp, #160]	; 0xa0
   2c2c8:	str	r2, [sp, #4]
   2c2cc:	ldr	r2, [sp, #32]
   2c2d0:	ldr	r1, [sp, #72]	; 0x48
   2c2d4:	str	ip, [sp, #12]
   2c2d8:	ldr	ip, [sp, #168]	; 0xa8
   2c2dc:	str	r0, [sp, #8]
   2c2e0:	mov	r0, fp
   2c2e4:	str	ip, [sp, #16]
   2c2e8:	bl	2ab94 <__assert_fail@plt+0x185a0>
   2c2ec:	mov	r4, r0
   2c2f0:	b	2b484 <__assert_fail@plt+0x18e90>
   2c2f4:	mov	r8, #2
   2c2f8:	b	2b440 <__assert_fail@plt+0x18e4c>
   2c2fc:	ldr	r2, [sp, #40]	; 0x28
   2c300:	b	2bd08 <__assert_fail@plt+0x19714>
   2c304:	mov	r3, #0
   2c308:	mov	r2, #1
   2c30c:	mov	r4, r3
   2c310:	strd	r2, [sp, #36]	; 0x24
   2c314:	strd	r2, [sp, #44]	; 0x2c
   2c318:	str	r2, [sp, #56]	; 0x38
   2c31c:	str	r3, [sp, #68]	; 0x44
   2c320:	str	r3, [sp, #72]	; 0x48
   2c324:	movw	r3, #13468	; 0x349c
   2c328:	movt	r3, #4
   2c32c:	str	r3, [sp, #60]	; 0x3c
   2c330:	b	2ac7c <__assert_fail@plt+0x18688>
   2c334:	mov	r3, #0
   2c338:	mov	r1, #1
   2c33c:	mov	r2, r3
   2c340:	str	r1, [sp, #36]	; 0x24
   2c344:	str	r3, [sp, #48]	; 0x30
   2c348:	str	sl, [sp, #72]	; 0x48
   2c34c:	b	2b284 <__assert_fail@plt+0x18c90>
   2c350:	bl	125a0 <abort@plt>
   2c354:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2c358:	mov	r4, r0
   2c35c:	mov	r5, r3
   2c360:	strd	r6, [sp, #8]
   2c364:	movw	r7, #38132	; 0x94f4
   2c368:	movt	r7, #5
   2c36c:	strd	r8, [sp, #16]
   2c370:	strd	sl, [sp, #24]
   2c374:	mov	sl, r1
   2c378:	mov	fp, r2
   2c37c:	str	lr, [sp, #32]
   2c380:	sub	sp, sp, #60	; 0x3c
   2c384:	bl	12348 <__errno_location@plt>
   2c388:	mov	r8, r0
   2c38c:	cmn	r4, #-2147483647	; 0x80000001
   2c390:	ldr	r6, [r7]
   2c394:	movne	r0, #0
   2c398:	moveq	r0, #1
   2c39c:	ldr	r3, [r8]
   2c3a0:	orrs	r0, r0, r4, lsr #31
   2c3a4:	str	r3, [sp, #28]
   2c3a8:	bne	2c538 <__assert_fail@plt+0x19f44>
   2c3ac:	ldr	r3, [r7, #4]
   2c3b0:	cmp	r3, r4
   2c3b4:	bgt	2c414 <__assert_fail@plt+0x19e20>
   2c3b8:	add	r1, r7, #8
   2c3bc:	sub	r2, r4, r3
   2c3c0:	str	r3, [sp, #52]	; 0x34
   2c3c4:	cmp	r6, r1
   2c3c8:	add	r2, r2, #1
   2c3cc:	beq	2c510 <__assert_fail@plt+0x19f1c>
   2c3d0:	mov	r1, #8
   2c3d4:	mov	r0, r6
   2c3d8:	mvn	r3, #-2147483648	; 0x80000000
   2c3dc:	str	r1, [sp]
   2c3e0:	add	r1, sp, #52	; 0x34
   2c3e4:	bl	2dc24 <__assert_fail@plt+0x1b630>
   2c3e8:	mov	r6, r0
   2c3ec:	str	r0, [r7]
   2c3f0:	ldr	r0, [r7, #4]
   2c3f4:	mov	r1, #0
   2c3f8:	ldr	r2, [sp, #52]	; 0x34
   2c3fc:	sub	r2, r2, r0
   2c400:	add	r0, r6, r0, lsl #3
   2c404:	lsl	r2, r2, #3
   2c408:	bl	12378 <memset@plt>
   2c40c:	ldr	r3, [sp, #52]	; 0x34
   2c410:	str	r3, [r7, #4]
   2c414:	ldr	r1, [r5, #4]
   2c418:	add	r0, r6, r4, lsl #3
   2c41c:	add	ip, r5, #8
   2c420:	mov	r3, fp
   2c424:	mov	r2, sl
   2c428:	ldr	r7, [r0, #4]
   2c42c:	str	r0, [sp, #36]	; 0x24
   2c430:	str	ip, [sp, #40]	; 0x28
   2c434:	orr	r0, r1, #1
   2c438:	ldr	r9, [r6, r4, lsl #3]
   2c43c:	str	ip, [sp, #8]
   2c440:	ldr	lr, [r5, #44]	; 0x2c
   2c444:	str	r0, [sp, #4]
   2c448:	ldr	ip, [r5]
   2c44c:	mov	r1, r9
   2c450:	str	ip, [sp, #32]
   2c454:	ldr	ip, [r5, #40]	; 0x28
   2c458:	str	ip, [sp, #12]
   2c45c:	ldr	ip, [sp, #32]
   2c460:	str	lr, [sp, #16]
   2c464:	str	r0, [sp, #44]	; 0x2c
   2c468:	mov	r0, r7
   2c46c:	str	ip, [sp]
   2c470:	bl	2ab94 <__assert_fail@plt+0x185a0>
   2c474:	cmp	r9, r0
   2c478:	bhi	2c4e8 <__assert_fail@plt+0x19ef4>
   2c47c:	add	r9, r0, #1
   2c480:	movw	r3, #40200	; 0x9d08
   2c484:	movt	r3, #5
   2c488:	cmp	r7, r3
   2c48c:	str	r9, [r6, r4, lsl #3]
   2c490:	beq	2c49c <__assert_fail@plt+0x19ea8>
   2c494:	mov	r0, r7
   2c498:	bl	2f668 <__assert_fail@plt+0x1d074>
   2c49c:	mov	r0, r9
   2c4a0:	bl	2da74 <__assert_fail@plt+0x1b480>
   2c4a4:	ldr	ip, [r5]
   2c4a8:	mov	r3, fp
   2c4ac:	mov	r2, sl
   2c4b0:	mov	r1, r9
   2c4b4:	mov	r7, r0
   2c4b8:	ldr	lr, [sp, #36]	; 0x24
   2c4bc:	ldr	r4, [r5, #40]	; 0x28
   2c4c0:	str	r0, [lr, #4]
   2c4c4:	ldr	lr, [r5, #44]	; 0x2c
   2c4c8:	str	ip, [sp]
   2c4cc:	ldr	ip, [sp, #44]	; 0x2c
   2c4d0:	str	ip, [sp, #4]
   2c4d4:	ldr	ip, [sp, #40]	; 0x28
   2c4d8:	str	r4, [sp, #12]
   2c4dc:	str	lr, [sp, #16]
   2c4e0:	str	ip, [sp, #8]
   2c4e4:	bl	2ab94 <__assert_fail@plt+0x185a0>
   2c4e8:	ldr	r3, [sp, #28]
   2c4ec:	mov	r0, r7
   2c4f0:	str	r3, [r8]
   2c4f4:	add	sp, sp, #60	; 0x3c
   2c4f8:	ldrd	r4, [sp]
   2c4fc:	ldrd	r6, [sp, #8]
   2c500:	ldrd	r8, [sp, #16]
   2c504:	ldrd	sl, [sp, #24]
   2c508:	add	sp, sp, #32
   2c50c:	pop	{pc}		; (ldr pc, [sp], #4)
   2c510:	mov	r1, #8
   2c514:	mvn	r3, #-2147483648	; 0x80000000
   2c518:	str	r1, [sp]
   2c51c:	add	r1, sp, #52	; 0x34
   2c520:	bl	2dc24 <__assert_fail@plt+0x1b630>
   2c524:	ldrd	r2, [r7, #8]
   2c528:	mov	r6, r0
   2c52c:	str	r0, [r7]
   2c530:	strd	r2, [r0]
   2c534:	b	2c3f0 <__assert_fail@plt+0x19dfc>
   2c538:	bl	125a0 <abort@plt>
   2c53c:	strd	r4, [sp, #-16]!
   2c540:	mov	r5, r0
   2c544:	str	r6, [sp, #8]
   2c548:	str	lr, [sp, #12]
   2c54c:	bl	12348 <__errno_location@plt>
   2c550:	mov	r4, r0
   2c554:	cmp	r5, #0
   2c558:	ldr	r0, [pc, #32]	; 2c580 <__assert_fail@plt+0x19f8c>
   2c55c:	mov	r1, #48	; 0x30
   2c560:	movne	r0, r5
   2c564:	ldr	r6, [r4]
   2c568:	bl	2dd9c <__assert_fail@plt+0x1b7a8>
   2c56c:	str	r6, [r4]
   2c570:	ldrd	r4, [sp]
   2c574:	ldr	r6, [sp, #8]
   2c578:	add	sp, sp, #12
   2c57c:	pop	{pc}		; (ldr pc, [sp], #4)
   2c580:	andeq	r9, r5, r8, lsl #28
   2c584:	ldr	r3, [pc, #12]	; 2c598 <__assert_fail@plt+0x19fa4>
   2c588:	cmp	r0, #0
   2c58c:	moveq	r0, r3
   2c590:	ldr	r0, [r0]
   2c594:	bx	lr
   2c598:	andeq	r9, r5, r8, lsl #28
   2c59c:	ldr	r3, [pc, #12]	; 2c5b0 <__assert_fail@plt+0x19fbc>
   2c5a0:	cmp	r0, #0
   2c5a4:	moveq	r0, r3
   2c5a8:	str	r1, [r0]
   2c5ac:	bx	lr
   2c5b0:	andeq	r9, r5, r8, lsl #28
   2c5b4:	ldr	r3, [pc, #52]	; 2c5f0 <__assert_fail@plt+0x19ffc>
   2c5b8:	cmp	r0, #0
   2c5bc:	push	{lr}		; (str lr, [sp, #-4]!)
   2c5c0:	lsr	lr, r1, #5
   2c5c4:	and	r1, r1, #31
   2c5c8:	moveq	r0, r3
   2c5cc:	add	r3, r0, #8
   2c5d0:	ldr	ip, [r3, lr, lsl #2]
   2c5d4:	lsr	r0, ip, r1
   2c5d8:	eor	r2, r2, r0
   2c5dc:	and	r0, r0, #1
   2c5e0:	and	r2, r2, #1
   2c5e4:	eor	r1, ip, r2, lsl r1
   2c5e8:	str	r1, [r3, lr, lsl #2]
   2c5ec:	pop	{pc}		; (ldr pc, [sp], #4)
   2c5f0:	andeq	r9, r5, r8, lsl #28
   2c5f4:	ldr	r3, [pc, #16]	; 2c60c <__assert_fail@plt+0x1a018>
   2c5f8:	cmp	r0, #0
   2c5fc:	movne	r3, r0
   2c600:	ldr	r0, [r3, #4]
   2c604:	str	r1, [r3, #4]
   2c608:	bx	lr
   2c60c:	andeq	r9, r5, r8, lsl #28
   2c610:	ldr	r3, [pc, #48]	; 2c648 <__assert_fail@plt+0x1a054>
   2c614:	cmp	r0, #0
   2c618:	mov	ip, #10
   2c61c:	moveq	r0, r3
   2c620:	cmp	r2, #0
   2c624:	cmpne	r1, #0
   2c628:	str	ip, [r0]
   2c62c:	beq	2c63c <__assert_fail@plt+0x1a048>
   2c630:	str	r1, [r0, #40]	; 0x28
   2c634:	str	r2, [r0, #44]	; 0x2c
   2c638:	bx	lr
   2c63c:	str	r4, [sp, #-8]!
   2c640:	str	lr, [sp, #4]
   2c644:	bl	125a0 <abort@plt>
   2c648:	andeq	r9, r5, r8, lsl #28
   2c64c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2c650:	strd	r6, [sp, #8]
   2c654:	mov	r7, r0
   2c658:	mov	r6, r1
   2c65c:	strd	r8, [sp, #16]
   2c660:	mov	r8, r2
   2c664:	mov	r9, r3
   2c668:	str	lr, [sp, #24]
   2c66c:	sub	sp, sp, #28
   2c670:	ldr	r4, [sp, #56]	; 0x38
   2c674:	ldr	ip, [pc, #104]	; 2c6e4 <__assert_fail@plt+0x1a0f0>
   2c678:	cmp	r4, #0
   2c67c:	moveq	r4, ip
   2c680:	bl	12348 <__errno_location@plt>
   2c684:	ldr	ip, [r4, #44]	; 0x2c
   2c688:	mov	r5, r0
   2c68c:	mov	r1, r6
   2c690:	add	lr, r4, #8
   2c694:	mov	r3, r9
   2c698:	ldr	r6, [r5]
   2c69c:	mov	r2, r8
   2c6a0:	mov	r0, r7
   2c6a4:	str	ip, [sp, #16]
   2c6a8:	ldr	ip, [r4, #40]	; 0x28
   2c6ac:	str	lr, [sp, #8]
   2c6b0:	str	ip, [sp, #12]
   2c6b4:	ldr	ip, [r4, #4]
   2c6b8:	str	ip, [sp, #4]
   2c6bc:	ldr	ip, [r4]
   2c6c0:	str	ip, [sp]
   2c6c4:	bl	2ab94 <__assert_fail@plt+0x185a0>
   2c6c8:	str	r6, [r5]
   2c6cc:	add	sp, sp, #28
   2c6d0:	ldrd	r4, [sp]
   2c6d4:	ldrd	r6, [sp, #8]
   2c6d8:	ldrd	r8, [sp, #16]
   2c6dc:	add	sp, sp, #24
   2c6e0:	pop	{pc}		; (ldr pc, [sp], #4)
   2c6e4:	andeq	r9, r5, r8, lsl #28
   2c6e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2c6ec:	cmp	r3, #0
   2c6f0:	ldr	r4, [pc, #220]	; 2c7d4 <__assert_fail@plt+0x1a1e0>
   2c6f4:	movne	r4, r3
   2c6f8:	strd	r6, [sp, #8]
   2c6fc:	mov	r6, r2
   2c700:	strd	r8, [sp, #16]
   2c704:	mov	r9, r0
   2c708:	strd	sl, [sp, #24]
   2c70c:	mov	sl, r1
   2c710:	str	lr, [sp, #32]
   2c714:	sub	sp, sp, #44	; 0x2c
   2c718:	bl	12348 <__errno_location@plt>
   2c71c:	ldr	r5, [r4, #4]
   2c720:	mov	r7, r0
   2c724:	mov	r1, #0
   2c728:	add	r8, r4, #8
   2c72c:	mov	r3, sl
   2c730:	ldr	ip, [r4, #44]	; 0x2c
   2c734:	mov	r2, r9
   2c738:	mov	r0, r1
   2c73c:	ldr	lr, [r7]
   2c740:	cmp	r6, r1
   2c744:	orreq	r5, r5, #1
   2c748:	str	ip, [sp, #16]
   2c74c:	ldr	ip, [r4, #40]	; 0x28
   2c750:	stmib	sp, {r5, r8, ip}
   2c754:	ldr	ip, [r4]
   2c758:	str	lr, [sp, #28]
   2c75c:	str	ip, [sp]
   2c760:	bl	2ab94 <__assert_fail@plt+0x185a0>
   2c764:	add	r1, r0, #1
   2c768:	mov	fp, r0
   2c76c:	mov	r0, r1
   2c770:	str	r1, [sp, #36]	; 0x24
   2c774:	bl	2da74 <__assert_fail@plt+0x1b480>
   2c778:	ldr	ip, [r4, #44]	; 0x2c
   2c77c:	mov	r3, sl
   2c780:	mov	r2, r9
   2c784:	ldr	r1, [sp, #36]	; 0x24
   2c788:	str	ip, [sp, #16]
   2c78c:	ldr	ip, [r4, #40]	; 0x28
   2c790:	str	r0, [sp, #32]
   2c794:	stmib	sp, {r5, r8, ip}
   2c798:	ldr	ip, [r4]
   2c79c:	str	ip, [sp]
   2c7a0:	bl	2ab94 <__assert_fail@plt+0x185a0>
   2c7a4:	ldr	lr, [sp, #28]
   2c7a8:	cmp	r6, #0
   2c7ac:	ldr	r0, [sp, #32]
   2c7b0:	str	lr, [r7]
   2c7b4:	strne	fp, [r6]
   2c7b8:	add	sp, sp, #44	; 0x2c
   2c7bc:	ldrd	r4, [sp]
   2c7c0:	ldrd	r6, [sp, #8]
   2c7c4:	ldrd	r8, [sp, #16]
   2c7c8:	ldrd	sl, [sp, #24]
   2c7cc:	add	sp, sp, #32
   2c7d0:	pop	{pc}		; (ldr pc, [sp], #4)
   2c7d4:	andeq	r9, r5, r8, lsl #28
   2c7d8:	mov	r3, r2
   2c7dc:	mov	r2, #0
   2c7e0:	b	2c6e8 <__assert_fail@plt+0x1a0f4>
   2c7e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2c7e8:	movw	r5, #38132	; 0x94f4
   2c7ec:	movt	r5, #5
   2c7f0:	ldr	r3, [r5, #4]
   2c7f4:	strd	r6, [sp, #8]
   2c7f8:	str	r8, [sp, #16]
   2c7fc:	str	lr, [sp, #20]
   2c800:	ldr	r7, [r5]
   2c804:	cmp	r3, #1
   2c808:	ble	2c82c <__assert_fail@plt+0x1a238>
   2c80c:	mov	r4, #1
   2c810:	add	r6, r7, #4
   2c814:	ldr	r0, [r6, r4, lsl #3]
   2c818:	add	r4, r4, #1
   2c81c:	bl	2f668 <__assert_fail@plt+0x1d074>
   2c820:	ldr	r3, [r5, #4]
   2c824:	cmp	r3, r4
   2c828:	bgt	2c814 <__assert_fail@plt+0x1a220>
   2c82c:	ldr	r0, [r7, #4]
   2c830:	movw	r4, #40200	; 0x9d08
   2c834:	movt	r4, #5
   2c838:	cmp	r0, r4
   2c83c:	beq	2c850 <__assert_fail@plt+0x1a25c>
   2c840:	bl	2f668 <__assert_fail@plt+0x1d074>
   2c844:	mov	r3, #256	; 0x100
   2c848:	str	r3, [r5, #8]
   2c84c:	str	r4, [r5, #12]
   2c850:	ldr	r4, [pc, #44]	; 2c884 <__assert_fail@plt+0x1a290>
   2c854:	cmp	r7, r4
   2c858:	beq	2c868 <__assert_fail@plt+0x1a274>
   2c85c:	mov	r0, r7
   2c860:	bl	2f668 <__assert_fail@plt+0x1d074>
   2c864:	str	r4, [r5]
   2c868:	mov	r3, #1
   2c86c:	ldrd	r6, [sp, #8]
   2c870:	str	r3, [r5, #4]
   2c874:	ldrd	r4, [sp]
   2c878:	ldr	r8, [sp, #16]
   2c87c:	add	sp, sp, #20
   2c880:	pop	{pc}		; (ldr pc, [sp], #4)
   2c884:	strdeq	r9, [r5], -ip
   2c888:	ldr	r3, [pc, #4]	; 2c894 <__assert_fail@plt+0x1a2a0>
   2c88c:	mvn	r2, #0
   2c890:	b	2c354 <__assert_fail@plt+0x19d60>
   2c894:	andeq	r9, r5, r8, lsl #28
   2c898:	ldr	r3, [pc]	; 2c8a0 <__assert_fail@plt+0x1a2ac>
   2c89c:	b	2c354 <__assert_fail@plt+0x19d60>
   2c8a0:	andeq	r9, r5, r8, lsl #28
   2c8a4:	mov	r1, r0
   2c8a8:	ldr	r3, [pc, #8]	; 2c8b8 <__assert_fail@plt+0x1a2c4>
   2c8ac:	mvn	r2, #0
   2c8b0:	mov	r0, #0
   2c8b4:	b	2c354 <__assert_fail@plt+0x19d60>
   2c8b8:	andeq	r9, r5, r8, lsl #28
   2c8bc:	mov	r2, r1
   2c8c0:	ldr	r3, [pc, #8]	; 2c8d0 <__assert_fail@plt+0x1a2dc>
   2c8c4:	mov	r1, r0
   2c8c8:	mov	r0, #0
   2c8cc:	b	2c354 <__assert_fail@plt+0x19d60>
   2c8d0:	andeq	r9, r5, r8, lsl #28
   2c8d4:	strd	r4, [sp, #-12]!
   2c8d8:	mov	r5, r2
   2c8dc:	mov	r4, r0
   2c8e0:	str	lr, [sp, #8]
   2c8e4:	sub	sp, sp, #52	; 0x34
   2c8e8:	mov	r0, sp
   2c8ec:	bl	2a9f0 <__assert_fail@plt+0x183fc>
   2c8f0:	mov	r3, sp
   2c8f4:	mov	r1, r5
   2c8f8:	mov	r0, r4
   2c8fc:	mvn	r2, #0
   2c900:	bl	2c354 <__assert_fail@plt+0x19d60>
   2c904:	add	sp, sp, #52	; 0x34
   2c908:	ldrd	r4, [sp]
   2c90c:	add	sp, sp, #8
   2c910:	pop	{pc}		; (ldr pc, [sp], #4)
   2c914:	strd	r4, [sp, #-16]!
   2c918:	mov	r5, r2
   2c91c:	mov	r4, r0
   2c920:	str	r6, [sp, #8]
   2c924:	mov	r6, r3
   2c928:	str	lr, [sp, #12]
   2c92c:	sub	sp, sp, #48	; 0x30
   2c930:	mov	r0, sp
   2c934:	bl	2a9f0 <__assert_fail@plt+0x183fc>
   2c938:	mov	r3, sp
   2c93c:	mov	r2, r6
   2c940:	mov	r1, r5
   2c944:	mov	r0, r4
   2c948:	bl	2c354 <__assert_fail@plt+0x19d60>
   2c94c:	add	sp, sp, #48	; 0x30
   2c950:	ldrd	r4, [sp]
   2c954:	ldr	r6, [sp, #8]
   2c958:	add	sp, sp, #12
   2c95c:	pop	{pc}		; (ldr pc, [sp], #4)
   2c960:	mov	r2, r1
   2c964:	mov	r1, r0
   2c968:	mov	r0, #0
   2c96c:	b	2c8d4 <__assert_fail@plt+0x1a2e0>
   2c970:	mov	r3, r2
   2c974:	mov	r2, r1
   2c978:	mov	r1, r0
   2c97c:	mov	r0, #0
   2c980:	b	2c914 <__assert_fail@plt+0x1a320>
   2c984:	ldr	ip, [pc, #140]	; 2ca18 <__assert_fail@plt+0x1a424>
   2c988:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2c98c:	ldrd	r4, [ip]
   2c990:	strd	r6, [sp, #8]
   2c994:	ldrd	r6, [ip, #8]
   2c998:	strd	r8, [sp, #16]
   2c99c:	lsr	r9, r2, #5
   2c9a0:	str	lr, [sp, #24]
   2c9a4:	sub	sp, sp, #52	; 0x34
   2c9a8:	and	lr, r2, #31
   2c9ac:	add	r8, sp, #8
   2c9b0:	mov	r2, r1
   2c9b4:	strd	r4, [sp]
   2c9b8:	mov	r1, r0
   2c9bc:	mov	r3, sp
   2c9c0:	strd	r6, [sp, #8]
   2c9c4:	mov	r0, #0
   2c9c8:	ldrd	r4, [ip, #16]
   2c9cc:	ldrd	r6, [ip, #24]
   2c9d0:	strd	r4, [sp, #16]
   2c9d4:	ldrd	r4, [ip, #32]
   2c9d8:	strd	r6, [sp, #24]
   2c9dc:	ldrd	r6, [ip, #40]	; 0x28
   2c9e0:	strd	r4, [sp, #32]
   2c9e4:	strd	r6, [sp, #40]	; 0x28
   2c9e8:	ldr	ip, [r8, r9, lsl #2]
   2c9ec:	mvn	r4, ip, lsr lr
   2c9f0:	and	r4, r4, #1
   2c9f4:	eor	lr, ip, r4, lsl lr
   2c9f8:	str	lr, [r8, r9, lsl #2]
   2c9fc:	bl	2c354 <__assert_fail@plt+0x19d60>
   2ca00:	add	sp, sp, #52	; 0x34
   2ca04:	ldrd	r4, [sp]
   2ca08:	ldrd	r6, [sp, #8]
   2ca0c:	ldrd	r8, [sp, #16]
   2ca10:	add	sp, sp, #24
   2ca14:	pop	{pc}		; (ldr pc, [sp], #4)
   2ca18:	andeq	r9, r5, r8, lsl #28
   2ca1c:	mov	r2, r1
   2ca20:	mvn	r1, #0
   2ca24:	b	2c984 <__assert_fail@plt+0x1a390>
   2ca28:	mov	r2, #58	; 0x3a
   2ca2c:	mvn	r1, #0
   2ca30:	b	2c984 <__assert_fail@plt+0x1a390>
   2ca34:	mov	r2, #58	; 0x3a
   2ca38:	b	2c984 <__assert_fail@plt+0x1a390>
   2ca3c:	strd	r4, [sp, #-20]!	; 0xffffffec
   2ca40:	strd	r6, [sp, #8]
   2ca44:	mov	r6, r0
   2ca48:	mov	r7, r2
   2ca4c:	str	lr, [sp, #16]
   2ca50:	sub	sp, sp, #100	; 0x64
   2ca54:	mov	r0, sp
   2ca58:	bl	2a9f0 <__assert_fail@plt+0x183fc>
   2ca5c:	ldrd	r4, [sp, #8]
   2ca60:	mov	r1, r7
   2ca64:	mov	r0, r6
   2ca68:	add	r3, sp, #48	; 0x30
   2ca6c:	mvn	r2, #0
   2ca70:	ldrd	r6, [sp]
   2ca74:	strd	r4, [sp, #56]	; 0x38
   2ca78:	ldrd	r4, [sp, #16]
   2ca7c:	strd	r6, [sp, #48]	; 0x30
   2ca80:	ldrd	r6, [sp, #32]
   2ca84:	ldr	lr, [sp, #60]	; 0x3c
   2ca88:	strd	r4, [sp, #64]	; 0x40
   2ca8c:	ldrd	r4, [sp, #24]
   2ca90:	mvn	ip, lr
   2ca94:	and	ip, ip, #67108864	; 0x4000000
   2ca98:	strd	r4, [sp, #72]	; 0x48
   2ca9c:	eor	ip, ip, lr
   2caa0:	ldrd	r4, [sp, #40]	; 0x28
   2caa4:	str	ip, [sp, #60]	; 0x3c
   2caa8:	strd	r6, [sp, #80]	; 0x50
   2caac:	strd	r4, [sp, #88]	; 0x58
   2cab0:	bl	2c354 <__assert_fail@plt+0x19d60>
   2cab4:	add	sp, sp, #100	; 0x64
   2cab8:	ldrd	r4, [sp]
   2cabc:	ldrd	r6, [sp, #8]
   2cac0:	add	sp, sp, #16
   2cac4:	pop	{pc}		; (ldr pc, [sp], #4)
   2cac8:	ldr	ip, [pc, #156]	; 2cb6c <__assert_fail@plt+0x1a578>
   2cacc:	cmp	r2, #0
   2cad0:	cmpne	r1, #0
   2cad4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2cad8:	strd	r6, [sp, #8]
   2cadc:	mov	r6, r2
   2cae0:	str	r8, [sp, #16]
   2cae4:	mov	r8, r3
   2cae8:	strd	sl, [sp, #20]
   2caec:	ldrd	r4, [ip]
   2caf0:	str	lr, [sp, #28]
   2caf4:	sub	sp, sp, #48	; 0x30
   2caf8:	mov	lr, #10
   2cafc:	ldrd	r2, [ip, #8]
   2cb00:	ldrd	sl, [ip, #16]
   2cb04:	strd	r4, [sp]
   2cb08:	ldrd	r4, [ip, #32]
   2cb0c:	str	lr, [sp]
   2cb10:	strd	r2, [sp, #8]
   2cb14:	strd	sl, [sp, #16]
   2cb18:	ldrd	r2, [ip, #24]
   2cb1c:	ldrd	sl, [ip, #40]	; 0x28
   2cb20:	strd	r2, [sp, #24]
   2cb24:	strd	r4, [sp, #32]
   2cb28:	strd	sl, [sp, #40]	; 0x28
   2cb2c:	beq	2cb68 <__assert_fail@plt+0x1a574>
   2cb30:	ldr	r2, [sp, #80]	; 0x50
   2cb34:	mov	r7, r1
   2cb38:	mov	r3, sp
   2cb3c:	mov	r1, r8
   2cb40:	str	r7, [sp, #40]	; 0x28
   2cb44:	str	r6, [sp, #44]	; 0x2c
   2cb48:	bl	2c354 <__assert_fail@plt+0x19d60>
   2cb4c:	add	sp, sp, #48	; 0x30
   2cb50:	ldrd	r4, [sp]
   2cb54:	ldrd	r6, [sp, #8]
   2cb58:	ldr	r8, [sp, #16]
   2cb5c:	ldrd	sl, [sp, #20]
   2cb60:	add	sp, sp, #28
   2cb64:	pop	{pc}		; (ldr pc, [sp], #4)
   2cb68:	bl	125a0 <abort@plt>
   2cb6c:	andeq	r9, r5, r8, lsl #28
   2cb70:	mvn	ip, #0
   2cb74:	push	{lr}		; (str lr, [sp, #-4]!)
   2cb78:	sub	sp, sp, #12
   2cb7c:	str	ip, [sp]
   2cb80:	bl	2cac8 <__assert_fail@plt+0x1a4d4>
   2cb84:	add	sp, sp, #12
   2cb88:	pop	{pc}		; (ldr pc, [sp], #4)
   2cb8c:	mvn	ip, #0
   2cb90:	push	{lr}		; (str lr, [sp, #-4]!)
   2cb94:	sub	sp, sp, #12
   2cb98:	mov	r3, r2
   2cb9c:	mov	r2, r1
   2cba0:	mov	r1, r0
   2cba4:	mov	r0, #0
   2cba8:	str	ip, [sp]
   2cbac:	bl	2cac8 <__assert_fail@plt+0x1a4d4>
   2cbb0:	add	sp, sp, #12
   2cbb4:	pop	{pc}		; (ldr pc, [sp], #4)
   2cbb8:	push	{lr}		; (str lr, [sp, #-4]!)
   2cbbc:	sub	sp, sp, #12
   2cbc0:	str	r3, [sp]
   2cbc4:	mov	r3, r2
   2cbc8:	mov	r2, r1
   2cbcc:	mov	r1, r0
   2cbd0:	mov	r0, #0
   2cbd4:	bl	2cac8 <__assert_fail@plt+0x1a4d4>
   2cbd8:	add	sp, sp, #12
   2cbdc:	pop	{pc}		; (ldr pc, [sp], #4)
   2cbe0:	ldr	r3, [pc]	; 2cbe8 <__assert_fail@plt+0x1a5f4>
   2cbe4:	b	2c354 <__assert_fail@plt+0x19d60>
   2cbe8:	andeq	r9, r5, r4, lsl #10
   2cbec:	mov	r2, r1
   2cbf0:	ldr	r3, [pc, #8]	; 2cc00 <__assert_fail@plt+0x1a60c>
   2cbf4:	mov	r1, r0
   2cbf8:	mov	r0, #0
   2cbfc:	b	2c354 <__assert_fail@plt+0x19d60>
   2cc00:	andeq	r9, r5, r4, lsl #10
   2cc04:	ldr	r3, [pc, #4]	; 2cc10 <__assert_fail@plt+0x1a61c>
   2cc08:	mvn	r2, #0
   2cc0c:	b	2c354 <__assert_fail@plt+0x19d60>
   2cc10:	andeq	r9, r5, r4, lsl #10
   2cc14:	mov	r1, r0
   2cc18:	ldr	r3, [pc, #8]	; 2cc28 <__assert_fail@plt+0x1a634>
   2cc1c:	mvn	r2, #0
   2cc20:	mov	r0, #0
   2cc24:	b	2c354 <__assert_fail@plt+0x19d60>
   2cc28:	andeq	r9, r5, r4, lsl #10
   2cc2c:	strd	r4, [sp, #-16]!
   2cc30:	mov	r5, r0
   2cc34:	mov	r4, #0
   2cc38:	movw	r0, #24608	; 0x6020
   2cc3c:	movt	r0, #4
   2cc40:	str	r6, [sp, #8]
   2cc44:	mov	r1, #524288	; 0x80000
   2cc48:	str	lr, [sp, #12]
   2cc4c:	str	r4, [r5, #4]
   2cc50:	bl	22600 <__assert_fail@plt+0x1000c>
   2cc54:	cmp	r0, r4
   2cc58:	str	r0, [r5]
   2cc5c:	movge	r0, r4
   2cc60:	blt	2cc74 <__assert_fail@plt+0x1a680>
   2cc64:	ldrd	r4, [sp]
   2cc68:	ldr	r6, [sp, #8]
   2cc6c:	add	sp, sp, #12
   2cc70:	pop	{pc}		; (ldr pc, [sp], #4)
   2cc74:	mov	r1, r4
   2cc78:	mov	r0, r4
   2cc7c:	bl	122c4 <getcwd@plt>
   2cc80:	clz	r4, r0
   2cc84:	str	r0, [r5, #4]
   2cc88:	lsr	r4, r4, #5
   2cc8c:	ldr	r6, [sp, #8]
   2cc90:	rsb	r0, r4, #0
   2cc94:	ldrd	r4, [sp]
   2cc98:	add	sp, sp, #12
   2cc9c:	pop	{pc}		; (ldr pc, [sp], #4)
   2cca0:	ldr	r3, [r0]
   2cca4:	cmp	r3, #0
   2cca8:	blt	2ccb4 <__assert_fail@plt+0x1a6c0>
   2ccac:	mov	r0, r3
   2ccb0:	b	124f8 <fchdir@plt>
   2ccb4:	ldr	r0, [r0, #4]
   2ccb8:	b	2f188 <__assert_fail@plt+0x1cb94>
   2ccbc:	str	r4, [sp, #-8]!
   2ccc0:	mov	r4, r0
   2ccc4:	ldr	r0, [r0]
   2ccc8:	str	lr, [sp, #4]
   2cccc:	cmp	r0, #0
   2ccd0:	blt	2ccd8 <__assert_fail@plt+0x1a6e4>
   2ccd4:	bl	125ac <close@plt>
   2ccd8:	ldr	r0, [r4, #4]
   2ccdc:	ldr	r4, [sp]
   2cce0:	ldr	lr, [sp, #4]
   2cce4:	add	sp, sp, #8
   2cce8:	b	2f668 <__assert_fail@plt+0x1d074>
   2ccec:	cmn	r0, #100	; 0x64
   2ccf0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2ccf4:	mov	r5, r1
   2ccf8:	strd	r6, [sp, #8]
   2ccfc:	strd	r8, [sp, #16]
   2cd00:	mov	r8, r2
   2cd04:	strd	sl, [sp, #24]
   2cd08:	str	lr, [sp, #32]
   2cd0c:	sub	sp, sp, #4032	; 0xfc0
   2cd10:	sub	sp, sp, #4
   2cd14:	beq	2ce04 <__assert_fail@plt+0x1a810>
   2cd18:	ldrb	r3, [r1]
   2cd1c:	cmp	r3, #47	; 0x2f
   2cd20:	beq	2ce04 <__assert_fail@plt+0x1a810>
   2cd24:	mov	r4, r0
   2cd28:	mov	r7, sp
   2cd2c:	mov	r2, r1
   2cd30:	mov	r0, r7
   2cd34:	mov	r1, r4
   2cd38:	bl	4166c <__assert_fail@plt+0x2f078>
   2cd3c:	subs	r9, r0, #0
   2cd40:	beq	2cd7c <__assert_fail@plt+0x1a788>
   2cd44:	mov	r1, r8
   2cd48:	bl	31ae8 <__assert_fail@plt+0x1f4f4>
   2cd4c:	mov	r6, r0
   2cd50:	bl	12348 <__errno_location@plt>
   2cd54:	cmp	r9, r7
   2cd58:	mov	fp, r0
   2cd5c:	ldr	sl, [r0]
   2cd60:	beq	2cd6c <__assert_fail@plt+0x1a778>
   2cd64:	mov	r0, r9
   2cd68:	bl	2f668 <__assert_fail@plt+0x1d074>
   2cd6c:	cmn	r6, #1
   2cd70:	bne	2cde0 <__assert_fail@plt+0x1a7ec>
   2cd74:	cmp	sl, #20
   2cd78:	bne	2ce18 <__assert_fail@plt+0x1a824>
   2cd7c:	mov	r0, r7
   2cd80:	bl	2cc2c <__assert_fail@plt+0x1a638>
   2cd84:	cmp	r0, #0
   2cd88:	bne	2ceb4 <__assert_fail@plt+0x1a8c0>
   2cd8c:	cmp	r4, #0
   2cd90:	blt	2cda0 <__assert_fail@plt+0x1a7ac>
   2cd94:	ldr	r3, [sp]
   2cd98:	cmp	r3, r4
   2cd9c:	beq	2ce8c <__assert_fail@plt+0x1a898>
   2cda0:	mov	r0, r4
   2cda4:	bl	124f8 <fchdir@plt>
   2cda8:	cmp	r0, #0
   2cdac:	bne	2ce6c <__assert_fail@plt+0x1a878>
   2cdb0:	mov	r1, r8
   2cdb4:	mov	r0, r5
   2cdb8:	bl	31ae8 <__assert_fail@plt+0x1f4f4>
   2cdbc:	cmn	r0, #1
   2cdc0:	mov	r6, r0
   2cdc4:	beq	2ce3c <__assert_fail@plt+0x1a848>
   2cdc8:	mov	r0, r7
   2cdcc:	bl	2cca0 <__assert_fail@plt+0x1a6ac>
   2cdd0:	cmp	r0, #0
   2cdd4:	bne	2cea8 <__assert_fail@plt+0x1a8b4>
   2cdd8:	mov	r0, r7
   2cddc:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   2cde0:	mov	r0, r6
   2cde4:	add	sp, sp, #4032	; 0xfc0
   2cde8:	add	sp, sp, #4
   2cdec:	ldrd	r4, [sp]
   2cdf0:	ldrd	r6, [sp, #8]
   2cdf4:	ldrd	r8, [sp, #16]
   2cdf8:	ldrd	sl, [sp, #24]
   2cdfc:	add	sp, sp, #32
   2ce00:	pop	{pc}		; (ldr pc, [sp], #4)
   2ce04:	mov	r1, r8
   2ce08:	mov	r0, r5
   2ce0c:	bl	31ae8 <__assert_fail@plt+0x1f4f4>
   2ce10:	mov	r6, r0
   2ce14:	b	2cde0 <__assert_fail@plt+0x1a7ec>
   2ce18:	sub	r3, sl, #1
   2ce1c:	cmp	sl, #13
   2ce20:	cmpne	r3, #1
   2ce24:	bls	2cd7c <__assert_fail@plt+0x1a788>
   2ce28:	cmp	sl, #38	; 0x26
   2ce2c:	cmpne	sl, #95	; 0x5f
   2ce30:	strne	sl, [fp]
   2ce34:	beq	2cd7c <__assert_fail@plt+0x1a788>
   2ce38:	b	2cde0 <__assert_fail@plt+0x1a7ec>
   2ce3c:	bl	12348 <__errno_location@plt>
   2ce40:	mov	r4, r0
   2ce44:	mov	r0, r7
   2ce48:	ldr	r5, [r4]
   2ce4c:	bl	2cca0 <__assert_fail@plt+0x1a6ac>
   2ce50:	cmp	r0, #0
   2ce54:	bne	2cea8 <__assert_fail@plt+0x1a8b4>
   2ce58:	mov	r0, r7
   2ce5c:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   2ce60:	cmp	r5, #0
   2ce64:	strne	r5, [r4]
   2ce68:	b	2cde0 <__assert_fail@plt+0x1a7ec>
   2ce6c:	bl	12348 <__errno_location@plt>
   2ce70:	mov	r4, r0
   2ce74:	mov	r0, r7
   2ce78:	ldr	r5, [r4]
   2ce7c:	mvn	r6, #0
   2ce80:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   2ce84:	str	r5, [r4]
   2ce88:	b	2cde0 <__assert_fail@plt+0x1a7ec>
   2ce8c:	mov	r0, r7
   2ce90:	mvn	r6, #0
   2ce94:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   2ce98:	bl	12348 <__errno_location@plt>
   2ce9c:	mov	r3, #9
   2cea0:	str	r3, [r0]
   2cea4:	b	2cde0 <__assert_fail@plt+0x1a7ec>
   2cea8:	bl	12348 <__errno_location@plt>
   2ceac:	ldr	r0, [r0]
   2ceb0:	bl	26888 <__assert_fail@plt+0x14294>
   2ceb4:	bl	12348 <__errno_location@plt>
   2ceb8:	ldr	r0, [r0]
   2cebc:	bl	26848 <__assert_fail@plt+0x14254>
   2cec0:	cmn	r0, #100	; 0x64
   2cec4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2cec8:	mov	r5, r1
   2cecc:	strd	r6, [sp, #8]
   2ced0:	strd	r8, [sp, #16]
   2ced4:	mov	r8, r2
   2ced8:	strd	sl, [sp, #24]
   2cedc:	str	lr, [sp, #32]
   2cee0:	sub	sp, sp, #4032	; 0xfc0
   2cee4:	sub	sp, sp, #4
   2cee8:	beq	2cfd8 <__assert_fail@plt+0x1a9e4>
   2ceec:	ldrb	r3, [r1]
   2cef0:	cmp	r3, #47	; 0x2f
   2cef4:	beq	2cfd8 <__assert_fail@plt+0x1a9e4>
   2cef8:	mov	r4, r0
   2cefc:	mov	r7, sp
   2cf00:	mov	r2, r1
   2cf04:	mov	r0, r7
   2cf08:	mov	r1, r4
   2cf0c:	bl	4166c <__assert_fail@plt+0x2f078>
   2cf10:	subs	r9, r0, #0
   2cf14:	beq	2cf50 <__assert_fail@plt+0x1a95c>
   2cf18:	mov	r1, r8
   2cf1c:	bl	31b0c <__assert_fail@plt+0x1f518>
   2cf20:	mov	r6, r0
   2cf24:	bl	12348 <__errno_location@plt>
   2cf28:	cmp	r9, r7
   2cf2c:	mov	fp, r0
   2cf30:	ldr	sl, [r0]
   2cf34:	beq	2cf40 <__assert_fail@plt+0x1a94c>
   2cf38:	mov	r0, r9
   2cf3c:	bl	2f668 <__assert_fail@plt+0x1d074>
   2cf40:	cmn	r6, #1
   2cf44:	bne	2cfb4 <__assert_fail@plt+0x1a9c0>
   2cf48:	cmp	sl, #20
   2cf4c:	bne	2cfec <__assert_fail@plt+0x1a9f8>
   2cf50:	mov	r0, r7
   2cf54:	bl	2cc2c <__assert_fail@plt+0x1a638>
   2cf58:	cmp	r0, #0
   2cf5c:	bne	2d088 <__assert_fail@plt+0x1aa94>
   2cf60:	cmp	r4, #0
   2cf64:	blt	2cf74 <__assert_fail@plt+0x1a980>
   2cf68:	ldr	r3, [sp]
   2cf6c:	cmp	r3, r4
   2cf70:	beq	2d060 <__assert_fail@plt+0x1aa6c>
   2cf74:	mov	r0, r4
   2cf78:	bl	124f8 <fchdir@plt>
   2cf7c:	cmp	r0, #0
   2cf80:	bne	2d040 <__assert_fail@plt+0x1aa4c>
   2cf84:	mov	r1, r8
   2cf88:	mov	r0, r5
   2cf8c:	bl	31b0c <__assert_fail@plt+0x1f518>
   2cf90:	cmn	r0, #1
   2cf94:	mov	r6, r0
   2cf98:	beq	2d010 <__assert_fail@plt+0x1aa1c>
   2cf9c:	mov	r0, r7
   2cfa0:	bl	2cca0 <__assert_fail@plt+0x1a6ac>
   2cfa4:	cmp	r0, #0
   2cfa8:	bne	2d07c <__assert_fail@plt+0x1aa88>
   2cfac:	mov	r0, r7
   2cfb0:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   2cfb4:	mov	r0, r6
   2cfb8:	add	sp, sp, #4032	; 0xfc0
   2cfbc:	add	sp, sp, #4
   2cfc0:	ldrd	r4, [sp]
   2cfc4:	ldrd	r6, [sp, #8]
   2cfc8:	ldrd	r8, [sp, #16]
   2cfcc:	ldrd	sl, [sp, #24]
   2cfd0:	add	sp, sp, #32
   2cfd4:	pop	{pc}		; (ldr pc, [sp], #4)
   2cfd8:	mov	r1, r8
   2cfdc:	mov	r0, r5
   2cfe0:	bl	31b0c <__assert_fail@plt+0x1f518>
   2cfe4:	mov	r6, r0
   2cfe8:	b	2cfb4 <__assert_fail@plt+0x1a9c0>
   2cfec:	sub	r3, sl, #1
   2cff0:	cmp	sl, #13
   2cff4:	cmpne	r3, #1
   2cff8:	bls	2cf50 <__assert_fail@plt+0x1a95c>
   2cffc:	cmp	sl, #38	; 0x26
   2d000:	cmpne	sl, #95	; 0x5f
   2d004:	strne	sl, [fp]
   2d008:	beq	2cf50 <__assert_fail@plt+0x1a95c>
   2d00c:	b	2cfb4 <__assert_fail@plt+0x1a9c0>
   2d010:	bl	12348 <__errno_location@plt>
   2d014:	mov	r4, r0
   2d018:	mov	r0, r7
   2d01c:	ldr	r5, [r4]
   2d020:	bl	2cca0 <__assert_fail@plt+0x1a6ac>
   2d024:	cmp	r0, #0
   2d028:	bne	2d07c <__assert_fail@plt+0x1aa88>
   2d02c:	mov	r0, r7
   2d030:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   2d034:	cmp	r5, #0
   2d038:	strne	r5, [r4]
   2d03c:	b	2cfb4 <__assert_fail@plt+0x1a9c0>
   2d040:	bl	12348 <__errno_location@plt>
   2d044:	mov	r4, r0
   2d048:	mov	r0, r7
   2d04c:	ldr	r5, [r4]
   2d050:	mvn	r6, #0
   2d054:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   2d058:	str	r5, [r4]
   2d05c:	b	2cfb4 <__assert_fail@plt+0x1a9c0>
   2d060:	mov	r0, r7
   2d064:	mvn	r6, #0
   2d068:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   2d06c:	bl	12348 <__errno_location@plt>
   2d070:	mov	r3, #9
   2d074:	str	r3, [r0]
   2d078:	b	2cfb4 <__assert_fail@plt+0x1a9c0>
   2d07c:	bl	12348 <__errno_location@plt>
   2d080:	ldr	r0, [r0]
   2d084:	bl	26888 <__assert_fail@plt+0x14294>
   2d088:	bl	12348 <__errno_location@plt>
   2d08c:	ldr	r0, [r0]
   2d090:	bl	26848 <__assert_fail@plt+0x14254>
   2d094:	cmn	r0, #100	; 0x64
   2d098:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2d09c:	mov	r5, r1
   2d0a0:	strd	r6, [sp, #8]
   2d0a4:	strd	r8, [sp, #16]
   2d0a8:	mov	r8, r2
   2d0ac:	strd	sl, [sp, #24]
   2d0b0:	str	lr, [sp, #32]
   2d0b4:	sub	sp, sp, #4032	; 0xfc0
   2d0b8:	sub	sp, sp, #4
   2d0bc:	beq	2d1ac <__assert_fail@plt+0x1abb8>
   2d0c0:	ldrb	r3, [r1]
   2d0c4:	cmp	r3, #47	; 0x2f
   2d0c8:	beq	2d1ac <__assert_fail@plt+0x1abb8>
   2d0cc:	mov	r4, r0
   2d0d0:	mov	r7, sp
   2d0d4:	mov	r2, r1
   2d0d8:	mov	r0, r7
   2d0dc:	mov	r1, r4
   2d0e0:	bl	4166c <__assert_fail@plt+0x2f078>
   2d0e4:	subs	r9, r0, #0
   2d0e8:	beq	2d124 <__assert_fail@plt+0x1ab30>
   2d0ec:	mov	r1, r8
   2d0f0:	bl	123e4 <setfilecon@plt>
   2d0f4:	mov	r6, r0
   2d0f8:	bl	12348 <__errno_location@plt>
   2d0fc:	cmp	r9, r7
   2d100:	mov	fp, r0
   2d104:	ldr	sl, [r0]
   2d108:	beq	2d114 <__assert_fail@plt+0x1ab20>
   2d10c:	mov	r0, r9
   2d110:	bl	2f668 <__assert_fail@plt+0x1d074>
   2d114:	cmn	r6, #1
   2d118:	bne	2d188 <__assert_fail@plt+0x1ab94>
   2d11c:	cmp	sl, #20
   2d120:	bne	2d1c0 <__assert_fail@plt+0x1abcc>
   2d124:	mov	r0, r7
   2d128:	bl	2cc2c <__assert_fail@plt+0x1a638>
   2d12c:	cmp	r0, #0
   2d130:	bne	2d25c <__assert_fail@plt+0x1ac68>
   2d134:	cmp	r4, #0
   2d138:	blt	2d148 <__assert_fail@plt+0x1ab54>
   2d13c:	ldr	r3, [sp]
   2d140:	cmp	r3, r4
   2d144:	beq	2d234 <__assert_fail@plt+0x1ac40>
   2d148:	mov	r0, r4
   2d14c:	bl	124f8 <fchdir@plt>
   2d150:	cmp	r0, #0
   2d154:	bne	2d214 <__assert_fail@plt+0x1ac20>
   2d158:	mov	r1, r8
   2d15c:	mov	r0, r5
   2d160:	bl	123e4 <setfilecon@plt>
   2d164:	cmn	r0, #1
   2d168:	mov	r6, r0
   2d16c:	beq	2d1e4 <__assert_fail@plt+0x1abf0>
   2d170:	mov	r0, r7
   2d174:	bl	2cca0 <__assert_fail@plt+0x1a6ac>
   2d178:	cmp	r0, #0
   2d17c:	bne	2d250 <__assert_fail@plt+0x1ac5c>
   2d180:	mov	r0, r7
   2d184:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   2d188:	mov	r0, r6
   2d18c:	add	sp, sp, #4032	; 0xfc0
   2d190:	add	sp, sp, #4
   2d194:	ldrd	r4, [sp]
   2d198:	ldrd	r6, [sp, #8]
   2d19c:	ldrd	r8, [sp, #16]
   2d1a0:	ldrd	sl, [sp, #24]
   2d1a4:	add	sp, sp, #32
   2d1a8:	pop	{pc}		; (ldr pc, [sp], #4)
   2d1ac:	mov	r1, r8
   2d1b0:	mov	r0, r5
   2d1b4:	bl	123e4 <setfilecon@plt>
   2d1b8:	mov	r6, r0
   2d1bc:	b	2d188 <__assert_fail@plt+0x1ab94>
   2d1c0:	sub	r3, sl, #1
   2d1c4:	cmp	sl, #13
   2d1c8:	cmpne	r3, #1
   2d1cc:	bls	2d124 <__assert_fail@plt+0x1ab30>
   2d1d0:	cmp	sl, #38	; 0x26
   2d1d4:	cmpne	sl, #95	; 0x5f
   2d1d8:	strne	sl, [fp]
   2d1dc:	beq	2d124 <__assert_fail@plt+0x1ab30>
   2d1e0:	b	2d188 <__assert_fail@plt+0x1ab94>
   2d1e4:	bl	12348 <__errno_location@plt>
   2d1e8:	mov	r4, r0
   2d1ec:	mov	r0, r7
   2d1f0:	ldr	r5, [r4]
   2d1f4:	bl	2cca0 <__assert_fail@plt+0x1a6ac>
   2d1f8:	cmp	r0, #0
   2d1fc:	bne	2d250 <__assert_fail@plt+0x1ac5c>
   2d200:	mov	r0, r7
   2d204:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   2d208:	cmp	r5, #0
   2d20c:	strne	r5, [r4]
   2d210:	b	2d188 <__assert_fail@plt+0x1ab94>
   2d214:	bl	12348 <__errno_location@plt>
   2d218:	mov	r4, r0
   2d21c:	mov	r0, r7
   2d220:	ldr	r5, [r4]
   2d224:	mvn	r6, #0
   2d228:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   2d22c:	str	r5, [r4]
   2d230:	b	2d188 <__assert_fail@plt+0x1ab94>
   2d234:	mov	r0, r7
   2d238:	mvn	r6, #0
   2d23c:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   2d240:	bl	12348 <__errno_location@plt>
   2d244:	mov	r3, #9
   2d248:	str	r3, [r0]
   2d24c:	b	2d188 <__assert_fail@plt+0x1ab94>
   2d250:	bl	12348 <__errno_location@plt>
   2d254:	ldr	r0, [r0]
   2d258:	bl	26888 <__assert_fail@plt+0x14294>
   2d25c:	bl	12348 <__errno_location@plt>
   2d260:	ldr	r0, [r0]
   2d264:	bl	26848 <__assert_fail@plt+0x14254>
   2d268:	cmn	r0, #100	; 0x64
   2d26c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2d270:	mov	r5, r1
   2d274:	strd	r6, [sp, #8]
   2d278:	strd	r8, [sp, #16]
   2d27c:	mov	r8, r2
   2d280:	strd	sl, [sp, #24]
   2d284:	str	lr, [sp, #32]
   2d288:	sub	sp, sp, #4032	; 0xfc0
   2d28c:	sub	sp, sp, #4
   2d290:	beq	2d380 <__assert_fail@plt+0x1ad8c>
   2d294:	ldrb	r3, [r1]
   2d298:	cmp	r3, #47	; 0x2f
   2d29c:	beq	2d380 <__assert_fail@plt+0x1ad8c>
   2d2a0:	mov	r4, r0
   2d2a4:	mov	r7, sp
   2d2a8:	mov	r2, r1
   2d2ac:	mov	r0, r7
   2d2b0:	mov	r1, r4
   2d2b4:	bl	4166c <__assert_fail@plt+0x2f078>
   2d2b8:	subs	r9, r0, #0
   2d2bc:	beq	2d2f8 <__assert_fail@plt+0x1ad04>
   2d2c0:	mov	r1, r8
   2d2c4:	bl	11fac <lsetfilecon@plt>
   2d2c8:	mov	r6, r0
   2d2cc:	bl	12348 <__errno_location@plt>
   2d2d0:	cmp	r9, r7
   2d2d4:	mov	fp, r0
   2d2d8:	ldr	sl, [r0]
   2d2dc:	beq	2d2e8 <__assert_fail@plt+0x1acf4>
   2d2e0:	mov	r0, r9
   2d2e4:	bl	2f668 <__assert_fail@plt+0x1d074>
   2d2e8:	cmn	r6, #1
   2d2ec:	bne	2d35c <__assert_fail@plt+0x1ad68>
   2d2f0:	cmp	sl, #20
   2d2f4:	bne	2d394 <__assert_fail@plt+0x1ada0>
   2d2f8:	mov	r0, r7
   2d2fc:	bl	2cc2c <__assert_fail@plt+0x1a638>
   2d300:	cmp	r0, #0
   2d304:	bne	2d430 <__assert_fail@plt+0x1ae3c>
   2d308:	cmp	r4, #0
   2d30c:	blt	2d31c <__assert_fail@plt+0x1ad28>
   2d310:	ldr	r3, [sp]
   2d314:	cmp	r3, r4
   2d318:	beq	2d408 <__assert_fail@plt+0x1ae14>
   2d31c:	mov	r0, r4
   2d320:	bl	124f8 <fchdir@plt>
   2d324:	cmp	r0, #0
   2d328:	bne	2d3e8 <__assert_fail@plt+0x1adf4>
   2d32c:	mov	r1, r8
   2d330:	mov	r0, r5
   2d334:	bl	11fac <lsetfilecon@plt>
   2d338:	cmn	r0, #1
   2d33c:	mov	r6, r0
   2d340:	beq	2d3b8 <__assert_fail@plt+0x1adc4>
   2d344:	mov	r0, r7
   2d348:	bl	2cca0 <__assert_fail@plt+0x1a6ac>
   2d34c:	cmp	r0, #0
   2d350:	bne	2d424 <__assert_fail@plt+0x1ae30>
   2d354:	mov	r0, r7
   2d358:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   2d35c:	mov	r0, r6
   2d360:	add	sp, sp, #4032	; 0xfc0
   2d364:	add	sp, sp, #4
   2d368:	ldrd	r4, [sp]
   2d36c:	ldrd	r6, [sp, #8]
   2d370:	ldrd	r8, [sp, #16]
   2d374:	ldrd	sl, [sp, #24]
   2d378:	add	sp, sp, #32
   2d37c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d380:	mov	r1, r8
   2d384:	mov	r0, r5
   2d388:	bl	11fac <lsetfilecon@plt>
   2d38c:	mov	r6, r0
   2d390:	b	2d35c <__assert_fail@plt+0x1ad68>
   2d394:	sub	r3, sl, #1
   2d398:	cmp	sl, #13
   2d39c:	cmpne	r3, #1
   2d3a0:	bls	2d2f8 <__assert_fail@plt+0x1ad04>
   2d3a4:	cmp	sl, #38	; 0x26
   2d3a8:	cmpne	sl, #95	; 0x5f
   2d3ac:	strne	sl, [fp]
   2d3b0:	beq	2d2f8 <__assert_fail@plt+0x1ad04>
   2d3b4:	b	2d35c <__assert_fail@plt+0x1ad68>
   2d3b8:	bl	12348 <__errno_location@plt>
   2d3bc:	mov	r4, r0
   2d3c0:	mov	r0, r7
   2d3c4:	ldr	r5, [r4]
   2d3c8:	bl	2cca0 <__assert_fail@plt+0x1a6ac>
   2d3cc:	cmp	r0, #0
   2d3d0:	bne	2d424 <__assert_fail@plt+0x1ae30>
   2d3d4:	mov	r0, r7
   2d3d8:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   2d3dc:	cmp	r5, #0
   2d3e0:	strne	r5, [r4]
   2d3e4:	b	2d35c <__assert_fail@plt+0x1ad68>
   2d3e8:	bl	12348 <__errno_location@plt>
   2d3ec:	mov	r4, r0
   2d3f0:	mov	r0, r7
   2d3f4:	ldr	r5, [r4]
   2d3f8:	mvn	r6, #0
   2d3fc:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   2d400:	str	r5, [r4]
   2d404:	b	2d35c <__assert_fail@plt+0x1ad68>
   2d408:	mov	r0, r7
   2d40c:	mvn	r6, #0
   2d410:	bl	2ccbc <__assert_fail@plt+0x1a6c8>
   2d414:	bl	12348 <__errno_location@plt>
   2d418:	mov	r3, #9
   2d41c:	str	r3, [r0]
   2d420:	b	2d35c <__assert_fail@plt+0x1ad68>
   2d424:	bl	12348 <__errno_location@plt>
   2d428:	ldr	r0, [r0]
   2d42c:	bl	26888 <__assert_fail@plt+0x14294>
   2d430:	bl	12348 <__errno_location@plt>
   2d434:	ldr	r0, [r0]
   2d438:	bl	26848 <__assert_fail@plt+0x14254>
   2d43c:	strd	r4, [sp, #-16]!
   2d440:	mov	r4, r1
   2d444:	mov	r1, #0
   2d448:	mov	r2, r4
   2d44c:	mov	r5, r0
   2d450:	str	r6, [sp, #8]
   2d454:	str	lr, [sp, #12]
   2d458:	bl	123d8 <memchr@plt>
   2d45c:	cmp	r0, #0
   2d460:	ldr	r6, [sp, #8]
   2d464:	subne	r0, r0, r5
   2d468:	moveq	r0, r4
   2d46c:	ldrd	r4, [sp]
   2d470:	add	sp, sp, #12
   2d474:	addne	r0, r0, #1
   2d478:	pop	{pc}		; (ldr pc, [sp], #4)
   2d47c:	mov	r2, #3
   2d480:	mov	r1, #0
   2d484:	b	2f420 <__assert_fail@plt+0x1ce2c>
   2d488:	cmp	r0, #2
   2d48c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2d490:	mov	r4, r0
   2d494:	strd	r6, [sp, #8]
   2d498:	str	r8, [sp, #16]
   2d49c:	str	lr, [sp, #20]
   2d4a0:	bls	2d4bc <__assert_fail@plt+0x1aec8>
   2d4a4:	mov	r0, r4
   2d4a8:	ldrd	r4, [sp]
   2d4ac:	ldrd	r6, [sp, #8]
   2d4b0:	ldr	r8, [sp, #16]
   2d4b4:	add	sp, sp, #20
   2d4b8:	pop	{pc}		; (ldr pc, [sp], #4)
   2d4bc:	bl	2d47c <__assert_fail@plt+0x1ae88>
   2d4c0:	mov	r7, r0
   2d4c4:	bl	12348 <__errno_location@plt>
   2d4c8:	mov	r5, r0
   2d4cc:	mov	r0, r4
   2d4d0:	ldr	r6, [r5]
   2d4d4:	mov	r4, r7
   2d4d8:	bl	125ac <close@plt>
   2d4dc:	str	r6, [r5]
   2d4e0:	b	2d4a4 <__assert_fail@plt+0x1aeb0>
   2d4e4:	cmp	r1, #0
   2d4e8:	strd	r4, [sp, #-16]!
   2d4ec:	mov	r4, r0
   2d4f0:	str	r6, [sp, #8]
   2d4f4:	str	lr, [sp, #12]
   2d4f8:	sub	sp, sp, #32
   2d4fc:	ldr	r5, [sp, #48]	; 0x30
   2d500:	ldr	r6, [sp, #52]	; 0x34
   2d504:	beq	2d638 <__assert_fail@plt+0x1b044>
   2d508:	mov	ip, r3
   2d50c:	mov	r3, r2
   2d510:	mov	r2, r1
   2d514:	movw	r1, #32500	; 0x7ef4
   2d518:	movt	r1, #4
   2d51c:	str	ip, [sp]
   2d520:	bl	1233c <fprintf@plt>
   2d524:	mov	r2, #5
   2d528:	movw	r1, #32520	; 0x7f08
   2d52c:	movt	r1, #4
   2d530:	mov	r0, #0
   2d534:	bl	120b4 <dcgettext@plt>
   2d538:	mov	r2, r0
   2d53c:	movw	r3, #2022	; 0x7e6
   2d540:	movw	r1, #33224	; 0x81c8
   2d544:	movt	r1, #4
   2d548:	mov	r0, r4
   2d54c:	bl	1233c <fprintf@plt>
   2d550:	mov	r1, r4
   2d554:	mov	r0, #10
   2d558:	bl	1248c <fputc@plt>
   2d55c:	mov	r2, #5
   2d560:	movw	r1, #32524	; 0x7f0c
   2d564:	movt	r1, #4
   2d568:	mov	r0, #0
   2d56c:	bl	120b4 <dcgettext@plt>
   2d570:	mov	r1, r0
   2d574:	movw	r2, #32696	; 0x7fb8
   2d578:	movt	r2, #4
   2d57c:	mov	r0, r4
   2d580:	bl	1233c <fprintf@plt>
   2d584:	mov	r1, r4
   2d588:	mov	r0, #10
   2d58c:	bl	1248c <fputc@plt>
   2d590:	cmp	r6, #9
   2d594:	ldrls	pc, [pc, r6, lsl #2]
   2d598:	b	2d884 <__assert_fail@plt+0x1b290>
   2d59c:	andeq	sp, r2, r4, lsr #12
   2d5a0:	andeq	sp, r2, r8, asr #12
   2d5a4:	andeq	sp, r2, r0, lsl #13
   2d5a8:			; <UNDEFINED> instruction: 0x0002d6b8
   2d5ac:	strdeq	sp, [r2], -r8
   2d5b0:	andeq	sp, r2, r4, asr #14
   2d5b4:	andeq	sp, r2, r8, lsl #15
   2d5b8:	ldrdeq	sp, [r2], -r4
   2d5bc:	andeq	sp, r2, r8, lsr #16
   2d5c0:	andeq	sp, r2, r4, asr #11
   2d5c4:	movw	r1, #33000	; 0x80e8
   2d5c8:	movt	r1, #4
   2d5cc:	mov	r2, #5
   2d5d0:	mov	r0, #0
   2d5d4:	bl	120b4 <dcgettext@plt>
   2d5d8:	ldr	ip, [r5, #8]
   2d5dc:	mov	r1, r0
   2d5e0:	mov	r0, r4
   2d5e4:	ldr	r3, [r5, #12]
   2d5e8:	ldr	r2, [r5, #32]
   2d5ec:	str	ip, [sp]
   2d5f0:	ldr	ip, [r5, #16]
   2d5f4:	str	r2, [sp, #24]
   2d5f8:	ldr	r2, [r5, #28]
   2d5fc:	str	r3, [sp, #4]
   2d600:	ldr	r3, [r5, #20]
   2d604:	str	ip, [sp, #8]
   2d608:	ldr	ip, [r5, #24]
   2d60c:	str	r2, [sp, #20]
   2d610:	ldr	r2, [r5]
   2d614:	str	r3, [sp, #12]
   2d618:	ldr	r3, [r5, #4]
   2d61c:	str	ip, [sp, #16]
   2d620:	bl	1233c <fprintf@plt>
   2d624:	add	sp, sp, #32
   2d628:	ldrd	r4, [sp]
   2d62c:	ldr	r6, [sp, #8]
   2d630:	add	sp, sp, #12
   2d634:	pop	{pc}		; (ldr pc, [sp], #4)
   2d638:	movw	r1, #32512	; 0x7f00
   2d63c:	movt	r1, #4
   2d640:	bl	1233c <fprintf@plt>
   2d644:	b	2d524 <__assert_fail@plt+0x1af30>
   2d648:	mov	r2, #5
   2d64c:	movw	r1, #32732	; 0x7fdc
   2d650:	movt	r1, #4
   2d654:	mov	r0, #0
   2d658:	bl	120b4 <dcgettext@plt>
   2d65c:	ldr	r2, [r5]
   2d660:	mov	r1, r0
   2d664:	mov	r0, r4
   2d668:	add	sp, sp, #32
   2d66c:	ldrd	r4, [sp]
   2d670:	ldr	r6, [sp, #8]
   2d674:	ldr	lr, [sp, #12]
   2d678:	add	sp, sp, #16
   2d67c:	b	1233c <fprintf@plt>
   2d680:	mov	r2, #5
   2d684:	movw	r1, #32748	; 0x7fec
   2d688:	movt	r1, #4
   2d68c:	mov	r0, #0
   2d690:	bl	120b4 <dcgettext@plt>
   2d694:	ldrd	r2, [r5]
   2d698:	mov	r1, r0
   2d69c:	mov	r0, r4
   2d6a0:	add	sp, sp, #32
   2d6a4:	ldrd	r4, [sp]
   2d6a8:	ldr	r6, [sp, #8]
   2d6ac:	ldr	lr, [sp, #12]
   2d6b0:	add	sp, sp, #16
   2d6b4:	b	1233c <fprintf@plt>
   2d6b8:	mov	r2, #5
   2d6bc:	movw	r1, #32772	; 0x8004
   2d6c0:	movt	r1, #4
   2d6c4:	mov	r0, #0
   2d6c8:	bl	120b4 <dcgettext@plt>
   2d6cc:	ldrd	r2, [r5]
   2d6d0:	mov	r1, r0
   2d6d4:	mov	r0, r4
   2d6d8:	ldr	ip, [r5, #8]
   2d6dc:	str	ip, [sp, #48]	; 0x30
   2d6e0:	add	sp, sp, #32
   2d6e4:	ldrd	r4, [sp]
   2d6e8:	ldr	r6, [sp, #8]
   2d6ec:	ldr	lr, [sp, #12]
   2d6f0:	add	sp, sp, #16
   2d6f4:	b	1233c <fprintf@plt>
   2d6f8:	mov	r2, #5
   2d6fc:	movw	r1, #32800	; 0x8020
   2d700:	movt	r1, #4
   2d704:	mov	r0, #0
   2d708:	bl	120b4 <dcgettext@plt>
   2d70c:	ldr	r2, [r5]
   2d710:	mov	r1, r0
   2d714:	mov	r0, r4
   2d718:	ldr	r3, [r5, #8]
   2d71c:	ldr	ip, [r5, #12]
   2d720:	str	r3, [sp, #48]	; 0x30
   2d724:	ldr	r3, [r5, #4]
   2d728:	str	ip, [sp, #52]	; 0x34
   2d72c:	add	sp, sp, #32
   2d730:	ldrd	r4, [sp]
   2d734:	ldr	r6, [sp, #8]
   2d738:	ldr	lr, [sp, #12]
   2d73c:	add	sp, sp, #16
   2d740:	b	1233c <fprintf@plt>
   2d744:	mov	r2, #5
   2d748:	movw	r1, #32832	; 0x8040
   2d74c:	movt	r1, #4
   2d750:	mov	r0, #0
   2d754:	bl	120b4 <dcgettext@plt>
   2d758:	ldr	r2, [r5, #8]
   2d75c:	mov	r1, r0
   2d760:	mov	r0, r4
   2d764:	ldr	ip, [r5, #12]
   2d768:	ldr	r3, [r5, #16]
   2d76c:	str	r2, [sp]
   2d770:	ldr	r2, [r5]
   2d774:	str	r3, [sp, #8]
   2d778:	ldr	r3, [r5, #4]
   2d77c:	str	ip, [sp, #4]
   2d780:	bl	1233c <fprintf@plt>
   2d784:	b	2d624 <__assert_fail@plt+0x1b030>
   2d788:	mov	r2, #5
   2d78c:	movw	r1, #32868	; 0x8064
   2d790:	movt	r1, #4
   2d794:	mov	r0, #0
   2d798:	bl	120b4 <dcgettext@plt>
   2d79c:	ldr	ip, [r5, #8]
   2d7a0:	mov	r1, r0
   2d7a4:	mov	r0, r4
   2d7a8:	ldr	r3, [r5, #12]
   2d7ac:	ldr	r2, [r5, #20]
   2d7b0:	str	ip, [sp]
   2d7b4:	ldr	ip, [r5, #16]
   2d7b8:	str	r2, [sp, #12]
   2d7bc:	ldr	r2, [r5]
   2d7c0:	str	r3, [sp, #4]
   2d7c4:	ldr	r3, [r5, #4]
   2d7c8:	str	ip, [sp, #8]
   2d7cc:	bl	1233c <fprintf@plt>
   2d7d0:	b	2d624 <__assert_fail@plt+0x1b030>
   2d7d4:	mov	r2, #5
   2d7d8:	movw	r1, #32908	; 0x808c
   2d7dc:	movt	r1, #4
   2d7e0:	mov	r0, #0
   2d7e4:	bl	120b4 <dcgettext@plt>
   2d7e8:	ldr	r3, [r5, #8]
   2d7ec:	mov	r1, r0
   2d7f0:	mov	r0, r4
   2d7f4:	ldr	r2, [r5, #12]
   2d7f8:	ldr	ip, [r5, #24]
   2d7fc:	str	r3, [sp]
   2d800:	ldr	r3, [r5, #16]
   2d804:	str	ip, [sp, #16]
   2d808:	ldr	ip, [r5, #20]
   2d80c:	str	r2, [sp, #4]
   2d810:	ldr	r2, [r5]
   2d814:	str	r3, [sp, #8]
   2d818:	ldr	r3, [r5, #4]
   2d81c:	str	ip, [sp, #12]
   2d820:	bl	1233c <fprintf@plt>
   2d824:	b	2d624 <__assert_fail@plt+0x1b030>
   2d828:	mov	r2, #5
   2d82c:	movw	r1, #32952	; 0x80b8
   2d830:	movt	r1, #4
   2d834:	mov	r0, #0
   2d838:	bl	120b4 <dcgettext@plt>
   2d83c:	ldr	r2, [r5, #8]
   2d840:	mov	r1, r0
   2d844:	mov	r0, r4
   2d848:	ldr	ip, [r5, #12]
   2d84c:	ldr	r3, [r5, #28]
   2d850:	str	r2, [sp]
   2d854:	ldr	r2, [r5, #16]
   2d858:	str	r3, [sp, #20]
   2d85c:	ldr	r3, [r5, #24]
   2d860:	str	ip, [sp, #4]
   2d864:	ldr	ip, [r5, #20]
   2d868:	str	r2, [sp, #8]
   2d86c:	ldr	r2, [r5]
   2d870:	str	r3, [sp, #16]
   2d874:	ldr	r3, [r5, #4]
   2d878:	str	ip, [sp, #12]
   2d87c:	bl	1233c <fprintf@plt>
   2d880:	b	2d624 <__assert_fail@plt+0x1b030>
   2d884:	movw	r1, #33052	; 0x811c
   2d888:	movt	r1, #4
   2d88c:	b	2d5cc <__assert_fail@plt+0x1afd8>
   2d890:	strd	r4, [sp, #-12]!
   2d894:	str	lr, [sp, #8]
   2d898:	sub	sp, sp, #12
   2d89c:	ldr	r5, [sp, #24]
   2d8a0:	ldr	ip, [r5]
   2d8a4:	cmp	ip, #0
   2d8a8:	beq	2d8c4 <__assert_fail@plt+0x1b2d0>
   2d8ac:	mov	lr, r5
   2d8b0:	mov	ip, #0
   2d8b4:	ldr	r4, [lr, #4]!
   2d8b8:	add	ip, ip, #1
   2d8bc:	cmp	r4, #0
   2d8c0:	bne	2d8b4 <__assert_fail@plt+0x1b2c0>
   2d8c4:	stm	sp, {r5, ip}
   2d8c8:	bl	2d4e4 <__assert_fail@plt+0x1aef0>
   2d8cc:	add	sp, sp, #12
   2d8d0:	ldrd	r4, [sp]
   2d8d4:	add	sp, sp, #8
   2d8d8:	pop	{pc}		; (ldr pc, [sp], #4)
   2d8dc:	strd	r4, [sp, #-16]!
   2d8e0:	mov	ip, #0
   2d8e4:	str	r6, [sp, #8]
   2d8e8:	str	lr, [sp, #12]
   2d8ec:	sub	sp, sp, #48	; 0x30
   2d8f0:	ldr	r5, [sp, #64]	; 0x40
   2d8f4:	add	r6, sp, #8
   2d8f8:	mov	r4, r6
   2d8fc:	ldr	lr, [r5], #4
   2d900:	cmp	lr, #0
   2d904:	str	lr, [r4], #4
   2d908:	beq	2d918 <__assert_fail@plt+0x1b324>
   2d90c:	add	ip, ip, #1
   2d910:	cmp	ip, #10
   2d914:	bne	2d8fc <__assert_fail@plt+0x1b308>
   2d918:	stm	sp, {r6, ip}
   2d91c:	bl	2d4e4 <__assert_fail@plt+0x1aef0>
   2d920:	add	sp, sp, #48	; 0x30
   2d924:	ldrd	r4, [sp]
   2d928:	ldr	r6, [sp, #8]
   2d92c:	add	sp, sp, #12
   2d930:	pop	{pc}		; (ldr pc, [sp], #4)
   2d934:	push	{r3}		; (str r3, [sp, #-4]!)
   2d938:	mov	ip, #0
   2d93c:	strd	r4, [sp, #-12]!
   2d940:	str	lr, [sp, #8]
   2d944:	sub	sp, sp, #56	; 0x38
   2d948:	add	r3, sp, #72	; 0x48
   2d94c:	add	r5, sp, #16
   2d950:	mov	r4, r3
   2d954:	mov	lr, r5
   2d958:	str	r3, [sp, #12]
   2d95c:	ldr	r3, [r4], #4
   2d960:	cmp	r3, #0
   2d964:	str	r3, [lr], #4
   2d968:	beq	2d978 <__assert_fail@plt+0x1b384>
   2d96c:	add	ip, ip, #1
   2d970:	cmp	ip, #10
   2d974:	bne	2d95c <__assert_fail@plt+0x1b368>
   2d978:	ldr	r3, [sp, #68]	; 0x44
   2d97c:	stm	sp, {r5, ip}
   2d980:	bl	2d4e4 <__assert_fail@plt+0x1aef0>
   2d984:	add	sp, sp, #56	; 0x38
   2d988:	ldrd	r4, [sp]
   2d98c:	ldr	lr, [sp, #8]
   2d990:	add	sp, sp, #12
   2d994:	add	sp, sp, #4
   2d998:	bx	lr
   2d99c:	movw	r3, #38228	; 0x9554
   2d9a0:	movt	r3, #5
   2d9a4:	str	r4, [sp, #-8]!
   2d9a8:	mov	r0, #10
   2d9ac:	ldr	r1, [r3]
   2d9b0:	str	lr, [sp, #4]
   2d9b4:	bl	1248c <fputc@plt>
   2d9b8:	mov	r2, #5
   2d9bc:	movw	r1, #33112	; 0x8158
   2d9c0:	movt	r1, #4
   2d9c4:	mov	r0, #0
   2d9c8:	bl	120b4 <dcgettext@plt>
   2d9cc:	movw	r1, #28148	; 0x6df4
   2d9d0:	movt	r1, #4
   2d9d4:	bl	11f64 <printf@plt>
   2d9d8:	mov	r2, #5
   2d9dc:	movw	r1, #33132	; 0x816c
   2d9e0:	movt	r1, #4
   2d9e4:	mov	r0, #0
   2d9e8:	bl	120b4 <dcgettext@plt>
   2d9ec:	movw	r2, #28108	; 0x6dcc
   2d9f0:	movt	r2, #4
   2d9f4:	movw	r1, #27308	; 0x6aac
   2d9f8:	movt	r1, #4
   2d9fc:	bl	11f64 <printf@plt>
   2da00:	movw	r1, #33152	; 0x8180
   2da04:	movt	r1, #4
   2da08:	mov	r2, #5
   2da0c:	mov	r0, #0
   2da10:	bl	120b4 <dcgettext@plt>
   2da14:	movw	r1, #33192	; 0x81a8
   2da18:	movt	r1, #4
   2da1c:	ldr	r4, [sp]
   2da20:	ldr	lr, [sp, #4]
   2da24:	add	sp, sp, #8
   2da28:	b	11f64 <printf@plt>
   2da2c:	str	r4, [sp, #-8]!
   2da30:	str	lr, [sp, #4]
   2da34:	bl	31b54 <__assert_fail@plt+0x1f560>
   2da38:	cmp	r0, #0
   2da3c:	beq	2da4c <__assert_fail@plt+0x1b458>
   2da40:	ldr	r4, [sp]
   2da44:	add	sp, sp, #4
   2da48:	pop	{pc}		; (ldr pc, [sp], #4)
   2da4c:	bl	2dea4 <__assert_fail@plt+0x1b8b0>
   2da50:	str	r4, [sp, #-8]!
   2da54:	str	lr, [sp, #4]
   2da58:	bl	31b54 <__assert_fail@plt+0x1f560>
   2da5c:	cmp	r0, #0
   2da60:	beq	2da70 <__assert_fail@plt+0x1b47c>
   2da64:	ldr	r4, [sp]
   2da68:	add	sp, sp, #4
   2da6c:	pop	{pc}		; (ldr pc, [sp], #4)
   2da70:	bl	2dea4 <__assert_fail@plt+0x1b8b0>
   2da74:	str	r4, [sp, #-8]!
   2da78:	str	lr, [sp, #4]
   2da7c:	bl	31b54 <__assert_fail@plt+0x1f560>
   2da80:	cmp	r0, #0
   2da84:	beq	2da94 <__assert_fail@plt+0x1b4a0>
   2da88:	ldr	r4, [sp]
   2da8c:	add	sp, sp, #4
   2da90:	pop	{pc}		; (ldr pc, [sp], #4)
   2da94:	bl	2dea4 <__assert_fail@plt+0x1b8b0>
   2da98:	strd	r4, [sp, #-16]!
   2da9c:	mov	r5, r0
   2daa0:	mov	r4, r1
   2daa4:	str	r6, [sp, #8]
   2daa8:	str	lr, [sp, #12]
   2daac:	bl	32624 <__assert_fail@plt+0x20030>
   2dab0:	cmp	r0, #0
   2dab4:	beq	2dac8 <__assert_fail@plt+0x1b4d4>
   2dab8:	ldrd	r4, [sp]
   2dabc:	ldr	r6, [sp, #8]
   2dac0:	add	sp, sp, #12
   2dac4:	pop	{pc}		; (ldr pc, [sp], #4)
   2dac8:	adds	r4, r4, #0
   2dacc:	movne	r4, #1
   2dad0:	cmp	r5, #0
   2dad4:	moveq	r4, #1
   2dad8:	cmp	r4, #0
   2dadc:	beq	2dab8 <__assert_fail@plt+0x1b4c4>
   2dae0:	bl	2dea4 <__assert_fail@plt+0x1b8b0>
   2dae4:	cmp	r1, #0
   2dae8:	orreq	r1, r1, #1
   2daec:	str	r4, [sp, #-8]!
   2daf0:	str	lr, [sp, #4]
   2daf4:	bl	32624 <__assert_fail@plt+0x20030>
   2daf8:	cmp	r0, #0
   2dafc:	beq	2db0c <__assert_fail@plt+0x1b518>
   2db00:	ldr	r4, [sp]
   2db04:	add	sp, sp, #4
   2db08:	pop	{pc}		; (ldr pc, [sp], #4)
   2db0c:	bl	2dea4 <__assert_fail@plt+0x1b8b0>
   2db10:	strd	r4, [sp, #-16]!
   2db14:	mov	r4, r0
   2db18:	mov	r5, r2
   2db1c:	str	r6, [sp, #8]
   2db20:	mov	r6, r1
   2db24:	str	lr, [sp, #12]
   2db28:	bl	3267c <__assert_fail@plt+0x20088>
   2db2c:	cmp	r0, #0
   2db30:	beq	2db44 <__assert_fail@plt+0x1b550>
   2db34:	ldrd	r4, [sp]
   2db38:	ldr	r6, [sp, #8]
   2db3c:	add	sp, sp, #12
   2db40:	pop	{pc}		; (ldr pc, [sp], #4)
   2db44:	cmp	r4, #0
   2db48:	beq	2db58 <__assert_fail@plt+0x1b564>
   2db4c:	cmp	r6, #0
   2db50:	cmpne	r5, #0
   2db54:	beq	2db34 <__assert_fail@plt+0x1b540>
   2db58:	bl	2dea4 <__assert_fail@plt+0x1b8b0>
   2db5c:	b	2db10 <__assert_fail@plt+0x1b51c>
   2db60:	cmp	r2, #0
   2db64:	cmpne	r1, #0
   2db68:	str	r4, [sp, #-8]!
   2db6c:	moveq	r2, #1
   2db70:	str	lr, [sp, #4]
   2db74:	moveq	r1, r2
   2db78:	bl	3267c <__assert_fail@plt+0x20088>
   2db7c:	cmp	r0, #0
   2db80:	beq	2db90 <__assert_fail@plt+0x1b59c>
   2db84:	ldr	r4, [sp]
   2db88:	add	sp, sp, #4
   2db8c:	pop	{pc}		; (ldr pc, [sp], #4)
   2db90:	bl	2dea4 <__assert_fail@plt+0x1b8b0>
   2db94:	mov	r2, r1
   2db98:	mov	r1, r0
   2db9c:	mov	r0, #0
   2dba0:	b	2db10 <__assert_fail@plt+0x1b51c>
   2dba4:	mov	r2, r1
   2dba8:	mov	r1, r0
   2dbac:	mov	r0, #0
   2dbb0:	b	2db60 <__assert_fail@plt+0x1b56c>
   2dbb4:	cmp	r0, #0
   2dbb8:	strd	r4, [sp, #-16]!
   2dbbc:	mov	r5, r1
   2dbc0:	ldr	r4, [r1]
   2dbc4:	str	r6, [sp, #8]
   2dbc8:	str	lr, [sp, #12]
   2dbcc:	beq	2dbfc <__assert_fail@plt+0x1b608>
   2dbd0:	lsr	r3, r4, #1
   2dbd4:	add	r3, r3, #1
   2dbd8:	adds	r4, r4, r3
   2dbdc:	bcs	2dc18 <__assert_fail@plt+0x1b624>
   2dbe0:	mov	r1, r4
   2dbe4:	bl	2db10 <__assert_fail@plt+0x1b51c>
   2dbe8:	ldr	r6, [sp, #8]
   2dbec:	str	r4, [r5]
   2dbf0:	ldrd	r4, [sp]
   2dbf4:	add	sp, sp, #12
   2dbf8:	pop	{pc}		; (ldr pc, [sp], #4)
   2dbfc:	cmp	r4, #0
   2dc00:	bne	2dbe0 <__assert_fail@plt+0x1b5ec>
   2dc04:	mov	r4, #64	; 0x40
   2dc08:	udiv	r4, r4, r2
   2dc0c:	cmp	r2, #64	; 0x40
   2dc10:	addhi	r4, r4, #1
   2dc14:	b	2dbe0 <__assert_fail@plt+0x1b5ec>
   2dc18:	bl	2dea4 <__assert_fail@plt+0x1b8b0>
   2dc1c:	mov	r2, #1
   2dc20:	b	2dbb4 <__assert_fail@plt+0x1b5c0>
   2dc24:	ldr	ip, [r1]
   2dc28:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2dc2c:	mov	r5, r1
   2dc30:	strd	r6, [sp, #8]
   2dc34:	str	lr, [sp, #28]
   2dc38:	strd	r8, [sp, #16]
   2dc3c:	asr	lr, ip, #1
   2dc40:	ldr	r8, [sp, #32]
   2dc44:	str	sl, [sp, #24]
   2dc48:	adds	r4, ip, lr
   2dc4c:	mvn	lr, r3
   2dc50:	lsr	lr, lr, #31
   2dc54:	mvnvs	r4, #-2147483648	; 0x80000000
   2dc58:	cmp	r3, r4
   2dc5c:	movge	r1, #0
   2dc60:	andlt	r1, lr, #1
   2dc64:	cmp	r1, #0
   2dc68:	movne	r4, r3
   2dc6c:	smull	r6, r7, r4, r8
   2dc70:	cmp	r7, r6, asr #31
   2dc74:	bne	2dcfc <__assert_fail@plt+0x1b708>
   2dc78:	cmp	r6, #63	; 0x3f
   2dc7c:	mov	r1, r6
   2dc80:	ble	2dce4 <__assert_fail@plt+0x1b6f0>
   2dc84:	cmp	r0, #0
   2dc88:	sub	r6, r4, ip
   2dc8c:	streq	r0, [r5]
   2dc90:	cmp	r6, r2
   2dc94:	bge	2dcc4 <__assert_fail@plt+0x1b6d0>
   2dc98:	adds	r4, ip, r2
   2dc9c:	bvs	2dcf8 <__assert_fail@plt+0x1b704>
   2dca0:	cmp	r4, r3
   2dca4:	movle	r3, #0
   2dca8:	andgt	r3, lr, #1
   2dcac:	cmp	r3, #0
   2dcb0:	bne	2dcf8 <__assert_fail@plt+0x1b704>
   2dcb4:	smull	r8, r9, r4, r8
   2dcb8:	cmp	r9, r8, asr #31
   2dcbc:	mov	r1, r8
   2dcc0:	bne	2dcf8 <__assert_fail@plt+0x1b704>
   2dcc4:	bl	2da98 <__assert_fail@plt+0x1b4a4>
   2dcc8:	ldrd	r6, [sp, #8]
   2dccc:	ldrd	r8, [sp, #16]
   2dcd0:	ldr	sl, [sp, #24]
   2dcd4:	str	r4, [r5]
   2dcd8:	ldrd	r4, [sp]
   2dcdc:	add	sp, sp, #28
   2dce0:	pop	{pc}		; (ldr pc, [sp], #4)
   2dce4:	mov	r6, #64	; 0x40
   2dce8:	sdiv	r4, r6, r8
   2dcec:	mls	r1, r8, r4, r6
   2dcf0:	sub	r1, r6, r1
   2dcf4:	b	2dc84 <__assert_fail@plt+0x1b690>
   2dcf8:	bl	2dea4 <__assert_fail@plt+0x1b8b0>
   2dcfc:	mvn	r6, #-2147483648	; 0x80000000
   2dd00:	b	2dce8 <__assert_fail@plt+0x1b6f4>
   2dd04:	mov	r1, #1
   2dd08:	str	r4, [sp, #-8]!
   2dd0c:	str	lr, [sp, #4]
   2dd10:	bl	2f080 <__assert_fail@plt+0x1ca8c>
   2dd14:	cmp	r0, #0
   2dd18:	beq	2dd28 <__assert_fail@plt+0x1b734>
   2dd1c:	ldr	r4, [sp]
   2dd20:	add	sp, sp, #4
   2dd24:	pop	{pc}		; (ldr pc, [sp], #4)
   2dd28:	bl	2dea4 <__assert_fail@plt+0x1b8b0>
   2dd2c:	mov	r1, #1
   2dd30:	str	r4, [sp, #-8]!
   2dd34:	str	lr, [sp, #4]
   2dd38:	bl	2f080 <__assert_fail@plt+0x1ca8c>
   2dd3c:	cmp	r0, #0
   2dd40:	beq	2dd50 <__assert_fail@plt+0x1b75c>
   2dd44:	ldr	r4, [sp]
   2dd48:	add	sp, sp, #4
   2dd4c:	pop	{pc}		; (ldr pc, [sp], #4)
   2dd50:	bl	2dea4 <__assert_fail@plt+0x1b8b0>
   2dd54:	str	r4, [sp, #-8]!
   2dd58:	str	lr, [sp, #4]
   2dd5c:	bl	2f080 <__assert_fail@plt+0x1ca8c>
   2dd60:	cmp	r0, #0
   2dd64:	beq	2dd74 <__assert_fail@plt+0x1b780>
   2dd68:	ldr	r4, [sp]
   2dd6c:	add	sp, sp, #4
   2dd70:	pop	{pc}		; (ldr pc, [sp], #4)
   2dd74:	bl	2dea4 <__assert_fail@plt+0x1b8b0>
   2dd78:	str	r4, [sp, #-8]!
   2dd7c:	str	lr, [sp, #4]
   2dd80:	bl	2f080 <__assert_fail@plt+0x1ca8c>
   2dd84:	cmp	r0, #0
   2dd88:	beq	2dd98 <__assert_fail@plt+0x1b7a4>
   2dd8c:	ldr	r4, [sp]
   2dd90:	add	sp, sp, #4
   2dd94:	pop	{pc}		; (ldr pc, [sp], #4)
   2dd98:	bl	2dea4 <__assert_fail@plt+0x1b8b0>
   2dd9c:	strd	r4, [sp, #-16]!
   2dda0:	mov	r4, r1
   2dda4:	str	r6, [sp, #8]
   2dda8:	mov	r6, r0
   2ddac:	mov	r0, r1
   2ddb0:	str	lr, [sp, #12]
   2ddb4:	bl	31b54 <__assert_fail@plt+0x1f560>
   2ddb8:	subs	r5, r0, #0
   2ddbc:	beq	2dde0 <__assert_fail@plt+0x1b7ec>
   2ddc0:	mov	r2, r4
   2ddc4:	mov	r1, r6
   2ddc8:	bl	12024 <memcpy@plt>
   2ddcc:	mov	r0, r5
   2ddd0:	ldrd	r4, [sp]
   2ddd4:	ldr	r6, [sp, #8]
   2ddd8:	add	sp, sp, #12
   2dddc:	pop	{pc}		; (ldr pc, [sp], #4)
   2dde0:	bl	2dea4 <__assert_fail@plt+0x1b8b0>
   2dde4:	strd	r4, [sp, #-16]!
   2dde8:	mov	r4, r1
   2ddec:	str	r6, [sp, #8]
   2ddf0:	mov	r6, r0
   2ddf4:	mov	r0, r1
   2ddf8:	str	lr, [sp, #12]
   2ddfc:	bl	31b54 <__assert_fail@plt+0x1f560>
   2de00:	subs	r5, r0, #0
   2de04:	beq	2de28 <__assert_fail@plt+0x1b834>
   2de08:	mov	r2, r4
   2de0c:	mov	r1, r6
   2de10:	bl	12024 <memcpy@plt>
   2de14:	mov	r0, r5
   2de18:	ldrd	r4, [sp]
   2de1c:	ldr	r6, [sp, #8]
   2de20:	add	sp, sp, #12
   2de24:	pop	{pc}		; (ldr pc, [sp], #4)
   2de28:	bl	2dea4 <__assert_fail@plt+0x1b8b0>
   2de2c:	strd	r4, [sp, #-16]!
   2de30:	mov	r4, r1
   2de34:	str	r6, [sp, #8]
   2de38:	mov	r6, r0
   2de3c:	add	r0, r1, #1
   2de40:	str	lr, [sp, #12]
   2de44:	bl	31b54 <__assert_fail@plt+0x1f560>
   2de48:	subs	r5, r0, #0
   2de4c:	beq	2de78 <__assert_fail@plt+0x1b884>
   2de50:	mov	r3, #0
   2de54:	mov	r1, r6
   2de58:	mov	r2, r4
   2de5c:	strb	r3, [r5, r4]
   2de60:	bl	12024 <memcpy@plt>
   2de64:	mov	r0, r5
   2de68:	ldrd	r4, [sp]
   2de6c:	ldr	r6, [sp, #8]
   2de70:	add	sp, sp, #12
   2de74:	pop	{pc}		; (ldr pc, [sp], #4)
   2de78:	bl	2dea4 <__assert_fail@plt+0x1b8b0>
   2de7c:	str	r4, [sp, #-8]!
   2de80:	mov	r4, r0
   2de84:	str	lr, [sp, #4]
   2de88:	bl	12300 <strlen@plt>
   2de8c:	add	r1, r0, #1
   2de90:	mov	r0, r4
   2de94:	ldr	r4, [sp]
   2de98:	ldr	lr, [sp, #4]
   2de9c:	add	sp, sp, #8
   2dea0:	b	2dd9c <__assert_fail@plt+0x1b7a8>
   2dea4:	movw	r3, #38128	; 0x94f0
   2dea8:	movt	r3, #5
   2deac:	str	r4, [sp, #-8]!
   2deb0:	ldr	r4, [r3]
   2deb4:	mov	r2, #5
   2deb8:	movw	r1, #33272	; 0x81f8
   2debc:	movt	r1, #4
   2dec0:	mov	r0, #0
   2dec4:	str	lr, [sp, #4]
   2dec8:	bl	120b4 <dcgettext@plt>
   2decc:	mov	r3, r0
   2ded0:	movw	r2, #28236	; 0x6e4c
   2ded4:	movt	r2, #4
   2ded8:	mov	r1, #0
   2dedc:	mov	r0, r4
   2dee0:	bl	121ec <error@plt>
   2dee4:	bl	125a0 <abort@plt>
   2dee8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2deec:	mov	r5, r1
   2def0:	mov	r4, #0
   2def4:	strd	r6, [sp, #8]
   2def8:	mov	r6, r0
   2defc:	strd	r8, [sp, #16]
   2df00:	mov	r9, r3
   2df04:	mov	r8, r2
   2df08:	str	lr, [sp, #24]
   2df0c:	sub	sp, sp, #12
   2df10:	bl	12348 <__errno_location@plt>
   2df14:	mov	r7, r0
   2df18:	add	r1, sp, #4
   2df1c:	mov	r0, r6
   2df20:	str	r4, [r7]
   2df24:	blx	r9
   2df28:	ldr	r3, [sp, #4]
   2df2c:	cmp	r3, r6
   2df30:	beq	2dfa4 <__assert_fail@plt+0x1b9b0>
   2df34:	cmp	r5, r4
   2df38:	beq	2df80 <__assert_fail@plt+0x1b98c>
   2df3c:	vcmp.f64	d0, #0.0
   2df40:	vmrs	APSR_nzcv, fpscr
   2df44:	moveq	r0, #1
   2df48:	beq	2df60 <__assert_fail@plt+0x1b96c>
   2df4c:	ldr	r0, [r7]
   2df50:	subs	r0, r0, #34	; 0x22
   2df54:	movne	r0, #1
   2df58:	cmp	r5, #0
   2df5c:	beq	2df64 <__assert_fail@plt+0x1b970>
   2df60:	str	r3, [r5]
   2df64:	vstr	d0, [r8]
   2df68:	add	sp, sp, #12
   2df6c:	ldrd	r4, [sp]
   2df70:	ldrd	r6, [sp, #8]
   2df74:	ldrd	r8, [sp, #16]
   2df78:	add	sp, sp, #24
   2df7c:	pop	{pc}		; (ldr pc, [sp], #4)
   2df80:	ldrb	r2, [r3]
   2df84:	cmp	r2, r4
   2df88:	movne	r0, r5
   2df8c:	bne	2df64 <__assert_fail@plt+0x1b970>
   2df90:	vcmp.f64	d0, #0.0
   2df94:	vmrs	APSR_nzcv, fpscr
   2df98:	bne	2df4c <__assert_fail@plt+0x1b958>
   2df9c:	mov	r0, #1
   2dfa0:	b	2df64 <__assert_fail@plt+0x1b970>
   2dfa4:	mov	r0, r4
   2dfa8:	b	2df58 <__assert_fail@plt+0x1b964>
   2dfac:	cmp	r2, #36	; 0x24
   2dfb0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2dfb4:	strd	r6, [sp, #8]
   2dfb8:	strd	r8, [sp, #16]
   2dfbc:	str	sl, [sp, #24]
   2dfc0:	str	lr, [sp, #28]
   2dfc4:	sub	sp, sp, #8
   2dfc8:	bhi	2e5c0 <__assert_fail@plt+0x1bfcc>
   2dfcc:	cmp	r1, #0
   2dfd0:	mov	r9, r2
   2dfd4:	mov	r5, r0
   2dfd8:	mov	r6, r1
   2dfdc:	mov	r8, r3
   2dfe0:	addeq	r6, sp, #4
   2dfe4:	bl	12348 <__errno_location@plt>
   2dfe8:	mov	r3, #0
   2dfec:	mov	r7, r0
   2dff0:	str	r3, [r0]
   2dff4:	bl	122b8 <__ctype_b_loc@plt>
   2dff8:	ldrb	r3, [r5]
   2dffc:	mov	r2, r5
   2e000:	ldr	ip, [r0]
   2e004:	b	2e00c <__assert_fail@plt+0x1ba18>
   2e008:	ldrb	r3, [r2, #1]!
   2e00c:	lsl	r1, r3, #1
   2e010:	ldrh	r0, [ip, r1]
   2e014:	ands	r4, r0, #8192	; 0x2000
   2e018:	bne	2e008 <__assert_fail@plt+0x1ba14>
   2e01c:	cmp	r3, #45	; 0x2d
   2e020:	beq	2e0b4 <__assert_fail@plt+0x1bac0>
   2e024:	mov	r2, r9
   2e028:	mov	r1, r6
   2e02c:	mov	r0, r5
   2e030:	bl	122f4 <strtoul@plt>
   2e034:	ldr	sl, [r6]
   2e038:	mov	r9, r0
   2e03c:	cmp	sl, r5
   2e040:	beq	2e09c <__assert_fail@plt+0x1baa8>
   2e044:	ldr	r4, [r7]
   2e048:	cmp	r4, #0
   2e04c:	bne	2e08c <__assert_fail@plt+0x1ba98>
   2e050:	ldr	r3, [sp, #40]	; 0x28
   2e054:	cmp	r3, #0
   2e058:	beq	2e068 <__assert_fail@plt+0x1ba74>
   2e05c:	ldrb	r5, [sl]
   2e060:	cmp	r5, #0
   2e064:	bne	2e41c <__assert_fail@plt+0x1be28>
   2e068:	str	r9, [r8]
   2e06c:	mov	r0, r4
   2e070:	add	sp, sp, #8
   2e074:	ldrd	r4, [sp]
   2e078:	ldrd	r6, [sp, #8]
   2e07c:	ldrd	r8, [sp, #16]
   2e080:	ldr	sl, [sp, #24]
   2e084:	add	sp, sp, #28
   2e088:	pop	{pc}		; (ldr pc, [sp], #4)
   2e08c:	cmp	r4, #34	; 0x22
   2e090:	bne	2e0b4 <__assert_fail@plt+0x1bac0>
   2e094:	mov	r4, #1
   2e098:	b	2e050 <__assert_fail@plt+0x1ba5c>
   2e09c:	ldr	r3, [sp, #40]	; 0x28
   2e0a0:	cmp	r3, #0
   2e0a4:	beq	2e0b4 <__assert_fail@plt+0x1bac0>
   2e0a8:	ldrb	r5, [r5]
   2e0ac:	cmp	r5, #0
   2e0b0:	bne	2e0bc <__assert_fail@plt+0x1bac8>
   2e0b4:	mov	r4, #4
   2e0b8:	b	2e06c <__assert_fail@plt+0x1ba78>
   2e0bc:	mov	r1, r5
   2e0c0:	mov	r0, r3
   2e0c4:	bl	1230c <strchr@plt>
   2e0c8:	cmp	r0, #0
   2e0cc:	movne	r9, #1
   2e0d0:	beq	2e0b4 <__assert_fail@plt+0x1bac0>
   2e0d4:	sub	r7, r5, #69	; 0x45
   2e0d8:	cmp	r7, #47	; 0x2f
   2e0dc:	ldrls	pc, [pc, r7, lsl #2]
   2e0e0:	b	2e2a0 <__assert_fail@plt+0x1bcac>
   2e0e4:	andeq	lr, r2, r4, lsr #3
   2e0e8:	andeq	lr, r2, r0, lsr #5
   2e0ec:	andeq	lr, r2, r4, lsr #3
   2e0f0:	andeq	lr, r2, r0, lsr #5
   2e0f4:	andeq	lr, r2, r0, lsr #5
   2e0f8:	andeq	lr, r2, r0, lsr #5
   2e0fc:	andeq	lr, r2, r4, lsr #3
   2e100:	andeq	lr, r2, r0, lsr #5
   2e104:	andeq	lr, r2, r4, lsr #3
   2e108:	andeq	lr, r2, r0, lsr #5
   2e10c:	andeq	lr, r2, r0, lsr #5
   2e110:	andeq	lr, r2, r4, lsr #3
   2e114:	andeq	lr, r2, r0, lsr #5
   2e118:	andeq	lr, r2, r0, lsr #5
   2e11c:	andeq	lr, r2, r0, lsr #5
   2e120:	andeq	lr, r2, r4, lsr #3
   2e124:	andeq	lr, r2, r0, lsr #5
   2e128:	andeq	lr, r2, r0, lsr #5
   2e12c:	andeq	lr, r2, r0, lsr #5
   2e130:	andeq	lr, r2, r0, lsr #5
   2e134:	andeq	lr, r2, r4, lsr #3
   2e138:	andeq	lr, r2, r4, lsr #3
   2e13c:	andeq	lr, r2, r0, lsr #5
   2e140:	andeq	lr, r2, r0, lsr #5
   2e144:	andeq	lr, r2, r0, lsr #5
   2e148:	andeq	lr, r2, r0, lsr #5
   2e14c:	andeq	lr, r2, r0, lsr #5
   2e150:	andeq	lr, r2, r0, lsr #5
   2e154:	andeq	lr, r2, r0, lsr #5
   2e158:	andeq	lr, r2, r0, lsr #5
   2e15c:	andeq	lr, r2, r0, lsr #5
   2e160:	andeq	lr, r2, r0, lsr #5
   2e164:	andeq	lr, r2, r0, lsr #5
   2e168:	andeq	lr, r2, r0, lsr #5
   2e16c:	andeq	lr, r2, r4, lsr #3
   2e170:	andeq	lr, r2, r0, lsr #5
   2e174:	andeq	lr, r2, r0, lsr #5
   2e178:	andeq	lr, r2, r0, lsr #5
   2e17c:	andeq	lr, r2, r4, lsr #3
   2e180:	andeq	lr, r2, r0, lsr #5
   2e184:	andeq	lr, r2, r4, lsr #3
   2e188:	andeq	lr, r2, r0, lsr #5
   2e18c:	andeq	lr, r2, r0, lsr #5
   2e190:	andeq	lr, r2, r0, lsr #5
   2e194:	andeq	lr, r2, r0, lsr #5
   2e198:	andeq	lr, r2, r0, lsr #5
   2e19c:	andeq	lr, r2, r0, lsr #5
   2e1a0:	andeq	lr, r2, r4, lsr #3
   2e1a4:	mov	r1, #48	; 0x30
   2e1a8:	ldr	r0, [sp, #40]	; 0x28
   2e1ac:	bl	1230c <strchr@plt>
   2e1b0:	cmp	r0, #0
   2e1b4:	beq	2e2a0 <__assert_fail@plt+0x1bcac>
   2e1b8:	ldrb	r3, [sl, #1]
   2e1bc:	cmp	r3, #68	; 0x44
   2e1c0:	beq	2e5ac <__assert_fail@plt+0x1bfb8>
   2e1c4:	cmp	r3, #105	; 0x69
   2e1c8:	beq	2e434 <__assert_fail@plt+0x1be40>
   2e1cc:	cmp	r3, #66	; 0x42
   2e1d0:	beq	2e5ac <__assert_fail@plt+0x1bfb8>
   2e1d4:	cmp	r7, #47	; 0x2f
   2e1d8:	ldrls	pc, [pc, r7, lsl #2]
   2e1dc:	b	2e3f8 <__assert_fail@plt+0x1be04>
   2e1e0:	andeq	lr, r2, r4, ror #10
   2e1e4:	strdeq	lr, [r2], -r8
   2e1e8:	muleq	r2, r0, r3
   2e1ec:	strdeq	lr, [r2], -r8
   2e1f0:	strdeq	lr, [r2], -r8
   2e1f4:	strdeq	lr, [r2], -r8
   2e1f8:	andeq	lr, r2, r0, lsl #8
   2e1fc:	strdeq	lr, [r2], -r8
   2e200:	andeq	lr, r2, r4, lsr r5
   2e204:	strdeq	lr, [r2], -r8
   2e208:	strdeq	lr, [r2], -r8
   2e20c:	andeq	lr, r2, r4, lsl #10
   2e210:	strdeq	lr, [r2], -r8
   2e214:	strdeq	lr, [r2], -r8
   2e218:	strdeq	lr, [r2], -r8
   2e21c:	ldrdeq	lr, [r2], -r4
   2e220:	strdeq	lr, [r2], -r8
   2e224:	strdeq	lr, [r2], -r8
   2e228:	strdeq	lr, [r2], -r8
   2e22c:	strdeq	lr, [r2], -r8
   2e230:	andeq	lr, r2, r4, lsr #9
   2e234:	andeq	lr, r2, r0, ror r4
   2e238:	strdeq	lr, [r2], -r8
   2e23c:	strdeq	lr, [r2], -r8
   2e240:	strdeq	lr, [r2], -r8
   2e244:	strdeq	lr, [r2], -r8
   2e248:	strdeq	lr, [r2], -r8
   2e24c:	strdeq	lr, [r2], -r8
   2e250:	strdeq	lr, [r2], -r8
   2e254:	andeq	lr, r2, ip, asr r4
   2e258:	andeq	lr, r2, r4, lsr #11
   2e25c:	strdeq	lr, [r2], -r8
   2e260:	strdeq	lr, [r2], -r8
   2e264:	strdeq	lr, [r2], -r8
   2e268:	muleq	r2, r0, r3
   2e26c:	strdeq	lr, [r2], -r8
   2e270:	strdeq	lr, [r2], -r8
   2e274:	strdeq	lr, [r2], -r8
   2e278:	andeq	lr, r2, r0, lsl #8
   2e27c:	strdeq	lr, [r2], -r8
   2e280:	andeq	lr, r2, r4, lsr r5
   2e284:	strdeq	lr, [r2], -r8
   2e288:	strdeq	lr, [r2], -r8
   2e28c:	strdeq	lr, [r2], -r8
   2e290:	strdeq	lr, [r2], -r8
   2e294:	strdeq	lr, [r2], -r8
   2e298:	strdeq	lr, [r2], -r8
   2e29c:	ldrdeq	lr, [r2], -r4
   2e2a0:	mov	r2, #1
   2e2a4:	mov	r3, #1024	; 0x400
   2e2a8:	sub	r5, r5, #66	; 0x42
   2e2ac:	cmp	r5, #53	; 0x35
   2e2b0:	ldrls	pc, [pc, r5, lsl #2]
   2e2b4:	b	2e3f8 <__assert_fail@plt+0x1be04>
   2e2b8:	muleq	r2, r4, r5
   2e2bc:	strdeq	lr, [r2], -r8
   2e2c0:	strdeq	lr, [r2], -r8
   2e2c4:	andeq	lr, r2, ip, ror #10
   2e2c8:	strdeq	lr, [r2], -r8
   2e2cc:	muleq	r2, r8, r3
   2e2d0:	strdeq	lr, [r2], -r8
   2e2d4:	strdeq	lr, [r2], -r8
   2e2d8:	strdeq	lr, [r2], -r8
   2e2dc:	andeq	lr, r2, r8, lsl #8
   2e2e0:	strdeq	lr, [r2], -r8
   2e2e4:	andeq	lr, r2, ip, lsr r5
   2e2e8:	strdeq	lr, [r2], -r8
   2e2ec:	strdeq	lr, [r2], -r8
   2e2f0:	andeq	lr, r2, ip, lsl #10
   2e2f4:	strdeq	lr, [r2], -r8
   2e2f8:	strdeq	lr, [r2], -r8
   2e2fc:	strdeq	lr, [r2], -r8
   2e300:	ldrdeq	lr, [r2], -ip
   2e304:	strdeq	lr, [r2], -r8
   2e308:	strdeq	lr, [r2], -r8
   2e30c:	strdeq	lr, [r2], -r8
   2e310:	strdeq	lr, [r2], -r8
   2e314:	andeq	lr, r2, ip, lsr #9
   2e318:	andeq	lr, r2, r8, ror r4
   2e31c:	strdeq	lr, [r2], -r8
   2e320:	strdeq	lr, [r2], -r8
   2e324:	strdeq	lr, [r2], -r8
   2e328:	strdeq	lr, [r2], -r8
   2e32c:	strdeq	lr, [r2], -r8
   2e330:	strdeq	lr, [r2], -r8
   2e334:	strdeq	lr, [r2], -r8
   2e338:	andeq	lr, r2, r0, ror #8
   2e33c:	andeq	lr, r2, r4, ror #7
   2e340:	strdeq	lr, [r2], -r8
   2e344:	strdeq	lr, [r2], -r8
   2e348:	strdeq	lr, [r2], -r8
   2e34c:	muleq	r2, r8, r3
   2e350:	strdeq	lr, [r2], -r8
   2e354:	strdeq	lr, [r2], -r8
   2e358:	strdeq	lr, [r2], -r8
   2e35c:	andeq	lr, r2, r8, lsl #8
   2e360:	strdeq	lr, [r2], -r8
   2e364:	andeq	lr, r2, ip, lsr r5
   2e368:	strdeq	lr, [r2], -r8
   2e36c:	strdeq	lr, [r2], -r8
   2e370:	strdeq	lr, [r2], -r8
   2e374:	strdeq	lr, [r2], -r8
   2e378:	strdeq	lr, [r2], -r8
   2e37c:	strdeq	lr, [r2], -r8
   2e380:	ldrdeq	lr, [r2], -ip
   2e384:	strdeq	lr, [r2], -r8
   2e388:	strdeq	lr, [r2], -r8
   2e38c:	andeq	lr, r2, ip, asr #8
   2e390:	mov	r2, #1
   2e394:	mov	r3, #1024	; 0x400
   2e398:	umull	r0, r1, r3, r9
   2e39c:	adds	r1, r1, #0
   2e3a0:	movne	r1, #1
   2e3a4:	cmp	r1, #0
   2e3a8:	bne	2e5b8 <__assert_fail@plt+0x1bfc4>
   2e3ac:	mul	r9, r3, r9
   2e3b0:	umull	r0, r1, r3, r9
   2e3b4:	adds	r1, r1, #0
   2e3b8:	movne	r1, #1
   2e3bc:	cmp	r1, #0
   2e3c0:	bne	2e5b8 <__assert_fail@plt+0x1bfc4>
   2e3c4:	mul	r9, r3, r9
   2e3c8:	umull	r0, r1, r3, r9
   2e3cc:	adds	r1, r1, #0
   2e3d0:	movne	r1, #1
   2e3d4:	cmp	r1, #0
   2e3d8:	muleq	r9, r3, r9
   2e3dc:	bne	2e5b8 <__assert_fail@plt+0x1bfc4>
   2e3e0:	orr	r4, r4, r1
   2e3e4:	add	r3, sl, r2
   2e3e8:	str	r3, [r6]
   2e3ec:	ldrb	r3, [sl, r2]
   2e3f0:	cmp	r3, #0
   2e3f4:	beq	2e068 <__assert_fail@plt+0x1ba74>
   2e3f8:	orr	r4, r4, #2
   2e3fc:	b	2e068 <__assert_fail@plt+0x1ba74>
   2e400:	mov	r2, #1
   2e404:	mov	r3, #1024	; 0x400
   2e408:	umull	r0, r1, r3, r9
   2e40c:	cmp	r1, #0
   2e410:	bne	2e558 <__assert_fail@plt+0x1bf64>
   2e414:	mul	r9, r3, r9
   2e418:	b	2e3e4 <__assert_fail@plt+0x1bdf0>
   2e41c:	mov	r1, r5
   2e420:	ldr	r0, [sp, #40]	; 0x28
   2e424:	bl	1230c <strchr@plt>
   2e428:	cmp	r0, #0
   2e42c:	bne	2e0d4 <__assert_fail@plt+0x1bae0>
   2e430:	b	2e3f8 <__assert_fail@plt+0x1be04>
   2e434:	ldrb	r2, [sl, #2]
   2e438:	mov	r3, #1024	; 0x400
   2e43c:	cmp	r2, #66	; 0x42
   2e440:	movne	r2, #1
   2e444:	moveq	r2, #3
   2e448:	b	2e2a8 <__assert_fail@plt+0x1bcb4>
   2e44c:	cmp	r9, #0
   2e450:	blt	2e558 <__assert_fail@plt+0x1bf64>
   2e454:	lsl	r9, r9, #1
   2e458:	b	2e3e4 <__assert_fail@plt+0x1bdf0>
   2e45c:	mov	r2, #1
   2e460:	lsrs	r3, r9, #23
   2e464:	bne	2e558 <__assert_fail@plt+0x1bf64>
   2e468:	lsl	r9, r9, #9
   2e46c:	b	2e3e4 <__assert_fail@plt+0x1bdf0>
   2e470:	mov	r2, #1
   2e474:	mov	r3, #1024	; 0x400
   2e478:	mov	r1, #7
   2e47c:	mov	ip, #0
   2e480:	umull	lr, r0, r3, r9
   2e484:	cmp	r0, #0
   2e488:	movne	ip, #1
   2e48c:	mvnne	r9, #0
   2e490:	muleq	r9, r3, r9
   2e494:	subs	r1, r1, #1
   2e498:	bne	2e480 <__assert_fail@plt+0x1be8c>
   2e49c:	orr	r4, r4, ip
   2e4a0:	b	2e3e4 <__assert_fail@plt+0x1bdf0>
   2e4a4:	mov	r2, #1
   2e4a8:	mov	r3, #1024	; 0x400
   2e4ac:	mov	r1, #8
   2e4b0:	mov	ip, #0
   2e4b4:	umull	lr, r0, r3, r9
   2e4b8:	cmp	r0, #0
   2e4bc:	movne	ip, #1
   2e4c0:	mvnne	r9, #0
   2e4c4:	muleq	r9, r3, r9
   2e4c8:	subs	r1, r1, #1
   2e4cc:	bne	2e4b4 <__assert_fail@plt+0x1bec0>
   2e4d0:	b	2e49c <__assert_fail@plt+0x1bea8>
   2e4d4:	mov	r2, #1
   2e4d8:	mov	r3, #1024	; 0x400
   2e4dc:	mov	r1, #4
   2e4e0:	mov	ip, #0
   2e4e4:	umull	lr, r0, r3, r9
   2e4e8:	cmp	r0, #0
   2e4ec:	movne	ip, #1
   2e4f0:	mvnne	r9, #0
   2e4f4:	muleq	r9, r3, r9
   2e4f8:	subs	r1, r1, #1
   2e4fc:	bne	2e4e4 <__assert_fail@plt+0x1bef0>
   2e500:	b	2e49c <__assert_fail@plt+0x1bea8>
   2e504:	mov	r2, #1
   2e508:	mov	r3, #1024	; 0x400
   2e50c:	mov	r1, #5
   2e510:	mov	ip, #0
   2e514:	umull	lr, r0, r3, r9
   2e518:	cmp	r0, #0
   2e51c:	movne	ip, #1
   2e520:	mvnne	r9, #0
   2e524:	muleq	r9, r3, r9
   2e528:	subs	r1, r1, #1
   2e52c:	bne	2e514 <__assert_fail@plt+0x1bf20>
   2e530:	b	2e49c <__assert_fail@plt+0x1bea8>
   2e534:	mov	r2, #1
   2e538:	mov	r3, #1024	; 0x400
   2e53c:	umull	r0, r1, r3, r9
   2e540:	cmp	r1, #0
   2e544:	bne	2e558 <__assert_fail@plt+0x1bf64>
   2e548:	mul	r9, r3, r9
   2e54c:	umull	r0, r1, r3, r9
   2e550:	cmp	r1, #0
   2e554:	beq	2e414 <__assert_fail@plt+0x1be20>
   2e558:	mov	r4, #1
   2e55c:	mvn	r9, #0
   2e560:	b	2e3e4 <__assert_fail@plt+0x1bdf0>
   2e564:	mov	r2, #1
   2e568:	mov	r3, #1024	; 0x400
   2e56c:	mov	r1, #6
   2e570:	mov	ip, #0
   2e574:	umull	lr, r0, r3, r9
   2e578:	cmp	r0, #0
   2e57c:	movne	ip, #1
   2e580:	mvnne	r9, #0
   2e584:	muleq	r9, r3, r9
   2e588:	subs	r1, r1, #1
   2e58c:	bne	2e574 <__assert_fail@plt+0x1bf80>
   2e590:	b	2e49c <__assert_fail@plt+0x1bea8>
   2e594:	lsrs	r3, r9, #22
   2e598:	bne	2e558 <__assert_fail@plt+0x1bf64>
   2e59c:	lsl	r9, r9, #10
   2e5a0:	b	2e3e4 <__assert_fail@plt+0x1bdf0>
   2e5a4:	mov	r2, #1
   2e5a8:	b	2e3e4 <__assert_fail@plt+0x1bdf0>
   2e5ac:	mov	r2, #2
   2e5b0:	mov	r3, #1000	; 0x3e8
   2e5b4:	b	2e2a8 <__assert_fail@plt+0x1bcb4>
   2e5b8:	mvn	r9, #0
   2e5bc:	b	2e3e0 <__assert_fail@plt+0x1bdec>
   2e5c0:	movw	r3, #33292	; 0x820c
   2e5c4:	movt	r3, #4
   2e5c8:	movw	r1, #33304	; 0x8218
   2e5cc:	movt	r1, #4
   2e5d0:	movw	r0, #33316	; 0x8224
   2e5d4:	movt	r0, #4
   2e5d8:	mov	r2, #84	; 0x54
   2e5dc:	bl	125f4 <__assert_fail@plt>
   2e5e0:	cmp	r2, #36	; 0x24
   2e5e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2e5e8:	strd	r6, [sp, #8]
   2e5ec:	strd	r8, [sp, #16]
   2e5f0:	strd	sl, [sp, #24]
   2e5f4:	str	lr, [sp, #32]
   2e5f8:	sub	sp, sp, #28
   2e5fc:	bhi	2efe0 <__assert_fail@plt+0x1c9ec>
   2e600:	cmp	r1, #0
   2e604:	mov	r8, r2
   2e608:	mov	r6, r0
   2e60c:	mov	r5, r1
   2e610:	mov	r9, r3
   2e614:	addeq	r5, sp, #20
   2e618:	bl	12348 <__errno_location@plt>
   2e61c:	mov	r3, #0
   2e620:	mov	r7, r0
   2e624:	str	r3, [r0]
   2e628:	bl	122b8 <__ctype_b_loc@plt>
   2e62c:	ldrb	r3, [r6]
   2e630:	mov	r2, r6
   2e634:	ldr	r0, [r0]
   2e638:	b	2e640 <__assert_fail@plt+0x1c04c>
   2e63c:	ldrb	r3, [r2, #1]!
   2e640:	lsl	r1, r3, #1
   2e644:	ldrh	r4, [r0, r1]
   2e648:	ands	r4, r4, #8192	; 0x2000
   2e64c:	bne	2e63c <__assert_fail@plt+0x1c048>
   2e650:	cmp	r3, #45	; 0x2d
   2e654:	beq	2e6f0 <__assert_fail@plt+0x1c0fc>
   2e658:	mov	r2, r8
   2e65c:	mov	r3, r4
   2e660:	mov	r1, r5
   2e664:	mov	r0, r6
   2e668:	bl	12048 <__strtoull_internal@plt>
   2e66c:	ldr	r8, [r5]
   2e670:	mov	sl, r0
   2e674:	mov	fp, r1
   2e678:	cmp	r8, r6
   2e67c:	beq	2e6d8 <__assert_fail@plt+0x1c0e4>
   2e680:	ldr	r4, [r7]
   2e684:	cmp	r4, #0
   2e688:	bne	2e6c8 <__assert_fail@plt+0x1c0d4>
   2e68c:	ldr	r3, [sp, #64]	; 0x40
   2e690:	cmp	r3, #0
   2e694:	beq	2e6a4 <__assert_fail@plt+0x1c0b0>
   2e698:	ldrb	r6, [r8]
   2e69c:	cmp	r6, #0
   2e6a0:	bne	2ea84 <__assert_fail@plt+0x1c490>
   2e6a4:	strd	sl, [r9]
   2e6a8:	mov	r0, r4
   2e6ac:	add	sp, sp, #28
   2e6b0:	ldrd	r4, [sp]
   2e6b4:	ldrd	r6, [sp, #8]
   2e6b8:	ldrd	r8, [sp, #16]
   2e6bc:	ldrd	sl, [sp, #24]
   2e6c0:	add	sp, sp, #32
   2e6c4:	pop	{pc}		; (ldr pc, [sp], #4)
   2e6c8:	cmp	r4, #34	; 0x22
   2e6cc:	bne	2e6f0 <__assert_fail@plt+0x1c0fc>
   2e6d0:	mov	r4, #1
   2e6d4:	b	2e68c <__assert_fail@plt+0x1c098>
   2e6d8:	ldr	r3, [sp, #64]	; 0x40
   2e6dc:	cmp	r3, #0
   2e6e0:	beq	2e6f0 <__assert_fail@plt+0x1c0fc>
   2e6e4:	ldrb	r6, [r6]
   2e6e8:	cmp	r6, #0
   2e6ec:	bne	2e6f8 <__assert_fail@plt+0x1c104>
   2e6f0:	mov	r4, #4
   2e6f4:	b	2e6a8 <__assert_fail@plt+0x1c0b4>
   2e6f8:	mov	r1, r6
   2e6fc:	mov	r0, r3
   2e700:	bl	1230c <strchr@plt>
   2e704:	cmp	r0, #0
   2e708:	movne	sl, #1
   2e70c:	movne	fp, #0
   2e710:	beq	2e6f0 <__assert_fail@plt+0x1c0fc>
   2e714:	sub	r7, r6, #69	; 0x45
   2e718:	cmp	r7, #47	; 0x2f
   2e71c:	ldrls	pc, [pc, r7, lsl #2]
   2e720:	b	2e8e0 <__assert_fail@plt+0x1c2ec>
   2e724:	andeq	lr, r2, r4, ror #15
   2e728:	andeq	lr, r2, r0, ror #17
   2e72c:	andeq	lr, r2, r4, ror #15
   2e730:	andeq	lr, r2, r0, ror #17
   2e734:	andeq	lr, r2, r0, ror #17
   2e738:	andeq	lr, r2, r0, ror #17
   2e73c:	andeq	lr, r2, r4, ror #15
   2e740:	andeq	lr, r2, r0, ror #17
   2e744:	andeq	lr, r2, r4, ror #15
   2e748:	andeq	lr, r2, r0, ror #17
   2e74c:	andeq	lr, r2, r0, ror #17
   2e750:	andeq	lr, r2, r4, ror #15
   2e754:	andeq	lr, r2, r0, ror #17
   2e758:	andeq	lr, r2, r0, ror #17
   2e75c:	andeq	lr, r2, r0, ror #17
   2e760:	andeq	lr, r2, r4, ror #15
   2e764:	andeq	lr, r2, r0, ror #17
   2e768:	andeq	lr, r2, r0, ror #17
   2e76c:	andeq	lr, r2, r0, ror #17
   2e770:	andeq	lr, r2, r0, ror #17
   2e774:	andeq	lr, r2, r4, ror #15
   2e778:	andeq	lr, r2, r4, ror #15
   2e77c:	andeq	lr, r2, r0, ror #17
   2e780:	andeq	lr, r2, r0, ror #17
   2e784:	andeq	lr, r2, r0, ror #17
   2e788:	andeq	lr, r2, r0, ror #17
   2e78c:	andeq	lr, r2, r0, ror #17
   2e790:	andeq	lr, r2, r0, ror #17
   2e794:	andeq	lr, r2, r0, ror #17
   2e798:	andeq	lr, r2, r0, ror #17
   2e79c:	andeq	lr, r2, r0, ror #17
   2e7a0:	andeq	lr, r2, r0, ror #17
   2e7a4:	andeq	lr, r2, r0, ror #17
   2e7a8:	andeq	lr, r2, r0, ror #17
   2e7ac:	andeq	lr, r2, r4, ror #15
   2e7b0:	andeq	lr, r2, r0, ror #17
   2e7b4:	andeq	lr, r2, r0, ror #17
   2e7b8:	andeq	lr, r2, r0, ror #17
   2e7bc:	andeq	lr, r2, r4, ror #15
   2e7c0:	andeq	lr, r2, r0, ror #17
   2e7c4:	andeq	lr, r2, r4, ror #15
   2e7c8:	andeq	lr, r2, r0, ror #17
   2e7cc:	andeq	lr, r2, r0, ror #17
   2e7d0:	andeq	lr, r2, r0, ror #17
   2e7d4:	andeq	lr, r2, r0, ror #17
   2e7d8:	andeq	lr, r2, r0, ror #17
   2e7dc:	andeq	lr, r2, r0, ror #17
   2e7e0:	andeq	lr, r2, r4, ror #15
   2e7e4:	mov	r1, #48	; 0x30
   2e7e8:	ldr	r0, [sp, #64]	; 0x40
   2e7ec:	bl	1230c <strchr@plt>
   2e7f0:	cmp	r0, #0
   2e7f4:	beq	2e8e0 <__assert_fail@plt+0x1c2ec>
   2e7f8:	ldrb	r3, [r8, #1]
   2e7fc:	cmp	r3, #68	; 0x44
   2e800:	beq	2ee24 <__assert_fail@plt+0x1c830>
   2e804:	cmp	r3, #105	; 0x69
   2e808:	beq	2ea9c <__assert_fail@plt+0x1c4a8>
   2e80c:	cmp	r3, #66	; 0x42
   2e810:	beq	2ee24 <__assert_fail@plt+0x1c830>
   2e814:	cmp	r7, #47	; 0x2f
   2e818:	ldrls	pc, [pc, r7, lsl #2]
   2e81c:	b	2ea7c <__assert_fail@plt+0x1c488>
   2e820:	andeq	lr, r2, r8, lsl #28
   2e824:	andeq	lr, r2, ip, ror sl
   2e828:	strdeq	lr, [r2], -r8
   2e82c:	andeq	lr, r2, ip, ror sl
   2e830:	andeq	lr, r2, ip, ror sl
   2e834:	andeq	lr, r2, ip, ror sl
   2e838:	andeq	lr, r2, r8, ror #27
   2e83c:	andeq	lr, r2, ip, ror sl
   2e840:	ldrdeq	lr, [r2], -r8
   2e844:	andeq	lr, r2, ip, ror sl
   2e848:	andeq	lr, r2, ip, ror sl
   2e84c:	andeq	lr, r2, r0, asr #27
   2e850:	andeq	lr, r2, ip, ror sl
   2e854:	andeq	lr, r2, ip, ror sl
   2e858:	andeq	lr, r2, ip, ror sl
   2e85c:			; <UNDEFINED> instruction: 0x0002edb0
   2e860:	andeq	lr, r2, ip, ror sl
   2e864:	andeq	lr, r2, ip, ror sl
   2e868:	andeq	lr, r2, ip, ror sl
   2e86c:	andeq	lr, r2, ip, ror sl
   2e870:	andeq	lr, r2, r0, lsr #27
   2e874:	muleq	r2, r0, sp
   2e878:	andeq	lr, r2, ip, ror sl
   2e87c:	andeq	lr, r2, ip, ror sl
   2e880:	andeq	lr, r2, ip, ror sl
   2e884:	andeq	lr, r2, ip, ror sl
   2e888:	andeq	lr, r2, ip, ror sl
   2e88c:	andeq	lr, r2, ip, ror sl
   2e890:	andeq	lr, r2, ip, ror sl
   2e894:	ldrdeq	lr, [r2], -r8
   2e898:	ldrdeq	lr, [r2], -r0
   2e89c:	andeq	lr, r2, ip, ror sl
   2e8a0:	andeq	lr, r2, ip, ror sl
   2e8a4:	andeq	lr, r2, ip, ror sl
   2e8a8:	strdeq	lr, [r2], -r8
   2e8ac:	andeq	lr, r2, ip, ror sl
   2e8b0:	andeq	lr, r2, ip, ror sl
   2e8b4:	andeq	lr, r2, ip, ror sl
   2e8b8:	andeq	lr, r2, r8, ror #27
   2e8bc:	andeq	lr, r2, ip, ror sl
   2e8c0:	ldrdeq	lr, [r2], -r8
   2e8c4:	andeq	lr, r2, ip, ror sl
   2e8c8:	andeq	lr, r2, ip, ror sl
   2e8cc:	andeq	lr, r2, ip, ror sl
   2e8d0:	andeq	lr, r2, ip, ror sl
   2e8d4:	andeq	lr, r2, ip, ror sl
   2e8d8:	andeq	lr, r2, ip, ror sl
   2e8dc:			; <UNDEFINED> instruction: 0x0002edb0
   2e8e0:	mov	lr, #1
   2e8e4:	mov	r0, #1024	; 0x400
   2e8e8:	sub	r6, r6, #66	; 0x42
   2e8ec:	cmp	r6, #53	; 0x35
   2e8f0:	ldrls	pc, [pc, r6, lsl #2]
   2e8f4:	b	2ea7c <__assert_fail@plt+0x1c488>
   2e8f8:	andeq	lr, r2, r0, lsl #22
   2e8fc:	andeq	lr, r2, ip, ror sl
   2e900:	andeq	lr, r2, ip, ror sl
   2e904:			; <UNDEFINED> instruction: 0x0002ebb4
   2e908:	andeq	lr, r2, ip, ror sl
   2e90c:	ldrdeq	lr, [r2], -r0
   2e910:	andeq	lr, r2, ip, ror sl
   2e914:	andeq	lr, r2, ip, ror sl
   2e918:	andeq	lr, r2, ip, ror sl
   2e91c:	andeq	lr, r2, r4, lsl #23
   2e920:	andeq	lr, r2, ip, ror sl
   2e924:	andeq	lr, r2, r4, lsr sp
   2e928:	andeq	lr, r2, ip, ror sl
   2e92c:	andeq	lr, r2, ip, ror sl
   2e930:	ldrdeq	lr, [r2], -r4
   2e934:	andeq	lr, r2, ip, ror sl
   2e938:	andeq	lr, r2, ip, ror sl
   2e93c:	andeq	lr, r2, ip, ror sl
   2e940:	andeq	lr, r2, r4, ror ip
   2e944:	andeq	lr, r2, ip, ror sl
   2e948:	andeq	lr, r2, ip, ror sl
   2e94c:	andeq	lr, r2, ip, ror sl
   2e950:	andeq	lr, r2, ip, ror sl
   2e954:	andeq	lr, r2, r4, lsl ip
   2e958:	andeq	lr, r2, r4, lsr #22
   2e95c:	andeq	lr, r2, ip, ror sl
   2e960:	andeq	lr, r2, ip, ror sl
   2e964:	andeq	lr, r2, ip, ror sl
   2e968:	andeq	lr, r2, ip, ror sl
   2e96c:	andeq	lr, r2, ip, ror sl
   2e970:	andeq	lr, r2, ip, ror sl
   2e974:	andeq	lr, r2, ip, ror sl
   2e978:	ldrdeq	lr, [r2], -ip
   2e97c:	andeq	lr, r2, r8, ror #20
   2e980:	andeq	lr, r2, ip, ror sl
   2e984:	andeq	lr, r2, ip, ror sl
   2e988:	andeq	lr, r2, ip, ror sl
   2e98c:	ldrdeq	lr, [r2], -r0
   2e990:	andeq	lr, r2, ip, ror sl
   2e994:	andeq	lr, r2, ip, ror sl
   2e998:	andeq	lr, r2, ip, ror sl
   2e99c:	andeq	lr, r2, r4, lsl #23
   2e9a0:	andeq	lr, r2, ip, ror sl
   2e9a4:	andeq	lr, r2, r4, lsr sp
   2e9a8:	andeq	lr, r2, ip, ror sl
   2e9ac:	andeq	lr, r2, ip, ror sl
   2e9b0:	andeq	lr, r2, ip, ror sl
   2e9b4:	andeq	lr, r2, ip, ror sl
   2e9b8:	andeq	lr, r2, ip, ror sl
   2e9bc:	andeq	lr, r2, ip, ror sl
   2e9c0:	andeq	lr, r2, r4, ror ip
   2e9c4:	andeq	lr, r2, ip, ror sl
   2e9c8:	andeq	lr, r2, ip, ror sl
   2e9cc:			; <UNDEFINED> instruction: 0x0002eab4
   2e9d0:	asr	r1, r0, #31
   2e9d4:	cmp	fp, #0
   2e9d8:	mov	r6, #0
   2e9dc:	mov	r7, #0
   2e9e0:	bne	2ef44 <__assert_fail@plt+0x1c950>
   2e9e4:	orrs	r3, r6, r7
   2e9e8:	bne	2ef0c <__assert_fail@plt+0x1c918>
   2e9ec:	umull	r2, r3, sl, r0
   2e9f0:	mul	ip, sl, r1
   2e9f4:	strd	r2, [sp]
   2e9f8:	ldr	r2, [sp, #4]
   2e9fc:	mla	r3, r0, fp, ip
   2ea00:	add	ip, r3, r2
   2ea04:	cmp	ip, #0
   2ea08:	str	ip, [sp, #4]
   2ea0c:	bne	2efbc <__assert_fail@plt+0x1c9c8>
   2ea10:	orrs	r3, r6, r7
   2ea14:	bne	2ef0c <__assert_fail@plt+0x1c918>
   2ea18:	ldr	r2, [sp]
   2ea1c:	mov	sl, r6
   2ea20:	mov	fp, r7
   2ea24:	ldr	r3, [sp]
   2ea28:	umull	r6, r7, r2, r0
   2ea2c:	ldr	r2, [sp, #4]
   2ea30:	mul	r3, r3, r1
   2ea34:	mla	r3, r0, r2, r3
   2ea38:	add	ip, r3, r7
   2ea3c:	cmp	ip, #0
   2ea40:	mov	r7, ip
   2ea44:	bne	2ef94 <__assert_fail@plt+0x1c9a0>
   2ea48:	orrs	r3, sl, fp
   2ea4c:	bne	2ef0c <__assert_fail@plt+0x1c918>
   2ea50:	mul	r2, r6, r1
   2ea54:	mov	r3, #0
   2ea58:	umull	sl, fp, r6, r0
   2ea5c:	mla	r2, r0, r7, r2
   2ea60:	add	fp, r2, fp
   2ea64:	orr	r4, r4, r3
   2ea68:	add	r3, r8, lr
   2ea6c:	str	r3, [r5]
   2ea70:	ldrb	r3, [r8, lr]
   2ea74:	cmp	r3, #0
   2ea78:	beq	2e6a4 <__assert_fail@plt+0x1c0b0>
   2ea7c:	orr	r4, r4, #2
   2ea80:	b	2e6a4 <__assert_fail@plt+0x1c0b0>
   2ea84:	mov	r1, r6
   2ea88:	ldr	r0, [sp, #64]	; 0x40
   2ea8c:	bl	1230c <strchr@plt>
   2ea90:	cmp	r0, #0
   2ea94:	bne	2e714 <__assert_fail@plt+0x1c120>
   2ea98:	b	2ea7c <__assert_fail@plt+0x1c488>
   2ea9c:	ldrb	r3, [r8, #2]
   2eaa0:	mov	r0, #1024	; 0x400
   2eaa4:	cmp	r3, #66	; 0x42
   2eaa8:	movne	lr, #1
   2eaac:	moveq	lr, #3
   2eab0:	b	2e8e8 <__assert_fail@plt+0x1c2f4>
   2eab4:	lsr	r3, fp, #31
   2eab8:	adds	sl, sl, sl
   2eabc:	adc	fp, fp, fp
   2eac0:	cmp	r3, #0
   2eac4:	beq	2ea68 <__assert_fail@plt+0x1c474>
   2eac8:	mov	r4, #1
   2eacc:	mvn	sl, #0
   2ead0:	mvn	fp, #0
   2ead4:	b	2ea68 <__assert_fail@plt+0x1c474>
   2ead8:	mov	lr, #1
   2eadc:	lsr	r3, fp, #23
   2eae0:	cmp	r3, #0
   2eae4:	bne	2eac8 <__assert_fail@plt+0x1c4d4>
   2eae8:	lsl	r3, fp, #9
   2eaec:	lsl	r2, sl, #9
   2eaf0:	orr	r3, r3, sl, lsr #23
   2eaf4:	mov	sl, r2
   2eaf8:	mov	fp, r3
   2eafc:	b	2ea68 <__assert_fail@plt+0x1c474>
   2eb00:	lsr	r3, fp, #22
   2eb04:	cmp	r3, #0
   2eb08:	bne	2eac8 <__assert_fail@plt+0x1c4d4>
   2eb0c:	lsl	r3, fp, #10
   2eb10:	lsl	r2, sl, #10
   2eb14:	orr	r3, r3, sl, lsr #22
   2eb18:	mov	sl, r2
   2eb1c:	mov	fp, r3
   2eb20:	b	2ea68 <__assert_fail@plt+0x1c474>
   2eb24:	asr	r7, r0, #31
   2eb28:	mov	r6, r0
   2eb2c:	mov	r3, #0
   2eb30:	mov	ip, #7
   2eb34:	str	r3, [sp]
   2eb38:	strd	r4, [sp, #8]
   2eb3c:	b	2eb58 <__assert_fail@plt+0x1c564>
   2eb40:	mul	r3, sl, r7
   2eb44:	mla	r3, r6, fp, r3
   2eb48:	umull	sl, fp, sl, r6
   2eb4c:	add	fp, r3, fp
   2eb50:	subs	ip, ip, #1
   2eb54:	beq	2ee18 <__assert_fail@plt+0x1c824>
   2eb58:	cmp	fp, #0
   2eb5c:	mov	r2, #0
   2eb60:	mov	r3, #0
   2eb64:	bne	2eec0 <__assert_fail@plt+0x1c8cc>
   2eb68:	orrs	r3, r2, r3
   2eb6c:	beq	2eb40 <__assert_fail@plt+0x1c54c>
   2eb70:	mov	r3, #1
   2eb74:	mvn	sl, #0
   2eb78:	mvn	fp, #0
   2eb7c:	str	r3, [sp]
   2eb80:	b	2eb50 <__assert_fail@plt+0x1c55c>
   2eb84:	asr	r1, r0, #31
   2eb88:	cmp	fp, #0
   2eb8c:	mov	r6, #0
   2eb90:	mov	r7, #0
   2eb94:	bne	2eee4 <__assert_fail@plt+0x1c8f0>
   2eb98:	orrs	r3, r6, r7
   2eb9c:	bne	2eac8 <__assert_fail@plt+0x1c4d4>
   2eba0:	mul	r3, sl, r1
   2eba4:	mla	r3, r0, fp, r3
   2eba8:	umull	sl, fp, sl, r0
   2ebac:	add	fp, r3, fp
   2ebb0:	b	2ea68 <__assert_fail@plt+0x1c474>
   2ebb4:	asr	r7, r0, #31
   2ebb8:	mov	r6, r0
   2ebbc:	mov	r3, #0
   2ebc0:	mov	ip, #6
   2ebc4:	str	r3, [sp]
   2ebc8:	strd	r4, [sp, #8]
   2ebcc:	b	2ebe8 <__assert_fail@plt+0x1c5f4>
   2ebd0:	mul	r3, sl, r7
   2ebd4:	mla	r3, r6, fp, r3
   2ebd8:	umull	sl, fp, sl, r6
   2ebdc:	add	fp, r3, fp
   2ebe0:	subs	ip, ip, #1
   2ebe4:	beq	2ee18 <__assert_fail@plt+0x1c824>
   2ebe8:	cmp	fp, #0
   2ebec:	mov	r2, #0
   2ebf0:	mov	r3, #0
   2ebf4:	bne	2ee30 <__assert_fail@plt+0x1c83c>
   2ebf8:	orrs	r3, r2, r3
   2ebfc:	beq	2ebd0 <__assert_fail@plt+0x1c5dc>
   2ec00:	mov	r3, #1
   2ec04:	mvn	sl, #0
   2ec08:	mvn	fp, #0
   2ec0c:	str	r3, [sp]
   2ec10:	b	2ebe0 <__assert_fail@plt+0x1c5ec>
   2ec14:	asr	r7, r0, #31
   2ec18:	mov	r6, r0
   2ec1c:	mov	r3, #0
   2ec20:	mov	ip, #8
   2ec24:	str	r3, [sp]
   2ec28:	strd	r4, [sp, #8]
   2ec2c:	b	2ec48 <__assert_fail@plt+0x1c654>
   2ec30:	mul	r3, sl, r7
   2ec34:	mla	r3, r6, fp, r3
   2ec38:	umull	sl, fp, sl, r6
   2ec3c:	add	fp, r3, fp
   2ec40:	subs	ip, ip, #1
   2ec44:	beq	2ee18 <__assert_fail@plt+0x1c824>
   2ec48:	cmp	fp, #0
   2ec4c:	mov	r2, #0
   2ec50:	mov	r3, #0
   2ec54:	bne	2ee78 <__assert_fail@plt+0x1c884>
   2ec58:	orrs	r3, r2, r3
   2ec5c:	beq	2ec30 <__assert_fail@plt+0x1c63c>
   2ec60:	mov	r3, #1
   2ec64:	mvn	sl, #0
   2ec68:	mvn	fp, #0
   2ec6c:	str	r3, [sp]
   2ec70:	b	2ec40 <__assert_fail@plt+0x1c64c>
   2ec74:	asr	r7, r0, #31
   2ec78:	mov	r6, r0
   2ec7c:	mov	r3, #0
   2ec80:	mov	ip, #4
   2ec84:	str	r3, [sp]
   2ec88:	strd	r4, [sp, #8]
   2ec8c:	b	2eca8 <__assert_fail@plt+0x1c6b4>
   2ec90:	mul	r3, sl, r7
   2ec94:	mla	r3, r6, fp, r3
   2ec98:	umull	sl, fp, sl, r6
   2ec9c:	add	fp, r3, fp
   2eca0:	subs	ip, ip, #1
   2eca4:	beq	2ee18 <__assert_fail@plt+0x1c824>
   2eca8:	cmp	fp, #0
   2ecac:	mov	r2, #0
   2ecb0:	mov	r3, #0
   2ecb4:	bne	2ee54 <__assert_fail@plt+0x1c860>
   2ecb8:	orrs	r3, r2, r3
   2ecbc:	beq	2ec90 <__assert_fail@plt+0x1c69c>
   2ecc0:	mov	r3, #1
   2ecc4:	mvn	sl, #0
   2ecc8:	mvn	fp, #0
   2eccc:	str	r3, [sp]
   2ecd0:	b	2eca0 <__assert_fail@plt+0x1c6ac>
   2ecd4:	asr	r7, r0, #31
   2ecd8:	mov	r6, r0
   2ecdc:	mov	r3, #0
   2ece0:	mov	ip, #5
   2ece4:	str	r3, [sp]
   2ece8:	strd	r4, [sp, #8]
   2ecec:	b	2ed08 <__assert_fail@plt+0x1c714>
   2ecf0:	mul	r3, sl, r7
   2ecf4:	mla	r3, r6, fp, r3
   2ecf8:	umull	sl, fp, sl, r6
   2ecfc:	add	fp, r3, fp
   2ed00:	subs	ip, ip, #1
   2ed04:	beq	2ee18 <__assert_fail@plt+0x1c824>
   2ed08:	cmp	fp, #0
   2ed0c:	mov	r2, #0
   2ed10:	mov	r3, #0
   2ed14:	bne	2ee9c <__assert_fail@plt+0x1c8a8>
   2ed18:	orrs	r3, r2, r3
   2ed1c:	beq	2ecf0 <__assert_fail@plt+0x1c6fc>
   2ed20:	mov	r3, #1
   2ed24:	mvn	sl, #0
   2ed28:	mvn	fp, #0
   2ed2c:	str	r3, [sp]
   2ed30:	b	2ed00 <__assert_fail@plt+0x1c70c>
   2ed34:	asr	r1, r0, #31
   2ed38:	cmp	fp, #0
   2ed3c:	mov	r6, #0
   2ed40:	mov	r7, #0
   2ed44:	bne	2ef1c <__assert_fail@plt+0x1c928>
   2ed48:	orrs	r3, r6, r7
   2ed4c:	bne	2eac8 <__assert_fail@plt+0x1c4d4>
   2ed50:	mul	r3, sl, r1
   2ed54:	strd	r6, [sp]
   2ed58:	umull	r6, r7, sl, r0
   2ed5c:	mla	r3, r0, fp, r3
   2ed60:	add	ip, r3, r7
   2ed64:	cmp	ip, #0
   2ed68:	mov	r7, ip
   2ed6c:	bne	2ef6c <__assert_fail@plt+0x1c978>
   2ed70:	ldrd	r2, [sp]
   2ed74:	orrs	r3, r2, r3
   2ed78:	bne	2eac8 <__assert_fail@plt+0x1c4d4>
   2ed7c:	mul	r3, r6, r1
   2ed80:	umull	sl, fp, r6, r0
   2ed84:	mla	r0, r0, r7, r3
   2ed88:	add	fp, r0, fp
   2ed8c:	b	2ea68 <__assert_fail@plt+0x1c474>
   2ed90:	mov	lr, #1
   2ed94:	mov	r6, #1024	; 0x400
   2ed98:	mov	r7, #0
   2ed9c:	b	2eb2c <__assert_fail@plt+0x1c538>
   2eda0:	mov	lr, #1
   2eda4:	mov	r6, #1024	; 0x400
   2eda8:	mov	r7, #0
   2edac:	b	2ec1c <__assert_fail@plt+0x1c628>
   2edb0:	mov	lr, #1
   2edb4:	mov	r6, #1024	; 0x400
   2edb8:	mov	r7, #0
   2edbc:	b	2ec7c <__assert_fail@plt+0x1c688>
   2edc0:	mov	lr, #1
   2edc4:	mov	r6, #1024	; 0x400
   2edc8:	mov	r7, #0
   2edcc:	b	2ecdc <__assert_fail@plt+0x1c6e8>
   2edd0:	mov	lr, #1
   2edd4:	b	2ea68 <__assert_fail@plt+0x1c474>
   2edd8:	mov	lr, #1
   2eddc:	mov	r0, #1024	; 0x400
   2ede0:	mov	r1, #0
   2ede4:	b	2ed38 <__assert_fail@plt+0x1c744>
   2ede8:	mov	lr, #1
   2edec:	mov	r0, #1024	; 0x400
   2edf0:	mov	r1, #0
   2edf4:	b	2eb88 <__assert_fail@plt+0x1c594>
   2edf8:	mov	lr, #1
   2edfc:	mov	r0, #1024	; 0x400
   2ee00:	mov	r1, #0
   2ee04:	b	2e9d4 <__assert_fail@plt+0x1c3e0>
   2ee08:	mov	lr, #1
   2ee0c:	mov	r6, #1024	; 0x400
   2ee10:	mov	r7, #0
   2ee14:	b	2ebbc <__assert_fail@plt+0x1c5c8>
   2ee18:	ldr	r3, [sp]
   2ee1c:	ldrd	r4, [sp, #8]
   2ee20:	b	2ea64 <__assert_fail@plt+0x1c470>
   2ee24:	mov	lr, #2
   2ee28:	mov	r0, #1000	; 0x3e8
   2ee2c:	b	2e8e8 <__assert_fail@plt+0x1c2f4>
   2ee30:	umull	r0, r1, sl, r6
   2ee34:	mov	r5, #0
   2ee38:	mov	r0, r1
   2ee3c:	mov	r1, r5
   2ee40:	umlal	r0, r1, fp, r6
   2ee44:	cmp	r1, r5
   2ee48:	movne	r2, #1
   2ee4c:	movne	r3, #0
   2ee50:	b	2ebf8 <__assert_fail@plt+0x1c604>
   2ee54:	umull	r0, r1, sl, r6
   2ee58:	mov	r5, #0
   2ee5c:	mov	r0, r1
   2ee60:	mov	r1, r5
   2ee64:	umlal	r0, r1, fp, r6
   2ee68:	cmp	r1, r5
   2ee6c:	movne	r2, #1
   2ee70:	movne	r3, #0
   2ee74:	b	2ecb8 <__assert_fail@plt+0x1c6c4>
   2ee78:	umull	r0, r1, sl, r6
   2ee7c:	mov	r5, #0
   2ee80:	mov	r0, r1
   2ee84:	mov	r1, r5
   2ee88:	umlal	r0, r1, fp, r6
   2ee8c:	cmp	r1, r5
   2ee90:	movne	r2, #1
   2ee94:	movne	r3, #0
   2ee98:	b	2ec58 <__assert_fail@plt+0x1c664>
   2ee9c:	umull	r0, r1, sl, r6
   2eea0:	mov	r5, #0
   2eea4:	mov	r0, r1
   2eea8:	mov	r1, r5
   2eeac:	umlal	r0, r1, fp, r6
   2eeb0:	cmp	r1, r5
   2eeb4:	movne	r2, #1
   2eeb8:	movne	r3, #0
   2eebc:	b	2ed18 <__assert_fail@plt+0x1c724>
   2eec0:	umull	r0, r1, sl, r6
   2eec4:	mov	r5, #0
   2eec8:	mov	r0, r1
   2eecc:	mov	r1, r5
   2eed0:	umlal	r0, r1, fp, r6
   2eed4:	cmp	r1, r5
   2eed8:	movne	r2, #1
   2eedc:	movne	r3, #0
   2eee0:	b	2eb68 <__assert_fail@plt+0x1c574>
   2eee4:	umull	r2, r3, sl, r0
   2eee8:	str	r3, [sp]
   2eeec:	mov	r3, #0
   2eef0:	str	r3, [sp, #4]
   2eef4:	ldrd	r2, [sp]
   2eef8:	umlal	r2, r3, fp, r0
   2eefc:	cmp	r3, #0
   2ef00:	movne	r6, #1
   2ef04:	movne	r7, #0
   2ef08:	b	2eb98 <__assert_fail@plt+0x1c5a4>
   2ef0c:	mov	r3, #1
   2ef10:	mvn	sl, #0
   2ef14:	mvn	fp, #0
   2ef18:	b	2ea64 <__assert_fail@plt+0x1c470>
   2ef1c:	umull	r2, r3, sl, r0
   2ef20:	str	r3, [sp]
   2ef24:	mov	r3, #0
   2ef28:	str	r3, [sp, #4]
   2ef2c:	ldrd	r2, [sp]
   2ef30:	umlal	r2, r3, fp, r0
   2ef34:	cmp	r3, #0
   2ef38:	movne	r6, #1
   2ef3c:	movne	r7, #0
   2ef40:	b	2ed48 <__assert_fail@plt+0x1c754>
   2ef44:	umull	r2, r3, sl, r0
   2ef48:	str	r3, [sp]
   2ef4c:	mov	r3, #0
   2ef50:	str	r3, [sp, #4]
   2ef54:	ldrd	r2, [sp]
   2ef58:	umlal	r2, r3, fp, r0
   2ef5c:	cmp	r3, #0
   2ef60:	movne	r6, #1
   2ef64:	movne	r7, #0
   2ef68:	b	2e9e4 <__assert_fail@plt+0x1c3f0>
   2ef6c:	umull	r2, r3, r6, r0
   2ef70:	mov	fp, #0
   2ef74:	mov	sl, r3
   2ef78:	umlal	sl, fp, ip, r0
   2ef7c:	cmp	fp, #0
   2ef80:	beq	2ed70 <__assert_fail@plt+0x1c77c>
   2ef84:	mov	r2, #1
   2ef88:	mov	r3, #0
   2ef8c:	strd	r2, [sp]
   2ef90:	b	2ed70 <__assert_fail@plt+0x1c77c>
   2ef94:	umull	r2, r3, r6, r0
   2ef98:	str	r3, [sp]
   2ef9c:	mov	r3, #0
   2efa0:	str	r3, [sp, #4]
   2efa4:	ldrd	r2, [sp]
   2efa8:	umlal	r2, r3, ip, r0
   2efac:	cmp	r3, #0
   2efb0:	movne	sl, #1
   2efb4:	movne	fp, #0
   2efb8:	b	2ea48 <__assert_fail@plt+0x1c454>
   2efbc:	ldr	r3, [sp]
   2efc0:	mov	fp, #0
   2efc4:	umull	r2, r3, r3, r0
   2efc8:	mov	sl, r3
   2efcc:	umlal	sl, fp, ip, r0
   2efd0:	cmp	fp, #0
   2efd4:	movne	r6, #1
   2efd8:	movne	r7, #0
   2efdc:	b	2ea10 <__assert_fail@plt+0x1c41c>
   2efe0:	movw	r3, #33356	; 0x824c
   2efe4:	movt	r3, #4
   2efe8:	movw	r1, #33304	; 0x8218
   2efec:	movt	r1, #4
   2eff0:	movw	r0, #33316	; 0x8224
   2eff4:	movt	r0, #4
   2eff8:	mov	r2, #84	; 0x54
   2effc:	bl	125f4 <__assert_fail@plt>
   2f000:	movw	r3, #38224	; 0x9550
   2f004:	movt	r3, #5
   2f008:	str	r4, [sp, #-8]!
   2f00c:	mov	r4, #0
   2f010:	ldr	r3, [r3]
   2f014:	mov	r2, #10
   2f018:	str	lr, [sp, #4]
   2f01c:	sub	sp, sp, #8
   2f020:	add	r1, sp, #4
   2f024:	mov	r0, sp
   2f028:	str	r4, [sp]
   2f02c:	str	r4, [sp, #4]
   2f030:	bl	11f10 <__getdelim@plt>
   2f034:	subs	r3, r0, #0
   2f038:	ble	2f064 <__assert_fail@plt+0x1ca70>
   2f03c:	ldr	r0, [sp]
   2f040:	sub	r3, r3, #1
   2f044:	ldrb	r2, [r0, r3]
   2f048:	cmp	r2, #10
   2f04c:	strbeq	r4, [r0, r3]
   2f050:	ldreq	r0, [sp]
   2f054:	bl	12438 <rpmatch@plt>
   2f058:	cmp	r0, #0
   2f05c:	movle	r4, #0
   2f060:	movgt	r4, #1
   2f064:	ldr	r0, [sp]
   2f068:	bl	2f668 <__assert_fail@plt+0x1d074>
   2f06c:	mov	r0, r4
   2f070:	add	sp, sp, #8
   2f074:	ldr	r4, [sp]
   2f078:	add	sp, sp, #4
   2f07c:	pop	{pc}		; (ldr pc, [sp], #4)
   2f080:	cmp	r1, #0
   2f084:	cmpne	r0, #0
   2f088:	beq	2f0d4 <__assert_fail@plt+0x1cae0>
   2f08c:	strd	r4, [sp, #-16]!
   2f090:	umull	r4, r5, r0, r1
   2f094:	str	r6, [sp, #8]
   2f098:	str	lr, [sp, #12]
   2f09c:	adds	r3, r5, #0
   2f0a0:	movne	r3, #1
   2f0a4:	cmp	r4, #0
   2f0a8:	blt	2f0b4 <__assert_fail@plt+0x1cac0>
   2f0ac:	cmp	r3, #0
   2f0b0:	beq	2f0e0 <__assert_fail@plt+0x1caec>
   2f0b4:	bl	12348 <__errno_location@plt>
   2f0b8:	mov	r3, #12
   2f0bc:	ldrd	r4, [sp]
   2f0c0:	ldr	r6, [sp, #8]
   2f0c4:	add	sp, sp, #12
   2f0c8:	str	r3, [r0]
   2f0cc:	mov	r0, #0
   2f0d0:	pop	{pc}		; (ldr pc, [sp], #4)
   2f0d4:	mov	r1, #1
   2f0d8:	mov	r0, r1
   2f0dc:	b	11ec8 <calloc@plt>
   2f0e0:	ldrd	r4, [sp]
   2f0e4:	ldr	r6, [sp, #8]
   2f0e8:	ldr	lr, [sp, #12]
   2f0ec:	add	sp, sp, #16
   2f0f0:	b	11ec8 <calloc@plt>
   2f0f4:	cmp	r0, #0
   2f0f8:	bxlt	lr
   2f0fc:	str	r4, [sp, #-8]!
   2f100:	str	lr, [sp, #4]
   2f104:	bl	125ac <close@plt>
   2f108:	cmp	r0, #0
   2f10c:	bne	2f11c <__assert_fail@plt+0x1cb28>
   2f110:	ldr	r4, [sp]
   2f114:	add	sp, sp, #4
   2f118:	pop	{pc}		; (ldr pc, [sp], #4)
   2f11c:	movw	r3, #33368	; 0x8258
   2f120:	movt	r3, #4
   2f124:	movw	r1, #33392	; 0x8270
   2f128:	movt	r1, #4
   2f12c:	movw	r0, #33408	; 0x8280
   2f130:	movt	r0, #4
   2f134:	mov	r2, #64	; 0x40
   2f138:	bl	125f4 <__assert_fail@plt>
   2f13c:	mov	r2, #18688	; 0x4900
   2f140:	strd	r4, [sp, #-16]!
   2f144:	mov	r4, r0
   2f148:	ldr	r0, [r0]
   2f14c:	str	r6, [sp, #8]
   2f150:	str	lr, [sp, #12]
   2f154:	bl	12324 <openat64@plt>
   2f158:	subs	r5, r0, #0
   2f15c:	blt	2f180 <__assert_fail@plt+0x1cb8c>
   2f160:	ldr	r0, [r4]
   2f164:	bl	2f0f4 <__assert_fail@plt+0x1cb00>
   2f168:	mov	r0, #0
   2f16c:	str	r5, [r4]
   2f170:	ldrd	r4, [sp]
   2f174:	ldr	r6, [sp, #8]
   2f178:	add	sp, sp, #12
   2f17c:	pop	{pc}		; (ldr pc, [sp], #4)
   2f180:	mvn	r0, #0
   2f184:	b	2f170 <__assert_fail@plt+0x1cb7c>
   2f188:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2f18c:	strd	r6, [sp, #8]
   2f190:	mov	r6, r0
   2f194:	strd	r8, [sp, #16]
   2f198:	str	lr, [sp, #24]
   2f19c:	sub	sp, sp, #12
   2f1a0:	bl	12120 <chdir@plt>
   2f1a4:	subs	r4, r0, #0
   2f1a8:	beq	2f2ac <__assert_fail@plt+0x1ccb8>
   2f1ac:	bl	12348 <__errno_location@plt>
   2f1b0:	ldr	r3, [r0]
   2f1b4:	mov	r9, r0
   2f1b8:	cmp	r3, #36	; 0x24
   2f1bc:	bne	2f2ac <__assert_fail@plt+0x1ccb8>
   2f1c0:	mov	r0, r6
   2f1c4:	bl	12300 <strlen@plt>
   2f1c8:	mvn	r3, #99	; 0x63
   2f1cc:	subs	r7, r0, #0
   2f1d0:	str	r3, [sp, #4]
   2f1d4:	beq	2f3e4 <__assert_fail@plt+0x1cdf0>
   2f1d8:	cmp	r7, #4096	; 0x1000
   2f1dc:	bcc	2f400 <__assert_fail@plt+0x1ce0c>
   2f1e0:	movw	r1, #34572	; 0x870c
   2f1e4:	movt	r1, #4
   2f1e8:	mov	r0, r6
   2f1ec:	bl	125e8 <strspn@plt>
   2f1f0:	cmp	r0, #2
   2f1f4:	mov	r5, r0
   2f1f8:	beq	2f2fc <__assert_fail@plt+0x1cd08>
   2f1fc:	cmp	r0, #0
   2f200:	moveq	r5, r6
   2f204:	bne	2f2c8 <__assert_fail@plt+0x1ccd4>
   2f208:	ldrb	r3, [r5]
   2f20c:	cmp	r3, #47	; 0x2f
   2f210:	beq	2f3ac <__assert_fail@plt+0x1cdb8>
   2f214:	add	r6, r6, r7
   2f218:	cmp	r5, r6
   2f21c:	bhi	2f3c8 <__assert_fail@plt+0x1cdd4>
   2f220:	sub	r3, r6, r5
   2f224:	cmp	r3, #4096	; 0x1000
   2f228:	blt	2f358 <__assert_fail@plt+0x1cd64>
   2f22c:	movw	r7, #34572	; 0x870c
   2f230:	movt	r7, #4
   2f234:	mov	r8, #47	; 0x2f
   2f238:	b	2f288 <__assert_fail@plt+0x1cc94>
   2f23c:	mov	r3, #0
   2f240:	sub	r2, r4, r5
   2f244:	cmp	r2, #4096	; 0x1000
   2f248:	strb	r3, [r4]
   2f24c:	bge	2f390 <__assert_fail@plt+0x1cd9c>
   2f250:	mov	r1, r5
   2f254:	add	r0, sp, #4
   2f258:	bl	2f13c <__assert_fail@plt+0x1cb48>
   2f25c:	cmp	r0, #0
   2f260:	strb	r8, [r4]
   2f264:	bne	2f2e4 <__assert_fail@plt+0x1ccf0>
   2f268:	add	r4, r4, #1
   2f26c:	mov	r1, r7
   2f270:	mov	r0, r4
   2f274:	bl	125e8 <strspn@plt>
   2f278:	add	r5, r4, r0
   2f27c:	sub	r3, r6, r5
   2f280:	cmp	r3, #4096	; 0x1000
   2f284:	blt	2f358 <__assert_fail@plt+0x1cd64>
   2f288:	mov	r2, #4096	; 0x1000
   2f28c:	mov	r1, #47	; 0x2f
   2f290:	mov	r0, r5
   2f294:	bl	12330 <memrchr@plt>
   2f298:	subs	r4, r0, #0
   2f29c:	bne	2f23c <__assert_fail@plt+0x1cc48>
   2f2a0:	mov	r3, #36	; 0x24
   2f2a4:	mvn	r4, #0
   2f2a8:	str	r3, [r9]
   2f2ac:	mov	r0, r4
   2f2b0:	add	sp, sp, #12
   2f2b4:	ldrd	r4, [sp]
   2f2b8:	ldrd	r6, [sp, #8]
   2f2bc:	ldrd	r8, [sp, #16]
   2f2c0:	add	sp, sp, #24
   2f2c4:	pop	{pc}		; (ldr pc, [sp], #4)
   2f2c8:	movw	r1, #34572	; 0x870c
   2f2cc:	movt	r1, #4
   2f2d0:	add	r0, sp, #4
   2f2d4:	bl	2f13c <__assert_fail@plt+0x1cb48>
   2f2d8:	cmp	r0, #0
   2f2dc:	addeq	r5, r6, r5
   2f2e0:	beq	2f208 <__assert_fail@plt+0x1cc14>
   2f2e4:	ldr	r5, [r9]
   2f2e8:	mvn	r4, #0
   2f2ec:	ldr	r0, [sp, #4]
   2f2f0:	bl	2f0f4 <__assert_fail@plt+0x1cb00>
   2f2f4:	str	r5, [r9]
   2f2f8:	b	2f2ac <__assert_fail@plt+0x1ccb8>
   2f2fc:	sub	r2, r7, #3
   2f300:	mov	r1, #47	; 0x2f
   2f304:	add	r0, r6, #3
   2f308:	bl	123d8 <memchr@plt>
   2f30c:	subs	r4, r0, #0
   2f310:	mvneq	r4, #0
   2f314:	beq	2f2ac <__assert_fail@plt+0x1ccb8>
   2f318:	mov	r3, #0
   2f31c:	mov	r1, r6
   2f320:	add	r0, sp, #4
   2f324:	strb	r3, [r4]
   2f328:	bl	2f13c <__assert_fail@plt+0x1cb48>
   2f32c:	mov	r3, #47	; 0x2f
   2f330:	cmp	r0, #0
   2f334:	strb	r3, [r4]
   2f338:	bne	2f2e4 <__assert_fail@plt+0x1ccf0>
   2f33c:	add	r4, r4, #1
   2f340:	movw	r1, #34572	; 0x870c
   2f344:	movt	r1, #4
   2f348:	mov	r0, r4
   2f34c:	bl	125e8 <strspn@plt>
   2f350:	add	r5, r4, r0
   2f354:	b	2f208 <__assert_fail@plt+0x1cc14>
   2f358:	cmp	r6, r5
   2f35c:	bls	2f374 <__assert_fail@plt+0x1cd80>
   2f360:	mov	r1, r5
   2f364:	add	r0, sp, #4
   2f368:	bl	2f13c <__assert_fail@plt+0x1cb48>
   2f36c:	cmp	r0, #0
   2f370:	bne	2f2e4 <__assert_fail@plt+0x1ccf0>
   2f374:	ldr	r0, [sp, #4]
   2f378:	bl	124f8 <fchdir@plt>
   2f37c:	subs	r4, r0, #0
   2f380:	bne	2f2e4 <__assert_fail@plt+0x1ccf0>
   2f384:	ldr	r0, [sp, #4]
   2f388:	bl	2f0f4 <__assert_fail@plt+0x1cb00>
   2f38c:	b	2f2ac <__assert_fail@plt+0x1ccb8>
   2f390:	movw	r1, #33392	; 0x8270
   2f394:	movt	r1, #4
   2f398:	ldr	r3, [pc, #124]	; 2f41c <__assert_fail@plt+0x1ce28>
   2f39c:	movw	r0, #33472	; 0x82c0
   2f3a0:	movt	r0, #4
   2f3a4:	mov	r2, #179	; 0xb3
   2f3a8:	bl	125f4 <__assert_fail@plt>
   2f3ac:	movw	r1, #33392	; 0x8270
   2f3b0:	movt	r1, #4
   2f3b4:	ldr	r3, [pc, #96]	; 2f41c <__assert_fail@plt+0x1ce28>
   2f3b8:	movw	r0, #33444	; 0x82a4
   2f3bc:	movt	r0, #4
   2f3c0:	mov	r2, #162	; 0xa2
   2f3c4:	bl	125f4 <__assert_fail@plt>
   2f3c8:	movw	r1, #33392	; 0x8270
   2f3cc:	movt	r1, #4
   2f3d0:	ldr	r3, [pc, #68]	; 2f41c <__assert_fail@plt+0x1ce28>
   2f3d4:	movw	r0, #33456	; 0x82b0
   2f3d8:	movt	r0, #4
   2f3dc:	mov	r2, #163	; 0xa3
   2f3e0:	bl	125f4 <__assert_fail@plt>
   2f3e4:	movw	r1, #33392	; 0x8270
   2f3e8:	movt	r1, #4
   2f3ec:	ldr	r3, [pc, #40]	; 2f41c <__assert_fail@plt+0x1ce28>
   2f3f0:	movw	r0, #33424	; 0x8290
   2f3f4:	movt	r0, #4
   2f3f8:	mov	r2, #126	; 0x7e
   2f3fc:	bl	125f4 <__assert_fail@plt>
   2f400:	movw	r1, #33392	; 0x8270
   2f404:	movt	r1, #4
   2f408:	ldr	r3, [pc, #12]	; 2f41c <__assert_fail@plt+0x1ce28>
   2f40c:	movw	r0, #33432	; 0x8298
   2f410:	movt	r0, #4
   2f414:	mov	r2, #127	; 0x7f
   2f418:	bl	125f4 <__assert_fail@plt>
   2f41c:	andeq	r8, r4, r4, ror #4
   2f420:	push	{r1, r2, r3}
   2f424:	strd	r4, [sp, #-20]!	; 0xffffffec
   2f428:	strd	r6, [sp, #8]
   2f42c:	str	lr, [sp, #16]
   2f430:	sub	sp, sp, #8
   2f434:	ldr	r1, [sp, #28]
   2f438:	add	r2, sp, #32
   2f43c:	str	r2, [sp, #4]
   2f440:	cmp	r1, #0
   2f444:	beq	2f520 <__assert_fail@plt+0x1cf2c>
   2f448:	movw	r3, #1030	; 0x406
   2f44c:	mov	r6, r0
   2f450:	cmp	r1, r3
   2f454:	beq	2f530 <__assert_fail@plt+0x1cf3c>
   2f458:	cmp	r1, #11
   2f45c:	beq	2f4d8 <__assert_fail@plt+0x1cee4>
   2f460:	ble	2f4b8 <__assert_fail@plt+0x1cec4>
   2f464:	movw	r2, #1031	; 0x407
   2f468:	cmp	r1, r2
   2f46c:	bgt	2f4f4 <__assert_fail@plt+0x1cf00>
   2f470:	cmp	r1, r3
   2f474:	bge	2f484 <__assert_fail@plt+0x1ce90>
   2f478:	movw	r3, #1025	; 0x401
   2f47c:	cmp	r1, r3
   2f480:	beq	2f4d8 <__assert_fail@plt+0x1cee4>
   2f484:	ldr	r3, [sp, #4]
   2f488:	mov	r0, r6
   2f48c:	ldr	r2, [r3]
   2f490:	bl	1242c <fcntl64@plt>
   2f494:	mov	r4, r0
   2f498:	mov	r0, r4
   2f49c:	add	sp, sp, #8
   2f4a0:	ldrd	r4, [sp]
   2f4a4:	ldrd	r6, [sp, #8]
   2f4a8:	ldr	lr, [sp, #16]
   2f4ac:	add	sp, sp, #20
   2f4b0:	add	sp, sp, #12
   2f4b4:	bx	lr
   2f4b8:	cmp	r1, #4
   2f4bc:	beq	2f484 <__assert_fail@plt+0x1ce90>
   2f4c0:	bgt	2f4e8 <__assert_fail@plt+0x1cef4>
   2f4c4:	cmp	r1, #2
   2f4c8:	beq	2f484 <__assert_fail@plt+0x1ce90>
   2f4cc:	bgt	2f4d8 <__assert_fail@plt+0x1cee4>
   2f4d0:	cmp	r1, #1
   2f4d4:	bne	2f484 <__assert_fail@plt+0x1ce90>
   2f4d8:	mov	r0, r6
   2f4dc:	bl	1242c <fcntl64@plt>
   2f4e0:	mov	r4, r0
   2f4e4:	b	2f498 <__assert_fail@plt+0x1cea4>
   2f4e8:	cmp	r1, #9
   2f4ec:	bne	2f484 <__assert_fail@plt+0x1ce90>
   2f4f0:	b	2f4d8 <__assert_fail@plt+0x1cee4>
   2f4f4:	movw	r3, #1033	; 0x409
   2f4f8:	cmp	r1, r3
   2f4fc:	beq	2f484 <__assert_fail@plt+0x1ce90>
   2f500:	blt	2f4d8 <__assert_fail@plt+0x1cee4>
   2f504:	movw	r3, #1034	; 0x40a
   2f508:	cmp	r1, r3
   2f50c:	bne	2f484 <__assert_fail@plt+0x1ce90>
   2f510:	mov	r0, r6
   2f514:	bl	1242c <fcntl64@plt>
   2f518:	mov	r4, r0
   2f51c:	b	2f498 <__assert_fail@plt+0x1cea4>
   2f520:	ldr	r2, [sp, #32]
   2f524:	bl	1242c <fcntl64@plt>
   2f528:	mov	r4, r0
   2f52c:	b	2f498 <__assert_fail@plt+0x1cea4>
   2f530:	movw	r5, #40504	; 0x9e38
   2f534:	movt	r5, #5
   2f538:	ldr	r7, [r2]
   2f53c:	add	r2, sp, #36	; 0x24
   2f540:	ldr	r3, [r5]
   2f544:	str	r2, [sp, #4]
   2f548:	mov	r2, r7
   2f54c:	cmp	r3, #0
   2f550:	blt	2f56c <__assert_fail@plt+0x1cf78>
   2f554:	bl	1242c <fcntl64@plt>
   2f558:	subs	r4, r0, #0
   2f55c:	blt	2f5d4 <__assert_fail@plt+0x1cfe0>
   2f560:	mov	r3, #1
   2f564:	str	r3, [r5]
   2f568:	b	2f498 <__assert_fail@plt+0x1cea4>
   2f56c:	mov	r1, #0
   2f570:	bl	1242c <fcntl64@plt>
   2f574:	subs	r4, r0, #0
   2f578:	blt	2f498 <__assert_fail@plt+0x1cea4>
   2f57c:	ldr	r3, [r5]
   2f580:	cmn	r3, #1
   2f584:	bne	2f498 <__assert_fail@plt+0x1cea4>
   2f588:	mov	r1, #1
   2f58c:	mov	r0, r4
   2f590:	bl	1242c <fcntl64@plt>
   2f594:	subs	r2, r0, #0
   2f598:	blt	2f5b4 <__assert_fail@plt+0x1cfc0>
   2f59c:	orr	r2, r2, #1
   2f5a0:	mov	r1, #2
   2f5a4:	mov	r0, r4
   2f5a8:	bl	1242c <fcntl64@plt>
   2f5ac:	cmn	r0, #1
   2f5b0:	bne	2f498 <__assert_fail@plt+0x1cea4>
   2f5b4:	bl	12348 <__errno_location@plt>
   2f5b8:	mov	r5, r0
   2f5bc:	mov	r0, r4
   2f5c0:	ldr	r6, [r5]
   2f5c4:	mvn	r4, #0
   2f5c8:	bl	125ac <close@plt>
   2f5cc:	str	r6, [r5]
   2f5d0:	b	2f498 <__assert_fail@plt+0x1cea4>
   2f5d4:	bl	12348 <__errno_location@plt>
   2f5d8:	ldr	r3, [r0]
   2f5dc:	cmp	r3, #22
   2f5e0:	bne	2f560 <__assert_fail@plt+0x1cf6c>
   2f5e4:	mov	r2, r7
   2f5e8:	mov	r0, r6
   2f5ec:	mov	r1, #0
   2f5f0:	bl	1242c <fcntl64@plt>
   2f5f4:	subs	r4, r0, #0
   2f5f8:	mvnge	r3, #0
   2f5fc:	strge	r3, [r5]
   2f600:	bge	2f588 <__assert_fail@plt+0x1cf94>
   2f604:	b	2f498 <__assert_fail@plt+0x1cea4>
   2f608:	str	r4, [sp, #-8]!
   2f60c:	subs	r4, r0, #0
   2f610:	str	lr, [sp, #4]
   2f614:	sub	sp, sp, #8
   2f618:	beq	2f634 <__assert_fail@plt+0x1d040>
   2f61c:	bl	12270 <__freading@plt>
   2f620:	cmp	r0, #0
   2f624:	beq	2f634 <__assert_fail@plt+0x1d040>
   2f628:	ldr	r3, [r4]
   2f62c:	tst	r3, #256	; 0x100
   2f630:	bne	2f64c <__assert_fail@plt+0x1d058>
   2f634:	mov	r0, r4
   2f638:	add	sp, sp, #8
   2f63c:	ldr	r4, [sp]
   2f640:	ldr	lr, [sp, #4]
   2f644:	add	sp, sp, #8
   2f648:	b	11f88 <fflush@plt>
   2f64c:	mov	r1, #1
   2f650:	mov	r2, #0
   2f654:	mov	r3, #0
   2f658:	mov	r0, r4
   2f65c:	str	r1, [sp]
   2f660:	bl	2f6c8 <__assert_fail@plt+0x1d0d4>
   2f664:	b	2f634 <__assert_fail@plt+0x1d040>
   2f668:	strd	r4, [sp, #-12]!
   2f66c:	mov	r5, r0
   2f670:	str	lr, [sp, #8]
   2f674:	sub	sp, sp, #12
   2f678:	bl	12348 <__errno_location@plt>
   2f67c:	mov	r4, r0
   2f680:	mov	r2, #0
   2f684:	ldr	r3, [r4]
   2f688:	mov	r0, r5
   2f68c:	str	r2, [r4]
   2f690:	str	r3, [sp]
   2f694:	str	r3, [sp, #4]
   2f698:	bl	11fc4 <free@plt>
   2f69c:	ldr	r3, [r4]
   2f6a0:	add	r2, sp, #8
   2f6a4:	clz	r3, r3
   2f6a8:	lsr	r3, r3, #5
   2f6ac:	add	r3, r2, r3, lsl #2
   2f6b0:	ldr	r3, [r3, #-8]
   2f6b4:	str	r3, [r4]
   2f6b8:	add	sp, sp, #12
   2f6bc:	ldrd	r4, [sp]
   2f6c0:	add	sp, sp, #8
   2f6c4:	pop	{pc}		; (ldr pc, [sp], #4)
   2f6c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2f6cc:	mov	r4, r0
   2f6d0:	ldr	ip, [r0, #4]
   2f6d4:	strd	r6, [sp, #8]
   2f6d8:	str	lr, [sp, #20]
   2f6dc:	ldr	lr, [r0, #8]
   2f6e0:	str	r8, [sp, #16]
   2f6e4:	sub	sp, sp, #8
   2f6e8:	ldr	r5, [sp, #32]
   2f6ec:	cmp	lr, ip
   2f6f0:	beq	2f718 <__assert_fail@plt+0x1d124>
   2f6f4:	mov	r0, r4
   2f6f8:	str	r5, [sp, #32]
   2f6fc:	add	sp, sp, #8
   2f700:	ldrd	r4, [sp]
   2f704:	ldrd	r6, [sp, #8]
   2f708:	ldr	r8, [sp, #16]
   2f70c:	ldr	lr, [sp, #20]
   2f710:	add	sp, sp, #24
   2f714:	b	12414 <fseeko64@plt>
   2f718:	ldr	ip, [r0, #16]
   2f71c:	ldr	lr, [r0, #20]
   2f720:	cmp	lr, ip
   2f724:	bne	2f6f4 <__assert_fail@plt+0x1d100>
   2f728:	ldr	r8, [r0, #36]	; 0x24
   2f72c:	cmp	r8, #0
   2f730:	bne	2f6f4 <__assert_fail@plt+0x1d100>
   2f734:	mov	r6, r2
   2f738:	mov	r7, r3
   2f73c:	bl	123c0 <fileno@plt>
   2f740:	mov	r2, r6
   2f744:	mov	r3, r7
   2f748:	str	r5, [sp]
   2f74c:	bl	12180 <lseek64@plt>
   2f750:	mvn	r3, #0
   2f754:	mvn	r2, #0
   2f758:	cmp	r1, r3
   2f75c:	cmpeq	r0, r2
   2f760:	beq	2f790 <__assert_fail@plt+0x1d19c>
   2f764:	ldr	r3, [r4]
   2f768:	strd	r0, [r4, #80]	; 0x50
   2f76c:	bic	r3, r3, #16
   2f770:	str	r3, [r4]
   2f774:	mov	r0, r8
   2f778:	add	sp, sp, #8
   2f77c:	ldrd	r4, [sp]
   2f780:	ldrd	r6, [sp, #8]
   2f784:	ldr	r8, [sp, #16]
   2f788:	add	sp, sp, #20
   2f78c:	pop	{pc}		; (ldr pc, [sp], #4)
   2f790:	mvn	r8, #0
   2f794:	b	2f774 <__assert_fail@plt+0x1d180>
   2f798:	strd	r4, [sp, #-8]!
   2f79c:	ldrd	r2, [r1, #8]
   2f7a0:	ldrd	r4, [r0, #8]
   2f7a4:	cmp	r5, r3
   2f7a8:	cmpeq	r4, r2
   2f7ac:	movne	r0, #0
   2f7b0:	bne	2f7cc <__assert_fail@plt+0x1d1d8>
   2f7b4:	ldrd	r4, [r0]
   2f7b8:	ldrd	r2, [r1]
   2f7bc:	cmp	r5, r3
   2f7c0:	cmpeq	r4, r2
   2f7c4:	moveq	r0, #1
   2f7c8:	movne	r0, #0
   2f7cc:	ldrd	r4, [sp]
   2f7d0:	add	sp, sp, #8
   2f7d4:	bx	lr
   2f7d8:	mov	r2, r1
   2f7dc:	mov	r3, #0
   2f7e0:	str	r4, [sp, #-8]!
   2f7e4:	ldrd	r0, [r0, #8]
   2f7e8:	str	lr, [sp, #4]
   2f7ec:	bl	42574 <__assert_fail@plt+0x2ff80>
   2f7f0:	ldr	r4, [sp]
   2f7f4:	add	sp, sp, #4
   2f7f8:	mov	r0, r2
   2f7fc:	pop	{pc}		; (ldr pc, [sp], #4)
   2f800:	mov	r2, r1
   2f804:	mov	r3, #0
   2f808:	str	r4, [sp, #-8]!
   2f80c:	ldrd	r0, [r0]
   2f810:	str	lr, [sp, #4]
   2f814:	bl	42574 <__assert_fail@plt+0x2ff80>
   2f818:	ldr	r4, [sp]
   2f81c:	add	sp, sp, #4
   2f820:	mov	r0, r2
   2f824:	pop	{pc}		; (ldr pc, [sp], #4)
   2f828:	strd	r4, [sp, #-8]!
   2f82c:	ldrd	r2, [r1]
   2f830:	ldrd	r4, [r0]
   2f834:	cmp	r5, r3
   2f838:	cmpeq	r4, r2
   2f83c:	ldrd	r4, [sp]
   2f840:	add	sp, sp, #8
   2f844:	moveq	r0, #1
   2f848:	movne	r0, #0
   2f84c:	bx	lr
   2f850:	ldr	r2, [r0]
   2f854:	ldr	r3, [r1]
   2f858:	ldrd	r0, [r2, #160]	; 0xa0
   2f85c:	ldrd	r2, [r3, #160]	; 0xa0
   2f860:	cmp	r1, r3
   2f864:	cmpeq	r0, r2
   2f868:	movhi	r0, #1
   2f86c:	movls	r0, #0
   2f870:	movcc	r3, #1
   2f874:	movcs	r3, #0
   2f878:	sub	r0, r0, r3
   2f87c:	bx	lr
   2f880:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2f884:	mov	r5, r2
   2f888:	mov	r4, r1
   2f88c:	ldr	r2, [r0, #40]	; 0x28
   2f890:	strd	r6, [sp, #8]
   2f894:	mov	r6, r0
   2f898:	str	r8, [sp, #16]
   2f89c:	str	lr, [sp, #20]
   2f8a0:	ldr	r0, [r0, #8]
   2f8a4:	cmp	r2, r5
   2f8a8:	ldr	r7, [r6, #44]	; 0x2c
   2f8ac:	bcs	2f8d4 <__assert_fail@plt+0x1d2e0>
   2f8b0:	add	r1, r5, #40	; 0x28
   2f8b4:	cmn	r1, #-1073741823	; 0xc0000001
   2f8b8:	str	r1, [r6, #40]	; 0x28
   2f8bc:	bhi	2f95c <__assert_fail@plt+0x1d368>
   2f8c0:	lsl	r1, r1, #2
   2f8c4:	bl	32624 <__assert_fail@plt+0x20030>
   2f8c8:	cmp	r0, #0
   2f8cc:	strne	r0, [r6, #8]
   2f8d0:	beq	2f958 <__assert_fail@plt+0x1d364>
   2f8d4:	cmp	r4, #0
   2f8d8:	movne	r2, r0
   2f8dc:	beq	2f8f0 <__assert_fail@plt+0x1d2fc>
   2f8e0:	str	r4, [r2], #4
   2f8e4:	ldr	r4, [r4, #8]
   2f8e8:	cmp	r4, #0
   2f8ec:	bne	2f8e0 <__assert_fail@plt+0x1d2ec>
   2f8f0:	mov	r3, r7
   2f8f4:	mov	r2, #4
   2f8f8:	mov	r1, r5
   2f8fc:	bl	12510 <qsort@plt>
   2f900:	ldr	lr, [r6, #8]
   2f904:	subs	r3, r5, #1
   2f908:	ldr	r0, [lr]
   2f90c:	moveq	r2, r0
   2f910:	beq	2f93c <__assert_fail@plt+0x1d348>
   2f914:	mov	ip, r0
   2f918:	mov	r2, lr
   2f91c:	b	2f924 <__assert_fail@plt+0x1d330>
   2f920:	ldr	ip, [r2]
   2f924:	subs	r3, r3, #1
   2f928:	ldr	r1, [r2, #4]!
   2f92c:	str	r1, [ip, #8]
   2f930:	bne	2f920 <__assert_fail@plt+0x1d32c>
   2f934:	add	r5, lr, r5, lsl #2
   2f938:	ldr	r2, [r5, #-4]
   2f93c:	mov	r3, #0
   2f940:	str	r3, [r2, #8]
   2f944:	ldrd	r4, [sp]
   2f948:	ldrd	r6, [sp, #8]
   2f94c:	ldr	r8, [sp, #16]
   2f950:	add	sp, sp, #20
   2f954:	pop	{pc}		; (ldr pc, [sp], #4)
   2f958:	ldr	r0, [r6, #8]
   2f95c:	bl	2f668 <__assert_fail@plt+0x1d074>
   2f960:	mov	r3, #0
   2f964:	mov	r0, r4
   2f968:	str	r3, [r6, #8]
   2f96c:	str	r3, [r6, #40]	; 0x28
   2f970:	b	2f944 <__assert_fail@plt+0x1d350>
   2f974:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2f978:	mov	r5, r2
   2f97c:	strd	r6, [sp, #8]
   2f980:	mov	r6, r0
   2f984:	add	r0, r2, #176	; 0xb0
   2f988:	bic	r0, r0, #7
   2f98c:	mov	r7, r1
   2f990:	str	r8, [sp, #16]
   2f994:	str	lr, [sp, #20]
   2f998:	bl	31b54 <__assert_fail@plt+0x1f560>
   2f99c:	subs	r4, r0, #0
   2f9a0:	beq	2f9ec <__assert_fail@plt+0x1d3f8>
   2f9a4:	mov	r1, r7
   2f9a8:	mov	r2, r5
   2f9ac:	add	r0, r4, #168	; 0xa8
   2f9b0:	bl	12024 <memcpy@plt>
   2f9b4:	ldr	r1, [r6, #24]
   2f9b8:	mov	r3, #0
   2f9bc:	add	r0, r4, r5
   2f9c0:	mov	r2, #3
   2f9c4:	strb	r3, [r0, #168]	; 0xa8
   2f9c8:	str	r3, [r4, #12]
   2f9cc:	str	r3, [r4, #16]
   2f9d0:	str	r3, [r4, #20]
   2f9d4:	str	r1, [r4, #28]
   2f9d8:	str	r3, [r4, #32]
   2f9dc:	str	r6, [r4, #44]	; 0x2c
   2f9e0:	str	r5, [r4, #52]	; 0x34
   2f9e4:	strh	r3, [r4, #58]	; 0x3a
   2f9e8:	strh	r2, [r4, #60]	; 0x3c
   2f9ec:	mov	r0, r4
   2f9f0:	ldrd	r4, [sp]
   2f9f4:	ldrd	r6, [sp, #8]
   2f9f8:	ldr	r8, [sp, #16]
   2f9fc:	add	sp, sp, #20
   2fa00:	pop	{pc}		; (ldr pc, [sp], #4)
   2fa04:	strd	r4, [sp, #-16]!
   2fa08:	subs	r4, r0, #0
   2fa0c:	str	r6, [sp, #8]
   2fa10:	str	lr, [sp, #12]
   2fa14:	beq	2fa3c <__assert_fail@plt+0x1d448>
   2fa18:	ldr	r5, [r4, #8]
   2fa1c:	ldr	r3, [r4, #12]
   2fa20:	subs	r0, r3, #0
   2fa24:	beq	2fa2c <__assert_fail@plt+0x1d438>
   2fa28:	bl	125c4 <closedir@plt>
   2fa2c:	mov	r0, r4
   2fa30:	bl	2f668 <__assert_fail@plt+0x1d074>
   2fa34:	subs	r4, r5, #0
   2fa38:	bne	2fa18 <__assert_fail@plt+0x1d424>
   2fa3c:	ldrd	r4, [sp]
   2fa40:	ldr	r6, [sp, #8]
   2fa44:	add	sp, sp, #12
   2fa48:	pop	{pc}		; (ldr pc, [sp], #4)
   2fa4c:	str	r4, [sp, #-8]!
   2fa50:	mov	r4, r0
   2fa54:	str	lr, [sp, #4]
   2fa58:	b	2fa68 <__assert_fail@plt+0x1d474>
   2fa5c:	bl	41bd0 <__assert_fail@plt+0x2f5dc>
   2fa60:	cmp	r0, #0
   2fa64:	bge	2fa88 <__assert_fail@plt+0x1d494>
   2fa68:	mov	r0, r4
   2fa6c:	bl	41b80 <__assert_fail@plt+0x2f58c>
   2fa70:	cmp	r0, #0
   2fa74:	mov	r0, r4
   2fa78:	beq	2fa5c <__assert_fail@plt+0x1d468>
   2fa7c:	ldr	r4, [sp]
   2fa80:	add	sp, sp, #4
   2fa84:	pop	{pc}		; (ldr pc, [sp], #4)
   2fa88:	bl	125ac <close@plt>
   2fa8c:	b	2fa68 <__assert_fail@plt+0x1d474>
   2fa90:	strd	r4, [sp, #-20]!	; 0xffffffec
   2fa94:	ldr	r5, [r0, #44]	; 0x2c
   2fa98:	ldr	r3, [r5, #48]	; 0x30
   2fa9c:	strd	r6, [sp, #8]
   2faa0:	str	lr, [sp, #16]
   2faa4:	sub	sp, sp, #100	; 0x64
   2faa8:	tst	r3, #512	; 0x200
   2faac:	beq	2fb3c <__assert_fail@plt+0x1d548>
   2fab0:	ldr	r4, [r5, #52]	; 0x34
   2fab4:	mov	r7, r1
   2fab8:	mov	r6, r0
   2fabc:	cmp	r4, #0
   2fac0:	beq	2fae8 <__assert_fail@plt+0x1d4f4>
   2fac4:	ldrd	r2, [r6, #64]	; 0x40
   2fac8:	add	r1, sp, #8
   2facc:	mov	r0, r4
   2fad0:	strd	r2, [sp, #8]
   2fad4:	bl	22f08 <__assert_fail@plt+0x10914>
   2fad8:	cmp	r0, #0
   2fadc:	beq	2fb20 <__assert_fail@plt+0x1d52c>
   2fae0:	ldr	r0, [r0, #8]
   2fae4:	b	2fb40 <__assert_fail@plt+0x1d54c>
   2fae8:	movw	r0, #63080	; 0xf668
   2faec:	movt	r0, #2
   2faf0:	mov	r1, r4
   2faf4:	movw	r3, #63528	; 0xf828
   2faf8:	movt	r3, #2
   2fafc:	movw	r2, #63488	; 0xf800
   2fb00:	movt	r2, #2
   2fb04:	str	r0, [sp]
   2fb08:	mov	r0, #13
   2fb0c:	bl	23228 <__assert_fail@plt+0x10c34>
   2fb10:	cmp	r0, #0
   2fb14:	mov	r4, r0
   2fb18:	str	r0, [r5, #52]	; 0x34
   2fb1c:	bne	2fac4 <__assert_fail@plt+0x1d4d0>
   2fb20:	cmp	r7, #0
   2fb24:	blt	2fb3c <__assert_fail@plt+0x1d548>
   2fb28:	mov	r0, r7
   2fb2c:	add	r1, sp, #8
   2fb30:	bl	11ebc <fstatfs64@plt>
   2fb34:	cmp	r0, #0
   2fb38:	beq	2fb54 <__assert_fail@plt+0x1d560>
   2fb3c:	mov	r0, #0
   2fb40:	add	sp, sp, #100	; 0x64
   2fb44:	ldrd	r4, [sp]
   2fb48:	ldrd	r6, [sp, #8]
   2fb4c:	add	sp, sp, #16
   2fb50:	pop	{pc}		; (ldr pc, [sp], #4)
   2fb54:	cmp	r4, #0
   2fb58:	beq	2fb98 <__assert_fail@plt+0x1d5a4>
   2fb5c:	mov	r0, #16
   2fb60:	bl	31b54 <__assert_fail@plt+0x1f560>
   2fb64:	subs	r5, r0, #0
   2fb68:	beq	2fb98 <__assert_fail@plt+0x1d5a4>
   2fb6c:	ldr	ip, [sp, #8]
   2fb70:	mov	r0, r4
   2fb74:	mov	r1, r5
   2fb78:	ldrd	r2, [r6, #64]	; 0x40
   2fb7c:	strd	r2, [r5]
   2fb80:	str	ip, [r5, #8]
   2fb84:	bl	23880 <__assert_fail@plt+0x1128c>
   2fb88:	cmp	r0, #0
   2fb8c:	beq	2fba0 <__assert_fail@plt+0x1d5ac>
   2fb90:	cmp	r5, r0
   2fb94:	bne	2fbac <__assert_fail@plt+0x1d5b8>
   2fb98:	ldr	r0, [sp, #8]
   2fb9c:	b	2fb40 <__assert_fail@plt+0x1d54c>
   2fba0:	mov	r0, r5
   2fba4:	bl	2f668 <__assert_fail@plt+0x1d074>
   2fba8:	b	2fb98 <__assert_fail@plt+0x1d5a4>
   2fbac:	bl	125a0 <abort@plt>
   2fbb0:	strd	r4, [sp, #-16]!
   2fbb4:	mov	r5, r1
   2fbb8:	ldr	r1, [r0, #32]
   2fbbc:	str	r6, [sp, #8]
   2fbc0:	str	lr, [sp, #12]
   2fbc4:	sub	r3, r1, r5
   2fbc8:	cmn	r1, #100	; 0x64
   2fbcc:	clz	r3, r3
   2fbd0:	lsr	r3, r3, #5
   2fbd4:	moveq	r3, #0
   2fbd8:	cmp	r3, #0
   2fbdc:	bne	2fc3c <__assert_fail@plt+0x1d648>
   2fbe0:	cmp	r2, #0
   2fbe4:	mov	r4, r0
   2fbe8:	bne	2fc18 <__assert_fail@plt+0x1d624>
   2fbec:	ldr	r3, [r0, #48]	; 0x30
   2fbf0:	mvn	r2, r1
   2fbf4:	lsr	r2, r2, #31
   2fbf8:	eor	r3, r3, #4
   2fbfc:	ands	r3, r2, r3, lsr #2
   2fc00:	bne	2fc30 <__assert_fail@plt+0x1d63c>
   2fc04:	ldr	r6, [sp, #8]
   2fc08:	str	r5, [r4, #32]
   2fc0c:	ldrd	r4, [sp]
   2fc10:	add	sp, sp, #12
   2fc14:	pop	{pc}		; (ldr pc, [sp], #4)
   2fc18:	add	r0, r0, #60	; 0x3c
   2fc1c:	bl	41b88 <__assert_fail@plt+0x2f594>
   2fc20:	cmp	r0, #0
   2fc24:	blt	2fc04 <__assert_fail@plt+0x1d610>
   2fc28:	bl	125ac <close@plt>
   2fc2c:	b	2fc04 <__assert_fail@plt+0x1d610>
   2fc30:	mov	r0, r1
   2fc34:	bl	125ac <close@plt>
   2fc38:	b	2fc04 <__assert_fail@plt+0x1d610>
   2fc3c:	bl	125a0 <abort@plt>
   2fc40:	ldr	r3, [r0, #48]	; 0x30
   2fc44:	strd	r4, [sp, #-16]!
   2fc48:	mov	r4, r0
   2fc4c:	str	r6, [sp, #8]
   2fc50:	str	lr, [sp, #12]
   2fc54:	ands	r5, r3, #4
   2fc58:	movne	r5, #0
   2fc5c:	bne	2fc74 <__assert_fail@plt+0x1d680>
   2fc60:	tst	r3, #512	; 0x200
   2fc64:	beq	2fc90 <__assert_fail@plt+0x1d69c>
   2fc68:	mov	r2, #1
   2fc6c:	mvn	r1, #99	; 0x63
   2fc70:	bl	2fbb0 <__assert_fail@plt+0x1d5bc>
   2fc74:	add	r0, r4, #60	; 0x3c
   2fc78:	bl	2fa4c <__assert_fail@plt+0x1d458>
   2fc7c:	mov	r0, r5
   2fc80:	ldrd	r4, [sp]
   2fc84:	ldr	r6, [sp, #8]
   2fc88:	add	sp, sp, #12
   2fc8c:	pop	{pc}		; (ldr pc, [sp], #4)
   2fc90:	ldr	r0, [r0, #28]
   2fc94:	bl	124f8 <fchdir@plt>
   2fc98:	adds	r5, r0, #0
   2fc9c:	movne	r5, #1
   2fca0:	b	2fc74 <__assert_fail@plt+0x1d680>
   2fca4:	mov	ip, r1
   2fca8:	ldr	r1, [r1]
   2fcac:	strd	r4, [sp, #-16]!
   2fcb0:	mov	r4, r0
   2fcb4:	ldr	r0, [r0]
   2fcb8:	str	r6, [sp, #8]
   2fcbc:	str	lr, [sp, #12]
   2fcc0:	add	r3, r1, #256	; 0x100
   2fcc4:	add	r2, r3, r2
   2fcc8:	cmp	r1, r2
   2fccc:	bhi	2fd00 <__assert_fail@plt+0x1d70c>
   2fcd0:	mov	r1, r2
   2fcd4:	str	r2, [ip]
   2fcd8:	bl	32624 <__assert_fail@plt+0x20030>
   2fcdc:	subs	r5, r0, #0
   2fce0:	movne	r3, #1
   2fce4:	strne	r5, [r4]
   2fce8:	beq	2fd20 <__assert_fail@plt+0x1d72c>
   2fcec:	ldrd	r4, [sp]
   2fcf0:	mov	r0, r3
   2fcf4:	ldr	r6, [sp, #8]
   2fcf8:	add	sp, sp, #12
   2fcfc:	pop	{pc}		; (ldr pc, [sp], #4)
   2fd00:	mov	r5, #0
   2fd04:	bl	2f668 <__assert_fail@plt+0x1d074>
   2fd08:	str	r5, [r4]
   2fd0c:	bl	12348 <__errno_location@plt>
   2fd10:	mov	r2, #36	; 0x24
   2fd14:	mov	r3, r5
   2fd18:	str	r2, [r0]
   2fd1c:	b	2fcec <__assert_fail@plt+0x1d6f8>
   2fd20:	ldr	r0, [r4]
   2fd24:	bl	2f668 <__assert_fail@plt+0x1d074>
   2fd28:	mov	r3, r5
   2fd2c:	str	r5, [r4]
   2fd30:	b	2fcec <__assert_fail@plt+0x1d6f8>
   2fd34:	ldr	ip, [r2, #48]	; 0x30
   2fd38:	strd	r4, [sp, #-16]!
   2fd3c:	mov	r4, r2
   2fd40:	add	r5, r2, #64	; 0x40
   2fd44:	ldr	r2, [r2, #24]
   2fd48:	str	r6, [sp, #8]
   2fd4c:	str	lr, [sp, #12]
   2fd50:	sub	sp, sp, #8
   2fd54:	cmp	ip, #0
   2fd58:	bne	2fdd0 <__assert_fail@plt+0x1d7dc>
   2fd5c:	tst	r1, #1
   2fd60:	beq	2fdd0 <__assert_fail@plt+0x1d7dc>
   2fd64:	mov	r1, r2
   2fd68:	mov	r0, #3
   2fd6c:	mov	r2, r5
   2fd70:	bl	12558 <__xstat64@plt>
   2fd74:	cmp	r0, #0
   2fd78:	beq	2fdfc <__assert_fail@plt+0x1d808>
   2fd7c:	bl	12348 <__errno_location@plt>
   2fd80:	ldr	r3, [r0]
   2fd84:	mov	r6, r0
   2fd88:	cmp	r3, #2
   2fd8c:	bne	2fdb4 <__assert_fail@plt+0x1d7c0>
   2fd90:	mov	r2, r5
   2fd94:	mov	r0, #3
   2fd98:	ldr	r1, [r4, #24]
   2fd9c:	bl	125b8 <__lxstat64@plt>
   2fda0:	subs	r3, r0, #0
   2fda4:	moveq	r0, #13
   2fda8:	streq	r3, [r6]
   2fdac:	beq	2fe20 <__assert_fail@plt+0x1d82c>
   2fdb0:	ldr	r3, [r6]
   2fdb4:	mov	r0, r5
   2fdb8:	mov	r2, #104	; 0x68
   2fdbc:	str	r3, [r4, #32]
   2fdc0:	mov	r1, #0
   2fdc4:	bl	12378 <memset@plt>
   2fdc8:	mov	r0, #10
   2fdcc:	b	2fe20 <__assert_fail@plt+0x1d82c>
   2fdd0:	ubfx	ip, r1, #1, #1
   2fdd4:	orrs	r3, r3, ip
   2fdd8:	bne	2fd64 <__assert_fail@plt+0x1d770>
   2fddc:	mov	ip, #256	; 0x100
   2fde0:	mov	r1, r0
   2fde4:	mov	r3, r5
   2fde8:	mov	r0, #3
   2fdec:	str	ip, [sp]
   2fdf0:	bl	1212c <__fxstatat64@plt>
   2fdf4:	cmp	r0, #0
   2fdf8:	bne	2fe7c <__assert_fail@plt+0x1d888>
   2fdfc:	ldr	r3, [r4, #80]	; 0x50
   2fe00:	and	r3, r3, #61440	; 0xf000
   2fe04:	cmp	r3, #16384	; 0x4000
   2fe08:	beq	2fe34 <__assert_fail@plt+0x1d840>
   2fe0c:	cmp	r3, #40960	; 0xa000
   2fe10:	beq	2fe88 <__assert_fail@plt+0x1d894>
   2fe14:	cmp	r3, #32768	; 0x8000
   2fe18:	movne	r0, #3
   2fe1c:	moveq	r0, #8
   2fe20:	add	sp, sp, #8
   2fe24:	ldrd	r4, [sp]
   2fe28:	ldr	r6, [sp, #8]
   2fe2c:	add	sp, sp, #12
   2fe30:	pop	{pc}		; (ldr pc, [sp], #4)
   2fe34:	ldrb	r3, [r4, #168]	; 0xa8
   2fe38:	cmp	r3, #46	; 0x2e
   2fe3c:	bne	2fe60 <__assert_fail@plt+0x1d86c>
   2fe40:	ldrb	r3, [r4, #169]	; 0xa9
   2fe44:	cmp	r3, #0
   2fe48:	beq	2fe68 <__assert_fail@plt+0x1d874>
   2fe4c:	ldr	r3, [r4, #168]	; 0xa8
   2fe50:	bic	r3, r3, #-16777216	; 0xff000000
   2fe54:	bic	r3, r3, #255	; 0xff
   2fe58:	cmp	r3, #11776	; 0x2e00
   2fe5c:	beq	2fe68 <__assert_fail@plt+0x1d874>
   2fe60:	mov	r0, #1
   2fe64:	b	2fe20 <__assert_fail@plt+0x1d82c>
   2fe68:	ldr	r3, [r4, #48]	; 0x30
   2fe6c:	cmp	r3, #0
   2fe70:	moveq	r0, #1
   2fe74:	movne	r0, #5
   2fe78:	b	2fe20 <__assert_fail@plt+0x1d82c>
   2fe7c:	bl	12348 <__errno_location@plt>
   2fe80:	ldr	r3, [r0]
   2fe84:	b	2fdb4 <__assert_fail@plt+0x1d7c0>
   2fe88:	mov	r0, #12
   2fe8c:	b	2fe20 <__assert_fail@plt+0x1d82c>
   2fe90:	movw	r3, #258	; 0x102
   2fe94:	str	r4, [sp, #-8]!
   2fe98:	mov	r4, r1
   2fe9c:	tst	r0, r3
   2fea0:	str	lr, [sp, #4]
   2fea4:	sub	sp, sp, #8
   2fea8:	beq	2fef4 <__assert_fail@plt+0x1d900>
   2feac:	movw	r1, #63080	; 0xf668
   2feb0:	movt	r1, #2
   2feb4:	movw	r3, #63384	; 0xf798
   2feb8:	movt	r3, #2
   2febc:	movw	r2, #63448	; 0xf7d8
   2fec0:	movt	r2, #2
   2fec4:	str	r1, [sp]
   2fec8:	mov	r0, #31
   2fecc:	mov	r1, #0
   2fed0:	bl	23228 <__assert_fail@plt+0x10c34>
   2fed4:	mov	r3, r0
   2fed8:	adds	r0, r0, #0
   2fedc:	movne	r0, #1
   2fee0:	str	r3, [r4]
   2fee4:	add	sp, sp, #8
   2fee8:	ldr	r4, [sp]
   2feec:	add	sp, sp, #4
   2fef0:	pop	{pc}		; (ldr pc, [sp], #4)
   2fef4:	mov	r0, #32
   2fef8:	bl	31b54 <__assert_fail@plt+0x1f560>
   2fefc:	cmp	r0, #0
   2ff00:	str	r0, [r4]
   2ff04:	beq	2fee4 <__assert_fail@plt+0x1d8f0>
   2ff08:	bl	418cc <__assert_fail@plt+0x2f2d8>
   2ff0c:	mov	r0, #1
   2ff10:	add	sp, sp, #8
   2ff14:	ldr	r4, [sp]
   2ff18:	add	sp, sp, #4
   2ff1c:	pop	{pc}		; (ldr pc, [sp], #4)
   2ff20:	mov	r3, r2
   2ff24:	lsl	r2, r1, #11
   2ff28:	tst	r1, #512	; 0x200
   2ff2c:	and	r2, r2, #32768	; 0x8000
   2ff30:	orr	r2, r2, #540672	; 0x84000
   2ff34:	orr	r2, r2, #2304	; 0x900
   2ff38:	beq	2ff44 <__assert_fail@plt+0x1d950>
   2ff3c:	mov	r1, r3
   2ff40:	b	268c8 <__assert_fail@plt+0x142d4>
   2ff44:	mov	r1, r2
   2ff48:	mov	r0, r3
   2ff4c:	b	22600 <__assert_fail@plt+0x1000c>
   2ff50:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2ff54:	mov	r5, r0
   2ff58:	mov	r4, r2
   2ff5c:	strd	r6, [sp, #8]
   2ff60:	mov	r7, r1
   2ff64:	strd	r8, [sp, #16]
   2ff68:	ldr	r9, [r0, #48]	; 0x30
   2ff6c:	str	sl, [sp, #24]
   2ff70:	subs	sl, r3, #0
   2ff74:	str	lr, [sp, #28]
   2ff78:	sub	sp, sp, #104	; 0x68
   2ff7c:	and	r8, r9, #4
   2ff80:	beq	30058 <__assert_fail@plt+0x1da64>
   2ff84:	movw	r1, #33540	; 0x8304
   2ff88:	movt	r1, #4
   2ff8c:	mov	r0, sl
   2ff90:	bl	11f40 <strcmp@plt>
   2ff94:	cmp	r0, #0
   2ff98:	bne	30058 <__assert_fail@plt+0x1da64>
   2ff9c:	cmp	r8, #0
   2ffa0:	bne	30098 <__assert_fail@plt+0x1daa4>
   2ffa4:	cmp	r4, #0
   2ffa8:	bge	30158 <__assert_fail@plt+0x1db64>
   2ffac:	tst	r9, #512	; 0x200
   2ffb0:	bne	300dc <__assert_fail@plt+0x1dae8>
   2ffb4:	mov	r8, #1
   2ffb8:	mov	r1, r9
   2ffbc:	mov	r2, sl
   2ffc0:	ldr	r0, [r5, #32]
   2ffc4:	bl	2ff20 <__assert_fail@plt+0x1d92c>
   2ffc8:	subs	r6, r0, #0
   2ffcc:	blt	30150 <__assert_fail@plt+0x1db5c>
   2ffd0:	ldr	r9, [r5, #48]	; 0x30
   2ffd4:	tst	r9, #2
   2ffd8:	beq	30074 <__assert_fail@plt+0x1da80>
   2ffdc:	mov	r2, sp
   2ffe0:	mov	r1, r6
   2ffe4:	mov	r0, #3
   2ffe8:	bl	1215c <__fxstat64@plt>
   2ffec:	cmp	r0, #0
   2fff0:	bne	300d4 <__assert_fail@plt+0x1dae0>
   2fff4:	ldrd	r2, [sp]
   2fff8:	ldrd	r0, [r7, #64]	; 0x40
   2fffc:	cmp	r1, r3
   30000:	cmpeq	r0, r2
   30004:	bne	300c8 <__assert_fail@plt+0x1dad4>
   30008:	ldrd	r2, [sp, #96]	; 0x60
   3000c:	ldrd	r0, [r7, #160]	; 0xa0
   30010:	cmp	r1, r3
   30014:	cmpeq	r0, r2
   30018:	bne	300c8 <__assert_fail@plt+0x1dad4>
   3001c:	ldr	r9, [r5, #48]	; 0x30
   30020:	tst	r9, #512	; 0x200
   30024:	bne	30118 <__assert_fail@plt+0x1db24>
   30028:	mov	r0, r6
   3002c:	bl	124f8 <fchdir@plt>
   30030:	mov	r9, r0
   30034:	cmp	r4, #0
   30038:	bge	300a8 <__assert_fail@plt+0x1dab4>
   3003c:	bl	12348 <__errno_location@plt>
   30040:	mov	r4, r0
   30044:	mov	r0, r6
   30048:	ldr	r5, [r4]
   3004c:	bl	125ac <close@plt>
   30050:	str	r5, [r4]
   30054:	b	300a8 <__assert_fail@plt+0x1dab4>
   30058:	cmp	r8, #0
   3005c:	bne	30098 <__assert_fail@plt+0x1daa4>
   30060:	cmp	r4, #0
   30064:	movge	r6, r4
   30068:	blt	2ffb8 <__assert_fail@plt+0x1d9c4>
   3006c:	tst	r9, #2
   30070:	bne	2ffdc <__assert_fail@plt+0x1d9e8>
   30074:	cmp	sl, #0
   30078:	beq	30020 <__assert_fail@plt+0x1da2c>
   3007c:	mov	r0, sl
   30080:	movw	r1, #33540	; 0x8304
   30084:	movt	r1, #4
   30088:	bl	11f40 <strcmp@plt>
   3008c:	cmp	r0, #0
   30090:	bne	30020 <__assert_fail@plt+0x1da2c>
   30094:	b	2ffdc <__assert_fail@plt+0x1d9e8>
   30098:	mvn	r3, r4
   3009c:	lsr	r3, r3, #31
   300a0:	ands	r9, r3, r9, lsr #9
   300a4:	bne	30134 <__assert_fail@plt+0x1db40>
   300a8:	mov	r0, r9
   300ac:	add	sp, sp, #104	; 0x68
   300b0:	ldrd	r4, [sp]
   300b4:	ldrd	r6, [sp, #8]
   300b8:	ldrd	r8, [sp, #16]
   300bc:	ldr	sl, [sp, #24]
   300c0:	add	sp, sp, #28
   300c4:	pop	{pc}		; (ldr pc, [sp], #4)
   300c8:	bl	12348 <__errno_location@plt>
   300cc:	mov	r3, #2
   300d0:	str	r3, [r0]
   300d4:	mvn	r9, #0
   300d8:	b	30034 <__assert_fail@plt+0x1da40>
   300dc:	add	r6, r5, #60	; 0x3c
   300e0:	mov	r0, r6
   300e4:	bl	41b80 <__assert_fail@plt+0x2f58c>
   300e8:	subs	r8, r0, #0
   300ec:	bne	2ffb8 <__assert_fail@plt+0x1d9c4>
   300f0:	mov	r0, r6
   300f4:	bl	41bd0 <__assert_fail@plt+0x2f5dc>
   300f8:	subs	r6, r0, #0
   300fc:	blt	30144 <__assert_fail@plt+0x1db50>
   30100:	ldr	r9, [r5, #48]	; 0x30
   30104:	mov	r4, r6
   30108:	mov	r8, #1
   3010c:	tst	r9, #2
   30110:	beq	30020 <__assert_fail@plt+0x1da2c>
   30114:	b	2ffdc <__assert_fail@plt+0x1d9e8>
   30118:	eor	r2, r8, #1
   3011c:	mov	r1, r6
   30120:	uxtb	r2, r2
   30124:	mov	r0, r5
   30128:	bl	2fbb0 <__assert_fail@plt+0x1d5bc>
   3012c:	mov	r9, #0
   30130:	b	300a8 <__assert_fail@plt+0x1dab4>
   30134:	mov	r0, r4
   30138:	mov	r9, #0
   3013c:	bl	125ac <close@plt>
   30140:	b	300a8 <__assert_fail@plt+0x1dab4>
   30144:	mov	r8, #1
   30148:	ldr	r9, [r5, #48]	; 0x30
   3014c:	b	2ffb8 <__assert_fail@plt+0x1d9c4>
   30150:	mvn	r9, #0
   30154:	b	300a8 <__assert_fail@plt+0x1dab4>
   30158:	tst	r9, #2
   3015c:	mov	r6, r4
   30160:	mov	r8, #1
   30164:	beq	3007c <__assert_fail@plt+0x1da88>
   30168:	b	2ffdc <__assert_fail@plt+0x1d9e8>
   3016c:	movw	r3, #258	; 0x102
   30170:	strd	r4, [sp, #-32]!	; 0xffffffe0
   30174:	tst	r0, r3
   30178:	strd	r6, [sp, #8]
   3017c:	strd	r8, [sp, #16]
   30180:	mov	r8, r2
   30184:	str	sl, [sp, #24]
   30188:	mov	sl, r1
   3018c:	str	lr, [sp, #28]
   30190:	beq	30214 <__assert_fail@plt+0x1dc20>
   30194:	mov	r0, #24
   30198:	bl	31b54 <__assert_fail@plt+0x1f560>
   3019c:	subs	r9, r0, #0
   301a0:	beq	30238 <__assert_fail@plt+0x1dc44>
   301a4:	ldrd	r6, [r8, #64]	; 0x40
   301a8:	mov	r1, r9
   301ac:	ldrd	r4, [r8, #160]	; 0xa0
   301b0:	ldr	r0, [sl]
   301b4:	strd	r6, [r9]
   301b8:	str	r8, [r9, #16]
   301bc:	strd	r4, [r9, #8]
   301c0:	bl	23880 <__assert_fail@plt+0x1128c>
   301c4:	cmp	r9, r0
   301c8:	mov	r4, r0
   301cc:	beq	301f8 <__assert_fail@plt+0x1dc04>
   301d0:	mov	r0, r9
   301d4:	bl	2f668 <__assert_fail@plt+0x1d074>
   301d8:	cmp	r4, #0
   301dc:	beq	30238 <__assert_fail@plt+0x1dc44>
   301e0:	ldr	r3, [r4, #16]
   301e4:	mov	r2, #2
   301e8:	mov	r0, #1
   301ec:	str	r3, [r8]
   301f0:	strh	r2, [r8, #56]	; 0x38
   301f4:	b	301fc <__assert_fail@plt+0x1dc08>
   301f8:	mov	r0, #1
   301fc:	ldrd	r4, [sp]
   30200:	ldrd	r6, [sp, #8]
   30204:	ldrd	r8, [sp, #16]
   30208:	ldr	sl, [sp, #24]
   3020c:	add	sp, sp, #28
   30210:	pop	{pc}		; (ldr pc, [sp], #4)
   30214:	add	r1, r2, #64	; 0x40
   30218:	ldr	r0, [sl]
   3021c:	bl	418f4 <__assert_fail@plt+0x2f300>
   30220:	cmp	r0, #0
   30224:	beq	301f8 <__assert_fail@plt+0x1dc04>
   30228:	mov	r3, #2
   3022c:	str	r8, [r8]
   30230:	strh	r3, [r8, #56]	; 0x38
   30234:	b	301fc <__assert_fail@plt+0x1dc08>
   30238:	mov	r0, #0
   3023c:	b	301fc <__assert_fail@plt+0x1dc08>
   30240:	movw	r3, #258	; 0x102
   30244:	mov	ip, r1
   30248:	strd	r4, [sp, #-12]!
   3024c:	tst	r0, r3
   30250:	str	lr, [sp, #8]
   30254:	sub	sp, sp, #28
   30258:	bne	302a8 <__assert_fail@plt+0x1dcb4>
   3025c:	ldr	r3, [r2, #4]
   30260:	cmp	r3, #0
   30264:	beq	30298 <__assert_fail@plt+0x1dca4>
   30268:	ldr	r1, [r3, #48]	; 0x30
   3026c:	cmp	r1, #0
   30270:	blt	30298 <__assert_fail@plt+0x1dca4>
   30274:	ldr	ip, [ip]
   30278:	ldrd	r0, [ip, #16]
   3027c:	orrs	r1, r0, r1
   30280:	beq	30308 <__assert_fail@plt+0x1dd14>
   30284:	ldrd	r4, [ip]
   30288:	ldrd	r0, [r2, #160]	; 0xa0
   3028c:	cmp	r5, r1
   30290:	cmpeq	r4, r0
   30294:	beq	302e0 <__assert_fail@plt+0x1dcec>
   30298:	add	sp, sp, #28
   3029c:	ldrd	r4, [sp]
   302a0:	add	sp, sp, #8
   302a4:	pop	{pc}		; (ldr pc, [sp], #4)
   302a8:	ldrd	r4, [r2, #64]	; 0x40
   302ac:	mov	r1, sp
   302b0:	ldrd	r2, [r2, #160]	; 0xa0
   302b4:	ldr	r0, [ip]
   302b8:	strd	r4, [sp]
   302bc:	strd	r2, [sp, #8]
   302c0:	bl	238c0 <__assert_fail@plt+0x112cc>
   302c4:	cmp	r0, #0
   302c8:	beq	30308 <__assert_fail@plt+0x1dd14>
   302cc:	bl	2f668 <__assert_fail@plt+0x1d074>
   302d0:	add	sp, sp, #28
   302d4:	ldrd	r4, [sp]
   302d8:	add	sp, sp, #8
   302dc:	pop	{pc}		; (ldr pc, [sp], #4)
   302e0:	ldrd	r0, [ip, #8]
   302e4:	ldrd	r4, [r2, #64]	; 0x40
   302e8:	cmp	r1, r5
   302ec:	cmpeq	r0, r4
   302f0:	bne	30298 <__assert_fail@plt+0x1dca4>
   302f4:	ldrd	r0, [r3, #64]	; 0x40
   302f8:	ldrd	r2, [r3, #160]	; 0xa0
   302fc:	strd	r2, [ip]
   30300:	strd	r0, [ip, #8]
   30304:	b	30298 <__assert_fail@plt+0x1dca4>
   30308:	bl	125a0 <abort@plt>
   3030c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   30310:	mov	r5, r0
   30314:	strd	r6, [sp, #8]
   30318:	strd	r8, [sp, #16]
   3031c:	ldr	r9, [r0]
   30320:	strd	sl, [sp, #24]
   30324:	str	lr, [sp, #32]
   30328:	sub	sp, sp, #68	; 0x44
   3032c:	str	r1, [sp, #32]
   30330:	ldr	r0, [r9, #12]
   30334:	cmp	r0, #0
   30338:	str	r0, [sp, #40]	; 0x28
   3033c:	beq	3067c <__assert_fail@plt+0x1e088>
   30340:	bl	124ec <dirfd@plt>
   30344:	cmp	r0, #0
   30348:	str	r0, [sp, #60]	; 0x3c
   3034c:	blt	30bc0 <__assert_fail@plt+0x1e5cc>
   30350:	ldr	r3, [r5, #44]	; 0x2c
   30354:	cmp	r3, #0
   30358:	beq	30aa4 <__assert_fail@plt+0x1e4b0>
   3035c:	ldr	r3, [r5, #48]	; 0x30
   30360:	mvn	r2, #0
   30364:	str	r2, [sp, #16]
   30368:	mov	r2, #1
   3036c:	str	r2, [sp, #52]	; 0x34
   30370:	ldr	r2, [r9, #28]
   30374:	ldr	r1, [r9, #40]	; 0x28
   30378:	sub	r0, r1, #1
   3037c:	str	r1, [sp]
   30380:	ldrb	r2, [r2, r0]
   30384:	str	r0, [sp, #28]
   30388:	cmp	r2, #47	; 0x2f
   3038c:	beq	3039c <__assert_fail@plt+0x1dda8>
   30390:	add	r2, r1, #1
   30394:	str	r2, [sp]
   30398:	str	r1, [sp, #28]
   3039c:	ands	r3, r3, #4
   303a0:	streq	r3, [sp, #20]
   303a4:	beq	303c4 <__assert_fail@plt+0x1ddd0>
   303a8:	ldr	r3, [r5, #24]
   303ac:	mov	r1, #47	; 0x2f
   303b0:	ldr	r0, [sp, #28]
   303b4:	add	r2, r3, r0
   303b8:	strb	r1, [r3, r0]
   303bc:	add	r3, r2, #1
   303c0:	str	r3, [sp, #20]
   303c4:	mov	sl, #0
   303c8:	movw	r3, #6548	; 0x1994
   303cc:	movt	r3, #258	; 0x102
   303d0:	mov	r2, sl
   303d4:	ldr	fp, [r5, #36]	; 0x24
   303d8:	mov	r7, sl
   303dc:	stmib	sp, {r2, r9}
   303e0:	movw	r2, #19778	; 0x4d42
   303e4:	movt	r2, #65363	; 0xff53
   303e8:	str	sl, [sp, #24]
   303ec:	str	r3, [sp, #44]	; 0x2c
   303f0:	ldr	r3, [r9, #48]	; 0x30
   303f4:	str	sl, [sp, #36]	; 0x24
   303f8:	str	r2, [sp, #48]	; 0x30
   303fc:	ldr	r2, [sp]
   30400:	add	r3, r3, #1
   30404:	str	r3, [sp, #12]
   30408:	sub	fp, fp, r2
   3040c:	b	30424 <__assert_fail@plt+0x1de30>
   30410:	ldr	r3, [sp, #16]
   30414:	add	r7, r7, #1
   30418:	cmp	r7, r3
   3041c:	bcs	307dc <__assert_fail@plt+0x1e1e8>
   30420:	mov	sl, r4
   30424:	ldr	r3, [sp, #8]
   30428:	ldr	r4, [r3, #12]
   3042c:	cmp	r4, #0
   30430:	beq	30964 <__assert_fail@plt+0x1e370>
   30434:	bl	12348 <__errno_location@plt>
   30438:	mov	r8, r0
   3043c:	mov	r3, #0
   30440:	mov	r0, r4
   30444:	str	r3, [r8]
   30448:	bl	124bc <readdir64@plt>
   3044c:	subs	r9, r0, #0
   30450:	beq	30a34 <__assert_fail@plt+0x1e440>
   30454:	ldr	r3, [r5, #48]	; 0x30
   30458:	tst	r3, #32
   3045c:	bne	3046c <__assert_fail@plt+0x1de78>
   30460:	ldrb	r3, [r9, #19]
   30464:	cmp	r3, #46	; 0x2e
   30468:	beq	30600 <__assert_fail@plt+0x1e00c>
   3046c:	add	r4, r9, #19
   30470:	mov	r0, r4
   30474:	bl	12300 <strlen@plt>
   30478:	mov	r2, r0
   3047c:	mov	r1, r4
   30480:	mov	r6, r0
   30484:	mov	r0, r5
   30488:	bl	2f974 <__assert_fail@plt+0x1d380>
   3048c:	subs	r4, r0, #0
   30490:	beq	30894 <__assert_fail@plt+0x1e2a0>
   30494:	cmp	fp, r6
   30498:	bls	30560 <__assert_fail@plt+0x1df6c>
   3049c:	ldr	r3, [sp]
   304a0:	adds	r6, r6, r3
   304a4:	bcs	30c94 <__assert_fail@plt+0x1e6a0>
   304a8:	ldr	r3, [sp, #12]
   304ac:	add	r1, r4, #168	; 0xa8
   304b0:	ldr	ip, [r5]
   304b4:	ldr	r0, [r5, #48]	; 0x30
   304b8:	str	r6, [r4, #40]	; 0x28
   304bc:	str	r3, [r4, #48]	; 0x30
   304c0:	ldrd	r2, [r9]
   304c4:	str	ip, [r4, #4]
   304c8:	tst	r0, #4
   304cc:	streq	r1, [r4, #24]
   304d0:	strd	r2, [r4, #160]	; 0xa0
   304d4:	bne	305e0 <__assert_fail@plt+0x1dfec>
   304d8:	ldr	r3, [r5, #44]	; 0x2c
   304dc:	cmp	r3, #0
   304e0:	beq	304ec <__assert_fail@plt+0x1def8>
   304e4:	ands	r3, r0, #1024	; 0x400
   304e8:	beq	30620 <__assert_fail@plt+0x1e02c>
   304ec:	ldrb	r3, [r9, #18]
   304f0:	tst	r0, #8
   304f4:	sub	r2, r3, #1
   304f8:	beq	30504 <__assert_fail@plt+0x1df10>
   304fc:	tst	r3, #251	; 0xfb
   30500:	bne	30638 <__assert_fail@plt+0x1e044>
   30504:	mov	r3, #11
   30508:	cmp	r2, r3
   3050c:	strh	r3, [r4, #56]	; 0x38
   30510:	bls	305c4 <__assert_fail@plt+0x1dfd0>
   30514:	mov	r1, #0
   30518:	mov	r2, #2
   3051c:	mov	r3, #0
   30520:	str	r1, [r4, #80]	; 0x50
   30524:	strd	r2, [r4, #112]	; 0x70
   30528:	ldr	r2, [sp, #4]
   3052c:	mov	r3, #0
   30530:	str	r3, [r4, #8]
   30534:	cmp	r2, r3
   30538:	movw	r3, #10000	; 0x2710
   3053c:	strne	r4, [sl, #8]
   30540:	streq	r4, [sp, #4]
   30544:	cmp	r7, r3
   30548:	bne	30410 <__assert_fail@plt+0x1de1c>
   3054c:	ldr	r6, [r5, #44]	; 0x2c
   30550:	cmp	r6, #0
   30554:	beq	30790 <__assert_fail@plt+0x1e19c>
   30558:	movw	r7, #10001	; 0x2711
   3055c:	b	30420 <__assert_fail@plt+0x1de2c>
   30560:	ldr	r3, [sp, #28]
   30564:	add	r1, r5, #36	; 0x24
   30568:	add	r0, r5, #24
   3056c:	ldr	fp, [r5, #24]
   30570:	add	r2, r3, #2
   30574:	add	r2, r2, r6
   30578:	bl	2fca4 <__assert_fail@plt+0x1d6b0>
   3057c:	cmp	r0, #0
   30580:	beq	30894 <__assert_fail@plt+0x1e2a0>
   30584:	ldr	r3, [r5, #24]
   30588:	cmp	r3, fp
   3058c:	beq	30674 <__assert_fail@plt+0x1e080>
   30590:	ldr	r2, [r5, #48]	; 0x30
   30594:	tst	r2, #4
   30598:	beq	305a8 <__assert_fail@plt+0x1dfb4>
   3059c:	ldr	r2, [sp]
   305a0:	add	r3, r3, r2
   305a4:	str	r3, [sp, #20]
   305a8:	ldr	r3, [sp]
   305ac:	str	r0, [sp, #24]
   305b0:	ldr	fp, [r5, #36]	; 0x24
   305b4:	sub	fp, fp, r3
   305b8:	b	3049c <__assert_fail@plt+0x1dea8>
   305bc:	mov	r3, #11
   305c0:	strh	r3, [r4, #56]	; 0x38
   305c4:	movw	r3, #33492	; 0x82d4
   305c8:	movt	r3, #4
   305cc:	ldr	r1, [r3, r2, lsl #2]
   305d0:	mov	r2, #2
   305d4:	mov	r3, #0
   305d8:	str	r1, [r4, #80]	; 0x50
   305dc:	b	30524 <__assert_fail@plt+0x1df30>
   305e0:	ldr	r3, [r4, #28]
   305e4:	ldr	r2, [r4, #52]	; 0x34
   305e8:	ldr	r0, [sp, #20]
   305ec:	str	r3, [r4, #24]
   305f0:	add	r2, r2, #1
   305f4:	bl	11fb8 <memmove@plt>
   305f8:	ldr	r0, [r5, #48]	; 0x30
   305fc:	b	304d8 <__assert_fail@plt+0x1dee4>
   30600:	ldrb	r3, [r9, #20]
   30604:	cmp	r3, #0
   30608:	beq	30618 <__assert_fail@plt+0x1e024>
   3060c:	ldrh	r3, [r9, #20]
   30610:	cmp	r3, #46	; 0x2e
   30614:	bne	3046c <__assert_fail@plt+0x1de78>
   30618:	mov	r4, sl
   3061c:	b	30420 <__assert_fail@plt+0x1de2c>
   30620:	mov	r1, r0
   30624:	mov	r2, r4
   30628:	ldr	r0, [r5, #32]
   3062c:	bl	2fd34 <__assert_fail@plt+0x1d740>
   30630:	strh	r0, [r4, #56]	; 0x38
   30634:	b	30528 <__assert_fail@plt+0x1df34>
   30638:	ubfx	r0, r0, #4, #1
   3063c:	cmp	r3, #10
   30640:	moveq	r3, r0
   30644:	orrne	r3, r0, #1
   30648:	cmp	r3, #0
   3064c:	beq	305bc <__assert_fail@plt+0x1dfc8>
   30650:	mov	r3, #11
   30654:	cmp	r2, r3
   30658:	strh	r3, [r4, #56]	; 0x38
   3065c:	bls	30878 <__assert_fail@plt+0x1e284>
   30660:	mov	r1, #0
   30664:	mov	r2, #1
   30668:	mov	r3, #0
   3066c:	str	r1, [r4, #80]	; 0x50
   30670:	b	30524 <__assert_fail@plt+0x1df30>
   30674:	ldr	r0, [sp, #24]
   30678:	b	305a8 <__assert_fail@plt+0x1dfb4>
   3067c:	ldr	r3, [r5, #48]	; 0x30
   30680:	ldr	r1, [r9, #24]
   30684:	and	r2, r3, #516	; 0x204
   30688:	cmp	r2, #512	; 0x200
   3068c:	ldreq	r0, [r5, #32]
   30690:	mvnne	r0, #99	; 0x63
   30694:	ands	r2, r3, #16
   30698:	beq	306a8 <__assert_fail@plt+0x1e0b4>
   3069c:	tst	r3, #1
   306a0:	moveq	r2, #32768	; 0x8000
   306a4:	bne	308f8 <__assert_fail@plt+0x1e304>
   306a8:	add	r3, sp, #60	; 0x3c
   306ac:	bl	41fb8 <__assert_fail@plt+0x2f9c4>
   306b0:	cmp	r0, #0
   306b4:	str	r0, [sp, #4]
   306b8:	str	r0, [r9, #12]
   306bc:	beq	30c08 <__assert_fail@plt+0x1e614>
   306c0:	ldrh	r3, [r9, #56]	; 0x38
   306c4:	ldr	r0, [r5, #48]	; 0x30
   306c8:	cmp	r3, #11
   306cc:	beq	30b54 <__assert_fail@plt+0x1e560>
   306d0:	tst	r0, #256	; 0x100
   306d4:	bne	30ad0 <__assert_fail@plt+0x1e4dc>
   306d8:	ldr	r2, [r5, #44]	; 0x2c
   306dc:	movw	r3, #34464	; 0x86a0
   306e0:	movt	r3, #1
   306e4:	cmp	r2, #0
   306e8:	mvnne	r3, #0
   306ec:	str	r3, [sp, #16]
   306f0:	ldr	r3, [sp, #32]
   306f4:	cmp	r3, #2
   306f8:	beq	30ac0 <__assert_fail@plt+0x1e4cc>
   306fc:	ldr	r3, [r5, #48]	; 0x30
   30700:	ldr	r0, [sp, #60]	; 0x3c
   30704:	and	r3, r3, #56	; 0x38
   30708:	cmp	r3, #24
   3070c:	beq	30908 <__assert_fail@plt+0x1e314>
   30710:	ldr	r3, [sp, #32]
   30714:	mov	r4, #1
   30718:	sub	r6, r3, #3
   3071c:	clz	r6, r6
   30720:	lsr	r6, r6, #5
   30724:	ldr	r3, [r5, #48]	; 0x30
   30728:	tst	r3, #512	; 0x200
   3072c:	bne	30bf4 <__assert_fail@plt+0x1e600>
   30730:	cmp	r0, #0
   30734:	bge	30b94 <__assert_fail@plt+0x1e5a0>
   30738:	tst	r6, r4
   3073c:	beq	3074c <__assert_fail@plt+0x1e158>
   30740:	bl	12348 <__errno_location@plt>
   30744:	ldr	r3, [r0]
   30748:	str	r3, [r9, #32]
   3074c:	ldrh	r3, [r9, #58]	; 0x3a
   30750:	ldr	r0, [r9, #12]
   30754:	orr	r3, r3, #1
   30758:	strh	r3, [r9, #58]	; 0x3a
   3075c:	bl	125c4 <closedir@plt>
   30760:	ldr	r3, [r5, #48]	; 0x30
   30764:	mov	r2, #0
   30768:	str	r2, [r9, #12]
   3076c:	tst	r3, #512	; 0x200
   30770:	beq	30780 <__assert_fail@plt+0x1e18c>
   30774:	ldr	r0, [sp, #60]	; 0x3c
   30778:	cmp	r0, r2
   3077c:	bge	30be8 <__assert_fail@plt+0x1e5f4>
   30780:	mov	r2, #0
   30784:	str	r2, [r9, #12]
   30788:	str	r2, [sp, #52]	; 0x34
   3078c:	b	30370 <__assert_fail@plt+0x1dd7c>
   30790:	ldr	r0, [sp, #8]
   30794:	ldr	r1, [sp, #60]	; 0x3c
   30798:	bl	2fa90 <__assert_fail@plt+0x1d49c>
   3079c:	movw	r3, #26985	; 0x6969
   307a0:	cmp	r0, r3
   307a4:	beq	307c8 <__assert_fail@plt+0x1e1d4>
   307a8:	ldr	r3, [sp, #44]	; 0x2c
   307ac:	cmp	r0, r3
   307b0:	beq	307c8 <__assert_fail@plt+0x1e1d4>
   307b4:	ldr	r3, [sp, #48]	; 0x30
   307b8:	cmp	r0, r3
   307bc:	movne	r3, #1
   307c0:	strne	r3, [sp, #36]	; 0x24
   307c4:	bne	30558 <__assert_fail@plt+0x1df64>
   307c8:	ldr	r3, [sp, #16]
   307cc:	add	r7, r7, #1
   307d0:	str	r6, [sp, #36]	; 0x24
   307d4:	cmp	r7, r3
   307d8:	bcc	30420 <__assert_fail@plt+0x1de2c>
   307dc:	ldr	r9, [sp, #8]
   307e0:	ldr	r3, [sp, #24]
   307e4:	cmp	r3, #0
   307e8:	beq	30974 <__assert_fail@plt+0x1e380>
   307ec:	ldr	r3, [r5, #4]
   307f0:	ldr	r1, [r5, #24]
   307f4:	cmp	r3, #0
   307f8:	beq	3082c <__assert_fail@plt+0x1e238>
   307fc:	ldr	r2, [r3, #24]
   30800:	add	r0, r3, #168	; 0xa8
   30804:	cmp	r2, r0
   30808:	beq	3081c <__assert_fail@plt+0x1e228>
   3080c:	ldr	r0, [r3, #28]
   30810:	sub	r2, r2, r0
   30814:	add	r2, r1, r2
   30818:	str	r2, [r3, #24]
   3081c:	str	r1, [r3, #28]
   30820:	ldr	r3, [r3, #8]
   30824:	cmp	r3, #0
   30828:	bne	307fc <__assert_fail@plt+0x1e208>
   3082c:	ldr	r3, [sp, #4]
   30830:	b	30864 <__assert_fail@plt+0x1e270>
   30834:	ldr	r2, [r3, #24]
   30838:	cmp	r2, r0
   3083c:	beq	30850 <__assert_fail@plt+0x1e25c>
   30840:	ldr	r0, [r3, #28]
   30844:	sub	r2, r2, r0
   30848:	add	r2, r1, r2
   3084c:	str	r2, [r3, #24]
   30850:	ldr	r2, [r3, #8]
   30854:	str	r1, [r3, #28]
   30858:	cmp	r2, #0
   3085c:	ldreq	r2, [r3, #4]
   30860:	mov	r3, r2
   30864:	ldr	r2, [r3, #48]	; 0x30
   30868:	add	r0, r3, #168	; 0xa8
   3086c:	cmp	r2, #0
   30870:	bge	30834 <__assert_fail@plt+0x1e240>
   30874:	b	30974 <__assert_fail@plt+0x1e380>
   30878:	movw	r3, #33492	; 0x82d4
   3087c:	movt	r3, #4
   30880:	ldr	r1, [r3, r2, lsl #2]
   30884:	mov	r2, #1
   30888:	mov	r3, #0
   3088c:	str	r1, [r4, #80]	; 0x50
   30890:	b	30524 <__assert_fail@plt+0x1df30>
   30894:	ldr	r9, [sp, #8]
   30898:	mov	r0, r4
   3089c:	ldr	r4, [r8]
   308a0:	bl	2f668 <__assert_fail@plt+0x1d074>
   308a4:	ldr	r0, [sp, #4]
   308a8:	bl	2fa04 <__assert_fail@plt+0x1d410>
   308ac:	ldr	r0, [r9, #12]
   308b0:	bl	125c4 <closedir@plt>
   308b4:	ldr	r3, [r5, #48]	; 0x30
   308b8:	mov	r2, #0
   308bc:	mov	r1, #7
   308c0:	str	r2, [sp, #4]
   308c4:	str	r2, [r9, #12]
   308c8:	strh	r1, [r9, #56]	; 0x38
   308cc:	orr	r3, r3, #8192	; 0x2000
   308d0:	str	r3, [r5, #48]	; 0x30
   308d4:	str	r4, [r8]
   308d8:	ldr	r0, [sp, #4]
   308dc:	add	sp, sp, #68	; 0x44
   308e0:	ldrd	r4, [sp]
   308e4:	ldrd	r6, [sp, #8]
   308e8:	ldrd	r8, [sp, #16]
   308ec:	ldrd	sl, [sp, #24]
   308f0:	add	sp, sp, #32
   308f4:	pop	{pc}		; (ldr pc, [sp], #4)
   308f8:	ldr	r2, [r9, #48]	; 0x30
   308fc:	cmp	r2, #0
   30900:	movne	r2, #32768	; 0x8000
   30904:	b	306a8 <__assert_fail@plt+0x1e0b4>
   30908:	ldr	r3, [r9, #84]	; 0x54
   3090c:	cmp	r3, #2
   30910:	bne	30710 <__assert_fail@plt+0x1e11c>
   30914:	mov	r1, r0
   30918:	mov	r0, r9
   3091c:	bl	2fa90 <__assert_fail@plt+0x1d49c>
   30920:	movw	r3, #26985	; 0x6969
   30924:	cmp	r0, r3
   30928:	beq	30c8c <__assert_fail@plt+0x1e698>
   3092c:	bgt	30c70 <__assert_fail@plt+0x1e67c>
   30930:	movw	r3, #19778	; 0x4d42
   30934:	movt	r3, #65363	; 0xff53
   30938:	cmp	r0, r3
   3093c:	beq	30c8c <__assert_fail@plt+0x1e698>
   30940:	cmp	r0, #0
   30944:	beq	30c8c <__assert_fail@plt+0x1e698>
   30948:	ldr	r3, [sp, #32]
   3094c:	cmp	r3, #3
   30950:	bne	30ac0 <__assert_fail@plt+0x1e4cc>
   30954:	mov	r4, #0
   30958:	mov	r6, #1
   3095c:	ldr	r0, [sp, #60]	; 0x3c
   30960:	b	30724 <__assert_fail@plt+0x1e130>
   30964:	mov	r9, r3
   30968:	ldr	r3, [sp, #24]
   3096c:	cmp	r3, #0
   30970:	bne	307ec <__assert_fail@plt+0x1e1f8>
   30974:	ldr	r3, [r5, #48]	; 0x30
   30978:	tst	r3, #4
   3097c:	beq	309ac <__assert_fail@plt+0x1e3b8>
   30980:	ldr	r2, [sp]
   30984:	ldr	r3, [r5, #36]	; 0x24
   30988:	cmp	r7, #0
   3098c:	cmpne	r3, r2
   30990:	bne	309a0 <__assert_fail@plt+0x1e3ac>
   30994:	ldr	r3, [sp, #20]
   30998:	sub	r3, r3, #1
   3099c:	str	r3, [sp, #20]
   309a0:	ldr	r2, [sp, #20]
   309a4:	mov	r3, #0
   309a8:	strb	r3, [r2]
   309ac:	ldr	r2, [sp, #40]	; 0x28
   309b0:	ldr	r3, [sp, #52]	; 0x34
   309b4:	cmp	r2, #0
   309b8:	movne	r3, #0
   309bc:	cmp	r3, #0
   309c0:	beq	309f8 <__assert_fail@plt+0x1e404>
   309c4:	ldr	r3, [sp, #32]
   309c8:	cmp	r7, #0
   309cc:	cmpne	r3, #1
   309d0:	bne	30a00 <__assert_fail@plt+0x1e40c>
   309d4:	ldr	r3, [r9, #48]	; 0x30
   309d8:	cmp	r3, #0
   309dc:	bne	30b70 <__assert_fail@plt+0x1e57c>
   309e0:	mov	r0, r5
   309e4:	bl	2fc40 <__assert_fail@plt+0x1d64c>
   309e8:	adds	r0, r0, #0
   309ec:	movne	r0, #1
   309f0:	cmp	r0, #0
   309f4:	bne	30c48 <__assert_fail@plt+0x1e654>
   309f8:	cmp	r7, #0
   309fc:	beq	30b20 <__assert_fail@plt+0x1e52c>
   30a00:	ldr	r3, [sp, #36]	; 0x24
   30a04:	cmp	r3, #0
   30a08:	bne	30a78 <__assert_fail@plt+0x1e484>
   30a0c:	ldr	r3, [r5, #44]	; 0x2c
   30a10:	cmp	r3, #0
   30a14:	cmpne	r7, #1
   30a18:	beq	308d8 <__assert_fail@plt+0x1e2e4>
   30a1c:	mov	r2, r7
   30a20:	mov	r0, r5
   30a24:	ldr	r1, [sp, #4]
   30a28:	bl	2f880 <__assert_fail@plt+0x1d28c>
   30a2c:	str	r0, [sp, #4]
   30a30:	b	308d8 <__assert_fail@plt+0x1e2e4>
   30a34:	ldr	r3, [r8]
   30a38:	ldr	r9, [sp, #8]
   30a3c:	cmp	r3, #0
   30a40:	beq	30a5c <__assert_fail@plt+0x1e468>
   30a44:	ldr	r2, [sp, #40]	; 0x28
   30a48:	str	r3, [r9, #32]
   30a4c:	orrs	r2, r2, r7
   30a50:	moveq	r3, #4
   30a54:	movne	r3, #7
   30a58:	strh	r3, [r9, #56]	; 0x38
   30a5c:	ldr	r0, [r9, #12]
   30a60:	cmp	r0, #0
   30a64:	beq	30968 <__assert_fail@plt+0x1e374>
   30a68:	bl	125c4 <closedir@plt>
   30a6c:	mov	r3, #0
   30a70:	str	r3, [r9, #12]
   30a74:	b	30968 <__assert_fail@plt+0x1e374>
   30a78:	movw	r3, #63568	; 0xf850
   30a7c:	movt	r3, #2
   30a80:	ldr	r1, [sp, #4]
   30a84:	mov	r2, r7
   30a88:	mov	r0, r5
   30a8c:	str	r3, [r5, #44]	; 0x2c
   30a90:	bl	2f880 <__assert_fail@plt+0x1d28c>
   30a94:	mov	r3, #0
   30a98:	str	r0, [sp, #4]
   30a9c:	str	r3, [r5, #44]	; 0x2c
   30aa0:	b	308d8 <__assert_fail@plt+0x1e2e4>
   30aa4:	movw	r3, #34464	; 0x86a0
   30aa8:	movt	r3, #1
   30aac:	mov	r2, #1
   30ab0:	str	r3, [sp, #16]
   30ab4:	str	r2, [sp, #52]	; 0x34
   30ab8:	ldr	r3, [r5, #48]	; 0x30
   30abc:	b	30370 <__assert_fail@plt+0x1dd7c>
   30ac0:	mov	r3, #0
   30ac4:	str	r3, [sp, #52]	; 0x34
   30ac8:	ldr	r3, [r5, #48]	; 0x30
   30acc:	b	30370 <__assert_fail@plt+0x1dd7c>
   30ad0:	add	r4, r5, #56	; 0x38
   30ad4:	mov	r2, r9
   30ad8:	mov	r1, r4
   30adc:	bl	30240 <__assert_fail@plt+0x1dc4c>
   30ae0:	mov	r3, #0
   30ae4:	mov	r2, r9
   30ae8:	ldr	r0, [r5, #32]
   30aec:	ldr	r1, [r5, #48]	; 0x30
   30af0:	bl	2fd34 <__assert_fail@plt+0x1d740>
   30af4:	mov	r1, r4
   30af8:	mov	r2, r9
   30afc:	ldr	r0, [r5, #48]	; 0x30
   30b00:	bl	3016c <__assert_fail@plt+0x1db78>
   30b04:	subs	r4, r0, #0
   30b08:	bne	306d8 <__assert_fail@plt+0x1e0e4>
   30b0c:	bl	12348 <__errno_location@plt>
   30b10:	mov	r3, #12
   30b14:	str	r4, [sp, #4]
   30b18:	str	r3, [r0]
   30b1c:	b	308d8 <__assert_fail@plt+0x1e2e4>
   30b20:	ldr	r3, [sp, #32]
   30b24:	cmp	r3, #3
   30b28:	bne	30b40 <__assert_fail@plt+0x1e54c>
   30b2c:	ldrh	r3, [r9, #56]	; 0x38
   30b30:	cmp	r3, #7
   30b34:	cmpne	r3, #4
   30b38:	movne	r3, #6
   30b3c:	strhne	r3, [r9, #56]	; 0x38
   30b40:	mov	r3, #0
   30b44:	ldr	r0, [sp, #4]
   30b48:	str	r3, [sp, #4]
   30b4c:	bl	2fa04 <__assert_fail@plt+0x1d410>
   30b50:	b	308d8 <__assert_fail@plt+0x1e2e4>
   30b54:	mov	r1, r0
   30b58:	mov	r3, #0
   30b5c:	ldr	r0, [r5, #32]
   30b60:	mov	r2, r9
   30b64:	bl	2fd34 <__assert_fail@plt+0x1d740>
   30b68:	strh	r0, [r9, #56]	; 0x38
   30b6c:	b	306d8 <__assert_fail@plt+0x1e0e4>
   30b70:	movw	r3, #33540	; 0x8304
   30b74:	movt	r3, #4
   30b78:	ldr	r1, [r9, #4]
   30b7c:	mvn	r2, #0
   30b80:	mov	r0, r5
   30b84:	bl	2ff50 <__assert_fail@plt+0x1d95c>
   30b88:	adds	r0, r0, #0
   30b8c:	movne	r0, #1
   30b90:	b	309f0 <__assert_fail@plt+0x1e3fc>
   30b94:	mov	r2, r0
   30b98:	mov	r3, #0
   30b9c:	mov	r1, r9
   30ba0:	mov	r0, r5
   30ba4:	bl	2ff50 <__assert_fail@plt+0x1d95c>
   30ba8:	cmp	r0, #0
   30bac:	bne	30738 <__assert_fail@plt+0x1e144>
   30bb0:	mov	r3, #1
   30bb4:	str	r3, [sp, #52]	; 0x34
   30bb8:	ldr	r3, [r5, #48]	; 0x30
   30bbc:	b	30370 <__assert_fail@plt+0x1dd7c>
   30bc0:	ldr	r0, [r9, #12]
   30bc4:	mov	r4, #0
   30bc8:	bl	125c4 <closedir@plt>
   30bcc:	ldr	r3, [sp, #32]
   30bd0:	str	r4, [r9, #12]
   30bd4:	cmp	r3, #3
   30bd8:	beq	30c2c <__assert_fail@plt+0x1e638>
   30bdc:	mov	r3, #0
   30be0:	str	r3, [sp, #4]
   30be4:	b	308d8 <__assert_fail@plt+0x1e2e4>
   30be8:	bl	125ac <close@plt>
   30bec:	ldr	r3, [r5, #48]	; 0x30
   30bf0:	b	30780 <__assert_fail@plt+0x1e18c>
   30bf4:	mov	r2, #3
   30bf8:	movw	r1, #1030	; 0x406
   30bfc:	bl	2f420 <__assert_fail@plt+0x1ce2c>
   30c00:	str	r0, [sp, #60]	; 0x3c
   30c04:	b	30730 <__assert_fail@plt+0x1e13c>
   30c08:	ldr	r3, [sp, #32]
   30c0c:	cmp	r3, #3
   30c10:	bne	30bdc <__assert_fail@plt+0x1e5e8>
   30c14:	mov	r3, #4
   30c18:	strh	r3, [r9, #56]	; 0x38
   30c1c:	bl	12348 <__errno_location@plt>
   30c20:	ldr	r3, [r0]
   30c24:	str	r3, [r9, #32]
   30c28:	b	308d8 <__assert_fail@plt+0x1e2e4>
   30c2c:	mov	r3, #4
   30c30:	str	r4, [sp, #4]
   30c34:	strh	r3, [r9, #56]	; 0x38
   30c38:	bl	12348 <__errno_location@plt>
   30c3c:	ldr	r3, [r0]
   30c40:	str	r3, [r9, #32]
   30c44:	b	308d8 <__assert_fail@plt+0x1e2e4>
   30c48:	ldr	r3, [r5, #48]	; 0x30
   30c4c:	mov	r2, #7
   30c50:	mov	r1, #0
   30c54:	strh	r2, [r9, #56]	; 0x38
   30c58:	ldr	r0, [sp, #4]
   30c5c:	str	r1, [sp, #4]
   30c60:	orr	r3, r3, #8192	; 0x2000
   30c64:	str	r3, [r5, #48]	; 0x30
   30c68:	bl	2fa04 <__assert_fail@plt+0x1d410>
   30c6c:	b	308d8 <__assert_fail@plt+0x1e2e4>
   30c70:	movw	r3, #40864	; 0x9fa0
   30c74:	cmp	r0, r3
   30c78:	beq	30c8c <__assert_fail@plt+0x1e698>
   30c7c:	movw	r3, #16719	; 0x414f
   30c80:	movt	r3, #21318	; 0x5346
   30c84:	cmp	r0, r3
   30c88:	bne	30948 <__assert_fail@plt+0x1e354>
   30c8c:	ldr	r0, [sp, #60]	; 0x3c
   30c90:	b	30710 <__assert_fail@plt+0x1e11c>
   30c94:	ldr	r9, [sp, #8]
   30c98:	mov	r0, r4
   30c9c:	bl	2f668 <__assert_fail@plt+0x1d074>
   30ca0:	ldr	r0, [sp, #4]
   30ca4:	bl	2fa04 <__assert_fail@plt+0x1d410>
   30ca8:	ldr	r0, [r9, #12]
   30cac:	bl	125c4 <closedir@plt>
   30cb0:	ldr	r3, [r5, #48]	; 0x30
   30cb4:	mov	r2, #0
   30cb8:	mov	r0, #7
   30cbc:	mov	r1, #36	; 0x24
   30cc0:	str	r2, [sp, #4]
   30cc4:	str	r2, [r9, #12]
   30cc8:	strh	r0, [r9, #56]	; 0x38
   30ccc:	orr	r3, r3, #8192	; 0x2000
   30cd0:	str	r3, [r5, #48]	; 0x30
   30cd4:	str	r1, [r8]
   30cd8:	b	308d8 <__assert_fail@plt+0x1e2e4>
   30cdc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   30ce0:	bic	r5, r1, #4080	; 0xff0
   30ce4:	bic	r5, r5, #15
   30ce8:	strd	r6, [sp, #8]
   30cec:	cmp	r5, #0
   30cf0:	strd	r8, [sp, #16]
   30cf4:	strd	sl, [sp, #24]
   30cf8:	str	lr, [sp, #32]
   30cfc:	sub	sp, sp, #12
   30d00:	bne	3101c <__assert_fail@plt+0x1ea28>
   30d04:	and	r3, r1, #516	; 0x204
   30d08:	mov	r7, r1
   30d0c:	cmp	r3, #516	; 0x204
   30d10:	beq	30fb8 <__assert_fail@plt+0x1e9c4>
   30d14:	ands	r5, r1, #18
   30d18:	beq	30fb8 <__assert_fail@plt+0x1e9c4>
   30d1c:	mov	r6, r0
   30d20:	mov	r1, #96	; 0x60
   30d24:	mov	r0, #1
   30d28:	mov	r9, r2
   30d2c:	bl	2f080 <__assert_fail@plt+0x1ca8c>
   30d30:	subs	r5, r0, #0
   30d34:	beq	30f70 <__assert_fail@plt+0x1e97c>
   30d38:	tst	r7, #2
   30d3c:	mvn	r2, #99	; 0x63
   30d40:	bicne	r3, r7, #512	; 0x200
   30d44:	orrne	r3, r3, #4
   30d48:	streq	r7, [r5, #48]	; 0x30
   30d4c:	str	r2, [r5, #32]
   30d50:	strne	r3, [r5, #48]	; 0x30
   30d54:	ldr	r3, [r6]
   30d58:	str	r9, [r5, #44]	; 0x2c
   30d5c:	cmp	r3, #0
   30d60:	beq	31030 <__assert_fail@plt+0x1ea3c>
   30d64:	mov	r8, r6
   30d68:	mov	r4, #0
   30d6c:	mov	r0, r3
   30d70:	bl	12300 <strlen@plt>
   30d74:	ldr	r3, [r8, #4]!
   30d78:	cmp	r4, r0
   30d7c:	movcc	r4, r0
   30d80:	cmp	r3, #0
   30d84:	bne	30d6c <__assert_fail@plt+0x1e778>
   30d88:	add	r2, r4, #1
   30d8c:	cmp	r2, #4096	; 0x1000
   30d90:	movcc	r2, #4096	; 0x1000
   30d94:	add	r1, r5, #36	; 0x24
   30d98:	add	r0, r5, #24
   30d9c:	bl	2fca4 <__assert_fail@plt+0x1d6b0>
   30da0:	subs	fp, r0, #0
   30da4:	beq	30fa8 <__assert_fail@plt+0x1e9b4>
   30da8:	ldr	sl, [r6]
   30dac:	cmp	sl, #0
   30db0:	beq	3100c <__assert_fail@plt+0x1ea18>
   30db4:	movw	r1, #17776	; 0x4570
   30db8:	movt	r1, #4
   30dbc:	mov	r2, #0
   30dc0:	mov	r0, r5
   30dc4:	bl	2f974 <__assert_fail@plt+0x1d380>
   30dc8:	subs	sl, r0, #0
   30dcc:	beq	30fa0 <__assert_fail@plt+0x1e9ac>
   30dd0:	mvn	r3, #0
   30dd4:	cmp	r9, #0
   30dd8:	ldr	r4, [r6]
   30ddc:	str	r3, [sl, #48]	; 0x30
   30de0:	beq	30dec <__assert_fail@plt+0x1e7f8>
   30de4:	ldr	fp, [r5, #48]	; 0x30
   30de8:	ubfx	fp, fp, #10, #1
   30dec:	cmp	r4, #0
   30df0:	beq	3106c <__assert_fail@plt+0x1ea78>
   30df4:	eor	r7, r7, #2048	; 0x800
   30df8:	mov	r3, #0
   30dfc:	ubfx	r2, r7, #11, #1
   30e00:	mov	r8, r3
   30e04:	mov	r7, r3
   30e08:	strd	r2, [sp]
   30e0c:	b	30e44 <__assert_fail@plt+0x1e850>
   30e10:	mov	r3, #11
   30e14:	mov	r2, #2
   30e18:	cmp	r9, r1
   30e1c:	strh	r3, [r4, #56]	; 0x38
   30e20:	mov	r3, #0
   30e24:	strd	r2, [r4, #112]	; 0x70
   30e28:	beq	30ff8 <__assert_fail@plt+0x1ea04>
   30e2c:	str	r7, [r4, #8]
   30e30:	mov	r7, r4
   30e34:	ldr	r4, [r6, #4]!
   30e38:	add	r8, r8, #1
   30e3c:	cmp	r4, #0
   30e40:	beq	30ef0 <__assert_fail@plt+0x1e8fc>
   30e44:	mov	r0, r4
   30e48:	bl	12300 <strlen@plt>
   30e4c:	ldr	r3, [sp]
   30e50:	mov	r2, r0
   30e54:	cmp	r0, #2
   30e58:	movls	r3, #0
   30e5c:	andhi	r3, r3, #1
   30e60:	cmp	r3, #0
   30e64:	bne	30fc8 <__assert_fail@plt+0x1e9d4>
   30e68:	mov	r1, r4
   30e6c:	mov	r0, r5
   30e70:	bl	2f974 <__assert_fail@plt+0x1d380>
   30e74:	subs	r4, r0, #0
   30e78:	beq	30f90 <__assert_fail@plt+0x1e99c>
   30e7c:	add	r2, r4, #168	; 0xa8
   30e80:	cmp	r7, #0
   30e84:	moveq	r3, #0
   30e88:	andne	r3, fp, #1
   30e8c:	str	sl, [r4, #4]
   30e90:	mov	r1, #0
   30e94:	cmp	r3, #0
   30e98:	str	r2, [r4, #24]
   30e9c:	str	r1, [r4, #48]	; 0x30
   30ea0:	bne	30e10 <__assert_fail@plt+0x1e81c>
   30ea4:	mov	r2, r4
   30ea8:	ldr	r0, [r5, #32]
   30eac:	ldr	r1, [r5, #48]	; 0x30
   30eb0:	bl	2fd34 <__assert_fail@plt+0x1d740>
   30eb4:	cmp	r9, #0
   30eb8:	strh	r0, [r4, #56]	; 0x38
   30ebc:	bne	30e2c <__assert_fail@plt+0x1e838>
   30ec0:	cmp	r7, #0
   30ec4:	str	r9, [r4, #8]
   30ec8:	moveq	r7, r4
   30ecc:	streq	r4, [sp, #4]
   30ed0:	beq	30e34 <__assert_fail@plt+0x1e840>
   30ed4:	ldr	r3, [sp, #4]
   30ed8:	str	r4, [sp, #4]
   30edc:	str	r4, [r3, #8]
   30ee0:	ldr	r4, [r6, #4]!
   30ee4:	add	r8, r8, #1
   30ee8:	cmp	r4, #0
   30eec:	bne	30e44 <__assert_fail@plt+0x1e850>
   30ef0:	cmp	r9, #0
   30ef4:	cmpne	r8, #1
   30ef8:	bls	30f10 <__assert_fail@plt+0x1e91c>
   30efc:	mov	r1, r7
   30f00:	mov	r2, r8
   30f04:	mov	r0, r5
   30f08:	bl	2f880 <__assert_fail@plt+0x1d28c>
   30f0c:	mov	r7, r0
   30f10:	movw	r1, #17776	; 0x4570
   30f14:	movt	r1, #4
   30f18:	mov	r2, #0
   30f1c:	mov	r0, r5
   30f20:	bl	2f974 <__assert_fail@plt+0x1d380>
   30f24:	cmp	r0, #0
   30f28:	str	r0, [r5]
   30f2c:	beq	30f90 <__assert_fail@plt+0x1e99c>
   30f30:	mov	r2, #1
   30f34:	mov	r3, #9
   30f38:	str	r7, [r0, #8]
   30f3c:	add	r1, r5, #56	; 0x38
   30f40:	str	r2, [r0, #48]	; 0x30
   30f44:	strh	r3, [r0, #56]	; 0x38
   30f48:	ldr	r0, [r5, #48]	; 0x30
   30f4c:	bl	2fe90 <__assert_fail@plt+0x1d89c>
   30f50:	cmp	r0, #0
   30f54:	beq	30f90 <__assert_fail@plt+0x1e99c>
   30f58:	ldr	r1, [r5, #48]	; 0x30
   30f5c:	tst	r1, #516	; 0x204
   30f60:	beq	31038 <__assert_fail@plt+0x1ea44>
   30f64:	mvn	r1, #0
   30f68:	add	r0, r5, #60	; 0x3c
   30f6c:	bl	41b54 <__assert_fail@plt+0x2f560>
   30f70:	mov	r0, r5
   30f74:	add	sp, sp, #12
   30f78:	ldrd	r4, [sp]
   30f7c:	ldrd	r6, [sp, #8]
   30f80:	ldrd	r8, [sp, #16]
   30f84:	ldrd	sl, [sp, #24]
   30f88:	add	sp, sp, #32
   30f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   30f90:	mov	r0, r7
   30f94:	bl	2fa04 <__assert_fail@plt+0x1d410>
   30f98:	mov	r0, sl
   30f9c:	bl	2f668 <__assert_fail@plt+0x1d074>
   30fa0:	ldr	r0, [r5, #24]
   30fa4:	bl	2f668 <__assert_fail@plt+0x1d074>
   30fa8:	mov	r0, r5
   30fac:	mov	r5, #0
   30fb0:	bl	2f668 <__assert_fail@plt+0x1d074>
   30fb4:	b	30f70 <__assert_fail@plt+0x1e97c>
   30fb8:	bl	12348 <__errno_location@plt>
   30fbc:	mov	r3, #22
   30fc0:	str	r3, [r0]
   30fc4:	b	30f70 <__assert_fail@plt+0x1e97c>
   30fc8:	sub	r3, r0, #1
   30fcc:	ldrb	r1, [r4, r3]
   30fd0:	add	r3, r4, r3
   30fd4:	cmp	r1, #47	; 0x2f
   30fd8:	bne	30e68 <__assert_fail@plt+0x1e874>
   30fdc:	ldrb	r1, [r3, #-1]!
   30fe0:	cmp	r1, #47	; 0x2f
   30fe4:	bne	30e68 <__assert_fail@plt+0x1e874>
   30fe8:	sub	r2, r2, #1
   30fec:	cmp	r2, #1
   30ff0:	bne	30fdc <__assert_fail@plt+0x1e9e8>
   30ff4:	b	30e68 <__assert_fail@plt+0x1e874>
   30ff8:	ldr	r3, [sp, #4]
   30ffc:	str	r4, [sp, #4]
   31000:	str	r9, [r4, #8]
   31004:	str	r4, [r3, #8]
   31008:	b	30ee0 <__assert_fail@plt+0x1e8ec>
   3100c:	cmp	r9, #0
   31010:	beq	31064 <__assert_fail@plt+0x1ea70>
   31014:	mov	r4, sl
   31018:	b	30de4 <__assert_fail@plt+0x1e7f0>
   3101c:	bl	12348 <__errno_location@plt>
   31020:	mov	r3, #22
   31024:	mov	r5, #0
   31028:	str	r3, [r0]
   3102c:	b	30f70 <__assert_fail@plt+0x1e97c>
   31030:	mov	r2, #4096	; 0x1000
   31034:	b	30d94 <__assert_fail@plt+0x1e7a0>
   31038:	movw	r2, #24608	; 0x6020
   3103c:	movt	r2, #4
   31040:	ldr	r0, [r5, #32]
   31044:	bl	2ff20 <__assert_fail@plt+0x1d92c>
   31048:	cmp	r0, #0
   3104c:	str	r0, [r5, #28]
   31050:	bge	30f64 <__assert_fail@plt+0x1e970>
   31054:	ldr	r3, [r5, #48]	; 0x30
   31058:	orr	r3, r3, #4
   3105c:	str	r3, [r5, #48]	; 0x30
   31060:	b	30f64 <__assert_fail@plt+0x1e970>
   31064:	mov	r7, sl
   31068:	b	30f10 <__assert_fail@plt+0x1e91c>
   3106c:	mov	r7, r4
   31070:	b	30f10 <__assert_fail@plt+0x1e91c>
   31074:	ldr	r3, [r0]
   31078:	strd	r4, [sp, #-16]!
   3107c:	mov	r5, r0
   31080:	str	r6, [sp, #8]
   31084:	str	lr, [sp, #12]
   31088:	cmp	r3, #0
   3108c:	beq	310c8 <__assert_fail@plt+0x1ead4>
   31090:	ldr	r2, [r3, #48]	; 0x30
   31094:	cmp	r2, #0
   31098:	blt	311e8 <__assert_fail@plt+0x1ebf4>
   3109c:	ldr	r4, [r3, #8]
   310a0:	mov	r0, r3
   310a4:	cmp	r4, #0
   310a8:	ldreq	r4, [r3, #4]
   310ac:	bl	2f668 <__assert_fail@plt+0x1d074>
   310b0:	ldr	r2, [r4, #48]	; 0x30
   310b4:	mov	r3, r4
   310b8:	cmp	r2, #0
   310bc:	bge	3109c <__assert_fail@plt+0x1eaa8>
   310c0:	mov	r0, r4
   310c4:	bl	2f668 <__assert_fail@plt+0x1d074>
   310c8:	ldr	r0, [r5, #4]
   310cc:	cmp	r0, #0
   310d0:	beq	310d8 <__assert_fail@plt+0x1eae4>
   310d4:	bl	2fa04 <__assert_fail@plt+0x1d410>
   310d8:	ldr	r0, [r5, #8]
   310dc:	bl	2f668 <__assert_fail@plt+0x1d074>
   310e0:	ldr	r0, [r5, #24]
   310e4:	bl	2f668 <__assert_fail@plt+0x1d074>
   310e8:	ldr	r3, [r5, #48]	; 0x30
   310ec:	tst	r3, #512	; 0x200
   310f0:	bne	3115c <__assert_fail@plt+0x1eb68>
   310f4:	tst	r3, #4
   310f8:	beq	31188 <__assert_fail@plt+0x1eb94>
   310fc:	mov	r4, #0
   31100:	add	r0, r5, #60	; 0x3c
   31104:	bl	2fa4c <__assert_fail@plt+0x1d458>
   31108:	ldr	r0, [r5, #52]	; 0x34
   3110c:	cmp	r0, #0
   31110:	beq	31118 <__assert_fail@plt+0x1eb24>
   31114:	bl	2345c <__assert_fail@plt+0x10e68>
   31118:	ldr	r3, [r5, #48]	; 0x30
   3111c:	movw	r2, #258	; 0x102
   31120:	ldr	r0, [r5, #56]	; 0x38
   31124:	tst	r2, r3
   31128:	beq	31180 <__assert_fail@plt+0x1eb8c>
   3112c:	cmp	r0, #0
   31130:	beq	31138 <__assert_fail@plt+0x1eb44>
   31134:	bl	2345c <__assert_fail@plt+0x10e68>
   31138:	mov	r0, r5
   3113c:	bl	2f668 <__assert_fail@plt+0x1d074>
   31140:	cmp	r4, #0
   31144:	bne	311f0 <__assert_fail@plt+0x1ebfc>
   31148:	mov	r0, r4
   3114c:	ldrd	r4, [sp]
   31150:	ldr	r6, [sp, #8]
   31154:	add	sp, sp, #12
   31158:	pop	{pc}		; (ldr pc, [sp], #4)
   3115c:	ldr	r0, [r5, #32]
   31160:	cmp	r0, #0
   31164:	blt	310fc <__assert_fail@plt+0x1eb08>
   31168:	bl	125ac <close@plt>
   3116c:	cmp	r0, #0
   31170:	beq	310fc <__assert_fail@plt+0x1eb08>
   31174:	bl	12348 <__errno_location@plt>
   31178:	ldr	r4, [r0]
   3117c:	b	31100 <__assert_fail@plt+0x1eb0c>
   31180:	bl	2f668 <__assert_fail@plt+0x1d074>
   31184:	b	31138 <__assert_fail@plt+0x1eb44>
   31188:	ldr	r0, [r5, #28]
   3118c:	bl	124f8 <fchdir@plt>
   31190:	cmp	r0, #0
   31194:	bne	311b8 <__assert_fail@plt+0x1ebc4>
   31198:	ldr	r0, [r5, #28]
   3119c:	bl	125ac <close@plt>
   311a0:	cmp	r0, #0
   311a4:	beq	310fc <__assert_fail@plt+0x1eb08>
   311a8:	bl	12348 <__errno_location@plt>
   311ac:	mov	r6, r0
   311b0:	ldr	r4, [r6]
   311b4:	b	31100 <__assert_fail@plt+0x1eb0c>
   311b8:	bl	12348 <__errno_location@plt>
   311bc:	mov	r6, r0
   311c0:	ldr	r0, [r5, #28]
   311c4:	ldr	r4, [r6]
   311c8:	bl	125ac <close@plt>
   311cc:	adds	r3, r0, #0
   311d0:	movne	r3, #1
   311d4:	cmp	r4, #0
   311d8:	movne	r3, #0
   311dc:	cmp	r3, #0
   311e0:	beq	31100 <__assert_fail@plt+0x1eb0c>
   311e4:	b	311b0 <__assert_fail@plt+0x1ebbc>
   311e8:	mov	r4, r3
   311ec:	b	310c0 <__assert_fail@plt+0x1eacc>
   311f0:	bl	12348 <__errno_location@plt>
   311f4:	str	r4, [r0]
   311f8:	mvn	r4, #0
   311fc:	b	31148 <__assert_fail@plt+0x1eb54>
   31200:	strd	r4, [sp, #-24]!	; 0xffffffe8
   31204:	ldr	r4, [r0]
   31208:	strd	r6, [sp, #8]
   3120c:	str	r8, [sp, #16]
   31210:	str	lr, [sp, #20]
   31214:	cmp	r4, #0
   31218:	beq	31338 <__assert_fail@plt+0x1ed44>
   3121c:	ldr	r1, [r0, #48]	; 0x30
   31220:	ands	r3, r1, #8192	; 0x2000
   31224:	bne	31338 <__assert_fail@plt+0x1ed44>
   31228:	ldrh	r2, [r4, #60]	; 0x3c
   3122c:	mov	r8, r0
   31230:	mov	r0, #3
   31234:	strh	r0, [r4, #60]	; 0x3c
   31238:	cmp	r2, #1
   3123c:	beq	315e4 <__assert_fail@plt+0x1eff0>
   31240:	cmp	r2, #2
   31244:	ldrh	r3, [r4, #56]	; 0x38
   31248:	beq	31354 <__assert_fail@plt+0x1ed60>
   3124c:	cmp	r3, #1
   31250:	bne	31280 <__assert_fail@plt+0x1ec8c>
   31254:	b	31400 <__assert_fail@plt+0x1ee0c>
   31258:	mov	r0, r4
   3125c:	str	r5, [r8]
   31260:	bl	2f668 <__assert_fail@plt+0x1d074>
   31264:	ldr	r4, [r5, #48]	; 0x30
   31268:	cmp	r4, #0
   3126c:	beq	31448 <__assert_fail@plt+0x1ee54>
   31270:	ldrh	r3, [r5, #60]	; 0x3c
   31274:	mov	r4, r5
   31278:	cmp	r3, #4
   3127c:	bne	31500 <__assert_fail@plt+0x1ef0c>
   31280:	ldr	r5, [r4, #8]
   31284:	cmp	r5, #0
   31288:	bne	31258 <__assert_fail@plt+0x1ec64>
   3128c:	ldr	r6, [r4, #4]
   31290:	ldr	r3, [r6, #12]
   31294:	cmp	r3, #0
   31298:	bne	31708 <__assert_fail@plt+0x1f114>
   3129c:	mov	r0, r4
   312a0:	str	r6, [r8]
   312a4:	bl	2f668 <__assert_fail@plt+0x1d074>
   312a8:	ldr	r3, [r6, #48]	; 0x30
   312ac:	cmn	r3, #1
   312b0:	beq	316ac <__assert_fail@plt+0x1f0b8>
   312b4:	ldrh	r3, [r6, #56]	; 0x38
   312b8:	cmp	r3, #11
   312bc:	beq	315e0 <__assert_fail@plt+0x1efec>
   312c0:	ldr	r2, [r8, #24]
   312c4:	mov	r1, #0
   312c8:	ldr	r3, [r6, #40]	; 0x28
   312cc:	strb	r1, [r2, r3]
   312d0:	ldr	r3, [r6, #48]	; 0x30
   312d4:	cmp	r3, r1
   312d8:	beq	316cc <__assert_fail@plt+0x1f0d8>
   312dc:	ldrh	r3, [r6, #58]	; 0x3a
   312e0:	tst	r3, #2
   312e4:	bne	31660 <__assert_fail@plt+0x1f06c>
   312e8:	tst	r3, #1
   312ec:	beq	317a0 <__assert_fail@plt+0x1f1ac>
   312f0:	ldrh	r3, [r6, #56]	; 0x38
   312f4:	ldr	r0, [r8, #48]	; 0x30
   312f8:	cmp	r3, #2
   312fc:	beq	3132c <__assert_fail@plt+0x1ed38>
   31300:	ldr	r3, [r6, #32]
   31304:	cmp	r3, #0
   31308:	movne	r3, #7
   3130c:	strhne	r3, [r6, #56]	; 0x38
   31310:	bne	3132c <__assert_fail@plt+0x1ed38>
   31314:	mov	r3, #6
   31318:	mov	r2, r6
   3131c:	add	r1, r8, #56	; 0x38
   31320:	strh	r3, [r6, #56]	; 0x38
   31324:	bl	30240 <__assert_fail@plt+0x1dc4c>
   31328:	ldr	r0, [r8, #48]	; 0x30
   3132c:	tst	r0, #8192	; 0x2000
   31330:	moveq	r4, r6
   31334:	beq	3133c <__assert_fail@plt+0x1ed48>
   31338:	mov	r4, #0
   3133c:	mov	r0, r4
   31340:	ldrd	r4, [sp]
   31344:	ldrd	r6, [sp, #8]
   31348:	ldr	r8, [sp, #16]
   3134c:	add	sp, sp, #20
   31350:	pop	{pc}		; (ldr pc, [sp], #4)
   31354:	sub	r2, r3, #12
   31358:	cmp	r2, #1
   3135c:	bls	3159c <__assert_fail@plt+0x1efa8>
   31360:	cmp	r3, #1
   31364:	bne	31280 <__assert_fail@plt+0x1ec8c>
   31368:	tst	r1, #64	; 0x40
   3136c:	beq	31384 <__assert_fail@plt+0x1ed90>
   31370:	ldrd	r2, [r8, #16]
   31374:	ldrd	r6, [r4, #64]	; 0x40
   31378:	cmp	r7, r3
   3137c:	cmpeq	r6, r2
   31380:	bne	31408 <__assert_fail@plt+0x1ee14>
   31384:	ldr	r0, [r8, #4]
   31388:	cmp	r0, #0
   3138c:	beq	3160c <__assert_fail@plt+0x1f018>
   31390:	tst	r1, #4096	; 0x1000
   31394:	bne	315f8 <__assert_fail@plt+0x1f004>
   31398:	mvn	r2, #0
   3139c:	mov	r1, r4
   313a0:	ldr	r3, [r4, #24]
   313a4:	mov	r0, r8
   313a8:	bl	2ff50 <__assert_fail@plt+0x1d95c>
   313ac:	cmp	r0, #0
   313b0:	beq	31694 <__assert_fail@plt+0x1f0a0>
   313b4:	bl	12348 <__errno_location@plt>
   313b8:	ldrh	r3, [r4, #58]	; 0x3a
   313bc:	ldr	r2, [r0]
   313c0:	orr	r3, r3, #1
   313c4:	str	r2, [r4, #32]
   313c8:	strh	r3, [r4, #58]	; 0x3a
   313cc:	ldr	r4, [r8, #4]
   313d0:	cmp	r4, #0
   313d4:	beq	313f4 <__assert_fail@plt+0x1ee00>
   313d8:	mov	r3, r4
   313dc:	ldr	r2, [r3, #4]
   313e0:	ldr	r2, [r2, #24]
   313e4:	str	r2, [r3, #24]
   313e8:	ldr	r3, [r3, #8]
   313ec:	cmp	r3, #0
   313f0:	bne	313dc <__assert_fail@plt+0x1ede8>
   313f4:	mov	r3, #0
   313f8:	str	r3, [r8, #4]
   313fc:	b	31508 <__assert_fail@plt+0x1ef14>
   31400:	cmp	r2, #4
   31404:	bne	31368 <__assert_fail@plt+0x1ed74>
   31408:	ldrh	r3, [r4, #58]	; 0x3a
   3140c:	tst	r3, #2
   31410:	bne	31748 <__assert_fail@plt+0x1f154>
   31414:	ldr	r0, [r8, #4]
   31418:	cmp	r0, #0
   3141c:	beq	3142c <__assert_fail@plt+0x1ee38>
   31420:	bl	2fa04 <__assert_fail@plt+0x1d410>
   31424:	mov	r3, #0
   31428:	str	r3, [r8, #4]
   3142c:	mov	r3, #6
   31430:	mov	r2, r4
   31434:	ldr	r0, [r8, #48]	; 0x30
   31438:	add	r1, r8, #56	; 0x38
   3143c:	strh	r3, [r4, #56]	; 0x38
   31440:	bl	30240 <__assert_fail@plt+0x1dc4c>
   31444:	b	3133c <__assert_fail@plt+0x1ed48>
   31448:	mov	r0, r8
   3144c:	bl	2fc40 <__assert_fail@plt+0x1d64c>
   31450:	ldr	r3, [r8, #48]	; 0x30
   31454:	cmp	r0, #0
   31458:	orrne	r3, r3, #8192	; 0x2000
   3145c:	strne	r3, [r8, #48]	; 0x30
   31460:	bne	3133c <__assert_fail@plt+0x1ed48>
   31464:	movw	r2, #258	; 0x102
   31468:	ldr	r0, [r8, #56]	; 0x38
   3146c:	tst	r2, r3
   31470:	beq	31740 <__assert_fail@plt+0x1f14c>
   31474:	cmp	r0, #0
   31478:	beq	31480 <__assert_fail@plt+0x1ee8c>
   3147c:	bl	2345c <__assert_fail@plt+0x10e68>
   31480:	ldr	r2, [r5, #52]	; 0x34
   31484:	add	r4, r5, #168	; 0xa8
   31488:	mov	r1, r4
   3148c:	ldr	r0, [r8, #24]
   31490:	str	r2, [r5, #40]	; 0x28
   31494:	add	r2, r2, #1
   31498:	bl	11fb8 <memmove@plt>
   3149c:	mov	r0, r4
   314a0:	mov	r1, #47	; 0x2f
   314a4:	bl	12468 <strrchr@plt>
   314a8:	cmp	r0, #0
   314ac:	beq	314dc <__assert_fail@plt+0x1eee8>
   314b0:	cmp	r4, r0
   314b4:	beq	3169c <__assert_fail@plt+0x1f0a8>
   314b8:	add	r6, r0, #1
   314bc:	mov	r0, r6
   314c0:	bl	12300 <strlen@plt>
   314c4:	mov	r7, r0
   314c8:	mov	r1, r6
   314cc:	mov	r0, r4
   314d0:	add	r2, r7, #1
   314d4:	bl	11fb8 <memmove@plt>
   314d8:	str	r7, [r5, #52]	; 0x34
   314dc:	ldr	r3, [r8, #24]
   314e0:	add	r1, r8, #56	; 0x38
   314e4:	mov	r4, r5
   314e8:	ldr	r0, [r8, #48]	; 0x30
   314ec:	str	r3, [r5, #24]
   314f0:	str	r3, [r5, #28]
   314f4:	bl	2fe90 <__assert_fail@plt+0x1d89c>
   314f8:	ldrh	r0, [r5, #56]	; 0x38
   314fc:	b	3154c <__assert_fail@plt+0x1ef58>
   31500:	cmp	r3, #2
   31504:	beq	31770 <__assert_fail@plt+0x1f17c>
   31508:	ldr	r0, [r4, #4]
   3150c:	mov	ip, #47	; 0x2f
   31510:	add	r1, r4, #168	; 0xa8
   31514:	ldr	r3, [r8, #24]
   31518:	ldr	lr, [r0, #28]
   3151c:	ldr	r2, [r0, #40]	; 0x28
   31520:	sub	r0, r2, #1
   31524:	ldrb	lr, [lr, r0]
   31528:	cmp	lr, ip
   3152c:	movne	r0, r2
   31530:	strb	ip, [r3, r0]
   31534:	add	r0, r3, r0
   31538:	ldr	r2, [r4, #52]	; 0x34
   3153c:	add	r0, r0, #1
   31540:	add	r2, r2, #1
   31544:	bl	11fb8 <memmove@plt>
   31548:	ldrh	r0, [r4, #56]	; 0x38
   3154c:	cmp	r0, #11
   31550:	str	r4, [r8]
   31554:	beq	315c4 <__assert_fail@plt+0x1efd0>
   31558:	cmp	r0, #1
   3155c:	bne	3133c <__assert_fail@plt+0x1ed48>
   31560:	ldr	r3, [r4, #48]	; 0x30
   31564:	add	r1, r8, #56	; 0x38
   31568:	ldr	r0, [r8, #48]	; 0x30
   3156c:	cmp	r3, #0
   31570:	ldrdeq	r2, [r4, #64]	; 0x40
   31574:	strdeq	r2, [r8, #16]
   31578:	mov	r2, r4
   3157c:	bl	3016c <__assert_fail@plt+0x1db78>
   31580:	subs	r5, r0, #0
   31584:	bne	3133c <__assert_fail@plt+0x1ed48>
   31588:	bl	12348 <__errno_location@plt>
   3158c:	mov	r3, #12
   31590:	mov	r4, r5
   31594:	str	r3, [r0]
   31598:	b	3133c <__assert_fail@plt+0x1ed48>
   3159c:	mov	r3, #1
   315a0:	mov	r2, r4
   315a4:	ldr	r0, [r8, #32]
   315a8:	bl	2fd34 <__assert_fail@plt+0x1d740>
   315ac:	cmp	r0, #1
   315b0:	strh	r0, [r4, #56]	; 0x38
   315b4:	beq	317e8 <__assert_fail@plt+0x1f1f4>
   315b8:	cmp	r0, #11
   315bc:	str	r4, [r8]
   315c0:	bne	3133c <__assert_fail@plt+0x1ed48>
   315c4:	ldrd	r2, [r4, #112]	; 0x70
   315c8:	cmp	r3, #0
   315cc:	cmpeq	r2, #2
   315d0:	beq	31754 <__assert_fail@plt+0x1f160>
   315d4:	cmp	r3, #0
   315d8:	cmpeq	r2, #1
   315dc:	beq	3133c <__assert_fail@plt+0x1ed48>
   315e0:	bl	125a0 <abort@plt>
   315e4:	mov	r2, r4
   315e8:	ldr	r0, [r8, #32]
   315ec:	bl	2fd34 <__assert_fail@plt+0x1d740>
   315f0:	strh	r0, [r4, #56]	; 0x38
   315f4:	b	3133c <__assert_fail@plt+0x1ed48>
   315f8:	bic	r1, r1, #4096	; 0x1000
   315fc:	str	r1, [r8, #48]	; 0x30
   31600:	bl	2fa04 <__assert_fail@plt+0x1d410>
   31604:	mov	r3, #0
   31608:	str	r3, [r8, #4]
   3160c:	mov	r1, #3
   31610:	mov	r0, r8
   31614:	bl	3030c <__assert_fail@plt+0x1dd18>
   31618:	cmp	r0, #0
   3161c:	str	r0, [r8, #4]
   31620:	movne	r4, r0
   31624:	bne	313f4 <__assert_fail@plt+0x1ee00>
   31628:	ldr	r0, [r8, #48]	; 0x30
   3162c:	tst	r0, #8192	; 0x2000
   31630:	bne	31338 <__assert_fail@plt+0x1ed44>
   31634:	ldr	r3, [r4, #32]
   31638:	cmp	r3, #0
   3163c:	beq	31650 <__assert_fail@plt+0x1f05c>
   31640:	ldrh	r3, [r4, #56]	; 0x38
   31644:	cmp	r3, #4
   31648:	movne	r3, #7
   3164c:	strhne	r3, [r4, #56]	; 0x38
   31650:	add	r1, r8, #56	; 0x38
   31654:	mov	r2, r4
   31658:	bl	30240 <__assert_fail@plt+0x1dc4c>
   3165c:	b	3133c <__assert_fail@plt+0x1ed48>
   31660:	ldr	r3, [r8, #48]	; 0x30
   31664:	ldr	r0, [r6, #36]	; 0x24
   31668:	tst	r3, #4
   3166c:	bne	3168c <__assert_fail@plt+0x1f098>
   31670:	tst	r3, #512	; 0x200
   31674:	beq	317d4 <__assert_fail@plt+0x1f1e0>
   31678:	mov	r1, r0
   3167c:	mov	r2, #1
   31680:	mov	r0, r8
   31684:	bl	2fbb0 <__assert_fail@plt+0x1d5bc>
   31688:	ldr	r0, [r6, #36]	; 0x24
   3168c:	bl	125ac <close@plt>
   31690:	b	312f0 <__assert_fail@plt+0x1ecfc>
   31694:	ldr	r4, [r8, #4]
   31698:	b	313f4 <__assert_fail@plt+0x1ee00>
   3169c:	ldrb	r3, [r4, #1]
   316a0:	cmp	r3, #0
   316a4:	beq	314dc <__assert_fail@plt+0x1eee8>
   316a8:	b	314b8 <__assert_fail@plt+0x1eec4>
   316ac:	mov	r0, r6
   316b0:	bl	2f668 <__assert_fail@plt+0x1d074>
   316b4:	bl	12348 <__errno_location@plt>
   316b8:	mov	r3, #0
   316bc:	mov	r4, r3
   316c0:	str	r3, [r0]
   316c4:	str	r3, [r8]
   316c8:	b	3133c <__assert_fail@plt+0x1ed48>
   316cc:	mov	r0, r8
   316d0:	bl	2fc40 <__assert_fail@plt+0x1d64c>
   316d4:	cmp	r0, #0
   316d8:	beq	312f0 <__assert_fail@plt+0x1ecfc>
   316dc:	bl	12348 <__errno_location@plt>
   316e0:	ldr	r3, [r8, #48]	; 0x30
   316e4:	ldr	r2, [r0]
   316e8:	orr	r3, r3, #8192	; 0x2000
   316ec:	str	r2, [r6, #32]
   316f0:	str	r3, [r8, #48]	; 0x30
   316f4:	ldrh	r3, [r6, #56]	; 0x38
   316f8:	cmp	r3, #2
   316fc:	beq	31338 <__assert_fail@plt+0x1ed44>
   31700:	ldr	r0, [r8, #48]	; 0x30
   31704:	b	31300 <__assert_fail@plt+0x1ed0c>
   31708:	ldr	r2, [r8, #24]
   3170c:	mov	r1, #3
   31710:	mov	r0, r8
   31714:	ldr	r3, [r6, #40]	; 0x28
   31718:	str	r6, [r8]
   3171c:	strb	r5, [r2, r3]
   31720:	bl	3030c <__assert_fail@plt+0x1dd18>
   31724:	subs	r3, r0, #0
   31728:	bne	317c4 <__assert_fail@plt+0x1f1d0>
   3172c:	ldr	r3, [r8, #48]	; 0x30
   31730:	tst	r3, #8192	; 0x2000
   31734:	bne	31338 <__assert_fail@plt+0x1ed44>
   31738:	ldr	r6, [r4, #4]
   3173c:	b	3129c <__assert_fail@plt+0x1eca8>
   31740:	bl	2f668 <__assert_fail@plt+0x1d074>
   31744:	b	31480 <__assert_fail@plt+0x1ee8c>
   31748:	ldr	r0, [r4, #36]	; 0x24
   3174c:	bl	125ac <close@plt>
   31750:	b	31414 <__assert_fail@plt+0x1ee20>
   31754:	mov	r3, #0
   31758:	mov	r2, r4
   3175c:	ldr	r0, [r8, #32]
   31760:	ldr	r1, [r8, #48]	; 0x30
   31764:	bl	2fd34 <__assert_fail@plt+0x1d740>
   31768:	strh	r0, [r4, #56]	; 0x38
   3176c:	b	31558 <__assert_fail@plt+0x1ef64>
   31770:	mov	r3, #1
   31774:	mov	r2, r5
   31778:	ldr	r0, [r8, #32]
   3177c:	ldr	r1, [r8, #48]	; 0x30
   31780:	bl	2fd34 <__assert_fail@plt+0x1d740>
   31784:	cmp	r0, #1
   31788:	strh	r0, [r5, #56]	; 0x38
   3178c:	beq	31828 <__assert_fail@plt+0x1f234>
   31790:	mov	r3, #3
   31794:	mov	r4, r5
   31798:	strh	r3, [r5, #60]	; 0x3c
   3179c:	b	31508 <__assert_fail@plt+0x1ef14>
   317a0:	movw	r3, #33540	; 0x8304
   317a4:	movt	r3, #4
   317a8:	ldr	r1, [r6, #4]
   317ac:	mvn	r2, #0
   317b0:	mov	r0, r8
   317b4:	bl	2ff50 <__assert_fail@plt+0x1d95c>
   317b8:	cmp	r0, #0
   317bc:	beq	312f0 <__assert_fail@plt+0x1ecfc>
   317c0:	b	316dc <__assert_fail@plt+0x1f0e8>
   317c4:	mov	r0, r4
   317c8:	mov	r4, r3
   317cc:	bl	2f668 <__assert_fail@plt+0x1d074>
   317d0:	b	31508 <__assert_fail@plt+0x1ef14>
   317d4:	bl	124f8 <fchdir@plt>
   317d8:	cmp	r0, #0
   317dc:	bne	31860 <__assert_fail@plt+0x1f26c>
   317e0:	ldr	r0, [r6, #36]	; 0x24
   317e4:	b	3168c <__assert_fail@plt+0x1f098>
   317e8:	ldr	r1, [r8, #48]	; 0x30
   317ec:	tst	r1, #4
   317f0:	strne	r4, [r8]
   317f4:	bne	31560 <__assert_fail@plt+0x1ef6c>
   317f8:	movw	r2, #24608	; 0x6020
   317fc:	movt	r2, #4
   31800:	ldr	r0, [r8, #32]
   31804:	bl	2ff20 <__assert_fail@plt+0x1d92c>
   31808:	cmp	r0, #0
   3180c:	str	r0, [r4, #36]	; 0x24
   31810:	blt	31880 <__assert_fail@plt+0x1f28c>
   31814:	ldrh	r3, [r4, #58]	; 0x3a
   31818:	ldrh	r0, [r4, #56]	; 0x38
   3181c:	orr	r3, r3, #2
   31820:	strh	r3, [r4, #58]	; 0x3a
   31824:	b	3154c <__assert_fail@plt+0x1ef58>
   31828:	ldr	r1, [r8, #48]	; 0x30
   3182c:	tst	r1, #4
   31830:	bne	31790 <__assert_fail@plt+0x1f19c>
   31834:	movw	r2, #24608	; 0x6020
   31838:	movt	r2, #4
   3183c:	ldr	r0, [r8, #32]
   31840:	bl	2ff20 <__assert_fail@plt+0x1d92c>
   31844:	cmp	r0, #0
   31848:	str	r0, [r5, #36]	; 0x24
   3184c:	blt	3189c <__assert_fail@plt+0x1f2a8>
   31850:	ldrh	r3, [r5, #58]	; 0x3a
   31854:	orr	r3, r3, #2
   31858:	strh	r3, [r5, #58]	; 0x3a
   3185c:	b	31790 <__assert_fail@plt+0x1f19c>
   31860:	bl	12348 <__errno_location@plt>
   31864:	ldr	r3, [r8, #48]	; 0x30
   31868:	ldr	r2, [r0]
   3186c:	ldr	r0, [r6, #36]	; 0x24
   31870:	orr	r3, r3, #8192	; 0x2000
   31874:	str	r2, [r6, #32]
   31878:	str	r3, [r8, #48]	; 0x30
   3187c:	b	3168c <__assert_fail@plt+0x1f098>
   31880:	bl	12348 <__errno_location@plt>
   31884:	ldr	r3, [r0]
   31888:	mov	r2, #7
   3188c:	str	r3, [r4, #32]
   31890:	strh	r2, [r4, #56]	; 0x38
   31894:	str	r4, [r8]
   31898:	b	3133c <__assert_fail@plt+0x1ed48>
   3189c:	bl	12348 <__errno_location@plt>
   318a0:	ldr	r3, [r0]
   318a4:	mov	r2, #7
   318a8:	str	r3, [r5, #32]
   318ac:	strh	r2, [r5, #56]	; 0x38
   318b0:	b	31790 <__assert_fail@plt+0x1f19c>
   318b4:	cmp	r2, #4
   318b8:	bhi	318cc <__assert_fail@plt+0x1f2d8>
   318bc:	mov	r3, #0
   318c0:	strh	r2, [r1, #60]	; 0x3c
   318c4:	mov	r0, r3
   318c8:	bx	lr
   318cc:	str	r4, [sp, #-8]!
   318d0:	str	lr, [sp, #4]
   318d4:	bl	12348 <__errno_location@plt>
   318d8:	mov	r2, #22
   318dc:	mov	r3, #1
   318e0:	ldr	r4, [sp]
   318e4:	add	sp, sp, #4
   318e8:	str	r2, [r0]
   318ec:	mov	r0, r3
   318f0:	pop	{pc}		; (ldr pc, [sp], #4)
   318f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   318f8:	mov	r4, r1
   318fc:	mov	r5, r0
   31900:	strd	r6, [sp, #8]
   31904:	str	r8, [sp, #16]
   31908:	str	lr, [sp, #20]
   3190c:	bl	12348 <__errno_location@plt>
   31910:	bics	r2, r4, #4096	; 0x1000
   31914:	mov	r7, r0
   31918:	movne	r3, #22
   3191c:	movne	r0, #0
   31920:	strne	r3, [r7]
   31924:	bne	319b8 <__assert_fail@plt+0x1f3c4>
   31928:	ldr	r6, [r5]
   3192c:	str	r2, [r7]
   31930:	ldr	r3, [r5, #48]	; 0x30
   31934:	ands	r0, r3, #8192	; 0x2000
   31938:	movne	r0, r2
   3193c:	bne	319b8 <__assert_fail@plt+0x1f3c4>
   31940:	ldrh	r3, [r6, #56]	; 0x38
   31944:	cmp	r3, #9
   31948:	beq	31a28 <__assert_fail@plt+0x1f434>
   3194c:	cmp	r3, #1
   31950:	bne	319b8 <__assert_fail@plt+0x1f3c4>
   31954:	ldr	r0, [r5, #4]
   31958:	cmp	r0, #0
   3195c:	beq	31964 <__assert_fail@plt+0x1f370>
   31960:	bl	2fa04 <__assert_fail@plt+0x1d410>
   31964:	cmp	r4, #4096	; 0x1000
   31968:	movne	r4, #1
   3196c:	bne	31980 <__assert_fail@plt+0x1f38c>
   31970:	ldr	r3, [r5, #48]	; 0x30
   31974:	mov	r4, #2
   31978:	orr	r3, r3, #4096	; 0x1000
   3197c:	str	r3, [r5, #48]	; 0x30
   31980:	ldr	r3, [r6, #48]	; 0x30
   31984:	cmp	r3, #0
   31988:	bne	319a8 <__assert_fail@plt+0x1f3b4>
   3198c:	ldr	r3, [r6, #24]
   31990:	ldrb	r3, [r3]
   31994:	cmp	r3, #47	; 0x2f
   31998:	beq	319a8 <__assert_fail@plt+0x1f3b4>
   3199c:	ldr	r1, [r5, #48]	; 0x30
   319a0:	ands	r6, r1, #4
   319a4:	beq	319cc <__assert_fail@plt+0x1f3d8>
   319a8:	mov	r1, r4
   319ac:	mov	r0, r5
   319b0:	bl	3030c <__assert_fail@plt+0x1dd18>
   319b4:	str	r0, [r5, #4]
   319b8:	ldrd	r4, [sp]
   319bc:	ldrd	r6, [sp, #8]
   319c0:	ldr	r8, [sp, #16]
   319c4:	add	sp, sp, #20
   319c8:	pop	{pc}		; (ldr pc, [sp], #4)
   319cc:	movw	r2, #24608	; 0x6020
   319d0:	movt	r2, #4
   319d4:	ldr	r0, [r5, #32]
   319d8:	bl	2ff20 <__assert_fail@plt+0x1d92c>
   319dc:	subs	r8, r0, #0
   319e0:	movlt	r0, r6
   319e4:	strlt	r6, [r5, #4]
   319e8:	blt	319b8 <__assert_fail@plt+0x1f3c4>
   319ec:	mov	r1, r4
   319f0:	mov	r0, r5
   319f4:	bl	3030c <__assert_fail@plt+0x1dd18>
   319f8:	ldr	r3, [r5, #48]	; 0x30
   319fc:	str	r0, [r5, #4]
   31a00:	ands	r4, r3, #512	; 0x200
   31a04:	bne	31a30 <__assert_fail@plt+0x1f43c>
   31a08:	mov	r0, r8
   31a0c:	bl	124f8 <fchdir@plt>
   31a10:	cmp	r0, #0
   31a14:	bne	31a44 <__assert_fail@plt+0x1f450>
   31a18:	mov	r0, r8
   31a1c:	bl	125ac <close@plt>
   31a20:	ldr	r0, [r5, #4]
   31a24:	b	319b8 <__assert_fail@plt+0x1f3c4>
   31a28:	ldr	r0, [r6, #8]
   31a2c:	b	319b8 <__assert_fail@plt+0x1f3c4>
   31a30:	mov	r1, r8
   31a34:	mov	r2, #1
   31a38:	mov	r0, r5
   31a3c:	bl	2fbb0 <__assert_fail@plt+0x1d5bc>
   31a40:	b	31a20 <__assert_fail@plt+0x1f42c>
   31a44:	ldr	r5, [r7]
   31a48:	mov	r0, r8
   31a4c:	bl	125ac <close@plt>
   31a50:	mov	r0, r4
   31a54:	str	r5, [r7]
   31a58:	b	319b8 <__assert_fail@plt+0x1f3c4>
   31a5c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   31a60:	subs	r4, r0, #0
   31a64:	strd	r6, [sp, #8]
   31a68:	str	r8, [sp, #16]
   31a6c:	str	lr, [sp, #20]
   31a70:	beq	31ad4 <__assert_fail@plt+0x1f4e0>
   31a74:	cmp	r4, #10
   31a78:	beq	31a94 <__assert_fail@plt+0x1f4a0>
   31a7c:	mov	r0, r4
   31a80:	ldrd	r4, [sp]
   31a84:	ldrd	r6, [sp, #8]
   31a88:	ldr	r8, [sp, #16]
   31a8c:	add	sp, sp, #20
   31a90:	pop	{pc}		; (ldr pc, [sp], #4)
   31a94:	mov	r5, r1
   31a98:	movw	r1, #33544	; 0x8308
   31a9c:	movt	r1, #4
   31aa0:	ldr	r6, [r5]
   31aa4:	mov	r0, r6
   31aa8:	bl	11f40 <strcmp@plt>
   31aac:	subs	r7, r0, #0
   31ab0:	bne	31a7c <__assert_fail@plt+0x1f488>
   31ab4:	mov	r0, r6
   31ab8:	mvn	r4, #0
   31abc:	bl	1251c <freecon@plt>
   31ac0:	str	r7, [r5]
   31ac4:	bl	12348 <__errno_location@plt>
   31ac8:	mov	r3, #61	; 0x3d
   31acc:	str	r3, [r0]
   31ad0:	b	31a7c <__assert_fail@plt+0x1f488>
   31ad4:	bl	12348 <__errno_location@plt>
   31ad8:	mov	r3, #95	; 0x5f
   31adc:	mvn	r4, #0
   31ae0:	str	r3, [r0]
   31ae4:	b	31a7c <__assert_fail@plt+0x1f488>
   31ae8:	str	r4, [sp, #-8]!
   31aec:	mov	r4, r1
   31af0:	str	lr, [sp, #4]
   31af4:	bl	122e8 <getfilecon@plt>
   31af8:	mov	r1, r4
   31afc:	ldr	r4, [sp]
   31b00:	ldr	lr, [sp, #4]
   31b04:	add	sp, sp, #8
   31b08:	b	31a5c <__assert_fail@plt+0x1f468>
   31b0c:	str	r4, [sp, #-8]!
   31b10:	mov	r4, r1
   31b14:	str	lr, [sp, #4]
   31b18:	bl	12234 <lgetfilecon@plt>
   31b1c:	mov	r1, r4
   31b20:	ldr	r4, [sp]
   31b24:	ldr	lr, [sp, #4]
   31b28:	add	sp, sp, #8
   31b2c:	b	31a5c <__assert_fail@plt+0x1f468>
   31b30:	str	r4, [sp, #-8]!
   31b34:	mov	r4, r1
   31b38:	str	lr, [sp, #4]
   31b3c:	bl	120f0 <fgetfilecon@plt>
   31b40:	mov	r1, r4
   31b44:	ldr	r4, [sp]
   31b48:	ldr	lr, [sp, #4]
   31b4c:	add	sp, sp, #8
   31b50:	b	31a5c <__assert_fail@plt+0x1f468>
   31b54:	cmp	r0, #0
   31b58:	beq	31b64 <__assert_fail@plt+0x1f570>
   31b5c:	blt	31b6c <__assert_fail@plt+0x1f578>
   31b60:	b	12240 <malloc@plt>
   31b64:	mov	r0, #1
   31b68:	b	12240 <malloc@plt>
   31b6c:	str	r4, [sp, #-8]!
   31b70:	str	lr, [sp, #4]
   31b74:	bl	12348 <__errno_location@plt>
   31b78:	mov	r3, #12
   31b7c:	ldr	r4, [sp]
   31b80:	add	sp, sp, #4
   31b84:	str	r3, [r0]
   31b88:	mov	r0, #0
   31b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   31b90:	strd	r4, [sp, #-20]!	; 0xffffffec
   31b94:	mov	r5, r2
   31b98:	strd	r6, [sp, #8]
   31b9c:	subs	r6, r0, #0
   31ba0:	mov	r7, r1
   31ba4:	str	lr, [sp, #16]
   31ba8:	sub	sp, sp, #12
   31bac:	addeq	r6, sp, #4
   31bb0:	mov	r0, r6
   31bb4:	bl	121d4 <mbrtowc@plt>
   31bb8:	cmp	r5, #0
   31bbc:	cmnne	r0, #3
   31bc0:	mov	r4, r0
   31bc4:	bhi	31be0 <__assert_fail@plt+0x1f5ec>
   31bc8:	mov	r0, r4
   31bcc:	add	sp, sp, #12
   31bd0:	ldrd	r4, [sp]
   31bd4:	ldrd	r6, [sp, #8]
   31bd8:	add	sp, sp, #16
   31bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   31be0:	mov	r0, #0
   31be4:	bl	41afc <__assert_fail@plt+0x2f508>
   31be8:	cmp	r0, #0
   31bec:	bne	31bc8 <__assert_fail@plt+0x1f5d4>
   31bf0:	ldrb	r3, [r7]
   31bf4:	mov	r4, #1
   31bf8:	str	r3, [r6]
   31bfc:	b	31bc8 <__assert_fail@plt+0x1f5d4>
   31c00:	strd	r4, [sp, #-24]!	; 0xffffffe8
   31c04:	mov	r4, r0
   31c08:	strd	r6, [sp, #8]
   31c0c:	str	r8, [sp, #16]
   31c10:	str	lr, [sp, #20]
   31c14:	bl	12300 <strlen@plt>
   31c18:	add	r0, r0, #1
   31c1c:	mov	ip, r4
   31c20:	mov	r3, #0
   31c24:	b	31c38 <__assert_fail@plt+0x1f644>
   31c28:	cmp	r0, r2
   31c2c:	strb	r1, [ip], #1
   31c30:	bls	31ca8 <__assert_fail@plt+0x1f6b4>
   31c34:	mov	r3, r2
   31c38:	ldrb	r1, [r4, r3]
   31c3c:	add	r2, r3, #1
   31c40:	cmp	r1, #92	; 0x5c
   31c44:	bne	31c28 <__assert_fail@plt+0x1f634>
   31c48:	add	lr, r3, #4
   31c4c:	cmp	lr, r0
   31c50:	bcs	31c28 <__assert_fail@plt+0x1f634>
   31c54:	ldrb	r5, [r4, r2]
   31c58:	sub	r5, r5, #48	; 0x30
   31c5c:	uxtb	r6, r5
   31c60:	cmp	r6, #3
   31c64:	bhi	31c28 <__assert_fail@plt+0x1f634>
   31c68:	add	r3, r4, r3
   31c6c:	ldrb	r6, [r3, #2]
   31c70:	sub	r6, r6, #48	; 0x30
   31c74:	uxtb	r7, r6
   31c78:	cmp	r7, #7
   31c7c:	bhi	31c28 <__assert_fail@plt+0x1f634>
   31c80:	ldrb	r3, [r3, #3]
   31c84:	sub	r3, r3, #48	; 0x30
   31c88:	uxtb	r3, r3
   31c8c:	cmp	r3, #7
   31c90:	bhi	31c28 <__assert_fail@plt+0x1f634>
   31c94:	add	r5, r6, r5, lsl #3
   31c98:	mov	r2, lr
   31c9c:	add	r5, r3, r5, lsl #3
   31ca0:	strb	r5, [ip], #1
   31ca4:	b	31c34 <__assert_fail@plt+0x1f640>
   31ca8:	ldrd	r4, [sp]
   31cac:	ldrd	r6, [sp, #8]
   31cb0:	ldr	r8, [sp, #16]
   31cb4:	add	sp, sp, #20
   31cb8:	pop	{pc}		; (ldr pc, [sp], #4)
   31cbc:	str	r4, [sp, #-8]!
   31cc0:	mov	r4, r0
   31cc4:	ldr	r0, [r0]
   31cc8:	str	lr, [sp, #4]
   31ccc:	bl	2f668 <__assert_fail@plt+0x1d074>
   31cd0:	ldr	r0, [r4, #4]
   31cd4:	bl	2f668 <__assert_fail@plt+0x1d074>
   31cd8:	ldr	r0, [r4, #8]
   31cdc:	bl	2f668 <__assert_fail@plt+0x1d074>
   31ce0:	ldrb	r3, [r4, #24]
   31ce4:	tst	r3, #4
   31ce8:	bne	31d00 <__assert_fail@plt+0x1f70c>
   31cec:	mov	r0, r4
   31cf0:	ldr	r4, [sp]
   31cf4:	ldr	lr, [sp, #4]
   31cf8:	add	sp, sp, #8
   31cfc:	b	2f668 <__assert_fail@plt+0x1d074>
   31d00:	ldr	r0, [r4, #12]
   31d04:	bl	2f668 <__assert_fail@plt+0x1d074>
   31d08:	b	31cec <__assert_fail@plt+0x1f6f8>
   31d0c:	movw	r1, #20436	; 0x4fd4
   31d10:	movt	r1, #4
   31d14:	strd	r4, [sp, #-36]!	; 0xffffffdc
   31d18:	movw	r0, #33556	; 0x8314
   31d1c:	movt	r0, #4
   31d20:	strd	r6, [sp, #8]
   31d24:	strd	r8, [sp, #16]
   31d28:	strd	sl, [sp, #24]
   31d2c:	str	lr, [sp, #32]
   31d30:	sub	sp, sp, #44	; 0x2c
   31d34:	bl	12504 <fopen64@plt>
   31d38:	subs	r8, r0, #0
   31d3c:	beq	321c4 <__assert_fail@plt+0x1fbd0>
   31d40:	movw	r2, #33600	; 0x8340
   31d44:	movt	r2, #4
   31d48:	mov	r3, #0
   31d4c:	movw	r9, #33580	; 0x832c
   31d50:	movt	r9, #4
   31d54:	add	sl, sp, #16
   31d58:	str	r2, [sp, #8]
   31d5c:	mov	r2, #65280	; 0xff00
   31d60:	movt	r2, #15
   31d64:	str	r2, [sp, #12]
   31d68:	str	r3, [sp, #20]
   31d6c:	str	r3, [sp, #24]
   31d70:	mov	r3, r8
   31d74:	mov	r2, #10
   31d78:	add	r1, sp, #24
   31d7c:	add	r0, sp, #20
   31d80:	bl	11f10 <__getdelim@plt>
   31d84:	cmn	r0, #1
   31d88:	beq	31f50 <__assert_fail@plt+0x1f95c>
   31d8c:	add	ip, sp, #36	; 0x24
   31d90:	add	r3, sp, #32
   31d94:	ldr	r0, [sp, #20]
   31d98:	add	r2, sp, #28
   31d9c:	mov	r1, r9
   31da0:	str	ip, [sp]
   31da4:	bl	12498 <sscanf@plt>
   31da8:	sub	r0, r0, #2
   31dac:	cmp	r0, #1
   31db0:	bhi	31d70 <__assert_fail@plt+0x1f77c>
   31db4:	ldr	r5, [sp, #20]
   31db8:	mov	r1, #32
   31dbc:	ldr	r3, [sp, #36]	; 0x24
   31dc0:	add	r5, r5, r3
   31dc4:	mov	r0, r5
   31dc8:	bl	1230c <strchr@plt>
   31dcc:	subs	r4, r0, #0
   31dd0:	beq	31d70 <__assert_fail@plt+0x1f77c>
   31dd4:	mov	r6, #0
   31dd8:	mov	r1, #32
   31ddc:	strb	r6, [r4], #1
   31de0:	mov	r0, r4
   31de4:	bl	1230c <strchr@plt>
   31de8:	cmp	r0, #0
   31dec:	beq	31d70 <__assert_fail@plt+0x1f77c>
   31df0:	strb	r6, [r0], #1
   31df4:	ldr	r1, [sp, #8]
   31df8:	bl	4097c <__assert_fail@plt+0x2e388>
   31dfc:	cmp	r0, #0
   31e00:	beq	31d70 <__assert_fail@plt+0x1f77c>
   31e04:	add	r7, r0, #3
   31e08:	mov	r1, #32
   31e0c:	mov	r0, r7
   31e10:	bl	1230c <strchr@plt>
   31e14:	subs	fp, r0, #0
   31e18:	beq	31d70 <__assert_fail@plt+0x1f77c>
   31e1c:	mov	r1, #32
   31e20:	strb	r6, [fp], #1
   31e24:	mov	r0, fp
   31e28:	bl	1230c <strchr@plt>
   31e2c:	cmp	r0, #0
   31e30:	beq	31d70 <__assert_fail@plt+0x1f77c>
   31e34:	strb	r6, [r0]
   31e38:	mov	r0, fp
   31e3c:	bl	31c00 <__assert_fail@plt+0x1f60c>
   31e40:	mov	r0, r4
   31e44:	bl	31c00 <__assert_fail@plt+0x1f60c>
   31e48:	mov	r0, r5
   31e4c:	bl	31c00 <__assert_fail@plt+0x1f60c>
   31e50:	mov	r0, r7
   31e54:	bl	31c00 <__assert_fail@plt+0x1f60c>
   31e58:	mov	r0, #32
   31e5c:	bl	2da2c <__assert_fail@plt+0x1b438>
   31e60:	mov	r6, r0
   31e64:	mov	r0, fp
   31e68:	bl	2de7c <__assert_fail@plt+0x1b888>
   31e6c:	str	r0, [r6]
   31e70:	mov	r0, r4
   31e74:	bl	2de7c <__assert_fail@plt+0x1b888>
   31e78:	str	r0, [r6, #4]
   31e7c:	mov	r0, r5
   31e80:	bl	2de7c <__assert_fail@plt+0x1b888>
   31e84:	str	r0, [r6, #8]
   31e88:	mov	r0, r7
   31e8c:	bl	2de7c <__assert_fail@plt+0x1b888>
   31e90:	ldr	r1, [sp, #12]
   31e94:	mov	r2, #0
   31e98:	movt	r2, #65520	; 0xfff0
   31e9c:	str	r0, [r6, #12]
   31ea0:	mov	r4, r0
   31ea4:	ldr	ip, [sp, #28]
   31ea8:	ldr	r5, [sp, #32]
   31eac:	ldrb	r3, [r6, #24]
   31eb0:	and	lr, r1, ip, lsl #8
   31eb4:	bic	ip, ip, #4080	; 0xff0
   31eb8:	bic	ip, ip, #15
   31ebc:	and	r1, r2, r5, lsl #12
   31ec0:	uxtb	r2, r5
   31ec4:	orr	ip, ip, r5, lsr #20
   31ec8:	orr	r2, r2, lr
   31ecc:	orr	r2, r1, r2
   31ed0:	orr	r3, r3, #4
   31ed4:	movw	r1, #33604	; 0x8344
   31ed8:	movt	r1, #4
   31edc:	str	r2, [r6, #16]
   31ee0:	str	ip, [r6, #20]
   31ee4:	strb	r3, [r6, #24]
   31ee8:	bl	11f40 <strcmp@plt>
   31eec:	cmp	r0, #0
   31ef0:	beq	31f0c <__assert_fail@plt+0x1f918>
   31ef4:	movw	r1, #33612	; 0x834c
   31ef8:	movt	r1, #4
   31efc:	mov	r0, r4
   31f00:	bl	11f40 <strcmp@plt>
   31f04:	cmp	r0, #0
   31f08:	bne	31fa0 <__assert_fail@plt+0x1f9ac>
   31f0c:	mov	r0, #1
   31f10:	ldrb	r3, [r6, #24]
   31f14:	mov	r1, #58	; 0x3a
   31f18:	ldr	r5, [r6]
   31f1c:	bfi	r3, r0, #0, #1
   31f20:	mov	r0, r5
   31f24:	strb	r3, [r6, #24]
   31f28:	bl	1230c <strchr@plt>
   31f2c:	cmp	r0, #0
   31f30:	beq	320c4 <__assert_fail@plt+0x1fad0>
   31f34:	mov	r0, #1
   31f38:	ldrb	r3, [r6, #24]
   31f3c:	bfi	r3, r0, #1, #1
   31f40:	strb	r3, [r6, #24]
   31f44:	str	r6, [sl]
   31f48:	add	sl, r6, #28
   31f4c:	b	31d70 <__assert_fail@plt+0x1f77c>
   31f50:	ldr	r0, [sp, #20]
   31f54:	bl	2f668 <__assert_fail@plt+0x1d074>
   31f58:	ldr	r3, [r8]
   31f5c:	tst	r3, #32
   31f60:	bne	32558 <__assert_fail@plt+0x1ff64>
   31f64:	mov	r0, r8
   31f68:	bl	123fc <fclose@plt>
   31f6c:	cmn	r0, #1
   31f70:	beq	32418 <__assert_fail@plt+0x1fe24>
   31f74:	mov	r3, #0
   31f78:	str	r3, [sl]
   31f7c:	ldr	r6, [sp, #16]
   31f80:	mov	r0, r6
   31f84:	add	sp, sp, #44	; 0x2c
   31f88:	ldrd	r4, [sp]
   31f8c:	ldrd	r6, [sp, #8]
   31f90:	ldrd	r8, [sp, #16]
   31f94:	ldrd	sl, [sp, #24]
   31f98:	add	sp, sp, #32
   31f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   31fa0:	movw	r1, #33620	; 0x8354
   31fa4:	movt	r1, #4
   31fa8:	mov	r0, r4
   31fac:	bl	11f40 <strcmp@plt>
   31fb0:	cmp	r0, #0
   31fb4:	beq	31f0c <__assert_fail@plt+0x1f918>
   31fb8:	movw	r1, #33628	; 0x835c
   31fbc:	movt	r1, #4
   31fc0:	mov	r0, r4
   31fc4:	bl	11f40 <strcmp@plt>
   31fc8:	cmp	r0, #0
   31fcc:	beq	31f0c <__assert_fail@plt+0x1f918>
   31fd0:	movw	r1, #33636	; 0x8364
   31fd4:	movt	r1, #4
   31fd8:	mov	r0, r4
   31fdc:	bl	11f40 <strcmp@plt>
   31fe0:	cmp	r0, #0
   31fe4:	beq	31f0c <__assert_fail@plt+0x1f918>
   31fe8:	movw	r1, #33644	; 0x836c
   31fec:	movt	r1, #4
   31ff0:	mov	r0, r4
   31ff4:	bl	11f40 <strcmp@plt>
   31ff8:	cmp	r0, #0
   31ffc:	beq	31f0c <__assert_fail@plt+0x1f918>
   32000:	movw	r1, #33652	; 0x8374
   32004:	movt	r1, #4
   32008:	mov	r0, r4
   3200c:	bl	11f40 <strcmp@plt>
   32010:	cmp	r0, #0
   32014:	beq	31f0c <__assert_fail@plt+0x1f918>
   32018:	movw	r1, #33664	; 0x8380
   3201c:	movt	r1, #4
   32020:	mov	r0, r4
   32024:	bl	11f40 <strcmp@plt>
   32028:	cmp	r0, #0
   3202c:	beq	31f0c <__assert_fail@plt+0x1f918>
   32030:	movw	r1, #33672	; 0x8388
   32034:	movt	r1, #4
   32038:	mov	r0, r4
   3203c:	bl	11f40 <strcmp@plt>
   32040:	cmp	r0, #0
   32044:	beq	31f0c <__assert_fail@plt+0x1f918>
   32048:	movw	r1, #33684	; 0x8394
   3204c:	movt	r1, #4
   32050:	mov	r0, r4
   32054:	bl	11f40 <strcmp@plt>
   32058:	cmp	r0, #0
   3205c:	beq	31f0c <__assert_fail@plt+0x1f918>
   32060:	movw	r1, #33692	; 0x839c
   32064:	movt	r1, #4
   32068:	mov	r0, r4
   3206c:	bl	11f40 <strcmp@plt>
   32070:	cmp	r0, #0
   32074:	beq	31f0c <__assert_fail@plt+0x1f918>
   32078:	movw	r1, #33700	; 0x83a4
   3207c:	movt	r1, #4
   32080:	mov	r0, r4
   32084:	bl	11f40 <strcmp@plt>
   32088:	cmp	r0, #0
   3208c:	beq	31f0c <__assert_fail@plt+0x1f918>
   32090:	movw	r1, #20432	; 0x4fd0
   32094:	movt	r1, #4
   32098:	mov	r0, r4
   3209c:	bl	11f40 <strcmp@plt>
   320a0:	cmp	r0, #0
   320a4:	beq	31f0c <__assert_fail@plt+0x1f918>
   320a8:	movw	r1, #33708	; 0x83ac
   320ac:	movt	r1, #4
   320b0:	mov	r0, r4
   320b4:	bl	11f40 <strcmp@plt>
   320b8:	clz	r0, r0
   320bc:	lsr	r0, r0, #5
   320c0:	b	31f10 <__assert_fail@plt+0x1f91c>
   320c4:	ldrb	r3, [r5]
   320c8:	cmp	r3, #47	; 0x2f
   320cc:	beq	325cc <__assert_fail@plt+0x1ffd8>
   320d0:	movw	r1, #33740	; 0x83cc
   320d4:	movt	r1, #4
   320d8:	mov	r0, r4
   320dc:	bl	11f40 <strcmp@plt>
   320e0:	cmp	r0, #0
   320e4:	beq	31f34 <__assert_fail@plt+0x1f940>
   320e8:	movw	r1, #20440	; 0x4fd8
   320ec:	movt	r1, #4
   320f0:	mov	r0, r4
   320f4:	bl	11f40 <strcmp@plt>
   320f8:	cmp	r0, #0
   320fc:	beq	31f34 <__assert_fail@plt+0x1f940>
   32100:	movw	r1, #33748	; 0x83d4
   32104:	movt	r1, #4
   32108:	mov	r0, r4
   3210c:	bl	11f40 <strcmp@plt>
   32110:	cmp	r0, #0
   32114:	beq	31f34 <__assert_fail@plt+0x1f940>
   32118:	movw	r1, #33756	; 0x83dc
   3211c:	movt	r1, #4
   32120:	mov	r0, r4
   32124:	bl	11f40 <strcmp@plt>
   32128:	cmp	r0, #0
   3212c:	beq	31f34 <__assert_fail@plt+0x1f940>
   32130:	movw	r1, #33768	; 0x83e8
   32134:	movt	r1, #4
   32138:	mov	r0, r4
   3213c:	bl	11f40 <strcmp@plt>
   32140:	cmp	r0, #0
   32144:	beq	31f34 <__assert_fail@plt+0x1f940>
   32148:	movw	r1, #33776	; 0x83f0
   3214c:	movt	r1, #4
   32150:	mov	r0, r4
   32154:	bl	11f40 <strcmp@plt>
   32158:	cmp	r0, #0
   3215c:	beq	31f34 <__assert_fail@plt+0x1f940>
   32160:	movw	r1, #33784	; 0x83f8
   32164:	movt	r1, #4
   32168:	mov	r0, r4
   3216c:	bl	11f40 <strcmp@plt>
   32170:	cmp	r0, #0
   32174:	beq	31f34 <__assert_fail@plt+0x1f940>
   32178:	movw	r1, #33792	; 0x8400
   3217c:	movt	r1, #4
   32180:	mov	r0, r4
   32184:	bl	11f40 <strcmp@plt>
   32188:	cmp	r0, #0
   3218c:	beq	31f34 <__assert_fail@plt+0x1f940>
   32190:	mov	r0, r4
   32194:	movw	r1, #33800	; 0x8408
   32198:	movt	r1, #4
   3219c:	bl	11f40 <strcmp@plt>
   321a0:	cmp	r0, #0
   321a4:	beq	31f34 <__assert_fail@plt+0x1f940>
   321a8:	mov	r1, r5
   321ac:	movw	r0, #33808	; 0x8410
   321b0:	movt	r0, #4
   321b4:	bl	11f40 <strcmp@plt>
   321b8:	clz	r0, r0
   321bc:	lsr	r0, r0, #5
   321c0:	b	31f38 <__assert_fail@plt+0x1f944>
   321c4:	movw	r1, #34332	; 0x861c
   321c8:	movt	r1, #4
   321cc:	movw	r0, #33816	; 0x8418
   321d0:	movt	r0, #4
   321d4:	bl	12534 <setmntent@plt>
   321d8:	subs	r6, r0, #0
   321dc:	beq	31f80 <__assert_fail@plt+0x1f98c>
   321e0:	mov	r0, r6
   321e4:	movw	r8, #33828	; 0x8424
   321e8:	movt	r8, #4
   321ec:	movw	r7, #33604	; 0x8344
   321f0:	movt	r7, #4
   321f4:	movw	fp, #33612	; 0x834c
   321f8:	movt	fp, #4
   321fc:	add	sl, sp, #16
   32200:	bl	121f8 <getmntent@plt>
   32204:	subs	r5, r0, #0
   32208:	beq	32408 <__assert_fail@plt+0x1fe14>
   3220c:	mov	r1, r8
   32210:	bl	121a4 <hasmntopt@plt>
   32214:	mov	r9, r0
   32218:	mov	r0, #32
   3221c:	bl	2da2c <__assert_fail@plt+0x1b438>
   32220:	mov	r4, r0
   32224:	ldr	r0, [r5]
   32228:	bl	2de7c <__assert_fail@plt+0x1b888>
   3222c:	str	r0, [r4]
   32230:	ldr	r0, [r5, #4]
   32234:	bl	2de7c <__assert_fail@plt+0x1b888>
   32238:	mov	r3, #0
   3223c:	str	r0, [r4, #4]
   32240:	ldr	r0, [r5, #8]
   32244:	str	r3, [r4, #8]
   32248:	bl	2de7c <__assert_fail@plt+0x1b888>
   3224c:	ldrb	r3, [r4, #24]
   32250:	mov	r1, r7
   32254:	mov	r5, r0
   32258:	str	r0, [r4, #12]
   3225c:	orr	r3, r3, #4
   32260:	strb	r3, [r4, #24]
   32264:	bl	11f40 <strcmp@plt>
   32268:	cmp	r0, #0
   3226c:	beq	323ac <__assert_fail@plt+0x1fdb8>
   32270:	mov	r1, fp
   32274:	mov	r0, r5
   32278:	bl	11f40 <strcmp@plt>
   3227c:	cmp	r0, #0
   32280:	beq	323ac <__assert_fail@plt+0x1fdb8>
   32284:	movw	r1, #33620	; 0x8354
   32288:	movt	r1, #4
   3228c:	mov	r0, r5
   32290:	bl	11f40 <strcmp@plt>
   32294:	cmp	r0, #0
   32298:	beq	323ac <__assert_fail@plt+0x1fdb8>
   3229c:	movw	r1, #33628	; 0x835c
   322a0:	movt	r1, #4
   322a4:	mov	r0, r5
   322a8:	bl	11f40 <strcmp@plt>
   322ac:	cmp	r0, #0
   322b0:	beq	323ac <__assert_fail@plt+0x1fdb8>
   322b4:	movw	r1, #33636	; 0x8364
   322b8:	movt	r1, #4
   322bc:	mov	r0, r5
   322c0:	bl	11f40 <strcmp@plt>
   322c4:	cmp	r0, #0
   322c8:	beq	323ac <__assert_fail@plt+0x1fdb8>
   322cc:	movw	r1, #33644	; 0x836c
   322d0:	movt	r1, #4
   322d4:	mov	r0, r5
   322d8:	bl	11f40 <strcmp@plt>
   322dc:	cmp	r0, #0
   322e0:	beq	323ac <__assert_fail@plt+0x1fdb8>
   322e4:	movw	r1, #33652	; 0x8374
   322e8:	movt	r1, #4
   322ec:	mov	r0, r5
   322f0:	bl	11f40 <strcmp@plt>
   322f4:	cmp	r0, #0
   322f8:	beq	323ac <__assert_fail@plt+0x1fdb8>
   322fc:	movw	r1, #33664	; 0x8380
   32300:	movt	r1, #4
   32304:	mov	r0, r5
   32308:	bl	11f40 <strcmp@plt>
   3230c:	cmp	r0, #0
   32310:	beq	323ac <__assert_fail@plt+0x1fdb8>
   32314:	movw	r1, #33672	; 0x8388
   32318:	movt	r1, #4
   3231c:	mov	r0, r5
   32320:	bl	11f40 <strcmp@plt>
   32324:	cmp	r0, #0
   32328:	beq	323ac <__assert_fail@plt+0x1fdb8>
   3232c:	movw	r1, #33684	; 0x8394
   32330:	movt	r1, #4
   32334:	mov	r0, r5
   32338:	bl	11f40 <strcmp@plt>
   3233c:	cmp	r0, #0
   32340:	beq	323ac <__assert_fail@plt+0x1fdb8>
   32344:	movw	r1, #33692	; 0x839c
   32348:	movt	r1, #4
   3234c:	mov	r0, r5
   32350:	bl	11f40 <strcmp@plt>
   32354:	cmp	r0, #0
   32358:	beq	323ac <__assert_fail@plt+0x1fdb8>
   3235c:	movw	r1, #33700	; 0x83a4
   32360:	movt	r1, #4
   32364:	mov	r0, r5
   32368:	bl	11f40 <strcmp@plt>
   3236c:	cmp	r0, #0
   32370:	beq	323ac <__assert_fail@plt+0x1fdb8>
   32374:	movw	r1, #20432	; 0x4fd0
   32378:	movt	r1, #4
   3237c:	mov	r0, r5
   32380:	bl	11f40 <strcmp@plt>
   32384:	cmp	r0, #0
   32388:	beq	323ac <__assert_fail@plt+0x1fdb8>
   3238c:	movw	r1, #33708	; 0x83ac
   32390:	movt	r1, #4
   32394:	mov	r0, r5
   32398:	bl	11f40 <strcmp@plt>
   3239c:	orrs	r3, r9, r0
   323a0:	moveq	r2, #1
   323a4:	movne	r2, #0
   323a8:	b	323b0 <__assert_fail@plt+0x1fdbc>
   323ac:	mov	r2, #1
   323b0:	ldrb	r3, [r4, #24]
   323b4:	mov	r1, #58	; 0x3a
   323b8:	ldr	r9, [r4]
   323bc:	bfi	r3, r2, #0, #1
   323c0:	mov	r0, r9
   323c4:	strb	r3, [r4, #24]
   323c8:	bl	1230c <strchr@plt>
   323cc:	cmp	r0, #0
   323d0:	beq	32458 <__assert_fail@plt+0x1fe64>
   323d4:	mov	r0, #1
   323d8:	ldrb	r1, [r4, #24]
   323dc:	mvn	r2, #0
   323e0:	mvn	r3, #0
   323e4:	strd	r2, [r4, #16]
   323e8:	bfi	r1, r0, #1, #1
   323ec:	mov	r0, r6
   323f0:	strb	r1, [r4, #24]
   323f4:	str	r4, [sl]
   323f8:	add	sl, r4, #28
   323fc:	bl	121f8 <getmntent@plt>
   32400:	subs	r5, r0, #0
   32404:	bne	3220c <__assert_fail@plt+0x1fc18>
   32408:	mov	r0, r6
   3240c:	bl	12420 <endmntent@plt>
   32410:	cmp	r0, #0
   32414:	bne	31f74 <__assert_fail@plt+0x1f980>
   32418:	bl	12348 <__errno_location@plt>
   3241c:	ldr	r7, [r0]
   32420:	mov	r5, r0
   32424:	mov	r3, #0
   32428:	str	r3, [sl]
   3242c:	ldr	r0, [sp, #16]
   32430:	cmp	r0, r3
   32434:	beq	3244c <__assert_fail@plt+0x1fe58>
   32438:	ldr	r4, [r0, #28]
   3243c:	bl	31cbc <__assert_fail@plt+0x1f6c8>
   32440:	subs	r0, r4, #0
   32444:	str	r4, [sp, #16]
   32448:	bne	32438 <__assert_fail@plt+0x1fe44>
   3244c:	mov	r6, #0
   32450:	str	r7, [r5]
   32454:	b	31f80 <__assert_fail@plt+0x1f98c>
   32458:	ldrb	r3, [r9]
   3245c:	cmp	r3, #47	; 0x2f
   32460:	beq	32574 <__assert_fail@plt+0x1ff80>
   32464:	movw	r1, #33740	; 0x83cc
   32468:	movt	r1, #4
   3246c:	mov	r0, r5
   32470:	bl	11f40 <strcmp@plt>
   32474:	cmp	r0, #0
   32478:	beq	323d4 <__assert_fail@plt+0x1fde0>
   3247c:	movw	r1, #20440	; 0x4fd8
   32480:	movt	r1, #4
   32484:	mov	r0, r5
   32488:	bl	11f40 <strcmp@plt>
   3248c:	cmp	r0, #0
   32490:	beq	323d4 <__assert_fail@plt+0x1fde0>
   32494:	movw	r1, #33748	; 0x83d4
   32498:	movt	r1, #4
   3249c:	mov	r0, r5
   324a0:	bl	11f40 <strcmp@plt>
   324a4:	cmp	r0, #0
   324a8:	beq	323d4 <__assert_fail@plt+0x1fde0>
   324ac:	movw	r1, #33756	; 0x83dc
   324b0:	movt	r1, #4
   324b4:	mov	r0, r5
   324b8:	bl	11f40 <strcmp@plt>
   324bc:	cmp	r0, #0
   324c0:	beq	323d4 <__assert_fail@plt+0x1fde0>
   324c4:	movw	r1, #33768	; 0x83e8
   324c8:	movt	r1, #4
   324cc:	mov	r0, r5
   324d0:	bl	11f40 <strcmp@plt>
   324d4:	cmp	r0, #0
   324d8:	beq	323d4 <__assert_fail@plt+0x1fde0>
   324dc:	movw	r1, #33776	; 0x83f0
   324e0:	movt	r1, #4
   324e4:	mov	r0, r5
   324e8:	bl	11f40 <strcmp@plt>
   324ec:	cmp	r0, #0
   324f0:	beq	323d4 <__assert_fail@plt+0x1fde0>
   324f4:	movw	r1, #33784	; 0x83f8
   324f8:	movt	r1, #4
   324fc:	mov	r0, r5
   32500:	bl	11f40 <strcmp@plt>
   32504:	cmp	r0, #0
   32508:	beq	323d4 <__assert_fail@plt+0x1fde0>
   3250c:	movw	r1, #33792	; 0x8400
   32510:	movt	r1, #4
   32514:	mov	r0, r5
   32518:	bl	11f40 <strcmp@plt>
   3251c:	cmp	r0, #0
   32520:	beq	323d4 <__assert_fail@plt+0x1fde0>
   32524:	mov	r0, r5
   32528:	movw	r1, #33800	; 0x8408
   3252c:	movt	r1, #4
   32530:	bl	11f40 <strcmp@plt>
   32534:	cmp	r0, #0
   32538:	beq	323d4 <__assert_fail@plt+0x1fde0>
   3253c:	mov	r1, r9
   32540:	movw	r0, #33808	; 0x8410
   32544:	movt	r0, #4
   32548:	bl	11f40 <strcmp@plt>
   3254c:	clz	r0, r0
   32550:	lsr	r0, r0, #5
   32554:	b	323d8 <__assert_fail@plt+0x1fde4>
   32558:	bl	12348 <__errno_location@plt>
   3255c:	mov	r5, r0
   32560:	mov	r0, r8
   32564:	ldr	r7, [r5]
   32568:	bl	123fc <fclose@plt>
   3256c:	str	r7, [r5]
   32570:	b	32424 <__assert_fail@plt+0x1fe30>
   32574:	ldrb	r3, [r9, #1]
   32578:	cmp	r3, #47	; 0x2f
   3257c:	bne	32464 <__assert_fail@plt+0x1fe70>
   32580:	movw	r1, #33716	; 0x83b4
   32584:	movt	r1, #4
   32588:	mov	r0, r5
   3258c:	bl	11f40 <strcmp@plt>
   32590:	cmp	r0, #0
   32594:	beq	323d4 <__assert_fail@plt+0x1fde0>
   32598:	movw	r1, #33724	; 0x83bc
   3259c:	movt	r1, #4
   325a0:	mov	r0, r5
   325a4:	bl	11f40 <strcmp@plt>
   325a8:	cmp	r0, #0
   325ac:	beq	323d4 <__assert_fail@plt+0x1fde0>
   325b0:	movw	r1, #33732	; 0x83c4
   325b4:	movt	r1, #4
   325b8:	mov	r0, r5
   325bc:	bl	11f40 <strcmp@plt>
   325c0:	cmp	r0, #0
   325c4:	beq	323d4 <__assert_fail@plt+0x1fde0>
   325c8:	b	32464 <__assert_fail@plt+0x1fe70>
   325cc:	ldrb	r3, [r5, #1]
   325d0:	cmp	r3, #47	; 0x2f
   325d4:	bne	320d0 <__assert_fail@plt+0x1fadc>
   325d8:	movw	r1, #33716	; 0x83b4
   325dc:	movt	r1, #4
   325e0:	mov	r0, r4
   325e4:	bl	11f40 <strcmp@plt>
   325e8:	cmp	r0, #0
   325ec:	beq	31f34 <__assert_fail@plt+0x1f940>
   325f0:	movw	r1, #33724	; 0x83bc
   325f4:	movt	r1, #4
   325f8:	mov	r0, r4
   325fc:	bl	11f40 <strcmp@plt>
   32600:	cmp	r0, #0
   32604:	beq	31f34 <__assert_fail@plt+0x1f940>
   32608:	movw	r1, #33732	; 0x83c4
   3260c:	movt	r1, #4
   32610:	mov	r0, r4
   32614:	bl	11f40 <strcmp@plt>
   32618:	cmp	r0, #0
   3261c:	beq	31f34 <__assert_fail@plt+0x1f940>
   32620:	b	320d0 <__assert_fail@plt+0x1fadc>
   32624:	cmp	r0, #0
   32628:	beq	32650 <__assert_fail@plt+0x2005c>
   3262c:	cmp	r1, #0
   32630:	str	r4, [sp, #-8]!
   32634:	str	lr, [sp, #4]
   32638:	beq	32658 <__assert_fail@plt+0x20064>
   3263c:	blt	3266c <__assert_fail@plt+0x20078>
   32640:	ldr	r4, [sp]
   32644:	ldr	lr, [sp, #4]
   32648:	add	sp, sp, #8
   3264c:	b	120e4 <realloc@plt>
   32650:	mov	r0, r1
   32654:	b	31b54 <__assert_fail@plt+0x1f560>
   32658:	bl	2f668 <__assert_fail@plt+0x1d074>
   3265c:	ldr	r4, [sp]
   32660:	add	sp, sp, #4
   32664:	mov	r0, #0
   32668:	pop	{pc}		; (ldr pc, [sp], #4)
   3266c:	bl	12348 <__errno_location@plt>
   32670:	mov	r3, #12
   32674:	str	r3, [r0]
   32678:	b	3265c <__assert_fail@plt+0x20068>
   3267c:	umull	r2, r3, r1, r2
   32680:	cmp	r3, #0
   32684:	bne	32690 <__assert_fail@plt+0x2009c>
   32688:	mov	r1, r2
   3268c:	b	32624 <__assert_fail@plt+0x20030>
   32690:	str	r4, [sp, #-8]!
   32694:	str	lr, [sp, #4]
   32698:	bl	12348 <__errno_location@plt>
   3269c:	mov	r3, #12
   326a0:	ldr	r4, [sp]
   326a4:	add	sp, sp, #4
   326a8:	str	r3, [r0]
   326ac:	mov	r0, #0
   326b0:	pop	{pc}		; (ldr pc, [sp], #4)
   326b4:	clz	r3, r1
   326b8:	cmp	r0, #0
   326bc:	push	{lr}		; (str lr, [sp, #-4]!)
   326c0:	lsr	r3, r3, #5
   326c4:	mov	lr, r0
   326c8:	moveq	r0, #1
   326cc:	movne	r0, r3
   326d0:	cmp	r0, #0
   326d4:	movne	r0, #0
   326d8:	bne	326ec <__assert_fail@plt+0x200f8>
   326dc:	ldr	r2, [r1, #4]
   326e0:	ldr	r3, [lr, #4]
   326e4:	cmp	r3, r2
   326e8:	beq	32708 <__assert_fail@plt+0x20114>
   326ec:	pop	{pc}		; (ldr pc, [sp], #4)
   326f0:	ldr	r2, [r1, #8]
   326f4:	ldr	ip, [lr, #8]
   326f8:	ldr	r2, [r2, r3, lsl #2]
   326fc:	ldr	ip, [ip, r3, lsl #2]
   32700:	cmp	ip, r2
   32704:	bne	326ec <__assert_fail@plt+0x200f8>
   32708:	subs	r3, r3, #1
   3270c:	bpl	326f0 <__assert_fail@plt+0x200fc>
   32710:	mov	r0, #1
   32714:	pop	{pc}		; (ldr pc, [sp], #4)
   32718:	strd	r4, [sp, #-16]!
   3271c:	mov	r4, r0
   32720:	mov	r5, r2
   32724:	str	r6, [sp, #8]
   32728:	mov	r6, r1
   3272c:	str	lr, [sp, #12]
   32730:	b	32738 <__assert_fail@plt+0x20144>
   32734:	mov	r4, r3
   32738:	ldr	r3, [r4, #4]
   3273c:	cmp	r3, #0
   32740:	bne	32734 <__assert_fail@plt+0x20140>
   32744:	ldr	r3, [r4, #8]
   32748:	cmp	r3, #0
   3274c:	bne	32734 <__assert_fail@plt+0x20140>
   32750:	b	32788 <__assert_fail@plt+0x20194>
   32754:	ldr	r2, [r4]
   32758:	cmp	r2, #0
   3275c:	beq	3279c <__assert_fail@plt+0x201a8>
   32760:	ldr	r3, [r2, #8]
   32764:	sub	r1, r3, r4
   32768:	cmp	r3, #0
   3276c:	clz	r1, r1
   32770:	mov	r4, r2
   32774:	lsr	r1, r1, #5
   32778:	moveq	r2, #1
   3277c:	movne	r2, r1
   32780:	cmp	r2, #0
   32784:	beq	32734 <__assert_fail@plt+0x20140>
   32788:	mov	r1, r4
   3278c:	mov	r0, r5
   32790:	blx	r6
   32794:	cmp	r0, #0
   32798:	beq	32754 <__assert_fail@plt+0x20160>
   3279c:	ldrd	r4, [sp]
   327a0:	ldr	r6, [sp, #8]
   327a4:	add	sp, sp, #12
   327a8:	pop	{pc}		; (ldr pc, [sp], #4)
   327ac:	ldr	r3, [r1, #40]	; 0x28
   327b0:	ldr	ip, [r1, #56]	; 0x38
   327b4:	cmp	ip, r3
   327b8:	ble	3287c <__assert_fail@plt+0x20288>
   327bc:	str	r4, [sp, #-8]!
   327c0:	ldr	r4, [r1, #80]	; 0x50
   327c4:	str	lr, [sp, #4]
   327c8:	ldr	lr, [r1, #4]
   327cc:	cmp	r4, #1
   327d0:	ldrb	ip, [lr, r3]
   327d4:	strb	ip, [r0]
   327d8:	ble	327f8 <__assert_fail@plt+0x20204>
   327dc:	ldr	r4, [r1, #28]
   327e0:	cmp	r3, r4
   327e4:	beq	327f8 <__assert_fail@plt+0x20204>
   327e8:	ldr	r4, [r1, #8]
   327ec:	ldr	r4, [r4, r3, lsl #2]
   327f0:	cmn	r4, #1
   327f4:	beq	3283c <__assert_fail@plt+0x20248>
   327f8:	cmp	ip, #92	; 0x5c
   327fc:	beq	32834 <__assert_fail@plt+0x20240>
   32800:	cmp	ip, #91	; 0x5b
   32804:	beq	328bc <__assert_fail@plt+0x202c8>
   32808:	cmp	ip, #93	; 0x5d
   3280c:	beq	32914 <__assert_fail@plt+0x20320>
   32810:	cmp	ip, #94	; 0x5e
   32814:	bne	32858 <__assert_fail@plt+0x20264>
   32818:	mov	r2, #25
   3281c:	mov	r3, #1
   32820:	ldr	r4, [sp]
   32824:	add	sp, sp, #4
   32828:	strb	r2, [r0, #4]
   3282c:	mov	r0, r3
   32830:	pop	{pc}		; (ldr pc, [sp], #4)
   32834:	tst	r2, #1
   32838:	bne	32890 <__assert_fail@plt+0x2029c>
   3283c:	mov	r2, #1
   32840:	mov	r3, r2
   32844:	strb	r2, [r0, #4]
   32848:	ldr	r4, [sp]
   3284c:	add	sp, sp, #4
   32850:	mov	r0, r3
   32854:	pop	{pc}		; (ldr pc, [sp], #4)
   32858:	cmp	ip, #45	; 0x2d
   3285c:	bne	3283c <__assert_fail@plt+0x20248>
   32860:	mov	r2, #22
   32864:	mov	r3, #1
   32868:	ldr	r4, [sp]
   3286c:	add	sp, sp, #4
   32870:	strb	r2, [r0, #4]
   32874:	mov	r0, r3
   32878:	pop	{pc}		; (ldr pc, [sp], #4)
   3287c:	mov	r2, #2
   32880:	mov	r3, #0
   32884:	strb	r2, [r0, #4]
   32888:	mov	r0, r3
   3288c:	bx	lr
   32890:	ldr	r2, [r1, #48]	; 0x30
   32894:	add	r3, r3, #1
   32898:	cmp	r3, r2
   3289c:	bge	3283c <__assert_fail@plt+0x20248>
   328a0:	str	r3, [r1, #40]	; 0x28
   328a4:	mov	r2, #1
   328a8:	ldrb	r1, [lr, r3]
   328ac:	mov	r3, r2
   328b0:	strb	r1, [r0]
   328b4:	strb	r2, [r0, #4]
   328b8:	b	32848 <__assert_fail@plt+0x20254>
   328bc:	ldr	r1, [r1, #48]	; 0x30
   328c0:	add	ip, r3, #1
   328c4:	cmp	ip, r1
   328c8:	bge	328fc <__assert_fail@plt+0x20308>
   328cc:	add	r3, lr, r3
   328d0:	ldrb	r3, [r3, #1]
   328d4:	cmp	r3, #58	; 0x3a
   328d8:	strb	r3, [r0]
   328dc:	beq	32940 <__assert_fail@plt+0x2034c>
   328e0:	cmp	r3, #61	; 0x3d
   328e4:	beq	32930 <__assert_fail@plt+0x2033c>
   328e8:	cmp	r3, #46	; 0x2e
   328ec:	moveq	r2, #26
   328f0:	moveq	r3, #2
   328f4:	strbeq	r2, [r0, #4]
   328f8:	beq	32848 <__assert_fail@plt+0x20254>
   328fc:	mov	r2, #1
   32900:	mov	r1, #91	; 0x5b
   32904:	mov	r3, r2
   32908:	strb	r1, [r0]
   3290c:	strb	r2, [r0, #4]
   32910:	b	32848 <__assert_fail@plt+0x20254>
   32914:	mov	r2, #21
   32918:	mov	r3, #1
   3291c:	ldr	r4, [sp]
   32920:	add	sp, sp, #4
   32924:	strb	r2, [r0, #4]
   32928:	mov	r0, r3
   3292c:	pop	{pc}		; (ldr pc, [sp], #4)
   32930:	mov	r2, #28
   32934:	mov	r3, #2
   32938:	strb	r2, [r0, #4]
   3293c:	b	32848 <__assert_fail@plt+0x20254>
   32940:	tst	r2, #4
   32944:	beq	328fc <__assert_fail@plt+0x20308>
   32948:	mov	r2, #30
   3294c:	mov	r3, #2
   32950:	strb	r2, [r0, #4]
   32954:	b	32848 <__assert_fail@plt+0x20254>
   32958:	ldrb	r3, [r1, #24]
   3295c:	cmp	r3, #17
   32960:	beq	3296c <__assert_fail@plt+0x20378>
   32964:	mov	r0, #0
   32968:	bx	lr
   3296c:	ldr	r3, [r1, #20]
   32970:	cmp	r0, r3
   32974:	bne	32964 <__assert_fail@plt+0x20370>
   32978:	ldrb	r3, [r1, #26]
   3297c:	mov	r0, #0
   32980:	orr	r3, r3, #8
   32984:	strb	r3, [r1, #26]
   32988:	bx	lr
   3298c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   32990:	strd	r6, [sp, #8]
   32994:	strd	r8, [sp, #16]
   32998:	ldr	r8, [r0, #84]	; 0x54
   3299c:	strd	sl, [sp, #24]
   329a0:	mov	fp, r1
   329a4:	str	lr, [sp, #32]
   329a8:	sub	sp, sp, #44	; 0x2c
   329ac:	str	r3, [sp, #24]
   329b0:	add	r3, r3, r3, lsl #1
   329b4:	ldr	r9, [r8, #24]
   329b8:	add	r9, r9, r3, lsl #2
   329bc:	ldr	r1, [r9, #4]
   329c0:	cmp	r1, #0
   329c4:	ble	32b70 <__assert_fail@plt+0x2057c>
   329c8:	ldr	r3, [sp, #80]	; 0x50
   329cc:	mov	r7, r2
   329d0:	mov	r2, #1
   329d4:	mov	sl, r0
   329d8:	mov	r4, #0
   329dc:	add	r3, r3, r2
   329e0:	lsl	r2, r2, r7
   329e4:	add	r3, r3, r3, lsl #1
   329e8:	str	r2, [sp, #12]
   329ec:	str	r3, [sp, #28]
   329f0:	mvn	r3, r2
   329f4:	str	r3, [sp, #16]
   329f8:	b	32a10 <__assert_fail@plt+0x2041c>
   329fc:	cmp	r3, #4
   32a00:	beq	32a84 <__assert_fail@plt+0x20490>
   32a04:	add	r4, r4, #1
   32a08:	cmp	r1, r4
   32a0c:	ble	32b70 <__assert_fail@plt+0x2057c>
   32a10:	ldr	r3, [r9, #8]
   32a14:	ldr	r2, [r8]
   32a18:	ldr	r5, [r3, r4, lsl #2]
   32a1c:	add	r3, r2, r5, lsl #3
   32a20:	ldrb	r3, [r3, #4]
   32a24:	cmp	r3, #8
   32a28:	beq	32a50 <__assert_fail@plt+0x2045c>
   32a2c:	cmp	r3, #9
   32a30:	bne	329fc <__assert_fail@plt+0x20408>
   32a34:	tst	fp, #2
   32a38:	beq	32a04 <__assert_fail@plt+0x20410>
   32a3c:	ldr	r3, [r2, r5, lsl #3]
   32a40:	cmp	r3, r7
   32a44:	bne	32a04 <__assert_fail@plt+0x20410>
   32a48:	mov	r0, #0
   32a4c:	b	32a68 <__assert_fail@plt+0x20474>
   32a50:	tst	fp, #1
   32a54:	beq	32a04 <__assert_fail@plt+0x20410>
   32a58:	ldr	r3, [r2, r5, lsl #3]
   32a5c:	cmp	r3, r7
   32a60:	bne	32a04 <__assert_fail@plt+0x20410>
   32a64:	mvn	r0, #0
   32a68:	add	sp, sp, #44	; 0x2c
   32a6c:	ldrd	r4, [sp]
   32a70:	ldrd	r6, [sp, #8]
   32a74:	ldrd	r8, [sp, #16]
   32a78:	ldrd	sl, [sp, #24]
   32a7c:	add	sp, sp, #32
   32a80:	pop	{pc}		; (ldr pc, [sp], #4)
   32a84:	ldr	r3, [sp, #80]	; 0x50
   32a88:	cmn	r3, #1
   32a8c:	beq	32a04 <__assert_fail@plt+0x20410>
   32a90:	and	r2, fp, #2
   32a94:	ldr	r6, [sl, #116]	; 0x74
   32a98:	add	r3, r5, r5, lsl #1
   32a9c:	str	r2, [sp, #20]
   32aa0:	lsl	r3, r3, #2
   32aa4:	ldr	r2, [sp, #28]
   32aa8:	str	r9, [sp, #32]
   32aac:	mov	r9, r3
   32ab0:	str	r4, [sp, #36]	; 0x24
   32ab4:	ldr	r4, [sp, #24]
   32ab8:	add	r6, r6, r2, lsl #3
   32abc:	ldr	r3, [r6, #-24]	; 0xffffffe8
   32ac0:	mov	r2, r7
   32ac4:	mov	r1, fp
   32ac8:	mov	r0, sl
   32acc:	cmp	r3, r5
   32ad0:	bne	32b48 <__assert_fail@plt+0x20554>
   32ad4:	cmp	r7, #31
   32ad8:	bgt	32aec <__assert_fail@plt+0x204f8>
   32adc:	ldr	r3, [r6, #-8]
   32ae0:	ldr	ip, [sp, #12]
   32ae4:	tst	ip, r3
   32ae8:	beq	32b48 <__assert_fail@plt+0x20554>
   32aec:	ldr	r3, [r8, #20]
   32af0:	add	r3, r3, r9
   32af4:	ldr	r3, [r3, #8]
   32af8:	ldr	ip, [r3]
   32afc:	cmp	r4, ip
   32b00:	mov	r3, ip
   32b04:	beq	32b78 <__assert_fail@plt+0x20584>
   32b08:	ldr	ip, [sp, #80]	; 0x50
   32b0c:	str	ip, [sp]
   32b10:	bl	3298c <__assert_fail@plt+0x20398>
   32b14:	cmn	r0, #1
   32b18:	beq	32a64 <__assert_fail@plt+0x20470>
   32b1c:	cmp	r0, #0
   32b20:	bne	32b30 <__assert_fail@plt+0x2053c>
   32b24:	ldr	r3, [sp, #20]
   32b28:	cmp	r3, #0
   32b2c:	bne	32a48 <__assert_fail@plt+0x20454>
   32b30:	cmp	r7, #31
   32b34:	bgt	32b48 <__assert_fail@plt+0x20554>
   32b38:	ldr	r3, [r6, #-8]
   32b3c:	ldr	r2, [sp, #16]
   32b40:	and	r3, r3, r2
   32b44:	str	r3, [r6, #-8]
   32b48:	add	r6, r6, #24
   32b4c:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   32b50:	cmp	r3, #0
   32b54:	bne	32abc <__assert_fail@plt+0x204c8>
   32b58:	ldr	r9, [sp, #32]
   32b5c:	ldr	r4, [sp, #36]	; 0x24
   32b60:	ldr	r1, [r9, #4]
   32b64:	add	r4, r4, #1
   32b68:	cmp	r1, r4
   32b6c:	bgt	32a10 <__assert_fail@plt+0x2041c>
   32b70:	asr	r0, fp, #1
   32b74:	b	32a68 <__assert_fail@plt+0x20474>
   32b78:	sbfx	r0, fp, #0, #1
   32b7c:	b	32a68 <__assert_fail@plt+0x20474>
   32b80:	ldr	ip, [r0, #116]	; 0x74
   32b84:	add	r1, r1, r1, lsl #1
   32b88:	strd	r4, [sp, #-12]!
   32b8c:	ldr	r5, [sp, #16]
   32b90:	add	r1, ip, r1, lsl #3
   32b94:	ldr	ip, [r1, #8]
   32b98:	str	lr, [sp, #8]
   32b9c:	ldr	lr, [sp, #12]
   32ba0:	cmp	ip, lr
   32ba4:	bgt	32c08 <__assert_fail@plt+0x20614>
   32ba8:	ldr	r4, [r1, #12]
   32bac:	cmp	r4, lr
   32bb0:	blt	32bf8 <__assert_fail@plt+0x20604>
   32bb4:	sub	r1, ip, lr
   32bb8:	cmp	r4, lr
   32bbc:	clz	r1, r1
   32bc0:	lsr	r1, r1, #5
   32bc4:	beq	32be0 <__assert_fail@plt+0x205ec>
   32bc8:	cmp	ip, lr
   32bcc:	movne	r0, #0
   32bd0:	beq	32be4 <__assert_fail@plt+0x205f0>
   32bd4:	ldrd	r4, [sp]
   32bd8:	add	sp, sp, #8
   32bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   32be0:	orr	r1, r1, #2
   32be4:	str	r5, [sp, #12]
   32be8:	ldrd	r4, [sp]
   32bec:	ldr	lr, [sp, #8]
   32bf0:	add	sp, sp, #12
   32bf4:	b	3298c <__assert_fail@plt+0x20398>
   32bf8:	ldrd	r4, [sp]
   32bfc:	add	sp, sp, #8
   32c00:	mov	r0, #1
   32c04:	pop	{pc}		; (ldr pc, [sp], #4)
   32c08:	mvn	r0, #0
   32c0c:	b	32bd4 <__assert_fail@plt+0x205e0>
   32c10:	ldr	r3, [r0, #80]	; 0x50
   32c14:	strd	r4, [sp, #-16]!
   32c18:	mov	r4, r0
   32c1c:	mov	r5, r1
   32c20:	str	r6, [sp, #8]
   32c24:	str	lr, [sp, #12]
   32c28:	cmp	r3, #1
   32c2c:	ble	32c74 <__assert_fail@plt+0x20680>
   32c30:	cmn	r1, #-1073741823	; 0xc0000001
   32c34:	bhi	32cb4 <__assert_fail@plt+0x206c0>
   32c38:	lsl	r6, r1, #2
   32c3c:	ldr	r0, [r0, #8]
   32c40:	mov	r1, r6
   32c44:	bl	32624 <__assert_fail@plt+0x20030>
   32c48:	subs	r3, r0, #0
   32c4c:	beq	32cb4 <__assert_fail@plt+0x206c0>
   32c50:	ldr	r0, [r4, #12]
   32c54:	str	r3, [r4, #8]
   32c58:	cmp	r0, #0
   32c5c:	beq	32c74 <__assert_fail@plt+0x20680>
   32c60:	mov	r1, r6
   32c64:	bl	32624 <__assert_fail@plt+0x20030>
   32c68:	cmp	r0, #0
   32c6c:	beq	32cb4 <__assert_fail@plt+0x206c0>
   32c70:	str	r0, [r4, #12]
   32c74:	ldrb	r3, [r4, #75]	; 0x4b
   32c78:	cmp	r3, #0
   32c7c:	bne	32c98 <__assert_fail@plt+0x206a4>
   32c80:	str	r5, [r4, #36]	; 0x24
   32c84:	mov	r0, #0
   32c88:	ldrd	r4, [sp]
   32c8c:	ldr	r6, [sp, #8]
   32c90:	add	sp, sp, #12
   32c94:	pop	{pc}		; (ldr pc, [sp], #4)
   32c98:	mov	r1, r5
   32c9c:	ldr	r0, [r4, #4]
   32ca0:	bl	32624 <__assert_fail@plt+0x20030>
   32ca4:	cmp	r0, #0
   32ca8:	beq	32cb4 <__assert_fail@plt+0x206c0>
   32cac:	str	r0, [r4, #4]
   32cb0:	b	32c80 <__assert_fail@plt+0x2068c>
   32cb4:	ldrd	r4, [sp]
   32cb8:	mov	r0, #12
   32cbc:	ldr	r6, [sp, #8]
   32cc0:	add	sp, sp, #12
   32cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   32cc8:	strd	r4, [sp, #-16]!
   32ccc:	mov	r5, r1
   32cd0:	mov	r4, r0
   32cd4:	ldr	r2, [r0]
   32cd8:	ldmib	r0, {r1, r3}
   32cdc:	str	r6, [sp, #8]
   32ce0:	str	lr, [sp, #12]
   32ce4:	cmp	r2, r1
   32ce8:	beq	32d0c <__assert_fail@plt+0x20718>
   32cec:	add	r2, r1, #1
   32cf0:	mov	r0, #1
   32cf4:	str	r2, [r4, #4]
   32cf8:	str	r5, [r3, r1, lsl #2]
   32cfc:	ldrd	r4, [sp]
   32d00:	ldr	r6, [sp, #8]
   32d04:	add	sp, sp, #12
   32d08:	pop	{pc}		; (ldr pc, [sp], #4)
   32d0c:	add	r1, r1, #1
   32d10:	mov	r0, r3
   32d14:	lsl	r3, r1, #1
   32d18:	lsl	r1, r1, #3
   32d1c:	str	r3, [r4]
   32d20:	bl	32624 <__assert_fail@plt+0x20030>
   32d24:	subs	r3, r0, #0
   32d28:	beq	32d38 <__assert_fail@plt+0x20744>
   32d2c:	str	r3, [r4, #8]
   32d30:	ldr	r1, [r4, #4]
   32d34:	b	32cec <__assert_fail@plt+0x206f8>
   32d38:	mov	r0, r3
   32d3c:	b	32cfc <__assert_fail@plt+0x20708>
   32d40:	ldr	r3, [r1, #8]
   32d44:	strd	r4, [sp, #-24]!	; 0xffffffe8
   32d48:	mov	r5, r1
   32d4c:	mov	r4, #0
   32d50:	strd	r6, [sp, #8]
   32d54:	mov	r7, r1
   32d58:	mov	r6, r2
   32d5c:	str	r8, [sp, #16]
   32d60:	mov	r8, r0
   32d64:	str	lr, [sp, #20]
   32d68:	lsl	r0, r3, #2
   32d6c:	str	r2, [r5], #16
   32d70:	str	r3, [r1, #16]
   32d74:	str	r4, [r1, #20]
   32d78:	bl	31b54 <__assert_fail@plt+0x1f560>
   32d7c:	cmp	r0, r4
   32d80:	str	r0, [r7, #24]
   32d84:	beq	32e2c <__assert_fail@plt+0x20838>
   32d88:	ldr	r0, [r7, #8]
   32d8c:	cmp	r0, #0
   32d90:	bgt	32da4 <__assert_fail@plt+0x207b0>
   32d94:	b	32de0 <__assert_fail@plt+0x207ec>
   32d98:	add	r4, r4, #1
   32d9c:	cmp	r0, r4
   32da0:	ble	32de0 <__assert_fail@plt+0x207ec>
   32da4:	ldr	r2, [r7, #12]
   32da8:	ldr	r3, [r8]
   32dac:	ldr	r1, [r2, r4, lsl #2]
   32db0:	add	r3, r3, r1, lsl #3
   32db4:	ldrb	r3, [r3, #4]
   32db8:	tst	r3, #8
   32dbc:	bne	32d98 <__assert_fail@plt+0x207a4>
   32dc0:	mov	r0, r5
   32dc4:	bl	32cc8 <__assert_fail@plt+0x206d4>
   32dc8:	cmp	r0, #0
   32dcc:	beq	32e2c <__assert_fail@plt+0x20838>
   32dd0:	ldr	r0, [r7, #8]
   32dd4:	add	r4, r4, #1
   32dd8:	cmp	r0, r4
   32ddc:	bgt	32da4 <__assert_fail@plt+0x207b0>
   32de0:	ldr	r5, [r8, #32]
   32de4:	ldr	r4, [r8, #68]	; 0x44
   32de8:	and	r6, r6, r4
   32dec:	add	r6, r6, r6, lsl #1
   32df0:	lsl	r4, r6, #2
   32df4:	add	r6, r5, r4
   32df8:	ldr	r3, [r5, r4]
   32dfc:	ldrd	r0, [r6, #4]
   32e00:	add	r2, r3, #1
   32e04:	cmp	r0, r3
   32e08:	ble	32e34 <__assert_fail@plt+0x20840>
   32e0c:	mov	r0, #0
   32e10:	str	r2, [r5, r4]
   32e14:	str	r7, [r1, r3, lsl #2]
   32e18:	ldrd	r4, [sp]
   32e1c:	ldrd	r6, [sp, #8]
   32e20:	ldr	r8, [sp, #16]
   32e24:	add	sp, sp, #20
   32e28:	pop	{pc}		; (ldr pc, [sp], #4)
   32e2c:	mov	r0, #12
   32e30:	b	32e18 <__assert_fail@plt+0x20824>
   32e34:	mov	r0, r1
   32e38:	lsl	r1, r2, #3
   32e3c:	lsl	r8, r2, #1
   32e40:	bl	32624 <__assert_fail@plt+0x20030>
   32e44:	subs	r1, r0, #0
   32e48:	beq	32e2c <__assert_fail@plt+0x20838>
   32e4c:	ldr	r3, [r5, r4]
   32e50:	str	r8, [r6, #4]
   32e54:	str	r1, [r6, #8]
   32e58:	add	r2, r3, #1
   32e5c:	b	32e0c <__assert_fail@plt+0x20818>
   32e60:	strd	r4, [sp, #-28]!	; 0xffffffe4
   32e64:	mov	r5, r0
   32e68:	ldr	r4, [r0, #28]
   32e6c:	ldr	r3, [r0, #48]	; 0x30
   32e70:	strd	r6, [sp, #8]
   32e74:	ldr	r7, [r0, #36]	; 0x24
   32e78:	strd	r8, [sp, #16]
   32e7c:	str	lr, [sp, #24]
   32e80:	sub	sp, sp, #84	; 0x54
   32e84:	cmp	r7, r3
   32e88:	movge	r7, r3
   32e8c:	cmp	r7, r4
   32e90:	ble	32f24 <__assert_fail@plt+0x20930>
   32e94:	add	r8, r0, #16
   32e98:	mvn	r6, #0
   32e9c:	ldr	ip, [r5, #64]	; 0x40
   32ea0:	sub	r2, r7, r4
   32ea4:	ldrd	r0, [r8]
   32ea8:	cmp	ip, #0
   32eac:	strd	r0, [sp, #8]
   32eb0:	bne	32f80 <__assert_fail@plt+0x2098c>
   32eb4:	ldr	r1, [r5]
   32eb8:	ldr	r3, [r5, #24]
   32ebc:	add	r3, r4, r3
   32ec0:	add	r1, r1, r3
   32ec4:	mov	r3, r8
   32ec8:	add	r0, sp, #4
   32ecc:	bl	31b90 <__assert_fail@plt+0x1f59c>
   32ed0:	sub	r3, r0, #1
   32ed4:	cmn	r3, #3
   32ed8:	bhi	32f44 <__assert_fail@plt+0x20950>
   32edc:	cmn	r0, #2
   32ee0:	ldrne	r1, [sp, #4]
   32ee4:	beq	32fe4 <__assert_fail@plt+0x209f0>
   32ee8:	add	r0, r4, r0
   32eec:	add	ip, r4, #1
   32ef0:	ldr	r2, [r5, #8]
   32ef4:	cmp	ip, r0
   32ef8:	add	r3, r2, r4, lsl #2
   32efc:	str	r1, [r2, r4, lsl #2]
   32f00:	bge	32f78 <__assert_fail@plt+0x20984>
   32f04:	sub	r2, r2, #4
   32f08:	add	r2, r2, r0, lsl #2
   32f0c:	str	r6, [r3, #4]!
   32f10:	cmp	r2, r3
   32f14:	bne	32f0c <__assert_fail@plt+0x20918>
   32f18:	mov	r4, r0
   32f1c:	cmp	r7, r4
   32f20:	bgt	32e9c <__assert_fail@plt+0x208a8>
   32f24:	str	r4, [r5, #28]
   32f28:	str	r4, [r5, #32]
   32f2c:	add	sp, sp, #84	; 0x54
   32f30:	ldrd	r4, [sp]
   32f34:	ldrd	r6, [sp, #8]
   32f38:	ldrd	r8, [sp, #16]
   32f3c:	add	sp, sp, #24
   32f40:	pop	{pc}		; (ldr pc, [sp], #4)
   32f44:	ldr	r3, [r5]
   32f48:	mov	r0, #1
   32f4c:	ldr	r1, [r5, #24]
   32f50:	ldr	r2, [r5, #64]	; 0x40
   32f54:	add	r3, r3, r4
   32f58:	ldrb	r1, [r3, r1]
   32f5c:	cmp	r2, #0
   32f60:	str	r1, [sp, #4]
   32f64:	ldrbne	r1, [r2, r1]
   32f68:	ldrd	r2, [sp, #8]
   32f6c:	strne	r1, [sp, #4]
   32f70:	strd	r2, [r8]
   32f74:	b	32ee8 <__assert_fail@plt+0x208f4>
   32f78:	mov	r4, ip
   32f7c:	b	32f1c <__assert_fail@plt+0x20928>
   32f80:	ldr	r3, [r5, #80]	; 0x50
   32f84:	cmp	r3, #0
   32f88:	cmpgt	r2, #0
   32f8c:	ble	32fdc <__assert_fail@plt+0x209e8>
   32f90:	add	r0, sp, #16
   32f94:	mov	r1, #0
   32f98:	b	32fa0 <__assert_fail@plt+0x209ac>
   32f9c:	ldr	ip, [r5, #64]	; 0x40
   32fa0:	ldm	r5, {r3, lr}
   32fa4:	ldr	r9, [r5, #24]
   32fa8:	add	r3, r3, r4
   32fac:	add	r3, r3, r1
   32fb0:	ldrb	r9, [r3, r9]
   32fb4:	add	r3, lr, r4
   32fb8:	ldrb	ip, [ip, r9]
   32fbc:	strb	ip, [r3, r1]
   32fc0:	add	r1, r1, #1
   32fc4:	ldr	r3, [r5, #80]	; 0x50
   32fc8:	strb	ip, [r0], #1
   32fcc:	cmp	r2, r3
   32fd0:	movlt	r3, r2
   32fd4:	cmp	r3, r1
   32fd8:	bgt	32f9c <__assert_fail@plt+0x209a8>
   32fdc:	add	r1, sp, #16
   32fe0:	b	32ec4 <__assert_fail@plt+0x208d0>
   32fe4:	ldr	r2, [r5, #36]	; 0x24
   32fe8:	ldr	r3, [r5, #48]	; 0x30
   32fec:	cmp	r2, r3
   32ff0:	bge	32f44 <__assert_fail@plt+0x20950>
   32ff4:	ldrd	r2, [sp, #8]
   32ff8:	strd	r2, [r5, #16]
   32ffc:	b	32f24 <__assert_fail@plt+0x20930>
   33000:	strd	r4, [sp, #-36]!	; 0xffffffdc
   33004:	mov	r5, r0
   33008:	ldr	r3, [r0, #48]	; 0x30
   3300c:	strd	r6, [sp, #8]
   33010:	strd	r8, [sp, #16]
   33014:	ldr	r7, [r0, #36]	; 0x24
   33018:	strd	sl, [sp, #24]
   3301c:	str	lr, [sp, #32]
   33020:	sub	sp, sp, #100	; 0x64
   33024:	ldrb	r2, [r0, #74]	; 0x4a
   33028:	cmp	r7, r3
   3302c:	ldr	r6, [r0, #28]
   33030:	movge	r7, r3
   33034:	cmp	r2, #0
   33038:	bne	33048 <__assert_fail@plt+0x20a54>
   3303c:	ldr	r3, [r0, #64]	; 0x40
   33040:	cmp	r3, #0
   33044:	beq	33190 <__assert_fail@plt+0x20b9c>
   33048:	ldr	r4, [r5, #32]
   3304c:	cmp	r6, r7
   33050:	bge	33168 <__assert_fail@plt+0x20b74>
   33054:	add	r3, r5, #16
   33058:	str	r3, [sp, #12]
   3305c:	sub	r3, r7, r6
   33060:	str	r3, [sp, #8]
   33064:	add	r3, sp, #20
   33068:	mov	r9, r3
   3306c:	ldrd	r0, [r5, #16]
   33070:	ldr	r3, [r5, #64]	; 0x40
   33074:	strd	r0, [sp, #24]
   33078:	cmp	r3, #0
   3307c:	bne	3336c <__assert_fail@plt+0x20d78>
   33080:	ldr	r8, [r5]
   33084:	ldr	r3, [r5, #24]
   33088:	add	r3, r4, r3
   3308c:	add	r8, r8, r3
   33090:	mov	r0, r9
   33094:	mov	r1, r8
   33098:	ldrd	r2, [sp, #8]
   3309c:	bl	31b90 <__assert_fail@plt+0x1f59c>
   330a0:	sub	r3, r0, #1
   330a4:	mov	sl, r0
   330a8:	cmn	r3, #4
   330ac:	str	r3, [sp, #4]
   330b0:	bhi	333ec <__assert_fail@plt+0x20df8>
   330b4:	ldr	r3, [sp, #20]
   330b8:	mov	r9, r6
   330bc:	mov	r0, r3
   330c0:	str	r3, [sp]
   330c4:	bl	1257c <towupper@plt>
   330c8:	ldr	r3, [sp]
   330cc:	mov	fp, r0
   330d0:	cmp	r3, r0
   330d4:	beq	333d4 <__assert_fail@plt+0x20de0>
   330d8:	add	r3, sp, #32
   330dc:	add	r2, sp, #24
   330e0:	mov	r0, r3
   330e4:	mov	r1, fp
   330e8:	str	r3, [sp]
   330ec:	bl	11ef8 <wcrtomb@plt>
   330f0:	cmp	sl, r0
   330f4:	mov	r3, r0
   330f8:	bne	33480 <__assert_fail@plt+0x20e8c>
   330fc:	ldr	r0, [r5, #4]
   33100:	mov	r2, sl
   33104:	ldr	r1, [sp]
   33108:	add	r0, r0, r6
   3310c:	bl	12024 <memcpy@plt>
   33110:	ldrb	r3, [r5, #76]	; 0x4c
   33114:	cmp	r3, #0
   33118:	bne	33460 <__assert_fail@plt+0x20e6c>
   3311c:	add	r2, sl, r4
   33120:	ldr	r3, [r5, #8]
   33124:	add	sl, sl, r9
   33128:	add	r6, r6, #1
   3312c:	cmp	r6, sl
   33130:	mov	r4, r2
   33134:	mvnlt	r2, #0
   33138:	str	fp, [r3, r9, lsl #2]
   3313c:	add	r9, r3, r9, lsl #2
   33140:	sublt	r3, r3, #4
   33144:	addlt	r3, r3, sl, lsl #2
   33148:	bge	3304c <__assert_fail@plt+0x20a58>
   3314c:	str	r2, [r9, #4]!
   33150:	cmp	r3, r9
   33154:	bne	3314c <__assert_fail@plt+0x20b58>
   33158:	mov	r6, sl
   3315c:	b	3304c <__assert_fail@plt+0x20a58>
   33160:	ldrd	r2, [sp, #24]
   33164:	strd	r2, [r5, #16]
   33168:	mov	r0, #0
   3316c:	str	r6, [r5, #28]
   33170:	str	r4, [r5, #32]
   33174:	add	sp, sp, #100	; 0x64
   33178:	ldrd	r4, [sp]
   3317c:	ldrd	r6, [sp, #8]
   33180:	ldrd	r8, [sp, #16]
   33184:	ldrd	sl, [sp, #24]
   33188:	add	sp, sp, #32
   3318c:	pop	{pc}		; (ldr pc, [sp], #4)
   33190:	ldrb	r3, [r0, #76]	; 0x4c
   33194:	cmp	r3, #0
   33198:	bne	33048 <__assert_fail@plt+0x20a54>
   3319c:	cmp	r6, r7
   331a0:	bge	332c8 <__assert_fail@plt+0x20cd4>
   331a4:	add	fp, r0, #16
   331a8:	str	r7, [sp]
   331ac:	str	fp, [sp, #12]
   331b0:	ldr	r8, [r5]
   331b4:	mov	r4, r6
   331b8:	ldr	r7, [r5, #24]
   331bc:	add	r3, r8, r7
   331c0:	ldrb	sl, [r3, r6]
   331c4:	tst	sl, #128	; 0x80
   331c8:	bne	331ec <__assert_fail@plt+0x20bf8>
   331cc:	mov	r0, fp
   331d0:	bl	12060 <mbsinit@plt>
   331d4:	cmp	r0, #0
   331d8:	beq	331ec <__assert_fail@plt+0x20bf8>
   331dc:	mov	r0, sl
   331e0:	bl	1257c <towupper@plt>
   331e4:	bics	r3, r0, #127	; 0x7f
   331e8:	beq	332fc <__assert_fail@plt+0x20d08>
   331ec:	ldr	r3, [sp]
   331f0:	add	r1, r7, r6
   331f4:	add	r0, sp, #20
   331f8:	add	r1, r8, r1
   331fc:	ldrd	r8, [fp]
   33200:	sub	r3, r3, r6
   33204:	mov	r2, r3
   33208:	str	r3, [sp, #8]
   3320c:	mov	r3, fp
   33210:	strd	r8, [sp, #24]
   33214:	mov	r9, r0
   33218:	bl	31b90 <__assert_fail@plt+0x1f59c>
   3321c:	sub	r3, r0, #1
   33220:	mov	r8, r0
   33224:	cmn	r3, #4
   33228:	bhi	33314 <__assert_fail@plt+0x20d20>
   3322c:	ldr	r3, [sp, #20]
   33230:	mov	r0, r3
   33234:	str	r3, [sp, #4]
   33238:	bl	1257c <towupper@plt>
   3323c:	ldr	r3, [sp, #4]
   33240:	mov	sl, r0
   33244:	cmp	r3, r0
   33248:	beq	332d8 <__assert_fail@plt+0x20ce4>
   3324c:	add	r3, sp, #32
   33250:	add	r2, sp, #24
   33254:	mov	r0, r3
   33258:	mov	r1, sl
   3325c:	str	r3, [sp, #4]
   33260:	bl	11ef8 <wcrtomb@plt>
   33264:	cmp	r8, r0
   33268:	bne	333c8 <__assert_fail@plt+0x20dd4>
   3326c:	ldr	r0, [r5, #4]
   33270:	mov	r2, r8
   33274:	ldr	r3, [sp, #4]
   33278:	add	r0, r0, r6
   3327c:	mov	r1, r3
   33280:	bl	12024 <memcpy@plt>
   33284:	ldr	r3, [r5, #8]
   33288:	add	r8, r8, r4
   3328c:	add	r6, r6, #1
   33290:	cmp	r6, r8
   33294:	str	sl, [r3, r4, lsl #2]
   33298:	add	r4, r3, r4, lsl #2
   3329c:	bge	332bc <__assert_fail@plt+0x20cc8>
   332a0:	sub	r3, r3, #4
   332a4:	add	r3, r3, r8, lsl #2
   332a8:	mvn	r2, #0
   332ac:	str	r2, [r4, #4]!
   332b0:	cmp	r4, r3
   332b4:	bne	332a8 <__assert_fail@plt+0x20cb4>
   332b8:	mov	r6, r8
   332bc:	ldr	r3, [sp]
   332c0:	cmp	r3, r6
   332c4:	bgt	331b0 <__assert_fail@plt+0x20bbc>
   332c8:	mov	r0, #0
   332cc:	str	r6, [r5, #28]
   332d0:	str	r6, [r5, #32]
   332d4:	b	33174 <__assert_fail@plt+0x20b80>
   332d8:	ldr	r1, [r5]
   332dc:	mov	r2, r8
   332e0:	ldr	r3, [r5, #24]
   332e4:	ldr	r0, [r5, #4]
   332e8:	add	r3, r6, r3
   332ec:	add	r1, r1, r3
   332f0:	add	r0, r0, r6
   332f4:	bl	12024 <memcpy@plt>
   332f8:	b	33284 <__assert_fail@plt+0x20c90>
   332fc:	ldr	r3, [r5, #4]
   33300:	strb	r0, [r3, r6]
   33304:	ldr	r3, [r5, #8]
   33308:	str	r0, [r3, r6, lsl #2]
   3330c:	add	r6, r6, #1
   33310:	b	332bc <__assert_fail@plt+0x20cc8>
   33314:	cmn	r3, #3
   33318:	beq	33344 <__assert_fail@plt+0x20d50>
   3331c:	ldr	r3, [r5, #4]
   33320:	cmn	r0, #1
   33324:	strb	sl, [r3, r6]
   33328:	add	r6, r6, #1
   3332c:	ldr	r3, [r5, #8]
   33330:	str	sl, [r3, r4, lsl #2]
   33334:	bne	332bc <__assert_fail@plt+0x20cc8>
   33338:	ldrd	r2, [sp, #24]
   3333c:	strd	r2, [fp]
   33340:	b	332bc <__assert_fail@plt+0x20cc8>
   33344:	ldr	r2, [r5, #36]	; 0x24
   33348:	ldr	r3, [r5, #48]	; 0x30
   3334c:	cmp	r2, r3
   33350:	blt	33584 <__assert_fail@plt+0x20f90>
   33354:	ldr	r3, [r5, #4]
   33358:	strb	sl, [r3, r6]
   3335c:	add	r6, r6, #1
   33360:	ldr	r3, [r5, #8]
   33364:	str	sl, [r3, r4, lsl #2]
   33368:	b	332bc <__assert_fail@plt+0x20cc8>
   3336c:	ldr	r2, [sp, #8]
   33370:	ldr	r8, [r5, #80]	; 0x50
   33374:	cmp	r2, #0
   33378:	cmpgt	r8, #0
   3337c:	ble	335b4 <__assert_fail@plt+0x20fc0>
   33380:	ldr	lr, [r5]
   33384:	add	r1, sp, #32
   33388:	ldr	r2, [r5, #24]
   3338c:	str	r1, [sp]
   33390:	ldr	r0, [sp, #8]
   33394:	add	r2, r4, r2
   33398:	add	lr, lr, r2
   3339c:	cmp	r8, r0
   333a0:	mov	r2, lr
   333a4:	movge	r8, r0
   333a8:	ldrb	r0, [r2], #1
   333ac:	ldrb	r0, [r3, r0]
   333b0:	sub	ip, r2, lr
   333b4:	cmp	ip, r8
   333b8:	strb	r0, [r1], #1
   333bc:	blt	333a8 <__assert_fail@plt+0x20db4>
   333c0:	ldr	r8, [sp]
   333c4:	b	33090 <__assert_fail@plt+0x20a9c>
   333c8:	mov	r4, r6
   333cc:	ldr	r7, [sp]
   333d0:	b	3306c <__assert_fail@plt+0x20a78>
   333d4:	ldr	r0, [r5, #4]
   333d8:	mov	r1, r8
   333dc:	mov	r2, sl
   333e0:	add	r0, r0, r6
   333e4:	bl	12024 <memcpy@plt>
   333e8:	b	33110 <__assert_fail@plt+0x20b1c>
   333ec:	ldr	r3, [sp, #4]
   333f0:	cmn	r3, #3
   333f4:	bne	33408 <__assert_fail@plt+0x20e14>
   333f8:	ldr	r2, [r5, #36]	; 0x24
   333fc:	ldr	r3, [r5, #48]	; 0x30
   33400:	cmp	r2, r3
   33404:	blt	33160 <__assert_fail@plt+0x20b6c>
   33408:	ldr	r3, [r5]
   3340c:	ldr	r1, [r5, #24]
   33410:	ldr	r2, [r5, #64]	; 0x40
   33414:	add	r3, r3, r4
   33418:	ldrb	r3, [r3, r1]
   3341c:	cmp	r2, #0
   33420:	ldr	r1, [r5, #4]
   33424:	ldrbne	r3, [r2, r3]
   33428:	lsl	r2, r6, #2
   3342c:	strb	r3, [r1, r6]
   33430:	ldrb	r1, [r5, #76]	; 0x4c
   33434:	cmp	r1, #0
   33438:	ldrne	r1, [r5, #12]
   3343c:	strne	r4, [r1, r6, lsl #2]
   33440:	cmn	sl, #1
   33444:	add	r4, r4, #1
   33448:	ldr	r1, [r5, #8]
   3344c:	add	r6, r6, #1
   33450:	str	r3, [r1, r2]
   33454:	ldrdeq	r2, [sp, #24]
   33458:	strdeq	r2, [r5, #16]
   3345c:	b	3304c <__assert_fail@plt+0x20a58>
   33460:	ldr	r3, [r5, #12]
   33464:	add	r2, sl, r4
   33468:	add	r3, r3, r6, lsl #2
   3346c:	str	r4, [r3], #4
   33470:	add	r4, r4, #1
   33474:	cmp	r2, r4
   33478:	bne	3346c <__assert_fail@plt+0x20e78>
   3347c:	b	33120 <__assert_fail@plt+0x20b2c>
   33480:	cmn	r0, #1
   33484:	beq	333d4 <__assert_fail@plt+0x20de0>
   33488:	add	r8, r0, r6
   3348c:	ldr	r0, [r5, #36]	; 0x24
   33490:	cmp	r8, r0
   33494:	bhi	33160 <__assert_fail@plt+0x20b6c>
   33498:	ldr	r2, [r5, #12]
   3349c:	cmp	r2, #0
   334a0:	beq	33590 <__assert_fail@plt+0x20f9c>
   334a4:	ldrb	r2, [r5, #76]	; 0x4c
   334a8:	cmp	r2, #0
   334ac:	bne	334d8 <__assert_fail@plt+0x20ee4>
   334b0:	cmp	r6, #0
   334b4:	ldrne	r1, [r5, #12]
   334b8:	subne	r1, r1, #4
   334bc:	beq	334d0 <__assert_fail@plt+0x20edc>
   334c0:	str	r2, [r1, #4]!
   334c4:	add	r2, r2, #1
   334c8:	cmp	r2, r6
   334cc:	bne	334c0 <__assert_fail@plt+0x20ecc>
   334d0:	mov	r2, #1
   334d4:	strb	r2, [r5, #76]	; 0x4c
   334d8:	ldr	r0, [r5, #4]
   334dc:	mov	r2, r3
   334e0:	ldr	r1, [sp]
   334e4:	str	r3, [sp]
   334e8:	add	r0, r0, r6
   334ec:	bl	12024 <memcpy@plt>
   334f0:	ldr	r3, [sp]
   334f4:	lsl	r1, r6, #2
   334f8:	ldr	r2, [r5, #8]
   334fc:	ldr	r0, [r5, #12]
   33500:	cmp	r3, #1
   33504:	mvnhi	lr, #0
   33508:	str	fp, [r2, r6, lsl #2]
   3350c:	add	r2, r2, r1
   33510:	add	r1, r0, r1
   33514:	str	r4, [r0, r6, lsl #2]
   33518:	movhi	r0, #1
   3351c:	bls	33544 <__assert_fail@plt+0x20f50>
   33520:	ldr	ip, [sp, #4]
   33524:	cmp	r0, sl
   33528:	movcc	ip, r0
   3352c:	add	r0, r0, #1
   33530:	cmp	r3, r0
   33534:	add	ip, ip, r4
   33538:	str	ip, [r1, #4]!
   3353c:	str	lr, [r2, #4]!
   33540:	bne	33520 <__assert_fail@plt+0x20f2c>
   33544:	ldr	r7, [r5, #48]	; 0x30
   33548:	sub	r3, r3, sl
   3354c:	ldr	r2, [r5, #52]	; 0x34
   33550:	add	r7, r3, r7
   33554:	cmp	r2, r4
   33558:	str	r7, [r5, #48]	; 0x30
   3355c:	ble	3356c <__assert_fail@plt+0x20f78>
   33560:	ldr	r2, [r5, #56]	; 0x38
   33564:	add	r3, r2, r3
   33568:	str	r3, [r5, #56]	; 0x38
   3356c:	ldr	r3, [r5, #36]	; 0x24
   33570:	mov	r6, r8
   33574:	add	r4, sl, r4
   33578:	cmp	r7, r3
   3357c:	movge	r7, r3
   33580:	b	3304c <__assert_fail@plt+0x20a58>
   33584:	ldrd	r2, [sp, #24]
   33588:	strd	r2, [fp]
   3358c:	b	332c8 <__assert_fail@plt+0x20cd4>
   33590:	lsl	r0, r0, #2
   33594:	str	r3, [sp, #8]
   33598:	bl	31b54 <__assert_fail@plt+0x1f560>
   3359c:	cmp	r0, #0
   335a0:	str	r0, [r5, #12]
   335a4:	moveq	r0, #12
   335a8:	ldr	r3, [sp, #8]
   335ac:	bne	334a4 <__assert_fail@plt+0x20eb0>
   335b0:	b	33174 <__assert_fail@plt+0x20b80>
   335b4:	add	r3, sp, #32
   335b8:	str	r3, [sp]
   335bc:	b	333c0 <__assert_fail@plt+0x20dcc>
   335c0:	strd	r4, [sp, #-16]!
   335c4:	mov	r5, r0
   335c8:	ldr	r4, [r0, #28]
   335cc:	ldr	r3, [r0, #48]	; 0x30
   335d0:	str	r6, [sp, #8]
   335d4:	ldr	r6, [r0, #36]	; 0x24
   335d8:	str	lr, [sp, #12]
   335dc:	cmp	r6, r3
   335e0:	movge	r6, r3
   335e4:	cmp	r6, r4
   335e8:	ble	33640 <__assert_fail@plt+0x2104c>
   335ec:	bl	122a0 <__ctype_toupper_loc@plt>
   335f0:	ldr	r3, [r5]
   335f4:	ldr	r1, [r5, #24]
   335f8:	ldr	r2, [r5, #64]	; 0x40
   335fc:	add	r3, r3, r4
   33600:	ldrb	r3, [r3, r1]
   33604:	cmp	r2, #0
   33608:	ldr	r1, [r0]
   3360c:	ldrbne	r3, [r2, r3]
   33610:	ldr	r2, [r5, #4]
   33614:	ldr	r3, [r1, r3, lsl #2]
   33618:	strb	r3, [r2, r4]
   3361c:	add	r4, r4, #1
   33620:	cmp	r6, r4
   33624:	bne	335f0 <__assert_fail@plt+0x20ffc>
   33628:	str	r6, [r5, #28]
   3362c:	str	r6, [r5, #32]
   33630:	ldrd	r4, [sp]
   33634:	ldr	r6, [sp, #8]
   33638:	add	sp, sp, #12
   3363c:	pop	{pc}		; (ldr pc, [sp], #4)
   33640:	mov	r6, r4
   33644:	b	33628 <__assert_fail@plt+0x21034>
   33648:	ldr	r3, [r0, #36]	; 0x24
   3364c:	strd	r4, [sp, #-16]!
   33650:	str	r6, [sp, #8]
   33654:	str	lr, [sp, #12]
   33658:	cmn	r3, #-536870910	; 0xe0000002
   3365c:	bhi	33780 <__assert_fail@plt+0x2118c>
   33660:	ldr	r2, [r0, #48]	; 0x30
   33664:	lsl	r3, r3, #1
   33668:	mov	r4, r0
   3366c:	cmp	r3, r2
   33670:	movge	r3, r2
   33674:	cmp	r3, r1
   33678:	movge	r1, r3
   3367c:	bl	32c10 <__assert_fail@plt+0x2061c>
   33680:	subs	r5, r0, #0
   33684:	bne	336ec <__assert_fail@plt+0x210f8>
   33688:	ldr	r0, [r4, #100]	; 0x64
   3368c:	cmp	r0, #0
   33690:	beq	336b0 <__assert_fail@plt+0x210bc>
   33694:	ldr	r1, [r4, #36]	; 0x24
   33698:	add	r1, r1, #1
   3369c:	lsl	r1, r1, #2
   336a0:	bl	32624 <__assert_fail@plt+0x20030>
   336a4:	cmp	r0, #0
   336a8:	beq	33780 <__assert_fail@plt+0x2118c>
   336ac:	str	r0, [r4, #100]	; 0x64
   336b0:	ldrb	r3, [r4, #72]	; 0x48
   336b4:	ldr	r2, [r4, #80]	; 0x50
   336b8:	cmp	r3, #0
   336bc:	beq	33700 <__assert_fail@plt+0x2110c>
   336c0:	cmp	r2, #1
   336c4:	mov	r0, r4
   336c8:	ble	33778 <__assert_fail@plt+0x21184>
   336cc:	ldrd	r4, [sp]
   336d0:	ldr	r6, [sp, #8]
   336d4:	ldr	lr, [sp, #12]
   336d8:	add	sp, sp, #16
   336dc:	b	33000 <__assert_fail@plt+0x20a0c>
   336e0:	mov	lr, r3
   336e4:	str	lr, [r4, #28]
   336e8:	str	lr, [r4, #32]
   336ec:	mov	r0, r5
   336f0:	ldrd	r4, [sp]
   336f4:	ldr	r6, [sp, #8]
   336f8:	add	sp, sp, #12
   336fc:	pop	{pc}		; (ldr pc, [sp], #4)
   33700:	cmp	r2, #1
   33704:	bgt	3376c <__assert_fail@plt+0x21178>
   33708:	ldr	r1, [r4, #64]	; 0x40
   3370c:	cmp	r1, #0
   33710:	beq	336ec <__assert_fail@plt+0x210f8>
   33714:	ldr	r3, [r4, #28]
   33718:	ldr	lr, [r4, #36]	; 0x24
   3371c:	ldr	r2, [r4, #48]	; 0x30
   33720:	cmp	lr, r2
   33724:	movge	lr, r2
   33728:	cmp	lr, r3
   3372c:	bgt	33738 <__assert_fail@plt+0x21144>
   33730:	b	336e0 <__assert_fail@plt+0x210ec>
   33734:	ldr	r1, [r4, #64]	; 0x40
   33738:	ldr	r2, [r4]
   3373c:	ldr	r0, [r4, #4]
   33740:	ldr	ip, [r4, #24]
   33744:	add	r2, r2, r3
   33748:	ldrb	r2, [r2, ip]
   3374c:	ldrb	r2, [r1, r2]
   33750:	strb	r2, [r0, r3]
   33754:	add	r3, r3, #1
   33758:	cmp	lr, r3
   3375c:	bne	33734 <__assert_fail@plt+0x21140>
   33760:	str	lr, [r4, #28]
   33764:	str	lr, [r4, #32]
   33768:	b	336ec <__assert_fail@plt+0x210f8>
   3376c:	mov	r0, r4
   33770:	bl	32e60 <__assert_fail@plt+0x2086c>
   33774:	b	336ec <__assert_fail@plt+0x210f8>
   33778:	bl	335c0 <__assert_fail@plt+0x20fcc>
   3377c:	b	336ec <__assert_fail@plt+0x210f8>
   33780:	mov	r5, #12
   33784:	b	336ec <__assert_fail@plt+0x210f8>
   33788:	str	r4, [sp, #-8]!
   3378c:	mov	r4, r0
   33790:	ldr	r0, [r0]
   33794:	str	lr, [sp, #4]
   33798:	bl	2f668 <__assert_fail@plt+0x1d074>
   3379c:	ldr	r0, [r4, #4]
   337a0:	bl	2f668 <__assert_fail@plt+0x1d074>
   337a4:	ldr	r0, [r4, #8]
   337a8:	bl	2f668 <__assert_fail@plt+0x1d074>
   337ac:	ldr	r0, [r4, #12]
   337b0:	bl	2f668 <__assert_fail@plt+0x1d074>
   337b4:	mov	r0, r4
   337b8:	ldr	r4, [sp]
   337bc:	ldr	lr, [sp, #4]
   337c0:	add	sp, sp, #8
   337c4:	b	2f668 <__assert_fail@plt+0x1d074>
   337c8:	ldr	r2, [r0, #4]
   337cc:	mov	r3, #255	; 0xff
   337d0:	movt	r3, #4
   337d4:	and	r3, r3, r2
   337d8:	cmp	r3, #6
   337dc:	beq	337ec <__assert_fail@plt+0x211f8>
   337e0:	cmp	r3, #3
   337e4:	beq	337f4 <__assert_fail@plt+0x21200>
   337e8:	bx	lr
   337ec:	ldr	r0, [r0]
   337f0:	b	33788 <__assert_fail@plt+0x21194>
   337f4:	ldr	r0, [r0]
   337f8:	b	2f668 <__assert_fail@plt+0x1d074>
   337fc:	add	r0, r1, #20
   33800:	str	r4, [sp, #-8]!
   33804:	str	lr, [sp, #4]
   33808:	bl	337c8 <__assert_fail@plt+0x211d4>
   3380c:	ldr	r4, [sp]
   33810:	add	sp, sp, #4
   33814:	mov	r0, #0
   33818:	pop	{pc}		; (ldr pc, [sp], #4)
   3381c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   33820:	mov	r4, r0
   33824:	ldr	ip, [r0, #8]
   33828:	strd	r6, [sp, #8]
   3382c:	ldr	r6, [r0, #4]
   33830:	strd	r8, [sp, #16]
   33834:	str	sl, [sp, #24]
   33838:	str	lr, [sp, #28]
   3383c:	sub	sp, sp, #8
   33840:	add	r3, sp, #8
   33844:	cmp	ip, r6
   33848:	stmdb	r3, {r1, r2}
   3384c:	ldrb	r5, [sp, #4]
   33850:	bcs	33920 <__assert_fail@plt+0x2132c>
   33854:	ldr	r7, [r0, #12]
   33858:	ldr	r6, [r0, #20]
   3385c:	lsl	r0, ip, #3
   33860:	cmp	r5, #5
   33864:	ldr	lr, [r4]
   33868:	ldrd	r2, [sp]
   3386c:	add	r1, lr, r0
   33870:	strd	r2, [lr, r0]
   33874:	ldr	r3, [r1, #4]
   33878:	bfc	r3, #8, #10
   3387c:	str	r3, [r1, #4]
   33880:	beq	3390c <__assert_fail@plt+0x21318>
   33884:	sub	r5, r5, #6
   33888:	clz	r5, r5
   3388c:	lsr	r5, r5, #5
   33890:	ldrb	r3, [r1, #6]
   33894:	mvn	r0, #0
   33898:	mov	r2, #0
   3389c:	bfi	r3, r5, #4, #1
   338a0:	strb	r3, [r1, #6]
   338a4:	str	r0, [r7, ip, lsl #2]
   338a8:	ldr	r3, [r4, #8]
   338ac:	add	r3, r3, r3, lsl #1
   338b0:	lsl	r3, r3, #2
   338b4:	add	r1, r6, r3
   338b8:	str	r2, [r6, r3]
   338bc:	str	r2, [r1, #4]
   338c0:	str	r2, [r1, #8]
   338c4:	ldr	r3, [r4, #8]
   338c8:	ldr	r0, [r4, #24]
   338cc:	add	r3, r3, r3, lsl #1
   338d0:	lsl	r3, r3, #2
   338d4:	add	r1, r0, r3
   338d8:	str	r2, [r0, r3]
   338dc:	str	r2, [r1, #4]
   338e0:	str	r2, [r1, #8]
   338e4:	ldr	r0, [r4, #8]
   338e8:	add	r3, r0, #1
   338ec:	str	r3, [r4, #8]
   338f0:	add	sp, sp, #8
   338f4:	ldrd	r4, [sp]
   338f8:	ldrd	r6, [sp, #8]
   338fc:	ldrd	r8, [sp, #16]
   33900:	ldr	sl, [sp, #24]
   33904:	add	sp, sp, #28
   33908:	pop	{pc}		; (ldr pc, [sp], #4)
   3390c:	ldr	r5, [r4, #92]	; 0x5c
   33910:	cmp	r5, #1
   33914:	movle	r5, #0
   33918:	movgt	r5, #1
   3391c:	b	33890 <__assert_fail@plt+0x2129c>
   33920:	lsl	r9, r6, #1
   33924:	movw	r3, #21845	; 0x5555
   33928:	movt	r3, #5461	; 0x1555
   3392c:	cmp	r9, r3
   33930:	bhi	339ec <__assert_fail@plt+0x213f8>
   33934:	lsl	r1, r6, #4
   33938:	ldr	r0, [r0]
   3393c:	bl	32624 <__assert_fail@plt+0x20030>
   33940:	cmp	r0, #0
   33944:	beq	339ec <__assert_fail@plt+0x213f8>
   33948:	lsl	r8, r6, #3
   3394c:	str	r0, [r4]
   33950:	add	r6, r9, r6
   33954:	ldr	r0, [r4, #12]
   33958:	mov	r1, r8
   3395c:	bl	32624 <__assert_fail@plt+0x20030>
   33960:	mov	r7, r0
   33964:	mov	r1, r8
   33968:	lsl	r8, r6, #3
   3396c:	ldr	r0, [r4, #16]
   33970:	bl	32624 <__assert_fail@plt+0x20030>
   33974:	mov	sl, r0
   33978:	mov	r1, r8
   3397c:	ldr	r0, [r4, #20]
   33980:	bl	32624 <__assert_fail@plt+0x20030>
   33984:	mov	r6, r0
   33988:	mov	r1, r8
   3398c:	ldr	r0, [r4, #24]
   33990:	bl	32624 <__assert_fail@plt+0x20030>
   33994:	cmp	sl, #0
   33998:	cmpne	r7, #0
   3399c:	mov	r8, r0
   339a0:	beq	339cc <__assert_fail@plt+0x213d8>
   339a4:	cmp	r0, #0
   339a8:	cmpne	r6, #0
   339ac:	beq	339cc <__assert_fail@plt+0x213d8>
   339b0:	str	r9, [r4, #4]
   339b4:	str	r7, [r4, #12]
   339b8:	str	sl, [r4, #16]
   339bc:	str	r6, [r4, #20]
   339c0:	str	r0, [r4, #24]
   339c4:	ldr	ip, [r4, #8]
   339c8:	b	3385c <__assert_fail@plt+0x21268>
   339cc:	mov	r0, r7
   339d0:	bl	2f668 <__assert_fail@plt+0x1d074>
   339d4:	mov	r0, sl
   339d8:	bl	2f668 <__assert_fail@plt+0x1d074>
   339dc:	mov	r0, r6
   339e0:	bl	2f668 <__assert_fail@plt+0x1d074>
   339e4:	mov	r0, r8
   339e8:	bl	2f668 <__assert_fail@plt+0x1d074>
   339ec:	mvn	r0, #0
   339f0:	b	338f0 <__assert_fail@plt+0x212fc>
   339f4:	ldr	r3, [r0]
   339f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   339fc:	mov	r4, r2
   33a00:	mov	r5, r0
   33a04:	strd	r6, [sp, #8]
   33a08:	lsl	r7, r1, #3
   33a0c:	mov	r6, r1
   33a10:	str	r8, [sp, #16]
   33a14:	str	lr, [sp, #20]
   33a18:	add	r3, r3, r7
   33a1c:	ldm	r3, {r1, r2}
   33a20:	bl	3381c <__assert_fail@plt+0x21228>
   33a24:	cmn	r0, #1
   33a28:	beq	33a74 <__assert_fail@plt+0x21480>
   33a2c:	ldr	r1, [r5]
   33a30:	ubfx	r2, r4, #0, #10
   33a34:	add	r3, r1, r0, lsl #3
   33a38:	add	r7, r1, r7
   33a3c:	ldr	ip, [r3, #4]
   33a40:	bfi	ip, r2, #8, #10
   33a44:	mov	r1, ip
   33a48:	str	ip, [r3, #4]
   33a4c:	ldr	ip, [r7, #4]
   33a50:	ubfx	ip, ip, #8, #10
   33a54:	orr	r2, r2, ip
   33a58:	bfi	r1, r2, #8, #10
   33a5c:	ubfx	r2, r1, #16, #8
   33a60:	str	r1, [r3, #4]
   33a64:	orr	r2, r2, #4
   33a68:	strb	r2, [r3, #6]
   33a6c:	ldr	r3, [r5, #16]
   33a70:	str	r6, [r3, r0, lsl #2]
   33a74:	ldrd	r4, [sp]
   33a78:	ldrd	r6, [sp, #8]
   33a7c:	ldr	r8, [sp, #16]
   33a80:	add	sp, sp, #20
   33a84:	pop	{pc}		; (ldr pc, [sp], #4)
   33a88:	str	r4, [sp, #-8]!
   33a8c:	mov	r4, r0
   33a90:	ldr	r0, [r0, #24]
   33a94:	str	lr, [sp, #4]
   33a98:	bl	2f668 <__assert_fail@plt+0x1d074>
   33a9c:	ldr	r0, [r4, #36]	; 0x24
   33aa0:	bl	2f668 <__assert_fail@plt+0x1d074>
   33aa4:	ldr	r3, [r4, #40]	; 0x28
   33aa8:	add	r2, r4, #4
   33aac:	cmp	r3, r2
   33ab0:	beq	33ac4 <__assert_fail@plt+0x214d0>
   33ab4:	ldr	r0, [r3, #8]
   33ab8:	bl	2f668 <__assert_fail@plt+0x1d074>
   33abc:	ldr	r0, [r4, #40]	; 0x28
   33ac0:	bl	2f668 <__assert_fail@plt+0x1d074>
   33ac4:	ldr	r0, [r4, #12]
   33ac8:	bl	2f668 <__assert_fail@plt+0x1d074>
   33acc:	ldr	r0, [r4, #48]	; 0x30
   33ad0:	bl	2f668 <__assert_fail@plt+0x1d074>
   33ad4:	ldr	r0, [r4, #44]	; 0x2c
   33ad8:	bl	2f668 <__assert_fail@plt+0x1d074>
   33adc:	mov	r0, r4
   33ae0:	ldr	r4, [sp]
   33ae4:	ldr	lr, [sp, #4]
   33ae8:	add	sp, sp, #8
   33aec:	b	2f668 <__assert_fail@plt+0x1d074>
   33af0:	str	r4, [sp, #-8]!
   33af4:	mov	r4, r0
   33af8:	ldr	r0, [r0, #8]
   33afc:	str	lr, [sp, #4]
   33b00:	bl	2f668 <__assert_fail@plt+0x1d074>
   33b04:	ldr	r0, [r4, #12]
   33b08:	bl	2f668 <__assert_fail@plt+0x1d074>
   33b0c:	ldrb	r3, [r4, #75]	; 0x4b
   33b10:	cmp	r3, #0
   33b14:	bne	33b24 <__assert_fail@plt+0x21530>
   33b18:	ldr	r4, [sp]
   33b1c:	add	sp, sp, #4
   33b20:	pop	{pc}		; (ldr pc, [sp], #4)
   33b24:	ldr	r0, [r4, #4]
   33b28:	ldr	r4, [sp]
   33b2c:	ldr	lr, [sp, #4]
   33b30:	add	sp, sp, #8
   33b34:	b	2f668 <__assert_fail@plt+0x1d074>
   33b38:	ldr	r3, [r0, #124]	; 0x7c
   33b3c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33b40:	strd	r6, [sp, #8]
   33b44:	str	r8, [sp, #16]
   33b48:	mov	r8, r0
   33b4c:	str	lr, [sp, #20]
   33b50:	cmp	r3, #0
   33b54:	ble	33bd8 <__assert_fail@plt+0x215e4>
   33b58:	mov	r7, #0
   33b5c:	ldr	r3, [r8, #132]	; 0x84
   33b60:	ldr	r6, [r3, r7, lsl #2]
   33b64:	ldr	r3, [r6, #16]
   33b68:	cmp	r3, #0
   33b6c:	ble	33b9c <__assert_fail@plt+0x215a8>
   33b70:	mov	r4, #0
   33b74:	ldr	r3, [r6, #20]
   33b78:	ldr	r5, [r3, r4, lsl #2]
   33b7c:	add	r4, r4, #1
   33b80:	ldr	r0, [r5, #16]
   33b84:	bl	2f668 <__assert_fail@plt+0x1d074>
   33b88:	mov	r0, r5
   33b8c:	bl	2f668 <__assert_fail@plt+0x1d074>
   33b90:	ldr	r3, [r6, #16]
   33b94:	cmp	r3, r4
   33b98:	bgt	33b74 <__assert_fail@plt+0x21580>
   33b9c:	ldr	r0, [r6, #20]
   33ba0:	bl	2f668 <__assert_fail@plt+0x1d074>
   33ba4:	ldr	r3, [r6, #8]
   33ba8:	cmp	r3, #0
   33bac:	beq	33bc0 <__assert_fail@plt+0x215cc>
   33bb0:	ldr	r0, [r3, #8]
   33bb4:	bl	2f668 <__assert_fail@plt+0x1d074>
   33bb8:	ldr	r0, [r6, #8]
   33bbc:	bl	2f668 <__assert_fail@plt+0x1d074>
   33bc0:	mov	r0, r6
   33bc4:	add	r7, r7, #1
   33bc8:	bl	2f668 <__assert_fail@plt+0x1d074>
   33bcc:	ldr	r3, [r8, #124]	; 0x7c
   33bd0:	cmp	r3, r7
   33bd4:	bgt	33b5c <__assert_fail@plt+0x21568>
   33bd8:	mov	r3, #0
   33bdc:	ldrd	r4, [sp]
   33be0:	ldrd	r6, [sp, #8]
   33be4:	str	r3, [r8, #108]	; 0x6c
   33be8:	str	r3, [r8, #124]	; 0x7c
   33bec:	ldr	r8, [sp, #16]
   33bf0:	add	sp, sp, #20
   33bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   33bf8:	ldrb	r3, [r1, #24]
   33bfc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33c00:	ldr	r2, [r1, #28]
   33c04:	strd	r6, [sp, #8]
   33c08:	str	r8, [sp, #16]
   33c0c:	sub	r3, r3, #2
   33c10:	str	lr, [sp, #20]
   33c14:	cmp	r3, #14
   33c18:	ldrls	pc, [pc, r3, lsl #2]
   33c1c:	b	33d64 <__assert_fail@plt+0x21770>
   33c20:	andeq	r3, r3, r8, ror ip
   33c24:	andeq	r3, r3, r4, ror #26
   33c28:	andeq	r3, r3, ip, asr ip
   33c2c:	andeq	r3, r3, r4, ror #26
   33c30:	andeq	r3, r3, r4, ror #26
   33c34:	andeq	r3, r3, r4, ror #26
   33c38:	andeq	r3, r3, r4, lsl sp
   33c3c:	andeq	r3, r3, r4, lsl sp
   33c40:	muleq	r3, r4, ip
   33c44:	muleq	r3, r4, ip
   33c48:	andeq	r3, r3, r4, lsl sp
   33c4c:	andeq	r3, r3, r4, ror #26
   33c50:	andeq	r3, r3, r4, ror #26
   33c54:	andeq	r3, r3, r4, ror #26
   33c58:	andeq	r3, r3, r8, ror ip
   33c5c:	ldr	ip, [r1, #16]
   33c60:	ldr	r3, [r0, #12]
   33c64:	ldr	r4, [ip, #28]
   33c68:	str	r4, [r3, r2, lsl #2]
   33c6c:	ldrb	r3, [r1, #24]
   33c70:	cmp	r3, #4
   33c74:	beq	33d90 <__assert_fail@plt+0x2179c>
   33c78:	mov	r3, #0
   33c7c:	ldrd	r4, [sp]
   33c80:	mov	r0, r3
   33c84:	ldrd	r6, [sp, #8]
   33c88:	ldr	r8, [sp, #16]
   33c8c:	add	sp, sp, #20
   33c90:	pop	{pc}		; (ldr pc, [sp], #4)
   33c94:	ldrb	r3, [r0, #88]	; 0x58
   33c98:	add	r2, r2, r2, lsl #1
   33c9c:	mov	r6, #2
   33ca0:	lsl	r2, r2, r6
   33ca4:	orr	r3, r3, #1
   33ca8:	strb	r3, [r0, #88]	; 0x58
   33cac:	ldr	r3, [r1, #4]
   33cb0:	cmp	r3, #0
   33cb4:	ldrne	r3, [r3, #12]
   33cb8:	ldreq	r3, [r1, #16]
   33cbc:	ldr	r5, [r3, #28]
   33cc0:	ldr	r3, [r1, #8]
   33cc4:	cmp	r3, #0
   33cc8:	ldrne	r3, [r3, #12]
   33ccc:	ldreq	r3, [r1, #16]
   33cd0:	ldr	r7, [r3, #28]
   33cd4:	ldr	r3, [r0, #20]
   33cd8:	mov	r0, #8
   33cdc:	str	r6, [r3, r2]
   33ce0:	add	r4, r3, r2
   33ce4:	bl	31b54 <__assert_fail@plt+0x1f560>
   33ce8:	cmp	r0, #0
   33cec:	str	r0, [r4, #8]
   33cf0:	beq	33dd8 <__assert_fail@plt+0x217e4>
   33cf4:	cmp	r5, r7
   33cf8:	beq	33d7c <__assert_fail@plt+0x21788>
   33cfc:	mov	r3, #0
   33d00:	str	r6, [r4, #4]
   33d04:	stmlt	r0, {r5, r7}
   33d08:	strge	r7, [r0]
   33d0c:	strge	r5, [r0, #4]
   33d10:	b	33c7c <__assert_fail@plt+0x21688>
   33d14:	ldr	r5, [r0, #20]
   33d18:	add	r2, r2, r2, lsl #1
   33d1c:	mov	r3, #1
   33d20:	mov	r0, #4
   33d24:	ldr	r1, [r1, #16]
   33d28:	lsl	r4, r2, #2
   33d2c:	add	r6, r5, r4
   33d30:	ldr	r7, [r1, #28]
   33d34:	str	r3, [r5, r4]
   33d38:	str	r3, [r6, #4]
   33d3c:	bl	31b54 <__assert_fail@plt+0x1f560>
   33d40:	cmp	r0, #0
   33d44:	str	r0, [r6, #8]
   33d48:	moveq	r3, #12
   33d4c:	streq	r0, [r6, #4]
   33d50:	streq	r0, [r5, r4]
   33d54:	beq	33c7c <__assert_fail@plt+0x21688>
   33d58:	mov	r3, #0
   33d5c:	str	r7, [r0]
   33d60:	b	33c7c <__assert_fail@plt+0x21688>
   33d64:	ldr	ip, [r1, #16]
   33d68:	mov	r3, #0
   33d6c:	ldr	r1, [r0, #12]
   33d70:	ldr	r0, [ip, #28]
   33d74:	str	r0, [r1, r2, lsl #2]
   33d78:	b	33c7c <__assert_fail@plt+0x21688>
   33d7c:	mov	r2, #1
   33d80:	mov	r3, #0
   33d84:	str	r2, [r4, #4]
   33d88:	str	r5, [r0]
   33d8c:	b	33c7c <__assert_fail@plt+0x21688>
   33d90:	ldr	r6, [r0, #20]
   33d94:	add	r2, r2, r2, lsl #1
   33d98:	mov	r1, #1
   33d9c:	mov	r0, r3
   33da0:	lsl	r5, r2, #2
   33da4:	add	r7, r6, r5
   33da8:	str	r1, [r6, r5]
   33dac:	str	r1, [r7, #4]
   33db0:	bl	31b54 <__assert_fail@plt+0x1f560>
   33db4:	cmp	r0, #0
   33db8:	str	r0, [r7, #8]
   33dbc:	moveq	r3, #12
   33dc0:	streq	r0, [r7, #4]
   33dc4:	streq	r0, [r6, r5]
   33dc8:	beq	33c7c <__assert_fail@plt+0x21688>
   33dcc:	mov	r3, #0
   33dd0:	str	r4, [r0]
   33dd4:	b	33c7c <__assert_fail@plt+0x21688>
   33dd8:	mov	r3, #12
   33ddc:	b	33c7c <__assert_fail@plt+0x21688>
   33de0:	ldr	r3, [r0]
   33de4:	strd	r4, [sp, #-16]!
   33de8:	mov	r4, r0
   33dec:	str	r6, [sp, #8]
   33df0:	mov	r6, r1
   33df4:	str	lr, [sp, #12]
   33df8:	cmp	r3, #0
   33dfc:	beq	33e34 <__assert_fail@plt+0x21840>
   33e00:	ldr	r1, [r0, #4]
   33e04:	ldr	r0, [r0, #8]
   33e08:	cmp	r1, #0
   33e0c:	bne	33e78 <__assert_fail@plt+0x21884>
   33e10:	str	r6, [r0]
   33e14:	mov	r0, #1
   33e18:	ldr	r3, [r4, #4]
   33e1c:	add	r3, r3, r0
   33e20:	str	r3, [r4, #4]
   33e24:	ldrd	r4, [sp]
   33e28:	ldr	r6, [sp, #8]
   33e2c:	add	sp, sp, #12
   33e30:	pop	{pc}		; (ldr pc, [sp], #4)
   33e34:	mov	r5, #1
   33e38:	mov	r0, #4
   33e3c:	str	r5, [r4]
   33e40:	str	r5, [r4, #4]
   33e44:	bl	31b54 <__assert_fail@plt+0x1f560>
   33e48:	mov	r3, r0
   33e4c:	cmp	r0, #0
   33e50:	str	r0, [r4, #8]
   33e54:	streq	r3, [r4]
   33e58:	streq	r3, [r4, #4]
   33e5c:	beq	33e24 <__assert_fail@plt+0x21830>
   33e60:	mov	r0, r5
   33e64:	str	r6, [r3]
   33e68:	ldrd	r4, [sp]
   33e6c:	ldr	r6, [sp, #8]
   33e70:	add	sp, sp, #12
   33e74:	pop	{pc}		; (ldr pc, [sp], #4)
   33e78:	cmp	r3, r1
   33e7c:	beq	33f00 <__assert_fail@plt+0x2190c>
   33e80:	ldr	r2, [r0]
   33e84:	mov	r3, r1
   33e88:	cmp	r2, r6
   33e8c:	ble	33eb4 <__assert_fail@plt+0x218c0>
   33e90:	cmp	r1, #0
   33e94:	ble	33ee8 <__assert_fail@plt+0x218f4>
   33e98:	add	r1, r0, r1, lsl #2
   33e9c:	ldr	r3, [r1, #-4]
   33ea0:	str	r3, [r1], #-4
   33ea4:	cmp	r1, r0
   33ea8:	bne	33e9c <__assert_fail@plt+0x218a8>
   33eac:	mov	r3, #0
   33eb0:	b	33ee8 <__assert_fail@plt+0x218f4>
   33eb4:	sub	r3, r1, #-1073741823	; 0xc0000001
   33eb8:	ldr	r2, [r0, r3, lsl #2]
   33ebc:	lsl	r3, r3, #2
   33ec0:	cmp	r6, r2
   33ec4:	bge	33ee4 <__assert_fail@plt+0x218f0>
   33ec8:	add	r3, r3, #4
   33ecc:	add	r3, r0, r3
   33ed0:	str	r2, [r3], #-4
   33ed4:	sub	r1, r1, #1
   33ed8:	ldr	r2, [r3, #-4]
   33edc:	cmp	r2, r6
   33ee0:	bgt	33ed0 <__assert_fail@plt+0x218dc>
   33ee4:	mov	r3, r1
   33ee8:	str	r6, [r0, r3, lsl #2]
   33eec:	mov	r0, #1
   33ef0:	ldr	r3, [r4, #4]
   33ef4:	add	r3, r3, r0
   33ef8:	str	r3, [r4, #4]
   33efc:	b	33e24 <__assert_fail@plt+0x21830>
   33f00:	lsl	r3, r1, #1
   33f04:	lsl	r1, r1, #3
   33f08:	str	r3, [r4]
   33f0c:	bl	32624 <__assert_fail@plt+0x20030>
   33f10:	cmp	r0, #0
   33f14:	beq	33e24 <__assert_fail@plt+0x21830>
   33f18:	str	r0, [r4, #8]
   33f1c:	ldr	r1, [r4, #4]
   33f20:	b	33e80 <__assert_fail@plt+0x2188c>
   33f24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   33f28:	mov	r4, r0
   33f2c:	mov	r5, r2
   33f30:	strd	r6, [sp, #8]
   33f34:	mov	r7, r1
   33f38:	strd	r8, [sp, #16]
   33f3c:	strd	sl, [sp, #24]
   33f40:	mov	sl, #0
   33f44:	str	lr, [sp, #32]
   33f48:	sub	sp, sp, #20
   33f4c:	ldr	r9, [sp, #56]	; 0x38
   33f50:	str	r3, [sp, #12]
   33f54:	ldr	r2, [r4]
   33f58:	mov	r6, r5
   33f5c:	ldr	r1, [r4, #20]
   33f60:	add	ip, r2, r7, lsl #3
   33f64:	ldrb	r3, [ip, #4]
   33f68:	cmp	r3, #4
   33f6c:	beq	340fc <__assert_fail@plt+0x21b08>
   33f70:	add	r8, r7, r7, lsl #1
   33f74:	lsl	r8, r8, #2
   33f78:	add	r3, r1, r8
   33f7c:	ldr	r0, [r3, #4]
   33f80:	cmp	r0, #0
   33f84:	beq	341b4 <__assert_fail@plt+0x21bc0>
   33f88:	ldr	r3, [r3, #8]
   33f8c:	add	r6, r5, r5, lsl #1
   33f90:	cmp	r0, #1
   33f94:	lsl	r6, r6, #2
   33f98:	add	r0, r1, r6
   33f9c:	ldr	fp, [r3]
   33fa0:	beq	34090 <__assert_fail@plt+0x21a9c>
   33fa4:	ldr	r5, [r4, #8]
   33fa8:	sub	r1, r5, #1
   33fac:	add	ip, r2, r1, lsl #3
   33fb0:	cmp	r1, #0
   33fb4:	movle	lr, #0
   33fb8:	movgt	lr, #1
   33fbc:	ldrb	r7, [ip, #6]
   33fc0:	str	sl, [r0, #4]
   33fc4:	ands	r3, lr, r7, lsr #2
   33fc8:	beq	3415c <__assert_fail@plt+0x21b68>
   33fcc:	ldr	lr, [r4, #16]
   33fd0:	add	r2, r2, r5, lsl #3
   33fd4:	sub	r2, r2, ip
   33fd8:	sub	r2, r2, #16
   33fdc:	add	lr, lr, r5, lsl #2
   33fe0:	b	34004 <__assert_fail@plt+0x21a10>
   33fe4:	add	ip, ip, r2
   33fe8:	sub	r1, r1, #1
   33fec:	ldrb	r7, [ip, #6]
   33ff0:	cmp	r1, #0
   33ff4:	movle	r5, #0
   33ff8:	movgt	r5, #1
   33ffc:	ands	r3, r5, r7, lsr #2
   34000:	beq	3415c <__assert_fail@plt+0x21b68>
   34004:	ldr	r5, [lr, #-4]!
   34008:	cmp	r5, fp
   3400c:	bne	33fe4 <__assert_fail@plt+0x219f0>
   34010:	ldr	r7, [ip, #4]
   34014:	ubfx	r7, r7, #8, #10
   34018:	cmp	r9, r7
   3401c:	bne	33fe4 <__assert_fail@plt+0x219f0>
   34020:	bl	33de0 <__assert_fail@plt+0x217ec>
   34024:	cmp	r0, #0
   34028:	beq	34070 <__assert_fail@plt+0x21a7c>
   3402c:	ldr	r3, [r4, #20]
   34030:	mov	r2, r9
   34034:	mov	r0, r4
   34038:	add	r8, r3, r8
   3403c:	ldr	r3, [r8, #8]
   34040:	ldr	r7, [r3, #4]
   34044:	mov	r1, r7
   34048:	bl	339f4 <__assert_fail@plt+0x21400>
   3404c:	cmn	r0, #1
   34050:	mov	r5, r0
   34054:	beq	34070 <__assert_fail@plt+0x21a7c>
   34058:	mov	r1, r0
   3405c:	ldr	r0, [r4, #20]
   34060:	add	r0, r0, r6
   34064:	bl	33de0 <__assert_fail@plt+0x217ec>
   34068:	cmp	r0, #0
   3406c:	bne	33f54 <__assert_fail@plt+0x21960>
   34070:	mov	r0, #12
   34074:	add	sp, sp, #20
   34078:	ldrd	r4, [sp]
   3407c:	ldrd	r6, [sp, #8]
   34080:	ldrd	r8, [sp, #16]
   34084:	ldrd	sl, [sp, #24]
   34088:	add	sp, sp, #32
   3408c:	pop	{pc}		; (ldr pc, [sp], #4)
   34090:	ldr	r2, [sp, #12]
   34094:	cmp	r7, r5
   34098:	str	sl, [r0, #4]
   3409c:	sub	r2, r7, r2
   340a0:	clz	r2, r2
   340a4:	lsr	r2, r2, #5
   340a8:	moveq	r2, #0
   340ac:	cmp	r2, #0
   340b0:	bne	341c4 <__assert_fail@plt+0x21bd0>
   340b4:	ldr	r2, [ip, #4]
   340b8:	mov	r1, fp
   340bc:	mov	r0, r4
   340c0:	ubfx	r2, r2, #8, #10
   340c4:	orr	r9, r9, r2
   340c8:	mov	r2, r9
   340cc:	bl	339f4 <__assert_fail@plt+0x21400>
   340d0:	cmn	r0, #1
   340d4:	mov	r5, r0
   340d8:	beq	34070 <__assert_fail@plt+0x21a7c>
   340dc:	mov	r1, r0
   340e0:	ldr	r0, [r4, #20]
   340e4:	add	r0, r0, r6
   340e8:	bl	33de0 <__assert_fail@plt+0x217ec>
   340ec:	cmp	r0, #0
   340f0:	beq	34070 <__assert_fail@plt+0x21a7c>
   340f4:	mov	r7, fp
   340f8:	b	33f54 <__assert_fail@plt+0x21960>
   340fc:	ldr	ip, [r4, #12]
   34100:	add	r5, r5, r5, lsl #1
   34104:	mov	r2, r9
   34108:	lsl	fp, r7, #2
   3410c:	mov	r0, r4
   34110:	lsl	r8, r5, #2
   34114:	add	r1, r1, r8
   34118:	ldr	r7, [ip, r7, lsl #2]
   3411c:	str	sl, [r1, #4]
   34120:	mov	r1, r7
   34124:	bl	339f4 <__assert_fail@plt+0x21400>
   34128:	cmn	r0, #1
   3412c:	mov	r5, r0
   34130:	beq	34070 <__assert_fail@plt+0x21a7c>
   34134:	ldr	r2, [r4, #12]
   34138:	mov	r1, r0
   3413c:	ldr	r0, [r4, #20]
   34140:	ldr	r3, [r2, fp]
   34144:	add	r0, r0, r8
   34148:	str	r3, [r2, r6, lsl #2]
   3414c:	bl	33de0 <__assert_fail@plt+0x217ec>
   34150:	cmp	r0, #0
   34154:	bne	33f54 <__assert_fail@plt+0x21960>
   34158:	b	34070 <__assert_fail@plt+0x21a7c>
   3415c:	mov	r2, r9
   34160:	mov	r1, fp
   34164:	mov	r0, r4
   34168:	bl	339f4 <__assert_fail@plt+0x21400>
   3416c:	cmn	r0, #1
   34170:	mov	r5, r0
   34174:	beq	34070 <__assert_fail@plt+0x21a7c>
   34178:	ldr	r0, [r4, #20]
   3417c:	mov	r1, r5
   34180:	add	r0, r0, r6
   34184:	bl	33de0 <__assert_fail@plt+0x217ec>
   34188:	cmp	r0, #0
   3418c:	beq	34070 <__assert_fail@plt+0x21a7c>
   34190:	mov	r2, r5
   34194:	mov	r1, fp
   34198:	str	r9, [sp]
   3419c:	mov	r0, r4
   341a0:	ldr	r3, [sp, #12]
   341a4:	bl	33f24 <__assert_fail@plt+0x21930>
   341a8:	cmp	r0, #0
   341ac:	beq	3402c <__assert_fail@plt+0x21a38>
   341b0:	b	34074 <__assert_fail@plt+0x21a80>
   341b4:	ldr	r3, [r4, #12]
   341b8:	ldr	r2, [r3, r7, lsl #2]
   341bc:	str	r2, [r3, r5, lsl #2]
   341c0:	b	34074 <__assert_fail@plt+0x21a80>
   341c4:	mov	r1, fp
   341c8:	bl	33de0 <__assert_fail@plt+0x217ec>
   341cc:	cmp	r0, #0
   341d0:	movne	r0, #0
   341d4:	bne	34074 <__assert_fail@plt+0x21a80>
   341d8:	b	34070 <__assert_fail@plt+0x21a7c>
   341dc:	ldr	r3, [r0, #36]	; 0x24
   341e0:	strd	r4, [sp, #-16]!
   341e4:	mov	r4, r0
   341e8:	mov	r5, r1
   341ec:	str	r6, [sp, #8]
   341f0:	str	lr, [sp, #12]
   341f4:	ldr	r6, [r0, #104]	; 0x68
   341f8:	cmp	r3, r1
   341fc:	bgt	3423c <__assert_fail@plt+0x21c48>
   34200:	ldr	r2, [r0, #48]	; 0x30
   34204:	cmp	r3, r2
   34208:	bge	3423c <__assert_fail@plt+0x21c48>
   3420c:	add	r1, r5, #1
   34210:	mov	r0, r4
   34214:	bl	33648 <__assert_fail@plt+0x21054>
   34218:	cmp	r0, #0
   3421c:	bne	3422c <__assert_fail@plt+0x21c38>
   34220:	cmp	r6, r5
   34224:	movge	r0, #0
   34228:	blt	34258 <__assert_fail@plt+0x21c64>
   3422c:	ldrd	r4, [sp]
   34230:	ldr	r6, [sp, #8]
   34234:	add	sp, sp, #12
   34238:	pop	{pc}		; (ldr pc, [sp], #4)
   3423c:	ldr	r3, [r4, #28]
   34240:	cmp	r3, r5
   34244:	bgt	34220 <__assert_fail@plt+0x21c2c>
   34248:	ldr	r2, [r4, #48]	; 0x30
   3424c:	cmp	r3, r2
   34250:	bge	34220 <__assert_fail@plt+0x21c2c>
   34254:	b	3420c <__assert_fail@plt+0x21c18>
   34258:	ldr	r3, [r4, #100]	; 0x64
   3425c:	sub	r2, r5, r6
   34260:	add	r0, r6, #1
   34264:	lsl	r2, r2, #2
   34268:	mov	r1, #0
   3426c:	add	r0, r3, r0, lsl #2
   34270:	bl	12378 <memset@plt>
   34274:	str	r5, [r4, #104]	; 0x68
   34278:	mov	r0, #0
   3427c:	ldrd	r4, [sp]
   34280:	ldr	r6, [sp, #8]
   34284:	add	sp, sp, #12
   34288:	pop	{pc}		; (ldr pc, [sp], #4)
   3428c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   34290:	subs	r4, r0, #0
   34294:	strd	r6, [sp, #8]
   34298:	str	r8, [sp, #16]
   3429c:	str	lr, [sp, #20]
   342a0:	ldr	r7, [sp, #28]
   342a4:	beq	34350 <__assert_fail@plt+0x21d5c>
   342a8:	ldr	ip, [r4]
   342ac:	cmp	ip, #0
   342b0:	beq	34350 <__assert_fail@plt+0x21d5c>
   342b4:	sub	ip, ip, #1
   342b8:	ldr	lr, [r4, #8]
   342bc:	mov	r0, r3
   342c0:	add	r5, ip, ip, lsl #1
   342c4:	mov	r8, r1
   342c8:	lsl	r6, r2, #3
   342cc:	lsl	r5, r5, #3
   342d0:	mov	r2, r6
   342d4:	ldr	r3, [lr, r5]
   342d8:	add	lr, lr, r5
   342dc:	ldr	r1, [lr, #8]
   342e0:	str	ip, [r4]
   342e4:	str	r3, [r8]
   342e8:	bl	12024 <memcpy@plt>
   342ec:	ldr	r3, [r4, #8]
   342f0:	mov	r2, r6
   342f4:	ldr	r0, [sp, #24]
   342f8:	add	r3, r3, r5
   342fc:	ldr	r1, [r3, #8]
   34300:	add	r1, r1, r6
   34304:	bl	12024 <memcpy@plt>
   34308:	ldr	r0, [r7, #8]
   3430c:	bl	2f668 <__assert_fail@plt+0x1d074>
   34310:	ldr	r3, [r4, #8]
   34314:	add	r3, r3, r5
   34318:	ldr	r0, [r3, #8]
   3431c:	bl	2f668 <__assert_fail@plt+0x1d074>
   34320:	ldr	r3, [r4, #8]
   34324:	add	r5, r3, r5
   34328:	ldr	r0, [r5, #4]
   3432c:	ldrd	r2, [r5, #12]
   34330:	strd	r2, [r7]
   34334:	ldr	r3, [r5, #20]
   34338:	str	r3, [r7, #8]
   3433c:	ldrd	r4, [sp]
   34340:	ldrd	r6, [sp, #8]
   34344:	ldr	r8, [sp, #16]
   34348:	add	sp, sp, #20
   3434c:	pop	{pc}		; (ldr pc, [sp], #4)
   34350:	mvn	r0, #0
   34354:	b	3433c <__assert_fail@plt+0x21d48>
   34358:	ldr	r3, [r0, #28]
   3435c:	add	ip, r1, #1
   34360:	cmp	ip, r3
   34364:	bge	343ac <__assert_fail@plt+0x21db8>
   34368:	ldr	r2, [r0, #8]
   3436c:	ldr	r0, [r2, ip, lsl #2]
   34370:	add	r2, r2, ip, lsl #2
   34374:	cmn	r0, #1
   34378:	bne	343ac <__assert_fail@plt+0x21db8>
   3437c:	sub	r0, r3, r1
   34380:	mov	r3, #1
   34384:	b	34394 <__assert_fail@plt+0x21da0>
   34388:	ldr	ip, [r2, #4]!
   3438c:	cmn	ip, #1
   34390:	bne	343a4 <__assert_fail@plt+0x21db0>
   34394:	add	r3, r3, #1
   34398:	cmp	r3, r0
   3439c:	bne	34388 <__assert_fail@plt+0x21d94>
   343a0:	bx	lr
   343a4:	mov	r0, r3
   343a8:	bx	lr
   343ac:	mov	r0, #1
   343b0:	bx	lr
   343b4:	cmp	r0, #0
   343b8:	ble	34434 <__assert_fail@plt+0x21e40>
   343bc:	push	{lr}		; (str lr, [sp, #-4]!)
   343c0:	sub	ip, r0, #1
   343c4:	mov	r0, #0
   343c8:	ldr	lr, [r1]
   343cc:	cmp	r0, ip
   343d0:	bcs	3440c <__assert_fail@plt+0x21e18>
   343d4:	add	r1, r0, ip
   343d8:	lsr	r1, r1, #1
   343dc:	ldr	r3, [lr, r1, lsl #2]
   343e0:	cmp	r2, r3
   343e4:	ble	343fc <__assert_fail@plt+0x21e08>
   343e8:	b	34420 <__assert_fail@plt+0x21e2c>
   343ec:	ldr	ip, [lr, r3, lsl #2]
   343f0:	cmp	ip, r2
   343f4:	blt	34428 <__assert_fail@plt+0x21e34>
   343f8:	mov	r1, r3
   343fc:	add	r3, r0, r1
   34400:	cmp	r0, r1
   34404:	lsr	r3, r3, #1
   34408:	bcc	343ec <__assert_fail@plt+0x21df8>
   3440c:	ldr	r3, [lr, r0, lsl #2]
   34410:	cmp	r2, r3
   34414:	addeq	r0, r0, #1
   34418:	movne	r0, #0
   3441c:	pop	{pc}		; (ldr pc, [sp], #4)
   34420:	mov	r3, r1
   34424:	mov	r1, ip
   34428:	add	r0, r3, #1
   3442c:	mov	ip, r1
   34430:	b	343cc <__assert_fail@plt+0x21dd8>
   34434:	mov	r0, #0
   34438:	bx	lr
   3443c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   34440:	mov	r5, r1
   34444:	mov	r4, r2
   34448:	strd	r6, [sp, #8]
   3444c:	mov	r6, r0
   34450:	strd	r8, [sp, #16]
   34454:	mov	r9, r3
   34458:	add	r8, r1, #8
   3445c:	str	lr, [sp, #24]
   34460:	sub	sp, sp, #12
   34464:	ldr	r7, [sp, #40]	; 0x28
   34468:	mov	r1, r8
   3446c:	mov	r2, r4
   34470:	ldr	r0, [r5, #4]
   34474:	bl	343b4 <__assert_fail@plt+0x21dc0>
   34478:	cmp	r0, #0
   3447c:	mov	r1, r4
   34480:	mov	r0, r5
   34484:	bne	3454c <__assert_fail@plt+0x21f58>
   34488:	ldr	r3, [r6]
   3448c:	add	r2, r3, r4, lsl #3
   34490:	ldrb	r2, [r2, #4]
   34494:	cmp	r2, r7
   34498:	bne	344a8 <__assert_fail@plt+0x21eb4>
   3449c:	ldr	r3, [r3, r4, lsl #3]
   344a0:	cmp	r3, r9
   344a4:	beq	34514 <__assert_fail@plt+0x21f20>
   344a8:	bl	33de0 <__assert_fail@plt+0x217ec>
   344ac:	cmp	r0, #0
   344b0:	add	r4, r4, r4, lsl #1
   344b4:	beq	34530 <__assert_fail@plt+0x21f3c>
   344b8:	ldr	r3, [r6, #20]
   344bc:	lsl	r4, r4, #2
   344c0:	add	r3, r3, r4
   344c4:	ldr	r2, [r3, #4]
   344c8:	cmp	r2, #0
   344cc:	beq	3454c <__assert_fail@plt+0x21f58>
   344d0:	cmp	r2, #2
   344d4:	ldr	r2, [r3, #8]
   344d8:	beq	344e4 <__assert_fail@plt+0x21ef0>
   344dc:	ldr	r4, [r2]
   344e0:	b	34468 <__assert_fail@plt+0x21e74>
   344e4:	mov	r3, r9
   344e8:	mov	r1, r5
   344ec:	ldr	r2, [r2, #4]
   344f0:	mov	r0, r6
   344f4:	str	r7, [sp]
   344f8:	bl	3443c <__assert_fail@plt+0x21e48>
   344fc:	cmp	r0, #0
   34500:	bne	34534 <__assert_fail@plt+0x21f40>
   34504:	ldr	r3, [r6, #20]
   34508:	add	r4, r3, r4
   3450c:	ldr	r2, [r4, #8]
   34510:	b	344dc <__assert_fail@plt+0x21ee8>
   34514:	cmp	r7, #9
   34518:	bne	3454c <__assert_fail@plt+0x21f58>
   3451c:	mov	r1, r4
   34520:	mov	r0, r5
   34524:	bl	33de0 <__assert_fail@plt+0x217ec>
   34528:	cmp	r0, #0
   3452c:	bne	3454c <__assert_fail@plt+0x21f58>
   34530:	mov	r0, #12
   34534:	add	sp, sp, #12
   34538:	ldrd	r4, [sp]
   3453c:	ldrd	r6, [sp, #8]
   34540:	ldrd	r8, [sp, #16]
   34544:	add	sp, sp, #24
   34548:	pop	{pc}		; (ldr pc, [sp], #4)
   3454c:	mov	r0, #0
   34550:	b	34534 <__assert_fail@plt+0x21f40>
   34554:	ldr	r3, [r0]
   34558:	cmp	r2, r3
   3455c:	bge	34580 <__assert_fail@plt+0x21f8c>
   34560:	ldr	r3, [r1]
   34564:	add	r3, r3, r2, lsl #2
   34568:	ldr	r1, [r3, #4]
   3456c:	add	r2, r2, #1
   34570:	str	r1, [r3], #4
   34574:	ldr	r1, [r0]
   34578:	cmp	r2, r1
   3457c:	blt	34568 <__assert_fail@plt+0x21f74>
   34580:	bx	lr
   34584:	ldrb	r3, [r1, #24]
   34588:	cmp	r3, #4
   3458c:	beq	345f8 <__assert_fail@plt+0x22004>
   34590:	cmp	r3, #17
   34594:	beq	345a0 <__assert_fail@plt+0x21fac>
   34598:	mov	r0, #0
   3459c:	bx	lr
   345a0:	ldr	r3, [r1, #4]
   345a4:	cmp	r3, #0
   345a8:	beq	34598 <__assert_fail@plt+0x21fa4>
   345ac:	ldrb	r2, [r3, #24]
   345b0:	cmp	r2, #17
   345b4:	bne	34598 <__assert_fail@plt+0x21fa4>
   345b8:	ldr	r2, [r3, #4]
   345bc:	ldr	r3, [r3, #20]
   345c0:	cmp	r2, #0
   345c4:	str	r2, [r1, #4]
   345c8:	strne	r1, [r2]
   345cc:	cmp	r3, #31
   345d0:	ldr	r1, [r1, #20]
   345d4:	ldr	r2, [r0, #132]	; 0x84
   345d8:	ldr	r1, [r2, r1, lsl #2]
   345dc:	str	r1, [r2, r3, lsl #2]
   345e0:	bgt	34598 <__assert_fail@plt+0x21fa4>
   345e4:	ldr	r2, [r0, #80]	; 0x50
   345e8:	mov	r1, #1
   345ec:	bic	r3, r2, r1, lsl r3
   345f0:	str	r3, [r0, #80]	; 0x50
   345f4:	b	34598 <__assert_fail@plt+0x21fa4>
   345f8:	ldr	r2, [r0, #132]	; 0x84
   345fc:	cmp	r2, #0
   34600:	beq	34598 <__assert_fail@plt+0x21fa4>
   34604:	push	{lr}		; (str lr, [sp, #-4]!)
   34608:	mov	ip, #1
   3460c:	ldr	lr, [r1, #20]
   34610:	ldr	r3, [r0, #80]	; 0x50
   34614:	ldr	r2, [r2, lr, lsl #2]
   34618:	orr	r3, r3, ip, lsl r2
   3461c:	str	r2, [r1, #20]
   34620:	str	r3, [r0, #80]	; 0x50
   34624:	mov	r0, #0
   34628:	pop	{pc}		; (ldr pc, [sp], #4)
   3462c:	ldrb	r3, [r1, #24]
   34630:	ldr	r2, [r1, #4]
   34634:	cmp	r3, #11
   34638:	streq	r1, [r2, #16]
   3463c:	beq	3465c <__assert_fail@plt+0x22068>
   34640:	cmp	r3, #16
   34644:	bne	34664 <__assert_fail@plt+0x22070>
   34648:	ldr	r3, [r1, #8]
   3464c:	ldr	r0, [r3, #12]
   34650:	str	r0, [r2, #16]
   34654:	ldr	r2, [r1, #16]
   34658:	str	r2, [r3, #16]
   3465c:	mov	r0, #0
   34660:	bx	lr
   34664:	cmp	r2, #0
   34668:	mov	r0, #0
   3466c:	ldrne	r3, [r1, #16]
   34670:	strne	r3, [r2, #16]
   34674:	ldr	r3, [r1, #8]
   34678:	cmp	r3, #0
   3467c:	ldrne	r2, [r1, #16]
   34680:	strne	r2, [r3, #16]
   34684:	bx	lr
   34688:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3468c:	mov	r4, #0
   34690:	strd	r6, [sp, #8]
   34694:	strd	r8, [sp, #16]
   34698:	ldr	r9, [r0, #108]	; 0x6c
   3469c:	strd	sl, [sp, #24]
   346a0:	str	lr, [sp, #32]
   346a4:	sub	sp, sp, #28
   346a8:	ldr	r6, [sp, #64]	; 0x40
   346ac:	ldr	r7, [sp, #72]	; 0x48
   346b0:	mov	ip, r9
   346b4:	ldr	lr, [r0, #84]	; 0x54
   346b8:	str	lr, [sp, #8]
   346bc:	cmp	r4, ip
   346c0:	bge	3471c <__assert_fail@plt+0x22128>
   346c4:	add	lr, r4, ip
   346c8:	ldr	r5, [r0, #116]	; 0x74
   346cc:	add	lr, lr, lr, lsr #31
   346d0:	asr	lr, lr, #1
   346d4:	add	r8, lr, lr, lsl #1
   346d8:	add	r8, r5, r8, lsl #3
   346dc:	ldr	r8, [r8, #4]
   346e0:	cmp	r6, r8
   346e4:	ble	3470c <__assert_fail@plt+0x22118>
   346e8:	b	3486c <__assert_fail@plt+0x22278>
   346ec:	asr	ip, ip, #1
   346f0:	add	r8, ip, ip, lsl #1
   346f4:	mov	sl, ip
   346f8:	add	r8, r5, r8, lsl #3
   346fc:	ldr	r8, [r8, #4]
   34700:	cmp	r8, r6
   34704:	blt	34874 <__assert_fail@plt+0x22280>
   34708:	mov	lr, ip
   3470c:	add	ip, r4, lr
   34710:	cmp	r4, lr
   34714:	add	ip, ip, ip, lsr #31
   34718:	blt	346ec <__assert_fail@plt+0x220f8>
   3471c:	cmp	r9, r4
   34720:	ble	348b0 <__assert_fail@plt+0x222bc>
   34724:	ldr	ip, [r0, #116]	; 0x74
   34728:	add	lr, r4, r4, lsl #1
   3472c:	add	ip, ip, lr, lsl #3
   34730:	ldr	ip, [ip, #4]
   34734:	cmp	r6, ip
   34738:	mvnne	r4, #0
   3473c:	mov	ip, r9
   34740:	mov	r5, #0
   34744:	cmp	r5, ip
   34748:	bge	347a4 <__assert_fail@plt+0x221b0>
   3474c:	add	lr, r5, ip
   34750:	ldr	r8, [r0, #116]	; 0x74
   34754:	add	lr, lr, lr, lsr #31
   34758:	asr	lr, lr, #1
   3475c:	add	sl, lr, lr, lsl #1
   34760:	add	sl, r8, sl, lsl #3
   34764:	ldr	sl, [sl, #4]
   34768:	cmp	r7, sl
   3476c:	ble	34794 <__assert_fail@plt+0x221a0>
   34770:	b	34880 <__assert_fail@plt+0x2228c>
   34774:	asr	ip, ip, #1
   34778:	add	sl, ip, ip, lsl #1
   3477c:	mov	fp, ip
   34780:	add	sl, r8, sl, lsl #3
   34784:	ldr	sl, [sl, #4]
   34788:	cmp	sl, r7
   3478c:	blt	34888 <__assert_fail@plt+0x22294>
   34790:	mov	lr, ip
   34794:	add	ip, r5, lr
   34798:	cmp	r5, lr
   3479c:	add	ip, ip, ip, lsr #31
   347a0:	blt	34774 <__assert_fail@plt+0x22180>
   347a4:	cmp	r9, r5
   347a8:	ble	348b8 <__assert_fail@plt+0x222c4>
   347ac:	ldr	ip, [r0, #116]	; 0x74
   347b0:	add	lr, r5, r5, lsl #1
   347b4:	add	ip, ip, lr, lsl #3
   347b8:	ldr	ip, [ip, #4]
   347bc:	cmp	r7, ip
   347c0:	mvnne	r5, #0
   347c4:	ldr	ip, [r1]
   347c8:	cmp	ip, #0
   347cc:	ble	348a8 <__assert_fail@plt+0x222b4>
   347d0:	mov	r9, r2
   347d4:	mov	r8, r0
   347d8:	str	r3, [sp, #12]
   347dc:	mov	fp, #0
   347e0:	str	r4, [sp, #16]
   347e4:	str	r1, [sp, #20]
   347e8:	ldr	r1, [r9]
   347ec:	mov	r0, r8
   347f0:	ldrd	r2, [sp, #8]
   347f4:	ldr	ip, [r8, #116]	; 0x74
   347f8:	ldr	r1, [r1, fp, lsl #2]
   347fc:	ldr	r2, [r2]
   34800:	add	lr, r1, r1, lsl #1
   34804:	ldr	ip, [ip, lr, lsl #3]
   34808:	ldr	r4, [r2, ip, lsl #3]
   3480c:	str	r6, [sp]
   34810:	ldr	r2, [sp, #16]
   34814:	str	r2, [sp, #4]
   34818:	mov	r2, r4
   3481c:	bl	32b80 <__assert_fail@plt+0x2058c>
   34820:	ldr	r1, [r9]
   34824:	mov	sl, r0
   34828:	mov	r2, r4
   3482c:	mov	r0, r8
   34830:	ldr	r3, [sp, #68]	; 0x44
   34834:	ldr	r1, [r1, fp, lsl #2]
   34838:	str	r7, [sp]
   3483c:	str	r5, [sp, #4]
   34840:	bl	32b80 <__assert_fail@plt+0x2058c>
   34844:	cmp	sl, r0
   34848:	beq	34894 <__assert_fail@plt+0x222a0>
   3484c:	mov	r0, #1
   34850:	add	sp, sp, #28
   34854:	ldrd	r4, [sp]
   34858:	ldrd	r6, [sp, #8]
   3485c:	ldrd	r8, [sp, #16]
   34860:	ldrd	sl, [sp, #24]
   34864:	add	sp, sp, #32
   34868:	pop	{pc}		; (ldr pc, [sp], #4)
   3486c:	mov	sl, lr
   34870:	mov	lr, ip
   34874:	add	r4, sl, #1
   34878:	mov	ip, lr
   3487c:	b	346bc <__assert_fail@plt+0x220c8>
   34880:	mov	fp, lr
   34884:	mov	lr, ip
   34888:	add	r5, fp, #1
   3488c:	mov	ip, lr
   34890:	b	34744 <__assert_fail@plt+0x22150>
   34894:	ldr	r3, [sp, #20]
   34898:	add	fp, fp, #1
   3489c:	ldr	r3, [r3]
   348a0:	cmp	fp, r3
   348a4:	blt	347e8 <__assert_fail@plt+0x221f4>
   348a8:	mov	r0, #0
   348ac:	b	34850 <__assert_fail@plt+0x2225c>
   348b0:	mvn	r4, #0
   348b4:	b	3473c <__assert_fail@plt+0x22148>
   348b8:	mvn	r5, #0
   348bc:	b	347c4 <__assert_fail@plt+0x221d0>
   348c0:	strd	r4, [sp, #-16]!
   348c4:	mov	r4, r0
   348c8:	mov	r5, r2
   348cc:	str	r6, [sp, #8]
   348d0:	mov	r6, r1
   348d4:	str	lr, [sp, #12]
   348d8:	b	348e0 <__assert_fail@plt+0x222ec>
   348dc:	mov	r4, r3
   348e0:	mov	r1, r4
   348e4:	mov	r0, r5
   348e8:	blx	r6
   348ec:	cmp	r0, #0
   348f0:	bne	34920 <__assert_fail@plt+0x2232c>
   348f4:	ldr	r3, [r4, #4]
   348f8:	cmp	r3, #0
   348fc:	bne	348dc <__assert_fail@plt+0x222e8>
   34900:	ldr	r2, [r4, #8]
   34904:	cmp	r2, #0
   34908:	cmpne	r2, r3
   3490c:	mov	r3, r4
   34910:	bne	34930 <__assert_fail@plt+0x2233c>
   34914:	ldr	r2, [r4]
   34918:	subs	r4, r2, #0
   3491c:	bne	34900 <__assert_fail@plt+0x2230c>
   34920:	ldrd	r4, [sp]
   34924:	ldr	r6, [sp, #8]
   34928:	add	sp, sp, #12
   3492c:	pop	{pc}		; (ldr pc, [sp], #4)
   34930:	mov	r3, r2
   34934:	b	348dc <__assert_fail@plt+0x222e8>
   34938:	strd	r4, [sp, #-20]!	; 0xffffffec
   3493c:	mov	r5, r0
   34940:	ldr	r0, [r1]
   34944:	strd	r6, [sp, #8]
   34948:	str	lr, [sp, #16]
   3494c:	sub	sp, sp, #20
   34950:	cmp	r0, #31
   34954:	beq	349d4 <__assert_fail@plt+0x223e0>
   34958:	lsl	ip, r0, #5
   3495c:	add	r4, r0, #1
   34960:	ldr	r0, [r5]
   34964:	add	r7, ip, #4
   34968:	str	r4, [r1]
   3496c:	add	lr, r0, ip
   34970:	mov	r6, #0
   34974:	ldr	r1, [sp, #40]	; 0x28
   34978:	add	ip, ip, #16
   3497c:	cmp	r2, r6
   34980:	str	r6, [lr, #4]
   34984:	add	ip, r0, ip
   34988:	add	r0, r0, r7
   3498c:	strd	r2, [lr, #8]
   34990:	mvn	r7, #0
   34994:	ldrd	r4, [r1]
   34998:	strd	r4, [lr, #24]
   3499c:	ldrb	r1, [ip, #14]
   349a0:	bic	r1, r1, #12
   349a4:	strb	r1, [ip, #14]
   349a8:	str	r6, [lr, #16]
   349ac:	str	r6, [lr, #20]
   349b0:	str	r7, [lr, #32]
   349b4:	strne	r0, [r2]
   349b8:	cmp	r3, #0
   349bc:	strne	r0, [r3]
   349c0:	add	sp, sp, #20
   349c4:	ldrd	r4, [sp]
   349c8:	ldrd	r6, [sp, #8]
   349cc:	add	sp, sp, #16
   349d0:	pop	{pc}		; (ldr pc, [sp], #4)
   349d4:	mov	r0, #996	; 0x3e4
   349d8:	stmib	sp, {r1, r2, r3}
   349dc:	bl	31b54 <__assert_fail@plt+0x1f560>
   349e0:	cmp	r0, #0
   349e4:	beq	349c0 <__assert_fail@plt+0x223cc>
   349e8:	ldr	lr, [r5]
   349ec:	mov	r7, #4
   349f0:	mov	r4, #1
   349f4:	mov	ip, #0
   349f8:	str	r0, [r5]
   349fc:	ldmib	sp, {r1, r2, r3}
   34a00:	str	lr, [r0]
   34a04:	b	34968 <__assert_fail@plt+0x22374>
   34a08:	strd	r4, [sp, #-24]!	; 0xffffffe8
   34a0c:	mov	r4, r0
   34a10:	ldr	r5, [r0]
   34a14:	strd	r6, [sp, #8]
   34a18:	add	r7, r1, #56	; 0x38
   34a1c:	add	r6, r1, #64	; 0x40
   34a20:	str	r8, [sp, #16]
   34a24:	str	lr, [sp, #20]
   34a28:	sub	sp, sp, #16
   34a2c:	add	r8, sp, #12
   34a30:	b	34a3c <__assert_fail@plt+0x22448>
   34a34:	mov	r4, r3
   34a38:	add	r8, r5, #4
   34a3c:	add	ip, r4, #20
   34a40:	mov	r3, #0
   34a44:	mov	r2, r3
   34a48:	mov	r1, r6
   34a4c:	mov	r0, r7
   34a50:	str	ip, [sp]
   34a54:	bl	34938 <__assert_fail@plt+0x22344>
   34a58:	cmp	r0, #0
   34a5c:	str	r0, [r8]
   34a60:	beq	34aac <__assert_fail@plt+0x224b8>
   34a64:	str	r5, [r0]
   34a68:	ldr	r5, [r8]
   34a6c:	ldrb	r3, [r5, #26]
   34a70:	orr	r3, r3, #4
   34a74:	strb	r3, [r5, #26]
   34a78:	ldr	r3, [r4, #4]
   34a7c:	cmp	r3, #0
   34a80:	bne	34a34 <__assert_fail@plt+0x22440>
   34a84:	ldr	r2, [r4, #8]
   34a88:	cmp	r2, r3
   34a8c:	cmpne	r2, #0
   34a90:	mov	r3, r4
   34a94:	bne	34ac4 <__assert_fail@plt+0x224d0>
   34a98:	ldr	r2, [r4]
   34a9c:	ldr	r5, [r5]
   34aa0:	subs	r4, r2, #0
   34aa4:	bne	34a84 <__assert_fail@plt+0x22490>
   34aa8:	ldr	r0, [sp, #12]
   34aac:	add	sp, sp, #16
   34ab0:	ldrd	r4, [sp]
   34ab4:	ldrd	r6, [sp, #8]
   34ab8:	ldr	r8, [sp, #16]
   34abc:	add	sp, sp, #20
   34ac0:	pop	{pc}		; (ldr pc, [sp], #4)
   34ac4:	mov	r4, r2
   34ac8:	add	r8, r5, #8
   34acc:	b	34a3c <__assert_fail@plt+0x22448>
   34ad0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   34ad4:	ldr	r4, [r1]
   34ad8:	ldr	r5, [r2, #4]
   34adc:	strd	r6, [sp, #8]
   34ae0:	ldrb	r7, [r1, #28]
   34ae4:	strd	r8, [sp, #16]
   34ae8:	mov	r8, r2
   34aec:	strd	sl, [sp, #24]
   34af0:	str	lr, [sp, #32]
   34af4:	sub	sp, sp, #28
   34af8:	ands	r7, r7, #16
   34afc:	str	r0, [sp, #12]
   34b00:	beq	34ccc <__assert_fail@plt+0x226d8>
   34b04:	cmp	r5, #0
   34b08:	beq	34c5c <__assert_fail@plt+0x22668>
   34b0c:	ldr	r3, [r2, #20]
   34b10:	cmp	r3, #31
   34b14:	bgt	34c3c <__assert_fail@plt+0x22648>
   34b18:	ldr	r2, [r4, #80]	; 0x50
   34b1c:	lsr	r3, r2, r3
   34b20:	tst	r3, #1
   34b24:	beq	34c3c <__assert_fail@plt+0x22648>
   34b28:	add	r7, sp, #16
   34b2c:	mov	ip, #8
   34b30:	add	r9, r4, #56	; 0x38
   34b34:	mov	r3, #0
   34b38:	add	r4, r4, #64	; 0x40
   34b3c:	mov	sl, #0
   34b40:	str	r7, [sp]
   34b44:	mov	fp, #0
   34b48:	mov	r2, r3
   34b4c:	str	r7, [sp, #8]
   34b50:	mov	r1, r4
   34b54:	mov	r0, r9
   34b58:	strd	sl, [sp, #16]
   34b5c:	strb	ip, [sp, #20]
   34b60:	bl	34938 <__assert_fail@plt+0x22344>
   34b64:	mov	ip, #9
   34b68:	mov	r3, #0
   34b6c:	str	r7, [sp]
   34b70:	mov	r6, r0
   34b74:	mov	r1, r4
   34b78:	strd	sl, [sp, #16]
   34b7c:	mov	r0, r9
   34b80:	mov	r2, r3
   34b84:	strb	ip, [sp, #20]
   34b88:	bl	34938 <__assert_fail@plt+0x22344>
   34b8c:	mov	r7, r0
   34b90:	ldr	r3, [sp, #8]
   34b94:	mov	r0, #0
   34b98:	mov	r1, #0
   34b9c:	mov	ip, #16
   34ba0:	mov	r2, r5
   34ba4:	str	r3, [sp]
   34ba8:	mov	r3, r7
   34bac:	strd	r0, [sp, #16]
   34bb0:	mov	r1, r4
   34bb4:	mov	r0, r9
   34bb8:	strb	ip, [sp, #20]
   34bbc:	bl	34938 <__assert_fail@plt+0x22344>
   34bc0:	mov	fp, r0
   34bc4:	ldr	r0, [sp, #8]
   34bc8:	mov	r2, #0
   34bcc:	mov	r3, #0
   34bd0:	mov	ip, #16
   34bd4:	mov	r1, r4
   34bd8:	str	r0, [sp]
   34bdc:	mov	r0, r9
   34be0:	strd	r2, [sp, #16]
   34be4:	mov	r3, fp
   34be8:	mov	r2, r6
   34bec:	strb	ip, [sp, #20]
   34bf0:	bl	34938 <__assert_fail@plt+0x22344>
   34bf4:	cmp	fp, #0
   34bf8:	cmpne	r0, #0
   34bfc:	mov	r5, r0
   34c00:	beq	34d48 <__assert_fail@plt+0x22754>
   34c04:	cmp	r7, #0
   34c08:	cmpne	r6, #0
   34c0c:	beq	34d48 <__assert_fail@plt+0x22754>
   34c10:	ldr	r2, [r8, #20]
   34c14:	ldrb	r3, [r8, #26]
   34c18:	str	r2, [r7, #20]
   34c1c:	str	r2, [r6, #20]
   34c20:	ldrb	r2, [r7, #26]
   34c24:	ubfx	r3, r3, #3, #1
   34c28:	bfi	r2, r3, #3, #1
   34c2c:	strb	r2, [r7, #26]
   34c30:	ldrb	r2, [r6, #26]
   34c34:	bfi	r2, r3, #3, #1
   34c38:	strb	r2, [r6, #26]
   34c3c:	mov	r0, r5
   34c40:	add	sp, sp, #28
   34c44:	ldrd	r4, [sp]
   34c48:	ldrd	r6, [sp, #8]
   34c4c:	ldrd	r8, [sp, #16]
   34c50:	ldrd	sl, [sp, #24]
   34c54:	add	sp, sp, #32
   34c58:	pop	{pc}		; (ldr pc, [sp], #4)
   34c5c:	add	r7, sp, #16
   34c60:	mov	ip, #8
   34c64:	add	r9, r4, #56	; 0x38
   34c68:	mov	fp, #0
   34c6c:	add	r4, r4, #64	; 0x40
   34c70:	mov	sl, #0
   34c74:	str	r7, [sp]
   34c78:	mov	r1, r4
   34c7c:	mov	r3, r5
   34c80:	str	r7, [sp, #8]
   34c84:	mov	r2, r5
   34c88:	mov	r0, r9
   34c8c:	strd	sl, [sp, #16]
   34c90:	strb	ip, [sp, #20]
   34c94:	bl	34938 <__assert_fail@plt+0x22344>
   34c98:	mov	ip, #9
   34c9c:	mov	r6, r0
   34ca0:	str	r7, [sp]
   34ca4:	mov	r1, r4
   34ca8:	mov	r0, r9
   34cac:	strd	sl, [sp, #16]
   34cb0:	mov	r3, r5
   34cb4:	mov	r2, r5
   34cb8:	strb	ip, [sp, #20]
   34cbc:	bl	34938 <__assert_fail@plt+0x22344>
   34cc0:	mov	fp, r0
   34cc4:	mov	r7, r0
   34cc8:	b	34bc4 <__assert_fail@plt+0x225d0>
   34ccc:	add	r3, sp, #16
   34cd0:	mov	ip, #8
   34cd4:	add	r9, r4, #56	; 0x38
   34cd8:	mov	fp, #0
   34cdc:	add	r4, r4, #64	; 0x40
   34ce0:	mov	sl, #0
   34ce4:	str	r3, [sp]
   34ce8:	mov	r2, r7
   34cec:	mov	r1, r4
   34cf0:	str	r3, [sp, #8]
   34cf4:	mov	r0, r9
   34cf8:	mov	r3, r7
   34cfc:	strd	sl, [sp, #16]
   34d00:	strb	ip, [sp, #20]
   34d04:	bl	34938 <__assert_fail@plt+0x22344>
   34d08:	ldr	r3, [sp, #8]
   34d0c:	mov	ip, #9
   34d10:	mov	r2, r7
   34d14:	mov	r6, r0
   34d18:	mov	r1, r4
   34d1c:	mov	r0, r9
   34d20:	str	r3, [sp]
   34d24:	mov	r3, r7
   34d28:	strd	sl, [sp, #16]
   34d2c:	strb	ip, [sp, #20]
   34d30:	bl	34938 <__assert_fail@plt+0x22344>
   34d34:	cmp	r5, #0
   34d38:	mov	r7, r0
   34d3c:	moveq	fp, r0
   34d40:	bne	34b90 <__assert_fail@plt+0x2259c>
   34d44:	b	34bc4 <__assert_fail@plt+0x225d0>
   34d48:	ldr	r2, [sp, #12]
   34d4c:	mov	r3, #12
   34d50:	mov	r5, #0
   34d54:	str	r3, [r2]
   34d58:	b	34c3c <__assert_fail@plt+0x22648>
   34d5c:	ldr	r2, [r1, #4]
   34d60:	mov	r3, #0
   34d64:	strd	r4, [sp, #-12]!
   34d68:	mov	r4, r1
   34d6c:	mov	r5, r0
   34d70:	str	lr, [sp, #8]
   34d74:	sub	sp, sp, #12
   34d78:	str	r3, [sp, #4]
   34d7c:	cmp	r2, r3
   34d80:	beq	34d90 <__assert_fail@plt+0x2279c>
   34d84:	ldrb	r3, [r2, #24]
   34d88:	cmp	r3, #17
   34d8c:	beq	34dbc <__assert_fail@plt+0x227c8>
   34d90:	ldr	r2, [r4, #8]
   34d94:	cmp	r2, #0
   34d98:	beq	34da8 <__assert_fail@plt+0x227b4>
   34d9c:	ldrb	r3, [r2, #24]
   34da0:	cmp	r3, #17
   34da4:	beq	34dd8 <__assert_fail@plt+0x227e4>
   34da8:	ldr	r0, [sp, #4]
   34dac:	add	sp, sp, #12
   34db0:	ldrd	r4, [sp]
   34db4:	add	sp, sp, #8
   34db8:	pop	{pc}		; (ldr pc, [sp], #4)
   34dbc:	mov	r1, r0
   34dc0:	add	r0, sp, #4
   34dc4:	bl	34ad0 <__assert_fail@plt+0x224dc>
   34dc8:	cmp	r0, #0
   34dcc:	str	r0, [r4, #4]
   34dd0:	strne	r4, [r0]
   34dd4:	b	34d90 <__assert_fail@plt+0x2279c>
   34dd8:	mov	r1, r5
   34ddc:	add	r0, sp, #4
   34de0:	bl	34ad0 <__assert_fail@plt+0x224dc>
   34de4:	cmp	r0, #0
   34de8:	str	r0, [r4, #8]
   34dec:	strne	r4, [r0]
   34df0:	b	34da8 <__assert_fail@plt+0x227b4>
   34df4:	ldr	r3, [r1, #4]
   34df8:	cmp	r3, #0
   34dfc:	str	r3, [r0, #4]
   34e00:	ble	34e64 <__assert_fail@plt+0x22870>
   34e04:	strd	r4, [sp, #-16]!
   34e08:	mov	r4, r0
   34e0c:	lsl	r0, r3, #2
   34e10:	str	r6, [sp, #8]
   34e14:	mov	r5, r1
   34e18:	str	lr, [sp, #12]
   34e1c:	str	r3, [r4]
   34e20:	bl	31b54 <__assert_fail@plt+0x1f560>
   34e24:	cmp	r0, #0
   34e28:	str	r0, [r4, #8]
   34e2c:	moveq	r2, #12
   34e30:	streq	r0, [r4]
   34e34:	streq	r0, [r4, #4]
   34e38:	beq	34e50 <__assert_fail@plt+0x2285c>
   34e3c:	ldr	r2, [r5, #4]
   34e40:	ldr	r1, [r5, #8]
   34e44:	lsl	r2, r2, #2
   34e48:	bl	12024 <memcpy@plt>
   34e4c:	mov	r2, #0
   34e50:	ldrd	r4, [sp]
   34e54:	mov	r0, r2
   34e58:	ldr	r6, [sp, #8]
   34e5c:	add	sp, sp, #12
   34e60:	pop	{pc}		; (ldr pc, [sp], #4)
   34e64:	mov	r3, #0
   34e68:	str	r3, [r0]
   34e6c:	str	r3, [r0, #4]
   34e70:	str	r3, [r0, #8]
   34e74:	mov	r0, r3
   34e78:	bx	lr
   34e7c:	cmp	r1, #0
   34e80:	beq	34e9c <__assert_fail@plt+0x228a8>
   34e84:	ldr	r3, [r1, #4]
   34e88:	cmp	r2, #0
   34e8c:	cmpne	r3, #0
   34e90:	bgt	34ec8 <__assert_fail@plt+0x228d4>
   34e94:	cmp	r3, #0
   34e98:	bgt	34fa4 <__assert_fail@plt+0x229b0>
   34e9c:	cmp	r2, #0
   34ea0:	beq	34eb0 <__assert_fail@plt+0x228bc>
   34ea4:	ldr	r3, [r2, #4]
   34ea8:	cmp	r3, #0
   34eac:	bgt	34fa0 <__assert_fail@plt+0x229ac>
   34eb0:	mov	r3, #0
   34eb4:	str	r3, [r0]
   34eb8:	str	r3, [r0, #4]
   34ebc:	str	r3, [r0, #8]
   34ec0:	mov	r0, r3
   34ec4:	bx	lr
   34ec8:	ldr	ip, [r2, #4]
   34ecc:	cmp	ip, #0
   34ed0:	ble	34fa4 <__assert_fail@plt+0x229b0>
   34ed4:	add	r3, r3, ip
   34ed8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   34edc:	mov	r4, r2
   34ee0:	strd	r6, [sp, #8]
   34ee4:	mov	r6, r0
   34ee8:	lsl	r0, r3, #2
   34eec:	strd	r8, [sp, #16]
   34ef0:	mov	r5, r1
   34ef4:	str	sl, [sp, #24]
   34ef8:	str	lr, [sp, #28]
   34efc:	str	r3, [r6]
   34f00:	bl	31b54 <__assert_fail@plt+0x1f560>
   34f04:	cmp	r0, #0
   34f08:	str	r0, [r6, #8]
   34f0c:	beq	34fe0 <__assert_fail@plt+0x229ec>
   34f10:	mov	r7, #0
   34f14:	mov	lr, r0
   34f18:	ldr	r9, [r4, #4]
   34f1c:	mov	ip, r7
   34f20:	mov	r3, r7
   34f24:	ldr	r8, [r5, #4]
   34f28:	b	34f6c <__assert_fail@plt+0x22978>
   34f2c:	ldr	r2, [r5, #8]
   34f30:	cmp	r9, ip
   34f34:	add	r1, r2, r3, lsl #2
   34f38:	ble	34fc8 <__assert_fail@plt+0x229d4>
   34f3c:	ldr	r1, [r4, #8]
   34f40:	add	r7, r7, #1
   34f44:	ldr	r2, [r2, r3, lsl #2]
   34f48:	ldr	r1, [r1, ip, lsl #2]
   34f4c:	cmp	r2, r1
   34f50:	addgt	ip, ip, #1
   34f54:	strgt	r1, [lr]
   34f58:	bgt	34f68 <__assert_fail@plt+0x22974>
   34f5c:	add	r3, r3, #1
   34f60:	addeq	ip, ip, #1
   34f64:	str	r2, [lr]
   34f68:	add	lr, lr, #4
   34f6c:	cmp	r8, r3
   34f70:	bgt	34f2c <__assert_fail@plt+0x22938>
   34f74:	cmp	r9, ip
   34f78:	bgt	34fa8 <__assert_fail@plt+0x229b4>
   34f7c:	mov	r2, #0
   34f80:	str	r7, [r6, #4]
   34f84:	ldrd	r4, [sp]
   34f88:	mov	r0, r2
   34f8c:	ldrd	r6, [sp, #8]
   34f90:	ldrd	r8, [sp, #16]
   34f94:	ldr	sl, [sp, #24]
   34f98:	add	sp, sp, #28
   34f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   34fa0:	mov	r1, r2
   34fa4:	b	34df4 <__assert_fail@plt+0x22800>
   34fa8:	ldr	r1, [r4, #8]
   34fac:	sub	r2, r9, ip
   34fb0:	add	r0, r0, r7, lsl #2
   34fb4:	add	r7, r7, r2
   34fb8:	lsl	r2, r2, #2
   34fbc:	add	r1, r1, ip, lsl #2
   34fc0:	bl	12024 <memcpy@plt>
   34fc4:	b	34f7c <__assert_fail@plt+0x22988>
   34fc8:	sub	r3, r8, r3
   34fcc:	mov	r0, lr
   34fd0:	lsl	r2, r3, #2
   34fd4:	add	r7, r7, r3
   34fd8:	bl	12024 <memcpy@plt>
   34fdc:	b	34f7c <__assert_fail@plt+0x22988>
   34fe0:	mov	r2, #12
   34fe4:	b	34f84 <__assert_fail@plt+0x22990>
   34fe8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   34fec:	strd	r6, [sp, #8]
   34ff0:	str	lr, [sp, #32]
   34ff4:	ldr	lr, [r2, #4]
   34ff8:	strd	r8, [sp, #16]
   34ffc:	strd	sl, [sp, #24]
   35000:	sub	sp, sp, #28
   35004:	cmp	lr, #0
   35008:	moveq	r4, lr
   3500c:	streq	lr, [r0]
   35010:	beq	350b8 <__assert_fail@plt+0x22ac4>
   35014:	add	r7, r3, lr
   35018:	ble	35034 <__assert_fail@plt+0x22a40>
   3501c:	ldr	ip, [r2, #8]
   35020:	add	r4, ip, lr, lsl #2
   35024:	ldr	lr, [ip], #4
   35028:	cmp	r4, ip
   3502c:	add	r7, r7, lr
   35030:	bne	35024 <__assert_fail@plt+0x22a30>
   35034:	mov	sl, r3
   35038:	ldr	r3, [r1, #68]	; 0x44
   3503c:	mov	r8, r2
   35040:	mov	r9, r1
   35044:	str	r0, [sp, #20]
   35048:	ldr	r2, [r1, #32]
   3504c:	and	r3, r3, r7
   35050:	add	r3, r3, r3, lsl #1
   35054:	lsl	r3, r3, #2
   35058:	ldr	fp, [r2, r3]
   3505c:	add	r3, r2, r3
   35060:	cmp	fp, #0
   35064:	ble	350d8 <__assert_fail@plt+0x22ae4>
   35068:	ldr	r6, [r3, #8]
   3506c:	mov	r5, #0
   35070:	sub	r6, r6, #4
   35074:	b	35080 <__assert_fail@plt+0x22a8c>
   35078:	cmp	r5, fp
   3507c:	beq	350d8 <__assert_fail@plt+0x22ae4>
   35080:	ldr	r4, [r6, #4]!
   35084:	add	r5, r5, #1
   35088:	ldr	r3, [r4]
   3508c:	cmp	r3, r7
   35090:	bne	35078 <__assert_fail@plt+0x22a84>
   35094:	ldrb	r3, [r4, #52]	; 0x34
   35098:	and	r3, r3, #15
   3509c:	cmp	r3, sl
   350a0:	bne	35078 <__assert_fail@plt+0x22a84>
   350a4:	mov	r1, r8
   350a8:	ldr	r0, [r4, #40]	; 0x28
   350ac:	bl	326b4 <__assert_fail@plt+0x200c0>
   350b0:	cmp	r0, #0
   350b4:	beq	35078 <__assert_fail@plt+0x22a84>
   350b8:	mov	r0, r4
   350bc:	add	sp, sp, #28
   350c0:	ldrd	r4, [sp]
   350c4:	ldrd	r6, [sp, #8]
   350c8:	ldrd	r8, [sp, #16]
   350cc:	ldrd	sl, [sp, #24]
   350d0:	add	sp, sp, #32
   350d4:	pop	{pc}		; (ldr pc, [sp], #4)
   350d8:	mov	r1, #1
   350dc:	mov	r0, #56	; 0x38
   350e0:	bl	2f080 <__assert_fail@plt+0x1ca8c>
   350e4:	subs	r4, r0, #0
   350e8:	beq	35260 <__assert_fail@plt+0x22c6c>
   350ec:	add	fp, r4, #4
   350f0:	mov	r1, r8
   350f4:	mov	r0, fp
   350f8:	bl	34df4 <__assert_fail@plt+0x22800>
   350fc:	subs	r3, r0, #0
   35100:	bne	352c4 <__assert_fail@plt+0x22cd0>
   35104:	ldrb	r2, [r4, #52]	; 0x34
   35108:	str	fp, [r4, #40]	; 0x28
   3510c:	ldr	lr, [r8, #4]
   35110:	bfi	r2, sl, #0, #4
   35114:	cmp	lr, #0
   35118:	strb	r2, [r4, #52]	; 0x34
   3511c:	ble	35240 <__assert_fail@plt+0x22c4c>
   35120:	add	r2, r4, #12
   35124:	mov	r6, r3
   35128:	str	r2, [sp, #4]
   3512c:	add	r2, r4, #8
   35130:	str	r2, [sp, #8]
   35134:	and	r2, sl, #4
   35138:	str	r7, [sp, #16]
   3513c:	mov	r7, r3
   35140:	str	r2, [sp, #12]
   35144:	ldr	r1, [r8, #8]
   35148:	ldr	r2, [r9]
   3514c:	ldr	r1, [r1, r6, lsl #2]
   35150:	add	r2, r2, r1, lsl #3
   35154:	ldr	r5, [r2, #4]
   35158:	ldrb	r1, [r2, #4]
   3515c:	ubfx	r5, r5, #8, #10
   35160:	cmp	r1, #1
   35164:	cmpeq	r5, #0
   35168:	beq	35230 <__assert_fail@plt+0x22c3c>
   3516c:	ldrb	ip, [r2, #6]
   35170:	cmp	r1, #2
   35174:	ldrb	r2, [r4, #52]	; 0x34
   35178:	ubfx	ip, ip, #4, #1
   3517c:	ubfx	r0, r2, #5, #1
   35180:	orr	r0, r0, ip
   35184:	bfi	r2, r0, #5, #1
   35188:	strb	r2, [r4, #52]	; 0x34
   3518c:	uxtbeq	r2, r2
   35190:	orreq	r2, r2, #16
   35194:	strbeq	r2, [r4, #52]	; 0x34
   35198:	beq	351b0 <__assert_fail@plt+0x22bbc>
   3519c:	cmp	r1, #4
   351a0:	bne	351b0 <__assert_fail@plt+0x22bbc>
   351a4:	ldrb	r2, [r4, #52]	; 0x34
   351a8:	orr	r2, r2, #64	; 0x40
   351ac:	strb	r2, [r4, #52]	; 0x34
   351b0:	cmp	r5, #0
   351b4:	beq	35230 <__assert_fail@plt+0x22c3c>
   351b8:	ldr	r2, [r4, #40]	; 0x28
   351bc:	cmp	fp, r2
   351c0:	beq	35290 <__assert_fail@plt+0x22c9c>
   351c4:	tst	r5, #1
   351c8:	beq	3527c <__assert_fail@plt+0x22c88>
   351cc:	tst	sl, #1
   351d0:	beq	35200 <__assert_fail@plt+0x22c0c>
   351d4:	tst	r5, #2
   351d8:	bne	35200 <__assert_fail@plt+0x22c0c>
   351dc:	tst	r5, #16
   351e0:	beq	351ec <__assert_fail@plt+0x22bf8>
   351e4:	tst	sl, #2
   351e8:	beq	35200 <__assert_fail@plt+0x22c0c>
   351ec:	tst	r5, #64	; 0x40
   351f0:	beq	35274 <__assert_fail@plt+0x22c80>
   351f4:	ldr	r3, [sp, #12]
   351f8:	cmp	r3, #0
   351fc:	bne	35274 <__assert_fail@plt+0x22c80>
   35200:	subs	r2, r6, r7
   35204:	bmi	35228 <__assert_fail@plt+0x22c34>
   35208:	ldr	r1, [r4, #8]
   3520c:	cmp	r2, r1
   35210:	bge	35228 <__assert_fail@plt+0x22c34>
   35214:	sub	ip, r1, #1
   35218:	ldr	r1, [sp, #4]
   3521c:	str	ip, [r4, #8]
   35220:	ldr	r0, [sp, #8]
   35224:	bl	34554 <__assert_fail@plt+0x21f60>
   35228:	ldr	lr, [r8, #4]
   3522c:	add	r7, r7, #1
   35230:	add	r6, r6, #1
   35234:	cmp	r6, lr
   35238:	blt	35144 <__assert_fail@plt+0x22b50>
   3523c:	ldr	r7, [sp, #16]
   35240:	mov	r2, r7
   35244:	mov	r0, r9
   35248:	mov	r1, r4
   3524c:	bl	32d40 <__assert_fail@plt+0x2074c>
   35250:	cmp	r0, #0
   35254:	beq	350b8 <__assert_fail@plt+0x22ac4>
   35258:	mov	r0, r4
   3525c:	bl	33a88 <__assert_fail@plt+0x21494>
   35260:	ldr	r2, [sp, #20]
   35264:	mov	r3, #12
   35268:	mov	r4, #0
   3526c:	str	r3, [r2]
   35270:	b	350b8 <__assert_fail@plt+0x22ac4>
   35274:	ldr	lr, [r8, #4]
   35278:	b	35230 <__assert_fail@plt+0x22c3c>
   3527c:	tst	r5, #2
   35280:	beq	351dc <__assert_fail@plt+0x22be8>
   35284:	tst	sl, #1
   35288:	beq	351dc <__assert_fail@plt+0x22be8>
   3528c:	b	35200 <__assert_fail@plt+0x22c0c>
   35290:	mov	r0, #12
   35294:	bl	31b54 <__assert_fail@plt+0x1f560>
   35298:	subs	r3, r0, #0
   3529c:	beq	35258 <__assert_fail@plt+0x22c64>
   352a0:	mov	r1, r8
   352a4:	str	r3, [r4, #40]	; 0x28
   352a8:	bl	34df4 <__assert_fail@plt+0x22800>
   352ac:	subs	r7, r0, #0
   352b0:	bne	35258 <__assert_fail@plt+0x22c64>
   352b4:	ldrb	r2, [r4, #52]	; 0x34
   352b8:	orr	r2, r2, #128	; 0x80
   352bc:	strb	r2, [r4, #52]	; 0x34
   352c0:	b	351c4 <__assert_fail@plt+0x22bd0>
   352c4:	mov	r0, r4
   352c8:	bl	2f668 <__assert_fail@plt+0x1d074>
   352cc:	b	35260 <__assert_fail@plt+0x22c6c>
   352d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   352d4:	strd	r6, [sp, #8]
   352d8:	ldr	r6, [r2, #4]
   352dc:	strd	r8, [sp, #16]
   352e0:	strd	sl, [sp, #24]
   352e4:	str	lr, [sp, #32]
   352e8:	sub	sp, sp, #4
   352ec:	cmp	r6, #0
   352f0:	moveq	r4, r6
   352f4:	streq	r6, [r0]
   352f8:	beq	35480 <__assert_fail@plt+0x22e8c>
   352fc:	ble	35318 <__assert_fail@plt+0x22d24>
   35300:	ldr	r3, [r2, #8]
   35304:	add	lr, r3, r6, lsl #2
   35308:	ldr	ip, [r3], #4
   3530c:	cmp	lr, r3
   35310:	add	r6, r6, ip
   35314:	bne	35308 <__assert_fail@plt+0x22d14>
   35318:	ldr	r3, [r1, #68]	; 0x44
   3531c:	mov	sl, r2
   35320:	mov	r8, r1
   35324:	mov	r9, r0
   35328:	ldr	r2, [r1, #32]
   3532c:	and	r3, r3, r6
   35330:	add	r3, r3, r3, lsl #1
   35334:	lsl	r3, r3, #2
   35338:	ldr	fp, [r2, r3]
   3533c:	add	r3, r2, r3
   35340:	cmp	fp, #0
   35344:	ble	35384 <__assert_fail@plt+0x22d90>
   35348:	ldr	r7, [r3, #8]
   3534c:	mov	r5, #0
   35350:	sub	r7, r7, #4
   35354:	ldr	r4, [r7, #4]!
   35358:	mov	r1, sl
   3535c:	add	r5, r5, #1
   35360:	ldr	r3, [r4]
   35364:	add	r0, r4, #4
   35368:	cmp	r3, r6
   3536c:	bne	3537c <__assert_fail@plt+0x22d88>
   35370:	bl	326b4 <__assert_fail@plt+0x200c0>
   35374:	cmp	r0, #0
   35378:	bne	35480 <__assert_fail@plt+0x22e8c>
   3537c:	cmp	fp, r5
   35380:	bne	35354 <__assert_fail@plt+0x22d60>
   35384:	mov	r1, #1
   35388:	mov	r0, #56	; 0x38
   3538c:	bl	2f080 <__assert_fail@plt+0x1ca8c>
   35390:	subs	r4, r0, #0
   35394:	beq	354d0 <__assert_fail@plt+0x22edc>
   35398:	add	r7, r4, #4
   3539c:	mov	r1, sl
   353a0:	mov	r0, r7
   353a4:	bl	34df4 <__assert_fail@plt+0x22800>
   353a8:	cmp	r0, #0
   353ac:	bne	354c8 <__assert_fail@plt+0x22ed4>
   353b0:	ldr	r5, [sl, #4]
   353b4:	str	r7, [r4, #40]	; 0x28
   353b8:	cmp	r5, #0
   353bc:	ble	35468 <__assert_fail@plt+0x22e74>
   353c0:	ldr	r1, [sl, #8]
   353c4:	mov	sl, #65280	; 0xff00
   353c8:	movt	sl, #3
   353cc:	ldr	r7, [r8]
   353d0:	add	r5, r1, r5, lsl #2
   353d4:	b	35418 <__assert_fail@plt+0x22e24>
   353d8:	ldrb	r2, [r4, #52]	; 0x34
   353dc:	cmp	r0, #2
   353e0:	ldrb	lr, [r3, #6]
   353e4:	ubfx	ip, r2, #5, #1
   353e8:	ubfx	lr, lr, #4, #1
   353ec:	orr	ip, ip, lr
   353f0:	bfi	r2, ip, #5, #1
   353f4:	strb	r2, [r4, #52]	; 0x34
   353f8:	beq	354a0 <__assert_fail@plt+0x22eac>
   353fc:	cmp	r0, #4
   35400:	bne	354b0 <__assert_fail@plt+0x22ebc>
   35404:	ldrb	r3, [r4, #52]	; 0x34
   35408:	orr	r3, r3, #64	; 0x40
   3540c:	strb	r3, [r4, #52]	; 0x34
   35410:	cmp	r5, r1
   35414:	beq	35468 <__assert_fail@plt+0x22e74>
   35418:	ldr	r3, [r1], #4
   3541c:	add	r3, r7, r3, lsl #3
   35420:	ldrb	r0, [r3, #4]
   35424:	cmp	r0, #1
   35428:	bne	353d8 <__assert_fail@plt+0x22de4>
   3542c:	ldr	r2, [r3, #4]
   35430:	tst	sl, r2
   35434:	beq	35410 <__assert_fail@plt+0x22e1c>
   35438:	ldrb	r2, [r3, #6]
   3543c:	ldrb	r3, [r4, #52]	; 0x34
   35440:	ubfx	r0, r2, #4, #1
   35444:	ubfx	r2, r3, #5, #1
   35448:	orr	r2, r2, r0
   3544c:	bfi	r3, r2, #5, #1
   35450:	strb	r3, [r4, #52]	; 0x34
   35454:	ldrb	r3, [r4, #52]	; 0x34
   35458:	cmp	r5, r1
   3545c:	orr	r3, r3, #128	; 0x80
   35460:	strb	r3, [r4, #52]	; 0x34
   35464:	bne	35418 <__assert_fail@plt+0x22e24>
   35468:	mov	r2, r6
   3546c:	mov	r0, r8
   35470:	mov	r1, r4
   35474:	bl	32d40 <__assert_fail@plt+0x2074c>
   35478:	cmp	r0, #0
   3547c:	bne	354e0 <__assert_fail@plt+0x22eec>
   35480:	mov	r0, r4
   35484:	add	sp, sp, #4
   35488:	ldrd	r4, [sp]
   3548c:	ldrd	r6, [sp, #8]
   35490:	ldrd	r8, [sp, #16]
   35494:	ldrd	sl, [sp, #24]
   35498:	add	sp, sp, #32
   3549c:	pop	{pc}		; (ldr pc, [sp], #4)
   354a0:	uxtb	r3, r2
   354a4:	orr	r3, r3, #16
   354a8:	strb	r3, [r4, #52]	; 0x34
   354ac:	b	35410 <__assert_fail@plt+0x22e1c>
   354b0:	cmp	r0, #12
   354b4:	beq	35454 <__assert_fail@plt+0x22e60>
   354b8:	ldr	r3, [r3, #4]
   354bc:	tst	sl, r3
   354c0:	beq	35410 <__assert_fail@plt+0x22e1c>
   354c4:	b	35454 <__assert_fail@plt+0x22e60>
   354c8:	mov	r0, r4
   354cc:	bl	2f668 <__assert_fail@plt+0x1d074>
   354d0:	mov	r3, #12
   354d4:	mov	r4, #0
   354d8:	str	r3, [r9]
   354dc:	b	35480 <__assert_fail@plt+0x22e8c>
   354e0:	mov	r0, r4
   354e4:	bl	33a88 <__assert_fail@plt+0x21494>
   354e8:	b	354d0 <__assert_fail@plt+0x22edc>
   354ec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   354f0:	strd	r6, [sp, #8]
   354f4:	subs	r7, r3, #0
   354f8:	subgt	r4, r1, #4
   354fc:	subgt	r6, r2, #4
   35500:	str	r8, [sp, #16]
   35504:	movgt	r5, #0
   35508:	movgt	r8, r0
   3550c:	str	lr, [sp, #20]
   35510:	sub	sp, sp, #16
   35514:	bgt	35544 <__assert_fail@plt+0x22f50>
   35518:	b	355a8 <__assert_fail@plt+0x22fb4>
   3551c:	bl	352d0 <__assert_fail@plt+0x22cdc>
   35520:	str	r0, [r4]
   35524:	ldr	r0, [sp, #12]
   35528:	bl	2f668 <__assert_fail@plt+0x1d074>
   3552c:	ldr	r3, [sp]
   35530:	cmp	r3, #0
   35534:	bne	3558c <__assert_fail@plt+0x22f98>
   35538:	add	r5, r5, #1
   3553c:	cmp	r7, r5
   35540:	beq	355a8 <__assert_fail@plt+0x22fb4>
   35544:	ldr	r1, [r4, #4]!
   35548:	ldr	ip, [r6, #4]!
   3554c:	cmp	r1, #0
   35550:	streq	ip, [r4]
   35554:	beq	35538 <__assert_fail@plt+0x22f44>
   35558:	cmp	ip, #0
   3555c:	add	r2, ip, #4
   35560:	add	r1, r1, #4
   35564:	add	r0, sp, #4
   35568:	beq	35538 <__assert_fail@plt+0x22f44>
   3556c:	bl	34e7c <__assert_fail@plt+0x22888>
   35570:	mov	r3, r0
   35574:	add	r2, sp, #4
   35578:	cmp	r3, #0
   3557c:	mov	r1, r8
   35580:	mov	r0, sp
   35584:	str	r3, [sp]
   35588:	beq	3551c <__assert_fail@plt+0x22f28>
   3558c:	mov	r0, r3
   35590:	add	sp, sp, #16
   35594:	ldrd	r4, [sp]
   35598:	ldrd	r6, [sp, #8]
   3559c:	ldr	r8, [sp, #16]
   355a0:	add	sp, sp, #20
   355a4:	pop	{pc}		; (ldr pc, [sp], #4)
   355a8:	mov	r3, #0
   355ac:	b	3558c <__assert_fail@plt+0x22f98>
   355b0:	ldr	ip, [r1, #4]
   355b4:	cmp	ip, #0
   355b8:	beq	35750 <__assert_fail@plt+0x2315c>
   355bc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   355c0:	strd	r6, [sp, #8]
   355c4:	str	lr, [sp, #28]
   355c8:	ldr	lr, [r2, #4]
   355cc:	strd	r8, [sp, #16]
   355d0:	str	sl, [sp, #24]
   355d4:	cmp	lr, #0
   355d8:	beq	356d8 <__assert_fail@plt+0x230e4>
   355dc:	ldr	r4, [r0]
   355e0:	mov	r9, r2
   355e4:	add	r2, ip, lr
   355e8:	mov	r8, r1
   355ec:	mov	r7, r0
   355f0:	ldmib	r0, {r3, sl}
   355f4:	add	r1, r2, r3
   355f8:	cmp	r1, r4
   355fc:	bgt	35760 <__assert_fail@plt+0x2316c>
   35600:	ldr	r0, [r8, #8]
   35604:	add	r1, r3, ip
   35608:	sub	r5, ip, #1
   3560c:	sub	r6, lr, #1
   35610:	add	r1, r1, lr
   35614:	ldr	r2, [r9, #8]
   35618:	sub	r3, r3, #1
   3561c:	ldr	ip, [r0, r5, lsl #2]
   35620:	ldr	lr, [r2, r6, lsl #2]
   35624:	cmp	ip, lr
   35628:	beq	35644 <__assert_fail@plt+0x23050>
   3562c:	bge	356f8 <__assert_fail@plt+0x23104>
   35630:	subs	r6, r6, #1
   35634:	bmi	35694 <__assert_fail@plt+0x230a0>
   35638:	ldr	lr, [r2, r6, lsl #2]
   3563c:	cmp	ip, lr
   35640:	bne	3562c <__assert_fail@plt+0x23038>
   35644:	cmp	r3, #0
   35648:	blt	35674 <__assert_fail@plt+0x23080>
   3564c:	ldr	r4, [sl, r3, lsl #2]
   35650:	add	lr, sl, r3, lsl #2
   35654:	cmp	r4, ip
   35658:	bgt	3566c <__assert_fail@plt+0x23078>
   3565c:	b	35708 <__assert_fail@plt+0x23114>
   35660:	ldr	r4, [lr, #-4]!
   35664:	cmp	r4, ip
   35668:	ble	35708 <__assert_fail@plt+0x23114>
   3566c:	subs	r3, r3, #1
   35670:	bcs	35660 <__assert_fail@plt+0x2306c>
   35674:	sub	r1, r1, #1
   35678:	str	ip, [sl, r1, lsl #2]
   3567c:	subs	r5, r5, #1
   35680:	bmi	35694 <__assert_fail@plt+0x230a0>
   35684:	subs	r6, r6, #1
   35688:	bmi	35694 <__assert_fail@plt+0x230a0>
   3568c:	ldr	ip, [r0, r5, lsl #2]
   35690:	b	35638 <__assert_fail@plt+0x23044>
   35694:	ldr	ip, [r7, #4]
   35698:	ldr	r0, [r8, #4]
   3569c:	ldr	r2, [r9, #4]
   356a0:	sub	r3, ip, #1
   356a4:	add	r0, ip, r0
   356a8:	add	r0, r0, r2
   356ac:	sub	r2, r0, r1
   356b0:	sub	r0, r0, #1
   356b4:	add	ip, ip, r2
   356b8:	cmp	r3, #0
   356bc:	cmpge	r2, #0
   356c0:	str	ip, [r7, #4]
   356c4:	bgt	35724 <__assert_fail@plt+0x23130>
   356c8:	lsl	r2, r2, #2
   356cc:	add	r1, sl, r1, lsl #2
   356d0:	mov	r0, sl
   356d4:	bl	12024 <memcpy@plt>
   356d8:	mov	ip, #0
   356dc:	ldrd	r4, [sp]
   356e0:	mov	r0, ip
   356e4:	ldrd	r6, [sp, #8]
   356e8:	ldrd	r8, [sp, #16]
   356ec:	ldr	sl, [sp, #24]
   356f0:	add	sp, sp, #28
   356f4:	pop	{pc}		; (ldr pc, [sp], #4)
   356f8:	subs	r5, r5, #1
   356fc:	bmi	35694 <__assert_fail@plt+0x230a0>
   35700:	ldr	ip, [r0, r5, lsl #2]
   35704:	b	35624 <__assert_fail@plt+0x23030>
   35708:	cmp	r4, ip
   3570c:	bne	35674 <__assert_fail@plt+0x23080>
   35710:	b	3567c <__assert_fail@plt+0x23088>
   35714:	sub	r3, r3, #1
   35718:	str	ip, [sl, r4, lsl #2]
   3571c:	cmn	r3, #1
   35720:	beq	35758 <__assert_fail@plt+0x23164>
   35724:	ldr	lr, [sl, r0, lsl #2]
   35728:	add	r4, r3, r2
   3572c:	ldr	ip, [sl, r3, lsl #2]
   35730:	cmp	lr, ip
   35734:	ble	35714 <__assert_fail@plt+0x23120>
   35738:	subs	r2, r2, #1
   3573c:	sub	r0, r0, #1
   35740:	str	lr, [sl, r4, lsl #2]
   35744:	bne	35724 <__assert_fail@plt+0x23130>
   35748:	ldr	sl, [r7, #8]
   3574c:	b	356cc <__assert_fail@plt+0x230d8>
   35750:	mov	r0, ip
   35754:	bx	lr
   35758:	ldr	sl, [r7, #8]
   3575c:	b	356c8 <__assert_fail@plt+0x230d4>
   35760:	add	r4, r2, r4
   35764:	mov	r0, sl
   35768:	lsl	r1, r4, #2
   3576c:	bl	32624 <__assert_fail@plt+0x20030>
   35770:	subs	sl, r0, #0
   35774:	beq	35790 <__assert_fail@plt+0x2319c>
   35778:	ldr	ip, [r8, #4]
   3577c:	ldr	lr, [r9, #4]
   35780:	str	r4, [r7]
   35784:	str	sl, [r7, #8]
   35788:	ldr	r3, [r7, #4]
   3578c:	b	35600 <__assert_fail@plt+0x2300c>
   35790:	mov	ip, #12
   35794:	b	356dc <__assert_fail@plt+0x230e8>
   35798:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3579c:	mov	r5, #0
   357a0:	strd	r6, [sp, #8]
   357a4:	ldr	r7, [r0, #28]
   357a8:	strd	r8, [sp, #16]
   357ac:	strd	sl, [sp, #24]
   357b0:	mov	sl, r1
   357b4:	add	r1, r1, r1, lsl #1
   357b8:	str	lr, [sp, #32]
   357bc:	sub	sp, sp, #44	; 0x2c
   357c0:	add	r7, r7, r1, lsl #2
   357c4:	str	r2, [sp, #12]
   357c8:	str	r5, [sp, #28]
   357cc:	str	r5, [sp, #32]
   357d0:	str	r5, [sp, #36]	; 0x24
   357d4:	ldr	r6, [r7, #4]
   357d8:	str	r3, [sp, #20]
   357dc:	cmp	r6, r5
   357e0:	ble	359c8 <__assert_fail@plt+0x233d4>
   357e4:	add	r3, r7, #8
   357e8:	mov	r9, r0
   357ec:	str	r3, [sp, #8]
   357f0:	add	r3, r2, #8
   357f4:	str	r3, [sp, #16]
   357f8:	b	3584c <__assert_fail@plt+0x23258>
   357fc:	cmp	r0, #0
   35800:	bne	358d4 <__assert_fail@plt+0x232e0>
   35804:	mov	r2, r3
   35808:	ldr	r3, [sp, #12]
   3580c:	ldr	r1, [sp, #16]
   35810:	ldr	r0, [r3, #4]
   35814:	bl	343b4 <__assert_fail@plt+0x21dc0>
   35818:	cmp	r0, #0
   3581c:	beq	358d4 <__assert_fail@plt+0x232e0>
   35820:	ldr	r2, [r9, #28]
   35824:	add	r0, sp, #28
   35828:	ldr	r1, [sp, #20]
   3582c:	add	r2, r2, r4
   35830:	bl	355b0 <__assert_fail@plt+0x22fbc>
   35834:	cmp	r0, #0
   35838:	bne	359b8 <__assert_fail@plt+0x233c4>
   3583c:	ldr	r6, [r7, #4]
   35840:	add	r5, r5, #1
   35844:	cmp	r6, r5
   35848:	ble	35904 <__assert_fail@plt+0x23310>
   3584c:	ldr	r3, [r7, #8]
   35850:	ldr	r4, [r3, r5, lsl #2]
   35854:	cmp	sl, r4
   35858:	beq	35840 <__assert_fail@plt+0x2324c>
   3585c:	ldr	r3, [r9]
   35860:	add	r3, r3, r4, lsl #3
   35864:	ldrb	r3, [r3, #4]
   35868:	tst	r3, #8
   3586c:	beq	35840 <__assert_fail@plt+0x2324c>
   35870:	ldr	r8, [r9, #20]
   35874:	add	r4, r4, r4, lsl #1
   35878:	mov	r0, r6
   3587c:	lsl	r4, r4, #2
   35880:	ldr	r1, [sp, #8]
   35884:	add	r8, r8, r4
   35888:	ldr	fp, [r8, #8]
   3588c:	ldr	r3, [fp]
   35890:	mov	r2, r3
   35894:	str	r3, [sp, #4]
   35898:	bl	343b4 <__assert_fail@plt+0x21dc0>
   3589c:	ldr	r2, [r8, #4]
   358a0:	ldr	r3, [sp, #4]
   358a4:	cmp	r2, #1
   358a8:	bgt	357fc <__assert_fail@plt+0x23208>
   358ac:	cmp	r0, #0
   358b0:	moveq	r2, r3
   358b4:	bne	35840 <__assert_fail@plt+0x2324c>
   358b8:	ldr	r3, [sp, #12]
   358bc:	ldr	r1, [sp, #16]
   358c0:	ldr	r0, [r3, #4]
   358c4:	bl	343b4 <__assert_fail@plt+0x21dc0>
   358c8:	cmp	r0, #0
   358cc:	beq	35840 <__assert_fail@plt+0x2324c>
   358d0:	b	35820 <__assert_fail@plt+0x2322c>
   358d4:	ldr	r8, [fp, #4]
   358d8:	cmp	r8, #0
   358dc:	ble	35840 <__assert_fail@plt+0x2324c>
   358e0:	mov	r2, r8
   358e4:	mov	r0, r6
   358e8:	ldr	r1, [sp, #8]
   358ec:	bl	343b4 <__assert_fail@plt+0x21dc0>
   358f0:	cmp	r0, #0
   358f4:	beq	358b8 <__assert_fail@plt+0x232c4>
   358f8:	add	r5, r5, #1
   358fc:	cmp	r6, r5
   35900:	bgt	3584c <__assert_fail@plt+0x23258>
   35904:	cmp	r6, #0
   35908:	ble	3598c <__assert_fail@plt+0x23398>
   3590c:	ldr	sl, [sp, #12]
   35910:	mov	r4, #0
   35914:	add	r8, sl, #8
   35918:	add	r9, sl, #4
   3591c:	ldr	r3, [r7, #8]
   35920:	add	r1, sp, #36	; 0x24
   35924:	ldr	r0, [sp, #32]
   35928:	ldr	r5, [r3, r4, lsl #2]
   3592c:	add	r4, r4, #1
   35930:	mov	r2, r5
   35934:	bl	343b4 <__assert_fail@plt+0x21dc0>
   35938:	cmp	r0, #0
   3593c:	mov	r1, r8
   35940:	bne	35984 <__assert_fail@plt+0x23390>
   35944:	ldr	r5, [sl, #4]
   35948:	mov	r0, r5
   3594c:	bl	343b4 <__assert_fail@plt+0x21dc0>
   35950:	sub	r3, r0, #1
   35954:	sub	ip, r5, #1
   35958:	cmp	r3, r5
   3595c:	mov	r2, r3
   35960:	movlt	r5, #0
   35964:	movge	r5, #1
   35968:	orrs	r3, r5, r3, lsr #31
   3596c:	mov	r1, r8
   35970:	mov	r0, r9
   35974:	bne	35984 <__assert_fail@plt+0x23390>
   35978:	str	ip, [sl, #4]
   3597c:	bl	34554 <__assert_fail@plt+0x21f60>
   35980:	ldr	r6, [r7, #4]
   35984:	cmp	r6, r4
   35988:	bgt	3591c <__assert_fail@plt+0x23328>
   3598c:	ldr	r0, [sp, #36]	; 0x24
   35990:	mov	r4, #0
   35994:	bl	2f668 <__assert_fail@plt+0x1d074>
   35998:	mov	r0, r4
   3599c:	add	sp, sp, #44	; 0x2c
   359a0:	ldrd	r4, [sp]
   359a4:	ldrd	r6, [sp, #8]
   359a8:	ldrd	r8, [sp, #16]
   359ac:	ldrd	sl, [sp, #24]
   359b0:	add	sp, sp, #32
   359b4:	pop	{pc}		; (ldr pc, [sp], #4)
   359b8:	mov	r4, r0
   359bc:	ldr	r0, [sp, #36]	; 0x24
   359c0:	bl	2f668 <__assert_fail@plt+0x1d074>
   359c4:	b	35998 <__assert_fail@plt+0x233a4>
   359c8:	mov	r0, r5
   359cc:	b	35990 <__assert_fail@plt+0x2339c>
   359d0:	ldrb	r2, [r1, #24]
   359d4:	cmp	r2, #16
   359d8:	bne	359f8 <__assert_fail@plt+0x23404>
   359dc:	ldr	r3, [r1, #4]
   359e0:	mov	r0, #0
   359e4:	ldr	r2, [r3, #12]
   359e8:	ldr	r3, [r3, #28]
   359ec:	str	r2, [r1, #12]
   359f0:	str	r3, [r1, #28]
   359f4:	bx	lr
   359f8:	strd	r4, [sp, #-16]!
   359fc:	mov	r4, r1
   35a00:	add	r3, r1, #20
   35a04:	ldm	r3, {r1, r2}
   35a08:	mov	r5, r0
   35a0c:	str	r6, [sp, #8]
   35a10:	str	lr, [sp, #12]
   35a14:	str	r4, [r4, #12]
   35a18:	bl	3381c <__assert_fail@plt+0x21228>
   35a1c:	cmn	r0, #1
   35a20:	mov	r3, r0
   35a24:	str	r0, [r4, #28]
   35a28:	beq	35a68 <__assert_fail@plt+0x23474>
   35a2c:	ldrb	r2, [r4, #24]
   35a30:	cmp	r2, #12
   35a34:	movne	r0, #0
   35a38:	bne	35a58 <__assert_fail@plt+0x23464>
   35a3c:	ldr	r2, [r5]
   35a40:	mov	r0, #0
   35a44:	ldr	r1, [r4, #20]
   35a48:	add	r3, r2, r3, lsl #3
   35a4c:	ldr	r2, [r3, #4]
   35a50:	bfi	r2, r1, #8, #10
   35a54:	str	r2, [r3, #4]
   35a58:	ldrd	r4, [sp]
   35a5c:	ldr	r6, [sp, #8]
   35a60:	add	sp, sp, #12
   35a64:	pop	{pc}		; (ldr pc, [sp], #4)
   35a68:	mov	r0, #12
   35a6c:	b	35a58 <__assert_fail@plt+0x23464>
   35a70:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35a74:	strd	r6, [sp, #8]
   35a78:	mov	r6, r0
   35a7c:	ldr	r0, [r0]
   35a80:	str	r8, [sp, #16]
   35a84:	str	lr, [sp, #20]
   35a88:	cmp	r0, #0
   35a8c:	beq	35ac0 <__assert_fail@plt+0x234cc>
   35a90:	ldr	r3, [r6, #8]
   35a94:	cmp	r3, #0
   35a98:	beq	35ac0 <__assert_fail@plt+0x234cc>
   35a9c:	mov	r4, #0
   35aa0:	b	35aa8 <__assert_fail@plt+0x234b4>
   35aa4:	ldr	r0, [r6]
   35aa8:	add	r0, r0, r4, lsl #3
   35aac:	add	r4, r4, #1
   35ab0:	bl	337c8 <__assert_fail@plt+0x211d4>
   35ab4:	ldr	r3, [r6, #8]
   35ab8:	cmp	r3, r4
   35abc:	bhi	35aa4 <__assert_fail@plt+0x234b0>
   35ac0:	ldr	r0, [r6, #12]
   35ac4:	bl	2f668 <__assert_fail@plt+0x1d074>
   35ac8:	ldr	r3, [r6, #8]
   35acc:	cmp	r3, #0
   35ad0:	movne	r4, #0
   35ad4:	movne	r5, r4
   35ad8:	beq	35b38 <__assert_fail@plt+0x23544>
   35adc:	ldr	r3, [r6, #24]
   35ae0:	add	r5, r5, #1
   35ae4:	cmp	r3, #0
   35ae8:	add	r2, r3, r4
   35aec:	beq	35af8 <__assert_fail@plt+0x23504>
   35af0:	ldr	r0, [r2, #8]
   35af4:	bl	2f668 <__assert_fail@plt+0x1d074>
   35af8:	ldr	r3, [r6, #28]
   35afc:	cmp	r3, #0
   35b00:	add	r2, r3, r4
   35b04:	beq	35b10 <__assert_fail@plt+0x2351c>
   35b08:	ldr	r0, [r2, #8]
   35b0c:	bl	2f668 <__assert_fail@plt+0x1d074>
   35b10:	ldr	r3, [r6, #20]
   35b14:	cmp	r3, #0
   35b18:	add	r2, r3, r4
   35b1c:	beq	35b28 <__assert_fail@plt+0x23534>
   35b20:	ldr	r0, [r2, #8]
   35b24:	bl	2f668 <__assert_fail@plt+0x1d074>
   35b28:	ldr	r3, [r6, #8]
   35b2c:	add	r4, r4, #12
   35b30:	cmp	r3, r5
   35b34:	bhi	35adc <__assert_fail@plt+0x234e8>
   35b38:	ldr	r0, [r6, #20]
   35b3c:	bl	2f668 <__assert_fail@plt+0x1d074>
   35b40:	ldr	r0, [r6, #24]
   35b44:	bl	2f668 <__assert_fail@plt+0x1d074>
   35b48:	ldr	r0, [r6, #28]
   35b4c:	bl	2f668 <__assert_fail@plt+0x1d074>
   35b50:	ldr	r0, [r6]
   35b54:	bl	2f668 <__assert_fail@plt+0x1d074>
   35b58:	ldr	r0, [r6, #32]
   35b5c:	cmp	r0, #0
   35b60:	movne	r7, #0
   35b64:	beq	35bc0 <__assert_fail@plt+0x235cc>
   35b68:	add	r5, r7, r7, lsl #1
   35b6c:	ldr	r3, [r0, r5, lsl #2]
   35b70:	add	r5, r0, r5, lsl #2
   35b74:	cmp	r3, #0
   35b78:	movgt	r4, #0
   35b7c:	ble	35b9c <__assert_fail@plt+0x235a8>
   35b80:	ldr	r3, [r5, #8]
   35b84:	ldr	r0, [r3, r4, lsl #2]
   35b88:	add	r4, r4, #1
   35b8c:	bl	33a88 <__assert_fail@plt+0x21494>
   35b90:	ldr	r3, [r5]
   35b94:	cmp	r4, r3
   35b98:	blt	35b80 <__assert_fail@plt+0x2358c>
   35b9c:	ldr	r0, [r5, #8]
   35ba0:	add	r7, r7, #1
   35ba4:	bl	2f668 <__assert_fail@plt+0x1d074>
   35ba8:	ldr	r3, [r6, #68]	; 0x44
   35bac:	cmp	r3, r7
   35bb0:	bcc	35bbc <__assert_fail@plt+0x235c8>
   35bb4:	ldr	r0, [r6, #32]
   35bb8:	b	35b68 <__assert_fail@plt+0x23574>
   35bbc:	ldr	r0, [r6, #32]
   35bc0:	bl	2f668 <__assert_fail@plt+0x1d074>
   35bc4:	ldr	r0, [r6, #60]	; 0x3c
   35bc8:	movw	r3, #33836	; 0x842c
   35bcc:	movt	r3, #4
   35bd0:	cmp	r0, r3
   35bd4:	beq	35bdc <__assert_fail@plt+0x235e8>
   35bd8:	bl	2f668 <__assert_fail@plt+0x1d074>
   35bdc:	ldr	r0, [r6, #132]	; 0x84
   35be0:	bl	2f668 <__assert_fail@plt+0x1d074>
   35be4:	mov	r0, r6
   35be8:	ldrd	r4, [sp]
   35bec:	ldrd	r6, [sp, #8]
   35bf0:	ldr	r8, [sp, #16]
   35bf4:	ldr	lr, [sp, #20]
   35bf8:	add	sp, sp, #24
   35bfc:	b	2f668 <__assert_fail@plt+0x1d074>
   35c00:	ldr	r3, [r0]
   35c04:	strd	r4, [sp, #-16]!
   35c08:	mov	r5, r0
   35c0c:	str	r6, [sp, #8]
   35c10:	str	lr, [sp, #12]
   35c14:	cmp	r3, #0
   35c18:	ble	35c58 <__assert_fail@plt+0x23664>
   35c1c:	mov	r4, #0
   35c20:	mov	r6, r4
   35c24:	ldr	r3, [r5, #8]
   35c28:	add	r6, r6, #1
   35c2c:	add	r3, r3, r4
   35c30:	ldr	r0, [r3, #20]
   35c34:	bl	2f668 <__assert_fail@plt+0x1d074>
   35c38:	ldr	r3, [r5, #8]
   35c3c:	add	r3, r3, r4
   35c40:	add	r4, r4, #24
   35c44:	ldr	r0, [r3, #8]
   35c48:	bl	2f668 <__assert_fail@plt+0x1d074>
   35c4c:	ldr	r3, [r5]
   35c50:	cmp	r6, r3
   35c54:	blt	35c24 <__assert_fail@plt+0x23630>
   35c58:	ldr	r0, [r5, #8]
   35c5c:	ldrd	r4, [sp]
   35c60:	ldr	r6, [sp, #8]
   35c64:	ldr	lr, [sp, #12]
   35c68:	add	sp, sp, #16
   35c6c:	b	2f668 <__assert_fail@plt+0x1d074>
   35c70:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35c74:	strd	r6, [sp, #8]
   35c78:	subs	r6, r1, #0
   35c7c:	str	r8, [sp, #16]
   35c80:	str	lr, [sp, #20]
   35c84:	beq	35d78 <__assert_fail@plt+0x23784>
   35c88:	ldr	r2, [r6, #4]
   35c8c:	cmp	r2, #0
   35c90:	mov	ip, r2
   35c94:	beq	35d78 <__assert_fail@plt+0x23784>
   35c98:	ldm	r0, {r1, r3}
   35c9c:	mov	r5, r0
   35ca0:	add	r4, r3, r2, lsl #1
   35ca4:	cmp	r1, r4
   35ca8:	blt	35db4 <__assert_fail@plt+0x237c0>
   35cac:	cmp	r3, #0
   35cb0:	beq	35df4 <__assert_fail@plt+0x23800>
   35cb4:	sub	r2, r2, #1
   35cb8:	sub	r3, r3, #1
   35cbc:	mvn	r7, r2
   35cc0:	mvn	lr, r3
   35cc4:	tst	r7, lr
   35cc8:	bpl	35d08 <__assert_fail@plt+0x23714>
   35ccc:	ldr	r1, [r5, #8]
   35cd0:	ldr	r0, [r6, #8]
   35cd4:	ldr	ip, [r1, r3, lsl #2]
   35cd8:	ldr	r0, [r0, r2, lsl #2]
   35cdc:	cmp	ip, r0
   35ce0:	beq	35cb4 <__assert_fail@plt+0x236c0>
   35ce4:	subge	r3, r3, #1
   35ce8:	mvnge	lr, r3
   35cec:	bge	35cc4 <__assert_fail@plt+0x236d0>
   35cf0:	sub	r2, r2, #1
   35cf4:	sub	r4, r4, #1
   35cf8:	mvn	r7, r2
   35cfc:	tst	r7, lr
   35d00:	str	r0, [r1, r4, lsl #2]
   35d04:	bmi	35ccc <__assert_fail@plt+0x236d8>
   35d08:	cmp	r2, #0
   35d0c:	blt	35d2c <__assert_fail@plt+0x23738>
   35d10:	ldr	r0, [r5, #8]
   35d14:	add	r2, r2, #1
   35d18:	sub	r4, r4, r2
   35d1c:	lsl	r2, r2, #2
   35d20:	ldr	r1, [r6, #8]
   35d24:	add	r0, r0, r4, lsl #2
   35d28:	bl	12024 <memcpy@plt>
   35d2c:	ldr	r3, [r5, #4]
   35d30:	ldr	r0, [r6, #4]
   35d34:	add	r0, r3, r0, lsl #1
   35d38:	subs	r2, r0, r4
   35d3c:	sub	r0, r0, #1
   35d40:	beq	35d78 <__assert_fail@plt+0x23784>
   35d44:	ldr	r1, [r5, #8]
   35d48:	add	ip, r3, r2
   35d4c:	sub	r3, r3, #1
   35d50:	str	ip, [r5, #4]
   35d54:	ldr	lr, [r1, r0, lsl #2]
   35d58:	add	r5, r3, r2
   35d5c:	ldr	ip, [r1, r3, lsl #2]
   35d60:	cmp	lr, ip
   35d64:	ble	35d90 <__assert_fail@plt+0x2379c>
   35d68:	subs	r2, r2, #1
   35d6c:	sub	r0, r0, #1
   35d70:	str	lr, [r1, r5, lsl #2]
   35d74:	bne	35d54 <__assert_fail@plt+0x23760>
   35d78:	mov	r0, #0
   35d7c:	ldrd	r4, [sp]
   35d80:	ldrd	r6, [sp, #8]
   35d84:	ldr	r8, [sp, #16]
   35d88:	add	sp, sp, #20
   35d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   35d90:	subs	r3, r3, #1
   35d94:	str	ip, [r1, r5, lsl #2]
   35d98:	bpl	35d54 <__assert_fail@plt+0x23760>
   35d9c:	mov	r0, r1
   35da0:	lsl	r2, r2, #2
   35da4:	add	r1, r1, r4, lsl #2
   35da8:	bl	12024 <memcpy@plt>
   35dac:	mov	r0, #0
   35db0:	b	35d7c <__assert_fail@plt+0x23788>
   35db4:	add	r2, r2, r1
   35db8:	ldr	r0, [r0, #8]
   35dbc:	lsl	r1, r2, #3
   35dc0:	lsl	r4, r2, #1
   35dc4:	bl	32624 <__assert_fail@plt+0x20030>
   35dc8:	cmp	r0, #0
   35dcc:	beq	35e10 <__assert_fail@plt+0x2381c>
   35dd0:	ldr	r3, [r5, #4]
   35dd4:	str	r4, [r5]
   35dd8:	str	r0, [r5, #8]
   35ddc:	cmp	r3, #0
   35de0:	ldreq	ip, [r6, #4]
   35de4:	beq	35df8 <__assert_fail@plt+0x23804>
   35de8:	ldr	r2, [r6, #4]
   35dec:	add	r4, r3, r2, lsl #1
   35df0:	b	35cb4 <__assert_fail@plt+0x236c0>
   35df4:	ldr	r0, [r0, #8]
   35df8:	ldr	r1, [r6, #8]
   35dfc:	str	ip, [r5, #4]
   35e00:	ldr	r2, [r6, #4]
   35e04:	lsl	r2, r2, #2
   35e08:	bl	12024 <memcpy@plt>
   35e0c:	b	35d78 <__assert_fail@plt+0x23784>
   35e10:	mov	r0, #12
   35e14:	b	35d7c <__assert_fail@plt+0x23788>
   35e18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   35e1c:	mov	r4, r2
   35e20:	mov	r5, r1
   35e24:	ldr	r2, [r1, #20]
   35e28:	mov	r1, #0
   35e2c:	strd	r6, [sp, #8]
   35e30:	add	r7, r4, r4, lsl #1
   35e34:	strd	r8, [sp, #16]
   35e38:	mov	r8, r0
   35e3c:	lsl	r7, r7, #2
   35e40:	strd	sl, [sp, #24]
   35e44:	mov	sl, r3
   35e48:	str	lr, [sp, #32]
   35e4c:	sub	sp, sp, #36	; 0x24
   35e50:	add	r2, r2, r7
   35e54:	ldr	r3, [r2, #4]
   35e58:	str	r1, [sp, #12]
   35e5c:	add	r3, r3, #1
   35e60:	lsl	r0, r3, #2
   35e64:	str	r3, [sp, #8]
   35e68:	bl	31b54 <__assert_fail@plt+0x1f560>
   35e6c:	cmp	r0, #0
   35e70:	str	r0, [sp, #16]
   35e74:	beq	36064 <__assert_fail@plt+0x23a70>
   35e78:	ldr	lr, [r5]
   35e7c:	lsl	r6, r4, #3
   35e80:	mov	r3, #65280	; 0xff00
   35e84:	movt	r3, #3
   35e88:	mvn	r9, #0
   35e8c:	ldr	r2, [sp, #12]
   35e90:	ldr	r1, [r5, #24]
   35e94:	add	ip, lr, r6
   35e98:	str	r4, [r0, r2, lsl #2]
   35e9c:	add	r2, r2, #1
   35ea0:	ldr	fp, [ip, #4]
   35ea4:	add	r0, r1, r7
   35ea8:	str	r2, [sp, #12]
   35eac:	str	r9, [r0, #4]
   35eb0:	and	r3, r3, fp
   35eb4:	cmp	r3, #0
   35eb8:	beq	35ee8 <__assert_fail@plt+0x238f4>
   35ebc:	ldr	r3, [r5, #20]
   35ec0:	add	r3, r3, r7
   35ec4:	ldr	r2, [r3, #4]
   35ec8:	cmp	r2, #0
   35ecc:	beq	35fb4 <__assert_fail@plt+0x239c0>
   35ed0:	ldr	r3, [r3, #8]
   35ed4:	ldr	r3, [r3]
   35ed8:	add	lr, lr, r3, lsl #3
   35edc:	ldrb	r3, [lr, #6]
   35ee0:	tst	r3, #4
   35ee4:	beq	36030 <__assert_fail@plt+0x23a3c>
   35ee8:	ldrb	r3, [ip, #4]
   35eec:	tst	r3, #8
   35ef0:	beq	35fb0 <__assert_fail@plt+0x239bc>
   35ef4:	ldr	ip, [r5, #20]
   35ef8:	add	r3, ip, r7
   35efc:	ldr	r2, [r3, #4]
   35f00:	cmp	r2, #0
   35f04:	movgt	r9, #0
   35f08:	movgt	r6, r9
   35f0c:	bgt	35f64 <__assert_fail@plt+0x23970>
   35f10:	b	35fb0 <__assert_fail@plt+0x239bc>
   35f14:	ldrd	r2, [r0]
   35f18:	strd	r2, [sp, #20]
   35f1c:	ldr	r3, [r0, #8]
   35f20:	str	r3, [fp, #8]
   35f24:	mov	r1, fp
   35f28:	add	r0, sp, #8
   35f2c:	bl	35c70 <__assert_fail@plt+0x2367c>
   35f30:	cmp	r0, #0
   35f34:	bne	35fdc <__assert_fail@plt+0x239e8>
   35f38:	ldr	r1, [r5, #24]
   35f3c:	add	r4, r1, r4
   35f40:	ldr	r3, [r4, #4]
   35f44:	cmp	r3, #0
   35f48:	beq	35ff8 <__assert_fail@plt+0x23a04>
   35f4c:	ldr	ip, [r5, #20]
   35f50:	add	r3, ip, r7
   35f54:	add	r6, r6, #1
   35f58:	ldr	r2, [r3, #4]
   35f5c:	cmp	r2, r6
   35f60:	ble	36010 <__assert_fail@plt+0x23a1c>
   35f64:	ldr	r3, [r3, #8]
   35f68:	add	fp, sp, #20
   35f6c:	ldr	r2, [r3, r6, lsl #2]
   35f70:	add	r4, r2, r2, lsl #1
   35f74:	lsl	r4, r4, #2
   35f78:	add	r0, r1, r4
   35f7c:	ldr	r3, [r0, #4]
   35f80:	cmn	r3, #1
   35f84:	moveq	r9, #1
   35f88:	beq	35f50 <__assert_fail@plt+0x2395c>
   35f8c:	cmp	r3, #0
   35f90:	bne	35f14 <__assert_fail@plt+0x23920>
   35f94:	add	fp, sp, #20
   35f98:	mov	r1, r5
   35f9c:	mov	r0, fp
   35fa0:	bl	35e18 <__assert_fail@plt+0x23824>
   35fa4:	cmp	r0, #0
   35fa8:	beq	35f24 <__assert_fail@plt+0x23930>
   35fac:	b	35fdc <__assert_fail@plt+0x239e8>
   35fb0:	add	r0, r1, r7
   35fb4:	ldrd	r2, [sp, #8]
   35fb8:	add	ip, sp, #8
   35fbc:	strd	r2, [r1, r7]
   35fc0:	ldr	r3, [sp, #16]
   35fc4:	str	r3, [r0, #8]
   35fc8:	ldr	r1, [ip, #8]
   35fcc:	mov	r0, #0
   35fd0:	ldrd	r2, [sp, #8]
   35fd4:	strd	r2, [r8]
   35fd8:	str	r1, [r8, #8]
   35fdc:	add	sp, sp, #36	; 0x24
   35fe0:	ldrd	r4, [sp]
   35fe4:	ldrd	r6, [sp, #8]
   35fe8:	ldrd	r8, [sp, #16]
   35fec:	ldrd	sl, [sp, #24]
   35ff0:	add	sp, sp, #32
   35ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   35ff8:	ldr	r0, [sp, #28]
   35ffc:	mov	r9, #1
   36000:	bl	2f668 <__assert_fail@plt+0x1d074>
   36004:	ldr	ip, [r5, #20]
   36008:	ldr	r1, [r5, #24]
   3600c:	b	35f50 <__assert_fail@plt+0x2395c>
   36010:	eor	sl, sl, #1
   36014:	add	r0, r1, r7
   36018:	tst	r9, sl
   3601c:	beq	35fb4 <__assert_fail@plt+0x239c0>
   36020:	mov	r3, #0
   36024:	add	ip, sp, #8
   36028:	str	r3, [r0, #4]
   3602c:	b	35fc8 <__assert_fail@plt+0x239d4>
   36030:	ubfx	fp, fp, #8, #10
   36034:	mov	r3, r4
   36038:	mov	r2, r4
   3603c:	mov	r1, r4
   36040:	mov	r0, r5
   36044:	str	fp, [sp]
   36048:	bl	33f24 <__assert_fail@plt+0x21930>
   3604c:	cmp	r0, #0
   36050:	bne	35fdc <__assert_fail@plt+0x239e8>
   36054:	ldr	ip, [r5]
   36058:	ldr	r1, [r5, #24]
   3605c:	add	ip, ip, r6
   36060:	b	35ee8 <__assert_fail@plt+0x238f4>
   36064:	mov	r0, #12
   36068:	b	35fdc <__assert_fail@plt+0x239e8>
   3606c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   36070:	mov	r5, r2
   36074:	mov	r4, r3
   36078:	strd	r6, [sp, #8]
   3607c:	mov	r6, #0
   36080:	mov	r7, r0
   36084:	strd	r8, [sp, #16]
   36088:	mov	r8, r1
   3608c:	ldr	r1, [r1, #4]
   36090:	strd	sl, [sp, #24]
   36094:	str	lr, [sp, #32]
   36098:	sub	sp, sp, #28
   3609c:	lsl	r0, r1, #2
   360a0:	str	r1, [sp, #12]
   360a4:	str	r6, [sp, #16]
   360a8:	bl	31b54 <__assert_fail@plt+0x1f560>
   360ac:	cmp	r0, r6
   360b0:	str	r0, [sp, #20]
   360b4:	beq	361b4 <__assert_fail@plt+0x23bc0>
   360b8:	ldr	r3, [r8, #4]
   360bc:	add	r9, sp, #12
   360c0:	cmp	r3, r6
   360c4:	ble	3615c <__assert_fail@plt+0x23b68>
   360c8:	ldr	r3, [r8, #8]
   360cc:	ldr	r1, [r7, #24]
   360d0:	ldr	r2, [r3, r6, lsl #2]
   360d4:	add	r3, r2, r2, lsl #1
   360d8:	add	r1, r1, r3, lsl #2
   360dc:	ldr	fp, [r1, #4]
   360e0:	cmp	fp, #0
   360e4:	ble	3617c <__assert_fail@plt+0x23b88>
   360e8:	ldr	ip, [r1, #8]
   360ec:	mov	r3, #0
   360f0:	ldr	sl, [r7]
   360f4:	sub	ip, ip, #4
   360f8:	b	36104 <__assert_fail@plt+0x23b10>
   360fc:	cmp	fp, r3
   36100:	beq	3617c <__assert_fail@plt+0x23b88>
   36104:	ldr	r0, [ip, #4]!
   36108:	add	r3, r3, #1
   3610c:	add	lr, sl, r0, lsl #3
   36110:	ldrb	lr, [lr, #4]
   36114:	cmp	r4, lr
   36118:	bne	360fc <__assert_fail@plt+0x23b08>
   3611c:	ldr	lr, [sl, r0, lsl #3]
   36120:	cmp	r5, lr
   36124:	bne	360fc <__assert_fail@plt+0x23b08>
   36128:	cmn	r0, #1
   3612c:	beq	3617c <__assert_fail@plt+0x23b88>
   36130:	mov	r3, r5
   36134:	mov	r1, r9
   36138:	str	r4, [sp]
   3613c:	mov	r0, r7
   36140:	bl	3443c <__assert_fail@plt+0x21e48>
   36144:	subs	sl, r0, #0
   36148:	bne	3618c <__assert_fail@plt+0x23b98>
   3614c:	ldr	r3, [r8, #4]
   36150:	add	r6, r6, #1
   36154:	cmp	r3, r6
   36158:	bgt	360c8 <__assert_fail@plt+0x23ad4>
   3615c:	ldr	r0, [r8, #8]
   36160:	mov	sl, #0
   36164:	bl	2f668 <__assert_fail@plt+0x1d074>
   36168:	ldr	r1, [r9, #8]
   3616c:	ldrd	r2, [sp, #12]
   36170:	strd	r2, [r8]
   36174:	str	r1, [r8, #8]
   36178:	b	36194 <__assert_fail@plt+0x23ba0>
   3617c:	mov	r0, r9
   36180:	bl	35c70 <__assert_fail@plt+0x2367c>
   36184:	subs	sl, r0, #0
   36188:	beq	3614c <__assert_fail@plt+0x23b58>
   3618c:	ldr	r0, [sp, #20]
   36190:	bl	2f668 <__assert_fail@plt+0x1d074>
   36194:	mov	r0, sl
   36198:	add	sp, sp, #28
   3619c:	ldrd	r4, [sp]
   361a0:	ldrd	r6, [sp, #8]
   361a4:	ldrd	r8, [sp, #16]
   361a8:	ldrd	sl, [sp, #24]
   361ac:	add	sp, sp, #32
   361b0:	pop	{pc}		; (ldr pc, [sp], #4)
   361b4:	mov	sl, #12
   361b8:	b	36194 <__assert_fail@plt+0x23ba0>
   361bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   361c0:	mov	r5, #0
   361c4:	strd	r6, [sp, #8]
   361c8:	ldr	r7, [r0, #108]	; 0x6c
   361cc:	strd	r8, [sp, #16]
   361d0:	strd	sl, [sp, #24]
   361d4:	str	lr, [sp, #32]
   361d8:	sub	sp, sp, #36	; 0x24
   361dc:	mov	r4, r7
   361e0:	cmp	r5, r4
   361e4:	bge	36240 <__assert_fail@plt+0x23c4c>
   361e8:	add	lr, r5, r4
   361ec:	ldr	r6, [r0, #116]	; 0x74
   361f0:	add	lr, lr, lr, lsr #31
   361f4:	asr	lr, lr, #1
   361f8:	add	ip, lr, lr, lsl #1
   361fc:	add	ip, r6, ip, lsl #3
   36200:	ldr	ip, [ip, #4]
   36204:	cmp	r2, ip
   36208:	ble	36230 <__assert_fail@plt+0x23c3c>
   3620c:	b	3646c <__assert_fail@plt+0x23e78>
   36210:	asr	ip, ip, #1
   36214:	add	r4, ip, ip, lsl #1
   36218:	mov	r8, ip
   3621c:	add	r4, r6, r4, lsl #3
   36220:	ldr	r4, [r4, #4]
   36224:	cmp	r2, r4
   36228:	bgt	36474 <__assert_fail@plt+0x23e80>
   3622c:	mov	lr, ip
   36230:	add	ip, lr, r5
   36234:	cmp	lr, r5
   36238:	add	ip, ip, ip, lsr #31
   3623c:	bgt	36210 <__assert_fail@plt+0x23c1c>
   36240:	cmp	r7, r5
   36244:	ble	36480 <__assert_fail@plt+0x23e8c>
   36248:	ldr	r4, [r0, #116]	; 0x74
   3624c:	add	ip, r5, r5, lsl #1
   36250:	cmn	r5, #1
   36254:	movne	r5, #0
   36258:	moveq	r5, #1
   3625c:	lsl	ip, ip, #3
   36260:	add	lr, r4, ip
   36264:	ldr	lr, [lr, #4]
   36268:	cmp	lr, r2
   3626c:	orrne	r5, r5, #1
   36270:	cmp	r5, #0
   36274:	bne	36480 <__assert_fail@plt+0x23e8c>
   36278:	ldr	sl, [r0, #84]	; 0x54
   3627c:	mov	r6, r2
   36280:	mov	r7, r0
   36284:	add	r9, r1, #8
   36288:	str	r1, [sp]
   3628c:	str	r3, [sp, #12]
   36290:	add	r3, ip, #24
   36294:	str	r3, [sp, #8]
   36298:	ldr	r3, [sp, #8]
   3629c:	add	r4, r4, r3
   362a0:	b	36354 <__assert_fail@plt+0x23d60>
   362a4:	ldr	r3, [r7, #100]	; 0x64
   362a8:	ldr	r2, [sl, #12]
   362ac:	ldr	fp, [r3, r5, lsl #2]
   362b0:	ldr	r8, [r2, r8, lsl #2]
   362b4:	cmp	fp, #0
   362b8:	beq	3643c <__assert_fail@plt+0x23e48>
   362bc:	mov	r2, r8
   362c0:	add	r1, fp, #12
   362c4:	ldr	r0, [fp, #8]
   362c8:	bl	343b4 <__assert_fail@plt+0x21dc0>
   362cc:	cmp	r0, #0
   362d0:	bne	36344 <__assert_fail@plt+0x23d50>
   362d4:	add	r2, sp, #20
   362d8:	add	r1, fp, #4
   362dc:	mov	r0, r2
   362e0:	str	r2, [sp, #4]
   362e4:	bl	34df4 <__assert_fail@plt+0x22800>
   362e8:	ldr	r2, [sp, #4]
   362ec:	mov	r1, r8
   362f0:	str	r0, [sp, #16]
   362f4:	mov	r0, r2
   362f8:	bl	33de0 <__assert_fail@plt+0x217ec>
   362fc:	eor	r0, r0, #1
   36300:	ldr	r2, [sp, #4]
   36304:	ldr	r3, [sp, #16]
   36308:	cmp	r3, #0
   3630c:	orrne	r0, r0, #1
   36310:	tst	r0, #255	; 0xff
   36314:	bne	364b0 <__assert_fail@plt+0x23ebc>
   36318:	ldr	r8, [r7, #100]	; 0x64
   3631c:	mov	r1, sl
   36320:	add	r0, sp, #16
   36324:	bl	352d0 <__assert_fail@plt+0x22cdc>
   36328:	str	r0, [r8, r5, lsl #2]
   3632c:	ldr	r0, [sp, #28]
   36330:	bl	2f668 <__assert_fail@plt+0x1d074>
   36334:	ldr	r3, [r7, #100]	; 0x64
   36338:	ldr	r3, [r3, r5, lsl #2]
   3633c:	cmp	r3, #0
   36340:	beq	364a0 <__assert_fail@plt+0x23eac>
   36344:	add	r4, r4, #24
   36348:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   3634c:	cmp	r3, #0
   36350:	beq	36480 <__assert_fail@plt+0x23e8c>
   36354:	ldr	r3, [sp]
   36358:	mov	r1, r9
   3635c:	ldr	r8, [r4, #-24]	; 0xffffffe8
   36360:	ldr	fp, [r3, #4]
   36364:	mov	r2, r8
   36368:	mov	r0, fp
   3636c:	bl	343b4 <__assert_fail@plt+0x21dc0>
   36370:	cmp	r0, #0
   36374:	beq	36344 <__assert_fail@plt+0x23d50>
   36378:	ldr	r2, [r4, #-16]
   3637c:	ldr	r5, [r4, #-12]
   36380:	add	r5, r6, r5
   36384:	sub	r5, r5, r2
   36388:	cmp	r6, r5
   3638c:	bne	362a4 <__assert_fail@plt+0x23cb0>
   36390:	ldr	r2, [sl, #20]
   36394:	add	r8, r8, r8, lsl #1
   36398:	mov	r0, fp
   3639c:	mov	r1, r9
   363a0:	add	r8, r2, r8, lsl #2
   363a4:	ldr	r3, [r8, #8]
   363a8:	ldr	r5, [r3]
   363ac:	mov	r2, r5
   363b0:	bl	343b4 <__assert_fail@plt+0x21dc0>
   363b4:	cmp	r0, #0
   363b8:	bne	36344 <__assert_fail@plt+0x23d50>
   363bc:	mov	r3, #1
   363c0:	mov	fp, r0
   363c4:	mov	r0, #4
   363c8:	add	r4, sp, #20
   363cc:	str	r3, [sp, #20]
   363d0:	str	r3, [sp, #24]
   363d4:	bl	31b54 <__assert_fail@plt+0x1f560>
   363d8:	cmp	r0, #0
   363dc:	mov	r1, r4
   363e0:	str	r0, [sp, #28]
   363e4:	ldr	r2, [sp, #12]
   363e8:	streq	fp, [sp, #20]
   363ec:	streq	fp, [sp, #24]
   363f0:	moveq	fp, #12
   363f4:	strne	r5, [r0]
   363f8:	mov	r0, sl
   363fc:	ldr	r3, [sp, #72]	; 0x48
   36400:	str	fp, [sp, #16]
   36404:	bl	3606c <__assert_fail@plt+0x23a78>
   36408:	mov	r5, r0
   3640c:	mov	r1, r4
   36410:	ldr	r0, [sp]
   36414:	bl	35c70 <__assert_fail@plt+0x2367c>
   36418:	mov	r4, r0
   3641c:	ldr	r0, [sp, #28]
   36420:	bl	2f668 <__assert_fail@plt+0x1d074>
   36424:	ldr	r0, [sp, #16]
   36428:	orr	r3, r5, r4
   3642c:	orrs	r3, r3, r0
   36430:	bne	364cc <__assert_fail@plt+0x23ed8>
   36434:	ldr	r4, [r7, #116]	; 0x74
   36438:	b	36298 <__assert_fail@plt+0x23ca4>
   3643c:	mov	r3, #1
   36440:	mov	r0, #4
   36444:	str	r3, [sp, #20]
   36448:	str	r3, [sp, #24]
   3644c:	bl	31b54 <__assert_fail@plt+0x1f560>
   36450:	cmp	r0, #0
   36454:	str	r0, [sp, #28]
   36458:	beq	364c4 <__assert_fail@plt+0x23ed0>
   3645c:	add	r2, sp, #20
   36460:	str	r8, [r0]
   36464:	str	fp, [sp, #16]
   36468:	b	36318 <__assert_fail@plt+0x23d24>
   3646c:	mov	r8, lr
   36470:	mov	lr, r4
   36474:	add	r5, r8, #1
   36478:	mov	r4, lr
   3647c:	b	361e0 <__assert_fail@plt+0x23bec>
   36480:	mov	r0, #0
   36484:	add	sp, sp, #36	; 0x24
   36488:	ldrd	r4, [sp]
   3648c:	ldrd	r6, [sp, #8]
   36490:	ldrd	r8, [sp, #16]
   36494:	ldrd	sl, [sp, #24]
   36498:	add	sp, sp, #32
   3649c:	pop	{pc}		; (ldr pc, [sp], #4)
   364a0:	ldr	r0, [sp, #16]
   364a4:	cmp	r0, #0
   364a8:	beq	36344 <__assert_fail@plt+0x23d50>
   364ac:	b	36484 <__assert_fail@plt+0x23e90>
   364b0:	ldr	r0, [sp, #28]
   364b4:	bl	2f668 <__assert_fail@plt+0x1d074>
   364b8:	ldr	r0, [sp, #16]
   364bc:	cmp	r0, #0
   364c0:	bne	36484 <__assert_fail@plt+0x23e90>
   364c4:	mov	r0, #12
   364c8:	b	36484 <__assert_fail@plt+0x23e90>
   364cc:	cmp	r0, #0
   364d0:	bne	36484 <__assert_fail@plt+0x23e90>
   364d4:	cmp	r5, #0
   364d8:	movne	r0, r5
   364dc:	moveq	r0, r4
   364e0:	b	36484 <__assert_fail@plt+0x23e90>
   364e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   364e8:	mov	r3, #0
   364ec:	strd	r6, [sp, #8]
   364f0:	strd	sl, [sp, #24]
   364f4:	ldr	sl, [r1, #8]
   364f8:	strd	r8, [sp, #16]
   364fc:	str	lr, [sp, #32]
   36500:	sub	sp, sp, #14400	; 0x3840
   36504:	sub	sp, sp, #44	; 0x2c
   36508:	str	r3, [r1, #44]	; 0x2c
   3650c:	add	r8, sp, #104	; 0x68
   36510:	str	r3, [r1, #48]	; 0x30
   36514:	cmp	sl, r3
   36518:	str	r3, [r8]
   3651c:	str	r3, [r8, #4]
   36520:	str	r3, [r8, #8]
   36524:	str	r3, [r8, #12]
   36528:	str	r3, [r8, #16]
   3652c:	str	r1, [sp, #16]
   36530:	str	r3, [r8, #20]
   36534:	str	r3, [r8, #24]
   36538:	str	r3, [r8, #28]
   3653c:	ble	36f04 <__assert_fail@plt+0x24910>
   36540:	add	r7, sp, #1120	; 0x460
   36544:	str	r3, [sp, #20]
   36548:	add	r7, r7, #8
   3654c:	str	r3, [sp, #24]
   36550:	str	r0, [sp, #36]	; 0x24
   36554:	str	r3, [sp, #48]	; 0x30
   36558:	str	r3, [sp, #52]	; 0x34
   3655c:	ldr	r3, [sp, #16]
   36560:	ldr	r1, [sp, #24]
   36564:	ldr	r2, [r3, #12]
   36568:	lsl	r3, r1, #2
   3656c:	str	r3, [sp, #32]
   36570:	ldr	r3, [sp, #36]	; 0x24
   36574:	ldr	r1, [r2, r1, lsl #2]
   36578:	ldr	r3, [r3]
   3657c:	add	r2, r3, r1, lsl #3
   36580:	ldrb	r6, [r2, #4]
   36584:	str	r2, [sp, #12]
   36588:	ldr	r2, [r2, #4]
   3658c:	cmp	r6, #1
   36590:	ubfx	r2, r2, #8, #10
   36594:	beq	36824 <__assert_fail@plt+0x24230>
   36598:	cmp	r6, #3
   3659c:	beq	36c9c <__assert_fail@plt+0x246a8>
   365a0:	cmp	r6, #5
   365a4:	beq	36b00 <__assert_fail@plt+0x2450c>
   365a8:	cmp	r6, #7
   365ac:	beq	36c04 <__assert_fail@plt+0x24610>
   365b0:	ldr	r3, [sp, #24]
   365b4:	add	r3, r3, #1
   365b8:	cmp	r3, sl
   365bc:	str	r3, [sp, #24]
   365c0:	blt	3655c <__assert_fail@plt+0x23f68>
   365c4:	ldr	r3, [sp, #20]
   365c8:	ldr	r9, [sp, #36]	; 0x24
   365cc:	cmp	r3, #0
   365d0:	ble	36f00 <__assert_fail@plt+0x2490c>
   365d4:	ldr	r3, [sp, #20]
   365d8:	add	r5, sp, #2144	; 0x860
   365dc:	mov	fp, #0
   365e0:	add	r5, r5, #8
   365e4:	str	fp, [r5, #-2088]	; 0xfffff7d8
   365e8:	add	r3, r3, #1
   365ec:	lsl	r0, r3, #2
   365f0:	str	r3, [r5, #-2092]	; 0xfffff7d4
   365f4:	bl	31b54 <__assert_fail@plt+0x1f560>
   365f8:	cmp	r0, fp
   365fc:	str	r0, [r5, #-2084]	; 0xfffff7dc
   36600:	beq	36ea0 <__assert_fail@plt+0x248ac>
   36604:	mov	r3, #0
   36608:	mov	r2, #0
   3660c:	str	fp, [r5, #-2096]	; 0xfffff7d0
   36610:	add	r1, sp, #6208	; 0x1840
   36614:	add	r4, sp, #3168	; 0xc60
   36618:	str	r8, [sp]
   3661c:	add	r1, r1, #40	; 0x28
   36620:	add	r4, r4, #8
   36624:	strd	r2, [r8, #-32]	; 0xffffffe0
   36628:	mov	sl, fp
   3662c:	add	r6, r1, #28
   36630:	str	r1, [sp, #24]
   36634:	strd	r2, [sp, #80]	; 0x50
   36638:	strd	r2, [sp, #88]	; 0x58
   3663c:	strd	r2, [sp, #96]	; 0x60
   36640:	sub	r3, r8, #48	; 0x30
   36644:	str	r3, [sp, #12]
   36648:	str	r4, [sp, #28]
   3664c:	str	r4, [sp, #40]	; 0x28
   36650:	ldr	ip, [r4, #4]
   36654:	mov	r3, #0
   36658:	str	r3, [r5, #-2088]	; 0xfffff7d8
   3665c:	cmp	ip, r3
   36660:	movgt	r7, #0
   36664:	ble	366b0 <__assert_fail@plt+0x240bc>
   36668:	ldr	r2, [r4, #8]
   3666c:	add	r0, sp, #60	; 0x3c
   36670:	ldr	r3, [r9, #12]
   36674:	ldr	r2, [r2, r7, lsl #2]
   36678:	ldr	r3, [r3, r2, lsl #2]
   3667c:	cmn	r3, #1
   36680:	add	r2, r3, r3, lsl #1
   36684:	beq	366a4 <__assert_fail@plt+0x240b0>
   36688:	ldr	r1, [r9, #24]
   3668c:	add	r1, r1, r2, lsl #2
   36690:	bl	35c70 <__assert_fail@plt+0x2367c>
   36694:	cmp	r0, #0
   36698:	str	r0, [r5, #-2096]	; 0xfffff7d0
   3669c:	bne	36d40 <__assert_fail@plt+0x2474c>
   366a0:	ldr	ip, [r4, #4]
   366a4:	add	r7, r7, #1
   366a8:	cmp	ip, r7
   366ac:	bgt	36668 <__assert_fail@plt+0x24074>
   366b0:	mov	r3, #0
   366b4:	add	r2, sp, #60	; 0x3c
   366b8:	ldr	r0, [sp, #12]
   366bc:	mov	r1, r9
   366c0:	bl	34fe8 <__assert_fail@plt+0x229f4>
   366c4:	ldr	r3, [sp]
   366c8:	cmp	r0, #0
   366cc:	mov	r7, r0
   366d0:	str	r0, [r3], #4
   366d4:	str	r3, [sp]
   366d8:	beq	36eb8 <__assert_fail@plt+0x248c4>
   366dc:	ldrsb	r3, [r7, #52]	; 0x34
   366e0:	cmp	r3, #0
   366e4:	blt	36d70 <__assert_fail@plt+0x2477c>
   366e8:	add	r3, sp, #1120	; 0x460
   366ec:	str	r7, [r5, sl, lsl #2]
   366f0:	add	r3, r3, #8
   366f4:	str	r7, [r3, sl, lsl #2]
   366f8:	sub	r7, r8, #36	; 0x24
   366fc:	sub	r1, r6, #32
   36700:	mov	r2, r7
   36704:	ldr	r3, [r2, #4]!
   36708:	ldr	r0, [r1, #4]!
   3670c:	orr	r3, r3, r0
   36710:	cmp	r6, r1
   36714:	str	r3, [r2]
   36718:	bne	36704 <__assert_fail@plt+0x24110>
   3671c:	ldr	r3, [sp, #20]
   36720:	add	sl, sl, #1
   36724:	add	r4, r4, #12
   36728:	add	r6, r6, #32
   3672c:	cmp	sl, r3
   36730:	bne	36650 <__assert_fail@plt+0x2405c>
   36734:	cmp	fp, #0
   36738:	bne	36f44 <__assert_fail@plt+0x24950>
   3673c:	mov	r1, #256	; 0x100
   36740:	mov	r0, #4
   36744:	bl	2f080 <__assert_fail@plt+0x1ca8c>
   36748:	ldr	r3, [sp, #16]
   3674c:	cmp	r0, #0
   36750:	mov	r6, r0
   36754:	str	r0, [r3, #44]	; 0x2c
   36758:	beq	36d40 <__assert_fail@plt+0x2474c>
   3675c:	ldr	r8, [sp, #24]
   36760:	add	r4, r9, #96	; 0x60
   36764:	mov	lr, r0
   36768:	add	ip, r0, #1024	; 0x400
   3676c:	ldr	r3, [r7, #4]!
   36770:	cmp	r3, #0
   36774:	movne	r0, lr
   36778:	movne	r1, #1
   3677c:	beq	36798 <__assert_fail@plt+0x241a4>
   36780:	tst	r3, #1
   36784:	bne	36ec8 <__assert_fail@plt+0x248d4>
   36788:	lsrs	r3, r3, #1
   3678c:	add	r0, r0, #4
   36790:	lsl	r1, r1, #1
   36794:	bne	36780 <__assert_fail@plt+0x2418c>
   36798:	add	lr, lr, #128	; 0x80
   3679c:	add	r4, r4, #4
   367a0:	cmp	ip, lr
   367a4:	add	r8, r8, #4
   367a8:	bne	3676c <__assert_fail@plt+0x24178>
   367ac:	ldr	r3, [r5, #-2080]	; 0xfffff7e0
   367b0:	ubfx	r3, r3, #10, #1
   367b4:	cmp	r3, #0
   367b8:	beq	367ec <__assert_fail@plt+0x241f8>
   367bc:	ldr	ip, [sp, #20]
   367c0:	add	r2, sp, #6208	; 0x1840
   367c4:	add	r1, r3, #1
   367c8:	add	r2, r2, #40	; 0x28
   367cc:	sub	r0, r3, #1
   367d0:	add	r2, r2, r3, lsl #5
   367d4:	ldr	r2, [r2, #-32]	; 0xffffffe0
   367d8:	tst	r2, #1024	; 0x400
   367dc:	bne	36f30 <__assert_fail@plt+0x2493c>
   367e0:	cmp	ip, r3
   367e4:	mov	r3, r1
   367e8:	bne	367c0 <__assert_fail@plt+0x241cc>
   367ec:	ldr	r0, [r5, #-2084]	; 0xfffff7dc
   367f0:	bl	2f668 <__assert_fail@plt+0x1d074>
   367f4:	ldr	r3, [sp, #20]
   367f8:	ldr	r5, [sp, #28]
   367fc:	ldr	r2, [sp, #40]	; 0x28
   36800:	add	r3, r3, r3, lsl #1
   36804:	add	r4, r2, r3, lsl #2
   36808:	add	r5, r5, #12
   3680c:	ldr	r0, [r5, #-4]
   36810:	bl	2f668 <__assert_fail@plt+0x1d074>
   36814:	cmp	r4, r5
   36818:	bne	36808 <__assert_fail@plt+0x24214>
   3681c:	mov	r0, #1
   36820:	b	36be4 <__assert_fail@plt+0x245f0>
   36824:	ldrb	r3, [r3, r1, lsl #3]
   36828:	asr	r0, r3, #5
   3682c:	and	r3, r3, #31
   36830:	ldr	r1, [r8, r0, lsl #2]
   36834:	orr	r3, r1, r6, lsl r3
   36838:	str	r3, [r8, r0, lsl #2]
   3683c:	cmp	r2, #0
   36840:	beq	36920 <__assert_fail@plt+0x2432c>
   36844:	tst	r2, #32
   36848:	bne	36b60 <__assert_fail@plt+0x2456c>
   3684c:	tst	r2, #128	; 0x80
   36850:	bne	36b94 <__assert_fail@plt+0x245a0>
   36854:	tst	r2, #4
   36858:	beq	368bc <__assert_fail@plt+0x242c8>
   3685c:	cmp	r6, #1
   36860:	beq	36d20 <__assert_fail@plt+0x2472c>
   36864:	ldr	r1, [sp, #36]	; 0x24
   36868:	ldr	r3, [r1, #92]	; 0x5c
   3686c:	cmp	r3, #1
   36870:	ble	36c60 <__assert_fail@plt+0x2466c>
   36874:	ldr	lr, [r1, #60]	; 0x3c
   36878:	add	r0, r1, #96	; 0x60
   3687c:	add	r9, r1, #128	; 0x80
   36880:	sub	ip, r8, #4
   36884:	mov	r1, #0
   36888:	sub	lr, lr, #4
   3688c:	ldr	r3, [lr, #4]!
   36890:	ldr	r5, [r0], #4
   36894:	ldr	r4, [ip, #4]!
   36898:	mvn	r3, r3
   3689c:	orr	r3, r3, r5
   368a0:	cmp	r0, r9
   368a4:	and	r3, r3, r4
   368a8:	orr	r1, r1, r3
   368ac:	str	r3, [ip]
   368b0:	bne	3688c <__assert_fail@plt+0x24298>
   368b4:	cmp	r1, #0
   368b8:	beq	365b0 <__assert_fail@plt+0x23fbc>
   368bc:	tst	r2, #8
   368c0:	beq	36920 <__assert_fail@plt+0x2432c>
   368c4:	cmp	r6, #1
   368c8:	beq	36d04 <__assert_fail@plt+0x24710>
   368cc:	ldr	r2, [sp, #36]	; 0x24
   368d0:	ldr	r3, [r2, #92]	; 0x5c
   368d4:	cmp	r3, #1
   368d8:	ble	36cc8 <__assert_fail@plt+0x246d4>
   368dc:	ldr	lr, [r2, #60]	; 0x3c
   368e0:	sub	ip, r8, #4
   368e4:	add	r0, r2, #96	; 0x60
   368e8:	add	r5, r2, #128	; 0x80
   368ec:	mov	r1, #0
   368f0:	sub	lr, lr, #4
   368f4:	ldr	r2, [r0], #4
   368f8:	ldr	r4, [lr, #4]!
   368fc:	ldr	r3, [ip, #4]!
   36900:	cmp	r5, r0
   36904:	and	r2, r2, r4
   36908:	bic	r3, r3, r2
   3690c:	orr	r1, r1, r3
   36910:	str	r3, [ip]
   36914:	bne	368f4 <__assert_fail@plt+0x24300>
   36918:	cmp	r1, #0
   3691c:	beq	365b0 <__assert_fail@plt+0x23fbc>
   36920:	ldr	r3, [sp, #20]
   36924:	cmp	r3, #0
   36928:	movle	r5, #0
   3692c:	ble	36ae8 <__assert_fail@plt+0x244f4>
   36930:	add	r4, sp, #6272	; 0x1880
   36934:	add	r9, sp, #2144	; 0x860
   36938:	str	r6, [sp]
   3693c:	add	r4, r4, #4
   36940:	mov	r5, #0
   36944:	ldr	r6, [sp, #20]
   36948:	add	r9, r9, #8
   3694c:	b	36994 <__assert_fail@plt+0x243a0>
   36950:	ldr	r3, [sp, #12]
   36954:	add	r0, sp, #14400	; 0x3840
   36958:	add	r0, r0, #40	; 0x28
   3695c:	ldrb	r2, [r3]
   36960:	asr	r3, r2, #5
   36964:	and	r2, r2, #31
   36968:	add	r3, r0, r3, lsl #2
   3696c:	add	r3, r3, r1
   36970:	sub	r3, r3, #8192	; 0x2000
   36974:	ldr	r3, [r3]
   36978:	lsr	r2, r3, r2
   3697c:	tst	r2, #1
   36980:	bne	369a4 <__assert_fail@plt+0x243b0>
   36984:	add	r5, r5, #1
   36988:	add	r4, r4, #32
   3698c:	cmp	r5, r6
   36990:	bge	36ae4 <__assert_fail@plt+0x244f0>
   36994:	ldr	r3, [sp]
   36998:	lsl	r1, r5, #5
   3699c:	cmp	r3, #1
   369a0:	beq	36950 <__assert_fail@plt+0x2435c>
   369a4:	sub	r1, r8, #4
   369a8:	sub	r2, r4, #32
   369ac:	mov	sl, r1
   369b0:	mov	r0, r2
   369b4:	sub	lr, r7, #4
   369b8:	mov	ip, #0
   369bc:	ldr	fp, [r0, #4]!
   369c0:	ldr	r3, [sl, #4]!
   369c4:	cmp	r4, r0
   369c8:	and	r3, r3, fp
   369cc:	orr	ip, ip, r3
   369d0:	str	r3, [lr, #4]!
   369d4:	bne	369bc <__assert_fail@plt+0x243c8>
   369d8:	cmp	ip, #0
   369dc:	beq	36984 <__assert_fail@plt+0x24390>
   369e0:	mov	sl, #0
   369e4:	sub	fp, r9, #4
   369e8:	mov	lr, sl
   369ec:	ldr	r3, [r1, #4]!
   369f0:	ldr	ip, [r2, #4]!
   369f4:	bic	r0, ip, r3
   369f8:	bic	r3, r3, ip
   369fc:	cmp	r2, r4
   36a00:	orr	lr, lr, r0
   36a04:	orr	sl, sl, r3
   36a08:	str	r0, [fp, #4]!
   36a0c:	str	r3, [r1]
   36a10:	bne	369ec <__assert_fail@plt+0x243f8>
   36a14:	add	fp, r5, r5, lsl #1
   36a18:	add	r3, sp, #3168	; 0xc60
   36a1c:	cmp	lr, #0
   36a20:	add	r3, r3, #8
   36a24:	str	sl, [sp, #28]
   36a28:	add	lr, r3, fp, lsl #2
   36a2c:	str	lr, [sp, #20]
   36a30:	str	r3, [sp, #40]	; 0x28
   36a34:	beq	36ab8 <__assert_fail@plt+0x244c4>
   36a38:	add	r3, sp, #14400	; 0x3840
   36a3c:	ldrd	r0, [r9]
   36a40:	add	r3, r3, #40	; 0x28
   36a44:	add	ip, r3, r6, lsl #5
   36a48:	ldrd	sl, [r9, #16]
   36a4c:	lsl	r3, r6, #1
   36a50:	sub	ip, ip, #8192	; 0x2000
   36a54:	strd	r0, [ip]
   36a58:	ldrd	r0, [r9, #8]
   36a5c:	strd	r0, [ip, #8]
   36a60:	ldrd	r0, [r9, #24]
   36a64:	strd	sl, [ip, #16]
   36a68:	strd	r0, [ip, #24]
   36a6c:	ldrd	r0, [r7]
   36a70:	strd	r0, [r4, #-28]	; 0xffffffe4
   36a74:	add	r0, r3, r6
   36a78:	mov	r1, lr
   36a7c:	ldrd	sl, [r7, #8]
   36a80:	str	r3, [sp, #44]	; 0x2c
   36a84:	add	r3, sp, #3168	; 0xc60
   36a88:	add	r3, r3, #8
   36a8c:	add	r0, r3, r0, lsl #2
   36a90:	strd	sl, [r4, #-20]	; 0xffffffec
   36a94:	ldrd	sl, [r7, #16]
   36a98:	strd	sl, [r4, #-12]
   36a9c:	ldrd	sl, [r7, #24]
   36aa0:	strd	sl, [r4, #-4]
   36aa4:	bl	34df4 <__assert_fail@plt+0x22800>
   36aa8:	cmp	r0, #0
   36aac:	ldr	r3, [sp, #44]	; 0x2c
   36ab0:	bne	36d18 <__assert_fail@plt+0x24724>
   36ab4:	add	r6, r6, #1
   36ab8:	ldr	r3, [sp, #16]
   36abc:	ldr	r0, [sp, #20]
   36ac0:	ldr	r2, [sp, #32]
   36ac4:	ldr	r3, [r3, #12]
   36ac8:	ldr	r1, [r3, r2]
   36acc:	bl	33de0 <__assert_fail@plt+0x217ec>
   36ad0:	cmp	r0, #0
   36ad4:	beq	36bb4 <__assert_fail@plt+0x245c0>
   36ad8:	ldr	r3, [sp, #28]
   36adc:	cmp	r3, #0
   36ae0:	bne	36984 <__assert_fail@plt+0x24390>
   36ae4:	str	r6, [sp, #20]
   36ae8:	ldr	r3, [sp, #20]
   36aec:	cmp	r5, r3
   36af0:	beq	36ddc <__assert_fail@plt+0x247e8>
   36af4:	ldr	r3, [sp, #16]
   36af8:	ldr	sl, [r3, #8]
   36afc:	b	365b0 <__assert_fail@plt+0x23fbc>
   36b00:	ldr	r1, [sp, #36]	; 0x24
   36b04:	ldr	r3, [r1, #92]	; 0x5c
   36b08:	cmp	r3, #1
   36b0c:	ble	36c34 <__assert_fail@plt+0x24640>
   36b10:	ldr	lr, [r1, #60]	; 0x3c
   36b14:	sub	r0, r8, #4
   36b18:	sub	r1, lr, #4
   36b1c:	add	lr, lr, #28
   36b20:	ldr	r3, [r0, #4]!
   36b24:	ldr	ip, [r1, #4]!
   36b28:	orr	r3, r3, ip
   36b2c:	cmp	r1, lr
   36b30:	str	r3, [r0]
   36b34:	bne	36b20 <__assert_fail@plt+0x2452c>
   36b38:	ldr	r3, [sp, #36]	; 0x24
   36b3c:	ldr	r3, [r3, #128]	; 0x80
   36b40:	tst	r3, #64	; 0x40
   36b44:	beq	36c24 <__assert_fail@plt+0x24630>
   36b48:	tst	r3, #128	; 0x80
   36b4c:	beq	3683c <__assert_fail@plt+0x24248>
   36b50:	ldr	r3, [sp, #104]	; 0x68
   36b54:	bic	r3, r3, #1
   36b58:	str	r3, [sp, #104]	; 0x68
   36b5c:	b	3683c <__assert_fail@plt+0x24248>
   36b60:	ldrd	r0, [sp, #48]	; 0x30
   36b64:	str	r1, [r8, #4]
   36b68:	ldr	r3, [sp, #104]	; 0x68
   36b6c:	str	r0, [r8]
   36b70:	strd	r0, [r8, #8]
   36b74:	strd	r0, [r8, #16]
   36b78:	strd	r0, [r8, #24]
   36b7c:	tst	r3, #1024	; 0x400
   36b80:	beq	365b0 <__assert_fail@plt+0x23fbc>
   36b84:	mov	r3, #1024	; 0x400
   36b88:	tst	r2, #128	; 0x80
   36b8c:	str	r3, [sp, #104]	; 0x68
   36b90:	beq	36854 <__assert_fail@plt+0x24260>
   36b94:	ldr	r3, [sp, #48]	; 0x30
   36b98:	ldr	r2, [sp, #52]	; 0x34
   36b9c:	str	r3, [r8]
   36ba0:	strd	r2, [r8, #4]
   36ba4:	strd	r2, [r8, #12]
   36ba8:	strd	r2, [r8, #20]
   36bac:	str	r2, [r8, #28]
   36bb0:	b	365b0 <__assert_fail@plt+0x23fbc>
   36bb4:	lsl	r3, r6, #1
   36bb8:	str	r6, [sp, #20]
   36bbc:	ldr	r2, [sp, #20]
   36bc0:	ldr	r4, [sp, #40]	; 0x28
   36bc4:	add	r3, r3, r2
   36bc8:	add	r5, r4, r3, lsl #2
   36bcc:	add	r4, r4, #12
   36bd0:	ldr	r0, [r4, #-4]
   36bd4:	bl	2f668 <__assert_fail@plt+0x1d074>
   36bd8:	cmp	r5, r4
   36bdc:	bne	36bcc <__assert_fail@plt+0x245d8>
   36be0:	mov	r0, #0
   36be4:	add	sp, sp, #14400	; 0x3840
   36be8:	add	sp, sp, #44	; 0x2c
   36bec:	ldrd	r4, [sp]
   36bf0:	ldrd	r6, [sp, #8]
   36bf4:	ldrd	r8, [sp, #16]
   36bf8:	ldrd	sl, [sp, #24]
   36bfc:	add	sp, sp, #32
   36c00:	pop	{pc}		; (ldr pc, [sp], #4)
   36c04:	ldr	r3, [sp, #36]	; 0x24
   36c08:	mvn	r0, #0
   36c0c:	mvn	r1, #0
   36c10:	strd	r0, [r8]
   36c14:	strd	r0, [r8, #8]
   36c18:	ldr	r3, [r3, #128]	; 0x80
   36c1c:	tst	r3, #64	; 0x40
   36c20:	bne	36b48 <__assert_fail@plt+0x24554>
   36c24:	ldr	r1, [sp, #104]	; 0x68
   36c28:	bic	r1, r1, #1024	; 0x400
   36c2c:	str	r1, [sp, #104]	; 0x68
   36c30:	b	36b48 <__assert_fail@plt+0x24554>
   36c34:	ldr	r3, [sp, #36]	; 0x24
   36c38:	mvn	r0, #0
   36c3c:	mvn	r1, #0
   36c40:	strd	r0, [r8]
   36c44:	strd	r0, [r8, #8]
   36c48:	strd	r0, [r8, #16]
   36c4c:	ldr	r3, [r3, #128]	; 0x80
   36c50:	strd	r0, [r8, #24]
   36c54:	tst	r3, #64	; 0x40
   36c58:	bne	36b48 <__assert_fail@plt+0x24554>
   36c5c:	b	36c24 <__assert_fail@plt+0x24630>
   36c60:	ldr	r3, [sp, #36]	; 0x24
   36c64:	sub	ip, r8, #4
   36c68:	mov	r1, #0
   36c6c:	add	r0, r3, #96	; 0x60
   36c70:	add	r4, r3, #128	; 0x80
   36c74:	ldr	r3, [r0], #4
   36c78:	ldr	lr, [ip, #4]!
   36c7c:	cmp	r0, r4
   36c80:	and	r3, r3, lr
   36c84:	orr	r1, r1, r3
   36c88:	str	r3, [ip]
   36c8c:	bne	36c74 <__assert_fail@plt+0x24680>
   36c90:	cmp	r1, #0
   36c94:	bne	368bc <__assert_fail@plt+0x242c8>
   36c98:	b	365b0 <__assert_fail@plt+0x23fbc>
   36c9c:	ldr	lr, [r3, r1, lsl #3]
   36ca0:	sub	r0, r8, #4
   36ca4:	sub	r1, lr, #4
   36ca8:	add	lr, lr, #28
   36cac:	ldr	r3, [r0, #4]!
   36cb0:	ldr	ip, [r1, #4]!
   36cb4:	orr	r3, r3, ip
   36cb8:	cmp	r1, lr
   36cbc:	str	r3, [r0]
   36cc0:	bne	36cac <__assert_fail@plt+0x246b8>
   36cc4:	b	3683c <__assert_fail@plt+0x24248>
   36cc8:	ldr	r3, [sp, #36]	; 0x24
   36ccc:	sub	r0, r8, #4
   36cd0:	mov	r1, #0
   36cd4:	add	r2, r3, #96	; 0x60
   36cd8:	add	lr, r3, #128	; 0x80
   36cdc:	ldr	ip, [r2], #4
   36ce0:	ldr	r3, [r0, #4]!
   36ce4:	cmp	lr, r2
   36ce8:	bic	r3, r3, ip
   36cec:	orr	r1, r1, r3
   36cf0:	str	r3, [r0]
   36cf4:	bne	36cdc <__assert_fail@plt+0x246e8>
   36cf8:	cmp	r1, #0
   36cfc:	beq	365b0 <__assert_fail@plt+0x23fbc>
   36d00:	b	36920 <__assert_fail@plt+0x2432c>
   36d04:	ldr	r3, [sp, #12]
   36d08:	ldrb	r3, [r3, #6]
   36d0c:	tst	r3, #64	; 0x40
   36d10:	beq	368cc <__assert_fail@plt+0x242d8>
   36d14:	b	36b94 <__assert_fail@plt+0x245a0>
   36d18:	str	r6, [sp, #20]
   36d1c:	b	36bbc <__assert_fail@plt+0x245c8>
   36d20:	ldr	r3, [sp, #12]
   36d24:	ldrb	r3, [r3, #6]
   36d28:	tst	r3, #64	; 0x40
   36d2c:	bne	36864 <__assert_fail@plt+0x24270>
   36d30:	b	36b94 <__assert_fail@plt+0x245a0>
   36d34:	ldr	r3, [r5, #-2096]	; 0xfffff7d0
   36d38:	cmp	r3, #0
   36d3c:	beq	36da0 <__assert_fail@plt+0x247ac>
   36d40:	ldr	r0, [r5, #-2084]	; 0xfffff7dc
   36d44:	ldr	r4, [sp, #40]	; 0x28
   36d48:	bl	2f668 <__assert_fail@plt+0x1d074>
   36d4c:	ldr	r3, [sp, #20]
   36d50:	add	r5, r3, r3, lsl #1
   36d54:	add	r5, r4, r5, lsl #2
   36d58:	add	r4, r4, #12
   36d5c:	ldr	r0, [r4, #-4]
   36d60:	bl	2f668 <__assert_fail@plt+0x1d074>
   36d64:	cmp	r5, r4
   36d68:	bne	36d58 <__assert_fail@plt+0x24764>
   36d6c:	b	36be0 <__assert_fail@plt+0x245ec>
   36d70:	mov	r3, #1
   36d74:	add	r2, sp, #60	; 0x3c
   36d78:	ldr	r0, [sp, #12]
   36d7c:	mov	r1, r9
   36d80:	bl	34fe8 <__assert_fail@plt+0x229f4>
   36d84:	add	r3, sp, #1120	; 0x460
   36d88:	cmp	r0, #0
   36d8c:	add	r3, r3, #8
   36d90:	str	r0, [r3, sl, lsl #2]
   36d94:	beq	36d34 <__assert_fail@plt+0x24740>
   36d98:	cmp	r7, r0
   36d9c:	beq	36dac <__assert_fail@plt+0x247b8>
   36da0:	ldr	r3, [r9, #92]	; 0x5c
   36da4:	cmp	r3, #2
   36da8:	movge	fp, #1
   36dac:	mov	r3, #2
   36db0:	add	r2, sp, #60	; 0x3c
   36db4:	ldr	r0, [sp, #12]
   36db8:	mov	r1, r9
   36dbc:	bl	34fe8 <__assert_fail@plt+0x229f4>
   36dc0:	cmp	r0, #0
   36dc4:	str	r0, [r5, sl, lsl #2]
   36dc8:	bne	366f8 <__assert_fail@plt+0x24104>
   36dcc:	ldr	r3, [r5, #-2096]	; 0xfffff7d0
   36dd0:	cmp	r3, #0
   36dd4:	beq	366f8 <__assert_fail@plt+0x24104>
   36dd8:	b	36d40 <__assert_fail@plt+0x2474c>
   36ddc:	ldr	r0, [sp, #16]
   36de0:	add	r1, sp, #3168	; 0xc60
   36de4:	add	r1, r1, #8
   36de8:	ldr	r2, [sp, #20]
   36dec:	str	r1, [sp, #40]	; 0x28
   36df0:	ldrd	sl, [r8]
   36df4:	ldr	ip, [r0, #12]
   36df8:	lsl	r3, r2, #1
   36dfc:	ldr	lr, [sp, #32]
   36e00:	add	r0, r3, r2
   36e04:	add	r5, r1, r0, lsl #2
   36e08:	str	r3, [sp, #12]
   36e0c:	mov	r3, r1
   36e10:	add	r1, sp, #14400	; 0x3840
   36e14:	add	r1, r1, #40	; 0x28
   36e18:	add	r2, r1, r2, lsl #5
   36e1c:	mov	r1, #1
   36e20:	ldr	r4, [ip, lr]
   36e24:	sub	r2, r2, #8192	; 0x2000
   36e28:	str	r1, [r3, r0, lsl #2]
   36e2c:	mov	r0, #4
   36e30:	str	r1, [r5, #4]
   36e34:	strd	sl, [r2]
   36e38:	ldrd	sl, [r8, #16]
   36e3c:	strd	sl, [sp]
   36e40:	ldrd	sl, [r8, #8]
   36e44:	strd	sl, [r2, #8]
   36e48:	ldrd	sl, [sp]
   36e4c:	strd	sl, [r2, #16]
   36e50:	ldrd	sl, [r8, #24]
   36e54:	strd	sl, [r2, #24]
   36e58:	bl	31b54 <__assert_fail@plt+0x1f560>
   36e5c:	cmp	r0, #0
   36e60:	str	r0, [r5, #8]
   36e64:	ldr	r3, [sp, #12]
   36e68:	beq	36e88 <__assert_fail@plt+0x24894>
   36e6c:	str	r4, [r0]
   36e70:	ldr	r3, [sp, #16]
   36e74:	ldr	sl, [r3, #8]
   36e78:	ldr	r3, [sp, #20]
   36e7c:	add	r3, r3, #1
   36e80:	str	r3, [sp, #20]
   36e84:	b	36b94 <__assert_fail@plt+0x245a0>
   36e88:	ldr	r2, [sp, #20]
   36e8c:	str	r0, [r5]
   36e90:	str	r0, [r5, #4]
   36e94:	cmp	r2, #0
   36e98:	beq	36be0 <__assert_fail@plt+0x245ec>
   36e9c:	b	36bbc <__assert_fail@plt+0x245c8>
   36ea0:	add	r2, sp, #3168	; 0xc60
   36ea4:	mov	r3, #12
   36ea8:	add	r2, r2, #8
   36eac:	str	r3, [r5, #-2096]	; 0xfffff7d0
   36eb0:	str	r2, [sp, #40]	; 0x28
   36eb4:	b	36d44 <__assert_fail@plt+0x24750>
   36eb8:	ldr	r3, [r5, #-2096]	; 0xfffff7d0
   36ebc:	cmp	r3, #0
   36ec0:	beq	366dc <__assert_fail@plt+0x240e8>
   36ec4:	b	36d40 <__assert_fail@plt+0x2474c>
   36ec8:	ldr	r2, [r8]
   36ecc:	ands	r2, r1, r2
   36ed0:	bne	36f28 <__assert_fail@plt+0x24934>
   36ed4:	add	r2, r2, #1
   36ed8:	ldr	r9, [r8, r2, lsl #5]
   36edc:	tst	r1, r9
   36ee0:	beq	36ed4 <__assert_fail@plt+0x248e0>
   36ee4:	ldr	r9, [r4]
   36ee8:	add	r2, r5, r2, lsl #2
   36eec:	tst	r1, r9
   36ef0:	ldrne	r2, [r2, #-1024]	; 0xfffffc00
   36ef4:	ldreq	r2, [r2, #-2048]	; 0xfffff800
   36ef8:	str	r2, [r0]
   36efc:	b	36788 <__assert_fail@plt+0x24194>
   36f00:	bne	36be0 <__assert_fail@plt+0x245ec>
   36f04:	mov	r1, #256	; 0x100
   36f08:	mov	r0, #4
   36f0c:	bl	2f080 <__assert_fail@plt+0x1ca8c>
   36f10:	ldr	r2, [sp, #16]
   36f14:	mov	r3, r0
   36f18:	adds	r0, r0, #0
   36f1c:	movne	r0, #1
   36f20:	str	r3, [r2, #44]	; 0x2c
   36f24:	b	36be4 <__assert_fail@plt+0x245f0>
   36f28:	mov	r2, #0
   36f2c:	b	36ee4 <__assert_fail@plt+0x248f0>
   36f30:	ldr	r3, [r5, r0, lsl #2]
   36f34:	cmp	fp, #0
   36f38:	strne	r3, [r6, #1064]	; 0x428
   36f3c:	str	r3, [r6, #40]	; 0x28
   36f40:	b	367ec <__assert_fail@plt+0x241f8>
   36f44:	mov	r1, #512	; 0x200
   36f48:	mov	r0, #4
   36f4c:	bl	2f080 <__assert_fail@plt+0x1ca8c>
   36f50:	ldr	r3, [sp, #16]
   36f54:	cmp	r0, #0
   36f58:	mov	r6, r0
   36f5c:	str	r0, [r3, #48]	; 0x30
   36f60:	beq	36d40 <__assert_fail@plt+0x2474c>
   36f64:	ldr	ip, [sp, #24]
   36f68:	mov	lr, r0
   36f6c:	add	r4, r0, #1024	; 0x400
   36f70:	ldr	r3, [r7, #4]!
   36f74:	cmp	r3, #0
   36f78:	movne	r0, lr
   36f7c:	movne	r1, #1
   36f80:	beq	36f9c <__assert_fail@plt+0x249a8>
   36f84:	tst	r3, #1
   36f88:	bne	36fb0 <__assert_fail@plt+0x249bc>
   36f8c:	lsrs	r3, r3, #1
   36f90:	add	r0, r0, #4
   36f94:	lsl	r1, r1, #1
   36f98:	bne	36f84 <__assert_fail@plt+0x24990>
   36f9c:	add	lr, lr, #128	; 0x80
   36fa0:	add	ip, ip, #4
   36fa4:	cmp	r4, lr
   36fa8:	bne	36f70 <__assert_fail@plt+0x2497c>
   36fac:	b	367ac <__assert_fail@plt+0x241b8>
   36fb0:	ldr	r2, [ip]
   36fb4:	ands	r2, r1, r2
   36fb8:	bne	36fe4 <__assert_fail@plt+0x249f0>
   36fbc:	add	r2, r2, #1
   36fc0:	ldr	r8, [ip, r2, lsl #5]
   36fc4:	tst	r1, r8
   36fc8:	beq	36fbc <__assert_fail@plt+0x249c8>
   36fcc:	add	r2, r5, r2, lsl #2
   36fd0:	ldr	r8, [r2, #-2048]	; 0xfffff800
   36fd4:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   36fd8:	str	r8, [r0]
   36fdc:	str	r2, [r0, #1024]	; 0x400
   36fe0:	b	36f8c <__assert_fail@plt+0x24998>
   36fe4:	mov	r2, #0
   36fe8:	b	36fcc <__assert_fail@plt+0x249d8>
   36fec:	cmp	r1, #0
   36ff0:	strd	r4, [sp, #-16]!
   36ff4:	mov	r5, r0
   36ff8:	str	r6, [sp, #8]
   36ffc:	str	lr, [sp, #12]
   37000:	blt	370b4 <__assert_fail@plt+0x24ac0>
   37004:	ldr	r3, [r0, #48]	; 0x30
   37008:	cmp	r3, r1
   3700c:	beq	370c8 <__assert_fail@plt+0x24ad4>
   37010:	ldr	r3, [r0, #80]	; 0x50
   37014:	cmp	r3, #1
   37018:	ble	37068 <__assert_fail@plt+0x24a74>
   3701c:	ldr	r3, [r0, #8]
   37020:	add	r3, r3, r1, lsl #2
   37024:	b	37030 <__assert_fail@plt+0x24a3c>
   37028:	cmn	r1, #1
   3702c:	beq	370b4 <__assert_fail@plt+0x24ac0>
   37030:	ldr	r4, [r3], #-4
   37034:	sub	r1, r1, #1
   37038:	cmn	r4, #1
   3703c:	beq	37028 <__assert_fail@plt+0x24a34>
   37040:	ldrb	r3, [r5, #78]	; 0x4e
   37044:	cmp	r3, #0
   37048:	bne	370d8 <__assert_fail@plt+0x24ae4>
   3704c:	cmp	r4, #10
   37050:	movne	r0, #0
   37054:	beq	37094 <__assert_fail@plt+0x24aa0>
   37058:	ldrd	r4, [sp]
   3705c:	ldr	r6, [sp, #8]
   37060:	add	sp, sp, #12
   37064:	pop	{pc}		; (ldr pc, [sp], #4)
   37068:	ldr	r3, [r0, #4]
   3706c:	ldr	r0, [r0, #68]	; 0x44
   37070:	ldrb	r3, [r3, r1]
   37074:	asr	r1, r3, #5
   37078:	and	r2, r3, #31
   3707c:	ldr	r0, [r0, r1, lsl #2]
   37080:	lsr	r0, r0, r2
   37084:	ands	r0, r0, #1
   37088:	bne	37058 <__assert_fail@plt+0x24a64>
   3708c:	cmp	r3, #10
   37090:	bne	37058 <__assert_fail@plt+0x24a64>
   37094:	ldrb	r3, [r5, #77]	; 0x4d
   37098:	ldrd	r4, [sp]
   3709c:	ldr	r6, [sp, #8]
   370a0:	add	sp, sp, #12
   370a4:	cmp	r3, #0
   370a8:	moveq	r0, #0
   370ac:	movne	r0, #2
   370b0:	pop	{pc}		; (ldr pc, [sp], #4)
   370b4:	ldr	r6, [sp, #8]
   370b8:	ldr	r0, [r5, #60]	; 0x3c
   370bc:	ldrd	r4, [sp]
   370c0:	add	sp, sp, #12
   370c4:	pop	{pc}		; (ldr pc, [sp], #4)
   370c8:	tst	r2, #2
   370cc:	movne	r0, #8
   370d0:	moveq	r0, #10
   370d4:	b	37058 <__assert_fail@plt+0x24a64>
   370d8:	mov	r0, r4
   370dc:	bl	12354 <iswalnum@plt>
   370e0:	sub	r3, r4, #95	; 0x5f
   370e4:	cmp	r0, #0
   370e8:	clz	r3, r3
   370ec:	lsr	r3, r3, #5
   370f0:	movne	r3, #1
   370f4:	cmp	r3, #0
   370f8:	movne	r0, #1
   370fc:	bne	37058 <__assert_fail@plt+0x24a64>
   37100:	b	3704c <__assert_fail@plt+0x24a58>
   37104:	ldrb	ip, [r1, #4]
   37108:	str	r4, [sp, #-8]!
   3710c:	ldr	r3, [r0, #4]
   37110:	str	lr, [sp, #4]
   37114:	sub	ip, ip, #1
   37118:	ldrb	r3, [r3, r2]
   3711c:	cmp	ip, #6
   37120:	ldrls	pc, [pc, ip, lsl #2]
   37124:	b	37150 <__assert_fail@plt+0x24b5c>
   37128:	andeq	r7, r3, r4, asr #2
   3712c:	andeq	r7, r3, r0, asr r1
   37130:	strdeq	r7, [r3], -r4
   37134:	andeq	r7, r3, r0, asr r1
   37138:	andeq	r7, r3, r8, ror #2
   3713c:	andeq	r7, r3, r0, asr r1
   37140:	andeq	r7, r3, r0, ror #2
   37144:	ldrb	ip, [r1]
   37148:	cmp	ip, r3
   3714c:	beq	37188 <__assert_fail@plt+0x24b94>
   37150:	mov	r0, #0
   37154:	ldr	r4, [sp]
   37158:	add	sp, sp, #4
   3715c:	pop	{pc}		; (ldr pc, [sp], #4)
   37160:	tst	r3, #128	; 0x80
   37164:	bne	37150 <__assert_fail@plt+0x24b5c>
   37168:	cmp	r3, #10
   3716c:	beq	37228 <__assert_fail@plt+0x24c34>
   37170:	cmp	r3, #0
   37174:	bne	37188 <__assert_fail@plt+0x24b94>
   37178:	ldr	ip, [r0, #84]	; 0x54
   3717c:	ldr	ip, [ip, #128]	; 0x80
   37180:	tst	ip, #128	; 0x80
   37184:	bne	37150 <__assert_fail@plt+0x24b5c>
   37188:	ldr	r4, [r1, #4]
   3718c:	mov	r3, #65280	; 0xff00
   37190:	movt	r3, #3
   37194:	and	r3, r3, r4
   37198:	cmp	r3, #0
   3719c:	beq	371e4 <__assert_fail@plt+0x24bf0>
   371a0:	mov	r1, r2
   371a4:	ldr	r2, [r0, #88]	; 0x58
   371a8:	bl	36fec <__assert_fail@plt+0x249f8>
   371ac:	ubfx	r1, r4, #8, #10
   371b0:	ands	r2, r1, #4
   371b4:	bne	37214 <__assert_fail@plt+0x24c20>
   371b8:	tst	r1, #8
   371bc:	beq	371c8 <__assert_fail@plt+0x24bd4>
   371c0:	tst	r0, #1
   371c4:	bne	37150 <__assert_fail@plt+0x24b5c>
   371c8:	tst	r1, #32
   371cc:	beq	371d8 <__assert_fail@plt+0x24be4>
   371d0:	ands	r3, r0, #2
   371d4:	beq	37150 <__assert_fail@plt+0x24b5c>
   371d8:	tst	r1, #128	; 0x80
   371dc:	ubfxne	r0, r0, #3, #1
   371e0:	bne	37154 <__assert_fail@plt+0x24b60>
   371e4:	ldr	r4, [sp]
   371e8:	add	sp, sp, #4
   371ec:	mov	r0, #1
   371f0:	pop	{pc}		; (ldr pc, [sp], #4)
   371f4:	ldr	ip, [r1]
   371f8:	asr	lr, r3, #5
   371fc:	and	r3, r3, #31
   37200:	ldr	ip, [ip, lr, lsl #2]
   37204:	lsr	r3, ip, r3
   37208:	ands	r3, r3, #1
   3720c:	bne	37188 <__assert_fail@plt+0x24b94>
   37210:	b	37150 <__assert_fail@plt+0x24b5c>
   37214:	ands	r3, r0, #1
   37218:	beq	37150 <__assert_fail@plt+0x24b5c>
   3721c:	tst	r1, #8
   37220:	beq	371c8 <__assert_fail@plt+0x24bd4>
   37224:	b	37150 <__assert_fail@plt+0x24b5c>
   37228:	ldr	r3, [r0, #84]	; 0x54
   3722c:	ldr	r3, [r3, #128]	; 0x80
   37230:	ands	r3, r3, #64	; 0x40
   37234:	bne	37188 <__assert_fail@plt+0x24b94>
   37238:	b	37150 <__assert_fail@plt+0x24b5c>
   3723c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   37240:	mov	r4, r1
   37244:	mov	r1, r2
   37248:	ldr	r2, [r0, #88]	; 0x58
   3724c:	mov	r5, r0
   37250:	strd	r6, [sp, #8]
   37254:	str	r8, [sp, #16]
   37258:	str	lr, [sp, #20]
   3725c:	bl	36fec <__assert_fail@plt+0x249f8>
   37260:	ldr	lr, [r4, #8]
   37264:	cmp	lr, #0
   37268:	ble	37318 <__assert_fail@plt+0x24d24>
   3726c:	ldr	r3, [r5, #84]	; 0x54
   37270:	mov	r2, #0
   37274:	and	r7, r0, #8
   37278:	and	r6, r0, #2
   3727c:	and	r5, r0, #1
   37280:	ldr	r1, [r4, #12]
   37284:	ldr	r4, [r3]
   37288:	sub	r1, r1, #4
   3728c:	ldr	r0, [r1, #4]!
   37290:	add	r3, r4, r0, lsl #3
   37294:	ldrb	ip, [r3, #4]
   37298:	ldr	r3, [r3, #4]
   3729c:	cmp	ip, #2
   372a0:	ubfx	r3, r3, #8, #10
   372a4:	bne	3730c <__assert_fail@plt+0x24d18>
   372a8:	cmp	r3, #0
   372ac:	beq	372e8 <__assert_fail@plt+0x24cf4>
   372b0:	tst	r3, #4
   372b4:	beq	372fc <__assert_fail@plt+0x24d08>
   372b8:	cmp	r5, #0
   372bc:	beq	3730c <__assert_fail@plt+0x24d18>
   372c0:	tst	r3, #8
   372c4:	bne	3730c <__assert_fail@plt+0x24d18>
   372c8:	tst	r3, #32
   372cc:	beq	372d8 <__assert_fail@plt+0x24ce4>
   372d0:	cmp	r6, #0
   372d4:	beq	3730c <__assert_fail@plt+0x24d18>
   372d8:	tst	r3, #128	; 0x80
   372dc:	beq	372e8 <__assert_fail@plt+0x24cf4>
   372e0:	cmp	r7, #0
   372e4:	beq	3730c <__assert_fail@plt+0x24d18>
   372e8:	ldrd	r4, [sp]
   372ec:	ldrd	r6, [sp, #8]
   372f0:	ldr	r8, [sp, #16]
   372f4:	add	sp, sp, #20
   372f8:	pop	{pc}		; (ldr pc, [sp], #4)
   372fc:	tst	r3, #8
   37300:	beq	372c8 <__assert_fail@plt+0x24cd4>
   37304:	cmp	r5, #0
   37308:	beq	372c8 <__assert_fail@plt+0x24cd4>
   3730c:	add	r2, r2, #1
   37310:	cmp	r2, lr
   37314:	bne	3728c <__assert_fail@plt+0x24c98>
   37318:	mov	r0, #0
   3731c:	b	372e8 <__assert_fail@plt+0x24cf4>
   37320:	strd	r4, [sp, #-36]!	; 0xffffffdc
   37324:	mov	r4, r0
   37328:	ldr	r5, [r0, #24]
   3732c:	strd	r6, [sp, #8]
   37330:	mov	r7, r1
   37334:	strd	r8, [sp, #16]
   37338:	mov	r8, r2
   3733c:	strd	sl, [sp, #24]
   37340:	str	lr, [sp, #32]
   37344:	sub	sp, sp, #44	; 0x2c
   37348:	cmp	r5, r1
   3734c:	suble	r5, r1, r5
   37350:	ble	373b4 <__assert_fail@plt+0x24dc0>
   37354:	ldr	r3, [r0, #80]	; 0x50
   37358:	cmp	r3, #1
   3735c:	ble	3736c <__assert_fail@plt+0x24d78>
   37360:	mov	r2, #0
   37364:	mov	r3, #0
   37368:	strd	r2, [r0, #16]
   3736c:	ldrb	r3, [r4, #75]	; 0x4b
   37370:	mov	r2, #0
   37374:	tst	r8, #1
   37378:	movne	r0, #4
   3737c:	moveq	r0, #6
   37380:	ldr	ip, [r4, #44]	; 0x2c
   37384:	mov	r5, r7
   37388:	str	r2, [r4, #24]
   3738c:	ldr	r1, [r4, #52]	; 0x34
   37390:	cmp	r3, r2
   37394:	str	r2, [r4, #28]
   37398:	ldreq	r3, [r4]
   3739c:	str	r2, [r4, #32]
   373a0:	str	ip, [r4, #48]	; 0x30
   373a4:	str	r1, [r4, #56]	; 0x38
   373a8:	str	r0, [r4, #60]	; 0x3c
   373ac:	streq	r3, [r4, #4]
   373b0:	strb	r2, [r4, #76]	; 0x4c
   373b4:	cmp	r5, #0
   373b8:	beq	37534 <__assert_fail@plt+0x24f40>
   373bc:	ldrb	r2, [r4, #76]	; 0x4c
   373c0:	ldr	r3, [r4, #32]
   373c4:	ldr	r6, [r4, #28]
   373c8:	cmp	r3, r5
   373cc:	ble	37544 <__assert_fail@plt+0x24f50>
   373d0:	cmp	r2, #0
   373d4:	bne	376b8 <__assert_fail@plt+0x250c4>
   373d8:	mov	r2, r8
   373dc:	sub	r1, r5, #1
   373e0:	mov	r0, r4
   373e4:	bl	36fec <__assert_fail@plt+0x249f8>
   373e8:	ldr	r3, [r4, #80]	; 0x50
   373ec:	sub	r2, r6, r5
   373f0:	str	r0, [r4, #60]	; 0x3c
   373f4:	cmp	r3, #1
   373f8:	bgt	37490 <__assert_fail@plt+0x24e9c>
   373fc:	ldrb	r3, [r4, #75]	; 0x4b
   37400:	cmp	r3, #0
   37404:	bne	376f8 <__assert_fail@plt+0x25104>
   37408:	ldr	ip, [r4, #32]
   3740c:	str	r2, [r4, #28]
   37410:	ldr	r1, [r4, #48]	; 0x30
   37414:	ldr	r0, [r4, #56]	; 0x38
   37418:	sub	ip, ip, r5
   3741c:	ldr	r2, [r4, #80]	; 0x50
   37420:	sub	r1, r1, r5
   37424:	str	ip, [r4, #32]
   37428:	sub	r0, r0, r5
   3742c:	cmp	r3, #0
   37430:	bne	37440 <__assert_fail@plt+0x24e4c>
   37434:	ldr	r3, [r4, #4]
   37438:	add	r5, r3, r5
   3743c:	str	r5, [r4, #4]
   37440:	cmp	r2, #1
   37444:	str	r7, [r4, #24]
   37448:	str	r1, [r4, #48]	; 0x30
   3744c:	str	r0, [r4, #56]	; 0x38
   37450:	ble	374bc <__assert_fail@plt+0x24ec8>
   37454:	ldrb	r3, [r4, #72]	; 0x48
   37458:	mov	r0, r4
   3745c:	cmp	r3, #0
   37460:	bne	374ac <__assert_fail@plt+0x24eb8>
   37464:	bl	32e60 <__assert_fail@plt+0x2086c>
   37468:	mov	r3, #0
   3746c:	mov	r0, r3
   37470:	str	r3, [r4, #40]	; 0x28
   37474:	add	sp, sp, #44	; 0x2c
   37478:	ldrd	r4, [sp]
   3747c:	ldrd	r6, [sp, #8]
   37480:	ldrd	r8, [sp, #16]
   37484:	ldrd	sl, [sp, #24]
   37488:	add	sp, sp, #32
   3748c:	pop	{pc}		; (ldr pc, [sp], #4)
   37490:	ldr	r0, [r4, #8]
   37494:	lsl	r2, r2, #2
   37498:	add	r1, r0, r5, lsl #2
   3749c:	bl	11fb8 <memmove@plt>
   374a0:	ldr	r2, [r4, #28]
   374a4:	sub	r2, r2, r5
   374a8:	b	373fc <__assert_fail@plt+0x24e08>
   374ac:	bl	33000 <__assert_fail@plt+0x20a0c>
   374b0:	cmp	r0, #0
   374b4:	beq	37468 <__assert_fail@plt+0x24e74>
   374b8:	b	37474 <__assert_fail@plt+0x24e80>
   374bc:	ldrb	r3, [r4, #75]	; 0x4b
   374c0:	cmp	r3, #0
   374c4:	streq	r1, [r4, #28]
   374c8:	beq	37468 <__assert_fail@plt+0x24e74>
   374cc:	ldrb	r3, [r4, #72]	; 0x48
   374d0:	cmp	r3, #0
   374d4:	bne	379b8 <__assert_fail@plt+0x253c4>
   374d8:	ldr	r0, [r4, #64]	; 0x40
   374dc:	cmp	r0, #0
   374e0:	beq	37468 <__assert_fail@plt+0x24e74>
   374e4:	ldr	r3, [r4, #28]
   374e8:	ldr	r2, [r4, #36]	; 0x24
   374ec:	cmp	r1, r2
   374f0:	movge	r1, r2
   374f4:	cmp	r1, r3
   374f8:	bgt	37508 <__assert_fail@plt+0x24f14>
   374fc:	b	37b10 <__assert_fail@plt+0x2551c>
   37500:	ldr	r7, [r4, #24]
   37504:	ldr	r0, [r4, #64]	; 0x40
   37508:	ldm	r4, {r2, ip}
   3750c:	add	r2, r2, r3
   37510:	ldrb	r2, [r2, r7]
   37514:	ldrb	r2, [r0, r2]
   37518:	strb	r2, [ip, r3]
   3751c:	add	r3, r3, #1
   37520:	cmp	r1, r3
   37524:	bne	37500 <__assert_fail@plt+0x24f0c>
   37528:	str	r1, [r4, #28]
   3752c:	str	r1, [r4, #32]
   37530:	b	37468 <__assert_fail@plt+0x24e74>
   37534:	ldr	r1, [r4, #48]	; 0x30
   37538:	ldr	r0, [r4, #56]	; 0x38
   3753c:	ldr	r2, [r4, #80]	; 0x50
   37540:	b	37440 <__assert_fail@plt+0x24e4c>
   37544:	cmp	r2, #0
   37548:	bne	37a54 <__assert_fail@plt+0x25460>
   3754c:	mov	r1, #0
   37550:	ldr	r9, [r4, #24]
   37554:	ldr	r2, [r4, #80]	; 0x50
   37558:	str	r1, [r4, #28]
   3755c:	cmp	r2, #1
   37560:	ble	37878 <__assert_fail@plt+0x25284>
   37564:	ldrb	r1, [r4, #73]	; 0x49
   37568:	cmp	r1, #0
   3756c:	beq	375e0 <__assert_fail@plt+0x24fec>
   37570:	ldr	r0, [r4]
   37574:	sub	r2, r5, r2
   37578:	sub	r1, r5, #1
   3757c:	add	ip, r0, r9
   37580:	add	r2, ip, r2
   37584:	add	lr, ip, r1
   37588:	cmp	r0, r2
   3758c:	movcc	r0, r2
   37590:	str	lr, [sp, #4]
   37594:	cmp	lr, r0
   37598:	str	ip, [sp, #8]
   3759c:	bcc	375e0 <__assert_fail@plt+0x24fec>
   375a0:	ldrb	r2, [ip, r1]
   375a4:	and	r2, r2, #192	; 0xc0
   375a8:	cmp	r2, #128	; 0x80
   375ac:	bne	379c8 <__assert_fail@plt+0x253d4>
   375b0:	ldmib	sp, {r2, fp}
   375b4:	sub	r0, r0, #1
   375b8:	sub	r2, r2, #1
   375bc:	b	375d4 <__assert_fail@plt+0x24fe0>
   375c0:	ldrb	r1, [sl]
   375c4:	sub	r2, r2, #1
   375c8:	and	r1, r1, #192	; 0xc0
   375cc:	cmp	r1, #128	; 0x80
   375d0:	bne	379c4 <__assert_fail@plt+0x253d0>
   375d4:	cmp	r0, r2
   375d8:	mov	sl, r2
   375dc:	bne	375c0 <__assert_fail@plt+0x24fcc>
   375e0:	add	r9, r9, r3
   375e4:	cmp	r7, r9
   375e8:	ble	378f8 <__assert_fail@plt+0x25304>
   375ec:	add	fp, r4, #16
   375f0:	add	sl, sp, #24
   375f4:	str	r7, [sp, #4]
   375f8:	str	r5, [sp, #8]
   375fc:	str	r6, [sp, #12]
   37600:	ldr	r1, [r4]
   37604:	mov	r3, fp
   37608:	mov	r0, sl
   3760c:	ldr	r5, [r4, #44]	; 0x2c
   37610:	ldrd	r6, [fp]
   37614:	add	r1, r1, r9
   37618:	sub	r5, r5, r9
   3761c:	mov	r2, r5
   37620:	strd	r6, [sp, #32]
   37624:	bl	31b90 <__assert_fail@plt+0x1f59c>
   37628:	sub	r3, r0, #1
   3762c:	cmn	r3, #4
   37630:	ldrls	r1, [sp, #24]
   37634:	bhi	37a80 <__assert_fail@plt+0x2548c>
   37638:	add	r9, r9, r0
   3763c:	ldr	r3, [sp, #4]
   37640:	cmp	r3, r9
   37644:	bgt	37600 <__assert_fail@plt+0x2500c>
   37648:	ldr	r7, [sp, #4]
   3764c:	cmn	r1, #1
   37650:	ldr	r5, [sp, #8]
   37654:	ldr	r6, [sp, #12]
   37658:	sub	r9, r9, r7
   3765c:	str	r9, [r4, #28]
   37660:	beq	37900 <__assert_fail@plt+0x2530c>
   37664:	ldrb	r3, [r4, #78]	; 0x4e
   37668:	cmp	r3, #0
   3766c:	bne	37ae0 <__assert_fail@plt+0x254ec>
   37670:	cmp	r1, #10
   37674:	movne	r3, #0
   37678:	bne	3768c <__assert_fail@plt+0x25098>
   3767c:	ldrb	r3, [r4, #77]	; 0x4d
   37680:	cmp	r3, #0
   37684:	moveq	r3, #0
   37688:	movne	r3, #2
   3768c:	str	r3, [r4, #60]	; 0x3c
   37690:	cmp	r9, #0
   37694:	bne	37aa4 <__assert_fail@plt+0x254b0>
   37698:	ldrb	r3, [r4, #75]	; 0x4b
   3769c:	str	r9, [r4, #32]
   376a0:	ldr	r1, [r4, #48]	; 0x30
   376a4:	ldr	r0, [r4, #56]	; 0x38
   376a8:	ldr	r2, [r4, #80]	; 0x50
   376ac:	sub	r1, r1, r5
   376b0:	sub	r0, r0, r5
   376b4:	b	3742c <__assert_fail@plt+0x24e38>
   376b8:	mov	r3, r6
   376bc:	mov	r2, #0
   376c0:	ldr	r9, [r4, #12]
   376c4:	b	376d8 <__assert_fail@plt+0x250e4>
   376c8:	bge	3786c <__assert_fail@plt+0x25278>
   376cc:	add	r2, r1, #1
   376d0:	cmp	r2, r3
   376d4:	bge	37714 <__assert_fail@plt+0x25120>
   376d8:	add	r1, r2, r3
   376dc:	add	r1, r1, r1, lsr #31
   376e0:	asr	r1, r1, #1
   376e4:	ldr	r0, [r9, r1, lsl #2]
   376e8:	cmp	r0, r5
   376ec:	ble	376c8 <__assert_fail@plt+0x250d4>
   376f0:	mov	r3, r1
   376f4:	b	376d0 <__assert_fail@plt+0x250dc>
   376f8:	ldr	r0, [r4, #4]
   376fc:	add	r1, r0, r5
   37700:	bl	11fb8 <memmove@plt>
   37704:	ldr	r2, [r4, #28]
   37708:	ldrb	r3, [r4, #75]	; 0x4b
   3770c:	sub	r2, r2, r5
   37710:	b	37408 <__assert_fail@plt+0x24e14>
   37714:	cmp	r0, r5
   37718:	addlt	sl, r1, #1
   3771c:	bge	3786c <__assert_fail@plt+0x25278>
   37720:	mov	r2, r8
   37724:	mov	r0, r4
   37728:	bl	36fec <__assert_fail@plt+0x249f8>
   3772c:	sub	r3, r5, sl
   37730:	cmp	r5, r6
   37734:	str	r0, [r4, #60]	; 0x3c
   37738:	clz	r3, r3
   3773c:	lsr	r3, r3, #5
   37740:	movge	r3, #0
   37744:	cmp	r3, #0
   37748:	bne	37918 <__assert_fail@plt+0x25324>
   3774c:	ldr	r1, [r4, #44]	; 0x2c
   37750:	mov	r3, #0
   37754:	cmp	sl, #0
   37758:	ldr	r0, [r4, #52]	; 0x34
   3775c:	strb	r3, [r4, #76]	; 0x4c
   37760:	sub	r1, r1, r7
   37764:	add	r2, r1, r5
   37768:	sub	r0, r0, r7
   3776c:	add	r3, r0, r5
   37770:	str	r2, [r4, #48]	; 0x30
   37774:	str	r3, [r4, #56]	; 0x38
   37778:	ble	377a8 <__assert_fail@plt+0x251b4>
   3777c:	sub	r3, sl, #-1073741823	; 0xc0000001
   37780:	ldr	r2, [r9, r3, lsl #2]
   37784:	add	r3, r9, r3, lsl #2
   37788:	cmp	r2, r5
   3778c:	beq	377a0 <__assert_fail@plt+0x251ac>
   37790:	b	377a8 <__assert_fail@plt+0x251b4>
   37794:	ldr	r2, [r3, #-4]!
   37798:	cmp	r2, r5
   3779c:	bne	377a8 <__assert_fail@plt+0x251b4>
   377a0:	subs	sl, sl, #1
   377a4:	bne	37794 <__assert_fail@plt+0x251a0>
   377a8:	cmp	sl, r6
   377ac:	bge	37804 <__assert_fail@plt+0x25210>
   377b0:	ldr	r3, [r4, #8]
   377b4:	lsl	ip, sl, #2
   377b8:	ldr	r2, [r3, sl, lsl #2]
   377bc:	add	r3, r3, ip
   377c0:	cmn	r2, #1
   377c4:	beq	377d8 <__assert_fail@plt+0x251e4>
   377c8:	b	3780c <__assert_fail@plt+0x25218>
   377cc:	ldr	r2, [r3, #4]!
   377d0:	cmn	r2, #1
   377d4:	bne	3780c <__assert_fail@plt+0x25218>
   377d8:	add	sl, sl, #1
   377dc:	cmp	sl, r6
   377e0:	lsl	ip, sl, #2
   377e4:	bne	377cc <__assert_fail@plt+0x251d8>
   377e8:	mov	r3, #0
   377ec:	mov	r2, r3
   377f0:	str	r3, [r4, #28]
   377f4:	ldrb	r3, [r4, #75]	; 0x4b
   377f8:	str	r2, [r4, #32]
   377fc:	ldr	r2, [r4, #80]	; 0x50
   37800:	b	3742c <__assert_fail@plt+0x24e38>
   37804:	beq	377e8 <__assert_fail@plt+0x251f4>
   37808:	lsl	ip, sl, #2
   3780c:	ldr	r2, [r9, ip]
   37810:	sub	r2, r2, r5
   37814:	cmp	r2, #0
   37818:	str	r2, [r4, #28]
   3781c:	beq	377f4 <__assert_fail@plt+0x25200>
   37820:	ble	37848 <__assert_fail@plt+0x25254>
   37824:	ldr	r1, [r4, #8]
   37828:	mov	r3, #0
   3782c:	mvn	r0, #0
   37830:	sub	r1, r1, #4
   37834:	str	r0, [r1, #4]!
   37838:	add	r3, r3, #1
   3783c:	ldr	r2, [r4, #28]
   37840:	cmp	r2, r3
   37844:	bgt	37834 <__assert_fail@plt+0x25240>
   37848:	mov	r1, #255	; 0xff
   3784c:	ldr	r0, [r4, #4]
   37850:	bl	12378 <memset@plt>
   37854:	ldr	r2, [r4, #28]
   37858:	ldr	r1, [r4, #48]	; 0x30
   3785c:	ldr	r0, [r4, #56]	; 0x38
   37860:	sub	r1, r1, r5
   37864:	sub	r0, r0, r5
   37868:	b	377f4 <__assert_fail@plt+0x25200>
   3786c:	mov	sl, r1
   37870:	sub	r1, r1, #1
   37874:	b	37720 <__assert_fail@plt+0x2512c>
   37878:	ldr	r3, [r4]
   3787c:	ldr	ip, [r4, #64]	; 0x40
   37880:	add	r3, r3, r5
   37884:	add	r9, r3, r9
   37888:	ldrb	r0, [r9, #-1]
   3788c:	cmp	ip, #0
   37890:	str	r1, [r4, #32]
   37894:	ldrbne	r0, [ip, r0]
   37898:	ldr	ip, [r4, #68]	; 0x44
   3789c:	asr	r1, r0, #5
   378a0:	and	r3, r0, #31
   378a4:	ldr	r1, [ip, r1, lsl #2]
   378a8:	lsr	r3, r1, r3
   378ac:	ands	r1, r3, #1
   378b0:	bne	378c8 <__assert_fail@plt+0x252d4>
   378b4:	cmp	r0, #10
   378b8:	bne	378c8 <__assert_fail@plt+0x252d4>
   378bc:	ldrb	r3, [r4, #77]	; 0x4d
   378c0:	cmp	r3, #0
   378c4:	movne	r1, #2
   378c8:	ldrb	r3, [r4, #75]	; 0x4b
   378cc:	str	r1, [r4, #60]	; 0x3c
   378d0:	ldr	r1, [r4, #48]	; 0x30
   378d4:	ldr	r0, [r4, #56]	; 0x38
   378d8:	cmp	r3, #0
   378dc:	sub	r1, r1, r5
   378e0:	sub	r0, r0, r5
   378e4:	beq	37434 <__assert_fail@plt+0x24e40>
   378e8:	str	r7, [r4, #24]
   378ec:	str	r1, [r4, #48]	; 0x30
   378f0:	str	r0, [r4, #56]	; 0x38
   378f4:	b	374c0 <__assert_fail@plt+0x24ecc>
   378f8:	sub	r9, r9, r7
   378fc:	str	r9, [r4, #28]
   37900:	mov	r2, r8
   37904:	sub	r1, r6, #1
   37908:	mov	r0, r4
   3790c:	bl	36fec <__assert_fail@plt+0x249f8>
   37910:	str	r0, [r4, #60]	; 0x3c
   37914:	b	37690 <__assert_fail@plt+0x2509c>
   37918:	ldr	r3, [r9, sl, lsl #2]
   3791c:	cmp	r3, r5
   37920:	bne	3774c <__assert_fail@plt+0x25158>
   37924:	ldr	r0, [r4, #8]
   37928:	lsl	r8, r5, #2
   3792c:	sub	r2, r6, r5
   37930:	lsl	r2, r2, #2
   37934:	add	r1, r0, r8
   37938:	bl	11fb8 <memmove@plt>
   3793c:	ldr	r0, [r4, #4]
   37940:	ldr	r2, [r4, #28]
   37944:	add	r1, r0, r5
   37948:	sub	r2, r2, r5
   3794c:	bl	11fb8 <memmove@plt>
   37950:	ldr	r3, [r4, #28]
   37954:	ldr	r2, [r4, #32]
   37958:	sub	r3, r3, r5
   3795c:	cmp	r3, #0
   37960:	sub	r2, r2, r5
   37964:	str	r3, [r4, #28]
   37968:	str	r2, [r4, #32]
   3796c:	ble	3799c <__assert_fail@plt+0x253a8>
   37970:	ldr	r1, [r4, #12]
   37974:	mov	r2, #0
   37978:	add	r0, r1, r8
   3797c:	sub	r1, r1, #4
   37980:	ldr	r3, [r0], #4
   37984:	add	r2, r2, #1
   37988:	sub	r3, r3, r5
   3798c:	str	r3, [r1, #4]!
   37990:	ldr	r3, [r4, #28]
   37994:	cmp	r3, r2
   37998:	bgt	37980 <__assert_fail@plt+0x2538c>
   3799c:	ldr	r1, [r4, #48]	; 0x30
   379a0:	ldr	r0, [r4, #56]	; 0x38
   379a4:	ldrb	r3, [r4, #75]	; 0x4b
   379a8:	sub	r1, r1, r5
   379ac:	ldr	r2, [r4, #80]	; 0x50
   379b0:	sub	r0, r0, r5
   379b4:	b	3742c <__assert_fail@plt+0x24e38>
   379b8:	mov	r0, r4
   379bc:	bl	335c0 <__assert_fail@plt+0x20fcc>
   379c0:	b	37468 <__assert_fail@plt+0x24e74>
   379c4:	strd	sl, [sp, #4]
   379c8:	ldr	r1, [sp, #8]
   379cc:	ldr	r2, [r4, #48]	; 0x30
   379d0:	ldr	r3, [r4, #64]	; 0x40
   379d4:	add	r2, r1, r2
   379d8:	ldr	r1, [sp, #4]
   379dc:	cmp	r3, #0
   379e0:	sub	r2, r2, r1
   379e4:	ldreq	r1, [sp, #4]
   379e8:	bne	37b30 <__assert_fail@plt+0x2553c>
   379ec:	mov	sl, #0
   379f0:	mov	fp, #0
   379f4:	add	r3, sp, #32
   379f8:	add	r0, sp, #20
   379fc:	strd	sl, [sp, #32]
   37a00:	bl	31b90 <__assert_fail@plt+0x1f59c>
   37a04:	ldr	r3, [sp, #8]
   37a08:	add	r9, r3, r5
   37a0c:	ldr	r3, [sp, #4]
   37a10:	sub	r9, r9, r3
   37a14:	cmp	r0, r9
   37a18:	bcc	37a24 <__assert_fail@plt+0x25430>
   37a1c:	cmn	r0, #3
   37a20:	bls	37a30 <__assert_fail@plt+0x2543c>
   37a24:	ldr	r9, [r4, #24]
   37a28:	ldr	r3, [r4, #32]
   37a2c:	b	375e0 <__assert_fail@plt+0x24fec>
   37a30:	ldr	r1, [sp, #20]
   37a34:	sub	r9, r0, r9
   37a38:	mov	r2, #0
   37a3c:	mov	r3, #0
   37a40:	strd	r2, [r4, #16]
   37a44:	str	r9, [r4, #28]
   37a48:	cmn	r1, #1
   37a4c:	bne	37664 <__assert_fail@plt+0x25070>
   37a50:	b	37a24 <__assert_fail@plt+0x25430>
   37a54:	ldr	r1, [r4, #44]	; 0x2c
   37a58:	mov	r0, #0
   37a5c:	ldr	r2, [r4, #52]	; 0x34
   37a60:	strb	r0, [r4, #76]	; 0x4c
   37a64:	sub	r1, r1, r7
   37a68:	add	r1, r1, r5
   37a6c:	sub	r2, r2, r7
   37a70:	add	r2, r2, r5
   37a74:	str	r1, [r4, #48]	; 0x30
   37a78:	str	r2, [r4, #56]	; 0x38
   37a7c:	b	3754c <__assert_fail@plt+0x24f58>
   37a80:	mov	r1, #0
   37a84:	cmp	r5, r1
   37a88:	cmpne	r0, r1
   37a8c:	mov	r0, #1
   37a90:	ldrne	r3, [r4]
   37a94:	ldrbne	r1, [r3, r9]
   37a98:	ldrd	r2, [sp, #32]
   37a9c:	strd	r2, [fp]
   37aa0:	b	37638 <__assert_fail@plt+0x25044>
   37aa4:	ble	37acc <__assert_fail@plt+0x254d8>
   37aa8:	ldr	r2, [r4, #8]
   37aac:	mov	r3, #0
   37ab0:	mvn	r1, #0
   37ab4:	sub	r2, r2, #4
   37ab8:	str	r1, [r2, #4]!
   37abc:	add	r3, r3, #1
   37ac0:	ldr	r9, [r4, #28]
   37ac4:	cmp	r9, r3
   37ac8:	bgt	37ab8 <__assert_fail@plt+0x254c4>
   37acc:	ldrb	r3, [r4, #75]	; 0x4b
   37ad0:	cmp	r3, #0
   37ad4:	bne	37b18 <__assert_fail@plt+0x25524>
   37ad8:	ldr	r9, [r4, #28]
   37adc:	b	3769c <__assert_fail@plt+0x250a8>
   37ae0:	mov	r0, r1
   37ae4:	str	r1, [sp, #4]
   37ae8:	bl	12354 <iswalnum@plt>
   37aec:	ldr	r1, [sp, #4]
   37af0:	subs	r3, r1, #95	; 0x5f
   37af4:	movne	r3, #1
   37af8:	cmp	r0, #0
   37afc:	movne	r3, #0
   37b00:	cmp	r3, #0
   37b04:	moveq	r3, #1
   37b08:	beq	3768c <__assert_fail@plt+0x25098>
   37b0c:	b	37670 <__assert_fail@plt+0x2507c>
   37b10:	mov	r1, r3
   37b14:	b	37528 <__assert_fail@plt+0x24f34>
   37b18:	mov	r2, r9
   37b1c:	mov	r1, #255	; 0xff
   37b20:	ldr	r0, [r4, #4]
   37b24:	bl	12378 <memset@plt>
   37b28:	ldrb	r3, [r4, #75]	; 0x4b
   37b2c:	b	37ad8 <__assert_fail@plt+0x254e4>
   37b30:	cmp	r2, #6
   37b34:	movlt	r1, r2
   37b38:	movge	r1, #6
   37b3c:	cmp	r2, #0
   37b40:	ble	37b80 <__assert_fail@plt+0x2558c>
   37b44:	ldrd	sl, [sp, #4]
   37b48:	add	r0, sp, #24
   37b4c:	mov	ip, r0
   37b50:	mov	lr, r0
   37b54:	sub	r0, r1, #1
   37b58:	add	r0, ip, r0
   37b5c:	add	r1, sl, r1
   37b60:	ldrb	ip, [r1, #-1]!
   37b64:	ldrb	ip, [r3, ip]
   37b68:	cmp	sl, r1
   37b6c:	strb	ip, [r0], #-1
   37b70:	bne	37b60 <__assert_fail@plt+0x2556c>
   37b74:	strd	sl, [sp, #4]
   37b78:	mov	r1, lr
   37b7c:	b	379ec <__assert_fail@plt+0x253f8>
   37b80:	add	r3, sp, #24
   37b84:	mov	lr, r3
   37b88:	b	37b78 <__assert_fail@plt+0x25584>
   37b8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   37b90:	strd	r6, [sp, #8]
   37b94:	strd	sl, [sp, #24]
   37b98:	ldr	fp, [r1]
   37b9c:	strd	r8, [sp, #16]
   37ba0:	str	lr, [sp, #32]
   37ba4:	sub	sp, sp, #12
   37ba8:	ldr	r6, [r0, #84]	; 0x54
   37bac:	cmp	fp, #0
   37bb0:	ble	37c6c <__assert_fail@plt+0x25678>
   37bb4:	mov	r8, r3
   37bb8:	mov	r9, r2
   37bbc:	mov	sl, r0
   37bc0:	mov	r7, r1
   37bc4:	mov	r4, #0
   37bc8:	b	37bd4 <__assert_fail@plt+0x255e0>
   37bcc:	cmp	r4, fp
   37bd0:	bge	37c6c <__assert_fail@plt+0x25678>
   37bd4:	ldr	r3, [r9]
   37bd8:	ldr	ip, [r6]
   37bdc:	ldr	r5, [r3, r4, lsl #2]
   37be0:	add	r4, r4, #1
   37be4:	add	lr, ip, r5, lsl #3
   37be8:	ldrb	lr, [lr, #4]
   37bec:	cmp	lr, #8
   37bf0:	bne	37bcc <__assert_fail@plt+0x255d8>
   37bf4:	ldr	r3, [ip, r5, lsl #3]
   37bf8:	cmp	r3, #31
   37bfc:	bgt	37bcc <__assert_fail@plt+0x255d8>
   37c00:	ldr	r2, [r6, #80]	; 0x50
   37c04:	lsr	r3, r2, r3
   37c08:	tst	r3, #1
   37c0c:	beq	37bcc <__assert_fail@plt+0x255d8>
   37c10:	ldr	fp, [sl, #124]	; 0x7c
   37c14:	ldr	r3, [sl, #128]	; 0x80
   37c18:	ldr	r2, [sl, #132]	; 0x84
   37c1c:	cmp	r3, fp
   37c20:	beq	37c94 <__assert_fail@plt+0x256a0>
   37c24:	mov	r1, #24
   37c28:	mov	r0, #1
   37c2c:	str	r2, [sp, #4]
   37c30:	bl	2f080 <__assert_fail@plt+0x1ca8c>
   37c34:	ldr	r2, [sp, #4]
   37c38:	ldr	r3, [sl, #124]	; 0x7c
   37c3c:	str	r0, [r2, fp, lsl #2]
   37c40:	ldr	r2, [sl, #132]	; 0x84
   37c44:	add	r1, r3, #1
   37c48:	ldr	r3, [r2, r3, lsl #2]
   37c4c:	cmp	r3, #0
   37c50:	beq	37c8c <__assert_fail@plt+0x25698>
   37c54:	str	r5, [r3, #4]
   37c58:	str	r1, [sl, #124]	; 0x7c
   37c5c:	str	r8, [r3]
   37c60:	ldr	fp, [r7]
   37c64:	cmp	r4, fp
   37c68:	blt	37bd4 <__assert_fail@plt+0x255e0>
   37c6c:	mov	r0, #0
   37c70:	add	sp, sp, #12
   37c74:	ldrd	r4, [sp]
   37c78:	ldrd	r6, [sp, #8]
   37c7c:	ldrd	r8, [sp, #16]
   37c80:	ldrd	sl, [sp, #24]
   37c84:	add	sp, sp, #32
   37c88:	pop	{pc}		; (ldr pc, [sp], #4)
   37c8c:	mov	r0, #12
   37c90:	b	37c70 <__assert_fail@plt+0x2567c>
   37c94:	mov	r0, r2
   37c98:	lsl	r1, fp, #3
   37c9c:	bl	32624 <__assert_fail@plt+0x20030>
   37ca0:	subs	r2, r0, #0
   37ca4:	lsl	r3, fp, #1
   37ca8:	beq	37c8c <__assert_fail@plt+0x25698>
   37cac:	str	r3, [sl, #128]	; 0x80
   37cb0:	str	r2, [sl, #132]	; 0x84
   37cb4:	ldr	fp, [sl, #124]	; 0x7c
   37cb8:	b	37c24 <__assert_fail@plt+0x25630>
   37cbc:	strd	r4, [sp, #-16]!
   37cc0:	mov	r5, r0
   37cc4:	mov	r0, r1
   37cc8:	mov	r4, r1
   37ccc:	str	r6, [sp, #8]
   37cd0:	str	lr, [sp, #12]
   37cd4:	bl	12300 <strlen@plt>
   37cd8:	cmp	r0, #1
   37cdc:	bne	37d10 <__assert_fail@plt+0x2571c>
   37ce0:	ldrb	r3, [r4]
   37ce4:	mov	ip, #0
   37ce8:	asr	r1, r3, #5
   37cec:	and	r3, r3, #31
   37cf0:	ldr	r2, [r5, r1, lsl #2]
   37cf4:	orr	r3, r2, r0, lsl r3
   37cf8:	str	r3, [r5, r1, lsl #2]
   37cfc:	ldrd	r4, [sp]
   37d00:	mov	r0, ip
   37d04:	ldr	r6, [sp, #8]
   37d08:	add	sp, sp, #12
   37d0c:	pop	{pc}		; (ldr pc, [sp], #4)
   37d10:	mov	ip, #3
   37d14:	b	37cfc <__assert_fail@plt+0x25708>
   37d18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   37d1c:	mov	r5, r1
   37d20:	strd	r6, [sp, #8]
   37d24:	mov	r6, r0
   37d28:	strd	r8, [sp, #16]
   37d2c:	mov	r8, r3
   37d30:	strd	sl, [sp, #24]
   37d34:	mov	sl, r2
   37d38:	str	lr, [sp, #32]
   37d3c:	sub	sp, sp, #4
   37d40:	ldr	r9, [sp, #40]	; 0x28
   37d44:	ldr	ip, [sp, #48]	; 0x30
   37d48:	ldr	r7, [sp, #44]	; 0x2c
   37d4c:	tst	ip, #4194304	; 0x400000
   37d50:	beq	37d74 <__assert_fail@plt+0x25780>
   37d54:	mov	r0, r7
   37d58:	movw	r1, #34328	; 0x8618
   37d5c:	movt	r1, #4
   37d60:	bl	11f40 <strcmp@plt>
   37d64:	cmp	r0, #0
   37d68:	movweq	r7, #34320	; 0x8610
   37d6c:	movteq	r7, #4
   37d70:	bne	37e78 <__assert_fail@plt+0x25884>
   37d74:	ldr	r4, [r8]
   37d78:	ldr	r3, [r9]
   37d7c:	ldr	fp, [sl]
   37d80:	cmp	r3, r4
   37d84:	beq	37f5c <__assert_fail@plt+0x25968>
   37d88:	add	r3, r4, #1
   37d8c:	mov	r0, r7
   37d90:	str	r3, [r8]
   37d94:	bl	11ee0 <wctype@plt>
   37d98:	movw	r1, #34344	; 0x8628
   37d9c:	movt	r1, #4
   37da0:	str	r0, [fp, r4, lsl #2]
   37da4:	mov	r0, r7
   37da8:	bl	11f40 <strcmp@plt>
   37dac:	subs	r4, r0, #0
   37db0:	beq	37e30 <__assert_fail@plt+0x2583c>
   37db4:	movw	r1, #34352	; 0x8630
   37db8:	movt	r1, #4
   37dbc:	mov	r0, r7
   37dc0:	bl	11f40 <strcmp@plt>
   37dc4:	subs	r4, r0, #0
   37dc8:	bne	37e9c <__assert_fail@plt+0x258a8>
   37dcc:	bl	122b8 <__ctype_b_loc@plt>
   37dd0:	ldr	r3, [r0]
   37dd4:	cmp	r6, #0
   37dd8:	moveq	ip, #1
   37ddc:	sub	r3, r3, #2
   37de0:	bne	38084 <__assert_fail@plt+0x25a90>
   37de4:	ldrh	r2, [r3, #2]!
   37de8:	asr	r1, r4, #5
   37dec:	and	r0, r4, #31
   37df0:	add	r4, r4, #1
   37df4:	tst	r2, #2
   37df8:	beq	37e08 <__assert_fail@plt+0x25814>
   37dfc:	ldr	r2, [r5, r1, lsl #2]
   37e00:	orr	r2, r2, ip, lsl r0
   37e04:	str	r2, [r5, r1, lsl #2]
   37e08:	cmp	r4, #256	; 0x100
   37e0c:	bne	37de4 <__assert_fail@plt+0x257f0>
   37e10:	mov	r0, #0
   37e14:	add	sp, sp, #4
   37e18:	ldrd	r4, [sp]
   37e1c:	ldrd	r6, [sp, #8]
   37e20:	ldrd	r8, [sp, #16]
   37e24:	ldrd	sl, [sp, #24]
   37e28:	add	sp, sp, #32
   37e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   37e30:	bl	122b8 <__ctype_b_loc@plt>
   37e34:	ldr	r3, [r0]
   37e38:	cmp	r6, #0
   37e3c:	moveq	lr, #1
   37e40:	sub	r3, r3, #2
   37e44:	bne	38048 <__assert_fail@plt+0x25a54>
   37e48:	ldrh	r0, [r3, #2]!
   37e4c:	asr	r2, r4, #5
   37e50:	and	ip, r4, #31
   37e54:	add	r4, r4, #1
   37e58:	tst	r0, #8
   37e5c:	beq	37e6c <__assert_fail@plt+0x25878>
   37e60:	ldr	r1, [r5, r2, lsl #2]
   37e64:	orr	r1, r1, lr, lsl ip
   37e68:	str	r1, [r5, r2, lsl #2]
   37e6c:	cmp	r4, #256	; 0x100
   37e70:	bne	37e48 <__assert_fail@plt+0x25854>
   37e74:	b	37e10 <__assert_fail@plt+0x2581c>
   37e78:	mov	r0, r7
   37e7c:	movw	r1, #34336	; 0x8620
   37e80:	movt	r1, #4
   37e84:	bl	11f40 <strcmp@plt>
   37e88:	cmp	r0, #0
   37e8c:	movw	r3, #34320	; 0x8610
   37e90:	movt	r3, #4
   37e94:	moveq	r7, r3
   37e98:	b	37d74 <__assert_fail@plt+0x25780>
   37e9c:	movw	r1, #34336	; 0x8620
   37ea0:	movt	r1, #4
   37ea4:	mov	r0, r7
   37ea8:	bl	11f40 <strcmp@plt>
   37eac:	subs	r4, r0, #0
   37eb0:	beq	37f14 <__assert_fail@plt+0x25920>
   37eb4:	movw	r1, #34360	; 0x8638
   37eb8:	movt	r1, #4
   37ebc:	mov	r0, r7
   37ec0:	bl	11f40 <strcmp@plt>
   37ec4:	subs	r4, r0, #0
   37ec8:	bne	37f88 <__assert_fail@plt+0x25994>
   37ecc:	bl	122b8 <__ctype_b_loc@plt>
   37ed0:	ldr	r3, [r0]
   37ed4:	cmp	r6, #0
   37ed8:	moveq	ip, #1
   37edc:	sub	r3, r3, #2
   37ee0:	bne	38260 <__assert_fail@plt+0x25c6c>
   37ee4:	ldrh	r2, [r3, #2]!
   37ee8:	asr	r1, r4, #5
   37eec:	and	r0, r4, #31
   37ef0:	add	r4, r4, #1
   37ef4:	tst	r2, #8192	; 0x2000
   37ef8:	beq	37f08 <__assert_fail@plt+0x25914>
   37efc:	ldr	r2, [r5, r1, lsl #2]
   37f00:	orr	r2, r2, ip, lsl r0
   37f04:	str	r2, [r5, r1, lsl #2]
   37f08:	cmp	r4, #256	; 0x100
   37f0c:	bne	37ee4 <__assert_fail@plt+0x258f0>
   37f10:	b	37e10 <__assert_fail@plt+0x2581c>
   37f14:	bl	122b8 <__ctype_b_loc@plt>
   37f18:	ldr	r3, [r0]
   37f1c:	cmp	r6, #0
   37f20:	moveq	ip, #1
   37f24:	sub	r3, r3, #2
   37f28:	bne	380c0 <__assert_fail@plt+0x25acc>
   37f2c:	ldrh	r2, [r3, #2]!
   37f30:	asr	r1, r4, #5
   37f34:	and	r0, r4, #31
   37f38:	add	r4, r4, #1
   37f3c:	tst	r2, #512	; 0x200
   37f40:	beq	37f50 <__assert_fail@plt+0x2595c>
   37f44:	ldr	r2, [r5, r1, lsl #2]
   37f48:	orr	r2, r2, ip, lsl r0
   37f4c:	str	r2, [r5, r1, lsl #2]
   37f50:	cmp	r4, #256	; 0x100
   37f54:	bne	37f2c <__assert_fail@plt+0x25938>
   37f58:	b	37e10 <__assert_fail@plt+0x2581c>
   37f5c:	lsl	r4, r4, #1
   37f60:	mov	r0, fp
   37f64:	add	r4, r4, #1
   37f68:	lsl	r1, r4, #2
   37f6c:	bl	32624 <__assert_fail@plt+0x20030>
   37f70:	subs	fp, r0, #0
   37f74:	beq	381bc <__assert_fail@plt+0x25bc8>
   37f78:	str	fp, [sl]
   37f7c:	str	r4, [r9]
   37f80:	ldr	r4, [r8]
   37f84:	b	37d88 <__assert_fail@plt+0x25794>
   37f88:	movw	r1, #34320	; 0x8610
   37f8c:	movt	r1, #4
   37f90:	mov	r0, r7
   37f94:	bl	11f40 <strcmp@plt>
   37f98:	subs	r4, r0, #0
   37f9c:	beq	38000 <__assert_fail@plt+0x25a0c>
   37fa0:	movw	r1, #34368	; 0x8640
   37fa4:	movt	r1, #4
   37fa8:	mov	r0, r7
   37fac:	bl	11f40 <strcmp@plt>
   37fb0:	subs	r4, r0, #0
   37fb4:	bne	380fc <__assert_fail@plt+0x25b08>
   37fb8:	bl	122b8 <__ctype_b_loc@plt>
   37fbc:	ldr	r3, [r0]
   37fc0:	cmp	r6, #0
   37fc4:	moveq	ip, #1
   37fc8:	sub	r3, r3, #2
   37fcc:	bne	3829c <__assert_fail@plt+0x25ca8>
   37fd0:	ldrh	r1, [r3, #2]!
   37fd4:	asr	r2, r4, #5
   37fd8:	and	r0, r4, #31
   37fdc:	add	r4, r4, #1
   37fe0:	tst	r1, #2048	; 0x800
   37fe4:	beq	37ff4 <__assert_fail@plt+0x25a00>
   37fe8:	ldr	r1, [r5, r2, lsl #2]
   37fec:	orr	r1, r1, ip, lsl r0
   37ff0:	str	r1, [r5, r2, lsl #2]
   37ff4:	cmp	r4, #256	; 0x100
   37ff8:	bne	37fd0 <__assert_fail@plt+0x259dc>
   37ffc:	b	37e10 <__assert_fail@plt+0x2581c>
   38000:	bl	122b8 <__ctype_b_loc@plt>
   38004:	ldr	r3, [r0]
   38008:	cmp	r6, #0
   3800c:	moveq	ip, #1
   38010:	sub	r3, r3, #2
   38014:	bne	38224 <__assert_fail@plt+0x25c30>
   38018:	ldrh	r2, [r3, #2]!
   3801c:	asr	r1, r4, #5
   38020:	and	r0, r4, #31
   38024:	add	r4, r4, #1
   38028:	tst	r2, #1024	; 0x400
   3802c:	beq	3803c <__assert_fail@plt+0x25a48>
   38030:	ldr	r2, [r5, r1, lsl #2]
   38034:	orr	r2, r2, ip, lsl r0
   38038:	str	r2, [r5, r1, lsl #2]
   3803c:	cmp	r4, #256	; 0x100
   38040:	bne	38018 <__assert_fail@plt+0x25a24>
   38044:	b	37e10 <__assert_fail@plt+0x2581c>
   38048:	add	ip, r6, #256	; 0x100
   3804c:	mov	lr, #1
   38050:	ldrh	r2, [r3, #2]!
   38054:	tst	r2, #8
   38058:	beq	38074 <__assert_fail@plt+0x25a80>
   3805c:	ldrb	r2, [r6]
   38060:	asr	r0, r2, #5
   38064:	and	r2, r2, #31
   38068:	ldr	r1, [r5, r0, lsl #2]
   3806c:	orr	r2, r1, lr, lsl r2
   38070:	str	r2, [r5, r0, lsl #2]
   38074:	add	r6, r6, #1
   38078:	cmp	ip, r6
   3807c:	bne	38050 <__assert_fail@plt+0x25a5c>
   38080:	b	37e10 <__assert_fail@plt+0x2581c>
   38084:	add	ip, r6, #256	; 0x100
   38088:	mov	lr, #1
   3808c:	ldrh	r2, [r3, #2]!
   38090:	tst	r2, #2
   38094:	beq	380b0 <__assert_fail@plt+0x25abc>
   38098:	ldrb	r2, [r6]
   3809c:	asr	r0, r2, #5
   380a0:	and	r2, r2, #31
   380a4:	ldr	r1, [r5, r0, lsl #2]
   380a8:	orr	r2, r1, lr, lsl r2
   380ac:	str	r2, [r5, r0, lsl #2]
   380b0:	add	r6, r6, #1
   380b4:	cmp	ip, r6
   380b8:	bne	3808c <__assert_fail@plt+0x25a98>
   380bc:	b	37e10 <__assert_fail@plt+0x2581c>
   380c0:	add	ip, r6, #256	; 0x100
   380c4:	mov	lr, #1
   380c8:	ldrh	r2, [r3, #2]!
   380cc:	tst	r2, #512	; 0x200
   380d0:	beq	380ec <__assert_fail@plt+0x25af8>
   380d4:	ldrb	r2, [r6]
   380d8:	asr	r0, r2, #5
   380dc:	and	r2, r2, #31
   380e0:	ldr	r1, [r5, r0, lsl #2]
   380e4:	orr	r2, r1, lr, lsl r2
   380e8:	str	r2, [r5, r0, lsl #2]
   380ec:	add	r6, r6, #1
   380f0:	cmp	ip, r6
   380f4:	bne	380c8 <__assert_fail@plt+0x25ad4>
   380f8:	b	37e10 <__assert_fail@plt+0x2581c>
   380fc:	movw	r1, #15088	; 0x3af0
   38100:	movt	r1, #4
   38104:	mov	r0, r7
   38108:	bl	11f40 <strcmp@plt>
   3810c:	subs	r4, r0, #0
   38110:	bne	3815c <__assert_fail@plt+0x25b68>
   38114:	bl	122b8 <__ctype_b_loc@plt>
   38118:	ldr	r3, [r0]
   3811c:	cmp	r6, #0
   38120:	moveq	ip, #1
   38124:	sub	r3, r3, #2
   38128:	bne	384ac <__assert_fail@plt+0x25eb8>
   3812c:	ldrh	r2, [r3, #2]!
   38130:	asr	r1, r4, #5
   38134:	and	r0, r4, #31
   38138:	add	r4, r4, #1
   3813c:	tst	r2, #16384	; 0x4000
   38140:	beq	38150 <__assert_fail@plt+0x25b5c>
   38144:	ldr	r2, [r5, r1, lsl #2]
   38148:	orr	r2, r2, ip, lsl r0
   3814c:	str	r2, [r5, r1, lsl #2]
   38150:	cmp	r4, #256	; 0x100
   38154:	bne	3812c <__assert_fail@plt+0x25b38>
   38158:	b	37e10 <__assert_fail@plt+0x2581c>
   3815c:	movw	r1, #34328	; 0x8618
   38160:	movt	r1, #4
   38164:	mov	r0, r7
   38168:	bl	11f40 <strcmp@plt>
   3816c:	subs	r4, r0, #0
   38170:	bne	381c4 <__assert_fail@plt+0x25bd0>
   38174:	bl	122b8 <__ctype_b_loc@plt>
   38178:	ldr	r3, [r0]
   3817c:	cmp	r6, #0
   38180:	moveq	ip, #1
   38184:	sub	r3, r3, #2
   38188:	bne	38524 <__assert_fail@plt+0x25f30>
   3818c:	ldrh	r2, [r3, #2]!
   38190:	asr	r1, r4, #5
   38194:	and	r0, r4, #31
   38198:	add	r4, r4, #1
   3819c:	tst	r2, #256	; 0x100
   381a0:	beq	381b0 <__assert_fail@plt+0x25bbc>
   381a4:	ldr	r2, [r5, r1, lsl #2]
   381a8:	orr	r2, r2, ip, lsl r0
   381ac:	str	r2, [r5, r1, lsl #2]
   381b0:	cmp	r4, #256	; 0x100
   381b4:	bne	3818c <__assert_fail@plt+0x25b98>
   381b8:	b	37e10 <__assert_fail@plt+0x2581c>
   381bc:	mov	r0, #12
   381c0:	b	37e14 <__assert_fail@plt+0x25820>
   381c4:	movw	r1, #34376	; 0x8648
   381c8:	movt	r1, #4
   381cc:	mov	r0, r7
   381d0:	bl	11f40 <strcmp@plt>
   381d4:	subs	r4, r0, #0
   381d8:	bne	382d8 <__assert_fail@plt+0x25ce4>
   381dc:	bl	122b8 <__ctype_b_loc@plt>
   381e0:	ldr	r3, [r0]
   381e4:	cmp	r6, #0
   381e8:	moveq	ip, #1
   381ec:	sub	r3, r3, #2
   381f0:	bne	384e8 <__assert_fail@plt+0x25ef4>
   381f4:	ldrh	r2, [r3, #2]!
   381f8:	asr	r1, r4, #5
   381fc:	and	r0, r4, #31
   38200:	add	r4, r4, #1
   38204:	tst	r2, #1
   38208:	beq	38218 <__assert_fail@plt+0x25c24>
   3820c:	ldr	r2, [r5, r1, lsl #2]
   38210:	orr	r2, r2, ip, lsl r0
   38214:	str	r2, [r5, r1, lsl #2]
   38218:	cmp	r4, #256	; 0x100
   3821c:	bne	381f4 <__assert_fail@plt+0x25c00>
   38220:	b	37e10 <__assert_fail@plt+0x2581c>
   38224:	add	ip, r6, #256	; 0x100
   38228:	mov	lr, #1
   3822c:	ldrh	r2, [r3, #2]!
   38230:	tst	r2, #1024	; 0x400
   38234:	beq	38250 <__assert_fail@plt+0x25c5c>
   38238:	ldrb	r2, [r6]
   3823c:	asr	r0, r2, #5
   38240:	and	r2, r2, #31
   38244:	ldr	r1, [r5, r0, lsl #2]
   38248:	orr	r2, r1, lr, lsl r2
   3824c:	str	r2, [r5, r0, lsl #2]
   38250:	add	r6, r6, #1
   38254:	cmp	ip, r6
   38258:	bne	3822c <__assert_fail@plt+0x25c38>
   3825c:	b	37e10 <__assert_fail@plt+0x2581c>
   38260:	add	ip, r6, #256	; 0x100
   38264:	mov	lr, #1
   38268:	ldrh	r2, [r3, #2]!
   3826c:	tst	r2, #8192	; 0x2000
   38270:	beq	3828c <__assert_fail@plt+0x25c98>
   38274:	ldrb	r2, [r6]
   38278:	asr	r0, r2, #5
   3827c:	and	r2, r2, #31
   38280:	ldr	r1, [r5, r0, lsl #2]
   38284:	orr	r2, r1, lr, lsl r2
   38288:	str	r2, [r5, r0, lsl #2]
   3828c:	add	r6, r6, #1
   38290:	cmp	r6, ip
   38294:	bne	38268 <__assert_fail@plt+0x25c74>
   38298:	b	37e10 <__assert_fail@plt+0x2581c>
   3829c:	add	r1, r6, #256	; 0x100
   382a0:	mov	lr, #1
   382a4:	ldrh	r2, [r3, #2]!
   382a8:	tst	r2, #2048	; 0x800
   382ac:	beq	382c8 <__assert_fail@plt+0x25cd4>
   382b0:	ldrb	r2, [r6]
   382b4:	asr	ip, r2, #5
   382b8:	and	r2, r2, #31
   382bc:	ldr	r0, [r5, ip, lsl #2]
   382c0:	orr	r2, r0, lr, lsl r2
   382c4:	str	r2, [r5, ip, lsl #2]
   382c8:	add	r6, r6, #1
   382cc:	cmp	r1, r6
   382d0:	bne	382a4 <__assert_fail@plt+0x25cb0>
   382d4:	b	37e10 <__assert_fail@plt+0x2581c>
   382d8:	movw	r1, #34384	; 0x8650
   382dc:	movt	r1, #4
   382e0:	mov	r0, r7
   382e4:	bl	11f40 <strcmp@plt>
   382e8:	subs	r4, r0, #0
   382ec:	bne	38374 <__assert_fail@plt+0x25d80>
   382f0:	bl	122b8 <__ctype_b_loc@plt>
   382f4:	ldr	r3, [r0]
   382f8:	cmp	r6, #0
   382fc:	moveq	r0, #1
   38300:	sub	r3, r3, #2
   38304:	bne	38338 <__assert_fail@plt+0x25d44>
   38308:	ldrsh	r2, [r3, #2]!
   3830c:	asr	r1, r4, #5
   38310:	and	ip, r4, #31
   38314:	add	r4, r4, #1
   38318:	cmp	r2, #0
   3831c:	bge	3832c <__assert_fail@plt+0x25d38>
   38320:	ldr	r2, [r5, r1, lsl #2]
   38324:	orr	r2, r2, r0, lsl ip
   38328:	str	r2, [r5, r1, lsl #2]
   3832c:	cmp	r4, #256	; 0x100
   38330:	bne	38308 <__assert_fail@plt+0x25d14>
   38334:	b	37e10 <__assert_fail@plt+0x2581c>
   38338:	add	lr, r6, #256	; 0x100
   3833c:	mov	ip, #1
   38340:	ldrsh	r2, [r3, #2]!
   38344:	cmp	r2, #0
   38348:	bge	38364 <__assert_fail@plt+0x25d70>
   3834c:	ldrb	r2, [r6]
   38350:	asr	r0, r2, #5
   38354:	and	r2, r2, #31
   38358:	ldr	r1, [r5, r0, lsl #2]
   3835c:	orr	r2, r1, ip, lsl r2
   38360:	str	r2, [r5, r0, lsl #2]
   38364:	add	r6, r6, #1
   38368:	cmp	lr, r6
   3836c:	bne	38340 <__assert_fail@plt+0x25d4c>
   38370:	b	37e10 <__assert_fail@plt+0x2581c>
   38374:	movw	r1, #34392	; 0x8658
   38378:	movt	r1, #4
   3837c:	mov	r0, r7
   38380:	bl	11f40 <strcmp@plt>
   38384:	subs	r4, r0, #0
   38388:	bne	38410 <__assert_fail@plt+0x25e1c>
   3838c:	bl	122b8 <__ctype_b_loc@plt>
   38390:	ldr	r3, [r0]
   38394:	cmp	r6, #0
   38398:	moveq	r0, #1
   3839c:	sub	r3, r3, #2
   383a0:	bne	383d4 <__assert_fail@plt+0x25de0>
   383a4:	ldrh	r2, [r3, #2]!
   383a8:	asr	r1, r4, #5
   383ac:	and	ip, r4, #31
   383b0:	add	r4, r4, #1
   383b4:	tst	r2, #4
   383b8:	beq	383c8 <__assert_fail@plt+0x25dd4>
   383bc:	ldr	r2, [r5, r1, lsl #2]
   383c0:	orr	r2, r2, r0, lsl ip
   383c4:	str	r2, [r5, r1, lsl #2]
   383c8:	cmp	r4, #256	; 0x100
   383cc:	bne	383a4 <__assert_fail@plt+0x25db0>
   383d0:	b	37e10 <__assert_fail@plt+0x2581c>
   383d4:	add	lr, r6, #256	; 0x100
   383d8:	mov	ip, #1
   383dc:	ldrh	r2, [r3, #2]!
   383e0:	tst	r2, #4
   383e4:	beq	38400 <__assert_fail@plt+0x25e0c>
   383e8:	ldrb	r2, [r6]
   383ec:	asr	r0, r2, #5
   383f0:	and	r2, r2, #31
   383f4:	ldr	r1, [r5, r0, lsl #2]
   383f8:	orr	r2, r1, ip, lsl r2
   383fc:	str	r2, [r5, r0, lsl #2]
   38400:	add	r6, r6, #1
   38404:	cmp	r6, lr
   38408:	bne	383dc <__assert_fail@plt+0x25de8>
   3840c:	b	37e10 <__assert_fail@plt+0x2581c>
   38410:	mov	r0, r7
   38414:	movw	r1, #34400	; 0x8660
   38418:	movt	r1, #4
   3841c:	bl	11f40 <strcmp@plt>
   38420:	subs	r4, r0, #0
   38424:	movne	r0, #4
   38428:	bne	37e14 <__assert_fail@plt+0x25820>
   3842c:	bl	122b8 <__ctype_b_loc@plt>
   38430:	ldr	r3, [r0]
   38434:	cmp	r6, #0
   38438:	moveq	r0, #1
   3843c:	sub	r3, r3, #2
   38440:	bne	38474 <__assert_fail@plt+0x25e80>
   38444:	ldrh	r2, [r3, #2]!
   38448:	asr	r1, r4, #5
   3844c:	and	ip, r4, #31
   38450:	add	r4, r4, #1
   38454:	tst	r2, #4096	; 0x1000
   38458:	beq	38468 <__assert_fail@plt+0x25e74>
   3845c:	ldr	r2, [r5, r1, lsl #2]
   38460:	orr	r2, r2, r0, lsl ip
   38464:	str	r2, [r5, r1, lsl #2]
   38468:	cmp	r4, #256	; 0x100
   3846c:	bne	38444 <__assert_fail@plt+0x25e50>
   38470:	b	37e10 <__assert_fail@plt+0x2581c>
   38474:	mov	ip, #1
   38478:	ldrh	r2, [r3, #2]!
   3847c:	tst	r2, #4096	; 0x1000
   38480:	beq	3849c <__assert_fail@plt+0x25ea8>
   38484:	ldrb	r2, [r6, r4]
   38488:	asr	r0, r2, #5
   3848c:	and	r2, r2, #31
   38490:	ldr	r1, [r5, r0, lsl #2]
   38494:	orr	r2, r1, ip, lsl r2
   38498:	str	r2, [r5, r0, lsl #2]
   3849c:	add	r4, r4, #1
   384a0:	cmp	r4, #256	; 0x100
   384a4:	bne	38478 <__assert_fail@plt+0x25e84>
   384a8:	b	37e10 <__assert_fail@plt+0x2581c>
   384ac:	add	lr, r6, #256	; 0x100
   384b0:	mov	ip, #1
   384b4:	ldrh	r2, [r3, #2]!
   384b8:	tst	r2, #16384	; 0x4000
   384bc:	beq	384d8 <__assert_fail@plt+0x25ee4>
   384c0:	ldrb	r2, [r6]
   384c4:	asr	r0, r2, #5
   384c8:	and	r2, r2, #31
   384cc:	ldr	r1, [r5, r0, lsl #2]
   384d0:	orr	r2, r1, ip, lsl r2
   384d4:	str	r2, [r5, r0, lsl #2]
   384d8:	add	r6, r6, #1
   384dc:	cmp	lr, r6
   384e0:	bne	384b4 <__assert_fail@plt+0x25ec0>
   384e4:	b	37e10 <__assert_fail@plt+0x2581c>
   384e8:	add	lr, r6, #256	; 0x100
   384ec:	mov	ip, #1
   384f0:	ldrh	r2, [r3, #2]!
   384f4:	tst	r2, #1
   384f8:	beq	38514 <__assert_fail@plt+0x25f20>
   384fc:	ldrb	r2, [r6]
   38500:	asr	r0, r2, #5
   38504:	and	r2, r2, #31
   38508:	ldr	r1, [r5, r0, lsl #2]
   3850c:	orr	r2, r1, ip, lsl r2
   38510:	str	r2, [r5, r0, lsl #2]
   38514:	add	r6, r6, #1
   38518:	cmp	lr, r6
   3851c:	bne	384f0 <__assert_fail@plt+0x25efc>
   38520:	b	37e10 <__assert_fail@plt+0x2581c>
   38524:	add	lr, r6, #256	; 0x100
   38528:	mov	ip, #1
   3852c:	ldrh	r2, [r3, #2]!
   38530:	tst	r2, #256	; 0x100
   38534:	beq	38550 <__assert_fail@plt+0x25f5c>
   38538:	ldrb	r2, [r6]
   3853c:	asr	r0, r2, #5
   38540:	and	r2, r2, #31
   38544:	ldr	r1, [r5, r0, lsl #2]
   38548:	orr	r2, r1, ip, lsl r2
   3854c:	str	r2, [r5, r0, lsl #2]
   38550:	add	r6, r6, #1
   38554:	cmp	r6, lr
   38558:	bne	3852c <__assert_fail@plt+0x25f38>
   3855c:	b	37e10 <__assert_fail@plt+0x2581c>
   38560:	strd	r4, [sp, #-36]!	; 0xffffffdc
   38564:	mov	r5, r3
   38568:	strd	r6, [sp, #8]
   3856c:	mov	r6, r0
   38570:	mov	r0, #32
   38574:	strd	r8, [sp, #16]
   38578:	mov	r9, #0
   3857c:	strd	sl, [sp, #24]
   38580:	mov	fp, r1
   38584:	mov	r1, #1
   38588:	str	lr, [sp, #32]
   3858c:	sub	sp, sp, #44	; 0x2c
   38590:	mov	sl, r2
   38594:	ldrb	r8, [sp, #80]	; 0x50
   38598:	str	r9, [sp, #20]
   3859c:	bl	2f080 <__assert_fail@plt+0x1ca8c>
   385a0:	subs	r4, r0, #0
   385a4:	beq	3877c <__assert_fail@plt+0x26188>
   385a8:	mov	r1, #1
   385ac:	mov	r0, #40	; 0x28
   385b0:	bl	2f080 <__assert_fail@plt+0x1ca8c>
   385b4:	subs	r7, r0, #0
   385b8:	beq	38790 <__assert_fail@plt+0x2619c>
   385bc:	ldrb	ip, [r7, #16]
   385c0:	add	lr, sp, #20
   385c4:	mov	r0, fp
   385c8:	add	r3, r7, #36	; 0x24
   385cc:	add	r2, r7, #12
   385d0:	mov	r1, r4
   385d4:	bfi	ip, r8, #0, #1
   385d8:	strb	ip, [r7, #16]
   385dc:	str	lr, [sp]
   385e0:	str	sl, [sp, #4]
   385e4:	str	r9, [sp, #8]
   385e8:	bl	37d18 <__assert_fail@plt+0x25724>
   385ec:	subs	sl, r0, #0
   385f0:	bne	387ac <__assert_fail@plt+0x261b8>
   385f4:	ldrb	r3, [r5]
   385f8:	cmp	r3, #0
   385fc:	beq	38624 <__assert_fail@plt+0x26030>
   38600:	mov	ip, #1
   38604:	asr	r1, r3, #5
   38608:	and	r0, r3, #31
   3860c:	ldrb	r3, [r5, #1]!
   38610:	ldr	r2, [r4, r1, lsl #2]
   38614:	cmp	r3, #0
   38618:	orr	r2, r2, ip, lsl r0
   3861c:	str	r2, [r4, r1, lsl #2]
   38620:	bne	38604 <__assert_fail@plt+0x26010>
   38624:	cmp	r8, #0
   38628:	beq	38648 <__assert_fail@plt+0x26054>
   3862c:	sub	r3, r4, #4
   38630:	add	r1, r4, #28
   38634:	ldr	r2, [r3, #4]!
   38638:	mvn	r2, r2
   3863c:	cmp	r1, r3
   38640:	str	r2, [r3]
   38644:	bne	38634 <__assert_fail@plt+0x26040>
   38648:	ldr	r3, [r6, #92]	; 0x5c
   3864c:	cmp	r3, #1
   38650:	ble	3867c <__assert_fail@plt+0x26088>
   38654:	ldr	r1, [r6, #60]	; 0x3c
   38658:	sub	r3, r4, #4
   3865c:	add	ip, r4, #28
   38660:	sub	r1, r1, #4
   38664:	ldr	r2, [r3, #4]!
   38668:	ldr	r0, [r1, #4]!
   3866c:	cmp	ip, r3
   38670:	and	r2, r2, r0
   38674:	str	r2, [r3]
   38678:	bne	38664 <__assert_fail@plt+0x26070>
   3867c:	add	fp, sp, #24
   38680:	mov	r5, #0
   38684:	mov	ip, #3
   38688:	add	r9, r6, #56	; 0x38
   3868c:	add	sl, r6, #64	; 0x40
   38690:	mov	r3, r5
   38694:	str	fp, [sp]
   38698:	mov	r2, r5
   3869c:	mov	r0, r9
   386a0:	strd	r4, [sp, #24]
   386a4:	mov	r1, sl
   386a8:	strb	ip, [sp, #28]
   386ac:	bl	34938 <__assert_fail@plt+0x22344>
   386b0:	subs	r8, r0, #0
   386b4:	beq	38758 <__assert_fail@plt+0x26164>
   386b8:	ldr	r3, [r6, #92]	; 0x5c
   386bc:	cmp	r3, #1
   386c0:	ble	3874c <__assert_fail@plt+0x26158>
   386c4:	ldrb	ip, [r6, #88]	; 0x58
   386c8:	mov	r0, #6
   386cc:	mov	r3, r5
   386d0:	mov	r2, r5
   386d4:	mov	r1, sl
   386d8:	str	fp, [sp]
   386dc:	str	r7, [sp, #24]
   386e0:	strb	r0, [sp, #28]
   386e4:	mov	r0, r9
   386e8:	orr	ip, ip, #2
   386ec:	strb	ip, [r6, #88]	; 0x58
   386f0:	bl	34938 <__assert_fail@plt+0x22344>
   386f4:	subs	r3, r0, #0
   386f8:	beq	38758 <__assert_fail@plt+0x26164>
   386fc:	add	ip, sp, #32
   38700:	mov	r4, #0
   38704:	mov	r5, #0
   38708:	mov	r2, r8
   3870c:	str	ip, [sp]
   38710:	mov	ip, #10
   38714:	mov	r1, sl
   38718:	mov	r0, r9
   3871c:	strd	r4, [sp, #32]
   38720:	strb	ip, [sp, #36]	; 0x24
   38724:	bl	34938 <__assert_fail@plt+0x22344>
   38728:	mov	r8, r0
   3872c:	mov	r0, r8
   38730:	add	sp, sp, #44	; 0x2c
   38734:	ldrd	r4, [sp]
   38738:	ldrd	r6, [sp, #8]
   3873c:	ldrd	r8, [sp, #16]
   38740:	ldrd	sl, [sp, #24]
   38744:	add	sp, sp, #32
   38748:	pop	{pc}		; (ldr pc, [sp], #4)
   3874c:	mov	r0, r7
   38750:	bl	33788 <__assert_fail@plt+0x21194>
   38754:	b	3872c <__assert_fail@plt+0x26138>
   38758:	mov	r0, r4
   3875c:	mov	r8, #0
   38760:	bl	2f668 <__assert_fail@plt+0x1d074>
   38764:	mov	r0, r7
   38768:	bl	33788 <__assert_fail@plt+0x21194>
   3876c:	ldr	r2, [sp, #84]	; 0x54
   38770:	mov	r3, #12
   38774:	str	r3, [r2]
   38778:	b	3872c <__assert_fail@plt+0x26138>
   3877c:	ldr	r2, [sp, #84]	; 0x54
   38780:	mov	r3, #12
   38784:	mov	r8, r4
   38788:	str	r3, [r2]
   3878c:	b	3872c <__assert_fail@plt+0x26138>
   38790:	mov	r0, r4
   38794:	mov	r8, r7
   38798:	bl	2f668 <__assert_fail@plt+0x1d074>
   3879c:	ldr	r2, [sp, #84]	; 0x54
   387a0:	mov	r3, #12
   387a4:	str	r3, [r2]
   387a8:	b	3872c <__assert_fail@plt+0x26138>
   387ac:	mov	r0, r4
   387b0:	mov	r8, r9
   387b4:	bl	2f668 <__assert_fail@plt+0x1d074>
   387b8:	mov	r0, r7
   387bc:	bl	33788 <__assert_fail@plt+0x21194>
   387c0:	ldr	r3, [sp, #84]	; 0x54
   387c4:	str	sl, [r3]
   387c8:	b	3872c <__assert_fail@plt+0x26138>
   387cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   387d0:	strd	r6, [sp, #8]
   387d4:	ldr	r6, [r0]
   387d8:	strd	r8, [sp, #16]
   387dc:	strd	sl, [sp, #24]
   387e0:	str	lr, [sp, #32]
   387e4:	sub	sp, sp, #316	; 0x13c
   387e8:	ldr	ip, [r6, #92]	; 0x5c
   387ec:	cmp	ip, #1
   387f0:	ldr	ip, [r1]
   387f4:	movne	r5, #0
   387f8:	ldreq	r5, [r0, #12]
   387fc:	ubfxeq	r5, r5, #22, #1
   38800:	cmp	ip, #0
   38804:	ble	388f0 <__assert_fail@plt+0x262fc>
   38808:	mov	r4, r3
   3880c:	mov	r3, #255	; 0xff
   38810:	movt	r3, #32
   38814:	mov	r8, #0
   38818:	str	r5, [sp, #4]
   3881c:	str	r2, [sp, #8]
   38820:	str	r4, [sp, #12]
   38824:	str	r3, [sp, #32]
   38828:	mov	r3, #1
   3882c:	movt	r3, #32
   38830:	str	r1, [sp, #20]
   38834:	str	r0, [sp, #24]
   38838:	str	r3, [sp, #36]	; 0x24
   3883c:	b	38870 <__assert_fail@plt+0x2627c>
   38840:	cmp	r7, #3
   38844:	beq	38aa0 <__assert_fail@plt+0x264ac>
   38848:	cmp	r7, #6
   3884c:	beq	3890c <__assert_fail@plt+0x26318>
   38850:	and	r3, r7, #253	; 0xfd
   38854:	cmp	r3, #5
   38858:	beq	38c58 <__assert_fail@plt+0x26664>
   3885c:	cmp	r7, #2
   38860:	beq	38c78 <__assert_fail@plt+0x26684>
   38864:	add	r8, r8, #1
   38868:	cmp	r8, ip
   3886c:	bge	388f0 <__assert_fail@plt+0x262fc>
   38870:	ldr	r3, [sp, #8]
   38874:	ldr	r2, [r6]
   38878:	ldr	r3, [r3]
   3887c:	ldr	r9, [r3, r8, lsl #2]
   38880:	lsl	r3, r9, #3
   38884:	str	r3, [sp]
   38888:	add	r3, r2, r3
   3888c:	ldrb	r7, [r3, #4]
   38890:	cmp	r7, #1
   38894:	bne	38840 <__assert_fail@plt+0x2624c>
   38898:	ldr	r3, [sp, #4]
   3889c:	ldrb	fp, [r2, r9, lsl #3]
   388a0:	ldr	r4, [sp, #12]
   388a4:	cmp	r3, #0
   388a8:	strb	r7, [r4, fp]
   388ac:	beq	388c0 <__assert_fail@plt+0x262cc>
   388b0:	bl	12288 <__ctype_tolower_loc@plt>
   388b4:	ldr	r3, [r0]
   388b8:	ldr	r3, [r3, fp, lsl #2]
   388bc:	strb	r7, [r4, r3]
   388c0:	ldr	r3, [sp, #24]
   388c4:	ldr	r3, [r3, #12]
   388c8:	tst	r3, #4194304	; 0x400000
   388cc:	beq	388dc <__assert_fail@plt+0x262e8>
   388d0:	ldr	r3, [r6, #92]	; 0x5c
   388d4:	cmp	r3, #1
   388d8:	bgt	38b58 <__assert_fail@plt+0x26564>
   388dc:	ldr	r3, [sp, #20]
   388e0:	add	r8, r8, #1
   388e4:	ldr	ip, [r3]
   388e8:	cmp	r8, ip
   388ec:	blt	38870 <__assert_fail@plt+0x2627c>
   388f0:	add	sp, sp, #316	; 0x13c
   388f4:	ldrd	r4, [sp]
   388f8:	ldrd	r6, [sp, #8]
   388fc:	ldrd	r8, [sp, #16]
   38900:	ldrd	sl, [sp, #24]
   38904:	add	sp, sp, #32
   38908:	pop	{pc}		; (ldr pc, [sp], #4)
   3890c:	ldr	r2, [r6, #92]	; 0x5c
   38910:	ldr	fp, [r3]
   38914:	cmp	r2, #1
   38918:	ble	38940 <__assert_fail@plt+0x2634c>
   3891c:	ldr	r2, [fp, #36]	; 0x24
   38920:	cmp	r2, #0
   38924:	bne	38a3c <__assert_fail@plt+0x26448>
   38928:	ldrb	r2, [fp, #16]
   3892c:	tst	r2, #1
   38930:	bne	38a3c <__assert_fail@plt+0x26448>
   38934:	ldr	r2, [fp, #32]
   38938:	cmp	r2, #0
   3893c:	bne	38a3c <__assert_fail@plt+0x26448>
   38940:	ldr	r2, [fp, #20]
   38944:	cmp	r2, #0
   38948:	ble	38864 <__assert_fail@plt+0x26270>
   3894c:	mov	r5, fp
   38950:	mov	r7, #0
   38954:	str	r8, [sp, #16]
   38958:	add	r9, sp, #56	; 0x38
   3895c:	add	sl, sp, #48	; 0x30
   38960:	ldr	r4, [sp, #12]
   38964:	ldr	fp, [sp, #24]
   38968:	b	38978 <__assert_fail@plt+0x26384>
   3896c:	ldr	r2, [r5, #20]
   38970:	cmp	r7, r2
   38974:	bge	38a30 <__assert_fail@plt+0x2643c>
   38978:	mov	r2, #0
   3897c:	mov	r3, #0
   38980:	lsl	r8, r7, #2
   38984:	mov	r0, r9
   38988:	strd	r2, [sl]
   3898c:	mov	r2, sl
   38990:	ldr	r1, [r5]
   38994:	ldr	r1, [r1, r7, lsl #2]
   38998:	add	r7, r7, #1
   3899c:	bl	11ef8 <wcrtomb@plt>
   389a0:	cmn	r0, #1
   389a4:	beq	389dc <__assert_fail@plt+0x263e8>
   389a8:	ldr	r3, [sp, #4]
   389ac:	ldrb	r2, [sp, #56]	; 0x38
   389b0:	cmp	r3, #0
   389b4:	mov	r3, #1
   389b8:	str	r2, [sp]
   389bc:	strb	r3, [r4, r2]
   389c0:	beq	389dc <__assert_fail@plt+0x263e8>
   389c4:	bl	12288 <__ctype_tolower_loc@plt>
   389c8:	ldr	r1, [r0]
   389cc:	mov	r3, #1
   389d0:	ldr	r2, [sp]
   389d4:	ldr	r2, [r1, r2, lsl #2]
   389d8:	strb	r3, [r4, r2]
   389dc:	ldr	r2, [fp, #12]
   389e0:	tst	r2, #4194304	; 0x400000
   389e4:	beq	3896c <__assert_fail@plt+0x26378>
   389e8:	ldr	r2, [r6, #92]	; 0x5c
   389ec:	cmp	r2, #1
   389f0:	ble	3896c <__assert_fail@plt+0x26378>
   389f4:	ldr	r2, [r5]
   389f8:	ldr	r0, [r2, r8]
   389fc:	bl	12054 <towlower@plt>
   38a00:	mov	r1, r0
   38a04:	mov	r2, sl
   38a08:	mov	r0, r9
   38a0c:	bl	11ef8 <wcrtomb@plt>
   38a10:	cmn	r0, #1
   38a14:	beq	3896c <__assert_fail@plt+0x26378>
   38a18:	ldrb	r2, [sp, #56]	; 0x38
   38a1c:	mov	r3, #1
   38a20:	strb	r3, [r4, r2]
   38a24:	ldr	r2, [r5, #20]
   38a28:	cmp	r7, r2
   38a2c:	blt	38978 <__assert_fail@plt+0x26384>
   38a30:	str	r4, [sp, #12]
   38a34:	ldr	r8, [sp, #16]
   38a38:	b	388dc <__assert_fail@plt+0x262e8>
   38a3c:	ldr	r5, [sp, #4]
   38a40:	mov	r3, #0
   38a44:	add	r9, sp, #56	; 0x38
   38a48:	add	sl, sp, #48	; 0x30
   38a4c:	mov	r7, #1
   38a50:	ldr	r4, [sp, #12]
   38a54:	strb	r3, [sp, #48]	; 0x30
   38a58:	mov	r0, #0
   38a5c:	mov	r1, #0
   38a60:	mov	r3, r9
   38a64:	mov	r2, #1
   38a68:	strd	r0, [r9]
   38a6c:	mov	r1, sl
   38a70:	bl	31b90 <__assert_fail@plt+0x1f59c>
   38a74:	ldrb	r3, [sp, #48]	; 0x30
   38a78:	cmn	r0, #2
   38a7c:	strbeq	r7, [r4, r3]
   38a80:	add	r3, r3, #1
   38a84:	uxtb	r3, r3
   38a88:	cmp	r3, #0
   38a8c:	strb	r3, [sp, #48]	; 0x30
   38a90:	bne	38a58 <__assert_fail@plt+0x26464>
   38a94:	str	r5, [sp, #4]
   38a98:	str	r4, [sp, #12]
   38a9c:	b	388dc <__assert_fail@plt+0x262e8>
   38aa0:	ldr	r4, [sp, #12]
   38aa4:	mov	sl, #0
   38aa8:	mov	r9, #32
   38aac:	str	r8, [sp, #28]
   38ab0:	mov	fp, #1
   38ab4:	mov	r5, sl
   38ab8:	ldr	r8, [sp, #4]
   38abc:	str	r6, [sp, #16]
   38ac0:	ldr	r3, [sp]
   38ac4:	sub	r7, r9, #32
   38ac8:	ldr	r2, [r2, r3]
   38acc:	ldr	r6, [r2, sl]
   38ad0:	add	r3, r5, r7
   38ad4:	add	r2, r4, r7
   38ad8:	lsr	r3, r6, r3
   38adc:	tst	r3, #1
   38ae0:	beq	38b10 <__assert_fail@plt+0x2651c>
   38ae4:	cmp	r8, #0
   38ae8:	add	r3, r7, #128	; 0x80
   38aec:	strb	fp, [r4, r7]
   38af0:	beq	38b10 <__assert_fail@plt+0x2651c>
   38af4:	cmp	r3, #384	; 0x180
   38af8:	bcs	38b0c <__assert_fail@plt+0x26518>
   38afc:	bl	12288 <__ctype_tolower_loc@plt>
   38b00:	ldr	r3, [r0]
   38b04:	ldr	r2, [r3, r7, lsl #2]
   38b08:	add	r2, r4, r2
   38b0c:	strb	fp, [r2]
   38b10:	add	r7, r7, #1
   38b14:	cmp	r9, r7
   38b18:	bne	38ad0 <__assert_fail@plt+0x264dc>
   38b1c:	add	r9, r9, #32
   38b20:	add	sl, sl, #4
   38b24:	cmp	r9, #288	; 0x120
   38b28:	sub	r5, r5, #32
   38b2c:	beq	38b3c <__assert_fail@plt+0x26548>
   38b30:	ldr	r3, [sp, #16]
   38b34:	ldr	r2, [r3]
   38b38:	b	38ac0 <__assert_fail@plt+0x264cc>
   38b3c:	str	r8, [sp, #4]
   38b40:	ldr	r3, [sp, #20]
   38b44:	str	r4, [sp, #12]
   38b48:	ldr	r6, [sp, #16]
   38b4c:	ldr	r8, [sp, #28]
   38b50:	ldr	ip, [r3]
   38b54:	b	38864 <__assert_fail@plt+0x26270>
   38b58:	ldr	r3, [r6]
   38b5c:	add	r2, r9, #1
   38b60:	ldrb	r1, [r3, r9, lsl #3]
   38b64:	strb	r1, [sp, #56]	; 0x38
   38b68:	ldr	r1, [r6, #8]
   38b6c:	cmp	r1, r2
   38b70:	bls	38ca0 <__assert_fail@plt+0x266ac>
   38b74:	ldr	r1, [sp]
   38b78:	ldr	r0, [sp, #32]
   38b7c:	add	sl, r1, #8
   38b80:	add	r3, r3, sl
   38b84:	ldr	r1, [r3, #4]
   38b88:	and	r1, r1, r0
   38b8c:	ldr	r0, [sp, #36]	; 0x24
   38b90:	cmp	r1, r0
   38b94:	bne	38ca0 <__assert_fail@plt+0x266ac>
   38b98:	add	r7, sp, #57	; 0x39
   38b9c:	ldr	r5, [sp, #4]
   38ba0:	ldr	r4, [sp, #12]
   38ba4:	ldr	r0, [sp, #32]
   38ba8:	ldr	ip, [sp, #36]	; 0x24
   38bac:	b	38bc8 <__assert_fail@plt+0x265d4>
   38bb0:	ldr	r3, [r6]
   38bb4:	add	r3, r3, r2, lsl #3
   38bb8:	ldr	r1, [r3, #4]
   38bbc:	and	r1, r1, r0
   38bc0:	cmp	r1, ip
   38bc4:	bne	38be0 <__assert_fail@plt+0x265ec>
   38bc8:	ldrb	r3, [r3]
   38bcc:	add	r2, r2, #1
   38bd0:	strb	r3, [r7], #1
   38bd4:	ldr	r3, [r6, #8]
   38bd8:	cmp	r3, r2
   38bdc:	bhi	38bb0 <__assert_fail@plt+0x265bc>
   38be0:	add	r9, sp, #56	; 0x38
   38be4:	str	r5, [sp, #4]
   38be8:	sub	r7, r7, r9
   38bec:	str	r4, [sp, #12]
   38bf0:	add	sl, sp, #48	; 0x30
   38bf4:	mov	r4, #0
   38bf8:	mov	r5, #0
   38bfc:	mov	r2, r7
   38c00:	mov	r3, sl
   38c04:	mov	r1, r9
   38c08:	add	r0, sp, #44	; 0x2c
   38c0c:	strd	r4, [sl]
   38c10:	bl	31b90 <__assert_fail@plt+0x1f59c>
   38c14:	cmp	r0, r7
   38c18:	bne	388dc <__assert_fail@plt+0x262e8>
   38c1c:	ldr	r0, [sp, #44]	; 0x2c
   38c20:	bl	12054 <towlower@plt>
   38c24:	mov	r1, r0
   38c28:	mov	r2, sl
   38c2c:	mov	r0, r9
   38c30:	bl	11ef8 <wcrtomb@plt>
   38c34:	cmn	r0, #1
   38c38:	beq	388dc <__assert_fail@plt+0x262e8>
   38c3c:	ldrb	r3, [sp, #56]	; 0x38
   38c40:	mov	r2, #1
   38c44:	ldr	r1, [sp, #12]
   38c48:	strb	r2, [r1, r3]
   38c4c:	ldr	r3, [sp, #20]
   38c50:	ldr	ip, [r3]
   38c54:	b	38864 <__assert_fail@plt+0x26270>
   38c58:	ldr	r4, [sp, #12]
   38c5c:	mov	r2, #256	; 0x100
   38c60:	mov	r1, #1
   38c64:	mov	r0, r4
   38c68:	bl	12378 <memset@plt>
   38c6c:	cmp	r7, #2
   38c70:	bne	388f0 <__assert_fail@plt+0x262fc>
   38c74:	b	38c8c <__assert_fail@plt+0x26698>
   38c78:	ldr	r4, [sp, #12]
   38c7c:	mov	r2, #256	; 0x100
   38c80:	mov	r1, #1
   38c84:	mov	r0, r4
   38c88:	bl	12378 <memset@plt>
   38c8c:	ldr	r2, [sp, #24]
   38c90:	ldrb	r3, [r2, #28]
   38c94:	orr	r3, r3, #1
   38c98:	strb	r3, [r2, #28]
   38c9c:	b	388f0 <__assert_fail@plt+0x262fc>
   38ca0:	add	r9, sp, #56	; 0x38
   38ca4:	b	38bf0 <__assert_fail@plt+0x265fc>
   38ca8:	add	ip, r0, r2, lsl #3
   38cac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38cb0:	strd	r6, [sp, #8]
   38cb4:	str	sl, [sp, #24]
   38cb8:	ldrb	sl, [ip, #4]
   38cbc:	strd	r8, [sp, #16]
   38cc0:	str	lr, [sp, #28]
   38cc4:	cmp	sl, #7
   38cc8:	beq	38e34 <__assert_fail@plt+0x26840>
   38ccc:	ldr	ip, [r3, #80]	; 0x50
   38cd0:	cmp	ip, #1
   38cd4:	beq	38d1c <__assert_fail@plt+0x26728>
   38cd8:	mov	r9, r1
   38cdc:	mov	r5, r0
   38ce0:	ldr	r1, [sp, #32]
   38ce4:	mov	r0, r3
   38ce8:	mov	r8, r3
   38cec:	mov	r6, r2
   38cf0:	bl	34358 <__assert_fail@plt+0x21d64>
   38cf4:	cmp	sl, #5
   38cf8:	mov	r7, r0
   38cfc:	beq	38d3c <__assert_fail@plt+0x26748>
   38d00:	sub	r4, sl, #6
   38d04:	cmp	r0, #1
   38d08:	clz	r4, r4
   38d0c:	lsr	r4, r4, #5
   38d10:	movle	r4, #0
   38d14:	cmp	r4, #0
   38d18:	bne	38d84 <__assert_fail@plt+0x26790>
   38d1c:	mov	r7, #0
   38d20:	mov	r0, r7
   38d24:	ldrd	r4, [sp]
   38d28:	ldrd	r6, [sp, #8]
   38d2c:	ldrd	r8, [sp, #16]
   38d30:	ldr	sl, [sp, #24]
   38d34:	add	sp, sp, #28
   38d38:	pop	{pc}		; (ldr pc, [sp], #4)
   38d3c:	cmp	r0, #1
   38d40:	ble	38d1c <__assert_fail@plt+0x26728>
   38d44:	ldr	r3, [r9]
   38d48:	tst	r3, #64	; 0x40
   38d4c:	bne	38d64 <__assert_fail@plt+0x26770>
   38d50:	ldr	r2, [r8, #4]
   38d54:	ldr	r1, [sp, #32]
   38d58:	ldrb	r2, [r2, r1]
   38d5c:	cmp	r2, #10
   38d60:	beq	38d1c <__assert_fail@plt+0x26728>
   38d64:	tst	r3, #128	; 0x80
   38d68:	beq	38d20 <__assert_fail@plt+0x2672c>
   38d6c:	ldr	r3, [r8, #4]
   38d70:	ldr	r2, [sp, #32]
   38d74:	ldrb	r3, [r3, r2]
   38d78:	cmp	r3, #0
   38d7c:	beq	38d1c <__assert_fail@plt+0x26728>
   38d80:	b	38d20 <__assert_fail@plt+0x2672c>
   38d84:	ldr	r6, [r5, r6, lsl #3]
   38d88:	ldr	r0, [r6, #20]
   38d8c:	ldr	ip, [r6, #32]
   38d90:	cmp	ip, #0
   38d94:	bne	38da4 <__assert_fail@plt+0x267b0>
   38d98:	ldr	r3, [r6, #36]	; 0x24
   38d9c:	orrs	r3, r0, r3
   38da0:	beq	38f08 <__assert_fail@plt+0x26914>
   38da4:	ldr	r3, [r8, #8]
   38da8:	cmp	r0, #0
   38dac:	ldr	r2, [sp, #32]
   38db0:	ldr	r4, [r3, r2, lsl #2]
   38db4:	ble	38de8 <__assert_fail@plt+0x267f4>
   38db8:	ldr	r2, [r6]
   38dbc:	ldr	r3, [r2]
   38dc0:	cmp	r4, r3
   38dc4:	beq	38e24 <__assert_fail@plt+0x26830>
   38dc8:	mov	r3, #0
   38dcc:	b	38ddc <__assert_fail@plt+0x267e8>
   38dd0:	ldr	r1, [r2, #4]!
   38dd4:	cmp	r4, r1
   38dd8:	beq	38e24 <__assert_fail@plt+0x26830>
   38ddc:	add	r3, r3, #1
   38de0:	cmp	r0, r3
   38de4:	bne	38dd0 <__assert_fail@plt+0x267dc>
   38de8:	ldr	r3, [r6, #36]	; 0x24
   38dec:	cmp	r3, #0
   38df0:	ble	38ecc <__assert_fail@plt+0x268d8>
   38df4:	mov	r5, #0
   38df8:	b	38e08 <__assert_fail@plt+0x26814>
   38dfc:	ldr	r3, [r6, #36]	; 0x24
   38e00:	cmp	r5, r3
   38e04:	bge	38ec8 <__assert_fail@plt+0x268d4>
   38e08:	ldr	r3, [r6, #12]
   38e0c:	mov	r0, r4
   38e10:	ldr	r1, [r3, r5, lsl #2]
   38e14:	add	r5, r5, #1
   38e18:	bl	11f34 <iswctype@plt>
   38e1c:	cmp	r0, #0
   38e20:	beq	38dfc <__assert_fail@plt+0x26808>
   38e24:	ldrb	r3, [r6, #16]
   38e28:	tst	r3, #1
   38e2c:	beq	38d20 <__assert_fail@plt+0x2672c>
   38e30:	b	38d1c <__assert_fail@plt+0x26728>
   38e34:	ldr	r2, [r3, #4]
   38e38:	ldr	r1, [sp, #32]
   38e3c:	ldr	r0, [sp, #32]
   38e40:	ldrb	r1, [r2, r1]
   38e44:	add	r0, r2, r0
   38e48:	cmp	r1, #193	; 0xc1
   38e4c:	bls	38d1c <__assert_fail@plt+0x26728>
   38e50:	ldr	ip, [sp, #32]
   38e54:	ldr	r3, [r3, #48]	; 0x30
   38e58:	add	ip, ip, #1
   38e5c:	cmp	ip, r3
   38e60:	bge	38d1c <__assert_fail@plt+0x26728>
   38e64:	cmp	r1, #223	; 0xdf
   38e68:	ldrb	ip, [r0, #1]
   38e6c:	bls	38f34 <__assert_fail@plt+0x26940>
   38e70:	cmp	r1, #239	; 0xef
   38e74:	bhi	38f18 <__assert_fail@plt+0x26924>
   38e78:	cmp	ip, #159	; 0x9f
   38e7c:	cmpls	r1, #224	; 0xe0
   38e80:	movne	r7, #3
   38e84:	beq	38d1c <__assert_fail@plt+0x26728>
   38e88:	ldr	r1, [sp, #32]
   38e8c:	add	r1, r1, r7
   38e90:	cmp	r3, r1
   38e94:	blt	38d1c <__assert_fail@plt+0x26728>
   38e98:	ldr	r3, [sp, #32]
   38e9c:	sub	r3, r3, #1
   38ea0:	add	r3, r2, r3
   38ea4:	add	r3, r3, r7
   38ea8:	b	38eb4 <__assert_fail@plt+0x268c0>
   38eac:	cmp	r3, r0
   38eb0:	beq	38d20 <__assert_fail@plt+0x2672c>
   38eb4:	ldrb	r2, [r0, #1]!
   38eb8:	eor	r2, r2, #128	; 0x80
   38ebc:	cmp	r2, #63	; 0x3f
   38ec0:	bls	38eac <__assert_fail@plt+0x268b8>
   38ec4:	b	38d1c <__assert_fail@plt+0x26728>
   38ec8:	ldr	ip, [r6, #32]
   38ecc:	cmp	ip, #0
   38ed0:	ble	38f08 <__assert_fail@plt+0x26914>
   38ed4:	ldr	r2, [r6, #4]
   38ed8:	mov	r3, #0
   38edc:	sub	r2, r2, #4
   38ee0:	ldr	r1, [r2, #4]!
   38ee4:	cmp	r4, r1
   38ee8:	bcc	38efc <__assert_fail@plt+0x26908>
   38eec:	ldr	r1, [r6, #8]
   38ef0:	ldr	r1, [r1, r3, lsl #2]
   38ef4:	cmp	r4, r1
   38ef8:	bls	38e24 <__assert_fail@plt+0x26830>
   38efc:	add	r3, r3, #1
   38f00:	cmp	r3, ip
   38f04:	bne	38ee0 <__assert_fail@plt+0x268ec>
   38f08:	ldrb	r3, [r6, #16]
   38f0c:	tst	r3, #1
   38f10:	bne	38d20 <__assert_fail@plt+0x2672c>
   38f14:	b	38d1c <__assert_fail@plt+0x26728>
   38f18:	cmp	r1, #247	; 0xf7
   38f1c:	bhi	38f48 <__assert_fail@plt+0x26954>
   38f20:	cmp	ip, #143	; 0x8f
   38f24:	cmpls	r1, #240	; 0xf0
   38f28:	movne	r7, #4
   38f2c:	bne	38e88 <__assert_fail@plt+0x26894>
   38f30:	b	38d1c <__assert_fail@plt+0x26728>
   38f34:	eor	ip, ip, #128	; 0x80
   38f38:	cmp	ip, #63	; 0x3f
   38f3c:	movls	r7, #2
   38f40:	bls	38d20 <__assert_fail@plt+0x2672c>
   38f44:	b	38d1c <__assert_fail@plt+0x26728>
   38f48:	cmp	r1, #251	; 0xfb
   38f4c:	bhi	38f64 <__assert_fail@plt+0x26970>
   38f50:	cmp	ip, #135	; 0x87
   38f54:	cmpls	r1, #248	; 0xf8
   38f58:	movne	r7, #5
   38f5c:	bne	38e88 <__assert_fail@plt+0x26894>
   38f60:	b	38d1c <__assert_fail@plt+0x26728>
   38f64:	cmp	r1, #253	; 0xfd
   38f68:	bhi	38d1c <__assert_fail@plt+0x26728>
   38f6c:	cmp	ip, #131	; 0x83
   38f70:	cmpls	r1, #252	; 0xfc
   38f74:	beq	38d1c <__assert_fail@plt+0x26728>
   38f78:	mov	r7, #6
   38f7c:	b	38e88 <__assert_fail@plt+0x26894>
   38f80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   38f84:	mov	r5, r0
   38f88:	ldr	r0, [r0, #84]	; 0x54
   38f8c:	ldr	r4, [r1, #4]
   38f90:	strd	r6, [sp, #8]
   38f94:	mov	r7, r2
   38f98:	mov	r6, #0
   38f9c:	strd	sl, [sp, #24]
   38fa0:	mov	sl, r3
   38fa4:	ldr	r3, [r0]
   38fa8:	strd	r8, [sp, #16]
   38fac:	str	lr, [sp, #32]
   38fb0:	sub	sp, sp, #84	; 0x54
   38fb4:	ldr	r2, [r5, #120]	; 0x78
   38fb8:	str	r0, [sp, #20]
   38fbc:	str	r1, [sp, #36]	; 0x24
   38fc0:	ldr	r1, [sp, #124]	; 0x7c
   38fc4:	ldr	r3, [r3, r7, lsl #3]
   38fc8:	add	r2, r1, r2
   38fcc:	cmp	r2, r4
   38fd0:	str	r3, [sp, #28]
   38fd4:	str	r6, [sp, #48]	; 0x30
   38fd8:	bge	394c4 <__assert_fail@plt+0x26ed0>
   38fdc:	ldr	r3, [sp, #36]	; 0x24
   38fe0:	ldr	r2, [r5, #88]	; 0x58
   38fe4:	ldr	r4, [r3]
   38fe8:	ldr	r8, [r3, #8]
   38fec:	ldr	r3, [r5, #40]	; 0x28
   38ff0:	cmp	r4, #0
   38ff4:	str	r3, [sp, #44]	; 0x2c
   38ff8:	ldr	r3, [r5, #100]	; 0x64
   38ffc:	str	r3, [sp, #40]	; 0x28
   39000:	beq	39450 <__assert_fail@plt+0x26e5c>
   39004:	sub	r1, r4, #1
   39008:	mov	r0, r5
   3900c:	str	r4, [r5, #40]	; 0x28
   39010:	str	r8, [r5, #100]	; 0x64
   39014:	bl	36fec <__assert_fail@plt+0x249f8>
   39018:	cmp	r4, sl
   3901c:	mov	r6, r0
   39020:	beq	39468 <__assert_fail@plt+0x26e74>
   39024:	ldr	sl, [r8, r4, lsl #2]
   39028:	cmp	sl, #0
   3902c:	beq	39518 <__assert_fail@plt+0x26f24>
   39030:	ldrb	r3, [sl, #52]	; 0x34
   39034:	ands	r3, r3, #64	; 0x40
   39038:	bne	39348 <__assert_fail@plt+0x26d54>
   3903c:	add	r2, sp, #56	; 0x38
   39040:	str	r2, [sp, #8]
   39044:	str	r3, [sp, #56]	; 0x38
   39048:	str	r3, [sp, #60]	; 0x3c
   3904c:	str	r3, [sp, #64]	; 0x40
   39050:	ldr	r3, [sp, #124]	; 0x7c
   39054:	cmp	r4, r3
   39058:	bge	392e0 <__assert_fail@plt+0x26cec>
   3905c:	ldr	r3, [r5, #120]	; 0x78
   39060:	cmp	r3, #0
   39064:	blt	392e0 <__assert_fail@plt+0x26cec>
   39068:	ldr	r3, [r5, #100]	; 0x64
   3906c:	mov	r2, #0
   39070:	add	fp, r4, #1
   39074:	str	r2, [sp, #12]
   39078:	ldr	r1, [r3, fp, lsl #2]
   3907c:	lsl	r3, fp, #2
   39080:	sub	r6, fp, #1
   39084:	str	r3, [sp, #16]
   39088:	mov	r3, #0
   3908c:	cmp	r1, r3
   39090:	str	r3, [sp, #60]	; 0x3c
   39094:	beq	393e0 <__assert_fail@plt+0x26dec>
   39098:	add	r1, r1, #4
   3909c:	ldr	r0, [sp, #8]
   390a0:	bl	35c70 <__assert_fail@plt+0x2367c>
   390a4:	cmp	r0, #0
   390a8:	str	r0, [sp, #48]	; 0x30
   390ac:	bne	39400 <__assert_fail@plt+0x26e0c>
   390b0:	cmp	sl, #0
   390b4:	beq	39228 <__assert_fail@plt+0x26c34>
   390b8:	ldr	r3, [sl, #20]
   390bc:	mov	r2, #0
   390c0:	str	r2, [sp, #52]	; 0x34
   390c4:	str	r2, [sp, #68]	; 0x44
   390c8:	str	r2, [sp, #72]	; 0x48
   390cc:	cmp	r3, r2
   390d0:	str	r2, [sp, #76]	; 0x4c
   390d4:	ldr	r7, [r5, #84]	; 0x54
   390d8:	ble	39568 <__assert_fail@plt+0x26f74>
   390dc:	mov	r2, r7
   390e0:	mov	r8, #0
   390e4:	str	fp, [sp, #32]
   390e8:	ldr	r3, [sl, #24]
   390ec:	ldr	r0, [r2], #128	; 0x80
   390f0:	ldr	r4, [r3]
   390f4:	str	r2, [sp, #24]
   390f8:	lsl	r9, r4, #3
   390fc:	add	r3, r0, r9
   39100:	b	3915c <__assert_fail@plt+0x26b68>
   39104:	add	r1, r0, r9
   39108:	mov	r2, r6
   3910c:	mov	r0, r5
   39110:	bl	37104 <__assert_fail@plt+0x24b10>
   39114:	cmp	r0, #0
   39118:	beq	39138 <__assert_fail@plt+0x26b44>
   3911c:	lsl	fp, r4, #2
   39120:	ldr	r3, [r7, #12]
   39124:	ldr	r0, [sp, #8]
   39128:	ldr	r1, [r3, fp]
   3912c:	bl	33de0 <__assert_fail@plt+0x217ec>
   39130:	cmp	r0, #0
   39134:	beq	393f0 <__assert_fail@plt+0x26dfc>
   39138:	ldr	r3, [sl, #20]
   3913c:	add	r8, r8, #1
   39140:	cmp	r8, r3
   39144:	bge	39410 <__assert_fail@plt+0x26e1c>
   39148:	ldr	r3, [sl, #24]
   3914c:	ldr	r0, [r7]
   39150:	ldr	r4, [r3, r8, lsl #2]
   39154:	lsl	r9, r4, #3
   39158:	add	r3, r0, r9
   3915c:	ldrb	r3, [r3, #6]
   39160:	tst	r3, #16
   39164:	beq	39104 <__assert_fail@plt+0x26b10>
   39168:	mov	r3, r5
   3916c:	mov	r2, r4
   39170:	str	r6, [sp]
   39174:	ldr	r1, [sp, #24]
   39178:	bl	38ca8 <__assert_fail@plt+0x266b4>
   3917c:	cmp	r0, #1
   39180:	ble	393d0 <__assert_fail@plt+0x26ddc>
   39184:	ldr	r2, [r5, #100]	; 0x64
   39188:	add	r9, r0, r6
   3918c:	lsl	fp, r4, #2
   39190:	ldr	r3, [r7, #12]
   39194:	ldr	r1, [r2, r9, lsl #2]
   39198:	ldr	r4, [r3, r4, lsl #2]
   3919c:	mov	r3, #0
   391a0:	str	r3, [sp, #72]	; 0x48
   391a4:	cmp	r1, r3
   391a8:	beq	391c4 <__assert_fail@plt+0x26bd0>
   391ac:	add	r1, r1, #4
   391b0:	add	r0, sp, #68	; 0x44
   391b4:	bl	35c70 <__assert_fail@plt+0x2367c>
   391b8:	cmp	r0, #0
   391bc:	str	r0, [sp, #52]	; 0x34
   391c0:	bne	3920c <__assert_fail@plt+0x26c18>
   391c4:	mov	r1, r4
   391c8:	add	r0, sp, #68	; 0x44
   391cc:	bl	33de0 <__assert_fail@plt+0x217ec>
   391d0:	cmp	r0, #0
   391d4:	beq	393f0 <__assert_fail@plt+0x26dfc>
   391d8:	add	r2, sp, #68	; 0x44
   391dc:	mov	r1, r7
   391e0:	ldr	r4, [r5, #100]	; 0x64
   391e4:	add	r0, sp, #52	; 0x34
   391e8:	bl	352d0 <__assert_fail@plt+0x22cdc>
   391ec:	ldr	r3, [r5, #100]	; 0x64
   391f0:	str	r0, [r4, r9, lsl #2]
   391f4:	ldr	r3, [r3, r9, lsl #2]
   391f8:	cmp	r3, #0
   391fc:	bne	39120 <__assert_fail@plt+0x26b2c>
   39200:	ldr	r3, [sp, #52]	; 0x34
   39204:	cmp	r3, #0
   39208:	beq	39120 <__assert_fail@plt+0x26b2c>
   3920c:	ldr	fp, [sp, #32]
   39210:	ldr	r0, [sp, #76]	; 0x4c
   39214:	bl	2f668 <__assert_fail@plt+0x1d074>
   39218:	ldr	r3, [sp, #52]	; 0x34
   3921c:	cmp	r3, #0
   39220:	str	r3, [sp, #48]	; 0x30
   39224:	bne	39400 <__assert_fail@plt+0x26e0c>
   39228:	ldr	r3, [sp, #60]	; 0x3c
   3922c:	mov	r4, fp
   39230:	cmp	r3, #0
   39234:	beq	39280 <__assert_fail@plt+0x26c8c>
   39238:	ldr	r1, [sp, #8]
   3923c:	ldr	r0, [sp, #20]
   39240:	ldr	r2, [sp, #28]
   39244:	ldr	r3, [sp, #128]	; 0x80
   39248:	bl	3606c <__assert_fail@plt+0x23a78>
   3924c:	cmp	r0, #0
   39250:	str	r0, [sp, #48]	; 0x30
   39254:	bne	39400 <__assert_fail@plt+0x26e0c>
   39258:	mov	r2, fp
   3925c:	mov	r0, r5
   39260:	ldr	r3, [sp, #28]
   39264:	ldr	r1, [sp, #128]	; 0x80
   39268:	str	r1, [sp]
   3926c:	ldr	r1, [sp, #8]
   39270:	bl	361bc <__assert_fail@plt+0x23bc8>
   39274:	cmp	r0, #0
   39278:	str	r0, [sp, #48]	; 0x30
   3927c:	bne	39400 <__assert_fail@plt+0x26e0c>
   39280:	mov	r1, r6
   39284:	mov	r0, r5
   39288:	ldr	r2, [r5, #88]	; 0x58
   3928c:	bl	36fec <__assert_fail@plt+0x249f8>
   39290:	mov	r3, r0
   39294:	add	r0, sp, #48	; 0x30
   39298:	ldr	r2, [sp, #8]
   3929c:	ldr	r1, [sp, #20]
   392a0:	bl	34fe8 <__assert_fail@plt+0x229f4>
   392a4:	subs	sl, r0, #0
   392a8:	beq	39428 <__assert_fail@plt+0x26e34>
   392ac:	mov	r2, #0
   392b0:	ldr	r3, [r5, #100]	; 0x64
   392b4:	str	r2, [sp, #12]
   392b8:	ldr	r2, [sp, #16]
   392bc:	str	sl, [r3, r2]
   392c0:	ldr	r2, [sp, #124]	; 0x7c
   392c4:	cmp	r2, fp
   392c8:	ble	392e0 <__assert_fail@plt+0x26cec>
   392cc:	ldr	r1, [sp, #12]
   392d0:	add	fp, fp, #1
   392d4:	ldr	r2, [r5, #120]	; 0x78
   392d8:	cmp	r2, r1
   392dc:	bge	39078 <__assert_fail@plt+0x26a84>
   392e0:	ldr	r0, [sp, #64]	; 0x40
   392e4:	bl	2f668 <__assert_fail@plt+0x1d074>
   392e8:	ldr	r3, [r5, #100]	; 0x64
   392ec:	ldr	r2, [sp, #124]	; 0x7c
   392f0:	ldr	r3, [r3, r2, lsl #2]
   392f4:	cmp	r3, #0
   392f8:	beq	39548 <__assert_fail@plt+0x26f54>
   392fc:	ldr	r2, [sp, #36]	; 0x24
   39300:	add	r1, r3, #12
   39304:	ldr	r0, [sp, #44]	; 0x2c
   39308:	str	r4, [r2]
   3930c:	ldr	r2, [sp, #120]	; 0x78
   39310:	str	r0, [r5, #40]	; 0x28
   39314:	ldr	r0, [sp, #40]	; 0x28
   39318:	str	r0, [r5, #100]	; 0x64
   3931c:	ldr	r0, [r3, #8]
   39320:	bl	343b4 <__assert_fail@plt+0x21dc0>
   39324:	clz	r0, r0
   39328:	lsr	r0, r0, #5
   3932c:	add	sp, sp, #84	; 0x54
   39330:	ldrd	r4, [sp]
   39334:	ldrd	r6, [sp, #8]
   39338:	ldrd	r8, [sp, #16]
   3933c:	ldrd	sl, [sp, #24]
   39340:	add	sp, sp, #32
   39344:	pop	{pc}		; (ldr pc, [sp], #4)
   39348:	add	r3, sp, #56	; 0x38
   3934c:	add	r1, sl, #4
   39350:	mov	r0, r3
   39354:	str	r3, [sp, #8]
   39358:	bl	34df4 <__assert_fail@plt+0x22800>
   3935c:	cmp	r0, #0
   39360:	str	r0, [sp, #48]	; 0x30
   39364:	bne	3932c <__assert_fail@plt+0x26d38>
   39368:	ldrb	r3, [sl, #52]	; 0x34
   3936c:	tst	r3, #64	; 0x40
   39370:	beq	39050 <__assert_fail@plt+0x26a5c>
   39374:	ldr	r3, [sp, #60]	; 0x3c
   39378:	cmp	r3, #0
   3937c:	beq	393a8 <__assert_fail@plt+0x26db4>
   39380:	mov	r2, r4
   39384:	mov	r0, r5
   39388:	ldr	r3, [sp, #28]
   3938c:	ldr	r1, [sp, #128]	; 0x80
   39390:	str	r1, [sp]
   39394:	ldr	r1, [sp, #8]
   39398:	bl	361bc <__assert_fail@plt+0x23bc8>
   3939c:	cmp	r0, #0
   393a0:	str	r0, [sp, #48]	; 0x30
   393a4:	bne	39400 <__assert_fail@plt+0x26e0c>
   393a8:	mov	r3, r6
   393ac:	add	r0, sp, #48	; 0x30
   393b0:	ldr	r2, [sp, #8]
   393b4:	ldr	r1, [sp, #20]
   393b8:	bl	34fe8 <__assert_fail@plt+0x229f4>
   393bc:	subs	sl, r0, #0
   393c0:	beq	39530 <__assert_fail@plt+0x26f3c>
   393c4:	ldr	r3, [r5, #100]	; 0x64
   393c8:	str	sl, [r3, r4, lsl #2]
   393cc:	b	39050 <__assert_fail@plt+0x26a5c>
   393d0:	cmp	r0, #0
   393d4:	bne	3911c <__assert_fail@plt+0x26b28>
   393d8:	ldr	r0, [r7]
   393dc:	b	39104 <__assert_fail@plt+0x26b10>
   393e0:	cmp	sl, #0
   393e4:	bne	390b8 <__assert_fail@plt+0x26ac4>
   393e8:	mov	r4, fp
   393ec:	b	39280 <__assert_fail@plt+0x26c8c>
   393f0:	ldr	r0, [sp, #76]	; 0x4c
   393f4:	bl	2f668 <__assert_fail@plt+0x1d074>
   393f8:	mov	r3, #12
   393fc:	str	r3, [sp, #48]	; 0x30
   39400:	ldr	r0, [sp, #64]	; 0x40
   39404:	bl	2f668 <__assert_fail@plt+0x1d074>
   39408:	ldr	r0, [sp, #48]	; 0x30
   3940c:	b	3932c <__assert_fail@plt+0x26d38>
   39410:	ldr	fp, [sp, #32]
   39414:	ldr	r0, [sp, #76]	; 0x4c
   39418:	bl	2f668 <__assert_fail@plt+0x1d074>
   3941c:	mov	r3, #0
   39420:	str	r3, [sp, #48]	; 0x30
   39424:	b	39228 <__assert_fail@plt+0x26c34>
   39428:	ldr	r3, [sp, #48]	; 0x30
   3942c:	cmp	r3, #0
   39430:	bne	39400 <__assert_fail@plt+0x26e0c>
   39434:	ldr	r2, [sp, #12]
   39438:	ldr	r3, [r5, #100]	; 0x64
   3943c:	add	r2, r2, #1
   39440:	str	r2, [sp, #12]
   39444:	ldr	r2, [sp, #16]
   39448:	str	sl, [r3, r2]
   3944c:	b	392c0 <__assert_fail@plt+0x26ccc>
   39450:	sub	r1, sl, #1
   39454:	mov	r0, r5
   39458:	str	sl, [r5, #40]	; 0x28
   3945c:	str	r8, [r5, #100]	; 0x64
   39460:	bl	36fec <__assert_fail@plt+0x249f8>
   39464:	mov	r6, r0
   39468:	mov	r3, #1
   3946c:	mov	r0, #4
   39470:	str	r3, [sp, #56]	; 0x38
   39474:	str	r3, [sp, #60]	; 0x3c
   39478:	bl	31b54 <__assert_fail@plt+0x1f560>
   3947c:	cmp	r0, #0
   39480:	str	r0, [sp, #64]	; 0x40
   39484:	beq	39540 <__assert_fail@plt+0x26f4c>
   39488:	add	r3, sp, #56	; 0x38
   3948c:	mov	ip, #0
   39490:	str	r7, [r0]
   39494:	mov	r1, r3
   39498:	ldr	r0, [sp, #20]
   3949c:	str	r3, [sp, #8]
   394a0:	ldr	r2, [sp, #28]
   394a4:	str	ip, [sp, #48]	; 0x30
   394a8:	ldr	r3, [sp, #128]	; 0x80
   394ac:	bl	3606c <__assert_fail@plt+0x23a78>
   394b0:	cmp	r0, #0
   394b4:	str	r0, [sp, #48]	; 0x30
   394b8:	moveq	r4, sl
   394bc:	beq	39374 <__assert_fail@plt+0x26d80>
   394c0:	b	39400 <__assert_fail@plt+0x26e0c>
   394c4:	mvn	r3, #-2147483648	; 0x80000000
   394c8:	add	r9, r2, #1
   394cc:	sub	r3, r3, r4
   394d0:	cmp	r3, r9
   394d4:	blt	39540 <__assert_fail@plt+0x26f4c>
   394d8:	add	r8, r4, r9
   394dc:	cmn	r8, #-1073741823	; 0xc0000001
   394e0:	bhi	39540 <__assert_fail@plt+0x26f4c>
   394e4:	ldr	fp, [sp, #36]	; 0x24
   394e8:	lsl	r1, r8, #2
   394ec:	ldr	r0, [fp, #8]
   394f0:	bl	32624 <__assert_fail@plt+0x20030>
   394f4:	subs	r3, r0, #0
   394f8:	beq	39540 <__assert_fail@plt+0x26f4c>
   394fc:	lsl	r2, r9, #2
   39500:	mov	r1, r6
   39504:	str	r8, [fp, #4]
   39508:	add	r0, r3, r4, lsl #2
   3950c:	str	r3, [fp, #8]
   39510:	bl	12378 <memset@plt>
   39514:	b	38fdc <__assert_fail@plt+0x269e8>
   39518:	add	r3, sp, #56	; 0x38
   3951c:	str	r3, [sp, #8]
   39520:	str	sl, [sp, #56]	; 0x38
   39524:	str	sl, [sp, #60]	; 0x3c
   39528:	str	sl, [sp, #64]	; 0x40
   3952c:	b	39050 <__assert_fail@plt+0x26a5c>
   39530:	ldr	r3, [sp, #48]	; 0x30
   39534:	cmp	r3, #0
   39538:	beq	393c4 <__assert_fail@plt+0x26dd0>
   3953c:	b	39400 <__assert_fail@plt+0x26e0c>
   39540:	mov	r0, #12
   39544:	b	3932c <__assert_fail@plt+0x26d38>
   39548:	ldr	r3, [sp, #36]	; 0x24
   3954c:	mov	r0, #1
   39550:	str	r4, [r3]
   39554:	ldr	r3, [sp, #44]	; 0x2c
   39558:	str	r3, [r5, #40]	; 0x28
   3955c:	ldr	r3, [sp, #40]	; 0x28
   39560:	str	r3, [r5, #100]	; 0x64
   39564:	b	3932c <__assert_fail@plt+0x26d38>
   39568:	mov	r0, #0
   3956c:	b	39418 <__assert_fail@plt+0x26e24>
   39570:	mov	ip, r2
   39574:	strd	r4, [sp, #-36]!	; 0xffffffdc
   39578:	mov	r4, r0
   3957c:	strd	r6, [sp, #8]
   39580:	mov	r6, r2
   39584:	mov	r7, r3
   39588:	strd	r8, [sp, #16]
   3958c:	mov	r3, #8
   39590:	mov	r8, r1
   39594:	strd	sl, [sp, #24]
   39598:	str	lr, [sp, #32]
   3959c:	sub	sp, sp, #20
   395a0:	ldr	r2, [ip], #8
   395a4:	str	r7, [sp]
   395a8:	ldr	r5, [sp, #56]	; 0x38
   395ac:	mov	r1, ip
   395b0:	str	r5, [sp, #4]
   395b4:	str	r3, [sp, #8]
   395b8:	ldr	r3, [r6, #4]
   395bc:	bl	38f80 <__assert_fail@plt+0x2698c>
   395c0:	subs	fp, r0, #0
   395c4:	beq	395e8 <__assert_fail@plt+0x26ff4>
   395c8:	mov	r0, fp
   395cc:	add	sp, sp, #20
   395d0:	ldrd	r4, [sp]
   395d4:	ldrd	r6, [sp, #8]
   395d8:	ldrd	r8, [sp, #16]
   395dc:	ldrd	sl, [sp, #24]
   395e0:	add	sp, sp, #32
   395e4:	pop	{pc}		; (ldr pc, [sp], #4)
   395e8:	ldr	r3, [r4, #108]	; 0x6c
   395ec:	ldr	r1, [r4, #112]	; 0x70
   395f0:	ldr	r9, [r6, #4]
   395f4:	ldr	sl, [r8]
   395f8:	cmp	r3, r1
   395fc:	ldr	r0, [r4, #116]	; 0x74
   39600:	movlt	lr, r9
   39604:	bge	396a0 <__assert_fail@plt+0x270ac>
   39608:	add	r2, r3, r3, lsl #1
   3960c:	cmp	r3, #0
   39610:	lsl	r2, r2, #3
   39614:	ble	39630 <__assert_fail@plt+0x2703c>
   39618:	sub	r1, r2, #24
   3961c:	add	r1, r0, r1
   39620:	ldr	ip, [r1, #4]
   39624:	cmp	r5, ip
   39628:	moveq	ip, #1
   3962c:	strbeq	ip, [r1, #20]
   39630:	cmp	sl, r9
   39634:	add	ip, r0, r2
   39638:	str	r7, [r0, r2]
   3963c:	add	r3, r3, #1
   39640:	movne	r0, #0
   39644:	mvneq	r0, #0
   39648:	mov	r1, #0
   3964c:	stmib	ip, {r5, sl}
   39650:	str	r9, [ip, #12]
   39654:	sub	r2, r9, sl
   39658:	add	r5, r5, lr
   3965c:	str	r0, [ip, #16]
   39660:	mov	r0, r4
   39664:	str	r3, [r4, #108]	; 0x6c
   39668:	strb	r1, [ip, #20]
   3966c:	ldr	r3, [r4, #120]	; 0x78
   39670:	cmp	r3, r2
   39674:	strlt	r2, [r4, #120]	; 0x78
   39678:	ldr	r1, [r8]
   3967c:	sub	r1, r5, r1
   39680:	add	sp, sp, #20
   39684:	ldrd	r4, [sp]
   39688:	ldrd	r6, [sp, #8]
   3968c:	ldrd	r8, [sp, #16]
   39690:	ldrd	sl, [sp, #24]
   39694:	ldr	lr, [sp, #32]
   39698:	add	sp, sp, #36	; 0x24
   3969c:	b	341dc <__assert_fail@plt+0x21be8>
   396a0:	add	r1, r1, r1, lsl #1
   396a4:	lsl	r1, r1, #4
   396a8:	bl	32624 <__assert_fail@plt+0x20030>
   396ac:	cmp	r0, #0
   396b0:	beq	396f4 <__assert_fail@plt+0x27100>
   396b4:	ldr	r3, [r4, #108]	; 0x6c
   396b8:	mov	r1, fp
   396bc:	str	r0, [r4, #116]	; 0x74
   396c0:	ldr	r2, [r4, #112]	; 0x70
   396c4:	add	r3, r3, r3, lsl #1
   396c8:	add	r2, r2, r2, lsl #1
   396cc:	add	r0, r0, r3, lsl #3
   396d0:	lsl	r2, r2, #3
   396d4:	bl	12378 <memset@plt>
   396d8:	ldr	lr, [r6, #4]
   396dc:	ldr	r2, [r4, #112]	; 0x70
   396e0:	ldr	r3, [r4, #108]	; 0x6c
   396e4:	ldr	r0, [r4, #116]	; 0x74
   396e8:	lsl	r2, r2, #1
   396ec:	str	r2, [r4, #112]	; 0x70
   396f0:	b	39608 <__assert_fail@plt+0x27014>
   396f4:	ldr	r0, [r4, #116]	; 0x74
   396f8:	mov	fp, #12
   396fc:	bl	2f668 <__assert_fail@plt+0x1d074>
   39700:	b	395c8 <__assert_fail@plt+0x26fd4>
   39704:	strd	r4, [sp, #-36]!	; 0xffffffdc
   39708:	ldr	r3, [r0, #84]	; 0x54
   3970c:	strd	r6, [sp, #8]
   39710:	ldr	r6, [r1]
   39714:	strd	r8, [sp, #16]
   39718:	strd	sl, [sp, #24]
   3971c:	str	lr, [sp, #32]
   39720:	sub	sp, sp, #84	; 0x54
   39724:	ldr	sl, [r0, #40]	; 0x28
   39728:	cmp	r6, #0
   3972c:	str	r3, [sp, #24]
   39730:	ble	39c58 <__assert_fail@plt+0x27664>
   39734:	lsl	r3, sl, #2
   39738:	mov	fp, r0
   3973c:	mov	r9, sl
   39740:	str	r2, [sp, #36]	; 0x24
   39744:	str	r3, [sp, #44]	; 0x2c
   39748:	mov	r3, #0
   3974c:	str	r1, [sp, #56]	; 0x38
   39750:	str	r3, [sp, #16]
   39754:	b	3979c <__assert_fail@plt+0x271a8>
   39758:	tst	r0, #1
   3975c:	beq	39788 <__assert_fail@plt+0x27194>
   39760:	tst	r3, #8
   39764:	bne	39788 <__assert_fail@plt+0x27194>
   39768:	tst	r3, #32
   3976c:	beq	39778 <__assert_fail@plt+0x27184>
   39770:	tst	r0, #2
   39774:	beq	39788 <__assert_fail@plt+0x27194>
   39778:	tst	r3, #128	; 0x80
   3977c:	beq	3980c <__assert_fail@plt+0x27218>
   39780:	tst	r0, #8
   39784:	bne	3980c <__assert_fail@plt+0x27218>
   39788:	ldr	r3, [sp, #16]
   3978c:	add	r3, r3, #1
   39790:	cmp	r3, r6
   39794:	str	r3, [sp, #16]
   39798:	bge	39c58 <__assert_fail@plt+0x27664>
   3979c:	ldr	r1, [sp, #16]
   397a0:	ldr	r3, [sp, #36]	; 0x24
   397a4:	ldr	r2, [r3]
   397a8:	ldr	r3, [sp, #24]
   397ac:	ldr	sl, [r2, r1, lsl #2]
   397b0:	ldr	r3, [r3]
   397b4:	add	r3, r3, sl, lsl #3
   397b8:	ldrb	r2, [r3, #4]
   397bc:	cmp	r2, #4
   397c0:	bne	39788 <__assert_fail@plt+0x27194>
   397c4:	ldr	r4, [r3, #4]
   397c8:	mov	r3, #65280	; 0xff00
   397cc:	movt	r3, #3
   397d0:	and	r3, r3, r4
   397d4:	cmp	r3, #0
   397d8:	beq	3980c <__assert_fail@plt+0x27218>
   397dc:	mov	r1, r9
   397e0:	mov	r0, fp
   397e4:	ldr	r2, [fp, #88]	; 0x58
   397e8:	bl	36fec <__assert_fail@plt+0x249f8>
   397ec:	ubfx	r3, r4, #8, #10
   397f0:	tst	r3, #4
   397f4:	bne	39758 <__assert_fail@plt+0x27164>
   397f8:	tst	r3, #8
   397fc:	beq	39768 <__assert_fail@plt+0x27174>
   39800:	tst	r0, #1
   39804:	beq	39768 <__assert_fail@plt+0x27174>
   39808:	b	39788 <__assert_fail@plt+0x27194>
   3980c:	ldr	ip, [fp, #108]	; 0x6c
   39810:	mov	r0, #0
   39814:	mov	r4, ip
   39818:	mov	r3, ip
   3981c:	cmp	r0, r3
   39820:	bge	3987c <__assert_fail@plt+0x27288>
   39824:	add	r2, r0, r3
   39828:	ldr	lr, [fp, #116]	; 0x74
   3982c:	add	r2, r2, r2, lsr #31
   39830:	asr	r2, r2, #1
   39834:	add	r1, r2, r2, lsl #1
   39838:	add	r1, lr, r1, lsl #3
   3983c:	ldr	r1, [r1, #4]
   39840:	cmp	r9, r1
   39844:	ble	3986c <__assert_fail@plt+0x27278>
   39848:	b	39a84 <__assert_fail@plt+0x27490>
   3984c:	asr	r3, r3, #1
   39850:	add	r1, r3, r3, lsl #1
   39854:	mov	r5, r3
   39858:	add	r1, lr, r1, lsl #3
   3985c:	ldr	r1, [r1, #4]
   39860:	cmp	r9, r1
   39864:	bgt	39a8c <__assert_fail@plt+0x27498>
   39868:	mov	r2, r3
   3986c:	add	r3, r0, r2
   39870:	cmp	r0, r2
   39874:	add	r3, r3, r3, lsr #31
   39878:	blt	3984c <__assert_fail@plt+0x27258>
   3987c:	cmp	ip, r0
   39880:	ble	39a98 <__assert_fail@plt+0x274a4>
   39884:	ldr	r3, [fp, #116]	; 0x74
   39888:	add	r2, r0, r0, lsl #1
   3988c:	cmn	r0, #1
   39890:	add	r3, r3, r2, lsl #3
   39894:	ldr	r1, [r3, #4]
   39898:	sub	r2, r1, r9
   3989c:	clz	r2, r2
   398a0:	lsr	r2, r2, #5
   398a4:	moveq	r2, #0
   398a8:	cmp	r2, #0
   398ac:	beq	39a98 <__assert_fail@plt+0x274a4>
   398b0:	add	r3, r3, #24
   398b4:	b	398c4 <__assert_fail@plt+0x272d0>
   398b8:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   398bc:	cmp	r2, #0
   398c0:	beq	39a98 <__assert_fail@plt+0x274a4>
   398c4:	ldr	r2, [r3, #-24]	; 0xffffffe8
   398c8:	add	r3, r3, #24
   398cc:	cmp	sl, r2
   398d0:	bne	398b8 <__assert_fail@plt+0x272c4>
   398d4:	lsl	r2, sl, #2
   398d8:	mov	r3, #0
   398dc:	cmp	r4, ip
   398e0:	str	r2, [sp, #40]	; 0x28
   398e4:	str	r3, [sp, #64]	; 0x40
   398e8:	bge	39c0c <__assert_fail@plt+0x27618>
   398ec:	add	r3, sl, sl, lsl #1
   398f0:	ldr	r8, [sp, #24]
   398f4:	lsl	r3, r3, #2
   398f8:	str	r3, [sp, #48]	; 0x30
   398fc:	b	399e4 <__assert_fail@plt+0x273f0>
   39900:	ldr	r2, [r8, #20]
   39904:	ldr	r1, [sp, #48]	; 0x30
   39908:	add	r2, r2, r1
   3990c:	ldr	r2, [r2, #8]
   39910:	ldr	r2, [r2]
   39914:	add	r2, r2, r2, lsl #1
   39918:	add	r6, r6, r2, lsl #2
   3991c:	add	r3, r9, r3
   39920:	mov	r0, fp
   39924:	ldr	r2, [fp, #88]	; 0x58
   39928:	sub	r5, r3, r5
   3992c:	sub	r1, r5, #1
   39930:	bl	36fec <__assert_fail@plt+0x249f8>
   39934:	ldr	r2, [sp, #44]	; 0x2c
   39938:	mov	r3, r0
   3993c:	ldr	r7, [fp, #100]	; 0x64
   39940:	ldr	r2, [r7, r2]
   39944:	ldr	r1, [r7, r5, lsl #2]
   39948:	cmp	r2, #0
   3994c:	ldrne	r2, [r2, #8]
   39950:	cmp	r1, #0
   39954:	str	r2, [sp, #28]
   39958:	beq	39a38 <__assert_fail@plt+0x27444>
   3995c:	mov	r2, r6
   39960:	add	r0, sp, #68	; 0x44
   39964:	ldr	r1, [r1, #40]	; 0x28
   39968:	str	r3, [sp, #32]
   3996c:	bl	34e7c <__assert_fail@plt+0x22888>
   39970:	cmp	r0, #0
   39974:	str	r0, [sp, #64]	; 0x40
   39978:	ldr	r3, [sp, #32]
   3997c:	bne	39c48 <__assert_fail@plt+0x27654>
   39980:	add	r2, sp, #68	; 0x44
   39984:	mov	r1, r8
   39988:	ldr	r7, [fp, #100]	; 0x64
   3998c:	add	r0, sp, #64	; 0x40
   39990:	bl	34fe8 <__assert_fail@plt+0x229f4>
   39994:	str	r0, [r7, r5, lsl #2]
   39998:	ldr	r0, [sp, #76]	; 0x4c
   3999c:	bl	2f668 <__assert_fail@plt+0x1d074>
   399a0:	ldr	r3, [fp, #100]	; 0x64
   399a4:	ldr	r2, [r3, r5, lsl #2]
   399a8:	cmp	r2, #0
   399ac:	beq	39a5c <__assert_fail@plt+0x27468>
   399b0:	ldr	r2, [sp, #20]
   399b4:	cmp	r2, #0
   399b8:	bne	399d4 <__assert_fail@plt+0x273e0>
   399bc:	ldr	r2, [sp, #44]	; 0x2c
   399c0:	ldr	r3, [r3, r2]
   399c4:	ldr	r2, [sp, #28]
   399c8:	ldr	r3, [r3, #8]
   399cc:	cmp	r3, r2
   399d0:	bgt	39bc4 <__assert_fail@plt+0x275d0>
   399d4:	ldr	ip, [fp, #108]	; 0x6c
   399d8:	add	r4, r4, #1
   399dc:	cmp	r4, ip
   399e0:	bge	39c0c <__assert_fail@plt+0x27618>
   399e4:	ldr	r3, [fp, #116]	; 0x74
   399e8:	add	r2, r4, r4, lsl #1
   399ec:	ldr	r1, [r3, r2, lsl #3]
   399f0:	add	r3, r3, r2, lsl #3
   399f4:	cmp	sl, r1
   399f8:	bne	399d8 <__assert_fail@plt+0x273e4>
   399fc:	ldr	r2, [r3, #4]
   39a00:	cmp	r9, r2
   39a04:	bne	399d8 <__assert_fail@plt+0x273e4>
   39a08:	ldr	r5, [r3, #8]
   39a0c:	ldr	r3, [r3, #12]
   39a10:	ldr	r6, [r8, #24]
   39a14:	subs	r2, r3, r5
   39a18:	str	r2, [sp, #20]
   39a1c:	beq	39900 <__assert_fail@plt+0x2730c>
   39a20:	ldr	r2, [r8, #12]
   39a24:	ldr	r1, [sp, #40]	; 0x28
   39a28:	ldr	r2, [r2, r1]
   39a2c:	add	r2, r2, r2, lsl #1
   39a30:	add	r6, r6, r2, lsl #2
   39a34:	b	3991c <__assert_fail@plt+0x27328>
   39a38:	mov	r2, r6
   39a3c:	mov	r1, r8
   39a40:	add	r0, sp, #64	; 0x40
   39a44:	bl	34fe8 <__assert_fail@plt+0x229f4>
   39a48:	ldr	r3, [fp, #100]	; 0x64
   39a4c:	str	r0, [r7, r5, lsl #2]
   39a50:	ldr	r2, [r3, r5, lsl #2]
   39a54:	cmp	r2, #0
   39a58:	bne	399b0 <__assert_fail@plt+0x273bc>
   39a5c:	ldr	r0, [sp, #64]	; 0x40
   39a60:	cmp	r0, #0
   39a64:	beq	399b0 <__assert_fail@plt+0x273bc>
   39a68:	add	sp, sp, #84	; 0x54
   39a6c:	ldrd	r4, [sp]
   39a70:	ldrd	r6, [sp, #8]
   39a74:	ldrd	r8, [sp, #16]
   39a78:	ldrd	sl, [sp, #24]
   39a7c:	add	sp, sp, #32
   39a80:	pop	{pc}		; (ldr pc, [sp], #4)
   39a84:	mov	r5, r2
   39a88:	mov	r2, r3
   39a8c:	add	r0, r5, #1
   39a90:	mov	r3, r2
   39a94:	b	3981c <__assert_fail@plt+0x27228>
   39a98:	ldr	r3, [fp, #84]	; 0x54
   39a9c:	ldr	r1, [fp, #124]	; 0x7c
   39aa0:	str	r3, [sp, #52]	; 0x34
   39aa4:	ldr	r3, [r3]
   39aa8:	cmp	r1, #0
   39aac:	ldr	r2, [r3, sl, lsl #3]
   39ab0:	str	r2, [sp, #48]	; 0x30
   39ab4:	ble	398d4 <__assert_fail@plt+0x272e0>
   39ab8:	mov	r2, #0
   39abc:	str	sl, [sp, #40]	; 0x28
   39ac0:	str	r2, [sp, #28]
   39ac4:	ldr	r2, [fp, #4]
   39ac8:	str	r9, [sp, #32]
   39acc:	str	r4, [sp, #60]	; 0x3c
   39ad0:	mov	sl, r2
   39ad4:	ldr	r0, [sp, #28]
   39ad8:	ldr	r2, [fp, #132]	; 0x84
   39adc:	ldr	r4, [r2, r0, lsl #2]
   39ae0:	ldr	r2, [r4, #4]
   39ae4:	ldr	r3, [r3, r2, lsl #3]
   39ae8:	ldr	r2, [sp, #48]	; 0x30
   39aec:	cmp	r2, r3
   39af0:	beq	39b14 <__assert_fail@plt+0x27520>
   39af4:	ldr	r3, [sp, #28]
   39af8:	add	r3, r3, #1
   39afc:	cmp	r3, r1
   39b00:	str	r3, [sp, #28]
   39b04:	bge	39e50 <__assert_fail@plt+0x2785c>
   39b08:	ldr	r3, [sp, #52]	; 0x34
   39b0c:	ldr	r3, [r3]
   39b10:	b	39ad4 <__assert_fail@plt+0x274e0>
   39b14:	ldr	r6, [r4]
   39b18:	ldr	ip, [r4, #16]
   39b1c:	ldr	r7, [sp, #32]
   39b20:	cmp	ip, #0
   39b24:	ble	39c70 <__assert_fail@plt+0x2767c>
   39b28:	mov	r3, sl
   39b2c:	mov	r5, #0
   39b30:	mov	sl, r7
   39b34:	mov	r7, r6
   39b38:	b	39b4c <__assert_fail@plt+0x27558>
   39b3c:	ldr	ip, [r4, #16]
   39b40:	mov	sl, r6
   39b44:	cmp	r5, ip
   39b48:	bge	39c60 <__assert_fail@plt+0x2766c>
   39b4c:	ldr	r2, [r4, #20]
   39b50:	ldr	r9, [r2, r5, lsl #2]
   39b54:	ldr	r8, [r9, #4]
   39b58:	sub	r2, r8, r7
   39b5c:	cmp	r2, #0
   39b60:	add	r6, r2, sl
   39b64:	ble	39b90 <__assert_fail@plt+0x2759c>
   39b68:	ldr	r1, [fp, #28]
   39b6c:	cmp	r1, r6
   39b70:	blt	39c18 <__assert_fail@plt+0x27624>
   39b74:	add	r1, r3, r7
   39b78:	add	r0, r3, sl
   39b7c:	str	r3, [sp, #20]
   39b80:	bl	12084 <memcmp@plt>
   39b84:	cmp	r0, #0
   39b88:	ldr	r3, [sp, #20]
   39b8c:	bne	39df8 <__assert_fail@plt+0x27804>
   39b90:	ldr	r1, [sp, #32]
   39b94:	mov	r2, r9
   39b98:	mov	r0, fp
   39b9c:	add	r5, r5, #1
   39ba0:	mov	r7, r8
   39ba4:	ldr	r3, [sp, #40]	; 0x28
   39ba8:	str	r1, [sp]
   39bac:	mov	r1, r4
   39bb0:	bl	39570 <__assert_fail@plt+0x26f7c>
   39bb4:	cmp	r0, #1
   39bb8:	ldr	r3, [fp, #4]
   39bbc:	bls	39b3c <__assert_fail@plt+0x27548>
   39bc0:	b	39a68 <__assert_fail@plt+0x27474>
   39bc4:	add	r5, r6, #4
   39bc8:	add	r6, r6, #8
   39bcc:	mov	r2, r6
   39bd0:	mov	r1, r5
   39bd4:	mov	r3, r9
   39bd8:	mov	r0, fp
   39bdc:	bl	37b8c <__assert_fail@plt+0x25598>
   39be0:	cmp	r0, #0
   39be4:	str	r0, [sp, #64]	; 0x40
   39be8:	bne	39a68 <__assert_fail@plt+0x27474>
   39bec:	mov	r2, r6
   39bf0:	mov	r1, r5
   39bf4:	mov	r0, fp
   39bf8:	bl	39704 <__assert_fail@plt+0x27110>
   39bfc:	cmp	r0, #0
   39c00:	str	r0, [sp, #64]	; 0x40
   39c04:	beq	399d4 <__assert_fail@plt+0x273e0>
   39c08:	b	39a68 <__assert_fail@plt+0x27474>
   39c0c:	ldr	r3, [sp, #56]	; 0x38
   39c10:	ldr	r6, [r3]
   39c14:	b	39788 <__assert_fail@plt+0x27194>
   39c18:	ldr	lr, [fp, #48]	; 0x30
   39c1c:	mov	r1, r6
   39c20:	mov	r0, fp
   39c24:	str	r2, [sp, #20]
   39c28:	cmp	lr, r6
   39c2c:	blt	39e94 <__assert_fail@plt+0x278a0>
   39c30:	bl	341dc <__assert_fail@plt+0x21be8>
   39c34:	cmp	r0, #0
   39c38:	bne	39a68 <__assert_fail@plt+0x27474>
   39c3c:	ldr	r3, [fp, #4]
   39c40:	ldr	r2, [sp, #20]
   39c44:	b	39b74 <__assert_fail@plt+0x27580>
   39c48:	ldr	r0, [sp, #76]	; 0x4c
   39c4c:	bl	2f668 <__assert_fail@plt+0x1d074>
   39c50:	ldr	r0, [sp, #64]	; 0x40
   39c54:	b	39a68 <__assert_fail@plt+0x27474>
   39c58:	mov	r0, #0
   39c5c:	b	39a68 <__assert_fail@plt+0x27474>
   39c60:	mov	r9, r6
   39c64:	mov	sl, r3
   39c68:	add	r6, r8, #1
   39c6c:	mov	r7, r9
   39c70:	ldr	r3, [sp, #32]
   39c74:	cmp	r3, r6
   39c78:	blt	39dc8 <__assert_fail@plt+0x277d4>
   39c7c:	ldr	r9, [sp, #32]
   39c80:	ldr	r8, [sp, #48]	; 0x30
   39c84:	ldr	r3, [r4]
   39c88:	sub	r3, r6, r3
   39c8c:	cmp	r3, #0
   39c90:	ble	39cbc <__assert_fail@plt+0x276c8>
   39c94:	ldr	r3, [fp, #28]
   39c98:	cmp	r3, r7
   39c9c:	ble	39e24 <__assert_fail@plt+0x27830>
   39ca0:	add	r5, r7, #1
   39ca4:	add	r3, sl, r6
   39ca8:	ldrb	r2, [sl, r7]
   39cac:	ldrb	r3, [r3, #-1]
   39cb0:	cmp	r2, r3
   39cb4:	bne	39dc8 <__assert_fail@plt+0x277d4>
   39cb8:	mov	r7, r5
   39cbc:	ldr	r3, [fp, #100]	; 0x64
   39cc0:	ldr	r3, [r3, r6, lsl #2]
   39cc4:	cmp	r3, #0
   39cc8:	beq	39dbc <__assert_fail@plt+0x277c8>
   39ccc:	ldr	ip, [r3, #8]
   39cd0:	cmp	ip, #0
   39cd4:	ble	39dbc <__assert_fail@plt+0x277c8>
   39cd8:	ldr	r2, [r3, #12]
   39cdc:	mov	r3, #0
   39ce0:	ldr	r1, [sp, #52]	; 0x34
   39ce4:	sub	r2, r2, #4
   39ce8:	ldr	r0, [r1]
   39cec:	b	39cf8 <__assert_fail@plt+0x27704>
   39cf0:	cmp	ip, r3
   39cf4:	beq	39dbc <__assert_fail@plt+0x277c8>
   39cf8:	ldr	r5, [r2, #4]!
   39cfc:	add	r3, r3, #1
   39d00:	add	r1, r0, r5, lsl #3
   39d04:	ldrb	r1, [r1, #4]
   39d08:	cmp	r1, #9
   39d0c:	bne	39cf0 <__assert_fail@plt+0x276fc>
   39d10:	ldr	r1, [r0, r5, lsl #3]
   39d14:	cmp	r8, r1
   39d18:	bne	39cf0 <__assert_fail@plt+0x276fc>
   39d1c:	cmn	r5, #1
   39d20:	beq	39dbc <__assert_fail@plt+0x277c8>
   39d24:	ldr	r3, [r4]
   39d28:	ldr	r1, [r4, #8]
   39d2c:	cmp	r1, #0
   39d30:	beq	39dd0 <__assert_fail@plt+0x277dc>
   39d34:	mov	ip, #9
   39d38:	mov	r0, fp
   39d3c:	ldr	r2, [r4, #4]
   39d40:	stm	sp, {r5, r6, ip}
   39d44:	bl	38f80 <__assert_fail@plt+0x2698c>
   39d48:	cmp	r0, #1
   39d4c:	beq	39dbc <__assert_fail@plt+0x277c8>
   39d50:	cmp	r0, #0
   39d54:	bne	39a68 <__assert_fail@plt+0x27474>
   39d58:	ldrd	r2, [r4, #12]
   39d5c:	cmp	r3, r2
   39d60:	beq	39e6c <__assert_fail@plt+0x27878>
   39d64:	mov	r1, #20
   39d68:	mov	r0, #1
   39d6c:	bl	2f080 <__assert_fail@plt+0x1ca8c>
   39d70:	subs	ip, r0, #0
   39d74:	beq	39e64 <__assert_fail@plt+0x27870>
   39d78:	ldr	lr, [r4, #16]
   39d7c:	mov	r2, ip
   39d80:	mov	r1, r4
   39d84:	mov	r0, fp
   39d88:	ldr	r3, [sp, #40]	; 0x28
   39d8c:	add	sl, lr, #1
   39d90:	str	sl, [sp, #20]
   39d94:	ldr	sl, [r4, #20]
   39d98:	str	ip, [sl, lr, lsl #2]
   39d9c:	stm	ip, {r5, r6}
   39da0:	ldr	ip, [sp, #20]
   39da4:	str	ip, [r4, #16]
   39da8:	str	r9, [sp]
   39dac:	bl	39570 <__assert_fail@plt+0x26f7c>
   39db0:	cmp	r0, #1
   39db4:	ldr	sl, [fp, #4]
   39db8:	bhi	39a68 <__assert_fail@plt+0x27474>
   39dbc:	add	r6, r6, #1
   39dc0:	cmp	r9, r6
   39dc4:	bge	39c84 <__assert_fail@plt+0x27690>
   39dc8:	ldr	r1, [fp, #124]	; 0x7c
   39dcc:	b	39af4 <__assert_fail@plt+0x27500>
   39dd0:	sub	r3, r6, r3
   39dd4:	mov	r0, #12
   39dd8:	add	r1, r3, #1
   39ddc:	bl	2f080 <__assert_fail@plt+0x1ca8c>
   39de0:	cmp	r0, #0
   39de4:	mov	r1, r0
   39de8:	str	r0, [r4, #8]
   39dec:	beq	39e64 <__assert_fail@plt+0x27870>
   39df0:	ldr	r3, [r4]
   39df4:	b	39d34 <__assert_fail@plt+0x27740>
   39df8:	ldr	ip, [r4, #16]
   39dfc:	mov	r6, r7
   39e00:	mov	r7, sl
   39e04:	mov	sl, r3
   39e08:	cmp	ip, r5
   39e0c:	bgt	39dc8 <__assert_fail@plt+0x277d4>
   39e10:	cmp	r5, #0
   39e14:	ble	39c70 <__assert_fail@plt+0x2767c>
   39e18:	mov	r9, r7
   39e1c:	mov	r8, r6
   39e20:	b	39c68 <__assert_fail@plt+0x27674>
   39e24:	ldr	r3, [fp, #48]	; 0x30
   39e28:	cmp	r3, r7
   39e2c:	ble	39dc8 <__assert_fail@plt+0x277d4>
   39e30:	add	r5, r7, #1
   39e34:	mov	r0, fp
   39e38:	mov	r1, r5
   39e3c:	bl	33648 <__assert_fail@plt+0x21054>
   39e40:	cmp	r0, #0
   39e44:	bne	39a68 <__assert_fail@plt+0x27474>
   39e48:	ldr	sl, [fp, #4]
   39e4c:	b	39ca4 <__assert_fail@plt+0x276b0>
   39e50:	ldr	r9, [sp, #32]
   39e54:	ldr	sl, [sp, #40]	; 0x28
   39e58:	ldr	r4, [sp, #60]	; 0x3c
   39e5c:	ldr	ip, [fp, #108]	; 0x6c
   39e60:	b	398d4 <__assert_fail@plt+0x272e0>
   39e64:	mov	r0, #12
   39e68:	b	39a68 <__assert_fail@plt+0x27474>
   39e6c:	lsl	r3, r3, #1
   39e70:	ldr	r0, [r4, #20]
   39e74:	add	sl, r3, #1
   39e78:	lsl	r1, sl, #2
   39e7c:	bl	32624 <__assert_fail@plt+0x20030>
   39e80:	cmp	r0, #0
   39e84:	beq	39e64 <__assert_fail@plt+0x27870>
   39e88:	str	sl, [r4, #12]
   39e8c:	str	r0, [r4, #20]
   39e90:	b	39d64 <__assert_fail@plt+0x27770>
   39e94:	mov	r6, r7
   39e98:	mov	r7, sl
   39e9c:	mov	sl, r3
   39ea0:	b	39e08 <__assert_fail@plt+0x27814>
   39ea4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   39ea8:	mov	r4, r1
   39eac:	ldr	r5, [r1, #40]	; 0x28
   39eb0:	ldr	r3, [r1, #104]	; 0x68
   39eb4:	strd	r6, [sp, #8]
   39eb8:	strd	r8, [sp, #16]
   39ebc:	str	sl, [sp, #24]
   39ec0:	mov	sl, r0
   39ec4:	str	lr, [sp, #28]
   39ec8:	sub	sp, sp, #16
   39ecc:	cmp	r3, r5
   39ed0:	ldr	r8, [r1, #84]	; 0x54
   39ed4:	ldr	r9, [r1, #100]	; 0x64
   39ed8:	bge	39f14 <__assert_fail@plt+0x27920>
   39edc:	mov	r6, r2
   39ee0:	str	r2, [r9, r5, lsl #2]
   39ee4:	str	r5, [r1, #104]	; 0x68
   39ee8:	ldr	r3, [r8, #76]	; 0x4c
   39eec:	cmp	r3, #0
   39ef0:	bne	39fdc <__assert_fail@plt+0x279e8>
   39ef4:	mov	r0, r6
   39ef8:	add	sp, sp, #16
   39efc:	ldrd	r4, [sp]
   39f00:	ldrd	r6, [sp, #8]
   39f04:	ldrd	r8, [sp, #16]
   39f08:	ldr	sl, [sp, #24]
   39f0c:	add	sp, sp, #28
   39f10:	pop	{pc}		; (ldr pc, [sp], #4)
   39f14:	ldr	r3, [r9, r5, lsl #2]
   39f18:	cmp	r3, #0
   39f1c:	moveq	r6, r2
   39f20:	streq	r2, [r9, r5, lsl #2]
   39f24:	beq	39ee8 <__assert_fail@plt+0x278f4>
   39f28:	cmp	r2, #0
   39f2c:	ldr	r3, [r3, #40]	; 0x28
   39f30:	beq	39f9c <__assert_fail@plt+0x279a8>
   39f34:	ldr	r7, [r2, #40]	; 0x28
   39f38:	add	r0, sp, #4
   39f3c:	mov	r2, r3
   39f40:	mov	r1, r7
   39f44:	bl	34e7c <__assert_fail@plt+0x22888>
   39f48:	cmp	r0, #0
   39f4c:	str	r0, [sl]
   39f50:	bne	3a040 <__assert_fail@plt+0x27a4c>
   39f54:	ldr	r1, [r4, #40]	; 0x28
   39f58:	mov	r0, r4
   39f5c:	ldr	r2, [r4, #88]	; 0x58
   39f60:	sub	r1, r1, #1
   39f64:	bl	36fec <__assert_fail@plt+0x249f8>
   39f68:	ldr	r9, [r4, #100]	; 0x64
   39f6c:	mov	r3, r0
   39f70:	add	r2, sp, #4
   39f74:	mov	r1, r8
   39f78:	mov	r0, sl
   39f7c:	bl	34fe8 <__assert_fail@plt+0x229f4>
   39f80:	cmp	r7, #0
   39f84:	mov	r6, r0
   39f88:	str	r0, [r9, r5, lsl #2]
   39f8c:	beq	39ee8 <__assert_fail@plt+0x278f4>
   39f90:	ldr	r0, [sp, #12]
   39f94:	bl	2f668 <__assert_fail@plt+0x1d074>
   39f98:	b	39ee8 <__assert_fail@plt+0x278f4>
   39f9c:	ldrd	r6, [r3]
   39fa0:	sub	r1, r5, #1
   39fa4:	mov	r0, r4
   39fa8:	ldr	r2, [r4, #88]	; 0x58
   39fac:	strd	r6, [sp, #4]
   39fb0:	ldr	r3, [r3, #8]
   39fb4:	str	r3, [sp, #12]
   39fb8:	bl	36fec <__assert_fail@plt+0x249f8>
   39fbc:	mov	r3, r0
   39fc0:	add	r2, sp, #4
   39fc4:	mov	r1, r8
   39fc8:	mov	r0, sl
   39fcc:	bl	34fe8 <__assert_fail@plt+0x229f4>
   39fd0:	mov	r6, r0
   39fd4:	str	r0, [r9, r5, lsl #2]
   39fd8:	b	39ee8 <__assert_fail@plt+0x278f4>
   39fdc:	cmp	r6, #0
   39fe0:	beq	3a040 <__assert_fail@plt+0x27a4c>
   39fe4:	add	r7, r6, #8
   39fe8:	add	r8, r6, #12
   39fec:	mov	r1, r7
   39ff0:	mov	r2, r8
   39ff4:	mov	r3, r5
   39ff8:	mov	r0, r4
   39ffc:	bl	37b8c <__assert_fail@plt+0x25598>
   3a000:	cmp	r0, #0
   3a004:	str	r0, [sl]
   3a008:	bne	3a040 <__assert_fail@plt+0x27a4c>
   3a00c:	ldrb	r3, [r6, #52]	; 0x34
   3a010:	tst	r3, #64	; 0x40
   3a014:	beq	39ef4 <__assert_fail@plt+0x27900>
   3a018:	mov	r2, r8
   3a01c:	mov	r1, r7
   3a020:	mov	r0, r4
   3a024:	bl	39704 <__assert_fail@plt+0x27110>
   3a028:	cmp	r0, #0
   3a02c:	str	r0, [sl]
   3a030:	bne	3a040 <__assert_fail@plt+0x27a4c>
   3a034:	ldr	r3, [r4, #100]	; 0x64
   3a038:	ldr	r6, [r3, r5, lsl #2]
   3a03c:	b	39ef4 <__assert_fail@plt+0x27900>
   3a040:	mov	r6, #0
   3a044:	b	39ef4 <__assert_fail@plt+0x27900>
   3a048:	mov	r3, #1
   3a04c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3a050:	ldr	r4, [r1, #8]
   3a054:	strd	r6, [sp, #8]
   3a058:	strd	r8, [sp, #16]
   3a05c:	mov	r9, r1
   3a060:	strd	sl, [sp, #24]
   3a064:	mov	fp, r0
   3a068:	mov	r0, #4
   3a06c:	str	lr, [sp, #32]
   3a070:	sub	sp, sp, #60	; 0x3c
   3a074:	ldr	sl, [r1, #12]
   3a078:	str	r3, [sp, #44]	; 0x2c
   3a07c:	str	r3, [sp, #48]	; 0x30
   3a080:	bl	31b54 <__assert_fail@plt+0x1f560>
   3a084:	cmp	r0, #0
   3a088:	str	r0, [sp, #52]	; 0x34
   3a08c:	beq	3a318 <__assert_fail@plt+0x27d24>
   3a090:	mov	r2, sl
   3a094:	add	r3, sp, #44	; 0x2c
   3a098:	str	r4, [r0]
   3a09c:	mov	r1, r9
   3a0a0:	mov	r0, fp
   3a0a4:	bl	3be54 <__assert_fail@plt+0x29860>
   3a0a8:	cmp	r0, #0
   3a0ac:	bne	3a2f4 <__assert_fail@plt+0x27d00>
   3a0b0:	cmp	sl, #0
   3a0b4:	addgt	r3, r9, #24
   3a0b8:	strgt	r0, [sp, #20]
   3a0bc:	strgt	r3, [sp, #36]	; 0x24
   3a0c0:	ble	3a2c0 <__assert_fail@plt+0x27ccc>
   3a0c4:	ldr	r0, [r9]
   3a0c8:	lsl	r3, sl, #2
   3a0cc:	str	r3, [sp, #16]
   3a0d0:	ldr	r3, [r0, sl, lsl #2]
   3a0d4:	cmp	r3, #0
   3a0d8:	ldreq	r3, [sp, #20]
   3a0dc:	movne	r3, #0
   3a0e0:	addeq	r3, r3, #1
   3a0e4:	str	r3, [sp, #20]
   3a0e8:	ldr	r2, [sp, #20]
   3a0ec:	ldr	r3, [fp, #120]	; 0x78
   3a0f0:	cmp	r3, r2
   3a0f4:	blt	3a2fc <__assert_fail@plt+0x27d08>
   3a0f8:	mov	r2, #0
   3a0fc:	ldr	r3, [fp, #100]	; 0x64
   3a100:	sub	sl, sl, #1
   3a104:	str	r2, [sp, #48]	; 0x30
   3a108:	ldr	r2, [sp, #16]
   3a10c:	add	r3, r3, r2
   3a110:	ldr	r6, [r3, #-4]
   3a114:	cmp	r6, #0
   3a118:	beq	3a29c <__assert_fail@plt+0x27ca8>
   3a11c:	ldr	r3, [r6, #20]
   3a120:	ldr	r5, [fp, #84]	; 0x54
   3a124:	cmp	r3, #0
   3a128:	ble	3a29c <__assert_fail@plt+0x27ca8>
   3a12c:	ldr	r3, [r6, #24]
   3a130:	add	r2, r9, #20
   3a134:	mov	r8, #0
   3a138:	ldr	r1, [r5]
   3a13c:	str	r2, [sp, #28]
   3a140:	ldr	r4, [r3]
   3a144:	lsl	r7, r4, #3
   3a148:	add	r3, r1, r7
   3a14c:	b	3a20c <__assert_fail@plt+0x27c18>
   3a150:	add	r1, r1, r7
   3a154:	mov	r2, sl
   3a158:	mov	r0, fp
   3a15c:	bl	37104 <__assert_fail@plt+0x24b10>
   3a160:	cmp	r0, #0
   3a164:	beq	3a1e8 <__assert_fail@plt+0x27bf4>
   3a168:	ldr	r3, [r9]
   3a16c:	ldr	r2, [sp, #16]
   3a170:	ldr	r3, [r3, r2]
   3a174:	cmp	r3, #0
   3a178:	beq	3a1e8 <__assert_fail@plt+0x27bf4>
   3a17c:	ldr	r2, [r5, #12]
   3a180:	add	r1, r3, #12
   3a184:	ldr	r0, [r3, #8]
   3a188:	ldr	r2, [r2, r4, lsl #2]
   3a18c:	bl	343b4 <__assert_fail@plt+0x21dc0>
   3a190:	cmp	r0, #0
   3a194:	beq	3a1e8 <__assert_fail@plt+0x27bf4>
   3a198:	mov	r3, #1
   3a19c:	ldr	r2, [r9, #20]
   3a1a0:	cmp	r2, #0
   3a1a4:	beq	3a1d4 <__assert_fail@plt+0x27be0>
   3a1a8:	ldr	lr, [r5, #12]
   3a1ac:	add	ip, sl, r3
   3a1b0:	mov	r0, fp
   3a1b4:	ldr	r1, [sp, #28]
   3a1b8:	ldr	r2, [sp, #36]	; 0x24
   3a1bc:	ldr	r3, [lr, r4, lsl #2]
   3a1c0:	str	ip, [sp]
   3a1c4:	stmib	sp, {r4, sl}
   3a1c8:	bl	34688 <__assert_fail@plt+0x22094>
   3a1cc:	cmp	r0, #0
   3a1d0:	bne	3a1e8 <__assert_fail@plt+0x27bf4>
   3a1d4:	mov	r1, r4
   3a1d8:	add	r0, sp, #44	; 0x2c
   3a1dc:	bl	33de0 <__assert_fail@plt+0x217ec>
   3a1e0:	cmp	r0, #0
   3a1e4:	beq	3a2c8 <__assert_fail@plt+0x27cd4>
   3a1e8:	ldr	r3, [r6, #20]
   3a1ec:	add	r8, r8, #1
   3a1f0:	cmp	r8, r3
   3a1f4:	bge	3a29c <__assert_fail@plt+0x27ca8>
   3a1f8:	ldr	r3, [r6, #24]
   3a1fc:	ldr	r1, [r5]
   3a200:	ldr	r4, [r3, r8, lsl #2]
   3a204:	lsl	r7, r4, #3
   3a208:	add	r3, r1, r7
   3a20c:	ldrb	r3, [r3, #6]
   3a210:	tst	r3, #16
   3a214:	beq	3a150 <__assert_fail@plt+0x27b5c>
   3a218:	ldr	r0, [r9, #12]
   3a21c:	mov	r3, fp
   3a220:	mov	r2, r4
   3a224:	ldr	r1, [fp, #84]	; 0x54
   3a228:	str	r0, [sp, #24]
   3a22c:	str	r1, [sp, #32]
   3a230:	ldr	r0, [r1], #128	; 0x80
   3a234:	str	sl, [sp]
   3a238:	bl	38ca8 <__assert_fail@plt+0x266b4>
   3a23c:	subs	r3, r0, #0
   3a240:	ble	3a294 <__assert_fail@plt+0x27ca0>
   3a244:	ldr	r0, [sp, #24]
   3a248:	add	r2, sl, r3
   3a24c:	cmp	r0, r2
   3a250:	blt	3a19c <__assert_fail@plt+0x27ba8>
   3a254:	ldr	r1, [r9]
   3a258:	ldr	r2, [r1, r2, lsl #2]
   3a25c:	cmp	r2, #0
   3a260:	beq	3a28c <__assert_fail@plt+0x27c98>
   3a264:	str	r3, [sp, #24]
   3a268:	add	r1, r2, #12
   3a26c:	ldr	r3, [sp, #32]
   3a270:	ldr	r0, [r2, #8]
   3a274:	ldr	ip, [r3, #12]
   3a278:	ldr	r2, [ip, r4, lsl #2]
   3a27c:	bl	343b4 <__assert_fail@plt+0x21dc0>
   3a280:	cmp	r0, #0
   3a284:	ldr	r3, [sp, #24]
   3a288:	bne	3a19c <__assert_fail@plt+0x27ba8>
   3a28c:	ldr	r1, [r5]
   3a290:	b	3a150 <__assert_fail@plt+0x27b5c>
   3a294:	beq	3a28c <__assert_fail@plt+0x27c98>
   3a298:	b	3a19c <__assert_fail@plt+0x27ba8>
   3a29c:	add	r3, sp, #44	; 0x2c
   3a2a0:	mov	r2, sl
   3a2a4:	mov	r1, r9
   3a2a8:	mov	r0, fp
   3a2ac:	bl	3be54 <__assert_fail@plt+0x29860>
   3a2b0:	cmp	r0, #0
   3a2b4:	bne	3a2f4 <__assert_fail@plt+0x27d00>
   3a2b8:	cmp	sl, #0
   3a2bc:	bne	3a0c4 <__assert_fail@plt+0x27ad0>
   3a2c0:	mov	r4, #0
   3a2c4:	b	3a2cc <__assert_fail@plt+0x27cd8>
   3a2c8:	mov	r4, #12
   3a2cc:	ldr	r0, [sp, #52]	; 0x34
   3a2d0:	bl	2f668 <__assert_fail@plt+0x1d074>
   3a2d4:	mov	r0, r4
   3a2d8:	add	sp, sp, #60	; 0x3c
   3a2dc:	ldrd	r4, [sp]
   3a2e0:	ldrd	r6, [sp, #8]
   3a2e4:	ldrd	r8, [sp, #16]
   3a2e8:	ldrd	sl, [sp, #24]
   3a2ec:	add	sp, sp, #32
   3a2f0:	pop	{pc}		; (ldr pc, [sp], #4)
   3a2f4:	mov	r4, r0
   3a2f8:	b	3a2cc <__assert_fail@plt+0x27cd8>
   3a2fc:	mov	r1, #0
   3a300:	ldr	r2, [sp, #16]
   3a304:	mov	r4, r1
   3a308:	bl	12378 <memset@plt>
   3a30c:	ldr	r0, [sp, #52]	; 0x34
   3a310:	bl	2f668 <__assert_fail@plt+0x1d074>
   3a314:	b	3a2d4 <__assert_fail@plt+0x27ce0>
   3a318:	mov	r4, #12
   3a31c:	b	3a2d4 <__assert_fail@plt+0x27ce0>
   3a320:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3a324:	mov	r4, r0
   3a328:	mov	r5, r3
   3a32c:	strd	r6, [sp, #8]
   3a330:	strd	r8, [sp, #16]
   3a334:	strd	sl, [sp, #24]
   3a338:	str	lr, [sp, #32]
   3a33c:	sub	sp, sp, #428	; 0x1ac
   3a340:	ldr	r9, [r0]
   3a344:	str	r0, [sp, #32]
   3a348:	add	r0, sp, #148	; 0x94
   3a34c:	str	r1, [sp, #56]	; 0x38
   3a350:	mov	r1, #0
   3a354:	str	r2, [sp, #72]	; 0x48
   3a358:	mov	r2, #136	; 0x88
   3a35c:	ldr	r6, [sp, #464]	; 0x1d0
   3a360:	bl	12378 <memset@plt>
   3a364:	ldr	r2, [r4, #16]
   3a368:	cmp	r2, #0
   3a36c:	str	r2, [sp, #48]	; 0x30
   3a370:	str	r9, [sp, #232]	; 0xe8
   3a374:	beq	3a390 <__assert_fail@plt+0x27d9c>
   3a378:	ldrb	r2, [r4, #28]
   3a37c:	subs	r3, r5, r6
   3a380:	movne	r3, #1
   3a384:	ands	r3, r3, r2, lsr #3
   3a388:	streq	r3, [sp, #48]	; 0x30
   3a38c:	bne	3a734 <__assert_fail@plt+0x28140>
   3a390:	ldr	r3, [sp, #32]
   3a394:	ldr	r2, [sp, #472]	; 0x1d8
   3a398:	ldr	r3, [r3, #24]
   3a39c:	cmp	r3, r2
   3a3a0:	movcs	r3, #0
   3a3a4:	strcs	r3, [sp, #108]	; 0x6c
   3a3a8:	bcs	3a3c8 <__assert_fail@plt+0x27dd4>
   3a3ac:	sub	r2, r2, #1
   3a3b0:	sub	r1, r3, r2
   3a3b4:	sub	r3, r2, r3
   3a3b8:	str	r3, [sp, #108]	; 0x6c
   3a3bc:	ldr	r3, [sp, #472]	; 0x1d8
   3a3c0:	add	r3, r3, r1
   3a3c4:	str	r3, [sp, #472]	; 0x1d8
   3a3c8:	ldr	ip, [sp, #32]
   3a3cc:	ldr	r3, [ip, #8]
   3a3d0:	cmp	r3, #0
   3a3d4:	beq	3b010 <__assert_fail@plt+0x28a1c>
   3a3d8:	ldr	r3, [r9, #36]	; 0x24
   3a3dc:	cmp	r3, #0
   3a3e0:	beq	3b010 <__assert_fail@plt+0x28a1c>
   3a3e4:	ldr	r2, [r9, #40]	; 0x28
   3a3e8:	cmp	r2, #0
   3a3ec:	beq	3b010 <__assert_fail@plt+0x28a1c>
   3a3f0:	ldr	r1, [r9, #44]	; 0x2c
   3a3f4:	cmp	r1, #0
   3a3f8:	beq	3b010 <__assert_fail@plt+0x28a1c>
   3a3fc:	ldr	r0, [r9, #48]	; 0x30
   3a400:	cmp	r0, #0
   3a404:	beq	3b010 <__assert_fail@plt+0x28a1c>
   3a408:	ldr	r3, [r3, #8]
   3a40c:	cmp	r3, #0
   3a410:	bne	3a454 <__assert_fail@plt+0x27e60>
   3a414:	ldr	r3, [r2, #8]
   3a418:	cmp	r3, #0
   3a41c:	bne	3a454 <__assert_fail@plt+0x27e60>
   3a420:	ldr	r3, [r1, #8]
   3a424:	cmp	r3, #0
   3a428:	beq	3a438 <__assert_fail@plt+0x27e44>
   3a42c:	ldrsb	r3, [ip, #28]
   3a430:	cmp	r3, #0
   3a434:	blt	3a454 <__assert_fail@plt+0x27e60>
   3a438:	adds	r6, r6, #0
   3a43c:	movne	r6, #1
   3a440:	cmp	r5, #0
   3a444:	moveq	r6, #0
   3a448:	cmp	r6, #0
   3a44c:	bne	3b010 <__assert_fail@plt+0x28a1c>
   3a450:	mov	r5, r6
   3a454:	ldr	r3, [sp, #472]	; 0x1d8
   3a458:	cmp	r3, #0
   3a45c:	bne	3a724 <__assert_fail@plt+0x28130>
   3a460:	ldr	r3, [r9, #76]	; 0x4c
   3a464:	adds	r3, r3, #0
   3a468:	movne	r3, #1
   3a46c:	str	r3, [sp, #20]
   3a470:	str	r3, [sp, #60]	; 0x3c
   3a474:	ldr	r8, [sp, #32]
   3a478:	add	r0, sp, #148	; 0x94
   3a47c:	ldr	r2, [sp, #56]	; 0x38
   3a480:	ldr	r3, [r9, #8]
   3a484:	ldr	ip, [r8, #12]
   3a488:	str	r2, [sp, #148]	; 0x94
   3a48c:	ldr	lr, [r9, #92]	; 0x5c
   3a490:	add	r3, r3, #1
   3a494:	ldrb	r2, [r9, #88]	; 0x58
   3a498:	and	r4, ip, #4194304	; 0x400000
   3a49c:	ubfx	ip, ip, #22, #1
   3a4a0:	ldr	r8, [r8, #20]
   3a4a4:	cmp	r3, lr
   3a4a8:	ldr	r7, [sp, #72]	; 0x48
   3a4ac:	movlt	r3, lr
   3a4b0:	str	r8, [sp, #80]	; 0x50
   3a4b4:	strb	ip, [sp, #220]	; 0xdc
   3a4b8:	ubfx	ip, r2, #2, #1
   3a4bc:	add	r1, r7, #1
   3a4c0:	ubfx	r2, r2, #3, #1
   3a4c4:	str	lr, [sp, #228]	; 0xe4
   3a4c8:	orrs	lr, r8, r4
   3a4cc:	str	r7, [sp, #192]	; 0xc0
   3a4d0:	movne	lr, #1
   3a4d4:	moveq	lr, #0
   3a4d8:	str	r7, [sp, #196]	; 0xc4
   3a4dc:	cmp	r3, r1
   3a4e0:	str	r7, [sp, #200]	; 0xc8
   3a4e4:	movlt	r1, r3
   3a4e8:	str	r7, [sp, #204]	; 0xcc
   3a4ec:	str	r8, [sp, #212]	; 0xd4
   3a4f0:	strb	ip, [sp, #221]	; 0xdd
   3a4f4:	strb	r2, [sp, #222]	; 0xde
   3a4f8:	strb	lr, [sp, #223]	; 0xdf
   3a4fc:	bl	32c10 <__assert_fail@plt+0x2061c>
   3a500:	subs	r3, r0, #0
   3a504:	str	r3, [sp, #36]	; 0x24
   3a508:	bne	3abec <__assert_fail@plt+0x285f8>
   3a50c:	ldrb	r3, [r9, #88]	; 0x58
   3a510:	add	r1, r9, #96	; 0x60
   3a514:	ldrb	r2, [sp, #223]	; 0xdf
   3a518:	str	r1, [sp, #216]	; 0xd8
   3a51c:	ubfx	r3, r3, #4, #1
   3a520:	cmp	r2, #0
   3a524:	strb	r3, [sp, #226]	; 0xe2
   3a528:	bne	3a540 <__assert_fail@plt+0x27f4c>
   3a52c:	ldr	r3, [r9, #92]	; 0x5c
   3a530:	ldr	r2, [sp, #56]	; 0x38
   3a534:	cmp	r3, #1
   3a538:	str	r2, [sp, #152]	; 0x98
   3a53c:	ble	3b108 <__assert_fail@plt+0x28b14>
   3a540:	mov	r2, #0
   3a544:	ldr	r3, [sp, #32]
   3a548:	mvn	r1, #0
   3a54c:	str	r2, [sp, #176]	; 0xb0
   3a550:	str	r2, [sp, #180]	; 0xb4
   3a554:	ldr	r2, [sp, #468]	; 0x1d4
   3a558:	ldrb	r3, [r3, #28]
   3a55c:	str	r2, [sp, #200]	; 0xc8
   3a560:	str	r2, [sp, #204]	; 0xcc
   3a564:	ubfx	r3, r3, #7, #1
   3a568:	strb	r3, [sp, #225]	; 0xe1
   3a56c:	ldr	r7, [r9, #76]	; 0x4c
   3a570:	str	r1, [sp, #240]	; 0xf0
   3a574:	ldr	r3, [sp, #480]	; 0x1e0
   3a578:	lsl	r4, r7, #1
   3a57c:	cmp	r4, #0
   3a580:	str	r3, [sp, #236]	; 0xec
   3a584:	ble	3a5c4 <__assert_fail@plt+0x27fd0>
   3a588:	movw	r3, #43690	; 0xaaaa
   3a58c:	movt	r3, #2730	; 0xaaa
   3a590:	cmp	r4, r3
   3a594:	bgt	3b368 <__assert_fail@plt+0x28d74>
   3a598:	add	r0, r4, r7, lsl #2
   3a59c:	lsl	r0, r0, #3
   3a5a0:	bl	31b54 <__assert_fail@plt+0x1f560>
   3a5a4:	str	r0, [sp, #264]	; 0x108
   3a5a8:	lsl	r0, r7, #3
   3a5ac:	bl	31b54 <__assert_fail@plt+0x1f560>
   3a5b0:	ldr	r3, [sp, #264]	; 0x108
   3a5b4:	str	r0, [sp, #280]	; 0x118
   3a5b8:	cmp	r0, #0
   3a5bc:	cmpne	r3, #0
   3a5c0:	beq	3b368 <__assert_fail@plt+0x28d74>
   3a5c4:	ldr	r2, [sp, #472]	; 0x1d8
   3a5c8:	mov	r3, #1
   3a5cc:	str	r4, [sp, #260]	; 0x104
   3a5d0:	str	r3, [sp, #268]	; 0x10c
   3a5d4:	str	r4, [sp, #276]	; 0x114
   3a5d8:	cmp	r2, r3
   3a5dc:	bls	3b2fc <__assert_fail@plt+0x28d08>
   3a5e0:	ldr	r0, [sp, #184]	; 0xb8
   3a5e4:	cmn	r0, #-1073741822	; 0xc0000002
   3a5e8:	bhi	3b368 <__assert_fail@plt+0x28d74>
   3a5ec:	add	r0, r0, #1
   3a5f0:	lsl	r0, r0, #2
   3a5f4:	bl	31b54 <__assert_fail@plt+0x1f560>
   3a5f8:	cmp	r0, #0
   3a5fc:	mov	r4, r0
   3a600:	str	r0, [sp, #248]	; 0xf8
   3a604:	beq	3b03c <__assert_fail@plt+0x28a48>
   3a608:	ldr	r3, [sp, #480]	; 0x1e0
   3a60c:	str	r5, [sp, #116]	; 0x74
   3a610:	ldr	r2, [r9, #92]	; 0x5c
   3a614:	tst	r3, #1
   3a618:	movne	r3, #4
   3a61c:	moveq	r3, #6
   3a620:	cmp	r5, r6
   3a624:	str	r2, [sp, #88]	; 0x58
   3a628:	str	r3, [sp, #208]	; 0xd0
   3a62c:	movge	r3, r5
   3a630:	movlt	r3, r6
   3a634:	mvngt	r2, #0
   3a638:	movle	r2, #1
   3a63c:	str	r3, [sp, #64]	; 0x40
   3a640:	ldr	r3, [sp, #48]	; 0x30
   3a644:	str	r2, [sp, #96]	; 0x60
   3a648:	movlt	r2, r5
   3a64c:	movge	r2, r6
   3a650:	str	r2, [sp, #76]	; 0x4c
   3a654:	cmp	r3, #0
   3a658:	beq	3b378 <__assert_fail@plt+0x28d84>
   3a65c:	ldr	r3, [sp, #88]	; 0x58
   3a660:	cmp	r3, #1
   3a664:	moveq	r3, #4
   3a668:	beq	3a688 <__assert_fail@plt+0x28094>
   3a66c:	ldr	r3, [sp, #32]
   3a670:	ldr	r2, [sp, #80]	; 0x50
   3a674:	ldr	r3, [r3, #12]
   3a678:	and	r3, r3, #4194304	; 0x400000
   3a67c:	orrs	r3, r2, r3
   3a680:	moveq	r3, #4
   3a684:	movne	r3, #0
   3a688:	ldr	r2, [sp, #36]	; 0x24
   3a68c:	cmp	r5, r6
   3a690:	movle	r2, #2
   3a694:	ldr	r1, [sp, #80]	; 0x50
   3a698:	cmp	r1, #0
   3a69c:	orrne	r3, r3, #1
   3a6a0:	orr	r3, r3, r2
   3a6a4:	ldr	r1, [sp, #64]	; 0x40
   3a6a8:	ldr	r2, [sp, #76]	; 0x4c
   3a6ac:	cmp	r5, r2
   3a6b0:	movge	r2, #0
   3a6b4:	movlt	r2, #1
   3a6b8:	cmp	r5, r1
   3a6bc:	orrgt	r2, r2, #1
   3a6c0:	cmp	r2, #0
   3a6c4:	bne	3abe4 <__assert_fail@plt+0x285f0>
   3a6c8:	add	r2, sp, #424	; 0x1a8
   3a6cc:	cmp	r5, r6
   3a6d0:	str	r9, [sp, #68]	; 0x44
   3a6d4:	sub	r3, r3, #4
   3a6d8:	suble	r2, r2, #308	; 0x134
   3a6dc:	movgt	r2, #0
   3a6e0:	str	r3, [sp, #92]	; 0x5c
   3a6e4:	adds	r3, r2, #0
   3a6e8:	movne	r3, #1
   3a6ec:	str	r2, [sp, #100]	; 0x64
   3a6f0:	str	r3, [sp, #104]	; 0x68
   3a6f4:	mov	r3, #65280	; 0xff00
   3a6f8:	movt	r3, #3
   3a6fc:	str	r3, [sp, #52]	; 0x34
   3a700:	ldr	r3, [sp, #92]	; 0x5c
   3a704:	cmp	r3, #4
   3a708:	ldrls	pc, [pc, r3, lsl #2]
   3a70c:	b	3b394 <__assert_fail@plt+0x28da0>
   3a710:	andeq	sl, r3, ip, asr ip
   3a714:	andeq	sl, r3, ip, asr ip
   3a718:	strdeq	sl, [r3], -r4
   3a71c:	andeq	sl, r3, r0, lsr fp
   3a720:	andeq	sl, r3, ip, asr #14
   3a724:	mov	r3, #1
   3a728:	str	r3, [sp, #20]
   3a72c:	str	r3, [sp, #60]	; 0x3c
   3a730:	b	3a474 <__assert_fail@plt+0x27e80>
   3a734:	ldr	r3, [sp, #48]	; 0x30
   3a738:	tst	r2, #1
   3a73c:	movne	r3, #0
   3a740:	str	r3, [sp, #48]	; 0x30
   3a744:	b	3a390 <__assert_fail@plt+0x27d9c>
   3a748:	str	r5, [sp, #116]	; 0x74
   3a74c:	mov	r1, r5
   3a750:	add	r0, sp, #148	; 0x94
   3a754:	ldr	r2, [sp, #480]	; 0x1e0
   3a758:	bl	37320 <__assert_fail@plt+0x24d2c>
   3a75c:	subs	r3, r0, #0
   3a760:	str	r3, [sp, #36]	; 0x24
   3a764:	bne	3b3c8 <__assert_fail@plt+0x28dd4>
   3a768:	ldr	r3, [sp, #88]	; 0x58
   3a76c:	cmp	r3, #1
   3a770:	beq	3a790 <__assert_fail@plt+0x2819c>
   3a774:	ldr	r3, [sp, #176]	; 0xb0
   3a778:	cmp	r3, #0
   3a77c:	beq	3a790 <__assert_fail@plt+0x2819c>
   3a780:	ldr	r3, [sp, #156]	; 0x9c
   3a784:	ldr	r3, [r3]
   3a788:	cmn	r3, #1
   3a78c:	beq	3afc0 <__assert_fail@plt+0x289cc>
   3a790:	ldr	r4, [sp, #232]	; 0xe8
   3a794:	mov	r3, #0
   3a798:	ldr	sl, [r4, #36]	; 0x24
   3a79c:	str	r3, [sp, #124]	; 0x7c
   3a7a0:	str	r3, [sp, #252]	; 0xfc
   3a7a4:	str	r3, [sp, #256]	; 0x100
   3a7a8:	str	r3, [sp, #268]	; 0x10c
   3a7ac:	ldr	r3, [sp, #188]	; 0xbc
   3a7b0:	mov	r2, r3
   3a7b4:	ldrsb	r3, [sl, #52]	; 0x34
   3a7b8:	str	r2, [sp, #12]
   3a7bc:	cmp	r3, #0
   3a7c0:	bge	3a800 <__assert_fail@plt+0x2820c>
   3a7c4:	sub	r1, r2, #1
   3a7c8:	add	r0, sp, #148	; 0x94
   3a7cc:	ldr	r2, [sp, #236]	; 0xec
   3a7d0:	bl	36fec <__assert_fail@plt+0x249f8>
   3a7d4:	tst	r0, #1
   3a7d8:	bne	3b328 <__assert_fail@plt+0x28d34>
   3a7dc:	cmp	r0, #0
   3a7e0:	beq	3a800 <__assert_fail@plt+0x2820c>
   3a7e4:	and	r3, r0, #6
   3a7e8:	cmp	r3, #6
   3a7ec:	beq	3b4b8 <__assert_fail@plt+0x28ec4>
   3a7f0:	tst	r0, #2
   3a7f4:	bne	3b40c <__assert_fail@plt+0x28e18>
   3a7f8:	tst	r0, #4
   3a7fc:	bne	3b434 <__assert_fail@plt+0x28e40>
   3a800:	ldr	r3, [sp, #248]	; 0xf8
   3a804:	cmp	r3, #0
   3a808:	beq	3b0d0 <__assert_fail@plt+0x28adc>
   3a80c:	ldr	r2, [r4, #76]	; 0x4c
   3a810:	ldr	r1, [sp, #12]
   3a814:	cmp	r2, #0
   3a818:	str	sl, [r3, r1, lsl #2]
   3a81c:	bne	3b474 <__assert_fail@plt+0x28e80>
   3a820:	ldrb	r3, [sl, #52]	; 0x34
   3a824:	ldr	r2, [sp, #104]	; 0x68
   3a828:	str	r2, [sp, #16]
   3a82c:	ubfx	r3, r3, #4, #1
   3a830:	cmp	r3, #0
   3a834:	mvneq	fp, #0
   3a838:	streq	r3, [sp, #28]
   3a83c:	bne	3b3d4 <__assert_fail@plt+0x28de0>
   3a840:	ldr	r3, [sp, #100]	; 0x64
   3a844:	str	fp, [sp, #24]
   3a848:	ldr	r4, [sp, #188]	; 0xbc
   3a84c:	str	r3, [sp, #40]	; 0x28
   3a850:	b	3a8b4 <__assert_fail@plt+0x282c0>
   3a854:	ldrb	r3, [r5, #52]	; 0x34
   3a858:	ldr	r2, [sp, #16]
   3a85c:	ldr	r1, [sp, #12]
   3a860:	ldr	r4, [sp, #188]	; 0xbc
   3a864:	cmp	sl, r5
   3a868:	movne	r2, #0
   3a86c:	andeq	r2, r2, #1
   3a870:	cmp	r2, #0
   3a874:	movne	r1, r8
   3a878:	tst	r3, #16
   3a87c:	str	r1, [sp, #12]
   3a880:	str	r2, [sp, #16]
   3a884:	beq	3a8b0 <__assert_fail@plt+0x282bc>
   3a888:	tst	r3, #128	; 0x80
   3a88c:	bne	3ad0c <__assert_fail@plt+0x28718>
   3a890:	ldr	r3, [sp, #20]
   3a894:	cmp	r3, #0
   3a898:	beq	3b404 <__assert_fail@plt+0x28e10>
   3a89c:	ldr	r3, [sp, #20]
   3a8a0:	str	r4, [sp, #24]
   3a8a4:	str	r3, [sp, #28]
   3a8a8:	mov	r3, #0
   3a8ac:	str	r3, [sp, #40]	; 0x28
   3a8b0:	mov	sl, r5
   3a8b4:	ldr	r3, [sp, #204]	; 0xcc
   3a8b8:	cmp	r3, r4
   3a8bc:	ble	3ad04 <__assert_fail@plt+0x28710>
   3a8c0:	ldr	r3, [sp, #184]	; 0xb8
   3a8c4:	add	r8, r4, #1
   3a8c8:	cmp	r8, r3
   3a8cc:	bge	3ad28 <__assert_fail@plt+0x28734>
   3a8d0:	ldr	r3, [sp, #176]	; 0xb0
   3a8d4:	cmp	r8, r3
   3a8d8:	bge	3af94 <__assert_fail@plt+0x289a0>
   3a8dc:	ldrb	r3, [sl, #52]	; 0x34
   3a8e0:	tst	r3, #32
   3a8e4:	bne	3ad5c <__assert_fail@plt+0x28768>
   3a8e8:	ldr	r3, [sp, #152]	; 0x98
   3a8ec:	add	r2, r4, #1
   3a8f0:	str	r2, [sp, #188]	; 0xbc
   3a8f4:	ldrb	r4, [r3, r4]
   3a8f8:	ldr	r3, [sl, #44]	; 0x2c
   3a8fc:	cmp	r3, #0
   3a900:	beq	3af64 <__assert_fail@plt+0x28970>
   3a904:	ldr	r5, [r3, r4, lsl #2]
   3a908:	ldr	r3, [sp, #248]	; 0xf8
   3a90c:	cmp	r3, #0
   3a910:	beq	3a928 <__assert_fail@plt+0x28334>
   3a914:	mov	r2, r5
   3a918:	add	r1, sp, #148	; 0x94
   3a91c:	add	r0, sp, #124	; 0x7c
   3a920:	bl	39ea4 <__assert_fail@plt+0x278b0>
   3a924:	mov	r5, r0
   3a928:	cmp	r5, #0
   3a92c:	bne	3a854 <__assert_fail@plt+0x28260>
   3a930:	ldr	r3, [sp, #124]	; 0x7c
   3a934:	ldr	r4, [sp, #248]	; 0xf8
   3a938:	cmp	r3, #0
   3a93c:	bne	3b038 <__assert_fail@plt+0x28a44>
   3a940:	cmp	r4, #0
   3a944:	beq	3ad04 <__assert_fail@plt+0x28710>
   3a948:	ldr	r2, [sp, #28]
   3a94c:	ldr	r3, [sp, #60]	; 0x3c
   3a950:	eor	r3, r3, #1
   3a954:	tst	r2, r3
   3a958:	bne	3ad04 <__assert_fail@plt+0x28710>
   3a95c:	ldr	r3, [sp, #188]	; 0xbc
   3a960:	mov	r1, #0
   3a964:	ldr	r0, [sp, #252]	; 0xfc
   3a968:	add	r4, r4, r3, lsl #2
   3a96c:	b	3a984 <__assert_fail@plt+0x28390>
   3a970:	ldr	ip, [r4, #4]!
   3a974:	mov	r3, r2
   3a978:	mov	r1, #1
   3a97c:	cmp	ip, #0
   3a980:	bne	3acc8 <__assert_fail@plt+0x286d4>
   3a984:	add	r2, r3, #1
   3a988:	cmp	r0, r2
   3a98c:	bge	3a970 <__assert_fail@plt+0x2837c>
   3a990:	ldr	fp, [sp, #24]
   3a994:	cmp	r1, #0
   3a998:	strne	r3, [sp, #188]	; 0xbc
   3a99c:	ldr	r2, [sp, #40]	; 0x28
   3a9a0:	cmp	r2, #0
   3a9a4:	beq	3a9b8 <__assert_fail@plt+0x283c4>
   3a9a8:	ldr	r3, [r2]
   3a9ac:	ldr	r1, [sp, #12]
   3a9b0:	add	r3, r3, r1
   3a9b4:	str	r3, [r2]
   3a9b8:	cmn	fp, #1
   3a9bc:	beq	3afb4 <__assert_fail@plt+0x289c0>
   3a9c0:	cmn	fp, #2
   3a9c4:	ldr	r4, [sp, #248]	; 0xf8
   3a9c8:	beq	3b038 <__assert_fail@plt+0x28a44>
   3a9cc:	ldr	r3, [sp, #32]
   3a9d0:	str	fp, [sp, #240]	; 0xf0
   3a9d4:	ldrb	r3, [r3, #28]
   3a9d8:	tst	r3, #16
   3a9dc:	bne	3b074 <__assert_fail@plt+0x28a80>
   3a9e0:	ldr	r2, [sp, #472]	; 0x1d8
   3a9e4:	cmp	r2, #1
   3a9e8:	bls	3b0e0 <__assert_fail@plt+0x28aec>
   3a9ec:	mov	r2, fp
   3a9f0:	add	r0, sp, #148	; 0x94
   3a9f4:	ldr	r1, [r4, fp, lsl #2]
   3a9f8:	bl	3723c <__assert_fail@plt+0x24c48>
   3a9fc:	ldr	r3, [sp, #68]	; 0x44
   3aa00:	ldrb	r3, [r3, #88]	; 0x58
   3aa04:	str	r0, [sp, #244]	; 0xf4
   3aa08:	tst	r3, #1
   3aa0c:	bne	3aa20 <__assert_fail@plt+0x2842c>
   3aa10:	ldr	r3, [sp, #68]	; 0x44
   3aa14:	ldr	r3, [r3, #76]	; 0x4c
   3aa18:	cmp	r3, #0
   3aa1c:	beq	3bde8 <__assert_fail@plt+0x297f4>
   3aa20:	ldr	r3, [sp, #232]	; 0xe8
   3aa24:	cmn	fp, #-1073741822	; 0xc0000002
   3aa28:	ldr	r9, [sp, #244]	; 0xf4
   3aa2c:	str	r3, [sp, #12]
   3aa30:	bhi	3b038 <__assert_fail@plt+0x28a44>
   3aa34:	add	r5, fp, #1
   3aa38:	lsl	r4, r5, #2
   3aa3c:	mov	r0, r4
   3aa40:	bl	31b54 <__assert_fail@plt+0x1f560>
   3aa44:	subs	sl, r0, #0
   3aa48:	beq	3b414 <__assert_fail@plt+0x28e20>
   3aa4c:	ldr	r3, [sp, #12]
   3aa50:	ldr	r6, [r3, #76]	; 0x4c
   3aa54:	cmp	r6, #0
   3aa58:	beq	3b110 <__assert_fail@plt+0x28b1c>
   3aa5c:	mov	r0, r4
   3aa60:	bl	31b54 <__assert_fail@plt+0x1f560>
   3aa64:	cmp	r0, #0
   3aa68:	mov	r6, r0
   3aa6c:	str	r0, [sp, #24]
   3aa70:	beq	3b4ec <__assert_fail@plt+0x28ef8>
   3aa74:	add	r4, sp, #300	; 0x12c
   3aa78:	mov	r8, #0
   3aa7c:	lsl	r7, r5, #2
   3aa80:	mov	r1, #0
   3aa84:	mov	r0, r6
   3aa88:	mov	r2, r7
   3aa8c:	bl	12378 <memset@plt>
   3aa90:	add	r1, sp, #284	; 0x11c
   3aa94:	add	r0, sp, #148	; 0x94
   3aa98:	str	sl, [sp, #284]	; 0x11c
   3aa9c:	str	r6, [sp, #288]	; 0x120
   3aaa0:	str	r9, [sp, #292]	; 0x124
   3aaa4:	str	fp, [sp, #296]	; 0x128
   3aaa8:	str	r8, [r4]
   3aaac:	str	r8, [r4, #4]
   3aab0:	str	r8, [r4, #8]
   3aab4:	bl	3a048 <__assert_fail@plt+0x27a54>
   3aab8:	mov	r3, r0
   3aabc:	ldr	r0, [sp, #308]	; 0x134
   3aac0:	str	r3, [sp, #16]
   3aac4:	bl	2f668 <__assert_fail@plt+0x1d074>
   3aac8:	ldr	r3, [sp, #16]
   3aacc:	cmp	r3, #0
   3aad0:	bne	3b4c0 <__assert_fail@plt+0x28ecc>
   3aad4:	ldr	r3, [sl]
   3aad8:	cmp	r3, #0
   3aadc:	bne	3b514 <__assert_fail@plt+0x28f20>
   3aae0:	ldr	r3, [r6]
   3aae4:	cmp	r3, #0
   3aae8:	bne	3b514 <__assert_fail@plt+0x28f20>
   3aaec:	ldr	r3, [sp, #248]	; 0xf8
   3aaf0:	sub	r7, r7, #4
   3aaf4:	add	r3, r3, r7
   3aaf8:	subs	fp, fp, #1
   3aafc:	bcc	3b348 <__assert_fail@plt+0x28d54>
   3ab00:	ldr	r1, [r3, #-4]!
   3ab04:	cmp	r1, #0
   3ab08:	beq	3aaf8 <__assert_fail@plt+0x28504>
   3ab0c:	ldrb	r2, [r1, #52]	; 0x34
   3ab10:	tst	r2, #16
   3ab14:	beq	3aaf8 <__assert_fail@plt+0x28504>
   3ab18:	mov	r2, fp
   3ab1c:	add	r0, sp, #148	; 0x94
   3ab20:	bl	3723c <__assert_fail@plt+0x24c48>
   3ab24:	add	r5, fp, #1
   3ab28:	mov	r9, r0
   3ab2c:	b	3aa7c <__assert_fail@plt+0x28488>
   3ab30:	ldr	r3, [sp, #64]	; 0x40
   3ab34:	cmp	r3, r5
   3ab38:	ble	3aba4 <__assert_fail@plt+0x285b0>
   3ab3c:	ldr	r3, [sp, #56]	; 0x38
   3ab40:	ldr	r1, [sp, #80]	; 0x50
   3ab44:	ldrb	r2, [r3, r5]
   3ab48:	add	r3, r3, r5
   3ab4c:	ldrb	r2, [r1, r2]
   3ab50:	ldr	r1, [sp, #48]	; 0x30
   3ab54:	ldrb	r2, [r1, r2]
   3ab58:	cmp	r2, #0
   3ab5c:	bne	3a74c <__assert_fail@plt+0x28158>
   3ab60:	ldr	ip, [sp, #48]	; 0x30
   3ab64:	ldr	r2, [sp, #56]	; 0x38
   3ab68:	ldr	r1, [sp, #64]	; 0x40
   3ab6c:	ldr	lr, [sp, #80]	; 0x50
   3ab70:	sub	r0, r2, #1
   3ab74:	rsb	r2, r2, #1
   3ab78:	add	r0, r0, r1
   3ab7c:	b	3ab94 <__assert_fail@plt+0x285a0>
   3ab80:	ldrb	r1, [r3, #1]!
   3ab84:	ldrb	r1, [lr, r1]
   3ab88:	ldrb	r1, [ip, r1]
   3ab8c:	cmp	r1, #0
   3ab90:	bne	3a748 <__assert_fail@plt+0x28154>
   3ab94:	cmp	r3, r0
   3ab98:	add	r5, r2, r3
   3ab9c:	bne	3ab80 <__assert_fail@plt+0x2858c>
   3aba0:	str	r5, [sp, #116]	; 0x74
   3aba4:	ldr	r3, [sp, #64]	; 0x40
   3aba8:	cmp	r3, r5
   3abac:	bne	3a74c <__assert_fail@plt+0x28158>
   3abb0:	ldr	r2, [sp, #72]	; 0x48
   3abb4:	cmp	r2, r3
   3abb8:	ldrgt	r2, [sp, #56]	; 0x38
   3abbc:	movle	r3, #0
   3abc0:	ldrbgt	r3, [r2, r3]
   3abc4:	ldr	r2, [sp, #80]	; 0x50
   3abc8:	cmp	r2, #0
   3abcc:	ldrbne	r3, [r2, r3]
   3abd0:	ldr	r2, [sp, #48]	; 0x30
   3abd4:	ldrb	r3, [r2, r3]
   3abd8:	cmp	r3, #0
   3abdc:	bne	3a74c <__assert_fail@plt+0x28158>
   3abe0:	ldr	r9, [sp, #68]	; 0x44
   3abe4:	mov	r3, #1
   3abe8:	str	r3, [sp, #36]	; 0x24
   3abec:	ldr	r4, [sp, #248]	; 0xf8
   3abf0:	b	3b044 <__assert_fail@plt+0x28a50>
   3abf4:	ldr	r3, [sp, #64]	; 0x40
   3abf8:	cmp	r3, r5
   3abfc:	ble	3aba4 <__assert_fail@plt+0x285b0>
   3ac00:	ldr	r1, [sp, #48]	; 0x30
   3ac04:	ldr	r3, [sp, #56]	; 0x38
   3ac08:	ldrb	r2, [r3, r5]
   3ac0c:	add	r3, r3, r5
   3ac10:	ldrb	r2, [r1, r2]
   3ac14:	cmp	r2, #0
   3ac18:	bne	3a74c <__assert_fail@plt+0x28158>
   3ac1c:	ldr	ip, [sp, #48]	; 0x30
   3ac20:	ldr	r2, [sp, #56]	; 0x38
   3ac24:	ldr	r1, [sp, #64]	; 0x40
   3ac28:	sub	r0, r2, #1
   3ac2c:	rsb	r2, r2, #1
   3ac30:	add	r0, r0, r1
   3ac34:	b	3ac48 <__assert_fail@plt+0x28654>
   3ac38:	ldrb	r1, [r3, #1]!
   3ac3c:	ldrb	r1, [ip, r1]
   3ac40:	cmp	r1, #0
   3ac44:	bne	3a748 <__assert_fail@plt+0x28154>
   3ac48:	cmp	r0, r3
   3ac4c:	add	r5, r2, r3
   3ac50:	bne	3ac38 <__assert_fail@plt+0x28644>
   3ac54:	str	r5, [sp, #116]	; 0x74
   3ac58:	b	3aba4 <__assert_fail@plt+0x285b0>
   3ac5c:	ldr	r3, [sp, #76]	; 0x4c
   3ac60:	cmp	r3, r5
   3ac64:	bgt	3abe0 <__assert_fail@plt+0x285ec>
   3ac68:	mov	r1, #0
   3ac6c:	mov	r3, r5
   3ac70:	ldr	ip, [sp, #48]	; 0x30
   3ac74:	ldr	r6, [sp, #56]	; 0x38
   3ac78:	ldr	lr, [sp, #72]	; 0x48
   3ac7c:	ldr	r4, [sp, #76]	; 0x4c
   3ac80:	ldr	r0, [sp, #80]	; 0x50
   3ac84:	b	3ac98 <__assert_fail@plt+0x286a4>
   3ac88:	sub	r3, r3, #1
   3ac8c:	mov	r1, #1
   3ac90:	cmp	r3, r4
   3ac94:	blt	3b380 <__assert_fail@plt+0x28d8c>
   3ac98:	cmp	lr, r3
   3ac9c:	mov	r2, #0
   3aca0:	ldrbgt	r2, [r6, r3]
   3aca4:	cmp	r0, #0
   3aca8:	ldrbne	r2, [r0, r2]
   3acac:	ldrb	r2, [ip, r2]
   3acb0:	cmp	r2, #0
   3acb4:	beq	3ac88 <__assert_fail@plt+0x28694>
   3acb8:	cmp	r1, #0
   3acbc:	movne	r5, r3
   3acc0:	strne	r3, [sp, #116]	; 0x74
   3acc4:	b	3a74c <__assert_fail@plt+0x28158>
   3acc8:	mov	r2, #0
   3accc:	add	r1, sp, #148	; 0x94
   3acd0:	str	r3, [sp, #188]	; 0xbc
   3acd4:	add	r0, sp, #124	; 0x7c
   3acd8:	bl	39ea4 <__assert_fail@plt+0x278b0>
   3acdc:	ldr	r3, [sp, #124]	; 0x7c
   3ace0:	cmp	r3, #0
   3ace4:	bne	3acf8 <__assert_fail@plt+0x28704>
   3ace8:	cmp	r0, #0
   3acec:	bne	3b3fc <__assert_fail@plt+0x28e08>
   3acf0:	ldr	r4, [sp, #248]	; 0xf8
   3acf4:	b	3a95c <__assert_fail@plt+0x28368>
   3acf8:	cmp	r0, #0
   3acfc:	mov	r5, r0
   3ad00:	bne	3a854 <__assert_fail@plt+0x28260>
   3ad04:	ldr	fp, [sp, #24]
   3ad08:	b	3a99c <__assert_fail@plt+0x283a8>
   3ad0c:	mov	r2, r4
   3ad10:	mov	r1, r5
   3ad14:	add	r0, sp, #148	; 0x94
   3ad18:	bl	3723c <__assert_fail@plt+0x24c48>
   3ad1c:	cmp	r0, #0
   3ad20:	beq	3a8b0 <__assert_fail@plt+0x282bc>
   3ad24:	b	3a890 <__assert_fail@plt+0x2829c>
   3ad28:	ldr	r2, [sp, #196]	; 0xc4
   3ad2c:	cmp	r3, r2
   3ad30:	bge	3a8d0 <__assert_fail@plt+0x282dc>
   3ad34:	add	r1, r4, #2
   3ad38:	add	r0, sp, #148	; 0x94
   3ad3c:	bl	33648 <__assert_fail@plt+0x21054>
   3ad40:	cmp	r0, #0
   3ad44:	str	r0, [sp, #124]	; 0x7c
   3ad48:	bne	3b334 <__assert_fail@plt+0x28d40>
   3ad4c:	ldrb	r3, [sl, #52]	; 0x34
   3ad50:	ldr	r4, [sp, #188]	; 0xbc
   3ad54:	tst	r3, #32
   3ad58:	beq	3a8e8 <__assert_fail@plt+0x282f4>
   3ad5c:	ldr	fp, [sl, #8]
   3ad60:	ldr	r6, [sp, #232]	; 0xe8
   3ad64:	cmp	fp, #0
   3ad68:	ble	3b068 <__assert_fail@plt+0x28a74>
   3ad6c:	add	r3, r6, #128	; 0x80
   3ad70:	mov	r7, #0
   3ad74:	str	r3, [sp, #44]	; 0x2c
   3ad78:	str	r8, [sp, #84]	; 0x54
   3ad7c:	b	3ae9c <__assert_fail@plt+0x288a8>
   3ad80:	tst	r0, #1
   3ad84:	beq	3ae90 <__assert_fail@plt+0x2889c>
   3ad88:	tst	r5, #8
   3ad8c:	bne	3ae90 <__assert_fail@plt+0x2889c>
   3ad90:	tst	r5, #32
   3ad94:	beq	3ada0 <__assert_fail@plt+0x287ac>
   3ad98:	tst	r0, #2
   3ad9c:	beq	3ae90 <__assert_fail@plt+0x2889c>
   3ada0:	tst	r5, #128	; 0x80
   3ada4:	beq	3adb0 <__assert_fail@plt+0x287bc>
   3ada8:	tst	r0, #8
   3adac:	beq	3ae90 <__assert_fail@plt+0x2889c>
   3adb0:	mov	r0, r8
   3adb4:	add	r3, sp, #148	; 0x94
   3adb8:	str	r4, [sp]
   3adbc:	mov	r2, r9
   3adc0:	ldr	r1, [sp, #44]	; 0x2c
   3adc4:	bl	38ca8 <__assert_fail@plt+0x266b4>
   3adc8:	subs	r4, r0, #0
   3adcc:	beq	3ae88 <__assert_fail@plt+0x28894>
   3add0:	ldr	r2, [sp, #188]	; 0xbc
   3add4:	add	r0, sp, #148	; 0x94
   3add8:	ldr	r3, [sp, #268]	; 0x10c
   3addc:	cmp	r3, r4
   3ade0:	movlt	r3, r4
   3ade4:	add	r4, r4, r2
   3ade8:	mov	r1, r4
   3adec:	str	r3, [sp, #268]	; 0x10c
   3adf0:	bl	341dc <__assert_fail@plt+0x21be8>
   3adf4:	cmp	r0, #0
   3adf8:	str	r0, [sp, #136]	; 0x88
   3adfc:	bne	3aff4 <__assert_fail@plt+0x28a00>
   3ae00:	ldr	r3, [r6, #12]
   3ae04:	ldr	r5, [sp, #248]	; 0xf8
   3ae08:	ldr	r2, [r6, #24]
   3ae0c:	ldr	r3, [r3, r9, lsl #2]
   3ae10:	ldr	r1, [r5, r4, lsl #2]
   3ae14:	add	r3, r3, r3, lsl #1
   3ae18:	lsl	r3, r3, #2
   3ae1c:	cmp	r1, #0
   3ae20:	add	ip, r2, r3
   3ae24:	beq	3aef8 <__assert_fail@plt+0x28904>
   3ae28:	mov	r2, ip
   3ae2c:	add	r0, sp, #284	; 0x11c
   3ae30:	ldr	r1, [r1, #40]	; 0x28
   3ae34:	bl	34e7c <__assert_fail@plt+0x22888>
   3ae38:	cmp	r0, #0
   3ae3c:	str	r0, [sp, #136]	; 0x88
   3ae40:	bne	3aff4 <__assert_fail@plt+0x28a00>
   3ae44:	sub	r1, r4, #1
   3ae48:	add	r0, sp, #148	; 0x94
   3ae4c:	ldr	r2, [sp, #236]	; 0xec
   3ae50:	bl	36fec <__assert_fail@plt+0x249f8>
   3ae54:	ldr	r5, [sp, #248]	; 0xf8
   3ae58:	mov	r3, r0
   3ae5c:	add	r2, sp, #284	; 0x11c
   3ae60:	mov	r1, r6
   3ae64:	add	r0, sp, #136	; 0x88
   3ae68:	bl	34fe8 <__assert_fail@plt+0x229f4>
   3ae6c:	str	r0, [r5, r4, lsl #2]
   3ae70:	ldr	r0, [sp, #292]	; 0x124
   3ae74:	bl	2f668 <__assert_fail@plt+0x1d074>
   3ae78:	ldr	r3, [sp, #248]	; 0xf8
   3ae7c:	ldr	r2, [r3, r4, lsl #2]
   3ae80:	cmp	r2, #0
   3ae84:	beq	3af50 <__assert_fail@plt+0x2895c>
   3ae88:	ldr	fp, [sl, #8]
   3ae8c:	ldr	r4, [sp, #188]	; 0xbc
   3ae90:	add	r7, r7, #1
   3ae94:	cmp	r7, fp
   3ae98:	bge	3b064 <__assert_fail@plt+0x28a70>
   3ae9c:	ldr	r2, [sl, #12]
   3aea0:	ldr	r8, [r6]
   3aea4:	ldr	r9, [r2, r7, lsl #2]
   3aea8:	add	r2, r8, r9, lsl #3
   3aeac:	ldrb	r1, [r2, #6]
   3aeb0:	tst	r1, #16
   3aeb4:	beq	3ae90 <__assert_fail@plt+0x2889c>
   3aeb8:	ldr	r5, [r2, #4]
   3aebc:	ldr	r3, [sp, #52]	; 0x34
   3aec0:	tst	r3, r5
   3aec4:	beq	3adb0 <__assert_fail@plt+0x287bc>
   3aec8:	ubfx	r5, r5, #8, #10
   3aecc:	mov	r1, r4
   3aed0:	add	r0, sp, #148	; 0x94
   3aed4:	ldr	r2, [sp, #236]	; 0xec
   3aed8:	bl	36fec <__assert_fail@plt+0x249f8>
   3aedc:	tst	r5, #4
   3aee0:	bne	3ad80 <__assert_fail@plt+0x2878c>
   3aee4:	tst	r5, #8
   3aee8:	beq	3ad90 <__assert_fail@plt+0x2879c>
   3aeec:	tst	r0, #1
   3aef0:	beq	3ad90 <__assert_fail@plt+0x2879c>
   3aef4:	b	3ae90 <__assert_fail@plt+0x2889c>
   3aef8:	add	r2, r2, r3
   3aefc:	sub	r1, r4, #1
   3af00:	ldrd	r2, [r2]
   3af04:	add	r0, sp, #148	; 0x94
   3af08:	mov	r8, r2
   3af0c:	mov	r9, r3
   3af10:	ldr	r2, [sp, #236]	; 0xec
   3af14:	add	r3, sp, #284	; 0x11c
   3af18:	strd	r8, [r3]
   3af1c:	ldr	r3, [ip, #8]
   3af20:	str	r3, [sp, #292]	; 0x124
   3af24:	bl	36fec <__assert_fail@plt+0x249f8>
   3af28:	mov	r3, r0
   3af2c:	add	r2, sp, #284	; 0x11c
   3af30:	mov	r1, r6
   3af34:	add	r0, sp, #136	; 0x88
   3af38:	bl	34fe8 <__assert_fail@plt+0x229f4>
   3af3c:	ldr	r3, [sp, #248]	; 0xf8
   3af40:	str	r0, [r5, r4, lsl #2]
   3af44:	ldr	r2, [r3, r4, lsl #2]
   3af48:	cmp	r2, #0
   3af4c:	bne	3ae88 <__assert_fail@plt+0x28894>
   3af50:	ldr	r0, [sp, #136]	; 0x88
   3af54:	cmp	r0, #0
   3af58:	beq	3ae88 <__assert_fail@plt+0x28894>
   3af5c:	ldr	r8, [sp, #84]	; 0x54
   3af60:	b	3affc <__assert_fail@plt+0x28a08>
   3af64:	ldr	r5, [sl, #48]	; 0x30
   3af68:	cmp	r5, #0
   3af6c:	beq	3b09c <__assert_fail@plt+0x28aa8>
   3af70:	ldr	r1, [sp, #188]	; 0xbc
   3af74:	add	r0, sp, #148	; 0x94
   3af78:	ldr	r2, [sp, #236]	; 0xec
   3af7c:	sub	r1, r1, #1
   3af80:	bl	36fec <__assert_fail@plt+0x249f8>
   3af84:	tst	r0, #1
   3af88:	addne	r4, r4, #256	; 0x100
   3af8c:	ldr	r5, [r5, r4, lsl #2]
   3af90:	b	3a908 <__assert_fail@plt+0x28314>
   3af94:	ldr	r2, [sp, #196]	; 0xc4
   3af98:	cmp	r3, r2
   3af9c:	bge	3a8dc <__assert_fail@plt+0x282e8>
   3afa0:	b	3ad34 <__assert_fail@plt+0x28740>
   3afa4:	mov	r0, sl
   3afa8:	bl	2f668 <__assert_fail@plt+0x1d074>
   3afac:	mov	r0, r4
   3afb0:	bl	2f668 <__assert_fail@plt+0x1d074>
   3afb4:	add	r0, sp, #148	; 0x94
   3afb8:	bl	33b38 <__assert_fail@plt+0x21544>
   3afbc:	ldr	r5, [sp, #116]	; 0x74
   3afc0:	ldr	r2, [sp, #76]	; 0x4c
   3afc4:	ldr	r3, [sp, #96]	; 0x60
   3afc8:	add	r5, r5, r3
   3afcc:	ldr	r3, [sp, #64]	; 0x40
   3afd0:	str	r5, [sp, #116]	; 0x74
   3afd4:	cmp	r5, r3
   3afd8:	movle	r3, #0
   3afdc:	movgt	r3, #1
   3afe0:	cmp	r5, r2
   3afe4:	orrlt	r3, r3, #1
   3afe8:	cmp	r3, #0
   3afec:	beq	3a700 <__assert_fail@plt+0x2810c>
   3aff0:	b	3abe0 <__assert_fail@plt+0x285ec>
   3aff4:	ldr	r8, [sp, #84]	; 0x54
   3aff8:	ldr	r3, [sp, #248]	; 0xf8
   3affc:	cmp	r3, #0
   3b000:	str	r0, [sp, #124]	; 0x7c
   3b004:	beq	3b0c4 <__assert_fail@plt+0x28ad0>
   3b008:	mov	r5, #0
   3b00c:	b	3a914 <__assert_fail@plt+0x28320>
   3b010:	mov	r3, #1
   3b014:	str	r3, [sp, #36]	; 0x24
   3b018:	ldr	r0, [sp, #36]	; 0x24
   3b01c:	add	sp, sp, #428	; 0x1ac
   3b020:	ldrd	r4, [sp]
   3b024:	ldrd	r6, [sp, #8]
   3b028:	ldrd	r8, [sp, #16]
   3b02c:	ldrd	sl, [sp, #24]
   3b030:	add	sp, sp, #32
   3b034:	pop	{pc}		; (ldr pc, [sp], #4)
   3b038:	ldr	r9, [sp, #68]	; 0x44
   3b03c:	mov	r3, #12
   3b040:	str	r3, [sp, #36]	; 0x24
   3b044:	mov	r0, r4
   3b048:	bl	2f668 <__assert_fail@plt+0x1d074>
   3b04c:	ldr	r3, [r9, #76]	; 0x4c
   3b050:	cmp	r3, #0
   3b054:	bne	3b30c <__assert_fail@plt+0x28d18>
   3b058:	add	r0, sp, #148	; 0x94
   3b05c:	bl	33af0 <__assert_fail@plt+0x214fc>
   3b060:	b	3b018 <__assert_fail@plt+0x28a24>
   3b064:	ldr	r8, [sp, #84]	; 0x54
   3b068:	mov	r3, #0
   3b06c:	str	r3, [sp, #124]	; 0x7c
   3b070:	b	3a8e8 <__assert_fail@plt+0x282f4>
   3b074:	ldr	r9, [sp, #68]	; 0x44
   3b078:	ldr	r3, [r9, #76]	; 0x4c
   3b07c:	cmp	r3, #0
   3b080:	beq	3b18c <__assert_fail@plt+0x28b98>
   3b084:	mov	r2, fp
   3b088:	add	r0, sp, #148	; 0x94
   3b08c:	ldr	r1, [r4, fp, lsl #2]
   3b090:	bl	3723c <__assert_fail@plt+0x24c48>
   3b094:	str	r0, [sp, #244]	; 0xf4
   3b098:	b	3aa20 <__assert_fail@plt+0x2842c>
   3b09c:	mov	r1, sl
   3b0a0:	ldr	r0, [sp, #232]	; 0xe8
   3b0a4:	bl	364e4 <__assert_fail@plt+0x23ef0>
   3b0a8:	cmp	r0, #0
   3b0ac:	bne	3a8f8 <__assert_fail@plt+0x28304>
   3b0b0:	ldr	r3, [sp, #248]	; 0xf8
   3b0b4:	mov	r2, #12
   3b0b8:	str	r2, [sp, #124]	; 0x7c
   3b0bc:	cmp	r3, #0
   3b0c0:	bne	3b008 <__assert_fail@plt+0x28a14>
   3b0c4:	mov	r4, #0
   3b0c8:	ldr	r9, [sp, #68]	; 0x44
   3b0cc:	b	3b03c <__assert_fail@plt+0x28a48>
   3b0d0:	ldr	r3, [sp, #104]	; 0x68
   3b0d4:	str	r3, [sp, #16]
   3b0d8:	ldrb	r3, [sl, #52]	; 0x34
   3b0dc:	b	3a82c <__assert_fail@plt+0x28238>
   3b0e0:	ldr	r2, [sp, #68]	; 0x44
   3b0e4:	ldr	r2, [r2, #76]	; 0x4c
   3b0e8:	cmp	r2, #0
   3b0ec:	bne	3b084 <__assert_fail@plt+0x28a90>
   3b0f0:	ldr	r9, [sp, #68]	; 0x44
   3b0f4:	ldr	r2, [sp, #472]	; 0x1d8
   3b0f8:	cmp	r2, #0
   3b0fc:	bne	3b1d0 <__assert_fail@plt+0x28bdc>
   3b100:	str	r2, [sp, #36]	; 0x24
   3b104:	b	3b044 <__assert_fail@plt+0x28a50>
   3b108:	ldr	r2, [sp, #72]	; 0x48
   3b10c:	b	3a544 <__assert_fail@plt+0x27f50>
   3b110:	add	r1, sp, #284	; 0x11c
   3b114:	add	r0, sp, #148	; 0x94
   3b118:	str	sl, [sp, #284]	; 0x11c
   3b11c:	str	r6, [sp, #288]	; 0x120
   3b120:	str	r9, [sp, #292]	; 0x124
   3b124:	str	fp, [sp, #296]	; 0x128
   3b128:	str	r6, [sp, #300]	; 0x12c
   3b12c:	str	r6, [sp, #304]	; 0x130
   3b130:	str	r6, [sp, #308]	; 0x134
   3b134:	bl	3a048 <__assert_fail@plt+0x27a54>
   3b138:	mov	r7, r0
   3b13c:	ldr	r0, [sp, #308]	; 0x134
   3b140:	bl	2f668 <__assert_fail@plt+0x1d074>
   3b144:	cmp	r7, #0
   3b148:	bne	3b50c <__assert_fail@plt+0x28f18>
   3b14c:	ldr	r4, [sl]
   3b150:	cmp	r4, #0
   3b154:	beq	3afa4 <__assert_fail@plt+0x289b0>
   3b158:	mov	r8, fp
   3b15c:	mov	fp, r9
   3b160:	ldr	r9, [sp, #68]	; 0x44
   3b164:	ldr	r0, [sp, #248]	; 0xf8
   3b168:	bl	2f668 <__assert_fail@plt+0x1d074>
   3b16c:	mov	r0, #0
   3b170:	str	r8, [sp, #240]	; 0xf0
   3b174:	str	fp, [sp, #244]	; 0xf4
   3b178:	str	sl, [sp, #248]	; 0xf8
   3b17c:	bl	2f668 <__assert_fail@plt+0x1d074>
   3b180:	mov	r0, #0
   3b184:	bl	2f668 <__assert_fail@plt+0x1d074>
   3b188:	ldr	r4, [sp, #248]	; 0xf8
   3b18c:	ldr	r3, [sp, #472]	; 0x1d8
   3b190:	cmp	r3, #0
   3b194:	beq	3b044 <__assert_fail@plt+0x28a50>
   3b198:	ldr	r3, [sp, #472]	; 0x1d8
   3b19c:	cmp	r3, #1
   3b1a0:	bls	3b1c8 <__assert_fail@plt+0x28bd4>
   3b1a4:	ldr	r2, [sp, #472]	; 0x1d8
   3b1a8:	ldr	r3, [sp, #476]	; 0x1dc
   3b1ac:	sub	r1, r3, #8
   3b1b0:	add	r1, r1, r2, lsl #3
   3b1b4:	mvn	r2, #0
   3b1b8:	str	r2, [r3, #12]
   3b1bc:	str	r2, [r3, #8]!
   3b1c0:	cmp	r1, r3
   3b1c4:	bne	3b1b8 <__assert_fail@plt+0x28bc4>
   3b1c8:	ldr	r3, [sp, #32]
   3b1cc:	ldrb	r3, [r3, #28]
   3b1d0:	eor	r3, r3, #16
   3b1d4:	mov	r5, #0
   3b1d8:	ldr	r1, [sp, #240]	; 0xf0
   3b1dc:	ldr	r2, [sp, #472]	; 0x1d8
   3b1e0:	subs	r2, r2, #1
   3b1e4:	movne	r2, #1
   3b1e8:	ands	r3, r2, r3, lsr #4
   3b1ec:	ldr	r2, [sp, #476]	; 0x1dc
   3b1f0:	str	r5, [r2]
   3b1f4:	str	r1, [r2, #4]
   3b1f8:	bne	3b590 <__assert_fail@plt+0x28f9c>
   3b1fc:	ldrb	lr, [sp, #224]	; 0xe0
   3b200:	mov	r1, #0
   3b204:	ldr	ip, [sp, #116]	; 0x74
   3b208:	ldr	r7, [sp, #160]	; 0xa0
   3b20c:	ldr	r5, [sp, #176]	; 0xb0
   3b210:	ldr	r6, [sp, #180]	; 0xb4
   3b214:	ldr	r8, [sp, #472]	; 0x1d8
   3b218:	ldr	r2, [sp, #476]	; 0x1dc
   3b21c:	b	3b224 <__assert_fail@plt+0x28c30>
   3b220:	ldr	r3, [r2, #8]!
   3b224:	cmn	r3, #1
   3b228:	beq	3b248 <__assert_fail@plt+0x28c54>
   3b22c:	cmp	lr, #0
   3b230:	ldr	r0, [r2, #4]
   3b234:	bne	3b570 <__assert_fail@plt+0x28f7c>
   3b238:	add	r3, ip, r3
   3b23c:	add	r0, ip, r0
   3b240:	str	r3, [r2]
   3b244:	str	r0, [r2, #4]
   3b248:	add	r1, r1, #1
   3b24c:	cmp	r1, r8
   3b250:	bne	3b220 <__assert_fail@plt+0x28c2c>
   3b254:	ldr	r3, [sp, #108]	; 0x6c
   3b258:	cmp	r3, #0
   3b25c:	ble	3b294 <__assert_fail@plt+0x28ca0>
   3b260:	ldr	r3, [sp, #108]	; 0x6c
   3b264:	ldr	r2, [sp, #472]	; 0x1d8
   3b268:	ldr	r0, [sp, #476]	; 0x1dc
   3b26c:	add	r1, r3, r2
   3b270:	ldr	r3, [sp, #476]	; 0x1dc
   3b274:	add	r1, r0, r1, lsl #3
   3b278:	add	r3, r3, r2, lsl #3
   3b27c:	mvn	r2, #0
   3b280:	add	r3, r3, #8
   3b284:	str	r2, [r3, #-8]
   3b288:	str	r2, [r3, #-4]
   3b28c:	cmp	r1, r3
   3b290:	bne	3b280 <__assert_fail@plt+0x28c8c>
   3b294:	ldr	r1, [r9, #132]	; 0x84
   3b298:	cmp	r1, #0
   3b29c:	beq	3b044 <__assert_fail@plt+0x28a50>
   3b2a0:	ldr	r3, [sp, #472]	; 0x1d8
   3b2a4:	ldr	r2, [sp, #476]	; 0x1dc
   3b2a8:	sub	ip, r3, #1
   3b2ac:	mov	r3, #0
   3b2b0:	add	r5, r2, #8
   3b2b4:	add	lr, r2, #12
   3b2b8:	b	3b2f0 <__assert_fail@plt+0x28cfc>
   3b2bc:	ldr	r2, [r1, r3, lsl #2]
   3b2c0:	cmp	r2, r3
   3b2c4:	add	r0, r2, #1
   3b2c8:	beq	3b2ec <__assert_fail@plt+0x28cf8>
   3b2cc:	ldr	r2, [sp, #476]	; 0x1dc
   3b2d0:	ldr	r2, [r2, r0, lsl #3]
   3b2d4:	ldr	r0, [sp, #476]	; 0x1dc
   3b2d8:	str	r2, [r5, r3, lsl #3]
   3b2dc:	ldr	r2, [r1, r3, lsl #2]
   3b2e0:	add	r2, r0, r2, lsl #3
   3b2e4:	ldr	r2, [r2, #12]
   3b2e8:	str	r2, [lr, r3, lsl #3]
   3b2ec:	add	r3, r3, #1
   3b2f0:	cmp	r3, ip
   3b2f4:	bne	3b2bc <__assert_fail@plt+0x28cc8>
   3b2f8:	b	3b044 <__assert_fail@plt+0x28a50>
   3b2fc:	ldrb	r3, [r9, #88]	; 0x58
   3b300:	tst	r3, #2
   3b304:	bne	3a5e0 <__assert_fail@plt+0x27fec>
   3b308:	b	3a608 <__assert_fail@plt+0x28014>
   3b30c:	add	r0, sp, #148	; 0x94
   3b310:	bl	33b38 <__assert_fail@plt+0x21544>
   3b314:	ldr	r0, [sp, #280]	; 0x118
   3b318:	bl	2f668 <__assert_fail@plt+0x1d074>
   3b31c:	ldr	r0, [sp, #264]	; 0x108
   3b320:	bl	2f668 <__assert_fail@plt+0x1d074>
   3b324:	b	3b058 <__assert_fail@plt+0x28a64>
   3b328:	ldr	sl, [r4, #40]	; 0x28
   3b32c:	cmp	sl, #0
   3b330:	bne	3a800 <__assert_fail@plt+0x2820c>
   3b334:	mov	r3, #12
   3b338:	ldr	r9, [sp, #68]	; 0x44
   3b33c:	str	r3, [sp, #36]	; 0x24
   3b340:	ldr	r4, [sp, #248]	; 0xf8
   3b344:	b	3b044 <__assert_fail@plt+0x28a50>
   3b348:	mov	r0, sl
   3b34c:	bl	2f668 <__assert_fail@plt+0x1d074>
   3b350:	mov	r0, r6
   3b354:	bl	2f668 <__assert_fail@plt+0x1d074>
   3b358:	add	r0, sp, #148	; 0x94
   3b35c:	bl	33b38 <__assert_fail@plt+0x21544>
   3b360:	ldr	r5, [sp, #116]	; 0x74
   3b364:	b	3afc0 <__assert_fail@plt+0x289cc>
   3b368:	mov	r3, #12
   3b36c:	ldr	r4, [sp, #248]	; 0xf8
   3b370:	str	r3, [sp, #36]	; 0x24
   3b374:	b	3b044 <__assert_fail@plt+0x28a50>
   3b378:	mov	r3, #8
   3b37c:	b	3a6a4 <__assert_fail@plt+0x280b0>
   3b380:	str	r1, [sp, #36]	; 0x24
   3b384:	str	r3, [sp, #116]	; 0x74
   3b388:	ldr	r9, [sp, #68]	; 0x44
   3b38c:	ldr	r4, [sp, #248]	; 0xf8
   3b390:	b	3b044 <__assert_fail@plt+0x28a50>
   3b394:	ldr	r4, [sp, #48]	; 0x30
   3b398:	ldr	r1, [sp, #172]	; 0xac
   3b39c:	sub	r2, r5, r1
   3b3a0:	ldr	r3, [sp, #180]	; 0xb4
   3b3a4:	cmp	r3, r2
   3b3a8:	bhi	3bdf8 <__assert_fail@plt+0x29804>
   3b3ac:	mov	r1, r5
   3b3b0:	add	r0, sp, #148	; 0x94
   3b3b4:	ldr	r2, [sp, #480]	; 0x1e0
   3b3b8:	bl	37320 <__assert_fail@plt+0x24d2c>
   3b3bc:	subs	r3, r0, #0
   3b3c0:	str	r3, [sp, #36]	; 0x24
   3b3c4:	beq	3bdf0 <__assert_fail@plt+0x297fc>
   3b3c8:	ldr	r9, [sp, #68]	; 0x44
   3b3cc:	ldr	r4, [sp, #248]	; 0xf8
   3b3d0:	b	3b044 <__assert_fail@plt+0x28a50>
   3b3d4:	ldrsb	r3, [sl, #52]	; 0x34
   3b3d8:	cmp	r3, #0
   3b3dc:	blt	3b450 <__assert_fail@plt+0x28e5c>
   3b3e0:	ldr	fp, [sp, #12]
   3b3e4:	ldr	r3, [sp, #20]
   3b3e8:	cmp	r3, #0
   3b3ec:	beq	3a9b8 <__assert_fail@plt+0x283c4>
   3b3f0:	ldr	r3, [sp, #20]
   3b3f4:	str	r3, [sp, #28]
   3b3f8:	b	3a840 <__assert_fail@plt+0x2824c>
   3b3fc:	mov	r5, r0
   3b400:	b	3a854 <__assert_fail@plt+0x28260>
   3b404:	mov	fp, r4
   3b408:	b	3a9b8 <__assert_fail@plt+0x283c4>
   3b40c:	ldr	sl, [r4, #44]	; 0x2c
   3b410:	b	3b32c <__assert_fail@plt+0x28d38>
   3b414:	ldr	r9, [sp, #68]	; 0x44
   3b418:	bl	2f668 <__assert_fail@plt+0x1d074>
   3b41c:	mov	r3, #12
   3b420:	mov	r0, sl
   3b424:	str	r3, [sp, #36]	; 0x24
   3b428:	bl	2f668 <__assert_fail@plt+0x1d074>
   3b42c:	ldr	r4, [sp, #248]	; 0xf8
   3b430:	b	3b044 <__assert_fail@plt+0x28a50>
   3b434:	mov	r3, r0
   3b438:	mov	r1, r4
   3b43c:	ldr	r2, [sl, #40]	; 0x28
   3b440:	add	r0, sp, #124	; 0x7c
   3b444:	bl	34fe8 <__assert_fail@plt+0x229f4>
   3b448:	mov	sl, r0
   3b44c:	b	3b32c <__assert_fail@plt+0x28d38>
   3b450:	mov	r1, sl
   3b454:	add	r0, sp, #148	; 0x94
   3b458:	ldr	r2, [sp, #12]
   3b45c:	bl	3723c <__assert_fail@plt+0x24c48>
   3b460:	subs	r3, r0, #0
   3b464:	str	r3, [sp, #28]
   3b468:	bne	3b3e0 <__assert_fail@plt+0x28dec>
   3b46c:	mvn	fp, #0
   3b470:	b	3a840 <__assert_fail@plt+0x2824c>
   3b474:	add	r4, sl, #8
   3b478:	add	r5, sl, #12
   3b47c:	mov	r1, r4
   3b480:	mov	r2, r5
   3b484:	mov	r3, #0
   3b488:	add	r0, sp, #148	; 0x94
   3b48c:	bl	37b8c <__assert_fail@plt+0x25598>
   3b490:	cmp	r0, #0
   3b494:	mov	fp, r0
   3b498:	str	r0, [sp, #124]	; 0x7c
   3b49c:	bne	3a9b8 <__assert_fail@plt+0x283c4>
   3b4a0:	ldrb	r3, [sl, #52]	; 0x34
   3b4a4:	tst	r3, #64	; 0x40
   3b4a8:	bne	3b548 <__assert_fail@plt+0x28f54>
   3b4ac:	mov	r2, #0
   3b4b0:	str	r2, [sp, #16]
   3b4b4:	b	3a82c <__assert_fail@plt+0x28238>
   3b4b8:	ldr	sl, [r4, #48]	; 0x30
   3b4bc:	b	3b32c <__assert_fail@plt+0x28d38>
   3b4c0:	mov	r7, r3
   3b4c4:	mov	r0, sl
   3b4c8:	bl	2f668 <__assert_fail@plt+0x1d074>
   3b4cc:	ldr	r0, [sp, #24]
   3b4d0:	bl	2f668 <__assert_fail@plt+0x1d074>
   3b4d4:	cmp	r7, #1
   3b4d8:	beq	3afb4 <__assert_fail@plt+0x289c0>
   3b4dc:	str	r7, [sp, #36]	; 0x24
   3b4e0:	ldr	r9, [sp, #68]	; 0x44
   3b4e4:	ldr	r4, [sp, #248]	; 0xf8
   3b4e8:	b	3b044 <__assert_fail@plt+0x28a50>
   3b4ec:	mov	r3, #12
   3b4f0:	mov	r0, sl
   3b4f4:	ldr	r9, [sp, #68]	; 0x44
   3b4f8:	str	r3, [sp, #36]	; 0x24
   3b4fc:	bl	2f668 <__assert_fail@plt+0x1d074>
   3b500:	mov	r0, r6
   3b504:	bl	2f668 <__assert_fail@plt+0x1d074>
   3b508:	b	3abec <__assert_fail@plt+0x285f8>
   3b50c:	str	r6, [sp, #24]
   3b510:	b	3b4c4 <__assert_fail@plt+0x28ed0>
   3b514:	mov	r3, r5
   3b518:	mov	r2, r6
   3b51c:	ldr	r0, [sp, #12]
   3b520:	mov	r1, sl
   3b524:	bl	354ec <__assert_fail@plt+0x22ef8>
   3b528:	mov	r7, r0
   3b52c:	mov	r0, r6
   3b530:	bl	2f668 <__assert_fail@plt+0x1d074>
   3b534:	cmp	r7, #0
   3b538:	beq	3b158 <__assert_fail@plt+0x28b64>
   3b53c:	mov	r3, #0
   3b540:	str	r3, [sp, #24]
   3b544:	b	3b4c4 <__assert_fail@plt+0x28ed0>
   3b548:	mov	r2, r5
   3b54c:	mov	r1, r4
   3b550:	add	r0, sp, #148	; 0x94
   3b554:	bl	39704 <__assert_fail@plt+0x27110>
   3b558:	cmp	r0, #0
   3b55c:	mov	fp, r0
   3b560:	str	r0, [sp, #124]	; 0x7c
   3b564:	bne	3a9b8 <__assert_fail@plt+0x283c4>
   3b568:	ldrb	r3, [sl, #52]	; 0x34
   3b56c:	b	3b4ac <__assert_fail@plt+0x28eb8>
   3b570:	cmp	r5, r3
   3b574:	ldrne	r3, [r7, r3, lsl #2]
   3b578:	moveq	r3, r6
   3b57c:	cmp	r5, r0
   3b580:	moveq	r0, r6
   3b584:	str	r3, [r2]
   3b588:	ldrne	r0, [r7, r0, lsl #2]
   3b58c:	b	3b238 <__assert_fail@plt+0x28c44>
   3b590:	ldr	r2, [sp, #32]
   3b594:	ldrb	r3, [r9, #88]	; 0x58
   3b598:	ldr	r2, [r2]
   3b59c:	tst	r3, #1
   3b5a0:	str	r2, [sp, #16]
   3b5a4:	beq	3bc04 <__assert_fail@plt+0x29610>
   3b5a8:	ldr	r3, [r9, #76]	; 0x4c
   3b5ac:	cmp	r3, r5
   3b5b0:	ble	3bc04 <__assert_fail@plt+0x29610>
   3b5b4:	add	r1, sp, #296	; 0x128
   3b5b8:	mov	r2, #2
   3b5bc:	mov	r3, #16
   3b5c0:	mov	r0, #48	; 0x30
   3b5c4:	str	r1, [sp, #20]
   3b5c8:	str	r5, [sp, #136]	; 0x88
   3b5cc:	str	r2, [sp, #140]	; 0x8c
   3b5d0:	str	r5, [sp, #144]	; 0x90
   3b5d4:	str	r5, [sp, #284]	; 0x11c
   3b5d8:	str	r3, [sp, #288]	; 0x120
   3b5dc:	str	r1, [sp, #292]	; 0x124
   3b5e0:	bl	31b54 <__assert_fail@plt+0x1f560>
   3b5e4:	cmp	r0, #0
   3b5e8:	str	r0, [sp, #144]	; 0x90
   3b5ec:	beq	3b368 <__assert_fail@plt+0x28d74>
   3b5f0:	ldr	r1, [sp, #16]
   3b5f4:	add	r2, sp, #124	; 0x7c
   3b5f8:	ldr	r3, [sp, #284]	; 0x11c
   3b5fc:	str	r2, [sp, #28]
   3b600:	ldr	sl, [r1, #72]	; 0x48
   3b604:	str	r5, [sp, #124]	; 0x7c
   3b608:	ldr	r1, [sp, #472]	; 0x1d8
   3b60c:	str	r5, [sp, #128]	; 0x80
   3b610:	str	r5, [sp, #132]	; 0x84
   3b614:	cmp	r3, r1
   3b618:	add	r3, sp, #136	; 0x88
   3b61c:	str	r3, [sp, #12]
   3b620:	bcc	3bc50 <__assert_fail@plt+0x2965c>
   3b624:	ldr	r3, [sp, #472]	; 0x1d8
   3b628:	str	r3, [sp, #284]	; 0x11c
   3b62c:	ldr	r0, [sp, #292]	; 0x124
   3b630:	ldr	r3, [sp, #472]	; 0x1d8
   3b634:	ldr	r1, [sp, #476]	; 0x1dc
   3b638:	str	r0, [sp, #32]
   3b63c:	lsl	r2, r3, #3
   3b640:	lsl	r3, r3, #4
   3b644:	mov	r4, r1
   3b648:	str	r2, [sp, #40]	; 0x28
   3b64c:	str	r3, [sp, #48]	; 0x30
   3b650:	bl	12024 <memcpy@plt>
   3b654:	ldr	r5, [r4], #4
   3b658:	str	r9, [sp, #24]
   3b65c:	ldr	fp, [sp, #472]	; 0x1d8
   3b660:	str	r4, [sp, #44]	; 0x2c
   3b664:	str	r5, [sp, #120]	; 0x78
   3b668:	ldr	r3, [sp, #476]	; 0x1dc
   3b66c:	ldr	r3, [r3, #4]
   3b670:	cmp	r5, r3
   3b674:	bgt	3bd44 <__assert_fail@plt+0x29750>
   3b678:	ldr	r2, [sp, #16]
   3b67c:	lsl	r4, sl, #3
   3b680:	mov	r6, sl
   3b684:	ldr	r1, [r2]
   3b688:	add	r0, r1, r4
   3b68c:	ldrb	r2, [r0, #4]
   3b690:	cmp	r2, #8
   3b694:	beq	3b8a8 <__assert_fail@plt+0x292b4>
   3b698:	cmp	r2, #9
   3b69c:	beq	3b90c <__assert_fail@plt+0x29318>
   3b6a0:	cmp	r3, r5
   3b6a4:	beq	3b804 <__assert_fail@plt+0x29210>
   3b6a8:	ldr	r3, [sp, #12]
   3b6ac:	cmp	r3, #0
   3b6b0:	beq	3b6cc <__assert_fail@plt+0x290d8>
   3b6b4:	mov	r2, sl
   3b6b8:	add	r1, sp, #132	; 0x84
   3b6bc:	ldr	r0, [sp, #128]	; 0x80
   3b6c0:	bl	343b4 <__assert_fail@plt+0x21dc0>
   3b6c4:	cmp	r0, #0
   3b6c8:	bne	3b81c <__assert_fail@plt+0x29228>
   3b6cc:	ldr	r5, [sp, #232]	; 0xe8
   3b6d0:	ldr	r0, [r5]
   3b6d4:	add	r1, r0, r4
   3b6d8:	ldrb	r3, [r1, #4]
   3b6dc:	tst	r3, #8
   3b6e0:	beq	3b77c <__assert_fail@plt+0x29188>
   3b6e4:	ldr	r5, [r5, #20]
   3b6e8:	add	r4, sl, sl, lsl #1
   3b6ec:	add	r1, sp, #132	; 0x84
   3b6f0:	mov	r2, sl
   3b6f4:	ldr	lr, [sp, #120]	; 0x78
   3b6f8:	ldr	r0, [sp, #128]	; 0x80
   3b6fc:	add	r4, r5, r4, lsl #2
   3b700:	ldr	ip, [sp, #248]	; 0xf8
   3b704:	ldr	r5, [ip, lr, lsl #2]
   3b708:	bl	343b4 <__assert_fail@plt+0x21dc0>
   3b70c:	cmp	r0, #0
   3b710:	beq	3bab0 <__assert_fail@plt+0x294bc>
   3b714:	ldr	r6, [r4, #4]
   3b718:	cmp	r6, #0
   3b71c:	ble	3bb78 <__assert_fail@plt+0x29584>
   3b720:	ldr	r3, [r4, #8]
   3b724:	add	r8, r5, #12
   3b728:	mvn	sl, #0
   3b72c:	mov	r4, #0
   3b730:	ldr	r7, [r5, #8]
   3b734:	sub	r9, r3, #4
   3b738:	ldr	r5, [r9, #4]!
   3b73c:	mov	r1, r8
   3b740:	mov	r0, r7
   3b744:	add	r4, r4, #1
   3b748:	mov	r2, r5
   3b74c:	bl	343b4 <__assert_fail@plt+0x21dc0>
   3b750:	cmp	r0, #0
   3b754:	beq	3b764 <__assert_fail@plt+0x29170>
   3b758:	cmn	sl, #1
   3b75c:	bne	3b964 <__assert_fail@plt+0x29370>
   3b760:	mov	sl, r5
   3b764:	cmp	r4, r6
   3b768:	bne	3b738 <__assert_fail@plt+0x29144>
   3b76c:	cmp	sl, #0
   3b770:	blt	3bb70 <__assert_fail@plt+0x2957c>
   3b774:	ldr	r5, [sp, #120]	; 0x78
   3b778:	b	3b668 <__assert_fail@plt+0x29074>
   3b77c:	ldrb	r2, [r1, #6]
   3b780:	tst	r2, #16
   3b784:	bne	3ba80 <__assert_fail@plt+0x2948c>
   3b788:	cmp	r3, #4
   3b78c:	beq	3bae4 <__assert_fail@plt+0x294f0>
   3b790:	ldr	r7, [sp, #120]	; 0x78
   3b794:	mov	r2, r7
   3b798:	add	r0, sp, #148	; 0x94
   3b79c:	bl	37104 <__assert_fail@plt+0x24b10>
   3b7a0:	cmp	r0, #0
   3b7a4:	beq	3bb78 <__assert_fail@plt+0x29584>
   3b7a8:	ldr	r2, [r5, #12]
   3b7ac:	add	r3, r7, #1
   3b7b0:	ldr	sl, [r2, r6, lsl #2]
   3b7b4:	str	r3, [sp, #120]	; 0x78
   3b7b8:	ldr	r2, [sp, #12]
   3b7bc:	cmp	r2, #0
   3b7c0:	beq	3b7f8 <__assert_fail@plt+0x29204>
   3b7c4:	ldr	r2, [sp, #240]	; 0xf0
   3b7c8:	cmp	r3, r2
   3b7cc:	bgt	3bb78 <__assert_fail@plt+0x29584>
   3b7d0:	ldr	r2, [sp, #248]	; 0xf8
   3b7d4:	ldr	r3, [r2, r3, lsl #2]
   3b7d8:	cmp	r3, #0
   3b7dc:	beq	3bb78 <__assert_fail@plt+0x29584>
   3b7e0:	mov	r2, sl
   3b7e4:	add	r1, r3, #12
   3b7e8:	ldr	r0, [r3, #8]
   3b7ec:	bl	343b4 <__assert_fail@plt+0x21dc0>
   3b7f0:	cmp	r0, #0
   3b7f4:	beq	3bb78 <__assert_fail@plt+0x29584>
   3b7f8:	mov	r3, #0
   3b7fc:	str	r3, [sp, #128]	; 0x80
   3b800:	b	3b76c <__assert_fail@plt+0x29178>
   3b804:	ldr	r3, [sp, #244]	; 0xf4
   3b808:	cmp	sl, r3
   3b80c:	bne	3b6a8 <__assert_fail@plt+0x290b4>
   3b810:	ldr	r3, [sp, #12]
   3b814:	cmp	r3, #0
   3b818:	beq	3bdb0 <__assert_fail@plt+0x297bc>
   3b81c:	ldr	r1, [sp, #44]	; 0x2c
   3b820:	mov	r3, #0
   3b824:	ldr	r2, [sp, #476]	; 0x1dc
   3b828:	ldr	r2, [r2, r3, lsl #3]
   3b82c:	cmp	r2, #0
   3b830:	blt	3b840 <__assert_fail@plt+0x2924c>
   3b834:	ldr	r2, [r1, r3, lsl #3]
   3b838:	cmn	r2, #1
   3b83c:	beq	3b8d8 <__assert_fail@plt+0x292e4>
   3b840:	add	r3, r3, #1
   3b844:	cmp	fp, r3
   3b848:	bne	3b824 <__assert_fail@plt+0x29230>
   3b84c:	ldr	r9, [sp, #24]
   3b850:	ldr	r0, [sp, #132]	; 0x84
   3b854:	bl	2f668 <__assert_fail@plt+0x1d074>
   3b858:	ldr	r3, [sp, #20]
   3b85c:	ldr	r0, [sp, #292]	; 0x124
   3b860:	cmp	r0, r3
   3b864:	beq	3bdd4 <__assert_fail@plt+0x297e0>
   3b868:	bl	2f668 <__assert_fail@plt+0x1d074>
   3b86c:	ldr	r1, [sp, #20]
   3b870:	mov	r2, #0
   3b874:	mov	r3, #16
   3b878:	str	r2, [sp, #284]	; 0x11c
   3b87c:	str	r3, [sp, #288]	; 0x120
   3b880:	str	r1, [sp, #292]	; 0x124
   3b884:	ldr	r1, [sp, #12]
   3b888:	cmp	r1, r2
   3b88c:	beq	3bd8c <__assert_fail@plt+0x29798>
   3b890:	ldr	r0, [sp, #12]
   3b894:	bl	35c00 <__assert_fail@plt+0x2360c>
   3b898:	ldr	r4, [sp, #248]	; 0xf8
   3b89c:	ldr	r3, [sp, #476]	; 0x1dc
   3b8a0:	ldr	r3, [r3]
   3b8a4:	b	3b1fc <__assert_fail@plt+0x28c08>
   3b8a8:	ldr	r2, [r1, sl, lsl #3]
   3b8ac:	add	r2, r2, #1
   3b8b0:	cmp	fp, r2
   3b8b4:	ble	3b6a0 <__assert_fail@plt+0x290ac>
   3b8b8:	ldr	r3, [sp, #476]	; 0x1dc
   3b8bc:	ldr	r1, [sp, #476]	; 0x1dc
   3b8c0:	add	r3, r3, r2, lsl #3
   3b8c4:	str	r5, [r1, r2, lsl #3]
   3b8c8:	mvn	r2, #0
   3b8cc:	str	r2, [r3, #4]
   3b8d0:	ldr	r3, [r1, #4]
   3b8d4:	b	3b6a0 <__assert_fail@plt+0x290ac>
   3b8d8:	mov	r2, fp
   3b8dc:	ldr	r0, [sp, #12]
   3b8e0:	ldr	ip, [sp, #28]
   3b8e4:	ldr	r1, [sp, #32]
   3b8e8:	ldr	r3, [sp, #476]	; 0x1dc
   3b8ec:	stm	sp, {r1, ip}
   3b8f0:	add	r1, sp, #120	; 0x78
   3b8f4:	bl	3428c <__assert_fail@plt+0x21c98>
   3b8f8:	subs	sl, r0, #0
   3b8fc:	blt	3b84c <__assert_fail@plt+0x29258>
   3b900:	mov	r6, sl
   3b904:	lsl	r4, sl, #3
   3b908:	b	3b6cc <__assert_fail@plt+0x290d8>
   3b90c:	ldr	r2, [r0]
   3b910:	add	r2, r2, #1
   3b914:	cmp	fp, r2
   3b918:	ble	3b6a0 <__assert_fail@plt+0x290ac>
   3b91c:	ldr	r3, [sp, #476]	; 0x1dc
   3b920:	ldr	r1, [r3, r2, lsl #3]
   3b924:	add	r3, r3, r2, lsl #3
   3b928:	cmp	r5, r1
   3b92c:	bgt	3bcf4 <__assert_fail@plt+0x29700>
   3b930:	ldrb	r1, [r0, #6]
   3b934:	tst	r1, #8
   3b938:	beq	3bc70 <__assert_fail@plt+0x2967c>
   3b93c:	ldr	r1, [sp, #32]
   3b940:	ldr	r2, [r1, r2, lsl #3]
   3b944:	cmn	r2, #1
   3b948:	beq	3bc70 <__assert_fail@plt+0x2967c>
   3b94c:	ldr	r2, [sp, #40]	; 0x28
   3b950:	ldr	r0, [sp, #476]	; 0x1dc
   3b954:	bl	12024 <memcpy@plt>
   3b958:	ldr	r3, [sp, #476]	; 0x1dc
   3b95c:	ldr	r3, [r3, #4]
   3b960:	b	3b6a0 <__assert_fail@plt+0x290ac>
   3b964:	add	r1, sp, #132	; 0x84
   3b968:	mov	r2, sl
   3b96c:	ldr	r0, [sp, #128]	; 0x80
   3b970:	bl	343b4 <__assert_fail@plt+0x21dc0>
   3b974:	cmp	r0, #0
   3b978:	bne	3bbfc <__assert_fail@plt+0x29608>
   3b97c:	ldr	r0, [sp, #12]
   3b980:	cmp	r0, #0
   3b984:	beq	3b76c <__assert_fail@plt+0x29178>
   3b988:	ldr	r4, [r0]
   3b98c:	ldmib	r0, {r1, r3}
   3b990:	ldr	r6, [sp, #120]	; 0x78
   3b994:	add	r2, r4, #1
   3b998:	cmp	r2, r1
   3b99c:	str	r2, [r0]
   3b9a0:	beq	3bd18 <__assert_fail@plt+0x29724>
   3b9a4:	add	r2, r4, r4, lsl #1
   3b9a8:	ldr	r0, [sp, #48]	; 0x30
   3b9ac:	lsl	r4, r2, #3
   3b9b0:	str	r6, [r3, r2, lsl #3]
   3b9b4:	add	r6, r3, r4
   3b9b8:	str	r5, [r6, #4]
   3b9bc:	bl	31b54 <__assert_fail@plt+0x1f560>
   3b9c0:	ldr	r5, [sp, #12]
   3b9c4:	ldr	r3, [r5, #8]
   3b9c8:	str	r0, [r6, #8]
   3b9cc:	add	r3, r3, r4
   3b9d0:	ldr	r0, [r3, #8]
   3b9d4:	cmp	r0, #0
   3b9d8:	beq	3ba24 <__assert_fail@plt+0x29430>
   3b9dc:	ldr	r6, [sp, #40]	; 0x28
   3b9e0:	ldr	r1, [sp, #476]	; 0x1dc
   3b9e4:	mov	r2, r6
   3b9e8:	bl	12024 <memcpy@plt>
   3b9ec:	ldr	r3, [r5, #8]
   3b9f0:	mov	r2, r6
   3b9f4:	ldr	r1, [sp, #32]
   3b9f8:	add	r3, r3, r4
   3b9fc:	ldr	r0, [r3, #8]
   3ba00:	add	r0, r0, r6
   3ba04:	bl	12024 <memcpy@plt>
   3ba08:	ldr	r0, [r5, #8]
   3ba0c:	ldr	r1, [sp, #28]
   3ba10:	add	r0, r0, r4
   3ba14:	add	r0, r0, #12
   3ba18:	bl	34df4 <__assert_fail@plt+0x22800>
   3ba1c:	cmp	r0, #0
   3ba20:	beq	3b76c <__assert_fail@plt+0x29178>
   3ba24:	ldr	r9, [sp, #24]
   3ba28:	ldr	r0, [sp, #132]	; 0x84
   3ba2c:	bl	2f668 <__assert_fail@plt+0x1d074>
   3ba30:	ldr	r3, [sp, #20]
   3ba34:	ldr	r0, [sp, #292]	; 0x124
   3ba38:	cmp	r0, r3
   3ba3c:	beq	3bd9c <__assert_fail@plt+0x297a8>
   3ba40:	bl	2f668 <__assert_fail@plt+0x1d074>
   3ba44:	ldr	r1, [sp, #20]
   3ba48:	mov	r2, #0
   3ba4c:	mov	r3, #16
   3ba50:	str	r2, [sp, #284]	; 0x11c
   3ba54:	str	r3, [sp, #288]	; 0x120
   3ba58:	str	r1, [sp, #292]	; 0x124
   3ba5c:	ldr	r1, [sp, #12]
   3ba60:	cmp	r1, r2
   3ba64:	beq	3b368 <__assert_fail@plt+0x28d74>
   3ba68:	mov	r3, #12
   3ba6c:	ldr	r0, [sp, #12]
   3ba70:	str	r3, [sp, #36]	; 0x24
   3ba74:	bl	35c00 <__assert_fail@plt+0x2360c>
   3ba78:	ldr	r4, [sp, #248]	; 0xf8
   3ba7c:	b	3b044 <__assert_fail@plt+0x28a50>
   3ba80:	ldr	ip, [sp, #120]	; 0x78
   3ba84:	add	r3, sp, #148	; 0x94
   3ba88:	mov	r2, sl
   3ba8c:	add	r1, r5, #128	; 0x80
   3ba90:	str	ip, [sp]
   3ba94:	bl	38ca8 <__assert_fail@plt+0x266b4>
   3ba98:	subs	r7, r0, #0
   3ba9c:	bne	3bcec <__assert_fail@plt+0x296f8>
   3baa0:	ldr	r1, [r5]
   3baa4:	ldr	r7, [sp, #120]	; 0x78
   3baa8:	add	r1, r1, r4
   3baac:	b	3b794 <__assert_fail@plt+0x291a0>
   3bab0:	mov	r1, sl
   3bab4:	ldr	r0, [sp, #28]
   3bab8:	bl	33de0 <__assert_fail@plt+0x217ec>
   3babc:	cmp	r0, #0
   3bac0:	bne	3b714 <__assert_fail@plt+0x29120>
   3bac4:	ldr	r9, [sp, #24]
   3bac8:	ldr	r0, [sp, #132]	; 0x84
   3bacc:	bl	2f668 <__assert_fail@plt+0x1d074>
   3bad0:	ldr	r3, [sp, #20]
   3bad4:	ldr	r0, [sp, #292]	; 0x124
   3bad8:	cmp	r0, r3
   3badc:	bne	3ba40 <__assert_fail@plt+0x2944c>
   3bae0:	b	3ba44 <__assert_fail@plt+0x29450>
   3bae4:	ldr	r3, [r1]
   3bae8:	add	r3, r3, #1
   3baec:	cmp	fp, r3
   3baf0:	ble	3bc80 <__assert_fail@plt+0x2968c>
   3baf4:	ldr	r2, [sp, #476]	; 0x1dc
   3baf8:	ldr	r1, [sp, #476]	; 0x1dc
   3bafc:	add	r2, r2, r3, lsl #3
   3bb00:	ldr	r0, [r1, r3, lsl #3]
   3bb04:	ldr	r3, [sp, #12]
   3bb08:	cmp	r3, #0
   3bb0c:	ldr	r3, [r2, #4]
   3bb10:	sub	r7, r3, r0
   3bb14:	beq	3bce4 <__assert_fail@plt+0x296f0>
   3bb18:	cmn	r0, #1
   3bb1c:	beq	3bb78 <__assert_fail@plt+0x29584>
   3bb20:	cmn	r3, #1
   3bb24:	beq	3bb78 <__assert_fail@plt+0x29584>
   3bb28:	cmp	r7, #0
   3bb2c:	beq	3bc8c <__assert_fail@plt+0x29698>
   3bb30:	ldr	r4, [sp, #120]	; 0x78
   3bb34:	ldr	r1, [sp, #152]	; 0x98
   3bb38:	ldr	r3, [sp, #176]	; 0xb0
   3bb3c:	sub	r3, r3, r4
   3bb40:	cmp	r7, r3
   3bb44:	bgt	3bb78 <__assert_fail@plt+0x29584>
   3bb48:	add	r0, r1, r0
   3bb4c:	mov	r2, r7
   3bb50:	add	r1, r1, r4
   3bb54:	bl	12084 <memcmp@plt>
   3bb58:	cmp	r0, #0
   3bb5c:	bne	3bb78 <__assert_fail@plt+0x29584>
   3bb60:	ldr	r2, [r5, #12]
   3bb64:	add	r3, r4, r7
   3bb68:	ldr	sl, [r2, sl, lsl #2]
   3bb6c:	b	3b7b4 <__assert_fail@plt+0x291c0>
   3bb70:	cmn	sl, #2
   3bb74:	beq	3bac4 <__assert_fail@plt+0x294d0>
   3bb78:	mov	r2, fp
   3bb7c:	ldr	r0, [sp, #12]
   3bb80:	ldr	ip, [sp, #28]
   3bb84:	ldr	r1, [sp, #32]
   3bb88:	ldr	r3, [sp, #476]	; 0x1dc
   3bb8c:	stm	sp, {r1, ip}
   3bb90:	add	r1, sp, #120	; 0x78
   3bb94:	bl	3428c <__assert_fail@plt+0x21c98>
   3bb98:	subs	sl, r0, #0
   3bb9c:	bge	3b774 <__assert_fail@plt+0x29180>
   3bba0:	ldr	r9, [sp, #24]
   3bba4:	ldr	r0, [sp, #132]	; 0x84
   3bba8:	bl	2f668 <__assert_fail@plt+0x1d074>
   3bbac:	ldr	r3, [sp, #20]
   3bbb0:	ldr	r0, [sp, #292]	; 0x124
   3bbb4:	cmp	r0, r3
   3bbb8:	beq	3bbc0 <__assert_fail@plt+0x295cc>
   3bbbc:	bl	2f668 <__assert_fail@plt+0x1d074>
   3bbc0:	ldr	r1, [sp, #20]
   3bbc4:	mov	r2, #0
   3bbc8:	mov	r3, #16
   3bbcc:	str	r2, [sp, #284]	; 0x11c
   3bbd0:	str	r3, [sp, #288]	; 0x120
   3bbd4:	str	r1, [sp, #292]	; 0x124
   3bbd8:	ldr	r1, [sp, #12]
   3bbdc:	cmp	r1, r2
   3bbe0:	beq	3abe4 <__assert_fail@plt+0x285f0>
   3bbe4:	mov	r3, #1
   3bbe8:	ldr	r0, [sp, #12]
   3bbec:	str	r3, [sp, #36]	; 0x24
   3bbf0:	bl	35c00 <__assert_fail@plt+0x2360c>
   3bbf4:	ldr	r4, [sp, #248]	; 0xf8
   3bbf8:	b	3b044 <__assert_fail@plt+0x28a50>
   3bbfc:	mov	sl, r5
   3bc00:	b	3b76c <__assert_fail@plt+0x29178>
   3bc04:	ldr	r2, [sp, #16]
   3bc08:	mov	r3, #0
   3bc0c:	add	ip, sp, #296	; 0x128
   3bc10:	add	r0, sp, #124	; 0x7c
   3bc14:	mov	r1, #2
   3bc18:	str	r3, [sp, #12]
   3bc1c:	str	ip, [sp, #20]
   3bc20:	str	r0, [sp, #28]
   3bc24:	ldr	sl, [r2, #72]	; 0x48
   3bc28:	mov	r2, #16
   3bc2c:	str	r3, [sp, #124]	; 0x7c
   3bc30:	str	r3, [sp, #128]	; 0x80
   3bc34:	str	r3, [sp, #132]	; 0x84
   3bc38:	str	r3, [sp, #136]	; 0x88
   3bc3c:	str	r1, [sp, #140]	; 0x8c
   3bc40:	str	r3, [sp, #144]	; 0x90
   3bc44:	str	r3, [sp, #284]	; 0x11c
   3bc48:	str	r2, [sp, #288]	; 0x120
   3bc4c:	str	ip, [sp, #292]	; 0x124
   3bc50:	mov	r3, #8
   3bc54:	add	r0, sp, #284	; 0x11c
   3bc58:	ldr	r2, [sp, #20]
   3bc5c:	ldr	r1, [sp, #472]	; 0x1d8
   3bc60:	bl	419ec <__assert_fail@plt+0x2f3f8>
   3bc64:	cmp	r0, #0
   3bc68:	bne	3b62c <__assert_fail@plt+0x29038>
   3bc6c:	b	3bad0 <__assert_fail@plt+0x294dc>
   3bc70:	str	r5, [r3, #4]
   3bc74:	ldr	r3, [sp, #476]	; 0x1dc
   3bc78:	ldr	r3, [r3, #4]
   3bc7c:	b	3b6a0 <__assert_fail@plt+0x290ac>
   3bc80:	ldr	r3, [sp, #12]
   3bc84:	cmp	r3, #0
   3bc88:	bne	3bb78 <__assert_fail@plt+0x29584>
   3bc8c:	mov	r1, sl
   3bc90:	ldr	r0, [sp, #28]
   3bc94:	bl	33de0 <__assert_fail@plt+0x217ec>
   3bc98:	cmp	r0, #0
   3bc9c:	beq	3bac4 <__assert_fail@plt+0x294d0>
   3bca0:	ldr	r3, [r5, #20]
   3bca4:	add	sl, sl, sl, lsl #1
   3bca8:	ldr	r7, [sp, #120]	; 0x78
   3bcac:	ldr	r1, [sp, #248]	; 0xf8
   3bcb0:	add	r3, r3, sl, lsl #2
   3bcb4:	ldr	r2, [r3, #8]
   3bcb8:	ldr	r3, [r1, r7, lsl #2]
   3bcbc:	ldr	sl, [r2]
   3bcc0:	add	r1, r3, #12
   3bcc4:	ldr	r0, [r3, #8]
   3bcc8:	mov	r2, sl
   3bccc:	bl	343b4 <__assert_fail@plt+0x21dc0>
   3bcd0:	cmp	r0, #0
   3bcd4:	bne	3b76c <__assert_fail@plt+0x29178>
   3bcd8:	ldr	r1, [r5]
   3bcdc:	add	r1, r1, r4
   3bce0:	b	3b794 <__assert_fail@plt+0x291a0>
   3bce4:	cmp	r7, #0
   3bce8:	beq	3bc8c <__assert_fail@plt+0x29698>
   3bcec:	ldr	r4, [sp, #120]	; 0x78
   3bcf0:	b	3bb60 <__assert_fail@plt+0x2956c>
   3bcf4:	str	r5, [r3, #4]
   3bcf8:	ldr	r0, [sp, #32]
   3bcfc:	ldr	r2, [sp, #40]	; 0x28
   3bd00:	ldr	r1, [sp, #476]	; 0x1dc
   3bd04:	bl	12024 <memcpy@plt>
   3bd08:	ldr	r5, [sp, #120]	; 0x78
   3bd0c:	ldr	r3, [sp, #476]	; 0x1dc
   3bd10:	ldr	r3, [r3, #4]
   3bd14:	b	3b6a0 <__assert_fail@plt+0x290ac>
   3bd18:	mov	r1, #48	; 0x30
   3bd1c:	mov	r0, r3
   3bd20:	mul	r1, r1, r2
   3bd24:	bl	32624 <__assert_fail@plt+0x20030>
   3bd28:	subs	r3, r0, #0
   3bd2c:	beq	3ba24 <__assert_fail@plt+0x29430>
   3bd30:	ldr	r1, [sp, #12]
   3bd34:	ldr	r2, [r1, #4]
   3bd38:	lsl	r2, r2, #1
   3bd3c:	strd	r2, [r1, #4]
   3bd40:	b	3b9a4 <__assert_fail@plt+0x293b0>
   3bd44:	ldr	r9, [sp, #24]
   3bd48:	ldr	r0, [sp, #132]	; 0x84
   3bd4c:	bl	2f668 <__assert_fail@plt+0x1d074>
   3bd50:	ldr	r3, [sp, #20]
   3bd54:	ldr	r0, [sp, #292]	; 0x124
   3bd58:	cmp	r0, r3
   3bd5c:	beq	3bd64 <__assert_fail@plt+0x29770>
   3bd60:	bl	2f668 <__assert_fail@plt+0x1d074>
   3bd64:	ldr	r0, [sp, #12]
   3bd68:	mov	r2, #0
   3bd6c:	ldr	r3, [sp, #20]
   3bd70:	str	r2, [sp, #284]	; 0x11c
   3bd74:	cmp	r0, r2
   3bd78:	str	r3, [sp, #292]	; 0x124
   3bd7c:	mov	r3, #16
   3bd80:	str	r3, [sp, #288]	; 0x120
   3bd84:	beq	3bd8c <__assert_fail@plt+0x29798>
   3bd88:	bl	35c00 <__assert_fail@plt+0x2360c>
   3bd8c:	ldr	r4, [sp, #248]	; 0xf8
   3bd90:	ldr	r3, [sp, #476]	; 0x1dc
   3bd94:	ldr	r3, [r3]
   3bd98:	b	3b1fc <__assert_fail@plt+0x28c08>
   3bd9c:	mov	r2, #0
   3bda0:	mov	r3, #16
   3bda4:	str	r2, [sp, #284]	; 0x11c
   3bda8:	str	r3, [sp, #288]	; 0x120
   3bdac:	b	3ba68 <__assert_fail@plt+0x29474>
   3bdb0:	ldr	r9, [sp, #24]
   3bdb4:	ldr	r0, [sp, #132]	; 0x84
   3bdb8:	bl	2f668 <__assert_fail@plt+0x1d074>
   3bdbc:	ldr	r3, [sp, #20]
   3bdc0:	ldr	r0, [sp, #292]	; 0x124
   3bdc4:	cmp	r0, r3
   3bdc8:	beq	3bd8c <__assert_fail@plt+0x29798>
   3bdcc:	bl	2f668 <__assert_fail@plt+0x1d074>
   3bdd0:	b	3bd8c <__assert_fail@plt+0x29798>
   3bdd4:	mov	r2, #0
   3bdd8:	mov	r3, #16
   3bddc:	str	r2, [sp, #284]	; 0x11c
   3bde0:	str	r3, [sp, #288]	; 0x120
   3bde4:	b	3b890 <__assert_fail@plt+0x2929c>
   3bde8:	ldr	r9, [sp, #68]	; 0x44
   3bdec:	b	3b198 <__assert_fail@plt+0x28ba4>
   3bdf0:	ldr	r1, [sp, #172]	; 0xac
   3bdf4:	sub	r2, r5, r1
   3bdf8:	ldr	r0, [sp, #176]	; 0xb0
   3bdfc:	mov	r3, r4
   3be00:	cmp	r0, r2
   3be04:	bls	3be14 <__assert_fail@plt+0x29820>
   3be08:	ldr	r3, [sp, #152]	; 0x98
   3be0c:	ldrb	r3, [r3, r2]
   3be10:	add	r3, r4, r3
   3be14:	ldrb	r3, [r3]
   3be18:	cmp	r3, #0
   3be1c:	bne	3a74c <__assert_fail@plt+0x28158>
   3be20:	ldr	r2, [sp, #76]	; 0x4c
   3be24:	ldr	r3, [sp, #96]	; 0x60
   3be28:	add	r5, r5, r3
   3be2c:	ldr	r3, [sp, #64]	; 0x40
   3be30:	str	r5, [sp, #116]	; 0x74
   3be34:	cmp	r5, r3
   3be38:	movle	r3, #0
   3be3c:	movgt	r3, #1
   3be40:	cmp	r5, r2
   3be44:	orrlt	r3, r3, #1
   3be48:	cmp	r3, #0
   3be4c:	beq	3b39c <__assert_fail@plt+0x28da8>
   3be50:	b	3abe0 <__assert_fail@plt+0x285ec>
   3be54:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3be58:	mov	r4, r3
   3be5c:	ldr	r3, [r3, #4]
   3be60:	ldr	r5, [r0, #84]	; 0x54
   3be64:	strd	r6, [sp, #8]
   3be68:	strd	sl, [sp, #24]
   3be6c:	mov	fp, r2
   3be70:	mov	sl, r1
   3be74:	str	lr, [sp, #32]
   3be78:	lsl	lr, r2, #2
   3be7c:	ldr	r2, [r0, #100]	; 0x64
   3be80:	strd	r8, [sp, #16]
   3be84:	sub	sp, sp, #108	; 0x6c
   3be88:	str	lr, [sp, #24]
   3be8c:	ldr	r1, [r2, fp, lsl #2]
   3be90:	add	r2, r2, lr
   3be94:	strd	r0, [sp, #16]
   3be98:	mov	r0, #0
   3be9c:	cmp	r1, r0
   3bea0:	str	r0, [sp, #72]	; 0x48
   3bea4:	beq	3c2fc <__assert_fail@plt+0x29d08>
   3bea8:	cmp	r3, #0
   3beac:	bne	3bee8 <__assert_fail@plt+0x298f4>
   3beb0:	ldr	r1, [sl]
   3beb4:	str	r3, [r1, fp, lsl #2]
   3beb8:	ldr	r3, [r2]
   3bebc:	ldrb	r3, [r3, #52]	; 0x34
   3bec0:	ands	r3, r3, #64	; 0x40
   3bec4:	bne	3c004 <__assert_fail@plt+0x29a10>
   3bec8:	mov	r0, r3
   3becc:	add	sp, sp, #108	; 0x6c
   3bed0:	ldrd	r4, [sp]
   3bed4:	ldrd	r6, [sp, #8]
   3bed8:	ldrd	r8, [sp, #16]
   3bedc:	ldrd	sl, [sp, #24]
   3bee0:	add	sp, sp, #32
   3bee4:	pop	{pc}		; (ldr pc, [sp], #4)
   3bee8:	mov	r2, r4
   3beec:	mov	r1, r5
   3bef0:	str	r0, [sp, #76]	; 0x4c
   3bef4:	add	r0, sp, #76	; 0x4c
   3bef8:	bl	352d0 <__assert_fail@plt+0x22cdc>
   3befc:	ldr	r3, [sp, #76]	; 0x4c
   3bf00:	mov	r8, r0
   3bf04:	cmp	r3, #0
   3bf08:	bne	3bec8 <__assert_fail@plt+0x298d4>
   3bf0c:	mov	r6, r0
   3bf10:	ldr	r7, [r6, #28]!
   3bf14:	cmp	r7, #0
   3bf18:	bne	3bf8c <__assert_fail@plt+0x29998>
   3bf1c:	ldr	r2, [r4, #4]
   3bf20:	lsl	r0, r2, #2
   3bf24:	strd	r2, [r8, #28]
   3bf28:	bl	31b54 <__assert_fail@plt+0x1f560>
   3bf2c:	cmp	r0, #0
   3bf30:	str	r0, [r8, #36]	; 0x24
   3bf34:	beq	3bf84 <__assert_fail@plt+0x29990>
   3bf38:	ldr	r3, [r4, #4]
   3bf3c:	str	r7, [sp, #76]	; 0x4c
   3bf40:	cmp	r3, #0
   3bf44:	bgt	3bf58 <__assert_fail@plt+0x29964>
   3bf48:	b	3bf8c <__assert_fail@plt+0x29998>
   3bf4c:	ldr	r3, [r4, #4]
   3bf50:	cmp	r7, r3
   3bf54:	bge	3bf8c <__assert_fail@plt+0x29998>
   3bf58:	ldr	r3, [r4, #8]
   3bf5c:	mov	r0, r6
   3bf60:	ldr	r1, [r5, #28]
   3bf64:	ldr	r3, [r3, r7, lsl #2]
   3bf68:	add	r7, r7, #1
   3bf6c:	add	r3, r3, r3, lsl #1
   3bf70:	add	r1, r1, r3, lsl #2
   3bf74:	bl	35c70 <__assert_fail@plt+0x2367c>
   3bf78:	cmp	r0, #0
   3bf7c:	str	r0, [sp, #76]	; 0x4c
   3bf80:	beq	3bf4c <__assert_fail@plt+0x29958>
   3bf84:	mov	r3, #12
   3bf88:	b	3bec8 <__assert_fail@plt+0x298d4>
   3bf8c:	ldr	r3, [sp, #20]
   3bf90:	mov	r2, r6
   3bf94:	mov	r0, r4
   3bf98:	add	r3, r3, #4
   3bf9c:	mov	r1, r3
   3bfa0:	str	r3, [sp, #36]	; 0x24
   3bfa4:	bl	355b0 <__assert_fail@plt+0x22fbc>
   3bfa8:	cmp	r0, #0
   3bfac:	str	r0, [sp, #72]	; 0x48
   3bfb0:	bne	3c5c8 <__assert_fail@plt+0x29fd4>
   3bfb4:	ldr	r3, [sl, #20]
   3bfb8:	cmp	r3, #0
   3bfbc:	bne	3c3c8 <__assert_fail@plt+0x29dd4>
   3bfc0:	mov	r2, r4
   3bfc4:	mov	r1, r5
   3bfc8:	ldr	r4, [sl]
   3bfcc:	add	r0, sp, #72	; 0x48
   3bfd0:	bl	352d0 <__assert_fail@plt+0x22cdc>
   3bfd4:	ldr	r3, [sp, #72]	; 0x48
   3bfd8:	str	r0, [r4, fp, lsl #2]
   3bfdc:	cmp	r3, #0
   3bfe0:	bne	3bec8 <__assert_fail@plt+0x298d4>
   3bfe4:	ldr	r3, [sp, #16]
   3bfe8:	ldr	r2, [r3, #100]	; 0x64
   3bfec:	ldr	r3, [sp, #24]
   3bff0:	add	r2, r2, r3
   3bff4:	ldr	r3, [r2]
   3bff8:	ldrb	r3, [r3, #52]	; 0x34
   3bffc:	ands	r3, r3, #64	; 0x40
   3c000:	beq	3bec8 <__assert_fail@plt+0x298d4>
   3c004:	ldr	r3, [sp, #16]
   3c008:	mov	r8, #0
   3c00c:	ldr	ip, [r3, #108]	; 0x6c
   3c010:	mov	r3, ip
   3c014:	cmp	r8, r3
   3c018:	bge	3c078 <__assert_fail@plt+0x29a84>
   3c01c:	ldr	r1, [sp, #16]
   3c020:	add	r2, r8, r3
   3c024:	add	r2, r2, r2, lsr #31
   3c028:	asr	r2, r2, #1
   3c02c:	ldr	r0, [r1, #116]	; 0x74
   3c030:	add	r1, r2, r2, lsl #1
   3c034:	add	r1, r0, r1, lsl #3
   3c038:	ldr	r1, [r1, #4]
   3c03c:	cmp	fp, r1
   3c040:	ble	3c068 <__assert_fail@plt+0x29a74>
   3c044:	b	3c33c <__assert_fail@plt+0x29d48>
   3c048:	asr	r3, r3, #1
   3c04c:	add	r1, r3, r3, lsl #1
   3c050:	mov	lr, r3
   3c054:	add	r1, r0, r1, lsl #3
   3c058:	ldr	r1, [r1, #4]
   3c05c:	cmp	fp, r1
   3c060:	bgt	3c344 <__assert_fail@plt+0x29d50>
   3c064:	mov	r2, r3
   3c068:	add	r3, r8, r2
   3c06c:	cmp	r8, r2
   3c070:	add	r3, r3, r3, lsr #31
   3c074:	blt	3c048 <__assert_fail@plt+0x29a54>
   3c078:	cmp	ip, r8
   3c07c:	ble	3c334 <__assert_fail@plt+0x29d40>
   3c080:	ldr	r1, [sp, #16]
   3c084:	add	r2, r8, r8, lsl #1
   3c088:	lsl	r2, r2, #3
   3c08c:	ldr	r3, [r1, #116]	; 0x74
   3c090:	str	r2, [sp, #48]	; 0x30
   3c094:	add	r3, r3, r2
   3c098:	ldr	r3, [r3, #4]
   3c09c:	cmp	fp, r3
   3c0a0:	bne	3c334 <__assert_fail@plt+0x29d40>
   3c0a4:	cmn	r8, #1
   3c0a8:	beq	3c334 <__assert_fail@plt+0x29d40>
   3c0ac:	ldr	r3, [sp, #20]
   3c0b0:	ldr	r9, [r1, #84]	; 0x54
   3c0b4:	ldr	r0, [r3, #8]
   3c0b8:	mov	r3, #0
   3c0bc:	str	r3, [sp, #76]	; 0x4c
   3c0c0:	cmp	r0, r3
   3c0c4:	ble	3c334 <__assert_fail@plt+0x29d40>
   3c0c8:	add	r2, sl, #24
   3c0cc:	str	r2, [sp, #36]	; 0x24
   3c0d0:	add	r2, sl, #20
   3c0d4:	str	fp, [sp, #44]	; 0x2c
   3c0d8:	mov	fp, r3
   3c0dc:	str	r2, [sp, #40]	; 0x28
   3c0e0:	str	r8, [sp, #56]	; 0x38
   3c0e4:	b	3c0fc <__assert_fail@plt+0x29b08>
   3c0e8:	cmp	r3, #4
   3c0ec:	beq	3c138 <__assert_fail@plt+0x29b44>
   3c0f0:	add	fp, fp, #1
   3c0f4:	cmp	fp, r0
   3c0f8:	bge	3c328 <__assert_fail@plt+0x29d34>
   3c0fc:	ldr	r3, [sp, #20]
   3c100:	ldr	r2, [sl, #8]
   3c104:	ldr	r1, [r3, #12]
   3c108:	ldr	r3, [r9]
   3c10c:	ldr	r6, [r1, fp, lsl #2]
   3c110:	add	r3, r3, r6, lsl #3
   3c114:	cmp	r6, r2
   3c118:	ldrb	r3, [r3, #4]
   3c11c:	bne	3c0e8 <__assert_fail@plt+0x29af4>
   3c120:	ldr	r2, [sl, #12]
   3c124:	ldr	r1, [sp, #44]	; 0x2c
   3c128:	cmp	r1, r2
   3c12c:	beq	3c0f0 <__assert_fail@plt+0x29afc>
   3c130:	cmp	r3, #4
   3c134:	bne	3c0f0 <__assert_fail@plt+0x29afc>
   3c138:	ldr	r3, [sp, #16]
   3c13c:	lsl	r2, r6, #2
   3c140:	str	fp, [sp, #60]	; 0x3c
   3c144:	ldr	fp, [sp, #44]	; 0x2c
   3c148:	ldr	r7, [sp, #56]	; 0x38
   3c14c:	ldr	r4, [r3, #116]	; 0x74
   3c150:	add	r3, r6, r6, lsl #1
   3c154:	lsl	r3, r3, #2
   3c158:	strd	r2, [sp, #28]
   3c15c:	add	r2, sl, #16
   3c160:	ldr	r3, [sp, #48]	; 0x30
   3c164:	str	r2, [sp, #52]	; 0x34
   3c168:	add	r4, r4, r3
   3c16c:	b	3c2c0 <__assert_fail@plt+0x29ccc>
   3c170:	ldr	r3, [r9, #12]
   3c174:	ldr	r2, [sp, #28]
   3c178:	ldr	r8, [r3, r2]
   3c17c:	ldr	r3, [sl, #12]
   3c180:	cmp	r5, r3
   3c184:	bgt	3c2ac <__assert_fail@plt+0x29cb8>
   3c188:	ldr	r3, [sl]
   3c18c:	ldr	r3, [r3, r5, lsl #2]
   3c190:	cmp	r3, #0
   3c194:	beq	3c2ac <__assert_fail@plt+0x29cb8>
   3c198:	mov	r2, r8
   3c19c:	add	r1, r3, #12
   3c1a0:	ldr	r0, [r3, #8]
   3c1a4:	bl	343b4 <__assert_fail@plt+0x21dc0>
   3c1a8:	cmp	r0, #0
   3c1ac:	beq	3c2ac <__assert_fail@plt+0x29cb8>
   3c1b0:	mov	r3, r6
   3c1b4:	str	fp, [sp]
   3c1b8:	str	r8, [sp, #4]
   3c1bc:	str	r5, [sp, #8]
   3c1c0:	ldr	r0, [sp, #16]
   3c1c4:	ldr	r2, [sp, #36]	; 0x24
   3c1c8:	ldr	r1, [sp, #40]	; 0x28
   3c1cc:	bl	34688 <__assert_fail@plt+0x22094>
   3c1d0:	cmp	r0, #0
   3c1d4:	bne	3c2ac <__assert_fail@plt+0x29cb8>
   3c1d8:	ldr	r3, [sp, #76]	; 0x4c
   3c1dc:	cmp	r3, #0
   3c1e0:	beq	3c350 <__assert_fail@plt+0x29d5c>
   3c1e4:	add	r4, sp, #76	; 0x4c
   3c1e8:	add	r5, sp, #92	; 0x5c
   3c1ec:	mov	r0, r5
   3c1f0:	mov	r1, r7
   3c1f4:	str	r6, [sp, #84]	; 0x54
   3c1f8:	str	fp, [sp, #88]	; 0x58
   3c1fc:	bl	33de0 <__assert_fail@plt+0x217ec>
   3c200:	cmp	r0, #0
   3c204:	beq	3c608 <__assert_fail@plt+0x2a014>
   3c208:	mov	r1, r4
   3c20c:	ldr	r0, [sp, #16]
   3c210:	ldr	r2, [sp, #24]
   3c214:	ldr	r3, [sp, #76]	; 0x4c
   3c218:	ldr	r4, [r3, r2]
   3c21c:	bl	3a048 <__assert_fail@plt+0x27a54>
   3c220:	cmp	r0, #0
   3c224:	bne	3c394 <__assert_fail@plt+0x29da0>
   3c228:	ldr	r1, [sl, #4]
   3c22c:	ldr	r3, [sp, #76]	; 0x4c
   3c230:	cmp	r1, #0
   3c234:	beq	3c254 <__assert_fail@plt+0x29c60>
   3c238:	mov	r2, r3
   3c23c:	mov	r0, r9
   3c240:	add	r3, fp, #1
   3c244:	bl	354ec <__assert_fail@plt+0x22ef8>
   3c248:	cmp	r0, #0
   3c24c:	bne	3c394 <__assert_fail@plt+0x29da0>
   3c250:	ldr	r3, [sp, #76]	; 0x4c
   3c254:	mov	r2, r7
   3c258:	ldr	r1, [sp, #24]
   3c25c:	str	r4, [r3, r1]
   3c260:	add	r1, sp, #100	; 0x64
   3c264:	ldr	r4, [sp, #96]	; 0x60
   3c268:	mov	r0, r4
   3c26c:	bl	343b4 <__assert_fail@plt+0x21dc0>
   3c270:	sub	r2, r0, #1
   3c274:	cmp	r4, r2
   3c278:	movgt	r3, #0
   3c27c:	movle	r3, #1
   3c280:	orrs	r3, r3, r2, lsr #31
   3c284:	bne	3c29c <__assert_fail@plt+0x29ca8>
   3c288:	sub	r4, r4, #1
   3c28c:	add	r1, sp, #100	; 0x64
   3c290:	add	r0, sp, #96	; 0x60
   3c294:	str	r4, [sp, #96]	; 0x60
   3c298:	bl	34554 <__assert_fail@plt+0x21f60>
   3c29c:	ldr	r3, [sp, #16]
   3c2a0:	ldr	r4, [r3, #116]	; 0x74
   3c2a4:	add	r3, r7, r7, lsl #1
   3c2a8:	add	r4, r4, r3, lsl #3
   3c2ac:	ldrb	r3, [r4, #20]
   3c2b0:	add	r7, r7, #1
   3c2b4:	add	r4, r4, #24
   3c2b8:	cmp	r3, #0
   3c2bc:	beq	3c3b8 <__assert_fail@plt+0x29dc4>
   3c2c0:	ldr	r3, [r4]
   3c2c4:	cmp	r6, r3
   3c2c8:	bne	3c2ac <__assert_fail@plt+0x29cb8>
   3c2cc:	ldr	r3, [r4, #8]
   3c2d0:	ldr	r5, [r4, #12]
   3c2d4:	sub	r5, r5, r3
   3c2d8:	cmp	r5, #0
   3c2dc:	add	r5, fp, r5
   3c2e0:	bne	3c170 <__assert_fail@plt+0x29b7c>
   3c2e4:	ldr	r3, [r9, #20]
   3c2e8:	ldr	r2, [sp, #32]
   3c2ec:	add	r3, r3, r2
   3c2f0:	ldr	r3, [r3, #8]
   3c2f4:	ldr	r8, [r3]
   3c2f8:	b	3c17c <__assert_fail@plt+0x29b88>
   3c2fc:	ldr	r6, [sl]
   3c300:	cmp	r3, r0
   3c304:	streq	r3, [r6, fp, lsl #2]
   3c308:	beq	3bec8 <__assert_fail@plt+0x298d4>
   3c30c:	mov	r2, r4
   3c310:	mov	r1, r5
   3c314:	add	r0, sp, #72	; 0x48
   3c318:	bl	352d0 <__assert_fail@plt+0x22cdc>
   3c31c:	str	r0, [r6, fp, lsl #2]
   3c320:	ldr	r3, [sp, #72]	; 0x48
   3c324:	b	3bec8 <__assert_fail@plt+0x298d4>
   3c328:	ldr	r3, [sp, #76]	; 0x4c
   3c32c:	cmp	r3, #0
   3c330:	bne	3c618 <__assert_fail@plt+0x2a024>
   3c334:	mov	r3, #0
   3c338:	b	3bec8 <__assert_fail@plt+0x298d4>
   3c33c:	mov	lr, r2
   3c340:	mov	r2, r3
   3c344:	add	r8, lr, #1
   3c348:	mov	r3, r2
   3c34c:	b	3c014 <__assert_fail@plt+0x29a20>
   3c350:	ldrd	r2, [sl]
   3c354:	add	r4, sp, #76	; 0x4c
   3c358:	add	r5, sp, #92	; 0x5c
   3c35c:	mov	r0, r5
   3c360:	ldr	ip, [sl, #24]
   3c364:	ldr	r1, [sp, #52]	; 0x34
   3c368:	strd	r2, [sp, #76]	; 0x4c
   3c36c:	ldrd	r2, [sl, #16]
   3c370:	str	ip, [r4, #24]
   3c374:	strd	r2, [sp, #64]	; 0x40
   3c378:	ldrd	r2, [sl, #8]
   3c37c:	strd	r2, [r4, #8]
   3c380:	ldrd	r2, [sp, #64]	; 0x40
   3c384:	strd	r2, [r4, #16]
   3c388:	bl	34df4 <__assert_fail@plt+0x22800>
   3c38c:	cmp	r0, #0
   3c390:	beq	3c1ec <__assert_fail@plt+0x29bf8>
   3c394:	mov	r3, r0
   3c398:	ldr	r2, [sp, #76]	; 0x4c
   3c39c:	cmp	r2, #0
   3c3a0:	beq	3bec8 <__assert_fail@plt+0x298d4>
   3c3a4:	ldr	r0, [sp, #100]	; 0x64
   3c3a8:	str	r3, [sp, #16]
   3c3ac:	bl	2f668 <__assert_fail@plt+0x1d074>
   3c3b0:	ldr	r3, [sp, #16]
   3c3b4:	b	3bec8 <__assert_fail@plt+0x298d4>
   3c3b8:	ldr	r3, [sp, #20]
   3c3bc:	ldr	fp, [sp, #60]	; 0x3c
   3c3c0:	ldr	r0, [r3, #8]
   3c3c4:	b	3c0f0 <__assert_fail@plt+0x29afc>
   3c3c8:	ldr	r3, [sp, #16]
   3c3cc:	ldr	r3, [r3, #116]	; 0x74
   3c3d0:	str	r3, [sp, #32]
   3c3d4:	ble	3c4b4 <__assert_fail@plt+0x29ec0>
   3c3d8:	mov	r6, r0
   3c3dc:	str	fp, [sp, #28]
   3c3e0:	ldr	r3, [sl, #24]
   3c3e4:	ldr	r0, [sp, #28]
   3c3e8:	ldr	ip, [sp, #32]
   3c3ec:	ldr	r3, [r3, r6, lsl #2]
   3c3f0:	add	r3, r3, r3, lsl #1
   3c3f4:	add	r2, ip, r3, lsl #3
   3c3f8:	ldr	r1, [r2, #8]
   3c3fc:	cmp	r0, r1
   3c400:	ble	3c4a0 <__assert_fail@plt+0x29eac>
   3c404:	ldr	r1, [r2, #4]
   3c408:	cmp	r0, r1
   3c40c:	bgt	3c4a0 <__assert_fail@plt+0x29eac>
   3c410:	ldr	r1, [r2, #12]
   3c414:	ldr	r2, [ip, r3, lsl #3]
   3c418:	ldr	r3, [r5]
   3c41c:	cmp	r0, r1
   3c420:	ldr	r7, [r4, #4]
   3c424:	ldr	r9, [r3, r2, lsl #3]
   3c428:	beq	3c4c0 <__assert_fail@plt+0x29ecc>
   3c42c:	cmp	r7, #0
   3c430:	ble	3c4a0 <__assert_fail@plt+0x29eac>
   3c434:	mov	r8, #0
   3c438:	ldr	fp, [sp, #36]	; 0x24
   3c43c:	b	3c450 <__assert_fail@plt+0x29e5c>
   3c440:	add	r8, r8, #1
   3c444:	cmp	r8, r7
   3c448:	bge	3c4a0 <__assert_fail@plt+0x29eac>
   3c44c:	ldr	r3, [r5]
   3c450:	ldr	r2, [r4, #8]
   3c454:	ldr	r1, [r2, r8, lsl #2]
   3c458:	add	r2, r3, r1, lsl #3
   3c45c:	ldrb	r2, [r2, #4]
   3c460:	sub	r2, r2, #8
   3c464:	cmp	r2, #1
   3c468:	bhi	3c440 <__assert_fail@plt+0x29e4c>
   3c46c:	ldr	r3, [r3, r1, lsl #3]
   3c470:	cmp	r9, r3
   3c474:	bne	3c440 <__assert_fail@plt+0x29e4c>
   3c478:	mov	r3, fp
   3c47c:	mov	r2, r4
   3c480:	mov	r0, r5
   3c484:	bl	35798 <__assert_fail@plt+0x231a4>
   3c488:	cmp	r0, #0
   3c48c:	bne	3c5c8 <__assert_fail@plt+0x29fd4>
   3c490:	ldr	r7, [r4, #4]
   3c494:	add	r8, r8, #1
   3c498:	cmp	r8, r7
   3c49c:	blt	3c44c <__assert_fail@plt+0x29e58>
   3c4a0:	ldr	r3, [sl, #20]
   3c4a4:	add	r6, r6, #1
   3c4a8:	cmp	r6, r3
   3c4ac:	blt	3c3e0 <__assert_fail@plt+0x29dec>
   3c4b0:	ldr	fp, [sp, #28]
   3c4b4:	mov	r3, #0
   3c4b8:	str	r3, [sp, #72]	; 0x48
   3c4bc:	b	3bfc0 <__assert_fail@plt+0x299cc>
   3c4c0:	cmp	r7, #0
   3c4c4:	ble	3c4a0 <__assert_fail@plt+0x29eac>
   3c4c8:	ldr	lr, [r4, #8]
   3c4cc:	mvn	r8, #0
   3c4d0:	mov	fp, r8
   3c4d4:	str	r6, [sp, #40]	; 0x28
   3c4d8:	add	r2, lr, r7, lsl #2
   3c4dc:	mov	r1, lr
   3c4e0:	mov	r6, r2
   3c4e4:	b	3c504 <__assert_fail@plt+0x29f10>
   3c4e8:	cmp	r0, #9
   3c4ec:	bne	3c4fc <__assert_fail@plt+0x29f08>
   3c4f0:	ldr	r0, [ip]
   3c4f4:	cmp	r9, r0
   3c4f8:	moveq	r8, r2
   3c4fc:	cmp	r6, r1
   3c500:	beq	3c52c <__assert_fail@plt+0x29f38>
   3c504:	ldr	r2, [r1], #4
   3c508:	add	ip, r3, r2, lsl #3
   3c50c:	ldrb	r0, [ip, #4]
   3c510:	cmp	r0, #8
   3c514:	bne	3c4e8 <__assert_fail@plt+0x29ef4>
   3c518:	ldr	r0, [r3, r2, lsl #3]
   3c51c:	cmp	r9, r0
   3c520:	moveq	fp, r2
   3c524:	cmp	r6, r1
   3c528:	bne	3c504 <__assert_fail@plt+0x29f10>
   3c52c:	cmp	fp, #0
   3c530:	ldr	r6, [sp, #40]	; 0x28
   3c534:	bge	3c5d0 <__assert_fail@plt+0x29fdc>
   3c538:	cmp	r8, #0
   3c53c:	blt	3c4a0 <__assert_fail@plt+0x29eac>
   3c540:	mov	r9, #0
   3c544:	str	r6, [sp, #40]	; 0x28
   3c548:	b	3c55c <__assert_fail@plt+0x29f68>
   3c54c:	add	r9, r9, #1
   3c550:	cmp	r7, r9
   3c554:	ble	3c610 <__assert_fail@plt+0x2a01c>
   3c558:	ldr	lr, [r4, #8]
   3c55c:	mov	r2, r8
   3c560:	ldr	r6, [lr, r9, lsl #2]
   3c564:	ldr	r0, [r5, #28]
   3c568:	add	fp, r6, r6, lsl #1
   3c56c:	lsl	fp, fp, #2
   3c570:	add	r0, r0, fp
   3c574:	add	r1, r0, #8
   3c578:	ldr	r0, [r0, #4]
   3c57c:	bl	343b4 <__assert_fail@plt+0x21dc0>
   3c580:	cmp	r0, #0
   3c584:	bne	3c54c <__assert_fail@plt+0x29f58>
   3c588:	ldr	r1, [r5, #24]
   3c58c:	add	fp, r1, fp
   3c590:	add	r1, fp, #8
   3c594:	ldr	r0, [fp, #4]
   3c598:	bl	343b4 <__assert_fail@plt+0x21dc0>
   3c59c:	cmp	r0, #0
   3c5a0:	bne	3c54c <__assert_fail@plt+0x29f58>
   3c5a4:	mov	r1, r6
   3c5a8:	mov	r2, r4
   3c5ac:	ldr	r3, [sp, #36]	; 0x24
   3c5b0:	mov	r0, r5
   3c5b4:	bl	35798 <__assert_fail@plt+0x231a4>
   3c5b8:	cmp	r0, #0
   3c5bc:	bne	3c5c8 <__assert_fail@plt+0x29fd4>
   3c5c0:	ldr	r7, [r4, #4]
   3c5c4:	b	3c550 <__assert_fail@plt+0x29f5c>
   3c5c8:	mov	r3, r0
   3c5cc:	b	3bec8 <__assert_fail@plt+0x298d4>
   3c5d0:	mov	r1, fp
   3c5d4:	mov	r2, r4
   3c5d8:	ldr	r3, [sp, #36]	; 0x24
   3c5dc:	mov	r0, r5
   3c5e0:	bl	35798 <__assert_fail@plt+0x231a4>
   3c5e4:	cmp	r0, #0
   3c5e8:	bne	3c5c8 <__assert_fail@plt+0x29fd4>
   3c5ec:	cmp	r8, #0
   3c5f0:	blt	3c4a0 <__assert_fail@plt+0x29eac>
   3c5f4:	ldr	r7, [r4, #4]
   3c5f8:	cmp	r7, #0
   3c5fc:	ble	3c4a0 <__assert_fail@plt+0x29eac>
   3c600:	ldr	lr, [r4, #8]
   3c604:	b	3c540 <__assert_fail@plt+0x29f4c>
   3c608:	mov	r3, #12
   3c60c:	b	3c398 <__assert_fail@plt+0x29da4>
   3c610:	ldr	r6, [sp, #40]	; 0x28
   3c614:	b	3c4a0 <__assert_fail@plt+0x29eac>
   3c618:	mov	r3, #0
   3c61c:	b	3c3a4 <__assert_fail@plt+0x29db0>
   3c620:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3c624:	ldr	r3, [r1, #56]	; 0x38
   3c628:	strd	r6, [sp, #8]
   3c62c:	mov	r6, r0
   3c630:	ldr	r7, [r1, #40]	; 0x28
   3c634:	strd	r8, [sp, #16]
   3c638:	str	sl, [sp, #24]
   3c63c:	str	lr, [sp, #28]
   3c640:	sub	sp, sp, #8
   3c644:	cmp	r3, r7
   3c648:	movle	r3, #2
   3c64c:	movle	r0, #0
   3c650:	strble	r3, [r6, #4]
   3c654:	ble	3c91c <__assert_fail@plt+0x2a328>
   3c658:	ldr	sl, [r1, #4]
   3c65c:	mov	r8, r2
   3c660:	mov	r5, r1
   3c664:	ldrb	r3, [r6, #6]
   3c668:	ldr	r2, [r1, #80]	; 0x50
   3c66c:	ldrb	r4, [sl, r7]
   3c670:	bic	r3, r3, #96	; 0x60
   3c674:	cmp	r2, #1
   3c678:	strb	r4, [r6]
   3c67c:	strb	r3, [r6, #6]
   3c680:	ble	3c938 <__assert_fail@plt+0x2a344>
   3c684:	ldr	r3, [r1, #28]
   3c688:	cmp	r7, r3
   3c68c:	beq	3c6a0 <__assert_fail@plt+0x2a0ac>
   3c690:	ldr	r3, [r1, #8]
   3c694:	ldr	r3, [r3, r7, lsl #2]
   3c698:	cmn	r3, #1
   3c69c:	beq	3cb80 <__assert_fail@plt+0x2a58c>
   3c6a0:	cmp	r4, #92	; 0x5c
   3c6a4:	beq	3c974 <__assert_fail@plt+0x2a380>
   3c6a8:	ldr	r3, [r5, #8]
   3c6ac:	mov	r2, #1
   3c6b0:	strb	r2, [r6, #4]
   3c6b4:	ldr	r9, [r3, r7, lsl #2]
   3c6b8:	mov	r0, r9
   3c6bc:	sub	r9, r9, #95	; 0x5f
   3c6c0:	bl	12354 <iswalnum@plt>
   3c6c4:	ldrb	r3, [r6, #6]
   3c6c8:	clz	r9, r9
   3c6cc:	cmp	r0, #0
   3c6d0:	lsr	r9, r9, #5
   3c6d4:	movne	r9, #1
   3c6d8:	bfi	r3, r9, #6, #1
   3c6dc:	strb	r3, [r6, #6]
   3c6e0:	sub	r4, r4, #10
   3c6e4:	cmp	r4, #115	; 0x73
   3c6e8:	ldrls	pc, [pc, r4, lsl #2]
   3c6ec:	b	3cb78 <__assert_fail@plt+0x2a584>
   3c6f0:	ldrdeq	ip, [r3], -r8
   3c6f4:	andeq	ip, r3, r8, ror fp
   3c6f8:	andeq	ip, r3, r8, ror fp
   3c6fc:	andeq	ip, r3, r8, ror fp
   3c700:	andeq	ip, r3, r8, ror fp
   3c704:	andeq	ip, r3, r8, ror fp
   3c708:	andeq	ip, r3, r8, ror fp
   3c70c:	andeq	ip, r3, r8, ror fp
   3c710:	andeq	ip, r3, r8, ror fp
   3c714:	andeq	ip, r3, r8, ror fp
   3c718:	andeq	ip, r3, r8, ror fp
   3c71c:	andeq	ip, r3, r8, ror fp
   3c720:	andeq	ip, r3, r8, ror fp
   3c724:	andeq	ip, r3, r8, ror fp
   3c728:	andeq	ip, r3, r8, ror fp
   3c72c:	andeq	ip, r3, r8, ror fp
   3c730:	andeq	ip, r3, r8, ror fp
   3c734:	andeq	ip, r3, r8, ror fp
   3c738:	andeq	ip, r3, r8, ror fp
   3c73c:	andeq	ip, r3, r8, ror fp
   3c740:	andeq	ip, r3, r8, ror fp
   3c744:	andeq	ip, r3, r8, ror fp
   3c748:	andeq	ip, r3, r8, ror fp
   3c74c:	andeq	ip, r3, r8, ror fp
   3c750:	andeq	ip, r3, r8, ror fp
   3c754:	andeq	ip, r3, r8, ror fp
   3c758:	andeq	ip, r3, r0, asr #17
   3c75c:	andeq	ip, r3, r8, ror fp
   3c760:	andeq	ip, r3, r8, ror fp
   3c764:	andeq	ip, r3, r8, ror fp
   3c768:	andeq	ip, r3, r4, asr ip
   3c76c:	andeq	ip, r3, ip, ror #24
   3c770:	andeq	ip, r3, r4, asr #24
   3c774:	andeq	ip, r3, r4, lsl #25
   3c778:	andeq	ip, r3, r8, ror fp
   3c77c:	andeq	ip, r3, r8, ror fp
   3c780:	andeq	ip, r3, ip, asr #23
   3c784:	andeq	ip, r3, r8, ror fp
   3c788:	andeq	ip, r3, r8, ror fp
   3c78c:	andeq	ip, r3, r8, ror fp
   3c790:	andeq	ip, r3, r8, ror fp
   3c794:	andeq	ip, r3, r8, ror fp
   3c798:	andeq	ip, r3, r8, ror fp
   3c79c:	andeq	ip, r3, r8, ror fp
   3c7a0:	andeq	ip, r3, r8, ror fp
   3c7a4:	andeq	ip, r3, r8, ror fp
   3c7a8:	andeq	ip, r3, r8, ror fp
   3c7ac:	andeq	ip, r3, r8, ror fp
   3c7b0:	andeq	ip, r3, r8, ror fp
   3c7b4:	andeq	ip, r3, r8, ror fp
   3c7b8:	andeq	ip, r3, r8, ror fp
   3c7bc:	andeq	ip, r3, r8, ror fp
   3c7c0:	andeq	ip, r3, r8, ror fp
   3c7c4:	ldrdeq	ip, [r3], -ip	; <UNPREDICTABLE>
   3c7c8:	andeq	ip, r3, r8, ror fp
   3c7cc:	andeq	ip, r3, r8, ror fp
   3c7d0:	andeq	ip, r3, r8, ror fp
   3c7d4:	andeq	ip, r3, r8, ror fp
   3c7d8:	andeq	ip, r3, r8, ror fp
   3c7dc:	andeq	ip, r3, r8, ror fp
   3c7e0:	andeq	ip, r3, r8, ror fp
   3c7e4:	andeq	ip, r3, r8, ror fp
   3c7e8:	andeq	ip, r3, r8, ror fp
   3c7ec:	andeq	ip, r3, r8, ror fp
   3c7f0:	andeq	ip, r3, r8, ror fp
   3c7f4:	andeq	ip, r3, r8, ror fp
   3c7f8:	andeq	ip, r3, r8, ror fp
   3c7fc:	andeq	ip, r3, r8, ror fp
   3c800:	andeq	ip, r3, r8, ror fp
   3c804:	andeq	ip, r3, r8, ror fp
   3c808:	andeq	ip, r3, r8, ror fp
   3c80c:	andeq	ip, r3, r8, ror fp
   3c810:	andeq	ip, r3, r8, ror fp
   3c814:	andeq	ip, r3, r8, ror fp
   3c818:	andeq	ip, r3, r8, ror fp
   3c81c:	andeq	ip, r3, r8, ror fp
   3c820:	andeq	ip, r3, r8, ror fp
   3c824:	andeq	ip, r3, r8, ror fp
   3c828:	andeq	ip, r3, r8, ror fp
   3c82c:	andeq	ip, r3, r8, ror fp
   3c830:	andeq	ip, r3, r8, ror fp
   3c834:	strdeq	ip, [r3], -r8
   3c838:	andeq	ip, r3, r8, ror fp
   3c83c:	andeq	ip, r3, r8, ror fp
   3c840:	andeq	ip, r3, r8, lsl #24
   3c844:	andeq	ip, r3, r8, ror fp
   3c848:	andeq	ip, r3, r8, ror fp
   3c84c:	andeq	ip, r3, r8, ror fp
   3c850:	andeq	ip, r3, r8, ror fp
   3c854:	andeq	ip, r3, r8, ror fp
   3c858:	andeq	ip, r3, r8, ror fp
   3c85c:	andeq	ip, r3, r8, ror fp
   3c860:	andeq	ip, r3, r8, ror fp
   3c864:	andeq	ip, r3, r8, ror fp
   3c868:	andeq	ip, r3, r8, ror fp
   3c86c:	andeq	ip, r3, r8, ror fp
   3c870:	andeq	ip, r3, r8, ror fp
   3c874:	andeq	ip, r3, r8, ror fp
   3c878:	andeq	ip, r3, r8, ror fp
   3c87c:	andeq	ip, r3, r8, ror fp
   3c880:	andeq	ip, r3, r8, ror fp
   3c884:	andeq	ip, r3, r8, ror fp
   3c888:	andeq	ip, r3, r8, ror fp
   3c88c:	andeq	ip, r3, r8, ror fp
   3c890:	andeq	ip, r3, r8, ror fp
   3c894:	andeq	ip, r3, r8, ror fp
   3c898:	andeq	ip, r3, r8, ror fp
   3c89c:	andeq	ip, r3, r8, ror fp
   3c8a0:	andeq	ip, r3, r8, ror fp
   3c8a4:	andeq	ip, r3, r8, ror fp
   3c8a8:	andeq	ip, r3, r8, ror fp
   3c8ac:	andeq	ip, r3, r8, ror fp
   3c8b0:	andeq	ip, r3, r8, ror fp
   3c8b4:	andeq	ip, r3, r0, lsr #25
   3c8b8:			; <UNDEFINED> instruction: 0x0003ccbc
   3c8bc:	andeq	ip, r3, r4, ror #25
   3c8c0:	tst	r8, #8
   3c8c4:	bne	3c908 <__assert_fail@plt+0x2a314>
   3c8c8:	ldr	r3, [r5, #48]	; 0x30
   3c8cc:	add	r7, r7, #1
   3c8d0:	cmp	r7, r3
   3c8d4:	beq	3c908 <__assert_fail@plt+0x2a314>
   3c8d8:	mov	r2, r8
   3c8dc:	mov	r1, r5
   3c8e0:	str	r7, [r5, #40]	; 0x28
   3c8e4:	mov	r0, sp
   3c8e8:	bl	3c620 <__assert_fail@plt+0x2a02c>
   3c8ec:	ldrb	r2, [sp, #4]
   3c8f0:	ldr	r3, [r5, #40]	; 0x28
   3c8f4:	sub	r2, r2, #9
   3c8f8:	cmp	r2, #1
   3c8fc:	sub	r3, r3, #1
   3c900:	str	r3, [r5, #40]	; 0x28
   3c904:	bhi	3cb78 <__assert_fail@plt+0x2a584>
   3c908:	mov	r3, #12
   3c90c:	mov	r2, #32
   3c910:	mov	r0, #1
   3c914:	str	r2, [r6]
   3c918:	strb	r3, [r6, #4]
   3c91c:	add	sp, sp, #8
   3c920:	ldrd	r4, [sp]
   3c924:	ldrd	r6, [sp, #8]
   3c928:	ldrd	r8, [sp, #16]
   3c92c:	ldr	sl, [sp, #24]
   3c930:	add	sp, sp, #28
   3c934:	pop	{pc}		; (ldr pc, [sp], #4)
   3c938:	cmp	r4, #92	; 0x5c
   3c93c:	beq	3c974 <__assert_fail@plt+0x2a380>
   3c940:	mov	r3, #1
   3c944:	strb	r3, [r6, #4]
   3c948:	bl	122b8 <__ctype_b_loc@plt>
   3c94c:	ldr	r1, [r0]
   3c950:	lsl	r3, r4, #1
   3c954:	ldrb	r2, [r6, #6]
   3c958:	ldrh	r3, [r1, r3]
   3c95c:	ubfx	r3, r3, #3, #1
   3c960:	cmp	r4, #95	; 0x5f
   3c964:	orreq	r3, r3, #1
   3c968:	bfi	r2, r3, #6, #1
   3c96c:	strb	r2, [r6, #6]
   3c970:	b	3c6e0 <__assert_fail@plt+0x2a0ec>
   3c974:	ldr	r1, [r5, #48]	; 0x30
   3c978:	add	r3, r7, #1
   3c97c:	cmp	r3, r1
   3c980:	blt	3c994 <__assert_fail@plt+0x2a3a0>
   3c984:	mov	r3, #36	; 0x24
   3c988:	mov	r0, #1
   3c98c:	strb	r3, [r6, #4]
   3c990:	b	3c91c <__assert_fail@plt+0x2a328>
   3c994:	ldrb	r1, [r5, #75]	; 0x4b
   3c998:	cmp	r1, #0
   3c99c:	bne	3cf04 <__assert_fail@plt+0x2a910>
   3c9a0:	ldrb	r7, [sl, r3]
   3c9a4:	mov	r1, #1
   3c9a8:	strb	r7, [r6]
   3c9ac:	cmp	r2, r1
   3c9b0:	strb	r1, [r6, #4]
   3c9b4:	ble	3cba0 <__assert_fail@plt+0x2a5ac>
   3c9b8:	ldr	r1, [r5, #8]
   3c9bc:	add	r1, r1, r3, lsl #2
   3c9c0:	ldr	r4, [r1]
   3c9c4:	mov	r0, r4
   3c9c8:	sub	r4, r4, #95	; 0x5f
   3c9cc:	bl	12354 <iswalnum@plt>
   3c9d0:	ldrb	r3, [r6, #6]
   3c9d4:	clz	r4, r4
   3c9d8:	cmp	r0, #0
   3c9dc:	lsr	r4, r4, #5
   3c9e0:	movne	r4, #1
   3c9e4:	bfi	r3, r4, #6, #1
   3c9e8:	strb	r3, [r6, #6]
   3c9ec:	sub	r3, r7, #39	; 0x27
   3c9f0:	cmp	r3, #86	; 0x56
   3c9f4:	ldrls	pc, [pc, r3, lsl #2]
   3c9f8:	b	3cd18 <__assert_fail@plt+0x2a724>
   3c9fc:	andeq	ip, r3, ip, asr #29
   3ca00:	andeq	ip, r3, ip, ror #29
   3ca04:			; <UNDEFINED> instruction: 0x0003ceb4
   3ca08:	andeq	ip, r3, r8, lsl sp
   3ca0c:	muleq	r3, r4, lr
   3ca10:	andeq	ip, r3, r8, lsl sp
   3ca14:	andeq	ip, r3, r8, lsl sp
   3ca18:	andeq	ip, r3, r8, lsl sp
   3ca1c:	andeq	ip, r3, r8, lsl sp
   3ca20:	andeq	ip, r3, r8, lsl sp
   3ca24:	andeq	ip, r3, r4, ror lr
   3ca28:	andeq	ip, r3, r4, ror lr
   3ca2c:	andeq	ip, r3, r4, ror lr
   3ca30:	andeq	ip, r3, r4, ror lr
   3ca34:	andeq	ip, r3, r4, ror lr
   3ca38:	andeq	ip, r3, r4, ror lr
   3ca3c:	andeq	ip, r3, r4, ror lr
   3ca40:	andeq	ip, r3, r4, ror lr
   3ca44:	andeq	ip, r3, r4, ror lr
   3ca48:	andeq	ip, r3, r8, lsl sp
   3ca4c:	andeq	ip, r3, r8, lsl sp
   3ca50:	andeq	ip, r3, r4, asr lr
   3ca54:	andeq	ip, r3, r8, lsl sp
   3ca58:	andeq	ip, r3, r4, lsr lr
   3ca5c:	andeq	ip, r3, r4, lsl lr
   3ca60:	andeq	ip, r3, r8, lsl sp
   3ca64:	andeq	ip, r3, r8, lsl sp
   3ca68:	strdeq	ip, [r3], -r4
   3ca6c:	andeq	ip, r3, r8, lsl sp
   3ca70:	andeq	ip, r3, r8, lsl sp
   3ca74:	andeq	ip, r3, r8, lsl sp
   3ca78:	andeq	ip, r3, r8, lsl sp
   3ca7c:	andeq	ip, r3, r8, lsl sp
   3ca80:	andeq	ip, r3, r8, lsl sp
   3ca84:	andeq	ip, r3, r8, lsl sp
   3ca88:	andeq	ip, r3, r8, lsl sp
   3ca8c:	andeq	ip, r3, r8, lsl sp
   3ca90:	andeq	ip, r3, r8, lsl sp
   3ca94:	andeq	ip, r3, r8, lsl sp
   3ca98:	andeq	ip, r3, r8, lsl sp
   3ca9c:	andeq	ip, r3, r8, lsl sp
   3caa0:	andeq	ip, r3, r8, lsl sp
   3caa4:	andeq	ip, r3, r8, lsl sp
   3caa8:	andeq	ip, r3, r8, lsl sp
   3caac:	ldrdeq	ip, [r3], -ip	; <UNPREDICTABLE>
   3cab0:	andeq	ip, r3, r8, lsl sp
   3cab4:	andeq	ip, r3, r8, lsl sp
   3cab8:	andeq	ip, r3, r8, lsl sp
   3cabc:	andeq	ip, r3, r4, asr #27
   3cac0:	andeq	ip, r3, r8, lsl sp
   3cac4:	andeq	ip, r3, r8, lsl sp
   3cac8:	andeq	ip, r3, r8, lsl sp
   3cacc:	andeq	ip, r3, r8, lsl sp
   3cad0:	andeq	ip, r3, r8, lsl sp
   3cad4:	andeq	ip, r3, r8, lsl sp
   3cad8:	andeq	ip, r3, r8, lsl sp
   3cadc:	andeq	ip, r3, r8, lsl sp
   3cae0:	andeq	ip, r3, r4, lsr #27
   3cae4:	andeq	ip, r3, r8, lsl sp
   3cae8:	andeq	ip, r3, r4, lsl #27
   3caec:	andeq	ip, r3, r8, lsl sp
   3caf0:	andeq	ip, r3, r8, lsl sp
   3caf4:	andeq	ip, r3, r8, lsl sp
   3caf8:	andeq	ip, r3, r8, lsl sp
   3cafc:	andeq	ip, r3, r8, lsl sp
   3cb00:	andeq	ip, r3, r8, lsl sp
   3cb04:	andeq	ip, r3, r8, lsl sp
   3cb08:	andeq	ip, r3, r8, lsl sp
   3cb0c:	andeq	ip, r3, r8, lsl sp
   3cb10:	andeq	ip, r3, r8, lsl sp
   3cb14:	andeq	ip, r3, r8, lsl sp
   3cb18:	andeq	ip, r3, r8, lsl sp
   3cb1c:	andeq	ip, r3, r8, lsl sp
   3cb20:	andeq	ip, r3, r8, lsl sp
   3cb24:	andeq	ip, r3, r8, lsl sp
   3cb28:	andeq	ip, r3, r8, lsl sp
   3cb2c:	andeq	ip, r3, ip, ror #26
   3cb30:	andeq	ip, r3, r8, lsl sp
   3cb34:	andeq	ip, r3, r8, lsl sp
   3cb38:	andeq	ip, r3, r8, lsl sp
   3cb3c:	andeq	ip, r3, r4, asr sp
   3cb40:	andeq	ip, r3, r8, lsl sp
   3cb44:	andeq	ip, r3, r8, lsl sp
   3cb48:	andeq	ip, r3, r8, lsl sp
   3cb4c:	andeq	ip, r3, r8, lsr sp
   3cb50:	andeq	ip, r3, r0, lsr #26
   3cb54:	andeq	ip, r3, r0, lsl #26
   3cb58:	add	r7, sl, r7
   3cb5c:	eor	r3, r8, #2048	; 0x800
   3cb60:	ldrb	r2, [r7, #-1]
   3cb64:	ubfx	r3, r3, #11, #1
   3cb68:	cmp	r2, #10
   3cb6c:	orrne	r3, r3, #1
   3cb70:	cmp	r3, #0
   3cb74:	beq	3cc2c <__assert_fail@plt+0x2a638>
   3cb78:	mov	r0, #1
   3cb7c:	b	3c91c <__assert_fail@plt+0x2a328>
   3cb80:	ldr	r3, [r6, #4]
   3cb84:	mov	r0, #1
   3cb88:	bic	r3, r3, #2097152	; 0x200000
   3cb8c:	bic	r3, r3, #255	; 0xff
   3cb90:	orr	r3, r3, #2097152	; 0x200000
   3cb94:	orr	r3, r3, r0
   3cb98:	str	r3, [r6, #4]
   3cb9c:	b	3c91c <__assert_fail@plt+0x2a328>
   3cba0:	bl	122b8 <__ctype_b_loc@plt>
   3cba4:	ldr	r1, [r0]
   3cba8:	lsl	r3, r7, #1
   3cbac:	ldrb	r2, [r6, #6]
   3cbb0:	ldrh	r3, [r1, r3]
   3cbb4:	ubfx	r3, r3, #3, #1
   3cbb8:	cmp	r7, #95	; 0x5f
   3cbbc:	orreq	r3, r3, #1
   3cbc0:	bfi	r2, r3, #6, #1
   3cbc4:	strb	r2, [r6, #6]
   3cbc8:	b	3c9ec <__assert_fail@plt+0x2a3f8>
   3cbcc:	mov	r3, #5
   3cbd0:	mov	r0, #1
   3cbd4:	strb	r3, [r6, #4]
   3cbd8:	b	3c91c <__assert_fail@plt+0x2a328>
   3cbdc:	movw	r3, #1026	; 0x402
   3cbe0:	tst	r8, r3
   3cbe4:	bne	3cb78 <__assert_fail@plt+0x2a584>
   3cbe8:	mov	r3, #19
   3cbec:	mov	r0, #1
   3cbf0:	strb	r3, [r6, #4]
   3cbf4:	b	3c91c <__assert_fail@plt+0x2a328>
   3cbf8:	mov	r3, #20
   3cbfc:	mov	r0, #1
   3cc00:	strb	r3, [r6, #4]
   3cc04:	b	3c91c <__assert_fail@plt+0x2a328>
   3cc08:	mov	r3, #8
   3cc0c:	movt	r3, #128	; 0x80
   3cc10:	tst	r8, r3
   3cc14:	moveq	r3, #1
   3cc18:	movne	r3, #0
   3cc1c:	cmp	r7, #0
   3cc20:	moveq	r3, #0
   3cc24:	cmp	r3, #0
   3cc28:	bne	3cb58 <__assert_fail@plt+0x2a564>
   3cc2c:	mov	r3, #12
   3cc30:	mov	r2, #16
   3cc34:	mov	r0, #1
   3cc38:	str	r2, [r6]
   3cc3c:	strb	r3, [r6, #4]
   3cc40:	b	3c91c <__assert_fail@plt+0x2a328>
   3cc44:	mov	r3, #11
   3cc48:	mov	r0, #1
   3cc4c:	strb	r3, [r6, #4]
   3cc50:	b	3c91c <__assert_fail@plt+0x2a328>
   3cc54:	tst	r8, #8192	; 0x2000
   3cc58:	beq	3cb78 <__assert_fail@plt+0x2a584>
   3cc5c:	mov	r3, #8
   3cc60:	mov	r0, #1
   3cc64:	strb	r3, [r6, #4]
   3cc68:	b	3c91c <__assert_fail@plt+0x2a328>
   3cc6c:	tst	r8, #8192	; 0x2000
   3cc70:	beq	3cb78 <__assert_fail@plt+0x2a584>
   3cc74:	mov	r3, #9
   3cc78:	mov	r0, #1
   3cc7c:	strb	r3, [r6, #4]
   3cc80:	b	3c91c <__assert_fail@plt+0x2a328>
   3cc84:	movw	r3, #1026	; 0x402
   3cc88:	tst	r8, r3
   3cc8c:	bne	3cb78 <__assert_fail@plt+0x2a584>
   3cc90:	mov	r3, #18
   3cc94:	mov	r0, #1
   3cc98:	strb	r3, [r6, #4]
   3cc9c:	b	3c91c <__assert_fail@plt+0x2a328>
   3cca0:	and	r2, r8, #4608	; 0x1200
   3cca4:	cmp	r2, #4608	; 0x1200
   3cca8:	moveq	r3, #23
   3ccac:	moveq	r0, #1
   3ccb0:	strbeq	r3, [r6, #4]
   3ccb4:	bne	3cb78 <__assert_fail@plt+0x2a584>
   3ccb8:	b	3c91c <__assert_fail@plt+0x2a328>
   3ccbc:	and	r2, r8, #33792	; 0x8400
   3ccc0:	cmp	r2, #32768	; 0x8000
   3ccc4:	bne	3cb78 <__assert_fail@plt+0x2a584>
   3ccc8:	mov	r3, #10
   3cccc:	mov	r0, #1
   3ccd0:	strb	r3, [r6, #4]
   3ccd4:	b	3c91c <__assert_fail@plt+0x2a328>
   3ccd8:	tst	r8, #2048	; 0x800
   3ccdc:	beq	3cb78 <__assert_fail@plt+0x2a584>
   3cce0:	b	3ccc8 <__assert_fail@plt+0x2a6d4>
   3cce4:	and	r2, r8, #4608	; 0x1200
   3cce8:	cmp	r2, #4608	; 0x1200
   3ccec:	moveq	r3, #24
   3ccf0:	moveq	r0, #1
   3ccf4:	strbeq	r3, [r6, #4]
   3ccf8:	bne	3cb78 <__assert_fail@plt+0x2a584>
   3ccfc:	b	3c91c <__assert_fail@plt+0x2a328>
   3cd00:	and	r2, r8, #4608	; 0x1200
   3cd04:	cmp	r2, #512	; 0x200
   3cd08:	moveq	r3, #24
   3cd0c:	moveq	r0, #2
   3cd10:	strbeq	r3, [r6, #4]
   3cd14:	beq	3c91c <__assert_fail@plt+0x2a328>
   3cd18:	mov	r0, #2
   3cd1c:	b	3c91c <__assert_fail@plt+0x2a328>
   3cd20:	tst	r8, #33792	; 0x8400
   3cd24:	bne	3cd18 <__assert_fail@plt+0x2a724>
   3cd28:	mov	r3, #10
   3cd2c:	mov	r0, #2
   3cd30:	strb	r3, [r6, #4]
   3cd34:	b	3c91c <__assert_fail@plt+0x2a328>
   3cd38:	and	r2, r8, #4608	; 0x1200
   3cd3c:	cmp	r2, #512	; 0x200
   3cd40:	moveq	r3, #23
   3cd44:	moveq	r0, #2
   3cd48:	strbeq	r3, [r6, #4]
   3cd4c:	bne	3cd18 <__assert_fail@plt+0x2a724>
   3cd50:	b	3c91c <__assert_fail@plt+0x2a328>
   3cd54:	tst	r8, #524288	; 0x80000
   3cd58:	bne	3cd18 <__assert_fail@plt+0x2a724>
   3cd5c:	mov	r3, #32
   3cd60:	mov	r0, #2
   3cd64:	strb	r3, [r6, #4]
   3cd68:	b	3c91c <__assert_fail@plt+0x2a328>
   3cd6c:	tst	r8, #524288	; 0x80000
   3cd70:	bne	3cd18 <__assert_fail@plt+0x2a724>
   3cd74:	mov	r3, #34	; 0x22
   3cd78:	mov	r0, #2
   3cd7c:	strb	r3, [r6, #4]
   3cd80:	b	3c91c <__assert_fail@plt+0x2a328>
   3cd84:	tst	r8, #524288	; 0x80000
   3cd88:	bne	3cd18 <__assert_fail@plt+0x2a724>
   3cd8c:	mov	r3, #12
   3cd90:	mov	r2, #256	; 0x100
   3cd94:	mov	r0, #2
   3cd98:	str	r2, [r6]
   3cd9c:	strb	r3, [r6, #4]
   3cda0:	b	3c91c <__assert_fail@plt+0x2a328>
   3cda4:	tst	r8, #524288	; 0x80000
   3cda8:	bne	3cd18 <__assert_fail@plt+0x2a724>
   3cdac:	mov	r3, #12
   3cdb0:	mov	r2, #64	; 0x40
   3cdb4:	mov	r0, #2
   3cdb8:	str	r2, [r6]
   3cdbc:	strb	r3, [r6, #4]
   3cdc0:	b	3c91c <__assert_fail@plt+0x2a328>
   3cdc4:	tst	r8, #524288	; 0x80000
   3cdc8:	bne	3cd18 <__assert_fail@plt+0x2a724>
   3cdcc:	mov	r3, #33	; 0x21
   3cdd0:	mov	r0, #2
   3cdd4:	strb	r3, [r6, #4]
   3cdd8:	b	3c91c <__assert_fail@plt+0x2a328>
   3cddc:	tst	r8, #524288	; 0x80000
   3cde0:	bne	3cd18 <__assert_fail@plt+0x2a724>
   3cde4:	mov	r3, #35	; 0x23
   3cde8:	mov	r0, #2
   3cdec:	strb	r3, [r6, #4]
   3cdf0:	b	3c91c <__assert_fail@plt+0x2a328>
   3cdf4:	tst	r8, #524288	; 0x80000
   3cdf8:	bne	3cd18 <__assert_fail@plt+0x2a724>
   3cdfc:	mov	r3, #12
   3ce00:	mov	r2, #512	; 0x200
   3ce04:	mov	r0, #2
   3ce08:	str	r2, [r6]
   3ce0c:	strb	r3, [r6, #4]
   3ce10:	b	3c91c <__assert_fail@plt+0x2a328>
   3ce14:	movw	r2, #1026	; 0x402
   3ce18:	and	r2, r2, r8
   3ce1c:	cmp	r2, #2
   3ce20:	moveq	r3, #19
   3ce24:	moveq	r0, r2
   3ce28:	strbeq	r3, [r6, #4]
   3ce2c:	bne	3cd18 <__assert_fail@plt+0x2a724>
   3ce30:	b	3c91c <__assert_fail@plt+0x2a328>
   3ce34:	tst	r8, #524288	; 0x80000
   3ce38:	bne	3cd18 <__assert_fail@plt+0x2a724>
   3ce3c:	mov	r3, #12
   3ce40:	mov	r2, #9
   3ce44:	mov	r0, #2
   3ce48:	str	r2, [r6]
   3ce4c:	strb	r3, [r6, #4]
   3ce50:	b	3c91c <__assert_fail@plt+0x2a328>
   3ce54:	tst	r8, #524288	; 0x80000
   3ce58:	bne	3cd18 <__assert_fail@plt+0x2a724>
   3ce5c:	mov	r3, #12
   3ce60:	mov	r2, #6
   3ce64:	mov	r0, #2
   3ce68:	str	r2, [r6]
   3ce6c:	strb	r3, [r6, #4]
   3ce70:	b	3c91c <__assert_fail@plt+0x2a328>
   3ce74:	tst	r8, #16384	; 0x4000
   3ce78:	bne	3cd18 <__assert_fail@plt+0x2a724>
   3ce7c:	sub	r7, r7, #49	; 0x31
   3ce80:	mov	r3, #4
   3ce84:	mov	r0, #2
   3ce88:	str	r7, [r6]
   3ce8c:	strb	r3, [r6, #4]
   3ce90:	b	3c91c <__assert_fail@plt+0x2a328>
   3ce94:	movw	r2, #1026	; 0x402
   3ce98:	and	r2, r2, r8
   3ce9c:	cmp	r2, #2
   3cea0:	moveq	r3, #18
   3cea4:	moveq	r0, r2
   3cea8:	strbeq	r3, [r6, #4]
   3ceac:	bne	3cd18 <__assert_fail@plt+0x2a724>
   3ceb0:	b	3c91c <__assert_fail@plt+0x2a328>
   3ceb4:	tst	r8, #8192	; 0x2000
   3ceb8:	bne	3cd18 <__assert_fail@plt+0x2a724>
   3cebc:	mov	r3, #9
   3cec0:	mov	r0, #2
   3cec4:	strb	r3, [r6, #4]
   3cec8:	b	3c91c <__assert_fail@plt+0x2a328>
   3cecc:	tst	r8, #524288	; 0x80000
   3ced0:	bne	3cd18 <__assert_fail@plt+0x2a724>
   3ced4:	mov	r3, #12
   3ced8:	mov	r2, #128	; 0x80
   3cedc:	mov	r0, #2
   3cee0:	str	r2, [r6]
   3cee4:	strb	r3, [r6, #4]
   3cee8:	b	3c91c <__assert_fail@plt+0x2a328>
   3ceec:	tst	r8, #8192	; 0x2000
   3cef0:	bne	3cd18 <__assert_fail@plt+0x2a724>
   3cef4:	mov	r3, #8
   3cef8:	mov	r0, #2
   3cefc:	strb	r3, [r6, #4]
   3cf00:	b	3c91c <__assert_fail@plt+0x2a328>
   3cf04:	cmp	r2, #1
   3cf08:	ble	3cf3c <__assert_fail@plt+0x2a948>
   3cf0c:	ldr	r1, [r5, #8]
   3cf10:	ldr	r0, [r1, r3, lsl #2]
   3cf14:	add	r1, r1, r3, lsl #2
   3cf18:	cmn	r0, #1
   3cf1c:	beq	3cf78 <__assert_fail@plt+0x2a984>
   3cf20:	ldr	r0, [r5, #28]
   3cf24:	add	r7, r7, #2
   3cf28:	cmp	r0, r7
   3cf2c:	beq	3cf3c <__assert_fail@plt+0x2a948>
   3cf30:	ldr	r0, [r1, #4]
   3cf34:	cmn	r0, #1
   3cf38:	beq	3cf78 <__assert_fail@plt+0x2a984>
   3cf3c:	ldrb	r0, [r5, #76]	; 0x4c
   3cf40:	ldr	r1, [r5]
   3cf44:	ldr	ip, [r5, #24]
   3cf48:	cmp	r0, #0
   3cf4c:	beq	3cf6c <__assert_fail@plt+0x2a978>
   3cf50:	ldr	r0, [r5, #12]
   3cf54:	add	r1, r1, ip
   3cf58:	ldr	r0, [r0, r3, lsl #2]
   3cf5c:	ldrb	r7, [r1, r0]
   3cf60:	tst	r7, #128	; 0x80
   3cf64:	beq	3c9a4 <__assert_fail@plt+0x2a3b0>
   3cf68:	b	3c9a0 <__assert_fail@plt+0x2a3ac>
   3cf6c:	add	r1, r1, r3
   3cf70:	ldrb	r7, [r1, ip]
   3cf74:	b	3c9a4 <__assert_fail@plt+0x2a3b0>
   3cf78:	ldrb	r7, [sl, r3]
   3cf7c:	mov	r3, #1
   3cf80:	strb	r7, [r6]
   3cf84:	strb	r3, [r6, #4]
   3cf88:	b	3c9c0 <__assert_fail@plt+0x2a3cc>
   3cf8c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3cf90:	mov	r5, r0
   3cf94:	mov	r4, r1
   3cf98:	strd	r6, [sp, #8]
   3cf9c:	mov	r7, r2
   3cfa0:	mvn	r6, #0
   3cfa4:	str	r8, [sp, #16]
   3cfa8:	movw	r8, #32816	; 0x8030
   3cfac:	str	lr, [sp, #20]
   3cfb0:	mov	r2, r7
   3cfb4:	mov	r1, r5
   3cfb8:	mov	r0, r4
   3cfbc:	bl	3c620 <__assert_fail@plt+0x2a02c>
   3cfc0:	ldr	r3, [r5, #40]	; 0x28
   3cfc4:	ldrb	r2, [r4, #4]
   3cfc8:	ldrb	r1, [r4]
   3cfcc:	add	r0, r3, r0
   3cfd0:	cmp	r2, #2
   3cfd4:	str	r0, [r5, #40]	; 0x28
   3cfd8:	beq	3d040 <__assert_fail@plt+0x2aa4c>
   3cfdc:	cmp	r1, #44	; 0x2c
   3cfe0:	cmpne	r2, #24
   3cfe4:	beq	3d044 <__assert_fail@plt+0x2aa50>
   3cfe8:	cmp	r2, #1
   3cfec:	beq	3cff8 <__assert_fail@plt+0x2aa04>
   3cff0:	mvn	r6, #1
   3cff4:	b	3cfb0 <__assert_fail@plt+0x2a9bc>
   3cff8:	sub	r2, r1, #48	; 0x30
   3cffc:	uxtb	r0, r2
   3d000:	cmp	r0, #9
   3d004:	movhi	r3, #0
   3d008:	movls	r3, #1
   3d00c:	cmn	r6, #2
   3d010:	moveq	r3, #0
   3d014:	cmp	r3, #0
   3d018:	beq	3cff0 <__assert_fail@plt+0x2a9fc>
   3d01c:	cmn	r6, #1
   3d020:	add	r3, r6, r6, lsl #2
   3d024:	moveq	r6, r2
   3d028:	beq	3cfb0 <__assert_fail@plt+0x2a9bc>
   3d02c:	add	r6, r1, r3, lsl #1
   3d030:	cmp	r6, r8
   3d034:	movge	r6, r8
   3d038:	sub	r6, r6, #48	; 0x30
   3d03c:	b	3cfb0 <__assert_fail@plt+0x2a9bc>
   3d040:	mvn	r6, #1
   3d044:	mov	r0, r6
   3d048:	ldrd	r4, [sp]
   3d04c:	ldrd	r6, [sp, #8]
   3d050:	ldr	r8, [sp, #16]
   3d054:	add	sp, sp, #20
   3d058:	pop	{pc}		; (ldr pc, [sp], #4)
   3d05c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3d060:	mov	r4, r1
   3d064:	ldr	r5, [r1, #40]	; 0x28
   3d068:	strd	r6, [sp, #8]
   3d06c:	mov	r6, r0
   3d070:	strd	r8, [sp, #16]
   3d074:	mov	r8, r2
   3d078:	mov	r9, r3
   3d07c:	ldr	r2, [r1, #80]	; 0x50
   3d080:	strd	sl, [sp, #24]
   3d084:	str	lr, [sp, #32]
   3d088:	sub	sp, sp, #12
   3d08c:	ldrb	r7, [sp, #52]	; 0x34
   3d090:	cmp	r2, #1
   3d094:	beq	3d0ac <__assert_fail@plt+0x2aab8>
   3d098:	mov	r1, r5
   3d09c:	mov	r0, r4
   3d0a0:	bl	34358 <__assert_fail@plt+0x21d64>
   3d0a4:	cmp	r0, #1
   3d0a8:	bgt	3d10c <__assert_fail@plt+0x2ab18>
   3d0ac:	ldrb	r2, [r8, #4]
   3d0b0:	add	r5, r5, r9
   3d0b4:	str	r5, [r4, #40]	; 0x28
   3d0b8:	and	r3, r2, #251	; 0xfb
   3d0bc:	cmp	r2, #28
   3d0c0:	cmpne	r3, #26
   3d0c4:	beq	3d12c <__assert_fail@plt+0x2ab38>
   3d0c8:	cmp	r2, #22
   3d0cc:	moveq	r2, r7
   3d0d0:	orrne	r2, r7, #1
   3d0d4:	cmp	r2, #0
   3d0d8:	beq	3d274 <__assert_fail@plt+0x2ac80>
   3d0dc:	ldrb	r2, [r8]
   3d0e0:	mov	r3, #0
   3d0e4:	mov	r0, r3
   3d0e8:	str	r3, [r6]
   3d0ec:	strb	r2, [r6, #4]
   3d0f0:	add	sp, sp, #12
   3d0f4:	ldrd	r4, [sp]
   3d0f8:	ldrd	r6, [sp, #8]
   3d0fc:	ldrd	r8, [sp, #16]
   3d100:	ldrd	sl, [sp, #24]
   3d104:	add	sp, sp, #32
   3d108:	pop	{pc}		; (ldr pc, [sp], #4)
   3d10c:	ldr	r2, [r4, #8]
   3d110:	add	r3, r5, r0
   3d114:	mov	r1, #1
   3d118:	mov	r0, #0
   3d11c:	ldr	r2, [r2, r5, lsl #2]
   3d120:	stm	r6, {r1, r2}
   3d124:	str	r3, [r4, #40]	; 0x28
   3d128:	b	3d0f0 <__assert_fail@plt+0x2aafc>
   3d12c:	ldr	sl, [r4, #56]	; 0x38
   3d130:	cmp	r5, sl
   3d134:	bge	3d1d4 <__assert_fail@plt+0x2abe0>
   3d138:	ldrb	fp, [r8]
   3d13c:	mov	r9, #0
   3d140:	b	3d164 <__assert_fail@plt+0x2ab70>
   3d144:	ldr	r3, [r6, #4]
   3d148:	strb	r7, [r3, r9]
   3d14c:	add	r9, r9, #1
   3d150:	cmp	r9, #32
   3d154:	beq	3d1d4 <__assert_fail@plt+0x2abe0>
   3d158:	ldrb	r2, [r8, #4]
   3d15c:	ldr	r5, [r4, #40]	; 0x28
   3d160:	ldr	sl, [r4, #56]	; 0x38
   3d164:	cmp	r2, #30
   3d168:	beq	3d1dc <__assert_fail@plt+0x2abe8>
   3d16c:	ldr	r2, [r4, #4]
   3d170:	add	r3, r5, #1
   3d174:	str	r3, [r4, #40]	; 0x28
   3d178:	ldrb	r7, [r2, r5]
   3d17c:	cmp	sl, r3
   3d180:	ble	3d1d4 <__assert_fail@plt+0x2abe0>
   3d184:	cmp	fp, r7
   3d188:	bne	3d144 <__assert_fail@plt+0x2ab50>
   3d18c:	ldr	r2, [r4, #4]
   3d190:	ldrb	r2, [r2, r3]
   3d194:	cmp	r2, #93	; 0x5d
   3d198:	bne	3d144 <__assert_fail@plt+0x2ab50>
   3d19c:	ldr	r2, [r6, #4]
   3d1a0:	add	r3, r3, #1
   3d1a4:	mov	r0, #0
   3d1a8:	str	r3, [r4, #40]	; 0x28
   3d1ac:	strb	r0, [r2, r9]
   3d1b0:	ldrb	r3, [r8, #4]
   3d1b4:	cmp	r3, #28
   3d1b8:	beq	3d2a4 <__assert_fail@plt+0x2acb0>
   3d1bc:	cmp	r3, #30
   3d1c0:	beq	3d298 <__assert_fail@plt+0x2aca4>
   3d1c4:	cmp	r3, #26
   3d1c8:	moveq	r3, #3
   3d1cc:	streq	r3, [r6]
   3d1d0:	b	3d0f0 <__assert_fail@plt+0x2aafc>
   3d1d4:	mov	r0, #7
   3d1d8:	b	3d0f0 <__assert_fail@plt+0x2aafc>
   3d1dc:	ldrb	r3, [r4, #75]	; 0x4b
   3d1e0:	cmp	r3, #0
   3d1e4:	beq	3d16c <__assert_fail@plt+0x2ab78>
   3d1e8:	ldrb	r3, [r4, #76]	; 0x4c
   3d1ec:	cmp	r3, #0
   3d1f0:	beq	3d258 <__assert_fail@plt+0x2ac64>
   3d1f4:	ldr	r3, [r4, #28]
   3d1f8:	lsl	r2, r5, #2
   3d1fc:	cmp	r5, r3
   3d200:	beq	3d214 <__assert_fail@plt+0x2ac20>
   3d204:	ldr	r3, [r4, #8]
   3d208:	ldr	r3, [r3, r5, lsl #2]
   3d20c:	cmn	r3, #1
   3d210:	beq	3d16c <__assert_fail@plt+0x2ab78>
   3d214:	ldr	r3, [r4]
   3d218:	ldr	r1, [r4, #12]
   3d21c:	ldr	r1, [r1, r2]
   3d220:	ldr	r2, [r4, #24]
   3d224:	add	r3, r3, r1
   3d228:	ldrb	r7, [r3, r2]
   3d22c:	tst	r7, #128	; 0x80
   3d230:	bne	3d16c <__assert_fail@plt+0x2ab78>
   3d234:	ldr	r0, [r4, #80]	; 0x50
   3d238:	cmp	r0, #1
   3d23c:	beq	3d24c <__assert_fail@plt+0x2ac58>
   3d240:	mov	r1, r5
   3d244:	mov	r0, r4
   3d248:	bl	34358 <__assert_fail@plt+0x21d64>
   3d24c:	add	r3, r5, r0
   3d250:	str	r3, [r4, #40]	; 0x28
   3d254:	b	3d17c <__assert_fail@plt+0x2ab88>
   3d258:	ldr	r2, [r4]
   3d25c:	add	r3, r5, #1
   3d260:	ldr	r1, [r4, #24]
   3d264:	str	r3, [r4, #40]	; 0x28
   3d268:	add	r5, r2, r5
   3d26c:	ldrb	r7, [r5, r1]
   3d270:	b	3d17c <__assert_fail@plt+0x2ab88>
   3d274:	mov	r1, r4
   3d278:	mov	r0, sp
   3d27c:	ldr	r2, [sp, #48]	; 0x30
   3d280:	bl	327ac <__assert_fail@plt+0x201b8>
   3d284:	ldrb	r3, [sp, #4]
   3d288:	cmp	r3, #21
   3d28c:	movne	r0, #11
   3d290:	beq	3d0dc <__assert_fail@plt+0x2aae8>
   3d294:	b	3d0f0 <__assert_fail@plt+0x2aafc>
   3d298:	mov	r3, #4
   3d29c:	str	r3, [r6]
   3d2a0:	b	3d0f0 <__assert_fail@plt+0x2aafc>
   3d2a4:	mov	r3, #2
   3d2a8:	str	r3, [r6]
   3d2ac:	b	3d0f0 <__assert_fail@plt+0x2aafc>
   3d2b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3d2b4:	mov	r5, r1
   3d2b8:	strd	r6, [sp, #8]
   3d2bc:	strd	r8, [sp, #16]
   3d2c0:	strd	sl, [sp, #24]
   3d2c4:	mov	fp, r2
   3d2c8:	mov	sl, r0
   3d2cc:	str	lr, [sp, #32]
   3d2d0:	sub	sp, sp, #164	; 0xa4
   3d2d4:	ldrb	r2, [r2, #4]
   3d2d8:	str	r3, [sp, #20]
   3d2dc:	ldr	r3, [r1]
   3d2e0:	str	r3, [sp, #32]
   3d2e4:	sub	r3, r2, #1
   3d2e8:	cmp	r3, #35	; 0x23
   3d2ec:	ldrls	pc, [pc, r3, lsl #2]
   3d2f0:	b	3de40 <__assert_fail@plt+0x2b84c>
   3d2f4:			; <UNDEFINED> instruction: 0x0003dcb8
   3d2f8:	andeq	sp, r3, r4, ror #13
   3d2fc:	andeq	sp, r3, r0, asr #28
   3d300:	andeq	sp, r3, r8, asr lr
   3d304:	andeq	sp, r3, r4, asr #29
   3d308:	andeq	sp, r3, r0, asr #28
   3d30c:	andeq	sp, r3, r0, asr #28
   3d310:	andeq	sp, r3, r0, asr #12
   3d314:	andeq	sp, r3, r8, lsl #30
   3d318:	andeq	sp, r3, r4, ror #13
   3d31c:	muleq	r3, r0, r3
   3d320:	andeq	sp, r3, r4, asr #20
   3d324:	andeq	sp, r3, r0, asr #28
   3d328:	andeq	sp, r3, r0, asr #28
   3d32c:	andeq	sp, r3, r0, asr #28
   3d330:	andeq	sp, r3, r0, asr #28
   3d334:	andeq	sp, r3, r0, asr #28
   3d338:	muleq	r3, r0, r3
   3d33c:	muleq	r3, r0, r3
   3d340:	muleq	r3, r0, fp
   3d344:	andeq	sp, r3, r0, asr #28
   3d348:	andeq	sp, r3, r0, asr #28
   3d34c:	andeq	sp, r3, r4, lsl #7
   3d350:	andeq	sp, r3, ip, lsr #7
   3d354:	andeq	sp, r3, r0, asr #28
   3d358:	andeq	sp, r3, r0, asr #28
   3d35c:	andeq	sp, r3, r0, asr #28
   3d360:	andeq	sp, r3, r0, asr #28
   3d364:	andeq	sp, r3, r0, asr #28
   3d368:	andeq	sp, r3, r0, asr #28
   3d36c:	andeq	sp, r3, r0, asr #28
   3d370:	andeq	sp, r3, r4, asr #27
   3d374:	andeq	sp, r3, r4, asr #27
   3d378:	andeq	sp, r3, r0, lsr #28
   3d37c:	andeq	sp, r3, r0, lsr #28
   3d380:	andeq	sp, r3, r0, asr #28
   3d384:	ldr	r3, [sp, #20]
   3d388:	tst	r3, #16777216	; 0x1000000
   3d38c:	bne	3d60c <__assert_fail@plt+0x2b018>
   3d390:	ldr	r3, [sp, #20]
   3d394:	tst	r3, #32
   3d398:	bne	3d60c <__assert_fail@plt+0x2b018>
   3d39c:	tst	r3, #16
   3d3a0:	bne	3e120 <__assert_fail@plt+0x2bb2c>
   3d3a4:	cmp	r2, #9
   3d3a8:	beq	3df08 <__assert_fail@plt+0x2b914>
   3d3ac:	ldr	ip, [sp, #32]
   3d3b0:	mov	r0, #1
   3d3b4:	mov	r3, #0
   3d3b8:	mov	r2, r3
   3d3bc:	str	fp, [sp]
   3d3c0:	strb	r0, [fp, #4]
   3d3c4:	add	r1, ip, #64	; 0x40
   3d3c8:	add	r0, ip, #56	; 0x38
   3d3cc:	bl	34938 <__assert_fail@plt+0x22344>
   3d3d0:	subs	r3, r0, #0
   3d3d4:	str	r3, [sp, #24]
   3d3d8:	beq	3ddac <__assert_fail@plt+0x2b7b8>
   3d3dc:	mov	r1, sl
   3d3e0:	mov	r0, fp
   3d3e4:	ldr	r2, [sp, #20]
   3d3e8:	bl	3c620 <__assert_fail@plt+0x2a02c>
   3d3ec:	ldr	r3, [sl, #40]	; 0x28
   3d3f0:	ldrb	r5, [fp, #4]
   3d3f4:	add	r0, r3, r0
   3d3f8:	str	r0, [sl, #40]	; 0x28
   3d3fc:	cmp	r5, #23
   3d400:	cmpne	r5, #11
   3d404:	sub	r2, r5, #18
   3d408:	moveq	r3, #1
   3d40c:	movne	r3, #0
   3d410:	cmp	r2, #1
   3d414:	orrls	r3, r3, #1
   3d418:	sub	r4, r5, #18
   3d41c:	clz	r4, r4
   3d420:	cmp	r3, #0
   3d424:	lsr	r4, r4, #5
   3d428:	beq	3d620 <__assert_fail@plt+0x2b02c>
   3d42c:	ldrd	r2, [fp]
   3d430:	cmp	r5, #23
   3d434:	add	r7, sp, #96	; 0x60
   3d438:	ldr	r6, [sl, #40]	; 0x28
   3d43c:	strd	r2, [sp, #96]	; 0x60
   3d440:	beq	3d834 <__assert_fail@plt+0x2b240>
   3d444:	cmp	r5, #19
   3d448:	beq	3d7b4 <__assert_fail@plt+0x2b1c0>
   3d44c:	mov	r1, sl
   3d450:	mov	r0, fp
   3d454:	ldr	r2, [sp, #20]
   3d458:	bl	3c620 <__assert_fail@plt+0x2a02c>
   3d45c:	ldr	r3, [sl, #40]	; 0x28
   3d460:	ldr	r2, [sp, #24]
   3d464:	add	r0, r3, r0
   3d468:	cmp	r2, #0
   3d46c:	str	r0, [sl, #40]	; 0x28
   3d470:	beq	3d8ac <__assert_fail@plt+0x2b2b8>
   3d474:	cmp	r5, #18
   3d478:	beq	3da04 <__assert_fail@plt+0x2b410>
   3d47c:	ldr	r6, [sp, #24]
   3d480:	ldrb	r3, [r6, #24]
   3d484:	cmp	r3, #17
   3d488:	beq	3d800 <__assert_fail@plt+0x2b20c>
   3d48c:	mov	r4, #0
   3d490:	mvn	r9, #0
   3d494:	str	r4, [sp, #36]	; 0x24
   3d498:	mov	r3, #11
   3d49c:	ldr	r2, [sp, #32]
   3d4a0:	mov	r0, #0
   3d4a4:	mov	r1, #0
   3d4a8:	add	r5, sp, #128	; 0x80
   3d4ac:	str	r5, [sp]
   3d4b0:	strd	r0, [sp, #128]	; 0x80
   3d4b4:	add	r7, r2, #56	; 0x38
   3d4b8:	add	r8, r2, #64	; 0x40
   3d4bc:	strb	r3, [sp, #132]	; 0x84
   3d4c0:	mov	r2, r6
   3d4c4:	mov	r0, r7
   3d4c8:	mov	r1, r8
   3d4cc:	mov	r3, #0
   3d4d0:	bl	34938 <__assert_fail@plt+0x22344>
   3d4d4:	subs	r2, r0, #0
   3d4d8:	beq	3d788 <__assert_fail@plt+0x2b194>
   3d4dc:	add	r4, r4, #2
   3d4e0:	cmp	r4, r9
   3d4e4:	bgt	3d584 <__assert_fail@plt+0x2af90>
   3d4e8:	strd	sl, [sp, #40]	; 0x28
   3d4ec:	mov	sl, r2
   3d4f0:	mov	r0, r6
   3d4f4:	ldr	r1, [sp, #32]
   3d4f8:	mov	fp, #0
   3d4fc:	bl	34a08 <__assert_fail@plt+0x22414>
   3d500:	mov	r2, sl
   3d504:	mov	sl, #0
   3d508:	str	r5, [sp]
   3d50c:	mov	ip, #16
   3d510:	mov	r3, r0
   3d514:	mov	r6, r0
   3d518:	mov	r1, r8
   3d51c:	strd	sl, [r5]
   3d520:	mov	r0, r7
   3d524:	strb	ip, [sp, #132]	; 0x84
   3d528:	add	r4, r4, #1
   3d52c:	bl	34938 <__assert_fail@plt+0x22344>
   3d530:	clz	r3, r0
   3d534:	cmp	r6, #0
   3d538:	lsr	r3, r3, #5
   3d53c:	moveq	ip, #1
   3d540:	mov	r2, r0
   3d544:	mov	r1, r8
   3d548:	mov	r0, r7
   3d54c:	movne	ip, r3
   3d550:	subs	r3, ip, #0
   3d554:	bne	3d788 <__assert_fail@plt+0x2b194>
   3d558:	mov	ip, #10
   3d55c:	str	r5, [sp]
   3d560:	strd	sl, [r5]
   3d564:	strb	ip, [sp, #132]	; 0x84
   3d568:	bl	34938 <__assert_fail@plt+0x22344>
   3d56c:	subs	sl, r0, #0
   3d570:	beq	3d788 <__assert_fail@plt+0x2b194>
   3d574:	cmp	r4, r9
   3d578:	ble	3d4f0 <__assert_fail@plt+0x2aefc>
   3d57c:	mov	r2, sl
   3d580:	ldrd	sl, [sp, #40]	; 0x28
   3d584:	ldr	r1, [sp, #36]	; 0x24
   3d588:	cmp	r1, #0
   3d58c:	beq	3d9fc <__assert_fail@plt+0x2b408>
   3d590:	mov	r3, r2
   3d594:	mov	r9, #0
   3d598:	str	r5, [sp]
   3d59c:	mov	r2, r1
   3d5a0:	mov	r1, r8
   3d5a4:	mov	r8, #0
   3d5a8:	mov	ip, #16
   3d5ac:	mov	r0, r7
   3d5b0:	strd	r8, [r5]
   3d5b4:	strb	ip, [sp, #132]	; 0x84
   3d5b8:	bl	34938 <__assert_fail@plt+0x22344>
   3d5bc:	ldr	r3, [sp, #204]	; 0xcc
   3d5c0:	ldr	r3, [r3]
   3d5c4:	cmp	r3, #0
   3d5c8:	bne	3d8a0 <__assert_fail@plt+0x2b2ac>
   3d5cc:	str	r0, [sp, #24]
   3d5d0:	ldr	r3, [sp, #20]
   3d5d4:	ldrb	r5, [fp, #4]
   3d5d8:	tst	r3, #16777216	; 0x1000000
   3d5dc:	beq	3d3fc <__assert_fail@plt+0x2ae08>
   3d5e0:	cmp	r5, #23
   3d5e4:	cmpne	r5, #11
   3d5e8:	bne	3d3fc <__assert_fail@plt+0x2ae08>
   3d5ec:	ldr	r3, [sp, #24]
   3d5f0:	cmp	r3, #0
   3d5f4:	beq	3d60c <__assert_fail@plt+0x2b018>
   3d5f8:	movw	r1, #14332	; 0x37fc
   3d5fc:	movt	r1, #3
   3d600:	mov	r0, r3
   3d604:	mov	r2, #0
   3d608:	bl	32718 <__assert_fail@plt+0x20124>
   3d60c:	mov	r2, #0
   3d610:	mov	r3, #13
   3d614:	str	r2, [sp, #24]
   3d618:	ldr	r2, [sp, #204]	; 0xcc
   3d61c:	str	r3, [r2]
   3d620:	ldr	r0, [sp, #24]
   3d624:	add	sp, sp, #164	; 0xa4
   3d628:	ldrd	r4, [sp]
   3d62c:	ldrd	r6, [sp, #8]
   3d630:	ldrd	r8, [sp, #16]
   3d634:	ldrd	sl, [sp, #24]
   3d638:	add	sp, sp, #32
   3d63c:	pop	{pc}		; (ldr pc, [sp], #4)
   3d640:	ldr	r4, [r5, #24]
   3d644:	mov	r1, r0
   3d648:	mov	r0, fp
   3d64c:	ldr	r6, [sp, #20]
   3d650:	add	r3, r4, #1
   3d654:	orr	r2, r6, #8388608	; 0x800000
   3d658:	str	r3, [r5, #24]
   3d65c:	bl	3c620 <__assert_fail@plt+0x2a02c>
   3d660:	ldr	r3, [sl, #40]	; 0x28
   3d664:	ldrb	r2, [fp, #4]
   3d668:	add	r3, r3, r0
   3d66c:	cmp	r2, #9
   3d670:	str	r3, [sl, #40]	; 0x28
   3d674:	moveq	r2, #0
   3d678:	beq	3df28 <__assert_fail@plt+0x2b934>
   3d67c:	ldr	r3, [sp, #200]	; 0xc8
   3d680:	mov	r2, fp
   3d684:	mov	r1, r5
   3d688:	add	r0, r3, #1
   3d68c:	ldr	r3, [sp, #204]	; 0xcc
   3d690:	stm	sp, {r0, r3}
   3d694:	mov	r3, r6
   3d698:	mov	r0, sl
   3d69c:	bl	3e9f4 <__assert_fail@plt+0x2c400>
   3d6a0:	ldr	r3, [sp, #204]	; 0xcc
   3d6a4:	mov	r2, r0
   3d6a8:	ldr	r3, [r3]
   3d6ac:	cmp	r3, #0
   3d6b0:	bne	3d6e4 <__assert_fail@plt+0x2b0f0>
   3d6b4:	ldrb	r1, [fp, #4]
   3d6b8:	cmp	r1, #9
   3d6bc:	beq	3df28 <__assert_fail@plt+0x2b934>
   3d6c0:	cmp	r0, #0
   3d6c4:	beq	3d6d8 <__assert_fail@plt+0x2b0e4>
   3d6c8:	movw	r1, #14332	; 0x37fc
   3d6cc:	movt	r1, #3
   3d6d0:	mov	r2, r3
   3d6d4:	bl	32718 <__assert_fail@plt+0x20124>
   3d6d8:	ldr	r2, [sp, #204]	; 0xcc
   3d6dc:	mov	r3, #8
   3d6e0:	str	r3, [r2]
   3d6e4:	mov	r3, #0
   3d6e8:	str	r3, [sp, #24]
   3d6ec:	b	3d620 <__assert_fail@plt+0x2b02c>
   3d6f0:	cmp	r4, #0
   3d6f4:	ble	3e800 <__assert_fail@plt+0x2c20c>
   3d6f8:	cmp	r4, #1
   3d6fc:	beq	3e79c <__assert_fail@plt+0x2c1a8>
   3d700:	ldr	r6, [sp, #24]
   3d704:	mov	r7, #2
   3d708:	add	r5, sp, #128	; 0x80
   3d70c:	str	r9, [sp, #36]	; 0x24
   3d710:	ldr	r3, [sp, #32]
   3d714:	strd	sl, [sp, #40]	; 0x28
   3d718:	mov	r9, r6
   3d71c:	add	r1, r3, #56	; 0x38
   3d720:	add	r3, r3, #64	; 0x40
   3d724:	mov	sl, r3
   3d728:	mov	fp, r1
   3d72c:	b	3d738 <__assert_fail@plt+0x2b144>
   3d730:	cmp	r7, r4
   3d734:	bgt	3d9e8 <__assert_fail@plt+0x2b3f4>
   3d738:	mov	r0, r6
   3d73c:	ldr	r1, [sp, #32]
   3d740:	mov	r8, #0
   3d744:	bl	34a08 <__assert_fail@plt+0x22414>
   3d748:	mov	r2, r9
   3d74c:	mov	r9, #0
   3d750:	str	r5, [sp]
   3d754:	mov	ip, #16
   3d758:	mov	r6, r0
   3d75c:	mov	r3, r0
   3d760:	mov	r1, sl
   3d764:	strd	r8, [r5]
   3d768:	mov	r0, fp
   3d76c:	strb	ip, [sp, #132]	; 0x84
   3d770:	add	r7, r7, #1
   3d774:	bl	34938 <__assert_fail@plt+0x22344>
   3d778:	cmp	r0, #0
   3d77c:	cmpne	r6, #0
   3d780:	mov	r9, r0
   3d784:	bne	3d730 <__assert_fail@plt+0x2b13c>
   3d788:	ldr	r2, [sp, #204]	; 0xcc
   3d78c:	mov	r3, #12
   3d790:	str	r3, [r2]
   3d794:	movw	r1, #14332	; 0x37fc
   3d798:	movt	r1, #3
   3d79c:	ldr	r0, [sp, #24]
   3d7a0:	mov	r2, #0
   3d7a4:	bl	32718 <__assert_fail@plt+0x20124>
   3d7a8:	mov	r3, #0
   3d7ac:	str	r3, [sp, #24]
   3d7b0:	b	3d620 <__assert_fail@plt+0x2b02c>
   3d7b4:	mov	r1, sl
   3d7b8:	mov	r0, fp
   3d7bc:	ldr	r2, [sp, #20]
   3d7c0:	bl	3c620 <__assert_fail@plt+0x2a02c>
   3d7c4:	ldr	r3, [sl, #40]	; 0x28
   3d7c8:	ldr	r2, [sp, #24]
   3d7cc:	add	r0, r3, r0
   3d7d0:	cmp	r2, #0
   3d7d4:	str	r0, [sl, #40]	; 0x28
   3d7d8:	beq	3d8ac <__assert_fail@plt+0x2b2b8>
   3d7dc:	ldr	r6, [sp, #24]
   3d7e0:	ldrb	r3, [r6, #24]
   3d7e4:	cmp	r3, #17
   3d7e8:	beq	3e830 <__assert_fail@plt+0x2c23c>
   3d7ec:	mov	r3, #0
   3d7f0:	mov	r9, #1
   3d7f4:	str	r3, [sp, #36]	; 0x24
   3d7f8:	mov	r3, #10
   3d7fc:	b	3d49c <__assert_fail@plt+0x2aea8>
   3d800:	ldr	r6, [sp, #24]
   3d804:	mov	r3, #0
   3d808:	mvn	r9, #0
   3d80c:	mov	r4, r3
   3d810:	str	r3, [sp, #36]	; 0x24
   3d814:	movw	r1, #10584	; 0x2958
   3d818:	movt	r1, #3
   3d81c:	ldr	r2, [r6, #20]
   3d820:	mov	r0, r6
   3d824:	bl	32718 <__assert_fail@plt+0x20124>
   3d828:	cmn	r9, #1
   3d82c:	bne	3d7f8 <__assert_fail@plt+0x2b204>
   3d830:	b	3d498 <__assert_fail@plt+0x2aea4>
   3d834:	mov	r1, fp
   3d838:	mov	r0, sl
   3d83c:	ldr	r2, [sp, #20]
   3d840:	bl	3cf8c <__assert_fail@plt+0x2a998>
   3d844:	cmn	r0, #1
   3d848:	mov	r4, r0
   3d84c:	beq	3d8c8 <__assert_fail@plt+0x2b2d4>
   3d850:	cmn	r0, #2
   3d854:	beq	3d86c <__assert_fail@plt+0x2b278>
   3d858:	ldrb	r3, [fp, #4]
   3d85c:	cmp	r3, #24
   3d860:	beq	3d98c <__assert_fail@plt+0x2b398>
   3d864:	cmp	r3, #1
   3d868:	beq	3d9b4 <__assert_fail@plt+0x2b3c0>
   3d86c:	ldr	r3, [sp, #20]
   3d870:	tst	r3, #2097152	; 0x200000
   3d874:	beq	3e3a8 <__assert_fail@plt+0x2bdb4>
   3d878:	ldrd	r2, [r7]
   3d87c:	mov	r1, #1
   3d880:	str	r6, [sl, #40]	; 0x28
   3d884:	ldr	r0, [sp, #24]
   3d888:	strd	r2, [fp]
   3d88c:	ldr	r3, [sp, #204]	; 0xcc
   3d890:	strb	r1, [fp, #4]
   3d894:	ldr	r3, [r3]
   3d898:	cmp	r3, #0
   3d89c:	beq	3d5cc <__assert_fail@plt+0x2afd8>
   3d8a0:	cmp	r0, #0
   3d8a4:	bne	3d5cc <__assert_fail@plt+0x2afd8>
   3d8a8:	b	3d9d8 <__assert_fail@plt+0x2b3e4>
   3d8ac:	ldr	r3, [sp, #204]	; 0xcc
   3d8b0:	ldr	r3, [r3]
   3d8b4:	cmp	r3, #0
   3d8b8:	bne	3d6e4 <__assert_fail@plt+0x2b0f0>
   3d8bc:	mov	r3, #0
   3d8c0:	str	r3, [sp, #24]
   3d8c4:	b	3d5d0 <__assert_fail@plt+0x2afdc>
   3d8c8:	ldrb	r3, [fp, #4]
   3d8cc:	cmp	r3, #1
   3d8d0:	bne	3d9cc <__assert_fail@plt+0x2b3d8>
   3d8d4:	ldrb	r3, [fp]
   3d8d8:	cmp	r3, #44	; 0x2c
   3d8dc:	bne	3d9cc <__assert_fail@plt+0x2b3d8>
   3d8e0:	mov	r4, #0
   3d8e4:	mov	r1, fp
   3d8e8:	mov	r0, sl
   3d8ec:	ldr	r2, [sp, #20]
   3d8f0:	bl	3cf8c <__assert_fail@plt+0x2a998>
   3d8f4:	cmn	r0, #2
   3d8f8:	mov	r9, r0
   3d8fc:	beq	3d86c <__assert_fail@plt+0x2b278>
   3d900:	cmn	r0, #1
   3d904:	cmpne	r0, r4
   3d908:	blt	3d9cc <__assert_fail@plt+0x2b3d8>
   3d90c:	ldrb	r3, [fp, #4]
   3d910:	cmp	r3, #24
   3d914:	bne	3d9cc <__assert_fail@plt+0x2b3d8>
   3d918:	cmn	r0, #1
   3d91c:	bne	3d990 <__assert_fail@plt+0x2b39c>
   3d920:	cmp	r4, #32768	; 0x8000
   3d924:	movlt	r5, #0
   3d928:	movge	r5, #1
   3d92c:	cmp	r5, #0
   3d930:	bne	3d9a4 <__assert_fail@plt+0x2b3b0>
   3d934:	mov	r1, sl
   3d938:	mov	r0, fp
   3d93c:	ldr	r2, [sp, #20]
   3d940:	bl	3c620 <__assert_fail@plt+0x2a02c>
   3d944:	ldr	r3, [sl, #40]	; 0x28
   3d948:	ldr	ip, [sp, #24]
   3d94c:	add	r0, r3, r0
   3d950:	cmp	ip, #0
   3d954:	str	r0, [sl, #40]	; 0x28
   3d958:	beq	3d8ac <__assert_fail@plt+0x2b2b8>
   3d95c:	orrs	r3, r9, r4
   3d960:	bne	3d6f0 <__assert_fail@plt+0x2b0fc>
   3d964:	mov	r2, r5
   3d968:	movw	r1, #14332	; 0x37fc
   3d96c:	movt	r1, #3
   3d970:	mov	r0, ip
   3d974:	bl	32718 <__assert_fail@plt+0x20124>
   3d978:	ldr	r3, [sp, #204]	; 0xcc
   3d97c:	ldr	r3, [r3]
   3d980:	cmp	r3, #0
   3d984:	beq	3d8bc <__assert_fail@plt+0x2b2c8>
   3d988:	b	3d794 <__assert_fail@plt+0x2b1a0>
   3d98c:	mov	r9, r0
   3d990:	cmp	r9, #32768	; 0x8000
   3d994:	movlt	r5, #0
   3d998:	movge	r5, #1
   3d99c:	cmp	r5, #0
   3d9a0:	beq	3d934 <__assert_fail@plt+0x2b340>
   3d9a4:	ldr	r2, [sp, #204]	; 0xcc
   3d9a8:	mov	r3, #15
   3d9ac:	str	r3, [r2]
   3d9b0:	b	3d9d8 <__assert_fail@plt+0x2b3e4>
   3d9b4:	ldrb	r3, [fp]
   3d9b8:	cmp	r3, #44	; 0x2c
   3d9bc:	beq	3d8e4 <__assert_fail@plt+0x2b2f0>
   3d9c0:	ldr	r3, [sp, #20]
   3d9c4:	tst	r3, #2097152	; 0x200000
   3d9c8:	bne	3d878 <__assert_fail@plt+0x2b284>
   3d9cc:	ldr	r2, [sp, #204]	; 0xcc
   3d9d0:	mov	r3, #10
   3d9d4:	str	r3, [r2]
   3d9d8:	ldr	r3, [sp, #24]
   3d9dc:	cmp	r3, #0
   3d9e0:	beq	3d6e4 <__assert_fail@plt+0x2b0f0>
   3d9e4:	b	3d794 <__assert_fail@plt+0x2b1a0>
   3d9e8:	add	r9, sp, #36	; 0x24
   3d9ec:	mov	r2, r0
   3d9f0:	ldm	r9, {r9, sl, fp}
   3d9f4:	cmp	r4, r9
   3d9f8:	bne	3da14 <__assert_fail@plt+0x2b420>
   3d9fc:	str	r2, [sp, #24]
   3da00:	b	3d5d0 <__assert_fail@plt+0x2afdc>
   3da04:	ldr	r2, [sp, #24]
   3da08:	mvn	r9, #0
   3da0c:	mov	r4, #1
   3da10:	mov	r6, r2
   3da14:	mov	r0, r6
   3da18:	ldr	r1, [sp, #32]
   3da1c:	str	r2, [sp, #36]	; 0x24
   3da20:	bl	34a08 <__assert_fail@plt+0x22414>
   3da24:	subs	r6, r0, #0
   3da28:	ldr	r2, [sp, #36]	; 0x24
   3da2c:	beq	3d788 <__assert_fail@plt+0x2b194>
   3da30:	ldrb	r3, [r6, #24]
   3da34:	str	r2, [sp, #36]	; 0x24
   3da38:	cmp	r3, #17
   3da3c:	bne	3d828 <__assert_fail@plt+0x2b234>
   3da40:	b	3d814 <__assert_fail@plt+0x2b220>
   3da44:	ldr	r4, [fp]
   3da48:	movw	r3, #783	; 0x30f
   3da4c:	tst	r4, r3
   3da50:	beq	3dab4 <__assert_fail@plt+0x2b4c0>
   3da54:	ldr	r3, [sp, #32]
   3da58:	ldrb	r3, [r3, #88]	; 0x58
   3da5c:	ands	r5, r3, #16
   3da60:	bne	3dab4 <__assert_fail@plt+0x2b4c0>
   3da64:	ldr	r0, [sp, #32]
   3da68:	orr	r3, r3, #16
   3da6c:	ands	r2, r3, #8
   3da70:	mov	r1, r3
   3da74:	strb	r3, [r0, #88]	; 0x58
   3da78:	bne	3e730 <__assert_fail@plt+0x2c13c>
   3da7c:	mov	r3, #0
   3da80:	movt	r3, #1023	; 0x3ff
   3da84:	tst	r1, #4
   3da88:	mvn	r1, #2013265921	; 0x78000001
   3da8c:	strd	r2, [r0, #96]	; 0x60
   3da90:	mvn	r3, #-134217727	; 0xf8000001
   3da94:	str	r1, [r0, #104]	; 0x68
   3da98:	str	r3, [r0, #108]	; 0x6c
   3da9c:	beq	3e67c <__assert_fail@plt+0x2c088>
   3daa0:	str	r2, [r0, #112]	; 0x70
   3daa4:	str	r2, [r0, #116]	; 0x74
   3daa8:	str	r2, [r0, #120]	; 0x78
   3daac:	str	r2, [r0, #124]	; 0x7c
   3dab0:	ldr	r4, [fp]
   3dab4:	sub	r3, r4, #256	; 0x100
   3dab8:	ldr	r2, [sp, #32]
   3dabc:	bics	r3, r3, #256	; 0x100
   3dac0:	add	r5, r2, #56	; 0x38
   3dac4:	add	r6, r2, #64	; 0x40
   3dac8:	bne	3e08c <__assert_fail@plt+0x2ba98>
   3dacc:	cmp	r4, #256	; 0x100
   3dad0:	beq	3e180 <__assert_fail@plt+0x2bb8c>
   3dad4:	mov	r0, #5
   3dad8:	mov	r2, r3
   3dadc:	str	fp, [sp]
   3dae0:	mov	r1, r6
   3dae4:	str	r0, [fp]
   3dae8:	mov	r0, r5
   3daec:	bl	34938 <__assert_fail@plt+0x22344>
   3daf0:	mov	r7, r0
   3daf4:	mov	r3, #10
   3daf8:	str	r3, [fp]
   3dafc:	mov	r3, #0
   3db00:	mov	r1, r6
   3db04:	str	fp, [sp]
   3db08:	mov	r2, r3
   3db0c:	mov	r0, r5
   3db10:	bl	34938 <__assert_fail@plt+0x22344>
   3db14:	add	r3, sp, #128	; 0x80
   3db18:	mov	r4, r0
   3db1c:	mov	ip, #10
   3db20:	mov	r8, #0
   3db24:	mov	r9, #0
   3db28:	mov	r1, r6
   3db2c:	str	r3, [sp]
   3db30:	mov	r0, r5
   3db34:	mov	r3, r4
   3db38:	mov	r2, r7
   3db3c:	clz	r4, r4
   3db40:	strd	r8, [sp, #128]	; 0x80
   3db44:	lsr	r4, r4, #5
   3db48:	strb	ip, [sp, #132]	; 0x84
   3db4c:	bl	34938 <__assert_fail@plt+0x22344>
   3db50:	cmp	r7, #0
   3db54:	str	r0, [sp, #24]
   3db58:	moveq	r4, #1
   3db5c:	cmp	r0, #0
   3db60:	movne	r3, r4
   3db64:	moveq	r3, #1
   3db68:	cmp	r3, #0
   3db6c:	bne	3ddac <__assert_fail@plt+0x2b7b8>
   3db70:	mov	r0, fp
   3db74:	mov	r1, sl
   3db78:	ldr	r2, [sp, #20]
   3db7c:	bl	3c620 <__assert_fail@plt+0x2a02c>
   3db80:	ldr	r3, [sl, #40]	; 0x28
   3db84:	add	r3, r3, r0
   3db88:	str	r3, [sl, #40]	; 0x28
   3db8c:	b	3d620 <__assert_fail@plt+0x2b02c>
   3db90:	mov	r5, #0
   3db94:	mov	r1, #1
   3db98:	mov	r0, #32
   3db9c:	str	r5, [sp, #68]	; 0x44
   3dba0:	bl	2f080 <__assert_fail@plt+0x1ca8c>
   3dba4:	mov	r8, r0
   3dba8:	mov	r1, #1
   3dbac:	mov	r0, #40	; 0x28
   3dbb0:	bl	2f080 <__assert_fail@plt+0x1ca8c>
   3dbb4:	clz	r4, r0
   3dbb8:	cmp	r8, r5
   3dbbc:	lsr	r4, r4, #5
   3dbc0:	moveq	r4, #1
   3dbc4:	mov	r9, r0
   3dbc8:	cmp	r4, r5
   3dbcc:	bne	3e3c4 <__assert_fail@plt+0x2bdd0>
   3dbd0:	mov	r1, sl
   3dbd4:	mov	r0, fp
   3dbd8:	ldr	r2, [sp, #20]
   3dbdc:	bl	327ac <__assert_fail@plt+0x201b8>
   3dbe0:	ldrb	r3, [fp, #4]
   3dbe4:	mov	r5, r0
   3dbe8:	cmp	r3, #2
   3dbec:	beq	3e398 <__assert_fail@plt+0x2bda4>
   3dbf0:	cmp	r3, #25
   3dbf4:	strne	r4, [sp, #44]	; 0x2c
   3dbf8:	beq	3e0b4 <__assert_fail@plt+0x2bac0>
   3dbfc:	ldr	r7, [sp, #20]
   3dc00:	cmp	r3, #21
   3dc04:	mov	r0, #1
   3dc08:	moveq	r3, #1
   3dc0c:	strbeq	r3, [fp, #4]
   3dc10:	mov	r3, #0
   3dc14:	ubfx	r2, r7, #16, #1
   3dc18:	str	r3, [sp, #24]
   3dc1c:	str	r3, [sp, #40]	; 0x28
   3dc20:	add	r3, sp, #96	; 0x60
   3dc24:	str	r3, [sp, #36]	; 0x24
   3dc28:	str	r2, [sp, #48]	; 0x30
   3dc2c:	mov	ip, #3
   3dc30:	mov	r3, r5
   3dc34:	str	r7, [sp]
   3dc38:	mov	r2, fp
   3dc3c:	mov	r1, sl
   3dc40:	str	r0, [sp, #4]
   3dc44:	str	ip, [sp, #72]	; 0x48
   3dc48:	add	r0, sp, #72	; 0x48
   3dc4c:	ldr	ip, [sp, #36]	; 0x24
   3dc50:	str	ip, [sp, #76]	; 0x4c
   3dc54:	bl	3d05c <__assert_fail@plt+0x2aa68>
   3dc58:	cmp	r0, #0
   3dc5c:	bne	3e16c <__assert_fail@plt+0x2bb78>
   3dc60:	mov	r2, r7
   3dc64:	mov	r1, sl
   3dc68:	mov	r0, fp
   3dc6c:	bl	327ac <__assert_fail@plt+0x201b8>
   3dc70:	ldr	r3, [sp, #72]	; 0x48
   3dc74:	mov	r5, r0
   3dc78:	sub	r2, r3, #2
   3dc7c:	bics	r2, r2, #2
   3dc80:	beq	3dc98 <__assert_fail@plt+0x2b6a4>
   3dc84:	ldrb	r2, [fp, #4]
   3dc88:	cmp	r2, #2
   3dc8c:	beq	3e110 <__assert_fail@plt+0x2bb1c>
   3dc90:	cmp	r2, #22
   3dc94:	beq	3e1ac <__assert_fail@plt+0x2bbb8>
   3dc98:	cmp	r3, #4
   3dc9c:	ldrls	pc, [pc, r3, lsl #2]
   3dca0:	b	3dfe4 <__assert_fail@plt+0x2b9f0>
   3dca4:	andeq	sp, r3, r4, asr #31
   3dca8:	andeq	lr, r3, r4, rrx
   3dcac:	andeq	lr, r3, r4, asr #32
   3dcb0:	andeq	sp, r3, ip, lsl #31
   3dcb4:	andeq	sp, r3, r4, ror #31
   3dcb8:	ldr	r3, [sp, #32]
   3dcbc:	str	fp, [sp]
   3dcc0:	add	r6, r3, #56	; 0x38
   3dcc4:	add	r5, r3, #64	; 0x40
   3dcc8:	mov	r3, #0
   3dccc:	mov	r0, r6
   3dcd0:	mov	r2, r3
   3dcd4:	mov	r1, r5
   3dcd8:	bl	34938 <__assert_fail@plt+0x22344>
   3dcdc:	subs	r3, r0, #0
   3dce0:	str	r3, [sp, #24]
   3dce4:	beq	3ddac <__assert_fail@plt+0x2b7b8>
   3dce8:	ldr	r3, [sp, #32]
   3dcec:	ldr	r3, [r3, #92]	; 0x5c
   3dcf0:	cmp	r3, #1
   3dcf4:	ble	3d3dc <__assert_fail@plt+0x2ade8>
   3dcf8:	mov	r9, #0
   3dcfc:	mov	r8, #0
   3dd00:	ldr	r4, [sp, #24]
   3dd04:	add	r7, sp, #128	; 0x80
   3dd08:	strd	r8, [sp, #24]
   3dd0c:	mov	r9, r5
   3dd10:	ldr	r3, [sl, #40]	; 0x28
   3dd14:	mov	r1, sl
   3dd18:	mov	r0, fp
   3dd1c:	ldr	ip, [sl, #56]	; 0x38
   3dd20:	ldr	r2, [sp, #20]
   3dd24:	cmp	ip, r3
   3dd28:	ble	3e178 <__assert_fail@plt+0x2bb84>
   3dd2c:	ldr	ip, [sl, #28]
   3dd30:	cmp	r3, ip
   3dd34:	beq	3e178 <__assert_fail@plt+0x2bb84>
   3dd38:	ldr	ip, [sl, #8]
   3dd3c:	ldr	r3, [ip, r3, lsl #2]
   3dd40:	cmn	r3, #1
   3dd44:	bne	3e178 <__assert_fail@plt+0x2bb84>
   3dd48:	bl	3c620 <__assert_fail@plt+0x2a02c>
   3dd4c:	ldr	ip, [sl, #40]	; 0x28
   3dd50:	mov	r3, #0
   3dd54:	mov	r1, r9
   3dd58:	mov	r2, r3
   3dd5c:	str	fp, [sp]
   3dd60:	add	ip, ip, r0
   3dd64:	mov	r0, r6
   3dd68:	str	ip, [sl, #40]	; 0x28
   3dd6c:	bl	34938 <__assert_fail@plt+0x22344>
   3dd70:	mov	r5, r0
   3dd74:	mov	r3, r0
   3dd78:	ldrd	r0, [sp, #24]
   3dd7c:	mov	ip, #16
   3dd80:	mov	r2, r4
   3dd84:	str	r7, [sp]
   3dd88:	strd	r0, [r7]
   3dd8c:	mov	r1, r9
   3dd90:	mov	r0, r6
   3dd94:	strb	ip, [sp, #132]	; 0x84
   3dd98:	bl	34938 <__assert_fail@plt+0x22344>
   3dd9c:	cmp	r0, #0
   3dda0:	cmpne	r5, #0
   3dda4:	mov	r4, r0
   3dda8:	bne	3dd10 <__assert_fail@plt+0x2b71c>
   3ddac:	mov	r2, #0
   3ddb0:	mov	r3, #12
   3ddb4:	str	r2, [sp, #24]
   3ddb8:	ldr	r2, [sp, #204]	; 0xcc
   3ddbc:	str	r3, [r2]
   3ddc0:	b	3d620 <__assert_fail@plt+0x2b02c>
   3ddc4:	sub	r1, r2, #33	; 0x21
   3ddc8:	movw	r3, #34408	; 0x8668
   3ddcc:	movt	r3, #4
   3ddd0:	clz	r1, r1
   3ddd4:	lsr	r1, r1, #5
   3ddd8:	movw	r2, #34344	; 0x8628
   3dddc:	movt	r2, #4
   3dde0:	str	r1, [sp]
   3dde4:	ldr	r0, [sp, #32]
   3dde8:	ldr	r1, [sp, #204]	; 0xcc
   3ddec:	str	r1, [sp, #4]
   3ddf0:	ldr	r1, [sl, #64]	; 0x40
   3ddf4:	bl	38560 <__assert_fail@plt+0x25f6c>
   3ddf8:	ldr	r3, [sp, #204]	; 0xcc
   3ddfc:	str	r0, [sp, #24]
   3de00:	ldr	r2, [r3]
   3de04:	clz	r3, r0
   3de08:	lsr	r3, r3, #5
   3de0c:	cmp	r2, #0
   3de10:	moveq	r3, #0
   3de14:	cmp	r3, #0
   3de18:	beq	3d3dc <__assert_fail@plt+0x2ade8>
   3de1c:	b	3d6e4 <__assert_fail@plt+0x2b0f0>
   3de20:	sub	r1, r2, #35	; 0x23
   3de24:	movw	r3, #17776	; 0x4570
   3de28:	movt	r3, #4
   3de2c:	clz	r1, r1
   3de30:	movw	r2, #34360	; 0x8638
   3de34:	movt	r2, #4
   3de38:	lsr	r1, r1, #5
   3de3c:	b	3dde0 <__assert_fail@plt+0x2b7ec>
   3de40:	mov	r2, #0
   3de44:	mov	r3, #5
   3de48:	str	r2, [sp, #24]
   3de4c:	ldr	r2, [sp, #204]	; 0xcc
   3de50:	str	r3, [r2]
   3de54:	b	3d620 <__assert_fail@plt+0x2b02c>
   3de58:	ldr	r3, [sp, #32]
   3de5c:	mov	ip, #1
   3de60:	ldr	r2, [fp]
   3de64:	ldr	r3, [r3, #84]	; 0x54
   3de68:	lsl	ip, ip, r2
   3de6c:	ands	r3, ip, r3
   3de70:	beq	3e3e8 <__assert_fail@plt+0x2bdf4>
   3de74:	ldr	r4, [sp, #32]
   3de78:	mov	r3, #0
   3de7c:	mov	r2, r3
   3de80:	ldr	lr, [r4, #80]	; 0x50
   3de84:	add	r1, r4, #64	; 0x40
   3de88:	add	r0, r4, #56	; 0x38
   3de8c:	orr	ip, lr, ip
   3de90:	str	ip, [r4, #80]	; 0x50
   3de94:	str	fp, [sp]
   3de98:	bl	34938 <__assert_fail@plt+0x22344>
   3de9c:	subs	r3, r0, #0
   3dea0:	str	r3, [sp, #24]
   3dea4:	beq	3ddac <__assert_fail@plt+0x2b7b8>
   3dea8:	ldrb	r3, [r4, #88]	; 0x58
   3deac:	ldr	r2, [r4, #76]	; 0x4c
   3deb0:	orr	r3, r3, #2
   3deb4:	add	r2, r2, #1
   3deb8:	str	r2, [r4, #76]	; 0x4c
   3debc:	strb	r3, [r4, #88]	; 0x58
   3dec0:	b	3d3dc <__assert_fail@plt+0x2ade8>
   3dec4:	ldr	r4, [sp, #32]
   3dec8:	mov	r3, #0
   3decc:	mov	r2, r3
   3ded0:	str	fp, [sp]
   3ded4:	add	r1, r4, #64	; 0x40
   3ded8:	add	r0, r4, #56	; 0x38
   3dedc:	bl	34938 <__assert_fail@plt+0x22344>
   3dee0:	subs	r3, r0, #0
   3dee4:	str	r3, [sp, #24]
   3dee8:	beq	3ddac <__assert_fail@plt+0x2b7b8>
   3deec:	ldr	r3, [r4, #92]	; 0x5c
   3def0:	cmp	r3, #1
   3def4:	ble	3d3dc <__assert_fail@plt+0x2ade8>
   3def8:	ldrb	r3, [r4, #88]	; 0x58
   3defc:	orr	r3, r3, #2
   3df00:	strb	r3, [r4, #88]	; 0x58
   3df04:	b	3d3dc <__assert_fail@plt+0x2ade8>
   3df08:	ldr	r3, [sp, #20]
   3df0c:	ands	r3, r3, #131072	; 0x20000
   3df10:	bne	3d3ac <__assert_fail@plt+0x2adb8>
   3df14:	str	r3, [sp, #24]
   3df18:	mov	r2, #16
   3df1c:	ldr	r3, [sp, #204]	; 0xcc
   3df20:	str	r2, [r3]
   3df24:	b	3d620 <__assert_fail@plt+0x2b02c>
   3df28:	cmp	r4, #8
   3df2c:	bls	3df74 <__assert_fail@plt+0x2b980>
   3df30:	ldr	r0, [sp, #32]
   3df34:	add	ip, sp, #128	; 0x80
   3df38:	mov	lr, #17
   3df3c:	mov	r6, #0
   3df40:	mov	r7, #0
   3df44:	mov	r3, #0
   3df48:	str	ip, [sp]
   3df4c:	strd	r6, [sp, #128]	; 0x80
   3df50:	strb	lr, [sp, #132]	; 0x84
   3df54:	add	r1, r0, #64	; 0x40
   3df58:	add	r0, r0, #56	; 0x38
   3df5c:	bl	34938 <__assert_fail@plt+0x22344>
   3df60:	subs	r3, r0, #0
   3df64:	str	r3, [sp, #24]
   3df68:	beq	3ddac <__assert_fail@plt+0x2b7b8>
   3df6c:	str	r4, [r3, #20]
   3df70:	b	3d3dc <__assert_fail@plt+0x2ade8>
   3df74:	ldr	r0, [sp, #32]
   3df78:	mov	r1, #1
   3df7c:	ldr	r3, [r0, #84]	; 0x54
   3df80:	orr	r3, r3, r1, lsl r4
   3df84:	str	r3, [r0, #84]	; 0x54
   3df88:	b	3df30 <__assert_fail@plt+0x2b93c>
   3df8c:	mov	r0, r8
   3df90:	ldr	r1, [sp, #76]	; 0x4c
   3df94:	bl	37cbc <__assert_fail@plt+0x256c8>
   3df98:	ldr	r3, [sp, #204]	; 0xcc
   3df9c:	cmp	r0, #0
   3dfa0:	str	r0, [r3]
   3dfa4:	bne	3e01c <__assert_fail@plt+0x2ba28>
   3dfa8:	ldrb	r3, [fp, #4]
   3dfac:	cmp	r3, #2
   3dfb0:	beq	3e110 <__assert_fail@plt+0x2bb1c>
   3dfb4:	cmp	r3, #21
   3dfb8:	beq	3e440 <__assert_fail@plt+0x2be4c>
   3dfbc:	mov	r0, #0
   3dfc0:	b	3dc2c <__assert_fail@plt+0x2b638>
   3dfc4:	ldrb	r3, [sp, #76]	; 0x4c
   3dfc8:	mov	r0, #1
   3dfcc:	asr	r1, r3, #5
   3dfd0:	and	r3, r3, #31
   3dfd4:	ldr	r2, [r8, r1, lsl #2]
   3dfd8:	orr	r3, r2, r0, lsl r3
   3dfdc:	str	r3, [r8, r1, lsl #2]
   3dfe0:	b	3dfa8 <__assert_fail@plt+0x2b9b4>
   3dfe4:	ldr	ip, [sp, #76]	; 0x4c
   3dfe8:	add	r0, sp, #68	; 0x44
   3dfec:	add	r3, r9, #36	; 0x24
   3dff0:	add	r2, r9, #12
   3dff4:	mov	r1, r8
   3dff8:	str	r0, [sp]
   3dffc:	str	r7, [sp, #8]
   3e000:	ldr	r0, [sl, #64]	; 0x40
   3e004:	str	ip, [sp, #4]
   3e008:	bl	37d18 <__assert_fail@plt+0x25724>
   3e00c:	ldr	r3, [sp, #204]	; 0xcc
   3e010:	cmp	r0, #0
   3e014:	str	r0, [r3]
   3e018:	beq	3dfa8 <__assert_fail@plt+0x2b9b4>
   3e01c:	mov	r0, r8
   3e020:	bl	2f668 <__assert_fail@plt+0x1d074>
   3e024:	mov	r0, r9
   3e028:	bl	33788 <__assert_fail@plt+0x21194>
   3e02c:	ldr	r3, [sp, #204]	; 0xcc
   3e030:	ldr	r3, [r3]
   3e034:	cmp	r3, #0
   3e038:	bne	3d6e4 <__assert_fail@plt+0x2b0f0>
   3e03c:	str	r3, [sp, #24]
   3e040:	b	3d3dc <__assert_fail@plt+0x2ade8>
   3e044:	mov	r0, r8
   3e048:	ldr	r1, [sp, #76]	; 0x4c
   3e04c:	bl	37cbc <__assert_fail@plt+0x256c8>
   3e050:	ldr	r3, [sp, #204]	; 0xcc
   3e054:	cmp	r0, #0
   3e058:	str	r0, [r3]
   3e05c:	beq	3dfa8 <__assert_fail@plt+0x2b9b4>
   3e060:	b	3e01c <__assert_fail@plt+0x2ba28>
   3e064:	ldr	r2, [sp, #24]
   3e068:	ldr	r3, [r9, #20]
   3e06c:	ldr	r0, [r9]
   3e070:	cmp	r3, r2
   3e074:	beq	3e418 <__assert_fail@plt+0x2be24>
   3e078:	ldr	r2, [sp, #76]	; 0x4c
   3e07c:	add	r1, r3, #1
   3e080:	str	r1, [r9, #20]
   3e084:	str	r2, [r0, r3, lsl #2]
   3e088:	b	3dfa8 <__assert_fail@plt+0x2b9b4>
   3e08c:	mov	r3, #0
   3e090:	mov	r1, r6
   3e094:	str	fp, [sp]
   3e098:	mov	r2, r3
   3e09c:	mov	r0, r5
   3e0a0:	bl	34938 <__assert_fail@plt+0x22344>
   3e0a4:	subs	r3, r0, #0
   3e0a8:	str	r3, [sp, #24]
   3e0ac:	bne	3db70 <__assert_fail@plt+0x2b57c>
   3e0b0:	b	3ddac <__assert_fail@plt+0x2b7b8>
   3e0b4:	ldrb	r3, [r9, #16]
   3e0b8:	ldr	r2, [sp, #20]
   3e0bc:	orr	r3, r3, #1
   3e0c0:	tst	r2, #256	; 0x100
   3e0c4:	strb	r3, [r9, #16]
   3e0c8:	beq	3e0d8 <__assert_fail@plt+0x2bae4>
   3e0cc:	ldr	r3, [r8]
   3e0d0:	orr	r3, r3, #1024	; 0x400
   3e0d4:	str	r3, [r8]
   3e0d8:	ldr	r3, [sl, #40]	; 0x28
   3e0dc:	mov	r1, sl
   3e0e0:	mov	r0, fp
   3e0e4:	ldr	r2, [sp, #20]
   3e0e8:	add	r3, r3, r5
   3e0ec:	str	r3, [sl, #40]	; 0x28
   3e0f0:	bl	327ac <__assert_fail@plt+0x201b8>
   3e0f4:	ldrb	r3, [fp, #4]
   3e0f8:	mov	r5, r0
   3e0fc:	cmp	r3, #2
   3e100:	beq	3e398 <__assert_fail@plt+0x2bda4>
   3e104:	mov	r2, #1
   3e108:	str	r2, [sp, #44]	; 0x2c
   3e10c:	b	3dbfc <__assert_fail@plt+0x2b608>
   3e110:	ldr	r2, [sp, #204]	; 0xcc
   3e114:	mov	r3, #7
   3e118:	str	r3, [r2]
   3e11c:	b	3e01c <__assert_fail@plt+0x2ba28>
   3e120:	mov	r2, r3
   3e124:	mov	r1, sl
   3e128:	mov	r0, fp
   3e12c:	mov	r4, r3
   3e130:	bl	3c620 <__assert_fail@plt+0x2a02c>
   3e134:	ldr	lr, [sp, #200]	; 0xc8
   3e138:	mov	r3, r4
   3e13c:	mov	r2, fp
   3e140:	mov	r1, r5
   3e144:	ldr	ip, [sl, #40]	; 0x28
   3e148:	str	lr, [sp]
   3e14c:	ldr	lr, [sp, #204]	; 0xcc
   3e150:	add	ip, ip, r0
   3e154:	mov	r0, sl
   3e158:	str	lr, [sp, #4]
   3e15c:	str	ip, [sl, #40]	; 0x28
   3e160:	bl	3d2b0 <__assert_fail@plt+0x2acbc>
   3e164:	str	r0, [sp, #24]
   3e168:	b	3d620 <__assert_fail@plt+0x2b02c>
   3e16c:	ldr	r3, [sp, #204]	; 0xcc
   3e170:	str	r0, [r3]
   3e174:	b	3e01c <__assert_fail@plt+0x2ba28>
   3e178:	str	r4, [sp, #24]
   3e17c:	b	3d3dc <__assert_fail@plt+0x2ade8>
   3e180:	mov	r0, #6
   3e184:	mov	r2, r3
   3e188:	str	fp, [sp]
   3e18c:	mov	r1, r6
   3e190:	str	r0, [fp]
   3e194:	mov	r0, r5
   3e198:	bl	34938 <__assert_fail@plt+0x22344>
   3e19c:	mov	r3, #9
   3e1a0:	mov	r7, r0
   3e1a4:	str	r3, [fp]
   3e1a8:	b	3dafc <__assert_fail@plt+0x2b508>
   3e1ac:	ldr	r3, [sl, #40]	; 0x28
   3e1b0:	mov	r2, r7
   3e1b4:	add	r0, sp, #88	; 0x58
   3e1b8:	mov	r1, sl
   3e1bc:	add	r3, r3, r5
   3e1c0:	str	r3, [sl, #40]	; 0x28
   3e1c4:	bl	327ac <__assert_fail@plt+0x201b8>
   3e1c8:	ldrb	r2, [sp, #92]	; 0x5c
   3e1cc:	mov	r3, r0
   3e1d0:	cmp	r2, #2
   3e1d4:	beq	3e110 <__assert_fail@plt+0x2bb1c>
   3e1d8:	cmp	r2, #21
   3e1dc:	beq	3e3fc <__assert_fail@plt+0x2be08>
   3e1e0:	mov	r1, #1
   3e1e4:	mov	r0, #3
   3e1e8:	str	r7, [sp]
   3e1ec:	add	ip, sp, #128	; 0x80
   3e1f0:	add	r2, sp, #88	; 0x58
   3e1f4:	str	r1, [sp, #4]
   3e1f8:	mov	r1, sl
   3e1fc:	str	r0, [sp, #80]	; 0x50
   3e200:	add	r0, sp, #80	; 0x50
   3e204:	str	ip, [sp, #84]	; 0x54
   3e208:	bl	3d05c <__assert_fail@plt+0x2aa68>
   3e20c:	cmp	r0, #0
   3e210:	bne	3e16c <__assert_fail@plt+0x2bb78>
   3e214:	mov	r2, r7
   3e218:	mov	r1, sl
   3e21c:	mov	r0, fp
   3e220:	bl	327ac <__assert_fail@plt+0x201b8>
   3e224:	ldr	r2, [sp, #72]	; 0x48
   3e228:	mov	r5, r0
   3e22c:	sub	r3, r2, #2
   3e230:	bics	r3, r3, #2
   3e234:	beq	3e66c <__assert_fail@plt+0x2c078>
   3e238:	ldr	r3, [sp, #80]	; 0x50
   3e23c:	sub	r1, r3, #2
   3e240:	bics	r1, r1, #2
   3e244:	beq	3e66c <__assert_fail@plt+0x2c078>
   3e248:	cmp	r2, #3
   3e24c:	moveq	r1, #1
   3e250:	movne	r1, #0
   3e254:	str	r1, [sp, #52]	; 0x34
   3e258:	beq	3e768 <__assert_fail@plt+0x2c174>
   3e25c:	cmp	r3, #3
   3e260:	beq	3e738 <__assert_fail@plt+0x2c144>
   3e264:	cmp	r2, #0
   3e268:	bne	3e654 <__assert_fail@plt+0x2c060>
   3e26c:	ldrb	r4, [sp, #76]	; 0x4c
   3e270:	cmp	r3, #0
   3e274:	beq	3e664 <__assert_fail@plt+0x2c070>
   3e278:	cmp	r3, #3
   3e27c:	bne	3e64c <__assert_fail@plt+0x2c058>
   3e280:	ldr	r1, [sp, #84]	; 0x54
   3e284:	ldrb	r6, [r1]
   3e288:	cmp	r2, #0
   3e28c:	ldr	r1, [sp, #52]	; 0x34
   3e290:	moveq	r1, #1
   3e294:	cmp	r1, #0
   3e298:	beq	3e644 <__assert_fail@plt+0x2c050>
   3e29c:	ldr	r2, [sp, #32]
   3e2a0:	ldr	r2, [r2, #92]	; 0x5c
   3e2a4:	cmp	r2, #1
   3e2a8:	ble	3e630 <__assert_fail@plt+0x2c03c>
   3e2ac:	mov	r0, r4
   3e2b0:	bl	123a8 <btowc@plt>
   3e2b4:	ldr	r3, [sp, #80]	; 0x50
   3e2b8:	mov	r4, r0
   3e2bc:	cmp	r3, #3
   3e2c0:	cmpne	r3, #0
   3e2c4:	bne	3e63c <__assert_fail@plt+0x2c048>
   3e2c8:	ldr	r3, [sp, #32]
   3e2cc:	ldr	r3, [r3, #92]	; 0x5c
   3e2d0:	cmp	r3, #1
   3e2d4:	ble	3e2e4 <__assert_fail@plt+0x2bcf0>
   3e2d8:	mov	r0, r6
   3e2dc:	bl	123a8 <btowc@plt>
   3e2e0:	mov	r6, r0
   3e2e4:	cmn	r4, #1
   3e2e8:	cmnne	r6, #1
   3e2ec:	beq	3e720 <__assert_fail@plt+0x2c12c>
   3e2f0:	ldr	r3, [sp, #48]	; 0x30
   3e2f4:	cmp	r4, r6
   3e2f8:	movls	r3, #0
   3e2fc:	andhi	r3, r3, #1
   3e300:	cmp	r3, #0
   3e304:	bne	3e66c <__assert_fail@plt+0x2c078>
   3e308:	ldr	r3, [sp, #32]
   3e30c:	ldr	r3, [r3, #92]	; 0x5c
   3e310:	cmp	r3, #1
   3e314:	ble	3e344 <__assert_fail@plt+0x2bd50>
   3e318:	ldr	r1, [sp, #40]	; 0x28
   3e31c:	ldr	r3, [r9, #32]
   3e320:	ldr	r2, [r9, #4]
   3e324:	cmp	r3, r1
   3e328:	beq	3e7a8 <__assert_fail@plt+0x2c1b4>
   3e32c:	str	r4, [r2, r3, lsl #2]
   3e330:	ldr	r2, [r9, #8]
   3e334:	ldr	r3, [r9, #32]
   3e338:	add	r1, r3, #1
   3e33c:	str	r1, [r9, #32]
   3e340:	str	r6, [r2, r3, lsl #2]
   3e344:	mov	r3, #0
   3e348:	mov	ip, #1
   3e34c:	cmp	r4, r3
   3e350:	asr	r2, r3, #5
   3e354:	and	r0, r3, #31
   3e358:	movhi	r1, #0
   3e35c:	movls	r1, #1
   3e360:	cmp	r6, r3
   3e364:	add	r3, r3, #1
   3e368:	movcc	r1, #0
   3e36c:	cmp	r1, #0
   3e370:	beq	3e380 <__assert_fail@plt+0x2bd8c>
   3e374:	ldr	r1, [r8, r2, lsl #2]
   3e378:	orr	r1, r1, ip, lsl r0
   3e37c:	str	r1, [r8, r2, lsl #2]
   3e380:	cmp	r3, #256	; 0x100
   3e384:	bne	3e34c <__assert_fail@plt+0x2bd58>
   3e388:	ldr	r2, [sp, #204]	; 0xcc
   3e38c:	mov	r3, #0
   3e390:	str	r3, [r2]
   3e394:	b	3dfa8 <__assert_fail@plt+0x2b9b4>
   3e398:	ldr	r2, [sp, #204]	; 0xcc
   3e39c:	mov	r3, #2
   3e3a0:	str	r3, [r2]
   3e3a4:	b	3e01c <__assert_fail@plt+0x2ba28>
   3e3a8:	ldrb	r3, [fp, #4]
   3e3ac:	cmp	r3, #2
   3e3b0:	bne	3d9cc <__assert_fail@plt+0x2b3d8>
   3e3b4:	ldr	r2, [sp, #204]	; 0xcc
   3e3b8:	mov	r3, #9
   3e3bc:	str	r3, [r2]
   3e3c0:	b	3d9d8 <__assert_fail@plt+0x2b3e4>
   3e3c4:	mov	r0, r8
   3e3c8:	str	r5, [sp, #24]
   3e3cc:	bl	2f668 <__assert_fail@plt+0x1d074>
   3e3d0:	mov	r0, r9
   3e3d4:	bl	2f668 <__assert_fail@plt+0x1d074>
   3e3d8:	ldr	r2, [sp, #204]	; 0xcc
   3e3dc:	mov	r3, #12
   3e3e0:	str	r3, [r2]
   3e3e4:	b	3d620 <__assert_fail@plt+0x2b02c>
   3e3e8:	str	r3, [sp, #24]
   3e3ec:	mov	r2, #6
   3e3f0:	ldr	r3, [sp, #204]	; 0xcc
   3e3f4:	str	r2, [r3]
   3e3f8:	b	3d620 <__assert_fail@plt+0x2b02c>
   3e3fc:	ldr	r2, [sl, #40]	; 0x28
   3e400:	mov	r1, #1
   3e404:	ldr	r3, [sp, #72]	; 0x48
   3e408:	sub	r2, r2, r5
   3e40c:	str	r2, [sl, #40]	; 0x28
   3e410:	strb	r1, [fp, #4]
   3e414:	b	3dc98 <__assert_fail@plt+0x2b6a4>
   3e418:	lsl	r3, r2, #1
   3e41c:	add	r3, r3, #1
   3e420:	lsl	r1, r3, #2
   3e424:	str	r3, [sp, #24]
   3e428:	bl	32624 <__assert_fail@plt+0x20030>
   3e42c:	cmp	r0, #0
   3e430:	beq	3e540 <__assert_fail@plt+0x2bf4c>
   3e434:	str	r0, [r9]
   3e438:	ldr	r3, [r9, #20]
   3e43c:	b	3e078 <__assert_fail@plt+0x2ba84>
   3e440:	ldr	r3, [sl, #40]	; 0x28
   3e444:	ldr	r2, [sp, #44]	; 0x2c
   3e448:	add	r3, r3, r5
   3e44c:	cmp	r2, #0
   3e450:	str	r3, [sl, #40]	; 0x28
   3e454:	beq	3e474 <__assert_fail@plt+0x2be80>
   3e458:	sub	r3, r8, #4
   3e45c:	add	r1, r8, #28
   3e460:	ldr	r2, [r3, #4]!
   3e464:	mvn	r2, r2
   3e468:	cmp	r1, r3
   3e46c:	str	r2, [r3]
   3e470:	bne	3e460 <__assert_fail@plt+0x2be6c>
   3e474:	ldr	r3, [sp, #32]
   3e478:	ldr	r0, [r3, #92]	; 0x5c
   3e47c:	cmp	r0, #1
   3e480:	ble	3e4b0 <__assert_fail@plt+0x2bebc>
   3e484:	ldr	r3, [sp, #32]
   3e488:	sub	r2, r8, #4
   3e48c:	add	ip, r8, #28
   3e490:	ldr	r3, [r3, #60]	; 0x3c
   3e494:	sub	r3, r3, #4
   3e498:	ldr	r1, [r2, #4]!
   3e49c:	ldr	lr, [r3, #4]!
   3e4a0:	cmp	ip, r2
   3e4a4:	and	r1, r1, lr
   3e4a8:	str	r1, [r2]
   3e4ac:	bne	3e498 <__assert_fail@plt+0x2bea4>
   3e4b0:	ldr	r3, [r9, #20]
   3e4b4:	cmp	r3, #0
   3e4b8:	bne	3e550 <__assert_fail@plt+0x2bf5c>
   3e4bc:	ldr	r3, [r9, #24]
   3e4c0:	cmp	r3, #0
   3e4c4:	bne	3e550 <__assert_fail@plt+0x2bf5c>
   3e4c8:	ldr	r3, [r9, #28]
   3e4cc:	cmp	r3, #0
   3e4d0:	bne	3e550 <__assert_fail@plt+0x2bf5c>
   3e4d4:	ldr	r3, [r9, #32]
   3e4d8:	cmp	r3, #0
   3e4dc:	bne	3e550 <__assert_fail@plt+0x2bf5c>
   3e4e0:	cmp	r0, #1
   3e4e4:	ble	3e500 <__assert_fail@plt+0x2bf0c>
   3e4e8:	ldr	r3, [r9, #36]	; 0x24
   3e4ec:	cmp	r3, #0
   3e4f0:	bne	3e550 <__assert_fail@plt+0x2bf5c>
   3e4f4:	ldrb	r3, [r9, #16]
   3e4f8:	tst	r3, #1
   3e4fc:	bne	3e550 <__assert_fail@plt+0x2bf5c>
   3e500:	mov	r0, r9
   3e504:	bl	33788 <__assert_fail@plt+0x21194>
   3e508:	ldr	r0, [sp, #32]
   3e50c:	mov	r3, #0
   3e510:	mov	ip, #3
   3e514:	str	r8, [sp, #96]	; 0x60
   3e518:	ldr	r2, [sp, #36]	; 0x24
   3e51c:	add	r1, r0, #64	; 0x40
   3e520:	add	r0, r0, #56	; 0x38
   3e524:	str	r2, [sp]
   3e528:	mov	r2, r3
   3e52c:	strb	ip, [sp, #100]	; 0x64
   3e530:	bl	34938 <__assert_fail@plt+0x22344>
   3e534:	subs	r3, r0, #0
   3e538:	str	r3, [sp, #24]
   3e53c:	bne	3d3dc <__assert_fail@plt+0x2ade8>
   3e540:	ldr	r2, [sp, #204]	; 0xcc
   3e544:	mov	r3, #12
   3e548:	str	r3, [r2]
   3e54c:	b	3e01c <__assert_fail@plt+0x2ba28>
   3e550:	ldr	r4, [sp, #32]
   3e554:	mov	r3, #0
   3e558:	mov	lr, #6
   3e55c:	mov	r2, r3
   3e560:	ldrb	ip, [r4, #88]	; 0x58
   3e564:	add	r7, r4, #56	; 0x38
   3e568:	add	r6, r4, #64	; 0x40
   3e56c:	mov	r0, r7
   3e570:	mov	r1, r6
   3e574:	orr	ip, ip, #2
   3e578:	strb	ip, [r4, #88]	; 0x58
   3e57c:	ldr	ip, [sp, #36]	; 0x24
   3e580:	str	ip, [sp]
   3e584:	str	r9, [sp, #96]	; 0x60
   3e588:	strb	lr, [sp, #100]	; 0x64
   3e58c:	bl	34938 <__assert_fail@plt+0x22344>
   3e590:	subs	r3, r0, #0
   3e594:	str	r3, [sp, #24]
   3e598:	beq	3e540 <__assert_fail@plt+0x2bf4c>
   3e59c:	sub	r3, r8, #4
   3e5a0:	add	r2, r8, #28
   3e5a4:	ldr	r1, [r3, #4]!
   3e5a8:	cmp	r1, #0
   3e5ac:	bne	3e5c4 <__assert_fail@plt+0x2bfd0>
   3e5b0:	cmp	r2, r3
   3e5b4:	bne	3e5a4 <__assert_fail@plt+0x2bfb0>
   3e5b8:	mov	r0, r8
   3e5bc:	bl	2f668 <__assert_fail@plt+0x1d074>
   3e5c0:	b	3d3dc <__assert_fail@plt+0x2ade8>
   3e5c4:	ldr	r2, [sp, #36]	; 0x24
   3e5c8:	mov	ip, #3
   3e5cc:	mov	r3, #0
   3e5d0:	mov	r1, r6
   3e5d4:	mov	r0, r7
   3e5d8:	str	r2, [sp]
   3e5dc:	mov	r2, r3
   3e5e0:	str	r8, [sp, #96]	; 0x60
   3e5e4:	strb	ip, [sp, #100]	; 0x64
   3e5e8:	bl	34938 <__assert_fail@plt+0x22344>
   3e5ec:	subs	r2, r0, #0
   3e5f0:	beq	3e540 <__assert_fail@plt+0x2bf4c>
   3e5f4:	add	ip, sp, #128	; 0x80
   3e5f8:	mov	r4, #0
   3e5fc:	ldr	r3, [sp, #24]
   3e600:	mov	r5, #0
   3e604:	mov	r1, r6
   3e608:	str	ip, [sp]
   3e60c:	mov	ip, #10
   3e610:	mov	r0, r7
   3e614:	strd	r4, [sp, #128]	; 0x80
   3e618:	strb	ip, [sp, #132]	; 0x84
   3e61c:	bl	34938 <__assert_fail@plt+0x22344>
   3e620:	subs	r3, r0, #0
   3e624:	str	r3, [sp, #24]
   3e628:	bne	3d3dc <__assert_fail@plt+0x2ade8>
   3e62c:	b	3e540 <__assert_fail@plt+0x2bf4c>
   3e630:	cmp	r3, #0
   3e634:	cmpne	r3, #3
   3e638:	beq	3e2f0 <__assert_fail@plt+0x2bcfc>
   3e63c:	ldr	r6, [sp, #84]	; 0x54
   3e640:	b	3e2e4 <__assert_fail@plt+0x2bcf0>
   3e644:	ldr	r4, [sp, #76]	; 0x4c
   3e648:	b	3e2bc <__assert_fail@plt+0x2bcc8>
   3e64c:	mov	r6, #0
   3e650:	b	3e288 <__assert_fail@plt+0x2bc94>
   3e654:	cmp	r3, #0
   3e658:	movne	r4, #0
   3e65c:	bne	3e64c <__assert_fail@plt+0x2c058>
   3e660:	mov	r4, r3
   3e664:	ldrb	r6, [sp, #84]	; 0x54
   3e668:	b	3e288 <__assert_fail@plt+0x2bc94>
   3e66c:	ldr	r2, [sp, #204]	; 0xcc
   3e670:	mov	r3, #11
   3e674:	str	r3, [r2]
   3e678:	b	3e01c <__assert_fail@plt+0x2ba28>
   3e67c:	mov	r5, #128	; 0x80
   3e680:	mov	r7, #4
   3e684:	bl	122b8 <__ctype_b_loc@plt>
   3e688:	ldr	r2, [r0]
   3e68c:	add	ip, r7, #24
   3e690:	sub	r3, r5, #-2147483647	; 0x80000001
   3e694:	mov	lr, #1
   3e698:	ldr	r1, [sp, #32]
   3e69c:	add	r6, r2, r3, lsl lr
   3e6a0:	add	ip, r1, ip, lsl #2
   3e6a4:	add	r7, r1, #128	; 0x80
   3e6a8:	mov	r0, r6
   3e6ac:	mov	r1, #0
   3e6b0:	ldrh	r2, [r0, #2]!
   3e6b4:	add	r3, r5, r1
   3e6b8:	ubfx	r2, r2, #3, #1
   3e6bc:	cmp	r3, #95	; 0x5f
   3e6c0:	movne	r3, r2
   3e6c4:	orreq	r3, r2, #1
   3e6c8:	cmp	r3, #0
   3e6cc:	beq	3e6dc <__assert_fail@plt+0x2c0e8>
   3e6d0:	ldr	r3, [ip]
   3e6d4:	orr	r3, r3, lr, lsl r1
   3e6d8:	str	r3, [ip]
   3e6dc:	add	r1, r1, #1
   3e6e0:	cmp	r1, #32
   3e6e4:	bne	3e6b0 <__assert_fail@plt+0x2c0bc>
   3e6e8:	add	ip, ip, #4
   3e6ec:	add	r5, r5, #32
   3e6f0:	cmp	r7, ip
   3e6f4:	add	r6, r6, #64	; 0x40
   3e6f8:	bne	3e6a8 <__assert_fail@plt+0x2c0b4>
   3e6fc:	b	3dab4 <__assert_fail@plt+0x2b4c0>
   3e700:	ldr	r0, [sp, #84]	; 0x54
   3e704:	str	r3, [sp, #56]	; 0x38
   3e708:	str	r2, [sp, #60]	; 0x3c
   3e70c:	bl	12300 <strlen@plt>
   3e710:	cmp	r0, #1
   3e714:	ldr	r3, [sp, #56]	; 0x38
   3e718:	ldr	r2, [sp, #60]	; 0x3c
   3e71c:	bls	3e790 <__assert_fail@plt+0x2c19c>
   3e720:	ldr	r2, [sp, #204]	; 0xcc
   3e724:	mov	r3, #3
   3e728:	str	r3, [r2]
   3e72c:	b	3e01c <__assert_fail@plt+0x2ba28>
   3e730:	mov	r7, r5
   3e734:	b	3e684 <__assert_fail@plt+0x2c090>
   3e738:	ldr	r0, [sp, #84]	; 0x54
   3e73c:	str	r3, [sp, #56]	; 0x38
   3e740:	str	r2, [sp, #60]	; 0x3c
   3e744:	bl	12300 <strlen@plt>
   3e748:	cmp	r0, #1
   3e74c:	bhi	3e720 <__assert_fail@plt+0x2c12c>
   3e750:	ldr	r3, [sp, #56]	; 0x38
   3e754:	ldr	r2, [sp, #60]	; 0x3c
   3e758:	cmp	r2, #0
   3e75c:	movne	r4, #0
   3e760:	bne	3e280 <__assert_fail@plt+0x2bc8c>
   3e764:	b	3e26c <__assert_fail@plt+0x2bc78>
   3e768:	ldr	r0, [sp, #76]	; 0x4c
   3e76c:	str	r3, [sp, #56]	; 0x38
   3e770:	str	r2, [sp, #60]	; 0x3c
   3e774:	bl	12300 <strlen@plt>
   3e778:	cmp	r0, #1
   3e77c:	ldr	r3, [sp, #56]	; 0x38
   3e780:	ldr	r2, [sp, #60]	; 0x3c
   3e784:	bhi	3e720 <__assert_fail@plt+0x2c12c>
   3e788:	cmp	r3, #3
   3e78c:	beq	3e700 <__assert_fail@plt+0x2c10c>
   3e790:	ldr	r1, [sp, #76]	; 0x4c
   3e794:	ldrb	r4, [r1]
   3e798:	b	3e270 <__assert_fail@plt+0x2bc7c>
   3e79c:	ldr	r6, [sp, #24]
   3e7a0:	mov	r2, r6
   3e7a4:	b	3d9f4 <__assert_fail@plt+0x2b400>
   3e7a8:	lsl	r3, r1, #1
   3e7ac:	mov	r0, r2
   3e7b0:	add	r3, r3, #1
   3e7b4:	str	r3, [sp, #40]	; 0x28
   3e7b8:	lsl	r3, r3, #2
   3e7bc:	mov	r1, r3
   3e7c0:	str	r3, [sp, #56]	; 0x38
   3e7c4:	bl	32624 <__assert_fail@plt+0x20030>
   3e7c8:	ldr	r3, [sp, #56]	; 0x38
   3e7cc:	mov	r2, r0
   3e7d0:	ldr	r0, [r9, #8]
   3e7d4:	str	r2, [sp, #52]	; 0x34
   3e7d8:	mov	r1, r3
   3e7dc:	bl	32624 <__assert_fail@plt+0x20030>
   3e7e0:	ldr	r2, [sp, #52]	; 0x34
   3e7e4:	cmp	r0, #0
   3e7e8:	cmpne	r2, #0
   3e7ec:	beq	3e80c <__assert_fail@plt+0x2c218>
   3e7f0:	str	r2, [r9, #4]
   3e7f4:	str	r0, [r9, #8]
   3e7f8:	ldr	r3, [r9, #32]
   3e7fc:	b	3e32c <__assert_fail@plt+0x2bd38>
   3e800:	mov	r2, r5
   3e804:	ldr	r6, [sp, #24]
   3e808:	b	3da30 <__assert_fail@plt+0x2b43c>
   3e80c:	mov	r7, r0
   3e810:	mov	r0, r2
   3e814:	bl	2f668 <__assert_fail@plt+0x1d074>
   3e818:	mov	r0, r7
   3e81c:	bl	2f668 <__assert_fail@plt+0x1d074>
   3e820:	ldr	r2, [sp, #204]	; 0xcc
   3e824:	mov	r3, #12
   3e828:	str	r3, [r2]
   3e82c:	b	3e01c <__assert_fail@plt+0x2ba28>
   3e830:	mov	r3, #0
   3e834:	mov	r9, #1
   3e838:	ldr	r6, [sp, #24]
   3e83c:	str	r3, [sp, #36]	; 0x24
   3e840:	b	3d814 <__assert_fail@plt+0x2b220>
   3e844:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3e848:	ldr	ip, [r1]
   3e84c:	strd	r6, [sp, #8]
   3e850:	mov	r7, r2
   3e854:	strd	r8, [sp, #16]
   3e858:	mov	r8, r1
   3e85c:	mov	r9, r0
   3e860:	strd	sl, [sp, #24]
   3e864:	mov	sl, r3
   3e868:	str	lr, [sp, #32]
   3e86c:	sub	sp, sp, #36	; 0x24
   3e870:	ldr	r6, [sp, #72]	; 0x48
   3e874:	ldr	r5, [sp, #76]	; 0x4c
   3e878:	str	r6, [sp]
   3e87c:	str	ip, [sp, #20]
   3e880:	str	r5, [sp, #4]
   3e884:	bl	3d2b0 <__assert_fail@plt+0x2acbc>
   3e888:	ldr	r2, [r5]
   3e88c:	clz	r3, r0
   3e890:	lsr	r3, r3, #5
   3e894:	cmp	r2, #0
   3e898:	moveq	r3, #0
   3e89c:	cmp	r3, #0
   3e8a0:	bne	3e9ec <__assert_fail@plt+0x2c3f8>
   3e8a4:	mov	r4, r0
   3e8a8:	str	r9, [sp, #12]
   3e8ac:	str	r8, [sp, #16]
   3e8b0:	ldrb	lr, [r7, #4]
   3e8b4:	clz	ip, r6
   3e8b8:	mov	r3, sl
   3e8bc:	mov	r2, r7
   3e8c0:	lsr	ip, ip, #5
   3e8c4:	ldrd	r0, [sp, #12]
   3e8c8:	and	fp, lr, #247	; 0xf7
   3e8cc:	cmp	fp, #2
   3e8d0:	beq	3e9b0 <__assert_fail@plt+0x2c3bc>
   3e8d4:	cmp	lr, #9
   3e8d8:	orrne	ip, ip, #1
   3e8dc:	cmp	ip, #0
   3e8e0:	beq	3e9b0 <__assert_fail@plt+0x2c3bc>
   3e8e4:	str	r6, [sp]
   3e8e8:	str	r5, [sp, #4]
   3e8ec:	bl	3d2b0 <__assert_fail@plt+0x2acbc>
   3e8f0:	ldr	r2, [r5]
   3e8f4:	clz	r3, r0
   3e8f8:	mov	fp, r0
   3e8fc:	lsr	r3, r3, #5
   3e900:	cmp	r2, #0
   3e904:	moveq	r3, #0
   3e908:	cmp	r3, #0
   3e90c:	bne	3e9d0 <__assert_fail@plt+0x2c3dc>
   3e910:	cmp	r4, #0
   3e914:	cmpne	r0, #0
   3e918:	bne	3e928 <__assert_fail@plt+0x2c334>
   3e91c:	cmp	r4, #0
   3e920:	moveq	r4, r0
   3e924:	b	3e8b0 <__assert_fail@plt+0x2c2bc>
   3e928:	mov	r3, r0
   3e92c:	ldr	r0, [sp, #20]
   3e930:	add	r1, sp, #24
   3e934:	mov	ip, #16
   3e938:	mov	r8, #0
   3e93c:	mov	r9, #0
   3e940:	mov	r2, r4
   3e944:	str	r1, [sp]
   3e948:	strd	r8, [sp, #24]
   3e94c:	add	r1, r0, #64	; 0x40
   3e950:	add	r0, r0, #56	; 0x38
   3e954:	strb	ip, [sp, #28]
   3e958:	bl	34938 <__assert_fail@plt+0x22344>
   3e95c:	cmp	r0, #0
   3e960:	beq	3e96c <__assert_fail@plt+0x2c378>
   3e964:	mov	r4, r0
   3e968:	b	3e8b0 <__assert_fail@plt+0x2c2bc>
   3e96c:	mov	r3, r0
   3e970:	movw	r1, #14332	; 0x37fc
   3e974:	movt	r1, #3
   3e978:	mov	r2, r3
   3e97c:	mov	r0, fp
   3e980:	str	r3, [sp, #12]
   3e984:	bl	32718 <__assert_fail@plt+0x20124>
   3e988:	ldr	r3, [sp, #12]
   3e98c:	mov	r0, r4
   3e990:	movw	r1, #14332	; 0x37fc
   3e994:	movt	r1, #3
   3e998:	mov	r2, r3
   3e99c:	bl	32718 <__assert_fail@plt+0x20124>
   3e9a0:	ldr	r3, [sp, #12]
   3e9a4:	mov	r2, #12
   3e9a8:	str	r2, [r5]
   3e9ac:	mov	r4, r3
   3e9b0:	mov	r0, r4
   3e9b4:	add	sp, sp, #36	; 0x24
   3e9b8:	ldrd	r4, [sp]
   3e9bc:	ldrd	r6, [sp, #8]
   3e9c0:	ldrd	r8, [sp, #16]
   3e9c4:	ldrd	sl, [sp, #24]
   3e9c8:	add	sp, sp, #32
   3e9cc:	pop	{pc}		; (ldr pc, [sp], #4)
   3e9d0:	cmp	r4, #0
   3e9d4:	beq	3e9ec <__assert_fail@plt+0x2c3f8>
   3e9d8:	movw	r1, #14332	; 0x37fc
   3e9dc:	movt	r1, #3
   3e9e0:	mov	r0, r4
   3e9e4:	mov	r2, #0
   3e9e8:	bl	32718 <__assert_fail@plt+0x20124>
   3e9ec:	mov	r4, #0
   3e9f0:	b	3e9b0 <__assert_fail@plt+0x2c3bc>
   3e9f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3e9f8:	mov	r5, r2
   3e9fc:	ldr	r4, [r1]
   3ea00:	ldr	ip, [r4, #84]	; 0x54
   3ea04:	strd	r6, [sp, #8]
   3ea08:	mov	r6, r0
   3ea0c:	strd	r8, [sp, #16]
   3ea10:	strd	sl, [sp, #24]
   3ea14:	mov	fp, r3
   3ea18:	mov	sl, r1
   3ea1c:	str	lr, [sp, #32]
   3ea20:	sub	sp, sp, #36	; 0x24
   3ea24:	ldrd	r8, [sp, #72]	; 0x48
   3ea28:	strd	r8, [sp]
   3ea2c:	str	r3, [sp, #12]
   3ea30:	str	ip, [sp, #20]
   3ea34:	bl	3e844 <__assert_fail@plt+0x2c250>
   3ea38:	ldr	r2, [r9]
   3ea3c:	clz	r3, r0
   3ea40:	lsr	r3, r3, #5
   3ea44:	cmp	r2, #0
   3ea48:	moveq	r3, #0
   3ea4c:	cmp	r3, #0
   3ea50:	bne	3eb68 <__assert_fail@plt+0x2c574>
   3ea54:	orr	r3, fp, #8388608	; 0x800000
   3ea58:	mov	r7, r0
   3ea5c:	str	r3, [sp, #8]
   3ea60:	str	sl, [sp, #16]
   3ea64:	b	3eaec <__assert_fail@plt+0x2c4f8>
   3ea68:	cmp	fp, #9
   3ea6c:	orrne	ip, ip, #1
   3ea70:	cmp	ip, #0
   3ea74:	beq	3eb44 <__assert_fail@plt+0x2c550>
   3ea78:	ldr	ip, [sp, #20]
   3ea7c:	ldr	fp, [r4, #84]	; 0x54
   3ea80:	str	ip, [r4, #84]	; 0x54
   3ea84:	strd	r8, [sp]
   3ea88:	bl	3e844 <__assert_fail@plt+0x2c250>
   3ea8c:	ldr	r1, [r9]
   3ea90:	clz	r2, r0
   3ea94:	mov	r3, r0
   3ea98:	lsr	r2, r2, #5
   3ea9c:	cmp	r1, #0
   3eaa0:	moveq	r2, #0
   3eaa4:	cmp	r2, #0
   3eaa8:	bne	3eb4c <__assert_fail@plt+0x2c558>
   3eaac:	ldr	r2, [r4, #84]	; 0x54
   3eab0:	orr	fp, r2, fp
   3eab4:	str	fp, [r4, #84]	; 0x54
   3eab8:	add	r1, sp, #24
   3eabc:	mov	ip, #10
   3eac0:	mov	sl, #0
   3eac4:	mov	fp, #0
   3eac8:	mov	r2, r7
   3eacc:	add	r0, r4, #56	; 0x38
   3ead0:	str	r1, [sp]
   3ead4:	add	r1, r4, #64	; 0x40
   3ead8:	strd	sl, [sp, #24]
   3eadc:	strb	ip, [sp, #28]
   3eae0:	bl	34938 <__assert_fail@plt+0x22344>
   3eae4:	subs	r7, r0, #0
   3eae8:	beq	3eb8c <__assert_fail@plt+0x2c598>
   3eaec:	ldrb	r3, [r5, #4]
   3eaf0:	mov	r1, r6
   3eaf4:	mov	r0, r5
   3eaf8:	ldr	r2, [sp, #8]
   3eafc:	cmp	r3, #10
   3eb00:	bne	3eb6c <__assert_fail@plt+0x2c578>
   3eb04:	bl	3c620 <__assert_fail@plt+0x2a02c>
   3eb08:	ldr	lr, [r6, #40]	; 0x28
   3eb0c:	clz	ip, r8
   3eb10:	mov	r2, r5
   3eb14:	lsr	ip, ip, #5
   3eb18:	ldrb	fp, [r5, #4]
   3eb1c:	ldr	r3, [sp, #12]
   3eb20:	add	lr, lr, r0
   3eb24:	mov	r0, r6
   3eb28:	ldr	r1, [sp, #16]
   3eb2c:	str	lr, [r6, #40]	; 0x28
   3eb30:	and	lr, fp, #247	; 0xf7
   3eb34:	cmp	lr, #2
   3eb38:	bne	3ea68 <__assert_fail@plt+0x2c474>
   3eb3c:	mov	r3, #0
   3eb40:	b	3eab8 <__assert_fail@plt+0x2c4c4>
   3eb44:	mov	r3, ip
   3eb48:	b	3eab8 <__assert_fail@plt+0x2c4c4>
   3eb4c:	cmp	r7, #0
   3eb50:	beq	3eb68 <__assert_fail@plt+0x2c574>
   3eb54:	movw	r1, #14332	; 0x37fc
   3eb58:	movt	r1, #3
   3eb5c:	mov	r0, r7
   3eb60:	mov	r2, #0
   3eb64:	bl	32718 <__assert_fail@plt+0x20124>
   3eb68:	mov	r7, #0
   3eb6c:	mov	r0, r7
   3eb70:	add	sp, sp, #36	; 0x24
   3eb74:	ldrd	r4, [sp]
   3eb78:	ldrd	r6, [sp, #8]
   3eb7c:	ldrd	r8, [sp, #16]
   3eb80:	ldrd	sl, [sp, #24]
   3eb84:	add	sp, sp, #32
   3eb88:	pop	{pc}		; (ldr pc, [sp], #4)
   3eb8c:	mov	r3, #12
   3eb90:	str	r3, [r9]
   3eb94:	b	3eb6c <__assert_fail@plt+0x2c578>
   3eb98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3eb9c:	mov	r5, r0
   3eba0:	ldr	r4, [r0]
   3eba4:	strd	r6, [sp, #8]
   3eba8:	mov	r7, r3
   3ebac:	mov	r6, r2
   3ebb0:	ldrb	r3, [r0, #28]
   3ebb4:	mov	r0, #0
   3ebb8:	strd	r8, [sp, #16]
   3ebbc:	mov	r8, r1
   3ebc0:	ldr	r2, [r5, #4]
   3ebc4:	strd	sl, [sp, #24]
   3ebc8:	str	lr, [sp, #32]
   3ebcc:	sub	sp, sp, #140	; 0x8c
   3ebd0:	bic	r3, r3, #111	; 0x6f
   3ebd4:	str	r0, [r5, #8]
   3ebd8:	str	r7, [r5, #12]
   3ebdc:	cmp	r2, #159	; 0x9f
   3ebe0:	str	r0, [r5, #24]
   3ebe4:	strb	r3, [r5, #28]
   3ebe8:	str	r0, [sp, #28]
   3ebec:	bls	3f770 <__assert_fail@plt+0x2d17c>
   3ebf0:	mov	r3, #160	; 0xa0
   3ebf4:	mov	r1, #0
   3ebf8:	mov	r2, r3
   3ebfc:	mov	r0, r4
   3ec00:	str	r3, [r5, #8]
   3ec04:	bl	12378 <memset@plt>
   3ec08:	movw	r3, #43689	; 0xaaa9
   3ec0c:	movt	r3, #2730	; 0xaaa
   3ec10:	mov	r2, #31
   3ec14:	cmp	r6, r3
   3ec18:	str	r2, [r4, #64]	; 0x40
   3ec1c:	bhi	3f220 <__assert_fail@plt+0x2cc2c>
   3ec20:	add	r9, r6, #1
   3ec24:	lsl	r0, r9, #3
   3ec28:	str	r9, [r4, #4]
   3ec2c:	bl	31b54 <__assert_fail@plt+0x1f560>
   3ec30:	cmp	r6, #0
   3ec34:	str	r0, [r4]
   3ec38:	beq	3f794 <__assert_fail@plt+0x2d1a0>
   3ec3c:	mov	r1, #1
   3ec40:	lsl	r1, r1, #1
   3ec44:	cmp	r6, r1
   3ec48:	bcs	3ec40 <__assert_fail@plt+0x2c64c>
   3ec4c:	sub	sl, r1, #1
   3ec50:	mov	r0, #12
   3ec54:	bl	2f080 <__assert_fail@plt+0x1ca8c>
   3ec58:	str	r0, [r4, #32]
   3ec5c:	str	sl, [r4, #68]	; 0x44
   3ec60:	bl	12198 <__ctype_get_mb_cur_max@plt>
   3ec64:	str	r0, [r4, #92]	; 0x5c
   3ec68:	mov	r0, #14
   3ec6c:	bl	12480 <nl_langinfo@plt>
   3ec70:	ldrb	r3, [r0]
   3ec74:	and	r3, r3, #223	; 0xdf
   3ec78:	cmp	r3, #85	; 0x55
   3ec7c:	bne	3ecd4 <__assert_fail@plt+0x2c6e0>
   3ec80:	ldrb	r3, [r0, #1]
   3ec84:	and	r3, r3, #223	; 0xdf
   3ec88:	cmp	r3, #84	; 0x54
   3ec8c:	bne	3ecd4 <__assert_fail@plt+0x2c6e0>
   3ec90:	ldrb	r3, [r0, #2]
   3ec94:	and	r3, r3, #223	; 0xdf
   3ec98:	cmp	r3, #70	; 0x46
   3ec9c:	bne	3ecd4 <__assert_fail@plt+0x2c6e0>
   3eca0:	ldrb	r3, [r0, #3]
   3eca4:	movw	r1, #34412	; 0x866c
   3eca8:	movt	r1, #4
   3ecac:	cmp	r3, #45	; 0x2d
   3ecb0:	moveq	r3, #4
   3ecb4:	movne	r3, #3
   3ecb8:	add	r0, r0, r3
   3ecbc:	bl	11f40 <strcmp@plt>
   3ecc0:	cmp	r0, #0
   3ecc4:	bne	3ecd4 <__assert_fail@plt+0x2c6e0>
   3ecc8:	ldrb	r3, [r4, #88]	; 0x58
   3eccc:	orr	r3, r3, #4
   3ecd0:	strb	r3, [r4, #88]	; 0x58
   3ecd4:	ldrb	r3, [r4, #88]	; 0x58
   3ecd8:	ldr	r2, [r4, #92]	; 0x5c
   3ecdc:	bfc	r3, #3, #1
   3ece0:	cmp	r2, #1
   3ece4:	strb	r3, [r4, #88]	; 0x58
   3ece8:	ble	3ed04 <__assert_fail@plt+0x2c710>
   3ecec:	uxtb	sl, r3
   3ecf0:	ands	sl, sl, #4
   3ecf4:	beq	3f284 <__assert_fail@plt+0x2cc90>
   3ecf8:	movw	r3, #33836	; 0x842c
   3ecfc:	movt	r3, #4
   3ed00:	str	r3, [r4, #60]	; 0x3c
   3ed04:	ldr	r3, [r4]
   3ed08:	cmp	r3, #0
   3ed0c:	beq	3f220 <__assert_fail@plt+0x2cc2c>
   3ed10:	ldr	r3, [r4, #32]
   3ed14:	cmp	r3, #0
   3ed18:	beq	3f220 <__assert_fail@plt+0x2cc2c>
   3ed1c:	mov	r1, #0
   3ed20:	movw	r2, #8180	; 0x1ff4
   3ed24:	movt	r2, #1
   3ed28:	mov	r3, #1
   3ed2c:	cmp	r2, r1
   3ed30:	str	r1, [sp, #28]
   3ed34:	mov	r1, #1
   3ed38:	moveq	r3, r2
   3ed3c:	movw	r2, #9116	; 0x239c
   3ed40:	movt	r2, #1
   3ed44:	cmp	r2, #0
   3ed48:	moveq	r1, r2
   3ed4c:	orr	r3, r3, r1
   3ed50:	ands	r3, r3, #255	; 0xff
   3ed54:	str	r3, [sp, #8]
   3ed58:	beq	3ed7c <__assert_fail@plt+0x2c788>
   3ed5c:	mov	r1, #0
   3ed60:	add	r0, r4, #136	; 0x88
   3ed64:	bl	1203c <pthread_mutex_init@plt>
   3ed68:	cmp	r0, #0
   3ed6c:	bne	3f220 <__assert_fail@plt+0x2cc2c>
   3ed70:	ldr	r3, [sp, #28]
   3ed74:	cmp	r3, #0
   3ed78:	bne	3f228 <__assert_fail@plt+0x2cc34>
   3ed7c:	mov	r2, #76	; 0x4c
   3ed80:	mov	r1, #0
   3ed84:	ldr	sl, [r5, #20]
   3ed88:	add	r0, sp, #56	; 0x38
   3ed8c:	and	fp, r7, #4194304	; 0x400000
   3ed90:	bl	12378 <memset@plt>
   3ed94:	ldrb	r3, [r4, #88]	; 0x58
   3ed98:	adds	lr, fp, #0
   3ed9c:	movne	lr, #1
   3eda0:	str	r8, [sp, #52]	; 0x34
   3eda4:	ldr	r0, [r4, #92]	; 0x5c
   3eda8:	orr	r2, sl, fp
   3edac:	adds	r1, r2, #0
   3edb0:	str	r6, [sp, #96]	; 0x60
   3edb4:	movne	r1, #1
   3edb8:	cmp	r6, #0
   3edbc:	str	r6, [sp, #100]	; 0x64
   3edc0:	ubfx	ip, r3, #2, #1
   3edc4:	str	r6, [sp, #104]	; 0x68
   3edc8:	ubfx	r3, r3, #3, #1
   3edcc:	str	r6, [sp, #108]	; 0x6c
   3edd0:	str	sl, [sp, #116]	; 0x74
   3edd4:	strb	lr, [sp, #124]	; 0x7c
   3edd8:	strb	ip, [sp, #125]	; 0x7d
   3eddc:	strb	r3, [sp, #126]	; 0x7e
   3ede0:	strb	r1, [sp, #127]	; 0x7f
   3ede4:	str	r0, [sp, #132]	; 0x84
   3ede8:	bne	3f25c <__assert_fail@plt+0x2cc68>
   3edec:	cmp	r1, #0
   3edf0:	ldrne	r8, [sp, #56]	; 0x38
   3edf4:	cmp	fp, #0
   3edf8:	str	r8, [sp, #56]	; 0x38
   3edfc:	beq	3eeb4 <__assert_fail@plt+0x2c8c0>
   3ee00:	cmp	r0, #1
   3ee04:	ble	3f75c <__assert_fail@plt+0x2d168>
   3ee08:	add	r0, sp, #52	; 0x34
   3ee0c:	bl	33000 <__assert_fail@plt+0x20a0c>
   3ee10:	cmp	r0, #0
   3ee14:	bne	3ee50 <__assert_fail@plt+0x2c85c>
   3ee18:	ldr	r3, [sp, #84]	; 0x54
   3ee1c:	cmp	r6, r3
   3ee20:	ble	3f7e8 <__assert_fail@plt+0x2d1f4>
   3ee24:	ldr	r3, [sp, #80]	; 0x50
   3ee28:	ldr	r2, [r4, #92]	; 0x5c
   3ee2c:	ldr	r1, [sp, #88]	; 0x58
   3ee30:	add	r3, r3, r2
   3ee34:	cmp	r1, r3
   3ee38:	bgt	3f7e8 <__assert_fail@plt+0x2d1f4>
   3ee3c:	lsl	r1, r1, #1
   3ee40:	add	r0, sp, #52	; 0x34
   3ee44:	bl	32c10 <__assert_fail@plt+0x2061c>
   3ee48:	cmp	r0, #0
   3ee4c:	beq	3ee08 <__assert_fail@plt+0x2c814>
   3ee50:	ldr	r6, [r5]
   3ee54:	str	r0, [sp, #28]
   3ee58:	ldr	r0, [r6, #56]	; 0x38
   3ee5c:	cmp	r0, #0
   3ee60:	beq	3ee74 <__assert_fail@plt+0x2c880>
   3ee64:	ldr	r7, [r0]
   3ee68:	bl	2f668 <__assert_fail@plt+0x1d074>
   3ee6c:	subs	r0, r7, #0
   3ee70:	bne	3ee64 <__assert_fail@plt+0x2c870>
   3ee74:	mov	r7, #0
   3ee78:	mov	r3, #31
   3ee7c:	ldr	r0, [r6, #16]
   3ee80:	str	r7, [r6, #52]	; 0x34
   3ee84:	str	r7, [r6, #56]	; 0x38
   3ee88:	str	r3, [r6, #64]	; 0x40
   3ee8c:	bl	2f668 <__assert_fail@plt+0x1d074>
   3ee90:	add	r0, sp, #52	; 0x34
   3ee94:	str	r7, [r6, #16]
   3ee98:	bl	33af0 <__assert_fail@plt+0x214fc>
   3ee9c:	ldr	r3, [sp, #8]
   3eea0:	cmp	r3, r7
   3eea4:	beq	3f228 <__assert_fail@plt+0x2cc34>
   3eea8:	add	r0, r4, #136	; 0x88
   3eeac:	bl	11f70 <pthread_mutex_destroy@plt>
   3eeb0:	b	3f228 <__assert_fail@plt+0x2cc34>
   3eeb4:	cmp	r0, #1
   3eeb8:	bgt	3f674 <__assert_fail@plt+0x2d080>
   3eebc:	cmp	r2, #0
   3eec0:	ldr	r1, [sp, #88]	; 0x58
   3eec4:	beq	3f334 <__assert_fail@plt+0x2cd40>
   3eec8:	ldr	r3, [sp, #80]	; 0x50
   3eecc:	ldr	r2, [sp, #100]	; 0x64
   3eed0:	cmp	r1, r2
   3eed4:	movge	r1, r2
   3eed8:	cmp	r1, r3
   3eedc:	bgt	3eee8 <__assert_fail@plt+0x2c8f4>
   3eee0:	b	3f8d4 <__assert_fail@plt+0x2d2e0>
   3eee4:	ldr	r8, [sp, #56]	; 0x38
   3eee8:	ldr	r2, [sp, #52]	; 0x34
   3eeec:	ldr	ip, [sp, #76]	; 0x4c
   3eef0:	ldr	r0, [sp, #116]	; 0x74
   3eef4:	add	r2, r2, r3
   3eef8:	ldrb	r2, [r2, ip]
   3eefc:	ldrb	r2, [r0, r2]
   3ef00:	strb	r2, [r8, r3]
   3ef04:	add	r3, r3, #1
   3ef08:	cmp	r1, r3
   3ef0c:	bne	3eee4 <__assert_fail@plt+0x2c8f0>
   3ef10:	mov	r3, #0
   3ef14:	str	r3, [sp, #28]
   3ef18:	str	r1, [sp, #80]	; 0x50
   3ef1c:	str	r1, [sp, #84]	; 0x54
   3ef20:	ldr	r6, [r5]
   3ef24:	mov	r8, #0
   3ef28:	orr	r2, r7, #8388608	; 0x800000
   3ef2c:	add	r1, sp, #52	; 0x34
   3ef30:	add	r0, sp, #32
   3ef34:	str	r8, [r5, #24]
   3ef38:	str	r7, [r6, #128]	; 0x80
   3ef3c:	bl	3c620 <__assert_fail@plt+0x2a02c>
   3ef40:	ldr	ip, [sp, #92]	; 0x5c
   3ef44:	add	r1, sp, #28
   3ef48:	mov	r3, r7
   3ef4c:	add	r2, sp, #32
   3ef50:	str	r8, [sp]
   3ef54:	str	r1, [sp, #4]
   3ef58:	mov	r1, r5
   3ef5c:	add	ip, ip, r0
   3ef60:	add	r0, sp, #52	; 0x34
   3ef64:	str	ip, [sp, #92]	; 0x5c
   3ef68:	bl	3e9f4 <__assert_fail@plt+0x2c400>
   3ef6c:	ldr	lr, [sp, #28]
   3ef70:	mov	r9, r0
   3ef74:	cmp	lr, r8
   3ef78:	bne	3f7a0 <__assert_fail@plt+0x2d1ac>
   3ef7c:	mov	r2, #0
   3ef80:	mov	r3, #0
   3ef84:	add	r7, sp, #40	; 0x28
   3ef88:	mov	ip, #2
   3ef8c:	add	sl, r6, #56	; 0x38
   3ef90:	add	r6, r6, #64	; 0x40
   3ef94:	mov	r0, sl
   3ef98:	mov	r1, r6
   3ef9c:	str	r7, [sp]
   3efa0:	strd	r2, [sp, #40]	; 0x28
   3efa4:	mov	r3, lr
   3efa8:	mov	r2, lr
   3efac:	strb	ip, [sp, #44]	; 0x2c
   3efb0:	bl	34938 <__assert_fail@plt+0x22344>
   3efb4:	cmp	r9, #0
   3efb8:	mov	lr, r0
   3efbc:	moveq	r9, r0
   3efc0:	beq	3eff8 <__assert_fail@plt+0x2ca04>
   3efc4:	mov	ip, #16
   3efc8:	mov	r2, r9
   3efcc:	str	r7, [sp]
   3efd0:	mov	r9, #0
   3efd4:	mov	r8, #0
   3efd8:	mov	r3, lr
   3efdc:	mov	r1, r6
   3efe0:	mov	r0, sl
   3efe4:	strd	r8, [sp, #40]	; 0x28
   3efe8:	mov	r9, lr
   3efec:	strb	ip, [sp, #44]	; 0x2c
   3eff0:	bl	34938 <__assert_fail@plt+0x22344>
   3eff4:	mov	lr, r0
   3eff8:	clz	r3, lr
   3effc:	cmp	r9, #0
   3f000:	ldr	r6, [r5]
   3f004:	lsr	r3, r3, #5
   3f008:	moveq	r9, #1
   3f00c:	movne	r9, r3
   3f010:	cmp	r9, #0
   3f014:	movne	r2, #12
   3f018:	movne	r3, #0
   3f01c:	strne	r2, [sp, #28]
   3f020:	strne	r3, [r4, #52]	; 0x34
   3f024:	bne	3ee58 <__assert_fail@plt+0x2c864>
   3f028:	ldr	r0, [r6, #4]
   3f02c:	str	lr, [r4, #52]	; 0x34
   3f030:	lsl	r0, r0, #2
   3f034:	bl	31b54 <__assert_fail@plt+0x1f560>
   3f038:	ldr	r3, [r6, #4]
   3f03c:	str	r0, [r6, #12]
   3f040:	lsl	r0, r3, #2
   3f044:	bl	31b54 <__assert_fail@plt+0x1f560>
   3f048:	ldr	r3, [r6, #4]
   3f04c:	str	r0, [r6, #16]
   3f050:	add	r3, r3, r3, lsl #1
   3f054:	lsl	r0, r3, #2
   3f058:	bl	31b54 <__assert_fail@plt+0x1f560>
   3f05c:	ldr	r3, [r6, #4]
   3f060:	str	r0, [r6, #20]
   3f064:	add	r3, r3, r3, lsl #1
   3f068:	lsl	r0, r3, #2
   3f06c:	bl	31b54 <__assert_fail@plt+0x1f560>
   3f070:	ldr	r3, [r6, #12]
   3f074:	str	r0, [r6, #24]
   3f078:	cmp	r3, #0
   3f07c:	beq	3f664 <__assert_fail@plt+0x2d070>
   3f080:	ldr	r3, [r6, #16]
   3f084:	cmp	r3, #0
   3f088:	beq	3f664 <__assert_fail@plt+0x2d070>
   3f08c:	ldr	r3, [r6, #20]
   3f090:	cmp	r3, #0
   3f094:	beq	3f664 <__assert_fail@plt+0x2d070>
   3f098:	cmp	r0, #0
   3f09c:	beq	3f664 <__assert_fail@plt+0x2d070>
   3f0a0:	ldr	r0, [r5, #24]
   3f0a4:	lsl	r0, r0, #2
   3f0a8:	bl	31b54 <__assert_fail@plt+0x1f560>
   3f0ac:	cmp	r0, #0
   3f0b0:	str	r0, [r6, #132]	; 0x84
   3f0b4:	beq	3f138 <__assert_fail@plt+0x2cb44>
   3f0b8:	ldr	r2, [r5, #24]
   3f0bc:	cmp	r2, #0
   3f0c0:	subne	r0, r0, #4
   3f0c4:	movne	r3, r9
   3f0c8:	beq	3f0dc <__assert_fail@plt+0x2cae8>
   3f0cc:	str	r3, [r0, #4]!
   3f0d0:	add	r3, r3, #1
   3f0d4:	cmp	r3, r2
   3f0d8:	bne	3f0cc <__assert_fail@plt+0x2cad8>
   3f0dc:	movw	r1, #17796	; 0x4584
   3f0e0:	movt	r1, #3
   3f0e4:	ldr	r0, [r6, #52]	; 0x34
   3f0e8:	mov	r2, r6
   3f0ec:	bl	348c0 <__assert_fail@plt+0x222cc>
   3f0f0:	ldr	ip, [r5, #24]
   3f0f4:	cmp	ip, #0
   3f0f8:	beq	3f8dc <__assert_fail@plt+0x2d2e8>
   3f0fc:	ldr	r0, [r6, #132]	; 0x84
   3f100:	ldr	r3, [r0]
   3f104:	cmp	r3, #0
   3f108:	bne	3f138 <__assert_fail@plt+0x2cb44>
   3f10c:	mov	r2, r0
   3f110:	b	3f120 <__assert_fail@plt+0x2cb2c>
   3f114:	ldr	r1, [r2, #4]!
   3f118:	cmp	r1, r3
   3f11c:	bne	3f138 <__assert_fail@plt+0x2cb44>
   3f120:	add	r3, r3, #1
   3f124:	cmp	r3, ip
   3f128:	bne	3f114 <__assert_fail@plt+0x2cb20>
   3f12c:	bl	2f668 <__assert_fail@plt+0x1d074>
   3f130:	mov	r3, #0
   3f134:	str	r3, [r6, #132]	; 0x84
   3f138:	movw	r1, #19804	; 0x4d5c
   3f13c:	movt	r1, #3
   3f140:	ldr	r0, [r6, #52]	; 0x34
   3f144:	mov	r2, r5
   3f148:	bl	32718 <__assert_fail@plt+0x20124>
   3f14c:	cmp	r0, #0
   3f150:	bne	3ee50 <__assert_fail@plt+0x2c85c>
   3f154:	movw	r1, #22992	; 0x59d0
   3f158:	movt	r1, #3
   3f15c:	ldr	r0, [r6, #52]	; 0x34
   3f160:	mov	r2, r6
   3f164:	bl	32718 <__assert_fail@plt+0x20124>
   3f168:	cmp	r0, #0
   3f16c:	bne	3ee50 <__assert_fail@plt+0x2c85c>
   3f170:	mov	r2, r6
   3f174:	movw	r1, #17964	; 0x462c
   3f178:	movt	r1, #3
   3f17c:	ldr	r0, [r6, #52]	; 0x34
   3f180:	bl	348c0 <__assert_fail@plt+0x222cc>
   3f184:	mov	r2, r6
   3f188:	movw	r1, #15352	; 0x3bf8
   3f18c:	movt	r1, #3
   3f190:	ldr	r0, [r6, #52]	; 0x34
   3f194:	bl	348c0 <__assert_fail@plt+0x222cc>
   3f198:	subs	r3, r0, #0
   3f19c:	str	r3, [sp, #12]
   3f1a0:	bne	3f8b8 <__assert_fail@plt+0x2d2c4>
   3f1a4:	ldr	r1, [r6, #24]
   3f1a8:	mov	sl, r3
   3f1ac:	mov	r8, r3
   3f1b0:	add	r9, r8, r8, lsl #1
   3f1b4:	lsl	r9, r9, #2
   3f1b8:	add	r3, r1, r9
   3f1bc:	ldr	r3, [r3, #4]
   3f1c0:	cmp	r3, #0
   3f1c4:	addne	r8, r8, #1
   3f1c8:	bne	3f200 <__assert_fail@plt+0x2cc0c>
   3f1cc:	mov	r3, #1
   3f1d0:	mov	r2, r8
   3f1d4:	mov	r1, r6
   3f1d8:	mov	r0, r7
   3f1dc:	bl	35e18 <__assert_fail@plt+0x23824>
   3f1e0:	cmp	r0, #0
   3f1e4:	bne	3ee50 <__assert_fail@plt+0x2c85c>
   3f1e8:	ldr	r1, [r6, #24]
   3f1ec:	add	r8, r8, #1
   3f1f0:	add	r9, r1, r9
   3f1f4:	ldr	r9, [r9, #4]
   3f1f8:	cmp	r9, #0
   3f1fc:	beq	3f344 <__assert_fail@plt+0x2cd50>
   3f200:	ldr	r3, [r6, #8]
   3f204:	cmp	r8, r3
   3f208:	bne	3f1b0 <__assert_fail@plt+0x2cbbc>
   3f20c:	cmp	sl, #0
   3f210:	beq	3f368 <__assert_fail@plt+0x2cd74>
   3f214:	mov	sl, #0
   3f218:	mov	r8, sl
   3f21c:	b	3f1b0 <__assert_fail@plt+0x2cbbc>
   3f220:	mov	r3, #12
   3f224:	str	r3, [sp, #28]
   3f228:	mov	r0, r4
   3f22c:	bl	35a70 <__assert_fail@plt+0x2347c>
   3f230:	ldr	r0, [sp, #28]
   3f234:	mov	r3, #0
   3f238:	str	r3, [r5]
   3f23c:	str	r3, [r5, #4]
   3f240:	add	sp, sp, #140	; 0x8c
   3f244:	ldrd	r4, [sp]
   3f248:	ldrd	r6, [sp, #8]
   3f24c:	ldrd	r8, [sp, #16]
   3f250:	ldrd	sl, [sp, #24]
   3f254:	add	sp, sp, #32
   3f258:	pop	{pc}		; (ldr pc, [sp], #4)
   3f25c:	mov	r1, r9
   3f260:	add	r0, sp, #52	; 0x34
   3f264:	str	r2, [sp, #12]
   3f268:	bl	32c10 <__assert_fail@plt+0x2061c>
   3f26c:	cmp	r0, #0
   3f270:	bne	3ee50 <__assert_fail@plt+0x2c85c>
   3f274:	ldrb	r1, [sp, #127]	; 0x7f
   3f278:	ldr	r2, [sp, #12]
   3f27c:	ldr	r0, [r4, #92]	; 0x5c
   3f280:	b	3edec <__assert_fail@plt+0x2c7f8>
   3f284:	mov	r1, #1
   3f288:	mov	r0, #32
   3f28c:	bl	2f080 <__assert_fail@plt+0x1ca8c>
   3f290:	cmp	r0, #0
   3f294:	str	r0, [r4, #60]	; 0x3c
   3f298:	beq	3f220 <__assert_fail@plt+0x2cc2c>
   3f29c:	str	r5, [sp, #8]
   3f2a0:	mov	r5, r4
   3f2a4:	lsl	fp, sl, #3
   3f2a8:	mov	r4, #0
   3f2ac:	b	3f2d4 <__assert_fail@plt+0x2cce0>
   3f2b0:	cmp	r3, #0
   3f2b4:	bne	3f2c4 <__assert_fail@plt+0x2ccd0>
   3f2b8:	ldrb	r3, [r5, #88]	; 0x58
   3f2bc:	orr	r3, r3, #8
   3f2c0:	strb	r3, [r5, #88]	; 0x58
   3f2c4:	add	r4, r4, #1
   3f2c8:	add	fp, fp, #1
   3f2cc:	cmp	r4, #32
   3f2d0:	beq	3f31c <__assert_fail@plt+0x2cd28>
   3f2d4:	mov	r0, fp
   3f2d8:	bl	123a8 <btowc@plt>
   3f2dc:	cmn	r0, #1
   3f2e0:	bic	r3, fp, #127	; 0x7f
   3f2e4:	beq	3f2b0 <__assert_fail@plt+0x2ccbc>
   3f2e8:	ldr	r1, [r5, #60]	; 0x3c
   3f2ec:	cmp	r3, #0
   3f2f0:	mov	r2, #1
   3f2f4:	ldr	r3, [r1, sl]
   3f2f8:	orr	r3, r3, r2, lsl r4
   3f2fc:	str	r3, [r1, sl]
   3f300:	bne	3f2c4 <__assert_fail@plt+0x2ccd0>
   3f304:	cmp	r0, fp
   3f308:	bne	3f2b8 <__assert_fail@plt+0x2ccc4>
   3f30c:	add	r4, r4, #1
   3f310:	add	fp, fp, #1
   3f314:	cmp	r4, #32
   3f318:	bne	3f2d4 <__assert_fail@plt+0x2cce0>
   3f31c:	add	sl, sl, #4
   3f320:	cmp	sl, #32
   3f324:	bne	3f2a4 <__assert_fail@plt+0x2ccb0>
   3f328:	mov	r4, r5
   3f32c:	ldr	r5, [sp, #8]
   3f330:	b	3ed04 <__assert_fail@plt+0x2c710>
   3f334:	str	fp, [sp, #28]
   3f338:	str	r1, [sp, #80]	; 0x50
   3f33c:	str	r1, [sp, #84]	; 0x54
   3f340:	b	3ef20 <__assert_fail@plt+0x2c92c>
   3f344:	ldr	r0, [sp, #48]	; 0x30
   3f348:	bl	2f668 <__assert_fail@plt+0x1d074>
   3f34c:	ldr	r3, [r6, #8]
   3f350:	cmp	r3, r8
   3f354:	moveq	sl, r9
   3f358:	moveq	r8, sl
   3f35c:	movne	sl, #1
   3f360:	ldr	r1, [r6, #24]
   3f364:	b	3f1b0 <__assert_fail@plt+0x2cbbc>
   3f368:	ldrb	r3, [r5, #28]
   3f36c:	tst	r3, #16
   3f370:	bne	3f38c <__assert_fail@plt+0x2cd98>
   3f374:	ldr	r3, [r5, #24]
   3f378:	cmp	r3, #0
   3f37c:	beq	3f38c <__assert_fail@plt+0x2cd98>
   3f380:	ldrb	r3, [r6, #88]	; 0x58
   3f384:	tst	r3, #1
   3f388:	bne	3f398 <__assert_fail@plt+0x2cda4>
   3f38c:	ldr	r3, [r6, #76]	; 0x4c
   3f390:	cmp	r3, #0
   3f394:	beq	3f490 <__assert_fail@plt+0x2ce9c>
   3f398:	add	r8, r8, r8, lsl #1
   3f39c:	lsl	r0, r8, #2
   3f3a0:	bl	31b54 <__assert_fail@plt+0x1f560>
   3f3a4:	cmp	r0, #0
   3f3a8:	str	r0, [r6, #28]
   3f3ac:	beq	3f664 <__assert_fail@plt+0x2d070>
   3f3b0:	ldr	r3, [r6, #8]
   3f3b4:	cmp	r3, #0
   3f3b8:	movne	r3, #0
   3f3bc:	movne	r2, r3
   3f3c0:	bne	3f3cc <__assert_fail@plt+0x2cdd8>
   3f3c4:	b	3f490 <__assert_fail@plt+0x2ce9c>
   3f3c8:	ldr	r0, [r6, #28]
   3f3cc:	add	ip, r3, r3, lsl #1
   3f3d0:	add	r3, r3, #1
   3f3d4:	add	r1, r0, ip, lsl #2
   3f3d8:	str	r2, [r0, ip, lsl #2]
   3f3dc:	str	r2, [r1, #4]
   3f3e0:	str	r2, [r1, #8]
   3f3e4:	ldr	r0, [r6, #8]
   3f3e8:	cmp	r0, r3
   3f3ec:	bhi	3f3c8 <__assert_fail@plt+0x2cdd4>
   3f3f0:	cmp	r0, #0
   3f3f4:	beq	3f490 <__assert_fail@plt+0x2ce9c>
   3f3f8:	mov	r3, #0
   3f3fc:	ldr	r1, [r6, #24]
   3f400:	mov	r9, r3
   3f404:	str	r7, [sp, #20]
   3f408:	mov	r7, r6
   3f40c:	mov	r6, r3
   3f410:	str	sl, [sp, #16]
   3f414:	add	r3, r1, r9
   3f418:	ldr	ip, [r3, #4]
   3f41c:	ldr	r3, [r3, #8]
   3f420:	cmp	ip, #0
   3f424:	movgt	r8, #0
   3f428:	subgt	sl, r3, #4
   3f42c:	bgt	3f44c <__assert_fail@plt+0x2ce58>
   3f430:	b	3f478 <__assert_fail@plt+0x2ce84>
   3f434:	ldr	r1, [r7, #24]
   3f438:	add	r8, r8, #1
   3f43c:	add	r3, r1, r9
   3f440:	ldr	r3, [r3, #4]
   3f444:	cmp	r8, r3
   3f448:	bge	3f474 <__assert_fail@plt+0x2ce80>
   3f44c:	ldr	r3, [sl, #4]!
   3f450:	mov	r1, r6
   3f454:	ldr	r0, [r7, #28]
   3f458:	add	r3, r3, r3, lsl #1
   3f45c:	add	r0, r0, r3, lsl #2
   3f460:	bl	32cc8 <__assert_fail@plt+0x206d4>
   3f464:	cmp	r0, #0
   3f468:	bne	3f434 <__assert_fail@plt+0x2ce40>
   3f46c:	mov	r0, #12
   3f470:	b	3ee50 <__assert_fail@plt+0x2c85c>
   3f474:	ldr	r0, [r7, #8]
   3f478:	add	r6, r6, #1
   3f47c:	add	r9, r9, #12
   3f480:	cmp	r0, r6
   3f484:	bhi	3f414 <__assert_fail@plt+0x2ce20>
   3f488:	ldr	sl, [sp, #16]
   3f48c:	ldr	r7, [sp, #20]
   3f490:	clz	fp, fp
   3f494:	mov	r2, #0
   3f498:	ldrb	r3, [r4, #88]	; 0x58
   3f49c:	lsr	fp, fp, #5
   3f4a0:	str	r2, [sp, #28]
   3f4a4:	ands	fp, fp, r3, lsr #2
   3f4a8:	bne	3f684 <__assert_fail@plt+0x2d090>
   3f4ac:	ldr	r2, [r4, #24]
   3f4b0:	mov	r0, r7
   3f4b4:	ldr	r3, [r4, #52]	; 0x34
   3f4b8:	ldr	r3, [r3, #12]
   3f4bc:	ldr	r3, [r3, #28]
   3f4c0:	add	r1, r3, r3, lsl #1
   3f4c4:	str	r3, [r4, #72]	; 0x48
   3f4c8:	add	r1, r2, r1, lsl #2
   3f4cc:	bl	34df4 <__assert_fail@plt+0x22800>
   3f4d0:	cmp	r0, #0
   3f4d4:	mov	r8, r0
   3f4d8:	str	r0, [sp, #32]
   3f4dc:	bne	3f5fc <__assert_fail@plt+0x2d008>
   3f4e0:	ldr	r3, [r4, #76]	; 0x4c
   3f4e4:	cmp	r3, #0
   3f4e8:	ble	3f5bc <__assert_fail@plt+0x2cfc8>
   3f4ec:	ldr	r9, [sp, #44]	; 0x2c
   3f4f0:	cmp	r9, #0
   3f4f4:	ble	3f5bc <__assert_fail@plt+0x2cfc8>
   3f4f8:	mov	r6, r0
   3f4fc:	b	3f50c <__assert_fail@plt+0x2cf18>
   3f500:	add	r6, r6, #1
   3f504:	cmp	r9, r6
   3f508:	ble	3f5bc <__assert_fail@plt+0x2cfc8>
   3f50c:	ldr	r2, [sp, #48]	; 0x30
   3f510:	ldr	r0, [r4]
   3f514:	ldr	r3, [r2, r6, lsl #2]
   3f518:	add	ip, r0, r3, lsl #3
   3f51c:	ldrb	r1, [ip, #4]
   3f520:	cmp	r1, #4
   3f524:	bne	3f500 <__assert_fail@plt+0x2cf0c>
   3f528:	sub	r2, r2, #4
   3f52c:	mov	r1, #0
   3f530:	b	3f540 <__assert_fail@plt+0x2cf4c>
   3f534:	add	r1, r1, #1
   3f538:	cmp	r1, r9
   3f53c:	beq	3f500 <__assert_fail@plt+0x2cf0c>
   3f540:	ldr	lr, [r2, #4]!
   3f544:	add	sl, r0, lr, lsl #3
   3f548:	ldrb	sl, [sl, #4]
   3f54c:	cmp	sl, #9
   3f550:	bne	3f534 <__assert_fail@plt+0x2cf40>
   3f554:	ldr	sl, [r0, lr, lsl #3]
   3f558:	ldr	lr, [ip]
   3f55c:	cmp	sl, lr
   3f560:	bne	3f534 <__assert_fail@plt+0x2cf40>
   3f564:	ldr	r2, [r4, #20]
   3f568:	add	r3, r3, r3, lsl #1
   3f56c:	add	r1, sp, #48	; 0x30
   3f570:	mov	r0, r9
   3f574:	add	r3, r2, r3, lsl #2
   3f578:	ldr	r3, [r3, #8]
   3f57c:	ldr	sl, [r3]
   3f580:	mov	r2, sl
   3f584:	bl	343b4 <__assert_fail@plt+0x21dc0>
   3f588:	cmp	r0, #0
   3f58c:	bne	3f500 <__assert_fail@plt+0x2cf0c>
   3f590:	ldr	r1, [r4, #24]
   3f594:	add	sl, sl, sl, lsl #1
   3f598:	mov	r0, r7
   3f59c:	add	r1, r1, sl, lsl #2
   3f5a0:	bl	35c70 <__assert_fail@plt+0x2367c>
   3f5a4:	cmp	r0, #0
   3f5a8:	bne	3f8c0 <__assert_fail@plt+0x2d2cc>
   3f5ac:	ldr	r9, [sp, #44]	; 0x2c
   3f5b0:	mov	r6, #1
   3f5b4:	cmp	r9, r6
   3f5b8:	bgt	3f50c <__assert_fail@plt+0x2cf18>
   3f5bc:	mov	r3, #0
   3f5c0:	mov	r2, r7
   3f5c4:	mov	r1, r4
   3f5c8:	add	r0, sp, #32
   3f5cc:	bl	34fe8 <__assert_fail@plt+0x229f4>
   3f5d0:	cmp	r0, #0
   3f5d4:	str	r0, [r4, #36]	; 0x24
   3f5d8:	beq	3f754 <__assert_fail@plt+0x2d160>
   3f5dc:	ldrsb	r3, [r0, #52]	; 0x34
   3f5e0:	cmp	r3, #0
   3f5e4:	strge	r0, [r4, #40]	; 0x28
   3f5e8:	strge	r0, [r4, #44]	; 0x2c
   3f5ec:	strge	r0, [r4, #48]	; 0x30
   3f5f0:	blt	3f6f0 <__assert_fail@plt+0x2d0fc>
   3f5f4:	ldr	r0, [sp, #48]	; 0x30
   3f5f8:	bl	2f668 <__assert_fail@plt+0x1d074>
   3f5fc:	ldr	r6, [r5]
   3f600:	str	r8, [sp, #28]
   3f604:	ldr	r0, [r6, #56]	; 0x38
   3f608:	cmp	r0, #0
   3f60c:	beq	3f620 <__assert_fail@plt+0x2d02c>
   3f610:	ldr	r7, [r0]
   3f614:	bl	2f668 <__assert_fail@plt+0x1d074>
   3f618:	subs	r0, r7, #0
   3f61c:	bne	3f610 <__assert_fail@plt+0x2d01c>
   3f620:	mov	r7, #0
   3f624:	mov	r3, #31
   3f628:	ldr	r0, [r6, #16]
   3f62c:	str	r7, [r6, #52]	; 0x34
   3f630:	str	r7, [r6, #56]	; 0x38
   3f634:	str	r3, [r6, #64]	; 0x40
   3f638:	bl	2f668 <__assert_fail@plt+0x1d074>
   3f63c:	add	r0, sp, #52	; 0x34
   3f640:	str	r7, [r6, #16]
   3f644:	bl	33af0 <__assert_fail@plt+0x214fc>
   3f648:	ldr	r0, [sp, #28]
   3f64c:	cmp	r0, r7
   3f650:	beq	3f240 <__assert_fail@plt+0x2cc4c>
   3f654:	ldr	r3, [sp, #8]
   3f658:	cmp	r3, #0
   3f65c:	bne	3eea8 <__assert_fail@plt+0x2c8b4>
   3f660:	b	3f228 <__assert_fail@plt+0x2cc34>
   3f664:	mov	r3, #12
   3f668:	ldr	r6, [r5]
   3f66c:	str	r3, [sp, #28]
   3f670:	b	3ee58 <__assert_fail@plt+0x2c864>
   3f674:	add	r0, sp, #52	; 0x34
   3f678:	bl	32e60 <__assert_fail@plt+0x2086c>
   3f67c:	str	fp, [sp, #28]
   3f680:	b	3ef20 <__assert_fail@plt+0x2c92c>
   3f684:	ldr	r3, [r5, #20]
   3f688:	cmp	r3, #0
   3f68c:	bne	3f4ac <__assert_fail@plt+0x2ceb8>
   3f690:	ldr	r0, [r4, #8]
   3f694:	cmp	r0, #0
   3f698:	beq	3f8f8 <__assert_fail@plt+0x2d304>
   3f69c:	ldr	ip, [r4]
   3f6a0:	mov	r2, r3
   3f6a4:	ldr	lr, [sp, #12]
   3f6a8:	mov	r1, ip
   3f6ac:	ldrb	r3, [r1, #4]
   3f6b0:	sub	r3, r3, #1
   3f6b4:	cmp	r3, #11
   3f6b8:	ldrls	pc, [pc, r3, lsl #2]
   3f6bc:	b	3f920 <__assert_fail@plt+0x2d32c>
   3f6c0:	andeq	pc, r3, r0, ror #16
   3f6c4:	strdeq	pc, [r3], -r8
   3f6c8:	muleq	r3, r4, r8
   3f6cc:	strdeq	pc, [r3], -r8
   3f6d0:	strdeq	pc, [r3], -r4
   3f6d4:	andeq	pc, r3, ip, lsr #9
   3f6d8:	andeq	pc, r3, r0, lsr #18
   3f6dc:	strdeq	pc, [r3], -r8
   3f6e0:	strdeq	pc, [r3], -r8
   3f6e4:	strdeq	pc, [r3], -r8
   3f6e8:	strdeq	pc, [r3], -r8
   3f6ec:	andeq	pc, r3, r0, ror r8	; <UNPREDICTABLE>
   3f6f0:	mov	r3, #1
   3f6f4:	mov	r2, r7
   3f6f8:	mov	r1, r4
   3f6fc:	add	r0, sp, #32
   3f700:	bl	34fe8 <__assert_fail@plt+0x229f4>
   3f704:	mov	r3, #2
   3f708:	mov	r2, r7
   3f70c:	str	r0, [r4, #40]	; 0x28
   3f710:	mov	r1, r4
   3f714:	add	r0, sp, #32
   3f718:	bl	34fe8 <__assert_fail@plt+0x229f4>
   3f71c:	mov	r3, #6
   3f720:	mov	r2, r7
   3f724:	str	r0, [r4, #44]	; 0x2c
   3f728:	mov	r1, r4
   3f72c:	add	r0, sp, #32
   3f730:	bl	34fe8 <__assert_fail@plt+0x229f4>
   3f734:	ldr	r3, [r4, #40]	; 0x28
   3f738:	str	r0, [r4, #48]	; 0x30
   3f73c:	cmp	r3, #0
   3f740:	beq	3f754 <__assert_fail@plt+0x2d160>
   3f744:	ldr	r3, [r4, #44]	; 0x2c
   3f748:	cmp	r0, #0
   3f74c:	cmpne	r3, #0
   3f750:	bne	3f5f4 <__assert_fail@plt+0x2d000>
   3f754:	ldr	r8, [sp, #32]
   3f758:	b	3f5fc <__assert_fail@plt+0x2d008>
   3f75c:	add	r0, sp, #52	; 0x34
   3f760:	bl	335c0 <__assert_fail@plt+0x20fcc>
   3f764:	mov	r3, #0
   3f768:	str	r3, [sp, #28]
   3f76c:	b	3ef20 <__assert_fail@plt+0x2c92c>
   3f770:	mov	r0, r4
   3f774:	mov	r1, #160	; 0xa0
   3f778:	bl	32624 <__assert_fail@plt+0x20030>
   3f77c:	subs	r4, r0, #0
   3f780:	beq	3f8e4 <__assert_fail@plt+0x2d2f0>
   3f784:	mov	r3, #160	; 0xa0
   3f788:	str	r4, [r5]
   3f78c:	str	r3, [r5, #4]
   3f790:	b	3ebf0 <__assert_fail@plt+0x2c5fc>
   3f794:	mov	sl, r6
   3f798:	mov	r1, #1
   3f79c:	b	3ec50 <__assert_fail@plt+0x2c65c>
   3f7a0:	cmp	r0, r8
   3f7a4:	beq	3f8ec <__assert_fail@plt+0x2d2f8>
   3f7a8:	mov	r2, #0
   3f7ac:	mov	r3, #0
   3f7b0:	add	r7, sp, #40	; 0x28
   3f7b4:	mov	ip, #2
   3f7b8:	add	sl, r6, #56	; 0x38
   3f7bc:	add	r6, r6, #64	; 0x40
   3f7c0:	mov	r0, sl
   3f7c4:	mov	r1, r6
   3f7c8:	str	r7, [sp]
   3f7cc:	strd	r2, [sp, #40]	; 0x28
   3f7d0:	mov	r3, r8
   3f7d4:	mov	r2, r8
   3f7d8:	strb	ip, [sp, #44]	; 0x2c
   3f7dc:	bl	34938 <__assert_fail@plt+0x22344>
   3f7e0:	mov	lr, r0
   3f7e4:	b	3efc4 <__assert_fail@plt+0x2c9d0>
   3f7e8:	mov	r3, #0
   3f7ec:	str	r3, [sp, #28]
   3f7f0:	b	3ef20 <__assert_fail@plt+0x2c92c>
   3f7f4:	mov	sl, fp
   3f7f8:	add	lr, lr, #1
   3f7fc:	add	r1, r1, #8
   3f800:	cmp	lr, r0
   3f804:	bne	3f6ac <__assert_fail@plt+0x2d0b8>
   3f808:	orr	r3, r2, sl
   3f80c:	ands	r3, r3, #255	; 0xff
   3f810:	moveq	sl, r3
   3f814:	beq	3f8f8 <__assert_fail@plt+0x2d304>
   3f818:	add	r2, ip, lr, lsl #3
   3f81c:	mov	r1, #7
   3f820:	b	3f838 <__assert_fail@plt+0x2d244>
   3f824:	cmp	r3, #5
   3f828:	strbeq	r1, [ip, #4]
   3f82c:	add	ip, ip, #8
   3f830:	cmp	r2, ip
   3f834:	beq	3f8f8 <__assert_fail@plt+0x2d304>
   3f838:	ldrb	r3, [ip, #4]
   3f83c:	cmp	r3, #1
   3f840:	bne	3f824 <__assert_fail@plt+0x2d230>
   3f844:	ldrsb	r3, [ip]
   3f848:	cmp	r3, #0
   3f84c:	bge	3f82c <__assert_fail@plt+0x2d238>
   3f850:	ldrb	r3, [ip, #6]
   3f854:	bfc	r3, #5, #1
   3f858:	strb	r3, [ip, #6]
   3f85c:	b	3f82c <__assert_fail@plt+0x2d238>
   3f860:	ldrsb	r3, [r1]
   3f864:	cmp	r3, #0
   3f868:	movlt	r2, fp
   3f86c:	b	3f7f8 <__assert_fail@plt+0x2d204>
   3f870:	ldr	r3, [r1]
   3f874:	cmp	r3, #32
   3f878:	beq	3f7f8 <__assert_fail@plt+0x2d204>
   3f87c:	bls	3f8c8 <__assert_fail@plt+0x2d2d4>
   3f880:	cmp	r3, #64	; 0x40
   3f884:	beq	3f7f8 <__assert_fail@plt+0x2d204>
   3f888:	cmp	r3, #128	; 0x80
   3f88c:	beq	3f7f8 <__assert_fail@plt+0x2d204>
   3f890:	b	3f4ac <__assert_fail@plt+0x2ceb8>
   3f894:	ldr	r6, [r1]
   3f898:	add	r3, r6, #12
   3f89c:	add	r6, r6, #28
   3f8a0:	ldr	r8, [r3, #4]!
   3f8a4:	cmp	r8, #0
   3f8a8:	bne	3f4ac <__assert_fail@plt+0x2ceb8>
   3f8ac:	cmp	r6, r3
   3f8b0:	bne	3f8a0 <__assert_fail@plt+0x2d2ac>
   3f8b4:	b	3f7f8 <__assert_fail@plt+0x2d204>
   3f8b8:	ldr	r0, [sp, #12]
   3f8bc:	b	3ee50 <__assert_fail@plt+0x2c85c>
   3f8c0:	mov	r8, r0
   3f8c4:	b	3f5fc <__assert_fail@plt+0x2d008>
   3f8c8:	cmp	r3, #16
   3f8cc:	beq	3f7f8 <__assert_fail@plt+0x2d204>
   3f8d0:	b	3f4ac <__assert_fail@plt+0x2ceb8>
   3f8d4:	mov	r1, r3
   3f8d8:	b	3ef10 <__assert_fail@plt+0x2c91c>
   3f8dc:	ldr	r0, [r6, #132]	; 0x84
   3f8e0:	b	3f12c <__assert_fail@plt+0x2cb38>
   3f8e4:	mov	r0, #12
   3f8e8:	b	3f240 <__assert_fail@plt+0x2cc4c>
   3f8ec:	ldr	r6, [r5]
   3f8f0:	str	r0, [r4, #52]	; 0x34
   3f8f4:	b	3ee58 <__assert_fail@plt+0x2c864>
   3f8f8:	ldrb	r3, [r4, #88]	; 0x58
   3f8fc:	mov	r1, #1
   3f900:	ldr	r2, [r4, #76]	; 0x4c
   3f904:	str	r1, [r4, #92]	; 0x5c
   3f908:	and	r3, r3, #251	; 0xfb
   3f90c:	cmp	r2, #0
   3f910:	orrgt	sl, sl, #1
   3f914:	bfi	r3, sl, #1, #1
   3f918:	strb	r3, [r4, #88]	; 0x58
   3f91c:	b	3f4ac <__assert_fail@plt+0x2ceb8>
   3f920:	bl	125a0 <abort@plt>
   3f924:	movw	r3, #40640	; 0x9ec0
   3f928:	movt	r3, #5
   3f92c:	str	r4, [sp, #-8]!
   3f930:	ldr	r3, [r3]
   3f934:	str	lr, [sp, #4]
   3f938:	mov	lr, r2
   3f93c:	mov	r2, r1
   3f940:	ldrb	ip, [lr, #28]
   3f944:	mov	r1, r0
   3f948:	mov	r0, lr
   3f94c:	ubfx	r4, r3, #25, #1
   3f950:	bfi	ip, r4, #4, #1
   3f954:	mvn	ip, ip, lsl #25
   3f958:	mvn	ip, ip, lsr #25
   3f95c:	strb	ip, [lr, #28]
   3f960:	bl	3eb98 <__assert_fail@plt+0x2c5a4>
   3f964:	subs	r3, r0, #0
   3f968:	beq	3f99c <__assert_fail@plt+0x2d3a8>
   3f96c:	movw	r1, #33836	; 0x842c
   3f970:	movt	r1, #4
   3f974:	ldr	r4, [sp]
   3f978:	add	r3, r1, r3, lsl #2
   3f97c:	add	r1, r1, #32
   3f980:	mov	r2, #5
   3f984:	mov	r0, #0
   3f988:	ldr	lr, [sp, #4]
   3f98c:	add	sp, sp, #8
   3f990:	ldr	r3, [r3, #416]	; 0x1a0
   3f994:	add	r1, r1, r3
   3f998:	b	120b4 <dcgettext@plt>
   3f99c:	ldr	r4, [sp]
   3f9a0:	add	sp, sp, #4
   3f9a4:	pop	{pc}		; (ldr pc, [sp], #4)
   3f9a8:	movw	r3, #40640	; 0x9ec0
   3f9ac:	movt	r3, #5
   3f9b0:	ldr	r2, [r3]
   3f9b4:	str	r0, [r3]
   3f9b8:	mov	r0, r2
   3f9bc:	bx	lr
   3f9c0:	strd	r4, [sp, #-16]!
   3f9c4:	mov	r2, #256	; 0x100
   3f9c8:	mov	r4, r0
   3f9cc:	ldr	r5, [r0]
   3f9d0:	mov	r1, #0
   3f9d4:	str	r6, [sp, #8]
   3f9d8:	ldr	r6, [r0, #16]
   3f9dc:	str	lr, [sp, #12]
   3f9e0:	mov	r0, r6
   3f9e4:	bl	12378 <memset@plt>
   3f9e8:	ldr	r1, [r5, #36]	; 0x24
   3f9ec:	mov	r3, r6
   3f9f0:	mov	r0, r4
   3f9f4:	add	r2, r1, #12
   3f9f8:	add	r1, r1, #8
   3f9fc:	bl	387cc <__assert_fail@plt+0x261d8>
   3fa00:	ldr	r3, [r5, #36]	; 0x24
   3fa04:	ldr	r0, [r5, #40]	; 0x28
   3fa08:	cmp	r3, r0
   3fa0c:	beq	3fa28 <__assert_fail@plt+0x2d434>
   3fa10:	add	r2, r0, #12
   3fa14:	add	r1, r0, #8
   3fa18:	mov	r3, r6
   3fa1c:	mov	r0, r4
   3fa20:	bl	387cc <__assert_fail@plt+0x261d8>
   3fa24:	ldr	r0, [r5, #36]	; 0x24
   3fa28:	ldr	r1, [r5, #44]	; 0x2c
   3fa2c:	cmp	r1, r0
   3fa30:	beq	3fa4c <__assert_fail@plt+0x2d458>
   3fa34:	add	r2, r1, #12
   3fa38:	mov	r0, r4
   3fa3c:	mov	r3, r6
   3fa40:	add	r1, r1, #8
   3fa44:	bl	387cc <__assert_fail@plt+0x261d8>
   3fa48:	ldr	r0, [r5, #36]	; 0x24
   3fa4c:	ldr	r1, [r5, #48]	; 0x30
   3fa50:	cmp	r1, r0
   3fa54:	beq	3fa6c <__assert_fail@plt+0x2d478>
   3fa58:	add	r2, r1, #12
   3fa5c:	mov	r3, r6
   3fa60:	add	r1, r1, #8
   3fa64:	mov	r0, r4
   3fa68:	bl	387cc <__assert_fail@plt+0x261d8>
   3fa6c:	ldrb	r3, [r4, #28]
   3fa70:	mov	r0, #0
   3fa74:	ldr	r6, [sp, #8]
   3fa78:	orr	r3, r3, #8
   3fa7c:	strb	r3, [r4, #28]
   3fa80:	ldrd	r4, [sp]
   3fa84:	add	sp, sp, #12
   3fa88:	pop	{pc}		; (ldr pc, [sp], #4)
   3fa8c:	cmp	r3, r2
   3fa90:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3fa94:	strd	r6, [sp, #8]
   3fa98:	strd	r8, [sp, #16]
   3fa9c:	strd	sl, [sp, #24]
   3faa0:	str	lr, [sp, #32]
   3faa4:	sub	sp, sp, #52	; 0x34
   3faa8:	movle	lr, #0
   3faac:	movgt	lr, #1
   3fab0:	ldr	ip, [sp, #88]	; 0x58
   3fab4:	orrs	lr, lr, r3, lsr #31
   3fab8:	ldrb	lr, [sp, #100]	; 0x64
   3fabc:	ldr	r8, [sp, #96]	; 0x60
   3fac0:	add	r7, r3, ip
   3fac4:	str	lr, [sp, #36]	; 0x24
   3fac8:	ldr	lr, [r0]
   3facc:	str	lr, [sp, #28]
   3fad0:	bne	3fdc4 <__assert_fail@plt+0x2d7d0>
   3fad4:	cmp	r7, r2
   3fad8:	mov	r4, r0
   3fadc:	str	r2, [sp, #32]
   3fae0:	mov	fp, r3
   3fae4:	str	r1, [sp, #40]	; 0x28
   3fae8:	bgt	3fd70 <__assert_fail@plt+0x2d77c>
   3faec:	cmp	ip, #0
   3faf0:	cmpge	fp, r7
   3faf4:	bgt	3fd70 <__assert_fail@plt+0x2d77c>
   3faf8:	cmp	r7, #0
   3fafc:	blt	3fd78 <__assert_fail@plt+0x2d784>
   3fb00:	cmp	fp, r7
   3fb04:	movgt	r2, #0
   3fb08:	movle	r2, #1
   3fb0c:	ands	r3, r2, ip, lsr #31
   3fb10:	bne	3fd78 <__assert_fail@plt+0x2d784>
   3fb14:	movw	r2, #9116	; 0x239c
   3fb18:	movt	r2, #1
   3fb1c:	cmp	r2, #0
   3fb20:	mov	r5, #1
   3fb24:	moveq	r5, r2
   3fb28:	movw	r2, #8180	; 0x1ff4
   3fb2c:	movt	r2, #1
   3fb30:	mov	r0, #1
   3fb34:	cmp	r2, #0
   3fb38:	moveq	r0, r2
   3fb3c:	orr	r5, r5, r0
   3fb40:	ands	r5, r5, #255	; 0xff
   3fb44:	beq	3fb58 <__assert_fail@plt+0x2d564>
   3fb48:	ldr	r3, [sp, #28]
   3fb4c:	mov	r5, #1
   3fb50:	add	r0, r3, #136	; 0x88
   3fb54:	bl	11fd0 <pthread_mutex_lock@plt>
   3fb58:	ldrb	r0, [r4, #28]
   3fb5c:	cmp	fp, r7
   3fb60:	ubfx	r3, r0, #5, #2
   3fb64:	str	r3, [sp, #44]	; 0x2c
   3fb68:	bge	3fb80 <__assert_fail@plt+0x2d58c>
   3fb6c:	ldr	r2, [r4, #16]
   3fb70:	cmp	r2, #0
   3fb74:	beq	3fb80 <__assert_fail@plt+0x2d58c>
   3fb78:	tst	r0, #8
   3fb7c:	beq	3fd1c <__assert_fail@plt+0x2d728>
   3fb80:	ubfx	r2, r0, #4, #1
   3fb84:	cmp	r8, #0
   3fb88:	orreq	r2, r2, #1
   3fb8c:	ands	r2, r2, #255	; 0xff
   3fb90:	bne	3fd08 <__assert_fail@plt+0x2d714>
   3fb94:	and	r0, r0, #6
   3fb98:	ldr	ip, [r4, #24]
   3fb9c:	cmp	r0, #4
   3fba0:	beq	3fdd4 <__assert_fail@plt+0x2d7e0>
   3fba4:	add	sl, ip, #1
   3fba8:	mov	r6, sl
   3fbac:	lsl	r0, sl, #3
   3fbb0:	bl	31b54 <__assert_fail@plt+0x1f560>
   3fbb4:	subs	r9, r0, #0
   3fbb8:	beq	3fdcc <__assert_fail@plt+0x2d7d8>
   3fbbc:	mov	r3, fp
   3fbc0:	mov	r0, r4
   3fbc4:	str	sl, [sp, #8]
   3fbc8:	ldr	ip, [sp, #92]	; 0x5c
   3fbcc:	ldr	r2, [sp, #32]
   3fbd0:	ldr	r1, [sp, #40]	; 0x28
   3fbd4:	stm	sp, {r7, ip}
   3fbd8:	ldr	ip, [sp, #44]	; 0x2c
   3fbdc:	str	r9, [sp, #12]
   3fbe0:	str	ip, [sp, #16]
   3fbe4:	bl	3a320 <__assert_fail@plt+0x27d2c>
   3fbe8:	cmp	r0, #0
   3fbec:	beq	3fc3c <__assert_fail@plt+0x2d648>
   3fbf0:	cmp	r0, #1
   3fbf4:	mvneq	r4, #0
   3fbf8:	beq	3fc00 <__assert_fail@plt+0x2d60c>
   3fbfc:	mvn	r4, #1
   3fc00:	mov	r0, r9
   3fc04:	bl	2f668 <__assert_fail@plt+0x1d074>
   3fc08:	cmp	r5, #0
   3fc0c:	beq	3fc1c <__assert_fail@plt+0x2d628>
   3fc10:	ldr	r3, [sp, #28]
   3fc14:	add	r0, r3, #136	; 0x88
   3fc18:	bl	11ea4 <pthread_mutex_unlock@plt>
   3fc1c:	mov	r0, r4
   3fc20:	add	sp, sp, #52	; 0x34
   3fc24:	ldrd	r4, [sp]
   3fc28:	ldrd	r6, [sp, #8]
   3fc2c:	ldrd	r8, [sp, #16]
   3fc30:	ldrd	sl, [sp, #24]
   3fc34:	add	sp, sp, #32
   3fc38:	pop	{pc}		; (ldr pc, [sp], #4)
   3fc3c:	cmp	r8, #0
   3fc40:	beq	3fcec <__assert_fail@plt+0x2d6f8>
   3fc44:	ldrb	r7, [r4, #28]
   3fc48:	add	sl, r6, #1
   3fc4c:	ubfx	r7, r7, #1, #2
   3fc50:	cmp	r7, #0
   3fc54:	beq	3fd2c <__assert_fail@plt+0x2d738>
   3fc58:	cmp	r7, #1
   3fc5c:	movne	r7, #2
   3fc60:	beq	3fe00 <__assert_fail@plt+0x2d80c>
   3fc64:	cmp	r6, #0
   3fc68:	ble	3fe4c <__assert_fail@plt+0x2d858>
   3fc6c:	ldrd	r0, [r8, #4]
   3fc70:	add	lr, r9, r6, lsl #3
   3fc74:	mov	r3, r9
   3fc78:	mov	r2, r6
   3fc7c:	sub	r0, r0, #4
   3fc80:	sub	r1, r1, #4
   3fc84:	ldr	ip, [r3]
   3fc88:	add	r3, r3, #8
   3fc8c:	str	ip, [r0, #4]!
   3fc90:	ldr	ip, [r3, #-4]
   3fc94:	cmp	lr, r3
   3fc98:	str	ip, [r1, #4]!
   3fc9c:	bne	3fc84 <__assert_fail@plt+0x2d690>
   3fca0:	ldr	r3, [r8]
   3fca4:	cmp	r3, r2
   3fca8:	bls	3fcd4 <__assert_fail@plt+0x2d6e0>
   3fcac:	ldr	ip, [r8, #4]
   3fcb0:	mvn	r3, #0
   3fcb4:	ldr	r0, [r8, #8]
   3fcb8:	str	r3, [r0, r2, lsl #2]
   3fcbc:	add	r6, r6, #1
   3fcc0:	str	r3, [ip, r2, lsl #2]
   3fcc4:	mov	r2, r6
   3fcc8:	ldr	r1, [r8]
   3fccc:	cmp	r1, r6
   3fcd0:	bhi	3fcb8 <__assert_fail@plt+0x2d6c4>
   3fcd4:	ldrb	r3, [r4, #28]
   3fcd8:	bfi	r3, r7, #1, #2
   3fcdc:	and	r2, r3, #6
   3fce0:	cmp	r2, #0
   3fce4:	strb	r3, [r4, #28]
   3fce8:	beq	3fbfc <__assert_fail@plt+0x2d608>
   3fcec:	ldr	r3, [sp, #36]	; 0x24
   3fcf0:	ldr	r4, [r9]
   3fcf4:	cmp	r3, #0
   3fcf8:	beq	3fc00 <__assert_fail@plt+0x2d60c>
   3fcfc:	ldr	r3, [r9, #4]
   3fd00:	sub	r4, r3, r4
   3fd04:	b	3fc00 <__assert_fail@plt+0x2d60c>
   3fd08:	mov	sl, #1
   3fd0c:	mov	r0, #8
   3fd10:	mov	r6, sl
   3fd14:	mov	r8, #0
   3fd18:	b	3fbb0 <__assert_fail@plt+0x2d5bc>
   3fd1c:	mov	r0, r4
   3fd20:	bl	3f9c0 <__assert_fail@plt+0x2d3cc>
   3fd24:	ldrb	r0, [r4, #28]
   3fd28:	b	3fb80 <__assert_fail@plt+0x2d58c>
   3fd2c:	lsl	r7, sl, #2
   3fd30:	mov	r0, r7
   3fd34:	bl	31b54 <__assert_fail@plt+0x1f560>
   3fd38:	cmp	r0, #0
   3fd3c:	str	r0, [r8, #4]
   3fd40:	beq	3fe58 <__assert_fail@plt+0x2d864>
   3fd44:	mov	r0, r7
   3fd48:	bl	31b54 <__assert_fail@plt+0x1f560>
   3fd4c:	cmp	r0, #0
   3fd50:	mov	r7, r0
   3fd54:	str	r0, [r8, #8]
   3fd58:	movne	r7, #1
   3fd5c:	strne	sl, [r8]
   3fd60:	bne	3fc64 <__assert_fail@plt+0x2d670>
   3fd64:	ldr	r0, [r8, #4]
   3fd68:	bl	2f668 <__assert_fail@plt+0x1d074>
   3fd6c:	b	3fcd4 <__assert_fail@plt+0x2d6e0>
   3fd70:	ldr	r7, [sp, #32]
   3fd74:	b	3fb14 <__assert_fail@plt+0x2d520>
   3fd78:	movw	r2, #9116	; 0x239c
   3fd7c:	movt	r2, #1
   3fd80:	cmp	r2, #0
   3fd84:	mov	r5, #1
   3fd88:	moveq	r5, r2
   3fd8c:	movw	r2, #8180	; 0x1ff4
   3fd90:	movt	r2, #1
   3fd94:	mov	r1, #1
   3fd98:	cmp	r2, #0
   3fd9c:	moveq	r1, r2
   3fda0:	orr	r5, r5, r1
   3fda4:	ands	r5, r5, #255	; 0xff
   3fda8:	movne	r7, #0
   3fdac:	bne	3fb48 <__assert_fail@plt+0x2d554>
   3fdb0:	ldrb	r0, [r4, #28]
   3fdb4:	mov	r7, r5
   3fdb8:	ubfx	r3, r0, #5, #2
   3fdbc:	str	r3, [sp, #44]	; 0x2c
   3fdc0:	b	3fb80 <__assert_fail@plt+0x2d58c>
   3fdc4:	mvn	r4, #0
   3fdc8:	b	3fc1c <__assert_fail@plt+0x2d628>
   3fdcc:	mvn	r4, #1
   3fdd0:	b	3fc08 <__assert_fail@plt+0x2d614>
   3fdd4:	ldr	sl, [r8]
   3fdd8:	cmp	sl, ip
   3fddc:	bhi	3fba4 <__assert_fail@plt+0x2d5b0>
   3fde0:	cmp	sl, #0
   3fde4:	mov	r6, sl
   3fde8:	bgt	3fbac <__assert_fail@plt+0x2d5b8>
   3fdec:	mov	sl, #1
   3fdf0:	mov	r8, r2
   3fdf4:	mov	r6, sl
   3fdf8:	mov	r0, #8
   3fdfc:	b	3fbb0 <__assert_fail@plt+0x2d5bc>
   3fe00:	ldr	r3, [r8]
   3fe04:	cmp	r3, sl
   3fe08:	bcs	3fc64 <__assert_fail@plt+0x2d670>
   3fe0c:	lsl	fp, sl, #2
   3fe10:	ldr	r0, [r8, #4]
   3fe14:	mov	r1, fp
   3fe18:	bl	32624 <__assert_fail@plt+0x20030>
   3fe1c:	subs	r2, r0, #0
   3fe20:	str	r2, [sp, #32]
   3fe24:	beq	3fe58 <__assert_fail@plt+0x2d864>
   3fe28:	mov	r1, fp
   3fe2c:	ldr	r0, [r8, #8]
   3fe30:	bl	32624 <__assert_fail@plt+0x20030>
   3fe34:	subs	fp, r0, #0
   3fe38:	ldr	r2, [sp, #32]
   3fe3c:	beq	3fe60 <__assert_fail@plt+0x2d86c>
   3fe40:	str	sl, [r8]
   3fe44:	stmib	r8, {r2, fp}
   3fe48:	b	3fc64 <__assert_fail@plt+0x2d670>
   3fe4c:	mov	r6, #0
   3fe50:	mov	r2, r6
   3fe54:	b	3fca0 <__assert_fail@plt+0x2d6ac>
   3fe58:	mov	r7, #0
   3fe5c:	b	3fcd4 <__assert_fail@plt+0x2d6e0>
   3fe60:	mov	r0, r2
   3fe64:	mov	r7, fp
   3fe68:	bl	2f668 <__assert_fail@plt+0x1d074>
   3fe6c:	b	3fcd4 <__assert_fail@plt+0x2d6e0>
   3fe70:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3fe74:	strd	r6, [sp, #8]
   3fe78:	mov	r7, r3
   3fe7c:	strd	r8, [sp, #16]
   3fe80:	strd	sl, [sp, #24]
   3fe84:	str	lr, [sp, #32]
   3fe88:	sub	sp, sp, #28
   3fe8c:	ldr	r5, [sp, #64]	; 0x40
   3fe90:	ldr	r6, [sp, #80]	; 0x50
   3fe94:	ldrb	fp, [sp, #84]	; 0x54
   3fe98:	orr	r3, r5, r2
   3fe9c:	orrs	r3, r3, r6
   3fea0:	bmi	3ff50 <__assert_fail@plt+0x2d95c>
   3fea4:	adds	r9, r2, r5
   3fea8:	mov	r4, r2
   3feac:	bvs	3ff50 <__assert_fail@plt+0x2d95c>
   3feb0:	cmp	r5, #0
   3feb4:	mov	sl, r0
   3feb8:	beq	3ff58 <__assert_fail@plt+0x2d964>
   3febc:	cmp	r2, #0
   3fec0:	str	r1, [sp, #20]
   3fec4:	moveq	r8, r2
   3fec8:	bne	3ff1c <__assert_fail@plt+0x2d928>
   3fecc:	ldr	r3, [sp, #72]	; 0x48
   3fed0:	mov	r2, r9
   3fed4:	mov	r1, r7
   3fed8:	mov	r0, sl
   3fedc:	str	fp, [sp, #12]
   3fee0:	ldr	ip, [sp, #76]	; 0x4c
   3fee4:	stm	sp, {r3, r6, ip}
   3fee8:	ldr	r3, [sp, #68]	; 0x44
   3feec:	bl	3fa8c <__assert_fail@plt+0x2d498>
   3fef0:	mov	r4, r0
   3fef4:	mov	r0, r8
   3fef8:	bl	2f668 <__assert_fail@plt+0x1d074>
   3fefc:	mov	r0, r4
   3ff00:	add	sp, sp, #28
   3ff04:	ldrd	r4, [sp]
   3ff08:	ldrd	r6, [sp, #8]
   3ff0c:	ldrd	r8, [sp, #16]
   3ff10:	ldrd	sl, [sp, #24]
   3ff14:	add	sp, sp, #32
   3ff18:	pop	{pc}		; (ldr pc, [sp], #4)
   3ff1c:	mov	r0, r9
   3ff20:	bl	31b54 <__assert_fail@plt+0x1f560>
   3ff24:	subs	r8, r0, #0
   3ff28:	beq	3ff50 <__assert_fail@plt+0x2d95c>
   3ff2c:	mov	r2, r4
   3ff30:	ldr	r1, [sp, #20]
   3ff34:	bl	12024 <memcpy@plt>
   3ff38:	mov	r1, r7
   3ff3c:	mov	r2, r5
   3ff40:	add	r0, r8, r4
   3ff44:	mov	r7, r8
   3ff48:	bl	12024 <memcpy@plt>
   3ff4c:	b	3fecc <__assert_fail@plt+0x2d8d8>
   3ff50:	mvn	r4, #1
   3ff54:	b	3fefc <__assert_fail@plt+0x2d908>
   3ff58:	mov	r7, r1
   3ff5c:	mov	r8, r5
   3ff60:	b	3fecc <__assert_fail@plt+0x2d8d8>
   3ff64:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3ff68:	mov	r4, r0
   3ff6c:	mov	r0, #0
   3ff70:	tst	r2, #1
   3ff74:	movw	r5, #45820	; 0xb2fc
   3ff78:	movt	r5, #3
   3ff7c:	movw	r3, #710	; 0x2c6
   3ff80:	movt	r3, #257	; 0x101
   3ff84:	strd	r6, [sp, #8]
   3ff88:	mov	r6, r2
   3ff8c:	str	r8, [sp, #16]
   3ff90:	mov	r7, r1
   3ff94:	movne	r8, r5
   3ff98:	str	lr, [sp, #20]
   3ff9c:	moveq	r8, r3
   3ffa0:	str	r0, [r4]
   3ffa4:	str	r0, [r4, #4]
   3ffa8:	str	r0, [r4, #8]
   3ffac:	mov	r0, #256	; 0x100
   3ffb0:	bl	31b54 <__assert_fail@plt+0x1f560>
   3ffb4:	cmp	r0, #0
   3ffb8:	str	r0, [r4, #16]
   3ffbc:	beq	40068 <__assert_fail@plt+0x2da74>
   3ffc0:	lsl	r5, r6, #21
   3ffc4:	ands	r2, r6, #4
   3ffc8:	and	r5, r5, #4194304	; 0x400000
   3ffcc:	orr	r5, r5, r8
   3ffd0:	bne	40040 <__assert_fail@plt+0x2da4c>
   3ffd4:	ldrb	r3, [r4, #28]
   3ffd8:	ubfx	r6, r6, #3, #1
   3ffdc:	mov	r1, #0
   3ffe0:	mov	r0, r7
   3ffe4:	str	r1, [r4, #20]
   3ffe8:	bfi	r3, r2, #7, #1
   3ffec:	bfi	r3, r6, #4, #1
   3fff0:	strb	r3, [r4, #28]
   3fff4:	bl	12300 <strlen@plt>
   3fff8:	mov	r2, r0
   3fffc:	mov	r3, r5
   40000:	mov	r1, r7
   40004:	mov	r0, r4
   40008:	bl	3eb98 <__assert_fail@plt+0x2c5a4>
   4000c:	cmp	r0, #16
   40010:	mov	r5, r0
   40014:	beq	40050 <__assert_fail@plt+0x2da5c>
   40018:	cmp	r0, #0
   4001c:	bne	40054 <__assert_fail@plt+0x2da60>
   40020:	mov	r0, r4
   40024:	bl	3f9c0 <__assert_fail@plt+0x2d3cc>
   40028:	mov	r0, r5
   4002c:	ldrd	r4, [sp]
   40030:	ldrd	r6, [sp, #8]
   40034:	ldr	r8, [sp, #16]
   40038:	add	sp, sp, #20
   4003c:	pop	{pc}		; (ldr pc, [sp], #4)
   40040:	bic	r5, r5, #64	; 0x40
   40044:	mov	r2, #1
   40048:	orr	r5, r5, #256	; 0x100
   4004c:	b	3ffd4 <__assert_fail@plt+0x2d9e0>
   40050:	mov	r5, #8
   40054:	ldr	r0, [r4, #16]
   40058:	bl	2f668 <__assert_fail@plt+0x1d074>
   4005c:	mov	r3, #0
   40060:	str	r3, [r4, #16]
   40064:	b	40028 <__assert_fail@plt+0x2da34>
   40068:	mov	r5, #12
   4006c:	b	40028 <__assert_fail@plt+0x2da34>
   40070:	cmp	r0, #16
   40074:	strd	r4, [sp, #-24]!	; 0xffffffe8
   40078:	strd	r6, [sp, #8]
   4007c:	str	r8, [sp, #16]
   40080:	str	lr, [sp, #20]
   40084:	bhi	40100 <__assert_fail@plt+0x2db0c>
   40088:	movw	r1, #33836	; 0x842c
   4008c:	movt	r1, #4
   40090:	add	ip, r1, r0, lsl #2
   40094:	mov	r4, r3
   40098:	add	r1, r1, #32
   4009c:	mov	r6, r2
   400a0:	mov	r0, #0
   400a4:	ldr	r3, [ip, #416]	; 0x1a0
   400a8:	mov	r2, #5
   400ac:	add	r1, r1, r3
   400b0:	bl	120b4 <dcgettext@plt>
   400b4:	mov	r7, r0
   400b8:	bl	12300 <strlen@plt>
   400bc:	cmp	r4, #0
   400c0:	add	r5, r0, #1
   400c4:	beq	400e8 <__assert_fail@plt+0x2daf4>
   400c8:	cmp	r5, r4
   400cc:	mov	r1, r7
   400d0:	subhi	r2, r4, #1
   400d4:	movhi	r3, #0
   400d8:	movls	r2, r5
   400dc:	mov	r0, r6
   400e0:	strbhi	r3, [r6, r2]
   400e4:	bl	12024 <memcpy@plt>
   400e8:	mov	r0, r5
   400ec:	ldrd	r4, [sp]
   400f0:	ldrd	r6, [sp, #8]
   400f4:	ldr	r8, [sp, #16]
   400f8:	add	sp, sp, #20
   400fc:	pop	{pc}		; (ldr pc, [sp], #4)
   40100:	bl	125a0 <abort@plt>
   40104:	strd	r4, [sp, #-16]!
   40108:	mov	r4, r0
   4010c:	ldr	r5, [r0]
   40110:	str	r6, [sp, #8]
   40114:	str	lr, [sp, #12]
   40118:	cmp	r5, #0
   4011c:	beq	40164 <__assert_fail@plt+0x2db70>
   40120:	movw	r2, #8180	; 0x1ff4
   40124:	movt	r2, #1
   40128:	cmp	r2, #0
   4012c:	mov	r3, #1
   40130:	moveq	r3, r2
   40134:	movw	r2, #9116	; 0x239c
   40138:	movt	r2, #1
   4013c:	mov	r1, #1
   40140:	cmp	r2, #0
   40144:	moveq	r1, r2
   40148:	orr	r3, r3, r1
   4014c:	tst	r3, #1
   40150:	beq	4015c <__assert_fail@plt+0x2db68>
   40154:	add	r0, r5, #136	; 0x88
   40158:	bl	11f70 <pthread_mutex_destroy@plt>
   4015c:	mov	r0, r5
   40160:	bl	35a70 <__assert_fail@plt+0x2347c>
   40164:	mov	r5, #0
   40168:	ldr	r0, [r4, #16]
   4016c:	str	r5, [r4]
   40170:	str	r5, [r4, #4]
   40174:	bl	2f668 <__assert_fail@plt+0x1d074>
   40178:	str	r5, [r4, #16]
   4017c:	ldr	r0, [r4, #20]
   40180:	bl	2f668 <__assert_fail@plt+0x1d074>
   40184:	ldr	r6, [sp, #8]
   40188:	str	r5, [r4, #20]
   4018c:	ldrd	r4, [sp]
   40190:	add	sp, sp, #12
   40194:	pop	{pc}		; (ldr pc, [sp], #4)
   40198:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4019c:	strd	r6, [sp, #8]
   401a0:	strd	r8, [sp, #16]
   401a4:	strd	sl, [sp, #24]
   401a8:	str	lr, [sp, #32]
   401ac:	sub	sp, sp, #36	; 0x24
   401b0:	ldr	r6, [sp, #72]	; 0x48
   401b4:	bics	ip, r6, #7
   401b8:	movne	r0, #2
   401bc:	bne	40274 <__assert_fail@plt+0x2dc80>
   401c0:	ands	sl, r6, #4
   401c4:	mov	r7, r3
   401c8:	str	r2, [sp, #28]
   401cc:	mov	r8, r1
   401d0:	mov	r5, r0
   401d4:	bne	40290 <__assert_fail@plt+0x2dc9c>
   401d8:	mov	r0, r1
   401dc:	bl	12300 <strlen@plt>
   401e0:	mov	r9, r0
   401e4:	movw	r2, #9116	; 0x239c
   401e8:	movt	r2, #1
   401ec:	ldr	fp, [r5]
   401f0:	cmp	r2, #0
   401f4:	mov	r4, #1
   401f8:	moveq	r4, r2
   401fc:	movw	r2, #8180	; 0x1ff4
   40200:	movt	r2, #1
   40204:	mov	r1, #1
   40208:	cmp	r2, #0
   4020c:	moveq	r1, r2
   40210:	orr	r4, r4, r1
   40214:	ands	r4, r4, #255	; 0xff
   40218:	beq	40224 <__assert_fail@plt+0x2dc30>
   4021c:	add	r0, fp, #136	; 0x88
   40220:	bl	11fd0 <pthread_mutex_lock@plt>
   40224:	ldrb	r2, [r5, #28]
   40228:	tst	r2, #16
   4022c:	beq	4029c <__assert_fail@plt+0x2dca8>
   40230:	mov	ip, #0
   40234:	mov	r0, r5
   40238:	str	r9, [sp]
   4023c:	mov	r3, sl
   40240:	mov	r1, r8
   40244:	mov	r2, r9
   40248:	stmib	sp, {r9, ip}
   4024c:	str	ip, [sp, #12]
   40250:	str	r6, [sp, #16]
   40254:	bl	3a320 <__assert_fail@plt+0x27d2c>
   40258:	mov	r5, r0
   4025c:	cmp	r4, #0
   40260:	beq	4026c <__assert_fail@plt+0x2dc78>
   40264:	add	r0, fp, #136	; 0x88
   40268:	bl	11ea4 <pthread_mutex_unlock@plt>
   4026c:	adds	r0, r5, #0
   40270:	movne	r0, #1
   40274:	add	sp, sp, #36	; 0x24
   40278:	ldrd	r4, [sp]
   4027c:	ldrd	r6, [sp, #8]
   40280:	ldrd	r8, [sp, #16]
   40284:	ldrd	sl, [sp, #24]
   40288:	add	sp, sp, #32
   4028c:	pop	{pc}		; (ldr pc, [sp], #4)
   40290:	ldr	sl, [r3]
   40294:	ldr	r9, [r3, #4]
   40298:	b	401e4 <__assert_fail@plt+0x2dbf0>
   4029c:	ldr	ip, [sp, #28]
   402a0:	mov	r0, r5
   402a4:	mov	r3, sl
   402a8:	mov	r1, r8
   402ac:	mov	r2, r9
   402b0:	str	r9, [sp]
   402b4:	stmib	sp, {r9, ip}
   402b8:	str	r7, [sp, #12]
   402bc:	str	r6, [sp, #16]
   402c0:	bl	3a320 <__assert_fail@plt+0x27d2c>
   402c4:	mov	r5, r0
   402c8:	b	4025c <__assert_fail@plt+0x2dc68>
   402cc:	str	r4, [sp, #-8]!
   402d0:	mov	r4, #0
   402d4:	str	lr, [sp, #4]
   402d8:	sub	sp, sp, #16
   402dc:	mov	lr, #1
   402e0:	ldr	ip, [sp, #24]
   402e4:	str	r4, [sp]
   402e8:	stmib	sp, {r2, ip, lr}
   402ec:	bl	3fa8c <__assert_fail@plt+0x2d498>
   402f0:	add	sp, sp, #16
   402f4:	ldr	r4, [sp]
   402f8:	add	sp, sp, #4
   402fc:	pop	{pc}		; (ldr pc, [sp], #4)
   40300:	str	r4, [sp, #-8]!
   40304:	mov	r4, #0
   40308:	str	lr, [sp, #4]
   4030c:	sub	sp, sp, #16
   40310:	ldr	lr, [sp, #24]
   40314:	ldr	ip, [sp, #28]
   40318:	str	lr, [sp]
   4031c:	str	r4, [sp, #12]
   40320:	stmib	sp, {r2, ip}
   40324:	bl	3fa8c <__assert_fail@plt+0x2d498>
   40328:	add	sp, sp, #16
   4032c:	ldr	r4, [sp]
   40330:	add	sp, sp, #4
   40334:	pop	{pc}		; (ldr pc, [sp], #4)
   40338:	strd	r4, [sp, #-12]!
   4033c:	mov	r4, #1
   40340:	str	lr, [sp, #8]
   40344:	sub	sp, sp, #28
   40348:	mov	lr, #0
   4034c:	ldr	ip, [sp, #40]	; 0x28
   40350:	ldr	r5, [sp, #44]	; 0x2c
   40354:	str	ip, [sp]
   40358:	ldr	ip, [sp, #52]	; 0x34
   4035c:	stmib	sp, {r5, lr}
   40360:	ldr	lr, [sp, #48]	; 0x30
   40364:	str	r4, [sp, #20]
   40368:	str	lr, [sp, #12]
   4036c:	str	ip, [sp, #16]
   40370:	bl	3fe70 <__assert_fail@plt+0x2d87c>
   40374:	add	sp, sp, #28
   40378:	ldrd	r4, [sp]
   4037c:	add	sp, sp, #8
   40380:	pop	{pc}		; (ldr pc, [sp], #4)
   40384:	str	r4, [sp, #-8]!
   40388:	mov	r4, #0
   4038c:	str	lr, [sp, #4]
   40390:	sub	sp, sp, #24
   40394:	ldr	lr, [sp, #32]
   40398:	ldr	ip, [sp, #36]	; 0x24
   4039c:	str	lr, [sp]
   403a0:	str	r4, [sp, #20]
   403a4:	str	ip, [sp, #4]
   403a8:	ldr	r4, [sp, #40]	; 0x28
   403ac:	ldr	lr, [sp, #44]	; 0x2c
   403b0:	ldr	ip, [sp, #48]	; 0x30
   403b4:	str	r4, [sp, #8]
   403b8:	str	lr, [sp, #12]
   403bc:	str	ip, [sp, #16]
   403c0:	bl	3fe70 <__assert_fail@plt+0x2d87c>
   403c4:	add	sp, sp, #24
   403c8:	ldr	r4, [sp]
   403cc:	add	sp, sp, #4
   403d0:	pop	{pc}		; (ldr pc, [sp], #4)
   403d4:	cmp	r2, #0
   403d8:	beq	40400 <__assert_fail@plt+0x2de0c>
   403dc:	ldrb	ip, [r0, #28]
   403e0:	push	{lr}		; (str lr, [sp, #-4]!)
   403e4:	mov	lr, #1
   403e8:	bfi	ip, lr, #1, #2
   403ec:	strb	ip, [r0, #28]
   403f0:	strd	r2, [r1]
   403f4:	ldr	r3, [sp, #4]
   403f8:	str	r3, [r1, #8]
   403fc:	pop	{pc}		; (ldr pc, [sp], #4)
   40400:	ldrb	r3, [r0, #28]
   40404:	bfi	r3, r2, #1, #2
   40408:	strb	r3, [r0, #28]
   4040c:	str	r2, [r1]
   40410:	str	r2, [r1, #4]
   40414:	str	r2, [r1, #8]
   40418:	bx	lr
   4041c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   40420:	mvn	r4, #0
   40424:	strd	r6, [sp, #8]
   40428:	mov	r6, #1
   4042c:	mov	ip, r6
   40430:	str	r8, [sp, #16]
   40434:	str	lr, [sp, #20]
   40438:	mov	lr, #0
   4043c:	add	r3, ip, lr
   40440:	add	r5, r0, r4
   40444:	cmp	r3, r1
   40448:	bcs	40478 <__assert_fail@plt+0x2de84>
   4044c:	ldrb	r5, [r5, ip]
   40450:	ldrb	r7, [r0, r3]
   40454:	cmp	r7, r5
   40458:	bcs	404f0 <__assert_fail@plt+0x2defc>
   4045c:	mov	lr, r3
   40460:	mov	ip, #1
   40464:	sub	r6, r3, r4
   40468:	add	r3, ip, lr
   4046c:	cmp	r3, r1
   40470:	add	r5, r0, r4
   40474:	bcc	4044c <__assert_fail@plt+0x2de58>
   40478:	mov	r8, #1
   4047c:	mov	lr, #0
   40480:	str	r6, [r2]
   40484:	mov	ip, r8
   40488:	mvn	r5, #0
   4048c:	add	r3, ip, lr
   40490:	add	r6, r0, r5
   40494:	cmp	r1, r3
   40498:	bls	404c8 <__assert_fail@plt+0x2ded4>
   4049c:	ldrb	r6, [r6, ip]
   404a0:	ldrb	r7, [r0, r3]
   404a4:	cmp	r7, r6
   404a8:	bls	40508 <__assert_fail@plt+0x2df14>
   404ac:	mov	lr, r3
   404b0:	mov	ip, #1
   404b4:	sub	r8, r3, r5
   404b8:	add	r3, ip, lr
   404bc:	cmp	r1, r3
   404c0:	add	r6, r0, r5
   404c4:	bhi	4049c <__assert_fail@plt+0x2dea8>
   404c8:	add	r0, r4, #1
   404cc:	add	r5, r5, #1
   404d0:	ldrd	r6, [sp, #8]
   404d4:	cmp	r5, r0
   404d8:	movcs	r0, r5
   404dc:	ldrd	r4, [sp]
   404e0:	strcs	r8, [r2]
   404e4:	ldr	r8, [sp, #16]
   404e8:	add	sp, sp, #20
   404ec:	pop	{pc}		; (ldr pc, [sp], #4)
   404f0:	beq	40520 <__assert_fail@plt+0x2df2c>
   404f4:	mov	r6, #1
   404f8:	mov	r4, lr
   404fc:	mov	ip, r6
   40500:	add	lr, lr, r6
   40504:	b	4043c <__assert_fail@plt+0x2de48>
   40508:	beq	40534 <__assert_fail@plt+0x2df40>
   4050c:	mov	r8, #1
   40510:	mov	r5, lr
   40514:	mov	ip, r8
   40518:	add	lr, lr, r8
   4051c:	b	4048c <__assert_fail@plt+0x2de98>
   40520:	cmp	ip, r6
   40524:	add	ip, ip, #1
   40528:	moveq	lr, r3
   4052c:	moveq	ip, #1
   40530:	b	4043c <__assert_fail@plt+0x2de48>
   40534:	cmp	ip, r8
   40538:	add	ip, ip, #1
   4053c:	moveq	lr, r3
   40540:	moveq	ip, #1
   40544:	b	4048c <__assert_fail@plt+0x2de98>
   40548:	cmp	r3, #2
   4054c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   40550:	mov	r4, r3
   40554:	strd	r6, [sp, #8]
   40558:	mov	r5, r0
   4055c:	strd	r8, [sp, #16]
   40560:	strd	sl, [sp, #24]
   40564:	mov	fp, r1
   40568:	mov	sl, r2
   4056c:	str	lr, [sp, #32]
   40570:	sub	sp, sp, #1056	; 0x420
   40574:	sub	sp, sp, #12
   40578:	bls	40958 <__assert_fail@plt+0x2e364>
   4057c:	add	r6, sp, #40	; 0x28
   40580:	mov	r1, r3
   40584:	sub	r2, r6, #4
   40588:	mov	r0, sl
   4058c:	bl	4041c <__assert_fail@plt+0x2de28>
   40590:	ldr	r3, [sp, #36]	; 0x24
   40594:	str	r3, [sp]
   40598:	str	r0, [sp, #4]
   4059c:	add	r2, sp, #1056	; 0x420
   405a0:	sub	r3, r6, #4
   405a4:	add	r2, r2, #4
   405a8:	str	r4, [r3, #4]!
   405ac:	cmp	r2, r3
   405b0:	bne	405a8 <__assert_fail@plt+0x2dfb4>
   405b4:	ldr	r3, [sp]
   405b8:	cmp	r4, #0
   405bc:	add	r1, sl, r3
   405c0:	beq	40778 <__assert_fail@plt+0x2e184>
   405c4:	sub	r3, r4, #1
   405c8:	sub	r2, sl, #1
   405cc:	add	ip, sl, r3
   405d0:	str	r3, [sp, #8]
   405d4:	ldrb	r0, [r2, #1]!
   405d8:	add	lr, sp, #1056	; 0x420
   405dc:	add	lr, lr, #8
   405e0:	mvn	r3, r2
   405e4:	add	r0, lr, r0, lsl #2
   405e8:	cmp	r2, ip
   405ec:	add	r3, r3, r4
   405f0:	add	r3, sl, r3
   405f4:	str	r3, [r0, #-1024]	; 0xfffffc00
   405f8:	bne	405d4 <__assert_fail@plt+0x2dfe0>
   405fc:	mov	r0, sl
   40600:	ldr	r2, [sp, #4]
   40604:	bl	12084 <memcmp@plt>
   40608:	cmp	r0, #0
   4060c:	beq	407bc <__assert_fail@plt+0x2e1c8>
   40610:	ldr	r2, [sp, #4]
   40614:	sub	r8, r4, #2
   40618:	mov	r7, #0
   4061c:	add	r8, r8, sl
   40620:	rsb	r9, sl, #1
   40624:	sub	r3, r4, r2
   40628:	sub	r1, r2, #1
   4062c:	cmp	r3, r2
   40630:	movcc	r3, r2
   40634:	str	r1, [sp, #16]
   40638:	add	r1, sl, r1
   4063c:	add	r3, r3, #1
   40640:	str	r1, [sp, #12]
   40644:	str	r3, [sp, #20]
   40648:	sub	r3, r4, #1
   4064c:	str	r3, [sp, #4]
   40650:	mov	r3, r2
   40654:	add	r2, sl, r2
   40658:	str	r2, [sp]
   4065c:	rsb	r2, r3, #1
   40660:	str	r2, [sp, #8]
   40664:	mov	r2, fp
   40668:	mov	fp, r3
   4066c:	b	40674 <__assert_fail@plt+0x2e080>
   40670:	mov	r2, r6
   40674:	add	r6, r7, r4
   40678:	add	r0, r5, r2
   4067c:	mov	r1, #0
   40680:	sub	r2, r6, r2
   40684:	bl	123d8 <memchr@plt>
   40688:	adds	r2, r6, #0
   4068c:	movne	r2, #1
   40690:	cmp	r0, #0
   40694:	moveq	r0, r2
   40698:	movne	r0, #0
   4069c:	cmp	r0, #0
   406a0:	beq	4078c <__assert_fail@plt+0x2e198>
   406a4:	add	r2, r5, r6
   406a8:	add	r3, sp, #1056	; 0x420
   406ac:	ldrb	r2, [r2, #-1]
   406b0:	add	r3, r3, #8
   406b4:	add	r2, r3, r2, lsl #2
   406b8:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   406bc:	cmp	r2, #0
   406c0:	addne	r7, r7, r2
   406c4:	bne	40670 <__assert_fail@plt+0x2e07c>
   406c8:	ldr	r3, [sp, #4]
   406cc:	cmp	fp, r3
   406d0:	bcs	40718 <__assert_fail@plt+0x2e124>
   406d4:	ldr	r3, [sp]
   406d8:	add	r2, r7, fp
   406dc:	add	r1, r5, r2
   406e0:	ldrb	r2, [r5, r2]
   406e4:	ldrb	r0, [r3]
   406e8:	cmp	r2, r0
   406ec:	movne	lr, fp
   406f0:	bne	40768 <__assert_fail@plt+0x2e174>
   406f4:	ldr	r2, [sp]
   406f8:	b	4070c <__assert_fail@plt+0x2e118>
   406fc:	ldrb	r0, [r2, #1]!
   40700:	ldrb	r3, [r1, #1]!
   40704:	cmp	r0, r3
   40708:	bne	40768 <__assert_fail@plt+0x2e174>
   4070c:	cmp	r8, r2
   40710:	add	lr, r9, r2
   40714:	bne	406fc <__assert_fail@plt+0x2e108>
   40718:	ldr	r3, [sp, #16]
   4071c:	cmn	r3, #1
   40720:	beq	40760 <__assert_fail@plt+0x2e16c>
   40724:	add	r2, r7, r3
   40728:	ldr	r3, [sp, #12]
   4072c:	add	r1, r5, r2
   40730:	ldrb	r2, [r5, r2]
   40734:	ldrb	r0, [r3]
   40738:	cmp	r2, r0
   4073c:	ldreq	r2, [sp, #12]
   40740:	beq	40758 <__assert_fail@plt+0x2e164>
   40744:	b	407b0 <__assert_fail@plt+0x2e1bc>
   40748:	ldrb	r0, [r2, #-1]!
   4074c:	ldrb	r3, [r1, #-1]!
   40750:	cmp	r0, r3
   40754:	bne	407b0 <__assert_fail@plt+0x2e1bc>
   40758:	cmp	sl, r2
   4075c:	bne	40748 <__assert_fail@plt+0x2e154>
   40760:	add	r0, r5, r7
   40764:	b	40790 <__assert_fail@plt+0x2e19c>
   40768:	ldr	r3, [sp, #8]
   4076c:	add	r7, r3, r7
   40770:	add	r7, lr, r7
   40774:	b	40670 <__assert_fail@plt+0x2e07c>
   40778:	mov	r0, sl
   4077c:	ldr	r2, [sp, #4]
   40780:	bl	12084 <memcmp@plt>
   40784:	cmp	r0, #0
   40788:	bne	40610 <__assert_fail@plt+0x2e01c>
   4078c:	mov	r0, #0
   40790:	add	sp, sp, #1056	; 0x420
   40794:	add	sp, sp, #12
   40798:	ldrd	r4, [sp]
   4079c:	ldrd	r6, [sp, #8]
   407a0:	ldrd	r8, [sp, #16]
   407a4:	ldrd	sl, [sp, #24]
   407a8:	add	sp, sp, #32
   407ac:	pop	{pc}		; (ldr pc, [sp], #4)
   407b0:	ldr	r3, [sp, #20]
   407b4:	add	r7, r7, r3
   407b8:	b	40670 <__assert_fail@plt+0x2e07c>
   407bc:	ldr	r2, [sp, #4]
   407c0:	sub	r8, r4, #2
   407c4:	rsb	r9, sl, #1
   407c8:	add	r8, sl, r8
   407cc:	mov	r7, r0
   407d0:	str	sl, [sp, #12]
   407d4:	sub	r3, r2, #1
   407d8:	str	r3, [sp, #28]
   407dc:	add	r3, sl, r3
   407e0:	mov	sl, r0
   407e4:	str	r3, [sp, #24]
   407e8:	ldr	r3, [sp]
   407ec:	sub	r3, r4, r3
   407f0:	str	r3, [sp, #20]
   407f4:	rsb	r3, r2, #1
   407f8:	mov	r2, fp
   407fc:	str	r3, [sp, #16]
   40800:	b	40820 <__assert_fail@plt+0x2e22c>
   40804:	ldr	r2, [sp]
   40808:	cmp	sl, #0
   4080c:	cmpne	r3, r2
   40810:	mov	sl, #0
   40814:	ldrcc	r3, [sp, #20]
   40818:	add	r7, r7, r3
   4081c:	mov	r2, r6
   40820:	add	r6, r7, r4
   40824:	add	r0, r5, r2
   40828:	mov	r1, #0
   4082c:	sub	r2, r6, r2
   40830:	bl	123d8 <memchr@plt>
   40834:	adds	r3, r6, #0
   40838:	movne	r3, #1
   4083c:	cmp	r0, #0
   40840:	moveq	r0, r3
   40844:	movne	r0, #0
   40848:	cmp	r0, #0
   4084c:	beq	4078c <__assert_fail@plt+0x2e198>
   40850:	add	r3, r5, r6
   40854:	add	r2, sp, #1056	; 0x420
   40858:	ldrb	r3, [r3, #-1]
   4085c:	add	r2, r2, #8
   40860:	add	r3, r2, r3, lsl #2
   40864:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   40868:	cmp	r3, #0
   4086c:	bne	40804 <__assert_fail@plt+0x2e210>
   40870:	ldr	r3, [sp, #4]
   40874:	cmp	sl, r3
   40878:	movcc	r0, r3
   4087c:	ldr	r3, [sp, #8]
   40880:	movcs	r0, sl
   40884:	cmp	r0, r3
   40888:	bcs	408cc <__assert_fail@plt+0x2e2d8>
   4088c:	ldr	r3, [sp, #12]
   40890:	add	r1, r7, r0
   40894:	add	r2, r5, r1
   40898:	ldrb	r1, [r5, r1]
   4089c:	ldrb	ip, [r3, r0]
   408a0:	add	r3, r3, r0
   408a4:	cmp	ip, r1
   408a8:	beq	408c0 <__assert_fail@plt+0x2e2cc>
   408ac:	b	40944 <__assert_fail@plt+0x2e350>
   408b0:	ldrb	ip, [r3, #1]!
   408b4:	ldrb	r1, [r2, #1]!
   408b8:	cmp	ip, r1
   408bc:	bne	40944 <__assert_fail@plt+0x2e350>
   408c0:	cmp	r8, r3
   408c4:	add	r0, r9, r3
   408c8:	bne	408b0 <__assert_fail@plt+0x2e2bc>
   408cc:	ldr	r3, [sp, #4]
   408d0:	cmp	sl, r3
   408d4:	bcs	40974 <__assert_fail@plt+0x2e380>
   408d8:	ldr	r3, [sp, #28]
   408dc:	add	r2, r7, r3
   408e0:	ldr	r3, [sp, #24]
   408e4:	ldrb	r1, [r3]
   408e8:	add	r3, r5, r2
   408ec:	ldrb	r2, [r5, r2]
   408f0:	cmp	r1, r2
   408f4:	bne	40974 <__assert_fail@plt+0x2e380>
   408f8:	add	ip, r7, sl
   408fc:	add	fp, r5, r7
   40900:	ldr	r2, [sp, #24]
   40904:	add	ip, ip, r5
   40908:	b	4091c <__assert_fail@plt+0x2e328>
   4090c:	ldrb	r0, [r2, #-1]!
   40910:	ldrb	r1, [r3, #-1]!
   40914:	cmp	r0, r1
   40918:	bne	40928 <__assert_fail@plt+0x2e334>
   4091c:	cmp	ip, r3
   40920:	sub	lr, r3, fp
   40924:	bne	4090c <__assert_fail@plt+0x2e318>
   40928:	add	sl, sl, #1
   4092c:	cmp	sl, lr
   40930:	bhi	40760 <__assert_fail@plt+0x2e16c>
   40934:	ldr	r3, [sp]
   40938:	ldr	sl, [sp, #20]
   4093c:	add	r7, r7, r3
   40940:	b	4081c <__assert_fail@plt+0x2e228>
   40944:	ldr	r3, [sp, #16]
   40948:	mov	sl, #0
   4094c:	add	r7, r3, r7
   40950:	add	r7, r0, r7
   40954:	b	4081c <__assert_fail@plt+0x2e228>
   40958:	mov	r3, #1
   4095c:	sub	r2, r4, #1
   40960:	add	r6, sp, #40	; 0x28
   40964:	str	r3, [sp]
   40968:	str	r2, [sp, #4]
   4096c:	str	r3, [sp, #36]	; 0x24
   40970:	b	4059c <__assert_fail@plt+0x2dfa8>
   40974:	ldr	lr, [sp, #4]
   40978:	b	40928 <__assert_fail@plt+0x2e334>
   4097c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   40980:	strd	r6, [sp, #8]
   40984:	strd	r8, [sp, #16]
   40988:	strd	sl, [sp, #24]
   4098c:	str	lr, [sp, #32]
   40990:	sub	sp, sp, #44	; 0x2c
   40994:	ldrb	r4, [r0]
   40998:	ldrb	r3, [r1]
   4099c:	cmp	r4, #0
   409a0:	beq	40d5c <__assert_fail@plt+0x2e768>
   409a4:	cmp	r3, #0
   409a8:	beq	40a74 <__assert_fail@plt+0x2e480>
   409ac:	mov	r8, r0
   409b0:	add	r2, r1, #1
   409b4:	mov	ip, r3
   409b8:	mov	lr, #1
   409bc:	b	409c8 <__assert_fail@plt+0x2e3d4>
   409c0:	cmp	ip, #0
   409c4:	beq	409f0 <__assert_fail@plt+0x2e3fc>
   409c8:	cmp	ip, r4
   409cc:	movne	lr, #0
   409d0:	andeq	lr, lr, #1
   409d4:	ldrb	r4, [r8, #1]!
   409d8:	mov	r5, r2
   409dc:	ldrb	ip, [r2], #1
   409e0:	cmp	r4, #0
   409e4:	bne	409c0 <__assert_fail@plt+0x2e3cc>
   409e8:	cmp	ip, #0
   409ec:	bne	40a54 <__assert_fail@plt+0x2e460>
   409f0:	cmp	lr, #0
   409f4:	bne	40a74 <__assert_fail@plt+0x2e480>
   409f8:	mov	r7, r1
   409fc:	mov	r6, r0
   40a00:	mov	r1, r3
   40a04:	add	r0, r0, #1
   40a08:	bl	1230c <strchr@plt>
   40a0c:	subs	r4, r0, #0
   40a10:	sub	r7, r5, r7
   40a14:	beq	40a54 <__assert_fail@plt+0x2e460>
   40a18:	cmp	r7, #1
   40a1c:	beq	40a54 <__assert_fail@plt+0x2e460>
   40a20:	add	r6, r6, r7
   40a24:	sub	r5, r5, r7
   40a28:	cmp	r6, r4
   40a2c:	subcs	r6, r6, r4
   40a30:	movcc	r6, #1
   40a34:	cmp	r7, #31
   40a38:	bls	40a7c <__assert_fail@plt+0x2e488>
   40a3c:	mov	r0, r4
   40a40:	mov	r3, r7
   40a44:	mov	r2, r5
   40a48:	mov	r1, r6
   40a4c:	bl	40548 <__assert_fail@plt+0x2df54>
   40a50:	mov	r4, r0
   40a54:	mov	r0, r4
   40a58:	add	sp, sp, #44	; 0x2c
   40a5c:	ldrd	r4, [sp]
   40a60:	ldrd	r6, [sp, #8]
   40a64:	ldrd	r8, [sp, #16]
   40a68:	ldrd	sl, [sp, #24]
   40a6c:	add	sp, sp, #32
   40a70:	pop	{pc}		; (ldr pc, [sp], #4)
   40a74:	mov	r4, r0
   40a78:	b	40a54 <__assert_fail@plt+0x2e460>
   40a7c:	cmp	r7, #2
   40a80:	bls	40d6c <__assert_fail@plt+0x2e778>
   40a84:	add	r2, sp, #36	; 0x24
   40a88:	mov	r1, r7
   40a8c:	mov	r0, r5
   40a90:	bl	4041c <__assert_fail@plt+0x2de28>
   40a94:	ldr	r3, [sp, #36]	; 0x24
   40a98:	mov	r8, r0
   40a9c:	str	r3, [sp, #16]
   40aa0:	ldr	r3, [sp, #16]
   40aa4:	mov	r2, r8
   40aa8:	mov	r0, r5
   40aac:	add	r1, r5, r3
   40ab0:	bl	12084 <memcmp@plt>
   40ab4:	cmp	r0, #0
   40ab8:	bne	40c1c <__assert_fail@plt+0x2e628>
   40abc:	sub	r2, r8, #1
   40ac0:	mov	r3, r8
   40ac4:	str	r7, [sp, #4]
   40ac8:	sub	r8, r7, #1
   40acc:	rsb	r9, r5, #1
   40ad0:	str	r5, [sp, #8]
   40ad4:	str	r2, [sp, #20]
   40ad8:	add	r2, r5, r2
   40adc:	add	r8, r8, r5
   40ae0:	mov	sl, r0
   40ae4:	mov	r5, r0
   40ae8:	str	r2, [sp, #28]
   40aec:	ldr	r2, [sp, #16]
   40af0:	sub	r2, r7, r2
   40af4:	mov	r7, r3
   40af8:	str	r2, [sp, #24]
   40afc:	rsb	r2, r3, #1
   40b00:	str	r2, [sp, #12]
   40b04:	mov	r2, r6
   40b08:	ldr	r3, [sp, #4]
   40b0c:	add	r0, r4, r2
   40b10:	mov	r1, #0
   40b14:	add	fp, r3, sl
   40b18:	sub	r2, fp, r2
   40b1c:	bl	123d8 <memchr@plt>
   40b20:	clz	r0, r0
   40b24:	cmp	fp, #0
   40b28:	lsr	r0, r0, #5
   40b2c:	moveq	r0, #0
   40b30:	cmp	r0, #0
   40b34:	beq	40a74 <__assert_fail@plt+0x2e480>
   40b38:	ldr	r3, [sp, #4]
   40b3c:	cmp	r7, r5
   40b40:	movcs	r0, r7
   40b44:	movcc	r0, r5
   40b48:	cmp	r3, r0
   40b4c:	bls	40b90 <__assert_fail@plt+0x2e59c>
   40b50:	ldr	r3, [sp, #8]
   40b54:	add	r1, r0, sl
   40b58:	add	r2, r4, r1
   40b5c:	ldrb	r1, [r4, r1]
   40b60:	ldrb	ip, [r3, r0]
   40b64:	add	r3, r3, r0
   40b68:	cmp	r1, ip
   40b6c:	beq	40b84 <__assert_fail@plt+0x2e590>
   40b70:	b	40c08 <__assert_fail@plt+0x2e614>
   40b74:	ldrb	ip, [r3, #1]!
   40b78:	ldrb	r1, [r2, #1]!
   40b7c:	cmp	ip, r1
   40b80:	bne	40c08 <__assert_fail@plt+0x2e614>
   40b84:	cmp	r8, r3
   40b88:	add	r0, r9, r3
   40b8c:	bne	40b74 <__assert_fail@plt+0x2e580>
   40b90:	cmp	r7, r5
   40b94:	bls	40d84 <__assert_fail@plt+0x2e790>
   40b98:	ldr	r3, [sp, #20]
   40b9c:	ldr	r0, [sp, #28]
   40ba0:	add	r2, sl, r3
   40ba4:	add	r3, r4, r2
   40ba8:	ldrb	r2, [r4, r2]
   40bac:	ldrb	r1, [r0]
   40bb0:	cmp	r1, r2
   40bb4:	bne	40d84 <__assert_fail@plt+0x2e790>
   40bb8:	add	ip, r5, sl
   40bbc:	mov	r2, r0
   40bc0:	add	ip, ip, r4
   40bc4:	add	r6, r4, sl
   40bc8:	b	40bdc <__assert_fail@plt+0x2e5e8>
   40bcc:	ldrb	r0, [r2, #-1]!
   40bd0:	ldrb	r1, [r3, #-1]!
   40bd4:	cmp	r0, r1
   40bd8:	bne	40be8 <__assert_fail@plt+0x2e5f4>
   40bdc:	cmp	ip, r3
   40be0:	sub	lr, r3, r6
   40be4:	bne	40bcc <__assert_fail@plt+0x2e5d8>
   40be8:	add	r5, r5, #1
   40bec:	cmp	r5, lr
   40bf0:	bhi	40d34 <__assert_fail@plt+0x2e740>
   40bf4:	ldr	r3, [sp, #16]
   40bf8:	ldr	r5, [sp, #24]
   40bfc:	add	sl, sl, r3
   40c00:	mov	r2, fp
   40c04:	b	40b08 <__assert_fail@plt+0x2e514>
   40c08:	ldr	r3, [sp, #12]
   40c0c:	mov	r5, #0
   40c10:	add	sl, r3, sl
   40c14:	add	sl, r0, sl
   40c18:	b	40c00 <__assert_fail@plt+0x2e60c>
   40c1c:	sub	r3, r7, r8
   40c20:	mov	r2, r8
   40c24:	cmp	r3, r8
   40c28:	sub	r1, r8, #1
   40c2c:	movcc	r3, r2
   40c30:	sub	r8, r7, #1
   40c34:	add	r3, r3, #1
   40c38:	add	r8, r8, r5
   40c3c:	str	r1, [sp, #12]
   40c40:	mov	sl, #0
   40c44:	add	r1, r5, r1
   40c48:	str	r3, [sp, #16]
   40c4c:	mov	r3, r2
   40c50:	add	r2, r5, r2
   40c54:	rsb	r9, r5, #1
   40c58:	str	r2, [sp, #4]
   40c5c:	rsb	r2, r3, #1
   40c60:	str	r2, [sp, #8]
   40c64:	mov	r2, r6
   40c68:	mov	r6, r3
   40c6c:	str	r1, [sp, #20]
   40c70:	add	fp, r7, sl
   40c74:	add	r0, r4, r2
   40c78:	mov	r1, #0
   40c7c:	sub	r2, fp, r2
   40c80:	bl	123d8 <memchr@plt>
   40c84:	clz	r0, r0
   40c88:	cmp	fp, #0
   40c8c:	lsr	r0, r0, #5
   40c90:	moveq	r0, #0
   40c94:	cmp	r0, #0
   40c98:	beq	40a74 <__assert_fail@plt+0x2e480>
   40c9c:	cmp	r7, r6
   40ca0:	bls	40ce8 <__assert_fail@plt+0x2e6f4>
   40ca4:	ldr	r3, [sp, #4]
   40ca8:	add	r2, r6, sl
   40cac:	add	r1, r4, r2
   40cb0:	ldrb	r2, [r4, r2]
   40cb4:	ldrb	r0, [r3]
   40cb8:	cmp	r2, r0
   40cbc:	movne	lr, r6
   40cc0:	bne	40d3c <__assert_fail@plt+0x2e748>
   40cc4:	ldr	r2, [sp, #4]
   40cc8:	b	40cdc <__assert_fail@plt+0x2e6e8>
   40ccc:	ldrb	r0, [r2, #1]!
   40cd0:	ldrb	r3, [r1, #1]!
   40cd4:	cmp	r0, r3
   40cd8:	bne	40d3c <__assert_fail@plt+0x2e748>
   40cdc:	cmp	r2, r8
   40ce0:	add	lr, r9, r2
   40ce4:	bne	40ccc <__assert_fail@plt+0x2e6d8>
   40ce8:	ldr	r3, [sp, #12]
   40cec:	cmn	r3, #1
   40cf0:	beq	40d34 <__assert_fail@plt+0x2e740>
   40cf4:	ldr	r3, [sp, #12]
   40cf8:	add	r2, sl, r3
   40cfc:	ldr	r3, [sp, #20]
   40d00:	add	r1, r4, r2
   40d04:	ldrb	r2, [r4, r2]
   40d08:	ldrb	r0, [r3]
   40d0c:	cmp	r2, r0
   40d10:	bne	40d50 <__assert_fail@plt+0x2e75c>
   40d14:	mov	r2, r3
   40d18:	b	40d2c <__assert_fail@plt+0x2e738>
   40d1c:	ldrb	r0, [r2, #-1]!
   40d20:	ldrb	r3, [r1, #-1]!
   40d24:	cmp	r0, r3
   40d28:	bne	40d50 <__assert_fail@plt+0x2e75c>
   40d2c:	cmp	r5, r2
   40d30:	bne	40d1c <__assert_fail@plt+0x2e728>
   40d34:	add	r4, r4, sl
   40d38:	b	40a54 <__assert_fail@plt+0x2e460>
   40d3c:	ldr	r3, [sp, #8]
   40d40:	add	sl, r3, sl
   40d44:	add	sl, lr, sl
   40d48:	mov	r2, fp
   40d4c:	b	40c70 <__assert_fail@plt+0x2e67c>
   40d50:	ldr	r3, [sp, #16]
   40d54:	add	sl, sl, r3
   40d58:	b	40d48 <__assert_fail@plt+0x2e754>
   40d5c:	cmp	r3, #0
   40d60:	moveq	r4, r0
   40d64:	movne	r4, #0
   40d68:	b	40a54 <__assert_fail@plt+0x2e460>
   40d6c:	mov	r3, #1
   40d70:	sub	r2, r7, #1
   40d74:	mov	r8, r2
   40d78:	str	r3, [sp, #16]
   40d7c:	str	r3, [sp, #36]	; 0x24
   40d80:	b	40aa0 <__assert_fail@plt+0x2e4ac>
   40d84:	mov	lr, r7
   40d88:	b	40be8 <__assert_fail@plt+0x2e5f4>
   40d8c:	subs	r1, r0, #0
   40d90:	movw	r0, #31488	; 0x7b00
   40d94:	movt	r0, #4
   40d98:	beq	40da4 <__assert_fail@plt+0x2e7b0>
   40d9c:	mov	r2, #1
   40da0:	b	12318 <setenv@plt>
   40da4:	b	12570 <unsetenv@plt>
   40da8:	cmp	r0, #0
   40dac:	bxeq	lr
   40db0:	str	r4, [sp, #-8]!
   40db4:	str	lr, [sp, #4]
   40db8:	ldr	r4, [r0]
   40dbc:	bl	2f668 <__assert_fail@plt+0x1d074>
   40dc0:	subs	r0, r4, #0
   40dc4:	bne	40db8 <__assert_fail@plt+0x2e7c4>
   40dc8:	ldr	r4, [sp]
   40dcc:	add	sp, sp, #4
   40dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   40dd4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   40dd8:	mov	r5, r0
   40ddc:	strd	r6, [sp, #8]
   40de0:	str	r8, [sp, #16]
   40de4:	str	lr, [sp, #20]
   40de8:	bl	12348 <__errno_location@plt>
   40dec:	mov	r4, r0
   40df0:	ldrb	r0, [r5, #4]
   40df4:	ldr	r6, [r4]
   40df8:	cmp	r0, #0
   40dfc:	addne	r0, r5, #5
   40e00:	bl	40d8c <__assert_fail@plt+0x2e798>
   40e04:	cmp	r0, #0
   40e08:	beq	40e38 <__assert_fail@plt+0x2e844>
   40e0c:	ldr	r6, [r4]
   40e10:	mov	r7, #0
   40e14:	mov	r0, r5
   40e18:	bl	40da8 <__assert_fail@plt+0x2e7b4>
   40e1c:	mov	r0, r7
   40e20:	ldr	r8, [sp, #16]
   40e24:	str	r6, [r4]
   40e28:	ldrd	r4, [sp]
   40e2c:	ldrd	r6, [sp, #8]
   40e30:	add	sp, sp, #20
   40e34:	pop	{pc}		; (ldr pc, [sp], #4)
   40e38:	mov	r7, #1
   40e3c:	bl	12144 <tzset@plt>
   40e40:	b	40e14 <__assert_fail@plt+0x2e820>
   40e44:	strd	r4, [sp, #-24]!	; 0xffffffe8
   40e48:	strd	r6, [sp, #8]
   40e4c:	subs	r6, r0, #0
   40e50:	str	r8, [sp, #16]
   40e54:	str	lr, [sp, #20]
   40e58:	beq	40ec4 <__assert_fail@plt+0x2e8d0>
   40e5c:	bl	12300 <strlen@plt>
   40e60:	add	r5, r0, #1
   40e64:	cmp	r5, #58	; 0x3a
   40e68:	movcs	r0, r5
   40e6c:	movcc	r0, #58	; 0x3a
   40e70:	add	r0, r0, #9
   40e74:	bic	r0, r0, #3
   40e78:	bl	31b54 <__assert_fail@plt+0x1f560>
   40e7c:	subs	r4, r0, #0
   40e80:	beq	40eac <__assert_fail@plt+0x2e8b8>
   40e84:	mov	r7, #0
   40e88:	mov	ip, #1
   40e8c:	add	r3, r4, #5
   40e90:	mov	r1, r6
   40e94:	mov	r0, r3
   40e98:	mov	r2, r5
   40e9c:	str	r7, [r4]
   40ea0:	strh	ip, [r4, #4]
   40ea4:	bl	12024 <memcpy@plt>
   40ea8:	strb	r7, [r0, r5]
   40eac:	mov	r0, r4
   40eb0:	ldrd	r4, [sp]
   40eb4:	ldrd	r6, [sp, #8]
   40eb8:	ldr	r8, [sp, #16]
   40ebc:	add	sp, sp, #20
   40ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   40ec4:	mov	r0, #64	; 0x40
   40ec8:	bl	31b54 <__assert_fail@plt+0x1f560>
   40ecc:	subs	r4, r0, #0
   40ed0:	strne	r6, [r4]
   40ed4:	strhne	r6, [r4, #4]
   40ed8:	b	40eac <__assert_fail@plt+0x2e8b8>
   40edc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   40ee0:	strd	r6, [sp, #8]
   40ee4:	ldr	r6, [r1, #40]	; 0x28
   40ee8:	str	r8, [sp, #16]
   40eec:	str	lr, [sp, #20]
   40ef0:	cmp	r6, #0
   40ef4:	beq	40fd0 <__assert_fail@plt+0x2e9dc>
   40ef8:	cmp	r1, r6
   40efc:	mov	r7, r1
   40f00:	mov	r5, r0
   40f04:	bhi	40f14 <__assert_fail@plt+0x2e920>
   40f08:	add	r3, r1, #44	; 0x2c
   40f0c:	cmp	r6, r3
   40f10:	bcc	40fd0 <__assert_fail@plt+0x2e9dc>
   40f14:	ldrb	r3, [r6]
   40f18:	cmp	r3, #0
   40f1c:	addne	r4, r5, #5
   40f20:	beq	40fc4 <__assert_fail@plt+0x2e9d0>
   40f24:	mov	r1, r6
   40f28:	mov	r0, r4
   40f2c:	bl	11f40 <strcmp@plt>
   40f30:	cmp	r0, #0
   40f34:	add	r2, r5, #5
   40f38:	mov	r0, r4
   40f3c:	beq	40fa8 <__assert_fail@plt+0x2e9b4>
   40f40:	ldrb	r3, [r4]
   40f44:	cmp	r3, #0
   40f48:	bne	40f60 <__assert_fail@plt+0x2e96c>
   40f4c:	cmp	r4, r2
   40f50:	bne	40fd8 <__assert_fail@plt+0x2e9e4>
   40f54:	ldrb	r3, [r5, #4]
   40f58:	cmp	r3, #0
   40f5c:	beq	40fd8 <__assert_fail@plt+0x2e9e4>
   40f60:	bl	12300 <strlen@plt>
   40f64:	add	r0, r0, #1
   40f68:	ldrb	r3, [r4, r0]!
   40f6c:	cmp	r3, #0
   40f70:	bne	40f24 <__assert_fail@plt+0x2e930>
   40f74:	ldr	r3, [r5]
   40f78:	cmp	r3, #0
   40f7c:	addne	r4, r3, #5
   40f80:	movne	r5, r3
   40f84:	b	40f24 <__assert_fail@plt+0x2e930>
   40f88:	mov	r0, r6
   40f8c:	bl	40e44 <__assert_fail@plt+0x2e850>
   40f90:	cmp	r0, #0
   40f94:	str	r0, [r5]
   40f98:	beq	40fb0 <__assert_fail@plt+0x2e9bc>
   40f9c:	mov	r3, #0
   40fa0:	add	r4, r0, #5
   40fa4:	strb	r3, [r0, #4]
   40fa8:	mov	r0, #1
   40fac:	str	r4, [r7, #40]	; 0x28
   40fb0:	ldrd	r4, [sp]
   40fb4:	ldrd	r6, [sp, #8]
   40fb8:	ldr	r8, [sp, #16]
   40fbc:	add	sp, sp, #20
   40fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   40fc4:	movw	r4, #17776	; 0x4570
   40fc8:	movt	r4, #4
   40fcc:	b	40fa8 <__assert_fail@plt+0x2e9b4>
   40fd0:	mov	r0, #1
   40fd4:	b	40fb0 <__assert_fail@plt+0x2e9bc>
   40fd8:	mov	r0, r6
   40fdc:	bl	12300 <strlen@plt>
   40fe0:	add	r3, r5, #64	; 0x40
   40fe4:	add	r8, r0, #1
   40fe8:	sub	r3, r3, r4
   40fec:	cmp	r3, r8
   40ff0:	ble	40f88 <__assert_fail@plt+0x2e994>
   40ff4:	mov	r1, r6
   40ff8:	mov	r2, r8
   40ffc:	mov	r0, r4
   41000:	bl	12024 <memcpy@plt>
   41004:	mov	r3, #0
   41008:	strb	r3, [r4, r8]
   4100c:	b	40fa8 <__assert_fail@plt+0x2e9b4>
   41010:	strd	r4, [sp, #-16]!
   41014:	mov	r4, r0
   41018:	movw	r0, #31488	; 0x7b00
   4101c:	movt	r0, #4
   41020:	str	r6, [sp, #8]
   41024:	str	lr, [sp, #12]
   41028:	bl	12228 <getenv@plt>
   4102c:	subs	r5, r0, #0
   41030:	ldrb	r3, [r4, #4]
   41034:	beq	410bc <__assert_fail@plt+0x2eac8>
   41038:	cmp	r3, #0
   4103c:	bne	41090 <__assert_fail@plt+0x2ea9c>
   41040:	mov	r0, r5
   41044:	bl	40e44 <__assert_fail@plt+0x2e850>
   41048:	subs	r5, r0, #0
   4104c:	beq	410a8 <__assert_fail@plt+0x2eab4>
   41050:	ldrb	r0, [r4, #4]
   41054:	cmp	r0, #0
   41058:	addne	r0, r4, #5
   4105c:	bl	40d8c <__assert_fail@plt+0x2e798>
   41060:	cmp	r0, #0
   41064:	beq	410c8 <__assert_fail@plt+0x2ead4>
   41068:	bl	12348 <__errno_location@plt>
   4106c:	cmp	r5, #1
   41070:	mov	r4, r0
   41074:	ldr	r6, [r0]
   41078:	beq	41084 <__assert_fail@plt+0x2ea90>
   4107c:	mov	r0, r5
   41080:	bl	40da8 <__assert_fail@plt+0x2e7b4>
   41084:	mov	r5, #0
   41088:	str	r6, [r4]
   4108c:	b	410a8 <__assert_fail@plt+0x2eab4>
   41090:	mov	r1, r5
   41094:	add	r0, r4, #5
   41098:	bl	11f40 <strcmp@plt>
   4109c:	cmp	r0, #0
   410a0:	bne	41040 <__assert_fail@plt+0x2ea4c>
   410a4:	mov	r5, #1
   410a8:	mov	r0, r5
   410ac:	ldrd	r4, [sp]
   410b0:	ldr	r6, [sp, #8]
   410b4:	add	sp, sp, #12
   410b8:	pop	{pc}		; (ldr pc, [sp], #4)
   410bc:	cmp	r3, #0
   410c0:	beq	410a4 <__assert_fail@plt+0x2eab0>
   410c4:	b	41040 <__assert_fail@plt+0x2ea4c>
   410c8:	bl	12144 <tzset@plt>
   410cc:	b	410a8 <__assert_fail@plt+0x2eab4>
   410d0:	cmp	r0, #1
   410d4:	beq	410dc <__assert_fail@plt+0x2eae8>
   410d8:	b	40da8 <__assert_fail@plt+0x2e7b4>
   410dc:	bx	lr
   410e0:	subs	ip, r0, #0
   410e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   410e8:	mov	r5, r1
   410ec:	strd	r6, [sp, #8]
   410f0:	str	r8, [sp, #16]
   410f4:	str	lr, [sp, #20]
   410f8:	beq	41184 <__assert_fail@plt+0x2eb90>
   410fc:	mov	r4, r2
   41100:	mov	r6, ip
   41104:	bl	41010 <__assert_fail@plt+0x2ea1c>
   41108:	subs	r7, r0, #0
   4110c:	beq	41158 <__assert_fail@plt+0x2eb64>
   41110:	mov	r0, r5
   41114:	mov	r1, r4
   41118:	bl	120fc <localtime_r@plt>
   4111c:	cmp	r0, #0
   41120:	beq	41148 <__assert_fail@plt+0x2eb54>
   41124:	mov	r0, r6
   41128:	mov	r1, r4
   4112c:	bl	40edc <__assert_fail@plt+0x2e8e8>
   41130:	cmp	r0, #0
   41134:	beq	41148 <__assert_fail@plt+0x2eb54>
   41138:	cmp	r7, #1
   4113c:	bne	41170 <__assert_fail@plt+0x2eb7c>
   41140:	mov	r0, r4
   41144:	b	4115c <__assert_fail@plt+0x2eb68>
   41148:	cmp	r7, #1
   4114c:	beq	41158 <__assert_fail@plt+0x2eb64>
   41150:	mov	r0, r7
   41154:	bl	40dd4 <__assert_fail@plt+0x2e7e0>
   41158:	mov	r0, #0
   4115c:	ldrd	r4, [sp]
   41160:	ldrd	r6, [sp, #8]
   41164:	ldr	r8, [sp, #16]
   41168:	add	sp, sp, #20
   4116c:	pop	{pc}		; (ldr pc, [sp], #4)
   41170:	mov	r0, r7
   41174:	bl	40dd4 <__assert_fail@plt+0x2e7e0>
   41178:	cmp	r0, #0
   4117c:	bne	41140 <__assert_fail@plt+0x2eb4c>
   41180:	b	41158 <__assert_fail@plt+0x2eb64>
   41184:	mov	r0, r5
   41188:	mov	r1, r2
   4118c:	ldrd	r4, [sp]
   41190:	ldrd	r6, [sp, #8]
   41194:	ldr	r8, [sp, #16]
   41198:	ldr	lr, [sp, #20]
   4119c:	add	sp, sp, #24
   411a0:	b	11f04 <gmtime_r@plt>
   411a4:	strd	r4, [sp, #-20]!	; 0xffffffec
   411a8:	subs	r5, r0, #0
   411ac:	strd	r6, [sp, #8]
   411b0:	mov	r6, r1
   411b4:	str	lr, [sp, #16]
   411b8:	sub	sp, sp, #52	; 0x34
   411bc:	beq	412ac <__assert_fail@plt+0x2ecb8>
   411c0:	bl	41010 <__assert_fail@plt+0x2ea1c>
   411c4:	subs	r4, r0, #0
   411c8:	beq	4122c <__assert_fail@plt+0x2ec38>
   411cc:	ldr	r3, [r6]
   411d0:	mvn	r2, #0
   411d4:	add	r0, sp, #4
   411d8:	ldr	r1, [r6, #4]
   411dc:	str	r3, [sp, #4]
   411e0:	str	r2, [sp, #32]
   411e4:	ldrd	r2, [r6, #8]
   411e8:	str	r1, [sp, #8]
   411ec:	ldr	r1, [r6, #16]
   411f0:	strd	r2, [sp, #12]
   411f4:	ldr	r2, [r6, #20]
   411f8:	str	r1, [sp, #20]
   411fc:	ldr	r3, [r6, #32]
   41200:	str	r2, [sp, #24]
   41204:	str	r3, [sp, #36]	; 0x24
   41208:	bl	11f7c <mktime@plt>
   4120c:	ldr	r3, [sp, #32]
   41210:	mov	r7, r0
   41214:	cmp	r3, #0
   41218:	bge	41248 <__assert_fail@plt+0x2ec54>
   4121c:	cmp	r4, #1
   41220:	beq	4122c <__assert_fail@plt+0x2ec38>
   41224:	mov	r0, r4
   41228:	bl	40dd4 <__assert_fail@plt+0x2e7e0>
   4122c:	mvn	r7, #0
   41230:	mov	r0, r7
   41234:	add	sp, sp, #52	; 0x34
   41238:	ldrd	r4, [sp]
   4123c:	ldrd	r6, [sp, #8]
   41240:	add	sp, sp, #16
   41244:	pop	{pc}		; (ldr pc, [sp], #4)
   41248:	mov	r0, r5
   4124c:	add	r1, sp, #4
   41250:	bl	40edc <__assert_fail@plt+0x2e8e8>
   41254:	cmp	r0, #0
   41258:	beq	4121c <__assert_fail@plt+0x2ec28>
   4125c:	cmp	r4, #1
   41260:	bne	41298 <__assert_fail@plt+0x2eca4>
   41264:	ldrd	r0, [sp, #4]
   41268:	ldrd	r2, [sp, #12]
   4126c:	ldrd	r4, [sp, #20]
   41270:	strd	r0, [r6]
   41274:	ldrd	r0, [sp, #28]
   41278:	strd	r2, [r6, #8]
   4127c:	ldrd	r2, [sp, #36]	; 0x24
   41280:	strd	r4, [r6, #16]
   41284:	ldr	ip, [sp, #44]	; 0x2c
   41288:	strd	r0, [r6, #24]
   4128c:	strd	r2, [r6, #32]
   41290:	str	ip, [r6, #40]	; 0x28
   41294:	b	41230 <__assert_fail@plt+0x2ec3c>
   41298:	mov	r0, r4
   4129c:	bl	40dd4 <__assert_fail@plt+0x2e7e0>
   412a0:	cmp	r0, #0
   412a4:	bne	41264 <__assert_fail@plt+0x2ec70>
   412a8:	b	4122c <__assert_fail@plt+0x2ec38>
   412ac:	mov	r0, r1
   412b0:	bl	124d4 <timegm@plt>
   412b4:	mov	r7, r0
   412b8:	b	41230 <__assert_fail@plt+0x2ec3c>
   412bc:	movw	r3, #38128	; 0x94f0
   412c0:	movt	r3, #5
   412c4:	str	r4, [sp, #-8]!
   412c8:	ldr	r0, [r3]
   412cc:	str	lr, [sp, #4]
   412d0:	bl	122d0 <exit@plt>
   412d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   412d8:	mov	r5, r1
   412dc:	mov	r4, r2
   412e0:	strd	r6, [sp, #8]
   412e4:	mov	r7, r3
   412e8:	strd	r8, [sp, #16]
   412ec:	strd	sl, [sp, #24]
   412f0:	mov	sl, r0
   412f4:	str	lr, [sp, #32]
   412f8:	sub	sp, sp, #12
   412fc:	str	r2, [sp]
   41300:	bl	12300 <strlen@plt>
   41304:	ldr	fp, [r5]
   41308:	cmp	fp, #0
   4130c:	beq	413dc <__assert_fail@plt+0x2ede8>
   41310:	mov	r6, #0
   41314:	mov	r8, r0
   41318:	mvn	r9, #0
   4131c:	str	r6, [sp, #4]
   41320:	b	4134c <__assert_fail@plt+0x2ed58>
   41324:	bl	12084 <memcmp@plt>
   41328:	ldr	r3, [sp, #4]
   4132c:	cmp	r0, #0
   41330:	movne	r3, #1
   41334:	str	r3, [sp, #4]
   41338:	ldr	fp, [r5, #4]!
   4133c:	add	r6, r6, #1
   41340:	add	r4, r4, r7
   41344:	cmp	fp, #0
   41348:	beq	413a8 <__assert_fail@plt+0x2edb4>
   4134c:	mov	r2, r8
   41350:	mov	r1, sl
   41354:	mov	r0, fp
   41358:	bl	12594 <strncmp@plt>
   4135c:	cmp	r0, #0
   41360:	mov	r0, fp
   41364:	bne	41338 <__assert_fail@plt+0x2ed44>
   41368:	bl	12300 <strlen@plt>
   4136c:	ldr	r3, [sp]
   41370:	cmp	r0, r8
   41374:	mov	r2, r7
   41378:	mov	r1, r4
   4137c:	mla	r0, r7, r9, r3
   41380:	beq	413d4 <__assert_fail@plt+0x2ede0>
   41384:	cmn	r9, #1
   41388:	moveq	r9, r6
   4138c:	beq	41338 <__assert_fail@plt+0x2ed44>
   41390:	ldr	r3, [sp]
   41394:	cmp	r3, #0
   41398:	bne	41324 <__assert_fail@plt+0x2ed30>
   4139c:	mov	r3, #1
   413a0:	str	r3, [sp, #4]
   413a4:	b	41338 <__assert_fail@plt+0x2ed44>
   413a8:	ldr	r3, [sp, #4]
   413ac:	cmp	r3, #0
   413b0:	mvnne	r9, #1
   413b4:	mov	r0, r9
   413b8:	add	sp, sp, #12
   413bc:	ldrd	r4, [sp]
   413c0:	ldrd	r6, [sp, #8]
   413c4:	ldrd	r8, [sp, #16]
   413c8:	ldrd	sl, [sp, #24]
   413cc:	add	sp, sp, #32
   413d0:	pop	{pc}		; (ldr pc, [sp], #4)
   413d4:	mov	r9, r6
   413d8:	b	413b4 <__assert_fail@plt+0x2edc0>
   413dc:	mvn	r9, #0
   413e0:	b	413b4 <__assert_fail@plt+0x2edc0>
   413e4:	cmn	r2, #1
   413e8:	strd	r4, [sp, #-16]!
   413ec:	mov	r5, r1
   413f0:	movweq	r1, #34432	; 0x8680
   413f4:	movwne	r1, #34460	; 0x869c
   413f8:	str	r6, [sp, #8]
   413fc:	movteq	r1, #4
   41400:	movtne	r1, #4
   41404:	str	lr, [sp, #12]
   41408:	mov	r6, r0
   4140c:	sub	sp, sp, #8
   41410:	mov	r2, #5
   41414:	mov	r0, #0
   41418:	bl	120b4 <dcgettext@plt>
   4141c:	mov	r4, r0
   41420:	mov	r2, r5
   41424:	mov	r1, #8
   41428:	mov	r0, #0
   4142c:	bl	2c8d4 <__assert_fail@plt+0x1a2e0>
   41430:	mov	r5, r0
   41434:	mov	r1, r6
   41438:	mov	r0, #1
   4143c:	bl	2cc04 <__assert_fail@plt+0x1a610>
   41440:	mov	r1, #0
   41444:	mov	r3, r5
   41448:	str	r0, [sp]
   4144c:	mov	r2, r4
   41450:	mov	r0, r1
   41454:	bl	121ec <error@plt>
   41458:	add	sp, sp, #8
   4145c:	ldrd	r4, [sp]
   41460:	ldr	r6, [sp, #8]
   41464:	add	sp, sp, #12
   41468:	pop	{pc}		; (ldr pc, [sp], #4)
   4146c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   41470:	mov	r4, r1
   41474:	movw	r1, #34492	; 0x86bc
   41478:	movt	r1, #4
   4147c:	strd	r6, [sp, #8]
   41480:	mov	r6, r0
   41484:	mov	r7, r2
   41488:	mov	r0, #0
   4148c:	strd	r8, [sp, #16]
   41490:	mov	r2, #5
   41494:	strd	sl, [sp, #24]
   41498:	movw	sl, #38216	; 0x9548
   4149c:	movt	sl, #5
   414a0:	str	lr, [sp, #32]
   414a4:	sub	sp, sp, #12
   414a8:	bl	120b4 <dcgettext@plt>
   414ac:	ldr	r1, [sl]
   414b0:	bl	12588 <fputs@plt>
   414b4:	ldr	fp, [r6]
   414b8:	cmp	fp, #0
   414bc:	beq	41554 <__assert_fail@plt+0x2ef60>
   414c0:	movw	r3, #34516	; 0x86d4
   414c4:	movt	r3, #4
   414c8:	mov	r9, #0
   414cc:	str	r3, [sp]
   414d0:	movw	r3, #34524	; 0x86dc
   414d4:	movt	r3, #4
   414d8:	mov	r5, r9
   414dc:	str	r3, [sp, #4]
   414e0:	b	41514 <__assert_fail@plt+0x2ef20>
   414e4:	mov	r0, fp
   414e8:	mov	r9, r4
   414ec:	bl	2cc14 <__assert_fail@plt+0x1a620>
   414f0:	mov	r2, r0
   414f4:	mov	r0, r8
   414f8:	ldr	r1, [sp]
   414fc:	bl	1233c <fprintf@plt>
   41500:	ldr	fp, [r6, #4]!
   41504:	add	r5, r5, #1
   41508:	add	r4, r4, r7
   4150c:	cmp	fp, #0
   41510:	beq	41554 <__assert_fail@plt+0x2ef60>
   41514:	cmp	r5, #0
   41518:	mov	r1, r4
   4151c:	ldr	r8, [sl]
   41520:	mov	r2, r7
   41524:	mov	r0, r9
   41528:	beq	414e4 <__assert_fail@plt+0x2eef0>
   4152c:	bl	12084 <memcmp@plt>
   41530:	cmp	r0, #0
   41534:	bne	414e4 <__assert_fail@plt+0x2eef0>
   41538:	mov	r0, fp
   4153c:	bl	2cc14 <__assert_fail@plt+0x1a620>
   41540:	mov	r2, r0
   41544:	mov	r0, r8
   41548:	ldr	r1, [sp, #4]
   4154c:	bl	1233c <fprintf@plt>
   41550:	b	41500 <__assert_fail@plt+0x2ef0c>
   41554:	ldr	r1, [sl]
   41558:	mov	r0, #10
   4155c:	add	sp, sp, #12
   41560:	ldrd	r4, [sp]
   41564:	ldrd	r6, [sp, #8]
   41568:	ldrd	r8, [sp, #16]
   4156c:	ldrd	sl, [sp, #24]
   41570:	ldr	lr, [sp, #32]
   41574:	add	sp, sp, #36	; 0x24
   41578:	b	124e0 <putc@plt>
   4157c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   41580:	mov	r4, r2
   41584:	mov	r5, r3
   41588:	strd	r6, [sp, #8]
   4158c:	mov	r6, r1
   41590:	mov	r2, r3
   41594:	mov	r7, r0
   41598:	mov	r1, r4
   4159c:	ldr	r3, [sp, #24]
   415a0:	mov	r0, r6
   415a4:	str	r8, [sp, #16]
   415a8:	str	lr, [sp, #20]
   415ac:	bl	412d4 <__assert_fail@plt+0x2ece0>
   415b0:	cmp	r0, #0
   415b4:	blt	415cc <__assert_fail@plt+0x2efd8>
   415b8:	ldrd	r4, [sp]
   415bc:	ldrd	r6, [sp, #8]
   415c0:	ldr	r8, [sp, #16]
   415c4:	add	sp, sp, #20
   415c8:	pop	{pc}		; (ldr pc, [sp], #4)
   415cc:	mov	r2, r0
   415d0:	mov	r1, r6
   415d4:	mov	r0, r7
   415d8:	bl	413e4 <__assert_fail@plt+0x2edf0>
   415dc:	mov	r0, r4
   415e0:	mov	r1, r5
   415e4:	ldr	r2, [sp, #24]
   415e8:	bl	4146c <__assert_fail@plt+0x2ee78>
   415ec:	ldr	r3, [sp, #28]
   415f0:	blx	r3
   415f4:	mvn	r0, #0
   415f8:	b	415b8 <__assert_fail@plt+0x2efc4>
   415fc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   41600:	strd	r6, [sp, #8]
   41604:	ldr	r7, [r1]
   41608:	str	r8, [sp, #16]
   4160c:	str	lr, [sp, #20]
   41610:	cmp	r7, #0
   41614:	beq	41654 <__assert_fail@plt+0x2f060>
   41618:	mov	r6, r3
   4161c:	mov	r8, r0
   41620:	mov	r4, r2
   41624:	mov	r5, r1
   41628:	b	41638 <__assert_fail@plt+0x2f044>
   4162c:	ldr	r7, [r5, #4]!
   41630:	cmp	r7, #0
   41634:	beq	41654 <__assert_fail@plt+0x2f060>
   41638:	mov	r1, r4
   4163c:	mov	r2, r6
   41640:	mov	r0, r8
   41644:	add	r4, r4, r6
   41648:	bl	12084 <memcmp@plt>
   4164c:	cmp	r0, #0
   41650:	bne	4162c <__assert_fail@plt+0x2f038>
   41654:	mov	r0, r7
   41658:	ldrd	r4, [sp]
   4165c:	ldrd	r6, [sp, #8]
   41660:	ldr	r8, [sp, #16]
   41664:	add	sp, sp, #20
   41668:	pop	{pc}		; (ldr pc, [sp], #4)
   4166c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   41670:	mov	r5, r0
   41674:	strd	r6, [sp, #8]
   41678:	strd	r8, [sp, #16]
   4167c:	str	lr, [sp, #24]
   41680:	sub	sp, sp, #36	; 0x24
   41684:	ldrb	r3, [r2]
   41688:	cmp	r3, #0
   4168c:	strbeq	r3, [r5]
   41690:	beq	416f0 <__assert_fail@plt+0x2f0fc>
   41694:	movw	r7, #40508	; 0x9e3c
   41698:	movt	r7, #5
   4169c:	ldr	r4, [r7]
   416a0:	mov	r6, r2
   416a4:	mov	r8, r1
   416a8:	cmp	r4, #0
   416ac:	beq	4171c <__assert_fail@plt+0x2f128>
   416b0:	cmp	r4, #0
   416b4:	blt	41714 <__assert_fail@plt+0x2f120>
   416b8:	mov	r0, r6
   416bc:	bl	12300 <strlen@plt>
   416c0:	add	r0, r0, #27
   416c4:	cmp	r0, #4032	; 0xfc0
   416c8:	bhi	41708 <__assert_fail@plt+0x2f114>
   416cc:	mov	r2, r8
   416d0:	movw	r1, #34556	; 0x86fc
   416d4:	movt	r1, #4
   416d8:	mov	r0, r5
   416dc:	bl	124b0 <sprintf@plt>
   416e0:	add	r0, r5, r0
   416e4:	mov	r1, r6
   416e8:	bl	121b0 <strcpy@plt>
   416ec:	mov	r0, r5
   416f0:	add	sp, sp, #36	; 0x24
   416f4:	ldrd	r4, [sp]
   416f8:	ldrd	r6, [sp, #8]
   416fc:	ldrd	r8, [sp, #16]
   41700:	add	sp, sp, #24
   41704:	pop	{pc}		; (ldr pc, [sp], #4)
   41708:	bl	31b54 <__assert_fail@plt+0x1f560>
   4170c:	subs	r5, r0, #0
   41710:	bne	416cc <__assert_fail@plt+0x2f0d8>
   41714:	mov	r0, #0
   41718:	b	416f0 <__assert_fail@plt+0x2f0fc>
   4171c:	mov	r1, #18688	; 0x4900
   41720:	movt	r1, #8
   41724:	movw	r0, #27040	; 0x69a0
   41728:	movt	r0, #4
   4172c:	bl	1221c <open64@plt>
   41730:	subs	r9, r0, #0
   41734:	bge	41748 <__assert_fail@plt+0x2f154>
   41738:	mvn	r3, #0
   4173c:	mov	r0, r4
   41740:	str	r3, [r7]
   41744:	b	416f0 <__assert_fail@plt+0x2f0fc>
   41748:	mov	r2, r9
   4174c:	movw	r1, #34532	; 0x86e4
   41750:	movt	r1, #4
   41754:	mov	r0, sp
   41758:	bl	124b0 <sprintf@plt>
   4175c:	mov	r1, r4
   41760:	mov	r0, sp
   41764:	bl	123f0 <access@plt>
   41768:	cmp	r0, #0
   4176c:	mov	r0, r9
   41770:	mvnne	r3, #0
   41774:	moveq	r3, #1
   41778:	str	r3, [r7]
   4177c:	bl	125ac <close@plt>
   41780:	ldr	r4, [r7]
   41784:	b	416b0 <__assert_fail@plt+0x2f0bc>
   41788:	ldrb	r3, [r0]
   4178c:	cmp	r3, #47	; 0x2f
   41790:	bne	417a0 <__assert_fail@plt+0x2f1ac>
   41794:	ldrb	r3, [r0, #1]!
   41798:	cmp	r3, #47	; 0x2f
   4179c:	beq	41794 <__assert_fail@plt+0x2f1a0>
   417a0:	cmp	r3, #0
   417a4:	beq	417d4 <__assert_fail@plt+0x2f1e0>
   417a8:	mov	r2, r0
   417ac:	mov	r1, #0
   417b0:	cmp	r3, #47	; 0x2f
   417b4:	moveq	r1, #1
   417b8:	beq	417c8 <__assert_fail@plt+0x2f1d4>
   417bc:	cmp	r1, #0
   417c0:	movne	r0, r2
   417c4:	movne	r1, #0
   417c8:	ldrb	r3, [r2, #1]!
   417cc:	cmp	r3, #0
   417d0:	bne	417b0 <__assert_fail@plt+0x2f1bc>
   417d4:	bx	lr
   417d8:	str	r4, [sp, #-8]!
   417dc:	mov	r4, r0
   417e0:	str	lr, [sp, #4]
   417e4:	bl	12300 <strlen@plt>
   417e8:	cmp	r0, #1
   417ec:	bls	41810 <__assert_fail@plt+0x2f21c>
   417f0:	add	r2, r4, r0
   417f4:	mov	r3, r0
   417f8:	ldrb	r2, [r2, #-1]
   417fc:	cmp	r2, #47	; 0x2f
   41800:	subeq	r3, r0, #2
   41804:	rsbeq	r1, r4, #1
   41808:	addeq	r3, r4, r3
   4180c:	beq	4181c <__assert_fail@plt+0x2f228>
   41810:	ldr	r4, [sp]
   41814:	add	sp, sp, #4
   41818:	pop	{pc}		; (ldr pc, [sp], #4)
   4181c:	cmp	r3, r4
   41820:	add	r0, r1, r3
   41824:	beq	41810 <__assert_fail@plt+0x2f21c>
   41828:	ldrb	r2, [r3], #-1
   4182c:	cmp	r2, #47	; 0x2f
   41830:	beq	4181c <__assert_fail@plt+0x2f228>
   41834:	ldr	r4, [sp]
   41838:	add	sp, sp, #4
   4183c:	pop	{pc}		; (ldr pc, [sp], #4)
   41840:	strd	r4, [sp, #-16]!
   41844:	mov	r4, r0
   41848:	str	r6, [sp, #8]
   4184c:	str	lr, [sp, #12]
   41850:	bl	121c8 <__fpending@plt>
   41854:	mov	r6, r0
   41858:	mov	r0, r4
   4185c:	bl	11fe8 <ferror@plt>
   41860:	mov	r5, r0
   41864:	mov	r0, r4
   41868:	bl	123fc <fclose@plt>
   4186c:	cmp	r5, #0
   41870:	mov	r4, r0
   41874:	bne	418ac <__assert_fail@plt+0x2f2b8>
   41878:	cmp	r0, #0
   4187c:	beq	41898 <__assert_fail@plt+0x2f2a4>
   41880:	cmp	r6, #0
   41884:	bne	418c4 <__assert_fail@plt+0x2f2d0>
   41888:	bl	12348 <__errno_location@plt>
   4188c:	ldr	r4, [r0]
   41890:	subs	r4, r4, #9
   41894:	mvnne	r4, #0
   41898:	mov	r0, r4
   4189c:	ldrd	r4, [sp]
   418a0:	ldr	r6, [sp, #8]
   418a4:	add	sp, sp, #12
   418a8:	pop	{pc}		; (ldr pc, [sp], #4)
   418ac:	cmp	r0, #0
   418b0:	bne	418c4 <__assert_fail@plt+0x2f2d0>
   418b4:	bl	12348 <__errno_location@plt>
   418b8:	str	r4, [r0]
   418bc:	mvn	r4, #0
   418c0:	b	41898 <__assert_fail@plt+0x2f2a4>
   418c4:	mvn	r4, #0
   418c8:	b	41898 <__assert_fail@plt+0x2f2a4>
   418cc:	movw	r3, #62998	; 0xf616
   418d0:	movt	r3, #149	; 0x95
   418d4:	strd	r4, [sp, #-8]!
   418d8:	mov	r4, #0
   418dc:	mov	r5, #0
   418e0:	strd	r4, [r0, #16]
   418e4:	str	r3, [r0, #24]
   418e8:	ldrd	r4, [sp]
   418ec:	add	sp, sp, #8
   418f0:	bx	lr
   418f4:	ldr	r2, [r0, #24]
   418f8:	movw	r3, #62998	; 0xf616
   418fc:	movt	r3, #149	; 0x95
   41900:	strd	r4, [sp, #-36]!	; 0xffffffdc
   41904:	strd	r6, [sp, #8]
   41908:	strd	r8, [sp, #16]
   4190c:	strd	sl, [sp, #24]
   41910:	cmp	r2, r3
   41914:	str	lr, [sp, #32]
   41918:	sub	sp, sp, #4
   4191c:	bne	419cc <__assert_fail@plt+0x2f3d8>
   41920:	ldrd	r6, [r0, #16]
   41924:	ldrd	sl, [r1, #96]	; 0x60
   41928:	orrs	r3, r6, r7
   4192c:	beq	41980 <__assert_fail@plt+0x2f38c>
   41930:	ldrd	r2, [r0]
   41934:	cmp	r3, fp
   41938:	cmpeq	r2, sl
   4193c:	beq	419a0 <__assert_fail@plt+0x2f3ac>
   41940:	adds	r8, r6, #1
   41944:	adc	r9, r7, #0
   41948:	and	r2, r6, r8
   4194c:	and	r3, r7, r9
   41950:	orrs	r3, r2, r3
   41954:	strd	r8, [r0, #16]
   41958:	movne	r1, #0
   4195c:	beq	419bc <__assert_fail@plt+0x2f3c8>
   41960:	mov	r0, r1
   41964:	add	sp, sp, #4
   41968:	ldrd	r4, [sp]
   4196c:	ldrd	r6, [sp, #8]
   41970:	ldrd	r8, [sp, #16]
   41974:	ldrd	sl, [sp, #24]
   41978:	add	sp, sp, #32
   4197c:	pop	{pc}		; (ldr pc, [sp], #4)
   41980:	mov	r2, #1
   41984:	mov	r3, #0
   41988:	strd	r2, [r0, #16]
   4198c:	ldrd	r2, [r1]
   41990:	mov	r1, #0
   41994:	strd	sl, [r0]
   41998:	strd	r2, [r0, #8]
   4199c:	b	41960 <__assert_fail@plt+0x2f36c>
   419a0:	ldrd	r4, [r1]
   419a4:	ldrd	r2, [r0, #8]
   419a8:	cmp	r5, r3
   419ac:	cmpeq	r4, r2
   419b0:	bne	41940 <__assert_fail@plt+0x2f34c>
   419b4:	mov	r1, #1
   419b8:	b	41960 <__assert_fail@plt+0x2f36c>
   419bc:	orrs	r3, r8, r9
   419c0:	bne	4198c <__assert_fail@plt+0x2f398>
   419c4:	mov	r1, #1
   419c8:	b	41960 <__assert_fail@plt+0x2f36c>
   419cc:	movw	r3, #34576	; 0x8710
   419d0:	movt	r3, #4
   419d4:	movw	r1, #34588	; 0x871c
   419d8:	movt	r1, #4
   419dc:	movw	r0, #34604	; 0x872c
   419e0:	movt	r0, #4
   419e4:	mov	r2, #60	; 0x3c
   419e8:	bl	125f4 <__assert_fail@plt>
   419ec:	ldr	ip, [r0, #4]
   419f0:	cmp	ip, r1
   419f4:	bcs	41a60 <__assert_fail@plt+0x2f46c>
   419f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   419fc:	mov	r5, r1
   41a00:	mov	r4, r0
   41a04:	strd	r6, [sp, #8]
   41a08:	umull	r6, r7, r1, r3
   41a0c:	str	r8, [sp, #16]
   41a10:	mov	r8, r3
   41a14:	str	lr, [sp, #20]
   41a18:	cmp	r7, #0
   41a1c:	bne	41aa4 <__assert_fail@plt+0x2f4b0>
   41a20:	ldr	r0, [r0, #8]
   41a24:	cmp	r0, r2
   41a28:	beq	41a70 <__assert_fail@plt+0x2f47c>
   41a2c:	mov	r1, r6
   41a30:	bl	32624 <__assert_fail@plt+0x20030>
   41a34:	subs	r6, r0, #0
   41a38:	beq	41a9c <__assert_fail@plt+0x2f4a8>
   41a3c:	mov	r3, #1
   41a40:	str	r5, [r4]
   41a44:	stmib	r4, {r5, r6}
   41a48:	ldrd	r4, [sp]
   41a4c:	mov	r0, r3
   41a50:	ldrd	r6, [sp, #8]
   41a54:	ldr	r8, [sp, #16]
   41a58:	add	sp, sp, #20
   41a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   41a60:	mov	r3, #1
   41a64:	str	r1, [r0]
   41a68:	mov	r0, r3
   41a6c:	bx	lr
   41a70:	mov	r0, r6
   41a74:	bl	31b54 <__assert_fail@plt+0x1f560>
   41a78:	subs	r6, r0, #0
   41a7c:	beq	41a9c <__assert_fail@plt+0x2f4a8>
   41a80:	ldr	r1, [r4, #8]
   41a84:	cmp	r1, #0
   41a88:	beq	41a3c <__assert_fail@plt+0x2f448>
   41a8c:	ldr	r2, [r4]
   41a90:	mul	r2, r2, r8
   41a94:	bl	12024 <memcpy@plt>
   41a98:	b	41a3c <__assert_fail@plt+0x2f448>
   41a9c:	mov	r3, #0
   41aa0:	b	41a48 <__assert_fail@plt+0x2f454>
   41aa4:	bl	12348 <__errno_location@plt>
   41aa8:	mov	r2, #12
   41aac:	mov	r3, #0
   41ab0:	str	r2, [r0]
   41ab4:	b	41a48 <__assert_fail@plt+0x2f454>
   41ab8:	mov	r1, r0
   41abc:	mov	r0, #0
   41ac0:	b	1200c <clock_gettime@plt>
   41ac4:	str	r4, [sp, #-8]!
   41ac8:	mov	r4, r0
   41acc:	mov	r0, #0
   41ad0:	str	lr, [sp, #4]
   41ad4:	sub	sp, sp, #8
   41ad8:	mov	r1, sp
   41adc:	bl	1200c <clock_gettime@plt>
   41ae0:	ldrd	r2, [sp]
   41ae4:	mov	r0, r4
   41ae8:	strd	r2, [r4]
   41aec:	add	sp, sp, #8
   41af0:	ldr	r4, [sp]
   41af4:	add	sp, sp, #4
   41af8:	pop	{pc}		; (ldr pc, [sp], #4)
   41afc:	push	{lr}		; (str lr, [sp, #-4]!)
   41b00:	sub	sp, sp, #268	; 0x10c
   41b04:	movw	r2, #257	; 0x101
   41b08:	add	r1, sp, #4
   41b0c:	bl	4201c <__assert_fail@plt+0x2fa28>
   41b10:	cmp	r0, #0
   41b14:	movne	r0, #0
   41b18:	bne	41b4c <__assert_fail@plt+0x2f558>
   41b1c:	movw	r1, #31500	; 0x7b0c
   41b20:	movt	r1, #4
   41b24:	add	r0, sp, #4
   41b28:	bl	11f40 <strcmp@plt>
   41b2c:	cmp	r0, #0
   41b30:	beq	41b4c <__assert_fail@plt+0x2f558>
   41b34:	add	r0, sp, #4
   41b38:	movw	r1, #34628	; 0x8744
   41b3c:	movt	r1, #4
   41b40:	bl	11f40 <strcmp@plt>
   41b44:	adds	r0, r0, #0
   41b48:	movne	r0, #1
   41b4c:	add	sp, sp, #268	; 0x10c
   41b50:	pop	{pc}		; (ldr pc, [sp], #4)
   41b54:	mov	r3, #0
   41b58:	mov	r2, #1
   41b5c:	str	r1, [r0]
   41b60:	str	r1, [r0, #4]
   41b64:	str	r1, [r0, #8]
   41b68:	str	r1, [r0, #12]
   41b6c:	str	r1, [r0, #16]
   41b70:	str	r3, [r0, #20]
   41b74:	str	r3, [r0, #24]
   41b78:	strb	r2, [r0, #28]
   41b7c:	bx	lr
   41b80:	ldrb	r0, [r0, #28]
   41b84:	bx	lr
   41b88:	ldrb	ip, [r0, #28]
   41b8c:	mov	r2, r0
   41b90:	ldr	r3, [r0, #20]
   41b94:	eor	ip, ip, #1
   41b98:	add	r3, ip, r3
   41b9c:	and	r3, r3, #3
   41ba0:	ldr	r0, [r0, r3, lsl #2]
   41ba4:	str	r1, [r2, r3, lsl #2]
   41ba8:	ldr	r1, [r2, #24]
   41bac:	str	r3, [r2, #20]
   41bb0:	cmp	r1, r3
   41bb4:	bne	41bc4 <__assert_fail@plt+0x2f5d0>
   41bb8:	add	ip, ip, r1
   41bbc:	and	ip, ip, #3
   41bc0:	str	ip, [r2, #24]
   41bc4:	mov	r3, #0
   41bc8:	strb	r3, [r2, #28]
   41bcc:	bx	lr
   41bd0:	ldrb	r3, [r0, #28]
   41bd4:	cmp	r3, #0
   41bd8:	bne	41c14 <__assert_fail@plt+0x2f620>
   41bdc:	ldr	r1, [r0, #16]
   41be0:	ldr	r3, [r0, #20]
   41be4:	ldr	r2, [r0, r3, lsl #2]
   41be8:	str	r1, [r0, r3, lsl #2]
   41bec:	ldr	r1, [r0, #24]
   41bf0:	cmp	r3, r1
   41bf4:	moveq	r3, #1
   41bf8:	strbeq	r3, [r0, #28]
   41bfc:	beq	41c0c <__assert_fail@plt+0x2f618>
   41c00:	add	r3, r3, #3
   41c04:	and	r3, r3, #3
   41c08:	str	r3, [r0, #20]
   41c0c:	mov	r0, r2
   41c10:	bx	lr
   41c14:	str	r4, [sp, #-8]!
   41c18:	str	lr, [sp, #4]
   41c1c:	bl	125a0 <abort@plt>
   41c20:	mov	r0, #14
   41c24:	str	r4, [sp, #-8]!
   41c28:	str	lr, [sp, #4]
   41c2c:	bl	12480 <nl_langinfo@plt>
   41c30:	cmp	r0, #0
   41c34:	beq	41c58 <__assert_fail@plt+0x2f664>
   41c38:	ldrb	r2, [r0]
   41c3c:	movw	r3, #34636	; 0x874c
   41c40:	movt	r3, #4
   41c44:	ldr	r4, [sp]
   41c48:	add	sp, sp, #4
   41c4c:	cmp	r2, #0
   41c50:	moveq	r0, r3
   41c54:	pop	{pc}		; (ldr pc, [sp], #4)
   41c58:	ldr	r4, [sp]
   41c5c:	add	sp, sp, #4
   41c60:	movw	r0, #34636	; 0x874c
   41c64:	movt	r0, #4
   41c68:	pop	{pc}		; (ldr pc, [sp], #4)
   41c6c:	adds	r3, r0, #16
   41c70:	bmi	41cbc <__assert_fail@plt+0x2f6c8>
   41c74:	cmp	r3, r0
   41c78:	bcc	41cbc <__assert_fail@plt+0x2f6c8>
   41c7c:	mov	r0, r3
   41c80:	str	r4, [sp, #-8]!
   41c84:	str	lr, [sp, #4]
   41c88:	bl	12240 <malloc@plt>
   41c8c:	cmp	r0, #0
   41c90:	moveq	r0, #0
   41c94:	beq	41cb0 <__assert_fail@plt+0x2f6bc>
   41c98:	add	r3, r0, #8
   41c9c:	rsb	r2, r0, #8
   41ca0:	bic	r3, r3, #15
   41ca4:	add	r3, r3, r2
   41ca8:	add	r0, r0, r3
   41cac:	strb	r3, [r0, #-1]
   41cb0:	ldr	r4, [sp]
   41cb4:	add	sp, sp, #4
   41cb8:	pop	{pc}		; (ldr pc, [sp], #4)
   41cbc:	mov	r0, #0
   41cc0:	bx	lr
   41cc4:	tst	r0, #7
   41cc8:	bne	41ce0 <__assert_fail@plt+0x2f6ec>
   41ccc:	tst	r0, #8
   41cd0:	bxeq	lr
   41cd4:	ldrb	r3, [r0, #-1]
   41cd8:	sub	r0, r0, r3
   41cdc:	b	2f668 <__assert_fail@plt+0x1d074>
   41ce0:	str	r4, [sp, #-8]!
   41ce4:	str	lr, [sp, #4]
   41ce8:	bl	125a0 <abort@plt>
   41cec:	str	r4, [sp, #-8]!
   41cf0:	mov	r4, r0
   41cf4:	str	lr, [sp, #4]
   41cf8:	bl	11fa0 <wcwidth@plt>
   41cfc:	cmp	r0, #0
   41d00:	bge	41d14 <__assert_fail@plt+0x2f720>
   41d04:	mov	r0, r4
   41d08:	bl	12114 <iswcntrl@plt>
   41d0c:	clz	r0, r0
   41d10:	lsr	r0, r0, #5
   41d14:	ldr	r4, [sp]
   41d18:	add	sp, sp, #4
   41d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   41d20:	mov	r3, r1
   41d24:	strd	r4, [sp, #-16]!
   41d28:	mov	r4, r1
   41d2c:	ldr	r2, [r1, #4]
   41d30:	mov	r5, r0
   41d34:	ldr	r1, [r3], #16
   41d38:	str	r6, [sp, #8]
   41d3c:	str	lr, [sp, #12]
   41d40:	cmp	r1, r3
   41d44:	strne	r1, [r0]
   41d48:	beq	41d74 <__assert_fail@plt+0x2f780>
   41d4c:	ldrb	r3, [r4, #8]
   41d50:	str	r2, [r5, #4]
   41d54:	ldr	r6, [sp, #8]
   41d58:	cmp	r3, #0
   41d5c:	strb	r3, [r5, #8]
   41d60:	ldrne	r3, [r4, #12]
   41d64:	strne	r3, [r5, #12]
   41d68:	ldrd	r4, [sp]
   41d6c:	add	sp, sp, #12
   41d70:	pop	{pc}		; (ldr pc, [sp], #4)
   41d74:	add	r3, r0, #16
   41d78:	mov	r0, r3
   41d7c:	bl	12024 <memcpy@plt>
   41d80:	ldr	r2, [r4, #4]
   41d84:	str	r0, [r5]
   41d88:	b	41d4c <__assert_fail@plt+0x2f758>
   41d8c:	lsr	r2, r0, #5
   41d90:	movw	r3, #34644	; 0x8754
   41d94:	movt	r3, #4
   41d98:	and	r0, r0, #31
   41d9c:	ldr	r3, [r3, r2, lsl #2]
   41da0:	lsr	r0, r3, r0
   41da4:	and	r0, r0, #1
   41da8:	bx	lr
   41dac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   41db0:	mov	r4, r0
   41db4:	strd	r6, [sp, #8]
   41db8:	str	r8, [sp, #16]
   41dbc:	str	lr, [sp, #20]
   41dc0:	sub	sp, sp, #56	; 0x38
   41dc4:	bl	12198 <__ctype_get_mb_cur_max@plt>
   41dc8:	cmp	r0, #1
   41dcc:	bhi	41df8 <__assert_fail@plt+0x2f804>
   41dd0:	mov	r0, r4
   41dd4:	bl	12300 <strlen@plt>
   41dd8:	mov	r5, r0
   41ddc:	mov	r0, r5
   41de0:	add	sp, sp, #56	; 0x38
   41de4:	ldrd	r4, [sp]
   41de8:	ldrd	r6, [sp, #8]
   41dec:	ldr	r8, [sp, #16]
   41df0:	add	sp, sp, #20
   41df4:	pop	{pc}		; (ldr pc, [sp], #4)
   41df8:	mov	r3, #0
   41dfc:	mov	r0, #0
   41e00:	mov	r1, #0
   41e04:	movw	r7, #34644	; 0x8754
   41e08:	movt	r7, #4
   41e0c:	mov	r5, r3
   41e10:	strb	r3, [sp]
   41e14:	mov	r6, #1
   41e18:	strd	r0, [sp, #4]
   41e1c:	strb	r3, [sp, #12]
   41e20:	str	r4, [sp, #16]
   41e24:	b	41e7c <__assert_fail@plt+0x2f888>
   41e28:	ldrb	r3, [r4]
   41e2c:	lsr	r2, r3, #5
   41e30:	and	r3, r3, #31
   41e34:	ldr	r2, [r7, r2, lsl #2]
   41e38:	lsr	r3, r2, r3
   41e3c:	tst	r3, #1
   41e40:	beq	41eec <__assert_fail@plt+0x2f8f8>
   41e44:	str	r6, [sp, #20]
   41e48:	ldrb	r3, [r4]
   41e4c:	strb	r6, [sp, #24]
   41e50:	mov	r4, r3
   41e54:	str	r3, [sp, #28]
   41e58:	cmp	r4, #0
   41e5c:	beq	41ddc <__assert_fail@plt+0x2f7e8>
   41e60:	ldr	r4, [sp, #16]
   41e64:	mov	r2, #0
   41e68:	add	r5, r5, #1
   41e6c:	ldr	r3, [sp, #20]
   41e70:	strb	r2, [sp, #12]
   41e74:	add	r4, r4, r3
   41e78:	str	r4, [sp, #16]
   41e7c:	ldrb	r3, [sp]
   41e80:	cmp	r3, #0
   41e84:	addne	r8, sp, #4
   41e88:	beq	41e28 <__assert_fail@plt+0x2f834>
   41e8c:	bl	12198 <__ctype_get_mb_cur_max@plt>
   41e90:	mov	r1, r0
   41e94:	mov	r0, r4
   41e98:	bl	2d43c <__assert_fail@plt+0x1ae48>
   41e9c:	mov	r2, r0
   41ea0:	mov	r3, r8
   41ea4:	mov	r1, r4
   41ea8:	add	r0, sp, #28
   41eac:	bl	31b90 <__assert_fail@plt+0x1f59c>
   41eb0:	cmn	r0, #1
   41eb4:	str	r0, [sp, #20]
   41eb8:	beq	41f08 <__assert_fail@plt+0x2f914>
   41ebc:	cmn	r0, #2
   41ec0:	beq	41f1c <__assert_fail@plt+0x2f928>
   41ec4:	cmp	r0, #0
   41ec8:	beq	41f38 <__assert_fail@plt+0x2f944>
   41ecc:	ldr	r4, [sp, #28]
   41ed0:	mov	r0, r8
   41ed4:	strb	r6, [sp, #24]
   41ed8:	bl	12060 <mbsinit@plt>
   41edc:	cmp	r0, #0
   41ee0:	movne	r3, #0
   41ee4:	strbne	r3, [sp]
   41ee8:	b	41e58 <__assert_fail@plt+0x2f864>
   41eec:	add	r8, sp, #4
   41ef0:	mov	r0, r8
   41ef4:	bl	12060 <mbsinit@plt>
   41ef8:	cmp	r0, #0
   41efc:	beq	41f78 <__assert_fail@plt+0x2f984>
   41f00:	strb	r6, [sp]
   41f04:	b	41e8c <__assert_fail@plt+0x2f898>
   41f08:	mov	r3, #0
   41f0c:	str	r6, [sp, #20]
   41f10:	ldr	r4, [sp, #16]
   41f14:	strb	r3, [sp, #24]
   41f18:	b	41e64 <__assert_fail@plt+0x2f870>
   41f1c:	ldr	r4, [sp, #16]
   41f20:	mov	r0, r4
   41f24:	bl	12300 <strlen@plt>
   41f28:	mov	r3, #0
   41f2c:	str	r0, [sp, #20]
   41f30:	strb	r3, [sp, #24]
   41f34:	b	41e64 <__assert_fail@plt+0x2f870>
   41f38:	ldr	r4, [sp, #16]
   41f3c:	str	r6, [sp, #20]
   41f40:	ldrb	r3, [r4]
   41f44:	cmp	r3, #0
   41f48:	bne	41f98 <__assert_fail@plt+0x2f9a4>
   41f4c:	ldr	r4, [sp, #28]
   41f50:	cmp	r4, #0
   41f54:	beq	41ed0 <__assert_fail@plt+0x2f8dc>
   41f58:	movw	r3, #34676	; 0x8774
   41f5c:	movt	r3, #4
   41f60:	movw	r1, #28500	; 0x6f54
   41f64:	movt	r1, #4
   41f68:	movw	r0, #28512	; 0x6f60
   41f6c:	movt	r0, #4
   41f70:	mov	r2, #172	; 0xac
   41f74:	bl	125f4 <__assert_fail@plt>
   41f78:	movw	r3, #34676	; 0x8774
   41f7c:	movt	r3, #4
   41f80:	movw	r1, #28500	; 0x6f54
   41f84:	movt	r1, #4
   41f88:	movw	r0, #28532	; 0x6f74
   41f8c:	movt	r0, #4
   41f90:	mov	r2, #143	; 0x8f
   41f94:	bl	125f4 <__assert_fail@plt>
   41f98:	movw	r3, #34676	; 0x8774
   41f9c:	movt	r3, #4
   41fa0:	movw	r1, #28500	; 0x6f54
   41fa4:	movt	r1, #4
   41fa8:	movw	r0, #28556	; 0x6f8c
   41fac:	movt	r0, #4
   41fb0:	mov	r2, #171	; 0xab
   41fb4:	bl	125f4 <__assert_fail@plt>
   41fb8:	orr	r2, r2, #540672	; 0x84000
   41fbc:	strd	r4, [sp, #-16]!
   41fc0:	orr	r2, r2, #2304	; 0x900
   41fc4:	str	r6, [sp, #8]
   41fc8:	mov	r6, r3
   41fcc:	str	lr, [sp, #12]
   41fd0:	bl	268c8 <__assert_fail@plt+0x142d4>
   41fd4:	subs	r5, r0, #0
   41fd8:	movlt	r4, #0
   41fdc:	blt	41ff0 <__assert_fail@plt+0x2f9fc>
   41fe0:	bl	124c8 <fdopendir@plt>
   41fe4:	subs	r4, r0, #0
   41fe8:	beq	42004 <__assert_fail@plt+0x2fa10>
   41fec:	str	r5, [r6]
   41ff0:	mov	r0, r4
   41ff4:	ldrd	r4, [sp]
   41ff8:	ldr	r6, [sp, #8]
   41ffc:	add	sp, sp, #12
   42000:	pop	{pc}		; (ldr pc, [sp], #4)
   42004:	bl	12348 <__errno_location@plt>
   42008:	mov	r6, r0
   4200c:	mov	r0, r5
   42010:	ldr	r5, [r6]
   42014:	bl	125ac <close@plt>
   42018:	b	41fec <__assert_fail@plt+0x2f9f8>
   4201c:	strd	r4, [sp, #-16]!
   42020:	mov	r5, r1
   42024:	mov	r1, #0
   42028:	mov	r4, r2
   4202c:	str	r6, [sp, #8]
   42030:	str	lr, [sp, #12]
   42034:	bl	12444 <setlocale@plt>
   42038:	subs	r6, r0, #0
   4203c:	beq	420bc <__assert_fail@plt+0x2fac8>
   42040:	bl	12300 <strlen@plt>
   42044:	cmp	r4, r0
   42048:	bhi	42068 <__assert_fail@plt+0x2fa74>
   4204c:	cmp	r4, #0
   42050:	moveq	r0, #34	; 0x22
   42054:	bne	4208c <__assert_fail@plt+0x2fa98>
   42058:	ldrd	r4, [sp]
   4205c:	ldr	r6, [sp, #8]
   42060:	add	sp, sp, #12
   42064:	pop	{pc}		; (ldr pc, [sp], #4)
   42068:	add	r2, r0, #1
   4206c:	mov	r1, r6
   42070:	mov	r0, r5
   42074:	bl	12024 <memcpy@plt>
   42078:	ldrd	r4, [sp]
   4207c:	mov	r0, #0
   42080:	ldr	r6, [sp, #8]
   42084:	add	sp, sp, #12
   42088:	pop	{pc}		; (ldr pc, [sp], #4)
   4208c:	sub	r4, r4, #1
   42090:	mov	r1, r6
   42094:	mov	r2, r4
   42098:	mov	r0, r5
   4209c:	bl	12024 <memcpy@plt>
   420a0:	mov	r3, #0
   420a4:	mov	r0, #34	; 0x22
   420a8:	strb	r3, [r5, r4]
   420ac:	ldrd	r4, [sp]
   420b0:	ldr	r6, [sp, #8]
   420b4:	add	sp, sp, #12
   420b8:	pop	{pc}		; (ldr pc, [sp], #4)
   420bc:	cmp	r4, #0
   420c0:	mov	r0, #22
   420c4:	strbne	r6, [r5]
   420c8:	ldrd	r4, [sp]
   420cc:	ldr	r6, [sp, #8]
   420d0:	add	sp, sp, #12
   420d4:	pop	{pc}		; (ldr pc, [sp], #4)
   420d8:	mov	r1, #0
   420dc:	b	12444 <setlocale@plt>
   420e0:	eor	r1, r1, #-2147483648	; 0x80000000
   420e4:	b	420ec <__assert_fail@plt+0x2faf8>
   420e8:	eor	r3, r3, #-2147483648	; 0x80000000
   420ec:	push	{r4, r5, lr}
   420f0:	lsl	r4, r1, #1
   420f4:	lsl	r5, r3, #1
   420f8:	teq	r4, r5
   420fc:	teqeq	r0, r2
   42100:	orrsne	ip, r4, r0
   42104:	orrsne	ip, r5, r2
   42108:	mvnsne	ip, r4, asr #21
   4210c:	mvnsne	ip, r5, asr #21
   42110:	beq	422fc <__assert_fail@plt+0x2fd08>
   42114:	lsr	r4, r4, #21
   42118:	rsbs	r5, r4, r5, lsr #21
   4211c:	rsblt	r5, r5, #0
   42120:	ble	42140 <__assert_fail@plt+0x2fb4c>
   42124:	add	r4, r4, r5
   42128:	eor	r2, r0, r2
   4212c:	eor	r3, r1, r3
   42130:	eor	r0, r2, r0
   42134:	eor	r1, r3, r1
   42138:	eor	r2, r0, r2
   4213c:	eor	r3, r1, r3
   42140:	cmp	r5, #54	; 0x36
   42144:	pophi	{r4, r5, pc}
   42148:	tst	r1, #-2147483648	; 0x80000000
   4214c:	lsl	r1, r1, #12
   42150:	mov	ip, #1048576	; 0x100000
   42154:	orr	r1, ip, r1, lsr #12
   42158:	beq	42164 <__assert_fail@plt+0x2fb70>
   4215c:	rsbs	r0, r0, #0
   42160:	rsc	r1, r1, #0
   42164:	tst	r3, #-2147483648	; 0x80000000
   42168:	lsl	r3, r3, #12
   4216c:	orr	r3, ip, r3, lsr #12
   42170:	beq	4217c <__assert_fail@plt+0x2fb88>
   42174:	rsbs	r2, r2, #0
   42178:	rsc	r3, r3, #0
   4217c:	teq	r4, r5
   42180:	beq	422e4 <__assert_fail@plt+0x2fcf0>
   42184:	sub	r4, r4, #1
   42188:	rsbs	lr, r5, #32
   4218c:	blt	421a8 <__assert_fail@plt+0x2fbb4>
   42190:	lsl	ip, r2, lr
   42194:	adds	r0, r0, r2, lsr r5
   42198:	adc	r1, r1, #0
   4219c:	adds	r0, r0, r3, lsl lr
   421a0:	adcs	r1, r1, r3, asr r5
   421a4:	b	421c4 <__assert_fail@plt+0x2fbd0>
   421a8:	sub	r5, r5, #32
   421ac:	add	lr, lr, #32
   421b0:	cmp	r2, #1
   421b4:	lsl	ip, r3, lr
   421b8:	orrcs	ip, ip, #2
   421bc:	adds	r0, r0, r3, asr r5
   421c0:	adcs	r1, r1, r3, asr #31
   421c4:	and	r5, r1, #-2147483648	; 0x80000000
   421c8:	bpl	421d8 <__assert_fail@plt+0x2fbe4>
   421cc:	rsbs	ip, ip, #0
   421d0:	rscs	r0, r0, #0
   421d4:	rsc	r1, r1, #0
   421d8:	cmp	r1, #1048576	; 0x100000
   421dc:	bcc	4221c <__assert_fail@plt+0x2fc28>
   421e0:	cmp	r1, #2097152	; 0x200000
   421e4:	bcc	42204 <__assert_fail@plt+0x2fc10>
   421e8:	lsrs	r1, r1, #1
   421ec:	rrxs	r0, r0
   421f0:	rrx	ip, ip
   421f4:	add	r4, r4, #1
   421f8:	lsl	r2, r4, #21
   421fc:	cmn	r2, #4194304	; 0x400000
   42200:	bcs	4235c <__assert_fail@plt+0x2fd68>
   42204:	cmp	ip, #-2147483648	; 0x80000000
   42208:	lsrseq	ip, r0, #1
   4220c:	adcs	r0, r0, #0
   42210:	adc	r1, r1, r4, lsl #20
   42214:	orr	r1, r1, r5
   42218:	pop	{r4, r5, pc}
   4221c:	lsls	ip, ip, #1
   42220:	adcs	r0, r0, r0
   42224:	adc	r1, r1, r1
   42228:	tst	r1, #1048576	; 0x100000
   4222c:	sub	r4, r4, #1
   42230:	bne	42204 <__assert_fail@plt+0x2fc10>
   42234:	teq	r1, #0
   42238:	moveq	r1, r0
   4223c:	moveq	r0, #0
   42240:	clz	r3, r1
   42244:	addeq	r3, r3, #32
   42248:	sub	r3, r3, #11
   4224c:	subs	r2, r3, #32
   42250:	bge	42274 <__assert_fail@plt+0x2fc80>
   42254:	adds	r2, r2, #12
   42258:	ble	42270 <__assert_fail@plt+0x2fc7c>
   4225c:	add	ip, r2, #20
   42260:	rsb	r2, r2, #12
   42264:	lsl	r0, r1, ip
   42268:	lsr	r1, r1, r2
   4226c:	b	42284 <__assert_fail@plt+0x2fc90>
   42270:	add	r2, r2, #20
   42274:	rsble	ip, r2, #32
   42278:	lsl	r1, r1, r2
   4227c:	orrle	r1, r1, r0, lsr ip
   42280:	lslle	r0, r0, r2
   42284:	subs	r4, r4, r3
   42288:	addge	r1, r1, r4, lsl #20
   4228c:	orrge	r1, r1, r5
   42290:	popge	{r4, r5, pc}
   42294:	mvn	r4, r4
   42298:	subs	r4, r4, #31
   4229c:	bge	422d8 <__assert_fail@plt+0x2fce4>
   422a0:	adds	r4, r4, #12
   422a4:	bgt	422c0 <__assert_fail@plt+0x2fccc>
   422a8:	add	r4, r4, #20
   422ac:	rsb	r2, r4, #32
   422b0:	lsr	r0, r0, r4
   422b4:	orr	r0, r0, r1, lsl r2
   422b8:	orr	r1, r5, r1, lsr r4
   422bc:	pop	{r4, r5, pc}
   422c0:	rsb	r4, r4, #12
   422c4:	rsb	r2, r4, #32
   422c8:	lsr	r0, r0, r2
   422cc:	orr	r0, r0, r1, lsl r4
   422d0:	mov	r1, r5
   422d4:	pop	{r4, r5, pc}
   422d8:	lsr	r0, r1, r4
   422dc:	mov	r1, r5
   422e0:	pop	{r4, r5, pc}
   422e4:	teq	r4, #0
   422e8:	eor	r3, r3, #1048576	; 0x100000
   422ec:	eoreq	r1, r1, #1048576	; 0x100000
   422f0:	addeq	r4, r4, #1
   422f4:	subne	r5, r5, #1
   422f8:	b	42184 <__assert_fail@plt+0x2fb90>
   422fc:	mvns	ip, r4, asr #21
   42300:	mvnsne	ip, r5, asr #21
   42304:	beq	4236c <__assert_fail@plt+0x2fd78>
   42308:	teq	r4, r5
   4230c:	teqeq	r0, r2
   42310:	beq	42324 <__assert_fail@plt+0x2fd30>
   42314:	orrs	ip, r4, r0
   42318:	moveq	r1, r3
   4231c:	moveq	r0, r2
   42320:	pop	{r4, r5, pc}
   42324:	teq	r1, r3
   42328:	movne	r1, #0
   4232c:	movne	r0, #0
   42330:	popne	{r4, r5, pc}
   42334:	lsrs	ip, r4, #21
   42338:	bne	4234c <__assert_fail@plt+0x2fd58>
   4233c:	lsls	r0, r0, #1
   42340:	adcs	r1, r1, r1
   42344:	orrcs	r1, r1, #-2147483648	; 0x80000000
   42348:	pop	{r4, r5, pc}
   4234c:	adds	r4, r4, #4194304	; 0x400000
   42350:	addcc	r1, r1, #1048576	; 0x100000
   42354:	popcc	{r4, r5, pc}
   42358:	and	r5, r1, #-2147483648	; 0x80000000
   4235c:	orr	r1, r5, #2130706432	; 0x7f000000
   42360:	orr	r1, r1, #15728640	; 0xf00000
   42364:	mov	r0, #0
   42368:	pop	{r4, r5, pc}
   4236c:	mvns	ip, r4, asr #21
   42370:	movne	r1, r3
   42374:	movne	r0, r2
   42378:	mvnseq	ip, r5, asr #21
   4237c:	movne	r3, r1
   42380:	movne	r2, r0
   42384:	orrs	r4, r0, r1, lsl #12
   42388:	orrseq	r5, r2, r3, lsl #12
   4238c:	teqeq	r1, r3
   42390:	orrne	r1, r1, #524288	; 0x80000
   42394:	pop	{r4, r5, pc}
   42398:	teq	r0, #0
   4239c:	moveq	r1, #0
   423a0:	bxeq	lr
   423a4:	push	{r4, r5, lr}
   423a8:	mov	r4, #1024	; 0x400
   423ac:	add	r4, r4, #50	; 0x32
   423b0:	mov	r5, #0
   423b4:	mov	r1, #0
   423b8:	b	42234 <__assert_fail@plt+0x2fc40>
   423bc:	teq	r0, #0
   423c0:	moveq	r1, #0
   423c4:	bxeq	lr
   423c8:	push	{r4, r5, lr}
   423cc:	mov	r4, #1024	; 0x400
   423d0:	add	r4, r4, #50	; 0x32
   423d4:	ands	r5, r0, #-2147483648	; 0x80000000
   423d8:	rsbmi	r0, r0, #0
   423dc:	mov	r1, #0
   423e0:	b	42234 <__assert_fail@plt+0x2fc40>
   423e4:	lsls	r2, r0, #1
   423e8:	asr	r1, r2, #3
   423ec:	rrx	r1, r1
   423f0:	lsl	r0, r2, #28
   423f4:	andsne	r3, r2, #-16777216	; 0xff000000
   423f8:	teqne	r3, #-16777216	; 0xff000000
   423fc:	eorne	r1, r1, #939524096	; 0x38000000
   42400:	bxne	lr
   42404:	bics	r2, r2, #-16777216	; 0xff000000
   42408:	bxeq	lr
   4240c:	teq	r3, #-16777216	; 0xff000000
   42410:	orreq	r1, r1, #524288	; 0x80000
   42414:	bxeq	lr
   42418:	push	{r4, r5, lr}
   4241c:	mov	r4, #896	; 0x380
   42420:	and	r5, r1, #-2147483648	; 0x80000000
   42424:	bic	r1, r1, #-2147483648	; 0x80000000
   42428:	b	42234 <__assert_fail@plt+0x2fc40>
   4242c:	orrs	r2, r0, r1
   42430:	bxeq	lr
   42434:	push	{r4, r5, lr}
   42438:	mov	r5, #0
   4243c:	b	4245c <__assert_fail@plt+0x2fe68>
   42440:	orrs	r2, r0, r1
   42444:	bxeq	lr
   42448:	push	{r4, r5, lr}
   4244c:	ands	r5, r1, #-2147483648	; 0x80000000
   42450:	bpl	4245c <__assert_fail@plt+0x2fe68>
   42454:	rsbs	r0, r0, #0
   42458:	rsc	r1, r1, #0
   4245c:	mov	r4, #1024	; 0x400
   42460:	add	r4, r4, #50	; 0x32
   42464:	lsrs	ip, r1, #22
   42468:	beq	421d8 <__assert_fail@plt+0x2fbe4>
   4246c:	mov	r2, #3
   42470:	lsrs	ip, ip, #3
   42474:	addne	r2, r2, #3
   42478:	lsrs	ip, ip, #3
   4247c:	addne	r2, r2, #3
   42480:	add	r2, r2, ip, lsr #3
   42484:	rsb	r3, r2, #32
   42488:	lsl	ip, r0, r3
   4248c:	lsr	r0, r0, r2
   42490:	orr	r0, r0, r1, lsl r3
   42494:	lsr	r1, r1, r2
   42498:	add	r4, r4, r2
   4249c:	b	421d8 <__assert_fail@plt+0x2fbe4>
   424a0:	cmp	r3, #0
   424a4:	cmpeq	r2, #0
   424a8:	bne	424cc <__assert_fail@plt+0x2fed8>
   424ac:	cmp	r1, #0
   424b0:	movlt	r1, #-2147483648	; 0x80000000
   424b4:	movlt	r0, #0
   424b8:	blt	424c8 <__assert_fail@plt+0x2fed4>
   424bc:	cmpeq	r0, #0
   424c0:	mvnne	r1, #-2147483648	; 0x80000000
   424c4:	mvnne	r0, #0
   424c8:	b	425b0 <__assert_fail@plt+0x2ffbc>
   424cc:	sub	sp, sp, #8
   424d0:	push	{sp, lr}
   424d4:	cmp	r1, #0
   424d8:	blt	424f8 <__assert_fail@plt+0x2ff04>
   424dc:	cmp	r3, #0
   424e0:	blt	4252c <__assert_fail@plt+0x2ff38>
   424e4:	bl	42600 <__assert_fail@plt+0x3000c>
   424e8:	ldr	lr, [sp, #4]
   424ec:	add	sp, sp, #8
   424f0:	pop	{r2, r3}
   424f4:	bx	lr
   424f8:	rsbs	r0, r0, #0
   424fc:	sbc	r1, r1, r1, lsl #1
   42500:	cmp	r3, #0
   42504:	blt	42550 <__assert_fail@plt+0x2ff5c>
   42508:	bl	42600 <__assert_fail@plt+0x3000c>
   4250c:	ldr	lr, [sp, #4]
   42510:	add	sp, sp, #8
   42514:	pop	{r2, r3}
   42518:	rsbs	r0, r0, #0
   4251c:	sbc	r1, r1, r1, lsl #1
   42520:	rsbs	r2, r2, #0
   42524:	sbc	r3, r3, r3, lsl #1
   42528:	bx	lr
   4252c:	rsbs	r2, r2, #0
   42530:	sbc	r3, r3, r3, lsl #1
   42534:	bl	42600 <__assert_fail@plt+0x3000c>
   42538:	ldr	lr, [sp, #4]
   4253c:	add	sp, sp, #8
   42540:	pop	{r2, r3}
   42544:	rsbs	r0, r0, #0
   42548:	sbc	r1, r1, r1, lsl #1
   4254c:	bx	lr
   42550:	rsbs	r2, r2, #0
   42554:	sbc	r3, r3, r3, lsl #1
   42558:	bl	42600 <__assert_fail@plt+0x3000c>
   4255c:	ldr	lr, [sp, #4]
   42560:	add	sp, sp, #8
   42564:	pop	{r2, r3}
   42568:	rsbs	r2, r2, #0
   4256c:	sbc	r3, r3, r3, lsl #1
   42570:	bx	lr
   42574:	cmp	r3, #0
   42578:	cmpeq	r2, #0
   4257c:	bne	42594 <__assert_fail@plt+0x2ffa0>
   42580:	cmp	r1, #0
   42584:	cmpeq	r0, #0
   42588:	mvnne	r1, #0
   4258c:	mvnne	r0, #0
   42590:	b	425b0 <__assert_fail@plt+0x2ffbc>
   42594:	sub	sp, sp, #8
   42598:	push	{sp, lr}
   4259c:	bl	42600 <__assert_fail@plt+0x3000c>
   425a0:	ldr	lr, [sp, #4]
   425a4:	add	sp, sp, #8
   425a8:	pop	{r2, r3}
   425ac:	bx	lr
   425b0:	push	{r1, lr}
   425b4:	mov	r0, #8
   425b8:	bl	11eec <raise@plt>
   425bc:	pop	{r1, pc}
   425c0:	vmov	d6, r0, r1
   425c4:	vldr	d7, [pc, #36]	; 425f0 <__assert_fail@plt+0x2fffc>
   425c8:	vldr	d5, [pc, #40]	; 425f8 <__assert_fail@plt+0x30004>
   425cc:	vmul.f64	d7, d6, d7
   425d0:	vcvt.u32.f64	s14, d7
   425d4:	vcvt.f64.u32	d4, s14
   425d8:	vmov	r1, s14
   425dc:	vmls.f64	d6, d4, d5
   425e0:	vcvt.u32.f64	s15, d6
   425e4:	vmov	r0, s15
   425e8:	bx	lr
   425ec:	nop			; (mov r0, r0)
   425f0:	andeq	r0, r0, r0
   425f4:	ldclcc	0, cr0, [r0]
   425f8:	andeq	r0, r0, r0
   425fc:	mvnsmi	r0, r0
   42600:	cmp	r1, r3
   42604:	cmpeq	r0, r2
   42608:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4260c:	mov	r4, r0
   42610:	movcc	r0, #0
   42614:	mov	r5, r1
   42618:	ldr	lr, [sp, #36]	; 0x24
   4261c:	movcc	r1, r0
   42620:	bcc	4271c <__assert_fail@plt+0x30128>
   42624:	cmp	r3, #0
   42628:	clzeq	ip, r2
   4262c:	clzne	ip, r3
   42630:	addeq	ip, ip, #32
   42634:	cmp	r5, #0
   42638:	clzeq	r1, r4
   4263c:	addeq	r1, r1, #32
   42640:	clzne	r1, r5
   42644:	sub	ip, ip, r1
   42648:	sub	sl, ip, #32
   4264c:	lsl	r9, r3, ip
   42650:	rsb	fp, ip, #32
   42654:	orr	r9, r9, r2, lsl sl
   42658:	orr	r9, r9, r2, lsr fp
   4265c:	lsl	r8, r2, ip
   42660:	cmp	r5, r9
   42664:	cmpeq	r4, r8
   42668:	movcc	r0, #0
   4266c:	movcc	r1, r0
   42670:	bcc	4268c <__assert_fail@plt+0x30098>
   42674:	mov	r0, #1
   42678:	subs	r4, r4, r8
   4267c:	lsl	r1, r0, sl
   42680:	orr	r1, r1, r0, lsr fp
   42684:	lsl	r0, r0, ip
   42688:	sbc	r5, r5, r9
   4268c:	cmp	ip, #0
   42690:	beq	4271c <__assert_fail@plt+0x30128>
   42694:	lsr	r6, r8, #1
   42698:	orr	r6, r6, r9, lsl #31
   4269c:	lsr	r7, r9, #1
   426a0:	mov	r2, ip
   426a4:	b	426c8 <__assert_fail@plt+0x300d4>
   426a8:	subs	r3, r4, r6
   426ac:	sbc	r8, r5, r7
   426b0:	adds	r3, r3, r3
   426b4:	adc	r8, r8, r8
   426b8:	adds	r4, r3, #1
   426bc:	adc	r5, r8, #0
   426c0:	subs	r2, r2, #1
   426c4:	beq	426e4 <__assert_fail@plt+0x300f0>
   426c8:	cmp	r5, r7
   426cc:	cmpeq	r4, r6
   426d0:	bcs	426a8 <__assert_fail@plt+0x300b4>
   426d4:	adds	r4, r4, r4
   426d8:	adc	r5, r5, r5
   426dc:	subs	r2, r2, #1
   426e0:	bne	426c8 <__assert_fail@plt+0x300d4>
   426e4:	lsr	r3, r4, ip
   426e8:	orr	r3, r3, r5, lsl fp
   426ec:	lsr	r2, r5, ip
   426f0:	orr	r3, r3, r5, lsr sl
   426f4:	adds	r0, r0, r4
   426f8:	mov	r4, r3
   426fc:	lsl	r3, r2, ip
   42700:	orr	r3, r3, r4, lsl sl
   42704:	lsl	ip, r4, ip
   42708:	orr	r3, r3, r4, lsr fp
   4270c:	adc	r1, r1, r5
   42710:	subs	r0, r0, ip
   42714:	mov	r5, r2
   42718:	sbc	r1, r1, r3
   4271c:	cmp	lr, #0
   42720:	strdne	r4, [lr]
   42724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42728:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   4272c:	mov	r7, r0
   42730:	ldr	r6, [pc, #72]	; 42780 <__assert_fail@plt+0x3018c>
   42734:	ldr	r5, [pc, #72]	; 42784 <__assert_fail@plt+0x30190>
   42738:	add	r6, pc, r6
   4273c:	add	r5, pc, r5
   42740:	sub	r6, r6, r5
   42744:	mov	r8, r1
   42748:	mov	r9, r2
   4274c:	bl	11e84 <pthread_mutex_unlock@plt-0x20>
   42750:	asrs	r6, r6, #2
   42754:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   42758:	mov	r4, #0
   4275c:	add	r4, r4, #1
   42760:	ldr	r3, [r5], #4
   42764:	mov	r2, r9
   42768:	mov	r1, r8
   4276c:	mov	r0, r7
   42770:	blx	r3
   42774:	cmp	r6, r4
   42778:	bne	4275c <__assert_fail@plt+0x30168>
   4277c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   42780:	andeq	r6, r1, r4, asr #15
   42784:			; <UNDEFINED> instruction: 0x000167bc
   42788:	bx	lr
   4278c:	ldr	r3, [pc, #12]	; 427a0 <__assert_fail@plt+0x301ac>
   42790:	mov	r1, #0
   42794:	add	r3, pc, r3
   42798:	ldr	r2, [r3]
   4279c:	b	1236c <__cxa_atexit@plt>
   427a0:	andeq	r6, r1, ip, ror #21

Disassembly of section .fini:

000427a4 <.fini>:
   427a4:	push	{r3, lr}
   427a8:	pop	{r3, pc}
