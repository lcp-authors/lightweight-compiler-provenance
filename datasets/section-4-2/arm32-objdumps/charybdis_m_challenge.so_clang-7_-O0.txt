
../repos/charybdis/modules/.libs/m_challenge.so:     file format elf32-littlearm


Disassembly of section .init:

0000099c <_init>:
 99c:	push	{r3, lr}
 9a0:	bl	b30 <call_weak_fn>
 9a4:	pop	{r3, pc}

Disassembly of section .plt:

000009a8 <.plt>:
 9a8:	push	{lr}		; (str lr, [sp, #-4]!)
 9ac:	ldr	lr, [pc, #4]	; 9b8 <.plt+0x10>
 9b0:	add	lr, pc, lr
 9b4:	ldr	pc, [lr, #8]!
 9b8:	.word	0x00011648

000009bc <calloc@plt>:
 9bc:	add	ip, pc, #0, 12
 9c0:	add	ip, ip, #69632	; 0x11000
 9c4:	ldr	pc, [ip, #1608]!	; 0x648

000009c8 <rb_current_time@plt>:
 9c8:	add	ip, pc, #0, 12
 9cc:	add	ip, ip, #69632	; 0x11000
 9d0:	ldr	pc, [ip, #1600]!	; 0x640

000009d4 <__cxa_finalize@plt>:
 9d4:	add	ip, pc, #0, 12
 9d8:	add	ip, ip, #69632	; 0x11000
 9dc:	ldr	pc, [ip, #1592]!	; 0x638

000009e0 <RSA_public_encrypt@plt>:
 9e0:	add	ip, pc, #0, 12
 9e4:	add	ip, ip, #69632	; 0x11000
 9e8:	ldr	pc, [ip, #1584]!	; 0x630

000009ec <sendto_one@plt>:
 9ec:	add	ip, pc, #0, 12
 9f0:	add	ip, ip, #69632	; 0x11000
 9f4:	ldr	pc, [ip, #1576]!	; 0x628

000009f8 <free@plt>:
 9f8:	add	ip, pc, #0, 12
 9fc:	add	ip, ip, #69632	; 0x11000
 a00:	ldr	pc, [ip, #1568]!	; 0x620

00000a04 <rb_strcasecmp@plt>:
 a04:	add	ip, pc, #0, 12
 a08:	add	ip, ip, #69632	; 0x11000
 a0c:	ldr	pc, [ip, #1560]!	; 0x618

00000a10 <RSA_size@plt>:
 a10:	add	ip, pc, #0, 12
 a14:	add	ip, ip, #69632	; 0x11000
 a18:	ldr	pc, [ip, #1552]!	; 0x610

00000a1c <rb_outofmemory@plt>:
 a1c:	add	ip, pc, #0, 12
 a20:	add	ip, ip, #69632	; 0x11000
 a24:	ldr	pc, [ip, #1544]!	; 0x608

00000a28 <memcmp@plt>:
 a28:	add	ip, pc, #0, 12
 a2c:	add	ip, ip, #69632	; 0x11000
 a30:	ldr	pc, [ip, #1536]!	; 0x600

00000a34 <sendto_realops_snomask@plt>:
 a34:	add	ip, pc, #0, 12
 a38:	add	ip, ip, #69632	; 0x11000
 a3c:	ldr	pc, [ip, #1528]!	; 0x5f8

00000a40 <rb_base64_decode@plt>:
 a40:	add	ip, pc, #0, 12
 a44:	add	ip, ip, #69632	; 0x11000
 a48:	ldr	pc, [ip, #1520]!	; 0x5f0

00000a4c <strcpy@plt>:
 a4c:	add	ip, pc, #0, 12
 a50:	add	ip, ip, #69632	; 0x11000
 a54:	ldr	pc, [ip, #1512]!	; 0x5e8

00000a58 <malloc@plt>:
 a58:	add	ip, pc, #0, 12
 a5c:	add	ip, ip, #69632	; 0x11000
 a60:	ldr	pc, [ip, #1504]!	; 0x5e0

00000a64 <rb_get_random@plt>:
 a64:	add	ip, pc, #0, 12
 a68:	add	ip, ip, #69632	; 0x11000
 a6c:	ldr	pc, [ip, #1496]!	; 0x5d8

00000a70 <__gmon_start__@plt>:
 a70:	add	ip, pc, #0, 12
 a74:	add	ip, ip, #69632	; 0x11000
 a78:	ldr	pc, [ip, #1488]!	; 0x5d0

00000a7c <OPENSSL_init_crypto@plt>:
 a7c:	add	ip, pc, #0, 12
 a80:	add	ip, ip, #69632	; 0x11000
 a84:	ldr	pc, [ip, #1480]!	; 0x5c8

00000a88 <send_oper_motd@plt>:
 a88:	add	ip, pc, #0, 12
 a8c:	add	ip, ip, #69632	; 0x11000
 a90:	ldr	pc, [ip, #1472]!	; 0x5c0

00000a94 <sendto_one_numeric@plt>:
 a94:	add	ip, pc, #0, 12
 a98:	add	ip, ip, #69632	; 0x11000
 a9c:	ldr	pc, [ip, #1464]!	; 0x5b8

00000aa0 <strlen@plt>:
 aa0:	add	ip, pc, #0, 12
 aa4:	add	ip, ip, #69632	; 0x11000
 aa8:	ldr	pc, [ip, #1456]!	; 0x5b0

00000aac <SHA1_Update@plt>:
 aac:	add	ip, pc, #0, 12
 ab0:	add	ip, ip, #69632	; 0x11000
 ab4:	ldr	pc, [ip, #1448]!	; 0x5a8

00000ab8 <ERR_error_string@plt>:
 ab8:	add	ip, pc, #0, 12
 abc:	add	ip, ip, #69632	; 0x11000
 ac0:	ldr	pc, [ip, #1440]!	; 0x5a0

00000ac4 <ilog@plt>:
 ac4:	add	ip, pc, #0, 12
 ac8:	add	ip, ip, #69632	; 0x11000
 acc:	ldr	pc, [ip, #1432]!	; 0x598

00000ad0 <SHA1_Init@plt>:
 ad0:	add	ip, pc, #0, 12
 ad4:	add	ip, ip, #69632	; 0x11000
 ad8:	ldr	pc, [ip, #1424]!	; 0x590

00000adc <ERR_get_error@plt>:
 adc:	add	ip, pc, #0, 12
 ae0:	add	ip, ip, #69632	; 0x11000
 ae4:	ldr	pc, [ip, #1416]!	; 0x588

00000ae8 <sendto_one_notice@plt>:
 ae8:	add	ip, pc, #0, 12
 aec:	add	ip, ip, #69632	; 0x11000
 af0:	ldr	pc, [ip, #1408]!	; 0x580

00000af4 <rb_strlcpy@plt>:
 af4:	add	ip, pc, #0, 12
 af8:	add	ip, ip, #69632	; 0x11000
 afc:	ldr	pc, [ip, #1400]!	; 0x578

00000b00 <find_oper_conf@plt>:
 b00:	add	ip, pc, #0, 12
 b04:	add	ip, ip, #69632	; 0x11000
 b08:	ldr	pc, [ip, #1392]!	; 0x570

00000b0c <oper_up@plt>:
 b0c:	add	ip, pc, #0, 12
 b10:	add	ip, ip, #69632	; 0x11000
 b14:	ldr	pc, [ip, #1384]!	; 0x568

00000b18 <rb_base64_encode@plt>:
 b18:	add	ip, pc, #0, 12
 b1c:	add	ip, ip, #69632	; 0x11000
 b20:	ldr	pc, [ip, #1376]!	; 0x560

00000b24 <SHA1_Final@plt>:
 b24:	add	ip, pc, #0, 12
 b28:	add	ip, ip, #69632	; 0x11000
 b2c:	ldr	pc, [ip, #1368]!	; 0x558

Disassembly of section .text:

00000b30 <call_weak_fn>:
     b30:	ldr	r3, [pc, #20]	; b4c <call_weak_fn+0x1c>
     b34:	ldr	r2, [pc, #20]	; b50 <call_weak_fn+0x20>
     b38:	add	r3, pc, r3
     b3c:	ldr	r2, [r3, r2]
     b40:	cmp	r2, #0
     b44:	bxeq	lr
     b48:	b	a70 <__gmon_start__@plt>
     b4c:	.word	0x000114c0
     b50:	.word	0x00000090

00000b54 <deregister_tm_clones>:
     b54:	ldr	r0, [pc, #44]	; b88 <deregister_tm_clones+0x34>
     b58:	ldr	r3, [pc, #44]	; b8c <deregister_tm_clones+0x38>
     b5c:	add	r0, pc, r0
     b60:	add	r3, pc, r3
     b64:	cmp	r3, r0
     b68:	ldr	r3, [pc, #32]	; b90 <deregister_tm_clones+0x3c>
     b6c:	add	r3, pc, r3
     b70:	bxeq	lr
     b74:	ldr	r2, [pc, #24]	; b94 <deregister_tm_clones+0x40>
     b78:	ldr	r3, [r3, r2]
     b7c:	cmp	r3, #0
     b80:	bxeq	lr
     b84:	bx	r3
     b88:	.word	0x000115b4
     b8c:	.word	0x000115b0
     b90:	.word	0x0001148c
     b94:	.word	0x0000008c

00000b98 <register_tm_clones>:
     b98:	ldr	r0, [pc, #56]	; bd8 <register_tm_clones+0x40>
     b9c:	ldr	r3, [pc, #56]	; bdc <register_tm_clones+0x44>
     ba0:	add	r0, pc, r0
     ba4:	add	r3, pc, r3
     ba8:	sub	r1, r3, r0
     bac:	ldr	r3, [pc, #44]	; be0 <register_tm_clones+0x48>
     bb0:	asr	r1, r1, #2
     bb4:	add	r3, pc, r3
     bb8:	add	r1, r1, r1, lsr #31
     bbc:	asrs	r1, r1, #1
     bc0:	bxeq	lr
     bc4:	ldr	r2, [pc, #24]	; be4 <register_tm_clones+0x4c>
     bc8:	ldr	r3, [r3, r2]
     bcc:	cmp	r3, #0
     bd0:	bxeq	lr
     bd4:	bx	r3
     bd8:	.word	0x00011570
     bdc:	.word	0x0001156c
     be0:	.word	0x00011444
     be4:	.word	0x00000094

00000be8 <__do_global_dtors_aux>:
     be8:	ldr	r3, [pc, #76]	; c3c <__do_global_dtors_aux+0x54>
     bec:	ldr	r2, [pc, #76]	; c40 <__do_global_dtors_aux+0x58>
     bf0:	add	r3, pc, r3
     bf4:	add	r2, pc, r2
     bf8:	ldrb	r3, [r3]
     bfc:	cmp	r3, #0
     c00:	bxne	lr
     c04:	ldr	r3, [pc, #56]	; c44 <__do_global_dtors_aux+0x5c>
     c08:	push	{r4, lr}
     c0c:	ldr	r3, [r2, r3]
     c10:	cmp	r3, #0
     c14:	beq	c24 <__do_global_dtors_aux+0x3c>
     c18:	ldr	r3, [pc, #40]	; c48 <__do_global_dtors_aux+0x60>
     c1c:	ldr	r0, [pc, r3]
     c20:	bl	9d4 <__cxa_finalize@plt>
     c24:	bl	b54 <deregister_tm_clones>
     c28:	ldr	r3, [pc, #28]	; c4c <__do_global_dtors_aux+0x64>
     c2c:	mov	r2, #1
     c30:	add	r3, pc, r3
     c34:	strb	r2, [r3]
     c38:	pop	{r4, pc}
     c3c:	.word	0x00011520
     c40:	.word	0x00011404
     c44:	.word	0x00000088
     c48:	.word	0x0001147c
     c4c:	.word	0x000114e0

00000c50 <frame_dummy>:
     c50:	b	b98 <register_tm_clones>

00000c54 <m_challenge>:
     c54:	push	{r4, sl, fp, lr}
     c58:	add	fp, sp, #8
     c5c:	sub	sp, sp, #552	; 0x228
     c60:	ldr	ip, [fp, #8]
     c64:	str	r0, [fp, #-12]
     c68:	str	r1, [fp, #-16]
     c6c:	str	r2, [fp, #-20]	; 0xffffffec
     c70:	str	r3, [fp, #-24]	; 0xffffffe8
     c74:	movw	r0, #0
     c78:	str	r0, [fp, #-32]	; 0xffffffe0
     c7c:	str	r0, [sp, #108]	; 0x6c
     c80:	ldr	r0, [fp, #-20]	; 0xffffffec
     c84:	ldr	r0, [r0, #56]	; 0x38
     c88:	and	r0, r0, #4096	; 0x1000
     c8c:	cmp	r0, #0
     c90:	str	ip, [sp, #100]	; 0x64
     c94:	beq	cc8 <m_challenge+0x74>
     c98:	ldr	r0, [pc, #2304]	; 15a0 <m_challenge+0x94c>
     c9c:	add	r1, pc, r0
     ca0:	ldr	r0, [pc, #2300]	; 15a4 <m_challenge+0x950>
     ca4:	ldr	r0, [pc, r0]
     ca8:	add	r2, r0, #88	; 0x58
     cac:	ldr	r0, [fp, #-20]	; 0xffffffec
     cb0:	ldr	r3, [fp, #-20]	; 0xffffffec
     cb4:	add	r3, r3, #88	; 0x58
     cb8:	bl	9ec <sendto_one@plt>
     cbc:	ldr	r0, [fp, #-20]	; 0xffffffec
     cc0:	bl	a88 <send_oper_motd@plt>
     cc4:	b	1514 <m_challenge+0x8c0>
     cc8:	ldr	r0, [fp, #8]
     ccc:	ldr	r0, [r0, #4]
     cd0:	ldrb	r0, [r0]
     cd4:	cmp	r0, #43	; 0x2b
     cd8:	bne	10dc <m_challenge+0x488>
     cdc:	ldr	r0, [fp, #-20]	; 0xffffffec
     ce0:	ldr	r0, [r0, #432]	; 0x1b0
     ce4:	ldr	r0, [r0, #284]	; 0x11c
     ce8:	movw	r1, #0
     cec:	cmp	r0, r1
     cf0:	bne	cf8 <m_challenge+0xa4>
     cf4:	b	1514 <m_challenge+0x8c0>
     cf8:	bl	9c8 <rb_current_time@plt>
     cfc:	ldr	lr, [fp, #-20]	; 0xffffffec
     d00:	ldr	lr, [lr, #432]	; 0x1b0
     d04:	ldr	lr, [lr, #304]	; 0x130
     d08:	sub	r0, r0, lr
     d0c:	cmp	r0, #180	; 0xb4
     d10:	ble	df8 <m_challenge+0x1a4>
     d14:	ldr	r0, [pc, #2168]	; 1594 <m_challenge+0x940>
     d18:	add	r1, pc, r0
     d1c:	ldr	r0, [pc, #2164]	; 1598 <m_challenge+0x944>
     d20:	ldr	r0, [pc, r0]
     d24:	add	r2, r0, #88	; 0x58
     d28:	ldr	r0, [fp, #-20]	; 0xffffffec
     d2c:	ldr	r3, [fp, #-20]	; 0xffffffec
     d30:	add	r3, r3, #88	; 0x58
     d34:	bl	9ec <sendto_one@plt>
     d38:	ldr	r0, [pc, #2128]	; 1590 <m_challenge+0x93c>
     d3c:	add	r1, pc, r0
     d40:	ldr	r0, [fp, #-20]	; 0xffffffec
     d44:	ldr	r0, [r0, #24]
     d48:	ldr	r2, [r0, #32]
     d4c:	ldr	r0, [fp, #-20]	; 0xffffffec
     d50:	add	r3, r0, #88	; 0x58
     d54:	ldr	r0, [fp, #-20]	; 0xffffffec
     d58:	add	r0, r0, #152	; 0x98
     d5c:	ldr	lr, [fp, #-20]	; 0xffffffec
     d60:	add	lr, lr, #163	; 0xa3
     d64:	ldr	ip, [fp, #-20]	; 0xffffffec
     d68:	movw	r4, #291	; 0x123
     d6c:	add	ip, ip, r4
     d70:	movw	r4, #4
     d74:	str	r0, [sp, #96]	; 0x60
     d78:	mov	r0, r4
     d7c:	ldr	r4, [sp, #96]	; 0x60
     d80:	str	r4, [sp]
     d84:	str	lr, [sp, #4]
     d88:	str	ip, [sp, #8]
     d8c:	bl	ac4 <ilog@plt>
     d90:	ldr	r0, [pc, #2036]	; 158c <m_challenge+0x938>
     d94:	ldr	r0, [pc, r0]
     d98:	ldr	r0, [r0, #84]	; 0x54
     d9c:	cmp	r0, #0
     da0:	beq	dec <m_challenge+0x198>
     da4:	ldr	r0, [pc, #2032]	; 159c <m_challenge+0x948>
     da8:	add	r2, pc, r0
     dac:	ldr	r0, [fp, #-20]	; 0xffffffec
     db0:	add	r3, r0, #88	; 0x58
     db4:	ldr	r0, [fp, #-20]	; 0xffffffec
     db8:	add	r0, r0, #152	; 0x98
     dbc:	ldr	r1, [fp, #-20]	; 0xffffffec
     dc0:	add	r1, r1, #163	; 0xa3
     dc4:	movw	ip, #256	; 0x100
     dc8:	str	r0, [sp, #92]	; 0x5c
     dcc:	mov	r0, ip
     dd0:	str	r1, [sp, #88]	; 0x58
     dd4:	mov	r1, ip
     dd8:	ldr	ip, [sp, #92]	; 0x5c
     ddc:	str	ip, [sp]
     de0:	ldr	lr, [sp, #88]	; 0x58
     de4:	str	lr, [sp, #4]
     de8:	bl	a34 <sendto_realops_snomask@plt>
     dec:	ldr	r0, [fp, #-20]	; 0xffffffec
     df0:	bl	15a8 <cleanup_challenge>
     df4:	b	1514 <m_challenge+0x8c0>
     df8:	ldr	r0, [fp, #8]
     dfc:	ldr	r1, [r0, #4]
     e00:	add	r1, r1, #1
     e04:	str	r1, [r0, #4]
     e08:	ldr	r0, [fp, #8]
     e0c:	ldr	r0, [r0, #4]
     e10:	ldr	r1, [fp, #8]
     e14:	ldr	r1, [r1, #4]
     e18:	str	r0, [sp, #84]	; 0x54
     e1c:	mov	r0, r1
     e20:	bl	aa0 <strlen@plt>
     e24:	ldr	r1, [sp, #84]	; 0x54
     e28:	str	r0, [sp, #80]	; 0x50
     e2c:	mov	r0, r1
     e30:	ldr	r1, [sp, #80]	; 0x50
     e34:	add	r2, sp, #108	; 0x6c
     e38:	bl	a40 <rb_base64_decode@plt>
     e3c:	str	r0, [sp, #116]	; 0x74
     e40:	ldr	r0, [sp, #108]	; 0x6c
     e44:	cmp	r0, #20
     e48:	bne	e6c <m_challenge+0x218>
     e4c:	ldr	r0, [fp, #-20]	; 0xffffffec
     e50:	ldr	r0, [r0, #432]	; 0x1b0
     e54:	ldr	r0, [r0, #284]	; 0x11c
     e58:	ldr	r1, [sp, #116]	; 0x74
     e5c:	mov	r2, #20
     e60:	bl	a28 <memcmp@plt>
     e64:	cmp	r0, #0
     e68:	beq	f58 <m_challenge+0x304>
     e6c:	ldr	r0, [pc, #1804]	; 1580 <m_challenge+0x92c>
     e70:	add	r1, pc, r0
     e74:	ldr	r0, [pc, #1800]	; 1584 <m_challenge+0x930>
     e78:	ldr	r0, [pc, r0]
     e7c:	add	r2, r0, #88	; 0x58
     e80:	ldr	r0, [fp, #-20]	; 0xffffffec
     e84:	ldr	r3, [fp, #-20]	; 0xffffffec
     e88:	add	r3, r3, #88	; 0x58
     e8c:	bl	9ec <sendto_one@plt>
     e90:	ldr	r0, [pc, #1764]	; 157c <m_challenge+0x928>
     e94:	add	r1, pc, r0
     e98:	ldr	r0, [fp, #-20]	; 0xffffffec
     e9c:	ldr	r0, [r0, #24]
     ea0:	ldr	r2, [r0, #32]
     ea4:	ldr	r0, [fp, #-20]	; 0xffffffec
     ea8:	add	r3, r0, #88	; 0x58
     eac:	ldr	r0, [fp, #-20]	; 0xffffffec
     eb0:	add	r0, r0, #152	; 0x98
     eb4:	ldr	lr, [fp, #-20]	; 0xffffffec
     eb8:	add	lr, lr, #163	; 0xa3
     ebc:	ldr	ip, [fp, #-20]	; 0xffffffec
     ec0:	movw	r4, #291	; 0x123
     ec4:	add	ip, ip, r4
     ec8:	movw	r4, #4
     ecc:	str	r0, [sp, #76]	; 0x4c
     ed0:	mov	r0, r4
     ed4:	ldr	r4, [sp, #76]	; 0x4c
     ed8:	str	r4, [sp]
     edc:	str	lr, [sp, #4]
     ee0:	str	ip, [sp, #8]
     ee4:	bl	ac4 <ilog@plt>
     ee8:	ldr	r0, [pc, #1672]	; 1578 <m_challenge+0x924>
     eec:	ldr	r0, [pc, r0]
     ef0:	ldr	r0, [r0, #84]	; 0x54
     ef4:	cmp	r0, #0
     ef8:	beq	f44 <m_challenge+0x2f0>
     efc:	ldr	r0, [pc, #1668]	; 1588 <m_challenge+0x934>
     f00:	add	r2, pc, r0
     f04:	ldr	r0, [fp, #-20]	; 0xffffffec
     f08:	add	r3, r0, #88	; 0x58
     f0c:	ldr	r0, [fp, #-20]	; 0xffffffec
     f10:	add	r0, r0, #152	; 0x98
     f14:	ldr	r1, [fp, #-20]	; 0xffffffec
     f18:	add	r1, r1, #163	; 0xa3
     f1c:	movw	ip, #256	; 0x100
     f20:	str	r0, [sp, #72]	; 0x48
     f24:	mov	r0, ip
     f28:	str	r1, [sp, #68]	; 0x44
     f2c:	mov	r1, ip
     f30:	ldr	ip, [sp, #72]	; 0x48
     f34:	str	ip, [sp]
     f38:	ldr	lr, [sp, #68]	; 0x44
     f3c:	str	lr, [sp, #4]
     f40:	bl	a34 <sendto_realops_snomask@plt>
     f44:	ldr	r0, [sp, #116]	; 0x74
     f48:	bl	1620 <rb_free>
     f4c:	ldr	r0, [fp, #-20]	; 0xffffffec
     f50:	bl	15a8 <cleanup_challenge>
     f54:	b	1514 <m_challenge+0x8c0>
     f58:	ldr	r0, [sp, #116]	; 0x74
     f5c:	bl	1620 <rb_free>
     f60:	ldr	r0, [fp, #-20]	; 0xffffffec
     f64:	add	r0, r0, #152	; 0x98
     f68:	ldr	lr, [fp, #-20]	; 0xffffffec
     f6c:	add	r1, lr, #227	; 0xe3
     f70:	ldr	lr, [fp, #-20]	; 0xffffffec
     f74:	movw	r2, #291	; 0x123
     f78:	add	r2, lr, r2
     f7c:	ldr	lr, [fp, #-20]	; 0xffffffec
     f80:	ldr	lr, [lr, #24]
     f84:	ldr	r3, [lr, #32]
     f88:	bl	b00 <find_oper_conf@plt>
     f8c:	str	r0, [fp, #-28]	; 0xffffffe4
     f90:	ldr	r0, [fp, #-28]	; 0xffffffe4
     f94:	movw	r1, #0
     f98:	cmp	r0, r1
     f9c:	bne	106c <m_challenge+0x418>
     fa0:	ldr	r0, [pc, #1480]	; 1570 <m_challenge+0x91c>
     fa4:	add	r2, pc, r0
     fa8:	ldr	r0, [fp, #-20]	; 0xffffffec
     fac:	movw	r1, #491	; 0x1eb
     fb0:	bl	a94 <sendto_one_numeric@plt>
     fb4:	ldr	r0, [pc, #1456]	; 156c <m_challenge+0x918>
     fb8:	add	r1, pc, r0
     fbc:	ldr	r0, [fp, #-20]	; 0xffffffec
     fc0:	ldr	r0, [r0, #24]
     fc4:	ldr	r2, [r0, #32]
     fc8:	ldr	r0, [fp, #-20]	; 0xffffffec
     fcc:	add	r3, r0, #88	; 0x58
     fd0:	ldr	r0, [fp, #-20]	; 0xffffffec
     fd4:	add	r0, r0, #152	; 0x98
     fd8:	ldr	lr, [fp, #-20]	; 0xffffffec
     fdc:	add	lr, lr, #163	; 0xa3
     fe0:	ldr	ip, [fp, #-20]	; 0xffffffec
     fe4:	movw	r4, #291	; 0x123
     fe8:	add	ip, ip, r4
     fec:	movw	r4, #4
     ff0:	str	r0, [sp, #64]	; 0x40
     ff4:	mov	r0, r4
     ff8:	ldr	r4, [sp, #64]	; 0x40
     ffc:	str	r4, [sp]
    1000:	str	lr, [sp, #4]
    1004:	str	ip, [sp, #8]
    1008:	bl	ac4 <ilog@plt>
    100c:	ldr	r0, [pc, #1364]	; 1568 <m_challenge+0x914>
    1010:	ldr	r0, [pc, r0]
    1014:	ldr	r0, [r0, #84]	; 0x54
    1018:	cmp	r0, #0
    101c:	beq	1068 <m_challenge+0x414>
    1020:	ldr	r0, [pc, #1356]	; 1574 <m_challenge+0x920>
    1024:	add	r2, pc, r0
    1028:	ldr	r0, [fp, #-20]	; 0xffffffec
    102c:	add	r3, r0, #88	; 0x58
    1030:	ldr	r0, [fp, #-20]	; 0xffffffec
    1034:	add	r0, r0, #152	; 0x98
    1038:	ldr	r1, [fp, #-20]	; 0xffffffec
    103c:	add	r1, r1, #163	; 0xa3
    1040:	movw	ip, #256	; 0x100
    1044:	str	r0, [sp, #60]	; 0x3c
    1048:	mov	r0, ip
    104c:	str	r1, [sp, #56]	; 0x38
    1050:	mov	r1, ip
    1054:	ldr	ip, [sp, #60]	; 0x3c
    1058:	str	ip, [sp]
    105c:	ldr	lr, [sp, #56]	; 0x38
    1060:	str	lr, [sp, #4]
    1064:	bl	a34 <sendto_realops_snomask@plt>
    1068:	b	1514 <m_challenge+0x8c0>
    106c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1070:	bl	15a8 <cleanup_challenge>
    1074:	ldr	r0, [fp, #-20]	; 0xffffffec
    1078:	ldr	r1, [fp, #-28]	; 0xffffffe4
    107c:	bl	b0c <oper_up@plt>
    1080:	ldr	r0, [pc, #1244]	; 1564 <m_challenge+0x910>
    1084:	add	r1, pc, r0
    1088:	ldr	r0, [fp, #-20]	; 0xffffffec
    108c:	ldr	r0, [r0, #24]
    1090:	ldr	r2, [r0, #32]
    1094:	ldr	r0, [fp, #-20]	; 0xffffffec
    1098:	add	r3, r0, #88	; 0x58
    109c:	ldr	r0, [fp, #-20]	; 0xffffffec
    10a0:	add	r0, r0, #152	; 0x98
    10a4:	ldr	lr, [fp, #-20]	; 0xffffffec
    10a8:	add	lr, lr, #163	; 0xa3
    10ac:	ldr	ip, [fp, #-20]	; 0xffffffec
    10b0:	movw	r4, #291	; 0x123
    10b4:	add	ip, ip, r4
    10b8:	movw	r4, #3
    10bc:	str	r0, [sp, #52]	; 0x34
    10c0:	mov	r0, r4
    10c4:	ldr	r4, [sp, #52]	; 0x34
    10c8:	str	r4, [sp]
    10cc:	str	lr, [sp, #4]
    10d0:	str	ip, [sp, #8]
    10d4:	bl	ac4 <ilog@plt>
    10d8:	b	1514 <m_challenge+0x8c0>
    10dc:	ldr	r0, [fp, #-20]	; 0xffffffec
    10e0:	bl	15a8 <cleanup_challenge>
    10e4:	ldr	r0, [fp, #-20]	; 0xffffffec
    10e8:	add	r0, r0, #152	; 0x98
    10ec:	ldr	lr, [fp, #-20]	; 0xffffffec
    10f0:	add	r1, lr, #227	; 0xe3
    10f4:	ldr	lr, [fp, #-20]	; 0xffffffec
    10f8:	movw	r2, #291	; 0x123
    10fc:	add	r2, lr, r2
    1100:	ldr	lr, [fp, #8]
    1104:	ldr	r3, [lr, #4]
    1108:	bl	b00 <find_oper_conf@plt>
    110c:	str	r0, [fp, #-28]	; 0xffffffe4
    1110:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1114:	movw	r1, #0
    1118:	cmp	r0, r1
    111c:	bne	11e8 <m_challenge+0x594>
    1120:	ldr	r0, [pc, #1076]	; 155c <m_challenge+0x908>
    1124:	add	r2, pc, r0
    1128:	ldr	r0, [fp, #-20]	; 0xffffffec
    112c:	movw	r1, #491	; 0x1eb
    1130:	bl	a94 <sendto_one_numeric@plt>
    1134:	ldr	r0, [pc, #1052]	; 1558 <m_challenge+0x904>
    1138:	add	r1, pc, r0
    113c:	ldr	r0, [fp, #8]
    1140:	ldr	r2, [r0, #4]
    1144:	ldr	r0, [fp, #-20]	; 0xffffffec
    1148:	add	r3, r0, #88	; 0x58
    114c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1150:	add	r0, r0, #152	; 0x98
    1154:	ldr	lr, [fp, #-20]	; 0xffffffec
    1158:	add	lr, lr, #163	; 0xa3
    115c:	ldr	ip, [fp, #-20]	; 0xffffffec
    1160:	movw	r4, #291	; 0x123
    1164:	add	ip, ip, r4
    1168:	movw	r4, #4
    116c:	str	r0, [sp, #48]	; 0x30
    1170:	mov	r0, r4
    1174:	ldr	r4, [sp, #48]	; 0x30
    1178:	str	r4, [sp]
    117c:	str	lr, [sp, #4]
    1180:	str	ip, [sp, #8]
    1184:	bl	ac4 <ilog@plt>
    1188:	ldr	r0, [pc, #964]	; 1554 <m_challenge+0x900>
    118c:	ldr	r0, [pc, r0]
    1190:	ldr	r0, [r0, #84]	; 0x54
    1194:	cmp	r0, #0
    1198:	beq	11e4 <m_challenge+0x590>
    119c:	ldr	r0, [pc, #956]	; 1560 <m_challenge+0x90c>
    11a0:	add	r2, pc, r0
    11a4:	ldr	r0, [fp, #-20]	; 0xffffffec
    11a8:	add	r3, r0, #88	; 0x58
    11ac:	ldr	r0, [fp, #-20]	; 0xffffffec
    11b0:	add	r0, r0, #152	; 0x98
    11b4:	ldr	r1, [fp, #-20]	; 0xffffffec
    11b8:	add	r1, r1, #163	; 0xa3
    11bc:	movw	ip, #256	; 0x100
    11c0:	str	r0, [sp, #44]	; 0x2c
    11c4:	mov	r0, ip
    11c8:	str	r1, [sp, #40]	; 0x28
    11cc:	mov	r1, ip
    11d0:	ldr	ip, [sp, #44]	; 0x2c
    11d4:	str	ip, [sp]
    11d8:	ldr	lr, [sp, #40]	; 0x28
    11dc:	str	lr, [sp, #4]
    11e0:	bl	a34 <sendto_realops_snomask@plt>
    11e4:	b	1514 <m_challenge+0x8c0>
    11e8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    11ec:	ldr	r0, [r0, #40]	; 0x28
    11f0:	movw	r1, #0
    11f4:	cmp	r0, r1
    11f8:	bne	1210 <m_challenge+0x5bc>
    11fc:	ldr	r0, [pc, #792]	; 151c <m_challenge+0x8c8>
    1200:	add	r1, pc, r0
    1204:	ldr	r0, [fp, #-20]	; 0xffffffec
    1208:	bl	ae8 <sendto_one_notice@plt>
    120c:	b	1514 <m_challenge+0x8c0>
    1210:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1214:	ldr	r0, [r0, #20]
    1218:	and	r0, r0, #524288	; 0x80000
    121c:	cmp	r0, #0
    1220:	beq	1304 <m_challenge+0x6b0>
    1224:	ldr	r0, [fp, #-20]	; 0xffffffec
    1228:	ldr	r0, [r0, #56]	; 0x38
    122c:	and	r0, r0, #16384	; 0x4000
    1230:	cmp	r0, #0
    1234:	bne	1304 <m_challenge+0x6b0>
    1238:	ldr	r0, [pc, #744]	; 1528 <m_challenge+0x8d4>
    123c:	add	r2, pc, r0
    1240:	ldr	r0, [fp, #-20]	; 0xffffffec
    1244:	movw	r1, #491	; 0x1eb
    1248:	bl	a94 <sendto_one_numeric@plt>
    124c:	ldr	r0, [pc, #720]	; 1524 <m_challenge+0x8d0>
    1250:	add	r1, pc, r0
    1254:	ldr	r0, [fp, #8]
    1258:	ldr	r2, [r0, #4]
    125c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1260:	add	r3, r0, #88	; 0x58
    1264:	ldr	r0, [fp, #-20]	; 0xffffffec
    1268:	add	r0, r0, #152	; 0x98
    126c:	ldr	lr, [fp, #-20]	; 0xffffffec
    1270:	add	lr, lr, #163	; 0xa3
    1274:	ldr	ip, [fp, #-20]	; 0xffffffec
    1278:	movw	r4, #291	; 0x123
    127c:	add	ip, ip, r4
    1280:	movw	r4, #4
    1284:	str	r0, [sp, #36]	; 0x24
    1288:	mov	r0, r4
    128c:	ldr	r4, [sp, #36]	; 0x24
    1290:	str	r4, [sp]
    1294:	str	lr, [sp, #4]
    1298:	str	ip, [sp, #8]
    129c:	bl	ac4 <ilog@plt>
    12a0:	ldr	r0, [pc, #632]	; 1520 <m_challenge+0x8cc>
    12a4:	ldr	r0, [pc, r0]
    12a8:	ldr	r0, [r0, #84]	; 0x54
    12ac:	cmp	r0, #0
    12b0:	beq	1300 <m_challenge+0x6ac>
    12b4:	ldr	r0, [pc, #624]	; 152c <m_challenge+0x8d8>
    12b8:	add	r2, pc, r0
    12bc:	ldr	r0, [fp, #-20]	; 0xffffffec
    12c0:	add	r3, r0, #88	; 0x58
    12c4:	ldr	r0, [fp, #-20]	; 0xffffffec
    12c8:	add	r0, r0, #152	; 0x98
    12cc:	ldr	r1, [fp, #-20]	; 0xffffffec
    12d0:	add	r1, r1, #163	; 0xa3
    12d4:	movw	ip, #256	; 0x100
    12d8:	str	r0, [sp, #32]
    12dc:	mov	r0, ip
    12e0:	movw	ip, #0
    12e4:	str	r1, [sp, #28]
    12e8:	mov	r1, ip
    12ec:	ldr	ip, [sp, #32]
    12f0:	str	ip, [sp]
    12f4:	ldr	lr, [sp, #28]
    12f8:	str	lr, [sp, #4]
    12fc:	bl	a34 <sendto_realops_snomask@plt>
    1300:	b	1514 <m_challenge+0x8c0>
    1304:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1308:	ldr	r0, [r0, #16]
    130c:	movw	r1, #0
    1310:	cmp	r0, r1
    1314:	beq	1418 <m_challenge+0x7c4>
    1318:	ldr	r0, [fp, #-20]	; 0xffffffec
    131c:	ldr	r0, [r0, #444]	; 0x1bc
    1320:	movw	r1, #0
    1324:	cmp	r0, r1
    1328:	beq	1348 <m_challenge+0x6f4>
    132c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1330:	ldr	r0, [r0, #444]	; 0x1bc
    1334:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1338:	ldr	r1, [r1, #16]
    133c:	bl	a04 <rb_strcasecmp@plt>
    1340:	cmp	r0, #0
    1344:	beq	1414 <m_challenge+0x7c0>
    1348:	ldr	r0, [pc, #508]	; 154c <m_challenge+0x8f8>
    134c:	add	r2, pc, r0
    1350:	ldr	r0, [fp, #-20]	; 0xffffffec
    1354:	movw	r1, #491	; 0x1eb
    1358:	bl	a94 <sendto_one_numeric@plt>
    135c:	ldr	r0, [pc, #484]	; 1548 <m_challenge+0x8f4>
    1360:	add	r1, pc, r0
    1364:	ldr	r0, [fp, #8]
    1368:	ldr	r2, [r0, #4]
    136c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1370:	add	r3, r0, #88	; 0x58
    1374:	ldr	r0, [fp, #-20]	; 0xffffffec
    1378:	add	r0, r0, #152	; 0x98
    137c:	ldr	lr, [fp, #-20]	; 0xffffffec
    1380:	add	lr, lr, #163	; 0xa3
    1384:	ldr	ip, [fp, #-20]	; 0xffffffec
    1388:	movw	r4, #291	; 0x123
    138c:	add	ip, ip, r4
    1390:	movw	r4, #4
    1394:	str	r0, [sp, #24]
    1398:	mov	r0, r4
    139c:	ldr	r4, [sp, #24]
    13a0:	str	r4, [sp]
    13a4:	str	lr, [sp, #4]
    13a8:	str	ip, [sp, #8]
    13ac:	bl	ac4 <ilog@plt>
    13b0:	ldr	r0, [pc, #396]	; 1544 <m_challenge+0x8f0>
    13b4:	ldr	r0, [pc, r0]
    13b8:	ldr	r0, [r0, #84]	; 0x54
    13bc:	cmp	r0, #0
    13c0:	beq	1410 <m_challenge+0x7bc>
    13c4:	ldr	r0, [pc, #388]	; 1550 <m_challenge+0x8fc>
    13c8:	add	r2, pc, r0
    13cc:	ldr	r0, [fp, #-20]	; 0xffffffec
    13d0:	add	r3, r0, #88	; 0x58
    13d4:	ldr	r0, [fp, #-20]	; 0xffffffec
    13d8:	add	r0, r0, #152	; 0x98
    13dc:	ldr	r1, [fp, #-20]	; 0xffffffec
    13e0:	add	r1, r1, #163	; 0xa3
    13e4:	movw	ip, #256	; 0x100
    13e8:	str	r0, [sp, #20]
    13ec:	mov	r0, ip
    13f0:	movw	ip, #0
    13f4:	str	r1, [sp, #16]
    13f8:	mov	r1, ip
    13fc:	ldr	ip, [sp, #20]
    1400:	str	ip, [sp]
    1404:	ldr	lr, [sp, #16]
    1408:	str	lr, [sp, #4]
    140c:	bl	a34 <sendto_realops_snomask@plt>
    1410:	b	1514 <m_challenge+0x8c0>
    1414:	b	1418 <m_challenge+0x7c4>
    1418:	ldr	r0, [fp, #-20]	; 0xffffffec
    141c:	ldr	r0, [r0, #432]	; 0x1b0
    1420:	add	r1, r0, #284	; 0x11c
    1424:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1428:	ldr	r2, [r0, #40]	; 0x28
    142c:	sub	r0, fp, #32
    1430:	bl	1668 <generate_challenge>
    1434:	tst	r0, #1
    1438:	beq	1504 <m_challenge+0x8b0>
    143c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1440:	str	r0, [sp, #104]	; 0x68
    1444:	bl	9c8 <rb_current_time@plt>
    1448:	ldr	lr, [fp, #-20]	; 0xffffffec
    144c:	ldr	lr, [lr, #432]	; 0x1b0
    1450:	str	r0, [lr, #304]	; 0x130
    1454:	add	r0, sp, #123	; 0x7b
    1458:	ldr	r1, [sp, #104]	; 0x68
    145c:	movw	r2, #405	; 0x195
    1460:	bl	af4 <rb_strlcpy@plt>
    1464:	ldr	r1, [pc, #200]	; 1534 <m_challenge+0x8e0>
    1468:	add	r1, pc, r1
    146c:	ldr	r2, [pc, #196]	; 1538 <m_challenge+0x8e4>
    1470:	ldr	r2, [pc, r2]
    1474:	add	r2, r2, #88	; 0x58
    1478:	add	lr, sp, #123	; 0x7b
    147c:	str	r0, [sp, #112]	; 0x70
    1480:	ldr	r0, [fp, #-20]	; 0xffffffec
    1484:	ldr	r3, [fp, #-20]	; 0xffffffec
    1488:	add	r3, r3, #88	; 0x58
    148c:	str	lr, [sp]
    1490:	bl	9ec <sendto_one@plt>
    1494:	ldr	r0, [sp, #112]	; 0x70
    1498:	movw	r1, #405	; 0x195
    149c:	cmp	r0, r1
    14a0:	bls	14b4 <m_challenge+0x860>
    14a4:	ldr	r0, [sp, #104]	; 0x68
    14a8:	add	r0, r0, #404	; 0x194
    14ac:	str	r0, [sp, #104]	; 0x68
    14b0:	b	14b8 <m_challenge+0x864>
    14b4:	b	14bc <m_challenge+0x868>
    14b8:	b	1454 <m_challenge+0x800>
    14bc:	ldr	r0, [pc, #120]	; 153c <m_challenge+0x8e8>
    14c0:	add	r1, pc, r0
    14c4:	ldr	r0, [pc, #116]	; 1540 <m_challenge+0x8ec>
    14c8:	ldr	r0, [pc, r0]
    14cc:	add	r2, r0, #88	; 0x58
    14d0:	ldr	r0, [fp, #-20]	; 0xffffffec
    14d4:	ldr	r3, [fp, #-20]	; 0xffffffec
    14d8:	add	r3, r3, #88	; 0x58
    14dc:	bl	9ec <sendto_one@plt>
    14e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    14e4:	bl	1620 <rb_free>
    14e8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    14ec:	ldr	r0, [r0]
    14f0:	bl	1844 <rb_strdup>
    14f4:	ldr	r1, [fp, #-20]	; 0xffffffec
    14f8:	ldr	r1, [r1, #24]
    14fc:	str	r0, [r1, #32]
    1500:	b	1514 <m_challenge+0x8c0>
    1504:	ldr	r0, [pc, #36]	; 1530 <m_challenge+0x8dc>
    1508:	add	r1, pc, r0
    150c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1510:	bl	ae8 <sendto_one_notice@plt>
    1514:	sub	sp, fp, #8
    1518:	pop	{r4, sl, fp, pc}
    151c:	.word	0x00000906
    1520:	.word	0x00010df0
    1524:	.word	0x000008fa
    1528:	.word	0x0000081d
    152c:	.word	0x000008cf
    1530:	.word	0x0000077f
    1534:	.word	0x000007f3
    1538:	.word	0x00010c20
    153c:	.word	0x000007aa
    1540:	.word	0x00010bc8
    1544:	.word	0x00010ce0
    1548:	.word	0x00000860
    154c:	.word	0x0000070d
    1550:	.word	0x00000847
    1554:	.word	0x00010f08
    1558:	.word	0x0000095a
    155c:	.word	0x00000935
    1560:	.word	0x00000916
    1564:	.word	0x00000a69
    1568:	.word	0x00011084
    156c:	.word	0x00000ada
    1570:	.word	0x00000ab5
    1574:	.word	0x00000a92
    1578:	.word	0x000111a8
    157c:	.word	0x00000b75
    1580:	.word	0x00000b28
    1584:	.word	0x00011218
    1588:	.word	0x00000b32
    158c:	.word	0x00011300
    1590:	.word	0x00000c7b
    1594:	.word	0x00000c80
    1598:	.word	0x00011370
    159c:	.word	0x00000c39
    15a0:	.word	0x00000c70
    15a4:	.word	0x000113ec

000015a8 <cleanup_challenge>:
    15a8:	push	{fp, lr}
    15ac:	mov	fp, sp
    15b0:	sub	sp, sp, #8
    15b4:	str	r0, [sp, #4]
    15b8:	ldr	r0, [sp, #4]
    15bc:	ldr	r0, [r0, #432]	; 0x1b0
    15c0:	movw	r1, #0
    15c4:	cmp	r0, r1
    15c8:	bne	15d0 <cleanup_challenge+0x28>
    15cc:	b	1618 <cleanup_challenge+0x70>
    15d0:	ldr	r0, [sp, #4]
    15d4:	ldr	r0, [r0, #432]	; 0x1b0
    15d8:	ldr	r0, [r0, #284]	; 0x11c
    15dc:	bl	1620 <rb_free>
    15e0:	ldr	r0, [sp, #4]
    15e4:	ldr	r0, [r0, #24]
    15e8:	ldr	r0, [r0, #32]
    15ec:	bl	1620 <rb_free>
    15f0:	ldr	r0, [sp, #4]
    15f4:	ldr	r0, [r0, #432]	; 0x1b0
    15f8:	movw	lr, #0
    15fc:	str	lr, [r0, #284]	; 0x11c
    1600:	ldr	r0, [sp, #4]
    1604:	ldr	r0, [r0, #24]
    1608:	str	lr, [r0, #32]
    160c:	ldr	r0, [sp, #4]
    1610:	ldr	r0, [r0, #432]	; 0x1b0
    1614:	str	lr, [r0, #304]	; 0x130
    1618:	mov	sp, fp
    161c:	pop	{fp, pc}

00001620 <rb_free>:
    1620:	push	{fp, lr}
    1624:	mov	fp, sp
    1628:	sub	sp, sp, #8
    162c:	str	r0, [sp, #4]
    1630:	ldr	r0, [sp, #4]
    1634:	movw	r1, #0
    1638:	cmp	r0, r1
    163c:	movw	r0, #0
    1640:	movne	r0, #1
    1644:	mvn	r1, #0
    1648:	eor	r0, r0, r1
    164c:	eor	r0, r0, r1
    1650:	tst	r0, #1
    1654:	beq	1660 <rb_free+0x40>
    1658:	ldr	r0, [sp, #4]
    165c:	bl	9f8 <free@plt>
    1660:	mov	sp, fp
    1664:	pop	{fp, pc}

00001668 <generate_challenge>:
    1668:	push	{r4, r5, fp, lr}
    166c:	add	fp, sp, #8
    1670:	sub	sp, sp, #296	; 0x128
    1674:	str	r0, [fp, #-16]
    1678:	str	r1, [fp, #-20]	; 0xffffffec
    167c:	str	r2, [fp, #-24]	; 0xffffffe8
    1680:	movw	r0, #0
    1684:	str	r0, [sp, #44]	; 0x2c
    1688:	str	r0, [sp, #40]	; 0x28
    168c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1690:	cmp	r1, r0
    1694:	bne	16a8 <generate_challenge+0x40>
    1698:	movw	r0, #0
    169c:	and	r0, r0, #1
    16a0:	strb	r0, [fp, #-9]
    16a4:	b	1830 <generate_challenge+0x1c8>
    16a8:	add	r0, sp, #56	; 0x38
    16ac:	movw	r1, #128	; 0x80
    16b0:	bl	a64 <rb_get_random@plt>
    16b4:	cmp	r0, #0
    16b8:	beq	179c <generate_challenge+0x134>
    16bc:	sub	r0, fp, #120	; 0x78
    16c0:	bl	ad0 <SHA1_Init@plt>
    16c4:	add	r1, sp, #56	; 0x38
    16c8:	sub	lr, fp, #120	; 0x78
    16cc:	str	r0, [sp, #32]
    16d0:	mov	r0, lr
    16d4:	movw	r2, #128	; 0x80
    16d8:	bl	aac <SHA1_Update@plt>
    16dc:	movw	r1, #20
    16e0:	str	r0, [sp, #28]
    16e4:	mov	r0, r1
    16e8:	bl	a58 <malloc@plt>
    16ec:	ldr	r1, [fp, #-20]	; 0xffffffec
    16f0:	str	r0, [r1]
    16f4:	ldr	r0, [fp, #-20]	; 0xffffffec
    16f8:	ldr	r0, [r0]
    16fc:	sub	r1, fp, #120	; 0x78
    1700:	bl	b24 <SHA1_Final@plt>
    1704:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1708:	str	r0, [sp, #24]
    170c:	mov	r0, r1
    1710:	bl	a10 <RSA_size@plt>
    1714:	str	r0, [sp, #48]	; 0x30
    1718:	ldr	r0, [sp, #48]	; 0x30
    171c:	bl	18b4 <rb_malloc>
    1720:	add	r1, sp, #56	; 0x38
    1724:	str	r0, [sp, #52]	; 0x34
    1728:	ldr	r2, [sp, #52]	; 0x34
    172c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1730:	movw	r0, #128	; 0x80
    1734:	movw	lr, #4
    1738:	str	lr, [sp]
    173c:	bl	9e0 <RSA_public_encrypt@plt>
    1740:	str	r0, [sp, #36]	; 0x24
    1744:	ldr	r0, [sp, #36]	; 0x24
    1748:	cmp	r0, #0
    174c:	blt	177c <generate_challenge+0x114>
    1750:	ldr	r0, [sp, #52]	; 0x34
    1754:	ldr	r1, [sp, #36]	; 0x24
    1758:	bl	b18 <rb_base64_encode@plt>
    175c:	ldr	r1, [fp, #-16]
    1760:	str	r0, [r1]
    1764:	ldr	r0, [sp, #52]	; 0x34
    1768:	bl	1620 <rb_free>
    176c:	movw	r0, #1
    1770:	and	r0, r0, #1
    1774:	strb	r0, [fp, #-9]
    1778:	b	1830 <generate_challenge+0x1c8>
    177c:	ldr	r0, [sp, #52]	; 0x34
    1780:	bl	1620 <rb_free>
    1784:	ldr	r0, [fp, #-20]	; 0xffffffec
    1788:	ldr	r0, [r0]
    178c:	bl	1620 <rb_free>
    1790:	ldr	r0, [fp, #-20]	; 0xffffffec
    1794:	movw	lr, #0
    1798:	str	lr, [r0]
    179c:	mov	r0, #2
    17a0:	mov	r1, #0
    17a4:	str	r1, [sp, #20]
    17a8:	ldr	r2, [sp, #20]
    17ac:	bl	a7c <OPENSSL_init_crypto@plt>
    17b0:	str	r0, [sp, #16]
    17b4:	ldr	r0, [sp, #40]	; 0x28
    17b8:	cmp	r0, #100	; 0x64
    17bc:	movw	r0, #0
    17c0:	str	r0, [sp, #12]
    17c4:	bcs	17e0 <generate_challenge+0x178>
    17c8:	bl	adc <ERR_get_error@plt>
    17cc:	str	r0, [sp, #44]	; 0x2c
    17d0:	cmp	r0, #0
    17d4:	movw	r0, #0
    17d8:	movne	r0, #1
    17dc:	str	r0, [sp, #12]
    17e0:	ldr	r0, [sp, #12]
    17e4:	tst	r0, #1
    17e8:	beq	1824 <generate_challenge+0x1bc>
    17ec:	ldr	r0, [sp, #44]	; 0x2c
    17f0:	movw	r1, #0
    17f4:	bl	ab8 <ERR_error_string@plt>
    17f8:	ldr	r1, [pc, #64]	; 1840 <generate_challenge+0x1d8>
    17fc:	add	r1, pc, r1
    1800:	movw	lr, #0
    1804:	str	r0, [sp, #8]
    1808:	mov	r0, lr
    180c:	ldr	r2, [sp, #8]
    1810:	bl	ac4 <ilog@plt>
    1814:	ldr	r0, [sp, #40]	; 0x28
    1818:	add	r0, r0, #1
    181c:	str	r0, [sp, #40]	; 0x28
    1820:	b	17b4 <generate_challenge+0x14c>
    1824:	movw	r0, #0
    1828:	and	r0, r0, #1
    182c:	strb	r0, [fp, #-9]
    1830:	ldrb	r0, [fp, #-9]
    1834:	and	r0, r0, #1
    1838:	sub	sp, fp, #8
    183c:	pop	{r4, r5, fp, pc}
    1840:	.word	0x000004aa

00001844 <rb_strdup>:
    1844:	push	{fp, lr}
    1848:	mov	fp, sp
    184c:	sub	sp, sp, #16
    1850:	str	r0, [fp, #-4]
    1854:	ldr	r0, [fp, #-4]
    1858:	bl	aa0 <strlen@plt>
    185c:	add	r0, r0, #1
    1860:	bl	a58 <malloc@plt>
    1864:	str	r0, [sp, #8]
    1868:	ldr	r0, [sp, #8]
    186c:	movw	lr, #0
    1870:	cmp	r0, lr
    1874:	movw	r0, #0
    1878:	moveq	r0, #1
    187c:	mvn	lr, #0
    1880:	eor	r0, r0, lr
    1884:	eor	r0, r0, lr
    1888:	tst	r0, #1
    188c:	beq	1894 <rb_strdup+0x50>
    1890:	bl	a1c <rb_outofmemory@plt>
    1894:	ldr	r0, [sp, #8]
    1898:	ldr	r1, [fp, #-4]
    189c:	bl	a4c <strcpy@plt>
    18a0:	ldr	r1, [sp, #8]
    18a4:	str	r0, [sp, #4]
    18a8:	mov	r0, r1
    18ac:	mov	sp, fp
    18b0:	pop	{fp, pc}

000018b4 <rb_malloc>:
    18b4:	push	{fp, lr}
    18b8:	mov	fp, sp
    18bc:	sub	sp, sp, #8
    18c0:	str	r0, [sp, #4]
    18c4:	ldr	r1, [sp, #4]
    18c8:	movw	r0, #1
    18cc:	bl	9bc <calloc@plt>
    18d0:	str	r0, [sp]
    18d4:	ldr	r0, [sp]
    18d8:	movw	r1, #0
    18dc:	cmp	r0, r1
    18e0:	movw	r0, #0
    18e4:	moveq	r0, #1
    18e8:	mvn	r1, #0
    18ec:	eor	r0, r0, r1
    18f0:	eor	r0, r0, r1
    18f4:	tst	r0, #1
    18f8:	beq	1900 <rb_malloc+0x4c>
    18fc:	bl	a1c <rb_outofmemory@plt>
    1900:	ldr	r0, [sp]
    1904:	mov	sp, fp
    1908:	pop	{fp, pc}

Disassembly of section .fini:

0000190c <_fini>:
    190c:	push	{r3, lr}
    1910:	pop	{r3, pc}
