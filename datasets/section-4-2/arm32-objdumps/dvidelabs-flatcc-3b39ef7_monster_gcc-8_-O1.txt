
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf32-littlearm


Disassembly of section .init:

00011f0c <.init>:
   11f0c:	push	{r3, lr}
   11f10:	bl	1201c <_start@@Base+0x3c>
   11f14:	pop	{r3, pc}

Disassembly of section .plt:

00011f18 <strcmp@plt-0x14>:
   11f18:	push	{lr}		; (str lr, [sp, #-4]!)
   11f1c:	ldr	lr, [pc, #4]	; 11f28 <strcmp@plt-0x4>
   11f20:	add	lr, pc, lr
   11f24:	ldr	pc, [lr, #8]!
   11f28:	ldrdeq	r7, [r1], -r8

00011f2c <strcmp@plt>:
   11f2c:	add	ip, pc, #0, 12
   11f30:	add	ip, ip, #94208	; 0x17000
   11f34:	ldr	pc, [ip, #216]!	; 0xd8

00011f38 <free@plt>:
   11f38:	add	ip, pc, #0, 12
   11f3c:	add	ip, ip, #94208	; 0x17000
   11f40:	ldr	pc, [ip, #208]!	; 0xd0

00011f44 <memcpy@plt>:
   11f44:	add	ip, pc, #0, 12
   11f48:	add	ip, ip, #94208	; 0x17000
   11f4c:	ldr	pc, [ip, #200]!	; 0xc8

00011f50 <memcmp@plt>:
   11f50:	add	ip, pc, #0, 12
   11f54:	add	ip, ip, #94208	; 0x17000
   11f58:	ldr	pc, [ip, #192]!	; 0xc0

00011f5c <realloc@plt>:
   11f5c:	add	ip, pc, #0, 12
   11f60:	add	ip, ip, #94208	; 0x17000
   11f64:	ldr	pc, [ip, #184]!	; 0xb8

00011f68 <puts@plt>:
   11f68:	add	ip, pc, #0, 12
   11f6c:	add	ip, ip, #94208	; 0x17000
   11f70:	ldr	pc, [ip, #176]!	; 0xb0

00011f74 <malloc@plt>:
   11f74:	add	ip, pc, #0, 12
   11f78:	add	ip, ip, #94208	; 0x17000
   11f7c:	ldr	pc, [ip, #168]!	; 0xa8

00011f80 <__libc_start_main@plt>:
   11f80:	add	ip, pc, #0, 12
   11f84:	add	ip, ip, #94208	; 0x17000
   11f88:	ldr	pc, [ip, #160]!	; 0xa0

00011f8c <__gmon_start__@plt>:
   11f8c:	add	ip, pc, #0, 12
   11f90:	add	ip, ip, #94208	; 0x17000
   11f94:	ldr	pc, [ip, #152]!	; 0x98

00011f98 <strlen@plt>:
   11f98:	add	ip, pc, #0, 12
   11f9c:	add	ip, ip, #94208	; 0x17000
   11fa0:	ldr	pc, [ip, #144]!	; 0x90

00011fa4 <posix_memalign@plt>:
   11fa4:	add	ip, pc, #0, 12
   11fa8:	add	ip, ip, #94208	; 0x17000
   11fac:	ldr	pc, [ip, #136]!	; 0x88

00011fb0 <memset@plt>:
   11fb0:	add	ip, pc, #0, 12
   11fb4:	add	ip, ip, #94208	; 0x17000
   11fb8:	ldr	pc, [ip, #128]!	; 0x80

00011fbc <memchr@plt>:
   11fbc:	add	ip, pc, #0, 12
   11fc0:	add	ip, ip, #94208	; 0x17000
   11fc4:	ldr	pc, [ip, #120]!	; 0x78

00011fc8 <abort@plt>:
   11fc8:	add	ip, pc, #0, 12
   11fcc:	add	ip, ip, #94208	; 0x17000
   11fd0:	ldr	pc, [ip, #112]!	; 0x70

00011fd4 <__assert_fail@plt>:
   11fd4:	add	ip, pc, #0, 12
   11fd8:	add	ip, ip, #94208	; 0x17000
   11fdc:	ldr	pc, [ip, #104]!	; 0x68

Disassembly of section .text:

00011fe0 <_start@@Base>:
   11fe0:	mov	fp, #0
   11fe4:	mov	lr, #0
   11fe8:	pop	{r1}		; (ldr r1, [sp], #4)
   11fec:	mov	r2, sp
   11ff0:	push	{r2}		; (str r2, [sp, #-4]!)
   11ff4:	push	{r0}		; (str r0, [sp, #-4]!)
   11ff8:	ldr	ip, [pc, #16]	; 12010 <_start@@Base+0x30>
   11ffc:	push	{ip}		; (str ip, [sp, #-4]!)
   12000:	ldr	r0, [pc, #12]	; 12014 <_start@@Base+0x34>
   12004:	ldr	r3, [pc, #12]	; 12018 <_start@@Base+0x38>
   12008:	bl	11f80 <__libc_start_main@plt>
   1200c:	bl	11fc8 <abort@plt>
   12010:	muleq	r1, ip, lr
   12014:	andeq	r3, r1, r0, lsl r1
   12018:	andeq	r7, r1, ip, lsr lr
   1201c:	ldr	r3, [pc, #20]	; 12038 <_start@@Base+0x58>
   12020:	ldr	r2, [pc, #20]	; 1203c <_start@@Base+0x5c>
   12024:	add	r3, pc, r3
   12028:	ldr	r2, [r3, r2]
   1202c:	cmp	r2, #0
   12030:	bxeq	lr
   12034:	b	11f8c <__gmon_start__@plt>
   12038:	ldrdeq	r6, [r1], -r4
   1203c:	andeq	r0, r0, r8, asr #32
   12040:	ldr	r0, [pc, #24]	; 12060 <_start@@Base+0x80>
   12044:	ldr	r3, [pc, #24]	; 12064 <_start@@Base+0x84>
   12048:	cmp	r3, r0
   1204c:	bxeq	lr
   12050:	ldr	r3, [pc, #16]	; 12068 <_start@@Base+0x88>
   12054:	cmp	r3, #0
   12058:	bxeq	lr
   1205c:	bx	r3
   12060:	andeq	r9, r2, r4, asr r0
   12064:	andeq	r9, r2, r4, asr r0
   12068:	andeq	r0, r0, r0
   1206c:	ldr	r0, [pc, #36]	; 12098 <_start@@Base+0xb8>
   12070:	ldr	r1, [pc, #36]	; 1209c <_start@@Base+0xbc>
   12074:	sub	r1, r1, r0
   12078:	asr	r1, r1, #2
   1207c:	add	r1, r1, r1, lsr #31
   12080:	asrs	r1, r1, #1
   12084:	bxeq	lr
   12088:	ldr	r3, [pc, #16]	; 120a0 <_start@@Base+0xc0>
   1208c:	cmp	r3, #0
   12090:	bxeq	lr
   12094:	bx	r3
   12098:	andeq	r9, r2, r4, asr r0
   1209c:	andeq	r9, r2, r4, asr r0
   120a0:	andeq	r0, r0, r0
   120a4:	push	{r4, lr}
   120a8:	ldr	r4, [pc, #24]	; 120c8 <_start@@Base+0xe8>
   120ac:	ldrb	r3, [r4]
   120b0:	cmp	r3, #0
   120b4:	popne	{r4, pc}
   120b8:	bl	12040 <_start@@Base+0x60>
   120bc:	mov	r3, #1
   120c0:	strb	r3, [r4]
   120c4:	pop	{r4, pc}
   120c8:	andeq	r9, r2, r4, asr r0
   120cc:	b	1206c <_start@@Base+0x8c>

000120d0 <create_monster_bottom_up@@Base>:
   120d0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   120d4:	strd	r6, [sp, #8]
   120d8:	strd	r8, [sp, #16]
   120dc:	str	sl, [sp, #24]
   120e0:	str	lr, [sp, #28]
   120e4:	sub	sp, sp, #24
   120e8:	mov	r4, r0
   120ec:	mov	r6, r1
   120f0:	movw	r1, #32564	; 0x7f34
   120f4:	movt	r1, #1
   120f8:	bl	16d14 <flatcc_builder_create_string_str@@Base>
   120fc:	mov	r5, r0
   12100:	movw	r1, #32572	; 0x7f3c
   12104:	movt	r1, #1
   12108:	mov	r0, r4
   1210c:	bl	16d14 <flatcc_builder_create_string_str@@Base>
   12110:	mov	r7, r0
   12114:	mov	r1, #2
   12118:	mov	r0, r4
   1211c:	bl	152fc <flatcc_builder_start_table@@Base>
   12120:	adds	r3, r5, #0
   12124:	movne	r3, #1
   12128:	cmp	r0, #0
   1212c:	moveq	r0, r3
   12130:	movne	r0, #0
   12134:	cmp	r0, #0
   12138:	beq	126fc <create_monster_bottom_up@@Base+0x62c>
   1213c:	mov	r1, #0
   12140:	mov	r0, r4
   12144:	bl	170b0 <flatcc_builder_table_add_offset@@Base>
   12148:	cmp	r0, #0
   1214c:	beq	126fc <create_monster_bottom_up@@Base+0x62c>
   12150:	str	r5, [r0]
   12154:	mov	r3, #2
   12158:	mov	r2, r3
   1215c:	mov	r1, #1
   12160:	mov	r0, r4
   12164:	bl	16ec0 <flatcc_builder_table_add@@Base>
   12168:	cmp	r0, #0
   1216c:	beq	126fc <create_monster_bottom_up@@Base+0x62c>
   12170:	mov	r3, #3
   12174:	strh	r3, [r0]
   12178:	mov	r2, #0
   1217c:	movw	r1, #32428	; 0x7eac
   12180:	movt	r1, #1
   12184:	mov	r0, r4
   12188:	bl	15d24 <flatcc_builder_check_required@@Base>
   1218c:	cmp	r0, #0
   12190:	beq	12300 <create_monster_bottom_up@@Base+0x230>
   12194:	mov	r0, r4
   12198:	bl	15dd4 <flatcc_builder_end_table@@Base>
   1219c:	mov	r8, r0
   121a0:	mov	r1, #2
   121a4:	mov	r0, r4
   121a8:	bl	152fc <flatcc_builder_start_table@@Base>
   121ac:	adds	r3, r7, #0
   121b0:	movne	r3, #1
   121b4:	cmp	r0, #0
   121b8:	moveq	r0, r3
   121bc:	movne	r0, #0
   121c0:	cmp	r0, #0
   121c4:	beq	12690 <create_monster_bottom_up@@Base+0x5c0>
   121c8:	mov	r1, #0
   121cc:	mov	r0, r4
   121d0:	bl	170b0 <flatcc_builder_table_add_offset@@Base>
   121d4:	cmp	r0, #0
   121d8:	beq	12690 <create_monster_bottom_up@@Base+0x5c0>
   121dc:	str	r7, [r0]
   121e0:	mov	r3, #2
   121e4:	mov	r2, r3
   121e8:	mov	r1, #1
   121ec:	mov	r0, r4
   121f0:	bl	16ec0 <flatcc_builder_table_add@@Base>
   121f4:	cmp	r0, #0
   121f8:	beq	12690 <create_monster_bottom_up@@Base+0x5c0>
   121fc:	mov	r3, #5
   12200:	strh	r3, [r0]
   12204:	mov	r2, #0
   12208:	movw	r1, #32428	; 0x7eac
   1220c:	movt	r1, #1
   12210:	mov	r0, r4
   12214:	bl	15d24 <flatcc_builder_check_required@@Base>
   12218:	cmp	r0, #0
   1221c:	beq	1231c <create_monster_bottom_up@@Base+0x24c>
   12220:	mov	r0, r4
   12224:	bl	15dd4 <flatcc_builder_end_table@@Base>
   12228:	mov	r5, r0
   1222c:	movw	r1, #32824	; 0x8038
   12230:	movt	r1, #1
   12234:	mov	r0, r4
   12238:	bl	16d14 <flatcc_builder_create_string_str@@Base>
   1223c:	mov	r7, r0
   12240:	movw	r1, #32428	; 0x7eac
   12244:	movt	r1, #1
   12248:	ldrd	r2, [r1, #32]
   1224c:	strd	r2, [sp, #12]
   12250:	ldrh	r3, [r1, #40]	; 0x28
   12254:	strh	r3, [sp, #20]
   12258:	mvn	r3, #0
   1225c:	str	r3, [sp, #4]
   12260:	mov	r3, #1
   12264:	str	r3, [sp]
   12268:	mov	r2, #10
   1226c:	add	r1, sp, #12
   12270:	mov	r0, r4
   12274:	bl	15f98 <flatcc_builder_create_vector@@Base>
   12278:	mov	r9, r0
   1227c:	mov	r0, r4
   12280:	bl	150a4 <flatcc_builder_start_offset_vector@@Base>
   12284:	cmp	r8, #0
   12288:	beq	12298 <create_monster_bottom_up@@Base+0x1c8>
   1228c:	mov	r1, r8
   12290:	mov	r0, r4
   12294:	bl	14a54 <flatcc_builder_offset_vector_push@@Base>
   12298:	cmp	r5, #0
   1229c:	beq	122ac <create_monster_bottom_up@@Base+0x1dc>
   122a0:	mov	r1, r5
   122a4:	mov	r0, r4
   122a8:	bl	14a54 <flatcc_builder_offset_vector_push@@Base>
   122ac:	mov	r0, r4
   122b0:	bl	16234 <flatcc_builder_end_offset_vector@@Base>
   122b4:	mov	r8, r0
   122b8:	cmp	r6, #0
   122bc:	bne	124f0 <create_monster_bottom_up@@Base+0x420>
   122c0:	mov	r3, #0
   122c4:	mov	r2, r3
   122c8:	mov	r1, r3
   122cc:	mov	r0, r4
   122d0:	bl	1433c <flatcc_builder_start_buffer@@Base>
   122d4:	subs	r6, r0, #0
   122d8:	bne	12654 <create_monster_bottom_up@@Base+0x584>
   122dc:	mov	r1, #10
   122e0:	mov	r0, r4
   122e4:	bl	152fc <flatcc_builder_start_table@@Base>
   122e8:	subs	sl, r0, #0
   122ec:	beq	12338 <create_monster_bottom_up@@Base+0x268>
   122f0:	mov	r1, r6
   122f4:	mov	r0, r4
   122f8:	bl	14410 <flatcc_builder_end_buffer@@Base>
   122fc:	b	12654 <create_monster_bottom_up@@Base+0x584>
   12300:	ldr	r3, [pc, #1148]	; 12784 <create_monster_bottom_up@@Base+0x6b4>
   12304:	mov	r2, #52	; 0x34
   12308:	movw	r1, #32576	; 0x7f40
   1230c:	movt	r1, #1
   12310:	movw	r0, #32668	; 0x7f9c
   12314:	movt	r0, #1
   12318:	bl	11fd4 <__assert_fail@plt>
   1231c:	ldr	r3, [pc, #1120]	; 12784 <create_monster_bottom_up@@Base+0x6b4>
   12320:	mov	r2, #52	; 0x34
   12324:	movw	r1, #32576	; 0x7f40
   12328:	movt	r1, #1
   1232c:	movw	r0, #32668	; 0x7f9c
   12330:	movt	r0, #1
   12334:	bl	11fd4 <__assert_fail@plt>
   12338:	mov	r3, #4
   1233c:	mov	r2, #12
   12340:	mov	r1, #0
   12344:	mov	r0, r4
   12348:	bl	16ec0 <flatcc_builder_table_add@@Base>
   1234c:	cmp	r0, #0
   12350:	beq	12498 <create_monster_bottom_up@@Base+0x3c8>
   12354:	mov	r3, #1065353216	; 0x3f800000
   12358:	str	r3, [r0]
   1235c:	mov	r3, #1073741824	; 0x40000000
   12360:	str	r3, [r0, #4]
   12364:	mov	r3, #0
   12368:	movt	r3, #16448	; 0x4040
   1236c:	str	r3, [r0, #8]
   12370:	cmp	r7, #0
   12374:	beq	124a0 <create_monster_bottom_up@@Base+0x3d0>
   12378:	mov	r1, #3
   1237c:	mov	r0, r4
   12380:	bl	170b0 <flatcc_builder_table_add_offset@@Base>
   12384:	cmp	r0, #0
   12388:	beq	124a8 <create_monster_bottom_up@@Base+0x3d8>
   1238c:	str	r7, [r0]
   12390:	cmp	r9, #0
   12394:	beq	124b0 <create_monster_bottom_up@@Base+0x3e0>
   12398:	mov	r1, #5
   1239c:	mov	r0, r4
   123a0:	bl	170b0 <flatcc_builder_table_add_offset@@Base>
   123a4:	cmp	r0, #0
   123a8:	beq	124b8 <create_monster_bottom_up@@Base+0x3e8>
   123ac:	str	r9, [r0]
   123b0:	cmp	r8, #0
   123b4:	beq	124c0 <create_monster_bottom_up@@Base+0x3f0>
   123b8:	mov	r1, #7
   123bc:	mov	r0, r4
   123c0:	bl	170b0 <flatcc_builder_table_add_offset@@Base>
   123c4:	cmp	r0, #0
   123c8:	beq	124c8 <create_monster_bottom_up@@Base+0x3f8>
   123cc:	str	r8, [r0]
   123d0:	mov	r1, #9
   123d4:	mov	r0, r4
   123d8:	bl	170b0 <flatcc_builder_table_add_offset@@Base>
   123dc:	cmp	r0, #0
   123e0:	beq	124d0 <create_monster_bottom_up@@Base+0x400>
   123e4:	str	r5, [r0]
   123e8:	mov	r3, #2
   123ec:	mov	r2, r3
   123f0:	mov	r1, r3
   123f4:	mov	r0, r4
   123f8:	bl	16ec0 <flatcc_builder_table_add@@Base>
   123fc:	cmp	r0, #0
   12400:	beq	124d8 <create_monster_bottom_up@@Base+0x408>
   12404:	mov	r3, #300	; 0x12c
   12408:	strh	r3, [r0]
   1240c:	mov	r3, #1
   12410:	mov	r2, r3
   12414:	mov	r1, #6
   12418:	mov	r0, r4
   1241c:	bl	16ec0 <flatcc_builder_table_add@@Base>
   12420:	cmp	r0, #0
   12424:	beq	124e0 <create_monster_bottom_up@@Base+0x410>
   12428:	mov	r3, #0
   1242c:	strb	r3, [r0]
   12430:	mov	r3, #1
   12434:	mov	r2, r3
   12438:	mov	r1, #8
   1243c:	mov	r0, r4
   12440:	bl	16ec0 <flatcc_builder_table_add@@Base>
   12444:	cmp	r0, #0
   12448:	beq	124e8 <create_monster_bottom_up@@Base+0x418>
   1244c:	mov	r3, #1
   12450:	strb	r3, [r0]
   12454:	mov	r2, #0
   12458:	ldr	r1, [pc, #808]	; 12788 <create_monster_bottom_up@@Base+0x6b8>
   1245c:	mov	r0, r4
   12460:	bl	15d24 <flatcc_builder_check_required@@Base>
   12464:	cmp	r0, #0
   12468:	beq	1247c <create_monster_bottom_up@@Base+0x3ac>
   1246c:	mov	r0, r4
   12470:	bl	15dd4 <flatcc_builder_end_table@@Base>
   12474:	mov	r6, r0
   12478:	b	122f0 <create_monster_bottom_up@@Base+0x220>
   1247c:	ldr	r3, [pc, #776]	; 1278c <create_monster_bottom_up@@Base+0x6bc>
   12480:	mov	r2, #50	; 0x32
   12484:	movw	r1, #32576	; 0x7f40
   12488:	movt	r1, #1
   1248c:	movw	r0, #32828	; 0x803c
   12490:	movt	r0, #1
   12494:	bl	11fd4 <__assert_fail@plt>
   12498:	mov	r6, sl
   1249c:	b	122f0 <create_monster_bottom_up@@Base+0x220>
   124a0:	mov	r6, r7
   124a4:	b	122f0 <create_monster_bottom_up@@Base+0x220>
   124a8:	mov	r6, sl
   124ac:	b	122f0 <create_monster_bottom_up@@Base+0x220>
   124b0:	mov	r6, r9
   124b4:	b	122f0 <create_monster_bottom_up@@Base+0x220>
   124b8:	mov	r6, sl
   124bc:	b	122f0 <create_monster_bottom_up@@Base+0x220>
   124c0:	mov	r6, r8
   124c4:	b	122f0 <create_monster_bottom_up@@Base+0x220>
   124c8:	mov	r6, sl
   124cc:	b	122f0 <create_monster_bottom_up@@Base+0x220>
   124d0:	mov	r6, sl
   124d4:	b	122f0 <create_monster_bottom_up@@Base+0x220>
   124d8:	mov	r6, sl
   124dc:	b	122f0 <create_monster_bottom_up@@Base+0x220>
   124e0:	mov	r6, sl
   124e4:	b	122f0 <create_monster_bottom_up@@Base+0x220>
   124e8:	mov	r6, sl
   124ec:	b	122f0 <create_monster_bottom_up@@Base+0x220>
   124f0:	mov	r3, #0
   124f4:	mov	r2, r3
   124f8:	mov	r1, r3
   124fc:	mov	r0, r4
   12500:	bl	1433c <flatcc_builder_start_buffer@@Base>
   12504:	cmp	r0, #0
   12508:	bne	12518 <create_monster_bottom_up@@Base+0x448>
   1250c:	mov	r1, #10
   12510:	mov	r0, r4
   12514:	bl	152fc <flatcc_builder_start_table@@Base>
   12518:	mov	r3, #4
   1251c:	mov	r2, #12
   12520:	mov	r1, #0
   12524:	mov	r0, r4
   12528:	bl	16ec0 <flatcc_builder_table_add@@Base>
   1252c:	cmp	r0, #0
   12530:	beq	12550 <create_monster_bottom_up@@Base+0x480>
   12534:	mov	r3, #1065353216	; 0x3f800000
   12538:	str	r3, [r0]
   1253c:	mov	r3, #1073741824	; 0x40000000
   12540:	str	r3, [r0, #4]
   12544:	mov	r3, #0
   12548:	movt	r3, #16448	; 0x4040
   1254c:	str	r3, [r0, #8]
   12550:	mov	r3, #2
   12554:	mov	r2, r3
   12558:	mov	r1, r3
   1255c:	mov	r0, r4
   12560:	bl	16ec0 <flatcc_builder_table_add@@Base>
   12564:	cmp	r0, #0
   12568:	movne	r3, #300	; 0x12c
   1256c:	strhne	r3, [r0]
   12570:	cmp	r7, #0
   12574:	beq	1258c <create_monster_bottom_up@@Base+0x4bc>
   12578:	mov	r1, #3
   1257c:	mov	r0, r4
   12580:	bl	170b0 <flatcc_builder_table_add_offset@@Base>
   12584:	cmp	r0, #0
   12588:	strne	r7, [r0]
   1258c:	cmp	r9, #0
   12590:	beq	125a8 <create_monster_bottom_up@@Base+0x4d8>
   12594:	mov	r1, #5
   12598:	mov	r0, r4
   1259c:	bl	170b0 <flatcc_builder_table_add_offset@@Base>
   125a0:	cmp	r0, #0
   125a4:	strne	r9, [r0]
   125a8:	mov	r3, #1
   125ac:	mov	r2, r3
   125b0:	mov	r1, #6
   125b4:	mov	r0, r4
   125b8:	bl	16ec0 <flatcc_builder_table_add@@Base>
   125bc:	cmp	r0, #0
   125c0:	movne	r3, #0
   125c4:	strbne	r3, [r0]
   125c8:	cmp	r8, #0
   125cc:	beq	125e4 <create_monster_bottom_up@@Base+0x514>
   125d0:	mov	r1, #7
   125d4:	mov	r0, r4
   125d8:	bl	170b0 <flatcc_builder_table_add_offset@@Base>
   125dc:	cmp	r0, #0
   125e0:	strne	r8, [r0]
   125e4:	cmp	r5, #0
   125e8:	beq	12628 <create_monster_bottom_up@@Base+0x558>
   125ec:	mov	r3, #1
   125f0:	mov	r2, r3
   125f4:	mov	r1, #8
   125f8:	mov	r0, r4
   125fc:	bl	16ec0 <flatcc_builder_table_add@@Base>
   12600:	subs	r6, r0, #0
   12604:	beq	12628 <create_monster_bottom_up@@Base+0x558>
   12608:	mov	r1, #9
   1260c:	mov	r0, r4
   12610:	bl	170b0 <flatcc_builder_table_add_offset@@Base>
   12614:	cmp	r0, #0
   12618:	beq	12628 <create_monster_bottom_up@@Base+0x558>
   1261c:	mov	r3, #1
   12620:	strb	r3, [r6]
   12624:	str	r5, [r0]
   12628:	mov	r2, #0
   1262c:	ldr	r1, [pc, #340]	; 12788 <create_monster_bottom_up@@Base+0x6b8>
   12630:	mov	r0, r4
   12634:	bl	15d24 <flatcc_builder_check_required@@Base>
   12638:	cmp	r0, #0
   1263c:	beq	12674 <create_monster_bottom_up@@Base+0x5a4>
   12640:	mov	r0, r4
   12644:	bl	15dd4 <flatcc_builder_end_table@@Base>
   12648:	mov	r1, r0
   1264c:	mov	r0, r4
   12650:	bl	14410 <flatcc_builder_end_buffer@@Base>
   12654:	mov	r0, #0
   12658:	add	sp, sp, #24
   1265c:	ldrd	r4, [sp]
   12660:	ldrd	r6, [sp, #8]
   12664:	ldrd	r8, [sp, #16]
   12668:	ldr	sl, [sp, #24]
   1266c:	add	sp, sp, #28
   12670:	pop	{pc}		; (ldr pc, [sp], #4)
   12674:	ldr	r3, [pc, #272]	; 1278c <create_monster_bottom_up@@Base+0x6bc>
   12678:	mov	r2, #50	; 0x32
   1267c:	movw	r1, #32576	; 0x7f40
   12680:	movt	r1, #1
   12684:	movw	r0, #32828	; 0x803c
   12688:	movt	r0, #1
   1268c:	bl	11fd4 <__assert_fail@plt>
   12690:	movw	r1, #32824	; 0x8038
   12694:	movt	r1, #1
   12698:	mov	r0, r4
   1269c:	bl	16d14 <flatcc_builder_create_string_str@@Base>
   126a0:	mov	r7, r0
   126a4:	movw	r1, #32428	; 0x7eac
   126a8:	movt	r1, #1
   126ac:	ldrd	r2, [r1, #32]
   126b0:	strd	r2, [sp, #12]
   126b4:	ldrh	r3, [r1, #40]	; 0x28
   126b8:	strh	r3, [sp, #20]
   126bc:	mvn	r3, #0
   126c0:	str	r3, [sp, #4]
   126c4:	mov	r3, #1
   126c8:	str	r3, [sp]
   126cc:	mov	r2, #10
   126d0:	add	r1, sp, #12
   126d4:	mov	r0, r4
   126d8:	bl	15f98 <flatcc_builder_create_vector@@Base>
   126dc:	mov	r9, r0
   126e0:	mov	r0, r4
   126e4:	bl	150a4 <flatcc_builder_start_offset_vector@@Base>
   126e8:	cmp	r8, #0
   126ec:	moveq	r5, r8
   126f0:	beq	122ac <create_monster_bottom_up@@Base+0x1dc>
   126f4:	mov	r5, #0
   126f8:	b	1228c <create_monster_bottom_up@@Base+0x1bc>
   126fc:	mov	r1, #2
   12700:	mov	r0, r4
   12704:	bl	152fc <flatcc_builder_start_table@@Base>
   12708:	clz	r0, r0
   1270c:	lsr	r0, r0, #5
   12710:	cmp	r7, #0
   12714:	moveq	r0, #0
   12718:	cmp	r0, #0
   1271c:	movne	r8, #0
   12720:	bne	121c8 <create_monster_bottom_up@@Base+0xf8>
   12724:	movw	r1, #32824	; 0x8038
   12728:	movt	r1, #1
   1272c:	mov	r0, r4
   12730:	bl	16d14 <flatcc_builder_create_string_str@@Base>
   12734:	mov	r7, r0
   12738:	movw	r1, #32428	; 0x7eac
   1273c:	movt	r1, #1
   12740:	ldrd	r2, [r1, #32]
   12744:	strd	r2, [sp, #12]
   12748:	ldrh	r3, [r1, #40]	; 0x28
   1274c:	strh	r3, [sp, #20]
   12750:	mvn	r3, #0
   12754:	str	r3, [sp, #4]
   12758:	mov	r3, #1
   1275c:	str	r3, [sp]
   12760:	mov	r2, #10
   12764:	add	r1, sp, #12
   12768:	mov	r0, r4
   1276c:	bl	15f98 <flatcc_builder_create_vector@@Base>
   12770:	mov	r9, r0
   12774:	mov	r0, r4
   12778:	bl	150a4 <flatcc_builder_start_offset_vector@@Base>
   1277c:	mov	r5, #0
   12780:	b	122ac <create_monster_bottom_up@@Base+0x1dc>
   12784:			; <UNDEFINED> instruction: 0x00017eb0
   12788:	ldrdeq	r7, [r1], -r8
   1278c:	ldrdeq	r7, [r1], -ip

00012790 <create_monster_top_down@@Base>:
   12790:	strd	r4, [sp, #-20]!	; 0xffffffec
   12794:	strd	r6, [sp, #8]
   12798:	str	lr, [sp, #16]
   1279c:	sub	sp, sp, #28
   127a0:	mov	r4, r0
   127a4:	movw	r3, #32428	; 0x7eac
   127a8:	movt	r3, #1
   127ac:	ldrd	r6, [r3, #32]
   127b0:	strd	r6, [sp, #12]
   127b4:	ldrh	r3, [r3, #40]	; 0x28
   127b8:	strh	r3, [sp, #20]
   127bc:	mov	r3, #0
   127c0:	mov	r2, r3
   127c4:	mov	r1, r3
   127c8:	bl	1433c <flatcc_builder_start_buffer@@Base>
   127cc:	cmp	r0, #0
   127d0:	bne	127e0 <create_monster_top_down@@Base+0x50>
   127d4:	mov	r1, #10
   127d8:	mov	r0, r4
   127dc:	bl	152fc <flatcc_builder_start_table@@Base>
   127e0:	mov	r3, #4
   127e4:	mov	r2, #12
   127e8:	mov	r1, #0
   127ec:	mov	r0, r4
   127f0:	bl	16ec0 <flatcc_builder_table_add@@Base>
   127f4:	cmp	r0, #0
   127f8:	beq	12818 <create_monster_top_down@@Base+0x88>
   127fc:	mov	r3, #1065353216	; 0x3f800000
   12800:	str	r3, [r0]
   12804:	mov	r3, #1073741824	; 0x40000000
   12808:	str	r3, [r0, #4]
   1280c:	mov	r3, #0
   12810:	movt	r3, #16448	; 0x4040
   12814:	str	r3, [r0, #8]
   12818:	mov	r3, #2
   1281c:	mov	r2, r3
   12820:	mov	r1, r3
   12824:	mov	r0, r4
   12828:	bl	16ec0 <flatcc_builder_table_add@@Base>
   1282c:	cmp	r0, #0
   12830:	movne	r3, #300	; 0x12c
   12834:	strhne	r3, [r0]
   12838:	movw	r1, #32824	; 0x8038
   1283c:	movt	r1, #1
   12840:	mov	r0, r4
   12844:	bl	16d14 <flatcc_builder_create_string_str@@Base>
   12848:	subs	r5, r0, #0
   1284c:	beq	12864 <create_monster_top_down@@Base+0xd4>
   12850:	mov	r1, #3
   12854:	mov	r0, r4
   12858:	bl	170b0 <flatcc_builder_table_add_offset@@Base>
   1285c:	cmp	r0, #0
   12860:	strne	r5, [r0]
   12864:	mvn	r3, #0
   12868:	str	r3, [sp, #4]
   1286c:	mov	r3, #1
   12870:	str	r3, [sp]
   12874:	mov	r2, #10
   12878:	add	r1, sp, #12
   1287c:	mov	r0, r4
   12880:	bl	15f98 <flatcc_builder_create_vector@@Base>
   12884:	subs	r5, r0, #0
   12888:	beq	128a0 <create_monster_top_down@@Base+0x110>
   1288c:	mov	r1, #5
   12890:	mov	r0, r4
   12894:	bl	170b0 <flatcc_builder_table_add_offset@@Base>
   12898:	cmp	r0, #0
   1289c:	strne	r5, [r0]
   128a0:	mov	r3, #1
   128a4:	mov	r2, r3
   128a8:	mov	r1, #6
   128ac:	mov	r0, r4
   128b0:	bl	16ec0 <flatcc_builder_table_add@@Base>
   128b4:	cmp	r0, #0
   128b8:	movne	r3, #0
   128bc:	strbne	r3, [r0]
   128c0:	mov	r0, r4
   128c4:	bl	150a4 <flatcc_builder_start_offset_vector@@Base>
   128c8:	movw	r1, #32564	; 0x7f34
   128cc:	movt	r1, #1
   128d0:	mov	r0, r4
   128d4:	bl	16d14 <flatcc_builder_create_string_str@@Base>
   128d8:	mov	r5, r0
   128dc:	mov	r1, #2
   128e0:	mov	r0, r4
   128e4:	bl	152fc <flatcc_builder_start_table@@Base>
   128e8:	clz	r0, r0
   128ec:	lsr	r0, r0, #5
   128f0:	cmp	r5, #0
   128f4:	moveq	r0, #0
   128f8:	cmp	r0, #0
   128fc:	beq	12970 <create_monster_top_down@@Base+0x1e0>
   12900:	mov	r1, #0
   12904:	mov	r0, r4
   12908:	bl	170b0 <flatcc_builder_table_add_offset@@Base>
   1290c:	cmp	r0, #0
   12910:	beq	12970 <create_monster_top_down@@Base+0x1e0>
   12914:	str	r5, [r0]
   12918:	mov	r3, #2
   1291c:	mov	r2, r3
   12920:	mov	r1, #1
   12924:	mov	r0, r4
   12928:	bl	16ec0 <flatcc_builder_table_add@@Base>
   1292c:	cmp	r0, #0
   12930:	beq	12970 <create_monster_top_down@@Base+0x1e0>
   12934:	mov	r3, #3
   12938:	strh	r3, [r0]
   1293c:	mov	r2, #0
   12940:	movw	r1, #32428	; 0x7eac
   12944:	movt	r1, #1
   12948:	mov	r0, r4
   1294c:	bl	15d24 <flatcc_builder_check_required@@Base>
   12950:	cmp	r0, #0
   12954:	beq	12acc <create_monster_top_down@@Base+0x33c>
   12958:	mov	r0, r4
   1295c:	bl	15dd4 <flatcc_builder_end_table@@Base>
   12960:	subs	r1, r0, #0
   12964:	beq	12970 <create_monster_top_down@@Base+0x1e0>
   12968:	mov	r0, r4
   1296c:	bl	14a54 <flatcc_builder_offset_vector_push@@Base>
   12970:	movw	r1, #32572	; 0x7f3c
   12974:	movt	r1, #1
   12978:	mov	r0, r4
   1297c:	bl	16d14 <flatcc_builder_create_string_str@@Base>
   12980:	mov	r5, r0
   12984:	mov	r1, #2
   12988:	mov	r0, r4
   1298c:	bl	152fc <flatcc_builder_start_table@@Base>
   12990:	clz	r0, r0
   12994:	lsr	r0, r0, #5
   12998:	cmp	r5, #0
   1299c:	moveq	r0, #0
   129a0:	cmp	r0, #0
   129a4:	beq	12b20 <create_monster_top_down@@Base+0x390>
   129a8:	mov	r1, #0
   129ac:	mov	r0, r4
   129b0:	bl	170b0 <flatcc_builder_table_add_offset@@Base>
   129b4:	cmp	r0, #0
   129b8:	beq	12b20 <create_monster_top_down@@Base+0x390>
   129bc:	str	r5, [r0]
   129c0:	mov	r3, #2
   129c4:	mov	r2, r3
   129c8:	mov	r1, #1
   129cc:	mov	r0, r4
   129d0:	bl	16ec0 <flatcc_builder_table_add@@Base>
   129d4:	cmp	r0, #0
   129d8:	beq	12b20 <create_monster_top_down@@Base+0x390>
   129dc:	mov	r3, #5
   129e0:	strh	r3, [r0]
   129e4:	mov	r2, #0
   129e8:	movw	r1, #32428	; 0x7eac
   129ec:	movt	r1, #1
   129f0:	mov	r0, r4
   129f4:	bl	15d24 <flatcc_builder_check_required@@Base>
   129f8:	cmp	r0, #0
   129fc:	beq	12ae8 <create_monster_top_down@@Base+0x358>
   12a00:	mov	r0, r4
   12a04:	bl	15dd4 <flatcc_builder_end_table@@Base>
   12a08:	subs	r1, r0, #0
   12a0c:	moveq	r0, #0
   12a10:	beq	12a1c <create_monster_top_down@@Base+0x28c>
   12a14:	mov	r0, r4
   12a18:	bl	14a54 <flatcc_builder_offset_vector_push@@Base>
   12a1c:	ldr	r5, [r0]
   12a20:	mov	r0, r4
   12a24:	bl	16234 <flatcc_builder_end_offset_vector@@Base>
   12a28:	subs	r6, r0, #0
   12a2c:	beq	12a44 <create_monster_top_down@@Base+0x2b4>
   12a30:	mov	r1, #7
   12a34:	mov	r0, r4
   12a38:	bl	170b0 <flatcc_builder_table_add_offset@@Base>
   12a3c:	cmp	r0, #0
   12a40:	strne	r6, [r0]
   12a44:	cmp	r5, #0
   12a48:	beq	12a88 <create_monster_top_down@@Base+0x2f8>
   12a4c:	mov	r3, #1
   12a50:	mov	r2, r3
   12a54:	mov	r1, #8
   12a58:	mov	r0, r4
   12a5c:	bl	16ec0 <flatcc_builder_table_add@@Base>
   12a60:	subs	r6, r0, #0
   12a64:	beq	12a88 <create_monster_top_down@@Base+0x2f8>
   12a68:	mov	r1, #9
   12a6c:	mov	r0, r4
   12a70:	bl	170b0 <flatcc_builder_table_add_offset@@Base>
   12a74:	cmp	r0, #0
   12a78:	beq	12a88 <create_monster_top_down@@Base+0x2f8>
   12a7c:	mov	r3, #1
   12a80:	strb	r3, [r6]
   12a84:	str	r5, [r0]
   12a88:	mov	r2, #0
   12a8c:	ldr	r1, [pc, #148]	; 12b28 <create_monster_top_down@@Base+0x398>
   12a90:	mov	r0, r4
   12a94:	bl	15d24 <flatcc_builder_check_required@@Base>
   12a98:	cmp	r0, #0
   12a9c:	beq	12b04 <create_monster_top_down@@Base+0x374>
   12aa0:	mov	r0, r4
   12aa4:	bl	15dd4 <flatcc_builder_end_table@@Base>
   12aa8:	mov	r1, r0
   12aac:	mov	r0, r4
   12ab0:	bl	14410 <flatcc_builder_end_buffer@@Base>
   12ab4:	mov	r0, #0
   12ab8:	add	sp, sp, #28
   12abc:	ldrd	r4, [sp]
   12ac0:	ldrd	r6, [sp, #8]
   12ac4:	add	sp, sp, #16
   12ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   12acc:	ldr	r3, [pc, #88]	; 12b2c <create_monster_top_down@@Base+0x39c>
   12ad0:	mov	r2, #52	; 0x34
   12ad4:	movw	r1, #32576	; 0x7f40
   12ad8:	movt	r1, #1
   12adc:	movw	r0, #32668	; 0x7f9c
   12ae0:	movt	r0, #1
   12ae4:	bl	11fd4 <__assert_fail@plt>
   12ae8:	ldr	r3, [pc, #60]	; 12b2c <create_monster_top_down@@Base+0x39c>
   12aec:	mov	r2, #52	; 0x34
   12af0:	movw	r1, #32576	; 0x7f40
   12af4:	movt	r1, #1
   12af8:	movw	r0, #32668	; 0x7f9c
   12afc:	movt	r0, #1
   12b00:	bl	11fd4 <__assert_fail@plt>
   12b04:	ldr	r3, [pc, #36]	; 12b30 <create_monster_top_down@@Base+0x3a0>
   12b08:	mov	r2, #50	; 0x32
   12b0c:	movw	r1, #32576	; 0x7f40
   12b10:	movt	r1, #1
   12b14:	movw	r0, #32828	; 0x803c
   12b18:	movt	r0, #1
   12b1c:	bl	11fd4 <__assert_fail@plt>
   12b20:	mov	r0, #0
   12b24:	b	12a1c <create_monster_top_down@@Base+0x28c>
   12b28:	ldrdeq	r7, [r1], -r8
   12b2c:			; <UNDEFINED> instruction: 0x00017eb0
   12b30:	ldrdeq	r7, [r1], -ip

00012b34 <access_monster_buffer@@Base>:
   12b34:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12b38:	strd	r6, [sp, #8]
   12b3c:	str	r8, [sp, #16]
   12b40:	str	lr, [sp, #20]
   12b44:	cmp	r0, #0
   12b48:	beq	12e14 <access_monster_buffer@@Base+0x2e0>
   12b4c:	ldr	r3, [r0]
   12b50:	adds	r5, r0, r3
   12b54:	beq	12e14 <access_monster_buffer@@Base+0x2e0>
   12b58:	ldr	r4, [r0, r3]
   12b5c:	sub	r4, r5, r4
   12b60:	ldrh	r6, [r4]
   12b64:	cmp	r6, #9
   12b68:	bls	12e30 <access_monster_buffer@@Base+0x2fc>
   12b6c:	ldrh	r3, [r4, #8]
   12b70:	cmp	r3, #0
   12b74:	moveq	r2, #100	; 0x64
   12b78:	ldrshne	r2, [r5, r3]
   12b7c:	ldrh	r3, [r4, #6]
   12b80:	cmp	r3, #0
   12b84:	moveq	r1, #150	; 0x96
   12b88:	beq	12b90 <access_monster_buffer@@Base+0x5c>
   12b8c:	ldrsh	r1, [r5, r3]
   12b90:	cmp	r6, #11
   12b94:	bls	12e4c <access_monster_buffer@@Base+0x318>
   12b98:	ldrh	r3, [r4, #10]
   12b9c:	cmp	r3, #0
   12ba0:	moveq	r0, #0
   12ba4:	moveq	r7, r0
   12ba8:	beq	12bc4 <access_monster_buffer@@Base+0x90>
   12bac:	add	r0, r5, r3
   12bb0:	ldr	r3, [r5, r3]
   12bb4:	add	r3, r3, #4
   12bb8:	adds	r0, r0, r3
   12bbc:	beq	12e58 <access_monster_buffer@@Base+0x324>
   12bc0:	ldr	r7, [r0, #-4]
   12bc4:	cmp	r2, #300	; 0x12c
   12bc8:	bne	12e60 <access_monster_buffer@@Base+0x32c>
   12bcc:	cmp	r1, #150	; 0x96
   12bd0:	bne	12e7c <access_monster_buffer@@Base+0x348>
   12bd4:	movw	r1, #32824	; 0x8038
   12bd8:	movt	r1, #1
   12bdc:	bl	11f2c <strcmp@plt>
   12be0:	cmp	r0, #0
   12be4:	bne	12e98 <access_monster_buffer@@Base+0x364>
   12be8:	cmp	r7, #3
   12bec:	bne	12eb4 <access_monster_buffer@@Base+0x380>
   12bf0:	cmp	r6, #9
   12bf4:	bls	12ed0 <access_monster_buffer@@Base+0x39c>
   12bf8:	ldrh	r2, [r4, #6]
   12bfc:	ldrh	r3, [r4, #8]
   12c00:	cmp	r3, #0
   12c04:	beq	12ed0 <access_monster_buffer@@Base+0x39c>
   12c08:	cmp	r2, #0
   12c0c:	bne	12eec <access_monster_buffer@@Base+0x3b8>
   12c10:	cmp	r6, #5
   12c14:	bls	12f08 <access_monster_buffer@@Base+0x3d4>
   12c18:	ldrh	r3, [r4, #4]
   12c1c:	cmp	r3, #0
   12c20:	beq	12f08 <access_monster_buffer@@Base+0x3d4>
   12c24:	adds	r3, r5, r3
   12c28:	beq	12f08 <access_monster_buffer@@Base+0x3d4>
   12c2c:	vldr	s13, [r3, #4]
   12c30:	vldr	s14, [r3, #8]
   12c34:	vldr	s12, [r3]
   12c38:	vldr	s15, [pc, #984]	; 13018 <access_monster_buffer@@Base+0x4e4>
   12c3c:	vcmp.f32	s12, s15
   12c40:	vmrs	APSR_nzcv, fpscr
   12c44:	bne	12f24 <access_monster_buffer@@Base+0x3f0>
   12c48:	vldr	s15, [pc, #972]	; 1301c <access_monster_buffer@@Base+0x4e8>
   12c4c:	vcmp.f32	s13, s15
   12c50:	vmrs	APSR_nzcv, fpscr
   12c54:	bne	12f40 <access_monster_buffer@@Base+0x40c>
   12c58:	vldr	s15, [pc, #960]	; 13020 <access_monster_buffer@@Base+0x4ec>
   12c5c:	vcmp.f32	s14, s15
   12c60:	vmrs	APSR_nzcv, fpscr
   12c64:	bne	12f5c <access_monster_buffer@@Base+0x428>
   12c68:	cmp	r6, #15
   12c6c:	bls	130d0 <access_monster_buffer@@Base+0x59c>
   12c70:	ldrh	r2, [r4, #14]
   12c74:	cmp	r2, #0
   12c78:	beq	130d0 <access_monster_buffer@@Base+0x59c>
   12c7c:	add	r3, r5, r2
   12c80:	ldr	r2, [r5, r2]
   12c84:	add	r2, r2, #4
   12c88:	adds	r3, r3, r2
   12c8c:	beq	130d0 <access_monster_buffer@@Base+0x59c>
   12c90:	ldr	r2, [r3, #-4]
   12c94:	cmp	r2, #10
   12c98:	bne	12f78 <access_monster_buffer@@Base+0x444>
   12c9c:	ldrb	r3, [r3, #2]
   12ca0:	cmp	r3, #2
   12ca4:	bne	12f94 <access_monster_buffer@@Base+0x460>
   12ca8:	cmp	r6, #19
   12cac:	bls	12fb0 <access_monster_buffer@@Base+0x47c>
   12cb0:	ldrh	r2, [r4, #18]
   12cb4:	cmp	r2, #0
   12cb8:	beq	12fb0 <access_monster_buffer@@Base+0x47c>
   12cbc:	add	r3, r5, r2
   12cc0:	ldr	r2, [r5, r2]
   12cc4:	add	r2, r2, #4
   12cc8:	adds	r3, r3, r2
   12ccc:	beq	12fb0 <access_monster_buffer@@Base+0x47c>
   12cd0:	ldr	r2, [r3, #-4]
   12cd4:	cmp	r2, #2
   12cd8:	bne	12fb0 <access_monster_buffer@@Base+0x47c>
   12cdc:	ldr	r2, [r3, #4]
   12ce0:	add	r2, r2, #4
   12ce4:	adds	r1, r3, r2
   12ce8:	beq	12fcc <access_monster_buffer@@Base+0x498>
   12cec:	ldr	r3, [r3, r2]
   12cf0:	sub	r3, r1, r3
   12cf4:	ldrh	r2, [r3]
   12cf8:	cmp	r2, #5
   12cfc:	bls	130b0 <access_monster_buffer@@Base+0x57c>
   12d00:	ldrh	ip, [r3, #4]
   12d04:	cmp	ip, #0
   12d08:	beq	130b0 <access_monster_buffer@@Base+0x57c>
   12d0c:	add	r0, r1, ip
   12d10:	ldr	ip, [r1, ip]
   12d14:	add	ip, ip, #4
   12d18:	add	r0, r0, ip
   12d1c:	cmp	r2, #7
   12d20:	movls	r7, #0
   12d24:	bhi	12fe8 <access_monster_buffer@@Base+0x4b4>
   12d28:	cmp	r0, #0
   12d2c:	beq	12ffc <access_monster_buffer@@Base+0x4c8>
   12d30:	movw	r1, #32572	; 0x7f3c
   12d34:	movt	r1, #1
   12d38:	bl	11f2c <strcmp@plt>
   12d3c:	cmp	r0, #0
   12d40:	bne	12ffc <access_monster_buffer@@Base+0x4c8>
   12d44:	cmp	r7, #5
   12d48:	bne	1302c <access_monster_buffer@@Base+0x4f8>
   12d4c:	cmp	r6, #21
   12d50:	bls	12dfc <access_monster_buffer@@Base+0x2c8>
   12d54:	ldrh	r3, [r4, #20]
   12d58:	cmp	r3, #0
   12d5c:	beq	12dfc <access_monster_buffer@@Base+0x2c8>
   12d60:	ldrb	r3, [r5, r3]
   12d64:	cmp	r3, #1
   12d68:	bne	12dfc <access_monster_buffer@@Base+0x2c8>
   12d6c:	cmp	r6, #23
   12d70:	bls	13048 <access_monster_buffer@@Base+0x514>
   12d74:	ldrh	r3, [r4, #22]
   12d78:	cmp	r3, #0
   12d7c:	beq	13048 <access_monster_buffer@@Base+0x514>
   12d80:	add	r2, r5, r3
   12d84:	ldr	r3, [r5, r3]
   12d88:	adds	r1, r2, r3
   12d8c:	beq	13048 <access_monster_buffer@@Base+0x514>
   12d90:	ldr	r3, [r2, r3]
   12d94:	sub	r3, r1, r3
   12d98:	ldrh	r2, [r3]
   12d9c:	cmp	r2, #5
   12da0:	movls	r0, #0
   12da4:	bls	12dc8 <access_monster_buffer@@Base+0x294>
   12da8:	ldrh	ip, [r3, #4]
   12dac:	cmp	ip, #0
   12db0:	moveq	r0, #0
   12db4:	beq	12dc8 <access_monster_buffer@@Base+0x294>
   12db8:	add	r0, r1, ip
   12dbc:	ldr	ip, [r1, ip]
   12dc0:	add	ip, ip, #4
   12dc4:	add	r0, r0, ip
   12dc8:	cmp	r2, #7
   12dcc:	bls	13080 <access_monster_buffer@@Base+0x54c>
   12dd0:	ldrh	r3, [r3, #6]
   12dd4:	cmp	r3, #0
   12dd8:	beq	13080 <access_monster_buffer@@Base+0x54c>
   12ddc:	ldrsh	r4, [r1, r3]
   12de0:	movw	r1, #32572	; 0x7f3c
   12de4:	movt	r1, #1
   12de8:	bl	11f2c <strcmp@plt>
   12dec:	cmp	r0, #0
   12df0:	bne	13094 <access_monster_buffer@@Base+0x560>
   12df4:	cmp	r4, #5
   12df8:	bne	13064 <access_monster_buffer@@Base+0x530>
   12dfc:	mov	r0, #0
   12e00:	ldrd	r4, [sp]
   12e04:	ldrd	r6, [sp, #8]
   12e08:	ldr	r8, [sp, #16]
   12e0c:	add	sp, sp, #20
   12e10:	pop	{pc}		; (ldr pc, [sp], #4)
   12e14:	ldr	r3, [pc, #524]	; 13028 <access_monster_buffer@@Base+0x4f4>
   12e18:	mov	r2, #211	; 0xd3
   12e1c:	movw	r1, #32988	; 0x80dc
   12e20:	movt	r1, #1
   12e24:	movw	r0, #35208	; 0x8988
   12e28:	movt	r0, #1
   12e2c:	bl	11fd4 <__assert_fail@plt>
   12e30:	cmp	r6, #7
   12e34:	bhi	130ec <access_monster_buffer@@Base+0x5b8>
   12e38:	mov	r2, #100	; 0x64
   12e3c:	mov	r1, #150	; 0x96
   12e40:	mov	r0, #0
   12e44:	mov	r7, r0
   12e48:	b	12bc4 <access_monster_buffer@@Base+0x90>
   12e4c:	mov	r0, #0
   12e50:	mov	r7, r0
   12e54:	b	12bc4 <access_monster_buffer@@Base+0x90>
   12e58:	mov	r7, #0
   12e5c:	b	12bc4 <access_monster_buffer@@Base+0x90>
   12e60:	ldr	r3, [pc, #448]	; 13028 <access_monster_buffer@@Base+0x4f4>
   12e64:	mov	r2, #219	; 0xdb
   12e68:	movw	r1, #32988	; 0x80dc
   12e6c:	movt	r1, #1
   12e70:	movw	r0, #35208	; 0x8988
   12e74:	movt	r0, #1
   12e78:	bl	11fd4 <__assert_fail@plt>
   12e7c:	ldr	r3, [pc, #420]	; 13028 <access_monster_buffer@@Base+0x4f4>
   12e80:	mov	r2, #221	; 0xdd
   12e84:	movw	r1, #32988	; 0x80dc
   12e88:	movt	r1, #1
   12e8c:	movw	r0, #35208	; 0x8988
   12e90:	movt	r0, #1
   12e94:	bl	11fd4 <__assert_fail@plt>
   12e98:	ldr	r3, [pc, #392]	; 13028 <access_monster_buffer@@Base+0x4f4>
   12e9c:	mov	r2, #222	; 0xde
   12ea0:	movw	r1, #32988	; 0x80dc
   12ea4:	movt	r1, #1
   12ea8:	movw	r0, #35208	; 0x8988
   12eac:	movt	r0, #1
   12eb0:	bl	11fd4 <__assert_fail@plt>
   12eb4:	ldr	r3, [pc, #364]	; 13028 <access_monster_buffer@@Base+0x4f4>
   12eb8:	mov	r2, #223	; 0xdf
   12ebc:	movw	r1, #32988	; 0x80dc
   12ec0:	movt	r1, #1
   12ec4:	movw	r0, #35208	; 0x8988
   12ec8:	movt	r0, #1
   12ecc:	bl	11fd4 <__assert_fail@plt>
   12ed0:	ldr	r3, [pc, #336]	; 13028 <access_monster_buffer@@Base+0x4f4>
   12ed4:	mov	r2, #227	; 0xe3
   12ed8:	movw	r1, #32988	; 0x80dc
   12edc:	movt	r1, #1
   12ee0:	movw	r0, #35208	; 0x8988
   12ee4:	movt	r0, #1
   12ee8:	bl	11fd4 <__assert_fail@plt>
   12eec:	ldr	r3, [pc, #308]	; 13028 <access_monster_buffer@@Base+0x4f4>
   12ef0:	mov	r2, #228	; 0xe4
   12ef4:	movw	r1, #32988	; 0x80dc
   12ef8:	movt	r1, #1
   12efc:	movw	r0, #35208	; 0x8988
   12f00:	movt	r0, #1
   12f04:	bl	11fd4 <__assert_fail@plt>
   12f08:	ldr	r3, [pc, #280]	; 13028 <access_monster_buffer@@Base+0x4f4>
   12f0c:	mov	r2, #232	; 0xe8
   12f10:	movw	r1, #32988	; 0x80dc
   12f14:	movt	r1, #1
   12f18:	movw	r0, #35208	; 0x8988
   12f1c:	movt	r0, #1
   12f20:	bl	11fd4 <__assert_fail@plt>
   12f24:	ldr	r3, [pc, #252]	; 13028 <access_monster_buffer@@Base+0x4f4>
   12f28:	mov	r2, #240	; 0xf0
   12f2c:	movw	r1, #32988	; 0x80dc
   12f30:	movt	r1, #1
   12f34:	movw	r0, #35208	; 0x8988
   12f38:	movt	r0, #1
   12f3c:	bl	11fd4 <__assert_fail@plt>
   12f40:	ldr	r3, [pc, #224]	; 13028 <access_monster_buffer@@Base+0x4f4>
   12f44:	mov	r2, #241	; 0xf1
   12f48:	movw	r1, #32988	; 0x80dc
   12f4c:	movt	r1, #1
   12f50:	movw	r0, #35208	; 0x8988
   12f54:	movt	r0, #1
   12f58:	bl	11fd4 <__assert_fail@plt>
   12f5c:	ldr	r3, [pc, #196]	; 13028 <access_monster_buffer@@Base+0x4f4>
   12f60:	mov	r2, #242	; 0xf2
   12f64:	movw	r1, #32988	; 0x80dc
   12f68:	movt	r1, #1
   12f6c:	movw	r0, #35208	; 0x8988
   12f70:	movt	r0, #1
   12f74:	bl	11fd4 <__assert_fail@plt>
   12f78:	ldr	r3, [pc, #168]	; 13028 <access_monster_buffer@@Base+0x4f4>
   12f7c:	movw	r2, #263	; 0x107
   12f80:	movw	r1, #32988	; 0x80dc
   12f84:	movt	r1, #1
   12f88:	movw	r0, #35208	; 0x8988
   12f8c:	movt	r0, #1
   12f90:	bl	11fd4 <__assert_fail@plt>
   12f94:	ldr	r3, [pc, #140]	; 13028 <access_monster_buffer@@Base+0x4f4>
   12f98:	movw	r2, #267	; 0x10b
   12f9c:	movw	r1, #32988	; 0x80dc
   12fa0:	movt	r1, #1
   12fa4:	movw	r0, #35208	; 0x8988
   12fa8:	movt	r0, #1
   12fac:	bl	11fd4 <__assert_fail@plt>
   12fb0:	ldr	r3, [pc, #112]	; 13028 <access_monster_buffer@@Base+0x4f4>
   12fb4:	movw	r2, #271	; 0x10f
   12fb8:	movw	r1, #32988	; 0x80dc
   12fbc:	movt	r1, #1
   12fc0:	movw	r0, #35208	; 0x8988
   12fc4:	movt	r0, #1
   12fc8:	bl	11fd4 <__assert_fail@plt>
   12fcc:	ldr	r3, [pc, #80]	; 13024 <access_monster_buffer@@Base+0x4f0>
   12fd0:	mov	r2, #148	; 0x94
   12fd4:	movw	r1, #33064	; 0x8128
   12fd8:	movt	r1, #1
   12fdc:	movw	r0, #33156	; 0x8184
   12fe0:	movt	r0, #1
   12fe4:	bl	11fd4 <__assert_fail@plt>
   12fe8:	ldrh	r3, [r3, #6]
   12fec:	cmp	r3, #0
   12ff0:	moveq	r7, #0
   12ff4:	beq	12d28 <access_monster_buffer@@Base+0x1f4>
   12ff8:	b	130c8 <access_monster_buffer@@Base+0x594>
   12ffc:	ldr	r3, [pc, #36]	; 13028 <access_monster_buffer@@Base+0x4f4>
   13000:	movw	r2, #275	; 0x113
   13004:	movw	r1, #32988	; 0x80dc
   13008:	movt	r1, #1
   1300c:	movw	r0, #35208	; 0x8988
   13010:	movt	r0, #1
   13014:	bl	11fd4 <__assert_fail@plt>
   13018:	svccc	0x00800000
   1301c:	andmi	r0, r0, r0
   13020:	submi	r0, r0, r0
   13024:	andeq	r7, r1, r0, lsl pc
   13028:	strdeq	r7, [r1], -r8
   1302c:	ldr	r3, [pc, #-12]	; 13028 <access_monster_buffer@@Base+0x4f4>
   13030:	mov	r2, #276	; 0x114
   13034:	movw	r1, #32988	; 0x80dc
   13038:	movt	r1, #1
   1303c:	movw	r0, #35208	; 0x8988
   13040:	movt	r0, #1
   13044:	bl	11fd4 <__assert_fail@plt>
   13048:	ldr	r3, [pc, #-44]	; 13024 <access_monster_buffer@@Base+0x4f0>
   1304c:	mov	r2, #148	; 0x94
   13050:	movw	r1, #33064	; 0x8128
   13054:	movt	r1, #1
   13058:	movw	r0, #33156	; 0x8184
   1305c:	movt	r0, #1
   13060:	bl	11fd4 <__assert_fail@plt>
   13064:	ldr	r3, [pc, #-68]	; 13028 <access_monster_buffer@@Base+0x4f4>
   13068:	movw	r2, #287	; 0x11f
   1306c:	movw	r1, #32988	; 0x80dc
   13070:	movt	r1, #1
   13074:	movw	r0, #35208	; 0x8988
   13078:	movt	r0, #1
   1307c:	bl	11fd4 <__assert_fail@plt>
   13080:	movw	r1, #32572	; 0x7f3c
   13084:	movt	r1, #1
   13088:	bl	11f2c <strcmp@plt>
   1308c:	cmp	r0, #0
   13090:	beq	13064 <access_monster_buffer@@Base+0x530>
   13094:	ldr	r3, [pc, #-116]	; 13028 <access_monster_buffer@@Base+0x4f4>
   13098:	movw	r2, #286	; 0x11e
   1309c:	movw	r1, #32988	; 0x80dc
   130a0:	movt	r1, #1
   130a4:	movw	r0, #35208	; 0x8988
   130a8:	movt	r0, #1
   130ac:	bl	11fd4 <__assert_fail@plt>
   130b0:	cmp	r2, #7
   130b4:	bls	12ffc <access_monster_buffer@@Base+0x4c8>
   130b8:	ldrh	r3, [r3, #6]
   130bc:	cmp	r3, #0
   130c0:	movne	r0, #0
   130c4:	beq	12ffc <access_monster_buffer@@Base+0x4c8>
   130c8:	ldrsh	r7, [r1, r3]
   130cc:	b	12d28 <access_monster_buffer@@Base+0x1f4>
   130d0:	ldr	r3, [pc, #-176]	; 13028 <access_monster_buffer@@Base+0x4f4>
   130d4:	movw	r2, #261	; 0x105
   130d8:	movw	r1, #32988	; 0x80dc
   130dc:	movt	r1, #1
   130e0:	movw	r0, #35208	; 0x8988
   130e4:	movt	r0, #1
   130e8:	bl	11fd4 <__assert_fail@plt>
   130ec:	ldrh	r3, [r4, #6]
   130f0:	cmp	r3, #0
   130f4:	movne	r2, #100	; 0x64
   130f8:	bne	12b8c <access_monster_buffer@@Base+0x58>
   130fc:	mov	r2, #100	; 0x64
   13100:	mov	r1, #150	; 0x96
   13104:	mov	r0, #0
   13108:	mov	r7, r0
   1310c:	b	12bc4 <access_monster_buffer@@Base+0x90>

00013110 <main@@Base>:
   13110:	str	r4, [sp, #-8]!
   13114:	str	lr, [sp, #4]
   13118:	sub	sp, sp, #240	; 0xf0
   1311c:	add	r0, sp, #8
   13120:	bl	13948 <flatcc_builder_init@@Base>
   13124:	mov	r1, #0
   13128:	add	r0, sp, #8
   1312c:	bl	120d0 <create_monster_bottom_up@@Base>
   13130:	cmp	r0, #0
   13134:	bne	131dc <main@@Base+0xcc>
   13138:	add	r1, sp, #4
   1313c:	add	r0, sp, #8
   13140:	bl	17690 <flatcc_builder_finalize_aligned_buffer@@Base>
   13144:	bl	177b0 <flatcc_builder_aligned_free@@Base>
   13148:	add	r0, sp, #8
   1314c:	bl	13b0c <flatcc_builder_reset@@Base>
   13150:	mov	r1, #1
   13154:	add	r0, sp, #8
   13158:	bl	120d0 <create_monster_bottom_up@@Base>
   1315c:	cmp	r0, #0
   13160:	bne	131f8 <main@@Base+0xe8>
   13164:	add	r1, sp, #4
   13168:	add	r0, sp, #8
   1316c:	bl	17690 <flatcc_builder_finalize_aligned_buffer@@Base>
   13170:	mov	r4, r0
   13174:	bl	12b34 <access_monster_buffer@@Base>
   13178:	mov	r0, r4
   1317c:	bl	177b0 <flatcc_builder_aligned_free@@Base>
   13180:	add	r0, sp, #8
   13184:	bl	13b0c <flatcc_builder_reset@@Base>
   13188:	add	r0, sp, #8
   1318c:	bl	12790 <create_monster_top_down@@Base>
   13190:	add	r1, sp, #4
   13194:	add	r0, sp, #8
   13198:	bl	175f4 <flatcc_builder_finalize_buffer@@Base>
   1319c:	mov	r4, r0
   131a0:	bl	12b34 <access_monster_buffer@@Base>
   131a4:	cmp	r0, #0
   131a8:	bne	13214 <main@@Base+0x104>
   131ac:	mov	r0, r4
   131b0:	bl	11f38 <free@plt>
   131b4:	add	r0, sp, #8
   131b8:	bl	13b2c <flatcc_builder_clear@@Base>
   131bc:	movw	r0, #33196	; 0x81ac
   131c0:	movt	r0, #1
   131c4:	bl	11f68 <puts@plt>
   131c8:	mov	r0, #0
   131cc:	add	sp, sp, #240	; 0xf0
   131d0:	ldr	r4, [sp]
   131d4:	add	sp, sp, #4
   131d8:	pop	{pc}		; (ldr pc, [sp], #4)
   131dc:	ldr	r3, [pc, #76]	; 13230 <main@@Base+0x120>
   131e0:	mov	r2, #308	; 0x134
   131e4:	movw	r1, #32988	; 0x80dc
   131e8:	movt	r1, #1
   131ec:	movw	r0, #35208	; 0x8988
   131f0:	movt	r0, #1
   131f4:	bl	11fd4 <__assert_fail@plt>
   131f8:	ldr	r3, [pc, #48]	; 13230 <main@@Base+0x120>
   131fc:	movw	r2, #335	; 0x14f
   13200:	movw	r1, #32988	; 0x80dc
   13204:	movt	r1, #1
   13208:	movw	r0, #35208	; 0x8988
   1320c:	movt	r0, #1
   13210:	bl	11fd4 <__assert_fail@plt>
   13214:	ldr	r3, [pc, #20]	; 13230 <main@@Base+0x120>
   13218:	movw	r2, #342	; 0x156
   1321c:	movw	r1, #32988	; 0x80dc
   13220:	movt	r1, #1
   13224:	movw	r0, #35208	; 0x8988
   13228:	movt	r0, #1
   1322c:	bl	11fd4 <__assert_fail@plt>
   13230:	andeq	r7, r1, ip, lsr #30
   13234:	strd	r4, [sp, #-16]!
   13238:	str	r6, [sp, #8]
   1323c:	str	lr, [sp, #12]
   13240:	sub	sp, sp, #8
   13244:	mov	r4, r0
   13248:	mov	r5, r2
   1324c:	ldr	r2, [r0, #28]
   13250:	mov	r3, #1
   13254:	str	r3, [sp]
   13258:	ldr	r6, [r0, #48]	; 0x30
   1325c:	add	r2, r1, r2
   13260:	add	r1, r0, #60	; 0x3c
   13264:	ldr	r0, [r0, #40]	; 0x28
   13268:	blx	r6
   1326c:	cmp	r0, #0
   13270:	bne	132b4 <main@@Base+0x1a4>
   13274:	ldr	r1, [r4, #28]
   13278:	ldr	r2, [r4, #60]	; 0x3c
   1327c:	add	r2, r2, r1
   13280:	str	r2, [r4, #16]
   13284:	ldr	r3, [r4, #64]	; 0x40
   13288:	sub	r3, r3, r1
   1328c:	cmp	r3, r5
   13290:	movcs	r3, r5
   13294:	str	r3, [r4, #24]
   13298:	ldr	r3, [r4, #32]
   1329c:	str	r5, [r3, #4]
   132a0:	add	sp, sp, #8
   132a4:	ldrd	r4, [sp]
   132a8:	ldr	r6, [sp, #8]
   132ac:	add	sp, sp, #12
   132b0:	pop	{pc}		; (ldr pc, [sp], #4)
   132b4:	mvn	r0, #0
   132b8:	b	132a0 <main@@Base+0x190>

000132bc <flatcc_builder_default_alloc@@Base>:
   132bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   132c0:	strd	r6, [sp, #8]
   132c4:	str	r8, [sp, #16]
   132c8:	str	lr, [sp, #20]
   132cc:	mov	r5, r1
   132d0:	cmp	r2, #0
   132d4:	beq	1330c <flatcc_builder_default_alloc@@Base+0x50>
   132d8:	mov	r6, r3
   132dc:	ldr	r3, [sp, #24]
   132e0:	sub	r3, r3, #1
   132e4:	cmp	r3, #6
   132e8:	ldrls	pc, [pc, r3, lsl #2]
   132ec:	b	133b8 <flatcc_builder_default_alloc@@Base+0xfc>
   132f0:	andeq	r3, r1, r8, lsr r3
   132f4:			; <UNDEFINED> instruction: 0x000133b8
   132f8:			; <UNDEFINED> instruction: 0x000133b8
   132fc:	andeq	r3, r1, r0, lsr r3
   13300:	andeq	r3, r1, r0, asr #7
   13304:			; <UNDEFINED> instruction: 0x000133b8
   13308:			; <UNDEFINED> instruction: 0x000133b0
   1330c:	ldr	r0, [r1]
   13310:	cmp	r0, #0
   13314:	moveq	r0, #0
   13318:	beq	1339c <flatcc_builder_default_alloc@@Base+0xe0>
   1331c:	bl	11f38 <free@plt>
   13320:	mov	r0, #0
   13324:	str	r0, [r5]
   13328:	str	r0, [r5, #4]
   1332c:	b	1339c <flatcc_builder_default_alloc@@Base+0xe0>
   13330:	mov	r4, #288	; 0x120
   13334:	b	1333c <flatcc_builder_default_alloc@@Base+0x80>
   13338:	mov	r4, #256	; 0x100
   1333c:	cmp	r4, r2
   13340:	bcs	13350 <flatcc_builder_default_alloc@@Base+0x94>
   13344:	lsl	r4, r4, #1
   13348:	cmp	r2, r4
   1334c:	bhi	13344 <flatcc_builder_default_alloc@@Base+0x88>
   13350:	ldr	r3, [r5, #4]
   13354:	cmp	r3, r2
   13358:	bcc	13368 <flatcc_builder_default_alloc@@Base+0xac>
   1335c:	cmp	r4, r3, lsr #1
   13360:	movls	r0, #0
   13364:	bls	1339c <flatcc_builder_default_alloc@@Base+0xe0>
   13368:	mov	r1, r4
   1336c:	ldr	r0, [r5]
   13370:	bl	11f5c <realloc@plt>
   13374:	subs	r7, r0, #0
   13378:	beq	133dc <flatcc_builder_default_alloc@@Base+0x120>
   1337c:	cmp	r6, #0
   13380:	beq	13390 <flatcc_builder_default_alloc@@Base+0xd4>
   13384:	ldr	r0, [r5, #4]
   13388:	cmp	r0, r4
   1338c:	bcc	133c8 <flatcc_builder_default_alloc@@Base+0x10c>
   13390:	str	r7, [r5]
   13394:	str	r4, [r5, #4]
   13398:	mov	r0, #0
   1339c:	ldrd	r4, [sp]
   133a0:	ldrd	r6, [sp, #8]
   133a4:	ldr	r8, [sp, #16]
   133a8:	add	sp, sp, #20
   133ac:	pop	{pc}		; (ldr pc, [sp], #4)
   133b0:	mov	r4, #64	; 0x40
   133b4:	b	1333c <flatcc_builder_default_alloc@@Base+0x80>
   133b8:	mov	r4, #32
   133bc:	b	1333c <flatcc_builder_default_alloc@@Base+0x80>
   133c0:	mov	r4, r2
   133c4:	b	13350 <flatcc_builder_default_alloc@@Base+0x94>
   133c8:	sub	r2, r4, r0
   133cc:	mov	r1, #0
   133d0:	add	r0, r7, r0
   133d4:	bl	11fb0 <memset@plt>
   133d8:	b	13390 <flatcc_builder_default_alloc@@Base+0xd4>
   133dc:	mvn	r0, #0
   133e0:	b	1339c <flatcc_builder_default_alloc@@Base+0xe0>
   133e4:	cmp	r2, #0
   133e8:	bne	133f8 <flatcc_builder_default_alloc@@Base+0x13c>
   133ec:	ldrh	r2, [r0, #132]	; 0x84
   133f0:	cmp	r2, #0
   133f4:	moveq	r2, #1
   133f8:	ldrh	ip, [r1]
   133fc:	cmp	ip, #3
   13400:	movls	ip, #4
   13404:	strhls	ip, [r1]
   13408:	ldrh	ip, [r1]
   1340c:	cmp	ip, r2
   13410:	strhcc	r2, [r1]
   13414:	cmp	r3, #0
   13418:	bne	134f8 <flatcc_builder_default_alloc@@Base+0x23c>
   1341c:	strd	r4, [sp, #-12]!
   13420:	str	lr, [sp, #8]
   13424:	sub	sp, sp, #84	; 0x54
   13428:	ldr	r4, [r0, #140]	; 0x8c
   1342c:	sub	r2, r2, #1
   13430:	ands	r2, r2, r4
   13434:	bne	1344c <flatcc_builder_default_alloc@@Base+0x190>
   13438:	mov	r0, #0
   1343c:	add	sp, sp, #84	; 0x54
   13440:	ldrd	r4, [sp]
   13444:	add	sp, sp, #8
   13448:	pop	{pc}		; (ldr pc, [sp], #4)
   1344c:	str	r2, [sp, #8]
   13450:	movw	r3, #33252	; 0x81e4
   13454:	movt	r3, #1
   13458:	str	r3, [sp, #16]
   1345c:	str	r2, [sp, #20]
   13460:	mov	r3, #1
   13464:	str	r3, [sp, #12]
   13468:	add	r3, r4, r2
   1346c:	str	r3, [r0, #140]	; 0x8c
   13470:	cmp	r4, r3
   13474:	bgt	134c0 <flatcc_builder_default_alloc@@Base+0x204>
   13478:	str	r2, [sp]
   1347c:	ldr	r5, [r0, #44]	; 0x2c
   13480:	mov	r3, r4
   13484:	mov	r2, #1
   13488:	add	r1, sp, #16
   1348c:	ldr	r0, [r0, #36]	; 0x24
   13490:	blx	r5
   13494:	cmp	r0, #0
   13498:	bne	134dc <flatcc_builder_default_alloc@@Base+0x220>
   1349c:	cmn	r4, #1
   134a0:	bne	13438 <flatcc_builder_default_alloc@@Base+0x17c>
   134a4:	ldr	r3, [pc, #84]	; 13500 <flatcc_builder_default_alloc@@Base+0x244>
   134a8:	movw	r2, #702	; 0x2be
   134ac:	movw	r1, #35124	; 0x8934
   134b0:	movt	r1, #1
   134b4:	movw	r0, #35208	; 0x8988
   134b8:	movt	r0, #1
   134bc:	bl	11fd4 <__assert_fail@plt>
   134c0:	ldr	r3, [pc, #60]	; 13504 <flatcc_builder_default_alloc@@Base+0x248>
   134c4:	movw	r2, #673	; 0x2a1
   134c8:	movw	r1, #35124	; 0x8934
   134cc:	movt	r1, #1
   134d0:	movw	r0, #35208	; 0x8988
   134d4:	movt	r0, #1
   134d8:	bl	11fd4 <__assert_fail@plt>
   134dc:	ldr	r3, [pc, #32]	; 13504 <flatcc_builder_default_alloc@@Base+0x248>
   134e0:	movw	r2, #677	; 0x2a5
   134e4:	movw	r1, #35124	; 0x8934
   134e8:	movt	r1, #1
   134ec:	movw	r0, #35208	; 0x8988
   134f0:	movt	r0, #1
   134f4:	bl	11fd4 <__assert_fail@plt>
   134f8:	mov	r0, #0
   134fc:	bx	lr
   13500:	strdeq	r8, [r1], -r0
   13504:	andeq	r8, r1, r4, ror #7
   13508:	strd	r4, [sp, #-20]!	; 0xffffffec
   1350c:	strd	r6, [sp, #8]
   13510:	str	lr, [sp, #16]
   13514:	sub	sp, sp, #12
   13518:	mov	r4, r0
   1351c:	mov	r6, r1
   13520:	ldr	r3, [r0, #156]	; 0x9c
   13524:	add	r2, r3, #1
   13528:	str	r2, [r0, #156]	; 0x9c
   1352c:	ldr	r1, [r0, #160]	; 0xa0
   13530:	cmp	r2, r1
   13534:	ble	135ec <flatcc_builder_default_alloc@@Base+0x330>
   13538:	ldr	r1, [r0, #176]	; 0xb0
   1353c:	cmp	r2, r1
   13540:	cmpgt	r1, #0
   13544:	bgt	13660 <flatcc_builder_default_alloc@@Base+0x3a4>
   13548:	add	r3, r3, r3, lsl #3
   1354c:	lsl	r5, r3, #2
   13550:	add	r2, r5, #36	; 0x24
   13554:	ldr	r3, [r0, #88]	; 0x58
   13558:	cmp	r2, r3
   1355c:	bls	13584 <flatcc_builder_default_alloc@@Base+0x2c8>
   13560:	mov	r3, #4
   13564:	str	r3, [sp]
   13568:	ldr	r7, [r0, #48]	; 0x30
   1356c:	mov	r3, #0
   13570:	add	r1, r0, #84	; 0x54
   13574:	ldr	r0, [r0, #40]	; 0x28
   13578:	blx	r7
   1357c:	cmp	r0, #0
   13580:	bne	135d0 <flatcc_builder_default_alloc@@Base+0x314>
   13584:	ldr	r3, [r4, #84]	; 0x54
   13588:	add	r5, r3, r5
   1358c:	str	r5, [r4, #32]
   13590:	cmp	r5, #0
   13594:	beq	13668 <flatcc_builder_default_alloc@@Base+0x3ac>
   13598:	ldr	r3, [r4, #88]	; 0x58
   1359c:	movw	r2, #36409	; 0x8e39
   135a0:	movt	r2, #14563	; 0x38e3
   135a4:	umull	r2, r3, r2, r3
   135a8:	lsr	r3, r3, #3
   135ac:	ldr	r2, [r4, #176]	; 0xb0
   135b0:	cmp	r2, #0
   135b4:	cmpgt	r3, r2
   135b8:	movgt	r1, #1
   135bc:	movle	r1, #0
   135c0:	cmp	r1, #0
   135c4:	movne	r3, r2
   135c8:	str	r3, [r4, #160]	; 0xa0
   135cc:	b	135f8 <flatcc_builder_default_alloc@@Base+0x33c>
   135d0:	ldr	r3, [pc, #152]	; 13670 <flatcc_builder_default_alloc@@Base+0x3b4>
   135d4:	mov	r2, #308	; 0x134
   135d8:	movw	r1, #35124	; 0x8934
   135dc:	movt	r1, #1
   135e0:	movw	r0, #35208	; 0x8988
   135e4:	movt	r0, #1
   135e8:	bl	11fd4 <__assert_fail@plt>
   135ec:	ldr	r3, [r0, #32]
   135f0:	add	r3, r3, #36	; 0x24
   135f4:	str	r3, [r0, #32]
   135f8:	ldr	r3, [r4, #32]
   135fc:	ldr	r2, [r4, #20]
   13600:	str	r2, [r3, #8]
   13604:	ldr	r3, [r4, #32]
   13608:	ldrh	r2, [r4, #130]	; 0x82
   1360c:	strh	r2, [r3, #12]
   13610:	strh	r6, [r4, #130]	; 0x82
   13614:	ldr	r3, [r4, #32]
   13618:	ldr	r2, [r4, #28]
   1361c:	str	r2, [r3]
   13620:	ldr	r3, [r4, #32]
   13624:	mvn	r2, #3
   13628:	str	r2, [r3, #4]
   1362c:	ldr	r3, [r4, #28]
   13630:	ldr	r2, [r4, #20]
   13634:	add	r3, r3, r2
   13638:	add	r3, r3, #7
   1363c:	bic	r3, r3, #7
   13640:	str	r3, [r4, #28]
   13644:	mov	r0, #0
   13648:	str	r0, [r4, #20]
   1364c:	add	sp, sp, #12
   13650:	ldrd	r4, [sp]
   13654:	ldrd	r6, [sp, #8]
   13658:	add	sp, sp, #16
   1365c:	pop	{pc}		; (ldr pc, [sp], #4)
   13660:	mvn	r0, #0
   13664:	b	1364c <flatcc_builder_default_alloc@@Base+0x390>
   13668:	mvn	r0, #0
   1366c:	b	1364c <flatcc_builder_default_alloc@@Base+0x390>
   13670:	andeq	r8, r1, r0, lsl #8
   13674:	strd	r4, [sp, #-16]!
   13678:	str	r6, [sp, #8]
   1367c:	str	lr, [sp, #12]
   13680:	sub	sp, sp, #88	; 0x58
   13684:	cmn	r2, #-1073741823	; 0xc0000001
   13688:	bhi	1386c <flatcc_builder_default_alloc@@Base+0x5b0>
   1368c:	ldrh	ip, [r0, #128]	; 0x80
   13690:	cmp	ip, #3
   13694:	movls	ip, #4
   13698:	strhls	ip, [r0, #128]	; 0x80
   1369c:	str	r2, [sp, #84]	; 0x54
   136a0:	ldr	lr, [r0, #136]	; 0x88
   136a4:	and	ip, lr, #3
   136a8:	mov	r4, #4
   136ac:	str	r4, [sp, #12]
   136b0:	add	r5, sp, #84	; 0x54
   136b4:	str	r5, [sp, #20]
   136b8:	str	r4, [sp, #24]
   136bc:	mov	r4, #1
   136c0:	str	r4, [sp, #16]
   136c4:	lsls	r4, r2, #2
   136c8:	beq	136e4 <flatcc_builder_default_alloc@@Base+0x428>
   136cc:	add	r5, r4, #4
   136d0:	str	r5, [sp, #12]
   136d4:	str	r1, [sp, #28]
   136d8:	str	r4, [sp, #32]
   136dc:	mov	r4, #2
   136e0:	str	r4, [sp, #16]
   136e4:	cmp	ip, #0
   136e8:	beq	1371c <flatcc_builder_default_alloc@@Base+0x460>
   136ec:	ldr	r4, [sp, #12]
   136f0:	add	r4, r4, ip
   136f4:	str	r4, [sp, #12]
   136f8:	ldr	r4, [sp, #16]
   136fc:	add	r4, r4, #1
   13700:	add	r5, sp, #88	; 0x58
   13704:	add	r6, r5, r4, lsl #3
   13708:	movw	r5, #33252	; 0x81e4
   1370c:	movt	r5, #1
   13710:	str	r5, [r6, #-76]	; 0xffffffb4
   13714:	str	ip, [r6, #-72]	; 0xffffffb8
   13718:	str	r4, [sp, #16]
   1371c:	mov	r5, r0
   13720:	ldr	r6, [sp, #12]
   13724:	cmp	r2, #0
   13728:	beq	137e4 <flatcc_builder_default_alloc@@Base+0x528>
   1372c:	mov	ip, r3
   13730:	add	r4, r2, r3
   13734:	mov	r2, r1
   13738:	add	r1, r1, r6
   1373c:	sub	r0, r1, lr
   13740:	b	13764 <flatcc_builder_default_alloc@@Base+0x4a8>
   13744:	cmp	r3, #0
   13748:	beq	137c8 <flatcc_builder_default_alloc@@Base+0x50c>
   1374c:	ldrb	r1, [ip]
   13750:	cmp	r1, #0
   13754:	bne	137ac <flatcc_builder_default_alloc@@Base+0x4f0>
   13758:	add	ip, ip, #1
   1375c:	cmp	ip, r4
   13760:	beq	137e4 <flatcc_builder_default_alloc@@Base+0x528>
   13764:	ldr	r1, [r2], #4
   13768:	cmp	r1, #0
   1376c:	beq	13744 <flatcc_builder_default_alloc@@Base+0x488>
   13770:	sub	lr, r0, r2
   13774:	add	r1, lr, r1
   13778:	str	r1, [r2, #-4]
   1377c:	cmp	r3, #0
   13780:	beq	13758 <flatcc_builder_default_alloc@@Base+0x49c>
   13784:	ldrb	r1, [ip]
   13788:	cmp	r1, #0
   1378c:	bne	13758 <flatcc_builder_default_alloc@@Base+0x49c>
   13790:	ldr	r3, [pc, #220]	; 13874 <flatcc_builder_default_alloc@@Base+0x5b8>
   13794:	movw	r2, #1457	; 0x5b1
   13798:	movw	r1, #35124	; 0x8934
   1379c:	movt	r1, #1
   137a0:	movw	r0, #35196	; 0x897c
   137a4:	movt	r0, #1
   137a8:	bl	11fd4 <__assert_fail@plt>
   137ac:	ldr	r3, [pc, #192]	; 13874 <flatcc_builder_default_alloc@@Base+0x5b8>
   137b0:	movw	r2, #1461	; 0x5b5
   137b4:	movw	r1, #35124	; 0x8934
   137b8:	movt	r1, #1
   137bc:	movw	r0, #35212	; 0x898c
   137c0:	movt	r0, #1
   137c4:	bl	11fd4 <__assert_fail@plt>
   137c8:	ldr	r3, [pc, #164]	; 13874 <flatcc_builder_default_alloc@@Base+0x5b8>
   137cc:	movw	r2, #1463	; 0x5b7
   137d0:	movw	r1, #35124	; 0x8934
   137d4:	movt	r1, #1
   137d8:	movw	r0, #35208	; 0x8988
   137dc:	movt	r0, #1
   137e0:	bl	11fd4 <__assert_fail@plt>
   137e4:	ldr	r3, [r5, #136]	; 0x88
   137e8:	sub	r4, r3, r6
   137ec:	cmp	r3, r4
   137f0:	ble	13834 <flatcc_builder_default_alloc@@Base+0x578>
   137f4:	str	r6, [sp]
   137f8:	ldr	r6, [r5, #44]	; 0x2c
   137fc:	mov	r3, r4
   13800:	ldr	r2, [sp, #16]
   13804:	add	r1, sp, #20
   13808:	ldr	r0, [r5, #36]	; 0x24
   1380c:	blx	r6
   13810:	cmp	r0, #0
   13814:	streq	r4, [r5, #136]	; 0x88
   13818:	bne	13850 <flatcc_builder_default_alloc@@Base+0x594>
   1381c:	mov	r0, r4
   13820:	add	sp, sp, #88	; 0x58
   13824:	ldrd	r4, [sp]
   13828:	ldr	r6, [sp, #8]
   1382c:	add	sp, sp, #12
   13830:	pop	{pc}		; (ldr pc, [sp], #4)
   13834:	ldr	r3, [pc, #60]	; 13878 <flatcc_builder_default_alloc@@Base+0x5bc>
   13838:	movw	r2, #647	; 0x287
   1383c:	movw	r1, #35124	; 0x8934
   13840:	movt	r1, #1
   13844:	movw	r0, #35208	; 0x8988
   13848:	movt	r0, #1
   1384c:	bl	11fd4 <__assert_fail@plt>
   13850:	ldr	r3, [pc, #32]	; 13878 <flatcc_builder_default_alloc@@Base+0x5bc>
   13854:	movw	r2, #651	; 0x28b
   13858:	movw	r1, #35124	; 0x8934
   1385c:	movt	r1, #1
   13860:	movw	r0, #35208	; 0x8988
   13864:	movt	r0, #1
   13868:	bl	11fd4 <__assert_fail@plt>
   1386c:	mov	r4, #0
   13870:	b	1381c <flatcc_builder_default_alloc@@Base+0x560>
   13874:	andeq	r8, r1, r0, lsl r4
   13878:	andeq	r8, r1, r0, lsr r4

0001387c <flatcc_builder_flush_vtable_cache@@Base>:
   1387c:	ldr	r3, [r0, #116]	; 0x74
   13880:	cmp	r3, #0
   13884:	bxeq	lr
   13888:	str	r4, [sp, #-8]!
   1388c:	str	lr, [sp, #4]
   13890:	mov	r4, r0
   13894:	ldr	r2, [r0, #96]	; 0x60
   13898:	mov	r1, #0
   1389c:	ldr	r0, [r0, #92]	; 0x5c
   138a0:	bl	11fb0 <memset@plt>
   138a4:	mov	r3, #16
   138a8:	str	r3, [r4, #124]	; 0x7c
   138ac:	mov	r3, #0
   138b0:	str	r3, [r4, #120]	; 0x78
   138b4:	ldr	r4, [sp]
   138b8:	add	sp, sp, #4
   138bc:	pop	{pc}		; (ldr pc, [sp], #4)

000138c0 <flatcc_builder_custom_init@@Base>:
   138c0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   138c4:	strd	r6, [sp, #8]
   138c8:	str	r8, [sp, #16]
   138cc:	str	lr, [sp, #20]
   138d0:	mov	r4, r0
   138d4:	mov	r6, r1
   138d8:	mov	r7, r2
   138dc:	mov	r5, r3
   138e0:	mov	r2, #232	; 0xe8
   138e4:	mov	r1, #0
   138e8:	bl	11fb0 <memset@plt>
   138ec:	cmp	r6, #0
   138f0:	beq	13930 <flatcc_builder_custom_init@@Base+0x70>
   138f4:	movw	r3, #12988	; 0x32bc
   138f8:	movt	r3, #1
   138fc:	cmp	r5, #0
   13900:	moveq	r5, r3
   13904:	ldr	r3, [sp, #24]
   13908:	str	r3, [r4, #40]	; 0x28
   1390c:	str	r5, [r4, #48]	; 0x30
   13910:	str	r7, [r4, #36]	; 0x24
   13914:	str	r6, [r4, #44]	; 0x2c
   13918:	mov	r0, #0
   1391c:	ldrd	r4, [sp]
   13920:	ldrd	r6, [sp, #8]
   13924:	ldr	r8, [sp, #16]
   13928:	add	sp, sp, #20
   1392c:	pop	{pc}		; (ldr pc, [sp], #4)
   13930:	mov	r3, #1
   13934:	str	r3, [r4, #184]	; 0xb8
   13938:	add	r7, r4, #188	; 0xbc
   1393c:	movw	r6, #31116	; 0x798c
   13940:	movt	r6, #1
   13944:	b	138f4 <flatcc_builder_custom_init@@Base+0x34>

00013948 <flatcc_builder_init@@Base>:
   13948:	str	r4, [sp, #-8]!
   1394c:	str	lr, [sp, #4]
   13950:	mov	r4, r0
   13954:	mov	r2, #232	; 0xe8
   13958:	mov	r1, #0
   1395c:	bl	11fb0 <memset@plt>
   13960:	mov	r3, #1
   13964:	str	r3, [r4, #184]	; 0xb8
   13968:	movw	r3, #12988	; 0x32bc
   1396c:	movt	r3, #1
   13970:	str	r3, [r4, #48]	; 0x30
   13974:	add	r3, r4, #188	; 0xbc
   13978:	str	r3, [r4, #36]	; 0x24
   1397c:	movw	r3, #31116	; 0x798c
   13980:	movt	r3, #1
   13984:	str	r3, [r4, #44]	; 0x2c
   13988:	mov	r0, #0
   1398c:	ldr	r4, [sp]
   13990:	add	sp, sp, #4
   13994:	pop	{pc}		; (ldr pc, [sp], #4)

00013998 <flatcc_builder_custom_reset@@Base>:
   13998:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1399c:	strd	r6, [sp, #8]
   139a0:	strd	r8, [sp, #16]
   139a4:	strd	sl, [sp, #24]
   139a8:	str	lr, [sp, #32]
   139ac:	sub	sp, sp, #12
   139b0:	mov	r6, r0
   139b4:	mov	fp, r1
   139b8:	mov	r9, r2
   139bc:	mov	r4, r0
   139c0:	mov	r5, #0
   139c4:	mov	sl, r5
   139c8:	mov	r8, #1
   139cc:	b	139f0 <flatcc_builder_custom_reset@@Base+0x58>
   139d0:	ldr	r2, [r7, #56]	; 0x38
   139d4:	mov	r1, sl
   139d8:	ldr	r0, [r7, #52]	; 0x34
   139dc:	bl	11fb0 <memset@plt>
   139e0:	add	r5, r5, #1
   139e4:	add	r4, r4, #8
   139e8:	cmp	r5, #8
   139ec:	beq	13a60 <flatcc_builder_custom_reset@@Base+0xc8>
   139f0:	add	r1, r4, #52	; 0x34
   139f4:	mov	r7, r4
   139f8:	ldr	r3, [r4, #52]	; 0x34
   139fc:	cmp	r3, #0
   13a00:	beq	13a38 <flatcc_builder_custom_reset@@Base+0xa0>
   13a04:	cmp	r5, #5
   13a08:	cmpne	r9, #0
   13a0c:	beq	139d0 <flatcc_builder_custom_reset@@Base+0x38>
   13a10:	str	r5, [sp]
   13a14:	mov	r3, r8
   13a18:	mov	r2, r8
   13a1c:	ldr	r0, [r6, #40]	; 0x28
   13a20:	ldr	ip, [r6, #48]	; 0x30
   13a24:	blx	ip
   13a28:	cmp	r0, #0
   13a2c:	beq	139d0 <flatcc_builder_custom_reset@@Base+0x38>
   13a30:	mvn	r0, #0
   13a34:	b	13adc <flatcc_builder_custom_reset@@Base+0x144>
   13a38:	ldr	r3, [r4, #56]	; 0x38
   13a3c:	cmp	r3, #0
   13a40:	beq	139e0 <flatcc_builder_custom_reset@@Base+0x48>
   13a44:	ldr	r3, [pc, #188]	; 13b08 <flatcc_builder_custom_reset@@Base+0x170>
   13a48:	movw	r2, #434	; 0x1b2
   13a4c:	movw	r1, #35124	; 0x8934
   13a50:	movt	r1, #1
   13a54:	movw	r0, #35228	; 0x899c
   13a58:	movt	r0, #1
   13a5c:	bl	11fd4 <__assert_fail@plt>
   13a60:	mov	r3, #0
   13a64:	str	r3, [r6, #120]	; 0x78
   13a68:	ldr	r3, [r6, #124]	; 0x7c
   13a6c:	cmp	r3, #0
   13a70:	movne	r3, #16
   13a74:	strne	r3, [r6, #124]	; 0x7c
   13a78:	mov	r3, #0
   13a7c:	strh	r3, [r6, #128]	; 0x80
   13a80:	str	r3, [r6, #136]	; 0x88
   13a84:	str	r3, [r6, #140]	; 0x8c
   13a88:	str	r3, [r6, #156]	; 0x9c
   13a8c:	str	r3, [r6, #160]	; 0xa0
   13a90:	str	r3, [r6, #20]
   13a94:	str	r3, [r6, #24]
   13a98:	str	r3, [r6, #148]	; 0x94
   13a9c:	str	r3, [r6, #152]	; 0x98
   13aa0:	ldr	r2, [r6, #60]	; 0x3c
   13aa4:	str	r2, [r6, #16]
   13aa8:	ldr	r2, [r6, #76]	; 0x4c
   13aac:	str	r2, [r6]
   13ab0:	ldr	r2, [r6, #52]	; 0x34
   13ab4:	str	r2, [r6, #4]
   13ab8:	str	r3, [r6, #32]
   13abc:	cmp	fp, r3
   13ac0:	beq	13ad0 <flatcc_builder_custom_reset@@Base+0x138>
   13ac4:	str	r3, [r6, #172]	; 0xac
   13ac8:	str	r3, [r6, #176]	; 0xb0
   13acc:	str	r3, [r6, #180]	; 0xb4
   13ad0:	ldr	r0, [r6, #184]	; 0xb8
   13ad4:	cmp	r0, #0
   13ad8:	bne	13af8 <flatcc_builder_custom_reset@@Base+0x160>
   13adc:	add	sp, sp, #12
   13ae0:	ldrd	r4, [sp]
   13ae4:	ldrd	r6, [sp, #8]
   13ae8:	ldrd	r8, [sp, #16]
   13aec:	ldrd	sl, [sp, #24]
   13af0:	add	sp, sp, #32
   13af4:	pop	{pc}		; (ldr pc, [sp], #4)
   13af8:	add	r0, r6, #188	; 0xbc
   13afc:	bl	17834 <flatcc_emitter_reset@@Base>
   13b00:	mov	r0, #0
   13b04:	b	13adc <flatcc_builder_custom_reset@@Base+0x144>
   13b08:	andeq	r8, r1, ip, lsr r4

00013b0c <flatcc_builder_reset@@Base>:
   13b0c:	str	r4, [sp, #-8]!
   13b10:	str	lr, [sp, #4]
   13b14:	mov	r2, #0
   13b18:	mov	r1, r2
   13b1c:	bl	13998 <flatcc_builder_custom_reset@@Base>
   13b20:	ldr	r4, [sp]
   13b24:	add	sp, sp, #4
   13b28:	pop	{pc}		; (ldr pc, [sp], #4)

00013b2c <flatcc_builder_clear@@Base>:
   13b2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13b30:	strd	r6, [sp, #8]
   13b34:	str	r8, [sp, #16]
   13b38:	str	lr, [sp, #20]
   13b3c:	sub	sp, sp, #8
   13b40:	mov	r6, r0
   13b44:	add	r5, r0, #52	; 0x34
   13b48:	mov	r4, #0
   13b4c:	mov	r8, r4
   13b50:	str	r4, [sp]
   13b54:	ldr	r7, [r6, #48]	; 0x30
   13b58:	mov	r3, r8
   13b5c:	mov	r2, r8
   13b60:	mov	r1, r5
   13b64:	ldr	r0, [r6, #40]	; 0x28
   13b68:	blx	r7
   13b6c:	add	r4, r4, #1
   13b70:	add	r5, r5, #8
   13b74:	cmp	r4, #8
   13b78:	bne	13b50 <flatcc_builder_clear@@Base+0x24>
   13b7c:	ldr	r3, [r6, #184]	; 0xb8
   13b80:	cmp	r3, #0
   13b84:	bne	13bb0 <flatcc_builder_clear@@Base+0x84>
   13b88:	mov	r2, #232	; 0xe8
   13b8c:	mov	r1, #0
   13b90:	mov	r0, r6
   13b94:	bl	11fb0 <memset@plt>
   13b98:	add	sp, sp, #8
   13b9c:	ldrd	r4, [sp]
   13ba0:	ldrd	r6, [sp, #8]
   13ba4:	ldr	r8, [sp, #16]
   13ba8:	add	sp, sp, #20
   13bac:	pop	{pc}		; (ldr pc, [sp], #4)
   13bb0:	add	r0, r6, #188	; 0xbc
   13bb4:	bl	17910 <flatcc_emitter_clear@@Base>
   13bb8:	b	13b88 <flatcc_builder_clear@@Base+0x5c>

00013bbc <flatcc_builder_enter_user_frame_ptr@@Base>:
   13bbc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13bc0:	strd	r6, [sp, #8]
   13bc4:	str	r8, [sp, #16]
   13bc8:	str	lr, [sp, #20]
   13bcc:	sub	sp, sp, #8
   13bd0:	mov	r4, r0
   13bd4:	add	r5, r1, #3
   13bd8:	bic	r5, r5, #3
   13bdc:	add	r5, r5, #4
   13be0:	ldr	r6, [r0, #228]	; 0xe4
   13be4:	add	r2, r6, r5
   13be8:	ldr	r3, [r0, #112]	; 0x70
   13bec:	cmp	r2, r3
   13bf0:	bls	13c18 <flatcc_builder_enter_user_frame_ptr@@Base+0x5c>
   13bf4:	mov	r3, #7
   13bf8:	str	r3, [sp]
   13bfc:	ldr	r7, [r0, #48]	; 0x30
   13c00:	mov	r3, #0
   13c04:	add	r1, r0, #108	; 0x6c
   13c08:	ldr	r0, [r0, #40]	; 0x28
   13c0c:	blx	r7
   13c10:	cmp	r0, #0
   13c14:	bne	13c70 <flatcc_builder_enter_user_frame_ptr@@Base+0xb4>
   13c18:	ldr	r8, [r4, #108]	; 0x6c
   13c1c:	adds	r7, r8, r6
   13c20:	moveq	r0, #0
   13c24:	beq	13c58 <flatcc_builder_enter_user_frame_ptr@@Base+0x9c>
   13c28:	mov	r2, r5
   13c2c:	mov	r1, #0
   13c30:	mov	r0, r7
   13c34:	bl	11fb0 <memset@plt>
   13c38:	add	r0, r7, #4
   13c3c:	ldr	r3, [r4, #224]	; 0xe0
   13c40:	str	r3, [r8, r6]
   13c44:	ldr	r1, [r4, #228]	; 0xe4
   13c48:	add	r3, r1, #4
   13c4c:	str	r3, [r4, #224]	; 0xe0
   13c50:	add	r5, r1, r5
   13c54:	str	r5, [r4, #228]	; 0xe4
   13c58:	add	sp, sp, #8
   13c5c:	ldrd	r4, [sp]
   13c60:	ldrd	r6, [sp, #8]
   13c64:	ldr	r8, [sp, #16]
   13c68:	add	sp, sp, #20
   13c6c:	pop	{pc}		; (ldr pc, [sp], #4)
   13c70:	ldr	r3, [pc, #20]	; 13c8c <flatcc_builder_enter_user_frame_ptr@@Base+0xd0>
   13c74:	mov	r2, #308	; 0x134
   13c78:	movw	r1, #35124	; 0x8934
   13c7c:	movt	r1, #1
   13c80:	movw	r0, #35208	; 0x8988
   13c84:	movt	r0, #1
   13c88:	bl	11fd4 <__assert_fail@plt>
   13c8c:	andeq	r8, r1, r0, lsl #8

00013c90 <flatcc_builder_enter_user_frame@@Base>:
   13c90:	strd	r4, [sp, #-20]!	; 0xffffffec
   13c94:	strd	r6, [sp, #8]
   13c98:	str	lr, [sp, #16]
   13c9c:	sub	sp, sp, #12
   13ca0:	mov	r4, r0
   13ca4:	add	r5, r1, #3
   13ca8:	bic	r5, r5, #3
   13cac:	add	r5, r5, #4
   13cb0:	ldr	r6, [r0, #228]	; 0xe4
   13cb4:	add	r2, r6, r5
   13cb8:	ldr	r3, [r0, #112]	; 0x70
   13cbc:	cmp	r2, r3
   13cc0:	bls	13ce8 <flatcc_builder_enter_user_frame@@Base+0x58>
   13cc4:	mov	r3, #7
   13cc8:	str	r3, [sp]
   13ccc:	ldr	r7, [r0, #48]	; 0x30
   13cd0:	mov	r3, #0
   13cd4:	add	r1, r0, #108	; 0x6c
   13cd8:	ldr	r0, [r0, #40]	; 0x28
   13cdc:	blx	r7
   13ce0:	cmp	r0, #0
   13ce4:	bne	13d30 <flatcc_builder_enter_user_frame@@Base+0xa0>
   13ce8:	ldr	r7, [r4, #108]	; 0x6c
   13cec:	adds	r0, r7, r6
   13cf0:	beq	13d1c <flatcc_builder_enter_user_frame@@Base+0x8c>
   13cf4:	mov	r2, r5
   13cf8:	mov	r1, #0
   13cfc:	bl	11fb0 <memset@plt>
   13d00:	ldr	r3, [r4, #224]	; 0xe0
   13d04:	str	r3, [r7, r6]
   13d08:	ldr	r1, [r4, #228]	; 0xe4
   13d0c:	add	r0, r1, #4
   13d10:	str	r0, [r4, #224]	; 0xe0
   13d14:	add	r5, r1, r5
   13d18:	str	r5, [r4, #228]	; 0xe4
   13d1c:	add	sp, sp, #12
   13d20:	ldrd	r4, [sp]
   13d24:	ldrd	r6, [sp, #8]
   13d28:	add	sp, sp, #16
   13d2c:	pop	{pc}		; (ldr pc, [sp], #4)
   13d30:	ldr	r3, [pc, #20]	; 13d4c <flatcc_builder_enter_user_frame@@Base+0xbc>
   13d34:	mov	r2, #308	; 0x134
   13d38:	movw	r1, #35124	; 0x8934
   13d3c:	movt	r1, #1
   13d40:	movw	r0, #35208	; 0x8988
   13d44:	movt	r0, #1
   13d48:	bl	11fd4 <__assert_fail@plt>
   13d4c:	andeq	r8, r1, r0, lsl #8

00013d50 <flatcc_builder_exit_user_frame@@Base>:
   13d50:	ldr	r3, [r0, #224]	; 0xe0
   13d54:	cmp	r3, #0
   13d58:	beq	13d7c <flatcc_builder_exit_user_frame@@Base+0x2c>
   13d5c:	ldr	r2, [r0, #108]	; 0x6c
   13d60:	add	r2, r2, r3
   13d64:	sub	r3, r3, #4
   13d68:	str	r3, [r0, #228]	; 0xe4
   13d6c:	ldr	r3, [r2, #-4]
   13d70:	str	r3, [r0, #224]	; 0xe0
   13d74:	mov	r0, r3
   13d78:	bx	lr
   13d7c:	str	r4, [sp, #-8]!
   13d80:	str	lr, [sp, #4]
   13d84:	ldr	r3, [pc, #20]	; 13da0 <flatcc_builder_exit_user_frame@@Base+0x50>
   13d88:	movw	r2, #542	; 0x21e
   13d8c:	movw	r1, #35124	; 0x8934
   13d90:	movt	r1, #1
   13d94:	movw	r0, #35248	; 0x89b0
   13d98:	movt	r0, #1
   13d9c:	bl	11fd4 <__assert_fail@plt>
   13da0:	andeq	r8, r1, r8, asr r4

00013da4 <flatcc_builder_exit_user_frame_at@@Base>:
   13da4:	str	r4, [sp, #-8]!
   13da8:	str	lr, [sp, #4]
   13dac:	ldr	r3, [r0, #224]	; 0xe0
   13db0:	cmp	r3, r1
   13db4:	bcc	13dcc <flatcc_builder_exit_user_frame_at@@Base+0x28>
   13db8:	str	r1, [r0, #224]	; 0xe0
   13dbc:	bl	13d50 <flatcc_builder_exit_user_frame@@Base>
   13dc0:	ldr	r4, [sp]
   13dc4:	add	sp, sp, #4
   13dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   13dcc:	ldr	r3, [pc, #20]	; 13de8 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   13dd0:	movw	r2, #551	; 0x227
   13dd4:	movw	r1, #35124	; 0x8934
   13dd8:	movt	r1, #1
   13ddc:	movw	r0, #35276	; 0x89cc
   13de0:	movt	r0, #1
   13de4:	bl	11fd4 <__assert_fail@plt>
   13de8:	andeq	r8, r1, r8, ror r4

00013dec <flatcc_builder_get_current_user_frame@@Base>:
   13dec:	ldr	r0, [r0, #224]	; 0xe0
   13df0:	bx	lr

00013df4 <flatcc_builder_get_user_frame_ptr@@Base>:
   13df4:	ldr	r0, [r0, #108]	; 0x6c
   13df8:	add	r0, r0, r1
   13dfc:	bx	lr

00013e00 <flatcc_builder_embed_buffer@@Base>:
   13e00:	strd	r4, [sp, #-16]!
   13e04:	str	r6, [sp, #8]
   13e08:	str	lr, [sp, #12]
   13e0c:	sub	sp, sp, #88	; 0x58
   13e10:	mov	r4, r0
   13e14:	mov	r6, r2
   13e18:	mov	r5, r3
   13e1c:	ldr	r3, [r0, #152]	; 0x98
   13e20:	adds	r3, r3, #0
   13e24:	movne	r3, #1
   13e28:	mov	r2, r1
   13e2c:	add	r1, sp, #104	; 0x68
   13e30:	bl	133e4 <flatcc_builder_default_alloc@@Base+0x128>
   13e34:	cmp	r0, #0
   13e38:	bne	13f94 <flatcc_builder_embed_buffer@@Base+0x194>
   13e3c:	ldr	r3, [sp, #108]	; 0x6c
   13e40:	and	r3, r3, #2
   13e44:	cmp	r3, #0
   13e48:	movne	r2, #4
   13e4c:	moveq	r2, #0
   13e50:	ldr	r1, [r4, #136]	; 0x88
   13e54:	sub	r3, r1, r5
   13e58:	sub	r2, r3, r2
   13e5c:	ldrh	r3, [sp, #104]	; 0x68
   13e60:	sub	r3, r3, #1
   13e64:	and	r3, r3, r2
   13e68:	add	r2, r5, r3
   13e6c:	str	r2, [sp, #84]	; 0x54
   13e70:	mov	r2, #0
   13e74:	str	r2, [sp, #12]
   13e78:	str	r2, [sp, #16]
   13e7c:	ldr	r2, [r4, #152]	; 0x98
   13e80:	cmp	r2, #0
   13e84:	beq	13ea4 <flatcc_builder_embed_buffer@@Base+0xa4>
   13e88:	mov	r2, #4
   13e8c:	str	r2, [sp, #12]
   13e90:	add	r0, sp, #84	; 0x54
   13e94:	str	r0, [sp, #20]
   13e98:	str	r2, [sp, #24]
   13e9c:	mov	r2, #1
   13ea0:	str	r2, [sp, #16]
   13ea4:	cmp	r5, #0
   13ea8:	beq	13ed4 <flatcc_builder_embed_buffer@@Base+0xd4>
   13eac:	ldr	r2, [sp, #12]
   13eb0:	add	r2, r2, r5
   13eb4:	str	r2, [sp, #12]
   13eb8:	ldr	r2, [sp, #16]
   13ebc:	add	r2, r2, #1
   13ec0:	add	r0, sp, #88	; 0x58
   13ec4:	add	r0, r0, r2, lsl #3
   13ec8:	str	r6, [r0, #-76]	; 0xffffffb4
   13ecc:	str	r5, [r0, #-72]	; 0xffffffb8
   13ed0:	str	r2, [sp, #16]
   13ed4:	cmp	r3, #0
   13ed8:	beq	13f0c <flatcc_builder_embed_buffer@@Base+0x10c>
   13edc:	ldr	r2, [sp, #12]
   13ee0:	add	r2, r2, r3
   13ee4:	str	r2, [sp, #12]
   13ee8:	ldr	r2, [sp, #16]
   13eec:	add	r2, r2, #1
   13ef0:	add	r0, sp, #88	; 0x58
   13ef4:	add	ip, r0, r2, lsl #3
   13ef8:	movw	r0, #33252	; 0x81e4
   13efc:	movt	r0, #1
   13f00:	str	r0, [ip, #-76]	; 0xffffffb4
   13f04:	str	r3, [ip, #-72]	; 0xffffffb8
   13f08:	str	r2, [sp, #16]
   13f0c:	ldr	r3, [sp, #12]
   13f10:	sub	r5, r1, r3
   13f14:	cmp	r1, r5
   13f18:	ble	13f5c <flatcc_builder_embed_buffer@@Base+0x15c>
   13f1c:	str	r3, [sp]
   13f20:	ldr	r6, [r4, #44]	; 0x2c
   13f24:	mov	r3, r5
   13f28:	ldr	r2, [sp, #16]
   13f2c:	add	r1, sp, #20
   13f30:	ldr	r0, [r4, #36]	; 0x24
   13f34:	blx	r6
   13f38:	cmp	r0, #0
   13f3c:	streq	r5, [r4, #136]	; 0x88
   13f40:	bne	13f78 <flatcc_builder_embed_buffer@@Base+0x178>
   13f44:	mov	r0, r5
   13f48:	add	sp, sp, #88	; 0x58
   13f4c:	ldrd	r4, [sp]
   13f50:	ldr	r6, [sp, #8]
   13f54:	add	sp, sp, #12
   13f58:	pop	{pc}		; (ldr pc, [sp], #4)
   13f5c:	ldr	r3, [pc, #56]	; 13f9c <flatcc_builder_embed_buffer@@Base+0x19c>
   13f60:	movw	r2, #647	; 0x287
   13f64:	movw	r1, #35124	; 0x8934
   13f68:	movt	r1, #1
   13f6c:	movw	r0, #35208	; 0x8988
   13f70:	movt	r0, #1
   13f74:	bl	11fd4 <__assert_fail@plt>
   13f78:	ldr	r3, [pc, #28]	; 13f9c <flatcc_builder_embed_buffer@@Base+0x19c>
   13f7c:	movw	r2, #651	; 0x28b
   13f80:	movw	r1, #35124	; 0x8934
   13f84:	movt	r1, #1
   13f88:	movw	r0, #35208	; 0x8988
   13f8c:	movt	r0, #1
   13f90:	bl	11fd4 <__assert_fail@plt>
   13f94:	mov	r5, #0
   13f98:	b	13f44 <flatcc_builder_embed_buffer@@Base+0x144>
   13f9c:	andeq	r8, r1, r0, lsr r4

00013fa0 <flatcc_builder_create_buffer@@Base>:
   13fa0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13fa4:	strd	r6, [sp, #8]
   13fa8:	strd	r8, [sp, #16]
   13fac:	str	lr, [sp, #24]
   13fb0:	sub	sp, sp, #100	; 0x64
   13fb4:	mov	r5, r0
   13fb8:	mov	r8, r1
   13fbc:	mov	r4, r3
   13fc0:	ldr	r7, [sp, #132]	; 0x84
   13fc4:	mov	r3, #0
   13fc8:	str	r3, [sp, #12]
   13fcc:	and	r6, r7, #1
   13fd0:	mov	r3, r6
   13fd4:	add	r1, sp, #128	; 0x80
   13fd8:	bl	133e4 <flatcc_builder_default_alloc@@Base+0x128>
   13fdc:	cmp	r0, #0
   13fe0:	bne	141dc <flatcc_builder_create_buffer@@Base+0x23c>
   13fe4:	ldrh	r2, [sp, #128]	; 0x80
   13fe8:	ldrh	r3, [r5, #128]	; 0x80
   13fec:	cmp	r3, r2
   13ff0:	strhcc	r2, [r5, #128]	; 0x80
   13ff4:	cmp	r8, #0
   13ff8:	ldrne	r3, [r8]
   13ffc:	strne	r3, [sp, #12]
   14000:	ldr	r1, [sp, #12]
   14004:	cmp	r1, #0
   14008:	movne	r1, #4
   1400c:	and	r3, r7, #2
   14010:	cmp	r3, #0
   14014:	movne	ip, #4
   14018:	moveq	ip, #0
   1401c:	ldr	r0, [r5, #136]	; 0x88
   14020:	sub	r3, r0, #4
   14024:	sub	r3, r3, r1
   14028:	sub	r3, r3, ip
   1402c:	sub	r2, r2, #1
   14030:	and	r3, r3, r2
   14034:	mov	r2, #0
   14038:	str	r2, [sp, #16]
   1403c:	str	r2, [sp, #20]
   14040:	ands	r7, r7, #3
   14044:	beq	14064 <flatcc_builder_create_buffer@@Base+0xc4>
   14048:	mov	r2, #4
   1404c:	str	r2, [sp, #16]
   14050:	add	ip, sp, #88	; 0x58
   14054:	str	ip, [sp, #24]
   14058:	str	r2, [sp, #28]
   1405c:	mov	r2, #1
   14060:	str	r2, [sp, #20]
   14064:	ldr	ip, [sp, #16]
   14068:	add	ip, ip, #4
   1406c:	str	ip, [sp, #16]
   14070:	ldr	lr, [sp, #20]
   14074:	add	r2, lr, #1
   14078:	add	r8, sp, #96	; 0x60
   1407c:	add	r8, r8, r2, lsl #3
   14080:	add	r9, sp, #92	; 0x5c
   14084:	str	r9, [r8, #-80]	; 0xffffffb0
   14088:	mov	r9, #4
   1408c:	str	r9, [r8, #-76]	; 0xffffffb4
   14090:	str	r2, [sp, #20]
   14094:	cmp	r1, #0
   14098:	beq	140c4 <flatcc_builder_create_buffer@@Base+0x124>
   1409c:	add	ip, ip, r1
   140a0:	str	ip, [sp, #16]
   140a4:	add	r2, lr, #2
   140a8:	add	ip, sp, #96	; 0x60
   140ac:	add	r2, ip, r2, lsl #3
   140b0:	add	ip, sp, #12
   140b4:	str	ip, [r2, #-80]	; 0xffffffb0
   140b8:	str	r1, [r2, #-76]	; 0xffffffb4
   140bc:	add	lr, lr, #2
   140c0:	str	lr, [sp, #20]
   140c4:	cmp	r3, #0
   140c8:	beq	140fc <flatcc_builder_create_buffer@@Base+0x15c>
   140cc:	ldr	r2, [sp, #16]
   140d0:	add	r2, r2, r3
   140d4:	str	r2, [sp, #16]
   140d8:	ldr	r2, [sp, #20]
   140dc:	add	r2, r2, #1
   140e0:	add	r1, sp, #96	; 0x60
   140e4:	add	ip, r1, r2, lsl #3
   140e8:	movw	r1, #33252	; 0x81e4
   140ec:	movt	r1, #1
   140f0:	str	r1, [ip, #-80]	; 0xffffffb0
   140f4:	str	r3, [ip, #-76]	; 0xffffffb4
   140f8:	str	r2, [sp, #20]
   140fc:	ldr	r1, [sp, #16]
   14100:	sub	r3, r0, r1
   14104:	cmp	r7, #0
   14108:	movne	r2, #4
   1410c:	moveq	r2, #0
   14110:	add	r3, r3, r2
   14114:	cmp	r6, #0
   14118:	ldrne	r2, [r5, #144]	; 0x90
   1411c:	ldreq	r2, [r5, #140]	; 0x8c
   14120:	sub	r2, r2, r3
   14124:	str	r2, [sp, #88]	; 0x58
   14128:	sub	r4, r4, r3
   1412c:	str	r4, [sp, #92]	; 0x5c
   14130:	sub	r4, r0, r1
   14134:	cmp	r0, r4
   14138:	ble	14188 <flatcc_builder_create_buffer@@Base+0x1e8>
   1413c:	str	r1, [sp]
   14140:	ldr	r6, [r5, #44]	; 0x2c
   14144:	mov	r3, r4
   14148:	ldr	r2, [sp, #20]
   1414c:	add	r1, sp, #24
   14150:	ldr	r0, [r5, #36]	; 0x24
   14154:	blx	r6
   14158:	cmp	r0, #0
   1415c:	bne	141a4 <flatcc_builder_create_buffer@@Base+0x204>
   14160:	str	r4, [r5, #136]	; 0x88
   14164:	cmp	r4, #0
   14168:	beq	141c0 <flatcc_builder_create_buffer@@Base+0x220>
   1416c:	mov	r0, r4
   14170:	add	sp, sp, #100	; 0x64
   14174:	ldrd	r4, [sp]
   14178:	ldrd	r6, [sp, #8]
   1417c:	ldrd	r8, [sp, #16]
   14180:	add	sp, sp, #24
   14184:	pop	{pc}		; (ldr pc, [sp], #4)
   14188:	ldr	r3, [pc, #84]	; 141e4 <flatcc_builder_create_buffer@@Base+0x244>
   1418c:	movw	r2, #647	; 0x287
   14190:	movw	r1, #35124	; 0x8934
   14194:	movt	r1, #1
   14198:	movw	r0, #35208	; 0x8988
   1419c:	movt	r0, #1
   141a0:	bl	11fd4 <__assert_fail@plt>
   141a4:	ldr	r3, [pc, #56]	; 141e4 <flatcc_builder_create_buffer@@Base+0x244>
   141a8:	movw	r2, #651	; 0x28b
   141ac:	movw	r1, #35124	; 0x8934
   141b0:	movt	r1, #1
   141b4:	movw	r0, #35208	; 0x8988
   141b8:	movt	r0, #1
   141bc:	bl	11fd4 <__assert_fail@plt>
   141c0:	ldr	r3, [pc, #32]	; 141e8 <flatcc_builder_create_buffer@@Base+0x248>
   141c4:	mov	r2, #772	; 0x304
   141c8:	movw	r1, #35124	; 0x8934
   141cc:	movt	r1, #1
   141d0:	movw	r0, #35208	; 0x8988
   141d4:	movt	r0, #1
   141d8:	bl	11fd4 <__assert_fail@plt>
   141dc:	mov	r4, #0
   141e0:	b	1416c <flatcc_builder_create_buffer@@Base+0x1cc>
   141e4:	andeq	r8, r1, r0, lsr r4
   141e8:	muleq	r1, ip, r4

000141ec <flatcc_builder_create_struct@@Base>:
   141ec:	strd	r4, [sp, #-16]!
   141f0:	str	r6, [sp, #8]
   141f4:	str	lr, [sp, #12]
   141f8:	sub	sp, sp, #80	; 0x50
   141fc:	cmp	r3, #0
   14200:	beq	14258 <flatcc_builder_create_struct@@Base+0x6c>
   14204:	mov	r4, r0
   14208:	ldrh	r0, [r0, #128]	; 0x80
   1420c:	cmp	r0, r3
   14210:	strhcc	r3, [r4, #128]	; 0x80
   14214:	ldr	ip, [r4, #136]	; 0x88
   14218:	sub	r0, ip, r2
   1421c:	sub	r3, r3, #1
   14220:	and	r3, r3, r0
   14224:	mov	r0, #0
   14228:	str	r0, [sp, #8]
   1422c:	str	r0, [sp, #12]
   14230:	cmp	r2, r0
   14234:	beq	142ac <flatcc_builder_create_struct@@Base+0xc0>
   14238:	str	r2, [sp, #8]
   1423c:	str	r1, [sp, #16]
   14240:	str	r2, [sp, #20]
   14244:	mov	r2, #1
   14248:	str	r2, [sp, #12]
   1424c:	cmp	r3, r0
   14250:	beq	142e4 <flatcc_builder_create_struct@@Base+0xf8>
   14254:	b	142b4 <flatcc_builder_create_struct@@Base+0xc8>
   14258:	ldr	r3, [pc, #212]	; 14334 <flatcc_builder_create_struct@@Base+0x148>
   1425c:	movw	r2, #783	; 0x30f
   14260:	movw	r1, #35124	; 0x8934
   14264:	movt	r1, #1
   14268:	movw	r0, #35308	; 0x89ec
   1426c:	movt	r0, #1
   14270:	bl	11fd4 <__assert_fail@plt>
   14274:	ldr	r3, [pc, #188]	; 14338 <flatcc_builder_create_struct@@Base+0x14c>
   14278:	movw	r2, #647	; 0x287
   1427c:	movw	r1, #35124	; 0x8934
   14280:	movt	r1, #1
   14284:	movw	r0, #35208	; 0x8988
   14288:	movt	r0, #1
   1428c:	bl	11fd4 <__assert_fail@plt>
   14290:	ldr	r3, [pc, #160]	; 14338 <flatcc_builder_create_struct@@Base+0x14c>
   14294:	movw	r2, #651	; 0x28b
   14298:	movw	r1, #35124	; 0x8934
   1429c:	movt	r1, #1
   142a0:	movw	r0, #35208	; 0x8988
   142a4:	movt	r0, #1
   142a8:	bl	11fd4 <__assert_fail@plt>
   142ac:	cmp	r3, #0
   142b0:	beq	14274 <flatcc_builder_create_struct@@Base+0x88>
   142b4:	ldr	r2, [sp, #8]
   142b8:	add	r2, r2, r3
   142bc:	str	r2, [sp, #8]
   142c0:	ldr	r2, [sp, #12]
   142c4:	add	r2, r2, #1
   142c8:	add	r1, sp, #80	; 0x50
   142cc:	add	r0, r1, r2, lsl #3
   142d0:	movw	r1, #33252	; 0x81e4
   142d4:	movt	r1, #1
   142d8:	str	r1, [r0, #-72]	; 0xffffffb8
   142dc:	str	r3, [r0, #-68]	; 0xffffffbc
   142e0:	str	r2, [sp, #12]
   142e4:	ldr	r3, [sp, #8]
   142e8:	sub	r5, ip, r3
   142ec:	cmp	ip, r5
   142f0:	ble	14274 <flatcc_builder_create_struct@@Base+0x88>
   142f4:	str	r3, [sp]
   142f8:	ldr	r6, [r4, #44]	; 0x2c
   142fc:	mov	r3, r5
   14300:	ldr	r2, [sp, #12]
   14304:	add	r1, sp, #16
   14308:	ldr	r0, [r4, #36]	; 0x24
   1430c:	blx	r6
   14310:	cmp	r0, #0
   14314:	bne	14290 <flatcc_builder_create_struct@@Base+0xa4>
   14318:	str	r5, [r4, #136]	; 0x88
   1431c:	mov	r0, r5
   14320:	add	sp, sp, #80	; 0x50
   14324:	ldrd	r4, [sp]
   14328:	ldr	r6, [sp, #8]
   1432c:	add	sp, sp, #12
   14330:	pop	{pc}		; (ldr pc, [sp], #4)
   14334:			; <UNDEFINED> instruction: 0x000184bc
   14338:	andeq	r8, r1, r0, lsr r4

0001433c <flatcc_builder_start_buffer@@Base>:
   1433c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14340:	strd	r6, [sp, #8]
   14344:	str	r8, [sp, #16]
   14348:	str	lr, [sp, #20]
   1434c:	mov	r4, r0
   14350:	mov	r5, r1
   14354:	mov	r7, r2
   14358:	mov	r6, r3
   1435c:	ldrh	r1, [r0, #128]	; 0x80
   14360:	bl	13508 <flatcc_builder_default_alloc@@Base+0x24c>
   14364:	cmp	r0, #0
   14368:	bne	14408 <flatcc_builder_start_buffer@@Base+0xcc>
   1436c:	mov	r3, #1
   14370:	strh	r3, [r4, #128]	; 0x80
   14374:	ldr	r3, [r4, #32]
   14378:	ldrh	r2, [r4, #132]	; 0x84
   1437c:	strh	r2, [r3, #34]	; 0x22
   14380:	strh	r7, [r4, #132]	; 0x84
   14384:	ldr	r3, [r4, #32]
   14388:	ldrh	r2, [r4, #164]	; 0xa4
   1438c:	strh	r2, [r3, #32]
   14390:	strh	r6, [r4, #164]	; 0xa4
   14394:	ldr	r3, [r4, #32]
   14398:	ldr	r2, [r4, #144]	; 0x90
   1439c:	str	r2, [r3, #20]
   143a0:	ldr	r3, [r4, #32]
   143a4:	ldr	r2, [r4, #152]	; 0x98
   143a8:	str	r2, [r3, #28]
   143ac:	ldr	r3, [r4, #136]	; 0x88
   143b0:	str	r3, [r4, #144]	; 0x90
   143b4:	ldr	r3, [r4, #148]	; 0x94
   143b8:	add	r2, r3, #1
   143bc:	str	r2, [r4, #148]	; 0x94
   143c0:	str	r3, [r4, #152]	; 0x98
   143c4:	ldr	r3, [r4, #32]
   143c8:	ldr	r2, [r4, #168]	; 0xa8
   143cc:	str	r2, [r3, #16]
   143d0:	movw	r3, #33252	; 0x81e4
   143d4:	movt	r3, #1
   143d8:	cmp	r5, #0
   143dc:	moveq	r5, r3
   143e0:	ldr	r3, [r5]
   143e4:	str	r3, [r4, #168]	; 0xa8
   143e8:	ldr	r3, [r4, #32]
   143ec:	mov	r2, #1
   143f0:	strh	r2, [r3, #14]
   143f4:	ldrd	r4, [sp]
   143f8:	ldrd	r6, [sp, #8]
   143fc:	ldr	r8, [sp, #16]
   14400:	add	sp, sp, #20
   14404:	pop	{pc}		; (ldr pc, [sp], #4)
   14408:	mvn	r0, #0
   1440c:	b	143f4 <flatcc_builder_start_buffer@@Base+0xb8>

00014410 <flatcc_builder_end_buffer@@Base>:
   14410:	strd	r4, [sp, #-12]!
   14414:	str	lr, [sp, #8]
   14418:	sub	sp, sp, #12
   1441c:	mov	r4, r0
   14420:	ldrh	r2, [r0, #164]	; 0xa4
   14424:	and	r2, r2, #2
   14428:	ldr	r0, [r0, #152]	; 0x98
   1442c:	cmp	r0, #0
   14430:	moveq	r0, r2
   14434:	orrne	r0, r2, #1
   14438:	ldr	r2, [r4, #32]
   1443c:	ldrh	r2, [r2, #14]
   14440:	cmp	r2, #1
   14444:	bne	14490 <flatcc_builder_end_buffer@@Base+0x80>
   14448:	ldrh	r2, [r4, #132]	; 0x84
   1444c:	ldrh	r3, [r4, #128]	; 0x80
   14450:	cmp	r3, r2
   14454:	strhcc	r2, [r4, #128]	; 0x80
   14458:	str	r0, [sp, #4]
   1445c:	ldrh	r3, [r4, #128]	; 0x80
   14460:	str	r3, [sp]
   14464:	mov	r3, r1
   14468:	add	r1, r4, #168	; 0xa8
   1446c:	mov	r0, r4
   14470:	bl	13fa0 <flatcc_builder_create_buffer@@Base>
   14474:	subs	r5, r0, #0
   14478:	bne	144ac <flatcc_builder_end_buffer@@Base+0x9c>
   1447c:	mov	r0, r5
   14480:	add	sp, sp, #12
   14484:	ldrd	r4, [sp]
   14488:	add	sp, sp, #8
   1448c:	pop	{pc}		; (ldr pc, [sp], #4)
   14490:	ldr	r3, [pc, #184]	; 14550 <flatcc_builder_end_buffer@@Base+0x140>
   14494:	movw	r2, #838	; 0x346
   14498:	movw	r1, #35124	; 0x8934
   1449c:	movt	r1, #1
   144a0:	movw	r0, #35320	; 0x89f8
   144a4:	movt	r0, #1
   144a8:	bl	11fd4 <__assert_fail@plt>
   144ac:	ldr	r3, [r4, #32]
   144b0:	ldr	r2, [r3, #20]
   144b4:	str	r2, [r4, #144]	; 0x90
   144b8:	ldr	r2, [r3, #28]
   144bc:	str	r2, [r4, #152]	; 0x98
   144c0:	ldr	r2, [r3, #16]
   144c4:	str	r2, [r4, #168]	; 0xa8
   144c8:	ldrh	r3, [r3, #32]
   144cc:	strh	r3, [r4, #164]	; 0xa4
   144d0:	ldr	r2, [r4, #20]
   144d4:	mov	r1, #0
   144d8:	ldr	r0, [r4, #16]
   144dc:	bl	11fb0 <memset@plt>
   144e0:	ldr	r2, [r4, #32]
   144e4:	ldr	r3, [r2, #8]
   144e8:	str	r3, [r4, #20]
   144ec:	ldr	r0, [r2]
   144f0:	str	r0, [r4, #28]
   144f4:	ldr	r1, [r2, #4]
   144f8:	ldr	r3, [r4, #60]	; 0x3c
   144fc:	add	r3, r3, r0
   14500:	str	r3, [r4, #16]
   14504:	ldr	r3, [r4, #64]	; 0x40
   14508:	sub	r3, r3, r0
   1450c:	cmp	r3, r1
   14510:	movcs	r3, r1
   14514:	str	r3, [r4, #24]
   14518:	str	r1, [r2, #4]
   1451c:	ldrh	r3, [r4, #130]	; 0x82
   14520:	ldrh	r2, [r4, #128]	; 0x80
   14524:	cmp	r2, r3
   14528:	strhcc	r3, [r4, #128]	; 0x80
   1452c:	ldr	r3, [r4, #32]
   14530:	ldrh	r2, [r3, #12]
   14534:	strh	r2, [r4, #130]	; 0x82
   14538:	sub	r3, r3, #36	; 0x24
   1453c:	str	r3, [r4, #32]
   14540:	ldr	r3, [r4, #156]	; 0x9c
   14544:	sub	r3, r3, #1
   14548:	str	r3, [r4, #156]	; 0x9c
   1454c:	b	1447c <flatcc_builder_end_buffer@@Base+0x6c>
   14550:	ldrdeq	r8, [r1], -ip

00014554 <flatcc_builder_start_struct@@Base>:
   14554:	strd	r4, [sp, #-16]!
   14558:	str	r6, [sp, #8]
   1455c:	str	lr, [sp, #12]
   14560:	mov	r4, r0
   14564:	mov	r5, r1
   14568:	mov	r1, r2
   1456c:	bl	13508 <flatcc_builder_default_alloc@@Base+0x24c>
   14570:	cmp	r0, #0
   14574:	movne	r0, #0
   14578:	bne	145d8 <flatcc_builder_start_struct@@Base+0x84>
   1457c:	ldr	r3, [r4, #32]
   14580:	mov	r2, #2
   14584:	strh	r2, [r3, #14]
   14588:	ldr	r1, [r4, #28]
   1458c:	ldr	r2, [r4, #60]	; 0x3c
   14590:	add	r2, r2, r1
   14594:	str	r2, [r4, #16]
   14598:	ldr	r3, [r4, #64]	; 0x40
   1459c:	sub	r3, r3, r1
   145a0:	cmn	r3, #4
   145a4:	mvnhi	r3, #3
   145a8:	str	r3, [r4, #24]
   145ac:	ldr	r3, [r4, #32]
   145b0:	mvn	r2, #3
   145b4:	str	r2, [r3, #4]
   145b8:	ldr	r6, [r4, #20]
   145bc:	add	r5, r5, r6
   145c0:	str	r5, [r4, #20]
   145c4:	ldr	r3, [r4, #24]
   145c8:	cmp	r5, r3
   145cc:	bcs	145e8 <flatcc_builder_start_struct@@Base+0x94>
   145d0:	ldr	r0, [r4, #16]
   145d4:	add	r0, r0, r6
   145d8:	ldrd	r4, [sp]
   145dc:	ldr	r6, [sp, #8]
   145e0:	add	sp, sp, #12
   145e4:	pop	{pc}		; (ldr pc, [sp], #4)
   145e8:	add	r1, r5, #1
   145ec:	mov	r0, r4
   145f0:	bl	13234 <main@@Base+0x124>
   145f4:	cmp	r0, #0
   145f8:	movne	r0, #0
   145fc:	beq	145d0 <flatcc_builder_start_struct@@Base+0x7c>
   14600:	b	145d8 <flatcc_builder_start_struct@@Base+0x84>

00014604 <flatcc_builder_struct_edit@@Base>:
   14604:	ldr	r0, [r0, #16]
   14608:	bx	lr

0001460c <flatcc_builder_end_struct@@Base>:
   1460c:	strd	r4, [sp, #-16]!
   14610:	str	r6, [sp, #8]
   14614:	str	lr, [sp, #12]
   14618:	ldr	r3, [r0, #32]
   1461c:	ldrh	r3, [r3, #14]
   14620:	cmp	r3, #2
   14624:	bne	14658 <flatcc_builder_end_struct@@Base+0x4c>
   14628:	mov	r4, r0
   1462c:	ldrh	r3, [r0, #130]	; 0x82
   14630:	ldr	r2, [r0, #20]
   14634:	ldr	r1, [r0, #16]
   14638:	bl	141ec <flatcc_builder_create_struct@@Base>
   1463c:	subs	r5, r0, #0
   14640:	bne	14674 <flatcc_builder_end_struct@@Base+0x68>
   14644:	mov	r0, r5
   14648:	ldrd	r4, [sp]
   1464c:	ldr	r6, [sp, #8]
   14650:	add	sp, sp, #12
   14654:	pop	{pc}		; (ldr pc, [sp], #4)
   14658:	ldr	r3, [pc, #148]	; 146f4 <flatcc_builder_end_struct@@Base+0xe8>
   1465c:	mov	r2, #872	; 0x368
   14660:	movw	r1, #35124	; 0x8934
   14664:	movt	r1, #1
   14668:	movw	r0, #35364	; 0x8a24
   1466c:	movt	r0, #1
   14670:	bl	11fd4 <__assert_fail@plt>
   14674:	ldr	r2, [r4, #20]
   14678:	mov	r1, #0
   1467c:	ldr	r0, [r4, #16]
   14680:	bl	11fb0 <memset@plt>
   14684:	ldr	r2, [r4, #32]
   14688:	ldr	r3, [r2, #8]
   1468c:	str	r3, [r4, #20]
   14690:	ldr	r0, [r2]
   14694:	str	r0, [r4, #28]
   14698:	ldr	r1, [r2, #4]
   1469c:	ldr	r3, [r4, #60]	; 0x3c
   146a0:	add	r3, r3, r0
   146a4:	str	r3, [r4, #16]
   146a8:	ldr	r3, [r4, #64]	; 0x40
   146ac:	sub	r3, r3, r0
   146b0:	cmp	r3, r1
   146b4:	movcs	r3, r1
   146b8:	str	r3, [r4, #24]
   146bc:	str	r1, [r2, #4]
   146c0:	ldrh	r3, [r4, #130]	; 0x82
   146c4:	ldrh	r2, [r4, #128]	; 0x80
   146c8:	cmp	r2, r3
   146cc:	strhcc	r3, [r4, #128]	; 0x80
   146d0:	ldr	r3, [r4, #32]
   146d4:	ldrh	r2, [r3, #12]
   146d8:	strh	r2, [r4, #130]	; 0x82
   146dc:	sub	r3, r3, #36	; 0x24
   146e0:	str	r3, [r4, #32]
   146e4:	ldr	r3, [r4, #156]	; 0x9c
   146e8:	sub	r3, r3, #1
   146ec:	str	r3, [r4, #156]	; 0x9c
   146f0:	b	14644 <flatcc_builder_end_struct@@Base+0x38>
   146f4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>

000146f8 <flatcc_builder_extend_vector@@Base>:
   146f8:	strd	r4, [sp, #-16]!
   146fc:	str	r6, [sp, #8]
   14700:	str	lr, [sp, #12]
   14704:	mov	r4, r0
   14708:	ldr	r2, [r0, #32]
   1470c:	ldr	r3, [r2, #20]
   14710:	add	r0, r1, r3
   14714:	ldr	ip, [r2, #24]
   14718:	cmp	r3, r0
   1471c:	movls	r3, #0
   14720:	movhi	r3, #1
   14724:	cmp	ip, r0
   14728:	orrcc	r3, r3, #1
   1472c:	cmp	r3, #0
   14730:	bne	14770 <flatcc_builder_extend_vector@@Base+0x78>
   14734:	str	r0, [r2, #20]
   14738:	ldr	r5, [r4, #20]
   1473c:	ldr	r3, [r4, #32]
   14740:	ldr	r3, [r3, #16]
   14744:	mla	r1, r3, r1, r5
   14748:	str	r1, [r4, #20]
   1474c:	ldr	r3, [r4, #24]
   14750:	cmp	r1, r3
   14754:	bcs	1478c <flatcc_builder_extend_vector@@Base+0x94>
   14758:	ldr	r0, [r4, #16]
   1475c:	add	r0, r0, r5
   14760:	ldrd	r4, [sp]
   14764:	ldr	r6, [sp, #8]
   14768:	add	sp, sp, #12
   1476c:	pop	{pc}		; (ldr pc, [sp], #4)
   14770:	ldr	r3, [pc, #52]	; 147ac <flatcc_builder_extend_vector@@Base+0xb4>
   14774:	mov	r2, #892	; 0x37c
   14778:	movw	r1, #35124	; 0x8934
   1477c:	movt	r1, #1
   14780:	movw	r0, #35408	; 0x8a50
   14784:	movt	r0, #1
   14788:	bl	11fd4 <__assert_fail@plt>
   1478c:	mvn	r2, #3
   14790:	add	r1, r1, #1
   14794:	mov	r0, r4
   14798:	bl	13234 <main@@Base+0x124>
   1479c:	cmp	r0, #0
   147a0:	movne	r0, #0
   147a4:	beq	14758 <flatcc_builder_extend_vector@@Base+0x60>
   147a8:	b	14760 <flatcc_builder_extend_vector@@Base+0x68>
   147ac:	andeq	r8, r1, r4, lsl r5

000147b0 <flatcc_builder_vector_push@@Base>:
   147b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   147b4:	strd	r6, [sp, #8]
   147b8:	str	r8, [sp, #16]
   147bc:	str	lr, [sp, #20]
   147c0:	ldr	r3, [r0, #32]
   147c4:	ldrh	r2, [r3, #14]
   147c8:	cmp	r2, #4
   147cc:	bne	14844 <flatcc_builder_vector_push@@Base+0x94>
   147d0:	mov	r4, r0
   147d4:	mov	r6, r1
   147d8:	ldr	r2, [r3, #20]
   147dc:	ldr	r1, [r3, #24]
   147e0:	cmp	r2, r1
   147e4:	bhi	14860 <flatcc_builder_vector_push@@Base+0xb0>
   147e8:	add	r2, r2, #1
   147ec:	str	r2, [r3, #20]
   147f0:	ldr	r3, [r0, #32]
   147f4:	ldr	r7, [r3, #16]
   147f8:	ldr	r5, [r0, #20]
   147fc:	add	r1, r7, r5
   14800:	str	r1, [r0, #20]
   14804:	ldr	r3, [r0, #24]
   14808:	cmp	r1, r3
   1480c:	bcs	1487c <flatcc_builder_vector_push@@Base+0xcc>
   14810:	ldr	r4, [r4, #16]
   14814:	adds	r4, r4, r5
   14818:	beq	1482c <flatcc_builder_vector_push@@Base+0x7c>
   1481c:	mov	r2, r7
   14820:	mov	r1, r6
   14824:	mov	r0, r4
   14828:	bl	11f44 <memcpy@plt>
   1482c:	mov	r0, r4
   14830:	ldrd	r4, [sp]
   14834:	ldrd	r6, [sp, #8]
   14838:	ldr	r8, [sp, #16]
   1483c:	add	sp, sp, #20
   14840:	pop	{pc}		; (ldr pc, [sp], #4)
   14844:	ldr	r3, [pc, #76]	; 14898 <flatcc_builder_vector_push@@Base+0xe8>
   14848:	movw	r2, #907	; 0x38b
   1484c:	movw	r1, #35124	; 0x8934
   14850:	movt	r1, #1
   14854:	movw	r0, #35436	; 0x8a6c
   14858:	movt	r0, #1
   1485c:	bl	11fd4 <__assert_fail@plt>
   14860:	ldr	r3, [pc, #48]	; 14898 <flatcc_builder_vector_push@@Base+0xe8>
   14864:	mov	r2, #908	; 0x38c
   14868:	movw	r1, #35124	; 0x8934
   1486c:	movt	r1, #1
   14870:	movw	r0, #35480	; 0x8a98
   14874:	movt	r0, #1
   14878:	bl	11fd4 <__assert_fail@plt>
   1487c:	mvn	r2, #3
   14880:	add	r1, r1, #1
   14884:	bl	13234 <main@@Base+0x124>
   14888:	cmp	r0, #0
   1488c:	movne	r4, #0
   14890:	beq	14810 <flatcc_builder_vector_push@@Base+0x60>
   14894:	b	1482c <flatcc_builder_vector_push@@Base+0x7c>
   14898:	andeq	r8, r1, r8, lsr #10

0001489c <flatcc_builder_append_vector@@Base>:
   1489c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   148a0:	strd	r6, [sp, #8]
   148a4:	str	r8, [sp, #16]
   148a8:	str	lr, [sp, #20]
   148ac:	mov	r6, r1
   148b0:	ldr	r1, [r0, #32]
   148b4:	ldrh	r3, [r1, #14]
   148b8:	cmp	r3, #4
   148bc:	bne	14948 <flatcc_builder_append_vector@@Base+0xac>
   148c0:	mov	r4, r0
   148c4:	ldr	r3, [r1, #20]
   148c8:	add	r0, r2, r3
   148cc:	ldr	ip, [r1, #24]
   148d0:	cmp	r3, r0
   148d4:	movls	r3, #0
   148d8:	movhi	r3, #1
   148dc:	cmp	ip, r0
   148e0:	orrcc	r3, r3, #1
   148e4:	cmp	r3, #0
   148e8:	bne	14964 <flatcc_builder_append_vector@@Base+0xc8>
   148ec:	str	r0, [r1, #20]
   148f0:	ldr	r3, [r4, #32]
   148f4:	ldr	r5, [r3, #16]
   148f8:	mul	r5, r5, r2
   148fc:	ldr	r7, [r4, #20]
   14900:	add	r1, r5, r7
   14904:	str	r1, [r4, #20]
   14908:	ldr	r3, [r4, #24]
   1490c:	cmp	r1, r3
   14910:	bcs	14980 <flatcc_builder_append_vector@@Base+0xe4>
   14914:	ldr	r4, [r4, #16]
   14918:	adds	r4, r4, r7
   1491c:	beq	14930 <flatcc_builder_append_vector@@Base+0x94>
   14920:	mov	r2, r5
   14924:	mov	r1, r6
   14928:	mov	r0, r4
   1492c:	bl	11f44 <memcpy@plt>
   14930:	mov	r0, r4
   14934:	ldrd	r4, [sp]
   14938:	ldrd	r6, [sp, #8]
   1493c:	ldr	r8, [sp, #16]
   14940:	add	sp, sp, #20
   14944:	pop	{pc}		; (ldr pc, [sp], #4)
   14948:	ldr	r3, [pc, #80]	; 149a0 <flatcc_builder_append_vector@@Base+0x104>
   1494c:	movw	r2, #915	; 0x393
   14950:	movw	r1, #35124	; 0x8934
   14954:	movt	r1, #1
   14958:	movw	r0, #35436	; 0x8a6c
   1495c:	movt	r0, #1
   14960:	bl	11fd4 <__assert_fail@plt>
   14964:	ldr	r3, [pc, #56]	; 149a4 <flatcc_builder_append_vector@@Base+0x108>
   14968:	mov	r2, #892	; 0x37c
   1496c:	movw	r1, #35124	; 0x8934
   14970:	movt	r1, #1
   14974:	movw	r0, #35408	; 0x8a50
   14978:	movt	r0, #1
   1497c:	bl	11fd4 <__assert_fail@plt>
   14980:	mvn	r2, #3
   14984:	add	r1, r1, #1
   14988:	mov	r0, r4
   1498c:	bl	13234 <main@@Base+0x124>
   14990:	cmp	r0, #0
   14994:	movne	r4, #0
   14998:	beq	14914 <flatcc_builder_append_vector@@Base+0x78>
   1499c:	b	14930 <flatcc_builder_append_vector@@Base+0x94>
   149a0:	andeq	r8, r1, r4, asr #10
   149a4:	andeq	r8, r1, r4, lsl r5

000149a8 <flatcc_builder_extend_offset_vector@@Base>:
   149a8:	strd	r4, [sp, #-16]!
   149ac:	str	r6, [sp, #8]
   149b0:	str	lr, [sp, #12]
   149b4:	mov	r4, r0
   149b8:	ldr	r2, [r0, #32]
   149bc:	ldr	r3, [r2, #20]
   149c0:	adds	r3, r1, r3
   149c4:	movcs	ip, #1
   149c8:	movcc	ip, #0
   149cc:	cmn	r3, #-1073741823	; 0xc0000001
   149d0:	movls	r0, #0
   149d4:	movhi	r0, #1
   149d8:	orrs	r0, ip, r0
   149dc:	bne	14a14 <flatcc_builder_extend_offset_vector@@Base+0x6c>
   149e0:	str	r3, [r2, #20]
   149e4:	ldr	r5, [r4, #20]
   149e8:	add	r1, r5, r1, lsl #2
   149ec:	str	r1, [r4, #20]
   149f0:	ldr	r3, [r4, #24]
   149f4:	cmp	r1, r3
   149f8:	bcs	14a30 <flatcc_builder_extend_offset_vector@@Base+0x88>
   149fc:	ldr	r0, [r4, #16]
   14a00:	add	r0, r0, r5
   14a04:	ldrd	r4, [sp]
   14a08:	ldr	r6, [sp, #8]
   14a0c:	add	sp, sp, #12
   14a10:	pop	{pc}		; (ldr pc, [sp], #4)
   14a14:	ldr	r3, [pc, #52]	; 14a50 <flatcc_builder_extend_offset_vector@@Base+0xa8>
   14a18:	mov	r2, #892	; 0x37c
   14a1c:	movw	r1, #35124	; 0x8934
   14a20:	movt	r1, #1
   14a24:	movw	r0, #35408	; 0x8a50
   14a28:	movt	r0, #1
   14a2c:	bl	11fd4 <__assert_fail@plt>
   14a30:	mvn	r2, #3
   14a34:	add	r1, r1, #1
   14a38:	mov	r0, r4
   14a3c:	bl	13234 <main@@Base+0x124>
   14a40:	cmp	r0, #0
   14a44:	movne	r0, #0
   14a48:	beq	149fc <flatcc_builder_extend_offset_vector@@Base+0x54>
   14a4c:	b	14a04 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   14a50:	andeq	r8, r1, r4, lsl r5

00014a54 <flatcc_builder_offset_vector_push@@Base>:
   14a54:	strd	r4, [sp, #-16]!
   14a58:	str	r6, [sp, #8]
   14a5c:	str	lr, [sp, #12]
   14a60:	ldr	r2, [r0, #32]
   14a64:	ldrh	r3, [r2, #14]
   14a68:	cmp	r3, #5
   14a6c:	bne	14ac4 <flatcc_builder_offset_vector_push@@Base+0x70>
   14a70:	mov	r4, r0
   14a74:	mov	r6, r1
   14a78:	ldr	r3, [r2, #20]
   14a7c:	cmn	r3, #-1073741823	; 0xc0000001
   14a80:	moveq	r0, #0
   14a84:	beq	14ab4 <flatcc_builder_offset_vector_push@@Base+0x60>
   14a88:	add	r3, r3, #1
   14a8c:	str	r3, [r2, #20]
   14a90:	ldr	r5, [r4, #20]
   14a94:	add	r3, r5, #4
   14a98:	str	r3, [r4, #20]
   14a9c:	ldr	r2, [r4, #24]
   14aa0:	cmp	r3, r2
   14aa4:	bcs	14ae0 <flatcc_builder_offset_vector_push@@Base+0x8c>
   14aa8:	ldr	r3, [r4, #16]
   14aac:	adds	r0, r3, r5
   14ab0:	strne	r6, [r3, r5]
   14ab4:	ldrd	r4, [sp]
   14ab8:	ldr	r6, [sp, #8]
   14abc:	add	sp, sp, #12
   14ac0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ac4:	ldr	r3, [pc, #52]	; 14b00 <flatcc_builder_offset_vector_push@@Base+0xac>
   14ac8:	movw	r2, #934	; 0x3a6
   14acc:	movw	r1, #35124	; 0x8934
   14ad0:	movt	r1, #1
   14ad4:	movw	r0, #35544	; 0x8ad8
   14ad8:	movt	r0, #1
   14adc:	bl	11fd4 <__assert_fail@plt>
   14ae0:	mvn	r2, #3
   14ae4:	add	r1, r5, #5
   14ae8:	mov	r0, r4
   14aec:	bl	13234 <main@@Base+0x124>
   14af0:	cmp	r0, #0
   14af4:	movne	r0, #0
   14af8:	beq	14aa8 <flatcc_builder_offset_vector_push@@Base+0x54>
   14afc:	b	14ab4 <flatcc_builder_offset_vector_push@@Base+0x60>
   14b00:	andeq	r8, r1, r4, ror #10

00014b04 <flatcc_builder_append_offset_vector@@Base>:
   14b04:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14b08:	strd	r6, [sp, #8]
   14b0c:	str	r8, [sp, #16]
   14b10:	str	lr, [sp, #20]
   14b14:	mov	r6, r1
   14b18:	ldr	r1, [r0, #32]
   14b1c:	ldrh	r3, [r1, #14]
   14b20:	cmp	r3, #5
   14b24:	bne	14ba4 <flatcc_builder_append_offset_vector@@Base+0xa0>
   14b28:	mov	r5, r0
   14b2c:	ldr	r3, [r1, #20]
   14b30:	adds	r3, r2, r3
   14b34:	movcs	ip, #1
   14b38:	movcc	ip, #0
   14b3c:	cmn	r3, #-1073741823	; 0xc0000001
   14b40:	movls	r0, #0
   14b44:	movhi	r0, #1
   14b48:	orrs	r0, ip, r0
   14b4c:	bne	14bc0 <flatcc_builder_append_offset_vector@@Base+0xbc>
   14b50:	str	r3, [r1, #20]
   14b54:	lsl	r4, r2, #2
   14b58:	ldr	r7, [r5, #20]
   14b5c:	add	r1, r4, r7
   14b60:	str	r1, [r5, #20]
   14b64:	ldr	r3, [r5, #24]
   14b68:	cmp	r1, r3
   14b6c:	bcs	14bdc <flatcc_builder_append_offset_vector@@Base+0xd8>
   14b70:	ldr	r5, [r5, #16]
   14b74:	adds	r5, r5, r7
   14b78:	beq	14b8c <flatcc_builder_append_offset_vector@@Base+0x88>
   14b7c:	mov	r2, r4
   14b80:	mov	r1, r6
   14b84:	mov	r0, r5
   14b88:	bl	11f44 <memcpy@plt>
   14b8c:	mov	r0, r5
   14b90:	ldrd	r4, [sp]
   14b94:	ldrd	r6, [sp, #8]
   14b98:	ldr	r8, [sp, #16]
   14b9c:	add	sp, sp, #20
   14ba0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ba4:	ldr	r3, [pc, #80]	; 14bfc <flatcc_builder_append_offset_vector@@Base+0xf8>
   14ba8:	mov	r2, #948	; 0x3b4
   14bac:	movw	r1, #35124	; 0x8934
   14bb0:	movt	r1, #1
   14bb4:	movw	r0, #35544	; 0x8ad8
   14bb8:	movt	r0, #1
   14bbc:	bl	11fd4 <__assert_fail@plt>
   14bc0:	ldr	r3, [pc, #56]	; 14c00 <flatcc_builder_append_offset_vector@@Base+0xfc>
   14bc4:	mov	r2, #892	; 0x37c
   14bc8:	movw	r1, #35124	; 0x8934
   14bcc:	movt	r1, #1
   14bd0:	movw	r0, #35408	; 0x8a50
   14bd4:	movt	r0, #1
   14bd8:	bl	11fd4 <__assert_fail@plt>
   14bdc:	mvn	r2, #3
   14be0:	add	r1, r1, #1
   14be4:	mov	r0, r5
   14be8:	bl	13234 <main@@Base+0x124>
   14bec:	cmp	r0, #0
   14bf0:	movne	r5, #0
   14bf4:	beq	14b70 <flatcc_builder_append_offset_vector@@Base+0x6c>
   14bf8:	b	14b8c <flatcc_builder_append_offset_vector@@Base+0x88>
   14bfc:	andeq	r8, r1, r8, lsl #11
   14c00:	andeq	r8, r1, r4, lsl r5

00014c04 <flatcc_builder_extend_string@@Base>:
   14c04:	strd	r4, [sp, #-16]!
   14c08:	str	r6, [sp, #8]
   14c0c:	str	lr, [sp, #12]
   14c10:	ldr	r2, [r0, #32]
   14c14:	ldrh	r3, [r2, #14]
   14c18:	cmp	r3, #6
   14c1c:	bne	14c64 <flatcc_builder_extend_string@@Base+0x60>
   14c20:	mov	r4, r0
   14c24:	ldr	r3, [r2, #20]
   14c28:	adds	r3, r1, r3
   14c2c:	bcs	14c80 <flatcc_builder_extend_string@@Base+0x7c>
   14c30:	str	r3, [r2, #20]
   14c34:	ldr	r5, [r0, #20]
   14c38:	add	r1, r1, r5
   14c3c:	str	r1, [r0, #20]
   14c40:	ldr	r3, [r0, #24]
   14c44:	cmp	r1, r3
   14c48:	bcs	14c9c <flatcc_builder_extend_string@@Base+0x98>
   14c4c:	ldr	r0, [r4, #16]
   14c50:	add	r0, r0, r5
   14c54:	ldrd	r4, [sp]
   14c58:	ldr	r6, [sp, #8]
   14c5c:	add	sp, sp, #12
   14c60:	pop	{pc}		; (ldr pc, [sp], #4)
   14c64:	ldr	r3, [pc, #76]	; 14cb8 <flatcc_builder_extend_string@@Base+0xb4>
   14c68:	movw	r2, #957	; 0x3bd
   14c6c:	movw	r1, #35124	; 0x8934
   14c70:	movt	r1, #1
   14c74:	movw	r0, #35596	; 0x8b0c
   14c78:	movt	r0, #1
   14c7c:	bl	11fd4 <__assert_fail@plt>
   14c80:	ldr	r3, [pc, #52]	; 14cbc <flatcc_builder_extend_string@@Base+0xb8>
   14c84:	mov	r2, #892	; 0x37c
   14c88:	movw	r1, #35124	; 0x8934
   14c8c:	movt	r1, #1
   14c90:	movw	r0, #35408	; 0x8a50
   14c94:	movt	r0, #1
   14c98:	bl	11fd4 <__assert_fail@plt>
   14c9c:	mvn	r2, #3
   14ca0:	add	r1, r1, #1
   14ca4:	bl	13234 <main@@Base+0x124>
   14ca8:	cmp	r0, #0
   14cac:	movne	r0, #0
   14cb0:	beq	14c4c <flatcc_builder_extend_string@@Base+0x48>
   14cb4:	b	14c54 <flatcc_builder_extend_string@@Base+0x50>
   14cb8:	andeq	r8, r1, ip, lsr #11
   14cbc:	andeq	r8, r1, r4, lsl r5

00014cc0 <flatcc_builder_append_string@@Base>:
   14cc0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14cc4:	strd	r6, [sp, #8]
   14cc8:	str	r8, [sp, #16]
   14ccc:	str	lr, [sp, #20]
   14cd0:	mov	r5, r2
   14cd4:	ldr	r2, [r0, #32]
   14cd8:	ldrh	r3, [r2, #14]
   14cdc:	cmp	r3, #6
   14ce0:	bne	14d48 <flatcc_builder_append_string@@Base+0x88>
   14ce4:	mov	r4, r0
   14ce8:	mov	r6, r1
   14cec:	ldr	r3, [r2, #20]
   14cf0:	adds	r3, r5, r3
   14cf4:	bcs	14d64 <flatcc_builder_append_string@@Base+0xa4>
   14cf8:	str	r3, [r2, #20]
   14cfc:	ldr	r7, [r0, #20]
   14d00:	add	r1, r5, r7
   14d04:	str	r1, [r0, #20]
   14d08:	ldr	r3, [r0, #24]
   14d0c:	cmp	r1, r3
   14d10:	bcs	14d80 <flatcc_builder_append_string@@Base+0xc0>
   14d14:	ldr	r4, [r4, #16]
   14d18:	adds	r4, r4, r7
   14d1c:	beq	14d30 <flatcc_builder_append_string@@Base+0x70>
   14d20:	mov	r2, r5
   14d24:	mov	r1, r6
   14d28:	mov	r0, r4
   14d2c:	bl	11f44 <memcpy@plt>
   14d30:	mov	r0, r4
   14d34:	ldrd	r4, [sp]
   14d38:	ldrd	r6, [sp, #8]
   14d3c:	ldr	r8, [sp, #16]
   14d40:	add	sp, sp, #20
   14d44:	pop	{pc}		; (ldr pc, [sp], #4)
   14d48:	ldr	r3, [pc, #76]	; 14d9c <flatcc_builder_append_string@@Base+0xdc>
   14d4c:	movw	r2, #966	; 0x3c6
   14d50:	movw	r1, #35124	; 0x8934
   14d54:	movt	r1, #1
   14d58:	movw	r0, #35596	; 0x8b0c
   14d5c:	movt	r0, #1
   14d60:	bl	11fd4 <__assert_fail@plt>
   14d64:	ldr	r3, [pc, #52]	; 14da0 <flatcc_builder_append_string@@Base+0xe0>
   14d68:	mov	r2, #892	; 0x37c
   14d6c:	movw	r1, #35124	; 0x8934
   14d70:	movt	r1, #1
   14d74:	movw	r0, #35408	; 0x8a50
   14d78:	movt	r0, #1
   14d7c:	bl	11fd4 <__assert_fail@plt>
   14d80:	mvn	r2, #3
   14d84:	add	r1, r1, #1
   14d88:	bl	13234 <main@@Base+0x124>
   14d8c:	cmp	r0, #0
   14d90:	movne	r4, #0
   14d94:	beq	14d14 <flatcc_builder_append_string@@Base+0x54>
   14d98:	b	14d30 <flatcc_builder_append_string@@Base+0x70>
   14d9c:	andeq	r8, r1, ip, asr #11
   14da0:	andeq	r8, r1, r4, lsl r5

00014da4 <flatcc_builder_append_string_str@@Base>:
   14da4:	strd	r4, [sp, #-16]!
   14da8:	str	r6, [sp, #8]
   14dac:	str	lr, [sp, #12]
   14db0:	mov	r5, r0
   14db4:	mov	r4, r1
   14db8:	mov	r0, r1
   14dbc:	bl	11f98 <strlen@plt>
   14dc0:	mov	r2, r0
   14dc4:	mov	r1, r4
   14dc8:	mov	r0, r5
   14dcc:	bl	14cc0 <flatcc_builder_append_string@@Base>
   14dd0:	ldrd	r4, [sp]
   14dd4:	ldr	r6, [sp, #8]
   14dd8:	add	sp, sp, #12
   14ddc:	pop	{pc}		; (ldr pc, [sp], #4)

00014de0 <flatcc_builder_append_string_strn@@Base>:
   14de0:	strd	r4, [sp, #-16]!
   14de4:	str	r6, [sp, #8]
   14de8:	str	lr, [sp, #12]
   14dec:	mov	r6, r0
   14df0:	mov	r4, r1
   14df4:	mov	r5, r2
   14df8:	mov	r1, #0
   14dfc:	mov	r0, r4
   14e00:	bl	11fbc <memchr@plt>
   14e04:	cmp	r0, #0
   14e08:	subne	r5, r0, r4
   14e0c:	mov	r2, r5
   14e10:	mov	r1, r4
   14e14:	mov	r0, r6
   14e18:	bl	14cc0 <flatcc_builder_append_string@@Base>
   14e1c:	ldrd	r4, [sp]
   14e20:	ldr	r6, [sp, #8]
   14e24:	add	sp, sp, #12
   14e28:	pop	{pc}		; (ldr pc, [sp], #4)

00014e2c <flatcc_builder_truncate_vector@@Base>:
   14e2c:	str	r4, [sp, #-8]!
   14e30:	str	lr, [sp, #4]
   14e34:	ldr	ip, [r0, #32]
   14e38:	ldrh	r3, [ip, #14]
   14e3c:	cmp	r3, #4
   14e40:	bne	14e90 <flatcc_builder_truncate_vector@@Base+0x64>
   14e44:	ldr	r3, [ip, #20]
   14e48:	cmp	r3, r1
   14e4c:	bcc	14eac <flatcc_builder_truncate_vector@@Base+0x80>
   14e50:	sub	r3, r3, r1
   14e54:	str	r3, [ip, #20]
   14e58:	ldr	r3, [r0, #32]
   14e5c:	ldr	r2, [r3, #16]
   14e60:	mul	r2, r2, r1
   14e64:	ldr	r3, [r0, #20]
   14e68:	sub	r3, r3, r2
   14e6c:	str	r3, [r0, #20]
   14e70:	ldr	r0, [r0, #16]
   14e74:	mov	r1, #0
   14e78:	add	r0, r0, r3
   14e7c:	bl	11fb0 <memset@plt>
   14e80:	mov	r0, #0
   14e84:	ldr	r4, [sp]
   14e88:	add	sp, sp, #4
   14e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e90:	ldr	r3, [pc, #48]	; 14ec8 <flatcc_builder_truncate_vector@@Base+0x9c>
   14e94:	movw	r2, #985	; 0x3d9
   14e98:	movw	r1, #35124	; 0x8934
   14e9c:	movt	r1, #1
   14ea0:	movw	r0, #35436	; 0x8a6c
   14ea4:	movt	r0, #1
   14ea8:	bl	11fd4 <__assert_fail@plt>
   14eac:	ldr	r3, [pc, #20]	; 14ec8 <flatcc_builder_truncate_vector@@Base+0x9c>
   14eb0:	movw	r2, #986	; 0x3da
   14eb4:	movw	r1, #35124	; 0x8934
   14eb8:	movt	r1, #1
   14ebc:	movw	r0, #35640	; 0x8b38
   14ec0:	movt	r0, #1
   14ec4:	bl	11fd4 <__assert_fail@plt>
   14ec8:	andeq	r8, r1, ip, ror #11

00014ecc <flatcc_builder_truncate_offset_vector@@Base>:
   14ecc:	str	r4, [sp, #-8]!
   14ed0:	str	lr, [sp, #4]
   14ed4:	ldr	ip, [r0, #32]
   14ed8:	ldrh	r3, [ip, #14]
   14edc:	cmp	r3, #5
   14ee0:	bne	14f30 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   14ee4:	ldr	r3, [ip, #20]
   14ee8:	cmp	r3, r1
   14eec:	bcc	14f4c <flatcc_builder_truncate_offset_vector@@Base+0x80>
   14ef0:	sub	r3, r3, r1
   14ef4:	str	r3, [ip, #20]
   14ef8:	ldr	r3, [r0, #32]
   14efc:	ldr	r2, [r3, #16]
   14f00:	mul	r2, r2, r1
   14f04:	ldr	r3, [r0, #20]
   14f08:	sub	r3, r3, r2
   14f0c:	str	r3, [r0, #20]
   14f10:	ldr	r0, [r0, #16]
   14f14:	mov	r1, #0
   14f18:	add	r0, r0, r3
   14f1c:	bl	11fb0 <memset@plt>
   14f20:	mov	r0, #0
   14f24:	ldr	r4, [sp]
   14f28:	add	sp, sp, #4
   14f2c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f30:	ldr	r3, [pc, #48]	; 14f68 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   14f34:	movw	r2, #994	; 0x3e2
   14f38:	movw	r1, #35124	; 0x8934
   14f3c:	movt	r1, #1
   14f40:	movw	r0, #35544	; 0x8ad8
   14f44:	movt	r0, #1
   14f48:	bl	11fd4 <__assert_fail@plt>
   14f4c:	ldr	r3, [pc, #20]	; 14f68 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   14f50:	movw	r2, #995	; 0x3e3
   14f54:	movw	r1, #35124	; 0x8934
   14f58:	movt	r1, #1
   14f5c:	movw	r0, #35676	; 0x8b5c
   14f60:	movt	r0, #1
   14f64:	bl	11fd4 <__assert_fail@plt>
   14f68:	andeq	r8, r1, ip, lsl #12

00014f6c <flatcc_builder_truncate_string@@Base>:
   14f6c:	str	r4, [sp, #-8]!
   14f70:	str	lr, [sp, #4]
   14f74:	ldr	r2, [r0, #32]
   14f78:	ldrh	r3, [r2, #14]
   14f7c:	cmp	r3, #6
   14f80:	bne	14fc8 <flatcc_builder_truncate_string@@Base+0x5c>
   14f84:	ldr	r3, [r2, #20]
   14f88:	cmp	r3, r1
   14f8c:	bcc	14fe4 <flatcc_builder_truncate_string@@Base+0x78>
   14f90:	sub	r3, r3, r1
   14f94:	str	r3, [r2, #20]
   14f98:	ldr	r3, [r0, #20]
   14f9c:	sub	r3, r3, r1
   14fa0:	str	r3, [r0, #20]
   14fa4:	ldr	r0, [r0, #16]
   14fa8:	mov	r2, r1
   14fac:	mov	r1, #0
   14fb0:	add	r0, r0, r3
   14fb4:	bl	11fb0 <memset@plt>
   14fb8:	mov	r0, #0
   14fbc:	ldr	r4, [sp]
   14fc0:	add	sp, sp, #4
   14fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   14fc8:	ldr	r3, [pc, #48]	; 15000 <flatcc_builder_truncate_string@@Base+0x94>
   14fcc:	movw	r2, #1003	; 0x3eb
   14fd0:	movw	r1, #35124	; 0x8934
   14fd4:	movt	r1, #1
   14fd8:	movw	r0, #35596	; 0x8b0c
   14fdc:	movt	r0, #1
   14fe0:	bl	11fd4 <__assert_fail@plt>
   14fe4:	ldr	r3, [pc, #20]	; 15000 <flatcc_builder_truncate_string@@Base+0x94>
   14fe8:	mov	r2, #1004	; 0x3ec
   14fec:	movw	r1, #35124	; 0x8934
   14ff0:	movt	r1, #1
   14ff4:	movw	r0, #35736	; 0x8b98
   14ff8:	movt	r0, #1
   14ffc:	bl	11fd4 <__assert_fail@plt>
   15000:	andeq	r8, r1, r4, lsr r6

00015004 <flatcc_builder_start_vector@@Base>:
   15004:	strd	r4, [sp, #-16]!
   15008:	str	r6, [sp, #8]
   1500c:	str	lr, [sp, #12]
   15010:	mov	r4, r0
   15014:	mov	r6, r1
   15018:	mov	r5, r3
   1501c:	cmp	r2, #4
   15020:	movcs	r1, r2
   15024:	movcc	r1, #4
   15028:	bl	13508 <flatcc_builder_default_alloc@@Base+0x24c>
   1502c:	cmp	r0, #0
   15030:	bne	1509c <flatcc_builder_start_vector@@Base+0x98>
   15034:	ldr	r3, [r4, #32]
   15038:	str	r6, [r3, #16]
   1503c:	ldr	r3, [r4, #32]
   15040:	mov	r2, #0
   15044:	str	r2, [r3, #20]
   15048:	ldr	r3, [r4, #32]
   1504c:	str	r5, [r3, #24]
   15050:	ldr	r3, [r4, #32]
   15054:	mov	r2, #4
   15058:	strh	r2, [r3, #14]
   1505c:	ldr	r1, [r4, #28]
   15060:	ldr	r2, [r4, #60]	; 0x3c
   15064:	add	r2, r2, r1
   15068:	str	r2, [r4, #16]
   1506c:	ldr	r3, [r4, #64]	; 0x40
   15070:	sub	r3, r3, r1
   15074:	cmn	r3, #4
   15078:	mvnhi	r3, #3
   1507c:	str	r3, [r4, #24]
   15080:	ldr	r3, [r4, #32]
   15084:	mvn	r2, #3
   15088:	str	r2, [r3, #4]
   1508c:	ldrd	r4, [sp]
   15090:	ldr	r6, [sp, #8]
   15094:	add	sp, sp, #12
   15098:	pop	{pc}		; (ldr pc, [sp], #4)
   1509c:	mvn	r0, #0
   150a0:	b	1508c <flatcc_builder_start_vector@@Base+0x88>

000150a4 <flatcc_builder_start_offset_vector@@Base>:
   150a4:	str	r4, [sp, #-8]!
   150a8:	str	lr, [sp, #4]
   150ac:	mov	r4, r0
   150b0:	mov	r1, #4
   150b4:	bl	13508 <flatcc_builder_default_alloc@@Base+0x24c>
   150b8:	cmp	r0, #0
   150bc:	bne	15120 <flatcc_builder_start_offset_vector@@Base+0x7c>
   150c0:	ldr	r3, [r4, #32]
   150c4:	mov	r2, #4
   150c8:	str	r2, [r3, #16]
   150cc:	ldr	r3, [r4, #32]
   150d0:	mov	r2, #0
   150d4:	str	r2, [r3, #20]
   150d8:	ldr	r3, [r4, #32]
   150dc:	mov	r2, #5
   150e0:	strh	r2, [r3, #14]
   150e4:	ldr	r1, [r4, #28]
   150e8:	ldr	r2, [r4, #60]	; 0x3c
   150ec:	add	r2, r2, r1
   150f0:	str	r2, [r4, #16]
   150f4:	ldr	r3, [r4, #64]	; 0x40
   150f8:	sub	r3, r3, r1
   150fc:	cmn	r3, #4
   15100:	mvnhi	r3, #3
   15104:	str	r3, [r4, #24]
   15108:	ldr	r3, [r4, #32]
   1510c:	mvn	r2, #3
   15110:	str	r2, [r3, #4]
   15114:	ldr	r4, [sp]
   15118:	add	sp, sp, #4
   1511c:	pop	{pc}		; (ldr pc, [sp], #4)
   15120:	mvn	r0, #0
   15124:	b	15114 <flatcc_builder_start_offset_vector@@Base+0x70>

00015128 <flatcc_builder_start_string@@Base>:
   15128:	str	r4, [sp, #-8]!
   1512c:	str	lr, [sp, #4]
   15130:	mov	r4, r0
   15134:	mov	r1, #1
   15138:	bl	13508 <flatcc_builder_default_alloc@@Base+0x24c>
   1513c:	cmp	r0, #0
   15140:	bne	151a4 <flatcc_builder_start_string@@Base+0x7c>
   15144:	ldr	r3, [r4, #32]
   15148:	mov	r2, #1
   1514c:	str	r2, [r3, #16]
   15150:	ldr	r3, [r4, #32]
   15154:	mov	r2, #0
   15158:	str	r2, [r3, #20]
   1515c:	ldr	r3, [r4, #32]
   15160:	mov	r2, #6
   15164:	strh	r2, [r3, #14]
   15168:	ldr	r1, [r4, #28]
   1516c:	ldr	r2, [r4, #60]	; 0x3c
   15170:	add	r2, r2, r1
   15174:	str	r2, [r4, #16]
   15178:	ldr	r3, [r4, #64]	; 0x40
   1517c:	sub	r3, r3, r1
   15180:	cmn	r3, #4
   15184:	mvnhi	r3, #3
   15188:	str	r3, [r4, #24]
   1518c:	ldr	r3, [r4, #32]
   15190:	mvn	r2, #3
   15194:	str	r2, [r3, #4]
   15198:	ldr	r4, [sp]
   1519c:	add	sp, sp, #4
   151a0:	pop	{pc}		; (ldr pc, [sp], #4)
   151a4:	mvn	r0, #0
   151a8:	b	15198 <flatcc_builder_start_string@@Base+0x70>

000151ac <flatcc_builder_reserve_table@@Base>:
   151ac:	strd	r4, [sp, #-20]!	; 0xffffffec
   151b0:	strd	r6, [sp, #8]
   151b4:	str	lr, [sp, #16]
   151b8:	sub	sp, sp, #12
   151bc:	cmp	r1, #0
   151c0:	blt	152a0 <flatcc_builder_reserve_table@@Base+0xf4>
   151c4:	mov	r4, r0
   151c8:	ldr	r2, [r0, #32]
   151cc:	ldrh	r6, [r2, #28]
   151d0:	ldr	r3, [r2, #16]
   151d4:	add	r6, r3, r6, lsl #1
   151d8:	add	r1, r1, #2
   151dc:	lsl	r5, r1, #1
   151e0:	add	r2, r6, r5
   151e4:	ldr	r3, [r0, #56]	; 0x38
   151e8:	cmp	r2, r3
   151ec:	bls	15214 <flatcc_builder_reserve_table@@Base+0x68>
   151f0:	mov	r3, #0
   151f4:	str	r3, [sp]
   151f8:	ldr	r7, [r0, #48]	; 0x30
   151fc:	mov	r3, #1
   15200:	add	r1, r0, #52	; 0x34
   15204:	ldr	r0, [r0, #40]	; 0x28
   15208:	blx	r7
   1520c:	cmp	r0, #0
   15210:	bne	152bc <flatcc_builder_reserve_table@@Base+0x110>
   15214:	ldr	r3, [r4, #52]	; 0x34
   15218:	adds	r3, r3, r6
   1521c:	moveq	r3, #0
   15220:	streq	r3, [r4, #4]
   15224:	mvneq	r0, #0
   15228:	beq	1528c <flatcc_builder_reserve_table@@Base+0xe0>
   1522c:	add	r3, r3, #4
   15230:	str	r3, [r4, #4]
   15234:	ldr	r3, [r4, #32]
   15238:	ldr	r6, [r3, #20]
   1523c:	add	r2, r5, r6
   15240:	sub	r2, r2, #3
   15244:	ldr	r3, [r4, #80]	; 0x50
   15248:	cmp	r2, r3
   1524c:	bls	15274 <flatcc_builder_reserve_table@@Base+0xc8>
   15250:	mov	r3, #3
   15254:	str	r3, [sp]
   15258:	ldr	r5, [r4, #48]	; 0x30
   1525c:	mov	r3, #0
   15260:	add	r1, r4, #76	; 0x4c
   15264:	ldr	r0, [r4, #40]	; 0x28
   15268:	blx	r5
   1526c:	cmp	r0, #0
   15270:	bne	152d8 <flatcc_builder_reserve_table@@Base+0x12c>
   15274:	ldr	r0, [r4, #76]	; 0x4c
   15278:	add	r0, r0, r6
   1527c:	str	r0, [r4]
   15280:	clz	r0, r0
   15284:	lsr	r0, r0, #5
   15288:	rsb	r0, r0, #0
   1528c:	add	sp, sp, #12
   15290:	ldrd	r4, [sp]
   15294:	ldrd	r6, [sp, #8]
   15298:	add	sp, sp, #16
   1529c:	pop	{pc}		; (ldr pc, [sp], #4)
   152a0:	ldr	r3, [pc, #76]	; 152f4 <flatcc_builder_reserve_table@@Base+0x148>
   152a4:	movw	r2, #1065	; 0x429
   152a8:	movw	r1, #35124	; 0x8934
   152ac:	movt	r1, #1
   152b0:	movw	r0, #35772	; 0x8bbc
   152b4:	movt	r0, #1
   152b8:	bl	11fd4 <__assert_fail@plt>
   152bc:	ldr	r3, [pc, #52]	; 152f8 <flatcc_builder_reserve_table@@Base+0x14c>
   152c0:	mov	r2, #308	; 0x134
   152c4:	movw	r1, #35124	; 0x8934
   152c8:	movt	r1, #1
   152cc:	movw	r0, #35208	; 0x8988
   152d0:	movt	r0, #1
   152d4:	bl	11fd4 <__assert_fail@plt>
   152d8:	ldr	r3, [pc, #24]	; 152f8 <flatcc_builder_reserve_table@@Base+0x14c>
   152dc:	mov	r2, #308	; 0x134
   152e0:	movw	r1, #35124	; 0x8934
   152e4:	movt	r1, #1
   152e8:	movw	r0, #35208	; 0x8988
   152ec:	movt	r0, #1
   152f0:	bl	11fd4 <__assert_fail@plt>
   152f4:	andeq	r8, r1, r4, asr r6
   152f8:	andeq	r8, r1, r0, lsl #8

000152fc <flatcc_builder_start_table@@Base>:
   152fc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15300:	strd	r6, [sp, #8]
   15304:	str	r8, [sp, #16]
   15308:	str	lr, [sp, #20]
   1530c:	sub	sp, sp, #8
   15310:	mov	r4, r0
   15314:	mov	r5, r1
   15318:	mov	r1, #4
   1531c:	bl	13508 <flatcc_builder_default_alloc@@Base+0x24c>
   15320:	subs	r6, r0, #0
   15324:	bne	154d0 <flatcc_builder_start_table@@Base+0x1d4>
   15328:	ldr	r2, [r4, #32]
   1532c:	ldr	r3, [r4, #4]
   15330:	ldr	r1, [r4, #52]	; 0x34
   15334:	sub	r3, r3, r1
   15338:	str	r3, [r2, #16]
   1533c:	ldr	r2, [r4, #32]
   15340:	ldr	r3, [r4]
   15344:	ldr	r1, [r4, #76]	; 0x4c
   15348:	sub	r3, r3, r1
   1534c:	str	r3, [r2, #20]
   15350:	ldr	r3, [r4, #32]
   15354:	ldr	r2, [r4, #12]
   15358:	str	r2, [r3, #24]
   1535c:	ldr	r3, [r4, #32]
   15360:	ldrh	r2, [r4, #8]
   15364:	strh	r2, [r3, #28]
   15368:	movw	r3, #15186	; 0x3b52
   1536c:	movt	r3, #12137	; 0x2f69
   15370:	str	r3, [r4, #12]
   15374:	mov	r3, #0
   15378:	strh	r3, [r4, #8]
   1537c:	ldr	r3, [r4, #32]
   15380:	mov	r2, #3
   15384:	strh	r2, [r3, #14]
   15388:	ldr	r2, [r4, #32]
   1538c:	ldrh	r7, [r2, #28]
   15390:	ldr	r3, [r2, #16]
   15394:	add	r7, r3, r7, lsl #1
   15398:	add	r5, r5, #2
   1539c:	lsl	r5, r5, #1
   153a0:	add	r2, r7, r5
   153a4:	ldr	r3, [r4, #56]	; 0x38
   153a8:	cmp	r2, r3
   153ac:	bls	153d4 <flatcc_builder_start_table@@Base+0xd8>
   153b0:	mov	r3, #0
   153b4:	str	r3, [sp]
   153b8:	ldr	r8, [r4, #48]	; 0x30
   153bc:	mov	r3, #1
   153c0:	add	r1, r4, #52	; 0x34
   153c4:	ldr	r0, [r4, #40]	; 0x28
   153c8:	blx	r8
   153cc:	cmp	r0, #0
   153d0:	bne	15498 <flatcc_builder_start_table@@Base+0x19c>
   153d4:	ldr	r3, [r4, #52]	; 0x34
   153d8:	adds	r3, r3, r7
   153dc:	moveq	r3, #0
   153e0:	streq	r3, [r4, #4]
   153e4:	mvneq	r6, #0
   153e8:	beq	1547c <flatcc_builder_start_table@@Base+0x180>
   153ec:	add	r3, r3, #4
   153f0:	str	r3, [r4, #4]
   153f4:	ldr	r3, [r4, #32]
   153f8:	ldr	r7, [r3, #20]
   153fc:	sub	r2, r5, #3
   15400:	add	r2, r2, r7
   15404:	ldr	r3, [r4, #80]	; 0x50
   15408:	cmp	r2, r3
   1540c:	bls	15434 <flatcc_builder_start_table@@Base+0x138>
   15410:	mov	r3, #3
   15414:	str	r3, [sp]
   15418:	ldr	r5, [r4, #48]	; 0x30
   1541c:	mov	r3, #0
   15420:	add	r1, r4, #76	; 0x4c
   15424:	ldr	r0, [r4, #40]	; 0x28
   15428:	blx	r5
   1542c:	cmp	r0, #0
   15430:	bne	154b4 <flatcc_builder_start_table@@Base+0x1b8>
   15434:	ldr	r3, [r4, #76]	; 0x4c
   15438:	add	r3, r3, r7
   1543c:	str	r3, [r4]
   15440:	cmp	r3, #0
   15444:	beq	154d8 <flatcc_builder_start_table@@Base+0x1dc>
   15448:	ldr	r1, [r4, #28]
   1544c:	ldr	r2, [r4, #60]	; 0x3c
   15450:	add	r2, r2, r1
   15454:	str	r2, [r4, #16]
   15458:	ldr	r3, [r4, #64]	; 0x40
   1545c:	sub	r3, r3, r1
   15460:	movw	r2, #65532	; 0xfffc
   15464:	cmp	r3, r2
   15468:	movwhi	r3, #65532	; 0xfffc
   1546c:	str	r3, [r4, #24]
   15470:	ldr	r3, [r4, #32]
   15474:	movw	r2, #65532	; 0xfffc
   15478:	str	r2, [r3, #4]
   1547c:	mov	r0, r6
   15480:	add	sp, sp, #8
   15484:	ldrd	r4, [sp]
   15488:	ldrd	r6, [sp, #8]
   1548c:	ldr	r8, [sp, #16]
   15490:	add	sp, sp, #20
   15494:	pop	{pc}		; (ldr pc, [sp], #4)
   15498:	ldr	r3, [pc, #64]	; 154e0 <flatcc_builder_start_table@@Base+0x1e4>
   1549c:	mov	r2, #308	; 0x134
   154a0:	movw	r1, #35124	; 0x8934
   154a4:	movt	r1, #1
   154a8:	movw	r0, #35208	; 0x8988
   154ac:	movt	r0, #1
   154b0:	bl	11fd4 <__assert_fail@plt>
   154b4:	ldr	r3, [pc, #36]	; 154e0 <flatcc_builder_start_table@@Base+0x1e4>
   154b8:	mov	r2, #308	; 0x134
   154bc:	movw	r1, #35124	; 0x8934
   154c0:	movt	r1, #1
   154c4:	movw	r0, #35208	; 0x8988
   154c8:	movt	r0, #1
   154cc:	bl	11fd4 <__assert_fail@plt>
   154d0:	mvn	r6, #0
   154d4:	b	1547c <flatcc_builder_start_table@@Base+0x180>
   154d8:	mvn	r6, #0
   154dc:	b	1547c <flatcc_builder_start_table@@Base+0x180>
   154e0:	andeq	r8, r1, r0, lsl #8

000154e4 <flatcc_builder_create_vtable@@Base>:
   154e4:	strd	r4, [sp, #-16]!
   154e8:	str	r6, [sp, #8]
   154ec:	str	lr, [sp, #12]
   154f0:	sub	sp, sp, #80	; 0x50
   154f4:	mov	r5, r0
   154f8:	mov	r3, #0
   154fc:	str	r3, [sp, #8]
   15500:	str	r3, [sp, #12]
   15504:	cmp	r2, #0
   15508:	beq	155a4 <flatcc_builder_create_vtable@@Base+0xc0>
   1550c:	str	r2, [sp, #8]
   15510:	str	r1, [sp, #16]
   15514:	str	r2, [sp, #20]
   15518:	mov	r3, #1
   1551c:	str	r3, [sp, #12]
   15520:	ldr	r3, [r0, #152]	; 0x98
   15524:	cmp	r3, #0
   15528:	bne	155bc <flatcc_builder_create_vtable@@Base+0xd8>
   1552c:	ldr	r3, [r0, #180]	; 0xb4
   15530:	cmp	r3, #0
   15534:	bne	155bc <flatcc_builder_create_vtable@@Base+0xd8>
   15538:	ldr	r4, [r0, #140]	; 0x8c
   1553c:	mov	r3, r2
   15540:	add	r2, r2, r4
   15544:	str	r2, [r0, #140]	; 0x8c
   15548:	cmp	r4, r2
   1554c:	ble	15628 <flatcc_builder_create_vtable@@Base+0x144>
   15550:	ldr	r3, [pc, #276]	; 1566c <flatcc_builder_create_vtable@@Base+0x188>
   15554:	movw	r2, #673	; 0x2a1
   15558:	movw	r1, #35124	; 0x8934
   1555c:	movt	r1, #1
   15560:	movw	r0, #35208	; 0x8988
   15564:	movt	r0, #1
   15568:	bl	11fd4 <__assert_fail@plt>
   1556c:	ldr	r3, [pc, #252]	; 15670 <flatcc_builder_create_vtable@@Base+0x18c>
   15570:	movw	r2, #647	; 0x287
   15574:	movw	r1, #35124	; 0x8934
   15578:	movt	r1, #1
   1557c:	movw	r0, #35208	; 0x8988
   15580:	movt	r0, #1
   15584:	bl	11fd4 <__assert_fail@plt>
   15588:	ldr	r3, [pc, #224]	; 15670 <flatcc_builder_create_vtable@@Base+0x18c>
   1558c:	movw	r2, #651	; 0x28b
   15590:	movw	r1, #35124	; 0x8934
   15594:	movt	r1, #1
   15598:	movw	r0, #35208	; 0x8988
   1559c:	movt	r0, #1
   155a0:	bl	11fd4 <__assert_fail@plt>
   155a4:	ldr	r3, [r0, #152]	; 0x98
   155a8:	cmp	r3, #0
   155ac:	bne	1556c <flatcc_builder_create_vtable@@Base+0x88>
   155b0:	ldr	r3, [r0, #180]	; 0xb4
   155b4:	cmp	r3, #0
   155b8:	beq	15618 <flatcc_builder_create_vtable@@Base+0x134>
   155bc:	ldr	r2, [r5, #136]	; 0x88
   155c0:	ldr	r3, [sp, #8]
   155c4:	sub	r4, r2, r3
   155c8:	cmp	r2, r4
   155cc:	ble	1556c <flatcc_builder_create_vtable@@Base+0x88>
   155d0:	str	r3, [sp]
   155d4:	ldr	r6, [r5, #44]	; 0x2c
   155d8:	mov	r3, r4
   155dc:	ldr	r2, [sp, #12]
   155e0:	add	r1, sp, #16
   155e4:	ldr	r0, [r5, #36]	; 0x24
   155e8:	blx	r6
   155ec:	cmp	r0, #0
   155f0:	bne	15588 <flatcc_builder_create_vtable@@Base+0xa4>
   155f4:	str	r4, [r5, #136]	; 0x88
   155f8:	cmp	r4, #0
   155fc:	addne	r4, r4, #1
   15600:	mov	r0, r4
   15604:	add	sp, sp, #80	; 0x50
   15608:	ldrd	r4, [sp]
   1560c:	ldr	r6, [sp, #8]
   15610:	add	sp, sp, #12
   15614:	pop	{pc}		; (ldr pc, [sp], #4)
   15618:	ldr	r4, [r5, #140]	; 0x8c
   1561c:	ldr	r3, [sp, #8]
   15620:	add	r2, r3, r4
   15624:	str	r2, [r5, #140]	; 0x8c
   15628:	str	r3, [sp]
   1562c:	ldr	r6, [r5, #44]	; 0x2c
   15630:	mov	r3, r4
   15634:	ldr	r2, [sp, #12]
   15638:	add	r1, sp, #16
   1563c:	ldr	r0, [r5, #36]	; 0x24
   15640:	blx	r6
   15644:	cmp	r0, #0
   15648:	addeq	r4, r4, #1
   1564c:	beq	15600 <flatcc_builder_create_vtable@@Base+0x11c>
   15650:	ldr	r3, [pc, #20]	; 1566c <flatcc_builder_create_vtable@@Base+0x188>
   15654:	movw	r2, #677	; 0x2a5
   15658:	movw	r1, #35124	; 0x8934
   1565c:	movt	r1, #1
   15660:	movw	r0, #35208	; 0x8988
   15664:	movt	r0, #1
   15668:	bl	11fd4 <__assert_fail@plt>
   1566c:	andeq	r8, r1, r4, ror #7
   15670:	andeq	r8, r1, r0, lsr r4

00015674 <flatcc_builder_create_cached_vtable@@Base>:
   15674:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15678:	strd	r6, [sp, #8]
   1567c:	strd	r8, [sp, #16]
   15680:	strd	sl, [sp, #24]
   15684:	str	lr, [sp, #32]
   15688:	sub	sp, sp, #36	; 0x24
   1568c:	mov	r5, r0
   15690:	str	r1, [sp, #12]
   15694:	str	r2, [sp, #16]
   15698:	mov	r6, r3
   1569c:	ldr	r3, [r0, #116]	; 0x74
   156a0:	cmp	r3, #0
   156a4:	beq	156ec <flatcc_builder_create_cached_vtable@@Base+0x78>
   156a8:	ldr	r8, [r5, #116]	; 0x74
   156ac:	rsb	r3, r8, #32
   156b0:	lsr	r8, r6, r3
   156b4:	ldr	sl, [r5, #92]	; 0x5c
   156b8:	adds	r9, sl, r8, lsl #2
   156bc:	str	r9, [sp, #20]
   156c0:	beq	159fc <flatcc_builder_create_cached_vtable@@Base+0x388>
   156c4:	ldr	r6, [sl, r8, lsl #2]
   156c8:	cmp	r6, #0
   156cc:	beq	15924 <flatcc_builder_create_cached_vtable@@Base+0x2b0>
   156d0:	ldr	fp, [r5, #100]	; 0x64
   156d4:	ldr	r7, [r5, #68]	; 0x44
   156d8:	mov	r3, #0
   156dc:	str	r3, [sp, #28]
   156e0:	str	r8, [sp, #24]
   156e4:	ldr	r8, [sp, #16]
   156e8:	b	157f4 <flatcc_builder_create_cached_vtable@@Base+0x180>
   156ec:	add	r8, r0, #92	; 0x5c
   156f0:	ldr	r4, [r0, #124]	; 0x7c
   156f4:	cmp	r4, #0
   156f8:	bne	15778 <flatcc_builder_create_cached_vtable@@Base+0x104>
   156fc:	ldr	r3, [r0, #104]	; 0x68
   15700:	cmp	r3, #15
   15704:	bhi	15730 <flatcc_builder_create_cached_vtable@@Base+0xbc>
   15708:	mov	r3, #6
   1570c:	str	r3, [sp]
   15710:	ldr	r7, [r0, #48]	; 0x30
   15714:	mov	r3, #0
   15718:	mov	r2, #16
   1571c:	add	r1, r0, #100	; 0x64
   15720:	ldr	r0, [r0, #40]	; 0x28
   15724:	blx	r7
   15728:	cmp	r0, #0
   1572c:	bne	15794 <flatcc_builder_create_cached_vtable@@Base+0x120>
   15730:	ldr	r3, [r5, #100]	; 0x64
   15734:	cmp	r3, #0
   15738:	beq	15a14 <flatcc_builder_create_cached_vtable@@Base+0x3a0>
   1573c:	mov	r3, #16
   15740:	str	r3, [r5, #124]	; 0x7c
   15744:	mov	r3, #5
   15748:	str	r3, [sp]
   1574c:	ldr	r7, [r5, #48]	; 0x30
   15750:	mov	r3, #1
   15754:	mov	r2, #256	; 0x100
   15758:	mov	r1, r8
   1575c:	ldr	r0, [r5, #40]	; 0x28
   15760:	blx	r7
   15764:	cmp	r0, #0
   15768:	bne	15a14 <flatcc_builder_create_cached_vtable@@Base+0x3a0>
   1576c:	ldr	r1, [r5, #96]	; 0x60
   15770:	mov	r2, #256	; 0x100
   15774:	b	157b4 <flatcc_builder_create_cached_vtable@@Base+0x140>
   15778:	ldr	r3, [pc, #668]	; 15a1c <flatcc_builder_create_cached_vtable@@Base+0x3a8>
   1577c:	movw	r2, #342	; 0x156
   15780:	movw	r1, #35124	; 0x8934
   15784:	movt	r1, #1
   15788:	movw	r0, #35784	; 0x8bc8
   1578c:	movt	r0, #1
   15790:	bl	11fd4 <__assert_fail@plt>
   15794:	ldr	r3, [pc, #644]	; 15a20 <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   15798:	mov	r2, #308	; 0x134
   1579c:	movw	r1, #35124	; 0x8934
   157a0:	movt	r1, #1
   157a4:	movw	r0, #35208	; 0x8988
   157a8:	movt	r0, #1
   157ac:	bl	11fd4 <__assert_fail@plt>
   157b0:	mov	r2, r3
   157b4:	lsl	r3, r2, #1
   157b8:	cmp	r3, r1
   157bc:	bls	157b0 <flatcc_builder_create_cached_vtable@@Base+0x13c>
   157c0:	lsr	r3, r2, #2
   157c4:	cmp	r2, #7
   157c8:	bls	157dc <flatcc_builder_create_cached_vtable@@Base+0x168>
   157cc:	mov	r2, #1
   157d0:	add	r4, r4, #1
   157d4:	cmp	r3, r2, lsl r4
   157d8:	bhi	157d0 <flatcc_builder_create_cached_vtable@@Base+0x15c>
   157dc:	str	r4, [r5, #116]	; 0x74
   157e0:	b	156a8 <flatcc_builder_create_cached_vtable@@Base+0x34>
   157e4:	add	r9, r4, #12
   157e8:	ldr	r6, [r4, #12]
   157ec:	cmp	r6, #0
   157f0:	beq	15884 <flatcc_builder_create_cached_vtable@@Base+0x210>
   157f4:	add	r4, fp, r6
   157f8:	ldr	r3, [r4, #8]
   157fc:	add	r1, r7, r3
   15800:	ldrh	r3, [r7, r3]
   15804:	cmp	r3, r8
   15808:	bne	157e4 <flatcc_builder_create_cached_vtable@@Base+0x170>
   1580c:	mov	r2, r8
   15810:	ldr	r0, [sp, #12]
   15814:	bl	11f50 <memcmp@plt>
   15818:	cmp	r0, #0
   1581c:	bne	157e4 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15820:	ldr	r2, [r4, #4]
   15824:	ldr	r3, [r5, #152]	; 0x98
   15828:	cmp	r2, r3
   1582c:	bne	15874 <flatcc_builder_create_cached_vtable@@Base+0x200>
   15830:	ldr	r8, [sp, #24]
   15834:	ldr	r3, [sp, #20]
   15838:	cmp	r3, r9
   1583c:	beq	15854 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   15840:	ldr	r3, [r4, #12]
   15844:	str	r3, [r9]
   15848:	ldr	r3, [sl, r8, lsl #2]
   1584c:	str	r3, [r4, #12]
   15850:	str	r6, [sl, r8, lsl #2]
   15854:	ldr	r0, [r4]
   15858:	add	sp, sp, #36	; 0x24
   1585c:	ldrd	r4, [sp]
   15860:	ldrd	r6, [sp, #8]
   15864:	ldrd	r8, [sp, #16]
   15868:	ldrd	sl, [sp, #24]
   1586c:	add	sp, sp, #32
   15870:	pop	{pc}		; (ldr pc, [sp], #4)
   15874:	add	r9, r4, #12
   15878:	ldr	r6, [r4, #12]
   1587c:	str	r4, [sp, #28]
   15880:	b	157ec <flatcc_builder_create_cached_vtable@@Base+0x178>
   15884:	ldr	r8, [sp, #24]
   15888:	ldr	r4, [r5, #124]	; 0x7c
   1588c:	add	r2, r4, #16
   15890:	ldr	r3, [r5, #104]	; 0x68
   15894:	cmp	r2, r3
   15898:	bls	158c0 <flatcc_builder_create_cached_vtable@@Base+0x24c>
   1589c:	mov	r3, #6
   158a0:	str	r3, [sp]
   158a4:	ldr	r6, [r5, #48]	; 0x30
   158a8:	mov	r3, #0
   158ac:	add	r1, r5, #100	; 0x64
   158b0:	ldr	r0, [r5, #40]	; 0x28
   158b4:	blx	r6
   158b8:	cmp	r0, #0
   158bc:	bne	15930 <flatcc_builder_create_cached_vtable@@Base+0x2bc>
   158c0:	ldr	r6, [r5, #100]	; 0x64
   158c4:	adds	r7, r6, r4
   158c8:	beq	15a04 <flatcc_builder_create_cached_vtable@@Base+0x390>
   158cc:	ldr	r3, [r5, #124]	; 0x7c
   158d0:	add	r2, r3, #16
   158d4:	str	r2, [r5, #124]	; 0x7c
   158d8:	ldr	r2, [r5, #152]	; 0x98
   158dc:	str	r2, [r7, #4]
   158e0:	ldr	r2, [sl, r8, lsl #2]
   158e4:	str	r2, [r7, #12]
   158e8:	str	r3, [sl, r8, lsl #2]
   158ec:	ldr	r2, [sp, #16]
   158f0:	ldr	r1, [sp, #12]
   158f4:	mov	r0, r5
   158f8:	bl	154e4 <flatcc_builder_create_vtable@@Base>
   158fc:	str	r0, [r6, r4]
   15900:	cmp	r0, #0
   15904:	beq	15858 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15908:	ldr	r3, [sp, #28]
   1590c:	cmp	r3, #0
   15910:	beq	1594c <flatcc_builder_create_cached_vtable@@Base+0x2d8>
   15914:	ldr	r3, [r3, #8]
   15918:	str	r3, [r7, #8]
   1591c:	ldr	r0, [r6, r4]
   15920:	b	15858 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15924:	mov	r3, #0
   15928:	str	r3, [sp, #28]
   1592c:	b	15888 <flatcc_builder_create_cached_vtable@@Base+0x214>
   15930:	ldr	r3, [pc, #232]	; 15a20 <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   15934:	mov	r2, #308	; 0x134
   15938:	movw	r1, #35124	; 0x8934
   1593c:	movt	r1, #1
   15940:	movw	r0, #35208	; 0x8988
   15944:	movt	r0, #1
   15948:	bl	11fd4 <__assert_fail@plt>
   1594c:	ldr	r2, [r5, #172]	; 0xac
   15950:	cmp	r2, #0
   15954:	beq	1596c <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   15958:	ldr	r3, [r5, #120]	; 0x78
   1595c:	ldr	r1, [sp, #16]
   15960:	add	r3, r1, r3
   15964:	cmp	r2, r3
   15968:	bcc	159d4 <flatcc_builder_create_cached_vtable@@Base+0x360>
   1596c:	ldr	r8, [r5, #120]	; 0x78
   15970:	ldr	r3, [sp, #16]
   15974:	add	r2, r8, r3
   15978:	ldr	r3, [r5, #72]	; 0x48
   1597c:	cmp	r2, r3
   15980:	bls	159a8 <flatcc_builder_create_cached_vtable@@Base+0x334>
   15984:	mov	r3, #2
   15988:	str	r3, [sp]
   1598c:	ldr	sl, [r5, #48]	; 0x30
   15990:	mov	r3, #0
   15994:	add	r1, r5, #68	; 0x44
   15998:	ldr	r0, [r5, #40]	; 0x28
   1599c:	blx	sl
   159a0:	cmp	r0, #0
   159a4:	bne	159e0 <flatcc_builder_create_cached_vtable@@Base+0x36c>
   159a8:	ldr	r3, [r5, #68]	; 0x44
   159ac:	adds	r0, r3, r8
   159b0:	beq	15a0c <flatcc_builder_create_cached_vtable@@Base+0x398>
   159b4:	ldr	r3, [r5, #120]	; 0x78
   159b8:	str	r3, [r7, #8]
   159bc:	ldr	r2, [sp, #16]
   159c0:	add	r3, r2, r3
   159c4:	str	r3, [r5, #120]	; 0x78
   159c8:	ldr	r1, [sp, #12]
   159cc:	bl	11f44 <memcpy@plt>
   159d0:	b	1591c <flatcc_builder_create_cached_vtable@@Base+0x2a8>
   159d4:	mov	r0, r5
   159d8:	bl	1387c <flatcc_builder_flush_vtable_cache@@Base>
   159dc:	b	1591c <flatcc_builder_create_cached_vtable@@Base+0x2a8>
   159e0:	ldr	r3, [pc, #56]	; 15a20 <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   159e4:	mov	r2, #308	; 0x134
   159e8:	movw	r1, #35124	; 0x8934
   159ec:	movt	r1, #1
   159f0:	movw	r0, #35208	; 0x8988
   159f4:	movt	r0, #1
   159f8:	bl	11fd4 <__assert_fail@plt>
   159fc:	mov	r0, #0
   15a00:	b	15858 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15a04:	mov	r0, #0
   15a08:	b	15858 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15a0c:	mvn	r0, #0
   15a10:	b	15858 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15a14:	mov	r0, #0
   15a18:	b	15858 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15a1c:	andeq	r8, r1, r4, ror r6
   15a20:	andeq	r8, r1, r0, lsl #8

00015a24 <flatcc_builder_create_table@@Base>:
   15a24:	strd	r4, [sp, #-20]!	; 0xffffffec
   15a28:	strd	r6, [sp, #8]
   15a2c:	str	lr, [sp, #16]
   15a30:	sub	sp, sp, #92	; 0x5c
   15a34:	ldr	r7, [sp, #116]	; 0x74
   15a38:	ldr	ip, [sp, #120]	; 0x78
   15a3c:	cmp	r7, #0
   15a40:	blt	15b88 <flatcc_builder_create_table@@Base+0x164>
   15a44:	mov	r4, r0
   15a48:	tst	ip, #1
   15a4c:	beq	15ba4 <flatcc_builder_create_table@@Base+0x180>
   15a50:	cmp	r3, #4
   15a54:	movcc	r3, #4
   15a58:	ldrh	r0, [r0, #128]	; 0x80
   15a5c:	cmp	r0, r3
   15a60:	strhcc	r3, [r4, #128]	; 0x80
   15a64:	ldr	r0, [r4, #136]	; 0x88
   15a68:	sub	r6, r0, r2
   15a6c:	sub	r3, r3, #1
   15a70:	and	r6, r6, r3
   15a74:	sub	r0, r0, r2
   15a78:	sub	r0, r0, #4
   15a7c:	sub	ip, ip, #1
   15a80:	sub	ip, r0, ip
   15a84:	sub	ip, ip, r6
   15a88:	str	ip, [sp, #84]	; 0x54
   15a8c:	cmp	r7, #0
   15a90:	ble	15ac0 <flatcc_builder_create_table@@Base+0x9c>
   15a94:	ldr	ip, [sp, #112]	; 0x70
   15a98:	add	r7, ip, r7, lsl #1
   15a9c:	sub	r0, r6, r0
   15aa0:	sub	lr, r0, #4
   15aa4:	ldrh	r3, [ip], #2
   15aa8:	sub	r5, lr, r3
   15aac:	ldr	r0, [r1, r3]
   15ab0:	add	r0, r0, r5
   15ab4:	str	r0, [r1, r3]
   15ab8:	cmp	r7, ip
   15abc:	bne	15aa4 <flatcc_builder_create_table@@Base+0x80>
   15ac0:	mov	r3, #4
   15ac4:	str	r3, [sp, #12]
   15ac8:	add	r0, sp, #84	; 0x54
   15acc:	str	r0, [sp, #20]
   15ad0:	str	r3, [sp, #24]
   15ad4:	mov	r3, #1
   15ad8:	str	r3, [sp, #16]
   15adc:	cmp	r2, #0
   15ae0:	beq	15afc <flatcc_builder_create_table@@Base+0xd8>
   15ae4:	add	r3, r2, #4
   15ae8:	str	r3, [sp, #12]
   15aec:	str	r1, [sp, #28]
   15af0:	str	r2, [sp, #32]
   15af4:	mov	r3, #2
   15af8:	str	r3, [sp, #16]
   15afc:	cmp	r6, #0
   15b00:	beq	15b34 <flatcc_builder_create_table@@Base+0x110>
   15b04:	ldr	r3, [sp, #12]
   15b08:	add	r3, r3, r6
   15b0c:	str	r3, [sp, #12]
   15b10:	ldr	r3, [sp, #16]
   15b14:	add	r3, r3, #1
   15b18:	add	r2, sp, #88	; 0x58
   15b1c:	add	r1, r2, r3, lsl #3
   15b20:	movw	r2, #33252	; 0x81e4
   15b24:	movt	r2, #1
   15b28:	str	r2, [r1, #-76]	; 0xffffffb4
   15b2c:	str	r6, [r1, #-72]	; 0xffffffb8
   15b30:	str	r3, [sp, #16]
   15b34:	ldr	r2, [r4, #136]	; 0x88
   15b38:	ldr	r3, [sp, #12]
   15b3c:	sub	r5, r2, r3
   15b40:	cmp	r2, r5
   15b44:	ble	15bc0 <flatcc_builder_create_table@@Base+0x19c>
   15b48:	str	r3, [sp]
   15b4c:	ldr	r6, [r4, #44]	; 0x2c
   15b50:	mov	r3, r5
   15b54:	ldr	r2, [sp, #16]
   15b58:	add	r1, sp, #20
   15b5c:	ldr	r0, [r4, #36]	; 0x24
   15b60:	blx	r6
   15b64:	cmp	r0, #0
   15b68:	bne	15bdc <flatcc_builder_create_table@@Base+0x1b8>
   15b6c:	str	r5, [r4, #136]	; 0x88
   15b70:	mov	r0, r5
   15b74:	add	sp, sp, #92	; 0x5c
   15b78:	ldrd	r4, [sp]
   15b7c:	ldrd	r6, [sp, #8]
   15b80:	add	sp, sp, #16
   15b84:	pop	{pc}		; (ldr pc, [sp], #4)
   15b88:	ldr	r3, [pc, #104]	; 15bf8 <flatcc_builder_create_table@@Base+0x1d4>
   15b8c:	movw	r2, #1237	; 0x4d5
   15b90:	movw	r1, #35124	; 0x8934
   15b94:	movt	r1, #1
   15b98:	movw	r0, #35800	; 0x8bd8
   15b9c:	movt	r0, #1
   15ba0:	bl	11fd4 <__assert_fail@plt>
   15ba4:	ldr	r3, [pc, #76]	; 15bf8 <flatcc_builder_create_table@@Base+0x1d4>
   15ba8:	movw	r2, #1243	; 0x4db
   15bac:	movw	r1, #35124	; 0x8934
   15bb0:	movt	r1, #1
   15bb4:	movw	r0, #35820	; 0x8bec
   15bb8:	movt	r0, #1
   15bbc:	bl	11fd4 <__assert_fail@plt>
   15bc0:	ldr	r3, [pc, #52]	; 15bfc <flatcc_builder_create_table@@Base+0x1d8>
   15bc4:	movw	r2, #647	; 0x287
   15bc8:	movw	r1, #35124	; 0x8934
   15bcc:	movt	r1, #1
   15bd0:	movw	r0, #35208	; 0x8988
   15bd4:	movt	r0, #1
   15bd8:	bl	11fd4 <__assert_fail@plt>
   15bdc:	ldr	r3, [pc, #24]	; 15bfc <flatcc_builder_create_table@@Base+0x1d8>
   15be0:	movw	r2, #651	; 0x28b
   15be4:	movw	r1, #35124	; 0x8934
   15be8:	movt	r1, #1
   15bec:	movw	r0, #35208	; 0x8988
   15bf0:	movt	r0, #1
   15bf4:	bl	11fd4 <__assert_fail@plt>
   15bf8:	andeq	r8, r1, r0, lsl #13
   15bfc:	andeq	r8, r1, r0, lsr r4

00015c00 <flatcc_builder_check_required_field@@Base>:
   15c00:	ldr	r3, [r0, #32]
   15c04:	ldrh	r3, [r3, #14]
   15c08:	cmp	r3, #3
   15c0c:	bne	15c34 <flatcc_builder_check_required_field@@Base+0x34>
   15c10:	ldrh	r3, [r0, #8]
   15c14:	cmp	r3, r1
   15c18:	bls	15c58 <flatcc_builder_check_required_field@@Base+0x58>
   15c1c:	ldr	r3, [r0, #4]
   15c20:	lsl	r1, r1, #1
   15c24:	ldrh	r0, [r3, r1]
   15c28:	adds	r0, r0, #0
   15c2c:	movne	r0, #1
   15c30:	bx	lr
   15c34:	str	r4, [sp, #-8]!
   15c38:	str	lr, [sp, #4]
   15c3c:	ldr	r3, [pc, #28]	; 15c60 <flatcc_builder_check_required_field@@Base+0x60>
   15c40:	movw	r2, #1272	; 0x4f8
   15c44:	movw	r1, #35124	; 0x8934
   15c48:	movt	r1, #1
   15c4c:	movw	r0, #35832	; 0x8bf8
   15c50:	movt	r0, #1
   15c54:	bl	11fd4 <__assert_fail@plt>
   15c58:	mov	r0, #0
   15c5c:	bx	lr
   15c60:	muleq	r1, ip, r6

00015c64 <flatcc_builder_check_union_field@@Base>:
   15c64:	ldr	r3, [r0, #32]
   15c68:	ldrh	r3, [r3, #14]
   15c6c:	cmp	r3, #3
   15c70:	bne	15cc4 <flatcc_builder_check_union_field@@Base+0x60>
   15c74:	cmp	r1, #0
   15c78:	beq	15d10 <flatcc_builder_check_union_field@@Base+0xac>
   15c7c:	ldrh	r3, [r0, #8]
   15c80:	cmp	r3, r1
   15c84:	bls	15d18 <flatcc_builder_check_union_field@@Base+0xb4>
   15c88:	ldr	r3, [r0, #4]
   15c8c:	sub	r1, r1, #-2147483647	; 0x80000001
   15c90:	lsl	r1, r1, #1
   15c94:	ldrh	r2, [r3, r1]
   15c98:	cmp	r2, #0
   15c9c:	beq	15ce8 <flatcc_builder_check_union_field@@Base+0x84>
   15ca0:	ldr	r0, [r0, #16]
   15ca4:	ldrb	r2, [r0, r2]
   15ca8:	cmp	r2, #0
   15cac:	bne	15cfc <flatcc_builder_check_union_field@@Base+0x98>
   15cb0:	add	r1, r3, r1
   15cb4:	ldrh	r0, [r1, #2]
   15cb8:	clz	r0, r0
   15cbc:	lsr	r0, r0, #5
   15cc0:	bx	lr
   15cc4:	str	r4, [sp, #-8]!
   15cc8:	str	lr, [sp, #4]
   15ccc:	ldr	r3, [pc, #76]	; 15d20 <flatcc_builder_check_union_field@@Base+0xbc>
   15cd0:	movw	r2, #1279	; 0x4ff
   15cd4:	movw	r1, #35124	; 0x8934
   15cd8:	movt	r1, #1
   15cdc:	movw	r0, #35832	; 0x8bf8
   15ce0:	movt	r0, #1
   15ce4:	bl	11fd4 <__assert_fail@plt>
   15ce8:	add	r1, r3, r1
   15cec:	ldrh	r0, [r1, #2]
   15cf0:	clz	r0, r0
   15cf4:	lsr	r0, r0, #5
   15cf8:	bx	lr
   15cfc:	add	r1, r3, r1
   15d00:	ldrh	r0, [r1, #2]
   15d04:	adds	r0, r0, #0
   15d08:	movne	r0, #1
   15d0c:	bx	lr
   15d10:	mov	r0, #0
   15d14:	bx	lr
   15d18:	mov	r0, #0
   15d1c:	bx	lr
   15d20:	andeq	r8, r1, r0, asr #13

00015d24 <flatcc_builder_check_required@@Base>:
   15d24:	ldr	r3, [r0, #32]
   15d28:	ldrh	r3, [r3, #14]
   15d2c:	cmp	r3, #3
   15d30:	bne	15d8c <flatcc_builder_check_required@@Base+0x68>
   15d34:	ldrh	r3, [r0, #8]
   15d38:	cmp	r3, r2
   15d3c:	blt	15db8 <flatcc_builder_check_required@@Base+0x94>
   15d40:	cmp	r2, #0
   15d44:	ble	15dc0 <flatcc_builder_check_required@@Base+0x9c>
   15d48:	ldr	ip, [r0, #4]
   15d4c:	ldrh	r3, [r1]
   15d50:	lsl	r3, r3, #1
   15d54:	ldrh	r3, [ip, r3]
   15d58:	cmp	r3, #0
   15d5c:	beq	15dc8 <flatcc_builder_check_required@@Base+0xa4>
   15d60:	add	r0, r1, #2
   15d64:	add	r2, r1, r2, lsl #1
   15d68:	cmp	r0, r2
   15d6c:	beq	15db0 <flatcc_builder_check_required@@Base+0x8c>
   15d70:	ldrh	r3, [r0], #2
   15d74:	lsl	r3, r3, #1
   15d78:	ldrh	r3, [ip, r3]
   15d7c:	cmp	r3, #0
   15d80:	bne	15d68 <flatcc_builder_check_required@@Base+0x44>
   15d84:	mov	r0, #0
   15d88:	bx	lr
   15d8c:	str	r4, [sp, #-8]!
   15d90:	str	lr, [sp, #4]
   15d94:	ldr	r3, [pc, #52]	; 15dd0 <flatcc_builder_check_required@@Base+0xac>
   15d98:	movw	r2, #1297	; 0x511
   15d9c:	movw	r1, #35124	; 0x8934
   15da0:	movt	r1, #1
   15da4:	movw	r0, #35832	; 0x8bf8
   15da8:	movt	r0, #1
   15dac:	bl	11fd4 <__assert_fail@plt>
   15db0:	mov	r0, #1
   15db4:	bx	lr
   15db8:	mov	r0, #0
   15dbc:	bx	lr
   15dc0:	mov	r0, #1
   15dc4:	bx	lr
   15dc8:	mov	r0, #0
   15dcc:	bx	lr
   15dd0:	andeq	r8, r1, r4, ror #13

00015dd4 <flatcc_builder_end_table@@Base>:
   15dd4:	strd	r4, [sp, #-20]!	; 0xffffffec
   15dd8:	strd	r6, [sp, #8]
   15ddc:	str	lr, [sp, #16]
   15de0:	sub	sp, sp, #20
   15de4:	ldr	r3, [r0, #32]
   15de8:	ldrh	r3, [r3, #14]
   15dec:	cmp	r3, #3
   15df0:	bne	15e70 <flatcc_builder_end_table@@Base+0x9c>
   15df4:	mov	r4, r0
   15df8:	ldr	r2, [r0, #4]
   15dfc:	sub	r6, r2, #4
   15e00:	ldrh	r5, [r0, #8]
   15e04:	add	r5, r5, #2
   15e08:	lsl	r5, r5, #1
   15e0c:	uxth	r5, r5
   15e10:	strh	r5, [r2, #-4]
   15e14:	ldr	r3, [r0, #20]
   15e18:	add	r3, r3, #4
   15e1c:	uxth	r1, r3
   15e20:	strh	r1, [r2, #-2]
   15e24:	ldr	r3, [r0, #12]
   15e28:	eor	r3, r3, r5
   15e2c:	movw	r2, #31153	; 0x79b1
   15e30:	movt	r2, #40503	; 0x9e37
   15e34:	mul	r3, r2, r3
   15e38:	eor	r3, r3, r1
   15e3c:	mul	r3, r2, r3
   15e40:	str	r3, [r0, #12]
   15e44:	mov	r2, r5
   15e48:	mov	r1, r6
   15e4c:	bl	15674 <flatcc_builder_create_cached_vtable@@Base>
   15e50:	subs	r7, r0, #0
   15e54:	bne	15e8c <flatcc_builder_end_table@@Base+0xb8>
   15e58:	mov	r0, r7
   15e5c:	add	sp, sp, #20
   15e60:	ldrd	r4, [sp]
   15e64:	ldrd	r6, [sp, #8]
   15e68:	add	sp, sp, #16
   15e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e70:	ldr	r3, [pc, #284]	; 15f94 <flatcc_builder_end_table@@Base+0x1c0>
   15e74:	movw	r2, #1317	; 0x525
   15e78:	movw	r1, #35124	; 0x8934
   15e7c:	movt	r1, #1
   15e80:	movw	r0, #35832	; 0x8bf8
   15e84:	movt	r0, #1
   15e88:	bl	11fd4 <__assert_fail@plt>
   15e8c:	mov	r2, r5
   15e90:	mov	r1, #0
   15e94:	mov	r0, r6
   15e98:	bl	11fb0 <memset@plt>
   15e9c:	ldr	r3, [r4, #32]
   15ea0:	ldr	r2, [r4, #76]	; 0x4c
   15ea4:	ldr	r3, [r3, #20]
   15ea8:	add	r2, r2, r3
   15eac:	str	r7, [sp, #8]
   15eb0:	ldr	r3, [r4]
   15eb4:	sub	r3, r3, r2
   15eb8:	asr	r3, r3, #1
   15ebc:	str	r3, [sp, #4]
   15ec0:	str	r2, [sp]
   15ec4:	ldrh	r3, [r4, #130]	; 0x82
   15ec8:	ldr	r2, [r4, #20]
   15ecc:	ldr	r1, [r4, #16]
   15ed0:	mov	r0, r4
   15ed4:	bl	15a24 <flatcc_builder_create_table@@Base>
   15ed8:	subs	r7, r0, #0
   15edc:	beq	15e58 <flatcc_builder_end_table@@Base+0x84>
   15ee0:	ldr	r3, [r4, #32]
   15ee4:	ldr	r2, [r3, #24]
   15ee8:	str	r2, [r4, #12]
   15eec:	ldrh	r2, [r3, #28]
   15ef0:	strh	r2, [r4, #8]
   15ef4:	ldr	r2, [r4, #52]	; 0x34
   15ef8:	ldr	r1, [r3, #16]
   15efc:	add	r2, r2, r1
   15f00:	str	r2, [r4, #4]
   15f04:	ldr	r2, [r4, #76]	; 0x4c
   15f08:	ldr	r3, [r3, #20]
   15f0c:	add	r3, r2, r3
   15f10:	str	r3, [r4]
   15f14:	ldr	r2, [r4, #20]
   15f18:	mov	r1, #0
   15f1c:	ldr	r0, [r4, #16]
   15f20:	bl	11fb0 <memset@plt>
   15f24:	ldr	r2, [r4, #32]
   15f28:	ldr	r3, [r2, #8]
   15f2c:	str	r3, [r4, #20]
   15f30:	ldr	r0, [r2]
   15f34:	str	r0, [r4, #28]
   15f38:	ldr	r1, [r2, #4]
   15f3c:	ldr	r3, [r4, #60]	; 0x3c
   15f40:	add	r3, r3, r0
   15f44:	str	r3, [r4, #16]
   15f48:	ldr	r3, [r4, #64]	; 0x40
   15f4c:	sub	r3, r3, r0
   15f50:	cmp	r3, r1
   15f54:	movcs	r3, r1
   15f58:	str	r3, [r4, #24]
   15f5c:	str	r1, [r2, #4]
   15f60:	ldrh	r3, [r4, #130]	; 0x82
   15f64:	ldrh	r2, [r4, #128]	; 0x80
   15f68:	cmp	r2, r3
   15f6c:	strhcc	r3, [r4, #128]	; 0x80
   15f70:	ldr	r3, [r4, #32]
   15f74:	ldrh	r2, [r3, #12]
   15f78:	strh	r2, [r4, #130]	; 0x82
   15f7c:	sub	r3, r3, #36	; 0x24
   15f80:	str	r3, [r4, #32]
   15f84:	ldr	r3, [r4, #156]	; 0x9c
   15f88:	sub	r3, r3, #1
   15f8c:	str	r3, [r4, #156]	; 0x9c
   15f90:	b	15e58 <flatcc_builder_end_table@@Base+0x84>
   15f94:	andeq	r8, r1, r4, lsl #14

00015f98 <flatcc_builder_create_vector@@Base>:
   15f98:	strd	r4, [sp, #-16]!
   15f9c:	str	r6, [sp, #8]
   15fa0:	str	lr, [sp, #12]
   15fa4:	sub	sp, sp, #88	; 0x58
   15fa8:	mov	r4, r0
   15fac:	ldrh	r0, [sp, #104]	; 0x68
   15fb0:	ldr	ip, [sp, #108]	; 0x6c
   15fb4:	cmp	r2, ip
   15fb8:	bhi	160ac <flatcc_builder_create_vector@@Base+0x114>
   15fbc:	cmp	r0, #4
   15fc0:	movcc	r0, #4
   15fc4:	ldrh	ip, [r4, #128]	; 0x80
   15fc8:	cmp	ip, r0
   15fcc:	strhcc	r0, [r4, #128]	; 0x80
   15fd0:	mul	r3, r3, r2
   15fd4:	str	r2, [sp, #84]	; 0x54
   15fd8:	ldr	r2, [r4, #136]	; 0x88
   15fdc:	sub	ip, r2, r3
   15fe0:	sub	r0, r0, #1
   15fe4:	and	r0, r0, ip
   15fe8:	mov	ip, #4
   15fec:	str	ip, [sp, #12]
   15ff0:	add	lr, sp, #84	; 0x54
   15ff4:	str	lr, [sp, #20]
   15ff8:	str	ip, [sp, #24]
   15ffc:	mov	ip, #1
   16000:	str	ip, [sp, #16]
   16004:	cmp	r3, #0
   16008:	beq	16024 <flatcc_builder_create_vector@@Base+0x8c>
   1600c:	add	ip, r3, #4
   16010:	str	ip, [sp, #12]
   16014:	str	r1, [sp, #28]
   16018:	str	r3, [sp, #32]
   1601c:	mov	r3, #2
   16020:	str	r3, [sp, #16]
   16024:	cmp	r0, #0
   16028:	beq	1605c <flatcc_builder_create_vector@@Base+0xc4>
   1602c:	ldr	r3, [sp, #12]
   16030:	add	r3, r3, r0
   16034:	str	r3, [sp, #12]
   16038:	ldr	r3, [sp, #16]
   1603c:	add	r3, r3, #1
   16040:	add	r1, sp, #88	; 0x58
   16044:	add	ip, r1, r3, lsl #3
   16048:	movw	r1, #33252	; 0x81e4
   1604c:	movt	r1, #1
   16050:	str	r1, [ip, #-76]	; 0xffffffb4
   16054:	str	r0, [ip, #-72]	; 0xffffffb8
   16058:	str	r3, [sp, #16]
   1605c:	ldr	r3, [sp, #12]
   16060:	sub	r5, r2, r3
   16064:	cmp	r2, r5
   16068:	ble	160c8 <flatcc_builder_create_vector@@Base+0x130>
   1606c:	str	r3, [sp]
   16070:	ldr	r6, [r4, #44]	; 0x2c
   16074:	mov	r3, r5
   16078:	ldr	r2, [sp, #16]
   1607c:	add	r1, sp, #20
   16080:	ldr	r0, [r4, #36]	; 0x24
   16084:	blx	r6
   16088:	cmp	r0, #0
   1608c:	bne	160e4 <flatcc_builder_create_vector@@Base+0x14c>
   16090:	str	r5, [r4, #136]	; 0x88
   16094:	mov	r0, r5
   16098:	add	sp, sp, #88	; 0x58
   1609c:	ldrd	r4, [sp]
   160a0:	ldr	r6, [sp, #8]
   160a4:	add	sp, sp, #12
   160a8:	pop	{pc}		; (ldr pc, [sp], #4)
   160ac:	ldr	r3, [pc, #76]	; 16100 <flatcc_builder_create_vector@@Base+0x168>
   160b0:	movw	r2, #1365	; 0x555
   160b4:	movw	r1, #35124	; 0x8934
   160b8:	movt	r1, #1
   160bc:	movw	r0, #35876	; 0x8c24
   160c0:	movt	r0, #1
   160c4:	bl	11fd4 <__assert_fail@plt>
   160c8:	ldr	r3, [pc, #52]	; 16104 <flatcc_builder_create_vector@@Base+0x16c>
   160cc:	movw	r2, #647	; 0x287
   160d0:	movw	r1, #35124	; 0x8934
   160d4:	movt	r1, #1
   160d8:	movw	r0, #35208	; 0x8988
   160dc:	movt	r0, #1
   160e0:	bl	11fd4 <__assert_fail@plt>
   160e4:	ldr	r3, [pc, #24]	; 16104 <flatcc_builder_create_vector@@Base+0x16c>
   160e8:	movw	r2, #651	; 0x28b
   160ec:	movw	r1, #35124	; 0x8934
   160f0:	movt	r1, #1
   160f4:	movw	r0, #35208	; 0x8988
   160f8:	movt	r0, #1
   160fc:	bl	11fd4 <__assert_fail@plt>
   16100:	andeq	r8, r1, r0, lsr #14
   16104:	andeq	r8, r1, r0, lsr r4

00016108 <flatcc_builder_end_vector@@Base>:
   16108:	strd	r4, [sp, #-12]!
   1610c:	str	lr, [sp, #8]
   16110:	sub	sp, sp, #12
   16114:	ldr	r1, [r0, #32]
   16118:	ldrh	r3, [r1, #14]
   1611c:	cmp	r3, #4
   16120:	bne	16164 <flatcc_builder_end_vector@@Base+0x5c>
   16124:	mov	r4, r0
   16128:	ldr	r3, [r1, #16]
   1612c:	ldr	r2, [r1, #20]
   16130:	ldr	r1, [r1, #24]
   16134:	str	r1, [sp, #4]
   16138:	ldrh	r1, [r0, #130]	; 0x82
   1613c:	str	r1, [sp]
   16140:	ldr	r1, [r0, #16]
   16144:	bl	15f98 <flatcc_builder_create_vector@@Base>
   16148:	subs	r5, r0, #0
   1614c:	bne	16180 <flatcc_builder_end_vector@@Base+0x78>
   16150:	mov	r0, r5
   16154:	add	sp, sp, #12
   16158:	ldrd	r4, [sp]
   1615c:	add	sp, sp, #8
   16160:	pop	{pc}		; (ldr pc, [sp], #4)
   16164:	ldr	r3, [pc, #148]	; 16200 <flatcc_builder_end_vector@@Base+0xf8>
   16168:	movw	r2, #1400	; 0x578
   1616c:	movw	r1, #35124	; 0x8934
   16170:	movt	r1, #1
   16174:	movw	r0, #35436	; 0x8a6c
   16178:	movt	r0, #1
   1617c:	bl	11fd4 <__assert_fail@plt>
   16180:	ldr	r2, [r4, #20]
   16184:	mov	r1, #0
   16188:	ldr	r0, [r4, #16]
   1618c:	bl	11fb0 <memset@plt>
   16190:	ldr	r2, [r4, #32]
   16194:	ldr	r3, [r2, #8]
   16198:	str	r3, [r4, #20]
   1619c:	ldr	r0, [r2]
   161a0:	str	r0, [r4, #28]
   161a4:	ldr	r1, [r2, #4]
   161a8:	ldr	r3, [r4, #60]	; 0x3c
   161ac:	add	r3, r3, r0
   161b0:	str	r3, [r4, #16]
   161b4:	ldr	r3, [r4, #64]	; 0x40
   161b8:	sub	r3, r3, r0
   161bc:	cmp	r3, r1
   161c0:	movcs	r3, r1
   161c4:	str	r3, [r4, #24]
   161c8:	str	r1, [r2, #4]
   161cc:	ldrh	r3, [r4, #130]	; 0x82
   161d0:	ldrh	r2, [r4, #128]	; 0x80
   161d4:	cmp	r2, r3
   161d8:	strhcc	r3, [r4, #128]	; 0x80
   161dc:	ldr	r3, [r4, #32]
   161e0:	ldrh	r2, [r3, #12]
   161e4:	strh	r2, [r4, #130]	; 0x82
   161e8:	sub	r3, r3, #36	; 0x24
   161ec:	str	r3, [r4, #32]
   161f0:	ldr	r3, [r4, #156]	; 0x9c
   161f4:	sub	r3, r3, #1
   161f8:	str	r3, [r4, #156]	; 0x9c
   161fc:	b	16150 <flatcc_builder_end_vector@@Base+0x48>
   16200:	andeq	r8, r1, r0, asr #14

00016204 <flatcc_builder_vector_count@@Base>:
   16204:	ldr	r3, [r0, #32]
   16208:	ldr	r0, [r3, #20]
   1620c:	bx	lr

00016210 <flatcc_builder_vector_edit@@Base>:
   16210:	ldr	r0, [r0, #16]
   16214:	bx	lr

00016218 <flatcc_builder_create_offset_vector_direct@@Base>:
   16218:	str	r4, [sp, #-8]!
   1621c:	str	lr, [sp, #4]
   16220:	mov	r3, #0
   16224:	bl	13674 <flatcc_builder_default_alloc@@Base+0x3b8>
   16228:	ldr	r4, [sp]
   1622c:	add	sp, sp, #4
   16230:	pop	{pc}		; (ldr pc, [sp], #4)

00016234 <flatcc_builder_end_offset_vector@@Base>:
   16234:	strd	r4, [sp, #-16]!
   16238:	str	r6, [sp, #8]
   1623c:	str	lr, [sp, #12]
   16240:	ldr	r3, [r0, #32]
   16244:	ldrh	r2, [r3, #14]
   16248:	cmp	r2, #5
   1624c:	bne	1627c <flatcc_builder_end_offset_vector@@Base+0x48>
   16250:	mov	r4, r0
   16254:	ldr	r2, [r3, #20]
   16258:	ldr	r1, [r0, #16]
   1625c:	bl	16218 <flatcc_builder_create_offset_vector_direct@@Base>
   16260:	subs	r5, r0, #0
   16264:	bne	16298 <flatcc_builder_end_offset_vector@@Base+0x64>
   16268:	mov	r0, r5
   1626c:	ldrd	r4, [sp]
   16270:	ldr	r6, [sp, #8]
   16274:	add	sp, sp, #12
   16278:	pop	{pc}		; (ldr pc, [sp], #4)
   1627c:	ldr	r3, [pc, #148]	; 16318 <flatcc_builder_end_offset_vector@@Base+0xe4>
   16280:	movw	r2, #1480	; 0x5c8
   16284:	movw	r1, #35124	; 0x8934
   16288:	movt	r1, #1
   1628c:	movw	r0, #35544	; 0x8ad8
   16290:	movt	r0, #1
   16294:	bl	11fd4 <__assert_fail@plt>
   16298:	ldr	r2, [r4, #20]
   1629c:	mov	r1, #0
   162a0:	ldr	r0, [r4, #16]
   162a4:	bl	11fb0 <memset@plt>
   162a8:	ldr	r2, [r4, #32]
   162ac:	ldr	r3, [r2, #8]
   162b0:	str	r3, [r4, #20]
   162b4:	ldr	r0, [r2]
   162b8:	str	r0, [r4, #28]
   162bc:	ldr	r1, [r2, #4]
   162c0:	ldr	r3, [r4, #60]	; 0x3c
   162c4:	add	r3, r3, r0
   162c8:	str	r3, [r4, #16]
   162cc:	ldr	r3, [r4, #64]	; 0x40
   162d0:	sub	r3, r3, r0
   162d4:	cmp	r3, r1
   162d8:	movcs	r3, r1
   162dc:	str	r3, [r4, #24]
   162e0:	str	r1, [r2, #4]
   162e4:	ldrh	r3, [r4, #130]	; 0x82
   162e8:	ldrh	r2, [r4, #128]	; 0x80
   162ec:	cmp	r2, r3
   162f0:	strhcc	r3, [r4, #128]	; 0x80
   162f4:	ldr	r3, [r4, #32]
   162f8:	ldrh	r2, [r3, #12]
   162fc:	strh	r2, [r4, #130]	; 0x82
   16300:	sub	r3, r3, #36	; 0x24
   16304:	str	r3, [r4, #32]
   16308:	ldr	r3, [r4, #156]	; 0x9c
   1630c:	sub	r3, r3, #1
   16310:	str	r3, [r4, #156]	; 0x9c
   16314:	b	16268 <flatcc_builder_end_offset_vector@@Base+0x34>
   16318:	andeq	r8, r1, ip, asr r7

0001631c <flatcc_builder_create_offset_vector@@Base>:
   1631c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16320:	strd	r6, [sp, #8]
   16324:	str	r8, [sp, #16]
   16328:	str	lr, [sp, #20]
   1632c:	mov	r5, r0
   16330:	mov	r7, r1
   16334:	mov	r6, r2
   16338:	bl	150a4 <flatcc_builder_start_offset_vector@@Base>
   1633c:	subs	r4, r0, #0
   16340:	movne	r4, #0
   16344:	beq	16360 <flatcc_builder_create_offset_vector@@Base+0x44>
   16348:	mov	r0, r4
   1634c:	ldrd	r4, [sp]
   16350:	ldrd	r6, [sp, #8]
   16354:	ldr	r8, [sp, #16]
   16358:	add	sp, sp, #20
   1635c:	pop	{pc}		; (ldr pc, [sp], #4)
   16360:	mov	r1, r6
   16364:	mov	r0, r5
   16368:	bl	149a8 <flatcc_builder_extend_offset_vector@@Base>
   1636c:	cmp	r0, #0
   16370:	beq	16348 <flatcc_builder_create_offset_vector@@Base+0x2c>
   16374:	lsl	r2, r6, #2
   16378:	mov	r1, r7
   1637c:	bl	11f44 <memcpy@plt>
   16380:	mov	r0, r5
   16384:	bl	16234 <flatcc_builder_end_offset_vector@@Base>
   16388:	mov	r4, r0
   1638c:	b	16348 <flatcc_builder_create_offset_vector@@Base+0x2c>

00016390 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   16390:	strd	r4, [sp, #-16]!
   16394:	str	r6, [sp, #8]
   16398:	str	lr, [sp, #12]
   1639c:	mov	r4, r0
   163a0:	ldr	r2, [r0, #32]
   163a4:	ldrh	r0, [r2, #14]
   163a8:	cmp	r0, #5
   163ac:	bne	163e0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x50>
   163b0:	mov	r3, r1
   163b4:	ldr	r2, [r2, #20]
   163b8:	ldr	r1, [r4, #16]
   163bc:	mov	r0, r4
   163c0:	bl	13674 <flatcc_builder_default_alloc@@Base+0x3b8>
   163c4:	subs	r5, r0, #0
   163c8:	bne	163fc <flatcc_builder_end_offset_vector_for_unions@@Base+0x6c>
   163cc:	mov	r0, r5
   163d0:	ldrd	r4, [sp]
   163d4:	ldr	r6, [sp, #8]
   163d8:	add	sp, sp, #12
   163dc:	pop	{pc}		; (ldr pc, [sp], #4)
   163e0:	ldr	r3, [pc, #148]	; 1647c <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   163e4:	movw	r2, #1493	; 0x5d5
   163e8:	movw	r1, #35124	; 0x8934
   163ec:	movt	r1, #1
   163f0:	movw	r0, #35544	; 0x8ad8
   163f4:	movt	r0, #1
   163f8:	bl	11fd4 <__assert_fail@plt>
   163fc:	ldr	r2, [r4, #20]
   16400:	mov	r1, #0
   16404:	ldr	r0, [r4, #16]
   16408:	bl	11fb0 <memset@plt>
   1640c:	ldr	r2, [r4, #32]
   16410:	ldr	r3, [r2, #8]
   16414:	str	r3, [r4, #20]
   16418:	ldr	r0, [r2]
   1641c:	str	r0, [r4, #28]
   16420:	ldr	r1, [r2, #4]
   16424:	ldr	r3, [r4, #60]	; 0x3c
   16428:	add	r3, r3, r0
   1642c:	str	r3, [r4, #16]
   16430:	ldr	r3, [r4, #64]	; 0x40
   16434:	sub	r3, r3, r0
   16438:	cmp	r3, r1
   1643c:	movcs	r3, r1
   16440:	str	r3, [r4, #24]
   16444:	str	r1, [r2, #4]
   16448:	ldrh	r3, [r4, #130]	; 0x82
   1644c:	ldrh	r2, [r4, #128]	; 0x80
   16450:	cmp	r2, r3
   16454:	strhcc	r3, [r4, #128]	; 0x80
   16458:	ldr	r3, [r4, #32]
   1645c:	ldrh	r2, [r3, #12]
   16460:	strh	r2, [r4, #130]	; 0x82
   16464:	sub	r3, r3, #36	; 0x24
   16468:	str	r3, [r4, #32]
   1646c:	ldr	r3, [r4, #156]	; 0x9c
   16470:	sub	r3, r3, #1
   16474:	str	r3, [r4, #156]	; 0x9c
   16478:	b	163cc <flatcc_builder_end_offset_vector_for_unions@@Base+0x3c>
   1647c:	andeq	r8, r1, r0, lsl #15

00016480 <flatcc_builder_offset_vector_edit@@Base>:
   16480:	ldr	r0, [r0, #16]
   16484:	bx	lr

00016488 <flatcc_builder_offset_vector_count@@Base>:
   16488:	ldr	r3, [r0, #32]
   1648c:	ldr	r0, [r3, #20]
   16490:	bx	lr

00016494 <flatcc_builder_create_union_vector_direct@@Base>:
   16494:	strd	r4, [sp, #-20]!	; 0xffffffec
   16498:	strd	r6, [sp, #8]
   1649c:	str	lr, [sp, #16]
   164a0:	sub	sp, sp, #12
   164a4:	mov	r4, r0
   164a8:	mov	r5, r1
   164ac:	mov	r6, r2
   164b0:	mov	r1, r3
   164b4:	mov	r3, r2
   164b8:	ldr	r2, [sp, #32]
   164bc:	mov	r0, r5
   164c0:	bl	13674 <flatcc_builder_default_alloc@@Base+0x3b8>
   164c4:	subs	r7, r0, #0
   164c8:	bne	164f0 <flatcc_builder_create_union_vector_direct@@Base+0x5c>
   164cc:	mov	r3, #0
   164d0:	str	r3, [r4]
   164d4:	str	r3, [r4, #4]
   164d8:	mov	r0, r4
   164dc:	add	sp, sp, #12
   164e0:	ldrd	r4, [sp]
   164e4:	ldrd	r6, [sp, #8]
   164e8:	add	sp, sp, #16
   164ec:	pop	{pc}		; (ldr pc, [sp], #4)
   164f0:	mvn	r3, #0
   164f4:	str	r3, [sp, #4]
   164f8:	mov	r3, #1
   164fc:	str	r3, [sp]
   16500:	ldr	r2, [sp, #32]
   16504:	mov	r1, r6
   16508:	mov	r0, r5
   1650c:	bl	15f98 <flatcc_builder_create_vector@@Base>
   16510:	cmp	r0, #0
   16514:	moveq	r3, #0
   16518:	streq	r3, [r4]
   1651c:	strne	r0, [r4]
   16520:	str	r7, [r4, #4]
   16524:	b	164d8 <flatcc_builder_create_union_vector_direct@@Base+0x44>

00016528 <flatcc_builder_create_union_vector@@Base>:
   16528:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1652c:	strd	r6, [sp, #8]
   16530:	str	r8, [sp, #16]
   16534:	str	lr, [sp, #20]
   16538:	sub	sp, sp, #16
   1653c:	mov	r5, r0
   16540:	mov	r4, r1
   16544:	mov	r7, r2
   16548:	mov	r6, r3
   1654c:	mov	r0, r1
   16550:	bl	150a4 <flatcc_builder_start_offset_vector@@Base>
   16554:	cmp	r0, #0
   16558:	beq	16584 <flatcc_builder_create_union_vector@@Base+0x5c>
   1655c:	mov	r3, #0
   16560:	str	r3, [r5]
   16564:	str	r3, [r5, #4]
   16568:	mov	r0, r5
   1656c:	add	sp, sp, #16
   16570:	ldrd	r4, [sp]
   16574:	ldrd	r6, [sp, #8]
   16578:	ldr	r8, [sp, #16]
   1657c:	add	sp, sp, #20
   16580:	pop	{pc}		; (ldr pc, [sp], #4)
   16584:	mov	r1, r6
   16588:	mov	r0, r4
   1658c:	bl	149a8 <flatcc_builder_extend_offset_vector@@Base>
   16590:	cmp	r0, #0
   16594:	moveq	r3, #0
   16598:	streq	r3, [r5]
   1659c:	streq	r3, [r5, #4]
   165a0:	beq	16568 <flatcc_builder_create_union_vector@@Base+0x40>
   165a4:	ldr	r8, [r4, #20]
   165a8:	add	r1, r6, r8
   165ac:	str	r1, [r4, #20]
   165b0:	ldr	r3, [r4, #24]
   165b4:	cmp	r1, r3
   165b8:	bcs	1669c <flatcc_builder_create_union_vector@@Base+0x174>
   165bc:	ldr	r3, [r4, #16]
   165c0:	adds	r2, r3, r8
   165c4:	beq	166b4 <flatcc_builder_create_union_vector@@Base+0x18c>
   165c8:	cmp	r6, #0
   165cc:	beq	165fc <flatcc_builder_create_union_vector@@Base+0xd4>
   165d0:	mov	r1, r7
   165d4:	sub	ip, r2, #1
   165d8:	sub	r0, r3, #4
   165dc:	add	r7, r7, r6, lsl #3
   165e0:	ldrb	lr, [r1]
   165e4:	strb	lr, [ip, #1]!
   165e8:	ldr	lr, [r1, #4]
   165ec:	str	lr, [r0, #4]!
   165f0:	add	r1, r1, #8
   165f4:	cmp	r1, r7
   165f8:	bne	165e0 <flatcc_builder_create_union_vector@@Base+0xb8>
   165fc:	str	r6, [sp]
   16600:	mov	r1, r4
   16604:	add	r0, sp, #8
   16608:	bl	16494 <flatcc_builder_create_union_vector_direct@@Base>
   1660c:	ldr	r7, [sp, #8]
   16610:	ldr	r6, [sp, #12]
   16614:	ldr	r2, [r4, #20]
   16618:	mov	r1, #0
   1661c:	ldr	r0, [r4, #16]
   16620:	bl	11fb0 <memset@plt>
   16624:	ldr	r2, [r4, #32]
   16628:	ldr	r3, [r2, #8]
   1662c:	str	r3, [r4, #20]
   16630:	ldr	r0, [r2]
   16634:	str	r0, [r4, #28]
   16638:	ldr	r1, [r2, #4]
   1663c:	ldr	r3, [r4, #60]	; 0x3c
   16640:	add	r3, r3, r0
   16644:	str	r3, [r4, #16]
   16648:	ldr	r3, [r4, #64]	; 0x40
   1664c:	sub	r3, r3, r0
   16650:	cmp	r3, r1
   16654:	movcs	r3, r1
   16658:	str	r3, [r4, #24]
   1665c:	str	r1, [r2, #4]
   16660:	ldrh	r3, [r4, #130]	; 0x82
   16664:	ldrh	r2, [r4, #128]	; 0x80
   16668:	cmp	r2, r3
   1666c:	strhcc	r3, [r4, #128]	; 0x80
   16670:	ldr	r3, [r4, #32]
   16674:	ldrh	r2, [r3, #12]
   16678:	strh	r2, [r4, #130]	; 0x82
   1667c:	sub	r3, r3, #36	; 0x24
   16680:	str	r3, [r4, #32]
   16684:	ldr	r3, [r4, #156]	; 0x9c
   16688:	sub	r3, r3, #1
   1668c:	str	r3, [r4, #156]	; 0x9c
   16690:	str	r7, [r5]
   16694:	str	r6, [r5, #4]
   16698:	b	16568 <flatcc_builder_create_union_vector@@Base+0x40>
   1669c:	mvn	r2, #3
   166a0:	add	r1, r1, #1
   166a4:	mov	r0, r4
   166a8:	bl	13234 <main@@Base+0x124>
   166ac:	cmp	r0, #0
   166b0:	beq	165bc <flatcc_builder_create_union_vector@@Base+0x94>
   166b4:	mov	r3, #0
   166b8:	str	r3, [r5]
   166bc:	str	r3, [r5, #4]
   166c0:	b	16568 <flatcc_builder_create_union_vector@@Base+0x40>

000166c4 <flatcc_builder_start_union_vector@@Base>:
   166c4:	str	r4, [sp, #-8]!
   166c8:	str	lr, [sp, #4]
   166cc:	mov	r4, r0
   166d0:	mov	r1, #4
   166d4:	bl	13508 <flatcc_builder_default_alloc@@Base+0x24c>
   166d8:	cmp	r0, #0
   166dc:	bne	16740 <flatcc_builder_start_union_vector@@Base+0x7c>
   166e0:	ldr	r3, [r4, #32]
   166e4:	mov	r2, #8
   166e8:	str	r2, [r3, #16]
   166ec:	ldr	r3, [r4, #32]
   166f0:	mov	r2, #0
   166f4:	str	r2, [r3, #20]
   166f8:	ldr	r3, [r4, #32]
   166fc:	mov	r2, #7
   16700:	strh	r2, [r3, #14]
   16704:	ldr	r1, [r4, #28]
   16708:	ldr	r2, [r4, #60]	; 0x3c
   1670c:	add	r2, r2, r1
   16710:	str	r2, [r4, #16]
   16714:	ldr	r3, [r4, #64]	; 0x40
   16718:	sub	r3, r3, r1
   1671c:	cmn	r3, #4
   16720:	mvnhi	r3, #3
   16724:	str	r3, [r4, #24]
   16728:	ldr	r3, [r4, #32]
   1672c:	mvn	r2, #3
   16730:	str	r2, [r3, #4]
   16734:	ldr	r4, [sp]
   16738:	add	sp, sp, #4
   1673c:	pop	{pc}		; (ldr pc, [sp], #4)
   16740:	mvn	r0, #0
   16744:	b	16734 <flatcc_builder_start_union_vector@@Base+0x70>

00016748 <flatcc_builder_end_union_vector@@Base>:
   16748:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1674c:	strd	r6, [sp, #8]
   16750:	str	r8, [sp, #16]
   16754:	str	lr, [sp, #20]
   16758:	sub	sp, sp, #16
   1675c:	ldr	r3, [r1, #32]
   16760:	ldrh	r2, [r3, #14]
   16764:	cmp	r2, #7
   16768:	bne	16890 <flatcc_builder_end_union_vector@@Base+0x148>
   1676c:	mov	r6, r0
   16770:	mov	r4, r1
   16774:	ldr	r5, [r3, #20]
   16778:	ldr	r8, [r1, #20]
   1677c:	add	r1, r5, r5, lsl #2
   16780:	add	r1, r1, r8
   16784:	str	r1, [r4, #20]
   16788:	ldr	r3, [r4, #24]
   1678c:	cmp	r1, r3
   16790:	bcs	168ac <flatcc_builder_end_union_vector@@Base+0x164>
   16794:	ldr	r7, [r4, #16]
   16798:	adds	r3, r7, r8
   1679c:	beq	168c4 <flatcc_builder_end_union_vector@@Base+0x17c>
   167a0:	add	r2, r3, r5, lsl #2
   167a4:	cmp	r5, #0
   167a8:	beq	167d8 <flatcc_builder_end_union_vector@@Base+0x90>
   167ac:	mov	r1, r7
   167b0:	sub	ip, r2, #1
   167b4:	sub	r0, r3, #4
   167b8:	add	r7, r7, r5, lsl #3
   167bc:	ldrb	lr, [r1]
   167c0:	strb	lr, [ip, #1]!
   167c4:	ldr	lr, [r1, #4]
   167c8:	str	lr, [r0, #4]!
   167cc:	add	r1, r1, #8
   167d0:	cmp	r1, r7
   167d4:	bne	167bc <flatcc_builder_end_union_vector@@Base+0x74>
   167d8:	str	r5, [sp]
   167dc:	mov	r1, r4
   167e0:	add	r0, sp, #8
   167e4:	bl	16494 <flatcc_builder_create_union_vector_direct@@Base>
   167e8:	ldr	r7, [sp, #8]
   167ec:	ldr	r5, [sp, #12]
   167f0:	ldr	r2, [r4, #20]
   167f4:	mov	r1, #0
   167f8:	ldr	r0, [r4, #16]
   167fc:	bl	11fb0 <memset@plt>
   16800:	ldr	r2, [r4, #32]
   16804:	ldr	r3, [r2, #8]
   16808:	str	r3, [r4, #20]
   1680c:	ldr	r0, [r2]
   16810:	str	r0, [r4, #28]
   16814:	ldr	r1, [r2, #4]
   16818:	ldr	r3, [r4, #60]	; 0x3c
   1681c:	add	r3, r3, r0
   16820:	str	r3, [r4, #16]
   16824:	ldr	r3, [r4, #64]	; 0x40
   16828:	sub	r3, r3, r0
   1682c:	cmp	r3, r1
   16830:	movcs	r3, r1
   16834:	str	r3, [r4, #24]
   16838:	str	r1, [r2, #4]
   1683c:	ldrh	r3, [r4, #130]	; 0x82
   16840:	ldrh	r2, [r4, #128]	; 0x80
   16844:	cmp	r2, r3
   16848:	strhcc	r3, [r4, #128]	; 0x80
   1684c:	ldr	r3, [r4, #32]
   16850:	ldrh	r2, [r3, #12]
   16854:	strh	r2, [r4, #130]	; 0x82
   16858:	sub	r3, r3, #36	; 0x24
   1685c:	str	r3, [r4, #32]
   16860:	ldr	r3, [r4, #156]	; 0x9c
   16864:	sub	r3, r3, #1
   16868:	str	r3, [r4, #156]	; 0x9c
   1686c:	str	r7, [r6]
   16870:	str	r5, [r6, #4]
   16874:	mov	r0, r6
   16878:	add	sp, sp, #16
   1687c:	ldrd	r4, [sp]
   16880:	ldrd	r6, [sp, #8]
   16884:	ldr	r8, [sp, #16]
   16888:	add	sp, sp, #20
   1688c:	pop	{pc}		; (ldr pc, [sp], #4)
   16890:	ldr	r3, [pc, #60]	; 168d4 <flatcc_builder_end_union_vector@@Base+0x18c>
   16894:	movw	r2, #1617	; 0x651
   16898:	movw	r1, #35124	; 0x8934
   1689c:	movt	r1, #1
   168a0:	movw	r0, #35896	; 0x8c38
   168a4:	movt	r0, #1
   168a8:	bl	11fd4 <__assert_fail@plt>
   168ac:	mvn	r2, #3
   168b0:	add	r1, r1, #1
   168b4:	mov	r0, r4
   168b8:	bl	13234 <main@@Base+0x124>
   168bc:	cmp	r0, #0
   168c0:	beq	16794 <flatcc_builder_end_union_vector@@Base+0x4c>
   168c4:	mov	r3, #0
   168c8:	str	r3, [r6]
   168cc:	str	r3, [r6, #4]
   168d0:	b	16874 <flatcc_builder_end_union_vector@@Base+0x12c>
   168d4:	andeq	r8, r1, ip, lsr #15

000168d8 <flatcc_builder_union_vector_edit@@Base>:
   168d8:	ldr	r0, [r0, #16]
   168dc:	bx	lr

000168e0 <flatcc_builder_union_vector_count@@Base>:
   168e0:	ldr	r3, [r0, #32]
   168e4:	ldr	r0, [r3, #20]
   168e8:	bx	lr

000168ec <flatcc_builder_extend_union_vector@@Base>:
   168ec:	strd	r4, [sp, #-16]!
   168f0:	str	r6, [sp, #8]
   168f4:	str	lr, [sp, #12]
   168f8:	mov	r4, r0
   168fc:	ldr	r2, [r0, #32]
   16900:	ldr	r3, [r2, #20]
   16904:	adds	r3, r1, r3
   16908:	movcs	ip, #1
   1690c:	movcc	ip, #0
   16910:	cmn	r3, #-536870911	; 0xe0000001
   16914:	movls	r0, #0
   16918:	movhi	r0, #1
   1691c:	orrs	r0, ip, r0
   16920:	bne	16958 <flatcc_builder_extend_union_vector@@Base+0x6c>
   16924:	str	r3, [r2, #20]
   16928:	ldr	r5, [r4, #20]
   1692c:	add	r1, r5, r1, lsl #3
   16930:	str	r1, [r4, #20]
   16934:	ldr	r3, [r4, #24]
   16938:	cmp	r1, r3
   1693c:	bcs	16974 <flatcc_builder_extend_union_vector@@Base+0x88>
   16940:	ldr	r0, [r4, #16]
   16944:	add	r0, r0, r5
   16948:	ldrd	r4, [sp]
   1694c:	ldr	r6, [sp, #8]
   16950:	add	sp, sp, #12
   16954:	pop	{pc}		; (ldr pc, [sp], #4)
   16958:	ldr	r3, [pc, #52]	; 16994 <flatcc_builder_extend_union_vector@@Base+0xa8>
   1695c:	mov	r2, #892	; 0x37c
   16960:	movw	r1, #35124	; 0x8934
   16964:	movt	r1, #1
   16968:	movw	r0, #35408	; 0x8a50
   1696c:	movt	r0, #1
   16970:	bl	11fd4 <__assert_fail@plt>
   16974:	mvn	r2, #3
   16978:	add	r1, r1, #1
   1697c:	mov	r0, r4
   16980:	bl	13234 <main@@Base+0x124>
   16984:	cmp	r0, #0
   16988:	movne	r0, #0
   1698c:	beq	16940 <flatcc_builder_extend_union_vector@@Base+0x54>
   16990:	b	16948 <flatcc_builder_extend_union_vector@@Base+0x5c>
   16994:	andeq	r8, r1, r4, lsl r5

00016998 <flatcc_builder_truncate_union_vector@@Base>:
   16998:	str	r4, [sp, #-8]!
   1699c:	str	lr, [sp, #4]
   169a0:	ldr	ip, [r0, #32]
   169a4:	ldrh	r3, [ip, #14]
   169a8:	cmp	r3, #7
   169ac:	bne	169fc <flatcc_builder_truncate_union_vector@@Base+0x64>
   169b0:	ldr	r3, [ip, #20]
   169b4:	cmp	r3, r1
   169b8:	bcc	16a18 <flatcc_builder_truncate_union_vector@@Base+0x80>
   169bc:	sub	r3, r3, r1
   169c0:	str	r3, [ip, #20]
   169c4:	ldr	r3, [r0, #32]
   169c8:	ldr	r2, [r3, #16]
   169cc:	mul	r2, r2, r1
   169d0:	ldr	r3, [r0, #20]
   169d4:	sub	r3, r3, r2
   169d8:	str	r3, [r0, #20]
   169dc:	ldr	r0, [r0, #16]
   169e0:	mov	r1, #0
   169e4:	add	r0, r0, r3
   169e8:	bl	11fb0 <memset@plt>
   169ec:	mov	r0, #0
   169f0:	ldr	r4, [sp]
   169f4:	add	sp, sp, #4
   169f8:	pop	{pc}		; (ldr pc, [sp], #4)
   169fc:	ldr	r3, [pc, #48]	; 16a34 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   16a00:	movw	r2, #1665	; 0x681
   16a04:	movw	r1, #35124	; 0x8934
   16a08:	movt	r1, #1
   16a0c:	movw	r0, #35896	; 0x8c38
   16a10:	movt	r0, #1
   16a14:	bl	11fd4 <__assert_fail@plt>
   16a18:	ldr	r3, [pc, #20]	; 16a34 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   16a1c:	movw	r2, #1666	; 0x682
   16a20:	movw	r1, #35124	; 0x8934
   16a24:	movt	r1, #1
   16a28:	movw	r0, #35676	; 0x8b5c
   16a2c:	movt	r0, #1
   16a30:	bl	11fd4 <__assert_fail@plt>
   16a34:	andeq	r8, r1, ip, asr #15

00016a38 <flatcc_builder_union_vector_push@@Base>:
   16a38:	strd	r4, [sp, #-20]!	; 0xffffffec
   16a3c:	strd	r6, [sp, #8]
   16a40:	str	lr, [sp, #16]
   16a44:	sub	sp, sp, #12
   16a48:	add	r3, sp, #8
   16a4c:	stmdb	r3, {r1, r2}
   16a50:	ldr	r2, [r0, #32]
   16a54:	ldrh	r3, [r2, #14]
   16a58:	cmp	r3, #7
   16a5c:	bne	16ab8 <flatcc_builder_union_vector_push@@Base+0x80>
   16a60:	mov	r4, r0
   16a64:	ldr	r3, [r2, #20]
   16a68:	cmn	r3, #-536870911	; 0xe0000001
   16a6c:	moveq	r0, #0
   16a70:	beq	16aa4 <flatcc_builder_union_vector_push@@Base+0x6c>
   16a74:	add	r3, r3, #1
   16a78:	str	r3, [r2, #20]
   16a7c:	ldr	r5, [r4, #20]
   16a80:	add	r3, r5, #8
   16a84:	str	r3, [r4, #20]
   16a88:	ldr	r2, [r4, #24]
   16a8c:	cmp	r3, r2
   16a90:	bcs	16ad4 <flatcc_builder_union_vector_push@@Base+0x9c>
   16a94:	ldr	r3, [r4, #16]
   16a98:	adds	r0, r3, r5
   16a9c:	ldrdne	r6, [sp]
   16aa0:	strdne	r6, [r3, r5]
   16aa4:	add	sp, sp, #12
   16aa8:	ldrd	r4, [sp]
   16aac:	ldrd	r6, [sp, #8]
   16ab0:	add	sp, sp, #16
   16ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ab8:	ldr	r3, [pc, #52]	; 16af4 <flatcc_builder_union_vector_push@@Base+0xbc>
   16abc:	movw	r2, #1677	; 0x68d
   16ac0:	movw	r1, #35124	; 0x8934
   16ac4:	movt	r1, #1
   16ac8:	movw	r0, #35896	; 0x8c38
   16acc:	movt	r0, #1
   16ad0:	bl	11fd4 <__assert_fail@plt>
   16ad4:	mvn	r2, #3
   16ad8:	add	r1, r5, #9
   16adc:	mov	r0, r4
   16ae0:	bl	13234 <main@@Base+0x124>
   16ae4:	cmp	r0, #0
   16ae8:	movne	r0, #0
   16aec:	beq	16a94 <flatcc_builder_union_vector_push@@Base+0x5c>
   16af0:	b	16aa4 <flatcc_builder_union_vector_push@@Base+0x6c>
   16af4:	strdeq	r8, [r1], -r4

00016af8 <flatcc_builder_append_union_vector@@Base>:
   16af8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16afc:	strd	r6, [sp, #8]
   16b00:	str	r8, [sp, #16]
   16b04:	str	lr, [sp, #20]
   16b08:	mov	r6, r1
   16b0c:	ldr	r1, [r0, #32]
   16b10:	ldrh	r3, [r1, #14]
   16b14:	cmp	r3, #7
   16b18:	bne	16b98 <flatcc_builder_append_union_vector@@Base+0xa0>
   16b1c:	mov	r5, r0
   16b20:	ldr	r3, [r1, #20]
   16b24:	adds	r3, r2, r3
   16b28:	movcs	ip, #1
   16b2c:	movcc	ip, #0
   16b30:	cmn	r3, #-536870911	; 0xe0000001
   16b34:	movls	r0, #0
   16b38:	movhi	r0, #1
   16b3c:	orrs	r0, ip, r0
   16b40:	bne	16bb4 <flatcc_builder_append_union_vector@@Base+0xbc>
   16b44:	str	r3, [r1, #20]
   16b48:	lsl	r4, r2, #3
   16b4c:	ldr	r7, [r5, #20]
   16b50:	add	r1, r4, r7
   16b54:	str	r1, [r5, #20]
   16b58:	ldr	r3, [r5, #24]
   16b5c:	cmp	r1, r3
   16b60:	bcs	16bd0 <flatcc_builder_append_union_vector@@Base+0xd8>
   16b64:	ldr	r5, [r5, #16]
   16b68:	adds	r5, r5, r7
   16b6c:	beq	16b80 <flatcc_builder_append_union_vector@@Base+0x88>
   16b70:	mov	r2, r4
   16b74:	mov	r1, r6
   16b78:	mov	r0, r5
   16b7c:	bl	11f44 <memcpy@plt>
   16b80:	mov	r0, r5
   16b84:	ldrd	r4, [sp]
   16b88:	ldrd	r6, [sp, #8]
   16b8c:	ldr	r8, [sp, #16]
   16b90:	add	sp, sp, #20
   16b94:	pop	{pc}		; (ldr pc, [sp], #4)
   16b98:	ldr	r3, [pc, #80]	; 16bf0 <flatcc_builder_append_union_vector@@Base+0xf8>
   16b9c:	movw	r2, #1692	; 0x69c
   16ba0:	movw	r1, #35124	; 0x8934
   16ba4:	movt	r1, #1
   16ba8:	movw	r0, #35896	; 0x8c38
   16bac:	movt	r0, #1
   16bb0:	bl	11fd4 <__assert_fail@plt>
   16bb4:	ldr	r3, [pc, #56]	; 16bf4 <flatcc_builder_append_union_vector@@Base+0xfc>
   16bb8:	mov	r2, #892	; 0x37c
   16bbc:	movw	r1, #35124	; 0x8934
   16bc0:	movt	r1, #1
   16bc4:	movw	r0, #35408	; 0x8a50
   16bc8:	movt	r0, #1
   16bcc:	bl	11fd4 <__assert_fail@plt>
   16bd0:	mvn	r2, #3
   16bd4:	add	r1, r1, #1
   16bd8:	mov	r0, r5
   16bdc:	bl	13234 <main@@Base+0x124>
   16be0:	cmp	r0, #0
   16be4:	movne	r5, #0
   16be8:	beq	16b64 <flatcc_builder_append_union_vector@@Base+0x6c>
   16bec:	b	16b80 <flatcc_builder_append_union_vector@@Base+0x88>
   16bf0:	andeq	r8, r1, r8, lsl r8
   16bf4:	andeq	r8, r1, r4, lsl r5

00016bf8 <flatcc_builder_create_string@@Base>:
   16bf8:	strd	r4, [sp, #-16]!
   16bfc:	str	r6, [sp, #8]
   16c00:	str	lr, [sp, #12]
   16c04:	sub	sp, sp, #88	; 0x58
   16c08:	mov	r4, r0
   16c0c:	str	r2, [sp, #84]	; 0x54
   16c10:	ldr	r0, [r0, #136]	; 0x88
   16c14:	sub	r3, r0, r2
   16c18:	sub	r3, r3, #1
   16c1c:	and	r3, r3, #3
   16c20:	add	r3, r3, #1
   16c24:	mov	ip, #4
   16c28:	str	ip, [sp, #12]
   16c2c:	add	lr, sp, #84	; 0x54
   16c30:	str	lr, [sp, #20]
   16c34:	str	ip, [sp, #24]
   16c38:	mov	ip, #1
   16c3c:	str	ip, [sp, #16]
   16c40:	cmp	r2, #0
   16c44:	beq	16c60 <flatcc_builder_create_string@@Base+0x68>
   16c48:	add	ip, r2, #4
   16c4c:	str	ip, [sp, #12]
   16c50:	str	r1, [sp, #28]
   16c54:	str	r2, [sp, #32]
   16c58:	mov	r2, #2
   16c5c:	str	r2, [sp, #16]
   16c60:	ldr	r1, [sp, #12]
   16c64:	add	r1, r3, r1
   16c68:	str	r1, [sp, #12]
   16c6c:	ldr	r2, [sp, #16]
   16c70:	add	r2, r2, #1
   16c74:	add	ip, sp, #88	; 0x58
   16c78:	add	lr, ip, r2, lsl #3
   16c7c:	movw	ip, #33252	; 0x81e4
   16c80:	movt	ip, #1
   16c84:	str	ip, [lr, #-76]	; 0xffffffb4
   16c88:	str	r3, [lr, #-72]	; 0xffffffb8
   16c8c:	str	r2, [sp, #16]
   16c90:	sub	r5, r0, r1
   16c94:	cmp	r0, r5
   16c98:	ble	16cd8 <flatcc_builder_create_string@@Base+0xe0>
   16c9c:	str	r1, [sp]
   16ca0:	ldr	r6, [r4, #44]	; 0x2c
   16ca4:	mov	r3, r5
   16ca8:	add	r1, sp, #20
   16cac:	ldr	r0, [r4, #36]	; 0x24
   16cb0:	blx	r6
   16cb4:	cmp	r0, #0
   16cb8:	bne	16cf4 <flatcc_builder_create_string@@Base+0xfc>
   16cbc:	str	r5, [r4, #136]	; 0x88
   16cc0:	mov	r0, r5
   16cc4:	add	sp, sp, #88	; 0x58
   16cc8:	ldrd	r4, [sp]
   16ccc:	ldr	r6, [sp, #8]
   16cd0:	add	sp, sp, #12
   16cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   16cd8:	add	r3, ip, #588	; 0x24c
   16cdc:	movw	r2, #647	; 0x287
   16ce0:	movw	r1, #35124	; 0x8934
   16ce4:	movt	r1, #1
   16ce8:	movw	r0, #35208	; 0x8988
   16cec:	movt	r0, #1
   16cf0:	bl	11fd4 <__assert_fail@plt>
   16cf4:	ldr	r3, [pc, #20]	; 16d10 <flatcc_builder_create_string@@Base+0x118>
   16cf8:	movw	r2, #651	; 0x28b
   16cfc:	movw	r1, #35124	; 0x8934
   16d00:	movt	r1, #1
   16d04:	movw	r0, #35208	; 0x8988
   16d08:	movt	r0, #1
   16d0c:	bl	11fd4 <__assert_fail@plt>
   16d10:	andeq	r8, r1, r0, lsr r4

00016d14 <flatcc_builder_create_string_str@@Base>:
   16d14:	strd	r4, [sp, #-16]!
   16d18:	str	r6, [sp, #8]
   16d1c:	str	lr, [sp, #12]
   16d20:	mov	r5, r0
   16d24:	mov	r4, r1
   16d28:	mov	r0, r1
   16d2c:	bl	11f98 <strlen@plt>
   16d30:	mov	r2, r0
   16d34:	mov	r1, r4
   16d38:	mov	r0, r5
   16d3c:	bl	16bf8 <flatcc_builder_create_string@@Base>
   16d40:	ldrd	r4, [sp]
   16d44:	ldr	r6, [sp, #8]
   16d48:	add	sp, sp, #12
   16d4c:	pop	{pc}		; (ldr pc, [sp], #4)

00016d50 <flatcc_builder_create_string_strn@@Base>:
   16d50:	strd	r4, [sp, #-16]!
   16d54:	str	r6, [sp, #8]
   16d58:	str	lr, [sp, #12]
   16d5c:	mov	r6, r0
   16d60:	mov	r4, r1
   16d64:	mov	r5, r2
   16d68:	mov	r1, #0
   16d6c:	mov	r0, r4
   16d70:	bl	11fbc <memchr@plt>
   16d74:	cmp	r0, #0
   16d78:	subne	r5, r0, r4
   16d7c:	mov	r2, r5
   16d80:	mov	r1, r4
   16d84:	mov	r0, r6
   16d88:	bl	16bf8 <flatcc_builder_create_string@@Base>
   16d8c:	ldrd	r4, [sp]
   16d90:	ldr	r6, [sp, #8]
   16d94:	add	sp, sp, #12
   16d98:	pop	{pc}		; (ldr pc, [sp], #4)

00016d9c <flatcc_builder_end_string@@Base>:
   16d9c:	strd	r4, [sp, #-16]!
   16da0:	str	r6, [sp, #8]
   16da4:	str	lr, [sp, #12]
   16da8:	ldr	r3, [r0, #32]
   16dac:	ldrh	r2, [r3, #14]
   16db0:	cmp	r2, #6
   16db4:	bne	16df0 <flatcc_builder_end_string@@Base+0x54>
   16db8:	mov	r4, r0
   16dbc:	ldr	r2, [r0, #20]
   16dc0:	ldr	r3, [r3, #20]
   16dc4:	cmp	r3, r2
   16dc8:	bne	16e0c <flatcc_builder_end_string@@Base+0x70>
   16dcc:	ldr	r1, [r0, #16]
   16dd0:	bl	16bf8 <flatcc_builder_create_string@@Base>
   16dd4:	subs	r5, r0, #0
   16dd8:	bne	16e28 <flatcc_builder_end_string@@Base+0x8c>
   16ddc:	mov	r0, r5
   16de0:	ldrd	r4, [sp]
   16de4:	ldr	r6, [sp, #8]
   16de8:	add	sp, sp, #12
   16dec:	pop	{pc}		; (ldr pc, [sp], #4)
   16df0:	ldr	r3, [pc, #176]	; 16ea8 <flatcc_builder_end_string@@Base+0x10c>
   16df4:	movw	r2, #1732	; 0x6c4
   16df8:	movw	r1, #35124	; 0x8934
   16dfc:	movt	r1, #1
   16e00:	movw	r0, #35596	; 0x8b0c
   16e04:	movt	r0, #1
   16e08:	bl	11fd4 <__assert_fail@plt>
   16e0c:	ldr	r3, [pc, #148]	; 16ea8 <flatcc_builder_end_string@@Base+0x10c>
   16e10:	movw	r2, #1733	; 0x6c5
   16e14:	movw	r1, #35124	; 0x8934
   16e18:	movt	r1, #1
   16e1c:	movw	r0, #35948	; 0x8c6c
   16e20:	movt	r0, #1
   16e24:	bl	11fd4 <__assert_fail@plt>
   16e28:	ldr	r2, [r4, #20]
   16e2c:	mov	r1, #0
   16e30:	ldr	r0, [r4, #16]
   16e34:	bl	11fb0 <memset@plt>
   16e38:	ldr	r2, [r4, #32]
   16e3c:	ldr	r3, [r2, #8]
   16e40:	str	r3, [r4, #20]
   16e44:	ldr	r0, [r2]
   16e48:	str	r0, [r4, #28]
   16e4c:	ldr	r1, [r2, #4]
   16e50:	ldr	r3, [r4, #60]	; 0x3c
   16e54:	add	r3, r3, r0
   16e58:	str	r3, [r4, #16]
   16e5c:	ldr	r3, [r4, #64]	; 0x40
   16e60:	sub	r3, r3, r0
   16e64:	cmp	r3, r1
   16e68:	movcs	r3, r1
   16e6c:	str	r3, [r4, #24]
   16e70:	str	r1, [r2, #4]
   16e74:	ldrh	r3, [r4, #130]	; 0x82
   16e78:	ldrh	r2, [r4, #128]	; 0x80
   16e7c:	cmp	r2, r3
   16e80:	strhcc	r3, [r4, #128]	; 0x80
   16e84:	ldr	r3, [r4, #32]
   16e88:	ldrh	r2, [r3, #12]
   16e8c:	strh	r2, [r4, #130]	; 0x82
   16e90:	sub	r3, r3, #36	; 0x24
   16e94:	str	r3, [r4, #32]
   16e98:	ldr	r3, [r4, #156]	; 0x9c
   16e9c:	sub	r3, r3, #1
   16ea0:	str	r3, [r4, #156]	; 0x9c
   16ea4:	b	16ddc <flatcc_builder_end_string@@Base+0x40>
   16ea8:	andeq	r8, r1, ip, lsr r8

00016eac <flatcc_builder_string_edit@@Base>:
   16eac:	ldr	r0, [r0, #16]
   16eb0:	bx	lr

00016eb4 <flatcc_builder_string_len@@Base>:
   16eb4:	ldr	r3, [r0, #32]
   16eb8:	ldr	r0, [r3, #20]
   16ebc:	bx	lr

00016ec0 <flatcc_builder_table_add@@Base>:
   16ec0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16ec4:	strd	r6, [sp, #8]
   16ec8:	str	r8, [sp, #16]
   16ecc:	str	lr, [sp, #20]
   16ed0:	mov	r5, r1
   16ed4:	ldr	r1, [r0, #32]
   16ed8:	ldrh	r1, [r1, #14]
   16edc:	cmp	r1, #3
   16ee0:	bne	16fa0 <flatcc_builder_table_add@@Base+0xe0>
   16ee4:	mov	r4, r0
   16ee8:	movw	r1, #32764	; 0x7ffc
   16eec:	cmp	r5, r1
   16ef0:	bhi	16fbc <flatcc_builder_table_add@@Base+0xfc>
   16ef4:	ldrh	r1, [r0, #130]	; 0x82
   16ef8:	cmp	r1, r3
   16efc:	strhcc	r3, [r0, #130]	; 0x82
   16f00:	ldr	r0, [r0, #4]
   16f04:	lsl	r1, r5, #1
   16f08:	ldrh	r1, [r0, r1]
   16f0c:	cmp	r1, #0
   16f10:	bne	16fd8 <flatcc_builder_table_add@@Base+0x118>
   16f14:	ldr	r0, [r4, #12]
   16f18:	eor	r0, r0, r5
   16f1c:	movw	r1, #31153	; 0x79b1
   16f20:	movt	r1, #40503	; 0x9e37
   16f24:	mul	r0, r1, r0
   16f28:	eor	r0, r0, r2
   16f2c:	mul	r0, r1, r0
   16f30:	str	r0, [r4, #12]
   16f34:	uxth	r7, r5
   16f38:	sub	r6, r3, #1
   16f3c:	ldr	r0, [r4, #20]
   16f40:	add	r6, r6, r0
   16f44:	rsb	r3, r3, #0
   16f48:	and	r6, r6, r3
   16f4c:	add	r1, r2, r6
   16f50:	str	r1, [r4, #20]
   16f54:	ldr	r3, [r4, #24]
   16f58:	cmp	r1, r3
   16f5c:	bcs	16ff4 <flatcc_builder_table_add@@Base+0x134>
   16f60:	uxth	r5, r5
   16f64:	ldr	r3, [r4, #4]
   16f68:	lsl	r5, r5, #1
   16f6c:	add	r2, r6, #4
   16f70:	strh	r2, [r3, r5]
   16f74:	ldrh	r3, [r4, #8]
   16f78:	cmp	r3, r7
   16f7c:	addls	r7, r7, #1
   16f80:	strhls	r7, [r4, #8]
   16f84:	ldr	r0, [r4, #16]
   16f88:	add	r0, r0, r6
   16f8c:	ldrd	r4, [sp]
   16f90:	ldrd	r6, [sp, #8]
   16f94:	ldr	r8, [sp, #16]
   16f98:	add	sp, sp, #20
   16f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   16fa0:	ldr	r3, [pc, #108]	; 17014 <flatcc_builder_table_add@@Base+0x154>
   16fa4:	movw	r2, #1773	; 0x6ed
   16fa8:	movw	r1, #35124	; 0x8934
   16fac:	movt	r1, #1
   16fb0:	movw	r0, #35832	; 0x8bf8
   16fb4:	movt	r0, #1
   16fb8:	bl	11fd4 <__assert_fail@plt>
   16fbc:	ldr	r3, [pc, #80]	; 17014 <flatcc_builder_table_add@@Base+0x154>
   16fc0:	movw	r2, #1774	; 0x6ee
   16fc4:	movw	r1, #35124	; 0x8934
   16fc8:	movt	r1, #1
   16fcc:	movw	r0, #35984	; 0x8c90
   16fd0:	movt	r0, #1
   16fd4:	bl	11fd4 <__assert_fail@plt>
   16fd8:	ldr	r3, [pc, #52]	; 17014 <flatcc_builder_table_add@@Base+0x154>
   16fdc:	movw	r2, #1784	; 0x6f8
   16fe0:	movw	r1, #35124	; 0x8934
   16fe4:	movt	r1, #1
   16fe8:	movw	r0, #35208	; 0x8988
   16fec:	movt	r0, #1
   16ff0:	bl	11fd4 <__assert_fail@plt>
   16ff4:	movw	r2, #65532	; 0xfffc
   16ff8:	add	r1, r1, #1
   16ffc:	mov	r0, r4
   17000:	bl	13234 <main@@Base+0x124>
   17004:	cmp	r0, #0
   17008:	movne	r0, #0
   1700c:	beq	16f60 <flatcc_builder_table_add@@Base+0xa0>
   17010:	b	16f8c <flatcc_builder_table_add@@Base+0xcc>
   17014:	andeq	r8, r1, r8, asr r8

00017018 <flatcc_builder_table_edit@@Base>:
   17018:	ldr	r2, [r0, #32]
   1701c:	ldrh	r2, [r2, #14]
   17020:	cmp	r2, #3
   17024:	bne	1703c <flatcc_builder_table_edit@@Base+0x24>
   17028:	ldr	r3, [r0, #20]
   1702c:	sub	r3, r3, r1
   17030:	ldr	r0, [r0, #16]
   17034:	add	r0, r0, r3
   17038:	bx	lr
   1703c:	str	r4, [sp, #-8]!
   17040:	str	lr, [sp, #4]
   17044:	ldr	r3, [pc, #20]	; 17060 <flatcc_builder_table_edit@@Base+0x48>
   17048:	movw	r2, #1794	; 0x702
   1704c:	movw	r1, #35124	; 0x8934
   17050:	movt	r1, #1
   17054:	movw	r0, #35832	; 0x8bf8
   17058:	movt	r0, #1
   1705c:	bl	11fd4 <__assert_fail@plt>
   17060:	andeq	r8, r1, r4, ror r8

00017064 <flatcc_builder_table_add_copy@@Base>:
   17064:	strd	r4, [sp, #-16]!
   17068:	str	r6, [sp, #8]
   1706c:	str	lr, [sp, #12]
   17070:	mov	r6, r2
   17074:	mov	r5, r3
   17078:	ldrh	r3, [sp, #16]
   1707c:	mov	r2, r5
   17080:	bl	16ec0 <flatcc_builder_table_add@@Base>
   17084:	subs	r4, r0, #0
   17088:	beq	1709c <flatcc_builder_table_add_copy@@Base+0x38>
   1708c:	mov	r2, r5
   17090:	mov	r1, r6
   17094:	mov	r0, r4
   17098:	bl	11f44 <memcpy@plt>
   1709c:	mov	r0, r4
   170a0:	ldrd	r4, [sp]
   170a4:	ldr	r6, [sp, #8]
   170a8:	add	sp, sp, #12
   170ac:	pop	{pc}		; (ldr pc, [sp], #4)

000170b0 <flatcc_builder_table_add_offset@@Base>:
   170b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   170b4:	strd	r6, [sp, #8]
   170b8:	str	r8, [sp, #16]
   170bc:	str	lr, [sp, #20]
   170c0:	ldr	r3, [r0, #32]
   170c4:	ldrh	r3, [r3, #14]
   170c8:	cmp	r3, #3
   170cc:	bne	17190 <flatcc_builder_table_add_offset@@Base+0xe0>
   170d0:	mov	r4, r0
   170d4:	mov	r5, r1
   170d8:	movw	r3, #32764	; 0x7ffc
   170dc:	cmp	r1, r3
   170e0:	bhi	171ac <flatcc_builder_table_add_offset@@Base+0xfc>
   170e4:	ldr	r2, [r0, #4]
   170e8:	lsl	r3, r1, #1
   170ec:	ldrh	r3, [r2, r3]
   170f0:	cmp	r3, #0
   170f4:	bne	171c8 <flatcc_builder_table_add_offset@@Base+0x118>
   170f8:	ldr	r3, [r0, #12]
   170fc:	eor	r3, r3, r1
   17100:	movw	r2, #31153	; 0x79b1
   17104:	movt	r2, #40503	; 0x9e37
   17108:	mul	r3, r2, r3
   1710c:	eor	r3, r3, #4
   17110:	mul	r3, r2, r3
   17114:	str	r3, [r0, #12]
   17118:	uxth	r7, r1
   1711c:	ldr	r6, [r0, #20]
   17120:	add	r6, r6, #3
   17124:	bic	r6, r6, #3
   17128:	add	r1, r6, #4
   1712c:	str	r1, [r0, #20]
   17130:	ldr	r3, [r0, #24]
   17134:	cmp	r1, r3
   17138:	bhi	171e4 <flatcc_builder_table_add_offset@@Base+0x134>
   1713c:	uxth	r2, r6
   17140:	uxth	r5, r5
   17144:	ldr	r3, [r4, #4]
   17148:	lsl	r5, r5, #1
   1714c:	add	r1, r2, #4
   17150:	strh	r1, [r3, r5]
   17154:	ldrh	r3, [r4, #8]
   17158:	cmp	r3, r7
   1715c:	addls	r7, r7, #1
   17160:	strhls	r7, [r4, #8]
   17164:	ldr	r3, [r4]
   17168:	add	r1, r3, #2
   1716c:	str	r1, [r4]
   17170:	strh	r2, [r3]
   17174:	ldr	r0, [r4, #16]
   17178:	add	r0, r0, r6
   1717c:	ldrd	r4, [sp]
   17180:	ldrd	r6, [sp, #8]
   17184:	ldr	r8, [sp, #16]
   17188:	add	sp, sp, #20
   1718c:	pop	{pc}		; (ldr pc, [sp], #4)
   17190:	ldr	r3, [pc, #100]	; 171fc <flatcc_builder_table_add_offset@@Base+0x14c>
   17194:	movw	r2, #1811	; 0x713
   17198:	movw	r1, #35124	; 0x8934
   1719c:	movt	r1, #1
   171a0:	movw	r0, #35832	; 0x8bf8
   171a4:	movt	r0, #1
   171a8:	bl	11fd4 <__assert_fail@plt>
   171ac:	ldr	r3, [pc, #72]	; 171fc <flatcc_builder_table_add_offset@@Base+0x14c>
   171b0:	movw	r2, #1812	; 0x714
   171b4:	movw	r1, #35124	; 0x8934
   171b8:	movt	r1, #1
   171bc:	movw	r0, #35984	; 0x8c90
   171c0:	movt	r0, #1
   171c4:	bl	11fd4 <__assert_fail@plt>
   171c8:	ldr	r3, [pc, #44]	; 171fc <flatcc_builder_table_add_offset@@Base+0x14c>
   171cc:	movw	r2, #1819	; 0x71b
   171d0:	movw	r1, #35124	; 0x8934
   171d4:	movt	r1, #1
   171d8:	movw	r0, #35208	; 0x8988
   171dc:	movt	r0, #1
   171e0:	bl	11fd4 <__assert_fail@plt>
   171e4:	movw	r2, #65532	; 0xfffc
   171e8:	bl	13234 <main@@Base+0x124>
   171ec:	cmp	r0, #0
   171f0:	movne	r0, #0
   171f4:	beq	1713c <flatcc_builder_table_add_offset@@Base+0x8c>
   171f8:	b	1717c <flatcc_builder_table_add_offset@@Base+0xcc>
   171fc:	muleq	r1, r0, r8

00017200 <flatcc_builder_table_add_union@@Base>:
   17200:	strd	r4, [sp, #-20]!	; 0xffffffec
   17204:	strd	r6, [sp, #8]
   17208:	str	lr, [sp, #16]
   1720c:	sub	sp, sp, #12
   17210:	mov	r7, r1
   17214:	add	r1, sp, #8
   17218:	stmdb	r1, {r2, r3}
   1721c:	ldrb	r6, [sp]
   17220:	ldr	r5, [sp, #4]
   17224:	ldr	r3, [r0, #32]
   17228:	ldrh	r3, [r3, #14]
   1722c:	cmp	r3, #3
   17230:	bne	172a4 <flatcc_builder_table_add_union@@Base+0xa4>
   17234:	mov	r4, r0
   17238:	clz	r3, r6
   1723c:	lsr	r3, r3, #5
   17240:	cmp	r5, #0
   17244:	moveq	r3, #0
   17248:	cmp	r3, #0
   1724c:	bne	172c0 <flatcc_builder_table_add_union@@Base+0xc0>
   17250:	cmp	r5, #0
   17254:	beq	1726c <flatcc_builder_table_add_union@@Base+0x6c>
   17258:	mov	r1, r7
   1725c:	bl	170b0 <flatcc_builder_table_add_offset@@Base>
   17260:	cmp	r0, #0
   17264:	strne	r5, [r0]
   17268:	beq	172dc <flatcc_builder_table_add_union@@Base+0xdc>
   1726c:	mov	r3, #1
   17270:	mov	r2, r3
   17274:	sub	r1, r7, #1
   17278:	mov	r0, r4
   1727c:	bl	16ec0 <flatcc_builder_table_add@@Base>
   17280:	cmp	r0, #0
   17284:	beq	172f8 <flatcc_builder_table_add_union@@Base+0xf8>
   17288:	strb	r6, [r0]
   1728c:	mov	r0, #0
   17290:	add	sp, sp, #12
   17294:	ldrd	r4, [sp]
   17298:	ldrd	r6, [sp, #8]
   1729c:	add	sp, sp, #16
   172a0:	pop	{pc}		; (ldr pc, [sp], #4)
   172a4:	ldr	r3, [pc, #104]	; 17314 <flatcc_builder_table_add_union@@Base+0x114>
   172a8:	movw	r2, #1518	; 0x5ee
   172ac:	movw	r1, #35124	; 0x8934
   172b0:	movt	r1, #1
   172b4:	movw	r0, #35832	; 0x8bf8
   172b8:	movt	r0, #1
   172bc:	bl	11fd4 <__assert_fail@plt>
   172c0:	ldr	r3, [pc, #76]	; 17314 <flatcc_builder_table_add_union@@Base+0x114>
   172c4:	movw	r2, #1519	; 0x5ef
   172c8:	movw	r1, #35124	; 0x8934
   172cc:	movt	r1, #1
   172d0:	movw	r0, #36052	; 0x8cd4
   172d4:	movt	r0, #1
   172d8:	bl	11fd4 <__assert_fail@plt>
   172dc:	ldr	r3, [pc, #48]	; 17314 <flatcc_builder_table_add_union@@Base+0x114>
   172e0:	movw	r2, #1522	; 0x5f2
   172e4:	movw	r1, #35124	; 0x8934
   172e8:	movt	r1, #1
   172ec:	movw	r0, #36088	; 0x8cf8
   172f0:	movt	r0, #1
   172f4:	bl	11fd4 <__assert_fail@plt>
   172f8:	ldr	r3, [pc, #20]	; 17314 <flatcc_builder_table_add_union@@Base+0x114>
   172fc:	movw	r2, #1526	; 0x5f6
   17300:	movw	r1, #35124	; 0x8934
   17304:	movt	r1, #1
   17308:	movw	r0, #36100	; 0x8d04
   1730c:	movt	r0, #1
   17310:	bl	11fd4 <__assert_fail@plt>
   17314:			; <UNDEFINED> instruction: 0x000188b0

00017318 <flatcc_builder_table_add_union_vector@@Base>:
   17318:	strd	r4, [sp, #-20]!	; 0xffffffec
   1731c:	strd	r6, [sp, #8]
   17320:	str	lr, [sp, #16]
   17324:	sub	sp, sp, #12
   17328:	mov	r7, r1
   1732c:	add	r1, sp, #8
   17330:	stmdb	r1, {r2, r3}
   17334:	ldr	r4, [sp]
   17338:	ldr	r6, [sp, #4]
   1733c:	ldr	r3, [r0, #32]
   17340:	ldrh	r3, [r3, #14]
   17344:	cmp	r3, #3
   17348:	bne	17394 <flatcc_builder_table_add_union_vector@@Base+0x7c>
   1734c:	mov	r5, r0
   17350:	clz	r3, r6
   17354:	lsr	r3, r3, #5
   17358:	clz	r2, r4
   1735c:	lsr	r2, r2, #5
   17360:	cmp	r2, r3
   17364:	beq	173cc <flatcc_builder_table_add_union_vector@@Base+0xb4>
   17368:	adds	r4, r4, #0
   1736c:	movne	r4, #1
   17370:	cmp	r4, r3
   17374:	mvnne	r4, #0
   17378:	beq	173b0 <flatcc_builder_table_add_union_vector@@Base+0x98>
   1737c:	mov	r0, r4
   17380:	add	sp, sp, #12
   17384:	ldrd	r4, [sp]
   17388:	ldrd	r6, [sp, #8]
   1738c:	add	sp, sp, #16
   17390:	pop	{pc}		; (ldr pc, [sp], #4)
   17394:	ldr	r3, [pc, #160]	; 1743c <flatcc_builder_table_add_union_vector@@Base+0x124>
   17398:	mov	r2, #1536	; 0x600
   1739c:	movw	r1, #35124	; 0x8934
   173a0:	movt	r1, #1
   173a4:	movw	r0, #35832	; 0x8bf8
   173a8:	movt	r0, #1
   173ac:	bl	11fd4 <__assert_fail@plt>
   173b0:	ldr	r3, [pc, #132]	; 1743c <flatcc_builder_table_add_union_vector@@Base+0x124>
   173b4:	movw	r2, #1537	; 0x601
   173b8:	movw	r1, #35124	; 0x8934
   173bc:	movt	r1, #1
   173c0:	movw	r0, #36112	; 0x8d10
   173c4:	movt	r0, #1
   173c8:	bl	11fd4 <__assert_fail@plt>
   173cc:	cmp	r4, #0
   173d0:	beq	1737c <flatcc_builder_table_add_union_vector@@Base+0x64>
   173d4:	sub	r1, r7, #1
   173d8:	bl	170b0 <flatcc_builder_table_add_offset@@Base>
   173dc:	cmp	r0, #0
   173e0:	beq	17420 <flatcc_builder_table_add_union_vector@@Base+0x108>
   173e4:	str	r4, [r0]
   173e8:	mov	r1, r7
   173ec:	mov	r0, r5
   173f0:	bl	170b0 <flatcc_builder_table_add_offset@@Base>
   173f4:	cmp	r0, #0
   173f8:	strne	r6, [r0]
   173fc:	movne	r4, #0
   17400:	bne	1737c <flatcc_builder_table_add_union_vector@@Base+0x64>
   17404:	ldr	r3, [pc, #48]	; 1743c <flatcc_builder_table_add_union_vector@@Base+0x124>
   17408:	movw	r2, #1544	; 0x608
   1740c:	movw	r1, #35124	; 0x8934
   17410:	movt	r1, #1
   17414:	movw	r0, #36088	; 0x8cf8
   17418:	movt	r0, #1
   1741c:	bl	11fd4 <__assert_fail@plt>
   17420:	ldr	r3, [pc, #20]	; 1743c <flatcc_builder_table_add_union_vector@@Base+0x124>
   17424:	movw	r2, #1540	; 0x604
   17428:	movw	r1, #35124	; 0x8934
   1742c:	movt	r1, #1
   17430:	movw	r0, #36088	; 0x8cf8
   17434:	movt	r0, #1
   17438:	bl	11fd4 <__assert_fail@plt>
   1743c:	ldrdeq	r8, [r1], -r0

00017440 <flatcc_builder_push_buffer_alignment@@Base>:
   17440:	mov	r3, r0
   17444:	ldrh	r0, [r0, #128]	; 0x80
   17448:	mov	r2, #4
   1744c:	strh	r2, [r3, #128]	; 0x80
   17450:	bx	lr

00017454 <flatcc_builder_pop_buffer_alignment@@Base>:
   17454:	ldrh	r3, [r0, #128]	; 0x80
   17458:	cmp	r3, r1
   1745c:	strhcc	r1, [r0, #128]	; 0x80
   17460:	bx	lr

00017464 <flatcc_builder_get_buffer_alignment@@Base>:
   17464:	ldrh	r0, [r0, #128]	; 0x80
   17468:	bx	lr

0001746c <flatcc_builder_set_vtable_clustering@@Base>:
   1746c:	clz	r1, r1
   17470:	lsr	r1, r1, #5
   17474:	str	r1, [r0, #180]	; 0xb4
   17478:	bx	lr

0001747c <flatcc_builder_set_block_align@@Base>:
   1747c:	strh	r1, [r0, #132]	; 0x84
   17480:	bx	lr

00017484 <flatcc_builder_get_level@@Base>:
   17484:	ldr	r0, [r0, #156]	; 0x9c
   17488:	bx	lr

0001748c <flatcc_builder_set_max_level@@Base>:
   1748c:	str	r1, [r0, #176]	; 0xb0
   17490:	ldr	r3, [r0, #160]	; 0xa0
   17494:	cmp	r3, r1
   17498:	strlt	r1, [r0, #160]	; 0xa0
   1749c:	bx	lr

000174a0 <flatcc_builder_get_buffer_size@@Base>:
   174a0:	ldr	r2, [r0, #140]	; 0x8c
   174a4:	ldr	r0, [r0, #136]	; 0x88
   174a8:	sub	r0, r2, r0
   174ac:	bx	lr

000174b0 <flatcc_builder_get_buffer_start@@Base>:
   174b0:	ldr	r0, [r0, #136]	; 0x88
   174b4:	bx	lr

000174b8 <flatcc_builder_get_buffer_end@@Base>:
   174b8:	ldr	r0, [r0, #140]	; 0x8c
   174bc:	bx	lr

000174c0 <flatcc_builder_set_vtable_cache_limit@@Base>:
   174c0:	str	r1, [r0, #172]	; 0xac
   174c4:	bx	lr

000174c8 <flatcc_builder_set_identifier@@Base>:
   174c8:	movw	r3, #33252	; 0x81e4
   174cc:	movt	r3, #1
   174d0:	cmp	r1, #0
   174d4:	moveq	r1, r3
   174d8:	ldr	r3, [r1]
   174dc:	str	r3, [r0, #168]	; 0xa8
   174e0:	bx	lr

000174e4 <flatcc_builder_get_type@@Base>:
   174e4:	ldr	r3, [r0, #32]
   174e8:	cmp	r3, #0
   174ec:	ldrhne	r0, [r3, #14]
   174f0:	moveq	r0, #0
   174f4:	bx	lr

000174f8 <flatcc_builder_get_type_at@@Base>:
   174f8:	cmp	r1, #0
   174fc:	ble	17524 <flatcc_builder_get_type_at@@Base+0x2c>
   17500:	ldr	r3, [r0, #156]	; 0x9c
   17504:	cmp	r3, r1
   17508:	blt	1752c <flatcc_builder_get_type_at@@Base+0x34>
   1750c:	sub	r1, r1, r3
   17510:	ldr	r3, [r0, #32]
   17514:	add	r1, r1, r1, lsl #3
   17518:	add	r1, r3, r1, lsl #2
   1751c:	ldrh	r0, [r1, #14]
   17520:	bx	lr
   17524:	mov	r0, #0
   17528:	bx	lr
   1752c:	mov	r0, #0
   17530:	bx	lr

00017534 <flatcc_builder_get_direct_buffer@@Base>:
   17534:	ldr	r3, [r0, #184]	; 0xb8
   17538:	cmp	r3, #0
   1753c:	bne	17554 <flatcc_builder_get_direct_buffer@@Base+0x20>
   17540:	cmp	r1, #0
   17544:	beq	17594 <flatcc_builder_get_direct_buffer@@Base+0x60>
   17548:	mov	r0, #0
   1754c:	str	r0, [r1]
   17550:	bx	lr
   17554:	ldr	r2, [r0, #188]	; 0xbc
   17558:	ldr	r3, [r0, #192]	; 0xc0
   1755c:	cmp	r2, r3
   17560:	beq	17578 <flatcc_builder_get_direct_buffer@@Base+0x44>
   17564:	cmp	r1, #0
   17568:	beq	1758c <flatcc_builder_get_direct_buffer@@Base+0x58>
   1756c:	mov	r0, #0
   17570:	str	r0, [r1]
   17574:	bx	lr
   17578:	cmp	r1, #0
   1757c:	ldrne	r3, [r0, #212]	; 0xd4
   17580:	strne	r3, [r1]
   17584:	ldr	r0, [r0, #196]	; 0xc4
   17588:	bx	lr
   1758c:	mov	r0, r1
   17590:	bx	lr
   17594:	mov	r0, r1
   17598:	bx	lr

0001759c <flatcc_builder_copy_buffer@@Base>:
   1759c:	ldr	r3, [r0, #184]	; 0xb8
   175a0:	cmp	r3, #0
   175a4:	beq	175e8 <flatcc_builder_copy_buffer@@Base+0x4c>
   175a8:	str	r4, [sp, #-8]!
   175ac:	str	lr, [sp, #4]
   175b0:	add	r0, r0, #188	; 0xbc
   175b4:	bl	17d58 <flatcc_emitter_copy_buffer@@Base>
   175b8:	cmp	r0, #0
   175bc:	beq	175cc <flatcc_builder_copy_buffer@@Base+0x30>
   175c0:	ldr	r4, [sp]
   175c4:	add	sp, sp, #4
   175c8:	pop	{pc}		; (ldr pc, [sp], #4)
   175cc:	ldr	r3, [pc, #28]	; 175f0 <flatcc_builder_copy_buffer@@Base+0x54>
   175d0:	movw	r2, #1926	; 0x786
   175d4:	movw	r1, #35124	; 0x8934
   175d8:	movt	r1, #1
   175dc:	movw	r0, #36152	; 0x8d38
   175e0:	movt	r0, #1
   175e4:	bl	11fd4 <__assert_fail@plt>
   175e8:	mov	r0, #0
   175ec:	bx	lr
   175f0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>

000175f4 <flatcc_builder_finalize_buffer@@Base>:
   175f4:	strd	r4, [sp, #-16]!
   175f8:	str	r6, [sp, #8]
   175fc:	str	lr, [sp, #12]
   17600:	mov	r5, r0
   17604:	ldr	r4, [r0, #140]	; 0x8c
   17608:	ldr	r3, [r0, #136]	; 0x88
   1760c:	sub	r4, r4, r3
   17610:	cmp	r1, #0
   17614:	strne	r4, [r1]
   17618:	mov	r0, r4
   1761c:	bl	11f74 <malloc@plt>
   17620:	subs	r6, r0, #0
   17624:	beq	17654 <flatcc_builder_finalize_buffer@@Base+0x60>
   17628:	mov	r2, r4
   1762c:	mov	r1, r6
   17630:	mov	r0, r5
   17634:	bl	1759c <flatcc_builder_copy_buffer@@Base>
   17638:	cmp	r0, #0
   1763c:	beq	17670 <flatcc_builder_finalize_buffer@@Base+0x7c>
   17640:	mov	r0, r6
   17644:	ldrd	r4, [sp]
   17648:	ldr	r6, [sp, #8]
   1764c:	add	sp, sp, #12
   17650:	pop	{pc}		; (ldr pc, [sp], #4)
   17654:	ldr	r3, [pc, #48]	; 1768c <flatcc_builder_finalize_buffer@@Base+0x98>
   17658:	movw	r2, #1944	; 0x798
   1765c:	movw	r1, #35124	; 0x8934
   17660:	movt	r1, #1
   17664:	movw	r0, #35208	; 0x8988
   17668:	movt	r0, #1
   1766c:	bl	11fd4 <__assert_fail@plt>
   17670:	ldr	r3, [pc, #20]	; 1768c <flatcc_builder_finalize_buffer@@Base+0x98>
   17674:	movw	r2, #1948	; 0x79c
   17678:	movw	r1, #35124	; 0x8934
   1767c:	movt	r1, #1
   17680:	movw	r0, #35208	; 0x8988
   17684:	movt	r0, #1
   17688:	bl	11fd4 <__assert_fail@plt>
   1768c:	andeq	r8, r1, r4, lsl r9

00017690 <flatcc_builder_finalize_aligned_buffer@@Base>:
   17690:	strd	r4, [sp, #-20]!	; 0xffffffec
   17694:	strd	r6, [sp, #8]
   17698:	str	lr, [sp, #16]
   1769c:	sub	sp, sp, #12
   176a0:	mov	r7, r0
   176a4:	ldr	r4, [r0, #140]	; 0x8c
   176a8:	ldr	r3, [r0, #136]	; 0x88
   176ac:	sub	r3, r4, r3
   176b0:	subs	r6, r1, #0
   176b4:	strne	r3, [r6]
   176b8:	ldrh	r1, [r0, #128]	; 0x80
   176bc:	sub	r4, r1, #1
   176c0:	add	r4, r4, r3
   176c4:	rsb	r3, r1, #0
   176c8:	and	r4, r4, r3
   176cc:	mov	r3, #0
   176d0:	str	r3, [sp, #4]
   176d4:	mov	r2, r4
   176d8:	cmp	r1, #4
   176dc:	movcc	r1, #4
   176e0:	add	r0, sp, #4
   176e4:	bl	11fa4 <posix_memalign@plt>
   176e8:	cmp	r0, #0
   176ec:	beq	17714 <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   176f0:	ldr	r0, [sp, #4]
   176f4:	cmp	r0, #0
   176f8:	beq	17700 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   176fc:	bl	11f38 <free@plt>
   17700:	cmp	r6, #0
   17704:	movne	r5, #0
   17708:	strne	r5, [r6]
   1770c:	moveq	r5, r6
   17710:	b	17738 <flatcc_builder_finalize_aligned_buffer@@Base+0xa8>
   17714:	ldr	r5, [sp, #4]
   17718:	cmp	r5, #0
   1771c:	beq	17700 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   17720:	mov	r2, r4
   17724:	mov	r1, r5
   17728:	mov	r0, r7
   1772c:	bl	1759c <flatcc_builder_copy_buffer@@Base>
   17730:	cmp	r0, #0
   17734:	beq	17750 <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   17738:	mov	r0, r5
   1773c:	add	sp, sp, #12
   17740:	ldrd	r4, [sp]
   17744:	ldrd	r6, [sp, #8]
   17748:	add	sp, sp, #16
   1774c:	pop	{pc}		; (ldr pc, [sp], #4)
   17750:	mov	r0, r5
   17754:	bl	11f38 <free@plt>
   17758:	b	17700 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>

0001775c <flatcc_builder_aligned_alloc@@Base>:
   1775c:	push	{lr}		; (str lr, [sp, #-4]!)
   17760:	sub	sp, sp, #12
   17764:	mov	r3, #0
   17768:	str	r3, [sp, #4]
   1776c:	mov	r2, r1
   17770:	cmp	r0, #4
   17774:	movcs	r1, r0
   17778:	movcc	r1, #4
   1777c:	add	r0, sp, #4
   17780:	bl	11fa4 <posix_memalign@plt>
   17784:	cmp	r0, #0
   17788:	beq	177a4 <flatcc_builder_aligned_alloc@@Base+0x48>
   1778c:	ldr	r0, [sp, #4]
   17790:	cmp	r0, #0
   17794:	beq	177a4 <flatcc_builder_aligned_alloc@@Base+0x48>
   17798:	bl	11f38 <free@plt>
   1779c:	mov	r3, #0
   177a0:	str	r3, [sp, #4]
   177a4:	ldr	r0, [sp, #4]
   177a8:	add	sp, sp, #12
   177ac:	pop	{pc}		; (ldr pc, [sp], #4)

000177b0 <flatcc_builder_aligned_free@@Base>:
   177b0:	str	r4, [sp, #-8]!
   177b4:	str	lr, [sp, #4]
   177b8:	bl	11f38 <free@plt>
   177bc:	ldr	r4, [sp]
   177c0:	add	sp, sp, #4
   177c4:	pop	{pc}		; (ldr pc, [sp], #4)

000177c8 <flatcc_builder_get_emit_context@@Base>:
   177c8:	ldr	r0, [r0, #36]	; 0x24
   177cc:	bx	lr

000177d0 <flatcc_emitter_recycle_page@@Base>:
   177d0:	ldr	r3, [r0]
   177d4:	cmp	r3, r1
   177d8:	beq	17824 <flatcc_emitter_recycle_page@@Base+0x54>
   177dc:	ldr	r3, [r0, #4]
   177e0:	cmp	r3, r1
   177e4:	beq	1782c <flatcc_emitter_recycle_page@@Base+0x5c>
   177e8:	ldr	r2, [r1, #2944]	; 0xb80
   177ec:	ldr	r3, [r1, #2948]	; 0xb84
   177f0:	str	r3, [r2, #2948]	; 0xb84
   177f4:	ldr	r2, [r1, #2944]	; 0xb80
   177f8:	str	r2, [r3, #2944]	; 0xb80
   177fc:	ldr	r3, [r0]
   17800:	ldr	r3, [r3, #2948]	; 0xb84
   17804:	str	r3, [r1, #2948]	; 0xb84
   17808:	ldr	r2, [r0]
   1780c:	str	r2, [r1, #2944]	; 0xb80
   17810:	str	r1, [r3, #2944]	; 0xb80
   17814:	ldr	r3, [r1, #2944]	; 0xb80
   17818:	str	r1, [r3, #2948]	; 0xb84
   1781c:	mov	r0, #0
   17820:	bx	lr
   17824:	mvn	r0, #0
   17828:	bx	lr
   1782c:	mvn	r0, #0
   17830:	bx	lr

00017834 <flatcc_emitter_reset@@Base>:
   17834:	ldr	r3, [r0]
   17838:	cmp	r3, #0
   1783c:	bxeq	lr
   17840:	str	r3, [r0, #4]
   17844:	add	r2, r3, #1472	; 0x5c0
   17848:	str	r2, [r0, #8]
   1784c:	str	r2, [r0, #16]
   17850:	mov	r2, #1472	; 0x5c0
   17854:	str	r2, [r0, #12]
   17858:	str	r2, [r0, #20]
   1785c:	movw	r2, #64064	; 0xfa40
   17860:	movt	r2, #65535	; 0xffff
   17864:	str	r2, [r3, #2952]	; 0xb88
   17868:	ldr	r3, [r0, #32]
   1786c:	cmp	r3, #0
   17870:	ldreq	r3, [r0, #24]
   17874:	streq	r3, [r0, #32]
   17878:	ldr	r3, [r0, #32]
   1787c:	add	r2, r3, r3, lsl #1
   17880:	ldr	r3, [r0, #24]
   17884:	lsr	r3, r3, #2
   17888:	add	r3, r3, r2, lsr #2
   1788c:	str	r3, [r0, #32]
   17890:	mov	r2, #0
   17894:	str	r2, [r0, #24]
   17898:	ldr	r2, [r0, #28]
   1789c:	cmp	r2, r3, lsl #1
   178a0:	bxls	lr
   178a4:	str	r4, [sp, #-8]!
   178a8:	str	lr, [sp, #4]
   178ac:	mov	r4, r0
   178b0:	ldr	r3, [r0, #4]
   178b4:	ldr	r0, [r3, #2944]	; 0xb80
   178b8:	ldr	r2, [r4]
   178bc:	cmp	r0, r2
   178c0:	beq	17904 <flatcc_emitter_reset@@Base+0xd0>
   178c4:	ldr	r2, [r0, #2944]	; 0xb80
   178c8:	str	r2, [r3, #2944]	; 0xb80
   178cc:	ldr	r3, [r4, #4]
   178d0:	str	r3, [r2, #2948]	; 0xb84
   178d4:	bl	11f38 <free@plt>
   178d8:	ldr	r3, [r4, #28]
   178dc:	sub	r3, r3, #2944	; 0xb80
   178e0:	str	r3, [r4, #28]
   178e4:	ldr	r2, [r4, #32]
   178e8:	cmp	r3, r2, lsl #1
   178ec:	bls	17904 <flatcc_emitter_reset@@Base+0xd0>
   178f0:	ldr	r3, [r4, #4]
   178f4:	ldr	r0, [r3, #2944]	; 0xb80
   178f8:	ldr	r2, [r4]
   178fc:	cmp	r0, r2
   17900:	bne	178c4 <flatcc_emitter_reset@@Base+0x90>
   17904:	ldr	r4, [sp]
   17908:	add	sp, sp, #4
   1790c:	pop	{pc}		; (ldr pc, [sp], #4)

00017910 <flatcc_emitter_clear@@Base>:
   17910:	ldr	r3, [r0]
   17914:	cmp	r3, #0
   17918:	bxeq	lr
   1791c:	strd	r4, [sp, #-16]!
   17920:	str	r6, [sp, #8]
   17924:	str	lr, [sp, #12]
   17928:	mov	r5, r0
   1792c:	ldr	r2, [r3, #2948]	; 0xb84
   17930:	mov	r1, #0
   17934:	str	r1, [r2, #2944]	; 0xb80
   17938:	ldr	r4, [r3, #2944]	; 0xb80
   1793c:	cmp	r4, r1
   17940:	bne	17950 <flatcc_emitter_clear@@Base+0x40>
   17944:	mov	r4, r3
   17948:	b	17964 <flatcc_emitter_clear@@Base+0x54>
   1794c:	mov	r4, r3
   17950:	ldr	r0, [r4, #2948]	; 0xb84
   17954:	bl	11f38 <free@plt>
   17958:	ldr	r3, [r4, #2944]	; 0xb80
   1795c:	cmp	r3, #0
   17960:	bne	1794c <flatcc_emitter_clear@@Base+0x3c>
   17964:	mov	r0, r4
   17968:	bl	11f38 <free@plt>
   1796c:	mov	r2, #36	; 0x24
   17970:	mov	r1, #0
   17974:	mov	r0, r5
   17978:	bl	11fb0 <memset@plt>
   1797c:	ldrd	r4, [sp]
   17980:	ldr	r6, [sp, #8]
   17984:	add	sp, sp, #12
   17988:	pop	{pc}		; (ldr pc, [sp], #4)

0001798c <flatcc_emitter@@Base>:
   1798c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17990:	strd	r6, [sp, #8]
   17994:	strd	r8, [sp, #16]
   17998:	strd	sl, [sp, #24]
   1799c:	str	lr, [sp, #32]
   179a0:	sub	sp, sp, #4
   179a4:	mov	r4, r0
   179a8:	ldr	ip, [sp, #40]	; 0x28
   179ac:	ldr	r0, [r0, #24]
   179b0:	add	r0, r0, ip
   179b4:	str	r0, [r4, #24]
   179b8:	cmp	r3, #0
   179bc:	blt	179ec <flatcc_emitter@@Base+0x60>
   179c0:	ldr	r3, [r4, #20]
   179c4:	cmp	r3, ip
   179c8:	bcs	17ad4 <flatcc_emitter@@Base+0x148>
   179cc:	cmp	r2, #0
   179d0:	moveq	r0, r2
   179d4:	beq	17bd4 <flatcc_emitter@@Base+0x248>
   179d8:	add	r5, r1, #8
   179dc:	mov	r8, r2
   179e0:	movw	fp, #64064	; 0xfa40
   179e4:	movt	fp, #65535	; 0xffff
   179e8:	b	17c30 <flatcc_emitter@@Base+0x2a4>
   179ec:	ldr	r3, [r4, #12]
   179f0:	cmp	r3, ip
   179f4:	bcs	17a0c <flatcc_emitter@@Base+0x80>
   179f8:	add	r5, r1, r2, lsl #3
   179fc:	sub	r8, r2, #1
   17a00:	movw	fp, #64064	; 0xfa40
   17a04:	movt	fp, #65535	; 0xffff
   17a08:	b	17c00 <flatcc_emitter@@Base+0x274>
   17a0c:	ldr	r6, [r4, #8]
   17a10:	sub	r6, r6, ip
   17a14:	str	r6, [r4, #8]
   17a18:	sub	ip, r3, ip
   17a1c:	str	ip, [r4, #12]
   17a20:	b	17ae8 <flatcc_emitter@@Base+0x15c>
   17a24:	mov	r2, r6
   17a28:	rsb	r1, r2, #0
   17a2c:	ldr	r0, [r4, #8]
   17a30:	add	r0, r0, r1
   17a34:	str	r0, [r4, #8]
   17a38:	sub	r3, r3, r2
   17a3c:	str	r3, [r4, #12]
   17a40:	add	r9, r9, r1
   17a44:	sub	r6, r6, r2
   17a48:	mov	r1, r9
   17a4c:	bl	11f44 <memcpy@plt>
   17a50:	cmp	r6, #0
   17a54:	beq	17bf8 <flatcc_emitter@@Base+0x26c>
   17a58:	ldr	r3, [r4, #12]
   17a5c:	cmp	r3, r6
   17a60:	bcs	17a24 <flatcc_emitter@@Base+0x98>
   17a64:	cmp	r3, #0
   17a68:	movne	r2, r3
   17a6c:	bne	17a28 <flatcc_emitter@@Base+0x9c>
   17a70:	ldr	r7, [r4]
   17a74:	cmp	r7, #0
   17a78:	beq	17c8c <flatcc_emitter@@Base+0x300>
   17a7c:	ldr	r2, [r7, #2948]	; 0xb84
   17a80:	ldr	r3, [r4, #4]
   17a84:	cmp	r2, r3
   17a88:	beq	17c50 <flatcc_emitter@@Base+0x2c4>
   17a8c:	ldr	r3, [r7, #2952]	; 0xb88
   17a90:	sub	r3, r3, #2944	; 0xb80
   17a94:	str	r3, [r2, #2952]	; 0xb88
   17a98:	ldr	r3, [r4]
   17a9c:	ldr	r3, [r3, #2948]	; 0xb84
   17aa0:	str	r3, [r4]
   17aa4:	ldr	r3, [r4]
   17aa8:	add	r2, r3, #2944	; 0xb80
   17aac:	str	r2, [r4, #8]
   17ab0:	mov	r2, #2944	; 0xb80
   17ab4:	str	r2, [r4, #12]
   17ab8:	ldr	r2, [r3, #2944]	; 0xb80
   17abc:	ldr	r2, [r2, #2952]	; 0xb88
   17ac0:	sub	r2, r2, #2944	; 0xb80
   17ac4:	str	r2, [r3, #2952]	; 0xb88
   17ac8:	b	17a50 <flatcc_emitter@@Base+0xc4>
   17acc:	mov	r0, #0
   17ad0:	b	17bd4 <flatcc_emitter@@Base+0x248>
   17ad4:	ldr	r6, [r4, #16]
   17ad8:	add	r0, r6, ip
   17adc:	str	r0, [r4, #16]
   17ae0:	sub	ip, r3, ip
   17ae4:	str	ip, [r4, #20]
   17ae8:	sub	r4, r2, #1
   17aec:	cmp	r2, #0
   17af0:	moveq	r0, r2
   17af4:	beq	17bd4 <flatcc_emitter@@Base+0x248>
   17af8:	add	r5, r1, #8
   17afc:	ldr	r2, [r5, #-4]
   17b00:	ldr	r1, [r5, #-8]
   17b04:	mov	r0, r6
   17b08:	bl	11f44 <memcpy@plt>
   17b0c:	ldr	r3, [r5, #-4]
   17b10:	add	r6, r6, r3
   17b14:	sub	r4, r4, #1
   17b18:	add	r5, r5, #8
   17b1c:	cmn	r4, #1
   17b20:	bne	17afc <flatcc_emitter@@Base+0x170>
   17b24:	mov	r0, #0
   17b28:	b	17bd4 <flatcc_emitter@@Base+0x248>
   17b2c:	mov	r6, r7
   17b30:	mov	r2, r6
   17b34:	mov	r1, r9
   17b38:	ldr	r0, [r4, #16]
   17b3c:	bl	11f44 <memcpy@plt>
   17b40:	sub	r7, r7, r6
   17b44:	add	r9, r9, r6
   17b48:	ldr	r3, [r4, #16]
   17b4c:	add	r3, r3, r6
   17b50:	str	r3, [r4, #16]
   17b54:	ldr	r3, [r4, #20]
   17b58:	sub	r6, r3, r6
   17b5c:	str	r6, [r4, #20]
   17b60:	cmp	r7, #0
   17b64:	beq	17c24 <flatcc_emitter@@Base+0x298>
   17b68:	ldr	r6, [r4, #20]
   17b6c:	cmp	r6, r7
   17b70:	bcs	17b2c <flatcc_emitter@@Base+0x1a0>
   17b74:	cmp	r6, #0
   17b78:	bne	17b30 <flatcc_emitter@@Base+0x1a4>
   17b7c:	ldr	r6, [r4, #4]
   17b80:	cmp	r6, #0
   17b84:	beq	17d10 <flatcc_emitter@@Base+0x384>
   17b88:	ldr	r3, [r6, #2944]	; 0xb80
   17b8c:	ldr	r2, [r4]
   17b90:	cmp	r3, r2
   17b94:	beq	17cd4 <flatcc_emitter@@Base+0x348>
   17b98:	str	r3, [r4, #4]
   17b9c:	ldr	r3, [r4, #4]
   17ba0:	str	r3, [r4, #16]
   17ba4:	mov	r2, #2944	; 0xb80
   17ba8:	str	r2, [r4, #20]
   17bac:	ldr	r2, [r3, #2948]	; 0xb84
   17bb0:	ldr	r2, [r2, #2952]	; 0xb88
   17bb4:	add	r2, r2, #2944	; 0xb80
   17bb8:	str	r2, [r3, #2952]	; 0xb88
   17bbc:	b	17b60 <flatcc_emitter@@Base+0x1d4>
   17bc0:	mvn	r0, #0
   17bc4:	b	17bd4 <flatcc_emitter@@Base+0x248>
   17bc8:	mvn	r0, #0
   17bcc:	b	17bd4 <flatcc_emitter@@Base+0x248>
   17bd0:	mvn	r0, #0
   17bd4:	add	sp, sp, #4
   17bd8:	ldrd	r4, [sp]
   17bdc:	ldrd	r6, [sp, #8]
   17be0:	ldrd	r8, [sp, #16]
   17be4:	ldrd	sl, [sp, #24]
   17be8:	add	sp, sp, #32
   17bec:	pop	{pc}		; (ldr pc, [sp], #4)
   17bf0:	mvn	r0, #0
   17bf4:	b	17bd4 <flatcc_emitter@@Base+0x248>
   17bf8:	sub	r5, r5, #8
   17bfc:	sub	r8, r8, #1
   17c00:	cmn	r8, #1
   17c04:	beq	17acc <flatcc_emitter@@Base+0x140>
   17c08:	ldr	r6, [r5, #-4]
   17c0c:	ldr	r9, [r5, #-8]
   17c10:	add	r9, r9, r6
   17c14:	cmp	r6, #0
   17c18:	beq	17bf8 <flatcc_emitter@@Base+0x26c>
   17c1c:	mov	sl, #1472	; 0x5c0
   17c20:	b	17a58 <flatcc_emitter@@Base+0xcc>
   17c24:	add	r5, r5, #8
   17c28:	subs	r8, r8, #1
   17c2c:	beq	17c48 <flatcc_emitter@@Base+0x2bc>
   17c30:	ldr	r9, [r5, #-8]
   17c34:	ldr	r7, [r5, #-4]
   17c38:	cmp	r7, #0
   17c3c:	beq	17c24 <flatcc_emitter@@Base+0x298>
   17c40:	mov	sl, #1472	; 0x5c0
   17c44:	b	17b68 <flatcc_emitter@@Base+0x1dc>
   17c48:	mov	r0, #0
   17c4c:	b	17bd4 <flatcc_emitter@@Base+0x248>
   17c50:	movw	r0, #2956	; 0xb8c
   17c54:	bl	11f74 <malloc@plt>
   17c58:	cmp	r0, #0
   17c5c:	beq	17bc0 <flatcc_emitter@@Base+0x234>
   17c60:	ldr	r3, [r4, #28]
   17c64:	add	r3, r3, #2944	; 0xb80
   17c68:	str	r3, [r4, #28]
   17c6c:	ldr	r3, [r4, #4]
   17c70:	str	r3, [r0, #2948]	; 0xb84
   17c74:	str	r7, [r0, #2944]	; 0xb80
   17c78:	str	r0, [r7, #2948]	; 0xb84
   17c7c:	ldr	r3, [r4, #4]
   17c80:	str	r0, [r3, #2944]	; 0xb80
   17c84:	str	r0, [r4]
   17c88:	b	17aa4 <flatcc_emitter@@Base+0x118>
   17c8c:	movw	r0, #2956	; 0xb8c
   17c90:	bl	11f74 <malloc@plt>
   17c94:	cmp	r0, #0
   17c98:	beq	17bc8 <flatcc_emitter@@Base+0x23c>
   17c9c:	ldr	r3, [r4, #28]
   17ca0:	add	r3, r3, #2944	; 0xb80
   17ca4:	str	r3, [r4, #28]
   17ca8:	str	r0, [r4]
   17cac:	str	r0, [r4, #4]
   17cb0:	str	r0, [r0, #2944]	; 0xb80
   17cb4:	str	r0, [r0, #2948]	; 0xb84
   17cb8:	add	r3, r0, #1472	; 0x5c0
   17cbc:	str	r3, [r4, #8]
   17cc0:	str	r3, [r4, #16]
   17cc4:	str	sl, [r4, #12]
   17cc8:	str	sl, [r4, #20]
   17ccc:	str	fp, [r0, #2952]	; 0xb88
   17cd0:	b	17a50 <flatcc_emitter@@Base+0xc4>
   17cd4:	movw	r0, #2956	; 0xb8c
   17cd8:	bl	11f74 <malloc@plt>
   17cdc:	cmp	r0, #0
   17ce0:	beq	17bd0 <flatcc_emitter@@Base+0x244>
   17ce4:	ldr	r3, [r4, #28]
   17ce8:	add	r3, r3, #2944	; 0xb80
   17cec:	str	r3, [r4, #28]
   17cf0:	str	r6, [r0, #2948]	; 0xb84
   17cf4:	ldr	r3, [r4]
   17cf8:	str	r3, [r0, #2944]	; 0xb80
   17cfc:	str	r0, [r3, #2948]	; 0xb84
   17d00:	ldr	r3, [r4, #4]
   17d04:	str	r0, [r3, #2944]	; 0xb80
   17d08:	str	r0, [r4, #4]
   17d0c:	b	17b9c <flatcc_emitter@@Base+0x210>
   17d10:	movw	r0, #2956	; 0xb8c
   17d14:	bl	11f74 <malloc@plt>
   17d18:	cmp	r0, #0
   17d1c:	beq	17bf0 <flatcc_emitter@@Base+0x264>
   17d20:	ldr	r3, [r4, #28]
   17d24:	add	r3, r3, #2944	; 0xb80
   17d28:	str	r3, [r4, #28]
   17d2c:	str	r0, [r4]
   17d30:	str	r0, [r4, #4]
   17d34:	str	r0, [r0, #2944]	; 0xb80
   17d38:	str	r0, [r0, #2948]	; 0xb84
   17d3c:	add	r3, r0, #1472	; 0x5c0
   17d40:	str	r3, [r4, #8]
   17d44:	str	r3, [r4, #16]
   17d48:	str	sl, [r4, #12]
   17d4c:	str	sl, [r4, #20]
   17d50:	str	fp, [r0, #2952]	; 0xb88
   17d54:	b	17b60 <flatcc_emitter@@Base+0x1d4>

00017d58 <flatcc_emitter_copy_buffer@@Base>:
   17d58:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17d5c:	strd	r6, [sp, #8]
   17d60:	str	r8, [sp, #16]
   17d64:	str	lr, [sp, #20]
   17d68:	ldr	r3, [r0, #24]
   17d6c:	cmp	r3, r2
   17d70:	movhi	r4, #0
   17d74:	bhi	17e04 <flatcc_emitter_copy_buffer@@Base+0xac>
   17d78:	ldr	r4, [r0]
   17d7c:	cmp	r4, #0
   17d80:	beq	17e04 <flatcc_emitter_copy_buffer@@Base+0xac>
   17d84:	mov	r5, r1
   17d88:	mov	r7, r0
   17d8c:	ldr	r2, [r0, #4]
   17d90:	cmp	r4, r2
   17d94:	beq	17e1c <flatcc_emitter_copy_buffer@@Base+0xc4>
   17d98:	ldr	r4, [r0, #12]
   17d9c:	rsb	r4, r4, #2944	; 0xb80
   17da0:	mov	r2, r4
   17da4:	ldr	r1, [r0, #8]
   17da8:	mov	r0, r5
   17dac:	bl	11f44 <memcpy@plt>
   17db0:	add	r4, r5, r4
   17db4:	ldr	r3, [r7]
   17db8:	ldr	r5, [r3, #2944]	; 0xb80
   17dbc:	ldr	r3, [r7, #4]
   17dc0:	cmp	r5, r3
   17dc4:	beq	17e34 <flatcc_emitter_copy_buffer@@Base+0xdc>
   17dc8:	mov	r6, #2944	; 0xb80
   17dcc:	mov	r2, r6
   17dd0:	mov	r1, r5
   17dd4:	mov	r0, r4
   17dd8:	bl	11f44 <memcpy@plt>
   17ddc:	add	r4, r4, #2944	; 0xb80
   17de0:	ldr	r5, [r5, #2944]	; 0xb80
   17de4:	ldr	r3, [r7, #4]
   17de8:	cmp	r3, r5
   17dec:	bne	17dcc <flatcc_emitter_copy_buffer@@Base+0x74>
   17df0:	ldr	r2, [r7, #20]
   17df4:	rsb	r2, r2, #2944	; 0xb80
   17df8:	mov	r1, r5
   17dfc:	mov	r0, r4
   17e00:	bl	11f44 <memcpy@plt>
   17e04:	mov	r0, r4
   17e08:	ldrd	r4, [sp]
   17e0c:	ldrd	r6, [sp, #8]
   17e10:	ldr	r8, [sp, #16]
   17e14:	add	sp, sp, #20
   17e18:	pop	{pc}		; (ldr pc, [sp], #4)
   17e1c:	mov	r2, r3
   17e20:	ldr	r1, [r0, #8]
   17e24:	mov	r0, r5
   17e28:	bl	11f44 <memcpy@plt>
   17e2c:	mov	r4, r5
   17e30:	b	17e04 <flatcc_emitter_copy_buffer@@Base+0xac>
   17e34:	mov	r5, r3
   17e38:	b	17df0 <flatcc_emitter_copy_buffer@@Base+0x98>

00017e3c <__libc_csu_init@@Base>:
   17e3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17e40:	mov	r7, r0
   17e44:	ldr	r6, [pc, #72]	; 17e94 <__libc_csu_init@@Base+0x58>
   17e48:	ldr	r5, [pc, #72]	; 17e98 <__libc_csu_init@@Base+0x5c>
   17e4c:	add	r6, pc, r6
   17e50:	add	r5, pc, r5
   17e54:	sub	r6, r6, r5
   17e58:	mov	r8, r1
   17e5c:	mov	r9, r2
   17e60:	bl	11f0c <strcmp@plt-0x20>
   17e64:	asrs	r6, r6, #2
   17e68:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17e6c:	mov	r4, #0
   17e70:	add	r4, r4, #1
   17e74:	ldr	r3, [r5], #4
   17e78:	mov	r2, r9
   17e7c:	mov	r1, r8
   17e80:	mov	r0, r7
   17e84:	blx	r3
   17e88:	cmp	r6, r4
   17e8c:	bne	17e70 <__libc_csu_init@@Base+0x34>
   17e90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17e94:	andeq	r1, r1, r0, asr #1
   17e98:	strheq	r1, [r1], -r8

00017e9c <__libc_csu_fini@@Base>:
   17e9c:	bx	lr

Disassembly of section .fini:

00017ea0 <.fini>:
   17ea0:	push	{r3, lr}
   17ea4:	pop	{r3, pc}
