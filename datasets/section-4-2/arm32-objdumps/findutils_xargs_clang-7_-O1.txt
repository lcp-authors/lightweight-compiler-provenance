
../repos/findutils/xargs/xargs:     file format elf32-littlearm


Disassembly of section .init:

0001140c <.init>:
   1140c:	push	{r3, lr}
   11410:	bl	1184c <__assert_fail@plt+0x48>
   11414:	pop	{r3, pc}

Disassembly of section .plt:

00011418 <fdopen@plt-0x14>:
   11418:	push	{lr}		; (str lr, [sp, #-4]!)
   1141c:	ldr	lr, [pc, #4]	; 11428 <fdopen@plt-0x4>
   11420:	add	lr, pc, lr
   11424:	ldr	pc, [lr, #8]!
   11428:	ldrdeq	fp, [r1], -r8

0001142c <fdopen@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #110592	; 0x1b000
   11434:	ldr	pc, [ip, #3032]!	; 0xbd8

00011438 <calloc@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #110592	; 0x1b000
   11440:	ldr	pc, [ip, #3024]!	; 0xbd0

00011444 <strcmp@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #110592	; 0x1b000
   1144c:	ldr	pc, [ip, #3016]!	; 0xbc8

00011450 <strtol@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #110592	; 0x1b000
   11458:	ldr	pc, [ip, #3008]!	; 0xbc0

0001145c <printf@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #110592	; 0x1b000
   11464:	ldr	pc, [ip, #3000]!	; 0xbb8

00011468 <read@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #110592	; 0x1b000
   11470:	ldr	pc, [ip, #2992]!	; 0xbb0

00011474 <fflush@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #110592	; 0x1b000
   1147c:	ldr	pc, [ip, #2984]!	; 0xba8

00011480 <wcwidth@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #110592	; 0x1b000
   11488:	ldr	pc, [ip, #2976]!	; 0xba0

0001148c <free@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #110592	; 0x1b000
   11494:	ldr	pc, [ip, #2968]!	; 0xb98

00011498 <ferror@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #110592	; 0x1b000
   114a0:	ldr	pc, [ip, #2960]!	; 0xb90

000114a4 <_exit@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #110592	; 0x1b000
   114ac:	ldr	pc, [ip, #2952]!	; 0xb88

000114b0 <memcpy@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #110592	; 0x1b000
   114b8:	ldr	pc, [ip, #2944]!	; 0xb80

000114bc <execvp@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #110592	; 0x1b000
   114c4:	ldr	pc, [ip, #2936]!	; 0xb78

000114c8 <mbsinit@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #110592	; 0x1b000
   114d0:	ldr	pc, [ip, #2928]!	; 0xb70

000114d4 <signal@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #110592	; 0x1b000
   114dc:	ldr	pc, [ip, #2920]!	; 0xb68

000114e0 <memcmp@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #110592	; 0x1b000
   114e8:	ldr	pc, [ip, #2912]!	; 0xb60

000114ec <dcgettext@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #110592	; 0x1b000
   114f4:	ldr	pc, [ip, #2904]!	; 0xb58

000114f8 <sysconf@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #110592	; 0x1b000
   11500:	ldr	pc, [ip, #2896]!	; 0xb50

00011504 <dup2@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #110592	; 0x1b000
   1150c:	ldr	pc, [ip, #2888]!	; 0xb48

00011510 <getrlimit64@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #110592	; 0x1b000
   11518:	ldr	pc, [ip, #2880]!	; 0xb40

0001151c <realloc@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #110592	; 0x1b000
   11524:	ldr	pc, [ip, #2872]!	; 0xb38

00011528 <textdomain@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #110592	; 0x1b000
   11530:	ldr	pc, [ip, #2864]!	; 0xb30

00011534 <iswcntrl@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #110592	; 0x1b000
   1153c:	ldr	pc, [ip, #2856]!	; 0xb28

00011540 <iswprint@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #110592	; 0x1b000
   11548:	ldr	pc, [ip, #2848]!	; 0xb20

0001154c <poll@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #110592	; 0x1b000
   11554:	ldr	pc, [ip, #2840]!	; 0xb18

00011558 <sigaction@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #110592	; 0x1b000
   11560:	ldr	pc, [ip, #2832]!	; 0xb10

00011564 <fwrite@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #110592	; 0x1b000
   1156c:	ldr	pc, [ip, #2824]!	; 0xb08

00011570 <lseek64@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #110592	; 0x1b000
   11578:	ldr	pc, [ip, #2816]!	; 0xb00

0001157c <waitpid@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #110592	; 0x1b000
   11584:	ldr	pc, [ip, #2808]!	; 0xaf8

00011588 <__ctype_get_mb_cur_max@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #110592	; 0x1b000
   11590:	ldr	pc, [ip, #2800]!	; 0xaf0

00011594 <strcpy@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #110592	; 0x1b000
   1159c:	ldr	pc, [ip, #2792]!	; 0xae8

000115a0 <__fpending@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #110592	; 0x1b000
   115a8:	ldr	pc, [ip, #2784]!	; 0xae0

000115ac <mbrtowc@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #110592	; 0x1b000
   115b4:	ldr	pc, [ip, #2776]!	; 0xad8

000115b8 <error@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #110592	; 0x1b000
   115c0:	ldr	pc, [ip, #2768]!	; 0xad0

000115c4 <opendir@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #110592	; 0x1b000
   115cc:	ldr	pc, [ip, #2760]!	; 0xac8

000115d0 <open64@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #110592	; 0x1b000
   115d8:	ldr	pc, [ip, #2752]!	; 0xac0

000115dc <getenv@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #110592	; 0x1b000
   115e4:	ldr	pc, [ip, #2744]!	; 0xab8

000115e8 <malloc@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #110592	; 0x1b000
   115f0:	ldr	pc, [ip, #2736]!	; 0xab0

000115f4 <__libc_start_main@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #110592	; 0x1b000
   115fc:	ldr	pc, [ip, #2728]!	; 0xaa8

00011600 <__freading@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #110592	; 0x1b000
   11608:	ldr	pc, [ip, #2720]!	; 0xaa0

0001160c <__gmon_start__@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #110592	; 0x1b000
   11614:	ldr	pc, [ip, #2712]!	; 0xa98

00011618 <getopt_long@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #110592	; 0x1b000
   11620:	ldr	pc, [ip, #2704]!	; 0xa90

00011624 <__ctype_b_loc@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #110592	; 0x1b000
   1162c:	ldr	pc, [ip, #2696]!	; 0xa88

00011630 <getpid@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #110592	; 0x1b000
   11638:	ldr	pc, [ip, #2688]!	; 0xa80

0001163c <exit@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #110592	; 0x1b000
   11644:	ldr	pc, [ip, #2680]!	; 0xa78

00011648 <strtoul@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #110592	; 0x1b000
   11650:	ldr	pc, [ip, #2672]!	; 0xa70

00011654 <strlen@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #110592	; 0x1b000
   1165c:	ldr	pc, [ip, #2664]!	; 0xa68

00011660 <strchr@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #110592	; 0x1b000
   11668:	ldr	pc, [ip, #2656]!	; 0xa60

0001166c <setenv@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #110592	; 0x1b000
   11674:	ldr	pc, [ip, #2648]!	; 0xa58

00011678 <fprintf@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #110592	; 0x1b000
   11680:	ldr	pc, [ip, #2640]!	; 0xa50

00011684 <__errno_location@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #110592	; 0x1b000
   1168c:	ldr	pc, [ip, #2632]!	; 0xa48

00011690 <snprintf@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #110592	; 0x1b000
   11698:	ldr	pc, [ip, #2624]!	; 0xa40

0001169c <__cxa_atexit@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #110592	; 0x1b000
   116a4:	ldr	pc, [ip, #2616]!	; 0xa38

000116a8 <memset@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #110592	; 0x1b000
   116b0:	ldr	pc, [ip, #2608]!	; 0xa30

000116b4 <strncpy@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #110592	; 0x1b000
   116bc:	ldr	pc, [ip, #2600]!	; 0xa28

000116c0 <write@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #110592	; 0x1b000
   116c8:	ldr	pc, [ip, #2592]!	; 0xa20

000116cc <fileno@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #110592	; 0x1b000
   116d4:	ldr	pc, [ip, #2584]!	; 0xa18

000116d8 <memchr@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #110592	; 0x1b000
   116e0:	ldr	pc, [ip, #2576]!	; 0xa10

000116e4 <fclose@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #110592	; 0x1b000
   116ec:	ldr	pc, [ip, #2568]!	; 0xa08

000116f0 <strnlen@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #110592	; 0x1b000
   116f8:	ldr	pc, [ip, #2560]!	; 0xa00

000116fc <pipe@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #110592	; 0x1b000
   11704:	ldr	pc, [ip, #2552]!	; 0x9f8

00011708 <fseeko64@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #110592	; 0x1b000
   11710:	ldr	pc, [ip, #2544]!	; 0x9f0

00011714 <fcntl64@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #110592	; 0x1b000
   1171c:	ldr	pc, [ip, #2536]!	; 0x9e8

00011720 <setlocale@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #110592	; 0x1b000
   11728:	ldr	pc, [ip, #2528]!	; 0x9e0

0001172c <sigemptyset@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #110592	; 0x1b000
   11734:	ldr	pc, [ip, #2520]!	; 0x9d8

00011738 <fork@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #110592	; 0x1b000
   11740:	ldr	pc, [ip, #2512]!	; 0x9d0

00011744 <strrchr@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #110592	; 0x1b000
   1174c:	ldr	pc, [ip, #2504]!	; 0x9c8

00011750 <nl_langinfo@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #110592	; 0x1b000
   11758:	ldr	pc, [ip, #2496]!	; 0x9c0

0001175c <fputc@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #110592	; 0x1b000
   11764:	ldr	pc, [ip, #2488]!	; 0x9b8

00011768 <readdir64@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #110592	; 0x1b000
   11770:	ldr	pc, [ip, #2480]!	; 0x9b0

00011774 <fdopendir@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #110592	; 0x1b000
   1177c:	ldr	pc, [ip, #2472]!	; 0x9a8

00011780 <putc@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #110592	; 0x1b000
   11788:	ldr	pc, [ip, #2464]!	; 0x9a0

0001178c <dirfd@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #110592	; 0x1b000
   11794:	ldr	pc, [ip, #2456]!	; 0x998

00011798 <bindtextdomain@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #110592	; 0x1b000
   117a0:	ldr	pc, [ip, #2448]!	; 0x990

000117a4 <isatty@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #110592	; 0x1b000
   117ac:	ldr	pc, [ip, #2440]!	; 0x988

000117b0 <unsetenv@plt>:
   117b0:	add	ip, pc, #0, 12
   117b4:	add	ip, ip, #110592	; 0x1b000
   117b8:	ldr	pc, [ip, #2432]!	; 0x980

000117bc <fputs@plt>:
   117bc:	add	ip, pc, #0, 12
   117c0:	add	ip, ip, #110592	; 0x1b000
   117c4:	ldr	pc, [ip, #2424]!	; 0x978

000117c8 <strncmp@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #110592	; 0x1b000
   117d0:	ldr	pc, [ip, #2416]!	; 0x970

000117d4 <abort@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #110592	; 0x1b000
   117dc:	ldr	pc, [ip, #2408]!	; 0x968

000117e0 <getc@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #110592	; 0x1b000
   117e8:	ldr	pc, [ip, #2400]!	; 0x960

000117ec <close@plt>:
   117ec:	add	ip, pc, #0, 12
   117f0:	add	ip, ip, #110592	; 0x1b000
   117f4:	ldr	pc, [ip, #2392]!	; 0x958

000117f8 <closedir@plt>:
   117f8:	add	ip, pc, #0, 12
   117fc:	add	ip, ip, #110592	; 0x1b000
   11800:	ldr	pc, [ip, #2384]!	; 0x950

00011804 <__assert_fail@plt>:
   11804:	add	ip, pc, #0, 12
   11808:	add	ip, ip, #110592	; 0x1b000
   1180c:	ldr	pc, [ip, #2376]!	; 0x948

Disassembly of section .text:

00011810 <.text>:
   11810:	mov	fp, #0
   11814:	mov	lr, #0
   11818:	pop	{r1}		; (ldr r1, [sp], #4)
   1181c:	mov	r2, sp
   11820:	push	{r2}		; (str r2, [sp, #-4]!)
   11824:	push	{r0}		; (str r0, [sp, #-4]!)
   11828:	ldr	ip, [pc, #16]	; 11840 <__assert_fail@plt+0x3c>
   1182c:	push	{ip}		; (str ip, [sp, #-4]!)
   11830:	ldr	r0, [pc, #12]	; 11844 <__assert_fail@plt+0x40>
   11834:	ldr	r3, [pc, #12]	; 11848 <__assert_fail@plt+0x44>
   11838:	bl	115f4 <__libc_start_main@plt>
   1183c:	bl	117d4 <abort@plt>
   11840:	andeq	r9, r1, r4, lsl pc
   11844:	andeq	r1, r1, r0, lsl #18
   11848:			; <UNDEFINED> instruction: 0x00019eb4
   1184c:	ldr	r3, [pc, #20]	; 11868 <__assert_fail@plt+0x64>
   11850:	ldr	r2, [pc, #20]	; 1186c <__assert_fail@plt+0x68>
   11854:	add	r3, pc, r3
   11858:	ldr	r2, [r3, r2]
   1185c:	cmp	r2, #0
   11860:	bxeq	lr
   11864:	b	1160c <__gmon_start__@plt>
   11868:	andeq	fp, r1, r4, lsr #15
   1186c:	andeq	r0, r0, r8, asr r1
   11870:	ldr	r0, [pc, #24]	; 11890 <__assert_fail@plt+0x8c>
   11874:	ldr	r3, [pc, #24]	; 11894 <__assert_fail@plt+0x90>
   11878:	cmp	r3, r0
   1187c:	bxeq	lr
   11880:	ldr	r3, [pc, #16]	; 11898 <__assert_fail@plt+0x94>
   11884:	cmp	r3, #0
   11888:	bxeq	lr
   1188c:	bx	r3
   11890:			; <UNDEFINED> instruction: 0x0002d1b8
   11894:			; <UNDEFINED> instruction: 0x0002d1b8
   11898:	andeq	r0, r0, r0
   1189c:	ldr	r0, [pc, #36]	; 118c8 <__assert_fail@plt+0xc4>
   118a0:	ldr	r1, [pc, #36]	; 118cc <__assert_fail@plt+0xc8>
   118a4:	sub	r1, r1, r0
   118a8:	asr	r1, r1, #2
   118ac:	add	r1, r1, r1, lsr #31
   118b0:	asrs	r1, r1, #1
   118b4:	bxeq	lr
   118b8:	ldr	r3, [pc, #16]	; 118d0 <__assert_fail@plt+0xcc>
   118bc:	cmp	r3, #0
   118c0:	bxeq	lr
   118c4:	bx	r3
   118c8:			; <UNDEFINED> instruction: 0x0002d1b8
   118cc:			; <UNDEFINED> instruction: 0x0002d1b8
   118d0:	andeq	r0, r0, r0
   118d4:	push	{r4, lr}
   118d8:	ldr	r4, [pc, #24]	; 118f8 <__assert_fail@plt+0xf4>
   118dc:	ldrb	r3, [r4]
   118e0:	cmp	r3, #0
   118e4:	popne	{r4, pc}
   118e8:	bl	11870 <__assert_fail@plt+0x6c>
   118ec:	mov	r3, #1
   118f0:	strb	r3, [r4]
   118f4:	pop	{r4, pc}
   118f8:	andeq	sp, r2, r4, ror #3
   118fc:	b	1189c <__assert_fail@plt+0x98>
   11900:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11904:	add	fp, sp, #28
   11908:	sub	sp, sp, #212	; 0xd4
   1190c:	mov	r9, r0
   11910:	mov	r0, #0
   11914:	strb	r0, [fp, #-40]	; 0xffffffd8
   11918:	movw	r0, #25445	; 0x6365
   1191c:	movt	r0, #28520	; 0x6f68
   11920:	str	r0, [fp, #-44]	; 0xffffffd4
   11924:	str	r1, [sp, #44]	; 0x2c
   11928:	ldr	r0, [r1]
   1192c:	cmp	r0, #0
   11930:	movweq	r0, #40769	; 0x9f41
   11934:	movteq	r0, #1
   11938:	bl	16798 <__assert_fail@plt+0x4f94>
   1193c:	bl	14f30 <__assert_fail@plt+0x372c>
   11940:	bl	11630 <getpid@plt>
   11944:	movw	r1, #53736	; 0xd1e8
   11948:	movt	r1, #2
   1194c:	str	r0, [r1]
   11950:	movw	r1, #53740	; 0xd1ec
   11954:	movt	r1, #2
   11958:	mov	r0, #0
   1195c:	str	r0, [r1]
   11960:	movw	r1, #44138	; 0xac6a
   11964:	movt	r1, #1
   11968:	mov	r0, #6
   1196c:	bl	11720 <setlocale@plt>
   11970:	movw	r4, #48318	; 0xbcbe
   11974:	movt	r4, #1
   11978:	movw	r1, #40775	; 0x9f47
   1197c:	movt	r1, #1
   11980:	mov	r0, r4
   11984:	bl	11798 <bindtextdomain@plt>
   11988:	mov	r0, r4
   1198c:	bl	11528 <textdomain@plt>
   11990:	movw	r0, #22720	; 0x58c0
   11994:	movt	r0, #1
   11998:	bl	19f18 <__assert_fail@plt+0x8714>
   1199c:	cmp	r0, #0
   119a0:	bne	12954 <__assert_fail@plt+0x1150>
   119a4:	movw	r0, #12256	; 0x2fe0
   119a8:	movt	r0, #1
   119ac:	bl	19f18 <__assert_fail@plt+0x8714>
   119b0:	cmp	r0, #0
   119b4:	bne	12954 <__assert_fail@plt+0x1150>
   119b8:	movw	r8, #53744	; 0xd1f0
   119bc:	movt	r8, #2
   119c0:	mov	r0, r8
   119c4:	mov	r1, #2048	; 0x800
   119c8:	bl	14cac <__assert_fail@plt+0x34a8>
   119cc:	mov	r4, r0
   119d0:	sub	r0, r0, #1
   119d4:	cmp	r0, #2
   119d8:	str	r4, [sp, #32]
   119dc:	bcs	119ec <__assert_fail@plt+0x1e8>
   119e0:	movw	r6, #12412	; 0x307c
   119e4:	movt	r6, #1
   119e8:	b	11a48 <__assert_fail@plt+0x244>
   119ec:	mov	r0, #0
   119f0:	bl	114f8 <sysconf@plt>
   119f4:	cmp	r0, #1
   119f8:	blt	11a1c <__assert_fail@plt+0x218>
   119fc:	cmp	r0, #2048	; 0x800
   11a00:	ble	12a2c <__assert_fail@plt+0x1228>
   11a04:	ldr	r2, [r8, #12]
   11a08:	sub	r1, r0, #2048	; 0x800
   11a0c:	mov	r0, r2
   11a10:	bl	130a8 <__assert_fail@plt+0x18a4>
   11a14:	str	r0, [r8, #12]
   11a18:	b	11a20 <__assert_fail@plt+0x21c>
   11a1c:	ldr	r0, [r8, #12]
   11a20:	mov	r1, #0
   11a24:	cmp	r1, r0, lsr #11
   11a28:	beq	129ec <__assert_fail@plt+0x11e8>
   11a2c:	movw	r0, #12468	; 0x30b4
   11a30:	movt	r0, #1
   11a34:	str	r0, [r8, #32]
   11a38:	mov	r0, r8
   11a3c:	bl	14d6c <__assert_fail@plt+0x3568>
   11a40:	movw	r6, #12252	; 0x2fdc
   11a44:	movt	r6, #1
   11a48:	movw	r0, #10828	; 0x2a4c
   11a4c:	movt	r0, #1
   11a50:	str	r0, [sp, #40]	; 0x28
   11a54:	movw	r0, #49047	; 0xbf97
   11a58:	movt	r0, #1
   11a5c:	str	r0, [sp, #48]	; 0x30
   11a60:	movw	r4, #46836	; 0xb6f4
   11a64:	movt	r4, #1
   11a68:	movw	r5, #53792	; 0xd220
   11a6c:	movt	r5, #2
   11a70:	mov	r0, #1
   11a74:	str	r0, [sp, #36]	; 0x24
   11a78:	mov	r0, #0
   11a7c:	b	11a88 <__assert_fail@plt+0x284>
   11a80:	strb	r0, [r1]
   11a84:	mov	r0, r7
   11a88:	mov	r7, r0
   11a8c:	sub	r0, fp, #36	; 0x24
   11a90:	str	r0, [sp]
   11a94:	mov	r0, r9
   11a98:	ldr	r1, [sp, #44]	; 0x2c
   11a9c:	movw	r2, #40919	; 0x9fd7
   11aa0:	movt	r2, #1
   11aa4:	mov	r3, r4
   11aa8:	bl	11618 <getopt_long@plt>
   11aac:	sub	r1, r0, #48	; 0x30
   11ab0:	cmp	r1, #208	; 0xd0
   11ab4:	bhi	12208 <__assert_fail@plt+0xa04>
   11ab8:	add	r2, pc, #4
   11abc:	mov	r0, #1
   11ac0:	ldr	pc, [r2, r1, lsl #2]
   11ac4:	andeq	r1, r1, r0, ror #31
   11ac8:	andeq	r2, r1, r4, asr #18
   11acc:	andeq	r2, r1, r4, asr #18
   11ad0:	andeq	r2, r1, r4, asr #18
   11ad4:	andeq	r2, r1, r4, asr #18
   11ad8:	andeq	r2, r1, r4, asr #18
   11adc:	andeq	r2, r1, r4, asr #18
   11ae0:	andeq	r2, r1, r4, asr #18
   11ae4:	andeq	r2, r1, r4, asr #18
   11ae8:	andeq	r2, r1, r4, asr #18
   11aec:	andeq	r2, r1, r4, asr #18
   11af0:	andeq	r2, r1, r4, asr #18
   11af4:	andeq	r2, r1, r4, asr #18
   11af8:	andeq	r2, r1, r4, asr #18
   11afc:	andeq	r2, r1, r4, asr #18
   11b00:	andeq	r2, r1, r4, asr #18
   11b04:	andeq	r2, r1, r4, asr #18
   11b08:	andeq	r2, r1, r4, asr #18
   11b0c:	andeq	r2, r1, r4, asr #18
   11b10:	andeq	r2, r1, r4, asr #18
   11b14:	andeq	r2, r1, r4, asr #18
   11b18:	andeq	r1, r1, r8, lsl #28
   11b1c:	andeq	r2, r1, r4, asr #18
   11b20:	andeq	r2, r1, r4, asr #18
   11b24:	andeq	r2, r1, r4, asr #18
   11b28:	andeq	r1, r1, r4, lsr lr
   11b2c:	andeq	r2, r1, r4, asr #18
   11b30:	andeq	r2, r1, r4, asr #18
   11b34:	andeq	r1, r1, r4, ror #30
   11b38:	andeq	r2, r1, r4, asr #18
   11b3c:	andeq	r2, r1, r4, asr #18
   11b40:	andeq	r2, r1, r4, asr #18
   11b44:	strheq	r2, [r1], -r0
   11b48:	andeq	r2, r1, r4, asr #18
   11b4c:	andeq	r2, r1, r4, asr #18
   11b50:	andeq	r1, r1, r8, lsl #21
   11b54:	andeq	r2, r1, r4, asr #18
   11b58:	andeq	r2, r1, r4, asr #18
   11b5c:	andeq	r2, r1, r4, asr #18
   11b60:	andeq	r2, r1, r4, asr #18
   11b64:	andeq	r2, r1, r4, asr #18
   11b68:	andeq	r2, r1, r4, asr #18
   11b6c:	andeq	r2, r1, r4, asr #18
   11b70:	andeq	r2, r1, r4, asr #18
   11b74:	andeq	r2, r1, r4, asr #18
   11b78:	andeq	r2, r1, r4, asr #18
   11b7c:	andeq	r2, r1, r4, asr #18
   11b80:	andeq	r2, r1, r4, asr #18
   11b84:	andeq	r2, r1, r4, asr #18
   11b88:	andeq	r2, r1, r0, lsl #3
   11b8c:	andeq	r2, r1, r4, asr #18
   11b90:	andeq	r2, r1, r4, asr #18
   11b94:	andeq	r2, r1, r0, lsl #1
   11b98:	andeq	r1, r1, r8, lsl #28
   11b9c:	andeq	r2, r1, r4, asr #18
   11ba0:	andeq	r2, r1, r4, asr #18
   11ba4:	andeq	r2, r1, ip, asr #18
   11ba8:	andeq	r1, r1, r4, lsr lr
   11bac:	andeq	r2, r1, r4, asr #18
   11bb0:	andeq	r2, r1, r4, asr #18
   11bb4:	andeq	r1, r1, r4, lsr pc
   11bb8:	andeq	r2, r1, r4, asr #18
   11bbc:	andeq	r2, r1, r4, lsl #2
   11bc0:	ldrdeq	r1, [r1], -r0
   11bc4:	andeq	r2, r1, r8, ror #1
   11bc8:	andeq	r2, r1, r4, asr #18
   11bcc:	andeq	r1, r1, r0, asr #29
   11bd0:	andeq	r1, r1, r8, ror #31
   11bd4:			; <UNDEFINED> instruction: 0x00011eb0
   11bd8:	andeq	r2, r1, r4, asr #18
   11bdc:			; <UNDEFINED> instruction: 0x000123b4
   11be0:	andeq	r2, r1, r4, asr #18
   11be4:	ldrdeq	r1, [r1], -r0
   11be8:	andeq	r2, r1, r4, asr #18
   11bec:	andeq	r2, r1, r4, asr #18
   11bf0:	andeq	r2, r1, r4, asr #18
   11bf4:	andeq	r2, r1, r4, asr #18
   11bf8:	andeq	r2, r1, r4, asr #18
   11bfc:	andeq	r2, r1, r4, asr #18
   11c00:	andeq	r2, r1, r4, asr #18
   11c04:	andeq	r2, r1, r4, asr #18
   11c08:	andeq	r2, r1, r4, asr #18
   11c0c:	andeq	r2, r1, r4, asr #18
   11c10:	andeq	r2, r1, r4, asr #18
   11c14:	andeq	r2, r1, r4, asr #18
   11c18:	andeq	r2, r1, r4, asr #18
   11c1c:	andeq	r2, r1, r4, asr #18
   11c20:	andeq	r2, r1, r4, asr #18
   11c24:	andeq	r2, r1, r4, asr #18
   11c28:	andeq	r2, r1, r4, asr #18
   11c2c:	andeq	r2, r1, r4, asr #18
   11c30:	andeq	r2, r1, r4, asr #18
   11c34:	andeq	r2, r1, r4, asr #18
   11c38:	andeq	r2, r1, r4, asr #18
   11c3c:	andeq	r2, r1, r4, asr #18
   11c40:	andeq	r2, r1, r4, asr #18
   11c44:	andeq	r2, r1, r4, asr #18
   11c48:	andeq	r2, r1, r4, asr #18
   11c4c:	andeq	r2, r1, r4, asr #18
   11c50:	andeq	r2, r1, r4, asr #18
   11c54:	andeq	r2, r1, r4, asr #18
   11c58:	andeq	r2, r1, r4, asr #18
   11c5c:	andeq	r2, r1, r4, asr #18
   11c60:	andeq	r2, r1, r4, asr #18
   11c64:	andeq	r2, r1, r4, asr #18
   11c68:	andeq	r2, r1, r4, asr #18
   11c6c:	andeq	r2, r1, r4, asr #18
   11c70:	andeq	r2, r1, r4, asr #18
   11c74:	andeq	r2, r1, r4, asr #18
   11c78:	andeq	r2, r1, r4, asr #18
   11c7c:	andeq	r2, r1, r4, asr #18
   11c80:	andeq	r2, r1, r4, asr #18
   11c84:	andeq	r2, r1, r4, asr #18
   11c88:	andeq	r2, r1, r4, asr #18
   11c8c:	andeq	r2, r1, r4, asr #18
   11c90:	andeq	r2, r1, r4, asr #18
   11c94:	andeq	r2, r1, r4, asr #18
   11c98:	andeq	r2, r1, r4, asr #18
   11c9c:	andeq	r2, r1, r4, asr #18
   11ca0:	andeq	r2, r1, r4, asr #18
   11ca4:	andeq	r2, r1, r4, asr #18
   11ca8:	andeq	r2, r1, r4, asr #18
   11cac:	andeq	r2, r1, r4, asr #18
   11cb0:	andeq	r2, r1, r4, asr #18
   11cb4:	andeq	r2, r1, r4, asr #18
   11cb8:	andeq	r2, r1, r4, asr #18
   11cbc:	andeq	r2, r1, r4, asr #18
   11cc0:	andeq	r2, r1, r4, asr #18
   11cc4:	andeq	r2, r1, r4, asr #18
   11cc8:	andeq	r2, r1, r4, asr #18
   11ccc:	andeq	r2, r1, r4, asr #18
   11cd0:	andeq	r2, r1, r4, asr #18
   11cd4:	andeq	r2, r1, r4, asr #18
   11cd8:	andeq	r2, r1, r4, asr #18
   11cdc:	andeq	r2, r1, r4, asr #18
   11ce0:	andeq	r2, r1, r4, asr #18
   11ce4:	andeq	r2, r1, r4, asr #18
   11ce8:	andeq	r2, r1, r4, asr #18
   11cec:	andeq	r2, r1, r4, asr #18
   11cf0:	andeq	r2, r1, r4, asr #18
   11cf4:	andeq	r2, r1, r4, asr #18
   11cf8:	andeq	r2, r1, r4, asr #18
   11cfc:	andeq	r2, r1, r4, asr #18
   11d00:	andeq	r2, r1, r4, asr #18
   11d04:	andeq	r2, r1, r4, asr #18
   11d08:	andeq	r2, r1, r4, asr #18
   11d0c:	andeq	r2, r1, r4, asr #18
   11d10:	andeq	r2, r1, r4, asr #18
   11d14:	andeq	r2, r1, r4, asr #18
   11d18:	andeq	r2, r1, r4, asr #18
   11d1c:	andeq	r2, r1, r4, asr #18
   11d20:	andeq	r2, r1, r4, asr #18
   11d24:	andeq	r2, r1, r4, asr #18
   11d28:	andeq	r2, r1, r4, asr #18
   11d2c:	andeq	r2, r1, r4, asr #18
   11d30:	andeq	r2, r1, r4, asr #18
   11d34:	andeq	r2, r1, r4, asr #18
   11d38:	andeq	r2, r1, r4, asr #18
   11d3c:	andeq	r2, r1, r4, asr #18
   11d40:	andeq	r2, r1, r4, asr #18
   11d44:	andeq	r2, r1, r4, asr #18
   11d48:	andeq	r2, r1, r4, asr #18
   11d4c:	andeq	r2, r1, r4, asr #18
   11d50:	andeq	r2, r1, r4, asr #18
   11d54:	andeq	r2, r1, r4, asr #18
   11d58:	andeq	r2, r1, r4, asr #18
   11d5c:	andeq	r2, r1, r4, asr #18
   11d60:	andeq	r2, r1, r4, asr #18
   11d64:	andeq	r2, r1, r4, asr #18
   11d68:	andeq	r2, r1, r4, asr #18
   11d6c:	andeq	r2, r1, r4, asr #18
   11d70:	andeq	r2, r1, r4, asr #18
   11d74:	andeq	r2, r1, r4, asr #18
   11d78:	andeq	r2, r1, r4, asr #18
   11d7c:	andeq	r2, r1, r4, asr #18
   11d80:	andeq	r2, r1, r4, asr #18
   11d84:	andeq	r2, r1, r4, asr #18
   11d88:	andeq	r2, r1, r4, asr #18
   11d8c:	andeq	r2, r1, r4, asr #18
   11d90:	andeq	r2, r1, r4, asr #18
   11d94:	andeq	r2, r1, r4, asr #18
   11d98:	andeq	r2, r1, r4, asr #18
   11d9c:	andeq	r2, r1, r4, asr #18
   11da0:	andeq	r2, r1, r4, asr #18
   11da4:	andeq	r2, r1, r4, asr #18
   11da8:	andeq	r2, r1, r4, asr #18
   11dac:	andeq	r2, r1, r4, asr #18
   11db0:	andeq	r2, r1, r4, asr #18
   11db4:	andeq	r2, r1, r4, asr #18
   11db8:	andeq	r2, r1, r4, asr #18
   11dbc:	andeq	r2, r1, r4, asr #18
   11dc0:	andeq	r2, r1, r4, asr #18
   11dc4:	andeq	r2, r1, r4, asr #18
   11dc8:	andeq	r2, r1, r4, asr #18
   11dcc:	andeq	r2, r1, r4, asr #18
   11dd0:	andeq	r2, r1, r4, asr #18
   11dd4:	andeq	r2, r1, r4, asr #18
   11dd8:	andeq	r2, r1, r4, asr #18
   11ddc:	andeq	r2, r1, r4, asr #18
   11de0:	andeq	r2, r1, r4, asr #18
   11de4:	andeq	r2, r1, r4, asr #18
   11de8:	andeq	r2, r1, r4, asr #18
   11dec:	andeq	r2, r1, r4, asr #18
   11df0:	andeq	r2, r1, r4, asr #18
   11df4:	andeq	r2, r1, r4, asr #18
   11df8:	andeq	r2, r1, r4, asr #18
   11dfc:	andeq	r2, r1, r4, asr #18
   11e00:	andeq	r2, r1, r4, asr #18
   11e04:	andeq	r1, r1, r0, ror #29
   11e08:	movw	r0, #53728	; 0xd1e0
   11e0c:	movt	r0, #2
   11e10:	ldr	r0, [r0]
   11e14:	cmp	r0, #0
   11e18:	ldrbne	r1, [r0]
   11e1c:	cmpne	r1, #0
   11e20:	bne	11e28 <__assert_fail@plt+0x624>
   11e24:	mov	r0, #0
   11e28:	str	r0, [r5]
   11e2c:	mov	r0, r7
   11e30:	b	11a88 <__assert_fail@plt+0x284>
   11e34:	movw	r0, #53728	; 0xd1e0
   11e38:	movt	r0, #2
   11e3c:	ldr	r0, [r0]
   11e40:	cmp	r0, #0
   11e44:	movw	r1, #40952	; 0x9ff8
   11e48:	movt	r1, #1
   11e4c:	moveq	r0, r1
   11e50:	str	r0, [r8, #24]
   11e54:	ldr	r0, [r8, #40]	; 0x28
   11e58:	cmp	r0, #0
   11e5c:	beq	11e7c <__assert_fail@plt+0x678>
   11e60:	movw	r0, #40955	; 0x9ffb
   11e64:	movt	r0, #1
   11e68:	movw	r1, #40971	; 0xa00b
   11e6c:	movt	r1, #1
   11e70:	bl	13980 <__assert_fail@plt+0x217c>
   11e74:	mov	r0, #0
   11e78:	str	r0, [r8, #40]	; 0x28
   11e7c:	ldr	r0, [r8, #36]	; 0x24
   11e80:	cmp	r0, #0
   11e84:	mov	r0, r7
   11e88:	beq	11a88 <__assert_fail@plt+0x284>
   11e8c:	movw	r0, #40955	; 0x9ffb
   11e90:	movt	r0, #1
   11e94:	movw	r1, #40982	; 0xa016
   11e98:	movt	r1, #1
   11e9c:	bl	13980 <__assert_fail@plt+0x217c>
   11ea0:	mov	r0, #0
   11ea4:	str	r0, [r8, #36]	; 0x24
   11ea8:	mov	r0, r7
   11eac:	b	11a88 <__assert_fail@plt+0x284>
   11eb0:	mov	r0, #1
   11eb4:	movw	r1, #53796	; 0xd224
   11eb8:	movt	r1, #2
   11ebc:	b	11a80 <__assert_fail@plt+0x27c>
   11ec0:	mov	r0, #0
   11ec4:	str	r0, [sp, #36]	; 0x24
   11ec8:	mov	r0, r7
   11ecc:	b	11a88 <__assert_fail@plt+0x284>
   11ed0:	mov	r0, #1
   11ed4:	str	r0, [r8]
   11ed8:	mov	r0, r7
   11edc:	b	11a88 <__assert_fail@plt+0x284>
   11ee0:	mov	r4, r6
   11ee4:	movw	r0, #53728	; 0xd1e0
   11ee8:	movt	r0, #2
   11eec:	ldr	r6, [r0]
   11ef0:	mov	r0, r6
   11ef4:	mov	r1, #61	; 0x3d
   11ef8:	bl	11660 <strchr@plt>
   11efc:	cmp	r0, #0
   11f00:	bne	12980 <__assert_fail@plt+0x117c>
   11f04:	movw	r0, #53800	; 0xd228
   11f08:	movt	r0, #2
   11f0c:	str	r6, [r0]
   11f10:	mov	r0, r6
   11f14:	bl	117b0 <unsetenv@plt>
   11f18:	cmp	r0, #0
   11f1c:	mov	r0, r7
   11f20:	mov	r6, r4
   11f24:	movw	r4, #46836	; 0xb6f4
   11f28:	movt	r4, #1
   11f2c:	beq	11a88 <__assert_fail@plt+0x284>
   11f30:	b	129b4 <__assert_fail@plt+0x11b0>
   11f34:	movw	r0, #53728	; 0xd1e0
   11f38:	movt	r0, #2
   11f3c:	ldr	r0, [r0]
   11f40:	cmp	r0, #0
   11f44:	beq	12198 <__assert_fail@plt+0x994>
   11f48:	mov	r1, #1
   11f4c:	str	r1, [sp]
   11f50:	mov	r1, #108	; 0x6c
   11f54:	mov	r2, #1
   11f58:	mvn	r3, #0
   11f5c:	bl	139cc <__assert_fail@plt+0x21c8>
   11f60:	b	1219c <__assert_fail@plt+0x998>
   11f64:	movw	r0, #53728	; 0xd1e0
   11f68:	movt	r0, #2
   11f6c:	ldr	r0, [r0]
   11f70:	mov	r1, #1
   11f74:	str	r1, [sp]
   11f78:	mov	r1, #76	; 0x4c
   11f7c:	mov	r2, #1
   11f80:	mvn	r3, #0
   11f84:	bl	139cc <__assert_fail@plt+0x21c8>
   11f88:	str	r0, [r8, #36]	; 0x24
   11f8c:	ldr	r0, [r8, #40]	; 0x28
   11f90:	cmp	r0, #0
   11f94:	beq	11fb4 <__assert_fail@plt+0x7b0>
   11f98:	movw	r0, #40994	; 0xa022
   11f9c:	movt	r0, #1
   11fa0:	movw	r1, #40971	; 0xa00b
   11fa4:	movt	r1, #1
   11fa8:	bl	13980 <__assert_fail@plt+0x217c>
   11fac:	mov	r0, #0
   11fb0:	str	r0, [r8, #40]	; 0x28
   11fb4:	ldr	r0, [r8, #24]
   11fb8:	cmp	r0, #0
   11fbc:	mov	r0, r7
   11fc0:	beq	11a88 <__assert_fail@plt+0x284>
   11fc4:	movw	r0, #40994	; 0xa022
   11fc8:	movt	r0, #1
   11fcc:	b	121ec <__assert_fail@plt+0x9e8>
   11fd0:	mov	r0, #1
   11fd4:	movw	r1, #53797	; 0xd225
   11fd8:	movt	r1, #2
   11fdc:	b	11a80 <__assert_fail@plt+0x27c>
   11fe0:	mov	r0, #0
   11fe4:	b	12090 <__assert_fail@plt+0x88c>
   11fe8:	mov	r5, r4
   11fec:	mov	r4, r8
   11ff0:	mov	r8, r6
   11ff4:	blx	r6
   11ff8:	ldr	r3, [r4, #4]
   11ffc:	movw	r0, #53728	; 0xd1e0
   12000:	movt	r0, #2
   12004:	ldr	r0, [r0]
   12008:	mov	r1, #0
   1200c:	str	r1, [sp]
   12010:	mov	r1, #115	; 0x73
   12014:	mov	r2, #1
   12018:	bl	139cc <__assert_fail@plt+0x21c8>
   1201c:	mov	r6, r0
   12020:	ldr	r0, [r4, #4]
   12024:	cmp	r6, r0
   12028:	bls	12060 <__assert_fail@plt+0x85c>
   1202c:	mov	r0, #0
   12030:	movw	r1, #41036	; 0xa04c
   12034:	movt	r1, #1
   12038:	mov	r2, #5
   1203c:	bl	114ec <dcgettext@plt>
   12040:	mov	r2, r0
   12044:	ldr	r0, [r4, #4]
   12048:	str	r0, [sp]
   1204c:	mov	r0, #0
   12050:	mov	r1, #0
   12054:	mov	r3, r6
   12058:	bl	115b8 <error@plt>
   1205c:	ldr	r6, [r4, #4]
   12060:	str	r6, [r4, #12]
   12064:	mov	r0, r7
   12068:	mov	r6, r8
   1206c:	mov	r8, r4
   12070:	mov	r4, r5
   12074:	movw	r5, #53792	; 0xd220
   12078:	movt	r5, #2
   1207c:	b	11a88 <__assert_fail@plt+0x284>
   12080:	movw	r0, #53728	; 0xd1e0
   12084:	movt	r0, #2
   12088:	ldr	r0, [r0]
   1208c:	bl	13540 <__assert_fail@plt+0x1d3c>
   12090:	movw	r1, #53788	; 0xd21c
   12094:	movt	r1, #2
   12098:	strb	r0, [r1]
   1209c:	movw	r0, #13272	; 0x33d8
   120a0:	movt	r0, #1
   120a4:	str	r0, [sp, #40]	; 0x28
   120a8:	mov	r0, r7
   120ac:	b	11a88 <__assert_fail@plt+0x284>
   120b0:	movw	r0, #53728	; 0xd1e0
   120b4:	movt	r0, #2
   120b8:	ldr	r0, [r0]
   120bc:	mov	r1, #1
   120c0:	str	r1, [sp]
   120c4:	mov	r1, #80	; 0x50
   120c8:	mov	r2, #0
   120cc:	mvn	r3, #-2147483648	; 0x80000000
   120d0:	bl	139cc <__assert_fail@plt+0x21c8>
   120d4:	movw	r1, #53608	; 0xd168
   120d8:	movt	r1, #2
   120dc:	str	r0, [r1]
   120e0:	mov	r0, r7
   120e4:	b	11a88 <__assert_fail@plt+0x284>
   120e8:	mov	r0, #1
   120ec:	movw	r1, #53796	; 0xd224
   120f0:	movt	r1, #2
   120f4:	strb	r0, [r1]
   120f8:	movw	r1, #53798	; 0xd226
   120fc:	movt	r1, #2
   12100:	b	11a80 <__assert_fail@plt+0x27c>
   12104:	movw	r0, #53728	; 0xd1e0
   12108:	movt	r0, #2
   1210c:	ldr	r0, [r0]
   12110:	mov	r1, #1
   12114:	str	r1, [sp]
   12118:	mov	r1, #110	; 0x6e
   1211c:	mov	r2, #1
   12120:	mvn	r3, #0
   12124:	bl	139cc <__assert_fail@plt+0x21c8>
   12128:	str	r0, [r8, #40]	; 0x28
   1212c:	ldr	r0, [r8, #36]	; 0x24
   12130:	cmp	r0, #0
   12134:	beq	12154 <__assert_fail@plt+0x950>
   12138:	movw	r0, #41022	; 0xa03e
   1213c:	movt	r0, #1
   12140:	movw	r1, #40982	; 0xa016
   12144:	movt	r1, #1
   12148:	bl	13980 <__assert_fail@plt+0x217c>
   1214c:	mov	r0, #0
   12150:	str	r0, [r8, #36]	; 0x24
   12154:	ldr	r0, [r8, #24]
   12158:	cmp	r0, #0
   1215c:	mov	r0, r7
   12160:	beq	11a88 <__assert_fail@plt+0x284>
   12164:	ldr	r0, [r8, #40]	; 0x28
   12168:	cmp	r0, #1
   1216c:	bne	121e4 <__assert_fail@plt+0x9e0>
   12170:	mov	r0, #0
   12174:	str	r0, [r8, #40]	; 0x28
   12178:	mov	r0, r7
   1217c:	b	11a88 <__assert_fail@plt+0x284>
   12180:	movw	r0, #53728	; 0xd1e0
   12184:	movt	r0, #2
   12188:	ldr	r0, [r0]
   1218c:	str	r0, [sp, #48]	; 0x30
   12190:	mov	r0, r7
   12194:	b	11a88 <__assert_fail@plt+0x284>
   12198:	mov	r0, #1
   1219c:	str	r0, [r8, #36]	; 0x24
   121a0:	ldr	r0, [r8, #40]	; 0x28
   121a4:	cmp	r0, #0
   121a8:	beq	121c8 <__assert_fail@plt+0x9c4>
   121ac:	movw	r0, #41007	; 0xa02f
   121b0:	movt	r0, #1
   121b4:	movw	r1, #40971	; 0xa00b
   121b8:	movt	r1, #1
   121bc:	bl	13980 <__assert_fail@plt+0x217c>
   121c0:	mov	r0, #0
   121c4:	str	r0, [r8, #40]	; 0x28
   121c8:	ldr	r0, [r8, #24]
   121cc:	cmp	r0, #0
   121d0:	mov	r0, r7
   121d4:	beq	11a88 <__assert_fail@plt+0x284>
   121d8:	movw	r0, #41007	; 0xa02f
   121dc:	movt	r0, #1
   121e0:	b	121ec <__assert_fail@plt+0x9e8>
   121e4:	movw	r0, #41022	; 0xa03e
   121e8:	movt	r0, #1
   121ec:	movw	r1, #40997	; 0xa025
   121f0:	movt	r1, #1
   121f4:	bl	13980 <__assert_fail@plt+0x217c>
   121f8:	mov	r0, #0
   121fc:	str	r0, [r8, #24]
   12200:	mov	r0, r7
   12204:	b	11a88 <__assert_fail@plt+0x284>
   12208:	cmn	r0, #1
   1220c:	bne	12944 <__assert_fail@plt+0x1140>
   12210:	movw	r0, #13272	; 0x33d8
   12214:	movt	r0, #1
   12218:	ldr	r1, [sp, #40]	; 0x28
   1221c:	cmp	r1, r0
   12220:	bne	12254 <__assert_fail@plt+0xa50>
   12224:	ldr	r0, [r5]
   12228:	cmp	r0, #0
   1222c:	beq	12254 <__assert_fail@plt+0xa50>
   12230:	movw	r1, #41198	; 0xa0ee
   12234:	movt	r1, #1
   12238:	mov	r0, #0
   1223c:	mov	r2, #5
   12240:	bl	114ec <dcgettext@plt>
   12244:	mov	r2, r0
   12248:	mov	r0, #0
   1224c:	mov	r1, #0
   12250:	bl	115b8 <error@plt>
   12254:	blx	r6
   12258:	ldr	r0, [sp, #32]
   1225c:	cmp	r0, #0
   12260:	bne	12a0c <__assert_fail@plt+0x1208>
   12264:	movw	r0, #15140	; 0x3b24
   12268:	movt	r0, #1
   1226c:	str	r0, [sp, #52]	; 0x34
   12270:	add	r5, sp, #52	; 0x34
   12274:	add	r4, r5, #4
   12278:	mov	r0, r4
   1227c:	bl	1172c <sigemptyset@plt>
   12280:	mov	r6, #0
   12284:	str	r6, [sp, #184]	; 0xb8
   12288:	mov	r0, #10
   1228c:	mov	r1, r5
   12290:	mov	r2, #0
   12294:	bl	11558 <sigaction@plt>
   12298:	cmp	r0, #0
   1229c:	beq	122cc <__assert_fail@plt+0xac8>
   122a0:	bl	11684 <__errno_location@plt>
   122a4:	ldr	r5, [r0]
   122a8:	movw	r1, #41280	; 0xa140
   122ac:	movt	r1, #1
   122b0:	mov	r0, #0
   122b4:	mov	r2, #5
   122b8:	bl	114ec <dcgettext@plt>
   122bc:	mov	r2, r0
   122c0:	mov	r0, #0
   122c4:	mov	r1, r5
   122c8:	bl	115b8 <error@plt>
   122cc:	movw	r0, #15188	; 0x3b54
   122d0:	movt	r0, #1
   122d4:	str	r0, [sp, #52]	; 0x34
   122d8:	mov	r0, r4
   122dc:	bl	1172c <sigemptyset@plt>
   122e0:	str	r6, [sp, #184]	; 0xb8
   122e4:	add	r1, sp, #52	; 0x34
   122e8:	mov	r0, #12
   122ec:	mov	r2, #0
   122f0:	bl	11558 <sigaction@plt>
   122f4:	cmp	r0, #0
   122f8:	beq	12328 <__assert_fail@plt+0xb24>
   122fc:	bl	11684 <__errno_location@plt>
   12300:	ldr	r4, [r0]
   12304:	movw	r1, #41314	; 0xa162
   12308:	movt	r1, #1
   1230c:	mov	r0, #0
   12310:	mov	r2, #5
   12314:	bl	114ec <dcgettext@plt>
   12318:	mov	r2, r0
   1231c:	mov	r0, #0
   12320:	mov	r1, r4
   12324:	bl	115b8 <error@plt>
   12328:	movw	r1, #49047	; 0xbf97
   1232c:	movt	r1, #1
   12330:	ldr	r6, [sp, #48]	; 0x30
   12334:	mov	r0, r6
   12338:	bl	11444 <strcmp@plt>
   1233c:	cmp	r0, #0
   12340:	beq	123cc <__assert_fail@plt+0xbc8>
   12344:	movw	r0, #53808	; 0xd230
   12348:	movt	r0, #2
   1234c:	mov	r1, #1
   12350:	strb	r1, [r0]
   12354:	mov	r0, r6
   12358:	bl	13b74 <__assert_fail@plt+0x2370>
   1235c:	movw	r1, #53804	; 0xd22c
   12360:	movt	r1, #2
   12364:	str	r0, [r1]
   12368:	cmp	r0, #0
   1236c:	bne	123e4 <__assert_fail@plt+0xbe0>
   12370:	bl	11684 <__errno_location@plt>
   12374:	ldr	r4, [r0]
   12378:	movw	r1, #41348	; 0xa184
   1237c:	movt	r1, #1
   12380:	mov	r0, #0
   12384:	mov	r2, #5
   12388:	bl	114ec <dcgettext@plt>
   1238c:	mov	r5, r0
   12390:	mov	r0, #0
   12394:	mov	r1, #8
   12398:	mov	r2, r6
   1239c:	bl	17d2c <__assert_fail@plt+0x6528>
   123a0:	mov	r3, r0
   123a4:	mov	r0, #1
   123a8:	mov	r1, r4
   123ac:	mov	r2, r5
   123b0:	bl	115b8 <error@plt>
   123b4:	movw	r0, #40769	; 0x9f41
   123b8:	movt	r0, #1
   123bc:	bl	154f4 <__assert_fail@plt+0x3cf0>
   123c0:	mov	r0, #0
   123c4:	sub	sp, fp, #28
   123c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123cc:	movw	r0, #53720	; 0xd1d8
   123d0:	movt	r0, #2
   123d4:	ldr	r0, [r0]
   123d8:	movw	r1, #53804	; 0xd22c
   123dc:	movt	r1, #2
   123e0:	str	r0, [r1]
   123e4:	ldr	r0, [r8, #24]
   123e8:	cmp	r0, #0
   123ec:	ldreq	r0, [r8, #36]	; 0x24
   123f0:	cmpeq	r0, #0
   123f4:	beq	12400 <__assert_fail@plt+0xbfc>
   123f8:	mov	r0, #1
   123fc:	str	r0, [r8]
   12400:	movw	r5, #53704	; 0xd1c8
   12404:	movt	r5, #2
   12408:	ldr	r0, [r5]
   1240c:	cmp	r0, r9
   12410:	bne	12430 <__assert_fail@plt+0xc2c>
   12414:	mov	r0, #0
   12418:	str	r0, [r5]
   1241c:	sub	r0, fp, #44	; 0x2c
   12420:	str	r0, [fp, #-48]	; 0xffffffd0
   12424:	mov	r9, #1
   12428:	sub	r0, fp, #48	; 0x30
   1242c:	str	r0, [sp, #44]	; 0x2c
   12430:	cmp	r7, #0
   12434:	bne	127a4 <__assert_fail@plt+0xfa0>
   12438:	ldr	r0, [r8, #12]
   1243c:	add	r0, r0, #1
   12440:	bl	189fc <__assert_fail@plt+0x71f8>
   12444:	movw	r1, #53812	; 0xd234
   12448:	movt	r1, #2
   1244c:	str	r0, [r1]
   12450:	ldr	r0, [r8, #12]
   12454:	add	r0, r0, #1
   12458:	bl	189fc <__assert_fail@plt+0x71f8>
   1245c:	movw	r7, #53816	; 0xd238
   12460:	movt	r7, #2
   12464:	str	r0, [r7, #12]
   12468:	mov	r0, #17
   1246c:	mov	r1, #0
   12470:	bl	114d4 <signal@plt>
   12474:	ldr	r0, [r8, #24]
   12478:	cmp	r0, #0
   1247c:	beq	12634 <__assert_fail@plt+0xe30>
   12480:	lsl	r0, r9, #2
   12484:	bl	189fc <__assert_fail@plt+0x71f8>
   12488:	str	r0, [sp, #36]	; 0x24
   1248c:	ldr	r0, [r5]
   12490:	cmp	r0, r9
   12494:	bge	124c0 <__assert_fail@plt+0xcbc>
   12498:	sub	r4, r9, r0
   1249c:	ldr	r1, [sp, #36]	; 0x24
   124a0:	add	r5, r1, r0, lsl #2
   124a4:	ldr	r1, [sp, #44]	; 0x2c
   124a8:	add	r6, r1, r0, lsl #2
   124ac:	ldr	r0, [r6], #4
   124b0:	bl	11654 <strlen@plt>
   124b4:	str	r0, [r5], #4
   124b8:	subs	r4, r4, #1
   124bc:	bne	124ac <__assert_fail@plt+0xca8>
   124c0:	ldr	r0, [r8, #24]
   124c4:	bl	11654 <strlen@plt>
   124c8:	str	r0, [r8, #20]
   124cc:	ldr	r0, [sp, #40]	; 0x28
   124d0:	blx	r0
   124d4:	cmn	r0, #1
   124d8:	beq	12780 <__assert_fail@plt+0xf7c>
   124dc:	mov	r1, r0
   124e0:	mov	r6, r9
   124e4:	mov	r4, r7
   124e8:	ldr	r0, [sp, #44]	; 0x2c
   124ec:	add	r0, r0, #4
   124f0:	str	r0, [sp, #28]
   124f4:	ldr	r0, [sp, #36]	; 0x24
   124f8:	add	r0, r0, #4
   124fc:	str	r0, [sp, #24]
   12500:	sub	r0, r9, #1
   12504:	str	r0, [sp, #20]
   12508:	movw	r8, #53744	; 0xd1f0
   1250c:	movt	r8, #2
   12510:	mov	r9, #0
   12514:	movw	sl, #53860	; 0xd264
   12518:	movt	sl, #2
   1251c:	str	r6, [sp, #32]
   12520:	str	r1, [sp, #48]	; 0x30
   12524:	mov	r0, r8
   12528:	mov	r1, r4
   1252c:	bl	14bd8 <__assert_fail@plt+0x33d4>
   12530:	str	r9, [r4, #16]
   12534:	movw	r0, #53704	; 0xd1c8
   12538:	movt	r0, #2
   1253c:	mov	r5, r0
   12540:	ldr	r0, [r0]
   12544:	ldr	r1, [sp, #44]	; 0x2c
   12548:	ldr	r2, [r1, r0, lsl #2]
   1254c:	ldr	r1, [sp, #36]	; 0x24
   12550:	ldr	r0, [r1, r0, lsl #2]
   12554:	ldrb	r1, [sl]
   12558:	eor	r1, r1, #1
   1255c:	str	r9, [sp]
   12560:	str	r9, [sp, #4]
   12564:	str	r1, [sp, #8]
   12568:	add	r3, r0, #1
   1256c:	mov	r0, r8
   12570:	mov	r1, r4
   12574:	bl	146ac <__assert_fail@plt+0x2ea8>
   12578:	mov	r0, #1
   1257c:	strb	r0, [sl]
   12580:	ldr	r2, [r5]
   12584:	add	r1, r2, #1
   12588:	cmp	r1, r6
   1258c:	mov	r0, r8
   12590:	mov	ip, #0
   12594:	movw	r5, #53812	; 0xd234
   12598:	movt	r5, #2
   1259c:	bge	12608 <__assert_fail@plt+0xe04>
   125a0:	ldr	r1, [sp, #48]	; 0x30
   125a4:	sub	r1, r1, #1
   125a8:	str	r1, [sp, #48]	; 0x30
   125ac:	ldr	r1, [sp, #28]
   125b0:	add	r6, r1, r2, lsl #2
   125b4:	ldr	r1, [sp, #24]
   125b8:	add	r7, r1, r2, lsl #2
   125bc:	ldr	r1, [sp, #20]
   125c0:	sub	r9, r1, r2
   125c4:	ldr	r3, [r7], #4
   125c8:	ldr	r2, [r6], #4
   125cc:	ldrb	r1, [sl]
   125d0:	ldr	lr, [r5]
   125d4:	eor	r8, r1, #1
   125d8:	str	ip, [sp]
   125dc:	stmib	sp, {ip, lr}
   125e0:	ldr	r1, [sp, #48]	; 0x30
   125e4:	str	r1, [sp, #12]
   125e8:	str	r8, [sp, #16]
   125ec:	mov	r1, r4
   125f0:	mov	r8, r0
   125f4:	bl	1450c <__assert_fail@plt+0x2d08>
   125f8:	mov	ip, #0
   125fc:	mov	r0, r8
   12600:	subs	r9, r9, #1
   12604:	bne	125c4 <__assert_fail@plt+0xdc0>
   12608:	mov	r1, r4
   1260c:	mov	r8, r0
   12610:	bl	148d4 <__assert_fail@plt+0x30d0>
   12614:	ldr	r0, [sp, #40]	; 0x28
   12618:	blx	r0
   1261c:	mov	r1, r0
   12620:	cmn	r0, #1
   12624:	ldr	r6, [sp, #32]
   12628:	mov	r9, #0
   1262c:	bne	12520 <__assert_fail@plt+0xd1c>
   12630:	b	12780 <__assert_fail@plt+0xf7c>
   12634:	ldr	r0, [r5]
   12638:	cmp	r0, r9
   1263c:	bge	126a8 <__assert_fail@plt+0xea4>
   12640:	movw	r8, #53860	; 0xd264
   12644:	movt	r8, #2
   12648:	mov	r7, #0
   1264c:	movw	r4, #53744	; 0xd1f0
   12650:	movt	r4, #2
   12654:	movw	sl, #53816	; 0xd238
   12658:	movt	sl, #2
   1265c:	ldr	r1, [sp, #44]	; 0x2c
   12660:	ldr	r6, [r1, r0, lsl #2]
   12664:	mov	r0, r6
   12668:	bl	11654 <strlen@plt>
   1266c:	ldrb	r1, [r8]
   12670:	eor	r1, r1, #1
   12674:	str	r7, [sp]
   12678:	str	r7, [sp, #4]
   1267c:	str	r1, [sp, #8]
   12680:	add	r3, r0, #1
   12684:	mov	r0, r4
   12688:	mov	r1, sl
   1268c:	mov	r2, r6
   12690:	bl	146ac <__assert_fail@plt+0x2ea8>
   12694:	ldr	r0, [r5]
   12698:	add	r0, r0, #1
   1269c:	str	r0, [r5]
   126a0:	cmp	r0, r9
   126a4:	blt	1265c <__assert_fail@plt+0xe58>
   126a8:	movw	r0, #53860	; 0xd264
   126ac:	movt	r0, #2
   126b0:	mov	r1, #1
   126b4:	strb	r1, [r0]
   126b8:	movw	r0, #53816	; 0xd238
   126bc:	movt	r0, #2
   126c0:	mov	r2, r0
   126c4:	ldr	r0, [r0]
   126c8:	ldr	r1, [r2, #16]
   126cc:	str	r1, [r2, #20]
   126d0:	movw	r7, #53744	; 0xd1f0
   126d4:	movt	r7, #2
   126d8:	str	r0, [r7, #28]
   126dc:	ldr	r0, [sp, #40]	; 0x28
   126e0:	blx	r0
   126e4:	cmn	r0, #1
   126e8:	beq	12734 <__assert_fail@plt+0xf30>
   126ec:	movw	r5, #53864	; 0xd268
   126f0:	movt	r5, #2
   126f4:	movw	r4, #53816	; 0xd238
   126f8:	movt	r4, #2
   126fc:	mov	r6, #0
   12700:	ldr	r0, [r5]
   12704:	ldr	r1, [r7, #36]	; 0x24
   12708:	sub	r1, r1, #1
   1270c:	cmp	r1, r0
   12710:	bcs	12724 <__assert_fail@plt+0xf20>
   12714:	mov	r0, r7
   12718:	mov	r1, r4
   1271c:	bl	148d4 <__assert_fail@plt+0x30d0>
   12720:	str	r6, [r5]
   12724:	ldr	r0, [sp, #40]	; 0x28
   12728:	blx	r0
   1272c:	cmn	r0, #1
   12730:	bne	12700 <__assert_fail@plt+0xefc>
   12734:	ldr	r0, [r7, #28]
   12738:	movw	r1, #53816	; 0xd238
   1273c:	movt	r1, #2
   12740:	ldr	r1, [r1]
   12744:	cmp	r1, r0
   12748:	bne	1276c <__assert_fail@plt+0xf68>
   1274c:	ldr	r0, [sp, #36]	; 0x24
   12750:	cmp	r0, #0
   12754:	beq	12780 <__assert_fail@plt+0xf7c>
   12758:	movw	r0, #53868	; 0xd26c
   1275c:	movt	r0, #2
   12760:	ldrb	r0, [r0]
   12764:	cmp	r0, #0
   12768:	bne	12780 <__assert_fail@plt+0xf7c>
   1276c:	movw	r0, #53744	; 0xd1f0
   12770:	movt	r0, #2
   12774:	movw	r1, #53816	; 0xd238
   12778:	movt	r1, #2
   1277c:	bl	148d4 <__assert_fail@plt+0x30d0>
   12780:	movw	r0, #53872	; 0xd270
   12784:	movt	r0, #2
   12788:	ldr	r1, [r0]
   1278c:	movw	r2, #53740	; 0xd1ec
   12790:	movt	r2, #2
   12794:	str	r1, [r2]
   12798:	ldr	r0, [r0]
   1279c:	sub	sp, fp, #28
   127a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127a4:	movw	r6, #53712	; 0xd1d0
   127a8:	movt	r6, #2
   127ac:	ldr	r4, [r6]
   127b0:	movw	r1, #41374	; 0xa19e
   127b4:	movt	r1, #1
   127b8:	mov	r0, #0
   127bc:	mov	r2, #5
   127c0:	bl	114ec <dcgettext@plt>
   127c4:	mov	r5, r0
   127c8:	bl	14c5c <__assert_fail@plt+0x3458>
   127cc:	mov	r2, r0
   127d0:	mov	r0, r4
   127d4:	mov	r1, r5
   127d8:	mov	r3, #0
   127dc:	bl	11678 <fprintf@plt>
   127e0:	ldr	r4, [r6]
   127e4:	movw	r1, #41421	; 0xa1cd
   127e8:	movt	r1, #1
   127ec:	mov	r0, #0
   127f0:	mov	r2, #5
   127f4:	bl	114ec <dcgettext@plt>
   127f8:	mov	r1, r0
   127fc:	ldr	r2, [r8, #4]
   12800:	mov	r0, r4
   12804:	mov	r3, #0
   12808:	bl	11678 <fprintf@plt>
   1280c:	ldr	r4, [r6]
   12810:	movw	r1, #41479	; 0xa207
   12814:	movt	r1, #1
   12818:	mov	r0, #0
   1281c:	mov	r2, #5
   12820:	bl	114ec <dcgettext@plt>
   12824:	mov	r1, r0
   12828:	ldr	r2, [r8, #8]
   1282c:	mov	r0, r4
   12830:	mov	r3, #0
   12834:	bl	11678 <fprintf@plt>
   12838:	ldr	r4, [r6]
   1283c:	movw	r1, #41556	; 0xa254
   12840:	movt	r1, #1
   12844:	mov	r0, #0
   12848:	mov	r2, #5
   1284c:	bl	114ec <dcgettext@plt>
   12850:	mov	r5, r0
   12854:	ldr	r7, [r8, #4]
   12858:	bl	14c5c <__assert_fail@plt+0x3458>
   1285c:	sub	r2, r7, r0
   12860:	mov	r0, r4
   12864:	mov	r1, r5
   12868:	movw	r5, #53704	; 0xd1c8
   1286c:	movt	r5, #2
   12870:	mov	r3, #0
   12874:	bl	11678 <fprintf@plt>
   12878:	ldr	r4, [r6]
   1287c:	movw	r1, #41611	; 0xa28b
   12880:	movt	r1, #1
   12884:	mov	r0, #0
   12888:	mov	r2, #5
   1288c:	bl	114ec <dcgettext@plt>
   12890:	mov	r1, r0
   12894:	ldr	r2, [r8, #12]
   12898:	mov	r0, r4
   1289c:	mov	r3, #0
   128a0:	bl	11678 <fprintf@plt>
   128a4:	ldr	r4, [r6]
   128a8:	movw	r1, #41663	; 0xa2bf
   128ac:	movt	r1, #1
   128b0:	mov	r0, #0
   128b4:	mov	r2, #5
   128b8:	bl	114ec <dcgettext@plt>
   128bc:	mov	r1, r0
   128c0:	mov	r0, r4
   128c4:	mvn	r2, #-2147483648	; 0x80000000
   128c8:	mov	r3, #0
   128cc:	bl	11678 <fprintf@plt>
   128d0:	mov	r0, #0
   128d4:	bl	117a4 <isatty@plt>
   128d8:	cmp	r0, #0
   128dc:	beq	12438 <__assert_fail@plt+0xc34>
   128e0:	ldr	r4, [r6]
   128e4:	movw	r1, #41723	; 0xa2fb
   128e8:	movt	r1, #1
   128ec:	mov	r0, #0
   128f0:	mov	r2, #5
   128f4:	bl	114ec <dcgettext@plt>
   128f8:	mov	r1, r0
   128fc:	mov	r0, r4
   12900:	bl	11678 <fprintf@plt>
   12904:	ldr	r0, [sp, #36]	; 0x24
   12908:	cmp	r0, #0
   1290c:	beq	12438 <__assert_fail@plt+0xc34>
   12910:	ldr	r4, [r6]
   12914:	movw	r1, #41896	; 0xa3a8
   12918:	movt	r1, #1
   1291c:	mov	r0, #0
   12920:	mov	r2, #5
   12924:	bl	114ec <dcgettext@plt>
   12928:	mov	r1, r0
   1292c:	ldr	r0, [r5]
   12930:	ldr	r2, [sp, #44]	; 0x2c
   12934:	ldr	r2, [r2, r0, lsl #2]
   12938:	mov	r0, r4
   1293c:	bl	11678 <fprintf@plt>
   12940:	b	12438 <__assert_fail@plt+0xc34>
   12944:	mov	r0, #1
   12948:	bl	1365c <__assert_fail@plt+0x1e58>
   1294c:	mov	r0, #0
   12950:	bl	1365c <__assert_fail@plt+0x1e58>
   12954:	bl	11684 <__errno_location@plt>
   12958:	ldr	r4, [r0]
   1295c:	movw	r1, #40799	; 0x9f5f
   12960:	movt	r1, #1
   12964:	mov	r0, #0
   12968:	mov	r2, #5
   1296c:	bl	114ec <dcgettext@plt>
   12970:	mov	r2, r0
   12974:	mov	r0, #1
   12978:	mov	r1, r4
   1297c:	bl	115b8 <error@plt>
   12980:	movw	r1, #41101	; 0xa08d
   12984:	movt	r1, #1
   12988:	mov	r0, #0
   1298c:	mov	r2, #5
   12990:	bl	114ec <dcgettext@plt>
   12994:	mov	r2, r0
   12998:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1299c:	movw	r1, #46836	; 0xb6f4
   129a0:	movt	r1, #1
   129a4:	ldr	r3, [r1, r0, lsl #4]
   129a8:	mov	r0, #1
   129ac:	mov	r1, #0
   129b0:	bl	115b8 <error@plt>
   129b4:	bl	11684 <__errno_location@plt>
   129b8:	ldr	r4, [r0]
   129bc:	movw	r1, #41158	; 0xa0c6
   129c0:	movt	r1, #1
   129c4:	mov	r0, #0
   129c8:	mov	r2, #5
   129cc:	bl	114ec <dcgettext@plt>
   129d0:	mov	r2, r0
   129d4:	movw	r0, #53800	; 0xd228
   129d8:	movt	r0, #2
   129dc:	ldr	r3, [r0]
   129e0:	mov	r0, #1
   129e4:	mov	r1, r4
   129e8:	bl	115b8 <error@plt>
   129ec:	movw	r0, #40892	; 0x9fbc
   129f0:	movt	r0, #1
   129f4:	movw	r1, #40861	; 0x9f9d
   129f8:	movt	r1, #1
   129fc:	movw	r3, #40869	; 0x9fa5
   12a00:	movt	r3, #1
   12a04:	movw	r2, #511	; 0x1ff
   12a08:	bl	11804 <__assert_fail@plt>
   12a0c:	movw	r0, #41257	; 0xa129
   12a10:	movt	r0, #1
   12a14:	movw	r1, #40861	; 0x9f9d
   12a18:	movt	r1, #1
   12a1c:	movw	r3, #40869	; 0x9fa5
   12a20:	movt	r3, #1
   12a24:	movw	r2, #723	; 0x2d3
   12a28:	bl	11804 <__assert_fail@plt>
   12a2c:	movw	r0, #40834	; 0x9f82
   12a30:	movt	r0, #1
   12a34:	movw	r1, #40861	; 0x9f9d
   12a38:	movt	r1, #1
   12a3c:	movw	r3, #40869	; 0x9fa5
   12a40:	movt	r3, #1
   12a44:	movw	r2, #483	; 0x1e3
   12a48:	bl	11804 <__assert_fail@plt>
   12a4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a50:	add	fp, sp, #28
   12a54:	sub	sp, sp, #28
   12a58:	movw	r0, #53876	; 0xd274
   12a5c:	movt	r0, #2
   12a60:	ldrb	r0, [r0]
   12a64:	mvn	r4, #0
   12a68:	cmp	r0, #0
   12a6c:	bne	12eec <__assert_fail@plt+0x16e8>
   12a70:	movw	r0, #53744	; 0xd1f0
   12a74:	movt	r0, #2
   12a78:	ldr	r4, [r0, #12]
   12a7c:	movw	r0, #53812	; 0xd234
   12a80:	movt	r0, #2
   12a84:	ldr	r5, [r0]
   12a88:	movw	r0, #53816	; 0xd238
   12a8c:	movt	r0, #2
   12a90:	ldr	r6, [r0, #20]
   12a94:	movw	r8, #53804	; 0xd22c
   12a98:	movt	r8, #2
   12a9c:	ldr	r0, [r8]
   12aa0:	bl	117e0 <getc@plt>
   12aa4:	cmn	r0, #1
   12aa8:	beq	12d70 <__assert_fail@plt+0x156c>
   12aac:	add	r1, r5, r4
   12ab0:	sub	r1, r1, r6
   12ab4:	sub	r1, r1, #1
   12ab8:	str	r1, [sp, #16]
   12abc:	mvn	sl, #0
   12ac0:	movw	r6, #53864	; 0xd268
   12ac4:	movt	r6, #2
   12ac8:	mov	r4, #0
   12acc:	mov	r1, #1
   12ad0:	mov	r2, #0
   12ad4:	str	r2, [sp, #24]
   12ad8:	mov	r7, #1
   12adc:	str	r1, [sp, #20]
   12ae0:	mov	r9, sl
   12ae4:	mov	sl, r0
   12ae8:	cmp	r7, #3
   12aec:	bhi	12bec <__assert_fail@plt+0x13e8>
   12af0:	add	r0, pc, #0
   12af4:	ldr	pc, [r0, r7, lsl #2]
   12af8:	andeq	r2, r1, r4, lsr fp
   12afc:	andeq	r2, r1, r8, lsl #22
   12b00:	andeq	r2, r1, ip, asr ip
   12b04:	andeq	r2, r1, r8, ror #23
   12b08:	cmp	sl, #127	; 0x7f
   12b0c:	bhi	12bcc <__assert_fail@plt+0x13c8>
   12b10:	bl	11624 <__ctype_b_loc@plt>
   12b14:	sub	r1, sl, #10
   12b18:	cmp	r1, #4
   12b1c:	bcc	12b84 <__assert_fail@plt+0x1380>
   12b20:	ldr	r0, [r0]
   12b24:	add	r0, r0, sl, lsl #1
   12b28:	ldrh	r0, [r0]
   12b2c:	ands	r0, r0, #1
   12b30:	bne	12b84 <__assert_fail@plt+0x1380>
   12b34:	cmp	sl, #10
   12b38:	bne	12b9c <__assert_fail@plt+0x1398>
   12b3c:	cmp	r9, #127	; 0x7f
   12b40:	bhi	12b58 <__assert_fail@plt+0x1354>
   12b44:	bl	11624 <__ctype_b_loc@plt>
   12b48:	ldr	r0, [r0]
   12b4c:	ldrb	r0, [r0, r9, lsl #1]
   12b50:	tst	r0, #1
   12b54:	bne	12b64 <__assert_fail@plt+0x1360>
   12b58:	ldr	r0, [r6]
   12b5c:	add	r0, r0, #1
   12b60:	str	r0, [r6]
   12b64:	movw	r0, #53812	; 0xd234
   12b68:	movt	r0, #2
   12b6c:	ldr	r7, [r0]
   12b70:	subs	r0, r5, r7
   12b74:	movwne	r0, #1
   12b78:	orr	r0, r4, r0
   12b7c:	tst	r0, #1
   12b80:	bne	12e5c <__assert_fail@plt+0x1658>
   12b84:	ldr	r0, [r8]
   12b88:	bl	117e0 <getc@plt>
   12b8c:	mov	r7, #1
   12b90:	cmn	r0, #1
   12b94:	bne	12ae0 <__assert_fail@plt+0x12dc>
   12b98:	b	12d80 <__assert_fail@plt+0x157c>
   12b9c:	cmp	sl, #127	; 0x7f
   12ba0:	bhi	12bcc <__assert_fail@plt+0x13c8>
   12ba4:	movw	r0, #53744	; 0xd1f0
   12ba8:	movt	r0, #2
   12bac:	ldr	r0, [r0, #24]
   12bb0:	cmp	r0, #0
   12bb4:	bne	12bcc <__assert_fail@plt+0x13c8>
   12bb8:	bl	11624 <__ctype_b_loc@plt>
   12bbc:	ldr	r0, [r0]
   12bc0:	ldrb	r0, [r0, sl, lsl #1]
   12bc4:	tst	r0, #1
   12bc8:	bne	12c8c <__assert_fail@plt+0x1488>
   12bcc:	mov	r7, #3
   12bd0:	cmp	sl, #92	; 0x5c
   12bd4:	beq	12c74 <__assert_fail@plt+0x1470>
   12bd8:	cmp	sl, #34	; 0x22
   12bdc:	cmpne	sl, #39	; 0x27
   12be0:	beq	12d4c <__assert_fail@plt+0x1548>
   12be4:	mov	r4, #1
   12be8:	mov	r7, #0
   12bec:	cmp	sl, #0
   12bf0:	movweq	r0, #53880	; 0xd278
   12bf4:	movteq	r0, #2
   12bf8:	ldrbeq	r0, [r0]
   12bfc:	cmpeq	r0, #0
   12c00:	bne	12c38 <__assert_fail@plt+0x1434>
   12c04:	mov	r0, #0
   12c08:	movw	r1, #42904	; 0xa798
   12c0c:	movt	r1, #1
   12c10:	mov	r2, #5
   12c14:	bl	114ec <dcgettext@plt>
   12c18:	mov	r2, r0
   12c1c:	mov	r0, #0
   12c20:	mov	r1, #0
   12c24:	bl	115b8 <error@plt>
   12c28:	mov	r0, #1
   12c2c:	movw	r1, #53880	; 0xd278
   12c30:	movt	r1, #2
   12c34:	strb	r0, [r1]
   12c38:	ldr	r0, [sp, #16]
   12c3c:	cmp	r5, r0
   12c40:	bcs	12f28 <__assert_fail@plt+0x1724>
   12c44:	strb	sl, [r5], #1
   12c48:	ldr	r0, [r8]
   12c4c:	bl	117e0 <getc@plt>
   12c50:	cmn	r0, #1
   12c54:	bne	12ae0 <__assert_fail@plt+0x12dc>
   12c58:	b	12d80 <__assert_fail@plt+0x157c>
   12c5c:	cmp	sl, #10
   12c60:	beq	12f50 <__assert_fail@plt+0x174c>
   12c64:	mov	r7, #0
   12c68:	ldr	r0, [sp, #24]
   12c6c:	cmp	sl, r0
   12c70:	bne	12d44 <__assert_fail@plt+0x1540>
   12c74:	ldr	r0, [r8]
   12c78:	bl	117e0 <getc@plt>
   12c7c:	mov	r4, #1
   12c80:	cmn	r0, #1
   12c84:	bne	12ae0 <__assert_fail@plt+0x12dc>
   12c88:	b	12d80 <__assert_fail@plt+0x157c>
   12c8c:	mov	r0, #0
   12c90:	strb	r0, [r5], #1
   12c94:	movw	r0, #53812	; 0xd234
   12c98:	movt	r0, #2
   12c9c:	ldr	r7, [r0]
   12ca0:	sub	r4, r5, r7
   12ca4:	movw	r0, #53792	; 0xd220
   12ca8:	movt	r0, #2
   12cac:	ldr	r0, [r0]
   12cb0:	cmp	r0, #0
   12cb4:	beq	12cd8 <__assert_fail@plt+0x14d4>
   12cb8:	ldrb	r1, [r7]
   12cbc:	ldrb	r2, [r0]
   12cc0:	cmp	r2, r1
   12cc4:	bne	12cd8 <__assert_fail@plt+0x14d4>
   12cc8:	mov	r1, r7
   12ccc:	bl	11444 <strcmp@plt>
   12cd0:	cmp	r0, #0
   12cd4:	beq	12ef8 <__assert_fail@plt+0x16f4>
   12cd8:	movw	r0, #53860	; 0xd264
   12cdc:	movt	r0, #2
   12ce0:	ldrb	r0, [r0]
   12ce4:	mov	r2, #0
   12ce8:	eor	r0, r0, #1
   12cec:	str	r2, [sp]
   12cf0:	mov	r1, #0
   12cf4:	str	r1, [sp, #20]
   12cf8:	str	r2, [sp, #4]
   12cfc:	str	r0, [sp, #8]
   12d00:	movw	r0, #53744	; 0xd1f0
   12d04:	movt	r0, #2
   12d08:	movw	r1, #53816	; 0xd238
   12d0c:	movt	r1, #2
   12d10:	mov	r2, r7
   12d14:	mov	r3, r4
   12d18:	bl	146ac <__assert_fail@plt+0x2ea8>
   12d1c:	movw	r0, #53812	; 0xd234
   12d20:	movt	r0, #2
   12d24:	ldr	r5, [r0]
   12d28:	ldr	r0, [r8]
   12d2c:	bl	117e0 <getc@plt>
   12d30:	mov	r4, #1
   12d34:	cmn	r0, #1
   12d38:	mov	r7, #1
   12d3c:	bne	12ae0 <__assert_fail@plt+0x12dc>
   12d40:	b	12f18 <__assert_fail@plt+0x1714>
   12d44:	mov	r7, #2
   12d48:	b	12bec <__assert_fail@plt+0x13e8>
   12d4c:	ldr	r0, [r8]
   12d50:	bl	117e0 <getc@plt>
   12d54:	mov	r4, #1
   12d58:	mov	r7, #2
   12d5c:	cmn	r0, #1
   12d60:	str	sl, [sp, #24]
   12d64:	ldr	r1, [sp, #20]
   12d68:	bne	12adc <__assert_fail@plt+0x12d8>
   12d6c:	b	12d88 <__assert_fail@plt+0x1584>
   12d70:	mov	sl, #0
   12d74:	mov	r1, #1
   12d78:	mov	r7, #1
   12d7c:	b	12d88 <__assert_fail@plt+0x1584>
   12d80:	ldr	sl, [sp, #24]
   12d84:	ldr	r1, [sp, #20]
   12d88:	movw	r0, #53876	; 0xd274
   12d8c:	movt	r0, #2
   12d90:	mov	r2, #1
   12d94:	strb	r2, [r0]
   12d98:	movw	r0, #53812	; 0xd234
   12d9c:	movt	r0, #2
   12da0:	ldr	r6, [r0]
   12da4:	cmp	r5, r6
   12da8:	beq	12e54 <__assert_fail@plt+0x1650>
   12dac:	mov	r0, #0
   12db0:	strb	r0, [r5], #1
   12db4:	cmp	r7, #2
   12db8:	beq	12f88 <__assert_fail@plt+0x1784>
   12dbc:	mvn	r1, r1
   12dc0:	movw	r0, #53792	; 0xd220
   12dc4:	movt	r0, #2
   12dc8:	ldr	r0, [r0]
   12dcc:	clz	r2, r0
   12dd0:	lsr	r2, r2, #5
   12dd4:	orr	r1, r1, r2
   12dd8:	tst	r1, #1
   12ddc:	mvn	r4, #0
   12de0:	bne	12e04 <__assert_fail@plt+0x1600>
   12de4:	ldrb	r1, [r6]
   12de8:	ldrb	r2, [r0]
   12dec:	cmp	r2, r1
   12df0:	bne	12e04 <__assert_fail@plt+0x1600>
   12df4:	mov	r1, r6
   12df8:	bl	11444 <strcmp@plt>
   12dfc:	cmp	r0, #0
   12e00:	beq	12eec <__assert_fail@plt+0x16e8>
   12e04:	sub	r4, r5, r6
   12e08:	movw	r0, #53744	; 0xd1f0
   12e0c:	movt	r0, #2
   12e10:	ldr	r0, [r0, #24]
   12e14:	cmp	r0, #0
   12e18:	bne	12eec <__assert_fail@plt+0x16e8>
   12e1c:	movw	r0, #53860	; 0xd264
   12e20:	movt	r0, #2
   12e24:	ldrb	r0, [r0]
   12e28:	mov	r1, #0
   12e2c:	eor	r0, r0, #1
   12e30:	str	r1, [sp]
   12e34:	str	r1, [sp, #4]
   12e38:	str	r0, [sp, #8]
   12e3c:	movw	r0, #53744	; 0xd1f0
   12e40:	movt	r0, #2
   12e44:	movw	r1, #53816	; 0xd238
   12e48:	movt	r1, #2
   12e4c:	mov	r2, r6
   12e50:	b	12ee4 <__assert_fail@plt+0x16e0>
   12e54:	mvn	r4, #0
   12e58:	b	12eec <__assert_fail@plt+0x16e8>
   12e5c:	mov	r0, #0
   12e60:	strb	r0, [r5], #1
   12e64:	sub	r4, r5, r7
   12e68:	movw	r0, #53792	; 0xd220
   12e6c:	movt	r0, #2
   12e70:	ldr	r0, [r0]
   12e74:	cmp	r0, #0
   12e78:	beq	12e9c <__assert_fail@plt+0x1698>
   12e7c:	ldrb	r1, [r7]
   12e80:	ldrb	r2, [r0]
   12e84:	cmp	r2, r1
   12e88:	bne	12e9c <__assert_fail@plt+0x1698>
   12e8c:	mov	r1, r7
   12e90:	bl	11444 <strcmp@plt>
   12e94:	cmp	r0, #0
   12e98:	beq	12ef8 <__assert_fail@plt+0x16f4>
   12e9c:	movw	r0, #53744	; 0xd1f0
   12ea0:	movt	r0, #2
   12ea4:	ldr	r0, [r0, #24]
   12ea8:	cmp	r0, #0
   12eac:	bne	12eec <__assert_fail@plt+0x16e8>
   12eb0:	movw	r0, #53860	; 0xd264
   12eb4:	movt	r0, #2
   12eb8:	ldrb	r0, [r0]
   12ebc:	mov	r1, #0
   12ec0:	eor	r0, r0, #1
   12ec4:	str	r1, [sp]
   12ec8:	str	r1, [sp, #4]
   12ecc:	str	r0, [sp, #8]
   12ed0:	movw	r0, #53744	; 0xd1f0
   12ed4:	movt	r0, #2
   12ed8:	movw	r1, #53816	; 0xd238
   12edc:	movt	r1, #2
   12ee0:	mov	r2, r7
   12ee4:	mov	r3, r4
   12ee8:	bl	146ac <__assert_fail@plt+0x2ea8>
   12eec:	mov	r0, r4
   12ef0:	sub	sp, fp, #28
   12ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ef8:	mov	r0, #1
   12efc:	movw	r1, #53876	; 0xd274
   12f00:	movt	r1, #2
   12f04:	strb	r0, [r1]
   12f08:	ldr	r0, [sp, #20]
   12f0c:	tst	r0, #1
   12f10:	mvnne	r4, #0
   12f14:	b	12eec <__assert_fail@plt+0x16e8>
   12f18:	ldr	sl, [sp, #24]
   12f1c:	mov	r7, #1
   12f20:	mov	r1, #0
   12f24:	b	12d88 <__assert_fail@plt+0x1584>
   12f28:	bl	13d0c <__assert_fail@plt+0x2508>
   12f2c:	movw	r1, #43043	; 0xa823
   12f30:	movt	r1, #1
   12f34:	mov	r0, #0
   12f38:	mov	r2, #5
   12f3c:	bl	114ec <dcgettext@plt>
   12f40:	mov	r2, r0
   12f44:	mov	r0, #1
   12f48:	mov	r1, #0
   12f4c:	bl	115b8 <error@plt>
   12f50:	bl	13d0c <__assert_fail@plt+0x2508>
   12f54:	movw	r1, #42802	; 0xa732
   12f58:	movt	r1, #1
   12f5c:	mov	r0, #0
   12f60:	mov	r2, #5
   12f64:	bl	114ec <dcgettext@plt>
   12f68:	mov	r4, r0
   12f6c:	movw	r0, #42890	; 0xa78a
   12f70:	movt	r0, #1
   12f74:	movw	r1, #42897	; 0xa791
   12f78:	movt	r1, #1
   12f7c:	ldr	r2, [sp, #24]
   12f80:	cmp	r2, #34	; 0x22
   12f84:	b	12fb8 <__assert_fail@plt+0x17b4>
   12f88:	bl	13d0c <__assert_fail@plt+0x2508>
   12f8c:	movw	r1, #42802	; 0xa732
   12f90:	movt	r1, #1
   12f94:	mov	r0, #0
   12f98:	mov	r2, #5
   12f9c:	bl	114ec <dcgettext@plt>
   12fa0:	mov	r4, r0
   12fa4:	movw	r0, #42890	; 0xa78a
   12fa8:	movt	r0, #1
   12fac:	movw	r1, #42897	; 0xa791
   12fb0:	movt	r1, #1
   12fb4:	cmp	sl, #34	; 0x22
   12fb8:	moveq	r1, r0
   12fbc:	mov	r0, #0
   12fc0:	mov	r2, #5
   12fc4:	bl	114ec <dcgettext@plt>
   12fc8:	mov	r3, r0
   12fcc:	mov	r0, #1
   12fd0:	mov	r1, #0
   12fd4:	mov	r2, r4
   12fd8:	bl	115b8 <error@plt>
   12fdc:	bx	lr
   12fe0:	push	{r4, r5, fp, lr}
   12fe4:	add	fp, sp, #8
   12fe8:	bl	11630 <getpid@plt>
   12fec:	movw	r1, #53736	; 0xd1e8
   12ff0:	movt	r1, #2
   12ff4:	ldr	r1, [r1]
   12ff8:	cmp	r0, r1
   12ffc:	bne	13054 <__assert_fail@plt+0x1850>
   13000:	movw	r4, #53904	; 0xd290
   13004:	movt	r4, #2
   13008:	ldrb	r0, [r4]
   1300c:	cmp	r0, #0
   13010:	popne	{r4, r5, fp, pc}
   13014:	mov	r0, #1
   13018:	strb	r0, [r4]
   1301c:	mov	r5, #0
   13020:	mov	r0, #1
   13024:	mov	r1, #0
   13028:	bl	13d70 <__assert_fail@plt+0x256c>
   1302c:	strb	r5, [r4]
   13030:	movw	r0, #53740	; 0xd1ec
   13034:	movt	r0, #2
   13038:	ldr	r1, [r0]
   1303c:	movw	r0, #53872	; 0xd270
   13040:	movt	r0, #2
   13044:	ldr	r2, [r0]
   13048:	cmp	r1, r2
   1304c:	bne	13074 <__assert_fail@plt+0x1870>
   13050:	pop	{r4, r5, fp, pc}
   13054:	movw	r0, #43792	; 0xab10
   13058:	movt	r0, #1
   1305c:	movw	r1, #40861	; 0x9f9d
   13060:	movt	r1, #1
   13064:	movw	r3, #43812	; 0xab24
   13068:	movt	r3, #1
   1306c:	movw	r2, #1605	; 0x645
   13070:	bl	11804 <__assert_fail@plt>
   13074:	ldr	r0, [r0]
   13078:	bl	114a4 <_exit@plt>
   1307c:	push	{fp, lr}
   13080:	mov	fp, sp
   13084:	movw	r1, #42008	; 0xa418
   13088:	movt	r1, #1
   1308c:	mov	r0, #0
   13090:	mov	r2, #5
   13094:	bl	114ec <dcgettext@plt>
   13098:	mov	r2, r0
   1309c:	mov	r0, #1
   130a0:	mov	r1, #0
   130a4:	bl	115b8 <error@plt>
   130a8:	cmp	r0, r1
   130ac:	movcs	r0, r1
   130b0:	bx	lr
   130b4:	push	{r4, r5, r6, r7, fp, lr}
   130b8:	add	fp, sp, #16
   130bc:	sub	sp, sp, #16
   130c0:	mov	r4, r3
   130c4:	movw	r5, #53608	; 0xd168
   130c8:	movt	r5, #2
   130cc:	ldr	r0, [r5]
   130d0:	cmp	r0, #0
   130d4:	beq	13104 <__assert_fail@plt+0x1900>
   130d8:	ldr	r0, [r5]
   130dc:	movw	r6, #53884	; 0xd27c
   130e0:	movt	r6, #2
   130e4:	b	130f8 <__assert_fail@plt+0x18f4>
   130e8:	mov	r0, #0
   130ec:	mov	r1, #1
   130f0:	bl	13d70 <__assert_fail@plt+0x256c>
   130f4:	ldr	r0, [r5]
   130f8:	ldr	r1, [r6]
   130fc:	cmp	r1, r0
   13100:	bcs	130e8 <__assert_fail@plt+0x18e4>
   13104:	movw	r5, #53798	; 0xd226
   13108:	movt	r5, #2
   1310c:	ldrb	r0, [r5]
   13110:	cmp	r0, #1
   13114:	bne	13138 <__assert_fail@plt+0x1934>
   13118:	mov	r6, #1
   1311c:	mov	r0, #1
   13120:	bl	1404c <__assert_fail@plt+0x2848>
   13124:	cmp	r0, #0
   13128:	beq	1329c <__assert_fail@plt+0x1a98>
   1312c:	ldrb	r0, [r5]
   13130:	cmp	r0, #0
   13134:	bne	13150 <__assert_fail@plt+0x194c>
   13138:	movw	r0, #53796	; 0xd224
   1313c:	movt	r0, #2
   13140:	ldrb	r0, [r0]
   13144:	cmp	r0, #1
   13148:	moveq	r0, #0
   1314c:	bleq	1404c <__assert_fail@plt+0x2848>
   13150:	mov	r0, #0
   13154:	mov	r1, #0
   13158:	bl	13d70 <__assert_fail@plt+0x256c>
   1315c:	add	r0, sp, #8
   13160:	bl	184ec <__assert_fail@plt+0x6ce8>
   13164:	cmp	r0, #0
   13168:	bne	132a8 <__assert_fail@plt+0x1aa4>
   1316c:	ldr	r0, [sp, #12]
   13170:	mov	r1, #2
   13174:	mov	r2, #1
   13178:	bl	19304 <__assert_fail@plt+0x7b00>
   1317c:	bl	11738 <fork@plt>
   13180:	mov	r5, r0
   13184:	cmn	r0, #1
   13188:	ble	13208 <__assert_fail@plt+0x1a04>
   1318c:	cmp	r5, #0
   13190:	beq	132bc <__assert_fail@plt+0x1ab8>
   13194:	cmn	r5, #1
   13198:	beq	132f8 <__assert_fail@plt+0x1af4>
   1319c:	ldr	r0, [sp, #12]
   131a0:	bl	117ec <close@plt>
   131a4:	ldr	r0, [sp, #8]
   131a8:	add	r1, sp, #4
   131ac:	mov	r2, #4
   131b0:	bl	183e4 <__assert_fail@plt+0x6be0>
   131b4:	cmp	r0, #4
   131b8:	beq	13274 <__assert_fail@plt+0x1a70>
   131bc:	mov	r4, r0
   131c0:	cmp	r0, #0
   131c4:	beq	1325c <__assert_fail@plt+0x1a58>
   131c8:	cmn	r4, #1
   131cc:	bne	13324 <__assert_fail@plt+0x1b20>
   131d0:	ldr	r0, [sp, #8]
   131d4:	bl	117ec <close@plt>
   131d8:	bl	11684 <__errno_location@plt>
   131dc:	ldr	r4, [r0]
   131e0:	movw	r1, #43112	; 0xa868
   131e4:	movt	r1, #1
   131e8:	mov	r0, #0
   131ec:	mov	r2, #5
   131f0:	bl	114ec <dcgettext@plt>
   131f4:	mov	r2, r0
   131f8:	mov	r0, #0
   131fc:	mov	r1, r4
   13200:	bl	115b8 <error@plt>
   13204:	b	13264 <__assert_fail@plt+0x1a60>
   13208:	bl	11684 <__errno_location@plt>
   1320c:	mov	r6, r0
   13210:	ldr	r0, [r0]
   13214:	cmp	r0, #11
   13218:	bne	1318c <__assert_fail@plt+0x1988>
   1321c:	movw	r7, #53884	; 0xd27c
   13220:	movt	r7, #2
   13224:	ldr	r0, [r7]
   13228:	cmp	r0, #0
   1322c:	beq	1318c <__assert_fail@plt+0x1988>
   13230:	mov	r0, #0
   13234:	mov	r1, #1
   13238:	bl	13d70 <__assert_fail@plt+0x256c>
   1323c:	bl	11738 <fork@plt>
   13240:	mov	r5, r0
   13244:	cmp	r0, #0
   13248:	bge	1318c <__assert_fail@plt+0x1988>
   1324c:	ldr	r0, [r6]
   13250:	cmp	r0, #11
   13254:	beq	13224 <__assert_fail@plt+0x1a20>
   13258:	b	1318c <__assert_fail@plt+0x1988>
   1325c:	mov	r0, r5
   13260:	bl	1433c <__assert_fail@plt+0x2b38>
   13264:	ldr	r0, [sp, #8]
   13268:	bl	117ec <close@plt>
   1326c:	mov	r6, #1
   13270:	b	1329c <__assert_fail@plt+0x1a98>
   13274:	ldr	r0, [sp, #8]
   13278:	bl	117ec <close@plt>
   1327c:	mov	r1, sp
   13280:	mov	r6, #0
   13284:	mov	r0, r5
   13288:	mov	r2, #0
   1328c:	bl	1157c <waitpid@plt>
   13290:	ldr	r0, [sp, #4]
   13294:	cmp	r0, #7
   13298:	bne	13354 <__assert_fail@plt+0x1b50>
   1329c:	mov	r0, r6
   132a0:	sub	sp, fp, #16
   132a4:	pop	{r4, r5, r6, r7, fp, pc}
   132a8:	bl	11684 <__errno_location@plt>
   132ac:	ldr	r4, [r0]
   132b0:	movw	r1, #43066	; 0xa83a
   132b4:	movt	r1, #1
   132b8:	b	13308 <__assert_fail@plt+0x1b04>
   132bc:	ldr	r0, [sp, #8]
   132c0:	bl	117ec <close@plt>
   132c4:	movw	r0, #53872	; 0xd270
   132c8:	movt	r0, #2
   132cc:	mov	r1, #0
   132d0:	str	r1, [r0]
   132d4:	bl	14208 <__assert_fail@plt+0x2a04>
   132d8:	mov	r0, r4
   132dc:	bl	14e18 <__assert_fail@plt+0x3614>
   132e0:	cmp	r0, #0
   132e4:	beq	13364 <__assert_fail@plt+0x1b60>
   132e8:	bl	11684 <__errno_location@plt>
   132ec:	mov	r1, #7
   132f0:	str	r1, [r0]
   132f4:	b	13370 <__assert_fail@plt+0x1b6c>
   132f8:	bl	11684 <__errno_location@plt>
   132fc:	ldr	r4, [r0]
   13300:	movw	r1, #43100	; 0xa85c
   13304:	movt	r1, #1
   13308:	mov	r0, #0
   1330c:	mov	r2, #5
   13310:	bl	114ec <dcgettext@plt>
   13314:	mov	r2, r0
   13318:	mov	r0, #1
   1331c:	mov	r1, r4
   13320:	bl	115b8 <error@plt>
   13324:	bl	11684 <__errno_location@plt>
   13328:	ldr	r5, [r0]
   1332c:	movw	r1, #43202	; 0xa8c2
   13330:	movt	r1, #1
   13334:	mov	r0, #0
   13338:	mov	r2, #5
   1333c:	bl	114ec <dcgettext@plt>
   13340:	mov	r2, r0
   13344:	mov	r0, #1
   13348:	mov	r1, r5
   1334c:	mov	r3, r4
   13350:	bl	115b8 <error@plt>
   13354:	cmp	r0, #2
   13358:	bne	133d0 <__assert_fail@plt+0x1bcc>
   1335c:	mov	r0, #127	; 0x7f
   13360:	bl	1163c <exit@plt>
   13364:	ldr	r0, [r4]
   13368:	mov	r1, r4
   1336c:	bl	114bc <execvp@plt>
   13370:	bl	11684 <__errno_location@plt>
   13374:	mov	r5, r0
   13378:	ldr	r0, [r0]
   1337c:	cmp	r0, #0
   13380:	beq	13394 <__assert_fail@plt+0x1b90>
   13384:	ldr	r0, [sp, #12]
   13388:	mov	r1, r5
   1338c:	mov	r2, #4
   13390:	bl	116c0 <write@plt>
   13394:	ldr	r0, [sp, #12]
   13398:	bl	117ec <close@plt>
   1339c:	ldr	r1, [r5]
   133a0:	cmp	r1, #7
   133a4:	beq	133bc <__assert_fail@plt+0x1bb8>
   133a8:	ldr	r3, [r4]
   133ac:	movw	r2, #48419	; 0xbd23
   133b0:	movt	r2, #1
   133b4:	mov	r0, #0
   133b8:	bl	115b8 <error@plt>
   133bc:	ldr	r1, [r5]
   133c0:	mov	r0, #126	; 0x7e
   133c4:	cmp	r1, #2
   133c8:	movweq	r0, #127	; 0x7f
   133cc:	bl	114a4 <_exit@plt>
   133d0:	mov	r0, #126	; 0x7e
   133d4:	bl	1163c <exit@plt>
   133d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133dc:	add	fp, sp, #28
   133e0:	sub	sp, sp, #12
   133e4:	movw	sl, #53881	; 0xd279
   133e8:	movt	sl, #2
   133ec:	ldrb	r0, [sl]
   133f0:	mvn	r9, #0
   133f4:	cmp	r0, #0
   133f8:	bne	1350c <__assert_fail@plt+0x1d08>
   133fc:	movw	r0, #53744	; 0xd1f0
   13400:	movt	r0, #2
   13404:	ldr	r5, [r0, #12]
   13408:	movw	r0, #53812	; 0xd234
   1340c:	movt	r0, #2
   13410:	ldr	r6, [r0]
   13414:	movw	r0, #53816	; 0xd238
   13418:	movt	r0, #2
   1341c:	ldr	r4, [r0, #20]
   13420:	movw	r7, #53804	; 0xd22c
   13424:	movt	r7, #2
   13428:	ldr	r0, [r7]
   1342c:	bl	117e0 <getc@plt>
   13430:	cmn	r0, #1
   13434:	beq	13474 <__assert_fail@plt+0x1c70>
   13438:	add	r1, r6, r5
   1343c:	sub	r1, r1, r4
   13440:	sub	r5, r1, #1
   13444:	movw	r8, #53788	; 0xd21c
   13448:	movt	r8, #2
   1344c:	ldrb	r1, [r8]
   13450:	cmp	r0, r1
   13454:	beq	1349c <__assert_fail@plt+0x1c98>
   13458:	cmp	r6, r5
   1345c:	bcs	13518 <__assert_fail@plt+0x1d14>
   13460:	strb	r0, [r6], #1
   13464:	ldr	r0, [r7]
   13468:	bl	117e0 <getc@plt>
   1346c:	cmn	r0, #1
   13470:	bne	1344c <__assert_fail@plt+0x1c48>
   13474:	mov	r0, #1
   13478:	strb	r0, [sl]
   1347c:	movw	r0, #53812	; 0xd234
   13480:	movt	r0, #2
   13484:	ldr	r2, [r0]
   13488:	cmp	r6, r2
   1348c:	beq	1350c <__assert_fail@plt+0x1d08>
   13490:	mov	r0, #0
   13494:	strb	r0, [r6], #1
   13498:	b	134c4 <__assert_fail@plt+0x1cc0>
   1349c:	movw	r0, #53864	; 0xd268
   134a0:	movt	r0, #2
   134a4:	ldr	r1, [r0]
   134a8:	add	r1, r1, #1
   134ac:	str	r1, [r0]
   134b0:	mov	r0, #0
   134b4:	strb	r0, [r6], #1
   134b8:	movw	r1, #53812	; 0xd234
   134bc:	movt	r1, #2
   134c0:	ldr	r2, [r1]
   134c4:	sub	r9, r6, r2
   134c8:	movw	r1, #53744	; 0xd1f0
   134cc:	movt	r1, #2
   134d0:	ldr	r1, [r1, #24]
   134d4:	cmp	r1, #0
   134d8:	bne	1350c <__assert_fail@plt+0x1d08>
   134dc:	movw	r1, #53860	; 0xd264
   134e0:	movt	r1, #2
   134e4:	ldrb	r1, [r1]
   134e8:	eor	r1, r1, #1
   134ec:	str	r0, [sp]
   134f0:	stmib	sp, {r0, r1}
   134f4:	movw	r0, #53744	; 0xd1f0
   134f8:	movt	r0, #2
   134fc:	movw	r1, #53816	; 0xd238
   13500:	movt	r1, #2
   13504:	mov	r3, r9
   13508:	bl	146ac <__assert_fail@plt+0x2ea8>
   1350c:	mov	r0, r9
   13510:	sub	sp, fp, #28
   13514:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13518:	bl	13d0c <__assert_fail@plt+0x2508>
   1351c:	movw	r1, #43043	; 0xa823
   13520:	movt	r1, #1
   13524:	mov	r0, #0
   13528:	mov	r2, #5
   1352c:	bl	114ec <dcgettext@plt>
   13530:	mov	r2, r0
   13534:	mov	r0, #1
   13538:	mov	r1, #0
   1353c:	bl	115b8 <error@plt>
   13540:	push	{r4, sl, fp, lr}
   13544:	add	fp, sp, #8
   13548:	mov	r4, r0
   1354c:	bl	11654 <strlen@plt>
   13550:	mov	r1, r0
   13554:	ldrb	r0, [r4]
   13558:	cmp	r1, #1
   1355c:	popeq	{r4, sl, fp, pc}
   13560:	cmp	r0, #92	; 0x5c
   13564:	bne	13634 <__assert_fail@plt+0x1e30>
   13568:	ldrb	r0, [r4, #1]
   1356c:	sub	r1, r0, #92	; 0x5c
   13570:	cmp	r1, #26
   13574:	bhi	135f8 <__assert_fail@plt+0x1df4>
   13578:	mov	r0, #7
   1357c:	add	r2, pc, #0
   13580:	ldr	pc, [r2, r1, lsl #2]
   13584:	strdeq	r3, [r1], -r0
   13588:	strdeq	r3, [r1], -r8
   1358c:	strdeq	r3, [r1], -r8
   13590:	strdeq	r3, [r1], -r8
   13594:	strdeq	r3, [r1], -r8
   13598:	andeq	r3, r1, r0, lsr #12
   1359c:	andeq	r3, r1, ip, lsl r6
   135a0:	strdeq	r3, [r1], -r8
   135a4:	strdeq	r3, [r1], -r8
   135a8:	strdeq	r3, [r1], -r8
   135ac:	andeq	r3, r1, r4, lsr #12
   135b0:	strdeq	r3, [r1], -r8
   135b4:	strdeq	r3, [r1], -r8
   135b8:	strdeq	r3, [r1], -r8
   135bc:	strdeq	r3, [r1], -r8
   135c0:	strdeq	r3, [r1], -r8
   135c4:	strdeq	r3, [r1], -r8
   135c8:	strdeq	r3, [r1], -r8
   135cc:	andeq	r3, r1, ip, lsr #12
   135d0:	strdeq	r3, [r1], -r8
   135d4:	strdeq	r3, [r1], -r8
   135d8:	strdeq	r3, [r1], -r8
   135dc:	andeq	r3, r1, r4, lsl #12
   135e0:	strdeq	r3, [r1], -r8
   135e4:	andeq	r3, r1, ip, lsl #12
   135e8:	strdeq	r3, [r1], -r8
   135ec:	andeq	r3, r1, r4, lsl r6
   135f0:	mov	r0, #92	; 0x5c
   135f4:	pop	{r4, sl, fp, pc}
   135f8:	mov	r0, r4
   135fc:	pop	{r4, sl, fp, lr}
   13600:	b	13bd8 <__assert_fail@plt+0x23d4>
   13604:	mov	r0, #13
   13608:	pop	{r4, sl, fp, pc}
   1360c:	mov	r0, #9
   13610:	pop	{r4, sl, fp, pc}
   13614:	mov	r0, #11
   13618:	pop	{r4, sl, fp, pc}
   1361c:	mov	r0, #8
   13620:	pop	{r4, sl, fp, pc}
   13624:	mov	r0, #12
   13628:	pop	{r4, sl, fp, pc}
   1362c:	mov	r0, #10
   13630:	pop	{r4, sl, fp, pc}
   13634:	movw	r1, #42177	; 0xa4c1
   13638:	movt	r1, #1
   1363c:	mov	r0, #0
   13640:	mov	r2, #5
   13644:	bl	114ec <dcgettext@plt>
   13648:	mov	r2, r0
   1364c:	mov	r0, #1
   13650:	mov	r1, #0
   13654:	mov	r3, r4
   13658:	bl	115b8 <error@plt>
   1365c:	push	{fp, lr}
   13660:	mov	fp, sp
   13664:	mov	r4, r0
   13668:	cmp	r0, #0
   1366c:	bne	13940 <__assert_fail@plt+0x213c>
   13670:	movw	r6, #53724	; 0xd1dc
   13674:	movt	r6, #2
   13678:	ldr	r5, [r6]
   1367c:	movw	r1, #44012	; 0xabec
   13680:	movt	r1, #1
   13684:	mov	r0, #0
   13688:	mov	r2, #5
   1368c:	bl	114ec <dcgettext@plt>
   13690:	mov	r1, r0
   13694:	movw	r7, #53936	; 0xd2b0
   13698:	movt	r7, #2
   1369c:	ldr	r2, [r7]
   136a0:	mov	r0, r5
   136a4:	bl	11678 <fprintf@plt>
   136a8:	movw	r1, #44061	; 0xac1d
   136ac:	movt	r1, #1
   136b0:	mov	r0, #0
   136b4:	mov	r2, #5
   136b8:	bl	114ec <dcgettext@plt>
   136bc:	ldr	r1, [r6]
   136c0:	bl	117bc <fputs@plt>
   136c4:	movw	r1, #44139	; 0xac6b
   136c8:	movt	r1, #1
   136cc:	mov	r0, #0
   136d0:	mov	r2, #5
   136d4:	bl	114ec <dcgettext@plt>
   136d8:	ldr	r1, [r6]
   136dc:	bl	117bc <fputs@plt>
   136e0:	movw	r1, #44256	; 0xace0
   136e4:	movt	r1, #1
   136e8:	mov	r0, #0
   136ec:	mov	r2, #5
   136f0:	bl	114ec <dcgettext@plt>
   136f4:	ldr	r1, [r6]
   136f8:	bl	117bc <fputs@plt>
   136fc:	movw	r1, #44468	; 0xadb4
   13700:	movt	r1, #1
   13704:	mov	r0, #0
   13708:	mov	r2, #5
   1370c:	bl	114ec <dcgettext@plt>
   13710:	ldr	r1, [r6]
   13714:	bl	117bc <fputs@plt>
   13718:	movw	r1, #44545	; 0xae01
   1371c:	movt	r1, #1
   13720:	mov	r0, #0
   13724:	mov	r2, #5
   13728:	bl	114ec <dcgettext@plt>
   1372c:	ldr	r1, [r6]
   13730:	bl	117bc <fputs@plt>
   13734:	movw	r1, #44779	; 0xaeeb
   13738:	movt	r1, #1
   1373c:	mov	r0, #0
   13740:	mov	r2, #5
   13744:	bl	114ec <dcgettext@plt>
   13748:	ldr	r1, [r6]
   1374c:	bl	117bc <fputs@plt>
   13750:	movw	r1, #45004	; 0xafcc
   13754:	movt	r1, #1
   13758:	mov	r0, #0
   1375c:	mov	r2, #5
   13760:	bl	114ec <dcgettext@plt>
   13764:	ldr	r1, [r6]
   13768:	bl	117bc <fputs@plt>
   1376c:	movw	r1, #45153	; 0xb061
   13770:	movt	r1, #1
   13774:	mov	r0, #0
   13778:	mov	r2, #5
   1377c:	bl	114ec <dcgettext@plt>
   13780:	ldr	r1, [r6]
   13784:	bl	117bc <fputs@plt>
   13788:	movw	r1, #45205	; 0xb095
   1378c:	movt	r1, #1
   13790:	mov	r0, #0
   13794:	mov	r2, #5
   13798:	bl	114ec <dcgettext@plt>
   1379c:	ldr	r1, [r6]
   137a0:	bl	117bc <fputs@plt>
   137a4:	movw	r1, #45416	; 0xb168
   137a8:	movt	r1, #1
   137ac:	mov	r0, #0
   137b0:	mov	r2, #5
   137b4:	bl	114ec <dcgettext@plt>
   137b8:	ldr	r1, [r6]
   137bc:	bl	117bc <fputs@plt>
   137c0:	movw	r1, #45542	; 0xb1e6
   137c4:	movt	r1, #1
   137c8:	mov	r0, #0
   137cc:	mov	r2, #5
   137d0:	bl	114ec <dcgettext@plt>
   137d4:	ldr	r1, [r6]
   137d8:	bl	117bc <fputs@plt>
   137dc:	movw	r1, #45701	; 0xb285
   137e0:	movt	r1, #1
   137e4:	mov	r0, #0
   137e8:	mov	r2, #5
   137ec:	bl	114ec <dcgettext@plt>
   137f0:	ldr	r1, [r6]
   137f4:	bl	117bc <fputs@plt>
   137f8:	movw	r1, #45781	; 0xb2d5
   137fc:	movt	r1, #1
   13800:	mov	r0, #0
   13804:	mov	r2, #5
   13808:	bl	114ec <dcgettext@plt>
   1380c:	ldr	r1, [r6]
   13810:	bl	117bc <fputs@plt>
   13814:	movw	r1, #45997	; 0xb3ad
   13818:	movt	r1, #1
   1381c:	mov	r0, #0
   13820:	mov	r2, #5
   13824:	bl	114ec <dcgettext@plt>
   13828:	ldr	r1, [r6]
   1382c:	bl	117bc <fputs@plt>
   13830:	movw	r1, #46071	; 0xb3f7
   13834:	movt	r1, #1
   13838:	mov	r0, #0
   1383c:	mov	r2, #5
   13840:	bl	114ec <dcgettext@plt>
   13844:	ldr	r1, [r6]
   13848:	bl	117bc <fputs@plt>
   1384c:	movw	r1, #46134	; 0xb436
   13850:	movt	r1, #1
   13854:	mov	r0, #0
   13858:	mov	r2, #5
   1385c:	bl	114ec <dcgettext@plt>
   13860:	ldr	r1, [r6]
   13864:	bl	117bc <fputs@plt>
   13868:	movw	r1, #46214	; 0xb486
   1386c:	movt	r1, #1
   13870:	mov	r0, #0
   13874:	mov	r2, #5
   13878:	bl	114ec <dcgettext@plt>
   1387c:	ldr	r1, [r6]
   13880:	bl	117bc <fputs@plt>
   13884:	movw	r1, #46427	; 0xb55b
   13888:	movt	r1, #1
   1388c:	mov	r0, #0
   13890:	mov	r2, #5
   13894:	bl	114ec <dcgettext@plt>
   13898:	ldr	r1, [r6]
   1389c:	bl	117bc <fputs@plt>
   138a0:	movw	r1, #46501	; 0xb5a5
   138a4:	movt	r1, #1
   138a8:	mov	r0, #0
   138ac:	mov	r2, #5
   138b0:	bl	114ec <dcgettext@plt>
   138b4:	ldr	r1, [r6]
   138b8:	bl	117bc <fputs@plt>
   138bc:	movw	r1, #46568	; 0xb5e8
   138c0:	movt	r1, #1
   138c4:	mov	r0, #0
   138c8:	mov	r2, #5
   138cc:	bl	114ec <dcgettext@plt>
   138d0:	ldr	r1, [r6]
   138d4:	bl	117bc <fputs@plt>
   138d8:	movw	r1, #46637	; 0xb62d
   138dc:	movt	r1, #1
   138e0:	mov	r0, #0
   138e4:	mov	r2, #5
   138e8:	bl	114ec <dcgettext@plt>
   138ec:	ldr	r1, [r6]
   138f0:	bl	117bc <fputs@plt>
   138f4:	movw	r1, #46707	; 0xb673
   138f8:	movt	r1, #1
   138fc:	mov	r0, #0
   13900:	mov	r2, #5
   13904:	bl	114ec <dcgettext@plt>
   13908:	ldr	r1, [r6]
   1390c:	bl	117bc <fputs@plt>
   13910:	movw	r1, #46766	; 0xb6ae
   13914:	movt	r1, #1
   13918:	mov	r0, #0
   1391c:	mov	r2, #5
   13920:	bl	114ec <dcgettext@plt>
   13924:	ldr	r1, [r6]
   13928:	bl	117bc <fputs@plt>
   1392c:	ldr	r0, [r6]
   13930:	ldr	r1, [r7]
   13934:	bl	156b0 <__assert_fail@plt+0x3eac>
   13938:	mov	r0, r4
   1393c:	bl	1163c <exit@plt>
   13940:	movw	r0, #53712	; 0xd1d0
   13944:	movt	r0, #2
   13948:	ldr	r5, [r0]
   1394c:	movw	r1, #43973	; 0xabc5
   13950:	movt	r1, #1
   13954:	mov	r0, #0
   13958:	mov	r2, #5
   1395c:	bl	114ec <dcgettext@plt>
   13960:	mov	r1, r0
   13964:	movw	r0, #53936	; 0xd2b0
   13968:	movt	r0, #2
   1396c:	ldr	r2, [r0]
   13970:	mov	r0, r5
   13974:	bl	11678 <fprintf@plt>
   13978:	mov	r0, r4
   1397c:	bl	1163c <exit@plt>
   13980:	push	{r4, r5, fp, lr}
   13984:	add	fp, sp, #8
   13988:	sub	sp, sp, #8
   1398c:	mov	r4, r1
   13990:	mov	r5, r0
   13994:	movw	r1, #42724	; 0xa6e4
   13998:	movt	r1, #1
   1399c:	mov	r0, #0
   139a0:	mov	r2, #5
   139a4:	bl	114ec <dcgettext@plt>
   139a8:	mov	r2, r0
   139ac:	str	r5, [sp]
   139b0:	str	r4, [sp, #4]
   139b4:	mov	r0, #0
   139b8:	mov	r1, #0
   139bc:	mov	r3, r4
   139c0:	bl	115b8 <error@plt>
   139c4:	sub	sp, fp, #8
   139c8:	pop	{r4, r5, fp, pc}
   139cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   139d0:	add	fp, sp, #24
   139d4:	sub	sp, sp, #16
   139d8:	mov	r7, r3
   139dc:	mov	r6, r2
   139e0:	mov	r5, r1
   139e4:	mov	r4, r0
   139e8:	add	r1, sp, #12
   139ec:	mov	r2, #10
   139f0:	bl	11450 <strtol@plt>
   139f4:	ldr	r1, [sp, #12]
   139f8:	cmp	r1, r4
   139fc:	beq	13adc <__assert_fail@plt+0x22d8>
   13a00:	ldrb	r1, [r1]
   13a04:	cmp	r1, #0
   13a08:	bne	13adc <__assert_fail@plt+0x22d8>
   13a0c:	ldr	r8, [fp, #8]
   13a10:	cmp	r0, r6
   13a14:	blt	13a8c <__assert_fail@plt+0x2288>
   13a18:	cmp	r7, #0
   13a1c:	blt	13a7c <__assert_fail@plt+0x2278>
   13a20:	cmp	r0, r7
   13a24:	mov	r6, r0
   13a28:	ble	13a80 <__assert_fail@plt+0x227c>
   13a2c:	movw	r0, #53712	; 0xd1d0
   13a30:	movt	r0, #2
   13a34:	ldr	r6, [r0]
   13a38:	movw	r1, #43927	; 0xab97
   13a3c:	movt	r1, #1
   13a40:	mov	r0, #0
   13a44:	mov	r2, #5
   13a48:	bl	114ec <dcgettext@plt>
   13a4c:	mov	r1, r0
   13a50:	movw	r0, #53936	; 0xd2b0
   13a54:	movt	r0, #2
   13a58:	ldr	r2, [r0]
   13a5c:	stm	sp, {r5, r7}
   13a60:	mov	r0, r6
   13a64:	mov	r3, r4
   13a68:	bl	11678 <fprintf@plt>
   13a6c:	cmp	r8, #0
   13a70:	mov	r6, r7
   13a74:	beq	13a80 <__assert_fail@plt+0x227c>
   13a78:	b	13ad4 <__assert_fail@plt+0x22d0>
   13a7c:	mov	r6, r0
   13a80:	mov	r0, r6
   13a84:	sub	sp, fp, #24
   13a88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a8c:	movw	r0, #53712	; 0xd1d0
   13a90:	movt	r0, #2
   13a94:	ldr	r7, [r0]
   13a98:	movw	r1, #43881	; 0xab69
   13a9c:	movt	r1, #1
   13aa0:	mov	r0, #0
   13aa4:	mov	r2, #5
   13aa8:	bl	114ec <dcgettext@plt>
   13aac:	mov	r1, r0
   13ab0:	movw	r0, #53936	; 0xd2b0
   13ab4:	movt	r0, #2
   13ab8:	ldr	r2, [r0]
   13abc:	stm	sp, {r5, r6}
   13ac0:	mov	r0, r7
   13ac4:	mov	r3, r4
   13ac8:	bl	11678 <fprintf@plt>
   13acc:	cmp	r8, #0
   13ad0:	beq	13a80 <__assert_fail@plt+0x227c>
   13ad4:	mov	r0, #1
   13ad8:	bl	1365c <__assert_fail@plt+0x1e58>
   13adc:	movw	r0, #53712	; 0xd1d0
   13ae0:	movt	r0, #2
   13ae4:	ldr	r6, [r0]
   13ae8:	movw	r1, #43841	; 0xab41
   13aec:	movt	r1, #1
   13af0:	mov	r0, #0
   13af4:	mov	r2, #5
   13af8:	bl	114ec <dcgettext@plt>
   13afc:	mov	r1, r0
   13b00:	movw	r0, #53936	; 0xd2b0
   13b04:	movt	r0, #2
   13b08:	ldr	r2, [r0]
   13b0c:	str	r5, [sp]
   13b10:	mov	r0, r6
   13b14:	mov	r3, r4
   13b18:	bl	11678 <fprintf@plt>
   13b1c:	mov	r0, #1
   13b20:	bl	1365c <__assert_fail@plt+0x1e58>
   13b24:	movw	r0, #53608	; 0xd168
   13b28:	movt	r0, #2
   13b2c:	ldr	r1, [r0]
   13b30:	cmn	r1, #-2147483647	; 0x80000001
   13b34:	ldrne	r1, [r0]
   13b38:	addne	r1, r1, #1
   13b3c:	strne	r1, [r0]
   13b40:	movw	r0, #53888	; 0xd280
   13b44:	movt	r0, #2
   13b48:	mov	r1, #1
   13b4c:	str	r1, [r0]
   13b50:	bx	lr
   13b54:	movw	r0, #53608	; 0xd168
   13b58:	movt	r0, #2
   13b5c:	ldr	r1, [r0]
   13b60:	cmp	r1, #2
   13b64:	ldrge	r1, [r0]
   13b68:	subge	r1, r1, #1
   13b6c:	strge	r1, [r0]
   13b70:	bx	lr
   13b74:	push	{r4, r5, r6, sl, fp, lr}
   13b78:	add	fp, sp, #16
   13b7c:	mov	r5, #0
   13b80:	mov	r1, #0
   13b84:	bl	15140 <__assert_fail@plt+0x393c>
   13b88:	cmp	r0, #0
   13b8c:	blt	13bac <__assert_fail@plt+0x23a8>
   13b90:	mov	r4, r0
   13b94:	movw	r1, #42162	; 0xa4b2
   13b98:	movt	r1, #1
   13b9c:	bl	1142c <fdopen@plt>
   13ba0:	mov	r5, r0
   13ba4:	cmp	r0, #0
   13ba8:	beq	13bb4 <__assert_fail@plt+0x23b0>
   13bac:	mov	r0, r5
   13bb0:	pop	{r4, r5, r6, sl, fp, pc}
   13bb4:	bl	11684 <__errno_location@plt>
   13bb8:	mov	r5, r0
   13bbc:	ldr	r6, [r0]
   13bc0:	mov	r0, r4
   13bc4:	bl	117ec <close@plt>
   13bc8:	str	r6, [r5]
   13bcc:	mov	r5, #0
   13bd0:	mov	r0, r5
   13bd4:	pop	{r4, r5, r6, sl, fp, pc}
   13bd8:	push	{r4, r5, r6, sl, fp, lr}
   13bdc:	add	fp, sp, #16
   13be0:	sub	sp, sp, #8
   13be4:	mov	r4, r0
   13be8:	ldrb	r0, [r0]
   13bec:	cmp	r0, #92	; 0x5c
   13bf0:	bne	13c98 <__assert_fail@plt+0x2494>
   13bf4:	mov	r5, r4
   13bf8:	ldrb	r6, [r5, #1]!
   13bfc:	cmp	r6, #120	; 0x78
   13c00:	bne	13c10 <__assert_fail@plt+0x240c>
   13c04:	add	r5, r4, #2
   13c08:	mov	r6, #16
   13c0c:	b	13c2c <__assert_fail@plt+0x2428>
   13c10:	bl	11624 <__ctype_b_loc@plt>
   13c14:	ldr	r0, [r0]
   13c18:	add	r0, r0, r6, lsl #1
   13c1c:	ldrb	r0, [r0, #1]
   13c20:	mov	r6, #8
   13c24:	tst	r0, #8
   13c28:	beq	13ccc <__assert_fail@plt+0x24c8>
   13c2c:	bl	11684 <__errno_location@plt>
   13c30:	mov	r1, #0
   13c34:	str	r1, [r0]
   13c38:	str	r1, [sp, #4]
   13c3c:	add	r1, sp, #4
   13c40:	mov	r0, r5
   13c44:	mov	r2, r6
   13c48:	bl	11648 <strtoul@plt>
   13c4c:	cmp	r0, #256	; 0x100
   13c50:	bcs	13cb8 <__assert_fail@plt+0x24b4>
   13c54:	ldr	r5, [sp, #4]
   13c58:	ldrb	r1, [r5]
   13c5c:	cmp	r1, #0
   13c60:	uxtbeq	r0, r0
   13c64:	subeq	sp, fp, #16
   13c68:	popeq	{r4, r5, r6, sl, fp, pc}
   13c6c:	movw	r1, #42624	; 0xa680
   13c70:	movt	r1, #1
   13c74:	mov	r0, #0
   13c78:	mov	r2, #5
   13c7c:	bl	114ec <dcgettext@plt>
   13c80:	mov	r2, r0
   13c84:	str	r5, [sp]
   13c88:	mov	r0, #1
   13c8c:	mov	r1, #0
   13c90:	mov	r3, r4
   13c94:	bl	115b8 <error@plt>
   13c98:	movw	r0, #42306	; 0xa542
   13c9c:	movt	r0, #1
   13ca0:	movw	r1, #40861	; 0x9f9d
   13ca4:	movt	r1, #1
   13ca8:	movw	r3, #42319	; 0xa54f
   13cac:	movt	r3, #1
   13cb0:	mov	r2, #236	; 0xec
   13cb4:	bl	11804 <__assert_fail@plt>
   13cb8:	cmp	r6, #16
   13cbc:	bne	13ce8 <__assert_fail@plt+0x24e4>
   13cc0:	movw	r1, #42426	; 0xa5ba
   13cc4:	movt	r1, #1
   13cc8:	b	13cf0 <__assert_fail@plt+0x24ec>
   13ccc:	movw	r1, #42365	; 0xa57d
   13cd0:	movt	r1, #1
   13cd4:	mov	r0, #0
   13cd8:	mov	r2, #5
   13cdc:	bl	114ec <dcgettext@plt>
   13ce0:	mov	r2, r0
   13ce4:	b	13c88 <__assert_fail@plt+0x2484>
   13ce8:	movw	r1, #42525	; 0xa61d
   13cec:	movt	r1, #1
   13cf0:	mov	r0, #0
   13cf4:	mov	r2, #5
   13cf8:	bl	114ec <dcgettext@plt>
   13cfc:	mov	r2, r0
   13d00:	mov	r0, #255	; 0xff
   13d04:	str	r0, [sp]
   13d08:	b	13c88 <__assert_fail@plt+0x2484>
   13d0c:	movw	r0, #53744	; 0xd1f0
   13d10:	movt	r0, #2
   13d14:	ldr	r1, [r0, #24]
   13d18:	cmp	r1, #0
   13d1c:	bne	13d6c <__assert_fail@plt+0x2568>
   13d20:	movw	r1, #53860	; 0xd264
   13d24:	movt	r1, #2
   13d28:	ldrb	r1, [r1]
   13d2c:	cmp	r1, #1
   13d30:	bne	13d6c <__assert_fail@plt+0x2568>
   13d34:	ldr	r1, [r0, #28]
   13d38:	movw	r2, #53816	; 0xd238
   13d3c:	movt	r2, #2
   13d40:	ldr	r2, [r2]
   13d44:	cmp	r2, r1
   13d48:	bxeq	lr
   13d4c:	ldr	r0, [r0]
   13d50:	cmp	r0, #0
   13d54:	bne	13d6c <__assert_fail@plt+0x2568>
   13d58:	movw	r0, #53744	; 0xd1f0
   13d5c:	movt	r0, #2
   13d60:	movw	r1, #53816	; 0xd238
   13d64:	movt	r1, #2
   13d68:	b	148d4 <__assert_fail@plt+0x30d0>
   13d6c:	bx	lr
   13d70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d74:	add	fp, sp, #28
   13d78:	sub	sp, sp, #20
   13d7c:	mov	r5, r0
   13d80:	movw	r0, #53884	; 0xd27c
   13d84:	movt	r0, #2
   13d88:	ldr	r0, [r0]
   13d8c:	cmp	r0, #0
   13d90:	beq	14020 <__assert_fail@plt+0x281c>
   13d94:	mov	r7, #0
   13d98:	movw	sl, #53888	; 0xd280
   13d9c:	movt	sl, #2
   13da0:	eor	r2, r5, #1
   13da4:	add	r6, sp, #16
   13da8:	movw	r8, #53892	; 0xd284
   13dac:	movt	r8, #2
   13db0:	mov	r3, #0
   13db4:	str	r1, [sp, #8]
   13db8:	str	r2, [sp, #4]
   13dbc:	str	r7, [sl]
   13dc0:	str	r3, [sp, #12]
   13dc4:	cmp	r3, r1
   13dc8:	mov	r0, #0
   13dcc:	movwcs	r0, #1
   13dd0:	and	r7, r0, r2
   13dd4:	mvn	r0, #0
   13dd8:	mov	r1, r6
   13ddc:	mov	r2, r7
   13de0:	bl	1157c <waitpid@plt>
   13de4:	cmn	r0, #1
   13de8:	bne	13e38 <__assert_fail@plt+0x2634>
   13dec:	mov	r4, r8
   13df0:	bl	11684 <__errno_location@plt>
   13df4:	mov	r8, r0
   13df8:	ldr	r9, [r8]
   13dfc:	cmp	r9, #4
   13e00:	bne	14028 <__assert_fail@plt+0x2824>
   13e04:	cmp	r5, #0
   13e08:	mov	r0, r7
   13e0c:	moveq	r0, #1
   13e10:	ldr	r1, [sl]
   13e14:	cmp	r1, #0
   13e18:	movne	r7, r0
   13e1c:	mvn	r0, #0
   13e20:	mov	r1, r6
   13e24:	mov	r2, r7
   13e28:	bl	1157c <waitpid@plt>
   13e2c:	cmn	r0, #1
   13e30:	beq	13df8 <__assert_fail@plt+0x25f4>
   13e34:	mov	r8, r4
   13e38:	cmp	r0, #0
   13e3c:	beq	13fe0 <__assert_fail@plt+0x27dc>
   13e40:	ldr	r1, [r8]
   13e44:	cmp	r1, #0
   13e48:	beq	13e7c <__assert_fail@plt+0x2678>
   13e4c:	ldr	r2, [r8]
   13e50:	movw	r1, #53896	; 0xd288
   13e54:	movt	r1, #2
   13e58:	ldr	r3, [r1]
   13e5c:	mov	r1, #0
   13e60:	ldr	r4, [r3, r1, lsl #2]
   13e64:	cmp	r0, r4
   13e68:	beq	13e80 <__assert_fail@plt+0x267c>
   13e6c:	add	r1, r1, #1
   13e70:	cmp	r1, r2
   13e74:	bcc	13e60 <__assert_fail@plt+0x265c>
   13e78:	b	13e80 <__assert_fail@plt+0x267c>
   13e7c:	mov	r1, #0
   13e80:	cmp	r0, #0
   13e84:	beq	13e94 <__assert_fail@plt+0x2690>
   13e88:	ldr	r2, [r8]
   13e8c:	cmp	r1, r2
   13e90:	beq	13dd4 <__assert_fail@plt+0x25d0>
   13e94:	cmp	r0, #0
   13e98:	beq	13fe0 <__assert_fail@plt+0x27dc>
   13e9c:	movw	r0, #53896	; 0xd288
   13ea0:	movt	r0, #2
   13ea4:	ldr	r0, [r0]
   13ea8:	mov	r7, #0
   13eac:	str	r7, [r0, r1, lsl #2]
   13eb0:	movw	r4, #53884	; 0xd27c
   13eb4:	movt	r4, #2
   13eb8:	ldr	r0, [r4]
   13ebc:	sub	r0, r0, #1
   13ec0:	str	r0, [r4]
   13ec4:	ldr	r0, [sp, #16]
   13ec8:	and	r0, r0, #65280	; 0xff00
   13ecc:	cmp	r0, #65280	; 0xff00
   13ed0:	bne	13f08 <__assert_fail@plt+0x2704>
   13ed4:	mov	r0, #0
   13ed8:	movw	r1, #43355	; 0xa95b
   13edc:	movt	r1, #1
   13ee0:	mov	r2, #5
   13ee4:	bl	114ec <dcgettext@plt>
   13ee8:	mov	r2, r0
   13eec:	movw	r0, #53816	; 0xd238
   13ef0:	movt	r0, #2
   13ef4:	ldr	r0, [r0, #4]
   13ef8:	ldr	r3, [r0]
   13efc:	mov	r0, #124	; 0x7c
   13f00:	mov	r1, #0
   13f04:	bl	115b8 <error@plt>
   13f08:	ldrb	r0, [sp, #16]
   13f0c:	cmp	r0, #127	; 0x7f
   13f10:	bne	13f50 <__assert_fail@plt+0x274c>
   13f14:	mov	r0, #0
   13f18:	movw	r1, #43392	; 0xa980
   13f1c:	movt	r1, #1
   13f20:	mov	r2, #5
   13f24:	bl	114ec <dcgettext@plt>
   13f28:	mov	r2, r0
   13f2c:	movw	r0, #53816	; 0xd238
   13f30:	movt	r0, #2
   13f34:	ldr	r0, [r0, #4]
   13f38:	ldr	r3, [r0]
   13f3c:	ldrb	r0, [sp, #17]
   13f40:	str	r0, [sp]
   13f44:	mov	r0, #125	; 0x7d
   13f48:	mov	r1, #0
   13f4c:	bl	115b8 <error@plt>
   13f50:	ldr	r0, [sp, #16]
   13f54:	mov	r1, #2130706432	; 0x7f000000
   13f58:	and	r0, r1, r0, lsl #24
   13f5c:	add	r0, r0, #16777216	; 0x1000000
   13f60:	cmp	r0, #33554432	; 0x2000000
   13f64:	blt	13fa8 <__assert_fail@plt+0x27a4>
   13f68:	mov	r0, #0
   13f6c:	movw	r1, #43417	; 0xa999
   13f70:	movt	r1, #1
   13f74:	mov	r2, #5
   13f78:	bl	114ec <dcgettext@plt>
   13f7c:	mov	r2, r0
   13f80:	movw	r0, #53816	; 0xd238
   13f84:	movt	r0, #2
   13f88:	ldr	r0, [r0, #4]
   13f8c:	ldr	r3, [r0]
   13f90:	ldr	r0, [sp, #16]
   13f94:	and	r0, r0, #127	; 0x7f
   13f98:	str	r0, [sp]
   13f9c:	mov	r0, #125	; 0x7d
   13fa0:	mov	r1, #0
   13fa4:	bl	115b8 <error@plt>
   13fa8:	ldrb	r0, [sp, #17]
   13fac:	cmp	r0, #0
   13fb0:	ldr	r2, [sp, #4]
   13fb4:	movwne	r0, #53872	; 0xd270
   13fb8:	movtne	r0, #2
   13fbc:	movne	r1, #123	; 0x7b
   13fc0:	strne	r1, [r0]
   13fc4:	ldr	r3, [sp, #12]
   13fc8:	add	r3, r3, #1
   13fcc:	ldr	r0, [r4]
   13fd0:	cmp	r0, #0
   13fd4:	ldr	r1, [sp, #8]
   13fd8:	bne	13dbc <__assert_fail@plt+0x25b8>
   13fdc:	b	14020 <__assert_fail@plt+0x281c>
   13fe0:	tst	r7, #1
   13fe4:	bne	14020 <__assert_fail@plt+0x281c>
   13fe8:	movw	r1, #43312	; 0xa930
   13fec:	movt	r1, #1
   13ff0:	mov	r0, #0
   13ff4:	mov	r2, #5
   13ff8:	bl	114ec <dcgettext@plt>
   13ffc:	mov	r2, r0
   14000:	movw	r0, #53884	; 0xd27c
   14004:	movt	r0, #2
   14008:	ldr	r3, [r0]
   1400c:	mov	r0, #0
   14010:	mov	r1, #0
   14014:	bl	115b8 <error@plt>
   14018:	sub	sp, fp, #28
   1401c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14020:	sub	sp, fp, #28
   14024:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14028:	movw	r1, #43280	; 0xa910
   1402c:	movt	r1, #1
   14030:	mov	r0, #0
   14034:	mov	r2, #5
   14038:	bl	114ec <dcgettext@plt>
   1403c:	mov	r2, r0
   14040:	mov	r0, #1
   14044:	mov	r1, r9
   14048:	bl	115b8 <error@plt>
   1404c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14050:	add	fp, sp, #28
   14054:	sub	sp, sp, #4
   14058:	mov	r9, r0
   1405c:	movw	r5, #53816	; 0xd238
   14060:	movt	r5, #2
   14064:	ldr	r0, [r5]
   14068:	cmp	r0, #1
   1406c:	bne	14150 <__assert_fail@plt+0x294c>
   14070:	cmp	r9, #0
   14074:	beq	140ec <__assert_fail@plt+0x28e8>
   14078:	movw	r5, #53900	; 0xd28c
   1407c:	movt	r5, #2
   14080:	ldr	r0, [r5]
   14084:	cmp	r0, #0
   14088:	bne	140a4 <__assert_fail@plt+0x28a0>
   1408c:	movw	r0, #43478	; 0xa9d6
   14090:	movt	r0, #1
   14094:	bl	13b74 <__assert_fail@plt+0x2370>
   14098:	str	r0, [r5]
   1409c:	cmp	r0, #0
   140a0:	beq	141f4 <__assert_fail@plt+0x29f0>
   140a4:	movw	r4, #53712	; 0xd1d0
   140a8:	movt	r4, #2
   140ac:	ldr	r3, [r4]
   140b0:	movw	r0, #43523	; 0xaa03
   140b4:	movt	r0, #1
   140b8:	mov	r1, #4
   140bc:	mov	r2, #1
   140c0:	bl	11564 <fwrite@plt>
   140c4:	ldr	r0, [r4]
   140c8:	bl	194e8 <__assert_fail@plt+0x7ce4>
   140cc:	cmp	r0, #0
   140d0:	bne	141c8 <__assert_fail@plt+0x29c4>
   140d4:	ldr	r0, [r5]
   140d8:	bl	117e0 <getc@plt>
   140dc:	mov	r4, r0
   140e0:	cmp	r0, #10
   140e4:	bne	1411c <__assert_fail@plt+0x2918>
   140e8:	b	14138 <__assert_fail@plt+0x2934>
   140ec:	movw	r0, #53712	; 0xd1d0
   140f0:	movt	r0, #2
   140f4:	ldr	r1, [r0]
   140f8:	mov	r0, #10
   140fc:	bl	11780 <putc@plt>
   14100:	mov	r0, #0
   14104:	sub	sp, fp, #28
   14108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1410c:	ldr	r0, [r5]
   14110:	bl	117e0 <getc@plt>
   14114:	cmp	r0, #10
   14118:	beq	14138 <__assert_fail@plt+0x2934>
   1411c:	cmn	r0, #1
   14120:	bne	1410c <__assert_fail@plt+0x2908>
   14124:	bl	11684 <__errno_location@plt>
   14128:	ldr	r4, [r0]
   1412c:	movw	r1, #43528	; 0xaa08
   14130:	movt	r1, #1
   14134:	b	141d8 <__assert_fail@plt+0x29d4>
   14138:	orr	r1, r4, #32
   1413c:	mov	r0, #1
   14140:	cmp	r1, #121	; 0x79
   14144:	movne	r0, #0
   14148:	sub	sp, fp, #28
   1414c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14150:	mov	r4, #0
   14154:	movw	sl, #53712	; 0xd1d0
   14158:	movt	sl, #2
   1415c:	movw	r8, #43445	; 0xa9b5
   14160:	movt	r8, #1
   14164:	cmp	r4, #0
   14168:	movw	r6, #43450	; 0xa9ba
   1416c:	movt	r6, #1
   14170:	movw	r0, #44138	; 0xac6a
   14174:	movt	r0, #1
   14178:	moveq	r6, r0
   1417c:	ldr	r0, [r5, #4]
   14180:	ldr	r2, [r0, r4, lsl #2]
   14184:	ldr	r7, [sl]
   14188:	mov	r0, #0
   1418c:	mov	r1, #3
   14190:	bl	17d2c <__assert_fail@plt+0x6528>
   14194:	mov	r3, r0
   14198:	mov	r0, r7
   1419c:	mov	r1, r8
   141a0:	mov	r2, r6
   141a4:	bl	11678 <fprintf@plt>
   141a8:	cmn	r0, #1
   141ac:	ble	141c8 <__assert_fail@plt+0x29c4>
   141b0:	add	r4, r4, #1
   141b4:	ldr	r0, [r5]
   141b8:	sub	r0, r0, #1
   141bc:	cmp	r4, r0
   141c0:	bcc	14164 <__assert_fail@plt+0x2960>
   141c4:	b	14070 <__assert_fail@plt+0x286c>
   141c8:	bl	11684 <__errno_location@plt>
   141cc:	ldr	r4, [r0]
   141d0:	movw	r1, #43452	; 0xa9bc
   141d4:	movt	r1, #1
   141d8:	mov	r0, #0
   141dc:	mov	r2, #5
   141e0:	bl	114ec <dcgettext@plt>
   141e4:	mov	r2, r0
   141e8:	mov	r0, #1
   141ec:	mov	r1, r4
   141f0:	bl	115b8 <error@plt>
   141f4:	bl	11684 <__errno_location@plt>
   141f8:	ldr	r4, [r0]
   141fc:	movw	r1, #43487	; 0xa9df
   14200:	movt	r1, #1
   14204:	b	141d8 <__assert_fail@plt+0x29d4>
   14208:	push	{r4, r5, r6, sl, fp, lr}
   1420c:	add	fp, sp, #16
   14210:	bl	15270 <__assert_fail@plt+0x3a6c>
   14214:	cmp	r0, #0
   14218:	beq	14220 <__assert_fail@plt+0x2a1c>
   1421c:	bl	15290 <__assert_fail@plt+0x3a8c>
   14220:	mov	r0, #0
   14224:	bl	1433c <__assert_fail@plt+0x2b38>
   14228:	bl	14458 <__assert_fail@plt+0x2c54>
   1422c:	movw	r0, #53808	; 0xd230
   14230:	movt	r0, #2
   14234:	ldrb	r0, [r0]
   14238:	cmp	r0, #1
   1423c:	bne	14254 <__assert_fail@plt+0x2a50>
   14240:	movw	r0, #53797	; 0xd225
   14244:	movt	r0, #2
   14248:	ldrb	r0, [r0]
   1424c:	cmp	r0, #1
   14250:	bne	14300 <__assert_fail@plt+0x2afc>
   14254:	movw	r6, #53797	; 0xd225
   14258:	movt	r6, #2
   1425c:	ldrb	r5, [r6]
   14260:	mov	r0, #0
   14264:	bl	117ec <close@plt>
   14268:	movw	r0, #43478	; 0xa9d6
   1426c:	movt	r0, #1
   14270:	movw	r4, #43554	; 0xaa22
   14274:	movt	r4, #1
   14278:	cmp	r5, #0
   1427c:	movne	r4, r0
   14280:	mov	r0, r4
   14284:	mov	r1, #0
   14288:	bl	15b64 <__assert_fail@plt+0x4360>
   1428c:	cmn	r0, #1
   14290:	ble	142c0 <__assert_fail@plt+0x2abc>
   14294:	mov	r5, r0
   14298:	cmp	r0, #0
   1429c:	popeq	{r4, r5, r6, sl, fp, pc}
   142a0:	mov	r0, r5
   142a4:	mov	r1, #0
   142a8:	bl	11504 <dup2@plt>
   142ac:	cmp	r0, #0
   142b0:	bne	14304 <__assert_fail@plt+0x2b00>
   142b4:	mov	r0, r5
   142b8:	pop	{r4, r5, r6, sl, fp, lr}
   142bc:	b	117ec <close@plt>
   142c0:	ldrb	r6, [r6]
   142c4:	bl	11684 <__errno_location@plt>
   142c8:	ldr	r5, [r0]
   142cc:	mov	r0, #0
   142d0:	mov	r1, #8
   142d4:	mov	r2, r4
   142d8:	bl	17d2c <__assert_fail@plt+0x6528>
   142dc:	mov	r3, r0
   142e0:	movw	r2, #48419	; 0xbd23
   142e4:	movt	r2, #1
   142e8:	cmp	r6, #1
   142ec:	beq	14330 <__assert_fail@plt+0x2b2c>
   142f0:	mov	r0, #0
   142f4:	mov	r1, r5
   142f8:	pop	{r4, r5, r6, sl, fp, lr}
   142fc:	b	115b8 <error@plt>
   14300:	pop	{r4, r5, r6, sl, fp, pc}
   14304:	bl	11684 <__errno_location@plt>
   14308:	ldr	r4, [r0]
   1430c:	movw	r1, #43564	; 0xaa2c
   14310:	movt	r1, #1
   14314:	mov	r0, #0
   14318:	mov	r2, #5
   1431c:	bl	114ec <dcgettext@plt>
   14320:	mov	r2, r0
   14324:	mov	r0, #1
   14328:	mov	r1, r4
   1432c:	bl	115b8 <error@plt>
   14330:	mov	r0, #1
   14334:	mov	r1, r5
   14338:	bl	115b8 <error@plt>
   1433c:	push	{r4, r5, r6, r7, fp, lr}
   14340:	add	fp, sp, #16
   14344:	mov	r4, r0
   14348:	movw	r6, #53892	; 0xd284
   1434c:	movt	r6, #2
   14350:	ldr	r0, [r6]
   14354:	mov	r5, #0
   14358:	cmp	r0, #0
   1435c:	beq	143a0 <__assert_fail@plt+0x2b9c>
   14360:	movw	r1, #53896	; 0xd288
   14364:	movt	r1, #2
   14368:	ldr	r1, [r1]
   1436c:	ldr	r2, [r1]
   14370:	cmp	r2, #0
   14374:	beq	143a4 <__assert_fail@plt+0x2ba0>
   14378:	ldr	r0, [r6]
   1437c:	mov	r2, #1
   14380:	mov	r5, r2
   14384:	cmp	r2, r0
   14388:	bcs	143a4 <__assert_fail@plt+0x2ba0>
   1438c:	ldr	r3, [r1, r5, lsl #2]
   14390:	add	r2, r5, #1
   14394:	cmp	r3, #0
   14398:	bne	14380 <__assert_fail@plt+0x2b7c>
   1439c:	b	143a4 <__assert_fail@plt+0x2ba0>
   143a0:	mov	r0, #0
   143a4:	cmp	r5, r0
   143a8:	bne	143f4 <__assert_fail@plt+0x2bf0>
   143ac:	movw	r7, #53896	; 0xd288
   143b0:	movt	r7, #2
   143b4:	ldr	r0, [r7]
   143b8:	mov	r1, r6
   143bc:	mov	r2, #4
   143c0:	bl	18acc <__assert_fail@plt+0x72c8>
   143c4:	str	r0, [r7]
   143c8:	ldr	r0, [r6]
   143cc:	cmp	r5, r0
   143d0:	bcs	143f4 <__assert_fail@plt+0x2bf0>
   143d4:	ldr	r0, [r7]
   143d8:	mov	r1, #0
   143dc:	mov	r2, r5
   143e0:	str	r1, [r0, r2, lsl #2]
   143e4:	add	r2, r2, #1
   143e8:	ldr	r3, [r6]
   143ec:	cmp	r2, r3
   143f0:	bcc	143e0 <__assert_fail@plt+0x2bdc>
   143f4:	movw	r0, #53896	; 0xd288
   143f8:	movt	r0, #2
   143fc:	ldr	r0, [r0]
   14400:	ldr	r1, [r0, r5, lsl #2]
   14404:	cmp	r1, #0
   14408:	streq	r4, [r0, r5, lsl #2]
   1440c:	movweq	r0, #53868	; 0xd26c
   14410:	movteq	r0, #2
   14414:	moveq	r1, #1
   14418:	strbeq	r1, [r0]
   1441c:	movweq	r0, #53884	; 0xd27c
   14420:	movteq	r0, #2
   14424:	ldreq	r1, [r0]
   14428:	addeq	r1, r1, #1
   1442c:	streq	r1, [r0]
   14430:	moveq	r0, r5
   14434:	popeq	{r4, r5, r6, r7, fp, pc}
   14438:	movw	r0, #43750	; 0xaae6
   1443c:	movt	r0, #1
   14440:	movw	r1, #40861	; 0x9f9d
   14444:	movt	r1, #1
   14448:	movw	r3, #43763	; 0xaaf3
   1444c:	movt	r3, #1
   14450:	movw	r2, #1477	; 0x5c5
   14454:	bl	11804 <__assert_fail@plt>
   14458:	push	{r4, r5, fp, lr}
   1445c:	add	fp, sp, #8
   14460:	sub	sp, sp, #24
   14464:	mov	r3, r0
   14468:	add	r0, sp, #4
   1446c:	movw	r2, #43619	; 0xaa63
   14470:	movt	r2, #1
   14474:	mov	r1, #19
   14478:	bl	11690 <snprintf@plt>
   1447c:	cmp	r0, #20
   14480:	bcs	144ec <__assert_fail@plt+0x2ce8>
   14484:	movw	r5, #53800	; 0xd228
   14488:	movt	r5, #2
   1448c:	ldr	r0, [r5]
   14490:	cmp	r0, #0
   14494:	beq	144ac <__assert_fail@plt+0x2ca8>
   14498:	add	r1, sp, #4
   1449c:	mov	r2, #1
   144a0:	bl	1166c <setenv@plt>
   144a4:	cmn	r0, #1
   144a8:	ble	144b4 <__assert_fail@plt+0x2cb0>
   144ac:	sub	sp, fp, #8
   144b0:	pop	{r4, r5, fp, pc}
   144b4:	bl	11684 <__errno_location@plt>
   144b8:	ldr	r4, [r0]
   144bc:	movw	r1, #43712	; 0xaac0
   144c0:	movt	r1, #1
   144c4:	mov	r0, #0
   144c8:	mov	r2, #5
   144cc:	bl	114ec <dcgettext@plt>
   144d0:	mov	r2, r0
   144d4:	ldr	r3, [r5]
   144d8:	mov	r0, #0
   144dc:	mov	r1, r4
   144e0:	bl	115b8 <error@plt>
   144e4:	sub	sp, fp, #8
   144e8:	pop	{r4, r5, fp, pc}
   144ec:	movw	r0, #43622	; 0xaa66
   144f0:	movt	r0, #1
   144f4:	movw	r1, #40861	; 0x9f9d
   144f8:	movt	r1, #1
   144fc:	movw	r3, #43680	; 0xaaa0
   14500:	movt	r3, #1
   14504:	movw	r2, #1190	; 0x4a6
   14508:	bl	11804 <__assert_fail@plt>
   1450c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14510:	add	fp, sp, #28
   14514:	sub	sp, sp, #28
   14518:	str	r3, [sp, #24]
   1451c:	mov	r6, r2
   14520:	str	r1, [sp, #12]
   14524:	movw	r7, #53908	; 0xd294
   14528:	movt	r7, #2
   1452c:	ldr	r1, [r7]
   14530:	str	r0, [sp, #20]
   14534:	ldr	r5, [r0, #12]
   14538:	ldr	r4, [fp, #20]
   1453c:	ldr	r0, [fp, #12]
   14540:	cmp	r1, #0
   14544:	bne	1455c <__assert_fail@plt+0x2d58>
   14548:	mov	r8, r0
   1454c:	add	r0, r5, #1
   14550:	bl	189fc <__assert_fail@plt+0x71f8>
   14554:	str	r0, [r7]
   14558:	mov	r0, r8
   1455c:	sub	sl, r5, #1
   14560:	ldr	r9, [fp, #8]
   14564:	add	r0, r4, r0
   14568:	str	r0, [sp, #16]
   1456c:	ldr	r7, [r7]
   14570:	mov	r5, r4
   14574:	ldr	r0, [sp, #20]
   14578:	ldr	r1, [r0, #24]
   1457c:	mov	r0, r6
   14580:	bl	15bac <__assert_fail@plt+0x43a8>
   14584:	cmp	r0, #0
   14588:	ldr	r4, [sp, #24]
   1458c:	subne	r4, r0, r6
   14590:	cmp	sl, r4
   14594:	bls	14640 <__assert_fail@plt+0x2e3c>
   14598:	mov	r8, r0
   1459c:	mov	r0, r7
   145a0:	mov	r1, r6
   145a4:	mov	r2, r4
   145a8:	bl	116b4 <strncpy@plt>
   145ac:	ldr	r0, [sp, #24]
   145b0:	sub	r0, r0, r4
   145b4:	add	r6, r6, r4
   145b8:	add	r7, r7, r4
   145bc:	sub	sl, sl, r4
   145c0:	cmp	r8, #0
   145c4:	str	r0, [sp, #24]
   145c8:	beq	1462c <__assert_fail@plt+0x2e28>
   145cc:	ldr	r1, [sp, #16]
   145d0:	cmp	sl, r1
   145d4:	bls	14640 <__assert_fail@plt+0x2e3c>
   145d8:	mov	r4, r5
   145dc:	cmp	r9, #0
   145e0:	beq	145f8 <__assert_fail@plt+0x2df4>
   145e4:	mov	r0, r7
   145e8:	mov	r1, r9
   145ec:	bl	11594 <strcpy@plt>
   145f0:	ldr	r0, [fp, #12]
   145f4:	add	r7, r7, r0
   145f8:	ldr	r0, [sp, #16]
   145fc:	sub	sl, sl, r0
   14600:	mov	r0, r7
   14604:	ldr	r1, [fp, #16]
   14608:	bl	11594 <strcpy@plt>
   1460c:	add	r7, r7, r4
   14610:	ldr	r0, [sp, #20]
   14614:	ldr	r0, [r0, #20]
   14618:	ldr	r1, [sp, #24]
   1461c:	sub	r1, r1, r0
   14620:	str	r1, [sp, #24]
   14624:	add	r6, r6, r0
   14628:	b	14630 <__assert_fail@plt+0x2e2c>
   1462c:	mov	r4, r5
   14630:	ldrb	r0, [r6]
   14634:	cmp	r0, #0
   14638:	bne	14570 <__assert_fail@plt+0x2d6c>
   1463c:	b	1464c <__assert_fail@plt+0x2e48>
   14640:	ldrb	r0, [r6]
   14644:	cmp	r0, #0
   14648:	bne	14688 <__assert_fail@plt+0x2e84>
   1464c:	mov	r0, #0
   14650:	strb	r0, [r7], #1
   14654:	movw	r1, #53908	; 0xd294
   14658:	movt	r1, #2
   1465c:	ldr	r2, [r1]
   14660:	str	r0, [sp]
   14664:	str	r0, [sp, #4]
   14668:	ldr	r0, [fp, #24]
   1466c:	str	r0, [sp, #8]
   14670:	sub	r3, r7, r2
   14674:	ldr	r0, [sp, #20]
   14678:	ldr	r1, [sp, #12]
   1467c:	bl	146ac <__assert_fail@plt+0x2ea8>
   14680:	sub	sp, fp, #28
   14684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14688:	movw	r1, #47140	; 0xb824
   1468c:	movt	r1, #1
   14690:	mov	r0, #0
   14694:	mov	r2, #5
   14698:	bl	114ec <dcgettext@plt>
   1469c:	mov	r2, r0
   146a0:	mov	r0, #1
   146a4:	mov	r1, #0
   146a8:	bl	115b8 <error@plt>
   146ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146b0:	add	fp, sp, #28
   146b4:	sub	sp, sp, #4
   146b8:	cmp	r2, #0
   146bc:	beq	14884 <__assert_fail@plt+0x3080>
   146c0:	mov	r9, r3
   146c4:	mov	sl, r2
   146c8:	mov	r4, r1
   146cc:	mov	r6, r0
   146d0:	ldr	r8, [fp, #16]
   146d4:	ldr	r0, [fp, #12]
   146d8:	movw	r5, #47979	; 0xbb6b
   146dc:	movt	r5, #1
   146e0:	cmp	r2, r5
   146e4:	beq	14774 <__assert_fail@plt+0x2f70>
   146e8:	add	r0, r0, r9
   146ec:	ldr	r1, [r4, #16]
   146f0:	add	r0, r0, r1
   146f4:	ldr	r1, [r6, #12]
   146f8:	cmp	r0, r1
   146fc:	bls	14750 <__assert_fail@plt+0x2f4c>
   14700:	cmp	r8, #0
   14704:	bne	148a4 <__assert_fail@plt+0x30a0>
   14708:	ldr	r0, [r6, #28]
   1470c:	ldr	r1, [r4]
   14710:	cmp	r1, r0
   14714:	beq	148a4 <__assert_fail@plt+0x30a0>
   14718:	ldr	r0, [r6, #24]
   1471c:	cmp	r0, #0
   14720:	bne	148b0 <__assert_fail@plt+0x30ac>
   14724:	ldr	r0, [r6]
   14728:	cmp	r0, #0
   1472c:	beq	14744 <__assert_fail@plt+0x2f40>
   14730:	ldr	r0, [r6, #36]	; 0x24
   14734:	cmp	r0, #0
   14738:	ldreq	r0, [r6, #40]	; 0x28
   1473c:	cmpeq	r0, #0
   14740:	bne	148b0 <__assert_fail@plt+0x30ac>
   14744:	mov	r0, r6
   14748:	mov	r1, r4
   1474c:	bl	148d4 <__assert_fail@plt+0x30d0>
   14750:	mov	r0, r8
   14754:	mov	r1, r6
   14758:	mov	r2, r4
   1475c:	bl	14bfc <__assert_fail@plt+0x33f8>
   14760:	cmp	r0, #0
   14764:	beq	14774 <__assert_fail@plt+0x2f70>
   14768:	mov	r0, r6
   1476c:	mov	r1, r4
   14770:	bl	148d4 <__assert_fail@plt+0x30d0>
   14774:	cmp	r8, #0
   14778:	moveq	r0, #1
   1477c:	streq	r0, [r4, #28]
   14780:	ldr	r0, [r4]
   14784:	ldr	r1, [r4, #8]
   14788:	cmp	r0, r1
   1478c:	bcc	147c8 <__assert_fail@plt+0x2fc4>
   14790:	ldr	r0, [r4, #4]
   14794:	cmp	r0, #0
   14798:	beq	147b4 <__assert_fail@plt+0x2fb0>
   1479c:	lsl	r0, r1, #1
   147a0:	str	r0, [r4, #8]
   147a4:	ldr	r0, [r4, #4]
   147a8:	lsl	r1, r1, #3
   147ac:	bl	18a3c <__assert_fail@plt+0x7238>
   147b0:	b	147c4 <__assert_fail@plt+0x2fc0>
   147b4:	mov	r0, #64	; 0x40
   147b8:	str	r0, [r4, #8]
   147bc:	mov	r0, #256	; 0x100
   147c0:	bl	189fc <__assert_fail@plt+0x71f8>
   147c4:	str	r0, [r4, #4]
   147c8:	cmp	sl, r5
   147cc:	beq	1485c <__assert_fail@plt+0x3058>
   147d0:	ldr	r1, [fp, #8]
   147d4:	ldm	r4, {r2, r3}
   147d8:	ldr	r7, [r4, #12]
   147dc:	ldr	r0, [r4, #16]
   147e0:	add	r5, r2, #1
   147e4:	str	r5, [r4]
   147e8:	add	r7, r7, r0
   147ec:	str	r7, [r3, r2, lsl #2]
   147f0:	cmp	r1, #0
   147f4:	beq	14814 <__assert_fail@plt+0x3010>
   147f8:	ldr	r2, [r4, #12]
   147fc:	add	r0, r2, r0
   14800:	bl	11594 <strcpy@plt>
   14804:	ldr	r0, [r4, #16]
   14808:	ldr	r1, [fp, #12]
   1480c:	add	r0, r0, r1
   14810:	str	r0, [r4, #16]
   14814:	ldr	r0, [r4, #12]
   14818:	ldr	r1, [r4, #16]
   1481c:	add	r0, r0, r1
   14820:	mov	r1, sl
   14824:	bl	11594 <strcpy@plt>
   14828:	ldr	r0, [r4, #16]
   1482c:	add	r0, r0, r9
   14830:	str	r0, [r4, #16]
   14834:	mov	r0, r8
   14838:	mov	r1, r6
   1483c:	mov	r2, r4
   14840:	bl	14bfc <__assert_fail@plt+0x33f8>
   14844:	cmp	r0, #0
   14848:	beq	14870 <__assert_fail@plt+0x306c>
   1484c:	mov	r0, r6
   14850:	mov	r1, r4
   14854:	bl	148d4 <__assert_fail@plt+0x30d0>
   14858:	b	14870 <__assert_fail@plt+0x306c>
   1485c:	ldm	r4, {r0, r1}
   14860:	add	r2, r0, #1
   14864:	str	r2, [r4]
   14868:	mov	r2, #0
   1486c:	str	r2, [r1, r0, lsl #2]
   14870:	cmp	r8, #0
   14874:	ldrne	r0, [r4, #16]
   14878:	strne	r0, [r4, #20]
   1487c:	sub	sp, fp, #28
   14880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14884:	movw	r0, #47351	; 0xb8f7
   14888:	movt	r0, #1
   1488c:	movw	r1, #47177	; 0xb849
   14890:	movt	r1, #1
   14894:	movw	r3, #47363	; 0xb903
   14898:	movt	r3, #1
   1489c:	movw	r2, #341	; 0x155
   148a0:	bl	11804 <__assert_fail@plt>
   148a4:	movw	r1, #47481	; 0xb979
   148a8:	movt	r1, #1
   148ac:	b	148b8 <__assert_fail@plt+0x30b4>
   148b0:	movw	r1, #47540	; 0xb9b4
   148b4:	movt	r1, #1
   148b8:	mov	r0, #0
   148bc:	mov	r2, #5
   148c0:	bl	114ec <dcgettext@plt>
   148c4:	mov	r2, r0
   148c8:	mov	r0, #1
   148cc:	mov	r1, #0
   148d0:	bl	115b8 <error@plt>
   148d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148d8:	add	fp, sp, #28
   148dc:	sub	sp, sp, #4
   148e0:	mov	r9, r1
   148e4:	mov	r5, r0
   148e8:	bl	14a48 <__assert_fail@plt+0x3244>
   148ec:	ldr	r0, [r9]
   148f0:	cmp	r0, #0
   148f4:	beq	14a08 <__assert_fail@plt+0x3204>
   148f8:	ldr	r1, [r9, #4]
   148fc:	add	r1, r1, r0, lsl #2
   14900:	ldr	r1, [r1, #-4]
   14904:	cmp	r1, #0
   14908:	bne	14a28 <__assert_fail@plt+0x3224>
   1490c:	mov	r1, #4
   14910:	add	r0, r1, r0, lsl #2
   14914:	bl	189fc <__assert_fail@plt+0x71f8>
   14918:	mov	r8, r0
   1491c:	ldr	r7, [r9]
   14920:	mov	sl, #0
   14924:	str	sl, [sp]
   14928:	mov	r0, r5
   1492c:	mov	r1, r9
   14930:	mov	r2, r8
   14934:	mov	r3, r7
   14938:	bl	14a7c <__assert_fail@plt+0x3278>
   1493c:	mov	r6, r0
   14940:	ldr	r4, [r5, #32]
   14944:	ldr	r1, [r9, #24]
   14948:	mov	r0, r5
   1494c:	mov	r2, r6
   14950:	mov	r3, r8
   14954:	blx	r4
   14958:	cmp	r0, #0
   1495c:	beq	14988 <__assert_fail@plt+0x3184>
   14960:	mov	r0, r5
   14964:	mov	r1, r9
   14968:	mov	r2, #1
   1496c:	mov	r3, r7
   14970:	bl	14b28 <__assert_fail@plt+0x3324>
   14974:	mov	r7, r0
   14978:	add	r0, r6, sl
   1497c:	ldr	r1, [r5, #28]
   14980:	sub	sl, r0, r1
   14984:	b	149b0 <__assert_fail@plt+0x31ac>
   14988:	ldr	r0, [r5, #28]
   1498c:	add	r0, r0, #1
   14990:	cmp	r7, r0
   14994:	bls	149e4 <__assert_fail@plt+0x31e0>
   14998:	mov	r0, r5
   1499c:	mov	r1, r9
   149a0:	mov	r2, #0
   149a4:	mov	r3, r7
   149a8:	bl	14b28 <__assert_fail@plt+0x3324>
   149ac:	mov	r7, r0
   149b0:	ldr	r0, [r5, #28]
   149b4:	ldr	r1, [r9]
   149b8:	sub	r0, r1, r0
   149bc:	add	r1, sl, #1
   149c0:	cmp	r1, r0
   149c4:	bcc	14924 <__assert_fail@plt+0x3120>
   149c8:	mov	r0, r8
   149cc:	bl	1958c <__assert_fail@plt+0x7d88>
   149d0:	mov	r0, r5
   149d4:	mov	r1, r9
   149d8:	sub	sp, fp, #28
   149dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149e0:	b	14bd8 <__assert_fail@plt+0x33d4>
   149e4:	movw	r1, #47299	; 0xb8c3
   149e8:	movt	r1, #1
   149ec:	mov	r0, #0
   149f0:	mov	r2, #5
   149f4:	bl	114ec <dcgettext@plt>
   149f8:	mov	r2, r0
   149fc:	mov	r0, #1
   14a00:	mov	r1, #0
   14a04:	bl	115b8 <error@plt>
   14a08:	movw	r0, #47157	; 0xb835
   14a0c:	movt	r0, #1
   14a10:	movw	r1, #47177	; 0xb849
   14a14:	movt	r1, #1
   14a18:	movw	r3, #47188	; 0xb854
   14a1c:	movt	r3, #1
   14a20:	movw	r2, #261	; 0x105
   14a24:	bl	11804 <__assert_fail@plt>
   14a28:	movw	r0, #47256	; 0xb898
   14a2c:	movt	r0, #1
   14a30:	movw	r1, #47177	; 0xb849
   14a34:	movt	r1, #1
   14a38:	movw	r3, #47188	; 0xb854
   14a3c:	movt	r3, #1
   14a40:	movw	r2, #262	; 0x106
   14a44:	bl	11804 <__assert_fail@plt>
   14a48:	push	{fp, lr}
   14a4c:	mov	fp, sp
   14a50:	sub	sp, sp, #16
   14a54:	mov	r2, #0
   14a58:	str	r2, [sp]
   14a5c:	str	r2, [sp, #4]
   14a60:	str	r2, [sp, #8]
   14a64:	movw	r2, #47979	; 0xbb6b
   14a68:	movt	r2, #1
   14a6c:	mov	r3, #0
   14a70:	bl	146ac <__assert_fail@plt+0x2ea8>
   14a74:	mov	sp, fp
   14a78:	pop	{fp, pc}
   14a7c:	push	{r4, r5, fp, lr}
   14a80:	add	fp, sp, #8
   14a84:	ldr	r4, [r0, #28]
   14a88:	cmp	r4, #0
   14a8c:	beq	14ab4 <__assert_fail@plt+0x32b0>
   14a90:	ldr	ip, [r0, #28]
   14a94:	mov	r0, #0
   14a98:	ldr	r4, [r1, #4]
   14a9c:	ldr	r4, [r4, r0, lsl #2]
   14aa0:	str	r4, [r2, r0, lsl #2]
   14aa4:	add	r0, r0, #1
   14aa8:	cmp	r0, ip
   14aac:	bcc	14a98 <__assert_fail@plt+0x3294>
   14ab0:	b	14abc <__assert_fail@plt+0x32b8>
   14ab4:	mov	r0, #0
   14ab8:	mov	ip, #0
   14abc:	cmp	r0, r3
   14ac0:	ldrcc	r4, [fp, #8]
   14ac4:	addcc	lr, r0, r4
   14ac8:	ldrcc	r4, [r1]
   14acc:	cmpcc	lr, r4
   14ad0:	bcs	14af8 <__assert_fail@plt+0x32f4>
   14ad4:	ldr	r4, [r1]
   14ad8:	ldr	r5, [r1, #4]
   14adc:	ldr	r5, [r5, lr, lsl #2]
   14ae0:	str	r5, [r2, r0, lsl #2]
   14ae4:	add	r0, r0, #1
   14ae8:	cmp	r0, r3
   14aec:	addcc	lr, lr, #1
   14af0:	cmpcc	lr, r4
   14af4:	bcc	14ad8 <__assert_fail@plt+0x32d4>
   14af8:	cmp	r0, ip
   14afc:	movcs	r1, #0
   14b00:	strcs	r1, [r2, r0, lsl #2]
   14b04:	popcs	{r4, r5, fp, pc}
   14b08:	movw	r0, #47856	; 0xbaf0
   14b0c:	movt	r0, #1
   14b10:	movw	r1, #47177	; 0xb849
   14b14:	movt	r1, #1
   14b18:	movw	r3, #47885	; 0xbb0d
   14b1c:	movt	r3, #1
   14b20:	mov	r2, #242	; 0xf2
   14b24:	bl	11804 <__assert_fail@plt>
   14b28:	cmp	r2, #0
   14b2c:	beq	14b40 <__assert_fail@plt+0x333c>
   14b30:	ldr	ip, [r1, #36]	; 0x24
   14b34:	cmp	ip, r3
   14b38:	strcc	r3, [r1, #36]	; 0x24
   14b3c:	b	14b50 <__assert_fail@plt+0x334c>
   14b40:	ldr	ip, [r1, #40]	; 0x28
   14b44:	sub	ip, ip, #1
   14b48:	cmp	ip, r3
   14b4c:	strcs	r3, [r1, #40]	; 0x28
   14b50:	ldr	ip, [r1, #36]	; 0x24
   14b54:	cmp	ip, #0
   14b58:	ldrne	r1, [r1, #40]	; 0x28
   14b5c:	cmpne	r1, ip
   14b60:	bhi	14b80 <__assert_fail@plt+0x337c>
   14b64:	cmp	r2, #0
   14b68:	beq	14b78 <__assert_fail@plt+0x3374>
   14b6c:	cmn	r3, #1
   14b70:	addne	r3, r3, #1
   14b74:	b	14bac <__assert_fail@plt+0x33a8>
   14b78:	lsr	r3, r3, #1
   14b7c:	b	14bac <__assert_fail@plt+0x33a8>
   14b80:	sub	r1, r1, ip
   14b84:	lsr	r1, r1, #1
   14b88:	cmp	r2, #0
   14b8c:	beq	14ba0 <__assert_fail@plt+0x339c>
   14b90:	cmp	r1, #0
   14b94:	addeq	r3, r3, #1
   14b98:	addne	r3, r1, r3
   14b9c:	b	14bac <__assert_fail@plt+0x33a8>
   14ba0:	cmp	r1, #0
   14ba4:	subeq	r3, r3, #1
   14ba8:	subne	r3, r3, r1
   14bac:	ldr	r0, [r0, #28]
   14bb0:	cmp	r0, #0
   14bb4:	beq	14bc8 <__assert_fail@plt+0x33c4>
   14bb8:	add	r0, r0, #1
   14bbc:	cmp	r3, r0
   14bc0:	movhi	r0, r3
   14bc4:	b	14bcc <__assert_fail@plt+0x33c8>
   14bc8:	mov	r0, r3
   14bcc:	cmp	r0, #0
   14bd0:	movweq	r0, #1
   14bd4:	bx	lr
   14bd8:	ldr	r0, [r0, #28]
   14bdc:	mov	r2, #0
   14be0:	mvn	r3, #0
   14be4:	str	r2, [r1, #28]
   14be8:	str	r3, [r1, #32]
   14bec:	str	r0, [r1]
   14bf0:	ldr	r0, [r1, #20]
   14bf4:	str	r0, [r1, #16]
   14bf8:	bx	lr
   14bfc:	cmp	r0, #0
   14c00:	bne	14c28 <__assert_fail@plt+0x3424>
   14c04:	ldr	r3, [r1, #40]	; 0x28
   14c08:	cmp	r3, #0
   14c0c:	beq	14c28 <__assert_fail@plt+0x3424>
   14c10:	ldr	ip, [r1, #28]
   14c14:	ldr	r0, [r2]
   14c18:	sub	ip, r0, ip
   14c1c:	mov	r0, #1
   14c20:	cmp	ip, r3
   14c24:	bxeq	lr
   14c28:	ldr	r0, [r1, #16]
   14c2c:	ldr	r1, [r2]
   14c30:	sub	r0, r1, r0
   14c34:	clz	r0, r0
   14c38:	lsr	r0, r0, #5
   14c3c:	bx	lr
   14c40:	push	{fp, lr}
   14c44:	mov	fp, sp
   14c48:	mov	r0, #0
   14c4c:	bl	114f8 <sysconf@plt>
   14c50:	cmp	r0, #0
   14c54:	mvnle	r0, #-2147483648	; 0x80000000
   14c58:	pop	{fp, pc}
   14c5c:	push	{r4, r5, fp, lr}
   14c60:	add	fp, sp, #8
   14c64:	movw	r0, #53692	; 0xd1bc
   14c68:	movt	r0, #2
   14c6c:	ldr	r1, [r0]
   14c70:	ldr	r0, [r1]
   14c74:	cmp	r0, #0
   14c78:	moveq	r4, #0
   14c7c:	moveq	r0, r4
   14c80:	popeq	{r4, r5, fp, pc}
   14c84:	add	r5, r1, #4
   14c88:	mov	r4, #0
   14c8c:	bl	11654 <strlen@plt>
   14c90:	add	r0, r4, r0
   14c94:	add	r4, r0, #1
   14c98:	ldr	r0, [r5], #4
   14c9c:	cmp	r0, #0
   14ca0:	bne	14c8c <__assert_fail@plt+0x3488>
   14ca4:	mov	r0, r4
   14ca8:	pop	{r4, r5, fp, pc}
   14cac:	push	{r4, r5, r6, sl, fp, lr}
   14cb0:	add	fp, sp, #16
   14cb4:	mov	r5, r1
   14cb8:	mov	r4, r0
   14cbc:	bl	14c5c <__assert_fail@plt+0x3458>
   14cc0:	mov	r6, r0
   14cc4:	mov	r0, #4096	; 0x1000
   14cc8:	str	r0, [r4, #8]
   14ccc:	bl	14c40 <__assert_fail@plt+0x343c>
   14cd0:	mov	r1, r0
   14cd4:	mov	r0, #0
   14cd8:	stm	r4, {r0, r1}
   14cdc:	mov	r0, #1
   14ce0:	cmp	r1, r6
   14ce4:	bcc	14d40 <__assert_fail@plt+0x353c>
   14ce8:	add	r2, r6, r5
   14cec:	mov	r0, #2
   14cf0:	cmp	r2, r1
   14cf4:	popcs	{r4, r5, r6, sl, fp, pc}
   14cf8:	sub	r0, r1, r6
   14cfc:	sub	r1, r0, r5
   14d00:	str	r1, [r4, #4]
   14d04:	mvn	r0, #1
   14d08:	add	r0, r0, r1, lsr #2
   14d0c:	str	r0, [r4, #16]
   14d10:	cmp	r0, #0
   14d14:	beq	14d44 <__assert_fail@plt+0x3540>
   14d18:	mov	r0, #0
   14d1c:	movw	r2, #19812	; 0x4d64
   14d20:	movt	r2, #1
   14d24:	str	r0, [r4, #20]
   14d28:	str	r0, [r4, #24]
   14d2c:	str	r0, [r4, #28]
   14d30:	str	r2, [r4, #32]
   14d34:	str	r0, [r4, #36]	; 0x24
   14d38:	str	r0, [r4, #40]	; 0x28
   14d3c:	str	r1, [r4, #12]
   14d40:	pop	{r4, r5, r6, sl, fp, pc}
   14d44:	movw	r0, #47563	; 0xb9cb
   14d48:	movt	r0, #1
   14d4c:	movw	r1, #47177	; 0xb849
   14d50:	movt	r1, #1
   14d54:	movw	r3, #47586	; 0xb9e2
   14d58:	movt	r3, #1
   14d5c:	movw	r2, #518	; 0x206
   14d60:	bl	11804 <__assert_fail@plt>
   14d64:	mov	r0, #0
   14d68:	bx	lr
   14d6c:	ldr	r1, [r0, #4]
   14d70:	mov	r2, #0
   14d74:	cmp	r2, r1, lsr #17
   14d78:	beq	14d88 <__assert_fail@plt+0x3584>
   14d7c:	ldr	r1, [r0, #8]
   14d80:	cmp	r1, #131072	; 0x20000
   14d84:	movls	r1, #131072	; 0x20000
   14d88:	str	r1, [r0, #12]
   14d8c:	bx	lr
   14d90:	push	{r4, r5, r6, sl, fp, lr}
   14d94:	add	fp, sp, #16
   14d98:	mov	r4, r1
   14d9c:	mov	r6, #0
   14da0:	str	r6, [r1, #16]
   14da4:	str	r6, [r1]
   14da8:	str	r6, [r1, #4]
   14dac:	str	r6, [r1, #8]
   14db0:	str	r6, [r1, #36]	; 0x24
   14db4:	str	r6, [r1, #40]	; 0x28
   14db8:	ldr	r0, [r0, #12]
   14dbc:	movw	r1, #63488	; 0xf800
   14dc0:	movt	r1, #32767	; 0x7fff
   14dc4:	cmp	r0, r1
   14dc8:	bcs	14df8 <__assert_fail@plt+0x35f4>
   14dcc:	mov	r5, r2
   14dd0:	add	r0, r0, #1
   14dd4:	bl	189fc <__assert_fail@plt+0x71f8>
   14dd8:	mvn	r1, #0
   14ddc:	str	r0, [r4, #12]
   14de0:	str	r6, [r4, #16]
   14de4:	str	r6, [r4, #20]
   14de8:	str	r5, [r4, #24]
   14dec:	str	r6, [r4, #28]
   14df0:	str	r1, [r4, #32]
   14df4:	pop	{r4, r5, r6, sl, fp, pc}
   14df8:	movw	r0, #47661	; 0xba2d
   14dfc:	movt	r0, #1
   14e00:	movw	r1, #47177	; 0xb849
   14e04:	movt	r1, #1
   14e08:	movw	r3, #47696	; 0xba50
   14e0c:	movt	r3, #1
   14e10:	mov	r2, #572	; 0x23c
   14e14:	bl	11804 <__assert_fail@plt>
   14e18:	push	{r4, r5, r6, sl, fp, lr}
   14e1c:	add	fp, sp, #16
   14e20:	mov	r1, r0
   14e24:	ldr	r0, [r0]
   14e28:	cmp	r0, #0
   14e2c:	beq	14e58 <__assert_fail@plt+0x3654>
   14e30:	add	r6, r1, #4
   14e34:	mov	r5, #0
   14e38:	mov	r4, #0
   14e3c:	bl	11654 <strlen@plt>
   14e40:	add	r4, r0, r4
   14e44:	ldr	r0, [r6, r5, lsl #2]
   14e48:	add	r5, r5, #1
   14e4c:	cmp	r0, #0
   14e50:	bne	14e3c <__assert_fail@plt+0x3638>
   14e54:	b	14e60 <__assert_fail@plt+0x365c>
   14e58:	mov	r4, #0
   14e5c:	mov	r5, #0
   14e60:	movw	r0, #47781	; 0xbaa5
   14e64:	movt	r0, #1
   14e68:	mov	r1, r5
   14e6c:	bl	14e9c <__assert_fail@plt+0x3698>
   14e70:	mov	r1, r0
   14e74:	mov	r0, #1
   14e78:	cmp	r1, #0
   14e7c:	popne	{r4, r5, r6, sl, fp, pc}
   14e80:	movw	r0, #47818	; 0xbaca
   14e84:	movt	r0, #1
   14e88:	mov	r1, r4
   14e8c:	bl	14e9c <__assert_fail@plt+0x3698>
   14e90:	cmp	r0, #0
   14e94:	movwne	r0, #1
   14e98:	pop	{r4, r5, r6, sl, fp, pc}
   14e9c:	push	{r4, r5, fp, lr}
   14ea0:	add	fp, sp, #8
   14ea4:	sub	sp, sp, #16
   14ea8:	mov	r5, r1
   14eac:	mov	r4, r0
   14eb0:	bl	115dc <getenv@plt>
   14eb4:	cmp	r0, #0
   14eb8:	beq	14ef4 <__assert_fail@plt+0x36f0>
   14ebc:	mov	r1, #0
   14ec0:	str	r1, [sp]
   14ec4:	add	r1, sp, #12
   14ec8:	add	r3, sp, #8
   14ecc:	mov	r2, #10
   14ed0:	bl	18df0 <__assert_fail@plt+0x75ec>
   14ed4:	cmp	r0, #0
   14ed8:	bne	14f00 <__assert_fail@plt+0x36fc>
   14edc:	ldr	r1, [sp, #8]
   14ee0:	mov	r0, #1
   14ee4:	cmp	r1, r5
   14ee8:	movcs	r0, #0
   14eec:	sub	sp, fp, #8
   14ef0:	pop	{r4, r5, fp, pc}
   14ef4:	mov	r0, #0
   14ef8:	sub	sp, fp, #8
   14efc:	pop	{r4, r5, fp, pc}
   14f00:	bl	11684 <__errno_location@plt>
   14f04:	ldr	r5, [r0]
   14f08:	movw	r1, #47991	; 0xbb77
   14f0c:	movt	r1, #1
   14f10:	mov	r0, #0
   14f14:	mov	r2, #5
   14f18:	bl	114ec <dcgettext@plt>
   14f1c:	mov	r2, r0
   14f20:	mov	r0, #1
   14f24:	mov	r1, r5
   14f28:	mov	r3, r4
   14f2c:	bl	115b8 <error@plt>
   14f30:	push	{fp, lr}
   14f34:	mov	fp, sp
   14f38:	sub	sp, sp, #16
   14f3c:	bl	14f8c <__assert_fail@plt+0x3788>
   14f40:	mov	r1, #0
   14f44:	str	r1, [sp, #12]
   14f48:	str	r1, [sp, #4]
   14f4c:	str	r1, [sp, #8]
   14f50:	cmn	r0, #-2147483647	; 0x80000001
   14f54:	addne	r0, r0, #1
   14f58:	movw	r1, #20692	; 0x50d4
   14f5c:	movt	r1, #1
   14f60:	add	r2, sp, #4
   14f64:	bl	14fec <__assert_fail@plt+0x37e8>
   14f68:	ldmib	sp, {r0, r1}
   14f6c:	movw	r2, #53912	; 0xd298
   14f70:	movt	r2, #2
   14f74:	str	r0, [r2]
   14f78:	movw	r0, #53916	; 0xd29c
   14f7c:	movt	r0, #2
   14f80:	str	r1, [r0]
   14f84:	mov	sp, fp
   14f88:	pop	{fp, pc}
   14f8c:	push	{r4, sl, fp, lr}
   14f90:	add	fp, sp, #8
   14f94:	sub	sp, sp, #16
   14f98:	bl	1535c <__assert_fail@plt+0x3b58>
   14f9c:	mov	r4, r0
   14fa0:	cmn	r0, #1
   14fa4:	bgt	14fe0 <__assert_fail@plt+0x37dc>
   14fa8:	mov	r0, #4
   14fac:	bl	114f8 <sysconf@plt>
   14fb0:	mov	r4, r0
   14fb4:	mov	r1, sp
   14fb8:	mov	r0, #7
   14fbc:	bl	11510 <getrlimit64@plt>
   14fc0:	cmn	r4, #1
   14fc4:	movweq	r4, #20
   14fc8:	cmp	r0, #0
   14fcc:	bne	14fe0 <__assert_fail@plt+0x37dc>
   14fd0:	ldm	sp, {r0, r1}
   14fd4:	and	r1, r0, r1
   14fd8:	cmn	r1, #1
   14fdc:	movne	r4, r0
   14fe0:	mov	r0, r4
   14fe4:	sub	sp, fp, #8
   14fe8:	pop	{r4, sl, fp, pc}
   14fec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ff0:	add	fp, sp, #28
   14ff4:	sub	sp, sp, #532	; 0x214
   14ff8:	str	r2, [sp, #12]
   14ffc:	str	r0, [sp, #8]
   15000:	cmp	r0, #1
   15004:	blt	150cc <__assert_fail@plt+0x38c8>
   15008:	mov	r5, r1
   1500c:	add	r0, sp, #16
   15010:	add	r1, r0, #6
   15014:	str	r1, [sp]
   15018:	add	r0, r0, #4
   1501c:	str	r0, [sp, #4]
   15020:	mov	r9, #0
   15024:	mov	r8, #5
   15028:	ldr	r0, [sp, #8]
   1502c:	sub	sl, r0, r9
   15030:	cmp	sl, #64	; 0x40
   15034:	mov	r7, sl
   15038:	movge	r7, #64	; 0x40
   1503c:	cmp	sl, #1
   15040:	blt	15064 <__assert_fail@plt+0x3860>
   15044:	mov	r0, #0
   15048:	ldr	r1, [sp, #4]
   1504c:	add	r2, r9, r0
   15050:	stmda	r1, {r2, r8}
   15054:	add	r1, r1, #8
   15058:	add	r0, r0, #1
   1505c:	cmp	r0, r7
   15060:	blt	1504c <__assert_fail@plt+0x3848>
   15064:	add	r0, sp, #16
   15068:	mov	r1, r7
   1506c:	mov	r2, #0
   15070:	bl	1154c <poll@plt>
   15074:	cmn	r0, #1
   15078:	beq	150cc <__assert_fail@plt+0x38c8>
   1507c:	cmp	sl, #1
   15080:	blt	150bc <__assert_fail@plt+0x38b8>
   15084:	mov	r6, #0
   15088:	ldr	r4, [sp]
   1508c:	ldrh	r0, [r4]
   15090:	cmp	r0, #32
   15094:	beq	150ac <__assert_fail@plt+0x38a8>
   15098:	ldr	r0, [r4, #-6]
   1509c:	ldr	r1, [sp, #12]
   150a0:	blx	r5
   150a4:	cmp	r0, #0
   150a8:	bne	150cc <__assert_fail@plt+0x38c8>
   150ac:	add	r4, r4, #8
   150b0:	add	r6, r6, #1
   150b4:	cmp	r6, r7
   150b8:	blt	1508c <__assert_fail@plt+0x3888>
   150bc:	add	r9, r7, r9
   150c0:	ldr	r0, [sp, #8]
   150c4:	cmp	r9, r0
   150c8:	blt	15028 <__assert_fail@plt+0x3824>
   150cc:	sub	sp, fp, #28
   150d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150d4:	push	{r4, r5, r6, sl, fp, lr}
   150d8:	add	fp, sp, #16
   150dc:	mov	r5, r1
   150e0:	mov	r6, r0
   150e4:	bl	1546c <__assert_fail@plt+0x3c68>
   150e8:	mov	r4, #0
   150ec:	cmp	r0, #0
   150f0:	beq	150fc <__assert_fail@plt+0x38f8>
   150f4:	mov	r0, r4
   150f8:	pop	{r4, r5, r6, sl, fp, pc}
   150fc:	ldm	r5, {r0, r1}
   15100:	mov	r2, #4
   15104:	add	r1, r2, r1, lsl #2
   15108:	add	r2, r5, #8
   1510c:	bl	1571c <__assert_fail@plt+0x3f18>
   15110:	cmp	r0, #0
   15114:	mvneq	r4, #0
   15118:	moveq	r0, r4
   1511c:	popeq	{r4, r5, r6, sl, fp, pc}
   15120:	str	r0, [r5]
   15124:	ldr	r1, [r5, #4]
   15128:	str	r6, [r0, r1, lsl #2]
   1512c:	ldr	r0, [r5, #4]
   15130:	add	r0, r0, #1
   15134:	str	r0, [r5, #4]
   15138:	mov	r0, r4
   1513c:	pop	{r4, r5, r6, sl, fp, pc}
   15140:	sub	sp, sp, #8
   15144:	push	{r4, r5, r6, r7, fp, lr}
   15148:	add	fp, sp, #16
   1514c:	sub	sp, sp, #8
   15150:	mov	r5, r1
   15154:	mov	r4, r0
   15158:	str	r3, [fp, #12]
   1515c:	str	r2, [fp, #8]
   15160:	mov	r6, #0
   15164:	tst	r1, #64	; 0x40
   15168:	addne	r0, fp, #8
   1516c:	orrne	r0, r0, #4
   15170:	strne	r0, [sp, #4]
   15174:	ldrne	r6, [fp, #8]
   15178:	movw	r7, #53921	; 0xd2a1
   1517c:	movt	r7, #2
   15180:	ldrb	r0, [r7]
   15184:	cmp	r0, #0
   15188:	bne	151a4 <__assert_fail@plt+0x39a0>
   1518c:	bl	151f4 <__assert_fail@plt+0x39f0>
   15190:	movw	r1, #53920	; 0xd2a0
   15194:	movt	r1, #2
   15198:	strb	r0, [r1]
   1519c:	mov	r0, #1
   151a0:	strb	r0, [r7]
   151a4:	orr	r1, r5, #524288	; 0x80000
   151a8:	mov	r0, r4
   151ac:	mov	r2, r6
   151b0:	bl	15b64 <__assert_fail@plt+0x4360>
   151b4:	mov	r4, r0
   151b8:	cmp	r0, #0
   151bc:	blt	151e0 <__assert_fail@plt+0x39dc>
   151c0:	movw	r0, #53920	; 0xd2a0
   151c4:	movt	r0, #2
   151c8:	ldrb	r0, [r0]
   151cc:	cmp	r0, #0
   151d0:	bne	151e0 <__assert_fail@plt+0x39dc>
   151d4:	mov	r0, r4
   151d8:	mov	r1, #1
   151dc:	bl	15844 <__assert_fail@plt+0x4040>
   151e0:	mov	r0, r4
   151e4:	sub	sp, fp, #16
   151e8:	pop	{r4, r5, r6, r7, fp, lr}
   151ec:	add	sp, sp, #8
   151f0:	bx	lr
   151f4:	push	{r4, r5, fp, lr}
   151f8:	add	fp, sp, #8
   151fc:	movw	r0, #49941	; 0xc315
   15200:	movt	r0, #1
   15204:	mov	r1, #524288	; 0x80000
   15208:	bl	15b64 <__assert_fail@plt+0x4360>
   1520c:	cmp	r0, #0
   15210:	movlt	r4, #0
   15214:	movlt	r0, r4
   15218:	poplt	{r4, r5, fp, pc}
   1521c:	mov	r5, r0
   15220:	bl	1546c <__assert_fail@plt+0x3c68>
   15224:	mov	r4, r0
   15228:	mov	r0, r5
   1522c:	bl	117ec <close@plt>
   15230:	cmp	r4, #0
   15234:	movwne	r4, #1
   15238:	mov	r0, r4
   1523c:	pop	{r4, r5, fp, pc}
   15240:	push	{r4, sl, fp, lr}
   15244:	add	fp, sp, #8
   15248:	movw	r4, #53912	; 0xd298
   1524c:	movt	r4, #2
   15250:	ldr	r0, [r4]
   15254:	bl	1958c <__assert_fail@plt+0x7d88>
   15258:	movw	r0, #53916	; 0xd29c
   1525c:	movt	r0, #2
   15260:	mov	r1, #0
   15264:	str	r1, [r0]
   15268:	str	r1, [r4]
   1526c:	pop	{r4, sl, fp, pc}
   15270:	push	{fp, lr}
   15274:	mov	fp, sp
   15278:	movw	r0, #48052	; 0xbbb4
   1527c:	movt	r0, #1
   15280:	bl	115dc <getenv@plt>
   15284:	cmp	r0, #0
   15288:	movwne	r0, #1
   1528c:	pop	{fp, pc}
   15290:	push	{r4, sl, fp, lr}
   15294:	add	fp, sp, #8
   15298:	movw	r0, #53916	; 0xd29c
   1529c:	movt	r0, #2
   152a0:	ldr	r1, [r0]
   152a4:	movw	r0, #53912	; 0xd298
   152a8:	movt	r0, #2
   152ac:	ldr	r0, [r0]
   152b0:	bl	15308 <__assert_fail@plt+0x3b04>
   152b4:	cmp	r0, #0
   152b8:	poplt	{r4, sl, fp, pc}
   152bc:	mov	r4, r0
   152c0:	movw	r1, #48080	; 0xbbd0
   152c4:	movt	r1, #1
   152c8:	mov	r0, #0
   152cc:	mov	r2, #5
   152d0:	bl	114ec <dcgettext@plt>
   152d4:	mov	r2, r0
   152d8:	mov	r0, #0
   152dc:	mov	r1, #0
   152e0:	mov	r3, r4
   152e4:	bl	115b8 <error@plt>
   152e8:	movw	r0, #48232	; 0xbc68
   152ec:	movt	r0, #1
   152f0:	movw	r1, #48241	; 0xbc71
   152f4:	movt	r1, #1
   152f8:	movw	r3, #48250	; 0xbc7a
   152fc:	movt	r3, #1
   15300:	mov	r2, #396	; 0x18c
   15304:	bl	11804 <__assert_fail@plt>
   15308:	push	{r4, r5, fp, lr}
   1530c:	add	fp, sp, #8
   15310:	sub	sp, sp, #16
   15314:	mov	r4, r1
   15318:	mov	r5, r0
   1531c:	bl	14f8c <__assert_fail@plt+0x3788>
   15320:	str	r5, [sp]
   15324:	str	r4, [sp, #4]
   15328:	mov	r1, #0
   1532c:	str	r1, [sp, #8]
   15330:	mvn	r1, #0
   15334:	str	r1, [sp, #12]
   15338:	cmn	r0, #-2147483647	; 0x80000001
   1533c:	addne	r0, r0, #1
   15340:	movw	r1, #21636	; 0x5484
   15344:	movt	r1, #1
   15348:	mov	r2, sp
   1534c:	bl	14fec <__assert_fail@plt+0x37e8>
   15350:	ldr	r0, [sp, #12]
   15354:	sub	sp, fp, #8
   15358:	pop	{r4, r5, fp, pc}
   1535c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15360:	add	fp, sp, #24
   15364:	movw	r0, #48286	; 0xbc9e
   15368:	movt	r0, #1
   1536c:	bl	15ad4 <__assert_fail@plt+0x42d0>
   15370:	cmp	r0, #0
   15374:	beq	15448 <__assert_fail@plt+0x3c44>
   15378:	mov	r4, r0
   1537c:	bl	11684 <__errno_location@plt>
   15380:	mov	r6, r0
   15384:	mov	r7, #0
   15388:	str	r7, [r0]
   1538c:	mov	r0, r4
   15390:	bl	11768 <readdir64@plt>
   15394:	cmp	r0, #0
   15398:	beq	15404 <__assert_fail@plt+0x3c00>
   1539c:	mov	r8, #0
   153a0:	mvn	r5, #0
   153a4:	mov	r7, #0
   153a8:	mov	r1, r0
   153ac:	ldrb	r2, [r1, #19]!
   153b0:	cmp	r2, #46	; 0x2e
   153b4:	bne	153d4 <__assert_fail@plt+0x3bd0>
   153b8:	ldrb	r2, [r0, #20]
   153bc:	cmp	r2, #0
   153c0:	beq	153ec <__assert_fail@plt+0x3be8>
   153c4:	cmp	r2, #46	; 0x2e
   153c8:	ldrbeq	r0, [r0, #21]
   153cc:	cmpeq	r0, #0
   153d0:	beq	153ec <__assert_fail@plt+0x3be8>
   153d4:	mov	r0, r1
   153d8:	mov	r1, #0
   153dc:	bl	155a4 <__assert_fail@plt+0x3da0>
   153e0:	cmp	r0, r5
   153e4:	movgt	r5, r0
   153e8:	mov	r7, #1
   153ec:	str	r8, [r6]
   153f0:	mov	r0, r4
   153f4:	bl	11768 <readdir64@plt>
   153f8:	cmp	r0, #0
   153fc:	bne	153a8 <__assert_fail@plt+0x3ba4>
   15400:	b	15408 <__assert_fail@plt+0x3c04>
   15404:	mvn	r5, #0
   15408:	ldr	r6, [r6]
   1540c:	cmp	r6, #0
   15410:	beq	15454 <__assert_fail@plt+0x3c50>
   15414:	movw	r2, #48286	; 0xbc9e
   15418:	movt	r2, #1
   1541c:	mov	r0, #0
   15420:	mov	r1, #8
   15424:	bl	17d2c <__assert_fail@plt+0x6528>
   15428:	mov	r3, r0
   1542c:	movw	r2, #48419	; 0xbd23
   15430:	movt	r2, #1
   15434:	mov	r0, #0
   15438:	mov	r1, r6
   1543c:	bl	115b8 <error@plt>
   15440:	mov	r0, r4
   15444:	bl	117f8 <closedir@plt>
   15448:	mvn	r5, #0
   1544c:	mov	r0, r5
   15450:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15454:	mov	r0, r4
   15458:	bl	117f8 <closedir@plt>
   1545c:	cmp	r7, #0
   15460:	mvneq	r5, #0
   15464:	mov	r0, r5
   15468:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1546c:	push	{fp, lr}
   15470:	mov	fp, sp
   15474:	mov	r1, #1
   15478:	bl	19304 <__assert_fail@plt+0x7b00>
   1547c:	and	r0, r0, #1
   15480:	pop	{fp, pc}
   15484:	push	{r4, r5, fp, lr}
   15488:	add	fp, sp, #8
   1548c:	mov	r4, r1
   15490:	mov	r5, r0
   15494:	bl	1546c <__assert_fail@plt+0x3c68>
   15498:	mov	r1, r0
   1549c:	mov	r0, #0
   154a0:	cmp	r1, #0
   154a4:	beq	154ac <__assert_fail@plt+0x3ca8>
   154a8:	pop	{r4, r5, fp, pc}
   154ac:	ldr	r2, [r4, #4]
   154b0:	ldr	r1, [r4, #8]
   154b4:	cmp	r1, r2
   154b8:	bcs	154e8 <__assert_fail@plt+0x3ce4>
   154bc:	ldr	r2, [r4]
   154c0:	ldr	r3, [r2, r1, lsl #2]
   154c4:	cmp	r3, r5
   154c8:	bge	154e4 <__assert_fail@plt+0x3ce0>
   154cc:	add	r1, r1, #1
   154d0:	str	r1, [r4, #8]
   154d4:	ldr	r3, [r4, #4]
   154d8:	cmp	r1, r3
   154dc:	bcc	154c0 <__assert_fail@plt+0x3cbc>
   154e0:	b	154e8 <__assert_fail@plt+0x3ce4>
   154e4:	popeq	{r4, r5, fp, pc}
   154e8:	str	r5, [r4, #12]
   154ec:	mvn	r0, #0
   154f0:	pop	{r4, r5, fp, pc}
   154f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   154f8:	add	fp, sp, #24
   154fc:	sub	sp, sp, #16
   15500:	mov	r8, r0
   15504:	movw	r0, #53712	; 0xd1d0
   15508:	movt	r0, #2
   1550c:	ldr	r0, [r0]
   15510:	bl	194e8 <__assert_fail@plt+0x7ce4>
   15514:	movw	r0, #53724	; 0xd1dc
   15518:	movt	r0, #2
   1551c:	ldr	r6, [r0]
   15520:	movw	r0, #53612	; 0xd16c
   15524:	movt	r0, #2
   15528:	ldr	r5, [r0]
   1552c:	mov	r9, #0
   15530:	movw	r1, #48328	; 0xbcc8
   15534:	movt	r1, #1
   15538:	mov	r0, #0
   1553c:	mov	r2, #5
   15540:	bl	114ec <dcgettext@plt>
   15544:	mov	r7, r0
   15548:	movw	r1, #48343	; 0xbcd7
   1554c:	movt	r1, #1
   15550:	mov	r0, #0
   15554:	mov	r2, #5
   15558:	bl	114ec <dcgettext@plt>
   1555c:	mov	r4, r0
   15560:	movw	r1, #48358	; 0xbce6
   15564:	movt	r1, #1
   15568:	mov	r0, #0
   1556c:	mov	r2, #5
   15570:	bl	114ec <dcgettext@plt>
   15574:	str	r7, [sp]
   15578:	str	r4, [sp, #4]
   1557c:	str	r0, [sp, #8]
   15580:	str	r9, [sp, #12]
   15584:	movw	r2, #48314	; 0xbcba
   15588:	movt	r2, #1
   1558c:	mov	r0, r6
   15590:	mov	r1, r8
   15594:	mov	r3, r5
   15598:	bl	18910 <__assert_fail@plt+0x710c>
   1559c:	sub	sp, fp, #24
   155a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   155a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   155a8:	add	fp, sp, #24
   155ac:	sub	sp, sp, #8
   155b0:	mov	r5, r1
   155b4:	mov	r4, r0
   155b8:	bl	11684 <__errno_location@plt>
   155bc:	mov	r6, r0
   155c0:	mov	r0, #0
   155c4:	str	r0, [r6]
   155c8:	add	r1, sp, #4
   155cc:	mov	r0, r4
   155d0:	mov	r2, #10
   155d4:	bl	11450 <strtol@plt>
   155d8:	add	r1, r0, #-2147483647	; 0x80000001
   155dc:	cmp	r1, #1
   155e0:	bls	15640 <__assert_fail@plt+0x3e3c>
   155e4:	ldr	r7, [sp, #4]
   155e8:	ldrb	r1, [r7]
   155ec:	cmp	r1, #0
   155f0:	bne	15658 <__assert_fail@plt+0x3e54>
   155f4:	cmp	r7, r4
   155f8:	subne	sp, fp, #24
   155fc:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   15600:	ldr	r6, [r6]
   15604:	movw	r1, #48398	; 0xbd0e
   15608:	movt	r1, #1
   1560c:	mov	r0, #0
   15610:	mov	r2, #5
   15614:	bl	114ec <dcgettext@plt>
   15618:	mov	r7, r0
   1561c:	mov	r0, #0
   15620:	mov	r1, r5
   15624:	mov	r2, r4
   15628:	bl	17d2c <__assert_fail@plt+0x6528>
   1562c:	mov	r3, r0
   15630:	mov	r0, #1
   15634:	mov	r1, r6
   15638:	mov	r2, r7
   1563c:	bl	115b8 <error@plt>
   15640:	ldr	r1, [r6]
   15644:	movw	r2, #48419	; 0xbd23
   15648:	movt	r2, #1
   1564c:	mov	r0, #1
   15650:	mov	r3, r4
   15654:	bl	115b8 <error@plt>
   15658:	ldr	r8, [r6]
   1565c:	movw	r1, #48371	; 0xbcf3
   15660:	movt	r1, #1
   15664:	mov	r0, #0
   15668:	mov	r2, #5
   1566c:	bl	114ec <dcgettext@plt>
   15670:	mov	r6, r0
   15674:	mov	r0, #0
   15678:	mov	r1, r5
   1567c:	mov	r2, r7
   15680:	bl	17d2c <__assert_fail@plt+0x6528>
   15684:	mov	r7, r0
   15688:	mov	r0, #1
   1568c:	mov	r1, r5
   15690:	mov	r2, r4
   15694:	bl	17d2c <__assert_fail@plt+0x6528>
   15698:	str	r0, [sp]
   1569c:	mov	r0, #1
   156a0:	mov	r1, r8
   156a4:	mov	r2, r6
   156a8:	mov	r3, r7
   156ac:	bl	115b8 <error@plt>
   156b0:	push	{r4, r5, fp, lr}
   156b4:	add	fp, sp, #8
   156b8:	sub	sp, sp, #16
   156bc:	mov	r4, r1
   156c0:	mov	r5, r0
   156c4:	movw	r1, #48422	; 0xbd26
   156c8:	movt	r1, #1
   156cc:	mov	r0, #0
   156d0:	mov	r2, #5
   156d4:	bl	114ec <dcgettext@plt>
   156d8:	mov	r1, r0
   156dc:	movw	r0, #48714	; 0xbe4a
   156e0:	movt	r0, #1
   156e4:	movw	r2, #48667	; 0xbe1b
   156e8:	movt	r2, #1
   156ec:	movw	r3, #48314	; 0xbcba
   156f0:	movt	r3, #1
   156f4:	str	r3, [sp]
   156f8:	str	r2, [sp, #4]
   156fc:	str	r0, [sp, #8]
   15700:	movw	r2, #48628	; 0xbdf4
   15704:	movt	r2, #1
   15708:	mov	r0, r5
   1570c:	mov	r3, r4
   15710:	bl	11678 <fprintf@plt>
   15714:	sub	sp, fp, #8
   15718:	pop	{r4, r5, fp, pc}
   1571c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15720:	add	fp, sp, #24
   15724:	mov	r6, r2
   15728:	mov	r7, r1
   1572c:	mov	r4, r0
   15730:	bl	11684 <__errno_location@plt>
   15734:	cmp	r7, #0
   15738:	beq	157b8 <__assert_fail@plt+0x3fb4>
   1573c:	mov	r8, r0
   15740:	ldr	r9, [r0]
   15744:	ldr	r5, [r6]
   15748:	mov	r0, r5
   1574c:	mov	r1, r7
   15750:	bl	157f8 <__assert_fail@plt+0x3ff4>
   15754:	mov	r1, r0
   15758:	cmp	r5, #0
   1575c:	beq	1578c <__assert_fail@plt+0x3f88>
   15760:	cmp	r1, r5
   15764:	beq	157a4 <__assert_fail@plt+0x3fa0>
   15768:	str	r1, [r6]
   1576c:	mov	r0, r4
   15770:	bl	196e8 <__assert_fail@plt+0x7ee4>
   15774:	mov	r4, r0
   15778:	cmp	r0, #0
   1577c:	bne	157ac <__assert_fail@plt+0x3fa8>
   15780:	mov	r4, #0
   15784:	mov	r0, r4
   15788:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1578c:	cmp	r4, #0
   15790:	bne	157d8 <__assert_fail@plt+0x3fd4>
   15794:	str	r1, [r6]
   15798:	mov	r0, r1
   1579c:	bl	19658 <__assert_fail@plt+0x7e54>
   157a0:	mov	r4, r0
   157a4:	cmp	r4, #0
   157a8:	beq	15780 <__assert_fail@plt+0x3f7c>
   157ac:	str	r9, [r8]
   157b0:	mov	r0, r4
   157b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   157b8:	movw	r0, #48736	; 0xbe60
   157bc:	movt	r0, #1
   157c0:	movw	r1, #48748	; 0xbe6c
   157c4:	movt	r1, #1
   157c8:	movw	r3, #48760	; 0xbe78
   157cc:	movt	r3, #1
   157d0:	mov	r2, #71	; 0x47
   157d4:	bl	11804 <__assert_fail@plt>
   157d8:	movw	r0, #48802	; 0xbea2
   157dc:	movt	r0, #1
   157e0:	movw	r1, #48748	; 0xbe6c
   157e4:	movt	r1, #1
   157e8:	movw	r3, #48760	; 0xbe78
   157ec:	movt	r3, #1
   157f0:	mov	r2, #79	; 0x4f
   157f4:	bl	11804 <__assert_fail@plt>
   157f8:	cmp	r0, #0
   157fc:	movweq	r0, #16
   15800:	cmp	r0, r1
   15804:	bxcs	lr
   15808:	lsl	r2, r0, #1
   1580c:	cmp	r0, r0, lsl #1
   15810:	mov	r0, r2
   15814:	bls	15800 <__assert_fail@plt+0x3ffc>
   15818:	mov	r0, r1
   1581c:	bx	lr
   15820:	push	{r4, sl, fp, lr}
   15824:	add	fp, sp, #8
   15828:	mov	r4, r0
   1582c:	bl	1571c <__assert_fail@plt+0x3f18>
   15830:	cmp	r0, #0
   15834:	popne	{r4, sl, fp, pc}
   15838:	mov	r0, r4
   1583c:	bl	1958c <__assert_fail@plt+0x7d88>
   15840:	bl	18dac <__assert_fail@plt+0x75a8>
   15844:	push	{r4, r5, r6, sl, fp, lr}
   15848:	add	fp, sp, #16
   1584c:	mov	r6, r1
   15850:	mov	r4, r0
   15854:	mov	r5, #0
   15858:	mov	r1, #1
   1585c:	mov	r2, #0
   15860:	bl	19304 <__assert_fail@plt+0x7b00>
   15864:	cmp	r0, #0
   15868:	blt	15898 <__assert_fail@plt+0x4094>
   1586c:	bic	r2, r0, #1
   15870:	cmp	r6, #0
   15874:	orrne	r2, r0, #1
   15878:	cmp	r0, r2
   1587c:	beq	1589c <__assert_fail@plt+0x4098>
   15880:	mov	r0, r4
   15884:	mov	r1, #2
   15888:	bl	19304 <__assert_fail@plt+0x7b00>
   1588c:	cmn	r0, #1
   15890:	movwne	r0, #0
   15894:	pop	{r4, r5, r6, sl, fp, pc}
   15898:	mvn	r5, #0
   1589c:	mov	r0, r5
   158a0:	pop	{r4, r5, r6, sl, fp, pc}
   158a4:	movw	r1, #1030	; 0x406
   158a8:	mov	r2, #0
   158ac:	b	19304 <__assert_fail@plt+0x7b00>
   158b0:	movw	r1, #53924	; 0xd2a4
   158b4:	movt	r1, #2
   158b8:	str	r0, [r1]
   158bc:	bx	lr
   158c0:	push	{r4, r5, r6, sl, fp, lr}
   158c4:	add	fp, sp, #16
   158c8:	sub	sp, sp, #8
   158cc:	movw	r6, #53720	; 0xd1d8
   158d0:	movt	r6, #2
   158d4:	ldr	r5, [r6]
   158d8:	mov	r0, r5
   158dc:	bl	19550 <__assert_fail@plt+0x7d4c>
   158e0:	cmp	r0, #0
   158e4:	beq	15924 <__assert_fail@plt+0x4120>
   158e8:	mov	r0, #1
   158ec:	str	r0, [sp]
   158f0:	mov	r4, #0
   158f4:	mov	r0, r5
   158f8:	mov	r2, #0
   158fc:	mov	r3, #0
   15900:	bl	195b4 <__assert_fail@plt+0x7db0>
   15904:	cmp	r0, #0
   15908:	bne	15928 <__assert_fail@plt+0x4124>
   1590c:	ldr	r0, [r6]
   15910:	bl	194e8 <__assert_fail@plt+0x7ce4>
   15914:	mov	r4, r0
   15918:	cmp	r0, #0
   1591c:	movwne	r4, #1
   15920:	b	15928 <__assert_fail@plt+0x4124>
   15924:	mov	r4, #0
   15928:	ldr	r0, [r6]
   1592c:	bl	19a9c <__assert_fail@plt+0x8298>
   15930:	cmp	r4, #0
   15934:	cmpeq	r0, #0
   15938:	bne	15948 <__assert_fail@plt+0x4144>
   1593c:	sub	sp, fp, #16
   15940:	pop	{r4, r5, r6, sl, fp, lr}
   15944:	b	159ec <__assert_fail@plt+0x41e8>
   15948:	movw	r1, #48819	; 0xbeb3
   1594c:	movt	r1, #1
   15950:	mov	r0, #0
   15954:	mov	r2, #5
   15958:	bl	114ec <dcgettext@plt>
   1595c:	mov	r4, r0
   15960:	movw	r0, #53924	; 0xd2a4
   15964:	movt	r0, #2
   15968:	ldr	r6, [r0]
   1596c:	bl	11684 <__errno_location@plt>
   15970:	ldr	r5, [r0]
   15974:	cmp	r6, #0
   15978:	bne	15994 <__assert_fail@plt+0x4190>
   1597c:	movw	r2, #48419	; 0xbd23
   15980:	movt	r2, #1
   15984:	mov	r0, #0
   15988:	mov	r1, r5
   1598c:	mov	r3, r4
   15990:	b	159b4 <__assert_fail@plt+0x41b0>
   15994:	mov	r0, r6
   15998:	bl	17e80 <__assert_fail@plt+0x667c>
   1599c:	mov	r3, r0
   159a0:	str	r4, [sp]
   159a4:	movw	r2, #48838	; 0xbec6
   159a8:	movt	r2, #1
   159ac:	mov	r0, #0
   159b0:	mov	r1, r5
   159b4:	bl	115b8 <error@plt>
   159b8:	bl	159ec <__assert_fail@plt+0x41e8>
   159bc:	movw	r0, #53616	; 0xd170
   159c0:	movt	r0, #2
   159c4:	ldr	r0, [r0]
   159c8:	bl	114a4 <_exit@plt>
   159cc:	movw	r1, #53928	; 0xd2a8
   159d0:	movt	r1, #2
   159d4:	str	r0, [r1]
   159d8:	bx	lr
   159dc:	movw	r1, #53932	; 0xd2ac
   159e0:	movt	r1, #2
   159e4:	strb	r0, [r1]
   159e8:	bx	lr
   159ec:	push	{r4, r5, r6, sl, fp, lr}
   159f0:	add	fp, sp, #16
   159f4:	sub	sp, sp, #8
   159f8:	movw	r0, #53724	; 0xd1dc
   159fc:	movt	r0, #2
   15a00:	ldr	r0, [r0]
   15a04:	bl	19a9c <__assert_fail@plt+0x8298>
   15a08:	cmp	r0, #0
   15a0c:	beq	15a34 <__assert_fail@plt+0x4230>
   15a10:	movw	r0, #53932	; 0xd2ac
   15a14:	movt	r0, #2
   15a18:	ldrb	r0, [r0]
   15a1c:	cmp	r0, #0
   15a20:	beq	15a54 <__assert_fail@plt+0x4250>
   15a24:	bl	11684 <__errno_location@plt>
   15a28:	ldr	r0, [r0]
   15a2c:	cmp	r0, #32
   15a30:	bne	15a54 <__assert_fail@plt+0x4250>
   15a34:	movw	r0, #53712	; 0xd1d0
   15a38:	movt	r0, #2
   15a3c:	ldr	r0, [r0]
   15a40:	bl	19a9c <__assert_fail@plt+0x8298>
   15a44:	cmp	r0, #0
   15a48:	subeq	sp, fp, #16
   15a4c:	popeq	{r4, r5, r6, sl, fp, pc}
   15a50:	b	15ac4 <__assert_fail@plt+0x42c0>
   15a54:	movw	r1, #48845	; 0xbecd
   15a58:	movt	r1, #1
   15a5c:	mov	r0, #0
   15a60:	mov	r2, #5
   15a64:	bl	114ec <dcgettext@plt>
   15a68:	mov	r4, r0
   15a6c:	movw	r0, #53928	; 0xd2a8
   15a70:	movt	r0, #2
   15a74:	ldr	r6, [r0]
   15a78:	bl	11684 <__errno_location@plt>
   15a7c:	ldr	r5, [r0]
   15a80:	cmp	r6, #0
   15a84:	bne	15aa0 <__assert_fail@plt+0x429c>
   15a88:	movw	r2, #48419	; 0xbd23
   15a8c:	movt	r2, #1
   15a90:	mov	r0, #0
   15a94:	mov	r1, r5
   15a98:	mov	r3, r4
   15a9c:	b	15ac0 <__assert_fail@plt+0x42bc>
   15aa0:	mov	r0, r6
   15aa4:	bl	17e80 <__assert_fail@plt+0x667c>
   15aa8:	mov	r3, r0
   15aac:	str	r4, [sp]
   15ab0:	movw	r2, #48838	; 0xbec6
   15ab4:	movt	r2, #1
   15ab8:	mov	r0, #0
   15abc:	mov	r1, r5
   15ac0:	bl	115b8 <error@plt>
   15ac4:	movw	r0, #53616	; 0xd170
   15ac8:	movt	r0, #2
   15acc:	ldr	r0, [r0]
   15ad0:	bl	114a4 <_exit@plt>
   15ad4:	push	{r4, r5, r6, r7, fp, lr}
   15ad8:	add	fp, sp, #16
   15adc:	bl	115c4 <opendir@plt>
   15ae0:	cmp	r0, #0
   15ae4:	moveq	r5, #0
   15ae8:	moveq	r0, r5
   15aec:	popeq	{r4, r5, r6, r7, fp, pc}
   15af0:	mov	r4, r0
   15af4:	bl	1178c <dirfd@plt>
   15af8:	cmp	r0, #2
   15afc:	movhi	r0, r4
   15b00:	pophi	{r4, r5, r6, r7, fp, pc}
   15b04:	movw	r1, #1030	; 0x406
   15b08:	mov	r2, #3
   15b0c:	bl	19304 <__assert_fail@plt+0x7b00>
   15b10:	cmn	r0, #1
   15b14:	ble	15b40 <__assert_fail@plt+0x433c>
   15b18:	mov	r6, r0
   15b1c:	bl	11774 <fdopendir@plt>
   15b20:	mov	r5, r0
   15b24:	bl	11684 <__errno_location@plt>
   15b28:	ldr	r7, [r0]
   15b2c:	cmp	r5, #0
   15b30:	bne	15b4c <__assert_fail@plt+0x4348>
   15b34:	mov	r0, r6
   15b38:	bl	117ec <close@plt>
   15b3c:	b	15b48 <__assert_fail@plt+0x4344>
   15b40:	bl	11684 <__errno_location@plt>
   15b44:	ldr	r7, [r0]
   15b48:	mov	r5, #0
   15b4c:	mov	r0, r4
   15b50:	bl	117f8 <closedir@plt>
   15b54:	bl	11684 <__errno_location@plt>
   15b58:	str	r7, [r0]
   15b5c:	mov	r0, r5
   15b60:	pop	{r4, r5, r6, r7, fp, pc}
   15b64:	sub	sp, sp, #8
   15b68:	push	{fp, lr}
   15b6c:	mov	fp, sp
   15b70:	sub	sp, sp, #8
   15b74:	str	r3, [fp, #12]
   15b78:	str	r2, [fp, #8]
   15b7c:	mov	r2, #0
   15b80:	tst	r1, #64	; 0x40
   15b84:	addne	r2, fp, #8
   15b88:	orrne	r2, r2, #4
   15b8c:	strne	r2, [sp, #4]
   15b90:	ldrne	r2, [fp, #8]
   15b94:	bl	115d0 <open64@plt>
   15b98:	bl	184a8 <__assert_fail@plt+0x6ca4>
   15b9c:	mov	sp, fp
   15ba0:	pop	{fp, lr}
   15ba4:	add	sp, sp, #8
   15ba8:	bx	lr
   15bac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bb0:	add	fp, sp, #28
   15bb4:	sub	sp, sp, #300	; 0x12c
   15bb8:	mov	r5, r1
   15bbc:	mov	r6, r0
   15bc0:	bl	11588 <__ctype_get_mb_cur_max@plt>
   15bc4:	cmp	r0, #2
   15bc8:	bcc	15f58 <__assert_fail@plt+0x4754>
   15bcc:	mov	r4, #0
   15bd0:	str	r4, [fp, #-80]	; 0xffffffb0
   15bd4:	str	r4, [fp, #-84]	; 0xffffffac
   15bd8:	strb	r4, [fp, #-88]	; 0xffffffa8
   15bdc:	str	r5, [fp, #-72]	; 0xffffffb8
   15be0:	strb	r4, [fp, #-76]	; 0xffffffb4
   15be4:	sub	r0, fp, #88	; 0x58
   15be8:	bl	165b8 <__assert_fail@plt+0x4db4>
   15bec:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   15bf0:	cmp	r0, #0
   15bf4:	beq	15c04 <__assert_fail@plt+0x4400>
   15bf8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15bfc:	cmp	r0, #0
   15c00:	beq	16058 <__assert_fail@plt+0x4854>
   15c04:	str	r4, [fp, #-136]	; 0xffffff78
   15c08:	str	r4, [fp, #-140]	; 0xffffff74
   15c0c:	str	r4, [sp, #136]	; 0x88
   15c10:	str	r4, [sp, #132]	; 0x84
   15c14:	strb	r4, [fp, #-144]	; 0xffffff70
   15c18:	str	r5, [fp, #-128]	; 0xffffff80
   15c1c:	strb	r4, [fp, #-132]	; 0xffffff7c
   15c20:	str	r6, [sp, #144]	; 0x90
   15c24:	strb	r4, [sp, #128]	; 0x80
   15c28:	strb	r4, [sp, #140]	; 0x8c
   15c2c:	add	r7, sp, #128	; 0x80
   15c30:	mov	r0, r7
   15c34:	bl	165b8 <__assert_fail@plt+0x4db4>
   15c38:	ldrb	r0, [sp, #152]	; 0x98
   15c3c:	cmp	r0, #0
   15c40:	beq	15c50 <__assert_fail@plt+0x444c>
   15c44:	ldr	r0, [sp, #156]	; 0x9c
   15c48:	cmp	r0, #0
   15c4c:	beq	16064 <__assert_fail@plt+0x4860>
   15c50:	add	r0, sp, #16
   15c54:	add	r0, r0, #4
   15c58:	str	r0, [sp, #4]
   15c5c:	mov	r0, #1
   15c60:	str	r0, [sp, #8]
   15c64:	mov	r8, #0
   15c68:	add	r0, r7, #16
   15c6c:	str	r0, [sp]
   15c70:	mov	r0, #0
   15c74:	str	r0, [sp, #12]
   15c78:	mov	sl, #0
   15c7c:	mov	r9, #0
   15c80:	mov	r4, sl
   15c84:	add	r0, r9, r9, lsl #2
   15c88:	cmp	sl, r0
   15c8c:	bcc	15d4c <__assert_fail@plt+0x4548>
   15c90:	ldr	r0, [sp, #8]
   15c94:	tst	r0, #1
   15c98:	beq	15d4c <__assert_fail@plt+0x4548>
   15c9c:	cmp	r9, #10
   15ca0:	bcc	15d4c <__assert_fail@plt+0x4548>
   15ca4:	mov	sl, r7
   15ca8:	ldr	r1, [sp, #12]
   15cac:	subs	r0, r4, r1
   15cb0:	beq	15cf4 <__assert_fail@plt+0x44f0>
   15cb4:	sub	r7, r1, r4
   15cb8:	sub	r0, fp, #144	; 0x90
   15cbc:	bl	165b8 <__assert_fail@plt+0x4db4>
   15cc0:	ldrb	r0, [fp, #-120]	; 0xffffff88
   15cc4:	cmp	r0, #0
   15cc8:	beq	15cd8 <__assert_fail@plt+0x44d4>
   15ccc:	ldr	r0, [fp, #-116]	; 0xffffff8c
   15cd0:	cmp	r0, #0
   15cd4:	beq	15cf4 <__assert_fail@plt+0x44f0>
   15cd8:	strb	r8, [fp, #-132]	; 0xffffff7c
   15cdc:	ldr	r0, [fp, #-128]	; 0xffffff80
   15ce0:	ldr	r1, [fp, #-124]	; 0xffffff84
   15ce4:	add	r0, r0, r1
   15ce8:	str	r0, [fp, #-128]	; 0xffffff80
   15cec:	adds	r7, r7, #1
   15cf0:	bne	15cb8 <__assert_fail@plt+0x44b4>
   15cf4:	sub	r0, fp, #144	; 0x90
   15cf8:	bl	165b8 <__assert_fail@plt+0x4db4>
   15cfc:	ldrb	r0, [fp, #-120]	; 0xffffff88
   15d00:	cmp	r0, #0
   15d04:	beq	15d44 <__assert_fail@plt+0x4540>
   15d08:	ldr	r0, [fp, #-116]	; 0xffffff8c
   15d0c:	cmp	r0, #0
   15d10:	str	r4, [sp, #12]
   15d14:	mov	r7, sl
   15d18:	bne	15d4c <__assert_fail@plt+0x4548>
   15d1c:	mov	r0, r6
   15d20:	mov	r1, r5
   15d24:	add	r2, sp, #72	; 0x48
   15d28:	bl	1608c <__assert_fail@plt+0x4888>
   15d2c:	mov	r1, #0
   15d30:	str	r1, [sp, #8]
   15d34:	cmp	r0, #0
   15d38:	str	r4, [sp, #12]
   15d3c:	beq	15d4c <__assert_fail@plt+0x4548>
   15d40:	b	16080 <__assert_fail@plt+0x487c>
   15d44:	str	r4, [sp, #12]
   15d48:	mov	r7, sl
   15d4c:	add	sl, r4, #1
   15d50:	ldrb	r0, [sp, #152]	; 0x98
   15d54:	cmp	r0, #0
   15d58:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   15d5c:	cmpne	r0, #0
   15d60:	bne	15d8c <__assert_fail@plt+0x4588>
   15d64:	ldr	r2, [sp, #148]	; 0x94
   15d68:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15d6c:	cmp	r2, r0
   15d70:	bne	15f18 <__assert_fail@plt+0x4714>
   15d74:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15d78:	ldr	r0, [sp, #144]	; 0x90
   15d7c:	bl	114e0 <memcmp@plt>
   15d80:	cmp	r0, #0
   15d84:	bne	15f18 <__assert_fail@plt+0x4714>
   15d88:	b	15d9c <__assert_fail@plt+0x4598>
   15d8c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15d90:	ldr	r1, [sp, #156]	; 0x9c
   15d94:	cmp	r1, r0
   15d98:	bne	15f18 <__assert_fail@plt+0x4714>
   15d9c:	mov	r0, r7
   15da0:	mov	r1, #48	; 0x30
   15da4:	vld1.64	{d16-d17}, [r0], r1
   15da8:	ldr	r1, [sp]
   15dac:	vld1.64	{d18-d19}, [r1]
   15db0:	add	r3, sp, #72	; 0x48
   15db4:	add	r1, r3, #16
   15db8:	add	r2, r7, #32
   15dbc:	vld1.64	{d20-d21}, [r2]
   15dc0:	vldr	d22, [r0]
   15dc4:	vst1.64	{d18-d19}, [r1]
   15dc8:	add	r0, r3, #32
   15dcc:	vst1.64	{d20-d21}, [r0]
   15dd0:	mov	r0, r3
   15dd4:	mov	r1, #12
   15dd8:	vst1.64	{d16-d17}, [r0], r1
   15ddc:	strb	r8, [r0]
   15de0:	str	r5, [sp, #32]
   15de4:	strb	r8, [sp, #16]
   15de8:	vstr	d22, [sp, #120]	; 0x78
   15dec:	ldr	r0, [sp, #88]	; 0x58
   15df0:	ldr	r1, [sp, #92]	; 0x5c
   15df4:	add	r0, r0, r1
   15df8:	str	r0, [sp, #88]	; 0x58
   15dfc:	ldr	r0, [sp, #4]
   15e00:	str	r8, [r0]
   15e04:	str	r8, [r0, #4]
   15e08:	strb	r8, [sp, #28]
   15e0c:	add	r0, sp, #16
   15e10:	bl	165b8 <__assert_fail@plt+0x4db4>
   15e14:	ldrb	r0, [sp, #40]	; 0x28
   15e18:	cmp	r0, #0
   15e1c:	beq	15e2c <__assert_fail@plt+0x4628>
   15e20:	ldr	r0, [sp, #44]	; 0x2c
   15e24:	cmp	r0, #0
   15e28:	beq	16088 <__assert_fail@plt+0x4884>
   15e2c:	strb	r8, [sp, #28]
   15e30:	ldr	r0, [sp, #32]
   15e34:	ldr	r1, [sp, #36]	; 0x24
   15e38:	add	r0, r0, r1
   15e3c:	str	r0, [sp, #32]
   15e40:	add	r0, sp, #16
   15e44:	bl	165b8 <__assert_fail@plt+0x4db4>
   15e48:	ldrb	r0, [sp, #40]	; 0x28
   15e4c:	cmp	r0, #0
   15e50:	beq	15e60 <__assert_fail@plt+0x465c>
   15e54:	ldr	r0, [sp, #44]	; 0x2c
   15e58:	cmp	r0, #0
   15e5c:	beq	16070 <__assert_fail@plt+0x486c>
   15e60:	add	sl, r4, #2
   15e64:	add	r0, sp, #72	; 0x48
   15e68:	bl	165b8 <__assert_fail@plt+0x4db4>
   15e6c:	ldr	r0, [sp, #100]	; 0x64
   15e70:	ldrb	r1, [sp, #96]	; 0x60
   15e74:	cmp	r0, #0
   15e78:	bne	15e84 <__assert_fail@plt+0x4680>
   15e7c:	cmp	r1, #0
   15e80:	bne	16060 <__assert_fail@plt+0x485c>
   15e84:	cmp	r1, #0
   15e88:	ldrbne	r1, [sp, #40]	; 0x28
   15e8c:	cmpne	r1, #0
   15e90:	bne	15ebc <__assert_fail@plt+0x46b8>
   15e94:	ldr	r2, [sp, #92]	; 0x5c
   15e98:	ldr	r0, [sp, #36]	; 0x24
   15e9c:	cmp	r2, r0
   15ea0:	bne	15f18 <__assert_fail@plt+0x4714>
   15ea4:	ldr	r1, [sp, #32]
   15ea8:	ldr	r0, [sp, #88]	; 0x58
   15eac:	bl	114e0 <memcmp@plt>
   15eb0:	cmp	r0, #0
   15eb4:	beq	15ec8 <__assert_fail@plt+0x46c4>
   15eb8:	b	15f18 <__assert_fail@plt+0x4714>
   15ebc:	ldr	r1, [sp, #44]	; 0x2c
   15ec0:	cmp	r0, r1
   15ec4:	bne	15f18 <__assert_fail@plt+0x4714>
   15ec8:	strb	r8, [sp, #84]	; 0x54
   15ecc:	strb	r8, [sp, #28]
   15ed0:	ldr	r0, [sp, #88]	; 0x58
   15ed4:	ldr	r1, [sp, #92]	; 0x5c
   15ed8:	add	r0, r0, r1
   15edc:	str	r0, [sp, #88]	; 0x58
   15ee0:	ldr	r0, [sp, #32]
   15ee4:	ldr	r1, [sp, #36]	; 0x24
   15ee8:	add	r0, r0, r1
   15eec:	str	r0, [sp, #32]
   15ef0:	add	r0, sp, #16
   15ef4:	bl	165b8 <__assert_fail@plt+0x4db4>
   15ef8:	add	sl, sl, #1
   15efc:	ldrb	r0, [sp, #40]	; 0x28
   15f00:	cmp	r0, #0
   15f04:	beq	15e64 <__assert_fail@plt+0x4660>
   15f08:	ldr	r0, [sp, #44]	; 0x2c
   15f0c:	cmp	r0, #0
   15f10:	bne	15e64 <__assert_fail@plt+0x4660>
   15f14:	b	16070 <__assert_fail@plt+0x486c>
   15f18:	add	r9, r9, #1
   15f1c:	mov	r4, #0
   15f20:	strb	r4, [sp, #140]	; 0x8c
   15f24:	ldr	r0, [sp, #144]	; 0x90
   15f28:	ldr	r1, [sp, #148]	; 0x94
   15f2c:	add	r0, r0, r1
   15f30:	str	r0, [sp, #144]	; 0x90
   15f34:	mov	r0, r7
   15f38:	bl	165b8 <__assert_fail@plt+0x4db4>
   15f3c:	ldrb	r0, [sp, #152]	; 0x98
   15f40:	cmp	r0, #0
   15f44:	beq	15c80 <__assert_fail@plt+0x447c>
   15f48:	ldr	r0, [sp, #156]	; 0x9c
   15f4c:	cmp	r0, #0
   15f50:	bne	15c80 <__assert_fail@plt+0x447c>
   15f54:	b	16064 <__assert_fail@plt+0x4860>
   15f58:	ldrb	r9, [r5]
   15f5c:	cmp	r9, #0
   15f60:	beq	16058 <__assert_fail@plt+0x4854>
   15f64:	ldrb	r0, [r6]
   15f68:	cmp	r0, #0
   15f6c:	beq	16060 <__assert_fail@plt+0x485c>
   15f70:	mov	r3, #1
   15f74:	mov	ip, #0
   15f78:	mov	sl, r5
   15f7c:	mov	r7, #0
   15f80:	mov	r8, #0
   15f84:	add	r0, r8, r8, lsl #2
   15f88:	cmp	r7, r0
   15f8c:	bcc	16000 <__assert_fail@plt+0x47fc>
   15f90:	tst	r3, #1
   15f94:	beq	16000 <__assert_fail@plt+0x47fc>
   15f98:	cmp	r8, #10
   15f9c:	bcc	16000 <__assert_fail@plt+0x47fc>
   15fa0:	cmp	sl, #0
   15fa4:	beq	15fcc <__assert_fail@plt+0x47c8>
   15fa8:	sub	r1, r7, ip
   15fac:	mov	r0, sl
   15fb0:	mov	r4, r3
   15fb4:	bl	116f0 <strnlen@plt>
   15fb8:	mov	r3, r4
   15fbc:	ldrb	r0, [sl, r0]!
   15fc0:	cmp	r0, #0
   15fc4:	mov	ip, r7
   15fc8:	bne	16000 <__assert_fail@plt+0x47fc>
   15fcc:	mov	r0, r5
   15fd0:	mov	r4, ip
   15fd4:	bl	11654 <strlen@plt>
   15fd8:	mov	r2, r0
   15fdc:	mov	r0, r6
   15fe0:	mov	r1, r5
   15fe4:	sub	r3, fp, #88	; 0x58
   15fe8:	bl	16460 <__assert_fail@plt+0x4c5c>
   15fec:	mov	ip, r4
   15ff0:	mov	r3, #0
   15ff4:	cmp	r0, #0
   15ff8:	mov	sl, #0
   15ffc:	bne	16078 <__assert_fail@plt+0x4874>
   16000:	ldrb	r0, [r6]
   16004:	cmp	r0, r9
   16008:	bne	1603c <__assert_fail@plt+0x4838>
   1600c:	mov	r0, #1
   16010:	ldrb	r1, [r5, r0]
   16014:	cmp	r1, #0
   16018:	beq	16058 <__assert_fail@plt+0x4854>
   1601c:	ldrb	r2, [r6, r0]
   16020:	cmp	r2, #0
   16024:	beq	16060 <__assert_fail@plt+0x485c>
   16028:	add	r0, r0, #1
   1602c:	cmp	r2, r1
   16030:	beq	16010 <__assert_fail@plt+0x480c>
   16034:	add	r7, r7, r0
   16038:	b	16040 <__assert_fail@plt+0x483c>
   1603c:	add	r7, r7, #1
   16040:	add	r8, r8, #1
   16044:	ldrb	r0, [r6, #1]!
   16048:	mov	r4, #0
   1604c:	cmp	r0, #0
   16050:	bne	15f84 <__assert_fail@plt+0x4780>
   16054:	b	16064 <__assert_fail@plt+0x4860>
   16058:	mov	r4, r6
   1605c:	b	16064 <__assert_fail@plt+0x4860>
   16060:	mov	r4, #0
   16064:	mov	r0, r4
   16068:	sub	sp, fp, #28
   1606c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16070:	ldr	r4, [sp, #144]	; 0x90
   16074:	b	16064 <__assert_fail@plt+0x4860>
   16078:	ldr	r4, [fp, #-88]	; 0xffffffa8
   1607c:	b	16064 <__assert_fail@plt+0x4860>
   16080:	ldr	r4, [sp, #72]	; 0x48
   16084:	b	16064 <__assert_fail@plt+0x4860>
   16088:	bl	117d4 <abort@plt>
   1608c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16090:	add	fp, sp, #28
   16094:	sub	sp, sp, #132	; 0x84
   16098:	mov	r5, r2
   1609c:	mov	r4, r1
   160a0:	mov	r8, r0
   160a4:	mov	r0, r1
   160a8:	bl	19d4c <__assert_fail@plt+0x8548>
   160ac:	mov	r6, r0
   160b0:	mov	r7, #0
   160b4:	movw	r0, #47662	; 0xba2e
   160b8:	movt	r0, #744	; 0x2e8
   160bc:	cmp	r6, r0
   160c0:	bhi	16450 <__assert_fail@plt+0x4c4c>
   160c4:	mov	r0, #44	; 0x2c
   160c8:	mul	r0, r6, r0
   160cc:	cmp	r0, #4016	; 0xfb0
   160d0:	bhi	160f8 <__assert_fail@plt+0x48f4>
   160d4:	add	r0, r0, #22
   160d8:	bic	r0, r0, #7
   160dc:	sub	r0, sp, r0
   160e0:	add	r1, r0, #15
   160e4:	bic	sl, r1, #15
   160e8:	mov	sp, r0
   160ec:	cmp	sl, #0
   160f0:	bne	16108 <__assert_fail@plt+0x4904>
   160f4:	b	16450 <__assert_fail@plt+0x4c4c>
   160f8:	bl	19c10 <__assert_fail@plt+0x840c>
   160fc:	mov	sl, r0
   16100:	cmp	sl, #0
   16104:	beq	16450 <__assert_fail@plt+0x4c4c>
   16108:	str	r5, [fp, #-156]	; 0xffffff64
   1610c:	mov	r9, #0
   16110:	str	r9, [fp, #-80]	; 0xffffffb0
   16114:	str	r9, [fp, #-84]	; 0xffffffac
   16118:	strb	r9, [fp, #-88]	; 0xffffffa8
   1611c:	str	r4, [fp, #-72]	; 0xffffffb8
   16120:	strb	r9, [fp, #-76]	; 0xffffffb4
   16124:	sub	r4, fp, #88	; 0x58
   16128:	mov	r0, r4
   1612c:	bl	165b8 <__assert_fail@plt+0x4db4>
   16130:	add	r0, r6, r6, lsl #2
   16134:	add	r0, sl, r0, lsl #3
   16138:	str	r0, [fp, #-148]	; 0xffffff6c
   1613c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16140:	cmp	r0, #0
   16144:	beq	16154 <__assert_fail@plt+0x4950>
   16148:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1614c:	cmp	r0, #0
   16150:	beq	161a4 <__assert_fail@plt+0x49a0>
   16154:	add	r4, r4, #16
   16158:	sub	r7, fp, #88	; 0x58
   1615c:	mov	r5, sl
   16160:	mov	r0, r5
   16164:	mov	r1, r4
   16168:	bl	19cd4 <__assert_fail@plt+0x84d0>
   1616c:	strb	r9, [fp, #-76]	; 0xffffffb4
   16170:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16174:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16178:	add	r0, r0, r1
   1617c:	str	r0, [fp, #-72]	; 0xffffffb8
   16180:	mov	r0, r7
   16184:	bl	165b8 <__assert_fail@plt+0x4db4>
   16188:	add	r5, r5, #40	; 0x28
   1618c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16190:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   16194:	cmp	r1, #0
   16198:	beq	16160 <__assert_fail@plt+0x495c>
   1619c:	cmp	r0, #0
   161a0:	bne	16160 <__assert_fail@plt+0x495c>
   161a4:	str	r8, [fp, #-160]	; 0xffffff60
   161a8:	mov	r0, #1
   161ac:	ldr	r3, [fp, #-148]	; 0xffffff6c
   161b0:	str	r0, [r3, #4]
   161b4:	str	r6, [fp, #-152]	; 0xffffff68
   161b8:	cmp	r6, #3
   161bc:	bcc	16284 <__assert_fail@plt+0x4a80>
   161c0:	mov	r4, #2
   161c4:	mov	r5, #0
   161c8:	add	r0, r4, r4, lsl #2
   161cc:	add	r0, sl, r0, lsl #3
   161d0:	sub	r7, r0, #28
   161d4:	sub	r9, r0, #40	; 0x28
   161d8:	sub	r6, r0, #36	; 0x24
   161dc:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   161e0:	cmp	r8, #0
   161e4:	bne	161fc <__assert_fail@plt+0x49f8>
   161e8:	b	16224 <__assert_fail@plt+0x4a20>
   161ec:	ldr	r0, [r3, r5, lsl #2]
   161f0:	sub	r5, r5, r0
   161f4:	cmp	r8, #0
   161f8:	beq	16224 <__assert_fail@plt+0x4a20>
   161fc:	add	r0, r5, r5, lsl #2
   16200:	add	r0, sl, r0, lsl #3
   16204:	ldrb	r1, [r0, #8]
   16208:	cmp	r1, #0
   1620c:	beq	16224 <__assert_fail@plt+0x4a20>
   16210:	ldr	r0, [r0, #12]
   16214:	ldr	r1, [r7]
   16218:	cmp	r1, r0
   1621c:	bne	16254 <__assert_fail@plt+0x4a50>
   16220:	b	16268 <__assert_fail@plt+0x4a64>
   16224:	add	r0, r5, r5, lsl #2
   16228:	add	r1, sl, r0, lsl #3
   1622c:	ldr	r1, [r1, #4]
   16230:	ldr	r2, [r6]
   16234:	cmp	r2, r1
   16238:	bne	16254 <__assert_fail@plt+0x4a50>
   1623c:	ldr	r1, [sl, r0, lsl #3]
   16240:	ldr	r0, [r9]
   16244:	bl	114e0 <memcmp@plt>
   16248:	ldr	r3, [fp, #-148]	; 0xffffff6c
   1624c:	cmp	r0, #0
   16250:	beq	16268 <__assert_fail@plt+0x4a64>
   16254:	cmp	r5, #0
   16258:	bne	161ec <__assert_fail@plt+0x49e8>
   1625c:	mov	r5, #0
   16260:	mov	r0, r4
   16264:	b	16270 <__assert_fail@plt+0x4a6c>
   16268:	add	r5, r5, #1
   1626c:	sub	r0, r4, r5
   16270:	str	r0, [r3, r4, lsl #2]
   16274:	add	r4, r4, #1
   16278:	ldr	r0, [fp, #-152]	; 0xffffff68
   1627c:	cmp	r4, r0
   16280:	bne	161c8 <__assert_fail@plt+0x49c4>
   16284:	mov	r5, #0
   16288:	ldr	r8, [fp, #-156]	; 0xffffff64
   1628c:	str	r5, [r8]
   16290:	str	r5, [fp, #-80]	; 0xffffffb0
   16294:	str	r5, [fp, #-84]	; 0xffffffac
   16298:	str	r5, [fp, #-136]	; 0xffffff78
   1629c:	str	r5, [fp, #-140]	; 0xffffff74
   162a0:	strb	r5, [fp, #-88]	; 0xffffffa8
   162a4:	ldr	r0, [fp, #-160]	; 0xffffff60
   162a8:	str	r0, [fp, #-72]	; 0xffffffb8
   162ac:	strb	r5, [fp, #-76]	; 0xffffffb4
   162b0:	str	r0, [fp, #-128]	; 0xffffff80
   162b4:	strb	r5, [fp, #-144]	; 0xffffff70
   162b8:	strb	r5, [fp, #-132]	; 0xffffff7c
   162bc:	sub	r0, fp, #144	; 0x90
   162c0:	bl	165b8 <__assert_fail@plt+0x4db4>
   162c4:	ldrb	r1, [fp, #-120]	; 0xffffff88
   162c8:	ldr	r0, [fp, #-116]	; 0xffffff8c
   162cc:	cmp	r0, #0
   162d0:	bne	162dc <__assert_fail@plt+0x4ad8>
   162d4:	cmp	r1, #0
   162d8:	bne	16444 <__assert_fail@plt+0x4c40>
   162dc:	clz	r1, r1
   162e0:	lsr	r1, r1, #5
   162e4:	sub	r9, fp, #144	; 0x90
   162e8:	sub	r4, fp, #88	; 0x58
   162ec:	mov	r7, #0
   162f0:	add	r3, r7, r7, lsl #2
   162f4:	add	r2, sl, r3, lsl #3
   162f8:	tst	r1, #1
   162fc:	bne	1631c <__assert_fail@plt+0x4b18>
   16300:	ldrb	r1, [r2, #8]
   16304:	cmp	r1, #0
   16308:	beq	1631c <__assert_fail@plt+0x4b18>
   1630c:	ldr	r1, [r2, #12]
   16310:	cmp	r1, r0
   16314:	bne	16340 <__assert_fail@plt+0x4b3c>
   16318:	b	1639c <__assert_fail@plt+0x4b98>
   1631c:	ldr	r2, [r2, #4]
   16320:	ldr	r0, [fp, #-124]	; 0xffffff84
   16324:	cmp	r2, r0
   16328:	bne	16340 <__assert_fail@plt+0x4b3c>
   1632c:	ldr	r0, [sl, r3, lsl #3]
   16330:	ldr	r1, [fp, #-128]	; 0xffffff80
   16334:	bl	114e0 <memcmp@plt>
   16338:	cmp	r0, #0
   1633c:	beq	1639c <__assert_fail@plt+0x4b98>
   16340:	cmp	r7, #0
   16344:	beq	163c4 <__assert_fail@plt+0x4bc0>
   16348:	ldr	r0, [fp, #-148]	; 0xffffff6c
   1634c:	ldr	r6, [r0, r7, lsl #2]
   16350:	sub	r7, r7, r6
   16354:	cmp	r6, #0
   16358:	beq	16410 <__assert_fail@plt+0x4c0c>
   1635c:	mov	r0, r4
   16360:	bl	165b8 <__assert_fail@plt+0x4db4>
   16364:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16368:	cmp	r0, #0
   1636c:	beq	1637c <__assert_fail@plt+0x4b78>
   16370:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16374:	cmp	r0, #0
   16378:	beq	1645c <__assert_fail@plt+0x4c58>
   1637c:	strb	r5, [fp, #-76]	; 0xffffffb4
   16380:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16384:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16388:	add	r0, r0, r1
   1638c:	str	r0, [fp, #-72]	; 0xffffffb8
   16390:	subs	r6, r6, #1
   16394:	bne	1635c <__assert_fail@plt+0x4b58>
   16398:	b	16410 <__assert_fail@plt+0x4c0c>
   1639c:	strb	r5, [fp, #-132]	; 0xffffff7c
   163a0:	ldr	r0, [fp, #-128]	; 0xffffff80
   163a4:	ldr	r1, [fp, #-124]	; 0xffffff84
   163a8:	add	r0, r0, r1
   163ac:	str	r0, [fp, #-128]	; 0xffffff80
   163b0:	add	r7, r7, #1
   163b4:	ldr	r0, [fp, #-152]	; 0xffffff68
   163b8:	cmp	r7, r0
   163bc:	bne	16410 <__assert_fail@plt+0x4c0c>
   163c0:	b	1643c <__assert_fail@plt+0x4c38>
   163c4:	mov	r0, r4
   163c8:	bl	165b8 <__assert_fail@plt+0x4db4>
   163cc:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   163d0:	cmp	r0, #0
   163d4:	beq	163e4 <__assert_fail@plt+0x4be0>
   163d8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   163dc:	cmp	r0, #0
   163e0:	beq	1645c <__assert_fail@plt+0x4c58>
   163e4:	mov	r7, #0
   163e8:	strb	r7, [fp, #-76]	; 0xffffffb4
   163ec:	strb	r7, [fp, #-132]	; 0xffffff7c
   163f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   163f4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   163f8:	add	r0, r0, r1
   163fc:	str	r0, [fp, #-72]	; 0xffffffb8
   16400:	ldr	r0, [fp, #-128]	; 0xffffff80
   16404:	ldr	r1, [fp, #-124]	; 0xffffff84
   16408:	add	r0, r0, r1
   1640c:	str	r0, [fp, #-128]	; 0xffffff80
   16410:	mov	r0, r9
   16414:	bl	165b8 <__assert_fail@plt+0x4db4>
   16418:	ldrb	r2, [fp, #-120]	; 0xffffff88
   1641c:	clz	r0, r2
   16420:	lsr	r1, r0, #5
   16424:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16428:	cmp	r0, #0
   1642c:	bne	162f0 <__assert_fail@plt+0x4aec>
   16430:	cmp	r2, #0
   16434:	beq	162f0 <__assert_fail@plt+0x4aec>
   16438:	b	16444 <__assert_fail@plt+0x4c40>
   1643c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16440:	str	r0, [r8]
   16444:	mov	r0, sl
   16448:	bl	19c80 <__assert_fail@plt+0x847c>
   1644c:	mov	r7, #1
   16450:	mov	r0, r7
   16454:	sub	sp, fp, #28
   16458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1645c:	bl	117d4 <abort@plt>
   16460:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16464:	add	fp, sp, #24
   16468:	mov	r4, #0
   1646c:	cmn	r2, #-536870911	; 0xe0000001
   16470:	bhi	165ac <__assert_fail@plt+0x4da8>
   16474:	mov	r8, r3
   16478:	mov	r5, r2
   1647c:	mov	r6, r1
   16480:	mov	r7, r0
   16484:	lsl	r0, r2, #2
   16488:	cmp	r0, #4016	; 0xfb0
   1648c:	bhi	164b4 <__assert_fail@plt+0x4cb0>
   16490:	add	r0, r0, #22
   16494:	bic	r0, r0, #7
   16498:	sub	r1, sp, r0
   1649c:	add	r0, r1, #15
   164a0:	bic	r0, r0, #15
   164a4:	mov	sp, r1
   164a8:	cmp	r0, #0
   164ac:	bne	164c0 <__assert_fail@plt+0x4cbc>
   164b0:	b	165ac <__assert_fail@plt+0x4da8>
   164b4:	bl	19c10 <__assert_fail@plt+0x840c>
   164b8:	cmp	r0, #0
   164bc:	beq	165ac <__assert_fail@plt+0x4da8>
   164c0:	mov	r1, #1
   164c4:	str	r1, [r0, #4]
   164c8:	cmp	r5, #3
   164cc:	bcc	16530 <__assert_fail@plt+0x4d2c>
   164d0:	mov	r1, #2
   164d4:	mov	r2, #0
   164d8:	ldrb	r4, [r6, r2]
   164dc:	add	r3, r6, r1
   164e0:	ldrb	r3, [r3, #-1]
   164e4:	cmp	r3, r4
   164e8:	bne	16504 <__assert_fail@plt+0x4d00>
   164ec:	b	16518 <__assert_fail@plt+0x4d14>
   164f0:	ldr	r4, [r0, r2, lsl #2]
   164f4:	sub	r2, r2, r4
   164f8:	ldrb	r4, [r6, r2]
   164fc:	cmp	r3, r4
   16500:	beq	16518 <__assert_fail@plt+0x4d14>
   16504:	cmp	r2, #0
   16508:	bne	164f0 <__assert_fail@plt+0x4cec>
   1650c:	mov	r2, #0
   16510:	mov	r3, r1
   16514:	b	16520 <__assert_fail@plt+0x4d1c>
   16518:	add	r2, r2, #1
   1651c:	sub	r3, r1, r2
   16520:	str	r3, [r0, r1, lsl #2]
   16524:	add	r1, r1, #1
   16528:	cmp	r1, r5
   1652c:	bne	164d8 <__assert_fail@plt+0x4cd4>
   16530:	mov	r1, #0
   16534:	str	r1, [r8]
   16538:	ldrb	r3, [r7]
   1653c:	cmp	r3, #0
   16540:	beq	165a4 <__assert_fail@plt+0x4da0>
   16544:	mov	r2, r7
   16548:	ldrb	r4, [r6, r1]
   1654c:	uxtb	r3, r3
   16550:	cmp	r4, r3
   16554:	bne	1656c <__assert_fail@plt+0x4d68>
   16558:	add	r1, r1, #1
   1655c:	cmp	r1, r5
   16560:	beq	165a0 <__assert_fail@plt+0x4d9c>
   16564:	add	r7, r7, #1
   16568:	b	16590 <__assert_fail@plt+0x4d8c>
   1656c:	cmp	r1, #0
   16570:	beq	16584 <__assert_fail@plt+0x4d80>
   16574:	ldr	r3, [r0, r1, lsl #2]
   16578:	sub	r1, r1, r3
   1657c:	add	r2, r2, r3
   16580:	b	16590 <__assert_fail@plt+0x4d8c>
   16584:	add	r7, r7, #1
   16588:	add	r2, r2, #1
   1658c:	mov	r1, #0
   16590:	ldrb	r3, [r7]
   16594:	cmp	r3, #0
   16598:	bne	16548 <__assert_fail@plt+0x4d44>
   1659c:	b	165a4 <__assert_fail@plt+0x4da0>
   165a0:	str	r2, [r8]
   165a4:	bl	19c80 <__assert_fail@plt+0x847c>
   165a8:	mov	r4, #1
   165ac:	mov	r0, r4
   165b0:	sub	sp, fp, #24
   165b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   165b8:	push	{r4, r5, r6, r7, fp, lr}
   165bc:	add	fp, sp, #16
   165c0:	mov	r4, r0
   165c4:	ldrb	r0, [r0, #12]
   165c8:	cmp	r0, #0
   165cc:	popne	{r4, r5, r6, r7, fp, pc}
   165d0:	ldrb	r0, [r4]
   165d4:	cmp	r0, #0
   165d8:	bne	16624 <__assert_fail@plt+0x4e20>
   165dc:	ldr	r0, [r4, #16]
   165e0:	ldrb	r0, [r0]
   165e4:	bl	19d24 <__assert_fail@plt+0x8520>
   165e8:	cmp	r0, #0
   165ec:	beq	1660c <__assert_fail@plt+0x4e08>
   165f0:	mov	r0, #1
   165f4:	str	r0, [r4, #20]
   165f8:	ldr	r1, [r4, #16]
   165fc:	ldrb	r1, [r1]
   16600:	strb	r0, [r4, #24]
   16604:	str	r1, [r4, #28]
   16608:	b	166dc <__assert_fail@plt+0x4ed8>
   1660c:	add	r0, r4, #4
   16610:	bl	114c8 <mbsinit@plt>
   16614:	cmp	r0, #0
   16618:	beq	166e8 <__assert_fail@plt+0x4ee4>
   1661c:	mov	r0, #1
   16620:	strb	r0, [r4]
   16624:	ldr	r7, [r4, #16]
   16628:	bl	11588 <__ctype_get_mb_cur_max@plt>
   1662c:	mov	r1, r0
   16630:	mov	r0, r7
   16634:	bl	18478 <__assert_fail@plt+0x6c74>
   16638:	mov	r2, r0
   1663c:	add	r6, r4, #28
   16640:	add	r5, r4, #4
   16644:	mov	r0, r6
   16648:	mov	r1, r7
   1664c:	mov	r3, r5
   16650:	bl	19688 <__assert_fail@plt+0x7e84>
   16654:	str	r0, [r4, #20]
   16658:	cmn	r0, #2
   1665c:	beq	166c8 <__assert_fail@plt+0x4ec4>
   16660:	cmp	r0, #0
   16664:	beq	16684 <__assert_fail@plt+0x4e80>
   16668:	cmn	r0, #1
   1666c:	bne	166a8 <__assert_fail@plt+0x4ea4>
   16670:	mov	r0, #0
   16674:	strb	r0, [r4, #24]
   16678:	mov	r0, #1
   1667c:	str	r0, [r4, #20]
   16680:	b	166dc <__assert_fail@plt+0x4ed8>
   16684:	mov	r0, #1
   16688:	str	r0, [r4, #20]
   1668c:	ldr	r0, [r4, #16]
   16690:	ldrb	r0, [r0]
   16694:	cmp	r0, #0
   16698:	bne	16708 <__assert_fail@plt+0x4f04>
   1669c:	ldr	r0, [r6]
   166a0:	cmp	r0, #0
   166a4:	bne	16728 <__assert_fail@plt+0x4f24>
   166a8:	mov	r0, #1
   166ac:	strb	r0, [r4, #24]
   166b0:	mov	r0, r5
   166b4:	bl	114c8 <mbsinit@plt>
   166b8:	cmp	r0, #0
   166bc:	movne	r0, #0
   166c0:	strbne	r0, [r4]
   166c4:	b	166dc <__assert_fail@plt+0x4ed8>
   166c8:	ldr	r0, [r4, #16]
   166cc:	bl	11654 <strlen@plt>
   166d0:	str	r0, [r4, #20]
   166d4:	mov	r0, #0
   166d8:	strb	r0, [r4, #24]
   166dc:	mov	r0, #1
   166e0:	strb	r0, [r4, #12]
   166e4:	pop	{r4, r5, r6, r7, fp, pc}
   166e8:	movw	r0, #48857	; 0xbed9
   166ec:	movt	r0, #1
   166f0:	movw	r1, #48880	; 0xbef0
   166f4:	movt	r1, #1
   166f8:	movw	r3, #48892	; 0xbefc
   166fc:	movt	r3, #1
   16700:	mov	r2, #143	; 0x8f
   16704:	bl	11804 <__assert_fail@plt>
   16708:	movw	r0, #48940	; 0xbf2c
   1670c:	movt	r0, #1
   16710:	movw	r1, #48880	; 0xbef0
   16714:	movt	r1, #1
   16718:	movw	r3, #48892	; 0xbefc
   1671c:	movt	r3, #1
   16720:	mov	r2, #171	; 0xab
   16724:	bl	11804 <__assert_fail@plt>
   16728:	movw	r0, #48963	; 0xbf43
   1672c:	movt	r0, #1
   16730:	movw	r1, #48880	; 0xbef0
   16734:	movt	r1, #1
   16738:	movw	r3, #48892	; 0xbefc
   1673c:	movt	r3, #1
   16740:	mov	r2, #172	; 0xac
   16744:	bl	11804 <__assert_fail@plt>
   16748:	ldr	r2, [r0, #16]
   1674c:	add	r1, r2, r1
   16750:	str	r1, [r0, #16]
   16754:	bx	lr
   16758:	ldrb	r3, [r1]
   1675c:	mov	r2, r0
   16760:	strb	r3, [r2], #4
   16764:	cmp	r3, #0
   16768:	beq	16778 <__assert_fail@plt+0x4f74>
   1676c:	ldmib	r1, {r3, ip}
   16770:	stm	r2, {r3, ip}
   16774:	b	16784 <__assert_fail@plt+0x4f80>
   16778:	mov	r3, #0
   1677c:	str	r3, [r2]
   16780:	str	r3, [r2, #4]
   16784:	ldrb	r2, [r1, #12]
   16788:	strb	r2, [r0, #12]
   1678c:	add	r0, r0, #16
   16790:	add	r1, r1, #16
   16794:	b	19cd4 <__assert_fail@plt+0x84d0>
   16798:	push	{r4, r5, fp, lr}
   1679c:	add	fp, sp, #8
   167a0:	cmp	r0, #0
   167a4:	beq	16838 <__assert_fail@plt+0x5034>
   167a8:	mov	r4, r0
   167ac:	mov	r1, #47	; 0x2f
   167b0:	bl	11744 <strrchr@plt>
   167b4:	cmp	r0, #0
   167b8:	mov	r5, r4
   167bc:	addne	r5, r0, #1
   167c0:	sub	r0, r5, r4
   167c4:	cmp	r0, #7
   167c8:	blt	1681c <__assert_fail@plt+0x5018>
   167cc:	sub	r0, r5, #7
   167d0:	movw	r1, #49037	; 0xbf8d
   167d4:	movt	r1, #1
   167d8:	mov	r2, #7
   167dc:	bl	117c8 <strncmp@plt>
   167e0:	cmp	r0, #0
   167e4:	bne	1681c <__assert_fail@plt+0x5018>
   167e8:	movw	r1, #49045	; 0xbf95
   167ec:	movt	r1, #1
   167f0:	mov	r0, r5
   167f4:	mov	r2, #3
   167f8:	bl	117c8 <strncmp@plt>
   167fc:	cmp	r0, #0
   16800:	beq	1680c <__assert_fail@plt+0x5008>
   16804:	mov	r4, r5
   16808:	b	1681c <__assert_fail@plt+0x5018>
   1680c:	add	r4, r5, #3
   16810:	movw	r0, #53688	; 0xd1b8
   16814:	movt	r0, #2
   16818:	str	r4, [r0]
   1681c:	movw	r0, #53696	; 0xd1c0
   16820:	movt	r0, #2
   16824:	str	r4, [r0]
   16828:	movw	r0, #53936	; 0xd2b0
   1682c:	movt	r0, #2
   16830:	str	r4, [r0]
   16834:	pop	{r4, r5, fp, pc}
   16838:	movw	r0, #53712	; 0xd1d0
   1683c:	movt	r0, #2
   16840:	ldr	r3, [r0]
   16844:	movw	r0, #48981	; 0xbf55
   16848:	movt	r0, #1
   1684c:	mov	r1, #55	; 0x37
   16850:	mov	r2, #1
   16854:	bl	11564 <fwrite@plt>
   16858:	bl	117d4 <abort@plt>
   1685c:	push	{r4, r5, r6, sl, fp, lr}
   16860:	add	fp, sp, #16
   16864:	mov	r4, r0
   16868:	movw	r0, #53944	; 0xd2b8
   1686c:	movt	r0, #2
   16870:	cmp	r4, #0
   16874:	moveq	r4, r0
   16878:	bl	11684 <__errno_location@plt>
   1687c:	mov	r5, r0
   16880:	ldr	r6, [r0]
   16884:	mov	r0, r4
   16888:	mov	r1, #48	; 0x30
   1688c:	bl	18cf0 <__assert_fail@plt+0x74ec>
   16890:	str	r6, [r5]
   16894:	pop	{r4, r5, r6, sl, fp, pc}
   16898:	movw	r1, #53944	; 0xd2b8
   1689c:	movt	r1, #2
   168a0:	cmp	r0, #0
   168a4:	movne	r1, r0
   168a8:	ldr	r0, [r1]
   168ac:	bx	lr
   168b0:	movw	r2, #53944	; 0xd2b8
   168b4:	movt	r2, #2
   168b8:	cmp	r0, #0
   168bc:	movne	r2, r0
   168c0:	str	r1, [r2]
   168c4:	bx	lr
   168c8:	movw	r3, #53944	; 0xd2b8
   168cc:	movt	r3, #2
   168d0:	cmp	r0, #0
   168d4:	movne	r3, r0
   168d8:	ubfx	r0, r1, #5, #3
   168dc:	add	r0, r3, r0, lsl #2
   168e0:	ldr	r3, [r0, #8]
   168e4:	and	r1, r1, #31
   168e8:	eor	r2, r2, r3, lsr r1
   168ec:	and	r2, r2, #1
   168f0:	eor	r2, r3, r2, lsl r1
   168f4:	str	r2, [r0, #8]
   168f8:	mov	r0, #1
   168fc:	and	r0, r0, r3, lsr r1
   16900:	bx	lr
   16904:	movw	r2, #53944	; 0xd2b8
   16908:	movt	r2, #2
   1690c:	cmp	r0, #0
   16910:	movne	r2, r0
   16914:	ldr	r0, [r2, #4]
   16918:	str	r1, [r2, #4]
   1691c:	bx	lr
   16920:	movw	r3, #53944	; 0xd2b8
   16924:	movt	r3, #2
   16928:	cmp	r0, #0
   1692c:	movne	r3, r0
   16930:	mov	r0, #10
   16934:	str	r0, [r3]
   16938:	cmp	r1, #0
   1693c:	cmpne	r2, #0
   16940:	bne	16950 <__assert_fail@plt+0x514c>
   16944:	push	{fp, lr}
   16948:	mov	fp, sp
   1694c:	bl	117d4 <abort@plt>
   16950:	str	r1, [r3, #40]	; 0x28
   16954:	str	r2, [r3, #44]	; 0x2c
   16958:	bx	lr
   1695c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16960:	add	fp, sp, #28
   16964:	sub	sp, sp, #20
   16968:	mov	r8, r3
   1696c:	mov	r9, r2
   16970:	mov	sl, r1
   16974:	mov	r7, r0
   16978:	ldr	r0, [fp, #8]
   1697c:	movw	r5, #53944	; 0xd2b8
   16980:	movt	r5, #2
   16984:	cmp	r0, #0
   16988:	movne	r5, r0
   1698c:	bl	11684 <__errno_location@plt>
   16990:	mov	r4, r0
   16994:	ldm	r5, {r0, r1}
   16998:	ldr	r2, [r5, #40]	; 0x28
   1699c:	ldr	r3, [r5, #44]	; 0x2c
   169a0:	ldr	r6, [r4]
   169a4:	add	r5, r5, #8
   169a8:	stm	sp, {r0, r1, r5}
   169ac:	str	r2, [sp, #12]
   169b0:	str	r3, [sp, #16]
   169b4:	mov	r0, r7
   169b8:	mov	r1, sl
   169bc:	mov	r2, r9
   169c0:	mov	r3, r8
   169c4:	bl	169d4 <__assert_fail@plt+0x51d0>
   169c8:	str	r6, [r4]
   169cc:	sub	sp, fp, #28
   169d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169d8:	add	fp, sp, #28
   169dc:	sub	sp, sp, #156	; 0x9c
   169e0:	mov	r9, r3
   169e4:	str	r2, [fp, #-84]	; 0xffffffac
   169e8:	mov	r6, r1
   169ec:	mov	r7, r0
   169f0:	ldr	r0, [fp, #12]
   169f4:	and	r1, r0, #4
   169f8:	str	r1, [sp, #32]
   169fc:	and	r1, r0, #1
   16a00:	str	r1, [sp, #36]	; 0x24
   16a04:	ubfx	sl, r0, #1, #1
   16a08:	bl	11588 <__ctype_get_mb_cur_max@plt>
   16a0c:	str	r0, [sp, #40]	; 0x28
   16a10:	ldr	r0, [fp, #24]
   16a14:	str	r0, [sp, #76]	; 0x4c
   16a18:	ldr	r0, [fp, #20]
   16a1c:	str	r0, [sp, #68]	; 0x44
   16a20:	ldr	r0, [fp, #8]
   16a24:	str	r0, [fp, #-60]	; 0xffffffc4
   16a28:	mov	r0, #0
   16a2c:	str	r0, [sp, #72]	; 0x48
   16a30:	mov	r0, #0
   16a34:	str	r0, [sp, #92]	; 0x5c
   16a38:	mov	r0, #0
   16a3c:	str	r0, [fp, #-72]	; 0xffffffb8
   16a40:	mov	r0, #0
   16a44:	mov	r1, #0
   16a48:	str	r1, [fp, #-56]	; 0xffffffc8
   16a4c:	mov	r1, #0
   16a50:	str	r1, [sp, #56]	; 0x38
   16a54:	mov	r5, #1
   16a58:	str	r7, [sp, #80]	; 0x50
   16a5c:	mov	r4, r6
   16a60:	ldr	r6, [fp, #-60]	; 0xffffffc4
   16a64:	cmp	r6, #10
   16a68:	bhi	179d0 <__assert_fail@plt+0x61cc>
   16a6c:	add	r1, pc, #20
   16a70:	mov	r8, #0
   16a74:	mov	r2, #1
   16a78:	mov	r3, #0
   16a7c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16a80:	mov	lr, r9
   16a84:	ldr	pc, [r1, r6, lsl #2]
   16a88:	andeq	r6, r1, r0, ror #22
   16a8c:	muleq	r1, r0, fp
   16a90:	andeq	r6, r1, r0, asr fp
   16a94:	andeq	r6, r1, r8, asr #22
   16a98:	andeq	r6, r1, r4, lsl #23
   16a9c:	andeq	r6, r1, r4, ror #23
   16aa0:	andeq	r6, r1, r0, ror fp
   16aa4:	andeq	r6, r1, r0, asr #24
   16aa8:			; <UNDEFINED> instruction: 0x00016ab4
   16aac:			; <UNDEFINED> instruction: 0x00016ab4
   16ab0:	ldrdeq	r6, [r1], -ip
   16ab4:	movw	r0, #49127	; 0xbfe7
   16ab8:	movt	r0, #1
   16abc:	mov	r1, r6
   16ac0:	bl	17fdc <__assert_fail@plt+0x67d8>
   16ac4:	str	r0, [sp, #68]	; 0x44
   16ac8:	movw	r0, #48961	; 0xbf41
   16acc:	movt	r0, #1
   16ad0:	mov	r1, r6
   16ad4:	bl	17fdc <__assert_fail@plt+0x67d8>
   16ad8:	str	r0, [sp, #76]	; 0x4c
   16adc:	mov	r8, #0
   16ae0:	tst	sl, #1
   16ae4:	bne	16b1c <__assert_fail@plt+0x5318>
   16ae8:	ldr	r0, [sp, #68]	; 0x44
   16aec:	ldrb	r0, [r0]
   16af0:	cmp	r0, #0
   16af4:	beq	16b1c <__assert_fail@plt+0x5318>
   16af8:	ldr	r1, [sp, #68]	; 0x44
   16afc:	add	r1, r1, #1
   16b00:	mov	r8, #0
   16b04:	cmp	r8, r4
   16b08:	strbcc	r0, [r7, r8]
   16b0c:	ldrb	r0, [r1, r8]
   16b10:	add	r8, r8, #1
   16b14:	cmp	r0, #0
   16b18:	bne	16b04 <__assert_fail@plt+0x5300>
   16b1c:	ldr	r6, [sp, #76]	; 0x4c
   16b20:	mov	r0, r6
   16b24:	bl	11654 <strlen@plt>
   16b28:	str	r0, [fp, #-72]	; 0xffffffb8
   16b2c:	str	r6, [sp, #92]	; 0x5c
   16b30:	mov	r2, #1
   16b34:	mov	r3, sl
   16b38:	ldr	ip, [fp, #-84]	; 0xffffffac
   16b3c:	mov	lr, r9
   16b40:	ldr	r6, [fp, #-60]	; 0xffffffc4
   16b44:	b	16c40 <__assert_fail@plt+0x543c>
   16b48:	mov	r0, #1
   16b4c:	b	16b90 <__assert_fail@plt+0x538c>
   16b50:	tst	sl, #1
   16b54:	bne	16b90 <__assert_fail@plt+0x538c>
   16b58:	mov	r2, r0
   16b5c:	b	16bb8 <__assert_fail@plt+0x53b4>
   16b60:	mov	r6, #0
   16b64:	mov	r8, #0
   16b68:	mov	r2, r0
   16b6c:	b	16c3c <__assert_fail@plt+0x5438>
   16b70:	mov	r0, #1
   16b74:	str	r0, [fp, #-72]	; 0xffffffb8
   16b78:	mov	r8, #0
   16b7c:	mov	r6, #5
   16b80:	b	16bfc <__assert_fail@plt+0x53f8>
   16b84:	mov	r2, #1
   16b88:	tst	sl, #1
   16b8c:	beq	16bb8 <__assert_fail@plt+0x53b4>
   16b90:	mov	r1, #1
   16b94:	str	r1, [fp, #-72]	; 0xffffffb8
   16b98:	mov	r8, #0
   16b9c:	mov	r6, #2
   16ba0:	movw	r1, #48961	; 0xbf41
   16ba4:	movt	r1, #1
   16ba8:	str	r1, [sp, #92]	; 0x5c
   16bac:	mov	r2, r0
   16bb0:	mov	r3, #1
   16bb4:	b	16c40 <__assert_fail@plt+0x543c>
   16bb8:	mov	r8, #1
   16bbc:	mov	r6, #2
   16bc0:	cmp	r4, #0
   16bc4:	movne	r0, #39	; 0x27
   16bc8:	strbne	r0, [r7]
   16bcc:	movw	r0, #48961	; 0xbf41
   16bd0:	movt	r0, #1
   16bd4:	str	r0, [sp, #92]	; 0x5c
   16bd8:	mov	r0, #1
   16bdc:	str	r0, [fp, #-72]	; 0xffffffb8
   16be0:	b	16c3c <__assert_fail@plt+0x5438>
   16be4:	mov	r6, #5
   16be8:	tst	sl, #1
   16bec:	beq	16c14 <__assert_fail@plt+0x5410>
   16bf0:	mov	r0, #1
   16bf4:	str	r0, [fp, #-72]	; 0xffffffb8
   16bf8:	mov	r8, #0
   16bfc:	movw	r0, #49125	; 0xbfe5
   16c00:	movt	r0, #1
   16c04:	str	r0, [sp, #92]	; 0x5c
   16c08:	mov	r2, #1
   16c0c:	mov	r3, #1
   16c10:	b	16c40 <__assert_fail@plt+0x543c>
   16c14:	cmp	r4, #0
   16c18:	movne	r0, #34	; 0x22
   16c1c:	strbne	r0, [r7]
   16c20:	mov	r8, #1
   16c24:	movw	r0, #49125	; 0xbfe5
   16c28:	movt	r0, #1
   16c2c:	str	r0, [sp, #92]	; 0x5c
   16c30:	mov	r0, #1
   16c34:	str	r0, [fp, #-72]	; 0xffffffb8
   16c38:	mov	r2, #1
   16c3c:	mov	r3, #0
   16c40:	ldr	r0, [fp, #16]
   16c44:	cmp	r0, #0
   16c48:	movwne	r0, #1
   16c4c:	and	r0, r0, r3
   16c50:	str	r0, [fp, #-88]	; 0xffffffa8
   16c54:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16c58:	cmp	r0, #0
   16c5c:	movwne	r0, #1
   16c60:	and	r1, r0, r3
   16c64:	and	r1, r2, r1
   16c68:	str	r1, [sp, #48]	; 0x30
   16c6c:	str	r6, [fp, #-60]	; 0xffffffc4
   16c70:	subs	r6, r6, #2
   16c74:	clz	r1, r6
   16c78:	lsr	r1, r1, #5
   16c7c:	and	r1, r1, r3
   16c80:	str	r1, [sp, #60]	; 0x3c
   16c84:	str	r6, [fp, #-80]	; 0xffffffb0
   16c88:	mov	r1, r6
   16c8c:	movwne	r1, #1
   16c90:	str	r3, [fp, #-76]	; 0xffffffb4
   16c94:	eor	r3, r3, #1
   16c98:	str	r3, [sp, #88]	; 0x58
   16c9c:	orr	r3, r1, r3
   16ca0:	str	r3, [sp, #64]	; 0x40
   16ca4:	and	r1, r1, r2
   16ca8:	str	r1, [fp, #-68]	; 0xffffffbc
   16cac:	and	r0, r0, r1
   16cb0:	str	r0, [fp, #-64]	; 0xffffffc0
   16cb4:	str	r2, [sp, #84]	; 0x54
   16cb8:	eor	r0, r2, #1
   16cbc:	str	r0, [sp, #52]	; 0x34
   16cc0:	mov	r6, #0
   16cc4:	cmn	lr, #1
   16cc8:	beq	16cd8 <__assert_fail@plt+0x54d4>
   16ccc:	cmp	r6, lr
   16cd0:	bne	16ce4 <__assert_fail@plt+0x54e0>
   16cd4:	b	17850 <__assert_fail@plt+0x604c>
   16cd8:	ldrb	r0, [ip, r6]
   16cdc:	cmp	r0, #0
   16ce0:	beq	17850 <__assert_fail@plt+0x604c>
   16ce4:	str	r5, [fp, #-48]	; 0xffffffd0
   16ce8:	mov	sl, #0
   16cec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16cf0:	cmp	r0, #0
   16cf4:	beq	16d28 <__assert_fail@plt+0x5524>
   16cf8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16cfc:	add	r5, r6, r0
   16d00:	cmp	r0, #2
   16d04:	bcc	16d20 <__assert_fail@plt+0x551c>
   16d08:	cmn	lr, #1
   16d0c:	bne	16d20 <__assert_fail@plt+0x551c>
   16d10:	mov	r0, ip
   16d14:	bl	11654 <strlen@plt>
   16d18:	ldr	ip, [fp, #-84]	; 0xffffffac
   16d1c:	mov	lr, r0
   16d20:	cmp	r5, lr
   16d24:	bls	16d34 <__assert_fail@plt+0x5530>
   16d28:	mov	r0, #0
   16d2c:	str	r0, [fp, #-52]	; 0xffffffcc
   16d30:	b	16d80 <__assert_fail@plt+0x557c>
   16d34:	mov	r5, r4
   16d38:	mov	r4, lr
   16d3c:	add	r0, ip, r6
   16d40:	ldr	r1, [sp, #92]	; 0x5c
   16d44:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16d48:	bl	114e0 <memcmp@plt>
   16d4c:	cmp	r0, #0
   16d50:	mov	r1, r0
   16d54:	movwne	r1, #1
   16d58:	ldr	r2, [sp, #88]	; 0x58
   16d5c:	orr	r1, r1, r2
   16d60:	tst	r1, #1
   16d64:	beq	17914 <__assert_fail@plt+0x6110>
   16d68:	clz	r0, r0
   16d6c:	lsr	r0, r0, #5
   16d70:	str	r0, [fp, #-52]	; 0xffffffcc
   16d74:	ldr	ip, [fp, #-84]	; 0xffffffac
   16d78:	mov	lr, r4
   16d7c:	mov	r4, r5
   16d80:	ldrb	r5, [ip, r6]
   16d84:	cmp	r5, #126	; 0x7e
   16d88:	bhi	17144 <__assert_fail@plt+0x5940>
   16d8c:	mov	r9, #1
   16d90:	mov	r2, #110	; 0x6e
   16d94:	mov	r0, #97	; 0x61
   16d98:	add	r3, pc, #4
   16d9c:	mov	r1, #0
   16da0:	ldr	pc, [r3, r5, lsl #2]
   16da4:	andeq	r7, r1, ip, lsr r0
   16da8:	andeq	r7, r1, r4, asr #2
   16dac:	andeq	r7, r1, r4, asr #2
   16db0:	andeq	r7, r1, r4, asr #2
   16db4:	andeq	r7, r1, r4, asr #2
   16db8:	andeq	r7, r1, r4, asr #2
   16dbc:	andeq	r7, r1, r4, asr #2
   16dc0:	andeq	r7, r1, r8, lsl #4
   16dc4:	andeq	r7, r1, ip, lsl r0
   16dc8:	andeq	r7, r1, r4, lsl r0
   16dcc:	andeq	r7, r1, r8, lsr #32
   16dd0:	andeq	r7, r1, ip, lsr #1
   16dd4:	andeq	r7, r1, ip
   16dd8:	andeq	r7, r1, r4, lsr #32
   16ddc:	andeq	r7, r1, r4, asr #2
   16de0:	andeq	r7, r1, r4, asr #2
   16de4:	andeq	r7, r1, r4, asr #2
   16de8:	andeq	r7, r1, r4, asr #2
   16dec:	andeq	r7, r1, r4, asr #2
   16df0:	andeq	r7, r1, r4, asr #2
   16df4:	andeq	r7, r1, r4, asr #2
   16df8:	andeq	r7, r1, r4, asr #2
   16dfc:	andeq	r7, r1, r4, asr #2
   16e00:	andeq	r7, r1, r4, asr #2
   16e04:	andeq	r7, r1, r4, asr #2
   16e08:	andeq	r7, r1, r4, asr #2
   16e0c:	andeq	r7, r1, r4, asr #2
   16e10:	andeq	r7, r1, r4, asr #2
   16e14:	andeq	r7, r1, r4, asr #2
   16e18:	andeq	r7, r1, r4, asr #2
   16e1c:	andeq	r7, r1, r4, asr #2
   16e20:	andeq	r7, r1, r4, asr #2
   16e24:			; <UNDEFINED> instruction: 0x000171b8
   16e28:			; <UNDEFINED> instruction: 0x000171bc
   16e2c:			; <UNDEFINED> instruction: 0x000171bc
   16e30:			; <UNDEFINED> instruction: 0x00016fb4
   16e34:			; <UNDEFINED> instruction: 0x000171bc
   16e38:	andeq	r6, r1, r0, lsr #31
   16e3c:			; <UNDEFINED> instruction: 0x000171bc
   16e40:	strheq	r7, [r1], -r4
   16e44:			; <UNDEFINED> instruction: 0x000171bc
   16e48:			; <UNDEFINED> instruction: 0x000171bc
   16e4c:			; <UNDEFINED> instruction: 0x000171bc
   16e50:	andeq	r6, r1, r0, lsr #31
   16e54:	andeq	r6, r1, r0, lsr #31
   16e58:	andeq	r6, r1, r0, lsr #31
   16e5c:	andeq	r6, r1, r0, lsr #31
   16e60:	andeq	r6, r1, r0, lsr #31
   16e64:	andeq	r6, r1, r0, lsr #31
   16e68:	andeq	r6, r1, r0, lsr #31
   16e6c:	andeq	r6, r1, r0, lsr #31
   16e70:	andeq	r6, r1, r0, lsr #31
   16e74:	andeq	r6, r1, r0, lsr #31
   16e78:	andeq	r6, r1, r0, lsr #31
   16e7c:	andeq	r6, r1, r0, lsr #31
   16e80:	andeq	r6, r1, r0, lsr #31
   16e84:	andeq	r6, r1, r0, lsr #31
   16e88:	andeq	r6, r1, r0, lsr #31
   16e8c:	andeq	r6, r1, r0, lsr #31
   16e90:			; <UNDEFINED> instruction: 0x000171bc
   16e94:			; <UNDEFINED> instruction: 0x000171bc
   16e98:			; <UNDEFINED> instruction: 0x000171bc
   16e9c:			; <UNDEFINED> instruction: 0x000171bc
   16ea0:	andeq	r7, r1, ip, ror r0
   16ea4:	andeq	r7, r1, r4, asr #2
   16ea8:	andeq	r6, r1, r0, lsr #31
   16eac:	andeq	r6, r1, r0, lsr #31
   16eb0:	andeq	r6, r1, r0, lsr #31
   16eb4:	andeq	r6, r1, r0, lsr #31
   16eb8:	andeq	r6, r1, r0, lsr #31
   16ebc:	andeq	r6, r1, r0, lsr #31
   16ec0:	andeq	r6, r1, r0, lsr #31
   16ec4:	andeq	r6, r1, r0, lsr #31
   16ec8:	andeq	r6, r1, r0, lsr #31
   16ecc:	andeq	r6, r1, r0, lsr #31
   16ed0:	andeq	r6, r1, r0, lsr #31
   16ed4:	andeq	r6, r1, r0, lsr #31
   16ed8:	andeq	r6, r1, r0, lsr #31
   16edc:	andeq	r6, r1, r0, lsr #31
   16ee0:	andeq	r6, r1, r0, lsr #31
   16ee4:	andeq	r6, r1, r0, lsr #31
   16ee8:	andeq	r6, r1, r0, lsr #31
   16eec:	andeq	r6, r1, r0, lsr #31
   16ef0:	andeq	r6, r1, r0, lsr #31
   16ef4:	andeq	r6, r1, r0, lsr #31
   16ef8:	andeq	r6, r1, r0, lsr #31
   16efc:	andeq	r6, r1, r0, lsr #31
   16f00:	andeq	r6, r1, r0, lsr #31
   16f04:	andeq	r6, r1, r0, lsr #31
   16f08:	andeq	r6, r1, r0, lsr #31
   16f0c:	andeq	r6, r1, r0, lsr #31
   16f10:			; <UNDEFINED> instruction: 0x000171bc
   16f14:	andeq	r6, r1, r8, ror #31
   16f18:	andeq	r6, r1, r0, lsr #31
   16f1c:			; <UNDEFINED> instruction: 0x000171bc
   16f20:	andeq	r6, r1, r0, lsr #31
   16f24:			; <UNDEFINED> instruction: 0x000171bc
   16f28:	andeq	r6, r1, r0, lsr #31
   16f2c:	andeq	r6, r1, r0, lsr #31
   16f30:	andeq	r6, r1, r0, lsr #31
   16f34:	andeq	r6, r1, r0, lsr #31
   16f38:	andeq	r6, r1, r0, lsr #31
   16f3c:	andeq	r6, r1, r0, lsr #31
   16f40:	andeq	r6, r1, r0, lsr #31
   16f44:	andeq	r6, r1, r0, lsr #31
   16f48:	andeq	r6, r1, r0, lsr #31
   16f4c:	andeq	r6, r1, r0, lsr #31
   16f50:	andeq	r6, r1, r0, lsr #31
   16f54:	andeq	r6, r1, r0, lsr #31
   16f58:	andeq	r6, r1, r0, lsr #31
   16f5c:	andeq	r6, r1, r0, lsr #31
   16f60:	andeq	r6, r1, r0, lsr #31
   16f64:	andeq	r6, r1, r0, lsr #31
   16f68:	andeq	r6, r1, r0, lsr #31
   16f6c:	andeq	r6, r1, r0, lsr #31
   16f70:	andeq	r6, r1, r0, lsr #31
   16f74:	andeq	r6, r1, r0, lsr #31
   16f78:	andeq	r6, r1, r0, lsr #31
   16f7c:	andeq	r6, r1, r0, lsr #31
   16f80:	andeq	r6, r1, r0, lsr #31
   16f84:	andeq	r6, r1, r0, lsr #31
   16f88:	andeq	r6, r1, r0, lsr #31
   16f8c:	andeq	r6, r1, r0, lsr #31
   16f90:	andeq	r6, r1, r8, asr #31
   16f94:			; <UNDEFINED> instruction: 0x000171bc
   16f98:	andeq	r6, r1, r8, asr #31
   16f9c:			; <UNDEFINED> instruction: 0x00016fb4
   16fa0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16fa4:	cmp	r0, #0
   16fa8:	beq	1721c <__assert_fail@plt+0x5a18>
   16fac:	ldr	r0, [fp, #16]
   16fb0:	b	17220 <__assert_fail@plt+0x5a1c>
   16fb4:	mov	r9, #0
   16fb8:	cmp	r6, #0
   16fbc:	beq	171b8 <__assert_fail@plt+0x59b4>
   16fc0:	mov	sl, #0
   16fc4:	b	16fa0 <__assert_fail@plt+0x579c>
   16fc8:	mov	r9, #0
   16fcc:	cmn	lr, #1
   16fd0:	beq	1719c <__assert_fail@plt+0x5998>
   16fd4:	cmp	r6, #0
   16fd8:	bne	16fc0 <__assert_fail@plt+0x57bc>
   16fdc:	cmp	lr, #1
   16fe0:	beq	171b8 <__assert_fail@plt+0x59b4>
   16fe4:	b	16fc0 <__assert_fail@plt+0x57bc>
   16fe8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16fec:	cmp	r0, #2
   16ff0:	bne	171e4 <__assert_fail@plt+0x59e0>
   16ff4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16ff8:	tst	r0, #1
   16ffc:	bne	1792c <__assert_fail@plt+0x6128>
   17000:	mov	sl, #0
   17004:	mov	r0, #92	; 0x5c
   17008:	b	171f8 <__assert_fail@plt+0x59f4>
   1700c:	mov	r0, #102	; 0x66
   17010:	b	17208 <__assert_fail@plt+0x5a04>
   17014:	mov	r2, #116	; 0x74
   17018:	b	17028 <__assert_fail@plt+0x5824>
   1701c:	mov	r0, #98	; 0x62
   17020:	b	17208 <__assert_fail@plt+0x5a04>
   17024:	mov	r2, #114	; 0x72
   17028:	ldr	r0, [sp, #64]	; 0x40
   1702c:	tst	r0, #1
   17030:	mov	r0, r2
   17034:	bne	17208 <__assert_fail@plt+0x5a04>
   17038:	b	1792c <__assert_fail@plt+0x6128>
   1703c:	ldr	r0, [sp, #84]	; 0x54
   17040:	tst	r0, #1
   17044:	beq	172f8 <__assert_fail@plt+0x5af4>
   17048:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1704c:	tst	r0, #1
   17050:	bne	1792c <__assert_fail@plt+0x6128>
   17054:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17058:	cmp	r0, #2
   1705c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   17060:	movwne	r0, #1
   17064:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17068:	orr	r0, r0, r2
   1706c:	tst	r0, #1
   17070:	beq	176ec <__assert_fail@plt+0x5ee8>
   17074:	mov	r0, r8
   17078:	b	17720 <__assert_fail@plt+0x5f1c>
   1707c:	mov	sl, #0
   17080:	mov	r5, #63	; 0x3f
   17084:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17088:	cmp	r0, #5
   1708c:	beq	174ac <__assert_fail@plt+0x5ca8>
   17090:	cmp	r0, #2
   17094:	bne	1754c <__assert_fail@plt+0x5d48>
   17098:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1709c:	tst	r0, #1
   170a0:	mov	r9, #0
   170a4:	beq	16fa0 <__assert_fail@plt+0x579c>
   170a8:	b	1792c <__assert_fail@plt+0x6128>
   170ac:	mov	r0, #118	; 0x76
   170b0:	b	17208 <__assert_fail@plt+0x5a04>
   170b4:	mov	r5, #39	; 0x27
   170b8:	mov	r0, #1
   170bc:	str	r0, [sp, #56]	; 0x38
   170c0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   170c4:	cmp	r0, #2
   170c8:	bne	17318 <__assert_fail@plt+0x5b14>
   170cc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   170d0:	tst	r0, #1
   170d4:	bne	1792c <__assert_fail@plt+0x6128>
   170d8:	ldr	r2, [sp, #72]	; 0x48
   170dc:	cmp	r2, #0
   170e0:	mov	r0, r2
   170e4:	movwne	r0, #1
   170e8:	clz	r1, r4
   170ec:	lsr	r1, r1, #5
   170f0:	orrs	r0, r0, r1
   170f4:	moveq	r2, r4
   170f8:	str	r2, [sp, #72]	; 0x48
   170fc:	moveq	r4, r0
   17100:	cmp	r8, r4
   17104:	movcc	r0, #39	; 0x27
   17108:	strbcc	r0, [r7, r8]
   1710c:	add	r0, r8, #1
   17110:	cmp	r0, r4
   17114:	movcc	r1, #92	; 0x5c
   17118:	strbcc	r1, [r7, r0]
   1711c:	add	r0, r8, #2
   17120:	cmp	r0, r4
   17124:	movcc	r1, #39	; 0x27
   17128:	strbcc	r1, [r7, r0]
   1712c:	add	r8, r8, #3
   17130:	mov	r0, #0
   17134:	str	r0, [fp, #-56]	; 0xffffffc8
   17138:	mov	sl, #0
   1713c:	mov	r9, #1
   17140:	b	16fa0 <__assert_fail@plt+0x579c>
   17144:	str	r4, [sp, #24]
   17148:	ldr	r0, [sp, #40]	; 0x28
   1714c:	cmp	r0, #1
   17150:	bne	17320 <__assert_fail@plt+0x5b1c>
   17154:	str	lr, [sp, #28]
   17158:	bl	11624 <__ctype_b_loc@plt>
   1715c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17160:	ldr	r0, [r0]
   17164:	add	r0, r0, r5, lsl #1
   17168:	ldrb	r0, [r0, #1]
   1716c:	ubfx	r9, r0, #6, #1
   17170:	mov	r1, #1
   17174:	ldr	r4, [sp, #24]
   17178:	ldr	r0, [sp, #52]	; 0x34
   1717c:	orr	r0, r9, r0
   17180:	mov	r2, r1
   17184:	cmp	r1, #1
   17188:	bhi	17554 <__assert_fail@plt+0x5d50>
   1718c:	tst	r0, #1
   17190:	beq	17554 <__assert_fail@plt+0x5d50>
   17194:	ldr	lr, [sp, #28]
   17198:	b	16fa0 <__assert_fail@plt+0x579c>
   1719c:	cmp	r6, #0
   171a0:	ldrbeq	r0, [ip, #1]
   171a4:	cmpeq	r0, #0
   171a8:	beq	171b8 <__assert_fail@plt+0x59b4>
   171ac:	mvn	lr, #0
   171b0:	mov	sl, #0
   171b4:	b	16fa0 <__assert_fail@plt+0x579c>
   171b8:	mov	r1, #1
   171bc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   171c0:	cmp	r0, #2
   171c4:	bne	171dc <__assert_fail@plt+0x59d8>
   171c8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   171cc:	tst	r0, #1
   171d0:	mov	r9, r1
   171d4:	beq	16fa0 <__assert_fail@plt+0x579c>
   171d8:	b	1792c <__assert_fail@plt+0x6128>
   171dc:	mov	r9, r1
   171e0:	b	16fa0 <__assert_fail@plt+0x579c>
   171e4:	mov	sl, #0
   171e8:	mov	r0, #92	; 0x5c
   171ec:	ldr	r1, [sp, #48]	; 0x30
   171f0:	cmp	r1, #0
   171f4:	beq	17208 <__assert_fail@plt+0x5a04>
   171f8:	mov	r9, #0
   171fc:	cmp	sl, #0
   17200:	beq	177b8 <__assert_fail@plt+0x5fb4>
   17204:	b	177f4 <__assert_fail@plt+0x5ff0>
   17208:	mov	r9, #0
   1720c:	ldr	r1, [sp, #84]	; 0x54
   17210:	tst	r1, #1
   17214:	mov	sl, #0
   17218:	bne	17258 <__assert_fail@plt+0x5a54>
   1721c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   17220:	cmp	r0, #0
   17224:	mov	r0, r5
   17228:	beq	1724c <__assert_fail@plt+0x5a48>
   1722c:	ubfx	r0, r5, #5, #3
   17230:	ldr	r1, [fp, #16]
   17234:	ldr	r0, [r1, r0, lsl #2]
   17238:	and	r1, r5, #31
   1723c:	mov	r2, #1
   17240:	tst	r0, r2, lsl r1
   17244:	mov	r0, r5
   17248:	bne	17258 <__assert_fail@plt+0x5a54>
   1724c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17250:	cmp	r1, #0
   17254:	beq	177b0 <__assert_fail@plt+0x5fac>
   17258:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1725c:	tst	r1, #1
   17260:	bne	1792c <__assert_fail@plt+0x6128>
   17264:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17268:	cmp	r1, #2
   1726c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   17270:	movwne	r1, #1
   17274:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17278:	orr	r1, r1, r2
   1727c:	tst	r1, #1
   17280:	beq	1728c <__assert_fail@plt+0x5a88>
   17284:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17288:	b	172c8 <__assert_fail@plt+0x5ac4>
   1728c:	cmp	r8, r4
   17290:	movcc	r1, #39	; 0x27
   17294:	strbcc	r1, [r7, r8]
   17298:	add	r1, r8, #1
   1729c:	cmp	r1, r4
   172a0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   172a4:	movcc	r2, #36	; 0x24
   172a8:	strbcc	r2, [r7, r1]
   172ac:	add	r1, r8, #2
   172b0:	cmp	r1, r4
   172b4:	movcc	r2, #39	; 0x27
   172b8:	strbcc	r2, [r7, r1]
   172bc:	add	r8, r8, #3
   172c0:	mov	r1, #1
   172c4:	str	r1, [fp, #-56]	; 0xffffffc8
   172c8:	cmp	r8, r4
   172cc:	movcc	r1, #92	; 0x5c
   172d0:	strbcc	r1, [r7, r8]
   172d4:	add	r8, r8, #1
   172d8:	cmp	r8, r4
   172dc:	strbcc	r0, [r7, r8]
   172e0:	and	r5, r5, r9
   172e4:	add	r8, r8, #1
   172e8:	add	r6, r6, #1
   172ec:	cmn	lr, #1
   172f0:	bne	16ccc <__assert_fail@plt+0x54c8>
   172f4:	b	16cd8 <__assert_fail@plt+0x54d4>
   172f8:	mov	r9, #0
   172fc:	ldr	r0, [sp, #36]	; 0x24
   17300:	cmp	r0, #0
   17304:	mov	sl, #0
   17308:	mov	r5, #0
   1730c:	beq	1721c <__assert_fail@plt+0x5a18>
   17310:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17314:	b	172e8 <__assert_fail@plt+0x5ae4>
   17318:	mov	r9, #1
   1731c:	b	16fa0 <__assert_fail@plt+0x579c>
   17320:	mov	r0, #0
   17324:	str	r0, [fp, #-36]	; 0xffffffdc
   17328:	str	r0, [fp, #-40]	; 0xffffffd8
   1732c:	cmn	lr, #1
   17330:	bne	17344 <__assert_fail@plt+0x5b40>
   17334:	mov	r0, ip
   17338:	bl	11654 <strlen@plt>
   1733c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17340:	mov	lr, r0
   17344:	add	r0, ip, r6
   17348:	str	r0, [sp, #20]
   1734c:	mov	r9, #1
   17350:	mov	r7, #0
   17354:	sub	r4, fp, #40	; 0x28
   17358:	str	lr, [sp, #28]
   1735c:	str	r7, [sp, #44]	; 0x2c
   17360:	add	r7, r7, r6
   17364:	add	r1, ip, r7
   17368:	sub	r2, lr, r7
   1736c:	sub	r0, fp, #44	; 0x2c
   17370:	mov	r3, r4
   17374:	bl	19688 <__assert_fail@plt+0x7e84>
   17378:	cmp	r0, #0
   1737c:	beq	1783c <__assert_fail@plt+0x6038>
   17380:	cmn	r0, #1
   17384:	beq	177fc <__assert_fail@plt+0x5ff8>
   17388:	cmn	r0, #2
   1738c:	ldr	lr, [sp, #28]
   17390:	beq	17804 <__assert_fail@plt+0x6000>
   17394:	cmp	r0, #2
   17398:	mov	r1, #0
   1739c:	movwcc	r1, #1
   173a0:	ldr	r2, [sp, #60]	; 0x3c
   173a4:	eor	r2, r2, #1
   173a8:	orrs	r1, r2, r1
   173ac:	ldr	r4, [sp, #24]
   173b0:	bne	17470 <__assert_fail@plt+0x5c6c>
   173b4:	ldr	r1, [sp, #44]	; 0x2c
   173b8:	ldr	r2, [sp, #20]
   173bc:	add	r1, r2, r1
   173c0:	mov	r2, #1
   173c4:	ldrb	r3, [r1, r2]
   173c8:	sub	r3, r3, #91	; 0x5b
   173cc:	cmp	r3, #33	; 0x21
   173d0:	bhi	17464 <__assert_fail@plt+0x5c60>
   173d4:	add	r7, pc, #0
   173d8:	ldr	pc, [r7, r3, lsl #2]
   173dc:	andeq	r7, r1, r4, lsr #18
   173e0:	andeq	r7, r1, r4, lsr #18
   173e4:	andeq	r7, r1, r4, ror #8
   173e8:	andeq	r7, r1, r4, lsr #18
   173ec:	andeq	r7, r1, r4, ror #8
   173f0:	andeq	r7, r1, r4, lsr #18
   173f4:	andeq	r7, r1, r4, ror #8
   173f8:	andeq	r7, r1, r4, ror #8
   173fc:	andeq	r7, r1, r4, ror #8
   17400:	andeq	r7, r1, r4, ror #8
   17404:	andeq	r7, r1, r4, ror #8
   17408:	andeq	r7, r1, r4, ror #8
   1740c:	andeq	r7, r1, r4, ror #8
   17410:	andeq	r7, r1, r4, ror #8
   17414:	andeq	r7, r1, r4, ror #8
   17418:	andeq	r7, r1, r4, ror #8
   1741c:	andeq	r7, r1, r4, ror #8
   17420:	andeq	r7, r1, r4, ror #8
   17424:	andeq	r7, r1, r4, ror #8
   17428:	andeq	r7, r1, r4, ror #8
   1742c:	andeq	r7, r1, r4, ror #8
   17430:	andeq	r7, r1, r4, ror #8
   17434:	andeq	r7, r1, r4, ror #8
   17438:	andeq	r7, r1, r4, ror #8
   1743c:	andeq	r7, r1, r4, ror #8
   17440:	andeq	r7, r1, r4, ror #8
   17444:	andeq	r7, r1, r4, ror #8
   17448:	andeq	r7, r1, r4, ror #8
   1744c:	andeq	r7, r1, r4, ror #8
   17450:	andeq	r7, r1, r4, ror #8
   17454:	andeq	r7, r1, r4, ror #8
   17458:	andeq	r7, r1, r4, ror #8
   1745c:	andeq	r7, r1, r4, ror #8
   17460:	andeq	r7, r1, r4, lsr #18
   17464:	add	r2, r2, #1
   17468:	cmp	r2, r0
   1746c:	bcc	173c4 <__assert_fail@plt+0x5bc0>
   17470:	ldr	r7, [sp, #44]	; 0x2c
   17474:	add	r7, r0, r7
   17478:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1747c:	bl	11540 <iswprint@plt>
   17480:	cmp	r0, #0
   17484:	movwne	r0, #1
   17488:	and	r9, r9, r0
   1748c:	sub	r4, fp, #40	; 0x28
   17490:	mov	r0, r4
   17494:	bl	114c8 <mbsinit@plt>
   17498:	ldr	lr, [sp, #28]
   1749c:	cmp	r0, #0
   174a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   174a4:	beq	1735c <__assert_fail@plt+0x5b58>
   174a8:	b	17844 <__assert_fail@plt+0x6040>
   174ac:	ldr	r0, [sp, #32]
   174b0:	cmp	r0, #0
   174b4:	beq	1754c <__assert_fail@plt+0x5d48>
   174b8:	add	r0, r6, #2
   174bc:	cmp	r0, lr
   174c0:	bcs	1754c <__assert_fail@plt+0x5d48>
   174c4:	add	r1, ip, r6
   174c8:	ldrb	r1, [r1, #1]
   174cc:	cmp	r1, #63	; 0x3f
   174d0:	bne	1754c <__assert_fail@plt+0x5d48>
   174d4:	ldrb	r9, [ip, r0]
   174d8:	sub	r2, r9, #33	; 0x21
   174dc:	cmp	r2, #29
   174e0:	bhi	1754c <__assert_fail@plt+0x5d48>
   174e4:	mov	r3, #1
   174e8:	movw	r1, #20929	; 0x51c1
   174ec:	movt	r1, #14336	; 0x3800
   174f0:	tst	r1, r3, lsl r2
   174f4:	beq	1754c <__assert_fail@plt+0x5d48>
   174f8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   174fc:	tst	r1, #1
   17500:	bne	1792c <__assert_fail@plt+0x6128>
   17504:	cmp	r8, r4
   17508:	movcc	r1, #63	; 0x3f
   1750c:	strbcc	r1, [r7, r8]
   17510:	add	r2, r8, #1
   17514:	cmp	r2, r4
   17518:	movcc	r1, #34	; 0x22
   1751c:	strbcc	r1, [r7, r2]
   17520:	add	r2, r8, #2
   17524:	cmp	r2, r4
   17528:	movcc	r1, #34	; 0x22
   1752c:	strbcc	r1, [r7, r2]
   17530:	add	r2, r8, #3
   17534:	cmp	r2, r4
   17538:	movcc	r1, #63	; 0x3f
   1753c:	strbcc	r1, [r7, r2]
   17540:	add	r8, r8, #4
   17544:	mov	r6, r0
   17548:	mov	r5, r9
   1754c:	mov	r9, #0
   17550:	b	16fa0 <__assert_fail@plt+0x579c>
   17554:	add	r1, r2, r6
   17558:	str	r1, [sp, #44]	; 0x2c
   1755c:	add	r1, r6, #1
   17560:	mov	r3, #0
   17564:	ldr	lr, [sp, #28]
   17568:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1756c:	tst	r0, #1
   17570:	bne	17664 <__assert_fail@plt+0x5e60>
   17574:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17578:	tst	r2, #1
   1757c:	bne	1792c <__assert_fail@plt+0x6128>
   17580:	cmp	r6, #2
   17584:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17588:	movwne	r3, #1
   1758c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17590:	orr	r3, r3, r2
   17594:	tst	r3, #1
   17598:	bne	175d4 <__assert_fail@plt+0x5dd0>
   1759c:	cmp	r8, r4
   175a0:	movcc	r2, #39	; 0x27
   175a4:	strbcc	r2, [r7, r8]
   175a8:	add	r3, r8, #1
   175ac:	cmp	r3, r4
   175b0:	movcc	r2, #36	; 0x24
   175b4:	strbcc	r2, [r7, r3]
   175b8:	add	r3, r8, #2
   175bc:	cmp	r3, r4
   175c0:	movcc	r2, #39	; 0x27
   175c4:	strbcc	r2, [r7, r3]
   175c8:	add	r8, r8, #3
   175cc:	mov	r2, #1
   175d0:	str	r2, [fp, #-56]	; 0xffffffc8
   175d4:	cmp	r8, r4
   175d8:	movcc	r2, #92	; 0x5c
   175dc:	strbcc	r2, [r7, r8]
   175e0:	add	r3, r8, #1
   175e4:	cmp	r3, r4
   175e8:	bcs	17608 <__assert_fail@plt+0x5e04>
   175ec:	and	r7, r5, #192	; 0xc0
   175f0:	mov	r2, #48	; 0x30
   175f4:	orr	r7, r2, r7, lsr #6
   175f8:	ldr	r6, [sp, #80]	; 0x50
   175fc:	strb	r7, [r6, r3]
   17600:	ldr	r6, [fp, #-60]	; 0xffffffc4
   17604:	ldr	r7, [sp, #80]	; 0x50
   17608:	add	r3, r8, #2
   1760c:	cmp	r3, r4
   17610:	bcs	17630 <__assert_fail@plt+0x5e2c>
   17614:	lsr	r7, r5, #3
   17618:	mov	r2, #6
   1761c:	bfi	r7, r2, #3, #29
   17620:	ldr	r6, [sp, #80]	; 0x50
   17624:	strb	r7, [r6, r3]
   17628:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1762c:	ldr	r7, [sp, #80]	; 0x50
   17630:	mov	r2, #6
   17634:	bfi	r5, r2, #3, #29
   17638:	add	r8, r8, #3
   1763c:	mov	r3, #1
   17640:	b	17688 <__assert_fail@plt+0x5e84>
   17644:	ldr	r7, [sp, #80]	; 0x50
   17648:	cmp	r8, r4
   1764c:	strbcc	r5, [r7, r8]
   17650:	ldrb	r5, [ip, r1]
   17654:	add	r1, r1, #1
   17658:	add	r8, r8, #1
   1765c:	tst	r0, #1
   17660:	beq	17574 <__assert_fail@plt+0x5d70>
   17664:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17668:	tst	r2, #1
   1766c:	beq	17680 <__assert_fail@plt+0x5e7c>
   17670:	cmp	r8, r4
   17674:	movcc	r2, #92	; 0x5c
   17678:	strbcc	r2, [r7, r8]
   1767c:	add	r8, r8, #1
   17680:	mov	r2, #0
   17684:	str	r2, [fp, #-52]	; 0xffffffcc
   17688:	and	sl, r3, #1
   1768c:	ldr	r2, [sp, #44]	; 0x2c
   17690:	cmp	r2, r1
   17694:	bls	177a0 <__assert_fail@plt+0x5f9c>
   17698:	cmp	sl, #0
   1769c:	movwne	sl, #1
   176a0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   176a4:	mvn	r7, r2
   176a8:	orr	r7, r7, sl
   176ac:	tst	r7, #1
   176b0:	bne	17644 <__assert_fail@plt+0x5e40>
   176b4:	cmp	r8, r4
   176b8:	ldrcc	r7, [sp, #80]	; 0x50
   176bc:	movcc	r2, #39	; 0x27
   176c0:	strbcc	r2, [r7, r8]
   176c4:	add	r7, r8, #1
   176c8:	cmp	r7, r4
   176cc:	ldrcc	r6, [sp, #80]	; 0x50
   176d0:	movcc	r2, #39	; 0x27
   176d4:	strbcc	r2, [r6, r7]
   176d8:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   176dc:	add	r8, r8, #2
   176e0:	mov	r2, #0
   176e4:	str	r2, [fp, #-56]	; 0xffffffc8
   176e8:	b	17644 <__assert_fail@plt+0x5e40>
   176ec:	cmp	r8, r4
   176f0:	movcc	r0, #39	; 0x27
   176f4:	strbcc	r0, [r7, r8]
   176f8:	add	r0, r8, #1
   176fc:	cmp	r0, r4
   17700:	movcc	r1, #36	; 0x24
   17704:	strbcc	r1, [r7, r0]
   17708:	add	r0, r8, #2
   1770c:	cmp	r0, r4
   17710:	movcc	r1, #39	; 0x27
   17714:	strbcc	r1, [r7, r0]
   17718:	add	r0, r8, #3
   1771c:	mov	r2, #1
   17720:	cmp	r0, r4
   17724:	movcc	r1, #92	; 0x5c
   17728:	strbcc	r1, [r7, r0]
   1772c:	str	r2, [fp, #-56]	; 0xffffffc8
   17730:	add	r8, r0, #1
   17734:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17738:	cmp	r1, #2
   1773c:	beq	17790 <__assert_fail@plt+0x5f8c>
   17740:	add	r1, r6, #1
   17744:	mov	r9, #0
   17748:	mov	sl, #1
   1774c:	mov	r5, #48	; 0x30
   17750:	cmp	r1, lr
   17754:	bcs	16fa0 <__assert_fail@plt+0x579c>
   17758:	ldrb	r1, [ip, r1]
   1775c:	sub	r1, r1, #48	; 0x30
   17760:	uxtb	r1, r1
   17764:	cmp	r1, #9
   17768:	bhi	16fa0 <__assert_fail@plt+0x579c>
   1776c:	cmp	r8, r4
   17770:	movcc	r1, #48	; 0x30
   17774:	strbcc	r1, [r7, r8]
   17778:	add	r1, r0, #2
   1777c:	cmp	r1, r4
   17780:	movcc	r2, #48	; 0x30
   17784:	strbcc	r2, [r7, r1]
   17788:	add	r8, r0, #3
   1778c:	b	16fa0 <__assert_fail@plt+0x579c>
   17790:	mov	r0, #48	; 0x30
   17794:	mov	sl, #1
   17798:	mov	r9, #0
   1779c:	b	1724c <__assert_fail@plt+0x5a48>
   177a0:	sub	r6, r1, #1
   177a4:	cmp	sl, #0
   177a8:	movwne	sl, #1
   177ac:	mov	r0, r5
   177b0:	cmp	sl, #0
   177b4:	bne	177f4 <__assert_fail@plt+0x5ff0>
   177b8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   177bc:	tst	r1, #1
   177c0:	beq	177f4 <__assert_fail@plt+0x5ff0>
   177c4:	cmp	r8, r4
   177c8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   177cc:	movcc	r1, #39	; 0x27
   177d0:	strbcc	r1, [r7, r8]
   177d4:	add	r1, r8, #1
   177d8:	cmp	r1, r4
   177dc:	movcc	r2, #39	; 0x27
   177e0:	strbcc	r2, [r7, r1]
   177e4:	add	r8, r8, #2
   177e8:	mov	r1, #0
   177ec:	str	r1, [fp, #-56]	; 0xffffffc8
   177f0:	b	172d8 <__assert_fail@plt+0x5ad4>
   177f4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   177f8:	b	172d8 <__assert_fail@plt+0x5ad4>
   177fc:	mov	r9, #0
   17800:	b	1783c <__assert_fail@plt+0x6038>
   17804:	mov	r9, #0
   17808:	cmp	r7, lr
   1780c:	bcs	1783c <__assert_fail@plt+0x6038>
   17810:	ldr	ip, [fp, #-84]	; 0xffffffac
   17814:	ldr	r7, [sp, #44]	; 0x2c
   17818:	ldr	r0, [sp, #20]
   1781c:	ldrb	r0, [r0, r7]
   17820:	cmp	r0, #0
   17824:	beq	17844 <__assert_fail@plt+0x6040>
   17828:	add	r7, r7, #1
   1782c:	add	r0, r6, r7
   17830:	cmp	r0, lr
   17834:	bcc	17818 <__assert_fail@plt+0x6014>
   17838:	b	17844 <__assert_fail@plt+0x6040>
   1783c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17840:	ldr	r7, [sp, #44]	; 0x2c
   17844:	mov	r1, r7
   17848:	ldr	r7, [sp, #80]	; 0x50
   1784c:	b	17174 <__assert_fail@plt+0x5970>
   17850:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17854:	eor	r0, r1, #2
   17858:	orr	r0, r0, r8
   1785c:	clz	r0, r0
   17860:	lsr	r0, r0, #5
   17864:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17868:	tst	r2, r0
   1786c:	bne	1792c <__assert_fail@plt+0x6128>
   17870:	cmp	r1, #2
   17874:	ldr	r0, [fp, #-80]	; 0xffffffb0
   17878:	movwne	r0, #1
   1787c:	orr	r0, r2, r0
   17880:	tst	r0, #1
   17884:	ldreq	r0, [sp, #56]	; 0x38
   17888:	eoreq	r0, r0, #1
   1788c:	tsteq	r0, #1
   17890:	bne	178c4 <__assert_fail@plt+0x60c0>
   17894:	mov	r9, lr
   17898:	tst	r5, #1
   1789c:	bne	17994 <__assert_fail@plt+0x6190>
   178a0:	ldr	r0, [sp, #72]	; 0x48
   178a4:	cmp	r0, #0
   178a8:	beq	178c4 <__assert_fail@plt+0x60c0>
   178ac:	mov	r5, #0
   178b0:	cmp	r4, #0
   178b4:	ldr	r0, [sp, #84]	; 0x54
   178b8:	mov	sl, r2
   178bc:	ldr	r6, [sp, #72]	; 0x48
   178c0:	beq	16a5c <__assert_fail@plt+0x5258>
   178c4:	ldr	r1, [sp, #92]	; 0x5c
   178c8:	clz	r0, r1
   178cc:	lsr	r0, r0, #5
   178d0:	orr	r0, r0, r2
   178d4:	tst	r0, #1
   178d8:	bne	17904 <__assert_fail@plt+0x6100>
   178dc:	ldrb	r0, [r1]
   178e0:	cmp	r0, #0
   178e4:	beq	17904 <__assert_fail@plt+0x6100>
   178e8:	add	r1, r1, #1
   178ec:	cmp	r8, r4
   178f0:	strbcc	r0, [r7, r8]
   178f4:	add	r8, r8, #1
   178f8:	ldrb	r0, [r1], #1
   178fc:	cmp	r0, #0
   17900:	bne	178ec <__assert_fail@plt+0x60e8>
   17904:	cmp	r8, r4
   17908:	movcc	r0, #0
   1790c:	strbcc	r0, [r7, r8]
   17910:	b	17988 <__assert_fail@plt+0x6184>
   17914:	ldr	ip, [fp, #-84]	; 0xffffffac
   17918:	mov	lr, r4
   1791c:	mov	r4, r5
   17920:	b	1792c <__assert_fail@plt+0x6128>
   17924:	ldr	r7, [sp, #80]	; 0x50
   17928:	ldr	ip, [fp, #-84]	; 0xffffffac
   1792c:	mov	r0, #0
   17930:	ldr	r1, [fp, #12]
   17934:	bic	r1, r1, #2
   17938:	ldr	r2, [sp, #84]	; 0x54
   1793c:	tst	r2, #1
   17940:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17944:	mov	r2, r3
   17948:	movwne	r2, #4
   1794c:	cmp	r3, #2
   17950:	movne	r2, r3
   17954:	str	r2, [sp]
   17958:	str	r1, [sp, #4]
   1795c:	str	r0, [sp, #8]
   17960:	ldr	r0, [sp, #68]	; 0x44
   17964:	str	r0, [sp, #12]
   17968:	ldr	r0, [sp, #76]	; 0x4c
   1796c:	str	r0, [sp, #16]
   17970:	mov	r0, r7
   17974:	mov	r1, r4
   17978:	mov	r2, ip
   1797c:	mov	r3, lr
   17980:	bl	169d4 <__assert_fail@plt+0x51d0>
   17984:	mov	r8, r0
   17988:	mov	r0, r8
   1798c:	sub	sp, fp, #28
   17990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17994:	mov	r0, #5
   17998:	str	r0, [sp]
   1799c:	ldr	r0, [fp, #12]
   179a0:	str	r0, [sp, #4]
   179a4:	ldr	r0, [fp, #16]
   179a8:	str	r0, [sp, #8]
   179ac:	ldr	r0, [sp, #68]	; 0x44
   179b0:	str	r0, [sp, #12]
   179b4:	ldr	r0, [sp, #76]	; 0x4c
   179b8:	str	r0, [sp, #16]
   179bc:	mov	r0, r7
   179c0:	ldr	r1, [sp, #72]	; 0x48
   179c4:	ldr	r2, [fp, #-84]	; 0xffffffac
   179c8:	mov	r3, r9
   179cc:	b	17980 <__assert_fail@plt+0x617c>
   179d0:	bl	117d4 <abort@plt>
   179d4:	mov	r3, r2
   179d8:	mov	r2, #0
   179dc:	b	179e0 <__assert_fail@plt+0x61dc>
   179e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179e4:	add	fp, sp, #28
   179e8:	sub	sp, sp, #36	; 0x24
   179ec:	mov	r4, r2
   179f0:	str	r2, [sp, #24]
   179f4:	mov	r5, r1
   179f8:	mov	r6, r0
   179fc:	str	r0, [sp, #20]
   17a00:	movw	r8, #53944	; 0xd2b8
   17a04:	movt	r8, #2
   17a08:	cmp	r3, #0
   17a0c:	movne	r8, r3
   17a10:	bl	11684 <__errno_location@plt>
   17a14:	str	r0, [sp, #28]
   17a18:	ldm	r8, {r3, r9}
   17a1c:	ldr	r1, [r8, #40]	; 0x28
   17a20:	ldr	r2, [r8, #44]	; 0x2c
   17a24:	ldr	r7, [r0]
   17a28:	str	r7, [sp, #32]
   17a2c:	add	sl, r8, #8
   17a30:	cmp	r4, #0
   17a34:	orreq	r9, r9, #1
   17a38:	stm	sp, {r3, r9, sl}
   17a3c:	str	r1, [sp, #12]
   17a40:	str	r2, [sp, #16]
   17a44:	mov	r0, #0
   17a48:	mov	r1, #0
   17a4c:	mov	r2, r6
   17a50:	mov	r3, r5
   17a54:	mov	r7, r5
   17a58:	bl	169d4 <__assert_fail@plt+0x51d0>
   17a5c:	mov	r5, r0
   17a60:	add	r4, r0, #1
   17a64:	mov	r0, r4
   17a68:	bl	18a38 <__assert_fail@plt+0x7234>
   17a6c:	mov	r6, r0
   17a70:	ldr	r0, [r8]
   17a74:	ldr	r1, [r8, #40]	; 0x28
   17a78:	ldr	r2, [r8, #44]	; 0x2c
   17a7c:	stm	sp, {r0, r9, sl}
   17a80:	str	r1, [sp, #12]
   17a84:	str	r2, [sp, #16]
   17a88:	mov	r0, r6
   17a8c:	mov	r1, r4
   17a90:	ldr	r2, [sp, #20]
   17a94:	mov	r3, r7
   17a98:	bl	169d4 <__assert_fail@plt+0x51d0>
   17a9c:	ldr	r0, [sp, #24]
   17aa0:	ldr	r1, [sp, #32]
   17aa4:	ldr	r2, [sp, #28]
   17aa8:	str	r1, [r2]
   17aac:	cmp	r0, #0
   17ab0:	strne	r5, [r0]
   17ab4:	mov	r0, r6
   17ab8:	sub	sp, fp, #28
   17abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ac0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17ac4:	add	fp, sp, #24
   17ac8:	movw	r8, #53624	; 0xd178
   17acc:	movt	r8, #2
   17ad0:	ldr	r4, [r8]
   17ad4:	movw	r5, #53628	; 0xd17c
   17ad8:	movt	r5, #2
   17adc:	ldr	r0, [r5]
   17ae0:	cmp	r0, #2
   17ae4:	blt	17b10 <__assert_fail@plt+0x630c>
   17ae8:	add	r7, r4, #12
   17aec:	mov	r6, #0
   17af0:	ldr	r0, [r7, r6, lsl #3]
   17af4:	bl	1958c <__assert_fail@plt+0x7d88>
   17af8:	add	r0, r6, #1
   17afc:	ldr	r1, [r5]
   17b00:	add	r2, r6, #2
   17b04:	cmp	r2, r1
   17b08:	mov	r6, r0
   17b0c:	blt	17af0 <__assert_fail@plt+0x62ec>
   17b10:	ldr	r0, [r4, #4]
   17b14:	movw	r7, #53992	; 0xd2e8
   17b18:	movt	r7, #2
   17b1c:	cmp	r0, r7
   17b20:	beq	17b38 <__assert_fail@plt+0x6334>
   17b24:	bl	1958c <__assert_fail@plt+0x7d88>
   17b28:	movw	r0, #53632	; 0xd180
   17b2c:	movt	r0, #2
   17b30:	mov	r6, #256	; 0x100
   17b34:	strd	r6, [r0]
   17b38:	movw	r6, #53632	; 0xd180
   17b3c:	movt	r6, #2
   17b40:	cmp	r4, r6
   17b44:	beq	17b54 <__assert_fail@plt+0x6350>
   17b48:	mov	r0, r4
   17b4c:	bl	1958c <__assert_fail@plt+0x7d88>
   17b50:	str	r6, [r8]
   17b54:	mov	r0, #1
   17b58:	str	r0, [r5]
   17b5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17b60:	movw	r3, #53944	; 0xd2b8
   17b64:	movt	r3, #2
   17b68:	mvn	r2, #0
   17b6c:	b	17b70 <__assert_fail@plt+0x636c>
   17b70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b74:	add	fp, sp, #28
   17b78:	sub	sp, sp, #44	; 0x2c
   17b7c:	mov	r7, r3
   17b80:	str	r2, [sp, #36]	; 0x24
   17b84:	str	r1, [sp, #32]
   17b88:	mov	r5, r0
   17b8c:	bl	11684 <__errno_location@plt>
   17b90:	cmp	r5, #0
   17b94:	blt	17d00 <__assert_fail@plt+0x64fc>
   17b98:	cmn	r5, #-2147483647	; 0x80000001
   17b9c:	beq	17d00 <__assert_fail@plt+0x64fc>
   17ba0:	movw	r4, #53624	; 0xd178
   17ba4:	movt	r4, #2
   17ba8:	ldr	r6, [r4]
   17bac:	str	r0, [sp, #28]
   17bb0:	ldr	r0, [r0]
   17bb4:	str	r0, [sp, #24]
   17bb8:	movw	r8, #53628	; 0xd17c
   17bbc:	movt	r8, #2
   17bc0:	ldr	r1, [r8]
   17bc4:	cmp	r1, r5
   17bc8:	ble	17bd4 <__assert_fail@plt+0x63d0>
   17bcc:	mov	sl, r6
   17bd0:	b	17c3c <__assert_fail@plt+0x6438>
   17bd4:	str	r1, [fp, #-32]	; 0xffffffe0
   17bd8:	mov	r0, #8
   17bdc:	str	r0, [sp]
   17be0:	movw	r9, #53632	; 0xd180
   17be4:	movt	r9, #2
   17be8:	subs	r0, r6, r9
   17bec:	movne	r0, r6
   17bf0:	add	r2, r5, #1
   17bf4:	sub	r2, r2, r1
   17bf8:	sub	r1, fp, #32
   17bfc:	mvn	r3, #-2147483648	; 0x80000000
   17c00:	bl	18b20 <__assert_fail@plt+0x731c>
   17c04:	mov	sl, r0
   17c08:	str	r0, [r4]
   17c0c:	cmp	r6, r9
   17c10:	ldrdeq	r0, [r9]
   17c14:	stmeq	sl, {r0, r1}
   17c18:	ldr	r1, [r8]
   17c1c:	add	r0, sl, r1, lsl #3
   17c20:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17c24:	sub	r1, r2, r1
   17c28:	lsl	r2, r1, #3
   17c2c:	mov	r1, #0
   17c30:	bl	116a8 <memset@plt>
   17c34:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17c38:	str	r0, [r8]
   17c3c:	mov	r9, sl
   17c40:	ldr	r6, [r9, r5, lsl #3]!
   17c44:	ldr	r4, [r9, #4]!
   17c48:	ldm	r7, {r0, r1}
   17c4c:	ldr	r2, [r7, #40]	; 0x28
   17c50:	ldr	r3, [r7, #44]	; 0x2c
   17c54:	orr	r8, r1, #1
   17c58:	add	r1, r7, #8
   17c5c:	stm	sp, {r0, r8}
   17c60:	str	r1, [sp, #20]
   17c64:	add	r0, sp, #8
   17c68:	stm	r0, {r1, r2, r3}
   17c6c:	mov	r0, r4
   17c70:	mov	r1, r6
   17c74:	ldr	r2, [sp, #32]
   17c78:	ldr	r3, [sp, #36]	; 0x24
   17c7c:	bl	169d4 <__assert_fail@plt+0x51d0>
   17c80:	cmp	r6, r0
   17c84:	bhi	17ce8 <__assert_fail@plt+0x64e4>
   17c88:	add	r6, r0, #1
   17c8c:	str	r6, [sl, r5, lsl #3]
   17c90:	movw	r0, #53992	; 0xd2e8
   17c94:	movt	r0, #2
   17c98:	cmp	r4, r0
   17c9c:	beq	17ca8 <__assert_fail@plt+0x64a4>
   17ca0:	mov	r0, r4
   17ca4:	bl	1958c <__assert_fail@plt+0x7d88>
   17ca8:	mov	r0, r6
   17cac:	bl	18a38 <__assert_fail@plt+0x7234>
   17cb0:	mov	r4, r0
   17cb4:	str	r0, [r9]
   17cb8:	ldr	r0, [r7]
   17cbc:	ldr	r1, [r7, #40]	; 0x28
   17cc0:	ldr	r2, [r7, #44]	; 0x2c
   17cc4:	stm	sp, {r0, r8}
   17cc8:	ldr	r0, [sp, #20]
   17ccc:	add	r3, sp, #8
   17cd0:	stm	r3, {r0, r1, r2}
   17cd4:	mov	r0, r4
   17cd8:	mov	r1, r6
   17cdc:	ldr	r2, [sp, #32]
   17ce0:	ldr	r3, [sp, #36]	; 0x24
   17ce4:	bl	169d4 <__assert_fail@plt+0x51d0>
   17ce8:	ldr	r0, [sp, #28]
   17cec:	ldr	r1, [sp, #24]
   17cf0:	str	r1, [r0]
   17cf4:	mov	r0, r4
   17cf8:	sub	sp, fp, #28
   17cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d00:	bl	117d4 <abort@plt>
   17d04:	movw	r3, #53944	; 0xd2b8
   17d08:	movt	r3, #2
   17d0c:	b	17b70 <__assert_fail@plt+0x636c>
   17d10:	mov	r1, r0
   17d14:	mov	r0, #0
   17d18:	b	17b60 <__assert_fail@plt+0x635c>
   17d1c:	mov	r2, r1
   17d20:	mov	r1, r0
   17d24:	mov	r0, #0
   17d28:	b	17d04 <__assert_fail@plt+0x6500>
   17d2c:	push	{r4, r5, r6, sl, fp, lr}
   17d30:	add	fp, sp, #16
   17d34:	sub	sp, sp, #48	; 0x30
   17d38:	mov	r4, r2
   17d3c:	mov	r5, r0
   17d40:	mov	r6, sp
   17d44:	mov	r0, r6
   17d48:	bl	17d68 <__assert_fail@plt+0x6564>
   17d4c:	mov	r0, r5
   17d50:	mov	r1, r4
   17d54:	mvn	r2, #0
   17d58:	mov	r3, r6
   17d5c:	bl	17b70 <__assert_fail@plt+0x636c>
   17d60:	sub	sp, fp, #16
   17d64:	pop	{r4, r5, r6, sl, fp, pc}
   17d68:	vmov.i32	q8, #0	; 0x00000000
   17d6c:	mov	r2, #32
   17d70:	mov	r3, r0
   17d74:	vst1.32	{d16-d17}, [r3], r2
   17d78:	vst1.32	{d16-d17}, [r3]
   17d7c:	add	r2, r0, #16
   17d80:	vst1.32	{d16-d17}, [r2]
   17d84:	cmp	r1, #10
   17d88:	strne	r1, [r0]
   17d8c:	bxne	lr
   17d90:	push	{fp, lr}
   17d94:	mov	fp, sp
   17d98:	bl	117d4 <abort@plt>
   17d9c:	push	{r4, r5, r6, r7, fp, lr}
   17da0:	add	fp, sp, #16
   17da4:	sub	sp, sp, #48	; 0x30
   17da8:	mov	r4, r3
   17dac:	mov	r5, r2
   17db0:	mov	r6, r0
   17db4:	mov	r7, sp
   17db8:	mov	r0, r7
   17dbc:	bl	17d68 <__assert_fail@plt+0x6564>
   17dc0:	mov	r0, r6
   17dc4:	mov	r1, r5
   17dc8:	mov	r2, r4
   17dcc:	mov	r3, r7
   17dd0:	bl	17b70 <__assert_fail@plt+0x636c>
   17dd4:	sub	sp, fp, #16
   17dd8:	pop	{r4, r5, r6, r7, fp, pc}
   17ddc:	mov	r2, r1
   17de0:	mov	r1, r0
   17de4:	mov	r0, #0
   17de8:	b	17d2c <__assert_fail@plt+0x6528>
   17dec:	mov	r3, r2
   17df0:	mov	r2, r1
   17df4:	mov	r1, r0
   17df8:	mov	r0, #0
   17dfc:	b	17d9c <__assert_fail@plt+0x6598>
   17e00:	push	{r4, r5, r6, sl, fp, lr}
   17e04:	add	fp, sp, #16
   17e08:	sub	sp, sp, #48	; 0x30
   17e0c:	mov	r4, r1
   17e10:	mov	r5, r0
   17e14:	mov	r0, #32
   17e18:	movw	r1, #53944	; 0xd2b8
   17e1c:	movt	r1, #2
   17e20:	add	r3, r1, #16
   17e24:	vld1.64	{d16-d17}, [r1], r0
   17e28:	mov	r6, sp
   17e2c:	vld1.64	{d18-d19}, [r3]
   17e30:	add	r3, r6, #16
   17e34:	vld1.64	{d20-d21}, [r1]
   17e38:	vst1.64	{d18-d19}, [r3]
   17e3c:	mov	r1, r6
   17e40:	vst1.64	{d16-d17}, [r1], r0
   17e44:	vst1.64	{d20-d21}, [r1]
   17e48:	mov	r0, r6
   17e4c:	mov	r1, r2
   17e50:	mov	r2, #1
   17e54:	bl	168c8 <__assert_fail@plt+0x50c4>
   17e58:	mov	r0, #0
   17e5c:	mov	r1, r5
   17e60:	mov	r2, r4
   17e64:	mov	r3, r6
   17e68:	bl	17b70 <__assert_fail@plt+0x636c>
   17e6c:	sub	sp, fp, #16
   17e70:	pop	{r4, r5, r6, sl, fp, pc}
   17e74:	mov	r2, r1
   17e78:	mvn	r1, #0
   17e7c:	b	17e00 <__assert_fail@plt+0x65fc>
   17e80:	mov	r1, #58	; 0x3a
   17e84:	b	17e74 <__assert_fail@plt+0x6670>
   17e88:	mov	r2, #58	; 0x3a
   17e8c:	b	17e00 <__assert_fail@plt+0x65fc>
   17e90:	push	{r4, r5, r6, sl, fp, lr}
   17e94:	add	fp, sp, #16
   17e98:	sub	sp, sp, #48	; 0x30
   17e9c:	mov	r4, r2
   17ea0:	mov	r5, r0
   17ea4:	mov	r6, sp
   17ea8:	mov	r0, r6
   17eac:	bl	17d68 <__assert_fail@plt+0x6564>
   17eb0:	mov	r0, r6
   17eb4:	mov	r1, #58	; 0x3a
   17eb8:	mov	r2, #1
   17ebc:	bl	168c8 <__assert_fail@plt+0x50c4>
   17ec0:	mov	r0, r5
   17ec4:	mov	r1, r4
   17ec8:	mvn	r2, #0
   17ecc:	mov	r3, r6
   17ed0:	bl	17b70 <__assert_fail@plt+0x636c>
   17ed4:	sub	sp, fp, #16
   17ed8:	pop	{r4, r5, r6, sl, fp, pc}
   17edc:	push	{fp, lr}
   17ee0:	mov	fp, sp
   17ee4:	sub	sp, sp, #8
   17ee8:	mvn	ip, #0
   17eec:	str	ip, [sp]
   17ef0:	bl	17efc <__assert_fail@plt+0x66f8>
   17ef4:	mov	sp, fp
   17ef8:	pop	{fp, pc}
   17efc:	push	{r4, r5, r6, r7, fp, lr}
   17f00:	add	fp, sp, #16
   17f04:	sub	sp, sp, #48	; 0x30
   17f08:	mov	r7, r3
   17f0c:	mov	r5, r0
   17f10:	mov	r0, #32
   17f14:	movw	r3, #53944	; 0xd2b8
   17f18:	movt	r3, #2
   17f1c:	add	r4, r3, #16
   17f20:	vld1.64	{d16-d17}, [r3], r0
   17f24:	mov	r6, sp
   17f28:	vld1.64	{d18-d19}, [r4]
   17f2c:	add	r4, r6, #16
   17f30:	vld1.64	{d20-d21}, [r3]
   17f34:	vst1.64	{d18-d19}, [r4]
   17f38:	mov	r3, r6
   17f3c:	vst1.64	{d16-d17}, [r3], r0
   17f40:	vst1.64	{d20-d21}, [r3]
   17f44:	mov	r0, r6
   17f48:	bl	16920 <__assert_fail@plt+0x511c>
   17f4c:	ldr	r2, [fp, #8]
   17f50:	mov	r0, r5
   17f54:	mov	r1, r7
   17f58:	mov	r3, r6
   17f5c:	bl	17b70 <__assert_fail@plt+0x636c>
   17f60:	sub	sp, fp, #16
   17f64:	pop	{r4, r5, r6, r7, fp, pc}
   17f68:	mov	r3, r2
   17f6c:	mov	r2, r1
   17f70:	mov	r1, r0
   17f74:	mov	r0, #0
   17f78:	b	17edc <__assert_fail@plt+0x66d8>
   17f7c:	push	{fp, lr}
   17f80:	mov	fp, sp
   17f84:	sub	sp, sp, #8
   17f88:	mov	ip, r2
   17f8c:	mov	r2, r1
   17f90:	mov	r1, r0
   17f94:	str	r3, [sp]
   17f98:	mov	r0, #0
   17f9c:	mov	r3, ip
   17fa0:	bl	17efc <__assert_fail@plt+0x66f8>
   17fa4:	mov	sp, fp
   17fa8:	pop	{fp, pc}
   17fac:	movw	r3, #53640	; 0xd188
   17fb0:	movt	r3, #2
   17fb4:	b	17b70 <__assert_fail@plt+0x636c>
   17fb8:	mov	r2, r1
   17fbc:	mov	r1, r0
   17fc0:	mov	r0, #0
   17fc4:	b	17fac <__assert_fail@plt+0x67a8>
   17fc8:	mvn	r2, #0
   17fcc:	b	17fac <__assert_fail@plt+0x67a8>
   17fd0:	mov	r1, r0
   17fd4:	mov	r0, #0
   17fd8:	b	17fc8 <__assert_fail@plt+0x67c4>
   17fdc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17fe0:	add	fp, sp, #24
   17fe4:	sub	sp, sp, #16
   17fe8:	mov	r4, r1
   17fec:	mov	r5, r0
   17ff0:	mov	r7, #0
   17ff4:	mov	r0, #0
   17ff8:	mov	r1, r5
   17ffc:	mov	r2, #5
   18000:	bl	114ec <dcgettext@plt>
   18004:	cmp	r0, r5
   18008:	beq	18014 <__assert_fail@plt+0x6810>
   1800c:	sub	sp, fp, #24
   18010:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18014:	bl	19bd8 <__assert_fail@plt+0x83d4>
   18018:	mov	r6, r0
   1801c:	mov	r8, #56	; 0x38
   18020:	mov	r0, #45	; 0x2d
   18024:	stm	sp, {r0, r8}
   18028:	str	r7, [sp, #8]
   1802c:	str	r7, [sp, #12]
   18030:	mov	r0, r6
   18034:	mov	r1, #85	; 0x55
   18038:	mov	r2, #84	; 0x54
   1803c:	mov	r3, #70	; 0x46
   18040:	bl	180d8 <__assert_fail@plt+0x68d4>
   18044:	cmp	r0, #0
   18048:	beq	18064 <__assert_fail@plt+0x6860>
   1804c:	ldrb	r1, [r5]
   18050:	movw	r2, #49129	; 0xbfe9
   18054:	movt	r2, #1
   18058:	movw	r0, #49133	; 0xbfed
   1805c:	movt	r0, #1
   18060:	b	180a8 <__assert_fail@plt+0x68a4>
   18064:	mov	r0, #48	; 0x30
   18068:	mov	r1, #51	; 0x33
   1806c:	str	r8, [sp]
   18070:	stmib	sp, {r0, r1}
   18074:	str	r0, [sp, #12]
   18078:	mov	r0, r6
   1807c:	mov	r1, #71	; 0x47
   18080:	mov	r2, #66	; 0x42
   18084:	mov	r3, #49	; 0x31
   18088:	bl	180d8 <__assert_fail@plt+0x68d4>
   1808c:	cmp	r0, #0
   18090:	beq	180b8 <__assert_fail@plt+0x68b4>
   18094:	ldrb	r1, [r5]
   18098:	movw	r2, #49137	; 0xbff1
   1809c:	movt	r2, #1
   180a0:	movw	r0, #49141	; 0xbff5
   180a4:	movt	r0, #1
   180a8:	cmp	r1, #96	; 0x60
   180ac:	moveq	r0, r2
   180b0:	sub	sp, fp, #24
   180b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   180b8:	movw	r1, #49125	; 0xbfe5
   180bc:	movt	r1, #1
   180c0:	movw	r0, #48961	; 0xbf41
   180c4:	movt	r0, #1
   180c8:	cmp	r4, #9
   180cc:	moveq	r0, r1
   180d0:	sub	sp, fp, #24
   180d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   180d8:	push	{r4, r5, r6, r7, fp, lr}
   180dc:	add	fp, sp, #16
   180e0:	sub	sp, sp, #16
   180e4:	mov	r4, r3
   180e8:	mov	r5, r2
   180ec:	mov	r7, r1
   180f0:	mov	r6, r0
   180f4:	mov	r0, r1
   180f8:	bl	19a2c <__assert_fail@plt+0x8228>
   180fc:	ldrb	r1, [r6]
   18100:	cmp	r0, #0
   18104:	andne	r1, r1, #223	; 0xdf
   18108:	mov	r0, #0
   1810c:	cmp	r1, r7
   18110:	bne	18150 <__assert_fail@plt+0x694c>
   18114:	cmp	r7, #0
   18118:	moveq	r0, #1
   1811c:	subeq	sp, fp, #16
   18120:	popeq	{r4, r5, r6, r7, fp, pc}
   18124:	ldr	r0, [fp, #20]
   18128:	ldr	r1, [fp, #16]
   1812c:	ldr	r2, [fp, #12]
   18130:	ldr	r3, [fp, #8]
   18134:	str	r2, [sp]
   18138:	str	r1, [sp, #4]
   1813c:	str	r0, [sp, #8]
   18140:	mov	r0, r6
   18144:	mov	r1, r5
   18148:	mov	r2, r4
   1814c:	bl	18158 <__assert_fail@plt+0x6954>
   18150:	sub	sp, fp, #16
   18154:	pop	{r4, r5, r6, r7, fp, pc}
   18158:	push	{r4, r5, r6, r7, fp, lr}
   1815c:	add	fp, sp, #16
   18160:	sub	sp, sp, #8
   18164:	mov	r4, r3
   18168:	mov	r5, r2
   1816c:	mov	r7, r1
   18170:	mov	r6, r0
   18174:	mov	r0, r1
   18178:	bl	19a2c <__assert_fail@plt+0x8228>
   1817c:	ldrb	r1, [r6, #1]
   18180:	cmp	r0, #0
   18184:	andne	r1, r1, #223	; 0xdf
   18188:	mov	r0, #0
   1818c:	cmp	r1, r7
   18190:	bne	181c8 <__assert_fail@plt+0x69c4>
   18194:	cmp	r7, #0
   18198:	moveq	r0, #1
   1819c:	subeq	sp, fp, #16
   181a0:	popeq	{r4, r5, r6, r7, fp, pc}
   181a4:	ldr	r0, [fp, #16]
   181a8:	ldr	r1, [fp, #12]
   181ac:	ldr	r3, [fp, #8]
   181b0:	str	r1, [sp]
   181b4:	str	r0, [sp, #4]
   181b8:	mov	r0, r6
   181bc:	mov	r1, r5
   181c0:	mov	r2, r4
   181c4:	bl	181d0 <__assert_fail@plt+0x69cc>
   181c8:	sub	sp, fp, #16
   181cc:	pop	{r4, r5, r6, r7, fp, pc}
   181d0:	push	{r4, r5, r6, r7, fp, lr}
   181d4:	add	fp, sp, #16
   181d8:	sub	sp, sp, #8
   181dc:	mov	r4, r3
   181e0:	mov	r5, r2
   181e4:	mov	r7, r1
   181e8:	mov	r6, r0
   181ec:	mov	r0, r1
   181f0:	bl	19a2c <__assert_fail@plt+0x8228>
   181f4:	ldrb	r1, [r6, #2]
   181f8:	cmp	r0, #0
   181fc:	andne	r1, r1, #223	; 0xdf
   18200:	mov	r0, #0
   18204:	cmp	r1, r7
   18208:	bne	18238 <__assert_fail@plt+0x6a34>
   1820c:	cmp	r7, #0
   18210:	moveq	r0, #1
   18214:	subeq	sp, fp, #16
   18218:	popeq	{r4, r5, r6, r7, fp, pc}
   1821c:	ldr	r0, [fp, #12]
   18220:	ldr	r3, [fp, #8]
   18224:	str	r0, [sp]
   18228:	mov	r0, r6
   1822c:	mov	r1, r5
   18230:	mov	r2, r4
   18234:	bl	18240 <__assert_fail@plt+0x6a3c>
   18238:	sub	sp, fp, #16
   1823c:	pop	{r4, r5, r6, r7, fp, pc}
   18240:	push	{r4, r5, r6, r7, fp, lr}
   18244:	add	fp, sp, #16
   18248:	mov	r4, r3
   1824c:	mov	r5, r2
   18250:	mov	r7, r1
   18254:	mov	r6, r0
   18258:	mov	r0, r1
   1825c:	bl	19a2c <__assert_fail@plt+0x8228>
   18260:	ldrb	r1, [r6, #3]
   18264:	ldr	r3, [fp, #8]
   18268:	cmp	r0, #0
   1826c:	andne	r1, r1, #223	; 0xdf
   18270:	mov	r0, #0
   18274:	cmp	r1, r7
   18278:	popne	{r4, r5, r6, r7, fp, pc}
   1827c:	cmp	r7, #0
   18280:	beq	18298 <__assert_fail@plt+0x6a94>
   18284:	mov	r0, r6
   18288:	mov	r1, r5
   1828c:	mov	r2, r4
   18290:	pop	{r4, r5, r6, r7, fp, lr}
   18294:	b	182a0 <__assert_fail@plt+0x6a9c>
   18298:	mov	r0, #1
   1829c:	pop	{r4, r5, r6, r7, fp, pc}
   182a0:	push	{r4, r5, r6, r7, fp, lr}
   182a4:	add	fp, sp, #16
   182a8:	mov	r4, r3
   182ac:	mov	r5, r2
   182b0:	mov	r7, r1
   182b4:	mov	r6, r0
   182b8:	mov	r0, r1
   182bc:	bl	19a2c <__assert_fail@plt+0x8228>
   182c0:	ldrb	r1, [r6, #4]
   182c4:	cmp	r0, #0
   182c8:	andne	r1, r1, #223	; 0xdf
   182cc:	mov	r0, #0
   182d0:	cmp	r1, r7
   182d4:	popne	{r4, r5, r6, r7, fp, pc}
   182d8:	cmp	r7, #0
   182dc:	beq	182f4 <__assert_fail@plt+0x6af0>
   182e0:	mov	r0, r6
   182e4:	mov	r1, r5
   182e8:	mov	r2, r4
   182ec:	pop	{r4, r5, r6, r7, fp, lr}
   182f0:	b	182fc <__assert_fail@plt+0x6af8>
   182f4:	mov	r0, #1
   182f8:	pop	{r4, r5, r6, r7, fp, pc}
   182fc:	push	{r4, r5, r6, sl, fp, lr}
   18300:	add	fp, sp, #16
   18304:	mov	r4, r2
   18308:	mov	r6, r1
   1830c:	mov	r5, r0
   18310:	mov	r0, r1
   18314:	bl	19a2c <__assert_fail@plt+0x8228>
   18318:	ldrb	r1, [r5, #5]
   1831c:	cmp	r0, #0
   18320:	andne	r1, r1, #223	; 0xdf
   18324:	mov	r0, #0
   18328:	cmp	r1, r6
   1832c:	popne	{r4, r5, r6, sl, fp, pc}
   18330:	cmp	r6, #0
   18334:	beq	18348 <__assert_fail@plt+0x6b44>
   18338:	mov	r0, r5
   1833c:	mov	r1, r4
   18340:	pop	{r4, r5, r6, sl, fp, lr}
   18344:	b	18350 <__assert_fail@plt+0x6b4c>
   18348:	mov	r0, #1
   1834c:	pop	{r4, r5, r6, sl, fp, pc}
   18350:	push	{r4, r5, fp, lr}
   18354:	add	fp, sp, #8
   18358:	mov	r5, r1
   1835c:	mov	r4, r0
   18360:	mov	r0, r1
   18364:	bl	19a2c <__assert_fail@plt+0x8228>
   18368:	ldrb	r1, [r4, #6]
   1836c:	cmp	r0, #0
   18370:	andne	r1, r1, #223	; 0xdf
   18374:	mov	r0, #0
   18378:	cmp	r1, r5
   1837c:	popne	{r4, r5, fp, pc}
   18380:	cmp	r5, #0
   18384:	beq	18394 <__assert_fail@plt+0x6b90>
   18388:	mov	r0, r4
   1838c:	pop	{r4, r5, fp, lr}
   18390:	b	1839c <__assert_fail@plt+0x6b98>
   18394:	mov	r0, #1
   18398:	pop	{r4, r5, fp, pc}
   1839c:	push	{r4, sl, fp, lr}
   183a0:	add	fp, sp, #8
   183a4:	mov	r4, r0
   183a8:	mov	r0, #0
   183ac:	bl	19a2c <__assert_fail@plt+0x8228>
   183b0:	ldrb	r1, [r4, #7]
   183b4:	cmp	r0, #0
   183b8:	beq	183d0 <__assert_fail@plt+0x6bcc>
   183bc:	tst	r1, #223	; 0xdf
   183c0:	moveq	r0, #1
   183c4:	popeq	{r4, sl, fp, pc}
   183c8:	mov	r0, #0
   183cc:	pop	{r4, sl, fp, pc}
   183d0:	cmp	r1, #0
   183d4:	moveq	r0, #1
   183d8:	popeq	{r4, sl, fp, pc}
   183dc:	mov	r0, #0
   183e0:	pop	{r4, sl, fp, pc}
   183e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   183e8:	add	fp, sp, #24
   183ec:	mov	r7, r2
   183f0:	mov	r5, r1
   183f4:	mov	r6, r0
   183f8:	movw	r9, #0
   183fc:	movt	r9, #32752	; 0x7ff0
   18400:	mov	r0, r6
   18404:	mov	r1, r5
   18408:	mov	r2, r7
   1840c:	bl	11468 <read@plt>
   18410:	mov	r4, r0
   18414:	cmn	r0, #1
   18418:	movgt	r0, r4
   1841c:	popgt	{r4, r5, r6, r7, r8, r9, fp, pc}
   18420:	bl	11684 <__errno_location@plt>
   18424:	ldr	r0, [r0]
   18428:	cmp	r0, #4
   1842c:	beq	18400 <__assert_fail@plt+0x6bfc>
   18430:	cmp	r7, r9
   18434:	mov	r1, #0
   18438:	movwhi	r1, #1
   1843c:	sub	r2, r0, #22
   18440:	clz	r2, r2
   18444:	lsr	r2, r2, #5
   18448:	ands	r1, r1, r2
   1844c:	moveq	r8, r4
   18450:	mov	r1, r7
   18454:	movwne	r1, #0
   18458:	movtne	r1, #32752	; 0x7ff0
   1845c:	cmp	r7, r9
   18460:	bls	18470 <__assert_fail@plt+0x6c6c>
   18464:	cmp	r0, #22
   18468:	mov	r7, r1
   1846c:	beq	18400 <__assert_fail@plt+0x6bfc>
   18470:	mov	r0, r8
   18474:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18478:	push	{r4, r5, fp, lr}
   1847c:	add	fp, sp, #8
   18480:	mov	r4, r1
   18484:	mov	r5, r0
   18488:	mov	r1, #0
   1848c:	mov	r2, r4
   18490:	bl	116d8 <memchr@plt>
   18494:	rsb	r1, r5, #1
   18498:	cmp	r0, #0
   1849c:	addne	r4, r1, r0
   184a0:	mov	r0, r4
   184a4:	pop	{r4, r5, fp, pc}
   184a8:	push	{r4, r5, r6, r7, fp, lr}
   184ac:	add	fp, sp, #16
   184b0:	mov	r4, r0
   184b4:	cmp	r0, #2
   184b8:	movhi	r0, r4
   184bc:	pophi	{r4, r5, r6, r7, fp, pc}
   184c0:	mov	r0, r4
   184c4:	bl	19ea8 <__assert_fail@plt+0x86a4>
   184c8:	mov	r5, r0
   184cc:	bl	11684 <__errno_location@plt>
   184d0:	mov	r6, r0
   184d4:	ldr	r7, [r0]
   184d8:	mov	r0, r4
   184dc:	bl	117ec <close@plt>
   184e0:	str	r7, [r6]
   184e4:	mov	r0, r5
   184e8:	pop	{r4, r5, r6, r7, fp, pc}
   184ec:	push	{r4, r5, r6, sl, fp, lr}
   184f0:	add	fp, sp, #16
   184f4:	mov	r5, r0
   184f8:	bl	116fc <pipe@plt>
   184fc:	mvn	r4, #0
   18500:	cmp	r0, #0
   18504:	beq	18510 <__assert_fail@plt+0x6d0c>
   18508:	mov	r0, r4
   1850c:	pop	{r4, r5, r6, sl, fp, pc}
   18510:	mov	r6, #0
   18514:	ldr	r0, [r5, r6, lsl #2]
   18518:	bl	184a8 <__assert_fail@plt+0x6ca4>
   1851c:	str	r0, [r5, r6, lsl #2]
   18520:	cmn	r0, #1
   18524:	ble	18540 <__assert_fail@plt+0x6d3c>
   18528:	add	r6, r6, #1
   1852c:	cmp	r6, #2
   18530:	bcc	18514 <__assert_fail@plt+0x6d10>
   18534:	mov	r4, #0
   18538:	mov	r0, r4
   1853c:	pop	{r4, r5, r6, sl, fp, pc}
   18540:	sub	r6, r5, r6, lsl #2
   18544:	bl	11684 <__errno_location@plt>
   18548:	mov	r5, r0
   1854c:	ldr	r0, [r6, #4]
   18550:	ldr	r6, [r5]
   18554:	bl	117ec <close@plt>
   18558:	str	r6, [r5]
   1855c:	mov	r0, r4
   18560:	pop	{r4, r5, r6, sl, fp, pc}
   18564:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18568:	add	fp, sp, #24
   1856c:	sub	sp, sp, #32
   18570:	mov	r4, r2
   18574:	mov	r5, r0
   18578:	ldr	r7, [fp, #12]
   1857c:	ldr	r6, [fp, #8]
   18580:	cmp	r1, #0
   18584:	beq	185a4 <__assert_fail@plt+0x6da0>
   18588:	mov	r2, r1
   1858c:	str	r3, [sp]
   18590:	movw	r1, #49228	; 0xc04c
   18594:	movt	r1, #1
   18598:	mov	r0, r5
   1859c:	mov	r3, r4
   185a0:	b	185b4 <__assert_fail@plt+0x6db0>
   185a4:	movw	r1, #49240	; 0xc058
   185a8:	movt	r1, #1
   185ac:	mov	r0, r5
   185b0:	mov	r2, r4
   185b4:	bl	11678 <fprintf@plt>
   185b8:	movw	r1, #49247	; 0xc05f
   185bc:	movt	r1, #1
   185c0:	mov	r0, #0
   185c4:	mov	r2, #5
   185c8:	bl	114ec <dcgettext@plt>
   185cc:	mov	r2, r0
   185d0:	movw	r1, #49943	; 0xc317
   185d4:	movt	r1, #1
   185d8:	mov	r0, r5
   185dc:	movw	r3, #2022	; 0x7e6
   185e0:	bl	11678 <fprintf@plt>
   185e4:	mov	r0, #10
   185e8:	mov	r1, r5
   185ec:	bl	1175c <fputc@plt>
   185f0:	movw	r1, #49251	; 0xc063
   185f4:	movt	r1, #1
   185f8:	mov	r0, #0
   185fc:	mov	r2, #5
   18600:	bl	114ec <dcgettext@plt>
   18604:	mov	r1, r0
   18608:	movw	r2, #49422	; 0xc10e
   1860c:	movt	r2, #1
   18610:	mov	r0, r5
   18614:	bl	11678 <fprintf@plt>
   18618:	mov	r0, #10
   1861c:	mov	r1, r5
   18620:	bl	1175c <fputc@plt>
   18624:	cmp	r7, #9
   18628:	bhi	18664 <__assert_fail@plt+0x6e60>
   1862c:	add	r0, pc, #0
   18630:	ldr	pc, [r0, r7, lsl #2]
   18634:	andeq	r8, r1, ip, asr r6
   18638:	andeq	r8, r1, r0, ror r6
   1863c:	muleq	r1, ip, r6
   18640:	andeq	r8, r1, r8, asr #13
   18644:	strdeq	r8, [r1], -r0
   18648:	andeq	r8, r1, ip, lsl r7
   1864c:	andeq	r8, r1, r0, asr r7
   18650:	muleq	r1, r0, r7
   18654:	andeq	r8, r1, ip, lsr #16
   18658:	ldrdeq	r8, [r1], -r4
   1865c:	sub	sp, fp, #24
   18660:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18664:	movw	r1, #49775	; 0xc26f
   18668:	movt	r1, #1
   1866c:	b	187dc <__assert_fail@plt+0x6fd8>
   18670:	movw	r1, #49456	; 0xc130
   18674:	movt	r1, #1
   18678:	mov	r0, #0
   1867c:	mov	r2, #5
   18680:	bl	114ec <dcgettext@plt>
   18684:	mov	r1, r0
   18688:	ldr	r2, [r6]
   1868c:	mov	r0, r5
   18690:	sub	sp, fp, #24
   18694:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18698:	b	11678 <fprintf@plt>
   1869c:	movw	r1, #49472	; 0xc140
   186a0:	movt	r1, #1
   186a4:	mov	r0, #0
   186a8:	mov	r2, #5
   186ac:	bl	114ec <dcgettext@plt>
   186b0:	mov	r1, r0
   186b4:	ldm	r6, {r2, r3}
   186b8:	mov	r0, r5
   186bc:	sub	sp, fp, #24
   186c0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   186c4:	b	11678 <fprintf@plt>
   186c8:	movw	r1, #49495	; 0xc157
   186cc:	movt	r1, #1
   186d0:	mov	r0, #0
   186d4:	mov	r2, #5
   186d8:	bl	114ec <dcgettext@plt>
   186dc:	mov	r1, r0
   186e0:	ldm	r6, {r2, r3}
   186e4:	ldr	r0, [r6, #8]
   186e8:	str	r0, [sp]
   186ec:	b	18788 <__assert_fail@plt+0x6f84>
   186f0:	movw	r1, #49523	; 0xc173
   186f4:	movt	r1, #1
   186f8:	mov	r0, #0
   186fc:	mov	r2, #5
   18700:	bl	114ec <dcgettext@plt>
   18704:	mov	r1, r0
   18708:	ldm	r6, {r2, r3}
   1870c:	ldr	r0, [r6, #8]
   18710:	ldr	r7, [r6, #12]
   18714:	stm	sp, {r0, r7}
   18718:	b	18788 <__assert_fail@plt+0x6f84>
   1871c:	movw	r1, #49555	; 0xc193
   18720:	movt	r1, #1
   18724:	mov	r0, #0
   18728:	mov	r2, #5
   1872c:	bl	114ec <dcgettext@plt>
   18730:	mov	r1, r0
   18734:	ldm	r6, {r2, r3}
   18738:	ldr	r0, [r6, #8]
   1873c:	ldr	r7, [r6, #12]
   18740:	ldr	r6, [r6, #16]
   18744:	stm	sp, {r0, r7}
   18748:	str	r6, [sp, #8]
   1874c:	b	18788 <__assert_fail@plt+0x6f84>
   18750:	movw	r1, #49591	; 0xc1b7
   18754:	movt	r1, #1
   18758:	mov	r0, #0
   1875c:	mov	r2, #5
   18760:	bl	114ec <dcgettext@plt>
   18764:	mov	r1, r0
   18768:	ldm	r6, {r2, r3}
   1876c:	ldr	r0, [r6, #8]
   18770:	ldr	r7, [r6, #12]
   18774:	ldr	r4, [r6, #16]
   18778:	ldr	r6, [r6, #20]
   1877c:	stm	sp, {r0, r7}
   18780:	str	r4, [sp, #8]
   18784:	str	r6, [sp, #12]
   18788:	mov	r0, r5
   1878c:	b	1887c <__assert_fail@plt+0x7078>
   18790:	movw	r1, #49631	; 0xc1df
   18794:	movt	r1, #1
   18798:	mov	r0, #0
   1879c:	mov	r2, #5
   187a0:	bl	114ec <dcgettext@plt>
   187a4:	mov	ip, r0
   187a8:	ldm	r6, {r2, r3}
   187ac:	ldr	r0, [r6, #8]
   187b0:	ldr	r7, [r6, #12]
   187b4:	ldr	r4, [r6, #16]
   187b8:	ldr	r1, [r6, #20]
   187bc:	ldr	r6, [r6, #24]
   187c0:	stm	sp, {r0, r7}
   187c4:	str	r4, [sp, #8]
   187c8:	str	r1, [sp, #12]
   187cc:	str	r6, [sp, #16]
   187d0:	b	18874 <__assert_fail@plt+0x7070>
   187d4:	movw	r1, #49723	; 0xc23b
   187d8:	movt	r1, #1
   187dc:	mov	r0, #0
   187e0:	mov	r2, #5
   187e4:	bl	114ec <dcgettext@plt>
   187e8:	mov	ip, r0
   187ec:	ldr	r2, [r6]
   187f0:	ldr	r3, [r6, #4]
   187f4:	ldr	r0, [r6, #8]
   187f8:	ldr	r7, [r6, #12]
   187fc:	ldr	r4, [r6, #16]
   18800:	ldr	r1, [r6, #20]
   18804:	ldr	lr, [r6, #24]
   18808:	ldr	r8, [r6, #28]
   1880c:	ldr	r6, [r6, #32]
   18810:	stm	sp, {r0, r7}
   18814:	str	r4, [sp, #8]
   18818:	str	r1, [sp, #12]
   1881c:	str	lr, [sp, #16]
   18820:	str	r8, [sp, #20]
   18824:	str	r6, [sp, #24]
   18828:	b	18874 <__assert_fail@plt+0x7070>
   1882c:	movw	r1, #49675	; 0xc20b
   18830:	movt	r1, #1
   18834:	mov	r0, #0
   18838:	mov	r2, #5
   1883c:	bl	114ec <dcgettext@plt>
   18840:	mov	ip, r0
   18844:	ldm	r6, {r2, r3}
   18848:	ldr	r0, [r6, #8]
   1884c:	ldr	r7, [r6, #12]
   18850:	ldr	r4, [r6, #16]
   18854:	ldr	r1, [r6, #20]
   18858:	ldr	lr, [r6, #24]
   1885c:	ldr	r6, [r6, #28]
   18860:	stm	sp, {r0, r7}
   18864:	str	r4, [sp, #8]
   18868:	str	r1, [sp, #12]
   1886c:	str	lr, [sp, #16]
   18870:	str	r6, [sp, #20]
   18874:	mov	r0, r5
   18878:	mov	r1, ip
   1887c:	bl	11678 <fprintf@plt>
   18880:	sub	sp, fp, #24
   18884:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18888:	push	{r4, sl, fp, lr}
   1888c:	add	fp, sp, #8
   18890:	sub	sp, sp, #8
   18894:	mov	lr, #0
   18898:	ldr	ip, [fp, #8]
   1889c:	ldr	r4, [ip, lr, lsl #2]
   188a0:	add	lr, lr, #1
   188a4:	cmp	r4, #0
   188a8:	bne	1889c <__assert_fail@plt+0x7098>
   188ac:	sub	r4, lr, #1
   188b0:	str	ip, [sp]
   188b4:	str	r4, [sp, #4]
   188b8:	bl	18564 <__assert_fail@plt+0x6d60>
   188bc:	sub	sp, fp, #8
   188c0:	pop	{r4, sl, fp, pc}
   188c4:	push	{r4, r5, fp, lr}
   188c8:	add	fp, sp, #8
   188cc:	sub	sp, sp, #48	; 0x30
   188d0:	mov	ip, #0
   188d4:	ldr	r4, [fp, #8]
   188d8:	add	lr, sp, #8
   188dc:	ldr	r5, [r4]
   188e0:	str	r5, [lr, ip, lsl #2]
   188e4:	cmp	r5, #0
   188e8:	beq	188fc <__assert_fail@plt+0x70f8>
   188ec:	add	ip, ip, #1
   188f0:	add	r4, r4, #4
   188f4:	cmp	ip, #10
   188f8:	bcc	188dc <__assert_fail@plt+0x70d8>
   188fc:	str	lr, [sp]
   18900:	str	ip, [sp, #4]
   18904:	bl	18564 <__assert_fail@plt+0x6d60>
   18908:	sub	sp, fp, #8
   1890c:	pop	{r4, r5, fp, pc}
   18910:	push	{fp, lr}
   18914:	mov	fp, sp
   18918:	sub	sp, sp, #8
   1891c:	add	ip, fp, #8
   18920:	str	ip, [sp, #4]
   18924:	str	ip, [sp]
   18928:	bl	188c4 <__assert_fail@plt+0x70c0>
   1892c:	mov	sp, fp
   18930:	pop	{fp, pc}
   18934:	push	{fp, lr}
   18938:	mov	fp, sp
   1893c:	movw	r0, #53724	; 0xd1dc
   18940:	movt	r0, #2
   18944:	ldr	r1, [r0]
   18948:	mov	r0, #10
   1894c:	bl	1175c <fputc@plt>
   18950:	movw	r1, #49835	; 0xc2ab
   18954:	movt	r1, #1
   18958:	mov	r0, #0
   1895c:	mov	r2, #5
   18960:	bl	114ec <dcgettext@plt>
   18964:	movw	r1, #48714	; 0xbe4a
   18968:	movt	r1, #1
   1896c:	bl	1145c <printf@plt>
   18970:	movw	r1, #49855	; 0xc2bf
   18974:	movt	r1, #1
   18978:	mov	r0, #0
   1897c:	mov	r2, #5
   18980:	bl	114ec <dcgettext@plt>
   18984:	movw	r1, #48314	; 0xbcba
   18988:	movt	r1, #1
   1898c:	movw	r2, #48628	; 0xbdf4
   18990:	movt	r2, #1
   18994:	bl	1145c <printf@plt>
   18998:	movw	r1, #49875	; 0xc2d3
   1899c:	movt	r1, #1
   189a0:	mov	r0, #0
   189a4:	mov	r2, #5
   189a8:	bl	114ec <dcgettext@plt>
   189ac:	movw	r1, #49914	; 0xc2fa
   189b0:	movt	r1, #1
   189b4:	pop	{fp, lr}
   189b8:	b	1145c <printf@plt>
   189bc:	b	189c0 <__assert_fail@plt+0x71bc>
   189c0:	push	{r4, r5, r6, sl, fp, lr}
   189c4:	add	fp, sp, #16
   189c8:	mov	r4, r2
   189cc:	mov	r5, r1
   189d0:	mov	r6, r0
   189d4:	bl	1973c <__assert_fail@plt+0x7f38>
   189d8:	cmp	r0, #0
   189dc:	popne	{r4, r5, r6, sl, fp, pc}
   189e0:	cmp	r6, #0
   189e4:	beq	189f8 <__assert_fail@plt+0x71f4>
   189e8:	cmp	r5, #0
   189ec:	cmpne	r4, #0
   189f0:	bne	189f8 <__assert_fail@plt+0x71f4>
   189f4:	pop	{r4, r5, r6, sl, fp, pc}
   189f8:	bl	18dac <__assert_fail@plt+0x75a8>
   189fc:	push	{fp, lr}
   18a00:	mov	fp, sp
   18a04:	bl	19658 <__assert_fail@plt+0x7e54>
   18a08:	bl	18a10 <__assert_fail@plt+0x720c>
   18a0c:	pop	{fp, pc}
   18a10:	cmp	r0, #0
   18a14:	bxne	lr
   18a18:	push	{fp, lr}
   18a1c:	mov	fp, sp
   18a20:	bl	18dac <__assert_fail@plt+0x75a8>
   18a24:	push	{fp, lr}
   18a28:	mov	fp, sp
   18a2c:	bl	19ba4 <__assert_fail@plt+0x83a0>
   18a30:	bl	18a10 <__assert_fail@plt+0x720c>
   18a34:	pop	{fp, pc}
   18a38:	b	189fc <__assert_fail@plt+0x71f8>
   18a3c:	push	{r4, r5, fp, lr}
   18a40:	add	fp, sp, #8
   18a44:	mov	r4, r1
   18a48:	mov	r5, r0
   18a4c:	bl	196e8 <__assert_fail@plt+0x7ee4>
   18a50:	cmp	r0, #0
   18a54:	popne	{r4, r5, fp, pc}
   18a58:	cmp	r5, #0
   18a5c:	beq	18a6c <__assert_fail@plt+0x7268>
   18a60:	cmp	r4, #0
   18a64:	bne	18a6c <__assert_fail@plt+0x7268>
   18a68:	pop	{r4, r5, fp, pc}
   18a6c:	bl	18dac <__assert_fail@plt+0x75a8>
   18a70:	push	{fp, lr}
   18a74:	mov	fp, sp
   18a78:	bl	19ba8 <__assert_fail@plt+0x83a4>
   18a7c:	bl	18a10 <__assert_fail@plt+0x720c>
   18a80:	pop	{fp, pc}
   18a84:	push	{fp, lr}
   18a88:	mov	fp, sp
   18a8c:	bl	19bb8 <__assert_fail@plt+0x83b4>
   18a90:	bl	18a10 <__assert_fail@plt+0x720c>
   18a94:	pop	{fp, pc}
   18a98:	push	{fp, lr}
   18a9c:	mov	fp, sp
   18aa0:	mov	r2, r1
   18aa4:	mov	r1, r0
   18aa8:	mov	r0, #0
   18aac:	bl	189c0 <__assert_fail@plt+0x71bc>
   18ab0:	pop	{fp, pc}
   18ab4:	mov	r2, r1
   18ab8:	mov	r1, r0
   18abc:	mov	r0, #0
   18ac0:	b	18a84 <__assert_fail@plt+0x7280>
   18ac4:	mov	r2, #1
   18ac8:	b	18acc <__assert_fail@plt+0x72c8>
   18acc:	push	{r4, r5, fp, lr}
   18ad0:	add	fp, sp, #8
   18ad4:	mov	r4, r1
   18ad8:	ldr	r5, [r1]
   18adc:	cmp	r0, #0
   18ae0:	beq	18af8 <__assert_fail@plt+0x72f4>
   18ae4:	mov	r1, #1
   18ae8:	add	r1, r1, r5, lsr #1
   18aec:	adds	r5, r5, r1
   18af0:	bcc	18b10 <__assert_fail@plt+0x730c>
   18af4:	bl	18dac <__assert_fail@plt+0x75a8>
   18af8:	cmp	r5, #0
   18afc:	bne	18b10 <__assert_fail@plt+0x730c>
   18b00:	mov	r1, #64	; 0x40
   18b04:	udiv	r5, r1, r2
   18b08:	cmp	r2, #64	; 0x40
   18b0c:	addhi	r5, r5, #1
   18b10:	mov	r1, r5
   18b14:	bl	189c0 <__assert_fail@plt+0x71bc>
   18b18:	str	r5, [r4]
   18b1c:	pop	{r4, r5, fp, pc}
   18b20:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18b24:	add	fp, sp, #24
   18b28:	mov	r8, r1
   18b2c:	ldr	r6, [r1]
   18b30:	add	r1, r6, r6, asr #1
   18b34:	cmp	r1, r6
   18b38:	mvnvs	r1, #-2147483648	; 0x80000000
   18b3c:	cmp	r1, r3
   18b40:	mov	r5, r1
   18b44:	movgt	r5, r3
   18b48:	cmn	r3, #1
   18b4c:	movle	r5, r1
   18b50:	ldr	r4, [fp, #8]
   18b54:	cmn	r4, #1
   18b58:	ble	18b80 <__assert_fail@plt+0x737c>
   18b5c:	cmp	r4, #0
   18b60:	beq	18bd4 <__assert_fail@plt+0x73d0>
   18b64:	cmn	r5, #1
   18b68:	ble	18ba8 <__assert_fail@plt+0x73a4>
   18b6c:	mvn	r7, #-2147483648	; 0x80000000
   18b70:	udiv	r1, r7, r4
   18b74:	cmp	r1, r5
   18b78:	bge	18bd4 <__assert_fail@plt+0x73d0>
   18b7c:	b	18be4 <__assert_fail@plt+0x73e0>
   18b80:	cmn	r5, #1
   18b84:	ble	18bc4 <__assert_fail@plt+0x73c0>
   18b88:	cmn	r4, #1
   18b8c:	beq	18bd4 <__assert_fail@plt+0x73d0>
   18b90:	mov	r1, #-2147483648	; 0x80000000
   18b94:	sdiv	r1, r1, r4
   18b98:	mvn	r7, #-2147483648	; 0x80000000
   18b9c:	cmp	r1, r5
   18ba0:	bge	18bd4 <__assert_fail@plt+0x73d0>
   18ba4:	b	18be4 <__assert_fail@plt+0x73e0>
   18ba8:	beq	18bd4 <__assert_fail@plt+0x73d0>
   18bac:	mov	r1, #-2147483648	; 0x80000000
   18bb0:	sdiv	r1, r1, r5
   18bb4:	mvn	r7, #-2147483648	; 0x80000000
   18bb8:	cmp	r1, r4
   18bbc:	bge	18bd4 <__assert_fail@plt+0x73d0>
   18bc0:	b	18be4 <__assert_fail@plt+0x73e0>
   18bc4:	mvn	r7, #-2147483648	; 0x80000000
   18bc8:	sdiv	r1, r7, r4
   18bcc:	cmp	r5, r1
   18bd0:	blt	18be4 <__assert_fail@plt+0x73e0>
   18bd4:	mul	r1, r5, r4
   18bd8:	mov	r7, #64	; 0x40
   18bdc:	cmp	r1, #63	; 0x3f
   18be0:	bgt	18bec <__assert_fail@plt+0x73e8>
   18be4:	sdiv	r5, r7, r4
   18be8:	mul	r1, r5, r4
   18bec:	cmp	r0, #0
   18bf0:	moveq	r7, #0
   18bf4:	streq	r7, [r8]
   18bf8:	sub	r7, r5, r6
   18bfc:	cmp	r7, r2
   18c00:	bge	18cac <__assert_fail@plt+0x74a8>
   18c04:	add	r5, r6, r2
   18c08:	mov	r1, #0
   18c0c:	cmp	r5, r3
   18c10:	mov	r2, #0
   18c14:	movwgt	r2, #1
   18c18:	cmn	r3, #1
   18c1c:	movwgt	r1, #1
   18c20:	cmp	r5, r6
   18c24:	bvs	18c94 <__assert_fail@plt+0x7490>
   18c28:	ands	r1, r1, r2
   18c2c:	bne	18c94 <__assert_fail@plt+0x7490>
   18c30:	cmn	r4, #1
   18c34:	ble	18c5c <__assert_fail@plt+0x7458>
   18c38:	cmp	r4, #0
   18c3c:	beq	18ca8 <__assert_fail@plt+0x74a4>
   18c40:	cmn	r5, #1
   18c44:	ble	18c80 <__assert_fail@plt+0x747c>
   18c48:	mvn	r1, #-2147483648	; 0x80000000
   18c4c:	udiv	r1, r1, r4
   18c50:	cmp	r1, r5
   18c54:	bge	18ca8 <__assert_fail@plt+0x74a4>
   18c58:	b	18c94 <__assert_fail@plt+0x7490>
   18c5c:	cmn	r5, #1
   18c60:	ble	18c98 <__assert_fail@plt+0x7494>
   18c64:	cmn	r4, #1
   18c68:	beq	18ca8 <__assert_fail@plt+0x74a4>
   18c6c:	mov	r1, #-2147483648	; 0x80000000
   18c70:	sdiv	r1, r1, r4
   18c74:	cmp	r1, r5
   18c78:	bge	18ca8 <__assert_fail@plt+0x74a4>
   18c7c:	b	18c94 <__assert_fail@plt+0x7490>
   18c80:	beq	18ca8 <__assert_fail@plt+0x74a4>
   18c84:	mov	r1, #-2147483648	; 0x80000000
   18c88:	sdiv	r1, r1, r5
   18c8c:	cmp	r1, r4
   18c90:	bge	18ca8 <__assert_fail@plt+0x74a4>
   18c94:	bl	18dac <__assert_fail@plt+0x75a8>
   18c98:	mvn	r1, #-2147483648	; 0x80000000
   18c9c:	sdiv	r1, r1, r4
   18ca0:	cmp	r5, r1
   18ca4:	blt	18c94 <__assert_fail@plt+0x7490>
   18ca8:	mul	r1, r5, r4
   18cac:	bl	18a3c <__assert_fail@plt+0x7238>
   18cb0:	str	r5, [r8]
   18cb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18cb8:	mov	r1, #1
   18cbc:	b	18cc0 <__assert_fail@plt+0x74bc>
   18cc0:	push	{fp, lr}
   18cc4:	mov	fp, sp
   18cc8:	bl	192b0 <__assert_fail@plt+0x7aac>
   18ccc:	bl	18a10 <__assert_fail@plt+0x720c>
   18cd0:	pop	{fp, pc}
   18cd4:	mov	r1, #1
   18cd8:	b	18cdc <__assert_fail@plt+0x74d8>
   18cdc:	push	{fp, lr}
   18ce0:	mov	fp, sp
   18ce4:	bl	19bb4 <__assert_fail@plt+0x83b0>
   18ce8:	bl	18a10 <__assert_fail@plt+0x720c>
   18cec:	pop	{fp, pc}
   18cf0:	push	{r4, r5, r6, sl, fp, lr}
   18cf4:	add	fp, sp, #16
   18cf8:	mov	r4, r1
   18cfc:	mov	r5, r0
   18d00:	mov	r0, r1
   18d04:	bl	189fc <__assert_fail@plt+0x71f8>
   18d08:	mov	r6, r0
   18d0c:	mov	r1, r5
   18d10:	mov	r2, r4
   18d14:	bl	114b0 <memcpy@plt>
   18d18:	mov	r0, r6
   18d1c:	pop	{r4, r5, r6, sl, fp, pc}
   18d20:	push	{r4, r5, r6, sl, fp, lr}
   18d24:	add	fp, sp, #16
   18d28:	mov	r4, r1
   18d2c:	mov	r5, r0
   18d30:	mov	r0, r1
   18d34:	bl	18a24 <__assert_fail@plt+0x7220>
   18d38:	mov	r6, r0
   18d3c:	mov	r1, r5
   18d40:	mov	r2, r4
   18d44:	bl	114b0 <memcpy@plt>
   18d48:	mov	r0, r6
   18d4c:	pop	{r4, r5, r6, sl, fp, pc}
   18d50:	push	{r4, r5, r6, sl, fp, lr}
   18d54:	add	fp, sp, #16
   18d58:	mov	r4, r1
   18d5c:	mov	r5, r0
   18d60:	add	r0, r1, #1
   18d64:	bl	18a24 <__assert_fail@plt+0x7220>
   18d68:	mov	r6, r0
   18d6c:	mov	r0, #0
   18d70:	strb	r0, [r6, r4]
   18d74:	mov	r0, r6
   18d78:	mov	r1, r5
   18d7c:	mov	r2, r4
   18d80:	bl	114b0 <memcpy@plt>
   18d84:	mov	r0, r6
   18d88:	pop	{r4, r5, r6, sl, fp, pc}
   18d8c:	push	{r4, sl, fp, lr}
   18d90:	add	fp, sp, #8
   18d94:	mov	r4, r0
   18d98:	bl	11654 <strlen@plt>
   18d9c:	add	r1, r0, #1
   18da0:	mov	r0, r4
   18da4:	pop	{r4, sl, fp, lr}
   18da8:	b	18cf0 <__assert_fail@plt+0x74ec>
   18dac:	push	{fp, lr}
   18db0:	mov	fp, sp
   18db4:	movw	r0, #53616	; 0xd170
   18db8:	movt	r0, #2
   18dbc:	ldr	r4, [r0]
   18dc0:	movw	r1, #49990	; 0xc346
   18dc4:	movt	r1, #1
   18dc8:	mov	r0, #0
   18dcc:	mov	r2, #5
   18dd0:	bl	114ec <dcgettext@plt>
   18dd4:	mov	r3, r0
   18dd8:	movw	r2, #48419	; 0xbd23
   18ddc:	movt	r2, #1
   18de0:	mov	r0, r4
   18de4:	mov	r1, #0
   18de8:	bl	115b8 <error@plt>
   18dec:	bl	117d4 <abort@plt>
   18df0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18df4:	add	fp, sp, #28
   18df8:	sub	sp, sp, #12
   18dfc:	cmp	r2, #37	; 0x25
   18e00:	bcs	19220 <__assert_fail@plt+0x7a1c>
   18e04:	mov	r7, r2
   18e08:	mov	r6, r1
   18e0c:	mov	r4, r0
   18e10:	str	r3, [sp]
   18e14:	ldr	sl, [fp, #8]
   18e18:	bl	11684 <__errno_location@plt>
   18e1c:	mov	r5, r0
   18e20:	mov	r0, #0
   18e24:	str	r0, [r5]
   18e28:	bl	11624 <__ctype_b_loc@plt>
   18e2c:	ldr	r1, [r0]
   18e30:	mov	r2, r4
   18e34:	ldrb	r0, [r2], #1
   18e38:	add	r3, r1, r0, lsl #1
   18e3c:	ldrb	r3, [r3, #1]
   18e40:	tst	r3, #32
   18e44:	bne	18e34 <__assert_fail@plt+0x7630>
   18e48:	add	r9, sp, #8
   18e4c:	cmp	r6, #0
   18e50:	movne	r9, r6
   18e54:	mov	r8, #4
   18e58:	cmp	r0, #45	; 0x2d
   18e5c:	beq	19214 <__assert_fail@plt+0x7a10>
   18e60:	mov	r0, r4
   18e64:	mov	r1, r9
   18e68:	mov	r2, r7
   18e6c:	bl	11648 <strtoul@plt>
   18e70:	str	r0, [sp, #4]
   18e74:	ldr	r7, [r9]
   18e78:	cmp	r7, r4
   18e7c:	beq	18ea4 <__assert_fail@plt+0x76a0>
   18e80:	ldr	r0, [r5]
   18e84:	cmp	r0, #0
   18e88:	beq	18ed4 <__assert_fail@plt+0x76d0>
   18e8c:	cmp	r0, #34	; 0x22
   18e90:	bne	19214 <__assert_fail@plt+0x7a10>
   18e94:	mov	r8, #1
   18e98:	cmp	sl, #0
   18e9c:	bne	18ee0 <__assert_fail@plt+0x76dc>
   18ea0:	b	19208 <__assert_fail@plt+0x7a04>
   18ea4:	cmp	sl, #0
   18ea8:	ldrbne	r1, [r7]
   18eac:	cmpne	r1, #0
   18eb0:	beq	19214 <__assert_fail@plt+0x7a10>
   18eb4:	mov	r0, sl
   18eb8:	bl	11660 <strchr@plt>
   18ebc:	cmp	r0, #0
   18ec0:	beq	19214 <__assert_fail@plt+0x7a10>
   18ec4:	mov	r0, #1
   18ec8:	str	r0, [sp, #4]
   18ecc:	mov	r8, #0
   18ed0:	b	18ee0 <__assert_fail@plt+0x76dc>
   18ed4:	mov	r8, r0
   18ed8:	cmp	sl, #0
   18edc:	beq	19208 <__assert_fail@plt+0x7a04>
   18ee0:	ldrb	r4, [r7]
   18ee4:	cmp	r4, #0
   18ee8:	beq	19208 <__assert_fail@plt+0x7a04>
   18eec:	mov	r0, sl
   18ef0:	mov	r1, r4
   18ef4:	bl	11660 <strchr@plt>
   18ef8:	cmp	r0, #0
   18efc:	beq	1910c <__assert_fail@plt+0x7908>
   18f00:	sub	r0, r4, #69	; 0x45
   18f04:	mov	r6, #1
   18f08:	mov	r5, #1024	; 0x400
   18f0c:	cmp	r0, #47	; 0x2f
   18f10:	bhi	19008 <__assert_fail@plt+0x7804>
   18f14:	add	r1, pc, #0
   18f18:	ldr	pc, [r1, r0, lsl #2]
   18f1c:	ldrdeq	r8, [r1], -ip
   18f20:	andeq	r9, r1, r8
   18f24:	ldrdeq	r8, [r1], -ip
   18f28:	andeq	r9, r1, r8
   18f2c:	andeq	r9, r1, r8
   18f30:	andeq	r9, r1, r8
   18f34:	ldrdeq	r8, [r1], -ip
   18f38:	andeq	r9, r1, r8
   18f3c:	ldrdeq	r8, [r1], -ip
   18f40:	andeq	r9, r1, r8
   18f44:	andeq	r9, r1, r8
   18f48:	ldrdeq	r8, [r1], -ip
   18f4c:	andeq	r9, r1, r8
   18f50:	andeq	r9, r1, r8
   18f54:	andeq	r9, r1, r8
   18f58:	ldrdeq	r8, [r1], -ip
   18f5c:	andeq	r9, r1, r8
   18f60:	andeq	r9, r1, r8
   18f64:	andeq	r9, r1, r8
   18f68:	andeq	r9, r1, r8
   18f6c:	ldrdeq	r8, [r1], -ip
   18f70:	ldrdeq	r8, [r1], -ip
   18f74:	andeq	r9, r1, r8
   18f78:	andeq	r9, r1, r8
   18f7c:	andeq	r9, r1, r8
   18f80:	andeq	r9, r1, r8
   18f84:	andeq	r9, r1, r8
   18f88:	andeq	r9, r1, r8
   18f8c:	andeq	r9, r1, r8
   18f90:	andeq	r9, r1, r8
   18f94:	andeq	r9, r1, r8
   18f98:	andeq	r9, r1, r8
   18f9c:	andeq	r9, r1, r8
   18fa0:	andeq	r9, r1, r8
   18fa4:	ldrdeq	r8, [r1], -ip
   18fa8:	andeq	r9, r1, r8
   18fac:	andeq	r9, r1, r8
   18fb0:	andeq	r9, r1, r8
   18fb4:	ldrdeq	r8, [r1], -ip
   18fb8:	andeq	r9, r1, r8
   18fbc:	ldrdeq	r8, [r1], -ip
   18fc0:	andeq	r9, r1, r8
   18fc4:	andeq	r9, r1, r8
   18fc8:	andeq	r9, r1, r8
   18fcc:	andeq	r9, r1, r8
   18fd0:	andeq	r9, r1, r8
   18fd4:	andeq	r9, r1, r8
   18fd8:	ldrdeq	r8, [r1], -ip
   18fdc:	mov	r0, sl
   18fe0:	mov	r1, #48	; 0x30
   18fe4:	bl	11660 <strchr@plt>
   18fe8:	cmp	r0, #0
   18fec:	beq	19008 <__assert_fail@plt+0x7804>
   18ff0:	ldrb	r0, [r7, #1]
   18ff4:	cmp	r0, #66	; 0x42
   18ff8:	cmpne	r0, #68	; 0x44
   18ffc:	bne	19120 <__assert_fail@plt+0x791c>
   19000:	mov	r6, #2
   19004:	mov	r5, #1000	; 0x3e8
   19008:	sub	r1, r4, #66	; 0x42
   1900c:	cmp	r1, #53	; 0x35
   19010:	bhi	1910c <__assert_fail@plt+0x7908>
   19014:	mov	r0, #0
   19018:	add	r2, pc, #0
   1901c:	ldr	pc, [r2, r1, lsl #2]
   19020:	andeq	r9, r1, ip, lsl #3
   19024:	andeq	r9, r1, ip, lsl #2
   19028:	andeq	r9, r1, ip, lsl #2
   1902c:	muleq	r1, r8, r1
   19030:	andeq	r9, r1, ip, lsl #2
   19034:	strdeq	r9, [r1], -r8
   19038:	andeq	r9, r1, ip, lsl #2
   1903c:	andeq	r9, r1, ip, lsl #2
   19040:	andeq	r9, r1, ip, lsl #2
   19044:	andeq	r9, r1, ip, lsr r1
   19048:	andeq	r9, r1, ip, lsl #2
   1904c:	andeq	r9, r1, r0, asr r1
   19050:	andeq	r9, r1, ip, lsl #2
   19054:	andeq	r9, r1, ip, lsl #2
   19058:	andeq	r9, r1, ip, lsr #3
   1905c:	andeq	r9, r1, ip, lsl #2
   19060:	andeq	r9, r1, ip, lsl #2
   19064:	andeq	r9, r1, ip, lsl #2
   19068:	andeq	r9, r1, r4, ror #2
   1906c:	andeq	r9, r1, ip, lsl #2
   19070:	andeq	r9, r1, ip, lsl #2
   19074:	andeq	r9, r1, ip, lsl #2
   19078:	andeq	r9, r1, ip, lsl #2
   1907c:	andeq	r9, r1, r0, asr #3
   19080:	andeq	r9, r1, r8, ror r1
   19084:	andeq	r9, r1, ip, lsl #2
   19088:	andeq	r9, r1, ip, lsl #2
   1908c:	andeq	r9, r1, ip, lsl #2
   19090:	andeq	r9, r1, ip, lsl #2
   19094:	andeq	r9, r1, ip, lsl #2
   19098:	andeq	r9, r1, ip, lsl #2
   1909c:	andeq	r9, r1, ip, lsl #2
   190a0:	ldrdeq	r9, [r1], -r4
   190a4:	andeq	r9, r1, ip, ror #3
   190a8:	andeq	r9, r1, ip, lsl #2
   190ac:	andeq	r9, r1, ip, lsl #2
   190b0:	andeq	r9, r1, ip, lsl #2
   190b4:	strdeq	r9, [r1], -r8
   190b8:	andeq	r9, r1, ip, lsl #2
   190bc:	andeq	r9, r1, ip, lsl #2
   190c0:	andeq	r9, r1, ip, lsl #2
   190c4:	andeq	r9, r1, ip, lsr r1
   190c8:	andeq	r9, r1, ip, lsl #2
   190cc:	andeq	r9, r1, r0, asr r1
   190d0:	andeq	r9, r1, ip, lsl #2
   190d4:	andeq	r9, r1, ip, lsl #2
   190d8:	andeq	r9, r1, ip, lsl #2
   190dc:	andeq	r9, r1, ip, lsl #2
   190e0:	andeq	r9, r1, ip, lsl #2
   190e4:	andeq	r9, r1, ip, lsl #2
   190e8:	andeq	r9, r1, r4, ror #2
   190ec:	andeq	r9, r1, ip, lsl #2
   190f0:	andeq	r9, r1, ip, lsl #2
   190f4:	andeq	r9, r1, r0, ror #3
   190f8:	add	r0, sp, #4
   190fc:	mov	r1, r5
   19100:	mov	r2, #3
   19104:	bl	19268 <__assert_fail@plt+0x7a64>
   19108:	b	191ec <__assert_fail@plt+0x79e8>
   1910c:	ldr	r0, [sp, #4]
   19110:	ldr	r1, [sp]
   19114:	str	r0, [r1]
   19118:	orr	r8, r8, #2
   1911c:	b	19214 <__assert_fail@plt+0x7a10>
   19120:	cmp	r0, #105	; 0x69
   19124:	bne	19008 <__assert_fail@plt+0x7804>
   19128:	ldrb	r0, [r7, #2]
   1912c:	mov	r6, #1
   19130:	cmp	r0, #66	; 0x42
   19134:	movweq	r6, #3
   19138:	b	19008 <__assert_fail@plt+0x7804>
   1913c:	add	r0, sp, #4
   19140:	mov	r1, r5
   19144:	mov	r2, #1
   19148:	bl	19268 <__assert_fail@plt+0x7a64>
   1914c:	b	191ec <__assert_fail@plt+0x79e8>
   19150:	add	r0, sp, #4
   19154:	mov	r1, r5
   19158:	mov	r2, #2
   1915c:	bl	19268 <__assert_fail@plt+0x7a64>
   19160:	b	191ec <__assert_fail@plt+0x79e8>
   19164:	add	r0, sp, #4
   19168:	mov	r1, r5
   1916c:	mov	r2, #4
   19170:	bl	19268 <__assert_fail@plt+0x7a64>
   19174:	b	191ec <__assert_fail@plt+0x79e8>
   19178:	add	r0, sp, #4
   1917c:	mov	r1, r5
   19180:	mov	r2, #7
   19184:	bl	19268 <__assert_fail@plt+0x7a64>
   19188:	b	191ec <__assert_fail@plt+0x79e8>
   1918c:	add	r0, sp, #4
   19190:	mov	r1, #1024	; 0x400
   19194:	b	191e8 <__assert_fail@plt+0x79e4>
   19198:	add	r0, sp, #4
   1919c:	mov	r1, r5
   191a0:	mov	r2, #6
   191a4:	bl	19268 <__assert_fail@plt+0x7a64>
   191a8:	b	191ec <__assert_fail@plt+0x79e8>
   191ac:	add	r0, sp, #4
   191b0:	mov	r1, r5
   191b4:	mov	r2, #5
   191b8:	bl	19268 <__assert_fail@plt+0x7a64>
   191bc:	b	191ec <__assert_fail@plt+0x79e8>
   191c0:	add	r0, sp, #4
   191c4:	mov	r1, r5
   191c8:	mov	r2, #8
   191cc:	bl	19268 <__assert_fail@plt+0x7a64>
   191d0:	b	191ec <__assert_fail@plt+0x79e8>
   191d4:	add	r0, sp, #4
   191d8:	mov	r1, #512	; 0x200
   191dc:	b	191e8 <__assert_fail@plt+0x79e4>
   191e0:	add	r0, sp, #4
   191e4:	mov	r1, #2
   191e8:	bl	19240 <__assert_fail@plt+0x7a3c>
   191ec:	ldr	r1, [r9]
   191f0:	add	r2, r1, r6
   191f4:	str	r2, [r9]
   191f8:	ldrb	r1, [r1, r6]
   191fc:	orr	r8, r0, r8
   19200:	cmp	r1, #0
   19204:	orrne	r8, r8, #2
   19208:	ldr	r0, [sp, #4]
   1920c:	ldr	r1, [sp]
   19210:	str	r0, [r1]
   19214:	mov	r0, r8
   19218:	sub	sp, fp, #28
   1921c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19220:	movw	r0, #50007	; 0xc357
   19224:	movt	r0, #1
   19228:	movw	r1, #50045	; 0xc37d
   1922c:	movt	r1, #1
   19230:	movw	r3, #50057	; 0xc389
   19234:	movt	r3, #1
   19238:	mov	r2, #84	; 0x54
   1923c:	bl	11804 <__assert_fail@plt>
   19240:	mvn	r2, #0
   19244:	udiv	r2, r2, r1
   19248:	ldr	r3, [r0]
   1924c:	mul	r1, r3, r1
   19250:	cmp	r2, r3
   19254:	mvncc	r1, #0
   19258:	str	r1, [r0]
   1925c:	mov	r0, #0
   19260:	movwcc	r0, #1
   19264:	bx	lr
   19268:	push	{r4, r5, r6, r7, fp, lr}
   1926c:	add	fp, sp, #16
   19270:	cmp	r2, #0
   19274:	moveq	r6, #0
   19278:	moveq	r0, r6
   1927c:	popeq	{r4, r5, r6, r7, fp, pc}
   19280:	mov	r4, r2
   19284:	mov	r5, r1
   19288:	mov	r7, r0
   1928c:	mov	r6, #0
   19290:	mov	r0, r7
   19294:	mov	r1, r5
   19298:	bl	19240 <__assert_fail@plt+0x7a3c>
   1929c:	orr	r6, r0, r6
   192a0:	subs	r4, r4, #1
   192a4:	bne	19290 <__assert_fail@plt+0x7a8c>
   192a8:	mov	r0, r6
   192ac:	pop	{r4, r5, r6, r7, fp, pc}
   192b0:	clz	r2, r1
   192b4:	lsr	r2, r2, #5
   192b8:	clz	r3, r0
   192bc:	lsr	r3, r3, #5
   192c0:	orrs	r2, r3, r2
   192c4:	movwne	r1, #1
   192c8:	movwne	r0, #1
   192cc:	cmp	r1, #0
   192d0:	beq	19300 <__assert_fail@plt+0x7afc>
   192d4:	mvn	r2, #-2147483648	; 0x80000000
   192d8:	udiv	r2, r2, r1
   192dc:	cmp	r2, r0
   192e0:	bcs	19300 <__assert_fail@plt+0x7afc>
   192e4:	push	{fp, lr}
   192e8:	mov	fp, sp
   192ec:	bl	11684 <__errno_location@plt>
   192f0:	mov	r1, #12
   192f4:	str	r1, [r0]
   192f8:	mov	r0, #0
   192fc:	pop	{fp, pc}
   19300:	b	11438 <calloc@plt>
   19304:	sub	sp, sp, #8
   19308:	push	{fp, lr}
   1930c:	mov	fp, sp
   19310:	sub	sp, sp, #8
   19314:	str	r3, [fp, #12]
   19318:	str	r2, [fp, #8]
   1931c:	add	r2, fp, #8
   19320:	str	r2, [sp, #4]
   19324:	cmp	r1, #11
   19328:	bhi	19368 <__assert_fail@plt+0x7b64>
   1932c:	mov	r2, #1
   19330:	movw	r3, #1300	; 0x514
   19334:	tst	r3, r2, lsl r1
   19338:	bne	193b8 <__assert_fail@plt+0x7bb4>
   1933c:	movw	r3, #2570	; 0xa0a
   19340:	tst	r3, r2, lsl r1
   19344:	bne	19390 <__assert_fail@plt+0x7b8c>
   19348:	cmp	r1, #0
   1934c:	bne	19368 <__assert_fail@plt+0x7b64>
   19350:	ldr	r1, [sp, #4]
   19354:	add	r2, r1, #4
   19358:	str	r2, [sp, #4]
   1935c:	ldr	r1, [r1]
   19360:	bl	193dc <__assert_fail@plt+0x7bd8>
   19364:	b	193cc <__assert_fail@plt+0x7bc8>
   19368:	sub	r2, r1, #1024	; 0x400
   1936c:	cmp	r2, #10
   19370:	bhi	193b8 <__assert_fail@plt+0x7bb4>
   19374:	mov	ip, #1
   19378:	movw	r3, #645	; 0x285
   1937c:	tst	r3, ip, lsl r2
   19380:	bne	193b8 <__assert_fail@plt+0x7bb4>
   19384:	movw	r3, #1282	; 0x502
   19388:	tst	r3, ip, lsl r2
   1938c:	beq	19398 <__assert_fail@plt+0x7b94>
   19390:	bl	11714 <fcntl64@plt>
   19394:	b	193cc <__assert_fail@plt+0x7bc8>
   19398:	cmp	r2, #6
   1939c:	bne	193b8 <__assert_fail@plt+0x7bb4>
   193a0:	ldr	r1, [sp, #4]
   193a4:	add	r2, r1, #4
   193a8:	str	r2, [sp, #4]
   193ac:	ldr	r1, [r1]
   193b0:	bl	193e8 <__assert_fail@plt+0x7be4>
   193b4:	b	193cc <__assert_fail@plt+0x7bc8>
   193b8:	ldr	r2, [sp, #4]
   193bc:	add	r3, r2, #4
   193c0:	str	r3, [sp, #4]
   193c4:	ldr	r2, [r2]
   193c8:	bl	11714 <fcntl64@plt>
   193cc:	mov	sp, fp
   193d0:	pop	{fp, lr}
   193d4:	add	sp, sp, #8
   193d8:	bx	lr
   193dc:	mov	r2, r1
   193e0:	mov	r1, #0
   193e4:	b	11714 <fcntl64@plt>
   193e8:	push	{r4, r5, r6, r7, fp, lr}
   193ec:	add	fp, sp, #16
   193f0:	mov	r5, r1
   193f4:	mov	r6, r0
   193f8:	movw	r7, #54248	; 0xd3e8
   193fc:	movt	r7, #2
   19400:	ldr	r0, [r7]
   19404:	cmp	r0, #0
   19408:	blt	1946c <__assert_fail@plt+0x7c68>
   1940c:	mov	r0, r6
   19410:	movw	r1, #1030	; 0x406
   19414:	mov	r2, r5
   19418:	bl	11714 <fcntl64@plt>
   1941c:	mov	r4, r0
   19420:	cmn	r0, #1
   19424:	bgt	19458 <__assert_fail@plt+0x7c54>
   19428:	bl	11684 <__errno_location@plt>
   1942c:	ldr	r0, [r0]
   19430:	cmp	r0, #22
   19434:	bne	19458 <__assert_fail@plt+0x7c54>
   19438:	mov	r0, r6
   1943c:	mov	r1, r5
   19440:	bl	193dc <__assert_fail@plt+0x7bd8>
   19444:	mov	r4, r0
   19448:	cmp	r0, #0
   1944c:	blt	194bc <__assert_fail@plt+0x7cb8>
   19450:	mvn	r0, #0
   19454:	b	1945c <__assert_fail@plt+0x7c58>
   19458:	mov	r0, #1
   1945c:	str	r0, [r7]
   19460:	cmp	r4, #0
   19464:	bge	19484 <__assert_fail@plt+0x7c80>
   19468:	b	194bc <__assert_fail@plt+0x7cb8>
   1946c:	mov	r0, r6
   19470:	mov	r1, r5
   19474:	bl	193dc <__assert_fail@plt+0x7bd8>
   19478:	mov	r4, r0
   1947c:	cmp	r4, #0
   19480:	blt	194bc <__assert_fail@plt+0x7cb8>
   19484:	ldr	r0, [r7]
   19488:	cmn	r0, #1
   1948c:	bne	194bc <__assert_fail@plt+0x7cb8>
   19490:	mov	r0, r4
   19494:	mov	r1, #1
   19498:	bl	11714 <fcntl64@plt>
   1949c:	cmp	r0, #0
   194a0:	blt	194c4 <__assert_fail@plt+0x7cc0>
   194a4:	orr	r2, r0, #1
   194a8:	mov	r0, r4
   194ac:	mov	r1, #2
   194b0:	bl	11714 <fcntl64@plt>
   194b4:	cmn	r0, #1
   194b8:	beq	194c4 <__assert_fail@plt+0x7cc0>
   194bc:	mov	r0, r4
   194c0:	pop	{r4, r5, r6, r7, fp, pc}
   194c4:	bl	11684 <__errno_location@plt>
   194c8:	mov	r5, r0
   194cc:	ldr	r6, [r0]
   194d0:	mov	r0, r4
   194d4:	bl	117ec <close@plt>
   194d8:	str	r6, [r5]
   194dc:	mvn	r4, #0
   194e0:	mov	r0, r4
   194e4:	pop	{r4, r5, r6, r7, fp, pc}
   194e8:	push	{r4, sl, fp, lr}
   194ec:	add	fp, sp, #8
   194f0:	mov	r4, r0
   194f4:	cmp	r0, #0
   194f8:	beq	19510 <__assert_fail@plt+0x7d0c>
   194fc:	mov	r0, r4
   19500:	bl	11600 <__freading@plt>
   19504:	cmp	r0, #0
   19508:	movne	r0, r4
   1950c:	blne	1951c <__assert_fail@plt+0x7d18>
   19510:	mov	r0, r4
   19514:	pop	{r4, sl, fp, lr}
   19518:	b	11474 <fflush@plt>
   1951c:	ldrb	r1, [r0, #1]
   19520:	tst	r1, #1
   19524:	bxeq	lr
   19528:	push	{fp, lr}
   1952c:	mov	fp, sp
   19530:	sub	sp, sp, #8
   19534:	mov	r1, #1
   19538:	str	r1, [sp]
   1953c:	mov	r2, #0
   19540:	mov	r3, #0
   19544:	bl	195b4 <__assert_fail@plt+0x7db0>
   19548:	mov	sp, fp
   1954c:	pop	{fp, pc}
   19550:	ldrd	r2, [r0, #16]
   19554:	mov	r1, #0
   19558:	cmp	r3, r2
   1955c:	bhi	19584 <__assert_fail@plt+0x7d80>
   19560:	ldmib	r0, {r1, r2}
   19564:	sub	r1, r2, r1
   19568:	ldrb	r3, [r0, #1]
   1956c:	mov	r2, #0
   19570:	tst	r3, #1
   19574:	ldrne	r2, [r0, #36]	; 0x24
   19578:	ldrne	r0, [r0, #44]	; 0x2c
   1957c:	subne	r2, r0, r2
   19580:	add	r1, r1, r2
   19584:	mov	r0, r1
   19588:	bx	lr
   1958c:	push	{r4, r5, r6, sl, fp, lr}
   19590:	add	fp, sp, #16
   19594:	mov	r4, r0
   19598:	bl	11684 <__errno_location@plt>
   1959c:	mov	r5, r0
   195a0:	ldr	r6, [r0]
   195a4:	mov	r0, r4
   195a8:	bl	1148c <free@plt>
   195ac:	str	r6, [r5]
   195b0:	pop	{r4, r5, r6, sl, fp, pc}
   195b4:	push	{r4, r5, r6, r7, fp, lr}
   195b8:	add	fp, sp, #16
   195bc:	sub	sp, sp, #8
   195c0:	mov	r5, r3
   195c4:	mov	r6, r2
   195c8:	mov	r4, r0
   195cc:	ldr	r0, [r0, #4]
   195d0:	ldr	r1, [r4, #8]
   195d4:	cmp	r1, r0
   195d8:	bne	195f4 <__assert_fail@plt+0x7df0>
   195dc:	ldrd	r0, [r4, #16]
   195e0:	cmp	r1, r0
   195e4:	bne	195f4 <__assert_fail@plt+0x7df0>
   195e8:	ldr	r0, [r4, #36]	; 0x24
   195ec:	cmp	r0, #0
   195f0:	beq	1960c <__assert_fail@plt+0x7e08>
   195f4:	mov	r0, r4
   195f8:	mov	r2, r6
   195fc:	mov	r3, r5
   19600:	sub	sp, fp, #16
   19604:	pop	{r4, r5, r6, r7, fp, lr}
   19608:	b	11708 <fseeko64@plt>
   1960c:	ldr	r7, [fp, #8]
   19610:	mov	r0, r4
   19614:	bl	116cc <fileno@plt>
   19618:	str	r7, [sp]
   1961c:	mov	r2, r6
   19620:	mov	r3, r5
   19624:	bl	11570 <lseek64@plt>
   19628:	and	r2, r0, r1
   1962c:	cmn	r2, #1
   19630:	mvneq	r0, #0
   19634:	subeq	sp, fp, #16
   19638:	popeq	{r4, r5, r6, r7, fp, pc}
   1963c:	strd	r0, [r4, #80]	; 0x50
   19640:	ldr	r0, [r4]
   19644:	bic	r0, r0, #16
   19648:	str	r0, [r4]
   1964c:	mov	r0, #0
   19650:	sub	sp, fp, #16
   19654:	pop	{r4, r5, r6, r7, fp, pc}
   19658:	cmp	r0, #0
   1965c:	movweq	r0, #1
   19660:	cmn	r0, #1
   19664:	ble	1966c <__assert_fail@plt+0x7e68>
   19668:	b	115e8 <malloc@plt>
   1966c:	push	{fp, lr}
   19670:	mov	fp, sp
   19674:	bl	11684 <__errno_location@plt>
   19678:	mov	r1, #12
   1967c:	str	r1, [r0]
   19680:	mov	r0, #0
   19684:	pop	{fp, pc}
   19688:	push	{r4, r5, r6, r7, fp, lr}
   1968c:	add	fp, sp, #16
   19690:	sub	sp, sp, #8
   19694:	mov	r7, r2
   19698:	mov	r4, r1
   1969c:	add	r5, sp, #4
   196a0:	cmp	r0, #0
   196a4:	movne	r5, r0
   196a8:	mov	r0, r5
   196ac:	bl	115ac <mbrtowc@plt>
   196b0:	mov	r6, r0
   196b4:	cmp	r7, #0
   196b8:	beq	196dc <__assert_fail@plt+0x7ed8>
   196bc:	cmn	r6, #2
   196c0:	bcc	196dc <__assert_fail@plt+0x7ed8>
   196c4:	mov	r0, #0
   196c8:	bl	19b24 <__assert_fail@plt+0x8320>
   196cc:	cmp	r0, #0
   196d0:	ldrbeq	r0, [r4]
   196d4:	streq	r0, [r5]
   196d8:	moveq	r6, #1
   196dc:	mov	r0, r6
   196e0:	sub	sp, fp, #16
   196e4:	pop	{r4, r5, r6, r7, fp, pc}
   196e8:	push	{fp, lr}
   196ec:	mov	fp, sp
   196f0:	cmp	r0, #0
   196f4:	beq	19710 <__assert_fail@plt+0x7f0c>
   196f8:	cmp	r1, #0
   196fc:	beq	1971c <__assert_fail@plt+0x7f18>
   19700:	cmn	r1, #1
   19704:	ble	19728 <__assert_fail@plt+0x7f24>
   19708:	pop	{fp, lr}
   1970c:	b	1151c <realloc@plt>
   19710:	mov	r0, r1
   19714:	pop	{fp, lr}
   19718:	b	19658 <__assert_fail@plt+0x7e54>
   1971c:	bl	1958c <__assert_fail@plt+0x7d88>
   19720:	mov	r0, #0
   19724:	pop	{fp, pc}
   19728:	bl	11684 <__errno_location@plt>
   1972c:	mov	r1, #12
   19730:	str	r1, [r0]
   19734:	mov	r0, #0
   19738:	pop	{fp, pc}
   1973c:	cmp	r2, #0
   19740:	beq	19770 <__assert_fail@plt+0x7f6c>
   19744:	mvn	r3, #0
   19748:	udiv	r3, r3, r2
   1974c:	cmp	r3, r1
   19750:	bcs	19770 <__assert_fail@plt+0x7f6c>
   19754:	push	{fp, lr}
   19758:	mov	fp, sp
   1975c:	bl	11684 <__errno_location@plt>
   19760:	mov	r1, #12
   19764:	str	r1, [r0]
   19768:	mov	r0, #0
   1976c:	pop	{fp, pc}
   19770:	mul	r1, r2, r1
   19774:	b	196e8 <__assert_fail@plt+0x7ee4>
   19778:	mov	r1, r0
   1977c:	sub	r2, r0, #65	; 0x41
   19780:	mov	r0, #1
   19784:	cmp	r2, #26
   19788:	subcs	r2, r1, #97	; 0x61
   1978c:	cmpcs	r2, #26
   19790:	bcs	19798 <__assert_fail@plt+0x7f94>
   19794:	bx	lr
   19798:	sub	r1, r1, #48	; 0x30
   1979c:	cmp	r1, #10
   197a0:	movcs	r0, #0
   197a4:	bx	lr
   197a8:	mov	r1, r0
   197ac:	sub	r2, r0, #65	; 0x41
   197b0:	mov	r0, #1
   197b4:	cmp	r2, #26
   197b8:	subcs	r1, r1, #97	; 0x61
   197bc:	cmpcs	r1, #26
   197c0:	movcs	r0, #0
   197c4:	bx	lr
   197c8:	mov	r1, #0
   197cc:	cmp	r0, #128	; 0x80
   197d0:	movwcc	r1, #1
   197d4:	mov	r0, r1
   197d8:	bx	lr
   197dc:	sub	r1, r0, #9
   197e0:	clz	r1, r1
   197e4:	lsr	r1, r1, #5
   197e8:	sub	r0, r0, #32
   197ec:	clz	r0, r0
   197f0:	lsr	r0, r0, #5
   197f4:	orr	r0, r0, r1
   197f8:	bx	lr
   197fc:	mov	r1, r0
   19800:	mov	r0, #1
   19804:	cmp	r1, #32
   19808:	bxcc	lr
   1980c:	cmp	r1, #127	; 0x7f
   19810:	movne	r0, #0
   19814:	bx	lr
   19818:	sub	r1, r0, #48	; 0x30
   1981c:	mov	r0, #0
   19820:	cmp	r1, #10
   19824:	movwcc	r0, #1
   19828:	bx	lr
   1982c:	sub	r1, r0, #33	; 0x21
   19830:	mov	r0, #0
   19834:	cmp	r1, #94	; 0x5e
   19838:	movwcc	r0, #1
   1983c:	bx	lr
   19840:	sub	r1, r0, #97	; 0x61
   19844:	mov	r0, #0
   19848:	cmp	r1, #26
   1984c:	movwcc	r0, #1
   19850:	bx	lr
   19854:	sub	r1, r0, #32
   19858:	mov	r0, #0
   1985c:	cmp	r1, #95	; 0x5f
   19860:	movwcc	r0, #1
   19864:	bx	lr
   19868:	sub	r1, r0, #33	; 0x21
   1986c:	cmp	r1, #93	; 0x5d
   19870:	bhi	199fc <__assert_fail@plt+0x81f8>
   19874:	mov	r0, #1
   19878:	add	r2, pc, #0
   1987c:	ldr	pc, [r2, r1, lsl #2]
   19880:	strdeq	r9, [r1], -r8
   19884:	strdeq	r9, [r1], -r8
   19888:	strdeq	r9, [r1], -r8
   1988c:	strdeq	r9, [r1], -r8
   19890:	strdeq	r9, [r1], -r8
   19894:	strdeq	r9, [r1], -r8
   19898:	strdeq	r9, [r1], -r8
   1989c:	strdeq	r9, [r1], -r8
   198a0:	strdeq	r9, [r1], -r8
   198a4:	strdeq	r9, [r1], -r8
   198a8:	strdeq	r9, [r1], -r8
   198ac:	strdeq	r9, [r1], -r8
   198b0:	strdeq	r9, [r1], -r8
   198b4:	strdeq	r9, [r1], -r8
   198b8:	strdeq	r9, [r1], -r8
   198bc:	strdeq	r9, [r1], -ip
   198c0:	strdeq	r9, [r1], -ip
   198c4:	strdeq	r9, [r1], -ip
   198c8:	strdeq	r9, [r1], -ip
   198cc:	strdeq	r9, [r1], -ip
   198d0:	strdeq	r9, [r1], -ip
   198d4:	strdeq	r9, [r1], -ip
   198d8:	strdeq	r9, [r1], -ip
   198dc:	strdeq	r9, [r1], -ip
   198e0:	strdeq	r9, [r1], -ip
   198e4:	strdeq	r9, [r1], -r8
   198e8:	strdeq	r9, [r1], -r8
   198ec:	strdeq	r9, [r1], -r8
   198f0:	strdeq	r9, [r1], -r8
   198f4:	strdeq	r9, [r1], -r8
   198f8:	strdeq	r9, [r1], -r8
   198fc:	strdeq	r9, [r1], -r8
   19900:	strdeq	r9, [r1], -ip
   19904:	strdeq	r9, [r1], -ip
   19908:	strdeq	r9, [r1], -ip
   1990c:	strdeq	r9, [r1], -ip
   19910:	strdeq	r9, [r1], -ip
   19914:	strdeq	r9, [r1], -ip
   19918:	strdeq	r9, [r1], -ip
   1991c:	strdeq	r9, [r1], -ip
   19920:	strdeq	r9, [r1], -ip
   19924:	strdeq	r9, [r1], -ip
   19928:	strdeq	r9, [r1], -ip
   1992c:	strdeq	r9, [r1], -ip
   19930:	strdeq	r9, [r1], -ip
   19934:	strdeq	r9, [r1], -ip
   19938:	strdeq	r9, [r1], -ip
   1993c:	strdeq	r9, [r1], -ip
   19940:	strdeq	r9, [r1], -ip
   19944:	strdeq	r9, [r1], -ip
   19948:	strdeq	r9, [r1], -ip
   1994c:	strdeq	r9, [r1], -ip
   19950:	strdeq	r9, [r1], -ip
   19954:	strdeq	r9, [r1], -ip
   19958:	strdeq	r9, [r1], -ip
   1995c:	strdeq	r9, [r1], -ip
   19960:	strdeq	r9, [r1], -ip
   19964:	strdeq	r9, [r1], -ip
   19968:	strdeq	r9, [r1], -r8
   1996c:	strdeq	r9, [r1], -r8
   19970:	strdeq	r9, [r1], -r8
   19974:	strdeq	r9, [r1], -r8
   19978:	strdeq	r9, [r1], -r8
   1997c:	strdeq	r9, [r1], -r8
   19980:	strdeq	r9, [r1], -ip
   19984:	strdeq	r9, [r1], -ip
   19988:	strdeq	r9, [r1], -ip
   1998c:	strdeq	r9, [r1], -ip
   19990:	strdeq	r9, [r1], -ip
   19994:	strdeq	r9, [r1], -ip
   19998:	strdeq	r9, [r1], -ip
   1999c:	strdeq	r9, [r1], -ip
   199a0:	strdeq	r9, [r1], -ip
   199a4:	strdeq	r9, [r1], -ip
   199a8:	strdeq	r9, [r1], -ip
   199ac:	strdeq	r9, [r1], -ip
   199b0:	strdeq	r9, [r1], -ip
   199b4:	strdeq	r9, [r1], -ip
   199b8:	strdeq	r9, [r1], -ip
   199bc:	strdeq	r9, [r1], -ip
   199c0:	strdeq	r9, [r1], -ip
   199c4:	strdeq	r9, [r1], -ip
   199c8:	strdeq	r9, [r1], -ip
   199cc:	strdeq	r9, [r1], -ip
   199d0:	strdeq	r9, [r1], -ip
   199d4:	strdeq	r9, [r1], -ip
   199d8:	strdeq	r9, [r1], -ip
   199dc:	strdeq	r9, [r1], -ip
   199e0:	strdeq	r9, [r1], -ip
   199e4:	strdeq	r9, [r1], -ip
   199e8:	strdeq	r9, [r1], -r8
   199ec:	strdeq	r9, [r1], -r8
   199f0:	strdeq	r9, [r1], -r8
   199f4:	strdeq	r9, [r1], -r8
   199f8:	bx	lr
   199fc:	mov	r0, #0
   19a00:	bx	lr
   19a04:	sub	r0, r0, #9
   19a08:	cmp	r0, #23
   19a0c:	movhi	r0, #0
   19a10:	bxhi	lr
   19a14:	bic	r0, r0, #-16777216	; 0xff000000
   19a18:	movw	r1, #31
   19a1c:	movt	r1, #128	; 0x80
   19a20:	mov	r2, #1
   19a24:	and	r0, r2, r1, lsr r0
   19a28:	bx	lr
   19a2c:	sub	r1, r0, #65	; 0x41
   19a30:	mov	r0, #0
   19a34:	cmp	r1, #26
   19a38:	movwcc	r0, #1
   19a3c:	bx	lr
   19a40:	mov	r1, r0
   19a44:	sub	r2, r0, #48	; 0x30
   19a48:	mov	r0, #1
   19a4c:	cmp	r2, #22
   19a50:	bhi	19a68 <__assert_fail@plt+0x8264>
   19a54:	mov	ip, #1
   19a58:	movw	r3, #1023	; 0x3ff
   19a5c:	movt	r3, #126	; 0x7e
   19a60:	tst	r3, ip, lsl r2
   19a64:	bxne	lr
   19a68:	sub	r1, r1, #97	; 0x61
   19a6c:	cmp	r1, #6
   19a70:	movcs	r0, #0
   19a74:	bxcs	lr
   19a78:	bx	lr
   19a7c:	sub	r1, r0, #65	; 0x41
   19a80:	cmp	r1, #26
   19a84:	addcc	r0, r0, #32
   19a88:	bx	lr
   19a8c:	sub	r1, r0, #97	; 0x61
   19a90:	cmp	r1, #26
   19a94:	subcc	r0, r0, #32
   19a98:	bx	lr
   19a9c:	push	{r4, r5, r6, sl, fp, lr}
   19aa0:	add	fp, sp, #16
   19aa4:	mov	r4, r0
   19aa8:	bl	115a0 <__fpending@plt>
   19aac:	mov	r5, r0
   19ab0:	mov	r0, r4
   19ab4:	bl	11498 <ferror@plt>
   19ab8:	mov	r6, r0
   19abc:	mov	r0, r4
   19ac0:	bl	116e4 <fclose@plt>
   19ac4:	cmp	r6, #0
   19ac8:	beq	19ae8 <__assert_fail@plt+0x82e4>
   19acc:	mvn	r4, #0
   19ad0:	cmp	r0, #0
   19ad4:	bne	19b1c <__assert_fail@plt+0x8318>
   19ad8:	bl	11684 <__errno_location@plt>
   19adc:	mov	r1, #0
   19ae0:	str	r1, [r0]
   19ae4:	b	19b1c <__assert_fail@plt+0x8318>
   19ae8:	cmp	r0, #0
   19aec:	mov	r4, r0
   19af0:	mvnne	r4, #0
   19af4:	cmp	r5, #0
   19af8:	bne	19b1c <__assert_fail@plt+0x8318>
   19afc:	cmp	r0, #0
   19b00:	beq	19b1c <__assert_fail@plt+0x8318>
   19b04:	bl	11684 <__errno_location@plt>
   19b08:	ldr	r0, [r0]
   19b0c:	subs	r4, r0, #9
   19b10:	mvnne	r4, #0
   19b14:	mov	r0, r4
   19b18:	pop	{r4, r5, r6, sl, fp, pc}
   19b1c:	mov	r0, r4
   19b20:	pop	{r4, r5, r6, sl, fp, pc}
   19b24:	push	{r4, sl, fp, lr}
   19b28:	add	fp, sp, #8
   19b2c:	sub	sp, sp, #264	; 0x108
   19b30:	add	r1, sp, #7
   19b34:	movw	r2, #257	; 0x101
   19b38:	bl	19e00 <__assert_fail@plt+0x85fc>
   19b3c:	mov	r4, #0
   19b40:	cmp	r0, #0
   19b44:	bne	19b7c <__assert_fail@plt+0x8378>
   19b48:	add	r0, sp, #7
   19b4c:	movw	r1, #50138	; 0xc3da
   19b50:	movt	r1, #1
   19b54:	bl	11444 <strcmp@plt>
   19b58:	cmp	r0, #0
   19b5c:	beq	19b7c <__assert_fail@plt+0x8378>
   19b60:	add	r0, sp, #7
   19b64:	movw	r1, #50140	; 0xc3dc
   19b68:	movt	r1, #1
   19b6c:	bl	11444 <strcmp@plt>
   19b70:	mov	r4, r0
   19b74:	cmp	r0, #0
   19b78:	movwne	r4, #1
   19b7c:	mov	r0, r4
   19b80:	sub	sp, fp, #8
   19b84:	pop	{r4, sl, fp, pc}
   19b88:	push	{fp, lr}
   19b8c:	mov	fp, sp
   19b90:	bl	11684 <__errno_location@plt>
   19b94:	mov	r1, #12
   19b98:	str	r1, [r0]
   19b9c:	mov	r0, #0
   19ba0:	pop	{fp, pc}
   19ba4:	b	19658 <__assert_fail@plt+0x7e54>
   19ba8:	cmp	r1, #0
   19bac:	orreq	r1, r1, #1
   19bb0:	b	196e8 <__assert_fail@plt+0x7ee4>
   19bb4:	b	192b0 <__assert_fail@plt+0x7aac>
   19bb8:	clz	r3, r2
   19bbc:	lsr	ip, r3, #5
   19bc0:	clz	r3, r1
   19bc4:	lsr	r3, r3, #5
   19bc8:	orrs	r3, r3, ip
   19bcc:	movwne	r1, #1
   19bd0:	movwne	r2, #1
   19bd4:	b	1973c <__assert_fail@plt+0x7f38>
   19bd8:	push	{fp, lr}
   19bdc:	mov	fp, sp
   19be0:	mov	r0, #14
   19be4:	bl	11750 <nl_langinfo@plt>
   19be8:	movw	r1, #44138	; 0xac6a
   19bec:	movt	r1, #1
   19bf0:	cmp	r0, #0
   19bf4:	movne	r1, r0
   19bf8:	ldrb	r2, [r1]
   19bfc:	movw	r0, #50146	; 0xc3e2
   19c00:	movt	r0, #1
   19c04:	cmp	r2, #0
   19c08:	movne	r0, r1
   19c0c:	pop	{fp, pc}
   19c10:	push	{r4, sl, fp, lr}
   19c14:	add	fp, sp, #8
   19c18:	mov	r4, #0
   19c1c:	adds	r0, r0, #16
   19c20:	adc	r1, r4, #0
   19c24:	rsb	r2, r1, #0
   19c28:	eors	r2, r2, r1
   19c2c:	movwne	r2, #1
   19c30:	cmp	r0, #0
   19c34:	blt	19c54 <__assert_fail@plt+0x8450>
   19c38:	cmp	r2, #0
   19c3c:	asreq	r2, r0, #31
   19c40:	eoreq	r3, r0, r0
   19c44:	andeq	r2, r2, #1
   19c48:	eoreq	r1, r1, r2
   19c4c:	orrseq	r1, r3, r1
   19c50:	beq	19c5c <__assert_fail@plt+0x8458>
   19c54:	mov	r0, r4
   19c58:	pop	{r4, sl, fp, pc}
   19c5c:	bl	115e8 <malloc@plt>
   19c60:	cmp	r0, #0
   19c64:	addne	r4, r0, #8
   19c68:	movne	r1, #8
   19c6c:	bfine	r4, r1, #0, #4
   19c70:	subne	r0, r4, r0
   19c74:	strbne	r0, [r4, #-1]
   19c78:	mov	r0, r4
   19c7c:	pop	{r4, sl, fp, pc}
   19c80:	tst	r0, #7
   19c84:	bne	19c9c <__assert_fail@plt+0x8498>
   19c88:	tst	r0, #8
   19c8c:	bxeq	lr
   19c90:	ldrb	r1, [r0, #-1]
   19c94:	sub	r0, r0, r1
   19c98:	b	1958c <__assert_fail@plt+0x7d88>
   19c9c:	push	{fp, lr}
   19ca0:	mov	fp, sp
   19ca4:	bl	117d4 <abort@plt>
   19ca8:	push	{r4, sl, fp, lr}
   19cac:	add	fp, sp, #8
   19cb0:	mov	r4, r0
   19cb4:	bl	11480 <wcwidth@plt>
   19cb8:	cmn	r0, #1
   19cbc:	popgt	{r4, sl, fp, pc}
   19cc0:	mov	r0, r4
   19cc4:	bl	11534 <iswcntrl@plt>
   19cc8:	clz	r0, r0
   19ccc:	lsr	r0, r0, #5
   19cd0:	pop	{r4, sl, fp, pc}
   19cd4:	push	{r4, r5, r6, sl, fp, lr}
   19cd8:	add	fp, sp, #16
   19cdc:	mov	r5, r1
   19ce0:	mov	r4, r0
   19ce4:	ldr	r6, [r1], #16
   19ce8:	cmp	r6, r1
   19cec:	bne	19d00 <__assert_fail@plt+0x84fc>
   19cf0:	ldr	r2, [r5, #4]
   19cf4:	add	r6, r4, #16
   19cf8:	mov	r0, r6
   19cfc:	bl	114b0 <memcpy@plt>
   19d00:	str	r6, [r4]
   19d04:	ldr	r0, [r5, #4]
   19d08:	str	r0, [r4, #4]
   19d0c:	ldrb	r0, [r5, #8]
   19d10:	strb	r0, [r4, #8]
   19d14:	cmp	r0, #0
   19d18:	ldrne	r0, [r5, #12]
   19d1c:	strne	r0, [r4, #12]
   19d20:	pop	{r4, r5, r6, sl, fp, pc}
   19d24:	ubfx	r1, r0, #5, #3
   19d28:	movw	r2, #50152	; 0xc3e8
   19d2c:	movt	r2, #1
   19d30:	ldr	r1, [r2, r1, lsl #2]
   19d34:	and	r0, r0, #31
   19d38:	mov	r2, #1
   19d3c:	and	r0, r1, r2, lsl r0
   19d40:	cmp	r0, #0
   19d44:	movwne	r0, #1
   19d48:	bx	lr
   19d4c:	push	{r4, r5, r6, sl, fp, lr}
   19d50:	add	fp, sp, #16
   19d54:	sub	sp, sp, #56	; 0x38
   19d58:	mov	r5, r0
   19d5c:	bl	11588 <__ctype_get_mb_cur_max@plt>
   19d60:	cmp	r0, #2
   19d64:	bcc	19df0 <__assert_fail@plt+0x85ec>
   19d68:	mov	r4, #0
   19d6c:	str	r4, [sp, #8]
   19d70:	str	r4, [sp, #4]
   19d74:	strb	r4, [sp]
   19d78:	str	r5, [sp, #16]
   19d7c:	strb	r4, [sp, #12]
   19d80:	mov	r0, sp
   19d84:	bl	165b8 <__assert_fail@plt+0x4db4>
   19d88:	ldrb	r0, [sp, #24]
   19d8c:	cmp	r0, #0
   19d90:	beq	19da0 <__assert_fail@plt+0x859c>
   19d94:	ldr	r0, [sp, #28]
   19d98:	cmp	r0, #0
   19d9c:	beq	19de4 <__assert_fail@plt+0x85e0>
   19da0:	mov	r6, #0
   19da4:	mov	r5, sp
   19da8:	mov	r4, #0
   19dac:	strb	r6, [sp, #12]
   19db0:	ldr	r0, [sp, #16]
   19db4:	ldr	r1, [sp, #20]
   19db8:	add	r0, r0, r1
   19dbc:	str	r0, [sp, #16]
   19dc0:	mov	r0, r5
   19dc4:	bl	165b8 <__assert_fail@plt+0x4db4>
   19dc8:	add	r4, r4, #1
   19dcc:	ldr	r0, [sp, #28]
   19dd0:	ldrb	r1, [sp, #24]
   19dd4:	cmp	r1, #0
   19dd8:	beq	19dac <__assert_fail@plt+0x85a8>
   19ddc:	cmp	r0, #0
   19de0:	bne	19dac <__assert_fail@plt+0x85a8>
   19de4:	mov	r0, r4
   19de8:	sub	sp, fp, #16
   19dec:	pop	{r4, r5, r6, sl, fp, pc}
   19df0:	mov	r0, r5
   19df4:	sub	sp, fp, #16
   19df8:	pop	{r4, r5, r6, sl, fp, lr}
   19dfc:	b	11654 <strlen@plt>
   19e00:	b	19e04 <__assert_fail@plt+0x8600>
   19e04:	push	{r4, r5, r6, r7, fp, lr}
   19e08:	add	fp, sp, #16
   19e0c:	mov	r6, r2
   19e10:	mov	r4, r1
   19e14:	bl	19ea0 <__assert_fail@plt+0x869c>
   19e18:	cmp	r0, #0
   19e1c:	beq	19e4c <__assert_fail@plt+0x8648>
   19e20:	mov	r7, r0
   19e24:	bl	11654 <strlen@plt>
   19e28:	cmp	r0, r6
   19e2c:	bcs	19e6c <__assert_fail@plt+0x8668>
   19e30:	add	r2, r0, #1
   19e34:	mov	r0, r4
   19e38:	mov	r1, r7
   19e3c:	bl	114b0 <memcpy@plt>
   19e40:	mov	r5, #0
   19e44:	mov	r0, r5
   19e48:	pop	{r4, r5, r6, r7, fp, pc}
   19e4c:	mov	r5, #22
   19e50:	cmp	r6, #0
   19e54:	movne	r0, #0
   19e58:	strbne	r0, [r4]
   19e5c:	movne	r0, r5
   19e60:	popne	{r4, r5, r6, r7, fp, pc}
   19e64:	mov	r0, r5
   19e68:	pop	{r4, r5, r6, r7, fp, pc}
   19e6c:	mov	r5, #34	; 0x22
   19e70:	cmp	r6, #0
   19e74:	beq	19e94 <__assert_fail@plt+0x8690>
   19e78:	sub	r6, r6, #1
   19e7c:	mov	r0, r4
   19e80:	mov	r1, r7
   19e84:	mov	r2, r6
   19e88:	bl	114b0 <memcpy@plt>
   19e8c:	mov	r0, #0
   19e90:	strb	r0, [r4, r6]
   19e94:	mov	r0, r5
   19e98:	pop	{r4, r5, r6, r7, fp, pc}
   19e9c:	b	19ea0 <__assert_fail@plt+0x869c>
   19ea0:	mov	r1, #0
   19ea4:	b	11720 <setlocale@plt>
   19ea8:	mov	r1, #0
   19eac:	mov	r2, #3
   19eb0:	b	19304 <__assert_fail@plt+0x7b00>
   19eb4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19eb8:	mov	r7, r0
   19ebc:	ldr	r6, [pc, #72]	; 19f0c <__assert_fail@plt+0x8708>
   19ec0:	ldr	r5, [pc, #72]	; 19f10 <__assert_fail@plt+0x870c>
   19ec4:	add	r6, pc, r6
   19ec8:	add	r5, pc, r5
   19ecc:	sub	r6, r6, r5
   19ed0:	mov	r8, r1
   19ed4:	mov	r9, r2
   19ed8:	bl	1140c <fdopen@plt-0x20>
   19edc:	asrs	r6, r6, #2
   19ee0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ee4:	mov	r4, #0
   19ee8:	add	r4, r4, #1
   19eec:	ldr	r3, [r5], #4
   19ef0:	mov	r2, r9
   19ef4:	mov	r1, r8
   19ef8:	mov	r0, r7
   19efc:	blx	r3
   19f00:	cmp	r6, r4
   19f04:	bne	19ee8 <__assert_fail@plt+0x86e4>
   19f08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f0c:	andeq	r3, r1, r0, asr #32
   19f10:	andeq	r3, r1, r8, lsr r0
   19f14:	bx	lr
   19f18:	ldr	r3, [pc, #12]	; 19f2c <__assert_fail@plt+0x8728>
   19f1c:	mov	r1, #0
   19f20:	add	r3, pc, r3
   19f24:	ldr	r2, [r3]
   19f28:	b	1169c <__cxa_atexit@plt>
   19f2c:	andeq	r3, r1, ip, lsr r2

Disassembly of section .fini:

00019f30 <.fini>:
   19f30:	push	{r3, lr}
   19f34:	pop	{r3, pc}
