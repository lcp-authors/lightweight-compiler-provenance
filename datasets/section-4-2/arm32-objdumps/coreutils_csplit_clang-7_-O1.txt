
../repos/coreutils/src/csplit:     file format elf32-littlearm


Disassembly of section .init:

000113a0 <.init>:
   113a0:	push	{r3, lr}
   113a4:	bl	117bc <__assert_fail@plt+0x48>
   113a8:	pop	{r3, pc}

Disassembly of section .plt:

000113ac <pthread_mutex_unlock@plt-0x14>:
   113ac:	push	{lr}		; (str lr, [sp, #-4]!)
   113b0:	ldr	lr, [pc, #4]	; 113bc <pthread_mutex_unlock@plt-0x4>
   113b4:	add	lr, pc, lr
   113b8:	ldr	pc, [lr, #8]!
   113bc:	andeq	r4, r2, r4, asr #24

000113c0 <pthread_mutex_unlock@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #36, 20	; 0x24000
   113c8:	ldr	pc, [ip, #3140]!	; 0xc44

000113cc <fdopen@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #36, 20	; 0x24000
   113d4:	ldr	pc, [ip, #3132]!	; 0xc3c

000113d8 <calloc@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #36, 20	; 0x24000
   113e0:	ldr	pc, [ip, #3124]!	; 0xc34

000113e4 <fputs_unlocked@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #36, 20	; 0x24000
   113ec:	ldr	pc, [ip, #3116]!	; 0xc2c

000113f0 <wctype@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #36, 20	; 0x24000
   113f8:	ldr	pc, [ip, #3108]!	; 0xc24

000113fc <raise@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #36, 20	; 0x24000
   11404:	ldr	pc, [ip, #3100]!	; 0xc1c

00011408 <wcrtomb@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #36, 20	; 0x24000
   11410:	ldr	pc, [ip, #3092]!	; 0xc14

00011414 <iswctype@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #36, 20	; 0x24000
   1141c:	ldr	pc, [ip, #3084]!	; 0xc0c

00011420 <strcmp@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #36, 20	; 0x24000
   11428:	ldr	pc, [ip, #3076]!	; 0xc04

0001142c <read@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #36, 20	; 0x24000
   11434:	ldr	pc, [ip, #3068]!	; 0xbfc

00011438 <pthread_mutex_destroy@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #36, 20	; 0x24000
   11440:	ldr	pc, [ip, #3060]!	; 0xbf4

00011444 <fflush@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #36, 20	; 0x24000
   1144c:	ldr	pc, [ip, #3052]!	; 0xbec

00011450 <sigprocmask@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #36, 20	; 0x24000
   11458:	ldr	pc, [ip, #3044]!	; 0xbe4

0001145c <memmove@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #36, 20	; 0x24000
   11464:	ldr	pc, [ip, #3036]!	; 0xbdc

00011468 <free@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #36, 20	; 0x24000
   11470:	ldr	pc, [ip, #3028]!	; 0xbd4

00011474 <pthread_mutex_lock@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #36, 20	; 0x24000
   1147c:	ldr	pc, [ip, #3020]!	; 0xbcc

00011480 <_exit@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #36, 20	; 0x24000
   11488:	ldr	pc, [ip, #3012]!	; 0xbc4

0001148c <memcpy@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #36, 20	; 0x24000
   11494:	ldr	pc, [ip, #3004]!	; 0xbbc

00011498 <tolower@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #36, 20	; 0x24000
   114a0:	ldr	pc, [ip, #2996]!	; 0xbb4

000114a4 <pthread_mutex_init@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #36, 20	; 0x24000
   114ac:	ldr	pc, [ip, #2988]!	; 0xbac

000114b0 <towlower@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #36, 20	; 0x24000
   114b8:	ldr	pc, [ip, #2980]!	; 0xba4

000114bc <mbsinit@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #36, 20	; 0x24000
   114c4:	ldr	pc, [ip, #2972]!	; 0xb9c

000114c8 <signal@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #36, 20	; 0x24000
   114d0:	ldr	pc, [ip, #2964]!	; 0xb94

000114d4 <fwrite_unlocked@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #36, 20	; 0x24000
   114dc:	ldr	pc, [ip, #2956]!	; 0xb8c

000114e0 <memcmp@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #36, 20	; 0x24000
   114e8:	ldr	pc, [ip, #2948]!	; 0xb84

000114ec <dcgettext@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #36, 20	; 0x24000
   114f4:	ldr	pc, [ip, #2940]!	; 0xb7c

000114f8 <unlink@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #36, 20	; 0x24000
   11500:	ldr	pc, [ip, #2932]!	; 0xb74

00011504 <dup2@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #36, 20	; 0x24000
   1150c:	ldr	pc, [ip, #2924]!	; 0xb6c

00011510 <realloc@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #36, 20	; 0x24000
   11518:	ldr	pc, [ip, #2916]!	; 0xb64

0001151c <sigismember@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #36, 20	; 0x24000
   11524:	ldr	pc, [ip, #2908]!	; 0xb5c

00011528 <textdomain@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #36, 20	; 0x24000
   11530:	ldr	pc, [ip, #2900]!	; 0xb54

00011534 <rawmemchr@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #36, 20	; 0x24000
   1153c:	ldr	pc, [ip, #2892]!	; 0xb4c

00011540 <iswprint@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #36, 20	; 0x24000
   11548:	ldr	pc, [ip, #2884]!	; 0xb44

0001154c <sigaction@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #36, 20	; 0x24000
   11554:	ldr	pc, [ip, #2876]!	; 0xb3c

00011558 <fwrite@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #36, 20	; 0x24000
   11560:	ldr	pc, [ip, #2868]!	; 0xb34

00011564 <lseek64@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #36, 20	; 0x24000
   1156c:	ldr	pc, [ip, #2860]!	; 0xb2c

00011570 <__ctype_get_mb_cur_max@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #36, 20	; 0x24000
   11578:	ldr	pc, [ip, #2852]!	; 0xb24

0001157c <strcpy@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #36, 20	; 0x24000
   11584:	ldr	pc, [ip, #2844]!	; 0xb1c

00011588 <__fpending@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #36, 20	; 0x24000
   11590:	ldr	pc, [ip, #2836]!	; 0xb14

00011594 <ferror_unlocked@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #36, 20	; 0x24000
   1159c:	ldr	pc, [ip, #2828]!	; 0xb0c

000115a0 <mbrtowc@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #36, 20	; 0x24000
   115a8:	ldr	pc, [ip, #2820]!	; 0xb04

000115ac <error@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #36, 20	; 0x24000
   115b4:	ldr	pc, [ip, #2812]!	; 0xafc

000115b8 <open64@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #36, 20	; 0x24000
   115c0:	ldr	pc, [ip, #2804]!	; 0xaf4

000115c4 <malloc@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #36, 20	; 0x24000
   115cc:	ldr	pc, [ip, #2796]!	; 0xaec

000115d0 <sigaddset@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #36, 20	; 0x24000
   115d8:	ldr	pc, [ip, #2788]!	; 0xae4

000115dc <__libc_start_main@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #36, 20	; 0x24000
   115e4:	ldr	pc, [ip, #2780]!	; 0xadc

000115e8 <__freading@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #36, 20	; 0x24000
   115f0:	ldr	pc, [ip, #2772]!	; 0xad4

000115f4 <__gmon_start__@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #36, 20	; 0x24000
   115fc:	ldr	pc, [ip, #2764]!	; 0xacc

00011600 <getopt_long@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #36, 20	; 0x24000
   11608:	ldr	pc, [ip, #2756]!	; 0xac4

0001160c <__ctype_b_loc@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #36, 20	; 0x24000
   11614:	ldr	pc, [ip, #2748]!	; 0xabc

00011618 <exit@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #36, 20	; 0x24000
   11620:	ldr	pc, [ip, #2740]!	; 0xab4

00011624 <strlen@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #36, 20	; 0x24000
   1162c:	ldr	pc, [ip, #2732]!	; 0xaac

00011630 <strchr@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #36, 20	; 0x24000
   11638:	ldr	pc, [ip, #2724]!	; 0xaa4

0001163c <__errno_location@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #36, 20	; 0x24000
   11644:	ldr	pc, [ip, #2716]!	; 0xa9c

00011648 <iswalnum@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #36, 20	; 0x24000
   11650:	ldr	pc, [ip, #2708]!	; 0xa94

00011654 <__sprintf_chk@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #36, 20	; 0x24000
   1165c:	ldr	pc, [ip, #2700]!	; 0xa8c

00011660 <__cxa_atexit@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #36, 20	; 0x24000
   11668:	ldr	pc, [ip, #2692]!	; 0xa84

0001166c <memset@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #36, 20	; 0x24000
   11674:	ldr	pc, [ip, #2684]!	; 0xa7c

00011678 <btowc@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #36, 20	; 0x24000
   11680:	ldr	pc, [ip, #2676]!	; 0xa74

00011684 <__printf_chk@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #36, 20	; 0x24000
   1168c:	ldr	pc, [ip, #2668]!	; 0xa6c

00011690 <fileno@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #36, 20	; 0x24000
   11698:	ldr	pc, [ip, #2660]!	; 0xa64

0001169c <strtoumax@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #36, 20	; 0x24000
   116a4:	ldr	pc, [ip, #2652]!	; 0xa5c

000116a8 <__fprintf_chk@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #36, 20	; 0x24000
   116b0:	ldr	pc, [ip, #2644]!	; 0xa54

000116b4 <strtoimax@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #36, 20	; 0x24000
   116bc:	ldr	pc, [ip, #2636]!	; 0xa4c

000116c0 <fclose@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #36, 20	; 0x24000
   116c8:	ldr	pc, [ip, #2628]!	; 0xa44

000116cc <fseeko64@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #36, 20	; 0x24000
   116d4:	ldr	pc, [ip, #2620]!	; 0xa3c

000116d8 <fcntl64@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #36, 20	; 0x24000
   116e0:	ldr	pc, [ip, #2612]!	; 0xa34

000116e4 <setlocale@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #36, 20	; 0x24000
   116ec:	ldr	pc, [ip, #2604]!	; 0xa2c

000116f0 <sigemptyset@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #36, 20	; 0x24000
   116f8:	ldr	pc, [ip, #2596]!	; 0xa24

000116fc <toupper@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #36, 20	; 0x24000
   11704:	ldr	pc, [ip, #2588]!	; 0xa1c

00011708 <strrchr@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #36, 20	; 0x24000
   11710:	ldr	pc, [ip, #2580]!	; 0xa14

00011714 <nl_langinfo@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #36, 20	; 0x24000
   1171c:	ldr	pc, [ip, #2572]!	; 0xa0c

00011720 <fopen64@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #36, 20	; 0x24000
   11728:	ldr	pc, [ip, #2564]!	; 0xa04

0001172c <bindtextdomain@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #36, 20	; 0x24000
   11734:	ldr	pc, [ip, #2556]!	; 0x9fc

00011738 <towupper@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #36, 20	; 0x24000
   11740:	ldr	pc, [ip, #2548]!	; 0x9f4

00011744 <strncmp@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #36, 20	; 0x24000
   1174c:	ldr	pc, [ip, #2540]!	; 0x9ec

00011750 <abort@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #36, 20	; 0x24000
   11758:	ldr	pc, [ip, #2532]!	; 0x9e4

0001175c <close@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #36, 20	; 0x24000
   11764:	ldr	pc, [ip, #2524]!	; 0x9dc

00011768 <__snprintf_chk@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #36, 20	; 0x24000
   11770:	ldr	pc, [ip, #2516]!	; 0x9d4

00011774 <__assert_fail@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #36, 20	; 0x24000
   1177c:	ldr	pc, [ip, #2508]!	; 0x9cc

Disassembly of section .text:

00011780 <.text>:
   11780:	mov	fp, #0
   11784:	mov	lr, #0
   11788:	pop	{r1}		; (ldr r1, [sp], #4)
   1178c:	mov	r2, sp
   11790:	push	{r2}		; (str r2, [sp, #-4]!)
   11794:	push	{r0}		; (str r0, [sp, #-4]!)
   11798:	ldr	ip, [pc, #16]	; 117b0 <__assert_fail@plt+0x3c>
   1179c:	push	{ip}		; (str ip, [sp, #-4]!)
   117a0:	ldr	r0, [pc, #12]	; 117b4 <__assert_fail@plt+0x40>
   117a4:	ldr	r3, [pc, #12]	; 117b8 <__assert_fail@plt+0x44>
   117a8:	bl	115dc <__libc_start_main@plt>
   117ac:	bl	11750 <abort@plt>
   117b0:	andeq	r4, r2, r0, lsl sl
   117b4:			; <UNDEFINED> instruction: 0x000118bc
   117b8:			; <UNDEFINED> instruction: 0x000249b0
   117bc:	ldr	r3, [pc, #20]	; 117d8 <__assert_fail@plt+0x64>
   117c0:	ldr	r2, [pc, #20]	; 117dc <__assert_fail@plt+0x68>
   117c4:	add	r3, pc, r3
   117c8:	ldr	r2, [r3, r2]
   117cc:	cmp	r2, #0
   117d0:	bxeq	lr
   117d4:	b	115f4 <__gmon_start__@plt>
   117d8:	andeq	r4, r2, r4, lsr r8
   117dc:	andeq	r0, r0, ip, asr #2
   117e0:	ldr	r0, [pc, #24]	; 11800 <__assert_fail@plt+0x8c>
   117e4:	ldr	r3, [pc, #24]	; 11804 <__assert_fail@plt+0x90>
   117e8:	cmp	r3, r0
   117ec:	bxeq	lr
   117f0:	ldr	r3, [pc, #16]	; 11808 <__assert_fail@plt+0x94>
   117f4:	cmp	r3, #0
   117f8:	bxeq	lr
   117fc:	bx	r3
   11800:	andeq	r6, r3, r8, lsr #3
   11804:	andeq	r6, r3, r8, lsr #3
   11808:	andeq	r0, r0, r0
   1180c:	ldr	r0, [pc, #36]	; 11838 <__assert_fail@plt+0xc4>
   11810:	ldr	r1, [pc, #36]	; 1183c <__assert_fail@plt+0xc8>
   11814:	sub	r1, r1, r0
   11818:	asr	r1, r1, #2
   1181c:	add	r1, r1, r1, lsr #31
   11820:	asrs	r1, r1, #1
   11824:	bxeq	lr
   11828:	ldr	r3, [pc, #16]	; 11840 <__assert_fail@plt+0xcc>
   1182c:	cmp	r3, #0
   11830:	bxeq	lr
   11834:	bx	r3
   11838:	andeq	r6, r3, r8, lsr #3
   1183c:	andeq	r6, r3, r8, lsr #3
   11840:	andeq	r0, r0, r0
   11844:	push	{r4, lr}
   11848:	ldr	r4, [pc, #24]	; 11868 <__assert_fail@plt+0xf4>
   1184c:	ldrb	r3, [r4]
   11850:	cmp	r3, #0
   11854:	popne	{r4, pc}
   11858:	bl	117e0 <__assert_fail@plt+0x6c>
   1185c:	mov	r3, #1
   11860:	strb	r3, [r4]
   11864:	pop	{r4, pc}
   11868:	andeq	r6, r3, r4, asr #3
   1186c:	b	1180c <__assert_fail@plt+0x98>
   11870:	push	{fp, lr}
   11874:	mov	fp, sp
   11878:	movw	r1, #19004	; 0x4a3c
   1187c:	movt	r1, #2
   11880:	mov	r0, #0
   11884:	mov	r2, #5
   11888:	bl	114ec <dcgettext@plt>
   1188c:	mov	r3, r0
   11890:	movw	r2, #20951	; 0x51d7
   11894:	movt	r2, #2
   11898:	mov	r0, #0
   1189c:	mov	r1, #0
   118a0:	bl	115ac <error@plt>
   118a4:	bl	118a8 <__assert_fail@plt+0x134>
   118a8:	push	{fp, lr}
   118ac:	mov	fp, sp
   118b0:	bl	12548 <__assert_fail@plt+0xdd4>
   118b4:	mov	r0, #1
   118b8:	bl	11618 <exit@plt>
   118bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118c0:	add	fp, sp, #28
   118c4:	sub	sp, sp, #164	; 0xa4
   118c8:	mov	r4, r1
   118cc:	mov	r5, r0
   118d0:	ldr	r0, [r1]
   118d4:	bl	14090 <__assert_fail@plt+0x291c>
   118d8:	movw	r1, #20411	; 0x4fbb
   118dc:	movt	r1, #2
   118e0:	mov	r0, #6
   118e4:	bl	116e4 <setlocale@plt>
   118e8:	movw	r6, #19085	; 0x4a8d
   118ec:	movt	r6, #2
   118f0:	movw	r1, #19021	; 0x4a4d
   118f4:	movt	r1, #2
   118f8:	mov	r0, r6
   118fc:	bl	1172c <bindtextdomain@plt>
   11900:	mov	r0, r6
   11904:	bl	11528 <textdomain@plt>
   11908:	movw	r0, #15352	; 0x3bf8
   1190c:	movt	r0, #1
   11910:	bl	24a14 <__assert_fail@plt+0x132a0>
   11914:	movw	r8, #25045	; 0x61d5
   11918:	movt	r8, #3
   1191c:	mov	r7, #1
   11920:	strb	r7, [r8]
   11924:	movw	r0, #25032	; 0x61c8
   11928:	movt	r0, #3
   1192c:	str	r4, [r0]
   11930:	movw	r0, #25036	; 0x61cc
   11934:	movt	r0, #3
   11938:	mov	r9, #0
   1193c:	str	r9, [r0]
   11940:	movw	r0, #25040	; 0x61d0
   11944:	movt	r0, #3
   11948:	str	r9, [r0]
   1194c:	movw	r0, #25044	; 0x61d4
   11950:	movt	r0, #3
   11954:	strb	r9, [r0]
   11958:	movw	r0, #25046	; 0x61d6
   1195c:	movt	r0, #3
   11960:	strb	r9, [r0]
   11964:	movw	r1, #25048	; 0x61d8
   11968:	movt	r1, #3
   1196c:	movw	r0, #19045	; 0x4a65
   11970:	movt	r0, #2
   11974:	str	r0, [r1]
   11978:	movw	sl, #19048	; 0x4a68
   1197c:	movt	sl, #2
   11980:	movw	r6, #21768	; 0x5508
   11984:	movt	r6, #2
   11988:	b	11998 <__assert_fail@plt+0x224>
   1198c:	movw	r0, #25044	; 0x61d4
   11990:	movt	r0, #3
   11994:	strb	r7, [r0]
   11998:	str	r9, [sp]
   1199c:	mov	r0, r5
   119a0:	mov	r1, r4
   119a4:	mov	r2, sl
   119a8:	mov	r3, r6
   119ac:	bl	11600 <getopt_long@plt>
   119b0:	cmp	r0, #97	; 0x61
   119b4:	ble	11af8 <__assert_fail@plt+0x384>
   119b8:	sub	r1, r0, #98	; 0x62
   119bc:	cmp	r1, #24
   119c0:	bhi	11a4c <__assert_fail@plt+0x2d8>
   119c4:	add	r0, pc, #0
   119c8:	ldr	pc, [r0, r1, lsl #2]
   119cc:	andeq	r1, r1, r0, lsr sl
   119d0:	andeq	r1, r1, r8, asr sp
   119d4:	andeq	r1, r1, r8, asr sp
   119d8:	andeq	r1, r1, r8, asr sp
   119dc:	ldrdeq	r1, [r1], -ip
   119e0:	andeq	r1, r1, r8, asr sp
   119e4:	andeq	r1, r1, r8, asr sp
   119e8:	andeq	r1, r1, r8, asr sp
   119ec:	andeq	r1, r1, r8, asr sp
   119f0:	ldrdeq	r1, [r1], -r4
   119f4:	andeq	r1, r1, r8, asr sp
   119f8:	andeq	r1, r1, r8, asr sp
   119fc:	andeq	r1, r1, r4, ror #20
   11a00:	andeq	r1, r1, r8, asr sp
   11a04:	andeq	r1, r1, r8, asr sp
   11a08:	andeq	r1, r1, ip, lsl #19
   11a0c:	andeq	r1, r1, r8, asr sp
   11a10:	andeq	r1, r1, ip, lsl #19
   11a14:	andeq	r1, r1, r8, asr sp
   11a18:	andeq	r1, r1, r8, asr sp
   11a1c:	andeq	r1, r1, r8, asr sp
   11a20:	andeq	r1, r1, r8, asr sp
   11a24:	andeq	r1, r1, r8, asr sp
   11a28:	andeq	r1, r1, r8, asr sp
   11a2c:	andeq	r1, r1, r4, asr #21
   11a30:	movw	r0, #25024	; 0x61c0
   11a34:	movt	r0, #3
   11a38:	ldr	r0, [r0]
   11a3c:	movw	r1, #25052	; 0x61dc
   11a40:	movt	r1, #3
   11a44:	str	r0, [r1]
   11a48:	b	11998 <__assert_fail@plt+0x224>
   11a4c:	cmp	r0, #256	; 0x100
   11a50:	bne	11d58 <__assert_fail@plt+0x5e4>
   11a54:	movw	r0, #25046	; 0x61d6
   11a58:	movt	r0, #3
   11a5c:	strb	r7, [r0]
   11a60:	b	11998 <__assert_fail@plt+0x224>
   11a64:	movw	r0, #25024	; 0x61c0
   11a68:	movt	r0, #3
   11a6c:	ldr	r7, [r0]
   11a70:	mov	r0, #0
   11a74:	movw	r1, #19059	; 0x4a73
   11a78:	movt	r1, #2
   11a7c:	mov	r2, #5
   11a80:	bl	114ec <dcgettext@plt>
   11a84:	mvn	r1, #-2147483648	; 0x80000000
   11a88:	stm	sp, {r1, r9}
   11a8c:	movw	r1, #20411	; 0x4fbb
   11a90:	movt	r1, #2
   11a94:	str	r1, [sp, #8]
   11a98:	str	r0, [sp, #12]
   11a9c:	str	r9, [sp, #16]
   11aa0:	mov	r0, r7
   11aa4:	mov	r7, #1
   11aa8:	mov	r2, #0
   11aac:	mov	r3, #0
   11ab0:	bl	23344 <__assert_fail@plt+0x11bd0>
   11ab4:	movw	r1, #24920	; 0x6158
   11ab8:	movt	r1, #3
   11abc:	str	r0, [r1]
   11ac0:	b	11998 <__assert_fail@plt+0x224>
   11ac4:	movw	r0, #25056	; 0x61e0
   11ac8:	movt	r0, #3
   11acc:	strb	r7, [r0]
   11ad0:	b	11998 <__assert_fail@plt+0x224>
   11ad4:	strb	r9, [r8]
   11ad8:	b	11998 <__assert_fail@plt+0x224>
   11adc:	movw	r0, #25024	; 0x61c0
   11ae0:	movt	r0, #3
   11ae4:	ldr	r0, [r0]
   11ae8:	movw	r1, #25048	; 0x61d8
   11aec:	movt	r1, #3
   11af0:	str	r0, [r1]
   11af4:	b	11998 <__assert_fail@plt+0x224>
   11af8:	cmn	r0, #1
   11afc:	bne	11cac <__assert_fail@plt+0x538>
   11b00:	movw	r7, #25008	; 0x61b0
   11b04:	movt	r7, #3
   11b08:	ldr	r0, [r7]
   11b0c:	sub	r1, r5, r0
   11b10:	cmp	r1, #1
   11b14:	ble	11d18 <__assert_fail@plt+0x5a4>
   11b18:	movw	r0, #25048	; 0x61d8
   11b1c:	movt	r0, #3
   11b20:	ldr	r0, [r0]
   11b24:	bl	11624 <strlen@plt>
   11b28:	mov	r6, r0
   11b2c:	movw	r1, #25052	; 0x61dc
   11b30:	movt	r1, #3
   11b34:	ldr	r0, [r1]
   11b38:	cmp	r0, #0
   11b3c:	beq	11b4c <__assert_fail@plt+0x3d8>
   11b40:	ldr	r0, [r1]
   11b44:	bl	11f0c <__assert_fail@plt+0x798>
   11b48:	b	11b64 <__assert_fail@plt+0x3f0>
   11b4c:	movw	r2, #24920	; 0x6158
   11b50:	movt	r2, #3
   11b54:	ldr	r1, [r2]
   11b58:	mov	r0, #11
   11b5c:	cmp	r1, #11
   11b60:	ldrcs	r0, [r2]
   11b64:	add	r0, r6, r0
   11b68:	add	r0, r0, #1
   11b6c:	cmp	r0, r6
   11b70:	bvs	11d60 <__assert_fail@plt+0x5ec>
   11b74:	bl	22eb8 <__assert_fail@plt+0x11744>
   11b78:	movw	r1, #25060	; 0x61e4
   11b7c:	movt	r1, #3
   11b80:	str	r0, [r1]
   11b84:	ldr	r0, [r7]
   11b88:	add	r1, r0, #1
   11b8c:	str	r1, [r7]
   11b90:	ldr	r0, [r4, r0, lsl #2]
   11b94:	bl	1201c <__assert_fail@plt+0x8a8>
   11b98:	ldr	r1, [r7]
   11b9c:	mov	r0, r5
   11ba0:	mov	r2, r4
   11ba4:	bl	1209c <__assert_fail@plt+0x928>
   11ba8:	movw	r8, #25064	; 0x61e8
   11bac:	movt	r8, #3
   11bb0:	mov	r0, r8
   11bb4:	bl	116f0 <sigemptyset@plt>
   11bb8:	mov	r5, #0
   11bbc:	movw	r7, #21944	; 0x55b8
   11bc0:	movt	r7, #2
   11bc4:	add	r4, sp, #24
   11bc8:	ldr	r6, [r7, r5, lsl #2]
   11bcc:	mov	r0, r6
   11bd0:	mov	r1, #0
   11bd4:	mov	r2, r4
   11bd8:	bl	1154c <sigaction@plt>
   11bdc:	ldr	r0, [sp, #24]
   11be0:	cmp	r0, #1
   11be4:	beq	11bf4 <__assert_fail@plt+0x480>
   11be8:	mov	r0, r8
   11bec:	mov	r1, r6
   11bf0:	bl	115d0 <sigaddset@plt>
   11bf4:	add	r5, r5, #1
   11bf8:	cmp	r5, #11
   11bfc:	bne	11bc8 <__assert_fail@plt+0x454>
   11c00:	movw	r0, #8844	; 0x228c
   11c04:	movt	r0, #1
   11c08:	str	r0, [sp, #24]
   11c0c:	add	r0, r4, #4
   11c10:	movw	r8, #25064	; 0x61e8
   11c14:	movt	r8, #3
   11c18:	mov	r1, r8
   11c1c:	mov	r2, #128	; 0x80
   11c20:	bl	1148c <memcpy@plt>
   11c24:	mov	r5, #0
   11c28:	str	r5, [sp, #156]	; 0x9c
   11c2c:	ldr	r6, [r7, r5, lsl #2]
   11c30:	mov	r0, r8
   11c34:	mov	r1, r6
   11c38:	bl	1151c <sigismember@plt>
   11c3c:	cmp	r0, #0
   11c40:	beq	11c54 <__assert_fail@plt+0x4e0>
   11c44:	mov	r0, r6
   11c48:	mov	r1, r4
   11c4c:	mov	r2, #0
   11c50:	bl	1154c <sigaction@plt>
   11c54:	add	r5, r5, #1
   11c58:	cmp	r5, #11
   11c5c:	bne	11c2c <__assert_fail@plt+0x4b8>
   11c60:	bl	122b8 <__assert_fail@plt+0xb44>
   11c64:	mov	r0, #0
   11c68:	bl	1175c <close@plt>
   11c6c:	cmp	r0, #0
   11c70:	moveq	r0, #0
   11c74:	subeq	sp, fp, #28
   11c78:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c7c:	bl	1163c <__errno_location@plt>
   11c80:	ldr	r4, [r0]
   11c84:	movw	r1, #19164	; 0x4adc
   11c88:	movt	r1, #2
   11c8c:	mov	r0, #0
   11c90:	mov	r2, #5
   11c94:	bl	114ec <dcgettext@plt>
   11c98:	mov	r2, r0
   11c9c:	mov	r0, #0
   11ca0:	mov	r1, r4
   11ca4:	bl	115ac <error@plt>
   11ca8:	bl	118a8 <__assert_fail@plt+0x134>
   11cac:	cmn	r0, #3
   11cb0:	bne	11d08 <__assert_fail@plt+0x594>
   11cb4:	movw	r0, #24924	; 0x615c
   11cb8:	movt	r0, #3
   11cbc:	ldr	r3, [r0]
   11cc0:	movw	r0, #25020	; 0x61bc
   11cc4:	movt	r0, #3
   11cc8:	ldr	r0, [r0]
   11ccc:	mov	r1, #0
   11cd0:	movw	r2, #19107	; 0x4aa3
   11cd4:	movt	r2, #2
   11cd8:	movw	r7, #19095	; 0x4a97
   11cdc:	movt	r7, #2
   11ce0:	str	r7, [sp]
   11ce4:	str	r2, [sp, #4]
   11ce8:	str	r1, [sp, #8]
   11cec:	movw	r1, #19074	; 0x4a82
   11cf0:	movt	r1, #2
   11cf4:	movw	r2, #19081	; 0x4a89
   11cf8:	movt	r2, #2
   11cfc:	bl	22d88 <__assert_fail@plt+0x11614>
   11d00:	mov	r0, #0
   11d04:	bl	11618 <exit@plt>
   11d08:	cmn	r0, #2
   11d0c:	bne	11d58 <__assert_fail@plt+0x5e4>
   11d10:	mov	r0, #0
   11d14:	bl	11d90 <__assert_fail@plt+0x61c>
   11d18:	cmp	r0, r5
   11d1c:	bge	11d64 <__assert_fail@plt+0x5f0>
   11d20:	movw	r1, #19139	; 0x4ac3
   11d24:	movt	r1, #2
   11d28:	mov	r0, #0
   11d2c:	mov	r2, #5
   11d30:	bl	114ec <dcgettext@plt>
   11d34:	mov	r6, r0
   11d38:	add	r0, r4, r5, lsl #2
   11d3c:	ldr	r0, [r0, #-4]
   11d40:	bl	158c8 <__assert_fail@plt+0x4154>
   11d44:	mov	r3, r0
   11d48:	mov	r0, #0
   11d4c:	mov	r1, #0
   11d50:	mov	r2, r6
   11d54:	bl	115ac <error@plt>
   11d58:	mov	r0, #1
   11d5c:	bl	11d90 <__assert_fail@plt+0x61c>
   11d60:	bl	11870 <__assert_fail@plt+0xfc>
   11d64:	movw	r1, #19123	; 0x4ab3
   11d68:	movt	r1, #2
   11d6c:	mov	r0, #0
   11d70:	mov	r2, #5
   11d74:	bl	114ec <dcgettext@plt>
   11d78:	mov	r2, r0
   11d7c:	mov	r0, #0
   11d80:	mov	r1, #0
   11d84:	bl	115ac <error@plt>
   11d88:	mov	r0, #1
   11d8c:	bl	11d90 <__assert_fail@plt+0x61c>
   11d90:	push	{fp, lr}
   11d94:	mov	fp, sp
   11d98:	mov	r4, r0
   11d9c:	cmp	r0, #0
   11da0:	bne	11ec8 <__assert_fail@plt+0x754>
   11da4:	movw	r1, #19214	; 0x4b0e
   11da8:	movt	r1, #2
   11dac:	mov	r0, #0
   11db0:	mov	r2, #5
   11db4:	bl	114ec <dcgettext@plt>
   11db8:	mov	r1, r0
   11dbc:	movw	r0, #25276	; 0x62bc
   11dc0:	movt	r0, #3
   11dc4:	ldr	r2, [r0]
   11dc8:	mov	r0, #1
   11dcc:	bl	11684 <__printf_chk@plt>
   11dd0:	movw	r1, #19253	; 0x4b35
   11dd4:	movt	r1, #2
   11dd8:	mov	r0, #0
   11ddc:	mov	r2, #5
   11de0:	bl	114ec <dcgettext@plt>
   11de4:	movw	r5, #25020	; 0x61bc
   11de8:	movt	r5, #3
   11dec:	ldr	r1, [r5]
   11df0:	bl	113e4 <fputs_unlocked@plt>
   11df4:	movw	r1, #19387	; 0x4bbb
   11df8:	movt	r1, #2
   11dfc:	mov	r0, #0
   11e00:	mov	r2, #5
   11e04:	bl	114ec <dcgettext@plt>
   11e08:	ldr	r1, [r5]
   11e0c:	bl	113e4 <fputs_unlocked@plt>
   11e10:	bl	12394 <__assert_fail@plt+0xc20>
   11e14:	movw	r1, #19422	; 0x4bde
   11e18:	movt	r1, #2
   11e1c:	mov	r0, #0
   11e20:	mov	r2, #5
   11e24:	bl	114ec <dcgettext@plt>
   11e28:	ldr	r1, [r5]
   11e2c:	bl	113e4 <fputs_unlocked@plt>
   11e30:	movw	r1, #19610	; 0x4c9a
   11e34:	movt	r1, #2
   11e38:	mov	r0, #0
   11e3c:	mov	r2, #5
   11e40:	bl	114ec <dcgettext@plt>
   11e44:	ldr	r1, [r5]
   11e48:	bl	113e4 <fputs_unlocked@plt>
   11e4c:	movw	r1, #19676	; 0x4cdc
   11e50:	movt	r1, #2
   11e54:	mov	r0, #0
   11e58:	mov	r2, #5
   11e5c:	bl	114ec <dcgettext@plt>
   11e60:	ldr	r1, [r5]
   11e64:	bl	113e4 <fputs_unlocked@plt>
   11e68:	movw	r1, #19875	; 0x4da3
   11e6c:	movt	r1, #2
   11e70:	mov	r0, #0
   11e74:	mov	r2, #5
   11e78:	bl	114ec <dcgettext@plt>
   11e7c:	ldr	r1, [r5]
   11e80:	bl	113e4 <fputs_unlocked@plt>
   11e84:	movw	r1, #19920	; 0x4dd0
   11e88:	movt	r1, #2
   11e8c:	mov	r0, #0
   11e90:	mov	r2, #5
   11e94:	bl	114ec <dcgettext@plt>
   11e98:	ldr	r1, [r5]
   11e9c:	bl	113e4 <fputs_unlocked@plt>
   11ea0:	movw	r1, #19974	; 0x4e06
   11ea4:	movt	r1, #2
   11ea8:	mov	r0, #0
   11eac:	mov	r2, #5
   11eb0:	bl	114ec <dcgettext@plt>
   11eb4:	ldr	r1, [r5]
   11eb8:	bl	113e4 <fputs_unlocked@plt>
   11ebc:	bl	123c4 <__assert_fail@plt+0xc50>
   11ec0:	mov	r0, r4
   11ec4:	bl	11618 <exit@plt>
   11ec8:	movw	r0, #25016	; 0x61b8
   11ecc:	movt	r0, #3
   11ed0:	ldr	r5, [r0]
   11ed4:	movw	r1, #19175	; 0x4ae7
   11ed8:	movt	r1, #2
   11edc:	mov	r0, #0
   11ee0:	mov	r2, #5
   11ee4:	bl	114ec <dcgettext@plt>
   11ee8:	mov	r2, r0
   11eec:	movw	r0, #25276	; 0x62bc
   11ef0:	movt	r0, #3
   11ef4:	ldr	r3, [r0]
   11ef8:	mov	r0, r5
   11efc:	mov	r1, #1
   11f00:	bl	116a8 <__fprintf_chk@plt>
   11f04:	mov	r0, r4
   11f08:	bl	11618 <exit@plt>
   11f0c:	push	{r4, r5, r6, r7, fp, lr}
   11f10:	add	fp, sp, #16
   11f14:	sub	sp, sp, #16
   11f18:	mov	r4, r0
   11f1c:	mov	r0, #0
   11f20:	add	r5, sp, #12
   11f24:	mov	r7, r4
   11f28:	b	11f34 <__assert_fail@plt+0x7c0>
   11f2c:	mov	r6, r7
   11f30:	add	r7, r7, #1
   11f34:	ldrb	r1, [r7]
   11f38:	cmp	r1, #37	; 0x25
   11f3c:	beq	11f4c <__assert_fail@plt+0x7d8>
   11f40:	cmp	r1, #0
   11f44:	bne	11f2c <__assert_fail@plt+0x7b8>
   11f48:	b	11fb4 <__assert_fail@plt+0x840>
   11f4c:	mov	r6, r7
   11f50:	ldrb	r1, [r6, #1]!
   11f54:	cmp	r1, #37	; 0x25
   11f58:	beq	11fac <__assert_fail@plt+0x838>
   11f5c:	tst	r0, #1
   11f60:	bne	11fec <__assert_fail@plt+0x878>
   11f64:	mov	r0, r6
   11f68:	mov	r1, r5
   11f6c:	bl	12894 <__assert_fail@plt+0x1120>
   11f70:	add	r6, r7, r0
   11f74:	ldrb	r0, [r6, #1]!
   11f78:	sub	r1, r0, #48	; 0x30
   11f7c:	cmp	r1, #10
   11f80:	bcc	11f74 <__assert_fail@plt+0x800>
   11f84:	cmp	r0, #46	; 0x2e
   11f88:	bne	11f9c <__assert_fail@plt+0x828>
   11f8c:	ldrb	r0, [r6, #1]!
   11f90:	sub	r0, r0, #48	; 0x30
   11f94:	cmp	r0, #10
   11f98:	bcc	11f8c <__assert_fail@plt+0x818>
   11f9c:	ldr	r1, [sp, #12]
   11fa0:	mov	r0, r6
   11fa4:	bl	1291c <__assert_fail@plt+0x11a8>
   11fa8:	mov	r0, #1
   11fac:	add	r7, r6, #1
   11fb0:	b	11f34 <__assert_fail@plt+0x7c0>
   11fb4:	tst	r0, #1
   11fb8:	beq	12010 <__assert_fail@plt+0x89c>
   11fbc:	mvn	r0, #-2147483648	; 0x80000000
   11fc0:	str	r4, [sp]
   11fc4:	str	r0, [sp, #4]
   11fc8:	mov	r0, #0
   11fcc:	mov	r1, #0
   11fd0:	mov	r2, #1
   11fd4:	mvn	r3, #0
   11fd8:	bl	11768 <__snprintf_chk@plt>
   11fdc:	cmn	r0, #1
   11fe0:	subgt	sp, fp, #16
   11fe4:	popgt	{r4, r5, r6, r7, fp, pc}
   11fe8:	bl	11870 <__assert_fail@plt+0xfc>
   11fec:	movw	r1, #20536	; 0x5038
   11ff0:	movt	r1, #2
   11ff4:	mov	r0, #0
   11ff8:	mov	r2, #5
   11ffc:	bl	114ec <dcgettext@plt>
   12000:	mov	r2, r0
   12004:	mov	r0, #1
   12008:	mov	r1, #0
   1200c:	bl	115ac <error@plt>
   12010:	movw	r1, #20584	; 0x5068
   12014:	movt	r1, #2
   12018:	b	11ff4 <__assert_fail@plt+0x880>
   1201c:	push	{r4, r5, r6, sl, fp, lr}
   12020:	add	fp, sp, #16
   12024:	mov	r4, r0
   12028:	movw	r1, #22148	; 0x5684
   1202c:	movt	r1, #2
   12030:	bl	11420 <strcmp@plt>
   12034:	cmp	r0, #0
   12038:	popeq	{r4, r5, r6, sl, fp, pc}
   1203c:	mov	r0, #0
   12040:	mov	r1, r4
   12044:	mov	r2, #0
   12048:	mov	r3, #0
   1204c:	bl	13d80 <__assert_fail@plt+0x260c>
   12050:	cmn	r0, #1
   12054:	ble	1205c <__assert_fail@plt+0x8e8>
   12058:	pop	{r4, r5, r6, sl, fp, pc}
   1205c:	bl	1163c <__errno_location@plt>
   12060:	ldr	r5, [r0]
   12064:	movw	r1, #20808	; 0x5148
   12068:	movt	r1, #2
   1206c:	mov	r0, #0
   12070:	mov	r2, #5
   12074:	bl	114ec <dcgettext@plt>
   12078:	mov	r6, r0
   1207c:	mov	r0, #4
   12080:	mov	r1, r4
   12084:	bl	156d4 <__assert_fail@plt+0x3f60>
   12088:	mov	r3, r0
   1208c:	mov	r0, #1
   12090:	mov	r1, r5
   12094:	mov	r2, r6
   12098:	bl	115ac <error@plt>
   1209c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120a0:	add	fp, sp, #28
   120a4:	sub	sp, sp, #44	; 0x2c
   120a8:	cmp	r1, r0
   120ac:	bge	121e0 <__assert_fail@plt+0xa6c>
   120b0:	mov	sl, r2
   120b4:	mov	r4, r1
   120b8:	mov	r6, r0
   120bc:	add	r9, sp, #32
   120c0:	movw	r8, #25216	; 0x6280
   120c4:	movt	r8, #3
   120c8:	ldr	r2, [sl, r4, lsl #2]
   120cc:	ldrb	r0, [r2]
   120d0:	cmp	r0, #47	; 0x2f
   120d4:	cmpne	r0, #37	; 0x25
   120d8:	bne	120f8 <__assert_fail@plt+0x984>
   120dc:	sub	r0, r0, #37	; 0x25
   120e0:	clz	r0, r0
   120e4:	lsr	r1, r0, #5
   120e8:	mov	r0, r4
   120ec:	bl	12a90 <__assert_fail@plt+0x131c>
   120f0:	mov	r7, r0
   120f4:	b	121a8 <__assert_fail@plt+0xa34>
   120f8:	bl	12bc0 <__assert_fail@plt+0x144c>
   120fc:	mov	r7, r0
   12100:	str	r4, [r0, #24]
   12104:	ldr	r0, [sl, r4, lsl #2]
   12108:	movw	r1, #20411	; 0x4fbb
   1210c:	movt	r1, #2
   12110:	str	r1, [sp]
   12114:	mov	r1, #0
   12118:	mov	r2, #10
   1211c:	mov	r3, r9
   12120:	bl	238dc <__assert_fail@plt+0x12168>
   12124:	cmp	r0, #0
   12128:	bne	121e8 <__assert_fail@plt+0xa74>
   1212c:	ldr	r0, [sp, #36]	; 0x24
   12130:	cmn	r0, #1
   12134:	ble	121e8 <__assert_fail@plt+0xa74>
   12138:	ldr	r1, [sp, #32]
   1213c:	orrs	r2, r1, r0
   12140:	beq	1221c <__assert_fail@plt+0xaa8>
   12144:	ldrd	r2, [r8]
   12148:	subs	r5, r1, r2
   1214c:	sbcs	r5, r0, r3
   12150:	bcc	12244 <__assert_fail@plt+0xad0>
   12154:	eor	r1, r1, r2
   12158:	eor	r0, r0, r3
   1215c:	orrs	r0, r1, r0
   12160:	bne	12198 <__assert_fail@plt+0xa24>
   12164:	mov	r0, #0
   12168:	movw	r1, #20954	; 0x51da
   1216c:	movt	r1, #2
   12170:	mov	r2, #5
   12174:	bl	114ec <dcgettext@plt>
   12178:	mov	r5, r0
   1217c:	ldr	r0, [sl, r4, lsl #2]
   12180:	bl	158c8 <__assert_fail@plt+0x4154>
   12184:	mov	r3, r0
   12188:	mov	r0, #0
   1218c:	mov	r1, #0
   12190:	mov	r2, r5
   12194:	bl	115ac <error@plt>
   12198:	ldr	r0, [sp, #32]
   1219c:	ldr	r1, [sp, #36]	; 0x24
   121a0:	strd	r0, [r8]
   121a4:	strd	r0, [r7, #8]
   121a8:	add	r5, r4, #1
   121ac:	cmp	r5, r6
   121b0:	bge	121d4 <__assert_fail@plt+0xa60>
   121b4:	ldr	r2, [sl, r5, lsl #2]
   121b8:	ldrb	r0, [r2]
   121bc:	cmp	r0, #123	; 0x7b
   121c0:	bne	121d4 <__assert_fail@plt+0xa60>
   121c4:	mov	r0, r5
   121c8:	mov	r1, r7
   121cc:	bl	12c60 <__assert_fail@plt+0x14ec>
   121d0:	mov	r4, r5
   121d4:	add	r4, r4, #1
   121d8:	cmp	r4, r6
   121dc:	blt	120c8 <__assert_fail@plt+0x954>
   121e0:	sub	sp, fp, #28
   121e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121e8:	movw	r1, #20835	; 0x5163
   121ec:	movt	r1, #2
   121f0:	mov	r0, #0
   121f4:	mov	r2, #5
   121f8:	bl	114ec <dcgettext@plt>
   121fc:	mov	r5, r0
   12200:	ldr	r0, [sl, r4, lsl #2]
   12204:	bl	158c8 <__assert_fail@plt+0x4154>
   12208:	mov	r3, r0
   1220c:	mov	r0, #1
   12210:	mov	r1, #0
   12214:	mov	r2, r5
   12218:	bl	115ac <error@plt>
   1221c:	movw	r1, #20855	; 0x5177
   12220:	movt	r1, #2
   12224:	mov	r0, #0
   12228:	mov	r2, #5
   1222c:	bl	114ec <dcgettext@plt>
   12230:	mov	r2, r0
   12234:	ldr	r3, [sl, r4, lsl #2]
   12238:	mov	r0, #1
   1223c:	mov	r1, #0
   12240:	bl	115ac <error@plt>
   12244:	movw	r1, #20897	; 0x51a1
   12248:	movt	r1, #2
   1224c:	mov	r0, #0
   12250:	mov	r2, #5
   12254:	bl	114ec <dcgettext@plt>
   12258:	mov	r5, r0
   1225c:	ldr	r0, [sl, r4, lsl #2]
   12260:	bl	158c8 <__assert_fail@plt+0x4154>
   12264:	mov	r4, r0
   12268:	ldrd	r0, [r8]
   1226c:	add	r2, sp, #11
   12270:	bl	13fd0 <__assert_fail@plt+0x285c>
   12274:	str	r0, [sp]
   12278:	mov	r0, #1
   1227c:	mov	r1, #0
   12280:	mov	r2, r5
   12284:	mov	r3, r4
   12288:	bl	115ac <error@plt>
   1228c:	push	{r4, sl, fp, lr}
   12290:	add	fp, sp, #8
   12294:	mov	r4, r0
   12298:	mov	r0, #1
   1229c:	bl	1275c <__assert_fail@plt+0xfe8>
   122a0:	mov	r0, r4
   122a4:	mov	r1, #0
   122a8:	bl	114c8 <signal@plt>
   122ac:	mov	r0, r4
   122b0:	pop	{r4, sl, fp, lr}
   122b4:	b	113fc <raise@plt>
   122b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   122bc:	add	fp, sp, #24
   122c0:	movw	r8, #25040	; 0x61d0
   122c4:	movt	r8, #3
   122c8:	ldr	r0, [r8]
   122cc:	cmp	r0, #1
   122d0:	blt	12384 <__assert_fail@plt+0xc10>
   122d4:	mov	r7, #0
   122d8:	movw	r6, #25036	; 0x61cc
   122dc:	movt	r6, #3
   122e0:	ldr	r0, [r6]
   122e4:	add	r0, r0, r7, lsl #6
   122e8:	ldrb	r0, [r0, #30]
   122ec:	mov	r4, #0
   122f0:	mov	r5, #0
   122f4:	cmp	r0, #0
   122f8:	bne	12314 <__assert_fail@plt+0xba0>
   122fc:	b	12350 <__assert_fail@plt+0xbdc>
   12300:	mov	r2, r4
   12304:	mov	r3, r5
   12308:	bl	12de8 <__assert_fail@plt+0x1674>
   1230c:	adds	r4, r4, #1
   12310:	adc	r5, r5, #0
   12314:	ldr	r0, [r6]
   12318:	add	r0, r0, r7, lsl #6
   1231c:	ldrb	r1, [r0, #28]
   12320:	cmp	r1, #0
   12324:	bne	12300 <__assert_fail@plt+0xb8c>
   12328:	ldrd	r2, [r0, #16]
   1232c:	subs	r1, r2, r4
   12330:	sbcs	r1, r3, r5
   12334:	bge	12300 <__assert_fail@plt+0xb8c>
   12338:	b	12374 <__assert_fail@plt+0xc00>
   1233c:	mov	r2, r4
   12340:	mov	r3, r5
   12344:	bl	12fd8 <__assert_fail@plt+0x1864>
   12348:	adds	r4, r4, #1
   1234c:	adc	r5, r5, #0
   12350:	ldr	r0, [r6]
   12354:	add	r0, r0, r7, lsl #6
   12358:	ldrb	r1, [r0, #28]
   1235c:	cmp	r1, #0
   12360:	bne	1233c <__assert_fail@plt+0xbc8>
   12364:	ldrd	r2, [r0, #16]
   12368:	subs	r1, r2, r4
   1236c:	sbcs	r1, r3, r5
   12370:	bge	1233c <__assert_fail@plt+0xbc8>
   12374:	ldr	r0, [r8]
   12378:	add	r7, r7, #1
   1237c:	cmp	r7, r0
   12380:	blt	122e0 <__assert_fail@plt+0xb6c>
   12384:	bl	130b0 <__assert_fail@plt+0x193c>
   12388:	bl	13194 <__assert_fail@plt+0x1a20>
   1238c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   12390:	b	12590 <__assert_fail@plt+0xe1c>
   12394:	push	{fp, lr}
   12398:	mov	fp, sp
   1239c:	movw	r1, #21382	; 0x5386
   123a0:	movt	r1, #2
   123a4:	mov	r0, #0
   123a8:	mov	r2, #5
   123ac:	bl	114ec <dcgettext@plt>
   123b0:	movw	r1, #25020	; 0x61bc
   123b4:	movt	r1, #3
   123b8:	ldr	r1, [r1]
   123bc:	pop	{fp, lr}
   123c0:	b	113e4 <fputs_unlocked@plt>
   123c4:	push	{r4, r5, fp, lr}
   123c8:	add	fp, sp, #8
   123cc:	sub	sp, sp, #56	; 0x38
   123d0:	movw	r0, #21992	; 0x55e8
   123d4:	movt	r0, #2
   123d8:	add	r1, r0, #32
   123dc:	mov	r5, sp
   123e0:	mov	r2, #48	; 0x30
   123e4:	vld1.64	{d16-d17}, [r1]
   123e8:	add	r1, r5, #32
   123ec:	add	r3, r0, #16
   123f0:	vld1.64	{d18-d19}, [r0], r2
   123f4:	vld1.64	{d20-d21}, [r3]
   123f8:	vldr	d22, [r0]
   123fc:	vst1.64	{d16-d17}, [r1]
   12400:	add	r0, r5, #16
   12404:	vst1.64	{d20-d21}, [r0]
   12408:	mov	r0, r5
   1240c:	vst1.64	{d18-d19}, [r0], r2
   12410:	vstr	d22, [r0]
   12414:	ldr	r1, [sp]
   12418:	cmp	r1, #0
   1241c:	beq	12444 <__assert_fail@plt+0xcd0>
   12420:	mov	r5, sp
   12424:	movw	r4, #19074	; 0x4a82
   12428:	movt	r4, #2
   1242c:	mov	r0, r4
   12430:	bl	11420 <strcmp@plt>
   12434:	cmp	r0, #0
   12438:	ldrne	r1, [r5, #8]!
   1243c:	cmpne	r1, #0
   12440:	bne	1242c <__assert_fail@plt+0xcb8>
   12444:	ldr	r4, [r5, #4]
   12448:	movw	r1, #21552	; 0x5430
   1244c:	movt	r1, #2
   12450:	mov	r0, #0
   12454:	mov	r2, #5
   12458:	bl	114ec <dcgettext@plt>
   1245c:	mov	r1, r0
   12460:	movw	r2, #19081	; 0x4a89
   12464:	movt	r2, #2
   12468:	movw	r3, #21575	; 0x5447
   1246c:	movt	r3, #2
   12470:	mov	r0, #1
   12474:	bl	11684 <__printf_chk@plt>
   12478:	movw	r5, #19074	; 0x4a82
   1247c:	movt	r5, #2
   12480:	cmp	r4, #0
   12484:	moveq	r4, r5
   12488:	mov	r0, #5
   1248c:	mov	r1, #0
   12490:	bl	116e4 <setlocale@plt>
   12494:	cmp	r0, #0
   12498:	beq	124d8 <__assert_fail@plt+0xd64>
   1249c:	movw	r1, #21615	; 0x546f
   124a0:	movt	r1, #2
   124a4:	mov	r2, #3
   124a8:	bl	11744 <strncmp@plt>
   124ac:	cmp	r0, #0
   124b0:	beq	124d8 <__assert_fail@plt+0xd64>
   124b4:	movw	r1, #21619	; 0x5473
   124b8:	movt	r1, #2
   124bc:	mov	r0, #0
   124c0:	mov	r2, #5
   124c4:	bl	114ec <dcgettext@plt>
   124c8:	movw	r1, #25020	; 0x61bc
   124cc:	movt	r1, #3
   124d0:	ldr	r1, [r1]
   124d4:	bl	113e4 <fputs_unlocked@plt>
   124d8:	movw	r1, #21690	; 0x54ba
   124dc:	movt	r1, #2
   124e0:	mov	r0, #0
   124e4:	mov	r2, #5
   124e8:	bl	114ec <dcgettext@plt>
   124ec:	mov	r1, r0
   124f0:	movw	r2, #21575	; 0x5447
   124f4:	movt	r2, #2
   124f8:	mov	r0, #1
   124fc:	mov	r3, r5
   12500:	bl	11684 <__printf_chk@plt>
   12504:	movw	r1, #21717	; 0x54d5
   12508:	movt	r1, #2
   1250c:	mov	r0, #0
   12510:	mov	r2, #5
   12514:	bl	114ec <dcgettext@plt>
   12518:	mov	r1, r0
   1251c:	movw	r0, #21485	; 0x53ed
   12520:	movt	r0, #2
   12524:	movw	r3, #20411	; 0x4fbb
   12528:	movt	r3, #2
   1252c:	cmp	r4, r5
   12530:	moveq	r3, r0
   12534:	mov	r0, #1
   12538:	mov	r2, r4
   1253c:	bl	11684 <__printf_chk@plt>
   12540:	sub	sp, fp, #8
   12544:	pop	{r4, r5, fp, pc}
   12548:	push	{r4, sl, fp, lr}
   1254c:	add	fp, sp, #8
   12550:	sub	sp, sp, #128	; 0x80
   12554:	bl	12590 <__assert_fail@plt+0xe1c>
   12558:	movw	r1, #25064	; 0x61e8
   1255c:	movt	r1, #3
   12560:	mov	r4, sp
   12564:	mov	r0, #0
   12568:	mov	r2, r4
   1256c:	bl	11450 <sigprocmask@plt>
   12570:	mov	r0, #0
   12574:	bl	1275c <__assert_fail@plt+0xfe8>
   12578:	mov	r0, #2
   1257c:	mov	r1, r4
   12580:	mov	r2, #0
   12584:	bl	11450 <sigprocmask@plt>
   12588:	sub	sp, fp, #8
   1258c:	pop	{r4, sl, fp, pc}
   12590:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12594:	add	fp, sp, #24
   12598:	sub	sp, sp, #128	; 0x80
   1259c:	movw	r7, #25192	; 0x6268
   125a0:	movt	r7, #3
   125a4:	ldr	r0, [r7]
   125a8:	cmp	r0, #0
   125ac:	beq	126cc <__assert_fail@plt+0xf58>
   125b0:	bl	11594 <ferror_unlocked@plt>
   125b4:	cmp	r0, #0
   125b8:	bne	126d4 <__assert_fail@plt+0xf60>
   125bc:	ldr	r0, [r7]
   125c0:	bl	13ce0 <__assert_fail@plt+0x256c>
   125c4:	cmp	r0, #0
   125c8:	bne	12718 <__assert_fail@plt+0xfa4>
   125cc:	movw	r0, #25200	; 0x6270
   125d0:	movt	r0, #3
   125d4:	ldrd	r0, [r0]
   125d8:	orrs	r2, r0, r1
   125dc:	bne	12684 <__assert_fail@plt+0xf10>
   125e0:	movw	r2, #25056	; 0x61e0
   125e4:	movt	r2, #3
   125e8:	ldrb	r2, [r2]
   125ec:	cmp	r2, #1
   125f0:	bne	12684 <__assert_fail@plt+0xf10>
   125f4:	movw	r1, #25064	; 0x61e8
   125f8:	movt	r1, #3
   125fc:	mov	r5, sp
   12600:	mov	r0, #0
   12604:	mov	r2, r5
   12608:	bl	11450 <sigprocmask@plt>
   1260c:	movw	r8, #25196	; 0x626c
   12610:	movt	r8, #3
   12614:	ldr	r0, [r8]
   12618:	bl	114f8 <unlink@plt>
   1261c:	mov	r6, r0
   12620:	bl	1163c <__errno_location@plt>
   12624:	ldr	r4, [r0]
   12628:	movw	r0, #25208	; 0x6278
   1262c:	movt	r0, #3
   12630:	ldr	r1, [r0]
   12634:	sub	r1, r1, #1
   12638:	str	r1, [r0]
   1263c:	mov	r0, #2
   12640:	mov	r1, r5
   12644:	mov	r2, #0
   12648:	bl	11450 <sigprocmask@plt>
   1264c:	cmp	r6, #0
   12650:	cmpne	r4, #2
   12654:	beq	126c4 <__assert_fail@plt+0xf50>
   12658:	ldr	r2, [r8]
   1265c:	mov	r0, #0
   12660:	mov	r1, #3
   12664:	bl	15788 <__assert_fail@plt+0x4014>
   12668:	mov	r3, r0
   1266c:	movw	r2, #20951	; 0x51d7
   12670:	movt	r2, #2
   12674:	mov	r0, #0
   12678:	mov	r1, r4
   1267c:	bl	115ac <error@plt>
   12680:	b	126c4 <__assert_fail@plt+0xf50>
   12684:	movw	r2, #25044	; 0x61d4
   12688:	movt	r2, #3
   1268c:	ldrb	r2, [r2]
   12690:	cmp	r2, #0
   12694:	bne	126c4 <__assert_fail@plt+0xf50>
   12698:	movw	r2, #25020	; 0x61bc
   1269c:	movt	r2, #3
   126a0:	ldr	r4, [r2]
   126a4:	mov	r2, sp
   126a8:	bl	13fd0 <__assert_fail@plt+0x285c>
   126ac:	mov	r3, r0
   126b0:	movw	r2, #22913	; 0x5981
   126b4:	movt	r2, #2
   126b8:	mov	r0, r4
   126bc:	mov	r1, #1
   126c0:	bl	116a8 <__fprintf_chk@plt>
   126c4:	mov	r0, #0
   126c8:	str	r0, [r7]
   126cc:	sub	sp, fp, #24
   126d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   126d4:	mov	r5, #0
   126d8:	movw	r1, #20412	; 0x4fbc
   126dc:	movt	r1, #2
   126e0:	mov	r0, #0
   126e4:	mov	r2, #5
   126e8:	bl	114ec <dcgettext@plt>
   126ec:	mov	r4, r0
   126f0:	movw	r0, #25196	; 0x626c
   126f4:	movt	r0, #3
   126f8:	ldr	r1, [r0]
   126fc:	mov	r0, #4
   12700:	bl	156d4 <__assert_fail@plt+0x3f60>
   12704:	mov	r3, r0
   12708:	mov	r0, #0
   1270c:	mov	r1, #0
   12710:	mov	r2, r4
   12714:	b	12750 <__assert_fail@plt+0xfdc>
   12718:	bl	1163c <__errno_location@plt>
   1271c:	ldr	r4, [r0]
   12720:	movw	r0, #25196	; 0x626c
   12724:	movt	r0, #3
   12728:	ldr	r2, [r0]
   1272c:	mov	r5, #0
   12730:	mov	r0, #0
   12734:	mov	r1, #3
   12738:	bl	15788 <__assert_fail@plt+0x4014>
   1273c:	mov	r3, r0
   12740:	movw	r2, #20951	; 0x51d7
   12744:	movt	r2, #2
   12748:	mov	r0, #0
   1274c:	mov	r1, r4
   12750:	bl	115ac <error@plt>
   12754:	str	r5, [r7]
   12758:	bl	118a8 <__assert_fail@plt+0x134>
   1275c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12760:	add	fp, sp, #24
   12764:	mov	r4, r0
   12768:	movw	r0, #25045	; 0x61d5
   1276c:	movt	r0, #3
   12770:	ldrb	r0, [r0]
   12774:	cmp	r0, #0
   12778:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1277c:	movw	r8, #25208	; 0x6278
   12780:	movt	r8, #3
   12784:	ldr	r0, [r8]
   12788:	cmp	r0, #1
   1278c:	blt	127fc <__assert_fail@plt+0x1088>
   12790:	add	r5, r0, #1
   12794:	movw	r9, #20951	; 0x51d7
   12798:	movt	r9, #2
   1279c:	sub	r0, r5, #2
   127a0:	bl	12808 <__assert_fail@plt+0x1094>
   127a4:	mov	r6, r0
   127a8:	bl	114f8 <unlink@plt>
   127ac:	cmp	r0, #0
   127b0:	beq	127f0 <__assert_fail@plt+0x107c>
   127b4:	bl	1163c <__errno_location@plt>
   127b8:	ldr	r7, [r0]
   127bc:	cmp	r7, #2
   127c0:	beq	127f0 <__assert_fail@plt+0x107c>
   127c4:	cmp	r4, #0
   127c8:	bne	127f0 <__assert_fail@plt+0x107c>
   127cc:	mov	r0, #0
   127d0:	mov	r1, #3
   127d4:	mov	r2, r6
   127d8:	bl	15788 <__assert_fail@plt+0x4014>
   127dc:	mov	r3, r0
   127e0:	mov	r0, #0
   127e4:	mov	r1, r7
   127e8:	mov	r2, r9
   127ec:	bl	115ac <error@plt>
   127f0:	sub	r5, r5, #1
   127f4:	cmp	r5, #1
   127f8:	bgt	1279c <__assert_fail@plt+0x1028>
   127fc:	mov	r0, #0
   12800:	str	r0, [r8]
   12804:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12808:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1280c:	add	fp, sp, #24
   12810:	sub	sp, sp, #8
   12814:	mov	r4, r0
   12818:	movw	r8, #25060	; 0x61e4
   1281c:	movt	r8, #3
   12820:	ldr	r0, [r8]
   12824:	movw	r7, #25048	; 0x61d8
   12828:	movt	r7, #3
   1282c:	ldr	r1, [r7]
   12830:	bl	1157c <strcpy@plt>
   12834:	movw	r9, #25052	; 0x61dc
   12838:	movt	r9, #3
   1283c:	ldr	r5, [r9]
   12840:	ldr	r6, [r8]
   12844:	ldr	r0, [r7]
   12848:	bl	11624 <strlen@plt>
   1284c:	add	r0, r6, r0
   12850:	cmp	r5, #0
   12854:	beq	12864 <__assert_fail@plt+0x10f0>
   12858:	ldr	r3, [r9]
   1285c:	str	r4, [sp]
   12860:	b	1287c <__assert_fail@plt+0x1108>
   12864:	movw	r1, #24920	; 0x6158
   12868:	movt	r1, #3
   1286c:	ldr	r1, [r1]
   12870:	stm	sp, {r1, r4}
   12874:	movw	r3, #20431	; 0x4fcf
   12878:	movt	r3, #2
   1287c:	mov	r1, #1
   12880:	mvn	r2, #0
   12884:	bl	11654 <__sprintf_chk@plt>
   12888:	ldr	r0, [r8]
   1288c:	sub	sp, fp, #24
   12890:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12894:	push	{fp, lr}
   12898:	mov	fp, sp
   1289c:	mov	ip, #0
   128a0:	mov	lr, #0
   128a4:	b	128ac <__assert_fail@plt+0x1138>
   128a8:	add	lr, lr, #1
   128ac:	ldrb	r3, [r0, lr]
   128b0:	sub	r3, r3, #35	; 0x23
   128b4:	cmp	r3, #13
   128b8:	bhi	12910 <__assert_fail@plt+0x119c>
   128bc:	add	r2, pc, #0
   128c0:	ldr	pc, [r2, r3, lsl #2]
   128c4:	strdeq	r2, [r1], -ip
   128c8:	andeq	r2, r1, r0, lsl r9
   128cc:	andeq	r2, r1, r0, lsl r9
   128d0:	andeq	r2, r1, r0, lsl r9
   128d4:	andeq	r2, r1, r8, lsl #18
   128d8:	andeq	r2, r1, r0, lsl r9
   128dc:	andeq	r2, r1, r0, lsl r9
   128e0:	andeq	r2, r1, r0, lsl r9
   128e4:	andeq	r2, r1, r0, lsl r9
   128e8:	andeq	r2, r1, r0, lsl r9
   128ec:	andeq	r2, r1, r8, lsr #17
   128f0:	andeq	r2, r1, r0, lsl r9
   128f4:	andeq	r2, r1, r0, lsl r9
   128f8:	andeq	r2, r1, r8, lsr #17
   128fc:	orr	ip, ip, #2
   12900:	add	lr, lr, #1
   12904:	b	128ac <__assert_fail@plt+0x1138>
   12908:	orr	ip, ip, #1
   1290c:	b	128a8 <__assert_fail@plt+0x1134>
   12910:	str	ip, [r1]
   12914:	mov	r0, lr
   12918:	pop	{fp, pc}
   1291c:	push	{r4, r5, fp, lr}
   12920:	add	fp, sp, #8
   12924:	sub	sp, sp, #8
   12928:	ldrb	r4, [r0]
   1292c:	sub	r3, r4, #88	; 0x58
   12930:	cmp	r3, #32
   12934:	bhi	12a18 <__assert_fail@plt+0x12a4>
   12938:	mvn	r2, #1
   1293c:	add	r5, pc, #0
   12940:	ldr	pc, [r5, r3, lsl #2]
   12944:	andeq	r2, r1, r8, asr #19
   12948:	andeq	r2, r1, r4, asr #20
   1294c:	andeq	r2, r1, r4, asr #20
   12950:	andeq	r2, r1, r4, asr #20
   12954:	andeq	r2, r1, r4, asr #20
   12958:	andeq	r2, r1, r4, asr #20
   1295c:	andeq	r2, r1, r4, asr #20
   12960:	andeq	r2, r1, r4, asr #20
   12964:	andeq	r2, r1, r4, asr #20
   12968:	andeq	r2, r1, r4, asr #20
   1296c:	andeq	r2, r1, r4, asr #20
   12970:	andeq	r2, r1, r4, asr #20
   12974:	ldrdeq	r2, [r1], -r8
   12978:	andeq	r2, r1, r4, asr #20
   1297c:	andeq	r2, r1, r4, asr #20
   12980:	andeq	r2, r1, r4, asr #20
   12984:	andeq	r2, r1, r4, asr #20
   12988:	ldrdeq	r2, [r1], -r8
   1298c:	andeq	r2, r1, r4, asr #20
   12990:	andeq	r2, r1, r4, asr #20
   12994:	andeq	r2, r1, r4, asr #20
   12998:	andeq	r2, r1, r4, asr #20
   1299c:	andeq	r2, r1, r4, asr #20
   129a0:	andeq	r2, r1, r8, asr #19
   129a4:	andeq	r2, r1, r4, asr #20
   129a8:	andeq	r2, r1, r4, asr #20
   129ac:	andeq	r2, r1, r4, asr #20
   129b0:	andeq	r2, r1, r4, asr #20
   129b4:	andeq	r2, r1, r4, asr #20
   129b8:	ldrdeq	r2, [r1], -r0
   129bc:	andeq	r2, r1, r4, asr #20
   129c0:	andeq	r2, r1, r4, asr #20
   129c4:	andeq	r2, r1, r8, asr #19
   129c8:	mvn	r2, #2
   129cc:	b	129d8 <__assert_fail@plt+0x1264>
   129d0:	mov	r3, #100	; 0x64
   129d4:	strb	r3, [r0]
   129d8:	ands	r5, r2, r1
   129dc:	subeq	sp, fp, #8
   129e0:	popeq	{r4, r5, fp, pc}
   129e4:	movw	r1, #20758	; 0x5116
   129e8:	movt	r1, #2
   129ec:	mov	r0, #0
   129f0:	mov	r2, #5
   129f4:	bl	114ec <dcgettext@plt>
   129f8:	mov	r2, r0
   129fc:	str	r4, [sp]
   12a00:	mov	r3, #35	; 0x23
   12a04:	tst	r5, #2
   12a08:	movweq	r3, #39	; 0x27
   12a0c:	mov	r0, #1
   12a10:	mov	r1, #0
   12a14:	bl	115ac <error@plt>
   12a18:	cmp	r4, #0
   12a1c:	bne	12a44 <__assert_fail@plt+0x12d0>
   12a20:	movw	r1, #20630	; 0x5096
   12a24:	movt	r1, #2
   12a28:	mov	r0, #0
   12a2c:	mov	r2, #5
   12a30:	bl	114ec <dcgettext@plt>
   12a34:	mov	r2, r0
   12a38:	mov	r0, #1
   12a3c:	mov	r1, #0
   12a40:	bl	115ac <error@plt>
   12a44:	bl	1160c <__ctype_b_loc@plt>
   12a48:	ldr	r0, [r0]
   12a4c:	add	r0, r0, r4, lsl #1
   12a50:	ldrb	r0, [r0, #1]
   12a54:	tst	r0, #64	; 0x40
   12a58:	bne	12a68 <__assert_fail@plt+0x12f4>
   12a5c:	movw	r1, #20712	; 0x50e8
   12a60:	movt	r1, #2
   12a64:	b	12a70 <__assert_fail@plt+0x12fc>
   12a68:	movw	r1, #20669	; 0x50bd
   12a6c:	movt	r1, #2
   12a70:	mov	r0, #0
   12a74:	mov	r2, #5
   12a78:	bl	114ec <dcgettext@plt>
   12a7c:	mov	r2, r0
   12a80:	mov	r0, #1
   12a84:	mov	r1, #0
   12a88:	mov	r3, r4
   12a8c:	bl	115ac <error@plt>
   12a90:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12a94:	add	fp, sp, #24
   12a98:	sub	sp, sp, #8
   12a9c:	mov	r8, r2
   12aa0:	mov	r9, r1
   12aa4:	mov	r4, r0
   12aa8:	mov	r7, r2
   12aac:	ldrb	r6, [r7], #1
   12ab0:	mov	r0, r7
   12ab4:	mov	r1, r6
   12ab8:	bl	11708 <strrchr@plt>
   12abc:	cmp	r0, #0
   12ac0:	beq	12b54 <__assert_fail@plt+0x13e0>
   12ac4:	mov	r5, r0
   12ac8:	bl	12bc0 <__assert_fail@plt+0x144c>
   12acc:	mov	r6, r0
   12ad0:	str	r4, [r0, #24]
   12ad4:	strb	r9, [r0, #29]
   12ad8:	mov	r0, #1
   12adc:	strb	r0, [r6, #30]
   12ae0:	mov	r9, #0
   12ae4:	str	r9, [r6, #36]	; 0x24
   12ae8:	mov	r4, r6
   12aec:	str	r9, [r4, #32]!
   12af0:	mov	r0, #256	; 0x100
   12af4:	bl	22e90 <__assert_fail@plt+0x1171c>
   12af8:	str	r0, [r6, #48]	; 0x30
   12afc:	str	r9, [r6, #52]	; 0x34
   12b00:	movw	r0, #25588	; 0x63f4
   12b04:	movt	r0, #3
   12b08:	movw	r1, #710	; 0x2c6
   12b0c:	str	r1, [r0]
   12b10:	mvn	r0, r8
   12b14:	add	r1, r5, r0
   12b18:	mov	r0, r7
   12b1c:	mov	r2, r4
   12b20:	bl	15cdc <__assert_fail@plt+0x4568>
   12b24:	cmp	r0, #0
   12b28:	bne	12b80 <__assert_fail@plt+0x140c>
   12b2c:	ldrb	r0, [r5, #1]!
   12b30:	cmp	r0, #0
   12b34:	beq	12b48 <__assert_fail@plt+0x13d4>
   12b38:	mov	r0, r6
   12b3c:	mov	r1, r8
   12b40:	mov	r2, r5
   12b44:	bl	12d78 <__assert_fail@plt+0x1604>
   12b48:	mov	r0, r6
   12b4c:	sub	sp, fp, #24
   12b50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12b54:	movw	r1, #21015	; 0x5217
   12b58:	movt	r1, #2
   12b5c:	mov	r0, #0
   12b60:	mov	r2, #5
   12b64:	bl	114ec <dcgettext@plt>
   12b68:	mov	r2, r0
   12b6c:	str	r6, [sp]
   12b70:	mov	r0, #1
   12b74:	mov	r1, #0
   12b78:	mov	r3, r8
   12b7c:	bl	115ac <error@plt>
   12b80:	mov	r7, r0
   12b84:	movw	r1, #21050	; 0x523a
   12b88:	movt	r1, #2
   12b8c:	mov	r0, #0
   12b90:	mov	r2, #5
   12b94:	bl	114ec <dcgettext@plt>
   12b98:	mov	r4, r0
   12b9c:	mov	r0, r8
   12ba0:	bl	158c8 <__assert_fail@plt+0x4154>
   12ba4:	mov	r3, r0
   12ba8:	str	r7, [sp]
   12bac:	mov	r0, #0
   12bb0:	mov	r1, #0
   12bb4:	mov	r2, r4
   12bb8:	bl	115ac <error@plt>
   12bbc:	bl	118a8 <__assert_fail@plt+0x134>
   12bc0:	push	{r4, r5, fp, lr}
   12bc4:	add	fp, sp, #8
   12bc8:	sub	sp, sp, #8
   12bcc:	movw	r0, #25224	; 0x6288
   12bd0:	movt	r0, #3
   12bd4:	ldr	r0, [r0]
   12bd8:	movw	r4, #25040	; 0x61d0
   12bdc:	movt	r4, #3
   12be0:	ldr	r1, [r4]
   12be4:	cmp	r1, r0
   12be8:	bne	12c18 <__assert_fail@plt+0x14a4>
   12bec:	movw	r5, #25036	; 0x61cc
   12bf0:	movt	r5, #3
   12bf4:	ldr	r0, [r5]
   12bf8:	mov	r1, #64	; 0x40
   12bfc:	str	r1, [sp]
   12c00:	movw	r1, #25224	; 0x6288
   12c04:	movt	r1, #3
   12c08:	mov	r2, #1
   12c0c:	mvn	r3, #0
   12c10:	bl	22fb4 <__assert_fail@plt+0x11840>
   12c14:	str	r0, [r5]
   12c18:	ldr	r0, [r4]
   12c1c:	add	r1, r0, #1
   12c20:	str	r1, [r4]
   12c24:	movw	r1, #25036	; 0x61cc
   12c28:	movt	r1, #3
   12c2c:	ldr	r1, [r1]
   12c30:	add	r0, r1, r0, lsl #6
   12c34:	mov	r1, #0
   12c38:	vmov.i32	q8, #0	; 0x00000000
   12c3c:	strb	r1, [r0, #28]
   12c40:	strb	r1, [r0, #30]
   12c44:	str	r1, [r0, #16]
   12c48:	mov	r2, #20
   12c4c:	mov	r3, r0
   12c50:	vst1.64	{d16-d17}, [r3], r2
   12c54:	str	r1, [r3]
   12c58:	sub	sp, fp, #8
   12c5c:	pop	{r4, r5, fp, pc}
   12c60:	push	{r4, r5, r6, r7, fp, lr}
   12c64:	add	fp, sp, #16
   12c68:	sub	sp, sp, #16
   12c6c:	mov	r4, r2
   12c70:	mov	r6, r1
   12c74:	mov	r5, r0
   12c78:	mov	r0, r2
   12c7c:	bl	11624 <strlen@plt>
   12c80:	mov	r1, r0
   12c84:	sub	r7, r0, #1
   12c88:	ldrb	r0, [r4, r7]
   12c8c:	cmp	r0, #125	; 0x7d
   12c90:	bne	12d44 <__assert_fail@plt+0x15d0>
   12c94:	mov	r0, #0
   12c98:	strb	r0, [r4, r7]
   12c9c:	add	r0, r4, #1
   12ca0:	cmp	r1, #3
   12ca4:	ldrbeq	r1, [r0]
   12ca8:	cmpeq	r1, #42	; 0x2a
   12cac:	beq	12cec <__assert_fail@plt+0x1578>
   12cb0:	movw	r1, #20411	; 0x4fbb
   12cb4:	movt	r1, #2
   12cb8:	str	r1, [sp]
   12cbc:	add	r3, sp, #8
   12cc0:	mov	r1, #0
   12cc4:	mov	r2, #10
   12cc8:	bl	238dc <__assert_fail@plt+0x12168>
   12ccc:	cmp	r0, #0
   12cd0:	bne	12d04 <__assert_fail@plt+0x1590>
   12cd4:	ldr	r1, [sp, #12]
   12cd8:	cmn	r1, #1
   12cdc:	ble	12d04 <__assert_fail@plt+0x1590>
   12ce0:	ldr	r0, [sp, #8]
   12ce4:	strd	r0, [r6, #16]
   12ce8:	b	12cf4 <__assert_fail@plt+0x1580>
   12cec:	mov	r0, #1
   12cf0:	strb	r0, [r6, #28]
   12cf4:	mov	r0, #125	; 0x7d
   12cf8:	strb	r0, [r4, r7]
   12cfc:	sub	sp, fp, #16
   12d00:	pop	{r4, r5, r6, r7, fp, pc}
   12d04:	movw	r1, #21158	; 0x52a6
   12d08:	movt	r1, #2
   12d0c:	mov	r0, #0
   12d10:	mov	r2, #5
   12d14:	bl	114ec <dcgettext@plt>
   12d18:	mov	r4, r0
   12d1c:	movw	r0, #25032	; 0x61c8
   12d20:	movt	r0, #3
   12d24:	ldr	r0, [r0]
   12d28:	ldr	r0, [r0, r5, lsl #2]
   12d2c:	bl	158c8 <__assert_fail@plt+0x4154>
   12d30:	mov	r3, r0
   12d34:	mov	r0, #1
   12d38:	mov	r1, #0
   12d3c:	mov	r2, r4
   12d40:	bl	115ac <error@plt>
   12d44:	movw	r1, #21122	; 0x5282
   12d48:	movt	r1, #2
   12d4c:	mov	r0, #0
   12d50:	mov	r2, #5
   12d54:	bl	114ec <dcgettext@plt>
   12d58:	mov	r5, r0
   12d5c:	mov	r0, r4
   12d60:	bl	158c8 <__assert_fail@plt+0x4154>
   12d64:	mov	r3, r0
   12d68:	mov	r0, #1
   12d6c:	mov	r1, #0
   12d70:	mov	r2, r5
   12d74:	bl	115ac <error@plt>
   12d78:	push	{r4, r5, fp, lr}
   12d7c:	add	fp, sp, #8
   12d80:	sub	sp, sp, #8
   12d84:	mov	r4, r1
   12d88:	mov	r3, r0
   12d8c:	movw	r0, #20411	; 0x4fbb
   12d90:	movt	r0, #2
   12d94:	str	r0, [sp]
   12d98:	mov	r0, r2
   12d9c:	mov	r1, #0
   12da0:	mov	r2, #10
   12da4:	bl	2334c <__assert_fail@plt+0x11bd8>
   12da8:	cmp	r0, #0
   12dac:	subeq	sp, fp, #8
   12db0:	popeq	{r4, r5, fp, pc}
   12db4:	movw	r1, #21085	; 0x525d
   12db8:	movt	r1, #2
   12dbc:	mov	r0, #0
   12dc0:	mov	r2, #5
   12dc4:	bl	114ec <dcgettext@plt>
   12dc8:	mov	r5, r0
   12dcc:	mov	r0, r4
   12dd0:	bl	158c8 <__assert_fail@plt+0x4154>
   12dd4:	mov	r3, r0
   12dd8:	mov	r0, #1
   12ddc:	mov	r1, #0
   12de0:	mov	r2, r5
   12de4:	bl	115ac <error@plt>
   12de8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dec:	add	fp, sp, #28
   12df0:	sub	sp, sp, #12
   12df4:	mov	r8, r3
   12df8:	mov	r9, r2
   12dfc:	mov	r4, r0
   12e00:	ldrb	r5, [r0, #29]
   12e04:	cmp	r5, #0
   12e08:	bleq	130b0 <__assert_fail@plt+0x193c>
   12e0c:	ldr	r0, [r4, #4]
   12e10:	cmn	r0, #1
   12e14:	ble	12ea0 <__assert_fail@plt+0x172c>
   12e18:	movw	r6, #25232	; 0x6290
   12e1c:	movt	r6, #3
   12e20:	ldrd	r0, [r6]
   12e24:	adds	r0, r0, #1
   12e28:	adc	r1, r1, #0
   12e2c:	strd	r0, [r6]
   12e30:	bl	131b4 <__assert_fail@plt+0x1a40>
   12e34:	cmp	r0, #0
   12e38:	beq	12f70 <__assert_fail@plt+0x17fc>
   12e3c:	add	r7, r4, #32
   12e40:	mov	sl, #0
   12e44:	ldr	r2, [r0]
   12e48:	ldr	r1, [r0, #4]
   12e4c:	sub	r0, r2, #1
   12e50:	ldrb	r3, [r1, r0]
   12e54:	cmp	r3, #10
   12e58:	moveq	r2, r0
   12e5c:	stm	sp, {r2, sl}
   12e60:	mov	r0, r7
   12e64:	mov	r3, #0
   12e68:	bl	171b0 <__assert_fail@plt+0x5a3c>
   12e6c:	cmn	r0, #1
   12e70:	bne	12efc <__assert_fail@plt+0x1788>
   12e74:	bl	133a0 <__assert_fail@plt+0x1c2c>
   12e78:	cmp	r5, #0
   12e7c:	bleq	13474 <__assert_fail@plt+0x1d00>
   12e80:	ldrd	r0, [r6]
   12e84:	adds	r0, r0, #1
   12e88:	adc	r1, r1, #0
   12e8c:	strd	r0, [r6]
   12e90:	bl	131b4 <__assert_fail@plt+0x1a40>
   12e94:	cmp	r0, #0
   12e98:	bne	12e44 <__assert_fail@plt+0x16d0>
   12e9c:	b	12f70 <__assert_fail@plt+0x17fc>
   12ea0:	add	r7, r4, #32
   12ea4:	movw	r6, #25232	; 0x6290
   12ea8:	movt	r6, #3
   12eac:	mov	sl, #0
   12eb0:	ldrd	r0, [r6]
   12eb4:	adds	r0, r0, #1
   12eb8:	adc	r1, r1, #0
   12ebc:	strd	r0, [r6]
   12ec0:	bl	131b4 <__assert_fail@plt+0x1a40>
   12ec4:	cmp	r0, #0
   12ec8:	beq	12f70 <__assert_fail@plt+0x17fc>
   12ecc:	ldr	r2, [r0]
   12ed0:	ldr	r1, [r0, #4]
   12ed4:	sub	r0, r2, #1
   12ed8:	ldrb	r3, [r1, r0]
   12edc:	cmp	r3, #10
   12ee0:	moveq	r2, r0
   12ee4:	stm	sp, {r2, sl}
   12ee8:	mov	r0, r7
   12eec:	mov	r3, #0
   12ef0:	bl	171b0 <__assert_fail@plt+0x5a3c>
   12ef4:	cmn	r0, #1
   12ef8:	beq	12eb0 <__assert_fail@plt+0x173c>
   12efc:	cmn	r0, #2
   12f00:	beq	12f98 <__assert_fail@plt+0x1824>
   12f04:	movw	r6, #25232	; 0x6290
   12f08:	movt	r6, #3
   12f0c:	ldrd	r0, [r6]
   12f10:	ldm	r4, {r2, r7}
   12f14:	ldr	r3, [r4, #24]
   12f18:	adds	r8, r2, r0
   12f1c:	adc	r9, r7, r1
   12f20:	cmp	r5, #0
   12f24:	mov	r2, r5
   12f28:	movwne	r2, #1
   12f2c:	mov	r0, r8
   12f30:	mov	r1, r9
   12f34:	bl	13518 <__assert_fail@plt+0x1da4>
   12f38:	cmp	r5, #0
   12f3c:	bleq	12590 <__assert_fail@plt+0xe1c>
   12f40:	ldrd	r0, [r4]
   12f44:	subs	r0, r0, #1
   12f48:	sbcs	r0, r1, #0
   12f4c:	strdge	r8, [r6]
   12f50:	movw	r0, #25046	; 0x61d6
   12f54:	movt	r0, #3
   12f58:	ldrb	r0, [r0]
   12f5c:	sub	sp, fp, #28
   12f60:	cmp	r0, #1
   12f64:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f6c:	b	133a0 <__assert_fail@plt+0x1c2c>
   12f70:	ldrb	r0, [r4, #28]
   12f74:	cmp	r0, #0
   12f78:	bne	12fc0 <__assert_fail@plt+0x184c>
   12f7c:	cmp	r5, #0
   12f80:	movwne	r5, #1
   12f84:	str	r5, [sp]
   12f88:	mov	r0, r4
   12f8c:	mov	r2, r9
   12f90:	mov	r3, r8
   12f94:	bl	132a8 <__assert_fail@plt+0x1b34>
   12f98:	movw	r1, #21200	; 0x52d0
   12f9c:	movt	r1, #2
   12fa0:	mov	r0, #0
   12fa4:	mov	r2, #5
   12fa8:	bl	114ec <dcgettext@plt>
   12fac:	mov	r2, r0
   12fb0:	mov	r0, #0
   12fb4:	mov	r1, #0
   12fb8:	bl	115ac <error@plt>
   12fbc:	bl	118a8 <__assert_fail@plt+0x134>
   12fc0:	cmp	r5, #0
   12fc4:	bne	12fd0 <__assert_fail@plt+0x185c>
   12fc8:	bl	13194 <__assert_fail@plt+0x1a20>
   12fcc:	bl	12590 <__assert_fail@plt+0xe1c>
   12fd0:	mov	r0, #0
   12fd4:	bl	11618 <exit@plt>
   12fd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fdc:	add	fp, sp, #28
   12fe0:	sub	sp, sp, #4
   12fe4:	mov	r9, r2
   12fe8:	mov	sl, r0
   12fec:	adds	r4, r2, #1
   12ff0:	str	r3, [sp]
   12ff4:	adc	r8, r3, #0
   12ff8:	ldrd	r6, [r0, #8]
   12ffc:	bl	130b0 <__assert_fail@plt+0x193c>
   13000:	bl	13ad8 <__assert_fail@plt+0x2364>
   13004:	cmp	r0, #0
   13008:	beq	13020 <__assert_fail@plt+0x18ac>
   1300c:	movw	r0, #25046	; 0x61d6
   13010:	movt	r0, #3
   13014:	ldrb	r0, [r0]
   13018:	cmp	r0, #1
   1301c:	beq	130a0 <__assert_fail@plt+0x192c>
   13020:	umull	r5, r0, r6, r4
   13024:	mla	r0, r6, r8, r0
   13028:	mla	r6, r7, r4, r0
   1302c:	bl	13a78 <__assert_fail@plt+0x2304>
   13030:	mov	r7, r0
   13034:	subs	r0, r0, r5
   13038:	sbcs	r0, r1, r6
   1303c:	bge	13068 <__assert_fail@plt+0x18f4>
   13040:	mov	r4, r1
   13044:	adds	r7, r7, #1
   13048:	adc	r4, r4, #0
   1304c:	bl	133a0 <__assert_fail@plt+0x1c2c>
   13050:	cmp	r0, #0
   13054:	beq	130a0 <__assert_fail@plt+0x192c>
   13058:	bl	13474 <__assert_fail@plt+0x1d00>
   1305c:	subs	r0, r7, r5
   13060:	sbcs	r0, r4, r6
   13064:	blt	13044 <__assert_fail@plt+0x18d0>
   13068:	bl	12590 <__assert_fail@plt+0xe1c>
   1306c:	movw	r4, #25046	; 0x61d6
   13070:	movt	r4, #3
   13074:	ldrb	r0, [r4]
   13078:	cmp	r0, #1
   1307c:	bleq	133a0 <__assert_fail@plt+0x1c2c>
   13080:	bl	13ad8 <__assert_fail@plt+0x2364>
   13084:	cmp	r0, #0
   13088:	beq	13098 <__assert_fail@plt+0x1924>
   1308c:	ldrb	r0, [r4]
   13090:	cmp	r0, #0
   13094:	beq	130a0 <__assert_fail@plt+0x192c>
   13098:	sub	sp, fp, #28
   1309c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130a0:	mov	r0, sl
   130a4:	mov	r2, r9
   130a8:	ldr	r3, [sp]
   130ac:	bl	13b04 <__assert_fail@plt+0x2390>
   130b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130b4:	add	fp, sp, #28
   130b8:	sub	sp, sp, #132	; 0x84
   130bc:	movw	r5, #25208	; 0x6278
   130c0:	movt	r5, #3
   130c4:	ldr	r4, [r5]
   130c8:	mov	r0, r4
   130cc:	bl	12808 <__assert_fail@plt+0x1094>
   130d0:	movw	r9, #25196	; 0x626c
   130d4:	movt	r9, #3
   130d8:	str	r0, [r9]
   130dc:	cmn	r4, #-2147483647	; 0x80000001
   130e0:	beq	13164 <__assert_fail@plt+0x19f0>
   130e4:	mov	sl, #0
   130e8:	movw	r1, #25064	; 0x61e8
   130ec:	movt	r1, #3
   130f0:	add	r6, sp, #4
   130f4:	mov	r0, #0
   130f8:	mov	r2, r6
   130fc:	bl	11450 <sigprocmask@plt>
   13100:	ldr	r0, [r9]
   13104:	movw	r1, #21380	; 0x5384
   13108:	movt	r1, #2
   1310c:	bl	13e50 <__assert_fail@plt+0x26dc>
   13110:	mov	r7, r0
   13114:	movw	r0, #25192	; 0x6268
   13118:	movt	r0, #3
   1311c:	str	r7, [r0]
   13120:	cmp	r7, #0
   13124:	addne	r4, r4, #1
   13128:	bl	1163c <__errno_location@plt>
   1312c:	ldr	r8, [r0]
   13130:	str	r4, [r5]
   13134:	mov	r0, #2
   13138:	mov	r1, r6
   1313c:	mov	r2, #0
   13140:	bl	11450 <sigprocmask@plt>
   13144:	cmp	r7, #0
   13148:	movwne	r0, #25200	; 0x6270
   1314c:	movtne	r0, #3
   13150:	strne	sl, [r0]
   13154:	strne	sl, [r0, #4]
   13158:	subne	sp, fp, #28
   1315c:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13160:	b	13168 <__assert_fail@plt+0x19f4>
   13164:	mov	r8, #75	; 0x4b
   13168:	ldr	r2, [r9]
   1316c:	mov	r0, #0
   13170:	mov	r1, #3
   13174:	bl	15788 <__assert_fail@plt+0x4014>
   13178:	mov	r3, r0
   1317c:	movw	r2, #20951	; 0x51d7
   13180:	movt	r2, #2
   13184:	mov	r0, #0
   13188:	mov	r1, r8
   1318c:	bl	115ac <error@plt>
   13190:	bl	118a8 <__assert_fail@plt+0x134>
   13194:	push	{fp, lr}
   13198:	mov	fp, sp
   1319c:	b	131a4 <__assert_fail@plt+0x1a30>
   131a0:	bl	13474 <__assert_fail@plt+0x1d00>
   131a4:	bl	133a0 <__assert_fail@plt+0x1c2c>
   131a8:	cmp	r0, #0
   131ac:	popeq	{fp, pc}
   131b0:	b	131a0 <__assert_fail@plt+0x1a2c>
   131b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   131b8:	add	fp, sp, #24
   131bc:	mov	r5, r1
   131c0:	mov	r4, r0
   131c4:	movw	r8, #25240	; 0x6298
   131c8:	movt	r8, #3
   131cc:	ldr	r7, [r8]
   131d0:	cmp	r7, #0
   131d4:	bne	131ec <__assert_fail@plt+0x1a78>
   131d8:	mov	r6, #0
   131dc:	bl	135cc <__assert_fail@plt+0x1e58>
   131e0:	cmp	r0, #0
   131e4:	beq	132a0 <__assert_fail@plt+0x1b2c>
   131e8:	ldr	r7, [r8]
   131ec:	ldrd	r0, [r7, #8]
   131f0:	mov	r6, #0
   131f4:	subs	r0, r4, r0
   131f8:	sbcs	r0, r5, r1
   131fc:	blt	132a0 <__assert_fail@plt+0x1b2c>
   13200:	cmp	r7, #0
   13204:	beq	1324c <__assert_fail@plt+0x1ad8>
   13208:	ldrd	r2, [r7, #8]
   1320c:	ldr	r0, [r7, #24]
   13210:	adds	r1, r2, r0
   13214:	adc	r0, r3, r0, asr #31
   13218:	subs	r1, r4, r1
   1321c:	sbcs	r0, r5, r0
   13220:	blt	1326c <__assert_fail@plt+0x1af8>
   13224:	ldr	r0, [r7, #40]	; 0x28
   13228:	cmp	r0, #0
   1322c:	bne	13240 <__assert_fail@plt+0x1acc>
   13230:	bl	135cc <__assert_fail@plt+0x1e58>
   13234:	cmp	r0, #0
   13238:	beq	132a0 <__assert_fail@plt+0x1b2c>
   1323c:	ldr	r0, [r7, #40]	; 0x28
   13240:	cmp	r0, #0
   13244:	mov	r7, r0
   13248:	bne	13208 <__assert_fail@plt+0x1a94>
   1324c:	movw	r0, #21235	; 0x52f3
   13250:	movt	r0, #2
   13254:	movw	r1, #21237	; 0x52f5
   13258:	movt	r1, #2
   1325c:	movw	r3, #21250	; 0x5302
   13260:	movt	r3, #2
   13264:	movw	r2, #583	; 0x247
   13268:	bl	11774 <__assert_fail@plt>
   1326c:	sub	r1, r4, r2
   13270:	ldr	r0, [r7, #32]
   13274:	cmp	r1, #80	; 0x50
   13278:	blt	13298 <__assert_fail@plt+0x1b24>
   1327c:	add	r1, r4, #80	; 0x50
   13280:	sub	r1, r1, r2
   13284:	sub	r1, r1, #80	; 0x50
   13288:	ldr	r0, [r0, #652]	; 0x28c
   1328c:	cmp	r1, #159	; 0x9f
   13290:	bgt	13284 <__assert_fail@plt+0x1b10>
   13294:	sub	r1, r1, #80	; 0x50
   13298:	add	r0, r0, r1, lsl #3
   1329c:	add	r6, r0, #12
   132a0:	mov	r0, r6
   132a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   132a8:	push	{fp, lr}
   132ac:	mov	fp, sp
   132b0:	sub	sp, sp, #32
   132b4:	mov	r8, r3
   132b8:	mov	r5, r2
   132bc:	mov	r6, r0
   132c0:	movw	r9, #25016	; 0x61b8
   132c4:	movt	r9, #3
   132c8:	ldr	r7, [r9]
   132cc:	movw	r1, #21286	; 0x5326
   132d0:	movt	r1, #2
   132d4:	mov	r0, #0
   132d8:	mov	r2, #5
   132dc:	bl	114ec <dcgettext@plt>
   132e0:	mov	r4, r0
   132e4:	ldr	r0, [r6, #24]
   132e8:	movw	r1, #25032	; 0x61c8
   132ec:	movt	r1, #3
   132f0:	ldr	r1, [r1]
   132f4:	ldr	r0, [r1, r0, lsl #2]
   132f8:	movw	r1, #25276	; 0x62bc
   132fc:	movt	r1, #3
   13300:	ldr	r6, [r1]
   13304:	bl	158c8 <__assert_fail@plt+0x4154>
   13308:	str	r0, [sp]
   1330c:	mov	r0, r7
   13310:	mov	r1, #1
   13314:	mov	r2, r4
   13318:	mov	r3, r6
   1331c:	bl	116a8 <__fprintf_chk@plt>
   13320:	orrs	r0, r5, r8
   13324:	ldr	r7, [fp, #8]
   13328:	bne	1334c <__assert_fail@plt+0x1bd8>
   1332c:	ldr	r0, [r9]
   13330:	movw	r2, #20410	; 0x4fba
   13334:	movt	r2, #2
   13338:	mov	r1, #1
   1333c:	bl	116a8 <__fprintf_chk@plt>
   13340:	cmp	r7, #0
   13344:	beq	13394 <__assert_fail@plt+0x1c20>
   13348:	b	1339c <__assert_fail@plt+0x1c28>
   1334c:	ldr	r4, [r9]
   13350:	movw	r1, #21310	; 0x533e
   13354:	movt	r1, #2
   13358:	mov	r0, #0
   1335c:	mov	r2, #5
   13360:	bl	114ec <dcgettext@plt>
   13364:	mov	r6, r0
   13368:	add	r2, sp, #11
   1336c:	mov	r0, r5
   13370:	mov	r1, r8
   13374:	bl	13fd0 <__assert_fail@plt+0x285c>
   13378:	mov	r3, r0
   1337c:	mov	r0, r4
   13380:	mov	r1, #1
   13384:	mov	r2, r6
   13388:	bl	116a8 <__fprintf_chk@plt>
   1338c:	cmp	r7, #0
   13390:	bne	1339c <__assert_fail@plt+0x1c28>
   13394:	bl	13194 <__assert_fail@plt+0x1a20>
   13398:	bl	12590 <__assert_fail@plt+0xe1c>
   1339c:	bl	118a8 <__assert_fail@plt+0x134>
   133a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   133a4:	add	fp, sp, #24
   133a8:	movw	r7, #25264	; 0x62b0
   133ac:	movt	r7, #3
   133b0:	ldr	r0, [r7]
   133b4:	cmp	r0, #0
   133b8:	beq	133c8 <__assert_fail@plt+0x1c54>
   133bc:	bl	1390c <__assert_fail@plt+0x2198>
   133c0:	mov	r0, #0
   133c4:	str	r0, [r7]
   133c8:	movw	r6, #25240	; 0x6298
   133cc:	movt	r6, #3
   133d0:	ldr	r0, [r6]
   133d4:	cmp	r0, #0
   133d8:	bne	133ec <__assert_fail@plt+0x1c78>
   133dc:	mov	r4, #0
   133e0:	bl	135cc <__assert_fail@plt+0x1e58>
   133e4:	cmp	r0, #0
   133e8:	beq	1346c <__assert_fail@plt+0x1cf8>
   133ec:	ldr	r0, [r6]
   133f0:	ldr	r3, [r0, #20]
   133f4:	mov	r1, r0
   133f8:	ldr	r2, [r1, #16]!
   133fc:	movw	r4, #25232	; 0x6290
   13400:	movt	r4, #3
   13404:	ldrd	r8, [r4]
   13408:	subs	r5, r8, r2
   1340c:	sbcs	r5, r9, r3
   13410:	strdlt	r2, [r4]
   13414:	adds	r2, r2, #1
   13418:	adc	r3, r3, #0
   1341c:	strd	r2, [r1]
   13420:	ldr	r1, [r0, #36]	; 0x24
   13424:	ldr	r2, [r1]
   13428:	ldr	r3, [r1, #8]
   1342c:	add	r5, r3, #1
   13430:	str	r5, [r1, #8]
   13434:	add	r3, r1, r3, lsl #3
   13438:	add	r4, r3, #12
   1343c:	cmp	r5, r2
   13440:	bne	1346c <__assert_fail@plt+0x1cf8>
   13444:	ldr	r1, [r1, #652]	; 0x28c
   13448:	str	r1, [r0, #36]	; 0x24
   1344c:	cmp	r1, #0
   13450:	ldrne	r0, [r1]
   13454:	cmpne	r0, #0
   13458:	bne	1346c <__assert_fail@plt+0x1cf8>
   1345c:	ldr	r0, [r6]
   13460:	str	r0, [r7]
   13464:	ldr	r0, [r0, #40]	; 0x28
   13468:	str	r0, [r6]
   1346c:	mov	r0, r4
   13470:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13474:	push	{r4, r5, r6, r7, fp, lr}
   13478:	add	fp, sp, #16
   1347c:	mov	r4, r0
   13480:	movw	r6, #25192	; 0x6268
   13484:	movt	r6, #3
   13488:	ldr	r3, [r6]
   1348c:	ldr	r2, [r0]
   13490:	ldr	r0, [r0, #4]
   13494:	mov	r1, #1
   13498:	bl	114d4 <fwrite_unlocked@plt>
   1349c:	ldr	r1, [r4]
   134a0:	cmp	r0, r1
   134a4:	bne	134c4 <__assert_fail@plt+0x1d50>
   134a8:	movw	r0, #25200	; 0x6270
   134ac:	movt	r0, #3
   134b0:	ldrd	r2, [r0]
   134b4:	adds	r2, r2, r1
   134b8:	adc	r3, r3, r1, asr #31
   134bc:	strd	r2, [r0]
   134c0:	pop	{r4, r5, r6, r7, fp, pc}
   134c4:	bl	1163c <__errno_location@plt>
   134c8:	ldr	r4, [r0]
   134cc:	mov	r7, #0
   134d0:	movw	r1, #20412	; 0x4fbc
   134d4:	movt	r1, #2
   134d8:	mov	r0, #0
   134dc:	mov	r2, #5
   134e0:	bl	114ec <dcgettext@plt>
   134e4:	mov	r5, r0
   134e8:	movw	r0, #25196	; 0x626c
   134ec:	movt	r0, #3
   134f0:	ldr	r1, [r0]
   134f4:	mov	r0, #4
   134f8:	bl	156d4 <__assert_fail@plt+0x3f60>
   134fc:	mov	r3, r0
   13500:	mov	r0, #0
   13504:	mov	r1, r4
   13508:	mov	r2, r5
   1350c:	bl	115ac <error@plt>
   13510:	str	r7, [r6]
   13514:	bl	118a8 <__assert_fail@plt+0x134>
   13518:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1351c:	add	fp, sp, #24
   13520:	mov	r8, r3
   13524:	mov	r9, r2
   13528:	mov	r6, r1
   1352c:	mov	r7, r0
   13530:	bl	13a78 <__assert_fail@plt+0x2304>
   13534:	subs	r2, r7, r0
   13538:	sbcs	r2, r6, r1
   1353c:	blt	13588 <__assert_fail@plt+0x1e14>
   13540:	subs	r7, r7, r0
   13544:	sbc	r6, r6, r1
   13548:	subs	r0, r7, #1
   1354c:	sbcs	r0, r6, #0
   13550:	poplt	{r4, r5, r6, r7, r8, r9, fp, pc}
   13554:	mov	r4, #0
   13558:	mov	r5, #0
   1355c:	bl	133a0 <__assert_fail@plt+0x1c2c>
   13560:	cmp	r0, #0
   13564:	beq	13588 <__assert_fail@plt+0x1e14>
   13568:	cmp	r9, #0
   1356c:	bleq	13474 <__assert_fail@plt+0x1d00>
   13570:	adds	r4, r4, #1
   13574:	adc	r5, r5, #0
   13578:	subs	r0, r4, r7
   1357c:	sbcs	r0, r5, r6
   13580:	blt	1355c <__assert_fail@plt+0x1de8>
   13584:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13588:	movw	r1, #21351	; 0x5367
   1358c:	movt	r1, #2
   13590:	mov	r0, #0
   13594:	mov	r2, #5
   13598:	bl	114ec <dcgettext@plt>
   1359c:	mov	r5, r0
   135a0:	movw	r0, #25032	; 0x61c8
   135a4:	movt	r0, #3
   135a8:	ldr	r0, [r0]
   135ac:	ldr	r0, [r0, r8, lsl #2]
   135b0:	bl	158c8 <__assert_fail@plt+0x4154>
   135b4:	mov	r3, r0
   135b8:	mov	r0, #0
   135bc:	mov	r1, #0
   135c0:	mov	r2, r5
   135c4:	bl	115ac <error@plt>
   135c8:	bl	118a8 <__assert_fail@plt+0x134>
   135cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135d0:	add	fp, sp, #28
   135d4:	sub	sp, sp, #4
   135d8:	movw	r8, #25244	; 0x629c
   135dc:	movt	r8, #3
   135e0:	ldrb	r1, [r8]
   135e4:	mov	r0, #0
   135e8:	cmp	r1, #0
   135ec:	bne	136f0 <__assert_fail@plt+0x1f7c>
   135f0:	movw	r7, #25248	; 0x62a0
   135f4:	movt	r7, #3
   135f8:	ldr	r1, [r7]
   135fc:	movw	r2, #8190	; 0x1ffe
   13600:	movw	r0, #8191	; 0x1fff
   13604:	cmp	r1, r2
   13608:	addgt	r0, r1, #1
   1360c:	mov	r9, #0
   13610:	b	13620 <__assert_fail@plt+0x1eac>
   13614:	mov	r0, r4
   13618:	bl	1390c <__assert_fail@plt+0x2198>
   1361c:	lsl	r0, r5, #1
   13620:	bl	136f8 <__assert_fail@plt+0x1f84>
   13624:	mov	r4, r0
   13628:	ldr	r6, [r7]
   1362c:	ldr	sl, [r0]
   13630:	ldr	r5, [r0, #28]
   13634:	cmp	r6, #0
   13638:	beq	1366c <__assert_fail@plt+0x1ef8>
   1363c:	movw	r0, #25252	; 0x62a4
   13640:	movt	r0, #3
   13644:	ldr	r1, [r0]
   13648:	mov	r0, r5
   1364c:	mov	r2, r6
   13650:	bl	1148c <memcpy@plt>
   13654:	ldr	r0, [r4, #4]
   13658:	add	r0, r0, r6
   1365c:	str	r0, [r4, #4]
   13660:	str	r9, [r7]
   13664:	sub	sl, sl, r6
   13668:	add	r5, r5, r6
   1366c:	sub	r1, sl, #1
   13670:	mov	r0, r5
   13674:	bl	13780 <__assert_fail@plt+0x200c>
   13678:	ldr	r1, [r4, #4]
   1367c:	add	r0, r1, r0
   13680:	str	r0, [r4, #4]
   13684:	mov	r0, r4
   13688:	bl	137f8 <__assert_fail@plt+0x2084>
   1368c:	cmp	r0, #0
   13690:	bne	136d0 <__assert_fail@plt+0x1f5c>
   13694:	ldrb	r0, [r8]
   13698:	cmp	r0, #0
   1369c:	bne	136e4 <__assert_fail@plt+0x1f70>
   136a0:	ldr	r5, [r4]
   136a4:	cmn	r5, #1
   136a8:	ble	136b8 <__assert_fail@plt+0x1f44>
   136ac:	cmp	r5, #1073741824	; 0x40000000
   136b0:	blt	13614 <__assert_fail@plt+0x1ea0>
   136b4:	b	136cc <__assert_fail@plt+0x1f58>
   136b8:	beq	13614 <__assert_fail@plt+0x1ea0>
   136bc:	mov	r0, #-2147483648	; 0x80000000
   136c0:	sdiv	r0, r0, r5
   136c4:	cmp	r0, #2
   136c8:	bge	13614 <__assert_fail@plt+0x1ea0>
   136cc:	bl	11870 <__assert_fail@plt+0xfc>
   136d0:	mov	r0, r4
   136d4:	bl	1394c <__assert_fail@plt+0x21d8>
   136d8:	mov	r0, #1
   136dc:	sub	sp, fp, #28
   136e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136e4:	mov	r0, r4
   136e8:	bl	1390c <__assert_fail@plt+0x2198>
   136ec:	mov	r0, #0
   136f0:	sub	sp, fp, #28
   136f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136f8:	push	{r4, r5, r6, sl, fp, lr}
   136fc:	add	fp, sp, #16
   13700:	sub	sp, sp, #8
   13704:	mov	r4, r0
   13708:	mov	r0, #48	; 0x30
   1370c:	bl	22e90 <__assert_fail@plt+0x1171c>
   13710:	mov	r5, r0
   13714:	mov	r6, #0
   13718:	str	r6, [r0]
   1371c:	mov	r0, #1
   13720:	str	r0, [sp]
   13724:	mov	r0, #0
   13728:	mov	r1, r5
   1372c:	mov	r2, r4
   13730:	mvn	r3, #0
   13734:	bl	22fb4 <__assert_fail@plt+0x11840>
   13738:	str	r0, [r5, #28]
   1373c:	str	r6, [r5, #4]
   13740:	movw	r0, #25256	; 0x62a8
   13744:	movt	r0, #3
   13748:	ldrd	r0, [r0]
   1374c:	str	r6, [r5, #24]
   13750:	str	r6, [r5, #32]
   13754:	str	r6, [r5, #36]	; 0x24
   13758:	str	r6, [r5, #40]	; 0x28
   1375c:	adds	r0, r0, #1
   13760:	str	r0, [r5, #8]
   13764:	str	r0, [r5, #16]
   13768:	adc	r0, r1, #0
   1376c:	str	r0, [r5, #12]
   13770:	str	r0, [r5, #20]
   13774:	mov	r0, r5
   13778:	sub	sp, fp, #16
   1377c:	pop	{r4, r5, r6, sl, fp, pc}
   13780:	push	{r4, sl, fp, lr}
   13784:	add	fp, sp, #8
   13788:	mov	r2, r1
   1378c:	cmp	r1, #0
   13790:	beq	137f0 <__assert_fail@plt+0x207c>
   13794:	mov	r1, r0
   13798:	mov	r0, #0
   1379c:	bl	2292c <__assert_fail@plt+0x111b8>
   137a0:	cmp	r0, #0
   137a4:	beq	137e0 <__assert_fail@plt+0x206c>
   137a8:	cmn	r0, #1
   137ac:	popne	{r4, sl, fp, pc}
   137b0:	bl	1163c <__errno_location@plt>
   137b4:	ldr	r4, [r0]
   137b8:	movw	r1, #19164	; 0x4adc
   137bc:	movt	r1, #2
   137c0:	mov	r0, #0
   137c4:	mov	r2, #5
   137c8:	bl	114ec <dcgettext@plt>
   137cc:	mov	r2, r0
   137d0:	mov	r0, #0
   137d4:	mov	r1, r4
   137d8:	bl	115ac <error@plt>
   137dc:	bl	118a8 <__assert_fail@plt+0x134>
   137e0:	movw	r0, #25244	; 0x629c
   137e4:	movt	r0, #3
   137e8:	mov	r1, #1
   137ec:	strb	r1, [r0]
   137f0:	mov	r0, #0
   137f4:	pop	{r4, sl, fp, pc}
   137f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   137fc:	add	fp, sp, #24
   13800:	mov	r8, r0
   13804:	ldr	r0, [r0, #4]
   13808:	cmp	r0, #0
   1380c:	moveq	r5, #0
   13810:	moveq	r0, r5
   13814:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13818:	ldr	r6, [r8, #28]
   1381c:	mov	r1, #10
   13820:	mov	r4, r6
   13824:	strb	r1, [r4, r0]!
   13828:	mov	r0, r6
   1382c:	mov	r1, #10
   13830:	bl	11534 <rawmemchr@plt>
   13834:	cmp	r0, r4
   13838:	beq	13884 <__assert_fail@plt+0x2110>
   1383c:	mov	r7, r0
   13840:	mov	r5, #0
   13844:	rsb	r0, r6, #1
   13848:	add	r2, r0, r7
   1384c:	mov	r0, r8
   13850:	mov	r1, r6
   13854:	bl	1398c <__assert_fail@plt+0x2218>
   13858:	add	r6, r7, #1
   1385c:	mov	r0, r6
   13860:	mov	r1, #10
   13864:	bl	11534 <rawmemchr@plt>
   13868:	mov	r7, r0
   1386c:	add	r5, r5, #1
   13870:	cmp	r0, r4
   13874:	bne	13844 <__assert_fail@plt+0x20d0>
   13878:	subs	r7, r4, r6
   1387c:	bne	13890 <__assert_fail@plt+0x211c>
   13880:	b	138d0 <__assert_fail@plt+0x215c>
   13884:	mov	r5, #0
   13888:	subs	r7, r4, r6
   1388c:	beq	138d0 <__assert_fail@plt+0x215c>
   13890:	movw	r0, #25244	; 0x629c
   13894:	movt	r0, #3
   13898:	ldrb	r0, [r0]
   1389c:	cmp	r0, #1
   138a0:	bne	138bc <__assert_fail@plt+0x2148>
   138a4:	mov	r0, r8
   138a8:	mov	r1, r6
   138ac:	mov	r2, r7
   138b0:	bl	1398c <__assert_fail@plt+0x2218>
   138b4:	add	r5, r5, #1
   138b8:	b	138d0 <__assert_fail@plt+0x215c>
   138bc:	mov	r0, r6
   138c0:	mov	r1, r7
   138c4:	bl	231b4 <__assert_fail@plt+0x11a40>
   138c8:	mov	r1, r7
   138cc:	bl	13a04 <__assert_fail@plt+0x2290>
   138d0:	str	r5, [r8, #24]
   138d4:	movw	r0, #25256	; 0x62a8
   138d8:	movt	r0, #3
   138dc:	ldrd	r2, [r0]
   138e0:	adds	r1, r2, #1
   138e4:	str	r1, [r8, #16]
   138e8:	str	r1, [r8, #8]
   138ec:	adc	r1, r3, #0
   138f0:	str	r1, [r8, #20]
   138f4:	str	r1, [r8, #12]
   138f8:	adds	r2, r2, r5
   138fc:	adc	r3, r3, r5, asr #31
   13900:	strd	r2, [r0]
   13904:	mov	r0, r5
   13908:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1390c:	push	{r4, r5, fp, lr}
   13910:	add	fp, sp, #8
   13914:	mov	r4, r0
   13918:	ldr	r0, [r0, #32]
   1391c:	cmp	r0, #0
   13920:	beq	13938 <__assert_fail@plt+0x21c4>
   13924:	ldr	r5, [r0, #652]	; 0x28c
   13928:	bl	13f04 <__assert_fail@plt+0x2790>
   1392c:	cmp	r5, #0
   13930:	mov	r0, r5
   13934:	bne	13924 <__assert_fail@plt+0x21b0>
   13938:	ldr	r0, [r4, #28]
   1393c:	bl	13f04 <__assert_fail@plt+0x2790>
   13940:	mov	r0, r4
   13944:	pop	{r4, r5, fp, lr}
   13948:	b	13f04 <__assert_fail@plt+0x2790>
   1394c:	mov	r1, #0
   13950:	ldr	r2, [r0, #32]
   13954:	str	r2, [r0, #36]	; 0x24
   13958:	str	r1, [r0, #40]	; 0x28
   1395c:	movw	r2, #25240	; 0x6298
   13960:	movt	r2, #3
   13964:	ldr	r1, [r2]
   13968:	cmp	r1, #0
   1396c:	streq	r0, [r2]
   13970:	bxeq	lr
   13974:	mov	r2, r1
   13978:	ldr	r1, [r1, #40]	; 0x28
   1397c:	cmp	r1, #0
   13980:	bne	13974 <__assert_fail@plt+0x2200>
   13984:	str	r0, [r2, #40]	; 0x28
   13988:	bx	lr
   1398c:	push	{r4, r5, r6, sl, fp, lr}
   13990:	add	fp, sp, #16
   13994:	mov	r5, r2
   13998:	mov	r4, r1
   1399c:	mov	r6, r0
   139a0:	ldr	r0, [r0, #32]
   139a4:	cmp	r0, #0
   139a8:	bne	139b8 <__assert_fail@plt+0x2244>
   139ac:	bl	13a38 <__assert_fail@plt+0x22c4>
   139b0:	str	r0, [r6, #32]
   139b4:	str	r0, [r6, #36]	; 0x24
   139b8:	ldr	r0, [r6, #36]	; 0x24
   139bc:	ldr	r0, [r0]
   139c0:	cmp	r0, #80	; 0x50
   139c4:	bne	139d8 <__assert_fail@plt+0x2264>
   139c8:	bl	13a38 <__assert_fail@plt+0x22c4>
   139cc:	ldr	r1, [r6, #36]	; 0x24
   139d0:	str	r0, [r1, #652]	; 0x28c
   139d4:	str	r0, [r6, #36]	; 0x24
   139d8:	ldr	r0, [r6, #36]	; 0x24
   139dc:	ldr	r1, [r0, #4]
   139e0:	add	r2, r0, r1, lsl #3
   139e4:	str	r5, [r2, #12]
   139e8:	str	r4, [r2, #16]
   139ec:	add	r1, r1, #1
   139f0:	str	r1, [r0, #4]
   139f4:	ldr	r1, [r0]
   139f8:	add	r1, r1, #1
   139fc:	str	r1, [r0]
   13a00:	pop	{r4, r5, r6, sl, fp, pc}
   13a04:	push	{r4, r5, r6, sl, fp, lr}
   13a08:	add	fp, sp, #16
   13a0c:	mov	r4, r1
   13a10:	mov	r5, r0
   13a14:	movw	r6, #25252	; 0x62a4
   13a18:	movt	r6, #3
   13a1c:	ldr	r0, [r6]
   13a20:	bl	13f04 <__assert_fail@plt+0x2790>
   13a24:	movw	r0, #25248	; 0x62a0
   13a28:	movt	r0, #3
   13a2c:	str	r4, [r0]
   13a30:	str	r5, [r6]
   13a34:	pop	{r4, r5, r6, sl, fp, pc}
   13a38:	push	{r4, sl, fp, lr}
   13a3c:	add	fp, sp, #8
   13a40:	mov	r0, #656	; 0x290
   13a44:	bl	22e90 <__assert_fail@plt+0x1171c>
   13a48:	mov	r4, r0
   13a4c:	mov	r0, #0
   13a50:	str	r0, [r4, #652]	; 0x28c
   13a54:	mov	r0, r4
   13a58:	bl	13a64 <__assert_fail@plt+0x22f0>
   13a5c:	mov	r0, r4
   13a60:	pop	{r4, sl, fp, pc}
   13a64:	mov	r1, #0
   13a68:	str	r1, [r0]
   13a6c:	str	r1, [r0, #4]
   13a70:	str	r1, [r0, #8]
   13a74:	bx	lr
   13a78:	push	{r4, sl, fp, lr}
   13a7c:	add	fp, sp, #8
   13a80:	movw	r4, #25240	; 0x6298
   13a84:	movt	r4, #3
   13a88:	ldr	r0, [r4]
   13a8c:	cmp	r0, #0
   13a90:	bne	13aa0 <__assert_fail@plt+0x232c>
   13a94:	bl	135cc <__assert_fail@plt+0x1e58>
   13a98:	cmp	r0, #0
   13a9c:	beq	13aac <__assert_fail@plt+0x2338>
   13aa0:	ldr	r0, [r4]
   13aa4:	ldrd	r0, [r0, #16]
   13aa8:	pop	{r4, sl, fp, pc}
   13aac:	bl	1163c <__errno_location@plt>
   13ab0:	ldr	r4, [r0]
   13ab4:	movw	r1, #21329	; 0x5351
   13ab8:	movt	r1, #2
   13abc:	mov	r0, #0
   13ac0:	mov	r2, #5
   13ac4:	bl	114ec <dcgettext@plt>
   13ac8:	mov	r2, r0
   13acc:	mov	r0, #1
   13ad0:	mov	r1, r4
   13ad4:	bl	115ac <error@plt>
   13ad8:	push	{fp, lr}
   13adc:	mov	fp, sp
   13ae0:	movw	r0, #25232	; 0x6290
   13ae4:	movt	r0, #3
   13ae8:	ldrd	r0, [r0]
   13aec:	adds	r0, r0, #1
   13af0:	adc	r1, r1, #0
   13af4:	bl	131b4 <__assert_fail@plt+0x1a40>
   13af8:	clz	r0, r0
   13afc:	lsr	r0, r0, #5
   13b00:	pop	{fp, pc}
   13b04:	push	{fp, lr}
   13b08:	mov	fp, sp
   13b0c:	sub	sp, sp, #32
   13b10:	mov	r8, r3
   13b14:	mov	r9, r2
   13b18:	mov	r6, r0
   13b1c:	movw	sl, #25016	; 0x61b8
   13b20:	movt	sl, #3
   13b24:	ldr	r7, [sl]
   13b28:	movw	r1, #21347	; 0x5363
   13b2c:	movt	r1, #2
   13b30:	mov	r0, #0
   13b34:	mov	r2, #5
   13b38:	bl	114ec <dcgettext@plt>
   13b3c:	mov	r4, r0
   13b40:	movw	r0, #25276	; 0x62bc
   13b44:	movt	r0, #3
   13b48:	ldr	r5, [r0]
   13b4c:	ldrd	r0, [r6, #8]
   13b50:	add	r2, sp, #11
   13b54:	bl	13fd0 <__assert_fail@plt+0x285c>
   13b58:	bl	158c8 <__assert_fail@plt+0x4154>
   13b5c:	str	r0, [sp]
   13b60:	mov	r0, r7
   13b64:	mov	r1, #1
   13b68:	mov	r2, r4
   13b6c:	mov	r3, r5
   13b70:	bl	116a8 <__fprintf_chk@plt>
   13b74:	orrs	r0, r9, r8
   13b78:	ldr	r6, [sl]
   13b7c:	bne	13b98 <__assert_fail@plt+0x2424>
   13b80:	movw	r2, #20410	; 0x4fba
   13b84:	movt	r2, #2
   13b88:	mov	r0, r6
   13b8c:	mov	r1, #1
   13b90:	bl	116a8 <__fprintf_chk@plt>
   13b94:	bl	118a8 <__assert_fail@plt+0x134>
   13b98:	movw	r1, #21310	; 0x533e
   13b9c:	movt	r1, #2
   13ba0:	mov	r0, #0
   13ba4:	mov	r2, #5
   13ba8:	bl	114ec <dcgettext@plt>
   13bac:	mov	r4, r0
   13bb0:	add	r2, sp, #11
   13bb4:	mov	r0, r9
   13bb8:	mov	r1, r8
   13bbc:	bl	13fd0 <__assert_fail@plt+0x285c>
   13bc0:	mov	r3, r0
   13bc4:	mov	r0, r6
   13bc8:	mov	r1, #1
   13bcc:	mov	r2, r4
   13bd0:	bl	116a8 <__fprintf_chk@plt>
   13bd4:	bl	118a8 <__assert_fail@plt+0x134>
   13bd8:	movw	r1, #25268	; 0x62b4
   13bdc:	movt	r1, #3
   13be0:	str	r0, [r1]
   13be4:	bx	lr
   13be8:	movw	r1, #25272	; 0x62b8
   13bec:	movt	r1, #3
   13bf0:	strb	r0, [r1]
   13bf4:	bx	lr
   13bf8:	push	{r4, r5, r6, sl, fp, lr}
   13bfc:	add	fp, sp, #16
   13c00:	sub	sp, sp, #8
   13c04:	movw	r0, #25020	; 0x61bc
   13c08:	movt	r0, #3
   13c0c:	ldr	r0, [r0]
   13c10:	bl	2420c <__assert_fail@plt+0x12a98>
   13c14:	cmp	r0, #0
   13c18:	beq	13c40 <__assert_fail@plt+0x24cc>
   13c1c:	movw	r0, #25272	; 0x62b8
   13c20:	movt	r0, #3
   13c24:	ldrb	r0, [r0]
   13c28:	cmp	r0, #0
   13c2c:	beq	13c60 <__assert_fail@plt+0x24ec>
   13c30:	bl	1163c <__errno_location@plt>
   13c34:	ldr	r0, [r0]
   13c38:	cmp	r0, #32
   13c3c:	bne	13c60 <__assert_fail@plt+0x24ec>
   13c40:	movw	r0, #25016	; 0x61b8
   13c44:	movt	r0, #3
   13c48:	ldr	r0, [r0]
   13c4c:	bl	2420c <__assert_fail@plt+0x12a98>
   13c50:	cmp	r0, #0
   13c54:	subeq	sp, fp, #16
   13c58:	popeq	{r4, r5, r6, sl, fp, pc}
   13c5c:	b	13cd0 <__assert_fail@plt+0x255c>
   13c60:	movw	r1, #22063	; 0x562f
   13c64:	movt	r1, #2
   13c68:	mov	r0, #0
   13c6c:	mov	r2, #5
   13c70:	bl	114ec <dcgettext@plt>
   13c74:	mov	r4, r0
   13c78:	movw	r0, #25268	; 0x62b4
   13c7c:	movt	r0, #3
   13c80:	ldr	r6, [r0]
   13c84:	bl	1163c <__errno_location@plt>
   13c88:	ldr	r5, [r0]
   13c8c:	cmp	r6, #0
   13c90:	bne	13cac <__assert_fail@plt+0x2538>
   13c94:	movw	r2, #20951	; 0x51d7
   13c98:	movt	r2, #2
   13c9c:	mov	r0, #0
   13ca0:	mov	r1, r5
   13ca4:	mov	r3, r4
   13ca8:	b	13ccc <__assert_fail@plt+0x2558>
   13cac:	mov	r0, r6
   13cb0:	bl	15778 <__assert_fail@plt+0x4004>
   13cb4:	mov	r3, r0
   13cb8:	str	r4, [sp]
   13cbc:	movw	r2, #22075	; 0x563b
   13cc0:	movt	r2, #2
   13cc4:	mov	r0, #0
   13cc8:	mov	r1, r5
   13ccc:	bl	115ac <error@plt>
   13cd0:	movw	r0, #24928	; 0x6160
   13cd4:	movt	r0, #3
   13cd8:	ldr	r0, [r0]
   13cdc:	bl	11480 <_exit@plt>
   13ce0:	push	{r4, r5, fp, lr}
   13ce4:	add	fp, sp, #8
   13ce8:	sub	sp, sp, #8
   13cec:	mov	r4, r0
   13cf0:	bl	11690 <fileno@plt>
   13cf4:	cmn	r0, #1
   13cf8:	ble	13d70 <__assert_fail@plt+0x25fc>
   13cfc:	mov	r0, r4
   13d00:	bl	115e8 <__freading@plt>
   13d04:	cmp	r0, #0
   13d08:	beq	13d34 <__assert_fail@plt+0x25c0>
   13d0c:	mov	r0, r4
   13d10:	bl	11690 <fileno@plt>
   13d14:	mov	r1, #1
   13d18:	str	r1, [sp]
   13d1c:	mov	r2, #0
   13d20:	mov	r3, #0
   13d24:	bl	11564 <lseek64@plt>
   13d28:	and	r0, r0, r1
   13d2c:	cmn	r0, #1
   13d30:	beq	13d70 <__assert_fail@plt+0x25fc>
   13d34:	mov	r0, r4
   13d38:	bl	13de8 <__assert_fail@plt+0x2674>
   13d3c:	cmp	r0, #0
   13d40:	beq	13d70 <__assert_fail@plt+0x25fc>
   13d44:	bl	1163c <__errno_location@plt>
   13d48:	ldr	r5, [r0]
   13d4c:	mov	r0, r4
   13d50:	bl	116c0 <fclose@plt>
   13d54:	cmp	r5, #0
   13d58:	beq	13d68 <__assert_fail@plt+0x25f4>
   13d5c:	bl	1163c <__errno_location@plt>
   13d60:	str	r5, [r0]
   13d64:	mvn	r0, #0
   13d68:	sub	sp, fp, #8
   13d6c:	pop	{r4, r5, fp, pc}
   13d70:	mov	r0, r4
   13d74:	sub	sp, fp, #8
   13d78:	pop	{r4, r5, fp, lr}
   13d7c:	b	116c0 <fclose@plt>
   13d80:	push	{r4, r5, r6, r7, fp, lr}
   13d84:	add	fp, sp, #16
   13d88:	mov	r5, r0
   13d8c:	mov	r0, r1
   13d90:	mov	r1, r2
   13d94:	mov	r2, r3
   13d98:	bl	115b8 <open64@plt>
   13d9c:	mov	r4, r0
   13da0:	cmp	r0, r5
   13da4:	beq	13de0 <__assert_fail@plt+0x266c>
   13da8:	cmp	r4, #0
   13dac:	blt	13de0 <__assert_fail@plt+0x266c>
   13db0:	mov	r0, r4
   13db4:	mov	r1, r5
   13db8:	bl	11504 <dup2@plt>
   13dbc:	mov	r5, r0
   13dc0:	bl	1163c <__errno_location@plt>
   13dc4:	mov	r6, r0
   13dc8:	ldr	r7, [r0]
   13dcc:	mov	r0, r4
   13dd0:	bl	1175c <close@plt>
   13dd4:	str	r7, [r6]
   13dd8:	mov	r0, r5
   13ddc:	pop	{r4, r5, r6, r7, fp, pc}
   13de0:	mov	r0, r4
   13de4:	pop	{r4, r5, r6, r7, fp, pc}
   13de8:	push	{r4, sl, fp, lr}
   13dec:	add	fp, sp, #8
   13df0:	mov	r4, r0
   13df4:	cmp	r0, #0
   13df8:	beq	13e10 <__assert_fail@plt+0x269c>
   13dfc:	mov	r0, r4
   13e00:	bl	115e8 <__freading@plt>
   13e04:	cmp	r0, #0
   13e08:	movne	r0, r4
   13e0c:	blne	13e1c <__assert_fail@plt+0x26a8>
   13e10:	mov	r0, r4
   13e14:	pop	{r4, sl, fp, lr}
   13e18:	b	11444 <fflush@plt>
   13e1c:	ldrb	r1, [r0, #1]
   13e20:	tst	r1, #1
   13e24:	bxeq	lr
   13e28:	push	{fp, lr}
   13e2c:	mov	fp, sp
   13e30:	sub	sp, sp, #8
   13e34:	mov	r1, #1
   13e38:	str	r1, [sp]
   13e3c:	mov	r2, #0
   13e40:	mov	r3, #0
   13e44:	bl	13f2c <__assert_fail@plt+0x27b8>
   13e48:	mov	sp, fp
   13e4c:	pop	{fp, pc}
   13e50:	push	{r4, r5, r6, r7, fp, lr}
   13e54:	add	fp, sp, #16
   13e58:	mov	r5, r1
   13e5c:	bl	11720 <fopen64@plt>
   13e60:	mov	r4, #0
   13e64:	cmp	r0, #0
   13e68:	beq	13eb8 <__assert_fail@plt+0x2744>
   13e6c:	mov	r6, r0
   13e70:	bl	11690 <fileno@plt>
   13e74:	cmp	r0, #2
   13e78:	movhi	r0, r6
   13e7c:	pophi	{r4, r5, r6, r7, fp, pc}
   13e80:	bl	229c0 <__assert_fail@plt+0x1124c>
   13e84:	cmn	r0, #1
   13e88:	ble	13ee4 <__assert_fail@plt+0x2770>
   13e8c:	mov	r7, r0
   13e90:	mov	r0, r6
   13e94:	bl	13ce0 <__assert_fail@plt+0x256c>
   13e98:	cmp	r0, #0
   13e9c:	bne	13ec0 <__assert_fail@plt+0x274c>
   13ea0:	mov	r0, r7
   13ea4:	mov	r1, r5
   13ea8:	bl	113cc <fdopen@plt>
   13eac:	mov	r4, r0
   13eb0:	cmp	r0, #0
   13eb4:	beq	13ec0 <__assert_fail@plt+0x274c>
   13eb8:	mov	r0, r4
   13ebc:	pop	{r4, r5, r6, r7, fp, pc}
   13ec0:	bl	1163c <__errno_location@plt>
   13ec4:	mov	r4, r0
   13ec8:	ldr	r5, [r0]
   13ecc:	mov	r0, r7
   13ed0:	bl	1175c <close@plt>
   13ed4:	str	r5, [r4]
   13ed8:	mov	r4, #0
   13edc:	mov	r0, r4
   13ee0:	pop	{r4, r5, r6, r7, fp, pc}
   13ee4:	bl	1163c <__errno_location@plt>
   13ee8:	mov	r5, r0
   13eec:	ldr	r7, [r0]
   13ef0:	mov	r0, r6
   13ef4:	bl	13ce0 <__assert_fail@plt+0x256c>
   13ef8:	str	r7, [r5]
   13efc:	mov	r0, r4
   13f00:	pop	{r4, r5, r6, r7, fp, pc}
   13f04:	push	{r4, r5, r6, sl, fp, lr}
   13f08:	add	fp, sp, #16
   13f0c:	mov	r4, r0
   13f10:	bl	1163c <__errno_location@plt>
   13f14:	mov	r5, r0
   13f18:	ldr	r6, [r0]
   13f1c:	mov	r0, r4
   13f20:	bl	11468 <free@plt>
   13f24:	str	r6, [r5]
   13f28:	pop	{r4, r5, r6, sl, fp, pc}
   13f2c:	push	{r4, r5, r6, r7, fp, lr}
   13f30:	add	fp, sp, #16
   13f34:	sub	sp, sp, #8
   13f38:	mov	r5, r3
   13f3c:	mov	r6, r2
   13f40:	mov	r4, r0
   13f44:	ldr	r0, [r0, #4]
   13f48:	ldr	r1, [r4, #8]
   13f4c:	cmp	r1, r0
   13f50:	bne	13f6c <__assert_fail@plt+0x27f8>
   13f54:	ldrd	r0, [r4, #16]
   13f58:	cmp	r1, r0
   13f5c:	bne	13f6c <__assert_fail@plt+0x27f8>
   13f60:	ldr	r0, [r4, #36]	; 0x24
   13f64:	cmp	r0, #0
   13f68:	beq	13f84 <__assert_fail@plt+0x2810>
   13f6c:	mov	r0, r4
   13f70:	mov	r2, r6
   13f74:	mov	r3, r5
   13f78:	sub	sp, fp, #16
   13f7c:	pop	{r4, r5, r6, r7, fp, lr}
   13f80:	b	116cc <fseeko64@plt>
   13f84:	ldr	r7, [fp, #8]
   13f88:	mov	r0, r4
   13f8c:	bl	11690 <fileno@plt>
   13f90:	str	r7, [sp]
   13f94:	mov	r2, r6
   13f98:	mov	r3, r5
   13f9c:	bl	11564 <lseek64@plt>
   13fa0:	and	r2, r0, r1
   13fa4:	cmn	r2, #1
   13fa8:	mvneq	r0, #0
   13fac:	subeq	sp, fp, #16
   13fb0:	popeq	{r4, r5, r6, r7, fp, pc}
   13fb4:	strd	r0, [r4, #80]	; 0x50
   13fb8:	ldr	r0, [r4]
   13fbc:	bic	r0, r0, #16
   13fc0:	str	r0, [r4]
   13fc4:	mov	r0, #0
   13fc8:	sub	sp, fp, #16
   13fcc:	pop	{r4, r5, r6, r7, fp, pc}
   13fd0:	push	{r4, r5, r6, sl, fp, lr}
   13fd4:	add	fp, sp, #16
   13fd8:	mov	r4, r1
   13fdc:	mov	r5, r0
   13fe0:	mov	r0, #0
   13fe4:	strb	r0, [r2, #20]
   13fe8:	add	r6, r2, #19
   13fec:	cmp	r1, #0
   13ff0:	blt	14040 <__assert_fail@plt+0x28cc>
   13ff4:	mov	r0, r5
   13ff8:	mov	r1, r4
   13ffc:	mov	r2, #10
   14000:	mov	r3, #0
   14004:	bl	24768 <__assert_fail@plt+0x12ff4>
   14008:	add	r2, r0, r0, lsl #2
   1400c:	sub	r2, r5, r2, lsl #1
   14010:	add	r2, r2, #48	; 0x30
   14014:	strb	r2, [r6], #-1
   14018:	adds	r2, r5, #9
   1401c:	adc	r3, r4, #0
   14020:	rsbs	r2, r2, #18
   14024:	rscs	r2, r3, #0
   14028:	mov	r5, r0
   1402c:	mov	r4, r1
   14030:	bcc	13ff4 <__assert_fail@plt+0x2880>
   14034:	add	r6, r6, #1
   14038:	mov	r0, r6
   1403c:	pop	{r4, r5, r6, sl, fp, pc}
   14040:	mov	r0, r5
   14044:	mov	r1, r4
   14048:	mov	r2, #10
   1404c:	mov	r3, #0
   14050:	bl	24768 <__assert_fail@plt+0x12ff4>
   14054:	add	r2, r0, r0, lsl #2
   14058:	rsb	r2, r5, r2, lsl #1
   1405c:	add	r2, r2, #48	; 0x30
   14060:	strb	r2, [r6], #-1
   14064:	adds	r2, r5, #9
   14068:	adc	r3, r4, #0
   1406c:	rsbs	r2, r2, #18
   14070:	rscs	r2, r3, #0
   14074:	mov	r5, r0
   14078:	mov	r4, r1
   1407c:	bcc	14040 <__assert_fail@plt+0x28cc>
   14080:	mov	r0, #45	; 0x2d
   14084:	strb	r0, [r6]
   14088:	mov	r0, r6
   1408c:	pop	{r4, r5, r6, sl, fp, pc}
   14090:	push	{r4, r5, fp, lr}
   14094:	add	fp, sp, #8
   14098:	cmp	r0, #0
   1409c:	beq	14130 <__assert_fail@plt+0x29bc>
   140a0:	mov	r4, r0
   140a4:	mov	r1, #47	; 0x2f
   140a8:	bl	11708 <strrchr@plt>
   140ac:	cmp	r0, #0
   140b0:	mov	r5, r4
   140b4:	addne	r5, r0, #1
   140b8:	sub	r0, r5, r4
   140bc:	cmp	r0, #7
   140c0:	blt	14114 <__assert_fail@plt+0x29a0>
   140c4:	sub	r0, r5, #7
   140c8:	movw	r1, #22138	; 0x567a
   140cc:	movt	r1, #2
   140d0:	mov	r2, #7
   140d4:	bl	11744 <strncmp@plt>
   140d8:	cmp	r0, #0
   140dc:	bne	14114 <__assert_fail@plt+0x29a0>
   140e0:	movw	r1, #22146	; 0x5682
   140e4:	movt	r1, #2
   140e8:	mov	r0, r5
   140ec:	mov	r2, #3
   140f0:	bl	11744 <strncmp@plt>
   140f4:	cmp	r0, #0
   140f8:	beq	14104 <__assert_fail@plt+0x2990>
   140fc:	mov	r4, r5
   14100:	b	14114 <__assert_fail@plt+0x29a0>
   14104:	add	r4, r5, #3
   14108:	movw	r0, #25000	; 0x61a8
   1410c:	movt	r0, #3
   14110:	str	r4, [r0]
   14114:	movw	r0, #25004	; 0x61ac
   14118:	movt	r0, #3
   1411c:	str	r4, [r0]
   14120:	movw	r0, #25276	; 0x62bc
   14124:	movt	r0, #3
   14128:	str	r4, [r0]
   1412c:	pop	{r4, r5, fp, pc}
   14130:	movw	r0, #25016	; 0x61b8
   14134:	movt	r0, #3
   14138:	ldr	r3, [r0]
   1413c:	movw	r0, #22082	; 0x5642
   14140:	movt	r0, #2
   14144:	mov	r1, #55	; 0x37
   14148:	mov	r2, #1
   1414c:	bl	11558 <fwrite@plt>
   14150:	bl	11750 <abort@plt>
   14154:	push	{r4, r5, r6, sl, fp, lr}
   14158:	add	fp, sp, #16
   1415c:	mov	r4, r0
   14160:	movw	r0, #25280	; 0x62c0
   14164:	movt	r0, #3
   14168:	cmp	r4, #0
   1416c:	moveq	r4, r0
   14170:	bl	1163c <__errno_location@plt>
   14174:	mov	r5, r0
   14178:	ldr	r6, [r0]
   1417c:	mov	r0, r4
   14180:	mov	r1, #48	; 0x30
   14184:	bl	23184 <__assert_fail@plt+0x11a10>
   14188:	str	r6, [r5]
   1418c:	pop	{r4, r5, r6, sl, fp, pc}
   14190:	movw	r1, #25280	; 0x62c0
   14194:	movt	r1, #3
   14198:	cmp	r0, #0
   1419c:	movne	r1, r0
   141a0:	ldr	r0, [r1]
   141a4:	bx	lr
   141a8:	movw	r2, #25280	; 0x62c0
   141ac:	movt	r2, #3
   141b0:	cmp	r0, #0
   141b4:	movne	r2, r0
   141b8:	str	r1, [r2]
   141bc:	bx	lr
   141c0:	movw	r3, #25280	; 0x62c0
   141c4:	movt	r3, #3
   141c8:	cmp	r0, #0
   141cc:	movne	r3, r0
   141d0:	ubfx	r0, r1, #5, #3
   141d4:	add	r0, r3, r0, lsl #2
   141d8:	ldr	r3, [r0, #8]
   141dc:	and	r1, r1, #31
   141e0:	eor	r2, r2, r3, lsr r1
   141e4:	and	r2, r2, #1
   141e8:	eor	r2, r3, r2, lsl r1
   141ec:	str	r2, [r0, #8]
   141f0:	mov	r0, #1
   141f4:	and	r0, r0, r3, lsr r1
   141f8:	bx	lr
   141fc:	movw	r2, #25280	; 0x62c0
   14200:	movt	r2, #3
   14204:	cmp	r0, #0
   14208:	movne	r2, r0
   1420c:	ldr	r0, [r2, #4]
   14210:	str	r1, [r2, #4]
   14214:	bx	lr
   14218:	movw	r3, #25280	; 0x62c0
   1421c:	movt	r3, #3
   14220:	cmp	r0, #0
   14224:	movne	r3, r0
   14228:	mov	r0, #10
   1422c:	str	r0, [r3]
   14230:	cmp	r1, #0
   14234:	cmpne	r2, #0
   14238:	bne	14248 <__assert_fail@plt+0x2ad4>
   1423c:	push	{fp, lr}
   14240:	mov	fp, sp
   14244:	bl	11750 <abort@plt>
   14248:	str	r1, [r3, #40]	; 0x28
   1424c:	str	r2, [r3, #44]	; 0x2c
   14250:	bx	lr
   14254:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14258:	add	fp, sp, #28
   1425c:	sub	sp, sp, #20
   14260:	mov	r8, r3
   14264:	mov	r9, r2
   14268:	mov	sl, r1
   1426c:	mov	r7, r0
   14270:	ldr	r0, [fp, #8]
   14274:	movw	r5, #25280	; 0x62c0
   14278:	movt	r5, #3
   1427c:	cmp	r0, #0
   14280:	movne	r5, r0
   14284:	bl	1163c <__errno_location@plt>
   14288:	mov	r4, r0
   1428c:	ldm	r5, {r0, r1}
   14290:	ldr	r2, [r5, #40]	; 0x28
   14294:	ldr	r3, [r5, #44]	; 0x2c
   14298:	ldr	r6, [r4]
   1429c:	add	r5, r5, #8
   142a0:	stm	sp, {r0, r1, r5}
   142a4:	str	r2, [sp, #12]
   142a8:	str	r3, [sp, #16]
   142ac:	mov	r0, r7
   142b0:	mov	r1, sl
   142b4:	mov	r2, r9
   142b8:	mov	r3, r8
   142bc:	bl	142cc <__assert_fail@plt+0x2b58>
   142c0:	str	r6, [r4]
   142c4:	sub	sp, fp, #28
   142c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142d0:	add	fp, sp, #28
   142d4:	sub	sp, sp, #156	; 0x9c
   142d8:	mov	r9, r3
   142dc:	str	r2, [fp, #-84]	; 0xffffffac
   142e0:	mov	r6, r1
   142e4:	mov	r7, r0
   142e8:	ldr	r0, [fp, #12]
   142ec:	and	r1, r0, #4
   142f0:	str	r1, [sp, #32]
   142f4:	and	r1, r0, #1
   142f8:	str	r1, [sp, #36]	; 0x24
   142fc:	ubfx	sl, r0, #1, #1
   14300:	bl	11570 <__ctype_get_mb_cur_max@plt>
   14304:	str	r0, [sp, #40]	; 0x28
   14308:	ldr	r0, [fp, #24]
   1430c:	str	r0, [sp, #76]	; 0x4c
   14310:	ldr	r0, [fp, #20]
   14314:	str	r0, [sp, #68]	; 0x44
   14318:	ldr	r0, [fp, #8]
   1431c:	str	r0, [fp, #-60]	; 0xffffffc4
   14320:	mov	r0, #0
   14324:	str	r0, [sp, #72]	; 0x48
   14328:	mov	r0, #0
   1432c:	str	r0, [sp, #92]	; 0x5c
   14330:	mov	r0, #0
   14334:	str	r0, [fp, #-72]	; 0xffffffb8
   14338:	mov	r0, #0
   1433c:	mov	r1, #0
   14340:	str	r1, [fp, #-56]	; 0xffffffc8
   14344:	mov	r1, #0
   14348:	str	r1, [sp, #56]	; 0x38
   1434c:	mov	r5, #1
   14350:	str	r7, [sp, #80]	; 0x50
   14354:	mov	r4, r6
   14358:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1435c:	cmp	r6, #10
   14360:	bhi	152c8 <__assert_fail@plt+0x3b54>
   14364:	add	r1, pc, #20
   14368:	mov	r8, #0
   1436c:	mov	r2, #1
   14370:	mov	r3, #0
   14374:	ldr	ip, [fp, #-84]	; 0xffffffac
   14378:	mov	lr, r9
   1437c:	ldr	pc, [r1, r6, lsl #2]
   14380:	andeq	r4, r1, r8, asr r4
   14384:	andeq	r4, r1, r8, lsl #9
   14388:	andeq	r4, r1, r8, asr #8
   1438c:	andeq	r4, r1, r0, asr #8
   14390:	andeq	r4, r1, ip, ror r4
   14394:	ldrdeq	r4, [r1], -ip
   14398:	andeq	r4, r1, r8, ror #8
   1439c:	andeq	r4, r1, r8, lsr r5
   143a0:	andeq	r4, r1, ip, lsr #7
   143a4:	andeq	r4, r1, ip, lsr #7
   143a8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143ac:	movw	r0, #22228	; 0x56d4
   143b0:	movt	r0, #2
   143b4:	mov	r1, r6
   143b8:	bl	158d4 <__assert_fail@plt+0x4160>
   143bc:	str	r0, [sp, #68]	; 0x44
   143c0:	movw	r0, #21198	; 0x52ce
   143c4:	movt	r0, #2
   143c8:	mov	r1, r6
   143cc:	bl	158d4 <__assert_fail@plt+0x4160>
   143d0:	str	r0, [sp, #76]	; 0x4c
   143d4:	mov	r8, #0
   143d8:	tst	sl, #1
   143dc:	bne	14414 <__assert_fail@plt+0x2ca0>
   143e0:	ldr	r0, [sp, #68]	; 0x44
   143e4:	ldrb	r0, [r0]
   143e8:	cmp	r0, #0
   143ec:	beq	14414 <__assert_fail@plt+0x2ca0>
   143f0:	ldr	r1, [sp, #68]	; 0x44
   143f4:	add	r1, r1, #1
   143f8:	mov	r8, #0
   143fc:	cmp	r8, r4
   14400:	strbcc	r0, [r7, r8]
   14404:	ldrb	r0, [r1, r8]
   14408:	add	r8, r8, #1
   1440c:	cmp	r0, #0
   14410:	bne	143fc <__assert_fail@plt+0x2c88>
   14414:	ldr	r6, [sp, #76]	; 0x4c
   14418:	mov	r0, r6
   1441c:	bl	11624 <strlen@plt>
   14420:	str	r0, [fp, #-72]	; 0xffffffb8
   14424:	str	r6, [sp, #92]	; 0x5c
   14428:	mov	r2, #1
   1442c:	mov	r3, sl
   14430:	ldr	ip, [fp, #-84]	; 0xffffffac
   14434:	mov	lr, r9
   14438:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1443c:	b	14538 <__assert_fail@plt+0x2dc4>
   14440:	mov	r0, #1
   14444:	b	14488 <__assert_fail@plt+0x2d14>
   14448:	tst	sl, #1
   1444c:	bne	14488 <__assert_fail@plt+0x2d14>
   14450:	mov	r2, r0
   14454:	b	144b0 <__assert_fail@plt+0x2d3c>
   14458:	mov	r6, #0
   1445c:	mov	r8, #0
   14460:	mov	r2, r0
   14464:	b	14534 <__assert_fail@plt+0x2dc0>
   14468:	mov	r0, #1
   1446c:	str	r0, [fp, #-72]	; 0xffffffb8
   14470:	mov	r8, #0
   14474:	mov	r6, #5
   14478:	b	144f4 <__assert_fail@plt+0x2d80>
   1447c:	mov	r2, #1
   14480:	tst	sl, #1
   14484:	beq	144b0 <__assert_fail@plt+0x2d3c>
   14488:	mov	r1, #1
   1448c:	str	r1, [fp, #-72]	; 0xffffffb8
   14490:	mov	r8, #0
   14494:	mov	r6, #2
   14498:	movw	r1, #21198	; 0x52ce
   1449c:	movt	r1, #2
   144a0:	str	r1, [sp, #92]	; 0x5c
   144a4:	mov	r2, r0
   144a8:	mov	r3, #1
   144ac:	b	14538 <__assert_fail@plt+0x2dc4>
   144b0:	mov	r8, #1
   144b4:	mov	r6, #2
   144b8:	cmp	r4, #0
   144bc:	movne	r0, #39	; 0x27
   144c0:	strbne	r0, [r7]
   144c4:	movw	r0, #21198	; 0x52ce
   144c8:	movt	r0, #2
   144cc:	str	r0, [sp, #92]	; 0x5c
   144d0:	mov	r0, #1
   144d4:	str	r0, [fp, #-72]	; 0xffffffb8
   144d8:	b	14534 <__assert_fail@plt+0x2dc0>
   144dc:	mov	r6, #5
   144e0:	tst	sl, #1
   144e4:	beq	1450c <__assert_fail@plt+0x2d98>
   144e8:	mov	r0, #1
   144ec:	str	r0, [fp, #-72]	; 0xffffffb8
   144f0:	mov	r8, #0
   144f4:	movw	r0, #22226	; 0x56d2
   144f8:	movt	r0, #2
   144fc:	str	r0, [sp, #92]	; 0x5c
   14500:	mov	r2, #1
   14504:	mov	r3, #1
   14508:	b	14538 <__assert_fail@plt+0x2dc4>
   1450c:	cmp	r4, #0
   14510:	movne	r0, #34	; 0x22
   14514:	strbne	r0, [r7]
   14518:	mov	r8, #1
   1451c:	movw	r0, #22226	; 0x56d2
   14520:	movt	r0, #2
   14524:	str	r0, [sp, #92]	; 0x5c
   14528:	mov	r0, #1
   1452c:	str	r0, [fp, #-72]	; 0xffffffb8
   14530:	mov	r2, #1
   14534:	mov	r3, #0
   14538:	ldr	r0, [fp, #16]
   1453c:	cmp	r0, #0
   14540:	movwne	r0, #1
   14544:	and	r0, r0, r3
   14548:	str	r0, [fp, #-88]	; 0xffffffa8
   1454c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14550:	cmp	r0, #0
   14554:	movwne	r0, #1
   14558:	and	r1, r0, r3
   1455c:	and	r1, r2, r1
   14560:	str	r1, [sp, #48]	; 0x30
   14564:	str	r6, [fp, #-60]	; 0xffffffc4
   14568:	subs	r6, r6, #2
   1456c:	clz	r1, r6
   14570:	lsr	r1, r1, #5
   14574:	and	r1, r1, r3
   14578:	str	r1, [sp, #60]	; 0x3c
   1457c:	str	r6, [fp, #-80]	; 0xffffffb0
   14580:	mov	r1, r6
   14584:	movwne	r1, #1
   14588:	str	r3, [fp, #-76]	; 0xffffffb4
   1458c:	eor	r3, r3, #1
   14590:	str	r3, [sp, #88]	; 0x58
   14594:	orr	r3, r1, r3
   14598:	str	r3, [sp, #64]	; 0x40
   1459c:	and	r1, r1, r2
   145a0:	str	r1, [fp, #-68]	; 0xffffffbc
   145a4:	and	r0, r0, r1
   145a8:	str	r0, [fp, #-64]	; 0xffffffc0
   145ac:	str	r2, [sp, #84]	; 0x54
   145b0:	eor	r0, r2, #1
   145b4:	str	r0, [sp, #52]	; 0x34
   145b8:	mov	r6, #0
   145bc:	cmn	lr, #1
   145c0:	beq	145d0 <__assert_fail@plt+0x2e5c>
   145c4:	cmp	r6, lr
   145c8:	bne	145dc <__assert_fail@plt+0x2e68>
   145cc:	b	15148 <__assert_fail@plt+0x39d4>
   145d0:	ldrb	r0, [ip, r6]
   145d4:	cmp	r0, #0
   145d8:	beq	15148 <__assert_fail@plt+0x39d4>
   145dc:	str	r5, [fp, #-48]	; 0xffffffd0
   145e0:	mov	sl, #0
   145e4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   145e8:	cmp	r0, #0
   145ec:	beq	14620 <__assert_fail@plt+0x2eac>
   145f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   145f4:	add	r5, r6, r0
   145f8:	cmp	r0, #2
   145fc:	bcc	14618 <__assert_fail@plt+0x2ea4>
   14600:	cmn	lr, #1
   14604:	bne	14618 <__assert_fail@plt+0x2ea4>
   14608:	mov	r0, ip
   1460c:	bl	11624 <strlen@plt>
   14610:	ldr	ip, [fp, #-84]	; 0xffffffac
   14614:	mov	lr, r0
   14618:	cmp	r5, lr
   1461c:	bls	1462c <__assert_fail@plt+0x2eb8>
   14620:	mov	r0, #0
   14624:	str	r0, [fp, #-52]	; 0xffffffcc
   14628:	b	14678 <__assert_fail@plt+0x2f04>
   1462c:	mov	r5, r4
   14630:	mov	r4, lr
   14634:	add	r0, ip, r6
   14638:	ldr	r1, [sp, #92]	; 0x5c
   1463c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14640:	bl	114e0 <memcmp@plt>
   14644:	cmp	r0, #0
   14648:	mov	r1, r0
   1464c:	movwne	r1, #1
   14650:	ldr	r2, [sp, #88]	; 0x58
   14654:	orr	r1, r1, r2
   14658:	tst	r1, #1
   1465c:	beq	1520c <__assert_fail@plt+0x3a98>
   14660:	clz	r0, r0
   14664:	lsr	r0, r0, #5
   14668:	str	r0, [fp, #-52]	; 0xffffffcc
   1466c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14670:	mov	lr, r4
   14674:	mov	r4, r5
   14678:	ldrb	r5, [ip, r6]
   1467c:	cmp	r5, #126	; 0x7e
   14680:	bhi	14a3c <__assert_fail@plt+0x32c8>
   14684:	mov	r9, #1
   14688:	mov	r2, #110	; 0x6e
   1468c:	mov	r0, #97	; 0x61
   14690:	add	r3, pc, #4
   14694:	mov	r1, #0
   14698:	ldr	pc, [r3, r5, lsl #2]
   1469c:	andeq	r4, r1, r4, lsr r9
   146a0:	andeq	r4, r1, ip, lsr sl
   146a4:	andeq	r4, r1, ip, lsr sl
   146a8:	andeq	r4, r1, ip, lsr sl
   146ac:	andeq	r4, r1, ip, lsr sl
   146b0:	andeq	r4, r1, ip, lsr sl
   146b4:	andeq	r4, r1, ip, lsr sl
   146b8:	andeq	r4, r1, r0, lsl #22
   146bc:	andeq	r4, r1, r4, lsl r9
   146c0:	andeq	r4, r1, ip, lsl #18
   146c4:	andeq	r4, r1, r0, lsr #18
   146c8:	andeq	r4, r1, r4, lsr #19
   146cc:	andeq	r4, r1, r4, lsl #18
   146d0:	andeq	r4, r1, ip, lsl r9
   146d4:	andeq	r4, r1, ip, lsr sl
   146d8:	andeq	r4, r1, ip, lsr sl
   146dc:	andeq	r4, r1, ip, lsr sl
   146e0:	andeq	r4, r1, ip, lsr sl
   146e4:	andeq	r4, r1, ip, lsr sl
   146e8:	andeq	r4, r1, ip, lsr sl
   146ec:	andeq	r4, r1, ip, lsr sl
   146f0:	andeq	r4, r1, ip, lsr sl
   146f4:	andeq	r4, r1, ip, lsr sl
   146f8:	andeq	r4, r1, ip, lsr sl
   146fc:	andeq	r4, r1, ip, lsr sl
   14700:	andeq	r4, r1, ip, lsr sl
   14704:	andeq	r4, r1, ip, lsr sl
   14708:	andeq	r4, r1, ip, lsr sl
   1470c:	andeq	r4, r1, ip, lsr sl
   14710:	andeq	r4, r1, ip, lsr sl
   14714:	andeq	r4, r1, ip, lsr sl
   14718:	andeq	r4, r1, ip, lsr sl
   1471c:			; <UNDEFINED> instruction: 0x00014ab0
   14720:			; <UNDEFINED> instruction: 0x00014ab4
   14724:			; <UNDEFINED> instruction: 0x00014ab4
   14728:	andeq	r4, r1, ip, lsr #17
   1472c:			; <UNDEFINED> instruction: 0x00014ab4
   14730:	muleq	r1, r8, r8
   14734:			; <UNDEFINED> instruction: 0x00014ab4
   14738:	andeq	r4, r1, ip, lsr #19
   1473c:			; <UNDEFINED> instruction: 0x00014ab4
   14740:			; <UNDEFINED> instruction: 0x00014ab4
   14744:			; <UNDEFINED> instruction: 0x00014ab4
   14748:	muleq	r1, r8, r8
   1474c:	muleq	r1, r8, r8
   14750:	muleq	r1, r8, r8
   14754:	muleq	r1, r8, r8
   14758:	muleq	r1, r8, r8
   1475c:	muleq	r1, r8, r8
   14760:	muleq	r1, r8, r8
   14764:	muleq	r1, r8, r8
   14768:	muleq	r1, r8, r8
   1476c:	muleq	r1, r8, r8
   14770:	muleq	r1, r8, r8
   14774:	muleq	r1, r8, r8
   14778:	muleq	r1, r8, r8
   1477c:	muleq	r1, r8, r8
   14780:	muleq	r1, r8, r8
   14784:	muleq	r1, r8, r8
   14788:			; <UNDEFINED> instruction: 0x00014ab4
   1478c:			; <UNDEFINED> instruction: 0x00014ab4
   14790:			; <UNDEFINED> instruction: 0x00014ab4
   14794:			; <UNDEFINED> instruction: 0x00014ab4
   14798:	andeq	r4, r1, r4, ror r9
   1479c:	andeq	r4, r1, ip, lsr sl
   147a0:	muleq	r1, r8, r8
   147a4:	muleq	r1, r8, r8
   147a8:	muleq	r1, r8, r8
   147ac:	muleq	r1, r8, r8
   147b0:	muleq	r1, r8, r8
   147b4:	muleq	r1, r8, r8
   147b8:	muleq	r1, r8, r8
   147bc:	muleq	r1, r8, r8
   147c0:	muleq	r1, r8, r8
   147c4:	muleq	r1, r8, r8
   147c8:	muleq	r1, r8, r8
   147cc:	muleq	r1, r8, r8
   147d0:	muleq	r1, r8, r8
   147d4:	muleq	r1, r8, r8
   147d8:	muleq	r1, r8, r8
   147dc:	muleq	r1, r8, r8
   147e0:	muleq	r1, r8, r8
   147e4:	muleq	r1, r8, r8
   147e8:	muleq	r1, r8, r8
   147ec:	muleq	r1, r8, r8
   147f0:	muleq	r1, r8, r8
   147f4:	muleq	r1, r8, r8
   147f8:	muleq	r1, r8, r8
   147fc:	muleq	r1, r8, r8
   14800:	muleq	r1, r8, r8
   14804:	muleq	r1, r8, r8
   14808:			; <UNDEFINED> instruction: 0x00014ab4
   1480c:	andeq	r4, r1, r0, ror #17
   14810:	muleq	r1, r8, r8
   14814:			; <UNDEFINED> instruction: 0x00014ab4
   14818:	muleq	r1, r8, r8
   1481c:			; <UNDEFINED> instruction: 0x00014ab4
   14820:	muleq	r1, r8, r8
   14824:	muleq	r1, r8, r8
   14828:	muleq	r1, r8, r8
   1482c:	muleq	r1, r8, r8
   14830:	muleq	r1, r8, r8
   14834:	muleq	r1, r8, r8
   14838:	muleq	r1, r8, r8
   1483c:	muleq	r1, r8, r8
   14840:	muleq	r1, r8, r8
   14844:	muleq	r1, r8, r8
   14848:	muleq	r1, r8, r8
   1484c:	muleq	r1, r8, r8
   14850:	muleq	r1, r8, r8
   14854:	muleq	r1, r8, r8
   14858:	muleq	r1, r8, r8
   1485c:	muleq	r1, r8, r8
   14860:	muleq	r1, r8, r8
   14864:	muleq	r1, r8, r8
   14868:	muleq	r1, r8, r8
   1486c:	muleq	r1, r8, r8
   14870:	muleq	r1, r8, r8
   14874:	muleq	r1, r8, r8
   14878:	muleq	r1, r8, r8
   1487c:	muleq	r1, r8, r8
   14880:	muleq	r1, r8, r8
   14884:	muleq	r1, r8, r8
   14888:	andeq	r4, r1, r0, asr #17
   1488c:			; <UNDEFINED> instruction: 0x00014ab4
   14890:	andeq	r4, r1, r0, asr #17
   14894:	andeq	r4, r1, ip, lsr #17
   14898:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1489c:	cmp	r0, #0
   148a0:	beq	14b14 <__assert_fail@plt+0x33a0>
   148a4:	ldr	r0, [fp, #16]
   148a8:	b	14b18 <__assert_fail@plt+0x33a4>
   148ac:	mov	r9, #0
   148b0:	cmp	r6, #0
   148b4:	beq	14ab0 <__assert_fail@plt+0x333c>
   148b8:	mov	sl, #0
   148bc:	b	14898 <__assert_fail@plt+0x3124>
   148c0:	mov	r9, #0
   148c4:	cmn	lr, #1
   148c8:	beq	14a94 <__assert_fail@plt+0x3320>
   148cc:	cmp	r6, #0
   148d0:	bne	148b8 <__assert_fail@plt+0x3144>
   148d4:	cmp	lr, #1
   148d8:	beq	14ab0 <__assert_fail@plt+0x333c>
   148dc:	b	148b8 <__assert_fail@plt+0x3144>
   148e0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   148e4:	cmp	r0, #2
   148e8:	bne	14adc <__assert_fail@plt+0x3368>
   148ec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   148f0:	tst	r0, #1
   148f4:	bne	15224 <__assert_fail@plt+0x3ab0>
   148f8:	mov	sl, #0
   148fc:	mov	r0, #92	; 0x5c
   14900:	b	14af0 <__assert_fail@plt+0x337c>
   14904:	mov	r0, #102	; 0x66
   14908:	b	14b00 <__assert_fail@plt+0x338c>
   1490c:	mov	r2, #116	; 0x74
   14910:	b	14920 <__assert_fail@plt+0x31ac>
   14914:	mov	r0, #98	; 0x62
   14918:	b	14b00 <__assert_fail@plt+0x338c>
   1491c:	mov	r2, #114	; 0x72
   14920:	ldr	r0, [sp, #64]	; 0x40
   14924:	tst	r0, #1
   14928:	mov	r0, r2
   1492c:	bne	14b00 <__assert_fail@plt+0x338c>
   14930:	b	15224 <__assert_fail@plt+0x3ab0>
   14934:	ldr	r0, [sp, #84]	; 0x54
   14938:	tst	r0, #1
   1493c:	beq	14bf0 <__assert_fail@plt+0x347c>
   14940:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14944:	tst	r0, #1
   14948:	bne	15224 <__assert_fail@plt+0x3ab0>
   1494c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14950:	cmp	r0, #2
   14954:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14958:	movwne	r0, #1
   1495c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14960:	orr	r0, r0, r2
   14964:	tst	r0, #1
   14968:	beq	14fe4 <__assert_fail@plt+0x3870>
   1496c:	mov	r0, r8
   14970:	b	15018 <__assert_fail@plt+0x38a4>
   14974:	mov	sl, #0
   14978:	mov	r5, #63	; 0x3f
   1497c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14980:	cmp	r0, #5
   14984:	beq	14da4 <__assert_fail@plt+0x3630>
   14988:	cmp	r0, #2
   1498c:	bne	14e44 <__assert_fail@plt+0x36d0>
   14990:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14994:	tst	r0, #1
   14998:	mov	r9, #0
   1499c:	beq	14898 <__assert_fail@plt+0x3124>
   149a0:	b	15224 <__assert_fail@plt+0x3ab0>
   149a4:	mov	r0, #118	; 0x76
   149a8:	b	14b00 <__assert_fail@plt+0x338c>
   149ac:	mov	r5, #39	; 0x27
   149b0:	mov	r0, #1
   149b4:	str	r0, [sp, #56]	; 0x38
   149b8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   149bc:	cmp	r0, #2
   149c0:	bne	14c10 <__assert_fail@plt+0x349c>
   149c4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   149c8:	tst	r0, #1
   149cc:	bne	15224 <__assert_fail@plt+0x3ab0>
   149d0:	ldr	r2, [sp, #72]	; 0x48
   149d4:	cmp	r2, #0
   149d8:	mov	r0, r2
   149dc:	movwne	r0, #1
   149e0:	clz	r1, r4
   149e4:	lsr	r1, r1, #5
   149e8:	orrs	r0, r0, r1
   149ec:	moveq	r2, r4
   149f0:	str	r2, [sp, #72]	; 0x48
   149f4:	moveq	r4, r0
   149f8:	cmp	r8, r4
   149fc:	movcc	r0, #39	; 0x27
   14a00:	strbcc	r0, [r7, r8]
   14a04:	add	r0, r8, #1
   14a08:	cmp	r0, r4
   14a0c:	movcc	r1, #92	; 0x5c
   14a10:	strbcc	r1, [r7, r0]
   14a14:	add	r0, r8, #2
   14a18:	cmp	r0, r4
   14a1c:	movcc	r1, #39	; 0x27
   14a20:	strbcc	r1, [r7, r0]
   14a24:	add	r8, r8, #3
   14a28:	mov	r0, #0
   14a2c:	str	r0, [fp, #-56]	; 0xffffffc8
   14a30:	mov	sl, #0
   14a34:	mov	r9, #1
   14a38:	b	14898 <__assert_fail@plt+0x3124>
   14a3c:	str	r4, [sp, #24]
   14a40:	ldr	r0, [sp, #40]	; 0x28
   14a44:	cmp	r0, #1
   14a48:	bne	14c18 <__assert_fail@plt+0x34a4>
   14a4c:	str	lr, [sp, #28]
   14a50:	bl	1160c <__ctype_b_loc@plt>
   14a54:	ldr	ip, [fp, #-84]	; 0xffffffac
   14a58:	ldr	r0, [r0]
   14a5c:	add	r0, r0, r5, lsl #1
   14a60:	ldrb	r0, [r0, #1]
   14a64:	ubfx	r9, r0, #6, #1
   14a68:	mov	r1, #1
   14a6c:	ldr	r4, [sp, #24]
   14a70:	ldr	r0, [sp, #52]	; 0x34
   14a74:	orr	r0, r9, r0
   14a78:	mov	r2, r1
   14a7c:	cmp	r1, #1
   14a80:	bhi	14e4c <__assert_fail@plt+0x36d8>
   14a84:	tst	r0, #1
   14a88:	beq	14e4c <__assert_fail@plt+0x36d8>
   14a8c:	ldr	lr, [sp, #28]
   14a90:	b	14898 <__assert_fail@plt+0x3124>
   14a94:	cmp	r6, #0
   14a98:	ldrbeq	r0, [ip, #1]
   14a9c:	cmpeq	r0, #0
   14aa0:	beq	14ab0 <__assert_fail@plt+0x333c>
   14aa4:	mvn	lr, #0
   14aa8:	mov	sl, #0
   14aac:	b	14898 <__assert_fail@plt+0x3124>
   14ab0:	mov	r1, #1
   14ab4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14ab8:	cmp	r0, #2
   14abc:	bne	14ad4 <__assert_fail@plt+0x3360>
   14ac0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14ac4:	tst	r0, #1
   14ac8:	mov	r9, r1
   14acc:	beq	14898 <__assert_fail@plt+0x3124>
   14ad0:	b	15224 <__assert_fail@plt+0x3ab0>
   14ad4:	mov	r9, r1
   14ad8:	b	14898 <__assert_fail@plt+0x3124>
   14adc:	mov	sl, #0
   14ae0:	mov	r0, #92	; 0x5c
   14ae4:	ldr	r1, [sp, #48]	; 0x30
   14ae8:	cmp	r1, #0
   14aec:	beq	14b00 <__assert_fail@plt+0x338c>
   14af0:	mov	r9, #0
   14af4:	cmp	sl, #0
   14af8:	beq	150b0 <__assert_fail@plt+0x393c>
   14afc:	b	150ec <__assert_fail@plt+0x3978>
   14b00:	mov	r9, #0
   14b04:	ldr	r1, [sp, #84]	; 0x54
   14b08:	tst	r1, #1
   14b0c:	mov	sl, #0
   14b10:	bne	14b50 <__assert_fail@plt+0x33dc>
   14b14:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14b18:	cmp	r0, #0
   14b1c:	mov	r0, r5
   14b20:	beq	14b44 <__assert_fail@plt+0x33d0>
   14b24:	ubfx	r0, r5, #5, #3
   14b28:	ldr	r1, [fp, #16]
   14b2c:	ldr	r0, [r1, r0, lsl #2]
   14b30:	and	r1, r5, #31
   14b34:	mov	r2, #1
   14b38:	tst	r0, r2, lsl r1
   14b3c:	mov	r0, r5
   14b40:	bne	14b50 <__assert_fail@plt+0x33dc>
   14b44:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14b48:	cmp	r1, #0
   14b4c:	beq	150a8 <__assert_fail@plt+0x3934>
   14b50:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14b54:	tst	r1, #1
   14b58:	bne	15224 <__assert_fail@plt+0x3ab0>
   14b5c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14b60:	cmp	r1, #2
   14b64:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14b68:	movwne	r1, #1
   14b6c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14b70:	orr	r1, r1, r2
   14b74:	tst	r1, #1
   14b78:	beq	14b84 <__assert_fail@plt+0x3410>
   14b7c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14b80:	b	14bc0 <__assert_fail@plt+0x344c>
   14b84:	cmp	r8, r4
   14b88:	movcc	r1, #39	; 0x27
   14b8c:	strbcc	r1, [r7, r8]
   14b90:	add	r1, r8, #1
   14b94:	cmp	r1, r4
   14b98:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14b9c:	movcc	r2, #36	; 0x24
   14ba0:	strbcc	r2, [r7, r1]
   14ba4:	add	r1, r8, #2
   14ba8:	cmp	r1, r4
   14bac:	movcc	r2, #39	; 0x27
   14bb0:	strbcc	r2, [r7, r1]
   14bb4:	add	r8, r8, #3
   14bb8:	mov	r1, #1
   14bbc:	str	r1, [fp, #-56]	; 0xffffffc8
   14bc0:	cmp	r8, r4
   14bc4:	movcc	r1, #92	; 0x5c
   14bc8:	strbcc	r1, [r7, r8]
   14bcc:	add	r8, r8, #1
   14bd0:	cmp	r8, r4
   14bd4:	strbcc	r0, [r7, r8]
   14bd8:	and	r5, r5, r9
   14bdc:	add	r8, r8, #1
   14be0:	add	r6, r6, #1
   14be4:	cmn	lr, #1
   14be8:	bne	145c4 <__assert_fail@plt+0x2e50>
   14bec:	b	145d0 <__assert_fail@plt+0x2e5c>
   14bf0:	mov	r9, #0
   14bf4:	ldr	r0, [sp, #36]	; 0x24
   14bf8:	cmp	r0, #0
   14bfc:	mov	sl, #0
   14c00:	mov	r5, #0
   14c04:	beq	14b14 <__assert_fail@plt+0x33a0>
   14c08:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14c0c:	b	14be0 <__assert_fail@plt+0x346c>
   14c10:	mov	r9, #1
   14c14:	b	14898 <__assert_fail@plt+0x3124>
   14c18:	mov	r0, #0
   14c1c:	str	r0, [fp, #-36]	; 0xffffffdc
   14c20:	str	r0, [fp, #-40]	; 0xffffffd8
   14c24:	cmn	lr, #1
   14c28:	bne	14c3c <__assert_fail@plt+0x34c8>
   14c2c:	mov	r0, ip
   14c30:	bl	11624 <strlen@plt>
   14c34:	ldr	ip, [fp, #-84]	; 0xffffffac
   14c38:	mov	lr, r0
   14c3c:	add	r0, ip, r6
   14c40:	str	r0, [sp, #20]
   14c44:	mov	r9, #1
   14c48:	mov	r7, #0
   14c4c:	sub	r4, fp, #40	; 0x28
   14c50:	str	lr, [sp, #28]
   14c54:	str	r7, [sp, #44]	; 0x2c
   14c58:	add	r7, r7, r6
   14c5c:	add	r1, ip, r7
   14c60:	sub	r2, lr, r7
   14c64:	sub	r0, fp, #44	; 0x2c
   14c68:	mov	r3, r4
   14c6c:	bl	245c0 <__assert_fail@plt+0x12e4c>
   14c70:	cmp	r0, #0
   14c74:	beq	15134 <__assert_fail@plt+0x39c0>
   14c78:	cmn	r0, #1
   14c7c:	beq	150f4 <__assert_fail@plt+0x3980>
   14c80:	cmn	r0, #2
   14c84:	ldr	lr, [sp, #28]
   14c88:	beq	150fc <__assert_fail@plt+0x3988>
   14c8c:	cmp	r0, #2
   14c90:	mov	r1, #0
   14c94:	movwcc	r1, #1
   14c98:	ldr	r2, [sp, #60]	; 0x3c
   14c9c:	eor	r2, r2, #1
   14ca0:	orrs	r1, r2, r1
   14ca4:	ldr	r4, [sp, #24]
   14ca8:	bne	14d68 <__assert_fail@plt+0x35f4>
   14cac:	ldr	r1, [sp, #44]	; 0x2c
   14cb0:	ldr	r2, [sp, #20]
   14cb4:	add	r1, r2, r1
   14cb8:	mov	r2, #1
   14cbc:	ldrb	r3, [r1, r2]
   14cc0:	sub	r3, r3, #91	; 0x5b
   14cc4:	cmp	r3, #33	; 0x21
   14cc8:	bhi	14d5c <__assert_fail@plt+0x35e8>
   14ccc:	add	r7, pc, #0
   14cd0:	ldr	pc, [r7, r3, lsl #2]
   14cd4:	andeq	r5, r1, ip, lsl r2
   14cd8:	andeq	r5, r1, ip, lsl r2
   14cdc:	andeq	r4, r1, ip, asr sp
   14ce0:	andeq	r5, r1, ip, lsl r2
   14ce4:	andeq	r4, r1, ip, asr sp
   14ce8:	andeq	r5, r1, ip, lsl r2
   14cec:	andeq	r4, r1, ip, asr sp
   14cf0:	andeq	r4, r1, ip, asr sp
   14cf4:	andeq	r4, r1, ip, asr sp
   14cf8:	andeq	r4, r1, ip, asr sp
   14cfc:	andeq	r4, r1, ip, asr sp
   14d00:	andeq	r4, r1, ip, asr sp
   14d04:	andeq	r4, r1, ip, asr sp
   14d08:	andeq	r4, r1, ip, asr sp
   14d0c:	andeq	r4, r1, ip, asr sp
   14d10:	andeq	r4, r1, ip, asr sp
   14d14:	andeq	r4, r1, ip, asr sp
   14d18:	andeq	r4, r1, ip, asr sp
   14d1c:	andeq	r4, r1, ip, asr sp
   14d20:	andeq	r4, r1, ip, asr sp
   14d24:	andeq	r4, r1, ip, asr sp
   14d28:	andeq	r4, r1, ip, asr sp
   14d2c:	andeq	r4, r1, ip, asr sp
   14d30:	andeq	r4, r1, ip, asr sp
   14d34:	andeq	r4, r1, ip, asr sp
   14d38:	andeq	r4, r1, ip, asr sp
   14d3c:	andeq	r4, r1, ip, asr sp
   14d40:	andeq	r4, r1, ip, asr sp
   14d44:	andeq	r4, r1, ip, asr sp
   14d48:	andeq	r4, r1, ip, asr sp
   14d4c:	andeq	r4, r1, ip, asr sp
   14d50:	andeq	r4, r1, ip, asr sp
   14d54:	andeq	r4, r1, ip, asr sp
   14d58:	andeq	r5, r1, ip, lsl r2
   14d5c:	add	r2, r2, #1
   14d60:	cmp	r2, r0
   14d64:	bcc	14cbc <__assert_fail@plt+0x3548>
   14d68:	ldr	r7, [sp, #44]	; 0x2c
   14d6c:	add	r7, r0, r7
   14d70:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14d74:	bl	11540 <iswprint@plt>
   14d78:	cmp	r0, #0
   14d7c:	movwne	r0, #1
   14d80:	and	r9, r9, r0
   14d84:	sub	r4, fp, #40	; 0x28
   14d88:	mov	r0, r4
   14d8c:	bl	114bc <mbsinit@plt>
   14d90:	ldr	lr, [sp, #28]
   14d94:	cmp	r0, #0
   14d98:	ldr	ip, [fp, #-84]	; 0xffffffac
   14d9c:	beq	14c54 <__assert_fail@plt+0x34e0>
   14da0:	b	1513c <__assert_fail@plt+0x39c8>
   14da4:	ldr	r0, [sp, #32]
   14da8:	cmp	r0, #0
   14dac:	beq	14e44 <__assert_fail@plt+0x36d0>
   14db0:	add	r0, r6, #2
   14db4:	cmp	r0, lr
   14db8:	bcs	14e44 <__assert_fail@plt+0x36d0>
   14dbc:	add	r1, ip, r6
   14dc0:	ldrb	r1, [r1, #1]
   14dc4:	cmp	r1, #63	; 0x3f
   14dc8:	bne	14e44 <__assert_fail@plt+0x36d0>
   14dcc:	ldrb	r9, [ip, r0]
   14dd0:	sub	r2, r9, #33	; 0x21
   14dd4:	cmp	r2, #29
   14dd8:	bhi	14e44 <__assert_fail@plt+0x36d0>
   14ddc:	mov	r3, #1
   14de0:	movw	r1, #20929	; 0x51c1
   14de4:	movt	r1, #14336	; 0x3800
   14de8:	tst	r1, r3, lsl r2
   14dec:	beq	14e44 <__assert_fail@plt+0x36d0>
   14df0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14df4:	tst	r1, #1
   14df8:	bne	15224 <__assert_fail@plt+0x3ab0>
   14dfc:	cmp	r8, r4
   14e00:	movcc	r1, #63	; 0x3f
   14e04:	strbcc	r1, [r7, r8]
   14e08:	add	r2, r8, #1
   14e0c:	cmp	r2, r4
   14e10:	movcc	r1, #34	; 0x22
   14e14:	strbcc	r1, [r7, r2]
   14e18:	add	r2, r8, #2
   14e1c:	cmp	r2, r4
   14e20:	movcc	r1, #34	; 0x22
   14e24:	strbcc	r1, [r7, r2]
   14e28:	add	r2, r8, #3
   14e2c:	cmp	r2, r4
   14e30:	movcc	r1, #63	; 0x3f
   14e34:	strbcc	r1, [r7, r2]
   14e38:	add	r8, r8, #4
   14e3c:	mov	r6, r0
   14e40:	mov	r5, r9
   14e44:	mov	r9, #0
   14e48:	b	14898 <__assert_fail@plt+0x3124>
   14e4c:	add	r1, r2, r6
   14e50:	str	r1, [sp, #44]	; 0x2c
   14e54:	add	r1, r6, #1
   14e58:	mov	r3, #0
   14e5c:	ldr	lr, [sp, #28]
   14e60:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14e64:	tst	r0, #1
   14e68:	bne	14f5c <__assert_fail@plt+0x37e8>
   14e6c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14e70:	tst	r2, #1
   14e74:	bne	15224 <__assert_fail@plt+0x3ab0>
   14e78:	cmp	r6, #2
   14e7c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14e80:	movwne	r3, #1
   14e84:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14e88:	orr	r3, r3, r2
   14e8c:	tst	r3, #1
   14e90:	bne	14ecc <__assert_fail@plt+0x3758>
   14e94:	cmp	r8, r4
   14e98:	movcc	r2, #39	; 0x27
   14e9c:	strbcc	r2, [r7, r8]
   14ea0:	add	r3, r8, #1
   14ea4:	cmp	r3, r4
   14ea8:	movcc	r2, #36	; 0x24
   14eac:	strbcc	r2, [r7, r3]
   14eb0:	add	r3, r8, #2
   14eb4:	cmp	r3, r4
   14eb8:	movcc	r2, #39	; 0x27
   14ebc:	strbcc	r2, [r7, r3]
   14ec0:	add	r8, r8, #3
   14ec4:	mov	r2, #1
   14ec8:	str	r2, [fp, #-56]	; 0xffffffc8
   14ecc:	cmp	r8, r4
   14ed0:	movcc	r2, #92	; 0x5c
   14ed4:	strbcc	r2, [r7, r8]
   14ed8:	add	r3, r8, #1
   14edc:	cmp	r3, r4
   14ee0:	bcs	14f00 <__assert_fail@plt+0x378c>
   14ee4:	and	r7, r5, #192	; 0xc0
   14ee8:	mov	r2, #48	; 0x30
   14eec:	orr	r7, r2, r7, lsr #6
   14ef0:	ldr	r6, [sp, #80]	; 0x50
   14ef4:	strb	r7, [r6, r3]
   14ef8:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14efc:	ldr	r7, [sp, #80]	; 0x50
   14f00:	add	r3, r8, #2
   14f04:	cmp	r3, r4
   14f08:	bcs	14f28 <__assert_fail@plt+0x37b4>
   14f0c:	lsr	r7, r5, #3
   14f10:	mov	r2, #6
   14f14:	bfi	r7, r2, #3, #29
   14f18:	ldr	r6, [sp, #80]	; 0x50
   14f1c:	strb	r7, [r6, r3]
   14f20:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14f24:	ldr	r7, [sp, #80]	; 0x50
   14f28:	mov	r2, #6
   14f2c:	bfi	r5, r2, #3, #29
   14f30:	add	r8, r8, #3
   14f34:	mov	r3, #1
   14f38:	b	14f80 <__assert_fail@plt+0x380c>
   14f3c:	ldr	r7, [sp, #80]	; 0x50
   14f40:	cmp	r8, r4
   14f44:	strbcc	r5, [r7, r8]
   14f48:	ldrb	r5, [ip, r1]
   14f4c:	add	r1, r1, #1
   14f50:	add	r8, r8, #1
   14f54:	tst	r0, #1
   14f58:	beq	14e6c <__assert_fail@plt+0x36f8>
   14f5c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14f60:	tst	r2, #1
   14f64:	beq	14f78 <__assert_fail@plt+0x3804>
   14f68:	cmp	r8, r4
   14f6c:	movcc	r2, #92	; 0x5c
   14f70:	strbcc	r2, [r7, r8]
   14f74:	add	r8, r8, #1
   14f78:	mov	r2, #0
   14f7c:	str	r2, [fp, #-52]	; 0xffffffcc
   14f80:	and	sl, r3, #1
   14f84:	ldr	r2, [sp, #44]	; 0x2c
   14f88:	cmp	r2, r1
   14f8c:	bls	15098 <__assert_fail@plt+0x3924>
   14f90:	cmp	sl, #0
   14f94:	movwne	sl, #1
   14f98:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14f9c:	mvn	r7, r2
   14fa0:	orr	r7, r7, sl
   14fa4:	tst	r7, #1
   14fa8:	bne	14f3c <__assert_fail@plt+0x37c8>
   14fac:	cmp	r8, r4
   14fb0:	ldrcc	r7, [sp, #80]	; 0x50
   14fb4:	movcc	r2, #39	; 0x27
   14fb8:	strbcc	r2, [r7, r8]
   14fbc:	add	r7, r8, #1
   14fc0:	cmp	r7, r4
   14fc4:	ldrcc	r6, [sp, #80]	; 0x50
   14fc8:	movcc	r2, #39	; 0x27
   14fcc:	strbcc	r2, [r6, r7]
   14fd0:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   14fd4:	add	r8, r8, #2
   14fd8:	mov	r2, #0
   14fdc:	str	r2, [fp, #-56]	; 0xffffffc8
   14fe0:	b	14f3c <__assert_fail@plt+0x37c8>
   14fe4:	cmp	r8, r4
   14fe8:	movcc	r0, #39	; 0x27
   14fec:	strbcc	r0, [r7, r8]
   14ff0:	add	r0, r8, #1
   14ff4:	cmp	r0, r4
   14ff8:	movcc	r1, #36	; 0x24
   14ffc:	strbcc	r1, [r7, r0]
   15000:	add	r0, r8, #2
   15004:	cmp	r0, r4
   15008:	movcc	r1, #39	; 0x27
   1500c:	strbcc	r1, [r7, r0]
   15010:	add	r0, r8, #3
   15014:	mov	r2, #1
   15018:	cmp	r0, r4
   1501c:	movcc	r1, #92	; 0x5c
   15020:	strbcc	r1, [r7, r0]
   15024:	str	r2, [fp, #-56]	; 0xffffffc8
   15028:	add	r8, r0, #1
   1502c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15030:	cmp	r1, #2
   15034:	beq	15088 <__assert_fail@plt+0x3914>
   15038:	add	r1, r6, #1
   1503c:	mov	r9, #0
   15040:	mov	sl, #1
   15044:	mov	r5, #48	; 0x30
   15048:	cmp	r1, lr
   1504c:	bcs	14898 <__assert_fail@plt+0x3124>
   15050:	ldrb	r1, [ip, r1]
   15054:	sub	r1, r1, #48	; 0x30
   15058:	uxtb	r1, r1
   1505c:	cmp	r1, #9
   15060:	bhi	14898 <__assert_fail@plt+0x3124>
   15064:	cmp	r8, r4
   15068:	movcc	r1, #48	; 0x30
   1506c:	strbcc	r1, [r7, r8]
   15070:	add	r1, r0, #2
   15074:	cmp	r1, r4
   15078:	movcc	r2, #48	; 0x30
   1507c:	strbcc	r2, [r7, r1]
   15080:	add	r8, r0, #3
   15084:	b	14898 <__assert_fail@plt+0x3124>
   15088:	mov	r0, #48	; 0x30
   1508c:	mov	sl, #1
   15090:	mov	r9, #0
   15094:	b	14b44 <__assert_fail@plt+0x33d0>
   15098:	sub	r6, r1, #1
   1509c:	cmp	sl, #0
   150a0:	movwne	sl, #1
   150a4:	mov	r0, r5
   150a8:	cmp	sl, #0
   150ac:	bne	150ec <__assert_fail@plt+0x3978>
   150b0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   150b4:	tst	r1, #1
   150b8:	beq	150ec <__assert_fail@plt+0x3978>
   150bc:	cmp	r8, r4
   150c0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   150c4:	movcc	r1, #39	; 0x27
   150c8:	strbcc	r1, [r7, r8]
   150cc:	add	r1, r8, #1
   150d0:	cmp	r1, r4
   150d4:	movcc	r2, #39	; 0x27
   150d8:	strbcc	r2, [r7, r1]
   150dc:	add	r8, r8, #2
   150e0:	mov	r1, #0
   150e4:	str	r1, [fp, #-56]	; 0xffffffc8
   150e8:	b	14bd0 <__assert_fail@plt+0x345c>
   150ec:	ldr	r5, [fp, #-48]	; 0xffffffd0
   150f0:	b	14bd0 <__assert_fail@plt+0x345c>
   150f4:	mov	r9, #0
   150f8:	b	15134 <__assert_fail@plt+0x39c0>
   150fc:	mov	r9, #0
   15100:	cmp	r7, lr
   15104:	bcs	15134 <__assert_fail@plt+0x39c0>
   15108:	ldr	ip, [fp, #-84]	; 0xffffffac
   1510c:	ldr	r7, [sp, #44]	; 0x2c
   15110:	ldr	r0, [sp, #20]
   15114:	ldrb	r0, [r0, r7]
   15118:	cmp	r0, #0
   1511c:	beq	1513c <__assert_fail@plt+0x39c8>
   15120:	add	r7, r7, #1
   15124:	add	r0, r6, r7
   15128:	cmp	r0, lr
   1512c:	bcc	15110 <__assert_fail@plt+0x399c>
   15130:	b	1513c <__assert_fail@plt+0x39c8>
   15134:	ldr	ip, [fp, #-84]	; 0xffffffac
   15138:	ldr	r7, [sp, #44]	; 0x2c
   1513c:	mov	r1, r7
   15140:	ldr	r7, [sp, #80]	; 0x50
   15144:	b	14a6c <__assert_fail@plt+0x32f8>
   15148:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1514c:	eor	r0, r1, #2
   15150:	orr	r0, r0, r8
   15154:	clz	r0, r0
   15158:	lsr	r0, r0, #5
   1515c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15160:	tst	r2, r0
   15164:	bne	15224 <__assert_fail@plt+0x3ab0>
   15168:	cmp	r1, #2
   1516c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   15170:	movwne	r0, #1
   15174:	orr	r0, r2, r0
   15178:	tst	r0, #1
   1517c:	ldreq	r0, [sp, #56]	; 0x38
   15180:	eoreq	r0, r0, #1
   15184:	tsteq	r0, #1
   15188:	bne	151bc <__assert_fail@plt+0x3a48>
   1518c:	mov	r9, lr
   15190:	tst	r5, #1
   15194:	bne	1528c <__assert_fail@plt+0x3b18>
   15198:	ldr	r0, [sp, #72]	; 0x48
   1519c:	cmp	r0, #0
   151a0:	beq	151bc <__assert_fail@plt+0x3a48>
   151a4:	mov	r5, #0
   151a8:	cmp	r4, #0
   151ac:	ldr	r0, [sp, #84]	; 0x54
   151b0:	mov	sl, r2
   151b4:	ldr	r6, [sp, #72]	; 0x48
   151b8:	beq	14354 <__assert_fail@plt+0x2be0>
   151bc:	ldr	r1, [sp, #92]	; 0x5c
   151c0:	clz	r0, r1
   151c4:	lsr	r0, r0, #5
   151c8:	orr	r0, r0, r2
   151cc:	tst	r0, #1
   151d0:	bne	151fc <__assert_fail@plt+0x3a88>
   151d4:	ldrb	r0, [r1]
   151d8:	cmp	r0, #0
   151dc:	beq	151fc <__assert_fail@plt+0x3a88>
   151e0:	add	r1, r1, #1
   151e4:	cmp	r8, r4
   151e8:	strbcc	r0, [r7, r8]
   151ec:	add	r8, r8, #1
   151f0:	ldrb	r0, [r1], #1
   151f4:	cmp	r0, #0
   151f8:	bne	151e4 <__assert_fail@plt+0x3a70>
   151fc:	cmp	r8, r4
   15200:	movcc	r0, #0
   15204:	strbcc	r0, [r7, r8]
   15208:	b	15280 <__assert_fail@plt+0x3b0c>
   1520c:	ldr	ip, [fp, #-84]	; 0xffffffac
   15210:	mov	lr, r4
   15214:	mov	r4, r5
   15218:	b	15224 <__assert_fail@plt+0x3ab0>
   1521c:	ldr	r7, [sp, #80]	; 0x50
   15220:	ldr	ip, [fp, #-84]	; 0xffffffac
   15224:	mov	r0, #0
   15228:	ldr	r1, [fp, #12]
   1522c:	bic	r1, r1, #2
   15230:	ldr	r2, [sp, #84]	; 0x54
   15234:	tst	r2, #1
   15238:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1523c:	mov	r2, r3
   15240:	movwne	r2, #4
   15244:	cmp	r3, #2
   15248:	movne	r2, r3
   1524c:	str	r2, [sp]
   15250:	str	r1, [sp, #4]
   15254:	str	r0, [sp, #8]
   15258:	ldr	r0, [sp, #68]	; 0x44
   1525c:	str	r0, [sp, #12]
   15260:	ldr	r0, [sp, #76]	; 0x4c
   15264:	str	r0, [sp, #16]
   15268:	mov	r0, r7
   1526c:	mov	r1, r4
   15270:	mov	r2, ip
   15274:	mov	r3, lr
   15278:	bl	142cc <__assert_fail@plt+0x2b58>
   1527c:	mov	r8, r0
   15280:	mov	r0, r8
   15284:	sub	sp, fp, #28
   15288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1528c:	mov	r0, #5
   15290:	str	r0, [sp]
   15294:	ldr	r0, [fp, #12]
   15298:	str	r0, [sp, #4]
   1529c:	ldr	r0, [fp, #16]
   152a0:	str	r0, [sp, #8]
   152a4:	ldr	r0, [sp, #68]	; 0x44
   152a8:	str	r0, [sp, #12]
   152ac:	ldr	r0, [sp, #76]	; 0x4c
   152b0:	str	r0, [sp, #16]
   152b4:	mov	r0, r7
   152b8:	ldr	r1, [sp, #72]	; 0x48
   152bc:	ldr	r2, [fp, #-84]	; 0xffffffac
   152c0:	mov	r3, r9
   152c4:	b	15278 <__assert_fail@plt+0x3b04>
   152c8:	bl	11750 <abort@plt>
   152cc:	mov	r3, r2
   152d0:	mov	r2, #0
   152d4:	b	152d8 <__assert_fail@plt+0x3b64>
   152d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152dc:	add	fp, sp, #28
   152e0:	sub	sp, sp, #36	; 0x24
   152e4:	mov	r4, r2
   152e8:	str	r2, [sp, #24]
   152ec:	mov	r5, r1
   152f0:	mov	r6, r0
   152f4:	str	r0, [sp, #20]
   152f8:	movw	r8, #25280	; 0x62c0
   152fc:	movt	r8, #3
   15300:	cmp	r3, #0
   15304:	movne	r8, r3
   15308:	bl	1163c <__errno_location@plt>
   1530c:	str	r0, [sp, #28]
   15310:	ldm	r8, {r3, r9}
   15314:	ldr	r1, [r8, #40]	; 0x28
   15318:	ldr	r2, [r8, #44]	; 0x2c
   1531c:	ldr	r7, [r0]
   15320:	str	r7, [sp, #32]
   15324:	add	sl, r8, #8
   15328:	cmp	r4, #0
   1532c:	orreq	r9, r9, #1
   15330:	stm	sp, {r3, r9, sl}
   15334:	str	r1, [sp, #12]
   15338:	str	r2, [sp, #16]
   1533c:	mov	r0, #0
   15340:	mov	r1, #0
   15344:	mov	r2, r6
   15348:	mov	r3, r5
   1534c:	mov	r7, r5
   15350:	bl	142cc <__assert_fail@plt+0x2b58>
   15354:	mov	r5, r0
   15358:	add	r4, r0, #1
   1535c:	mov	r0, r4
   15360:	bl	22ecc <__assert_fail@plt+0x11758>
   15364:	mov	r6, r0
   15368:	ldr	r0, [r8]
   1536c:	ldr	r1, [r8, #40]	; 0x28
   15370:	ldr	r2, [r8, #44]	; 0x2c
   15374:	stm	sp, {r0, r9, sl}
   15378:	str	r1, [sp, #12]
   1537c:	str	r2, [sp, #16]
   15380:	mov	r0, r6
   15384:	mov	r1, r4
   15388:	ldr	r2, [sp, #20]
   1538c:	mov	r3, r7
   15390:	bl	142cc <__assert_fail@plt+0x2b58>
   15394:	ldr	r0, [sp, #24]
   15398:	ldr	r1, [sp, #32]
   1539c:	ldr	r2, [sp, #28]
   153a0:	str	r1, [r2]
   153a4:	cmp	r0, #0
   153a8:	strne	r5, [r0]
   153ac:	mov	r0, r6
   153b0:	sub	sp, fp, #28
   153b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   153bc:	add	fp, sp, #24
   153c0:	movw	r8, #24936	; 0x6168
   153c4:	movt	r8, #3
   153c8:	ldr	r4, [r8]
   153cc:	movw	r5, #24940	; 0x616c
   153d0:	movt	r5, #3
   153d4:	ldr	r0, [r5]
   153d8:	cmp	r0, #2
   153dc:	blt	15408 <__assert_fail@plt+0x3c94>
   153e0:	add	r7, r4, #12
   153e4:	mov	r6, #0
   153e8:	ldr	r0, [r7, r6, lsl #3]
   153ec:	bl	13f04 <__assert_fail@plt+0x2790>
   153f0:	add	r0, r6, #1
   153f4:	ldr	r1, [r5]
   153f8:	add	r2, r6, #2
   153fc:	cmp	r2, r1
   15400:	mov	r6, r0
   15404:	blt	153e8 <__assert_fail@plt+0x3c74>
   15408:	ldr	r0, [r4, #4]
   1540c:	movw	r7, #25328	; 0x62f0
   15410:	movt	r7, #3
   15414:	cmp	r0, r7
   15418:	beq	15430 <__assert_fail@plt+0x3cbc>
   1541c:	bl	13f04 <__assert_fail@plt+0x2790>
   15420:	movw	r0, #24944	; 0x6170
   15424:	movt	r0, #3
   15428:	mov	r6, #256	; 0x100
   1542c:	strd	r6, [r0]
   15430:	movw	r6, #24944	; 0x6170
   15434:	movt	r6, #3
   15438:	cmp	r4, r6
   1543c:	beq	1544c <__assert_fail@plt+0x3cd8>
   15440:	mov	r0, r4
   15444:	bl	13f04 <__assert_fail@plt+0x2790>
   15448:	str	r6, [r8]
   1544c:	mov	r0, #1
   15450:	str	r0, [r5]
   15454:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15458:	movw	r3, #25280	; 0x62c0
   1545c:	movt	r3, #3
   15460:	mvn	r2, #0
   15464:	b	15468 <__assert_fail@plt+0x3cf4>
   15468:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1546c:	add	fp, sp, #28
   15470:	sub	sp, sp, #44	; 0x2c
   15474:	mov	r7, r3
   15478:	str	r2, [sp, #36]	; 0x24
   1547c:	str	r1, [sp, #32]
   15480:	mov	r5, r0
   15484:	bl	1163c <__errno_location@plt>
   15488:	cmp	r5, #0
   1548c:	blt	155f8 <__assert_fail@plt+0x3e84>
   15490:	cmn	r5, #-2147483647	; 0x80000001
   15494:	beq	155f8 <__assert_fail@plt+0x3e84>
   15498:	movw	r4, #24936	; 0x6168
   1549c:	movt	r4, #3
   154a0:	ldr	r6, [r4]
   154a4:	str	r0, [sp, #28]
   154a8:	ldr	r0, [r0]
   154ac:	str	r0, [sp, #24]
   154b0:	movw	r8, #24940	; 0x616c
   154b4:	movt	r8, #3
   154b8:	ldr	r1, [r8]
   154bc:	cmp	r1, r5
   154c0:	ble	154cc <__assert_fail@plt+0x3d58>
   154c4:	mov	sl, r6
   154c8:	b	15534 <__assert_fail@plt+0x3dc0>
   154cc:	str	r1, [fp, #-32]	; 0xffffffe0
   154d0:	mov	r0, #8
   154d4:	str	r0, [sp]
   154d8:	movw	r9, #24944	; 0x6170
   154dc:	movt	r9, #3
   154e0:	subs	r0, r6, r9
   154e4:	movne	r0, r6
   154e8:	add	r2, r5, #1
   154ec:	sub	r2, r2, r1
   154f0:	sub	r1, fp, #32
   154f4:	mvn	r3, #-2147483648	; 0x80000000
   154f8:	bl	22fb4 <__assert_fail@plt+0x11840>
   154fc:	mov	sl, r0
   15500:	str	r0, [r4]
   15504:	cmp	r6, r9
   15508:	ldrdeq	r0, [r9]
   1550c:	stmeq	sl, {r0, r1}
   15510:	ldr	r1, [r8]
   15514:	add	r0, sl, r1, lsl #3
   15518:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1551c:	sub	r1, r2, r1
   15520:	lsl	r2, r1, #3
   15524:	mov	r1, #0
   15528:	bl	1166c <memset@plt>
   1552c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15530:	str	r0, [r8]
   15534:	mov	r9, sl
   15538:	ldr	r6, [r9, r5, lsl #3]!
   1553c:	ldr	r4, [r9, #4]!
   15540:	ldm	r7, {r0, r1}
   15544:	ldr	r2, [r7, #40]	; 0x28
   15548:	ldr	r3, [r7, #44]	; 0x2c
   1554c:	orr	r8, r1, #1
   15550:	add	r1, r7, #8
   15554:	stm	sp, {r0, r8}
   15558:	str	r1, [sp, #20]
   1555c:	add	r0, sp, #8
   15560:	stm	r0, {r1, r2, r3}
   15564:	mov	r0, r4
   15568:	mov	r1, r6
   1556c:	ldr	r2, [sp, #32]
   15570:	ldr	r3, [sp, #36]	; 0x24
   15574:	bl	142cc <__assert_fail@plt+0x2b58>
   15578:	cmp	r6, r0
   1557c:	bhi	155e0 <__assert_fail@plt+0x3e6c>
   15580:	add	r6, r0, #1
   15584:	str	r6, [sl, r5, lsl #3]
   15588:	movw	r0, #25328	; 0x62f0
   1558c:	movt	r0, #3
   15590:	cmp	r4, r0
   15594:	beq	155a0 <__assert_fail@plt+0x3e2c>
   15598:	mov	r0, r4
   1559c:	bl	13f04 <__assert_fail@plt+0x2790>
   155a0:	mov	r0, r6
   155a4:	bl	22ecc <__assert_fail@plt+0x11758>
   155a8:	mov	r4, r0
   155ac:	str	r0, [r9]
   155b0:	ldr	r0, [r7]
   155b4:	ldr	r1, [r7, #40]	; 0x28
   155b8:	ldr	r2, [r7, #44]	; 0x2c
   155bc:	stm	sp, {r0, r8}
   155c0:	ldr	r0, [sp, #20]
   155c4:	add	r3, sp, #8
   155c8:	stm	r3, {r0, r1, r2}
   155cc:	mov	r0, r4
   155d0:	mov	r1, r6
   155d4:	ldr	r2, [sp, #32]
   155d8:	ldr	r3, [sp, #36]	; 0x24
   155dc:	bl	142cc <__assert_fail@plt+0x2b58>
   155e0:	ldr	r0, [sp, #28]
   155e4:	ldr	r1, [sp, #24]
   155e8:	str	r1, [r0]
   155ec:	mov	r0, r4
   155f0:	sub	sp, fp, #28
   155f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155f8:	bl	11750 <abort@plt>
   155fc:	movw	r3, #25280	; 0x62c0
   15600:	movt	r3, #3
   15604:	b	15468 <__assert_fail@plt+0x3cf4>
   15608:	mov	r1, r0
   1560c:	mov	r0, #0
   15610:	b	15458 <__assert_fail@plt+0x3ce4>
   15614:	mov	r2, r1
   15618:	mov	r1, r0
   1561c:	mov	r0, #0
   15620:	b	155fc <__assert_fail@plt+0x3e88>
   15624:	push	{r4, r5, r6, sl, fp, lr}
   15628:	add	fp, sp, #16
   1562c:	sub	sp, sp, #48	; 0x30
   15630:	mov	r4, r2
   15634:	mov	r5, r0
   15638:	mov	r6, sp
   1563c:	mov	r0, r6
   15640:	bl	15660 <__assert_fail@plt+0x3eec>
   15644:	mov	r0, r5
   15648:	mov	r1, r4
   1564c:	mvn	r2, #0
   15650:	mov	r3, r6
   15654:	bl	15468 <__assert_fail@plt+0x3cf4>
   15658:	sub	sp, fp, #16
   1565c:	pop	{r4, r5, r6, sl, fp, pc}
   15660:	vmov.i32	q8, #0	; 0x00000000
   15664:	mov	r2, #32
   15668:	mov	r3, r0
   1566c:	vst1.32	{d16-d17}, [r3], r2
   15670:	vst1.32	{d16-d17}, [r3]
   15674:	add	r2, r0, #16
   15678:	vst1.32	{d16-d17}, [r2]
   1567c:	cmp	r1, #10
   15680:	strne	r1, [r0]
   15684:	bxne	lr
   15688:	push	{fp, lr}
   1568c:	mov	fp, sp
   15690:	bl	11750 <abort@plt>
   15694:	push	{r4, r5, r6, r7, fp, lr}
   15698:	add	fp, sp, #16
   1569c:	sub	sp, sp, #48	; 0x30
   156a0:	mov	r4, r3
   156a4:	mov	r5, r2
   156a8:	mov	r6, r0
   156ac:	mov	r7, sp
   156b0:	mov	r0, r7
   156b4:	bl	15660 <__assert_fail@plt+0x3eec>
   156b8:	mov	r0, r6
   156bc:	mov	r1, r5
   156c0:	mov	r2, r4
   156c4:	mov	r3, r7
   156c8:	bl	15468 <__assert_fail@plt+0x3cf4>
   156cc:	sub	sp, fp, #16
   156d0:	pop	{r4, r5, r6, r7, fp, pc}
   156d4:	mov	r2, r1
   156d8:	mov	r1, r0
   156dc:	mov	r0, #0
   156e0:	b	15624 <__assert_fail@plt+0x3eb0>
   156e4:	mov	r3, r2
   156e8:	mov	r2, r1
   156ec:	mov	r1, r0
   156f0:	mov	r0, #0
   156f4:	b	15694 <__assert_fail@plt+0x3f20>
   156f8:	push	{r4, r5, r6, sl, fp, lr}
   156fc:	add	fp, sp, #16
   15700:	sub	sp, sp, #48	; 0x30
   15704:	mov	r4, r1
   15708:	mov	r5, r0
   1570c:	mov	r0, #32
   15710:	movw	r1, #25280	; 0x62c0
   15714:	movt	r1, #3
   15718:	add	r3, r1, #16
   1571c:	vld1.64	{d16-d17}, [r1], r0
   15720:	mov	r6, sp
   15724:	vld1.64	{d18-d19}, [r3]
   15728:	add	r3, r6, #16
   1572c:	vld1.64	{d20-d21}, [r1]
   15730:	vst1.64	{d18-d19}, [r3]
   15734:	mov	r1, r6
   15738:	vst1.64	{d16-d17}, [r1], r0
   1573c:	vst1.64	{d20-d21}, [r1]
   15740:	mov	r0, r6
   15744:	mov	r1, r2
   15748:	mov	r2, #1
   1574c:	bl	141c0 <__assert_fail@plt+0x2a4c>
   15750:	mov	r0, #0
   15754:	mov	r1, r5
   15758:	mov	r2, r4
   1575c:	mov	r3, r6
   15760:	bl	15468 <__assert_fail@plt+0x3cf4>
   15764:	sub	sp, fp, #16
   15768:	pop	{r4, r5, r6, sl, fp, pc}
   1576c:	mov	r2, r1
   15770:	mvn	r1, #0
   15774:	b	156f8 <__assert_fail@plt+0x3f84>
   15778:	mov	r1, #58	; 0x3a
   1577c:	b	1576c <__assert_fail@plt+0x3ff8>
   15780:	mov	r2, #58	; 0x3a
   15784:	b	156f8 <__assert_fail@plt+0x3f84>
   15788:	push	{r4, r5, r6, sl, fp, lr}
   1578c:	add	fp, sp, #16
   15790:	sub	sp, sp, #48	; 0x30
   15794:	mov	r4, r2
   15798:	mov	r5, r0
   1579c:	mov	r6, sp
   157a0:	mov	r0, r6
   157a4:	bl	15660 <__assert_fail@plt+0x3eec>
   157a8:	mov	r0, r6
   157ac:	mov	r1, #58	; 0x3a
   157b0:	mov	r2, #1
   157b4:	bl	141c0 <__assert_fail@plt+0x2a4c>
   157b8:	mov	r0, r5
   157bc:	mov	r1, r4
   157c0:	mvn	r2, #0
   157c4:	mov	r3, r6
   157c8:	bl	15468 <__assert_fail@plt+0x3cf4>
   157cc:	sub	sp, fp, #16
   157d0:	pop	{r4, r5, r6, sl, fp, pc}
   157d4:	push	{fp, lr}
   157d8:	mov	fp, sp
   157dc:	sub	sp, sp, #8
   157e0:	mvn	ip, #0
   157e4:	str	ip, [sp]
   157e8:	bl	157f4 <__assert_fail@plt+0x4080>
   157ec:	mov	sp, fp
   157f0:	pop	{fp, pc}
   157f4:	push	{r4, r5, r6, r7, fp, lr}
   157f8:	add	fp, sp, #16
   157fc:	sub	sp, sp, #48	; 0x30
   15800:	mov	r7, r3
   15804:	mov	r5, r0
   15808:	mov	r0, #32
   1580c:	movw	r3, #25280	; 0x62c0
   15810:	movt	r3, #3
   15814:	add	r4, r3, #16
   15818:	vld1.64	{d16-d17}, [r3], r0
   1581c:	mov	r6, sp
   15820:	vld1.64	{d18-d19}, [r4]
   15824:	add	r4, r6, #16
   15828:	vld1.64	{d20-d21}, [r3]
   1582c:	vst1.64	{d18-d19}, [r4]
   15830:	mov	r3, r6
   15834:	vst1.64	{d16-d17}, [r3], r0
   15838:	vst1.64	{d20-d21}, [r3]
   1583c:	mov	r0, r6
   15840:	bl	14218 <__assert_fail@plt+0x2aa4>
   15844:	ldr	r2, [fp, #8]
   15848:	mov	r0, r5
   1584c:	mov	r1, r7
   15850:	mov	r3, r6
   15854:	bl	15468 <__assert_fail@plt+0x3cf4>
   15858:	sub	sp, fp, #16
   1585c:	pop	{r4, r5, r6, r7, fp, pc}
   15860:	mov	r3, r2
   15864:	mov	r2, r1
   15868:	mov	r1, r0
   1586c:	mov	r0, #0
   15870:	b	157d4 <__assert_fail@plt+0x4060>
   15874:	push	{fp, lr}
   15878:	mov	fp, sp
   1587c:	sub	sp, sp, #8
   15880:	mov	ip, r2
   15884:	mov	r2, r1
   15888:	mov	r1, r0
   1588c:	str	r3, [sp]
   15890:	mov	r0, #0
   15894:	mov	r3, ip
   15898:	bl	157f4 <__assert_fail@plt+0x4080>
   1589c:	mov	sp, fp
   158a0:	pop	{fp, pc}
   158a4:	movw	r3, #24952	; 0x6178
   158a8:	movt	r3, #3
   158ac:	b	15468 <__assert_fail@plt+0x3cf4>
   158b0:	mov	r2, r1
   158b4:	mov	r1, r0
   158b8:	mov	r0, #0
   158bc:	b	158a4 <__assert_fail@plt+0x4130>
   158c0:	mvn	r2, #0
   158c4:	b	158a4 <__assert_fail@plt+0x4130>
   158c8:	mov	r1, r0
   158cc:	mov	r0, #0
   158d0:	b	158c0 <__assert_fail@plt+0x414c>
   158d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   158d8:	add	fp, sp, #24
   158dc:	sub	sp, sp, #16
   158e0:	mov	r4, r1
   158e4:	mov	r5, r0
   158e8:	mov	r7, #0
   158ec:	mov	r0, #0
   158f0:	mov	r1, r5
   158f4:	mov	r2, #5
   158f8:	bl	114ec <dcgettext@plt>
   158fc:	cmp	r0, r5
   15900:	beq	1590c <__assert_fail@plt+0x4198>
   15904:	sub	sp, fp, #24
   15908:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1590c:	bl	24588 <__assert_fail@plt+0x12e14>
   15910:	mov	r6, r0
   15914:	mov	r8, #56	; 0x38
   15918:	mov	r0, #45	; 0x2d
   1591c:	stm	sp, {r0, r8}
   15920:	str	r7, [sp, #8]
   15924:	str	r7, [sp, #12]
   15928:	mov	r0, r6
   1592c:	mov	r1, #85	; 0x55
   15930:	mov	r2, #84	; 0x54
   15934:	mov	r3, #70	; 0x46
   15938:	bl	159d0 <__assert_fail@plt+0x425c>
   1593c:	cmp	r0, #0
   15940:	beq	1595c <__assert_fail@plt+0x41e8>
   15944:	ldrb	r1, [r5]
   15948:	movw	r2, #22230	; 0x56d6
   1594c:	movt	r2, #2
   15950:	movw	r0, #22234	; 0x56da
   15954:	movt	r0, #2
   15958:	b	159a0 <__assert_fail@plt+0x422c>
   1595c:	mov	r0, #48	; 0x30
   15960:	mov	r1, #51	; 0x33
   15964:	str	r8, [sp]
   15968:	stmib	sp, {r0, r1}
   1596c:	str	r0, [sp, #12]
   15970:	mov	r0, r6
   15974:	mov	r1, #71	; 0x47
   15978:	mov	r2, #66	; 0x42
   1597c:	mov	r3, #49	; 0x31
   15980:	bl	159d0 <__assert_fail@plt+0x425c>
   15984:	cmp	r0, #0
   15988:	beq	159b0 <__assert_fail@plt+0x423c>
   1598c:	ldrb	r1, [r5]
   15990:	movw	r2, #22238	; 0x56de
   15994:	movt	r2, #2
   15998:	movw	r0, #22242	; 0x56e2
   1599c:	movt	r0, #2
   159a0:	cmp	r1, #96	; 0x60
   159a4:	moveq	r0, r2
   159a8:	sub	sp, fp, #24
   159ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   159b0:	movw	r1, #22226	; 0x56d2
   159b4:	movt	r1, #2
   159b8:	movw	r0, #21198	; 0x52ce
   159bc:	movt	r0, #2
   159c0:	cmp	r4, #9
   159c4:	moveq	r0, r1
   159c8:	sub	sp, fp, #24
   159cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   159d0:	push	{r4, r5, r6, r7, fp, lr}
   159d4:	add	fp, sp, #16
   159d8:	sub	sp, sp, #16
   159dc:	mov	r4, r3
   159e0:	mov	r5, r2
   159e4:	mov	r7, r1
   159e8:	mov	r6, r0
   159ec:	mov	r0, r1
   159f0:	bl	2419c <__assert_fail@plt+0x12a28>
   159f4:	ldrb	r1, [r6]
   159f8:	cmp	r0, #0
   159fc:	andne	r1, r1, #223	; 0xdf
   15a00:	mov	r0, #0
   15a04:	cmp	r1, r7
   15a08:	bne	15a48 <__assert_fail@plt+0x42d4>
   15a0c:	cmp	r7, #0
   15a10:	moveq	r0, #1
   15a14:	subeq	sp, fp, #16
   15a18:	popeq	{r4, r5, r6, r7, fp, pc}
   15a1c:	ldr	r0, [fp, #20]
   15a20:	ldr	r1, [fp, #16]
   15a24:	ldr	r2, [fp, #12]
   15a28:	ldr	r3, [fp, #8]
   15a2c:	str	r2, [sp]
   15a30:	str	r1, [sp, #4]
   15a34:	str	r0, [sp, #8]
   15a38:	mov	r0, r6
   15a3c:	mov	r1, r5
   15a40:	mov	r2, r4
   15a44:	bl	15a50 <__assert_fail@plt+0x42dc>
   15a48:	sub	sp, fp, #16
   15a4c:	pop	{r4, r5, r6, r7, fp, pc}
   15a50:	push	{r4, r5, r6, r7, fp, lr}
   15a54:	add	fp, sp, #16
   15a58:	sub	sp, sp, #8
   15a5c:	mov	r4, r3
   15a60:	mov	r5, r2
   15a64:	mov	r7, r1
   15a68:	mov	r6, r0
   15a6c:	mov	r0, r1
   15a70:	bl	2419c <__assert_fail@plt+0x12a28>
   15a74:	ldrb	r1, [r6, #1]
   15a78:	cmp	r0, #0
   15a7c:	andne	r1, r1, #223	; 0xdf
   15a80:	mov	r0, #0
   15a84:	cmp	r1, r7
   15a88:	bne	15ac0 <__assert_fail@plt+0x434c>
   15a8c:	cmp	r7, #0
   15a90:	moveq	r0, #1
   15a94:	subeq	sp, fp, #16
   15a98:	popeq	{r4, r5, r6, r7, fp, pc}
   15a9c:	ldr	r0, [fp, #16]
   15aa0:	ldr	r1, [fp, #12]
   15aa4:	ldr	r3, [fp, #8]
   15aa8:	str	r1, [sp]
   15aac:	str	r0, [sp, #4]
   15ab0:	mov	r0, r6
   15ab4:	mov	r1, r5
   15ab8:	mov	r2, r4
   15abc:	bl	15ac8 <__assert_fail@plt+0x4354>
   15ac0:	sub	sp, fp, #16
   15ac4:	pop	{r4, r5, r6, r7, fp, pc}
   15ac8:	push	{r4, r5, r6, r7, fp, lr}
   15acc:	add	fp, sp, #16
   15ad0:	sub	sp, sp, #8
   15ad4:	mov	r4, r3
   15ad8:	mov	r5, r2
   15adc:	mov	r7, r1
   15ae0:	mov	r6, r0
   15ae4:	mov	r0, r1
   15ae8:	bl	2419c <__assert_fail@plt+0x12a28>
   15aec:	ldrb	r1, [r6, #2]
   15af0:	cmp	r0, #0
   15af4:	andne	r1, r1, #223	; 0xdf
   15af8:	mov	r0, #0
   15afc:	cmp	r1, r7
   15b00:	bne	15b30 <__assert_fail@plt+0x43bc>
   15b04:	cmp	r7, #0
   15b08:	moveq	r0, #1
   15b0c:	subeq	sp, fp, #16
   15b10:	popeq	{r4, r5, r6, r7, fp, pc}
   15b14:	ldr	r0, [fp, #12]
   15b18:	ldr	r3, [fp, #8]
   15b1c:	str	r0, [sp]
   15b20:	mov	r0, r6
   15b24:	mov	r1, r5
   15b28:	mov	r2, r4
   15b2c:	bl	15b38 <__assert_fail@plt+0x43c4>
   15b30:	sub	sp, fp, #16
   15b34:	pop	{r4, r5, r6, r7, fp, pc}
   15b38:	push	{r4, r5, r6, r7, fp, lr}
   15b3c:	add	fp, sp, #16
   15b40:	mov	r4, r3
   15b44:	mov	r5, r2
   15b48:	mov	r7, r1
   15b4c:	mov	r6, r0
   15b50:	mov	r0, r1
   15b54:	bl	2419c <__assert_fail@plt+0x12a28>
   15b58:	ldrb	r1, [r6, #3]
   15b5c:	ldr	r3, [fp, #8]
   15b60:	cmp	r0, #0
   15b64:	andne	r1, r1, #223	; 0xdf
   15b68:	mov	r0, #0
   15b6c:	cmp	r1, r7
   15b70:	popne	{r4, r5, r6, r7, fp, pc}
   15b74:	cmp	r7, #0
   15b78:	beq	15b90 <__assert_fail@plt+0x441c>
   15b7c:	mov	r0, r6
   15b80:	mov	r1, r5
   15b84:	mov	r2, r4
   15b88:	pop	{r4, r5, r6, r7, fp, lr}
   15b8c:	b	15b98 <__assert_fail@plt+0x4424>
   15b90:	mov	r0, #1
   15b94:	pop	{r4, r5, r6, r7, fp, pc}
   15b98:	push	{r4, r5, r6, r7, fp, lr}
   15b9c:	add	fp, sp, #16
   15ba0:	mov	r4, r3
   15ba4:	mov	r5, r2
   15ba8:	mov	r7, r1
   15bac:	mov	r6, r0
   15bb0:	mov	r0, r1
   15bb4:	bl	2419c <__assert_fail@plt+0x12a28>
   15bb8:	ldrb	r1, [r6, #4]
   15bbc:	cmp	r0, #0
   15bc0:	andne	r1, r1, #223	; 0xdf
   15bc4:	mov	r0, #0
   15bc8:	cmp	r1, r7
   15bcc:	popne	{r4, r5, r6, r7, fp, pc}
   15bd0:	cmp	r7, #0
   15bd4:	beq	15bec <__assert_fail@plt+0x4478>
   15bd8:	mov	r0, r6
   15bdc:	mov	r1, r5
   15be0:	mov	r2, r4
   15be4:	pop	{r4, r5, r6, r7, fp, lr}
   15be8:	b	15bf4 <__assert_fail@plt+0x4480>
   15bec:	mov	r0, #1
   15bf0:	pop	{r4, r5, r6, r7, fp, pc}
   15bf4:	push	{r4, r5, r6, sl, fp, lr}
   15bf8:	add	fp, sp, #16
   15bfc:	mov	r4, r2
   15c00:	mov	r6, r1
   15c04:	mov	r5, r0
   15c08:	mov	r0, r1
   15c0c:	bl	2419c <__assert_fail@plt+0x12a28>
   15c10:	ldrb	r1, [r5, #5]
   15c14:	cmp	r0, #0
   15c18:	andne	r1, r1, #223	; 0xdf
   15c1c:	mov	r0, #0
   15c20:	cmp	r1, r6
   15c24:	popne	{r4, r5, r6, sl, fp, pc}
   15c28:	cmp	r6, #0
   15c2c:	beq	15c40 <__assert_fail@plt+0x44cc>
   15c30:	mov	r0, r5
   15c34:	mov	r1, r4
   15c38:	pop	{r4, r5, r6, sl, fp, lr}
   15c3c:	b	15c48 <__assert_fail@plt+0x44d4>
   15c40:	mov	r0, #1
   15c44:	pop	{r4, r5, r6, sl, fp, pc}
   15c48:	push	{r4, r5, fp, lr}
   15c4c:	add	fp, sp, #8
   15c50:	mov	r5, r1
   15c54:	mov	r4, r0
   15c58:	mov	r0, r1
   15c5c:	bl	2419c <__assert_fail@plt+0x12a28>
   15c60:	ldrb	r1, [r4, #6]
   15c64:	cmp	r0, #0
   15c68:	andne	r1, r1, #223	; 0xdf
   15c6c:	mov	r0, #0
   15c70:	cmp	r1, r5
   15c74:	popne	{r4, r5, fp, pc}
   15c78:	cmp	r5, #0
   15c7c:	beq	15c8c <__assert_fail@plt+0x4518>
   15c80:	mov	r0, r4
   15c84:	pop	{r4, r5, fp, lr}
   15c88:	b	15c94 <__assert_fail@plt+0x4520>
   15c8c:	mov	r0, #1
   15c90:	pop	{r4, r5, fp, pc}
   15c94:	push	{r4, sl, fp, lr}
   15c98:	add	fp, sp, #8
   15c9c:	mov	r4, r0
   15ca0:	mov	r0, #0
   15ca4:	bl	2419c <__assert_fail@plt+0x12a28>
   15ca8:	ldrb	r1, [r4, #7]
   15cac:	cmp	r0, #0
   15cb0:	beq	15cc8 <__assert_fail@plt+0x4554>
   15cb4:	tst	r1, #223	; 0xdf
   15cb8:	moveq	r0, #1
   15cbc:	popeq	{r4, sl, fp, pc}
   15cc0:	mov	r0, #0
   15cc4:	pop	{r4, sl, fp, pc}
   15cc8:	cmp	r1, #0
   15ccc:	moveq	r0, #1
   15cd0:	popeq	{r4, sl, fp, pc}
   15cd4:	mov	r0, #0
   15cd8:	pop	{r4, sl, fp, pc}
   15cdc:	push	{fp, lr}
   15ce0:	mov	fp, sp
   15ce4:	mov	ip, r1
   15ce8:	mov	lr, r0
   15cec:	movw	r0, #25588	; 0x63f4
   15cf0:	movt	r0, #3
   15cf4:	ldr	r3, [r0]
   15cf8:	mov	r0, #16
   15cfc:	and	r0, r0, r3, lsr #21
   15d00:	ldrb	r1, [r2, #28]
   15d04:	and	r1, r1, #111	; 0x6f
   15d08:	orr	r0, r1, r0
   15d0c:	orr	r0, r0, #128	; 0x80
   15d10:	strb	r0, [r2, #28]
   15d14:	mov	r0, r2
   15d18:	mov	r1, lr
   15d1c:	mov	r2, ip
   15d20:	bl	15d58 <__assert_fail@plt+0x45e4>
   15d24:	cmp	r0, #0
   15d28:	moveq	r0, #0
   15d2c:	popeq	{fp, pc}
   15d30:	movw	r1, #22720	; 0x58c0
   15d34:	movt	r1, #2
   15d38:	ldr	r0, [r1, r0, lsl #2]
   15d3c:	movw	r1, #22336	; 0x5740
   15d40:	movt	r1, #2
   15d44:	add	r1, r1, r0
   15d48:	mov	r0, #0
   15d4c:	mov	r2, #5
   15d50:	pop	{fp, lr}
   15d54:	b	114ec <dcgettext@plt>
   15d58:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15d5c:	add	fp, sp, #24
   15d60:	sub	sp, sp, #96	; 0x60
   15d64:	mov	r6, r3
   15d68:	mov	r7, r2
   15d6c:	mov	r8, r1
   15d70:	mov	r4, r0
   15d74:	mov	r0, #0
   15d78:	str	r0, [fp, #-28]	; 0xffffffe4
   15d7c:	str	r0, [r4, #8]
   15d80:	str	r3, [r4, #12]
   15d84:	str	r0, [r4, #24]
   15d88:	ldrb	r0, [r4, #28]
   15d8c:	and	r0, r0, #144	; 0x90
   15d90:	strb	r0, [r4, #28]
   15d94:	ldr	r5, [r4]
   15d98:	ldr	r0, [r4, #4]
   15d9c:	cmp	r0, #159	; 0x9f
   15da0:	bls	15ef4 <__assert_fail@plt+0x4780>
   15da4:	mov	r0, #160	; 0xa0
   15da8:	str	r0, [r4, #8]
   15dac:	mov	r0, r5
   15db0:	mov	r1, r7
   15db4:	bl	1746c <__assert_fail@plt+0x5cf8>
   15db8:	str	r0, [fp, #-28]	; 0xffffffe4
   15dbc:	cmp	r0, #0
   15dc0:	bne	15df4 <__assert_fail@plt+0x4680>
   15dc4:	movw	r1, #0
   15dc8:	movt	r1, #0
   15dcc:	movw	r2, #0
   15dd0:	movt	r2, #0
   15dd4:	orrs	r1, r2, r1
   15dd8:	beq	15df4 <__assert_fail@plt+0x4680>
   15ddc:	add	r0, r5, #136	; 0x88
   15de0:	mov	r1, #0
   15de4:	bl	114a4 <pthread_mutex_init@plt>
   15de8:	cmp	r0, #0
   15dec:	bne	15f20 <__assert_fail@plt+0x47ac>
   15df0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15df4:	cmp	r0, #0
   15df8:	bne	15f28 <__assert_fail@plt+0x47b4>
   15dfc:	ldr	r3, [r4, #20]
   15e00:	str	r5, [sp, #4]
   15e04:	ubfx	r0, r6, #22, #1
   15e08:	str	r0, [sp]
   15e0c:	add	r0, sp, #8
   15e10:	mov	r1, r8
   15e14:	mov	r2, r7
   15e18:	bl	17618 <__assert_fail@plt+0x5ea4>
   15e1c:	str	r0, [fp, #-28]	; 0xffffffe4
   15e20:	cmp	r0, #0
   15e24:	bne	15ec0 <__assert_fail@plt+0x474c>
   15e28:	mov	r0, #0
   15e2c:	str	r0, [r4, #24]
   15e30:	add	r0, sp, #8
   15e34:	sub	r3, fp, #28
   15e38:	mov	r1, r4
   15e3c:	mov	r2, r6
   15e40:	bl	177ec <__assert_fail@plt+0x6078>
   15e44:	str	r0, [r5, #52]	; 0x34
   15e48:	cmp	r0, #0
   15e4c:	beq	15ec0 <__assert_fail@plt+0x474c>
   15e50:	mov	r0, r4
   15e54:	bl	178c0 <__assert_fail@plt+0x614c>
   15e58:	str	r0, [fp, #-28]	; 0xffffffe4
   15e5c:	cmp	r0, #0
   15e60:	bne	15ec0 <__assert_fail@plt+0x474c>
   15e64:	ands	r0, r6, #4194304	; 0x400000
   15e68:	bne	15e8c <__assert_fail@plt+0x4718>
   15e6c:	ldrb	r0, [r5, #88]	; 0x58
   15e70:	ands	r0, r0, #4
   15e74:	beq	15e8c <__assert_fail@plt+0x4718>
   15e78:	ldr	r0, [r4, #20]
   15e7c:	cmp	r0, #0
   15e80:	bne	15e8c <__assert_fail@plt+0x4718>
   15e84:	mov	r0, r5
   15e88:	bl	17adc <__assert_fail@plt+0x6368>
   15e8c:	mov	r0, r5
   15e90:	bl	17c78 <__assert_fail@plt+0x6504>
   15e94:	str	r0, [fp, #-28]	; 0xffffffe4
   15e98:	mov	r0, r4
   15e9c:	bl	17768 <__assert_fail@plt+0x5ff4>
   15ea0:	add	r0, sp, #8
   15ea4:	bl	177b8 <__assert_fail@plt+0x6044>
   15ea8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15eac:	cmp	r0, #0
   15eb0:	bne	15ed0 <__assert_fail@plt+0x475c>
   15eb4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15eb8:	sub	sp, fp, #24
   15ebc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15ec0:	mov	r0, r4
   15ec4:	bl	17768 <__assert_fail@plt+0x5ff4>
   15ec8:	add	r0, sp, #8
   15ecc:	bl	177b8 <__assert_fail@plt+0x6044>
   15ed0:	movw	r0, #0
   15ed4:	movt	r0, #0
   15ed8:	movw	r1, #0
   15edc:	movt	r1, #0
   15ee0:	orrs	r0, r1, r0
   15ee4:	beq	15f28 <__assert_fail@plt+0x47b4>
   15ee8:	add	r0, r5, #136	; 0x88
   15eec:	bl	11438 <pthread_mutex_destroy@plt>
   15ef0:	b	15f28 <__assert_fail@plt+0x47b4>
   15ef4:	mov	r9, #160	; 0xa0
   15ef8:	mov	r0, r5
   15efc:	mov	r1, #160	; 0xa0
   15f00:	bl	23e94 <__assert_fail@plt+0x12720>
   15f04:	cmp	r0, #0
   15f08:	moveq	r0, #12
   15f0c:	subeq	sp, fp, #24
   15f10:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   15f14:	mov	r5, r0
   15f18:	stm	r4, {r0, r9}
   15f1c:	b	15da4 <__assert_fail@plt+0x4630>
   15f20:	mov	r0, #12
   15f24:	str	r0, [fp, #-28]	; 0xffffffe4
   15f28:	mov	r0, r5
   15f2c:	bl	1658c <__assert_fail@plt+0x4e18>
   15f30:	mov	r0, #0
   15f34:	str	r0, [r4]
   15f38:	str	r0, [r4, #4]
   15f3c:	b	15eb4 <__assert_fail@plt+0x4740>
   15f40:	movw	r2, #25588	; 0x63f4
   15f44:	movt	r2, #3
   15f48:	ldr	r1, [r2]
   15f4c:	str	r0, [r2]
   15f50:	mov	r0, r1
   15f54:	bx	lr
   15f58:	push	{r4, r5, r6, sl, fp, lr}
   15f5c:	add	fp, sp, #16
   15f60:	mov	r4, r0
   15f64:	ldr	r6, [r0]
   15f68:	ldr	r5, [r0, #16]
   15f6c:	mov	r0, r5
   15f70:	mov	r1, #0
   15f74:	mov	r2, #256	; 0x100
   15f78:	bl	1166c <memset@plt>
   15f7c:	ldr	r1, [r6, #36]	; 0x24
   15f80:	mov	r0, r4
   15f84:	mov	r2, r5
   15f88:	bl	15ff4 <__assert_fail@plt+0x4880>
   15f8c:	ldr	r0, [r6, #36]	; 0x24
   15f90:	ldr	r1, [r6, #40]	; 0x28
   15f94:	cmp	r0, r1
   15f98:	beq	15fa8 <__assert_fail@plt+0x4834>
   15f9c:	mov	r0, r4
   15fa0:	mov	r2, r5
   15fa4:	bl	15ff4 <__assert_fail@plt+0x4880>
   15fa8:	ldr	r0, [r6, #36]	; 0x24
   15fac:	ldr	r1, [r6, #44]	; 0x2c
   15fb0:	cmp	r0, r1
   15fb4:	beq	15fc4 <__assert_fail@plt+0x4850>
   15fb8:	mov	r0, r4
   15fbc:	mov	r2, r5
   15fc0:	bl	15ff4 <__assert_fail@plt+0x4880>
   15fc4:	ldr	r0, [r6, #36]	; 0x24
   15fc8:	ldr	r1, [r6, #48]	; 0x30
   15fcc:	cmp	r0, r1
   15fd0:	beq	15fe0 <__assert_fail@plt+0x486c>
   15fd4:	mov	r0, r4
   15fd8:	mov	r2, r5
   15fdc:	bl	15ff4 <__assert_fail@plt+0x4880>
   15fe0:	ldrb	r0, [r4, #28]
   15fe4:	orr	r0, r0, #8
   15fe8:	strb	r0, [r4, #28]
   15fec:	mov	r0, #0
   15ff0:	pop	{r4, r5, r6, sl, fp, pc}
   15ff4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ff8:	add	fp, sp, #28
   15ffc:	sub	sp, sp, #308	; 0x134
   16000:	str	r2, [sp, #28]
   16004:	str	r0, [sp, #16]
   16008:	ldr	r8, [r0]
   1600c:	ldr	r0, [r8, #92]	; 0x5c
   16010:	mov	sl, #0
   16014:	cmp	r0, #1
   16018:	ldreq	r0, [sp, #16]
   1601c:	ldrbeq	r0, [r0, #14]
   16020:	ubfxeq	sl, r0, #6, #1
   16024:	ldr	r0, [r1, #8]
   16028:	cmp	r0, #1
   1602c:	blt	16368 <__assert_fail@plt+0x4bf4>
   16030:	add	r0, sp, #32
   16034:	add	r0, r0, #1
   16038:	str	r0, [sp]
   1603c:	mov	r4, #1
   16040:	movw	r0, #1
   16044:	movt	r0, #32
   16048:	add	r0, r0, #254	; 0xfe
   1604c:	str	r0, [sp, #4]
   16050:	mov	r2, #0
   16054:	str	r1, [sp, #8]
   16058:	str	r8, [sp, #20]
   1605c:	ldr	r0, [r1, #12]
   16060:	str	r2, [sp, #12]
   16064:	ldr	r9, [r0, r2, lsl #2]
   16068:	ldr	r0, [r8]
   1606c:	add	r1, r0, r9, lsl #3
   16070:	ldrb	r5, [r1, #4]
   16074:	cmp	r5, #1
   16078:	beq	16100 <__assert_fail@plt+0x498c>
   1607c:	cmp	r5, #6
   16080:	beq	16200 <__assert_fail@plt+0x4a8c>
   16084:	cmp	r5, #3
   16088:	bne	16284 <__assert_fail@plt+0x4b10>
   1608c:	mov	r7, #0
   16090:	ldr	r5, [sp, #28]
   16094:	mov	r6, #0
   16098:	str	r9, [sp, #24]
   1609c:	ldr	r0, [r8]
   160a0:	ldr	r0, [r0, r9, lsl #3]
   160a4:	ldr	r9, [r0, r6, lsl #2]
   160a8:	mov	r8, #0
   160ac:	b	160c4 <__assert_fail@plt+0x4950>
   160b0:	add	r0, r7, r8
   160b4:	bl	11498 <tolower@plt>
   160b8:	ldr	r1, [sp, #28]
   160bc:	strb	r4, [r1, r0]
   160c0:	b	160d4 <__assert_fail@plt+0x4960>
   160c4:	tst	r9, r4, lsl r8
   160c8:	strbne	r4, [r5, r8]
   160cc:	cmpne	sl, #0
   160d0:	bne	160b0 <__assert_fail@plt+0x493c>
   160d4:	add	r8, r8, #1
   160d8:	cmp	r8, #32
   160dc:	bne	160c4 <__assert_fail@plt+0x4950>
   160e0:	add	r5, r5, #32
   160e4:	add	r6, r6, #1
   160e8:	add	r7, r7, #32
   160ec:	cmp	r6, #8
   160f0:	ldr	r8, [sp, #20]
   160f4:	ldr	r9, [sp, #24]
   160f8:	bne	1609c <__assert_fail@plt+0x4928>
   160fc:	b	16350 <__assert_fail@plt+0x4bdc>
   16100:	ldrb	r0, [r0, r9, lsl #3]
   16104:	ldr	r1, [sp, #28]
   16108:	strb	r4, [r1, r0]
   1610c:	cmp	sl, #0
   16110:	beq	16120 <__assert_fail@plt+0x49ac>
   16114:	bl	11498 <tolower@plt>
   16118:	ldr	r1, [sp, #28]
   1611c:	strb	r4, [r1, r0]
   16120:	ldr	r0, [sp, #16]
   16124:	ldrb	r0, [r0, #14]
   16128:	tst	r0, #64	; 0x40
   1612c:	beq	16350 <__assert_fail@plt+0x4bdc>
   16130:	ldr	r0, [r8, #92]	; 0x5c
   16134:	cmp	r0, #2
   16138:	blt	16350 <__assert_fail@plt+0x4bdc>
   1613c:	ldr	r0, [r8]
   16140:	ldrb	r0, [r0, r9, lsl #3]
   16144:	strb	r0, [sp, #32]
   16148:	ldr	r0, [r8, #8]
   1614c:	add	r1, r9, #1
   16150:	cmp	r1, r0
   16154:	ldr	r0, [sp]
   16158:	add	r5, sp, #32
   1615c:	bcs	161a8 <__assert_fail@plt+0x4a34>
   16160:	ldr	r0, [sp]
   16164:	ldr	r1, [r8]
   16168:	add	r1, r1, r9, lsl #3
   1616c:	ldr	r2, [r1, #12]
   16170:	ldr	r3, [sp, #4]
   16174:	and	r2, r2, r3
   16178:	movw	r3, #1
   1617c:	movt	r3, #32
   16180:	cmp	r2, r3
   16184:	bne	161a8 <__assert_fail@plt+0x4a34>
   16188:	ldrb	r1, [r1, #8]
   1618c:	strb	r1, [r0], #1
   16190:	add	r1, r9, #1
   16194:	ldr	r2, [r8, #8]
   16198:	add	r3, r9, #2
   1619c:	cmp	r3, r2
   161a0:	mov	r9, r1
   161a4:	bcc	16164 <__assert_fail@plt+0x49f0>
   161a8:	mov	r1, #0
   161ac:	str	r1, [fp, #-44]	; 0xffffffd4
   161b0:	str	r1, [fp, #-48]	; 0xffffffd0
   161b4:	sub	r6, r0, r5
   161b8:	sub	r0, fp, #36	; 0x24
   161bc:	mov	r1, r5
   161c0:	mov	r2, r6
   161c4:	sub	r3, fp, #48	; 0x30
   161c8:	bl	245c0 <__assert_fail@plt+0x12e4c>
   161cc:	cmp	r0, r6
   161d0:	bne	16350 <__assert_fail@plt+0x4bdc>
   161d4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   161d8:	bl	114b0 <towlower@plt>
   161dc:	mov	r1, r0
   161e0:	mov	r0, r5
   161e4:	sub	r2, fp, #48	; 0x30
   161e8:	bl	11408 <wcrtomb@plt>
   161ec:	cmn	r0, #1
   161f0:	ldrbne	r0, [sp, #32]
   161f4:	ldrne	r1, [sp, #28]
   161f8:	strbne	r4, [r1, r0]
   161fc:	b	16350 <__assert_fail@plt+0x4bdc>
   16200:	ldr	r6, [r0, r9, lsl #3]
   16204:	ldr	r0, [r8, #92]	; 0x5c
   16208:	cmp	r0, #2
   1620c:	blt	1629c <__assert_fail@plt+0x4b28>
   16210:	ldr	r0, [r6, #36]	; 0x24
   16214:	cmp	r0, #0
   16218:	bne	16230 <__assert_fail@plt+0x4abc>
   1621c:	ldrb	r0, [r6, #16]
   16220:	tst	r0, #1
   16224:	ldreq	r0, [r6, #32]
   16228:	cmpeq	r0, #0
   1622c:	beq	1629c <__assert_fail@plt+0x4b28>
   16230:	mov	r0, #0
   16234:	strb	r0, [fp, #-48]	; 0xffffffd0
   16238:	add	r5, sp, #32
   1623c:	mov	r0, #0
   16240:	str	r0, [sp, #36]	; 0x24
   16244:	str	r0, [sp, #32]
   16248:	mov	r0, #0
   1624c:	sub	r1, fp, #48	; 0x30
   16250:	mov	r2, #1
   16254:	mov	r3, r5
   16258:	bl	245c0 <__assert_fail@plt+0x12e4c>
   1625c:	cmn	r0, #2
   16260:	ldrbeq	r0, [fp, #-48]	; 0xffffffd0
   16264:	ldreq	r1, [sp, #28]
   16268:	strbeq	r4, [r1, r0]
   1626c:	ldrb	r0, [fp, #-48]	; 0xffffffd0
   16270:	add	r0, r0, #1
   16274:	strb	r0, [fp, #-48]	; 0xffffffd0
   16278:	tst	r0, #255	; 0xff
   1627c:	bne	1623c <__assert_fail@plt+0x4ac8>
   16280:	b	16350 <__assert_fail@plt+0x4bdc>
   16284:	cmp	r5, #7
   16288:	bhi	16350 <__assert_fail@plt+0x4bdc>
   1628c:	mov	r0, #164	; 0xa4
   16290:	tst	r0, r4, lsl r5
   16294:	beq	16350 <__assert_fail@plt+0x4bdc>
   16298:	b	16370 <__assert_fail@plt+0x4bfc>
   1629c:	ldr	r0, [r6, #20]
   162a0:	cmp	r0, #1
   162a4:	blt	16350 <__assert_fail@plt+0x4bdc>
   162a8:	mov	r9, #0
   162ac:	mov	r0, #0
   162b0:	str	r0, [fp, #-44]	; 0xffffffd4
   162b4:	str	r0, [fp, #-48]	; 0xffffffd0
   162b8:	ldr	r0, [r6]
   162bc:	ldr	r1, [r0, r9, lsl #2]
   162c0:	add	r5, sp, #32
   162c4:	mov	r0, r5
   162c8:	sub	r2, fp, #48	; 0x30
   162cc:	bl	11408 <wcrtomb@plt>
   162d0:	cmn	r0, #1
   162d4:	beq	162f8 <__assert_fail@plt+0x4b84>
   162d8:	ldrb	r0, [sp, #32]
   162dc:	ldr	r1, [sp, #28]
   162e0:	strb	r4, [r1, r0]
   162e4:	cmp	sl, #0
   162e8:	beq	162f8 <__assert_fail@plt+0x4b84>
   162ec:	bl	11498 <tolower@plt>
   162f0:	ldr	r1, [sp, #28]
   162f4:	strb	r4, [r1, r0]
   162f8:	ldr	r0, [sp, #16]
   162fc:	ldrb	r0, [r0, #14]
   16300:	tst	r0, #64	; 0x40
   16304:	beq	16340 <__assert_fail@plt+0x4bcc>
   16308:	ldr	r0, [r8, #92]	; 0x5c
   1630c:	cmp	r0, #2
   16310:	blt	16340 <__assert_fail@plt+0x4bcc>
   16314:	ldr	r0, [r6]
   16318:	ldr	r0, [r0, r9, lsl #2]
   1631c:	bl	114b0 <towlower@plt>
   16320:	mov	r1, r0
   16324:	mov	r0, r5
   16328:	sub	r2, fp, #48	; 0x30
   1632c:	bl	11408 <wcrtomb@plt>
   16330:	cmn	r0, #1
   16334:	ldrbne	r0, [sp, #32]
   16338:	ldrne	r1, [sp, #28]
   1633c:	strbne	r4, [r1, r0]
   16340:	add	r9, r9, #1
   16344:	ldr	r0, [r6, #20]
   16348:	cmp	r9, r0
   1634c:	blt	162ac <__assert_fail@plt+0x4b38>
   16350:	ldr	r1, [sp, #8]
   16354:	ldr	r0, [r1, #8]
   16358:	ldr	r2, [sp, #12]
   1635c:	add	r2, r2, #1
   16360:	cmp	r2, r0
   16364:	blt	1605c <__assert_fail@plt+0x48e8>
   16368:	sub	sp, fp, #28
   1636c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16370:	ldr	r0, [sp, #28]
   16374:	mov	r1, #1
   16378:	mov	r2, #256	; 0x100
   1637c:	bl	1166c <memset@plt>
   16380:	cmp	r5, #2
   16384:	ldreq	r1, [sp, #16]
   16388:	ldrbeq	r0, [r1, #28]
   1638c:	orreq	r0, r0, #1
   16390:	strbeq	r0, [r1, #28]
   16394:	sub	sp, fp, #28
   16398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1639c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   163a0:	add	fp, sp, #24
   163a4:	mov	r7, r2
   163a8:	mov	r8, r1
   163ac:	mov	r4, r0
   163b0:	mov	r0, #0
   163b4:	str	r0, [r4]
   163b8:	str	r0, [r4, #4]
   163bc:	str	r0, [r4, #8]
   163c0:	mov	r0, #256	; 0x100
   163c4:	bl	23e64 <__assert_fail@plt+0x126f0>
   163c8:	str	r0, [r4, #16]
   163cc:	cmp	r0, #0
   163d0:	beq	16480 <__assert_fail@plt+0x4d0c>
   163d4:	movw	r0, #45820	; 0xb2fc
   163d8:	movt	r0, #3
   163dc:	tst	r7, #1
   163e0:	movweq	r0, #710	; 0x2c6
   163e4:	movteq	r0, #257	; 0x101
   163e8:	and	r1, r7, #2
   163ec:	orr	r5, r0, r1, lsl #21
   163f0:	tst	r7, #4
   163f4:	bne	16408 <__assert_fail@plt+0x4c94>
   163f8:	ldrb	r0, [r4, #28]
   163fc:	and	r0, r0, #127	; 0x7f
   16400:	strb	r0, [r4, #28]
   16404:	b	16424 <__assert_fail@plt+0x4cb0>
   16408:	ldrb	r0, [r4, #28]
   1640c:	orr	r0, r0, #128	; 0x80
   16410:	strb	r0, [r4, #28]
   16414:	movw	r0, #45758	; 0xb2be
   16418:	movt	r0, #323	; 0x143
   1641c:	and	r0, r5, r0
   16420:	orr	r5, r0, #256	; 0x100
   16424:	mov	r6, #0
   16428:	str	r6, [r4, #20]
   1642c:	and	r0, r7, #8
   16430:	ldrb	r1, [r4, #28]
   16434:	and	r1, r1, #239	; 0xef
   16438:	orr	r0, r1, r0, lsl #1
   1643c:	strb	r0, [r4, #28]
   16440:	mov	r0, r8
   16444:	bl	11624 <strlen@plt>
   16448:	mov	r2, r0
   1644c:	mov	r0, r4
   16450:	mov	r1, r8
   16454:	mov	r3, r5
   16458:	bl	15d58 <__assert_fail@plt+0x45e4>
   1645c:	mov	r5, r0
   16460:	cmp	r0, #16
   16464:	movweq	r5, #8
   16468:	cmp	r5, #0
   1646c:	bne	1648c <__assert_fail@plt+0x4d18>
   16470:	mov	r0, r4
   16474:	bl	15f58 <__assert_fail@plt+0x47e4>
   16478:	mov	r0, r6
   1647c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16480:	mov	r6, #12
   16484:	mov	r0, r6
   16488:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1648c:	ldr	r0, [r4, #16]
   16490:	bl	13f04 <__assert_fail@plt+0x2790>
   16494:	str	r6, [r4, #16]
   16498:	mov	r0, r5
   1649c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   164a0:	push	{r4, r5, r6, r7, fp, lr}
   164a4:	add	fp, sp, #16
   164a8:	cmp	r0, #17
   164ac:	bcs	16520 <__assert_fail@plt+0x4dac>
   164b0:	mov	r5, r3
   164b4:	mov	r4, r2
   164b8:	movw	r1, #22720	; 0x58c0
   164bc:	movt	r1, #2
   164c0:	ldr	r0, [r1, r0, lsl #2]
   164c4:	movw	r1, #22336	; 0x5740
   164c8:	movt	r1, #2
   164cc:	add	r1, r1, r0
   164d0:	mov	r0, #0
   164d4:	mov	r2, #5
   164d8:	bl	114ec <dcgettext@plt>
   164dc:	mov	r6, r0
   164e0:	bl	11624 <strlen@plt>
   164e4:	add	r7, r0, #1
   164e8:	cmp	r5, #0
   164ec:	beq	16508 <__assert_fail@plt+0x4d94>
   164f0:	cmp	r7, r5
   164f4:	mov	r2, r7
   164f8:	bhi	16510 <__assert_fail@plt+0x4d9c>
   164fc:	mov	r0, r4
   16500:	mov	r1, r6
   16504:	bl	1148c <memcpy@plt>
   16508:	mov	r0, r7
   1650c:	pop	{r4, r5, r6, r7, fp, pc}
   16510:	sub	r2, r5, #1
   16514:	mov	r0, #0
   16518:	strb	r0, [r4, r2]
   1651c:	b	164fc <__assert_fail@plt+0x4d88>
   16520:	bl	11750 <abort@plt>
   16524:	push	{r4, r5, fp, lr}
   16528:	add	fp, sp, #8
   1652c:	mov	r4, r0
   16530:	ldr	r5, [r0]
   16534:	cmp	r5, #0
   16538:	beq	16564 <__assert_fail@plt+0x4df0>
   1653c:	movw	r0, #0
   16540:	movt	r0, #0
   16544:	movw	r1, #0
   16548:	movt	r1, #0
   1654c:	orrs	r0, r1, r0
   16550:	beq	1655c <__assert_fail@plt+0x4de8>
   16554:	add	r0, r5, #136	; 0x88
   16558:	bl	11438 <pthread_mutex_destroy@plt>
   1655c:	mov	r0, r5
   16560:	bl	1658c <__assert_fail@plt+0x4e18>
   16564:	mov	r5, #0
   16568:	str	r5, [r4]
   1656c:	str	r5, [r4, #4]
   16570:	ldr	r0, [r4, #16]
   16574:	bl	13f04 <__assert_fail@plt+0x2790>
   16578:	str	r5, [r4, #16]
   1657c:	ldr	r0, [r4, #20]
   16580:	bl	13f04 <__assert_fail@plt+0x2790>
   16584:	str	r5, [r4, #20]
   16588:	pop	{r4, r5, fp, pc}
   1658c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16590:	add	fp, sp, #24
   16594:	mov	r8, r0
   16598:	ldr	r0, [r0]
   1659c:	cmp	r0, #0
   165a0:	ldrne	r0, [r8, #8]
   165a4:	cmpne	r0, #0
   165a8:	beq	165d4 <__assert_fail@plt+0x4e60>
   165ac:	mov	r5, #0
   165b0:	mov	r6, #0
   165b4:	ldr	r0, [r8]
   165b8:	add	r0, r0, r5
   165bc:	bl	173a4 <__assert_fail@plt+0x5c30>
   165c0:	add	r5, r5, #8
   165c4:	add	r6, r6, #1
   165c8:	ldr	r0, [r8, #8]
   165cc:	cmp	r6, r0
   165d0:	bcc	165b4 <__assert_fail@plt+0x4e40>
   165d4:	ldr	r0, [r8, #12]
   165d8:	bl	13f04 <__assert_fail@plt+0x2790>
   165dc:	ldr	r0, [r8, #8]
   165e0:	cmp	r0, #0
   165e4:	beq	16640 <__assert_fail@plt+0x4ecc>
   165e8:	mov	r5, #0
   165ec:	mov	r6, #8
   165f0:	ldr	r0, [r8, #24]
   165f4:	cmp	r0, #0
   165f8:	beq	16604 <__assert_fail@plt+0x4e90>
   165fc:	ldr	r0, [r0, r6]
   16600:	bl	13f04 <__assert_fail@plt+0x2790>
   16604:	ldr	r0, [r8, #28]
   16608:	cmp	r0, #0
   1660c:	beq	16618 <__assert_fail@plt+0x4ea4>
   16610:	ldr	r0, [r0, r6]
   16614:	bl	13f04 <__assert_fail@plt+0x2790>
   16618:	ldr	r0, [r8, #20]
   1661c:	cmp	r0, #0
   16620:	beq	1662c <__assert_fail@plt+0x4eb8>
   16624:	ldr	r0, [r0, r6]
   16628:	bl	13f04 <__assert_fail@plt+0x2790>
   1662c:	add	r6, r6, #12
   16630:	add	r5, r5, #1
   16634:	ldr	r0, [r8, #8]
   16638:	cmp	r5, r0
   1663c:	bcc	165f0 <__assert_fail@plt+0x4e7c>
   16640:	ldr	r0, [r8, #20]
   16644:	bl	13f04 <__assert_fail@plt+0x2790>
   16648:	ldr	r0, [r8, #24]
   1664c:	bl	13f04 <__assert_fail@plt+0x2790>
   16650:	ldr	r0, [r8, #28]
   16654:	bl	13f04 <__assert_fail@plt+0x2790>
   16658:	ldr	r0, [r8]
   1665c:	bl	13f04 <__assert_fail@plt+0x2790>
   16660:	ldr	r0, [r8, #32]
   16664:	cmp	r0, #0
   16668:	beq	166c4 <__assert_fail@plt+0x4f50>
   1666c:	mov	r5, #0
   16670:	ldr	r6, [r8, #32]
   16674:	add	r0, r5, r5, lsl #1
   16678:	ldr	r0, [r6, r0, lsl #2]!
   1667c:	add	r7, r6, #8
   16680:	cmp	r0, #1
   16684:	blt	166a8 <__assert_fail@plt+0x4f34>
   16688:	mov	r4, #0
   1668c:	ldr	r0, [r7]
   16690:	ldr	r0, [r0, r4, lsl #2]
   16694:	bl	173d4 <__assert_fail@plt+0x5c60>
   16698:	add	r4, r4, #1
   1669c:	ldr	r0, [r6]
   166a0:	cmp	r4, r0
   166a4:	blt	1668c <__assert_fail@plt+0x4f18>
   166a8:	ldr	r0, [r7]
   166ac:	bl	13f04 <__assert_fail@plt+0x2790>
   166b0:	add	r0, r5, #1
   166b4:	ldr	r1, [r8, #68]	; 0x44
   166b8:	cmp	r5, r1
   166bc:	mov	r5, r0
   166c0:	bcc	16670 <__assert_fail@plt+0x4efc>
   166c4:	ldr	r0, [r8, #32]
   166c8:	bl	13f04 <__assert_fail@plt+0x2790>
   166cc:	ldr	r0, [r8, #60]	; 0x3c
   166d0:	movw	r1, #22788	; 0x5904
   166d4:	movt	r1, #2
   166d8:	cmp	r0, r1
   166dc:	beq	166e4 <__assert_fail@plt+0x4f70>
   166e0:	bl	13f04 <__assert_fail@plt+0x2790>
   166e4:	ldr	r0, [r8, #132]	; 0x84
   166e8:	bl	13f04 <__assert_fail@plt+0x2790>
   166ec:	mov	r0, r8
   166f0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   166f4:	b	13f04 <__assert_fail@plt+0x2790>
   166f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166fc:	add	fp, sp, #28
   16700:	sub	sp, sp, #28
   16704:	mov	r7, #2
   16708:	ldr	sl, [fp, #8]
   1670c:	cmp	sl, #7
   16710:	bhi	167e4 <__assert_fail@plt+0x5070>
   16714:	mov	r6, r3
   16718:	mov	r9, r2
   1671c:	mov	r4, r1
   16720:	mov	r5, r0
   16724:	ldr	r0, [r0]
   16728:	str	r0, [sp, #24]
   1672c:	tst	sl, #4
   16730:	bne	16748 <__assert_fail@plt+0x4fd4>
   16734:	mov	r0, r4
   16738:	bl	11624 <strlen@plt>
   1673c:	mov	r7, r0
   16740:	mov	r8, #0
   16744:	b	16750 <__assert_fail@plt+0x4fdc>
   16748:	ldr	r8, [r6]
   1674c:	ldr	r7, [r6, #4]
   16750:	movw	r0, #0
   16754:	movt	r0, #0
   16758:	movw	r1, #0
   1675c:	movt	r1, #0
   16760:	orrs	r0, r1, r0
   16764:	str	r0, [sp, #20]
   16768:	beq	16778 <__assert_fail@plt+0x5004>
   1676c:	ldr	r0, [sp, #24]
   16770:	add	r0, r0, #136	; 0x88
   16774:	bl	11474 <pthread_mutex_lock@plt>
   16778:	ldrb	r0, [r5, #28]
   1677c:	tst	r0, #16
   16780:	bne	16794 <__assert_fail@plt+0x5020>
   16784:	str	r7, [sp]
   16788:	stmib	sp, {r7, r9}
   1678c:	str	r6, [sp, #12]
   16790:	b	167a8 <__assert_fail@plt+0x5034>
   16794:	mov	r0, #0
   16798:	str	r7, [sp]
   1679c:	str	r7, [sp, #4]
   167a0:	str	r0, [sp, #8]
   167a4:	str	r0, [sp, #12]
   167a8:	str	sl, [sp, #16]
   167ac:	mov	r0, r5
   167b0:	mov	r1, r4
   167b4:	mov	r2, r7
   167b8:	mov	r3, r8
   167bc:	bl	167f0 <__assert_fail@plt+0x507c>
   167c0:	mov	r7, r0
   167c4:	ldr	r0, [sp, #20]
   167c8:	cmp	r0, #0
   167cc:	beq	167dc <__assert_fail@plt+0x5068>
   167d0:	ldr	r0, [sp, #24]
   167d4:	add	r0, r0, #136	; 0x88
   167d8:	bl	113c0 <pthread_mutex_unlock@plt>
   167dc:	cmp	r7, #0
   167e0:	movwne	r7, #1
   167e4:	mov	r0, r7
   167e8:	sub	sp, fp, #28
   167ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167f4:	add	fp, sp, #28
   167f8:	sub	sp, sp, #212	; 0xd4
   167fc:	mov	r6, r3
   16800:	str	r2, [sp, #60]	; 0x3c
   16804:	str	r1, [sp, #36]	; 0x24
   16808:	mov	sl, r0
   1680c:	ldr	r8, [r0]
   16810:	add	r0, sp, #64	; 0x40
   16814:	mov	r7, #0
   16818:	mov	r1, #0
   1681c:	mov	r2, #136	; 0x88
   16820:	bl	1166c <memset@plt>
   16824:	str	r8, [sp, #148]	; 0x94
   16828:	ldr	r1, [sl, #16]
   1682c:	ldr	r0, [fp, #16]
   16830:	ldr	ip, [fp, #8]
   16834:	cmp	r1, #0
   16838:	mov	r5, #0
   1683c:	beq	16858 <__assert_fail@plt+0x50e4>
   16840:	ldrb	r2, [sl, #28]
   16844:	and	r2, r2, #9
   16848:	cmp	r2, #8
   1684c:	movne	r1, #0
   16850:	subs	r5, r6, ip
   16854:	movne	r5, r1
   16858:	str	r6, [sp, #44]	; 0x2c
   1685c:	ldr	r1, [sl, #8]
   16860:	ldr	r2, [sl, #24]
   16864:	mvn	r3, r2
   16868:	cmp	r2, r0
   1686c:	addcc	r7, r3, r0
   16870:	mov	r9, #1
   16874:	cmp	r1, #0
   16878:	beq	16d74 <__assert_fail@plt+0x5600>
   1687c:	ldr	r1, [r8, #36]	; 0x24
   16880:	cmp	r1, #0
   16884:	ldrne	r2, [r8, #40]	; 0x28
   16888:	cmpne	r2, #0
   1688c:	beq	16d74 <__assert_fail@plt+0x5600>
   16890:	ldr	r3, [r8, #44]	; 0x2c
   16894:	cmp	r3, #0
   16898:	ldrne	r6, [r8, #48]	; 0x30
   1689c:	cmpne	r6, #0
   168a0:	beq	16d74 <__assert_fail@plt+0x5600>
   168a4:	ldr	lr, [sl, #20]
   168a8:	ldr	r1, [r1, #8]
   168ac:	cmp	r1, #0
   168b0:	bne	168c0 <__assert_fail@plt+0x514c>
   168b4:	ldr	r1, [r2, #8]
   168b8:	cmp	r1, #0
   168bc:	beq	16e40 <__assert_fail@plt+0x56cc>
   168c0:	mov	r6, ip
   168c4:	ldr	r0, [fp, #16]
   168c8:	mov	r4, r7
   168cc:	subs	r0, r0, r7
   168d0:	str	r0, [sp, #48]	; 0x30
   168d4:	mov	r0, #1
   168d8:	str	r0, [sp, #40]	; 0x28
   168dc:	bne	168f0 <__assert_fail@plt+0x517c>
   168e0:	ldr	r0, [r8, #76]	; 0x4c
   168e4:	cmp	r0, #0
   168e8:	movwne	r0, #1
   168ec:	str	r0, [sp, #40]	; 0x28
   168f0:	ldr	r0, [r8, #8]
   168f4:	ldr	r1, [sl, #12]
   168f8:	str	r8, [sp, #8]
   168fc:	str	lr, [sp, #56]	; 0x38
   16900:	str	lr, [sp]
   16904:	ubfx	r1, r1, #22, #1
   16908:	str	r1, [sp, #4]
   1690c:	add	r3, r0, #1
   16910:	add	r0, sp, #64	; 0x40
   16914:	ldr	r7, [sp, #36]	; 0x24
   16918:	mov	r1, r7
   1691c:	ldr	r2, [sp, #60]	; 0x3c
   16920:	bl	1d0d8 <__assert_fail@plt+0xb964>
   16924:	cmp	r0, #0
   16928:	bne	16f84 <__assert_fail@plt+0x5810>
   1692c:	ldr	r1, [fp, #24]
   16930:	ldr	r0, [fp, #12]
   16934:	str	r0, [sp, #116]	; 0x74
   16938:	str	r0, [sp, #120]	; 0x78
   1693c:	str	sl, [sp, #32]
   16940:	ldrb	r0, [sl, #28]
   16944:	lsr	r0, r0, #7
   16948:	strb	r0, [sp, #141]	; 0x8d
   1694c:	ldr	r0, [r8, #76]	; 0x4c
   16950:	lsl	r2, r0, #1
   16954:	add	r0, sp, #64	; 0x40
   16958:	bl	1d188 <__assert_fail@plt+0xba14>
   1695c:	cmp	r0, #0
   16960:	bne	16f84 <__assert_fail@plt+0x5810>
   16964:	ldr	r0, [sp, #48]	; 0x30
   16968:	cmp	r0, #1
   1696c:	bhi	1697c <__assert_fail@plt+0x5208>
   16970:	ldrb	r0, [r8, #88]	; 0x58
   16974:	tst	r0, #2
   16978:	beq	169a4 <__assert_fail@plt+0x5230>
   1697c:	mov	r9, #12
   16980:	ldr	r0, [sp, #100]	; 0x64
   16984:	cmn	r0, #-1073741822	; 0xc0000002
   16988:	bhi	16d54 <__assert_fail@plt+0x55e0>
   1698c:	mov	r1, #4
   16990:	add	r0, r1, r0, lsl #2
   16994:	bl	23e64 <__assert_fail@plt+0x126f0>
   16998:	str	r0, [sp, #164]	; 0xa4
   1699c:	cmp	r0, #0
   169a0:	beq	16d54 <__assert_fail@plt+0x55e0>
   169a4:	str	r4, [sp, #16]
   169a8:	ldr	r4, [sp, #44]	; 0x2c
   169ac:	str	r4, [fp, #-36]	; 0xffffffdc
   169b0:	mov	r0, #4
   169b4:	ldr	r1, [fp, #24]
   169b8:	tst	r1, #1
   169bc:	mov	r1, #4
   169c0:	movweq	r1, #6
   169c4:	str	r1, [sp, #124]	; 0x7c
   169c8:	cmp	r6, r4
   169cc:	mov	lr, #1
   169d0:	mvnlt	lr, #0
   169d4:	mov	r1, r8
   169d8:	mov	r8, r6
   169dc:	movlt	r8, r4
   169e0:	mov	sl, r4
   169e4:	movlt	sl, r6
   169e8:	str	r1, [sp, #52]	; 0x34
   169ec:	ldr	ip, [r1, #92]	; 0x5c
   169f0:	cmp	r5, #0
   169f4:	beq	16a40 <__assert_fail@plt+0x52cc>
   169f8:	cmp	ip, #1
   169fc:	ldr	r2, [sp, #60]	; 0x3c
   16a00:	ldr	r3, [sp, #56]	; 0x38
   16a04:	beq	16a24 <__assert_fail@plt+0x52b0>
   16a08:	ldr	r0, [sp, #32]
   16a0c:	ldr	r0, [r0, #12]
   16a10:	and	r0, r0, #4194304	; 0x400000
   16a14:	orr	r0, r3, r0
   16a18:	clz	r0, r0
   16a1c:	lsr	r0, r0, #5
   16a20:	lsl	r0, r0, #2
   16a24:	cmp	r3, #0
   16a28:	mov	r1, r3
   16a2c:	movwne	r1, #1
   16a30:	cmp	r6, r4
   16a34:	orrge	r1, r1, #2
   16a38:	orr	r0, r1, r0
   16a3c:	b	16a4c <__assert_fail@plt+0x52d8>
   16a40:	mov	r0, #8
   16a44:	ldr	r2, [sp, #60]	; 0x3c
   16a48:	ldr	r3, [sp, #56]	; 0x38
   16a4c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16a50:	cmp	r1, sl
   16a54:	cmpge	r8, r1
   16a58:	blt	16d4c <__assert_fail@plt+0x55d8>
   16a5c:	sub	r1, fp, #36	; 0x24
   16a60:	cmp	r6, r4
   16a64:	movwlt	r1, #0
   16a68:	str	r1, [sp, #28]
   16a6c:	sub	r4, r0, #4
   16a70:	add	r9, sp, #64	; 0x40
   16a74:	str	ip, [sp, #44]	; 0x2c
   16a78:	str	lr, [sp, #24]
   16a7c:	str	r4, [sp, #20]
   16a80:	cmp	r4, #4
   16a84:	bhi	16ae8 <__assert_fail@plt+0x5374>
   16a88:	add	r0, pc, #0
   16a8c:	ldr	pc, [r0, r4, lsl #2]
   16a90:	andeq	r6, r1, r4, lsr #21
   16a94:	andeq	r6, r1, r4, lsr #21
   16a98:	andeq	r6, r1, ip, ror #22
   16a9c:	muleq	r1, ip, fp
   16aa0:	ldrdeq	r6, [r1], -r8
   16aa4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16aa8:	cmp	r0, sl
   16aac:	blt	16d4c <__assert_fail@plt+0x55d8>
   16ab0:	mov	r1, #0
   16ab4:	cmp	r0, r2
   16ab8:	ldrblt	r1, [r7, r0]
   16abc:	cmp	r3, #0
   16ac0:	ldrbne	r1, [r3, r1]
   16ac4:	ldrb	r1, [r5, r1]
   16ac8:	cmp	r1, #0
   16acc:	bne	16bd8 <__assert_fail@plt+0x5464>
   16ad0:	sub	r1, r0, #1
   16ad4:	str	r1, [fp, #-36]	; 0xffffffdc
   16ad8:	cmp	r0, sl
   16adc:	mov	r0, r1
   16ae0:	bgt	16ab0 <__assert_fail@plt+0x533c>
   16ae4:	b	16d4c <__assert_fail@plt+0x55d8>
   16ae8:	ldr	r0, [sp, #88]	; 0x58
   16aec:	ldr	r2, [sp, #96]	; 0x60
   16af0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16af4:	sub	r0, r1, r0
   16af8:	cmp	r0, r2
   16afc:	bcs	16b40 <__assert_fail@plt+0x53cc>
   16b00:	mov	r1, #0
   16b04:	ldr	r2, [sp, #92]	; 0x5c
   16b08:	cmp	r0, r2
   16b0c:	ldrcc	r1, [sp, #68]	; 0x44
   16b10:	ldrbcc	r1, [r1, r0]
   16b14:	ldrb	r0, [r5, r1]
   16b18:	cmp	r0, #0
   16b1c:	bne	16bd8 <__assert_fail@plt+0x5464>
   16b20:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16b24:	add	r0, r0, lr
   16b28:	str	r0, [fp, #-36]	; 0xffffffdc
   16b2c:	cmp	r0, sl
   16b30:	blt	16d4c <__assert_fail@plt+0x55d8>
   16b34:	cmp	r0, r8
   16b38:	ble	16ae8 <__assert_fail@plt+0x5374>
   16b3c:	b	16d4c <__assert_fail@plt+0x55d8>
   16b40:	mov	r0, r9
   16b44:	ldr	r2, [fp, #24]
   16b48:	bl	1d210 <__assert_fail@plt+0xba9c>
   16b4c:	cmp	r0, #0
   16b50:	bne	16f8c <__assert_fail@plt+0x5818>
   16b54:	ldr	r0, [sp, #88]	; 0x58
   16b58:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16b5c:	sub	r0, r1, r0
   16b60:	add	r9, sp, #64	; 0x40
   16b64:	ldr	lr, [sp, #24]
   16b68:	b	16b00 <__assert_fail@plt+0x538c>
   16b6c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16b70:	cmp	r0, r8
   16b74:	bge	16bcc <__assert_fail@plt+0x5458>
   16b78:	ldrb	r1, [r7, r0]
   16b7c:	ldrb	r1, [r5, r1]
   16b80:	cmp	r1, #0
   16b84:	bne	16bcc <__assert_fail@plt+0x5458>
   16b88:	add	r0, r0, #1
   16b8c:	str	r0, [fp, #-36]	; 0xffffffdc
   16b90:	cmp	r0, r8
   16b94:	blt	16b78 <__assert_fail@plt+0x5404>
   16b98:	b	16bcc <__assert_fail@plt+0x5458>
   16b9c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16ba0:	cmp	r0, r8
   16ba4:	bge	16bcc <__assert_fail@plt+0x5458>
   16ba8:	ldrb	r1, [r7, r0]
   16bac:	ldrb	r1, [r3, r1]
   16bb0:	ldrb	r1, [r5, r1]
   16bb4:	cmp	r1, #0
   16bb8:	bne	16bcc <__assert_fail@plt+0x5458>
   16bbc:	add	r0, r0, #1
   16bc0:	str	r0, [fp, #-36]	; 0xffffffdc
   16bc4:	cmp	r0, r8
   16bc8:	blt	16ba8 <__assert_fail@plt+0x5434>
   16bcc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16bd0:	cmp	r1, r8
   16bd4:	beq	16d2c <__assert_fail@plt+0x55b8>
   16bd8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16bdc:	mov	r0, r9
   16be0:	ldr	r2, [fp, #24]
   16be4:	bl	1d210 <__assert_fail@plt+0xba9c>
   16be8:	cmp	r0, #0
   16bec:	bne	16f8c <__assert_fail@plt+0x5818>
   16bf0:	ldr	r0, [sp, #44]	; 0x2c
   16bf4:	cmp	r0, #1
   16bf8:	add	r9, sp, #64	; 0x40
   16bfc:	ldrne	r0, [sp, #92]	; 0x5c
   16c00:	cmpne	r0, #0
   16c04:	bne	16c88 <__assert_fail@plt+0x5514>
   16c08:	mov	r0, #0
   16c0c:	str	r0, [sp, #172]	; 0xac
   16c10:	str	r0, [sp, #184]	; 0xb8
   16c14:	str	r0, [sp, #168]	; 0xa8
   16c18:	mov	r0, r9
   16c1c:	ldr	r1, [sp, #40]	; 0x28
   16c20:	ldr	r2, [sp, #28]
   16c24:	bl	1d83c <__assert_fail@plt+0xc0c8>
   16c28:	cmn	r0, #1
   16c2c:	mov	r4, r9
   16c30:	beq	16cf0 <__assert_fail@plt+0x557c>
   16c34:	mov	r2, r0
   16c38:	cmn	r0, #2
   16c3c:	beq	16f94 <__assert_fail@plt+0x5820>
   16c40:	str	r2, [sp, #156]	; 0x9c
   16c44:	ldr	r0, [sp, #48]	; 0x30
   16c48:	cmp	r0, #2
   16c4c:	bcc	16c9c <__assert_fail@plt+0x5528>
   16c50:	ldr	r0, [sp, #32]
   16c54:	ldrb	r0, [r0, #28]
   16c58:	ands	r0, r0, #16
   16c5c:	bne	16c9c <__assert_fail@plt+0x5528>
   16c60:	ldr	r0, [sp, #164]	; 0xa4
   16c64:	ldr	r1, [r0, r2, lsl #2]
   16c68:	add	r0, sp, #64	; 0x40
   16c6c:	bl	1dbb0 <__assert_fail@plt+0xc43c>
   16c70:	str	r0, [sp, #160]	; 0xa0
   16c74:	ldr	r0, [sp, #52]	; 0x34
   16c78:	ldrb	r0, [r0, #88]	; 0x58
   16c7c:	tst	r0, #1
   16c80:	beq	16cc0 <__assert_fail@plt+0x554c>
   16c84:	b	16cd0 <__assert_fail@plt+0x555c>
   16c88:	ldr	r0, [sp, #72]	; 0x48
   16c8c:	ldr	r0, [r0]
   16c90:	cmn	r0, #1
   16c94:	bne	16c08 <__assert_fail@plt+0x5494>
   16c98:	b	16cfc <__assert_fail@plt+0x5588>
   16c9c:	ldr	r0, [sp, #52]	; 0x34
   16ca0:	ldr	r0, [r0, #76]	; 0x4c
   16ca4:	cmp	r0, #0
   16ca8:	beq	16d80 <__assert_fail@plt+0x560c>
   16cac:	ldr	r0, [sp, #164]	; 0xa4
   16cb0:	ldr	r1, [r0, r2, lsl #2]
   16cb4:	add	r0, sp, #64	; 0x40
   16cb8:	bl	1dbb0 <__assert_fail@plt+0xc43c>
   16cbc:	str	r0, [sp, #160]	; 0xa0
   16cc0:	ldr	r0, [sp, #52]	; 0x34
   16cc4:	ldr	r0, [r0, #76]	; 0x4c
   16cc8:	cmp	r0, #0
   16ccc:	beq	16d80 <__assert_fail@plt+0x560c>
   16cd0:	add	r0, sp, #64	; 0x40
   16cd4:	bl	1dc28 <__assert_fail@plt+0xc4b4>
   16cd8:	cmp	r0, #0
   16cdc:	beq	16d80 <__assert_fail@plt+0x560c>
   16ce0:	mov	r9, r0
   16ce4:	cmp	r0, #1
   16ce8:	add	r4, sp, #64	; 0x40
   16cec:	bne	16d50 <__assert_fail@plt+0x55dc>
   16cf0:	mov	r0, r4
   16cf4:	bl	1de48 <__assert_fail@plt+0xc6d4>
   16cf8:	mov	r9, r4
   16cfc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16d00:	ldr	lr, [sp, #24]
   16d04:	add	r0, r0, lr
   16d08:	str	r0, [fp, #-36]	; 0xffffffdc
   16d0c:	cmp	r0, sl
   16d10:	blt	16d4c <__assert_fail@plt+0x55d8>
   16d14:	cmp	r8, r0
   16d18:	ldr	r2, [sp, #60]	; 0x3c
   16d1c:	ldr	r4, [sp, #20]
   16d20:	ldr	r3, [sp, #56]	; 0x38
   16d24:	bge	16a80 <__assert_fail@plt+0x530c>
   16d28:	b	16d4c <__assert_fail@plt+0x55d8>
   16d2c:	mov	r0, #0
   16d30:	cmp	r1, r2
   16d34:	ldrblt	r0, [r7, r1]
   16d38:	cmp	r3, #0
   16d3c:	ldrbne	r0, [r3, r0]
   16d40:	ldrb	r0, [r5, r0]
   16d44:	cmp	r0, #0
   16d48:	bne	16bd8 <__assert_fail@plt+0x5464>
   16d4c:	mov	r9, #1
   16d50:	ldr	r8, [sp, #52]	; 0x34
   16d54:	ldr	r0, [sp, #164]	; 0xa4
   16d58:	bl	13f04 <__assert_fail@plt+0x2790>
   16d5c:	ldr	r0, [r8, #76]	; 0x4c
   16d60:	cmp	r0, #0
   16d64:	addne	r0, sp, #64	; 0x40
   16d68:	blne	1e170 <__assert_fail@plt+0xc9fc>
   16d6c:	add	r0, sp, #64	; 0x40
   16d70:	bl	177b8 <__assert_fail@plt+0x6044>
   16d74:	mov	r0, r9
   16d78:	sub	sp, fp, #28
   16d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d80:	ldr	sl, [sp, #48]	; 0x30
   16d84:	cmp	sl, #0
   16d88:	beq	16e7c <__assert_fail@plt+0x5708>
   16d8c:	cmp	sl, #1
   16d90:	ldr	r8, [sp, #52]	; 0x34
   16d94:	ldr	r6, [sp, #16]
   16d98:	ldr	r4, [fp, #16]
   16d9c:	beq	16dbc <__assert_fail@plt+0x5648>
   16da0:	mvn	r0, r6
   16da4:	add	r0, r0, r4
   16da8:	lsl	r2, r0, #3
   16dac:	ldr	r0, [fp, #20]
   16db0:	add	r0, r0, #8
   16db4:	mov	r1, #255	; 0xff
   16db8:	bl	1166c <memset@plt>
   16dbc:	mov	r0, #0
   16dc0:	ldr	r1, [sp, #156]	; 0x9c
   16dc4:	ldr	r2, [fp, #20]
   16dc8:	stm	r2, {r0, r1}
   16dcc:	cmp	sl, #2
   16dd0:	bcc	16e24 <__assert_fail@plt+0x56b0>
   16dd4:	ldr	r0, [sp, #32]
   16dd8:	ldrb	r0, [r0, #28]
   16ddc:	ands	r0, r0, #16
   16de0:	bne	16e24 <__assert_fail@plt+0x56b0>
   16de4:	ldrb	r1, [r8, #88]	; 0x58
   16de8:	mov	r0, #0
   16dec:	tst	r1, #1
   16df0:	beq	16e04 <__assert_fail@plt+0x5690>
   16df4:	ldr	r1, [r8, #76]	; 0x4c
   16df8:	mov	r0, #0
   16dfc:	cmp	r1, #0
   16e00:	movwgt	r0, #1
   16e04:	str	r0, [sp]
   16e08:	add	r1, sp, #64	; 0x40
   16e0c:	ldr	r0, [sp, #32]
   16e10:	mov	r2, sl
   16e14:	ldr	r3, [fp, #20]
   16e18:	bl	1def0 <__assert_fail@plt+0xc77c>
   16e1c:	cmp	r0, #0
   16e20:	bne	16f84 <__assert_fail@plt+0x5810>
   16e24:	ldr	r0, [fp, #20]
   16e28:	add	r0, r0, #4
   16e2c:	add	r1, sp, #64	; 0x40
   16e30:	add	lr, r1, #32
   16e34:	ldrb	r2, [sp, #140]	; 0x8c
   16e38:	mov	r3, r4
   16e3c:	b	16ec8 <__assert_fail@plt+0x5754>
   16e40:	ldr	r1, [r3, #8]
   16e44:	cmp	r1, #0
   16e48:	beq	16e58 <__assert_fail@plt+0x56e4>
   16e4c:	ldrsb	r1, [sl, #28]
   16e50:	cmp	r1, #0
   16e54:	blt	168c0 <__assert_fail@plt+0x514c>
   16e58:	mov	r6, #0
   16e5c:	ldr	r0, [sp, #44]	; 0x2c
   16e60:	cmp	r0, #0
   16e64:	beq	16e84 <__assert_fail@plt+0x5710>
   16e68:	cmp	ip, #0
   16e6c:	mov	r0, #0
   16e70:	str	r0, [sp, #44]	; 0x2c
   16e74:	bne	16d74 <__assert_fail@plt+0x5600>
   16e78:	b	168c4 <__assert_fail@plt+0x5150>
   16e7c:	mov	r9, #0
   16e80:	b	16d50 <__assert_fail@plt+0x55dc>
   16e84:	mov	r0, #0
   16e88:	str	r0, [sp, #44]	; 0x2c
   16e8c:	b	168c4 <__assert_fail@plt+0x5150>
   16e90:	ldr	ip, [sp, #76]	; 0x4c
   16e94:	ldr	r5, [sp, #92]	; 0x5c
   16e98:	cmp	r7, r5
   16e9c:	mov	r1, lr
   16ea0:	addne	r1, ip, r7, lsl #2
   16ea4:	ldr	r1, [r1]
   16ea8:	str	r1, [r0, #-4]
   16eac:	ldr	r1, [r0]
   16eb0:	cmp	r1, r5
   16eb4:	mov	r4, lr
   16eb8:	addne	r4, ip, r1, lsl #2
   16ebc:	ldr	r1, [r4]
   16ec0:	str	r1, [r0]
   16ec4:	b	16edc <__assert_fail@plt+0x5768>
   16ec8:	ldr	r7, [r0, #-4]
   16ecc:	cmn	r7, #1
   16ed0:	beq	16ef0 <__assert_fail@plt+0x577c>
   16ed4:	cmp	r2, #0
   16ed8:	bne	16e90 <__assert_fail@plt+0x571c>
   16edc:	ldmda	r0, {r1, r7}
   16ee0:	ldr	r5, [fp, #-36]	; 0xffffffdc
   16ee4:	add	r1, r1, r5
   16ee8:	add	r7, r7, r5
   16eec:	stmda	r0, {r1, r7}
   16ef0:	add	r0, r0, #8
   16ef4:	sub	r3, r3, #1
   16ef8:	cmp	r6, r3
   16efc:	bne	16ec8 <__assert_fail@plt+0x5754>
   16f00:	cmp	r6, #0
   16f04:	ldr	r4, [fp, #20]
   16f08:	ble	16f1c <__assert_fail@plt+0x57a8>
   16f0c:	add	r0, r4, sl, lsl #3
   16f10:	lsl	r2, r6, #3
   16f14:	mov	r1, #255	; 0xff
   16f18:	bl	1166c <memset@plt>
   16f1c:	ldr	r0, [r8, #132]	; 0x84
   16f20:	mov	r9, #0
   16f24:	cmp	r0, #0
   16f28:	beq	16d54 <__assert_fail@plt+0x55e0>
   16f2c:	cmp	sl, #2
   16f30:	bcc	16d54 <__assert_fail@plt+0x55e0>
   16f34:	ldr	r1, [fp, #16]
   16f38:	sub	r1, r1, #1
   16f3c:	sub	r1, r1, r6
   16f40:	mov	r2, #0
   16f44:	ldr	r3, [r0, r2, lsl #2]
   16f48:	cmp	r2, r3
   16f4c:	beq	16f70 <__assert_fail@plt+0x57fc>
   16f50:	add	r7, r4, r2, lsl #3
   16f54:	add	r3, r4, r3, lsl #3
   16f58:	ldr	r3, [r3, #8]
   16f5c:	str	r3, [r7, #8]
   16f60:	ldr	r3, [r0, r2, lsl #2]
   16f64:	add	r3, r4, r3, lsl #3
   16f68:	ldr	r3, [r3, #12]
   16f6c:	str	r3, [r7, #12]
   16f70:	add	r2, r2, #1
   16f74:	cmp	r1, r2
   16f78:	bne	16f44 <__assert_fail@plt+0x57d0>
   16f7c:	mov	r9, #0
   16f80:	b	16d54 <__assert_fail@plt+0x55e0>
   16f84:	mov	r9, r0
   16f88:	b	16d54 <__assert_fail@plt+0x55e0>
   16f8c:	mov	r9, r0
   16f90:	b	16d50 <__assert_fail@plt+0x55dc>
   16f94:	mov	r9, #12
   16f98:	b	16d50 <__assert_fail@plt+0x55dc>
   16f9c:	push	{fp, lr}
   16fa0:	mov	fp, sp
   16fa4:	sub	sp, sp, #16
   16fa8:	mov	ip, #1
   16fac:	str	ip, [sp, #12]
   16fb0:	str	r2, [sp, #4]
   16fb4:	mov	ip, #0
   16fb8:	str	ip, [sp]
   16fbc:	ldr	ip, [fp, #8]
   16fc0:	str	ip, [sp, #8]
   16fc4:	bl	16fd0 <__assert_fail@plt+0x585c>
   16fc8:	mov	sp, fp
   16fcc:	pop	{fp, pc}
   16fd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fd4:	add	fp, sp, #28
   16fd8:	sub	sp, sp, #36	; 0x24
   16fdc:	mvn	r7, #0
   16fe0:	cmp	r3, #0
   16fe4:	blt	17180 <__assert_fail@plt+0x5a0c>
   16fe8:	mov	r9, r3
   16fec:	mov	r8, r2
   16ff0:	cmp	r3, r2
   16ff4:	bgt	17180 <__assert_fail@plt+0x5a0c>
   16ff8:	mov	r5, r0
   16ffc:	str	r1, [sp, #28]
   17000:	ldr	r0, [fp, #8]
   17004:	add	r0, r0, r9
   17008:	ldr	r4, [r5]
   1700c:	cmp	r0, r8
   17010:	mov	r6, r8
   17014:	bicle	r6, r0, r0, asr #31
   17018:	movw	r0, #0
   1701c:	movt	r0, #0
   17020:	movw	r1, #0
   17024:	movt	r1, #0
   17028:	orrs	r0, r1, r0
   1702c:	str	r0, [sp, #32]
   17030:	beq	1703c <__assert_fail@plt+0x58c8>
   17034:	add	r0, r4, #136	; 0x88
   17038:	bl	11474 <pthread_mutex_lock@plt>
   1703c:	str	r4, [sp, #20]
   17040:	ldr	r4, [fp, #16]
   17044:	ldrb	r0, [r5, #28]
   17048:	ubfx	r1, r0, #5, #2
   1704c:	str	r1, [sp, #24]
   17050:	cmp	r6, r9
   17054:	ble	17070 <__assert_fail@plt+0x58fc>
   17058:	tst	r0, #8
   1705c:	bne	17070 <__assert_fail@plt+0x58fc>
   17060:	ldr	r0, [r5, #16]
   17064:	cmp	r0, #0
   17068:	movne	r0, r5
   1706c:	blne	15f58 <__assert_fail@plt+0x47e4>
   17070:	mov	r7, #1
   17074:	mov	sl, #0
   17078:	cmp	r4, #0
   1707c:	beq	170b4 <__assert_fail@plt+0x5940>
   17080:	ldrb	r0, [r5, #28]
   17084:	ands	r1, r0, #16
   17088:	bne	170b4 <__assert_fail@plt+0x5940>
   1708c:	and	r0, r0, #6
   17090:	cmp	r0, #4
   17094:	bne	170a8 <__assert_fail@plt+0x5934>
   17098:	ldr	r7, [r4]
   1709c:	ldr	r0, [r5, #24]
   170a0:	cmp	r7, r0
   170a4:	bls	171a0 <__assert_fail@plt+0x5a2c>
   170a8:	ldr	r0, [r5, #24]
   170ac:	add	r7, r0, #1
   170b0:	mov	sl, r4
   170b4:	lsl	r0, r7, #3
   170b8:	bl	23e64 <__assert_fail@plt+0x126f0>
   170bc:	cmp	r0, #0
   170c0:	beq	1718c <__assert_fail@plt+0x5a18>
   170c4:	mov	r4, r0
   170c8:	ldr	r0, [fp, #12]
   170cc:	str	r6, [sp]
   170d0:	stmib	sp, {r0, r7}
   170d4:	str	r4, [sp, #12]
   170d8:	ldr	r0, [sp, #24]
   170dc:	str	r0, [sp, #16]
   170e0:	mov	r0, r5
   170e4:	ldr	r1, [sp, #28]
   170e8:	mov	r2, r8
   170ec:	mov	r3, r9
   170f0:	bl	167f0 <__assert_fail@plt+0x507c>
   170f4:	cmp	r0, #0
   170f8:	beq	1710c <__assert_fail@plt+0x5998>
   170fc:	mvn	r7, #1
   17100:	cmp	r0, #1
   17104:	mvneq	r7, #0
   17108:	b	17160 <__assert_fail@plt+0x59ec>
   1710c:	cmp	sl, #0
   17110:	beq	17144 <__assert_fail@plt+0x59d0>
   17114:	ldrb	r0, [r5, #28]
   17118:	ubfx	r3, r0, #1, #2
   1711c:	mov	r0, sl
   17120:	mov	r1, r4
   17124:	mov	r2, r7
   17128:	bl	1cf80 <__assert_fail@plt+0xb80c>
   1712c:	ldrb	r1, [r5, #28]
   17130:	and	r1, r1, #249	; 0xf9
   17134:	bfi	r1, r0, #1, #2
   17138:	strb	r1, [r5, #28]
   1713c:	tst	r0, #3
   17140:	beq	1715c <__assert_fail@plt+0x59e8>
   17144:	ldr	r0, [fp, #20]
   17148:	cmp	r0, #0
   1714c:	ldreq	r7, [r4]
   17150:	ldrne	r0, [r4, #4]
   17154:	subne	r7, r0, r9
   17158:	b	17160 <__assert_fail@plt+0x59ec>
   1715c:	mvn	r7, #1
   17160:	ldr	r5, [sp, #32]
   17164:	mov	r0, r4
   17168:	bl	13f04 <__assert_fail@plt+0x2790>
   1716c:	cmp	r5, #0
   17170:	beq	17180 <__assert_fail@plt+0x5a0c>
   17174:	ldr	r0, [sp, #20]
   17178:	add	r0, r0, #136	; 0x88
   1717c:	bl	113c0 <pthread_mutex_unlock@plt>
   17180:	mov	r0, r7
   17184:	sub	sp, fp, #28
   17188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1718c:	mvn	r7, #1
   17190:	ldr	r5, [sp, #32]
   17194:	cmp	r5, #0
   17198:	bne	17174 <__assert_fail@plt+0x5a00>
   1719c:	b	17180 <__assert_fail@plt+0x5a0c>
   171a0:	cmp	r7, #1
   171a4:	movwlt	r4, #0
   171a8:	movwlt	r7, #1
   171ac:	b	170b0 <__assert_fail@plt+0x593c>
   171b0:	push	{fp, lr}
   171b4:	mov	fp, sp
   171b8:	sub	sp, sp, #16
   171bc:	mov	ip, #0
   171c0:	str	ip, [sp, #12]
   171c4:	str	r2, [sp, #4]
   171c8:	ldr	ip, [fp, #12]
   171cc:	str	ip, [sp, #8]
   171d0:	ldr	ip, [fp, #8]
   171d4:	str	ip, [sp]
   171d8:	bl	16fd0 <__assert_fail@plt+0x585c>
   171dc:	mov	sp, fp
   171e0:	pop	{fp, pc}
   171e4:	push	{fp, lr}
   171e8:	mov	fp, sp
   171ec:	sub	sp, sp, #24
   171f0:	mov	ip, #1
   171f4:	str	ip, [sp, #20]
   171f8:	mov	ip, #0
   171fc:	str	ip, [sp, #8]
   17200:	ldr	ip, [fp, #20]
   17204:	str	ip, [sp, #16]
   17208:	ldr	ip, [fp, #16]
   1720c:	str	ip, [sp, #12]
   17210:	ldr	ip, [fp, #12]
   17214:	str	ip, [sp, #4]
   17218:	ldr	ip, [fp, #8]
   1721c:	str	ip, [sp]
   17220:	bl	1722c <__assert_fail@plt+0x5ab8>
   17224:	mov	sp, fp
   17228:	pop	{fp, pc}
   1722c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17230:	add	fp, sp, #28
   17234:	sub	sp, sp, #20
   17238:	mov	r6, r2
   1723c:	mov	r8, r1
   17240:	mov	r1, r0
   17244:	ldr	r4, [fp, #8]
   17248:	orr	r0, r4, r2
   1724c:	ldr	r2, [fp, #24]
   17250:	orr	r0, r0, r2
   17254:	cmp	r0, #0
   17258:	blt	1730c <__assert_fail@plt+0x5b98>
   1725c:	adds	sl, r6, r4
   17260:	bvs	1730c <__assert_fail@plt+0x5b98>
   17264:	mov	r5, #0
   17268:	cmp	r4, #1
   1726c:	blt	172c0 <__assert_fail@plt+0x5b4c>
   17270:	mov	r9, r3
   17274:	cmp	r6, #1
   17278:	blt	172c8 <__assert_fail@plt+0x5b54>
   1727c:	mov	r0, sl
   17280:	mov	r5, r1
   17284:	bl	23e64 <__assert_fail@plt+0x126f0>
   17288:	cmp	r0, #0
   1728c:	beq	1730c <__assert_fail@plt+0x5b98>
   17290:	mov	r7, r0
   17294:	mov	r1, r8
   17298:	mov	r2, r6
   1729c:	bl	1148c <memcpy@plt>
   172a0:	add	r0, r7, r6
   172a4:	mov	r1, r9
   172a8:	mov	r2, r4
   172ac:	bl	1148c <memcpy@plt>
   172b0:	ldr	r2, [fp, #24]
   172b4:	mov	r1, r5
   172b8:	mov	r5, r7
   172bc:	b	172cc <__assert_fail@plt+0x5b58>
   172c0:	mov	r7, r8
   172c4:	b	172cc <__assert_fail@plt+0x5b58>
   172c8:	mov	r7, r9
   172cc:	ldr	r0, [fp, #28]
   172d0:	add	r6, fp, #12
   172d4:	ldm	r6, {r3, r4, r6}
   172d8:	str	r4, [sp]
   172dc:	stmib	sp, {r2, r6}
   172e0:	str	r0, [sp, #12]
   172e4:	mov	r0, r1
   172e8:	mov	r1, r7
   172ec:	mov	r2, sl
   172f0:	bl	16fd0 <__assert_fail@plt+0x585c>
   172f4:	mov	r4, r0
   172f8:	mov	r0, r5
   172fc:	bl	13f04 <__assert_fail@plt+0x2790>
   17300:	mov	r0, r4
   17304:	sub	sp, fp, #28
   17308:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1730c:	mvn	r0, #1
   17310:	sub	sp, fp, #28
   17314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17318:	push	{fp, lr}
   1731c:	mov	fp, sp
   17320:	sub	sp, sp, #24
   17324:	mov	ip, #0
   17328:	str	ip, [sp, #20]
   1732c:	ldr	ip, [fp, #24]
   17330:	str	ip, [sp, #16]
   17334:	ldr	ip, [fp, #20]
   17338:	str	ip, [sp, #12]
   1733c:	ldr	ip, [fp, #16]
   17340:	str	ip, [sp, #8]
   17344:	ldr	ip, [fp, #12]
   17348:	str	ip, [sp, #4]
   1734c:	ldr	ip, [fp, #8]
   17350:	str	ip, [sp]
   17354:	bl	1722c <__assert_fail@plt+0x5ab8>
   17358:	mov	sp, fp
   1735c:	pop	{fp, pc}
   17360:	ldrb	ip, [r0, #28]
   17364:	bic	ip, ip, #6
   17368:	cmp	r2, #0
   1736c:	beq	1738c <__assert_fail@plt+0x5c18>
   17370:	push	{fp, lr}
   17374:	mov	fp, sp
   17378:	ldr	lr, [fp, #8]
   1737c:	orr	ip, ip, #2
   17380:	strb	ip, [r0, #28]
   17384:	stm	r1, {r2, r3, lr}
   17388:	pop	{fp, pc}
   1738c:	strb	ip, [r0, #28]
   17390:	mov	r0, #0
   17394:	str	r0, [r1]
   17398:	str	r0, [r1, #4]
   1739c:	str	r0, [r1, #8]
   173a0:	bx	lr
   173a4:	ldr	r1, [r0, #4]
   173a8:	movw	r2, #255	; 0xff
   173ac:	movt	r2, #4
   173b0:	and	r1, r1, r2
   173b4:	cmp	r1, #6
   173b8:	bne	173c4 <__assert_fail@plt+0x5c50>
   173bc:	ldr	r0, [r0]
   173c0:	b	17434 <__assert_fail@plt+0x5cc0>
   173c4:	cmp	r1, #3
   173c8:	bxne	lr
   173cc:	ldr	r0, [r0]
   173d0:	b	13f04 <__assert_fail@plt+0x2790>
   173d4:	push	{r4, sl, fp, lr}
   173d8:	add	fp, sp, #8
   173dc:	mov	r4, r0
   173e0:	ldr	r0, [r0, #24]
   173e4:	bl	13f04 <__assert_fail@plt+0x2790>
   173e8:	ldr	r0, [r4, #36]	; 0x24
   173ec:	bl	13f04 <__assert_fail@plt+0x2790>
   173f0:	ldr	r0, [r4, #40]	; 0x28
   173f4:	add	r1, r4, #4
   173f8:	cmp	r0, r1
   173fc:	beq	17410 <__assert_fail@plt+0x5c9c>
   17400:	ldr	r0, [r0, #8]
   17404:	bl	13f04 <__assert_fail@plt+0x2790>
   17408:	ldr	r0, [r4, #40]	; 0x28
   1740c:	bl	13f04 <__assert_fail@plt+0x2790>
   17410:	ldr	r0, [r4, #12]
   17414:	bl	13f04 <__assert_fail@plt+0x2790>
   17418:	ldr	r0, [r4, #48]	; 0x30
   1741c:	bl	13f04 <__assert_fail@plt+0x2790>
   17420:	ldr	r0, [r4, #44]	; 0x2c
   17424:	bl	13f04 <__assert_fail@plt+0x2790>
   17428:	mov	r0, r4
   1742c:	pop	{r4, sl, fp, lr}
   17430:	b	13f04 <__assert_fail@plt+0x2790>
   17434:	push	{r4, sl, fp, lr}
   17438:	add	fp, sp, #8
   1743c:	mov	r4, r0
   17440:	ldr	r0, [r0]
   17444:	bl	13f04 <__assert_fail@plt+0x2790>
   17448:	ldr	r0, [r4, #4]
   1744c:	bl	13f04 <__assert_fail@plt+0x2790>
   17450:	ldr	r0, [r4, #8]
   17454:	bl	13f04 <__assert_fail@plt+0x2790>
   17458:	ldr	r0, [r4, #12]
   1745c:	bl	13f04 <__assert_fail@plt+0x2790>
   17460:	mov	r0, r4
   17464:	pop	{r4, sl, fp, lr}
   17468:	b	13f04 <__assert_fail@plt+0x2790>
   1746c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17470:	add	fp, sp, #24
   17474:	mov	r5, r1
   17478:	mov	r9, r0
   1747c:	mov	r1, #0
   17480:	mov	r2, #160	; 0xa0
   17484:	bl	1166c <memset@plt>
   17488:	mov	r0, #31
   1748c:	str	r0, [r9, #64]	; 0x40
   17490:	movw	r0, #43689	; 0xaaa9
   17494:	movt	r0, #2730	; 0xaaa
   17498:	cmp	r5, r0
   1749c:	bhi	17610 <__assert_fail@plt+0x5e9c>
   174a0:	add	r0, r5, #1
   174a4:	str	r0, [r9, #4]
   174a8:	lsl	r0, r0, #3
   174ac:	bl	23e64 <__assert_fail@plt+0x126f0>
   174b0:	str	r0, [r9]
   174b4:	mov	r0, #1
   174b8:	mov	r6, r0
   174bc:	lsl	r0, r0, #1
   174c0:	cmp	r6, r5
   174c4:	bls	174b8 <__assert_fail@plt+0x5d44>
   174c8:	mov	r0, #12
   174cc:	mov	r1, r6
   174d0:	bl	23e10 <__assert_fail@plt+0x1269c>
   174d4:	str	r0, [r9, #32]
   174d8:	sub	r0, r6, #1
   174dc:	str	r0, [r9, #68]	; 0x44
   174e0:	bl	11570 <__ctype_get_mb_cur_max@plt>
   174e4:	str	r0, [r9, #92]	; 0x5c
   174e8:	mov	r0, #14
   174ec:	bl	11714 <nl_langinfo@plt>
   174f0:	ldrb	r1, [r0]
   174f4:	orr	r1, r1, #32
   174f8:	cmp	r1, #117	; 0x75
   174fc:	bne	17548 <__assert_fail@plt+0x5dd4>
   17500:	ldrb	r1, [r0, #1]
   17504:	orr	r1, r1, #32
   17508:	cmp	r1, #116	; 0x74
   1750c:	bne	17548 <__assert_fail@plt+0x5dd4>
   17510:	ldrb	r1, [r0, #2]
   17514:	orr	r1, r1, #32
   17518:	cmp	r1, #102	; 0x66
   1751c:	bne	17548 <__assert_fail@plt+0x5dd4>
   17520:	ldrb	r1, [r0, #3]!
   17524:	cmp	r1, #45	; 0x2d
   17528:	addeq	r0, r0, #1
   1752c:	movw	r1, #22836	; 0x5934
   17530:	movt	r1, #2
   17534:	bl	11420 <strcmp@plt>
   17538:	cmp	r0, #0
   1753c:	ldrbeq	r0, [r9, #88]	; 0x58
   17540:	orreq	r0, r0, #4
   17544:	strbeq	r0, [r9, #88]	; 0x58
   17548:	ldrb	r0, [r9, #88]	; 0x58
   1754c:	and	r1, r0, #247	; 0xf7
   17550:	strb	r1, [r9, #88]	; 0x58
   17554:	ldr	r1, [r9, #92]	; 0x5c
   17558:	cmp	r1, #2
   1755c:	blt	175f4 <__assert_fail@plt+0x5e80>
   17560:	tst	r0, #4
   17564:	bne	175e8 <__assert_fail@plt+0x5e74>
   17568:	mov	r8, #1
   1756c:	mov	r0, #32
   17570:	mov	r1, #1
   17574:	bl	23e10 <__assert_fail@plt+0x1269c>
   17578:	str	r0, [r9, #60]	; 0x3c
   1757c:	cmp	r0, #0
   17580:	beq	17610 <__assert_fail@plt+0x5e9c>
   17584:	mov	r7, #0
   17588:	mov	r6, #0
   1758c:	mov	r4, #0
   17590:	add	r5, r7, r4
   17594:	mov	r0, r5
   17598:	bl	11678 <btowc@plt>
   1759c:	cmn	r0, #1
   175a0:	ldrne	r1, [r9, #60]	; 0x3c
   175a4:	ldrne	r2, [r1, r6, lsl #2]
   175a8:	orrne	r2, r2, r8, lsl r4
   175ac:	strne	r2, [r1, r6, lsl #2]
   175b0:	cmp	r5, #127	; 0x7f
   175b4:	bhi	175c8 <__assert_fail@plt+0x5e54>
   175b8:	cmp	r5, r0
   175bc:	ldrbne	r0, [r9, #88]	; 0x58
   175c0:	orrne	r0, r0, #8
   175c4:	strbne	r0, [r9, #88]	; 0x58
   175c8:	add	r4, r4, #1
   175cc:	cmp	r4, #32
   175d0:	bne	17590 <__assert_fail@plt+0x5e1c>
   175d4:	add	r6, r6, #1
   175d8:	add	r7, r7, #32
   175dc:	cmp	r6, #8
   175e0:	bne	1758c <__assert_fail@plt+0x5e18>
   175e4:	b	175f4 <__assert_fail@plt+0x5e80>
   175e8:	movw	r0, #22788	; 0x5904
   175ec:	movt	r0, #2
   175f0:	str	r0, [r9, #60]	; 0x3c
   175f4:	ldr	r0, [r9]
   175f8:	cmp	r0, #0
   175fc:	ldrne	r1, [r9, #32]
   17600:	movne	r0, #0
   17604:	cmpne	r1, #0
   17608:	moveq	r0, #12
   1760c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17610:	mov	r0, #12
   17614:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17618:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1761c:	add	fp, sp, #24
   17620:	sub	sp, sp, #8
   17624:	mov	r8, r3
   17628:	mov	r5, r2
   1762c:	mov	r7, r1
   17630:	mov	r4, r0
   17634:	vmov.i32	q8, #0	; 0x00000000
   17638:	mov	r0, #80	; 0x50
   1763c:	mov	r1, r4
   17640:	vst1.32	{d16-d17}, [r1], r0
   17644:	mov	r0, #0
   17648:	str	r0, [r1]
   1764c:	add	r0, r4, #64	; 0x40
   17650:	vst1.32	{d16-d17}, [r0]
   17654:	add	r0, r4, #48	; 0x30
   17658:	vst1.32	{d16-d17}, [r0]
   1765c:	add	r0, r4, #32
   17660:	vst1.32	{d16-d17}, [r0]
   17664:	add	r0, r4, #16
   17668:	vst1.32	{d16-d17}, [r0]
   1766c:	ldr	r6, [fp, #12]
   17670:	str	r6, [sp, #4]
   17674:	ldr	r9, [fp, #8]
   17678:	str	r9, [sp]
   1767c:	mov	r0, r7
   17680:	mov	r1, r2
   17684:	mov	r2, r4
   17688:	bl	17e5c <__assert_fail@plt+0x66e8>
   1768c:	cmp	r5, #1
   17690:	blt	176a8 <__assert_fail@plt+0x5f34>
   17694:	add	r1, r5, #1
   17698:	mov	r0, r4
   1769c:	bl	17eb4 <__assert_fail@plt+0x6740>
   176a0:	cmp	r0, #0
   176a4:	bne	17760 <__assert_fail@plt+0x5fec>
   176a8:	ldrb	r0, [r4, #75]	; 0x4b
   176ac:	cmp	r0, #0
   176b0:	ldrne	r7, [r4, #4]
   176b4:	str	r7, [r4, #4]
   176b8:	ldr	r0, [r6, #92]	; 0x5c
   176bc:	cmp	r9, #0
   176c0:	beq	1771c <__assert_fail@plt+0x5fa8>
   176c4:	cmp	r0, #2
   176c8:	blt	17730 <__assert_fail@plt+0x5fbc>
   176cc:	mov	r0, r4
   176d0:	bl	17f58 <__assert_fail@plt+0x67e4>
   176d4:	cmp	r0, #0
   176d8:	bne	17760 <__assert_fail@plt+0x5fec>
   176dc:	ldr	r1, [r4, #32]
   176e0:	mov	r0, #0
   176e4:	cmp	r1, r5
   176e8:	bge	17760 <__assert_fail@plt+0x5fec>
   176ec:	ldr	r2, [r4, #28]
   176f0:	ldr	r1, [r4, #36]	; 0x24
   176f4:	ldr	r3, [r6, #92]	; 0x5c
   176f8:	add	r2, r3, r2
   176fc:	cmp	r1, r2
   17700:	bgt	17760 <__assert_fail@plt+0x5fec>
   17704:	lsl	r1, r1, #1
   17708:	mov	r0, r4
   1770c:	bl	17eb4 <__assert_fail@plt+0x6740>
   17710:	cmp	r0, #0
   17714:	beq	176cc <__assert_fail@plt+0x5f58>
   17718:	b	17760 <__assert_fail@plt+0x5fec>
   1771c:	cmp	r0, #2
   17720:	blt	1773c <__assert_fail@plt+0x5fc8>
   17724:	mov	r0, r4
   17728:	bl	1858c <__assert_fail@plt+0x6e18>
   1772c:	b	1775c <__assert_fail@plt+0x5fe8>
   17730:	mov	r0, r4
   17734:	bl	18520 <__assert_fail@plt+0x6dac>
   17738:	b	1775c <__assert_fail@plt+0x5fe8>
   1773c:	cmp	r8, #0
   17740:	beq	17750 <__assert_fail@plt+0x5fdc>
   17744:	mov	r0, r4
   17748:	bl	1871c <__assert_fail@plt+0x6fa8>
   1774c:	b	1775c <__assert_fail@plt+0x5fe8>
   17750:	ldr	r0, [r4, #36]	; 0x24
   17754:	str	r0, [r4, #28]
   17758:	str	r0, [r4, #32]
   1775c:	mov	r0, #0
   17760:	sub	sp, fp, #24
   17764:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17768:	push	{r4, r5, fp, lr}
   1776c:	add	fp, sp, #8
   17770:	ldr	r4, [r0]
   17774:	ldr	r0, [r4, #56]	; 0x38
   17778:	cmp	r0, #0
   1777c:	beq	17794 <__assert_fail@plt+0x6020>
   17780:	ldr	r5, [r0]
   17784:	bl	13f04 <__assert_fail@plt+0x2790>
   17788:	cmp	r5, #0
   1778c:	mov	r0, r5
   17790:	bne	17780 <__assert_fail@plt+0x600c>
   17794:	mov	r0, #31
   17798:	str	r0, [r4, #64]	; 0x40
   1779c:	mov	r5, #0
   177a0:	str	r5, [r4, #52]	; 0x34
   177a4:	str	r5, [r4, #56]	; 0x38
   177a8:	ldr	r0, [r4, #16]
   177ac:	bl	13f04 <__assert_fail@plt+0x2790>
   177b0:	str	r5, [r4, #16]
   177b4:	pop	{r4, r5, fp, pc}
   177b8:	push	{r4, sl, fp, lr}
   177bc:	add	fp, sp, #8
   177c0:	mov	r4, r0
   177c4:	ldr	r0, [r0, #8]
   177c8:	bl	13f04 <__assert_fail@plt+0x2790>
   177cc:	ldr	r0, [r4, #12]
   177d0:	bl	13f04 <__assert_fail@plt+0x2790>
   177d4:	ldrb	r0, [r4, #75]	; 0x4b
   177d8:	cmp	r0, #0
   177dc:	popeq	{r4, sl, fp, pc}
   177e0:	ldr	r0, [r4, #4]
   177e4:	pop	{r4, sl, fp, lr}
   177e8:	b	13f04 <__assert_fail@plt+0x2790>
   177ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177f0:	add	fp, sp, #28
   177f4:	sub	sp, sp, #20
   177f8:	mov	r8, r3
   177fc:	mov	r4, r2
   17800:	mov	r7, r1
   17804:	mov	r5, r0
   17808:	ldr	r9, [r1]
   1780c:	str	r2, [r9, #128]	; 0x80
   17810:	orr	r2, r2, #8388608	; 0x800000
   17814:	add	sl, sp, #12
   17818:	mov	r0, sl
   1781c:	mov	r1, r5
   17820:	bl	1877c <__assert_fail@plt+0x7008>
   17824:	mov	r6, #0
   17828:	stm	sp, {r6, r8}
   1782c:	mov	r0, r5
   17830:	mov	r1, r7
   17834:	mov	r2, sl
   17838:	mov	r3, r4
   1783c:	bl	1879c <__assert_fail@plt+0x7028>
   17840:	mov	r7, r0
   17844:	cmp	r0, #0
   17848:	bne	17858 <__assert_fail@plt+0x60e4>
   1784c:	ldr	r0, [r8]
   17850:	cmp	r0, #0
   17854:	bne	178a4 <__assert_fail@plt+0x6130>
   17858:	mov	r0, r9
   1785c:	mov	r1, #0
   17860:	mov	r2, #0
   17864:	mov	r3, #2
   17868:	bl	18908 <__assert_fail@plt+0x7194>
   1786c:	mov	r4, r0
   17870:	cmp	r7, #0
   17874:	beq	17894 <__assert_fail@plt+0x6120>
   17878:	mov	r0, r9
   1787c:	mov	r1, r7
   17880:	mov	r2, r4
   17884:	mov	r3, #16
   17888:	bl	18908 <__assert_fail@plt+0x7194>
   1788c:	mov	r6, r0
   17890:	b	17898 <__assert_fail@plt+0x6124>
   17894:	mov	r6, r4
   17898:	cmp	r4, #0
   1789c:	cmpne	r6, #0
   178a0:	beq	178b0 <__assert_fail@plt+0x613c>
   178a4:	mov	r0, r6
   178a8:	sub	sp, fp, #28
   178ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178b0:	mov	r0, #12
   178b4:	str	r0, [r8]
   178b8:	mov	r6, #0
   178bc:	b	178a4 <__assert_fail@plt+0x6130>
   178c0:	push	{r4, r5, r6, r7, fp, lr}
   178c4:	add	fp, sp, #16
   178c8:	mov	r6, r0
   178cc:	ldr	r4, [r0]
   178d0:	ldr	r0, [r4, #4]
   178d4:	lsl	r0, r0, #2
   178d8:	bl	23e64 <__assert_fail@plt+0x126f0>
   178dc:	str	r0, [r4, #12]
   178e0:	ldr	r0, [r4, #4]
   178e4:	lsl	r0, r0, #2
   178e8:	bl	23e64 <__assert_fail@plt+0x126f0>
   178ec:	str	r0, [r4, #16]
   178f0:	ldr	r0, [r4, #4]
   178f4:	add	r0, r0, r0, lsl #1
   178f8:	lsl	r0, r0, #2
   178fc:	bl	23e64 <__assert_fail@plt+0x126f0>
   17900:	str	r0, [r4, #20]
   17904:	ldr	r0, [r4, #4]
   17908:	add	r0, r0, r0, lsl #1
   1790c:	lsl	r0, r0, #2
   17910:	bl	23e64 <__assert_fail@plt+0x126f0>
   17914:	str	r0, [r4, #24]
   17918:	ldr	r1, [r4, #12]
   1791c:	mov	r7, #12
   17920:	cmp	r1, #0
   17924:	ldrne	r1, [r4, #16]
   17928:	cmpne	r1, #0
   1792c:	beq	17940 <__assert_fail@plt+0x61cc>
   17930:	cmp	r0, #0
   17934:	ldrne	r0, [r4, #20]
   17938:	cmpne	r0, #0
   1793c:	bne	17948 <__assert_fail@plt+0x61d4>
   17940:	mov	r0, r7
   17944:	pop	{r4, r5, r6, r7, fp, pc}
   17948:	ldr	r0, [r6, #24]
   1794c:	lsl	r0, r0, #2
   17950:	bl	23e64 <__assert_fail@plt+0x126f0>
   17954:	str	r0, [r4, #132]	; 0x84
   17958:	cmp	r0, #0
   1795c:	beq	17a00 <__assert_fail@plt+0x628c>
   17960:	ldr	r0, [r6, #24]
   17964:	cmp	r0, #0
   17968:	beq	17988 <__assert_fail@plt+0x6214>
   1796c:	ldr	r0, [r4, #132]	; 0x84
   17970:	mov	r1, #0
   17974:	str	r1, [r0, r1, lsl #2]
   17978:	add	r1, r1, #1
   1797c:	ldr	r2, [r6, #24]
   17980:	cmp	r1, r2
   17984:	bcc	17974 <__assert_fail@plt+0x6200>
   17988:	ldr	r0, [r4, #52]	; 0x34
   1798c:	movw	r1, #47256	; 0xb898
   17990:	movt	r1, #1
   17994:	mov	r2, r4
   17998:	bl	1b818 <__assert_fail@plt+0xa0a4>
   1799c:	ldr	r1, [r6, #24]
   179a0:	mov	r0, #0
   179a4:	cmp	r1, #0
   179a8:	beq	179e4 <__assert_fail@plt+0x6270>
   179ac:	ldr	r2, [r4, #132]	; 0x84
   179b0:	ldr	r3, [r2]
   179b4:	cmp	r3, #0
   179b8:	bne	179e8 <__assert_fail@plt+0x6274>
   179bc:	mov	r3, #1
   179c0:	mov	r0, r3
   179c4:	ldr	r1, [r6, #24]
   179c8:	cmp	r3, r1
   179cc:	bcs	179e8 <__assert_fail@plt+0x6274>
   179d0:	ldr	r5, [r2, r0, lsl #2]
   179d4:	add	r3, r0, #1
   179d8:	cmp	r0, r5
   179dc:	beq	179c0 <__assert_fail@plt+0x624c>
   179e0:	b	179e8 <__assert_fail@plt+0x6274>
   179e4:	mov	r1, #0
   179e8:	cmp	r0, r1
   179ec:	bne	17a00 <__assert_fail@plt+0x628c>
   179f0:	ldr	r0, [r4, #132]	; 0x84
   179f4:	bl	13f04 <__assert_fail@plt+0x2790>
   179f8:	mov	r0, #0
   179fc:	str	r0, [r4, #132]	; 0x84
   17a00:	ldr	r0, [r4, #52]	; 0x34
   17a04:	movw	r1, #47408	; 0xb930
   17a08:	movt	r1, #1
   17a0c:	mov	r2, r6
   17a10:	bl	19340 <__assert_fail@plt+0x7bcc>
   17a14:	cmp	r0, #0
   17a18:	bne	17ad8 <__assert_fail@plt+0x6364>
   17a1c:	ldr	r0, [r4, #52]	; 0x34
   17a20:	movw	r1, #47544	; 0xb9b8
   17a24:	movt	r1, #1
   17a28:	mov	r2, r4
   17a2c:	bl	19340 <__assert_fail@plt+0x7bcc>
   17a30:	cmp	r0, #0
   17a34:	bne	17ad8 <__assert_fail@plt+0x6364>
   17a38:	ldr	r0, [r4, #52]	; 0x34
   17a3c:	movw	r1, #47684	; 0xba44
   17a40:	movt	r1, #1
   17a44:	mov	r2, r4
   17a48:	bl	1b818 <__assert_fail@plt+0xa0a4>
   17a4c:	ldr	r0, [r4, #52]	; 0x34
   17a50:	movw	r1, #47784	; 0xbaa8
   17a54:	movt	r1, #1
   17a58:	mov	r2, r4
   17a5c:	bl	1b818 <__assert_fail@plt+0xa0a4>
   17a60:	cmp	r0, #0
   17a64:	bne	17ad8 <__assert_fail@plt+0x6364>
   17a68:	mov	r0, r4
   17a6c:	bl	1bbbc <__assert_fail@plt+0xa448>
   17a70:	cmp	r0, #0
   17a74:	popne	{r4, r5, r6, r7, fp, pc}
   17a78:	ldrb	r0, [r6, #28]
   17a7c:	tst	r0, #16
   17a80:	bne	17a98 <__assert_fail@plt+0x6324>
   17a84:	ldr	r0, [r6, #24]
   17a88:	cmp	r0, #0
   17a8c:	ldrbne	r0, [r4, #88]	; 0x58
   17a90:	tstne	r0, #1
   17a94:	bne	17aa4 <__assert_fail@plt+0x6330>
   17a98:	ldr	r0, [r4, #76]	; 0x4c
   17a9c:	cmp	r0, #0
   17aa0:	beq	17acc <__assert_fail@plt+0x6358>
   17aa4:	ldr	r0, [r4, #8]
   17aa8:	add	r0, r0, r0, lsl #1
   17aac:	lsl	r0, r0, #2
   17ab0:	bl	23e64 <__assert_fail@plt+0x126f0>
   17ab4:	str	r0, [r4, #28]
   17ab8:	cmp	r0, #0
   17abc:	beq	17940 <__assert_fail@plt+0x61cc>
   17ac0:	mov	r0, r4
   17ac4:	pop	{r4, r5, r6, r7, fp, lr}
   17ac8:	b	1bc78 <__assert_fail@plt+0xa504>
   17acc:	mov	r7, #0
   17ad0:	mov	r0, r7
   17ad4:	pop	{r4, r5, r6, r7, fp, pc}
   17ad8:	pop	{r4, r5, r6, r7, fp, pc}
   17adc:	push	{r4, r5, r6, r7, fp, lr}
   17ae0:	add	fp, sp, #16
   17ae4:	ldr	r1, [r0, #8]
   17ae8:	cmp	r1, #0
   17aec:	beq	17bcc <__assert_fail@plt+0x6458>
   17af0:	ldr	r3, [r0]
   17af4:	mov	r5, #0
   17af8:	mov	ip, #1
   17afc:	mov	lr, #139	; 0x8b
   17b00:	mov	r2, #0
   17b04:	mov	r4, #0
   17b08:	add	r1, r3, r4, lsl #3
   17b0c:	ldrb	r6, [r1, #4]
   17b10:	sub	r6, r6, #1
   17b14:	cmp	r6, #11
   17b18:	bhi	17c74 <__assert_fail@plt+0x6500>
   17b1c:	add	r7, pc, #0
   17b20:	ldr	pc, [r7, r6, lsl #2]
   17b24:	andeq	r7, r1, ip, lsr #23
   17b28:	andeq	r7, r1, r4, asr fp
   17b2c:	andeq	r7, r1, r8, ror #22
   17b30:	andeq	r7, r1, r4, asr fp
   17b34:	andeq	r7, r1, r4, asr #23
   17b38:	andeq	r7, r1, r0, ror ip
   17b3c:	andeq	r7, r1, r4, ror ip
   17b40:	andeq	r7, r1, r4, asr fp
   17b44:	andeq	r7, r1, r4, asr fp
   17b48:	andeq	r7, r1, r4, asr fp
   17b4c:	andeq	r7, r1, r4, asr fp
   17b50:	andeq	r7, r1, ip, lsl #23
   17b54:	ldr	r1, [r0, #8]
   17b58:	add	r4, r4, #1
   17b5c:	cmp	r4, r1
   17b60:	bcc	17b08 <__assert_fail@plt+0x6394>
   17b64:	b	17bd4 <__assert_fail@plt+0x6460>
   17b68:	ldr	r1, [r3, r4, lsl #3]
   17b6c:	mov	r6, #4
   17b70:	ldr	r7, [r1, r6, lsl #2]
   17b74:	cmp	r7, #0
   17b78:	popne	{r4, r5, r6, r7, fp, pc}
   17b7c:	add	r6, r6, #1
   17b80:	cmp	r6, #7
   17b84:	bls	17b70 <__assert_fail@plt+0x63fc>
   17b88:	b	17b54 <__assert_fail@plt+0x63e0>
   17b8c:	ldr	r1, [r3, r4, lsl #3]
   17b90:	sub	r1, r1, #16
   17b94:	ror	r1, r1, #4
   17b98:	cmp	r1, #7
   17b9c:	bhi	17c70 <__assert_fail@plt+0x64fc>
   17ba0:	tst	lr, ip, lsl r1
   17ba4:	bne	17b54 <__assert_fail@plt+0x63e0>
   17ba8:	b	17c70 <__assert_fail@plt+0x64fc>
   17bac:	ldrsb	r1, [r1]
   17bb0:	cmp	r1, #0
   17bb4:	mov	r1, #0
   17bb8:	movwlt	r1, #1
   17bbc:	orr	r2, r2, r1
   17bc0:	b	17b54 <__assert_fail@plt+0x63e0>
   17bc4:	mov	r5, #1
   17bc8:	b	17b54 <__assert_fail@plt+0x63e0>
   17bcc:	mov	r2, #0
   17bd0:	mov	r5, #0
   17bd4:	tst	r2, #1
   17bd8:	tsteq	r5, #1
   17bdc:	beq	17c40 <__assert_fail@plt+0x64cc>
   17be0:	ldr	r1, [r0, #8]
   17be4:	cmp	r1, #0
   17be8:	beq	17c40 <__assert_fail@plt+0x64cc>
   17bec:	mov	r2, #0
   17bf0:	mov	r3, #7
   17bf4:	ldr	r1, [r0]
   17bf8:	add	r4, r1, r2, lsl #3
   17bfc:	ldr	r1, [r4, #4]
   17c00:	uxtb	r6, r1
   17c04:	cmp	r6, #5
   17c08:	beq	17c28 <__assert_fail@plt+0x64b4>
   17c0c:	cmp	r6, #1
   17c10:	bne	17c30 <__assert_fail@plt+0x64bc>
   17c14:	ldrsb	r7, [r4]
   17c18:	cmn	r7, #1
   17c1c:	bgt	17c30 <__assert_fail@plt+0x64bc>
   17c20:	bic	r1, r1, #2097152	; 0x200000
   17c24:	b	17c2c <__assert_fail@plt+0x64b8>
   17c28:	bfi	r1, r3, #0, #8
   17c2c:	str	r1, [r4, #4]
   17c30:	ldr	r1, [r0, #8]
   17c34:	add	r2, r2, #1
   17c38:	cmp	r2, r1
   17c3c:	bcc	17bf4 <__assert_fail@plt+0x6480>
   17c40:	mov	r1, #1
   17c44:	str	r1, [r0, #92]	; 0x5c
   17c48:	ldr	r1, [r0, #76]	; 0x4c
   17c4c:	mov	r2, #0
   17c50:	cmp	r1, #0
   17c54:	movwgt	r2, #1
   17c58:	orr	r1, r5, r2
   17c5c:	and	r1, r1, #1
   17c60:	ldrb	r2, [r0, #88]	; 0x58
   17c64:	and	r2, r2, #249	; 0xf9
   17c68:	orr	r1, r2, r1, lsl #1
   17c6c:	strb	r1, [r0, #88]	; 0x58
   17c70:	pop	{r4, r5, r6, r7, fp, pc}
   17c74:	bl	11750 <abort@plt>
   17c78:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17c7c:	add	fp, sp, #24
   17c80:	sub	sp, sp, #16
   17c84:	mov	r9, r0
   17c88:	ldr	r0, [r0, #24]
   17c8c:	ldr	r1, [r9, #52]	; 0x34
   17c90:	ldr	r1, [r1, #12]
   17c94:	ldr	r1, [r1, #28]
   17c98:	str	r1, [r9, #72]	; 0x48
   17c9c:	add	r1, r1, r1, lsl #1
   17ca0:	add	r1, r0, r1, lsl #2
   17ca4:	mov	r0, sp
   17ca8:	bl	1c9bc <__assert_fail@plt+0xb248>
   17cac:	str	r0, [sp, #12]
   17cb0:	cmp	r0, #0
   17cb4:	bne	17e54 <__assert_fail@plt+0x66e0>
   17cb8:	ldr	r0, [r9, #76]	; 0x4c
   17cbc:	cmp	r0, #1
   17cc0:	ldrge	r0, [sp, #4]
   17cc4:	cmpge	r0, #1
   17cc8:	blt	17d94 <__assert_fail@plt+0x6620>
   17ccc:	mov	r7, #0
   17cd0:	mov	r8, sp
   17cd4:	ldr	r3, [sp, #8]
   17cd8:	ldr	r1, [r3, r7, lsl #2]
   17cdc:	ldr	r6, [r9]
   17ce0:	add	r2, r6, r1, lsl #3
   17ce4:	ldrb	ip, [r2, #4]
   17ce8:	cmp	ip, #4
   17cec:	bne	17d84 <__assert_fail@plt+0x6610>
   17cf0:	mov	r5, #0
   17cf4:	cmp	r0, #1
   17cf8:	blt	17d2c <__assert_fail@plt+0x65b8>
   17cfc:	ldr	r4, [r3, r5, lsl #2]
   17d00:	add	r2, r6, r4, lsl #3
   17d04:	ldrb	r2, [r2, #4]
   17d08:	cmp	r2, #9
   17d0c:	bne	17d20 <__assert_fail@plt+0x65ac>
   17d10:	ldr	r2, [r6, r1, lsl #3]
   17d14:	ldr	r4, [r6, r4, lsl #3]
   17d18:	cmp	r4, r2
   17d1c:	beq	17d2c <__assert_fail@plt+0x65b8>
   17d20:	add	r5, r5, #1
   17d24:	cmp	r5, r0
   17d28:	blt	17cfc <__assert_fail@plt+0x6588>
   17d2c:	cmp	r5, r0
   17d30:	beq	17d84 <__assert_fail@plt+0x6610>
   17d34:	cmp	ip, #4
   17d38:	bne	17d84 <__assert_fail@plt+0x6610>
   17d3c:	ldr	r0, [r9, #20]
   17d40:	add	r1, r1, r1, lsl #1
   17d44:	add	r0, r0, r1, lsl #2
   17d48:	ldr	r0, [r0, #8]
   17d4c:	ldr	r6, [r0]
   17d50:	mov	r0, r8
   17d54:	mov	r1, r6
   17d58:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   17d5c:	cmp	r0, #0
   17d60:	bne	17d84 <__assert_fail@plt+0x6610>
   17d64:	ldr	r0, [r9, #24]
   17d68:	add	r1, r6, r6, lsl #1
   17d6c:	add	r1, r0, r1, lsl #2
   17d70:	mov	r0, r8
   17d74:	bl	1c5b8 <__assert_fail@plt+0xae44>
   17d78:	mov	r7, #0
   17d7c:	cmp	r0, #0
   17d80:	bne	17e54 <__assert_fail@plt+0x66e0>
   17d84:	add	r7, r7, #1
   17d88:	ldr	r0, [sp, #4]
   17d8c:	cmp	r7, r0
   17d90:	blt	17cd4 <__assert_fail@plt+0x6560>
   17d94:	add	r0, sp, #12
   17d98:	mov	r2, sp
   17d9c:	mov	r1, r9
   17da0:	mov	r3, #0
   17da4:	bl	1caa4 <__assert_fail@plt+0xb330>
   17da8:	str	r0, [r9, #36]	; 0x24
   17dac:	cmp	r0, #0
   17db0:	beq	17e30 <__assert_fail@plt+0x66bc>
   17db4:	ldrsb	r1, [r0, #52]	; 0x34
   17db8:	cmn	r1, #1
   17dbc:	ble	17dd0 <__assert_fail@plt+0x665c>
   17dc0:	str	r0, [r9, #40]	; 0x28
   17dc4:	str	r0, [r9, #44]	; 0x2c
   17dc8:	str	r0, [r9, #48]	; 0x30
   17dcc:	b	17e48 <__assert_fail@plt+0x66d4>
   17dd0:	add	r5, sp, #12
   17dd4:	mov	r6, sp
   17dd8:	mov	r0, r5
   17ddc:	mov	r1, r9
   17de0:	mov	r2, r6
   17de4:	mov	r3, #1
   17de8:	bl	1caa4 <__assert_fail@plt+0xb330>
   17dec:	str	r0, [r9, #40]	; 0x28
   17df0:	mov	r0, r5
   17df4:	mov	r1, r9
   17df8:	mov	r2, r6
   17dfc:	mov	r3, #2
   17e00:	bl	1caa4 <__assert_fail@plt+0xb330>
   17e04:	str	r0, [r9, #44]	; 0x2c
   17e08:	mov	r0, r5
   17e0c:	mov	r1, r9
   17e10:	mov	r2, r6
   17e14:	mov	r3, #6
   17e18:	bl	1caa4 <__assert_fail@plt+0xb330>
   17e1c:	str	r0, [r9, #48]	; 0x30
   17e20:	ldr	r1, [r9, #40]	; 0x28
   17e24:	cmp	r1, #0
   17e28:	cmpne	r0, #0
   17e2c:	bne	17e3c <__assert_fail@plt+0x66c8>
   17e30:	ldr	r0, [sp, #12]
   17e34:	sub	sp, fp, #24
   17e38:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17e3c:	ldr	r0, [r9, #44]	; 0x2c
   17e40:	cmp	r0, #0
   17e44:	beq	17e30 <__assert_fail@plt+0x66bc>
   17e48:	ldr	r0, [sp, #8]
   17e4c:	bl	13f04 <__assert_fail@plt+0x2790>
   17e50:	mov	r0, #0
   17e54:	sub	sp, fp, #24
   17e58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17e5c:	str	r1, [r2, #48]	; 0x30
   17e60:	str	r0, [r2]
   17e64:	str	r1, [r2, #44]	; 0x2c
   17e68:	str	r3, [r2, #64]	; 0x40
   17e6c:	ldr	r0, [sp]
   17e70:	strb	r0, [r2, #72]	; 0x48
   17e74:	cmp	r3, #0
   17e78:	movwne	r3, #1
   17e7c:	orr	r0, r3, r0
   17e80:	strb	r0, [r2, #75]	; 0x4b
   17e84:	ldr	r0, [sp, #4]
   17e88:	ldr	r3, [r0, #92]	; 0x5c
   17e8c:	str	r3, [r2, #80]	; 0x50
   17e90:	ldrb	r3, [r0, #88]	; 0x58
   17e94:	ubfx	r3, r3, #2, #1
   17e98:	strb	r3, [r2, #73]	; 0x49
   17e9c:	ldrb	r0, [r0, #88]	; 0x58
   17ea0:	str	r1, [r2, #56]	; 0x38
   17ea4:	str	r1, [r2, #52]	; 0x34
   17ea8:	ubfx	r0, r0, #3, #1
   17eac:	strb	r0, [r2, #74]	; 0x4a
   17eb0:	bx	lr
   17eb4:	push	{r4, r5, r6, r7, fp, lr}
   17eb8:	add	fp, sp, #16
   17ebc:	mov	r4, r1
   17ec0:	mov	r5, r0
   17ec4:	ldr	r0, [r0, #80]	; 0x50
   17ec8:	cmp	r0, #2
   17ecc:	blt	17f18 <__assert_fail@plt+0x67a4>
   17ed0:	mov	r6, #12
   17ed4:	cmn	r4, #-1073741823	; 0xc0000001
   17ed8:	bhi	17f44 <__assert_fail@plt+0x67d0>
   17edc:	ldr	r0, [r5, #8]
   17ee0:	lsl	r7, r4, #2
   17ee4:	mov	r1, r7
   17ee8:	bl	23e94 <__assert_fail@plt+0x12720>
   17eec:	cmp	r0, #0
   17ef0:	beq	17f44 <__assert_fail@plt+0x67d0>
   17ef4:	str	r0, [r5, #8]
   17ef8:	ldr	r0, [r5, #12]
   17efc:	cmp	r0, #0
   17f00:	beq	17f18 <__assert_fail@plt+0x67a4>
   17f04:	mov	r1, r7
   17f08:	bl	23e94 <__assert_fail@plt+0x12720>
   17f0c:	cmp	r0, #0
   17f10:	beq	17f44 <__assert_fail@plt+0x67d0>
   17f14:	str	r0, [r5, #12]
   17f18:	ldrb	r0, [r5, #75]	; 0x4b
   17f1c:	cmp	r0, #0
   17f20:	beq	17f3c <__assert_fail@plt+0x67c8>
   17f24:	ldr	r0, [r5, #4]
   17f28:	mov	r1, r4
   17f2c:	bl	23e94 <__assert_fail@plt+0x12720>
   17f30:	cmp	r0, #0
   17f34:	beq	17f4c <__assert_fail@plt+0x67d8>
   17f38:	str	r0, [r5, #4]
   17f3c:	str	r4, [r5, #36]	; 0x24
   17f40:	mov	r6, #0
   17f44:	mov	r0, r6
   17f48:	pop	{r4, r5, r6, r7, fp, pc}
   17f4c:	mov	r6, #12
   17f50:	mov	r0, r6
   17f54:	pop	{r4, r5, r6, r7, fp, pc}
   17f58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f5c:	add	fp, sp, #28
   17f60:	sub	sp, sp, #92	; 0x5c
   17f64:	mov	r6, r0
   17f68:	ldrb	r0, [r0, #74]	; 0x4a
   17f6c:	ldr	sl, [r6, #28]
   17f70:	ldr	r5, [r6, #36]	; 0x24
   17f74:	ldr	r1, [r6, #48]	; 0x30
   17f78:	cmp	r5, r1
   17f7c:	movgt	r5, r1
   17f80:	cmp	r0, #0
   17f84:	str	r6, [sp]
   17f88:	bne	17fa4 <__assert_fail@plt+0x6830>
   17f8c:	ldr	r0, [r6, #64]	; 0x40
   17f90:	cmp	r0, #0
   17f94:	bne	17fa4 <__assert_fail@plt+0x6830>
   17f98:	ldrb	r0, [r6, #76]	; 0x4c
   17f9c:	cmp	r0, #0
   17fa0:	beq	17fac <__assert_fail@plt+0x6838>
   17fa4:	ldr	ip, [r6, #32]
   17fa8:	b	181c4 <__assert_fail@plt+0x6a50>
   17fac:	cmp	r5, sl
   17fb0:	ble	17fc0 <__assert_fail@plt+0x684c>
   17fb4:	add	r8, r6, #16
   17fb8:	mov	r9, r5
   17fbc:	b	18018 <__assert_fail@plt+0x68a4>
   17fc0:	mov	ip, sl
   17fc4:	b	184ec <__assert_fail@plt+0x6d78>
   17fc8:	add	r0, r4, #1
   17fcc:	cmp	r0, #2
   17fd0:	bcc	17fe8 <__assert_fail@plt+0x6874>
   17fd4:	ldr	r1, [sp]
   17fd8:	ldr	r0, [r1, #36]	; 0x24
   17fdc:	ldr	r1, [r1, #48]	; 0x30
   17fe0:	cmp	r0, r1
   17fe4:	blt	18180 <__assert_fail@plt+0x6a0c>
   17fe8:	ldr	r1, [sp]
   17fec:	ldr	r0, [r1, #4]
   17ff0:	strb	r6, [r0, r7]
   17ff4:	ldr	r0, [r1, #8]
   17ff8:	str	r6, [r0, r7, lsl #2]
   17ffc:	add	sl, r7, #1
   18000:	cmn	r4, #1
   18004:	bne	1815c <__assert_fail@plt+0x69e8>
   18008:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1800c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18010:	stm	r8, {r0, r1}
   18014:	b	1815c <__assert_fail@plt+0x69e8>
   18018:	ldr	r0, [r6]
   1801c:	ldr	r1, [r6, #24]
   18020:	add	r1, r1, sl
   18024:	ldrb	r6, [r0, r1]
   18028:	tst	r6, #128	; 0x80
   1802c:	bne	18074 <__assert_fail@plt+0x6900>
   18030:	mov	r0, r8
   18034:	mov	r4, sl
   18038:	bl	114bc <mbsinit@plt>
   1803c:	cmp	r0, #0
   18040:	beq	18074 <__assert_fail@plt+0x6900>
   18044:	mov	r0, r6
   18048:	bl	11738 <towupper@plt>
   1804c:	mov	sl, r4
   18050:	cmp	r0, #127	; 0x7f
   18054:	bhi	18074 <__assert_fail@plt+0x6900>
   18058:	ldr	r2, [sp]
   1805c:	ldr	r1, [r2, #4]
   18060:	strb	r0, [r1, sl]
   18064:	ldr	r1, [r2, #8]
   18068:	str	r0, [r1, sl, lsl #2]
   1806c:	add	sl, sl, #1
   18070:	b	1815c <__assert_fail@plt+0x69e8>
   18074:	ldm	r8, {r0, r1}
   18078:	str	r1, [fp, #-36]	; 0xffffffdc
   1807c:	str	r0, [fp, #-40]	; 0xffffffd8
   18080:	sub	r2, r5, sl
   18084:	ldr	r1, [sp]
   18088:	ldr	r0, [r1]
   1808c:	ldr	r1, [r1, #24]
   18090:	add	r0, r0, r1
   18094:	mov	r7, sl
   18098:	add	r1, r0, sl
   1809c:	add	r0, sp, #12
   180a0:	mov	r3, r8
   180a4:	bl	245c0 <__assert_fail@plt+0x12e4c>
   180a8:	mov	r4, r0
   180ac:	sub	r0, r0, #1
   180b0:	cmn	r0, #4
   180b4:	bhi	17fc8 <__assert_fail@plt+0x6854>
   180b8:	ldr	r0, [sp, #12]
   180bc:	bl	11738 <towupper@plt>
   180c0:	mov	r6, r0
   180c4:	ldr	r0, [sp, #12]
   180c8:	cmp	r6, r0
   180cc:	add	sl, sp, #16
   180d0:	bne	180f4 <__assert_fail@plt+0x6980>
   180d4:	ldr	r5, [sp]
   180d8:	ldr	r1, [r5]
   180dc:	ldr	r0, [r5, #4]
   180e0:	ldr	r2, [r5, #24]
   180e4:	add	r0, r0, r7
   180e8:	add	r1, r1, r2
   180ec:	add	r1, r1, r7
   180f0:	b	1811c <__assert_fail@plt+0x69a8>
   180f4:	mov	r0, sl
   180f8:	mov	r1, r6
   180fc:	sub	r2, fp, #40	; 0x28
   18100:	bl	11408 <wcrtomb@plt>
   18104:	cmp	r4, r0
   18108:	bne	18170 <__assert_fail@plt+0x69fc>
   1810c:	ldr	r5, [sp]
   18110:	ldr	r0, [r5, #4]
   18114:	add	r0, r0, r7
   18118:	mov	r1, sl
   1811c:	mov	r2, r4
   18120:	bl	1148c <memcpy@plt>
   18124:	ldr	r0, [r5, #8]
   18128:	str	r6, [r0, r7, lsl #2]
   1812c:	add	r6, r4, r7
   18130:	add	sl, r7, #1
   18134:	cmp	sl, r6
   18138:	mov	r5, r9
   1813c:	bge	1815c <__assert_fail@plt+0x69e8>
   18140:	mvn	r1, #3
   18144:	add	r2, r1, r4, lsl #2
   18148:	add	r0, r0, r7, lsl #2
   1814c:	add	r0, r0, #4
   18150:	mov	r1, #255	; 0xff
   18154:	bl	1166c <memset@plt>
   18158:	mov	sl, r6
   1815c:	cmp	r5, sl
   18160:	mov	ip, sl
   18164:	ldr	r6, [sp]
   18168:	bgt	18018 <__assert_fail@plt+0x68a4>
   1816c:	b	184ec <__assert_fail@plt+0x6d78>
   18170:	mov	ip, r7
   18174:	mov	sl, r7
   18178:	ldr	r6, [sp]
   1817c:	b	181cc <__assert_fail@plt+0x6a58>
   18180:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18184:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18188:	stm	r8, {r0, r1}
   1818c:	mov	ip, r7
   18190:	mov	sl, r7
   18194:	ldr	r6, [sp]
   18198:	b	184ec <__assert_fail@plt+0x6d78>
   1819c:	mvn	r1, #3
   181a0:	add	r2, r1, r5, lsl #2
   181a4:	add	r0, r0, sl, lsl #2
   181a8:	add	r0, r0, #4
   181ac:	mov	r1, #255	; 0xff
   181b0:	mov	r5, ip
   181b4:	bl	1166c <memset@plt>
   181b8:	mov	ip, r5
   181bc:	mov	sl, r4
   181c0:	ldr	r5, [sp, #4]
   181c4:	cmp	sl, r5
   181c8:	bge	184ec <__assert_fail@plt+0x6d78>
   181cc:	mov	r3, r6
   181d0:	ldr	r0, [r6, #16]!
   181d4:	ldr	r1, [r6, #4]
   181d8:	str	r0, [fp, #-40]	; 0xffffffd8
   181dc:	str	r1, [fp, #-36]	; 0xffffffdc
   181e0:	str	r5, [sp, #4]
   181e4:	sub	r2, r5, sl
   181e8:	ldr	r0, [r6, #48]	; 0x30
   181ec:	cmp	r0, #0
   181f0:	bne	182b8 <__assert_fail@plt+0x6b44>
   181f4:	ldr	r0, [r3]
   181f8:	ldr	r1, [r3, #24]
   181fc:	add	r0, r0, r1
   18200:	add	r4, r0, ip
   18204:	mov	r9, ip
   18208:	add	r0, sp, #8
   1820c:	mov	r1, r4
   18210:	mov	r3, r6
   18214:	bl	245c0 <__assert_fail@plt+0x12e4c>
   18218:	mov	r5, r0
   1821c:	sub	r8, r0, #1
   18220:	cmn	r8, #4
   18224:	bhi	18314 <__assert_fail@plt+0x6ba0>
   18228:	ldr	r0, [sp, #8]
   1822c:	bl	11738 <towupper@plt>
   18230:	mov	r7, r0
   18234:	ldr	r0, [sp, #8]
   18238:	cmp	r7, r0
   1823c:	bne	18254 <__assert_fail@plt+0x6ae0>
   18240:	ldr	r6, [sp]
   18244:	ldr	r0, [r6, #4]
   18248:	add	r0, r0, sl
   1824c:	mov	r1, r4
   18250:	b	1827c <__assert_fail@plt+0x6b08>
   18254:	add	r0, sp, #16
   18258:	sub	r2, fp, #40	; 0x28
   1825c:	mov	r1, r7
   18260:	bl	11408 <wcrtomb@plt>
   18264:	cmp	r0, r5
   18268:	bne	18390 <__assert_fail@plt+0x6c1c>
   1826c:	ldr	r6, [sp]
   18270:	ldr	r0, [r6, #4]
   18274:	add	r0, r0, sl
   18278:	add	r1, sp, #16
   1827c:	mov	r2, r5
   18280:	bl	1148c <memcpy@plt>
   18284:	ldrb	r0, [r6, #76]	; 0x4c
   18288:	cmp	r0, #0
   1828c:	mov	ip, r9
   18290:	bne	184b8 <__assert_fail@plt+0x6d44>
   18294:	ldr	r0, [r6, #8]
   18298:	str	r7, [r0, sl, lsl #2]
   1829c:	add	r4, r5, sl
   182a0:	add	ip, r5, ip
   182a4:	add	r1, sl, #1
   182a8:	cmp	r1, r4
   182ac:	blt	1819c <__assert_fail@plt+0x6a28>
   182b0:	mov	sl, r1
   182b4:	b	181c0 <__assert_fail@plt+0x6a4c>
   182b8:	add	r4, sp, #16
   182bc:	cmp	r2, #1
   182c0:	ldrge	r1, [sp]
   182c4:	ldrge	r1, [r1, #80]	; 0x50
   182c8:	cmpge	r1, #1
   182cc:	blt	18204 <__assert_fail@plt+0x6a90>
   182d0:	mov	r1, #0
   182d4:	add	r4, sp, #16
   182d8:	ldr	r5, [sp]
   182dc:	ldr	r3, [r5]
   182e0:	ldr	r7, [r5, #24]
   182e4:	add	r3, r3, r7
   182e8:	add	r3, r3, ip
   182ec:	ldrb	r3, [r3, r1]
   182f0:	ldrb	r3, [r0, r3]
   182f4:	strb	r3, [r4, r1]
   182f8:	add	r1, r1, #1
   182fc:	cmp	r1, r2
   18300:	bge	18204 <__assert_fail@plt+0x6a90>
   18304:	ldr	r3, [r5, #80]	; 0x50
   18308:	cmp	r1, r3
   1830c:	blt	182dc <__assert_fail@plt+0x6b68>
   18310:	b	18204 <__assert_fail@plt+0x6a90>
   18314:	add	r0, r5, #1
   18318:	cmp	r0, #2
   1831c:	mov	ip, r9
   18320:	ldr	r3, [sp]
   18324:	bcc	18338 <__assert_fail@plt+0x6bc4>
   18328:	ldr	r0, [r3, #36]	; 0x24
   1832c:	ldr	r1, [r3, #48]	; 0x30
   18330:	cmp	r0, r1
   18334:	blt	184dc <__assert_fail@plt+0x6d68>
   18338:	ldr	r0, [r3]
   1833c:	ldr	r2, [r3, #24]
   18340:	ldr	r1, [r3, #64]	; 0x40
   18344:	add	r2, r2, ip
   18348:	ldrb	r0, [r0, r2]
   1834c:	cmp	r1, #0
   18350:	ldrbne	r0, [r1, r0]
   18354:	ldr	r2, [sp]
   18358:	ldr	r1, [r2, #4]
   1835c:	strb	r0, [r1, sl]
   18360:	ldrb	r1, [r2, #76]	; 0x4c
   18364:	cmp	r1, #0
   18368:	ldrne	r1, [r2, #12]
   1836c:	strne	ip, [r1, sl, lsl #2]
   18370:	ldr	r1, [r2, #8]
   18374:	str	r0, [r1, sl, lsl #2]
   18378:	add	sl, sl, #1
   1837c:	add	ip, ip, #1
   18380:	cmn	r5, #1
   18384:	beq	1850c <__assert_fail@plt+0x6d98>
   18388:	ldr	r6, [sp]
   1838c:	b	181c0 <__assert_fail@plt+0x6a4c>
   18390:	mov	r2, r0
   18394:	cmn	r0, #1
   18398:	beq	18240 <__assert_fail@plt+0x6acc>
   1839c:	mov	ip, r9
   183a0:	add	r1, r2, sl
   183a4:	ldr	r3, [sp]
   183a8:	ldr	r0, [r3, #36]	; 0x24
   183ac:	cmp	r1, r0
   183b0:	bhi	184dc <__assert_fail@plt+0x6d68>
   183b4:	str	r1, [sp, #4]
   183b8:	ldr	r1, [r3, #12]
   183bc:	cmp	r1, #0
   183c0:	mov	r6, r3
   183c4:	bne	183e4 <__assert_fail@plt+0x6c70>
   183c8:	lsl	r0, r0, #2
   183cc:	mov	r4, r2
   183d0:	bl	23e64 <__assert_fail@plt+0x126f0>
   183d4:	mov	r2, r4
   183d8:	str	r0, [r6, #12]
   183dc:	cmp	r0, #0
   183e0:	beq	18500 <__assert_fail@plt+0x6d8c>
   183e4:	ldrb	r0, [r6, #76]	; 0x4c
   183e8:	cmp	r0, #0
   183ec:	bne	18418 <__assert_fail@plt+0x6ca4>
   183f0:	cmp	sl, #0
   183f4:	beq	18410 <__assert_fail@plt+0x6c9c>
   183f8:	ldr	r0, [r6, #12]
   183fc:	mov	r1, #0
   18400:	str	r1, [r0, r1, lsl #2]
   18404:	add	r1, r1, #1
   18408:	cmp	sl, r1
   1840c:	bne	18400 <__assert_fail@plt+0x6c8c>
   18410:	mov	r0, #1
   18414:	strb	r0, [r6, #76]	; 0x4c
   18418:	ldr	r0, [r6, #4]
   1841c:	add	r0, r0, sl
   18420:	add	r1, sp, #16
   18424:	mov	r4, r2
   18428:	bl	1148c <memcpy@plt>
   1842c:	ldr	r1, [r6, #8]
   18430:	str	r7, [r1, sl, lsl #2]
   18434:	ldr	r0, [r6, #12]
   18438:	mov	ip, r9
   1843c:	str	r9, [r0, sl, lsl #2]
   18440:	cmp	r4, #2
   18444:	bcc	1847c <__assert_fail@plt+0x6d08>
   18448:	add	r0, r0, sl, lsl #2
   1844c:	add	r1, r1, sl, lsl #2
   18450:	mov	r2, #1
   18454:	mvn	r3, #0
   18458:	cmp	r2, r5
   1845c:	mov	r7, r8
   18460:	movcc	r7, r2
   18464:	add	r7, r7, ip
   18468:	str	r7, [r0, r2, lsl #2]
   1846c:	str	r3, [r1, r2, lsl #2]
   18470:	add	r2, r2, #1
   18474:	cmp	r4, r2
   18478:	bne	18458 <__assert_fail@plt+0x6ce4>
   1847c:	sub	r1, r4, r5
   18480:	ldr	r0, [r6, #48]	; 0x30
   18484:	ldr	r2, [r6, #52]	; 0x34
   18488:	add	r0, r0, r1
   1848c:	str	r0, [r6, #48]	; 0x30
   18490:	cmp	r2, ip
   18494:	ldrgt	r2, [r6, #56]	; 0x38
   18498:	addgt	r1, r2, r1
   1849c:	strgt	r1, [r6, #56]	; 0x38
   184a0:	add	ip, r5, ip
   184a4:	ldr	r5, [r6, #36]	; 0x24
   184a8:	cmp	r5, r0
   184ac:	movgt	r5, r0
   184b0:	ldr	sl, [sp, #4]
   184b4:	b	181c4 <__assert_fail@plt+0x6a50>
   184b8:	ldr	r0, [r6, #12]
   184bc:	add	r0, r0, sl, lsl #2
   184c0:	mov	r1, ip
   184c4:	mov	r2, r5
   184c8:	str	r1, [r0], #4
   184cc:	add	r1, r1, #1
   184d0:	subs	r2, r2, #1
   184d4:	bne	184c8 <__assert_fail@plt+0x6d54>
   184d8:	b	18294 <__assert_fail@plt+0x6b20>
   184dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   184e0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   184e4:	stm	r6, {r0, r1}
   184e8:	mov	r6, r3
   184ec:	str	sl, [r6, #28]
   184f0:	str	ip, [r6, #32]
   184f4:	mov	r0, #0
   184f8:	sub	sp, fp, #28
   184fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18500:	mov	r0, #12
   18504:	sub	sp, fp, #28
   18508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1850c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18510:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18514:	stm	r6, {r0, r1}
   18518:	ldr	r6, [sp]
   1851c:	b	181c0 <__assert_fail@plt+0x6a4c>
   18520:	push	{r4, r5, r6, sl, fp, lr}
   18524:	add	fp, sp, #16
   18528:	mov	r4, r0
   1852c:	ldr	r5, [r0, #28]
   18530:	ldr	r6, [r0, #36]	; 0x24
   18534:	ldr	r0, [r0, #48]	; 0x30
   18538:	cmp	r6, r0
   1853c:	movgt	r6, r0
   18540:	cmp	r5, r6
   18544:	bge	18580 <__assert_fail@plt+0x6e0c>
   18548:	ldr	r0, [r4]
   1854c:	ldr	r2, [r4, #24]
   18550:	ldr	r1, [r4, #64]	; 0x40
   18554:	add	r0, r0, r2
   18558:	ldrb	r0, [r0, r5]
   1855c:	cmp	r1, #0
   18560:	ldrbne	r0, [r1, r0]
   18564:	bl	116fc <toupper@plt>
   18568:	ldr	r1, [r4, #4]
   1856c:	strb	r0, [r1, r5]
   18570:	add	r5, r5, #1
   18574:	cmp	r5, r6
   18578:	blt	18548 <__assert_fail@plt+0x6dd4>
   1857c:	mov	r5, r6
   18580:	str	r5, [r4, #28]
   18584:	str	r5, [r4, #32]
   18588:	pop	{r4, r5, r6, sl, fp, pc}
   1858c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18590:	add	fp, sp, #28
   18594:	sub	sp, sp, #68	; 0x44
   18598:	mov	r4, r0
   1859c:	ldr	r6, [r0, #28]
   185a0:	ldr	r7, [r0, #36]	; 0x24
   185a4:	ldr	r0, [r0, #48]	; 0x30
   185a8:	cmp	r7, r0
   185ac:	movgt	r7, r0
   185b0:	cmp	r7, r6
   185b4:	ble	18708 <__assert_fail@plt+0x6f94>
   185b8:	add	r8, r4, #16
   185bc:	mov	r5, sp
   185c0:	sub	r2, r7, r6
   185c4:	ldm	r8, {r9, sl}
   185c8:	ldr	r0, [r4, #64]	; 0x40
   185cc:	cmp	r0, #0
   185d0:	bne	18690 <__assert_fail@plt+0x6f1c>
   185d4:	ldr	r0, [r4]
   185d8:	ldr	r1, [r4, #24]
   185dc:	add	r0, r0, r1
   185e0:	add	r1, r0, r6
   185e4:	mov	r0, r5
   185e8:	mov	r3, r8
   185ec:	bl	245c0 <__assert_fail@plt+0x12e4c>
   185f0:	add	r1, r0, #1
   185f4:	cmp	r1, #2
   185f8:	bcc	18614 <__assert_fail@plt+0x6ea0>
   185fc:	cmn	r0, #2
   18600:	bne	18640 <__assert_fail@plt+0x6ecc>
   18604:	ldr	r0, [r4, #36]	; 0x24
   18608:	ldr	r1, [r4, #48]	; 0x30
   1860c:	cmp	r0, r1
   18610:	blt	18704 <__assert_fail@plt+0x6f90>
   18614:	ldr	r0, [r4]
   18618:	ldr	r1, [r4, #24]
   1861c:	add	r1, r1, r6
   18620:	ldrb	r0, [r0, r1]
   18624:	str	r0, [sp]
   18628:	ldr	r1, [r4, #64]	; 0x40
   1862c:	cmp	r1, #0
   18630:	ldrbne	r0, [r1, r0]
   18634:	strne	r0, [sp]
   18638:	stm	r8, {r9, sl}
   1863c:	mov	r0, #1
   18640:	mov	r9, r5
   18644:	ldr	r3, [r4, #8]
   18648:	ldr	r1, [sp]
   1864c:	str	r1, [r3, r6, lsl #2]
   18650:	add	r5, r0, r6
   18654:	add	r1, r6, #1
   18658:	cmp	r1, r5
   1865c:	bge	1867c <__assert_fail@plt+0x6f08>
   18660:	mvn	r1, #3
   18664:	add	r2, r1, r0, lsl #2
   18668:	add	r0, r3, r6, lsl #2
   1866c:	add	r0, r0, #4
   18670:	mov	r1, #255	; 0xff
   18674:	bl	1166c <memset@plt>
   18678:	mov	r1, r5
   1867c:	cmp	r7, r1
   18680:	mov	r6, r1
   18684:	mov	r5, r9
   18688:	bgt	185c0 <__assert_fail@plt+0x6e4c>
   1868c:	b	1870c <__assert_fail@plt+0x6f98>
   18690:	cmp	r2, #1
   18694:	add	r1, sp, #4
   18698:	blt	185e4 <__assert_fail@plt+0x6e70>
   1869c:	ldr	r0, [r4, #80]	; 0x50
   186a0:	cmp	r0, #1
   186a4:	add	r1, sp, #4
   186a8:	blt	185e4 <__assert_fail@plt+0x6e70>
   186ac:	mov	lr, r5
   186b0:	mov	r0, #0
   186b4:	ldm	r4, {r1, ip}
   186b8:	ldr	r5, [r4, #24]
   186bc:	ldr	r3, [r4, #64]	; 0x40
   186c0:	add	r1, r1, r5
   186c4:	add	r1, r1, r6
   186c8:	ldrb	r1, [r1, r0]
   186cc:	ldrb	r1, [r3, r1]
   186d0:	add	r3, ip, r6
   186d4:	strb	r1, [r3, r0]
   186d8:	add	r3, sp, #4
   186dc:	strb	r1, [r3, r0]
   186e0:	add	r0, r0, #1
   186e4:	cmp	r0, r2
   186e8:	bge	186f8 <__assert_fail@plt+0x6f84>
   186ec:	ldr	r1, [r4, #80]	; 0x50
   186f0:	cmp	r0, r1
   186f4:	blt	186b4 <__assert_fail@plt+0x6f40>
   186f8:	add	r1, sp, #4
   186fc:	mov	r5, lr
   18700:	b	185e4 <__assert_fail@plt+0x6e70>
   18704:	stm	r8, {r9, sl}
   18708:	mov	r1, r6
   1870c:	str	r1, [r4, #28]
   18710:	str	r1, [r4, #32]
   18714:	sub	sp, fp, #28
   18718:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1871c:	ldr	r1, [r0, #28]
   18720:	ldr	ip, [r0, #36]	; 0x24
   18724:	ldr	r3, [r0, #48]	; 0x30
   18728:	cmp	ip, r3
   1872c:	movgt	ip, r3
   18730:	cmp	r1, ip
   18734:	bge	18770 <__assert_fail@plt+0x6ffc>
   18738:	push	{r4, sl, fp, lr}
   1873c:	add	fp, sp, #8
   18740:	ldm	r0, {r3, lr}
   18744:	ldr	r2, [r0, #24]
   18748:	ldr	r4, [r0, #64]	; 0x40
   1874c:	add	r2, r3, r2
   18750:	ldrb	r2, [r2, r1]
   18754:	ldrb	r2, [r4, r2]
   18758:	strb	r2, [lr, r1]
   1875c:	add	r1, r1, #1
   18760:	cmp	r1, ip
   18764:	blt	18740 <__assert_fail@plt+0x6fcc>
   18768:	mov	r1, ip
   1876c:	pop	{r4, sl, fp, lr}
   18770:	str	r1, [r0, #28]
   18774:	str	r1, [r0, #32]
   18778:	bx	lr
   1877c:	push	{r4, sl, fp, lr}
   18780:	add	fp, sp, #8
   18784:	mov	r4, r1
   18788:	bl	18940 <__assert_fail@plt+0x71cc>
   1878c:	ldr	r1, [r4, #40]	; 0x28
   18790:	add	r0, r1, r0
   18794:	str	r0, [r4, #40]	; 0x28
   18798:	pop	{r4, sl, fp, pc}
   1879c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187a0:	add	fp, sp, #28
   187a4:	sub	sp, sp, #28
   187a8:	mov	r5, r2
   187ac:	mov	sl, r0
   187b0:	ldr	r4, [r1]
   187b4:	ldr	r0, [r4, #84]	; 0x54
   187b8:	str	r0, [sp, #12]
   187bc:	ldr	r7, [fp, #12]
   187c0:	str	r7, [sp, #4]
   187c4:	ldr	r8, [fp, #8]
   187c8:	str	r8, [sp]
   187cc:	mov	r0, sl
   187d0:	str	r1, [sp, #16]
   187d4:	str	r3, [sp, #20]
   187d8:	bl	191d0 <__assert_fail@plt+0x7a5c>
   187dc:	mov	r6, r0
   187e0:	cmp	r0, #0
   187e4:	bne	187f4 <__assert_fail@plt+0x7080>
   187e8:	ldr	r0, [r7]
   187ec:	cmp	r0, #0
   187f0:	bne	188dc <__assert_fail@plt+0x7168>
   187f4:	ldr	r0, [sp, #20]
   187f8:	orr	r7, r0, #8388608	; 0x800000
   187fc:	ldrb	r0, [r5, #4]
   18800:	cmp	r0, #10
   18804:	bne	188c0 <__assert_fail@plt+0x714c>
   18808:	mov	r0, r5
   1880c:	mov	r1, sl
   18810:	mov	r2, r7
   18814:	bl	1877c <__assert_fail@plt+0x7008>
   18818:	ldrb	r0, [r5, #4]
   1881c:	orr	r1, r0, #8
   18820:	mov	r2, #0
   18824:	cmp	r1, #10
   18828:	bne	1884c <__assert_fail@plt+0x70d8>
   1882c:	mov	r0, r4
   18830:	mov	r1, r6
   18834:	mov	r3, #10
   18838:	bl	18908 <__assert_fail@plt+0x7194>
   1883c:	mov	r6, r0
   18840:	cmp	r0, #0
   18844:	bne	187fc <__assert_fail@plt+0x7088>
   18848:	b	188d0 <__assert_fail@plt+0x715c>
   1884c:	cmp	r8, #0
   18850:	beq	1885c <__assert_fail@plt+0x70e8>
   18854:	cmp	r0, #9
   18858:	beq	1882c <__assert_fail@plt+0x70b8>
   1885c:	ldr	r0, [r4, #84]	; 0x54
   18860:	str	r0, [sp, #24]
   18864:	ldr	r0, [sp, #12]
   18868:	str	r0, [r4, #84]	; 0x54
   1886c:	mov	r9, r8
   18870:	str	r8, [sp]
   18874:	ldr	r8, [fp, #12]
   18878:	str	r8, [sp, #4]
   1887c:	mov	r0, sl
   18880:	ldr	r1, [sp, #16]
   18884:	mov	r2, r5
   18888:	ldr	r3, [sp, #20]
   1888c:	bl	191d0 <__assert_fail@plt+0x7a5c>
   18890:	mov	r2, r0
   18894:	cmp	r0, #0
   18898:	bne	188a8 <__assert_fail@plt+0x7134>
   1889c:	ldr	r0, [r8]
   188a0:	cmp	r0, #0
   188a4:	bne	188e4 <__assert_fail@plt+0x7170>
   188a8:	ldr	r0, [r4, #84]	; 0x54
   188ac:	ldr	r1, [sp, #24]
   188b0:	orr	r0, r0, r1
   188b4:	str	r0, [r4, #84]	; 0x54
   188b8:	mov	r8, r9
   188bc:	b	1882c <__assert_fail@plt+0x70b8>
   188c0:	mov	r4, r6
   188c4:	mov	r0, r4
   188c8:	sub	sp, fp, #28
   188cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188d0:	mov	r0, #12
   188d4:	ldr	r1, [fp, #12]
   188d8:	str	r0, [r1]
   188dc:	mov	r4, #0
   188e0:	b	188c4 <__assert_fail@plt+0x7150>
   188e4:	cmp	r6, #0
   188e8:	beq	188dc <__assert_fail@plt+0x7168>
   188ec:	movw	r1, #37816	; 0x93b8
   188f0:	movt	r1, #1
   188f4:	mov	r4, #0
   188f8:	mov	r0, r6
   188fc:	mov	r2, #0
   18900:	bl	19340 <__assert_fail@plt+0x7bcc>
   18904:	b	188c4 <__assert_fail@plt+0x7150>
   18908:	push	{fp, lr}
   1890c:	mov	fp, sp
   18910:	sub	sp, sp, #8
   18914:	mov	ip, #0
   18918:	str	ip, [sp]
   1891c:	uxtb	ip, r3
   18920:	ldr	r3, [sp, #4]
   18924:	bfc	r3, #0, #23
   18928:	orr	r3, r3, ip
   1892c:	str	r3, [sp, #4]
   18930:	mov	r3, sp
   18934:	bl	19980 <__assert_fail@plt+0x820c>
   18938:	mov	sp, fp
   1893c:	pop	{fp, pc}
   18940:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18944:	add	fp, sp, #28
   18948:	sub	sp, sp, #12
   1894c:	mov	r7, r1
   18950:	mov	sl, r0
   18954:	ldr	r0, [r1, #40]	; 0x28
   18958:	ldr	r1, [r1, #56]	; 0x38
   1895c:	cmp	r1, r0
   18960:	ble	18a3c <__assert_fail@plt+0x72c8>
   18964:	mov	r9, r2
   18968:	ldr	r1, [r7, #4]
   1896c:	ldrb	r6, [r1, r0]
   18970:	mov	r5, sl
   18974:	strb	r6, [r5], #4
   18978:	ldr	r4, [r5]
   1897c:	bic	r0, r4, #6291456	; 0x600000
   18980:	str	r0, [r5]
   18984:	ldr	r0, [r7, #80]	; 0x50
   18988:	movw	r8, #65280	; 0xff00
   1898c:	movt	r8, #65439	; 0xff9f
   18990:	cmp	r0, #2
   18994:	blt	189b8 <__assert_fail@plt+0x7244>
   18998:	ldr	r1, [r7, #28]
   1899c:	ldr	r0, [r7, #40]	; 0x28
   189a0:	cmp	r0, r1
   189a4:	beq	189b8 <__assert_fail@plt+0x7244>
   189a8:	ldr	r1, [r7, #8]
   189ac:	ldr	r0, [r1, r0, lsl #2]
   189b0:	cmn	r0, #1
   189b4:	beq	18e70 <__assert_fail@plt+0x76fc>
   189b8:	cmp	r6, #92	; 0x5c
   189bc:	bne	18a4c <__assert_fail@plt+0x72d8>
   189c0:	ldr	r0, [r7, #40]	; 0x28
   189c4:	ldr	r1, [r7, #48]	; 0x30
   189c8:	add	r0, r0, #1
   189cc:	cmp	r0, r1
   189d0:	bge	18aa0 <__assert_fail@plt+0x732c>
   189d4:	mov	r0, r7
   189d8:	bl	190f4 <__assert_fail@plt+0x7980>
   189dc:	mov	r6, r0
   189e0:	strb	r0, [sl]
   189e4:	and	r0, r4, r8
   189e8:	orr	r4, r0, #1
   189ec:	str	r4, [sl, #4]
   189f0:	ldr	r0, [r7, #80]	; 0x50
   189f4:	cmp	r0, #2
   189f8:	blt	18cc4 <__assert_fail@plt+0x7550>
   189fc:	ldr	r0, [r7, #40]	; 0x28
   18a00:	add	r1, r0, #1
   18a04:	mov	r0, r7
   18a08:	bl	191b4 <__assert_fail@plt+0x7a40>
   18a0c:	mov	r7, r0
   18a10:	bl	11648 <iswalnum@plt>
   18a14:	cmp	r0, #0
   18a18:	movwne	r0, #1
   18a1c:	sub	r1, r7, #95	; 0x5f
   18a20:	clz	r1, r1
   18a24:	lsr	r1, r1, #5
   18a28:	orr	r0, r1, r0
   18a2c:	ldr	r1, [r5]
   18a30:	bic	r1, r1, #4194304	; 0x400000
   18a34:	orr	r0, r1, r0, lsl #22
   18a38:	b	18ce4 <__assert_fail@plt+0x7570>
   18a3c:	mov	r0, #2
   18a40:	strb	r0, [sl, #4]
   18a44:	mov	r8, #0
   18a48:	b	190e8 <__assert_fail@plt+0x7974>
   18a4c:	and	r0, r4, r8
   18a50:	orr	r4, r0, #1
   18a54:	str	r4, [r5]
   18a58:	ldr	r0, [r7, #80]	; 0x50
   18a5c:	cmp	r0, #2
   18a60:	blt	18aac <__assert_fail@plt+0x7338>
   18a64:	ldr	r1, [r7, #40]	; 0x28
   18a68:	mov	r0, r7
   18a6c:	bl	191b4 <__assert_fail@plt+0x7a40>
   18a70:	mov	r4, r0
   18a74:	bl	11648 <iswalnum@plt>
   18a78:	cmp	r0, #0
   18a7c:	movwne	r0, #1
   18a80:	sub	r1, r4, #95	; 0x5f
   18a84:	clz	r1, r1
   18a88:	lsr	r1, r1, #5
   18a8c:	orr	r0, r1, r0
   18a90:	ldr	r1, [r5]
   18a94:	bic	r1, r1, #4194304	; 0x400000
   18a98:	orr	r0, r1, r0, lsl #22
   18a9c:	b	18acc <__assert_fail@plt+0x7358>
   18aa0:	and	r0, r4, r8
   18aa4:	orr	r0, r0, #36	; 0x24
   18aa8:	b	18e7c <__assert_fail@plt+0x7708>
   18aac:	bl	1160c <__ctype_b_loc@plt>
   18ab0:	ldr	r0, [r0]
   18ab4:	add	r0, r0, r6, lsl #1
   18ab8:	ldrh	r0, [r0]
   18abc:	ubfx	r0, r0, #3, #1
   18ac0:	cmp	r6, #95	; 0x5f
   18ac4:	movweq	r0, #1
   18ac8:	orr	r0, r4, r0, lsl #22
   18acc:	str	r0, [r5]
   18ad0:	sub	r1, r6, #10
   18ad4:	mov	r8, #1
   18ad8:	cmp	r1, #115	; 0x73
   18adc:	bhi	190e8 <__assert_fail@plt+0x7974>
   18ae0:	add	r2, pc, #0
   18ae4:	ldr	pc, [r2, r1, lsl #2]
   18ae8:			; <UNDEFINED> instruction: 0x00018cb8
   18aec:	andeq	r9, r1, r8, ror #1
   18af0:	andeq	r9, r1, r8, ror #1
   18af4:	andeq	r9, r1, r8, ror #1
   18af8:	andeq	r9, r1, r8, ror #1
   18afc:	andeq	r9, r1, r8, ror #1
   18b00:	andeq	r9, r1, r8, ror #1
   18b04:	andeq	r9, r1, r8, ror #1
   18b08:	andeq	r9, r1, r8, ror #1
   18b0c:	andeq	r9, r1, r8, ror #1
   18b10:	andeq	r9, r1, r8, ror #1
   18b14:	andeq	r9, r1, r8, ror #1
   18b18:	andeq	r9, r1, r8, ror #1
   18b1c:	andeq	r9, r1, r8, ror #1
   18b20:	andeq	r9, r1, r8, ror #1
   18b24:	andeq	r9, r1, r8, ror #1
   18b28:	andeq	r9, r1, r8, ror #1
   18b2c:	andeq	r9, r1, r8, ror #1
   18b30:	andeq	r9, r1, r8, ror #1
   18b34:	andeq	r9, r1, r8, ror #1
   18b38:	andeq	r9, r1, r8, ror #1
   18b3c:	andeq	r9, r1, r8, ror #1
   18b40:	andeq	r9, r1, r8, ror #1
   18b44:	andeq	r9, r1, r8, ror #1
   18b48:	andeq	r9, r1, r8, ror #1
   18b4c:	andeq	r9, r1, r8, ror #1
   18b50:	andeq	r8, r1, r8, lsl #29
   18b54:	andeq	r9, r1, r8, ror #1
   18b58:	andeq	r9, r1, r8, ror #1
   18b5c:	andeq	r9, r1, r8, ror #1
   18b60:	andeq	r8, r1, r8, ror #29
   18b64:	strdeq	r8, [r1], -r4
   18b68:	andeq	r8, r1, r0, lsl #30
   18b6c:	andeq	r8, r1, r8, lsl #30
   18b70:	andeq	r9, r1, r8, ror #1
   18b74:	andeq	r9, r1, r8, ror #1
   18b78:	andeq	r8, r1, r8, lsl pc
   18b7c:	andeq	r9, r1, r8, ror #1
   18b80:	andeq	r9, r1, r8, ror #1
   18b84:	andeq	r9, r1, r8, ror #1
   18b88:	andeq	r9, r1, r8, ror #1
   18b8c:	andeq	r9, r1, r8, ror #1
   18b90:	andeq	r9, r1, r8, ror #1
   18b94:	andeq	r9, r1, r8, ror #1
   18b98:	andeq	r9, r1, r8, ror #1
   18b9c:	andeq	r9, r1, r8, ror #1
   18ba0:	andeq	r9, r1, r8, ror #1
   18ba4:	andeq	r9, r1, r8, ror #1
   18ba8:	andeq	r9, r1, r8, ror #1
   18bac:	andeq	r9, r1, r8, ror #1
   18bb0:	andeq	r9, r1, r8, ror #1
   18bb4:	andeq	r9, r1, r8, ror #1
   18bb8:	andeq	r9, r1, r8, ror #1
   18bbc:	andeq	r8, r1, r0, lsr #30
   18bc0:	andeq	r9, r1, r8, ror #1
   18bc4:	andeq	r9, r1, r8, ror #1
   18bc8:	andeq	r9, r1, r8, ror #1
   18bcc:	andeq	r9, r1, r8, ror #1
   18bd0:	andeq	r9, r1, r8, ror #1
   18bd4:	andeq	r9, r1, r8, ror #1
   18bd8:	andeq	r9, r1, r8, ror #1
   18bdc:	andeq	r9, r1, r8, ror #1
   18be0:	andeq	r9, r1, r8, ror #1
   18be4:	andeq	r9, r1, r8, ror #1
   18be8:	andeq	r9, r1, r8, ror #1
   18bec:	andeq	r9, r1, r8, ror #1
   18bf0:	andeq	r9, r1, r8, ror #1
   18bf4:	andeq	r9, r1, r8, ror #1
   18bf8:	andeq	r9, r1, r8, ror #1
   18bfc:	andeq	r9, r1, r8, ror #1
   18c00:	andeq	r9, r1, r8, ror #1
   18c04:	andeq	r9, r1, r8, ror #1
   18c08:	andeq	r9, r1, r8, ror #1
   18c0c:	andeq	r9, r1, r8, ror #1
   18c10:	andeq	r9, r1, r8, ror #1
   18c14:	andeq	r9, r1, r8, ror #1
   18c18:	andeq	r9, r1, r8, ror #1
   18c1c:	andeq	r9, r1, r8, ror #1
   18c20:	andeq	r9, r1, r8, ror #1
   18c24:	andeq	r9, r1, r8, ror #1
   18c28:	andeq	r9, r1, r8, ror #1
   18c2c:	andeq	r8, r1, r0, lsr pc
   18c30:	andeq	r9, r1, r8, ror #1
   18c34:	andeq	r9, r1, r8, ror #1
   18c38:	andeq	r8, r1, r8, lsr pc
   18c3c:	andeq	r9, r1, r8, ror #1
   18c40:	andeq	r9, r1, r8, ror #1
   18c44:	andeq	r9, r1, r8, ror #1
   18c48:	andeq	r9, r1, r8, ror #1
   18c4c:	andeq	r9, r1, r8, ror #1
   18c50:	andeq	r9, r1, r8, ror #1
   18c54:	andeq	r9, r1, r8, ror #1
   18c58:	andeq	r9, r1, r8, ror #1
   18c5c:	andeq	r9, r1, r8, ror #1
   18c60:	andeq	r9, r1, r8, ror #1
   18c64:	andeq	r9, r1, r8, ror #1
   18c68:	andeq	r9, r1, r8, ror #1
   18c6c:	andeq	r9, r1, r8, ror #1
   18c70:	andeq	r9, r1, r8, ror #1
   18c74:	andeq	r9, r1, r8, ror #1
   18c78:	andeq	r9, r1, r8, ror #1
   18c7c:	andeq	r9, r1, r8, ror #1
   18c80:	andeq	r9, r1, r8, ror #1
   18c84:	andeq	r9, r1, r8, ror #1
   18c88:	andeq	r9, r1, r8, ror #1
   18c8c:	andeq	r9, r1, r8, ror #1
   18c90:	andeq	r9, r1, r8, ror #1
   18c94:	andeq	r9, r1, r8, ror #1
   18c98:	andeq	r9, r1, r8, ror #1
   18c9c:	andeq	r9, r1, r8, ror #1
   18ca0:	andeq	r9, r1, r8, ror #1
   18ca4:	andeq	r9, r1, r8, ror #1
   18ca8:	andeq	r9, r1, r8, ror #1
   18cac:	andeq	r8, r1, r0, ror #30
   18cb0:	andeq	r8, r1, r0, ror pc
   18cb4:	andeq	r8, r1, r4, lsl #31
   18cb8:	tst	r9, #2048	; 0x800
   18cbc:	bne	18f7c <__assert_fail@plt+0x7808>
   18cc0:	b	190e8 <__assert_fail@plt+0x7974>
   18cc4:	bl	1160c <__ctype_b_loc@plt>
   18cc8:	ldr	r0, [r0]
   18ccc:	add	r0, r0, r6, lsl #1
   18cd0:	ldrh	r0, [r0]
   18cd4:	ubfx	r0, r0, #3, #1
   18cd8:	cmp	r6, #95	; 0x5f
   18cdc:	movweq	r0, #1
   18ce0:	orr	r0, r4, r0, lsl #22
   18ce4:	str	r0, [r5]
   18ce8:	sub	r1, r6, #39	; 0x27
   18cec:	mov	r8, #2
   18cf0:	cmp	r1, #86	; 0x56
   18cf4:	bhi	190e8 <__assert_fail@plt+0x7974>
   18cf8:	add	r2, pc, #0
   18cfc:	ldr	pc, [r2, r1, lsl #2]
   18d00:	andeq	r8, r1, r0, asr #31
   18d04:	ldrdeq	r8, [r1], -r0
   18d08:	andeq	r8, r1, r0, ror #31
   18d0c:	andeq	r9, r1, r8, ror #1
   18d10:	strdeq	r8, [r1], -r0
   18d14:	andeq	r9, r1, r8, ror #1
   18d18:	andeq	r9, r1, r8, ror #1
   18d1c:	andeq	r9, r1, r8, ror #1
   18d20:	andeq	r9, r1, r8, ror #1
   18d24:	andeq	r9, r1, r8, ror #1
   18d28:	andeq	r8, r1, ip, asr lr
   18d2c:	andeq	r8, r1, ip, asr lr
   18d30:	andeq	r8, r1, ip, asr lr
   18d34:	andeq	r8, r1, ip, asr lr
   18d38:	andeq	r8, r1, ip, asr lr
   18d3c:	andeq	r8, r1, ip, asr lr
   18d40:	andeq	r8, r1, ip, asr lr
   18d44:	andeq	r8, r1, ip, asr lr
   18d48:	andeq	r8, r1, ip, asr lr
   18d4c:	andeq	r9, r1, r8, ror #1
   18d50:	andeq	r9, r1, r8, ror #1
   18d54:	andeq	r9, r1, r8
   18d58:	andeq	r9, r1, r8, ror #1
   18d5c:	andeq	r9, r1, r8, lsl r0
   18d60:	andeq	r9, r1, r8, lsr #32
   18d64:	andeq	r9, r1, r8, ror #1
   18d68:	andeq	r9, r1, r8, ror #1
   18d6c:	andeq	r9, r1, r0, asr #32
   18d70:	andeq	r9, r1, r8, ror #1
   18d74:	andeq	r9, r1, r8, ror #1
   18d78:	andeq	r9, r1, r8, ror #1
   18d7c:	andeq	r9, r1, r8, ror #1
   18d80:	andeq	r9, r1, r8, ror #1
   18d84:	andeq	r9, r1, r8, ror #1
   18d88:	andeq	r9, r1, r8, ror #1
   18d8c:	andeq	r9, r1, r8, ror #1
   18d90:	andeq	r9, r1, r8, ror #1
   18d94:	andeq	r9, r1, r8, ror #1
   18d98:	andeq	r9, r1, r8, ror #1
   18d9c:	andeq	r9, r1, r8, ror #1
   18da0:	andeq	r9, r1, r8, ror #1
   18da4:	andeq	r9, r1, r8, ror #1
   18da8:	andeq	r9, r1, r8, ror #1
   18dac:	andeq	r9, r1, r8, ror #1
   18db0:	andeq	r9, r1, r0, asr r0
   18db4:	andeq	r9, r1, r8, ror #1
   18db8:	andeq	r9, r1, r8, ror #1
   18dbc:	andeq	r9, r1, r8, ror #1
   18dc0:	andeq	r9, r1, r0, rrx
   18dc4:	andeq	r9, r1, r8, ror #1
   18dc8:	andeq	r9, r1, r8, ror #1
   18dcc:	andeq	r9, r1, r8, ror #1
   18dd0:	andeq	r9, r1, r8, ror #1
   18dd4:	andeq	r9, r1, r8, ror #1
   18dd8:	andeq	r9, r1, r8, ror #1
   18ddc:	andeq	r9, r1, r8, ror #1
   18de0:	andeq	r9, r1, r8, ror #1
   18de4:	andeq	r9, r1, r0, ror r0
   18de8:	andeq	r9, r1, r8, ror #1
   18dec:	andeq	r9, r1, r0, lsl #1
   18df0:	andeq	r9, r1, r8, ror #1
   18df4:	andeq	r9, r1, r8, ror #1
   18df8:	andeq	r9, r1, r8, ror #1
   18dfc:	andeq	r9, r1, r8, ror #1
   18e00:	andeq	r9, r1, r8, ror #1
   18e04:	andeq	r9, r1, r8, ror #1
   18e08:	andeq	r9, r1, r8, ror #1
   18e0c:	andeq	r9, r1, r8, ror #1
   18e10:	andeq	r9, r1, r8, ror #1
   18e14:	andeq	r9, r1, r8, ror #1
   18e18:	andeq	r9, r1, r8, ror #1
   18e1c:	andeq	r9, r1, r8, ror #1
   18e20:	andeq	r9, r1, r8, ror #1
   18e24:	andeq	r9, r1, r8, ror #1
   18e28:	andeq	r9, r1, r8, ror #1
   18e2c:	andeq	r9, r1, r8, ror #1
   18e30:	muleq	r1, r0, r0
   18e34:	andeq	r9, r1, r8, ror #1
   18e38:	andeq	r9, r1, r8, ror #1
   18e3c:	andeq	r9, r1, r8, ror #1
   18e40:	andeq	r9, r1, r0, lsr #1
   18e44:	andeq	r9, r1, r8, ror #1
   18e48:	andeq	r9, r1, r8, ror #1
   18e4c:	andeq	r9, r1, r8, ror #1
   18e50:	strheq	r9, [r1], -r0
   18e54:	andeq	r9, r1, r4, asr #1
   18e58:	ldrdeq	r9, [r1], -r0
   18e5c:	tst	r9, #16384	; 0x4000
   18e60:	bne	190e8 <__assert_fail@plt+0x7974>
   18e64:	sub	r1, r6, #49	; 0x31
   18e68:	mov	r2, #4
   18e6c:	b	18f50 <__assert_fail@plt+0x77dc>
   18e70:	and	r0, r4, r8
   18e74:	orr	r0, r0, #1
   18e78:	orr	r0, r0, #2097152	; 0x200000
   18e7c:	str	r0, [r5]
   18e80:	mov	r8, #1
   18e84:	b	190e8 <__assert_fail@plt+0x7974>
   18e88:	tst	r9, #8
   18e8c:	bne	18ed4 <__assert_fail@plt+0x7760>
   18e90:	ldr	r0, [r7, #40]	; 0x28
   18e94:	ldr	r1, [r7, #48]	; 0x30
   18e98:	add	r0, r0, #1
   18e9c:	cmp	r0, r1
   18ea0:	beq	18ed4 <__assert_fail@plt+0x7760>
   18ea4:	str	r0, [r7, #40]	; 0x28
   18ea8:	add	r0, sp, #4
   18eac:	mov	r1, r7
   18eb0:	mov	r2, r9
   18eb4:	bl	18940 <__assert_fail@plt+0x71cc>
   18eb8:	ldr	r0, [r7, #40]	; 0x28
   18ebc:	sub	r0, r0, #1
   18ec0:	str	r0, [r7, #40]	; 0x28
   18ec4:	ldrb	r0, [sp, #8]
   18ec8:	sub	r0, r0, #9
   18ecc:	cmp	r0, #1
   18ed0:	bhi	190e8 <__assert_fail@plt+0x7974>
   18ed4:	mov	r0, #32
   18ed8:	str	r0, [sl]
   18edc:	mov	r0, #12
   18ee0:	strb	r0, [sl, #4]
   18ee4:	b	190e8 <__assert_fail@plt+0x7974>
   18ee8:	tst	r9, #8192	; 0x2000
   18eec:	bne	18fd8 <__assert_fail@plt+0x7864>
   18ef0:	b	190e8 <__assert_fail@plt+0x7974>
   18ef4:	tst	r9, #8192	; 0x2000
   18ef8:	bne	18fe8 <__assert_fail@plt+0x7874>
   18efc:	b	190e8 <__assert_fail@plt+0x7974>
   18f00:	mov	r1, #11
   18f04:	b	190e0 <__assert_fail@plt+0x796c>
   18f08:	movw	r1, #1026	; 0x402
   18f0c:	tst	r9, r1
   18f10:	bne	190e8 <__assert_fail@plt+0x7974>
   18f14:	b	19000 <__assert_fail@plt+0x788c>
   18f18:	mov	r1, #5
   18f1c:	b	190e0 <__assert_fail@plt+0x796c>
   18f20:	movw	r1, #1026	; 0x402
   18f24:	tst	r9, r1
   18f28:	bne	190e8 <__assert_fail@plt+0x7974>
   18f2c:	b	19038 <__assert_fail@plt+0x78c4>
   18f30:	mov	r1, #20
   18f34:	b	190e0 <__assert_fail@plt+0x796c>
   18f38:	movw	r1, #8
   18f3c:	movt	r1, #128	; 0x80
   18f40:	tst	r9, r1
   18f44:	beq	18f94 <__assert_fail@plt+0x7820>
   18f48:	mov	r1, #16
   18f4c:	mov	r2, #12
   18f50:	bfi	r0, r2, #0, #8
   18f54:	str	r1, [sl]
   18f58:	str	r0, [sl, #4]
   18f5c:	b	190e8 <__assert_fail@plt+0x7974>
   18f60:	and	r1, r9, #4608	; 0x1200
   18f64:	cmp	r1, #4608	; 0x1200
   18f68:	beq	190bc <__assert_fail@plt+0x7948>
   18f6c:	b	190e8 <__assert_fail@plt+0x7974>
   18f70:	and	r1, r9, #33792	; 0x8400
   18f74:	cmp	r1, #32768	; 0x8000
   18f78:	bne	190e8 <__assert_fail@plt+0x7974>
   18f7c:	mov	r1, #10
   18f80:	b	190e0 <__assert_fail@plt+0x796c>
   18f84:	and	r1, r9, #4608	; 0x1200
   18f88:	cmp	r1, #4608	; 0x1200
   18f8c:	beq	190dc <__assert_fail@plt+0x7968>
   18f90:	b	190e8 <__assert_fail@plt+0x7974>
   18f94:	ldr	r1, [r7, #40]	; 0x28
   18f98:	cmp	r1, #0
   18f9c:	beq	18f48 <__assert_fail@plt+0x77d4>
   18fa0:	tst	r9, #2048	; 0x800
   18fa4:	beq	190e8 <__assert_fail@plt+0x7974>
   18fa8:	ldr	r2, [r7, #4]
   18fac:	add	r1, r2, r1
   18fb0:	ldrb	r1, [r1, #-1]
   18fb4:	cmp	r1, #10
   18fb8:	beq	18f48 <__assert_fail@plt+0x77d4>
   18fbc:	b	190e8 <__assert_fail@plt+0x7974>
   18fc0:	tst	r9, #524288	; 0x80000
   18fc4:	bne	190e8 <__assert_fail@plt+0x7974>
   18fc8:	mov	r1, #128	; 0x80
   18fcc:	b	18f4c <__assert_fail@plt+0x77d8>
   18fd0:	tst	r9, #8192	; 0x2000
   18fd4:	bne	190e8 <__assert_fail@plt+0x7974>
   18fd8:	mov	r1, #8
   18fdc:	b	190e0 <__assert_fail@plt+0x796c>
   18fe0:	tst	r9, #8192	; 0x2000
   18fe4:	bne	190e8 <__assert_fail@plt+0x7974>
   18fe8:	mov	r1, #9
   18fec:	b	190e0 <__assert_fail@plt+0x796c>
   18ff0:	movw	r1, #1026	; 0x402
   18ff4:	and	r1, r9, r1
   18ff8:	cmp	r1, #2
   18ffc:	bne	190e8 <__assert_fail@plt+0x7974>
   19000:	mov	r1, #18
   19004:	b	190e0 <__assert_fail@plt+0x796c>
   19008:	tst	r9, #524288	; 0x80000
   1900c:	bne	190e8 <__assert_fail@plt+0x7974>
   19010:	mov	r1, #6
   19014:	b	18f4c <__assert_fail@plt+0x77d8>
   19018:	tst	r9, #524288	; 0x80000
   1901c:	bne	190e8 <__assert_fail@plt+0x7974>
   19020:	mov	r1, #9
   19024:	b	18f4c <__assert_fail@plt+0x77d8>
   19028:	movw	r1, #1026	; 0x402
   1902c:	and	r1, r9, r1
   19030:	cmp	r1, #2
   19034:	bne	190e8 <__assert_fail@plt+0x7974>
   19038:	mov	r1, #19
   1903c:	b	190e0 <__assert_fail@plt+0x796c>
   19040:	tst	r9, #524288	; 0x80000
   19044:	bne	190e8 <__assert_fail@plt+0x7974>
   19048:	mov	r1, #512	; 0x200
   1904c:	b	18f4c <__assert_fail@plt+0x77d8>
   19050:	tst	r9, #524288	; 0x80000
   19054:	bne	190e8 <__assert_fail@plt+0x7974>
   19058:	mov	r1, #35	; 0x23
   1905c:	b	190e0 <__assert_fail@plt+0x796c>
   19060:	tst	r9, #524288	; 0x80000
   19064:	bne	190e8 <__assert_fail@plt+0x7974>
   19068:	mov	r1, #33	; 0x21
   1906c:	b	190e0 <__assert_fail@plt+0x796c>
   19070:	tst	r9, #524288	; 0x80000
   19074:	bne	190e8 <__assert_fail@plt+0x7974>
   19078:	mov	r1, #64	; 0x40
   1907c:	b	18f4c <__assert_fail@plt+0x77d8>
   19080:	tst	r9, #524288	; 0x80000
   19084:	bne	190e8 <__assert_fail@plt+0x7974>
   19088:	mov	r1, #256	; 0x100
   1908c:	b	18f4c <__assert_fail@plt+0x77d8>
   19090:	tst	r9, #524288	; 0x80000
   19094:	bne	190e8 <__assert_fail@plt+0x7974>
   19098:	mov	r1, #34	; 0x22
   1909c:	b	190e0 <__assert_fail@plt+0x796c>
   190a0:	tst	r9, #524288	; 0x80000
   190a4:	bne	190e8 <__assert_fail@plt+0x7974>
   190a8:	mov	r1, #32
   190ac:	b	190e0 <__assert_fail@plt+0x796c>
   190b0:	and	r1, r9, #4608	; 0x1200
   190b4:	cmp	r1, #512	; 0x200
   190b8:	bne	190e8 <__assert_fail@plt+0x7974>
   190bc:	mov	r1, #23
   190c0:	b	190e0 <__assert_fail@plt+0x796c>
   190c4:	tst	r9, #33792	; 0x8400
   190c8:	bne	190e8 <__assert_fail@plt+0x7974>
   190cc:	b	18f7c <__assert_fail@plt+0x7808>
   190d0:	and	r1, r9, #4608	; 0x1200
   190d4:	cmp	r1, #512	; 0x200
   190d8:	bne	190e8 <__assert_fail@plt+0x7974>
   190dc:	mov	r1, #24
   190e0:	bfi	r0, r1, #0, #8
   190e4:	str	r0, [r5]
   190e8:	mov	r0, r8
   190ec:	sub	sp, fp, #28
   190f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190f4:	ldrb	r1, [r0, #75]	; 0x4b
   190f8:	cmp	r1, #0
   190fc:	bne	1911c <__assert_fail@plt+0x79a8>
   19100:	ldr	r1, [r0, #4]
   19104:	ldr	r0, [r0, #40]	; 0x28
   19108:	add	r0, r1, r0
   1910c:	add	r0, r0, #1
   19110:	ldrb	r3, [r0]
   19114:	uxtb	r0, r3
   19118:	bx	lr
   1911c:	ldr	r1, [r0, #80]	; 0x50
   19120:	cmp	r1, #2
   19124:	blt	1915c <__assert_fail@plt+0x79e8>
   19128:	ldr	r2, [r0, #8]
   1912c:	ldr	r3, [r0, #40]	; 0x28
   19130:	add	ip, r3, #1
   19134:	ldr	r1, [r2, ip, lsl #2]
   19138:	cmn	r1, #1
   1913c:	beq	191a8 <__assert_fail@plt+0x7a34>
   19140:	ldr	r1, [r0, #28]
   19144:	add	r3, r3, #2
   19148:	cmp	r1, r3
   1914c:	beq	1915c <__assert_fail@plt+0x79e8>
   19150:	ldr	r1, [r2, r3, lsl #2]
   19154:	cmn	r1, #1
   19158:	beq	191a8 <__assert_fail@plt+0x7a34>
   1915c:	push	{fp, lr}
   19160:	mov	fp, sp
   19164:	ldrb	lr, [r0, #76]	; 0x4c
   19168:	ldr	r1, [r0, #40]	; 0x28
   1916c:	add	ip, r1, #1
   19170:	cmp	lr, #0
   19174:	mov	r3, ip
   19178:	ldrne	r3, [r0, #12]
   1917c:	ldrne	r3, [r3, ip, lsl #2]
   19180:	ldr	r1, [r0]
   19184:	ldr	r2, [r0, #24]
   19188:	add	r2, r2, r3
   1918c:	add	r1, r1, r2
   19190:	ldrsb	r3, [r1]
   19194:	cmp	lr, #0
   19198:	pop	{fp, lr}
   1919c:	beq	19114 <__assert_fail@plt+0x79a0>
   191a0:	cmn	r3, #1
   191a4:	bgt	19114 <__assert_fail@plt+0x79a0>
   191a8:	ldr	r0, [r0, #4]
   191ac:	add	r0, r0, ip
   191b0:	b	19110 <__assert_fail@plt+0x799c>
   191b4:	ldr	r2, [r0, #80]	; 0x50
   191b8:	cmp	r2, #1
   191bc:	ldrne	r0, [r0, #8]
   191c0:	ldrne	r0, [r0, r1, lsl #2]
   191c4:	ldreq	r0, [r0, #4]
   191c8:	ldrbeq	r0, [r0, r1]
   191cc:	bx	lr
   191d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191d4:	add	fp, sp, #28
   191d8:	sub	sp, sp, #20
   191dc:	mov	r6, r2
   191e0:	mov	r7, r1
   191e4:	mov	r1, r0
   191e8:	ldr	r0, [r7]
   191ec:	str	r0, [sp, #8]
   191f0:	ldr	r5, [fp, #12]
   191f4:	str	r5, [sp, #4]
   191f8:	ldr	r4, [fp, #8]
   191fc:	str	r4, [sp]
   19200:	str	r1, [sp, #12]
   19204:	mov	r0, r1
   19208:	mov	r1, r7
   1920c:	str	r3, [sp, #16]
   19210:	bl	193d0 <__assert_fail@plt+0x7c5c>
   19214:	cmp	r0, #0
   19218:	bne	19240 <__assert_fail@plt+0x7acc>
   1921c:	ldr	r1, [r5]
   19220:	cmp	r1, #0
   19224:	beq	19240 <__assert_fail@plt+0x7acc>
   19228:	mov	r6, #0
   1922c:	b	1930c <__assert_fail@plt+0x7b98>
   19230:	cmp	r5, #0
   19234:	movne	r8, r5
   19238:	mov	r0, r8
   1923c:	mov	r4, r9
   19240:	mov	r5, r0
   19244:	ldrb	r0, [r6, #4]
   19248:	orr	r1, r0, #8
   1924c:	cmp	r1, #10
   19250:	beq	19308 <__assert_fail@plt+0x7b94>
   19254:	cmp	r4, #0
   19258:	beq	19264 <__assert_fail@plt+0x7af0>
   1925c:	cmp	r0, #9
   19260:	beq	19308 <__assert_fail@plt+0x7b94>
   19264:	mov	r9, r4
   19268:	str	r4, [sp]
   1926c:	ldr	sl, [fp, #12]
   19270:	str	sl, [sp, #4]
   19274:	ldr	r0, [sp, #12]
   19278:	mov	r1, r7
   1927c:	mov	r2, r6
   19280:	ldr	r3, [sp, #16]
   19284:	bl	193d0 <__assert_fail@plt+0x7c5c>
   19288:	mov	r8, r0
   1928c:	cmp	r0, #0
   19290:	bne	192a0 <__assert_fail@plt+0x7b2c>
   19294:	ldr	r0, [sl]
   19298:	cmp	r0, #0
   1929c:	bne	19318 <__assert_fail@plt+0x7ba4>
   192a0:	cmp	r5, #0
   192a4:	cmpne	r8, #0
   192a8:	beq	19230 <__assert_fail@plt+0x7abc>
   192ac:	ldr	r0, [sp, #8]
   192b0:	mov	r1, r5
   192b4:	mov	r2, r8
   192b8:	mov	r3, #16
   192bc:	bl	18908 <__assert_fail@plt+0x7194>
   192c0:	cmp	r0, #0
   192c4:	mov	r4, r9
   192c8:	bne	19240 <__assert_fail@plt+0x7acc>
   192cc:	movw	r4, #37816	; 0x93b8
   192d0:	movt	r4, #1
   192d4:	mov	r6, #0
   192d8:	mov	r0, r8
   192dc:	mov	r1, r4
   192e0:	mov	r2, #0
   192e4:	bl	19340 <__assert_fail@plt+0x7bcc>
   192e8:	mov	r0, r5
   192ec:	mov	r1, r4
   192f0:	mov	r2, #0
   192f4:	bl	19340 <__assert_fail@plt+0x7bcc>
   192f8:	mov	r0, #12
   192fc:	ldr	r1, [fp, #12]
   19300:	str	r0, [r1]
   19304:	b	1930c <__assert_fail@plt+0x7b98>
   19308:	mov	r6, r5
   1930c:	mov	r0, r6
   19310:	sub	sp, fp, #28
   19314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19318:	cmp	r5, #0
   1931c:	mov	r6, #0
   19320:	beq	1930c <__assert_fail@plt+0x7b98>
   19324:	movw	r1, #37816	; 0x93b8
   19328:	movt	r1, #1
   1932c:	mov	r6, #0
   19330:	mov	r0, r5
   19334:	mov	r2, #0
   19338:	bl	19340 <__assert_fail@plt+0x7bcc>
   1933c:	b	1930c <__assert_fail@plt+0x7b98>
   19340:	push	{r4, r5, r6, sl, fp, lr}
   19344:	add	fp, sp, #16
   19348:	mov	r4, r2
   1934c:	mov	r5, r1
   19350:	b	19358 <__assert_fail@plt+0x7be4>
   19354:	ldr	r0, [r6, #8]
   19358:	mov	r6, r0
   1935c:	ldr	r0, [r0, #4]
   19360:	cmp	r0, #0
   19364:	bne	19358 <__assert_fail@plt+0x7be4>
   19368:	ldr	r0, [r6, #8]
   1936c:	cmp	r0, #0
   19370:	bne	19354 <__assert_fail@plt+0x7be0>
   19374:	mov	r0, r4
   19378:	mov	r1, r6
   1937c:	blx	r5
   19380:	cmp	r0, #0
   19384:	bne	193b4 <__assert_fail@plt+0x7c40>
   19388:	ldr	r1, [r6]
   1938c:	cmp	r1, #0
   19390:	popeq	{r4, r5, r6, sl, fp, pc}
   19394:	ldr	r0, [r1, #8]
   19398:	cmp	r0, r6
   1939c:	mov	r6, r1
   193a0:	beq	19374 <__assert_fail@plt+0x7c00>
   193a4:	cmp	r0, #0
   193a8:	mov	r6, r1
   193ac:	beq	19374 <__assert_fail@plt+0x7c00>
   193b0:	b	19358 <__assert_fail@plt+0x7be4>
   193b4:	pop	{r4, r5, r6, sl, fp, pc}
   193b8:	push	{fp, lr}
   193bc:	mov	fp, sp
   193c0:	add	r0, r1, #20
   193c4:	bl	173a4 <__assert_fail@plt+0x5c30>
   193c8:	mov	r0, #0
   193cc:	pop	{fp, pc}
   193d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193d4:	add	fp, sp, #28
   193d8:	sub	sp, sp, #12
   193dc:	mov	r9, r3
   193e0:	mov	r5, r2
   193e4:	mov	r6, r1
   193e8:	mov	sl, r0
   193ec:	and	ip, r3, #16
   193f0:	and	r8, r3, #32
   193f4:	and	r0, r3, #16777216	; 0x1000000
   193f8:	str	r0, [sp, #8]
   193fc:	ldr	r3, [fp, #12]
   19400:	ldr	r4, [fp, #8]
   19404:	mvn	r1, #0
   19408:	b	1942c <__assert_fail@plt+0x7cb8>
   1940c:	mov	r0, r5
   19410:	mov	r1, sl
   19414:	mov	r2, r9
   19418:	mov	r7, ip
   1941c:	bl	1877c <__assert_fail@plt+0x7008>
   19420:	mvn	r1, #0
   19424:	mov	ip, r7
   19428:	ldr	r3, [fp, #12]
   1942c:	ldr	r0, [r5, #4]
   19430:	uxtab	r1, r1, r0
   19434:	ldr	r7, [r6]
   19438:	cmp	r1, #35	; 0x23
   1943c:	bhi	194e4 <__assert_fail@plt+0x7d70>
   19440:	add	r2, pc, #0
   19444:	ldr	pc, [r2, r1, lsl #2]
   19448:	andeq	r9, r1, ip, lsr #11
   1944c:	andeq	r9, r1, r4, ror #18
   19450:	andeq	r9, r1, r4, ror #9
   19454:	andeq	r9, r1, r8, ror #12
   19458:	andeq	r9, r1, r4, asr #13
   1945c:	andeq	r9, r1, r4, ror #9
   19460:	andeq	r9, r1, r4, ror #9
   19464:	andeq	r9, r1, r8, lsl #14
   19468:	strdeq	r9, [r1], -r4
   1946c:	andeq	r9, r1, r4, ror #18
   19470:	andeq	r9, r1, r4, ror #9
   19474:	andeq	r9, r1, r0, lsr r7
   19478:	andeq	r9, r1, r4, ror #9
   1947c:	andeq	r9, r1, r4, ror #9
   19480:	andeq	r9, r1, r4, ror #9
   19484:	andeq	r9, r1, r4, ror #9
   19488:	andeq	r9, r1, r4, ror #9
   1948c:	andeq	r9, r1, r4, ror #9
   19490:	andeq	r9, r1, r4, ror #9
   19494:	andeq	r9, r1, r0, ror r7
   19498:	andeq	r9, r1, r4, ror #9
   1949c:	andeq	r9, r1, r4, ror #9
   194a0:	ldrdeq	r9, [r1], -r8
   194a4:	andeq	r9, r1, r4, lsl #10
   194a8:	andeq	r9, r1, r4, ror #9
   194ac:	andeq	r9, r1, r4, ror #9
   194b0:	andeq	r9, r1, r4, ror #9
   194b4:	andeq	r9, r1, r4, ror #9
   194b8:	andeq	r9, r1, r4, ror #9
   194bc:	andeq	r9, r1, r4, ror #9
   194c0:	andeq	r9, r1, r4, ror #9
   194c4:	andeq	r9, r1, ip, lsr r5
   194c8:	andeq	r9, r1, ip, lsr r5
   194cc:	andeq	r9, r1, r0, ror r5
   194d0:	andeq	r9, r1, r0, ror r5
   194d4:	andeq	r9, r1, r8, ror #16
   194d8:	ldr	r1, [sp, #8]
   194dc:	cmp	r1, #0
   194e0:	bne	19934 <__assert_fail@plt+0x81c0>
   194e4:	cmp	r8, #0
   194e8:	bne	19934 <__assert_fail@plt+0x81c0>
   194ec:	cmp	ip, #0
   194f0:	bne	1940c <__assert_fail@plt+0x7c98>
   194f4:	tst	r9, #131072	; 0x20000
   194f8:	uxtbeq	r1, r0
   194fc:	cmpeq	r1, #9
   19500:	beq	19874 <__assert_fail@plt+0x8100>
   19504:	mov	r1, #1
   19508:	bfi	r0, r1, #0, #8
   1950c:	str	r0, [r5, #4]
   19510:	mov	r4, #0
   19514:	mov	r0, r7
   19518:	mov	r1, #0
   1951c:	mov	r2, #0
   19520:	mov	r3, r5
   19524:	bl	19980 <__assert_fail@plt+0x820c>
   19528:	mov	r6, r0
   1952c:	cmp	r0, #0
   19530:	mov	r8, sl
   19534:	bne	197a8 <__assert_fail@plt+0x8034>
   19538:	b	198e8 <__assert_fail@plt+0x8174>
   1953c:	mov	r8, sl
   19540:	ldr	r1, [sl, #64]	; 0x40
   19544:	mvn	r2, #32
   19548:	uxtab	r0, r2, r0
   1954c:	clz	r0, r0
   19550:	lsr	r0, r0, #5
   19554:	stm	sp, {r0, r3}
   19558:	movw	r2, #22838	; 0x5936
   1955c:	movt	r2, #2
   19560:	mov	r4, r3
   19564:	movw	r3, #21617	; 0x5471
   19568:	movt	r3, #2
   1956c:	b	195a0 <__assert_fail@plt+0x7e2c>
   19570:	mov	r8, sl
   19574:	ldr	r1, [sl, #64]	; 0x40
   19578:	mvn	r2, #34	; 0x22
   1957c:	uxtab	r0, r2, r0
   19580:	clz	r0, r0
   19584:	lsr	r0, r0, #5
   19588:	stm	sp, {r0, r3}
   1958c:	movw	r2, #22844	; 0x593c
   19590:	movt	r2, #2
   19594:	mov	r4, r3
   19598:	movw	r3, #20411	; 0x4fbb
   1959c:	movt	r3, #2
   195a0:	mov	r0, r7
   195a4:	bl	1a13c <__assert_fail@plt+0x89c8>
   195a8:	b	19790 <__assert_fail@plt+0x801c>
   195ac:	mov	r4, #0
   195b0:	mov	r0, r7
   195b4:	mov	r1, #0
   195b8:	mov	r2, #0
   195bc:	mov	r3, r5
   195c0:	bl	19980 <__assert_fail@plt+0x820c>
   195c4:	cmp	r0, #0
   195c8:	beq	198e8 <__assert_fail@plt+0x8174>
   195cc:	mov	r6, r0
   195d0:	ldr	r0, [r7, #92]	; 0x5c
   195d4:	cmp	r0, #2
   195d8:	mov	r8, sl
   195dc:	blt	197a8 <__assert_fail@plt+0x8034>
   195e0:	ldr	r0, [r8, #40]	; 0x28
   195e4:	ldr	r1, [r8, #56]	; 0x38
   195e8:	cmp	r1, r0
   195ec:	ble	197a8 <__assert_fail@plt+0x8034>
   195f0:	ldr	r1, [r8, #28]
   195f4:	cmp	r0, r1
   195f8:	beq	197a8 <__assert_fail@plt+0x8034>
   195fc:	ldr	r1, [r8, #8]
   19600:	ldr	r0, [r1, r0, lsl #2]
   19604:	cmn	r0, #1
   19608:	bne	197a8 <__assert_fail@plt+0x8034>
   1960c:	mov	r0, r5
   19610:	mov	r1, r8
   19614:	mov	r2, r9
   19618:	bl	1877c <__assert_fail@plt+0x7008>
   1961c:	mov	r0, r7
   19620:	mov	r1, #0
   19624:	mov	r2, #0
   19628:	mov	r3, r5
   1962c:	bl	19980 <__assert_fail@plt+0x820c>
   19630:	mov	r4, r0
   19634:	mov	r0, r7
   19638:	mov	r1, r6
   1963c:	mov	r2, r4
   19640:	mov	r3, #16
   19644:	bl	18908 <__assert_fail@plt+0x7194>
   19648:	cmp	r4, #0
   1964c:	ldr	r1, [fp, #12]
   19650:	movne	r6, r0
   19654:	cmpne	r0, #0
   19658:	bne	195e0 <__assert_fail@plt+0x7e6c>
   1965c:	mov	r0, #12
   19660:	str	r0, [r1]
   19664:	b	19964 <__assert_fail@plt+0x81f0>
   19668:	ldr	r0, [r5]
   1966c:	mov	r1, #1
   19670:	ldr	r2, [r7, #84]	; 0x54
   19674:	tst	r2, r1, lsl r0
   19678:	beq	19974 <__assert_fail@plt+0x8200>
   1967c:	lsl	r0, r1, r0
   19680:	ldr	r1, [r7, #80]	; 0x50
   19684:	orr	r0, r1, r0
   19688:	str	r0, [r7, #80]	; 0x50
   1968c:	mov	r4, #0
   19690:	mov	r0, r7
   19694:	mov	r1, #0
   19698:	mov	r2, #0
   1969c:	mov	r3, r5
   196a0:	bl	19980 <__assert_fail@plt+0x820c>
   196a4:	cmp	r0, #0
   196a8:	beq	198e8 <__assert_fail@plt+0x8174>
   196ac:	mov	r6, r0
   196b0:	mov	r8, sl
   196b4:	ldr	r0, [r7, #76]	; 0x4c
   196b8:	add	r0, r0, #1
   196bc:	str	r0, [r7, #76]	; 0x4c
   196c0:	b	196f8 <__assert_fail@plt+0x7f84>
   196c4:	mov	r4, #0
   196c8:	mov	r0, r7
   196cc:	mov	r1, #0
   196d0:	mov	r2, #0
   196d4:	mov	r3, r5
   196d8:	bl	19980 <__assert_fail@plt+0x820c>
   196dc:	cmp	r0, #0
   196e0:	beq	198e8 <__assert_fail@plt+0x8174>
   196e4:	mov	r6, r0
   196e8:	ldr	r0, [r7, #92]	; 0x5c
   196ec:	cmp	r0, #2
   196f0:	mov	r8, sl
   196f4:	blt	197a8 <__assert_fail@plt+0x8034>
   196f8:	ldrb	r0, [r7, #88]	; 0x58
   196fc:	orr	r0, r0, #2
   19700:	strb	r0, [r7, #88]	; 0x58
   19704:	b	197a8 <__assert_fail@plt+0x8034>
   19708:	add	r0, r4, #1
   1970c:	stm	sp, {r0, r3}
   19710:	mov	r8, sl
   19714:	mov	r0, sl
   19718:	mov	r1, r6
   1971c:	mov	r2, r5
   19720:	mov	r4, r3
   19724:	mov	r3, r9
   19728:	bl	19a28 <__assert_fail@plt+0x82b4>
   1972c:	b	19790 <__assert_fail@plt+0x801c>
   19730:	ldr	r0, [r5]
   19734:	movw	r1, #783	; 0x30f
   19738:	tst	r0, r1
   1973c:	beq	19754 <__assert_fail@plt+0x7fe0>
   19740:	ldrb	r0, [r7, #88]	; 0x58
   19744:	tst	r0, #16
   19748:	moveq	r0, r7
   1974c:	bleq	1a060 <__assert_fail@plt+0x88ec>
   19750:	ldr	r0, [r5]
   19754:	cmp	r0, #256	; 0x100
   19758:	beq	19880 <__assert_fail@plt+0x810c>
   1975c:	cmp	r0, #512	; 0x200
   19760:	bne	198f8 <__assert_fail@plt+0x8184>
   19764:	mov	r6, #10
   19768:	mov	r0, #5
   1976c:	b	19888 <__assert_fail@plt+0x8114>
   19770:	str	r3, [sp]
   19774:	mov	r8, sl
   19778:	mov	r0, sl
   1977c:	mov	r1, r7
   19780:	mov	r2, r5
   19784:	mov	r4, r3
   19788:	mov	r3, r9
   1978c:	bl	19b3c <__assert_fail@plt+0x83c8>
   19790:	mov	r6, r0
   19794:	cmp	r0, #0
   19798:	bne	197a8 <__assert_fail@plt+0x8034>
   1979c:	ldr	r0, [r4]
   197a0:	cmp	r0, #0
   197a4:	bne	19964 <__assert_fail@plt+0x81f0>
   197a8:	mov	r0, r5
   197ac:	mov	r1, r8
   197b0:	mov	r2, r9
   197b4:	bl	1877c <__assert_fail@plt+0x7008>
   197b8:	mov	r4, #1
   197bc:	movw	r8, #2048	; 0x800
   197c0:	movt	r8, #140	; 0x8c
   197c4:	ldr	r2, [fp, #12]
   197c8:	ldrb	r0, [r5, #4]
   197cc:	cmp	r0, #23
   197d0:	bhi	19860 <__assert_fail@plt+0x80ec>
   197d4:	tst	r8, r4, lsl r0
   197d8:	beq	19860 <__assert_fail@plt+0x80ec>
   197dc:	str	r9, [sp]
   197e0:	str	r2, [sp, #4]
   197e4:	mov	r0, r6
   197e8:	mov	r1, sl
   197ec:	mov	r2, r7
   197f0:	mov	r3, r5
   197f4:	bl	1a32c <__assert_fail@plt+0x8bb8>
   197f8:	ldr	r2, [fp, #12]
   197fc:	cmp	r0, #0
   19800:	bne	19810 <__assert_fail@plt+0x809c>
   19804:	ldr	r1, [r2]
   19808:	cmp	r1, #0
   1980c:	bne	19940 <__assert_fail@plt+0x81cc>
   19810:	ldr	r1, [sp, #8]
   19814:	cmp	r1, #0
   19818:	mov	r6, r0
   1981c:	beq	197c8 <__assert_fail@plt+0x8054>
   19820:	ldrb	r1, [r5, #4]
   19824:	cmp	r1, #23
   19828:	beq	19838 <__assert_fail@plt+0x80c4>
   1982c:	cmp	r1, #11
   19830:	mov	r6, r0
   19834:	bne	197c8 <__assert_fail@plt+0x8054>
   19838:	cmp	r0, #0
   1983c:	beq	19854 <__assert_fail@plt+0x80e0>
   19840:	movw	r1, #37816	; 0x93b8
   19844:	movt	r1, #1
   19848:	mov	r2, #0
   1984c:	bl	19340 <__assert_fail@plt+0x7bcc>
   19850:	ldr	r2, [fp, #12]
   19854:	mov	r0, #13
   19858:	str	r0, [r2]
   1985c:	b	19964 <__assert_fail@plt+0x81f0>
   19860:	mov	r4, r6
   19864:	b	19968 <__assert_fail@plt+0x81f4>
   19868:	mov	r0, #5
   1986c:	str	r0, [r3]
   19870:	b	19964 <__assert_fail@plt+0x81f0>
   19874:	mov	r0, #16
   19878:	str	r0, [r3]
   1987c:	b	19964 <__assert_fail@plt+0x81f0>
   19880:	mov	r6, #9
   19884:	mov	r0, #6
   19888:	str	r0, [r5]
   1988c:	mov	r4, #0
   19890:	mov	r0, r7
   19894:	mov	r1, #0
   19898:	mov	r2, #0
   1989c:	mov	r3, r5
   198a0:	bl	19980 <__assert_fail@plt+0x820c>
   198a4:	mov	r8, r0
   198a8:	str	r6, [r5]
   198ac:	mov	r0, r7
   198b0:	mov	r1, #0
   198b4:	mov	r2, #0
   198b8:	mov	r3, r5
   198bc:	bl	19980 <__assert_fail@plt+0x820c>
   198c0:	mov	r1, r0
   198c4:	mov	r0, r7
   198c8:	mov	r7, r1
   198cc:	mov	r1, r8
   198d0:	mov	r2, r7
   198d4:	mov	r3, #10
   198d8:	bl	18908 <__assert_fail@plt+0x7194>
   198dc:	cmp	r8, #0
   198e0:	cmpne	r7, #0
   198e4:	bne	19910 <__assert_fail@plt+0x819c>
   198e8:	mov	r0, #12
   198ec:	ldr	r1, [fp, #12]
   198f0:	str	r0, [r1]
   198f4:	b	19968 <__assert_fail@plt+0x81f4>
   198f8:	mov	r4, #0
   198fc:	mov	r0, r7
   19900:	mov	r1, #0
   19904:	mov	r2, #0
   19908:	mov	r3, r5
   1990c:	bl	19980 <__assert_fail@plt+0x820c>
   19910:	mov	r6, r0
   19914:	cmp	r0, #0
   19918:	beq	198e8 <__assert_fail@plt+0x8174>
   1991c:	mov	r0, r5
   19920:	mov	r1, sl
   19924:	mov	r2, r9
   19928:	bl	1877c <__assert_fail@plt+0x7008>
   1992c:	mov	r4, r6
   19930:	b	19968 <__assert_fail@plt+0x81f4>
   19934:	mov	r0, #13
   19938:	str	r0, [r3]
   1993c:	b	19964 <__assert_fail@plt+0x81f0>
   19940:	cmp	r6, #0
   19944:	beq	19964 <__assert_fail@plt+0x81f0>
   19948:	movw	r1, #37816	; 0x93b8
   1994c:	movt	r1, #1
   19950:	mov	r4, #0
   19954:	mov	r0, r6
   19958:	mov	r2, #0
   1995c:	bl	19340 <__assert_fail@plt+0x7bcc>
   19960:	b	19968 <__assert_fail@plt+0x81f4>
   19964:	mov	r4, #0
   19968:	mov	r0, r4
   1996c:	sub	sp, fp, #28
   19970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19974:	mov	r0, #6
   19978:	ldr	r1, [fp, #12]
   1997c:	b	19660 <__assert_fail@plt+0x7eec>
   19980:	push	{r4, r5, r6, r7, fp, lr}
   19984:	add	fp, sp, #16
   19988:	mov	r6, r3
   1998c:	mov	r4, r2
   19990:	mov	r5, r1
   19994:	mov	r7, r0
   19998:	ldr	r0, [r0, #64]	; 0x40
   1999c:	cmp	r0, #31
   199a0:	beq	199fc <__assert_fail@plt+0x8288>
   199a4:	ldr	r0, [r7, #56]	; 0x38
   199a8:	ldr	r1, [r7, #64]	; 0x40
   199ac:	add	r2, r1, #1
   199b0:	str	r2, [r7, #64]	; 0x40
   199b4:	add	r0, r0, r1, lsl #5
   199b8:	mov	r1, #0
   199bc:	str	r1, [r0, #4]!
   199c0:	str	r5, [r0, #4]
   199c4:	str	r4, [r0, #8]
   199c8:	ldm	r6, {r2, r3}
   199cc:	str	r1, [r0, #12]
   199d0:	str	r1, [r0, #16]
   199d4:	mvn	r1, #0
   199d8:	str	r1, [r0, #28]
   199dc:	str	r2, [r0, #20]
   199e0:	bic	r1, r3, #786432	; 0xc0000
   199e4:	str	r1, [r0, #24]
   199e8:	cmp	r5, #0
   199ec:	strne	r0, [r5]
   199f0:	cmp	r4, #0
   199f4:	strne	r0, [r4]
   199f8:	pop	{r4, r5, r6, r7, fp, pc}
   199fc:	mov	r0, #996	; 0x3e4
   19a00:	bl	23e64 <__assert_fail@plt+0x126f0>
   19a04:	cmp	r0, #0
   19a08:	moveq	r0, #0
   19a0c:	popeq	{r4, r5, r6, r7, fp, pc}
   19a10:	ldr	r1, [r7, #56]	; 0x38
   19a14:	str	r1, [r0]
   19a18:	mov	r1, #0
   19a1c:	str	r1, [r7, #64]	; 0x40
   19a20:	str	r0, [r7, #56]	; 0x38
   19a24:	b	199a4 <__assert_fail@plt+0x8230>
   19a28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a2c:	add	fp, sp, #28
   19a30:	sub	sp, sp, #12
   19a34:	mov	r5, r3
   19a38:	mov	r6, r2
   19a3c:	mov	r7, r1
   19a40:	mov	r4, r0
   19a44:	ldr	r8, [r1]
   19a48:	ldr	sl, [r1, #24]
   19a4c:	add	r0, sl, #1
   19a50:	str	r0, [r1, #24]
   19a54:	orr	r2, r3, #8388608	; 0x800000
   19a58:	mov	r0, r6
   19a5c:	mov	r1, r4
   19a60:	bl	1877c <__assert_fail@plt+0x7008>
   19a64:	ldrb	r0, [r6, #4]
   19a68:	mov	r1, #0
   19a6c:	ldr	r9, [fp, #12]
   19a70:	cmp	r0, #9
   19a74:	beq	19ac0 <__assert_fail@plt+0x834c>
   19a78:	ldr	r0, [fp, #8]
   19a7c:	stm	sp, {r0, r9}
   19a80:	mov	r0, r4
   19a84:	mov	r1, r7
   19a88:	mov	r2, r6
   19a8c:	mov	r3, r5
   19a90:	bl	1879c <__assert_fail@plt+0x7028>
   19a94:	mov	r1, r0
   19a98:	ldr	r0, [r9]
   19a9c:	mov	r5, #0
   19aa0:	cmp	r0, #0
   19aa4:	bne	19af8 <__assert_fail@plt+0x8384>
   19aa8:	ldrb	r0, [r6, #4]
   19aac:	cmp	r0, #9
   19ab0:	bne	19b10 <__assert_fail@plt+0x839c>
   19ab4:	ldr	r0, [r9]
   19ab8:	cmp	r0, #0
   19abc:	bne	19af8 <__assert_fail@plt+0x8384>
   19ac0:	cmp	sl, #8
   19ac4:	ldrls	r0, [r8, #84]	; 0x54
   19ac8:	movls	r2, #1
   19acc:	orrls	r0, r0, r2, lsl sl
   19ad0:	strls	r0, [r8, #84]	; 0x54
   19ad4:	mov	r5, #0
   19ad8:	mov	r0, r8
   19adc:	mov	r2, #0
   19ae0:	mov	r3, #17
   19ae4:	bl	18908 <__assert_fail@plt+0x7194>
   19ae8:	cmp	r0, #0
   19aec:	beq	19b04 <__assert_fail@plt+0x8390>
   19af0:	str	sl, [r0, #20]
   19af4:	mov	r5, r0
   19af8:	mov	r0, r5
   19afc:	sub	sp, fp, #28
   19b00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b04:	mov	r0, #12
   19b08:	str	r0, [r9]
   19b0c:	b	19af8 <__assert_fail@plt+0x8384>
   19b10:	cmp	r1, #0
   19b14:	beq	19b30 <__assert_fail@plt+0x83bc>
   19b18:	movw	r2, #37816	; 0x93b8
   19b1c:	movt	r2, #1
   19b20:	mov	r0, r1
   19b24:	mov	r1, r2
   19b28:	mov	r2, #0
   19b2c:	bl	19340 <__assert_fail@plt+0x7bcc>
   19b30:	mov	r0, #8
   19b34:	str	r0, [r9]
   19b38:	b	19af8 <__assert_fail@plt+0x8384>
   19b3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b40:	add	fp, sp, #28
   19b44:	sub	sp, sp, #124	; 0x7c
   19b48:	mov	r8, r3
   19b4c:	mov	r6, r2
   19b50:	mov	r9, r1
   19b54:	mov	r7, r0
   19b58:	mov	r5, #0
   19b5c:	str	r5, [fp, #-32]	; 0xffffffe0
   19b60:	str	r5, [fp, #-36]	; 0xffffffdc
   19b64:	mov	r0, #32
   19b68:	mov	r1, #1
   19b6c:	bl	23e10 <__assert_fail@plt+0x1269c>
   19b70:	mov	r4, r0
   19b74:	mov	r0, #40	; 0x28
   19b78:	mov	r1, #1
   19b7c:	bl	23e10 <__assert_fail@plt+0x1269c>
   19b80:	mov	sl, r0
   19b84:	cmp	r4, #0
   19b88:	cmpne	sl, #0
   19b8c:	beq	1a018 <__assert_fail@plt+0x88a4>
   19b90:	mov	r0, r6
   19b94:	mov	r1, r7
   19b98:	mov	r2, r8
   19b9c:	bl	1a660 <__assert_fail@plt+0x8eec>
   19ba0:	mov	r5, r0
   19ba4:	ldrb	r0, [r6, #4]
   19ba8:	cmp	r0, #25
   19bac:	beq	19bc0 <__assert_fail@plt+0x844c>
   19bb0:	cmp	r0, #2
   19bb4:	beq	1a010 <__assert_fail@plt+0x889c>
   19bb8:	mov	r0, #0
   19bbc:	b	19c10 <__assert_fail@plt+0x849c>
   19bc0:	ldrb	r0, [sl, #16]
   19bc4:	orr	r0, r0, #1
   19bc8:	strb	r0, [sl, #16]
   19bcc:	tst	r8, #256	; 0x100
   19bd0:	beq	19be0 <__assert_fail@plt+0x846c>
   19bd4:	mov	r0, r4
   19bd8:	mov	r1, #10
   19bdc:	bl	1a7d4 <__assert_fail@plt+0x9060>
   19be0:	ldr	r0, [r7, #40]	; 0x28
   19be4:	add	r0, r0, r5
   19be8:	str	r0, [r7, #40]	; 0x28
   19bec:	mov	r0, r6
   19bf0:	mov	r1, r7
   19bf4:	mov	r2, r8
   19bf8:	bl	1a660 <__assert_fail@plt+0x8eec>
   19bfc:	mov	r5, r0
   19c00:	ldrb	r0, [r6, #4]
   19c04:	cmp	r0, #2
   19c08:	beq	1a010 <__assert_fail@plt+0x889c>
   19c0c:	mov	r0, #1
   19c10:	str	r0, [sp, #20]
   19c14:	ldr	r0, [r6, #4]
   19c18:	uxtb	r1, r0
   19c1c:	cmp	r1, #21
   19c20:	moveq	r1, #1
   19c24:	bfieq	r0, r1, #0, #8
   19c28:	streq	r0, [r6, #4]
   19c2c:	str	sl, [sp, #24]
   19c30:	mov	r0, #3
   19c34:	str	r0, [fp, #-44]	; 0xffffffd4
   19c38:	add	r0, sp, #68	; 0x44
   19c3c:	str	r0, [fp, #-40]	; 0xffffffd8
   19c40:	mov	r0, #1
   19c44:	str	r8, [sp]
   19c48:	str	r0, [sp, #4]
   19c4c:	sub	r0, fp, #44	; 0x2c
   19c50:	mov	r1, r7
   19c54:	mov	r2, r6
   19c58:	mov	r3, r5
   19c5c:	bl	1a7f8 <__assert_fail@plt+0x9084>
   19c60:	cmp	r0, #0
   19c64:	bne	1a000 <__assert_fail@plt+0x888c>
   19c68:	mov	r0, #0
   19c6c:	str	r0, [sp, #16]
   19c70:	mov	r0, r6
   19c74:	mov	r1, r7
   19c78:	mov	r2, r8
   19c7c:	bl	1a660 <__assert_fail@plt+0x8eec>
   19c80:	mov	sl, r0
   19c84:	ldr	r5, [fp, #-44]	; 0xffffffd4
   19c88:	cmp	r5, #2
   19c8c:	beq	19cf4 <__assert_fail@plt+0x8580>
   19c90:	cmp	r5, #4
   19c94:	bne	19cb8 <__assert_fail@plt+0x8544>
   19c98:	ldr	r0, [r7, #64]	; 0x40
   19c9c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   19ca0:	stm	sp, {r1, r8}
   19ca4:	mov	r1, r4
   19ca8:	ldr	r2, [sp, #24]
   19cac:	sub	r3, fp, #36	; 0x24
   19cb0:	bl	1ab94 <__assert_fail@plt+0x9420>
   19cb4:	b	19d00 <__assert_fail@plt+0x858c>
   19cb8:	ldrb	r0, [r6, #4]
   19cbc:	cmp	r0, #22
   19cc0:	beq	19d60 <__assert_fail@plt+0x85ec>
   19cc4:	cmp	r0, #2
   19cc8:	beq	19ffc <__assert_fail@plt+0x8888>
   19ccc:	cmp	r5, #1
   19cd0:	beq	19e20 <__assert_fail@plt+0x86ac>
   19cd4:	cmp	r5, #2
   19cd8:	beq	19cf4 <__assert_fail@plt+0x8580>
   19cdc:	cmp	r5, #3
   19ce0:	bne	19e50 <__assert_fail@plt+0x86dc>
   19ce4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   19ce8:	mov	r0, r4
   19cec:	bl	1ab5c <__assert_fail@plt+0x93e8>
   19cf0:	b	19d00 <__assert_fail@plt+0x858c>
   19cf4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   19cf8:	mov	r0, r4
   19cfc:	bl	1ab24 <__assert_fail@plt+0x93b0>
   19d00:	ldr	r1, [fp, #8]
   19d04:	str	r0, [r1]
   19d08:	cmp	r0, #0
   19d0c:	bne	1a008 <__assert_fail@plt+0x8894>
   19d10:	ldrb	r0, [r6, #4]
   19d14:	cmp	r0, #21
   19d18:	beq	19e88 <__assert_fail@plt+0x8714>
   19d1c:	cmp	r0, #2
   19d20:	beq	19ffc <__assert_fail@plt+0x8888>
   19d24:	mov	r0, #3
   19d28:	str	r0, [fp, #-44]	; 0xffffffd4
   19d2c:	add	r0, sp, #68	; 0x44
   19d30:	str	r0, [fp, #-40]	; 0xffffffd8
   19d34:	str	r8, [sp]
   19d38:	mov	r0, #0
   19d3c:	str	r0, [sp, #4]
   19d40:	sub	r0, fp, #44	; 0x2c
   19d44:	mov	r1, r7
   19d48:	mov	r2, r6
   19d4c:	mov	r3, sl
   19d50:	bl	1a7f8 <__assert_fail@plt+0x9084>
   19d54:	cmp	r0, #0
   19d58:	beq	19c70 <__assert_fail@plt+0x84fc>
   19d5c:	b	1a000 <__assert_fail@plt+0x888c>
   19d60:	ldr	r0, [r7, #40]	; 0x28
   19d64:	add	r0, r0, sl
   19d68:	str	r0, [r7, #40]	; 0x28
   19d6c:	add	r0, sp, #28
   19d70:	mov	r1, r7
   19d74:	mov	r2, r8
   19d78:	bl	1a660 <__assert_fail@plt+0x8eec>
   19d7c:	mov	r3, r0
   19d80:	ldrb	r0, [sp, #32]
   19d84:	cmp	r0, #21
   19d88:	beq	19e04 <__assert_fail@plt+0x8690>
   19d8c:	cmp	r0, #2
   19d90:	sub	r1, fp, #52	; 0x34
   19d94:	beq	19ffc <__assert_fail@plt+0x8888>
   19d98:	mov	r0, #3
   19d9c:	str	r0, [fp, #-52]	; 0xffffffcc
   19da0:	add	r0, sp, #36	; 0x24
   19da4:	str	r0, [fp, #-48]	; 0xffffffd0
   19da8:	str	r8, [sp]
   19dac:	mov	r0, #1
   19db0:	str	r0, [sp, #4]
   19db4:	mov	r0, r1
   19db8:	mov	r5, r1
   19dbc:	mov	r1, r7
   19dc0:	add	r2, sp, #28
   19dc4:	bl	1a7f8 <__assert_fail@plt+0x9084>
   19dc8:	cmp	r0, #0
   19dcc:	bne	1a000 <__assert_fail@plt+0x888c>
   19dd0:	mov	r0, r6
   19dd4:	mov	r1, r7
   19dd8:	mov	r2, r8
   19ddc:	bl	1a660 <__assert_fail@plt+0x8eec>
   19de0:	mov	sl, r0
   19de4:	stm	sp, {r5, r9}
   19de8:	str	r8, [sp, #8]
   19dec:	mov	r0, r4
   19df0:	ldr	r1, [sp, #24]
   19df4:	sub	r2, fp, #32
   19df8:	sub	r3, fp, #44	; 0x2c
   19dfc:	bl	1a900 <__assert_fail@plt+0x918c>
   19e00:	b	19d00 <__assert_fail@plt+0x858c>
   19e04:	ldr	r0, [r7, #40]	; 0x28
   19e08:	sub	r0, r0, sl
   19e0c:	str	r0, [r7, #40]	; 0x28
   19e10:	mov	r0, #1
   19e14:	strb	r0, [r6, #4]
   19e18:	cmp	r5, #1
   19e1c:	bne	19cd4 <__assert_fail@plt+0x8560>
   19e20:	ldr	r5, [sp, #24]
   19e24:	ldr	r0, [r5, #20]
   19e28:	ldr	r1, [sp, #16]
   19e2c:	cmp	r1, r0
   19e30:	beq	19e60 <__assert_fail@plt+0x86ec>
   19e34:	ldr	r0, [r5]
   19e38:	ldr	r1, [r5, #20]
   19e3c:	add	r2, r1, #1
   19e40:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19e44:	str	r2, [r5, #20]
   19e48:	str	r3, [r0, r1, lsl #2]
   19e4c:	b	19d10 <__assert_fail@plt+0x859c>
   19e50:	ldrb	r1, [fp, #-40]	; 0xffffffd8
   19e54:	mov	r0, r4
   19e58:	bl	1a7d4 <__assert_fail@plt+0x9060>
   19e5c:	b	19d10 <__assert_fail@plt+0x859c>
   19e60:	mov	r1, #1
   19e64:	orr	r0, r1, r0, lsl #1
   19e68:	str	r0, [sp, #16]
   19e6c:	lsl	r1, r0, #2
   19e70:	ldr	r0, [r5]
   19e74:	bl	23e94 <__assert_fail@plt+0x12720>
   19e78:	cmp	r0, #0
   19e7c:	beq	1a038 <__assert_fail@plt+0x88c4>
   19e80:	str	r0, [r5]
   19e84:	b	19e34 <__assert_fail@plt+0x86c0>
   19e88:	ldr	r0, [r7, #40]	; 0x28
   19e8c:	add	r0, r0, sl
   19e90:	str	r0, [r7, #40]	; 0x28
   19e94:	ldr	r0, [sp, #20]
   19e98:	cmp	r0, #0
   19e9c:	movne	r0, r4
   19ea0:	blne	1b3fc <__assert_fail@plt+0x9c88>
   19ea4:	ldr	r0, [r9, #92]	; 0x5c
   19ea8:	cmp	r0, #2
   19eac:	ldr	sl, [sp, #24]
   19eb0:	blt	19ec0 <__assert_fail@plt+0x874c>
   19eb4:	ldr	r1, [r9, #60]	; 0x3c
   19eb8:	mov	r0, r4
   19ebc:	bl	1b41c <__assert_fail@plt+0x9ca8>
   19ec0:	ldr	r0, [sl, #20]
   19ec4:	cmp	r0, #0
   19ec8:	bne	19ef0 <__assert_fail@plt+0x877c>
   19ecc:	ldr	r0, [sl, #24]
   19ed0:	cmp	r0, #0
   19ed4:	bne	19ef0 <__assert_fail@plt+0x877c>
   19ed8:	ldr	r0, [sl, #28]
   19edc:	cmp	r0, #0
   19ee0:	bne	19ef0 <__assert_fail@plt+0x877c>
   19ee4:	ldr	r0, [sl, #32]
   19ee8:	cmp	r0, #0
   19eec:	beq	19fac <__assert_fail@plt+0x8838>
   19ef0:	ldrb	r0, [r9, #88]	; 0x58
   19ef4:	orr	r0, r0, #2
   19ef8:	strb	r0, [r9, #88]	; 0x58
   19efc:	str	sl, [sp, #68]	; 0x44
   19f00:	ldr	r7, [sp, #72]	; 0x48
   19f04:	mov	r0, #6
   19f08:	strb	r0, [sp, #72]	; 0x48
   19f0c:	mov	r6, #0
   19f10:	add	r3, sp, #68	; 0x44
   19f14:	mov	r0, r9
   19f18:	mov	r1, #0
   19f1c:	mov	r2, #0
   19f20:	bl	19980 <__assert_fail@plt+0x820c>
   19f24:	cmp	r0, #0
   19f28:	beq	1a03c <__assert_fail@plt+0x88c8>
   19f2c:	mov	r5, r0
   19f30:	bic	r0, r7, #255	; 0xff
   19f34:	ldr	r1, [r4, r6, lsl #2]
   19f38:	cmp	r1, #0
   19f3c:	bne	19f58 <__assert_fail@plt+0x87e4>
   19f40:	add	r6, r6, #1
   19f44:	cmp	r6, #7
   19f48:	bls	19f34 <__assert_fail@plt+0x87c0>
   19f4c:	mov	r0, r4
   19f50:	bl	13f04 <__assert_fail@plt+0x2790>
   19f54:	b	19fa0 <__assert_fail@plt+0x882c>
   19f58:	str	r4, [sp, #68]	; 0x44
   19f5c:	orr	r0, r0, #3
   19f60:	str	r0, [sp, #72]	; 0x48
   19f64:	add	r3, sp, #68	; 0x44
   19f68:	mov	r0, r9
   19f6c:	mov	r1, #0
   19f70:	mov	r2, #0
   19f74:	bl	19980 <__assert_fail@plt+0x820c>
   19f78:	cmp	r0, #0
   19f7c:	beq	1a03c <__assert_fail@plt+0x88c8>
   19f80:	mov	r1, r0
   19f84:	mov	r0, r9
   19f88:	mov	r2, r5
   19f8c:	mov	r3, #10
   19f90:	bl	18908 <__assert_fail@plt+0x7194>
   19f94:	mov	r5, r0
   19f98:	cmp	r0, #0
   19f9c:	beq	1a03c <__assert_fail@plt+0x88c8>
   19fa0:	mov	r0, r5
   19fa4:	sub	sp, fp, #28
   19fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fac:	ldr	r0, [r9, #92]	; 0x5c
   19fb0:	cmp	r0, #2
   19fb4:	blt	19fd0 <__assert_fail@plt+0x885c>
   19fb8:	ldr	r0, [sl, #36]	; 0x24
   19fbc:	cmp	r0, #0
   19fc0:	bne	19ef0 <__assert_fail@plt+0x877c>
   19fc4:	ldrb	r0, [sl, #16]
   19fc8:	tst	r0, #1
   19fcc:	bne	19ef0 <__assert_fail@plt+0x877c>
   19fd0:	mov	r0, sl
   19fd4:	bl	17434 <__assert_fail@plt+0x5cc0>
   19fd8:	str	r4, [sp, #68]	; 0x44
   19fdc:	mov	r0, #3
   19fe0:	strb	r0, [sp, #72]	; 0x48
   19fe4:	add	r3, sp, #68	; 0x44
   19fe8:	mov	r0, r9
   19fec:	mov	r1, #0
   19ff0:	mov	r2, #0
   19ff4:	bl	19980 <__assert_fail@plt+0x820c>
   19ff8:	b	19f94 <__assert_fail@plt+0x8820>
   19ffc:	mov	r0, #7
   1a000:	ldr	r1, [fp, #8]
   1a004:	str	r0, [r1]
   1a008:	ldr	sl, [sp, #24]
   1a00c:	b	1a048 <__assert_fail@plt+0x88d4>
   1a010:	mov	r0, #2
   1a014:	b	1a040 <__assert_fail@plt+0x88cc>
   1a018:	mov	r0, r4
   1a01c:	bl	13f04 <__assert_fail@plt+0x2790>
   1a020:	mov	r0, sl
   1a024:	bl	13f04 <__assert_fail@plt+0x2790>
   1a028:	mov	r0, #12
   1a02c:	ldr	r1, [fp, #8]
   1a030:	str	r0, [r1]
   1a034:	b	19fa0 <__assert_fail@plt+0x882c>
   1a038:	mov	sl, r5
   1a03c:	mov	r0, #12
   1a040:	ldr	r1, [fp, #8]
   1a044:	str	r0, [r1]
   1a048:	mov	r0, r4
   1a04c:	bl	13f04 <__assert_fail@plt+0x2790>
   1a050:	mov	r0, sl
   1a054:	bl	17434 <__assert_fail@plt+0x5cc0>
   1a058:	mov	r5, #0
   1a05c:	b	19fa0 <__assert_fail@plt+0x882c>
   1a060:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a064:	add	fp, sp, #24
   1a068:	mov	r4, r0
   1a06c:	ldrb	r0, [r0, #88]	; 0x58
   1a070:	orr	r1, r0, #16
   1a074:	strb	r1, [r4, #88]	; 0x58
   1a078:	tst	r0, #8
   1a07c:	bne	1a0b8 <__assert_fail@plt+0x8944>
   1a080:	movw	r1, #0
   1a084:	movt	r1, #1023	; 0x3ff
   1a088:	mov	r2, #0
   1a08c:	mvn	r3, #2013265921	; 0x78000001
   1a090:	mvn	r7, #-134217727	; 0xf8000001
   1a094:	str	r2, [r4, #96]	; 0x60
   1a098:	add	r2, r4, #100	; 0x64
   1a09c:	stm	r2, {r1, r3, r7}
   1a0a0:	tst	r0, #4
   1a0a4:	beq	1a0c4 <__assert_fail@plt+0x8950>
   1a0a8:	vmov.i32	q8, #0	; 0x00000000
   1a0ac:	add	r0, r4, #112	; 0x70
   1a0b0:	vst1.32	{d16-d17}, [r0]
   1a0b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a0b8:	mov	r5, #0
   1a0bc:	mov	r8, #0
   1a0c0:	b	1a0cc <__assert_fail@plt+0x8958>
   1a0c4:	mov	r8, #4
   1a0c8:	mov	r5, #128	; 0x80
   1a0cc:	bl	1160c <__ctype_b_loc@plt>
   1a0d0:	ldr	r0, [r0]
   1a0d4:	add	r6, r0, r5, lsl #1
   1a0d8:	mov	r1, #1
   1a0dc:	b	1a0f4 <__assert_fail@plt+0x8980>
   1a0e0:	add	r6, r6, #64	; 0x40
   1a0e4:	add	r8, r8, #1
   1a0e8:	add	r5, r5, #32
   1a0ec:	cmp	r8, #8
   1a0f0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a0f4:	add	r0, r4, r8, lsl #2
   1a0f8:	add	r2, r0, #96	; 0x60
   1a0fc:	mov	r3, #0
   1a100:	mov	r0, r6
   1a104:	add	r7, r5, r3
   1a108:	cmp	r7, #95	; 0x5f
   1a10c:	beq	1a11c <__assert_fail@plt+0x89a8>
   1a110:	ldrh	r7, [r0]
   1a114:	ands	r7, r7, #8
   1a118:	beq	1a128 <__assert_fail@plt+0x89b4>
   1a11c:	ldr	r7, [r2]
   1a120:	orr	r7, r7, r1, lsl r3
   1a124:	str	r7, [r2]
   1a128:	add	r0, r0, #2
   1a12c:	add	r3, r3, #1
   1a130:	cmp	r3, #32
   1a134:	bne	1a104 <__assert_fail@plt+0x8990>
   1a138:	b	1a0e0 <__assert_fail@plt+0x896c>
   1a13c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a140:	add	fp, sp, #28
   1a144:	sub	sp, sp, #20
   1a148:	mov	r8, r3
   1a14c:	mov	r6, r2
   1a150:	mov	r4, r1
   1a154:	mov	r9, r0
   1a158:	mov	r7, #0
   1a15c:	str	r7, [sp, #16]
   1a160:	mov	r0, #32
   1a164:	mov	r1, #1
   1a168:	bl	23e10 <__assert_fail@plt+0x1269c>
   1a16c:	ldr	r1, [fp, #12]
   1a170:	cmp	r0, #0
   1a174:	beq	1a2e4 <__assert_fail@plt+0x8b70>
   1a178:	mov	r5, r0
   1a17c:	mov	r0, #40	; 0x28
   1a180:	mov	r1, #1
   1a184:	bl	23e10 <__assert_fail@plt+0x1269c>
   1a188:	cmp	r0, #0
   1a18c:	beq	1a2f0 <__assert_fail@plt+0x8b7c>
   1a190:	mov	sl, r0
   1a194:	ldr	r1, [fp, #8]
   1a198:	ldrb	r0, [r0, #16]
   1a19c:	and	r0, r0, #254	; 0xfe
   1a1a0:	orr	r0, r0, r1
   1a1a4:	strb	r0, [sl, #16]
   1a1a8:	mov	r7, #0
   1a1ac:	stm	sp, {r6, r7}
   1a1b0:	add	r3, sp, #16
   1a1b4:	mov	r0, r4
   1a1b8:	mov	r1, r5
   1a1bc:	mov	r2, sl
   1a1c0:	bl	1ab94 <__assert_fail@plt+0x9420>
   1a1c4:	cmp	r0, #0
   1a1c8:	bne	1a30c <__assert_fail@plt+0x8b98>
   1a1cc:	ldrb	r0, [r8]
   1a1d0:	cmp	r0, #0
   1a1d4:	beq	1a1f4 <__assert_fail@plt+0x8a80>
   1a1d8:	add	r4, r8, #1
   1a1dc:	uxtb	r1, r0
   1a1e0:	mov	r0, r5
   1a1e4:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1a1e8:	ldrb	r0, [r4], #1
   1a1ec:	cmp	r0, #0
   1a1f0:	bne	1a1dc <__assert_fail@plt+0x8a68>
   1a1f4:	ldr	r0, [fp, #8]
   1a1f8:	cmp	r0, #0
   1a1fc:	movne	r0, r5
   1a200:	blne	1b3fc <__assert_fail@plt+0x9c88>
   1a204:	ldr	r0, [r9, #92]	; 0x5c
   1a208:	cmp	r0, #2
   1a20c:	blt	1a21c <__assert_fail@plt+0x8aa8>
   1a210:	ldr	r1, [r9, #60]	; 0x3c
   1a214:	mov	r0, r5
   1a218:	bl	1b41c <__assert_fail@plt+0x9ca8>
   1a21c:	str	r5, [sp, #8]
   1a220:	ldr	r4, [sp, #12]
   1a224:	bfc	r4, #0, #23
   1a228:	orr	r0, r4, #3
   1a22c:	str	r0, [sp, #12]
   1a230:	mov	r7, #0
   1a234:	add	r3, sp, #8
   1a238:	mov	r0, r9
   1a23c:	mov	r1, #0
   1a240:	mov	r2, #0
   1a244:	bl	19980 <__assert_fail@plt+0x820c>
   1a248:	cmp	r0, #0
   1a24c:	beq	1a2c8 <__assert_fail@plt+0x8b54>
   1a250:	mov	r6, r0
   1a254:	ldr	r0, [r9, #92]	; 0x5c
   1a258:	cmp	r0, #2
   1a25c:	blt	1a2b0 <__assert_fail@plt+0x8b3c>
   1a260:	str	sl, [sp, #8]
   1a264:	orr	r0, r4, #6
   1a268:	str	r0, [sp, #12]
   1a26c:	ldrb	r0, [r9, #88]	; 0x58
   1a270:	orr	r0, r0, #2
   1a274:	strb	r0, [r9, #88]	; 0x58
   1a278:	add	r3, sp, #8
   1a27c:	mov	r0, r9
   1a280:	mov	r1, #0
   1a284:	mov	r2, #0
   1a288:	bl	19980 <__assert_fail@plt+0x820c>
   1a28c:	cmp	r0, #0
   1a290:	beq	1a2c8 <__assert_fail@plt+0x8b54>
   1a294:	mov	r2, r0
   1a298:	mov	r0, r9
   1a29c:	mov	r1, r6
   1a2a0:	mov	r3, #10
   1a2a4:	bl	18908 <__assert_fail@plt+0x7194>
   1a2a8:	mov	r7, r0
   1a2ac:	b	1a2bc <__assert_fail@plt+0x8b48>
   1a2b0:	mov	r0, sl
   1a2b4:	bl	17434 <__assert_fail@plt+0x5cc0>
   1a2b8:	mov	r7, r6
   1a2bc:	mov	r0, r7
   1a2c0:	sub	sp, fp, #28
   1a2c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2c8:	mov	r0, r5
   1a2cc:	bl	13f04 <__assert_fail@plt+0x2790>
   1a2d0:	mov	r0, sl
   1a2d4:	bl	17434 <__assert_fail@plt+0x5cc0>
   1a2d8:	mov	r0, #12
   1a2dc:	ldr	r1, [fp, #12]
   1a2e0:	b	1a2e8 <__assert_fail@plt+0x8b74>
   1a2e4:	mov	r0, #12
   1a2e8:	str	r0, [r1]
   1a2ec:	b	1a2bc <__assert_fail@plt+0x8b48>
   1a2f0:	mov	r0, r5
   1a2f4:	bl	13f04 <__assert_fail@plt+0x2790>
   1a2f8:	mov	r0, #12
   1a2fc:	ldr	r1, [fp, #12]
   1a300:	str	r0, [r1]
   1a304:	mov	r7, #0
   1a308:	b	1a2bc <__assert_fail@plt+0x8b48>
   1a30c:	mov	r6, r0
   1a310:	mov	r0, r5
   1a314:	bl	13f04 <__assert_fail@plt+0x2790>
   1a318:	mov	r0, sl
   1a31c:	bl	17434 <__assert_fail@plt+0x5cc0>
   1a320:	ldr	r0, [fp, #12]
   1a324:	str	r6, [r0]
   1a328:	b	1a2bc <__assert_fail@plt+0x8b48>
   1a32c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a330:	add	fp, sp, #28
   1a334:	sub	sp, sp, #20
   1a338:	mov	r7, r3
   1a33c:	mov	r5, r2
   1a340:	mov	r8, r1
   1a344:	mov	r4, r0
   1a348:	ldrb	r0, [r3, #4]
   1a34c:	ldr	r1, [fp, #12]
   1a350:	str	r1, [sp, #16]
   1a354:	ldr	sl, [fp, #8]
   1a358:	cmp	r0, #23
   1a35c:	bne	1a3b4 <__assert_fail@plt+0x8c40>
   1a360:	ldr	r0, [r7]
   1a364:	str	r0, [sp, #12]
   1a368:	ldr	r0, [r7, #4]
   1a36c:	str	r0, [sp, #8]
   1a370:	ldr	r0, [r8, #40]	; 0x28
   1a374:	str	r0, [sp, #4]
   1a378:	mov	r0, r8
   1a37c:	mov	r1, r7
   1a380:	mov	r2, sl
   1a384:	bl	1b670 <__assert_fail@plt+0x9efc>
   1a388:	cmn	r0, #1
   1a38c:	bne	1a3d0 <__assert_fail@plt+0x8c5c>
   1a390:	ldrb	r0, [r7, #4]
   1a394:	cmp	r0, #1
   1a398:	bne	1a3ac <__assert_fail@plt+0x8c38>
   1a39c:	ldrb	r0, [r7]
   1a3a0:	mov	r6, #0
   1a3a4:	cmp	r0, #44	; 0x2c
   1a3a8:	beq	1a3dc <__assert_fail@plt+0x8c68>
   1a3ac:	mov	r0, #10
   1a3b0:	b	1a624 <__assert_fail@plt+0x8eb0>
   1a3b4:	mvn	r9, #0
   1a3b8:	cmp	r0, #19
   1a3bc:	movweq	r9, #1
   1a3c0:	sub	r0, r0, #18
   1a3c4:	clz	r0, r0
   1a3c8:	lsr	r6, r0, #5
   1a3cc:	b	1a474 <__assert_fail@plt+0x8d00>
   1a3d0:	mov	r6, r0
   1a3d4:	cmn	r0, #2
   1a3d8:	beq	1a3fc <__assert_fail@plt+0x8c88>
   1a3dc:	ldrb	r0, [r7, #4]
   1a3e0:	cmp	r0, #24
   1a3e4:	mov	r9, r6
   1a3e8:	beq	1a444 <__assert_fail@plt+0x8cd0>
   1a3ec:	cmp	r0, #1
   1a3f0:	ldrbeq	r0, [r7]
   1a3f4:	cmpeq	r0, #44	; 0x2c
   1a3f8:	beq	1a428 <__assert_fail@plt+0x8cb4>
   1a3fc:	tst	sl, #2097152	; 0x200000
   1a400:	beq	1a63c <__assert_fail@plt+0x8ec8>
   1a404:	ldr	r0, [sp, #4]
   1a408:	str	r0, [r8, #40]	; 0x28
   1a40c:	ldr	r0, [sp, #12]
   1a410:	str	r0, [r7]
   1a414:	ldr	r0, [sp, #8]
   1a418:	str	r0, [r7, #4]
   1a41c:	mov	r0, #1
   1a420:	strb	r0, [r7, #4]
   1a424:	b	1a630 <__assert_fail@plt+0x8ebc>
   1a428:	mov	r0, r8
   1a42c:	mov	r1, r7
   1a430:	mov	r2, sl
   1a434:	bl	1b670 <__assert_fail@plt+0x9efc>
   1a438:	mov	r9, r0
   1a43c:	cmn	r0, #2
   1a440:	beq	1a3fc <__assert_fail@plt+0x8c88>
   1a444:	cmn	r9, #1
   1a448:	beq	1a454 <__assert_fail@plt+0x8ce0>
   1a44c:	cmp	r6, r9
   1a450:	bgt	1a3ac <__assert_fail@plt+0x8c38>
   1a454:	ldrb	r0, [r7, #4]
   1a458:	cmp	r0, #24
   1a45c:	bne	1a3ac <__assert_fail@plt+0x8c38>
   1a460:	cmn	r9, #1
   1a464:	mov	r0, r9
   1a468:	moveq	r0, r6
   1a46c:	cmp	r0, #32768	; 0x8000
   1a470:	bge	1a658 <__assert_fail@plt+0x8ee4>
   1a474:	mov	r0, r7
   1a478:	mov	r1, r8
   1a47c:	mov	r2, sl
   1a480:	bl	1877c <__assert_fail@plt+0x7008>
   1a484:	cmp	r4, #0
   1a488:	beq	1a62c <__assert_fail@plt+0x8eb8>
   1a48c:	orrs	r0, r9, r6
   1a490:	beq	1a584 <__assert_fail@plt+0x8e10>
   1a494:	mov	r8, #0
   1a498:	cmp	r6, #1
   1a49c:	bge	1a59c <__assert_fail@plt+0x8e28>
   1a4a0:	ldrb	r0, [r4, #24]
   1a4a4:	cmp	r0, #17
   1a4a8:	bne	1a4c0 <__assert_fail@plt+0x8d4c>
   1a4ac:	ldr	r2, [r4, #20]
   1a4b0:	movw	r1, #47092	; 0xb7f4
   1a4b4:	movt	r1, #1
   1a4b8:	mov	r0, r4
   1a4bc:	bl	19340 <__assert_fail@plt+0x7bcc>
   1a4c0:	mov	r3, #10
   1a4c4:	cmn	r9, #1
   1a4c8:	movweq	r3, #11
   1a4cc:	mov	r0, r5
   1a4d0:	mov	r1, r4
   1a4d4:	mov	r2, #0
   1a4d8:	bl	18908 <__assert_fail@plt+0x7194>
   1a4dc:	cmp	r0, #0
   1a4e0:	beq	1a620 <__assert_fail@plt+0x8eac>
   1a4e4:	mov	r7, r0
   1a4e8:	add	r0, r6, #2
   1a4ec:	cmp	r0, r9
   1a4f0:	ble	1a518 <__assert_fail@plt+0x8da4>
   1a4f4:	cmp	r8, #0
   1a4f8:	beq	1a57c <__assert_fail@plt+0x8e08>
   1a4fc:	mov	r0, r5
   1a500:	mov	r1, r8
   1a504:	mov	r2, r7
   1a508:	mov	r3, #16
   1a50c:	sub	sp, fp, #28
   1a510:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a514:	b	18908 <__assert_fail@plt+0x7194>
   1a518:	add	r6, r6, #1
   1a51c:	mov	r0, r4
   1a520:	mov	r1, r5
   1a524:	bl	1b718 <__assert_fail@plt+0x9fa4>
   1a528:	mov	r4, r0
   1a52c:	mov	r0, r5
   1a530:	mov	r1, r7
   1a534:	mov	r2, r4
   1a538:	mov	r3, #16
   1a53c:	bl	18908 <__assert_fail@plt+0x7194>
   1a540:	cmp	r4, #0
   1a544:	movne	r1, r0
   1a548:	cmpne	r0, #0
   1a54c:	beq	1a620 <__assert_fail@plt+0x8eac>
   1a550:	mov	r0, r5
   1a554:	mov	r2, #0
   1a558:	mov	r3, #10
   1a55c:	bl	18908 <__assert_fail@plt+0x7194>
   1a560:	cmp	r0, #0
   1a564:	beq	1a620 <__assert_fail@plt+0x8eac>
   1a568:	mov	r7, r0
   1a56c:	add	r6, r6, #1
   1a570:	cmp	r6, r9
   1a574:	blt	1a51c <__assert_fail@plt+0x8da8>
   1a578:	b	1a4f4 <__assert_fail@plt+0x8d80>
   1a57c:	mov	r4, r7
   1a580:	b	1a630 <__assert_fail@plt+0x8ebc>
   1a584:	movw	r1, #37816	; 0x93b8
   1a588:	movt	r1, #1
   1a58c:	mov	r0, r4
   1a590:	mov	r2, #0
   1a594:	bl	19340 <__assert_fail@plt+0x7bcc>
   1a598:	b	1a62c <__assert_fail@plt+0x8eb8>
   1a59c:	bne	1a5c8 <__assert_fail@plt+0x8e54>
   1a5a0:	mov	r8, r4
   1a5a4:	cmp	r6, r9
   1a5a8:	beq	1a618 <__assert_fail@plt+0x8ea4>
   1a5ac:	mov	r0, r4
   1a5b0:	mov	r1, r5
   1a5b4:	bl	1b718 <__assert_fail@plt+0x9fa4>
   1a5b8:	mov	r4, r0
   1a5bc:	cmp	r0, #0
   1a5c0:	bne	1a4a0 <__assert_fail@plt+0x8d2c>
   1a5c4:	b	1a620 <__assert_fail@plt+0x8eac>
   1a5c8:	mov	r7, #1
   1a5cc:	mov	r8, r4
   1a5d0:	mov	r0, r4
   1a5d4:	mov	r1, r5
   1a5d8:	bl	1b718 <__assert_fail@plt+0x9fa4>
   1a5dc:	mov	r4, r0
   1a5e0:	mov	r0, r5
   1a5e4:	mov	r1, r8
   1a5e8:	mov	r2, r4
   1a5ec:	mov	r3, #16
   1a5f0:	bl	18908 <__assert_fail@plt+0x7194>
   1a5f4:	cmp	r4, #0
   1a5f8:	movne	r8, r0
   1a5fc:	cmpne	r0, #0
   1a600:	beq	1a620 <__assert_fail@plt+0x8eac>
   1a604:	add	r7, r7, #1
   1a608:	cmp	r7, r6
   1a60c:	blt	1a5d0 <__assert_fail@plt+0x8e5c>
   1a610:	cmp	r6, r9
   1a614:	bne	1a5ac <__assert_fail@plt+0x8e38>
   1a618:	mov	r4, r8
   1a61c:	b	1a630 <__assert_fail@plt+0x8ebc>
   1a620:	mov	r0, #12
   1a624:	ldr	r1, [sp, #16]
   1a628:	str	r0, [r1]
   1a62c:	mov	r4, #0
   1a630:	mov	r0, r4
   1a634:	sub	sp, fp, #28
   1a638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a63c:	ldrb	r0, [r7, #4]
   1a640:	mov	r1, #10
   1a644:	cmp	r0, #2
   1a648:	movweq	r1, #9
   1a64c:	ldr	r0, [sp, #16]
   1a650:	str	r1, [r0]
   1a654:	b	1a62c <__assert_fail@plt+0x8eb8>
   1a658:	mov	r0, #15
   1a65c:	b	1a624 <__assert_fail@plt+0x8eb0>
   1a660:	push	{r4, sl, fp, lr}
   1a664:	add	fp, sp, #8
   1a668:	ldr	ip, [r1, #40]	; 0x28
   1a66c:	ldr	r3, [r1, #56]	; 0x38
   1a670:	cmp	r3, ip
   1a674:	ble	1a6f4 <__assert_fail@plt+0x8f80>
   1a678:	ldr	r3, [r1, #4]
   1a67c:	ldrb	ip, [r3, ip]
   1a680:	strb	ip, [r0]
   1a684:	ldr	r3, [r1, #80]	; 0x50
   1a688:	cmp	r3, #2
   1a68c:	blt	1a6b0 <__assert_fail@plt+0x8f3c>
   1a690:	ldr	lr, [r1, #28]
   1a694:	ldr	r4, [r1, #40]	; 0x28
   1a698:	cmp	r4, lr
   1a69c:	beq	1a6b0 <__assert_fail@plt+0x8f3c>
   1a6a0:	ldr	r3, [r1, #8]
   1a6a4:	ldr	r3, [r3, r4, lsl #2]
   1a6a8:	cmn	r3, #1
   1a6ac:	beq	1a7a0 <__assert_fail@plt+0x902c>
   1a6b0:	tst	r2, #1
   1a6b4:	beq	1a708 <__assert_fail@plt+0x8f94>
   1a6b8:	cmp	ip, #92	; 0x5c
   1a6bc:	bne	1a708 <__assert_fail@plt+0x8f94>
   1a6c0:	ldr	r2, [r1, #40]	; 0x28
   1a6c4:	ldr	r3, [r1, #48]	; 0x30
   1a6c8:	add	r2, r2, #1
   1a6cc:	cmp	r2, r3
   1a6d0:	bge	1a7a0 <__assert_fail@plt+0x902c>
   1a6d4:	str	r2, [r1, #40]	; 0x28
   1a6d8:	ldr	r1, [r1, #4]
   1a6dc:	ldrb	r2, [r1, r2]
   1a6e0:	mov	r1, #1
   1a6e4:	strb	r1, [r0, #4]
   1a6e8:	strb	r2, [r0]
   1a6ec:	mov	r0, r1
   1a6f0:	pop	{r4, sl, fp, pc}
   1a6f4:	mov	r1, #2
   1a6f8:	strb	r1, [r0, #4]
   1a6fc:	mov	r1, #0
   1a700:	mov	r0, r1
   1a704:	pop	{r4, sl, fp, pc}
   1a708:	cmp	ip, #92	; 0x5c
   1a70c:	bgt	1a760 <__assert_fail@plt+0x8fec>
   1a710:	cmp	ip, #45	; 0x2d
   1a714:	beq	1a778 <__assert_fail@plt+0x9004>
   1a718:	cmp	ip, #91	; 0x5b
   1a71c:	bne	1a7a0 <__assert_fail@plt+0x902c>
   1a720:	ldr	r3, [r1, #40]	; 0x28
   1a724:	ldr	r4, [r1, #48]	; 0x30
   1a728:	add	r3, r3, #1
   1a72c:	cmp	r3, r4
   1a730:	bge	1a794 <__assert_fail@plt+0x9020>
   1a734:	ldr	r1, [r1, #4]
   1a738:	ldrb	r1, [r1, r3]
   1a73c:	strb	r1, [r0]
   1a740:	cmp	r1, #61	; 0x3d
   1a744:	beq	1a7b0 <__assert_fail@plt+0x903c>
   1a748:	cmp	r1, #58	; 0x3a
   1a74c:	beq	1a7b8 <__assert_fail@plt+0x9044>
   1a750:	cmp	r1, #46	; 0x2e
   1a754:	bne	1a79c <__assert_fail@plt+0x9028>
   1a758:	mov	r1, #26
   1a75c:	b	1a7c4 <__assert_fail@plt+0x9050>
   1a760:	cmp	ip, #93	; 0x5d
   1a764:	beq	1a780 <__assert_fail@plt+0x900c>
   1a768:	cmp	ip, #94	; 0x5e
   1a76c:	bne	1a7a0 <__assert_fail@plt+0x902c>
   1a770:	mov	r1, #25
   1a774:	b	1a784 <__assert_fail@plt+0x9010>
   1a778:	mov	r1, #22
   1a77c:	b	1a784 <__assert_fail@plt+0x9010>
   1a780:	mov	r1, #21
   1a784:	strb	r1, [r0, #4]
   1a788:	mov	r1, #1
   1a78c:	mov	r0, r1
   1a790:	pop	{r4, sl, fp, pc}
   1a794:	mov	r1, #0
   1a798:	strb	r1, [r0]
   1a79c:	strb	ip, [r0]
   1a7a0:	mov	r1, #1
   1a7a4:	strb	r1, [r0, #4]
   1a7a8:	mov	r0, r1
   1a7ac:	pop	{r4, sl, fp, pc}
   1a7b0:	mov	r1, #28
   1a7b4:	b	1a7c4 <__assert_fail@plt+0x9050>
   1a7b8:	tst	r2, #4
   1a7bc:	beq	1a79c <__assert_fail@plt+0x9028>
   1a7c0:	mov	r1, #30
   1a7c4:	strb	r1, [r0, #4]
   1a7c8:	mov	r1, #2
   1a7cc:	mov	r0, r1
   1a7d0:	pop	{r4, sl, fp, pc}
   1a7d4:	asr	r2, r1, #31
   1a7d8:	add	r2, r1, r2, lsr #27
   1a7dc:	asr	r2, r2, #5
   1a7e0:	ldr	ip, [r0, r2, lsl #2]
   1a7e4:	and	r1, r1, #31
   1a7e8:	mov	r3, #1
   1a7ec:	orr	r1, ip, r3, lsl r1
   1a7f0:	str	r1, [r0, r2, lsl #2]
   1a7f4:	bx	lr
   1a7f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a7fc:	add	fp, sp, #24
   1a800:	sub	sp, sp, #8
   1a804:	mov	r5, r3
   1a808:	mov	r8, r2
   1a80c:	mov	r6, r1
   1a810:	mov	r9, r0
   1a814:	ldr	r7, [r1, #40]	; 0x28
   1a818:	mov	r0, r1
   1a81c:	mov	r1, r7
   1a820:	bl	1b440 <__assert_fail@plt+0x9ccc>
   1a824:	cmp	r0, #2
   1a828:	blt	1a860 <__assert_fail@plt+0x90ec>
   1a82c:	mov	r4, r0
   1a830:	mov	r0, #1
   1a834:	str	r0, [r9]
   1a838:	mov	r0, r6
   1a83c:	mov	r1, r7
   1a840:	bl	191b4 <__assert_fail@plt+0x7a40>
   1a844:	str	r0, [r9, #4]
   1a848:	ldr	r0, [r6, #40]	; 0x28
   1a84c:	add	r0, r0, r4
   1a850:	str	r0, [r6, #40]	; 0x28
   1a854:	mov	r0, #0
   1a858:	sub	sp, fp, #24
   1a85c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a860:	ldr	r0, [fp, #12]
   1a864:	ldr	r2, [fp, #8]
   1a868:	add	r1, r7, r5
   1a86c:	str	r1, [r6, #40]	; 0x28
   1a870:	ldrb	r1, [r8, #4]
   1a874:	sub	r1, r1, #22
   1a878:	cmp	r1, #8
   1a87c:	bhi	1a8e8 <__assert_fail@plt+0x9174>
   1a880:	add	r3, pc, #0
   1a884:	ldr	pc, [r3, r1, lsl #2]
   1a888:	andeq	sl, r1, r4, asr #17
   1a88c:	andeq	sl, r1, r8, ror #17
   1a890:	andeq	sl, r1, r8, ror #17
   1a894:	andeq	sl, r1, r8, ror #17
   1a898:	andeq	sl, r1, ip, lsr #17
   1a89c:	andeq	sl, r1, r8, ror #17
   1a8a0:	andeq	sl, r1, ip, lsr #17
   1a8a4:	andeq	sl, r1, r8, ror #17
   1a8a8:	andeq	sl, r1, ip, lsr #17
   1a8ac:	mov	r0, r9
   1a8b0:	mov	r1, r6
   1a8b4:	mov	r2, r8
   1a8b8:	sub	sp, fp, #24
   1a8bc:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a8c0:	b	1b49c <__assert_fail@plt+0x9d28>
   1a8c4:	cmp	r0, #0
   1a8c8:	bne	1a8e8 <__assert_fail@plt+0x9174>
   1a8cc:	mov	r0, sp
   1a8d0:	mov	r1, r6
   1a8d4:	bl	1a660 <__assert_fail@plt+0x8eec>
   1a8d8:	ldrb	r1, [sp, #4]
   1a8dc:	mov	r0, #11
   1a8e0:	cmp	r1, #21
   1a8e4:	bne	1a8f8 <__assert_fail@plt+0x9184>
   1a8e8:	mov	r0, #0
   1a8ec:	str	r0, [r9]
   1a8f0:	ldrb	r1, [r8]
   1a8f4:	strb	r1, [r9, #4]
   1a8f8:	sub	sp, fp, #24
   1a8fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a900:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a904:	add	fp, sp, #28
   1a908:	sub	sp, sp, #12
   1a90c:	mov	sl, r0
   1a910:	ldr	r7, [r3]
   1a914:	mov	r0, #11
   1a918:	cmp	r7, #2
   1a91c:	cmpne	r7, #4
   1a920:	beq	1a938 <__assert_fail@plt+0x91c4>
   1a924:	ldr	r8, [fp, #8]
   1a928:	ldr	r5, [r8]
   1a92c:	cmp	r5, #2
   1a930:	cmpne	r5, #4
   1a934:	bne	1a940 <__assert_fail@plt+0x91cc>
   1a938:	sub	sp, fp, #28
   1a93c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a940:	mov	r6, r3
   1a944:	mov	r9, r2
   1a948:	mov	r4, r1
   1a94c:	cmp	r7, #3
   1a950:	bne	1a964 <__assert_fail@plt+0x91f0>
   1a954:	ldr	r0, [r6, #4]
   1a958:	bl	11624 <strlen@plt>
   1a95c:	cmp	r0, #1
   1a960:	bhi	1aaac <__assert_fail@plt+0x9338>
   1a964:	cmp	r5, #3
   1a968:	bne	1a97c <__assert_fail@plt+0x9208>
   1a96c:	ldr	r0, [r8, #4]
   1a970:	bl	11624 <strlen@plt>
   1a974:	cmp	r0, #1
   1a978:	bhi	1aaac <__assert_fail@plt+0x9338>
   1a97c:	cmp	r7, #3
   1a980:	beq	1a994 <__assert_fail@plt+0x9220>
   1a984:	mov	r0, #0
   1a988:	cmp	r7, #0
   1a98c:	ldrbeq	r0, [r6, #4]
   1a990:	b	1a99c <__assert_fail@plt+0x9228>
   1a994:	ldr	r0, [r6, #4]
   1a998:	ldrb	r0, [r0]
   1a99c:	stmib	sp, {r4, r9}
   1a9a0:	cmp	r5, #3
   1a9a4:	beq	1a9b8 <__assert_fail@plt+0x9244>
   1a9a8:	mov	r9, #0
   1a9ac:	cmp	r5, #0
   1a9b0:	ldrbeq	r9, [r8, #4]
   1a9b4:	b	1a9c0 <__assert_fail@plt+0x924c>
   1a9b8:	ldr	r1, [r8, #4]
   1a9bc:	ldrb	r9, [r1]
   1a9c0:	ldr	r4, [fp, #12]
   1a9c4:	cmp	r7, #3
   1a9c8:	cmpne	r7, #0
   1a9cc:	bne	1a9e0 <__assert_fail@plt+0x926c>
   1a9d0:	mov	r1, r4
   1a9d4:	bl	1b660 <__assert_fail@plt+0x9eec>
   1a9d8:	mov	r7, r0
   1a9dc:	b	1a9e4 <__assert_fail@plt+0x9270>
   1a9e0:	ldr	r7, [r6, #4]
   1a9e4:	ldr	r0, [r8]
   1a9e8:	cmp	r0, #3
   1a9ec:	cmpne	r0, #0
   1a9f0:	bne	1aa08 <__assert_fail@plt+0x9294>
   1a9f4:	mov	r0, r9
   1a9f8:	mov	r1, r4
   1a9fc:	bl	1b660 <__assert_fail@plt+0x9eec>
   1aa00:	mov	r6, r0
   1aa04:	b	1aa0c <__assert_fail@plt+0x9298>
   1aa08:	ldr	r6, [r8, #4]
   1aa0c:	ldr	r1, [sp, #8]
   1aa10:	ldr	r5, [sp, #4]
   1aa14:	mov	r0, #3
   1aa18:	cmn	r7, #1
   1aa1c:	cmnne	r6, #1
   1aa20:	beq	1a938 <__assert_fail@plt+0x91c4>
   1aa24:	ldr	r0, [fp, #16]
   1aa28:	tst	r0, #65536	; 0x10000
   1aa2c:	beq	1aa3c <__assert_fail@plt+0x92c8>
   1aa30:	cmp	r7, r6
   1aa34:	mov	r0, #11
   1aa38:	bhi	1a938 <__assert_fail@plt+0x91c4>
   1aa3c:	ldr	r0, [r4, #92]	; 0x5c
   1aa40:	cmp	r0, #2
   1aa44:	blt	1aa78 <__assert_fail@plt+0x9304>
   1aa48:	ldr	r0, [r5, #32]
   1aa4c:	ldr	r1, [r1]
   1aa50:	cmp	r1, r0
   1aa54:	beq	1aab8 <__assert_fail@plt+0x9344>
   1aa58:	ldr	r0, [r5, #4]
   1aa5c:	ldr	r1, [r5, #32]
   1aa60:	str	r7, [r0, r1, lsl #2]
   1aa64:	ldr	r0, [r5, #8]
   1aa68:	ldr	r1, [r5, #32]
   1aa6c:	add	r2, r1, #1
   1aa70:	str	r2, [r5, #32]
   1aa74:	str	r6, [r0, r1, lsl #2]
   1aa78:	mov	r5, #0
   1aa7c:	cmp	r7, r5
   1aa80:	cmpls	r5, r6
   1aa84:	bhi	1aa94 <__assert_fail@plt+0x9320>
   1aa88:	mov	r0, sl
   1aa8c:	mov	r1, r5
   1aa90:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1aa94:	add	r5, r5, #1
   1aa98:	cmp	r5, #256	; 0x100
   1aa9c:	bne	1aa7c <__assert_fail@plt+0x9308>
   1aaa0:	mov	r0, #0
   1aaa4:	sub	sp, fp, #28
   1aaa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aaac:	mov	r0, #3
   1aab0:	sub	sp, fp, #28
   1aab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aab8:	mov	r1, #1
   1aabc:	orr	r8, r1, r0, lsl #1
   1aac0:	lsl	r4, r8, #2
   1aac4:	ldr	r0, [r5, #4]
   1aac8:	mov	r1, r4
   1aacc:	bl	23e94 <__assert_fail@plt+0x12720>
   1aad0:	mov	r9, r0
   1aad4:	ldr	r0, [r5, #8]
   1aad8:	mov	r1, r4
   1aadc:	bl	23e94 <__assert_fail@plt+0x12720>
   1aae0:	mov	r4, r0
   1aae4:	cmp	r9, #0
   1aae8:	cmpne	r4, #0
   1aaec:	bne	1ab0c <__assert_fail@plt+0x9398>
   1aaf0:	mov	r0, r9
   1aaf4:	bl	13f04 <__assert_fail@plt+0x2790>
   1aaf8:	mov	r0, r4
   1aafc:	bl	13f04 <__assert_fail@plt+0x2790>
   1ab00:	mov	r0, #12
   1ab04:	sub	sp, fp, #28
   1ab08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab0c:	ldr	r5, [sp, #4]
   1ab10:	str	r9, [r5, #4]
   1ab14:	str	r4, [r5, #8]
   1ab18:	ldr	r0, [sp, #8]
   1ab1c:	str	r8, [r0]
   1ab20:	b	1aa58 <__assert_fail@plt+0x92e4>
   1ab24:	push	{r4, r5, fp, lr}
   1ab28:	add	fp, sp, #8
   1ab2c:	mov	r5, r1
   1ab30:	mov	r4, r0
   1ab34:	mov	r0, r1
   1ab38:	bl	11624 <strlen@plt>
   1ab3c:	cmp	r0, #1
   1ab40:	movne	r0, #3
   1ab44:	popne	{r4, r5, fp, pc}
   1ab48:	ldrb	r1, [r5]
   1ab4c:	mov	r0, r4
   1ab50:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1ab54:	mov	r0, #0
   1ab58:	pop	{r4, r5, fp, pc}
   1ab5c:	push	{r4, r5, fp, lr}
   1ab60:	add	fp, sp, #8
   1ab64:	mov	r5, r1
   1ab68:	mov	r4, r0
   1ab6c:	mov	r0, r1
   1ab70:	bl	11624 <strlen@plt>
   1ab74:	cmp	r0, #1
   1ab78:	movne	r0, #3
   1ab7c:	popne	{r4, r5, fp, pc}
   1ab80:	ldrb	r1, [r5]
   1ab84:	mov	r0, r4
   1ab88:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1ab8c:	mov	r0, #0
   1ab90:	pop	{r4, r5, fp, pc}
   1ab94:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ab98:	add	fp, sp, #24
   1ab9c:	mov	r5, r3
   1aba0:	mov	r7, r2
   1aba4:	mov	r4, r1
   1aba8:	mov	r8, r0
   1abac:	ldr	r6, [fp, #8]
   1abb0:	ldrb	r0, [fp, #14]
   1abb4:	tst	r0, #64	; 0x40
   1abb8:	beq	1abf4 <__assert_fail@plt+0x9480>
   1abbc:	movw	r1, #22850	; 0x5942
   1abc0:	movt	r1, #2
   1abc4:	mov	r0, r6
   1abc8:	bl	11420 <strcmp@plt>
   1abcc:	cmp	r0, #0
   1abd0:	beq	1abec <__assert_fail@plt+0x9478>
   1abd4:	movw	r1, #22856	; 0x5948
   1abd8:	movt	r1, #2
   1abdc:	mov	r0, r6
   1abe0:	bl	11420 <strcmp@plt>
   1abe4:	cmp	r0, #0
   1abe8:	bne	1abf4 <__assert_fail@plt+0x9480>
   1abec:	movw	r6, #22862	; 0x594e
   1abf0:	movt	r6, #2
   1abf4:	ldr	r0, [r7, #36]	; 0x24
   1abf8:	ldr	r1, [r5]
   1abfc:	cmp	r1, r0
   1ac00:	beq	1b110 <__assert_fail@plt+0x999c>
   1ac04:	mov	r0, r6
   1ac08:	bl	113f0 <wctype@plt>
   1ac0c:	ldr	r1, [r7, #12]
   1ac10:	ldr	r2, [r7, #36]	; 0x24
   1ac14:	add	r3, r2, #1
   1ac18:	str	r3, [r7, #36]	; 0x24
   1ac1c:	str	r0, [r1, r2, lsl #2]
   1ac20:	movw	r1, #22838	; 0x5936
   1ac24:	movt	r1, #2
   1ac28:	mov	r0, r6
   1ac2c:	bl	11420 <strcmp@plt>
   1ac30:	cmp	r0, #0
   1ac34:	beq	1ad98 <__assert_fail@plt+0x9624>
   1ac38:	movw	r1, #22868	; 0x5954
   1ac3c:	movt	r1, #2
   1ac40:	mov	r0, r6
   1ac44:	bl	11420 <strcmp@plt>
   1ac48:	cmp	r0, #0
   1ac4c:	beq	1ade8 <__assert_fail@plt+0x9674>
   1ac50:	movw	r1, #22856	; 0x5948
   1ac54:	movt	r1, #2
   1ac58:	mov	r0, r6
   1ac5c:	bl	11420 <strcmp@plt>
   1ac60:	cmp	r0, #0
   1ac64:	beq	1ae38 <__assert_fail@plt+0x96c4>
   1ac68:	movw	r1, #22844	; 0x593c
   1ac6c:	movt	r1, #2
   1ac70:	mov	r0, r6
   1ac74:	bl	11420 <strcmp@plt>
   1ac78:	cmp	r0, #0
   1ac7c:	beq	1ae8c <__assert_fail@plt+0x9718>
   1ac80:	movw	r1, #22862	; 0x594e
   1ac84:	movt	r1, #2
   1ac88:	mov	r0, r6
   1ac8c:	bl	11420 <strcmp@plt>
   1ac90:	cmp	r0, #0
   1ac94:	beq	1aee0 <__assert_fail@plt+0x976c>
   1ac98:	movw	r1, #22899	; 0x5973
   1ac9c:	movt	r1, #2
   1aca0:	mov	r0, r6
   1aca4:	bl	11420 <strcmp@plt>
   1aca8:	cmp	r0, #0
   1acac:	beq	1af34 <__assert_fail@plt+0x97c0>
   1acb0:	movw	r1, #22874	; 0x595a
   1acb4:	movt	r1, #2
   1acb8:	mov	r0, r6
   1acbc:	bl	11420 <strcmp@plt>
   1acc0:	cmp	r0, #0
   1acc4:	beq	1af88 <__assert_fail@plt+0x9814>
   1acc8:	movw	r1, #22850	; 0x5942
   1accc:	movt	r1, #2
   1acd0:	mov	r0, r6
   1acd4:	bl	11420 <strcmp@plt>
   1acd8:	cmp	r0, #0
   1acdc:	beq	1afd8 <__assert_fail@plt+0x9864>
   1ace0:	movw	r1, #22880	; 0x5960
   1ace4:	movt	r1, #2
   1ace8:	mov	r0, r6
   1acec:	bl	11420 <strcmp@plt>
   1acf0:	cmp	r0, #0
   1acf4:	beq	1b028 <__assert_fail@plt+0x98b4>
   1acf8:	movw	r1, #22886	; 0x5966
   1acfc:	movt	r1, #2
   1ad00:	mov	r0, r6
   1ad04:	bl	11420 <strcmp@plt>
   1ad08:	cmp	r0, #0
   1ad0c:	beq	1b074 <__assert_fail@plt+0x9900>
   1ad10:	movw	r1, #22892	; 0x596c
   1ad14:	movt	r1, #2
   1ad18:	mov	r0, r6
   1ad1c:	bl	11420 <strcmp@plt>
   1ad20:	cmp	r0, #0
   1ad24:	beq	1b0c4 <__assert_fail@plt+0x9950>
   1ad28:	movw	r1, #22898	; 0x5972
   1ad2c:	movt	r1, #2
   1ad30:	mov	r0, r6
   1ad34:	bl	11420 <strcmp@plt>
   1ad38:	mov	r1, r0
   1ad3c:	mov	r0, #4
   1ad40:	cmp	r1, #0
   1ad44:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ad48:	bl	1160c <__ctype_b_loc@plt>
   1ad4c:	mov	r6, r0
   1ad50:	cmp	r8, #0
   1ad54:	bne	1b34c <__assert_fail@plt+0x9bd8>
   1ad58:	mov	r7, #0
   1ad5c:	mov	r5, #0
   1ad60:	ldr	r0, [r6]
   1ad64:	add	r0, r0, r7
   1ad68:	ldrb	r0, [r0, #1]
   1ad6c:	tst	r0, #16
   1ad70:	beq	1ad80 <__assert_fail@plt+0x960c>
   1ad74:	mov	r0, r4
   1ad78:	mov	r1, r5
   1ad7c:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1ad80:	add	r7, r7, #2
   1ad84:	add	r5, r5, #1
   1ad88:	mov	r0, #0
   1ad8c:	cmp	r5, #256	; 0x100
   1ad90:	bne	1ad60 <__assert_fail@plt+0x95ec>
   1ad94:	b	1b10c <__assert_fail@plt+0x9998>
   1ad98:	bl	1160c <__ctype_b_loc@plt>
   1ad9c:	mov	r6, r0
   1ada0:	cmp	r8, #0
   1ada4:	bne	1b13c <__assert_fail@plt+0x99c8>
   1ada8:	mov	r7, #0
   1adac:	mov	r5, #0
   1adb0:	b	1adc8 <__assert_fail@plt+0x9654>
   1adb4:	add	r7, r7, #2
   1adb8:	add	r5, r5, #1
   1adbc:	cmp	r5, #256	; 0x100
   1adc0:	moveq	r0, #0
   1adc4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1adc8:	ldr	r0, [r6]
   1adcc:	ldrb	r0, [r0, r7]
   1add0:	tst	r0, #8
   1add4:	beq	1adb4 <__assert_fail@plt+0x9640>
   1add8:	mov	r0, r4
   1addc:	mov	r1, r5
   1ade0:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1ade4:	b	1adb4 <__assert_fail@plt+0x9640>
   1ade8:	bl	1160c <__ctype_b_loc@plt>
   1adec:	mov	r6, r0
   1adf0:	cmp	r8, #0
   1adf4:	bne	1b174 <__assert_fail@plt+0x9a00>
   1adf8:	mov	r7, #0
   1adfc:	mov	r5, #0
   1ae00:	b	1ae18 <__assert_fail@plt+0x96a4>
   1ae04:	add	r7, r7, #2
   1ae08:	add	r5, r5, #1
   1ae0c:	cmp	r5, #256	; 0x100
   1ae10:	moveq	r0, #0
   1ae14:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ae18:	ldr	r0, [r6]
   1ae1c:	ldrb	r0, [r0, r7]
   1ae20:	tst	r0, #2
   1ae24:	beq	1ae04 <__assert_fail@plt+0x9690>
   1ae28:	mov	r0, r4
   1ae2c:	mov	r1, r5
   1ae30:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1ae34:	b	1ae04 <__assert_fail@plt+0x9690>
   1ae38:	bl	1160c <__ctype_b_loc@plt>
   1ae3c:	mov	r6, r0
   1ae40:	cmp	r8, #0
   1ae44:	bne	1b1ac <__assert_fail@plt+0x9a38>
   1ae48:	mov	r7, #0
   1ae4c:	mov	r5, #0
   1ae50:	b	1ae68 <__assert_fail@plt+0x96f4>
   1ae54:	add	r7, r7, #2
   1ae58:	add	r5, r5, #1
   1ae5c:	cmp	r5, #256	; 0x100
   1ae60:	moveq	r0, #0
   1ae64:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ae68:	ldr	r0, [r6]
   1ae6c:	add	r0, r0, r7
   1ae70:	ldrb	r0, [r0, #1]
   1ae74:	tst	r0, #2
   1ae78:	beq	1ae54 <__assert_fail@plt+0x96e0>
   1ae7c:	mov	r0, r4
   1ae80:	mov	r1, r5
   1ae84:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1ae88:	b	1ae54 <__assert_fail@plt+0x96e0>
   1ae8c:	bl	1160c <__ctype_b_loc@plt>
   1ae90:	mov	r6, r0
   1ae94:	cmp	r8, #0
   1ae98:	bne	1b1e8 <__assert_fail@plt+0x9a74>
   1ae9c:	mov	r7, #0
   1aea0:	mov	r5, #0
   1aea4:	b	1aebc <__assert_fail@plt+0x9748>
   1aea8:	add	r7, r7, #2
   1aeac:	add	r5, r5, #1
   1aeb0:	cmp	r5, #256	; 0x100
   1aeb4:	moveq	r0, #0
   1aeb8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1aebc:	ldr	r0, [r6]
   1aec0:	add	r0, r0, r7
   1aec4:	ldrb	r0, [r0, #1]
   1aec8:	tst	r0, #32
   1aecc:	beq	1aea8 <__assert_fail@plt+0x9734>
   1aed0:	mov	r0, r4
   1aed4:	mov	r1, r5
   1aed8:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1aedc:	b	1aea8 <__assert_fail@plt+0x9734>
   1aee0:	bl	1160c <__ctype_b_loc@plt>
   1aee4:	mov	r6, r0
   1aee8:	cmp	r8, #0
   1aeec:	bne	1b224 <__assert_fail@plt+0x9ab0>
   1aef0:	mov	r7, #0
   1aef4:	mov	r5, #0
   1aef8:	b	1af10 <__assert_fail@plt+0x979c>
   1aefc:	add	r7, r7, #2
   1af00:	add	r5, r5, #1
   1af04:	cmp	r5, #256	; 0x100
   1af08:	moveq	r0, #0
   1af0c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1af10:	ldr	r0, [r6]
   1af14:	add	r0, r0, r7
   1af18:	ldrb	r0, [r0, #1]
   1af1c:	tst	r0, #4
   1af20:	beq	1aefc <__assert_fail@plt+0x9788>
   1af24:	mov	r0, r4
   1af28:	mov	r1, r5
   1af2c:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1af30:	b	1aefc <__assert_fail@plt+0x9788>
   1af34:	bl	1160c <__ctype_b_loc@plt>
   1af38:	mov	r6, r0
   1af3c:	cmp	r8, #0
   1af40:	bne	1b260 <__assert_fail@plt+0x9aec>
   1af44:	mov	r7, #0
   1af48:	mov	r5, #0
   1af4c:	b	1af64 <__assert_fail@plt+0x97f0>
   1af50:	add	r7, r7, #2
   1af54:	add	r5, r5, #1
   1af58:	cmp	r5, #256	; 0x100
   1af5c:	moveq	r0, #0
   1af60:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1af64:	ldr	r0, [r6]
   1af68:	add	r0, r0, r7
   1af6c:	ldrb	r0, [r0, #1]
   1af70:	tst	r0, #8
   1af74:	beq	1af50 <__assert_fail@plt+0x97dc>
   1af78:	mov	r0, r4
   1af7c:	mov	r1, r5
   1af80:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1af84:	b	1af50 <__assert_fail@plt+0x97dc>
   1af88:	bl	1160c <__ctype_b_loc@plt>
   1af8c:	mov	r6, r0
   1af90:	cmp	r8, #0
   1af94:	bne	1b29c <__assert_fail@plt+0x9b28>
   1af98:	mov	r7, #0
   1af9c:	mov	r5, #0
   1afa0:	ldr	r0, [r6]
   1afa4:	add	r0, r0, r7
   1afa8:	ldrb	r0, [r0, #1]
   1afac:	tst	r0, #64	; 0x40
   1afb0:	beq	1afc0 <__assert_fail@plt+0x984c>
   1afb4:	mov	r0, r4
   1afb8:	mov	r1, r5
   1afbc:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1afc0:	add	r7, r7, #2
   1afc4:	add	r5, r5, #1
   1afc8:	mov	r0, #0
   1afcc:	cmp	r5, #256	; 0x100
   1afd0:	bne	1afa0 <__assert_fail@plt+0x982c>
   1afd4:	b	1b10c <__assert_fail@plt+0x9998>
   1afd8:	bl	1160c <__ctype_b_loc@plt>
   1afdc:	mov	r6, r0
   1afe0:	cmp	r8, #0
   1afe4:	bne	1b2d8 <__assert_fail@plt+0x9b64>
   1afe8:	mov	r7, #0
   1afec:	mov	r5, #0
   1aff0:	ldr	r0, [r6]
   1aff4:	add	r0, r0, r7
   1aff8:	ldrb	r0, [r0, #1]
   1affc:	tst	r0, #1
   1b000:	beq	1b010 <__assert_fail@plt+0x989c>
   1b004:	mov	r0, r4
   1b008:	mov	r1, r5
   1b00c:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1b010:	add	r7, r7, #2
   1b014:	add	r5, r5, #1
   1b018:	mov	r0, #0
   1b01c:	cmp	r5, #256	; 0x100
   1b020:	bne	1aff0 <__assert_fail@plt+0x987c>
   1b024:	b	1b10c <__assert_fail@plt+0x9998>
   1b028:	bl	1160c <__ctype_b_loc@plt>
   1b02c:	mov	r6, r0
   1b030:	cmp	r8, #0
   1b034:	bne	1b314 <__assert_fail@plt+0x9ba0>
   1b038:	mov	r7, #0
   1b03c:	mov	r5, #0
   1b040:	ldr	r0, [r6]
   1b044:	ldrb	r0, [r0, r7]
   1b048:	tst	r0, #1
   1b04c:	beq	1b05c <__assert_fail@plt+0x98e8>
   1b050:	mov	r0, r4
   1b054:	mov	r1, r5
   1b058:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1b05c:	add	r7, r7, #2
   1b060:	add	r5, r5, #1
   1b064:	mov	r0, #0
   1b068:	cmp	r5, #256	; 0x100
   1b06c:	bne	1b040 <__assert_fail@plt+0x98cc>
   1b070:	b	1b10c <__assert_fail@plt+0x9998>
   1b074:	bl	1160c <__ctype_b_loc@plt>
   1b078:	mov	r6, r0
   1b07c:	cmp	r8, #0
   1b080:	bne	1b388 <__assert_fail@plt+0x9c14>
   1b084:	mov	r7, #0
   1b088:	mov	r5, #0
   1b08c:	ldr	r0, [r6]
   1b090:	add	r0, r0, r7
   1b094:	ldrsh	r0, [r0]
   1b098:	cmn	r0, #1
   1b09c:	bgt	1b0ac <__assert_fail@plt+0x9938>
   1b0a0:	mov	r0, r4
   1b0a4:	mov	r1, r5
   1b0a8:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1b0ac:	add	r7, r7, #2
   1b0b0:	add	r5, r5, #1
   1b0b4:	mov	r0, #0
   1b0b8:	cmp	r5, #256	; 0x100
   1b0bc:	bne	1b08c <__assert_fail@plt+0x9918>
   1b0c0:	b	1b10c <__assert_fail@plt+0x9998>
   1b0c4:	bl	1160c <__ctype_b_loc@plt>
   1b0c8:	mov	r6, r0
   1b0cc:	cmp	r8, #0
   1b0d0:	bne	1b3c4 <__assert_fail@plt+0x9c50>
   1b0d4:	mov	r7, #0
   1b0d8:	mov	r5, #0
   1b0dc:	ldr	r0, [r6]
   1b0e0:	ldrb	r0, [r0, r7]
   1b0e4:	tst	r0, #4
   1b0e8:	beq	1b0f8 <__assert_fail@plt+0x9984>
   1b0ec:	mov	r0, r4
   1b0f0:	mov	r1, r5
   1b0f4:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1b0f8:	add	r7, r7, #2
   1b0fc:	add	r5, r5, #1
   1b100:	mov	r0, #0
   1b104:	cmp	r5, #256	; 0x100
   1b108:	bne	1b0dc <__assert_fail@plt+0x9968>
   1b10c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b110:	mov	r1, #1
   1b114:	orr	r9, r1, r0, lsl #1
   1b118:	lsl	r1, r9, #2
   1b11c:	ldr	r0, [r7, #12]
   1b120:	bl	23e94 <__assert_fail@plt+0x12720>
   1b124:	cmp	r0, #0
   1b128:	moveq	r0, #12
   1b12c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b130:	str	r0, [r7, #12]
   1b134:	str	r9, [r5]
   1b138:	b	1ac04 <__assert_fail@plt+0x9490>
   1b13c:	mov	r5, #0
   1b140:	ldr	r0, [r6]
   1b144:	ldrb	r0, [r0, r5]
   1b148:	tst	r0, #8
   1b14c:	beq	1b15c <__assert_fail@plt+0x99e8>
   1b150:	ldrb	r1, [r8]
   1b154:	mov	r0, r4
   1b158:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1b15c:	add	r8, r8, #1
   1b160:	add	r5, r5, #2
   1b164:	mov	r0, #0
   1b168:	cmp	r5, #512	; 0x200
   1b16c:	bne	1b140 <__assert_fail@plt+0x99cc>
   1b170:	b	1b10c <__assert_fail@plt+0x9998>
   1b174:	mov	r5, #0
   1b178:	ldr	r0, [r6]
   1b17c:	ldrb	r0, [r0, r5]
   1b180:	tst	r0, #2
   1b184:	beq	1b194 <__assert_fail@plt+0x9a20>
   1b188:	ldrb	r1, [r8]
   1b18c:	mov	r0, r4
   1b190:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1b194:	add	r8, r8, #1
   1b198:	add	r5, r5, #2
   1b19c:	mov	r0, #0
   1b1a0:	cmp	r5, #512	; 0x200
   1b1a4:	bne	1b178 <__assert_fail@plt+0x9a04>
   1b1a8:	b	1b10c <__assert_fail@plt+0x9998>
   1b1ac:	mov	r5, #0
   1b1b0:	ldr	r0, [r6]
   1b1b4:	add	r0, r0, r5
   1b1b8:	ldrb	r0, [r0, #1]
   1b1bc:	tst	r0, #2
   1b1c0:	beq	1b1d0 <__assert_fail@plt+0x9a5c>
   1b1c4:	ldrb	r1, [r8]
   1b1c8:	mov	r0, r4
   1b1cc:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1b1d0:	add	r8, r8, #1
   1b1d4:	add	r5, r5, #2
   1b1d8:	mov	r0, #0
   1b1dc:	cmp	r5, #512	; 0x200
   1b1e0:	bne	1b1b0 <__assert_fail@plt+0x9a3c>
   1b1e4:	b	1b10c <__assert_fail@plt+0x9998>
   1b1e8:	mov	r5, #0
   1b1ec:	ldr	r0, [r6]
   1b1f0:	add	r0, r0, r5
   1b1f4:	ldrb	r0, [r0, #1]
   1b1f8:	tst	r0, #32
   1b1fc:	beq	1b20c <__assert_fail@plt+0x9a98>
   1b200:	ldrb	r1, [r8]
   1b204:	mov	r0, r4
   1b208:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1b20c:	add	r8, r8, #1
   1b210:	add	r5, r5, #2
   1b214:	mov	r0, #0
   1b218:	cmp	r5, #512	; 0x200
   1b21c:	bne	1b1ec <__assert_fail@plt+0x9a78>
   1b220:	b	1b10c <__assert_fail@plt+0x9998>
   1b224:	mov	r5, #0
   1b228:	ldr	r0, [r6]
   1b22c:	add	r0, r0, r5
   1b230:	ldrb	r0, [r0, #1]
   1b234:	tst	r0, #4
   1b238:	beq	1b248 <__assert_fail@plt+0x9ad4>
   1b23c:	ldrb	r1, [r8]
   1b240:	mov	r0, r4
   1b244:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1b248:	add	r8, r8, #1
   1b24c:	add	r5, r5, #2
   1b250:	mov	r0, #0
   1b254:	cmp	r5, #512	; 0x200
   1b258:	bne	1b228 <__assert_fail@plt+0x9ab4>
   1b25c:	b	1b10c <__assert_fail@plt+0x9998>
   1b260:	mov	r5, #0
   1b264:	ldr	r0, [r6]
   1b268:	add	r0, r0, r5
   1b26c:	ldrb	r0, [r0, #1]
   1b270:	tst	r0, #8
   1b274:	beq	1b284 <__assert_fail@plt+0x9b10>
   1b278:	ldrb	r1, [r8]
   1b27c:	mov	r0, r4
   1b280:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1b284:	add	r8, r8, #1
   1b288:	add	r5, r5, #2
   1b28c:	mov	r0, #0
   1b290:	cmp	r5, #512	; 0x200
   1b294:	bne	1b264 <__assert_fail@plt+0x9af0>
   1b298:	b	1b10c <__assert_fail@plt+0x9998>
   1b29c:	mov	r5, #0
   1b2a0:	ldr	r0, [r6]
   1b2a4:	add	r0, r0, r5
   1b2a8:	ldrb	r0, [r0, #1]
   1b2ac:	tst	r0, #64	; 0x40
   1b2b0:	beq	1b2c0 <__assert_fail@plt+0x9b4c>
   1b2b4:	ldrb	r1, [r8]
   1b2b8:	mov	r0, r4
   1b2bc:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1b2c0:	add	r8, r8, #1
   1b2c4:	add	r5, r5, #2
   1b2c8:	mov	r0, #0
   1b2cc:	cmp	r5, #512	; 0x200
   1b2d0:	bne	1b2a0 <__assert_fail@plt+0x9b2c>
   1b2d4:	b	1b10c <__assert_fail@plt+0x9998>
   1b2d8:	mov	r5, #0
   1b2dc:	ldr	r0, [r6]
   1b2e0:	add	r0, r0, r5
   1b2e4:	ldrb	r0, [r0, #1]
   1b2e8:	tst	r0, #1
   1b2ec:	beq	1b2fc <__assert_fail@plt+0x9b88>
   1b2f0:	ldrb	r1, [r8]
   1b2f4:	mov	r0, r4
   1b2f8:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1b2fc:	add	r8, r8, #1
   1b300:	add	r5, r5, #2
   1b304:	mov	r0, #0
   1b308:	cmp	r5, #512	; 0x200
   1b30c:	bne	1b2dc <__assert_fail@plt+0x9b68>
   1b310:	b	1b10c <__assert_fail@plt+0x9998>
   1b314:	mov	r5, #0
   1b318:	ldr	r0, [r6]
   1b31c:	ldrb	r0, [r0, r5]
   1b320:	tst	r0, #1
   1b324:	beq	1b334 <__assert_fail@plt+0x9bc0>
   1b328:	ldrb	r1, [r8]
   1b32c:	mov	r0, r4
   1b330:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1b334:	add	r8, r8, #1
   1b338:	add	r5, r5, #2
   1b33c:	mov	r0, #0
   1b340:	cmp	r5, #512	; 0x200
   1b344:	bne	1b318 <__assert_fail@plt+0x9ba4>
   1b348:	b	1b10c <__assert_fail@plt+0x9998>
   1b34c:	mov	r5, #0
   1b350:	ldr	r0, [r6]
   1b354:	add	r0, r0, r5
   1b358:	ldrb	r0, [r0, #1]
   1b35c:	tst	r0, #16
   1b360:	beq	1b370 <__assert_fail@plt+0x9bfc>
   1b364:	ldrb	r1, [r8]
   1b368:	mov	r0, r4
   1b36c:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1b370:	add	r8, r8, #1
   1b374:	add	r5, r5, #2
   1b378:	mov	r0, #0
   1b37c:	cmp	r5, #512	; 0x200
   1b380:	bne	1b350 <__assert_fail@plt+0x9bdc>
   1b384:	b	1b10c <__assert_fail@plt+0x9998>
   1b388:	mov	r5, #0
   1b38c:	ldr	r0, [r6]
   1b390:	add	r0, r0, r5
   1b394:	ldrsh	r0, [r0]
   1b398:	cmn	r0, #1
   1b39c:	bgt	1b3ac <__assert_fail@plt+0x9c38>
   1b3a0:	ldrb	r1, [r8]
   1b3a4:	mov	r0, r4
   1b3a8:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1b3ac:	add	r8, r8, #1
   1b3b0:	add	r5, r5, #2
   1b3b4:	mov	r0, #0
   1b3b8:	cmp	r5, #512	; 0x200
   1b3bc:	bne	1b38c <__assert_fail@plt+0x9c18>
   1b3c0:	b	1b10c <__assert_fail@plt+0x9998>
   1b3c4:	mov	r5, #0
   1b3c8:	ldr	r0, [r6]
   1b3cc:	ldrb	r0, [r0, r5]
   1b3d0:	tst	r0, #4
   1b3d4:	beq	1b3e4 <__assert_fail@plt+0x9c70>
   1b3d8:	ldrb	r1, [r8]
   1b3dc:	mov	r0, r4
   1b3e0:	bl	1a7d4 <__assert_fail@plt+0x9060>
   1b3e4:	add	r8, r8, #1
   1b3e8:	add	r5, r5, #2
   1b3ec:	mov	r0, #0
   1b3f0:	cmp	r5, #512	; 0x200
   1b3f4:	bne	1b3c8 <__assert_fail@plt+0x9c54>
   1b3f8:	b	1b10c <__assert_fail@plt+0x9998>
   1b3fc:	mov	r1, #0
   1b400:	ldr	r2, [r0, r1, lsl #2]
   1b404:	mvn	r2, r2
   1b408:	str	r2, [r0, r1, lsl #2]
   1b40c:	add	r1, r1, #1
   1b410:	cmp	r1, #8
   1b414:	bne	1b400 <__assert_fail@plt+0x9c8c>
   1b418:	bx	lr
   1b41c:	mov	r2, #0
   1b420:	ldr	ip, [r1, r2, lsl #2]
   1b424:	ldr	r3, [r0, r2, lsl #2]
   1b428:	and	r3, r3, ip
   1b42c:	str	r3, [r0, r2, lsl #2]
   1b430:	add	r2, r2, #1
   1b434:	cmp	r2, #8
   1b438:	bne	1b420 <__assert_fail@plt+0x9cac>
   1b43c:	bx	lr
   1b440:	push	{fp, lr}
   1b444:	mov	fp, sp
   1b448:	mov	lr, r0
   1b44c:	ldr	r3, [r0, #80]	; 0x50
   1b450:	mov	r0, #1
   1b454:	cmp	r3, #1
   1b458:	beq	1b498 <__assert_fail@plt+0x9d24>
   1b45c:	ldr	ip, [lr, #28]
   1b460:	add	r3, r1, #1
   1b464:	cmp	r3, ip
   1b468:	bge	1b498 <__assert_fail@plt+0x9d24>
   1b46c:	ldr	r0, [lr, #8]
   1b470:	add	ip, r0, r1, lsl #2
   1b474:	mov	r0, #1
   1b478:	ldr	r3, [ip, r0, lsl #2]
   1b47c:	cmn	r3, #1
   1b480:	popne	{fp, pc}
   1b484:	add	r0, r0, #1
   1b488:	add	r3, r1, r0
   1b48c:	ldr	r2, [lr, #28]
   1b490:	cmp	r3, r2
   1b494:	blt	1b478 <__assert_fail@plt+0x9d04>
   1b498:	pop	{fp, pc}
   1b49c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b4a0:	add	fp, sp, #24
   1b4a4:	mov	r7, r1
   1b4a8:	mov	r9, r0
   1b4ac:	ldr	r0, [r1, #40]	; 0x28
   1b4b0:	ldr	r1, [r1, #56]	; 0x38
   1b4b4:	mov	r8, #7
   1b4b8:	cmp	r1, r0
   1b4bc:	ble	1b584 <__assert_fail@plt+0x9e10>
   1b4c0:	mov	r6, r2
   1b4c4:	ldrb	r5, [r2]
   1b4c8:	mov	r4, #0
   1b4cc:	ldrb	r0, [r6, #4]
   1b4d0:	cmp	r0, #30
   1b4d4:	bne	1b4e4 <__assert_fail@plt+0x9d70>
   1b4d8:	mov	r0, r7
   1b4dc:	bl	1b58c <__assert_fail@plt+0x9e18>
   1b4e0:	b	1b4f8 <__assert_fail@plt+0x9d84>
   1b4e4:	ldr	r0, [r7, #4]
   1b4e8:	ldr	r1, [r7, #40]	; 0x28
   1b4ec:	add	r2, r1, #1
   1b4f0:	str	r2, [r7, #40]	; 0x28
   1b4f4:	ldrb	r0, [r0, r1]
   1b4f8:	ldr	r1, [r7, #40]	; 0x28
   1b4fc:	ldr	r2, [r7, #56]	; 0x38
   1b500:	cmp	r2, r1
   1b504:	ble	1b584 <__assert_fail@plt+0x9e10>
   1b508:	cmp	r0, r5
   1b50c:	bne	1b520 <__assert_fail@plt+0x9dac>
   1b510:	ldr	r2, [r7, #4]
   1b514:	ldrb	r2, [r2, r1]
   1b518:	cmp	r2, #93	; 0x5d
   1b51c:	beq	1b53c <__assert_fail@plt+0x9dc8>
   1b520:	ldr	r1, [r9, #4]
   1b524:	strb	r0, [r1, r4]
   1b528:	add	r0, r4, #1
   1b52c:	cmp	r4, #30
   1b530:	mov	r4, r0
   1b534:	bls	1b4cc <__assert_fail@plt+0x9d58>
   1b538:	b	1b584 <__assert_fail@plt+0x9e10>
   1b53c:	add	r0, r1, #1
   1b540:	str	r0, [r7, #40]	; 0x28
   1b544:	ldr	r0, [r9, #4]
   1b548:	mov	r8, #0
   1b54c:	strb	r8, [r0, r4]
   1b550:	ldrb	r0, [r6, #4]
   1b554:	cmp	r0, #30
   1b558:	beq	1b574 <__assert_fail@plt+0x9e00>
   1b55c:	cmp	r0, #28
   1b560:	beq	1b57c <__assert_fail@plt+0x9e08>
   1b564:	cmp	r0, #26
   1b568:	bne	1b584 <__assert_fail@plt+0x9e10>
   1b56c:	mov	r0, #3
   1b570:	b	1b580 <__assert_fail@plt+0x9e0c>
   1b574:	mov	r0, #4
   1b578:	b	1b580 <__assert_fail@plt+0x9e0c>
   1b57c:	mov	r0, #2
   1b580:	str	r0, [r9]
   1b584:	mov	r0, r8
   1b588:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b58c:	push	{r4, r5, r6, sl, fp, lr}
   1b590:	add	fp, sp, #16
   1b594:	mov	r4, r0
   1b598:	ldrb	r0, [r0, #75]	; 0x4b
   1b59c:	cmp	r0, #0
   1b5a0:	bne	1b5c0 <__assert_fail@plt+0x9e4c>
   1b5a4:	ldr	r0, [r4, #4]
   1b5a8:	ldr	r1, [r4, #40]	; 0x28
   1b5ac:	add	r2, r1, #1
   1b5b0:	str	r2, [r4, #40]	; 0x28
   1b5b4:	ldrb	r6, [r0, r1]
   1b5b8:	uxtb	r0, r6
   1b5bc:	pop	{r4, r5, r6, sl, fp, pc}
   1b5c0:	ldrb	r0, [r4, #76]	; 0x4c
   1b5c4:	cmp	r0, #0
   1b5c8:	beq	1b62c <__assert_fail@plt+0x9eb8>
   1b5cc:	ldr	r0, [r4, #28]
   1b5d0:	ldr	r5, [r4, #40]	; 0x28
   1b5d4:	cmp	r5, r0
   1b5d8:	beq	1b5ec <__assert_fail@plt+0x9e78>
   1b5dc:	ldr	r0, [r4, #8]
   1b5e0:	ldr	r0, [r0, r5, lsl #2]
   1b5e4:	cmn	r0, #1
   1b5e8:	beq	1b648 <__assert_fail@plt+0x9ed4>
   1b5ec:	ldr	r0, [r4]
   1b5f0:	ldr	r1, [r4, #12]
   1b5f4:	ldr	r2, [r4, #24]
   1b5f8:	ldr	r1, [r1, r5, lsl #2]
   1b5fc:	add	r1, r2, r1
   1b600:	add	r0, r0, r1
   1b604:	ldrsb	r6, [r0]
   1b608:	cmn	r6, #1
   1b60c:	ble	1b648 <__assert_fail@plt+0x9ed4>
   1b610:	mov	r0, r4
   1b614:	mov	r1, r5
   1b618:	bl	1b440 <__assert_fail@plt+0x9ccc>
   1b61c:	add	r0, r0, r5
   1b620:	str	r0, [r4, #40]	; 0x28
   1b624:	uxtb	r0, r6
   1b628:	pop	{r4, r5, r6, sl, fp, pc}
   1b62c:	ldr	r0, [r4]
   1b630:	ldr	r1, [r4, #24]
   1b634:	ldr	r2, [r4, #40]	; 0x28
   1b638:	add	r3, r2, #1
   1b63c:	str	r3, [r4, #40]	; 0x28
   1b640:	add	r1, r2, r1
   1b644:	b	1b5b4 <__assert_fail@plt+0x9e40>
   1b648:	add	r0, r5, #1
   1b64c:	str	r0, [r4, #40]	; 0x28
   1b650:	ldr	r0, [r4, #4]
   1b654:	ldrb	r6, [r0, r5]
   1b658:	uxtb	r0, r6
   1b65c:	pop	{r4, r5, r6, sl, fp, pc}
   1b660:	ldr	r1, [r1, #92]	; 0x5c
   1b664:	cmp	r1, #2
   1b668:	bxlt	lr
   1b66c:	b	11678 <btowc@plt>
   1b670:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b674:	add	fp, sp, #24
   1b678:	mov	r4, r2
   1b67c:	mov	r5, r1
   1b680:	mov	r6, r0
   1b684:	mvn	r0, #0
   1b688:	movw	r8, #32816	; 0x8030
   1b68c:	b	1b6a4 <__assert_fail@plt+0x9f30>
   1b690:	add	r0, r7, r7, lsl #2
   1b694:	add	r1, r1, r0, lsl #1
   1b698:	sub	r0, r1, #48	; 0x30
   1b69c:	cmp	r1, r8
   1b6a0:	movwgt	r0, #32768	; 0x8000
   1b6a4:	mov	r7, r0
   1b6a8:	mov	r0, r5
   1b6ac:	mov	r1, r6
   1b6b0:	mov	r2, r4
   1b6b4:	bl	1877c <__assert_fail@plt+0x7008>
   1b6b8:	ldrb	r2, [r5, #4]
   1b6bc:	cmp	r2, #24
   1b6c0:	beq	1b710 <__assert_fail@plt+0x9f9c>
   1b6c4:	cmp	r2, #2
   1b6c8:	beq	1b70c <__assert_fail@plt+0x9f98>
   1b6cc:	ldrb	r1, [r5]
   1b6d0:	cmp	r1, #44	; 0x2c
   1b6d4:	beq	1b710 <__assert_fail@plt+0x9f9c>
   1b6d8:	mvn	r0, #1
   1b6dc:	cmp	r1, #48	; 0x30
   1b6e0:	bcc	1b6a4 <__assert_fail@plt+0x9f30>
   1b6e4:	cmp	r2, #1
   1b6e8:	bne	1b6a4 <__assert_fail@plt+0x9f30>
   1b6ec:	cmn	r7, #2
   1b6f0:	beq	1b6a4 <__assert_fail@plt+0x9f30>
   1b6f4:	cmp	r1, #57	; 0x39
   1b6f8:	bhi	1b6a4 <__assert_fail@plt+0x9f30>
   1b6fc:	cmn	r7, #1
   1b700:	bne	1b690 <__assert_fail@plt+0x9f1c>
   1b704:	sub	r0, r1, #48	; 0x30
   1b708:	b	1b6a4 <__assert_fail@plt+0x9f30>
   1b70c:	mvn	r7, #1
   1b710:	mov	r0, r7
   1b714:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b718:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b71c:	add	fp, sp, #24
   1b720:	sub	sp, sp, #8
   1b724:	mov	r8, r1
   1b728:	mov	r5, r0
   1b72c:	mov	r3, r0
   1b730:	ldr	r7, [r3], #20
   1b734:	mov	r6, #0
   1b738:	mov	r0, r1
   1b73c:	mov	r1, #0
   1b740:	mov	r2, #0
   1b744:	bl	19980 <__assert_fail@plt+0x820c>
   1b748:	str	r0, [sp, #4]
   1b74c:	cmp	r0, #0
   1b750:	beq	1b7e8 <__assert_fail@plt+0xa074>
   1b754:	add	r4, sp, #4
   1b758:	mov	r6, #0
   1b75c:	str	r7, [r0]
   1b760:	ldr	r0, [r4]
   1b764:	ldr	r1, [r0, #24]
   1b768:	orr	r1, r1, #262144	; 0x40000
   1b76c:	str	r1, [r0, #24]
   1b770:	ldr	r0, [r5, #4]
   1b774:	ldr	r7, [r4]
   1b778:	cmp	r0, #0
   1b77c:	beq	1b78c <__assert_fail@plt+0xa018>
   1b780:	add	r4, r7, #4
   1b784:	mov	r5, r0
   1b788:	b	1b7c0 <__assert_fail@plt+0xa04c>
   1b78c:	mov	r1, #0
   1b790:	mov	r0, r5
   1b794:	ldr	r5, [r5, #8]
   1b798:	cmp	r5, r1
   1b79c:	cmpne	r5, #0
   1b7a0:	bne	1b7bc <__assert_fail@plt+0xa048>
   1b7a4:	ldr	r7, [r7]
   1b7a8:	ldr	r5, [r0]
   1b7ac:	cmp	r5, #0
   1b7b0:	mov	r1, r0
   1b7b4:	bne	1b790 <__assert_fail@plt+0xa01c>
   1b7b8:	b	1b7e4 <__assert_fail@plt+0xa070>
   1b7bc:	add	r4, r7, #8
   1b7c0:	add	r3, r5, #20
   1b7c4:	mov	r0, r8
   1b7c8:	mov	r1, #0
   1b7cc:	mov	r2, #0
   1b7d0:	bl	19980 <__assert_fail@plt+0x820c>
   1b7d4:	str	r0, [r4]
   1b7d8:	cmp	r0, #0
   1b7dc:	bne	1b75c <__assert_fail@plt+0x9fe8>
   1b7e0:	b	1b7e8 <__assert_fail@plt+0xa074>
   1b7e4:	ldr	r6, [sp, #4]
   1b7e8:	mov	r0, r6
   1b7ec:	sub	sp, fp, #24
   1b7f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b7f4:	ldr	r2, [r1, #24]
   1b7f8:	uxtb	r3, r2
   1b7fc:	cmp	r3, #17
   1b800:	ldreq	r3, [r1, #20]
   1b804:	cmpeq	r3, r0
   1b808:	orreq	r0, r2, #524288	; 0x80000
   1b80c:	streq	r0, [r1, #24]
   1b810:	mov	r0, #0
   1b814:	bx	lr
   1b818:	push	{r4, r5, r6, r7, fp, lr}
   1b81c:	add	fp, sp, #16
   1b820:	mov	r4, r2
   1b824:	mov	r5, r1
   1b828:	mov	r6, r0
   1b82c:	mov	r0, r2
   1b830:	mov	r1, r6
   1b834:	blx	r5
   1b838:	cmp	r0, #0
   1b83c:	popne	{r4, r5, r6, r7, fp, pc}
   1b840:	ldr	r7, [r6, #4]
   1b844:	cmp	r7, #0
   1b848:	bne	1b87c <__assert_fail@plt+0xa108>
   1b84c:	mov	r1, #0
   1b850:	b	1b868 <__assert_fail@plt+0xa0f4>
   1b854:	ldr	r6, [r0]
   1b858:	cmp	r6, #0
   1b85c:	mov	r1, r0
   1b860:	moveq	r0, #0
   1b864:	popeq	{r4, r5, r6, r7, fp, pc}
   1b868:	mov	r0, r6
   1b86c:	ldr	r7, [r6, #8]
   1b870:	cmp	r7, r1
   1b874:	cmpne	r7, #0
   1b878:	beq	1b854 <__assert_fail@plt+0xa0e0>
   1b87c:	mov	r0, r4
   1b880:	mov	r1, r7
   1b884:	blx	r5
   1b888:	cmp	r0, #0
   1b88c:	mov	r6, r7
   1b890:	beq	1b840 <__assert_fail@plt+0xa0cc>
   1b894:	pop	{r4, r5, r6, r7, fp, pc}
   1b898:	ldrb	r2, [r1, #24]
   1b89c:	cmp	r2, #17
   1b8a0:	beq	1b8d4 <__assert_fail@plt+0xa160>
   1b8a4:	cmp	r2, #4
   1b8a8:	bne	1b928 <__assert_fail@plt+0xa1b4>
   1b8ac:	ldr	r2, [r0, #132]	; 0x84
   1b8b0:	cmp	r2, #0
   1b8b4:	beq	1b928 <__assert_fail@plt+0xa1b4>
   1b8b8:	ldr	r3, [r1, #20]
   1b8bc:	ldr	r2, [r2, r3, lsl #2]
   1b8c0:	str	r2, [r1, #20]
   1b8c4:	ldr	r1, [r0, #80]	; 0x50
   1b8c8:	mov	r3, #1
   1b8cc:	orr	r1, r1, r3, lsl r2
   1b8d0:	b	1b924 <__assert_fail@plt+0xa1b0>
   1b8d4:	ldr	r2, [r1, #4]
   1b8d8:	cmp	r2, #0
   1b8dc:	beq	1b928 <__assert_fail@plt+0xa1b4>
   1b8e0:	ldrb	r3, [r2, #24]
   1b8e4:	cmp	r3, #17
   1b8e8:	bne	1b928 <__assert_fail@plt+0xa1b4>
   1b8ec:	ldr	r3, [r2, #4]
   1b8f0:	ldr	r2, [r2, #20]
   1b8f4:	str	r3, [r1, #4]
   1b8f8:	cmp	r3, #0
   1b8fc:	strne	r1, [r3]
   1b900:	ldr	r1, [r1, #20]
   1b904:	ldr	r3, [r0, #132]	; 0x84
   1b908:	ldr	r1, [r3, r1, lsl #2]
   1b90c:	str	r1, [r3, r2, lsl #2]
   1b910:	cmp	r2, #31
   1b914:	bgt	1b928 <__assert_fail@plt+0xa1b4>
   1b918:	ldr	r1, [r0, #80]	; 0x50
   1b91c:	mov	r3, #1
   1b920:	bic	r1, r1, r3, lsl r2
   1b924:	str	r1, [r0, #80]	; 0x50
   1b928:	mov	r0, #0
   1b92c:	bx	lr
   1b930:	push	{r4, r5, fp, lr}
   1b934:	add	fp, sp, #8
   1b938:	sub	sp, sp, #8
   1b93c:	mov	r4, r1
   1b940:	mov	r5, r0
   1b944:	mov	r0, #0
   1b948:	str	r0, [sp, #4]
   1b94c:	ldr	r2, [r1, #4]
   1b950:	cmp	r2, #0
   1b954:	beq	1b97c <__assert_fail@plt+0xa208>
   1b958:	ldrb	r0, [r2, #24]
   1b95c:	cmp	r0, #17
   1b960:	bne	1b97c <__assert_fail@plt+0xa208>
   1b964:	add	r0, sp, #4
   1b968:	mov	r1, r5
   1b96c:	bl	1bd40 <__assert_fail@plt+0xa5cc>
   1b970:	str	r0, [r4, #4]
   1b974:	cmp	r0, #0
   1b978:	strne	r4, [r0]
   1b97c:	ldr	r2, [r4, #8]
   1b980:	cmp	r2, #0
   1b984:	beq	1b9ac <__assert_fail@plt+0xa238>
   1b988:	ldrb	r0, [r2, #24]
   1b98c:	cmp	r0, #17
   1b990:	bne	1b9ac <__assert_fail@plt+0xa238>
   1b994:	add	r0, sp, #4
   1b998:	mov	r1, r5
   1b99c:	bl	1bd40 <__assert_fail@plt+0xa5cc>
   1b9a0:	str	r0, [r4, #8]
   1b9a4:	cmp	r0, #0
   1b9a8:	strne	r4, [r0]
   1b9ac:	ldr	r0, [sp, #4]
   1b9b0:	sub	sp, fp, #8
   1b9b4:	pop	{r4, r5, fp, pc}
   1b9b8:	push	{r4, r5, fp, lr}
   1b9bc:	add	fp, sp, #8
   1b9c0:	mov	r4, r1
   1b9c4:	mov	r5, r0
   1b9c8:	ldr	r2, [r1, #24]
   1b9cc:	uxtb	r0, r2
   1b9d0:	cmp	r0, #16
   1b9d4:	bne	1b9f4 <__assert_fail@plt+0xa280>
   1b9d8:	ldr	r0, [r4, #4]
   1b9dc:	ldr	r1, [r0, #12]
   1b9e0:	str	r1, [r4, #12]
   1b9e4:	ldr	r0, [r0, #28]
   1b9e8:	str	r0, [r4, #28]
   1b9ec:	mov	r0, #0
   1b9f0:	pop	{r4, r5, fp, pc}
   1b9f4:	str	r4, [r4, #12]
   1b9f8:	ldr	r1, [r4, #20]
   1b9fc:	mov	r0, r5
   1ba00:	bl	1be5c <__assert_fail@plt+0xa6e8>
   1ba04:	str	r0, [r4, #28]
   1ba08:	cmn	r0, #1
   1ba0c:	moveq	r0, #12
   1ba10:	popeq	{r4, r5, fp, pc}
   1ba14:	mov	r1, r0
   1ba18:	ldrb	r2, [r4, #24]
   1ba1c:	mov	r0, #0
   1ba20:	cmp	r2, #12
   1ba24:	popne	{r4, r5, fp, pc}
   1ba28:	ldr	r2, [r5]
   1ba2c:	add	r1, r2, r1, lsl #3
   1ba30:	ldr	r2, [r1, #4]
   1ba34:	ldr	r3, [r4, #20]
   1ba38:	bfi	r2, r3, #8, #10
   1ba3c:	str	r2, [r1, #4]
   1ba40:	pop	{r4, r5, fp, pc}
   1ba44:	ldrb	r0, [r1, #24]
   1ba48:	cmp	r0, #16
   1ba4c:	beq	1ba60 <__assert_fail@plt+0xa2ec>
   1ba50:	cmp	r0, #11
   1ba54:	bne	1ba7c <__assert_fail@plt+0xa308>
   1ba58:	ldr	r0, [r1, #4]
   1ba5c:	b	1ba9c <__assert_fail@plt+0xa328>
   1ba60:	ldmib	r1, {r0, r2}
   1ba64:	ldr	r3, [r2, #12]
   1ba68:	str	r3, [r0, #16]
   1ba6c:	ldr	r0, [r1, #16]
   1ba70:	str	r0, [r2, #16]
   1ba74:	mov	r0, #0
   1ba78:	bx	lr
   1ba7c:	ldr	r0, [r1, #4]
   1ba80:	cmp	r0, #0
   1ba84:	ldrne	r2, [r1, #16]
   1ba88:	strne	r2, [r0, #16]
   1ba8c:	ldr	r0, [r1, #8]
   1ba90:	cmp	r0, #0
   1ba94:	beq	1baa0 <__assert_fail@plt+0xa32c>
   1ba98:	ldr	r1, [r1, #16]
   1ba9c:	str	r1, [r0, #16]
   1baa0:	mov	r0, #0
   1baa4:	bx	lr
   1baa8:	ldr	ip, [r1, #28]
   1baac:	ldrb	r2, [r1, #24]
   1bab0:	sub	r2, r2, #2
   1bab4:	cmp	r2, #14
   1bab8:	bhi	1bb70 <__assert_fail@plt+0xa3fc>
   1babc:	add	r3, pc, #0
   1bac0:	ldr	pc, [r3, r2, lsl #2]
   1bac4:			; <UNDEFINED> instruction: 0x0001bbb4
   1bac8:	andeq	fp, r1, r0, ror fp
   1bacc:	andeq	fp, r1, r4, lsl #23
   1bad0:	andeq	fp, r1, r0, ror fp
   1bad4:	andeq	fp, r1, r0, ror fp
   1bad8:	andeq	fp, r1, r0, ror fp
   1badc:	andeq	fp, r1, r0, lsl #22
   1bae0:	andeq	fp, r1, r0, lsl #22
   1bae4:	andeq	fp, r1, r8, lsl fp
   1bae8:	andeq	fp, r1, r8, lsl fp
   1baec:	andeq	fp, r1, r0, lsl #22
   1baf0:	andeq	fp, r1, r0, ror fp
   1baf4:	andeq	fp, r1, r0, ror fp
   1baf8:	andeq	fp, r1, r0, ror fp
   1bafc:			; <UNDEFINED> instruction: 0x0001bbb4
   1bb00:	ldr	r0, [r0, #20]
   1bb04:	add	r2, ip, ip, lsl #1
   1bb08:	add	r0, r0, r2, lsl #2
   1bb0c:	ldr	r1, [r1, #16]
   1bb10:	ldr	r1, [r1, #28]
   1bb14:	b	1c0a4 <__assert_fail@plt+0xa930>
   1bb18:	push	{fp, lr}
   1bb1c:	mov	fp, sp
   1bb20:	ldrb	r2, [r0, #88]	; 0x58
   1bb24:	orr	r2, r2, #1
   1bb28:	strb	r2, [r0, #88]	; 0x58
   1bb2c:	add	r3, r1, #16
   1bb30:	ldr	lr, [r1, #4]
   1bb34:	ldr	r1, [r1, #8]
   1bb38:	cmp	r1, #0
   1bb3c:	mov	r2, r3
   1bb40:	addne	r2, r1, #12
   1bb44:	ldr	r1, [r2]
   1bb48:	ldr	r2, [r1, #28]
   1bb4c:	cmp	lr, #0
   1bb50:	addne	r3, lr, #12
   1bb54:	ldr	r1, [r3]
   1bb58:	ldr	r1, [r1, #28]
   1bb5c:	ldr	r0, [r0, #20]
   1bb60:	add	r3, ip, ip, lsl #1
   1bb64:	add	r0, r0, r3, lsl #2
   1bb68:	pop	{fp, lr}
   1bb6c:	b	1c02c <__assert_fail@plt+0xa8b8>
   1bb70:	ldr	r0, [r0, #12]
   1bb74:	ldr	r1, [r1, #16]
   1bb78:	ldr	r1, [r1, #28]
   1bb7c:	str	r1, [r0, ip, lsl #2]
   1bb80:	b	1bbb4 <__assert_fail@plt+0xa440>
   1bb84:	ldr	r3, [r0, #12]
   1bb88:	ldr	r2, [r1, #16]
   1bb8c:	ldr	r2, [r2, #28]
   1bb90:	str	r2, [r3, ip, lsl #2]
   1bb94:	ldrb	r1, [r1, #24]
   1bb98:	cmp	r1, #4
   1bb9c:	bne	1bbb4 <__assert_fail@plt+0xa440>
   1bba0:	ldr	r0, [r0, #20]
   1bba4:	add	r1, ip, ip, lsl #1
   1bba8:	add	r0, r0, r1, lsl #2
   1bbac:	mov	r1, r2
   1bbb0:	b	1c0a4 <__assert_fail@plt+0xa930>
   1bbb4:	mov	r0, #0
   1bbb8:	bx	lr
   1bbbc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bbc0:	add	fp, sp, #24
   1bbc4:	sub	sp, sp, #16
   1bbc8:	mov	r4, r0
   1bbcc:	ldr	r0, [r0, #8]
   1bbd0:	cmp	r0, #0
   1bbd4:	beq	1bc6c <__assert_fail@plt+0xa4f8>
   1bbd8:	mov	r7, #0
   1bbdc:	add	r8, sp, #4
   1bbe0:	mov	r6, #0
   1bbe4:	ldr	r0, [r4, #24]
   1bbe8:	add	r5, r6, r6, lsl #1
   1bbec:	add	r0, r0, r5, lsl #2
   1bbf0:	ldr	r0, [r0, #4]
   1bbf4:	cmp	r0, #0
   1bbf8:	beq	1bc04 <__assert_fail@plt+0xa490>
   1bbfc:	mov	r0, r7
   1bc00:	b	1bc44 <__assert_fail@plt+0xa4d0>
   1bc04:	mov	r0, r8
   1bc08:	mov	r1, r4
   1bc0c:	mov	r2, r6
   1bc10:	mov	r3, #1
   1bc14:	bl	1c0f0 <__assert_fail@plt+0xa97c>
   1bc18:	cmp	r0, #0
   1bc1c:	bne	1bc70 <__assert_fail@plt+0xa4fc>
   1bc20:	ldr	r0, [r4, #24]
   1bc24:	add	r0, r0, r5, lsl #2
   1bc28:	ldr	r0, [r0, #4]
   1bc2c:	cmp	r0, #0
   1bc30:	mov	r0, r7
   1bc34:	bne	1bc44 <__assert_fail@plt+0xa4d0>
   1bc38:	ldr	r0, [sp, #12]
   1bc3c:	bl	13f04 <__assert_fail@plt+0x2790>
   1bc40:	mov	r0, #1
   1bc44:	ldr	r1, [r4, #8]
   1bc48:	add	r2, r6, #1
   1bc4c:	subs	r3, r2, r1
   1bc50:	mov	r6, r3
   1bc54:	movne	r6, r2
   1bc58:	movwne	r3, #1
   1bc5c:	and	r7, r0, r3
   1bc60:	tst	r0, #1
   1bc64:	cmpeq	r2, r1
   1bc68:	bne	1bbe4 <__assert_fail@plt+0xa470>
   1bc6c:	mov	r0, #0
   1bc70:	sub	sp, fp, #24
   1bc74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bc78:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bc7c:	add	fp, sp, #24
   1bc80:	mov	r4, r0
   1bc84:	ldr	r0, [r0, #8]
   1bc88:	cmp	r0, #0
   1bc8c:	beq	1bd38 <__assert_fail@plt+0xa5c4>
   1bc90:	mov	r0, #0
   1bc94:	mov	r1, #0
   1bc98:	mov	r2, #0
   1bc9c:	ldr	r3, [r4, #28]
   1bca0:	str	r0, [r3, r1]!
   1bca4:	str	r0, [r3, #4]
   1bca8:	str	r0, [r3, #8]
   1bcac:	add	r1, r1, #12
   1bcb0:	add	r2, r2, #1
   1bcb4:	ldr	r3, [r4, #8]
   1bcb8:	cmp	r2, r3
   1bcbc:	bcc	1bc9c <__assert_fail@plt+0xa528>
   1bcc0:	cmp	r3, #0
   1bcc4:	beq	1bd38 <__assert_fail@plt+0xa5c4>
   1bcc8:	mov	r5, #0
   1bccc:	ldr	r0, [r4, #24]
   1bcd0:	add	r8, r5, r5, lsl #1
   1bcd4:	add	r0, r0, r8, lsl #2
   1bcd8:	ldr	r1, [r0, #4]
   1bcdc:	cmp	r1, #1
   1bce0:	blt	1bd28 <__assert_fail@plt+0xa5b4>
   1bce4:	ldr	r7, [r0, #8]
   1bce8:	mov	r6, #0
   1bcec:	ldr	r0, [r7, r6, lsl #2]
   1bcf0:	add	r0, r0, r0, lsl #1
   1bcf4:	ldr	r1, [r4, #28]
   1bcf8:	add	r0, r1, r0, lsl #2
   1bcfc:	mov	r1, r5
   1bd00:	bl	1c95c <__assert_fail@plt+0xb1e8>
   1bd04:	cmp	r0, #0
   1bd08:	moveq	r0, #12
   1bd0c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bd10:	add	r6, r6, #1
   1bd14:	ldr	r0, [r4, #24]
   1bd18:	add	r0, r0, r8, lsl #2
   1bd1c:	ldr	r0, [r0, #4]
   1bd20:	cmp	r6, r0
   1bd24:	blt	1bcec <__assert_fail@plt+0xa578>
   1bd28:	add	r5, r5, #1
   1bd2c:	ldr	r0, [r4, #8]
   1bd30:	cmp	r5, r0
   1bd34:	bcc	1bccc <__assert_fail@plt+0xa558>
   1bd38:	mov	r0, #0
   1bd3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bd40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd44:	add	fp, sp, #28
   1bd48:	sub	sp, sp, #4
   1bd4c:	mov	r9, r2
   1bd50:	mov	r8, r0
   1bd54:	ldr	r5, [r2, #4]
   1bd58:	ldr	r6, [r1]
   1bd5c:	cmp	r5, #0
   1bd60:	ldrbne	r0, [r1, #28]
   1bd64:	andsne	r0, r0, #16
   1bd68:	bne	1be34 <__assert_fail@plt+0xa6c0>
   1bd6c:	mov	r0, r6
   1bd70:	mov	r1, #0
   1bd74:	mov	r2, #0
   1bd78:	mov	r3, #8
   1bd7c:	bl	18908 <__assert_fail@plt+0x7194>
   1bd80:	mov	sl, r0
   1bd84:	mov	r0, r6
   1bd88:	mov	r1, #0
   1bd8c:	mov	r2, #0
   1bd90:	mov	r3, #9
   1bd94:	bl	18908 <__assert_fail@plt+0x7194>
   1bd98:	mov	r4, r0
   1bd9c:	cmp	r5, #0
   1bda0:	mov	r7, r0
   1bda4:	beq	1bdc0 <__assert_fail@plt+0xa64c>
   1bda8:	mov	r0, r6
   1bdac:	mov	r1, r5
   1bdb0:	mov	r2, r4
   1bdb4:	mov	r3, #16
   1bdb8:	bl	18908 <__assert_fail@plt+0x7194>
   1bdbc:	mov	r7, r0
   1bdc0:	mov	r0, r6
   1bdc4:	mov	r1, sl
   1bdc8:	mov	r2, r7
   1bdcc:	mov	r3, #16
   1bdd0:	bl	18908 <__assert_fail@plt+0x7194>
   1bdd4:	cmp	r4, #0
   1bdd8:	beq	1bde8 <__assert_fail@plt+0xa674>
   1bddc:	cmp	sl, #0
   1bde0:	cmpne	r7, #0
   1bde4:	bne	1bdf8 <__assert_fail@plt+0xa684>
   1bde8:	mov	r0, #12
   1bdec:	str	r0, [r8]
   1bdf0:	mov	r5, #0
   1bdf4:	b	1be50 <__assert_fail@plt+0xa6dc>
   1bdf8:	mov	r5, r0
   1bdfc:	cmp	r0, #0
   1be00:	beq	1bde8 <__assert_fail@plt+0xa674>
   1be04:	ldr	r0, [r9, #20]
   1be08:	str	r0, [r4, #20]
   1be0c:	str	r0, [sl, #20]
   1be10:	ldr	r0, [r4, #24]
   1be14:	ldr	r1, [r9, #24]
   1be18:	lsr	r1, r1, #19
   1be1c:	bfi	r0, r1, #19, #1
   1be20:	str	r0, [r4, #24]
   1be24:	ldr	r0, [sl, #24]
   1be28:	bfi	r0, r1, #19, #1
   1be2c:	str	r0, [sl, #24]
   1be30:	b	1be50 <__assert_fail@plt+0xa6dc>
   1be34:	ldr	r0, [r9, #20]
   1be38:	cmp	r0, #31
   1be3c:	bgt	1be50 <__assert_fail@plt+0xa6dc>
   1be40:	ldr	r1, [r6, #80]	; 0x50
   1be44:	mov	r2, #1
   1be48:	tst	r1, r2, lsl r0
   1be4c:	bne	1bd6c <__assert_fail@plt+0xa5f8>
   1be50:	mov	r0, r5
   1be54:	sub	sp, fp, #28
   1be58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be60:	add	fp, sp, #28
   1be64:	sub	sp, sp, #12
   1be68:	mov	r5, r2
   1be6c:	mov	r9, r1
   1be70:	mov	r4, r0
   1be74:	ldr	r7, [r0, #4]
   1be78:	ldr	r0, [r0, #8]
   1be7c:	cmp	r0, r7
   1be80:	bcs	1bf50 <__assert_fail@plt+0xa7dc>
   1be84:	ldr	r0, [r4]
   1be88:	ldr	r1, [r4, #8]
   1be8c:	str	r9, [r0, r1, lsl #3]!
   1be90:	str	r5, [r0, #4]
   1be94:	ldr	r0, [r4]
   1be98:	ldr	r1, [r4, #8]
   1be9c:	add	r0, r0, r1, lsl #3
   1bea0:	ldr	r1, [r0, #4]
   1bea4:	bfc	r1, #8, #10
   1bea8:	str	r1, [r0, #4]
   1beac:	uxtb	r1, r5
   1beb0:	cmp	r1, #5
   1beb4:	bne	1bec8 <__assert_fail@plt+0xa754>
   1beb8:	ldr	r2, [r4, #92]	; 0x5c
   1bebc:	mov	r0, #1048576	; 0x100000
   1bec0:	cmp	r2, #1
   1bec4:	bgt	1bed8 <__assert_fail@plt+0xa764>
   1bec8:	sub	r0, r1, #6
   1becc:	clz	r0, r0
   1bed0:	lsr	r0, r0, #5
   1bed4:	lsl	r0, r0, #20
   1bed8:	ldr	r1, [r4]
   1bedc:	ldr	r2, [r4, #8]
   1bee0:	add	r1, r1, r2, lsl #3
   1bee4:	ldr	r2, [r1, #4]
   1bee8:	bic	r2, r2, #1048576	; 0x100000
   1beec:	orr	r0, r2, r0
   1bef0:	str	r0, [r1, #4]
   1bef4:	ldr	r0, [r4, #8]
   1bef8:	ldr	r1, [r4, #12]
   1befc:	mvn	r2, #0
   1bf00:	str	r2, [r1, r0, lsl #2]
   1bf04:	ldr	r0, [r4, #8]
   1bf08:	ldr	r1, [r4, #20]
   1bf0c:	add	r0, r0, r0, lsl #1
   1bf10:	mov	r2, #0
   1bf14:	str	r2, [r1, r0, lsl #2]!
   1bf18:	str	r2, [r1, #4]
   1bf1c:	str	r2, [r1, #8]
   1bf20:	ldr	r0, [r4, #8]
   1bf24:	ldr	r1, [r4, #24]
   1bf28:	add	r0, r0, r0, lsl #1
   1bf2c:	str	r2, [r1, r0, lsl #2]!
   1bf30:	str	r2, [r1, #4]
   1bf34:	str	r2, [r1, #8]
   1bf38:	ldr	r6, [r4, #8]
   1bf3c:	add	r0, r6, #1
   1bf40:	str	r0, [r4, #8]
   1bf44:	mov	r0, r6
   1bf48:	sub	sp, fp, #28
   1bf4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf50:	lsl	r1, r7, #1
   1bf54:	mvn	r6, #0
   1bf58:	movw	r0, #21845	; 0x5555
   1bf5c:	movt	r0, #5461	; 0x1555
   1bf60:	cmp	r1, r0
   1bf64:	bhi	1bf44 <__assert_fail@plt+0xa7d0>
   1bf68:	str	r1, [sp, #8]
   1bf6c:	ldr	r0, [r4]
   1bf70:	lsl	r1, r7, #4
   1bf74:	bl	23e94 <__assert_fail@plt+0x12720>
   1bf78:	cmp	r0, #0
   1bf7c:	beq	1bf44 <__assert_fail@plt+0xa7d0>
   1bf80:	str	r0, [r4]
   1bf84:	ldr	r0, [r4, #12]
   1bf88:	lsl	r8, r7, #3
   1bf8c:	mov	r1, r8
   1bf90:	bl	23e94 <__assert_fail@plt+0x12720>
   1bf94:	str	r0, [sp, #4]
   1bf98:	ldr	r0, [r4, #16]
   1bf9c:	mov	r1, r8
   1bfa0:	bl	23e94 <__assert_fail@plt+0x12720>
   1bfa4:	mov	r2, r0
   1bfa8:	ldr	r0, [r4, #20]
   1bfac:	add	r1, r7, r7, lsl #1
   1bfb0:	mov	r7, r2
   1bfb4:	lsl	r8, r1, #3
   1bfb8:	mov	r1, r8
   1bfbc:	bl	23e94 <__assert_fail@plt+0x12720>
   1bfc0:	mov	sl, r0
   1bfc4:	ldr	r0, [r4, #24]
   1bfc8:	mov	r1, r8
   1bfcc:	bl	23e94 <__assert_fail@plt+0x12720>
   1bfd0:	mov	r8, r0
   1bfd4:	ldr	r0, [sp, #4]
   1bfd8:	cmp	r0, #0
   1bfdc:	beq	1bfec <__assert_fail@plt+0xa878>
   1bfe0:	cmp	r7, #0
   1bfe4:	cmpne	sl, #0
   1bfe8:	bne	1c00c <__assert_fail@plt+0xa898>
   1bfec:	bl	13f04 <__assert_fail@plt+0x2790>
   1bff0:	mov	r0, r7
   1bff4:	bl	13f04 <__assert_fail@plt+0x2790>
   1bff8:	mov	r0, sl
   1bffc:	bl	13f04 <__assert_fail@plt+0x2790>
   1c000:	mov	r0, r8
   1c004:	bl	13f04 <__assert_fail@plt+0x2790>
   1c008:	b	1bf44 <__assert_fail@plt+0xa7d0>
   1c00c:	cmp	r8, #0
   1c010:	beq	1bfec <__assert_fail@plt+0xa878>
   1c014:	add	r1, r4, #12
   1c018:	stm	r1, {r0, r7, sl}
   1c01c:	str	r8, [r4, #24]
   1c020:	ldr	r0, [sp, #8]
   1c024:	str	r0, [r4, #4]
   1c028:	b	1be84 <__assert_fail@plt+0xa710>
   1c02c:	push	{r4, r5, r6, sl, fp, lr}
   1c030:	add	fp, sp, #16
   1c034:	mov	r5, r2
   1c038:	mov	r4, r1
   1c03c:	mov	r6, r0
   1c040:	mov	r0, #2
   1c044:	str	r0, [r6]
   1c048:	mov	r0, #8
   1c04c:	bl	23e64 <__assert_fail@plt+0x126f0>
   1c050:	str	r0, [r6, #8]
   1c054:	cmp	r0, #0
   1c058:	moveq	r0, #12
   1c05c:	popeq	{r4, r5, r6, sl, fp, pc}
   1c060:	cmp	r4, r5
   1c064:	bne	1c080 <__assert_fail@plt+0xa90c>
   1c068:	mov	r0, #1
   1c06c:	str	r0, [r6, #4]
   1c070:	ldr	r0, [r6, #8]
   1c074:	str	r4, [r0]
   1c078:	mov	r0, #0
   1c07c:	pop	{r4, r5, r6, sl, fp, pc}
   1c080:	mov	r0, #2
   1c084:	str	r0, [r6, #4]
   1c088:	ldr	r0, [r6, #8]
   1c08c:	cmp	r4, r5
   1c090:	stmlt	r0, {r4, r5}
   1c094:	strge	r5, [r0]
   1c098:	strge	r4, [r0, #4]
   1c09c:	mov	r0, #0
   1c0a0:	pop	{r4, r5, r6, sl, fp, pc}
   1c0a4:	push	{r4, r5, fp, lr}
   1c0a8:	add	fp, sp, #8
   1c0ac:	mov	r5, r1
   1c0b0:	mov	r4, r0
   1c0b4:	mov	r0, #1
   1c0b8:	str	r0, [r4]
   1c0bc:	str	r0, [r4, #4]
   1c0c0:	mov	r0, #4
   1c0c4:	bl	23e64 <__assert_fail@plt+0x126f0>
   1c0c8:	str	r0, [r4, #8]
   1c0cc:	cmp	r0, #0
   1c0d0:	strne	r5, [r0]
   1c0d4:	movne	r0, #0
   1c0d8:	popne	{r4, r5, fp, pc}
   1c0dc:	mov	r0, #0
   1c0e0:	str	r0, [r4]
   1c0e4:	str	r0, [r4, #4]
   1c0e8:	mov	r0, #12
   1c0ec:	pop	{r4, r5, fp, pc}
   1c0f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0f4:	add	fp, sp, #28
   1c0f8:	sub	sp, sp, #44	; 0x2c
   1c0fc:	mov	r8, r3
   1c100:	mov	r6, r2
   1c104:	mov	r5, r1
   1c108:	mov	r7, r0
   1c10c:	ldr	r0, [r1, #20]
   1c110:	add	r4, r2, r2, lsl #1
   1c114:	add	r0, r0, r4, lsl #2
   1c118:	ldr	r0, [r0, #4]
   1c11c:	add	r1, r0, #1
   1c120:	add	r0, sp, #32
   1c124:	bl	1c2fc <__assert_fail@plt+0xab88>
   1c128:	cmp	r0, #0
   1c12c:	bne	1c2f4 <__assert_fail@plt+0xab80>
   1c130:	ldr	r0, [sp, #36]	; 0x24
   1c134:	ldr	r1, [sp, #40]	; 0x28
   1c138:	add	r2, r0, #1
   1c13c:	str	r2, [sp, #36]	; 0x24
   1c140:	str	r6, [r1, r0, lsl #2]
   1c144:	ldr	r0, [r5, #24]
   1c148:	add	r0, r0, r4, lsl #2
   1c14c:	mvn	r1, #0
   1c150:	str	r1, [r0, #4]
   1c154:	ldr	r1, [r5]
   1c158:	add	r0, r1, r6, lsl #3
   1c15c:	ldr	r0, [r0, #4]
   1c160:	ubfx	r0, r0, #8, #10
   1c164:	cmp	r0, #0
   1c168:	beq	1c1b8 <__assert_fail@plt+0xaa44>
   1c16c:	ldr	r2, [r5, #20]
   1c170:	add	r2, r2, r4, lsl #2
   1c174:	ldr	r3, [r2, #4]
   1c178:	cmp	r3, #0
   1c17c:	beq	1c1b8 <__assert_fail@plt+0xaa44>
   1c180:	ldr	r2, [r2, #8]
   1c184:	ldr	r2, [r2]
   1c188:	add	r1, r1, r2, lsl #3
   1c18c:	ldrb	r1, [r1, #6]
   1c190:	tst	r1, #4
   1c194:	bne	1c1b8 <__assert_fail@plt+0xaa44>
   1c198:	str	r0, [sp]
   1c19c:	mov	r0, r5
   1c1a0:	mov	r1, r6
   1c1a4:	mov	r2, r6
   1c1a8:	mov	r3, r6
   1c1ac:	bl	1c32c <__assert_fail@plt+0xabb8>
   1c1b0:	cmp	r0, #0
   1c1b4:	bne	1c2f4 <__assert_fail@plt+0xab80>
   1c1b8:	ldr	r0, [r5]
   1c1bc:	add	r0, r0, r6, lsl #3
   1c1c0:	ldrb	r0, [r0, #4]
   1c1c4:	tst	r0, #8
   1c1c8:	beq	1c2c8 <__assert_fail@plt+0xab54>
   1c1cc:	ldr	r0, [r5, #20]
   1c1d0:	add	r1, r0, r4, lsl #2
   1c1d4:	ldr	r1, [r1, #4]
   1c1d8:	cmp	r1, #1
   1c1dc:	blt	1c2c8 <__assert_fail@plt+0xab54>
   1c1e0:	str	r8, [sp, #8]
   1c1e4:	str	r7, [sp, #12]
   1c1e8:	mov	r8, #0
   1c1ec:	add	r7, sp, #16
   1c1f0:	add	sl, sp, #32
   1c1f4:	mov	r6, #0
   1c1f8:	add	r0, r0, r4, lsl #2
   1c1fc:	ldr	r0, [r0, #8]
   1c200:	ldr	r2, [r0, r6, lsl #2]
   1c204:	add	r9, r2, r2, lsl #1
   1c208:	ldr	r0, [r5, #24]
   1c20c:	add	r0, r0, r9, lsl #2
   1c210:	ldr	r1, [r0, #4]
   1c214:	cmn	r1, #1
   1c218:	beq	1c280 <__assert_fail@plt+0xab0c>
   1c21c:	cmp	r1, #0
   1c220:	bne	1c240 <__assert_fail@plt+0xaacc>
   1c224:	mov	r0, r7
   1c228:	mov	r1, r5
   1c22c:	mov	r3, #0
   1c230:	bl	1c0f0 <__assert_fail@plt+0xa97c>
   1c234:	cmp	r0, #0
   1c238:	beq	1c250 <__assert_fail@plt+0xaadc>
   1c23c:	b	1c2f4 <__assert_fail@plt+0xab80>
   1c240:	vldr	d16, [r0]
   1c244:	ldr	r0, [r0, #8]
   1c248:	str	r0, [sp, #24]
   1c24c:	vstr	d16, [sp, #16]
   1c250:	mov	r0, sl
   1c254:	mov	r1, r7
   1c258:	bl	1c5b8 <__assert_fail@plt+0xae44>
   1c25c:	cmp	r0, #0
   1c260:	bne	1c2f4 <__assert_fail@plt+0xab80>
   1c264:	ldr	r0, [r5, #24]
   1c268:	add	r0, r0, r9, lsl #2
   1c26c:	ldr	r0, [r0, #4]
   1c270:	cmp	r0, #0
   1c274:	bne	1c284 <__assert_fail@plt+0xab10>
   1c278:	ldr	r0, [sp, #24]
   1c27c:	bl	13f04 <__assert_fail@plt+0x2790>
   1c280:	mov	r8, #1
   1c284:	ldr	r0, [r5, #20]
   1c288:	add	r1, r0, r4, lsl #2
   1c28c:	ldr	r1, [r1, #4]
   1c290:	add	r6, r6, #1
   1c294:	cmp	r6, r1
   1c298:	blt	1c1f8 <__assert_fail@plt+0xaa84>
   1c29c:	tst	r8, #1
   1c2a0:	ldr	r7, [sp, #12]
   1c2a4:	ldr	r0, [sp, #8]
   1c2a8:	beq	1c2c8 <__assert_fail@plt+0xab54>
   1c2ac:	cmp	r0, #0
   1c2b0:	bne	1c2c8 <__assert_fail@plt+0xab54>
   1c2b4:	ldr	r0, [r5, #24]
   1c2b8:	add	r0, r0, r4, lsl #2
   1c2bc:	mov	r1, #0
   1c2c0:	str	r1, [r0, #4]
   1c2c4:	b	1c2e0 <__assert_fail@plt+0xab6c>
   1c2c8:	ldr	r0, [r5, #24]
   1c2cc:	vldr	d16, [sp, #32]
   1c2d0:	add	r0, r0, r4, lsl #2
   1c2d4:	ldr	r1, [sp, #40]	; 0x28
   1c2d8:	str	r1, [r0, #8]
   1c2dc:	vstr	d16, [r0]
   1c2e0:	ldr	r0, [sp, #40]	; 0x28
   1c2e4:	vldr	d16, [sp, #32]
   1c2e8:	str	r0, [r7, #8]
   1c2ec:	vstr	d16, [r7]
   1c2f0:	mov	r0, #0
   1c2f4:	sub	sp, fp, #28
   1c2f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c2fc:	push	{r4, r5, fp, lr}
   1c300:	add	fp, sp, #8
   1c304:	mov	r4, r0
   1c308:	mov	r5, #0
   1c30c:	stm	r0, {r1, r5}
   1c310:	lsl	r0, r1, #2
   1c314:	bl	23e64 <__assert_fail@plt+0x126f0>
   1c318:	str	r0, [r4, #8]
   1c31c:	cmp	r0, #0
   1c320:	movweq	r5, #12
   1c324:	mov	r0, r5
   1c328:	pop	{r4, r5, fp, pc}
   1c32c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c330:	add	fp, sp, #28
   1c334:	sub	sp, sp, #20
   1c338:	str	r3, [sp, #8]
   1c33c:	mov	r8, r2
   1c340:	mov	sl, r1
   1c344:	mov	r5, r0
   1c348:	ldr	r0, [fp, #8]
   1c34c:	str	r0, [sp, #16]
   1c350:	ldr	r0, [r5]
   1c354:	add	r0, r0, sl, lsl #3
   1c358:	ldrb	r1, [r0, #4]!
   1c35c:	cmp	r1, #4
   1c360:	bne	1c3dc <__assert_fail@plt+0xac68>
   1c364:	ldr	r0, [r5, #12]
   1c368:	ldr	r1, [r5, #20]
   1c36c:	ldr	r4, [r0, sl, lsl #2]
   1c370:	add	r6, r8, r8, lsl #1
   1c374:	add	r0, r1, r6, lsl #2
   1c378:	mov	r1, #0
   1c37c:	str	r1, [r0, #4]
   1c380:	mov	r0, r5
   1c384:	mov	r1, r4
   1c388:	ldr	r2, [sp, #16]
   1c38c:	bl	1c74c <__assert_fail@plt+0xafd8>
   1c390:	mov	r9, #12
   1c394:	cmn	r0, #1
   1c398:	beq	1c59c <__assert_fail@plt+0xae28>
   1c39c:	mov	r7, r0
   1c3a0:	ldr	r0, [r5, #12]
   1c3a4:	ldr	r1, [r0, sl, lsl #2]
   1c3a8:	str	r1, [r0, r8, lsl #2]
   1c3ac:	ldr	r0, [r5, #20]
   1c3b0:	add	r0, r0, r6, lsl #2
   1c3b4:	mov	r1, r7
   1c3b8:	bl	1c7d4 <__assert_fail@plt+0xb060>
   1c3bc:	mov	r1, #0
   1c3c0:	cmp	r0, #0
   1c3c4:	mov	sl, r4
   1c3c8:	mov	r8, r7
   1c3cc:	beq	1c59c <__assert_fail@plt+0xae28>
   1c3d0:	cmp	r1, #0
   1c3d4:	beq	1c350 <__assert_fail@plt+0xabdc>
   1c3d8:	b	1c57c <__assert_fail@plt+0xae08>
   1c3dc:	ldr	r1, [r5, #20]
   1c3e0:	add	r7, sl, sl, lsl #1
   1c3e4:	add	r3, r1, r7, lsl #2
   1c3e8:	ldr	r2, [r3, #4]
   1c3ec:	cmp	r2, #0
   1c3f0:	beq	1c58c <__assert_fail@plt+0xae18>
   1c3f4:	ldr	r3, [r3, #8]
   1c3f8:	ldr	r9, [r3]
   1c3fc:	add	r4, r8, r8, lsl #1
   1c400:	add	r6, r1, r4, lsl #2
   1c404:	mov	r1, #0
   1c408:	str	r1, [r6, #4]
   1c40c:	cmp	r2, #1
   1c410:	bne	1c44c <__assert_fail@plt+0xacd8>
   1c414:	ldr	r1, [sp, #8]
   1c418:	cmp	sl, r1
   1c41c:	bne	1c484 <__assert_fail@plt+0xad10>
   1c420:	cmp	r8, sl
   1c424:	beq	1c484 <__assert_fail@plt+0xad10>
   1c428:	mov	r0, r6
   1c42c:	mov	r1, r9
   1c430:	bl	1c7d4 <__assert_fail@plt+0xb060>
   1c434:	cmp	r0, #0
   1c438:	mov	r1, #1
   1c43c:	movwne	r1, #2
   1c440:	cmp	r1, #0
   1c444:	beq	1c350 <__assert_fail@plt+0xabdc>
   1c448:	b	1c57c <__assert_fail@plt+0xae08>
   1c44c:	str	r4, [sp, #12]
   1c450:	mov	r0, r5
   1c454:	mov	r1, r9
   1c458:	ldr	r4, [sp, #16]
   1c45c:	mov	r2, r4
   1c460:	bl	1c8dc <__assert_fail@plt+0xb168>
   1c464:	cmn	r0, #1
   1c468:	beq	1c4c4 <__assert_fail@plt+0xad50>
   1c46c:	mov	r1, r0
   1c470:	mov	r0, r6
   1c474:	bl	1c7d4 <__assert_fail@plt+0xb060>
   1c478:	cmp	r0, #0
   1c47c:	bne	1c528 <__assert_fail@plt+0xadb4>
   1c480:	b	1c5b0 <__assert_fail@plt+0xae3c>
   1c484:	ldr	r0, [r0]
   1c488:	ubfx	r0, r0, #8, #10
   1c48c:	ldr	r2, [sp, #16]
   1c490:	orr	r2, r0, r2
   1c494:	mov	r0, r5
   1c498:	mov	r1, r9
   1c49c:	str	r2, [sp, #16]
   1c4a0:	bl	1c74c <__assert_fail@plt+0xafd8>
   1c4a4:	mov	sl, r9
   1c4a8:	mov	r9, #12
   1c4ac:	cmn	r0, #1
   1c4b0:	beq	1c59c <__assert_fail@plt+0xae28>
   1c4b4:	mov	r8, r0
   1c4b8:	ldr	r0, [r5, #20]
   1c4bc:	add	r0, r0, r4, lsl #2
   1c4c0:	b	1c564 <__assert_fail@plt+0xadf0>
   1c4c4:	mov	r0, r5
   1c4c8:	mov	r8, r9
   1c4cc:	mov	r1, r9
   1c4d0:	mov	r2, r4
   1c4d4:	bl	1c74c <__assert_fail@plt+0xafd8>
   1c4d8:	mov	r9, #12
   1c4dc:	cmn	r0, #1
   1c4e0:	beq	1c59c <__assert_fail@plt+0xae28>
   1c4e4:	mov	r6, r0
   1c4e8:	ldr	r0, [r5, #20]
   1c4ec:	ldr	r1, [sp, #12]
   1c4f0:	add	r0, r0, r1, lsl #2
   1c4f4:	mov	r1, r6
   1c4f8:	bl	1c7d4 <__assert_fail@plt+0xb060>
   1c4fc:	cmp	r0, #0
   1c500:	beq	1c59c <__assert_fail@plt+0xae28>
   1c504:	ldr	r4, [sp, #16]
   1c508:	str	r4, [sp]
   1c50c:	mov	r0, r5
   1c510:	mov	r1, r8
   1c514:	mov	r2, r6
   1c518:	ldr	r3, [sp, #8]
   1c51c:	bl	1c32c <__assert_fail@plt+0xabb8>
   1c520:	cmp	r0, #0
   1c524:	bne	1c5a8 <__assert_fail@plt+0xae34>
   1c528:	ldr	r0, [r5, #20]
   1c52c:	add	r0, r0, r7, lsl #2
   1c530:	ldr	r0, [r0, #8]
   1c534:	ldr	sl, [r0, #4]
   1c538:	mov	r0, r5
   1c53c:	mov	r1, sl
   1c540:	mov	r2, r4
   1c544:	bl	1c74c <__assert_fail@plt+0xafd8>
   1c548:	mov	r9, #12
   1c54c:	cmn	r0, #1
   1c550:	beq	1c59c <__assert_fail@plt+0xae28>
   1c554:	mov	r8, r0
   1c558:	ldr	r0, [r5, #20]
   1c55c:	ldr	r1, [sp, #12]
   1c560:	add	r0, r0, r1, lsl #2
   1c564:	mov	r1, r8
   1c568:	bl	1c7d4 <__assert_fail@plt+0xb060>
   1c56c:	mov	r1, #0
   1c570:	cmp	r0, #0
   1c574:	bne	1c3d0 <__assert_fail@plt+0xac5c>
   1c578:	b	1c59c <__assert_fail@plt+0xae28>
   1c57c:	mov	r9, #12
   1c580:	cmp	r1, #2
   1c584:	moveq	r9, #0
   1c588:	b	1c59c <__assert_fail@plt+0xae28>
   1c58c:	ldr	r0, [r5, #12]
   1c590:	ldr	r1, [r0, sl, lsl #2]
   1c594:	str	r1, [r0, r8, lsl #2]
   1c598:	mov	r9, #0
   1c59c:	mov	r0, r9
   1c5a0:	sub	sp, fp, #28
   1c5a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c5a8:	mov	r9, r0
   1c5ac:	b	1c59c <__assert_fail@plt+0xae28>
   1c5b0:	mov	r9, #12
   1c5b4:	b	1c59c <__assert_fail@plt+0xae28>
   1c5b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c5bc:	add	fp, sp, #24
   1c5c0:	mov	r8, #0
   1c5c4:	cmp	r1, #0
   1c5c8:	beq	1c724 <__assert_fail@plt+0xafb0>
   1c5cc:	mov	r6, r1
   1c5d0:	ldr	r1, [r1, #4]
   1c5d4:	cmp	r1, #0
   1c5d8:	beq	1c724 <__assert_fail@plt+0xafb0>
   1c5dc:	mov	r9, r0
   1c5e0:	ldr	r2, [r0]
   1c5e4:	ldr	r0, [r0, #4]
   1c5e8:	add	r3, r0, r1, lsl #1
   1c5ec:	cmp	r2, r3
   1c5f0:	bge	1c61c <__assert_fail@plt+0xaea8>
   1c5f4:	add	r7, r2, r1
   1c5f8:	lsl	r1, r7, #3
   1c5fc:	ldr	r0, [r9, #8]
   1c600:	bl	23e94 <__assert_fail@plt+0x12720>
   1c604:	cmp	r0, #0
   1c608:	beq	1c740 <__assert_fail@plt+0xafcc>
   1c60c:	str	r0, [r9, #8]
   1c610:	lsl	r0, r7, #1
   1c614:	str	r0, [r9]
   1c618:	ldr	r0, [r9, #4]
   1c61c:	ldr	r2, [r6, #4]
   1c620:	cmp	r0, #0
   1c624:	beq	1c72c <__assert_fail@plt+0xafb8>
   1c628:	add	r7, r0, r2, lsl #1
   1c62c:	sub	r1, r0, #1
   1c630:	sub	r0, r2, #1
   1c634:	orr	r2, r0, r1
   1c638:	cmp	r2, #0
   1c63c:	blt	1c688 <__assert_fail@plt+0xaf14>
   1c640:	ldr	r2, [r6, #8]
   1c644:	ldr	r3, [r9, #8]
   1c648:	ldr	r4, [r2, r0, lsl #2]
   1c64c:	ldr	r5, [r3, r1, lsl #2]
   1c650:	cmp	r5, r4
   1c654:	bne	1c664 <__assert_fail@plt+0xaef0>
   1c658:	sub	r1, r1, #1
   1c65c:	sub	r0, r0, #1
   1c660:	b	1c67c <__assert_fail@plt+0xaf08>
   1c664:	bge	1c678 <__assert_fail@plt+0xaf04>
   1c668:	sub	r7, r7, #1
   1c66c:	str	r4, [r3, r7, lsl #2]
   1c670:	sub	r0, r0, #1
   1c674:	b	1c67c <__assert_fail@plt+0xaf08>
   1c678:	sub	r1, r1, #1
   1c67c:	orr	r5, r0, r1
   1c680:	cmn	r5, #1
   1c684:	bgt	1c648 <__assert_fail@plt+0xaed4>
   1c688:	cmp	r0, #0
   1c68c:	blt	1c6ac <__assert_fail@plt+0xaf38>
   1c690:	add	r2, r0, #1
   1c694:	sub	r7, r7, r2
   1c698:	ldr	r0, [r9, #8]
   1c69c:	add	r0, r0, r7, lsl #2
   1c6a0:	ldr	r1, [r6, #8]
   1c6a4:	lsl	r2, r2, #2
   1c6a8:	bl	1148c <memcpy@plt>
   1c6ac:	ldr	r1, [r6, #4]
   1c6b0:	ldr	r0, [r9, #4]
   1c6b4:	add	r1, r0, r1, lsl #1
   1c6b8:	sub	r1, r1, #1
   1c6bc:	sub	r2, r1, r7
   1c6c0:	adds	r2, r2, #1
   1c6c4:	beq	1c724 <__assert_fail@plt+0xafb0>
   1c6c8:	add	r3, r2, r0
   1c6cc:	str	r3, [r9, #4]
   1c6d0:	sub	r3, r0, #1
   1c6d4:	ldr	r0, [r9, #8]
   1c6d8:	ldr	r6, [r0, r3, lsl #2]
   1c6dc:	ldr	r5, [r0, r1, lsl #2]
   1c6e0:	cmp	r5, r6
   1c6e4:	ble	1c700 <__assert_fail@plt+0xaf8c>
   1c6e8:	add	r6, r2, r3
   1c6ec:	str	r5, [r0, r6, lsl #2]
   1c6f0:	subs	r2, r2, #1
   1c6f4:	sub	r1, r1, #1
   1c6f8:	bne	1c6d8 <__assert_fail@plt+0xaf64>
   1c6fc:	b	1c724 <__assert_fail@plt+0xafb0>
   1c700:	add	r5, r2, r3
   1c704:	str	r6, [r0, r5, lsl #2]
   1c708:	sub	r6, r3, #1
   1c70c:	cmp	r3, #0
   1c710:	mov	r3, r6
   1c714:	bgt	1c6d8 <__assert_fail@plt+0xaf64>
   1c718:	add	r1, r0, r7, lsl #2
   1c71c:	lsl	r2, r2, #2
   1c720:	bl	1148c <memcpy@plt>
   1c724:	mov	r0, r8
   1c728:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c72c:	str	r2, [r9, #4]
   1c730:	ldr	r0, [r9, #8]
   1c734:	ldr	r2, [r6, #4]
   1c738:	ldr	r1, [r6, #8]
   1c73c:	b	1c71c <__assert_fail@plt+0xafa8>
   1c740:	mov	r8, #12
   1c744:	mov	r0, r8
   1c748:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c74c:	push	{r4, r5, r6, sl, fp, lr}
   1c750:	add	fp, sp, #16
   1c754:	mov	r6, r2
   1c758:	mov	r4, r1
   1c75c:	mov	r5, r0
   1c760:	ldr	r0, [r0]
   1c764:	ldr	r1, [r0, r1, lsl #3]!
   1c768:	ldr	r2, [r0, #4]
   1c76c:	mov	r0, r5
   1c770:	bl	1be5c <__assert_fail@plt+0xa6e8>
   1c774:	cmn	r0, #1
   1c778:	ldrne	r1, [r5]
   1c77c:	addne	r1, r1, r0, lsl #3
   1c780:	ldrne	r2, [r1, #4]
   1c784:	bfine	r2, r6, #8, #10
   1c788:	strne	r2, [r1, #4]
   1c78c:	ldrne	r1, [r5]
   1c790:	addne	r2, r1, r4, lsl #3
   1c794:	ldrne	r2, [r2, #4]
   1c798:	movwne	r3, #65280	; 0xff00
   1c79c:	movtne	r3, #3
   1c7a0:	andne	r2, r2, r3
   1c7a4:	addne	r1, r1, r0, lsl #3
   1c7a8:	ldrne	r3, [r1, #4]
   1c7ac:	orrne	r2, r2, r3
   1c7b0:	strne	r2, [r1, #4]
   1c7b4:	ldrne	r1, [r5]
   1c7b8:	addne	r1, r1, r0, lsl #3
   1c7bc:	ldrne	r2, [r1, #4]
   1c7c0:	orrne	r2, r2, #262144	; 0x40000
   1c7c4:	strne	r2, [r1, #4]
   1c7c8:	ldrne	r1, [r5, #16]
   1c7cc:	strne	r4, [r1, r0, lsl #2]
   1c7d0:	pop	{r4, r5, r6, sl, fp, pc}
   1c7d4:	push	{r4, r5, fp, lr}
   1c7d8:	add	fp, sp, #8
   1c7dc:	mov	r5, r1
   1c7e0:	mov	r4, r0
   1c7e4:	ldr	r2, [r0]
   1c7e8:	cmp	r2, #0
   1c7ec:	beq	1c818 <__assert_fail@plt+0xb0a4>
   1c7f0:	ldr	r1, [r4, #4]
   1c7f4:	cmp	r1, #0
   1c7f8:	bne	1c830 <__assert_fail@plt+0xb0bc>
   1c7fc:	ldr	r0, [r4, #8]
   1c800:	str	r5, [r0]
   1c804:	ldr	r0, [r4, #4]
   1c808:	add	r0, r0, #1
   1c80c:	str	r0, [r4, #4]
   1c810:	mov	r0, #1
   1c814:	pop	{r4, r5, fp, pc}
   1c818:	mov	r0, r4
   1c81c:	mov	r1, r5
   1c820:	bl	1c0a4 <__assert_fail@plt+0xa930>
   1c824:	clz	r0, r0
   1c828:	lsr	r0, r0, #5
   1c82c:	pop	{r4, r5, fp, pc}
   1c830:	cmp	r2, r1
   1c834:	bne	1c860 <__assert_fail@plt+0xb0ec>
   1c838:	lsl	r0, r2, #1
   1c83c:	str	r0, [r4]
   1c840:	ldr	r0, [r4, #8]
   1c844:	lsl	r1, r2, #3
   1c848:	bl	23e94 <__assert_fail@plt+0x12720>
   1c84c:	cmp	r0, #0
   1c850:	moveq	r0, #0
   1c854:	popeq	{r4, r5, fp, pc}
   1c858:	str	r0, [r4, #8]
   1c85c:	ldr	r1, [r4, #4]
   1c860:	ldr	ip, [r4, #8]
   1c864:	ldr	r2, [ip]
   1c868:	cmp	r2, r5
   1c86c:	ble	1c8a4 <__assert_fail@plt+0xb130>
   1c870:	cmp	r1, #1
   1c874:	blt	1c8d4 <__assert_fail@plt+0xb160>
   1c878:	add	r2, ip, r1, lsl #2
   1c87c:	add	r1, r1, #1
   1c880:	mov	r3, r2
   1c884:	ldr	r0, [r3, #-4]!
   1c888:	str	r0, [r2]
   1c88c:	sub	r1, r1, #1
   1c890:	cmp	r1, #1
   1c894:	mov	r2, r3
   1c898:	bgt	1c884 <__assert_fail@plt+0xb110>
   1c89c:	sub	r1, r1, #1
   1c8a0:	b	1c8d4 <__assert_fail@plt+0xb160>
   1c8a4:	add	r2, ip, r1, lsl #2
   1c8a8:	ldr	r3, [r2, #-4]
   1c8ac:	cmp	r3, r5
   1c8b0:	ble	1c8d4 <__assert_fail@plt+0xb160>
   1c8b4:	sub	r1, r1, #2
   1c8b8:	str	r3, [r2]
   1c8bc:	ldr	r3, [r2, #-8]
   1c8c0:	sub	r2, r2, #4
   1c8c4:	sub	r1, r1, #1
   1c8c8:	cmp	r3, r5
   1c8cc:	bgt	1c8b8 <__assert_fail@plt+0xb144>
   1c8d0:	add	r1, r1, #2
   1c8d4:	str	r5, [ip, r1, lsl #2]
   1c8d8:	b	1c804 <__assert_fail@plt+0xb090>
   1c8dc:	push	{r4, r5, fp, lr}
   1c8e0:	add	fp, sp, #8
   1c8e4:	mov	ip, r0
   1c8e8:	ldr	r3, [r0, #8]
   1c8ec:	sub	lr, r3, #1
   1c8f0:	mvn	r0, #0
   1c8f4:	cmp	lr, #1
   1c8f8:	blt	1c950 <__assert_fail@plt+0xb1dc>
   1c8fc:	ldr	r4, [ip]
   1c900:	add	r4, r4, lr, lsl #3
   1c904:	ldr	r5, [r4, #4]
   1c908:	ands	r4, r5, #262144	; 0x40000
   1c90c:	beq	1c950 <__assert_fail@plt+0xb1dc>
   1c910:	ldr	r4, [ip, #16]
   1c914:	sub	lr, r4, #4
   1c918:	ldr	r4, [lr, r3, lsl #2]
   1c91c:	cmp	r4, r1
   1c920:	ubfxeq	r4, r5, #8, #10
   1c924:	cmpeq	r4, r2
   1c928:	beq	1c954 <__assert_fail@plt+0xb1e0>
   1c92c:	sub	r4, r3, #2
   1c930:	cmp	r4, #1
   1c934:	poplt	{r4, r5, fp, pc}
   1c938:	ldr	r4, [ip]
   1c93c:	add	r4, r4, r3, lsl #3
   1c940:	ldr	r5, [r4, #-12]
   1c944:	ands	r4, r5, #262144	; 0x40000
   1c948:	sub	r3, r3, #1
   1c94c:	bne	1c918 <__assert_fail@plt+0xb1a4>
   1c950:	pop	{r4, r5, fp, pc}
   1c954:	sub	r0, r3, #1
   1c958:	pop	{r4, r5, fp, pc}
   1c95c:	push	{r4, r5, fp, lr}
   1c960:	add	fp, sp, #8
   1c964:	mov	r4, r1
   1c968:	mov	r5, r0
   1c96c:	ldr	r0, [r0]
   1c970:	ldr	r1, [r5, #4]
   1c974:	cmp	r0, r1
   1c978:	bne	1c9a4 <__assert_fail@plt+0xb230>
   1c97c:	mov	r1, #2
   1c980:	add	r0, r1, r0, lsl #1
   1c984:	str	r0, [r5]
   1c988:	lsl	r1, r0, #2
   1c98c:	ldr	r0, [r5, #8]
   1c990:	bl	23e94 <__assert_fail@plt+0x12720>
   1c994:	cmp	r0, #0
   1c998:	moveq	r0, #0
   1c99c:	popeq	{r4, r5, fp, pc}
   1c9a0:	str	r0, [r5, #8]
   1c9a4:	ldmib	r5, {r0, r1}
   1c9a8:	add	r2, r0, #1
   1c9ac:	str	r2, [r5, #4]
   1c9b0:	str	r4, [r1, r0, lsl #2]
   1c9b4:	mov	r0, #1
   1c9b8:	pop	{r4, r5, fp, pc}
   1c9bc:	push	{r4, r5, fp, lr}
   1c9c0:	add	fp, sp, #8
   1c9c4:	mov	r5, r1
   1c9c8:	mov	r4, r0
   1c9cc:	ldr	r0, [r1, #4]
   1c9d0:	str	r0, [r4, #4]
   1c9d4:	ldr	r1, [r1, #4]
   1c9d8:	cmp	r1, #1
   1c9dc:	blt	1ca10 <__assert_fail@plt+0xb29c>
   1c9e0:	str	r0, [r4]
   1c9e4:	lsl	r0, r0, #2
   1c9e8:	bl	23e64 <__assert_fail@plt+0x126f0>
   1c9ec:	str	r0, [r4, #8]
   1c9f0:	cmp	r0, #0
   1c9f4:	beq	1ca24 <__assert_fail@plt+0xb2b0>
   1c9f8:	ldr	r2, [r5, #4]
   1c9fc:	ldr	r1, [r5, #8]
   1ca00:	lsl	r2, r2, #2
   1ca04:	bl	1148c <memcpy@plt>
   1ca08:	mov	r0, #0
   1ca0c:	pop	{r4, r5, fp, pc}
   1ca10:	mov	r0, #0
   1ca14:	str	r0, [r4]
   1ca18:	str	r0, [r4, #4]
   1ca1c:	str	r0, [r4, #8]
   1ca20:	pop	{r4, r5, fp, pc}
   1ca24:	mov	r0, #0
   1ca28:	str	r0, [r4]
   1ca2c:	str	r0, [r4, #4]
   1ca30:	mov	r0, #12
   1ca34:	pop	{r4, r5, fp, pc}
   1ca38:	mov	ip, r0
   1ca3c:	ldr	r0, [r0, #4]
   1ca40:	cmp	r0, #1
   1ca44:	movlt	r0, #0
   1ca48:	bxlt	lr
   1ca4c:	push	{r4, r5, r6, r7, fp, lr}
   1ca50:	add	fp, sp, #16
   1ca54:	subs	r2, r0, #1
   1ca58:	mov	r0, #0
   1ca5c:	mov	r3, #0
   1ca60:	beq	1ca90 <__assert_fail@plt+0xb31c>
   1ca64:	ldr	lr, [ip, #8]
   1ca68:	mov	r3, #0
   1ca6c:	mov	r4, #1
   1ca70:	add	r5, r2, r3
   1ca74:	lsr	r6, r5, #1
   1ca78:	ldr	r7, [lr, r6, lsl #2]
   1ca7c:	cmp	r7, r1
   1ca80:	movge	r2, r6
   1ca84:	addlt	r3, r4, r5, lsr #1
   1ca88:	cmp	r3, r2
   1ca8c:	bcc	1ca70 <__assert_fail@plt+0xb2fc>
   1ca90:	ldr	r2, [ip, #8]
   1ca94:	ldr	r2, [r2, r3, lsl #2]
   1ca98:	cmp	r2, r1
   1ca9c:	addeq	r0, r3, #1
   1caa0:	pop	{r4, r5, r6, r7, fp, pc}
   1caa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1caa8:	add	fp, sp, #28
   1caac:	sub	sp, sp, #12
   1cab0:	mov	r6, r1
   1cab4:	ldr	r1, [r2, #4]
   1cab8:	cmp	r1, #0
   1cabc:	beq	1cb84 <__assert_fail@plt+0xb410>
   1cac0:	mov	r5, r3
   1cac4:	mov	sl, r2
   1cac8:	str	r0, [sp, #4]
   1cacc:	mov	r0, r2
   1cad0:	mov	r1, r3
   1cad4:	bl	1cb98 <__assert_fail@plt+0xb424>
   1cad8:	mov	r4, r0
   1cadc:	ldr	r0, [r6, #32]
   1cae0:	str	r6, [sp, #8]
   1cae4:	ldr	r1, [r6, #68]	; 0x44
   1cae8:	and	r1, r1, r4
   1caec:	add	r1, r1, r1, lsl #1
   1caf0:	mov	r6, r0
   1caf4:	ldr	r2, [r6, r1, lsl #2]!
   1caf8:	cmp	r2, #1
   1cafc:	blt	1cb50 <__assert_fail@plt+0xb3dc>
   1cb00:	add	r0, r0, r1, lsl #2
   1cb04:	ldr	r8, [r0, #8]
   1cb08:	mov	r9, #0
   1cb0c:	ldr	r7, [r8, r9, lsl #2]
   1cb10:	ldr	r0, [r7]
   1cb14:	cmp	r0, r4
   1cb18:	bne	1cb40 <__assert_fail@plt+0xb3cc>
   1cb1c:	ldrb	r0, [r7, #52]	; 0x34
   1cb20:	and	r0, r0, #15
   1cb24:	cmp	r0, r5
   1cb28:	bne	1cb40 <__assert_fail@plt+0xb3cc>
   1cb2c:	ldr	r0, [r7, #40]	; 0x28
   1cb30:	mov	r1, sl
   1cb34:	bl	1cbc4 <__assert_fail@plt+0xb450>
   1cb38:	cmp	r0, #0
   1cb3c:	bne	1cb8c <__assert_fail@plt+0xb418>
   1cb40:	ldr	r0, [r6]
   1cb44:	add	r9, r9, #1
   1cb48:	cmp	r9, r0
   1cb4c:	blt	1cb0c <__assert_fail@plt+0xb398>
   1cb50:	ldr	r0, [sp, #8]
   1cb54:	mov	r1, sl
   1cb58:	mov	r2, r5
   1cb5c:	mov	r3, r4
   1cb60:	bl	1cc24 <__assert_fail@plt+0xb4b0>
   1cb64:	mov	r7, r0
   1cb68:	cmp	r0, #0
   1cb6c:	bne	1cb8c <__assert_fail@plt+0xb418>
   1cb70:	mov	r0, #12
   1cb74:	ldr	r1, [sp, #4]
   1cb78:	str	r0, [r1]
   1cb7c:	mov	r7, #0
   1cb80:	b	1cb8c <__assert_fail@plt+0xb418>
   1cb84:	mov	r7, #0
   1cb88:	str	r7, [r0]
   1cb8c:	mov	r0, r7
   1cb90:	sub	sp, fp, #28
   1cb94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb98:	mov	r2, r0
   1cb9c:	ldr	r3, [r0, #4]
   1cba0:	add	r0, r3, r1
   1cba4:	cmp	r3, #1
   1cba8:	bxlt	lr
   1cbac:	ldr	r1, [r2, #8]
   1cbb0:	ldr	r2, [r1], #4
   1cbb4:	add	r0, r2, r0
   1cbb8:	subs	r3, r3, #1
   1cbbc:	bne	1cbb0 <__assert_fail@plt+0xb43c>
   1cbc0:	bx	lr
   1cbc4:	push	{fp, lr}
   1cbc8:	mov	fp, sp
   1cbcc:	mov	lr, r0
   1cbd0:	mov	r0, #0
   1cbd4:	cmp	lr, #0
   1cbd8:	cmpne	r1, #0
   1cbdc:	beq	1cc20 <__assert_fail@plt+0xb4ac>
   1cbe0:	ldr	ip, [lr, #4]
   1cbe4:	ldr	r3, [r1, #4]
   1cbe8:	cmp	ip, r3
   1cbec:	popne	{fp, pc}
   1cbf0:	sub	r3, ip, #1
   1cbf4:	add	r2, r3, #1
   1cbf8:	cmp	r2, #1
   1cbfc:	movlt	r0, #1
   1cc00:	poplt	{fp, pc}
   1cc04:	ldr	r2, [r1, #8]
   1cc08:	ldr	ip, [r2, r3, lsl #2]
   1cc0c:	ldr	r2, [lr, #8]
   1cc10:	ldr	r2, [r2, r3, lsl #2]
   1cc14:	sub	r3, r3, #1
   1cc18:	cmp	r2, ip
   1cc1c:	beq	1cbf4 <__assert_fail@plt+0xb480>
   1cc20:	pop	{fp, pc}
   1cc24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc28:	add	fp, sp, #28
   1cc2c:	sub	sp, sp, #20
   1cc30:	mov	r8, r3
   1cc34:	mov	r9, r2
   1cc38:	mov	r7, r1
   1cc3c:	mov	r6, r0
   1cc40:	mov	r0, #56	; 0x38
   1cc44:	mov	r1, #1
   1cc48:	bl	23e10 <__assert_fail@plt+0x1269c>
   1cc4c:	cmp	r0, #0
   1cc50:	beq	1ce1c <__assert_fail@plt+0xb6a8>
   1cc54:	mov	r4, r0
   1cc58:	add	r5, r0, #4
   1cc5c:	mov	r0, r5
   1cc60:	mov	r1, r7
   1cc64:	bl	1c9bc <__assert_fail@plt+0xb248>
   1cc68:	cmp	r0, #0
   1cc6c:	bne	1ce24 <__assert_fail@plt+0xb6b0>
   1cc70:	str	r8, [sp, #4]
   1cc74:	str	r5, [r4, #40]	; 0x28
   1cc78:	and	r0, r9, #15
   1cc7c:	ldrb	r1, [r4, #52]	; 0x34
   1cc80:	and	r1, r1, #240	; 0xf0
   1cc84:	orr	r0, r1, r0
   1cc88:	strb	r0, [r4, #52]	; 0x34
   1cc8c:	ldr	r0, [r7, #4]
   1cc90:	cmp	r0, #1
   1cc94:	blt	1cdf0 <__assert_fail@plt+0xb67c>
   1cc98:	mov	r3, r5
   1cc9c:	and	r0, r9, #4
   1cca0:	str	r0, [sp]
   1cca4:	and	r0, r9, #2
   1cca8:	str	r0, [sp, #8]
   1ccac:	and	r0, r9, #1
   1ccb0:	str	r0, [sp, #16]
   1ccb4:	mov	r8, #0
   1ccb8:	movw	r0, #65280	; 0xff00
   1ccbc:	movt	r0, #3
   1ccc0:	add	sl, r0, #255	; 0xff
   1ccc4:	mov	r9, #0
   1ccc8:	str	r5, [sp, #12]
   1cccc:	ldr	r0, [r7, #8]
   1ccd0:	ldr	r0, [r0, r8, lsl #2]
   1ccd4:	ldr	r1, [r6]
   1ccd8:	add	r0, r1, r0, lsl #3
   1ccdc:	ldr	r5, [r0, #4]
   1cce0:	and	r0, r5, sl
   1cce4:	cmp	r0, #1
   1cce8:	beq	1cde0 <__assert_fail@plt+0xb66c>
   1ccec:	movw	r0, #65280	; 0xff00
   1ccf0:	movt	r0, #3
   1ccf4:	and	r0, r5, r0
   1ccf8:	mov	r1, #32
   1ccfc:	and	r1, r1, r5, lsr #15
   1cd00:	ldrb	r2, [r4, #52]	; 0x34
   1cd04:	orr	r1, r2, r1
   1cd08:	strb	r1, [r4, #52]	; 0x34
   1cd0c:	uxtb	r2, r5
   1cd10:	cmp	r2, #2
   1cd14:	beq	1cd28 <__assert_fail@plt+0xb5b4>
   1cd18:	cmp	r2, #4
   1cd1c:	bne	1cd34 <__assert_fail@plt+0xb5c0>
   1cd20:	mov	r2, #64	; 0x40
   1cd24:	b	1cd2c <__assert_fail@plt+0xb5b8>
   1cd28:	mov	r2, #16
   1cd2c:	orr	r1, r1, r2
   1cd30:	strb	r1, [r4, #52]	; 0x34
   1cd34:	cmp	r0, #0
   1cd38:	beq	1cde0 <__assert_fail@plt+0xb66c>
   1cd3c:	ldr	r0, [r4, #40]	; 0x28
   1cd40:	cmp	r0, r3
   1cd44:	bne	1cd80 <__assert_fail@plt+0xb60c>
   1cd48:	mov	r0, #12
   1cd4c:	bl	23e64 <__assert_fail@plt+0x126f0>
   1cd50:	cmp	r0, #0
   1cd54:	beq	1ce14 <__assert_fail@plt+0xb6a0>
   1cd58:	str	r0, [r4, #40]	; 0x28
   1cd5c:	mov	r1, r7
   1cd60:	bl	1c9bc <__assert_fail@plt+0xb248>
   1cd64:	cmp	r0, #0
   1cd68:	bne	1ce14 <__assert_fail@plt+0xb6a0>
   1cd6c:	ldrb	r0, [r4, #52]	; 0x34
   1cd70:	orr	r0, r0, #128	; 0x80
   1cd74:	strb	r0, [r4, #52]	; 0x34
   1cd78:	mov	r9, #0
   1cd7c:	ldr	r3, [sp, #12]
   1cd80:	ldr	r0, [sp, #16]
   1cd84:	cmp	r0, #0
   1cd88:	bne	1cd94 <__assert_fail@plt+0xb620>
   1cd8c:	ands	r0, r5, #256	; 0x100
   1cd90:	bne	1cdcc <__assert_fail@plt+0xb658>
   1cd94:	ldr	r0, [sp, #16]
   1cd98:	cmp	r0, #0
   1cd9c:	andsne	r0, r5, #512	; 0x200
   1cda0:	bne	1cdcc <__assert_fail@plt+0xb658>
   1cda4:	ldr	r0, [sp, #8]
   1cda8:	cmp	r0, #0
   1cdac:	bne	1cdb8 <__assert_fail@plt+0xb644>
   1cdb0:	ands	r0, r5, #4096	; 0x1000
   1cdb4:	bne	1cdcc <__assert_fail@plt+0xb658>
   1cdb8:	ldr	r0, [sp]
   1cdbc:	cmp	r0, #0
   1cdc0:	bne	1cde0 <__assert_fail@plt+0xb66c>
   1cdc4:	ands	r0, r5, #16384	; 0x4000
   1cdc8:	beq	1cde0 <__assert_fail@plt+0xb66c>
   1cdcc:	sub	r1, r8, r9
   1cdd0:	mov	r0, r3
   1cdd4:	bl	1ce30 <__assert_fail@plt+0xb6bc>
   1cdd8:	ldr	r3, [sp, #12]
   1cddc:	add	r9, r9, #1
   1cde0:	ldr	r0, [r7, #4]
   1cde4:	add	r8, r8, #1
   1cde8:	cmp	r8, r0
   1cdec:	blt	1cccc <__assert_fail@plt+0xb558>
   1cdf0:	mov	r0, r6
   1cdf4:	mov	r1, r4
   1cdf8:	ldr	r2, [sp, #4]
   1cdfc:	bl	1ce78 <__assert_fail@plt+0xb704>
   1ce00:	cmp	r0, #0
   1ce04:	bne	1ce14 <__assert_fail@plt+0xb6a0>
   1ce08:	mov	r0, r4
   1ce0c:	sub	sp, fp, #28
   1ce10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce14:	mov	r0, r4
   1ce18:	bl	173d4 <__assert_fail@plt+0x5c60>
   1ce1c:	mov	r4, #0
   1ce20:	b	1ce08 <__assert_fail@plt+0xb694>
   1ce24:	mov	r0, r4
   1ce28:	bl	13f04 <__assert_fail@plt+0x2790>
   1ce2c:	b	1ce1c <__assert_fail@plt+0xb6a8>
   1ce30:	cmp	r1, #0
   1ce34:	ldrge	r2, [r0, #4]
   1ce38:	cmpge	r2, r1
   1ce3c:	bgt	1ce44 <__assert_fail@plt+0xb6d0>
   1ce40:	bx	lr
   1ce44:	sub	r2, r2, #1
   1ce48:	str	r2, [r0, #4]
   1ce4c:	cmp	r2, r1
   1ce50:	bxle	lr
   1ce54:	ldr	r2, [r0, #8]
   1ce58:	add	r3, r2, r1, lsl #2
   1ce5c:	ldr	r3, [r3, #4]
   1ce60:	str	r3, [r2, r1, lsl #2]
   1ce64:	add	r1, r1, #1
   1ce68:	ldr	r3, [r0, #4]
   1ce6c:	cmp	r1, r3
   1ce70:	blt	1ce58 <__assert_fail@plt+0xb6e4>
   1ce74:	b	1ce40 <__assert_fail@plt+0xb6cc>
   1ce78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce7c:	add	fp, sp, #28
   1ce80:	sub	sp, sp, #4
   1ce84:	mov	r9, r2
   1ce88:	mov	r4, r1
   1ce8c:	mov	r7, r0
   1ce90:	str	r2, [r1]
   1ce94:	ldr	r1, [r1, #8]
   1ce98:	add	r5, r4, #16
   1ce9c:	mov	r0, r5
   1cea0:	bl	1c2fc <__assert_fail@plt+0xab88>
   1cea4:	mov	r8, #12
   1cea8:	cmp	r0, #0
   1ceac:	bne	1cf40 <__assert_fail@plt+0xb7cc>
   1ceb0:	ldr	r0, [r4, #8]
   1ceb4:	cmp	r0, #1
   1ceb8:	blt	1cefc <__assert_fail@plt+0xb788>
   1cebc:	mov	r6, #0
   1cec0:	ldr	r0, [r4, #12]
   1cec4:	ldr	r1, [r0, r6, lsl #2]
   1cec8:	ldr	r0, [r7]
   1cecc:	add	r0, r0, r1, lsl #3
   1ced0:	ldrb	r0, [r0, #4]
   1ced4:	tst	r0, #8
   1ced8:	bne	1ceec <__assert_fail@plt+0xb778>
   1cedc:	mov	r0, r5
   1cee0:	bl	1c95c <__assert_fail@plt+0xb1e8>
   1cee4:	cmp	r0, #0
   1cee8:	beq	1cf40 <__assert_fail@plt+0xb7cc>
   1ceec:	ldr	r0, [r4, #8]
   1cef0:	add	r6, r6, #1
   1cef4:	cmp	r6, r0
   1cef8:	blt	1cec0 <__assert_fail@plt+0xb74c>
   1cefc:	ldr	sl, [r7, #32]
   1cf00:	ldr	r0, [r7, #68]	; 0x44
   1cf04:	and	r0, r0, r9
   1cf08:	add	r7, r0, r0, lsl #1
   1cf0c:	mov	r6, sl
   1cf10:	ldr	r1, [r6, r7, lsl #2]!
   1cf14:	mov	r5, r6
   1cf18:	ldr	r0, [r5, #4]!
   1cf1c:	cmp	r0, r1
   1cf20:	ble	1cf4c <__assert_fail@plt+0xb7d8>
   1cf24:	add	r0, sl, r7, lsl #2
   1cf28:	ldr	r0, [r0, #8]
   1cf2c:	ldr	r1, [r6]
   1cf30:	add	r2, r1, #1
   1cf34:	str	r2, [r6]
   1cf38:	str	r4, [r0, r1, lsl #2]
   1cf3c:	mov	r8, #0
   1cf40:	mov	r0, r8
   1cf44:	sub	sp, fp, #28
   1cf48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf4c:	add	r9, sl, r7, lsl #2
   1cf50:	ldr	r0, [r9, #8]!
   1cf54:	mov	r2, #2
   1cf58:	add	r1, r2, r1, lsl #1
   1cf5c:	str	r1, [sp]
   1cf60:	lsl	r1, r1, #2
   1cf64:	bl	23e94 <__assert_fail@plt+0x12720>
   1cf68:	cmp	r0, #0
   1cf6c:	beq	1cf40 <__assert_fail@plt+0xb7cc>
   1cf70:	str	r0, [r9]
   1cf74:	ldr	r0, [sp]
   1cf78:	str	r0, [r5]
   1cf7c:	b	1cf24 <__assert_fail@plt+0xb7b0>
   1cf80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf84:	add	fp, sp, #28
   1cf88:	sub	sp, sp, #4
   1cf8c:	mov	r5, r2
   1cf90:	mov	sl, r1
   1cf94:	mov	r4, r0
   1cf98:	add	r8, r2, #1
   1cf9c:	cmp	r3, #1
   1cfa0:	beq	1cff4 <__assert_fail@plt+0xb880>
   1cfa4:	mov	r6, #2
   1cfa8:	cmp	r3, #0
   1cfac:	bne	1d004 <__assert_fail@plt+0xb890>
   1cfb0:	lsl	r6, r8, #2
   1cfb4:	mov	r0, r6
   1cfb8:	bl	23e64 <__assert_fail@plt+0x126f0>
   1cfbc:	str	r0, [r4, #4]
   1cfc0:	mov	r7, #0
   1cfc4:	cmp	r0, #0
   1cfc8:	beq	1d0b8 <__assert_fail@plt+0xb944>
   1cfcc:	mov	r0, r6
   1cfd0:	bl	23e64 <__assert_fail@plt+0x126f0>
   1cfd4:	str	r0, [r4, #8]
   1cfd8:	cmp	r0, #0
   1cfdc:	beq	1d0c4 <__assert_fail@plt+0xb950>
   1cfe0:	str	r8, [r4]
   1cfe4:	mov	r6, #1
   1cfe8:	cmp	r5, #1
   1cfec:	bge	1d00c <__assert_fail@plt+0xb898>
   1cff0:	b	1d084 <__assert_fail@plt+0xb910>
   1cff4:	ldr	r0, [r4]
   1cff8:	mov	r6, #1
   1cffc:	cmp	r8, r0
   1d000:	bhi	1d038 <__assert_fail@plt+0xb8c4>
   1d004:	cmp	r5, #1
   1d008:	blt	1d084 <__assert_fail@plt+0xb910>
   1d00c:	add	r0, sl, #4
   1d010:	ldmib	r4, {r1, r2}
   1d014:	mov	r3, r5
   1d018:	ldr	r7, [r0, #-4]
   1d01c:	str	r7, [r1], #4
   1d020:	ldr	r7, [r0]
   1d024:	str	r7, [r2], #4
   1d028:	add	r0, r0, #8
   1d02c:	subs	r3, r3, #1
   1d030:	bne	1d018 <__assert_fail@plt+0xb8a4>
   1d034:	b	1d088 <__assert_fail@plt+0xb914>
   1d038:	ldr	r0, [r4, #4]
   1d03c:	lsl	r9, r8, #2
   1d040:	mov	r1, r9
   1d044:	bl	23e94 <__assert_fail@plt+0x12720>
   1d048:	mov	r7, #0
   1d04c:	str	r0, [sp]
   1d050:	cmp	r0, #0
   1d054:	beq	1d0b8 <__assert_fail@plt+0xb944>
   1d058:	ldr	r0, [r4, #8]
   1d05c:	mov	r1, r9
   1d060:	bl	23e94 <__assert_fail@plt+0x12720>
   1d064:	cmp	r0, #0
   1d068:	beq	1d0d0 <__assert_fail@plt+0xb95c>
   1d06c:	str	r8, [r4]
   1d070:	ldr	r1, [sp]
   1d074:	str	r1, [r4, #4]
   1d078:	str	r0, [r4, #8]
   1d07c:	cmp	r5, #1
   1d080:	bge	1d00c <__assert_fail@plt+0xb898>
   1d084:	mov	r5, #0
   1d088:	ldr	r0, [r4]
   1d08c:	cmp	r5, r0
   1d090:	bcs	1d0b4 <__assert_fail@plt+0xb940>
   1d094:	ldmib	r4, {r0, r1}
   1d098:	mvn	r2, #0
   1d09c:	str	r2, [r1, r5, lsl #2]
   1d0a0:	str	r2, [r0, r5, lsl #2]
   1d0a4:	add	r5, r5, #1
   1d0a8:	ldr	r3, [r4]
   1d0ac:	cmp	r5, r3
   1d0b0:	bcc	1d09c <__assert_fail@plt+0xb928>
   1d0b4:	mov	r7, r6
   1d0b8:	mov	r0, r7
   1d0bc:	sub	sp, fp, #28
   1d0c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0c4:	ldr	r0, [r4, #4]
   1d0c8:	bl	13f04 <__assert_fail@plt+0x2790>
   1d0cc:	b	1d0b8 <__assert_fail@plt+0xb944>
   1d0d0:	ldr	r0, [sp]
   1d0d4:	b	1d0c8 <__assert_fail@plt+0xb954>
   1d0d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d0dc:	add	fp, sp, #24
   1d0e0:	sub	sp, sp, #8
   1d0e4:	mov	r7, r3
   1d0e8:	mov	r4, r2
   1d0ec:	mov	r8, r1
   1d0f0:	mov	r5, r0
   1d0f4:	ldr	r9, [fp, #16]
   1d0f8:	ldr	r6, [r9, #92]	; 0x5c
   1d0fc:	str	r9, [sp, #4]
   1d100:	ldr	r0, [fp, #12]
   1d104:	str	r0, [sp]
   1d108:	ldr	r3, [fp, #8]
   1d10c:	mov	r0, r1
   1d110:	mov	r1, r2
   1d114:	mov	r2, r5
   1d118:	bl	17e5c <__assert_fail@plt+0x66e8>
   1d11c:	cmp	r6, r7
   1d120:	movgt	r7, r6
   1d124:	add	r1, r4, #1
   1d128:	cmp	r1, r7
   1d12c:	movge	r1, r7
   1d130:	mov	r0, r5
   1d134:	bl	17eb4 <__assert_fail@plt+0x6740>
   1d138:	cmp	r0, #0
   1d13c:	bne	1d180 <__assert_fail@plt+0xba0c>
   1d140:	add	r1, r9, #96	; 0x60
   1d144:	str	r1, [r5, #68]	; 0x44
   1d148:	ldrb	r1, [r9, #88]	; 0x58
   1d14c:	ubfx	r1, r1, #4, #1
   1d150:	strb	r1, [r5, #78]	; 0x4e
   1d154:	ldrb	r1, [r5, #75]	; 0x4b
   1d158:	cmp	r1, #0
   1d15c:	beq	1d168 <__assert_fail@plt+0xb9f4>
   1d160:	mov	r4, #0
   1d164:	b	1d178 <__assert_fail@plt+0xba04>
   1d168:	str	r8, [r5, #4]
   1d16c:	ldr	r1, [r9, #92]	; 0x5c
   1d170:	cmp	r1, #1
   1d174:	movwgt	r4, #0
   1d178:	str	r4, [r5, #28]
   1d17c:	str	r4, [r5, #32]
   1d180:	sub	sp, fp, #24
   1d184:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d188:	push	{r4, r5, r6, sl, fp, lr}
   1d18c:	add	fp, sp, #16
   1d190:	mov	r4, r2
   1d194:	mov	r5, r0
   1d198:	mvn	r0, #0
   1d19c:	str	r1, [r5, #88]	; 0x58
   1d1a0:	str	r0, [r5, #92]	; 0x5c
   1d1a4:	cmp	r2, #1
   1d1a8:	blt	1d1f4 <__assert_fail@plt+0xba80>
   1d1ac:	mov	r6, #12
   1d1b0:	movw	r0, #43690	; 0xaaaa
   1d1b4:	movt	r0, #2730	; 0xaaa
   1d1b8:	cmp	r4, r0
   1d1bc:	bhi	1d1ec <__assert_fail@plt+0xba78>
   1d1c0:	add	r0, r4, r4, lsl #1
   1d1c4:	lsl	r0, r0, #3
   1d1c8:	bl	23e64 <__assert_fail@plt+0x126f0>
   1d1cc:	str	r0, [r5, #116]	; 0x74
   1d1d0:	lsl	r0, r4, #2
   1d1d4:	bl	23e64 <__assert_fail@plt+0x126f0>
   1d1d8:	str	r0, [r5, #132]	; 0x84
   1d1dc:	cmp	r0, #0
   1d1e0:	ldrne	r0, [r5, #116]	; 0x74
   1d1e4:	cmpne	r0, #0
   1d1e8:	bne	1d1f4 <__assert_fail@plt+0xba80>
   1d1ec:	mov	r0, r6
   1d1f0:	pop	{r4, r5, r6, sl, fp, pc}
   1d1f4:	mov	r0, #1
   1d1f8:	str	r0, [r5, #120]	; 0x78
   1d1fc:	str	r4, [r5, #112]	; 0x70
   1d200:	str	r4, [r5, #128]	; 0x80
   1d204:	mov	r6, #0
   1d208:	mov	r0, r6
   1d20c:	pop	{r4, r5, r6, sl, fp, pc}
   1d210:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d214:	add	fp, sp, #28
   1d218:	sub	sp, sp, #28
   1d21c:	mov	r6, r2
   1d220:	mov	r7, r1
   1d224:	mov	r4, r0
   1d228:	ldr	r0, [r0, #24]
   1d22c:	cmp	r0, r1
   1d230:	ble	1d39c <__assert_fail@plt+0xbc28>
   1d234:	ldr	r0, [r4, #80]	; 0x50
   1d238:	cmp	r0, #2
   1d23c:	movge	r0, #0
   1d240:	strge	r0, [r4, #16]
   1d244:	strge	r0, [r4, #20]
   1d248:	mov	r0, #0
   1d24c:	str	r0, [r4, #24]
   1d250:	str	r0, [r4, #28]
   1d254:	str	r0, [r4, #32]
   1d258:	strb	r0, [r4, #76]	; 0x4c
   1d25c:	mov	r0, #4
   1d260:	tst	r6, #1
   1d264:	movweq	r0, #6
   1d268:	ldr	r1, [r4, #44]	; 0x2c
   1d26c:	ldr	r2, [r4, #52]	; 0x34
   1d270:	str	r1, [r4, #48]	; 0x30
   1d274:	str	r2, [r4, #56]	; 0x38
   1d278:	str	r0, [r4, #60]	; 0x3c
   1d27c:	ldrb	r0, [r4, #75]	; 0x4b
   1d280:	cmp	r0, #0
   1d284:	mov	r5, r7
   1d288:	ldreq	r0, [r4]
   1d28c:	streq	r0, [r4, #4]
   1d290:	moveq	r5, r7
   1d294:	cmp	r5, #0
   1d298:	beq	1d324 <__assert_fail@plt+0xbbb0>
   1d29c:	ldr	r0, [r4, #32]
   1d2a0:	cmp	r5, r0
   1d2a4:	bge	1d3ac <__assert_fail@plt+0xbc38>
   1d2a8:	ldrb	r0, [r4, #76]	; 0x4c
   1d2ac:	cmp	r0, #0
   1d2b0:	bne	1d4e0 <__assert_fail@plt+0xbd6c>
   1d2b4:	sub	r1, r5, #1
   1d2b8:	mov	r0, r4
   1d2bc:	mov	r2, r6
   1d2c0:	bl	1e194 <__assert_fail@plt+0xca20>
   1d2c4:	str	r0, [r4, #60]	; 0x3c
   1d2c8:	ldr	r0, [r4, #80]	; 0x50
   1d2cc:	cmp	r0, #2
   1d2d0:	blt	1d2ec <__assert_fail@plt+0xbb78>
   1d2d4:	ldr	r0, [r4, #8]
   1d2d8:	ldr	r2, [r4, #28]
   1d2dc:	add	r1, r0, r5, lsl #2
   1d2e0:	sub	r2, r2, r5
   1d2e4:	lsl	r2, r2, #2
   1d2e8:	bl	1145c <memmove@plt>
   1d2ec:	ldrb	r0, [r4, #75]	; 0x4b
   1d2f0:	cmp	r0, #0
   1d2f4:	bne	1d5d4 <__assert_fail@plt+0xbe60>
   1d2f8:	ldr	r0, [r4, #28]
   1d2fc:	ldr	r1, [r4, #32]
   1d300:	sub	r0, r0, r5
   1d304:	sub	r1, r1, r5
   1d308:	str	r0, [r4, #28]
   1d30c:	str	r1, [r4, #32]
   1d310:	ldrb	r0, [r4, #75]	; 0x4b
   1d314:	cmp	r0, #0
   1d318:	ldreq	r0, [r4, #4]
   1d31c:	addeq	r0, r0, r5
   1d320:	streq	r0, [r4, #4]
   1d324:	str	r7, [r4, #24]
   1d328:	ldr	r0, [r4, #48]	; 0x30
   1d32c:	ldr	r1, [r4, #56]	; 0x38
   1d330:	ldr	r2, [r4, #80]	; 0x50
   1d334:	sub	r0, r0, r5
   1d338:	str	r0, [r4, #48]	; 0x30
   1d33c:	sub	r1, r1, r5
   1d340:	str	r1, [r4, #56]	; 0x38
   1d344:	cmp	r2, #2
   1d348:	blt	1d370 <__assert_fail@plt+0xbbfc>
   1d34c:	ldrb	r0, [r4, #72]	; 0x48
   1d350:	cmp	r0, #0
   1d354:	beq	1d384 <__assert_fail@plt+0xbc10>
   1d358:	mov	r0, r4
   1d35c:	bl	17f58 <__assert_fail@plt+0x67e4>
   1d360:	cmp	r0, #0
   1d364:	beq	1d38c <__assert_fail@plt+0xbc18>
   1d368:	sub	sp, fp, #28
   1d36c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d370:	ldrb	r1, [r4, #75]	; 0x4b
   1d374:	cmp	r1, #0
   1d378:	bne	1d5ec <__assert_fail@plt+0xbe78>
   1d37c:	str	r0, [r4, #28]
   1d380:	b	1d38c <__assert_fail@plt+0xbc18>
   1d384:	mov	r0, r4
   1d388:	bl	1858c <__assert_fail@plt+0x6e18>
   1d38c:	mov	r0, #0
   1d390:	str	r0, [r4, #40]	; 0x28
   1d394:	sub	sp, fp, #28
   1d398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d39c:	sub	r5, r7, r0
   1d3a0:	cmp	r5, #0
   1d3a4:	bne	1d29c <__assert_fail@plt+0xbb28>
   1d3a8:	b	1d324 <__assert_fail@plt+0xbbb0>
   1d3ac:	ldr	r9, [r4, #28]
   1d3b0:	ldrb	r0, [r4, #76]	; 0x4c
   1d3b4:	cmp	r0, #0
   1d3b8:	bne	1d764 <__assert_fail@plt+0xbff0>
   1d3bc:	mov	r0, #0
   1d3c0:	str	r0, [r4, #28]
   1d3c4:	ldr	r1, [r4, #80]	; 0x50
   1d3c8:	cmp	r1, #2
   1d3cc:	blt	1d604 <__assert_fail@plt+0xbe90>
   1d3d0:	mvn	r0, #0
   1d3d4:	str	r0, [sp, #24]
   1d3d8:	ldrb	r0, [r4, #73]	; 0x49
   1d3dc:	cmp	r0, #0
   1d3e0:	beq	1d494 <__assert_fail@plt+0xbd20>
   1d3e4:	ldr	r2, [r4]
   1d3e8:	ldr	r0, [r4, #24]
   1d3ec:	add	r0, r2, r0
   1d3f0:	add	r8, r0, r5
   1d3f4:	sub	r1, r5, r1
   1d3f8:	add	r1, r0, r1
   1d3fc:	cmp	r1, r2
   1d400:	movcc	r1, r2
   1d404:	mov	sl, r8
   1d408:	sub	sl, sl, #1
   1d40c:	cmp	sl, r1
   1d410:	bcc	1d488 <__assert_fail@plt+0xbd14>
   1d414:	ldrb	r2, [sl]
   1d418:	and	r2, r2, #192	; 0xc0
   1d41c:	cmp	r2, #128	; 0x80
   1d420:	beq	1d408 <__assert_fail@plt+0xbc94>
   1d424:	ldr	r1, [r4, #48]	; 0x30
   1d428:	add	r3, r0, r1
   1d42c:	sub	r2, r3, sl
   1d430:	ldr	r0, [r4, #64]	; 0x40
   1d434:	cmp	r0, #0
   1d438:	mov	r1, sl
   1d43c:	bne	1d7ec <__assert_fail@plt+0xc078>
   1d440:	mov	r0, #0
   1d444:	str	r0, [sp, #20]
   1d448:	str	r0, [sp, #16]
   1d44c:	add	r0, sp, #12
   1d450:	add	r3, sp, #16
   1d454:	bl	245c0 <__assert_fail@plt+0x12e4c>
   1d458:	sub	r1, r8, sl
   1d45c:	cmp	r0, r1
   1d460:	bcc	1d488 <__assert_fail@plt+0xbd14>
   1d464:	cmn	r0, #3
   1d468:	bhi	1d488 <__assert_fail@plt+0xbd14>
   1d46c:	mov	r2, #0
   1d470:	str	r2, [r4, #16]
   1d474:	str	r2, [r4, #20]
   1d478:	sub	r0, r0, r1
   1d47c:	str	r0, [r4, #28]
   1d480:	ldr	r0, [sp, #12]
   1d484:	str	r0, [sp, #24]
   1d488:	ldr	r8, [sp, #24]
   1d48c:	cmn	r8, #1
   1d490:	bne	1d4b8 <__assert_fail@plt+0xbd44>
   1d494:	add	r2, sp, #24
   1d498:	mov	r0, r4
   1d49c:	mov	r1, r7
   1d4a0:	bl	1e260 <__assert_fail@plt+0xcaec>
   1d4a4:	sub	r0, r0, r7
   1d4a8:	str	r0, [r4, #28]
   1d4ac:	ldr	r8, [sp, #24]
   1d4b0:	cmn	r8, #1
   1d4b4:	beq	1d728 <__assert_fail@plt+0xbfb4>
   1d4b8:	ldrb	r0, [r4, #78]	; 0x4e
   1d4bc:	cmp	r0, #0
   1d4c0:	bne	1d7c8 <__assert_fail@plt+0xc054>
   1d4c4:	mov	r0, #0
   1d4c8:	cmp	r8, #10
   1d4cc:	bne	1d738 <__assert_fail@plt+0xbfc4>
   1d4d0:	ldrb	r0, [r4, #77]	; 0x4d
   1d4d4:	cmp	r0, #0
   1d4d8:	movwne	r0, #2
   1d4dc:	b	1d738 <__assert_fail@plt+0xbfc4>
   1d4e0:	ldr	r8, [r4, #12]
   1d4e4:	ldr	r9, [r4, #28]
   1d4e8:	mov	r0, #0
   1d4ec:	mov	r1, r9
   1d4f0:	add	r2, r0, r1
   1d4f4:	add	r2, r2, r2, lsr #31
   1d4f8:	asr	sl, r2, #1
   1d4fc:	ldr	r2, [r8, sl, lsl #2]
   1d500:	cmp	r2, r5
   1d504:	mov	r3, sl
   1d508:	bgt	1d518 <__assert_fail@plt+0xbda4>
   1d50c:	bge	1d524 <__assert_fail@plt+0xbdb0>
   1d510:	add	r0, sl, #1
   1d514:	mov	r3, r1
   1d518:	cmp	r0, r3
   1d51c:	mov	r1, r3
   1d520:	blt	1d4f0 <__assert_fail@plt+0xbd7c>
   1d524:	cmp	r2, r5
   1d528:	addlt	sl, sl, #1
   1d52c:	sub	r1, sl, #1
   1d530:	mov	r0, r4
   1d534:	mov	r2, r6
   1d538:	bl	1e194 <__assert_fail@plt+0xca20>
   1d53c:	str	r0, [r4, #60]	; 0x3c
   1d540:	cmp	r9, r5
   1d544:	ble	1d558 <__assert_fail@plt+0xbde4>
   1d548:	cmp	sl, r5
   1d54c:	ldreq	r0, [r8, sl, lsl #2]
   1d550:	cmpeq	r0, r5
   1d554:	beq	1d6b4 <__assert_fail@plt+0xbf40>
   1d558:	mov	r0, #0
   1d55c:	strb	r0, [r4, #76]	; 0x4c
   1d560:	sub	r0, r5, r7
   1d564:	ldr	r1, [r4, #44]	; 0x2c
   1d568:	ldr	r2, [r4, #52]	; 0x34
   1d56c:	add	r1, r0, r1
   1d570:	str	r1, [r4, #48]	; 0x30
   1d574:	add	r0, r0, r2
   1d578:	str	r0, [r4, #56]	; 0x38
   1d57c:	sub	r1, r8, #4
   1d580:	mov	r0, sl
   1d584:	cmp	sl, #1
   1d588:	blt	1d59c <__assert_fail@plt+0xbe28>
   1d58c:	ldr	r2, [r1, r0, lsl #2]
   1d590:	sub	sl, r0, #1
   1d594:	cmp	r2, r5
   1d598:	beq	1d580 <__assert_fail@plt+0xbe0c>
   1d59c:	cmp	r0, r9
   1d5a0:	bge	1d5c0 <__assert_fail@plt+0xbe4c>
   1d5a4:	ldr	r1, [r4, #8]
   1d5a8:	ldr	r2, [r1, r0, lsl #2]
   1d5ac:	cmn	r2, #1
   1d5b0:	bne	1d5c0 <__assert_fail@plt+0xbe4c>
   1d5b4:	add	r0, r0, #1
   1d5b8:	cmp	r0, r9
   1d5bc:	blt	1d5a8 <__assert_fail@plt+0xbe34>
   1d5c0:	cmp	r0, r9
   1d5c4:	bne	1d650 <__assert_fail@plt+0xbedc>
   1d5c8:	mov	r0, #0
   1d5cc:	str	r0, [r4, #28]
   1d5d0:	b	1d748 <__assert_fail@plt+0xbfd4>
   1d5d4:	ldr	r0, [r4, #4]
   1d5d8:	ldr	r2, [r4, #28]
   1d5dc:	add	r1, r0, r5
   1d5e0:	sub	r2, r2, r5
   1d5e4:	bl	1145c <memmove@plt>
   1d5e8:	b	1d2f8 <__assert_fail@plt+0xbb84>
   1d5ec:	ldrb	r0, [r4, #72]	; 0x48
   1d5f0:	cmp	r0, #0
   1d5f4:	beq	1d69c <__assert_fail@plt+0xbf28>
   1d5f8:	mov	r0, r4
   1d5fc:	bl	18520 <__assert_fail@plt+0x6dac>
   1d600:	b	1d38c <__assert_fail@plt+0xbc18>
   1d604:	ldr	r2, [r4]
   1d608:	ldr	r3, [r4, #24]
   1d60c:	ldr	r1, [r4, #64]	; 0x40
   1d610:	add	r3, r5, r3
   1d614:	add	r2, r2, r3
   1d618:	ldrb	r6, [r2, #-1]
   1d61c:	str	r0, [r4, #32]
   1d620:	cmp	r1, #0
   1d624:	ldrbne	r6, [r1, r6]
   1d628:	ldr	r0, [r4, #68]	; 0x44
   1d62c:	mov	r1, r6
   1d630:	bl	1e30c <__assert_fail@plt+0xcb98>
   1d634:	mov	r1, #1
   1d638:	cmp	r0, #0
   1d63c:	moveq	r1, #0
   1d640:	cmpeq	r6, #10
   1d644:	beq	1d754 <__assert_fail@plt+0xbfe0>
   1d648:	str	r1, [r4, #60]	; 0x3c
   1d64c:	b	1d310 <__assert_fail@plt+0xbb9c>
   1d650:	ldr	r0, [r8, r0, lsl #2]
   1d654:	subs	r0, r0, r5
   1d658:	str	r0, [r4, #28]
   1d65c:	beq	1d748 <__assert_fail@plt+0xbfd4>
   1d660:	ldr	r2, [r4, #28]
   1d664:	cmp	r2, #1
   1d668:	blt	1d68c <__assert_fail@plt+0xbf18>
   1d66c:	ldr	r0, [r4, #8]
   1d670:	mov	r1, #0
   1d674:	mvn	r3, #0
   1d678:	str	r3, [r0, r1, lsl #2]
   1d67c:	add	r1, r1, #1
   1d680:	ldr	r2, [r4, #28]
   1d684:	cmp	r1, r2
   1d688:	blt	1d678 <__assert_fail@plt+0xbf04>
   1d68c:	ldr	r0, [r4, #4]
   1d690:	mov	r1, #255	; 0xff
   1d694:	bl	1166c <memset@plt>
   1d698:	b	1d748 <__assert_fail@plt+0xbfd4>
   1d69c:	ldr	r0, [r4, #64]	; 0x40
   1d6a0:	cmp	r0, #0
   1d6a4:	beq	1d38c <__assert_fail@plt+0xbc18>
   1d6a8:	mov	r0, r4
   1d6ac:	bl	1871c <__assert_fail@plt+0x6fa8>
   1d6b0:	b	1d38c <__assert_fail@plt+0xbc18>
   1d6b4:	ldr	r0, [r4, #8]
   1d6b8:	add	r1, r0, r5, lsl #2
   1d6bc:	sub	r2, r9, r5
   1d6c0:	lsl	r2, r2, #2
   1d6c4:	bl	1145c <memmove@plt>
   1d6c8:	ldr	r0, [r4, #4]
   1d6cc:	ldr	r2, [r4, #28]
   1d6d0:	add	r1, r0, r5
   1d6d4:	sub	r2, r2, r5
   1d6d8:	bl	1145c <memmove@plt>
   1d6dc:	ldr	r0, [r4, #28]
   1d6e0:	ldr	r1, [r4, #32]
   1d6e4:	sub	r0, r0, r5
   1d6e8:	sub	r1, r1, r5
   1d6ec:	str	r0, [r4, #28]
   1d6f0:	str	r1, [r4, #32]
   1d6f4:	cmp	r0, #1
   1d6f8:	blt	1d310 <__assert_fail@plt+0xbb9c>
   1d6fc:	ldr	r0, [r4, #12]
   1d700:	add	r1, r0, r5, lsl #2
   1d704:	mov	r2, #0
   1d708:	ldr	r3, [r1, r2, lsl #2]
   1d70c:	sub	r3, r3, r5
   1d710:	str	r3, [r0, r2, lsl #2]
   1d714:	add	r2, r2, #1
   1d718:	ldr	r3, [r4, #28]
   1d71c:	cmp	r2, r3
   1d720:	blt	1d708 <__assert_fail@plt+0xbf94>
   1d724:	b	1d310 <__assert_fail@plt+0xbb9c>
   1d728:	sub	r1, r9, #1
   1d72c:	mov	r0, r4
   1d730:	mov	r2, r6
   1d734:	bl	1e194 <__assert_fail@plt+0xca20>
   1d738:	str	r0, [r4, #60]	; 0x3c
   1d73c:	ldr	r0, [r4, #28]
   1d740:	cmp	r0, #0
   1d744:	bne	1d78c <__assert_fail@plt+0xc018>
   1d748:	ldr	r0, [r4, #28]
   1d74c:	str	r0, [r4, #32]
   1d750:	b	1d310 <__assert_fail@plt+0xbb9c>
   1d754:	ldrb	r1, [r4, #77]	; 0x4d
   1d758:	cmp	r1, #0
   1d75c:	movwne	r1, #2
   1d760:	b	1d648 <__assert_fail@plt+0xbed4>
   1d764:	mov	r0, #0
   1d768:	strb	r0, [r4, #76]	; 0x4c
   1d76c:	sub	r0, r5, r7
   1d770:	ldr	r1, [r4, #44]	; 0x2c
   1d774:	ldr	r2, [r4, #52]	; 0x34
   1d778:	add	r1, r0, r1
   1d77c:	str	r1, [r4, #48]	; 0x30
   1d780:	add	r0, r0, r2
   1d784:	str	r0, [r4, #56]	; 0x38
   1d788:	b	1d3bc <__assert_fail@plt+0xbc48>
   1d78c:	ldr	r2, [r4, #28]
   1d790:	cmp	r2, #1
   1d794:	blt	1d7b8 <__assert_fail@plt+0xc044>
   1d798:	ldr	r0, [r4, #8]
   1d79c:	mov	r1, #0
   1d7a0:	mvn	r3, #0
   1d7a4:	str	r3, [r0, r1, lsl #2]
   1d7a8:	add	r1, r1, #1
   1d7ac:	ldr	r2, [r4, #28]
   1d7b0:	cmp	r1, r2
   1d7b4:	blt	1d7a4 <__assert_fail@plt+0xc030>
   1d7b8:	ldrb	r0, [r4, #75]	; 0x4b
   1d7bc:	cmp	r0, #0
   1d7c0:	bne	1d68c <__assert_fail@plt+0xbf18>
   1d7c4:	b	1d748 <__assert_fail@plt+0xbfd4>
   1d7c8:	mov	r0, r8
   1d7cc:	bl	11648 <iswalnum@plt>
   1d7d0:	mov	r1, r0
   1d7d4:	mov	r0, #1
   1d7d8:	cmp	r8, #95	; 0x5f
   1d7dc:	beq	1d738 <__assert_fail@plt+0xbfc4>
   1d7e0:	cmp	r1, #0
   1d7e4:	beq	1d4c4 <__assert_fail@plt+0xbd50>
   1d7e8:	b	1d738 <__assert_fail@plt+0xbfc4>
   1d7ec:	cmp	r2, #1
   1d7f0:	blt	1d834 <__assert_fail@plt+0xc0c0>
   1d7f4:	sub	r1, sl, #1
   1d7f8:	sub	r1, r1, r3
   1d7fc:	cmn	r1, #7
   1d800:	mvnle	r1, #6
   1d804:	mvn	r3, #1
   1d808:	sub	ip, r3, r1
   1d80c:	add	r1, sp, #6
   1d810:	ldrb	r3, [sl, ip]
   1d814:	ldrb	r3, [r0, r3]
   1d818:	strb	r3, [r1, ip]
   1d81c:	sub	lr, ip, #1
   1d820:	add	r3, ip, #1
   1d824:	cmp	r3, #1
   1d828:	mov	ip, lr
   1d82c:	bgt	1d810 <__assert_fail@plt+0xc09c>
   1d830:	b	1d440 <__assert_fail@plt+0xbccc>
   1d834:	add	r1, sp, #6
   1d838:	b	1d440 <__assert_fail@plt+0xbccc>
   1d83c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d840:	add	fp, sp, #28
   1d844:	sub	sp, sp, #20
   1d848:	mov	sl, r2
   1d84c:	str	r1, [sp, #12]
   1d850:	mov	r7, r0
   1d854:	ldr	r5, [r0, #84]	; 0x54
   1d858:	ldr	r8, [r0, #40]	; 0x28
   1d85c:	mov	r0, #0
   1d860:	str	r0, [sp, #16]
   1d864:	cmp	r2, #0
   1d868:	str	r2, [sp, #4]
   1d86c:	movwne	sl, #1
   1d870:	ldr	r4, [r5, #36]	; 0x24
   1d874:	ldrsb	r0, [r4, #52]	; 0x34
   1d878:	cmn	r0, #1
   1d87c:	bgt	1d8e8 <__assert_fail@plt+0xc174>
   1d880:	ldr	r2, [r7, #88]	; 0x58
   1d884:	sub	r1, r8, #1
   1d888:	mov	r0, r7
   1d88c:	bl	1e194 <__assert_fail@plt+0xca20>
   1d890:	tst	r0, #1
   1d894:	bne	1d8e4 <__assert_fail@plt+0xc170>
   1d898:	mov	r3, r0
   1d89c:	cmp	r0, #0
   1d8a0:	beq	1d8e8 <__assert_fail@plt+0xc174>
   1d8a4:	ands	r1, r3, #2
   1d8a8:	and	r0, r3, #4
   1d8ac:	cmpne	r0, #0
   1d8b0:	bne	1d940 <__assert_fail@plt+0xc1cc>
   1d8b4:	cmp	r1, #0
   1d8b8:	bne	1d950 <__assert_fail@plt+0xc1dc>
   1d8bc:	cmp	r0, #0
   1d8c0:	beq	1d8e8 <__assert_fail@plt+0xc174>
   1d8c4:	ldr	r2, [r4, #40]	; 0x28
   1d8c8:	add	r0, sp, #16
   1d8cc:	mov	r1, r5
   1d8d0:	bl	1caa4 <__assert_fail@plt+0xb330>
   1d8d4:	mov	r4, r0
   1d8d8:	cmp	r4, #0
   1d8dc:	bne	1d8f0 <__assert_fail@plt+0xc17c>
   1d8e0:	b	1daf4 <__assert_fail@plt+0xc380>
   1d8e4:	ldr	r4, [r5, #40]	; 0x28
   1d8e8:	cmp	r4, #0
   1d8ec:	beq	1daf4 <__assert_fail@plt+0xc380>
   1d8f0:	ldr	r0, [r7, #100]	; 0x64
   1d8f4:	cmp	r0, #0
   1d8f8:	beq	1d90c <__assert_fail@plt+0xc198>
   1d8fc:	str	r4, [r0, r8, lsl #2]
   1d900:	ldr	r0, [r5, #76]	; 0x4c
   1d904:	cmp	r0, #0
   1d908:	bne	1db24 <__assert_fail@plt+0xc3b0>
   1d90c:	ldrb	r0, [r4, #52]	; 0x34
   1d910:	tst	r0, #16
   1d914:	bne	1dafc <__assert_fail@plt+0xc388>
   1d918:	mov	r0, #0
   1d91c:	str	r0, [sp, #8]
   1d920:	mvn	r6, #0
   1d924:	str	r8, [sp]
   1d928:	ldr	r0, [r7, #40]	; 0x28
   1d92c:	ldr	r1, [r7, #56]	; 0x38
   1d930:	cmp	r1, r0
   1d934:	ble	1dad0 <__assert_fail@plt+0xc35c>
   1d938:	add	r8, sp, #16
   1d93c:	b	1d9bc <__assert_fail@plt+0xc248>
   1d940:	ldr	r4, [r5, #48]	; 0x30
   1d944:	cmp	r4, #0
   1d948:	bne	1d8f0 <__assert_fail@plt+0xc17c>
   1d94c:	b	1daf4 <__assert_fail@plt+0xc380>
   1d950:	ldr	r4, [r5, #44]	; 0x2c
   1d954:	cmp	r4, #0
   1d958:	bne	1d8f0 <__assert_fail@plt+0xc17c>
   1d95c:	b	1daf4 <__assert_fail@plt+0xc380>
   1d960:	ldr	r2, [r7, #48]	; 0x30
   1d964:	cmp	r1, r2
   1d968:	bge	1d9d0 <__assert_fail@plt+0xc25c>
   1d96c:	b	1d97c <__assert_fail@plt+0xc208>
   1d970:	ldr	r2, [r7, #48]	; 0x30
   1d974:	cmp	r1, r2
   1d978:	bge	1d9dc <__assert_fail@plt+0xc268>
   1d97c:	add	r1, r0, #2
   1d980:	mov	r0, r7
   1d984:	bl	1e6b8 <__assert_fail@plt+0xcf44>
   1d988:	str	r0, [sp, #16]
   1d98c:	cmp	r0, #0
   1d990:	beq	1d9dc <__assert_fail@plt+0xc268>
   1d994:	b	1daf4 <__assert_fail@plt+0xc380>
   1d998:	cmp	r9, r4
   1d99c:	ldr	r0, [sp]
   1d9a0:	moveq	r0, r5
   1d9a4:	str	r0, [sp]
   1d9a8:	sub	r0, r9, r4
   1d9ac:	clz	r0, r0
   1d9b0:	lsr	r0, r0, #5
   1d9b4:	and	sl, sl, r0
   1d9b8:	b	1da70 <__assert_fail@plt+0xc2fc>
   1d9bc:	mov	r9, r4
   1d9c0:	add	r5, r0, #1
   1d9c4:	ldr	r1, [r7, #36]	; 0x24
   1d9c8:	cmp	r5, r1
   1d9cc:	bge	1d960 <__assert_fail@plt+0xc1ec>
   1d9d0:	ldr	r1, [r7, #28]
   1d9d4:	cmp	r5, r1
   1d9d8:	bge	1d970 <__assert_fail@plt+0xc1fc>
   1d9dc:	mov	r0, r8
   1d9e0:	mov	r1, r7
   1d9e4:	mov	r2, r9
   1d9e8:	bl	1e78c <__assert_fail@plt+0xd018>
   1d9ec:	mov	r4, r0
   1d9f0:	ldr	r0, [r7, #100]	; 0x64
   1d9f4:	cmp	r0, #0
   1d9f8:	beq	1da10 <__assert_fail@plt+0xc29c>
   1d9fc:	mov	r0, r8
   1da00:	mov	r1, r7
   1da04:	mov	r2, r4
   1da08:	bl	1e83c <__assert_fail@plt+0xd0c8>
   1da0c:	mov	r4, r0
   1da10:	cmp	r4, #0
   1da14:	bne	1da64 <__assert_fail@plt+0xc2f0>
   1da18:	ldr	r0, [sp, #16]
   1da1c:	cmp	r0, #0
   1da20:	bne	1daf4 <__assert_fail@plt+0xc380>
   1da24:	ldr	r0, [sp, #8]
   1da28:	clz	r0, r0
   1da2c:	lsr	r0, r0, #5
   1da30:	ldr	r1, [sp, #12]
   1da34:	orr	r0, r0, r1
   1da38:	cmp	r0, #1
   1da3c:	bne	1dad0 <__assert_fail@plt+0xc35c>
   1da40:	ldr	r0, [r7, #100]	; 0x64
   1da44:	cmp	r0, #0
   1da48:	beq	1dad0 <__assert_fail@plt+0xc35c>
   1da4c:	mov	r0, r8
   1da50:	mov	r1, r7
   1da54:	bl	1e988 <__assert_fail@plt+0xd214>
   1da58:	mov	r4, r0
   1da5c:	cmp	r0, #0
   1da60:	beq	1dad0 <__assert_fail@plt+0xc35c>
   1da64:	tst	sl, #1
   1da68:	bne	1d998 <__assert_fail@plt+0xc224>
   1da6c:	mov	sl, #0
   1da70:	ldrb	r0, [r4, #52]	; 0x34
   1da74:	tst	r0, #16
   1da78:	beq	1dac0 <__assert_fail@plt+0xc34c>
   1da7c:	sxtb	r0, r0
   1da80:	cmn	r0, #1
   1da84:	bgt	1daa0 <__assert_fail@plt+0xc32c>
   1da88:	ldr	r2, [r7, #40]	; 0x28
   1da8c:	mov	r0, r7
   1da90:	mov	r1, r4
   1da94:	bl	1dbb0 <__assert_fail@plt+0xc43c>
   1da98:	cmp	r0, #0
   1da9c:	beq	1dac0 <__assert_fail@plt+0xc34c>
   1daa0:	ldr	r6, [r7, #40]	; 0x28
   1daa4:	ldr	r0, [sp, #12]
   1daa8:	cmp	r0, #0
   1daac:	beq	1dae8 <__assert_fail@plt+0xc374>
   1dab0:	mov	r0, #0
   1dab4:	str	r0, [sp, #4]
   1dab8:	mov	r0, #1
   1dabc:	str	r0, [sp, #8]
   1dac0:	ldr	r0, [r7, #40]	; 0x28
   1dac4:	ldr	r1, [r7, #56]	; 0x38
   1dac8:	cmp	r1, r0
   1dacc:	bgt	1d9bc <__assert_fail@plt+0xc248>
   1dad0:	ldr	r2, [sp, #4]
   1dad4:	cmp	r2, #0
   1dad8:	ldrne	r0, [r2]
   1dadc:	ldrne	r1, [sp]
   1dae0:	addne	r0, r0, r1
   1dae4:	strne	r0, [r2]
   1dae8:	mov	r0, r6
   1daec:	sub	sp, fp, #28
   1daf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1daf4:	mvn	r6, #1
   1daf8:	b	1dae8 <__assert_fail@plt+0xc374>
   1dafc:	sxtb	r0, r0
   1db00:	cmn	r0, #1
   1db04:	ble	1db74 <__assert_fail@plt+0xc400>
   1db08:	mov	r0, #1
   1db0c:	str	r0, [sp, #8]
   1db10:	ldr	r0, [sp, #12]
   1db14:	cmp	r0, #0
   1db18:	mov	r6, r8
   1db1c:	bne	1d924 <__assert_fail@plt+0xc1b0>
   1db20:	b	1dba8 <__assert_fail@plt+0xc434>
   1db24:	add	r5, r4, #4
   1db28:	mov	sl, #0
   1db2c:	mov	r0, r7
   1db30:	mov	r1, r5
   1db34:	mov	r2, #0
   1db38:	bl	1e334 <__assert_fail@plt+0xcbc0>
   1db3c:	str	r0, [sp, #16]
   1db40:	cmp	r0, #0
   1db44:	bne	1db6c <__assert_fail@plt+0xc3f8>
   1db48:	ldrb	r0, [r4, #52]	; 0x34
   1db4c:	tst	r0, #64	; 0x40
   1db50:	beq	1d90c <__assert_fail@plt+0xc198>
   1db54:	mov	r0, r7
   1db58:	mov	r1, r5
   1db5c:	bl	1e3c0 <__assert_fail@plt+0xcc4c>
   1db60:	str	r0, [sp, #16]
   1db64:	cmp	r0, #0
   1db68:	beq	1d90c <__assert_fail@plt+0xc198>
   1db6c:	mov	r6, r0
   1db70:	b	1dae8 <__assert_fail@plt+0xc374>
   1db74:	mov	r0, r7
   1db78:	mov	r1, r4
   1db7c:	mov	r2, r8
   1db80:	bl	1dbb0 <__assert_fail@plt+0xc43c>
   1db84:	cmp	r0, #0
   1db88:	mov	r6, r8
   1db8c:	mvneq	r6, #0
   1db90:	movwne	r0, #1
   1db94:	str	r0, [sp, #8]
   1db98:	beq	1d924 <__assert_fail@plt+0xc1b0>
   1db9c:	ldr	r0, [sp, #12]
   1dba0:	cmp	r0, #0
   1dba4:	bne	1d924 <__assert_fail@plt+0xc1b0>
   1dba8:	mov	r6, r8
   1dbac:	b	1dae8 <__assert_fail@plt+0xc374>
   1dbb0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1dbb4:	add	fp, sp, #24
   1dbb8:	mov	r3, r2
   1dbbc:	mov	r8, r1
   1dbc0:	mov	r6, r0
   1dbc4:	ldr	r2, [r0, #88]	; 0x58
   1dbc8:	mov	r1, r3
   1dbcc:	bl	1e194 <__assert_fail@plt+0xca20>
   1dbd0:	mov	r9, r0
   1dbd4:	ldr	r0, [r8, #8]
   1dbd8:	cmp	r0, #1
   1dbdc:	blt	1dc1c <__assert_fail@plt+0xc4a8>
   1dbe0:	ldr	r4, [r8, #12]
   1dbe4:	ldr	r6, [r6, #84]	; 0x54
   1dbe8:	mov	r5, #0
   1dbec:	ldr	r7, [r4, r5, lsl #2]
   1dbf0:	mov	r0, r6
   1dbf4:	mov	r1, r7
   1dbf8:	mov	r2, r9
   1dbfc:	bl	21058 <__assert_fail@plt+0xf8e4>
   1dc00:	cmp	r0, #0
   1dc04:	movne	r0, r7
   1dc08:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1dc0c:	add	r5, r5, #1
   1dc10:	ldr	r0, [r8, #8]
   1dc14:	cmp	r5, r0
   1dc18:	blt	1dbec <__assert_fail@plt+0xc478>
   1dc1c:	mov	r7, #0
   1dc20:	mov	r0, r7
   1dc24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1dc28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc2c:	add	fp, sp, #28
   1dc30:	sub	sp, sp, #44	; 0x2c
   1dc34:	ldr	r7, [r0, #92]	; 0x5c
   1dc38:	cmn	r7, #-1073741822	; 0xc0000002
   1dc3c:	bhi	1de38 <__assert_fail@plt+0xc6c4>
   1dc40:	ldr	r5, [r0, #84]	; 0x54
   1dc44:	str	r0, [sp, #12]
   1dc48:	ldr	sl, [r0, #96]	; 0x60
   1dc4c:	mov	r0, #4
   1dc50:	add	r6, r0, r7, lsl #2
   1dc54:	mov	r0, r6
   1dc58:	bl	23e64 <__assert_fail@plt+0x126f0>
   1dc5c:	mov	r4, #12
   1dc60:	cmp	r0, #0
   1dc64:	beq	1de08 <__assert_fail@plt+0xc694>
   1dc68:	mov	r9, r0
   1dc6c:	ldr	r0, [r5, #76]	; 0x4c
   1dc70:	cmp	r0, #0
   1dc74:	beq	1dc9c <__assert_fail@plt+0xc528>
   1dc78:	mov	r0, r6
   1dc7c:	bl	23e64 <__assert_fail@plt+0x126f0>
   1dc80:	cmp	r0, #0
   1dc84:	beq	1de0c <__assert_fail@plt+0xc698>
   1dc88:	mov	r8, r0
   1dc8c:	str	r5, [sp, #8]
   1dc90:	add	r4, sp, #16
   1dc94:	mov	r5, sl
   1dc98:	b	1dd04 <__assert_fail@plt+0xc590>
   1dc9c:	str	r7, [sp]
   1dca0:	add	r4, sp, #16
   1dca4:	mov	r8, #0
   1dca8:	mov	r0, r4
   1dcac:	mov	r1, r9
   1dcb0:	mov	r2, #0
   1dcb4:	mov	r3, sl
   1dcb8:	bl	210cc <__assert_fail@plt+0xf958>
   1dcbc:	ldr	r0, [sp, #12]
   1dcc0:	mov	r1, r4
   1dcc4:	bl	210ec <__assert_fail@plt+0xf978>
   1dcc8:	mov	r4, r0
   1dccc:	ldr	r0, [sp, #40]	; 0x28
   1dcd0:	bl	13f04 <__assert_fail@plt+0x2790>
   1dcd4:	cmp	r4, #0
   1dcd8:	bne	1de10 <__assert_fail@plt+0xc69c>
   1dcdc:	ldr	r0, [r9]
   1dce0:	cmp	r0, #0
   1dce4:	bne	1ddec <__assert_fail@plt+0xc678>
   1dce8:	mov	r4, #1
   1dcec:	b	1de10 <__assert_fail@plt+0xc69c>
   1dcf0:	mov	r0, sl
   1dcf4:	mov	r2, r7
   1dcf8:	bl	1dbb0 <__assert_fail@plt+0xc43c>
   1dcfc:	mov	r4, r5
   1dd00:	mov	r5, r0
   1dd04:	add	sl, r7, #1
   1dd08:	lsl	r2, sl, #2
   1dd0c:	mov	r0, r8
   1dd10:	mov	r1, #0
   1dd14:	bl	1166c <memset@plt>
   1dd18:	str	r7, [sp]
   1dd1c:	mov	r0, r4
   1dd20:	mov	r1, r9
   1dd24:	mov	r6, r8
   1dd28:	mov	r2, r8
   1dd2c:	mov	r8, r5
   1dd30:	mov	r3, r5
   1dd34:	bl	210cc <__assert_fail@plt+0xf958>
   1dd38:	ldr	r0, [sp, #12]
   1dd3c:	mov	r5, r4
   1dd40:	mov	r1, r4
   1dd44:	bl	210ec <__assert_fail@plt+0xf978>
   1dd48:	mov	r4, r0
   1dd4c:	ldr	r0, [sp, #40]	; 0x28
   1dd50:	bl	13f04 <__assert_fail@plt+0x2790>
   1dd54:	cmp	r4, #0
   1dd58:	bne	1de40 <__assert_fail@plt+0xc6cc>
   1dd5c:	mov	r1, r9
   1dd60:	ldr	r0, [r9]
   1dd64:	cmp	r0, #0
   1dd68:	ldreq	r0, [r6]
   1dd6c:	cmpeq	r0, #0
   1dd70:	bne	1ddc0 <__assert_fail@plt+0xc64c>
   1dd74:	mov	r4, #1
   1dd78:	cmp	r7, #1
   1dd7c:	blt	1de2c <__assert_fail@plt+0xc6b8>
   1dd80:	sub	r7, r7, #1
   1dd84:	ldr	sl, [sp, #12]
   1dd88:	ldr	r0, [sl, #100]	; 0x64
   1dd8c:	mov	r9, r1
   1dd90:	mov	r8, r6
   1dd94:	ldr	r1, [r0, r7, lsl #2]
   1dd98:	cmp	r1, #0
   1dd9c:	ldrbne	r2, [r1, #52]	; 0x34
   1dda0:	tstne	r2, #16
   1dda4:	bne	1dcf0 <__assert_fail@plt+0xc57c>
   1dda8:	sub	r1, r7, #1
   1ddac:	add	r2, r7, #1
   1ddb0:	cmp	r2, #2
   1ddb4:	mov	r7, r1
   1ddb8:	bge	1dd94 <__assert_fail@plt+0xc620>
   1ddbc:	b	1de10 <__assert_fail@plt+0xc69c>
   1ddc0:	ldr	r0, [sp, #8]
   1ddc4:	mov	r9, r1
   1ddc8:	mov	r2, r6
   1ddcc:	mov	r3, sl
   1ddd0:	bl	211f8 <__assert_fail@plt+0xfa84>
   1ddd4:	mov	r4, r0
   1ddd8:	mov	r0, r6
   1dddc:	bl	13f04 <__assert_fail@plt+0x2790>
   1dde0:	cmp	r4, #0
   1dde4:	mov	sl, r8
   1dde8:	bne	1de0c <__assert_fail@plt+0xc698>
   1ddec:	ldr	r4, [sp, #12]
   1ddf0:	ldr	r0, [r4, #100]	; 0x64
   1ddf4:	bl	13f04 <__assert_fail@plt+0x2790>
   1ddf8:	str	r7, [r4, #92]	; 0x5c
   1ddfc:	str	sl, [r4, #96]	; 0x60
   1de00:	str	r9, [r4, #100]	; 0x64
   1de04:	mov	r4, #0
   1de08:	mov	r9, #0
   1de0c:	mov	r8, #0
   1de10:	mov	r0, r9
   1de14:	bl	13f04 <__assert_fail@plt+0x2790>
   1de18:	mov	r0, r8
   1de1c:	bl	13f04 <__assert_fail@plt+0x2790>
   1de20:	mov	r0, r4
   1de24:	sub	sp, fp, #28
   1de28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de2c:	mov	r9, r1
   1de30:	mov	r8, r6
   1de34:	b	1de10 <__assert_fail@plt+0xc69c>
   1de38:	mov	r4, #12
   1de3c:	b	1de20 <__assert_fail@plt+0xc6ac>
   1de40:	mov	r8, r6
   1de44:	b	1de10 <__assert_fail@plt+0xc69c>
   1de48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1de4c:	add	fp, sp, #24
   1de50:	mov	r8, r0
   1de54:	ldr	r0, [r0, #124]	; 0x7c
   1de58:	cmp	r0, #1
   1de5c:	blt	1dee0 <__assert_fail@plt+0xc76c>
   1de60:	mov	r7, #0
   1de64:	ldr	r0, [r8, #132]	; 0x84
   1de68:	ldr	r5, [r0, r7, lsl #2]
   1de6c:	ldr	r0, [r5, #16]
   1de70:	cmp	r0, #1
   1de74:	blt	1dea4 <__assert_fail@plt+0xc730>
   1de78:	mov	r4, #0
   1de7c:	ldr	r0, [r5, #20]
   1de80:	ldr	r6, [r0, r4, lsl #2]
   1de84:	ldr	r0, [r6, #16]
   1de88:	bl	13f04 <__assert_fail@plt+0x2790>
   1de8c:	mov	r0, r6
   1de90:	bl	13f04 <__assert_fail@plt+0x2790>
   1de94:	add	r4, r4, #1
   1de98:	ldr	r0, [r5, #16]
   1de9c:	cmp	r4, r0
   1dea0:	blt	1de7c <__assert_fail@plt+0xc708>
   1dea4:	ldr	r0, [r5, #20]
   1dea8:	bl	13f04 <__assert_fail@plt+0x2790>
   1deac:	ldr	r0, [r5, #8]
   1deb0:	cmp	r0, #0
   1deb4:	beq	1dec8 <__assert_fail@plt+0xc754>
   1deb8:	ldr	r0, [r0, #8]
   1debc:	bl	13f04 <__assert_fail@plt+0x2790>
   1dec0:	ldr	r0, [r5, #8]
   1dec4:	bl	13f04 <__assert_fail@plt+0x2790>
   1dec8:	mov	r0, r5
   1decc:	bl	13f04 <__assert_fail@plt+0x2790>
   1ded0:	add	r7, r7, #1
   1ded4:	ldr	r0, [r8, #124]	; 0x7c
   1ded8:	cmp	r7, r0
   1dedc:	blt	1de64 <__assert_fail@plt+0xc6f0>
   1dee0:	mov	r0, #0
   1dee4:	str	r0, [r8, #108]	; 0x6c
   1dee8:	str	r0, [r8, #124]	; 0x7c
   1deec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1def0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1def4:	add	fp, sp, #28
   1def8:	sub	sp, sp, #204	; 0xcc
   1defc:	mov	r5, r3
   1df00:	mov	r6, r2
   1df04:	mov	r8, r1
   1df08:	ldr	r4, [r0]
   1df0c:	movw	r0, #22824	; 0x5928
   1df10:	movt	r0, #2
   1df14:	vldr	d16, [r0]
   1df18:	ldr	r0, [r0, #8]
   1df1c:	str	r0, [fp, #-56]	; 0xffffffc8
   1df20:	vstr	d16, [fp, #-64]	; 0xffffffc0
   1df24:	add	r0, sp, #28
   1df28:	bl	22294 <__assert_fail@plt+0x10b20>
   1df2c:	mov	r7, #0
   1df30:	ldr	r0, [fp, #8]
   1df34:	cmp	r0, #0
   1df38:	mov	r9, #0
   1df3c:	beq	1df60 <__assert_fail@plt+0xc7ec>
   1df40:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1df44:	add	r0, r0, r0, lsl #1
   1df48:	lsl	r0, r0, #3
   1df4c:	bl	23e64 <__assert_fail@plt+0x126f0>
   1df50:	str	r0, [fp, #-56]	; 0xffffffc8
   1df54:	cmp	r0, #0
   1df58:	beq	1e164 <__assert_fail@plt+0xc9f0>
   1df5c:	sub	r9, fp, #64	; 0x40
   1df60:	ldr	sl, [r4, #72]	; 0x48
   1df64:	str	r7, [fp, #-44]	; 0xffffffd4
   1df68:	str	r7, [fp, #-48]	; 0xffffffd0
   1df6c:	str	r7, [fp, #-40]	; 0xffffffd8
   1df70:	add	r0, sp, #28
   1df74:	mov	r1, r6
   1df78:	bl	222ac <__assert_fail@plt+0x10b38>
   1df7c:	cmp	r0, #0
   1df80:	beq	1e154 <__assert_fail@plt+0xc9e0>
   1df84:	str	r4, [sp, #20]
   1df88:	str	r8, [sp, #24]
   1df8c:	add	r0, sp, #28
   1df90:	bl	22384 <__assert_fail@plt+0x10c10>
   1df94:	mov	r4, r0
   1df98:	lsl	r2, r6, #3
   1df9c:	mov	r1, r5
   1dfa0:	bl	1148c <memcpy@plt>
   1dfa4:	ldr	r8, [r5]
   1dfa8:	ldr	r0, [r5, #4]
   1dfac:	str	r8, [fp, #-32]	; 0xffffffe0
   1dfb0:	cmp	r8, r0
   1dfb4:	bgt	1e128 <__assert_fail@plt+0xc9b4>
   1dfb8:	clz	r0, r6
   1dfbc:	lsr	r0, r0, #5
   1dfc0:	clz	r1, r9
   1dfc4:	lsr	r1, r1, #5
   1dfc8:	orr	r0, r1, r0
   1dfcc:	str	r0, [sp, #16]
   1dfd0:	ldr	r7, [sp, #24]
   1dfd4:	str	r8, [sp]
   1dfd8:	str	r6, [sp, #4]
   1dfdc:	ldr	r0, [sp, #20]
   1dfe0:	mov	r1, r5
   1dfe4:	mov	r2, r4
   1dfe8:	mov	r3, sl
   1dfec:	bl	2238c <__assert_fail@plt+0x10c18>
   1dff0:	ldr	r0, [r5, #4]
   1dff4:	cmp	r8, r0
   1dff8:	ldreq	r0, [r7, #96]	; 0x60
   1dffc:	cmpeq	sl, r0
   1e000:	beq	1e020 <__assert_fail@plt+0xc8ac>
   1e004:	cmp	r9, #0
   1e008:	beq	1e088 <__assert_fail@plt+0xc914>
   1e00c:	sub	r0, fp, #48	; 0x30
   1e010:	mov	r1, sl
   1e014:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   1e018:	cmp	r0, #0
   1e01c:	beq	1e088 <__assert_fail@plt+0xc914>
   1e020:	ldr	r0, [sp, #16]
   1e024:	cmp	r0, #0
   1e028:	bne	1e128 <__assert_fail@plt+0xc9b4>
   1e02c:	mov	r0, #0
   1e030:	ldr	r1, [r5, r0, lsl #3]
   1e034:	cmp	r1, #0
   1e038:	blt	1e04c <__assert_fail@plt+0xc8d8>
   1e03c:	add	r1, r5, r0, lsl #3
   1e040:	ldr	r1, [r1, #4]
   1e044:	cmn	r1, #1
   1e048:	beq	1e05c <__assert_fail@plt+0xc8e8>
   1e04c:	add	r0, r0, #1
   1e050:	cmp	r0, r6
   1e054:	bcc	1e030 <__assert_fail@plt+0xc8bc>
   1e058:	b	1e128 <__assert_fail@plt+0xc9b4>
   1e05c:	str	r4, [sp]
   1e060:	sub	r0, fp, #48	; 0x30
   1e064:	str	r0, [sp, #4]
   1e068:	mov	r0, r9
   1e06c:	sub	r1, fp, #32
   1e070:	mov	r2, r6
   1e074:	mov	r3, r5
   1e078:	bl	22440 <__assert_fail@plt+0x10ccc>
   1e07c:	mov	sl, r0
   1e080:	cmn	r0, #1
   1e084:	ble	1e128 <__assert_fail@plt+0xc9b4>
   1e088:	sub	r0, fp, #32
   1e08c:	stm	sp, {r0, sl}
   1e090:	sub	r0, fp, #48	; 0x30
   1e094:	str	r0, [sp, #8]
   1e098:	str	r9, [sp, #12]
   1e09c:	mov	r0, r7
   1e0a0:	mov	r1, r6
   1e0a4:	mov	r2, r5
   1e0a8:	mov	r3, r4
   1e0ac:	bl	224f8 <__assert_fail@plt+0x10d84>
   1e0b0:	mov	sl, r0
   1e0b4:	cmn	r0, #1
   1e0b8:	ble	1e0d0 <__assert_fail@plt+0xc95c>
   1e0bc:	ldr	r0, [r5, #4]
   1e0c0:	ldr	r8, [fp, #-32]	; 0xffffffe0
   1e0c4:	cmp	r8, r0
   1e0c8:	ble	1dfd4 <__assert_fail@plt+0xc860>
   1e0cc:	b	1e128 <__assert_fail@plt+0xc9b4>
   1e0d0:	cmn	sl, #2
   1e0d4:	beq	1e14c <__assert_fail@plt+0xc9d8>
   1e0d8:	str	r4, [sp]
   1e0dc:	sub	r0, fp, #48	; 0x30
   1e0e0:	str	r0, [sp, #4]
   1e0e4:	mov	r0, r9
   1e0e8:	sub	r1, fp, #32
   1e0ec:	mov	r2, r6
   1e0f0:	mov	r3, r5
   1e0f4:	bl	22440 <__assert_fail@plt+0x10ccc>
   1e0f8:	mov	sl, r0
   1e0fc:	cmn	r0, #1
   1e100:	bgt	1e0bc <__assert_fail@plt+0xc948>
   1e104:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1e108:	bl	13f04 <__assert_fail@plt+0x2790>
   1e10c:	add	r0, sp, #28
   1e110:	bl	22300 <__assert_fail@plt+0x10b8c>
   1e114:	mov	r0, r9
   1e118:	bl	2231c <__assert_fail@plt+0x10ba8>
   1e11c:	mov	r0, #1
   1e120:	sub	sp, fp, #28
   1e124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e128:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1e12c:	bl	13f04 <__assert_fail@plt+0x2790>
   1e130:	add	r0, sp, #28
   1e134:	bl	22300 <__assert_fail@plt+0x10b8c>
   1e138:	mov	r0, r9
   1e13c:	bl	2231c <__assert_fail@plt+0x10ba8>
   1e140:	mov	r0, #0
   1e144:	sub	sp, fp, #28
   1e148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e14c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1e150:	bl	13f04 <__assert_fail@plt+0x2790>
   1e154:	add	r0, sp, #28
   1e158:	bl	22300 <__assert_fail@plt+0x10b8c>
   1e15c:	mov	r0, r9
   1e160:	bl	2231c <__assert_fail@plt+0x10ba8>
   1e164:	mov	r0, #12
   1e168:	sub	sp, fp, #28
   1e16c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e170:	push	{r4, sl, fp, lr}
   1e174:	add	fp, sp, #8
   1e178:	mov	r4, r0
   1e17c:	bl	1de48 <__assert_fail@plt+0xc6d4>
   1e180:	ldr	r0, [r4, #132]	; 0x84
   1e184:	bl	13f04 <__assert_fail@plt+0x2790>
   1e188:	ldr	r0, [r4, #116]	; 0x74
   1e18c:	pop	{r4, sl, fp, lr}
   1e190:	b	13f04 <__assert_fail@plt+0x2790>
   1e194:	push	{r4, r5, fp, lr}
   1e198:	add	fp, sp, #8
   1e19c:	mov	r4, r0
   1e1a0:	cmn	r1, #1
   1e1a4:	ldrle	r0, [r4, #60]	; 0x3c
   1e1a8:	pople	{r4, r5, fp, pc}
   1e1ac:	ldr	r0, [r4, #48]	; 0x30
   1e1b0:	cmp	r0, r1
   1e1b4:	beq	1e254 <__assert_fail@plt+0xcae0>
   1e1b8:	ldr	r0, [r4, #80]	; 0x50
   1e1bc:	cmp	r0, #2
   1e1c0:	blt	1e214 <__assert_fail@plt+0xcaa0>
   1e1c4:	ldr	r0, [r4, #8]
   1e1c8:	b	1e1e0 <__assert_fail@plt+0xca6c>
   1e1cc:	sub	r2, r1, #1
   1e1d0:	cmp	r1, #0
   1e1d4:	mov	r1, r2
   1e1d8:	ldrle	r0, [r4, #60]	; 0x3c
   1e1dc:	pople	{r4, r5, fp, pc}
   1e1e0:	ldr	r5, [r0, r1, lsl #2]
   1e1e4:	cmn	r5, #1
   1e1e8:	beq	1e1cc <__assert_fail@plt+0xca58>
   1e1ec:	ldrb	r0, [r4, #78]	; 0x4e
   1e1f0:	cmp	r0, #0
   1e1f4:	beq	1e238 <__assert_fail@plt+0xcac4>
   1e1f8:	mov	r0, r5
   1e1fc:	bl	11648 <iswalnum@plt>
   1e200:	mov	r1, r0
   1e204:	mov	r0, #1
   1e208:	cmp	r5, #95	; 0x5f
   1e20c:	bne	1e230 <__assert_fail@plt+0xcabc>
   1e210:	b	1e250 <__assert_fail@plt+0xcadc>
   1e214:	ldr	r2, [r4, #4]
   1e218:	ldr	r0, [r4, #68]	; 0x44
   1e21c:	ldrb	r5, [r2, r1]
   1e220:	mov	r1, r5
   1e224:	bl	1e30c <__assert_fail@plt+0xcb98>
   1e228:	mov	r1, r0
   1e22c:	mov	r0, #1
   1e230:	cmp	r1, #0
   1e234:	bne	1e250 <__assert_fail@plt+0xcadc>
   1e238:	mov	r0, #0
   1e23c:	cmp	r5, #10
   1e240:	popne	{r4, r5, fp, pc}
   1e244:	ldrb	r0, [r4, #77]	; 0x4d
   1e248:	cmp	r0, #0
   1e24c:	movwne	r0, #2
   1e250:	pop	{r4, r5, fp, pc}
   1e254:	and	r0, r2, #2
   1e258:	eor	r0, r0, #10
   1e25c:	pop	{r4, r5, fp, pc}
   1e260:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e264:	add	fp, sp, #28
   1e268:	sub	sp, sp, #12
   1e26c:	str	r2, [sp, #4]
   1e270:	mov	sl, r1
   1e274:	mov	r7, r0
   1e278:	ldr	r0, [r0, #24]
   1e27c:	ldr	r1, [r7, #32]
   1e280:	add	r5, r1, r0
   1e284:	mvn	r1, #0
   1e288:	cmp	r5, sl
   1e28c:	bge	1e2f8 <__assert_fail@plt+0xcb84>
   1e290:	add	r4, r7, #16
   1e294:	b	1e2b8 <__assert_fail@plt+0xcb44>
   1e298:	mov	r1, #0
   1e29c:	cmp	r6, #0
   1e2a0:	cmpne	r0, #0
   1e2a4:	ldrne	r0, [r7]
   1e2a8:	ldrbne	r1, [r0, r5]
   1e2ac:	stm	r4, {r8, r9}
   1e2b0:	mov	r0, #1
   1e2b4:	b	1e2ec <__assert_fail@plt+0xcb78>
   1e2b8:	ldr	r0, [r7]
   1e2bc:	ldr	r2, [r7, #44]	; 0x2c
   1e2c0:	add	r1, r0, r5
   1e2c4:	sub	r6, r2, r5
   1e2c8:	ldm	r4, {r8, r9}
   1e2cc:	add	r0, sp, #8
   1e2d0:	mov	r2, r6
   1e2d4:	mov	r3, r4
   1e2d8:	bl	245c0 <__assert_fail@plt+0x12e4c>
   1e2dc:	sub	r1, r0, #1
   1e2e0:	cmn	r1, #3
   1e2e4:	bcs	1e298 <__assert_fail@plt+0xcb24>
   1e2e8:	ldr	r1, [sp, #8]
   1e2ec:	add	r5, r0, r5
   1e2f0:	cmp	r5, sl
   1e2f4:	blt	1e2b8 <__assert_fail@plt+0xcb44>
   1e2f8:	ldr	r0, [sp, #4]
   1e2fc:	str	r1, [r0]
   1e300:	mov	r0, r5
   1e304:	sub	sp, fp, #28
   1e308:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e30c:	asr	r2, r1, #31
   1e310:	add	r2, r1, r2, lsr #27
   1e314:	asr	r2, r2, #5
   1e318:	ldr	r0, [r0, r2, lsl #2]
   1e31c:	and	r1, r1, #31
   1e320:	mov	r2, #1
   1e324:	and	r0, r0, r2, lsl r1
   1e328:	cmp	r0, #0
   1e32c:	movwne	r0, #1
   1e330:	bx	lr
   1e334:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e338:	add	fp, sp, #24
   1e33c:	mov	r6, r0
   1e340:	ldr	r0, [r1, #4]
   1e344:	cmp	r0, #1
   1e348:	blt	1e3b8 <__assert_fail@plt+0xcc44>
   1e34c:	mov	r8, r2
   1e350:	mov	r5, r1
   1e354:	ldr	r7, [r6, #84]	; 0x54
   1e358:	mov	r4, #0
   1e35c:	mov	r9, #1
   1e360:	ldr	r0, [r5, #8]
   1e364:	ldr	r1, [r0, r4, lsl #2]
   1e368:	ldr	r0, [r7]
   1e36c:	add	r2, r0, r1, lsl #3
   1e370:	ldrb	r2, [r2, #4]
   1e374:	cmp	r2, #8
   1e378:	bne	1e3a8 <__assert_fail@plt+0xcc34>
   1e37c:	ldr	r0, [r0, r1, lsl #3]
   1e380:	cmp	r0, #31
   1e384:	bgt	1e3a8 <__assert_fail@plt+0xcc34>
   1e388:	ldr	r2, [r7, #80]	; 0x50
   1e38c:	tst	r2, r9, lsl r0
   1e390:	beq	1e3a8 <__assert_fail@plt+0xcc34>
   1e394:	mov	r0, r6
   1e398:	mov	r2, r8
   1e39c:	bl	1e9fc <__assert_fail@plt+0xd288>
   1e3a0:	cmp	r0, #0
   1e3a4:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e3a8:	add	r4, r4, #1
   1e3ac:	ldr	r0, [r5, #4]
   1e3b0:	cmp	r4, r0
   1e3b4:	blt	1e360 <__assert_fail@plt+0xcbec>
   1e3b8:	mov	r0, #0
   1e3bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e3c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3c4:	add	fp, sp, #28
   1e3c8:	sub	sp, sp, #52	; 0x34
   1e3cc:	mov	r5, r0
   1e3d0:	ldr	r0, [r1, #4]
   1e3d4:	cmp	r0, #1
   1e3d8:	blt	1e698 <__assert_fail@plt+0xcf24>
   1e3dc:	mov	r8, r1
   1e3e0:	ldr	r9, [r5, #84]	; 0x54
   1e3e4:	ldr	r0, [r5, #40]	; 0x28
   1e3e8:	str	r0, [sp, #32]
   1e3ec:	mov	sl, #0
   1e3f0:	str	r1, [sp, #4]
   1e3f4:	str	r9, [sp, #16]
   1e3f8:	ldr	r0, [r8, #8]
   1e3fc:	ldr	r4, [r0, sl, lsl #2]
   1e400:	ldr	r0, [r9]
   1e404:	add	r0, r0, r4, lsl #3
   1e408:	ldr	r6, [r0, #4]
   1e40c:	uxtb	r0, r6
   1e410:	cmp	r0, #4
   1e414:	bne	1e688 <__assert_fail@plt+0xcf14>
   1e418:	movw	r0, #65280	; 0xff00
   1e41c:	movt	r0, #3
   1e420:	tst	r6, r0
   1e424:	beq	1e478 <__assert_fail@plt+0xcd04>
   1e428:	ldr	r2, [r5, #88]	; 0x58
   1e42c:	mov	r0, r5
   1e430:	ldr	r1, [sp, #32]
   1e434:	bl	1e194 <__assert_fail@plt+0xca20>
   1e438:	and	r1, r0, #1
   1e43c:	tst	r6, #1024	; 0x400
   1e440:	beq	1e44c <__assert_fail@plt+0xccd8>
   1e444:	cmp	r1, #0
   1e448:	beq	1e688 <__assert_fail@plt+0xcf14>
   1e44c:	tst	r6, #2048	; 0x800
   1e450:	cmpne	r1, #0
   1e454:	bne	1e688 <__assert_fail@plt+0xcf14>
   1e458:	tst	r6, #8192	; 0x2000
   1e45c:	beq	1e468 <__assert_fail@plt+0xccf4>
   1e460:	ands	r1, r0, #2
   1e464:	beq	1e688 <__assert_fail@plt+0xcf14>
   1e468:	tst	r6, #32768	; 0x8000
   1e46c:	beq	1e478 <__assert_fail@plt+0xcd04>
   1e470:	ands	r0, r0, #8
   1e474:	beq	1e688 <__assert_fail@plt+0xcf14>
   1e478:	ldr	r6, [r5, #108]	; 0x6c
   1e47c:	mov	r0, r5
   1e480:	mov	r1, r4
   1e484:	ldr	r2, [sp, #32]
   1e488:	bl	1ea88 <__assert_fail@plt+0xd314>
   1e48c:	str	r0, [fp, #-32]	; 0xffffffe0
   1e490:	cmp	r0, #0
   1e494:	bne	1e6a0 <__assert_fail@plt+0xcf2c>
   1e498:	ldr	r0, [r5, #108]	; 0x6c
   1e49c:	cmp	r6, r0
   1e4a0:	bge	1e688 <__assert_fail@plt+0xcf14>
   1e4a4:	add	r0, r6, r6, lsl #1
   1e4a8:	lsl	r7, r0, #3
   1e4ac:	str	r4, [sp, #8]
   1e4b0:	ldr	r0, [r5, #116]	; 0x74
   1e4b4:	ldr	r1, [r0, r7]
   1e4b8:	cmp	r1, r4
   1e4bc:	bne	1e674 <__assert_fail@plt+0xcf00>
   1e4c0:	add	r0, r0, r7
   1e4c4:	ldr	r1, [r0, #4]
   1e4c8:	ldr	r2, [sp, #32]
   1e4cc:	cmp	r1, r2
   1e4d0:	bne	1e674 <__assert_fail@plt+0xcf00>
   1e4d4:	ldr	r2, [r0, #8]
   1e4d8:	ldr	r3, [r0, #12]
   1e4dc:	ldr	r0, [r9, #24]
   1e4e0:	str	r0, [sp, #28]
   1e4e4:	cmp	r3, r2
   1e4e8:	bne	1e500 <__assert_fail@plt+0xcd8c>
   1e4ec:	ldr	r0, [r9, #20]
   1e4f0:	add	r1, r4, r4, lsl #1
   1e4f4:	add	r0, r0, r1, lsl #2
   1e4f8:	ldr	r0, [r0, #8]
   1e4fc:	b	1e508 <__assert_fail@plt+0xcd94>
   1e500:	ldr	r0, [r9, #12]
   1e504:	add	r0, r0, r4, lsl #2
   1e508:	ldr	r0, [r0]
   1e50c:	add	r9, r0, r0, lsl #1
   1e510:	ldr	r4, [sp, #32]
   1e514:	str	r3, [sp, #20]
   1e518:	add	r0, r3, r4
   1e51c:	str	r2, [sp, #24]
   1e520:	sub	r8, r0, r2
   1e524:	sub	r1, r8, #1
   1e528:	ldr	r2, [r5, #88]	; 0x58
   1e52c:	mov	r0, r5
   1e530:	bl	1e194 <__assert_fail@plt+0xca20>
   1e534:	mov	r3, r0
   1e538:	ldr	r0, [r5, #100]	; 0x64
   1e53c:	ldr	r1, [r0, r4, lsl #2]
   1e540:	ldr	r0, [r0, r8, lsl #2]
   1e544:	cmp	r1, #0
   1e548:	ldrne	r1, [r1, #8]
   1e54c:	moveq	r1, #0
   1e550:	str	r1, [sp, #12]
   1e554:	add	r4, sp, #36	; 0x24
   1e558:	ldr	r1, [sp, #28]
   1e55c:	add	r2, r1, r9, lsl #2
   1e560:	cmp	r0, #0
   1e564:	str	r2, [sp, #28]
   1e568:	beq	1e5d8 <__assert_fail@plt+0xce64>
   1e56c:	mov	r9, r3
   1e570:	ldr	r1, [r0, #40]	; 0x28
   1e574:	mov	r0, r4
   1e578:	bl	1ee38 <__assert_fail@plt+0xd6c4>
   1e57c:	str	r0, [fp, #-32]	; 0xffffffe0
   1e580:	cmp	r0, #0
   1e584:	ldr	r1, [sp, #16]
   1e588:	bne	1e6ac <__assert_fail@plt+0xcf38>
   1e58c:	sub	r0, fp, #32
   1e590:	mov	r2, r4
   1e594:	mov	r3, r9
   1e598:	bl	1caa4 <__assert_fail@plt+0xb330>
   1e59c:	ldr	r1, [r5, #100]	; 0x64
   1e5a0:	str	r0, [r1, r8, lsl #2]
   1e5a4:	ldr	r0, [sp, #44]	; 0x2c
   1e5a8:	bl	13f04 <__assert_fail@plt+0x2790>
   1e5ac:	ldr	r0, [r5, #100]	; 0x64
   1e5b0:	ldr	r0, [r0, r8, lsl #2]
   1e5b4:	cmp	r0, #0
   1e5b8:	bne	1e5c8 <__assert_fail@plt+0xce54>
   1e5bc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e5c0:	cmp	r0, #0
   1e5c4:	bne	1e6a0 <__assert_fail@plt+0xcf2c>
   1e5c8:	ldr	r8, [sp, #4]
   1e5cc:	ldr	r4, [sp, #8]
   1e5d0:	ldr	r9, [sp, #16]
   1e5d4:	b	1e614 <__assert_fail@plt+0xcea0>
   1e5d8:	sub	r0, fp, #32
   1e5dc:	ldr	r9, [sp, #16]
   1e5e0:	mov	r1, r9
   1e5e4:	bl	1caa4 <__assert_fail@plt+0xb330>
   1e5e8:	ldr	r1, [r5, #100]	; 0x64
   1e5ec:	str	r0, [r1, r8, lsl #2]
   1e5f0:	ldr	r0, [r5, #100]	; 0x64
   1e5f4:	ldr	r0, [r0, r8, lsl #2]
   1e5f8:	cmp	r0, #0
   1e5fc:	ldr	r8, [sp, #4]
   1e600:	ldr	r4, [sp, #8]
   1e604:	bne	1e614 <__assert_fail@plt+0xcea0>
   1e608:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e60c:	cmp	r0, #0
   1e610:	bne	1e6a0 <__assert_fail@plt+0xcf2c>
   1e614:	ldr	r0, [sp, #24]
   1e618:	ldr	r1, [sp, #20]
   1e61c:	cmp	r1, r0
   1e620:	bne	1e674 <__assert_fail@plt+0xcf00>
   1e624:	ldr	r0, [r5, #100]	; 0x64
   1e628:	ldr	r1, [sp, #32]
   1e62c:	ldr	r0, [r0, r1, lsl #2]
   1e630:	ldr	r0, [r0, #8]
   1e634:	ldr	r1, [sp, #12]
   1e638:	cmp	r0, r1
   1e63c:	ble	1e674 <__assert_fail@plt+0xcf00>
   1e640:	mov	r0, r5
   1e644:	ldr	r1, [sp, #28]
   1e648:	ldr	r2, [sp, #32]
   1e64c:	bl	1e334 <__assert_fail@plt+0xcbc0>
   1e650:	str	r0, [fp, #-32]	; 0xffffffe0
   1e654:	cmp	r0, #0
   1e658:	bne	1e6a0 <__assert_fail@plt+0xcf2c>
   1e65c:	mov	r0, r5
   1e660:	ldr	r1, [sp, #28]
   1e664:	bl	1e3c0 <__assert_fail@plt+0xcc4c>
   1e668:	str	r0, [fp, #-32]	; 0xffffffe0
   1e66c:	cmp	r0, #0
   1e670:	bne	1e6a0 <__assert_fail@plt+0xcf2c>
   1e674:	add	r7, r7, #24
   1e678:	add	r6, r6, #1
   1e67c:	ldr	r0, [r5, #108]	; 0x6c
   1e680:	cmp	r6, r0
   1e684:	blt	1e4b0 <__assert_fail@plt+0xcd3c>
   1e688:	ldr	r0, [r8, #4]
   1e68c:	add	sl, sl, #1
   1e690:	cmp	sl, r0
   1e694:	blt	1e3f8 <__assert_fail@plt+0xcc84>
   1e698:	mov	r0, #0
   1e69c:	str	r0, [fp, #-32]	; 0xffffffe0
   1e6a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e6a4:	sub	sp, fp, #28
   1e6a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6ac:	ldr	r0, [sp, #44]	; 0x2c
   1e6b0:	bl	13f04 <__assert_fail@plt+0x2790>
   1e6b4:	b	1e6a0 <__assert_fail@plt+0xcf2c>
   1e6b8:	push	{r4, r5, fp, lr}
   1e6bc:	add	fp, sp, #8
   1e6c0:	mov	r4, r0
   1e6c4:	ldr	r0, [r0, #36]	; 0x24
   1e6c8:	mov	r5, #12
   1e6cc:	cmn	r0, #-536870910	; 0xe0000002
   1e6d0:	bhi	1e784 <__assert_fail@plt+0xd010>
   1e6d4:	ldr	r2, [r4, #48]	; 0x30
   1e6d8:	cmp	r2, r0, lsl #1
   1e6dc:	lslge	r2, r0, #1
   1e6e0:	cmp	r2, r1
   1e6e4:	movle	r2, r1
   1e6e8:	mov	r0, r4
   1e6ec:	mov	r1, r2
   1e6f0:	bl	17eb4 <__assert_fail@plt+0x6740>
   1e6f4:	cmp	r0, #0
   1e6f8:	popne	{r4, r5, fp, pc}
   1e6fc:	ldr	r0, [r4, #100]	; 0x64
   1e700:	cmp	r0, #0
   1e704:	beq	1e724 <__assert_fail@plt+0xcfb0>
   1e708:	ldr	r1, [r4, #36]	; 0x24
   1e70c:	mov	r2, #4
   1e710:	add	r1, r2, r1, lsl #2
   1e714:	bl	23e94 <__assert_fail@plt+0x12720>
   1e718:	cmp	r0, #0
   1e71c:	beq	1e784 <__assert_fail@plt+0xd010>
   1e720:	str	r0, [r4, #100]	; 0x64
   1e724:	ldr	r0, [r4, #80]	; 0x50
   1e728:	ldrb	r1, [r4, #72]	; 0x48
   1e72c:	cmp	r1, #0
   1e730:	beq	1e750 <__assert_fail@plt+0xcfdc>
   1e734:	cmp	r0, #2
   1e738:	blt	1e764 <__assert_fail@plt+0xcff0>
   1e73c:	mov	r0, r4
   1e740:	bl	17f58 <__assert_fail@plt+0x67e4>
   1e744:	cmp	r0, #0
   1e748:	popne	{r4, r5, fp, pc}
   1e74c:	b	1e780 <__assert_fail@plt+0xd00c>
   1e750:	cmp	r0, #2
   1e754:	blt	1e770 <__assert_fail@plt+0xcffc>
   1e758:	mov	r0, r4
   1e75c:	bl	1858c <__assert_fail@plt+0x6e18>
   1e760:	b	1e780 <__assert_fail@plt+0xd00c>
   1e764:	mov	r0, r4
   1e768:	bl	18520 <__assert_fail@plt+0x6dac>
   1e76c:	b	1e780 <__assert_fail@plt+0xd00c>
   1e770:	ldr	r0, [r4, #64]	; 0x40
   1e774:	cmp	r0, #0
   1e778:	movne	r0, r4
   1e77c:	blne	1871c <__assert_fail@plt+0x6fa8>
   1e780:	mov	r5, #0
   1e784:	mov	r0, r5
   1e788:	pop	{r4, r5, fp, pc}
   1e78c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e790:	add	fp, sp, #24
   1e794:	mov	r6, r2
   1e798:	mov	r4, r1
   1e79c:	mov	r5, r0
   1e7a0:	ldrb	r0, [r2, #52]	; 0x34
   1e7a4:	tst	r0, #32
   1e7a8:	bne	1e820 <__assert_fail@plt+0xd0ac>
   1e7ac:	ldr	r0, [r4, #4]
   1e7b0:	ldr	r1, [r4, #40]	; 0x28
   1e7b4:	add	r2, r1, #1
   1e7b8:	str	r2, [r4, #40]	; 0x28
   1e7bc:	ldrb	r7, [r0, r1]
   1e7c0:	ldr	r0, [r6, #44]	; 0x2c
   1e7c4:	cmp	r0, #0
   1e7c8:	ldrne	r0, [r0, r7, lsl #2]
   1e7cc:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e7d0:	ldr	r8, [r6, #48]	; 0x30
   1e7d4:	cmp	r8, #0
   1e7d8:	bne	1e800 <__assert_fail@plt+0xd08c>
   1e7dc:	ldr	r0, [r4, #84]	; 0x54
   1e7e0:	mov	r1, r6
   1e7e4:	bl	205e4 <__assert_fail@plt+0xee70>
   1e7e8:	cmp	r0, #0
   1e7ec:	bne	1e7c0 <__assert_fail@plt+0xd04c>
   1e7f0:	mov	r0, #12
   1e7f4:	str	r0, [r5]
   1e7f8:	mov	r0, #0
   1e7fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e800:	ldr	r0, [r4, #40]	; 0x28
   1e804:	ldr	r2, [r4, #88]	; 0x58
   1e808:	sub	r1, r0, #1
   1e80c:	mov	r0, r4
   1e810:	bl	1e194 <__assert_fail@plt+0xca20>
   1e814:	bfi	r7, r0, #8, #1
   1e818:	ldr	r0, [r8, r7, lsl #2]
   1e81c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e820:	mov	r0, r4
   1e824:	mov	r1, r6
   1e828:	bl	20420 <__assert_fail@plt+0xecac>
   1e82c:	str	r0, [r5]
   1e830:	cmp	r0, #0
   1e834:	beq	1e7ac <__assert_fail@plt+0xd038>
   1e838:	b	1e7f8 <__assert_fail@plt+0xd084>
   1e83c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e840:	add	fp, sp, #24
   1e844:	sub	sp, sp, #16
   1e848:	mov	r7, r2
   1e84c:	mov	r4, r1
   1e850:	mov	r8, r0
   1e854:	ldr	r5, [r1, #40]	; 0x28
   1e858:	ldr	r6, [r1, #84]	; 0x54
   1e85c:	ldr	r0, [r1, #100]	; 0x64
   1e860:	ldr	r1, [r1, #104]	; 0x68
   1e864:	cmp	r5, r1
   1e868:	ble	1e878 <__assert_fail@plt+0xd104>
   1e86c:	str	r7, [r0, r5, lsl #2]
   1e870:	str	r5, [r4, #104]	; 0x68
   1e874:	b	1e914 <__assert_fail@plt+0xd1a0>
   1e878:	ldr	r1, [r0, r5, lsl #2]
   1e87c:	cmp	r1, #0
   1e880:	beq	1e8b4 <__assert_fail@plt+0xd140>
   1e884:	ldr	r0, [r0, r5, lsl #2]
   1e888:	ldr	r2, [r0, #40]	; 0x28
   1e88c:	cmp	r7, #0
   1e890:	beq	1e8bc <__assert_fail@plt+0xd148>
   1e894:	ldr	r9, [r7, #40]	; 0x28
   1e898:	mov	r0, sp
   1e89c:	mov	r1, r9
   1e8a0:	bl	1ee38 <__assert_fail@plt+0xd6c4>
   1e8a4:	str	r0, [r8]
   1e8a8:	cmp	r0, #0
   1e8ac:	beq	1e8d0 <__assert_fail@plt+0xd15c>
   1e8b0:	b	1e980 <__assert_fail@plt+0xd20c>
   1e8b4:	str	r7, [r0, r5, lsl #2]
   1e8b8:	b	1e914 <__assert_fail@plt+0xd1a0>
   1e8bc:	vldr	d16, [r2]
   1e8c0:	ldr	r0, [r2, #8]
   1e8c4:	str	r0, [sp, #8]
   1e8c8:	vstr	d16, [sp]
   1e8cc:	mov	r9, #0
   1e8d0:	ldr	r0, [r4, #40]	; 0x28
   1e8d4:	ldr	r2, [r4, #88]	; 0x58
   1e8d8:	sub	r1, r0, #1
   1e8dc:	mov	r0, r4
   1e8e0:	bl	1e194 <__assert_fail@plt+0xca20>
   1e8e4:	mov	r3, r0
   1e8e8:	mov	r2, sp
   1e8ec:	mov	r0, r8
   1e8f0:	mov	r1, r6
   1e8f4:	bl	1caa4 <__assert_fail@plt+0xb330>
   1e8f8:	mov	r7, r0
   1e8fc:	ldr	r0, [r4, #100]	; 0x64
   1e900:	str	r7, [r0, r5, lsl #2]
   1e904:	cmp	r9, #0
   1e908:	beq	1e914 <__assert_fail@plt+0xd1a0>
   1e90c:	ldr	r0, [sp, #8]
   1e910:	bl	13f04 <__assert_fail@plt+0x2790>
   1e914:	cmp	r7, #0
   1e918:	ldrne	r0, [r6, #76]	; 0x4c
   1e91c:	cmpne	r0, #0
   1e920:	bne	1e930 <__assert_fail@plt+0xd1bc>
   1e924:	mov	r0, r7
   1e928:	sub	sp, fp, #24
   1e92c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e930:	add	r6, r7, #4
   1e934:	mov	r0, r4
   1e938:	mov	r1, r6
   1e93c:	mov	r2, r5
   1e940:	bl	1e334 <__assert_fail@plt+0xcbc0>
   1e944:	str	r0, [r8]
   1e948:	cmp	r0, #0
   1e94c:	bne	1e980 <__assert_fail@plt+0xd20c>
   1e950:	ldrb	r0, [r7, #52]	; 0x34
   1e954:	tst	r0, #64	; 0x40
   1e958:	beq	1e924 <__assert_fail@plt+0xd1b0>
   1e95c:	mov	r0, r4
   1e960:	mov	r1, r6
   1e964:	bl	1e3c0 <__assert_fail@plt+0xcc4c>
   1e968:	str	r0, [r8]
   1e96c:	cmp	r0, #0
   1e970:	mov	r7, #0
   1e974:	ldreq	r0, [r4, #100]	; 0x64
   1e978:	ldreq	r7, [r0, r5, lsl #2]
   1e97c:	b	1e924 <__assert_fail@plt+0xd1b0>
   1e980:	mov	r7, #0
   1e984:	b	1e924 <__assert_fail@plt+0xd1b0>
   1e988:	push	{r4, r5, r6, sl, fp, lr}
   1e98c:	add	fp, sp, #16
   1e990:	mov	r4, r1
   1e994:	mov	r6, r0
   1e998:	b	1e9bc <__assert_fail@plt+0xd248>
   1e99c:	mov	r0, r6
   1e9a0:	mov	r1, r4
   1e9a4:	mov	r2, #0
   1e9a8:	bl	1e83c <__assert_fail@plt+0xd0c8>
   1e9ac:	cmp	r0, #0
   1e9b0:	ldreq	r1, [r6]
   1e9b4:	cmpeq	r1, #0
   1e9b8:	popne	{r4, r5, r6, sl, fp, pc}
   1e9bc:	ldr	r1, [r4, #40]	; 0x28
   1e9c0:	ldr	r0, [r4, #104]	; 0x68
   1e9c4:	cmp	r1, r0
   1e9c8:	movge	r0, #0
   1e9cc:	popge	{r4, r5, r6, sl, fp, pc}
   1e9d0:	add	r2, r1, #1
   1e9d4:	ldr	r3, [r4, #40]	; 0x28
   1e9d8:	ldr	r5, [r4, #100]	; 0x64
   1e9dc:	add	r3, r3, #1
   1e9e0:	str	r3, [r4, #40]	; 0x28
   1e9e4:	add	r1, r5, r1, lsl #2
   1e9e8:	ldr	r1, [r1, #4]
   1e9ec:	cmp	r1, #0
   1e9f0:	mov	r1, r2
   1e9f4:	beq	1e9c4 <__assert_fail@plt+0xd250>
   1e9f8:	b	1e99c <__assert_fail@plt+0xd228>
   1e9fc:	push	{r4, r5, r6, r7, fp, lr}
   1ea00:	add	fp, sp, #16
   1ea04:	mov	r4, r2
   1ea08:	mov	r6, r1
   1ea0c:	mov	r5, r0
   1ea10:	ldr	r0, [r0, #124]	; 0x7c
   1ea14:	ldr	r7, [r5, #128]	; 0x80
   1ea18:	cmp	r0, r7
   1ea1c:	beq	1ea64 <__assert_fail@plt+0xd2f0>
   1ea20:	mov	r0, #1
   1ea24:	mov	r1, #24
   1ea28:	bl	23e10 <__assert_fail@plt+0x1269c>
   1ea2c:	ldr	r1, [r5, #124]	; 0x7c
   1ea30:	ldr	r2, [r5, #132]	; 0x84
   1ea34:	str	r0, [r2, r1, lsl #2]
   1ea38:	ldr	r0, [r5, #132]	; 0x84
   1ea3c:	ldr	r0, [r0, r1, lsl #2]
   1ea40:	cmp	r0, #0
   1ea44:	strne	r6, [r0, #4]
   1ea48:	addne	r1, r1, #1
   1ea4c:	strne	r1, [r5, #124]	; 0x7c
   1ea50:	strne	r4, [r0]
   1ea54:	movne	r0, #0
   1ea58:	popne	{r4, r5, r6, r7, fp, pc}
   1ea5c:	mov	r0, #12
   1ea60:	pop	{r4, r5, r6, r7, fp, pc}
   1ea64:	ldr	r0, [r5, #132]	; 0x84
   1ea68:	lsl	r1, r7, #3
   1ea6c:	bl	23e94 <__assert_fail@plt+0x12720>
   1ea70:	cmp	r0, #0
   1ea74:	beq	1ea5c <__assert_fail@plt+0xd2e8>
   1ea78:	lsl	r1, r7, #1
   1ea7c:	str	r1, [r5, #128]	; 0x80
   1ea80:	str	r0, [r5, #132]	; 0x84
   1ea84:	b	1ea20 <__assert_fail@plt+0xd2ac>
   1ea88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea8c:	add	fp, sp, #28
   1ea90:	sub	sp, sp, #52	; 0x34
   1ea94:	str	r1, [sp, #36]	; 0x24
   1ea98:	mov	r4, r0
   1ea9c:	ldr	r5, [r0, #4]
   1eaa0:	ldr	r6, [r0, #84]	; 0x54
   1eaa4:	str	r2, [fp, #-36]	; 0xffffffdc
   1eaa8:	mov	r1, r2
   1eaac:	bl	1f068 <__assert_fail@plt+0xd8f4>
   1eab0:	cmn	r0, #1
   1eab4:	beq	1eae4 <__assert_fail@plt+0xd370>
   1eab8:	ldr	r1, [r4, #116]	; 0x74
   1eabc:	add	r0, r0, r0, lsl #1
   1eac0:	add	r0, r1, r0, lsl #3
   1eac4:	ldr	r2, [sp, #36]	; 0x24
   1eac8:	ldr	r1, [r0]
   1eacc:	cmp	r1, r2
   1ead0:	beq	1ee18 <__assert_fail@plt+0xd6a4>
   1ead4:	ldrb	r1, [r0, #20]
   1ead8:	add	r0, r0, #24
   1eadc:	cmp	r1, #0
   1eae0:	bne	1eac8 <__assert_fail@plt+0xd354>
   1eae4:	ldr	r0, [r4, #124]	; 0x7c
   1eae8:	cmp	r0, #1
   1eaec:	blt	1ee18 <__assert_fail@plt+0xd6a4>
   1eaf0:	mov	ip, r6
   1eaf4:	ldr	r0, [r6]
   1eaf8:	ldr	r1, [sp, #36]	; 0x24
   1eafc:	ldr	r2, [r0, r1, lsl #3]
   1eb00:	mov	r6, #0
   1eb04:	str	r4, [sp, #28]
   1eb08:	mov	r3, r5
   1eb0c:	str	ip, [sp, #24]
   1eb10:	str	r2, [sp, #20]
   1eb14:	b	1ecc0 <__assert_fail@plt+0xd54c>
   1eb18:	ldr	ip, [sp, #24]
   1eb1c:	ldr	r2, [sp, #20]
   1eb20:	b	1eb60 <__assert_fail@plt+0xd3ec>
   1eb24:	ldr	r0, [r4, #48]	; 0x30
   1eb28:	cmp	r6, r0
   1eb2c:	bge	1ee04 <__assert_fail@plt+0xd690>
   1eb30:	mov	r9, r6
   1eb34:	add	r1, r6, #1
   1eb38:	mov	r0, r4
   1eb3c:	bl	1e6b8 <__assert_fail@plt+0xcf44>
   1eb40:	cmp	r0, #0
   1eb44:	bne	1ee28 <__assert_fail@plt+0xd6b4>
   1eb48:	ldr	r3, [r4, #4]
   1eb4c:	ldr	r7, [sp, #32]
   1eb50:	mov	r6, r9
   1eb54:	ldr	ip, [sp, #24]
   1eb58:	ldr	r2, [sp, #20]
   1eb5c:	b	1eb78 <__assert_fail@plt+0xd404>
   1eb60:	ldr	r0, [r7]
   1eb64:	cmp	r5, r0
   1eb68:	ble	1eb90 <__assert_fail@plt+0xd41c>
   1eb6c:	ldr	r0, [r4, #28]
   1eb70:	cmp	r6, r0
   1eb74:	bge	1eb24 <__assert_fail@plt+0xd3b0>
   1eb78:	ldrb	r0, [r3, r6]
   1eb7c:	add	r1, r3, r5
   1eb80:	ldrb	r1, [r1, #-1]
   1eb84:	cmp	r0, r1
   1eb88:	bne	1ee04 <__assert_fail@plt+0xd690>
   1eb8c:	add	r6, r6, #1
   1eb90:	ldr	r0, [r4, #100]	; 0x64
   1eb94:	ldr	r0, [r0, r5, lsl #2]
   1eb98:	cmp	r0, #0
   1eb9c:	beq	1eca4 <__assert_fail@plt+0xd530>
   1eba0:	mov	r9, r6
   1eba4:	mov	sl, r3
   1eba8:	add	r1, r0, #4
   1ebac:	mov	r0, ip
   1ebb0:	mov	r3, #9
   1ebb4:	bl	1f220 <__assert_fail@plt+0xdaac>
   1ebb8:	cmn	r0, #1
   1ebbc:	beq	1ec90 <__assert_fail@plt+0xd51c>
   1ebc0:	mov	r4, r0
   1ebc4:	ldr	r1, [sp, #32]
   1ebc8:	ldr	r0, [r1, #8]
   1ebcc:	cmp	r0, #0
   1ebd0:	bne	1ebfc <__assert_fail@plt+0xd488>
   1ebd4:	ldr	r0, [r1]
   1ebd8:	sub	r0, r5, r0
   1ebdc:	add	r1, r0, #1
   1ebe0:	mov	r8, #12
   1ebe4:	mov	r0, #12
   1ebe8:	bl	23e10 <__assert_fail@plt+0x1269c>
   1ebec:	ldr	r1, [sp, #32]
   1ebf0:	str	r0, [r1, #8]
   1ebf4:	cmp	r0, #0
   1ebf8:	beq	1ee1c <__assert_fail@plt+0xd6a8>
   1ebfc:	ldr	r3, [r1]
   1ec00:	ldr	r2, [r1, #4]
   1ec04:	ldr	r1, [r1, #8]
   1ec08:	stm	sp, {r4, r5}
   1ec0c:	mov	r0, #9
   1ec10:	str	r0, [sp, #8]
   1ec14:	ldr	r0, [sp, #28]
   1ec18:	bl	1f274 <__assert_fail@plt+0xdb00>
   1ec1c:	ldr	r7, [sp, #32]
   1ec20:	cmp	r0, #1
   1ec24:	mov	r3, sl
   1ec28:	mov	r6, r9
   1ec2c:	ldr	ip, [sp, #24]
   1ec30:	ldr	r2, [sp, #20]
   1ec34:	beq	1eca4 <__assert_fail@plt+0xd530>
   1ec38:	mov	r8, r0
   1ec3c:	cmp	r0, #0
   1ec40:	bne	1ee1c <__assert_fail@plt+0xd6a8>
   1ec44:	mov	r0, r7
   1ec48:	mov	r1, r4
   1ec4c:	mov	r2, r5
   1ec50:	bl	1f648 <__assert_fail@plt+0xded4>
   1ec54:	cmp	r0, #0
   1ec58:	beq	1ee30 <__assert_fail@plt+0xd6bc>
   1ec5c:	mov	r2, r0
   1ec60:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1ec64:	str	r0, [sp]
   1ec68:	ldr	r4, [sp, #28]
   1ec6c:	mov	r0, r4
   1ec70:	mov	r1, r7
   1ec74:	ldr	r3, [sp, #36]	; 0x24
   1ec78:	bl	1f188 <__assert_fail@plt+0xda14>
   1ec7c:	cmp	r0, #1
   1ec80:	bhi	1ee28 <__assert_fail@plt+0xd6b4>
   1ec84:	ldr	r3, [r4, #4]
   1ec88:	ldr	r7, [sp, #32]
   1ec8c:	b	1ec98 <__assert_fail@plt+0xd524>
   1ec90:	ldr	r7, [sp, #32]
   1ec94:	mov	r3, sl
   1ec98:	mov	r6, r9
   1ec9c:	ldr	ip, [sp, #24]
   1eca0:	ldr	r2, [sp, #20]
   1eca4:	add	r1, r5, #1
   1eca8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1ecac:	cmp	r5, r0
   1ecb0:	mov	r5, r1
   1ecb4:	ldr	r4, [sp, #28]
   1ecb8:	blt	1eb60 <__assert_fail@plt+0xd3ec>
   1ecbc:	b	1ee04 <__assert_fail@plt+0xd690>
   1ecc0:	ldr	r0, [r4, #132]	; 0x84
   1ecc4:	ldr	r7, [r0, r6, lsl #2]
   1ecc8:	ldr	r0, [r7, #4]
   1eccc:	ldr	r1, [ip]
   1ecd0:	ldr	r0, [r1, r0, lsl #3]
   1ecd4:	cmp	r0, r2
   1ecd8:	str	r6, [sp, #16]
   1ecdc:	bne	1ee04 <__assert_fail@plt+0xd690>
   1ece0:	ldr	r5, [r7]
   1ece4:	ldr	r0, [r7, #16]
   1ece8:	cmp	r0, #1
   1ecec:	str	r7, [sp, #32]
   1ecf0:	mov	sl, #0
   1ecf4:	blt	1ed04 <__assert_fail@plt+0xd590>
   1ecf8:	ldr	r6, [fp, #-36]	; 0xffffffdc
   1ecfc:	mov	r9, r5
   1ed00:	b	1ed38 <__assert_fail@plt+0xd5c4>
   1ed04:	ldr	r6, [fp, #-36]	; 0xffffffdc
   1ed08:	b	1eddc <__assert_fail@plt+0xd668>
   1ed0c:	ldr	r0, [r4, #48]	; 0x30
   1ed10:	cmp	r1, r0
   1ed14:	bgt	1edd8 <__assert_fail@plt+0xd664>
   1ed18:	mov	r7, r6
   1ed1c:	mov	r0, r4
   1ed20:	bl	1f0f4 <__assert_fail@plt+0xd980>
   1ed24:	cmp	r0, #0
   1ed28:	bne	1ee28 <__assert_fail@plt+0xd6b4>
   1ed2c:	ldr	r3, [r4, #4]
   1ed30:	mov	r6, r7
   1ed34:	b	1ed68 <__assert_fail@plt+0xd5f4>
   1ed38:	ldr	r0, [r7, #20]
   1ed3c:	ldr	r2, [r0, sl, lsl #2]
   1ed40:	ldr	r0, [r2, #4]
   1ed44:	str	r0, [fp, #-32]	; 0xffffffe0
   1ed48:	sub	r5, r0, r9
   1ed4c:	cmp	r5, #1
   1ed50:	blt	1ed94 <__assert_fail@plt+0xd620>
   1ed54:	add	r1, r5, r6
   1ed58:	ldr	r0, [r4, #28]
   1ed5c:	cmp	r1, r0
   1ed60:	str	r2, [sp, #40]	; 0x28
   1ed64:	bgt	1ed0c <__assert_fail@plt+0xd598>
   1ed68:	add	r0, r3, r6
   1ed6c:	add	r1, r3, r9
   1ed70:	mov	r8, r6
   1ed74:	mov	r2, r5
   1ed78:	mov	r7, r3
   1ed7c:	bl	114e0 <memcmp@plt>
   1ed80:	mov	r3, r7
   1ed84:	cmp	r0, #0
   1ed88:	ldr	r7, [sp, #32]
   1ed8c:	ldr	r2, [sp, #40]	; 0x28
   1ed90:	bne	1edd8 <__assert_fail@plt+0xd664>
   1ed94:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1ed98:	str	r0, [sp]
   1ed9c:	mov	r0, r4
   1eda0:	mov	r1, r7
   1eda4:	ldr	r3, [sp, #36]	; 0x24
   1eda8:	bl	1f188 <__assert_fail@plt+0xda14>
   1edac:	cmp	r0, #1
   1edb0:	bhi	1ee28 <__assert_fail@plt+0xd6b4>
   1edb4:	add	r6, r5, r6
   1edb8:	add	sl, sl, #1
   1edbc:	ldr	r3, [r4, #4]
   1edc0:	ldr	r0, [r7, #16]
   1edc4:	cmp	sl, r0
   1edc8:	ldr	r5, [fp, #-32]	; 0xffffffe0
   1edcc:	mov	r9, r5
   1edd0:	blt	1ed38 <__assert_fail@plt+0xd5c4>
   1edd4:	b	1eddc <__assert_fail@plt+0xd668>
   1edd8:	mov	r5, r9
   1eddc:	ldr	r0, [r7, #16]
   1ede0:	cmp	sl, r0
   1ede4:	blt	1edfc <__assert_fail@plt+0xd688>
   1ede8:	cmp	sl, #0
   1edec:	addne	r5, r5, #1
   1edf0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1edf4:	cmp	r5, r0
   1edf8:	ble	1eb18 <__assert_fail@plt+0xd3a4>
   1edfc:	ldr	ip, [sp, #24]
   1ee00:	ldr	r2, [sp, #20]
   1ee04:	ldr	r6, [sp, #16]
   1ee08:	add	r6, r6, #1
   1ee0c:	ldr	r0, [r4, #124]	; 0x7c
   1ee10:	cmp	r6, r0
   1ee14:	blt	1ecc0 <__assert_fail@plt+0xd54c>
   1ee18:	mov	r8, #0
   1ee1c:	mov	r0, r8
   1ee20:	sub	sp, fp, #28
   1ee24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee28:	mov	r8, r0
   1ee2c:	b	1ee1c <__assert_fail@plt+0xd6a8>
   1ee30:	mov	r8, #12
   1ee34:	b	1ee1c <__assert_fail@plt+0xd6a8>
   1ee38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee3c:	add	fp, sp, #28
   1ee40:	sub	sp, sp, #4
   1ee44:	mov	sl, r2
   1ee48:	mov	r8, r0
   1ee4c:	cmp	r1, #0
   1ee50:	beq	1ee88 <__assert_fail@plt+0xd714>
   1ee54:	mov	r6, r1
   1ee58:	ldr	r0, [r1, #4]
   1ee5c:	cmp	sl, #0
   1ee60:	beq	1ee74 <__assert_fail@plt+0xd700>
   1ee64:	cmp	r0, #1
   1ee68:	ldrge	r1, [sl, #4]
   1ee6c:	cmpge	r1, #1
   1ee70:	bge	1eec8 <__assert_fail@plt+0xd754>
   1ee74:	cmp	r0, #1
   1ee78:	blt	1ee88 <__assert_fail@plt+0xd714>
   1ee7c:	mov	r0, r8
   1ee80:	mov	r1, r6
   1ee84:	b	1eea4 <__assert_fail@plt+0xd730>
   1ee88:	cmp	sl, #0
   1ee8c:	beq	1eeb0 <__assert_fail@plt+0xd73c>
   1ee90:	ldr	r0, [sl, #4]
   1ee94:	cmp	r0, #1
   1ee98:	blt	1eeb0 <__assert_fail@plt+0xd73c>
   1ee9c:	mov	r0, r8
   1eea0:	mov	r1, sl
   1eea4:	sub	sp, fp, #28
   1eea8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eeac:	b	1c9bc <__assert_fail@plt+0xb248>
   1eeb0:	mov	r0, #0
   1eeb4:	str	r0, [r8]
   1eeb8:	str	r0, [r8, #4]
   1eebc:	str	r0, [r8, #8]
   1eec0:	sub	sp, fp, #28
   1eec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eec8:	add	r0, r1, r0
   1eecc:	str	r0, [r8]
   1eed0:	lsl	r0, r0, #2
   1eed4:	bl	23e64 <__assert_fail@plt+0x126f0>
   1eed8:	str	r0, [r8, #8]
   1eedc:	cmp	r0, #0
   1eee0:	beq	1f05c <__assert_fail@plt+0xd8e8>
   1eee4:	ldr	r2, [sl, #4]
   1eee8:	mov	r4, #0
   1eeec:	cmp	r2, #0
   1eef0:	mov	r0, #0
   1eef4:	movwgt	r0, #1
   1eef8:	ldr	r3, [r6, #4]
   1eefc:	cmp	r3, #1
   1ef00:	blt	1efc0 <__assert_fail@plt+0xd84c>
   1ef04:	mov	r9, #0
   1ef08:	cmp	r2, #1
   1ef0c:	blt	1efd0 <__assert_fail@plt+0xd85c>
   1ef10:	mov	ip, #0
   1ef14:	mov	r0, #0
   1ef18:	mov	r4, ip
   1ef1c:	mov	r7, r0
   1ef20:	ldr	r0, [sl, #8]
   1ef24:	ldr	r1, [r0, r4, lsl #2]
   1ef28:	ldr	r0, [r6, #8]
   1ef2c:	ldr	r5, [r0, r9, lsl #2]
   1ef30:	cmp	r5, r1
   1ef34:	ble	1ef74 <__assert_fail@plt+0xd800>
   1ef38:	ldr	r0, [r8, #8]
   1ef3c:	str	r1, [r0, r7, lsl #2]
   1ef40:	ldr	r2, [sl, #4]
   1ef44:	add	r1, r4, #1
   1ef48:	cmp	r2, r1
   1ef4c:	mov	r0, #0
   1ef50:	movwgt	r0, #1
   1ef54:	ldr	r3, [r6, #4]
   1ef58:	cmp	r3, r9
   1ef5c:	ble	1effc <__assert_fail@plt+0xd888>
   1ef60:	add	r7, r7, #1
   1ef64:	cmp	r2, r1
   1ef68:	mov	r4, r1
   1ef6c:	bgt	1ef20 <__assert_fail@plt+0xd7ac>
   1ef70:	b	1efd4 <__assert_fail@plt+0xd860>
   1ef74:	ldr	r0, [r8, #8]
   1ef78:	str	r5, [r0, r7, lsl #2]
   1ef7c:	add	lr, r4, #1
   1ef80:	cmp	r5, r1
   1ef84:	mov	ip, r4
   1ef88:	moveq	ip, lr
   1ef8c:	ldr	r2, [sl, #4]
   1ef90:	cmp	r2, ip
   1ef94:	mov	r0, #0
   1ef98:	movwgt	r0, #1
   1ef9c:	add	r9, r9, #1
   1efa0:	ldr	r3, [r6, #4]
   1efa4:	cmp	r3, r9
   1efa8:	ble	1f044 <__assert_fail@plt+0xd8d0>
   1efac:	add	r0, r7, #1
   1efb0:	cmp	r2, ip
   1efb4:	bgt	1ef18 <__assert_fail@plt+0xd7a4>
   1efb8:	add	r7, r7, #1
   1efbc:	b	1efd4 <__assert_fail@plt+0xd860>
   1efc0:	mov	r6, #0
   1efc4:	cmp	r0, #0
   1efc8:	bne	1f00c <__assert_fail@plt+0xd898>
   1efcc:	b	1f034 <__assert_fail@plt+0xd8c0>
   1efd0:	mov	r7, #0
   1efd4:	ldr	r0, [r8, #8]
   1efd8:	add	r0, r0, r7, lsl #2
   1efdc:	ldr	r1, [r6, #8]
   1efe0:	add	r1, r1, r9, lsl #2
   1efe4:	sub	r2, r3, r9
   1efe8:	lsl	r2, r2, #2
   1efec:	bl	1148c <memcpy@plt>
   1eff0:	sub	r0, r7, r9
   1eff4:	ldr	r1, [r6, #4]
   1eff8:	b	1f030 <__assert_fail@plt+0xd8bc>
   1effc:	add	r6, r7, #1
   1f000:	add	r4, r4, #1
   1f004:	cmp	r0, #0
   1f008:	beq	1f034 <__assert_fail@plt+0xd8c0>
   1f00c:	ldr	r0, [r8, #8]
   1f010:	add	r0, r0, r6, lsl #2
   1f014:	ldr	r1, [sl, #8]
   1f018:	add	r1, r1, r4, lsl #2
   1f01c:	sub	r2, r2, r4
   1f020:	lsl	r2, r2, #2
   1f024:	bl	1148c <memcpy@plt>
   1f028:	sub	r0, r6, r4
   1f02c:	ldr	r1, [sl, #4]
   1f030:	add	r6, r0, r1
   1f034:	str	r6, [r8, #4]
   1f038:	mov	r0, #0
   1f03c:	sub	sp, fp, #28
   1f040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f044:	cmp	r5, r1
   1f048:	moveq	r4, lr
   1f04c:	add	r6, r7, #1
   1f050:	cmp	r0, #0
   1f054:	bne	1f00c <__assert_fail@plt+0xd898>
   1f058:	b	1f034 <__assert_fail@plt+0xd8c0>
   1f05c:	mov	r0, #12
   1f060:	sub	sp, fp, #28
   1f064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f068:	push	{r4, r5, r6, r7, fp, lr}
   1f06c:	add	fp, sp, #16
   1f070:	mov	ip, r0
   1f074:	ldr	lr, [r0, #108]	; 0x6c
   1f078:	cmp	lr, #1
   1f07c:	blt	1f0e0 <__assert_fail@plt+0xd96c>
   1f080:	ldr	r2, [ip, #116]	; 0x74
   1f084:	mov	r0, #0
   1f088:	mov	r3, #1
   1f08c:	mov	r4, lr
   1f090:	add	r5, r0, r4
   1f094:	add	r5, r5, r5, lsr #31
   1f098:	asr	r6, r5, #1
   1f09c:	add	r7, r6, r6, lsl #1
   1f0a0:	add	r7, r2, r7, lsl #3
   1f0a4:	ldr	r7, [r7, #4]
   1f0a8:	cmp	r7, r1
   1f0ac:	addlt	r0, r3, r5, asr #1
   1f0b0:	movge	r4, r6
   1f0b4:	cmp	r0, r4
   1f0b8:	blt	1f090 <__assert_fail@plt+0xd91c>
   1f0bc:	cmp	r0, lr
   1f0c0:	bge	1f0ec <__assert_fail@plt+0xd978>
   1f0c4:	ldr	r2, [ip, #116]	; 0x74
   1f0c8:	add	r3, r0, r0, lsl #1
   1f0cc:	add	r2, r2, r3, lsl #3
   1f0d0:	ldr	r2, [r2, #4]
   1f0d4:	cmp	r2, r1
   1f0d8:	mvnne	r0, #0
   1f0dc:	pop	{r4, r5, r6, r7, fp, pc}
   1f0e0:	mov	r0, #0
   1f0e4:	cmp	r0, lr
   1f0e8:	blt	1f0c4 <__assert_fail@plt+0xd950>
   1f0ec:	mvn	r0, #0
   1f0f0:	pop	{r4, r5, r6, r7, fp, pc}
   1f0f4:	push	{r4, r5, r6, r7, fp, lr}
   1f0f8:	add	fp, sp, #16
   1f0fc:	mov	r4, r1
   1f100:	mov	r5, r0
   1f104:	ldr	r0, [r0, #36]	; 0x24
   1f108:	ldr	r7, [r5, #104]	; 0x68
   1f10c:	cmp	r0, r1
   1f110:	ldrle	r1, [r5, #48]	; 0x30
   1f114:	cmple	r0, r1
   1f118:	blt	1f168 <__assert_fail@plt+0xd9f4>
   1f11c:	ldr	r0, [r5, #28]
   1f120:	cmp	r0, r4
   1f124:	ldrle	r1, [r5, #48]	; 0x30
   1f128:	cmple	r0, r1
   1f12c:	blt	1f168 <__assert_fail@plt+0xd9f4>
   1f130:	mov	r6, #0
   1f134:	cmp	r7, r4
   1f138:	bge	1f180 <__assert_fail@plt+0xda0c>
   1f13c:	sub	r0, r4, r7
   1f140:	lsl	r2, r0, #2
   1f144:	ldr	r0, [r5, #100]	; 0x64
   1f148:	add	r0, r0, r7, lsl #2
   1f14c:	add	r0, r0, #4
   1f150:	mov	r6, #0
   1f154:	mov	r1, #0
   1f158:	bl	1166c <memset@plt>
   1f15c:	str	r4, [r5, #104]	; 0x68
   1f160:	mov	r0, r6
   1f164:	pop	{r4, r5, r6, r7, fp, pc}
   1f168:	add	r1, r4, #1
   1f16c:	mov	r0, r5
   1f170:	bl	1e6b8 <__assert_fail@plt+0xcf44>
   1f174:	mov	r6, r0
   1f178:	cmp	r0, #0
   1f17c:	beq	1f130 <__assert_fail@plt+0xd9bc>
   1f180:	mov	r0, r6
   1f184:	pop	{r4, r5, r6, r7, fp, pc}
   1f188:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f18c:	add	fp, sp, #24
   1f190:	sub	sp, sp, #16
   1f194:	mov	r7, r3
   1f198:	mov	r6, r2
   1f19c:	mov	r8, r1
   1f1a0:	mov	r4, r0
   1f1a4:	ldr	r2, [r2]
   1f1a8:	ldr	r3, [r6, #4]
   1f1ac:	mov	r0, #8
   1f1b0:	str	r0, [sp, #8]
   1f1b4:	ldr	r5, [fp, #8]
   1f1b8:	str	r5, [sp, #4]
   1f1bc:	str	r7, [sp]
   1f1c0:	add	r1, r6, #8
   1f1c4:	mov	r0, r4
   1f1c8:	bl	1f274 <__assert_fail@plt+0xdb00>
   1f1cc:	cmp	r0, #0
   1f1d0:	beq	1f1dc <__assert_fail@plt+0xda68>
   1f1d4:	sub	sp, fp, #24
   1f1d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f1dc:	ldr	r3, [r8]
   1f1e0:	ldr	r0, [r6, #4]
   1f1e4:	str	r0, [sp]
   1f1e8:	mov	r0, r4
   1f1ec:	mov	r1, r7
   1f1f0:	mov	r2, r5
   1f1f4:	bl	1f6c8 <__assert_fail@plt+0xdf54>
   1f1f8:	cmp	r0, #0
   1f1fc:	bne	1f1d4 <__assert_fail@plt+0xda60>
   1f200:	ldr	r0, [r6, #4]
   1f204:	add	r0, r0, r5
   1f208:	ldr	r1, [r8]
   1f20c:	sub	r1, r0, r1
   1f210:	mov	r0, r4
   1f214:	sub	sp, fp, #24
   1f218:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f21c:	b	1f0f4 <__assert_fail@plt+0xd980>
   1f220:	push	{r4, r5, fp, lr}
   1f224:	add	fp, sp, #8
   1f228:	ldr	r4, [r1, #4]
   1f22c:	cmp	r4, #1
   1f230:	blt	1f26c <__assert_fail@plt+0xdaf8>
   1f234:	ldr	ip, [r0]
   1f238:	ldr	lr, [r1, #8]
   1f23c:	mov	r4, #0
   1f240:	ldr	r0, [lr, r4, lsl #2]
   1f244:	add	r5, ip, r0, lsl #3
   1f248:	ldrb	r5, [r5, #4]
   1f24c:	cmp	r5, r3
   1f250:	ldreq	r5, [ip, r0, lsl #3]
   1f254:	cmpeq	r5, r2
   1f258:	popeq	{r4, r5, fp, pc}
   1f25c:	add	r4, r4, #1
   1f260:	ldr	r0, [r1, #4]
   1f264:	cmp	r4, r0
   1f268:	blt	1f240 <__assert_fail@plt+0xdacc>
   1f26c:	mvn	r0, #0
   1f270:	pop	{r4, r5, fp, pc}
   1f274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f278:	add	fp, sp, #28
   1f27c:	sub	sp, sp, #44	; 0x2c
   1f280:	mov	sl, r3
   1f284:	mov	r8, r2
   1f288:	mov	r7, r1
   1f28c:	mov	r4, r0
   1f290:	ldr	r1, [r0, #84]	; 0x54
   1f294:	mov	r0, #0
   1f298:	str	r0, [fp, #-32]	; 0xffffffe0
   1f29c:	str	r1, [sp, #20]
   1f2a0:	ldr	r0, [r1]
   1f2a4:	ldr	r0, [r0, r2, lsl #3]
   1f2a8:	str	r0, [sp, #16]
   1f2ac:	ldr	r0, [r4, #120]	; 0x78
   1f2b0:	ldr	r1, [fp, #12]
   1f2b4:	add	r0, r0, r1
   1f2b8:	ldr	r5, [r7, #4]
   1f2bc:	cmp	r5, r0
   1f2c0:	ble	1f5e0 <__assert_fail@plt+0xde6c>
   1f2c4:	ldr	r0, [r4, #40]	; 0x28
   1f2c8:	str	r0, [sp, #12]
   1f2cc:	ldr	r2, [r4, #88]	; 0x58
   1f2d0:	ldr	r0, [r4, #100]	; 0x64
   1f2d4:	str	r0, [sp, #8]
   1f2d8:	ldr	r6, [r7]
   1f2dc:	ldr	r0, [r7, #8]
   1f2e0:	str	r0, [r4, #100]	; 0x64
   1f2e4:	cmp	r6, #0
   1f2e8:	moveq	r6, sl
   1f2ec:	str	r6, [r4, #40]	; 0x28
   1f2f0:	sub	r1, r6, #1
   1f2f4:	mov	r0, r4
   1f2f8:	bl	1e194 <__assert_fail@plt+0xca20>
   1f2fc:	mov	r9, r0
   1f300:	cmp	r6, sl
   1f304:	mov	r5, r4
   1f308:	bne	1f348 <__assert_fail@plt+0xdbd4>
   1f30c:	add	r0, sp, #24
   1f310:	mov	r1, r8
   1f314:	bl	1c0a4 <__assert_fail@plt+0xa930>
   1f318:	str	r0, [fp, #-32]	; 0xffffffe0
   1f31c:	cmp	r0, #0
   1f320:	bne	1f640 <__assert_fail@plt+0xdecc>
   1f324:	add	r1, sp, #24
   1f328:	ldr	r0, [sp, #20]
   1f32c:	ldr	r2, [sp, #16]
   1f330:	ldr	r3, [fp, #16]
   1f334:	bl	1f7c4 <__assert_fail@plt+0xe050>
   1f338:	str	r0, [fp, #-32]	; 0xffffffe0
   1f33c:	cmp	r0, #0
   1f340:	beq	1f3b0 <__assert_fail@plt+0xdc3c>
   1f344:	b	1f5d0 <__assert_fail@plt+0xde5c>
   1f348:	ldr	r0, [r5, #100]	; 0x64
   1f34c:	ldr	r8, [r0, r6, lsl #2]
   1f350:	cmp	r8, #0
   1f354:	beq	1f378 <__assert_fail@plt+0xdc04>
   1f358:	ldrb	r0, [r8, #52]	; 0x34
   1f35c:	tst	r0, #64	; 0x40
   1f360:	bne	1f38c <__assert_fail@plt+0xdc18>
   1f364:	mov	r0, #0
   1f368:	str	r0, [sp, #28]
   1f36c:	str	r0, [sp, #24]
   1f370:	str	r0, [sp, #32]
   1f374:	b	1f3a4 <__assert_fail@plt+0xdc30>
   1f378:	mov	r8, #0
   1f37c:	str	r8, [sp, #28]
   1f380:	str	r8, [sp, #24]
   1f384:	str	r8, [sp, #32]
   1f388:	b	1f418 <__assert_fail@plt+0xdca4>
   1f38c:	add	r1, r8, #4
   1f390:	add	r0, sp, #24
   1f394:	bl	1c9bc <__assert_fail@plt+0xb248>
   1f398:	str	r0, [fp, #-32]	; 0xffffffe0
   1f39c:	cmp	r0, #0
   1f3a0:	bne	1f640 <__assert_fail@plt+0xdecc>
   1f3a4:	ldrb	r0, [r8, #52]	; 0x34
   1f3a8:	tst	r0, #64	; 0x40
   1f3ac:	beq	1f418 <__assert_fail@plt+0xdca4>
   1f3b0:	ldr	r0, [sp, #28]
   1f3b4:	cmp	r0, #0
   1f3b8:	beq	1f3e4 <__assert_fail@plt+0xdc70>
   1f3bc:	ldr	r0, [fp, #16]
   1f3c0:	str	r0, [sp]
   1f3c4:	add	r1, sp, #24
   1f3c8:	mov	r0, r5
   1f3cc:	mov	r2, r6
   1f3d0:	ldr	r3, [sp, #16]
   1f3d4:	bl	1f8bc <__assert_fail@plt+0xe148>
   1f3d8:	str	r0, [fp, #-32]	; 0xffffffe0
   1f3dc:	cmp	r0, #0
   1f3e0:	bne	1f5d0 <__assert_fail@plt+0xde5c>
   1f3e4:	sub	r0, fp, #32
   1f3e8:	add	r2, sp, #24
   1f3ec:	ldr	r1, [sp, #20]
   1f3f0:	mov	r3, r9
   1f3f4:	bl	1caa4 <__assert_fail@plt+0xb330>
   1f3f8:	mov	r8, r0
   1f3fc:	cmp	r0, #0
   1f400:	bne	1f410 <__assert_fail@plt+0xdc9c>
   1f404:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1f408:	cmp	r0, #0
   1f40c:	bne	1f5d0 <__assert_fail@plt+0xde5c>
   1f410:	ldr	r0, [r5, #100]	; 0x64
   1f414:	str	r8, [r0, r6, lsl #2]
   1f418:	ldr	r0, [fp, #12]
   1f41c:	cmp	r6, r0
   1f420:	bge	1f574 <__assert_fail@plt+0xde00>
   1f424:	str	r7, [sp, #4]
   1f428:	add	r7, r6, #1
   1f42c:	add	r4, sp, #24
   1f430:	mov	sl, #0
   1f434:	sub	r6, r7, #1
   1f438:	ldr	r0, [r5, #120]	; 0x78
   1f43c:	cmp	sl, r0
   1f440:	bgt	1f570 <__assert_fail@plt+0xddfc>
   1f444:	mov	r0, #0
   1f448:	str	r0, [sp, #28]
   1f44c:	ldr	r0, [r5, #100]	; 0x64
   1f450:	ldr	r0, [r0, r7, lsl #2]
   1f454:	cmp	r0, #0
   1f458:	beq	1f474 <__assert_fail@plt+0xdd00>
   1f45c:	add	r1, r0, #4
   1f460:	mov	r0, r4
   1f464:	bl	1c5b8 <__assert_fail@plt+0xae44>
   1f468:	str	r0, [fp, #-32]	; 0xffffffe0
   1f46c:	cmp	r0, #0
   1f470:	bne	1f5d0 <__assert_fail@plt+0xde5c>
   1f474:	cmp	r8, #0
   1f478:	beq	1f49c <__assert_fail@plt+0xdd28>
   1f47c:	add	r2, r8, #16
   1f480:	mov	r0, r5
   1f484:	mov	r1, r6
   1f488:	mov	r3, r4
   1f48c:	bl	1fb50 <__assert_fail@plt+0xe3dc>
   1f490:	str	r0, [fp, #-32]	; 0xffffffe0
   1f494:	cmp	r0, #0
   1f498:	bne	1f5d0 <__assert_fail@plt+0xde5c>
   1f49c:	ldr	r0, [sp, #28]
   1f4a0:	cmp	r0, #0
   1f4a4:	beq	1f504 <__assert_fail@plt+0xdd90>
   1f4a8:	mov	r8, r6
   1f4ac:	mov	r9, r5
   1f4b0:	ldr	r0, [sp, #20]
   1f4b4:	mov	r1, r4
   1f4b8:	ldr	r6, [sp, #16]
   1f4bc:	mov	r2, r6
   1f4c0:	ldr	r5, [fp, #16]
   1f4c4:	mov	r3, r5
   1f4c8:	bl	1f7c4 <__assert_fail@plt+0xe050>
   1f4cc:	str	r0, [fp, #-32]	; 0xffffffe0
   1f4d0:	cmp	r0, #0
   1f4d4:	bne	1f5d0 <__assert_fail@plt+0xde5c>
   1f4d8:	str	r5, [sp]
   1f4dc:	mov	r5, r9
   1f4e0:	mov	r0, r9
   1f4e4:	mov	r1, r4
   1f4e8:	mov	r2, r7
   1f4ec:	mov	r3, r6
   1f4f0:	bl	1f8bc <__assert_fail@plt+0xe148>
   1f4f4:	str	r0, [fp, #-32]	; 0xffffffe0
   1f4f8:	cmp	r0, #0
   1f4fc:	mov	r6, r8
   1f500:	bne	1f5d0 <__assert_fail@plt+0xde5c>
   1f504:	ldr	r2, [r5, #88]	; 0x58
   1f508:	mov	r0, r5
   1f50c:	mov	r1, r6
   1f510:	bl	1e194 <__assert_fail@plt+0xca20>
   1f514:	mov	r3, r0
   1f518:	sub	r0, fp, #32
   1f51c:	ldr	r1, [sp, #20]
   1f520:	mov	r2, r4
   1f524:	bl	1caa4 <__assert_fail@plt+0xb330>
   1f528:	mov	r8, r0
   1f52c:	cmp	r0, #0
   1f530:	bne	1f540 <__assert_fail@plt+0xddcc>
   1f534:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1f538:	cmp	r0, #0
   1f53c:	bne	1f5d0 <__assert_fail@plt+0xde5c>
   1f540:	ldr	r0, [r5, #100]	; 0x64
   1f544:	str	r8, [r0, r7, lsl #2]
   1f548:	cmp	r8, #0
   1f54c:	mov	r1, #0
   1f550:	addeq	r1, sl, #1
   1f554:	add	r0, r7, #1
   1f558:	ldr	r2, [fp, #12]
   1f55c:	cmp	r7, r2
   1f560:	mov	r7, r0
   1f564:	mov	sl, r1
   1f568:	blt	1f434 <__assert_fail@plt+0xdcc0>
   1f56c:	sub	r6, r0, #1
   1f570:	ldr	r7, [sp, #4]
   1f574:	ldr	r0, [sp, #32]
   1f578:	bl	13f04 <__assert_fail@plt+0x2790>
   1f57c:	ldr	r0, [r5, #100]	; 0x64
   1f580:	ldr	r1, [fp, #12]
   1f584:	ldr	r0, [r0, r1, lsl #2]
   1f588:	str	r6, [r7]
   1f58c:	ldr	r1, [sp, #12]
   1f590:	str	r1, [r5, #40]	; 0x28
   1f594:	ldr	r1, [sp, #8]
   1f598:	str	r1, [r5, #100]	; 0x64
   1f59c:	cmp	r0, #0
   1f5a0:	beq	1f5c0 <__assert_fail@plt+0xde4c>
   1f5a4:	ldr	r1, [fp, #8]
   1f5a8:	add	r0, r0, #4
   1f5ac:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   1f5b0:	mov	r4, #0
   1f5b4:	cmp	r0, #0
   1f5b8:	moveq	r4, #1
   1f5bc:	b	1f5c4 <__assert_fail@plt+0xde50>
   1f5c0:	mov	r4, #1
   1f5c4:	mov	r0, r4
   1f5c8:	sub	sp, fp, #28
   1f5cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f5d0:	ldr	r0, [sp, #32]
   1f5d4:	bl	13f04 <__assert_fail@plt+0x2790>
   1f5d8:	ldr	r4, [fp, #-32]	; 0xffffffe0
   1f5dc:	b	1f5c4 <__assert_fail@plt+0xde50>
   1f5e0:	str	r4, [sp, #12]
   1f5e4:	mvn	r1, #-2147483648	; 0x80000000
   1f5e8:	sub	r1, r1, r5
   1f5ec:	mov	r4, #12
   1f5f0:	cmp	r1, r0
   1f5f4:	ble	1f5c4 <__assert_fail@plt+0xde50>
   1f5f8:	add	r6, r0, #1
   1f5fc:	add	r1, r6, r5
   1f600:	cmn	r1, #-1073741823	; 0xc0000001
   1f604:	bhi	1f5c4 <__assert_fail@plt+0xde50>
   1f608:	ldr	r0, [r7, #8]
   1f60c:	mov	r9, r1
   1f610:	lsl	r1, r1, #2
   1f614:	bl	23e94 <__assert_fail@plt+0x12720>
   1f618:	cmp	r0, #0
   1f61c:	beq	1f5c4 <__assert_fail@plt+0xde50>
   1f620:	str	r9, [r7, #4]
   1f624:	str	r0, [r7, #8]
   1f628:	add	r0, r0, r5, lsl #2
   1f62c:	lsl	r2, r6, #2
   1f630:	mov	r1, #0
   1f634:	bl	1166c <memset@plt>
   1f638:	ldr	r4, [sp, #12]
   1f63c:	b	1f2c4 <__assert_fail@plt+0xdb50>
   1f640:	mov	r4, r0
   1f644:	b	1f5c4 <__assert_fail@plt+0xde50>
   1f648:	push	{r4, r5, r6, r7, fp, lr}
   1f64c:	add	fp, sp, #16
   1f650:	mov	r5, r2
   1f654:	mov	r6, r1
   1f658:	mov	r4, r0
   1f65c:	ldr	r0, [r0, #12]
   1f660:	ldr	r1, [r4, #16]
   1f664:	cmp	r1, r0
   1f668:	beq	1f69c <__assert_fail@plt+0xdf28>
   1f66c:	mov	r0, #1
   1f670:	mov	r1, #20
   1f674:	bl	23e10 <__assert_fail@plt+0x1269c>
   1f678:	cmp	r0, #0
   1f67c:	ldrne	r1, [r4, #16]
   1f680:	ldrne	r2, [r4, #20]
   1f684:	strne	r0, [r2, r1, lsl #2]
   1f688:	strne	r6, [r0]
   1f68c:	strne	r5, [r0, #4]
   1f690:	addne	r1, r1, #1
   1f694:	strne	r1, [r4, #16]
   1f698:	pop	{r4, r5, r6, r7, fp, pc}
   1f69c:	mov	r1, #1
   1f6a0:	orr	r7, r1, r0, lsl #1
   1f6a4:	lsl	r1, r7, #2
   1f6a8:	ldr	r0, [r4, #20]
   1f6ac:	bl	23e94 <__assert_fail@plt+0x12720>
   1f6b0:	cmp	r0, #0
   1f6b4:	moveq	r0, #0
   1f6b8:	popeq	{r4, r5, r6, r7, fp, pc}
   1f6bc:	str	r7, [r4, #12]
   1f6c0:	str	r0, [r4, #20]
   1f6c4:	b	1f66c <__assert_fail@plt+0xdef8>
   1f6c8:	push	{r4, r5, r6, r7, fp, lr}
   1f6cc:	add	fp, sp, #16
   1f6d0:	mov	r5, r3
   1f6d4:	mov	r6, r2
   1f6d8:	mov	r7, r1
   1f6dc:	mov	r4, r0
   1f6e0:	ldr	r1, [r0, #108]	; 0x6c
   1f6e4:	ldr	r2, [r0, #112]	; 0x70
   1f6e8:	cmp	r1, r2
   1f6ec:	blt	1f73c <__assert_fail@plt+0xdfc8>
   1f6f0:	ldr	r0, [r4, #116]	; 0x74
   1f6f4:	add	r1, r2, r2, lsl #1
   1f6f8:	lsl	r1, r1, #4
   1f6fc:	bl	23e94 <__assert_fail@plt+0x12720>
   1f700:	cmp	r0, #0
   1f704:	beq	1f7b4 <__assert_fail@plt+0xe040>
   1f708:	str	r0, [r4, #116]	; 0x74
   1f70c:	ldr	r1, [r4, #108]	; 0x6c
   1f710:	ldr	r2, [r4, #112]	; 0x70
   1f714:	add	r1, r1, r1, lsl #1
   1f718:	add	r0, r0, r1, lsl #3
   1f71c:	add	r1, r2, r2, lsl #1
   1f720:	lsl	r2, r1, #3
   1f724:	mov	r1, #0
   1f728:	bl	1166c <memset@plt>
   1f72c:	ldr	r1, [r4, #108]	; 0x6c
   1f730:	ldr	r0, [r4, #112]	; 0x70
   1f734:	lsl	r0, r0, #1
   1f738:	str	r0, [r4, #112]	; 0x70
   1f73c:	ldr	r2, [fp, #8]
   1f740:	cmp	r1, #1
   1f744:	blt	1f768 <__assert_fail@plt+0xdff4>
   1f748:	ldr	r0, [r4, #116]	; 0x74
   1f74c:	sub	r3, r1, #1
   1f750:	add	r3, r3, r3, lsl #1
   1f754:	add	r0, r0, r3, lsl #3
   1f758:	ldr	r3, [r0, #4]
   1f75c:	cmp	r3, r6
   1f760:	moveq	r3, #1
   1f764:	strbeq	r3, [r0, #20]
   1f768:	ldr	r3, [r4, #116]	; 0x74
   1f76c:	add	r0, r1, r1, lsl #1
   1f770:	str	r7, [r3, r0, lsl #3]!
   1f774:	mov	r0, #0
   1f778:	cmp	r2, r5
   1f77c:	mov	r7, #0
   1f780:	mvneq	r7, #0
   1f784:	str	r6, [r3, #4]
   1f788:	str	r5, [r3, #8]
   1f78c:	str	r2, [r3, #12]
   1f790:	str	r7, [r3, #16]
   1f794:	add	r1, r1, #1
   1f798:	str	r1, [r4, #108]	; 0x6c
   1f79c:	strb	r0, [r3, #20]
   1f7a0:	sub	r1, r2, r5
   1f7a4:	ldr	r2, [r4, #120]	; 0x78
   1f7a8:	cmp	r2, r1
   1f7ac:	strlt	r1, [r4, #120]	; 0x78
   1f7b0:	pop	{r4, r5, r6, r7, fp, pc}
   1f7b4:	ldr	r0, [r4, #116]	; 0x74
   1f7b8:	bl	13f04 <__assert_fail@plt+0x2790>
   1f7bc:	mov	r0, #12
   1f7c0:	pop	{r4, r5, r6, r7, fp, pc}
   1f7c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f7c8:	add	fp, sp, #28
   1f7cc:	sub	sp, sp, #20
   1f7d0:	mov	r9, r3
   1f7d4:	mov	sl, r2
   1f7d8:	mov	r4, r1
   1f7dc:	mov	r7, r0
   1f7e0:	ldr	r1, [r1, #4]
   1f7e4:	add	r0, sp, #8
   1f7e8:	bl	1c2fc <__assert_fail@plt+0xab88>
   1f7ec:	cmp	r0, #0
   1f7f0:	bne	1f8b4 <__assert_fail@plt+0xe140>
   1f7f4:	ldr	r0, [r4, #4]
   1f7f8:	cmp	r0, #1
   1f7fc:	blt	1f87c <__assert_fail@plt+0xe108>
   1f800:	mov	r8, #0
   1f804:	ldr	r0, [r4, #8]
   1f808:	ldr	r5, [r0, r8, lsl #2]
   1f80c:	add	r0, r5, r5, lsl #1
   1f810:	ldr	r1, [r7, #24]
   1f814:	add	r6, r1, r0, lsl #2
   1f818:	mov	r0, r7
   1f81c:	mov	r1, r6
   1f820:	mov	r2, sl
   1f824:	mov	r3, r9
   1f828:	bl	1f220 <__assert_fail@plt+0xdaac>
   1f82c:	cmn	r0, #1
   1f830:	beq	1f858 <__assert_fail@plt+0xe0e4>
   1f834:	str	r9, [sp]
   1f838:	mov	r0, r7
   1f83c:	add	r1, sp, #8
   1f840:	mov	r2, r5
   1f844:	mov	r3, sl
   1f848:	bl	1fd0c <__assert_fail@plt+0xe598>
   1f84c:	cmp	r0, #0
   1f850:	beq	1f86c <__assert_fail@plt+0xe0f8>
   1f854:	b	1f8a4 <__assert_fail@plt+0xe130>
   1f858:	add	r0, sp, #8
   1f85c:	mov	r1, r6
   1f860:	bl	1c5b8 <__assert_fail@plt+0xae44>
   1f864:	cmp	r0, #0
   1f868:	bne	1f8a4 <__assert_fail@plt+0xe130>
   1f86c:	ldr	r0, [r4, #4]
   1f870:	add	r8, r8, #1
   1f874:	cmp	r8, r0
   1f878:	blt	1f804 <__assert_fail@plt+0xe090>
   1f87c:	ldr	r0, [r4, #8]
   1f880:	bl	13f04 <__assert_fail@plt+0x2790>
   1f884:	vldr	d16, [sp, #8]
   1f888:	ldr	r0, [sp, #16]
   1f88c:	str	r0, [r4, #8]
   1f890:	vstr	d16, [r4]
   1f894:	mov	r5, #0
   1f898:	mov	r0, r5
   1f89c:	sub	sp, fp, #28
   1f8a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8a4:	mov	r5, r0
   1f8a8:	ldr	r0, [sp, #16]
   1f8ac:	bl	13f04 <__assert_fail@plt+0x2790>
   1f8b0:	b	1f898 <__assert_fail@plt+0xe124>
   1f8b4:	mov	r5, r0
   1f8b8:	b	1f898 <__assert_fail@plt+0xe124>
   1f8bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f8c0:	add	fp, sp, #28
   1f8c4:	sub	sp, sp, #44	; 0x2c
   1f8c8:	str	r3, [sp, #8]
   1f8cc:	mov	r6, r2
   1f8d0:	mov	r7, r1
   1f8d4:	ldr	r8, [r0, #84]	; 0x54
   1f8d8:	str	r0, [sp, #20]
   1f8dc:	mov	r1, r2
   1f8e0:	bl	1f068 <__assert_fail@plt+0xd8f4>
   1f8e4:	mov	r1, #0
   1f8e8:	cmn	r0, #1
   1f8ec:	beq	1fb44 <__assert_fail@plt+0xe3d0>
   1f8f0:	add	r1, r0, r0, lsl #1
   1f8f4:	add	sl, sp, #28
   1f8f8:	str	r8, [sp, #12]
   1f8fc:	str	r7, [sp, #24]
   1f900:	str	r1, [sp, #4]
   1f904:	b	1f90c <__assert_fail@plt+0xe198>
   1f908:	ldr	r1, [sp, #4]
   1f90c:	ldr	r0, [sp, #20]
   1f910:	ldr	r0, [r0, #116]	; 0x74
   1f914:	add	r0, r0, r1, lsl #3
   1f918:	add	r0, r0, #12
   1f91c:	mov	r9, r0
   1f920:	ldr	r1, [r0, #-12]
   1f924:	mov	r0, r7
   1f928:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   1f92c:	cmp	r0, #0
   1f930:	beq	1faf4 <__assert_fail@plt+0xe380>
   1f934:	ldmda	r9, {r0, r1}
   1f938:	add	r1, r1, r6
   1f93c:	sub	r5, r1, r0
   1f940:	cmp	r5, r6
   1f944:	bne	1f9e4 <__assert_fail@plt+0xe270>
   1f948:	mov	r5, r6
   1f94c:	ldr	r0, [r8, #20]
   1f950:	ldr	r1, [r9, #-12]
   1f954:	add	r1, r1, r1, lsl #1
   1f958:	add	r0, r0, r1, lsl #2
   1f95c:	ldr	r0, [r0, #8]
   1f960:	ldr	r4, [r0]
   1f964:	mov	r0, r7
   1f968:	mov	r1, r4
   1f96c:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   1f970:	mov	r1, #4
   1f974:	cmp	r0, #0
   1f978:	bne	1f9d4 <__assert_fail@plt+0xe260>
   1f97c:	mov	r6, r8
   1f980:	mov	r0, sl
   1f984:	mov	r1, r4
   1f988:	bl	1c0a4 <__assert_fail@plt+0xa930>
   1f98c:	mov	r8, r0
   1f990:	str	r0, [fp, #-32]	; 0xffffffe0
   1f994:	mov	r0, r6
   1f998:	mov	r1, sl
   1f99c:	ldr	r2, [sp, #8]
   1f9a0:	ldr	r3, [fp, #8]
   1f9a4:	bl	1f7c4 <__assert_fail@plt+0xe050>
   1f9a8:	mov	r6, r0
   1f9ac:	mov	r0, r7
   1f9b0:	mov	r1, sl
   1f9b4:	bl	1c5b8 <__assert_fail@plt+0xae44>
   1f9b8:	mov	r4, r0
   1f9bc:	ldr	r0, [sp, #36]	; 0x24
   1f9c0:	bl	13f04 <__assert_fail@plt+0x2790>
   1f9c4:	orr	r0, r6, r8
   1f9c8:	orrs	r0, r0, r4
   1f9cc:	mov	r1, #2
   1f9d0:	bne	1fb08 <__assert_fail@plt+0xe394>
   1f9d4:	ldr	r8, [sp, #12]
   1f9d8:	mov	r6, r5
   1f9dc:	add	sl, sp, #28
   1f9e0:	b	1fae4 <__assert_fail@plt+0xe370>
   1f9e4:	ldr	r0, [sp, #20]
   1f9e8:	ldr	r0, [r0, #100]	; 0x64
   1f9ec:	ldr	r0, [r0, r5, lsl #2]
   1f9f0:	ldr	r1, [r9, #-12]
   1f9f4:	ldr	r2, [r8, #12]
   1f9f8:	ldr	r7, [r2, r1, lsl #2]
   1f9fc:	cmp	r0, #0
   1fa00:	beq	1fa74 <__assert_fail@plt+0xe300>
   1fa04:	add	r4, r0, #4
   1fa08:	mov	r0, r4
   1fa0c:	mov	r1, r7
   1fa10:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   1fa14:	mov	r1, #4
   1fa18:	add	sl, sp, #28
   1fa1c:	cmp	r0, #0
   1fa20:	bne	1fae4 <__assert_fail@plt+0xe370>
   1fa24:	mov	r0, sl
   1fa28:	mov	r1, r4
   1fa2c:	bl	1c9bc <__assert_fail@plt+0xb248>
   1fa30:	mov	r4, r0
   1fa34:	str	r0, [fp, #-32]	; 0xffffffe0
   1fa38:	mov	r0, sl
   1fa3c:	mov	r1, r7
   1fa40:	bl	1c7d4 <__assert_fail@plt+0xb060>
   1fa44:	cmp	r4, #0
   1fa48:	bne	1fa54 <__assert_fail@plt+0xe2e0>
   1fa4c:	cmp	r0, #0
   1fa50:	bne	1fa90 <__assert_fail@plt+0xe31c>
   1fa54:	ldr	r0, [sp, #36]	; 0x24
   1fa58:	bl	13f04 <__assert_fail@plt+0x2790>
   1fa5c:	cmp	r4, #0
   1fa60:	movweq	r4, #12
   1fa64:	str	r4, [fp, #-32]	; 0xffffffe0
   1fa68:	mov	r1, #1
   1fa6c:	str	r4, [sp, #16]
   1fa70:	b	1fae4 <__assert_fail@plt+0xe370>
   1fa74:	add	sl, sp, #28
   1fa78:	mov	r0, sl
   1fa7c:	mov	r1, r7
   1fa80:	bl	1c0a4 <__assert_fail@plt+0xa930>
   1fa84:	str	r0, [fp, #-32]	; 0xffffffe0
   1fa88:	cmp	r0, #0
   1fa8c:	bne	1fb28 <__assert_fail@plt+0xe3b4>
   1fa90:	sub	r0, fp, #32
   1fa94:	mov	r1, r8
   1fa98:	mov	r2, sl
   1fa9c:	bl	1fe14 <__assert_fail@plt+0xe6a0>
   1faa0:	ldr	r4, [sp, #20]
   1faa4:	ldr	r1, [r4, #100]	; 0x64
   1faa8:	str	r0, [r1, r5, lsl #2]
   1faac:	ldr	r0, [sp, #36]	; 0x24
   1fab0:	bl	13f04 <__assert_fail@plt+0x2790>
   1fab4:	ldr	r0, [r4, #100]	; 0x64
   1fab8:	ldr	r0, [r0, r5, lsl #2]
   1fabc:	clz	r0, r0
   1fac0:	lsr	r0, r0, #5
   1fac4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1fac8:	cmp	r2, #0
   1facc:	mov	r1, r2
   1fad0:	movwne	r1, #1
   1fad4:	ands	r1, r0, r1
   1fad8:	ldr	r0, [sp, #16]
   1fadc:	movne	r0, r2
   1fae0:	str	r0, [sp, #16]
   1fae4:	ldr	r7, [sp, #24]
   1fae8:	cmp	r1, #0
   1faec:	cmpne	r1, #4
   1faf0:	bne	1fb30 <__assert_fail@plt+0xe3bc>
   1faf4:	add	r0, r9, #24
   1faf8:	ldrb	r1, [r9, #8]
   1fafc:	cmp	r1, #0
   1fb00:	bne	1f91c <__assert_fail@plt+0xe1a8>
   1fb04:	b	1fb40 <__assert_fail@plt+0xe3cc>
   1fb08:	cmp	r6, #0
   1fb0c:	movne	r4, r6
   1fb10:	cmp	r8, #0
   1fb14:	movne	r4, r8
   1fb18:	str	r4, [fp, #-32]	; 0xffffffe0
   1fb1c:	mov	r1, #1
   1fb20:	str	r4, [sp, #16]
   1fb24:	b	1f9d4 <__assert_fail@plt+0xe260>
   1fb28:	mov	r1, #1
   1fb2c:	b	1fae0 <__assert_fail@plt+0xe36c>
   1fb30:	cmp	r1, #2
   1fb34:	beq	1f908 <__assert_fail@plt+0xe194>
   1fb38:	ldr	r1, [sp, #16]
   1fb3c:	b	1fb44 <__assert_fail@plt+0xe3d0>
   1fb40:	mov	r1, #0
   1fb44:	mov	r0, r1
   1fb48:	sub	sp, fp, #28
   1fb4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb54:	add	fp, sp, #28
   1fb58:	sub	sp, sp, #36	; 0x24
   1fb5c:	str	r0, [sp, #12]
   1fb60:	ldr	r5, [r0, #84]	; 0x54
   1fb64:	mov	r0, #0
   1fb68:	str	r0, [sp, #32]
   1fb6c:	str	r0, [sp, #20]
   1fb70:	str	r0, [sp, #16]
   1fb74:	str	r0, [sp, #24]
   1fb78:	ldr	r0, [r2, #4]
   1fb7c:	cmp	r0, #1
   1fb80:	blt	1fccc <__assert_fail@plt+0xe558>
   1fb84:	mov	sl, r3
   1fb88:	mov	r4, r2
   1fb8c:	mov	r6, r1
   1fb90:	mov	r7, #0
   1fb94:	str	r1, [sp, #8]
   1fb98:	str	r2, [sp, #4]
   1fb9c:	str	r3, [sp]
   1fba0:	ldr	r0, [r4, #8]
   1fba4:	ldr	r8, [r0, r7, lsl #2]
   1fba8:	ldr	r0, [r5]
   1fbac:	add	r0, r0, r8, lsl #3
   1fbb0:	ldrb	r0, [r0, #6]
   1fbb4:	tst	r0, #16
   1fbb8:	bne	1fbdc <__assert_fail@plt+0xe468>
   1fbbc:	ldr	r0, [r5]
   1fbc0:	add	r1, r0, r8, lsl #3
   1fbc4:	ldr	r0, [sp, #12]
   1fbc8:	mov	r2, r6
   1fbcc:	bl	202ec <__assert_fail@plt+0xeb78>
   1fbd0:	cmp	r0, #0
   1fbd4:	bne	1fca4 <__assert_fail@plt+0xe530>
   1fbd8:	b	1fcbc <__assert_fail@plt+0xe548>
   1fbdc:	mov	r0, r5
   1fbe0:	mov	r1, r8
   1fbe4:	ldr	r9, [sp, #12]
   1fbe8:	mov	r2, r9
   1fbec:	mov	r3, r6
   1fbf0:	bl	20018 <__assert_fail@plt+0xe8a4>
   1fbf4:	cmp	r0, #2
   1fbf8:	blt	1fc9c <__assert_fail@plt+0xe528>
   1fbfc:	add	r4, r0, r6
   1fc00:	ldr	r0, [r9, #100]	; 0x64
   1fc04:	ldr	r0, [r0, r4, lsl #2]
   1fc08:	ldr	r1, [r5, #12]
   1fc0c:	ldr	r2, [r1, r8, lsl #2]
   1fc10:	mov	r1, #0
   1fc14:	str	r1, [sp, #20]
   1fc18:	cmp	r0, #0
   1fc1c:	mov	sl, r9
   1fc20:	add	r6, sp, #16
   1fc24:	beq	1fc48 <__assert_fail@plt+0xe4d4>
   1fc28:	add	r1, r0, #4
   1fc2c:	mov	r0, r6
   1fc30:	mov	r9, r2
   1fc34:	bl	1c5b8 <__assert_fail@plt+0xae44>
   1fc38:	mov	r2, r9
   1fc3c:	str	r0, [sp, #32]
   1fc40:	cmp	r0, #0
   1fc44:	bne	1fcf4 <__assert_fail@plt+0xe580>
   1fc48:	mov	r0, r6
   1fc4c:	mov	r1, r2
   1fc50:	bl	1c7d4 <__assert_fail@plt+0xb060>
   1fc54:	cmp	r0, #0
   1fc58:	beq	1fce0 <__assert_fail@plt+0xe56c>
   1fc5c:	mov	r2, r6
   1fc60:	add	r0, sp, #32
   1fc64:	mov	r1, r5
   1fc68:	bl	1fe14 <__assert_fail@plt+0xe6a0>
   1fc6c:	ldr	r1, [sl, #100]	; 0x64
   1fc70:	str	r0, [r1, r4, lsl #2]
   1fc74:	ldr	r0, [sl, #100]	; 0x64
   1fc78:	ldr	r0, [r0, r4, lsl #2]
   1fc7c:	cmp	r0, #0
   1fc80:	ldr	sl, [sp]
   1fc84:	ldmib	sp, {r4, r6}
   1fc88:	bne	1fca4 <__assert_fail@plt+0xe530>
   1fc8c:	ldr	r9, [sp, #32]
   1fc90:	cmp	r9, #0
   1fc94:	beq	1fca4 <__assert_fail@plt+0xe530>
   1fc98:	b	1fcf8 <__assert_fail@plt+0xe584>
   1fc9c:	cmp	r0, #0
   1fca0:	beq	1fbbc <__assert_fail@plt+0xe448>
   1fca4:	ldr	r0, [r5, #12]
   1fca8:	ldr	r1, [r0, r8, lsl #2]
   1fcac:	mov	r0, sl
   1fcb0:	bl	1c7d4 <__assert_fail@plt+0xb060>
   1fcb4:	cmp	r0, #0
   1fcb8:	beq	1fce0 <__assert_fail@plt+0xe56c>
   1fcbc:	ldr	r0, [r4, #4]
   1fcc0:	add	r7, r7, #1
   1fcc4:	cmp	r7, r0
   1fcc8:	blt	1fba0 <__assert_fail@plt+0xe42c>
   1fccc:	ldr	r0, [sp, #24]
   1fcd0:	bl	13f04 <__assert_fail@plt+0x2790>
   1fcd4:	mov	r0, #0
   1fcd8:	sub	sp, fp, #28
   1fcdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fce0:	ldr	r0, [sp, #24]
   1fce4:	bl	13f04 <__assert_fail@plt+0x2790>
   1fce8:	mov	r0, #12
   1fcec:	sub	sp, fp, #28
   1fcf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fcf4:	mov	r9, r0
   1fcf8:	ldr	r0, [sp, #24]
   1fcfc:	bl	13f04 <__assert_fail@plt+0x2790>
   1fd00:	mov	r0, r9
   1fd04:	sub	sp, fp, #28
   1fd08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd0c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fd10:	add	fp, sp, #24
   1fd14:	sub	sp, sp, #8
   1fd18:	mov	r5, r3
   1fd1c:	mov	r7, r2
   1fd20:	mov	r4, r1
   1fd24:	mov	r6, r0
   1fd28:	mov	r0, r1
   1fd2c:	mov	r1, r2
   1fd30:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   1fd34:	cmp	r0, #0
   1fd38:	beq	1fd48 <__assert_fail@plt+0xe5d4>
   1fd3c:	mov	r0, #0
   1fd40:	sub	sp, fp, #24
   1fd44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fd48:	ldr	r8, [fp, #8]
   1fd4c:	ldr	r0, [r6]
   1fd50:	add	r1, r0, r7, lsl #3
   1fd54:	ldrb	r1, [r1, #4]
   1fd58:	cmp	r1, r8
   1fd5c:	ldreq	r0, [r0, r7, lsl #3]
   1fd60:	cmpeq	r0, r5
   1fd64:	beq	1fdec <__assert_fail@plt+0xe678>
   1fd68:	mov	r0, r4
   1fd6c:	mov	r1, r7
   1fd70:	bl	1c7d4 <__assert_fail@plt+0xb060>
   1fd74:	cmp	r0, #0
   1fd78:	beq	1fe08 <__assert_fail@plt+0xe694>
   1fd7c:	ldr	r0, [r6, #20]
   1fd80:	add	r7, r7, r7, lsl #1
   1fd84:	add	r0, r0, r7, lsl #2
   1fd88:	ldr	r1, [r0, #4]
   1fd8c:	cmp	r1, #2
   1fd90:	beq	1fda0 <__assert_fail@plt+0xe62c>
   1fd94:	cmp	r1, #0
   1fd98:	bne	1fdc4 <__assert_fail@plt+0xe650>
   1fd9c:	b	1fd3c <__assert_fail@plt+0xe5c8>
   1fda0:	ldr	r0, [r0, #8]
   1fda4:	ldr	r2, [r0, #4]
   1fda8:	str	r8, [sp]
   1fdac:	mov	r0, r6
   1fdb0:	mov	r1, r4
   1fdb4:	mov	r3, r5
   1fdb8:	bl	1fd0c <__assert_fail@plt+0xe598>
   1fdbc:	cmp	r0, #0
   1fdc0:	bne	1fd40 <__assert_fail@plt+0xe5cc>
   1fdc4:	ldr	r0, [r6, #20]
   1fdc8:	add	r0, r0, r7, lsl #2
   1fdcc:	ldr	r0, [r0, #8]
   1fdd0:	ldr	r7, [r0]
   1fdd4:	mov	r0, r4
   1fdd8:	mov	r1, r7
   1fddc:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   1fde0:	cmp	r0, #0
   1fde4:	beq	1fd4c <__assert_fail@plt+0xe5d8>
   1fde8:	b	1fd3c <__assert_fail@plt+0xe5c8>
   1fdec:	cmp	r8, #9
   1fdf0:	bne	1fd3c <__assert_fail@plt+0xe5c8>
   1fdf4:	mov	r0, r4
   1fdf8:	mov	r1, r7
   1fdfc:	bl	1c7d4 <__assert_fail@plt+0xb060>
   1fe00:	cmp	r0, #0
   1fe04:	bne	1fd3c <__assert_fail@plt+0xe5c8>
   1fe08:	mov	r0, #12
   1fe0c:	sub	sp, fp, #24
   1fe10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fe14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe18:	add	fp, sp, #28
   1fe1c:	sub	sp, sp, #4
   1fe20:	mov	r9, r1
   1fe24:	ldr	r1, [r2, #4]
   1fe28:	cmp	r1, #0
   1fe2c:	beq	1fed0 <__assert_fail@plt+0xe75c>
   1fe30:	mov	sl, r2
   1fe34:	str	r0, [sp]
   1fe38:	mov	r6, #0
   1fe3c:	mov	r0, r2
   1fe40:	mov	r1, #0
   1fe44:	bl	1cb98 <__assert_fail@plt+0xb424>
   1fe48:	mov	r7, r0
   1fe4c:	ldr	r0, [r9, #32]
   1fe50:	ldr	r1, [r9, #68]	; 0x44
   1fe54:	and	r1, r1, r7
   1fe58:	add	r1, r1, r1, lsl #1
   1fe5c:	mov	r5, r0
   1fe60:	ldr	r2, [r5, r1, lsl #2]!
   1fe64:	cmp	r2, #1
   1fe68:	blt	1fea8 <__assert_fail@plt+0xe734>
   1fe6c:	add	r0, r0, r1, lsl #2
   1fe70:	ldr	r8, [r0, #8]
   1fe74:	ldr	r4, [r8, r6, lsl #2]
   1fe78:	ldr	r0, [r4]
   1fe7c:	cmp	r7, r0
   1fe80:	bne	1fe98 <__assert_fail@plt+0xe724>
   1fe84:	add	r0, r4, #4
   1fe88:	mov	r1, sl
   1fe8c:	bl	1cbc4 <__assert_fail@plt+0xb450>
   1fe90:	cmp	r0, #0
   1fe94:	bne	1fec4 <__assert_fail@plt+0xe750>
   1fe98:	ldr	r0, [r5]
   1fe9c:	add	r6, r6, #1
   1fea0:	cmp	r6, r0
   1fea4:	blt	1fe74 <__assert_fail@plt+0xe700>
   1fea8:	mov	r0, r9
   1feac:	mov	r1, sl
   1feb0:	mov	r2, r7
   1feb4:	bl	1fef0 <__assert_fail@plt+0xe77c>
   1feb8:	mov	r4, r0
   1febc:	cmp	r0, #0
   1fec0:	beq	1fedc <__assert_fail@plt+0xe768>
   1fec4:	mov	r0, r4
   1fec8:	sub	sp, fp, #28
   1fecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fed0:	mov	r4, #0
   1fed4:	str	r4, [r0]
   1fed8:	b	1fec4 <__assert_fail@plt+0xe750>
   1fedc:	mov	r0, #12
   1fee0:	ldr	r1, [sp]
   1fee4:	str	r0, [r1]
   1fee8:	mov	r4, #0
   1feec:	b	1fec4 <__assert_fail@plt+0xe750>
   1fef0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fef4:	add	fp, sp, #24
   1fef8:	mov	r8, r2
   1fefc:	mov	r7, r1
   1ff00:	mov	r9, r0
   1ff04:	mov	r0, #56	; 0x38
   1ff08:	mov	r1, #1
   1ff0c:	bl	23e10 <__assert_fail@plt+0x1269c>
   1ff10:	cmp	r0, #0
   1ff14:	beq	2000c <__assert_fail@plt+0xe898>
   1ff18:	mov	r4, r0
   1ff1c:	add	r5, r0, #4
   1ff20:	mov	r0, r5
   1ff24:	mov	r1, r7
   1ff28:	bl	1c9bc <__assert_fail@plt+0xb248>
   1ff2c:	cmp	r0, #0
   1ff30:	bne	1fff8 <__assert_fail@plt+0xe884>
   1ff34:	str	r5, [r4, #40]	; 0x28
   1ff38:	ldr	r0, [r7, #4]
   1ff3c:	cmp	r0, #1
   1ff40:	blt	1ffd8 <__assert_fail@plt+0xe864>
   1ff44:	mov	r0, #0
   1ff48:	movw	ip, #65280	; 0xff00
   1ff4c:	movt	ip, #3
   1ff50:	add	r2, ip, #255	; 0xff
   1ff54:	mov	lr, #32
   1ff58:	ldr	r1, [r7, #8]
   1ff5c:	ldr	r1, [r1, r0, lsl #2]
   1ff60:	ldr	r3, [r9]
   1ff64:	add	r5, r3, r1, lsl #3
   1ff68:	ldr	r3, [r5, #4]!
   1ff6c:	and	r1, r3, r2
   1ff70:	cmp	r1, #1
   1ff74:	beq	1ffc8 <__assert_fail@plt+0xe854>
   1ff78:	and	r1, lr, r3, lsr #15
   1ff7c:	ldrb	r6, [r4, #52]	; 0x34
   1ff80:	orr	r1, r6, r1
   1ff84:	strb	r1, [r4, #52]	; 0x34
   1ff88:	uxtb	r3, r3
   1ff8c:	cmp	r3, #12
   1ff90:	beq	1ffc0 <__assert_fail@plt+0xe84c>
   1ff94:	cmp	r3, #4
   1ff98:	beq	1ffac <__assert_fail@plt+0xe838>
   1ff9c:	cmp	r3, #2
   1ffa0:	bne	1ffb4 <__assert_fail@plt+0xe840>
   1ffa4:	orr	r1, r1, #16
   1ffa8:	b	1ffc4 <__assert_fail@plt+0xe850>
   1ffac:	orr	r1, r1, #64	; 0x40
   1ffb0:	b	1ffc4 <__assert_fail@plt+0xe850>
   1ffb4:	ldr	r3, [r5]
   1ffb8:	tst	r3, ip
   1ffbc:	beq	1ffc8 <__assert_fail@plt+0xe854>
   1ffc0:	orr	r1, r1, #128	; 0x80
   1ffc4:	strb	r1, [r4, #52]	; 0x34
   1ffc8:	ldr	r1, [r7, #4]
   1ffcc:	add	r0, r0, #1
   1ffd0:	cmp	r0, r1
   1ffd4:	blt	1ff58 <__assert_fail@plt+0xe7e4>
   1ffd8:	mov	r0, r9
   1ffdc:	mov	r1, r4
   1ffe0:	mov	r2, r8
   1ffe4:	bl	1ce78 <__assert_fail@plt+0xb704>
   1ffe8:	cmp	r0, #0
   1ffec:	bne	20004 <__assert_fail@plt+0xe890>
   1fff0:	mov	r0, r4
   1fff4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fff8:	mov	r0, r4
   1fffc:	bl	13f04 <__assert_fail@plt+0x2790>
   20000:	b	2000c <__assert_fail@plt+0xe898>
   20004:	mov	r0, r4
   20008:	bl	173d4 <__assert_fail@plt+0x5c60>
   2000c:	mov	r4, #0
   20010:	mov	r0, r4
   20014:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20018:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2001c:	add	fp, sp, #28
   20020:	sub	sp, sp, #4
   20024:	mov	sl, r3
   20028:	mov	r7, r2
   2002c:	mov	r5, r0
   20030:	ldr	r6, [r0]
   20034:	add	r0, r6, r1, lsl #3
   20038:	ldrb	r8, [r0, #4]
   2003c:	cmp	r8, #7
   20040:	beq	201e0 <__assert_fail@plt+0xea6c>
   20044:	mov	r4, r1
   20048:	mov	r0, r7
   2004c:	mov	r1, sl
   20050:	bl	1b440 <__assert_fail@plt+0x9ccc>
   20054:	mov	r9, r0
   20058:	mov	r2, #0
   2005c:	cmp	r8, #5
   20060:	bne	200a4 <__assert_fail@plt+0xe930>
   20064:	cmp	r9, #2
   20068:	blt	201cc <__assert_fail@plt+0xea58>
   2006c:	ldr	r0, [r5, #128]	; 0x80
   20070:	tst	r0, #64	; 0x40
   20074:	bne	20088 <__assert_fail@plt+0xe914>
   20078:	ldr	r1, [r7, #4]
   2007c:	ldrb	r1, [r1, sl]
   20080:	cmp	r1, #10
   20084:	beq	201cc <__assert_fail@plt+0xea58>
   20088:	tst	r0, #128	; 0x80
   2008c:	beq	201c8 <__assert_fail@plt+0xea54>
   20090:	ldr	r0, [r7, #4]
   20094:	ldrb	r0, [r0, sl]
   20098:	cmp	r0, #0
   2009c:	movne	r2, r9
   200a0:	b	201cc <__assert_fail@plt+0xea58>
   200a4:	cmp	r8, #6
   200a8:	bne	201cc <__assert_fail@plt+0xea58>
   200ac:	cmp	r9, #2
   200b0:	blt	201cc <__assert_fail@plt+0xea58>
   200b4:	ldr	r4, [r6, r4, lsl #3]
   200b8:	ldr	r0, [r4, #32]
   200bc:	cmp	r0, #0
   200c0:	bne	200dc <__assert_fail@plt+0xe968>
   200c4:	ldr	r0, [r4, #36]	; 0x24
   200c8:	cmp	r0, #0
   200cc:	bne	200dc <__assert_fail@plt+0xe968>
   200d0:	ldr	r0, [r4, #20]
   200d4:	cmp	r0, #0
   200d8:	beq	201d8 <__assert_fail@plt+0xea64>
   200dc:	mov	r0, r7
   200e0:	mov	r1, sl
   200e4:	bl	191b4 <__assert_fail@plt+0x7a40>
   200e8:	mov	r6, r0
   200ec:	ldr	r0, [r4, #20]
   200f0:	cmp	r0, #1
   200f4:	blt	2011c <__assert_fail@plt+0xe9a8>
   200f8:	ldr	r0, [r4]
   200fc:	mov	r1, #0
   20100:	ldr	r2, [r0, r1, lsl #2]
   20104:	cmp	r6, r2
   20108:	beq	2019c <__assert_fail@plt+0xea28>
   2010c:	add	r1, r1, #1
   20110:	ldr	r2, [r4, #20]
   20114:	cmp	r1, r2
   20118:	blt	20100 <__assert_fail@plt+0xe98c>
   2011c:	ldr	r0, [r4, #36]	; 0x24
   20120:	cmp	r0, #1
   20124:	blt	20154 <__assert_fail@plt+0xe9e0>
   20128:	mov	r5, #0
   2012c:	ldr	r0, [r4, #12]
   20130:	ldr	r1, [r0, r5, lsl #2]
   20134:	mov	r0, r6
   20138:	bl	11414 <iswctype@plt>
   2013c:	cmp	r0, #0
   20140:	bne	2019c <__assert_fail@plt+0xea28>
   20144:	add	r5, r5, #1
   20148:	ldr	r0, [r4, #36]	; 0x24
   2014c:	cmp	r5, r0
   20150:	blt	2012c <__assert_fail@plt+0xe9b8>
   20154:	ldr	r0, [r4, #32]
   20158:	cmp	r0, #1
   2015c:	blt	20194 <__assert_fail@plt+0xea20>
   20160:	ldr	r0, [r4, #4]
   20164:	mov	r1, #0
   20168:	ldr	r2, [r0, r1, lsl #2]
   2016c:	cmp	r2, r6
   20170:	bhi	20184 <__assert_fail@plt+0xea10>
   20174:	ldr	r2, [r4, #8]
   20178:	ldr	r2, [r2, r1, lsl #2]
   2017c:	cmp	r6, r2
   20180:	bls	2019c <__assert_fail@plt+0xea28>
   20184:	add	r1, r1, #1
   20188:	ldr	r2, [r4, #32]
   2018c:	cmp	r1, r2
   20190:	blt	20168 <__assert_fail@plt+0xe9f4>
   20194:	mov	r0, #0
   20198:	b	201a0 <__assert_fail@plt+0xea2c>
   2019c:	mov	r0, r9
   201a0:	ldrb	r1, [r4, #16]
   201a4:	tst	r1, #1
   201a8:	mov	r2, #0
   201ac:	bne	201b8 <__assert_fail@plt+0xea44>
   201b0:	mov	r2, r0
   201b4:	b	201cc <__assert_fail@plt+0xea58>
   201b8:	cmp	r0, #0
   201bc:	bgt	201cc <__assert_fail@plt+0xea58>
   201c0:	cmp	r9, #1
   201c4:	movle	r9, #1
   201c8:	mov	r2, r9
   201cc:	mov	r0, r2
   201d0:	sub	sp, fp, #28
   201d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   201d8:	mov	r6, #0
   201dc:	b	200ec <__assert_fail@plt+0xe978>
   201e0:	ldr	r0, [r7, #4]
   201e4:	ldrb	r5, [r0, sl]
   201e8:	mov	r2, #0
   201ec:	cmp	r5, #194	; 0xc2
   201f0:	bcc	201cc <__assert_fail@plt+0xea58>
   201f4:	ldr	r1, [r7, #48]	; 0x30
   201f8:	add	r2, sl, #2
   201fc:	cmp	r2, r1
   20200:	ble	2020c <__assert_fail@plt+0xea98>
   20204:	mov	r2, #0
   20208:	b	201cc <__assert_fail@plt+0xea58>
   2020c:	add	r0, r0, sl
   20210:	ldrb	r3, [r0, #1]
   20214:	cmp	r5, #223	; 0xdf
   20218:	bhi	20238 <__assert_fail@plt+0xeac4>
   2021c:	mov	r2, #2
   20220:	cmp	r3, #191	; 0xbf
   20224:	movwhi	r2, #0
   20228:	sxtb	r0, r3
   2022c:	cmn	r0, #1
   20230:	movwgt	r2, #0
   20234:	b	201cc <__assert_fail@plt+0xea58>
   20238:	cmp	r5, #239	; 0xef
   2023c:	bhi	20258 <__assert_fail@plt+0xeae4>
   20240:	mov	r2, #3
   20244:	cmp	r5, #224	; 0xe0
   20248:	bne	202b4 <__assert_fail@plt+0xeb40>
   2024c:	cmp	r3, #160	; 0xa0
   20250:	bcc	20204 <__assert_fail@plt+0xea90>
   20254:	b	202b4 <__assert_fail@plt+0xeb40>
   20258:	cmp	r5, #247	; 0xf7
   2025c:	bhi	20278 <__assert_fail@plt+0xeb04>
   20260:	mov	r2, #4
   20264:	cmp	r5, #240	; 0xf0
   20268:	bne	202b4 <__assert_fail@plt+0xeb40>
   2026c:	cmp	r3, #144	; 0x90
   20270:	bcc	20204 <__assert_fail@plt+0xea90>
   20274:	b	202b4 <__assert_fail@plt+0xeb40>
   20278:	cmp	r5, #251	; 0xfb
   2027c:	bhi	20298 <__assert_fail@plt+0xeb24>
   20280:	mov	r2, #5
   20284:	cmp	r5, #248	; 0xf8
   20288:	bne	202b4 <__assert_fail@plt+0xeb40>
   2028c:	cmp	r3, #136	; 0x88
   20290:	bcc	20204 <__assert_fail@plt+0xea90>
   20294:	b	202b4 <__assert_fail@plt+0xeb40>
   20298:	cmp	r5, #253	; 0xfd
   2029c:	bhi	20204 <__assert_fail@plt+0xea90>
   202a0:	mov	r2, #6
   202a4:	cmp	r5, #252	; 0xfc
   202a8:	bne	202b4 <__assert_fail@plt+0xeb40>
   202ac:	cmp	r3, #132	; 0x84
   202b0:	bcc	20204 <__assert_fail@plt+0xea90>
   202b4:	add	r3, r2, sl
   202b8:	cmp	r3, r1
   202bc:	bgt	20204 <__assert_fail@plt+0xea90>
   202c0:	mov	r1, #1
   202c4:	ldrb	r3, [r0, r1]
   202c8:	sxtb	r7, r3
   202cc:	cmn	r7, #1
   202d0:	bgt	20204 <__assert_fail@plt+0xea90>
   202d4:	cmp	r3, #191	; 0xbf
   202d8:	bhi	20204 <__assert_fail@plt+0xea90>
   202dc:	add	r1, r1, #1
   202e0:	cmp	r1, r2
   202e4:	bcc	202c4 <__assert_fail@plt+0xeb50>
   202e8:	b	201cc <__assert_fail@plt+0xea58>
   202ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   202f0:	add	fp, sp, #24
   202f4:	mov	r6, r0
   202f8:	ldr	r7, [r1, #4]
   202fc:	mvn	r0, #0
   20300:	uxtab	r0, r0, r7
   20304:	mov	r8, #0
   20308:	cmp	r0, #6
   2030c:	bhi	20418 <__assert_fail@plt+0xeca4>
   20310:	mov	r5, r2
   20314:	ldr	r2, [r6, #4]
   20318:	ldrb	r2, [r2, r5]
   2031c:	sxtb	r3, r2
   20320:	add	r4, pc, #0
   20324:	ldr	pc, [r4, r0, lsl #2]
   20328:	andeq	r0, r2, r4, asr #6
   2032c:	andeq	r0, r2, r8, lsl r4
   20330:	andeq	r0, r2, r8, asr r3
   20334:	andeq	r0, r2, r8, lsl r4
   20338:	andeq	r0, r2, r8, ror r3
   2033c:	andeq	r0, r2, r8, lsl r4
   20340:	andeq	r0, r2, r0, ror r3
   20344:	ldrb	r0, [r1]
   20348:	uxtb	r1, r3
   2034c:	cmp	r0, r1
   20350:	beq	203ac <__assert_fail@plt+0xec38>
   20354:	b	20418 <__assert_fail@plt+0xeca4>
   20358:	ldr	r0, [r1]
   2035c:	mov	r1, r2
   20360:	bl	1e30c <__assert_fail@plt+0xcb98>
   20364:	cmp	r0, #0
   20368:	bne	203ac <__assert_fail@plt+0xec38>
   2036c:	b	20418 <__assert_fail@plt+0xeca4>
   20370:	cmp	r3, #0
   20374:	blt	20418 <__assert_fail@plt+0xeca4>
   20378:	cmp	r2, #0
   2037c:	beq	2039c <__assert_fail@plt+0xec28>
   20380:	cmp	r2, #10
   20384:	bne	203ac <__assert_fail@plt+0xec38>
   20388:	ldr	r0, [r6, #84]	; 0x54
   2038c:	ldrb	r0, [r0, #128]	; 0x80
   20390:	tst	r0, #64	; 0x40
   20394:	bne	203ac <__assert_fail@plt+0xec38>
   20398:	b	20418 <__assert_fail@plt+0xeca4>
   2039c:	ldr	r0, [r6, #84]	; 0x54
   203a0:	ldrb	r0, [r0, #128]	; 0x80
   203a4:	tst	r0, #128	; 0x80
   203a8:	bne	20418 <__assert_fail@plt+0xeca4>
   203ac:	movw	r0, #65280	; 0xff00
   203b0:	movt	r0, #3
   203b4:	tst	r7, r0
   203b8:	beq	20414 <__assert_fail@plt+0xeca0>
   203bc:	ldr	r2, [r6, #88]	; 0x58
   203c0:	mov	r0, r6
   203c4:	mov	r1, r5
   203c8:	bl	1e194 <__assert_fail@plt+0xca20>
   203cc:	and	r1, r0, #1
   203d0:	tst	r7, #1024	; 0x400
   203d4:	beq	203e0 <__assert_fail@plt+0xec6c>
   203d8:	cmp	r1, #0
   203dc:	beq	20418 <__assert_fail@plt+0xeca4>
   203e0:	tst	r7, #2048	; 0x800
   203e4:	cmpne	r1, #0
   203e8:	bne	20418 <__assert_fail@plt+0xeca4>
   203ec:	tst	r7, #8192	; 0x2000
   203f0:	beq	203fc <__assert_fail@plt+0xec88>
   203f4:	ands	r1, r0, #2
   203f8:	beq	20418 <__assert_fail@plt+0xeca4>
   203fc:	and	r1, r7, #32768	; 0x8000
   20400:	mov	r2, #1
   20404:	eor	r1, r2, r1, lsr #15
   20408:	and	r0, r0, #8
   2040c:	orr	r0, r1, r0, lsr #3
   20410:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20414:	mov	r8, #1
   20418:	mov	r0, r8
   2041c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20424:	add	fp, sp, #28
   20428:	sub	sp, sp, #20
   2042c:	mov	r5, r0
   20430:	ldr	r0, [r1, #8]
   20434:	cmp	r0, #1
   20438:	blt	205d8 <__assert_fail@plt+0xee64>
   2043c:	mov	r4, r1
   20440:	ldr	sl, [r5, #84]	; 0x54
   20444:	mov	r8, #0
   20448:	movw	r9, #65280	; 0xff00
   2044c:	movt	r9, #3
   20450:	ldr	r0, [r4, #12]
   20454:	ldr	r7, [r0, r8, lsl #2]
   20458:	ldr	r0, [sl]
   2045c:	add	r0, r0, r7, lsl #3
   20460:	ldr	r6, [r0, #4]
   20464:	tst	r6, #1048576	; 0x100000
   20468:	beq	205c8 <__assert_fail@plt+0xee54>
   2046c:	tst	r6, r9
   20470:	beq	204c4 <__assert_fail@plt+0xed50>
   20474:	ldr	r1, [r5, #40]	; 0x28
   20478:	ldr	r2, [r5, #88]	; 0x58
   2047c:	mov	r0, r5
   20480:	bl	1e194 <__assert_fail@plt+0xca20>
   20484:	and	r1, r0, #1
   20488:	tst	r6, #1024	; 0x400
   2048c:	beq	20498 <__assert_fail@plt+0xed24>
   20490:	cmp	r1, #0
   20494:	beq	205c8 <__assert_fail@plt+0xee54>
   20498:	tst	r6, #2048	; 0x800
   2049c:	cmpne	r1, #0
   204a0:	bne	205c8 <__assert_fail@plt+0xee54>
   204a4:	tst	r6, #8192	; 0x2000
   204a8:	beq	204b4 <__assert_fail@plt+0xed40>
   204ac:	ands	r1, r0, #2
   204b0:	beq	205c8 <__assert_fail@plt+0xee54>
   204b4:	tst	r6, #32768	; 0x8000
   204b8:	beq	204c4 <__assert_fail@plt+0xed50>
   204bc:	ands	r0, r0, #8
   204c0:	beq	205c8 <__assert_fail@plt+0xee54>
   204c4:	ldr	r3, [r5, #40]	; 0x28
   204c8:	mov	r0, sl
   204cc:	mov	r1, r7
   204d0:	mov	r2, r5
   204d4:	bl	20018 <__assert_fail@plt+0xe8a4>
   204d8:	cmp	r0, #0
   204dc:	beq	205c8 <__assert_fail@plt+0xee54>
   204e0:	ldr	r1, [r5, #40]	; 0x28
   204e4:	ldr	r2, [r5, #120]	; 0x78
   204e8:	cmp	r2, r0
   204ec:	movlt	r2, r0
   204f0:	str	r2, [r5, #120]	; 0x78
   204f4:	add	r6, r1, r0
   204f8:	mov	r0, r5
   204fc:	mov	r1, r6
   20500:	bl	1f0f4 <__assert_fail@plt+0xd980>
   20504:	str	r0, [sp, #16]
   20508:	cmp	r0, #0
   2050c:	bne	205dc <__assert_fail@plt+0xee68>
   20510:	ldr	r0, [r5, #100]	; 0x64
   20514:	ldr	r9, [r0, r6, lsl #2]
   20518:	ldr	r0, [sl, #12]
   2051c:	ldr	r1, [sl, #24]
   20520:	ldr	r0, [r0, r7, lsl #2]
   20524:	add	r0, r0, r0, lsl #1
   20528:	add	r2, r1, r0, lsl #2
   2052c:	cmp	r9, #0
   20530:	beq	20554 <__assert_fail@plt+0xede0>
   20534:	ldr	r1, [r9, #40]	; 0x28
   20538:	mov	r7, sp
   2053c:	mov	r0, r7
   20540:	bl	1ee38 <__assert_fail@plt+0xd6c4>
   20544:	str	r0, [sp, #16]
   20548:	cmp	r0, #0
   2054c:	beq	20568 <__assert_fail@plt+0xedf4>
   20550:	b	205dc <__assert_fail@plt+0xee68>
   20554:	vldr	d16, [r2]
   20558:	ldr	r0, [r2, #8]
   2055c:	str	r0, [sp, #8]
   20560:	vstr	d16, [sp]
   20564:	mov	r7, sp
   20568:	ldr	r2, [r5, #88]	; 0x58
   2056c:	sub	r1, r6, #1
   20570:	mov	r0, r5
   20574:	bl	1e194 <__assert_fail@plt+0xca20>
   20578:	mov	r3, r0
   2057c:	add	r0, sp, #16
   20580:	mov	r1, sl
   20584:	mov	r2, r7
   20588:	bl	1caa4 <__assert_fail@plt+0xb330>
   2058c:	ldr	r1, [r5, #100]	; 0x64
   20590:	str	r0, [r1, r6, lsl #2]
   20594:	cmp	r9, #0
   20598:	beq	205a4 <__assert_fail@plt+0xee30>
   2059c:	ldr	r0, [sp, #8]
   205a0:	bl	13f04 <__assert_fail@plt+0x2790>
   205a4:	ldr	r0, [r5, #100]	; 0x64
   205a8:	ldr	r0, [r0, r6, lsl #2]
   205ac:	cmp	r0, #0
   205b0:	movw	r9, #65280	; 0xff00
   205b4:	movt	r9, #3
   205b8:	bne	205c8 <__assert_fail@plt+0xee54>
   205bc:	ldr	r0, [sp, #16]
   205c0:	cmp	r0, #0
   205c4:	bne	205dc <__assert_fail@plt+0xee68>
   205c8:	add	r8, r8, #1
   205cc:	ldr	r0, [r4, #8]
   205d0:	cmp	r8, r0
   205d4:	blt	20450 <__assert_fail@plt+0xecdc>
   205d8:	mov	r0, #0
   205dc:	sub	sp, fp, #28
   205e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   205e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   205e8:	add	fp, sp, #28
   205ec:	sub	sp, sp, #68	; 0x44
   205f0:	sub	sp, sp, #14336	; 0x3800
   205f4:	mov	r4, r1
   205f8:	mov	r7, r0
   205fc:	mov	r6, #0
   20600:	str	r6, [r1, #44]	; 0x2c
   20604:	str	r6, [r1, #48]	; 0x30
   20608:	sub	lr, fp, #4096	; 0x1000
   2060c:	sub	r2, lr, #2128	; 0x850
   20610:	add	r3, sp, #16
   20614:	bl	20a94 <__assert_fail@plt+0xf320>
   20618:	cmp	r0, #0
   2061c:	ble	209ac <__assert_fail@plt+0xf238>
   20620:	mov	r5, r0
   20624:	str	r4, [sp, #4]
   20628:	add	r1, r0, #1
   2062c:	sub	r0, fp, #3120	; 0xc30
   20630:	bl	1c2fc <__assert_fail@plt+0xab88>
   20634:	str	r0, [fp, #-36]	; 0xffffffdc
   20638:	cmp	r0, #0
   2063c:	bne	20978 <__assert_fail@plt+0xf204>
   20640:	sub	r0, fp, #3152	; 0xc50
   20644:	bl	20fc4 <__assert_fail@plt+0xf850>
   20648:	sub	r9, fp, #3120	; 0xc30
   2064c:	sub	lr, fp, #1024	; 0x400
   20650:	sub	r6, lr, #36	; 0x24
   20654:	mov	sl, #0
   20658:	mov	r0, #0
   2065c:	str	r0, [sp, #8]
   20660:	str	r5, [sp, #12]
   20664:	mov	r0, #0
   20668:	str	r0, [fp, #-3116]	; 0xfffff3d4
   2066c:	add	r0, sl, sl, lsl #1
   20670:	sub	lr, fp, #4096	; 0x1000
   20674:	sub	r1, lr, #2128	; 0x850
   20678:	add	r0, r1, r0, lsl #2
   2067c:	mov	r4, r0
   20680:	ldr	r1, [r4, #4]!
   20684:	cmp	r1, #1
   20688:	blt	206ec <__assert_fail@plt+0xef78>
   2068c:	ldr	r5, [r0, #8]
   20690:	mov	r6, #0
   20694:	ldr	r1, [fp, #-36]	; 0xffffffdc
   20698:	ldr	r0, [r5, r6, lsl #2]
   2069c:	ldr	r2, [r7, #12]
   206a0:	ldr	r0, [r2, r0, lsl #2]
   206a4:	cmn	r0, #1
   206a8:	beq	206cc <__assert_fail@plt+0xef58>
   206ac:	ldr	r1, [r7, #24]
   206b0:	add	r0, r0, r0, lsl #1
   206b4:	add	r1, r1, r0, lsl #2
   206b8:	mov	r0, r9
   206bc:	bl	1c5b8 <__assert_fail@plt+0xae44>
   206c0:	mov	r1, #0
   206c4:	cmp	r0, #0
   206c8:	bne	20970 <__assert_fail@plt+0xf1fc>
   206cc:	ldr	r0, [r4]
   206d0:	add	r6, r6, #1
   206d4:	cmp	r6, r0
   206d8:	blt	20698 <__assert_fail@plt+0xef24>
   206dc:	str	r1, [fp, #-36]	; 0xffffffdc
   206e0:	ldr	r5, [sp, #12]
   206e4:	sub	lr, fp, #1024	; 0x400
   206e8:	sub	r6, lr, #36	; 0x24
   206ec:	sub	r0, fp, #36	; 0x24
   206f0:	mov	r1, r7
   206f4:	mov	r2, r9
   206f8:	mov	r3, #0
   206fc:	bl	1caa4 <__assert_fail@plt+0xb330>
   20700:	mov	r8, r0
   20704:	str	r0, [r6, sl, lsl #2]
   20708:	cmp	r0, #0
   2070c:	bne	2071c <__assert_fail@plt+0xefa8>
   20710:	ldr	r0, [fp, #-36]	; 0xffffffdc
   20714:	cmp	r0, #0
   20718:	bne	20978 <__assert_fail@plt+0xf204>
   2071c:	ldrsb	r0, [r8, #52]	; 0x34
   20720:	cmn	r0, #1
   20724:	ble	20748 <__assert_fail@plt+0xefd4>
   20728:	sub	lr, fp, #2048	; 0x800
   2072c:	sub	r0, lr, #36	; 0x24
   20730:	str	r8, [r0, sl, lsl #2]
   20734:	ldr	r0, [r6, sl, lsl #2]
   20738:	sub	lr, fp, #3072	; 0xc00
   2073c:	sub	r1, lr, #36	; 0x24
   20740:	str	r0, [r1, sl, lsl #2]
   20744:	b	207d4 <__assert_fail@plt+0xf060>
   20748:	sub	r0, fp, #36	; 0x24
   2074c:	mov	r1, r7
   20750:	mov	r2, r9
   20754:	mov	r3, #1
   20758:	bl	1caa4 <__assert_fail@plt+0xb330>
   2075c:	sub	lr, fp, #2048	; 0x800
   20760:	sub	r1, lr, #36	; 0x24
   20764:	str	r0, [r1, sl, lsl #2]
   20768:	cmp	r0, #0
   2076c:	bne	2077c <__assert_fail@plt+0xf008>
   20770:	ldr	r1, [fp, #-36]	; 0xffffffdc
   20774:	cmp	r1, #0
   20778:	bne	20978 <__assert_fail@plt+0xf204>
   2077c:	cmp	r8, r0
   20780:	beq	207a0 <__assert_fail@plt+0xf02c>
   20784:	ldr	r0, [r7, #92]	; 0x5c
   20788:	cmp	r0, #1
   2078c:	mov	r0, #0
   20790:	movwgt	r0, #1
   20794:	ldr	r1, [sp, #8]
   20798:	orr	r1, r1, r0
   2079c:	str	r1, [sp, #8]
   207a0:	sub	r0, fp, #36	; 0x24
   207a4:	mov	r1, r7
   207a8:	mov	r2, r9
   207ac:	mov	r3, #2
   207b0:	bl	1caa4 <__assert_fail@plt+0xb330>
   207b4:	sub	lr, fp, #3072	; 0xc00
   207b8:	sub	r1, lr, #36	; 0x24
   207bc:	str	r0, [r1, sl, lsl #2]
   207c0:	cmp	r0, #0
   207c4:	bne	207d4 <__assert_fail@plt+0xf060>
   207c8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   207cc:	cmp	r0, #0
   207d0:	bne	20978 <__assert_fail@plt+0xf204>
   207d4:	add	r0, sp, #16
   207d8:	add	r1, r0, sl, lsl #5
   207dc:	sub	r0, fp, #3152	; 0xc50
   207e0:	bl	20fd4 <__assert_fail@plt+0xf860>
   207e4:	add	sl, sl, #1
   207e8:	cmp	sl, r5
   207ec:	blt	20664 <__assert_fail@plt+0xeef0>
   207f0:	ldr	r0, [sp, #8]
   207f4:	tst	r0, #1
   207f8:	bne	209d0 <__assert_fail@plt+0xf25c>
   207fc:	mov	r0, #4
   20800:	mov	r1, #256	; 0x100
   20804:	bl	23e10 <__assert_fail@plt+0x1269c>
   20808:	mov	r8, r0
   2080c:	ldr	r0, [sp, #4]
   20810:	str	r8, [r0, #44]	; 0x2c
   20814:	cmp	r8, #0
   20818:	beq	20978 <__assert_fail@plt+0xf204>
   2081c:	mov	r0, #0
   20820:	mov	r1, #0
   20824:	add	r5, sp, #16
   20828:	mov	r9, r5
   2082c:	sub	r2, fp, #3152	; 0xc50
   20830:	ldr	r2, [r2, r1, lsl #2]
   20834:	cmp	r2, #0
   20838:	beq	208b0 <__assert_fail@plt+0xf13c>
   2083c:	add	r3, r7, r1, lsl #2
   20840:	add	ip, r3, #96	; 0x60
   20844:	lsl	r4, r1, #5
   20848:	mov	r6, #1
   2084c:	b	20890 <__assert_fail@plt+0xf11c>
   20850:	mov	lr, #0
   20854:	ldr	r3, [r9, lr, lsl #3]
   20858:	add	lr, lr, #4
   2085c:	tst	r3, r6
   20860:	beq	20854 <__assert_fail@plt+0xf0e0>
   20864:	ldr	r3, [ip]
   20868:	tst	r3, r6
   2086c:	sub	r3, fp, #2048	; 0x800
   20870:	sub	r3, r3, #36	; 0x24
   20874:	sub	r5, fp, #1024	; 0x400
   20878:	sub	r5, r5, #36	; 0x24
   2087c:	moveq	r3, r5
   20880:	add	r3, r3, lr
   20884:	ldr	r3, [r3, #-4]
   20888:	str	r3, [r8, r4, lsl #2]
   2088c:	b	20898 <__assert_fail@plt+0xf124>
   20890:	tst	r2, #1
   20894:	bne	20850 <__assert_fail@plt+0xf0dc>
   20898:	add	r4, r4, #1
   2089c:	lsr	r3, r2, #1
   208a0:	lsl	r6, r6, #1
   208a4:	cmp	r0, r2, lsr #1
   208a8:	mov	r2, r3
   208ac:	bne	20890 <__assert_fail@plt+0xf11c>
   208b0:	add	r9, r9, #4
   208b4:	add	r1, r1, #1
   208b8:	cmp	r1, #8
   208bc:	bne	2082c <__assert_fail@plt+0xf0b8>
   208c0:	sub	r0, fp, #3152	; 0xc50
   208c4:	mov	r1, #10
   208c8:	bl	1e30c <__assert_fail@plt+0xcb98>
   208cc:	cmp	r0, #0
   208d0:	beq	20930 <__assert_fail@plt+0xf1bc>
   208d4:	ldr	r0, [sp, #12]
   208d8:	cmp	r0, #1
   208dc:	blt	20930 <__assert_fail@plt+0xf1bc>
   208e0:	mov	r4, #0
   208e4:	add	r5, sp, #16
   208e8:	mov	r0, r5
   208ec:	mov	r1, #10
   208f0:	bl	1e30c <__assert_fail@plt+0xcb98>
   208f4:	cmp	r0, #0
   208f8:	bne	20914 <__assert_fail@plt+0xf1a0>
   208fc:	add	r5, r5, #32
   20900:	add	r4, r4, #1
   20904:	ldr	r0, [sp, #12]
   20908:	cmp	r4, r0
   2090c:	blt	208e8 <__assert_fail@plt+0xf174>
   20910:	b	20930 <__assert_fail@plt+0xf1bc>
   20914:	sub	lr, fp, #3072	; 0xc00
   20918:	sub	r0, lr, #36	; 0x24
   2091c:	ldr	r0, [r0, r4, lsl #2]
   20920:	str	r0, [r8, #40]	; 0x28
   20924:	ldr	r1, [sp, #8]
   20928:	tst	r1, #1
   2092c:	strne	r0, [r8, #1064]	; 0x428
   20930:	ldr	r0, [fp, #-3112]	; 0xfffff3d8
   20934:	bl	13f04 <__assert_fail@plt+0x2790>
   20938:	mov	r6, #1
   2093c:	ldr	r5, [sp, #12]
   20940:	cmp	r5, #1
   20944:	blt	20964 <__assert_fail@plt+0xf1f0>
   20948:	sub	lr, fp, #4096	; 0x1000
   2094c:	sub	r0, lr, #2128	; 0x850
   20950:	add	r4, r0, #8
   20954:	ldr	r0, [r4], #12
   20958:	bl	13f04 <__assert_fail@plt+0x2790>
   2095c:	subs	r5, r5, #1
   20960:	bne	20954 <__assert_fail@plt+0xf1e0>
   20964:	mov	r0, r6
   20968:	sub	sp, fp, #28
   2096c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20970:	str	r0, [fp, #-36]	; 0xffffffdc
   20974:	ldr	r5, [sp, #12]
   20978:	ldr	r0, [fp, #-3112]	; 0xfffff3d8
   2097c:	bl	13f04 <__assert_fail@plt+0x2790>
   20980:	mov	r6, #0
   20984:	cmp	r5, #1
   20988:	blt	20964 <__assert_fail@plt+0xf1f0>
   2098c:	sub	lr, fp, #4096	; 0x1000
   20990:	sub	r0, lr, #2128	; 0x850
   20994:	add	r4, r0, #8
   20998:	ldr	r0, [r4], #12
   2099c:	bl	13f04 <__assert_fail@plt+0x2790>
   209a0:	subs	r5, r5, #1
   209a4:	bne	20998 <__assert_fail@plt+0xf224>
   209a8:	b	20964 <__assert_fail@plt+0xf1f0>
   209ac:	bne	20964 <__assert_fail@plt+0xf1f0>
   209b0:	mov	r0, #4
   209b4:	mov	r1, #256	; 0x100
   209b8:	bl	23e10 <__assert_fail@plt+0x1269c>
   209bc:	mov	r6, r0
   209c0:	str	r0, [r4, #44]	; 0x2c
   209c4:	cmp	r0, #0
   209c8:	movwne	r6, #1
   209cc:	b	20964 <__assert_fail@plt+0xf1f0>
   209d0:	mov	r0, #4
   209d4:	mov	r1, #512	; 0x200
   209d8:	bl	23e10 <__assert_fail@plt+0x1269c>
   209dc:	mov	r8, r0
   209e0:	ldr	r0, [sp, #4]
   209e4:	str	r8, [r0, #48]	; 0x30
   209e8:	cmp	r8, #0
   209ec:	beq	20978 <__assert_fail@plt+0xf204>
   209f0:	sub	ip, r6, #4
   209f4:	sub	lr, fp, #2048	; 0x800
   209f8:	sub	r0, lr, #36	; 0x24
   209fc:	sub	lr, r0, #4
   20a00:	mov	r2, #0
   20a04:	add	r3, sp, #16
   20a08:	mov	r7, #0
   20a0c:	sub	r0, fp, #3152	; 0xc50
   20a10:	ldr	r5, [r0, r7, lsl #2]
   20a14:	cmp	r5, #0
   20a18:	beq	20a80 <__assert_fail@plt+0xf30c>
   20a1c:	lsl	r0, r7, #5
   20a20:	mov	r1, #1
   20a24:	b	20a60 <__assert_fail@plt+0xf2ec>
   20a28:	mov	r4, r3
   20a2c:	mov	sl, ip
   20a30:	mov	r9, lr
   20a34:	add	sl, sl, #4
   20a38:	add	r9, r9, #4
   20a3c:	ldr	r6, [r4], #32
   20a40:	tst	r6, r1
   20a44:	beq	20a34 <__assert_fail@plt+0xf2c0>
   20a48:	ldr	r4, [sl]
   20a4c:	mov	r6, r8
   20a50:	str	r4, [r6, r0, lsl #2]!
   20a54:	ldr	r4, [r9]
   20a58:	str	r4, [r6, #1024]	; 0x400
   20a5c:	b	20a68 <__assert_fail@plt+0xf2f4>
   20a60:	tst	r5, #1
   20a64:	bne	20a28 <__assert_fail@plt+0xf2b4>
   20a68:	add	r0, r0, #1
   20a6c:	lsr	r4, r5, #1
   20a70:	lsl	r1, r1, #1
   20a74:	cmp	r2, r5, lsr #1
   20a78:	mov	r5, r4
   20a7c:	bne	20a60 <__assert_fail@plt+0xf2ec>
   20a80:	add	r3, r3, #4
   20a84:	add	r7, r7, #1
   20a88:	cmp	r7, #8
   20a8c:	bne	20a0c <__assert_fail@plt+0xf298>
   20a90:	b	208c0 <__assert_fail@plt+0xf14c>
   20a94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a98:	add	fp, sp, #28
   20a9c:	sub	sp, sp, #148	; 0x94
   20aa0:	str	r3, [sp, #40]	; 0x28
   20aa4:	str	r2, [sp, #36]	; 0x24
   20aa8:	mov	r8, r1
   20aac:	mov	sl, r0
   20ab0:	sub	r7, fp, #64	; 0x40
   20ab4:	mov	r0, r7
   20ab8:	bl	20fc4 <__assert_fail@plt+0xf850>
   20abc:	ldr	r0, [r8, #8]
   20ac0:	cmp	r0, #1
   20ac4:	blt	20f80 <__assert_fail@plt+0xf80c>
   20ac8:	add	r4, sl, #96	; 0x60
   20acc:	mov	r6, #0
   20ad0:	add	r5, sp, #80	; 0x50
   20ad4:	mov	r0, #0
   20ad8:	str	r0, [sp, #44]	; 0x2c
   20adc:	str	r8, [sp, #16]
   20ae0:	stm	sp, {r4, sl}
   20ae4:	ldr	r0, [r8, #12]
   20ae8:	ldr	r0, [r0, r6, lsl #2]
   20aec:	ldr	r1, [sl]
   20af0:	add	r3, r1, r0, lsl #3
   20af4:	ldr	r9, [r3, #4]!
   20af8:	uxtb	r2, r9
   20afc:	cmp	r2, #1
   20b00:	str	r2, [sp, #32]
   20b04:	bne	20be0 <__assert_fail@plt+0xf46c>
   20b08:	str	r3, [sp, #12]
   20b0c:	str	r0, [sp, #28]
   20b10:	str	r1, [sp, #24]
   20b14:	ldrb	r1, [r1, r0, lsl #3]
   20b18:	mov	r0, r7
   20b1c:	bl	1a7d4 <__assert_fail@plt+0x9060>
   20b20:	movw	r0, #65280	; 0xff00
   20b24:	movt	r0, #3
   20b28:	ands	r0, r9, r0
   20b2c:	beq	20d7c <__assert_fail@plt+0xf608>
   20b30:	tst	r9, #8192	; 0x2000
   20b34:	beq	20b68 <__assert_fail@plt+0xf3f4>
   20b38:	mov	r0, r7
   20b3c:	mov	r1, #10
   20b40:	bl	1e30c <__assert_fail@plt+0xcb98>
   20b44:	str	r0, [sp, #8]
   20b48:	mov	r0, r7
   20b4c:	bl	20fc4 <__assert_fail@plt+0xf850>
   20b50:	ldr	r0, [sp, #8]
   20b54:	cmp	r0, #0
   20b58:	beq	20f58 <__assert_fail@plt+0xf7e4>
   20b5c:	mov	r0, r7
   20b60:	mov	r1, #10
   20b64:	bl	1a7d4 <__assert_fail@plt+0x9060>
   20b68:	tst	r9, #32768	; 0x8000
   20b6c:	bne	20d3c <__assert_fail@plt+0xf5c8>
   20b70:	tst	r9, #1024	; 0x400
   20b74:	beq	20cd0 <__assert_fail@plt+0xf55c>
   20b78:	ldr	r0, [sp, #32]
   20b7c:	cmp	r0, #1
   20b80:	bne	20b94 <__assert_fail@plt+0xf420>
   20b84:	ldr	r0, [sp, #12]
   20b88:	ldrb	r0, [r0, #2]
   20b8c:	tst	r0, #64	; 0x40
   20b90:	beq	20d3c <__assert_fail@plt+0xf5c8>
   20b94:	mov	ip, r6
   20b98:	ldr	r0, [sl, #92]	; 0x5c
   20b9c:	cmp	r0, #1
   20ba0:	ble	20c9c <__assert_fail@plt+0xf528>
   20ba4:	ldr	r1, [sl, #60]	; 0x3c
   20ba8:	mov	r0, #0
   20bac:	mov	r2, #0
   20bb0:	ldr	r3, [r4, r2, lsl #2]
   20bb4:	ldr	r6, [r1, r2, lsl #2]
   20bb8:	mvn	r6, r6
   20bbc:	orr	r3, r3, r6
   20bc0:	ldr	r6, [r7, r2, lsl #2]
   20bc4:	and	r3, r6, r3
   20bc8:	str	r3, [r7, r2, lsl #2]
   20bcc:	orr	r0, r3, r0
   20bd0:	add	r2, r2, #1
   20bd4:	cmp	r2, #8
   20bd8:	bne	20bb0 <__assert_fail@plt+0xf43c>
   20bdc:	b	20cc4 <__assert_fail@plt+0xf550>
   20be0:	cmp	r2, #7
   20be4:	beq	20c14 <__assert_fail@plt+0xf4a0>
   20be8:	cmp	r2, #5
   20bec:	beq	20c38 <__assert_fail@plt+0xf4c4>
   20bf0:	cmp	r2, #3
   20bf4:	bne	20f58 <__assert_fail@plt+0xf7e4>
   20bf8:	str	r3, [sp, #12]
   20bfc:	str	r0, [sp, #28]
   20c00:	str	r1, [sp, #24]
   20c04:	ldr	r1, [r1, r0, lsl #3]
   20c08:	mov	r0, r7
   20c0c:	bl	20fd4 <__assert_fail@plt+0xf860>
   20c10:	b	20b20 <__assert_fail@plt+0xf3ac>
   20c14:	str	r3, [sp, #12]
   20c18:	str	r1, [sp, #24]
   20c1c:	str	r0, [sp, #28]
   20c20:	mvn	r0, #0
   20c24:	str	r0, [fp, #-52]	; 0xffffffcc
   20c28:	str	r0, [fp, #-56]	; 0xffffffc8
   20c2c:	str	r0, [fp, #-60]	; 0xffffffc4
   20c30:	str	r0, [fp, #-64]	; 0xffffffc0
   20c34:	b	20c68 <__assert_fail@plt+0xf4f4>
   20c38:	str	r3, [sp, #12]
   20c3c:	str	r1, [sp, #24]
   20c40:	str	r0, [sp, #28]
   20c44:	ldr	r0, [sl, #92]	; 0x5c
   20c48:	cmp	r0, #2
   20c4c:	blt	20c60 <__assert_fail@plt+0xf4ec>
   20c50:	ldr	r1, [sl, #60]	; 0x3c
   20c54:	mov	r0, r7
   20c58:	bl	20fd4 <__assert_fail@plt+0xf860>
   20c5c:	b	20c68 <__assert_fail@plt+0xf4f4>
   20c60:	mov	r0, r7
   20c64:	bl	20ff8 <__assert_fail@plt+0xf884>
   20c68:	ldrb	r0, [sl, #128]	; 0x80
   20c6c:	tst	r0, #64	; 0x40
   20c70:	bne	20c80 <__assert_fail@plt+0xf50c>
   20c74:	mov	r0, r7
   20c78:	mov	r1, #10
   20c7c:	bl	21020 <__assert_fail@plt+0xf8ac>
   20c80:	ldrb	r0, [sl, #128]	; 0x80
   20c84:	tst	r0, #128	; 0x80
   20c88:	beq	20b20 <__assert_fail@plt+0xf3ac>
   20c8c:	mov	r0, r7
   20c90:	mov	r1, #0
   20c94:	bl	21020 <__assert_fail@plt+0xf8ac>
   20c98:	b	20b20 <__assert_fail@plt+0xf3ac>
   20c9c:	mov	r0, #0
   20ca0:	mov	r1, #0
   20ca4:	ldr	r2, [r4, r1, lsl #2]
   20ca8:	ldr	r3, [r7, r1, lsl #2]
   20cac:	and	r2, r3, r2
   20cb0:	str	r2, [r7, r1, lsl #2]
   20cb4:	orr	r0, r2, r0
   20cb8:	add	r1, r1, #1
   20cbc:	cmp	r1, #8
   20cc0:	bne	20ca4 <__assert_fail@plt+0xf530>
   20cc4:	cmp	r0, #0
   20cc8:	mov	r6, ip
   20ccc:	beq	20f58 <__assert_fail@plt+0xf7e4>
   20cd0:	tst	r9, #2048	; 0x800
   20cd4:	beq	20d7c <__assert_fail@plt+0xf608>
   20cd8:	ldr	r0, [sp, #32]
   20cdc:	cmp	r0, #1
   20ce0:	bne	20cf4 <__assert_fail@plt+0xf580>
   20ce4:	ldr	r0, [sp, #12]
   20ce8:	ldrb	r0, [r0, #2]
   20cec:	tst	r0, #64	; 0x40
   20cf0:	bne	20d3c <__assert_fail@plt+0xf5c8>
   20cf4:	ldr	r0, [sl, #92]	; 0x5c
   20cf8:	mov	ip, r6
   20cfc:	cmp	r0, #1
   20d00:	ble	20d48 <__assert_fail@plt+0xf5d4>
   20d04:	ldr	r1, [sl, #60]	; 0x3c
   20d08:	mov	r0, #0
   20d0c:	mov	r2, #0
   20d10:	ldr	r3, [r4, r2, lsl #2]
   20d14:	ldr	r6, [r1, r2, lsl #2]
   20d18:	and	r3, r6, r3
   20d1c:	ldr	r6, [r7, r2, lsl #2]
   20d20:	bic	r3, r6, r3
   20d24:	str	r3, [r7, r2, lsl #2]
   20d28:	orr	r0, r3, r0
   20d2c:	add	r2, r2, #1
   20d30:	cmp	r2, #8
   20d34:	bne	20d10 <__assert_fail@plt+0xf59c>
   20d38:	b	20d70 <__assert_fail@plt+0xf5fc>
   20d3c:	mov	r0, r7
   20d40:	bl	20fc4 <__assert_fail@plt+0xf850>
   20d44:	b	20f58 <__assert_fail@plt+0xf7e4>
   20d48:	mov	r0, #0
   20d4c:	mov	r1, #0
   20d50:	ldr	r2, [r4, r1, lsl #2]
   20d54:	ldr	r3, [r7, r1, lsl #2]
   20d58:	bic	r2, r3, r2
   20d5c:	str	r2, [r7, r1, lsl #2]
   20d60:	orr	r0, r2, r0
   20d64:	add	r1, r1, #1
   20d68:	cmp	r1, #8
   20d6c:	bne	20d50 <__assert_fail@plt+0xf5dc>
   20d70:	cmp	r0, #0
   20d74:	mov	r6, ip
   20d78:	beq	20f58 <__assert_fail@plt+0xf7e4>
   20d7c:	str	r6, [sp, #20]
   20d80:	ldr	r9, [sp, #44]	; 0x2c
   20d84:	mov	r6, #0
   20d88:	cmp	r9, #1
   20d8c:	blt	20ee0 <__assert_fail@plt+0xf76c>
   20d90:	ldr	sl, [sp, #40]	; 0x28
   20d94:	ldr	r4, [sp, #32]
   20d98:	cmp	r4, #1
   20d9c:	bne	20dc0 <__assert_fail@plt+0xf64c>
   20da0:	ldr	r0, [sp, #28]
   20da4:	ldr	r1, [sp, #24]
   20da8:	ldrb	r1, [r1, r0, lsl #3]
   20dac:	ldr	r0, [sp, #40]	; 0x28
   20db0:	add	r0, r0, r6, lsl #5
   20db4:	bl	1e30c <__assert_fail@plt+0xcb98>
   20db8:	cmp	r0, #0
   20dbc:	beq	20ed0 <__assert_fail@plt+0xf75c>
   20dc0:	mov	r0, #0
   20dc4:	mov	r1, #0
   20dc8:	ldr	r2, [r7, r1, lsl #2]
   20dcc:	ldr	r3, [sl, r1, lsl #2]
   20dd0:	and	r2, r3, r2
   20dd4:	str	r2, [r5, r1, lsl #2]
   20dd8:	orr	r0, r2, r0
   20ddc:	add	r1, r1, #1
   20de0:	cmp	r1, #8
   20de4:	bne	20dc8 <__assert_fail@plt+0xf654>
   20de8:	cmp	r0, #0
   20dec:	beq	20ed0 <__assert_fail@plt+0xf75c>
   20df0:	mov	r8, r9
   20df4:	mov	r9, #0
   20df8:	mov	r0, #0
   20dfc:	mov	r1, #0
   20e00:	add	r5, sp, #48	; 0x30
   20e04:	ldr	r2, [r7, r1, lsl #2]
   20e08:	ldr	r3, [sl, r1, lsl #2]
   20e0c:	bic	r4, r3, r2
   20e10:	str	r4, [r5, r1, lsl #2]
   20e14:	bic	r2, r2, r3
   20e18:	str	r2, [r7, r1, lsl #2]
   20e1c:	orr	r9, r2, r9
   20e20:	orr	r0, r4, r0
   20e24:	add	r1, r1, #1
   20e28:	cmp	r1, #8
   20e2c:	bne	20e04 <__assert_fail@plt+0xf690>
   20e30:	cmp	r0, #0
   20e34:	beq	20e84 <__assert_fail@plt+0xf710>
   20e38:	ldr	r4, [sp, #40]	; 0x28
   20e3c:	add	r0, r4, r8, lsl #5
   20e40:	add	r1, sp, #48	; 0x30
   20e44:	bl	21044 <__assert_fail@plt+0xf8d0>
   20e48:	add	r0, r4, r6, lsl #5
   20e4c:	add	r5, sp, #80	; 0x50
   20e50:	mov	r1, r5
   20e54:	bl	21044 <__assert_fail@plt+0xf8d0>
   20e58:	add	r0, r8, r8, lsl #1
   20e5c:	ldr	r2, [sp, #36]	; 0x24
   20e60:	add	r0, r2, r0, lsl #2
   20e64:	add	r1, r6, r6, lsl #1
   20e68:	add	r1, r2, r1, lsl #2
   20e6c:	bl	1c9bc <__assert_fail@plt+0xb248>
   20e70:	cmp	r0, #0
   20e74:	bne	20f94 <__assert_fail@plt+0xf820>
   20e78:	add	r8, r8, #1
   20e7c:	str	r8, [sp, #44]	; 0x2c
   20e80:	b	20e8c <__assert_fail@plt+0xf718>
   20e84:	str	r8, [sp, #44]	; 0x2c
   20e88:	add	r5, sp, #80	; 0x50
   20e8c:	ldr	r8, [sp, #16]
   20e90:	ldr	r0, [r8, #12]
   20e94:	ldr	r1, [sp, #20]
   20e98:	ldr	r1, [r0, r1, lsl #2]
   20e9c:	add	r0, r6, r6, lsl #1
   20ea0:	ldr	r2, [sp, #36]	; 0x24
   20ea4:	add	r0, r2, r0, lsl #2
   20ea8:	bl	1c7d4 <__assert_fail@plt+0xb060>
   20eac:	cmp	r0, #0
   20eb0:	beq	20f98 <__assert_fail@plt+0xf824>
   20eb4:	cmp	r9, #0
   20eb8:	mov	r0, #0
   20ebc:	movweq	r0, #17
   20ec0:	cmp	r0, #0
   20ec4:	bne	20f38 <__assert_fail@plt+0xf7c4>
   20ec8:	ldr	r9, [sp, #44]	; 0x2c
   20ecc:	ldr	r4, [sp, #32]
   20ed0:	add	sl, sl, #32
   20ed4:	add	r6, r6, #1
   20ed8:	cmp	r6, r9
   20edc:	blt	20d98 <__assert_fail@plt+0xf624>
   20ee0:	cmp	r6, r9
   20ee4:	bne	20f4c <__assert_fail@plt+0xf7d8>
   20ee8:	ldr	r0, [sp, #40]	; 0x28
   20eec:	add	r0, r0, r9, lsl #5
   20ef0:	mov	r1, r7
   20ef4:	bl	21044 <__assert_fail@plt+0xf8d0>
   20ef8:	ldr	r0, [r8, #12]
   20efc:	ldr	r6, [sp, #20]
   20f00:	ldr	r1, [r0, r6, lsl #2]
   20f04:	add	r0, r9, r9, lsl #1
   20f08:	ldr	r2, [sp, #36]	; 0x24
   20f0c:	add	r0, r2, r0, lsl #2
   20f10:	bl	1c0a4 <__assert_fail@plt+0xa930>
   20f14:	cmp	r0, #0
   20f18:	ldr	sl, [sp, #4]
   20f1c:	bne	20f9c <__assert_fail@plt+0xf828>
   20f20:	mov	r0, r7
   20f24:	bl	20fc4 <__assert_fail@plt+0xf850>
   20f28:	add	r9, r9, #1
   20f2c:	str	r9, [sp, #44]	; 0x2c
   20f30:	ldr	r4, [sp]
   20f34:	b	20f58 <__assert_fail@plt+0xf7e4>
   20f38:	cmp	r0, #17
   20f3c:	bne	20f6c <__assert_fail@plt+0xf7f8>
   20f40:	ldr	r9, [sp, #44]	; 0x2c
   20f44:	cmp	r6, r9
   20f48:	beq	20ee8 <__assert_fail@plt+0xf774>
   20f4c:	str	r9, [sp, #44]	; 0x2c
   20f50:	ldm	sp, {r4, sl}
   20f54:	ldr	r6, [sp, #20]
   20f58:	ldr	r0, [r8, #8]
   20f5c:	add	r6, r6, #1
   20f60:	cmp	r6, r0
   20f64:	blt	20ae4 <__assert_fail@plt+0xf370>
   20f68:	b	20f88 <__assert_fail@plt+0xf814>
   20f6c:	cmp	r9, #0
   20f70:	ldm	sp, {r4, sl}
   20f74:	ldr	r6, [sp, #20]
   20f78:	bne	20f58 <__assert_fail@plt+0xf7e4>
   20f7c:	b	20f88 <__assert_fail@plt+0xf814>
   20f80:	mov	r0, #0
   20f84:	str	r0, [sp, #44]	; 0x2c
   20f88:	ldr	r0, [sp, #44]	; 0x2c
   20f8c:	sub	sp, fp, #28
   20f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20f94:	str	r8, [sp, #44]	; 0x2c
   20f98:	ldr	r9, [sp, #44]	; 0x2c
   20f9c:	cmp	r9, #1
   20fa0:	blt	20fbc <__assert_fail@plt+0xf848>
   20fa4:	ldr	r0, [sp, #36]	; 0x24
   20fa8:	add	r5, r0, #8
   20fac:	ldr	r0, [r5], #12
   20fb0:	bl	13f04 <__assert_fail@plt+0x2790>
   20fb4:	subs	r9, r9, #1
   20fb8:	bne	20fac <__assert_fail@plt+0xf838>
   20fbc:	mvn	r0, #0
   20fc0:	b	20f84 <__assert_fail@plt+0xf810>
   20fc4:	vmov.i32	q8, #0	; 0x00000000
   20fc8:	vst1.32	{d16-d17}, [r0]!
   20fcc:	vst1.32	{d16-d17}, [r0]
   20fd0:	bx	lr
   20fd4:	mov	r2, #0
   20fd8:	ldr	ip, [r1, r2, lsl #2]
   20fdc:	ldr	r3, [r0, r2, lsl #2]
   20fe0:	orr	r3, r3, ip
   20fe4:	str	r3, [r0, r2, lsl #2]
   20fe8:	add	r2, r2, #1
   20fec:	cmp	r2, #8
   20ff0:	bne	20fd8 <__assert_fail@plt+0xf864>
   20ff4:	bx	lr
   20ff8:	mvn	r1, #0
   20ffc:	str	r1, [r0]
   21000:	str	r1, [r0, #4]
   21004:	str	r1, [r0, #8]
   21008:	str	r1, [r0, #12]
   2100c:	str	r1, [r0, #16]
   21010:	str	r1, [r0, #20]
   21014:	str	r1, [r0, #24]
   21018:	str	r1, [r0, #28]
   2101c:	bx	lr
   21020:	asr	r2, r1, #31
   21024:	add	r2, r1, r2, lsr #27
   21028:	asr	r2, r2, #5
   2102c:	ldr	ip, [r0, r2, lsl #2]
   21030:	and	r1, r1, #31
   21034:	mov	r3, #1
   21038:	bic	r1, ip, r3, lsl r1
   2103c:	str	r1, [r0, r2, lsl #2]
   21040:	bx	lr
   21044:	vld1.32	{d16-d17}, [r1]!
   21048:	vld1.32	{d18-d19}, [r1]
   2104c:	vst1.32	{d16-d17}, [r0]!
   21050:	vst1.32	{d18-d19}, [r0]
   21054:	bx	lr
   21058:	ldr	r0, [r0]
   2105c:	add	r0, r0, r1, lsl #3
   21060:	ldr	r1, [r0, #4]
   21064:	uxtb	r3, r1
   21068:	mov	r0, #0
   2106c:	cmp	r3, #2
   21070:	bne	210c8 <__assert_fail@plt+0xf954>
   21074:	movw	r3, #65280	; 0xff00
   21078:	movt	r3, #3
   2107c:	tst	r1, r3
   21080:	moveq	r0, #1
   21084:	bxeq	lr
   21088:	ands	ip, r2, #1
   2108c:	bne	21098 <__assert_fail@plt+0xf924>
   21090:	ands	r3, r1, #1024	; 0x400
   21094:	bne	210c8 <__assert_fail@plt+0xf954>
   21098:	cmp	ip, #0
   2109c:	andsne	r3, r1, #2048	; 0x800
   210a0:	bne	210c8 <__assert_fail@plt+0xf954>
   210a4:	tst	r2, #2
   210a8:	bne	210b4 <__assert_fail@plt+0xf940>
   210ac:	ands	r3, r1, #8192	; 0x2000
   210b0:	bxne	lr
   210b4:	and	r0, r1, #32768	; 0x8000
   210b8:	mov	r1, #1
   210bc:	eor	r0, r1, r0, lsr #15
   210c0:	and	r1, r2, #8
   210c4:	orr	r0, r0, r1, lsr #3
   210c8:	bx	lr
   210cc:	stm	r0, {r1, r2, r3}
   210d0:	mov	r1, #0
   210d4:	str	r1, [r0, #24]
   210d8:	str	r1, [r0, #20]
   210dc:	str	r1, [r0, #16]
   210e0:	ldr	r1, [sp]
   210e4:	str	r1, [r0, #12]
   210e8:	bx	lr
   210ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   210f0:	add	fp, sp, #28
   210f4:	sub	sp, sp, #12
   210f8:	mov	sl, r1
   210fc:	mov	r6, r0
   21100:	ldr	r1, [r1, #8]
   21104:	ldr	r5, [sl, #12]
   21108:	mov	r0, sp
   2110c:	bl	1c0a4 <__assert_fail@plt+0xa930>
   21110:	cmp	r0, #0
   21114:	bne	211f0 <__assert_fail@plt+0xfa7c>
   21118:	mov	r3, sp
   2111c:	mov	r0, r6
   21120:	mov	r1, sl
   21124:	mov	r2, r5
   21128:	bl	212a4 <__assert_fail@plt+0xfb30>
   2112c:	cmp	r0, #0
   21130:	bne	211bc <__assert_fail@plt+0xfa48>
   21134:	mov	r9, #0
   21138:	mov	r8, sp
   2113c:	mov	r1, #0
   21140:	cmp	r5, #1
   21144:	blt	211c4 <__assert_fail@plt+0xfa50>
   21148:	ldr	r0, [sl]
   2114c:	ldr	r2, [r0, r5, lsl #2]
   21150:	cmp	r2, #0
   21154:	mov	r4, #0
   21158:	addeq	r4, r1, #1
   2115c:	ldr	r1, [r6, #120]	; 0x78
   21160:	cmp	r4, r1
   21164:	bgt	211cc <__assert_fail@plt+0xfa58>
   21168:	str	r9, [sp, #4]
   2116c:	ldr	r0, [r6, #100]	; 0x64
   21170:	sub	r5, r5, #1
   21174:	ldr	r0, [r0, r5, lsl #2]
   21178:	cmp	r0, #0
   2117c:	beq	2119c <__assert_fail@plt+0xfa28>
   21180:	mov	r0, r6
   21184:	mov	r1, sl
   21188:	mov	r2, r5
   2118c:	mov	r3, r8
   21190:	bl	213cc <__assert_fail@plt+0xfc58>
   21194:	cmp	r0, #0
   21198:	bne	211bc <__assert_fail@plt+0xfa48>
   2119c:	mov	r0, r6
   211a0:	mov	r1, sl
   211a4:	mov	r2, r5
   211a8:	mov	r3, r8
   211ac:	bl	212a4 <__assert_fail@plt+0xfb30>
   211b0:	cmp	r0, #0
   211b4:	mov	r1, r4
   211b8:	beq	21140 <__assert_fail@plt+0xf9cc>
   211bc:	mov	r7, r0
   211c0:	b	211dc <__assert_fail@plt+0xfa68>
   211c4:	mov	r7, #0
   211c8:	b	211dc <__assert_fail@plt+0xfa68>
   211cc:	lsl	r2, r5, #2
   211d0:	mov	r7, #0
   211d4:	mov	r1, #0
   211d8:	bl	1166c <memset@plt>
   211dc:	ldr	r0, [sp, #8]
   211e0:	bl	13f04 <__assert_fail@plt+0x2790>
   211e4:	mov	r0, r7
   211e8:	sub	sp, fp, #28
   211ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   211f0:	mov	r7, r0
   211f4:	b	211e4 <__assert_fail@plt+0xfa70>
   211f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   211fc:	add	fp, sp, #28
   21200:	sub	sp, sp, #20
   21204:	cmp	r3, #1
   21208:	blt	21298 <__assert_fail@plt+0xfb24>
   2120c:	mov	r4, r3
   21210:	mov	r5, r2
   21214:	mov	r6, r1
   21218:	mov	sl, r0
   2121c:	mov	r7, #0
   21220:	add	r8, sp, #4
   21224:	add	r9, sp, #16
   21228:	ldr	r0, [r5, r7, lsl #2]
   2122c:	ldr	r1, [r6, r7, lsl #2]
   21230:	cmp	r1, #0
   21234:	beq	21288 <__assert_fail@plt+0xfb14>
   21238:	cmp	r0, #0
   2123c:	beq	2128c <__assert_fail@plt+0xfb18>
   21240:	add	r1, r1, #4
   21244:	add	r2, r0, #4
   21248:	mov	r0, r8
   2124c:	bl	1ee38 <__assert_fail@plt+0xd6c4>
   21250:	str	r0, [sp, #16]
   21254:	cmp	r0, #0
   21258:	bne	2129c <__assert_fail@plt+0xfb28>
   2125c:	mov	r0, r9
   21260:	mov	r1, sl
   21264:	mov	r2, r8
   21268:	bl	1fe14 <__assert_fail@plt+0xe6a0>
   2126c:	str	r0, [r6, r7, lsl #2]
   21270:	ldr	r0, [sp, #12]
   21274:	bl	13f04 <__assert_fail@plt+0x2790>
   21278:	ldr	r0, [sp, #16]
   2127c:	cmp	r0, #0
   21280:	beq	2128c <__assert_fail@plt+0xfb18>
   21284:	b	2129c <__assert_fail@plt+0xfb28>
   21288:	str	r0, [r6, r7, lsl #2]
   2128c:	add	r7, r7, #1
   21290:	cmp	r7, r4
   21294:	blt	21228 <__assert_fail@plt+0xfab4>
   21298:	mov	r0, #0
   2129c:	sub	sp, fp, #28
   212a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   212a8:	add	fp, sp, #28
   212ac:	sub	sp, sp, #12
   212b0:	mov	sl, r2
   212b4:	mov	r8, r1
   212b8:	mov	r6, r0
   212bc:	ldr	r9, [r0, #84]	; 0x54
   212c0:	mov	r0, #0
   212c4:	str	r0, [sp, #8]
   212c8:	ldr	r1, [r6, #100]	; 0x64
   212cc:	ldr	r7, [r1, r2, lsl #2]
   212d0:	cmp	r7, #0
   212d4:	mov	r4, r7
   212d8:	addne	r4, r4, #4
   212dc:	ldr	r1, [r3, #4]
   212e0:	cmp	r1, #0
   212e4:	beq	21374 <__assert_fail@plt+0xfc00>
   212e8:	mov	r5, r3
   212ec:	cmp	r7, #0
   212f0:	beq	21344 <__assert_fail@plt+0xfbd0>
   212f4:	mov	r0, r9
   212f8:	mov	r1, r5
   212fc:	mov	r2, r4
   21300:	bl	21510 <__assert_fail@plt+0xfd9c>
   21304:	str	r0, [sp, #8]
   21308:	cmp	r0, #0
   2130c:	bne	2139c <__assert_fail@plt+0xfc28>
   21310:	ldr	r0, [r8, #20]
   21314:	cmp	r0, #0
   21318:	beq	21344 <__assert_fail@plt+0xfbd0>
   2131c:	ldr	r0, [r6, #116]	; 0x74
   21320:	stm	sp, {r0, sl}
   21324:	add	r3, r8, #16
   21328:	mov	r0, r9
   2132c:	mov	r1, r5
   21330:	mov	r2, r4
   21334:	bl	215e8 <__assert_fail@plt+0xfe74>
   21338:	str	r0, [sp, #8]
   2133c:	cmp	r0, #0
   21340:	bne	2139c <__assert_fail@plt+0xfc28>
   21344:	add	r0, sp, #8
   21348:	mov	r1, r9
   2134c:	mov	r2, r5
   21350:	bl	1fe14 <__assert_fail@plt+0xe6a0>
   21354:	ldr	r1, [r8]
   21358:	str	r0, [r1, sl, lsl #2]
   2135c:	ldr	r0, [sp, #8]
   21360:	cmp	r0, #0
   21364:	bne	2139c <__assert_fail@plt+0xfc28>
   21368:	cmp	r7, #0
   2136c:	bne	21384 <__assert_fail@plt+0xfc10>
   21370:	b	21398 <__assert_fail@plt+0xfc24>
   21374:	ldr	r1, [r8]
   21378:	str	r0, [r1, sl, lsl #2]
   2137c:	cmp	r7, #0
   21380:	beq	21398 <__assert_fail@plt+0xfc24>
   21384:	ldr	r0, [r6, #100]	; 0x64
   21388:	ldr	r0, [r0, sl, lsl #2]
   2138c:	ldrb	r0, [r0, #52]	; 0x34
   21390:	tst	r0, #64	; 0x40
   21394:	bne	213a4 <__assert_fail@plt+0xfc30>
   21398:	mov	r0, #0
   2139c:	sub	sp, fp, #28
   213a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   213a4:	mov	r0, r6
   213a8:	mov	r1, r8
   213ac:	mov	r2, sl
   213b0:	mov	r3, r4
   213b4:	bl	2182c <__assert_fail@plt+0x100b8>
   213b8:	str	r0, [sp, #8]
   213bc:	cmp	r0, #0
   213c0:	moveq	r0, #0
   213c4:	sub	sp, fp, #28
   213c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   213cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   213d0:	add	fp, sp, #28
   213d4:	sub	sp, sp, #20
   213d8:	str	r3, [sp, #12]
   213dc:	mov	sl, r0
   213e0:	ldr	r0, [r0, #100]	; 0x64
   213e4:	ldr	r7, [r0, r2, lsl #2]
   213e8:	ldr	r0, [r7, #20]
   213ec:	cmp	r0, #1
   213f0:	blt	214f8 <__assert_fail@plt+0xfd84>
   213f4:	mov	r5, r2
   213f8:	mov	r6, r1
   213fc:	ldr	r8, [sl, #84]	; 0x54
   21400:	add	r0, r1, #16
   21404:	str	r0, [sp, #8]
   21408:	add	r0, r2, #1
   2140c:	str	r0, [sp, #16]
   21410:	mov	r9, #0
   21414:	ldr	r0, [r7, #24]
   21418:	ldr	r4, [r0, r9, lsl #2]
   2141c:	ldr	r0, [r8]
   21420:	add	r0, r0, r4, lsl #3
   21424:	ldrb	r0, [r0, #6]
   21428:	tst	r0, #16
   2142c:	beq	21454 <__assert_fail@plt+0xfce0>
   21430:	ldr	r0, [r6, #12]
   21434:	str	r0, [sp]
   21438:	mov	r0, sl
   2143c:	mov	r1, r6
   21440:	mov	r2, r4
   21444:	mov	r3, r5
   21448:	bl	22214 <__assert_fail@plt+0x10aa0>
   2144c:	cmp	r0, #0
   21450:	bne	214a4 <__assert_fail@plt+0xfd30>
   21454:	ldr	r0, [r8]
   21458:	add	r1, r0, r4, lsl #3
   2145c:	mov	r0, sl
   21460:	mov	r2, r5
   21464:	bl	202ec <__assert_fail@plt+0xeb78>
   21468:	cmp	r0, #0
   2146c:	beq	214e8 <__assert_fail@plt+0xfd74>
   21470:	ldr	r0, [r6]
   21474:	ldr	r1, [sp, #16]
   21478:	ldr	r0, [r0, r1, lsl #2]
   2147c:	cmp	r0, #0
   21480:	beq	214e8 <__assert_fail@plt+0xfd74>
   21484:	ldr	r1, [r8, #12]
   21488:	ldr	r1, [r1, r4, lsl #2]
   2148c:	add	r0, r0, #4
   21490:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   21494:	mov	r1, r0
   21498:	mov	r0, #1
   2149c:	cmp	r1, #0
   214a0:	beq	214e8 <__assert_fail@plt+0xfd74>
   214a4:	ldr	r1, [r6, #20]
   214a8:	cmp	r1, #0
   214ac:	beq	214d4 <__assert_fail@plt+0xfd60>
   214b0:	ldr	r1, [r8, #12]
   214b4:	ldr	r2, [r1, r4, lsl #2]
   214b8:	stm	sp, {r4, r5}
   214bc:	add	r3, r0, r5
   214c0:	mov	r0, sl
   214c4:	ldr	r1, [sp, #8]
   214c8:	bl	21eac <__assert_fail@plt+0x10738>
   214cc:	cmp	r0, #0
   214d0:	bne	214e8 <__assert_fail@plt+0xfd74>
   214d4:	ldr	r0, [sp, #12]
   214d8:	mov	r1, r4
   214dc:	bl	1c7d4 <__assert_fail@plt+0xb060>
   214e0:	cmp	r0, #0
   214e4:	beq	21504 <__assert_fail@plt+0xfd90>
   214e8:	add	r9, r9, #1
   214ec:	ldr	r0, [r7, #20]
   214f0:	cmp	r9, r0
   214f4:	blt	21414 <__assert_fail@plt+0xfca0>
   214f8:	mov	r0, #0
   214fc:	sub	sp, fp, #28
   21500:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21504:	mov	r0, #12
   21508:	sub	sp, fp, #28
   2150c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21510:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21514:	add	fp, sp, #24
   21518:	sub	sp, sp, #8
   2151c:	mov	r8, r2
   21520:	mov	r5, r1
   21524:	mov	r6, r0
   21528:	mov	r0, #0
   2152c:	str	r0, [sp, #4]
   21530:	add	r0, sp, #4
   21534:	mov	r1, r6
   21538:	mov	r2, r5
   2153c:	bl	1fe14 <__assert_fail@plt+0xe6a0>
   21540:	ldr	r9, [sp, #4]
   21544:	cmp	r9, #0
   21548:	bne	215d4 <__assert_fail@plt+0xfe60>
   2154c:	mov	r7, r0
   21550:	ldr	r0, [r7, #28]!
   21554:	cmp	r0, #0
   21558:	bne	215c0 <__assert_fail@plt+0xfe4c>
   2155c:	ldr	r1, [r5, #4]
   21560:	mov	r0, r7
   21564:	bl	1c2fc <__assert_fail@plt+0xab88>
   21568:	str	r0, [sp, #4]
   2156c:	mov	r9, #12
   21570:	cmp	r0, #0
   21574:	bne	215d4 <__assert_fail@plt+0xfe60>
   21578:	ldr	r0, [r5, #4]
   2157c:	cmp	r0, #1
   21580:	blt	215c0 <__assert_fail@plt+0xfe4c>
   21584:	mov	r4, #0
   21588:	ldr	r0, [r5, #8]
   2158c:	ldr	r0, [r0, r4, lsl #2]
   21590:	add	r0, r0, r0, lsl #1
   21594:	ldr	r1, [r6, #28]
   21598:	add	r1, r1, r0, lsl #2
   2159c:	mov	r0, r7
   215a0:	bl	1c5b8 <__assert_fail@plt+0xae44>
   215a4:	cmp	r0, #0
   215a8:	bne	215e0 <__assert_fail@plt+0xfe6c>
   215ac:	add	r4, r4, #1
   215b0:	ldr	r1, [r5, #4]
   215b4:	cmp	r4, r1
   215b8:	blt	21588 <__assert_fail@plt+0xfe14>
   215bc:	str	r0, [sp, #4]
   215c0:	mov	r0, r5
   215c4:	mov	r1, r8
   215c8:	mov	r2, r7
   215cc:	bl	21b18 <__assert_fail@plt+0x103a4>
   215d0:	mov	r9, r0
   215d4:	mov	r0, r9
   215d8:	sub	sp, fp, #24
   215dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   215e0:	str	r0, [sp, #4]
   215e4:	b	215d4 <__assert_fail@plt+0xfe60>
   215e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   215ec:	add	fp, sp, #28
   215f0:	sub	sp, sp, #12
   215f4:	str	r2, [sp, #4]
   215f8:	mov	r6, r0
   215fc:	ldr	r0, [r3, #4]
   21600:	cmp	r0, #1
   21604:	blt	21820 <__assert_fail@plt+0x100ac>
   21608:	mov	r4, r3
   2160c:	mov	r9, r1
   21610:	mov	r8, #0
   21614:	str	r6, [sp]
   21618:	str	r3, [sp, #8]
   2161c:	ldr	r0, [r4, #8]
   21620:	ldr	r0, [r0, r8, lsl #2]
   21624:	add	r0, r0, r0, lsl #1
   21628:	ldr	r1, [fp, #8]
   2162c:	add	r1, r1, r0, lsl #3
   21630:	ldr	r2, [r1, #8]
   21634:	ldr	r3, [fp, #12]
   21638:	cmp	r2, r3
   2163c:	bge	21810 <__assert_fail@plt+0x1009c>
   21640:	ldr	r1, [r1, #4]
   21644:	ldr	r2, [fp, #12]
   21648:	cmp	r1, r2
   2164c:	blt	21810 <__assert_fail@plt+0x1009c>
   21650:	ldr	r1, [fp, #8]
   21654:	ldr	r2, [r1, r0, lsl #3]!
   21658:	ldr	r0, [r6]
   2165c:	ldr	sl, [r0, r2, lsl #3]
   21660:	ldr	r1, [r1, #12]
   21664:	ldr	r2, [fp, #12]
   21668:	cmp	r1, r2
   2166c:	bne	217a0 <__assert_fail@plt+0x1002c>
   21670:	ldr	r1, [r9, #4]
   21674:	cmp	r1, #1
   21678:	blt	21810 <__assert_fail@plt+0x1009c>
   2167c:	ldmib	r9, {r2, r3}
   21680:	mvn	ip, #0
   21684:	mov	r7, #0
   21688:	mvn	r1, #0
   2168c:	ldr	r5, [r3, r7, lsl #2]
   21690:	add	r4, r0, r5, lsl #3
   21694:	ldrb	r4, [r4, #4]
   21698:	cmp	r4, #9
   2169c:	beq	216b8 <__assert_fail@plt+0xff44>
   216a0:	cmp	r4, #8
   216a4:	bne	216c4 <__assert_fail@plt+0xff50>
   216a8:	ldr	r4, [r0, r5, lsl #3]
   216ac:	cmp	sl, r4
   216b0:	moveq	r1, r5
   216b4:	b	216c4 <__assert_fail@plt+0xff50>
   216b8:	ldr	r4, [r0, r5, lsl #3]
   216bc:	cmp	sl, r4
   216c0:	moveq	ip, r5
   216c4:	add	r7, r7, #1
   216c8:	cmp	r7, r2
   216cc:	blt	2168c <__assert_fail@plt+0xff18>
   216d0:	cmp	r1, #0
   216d4:	blt	216fc <__assert_fail@plt+0xff88>
   216d8:	mov	r0, r6
   216dc:	mov	r2, r9
   216e0:	ldr	r3, [sp, #4]
   216e4:	mov	r4, ip
   216e8:	bl	21d04 <__assert_fail@plt+0x10590>
   216ec:	mov	ip, r4
   216f0:	ldr	r6, [sp]
   216f4:	cmp	r0, #0
   216f8:	bne	21824 <__assert_fail@plt+0x100b0>
   216fc:	cmp	ip, #0
   21700:	ldr	r4, [sp, #8]
   21704:	ldrge	r0, [r9, #4]
   21708:	cmpge	r0, #1
   2170c:	blt	21810 <__assert_fail@plt+0x1009c>
   21710:	mov	sl, #0
   21714:	ldr	r0, [r9, #8]
   21718:	ldr	r4, [r0, sl, lsl #2]
   2171c:	add	r5, r4, r4, lsl #1
   21720:	ldr	r0, [r6, #28]
   21724:	add	r0, r0, r5, lsl #2
   21728:	mov	r1, ip
   2172c:	mov	r7, ip
   21730:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   21734:	cmp	r0, #0
   21738:	beq	21744 <__assert_fail@plt+0xffd0>
   2173c:	mov	ip, r7
   21740:	b	21788 <__assert_fail@plt+0x10014>
   21744:	ldr	r0, [r6, #24]
   21748:	add	r0, r0, r5, lsl #2
   2174c:	mov	r5, r7
   21750:	mov	r1, r7
   21754:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   21758:	cmp	r0, #0
   2175c:	bne	21784 <__assert_fail@plt+0x10010>
   21760:	mov	r0, r6
   21764:	mov	r1, r4
   21768:	mov	r2, r9
   2176c:	ldr	r3, [sp, #4]
   21770:	bl	21d04 <__assert_fail@plt+0x10590>
   21774:	cmp	r0, #0
   21778:	bne	21824 <__assert_fail@plt+0x100b0>
   2177c:	sub	sl, sl, #1
   21780:	ldr	r6, [sp]
   21784:	mov	ip, r5
   21788:	ldr	r0, [r9, #4]
   2178c:	add	sl, sl, #1
   21790:	cmp	sl, r0
   21794:	ldr	r4, [sp, #8]
   21798:	blt	21714 <__assert_fail@plt+0xffa0>
   2179c:	b	21810 <__assert_fail@plt+0x1009c>
   217a0:	ldr	r0, [r9, #4]
   217a4:	cmp	r0, #1
   217a8:	blt	21810 <__assert_fail@plt+0x1009c>
   217ac:	mov	r5, #0
   217b0:	ldr	r0, [r9, #8]
   217b4:	ldr	r1, [r0, r5, lsl #2]
   217b8:	ldr	r0, [r6]
   217bc:	add	r2, r0, r1, lsl #3
   217c0:	ldr	r2, [r2, #4]
   217c4:	and	r2, r2, #254	; 0xfe
   217c8:	orr	r2, r2, #1
   217cc:	cmp	r2, #9
   217d0:	ldreq	r0, [r0, r1, lsl #3]
   217d4:	cmpeq	sl, r0
   217d8:	beq	217f0 <__assert_fail@plt+0x1007c>
   217dc:	ldr	r0, [r9, #4]
   217e0:	add	r5, r5, #1
   217e4:	cmp	r5, r0
   217e8:	blt	217b0 <__assert_fail@plt+0x1003c>
   217ec:	b	21810 <__assert_fail@plt+0x1009c>
   217f0:	mov	r0, r6
   217f4:	mov	r2, r9
   217f8:	ldr	r3, [sp, #4]
   217fc:	bl	21d04 <__assert_fail@plt+0x10590>
   21800:	ldr	r6, [sp]
   21804:	cmp	r0, #0
   21808:	beq	217dc <__assert_fail@plt+0x10068>
   2180c:	b	21824 <__assert_fail@plt+0x100b0>
   21810:	add	r8, r8, #1
   21814:	ldr	r0, [r4, #4]
   21818:	cmp	r8, r0
   2181c:	blt	2161c <__assert_fail@plt+0xfea8>
   21820:	mov	r0, #0
   21824:	sub	sp, fp, #28
   21828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2182c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21830:	add	fp, sp, #28
   21834:	sub	sp, sp, #84	; 0x54
   21838:	mov	r4, r3
   2183c:	mov	r7, r2
   21840:	str	r1, [sp, #52]	; 0x34
   21844:	ldr	r1, [r0, #84]	; 0x54
   21848:	str	r1, [sp, #48]	; 0x30
   2184c:	str	r0, [sp, #44]	; 0x2c
   21850:	mov	r1, r2
   21854:	bl	1f068 <__assert_fail@plt+0xd8f4>
   21858:	str	r0, [sp, #20]
   2185c:	mov	sl, #0
   21860:	cmn	r0, #1
   21864:	beq	21afc <__assert_fail@plt+0x10388>
   21868:	str	sl, [sp, #56]	; 0x38
   2186c:	str	r4, [sp, #24]
   21870:	ldr	r0, [r4, #4]
   21874:	cmp	r0, #1
   21878:	blt	21afc <__assert_fail@plt+0x10388>
   2187c:	add	r0, r7, #1
   21880:	str	r0, [sp, #8]
   21884:	add	r0, sp, #56	; 0x38
   21888:	add	r0, r0, #16
   2188c:	str	r0, [sp, #28]
   21890:	ldr	r2, [sp, #52]	; 0x34
   21894:	add	r0, r2, #16
   21898:	str	r0, [sp, #32]
   2189c:	ldr	r0, [sp, #20]
   218a0:	add	r0, r0, r0, lsl #1
   218a4:	str	r0, [sp, #16]
   218a8:	lsl	r0, r0, #3
   218ac:	str	r0, [sp, #12]
   218b0:	mov	r1, #0
   218b4:	ldr	sl, [sp, #24]
   218b8:	ldr	r3, [sp, #48]	; 0x30
   218bc:	str	r7, [sp, #40]	; 0x28
   218c0:	ldr	r0, [sl, #8]
   218c4:	str	r1, [sp, #36]	; 0x24
   218c8:	ldr	r9, [r0, r1, lsl #2]
   218cc:	ldr	r0, [r3]
   218d0:	add	r0, r0, r9, lsl #3
   218d4:	ldrb	r0, [r0, #4]
   218d8:	ldr	r1, [r2, #8]
   218dc:	cmp	r9, r1
   218e0:	bne	218fc <__assert_fail@plt+0x10188>
   218e4:	cmp	r0, #4
   218e8:	bne	21ad0 <__assert_fail@plt+0x1035c>
   218ec:	ldr	r0, [r2, #12]
   218f0:	cmp	r0, r7
   218f4:	bne	21904 <__assert_fail@plt+0x10190>
   218f8:	b	21ad0 <__assert_fail@plt+0x1035c>
   218fc:	cmp	r0, #4
   21900:	bne	21ad0 <__assert_fail@plt+0x1035c>
   21904:	ldr	r0, [sp, #44]	; 0x2c
   21908:	ldr	r0, [r0, #116]	; 0x74
   2190c:	ldr	r1, [sp, #16]
   21910:	add	r5, r0, r1, lsl #3
   21914:	ldr	r4, [sp, #12]
   21918:	ldr	r8, [sp, #20]
   2191c:	b	21934 <__assert_fail@plt+0x101c0>
   21920:	mov	r0, r5
   21924:	ldr	r7, [sp, #40]	; 0x28
   21928:	ldr	r2, [sp, #52]	; 0x34
   2192c:	ldr	r3, [sp, #48]	; 0x30
   21930:	b	21ab8 <__assert_fail@plt+0x10344>
   21934:	ldr	r0, [r5]
   21938:	cmp	r0, r9
   2193c:	bne	21ab4 <__assert_fail@plt+0x10340>
   21940:	ldr	r0, [r5, #8]
   21944:	ldr	r1, [r5, #12]
   21948:	subs	r0, r1, r0
   2194c:	add	r6, r0, r7
   21950:	beq	21960 <__assert_fail@plt+0x101ec>
   21954:	ldr	r0, [r3, #12]
   21958:	add	r0, r0, r9, lsl #2
   2195c:	b	21970 <__assert_fail@plt+0x101fc>
   21960:	ldr	r0, [r3, #20]
   21964:	add	r1, r9, r9, lsl #1
   21968:	add	r0, r0, r1, lsl #2
   2196c:	ldr	r0, [r0, #8]
   21970:	ldr	r1, [r2, #12]
   21974:	cmp	r6, r1
   21978:	bgt	21ab4 <__assert_fail@plt+0x10340>
   2197c:	ldr	r1, [r2]
   21980:	ldr	r1, [r1, r6, lsl #2]
   21984:	cmp	r1, #0
   21988:	beq	21ab4 <__assert_fail@plt+0x10340>
   2198c:	ldr	r7, [r0]
   21990:	add	r0, r1, #4
   21994:	mov	r1, r7
   21998:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   2199c:	cmp	r0, #0
   219a0:	beq	21920 <__assert_fail@plt+0x101ac>
   219a4:	str	r7, [sp]
   219a8:	str	r6, [sp, #4]
   219ac:	ldr	r0, [sp, #44]	; 0x2c
   219b0:	ldr	r1, [sp, #32]
   219b4:	mov	r2, r9
   219b8:	ldr	r7, [sp, #40]	; 0x28
   219bc:	mov	r3, r7
   219c0:	bl	21eac <__assert_fail@plt+0x10738>
   219c4:	cmp	r0, #0
   219c8:	mov	r0, r5
   219cc:	ldr	r2, [sp, #52]	; 0x34
   219d0:	ldr	r3, [sp, #48]	; 0x30
   219d4:	bne	21ab8 <__assert_fail@plt+0x10344>
   219d8:	ldr	r0, [sp, #56]	; 0x38
   219dc:	cmp	r0, #0
   219e0:	bne	21a14 <__assert_fail@plt+0x102a0>
   219e4:	mov	r0, r2
   219e8:	mov	r1, #12
   219ec:	vld1.32	{d16-d17}, [r0], r1
   219f0:	vld1.32	{d18-d19}, [r0]
   219f4:	add	r0, sp, #56	; 0x38
   219f8:	vst1.64	{d16-d17}, [r0], r1
   219fc:	vst1.32	{d18-d19}, [r0]
   21a00:	ldr	r0, [sp, #28]
   21a04:	ldr	r1, [sp, #32]
   21a08:	bl	1c9bc <__assert_fail@plt+0xb248>
   21a0c:	cmp	r0, #0
   21a10:	bne	21b08 <__assert_fail@plt+0x10394>
   21a14:	str	r7, [sp, #68]	; 0x44
   21a18:	str	r9, [sp, #64]	; 0x40
   21a1c:	ldr	r0, [sp, #28]
   21a20:	mov	r1, r8
   21a24:	bl	1c7d4 <__assert_fail@plt+0xb060>
   21a28:	cmp	r0, #0
   21a2c:	beq	21b10 <__assert_fail@plt+0x1039c>
   21a30:	mov	r0, r7
   21a34:	ldr	r7, [sp, #56]	; 0x38
   21a38:	ldr	r5, [r7, r0, lsl #2]
   21a3c:	ldr	r0, [sp, #44]	; 0x2c
   21a40:	add	r1, sp, #56	; 0x38
   21a44:	bl	210ec <__assert_fail@plt+0xf978>
   21a48:	cmp	r0, #0
   21a4c:	bne	21b08 <__assert_fail@plt+0x10394>
   21a50:	ldr	r0, [sp, #52]	; 0x34
   21a54:	ldr	r1, [r0, #4]
   21a58:	cmp	r1, #0
   21a5c:	beq	21a78 <__assert_fail@plt+0x10304>
   21a60:	ldr	r0, [sp, #48]	; 0x30
   21a64:	mov	r2, r7
   21a68:	ldr	r3, [sp, #8]
   21a6c:	bl	211f8 <__assert_fail@plt+0xfa84>
   21a70:	cmp	r0, #0
   21a74:	bne	21b08 <__assert_fail@plt+0x10394>
   21a78:	ldr	r0, [sp, #40]	; 0x28
   21a7c:	str	r5, [r7, r0, lsl #2]
   21a80:	mov	r7, r0
   21a84:	ldr	r5, [sp, #28]
   21a88:	mov	r0, r5
   21a8c:	mov	r1, r8
   21a90:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   21a94:	sub	r1, r0, #1
   21a98:	mov	r0, r5
   21a9c:	bl	1ce30 <__assert_fail@plt+0xb6bc>
   21aa0:	ldr	r0, [sp, #44]	; 0x2c
   21aa4:	ldr	r0, [r0, #116]	; 0x74
   21aa8:	add	r0, r0, r4
   21aac:	ldr	sl, [sp, #24]
   21ab0:	b	21928 <__assert_fail@plt+0x101b4>
   21ab4:	mov	r0, r5
   21ab8:	add	r4, r4, #24
   21abc:	add	r5, r0, #24
   21ac0:	add	r8, r8, #1
   21ac4:	ldrb	r0, [r0, #20]
   21ac8:	cmp	r0, #0
   21acc:	bne	21934 <__assert_fail@plt+0x101c0>
   21ad0:	ldr	r1, [sp, #36]	; 0x24
   21ad4:	add	r1, r1, #1
   21ad8:	ldr	r0, [sl, #4]
   21adc:	cmp	r1, r0
   21ae0:	blt	218c0 <__assert_fail@plt+0x1014c>
   21ae4:	mov	sl, #0
   21ae8:	ldr	r0, [sp, #56]	; 0x38
   21aec:	cmp	r0, #0
   21af0:	beq	21afc <__assert_fail@plt+0x10388>
   21af4:	ldr	r0, [sp, #80]	; 0x50
   21af8:	bl	13f04 <__assert_fail@plt+0x2790>
   21afc:	mov	r0, sl
   21b00:	sub	sp, fp, #28
   21b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b08:	mov	sl, r0
   21b0c:	b	21ae8 <__assert_fail@plt+0x10374>
   21b10:	mov	sl, #12
   21b14:	b	21ae8 <__assert_fail@plt+0x10374>
   21b18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b1c:	add	fp, sp, #28
   21b20:	sub	sp, sp, #4
   21b24:	mov	r9, r2
   21b28:	mov	r8, r0
   21b2c:	ldr	r2, [r1, #4]
   21b30:	mov	r0, #0
   21b34:	cmp	r2, #0
   21b38:	beq	21cf0 <__assert_fail@plt+0x1057c>
   21b3c:	mov	sl, r1
   21b40:	ldr	r1, [r9, #4]
   21b44:	cmp	r1, #0
   21b48:	beq	21cf0 <__assert_fail@plt+0x1057c>
   21b4c:	add	r0, r1, r2
   21b50:	ldm	r8, {r1, r2}
   21b54:	add	r2, r2, r0
   21b58:	cmp	r2, r1
   21b5c:	ble	21b80 <__assert_fail@plt+0x1040c>
   21b60:	add	r4, r1, r0
   21b64:	lsl	r1, r4, #2
   21b68:	ldr	r0, [r8, #8]
   21b6c:	bl	23e94 <__assert_fail@plt+0x12720>
   21b70:	cmp	r0, #0
   21b74:	beq	21cf8 <__assert_fail@plt+0x10584>
   21b78:	str	r4, [r8]
   21b7c:	str	r0, [r8, #8]
   21b80:	ldr	r1, [r8, #4]
   21b84:	ldr	r6, [sl, #4]
   21b88:	ldr	r0, [sl, #8]
   21b8c:	add	r3, r6, r1
   21b90:	ldr	r5, [r9, #4]
   21b94:	ldr	r2, [r9, #8]
   21b98:	add	ip, r3, r5
   21b9c:	sub	r7, r1, #1
   21ba0:	sub	r3, r5, #1
   21ba4:	sub	r4, r6, #1
   21ba8:	ldr	r1, [r2, r3, lsl #2]
   21bac:	ldr	r6, [r0, r4, lsl #2]
   21bb0:	cmp	r6, r1
   21bb4:	beq	21bd0 <__assert_fail@plt+0x1045c>
   21bb8:	blt	21c00 <__assert_fail@plt+0x1048c>
   21bbc:	sub	r1, r4, #1
   21bc0:	cmp	r4, #0
   21bc4:	mov	r4, r1
   21bc8:	bgt	21ba8 <__assert_fail@plt+0x10434>
   21bcc:	b	21c50 <__assert_fail@plt+0x104dc>
   21bd0:	cmp	r7, #0
   21bd4:	blt	21c30 <__assert_fail@plt+0x104bc>
   21bd8:	ldr	r5, [r8, #8]
   21bdc:	mov	r1, r7
   21be0:	ldr	r7, [r5, r1, lsl #2]
   21be4:	cmp	r7, r6
   21be8:	ble	21c0c <__assert_fail@plt+0x10498>
   21bec:	sub	r7, r1, #1
   21bf0:	cmp	r1, #0
   21bf4:	mov	r1, r7
   21bf8:	bgt	21be0 <__assert_fail@plt+0x1046c>
   21bfc:	b	21c30 <__assert_fail@plt+0x104bc>
   21c00:	subs	r3, r3, #1
   21c04:	bge	21ba8 <__assert_fail@plt+0x10434>
   21c08:	b	21c50 <__assert_fail@plt+0x104dc>
   21c0c:	ldr	r7, [r8, #8]
   21c10:	ldr	r7, [r7, r1, lsl #2]
   21c14:	cmp	r7, r6
   21c18:	mov	r7, r1
   21c1c:	bne	21c30 <__assert_fail@plt+0x104bc>
   21c20:	mov	r7, r1
   21c24:	cmp	r4, #1
   21c28:	bge	21c44 <__assert_fail@plt+0x104d0>
   21c2c:	b	21c50 <__assert_fail@plt+0x104dc>
   21c30:	ldr	r1, [r8, #8]
   21c34:	sub	ip, ip, #1
   21c38:	str	r6, [r1, ip, lsl #2]
   21c3c:	cmp	r4, #1
   21c40:	blt	21c50 <__assert_fail@plt+0x104dc>
   21c44:	subs	r3, r3, #1
   21c48:	sub	r4, r4, #1
   21c4c:	bge	21ba8 <__assert_fail@plt+0x10434>
   21c50:	ldr	r1, [sl, #4]
   21c54:	ldr	r7, [r8, #4]
   21c58:	add	r0, r7, r1
   21c5c:	ldr	r3, [r9, #4]
   21c60:	add	r0, r0, r3
   21c64:	sub	r0, r0, #1
   21c68:	sub	r6, r0, ip
   21c6c:	add	r2, r6, #1
   21c70:	add	r5, r2, r7
   21c74:	str	r5, [r8, #4]
   21c78:	cmp	r7, #1
   21c7c:	cmpge	r6, #0
   21c80:	blt	21cdc <__assert_fail@plt+0x10568>
   21c84:	add	r3, r7, r3
   21c88:	add	r1, r3, r1
   21c8c:	sub	r3, r1, ip
   21c90:	ldr	r1, [r8, #8]
   21c94:	add	r3, r1, r3, lsl #2
   21c98:	sub	r7, r7, #1
   21c9c:	ldr	r6, [r1, r7, lsl #2]
   21ca0:	ldr	r5, [r1, r0, lsl #2]
   21ca4:	cmp	r5, r6
   21ca8:	bgt	21cc4 <__assert_fail@plt+0x10550>
   21cac:	str	r6, [r3, r7, lsl #2]
   21cb0:	sub	r6, r7, #1
   21cb4:	cmp	r7, #0
   21cb8:	mov	r7, r6
   21cbc:	bgt	21c9c <__assert_fail@plt+0x10528>
   21cc0:	b	21cdc <__assert_fail@plt+0x10568>
   21cc4:	str	r5, [r3, r7, lsl #2]
   21cc8:	sub	r3, r3, #4
   21ccc:	subs	r2, r2, #1
   21cd0:	sub	r0, r0, #1
   21cd4:	bne	21c9c <__assert_fail@plt+0x10528>
   21cd8:	mov	r2, #0
   21cdc:	ldr	r0, [r8, #8]
   21ce0:	add	r1, r0, ip, lsl #2
   21ce4:	lsl	r2, r2, #2
   21ce8:	bl	1148c <memcpy@plt>
   21cec:	mov	r0, #0
   21cf0:	sub	sp, fp, #28
   21cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21cf8:	mov	r0, #12
   21cfc:	sub	sp, fp, #28
   21d00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d08:	add	fp, sp, #28
   21d0c:	sub	sp, sp, #28
   21d10:	str	r3, [sp]
   21d14:	mov	r7, r1
   21d18:	str	r0, [sp, #12]
   21d1c:	ldr	r0, [r0, #28]
   21d20:	mov	r8, #0
   21d24:	str	r8, [sp, #20]
   21d28:	str	r8, [sp, #16]
   21d2c:	str	r8, [sp, #24]
   21d30:	add	r1, r1, r1, lsl #1
   21d34:	add	r1, r0, r1, lsl #2
   21d38:	mov	r4, r1
   21d3c:	ldr	r0, [r4, #4]!
   21d40:	cmp	r0, #1
   21d44:	blt	21e90 <__assert_fail@plt+0x1071c>
   21d48:	str	r2, [sp, #4]
   21d4c:	str	r1, [sp, #8]
   21d50:	add	r9, r1, #8
   21d54:	mov	r6, #0
   21d58:	ldr	r0, [r9]
   21d5c:	ldr	r0, [r0, r6, lsl #2]
   21d60:	cmp	r0, r7
   21d64:	beq	21e24 <__assert_fail@plt+0x106b0>
   21d68:	ldr	r1, [sp, #12]
   21d6c:	ldr	r1, [r1]
   21d70:	add	r1, r1, r0, lsl #3
   21d74:	ldrb	r1, [r1, #4]
   21d78:	tst	r1, #8
   21d7c:	beq	21e24 <__assert_fail@plt+0x106b0>
   21d80:	ldr	r1, [sp, #12]
   21d84:	ldr	r1, [r1, #20]
   21d88:	add	r5, r0, r0, lsl #1
   21d8c:	add	r0, r1, r5, lsl #2
   21d90:	ldr	r1, [r0, #4]
   21d94:	ldr	r0, [r0, #8]
   21d98:	ldr	r8, [r0]
   21d9c:	mvn	sl, #0
   21da0:	cmp	r1, #2
   21da4:	ldrge	sl, [r0, #4]
   21da8:	ldr	r0, [sp, #8]
   21dac:	mov	r1, r8
   21db0:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   21db4:	cmp	r0, #0
   21db8:	beq	21df0 <__assert_fail@plt+0x1067c>
   21dbc:	cmp	sl, #1
   21dc0:	blt	21e24 <__assert_fail@plt+0x106b0>
   21dc4:	ldr	r0, [sp, #8]
   21dc8:	mov	r1, sl
   21dcc:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   21dd0:	cmp	r0, #0
   21dd4:	bne	21e24 <__assert_fail@plt+0x106b0>
   21dd8:	ldr	r0, [sp, #4]
   21ddc:	mov	r1, sl
   21de0:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   21de4:	cmp	r0, #0
   21de8:	bne	21e04 <__assert_fail@plt+0x10690>
   21dec:	b	21e24 <__assert_fail@plt+0x106b0>
   21df0:	ldr	r0, [sp, #4]
   21df4:	mov	r1, r8
   21df8:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   21dfc:	cmp	r0, #0
   21e00:	beq	21dbc <__assert_fail@plt+0x10648>
   21e04:	ldr	r0, [sp, #12]
   21e08:	ldr	r0, [r0, #28]
   21e0c:	add	r2, r0, r5, lsl #2
   21e10:	add	r0, sp, #16
   21e14:	ldr	r1, [sp]
   21e18:	bl	21b18 <__assert_fail@plt+0x103a4>
   21e1c:	cmp	r0, #0
   21e20:	bne	21ea4 <__assert_fail@plt+0x10730>
   21e24:	add	r6, r6, #1
   21e28:	ldr	r0, [r4]
   21e2c:	cmp	r6, r0
   21e30:	blt	21d58 <__assert_fail@plt+0x105e4>
   21e34:	cmp	r0, #1
   21e38:	mov	r8, #0
   21e3c:	ldr	r5, [sp, #4]
   21e40:	blt	21e90 <__assert_fail@plt+0x1071c>
   21e44:	mov	r7, #0
   21e48:	add	sl, sp, #16
   21e4c:	ldr	r0, [r9]
   21e50:	ldr	r6, [r0, r7, lsl #2]
   21e54:	mov	r0, sl
   21e58:	mov	r1, r6
   21e5c:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   21e60:	cmp	r0, #0
   21e64:	bne	21e80 <__assert_fail@plt+0x1070c>
   21e68:	mov	r0, r5
   21e6c:	mov	r1, r6
   21e70:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   21e74:	sub	r1, r0, #1
   21e78:	mov	r0, r5
   21e7c:	bl	1ce30 <__assert_fail@plt+0xb6bc>
   21e80:	ldr	r0, [r4]
   21e84:	add	r7, r7, #1
   21e88:	cmp	r7, r0
   21e8c:	blt	21e4c <__assert_fail@plt+0x106d8>
   21e90:	ldr	r0, [sp, #24]
   21e94:	bl	13f04 <__assert_fail@plt+0x2790>
   21e98:	mov	r0, r8
   21e9c:	sub	sp, fp, #28
   21ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ea4:	mov	r8, r0
   21ea8:	b	21e90 <__assert_fail@plt+0x1071c>
   21eac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21eb0:	add	fp, sp, #28
   21eb4:	sub	sp, sp, #20
   21eb8:	str	r2, [sp, #12]
   21ebc:	mov	r6, r1
   21ec0:	mov	r7, r0
   21ec4:	str	r3, [sp, #16]
   21ec8:	mov	r1, r3
   21ecc:	bl	1f068 <__assert_fail@plt+0xd8f4>
   21ed0:	str	r0, [sp, #8]
   21ed4:	ldr	r1, [fp, #12]
   21ed8:	mov	r0, r7
   21edc:	bl	1f068 <__assert_fail@plt+0xd8f4>
   21ee0:	mov	r4, r0
   21ee4:	ldr	r0, [r6, #4]
   21ee8:	cmp	r0, #1
   21eec:	blt	21f70 <__assert_fail@plt+0x107fc>
   21ef0:	ldr	sl, [r7, #84]	; 0x54
   21ef4:	mov	r5, #0
   21ef8:	ldr	r0, [r6, #8]
   21efc:	ldr	r1, [r0, r5, lsl #2]
   21f00:	add	r0, r1, r1, lsl #1
   21f04:	ldr	r2, [r7, #116]	; 0x74
   21f08:	ldr	r0, [r2, r0, lsl #3]
   21f0c:	ldr	r2, [sl]
   21f10:	ldr	r9, [r2, r0, lsl #3]
   21f14:	ldr	r0, [sp, #16]
   21f18:	str	r0, [sp]
   21f1c:	ldr	r0, [sp, #8]
   21f20:	str	r0, [sp, #4]
   21f24:	mov	r0, r7
   21f28:	mov	r2, r9
   21f2c:	ldr	r3, [sp, #12]
   21f30:	bl	21f88 <__assert_fail@plt+0x10814>
   21f34:	mov	r8, r0
   21f38:	ldr	r0, [r6, #8]
   21f3c:	ldr	r1, [r0, r5, lsl #2]
   21f40:	ldr	r0, [fp, #12]
   21f44:	stm	sp, {r0, r4}
   21f48:	mov	r0, r7
   21f4c:	mov	r2, r9
   21f50:	ldr	r3, [fp, #8]
   21f54:	bl	21f88 <__assert_fail@plt+0x10814>
   21f58:	cmp	r0, r8
   21f5c:	bne	21f7c <__assert_fail@plt+0x10808>
   21f60:	add	r5, r5, #1
   21f64:	ldr	r0, [r6, #4]
   21f68:	cmp	r5, r0
   21f6c:	blt	21ef8 <__assert_fail@plt+0x10784>
   21f70:	mov	r0, #0
   21f74:	sub	sp, fp, #28
   21f78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f7c:	mov	r0, #1
   21f80:	sub	sp, fp, #28
   21f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f88:	push	{r4, r5, fp, lr}
   21f8c:	add	fp, sp, #8
   21f90:	sub	sp, sp, #8
   21f94:	ldr	r4, [r0, #116]	; 0x74
   21f98:	add	r1, r1, r1, lsl #1
   21f9c:	add	r4, r4, r1, lsl #3
   21fa0:	ldr	ip, [r4, #8]
   21fa4:	mvn	r1, #0
   21fa8:	ldr	lr, [fp, #8]
   21fac:	cmp	ip, lr
   21fb0:	bgt	22000 <__assert_fail@plt+0x1088c>
   21fb4:	ldr	r4, [r4, #12]
   21fb8:	mov	r1, #1
   21fbc:	cmp	r4, lr
   21fc0:	blt	22000 <__assert_fail@plt+0x1088c>
   21fc4:	sub	r1, r4, lr
   21fc8:	clz	r1, r1
   21fcc:	lsr	r4, r1, #5
   21fd0:	mov	r5, #1
   21fd4:	lsl	r1, r4, #1
   21fd8:	cmp	ip, lr
   21fdc:	orreq	r1, r5, r4, lsl #1
   21fe0:	cmp	r1, #0
   21fe4:	beq	21ffc <__assert_fail@plt+0x10888>
   21fe8:	ldr	r5, [fp, #12]
   21fec:	str	r5, [sp]
   21ff0:	bl	2200c <__assert_fail@plt+0x10898>
   21ff4:	sub	sp, fp, #8
   21ff8:	pop	{r4, r5, fp, pc}
   21ffc:	mov	r1, #0
   22000:	mov	r0, r1
   22004:	sub	sp, fp, #8
   22008:	pop	{r4, r5, fp, pc}
   2200c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22010:	add	fp, sp, #28
   22014:	sub	sp, sp, #36	; 0x24
   22018:	mov	r6, r2
   2201c:	mov	r5, r1
   22020:	mov	r7, r0
   22024:	ldr	r4, [r0, #84]	; 0x54
   22028:	ldr	r0, [r4, #24]
   2202c:	str	r3, [sp, #32]
   22030:	add	r1, r3, r3, lsl #1
   22034:	add	r0, r0, r1, lsl #2
   22038:	mov	r2, r0
   2203c:	ldr	r1, [r2, #4]!
   22040:	str	r2, [sp, #24]
   22044:	cmp	r1, #1
   22048:	blt	221e0 <__assert_fail@plt+0x10a6c>
   2204c:	mov	r1, #1
   22050:	mvn	r2, r1, lsl r6
   22054:	str	r2, [sp, #16]
   22058:	lsl	r1, r1, r6
   2205c:	str	r1, [sp, #20]
   22060:	mov	sl, #0
   22064:	cmp	r6, #31
   22068:	mov	r1, #0
   2206c:	movwgt	r1, #1
   22070:	and	r2, r5, #2
   22074:	str	r2, [sp, #8]
   22078:	orr	r1, r1, r2, lsr #1
   2207c:	str	r1, [sp, #12]
   22080:	add	r0, r0, #8
   22084:	str	r0, [sp, #28]
   22088:	and	r0, r5, #1
   2208c:	str	r0, [sp, #4]
   22090:	ldr	r0, [sp, #28]
   22094:	ldr	r0, [r0]
   22098:	ldr	r8, [r0, sl, lsl #2]
   2209c:	ldr	r0, [r4]
   220a0:	add	r1, r0, r8, lsl #3
   220a4:	ldrb	r1, [r1, #4]
   220a8:	cmp	r1, #9
   220ac:	beq	22198 <__assert_fail@plt+0x10a24>
   220b0:	cmp	r1, #8
   220b4:	beq	221b4 <__assert_fail@plt+0x10a40>
   220b8:	cmp	r1, #4
   220bc:	bne	221cc <__assert_fail@plt+0x10a58>
   220c0:	ldr	r0, [fp, #8]
   220c4:	cmn	r0, #1
   220c8:	beq	221cc <__assert_fail@plt+0x10a58>
   220cc:	ldr	r0, [r7, #116]	; 0x74
   220d0:	ldr	r1, [fp, #8]
   220d4:	add	r1, r1, r1, lsl #1
   220d8:	add	r0, r0, r1, lsl #3
   220dc:	add	r9, r0, #16
   220e0:	ldr	r0, [r9, #-16]
   220e4:	cmp	r0, r8
   220e8:	bne	22184 <__assert_fail@plt+0x10a10>
   220ec:	cmp	r6, #31
   220f0:	bgt	22104 <__assert_fail@plt+0x10990>
   220f4:	ldr	r0, [r9]
   220f8:	ldr	r1, [sp, #20]
   220fc:	tst	r0, r1
   22100:	beq	22184 <__assert_fail@plt+0x10a10>
   22104:	ldr	r0, [r4, #20]
   22108:	add	r1, r8, r8, lsl #1
   2210c:	add	r0, r0, r1, lsl #2
   22110:	ldr	r0, [r0, #8]
   22114:	ldr	r3, [r0]
   22118:	ldr	r0, [sp, #32]
   2211c:	cmp	r3, r0
   22120:	beq	221ec <__assert_fail@plt+0x10a78>
   22124:	ldr	r0, [fp, #8]
   22128:	str	r0, [sp]
   2212c:	mov	r0, r7
   22130:	mov	r1, r5
   22134:	mov	r2, r6
   22138:	bl	2200c <__assert_fail@plt+0x10898>
   2213c:	cmp	r0, #0
   22140:	beq	22158 <__assert_fail@plt+0x109e4>
   22144:	cmn	r0, #1
   22148:	beq	22200 <__assert_fail@plt+0x10a8c>
   2214c:	cmp	r6, #31
   22150:	ble	22174 <__assert_fail@plt+0x10a00>
   22154:	b	22184 <__assert_fail@plt+0x10a10>
   22158:	ldr	r0, [sp, #12]
   2215c:	cmp	r0, #0
   22160:	beq	22174 <__assert_fail@plt+0x10a00>
   22164:	ldr	r0, [sp, #8]
   22168:	cmp	r0, #0
   2216c:	beq	22184 <__assert_fail@plt+0x10a10>
   22170:	b	221fc <__assert_fail@plt+0x10a88>
   22174:	ldr	r0, [r9]
   22178:	ldr	r1, [sp, #16]
   2217c:	and	r0, r0, r1
   22180:	str	r0, [r9]
   22184:	ldrb	r0, [r9, #4]
   22188:	add	r9, r9, #24
   2218c:	cmp	r0, #0
   22190:	bne	220e0 <__assert_fail@plt+0x1096c>
   22194:	b	221cc <__assert_fail@plt+0x10a58>
   22198:	ldr	r1, [sp, #8]
   2219c:	cmp	r1, #0
   221a0:	beq	221cc <__assert_fail@plt+0x10a58>
   221a4:	ldr	r0, [r0, r8, lsl #3]
   221a8:	cmp	r0, r6
   221ac:	bne	221cc <__assert_fail@plt+0x10a58>
   221b0:	b	221fc <__assert_fail@plt+0x10a88>
   221b4:	ldr	r1, [sp, #4]
   221b8:	cmp	r1, #0
   221bc:	beq	221cc <__assert_fail@plt+0x10a58>
   221c0:	ldr	r0, [r0, r8, lsl #3]
   221c4:	cmp	r0, r6
   221c8:	beq	22208 <__assert_fail@plt+0x10a94>
   221cc:	ldr	r0, [sp, #24]
   221d0:	ldr	r0, [r0]
   221d4:	add	sl, sl, #1
   221d8:	cmp	sl, r0
   221dc:	blt	22090 <__assert_fail@plt+0x1091c>
   221e0:	ubfx	r0, r5, #1, #1
   221e4:	sub	sp, fp, #28
   221e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   221ec:	ldr	r0, [sp, #4]
   221f0:	rsb	r0, r0, #0
   221f4:	sub	sp, fp, #28
   221f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   221fc:	mov	r0, #0
   22200:	sub	sp, fp, #28
   22204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22208:	mvn	r0, #0
   2220c:	sub	sp, fp, #28
   22210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22214:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22218:	add	fp, sp, #24
   2221c:	mov	r7, r3
   22220:	mov	r5, r2
   22224:	mov	r8, r1
   22228:	mov	r2, r0
   2222c:	ldr	r6, [r0, #84]	; 0x54
   22230:	mov	r0, r6
   22234:	mov	r1, r5
   22238:	bl	20018 <__assert_fail@plt+0xe8a4>
   2223c:	mov	r4, r0
   22240:	cmp	r0, #1
   22244:	blt	22280 <__assert_fail@plt+0x10b0c>
   22248:	ldr	r1, [fp, #8]
   2224c:	add	r0, r4, r7
   22250:	cmp	r0, r1
   22254:	bgt	22280 <__assert_fail@plt+0x10b0c>
   22258:	ldr	r1, [r8]
   2225c:	ldr	r0, [r1, r0, lsl #2]
   22260:	cmp	r0, #0
   22264:	beq	22288 <__assert_fail@plt+0x10b14>
   22268:	ldr	r1, [r6, #12]
   2226c:	ldr	r1, [r1, r5, lsl #2]
   22270:	add	r0, r0, #4
   22274:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   22278:	cmp	r0, #0
   2227c:	moveq	r4, #0
   22280:	mov	r0, r4
   22284:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22288:	mov	r4, #0
   2228c:	mov	r0, r4
   22290:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22294:	mov	r1, #16
   22298:	mov	r2, #0
   2229c:	add	r3, r0, #12
   222a0:	str	r2, [r0]
   222a4:	stmib	r0, {r1, r3}
   222a8:	bx	lr
   222ac:	push	{r4, sl, fp, lr}
   222b0:	add	fp, sp, #8
   222b4:	mov	r4, r0
   222b8:	ldr	r0, [r0]
   222bc:	cmp	r0, r1
   222c0:	bcs	222f4 <__assert_fail@plt+0x10b80>
   222c4:	add	r2, r4, #12
   222c8:	mov	r0, r4
   222cc:	mov	r3, #8
   222d0:	bl	24294 <__assert_fail@plt+0x12b20>
   222d4:	mov	r1, r0
   222d8:	mov	r0, #1
   222dc:	cmp	r1, #0
   222e0:	popne	{r4, sl, fp, pc}
   222e4:	mov	r0, r4
   222e8:	bl	227fc <__assert_fail@plt+0x11088>
   222ec:	mov	r0, #0
   222f0:	pop	{r4, sl, fp, pc}
   222f4:	str	r1, [r4]
   222f8:	mov	r0, #1
   222fc:	pop	{r4, sl, fp, pc}
   22300:	push	{r4, sl, fp, lr}
   22304:	add	fp, sp, #8
   22308:	mov	r4, r0
   2230c:	bl	22824 <__assert_fail@plt+0x110b0>
   22310:	mov	r0, r4
   22314:	pop	{r4, sl, fp, lr}
   22318:	b	22294 <__assert_fail@plt+0x10b20>
   2231c:	cmp	r0, #0
   22320:	bxeq	lr
   22324:	push	{r4, r5, r6, sl, fp, lr}
   22328:	add	fp, sp, #16
   2232c:	mov	r4, r0
   22330:	ldr	r1, [r0]
   22334:	ldr	r0, [r0, #8]
   22338:	cmp	r1, #1
   2233c:	blt	2237c <__assert_fail@plt+0x10c08>
   22340:	mov	r5, #0
   22344:	mov	r6, #0
   22348:	add	r0, r0, r5
   2234c:	ldr	r0, [r0, #20]
   22350:	bl	13f04 <__assert_fail@plt+0x2790>
   22354:	ldr	r0, [r4, #8]
   22358:	add	r0, r0, r5
   2235c:	ldr	r0, [r0, #8]
   22360:	bl	13f04 <__assert_fail@plt+0x2790>
   22364:	add	r5, r5, #24
   22368:	add	r6, r6, #1
   2236c:	ldr	r1, [r4]
   22370:	ldr	r0, [r4, #8]
   22374:	cmp	r6, r1
   22378:	blt	22348 <__assert_fail@plt+0x10bd4>
   2237c:	pop	{r4, r5, r6, sl, fp, lr}
   22380:	b	13f04 <__assert_fail@plt+0x2790>
   22384:	ldr	r0, [r0, #8]
   22388:	bx	lr
   2238c:	push	{r4, r5, fp, lr}
   22390:	add	fp, sp, #8
   22394:	ldr	r4, [r0]
   22398:	add	r0, r4, r3, lsl #3
   2239c:	ldr	r0, [r0, #4]
   223a0:	uxtb	r5, r0
   223a4:	ldr	lr, [fp, #12]
   223a8:	ldr	ip, [fp, #8]
   223ac:	cmp	r5, #9
   223b0:	beq	223dc <__assert_fail@plt+0x10c68>
   223b4:	cmp	r5, #8
   223b8:	bne	223d8 <__assert_fail@plt+0x10c64>
   223bc:	ldr	r0, [r4, r3, lsl #3]
   223c0:	add	r0, r0, #1
   223c4:	cmp	r0, lr
   223c8:	strlt	ip, [r1, r0, lsl #3]!
   223cc:	mvnlt	r0, #0
   223d0:	strlt	r0, [r1, #4]
   223d4:	poplt	{r4, r5, fp, pc}
   223d8:	pop	{r4, r5, fp, pc}
   223dc:	ldr	r3, [r4, r3, lsl #3]
   223e0:	add	r3, r3, #1
   223e4:	cmp	r3, lr
   223e8:	popge	{r4, r5, fp, pc}
   223ec:	ldr	r4, [r1, r3, lsl #3]
   223f0:	cmp	r4, ip
   223f4:	bge	22414 <__assert_fail@plt+0x10ca0>
   223f8:	add	r0, r1, r3, lsl #3
   223fc:	str	ip, [r0, #4]
   22400:	lsl	r3, lr, #3
   22404:	mov	r0, r2
   22408:	mov	r2, r3
   2240c:	pop	{r4, r5, fp, lr}
   22410:	b	1148c <memcpy@plt>
   22414:	tst	r0, #524288	; 0x80000
   22418:	ldrne	r0, [r2, r3, lsl #3]
   2241c:	cmnne	r0, #1
   22420:	bne	22430 <__assert_fail@plt+0x10cbc>
   22424:	add	r0, r1, r3, lsl #3
   22428:	str	ip, [r0, #4]
   2242c:	pop	{r4, r5, fp, pc}
   22430:	lsl	r3, lr, #3
   22434:	mov	r0, r1
   22438:	mov	r1, r2
   2243c:	b	22408 <__assert_fail@plt+0x10c94>
   22440:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22444:	add	fp, sp, #24
   22448:	mov	r4, r0
   2244c:	mvn	r0, #0
   22450:	cmp	r4, #0
   22454:	beq	224f4 <__assert_fail@plt+0x10d80>
   22458:	mov	r5, r2
   2245c:	ldr	r2, [r4]
   22460:	cmp	r2, #0
   22464:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   22468:	ldr	r9, [fp, #12]
   2246c:	ldr	r8, [fp, #8]
   22470:	sub	r0, r2, #1
   22474:	str	r0, [r4]
   22478:	ldr	r2, [r4, #8]
   2247c:	add	r6, r0, r0, lsl #1
   22480:	ldr	r0, [r2, r6, lsl #3]!
   22484:	str	r0, [r1]
   22488:	ldr	r1, [r2, #8]
   2248c:	lsl	r7, r5, #3
   22490:	mov	r0, r3
   22494:	mov	r2, r7
   22498:	bl	1148c <memcpy@plt>
   2249c:	ldr	r0, [r4, #8]
   224a0:	add	r0, r0, r6, lsl #3
   224a4:	ldr	r0, [r0, #8]
   224a8:	add	r1, r0, r5, lsl #3
   224ac:	mov	r0, r8
   224b0:	mov	r2, r7
   224b4:	bl	1148c <memcpy@plt>
   224b8:	ldr	r0, [r9, #8]
   224bc:	bl	13f04 <__assert_fail@plt+0x2790>
   224c0:	ldr	r0, [r4, #8]
   224c4:	add	r0, r0, r6, lsl #3
   224c8:	ldr	r0, [r0, #8]
   224cc:	bl	13f04 <__assert_fail@plt+0x2790>
   224d0:	ldr	r0, [r4, #8]
   224d4:	add	r0, r0, r6, lsl #3
   224d8:	vldr	d16, [r0, #12]
   224dc:	ldr	r0, [r0, #20]
   224e0:	str	r0, [r9, #8]
   224e4:	vstr	d16, [r9]
   224e8:	ldr	r0, [r4, #8]
   224ec:	add	r0, r0, r6, lsl #3
   224f0:	ldr	r0, [r0, #4]
   224f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   224f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224fc:	add	fp, sp, #28
   22500:	sub	sp, sp, #20
   22504:	mov	r9, r3
   22508:	mov	r5, r0
   2250c:	ldr	r4, [r0, #84]	; 0x54
   22510:	ldr	r3, [r4]
   22514:	ldr	sl, [fp, #12]
   22518:	add	r0, r3, sl, lsl #3
   2251c:	ldr	r7, [r0, #4]
   22520:	ldr	r0, [fp, #16]
   22524:	ldr	r6, [fp, #8]
   22528:	tst	r7, #8
   2252c:	bne	225e8 <__assert_fail@plt+0x10e74>
   22530:	tst	r7, #1048576	; 0x100000
   22534:	bne	22688 <__assert_fail@plt+0x10f14>
   22538:	mov	ip, r1
   2253c:	mov	r9, r6
   22540:	uxtb	r1, r7
   22544:	cmp	r1, #4
   22548:	bne	226ac <__assert_fail@plt+0x10f38>
   2254c:	ldr	r0, [r3, sl, lsl #3]
   22550:	add	r0, r0, #1
   22554:	mov	r7, #0
   22558:	mov	r6, ip
   2255c:	cmp	r0, ip
   22560:	mov	r3, r2
   22564:	movlt	r1, r3
   22568:	ldrlt	r2, [r1, r0, lsl #3]!
   2256c:	ldrlt	r1, [r1, #4]
   22570:	sublt	r7, r1, r2
   22574:	ldr	r1, [fp, #20]
   22578:	cmp	r1, #0
   2257c:	beq	22730 <__assert_fail@plt+0x10fbc>
   22580:	mvn	r8, #0
   22584:	cmp	r0, r6
   22588:	bge	2279c <__assert_fail@plt+0x11028>
   2258c:	ldr	r1, [r3, r0, lsl #3]
   22590:	cmn	r1, #1
   22594:	beq	2279c <__assert_fail@plt+0x11028>
   22598:	add	r0, r3, r0, lsl #3
   2259c:	ldr	r0, [r0, #4]
   225a0:	cmn	r0, #1
   225a4:	beq	2279c <__assert_fail@plt+0x11028>
   225a8:	cmp	r7, #0
   225ac:	beq	227a8 <__assert_fail@plt+0x11034>
   225b0:	mov	r0, r9
   225b4:	ldr	r2, [r9]
   225b8:	ldr	r0, [r5, #28]
   225bc:	sub	r0, r0, r2
   225c0:	cmp	r0, r7
   225c4:	blt	2279c <__assert_fail@plt+0x11028>
   225c8:	ldr	r3, [r5, #4]
   225cc:	add	r0, r3, r1
   225d0:	add	r1, r3, r2
   225d4:	mov	r2, r7
   225d8:	bl	114e0 <memcmp@plt>
   225dc:	cmp	r0, #0
   225e0:	bne	2279c <__assert_fail@plt+0x11028>
   225e4:	b	22738 <__assert_fail@plt+0x10fc4>
   225e8:	str	r1, [sp, #12]
   225ec:	str	r2, [sp, #16]
   225f0:	ldr	r2, [r6]
   225f4:	ldr	r1, [r5, #100]	; 0x64
   225f8:	ldr	r5, [r1, r2, lsl #2]
   225fc:	ldr	r4, [r4, #20]
   22600:	mov	r1, sl
   22604:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   22608:	cmp	r0, #0
   2260c:	bne	22628 <__assert_fail@plt+0x10eb4>
   22610:	ldr	r0, [fp, #16]
   22614:	mov	r1, sl
   22618:	bl	1c7d4 <__assert_fail@plt+0xb060>
   2261c:	mvn	r8, #1
   22620:	cmp	r0, #0
   22624:	beq	2279c <__assert_fail@plt+0x11028>
   22628:	add	r0, sl, sl, lsl #1
   2262c:	add	r1, r4, r0, lsl #2
   22630:	mov	r0, r1
   22634:	ldr	r2, [r0, #4]!
   22638:	cmp	r2, #1
   2263c:	blt	226d4 <__assert_fail@plt+0x10f60>
   22640:	add	sl, r5, #4
   22644:	ldr	r7, [r1, #8]
   22648:	ldr	r6, [r0]
   2264c:	mov	r5, #0
   22650:	mvn	r8, #0
   22654:	ldr	r4, [r7, r5, lsl #2]
   22658:	mov	r0, sl
   2265c:	mov	r1, r4
   22660:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   22664:	cmp	r0, #0
   22668:	beq	22678 <__assert_fail@plt+0x10f04>
   2266c:	cmn	r8, #1
   22670:	bne	226dc <__assert_fail@plt+0x10f68>
   22674:	mov	r8, r4
   22678:	add	r5, r5, #1
   2267c:	cmp	r5, r6
   22680:	blt	22654 <__assert_fail@plt+0x10ee0>
   22684:	b	2279c <__assert_fail@plt+0x11028>
   22688:	mov	r9, r6
   2268c:	ldr	r3, [r6]
   22690:	mov	r0, r4
   22694:	mov	r1, sl
   22698:	mov	r2, r5
   2269c:	bl	20018 <__assert_fail@plt+0xe8a4>
   226a0:	mov	r7, r0
   226a4:	cmp	r0, #0
   226a8:	bne	22738 <__assert_fail@plt+0x10fc4>
   226ac:	ldr	r0, [r4]
   226b0:	add	r1, r0, sl, lsl #3
   226b4:	ldr	r2, [r9]
   226b8:	mov	r0, r5
   226bc:	bl	202ec <__assert_fail@plt+0xeb78>
   226c0:	mvn	r8, #0
   226c4:	mov	r7, #1
   226c8:	cmp	r0, #0
   226cc:	bne	22738 <__assert_fail@plt+0x10fc4>
   226d0:	b	2279c <__assert_fail@plt+0x11028>
   226d4:	mvn	r8, #0
   226d8:	b	2279c <__assert_fail@plt+0x11028>
   226dc:	ldr	r5, [fp, #16]
   226e0:	mov	r0, r5
   226e4:	mov	r1, r8
   226e8:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   226ec:	cmp	r0, #0
   226f0:	bne	22798 <__assert_fail@plt+0x11024>
   226f4:	ldr	r0, [fp, #20]
   226f8:	cmp	r0, #0
   226fc:	beq	2279c <__assert_fail@plt+0x11028>
   22700:	ldr	r1, [fp, #8]
   22704:	ldr	r1, [r1]
   22708:	ldr	r2, [sp, #16]
   2270c:	stm	sp, {r2, r9}
   22710:	str	r5, [sp, #8]
   22714:	mov	r2, r4
   22718:	ldr	r3, [sp, #12]
   2271c:	bl	2283c <__assert_fail@plt+0x110c8>
   22720:	mvn	r4, #1
   22724:	cmp	r0, #0
   22728:	movne	r8, r4
   2272c:	b	2279c <__assert_fail@plt+0x11028>
   22730:	cmp	r7, #0
   22734:	beq	227a8 <__assert_fail@plt+0x11034>
   22738:	ldr	r0, [r4, #12]
   2273c:	ldr	r4, [r0, sl, lsl #2]
   22740:	ldr	r0, [r9]
   22744:	add	r0, r0, r7
   22748:	str	r0, [r9]
   2274c:	ldr	r1, [fp, #20]
   22750:	cmp	r1, #0
   22754:	beq	2278c <__assert_fail@plt+0x11018>
   22758:	ldr	r1, [r5, #92]	; 0x5c
   2275c:	mvn	r8, #0
   22760:	cmp	r0, r1
   22764:	bgt	2279c <__assert_fail@plt+0x11028>
   22768:	ldr	r1, [r5, #100]	; 0x64
   2276c:	ldr	r0, [r1, r0, lsl #2]
   22770:	cmp	r0, #0
   22774:	beq	2279c <__assert_fail@plt+0x11028>
   22778:	add	r0, r0, #4
   2277c:	mov	r1, r4
   22780:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   22784:	cmp	r0, #0
   22788:	beq	2279c <__assert_fail@plt+0x11028>
   2278c:	mov	r0, #0
   22790:	ldr	r1, [fp, #16]
   22794:	str	r0, [r1, #4]
   22798:	mov	r8, r4
   2279c:	mov	r0, r8
   227a0:	sub	sp, fp, #28
   227a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   227a8:	ldr	r0, [fp, #16]
   227ac:	mov	r1, sl
   227b0:	bl	1c7d4 <__assert_fail@plt+0xb060>
   227b4:	cmp	r0, #0
   227b8:	beq	227f4 <__assert_fail@plt+0x11080>
   227bc:	ldr	r0, [r4, #20]
   227c0:	add	r1, sl, sl, lsl #1
   227c4:	add	r0, r0, r1, lsl #2
   227c8:	ldr	r0, [r0, #8]
   227cc:	ldr	r8, [r0]
   227d0:	ldr	r0, [r9]
   227d4:	ldr	r1, [r5, #100]	; 0x64
   227d8:	ldr	r0, [r1, r0, lsl #2]
   227dc:	add	r0, r0, #4
   227e0:	mov	r1, r8
   227e4:	bl	1ca38 <__assert_fail@plt+0xb2c4>
   227e8:	cmp	r0, #0
   227ec:	bne	2279c <__assert_fail@plt+0x11028>
   227f0:	b	226ac <__assert_fail@plt+0x10f38>
   227f4:	mvn	r8, #1
   227f8:	b	2279c <__assert_fail@plt+0x11028>
   227fc:	push	{r4, sl, fp, lr}
   22800:	add	fp, sp, #8
   22804:	mov	r4, r0
   22808:	bl	22824 <__assert_fail@plt+0x110b0>
   2280c:	mov	r0, #0
   22810:	add	r1, r4, #12
   22814:	mvn	r2, #0
   22818:	stm	r4, {r0, r2}
   2281c:	str	r1, [r4, #8]
   22820:	pop	{r4, sl, fp, pc}
   22824:	mov	r1, r0
   22828:	ldr	r0, [r0, #8]
   2282c:	add	r1, r1, #12
   22830:	cmp	r0, r1
   22834:	bxeq	lr
   22838:	b	13f04 <__assert_fail@plt+0x2790>
   2283c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22840:	add	fp, sp, #28
   22844:	sub	sp, sp, #12
   22848:	mov	r6, r3
   2284c:	mov	r9, r2
   22850:	mov	r5, r1
   22854:	mov	r4, r0
   22858:	ldr	r7, [r0]
   2285c:	ldr	r1, [r0, #4]
   22860:	add	r0, r7, #1
   22864:	str	r0, [r4]
   22868:	ldr	r2, [fp, #16]
   2286c:	str	r2, [sp, #8]
   22870:	ldr	r2, [fp, #12]
   22874:	str	r2, [sp, #4]
   22878:	ldr	sl, [fp, #8]
   2287c:	cmp	r0, r1
   22880:	bne	228ac <__assert_fail@plt+0x11138>
   22884:	ldr	r0, [r4, #8]
   22888:	add	r1, r1, r1, lsl #1
   2288c:	lsl	r1, r1, #4
   22890:	bl	23e94 <__assert_fail@plt+0x12720>
   22894:	cmp	r0, #0
   22898:	beq	22920 <__assert_fail@plt+0x111ac>
   2289c:	str	r0, [r4, #8]
   228a0:	ldr	r0, [r4, #4]
   228a4:	lsl	r0, r0, #1
   228a8:	str	r0, [r4, #4]
   228ac:	ldr	r0, [r4, #8]
   228b0:	add	r8, r7, r7, lsl #1
   228b4:	str	r5, [r0, r8, lsl #3]!
   228b8:	str	r9, [r0, #4]
   228bc:	lsl	r0, r6, #4
   228c0:	bl	23e64 <__assert_fail@plt+0x126f0>
   228c4:	ldr	r1, [r4, #8]
   228c8:	add	r1, r1, r8, lsl #3
   228cc:	str	r0, [r1, #8]
   228d0:	cmp	r0, #0
   228d4:	beq	22920 <__assert_fail@plt+0x111ac>
   228d8:	lsl	r5, r6, #3
   228dc:	mov	r1, sl
   228e0:	mov	r2, r5
   228e4:	bl	1148c <memcpy@plt>
   228e8:	ldr	r0, [r4, #8]
   228ec:	add	r0, r0, r8, lsl #3
   228f0:	ldr	r0, [r0, #8]
   228f4:	add	r0, r0, r6, lsl #3
   228f8:	ldr	r1, [sp, #4]
   228fc:	mov	r2, r5
   22900:	bl	1148c <memcpy@plt>
   22904:	ldr	r0, [r4, #8]
   22908:	add	r0, r0, r8, lsl #3
   2290c:	add	r0, r0, #12
   22910:	ldr	r1, [sp, #8]
   22914:	sub	sp, fp, #28
   22918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2291c:	b	1c9bc <__assert_fail@plt+0xb248>
   22920:	mov	r0, #12
   22924:	sub	sp, fp, #28
   22928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2292c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22930:	add	fp, sp, #24
   22934:	mov	r7, r2
   22938:	mov	r5, r1
   2293c:	mov	r6, r0
   22940:	movw	r9, #0
   22944:	movt	r9, #32752	; 0x7ff0
   22948:	mov	r0, r6
   2294c:	mov	r1, r5
   22950:	mov	r2, r7
   22954:	bl	1142c <read@plt>
   22958:	mov	r4, r0
   2295c:	cmn	r0, #1
   22960:	movgt	r0, r4
   22964:	popgt	{r4, r5, r6, r7, r8, r9, fp, pc}
   22968:	bl	1163c <__errno_location@plt>
   2296c:	ldr	r0, [r0]
   22970:	cmp	r0, #4
   22974:	beq	22948 <__assert_fail@plt+0x111d4>
   22978:	cmp	r7, r9
   2297c:	mov	r1, #0
   22980:	movwhi	r1, #1
   22984:	sub	r2, r0, #22
   22988:	clz	r2, r2
   2298c:	lsr	r2, r2, #5
   22990:	ands	r1, r1, r2
   22994:	moveq	r8, r4
   22998:	mov	r1, r7
   2299c:	movwne	r1, #0
   229a0:	movtne	r1, #32752	; 0x7ff0
   229a4:	cmp	r7, r9
   229a8:	bls	229b8 <__assert_fail@plt+0x11244>
   229ac:	cmp	r0, #22
   229b0:	mov	r7, r1
   229b4:	beq	22948 <__assert_fail@plt+0x111d4>
   229b8:	mov	r0, r8
   229bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   229c0:	mov	r1, #0
   229c4:	mov	r2, #3
   229c8:	b	24354 <__assert_fail@plt+0x12be0>
   229cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   229d0:	add	fp, sp, #24
   229d4:	sub	sp, sp, #32
   229d8:	mov	r4, r2
   229dc:	mov	r8, r0
   229e0:	ldr	r6, [fp, #12]
   229e4:	ldr	r7, [fp, #8]
   229e8:	cmp	r1, #0
   229ec:	beq	22a14 <__assert_fail@plt+0x112a0>
   229f0:	mov	r5, r1
   229f4:	str	r4, [sp]
   229f8:	str	r3, [sp, #4]
   229fc:	movw	r2, #22905	; 0x5979
   22a00:	movt	r2, #2
   22a04:	mov	r0, r8
   22a08:	mov	r1, #1
   22a0c:	mov	r3, r5
   22a10:	b	22a2c <__assert_fail@plt+0x112b8>
   22a14:	str	r3, [sp]
   22a18:	movw	r2, #22917	; 0x5985
   22a1c:	movt	r2, #2
   22a20:	mov	r0, r8
   22a24:	mov	r1, #1
   22a28:	mov	r3, r4
   22a2c:	bl	116a8 <__fprintf_chk@plt>
   22a30:	movw	r1, #22924	; 0x598c
   22a34:	movt	r1, #2
   22a38:	mov	r0, #0
   22a3c:	mov	r2, #5
   22a40:	bl	114ec <dcgettext@plt>
   22a44:	mov	r3, r0
   22a48:	movw	r0, #2022	; 0x7e6
   22a4c:	str	r0, [sp]
   22a50:	movw	r2, #23642	; 0x5c5a
   22a54:	movt	r2, #2
   22a58:	mov	r0, r8
   22a5c:	mov	r1, #1
   22a60:	bl	116a8 <__fprintf_chk@plt>
   22a64:	movw	r4, #20410	; 0x4fba
   22a68:	movt	r4, #2
   22a6c:	mov	r0, r4
   22a70:	mov	r1, r8
   22a74:	bl	113e4 <fputs_unlocked@plt>
   22a78:	movw	r1, #22928	; 0x5990
   22a7c:	movt	r1, #2
   22a80:	mov	r0, #0
   22a84:	mov	r2, #5
   22a88:	bl	114ec <dcgettext@plt>
   22a8c:	mov	r2, r0
   22a90:	movw	r3, #23099	; 0x5a3b
   22a94:	movt	r3, #2
   22a98:	mov	r0, r8
   22a9c:	mov	r1, #1
   22aa0:	bl	116a8 <__fprintf_chk@plt>
   22aa4:	mov	r0, r4
   22aa8:	mov	r1, r8
   22aac:	bl	113e4 <fputs_unlocked@plt>
   22ab0:	cmp	r6, #9
   22ab4:	bhi	22af0 <__assert_fail@plt+0x1137c>
   22ab8:	add	r0, pc, #0
   22abc:	ldr	pc, [r0, r6, lsl #2]
   22ac0:	andeq	r2, r2, r8, ror #21
   22ac4:	strdeq	r2, [r2], -ip
   22ac8:	andeq	r2, r2, ip, lsr #22
   22acc:	andeq	r2, r2, r4, asr fp
   22ad0:	andeq	r2, r2, ip, ror fp
   22ad4:	andeq	r2, r2, r4, lsr #23
   22ad8:	andeq	r2, r2, ip, asr #23
   22adc:	andeq	r2, r2, r4, lsl #24
   22ae0:	andeq	r2, r2, r4, lsr #25
   22ae4:	andeq	r2, r2, ip, asr #24
   22ae8:	sub	sp, fp, #24
   22aec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22af0:	movw	r1, #23452	; 0x5b9c
   22af4:	movt	r1, #2
   22af8:	b	22c54 <__assert_fail@plt+0x114e0>
   22afc:	movw	r1, #23133	; 0x5a5d
   22b00:	movt	r1, #2
   22b04:	mov	r0, #0
   22b08:	mov	r2, #5
   22b0c:	bl	114ec <dcgettext@plt>
   22b10:	mov	r2, r0
   22b14:	ldr	r3, [r7]
   22b18:	mov	r0, r8
   22b1c:	mov	r1, #1
   22b20:	sub	sp, fp, #24
   22b24:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   22b28:	b	116a8 <__fprintf_chk@plt>
   22b2c:	movw	r1, #23149	; 0x5a6d
   22b30:	movt	r1, #2
   22b34:	mov	r0, #0
   22b38:	mov	r2, #5
   22b3c:	bl	114ec <dcgettext@plt>
   22b40:	mov	r2, r0
   22b44:	ldr	r3, [r7]
   22b48:	ldr	r0, [r7, #4]
   22b4c:	str	r0, [sp]
   22b50:	b	22c40 <__assert_fail@plt+0x114cc>
   22b54:	movw	r1, #23172	; 0x5a84
   22b58:	movt	r1, #2
   22b5c:	mov	r0, #0
   22b60:	mov	r2, #5
   22b64:	bl	114ec <dcgettext@plt>
   22b68:	mov	r2, r0
   22b6c:	ldr	r3, [r7]
   22b70:	ldmib	r7, {r0, r1}
   22b74:	stm	sp, {r0, r1}
   22b78:	b	22c40 <__assert_fail@plt+0x114cc>
   22b7c:	movw	r1, #23200	; 0x5aa0
   22b80:	movt	r1, #2
   22b84:	mov	r0, #0
   22b88:	mov	r2, #5
   22b8c:	bl	114ec <dcgettext@plt>
   22b90:	mov	r2, r0
   22b94:	ldr	r3, [r7]
   22b98:	ldmib	r7, {r0, r1, r7}
   22b9c:	stm	sp, {r0, r1, r7}
   22ba0:	b	22c40 <__assert_fail@plt+0x114cc>
   22ba4:	movw	r1, #23232	; 0x5ac0
   22ba8:	movt	r1, #2
   22bac:	mov	r0, #0
   22bb0:	mov	r2, #5
   22bb4:	bl	114ec <dcgettext@plt>
   22bb8:	mov	r2, r0
   22bbc:	ldr	r3, [r7]
   22bc0:	ldmib	r7, {r0, r1, r6, r7}
   22bc4:	stm	sp, {r0, r1, r6, r7}
   22bc8:	b	22c40 <__assert_fail@plt+0x114cc>
   22bcc:	movw	r1, #23268	; 0x5ae4
   22bd0:	movt	r1, #2
   22bd4:	mov	r0, #0
   22bd8:	mov	r2, #5
   22bdc:	bl	114ec <dcgettext@plt>
   22be0:	mov	r2, r0
   22be4:	ldr	r3, [r7]
   22be8:	ldmib	r7, {r0, r1, r6}
   22bec:	ldr	r5, [r7, #16]
   22bf0:	ldr	r7, [r7, #20]
   22bf4:	stm	sp, {r0, r1, r6}
   22bf8:	str	r5, [sp, #12]
   22bfc:	str	r7, [sp, #16]
   22c00:	b	22c40 <__assert_fail@plt+0x114cc>
   22c04:	movw	r1, #23308	; 0x5b0c
   22c08:	movt	r1, #2
   22c0c:	mov	r0, #0
   22c10:	mov	r2, #5
   22c14:	bl	114ec <dcgettext@plt>
   22c18:	mov	r2, r0
   22c1c:	ldr	r3, [r7]
   22c20:	ldmib	r7, {r0, r1, r6}
   22c24:	ldr	r5, [r7, #16]
   22c28:	ldr	r4, [r7, #20]
   22c2c:	ldr	r7, [r7, #24]
   22c30:	stm	sp, {r0, r1, r6}
   22c34:	str	r5, [sp, #12]
   22c38:	str	r4, [sp, #16]
   22c3c:	str	r7, [sp, #20]
   22c40:	mov	r0, r8
   22c44:	mov	r1, #1
   22c48:	b	22cf4 <__assert_fail@plt+0x11580>
   22c4c:	movw	r1, #23400	; 0x5b68
   22c50:	movt	r1, #2
   22c54:	mov	r0, #0
   22c58:	mov	r2, #5
   22c5c:	bl	114ec <dcgettext@plt>
   22c60:	mov	ip, r0
   22c64:	ldr	r3, [r7]
   22c68:	ldr	r0, [r7, #4]
   22c6c:	ldr	r1, [r7, #8]
   22c70:	ldr	r6, [r7, #12]
   22c74:	ldr	r5, [r7, #16]
   22c78:	ldr	r4, [r7, #20]
   22c7c:	ldr	r2, [r7, #24]
   22c80:	ldr	lr, [r7, #28]
   22c84:	ldr	r7, [r7, #32]
   22c88:	stm	sp, {r0, r1, r6}
   22c8c:	str	r5, [sp, #12]
   22c90:	str	r4, [sp, #16]
   22c94:	str	r2, [sp, #20]
   22c98:	str	lr, [sp, #24]
   22c9c:	str	r7, [sp, #28]
   22ca0:	b	22ce8 <__assert_fail@plt+0x11574>
   22ca4:	movw	r1, #23352	; 0x5b38
   22ca8:	movt	r1, #2
   22cac:	mov	r0, #0
   22cb0:	mov	r2, #5
   22cb4:	bl	114ec <dcgettext@plt>
   22cb8:	mov	ip, r0
   22cbc:	ldr	r3, [r7]
   22cc0:	ldmib	r7, {r0, r1, r6}
   22cc4:	ldr	r5, [r7, #16]
   22cc8:	ldr	r4, [r7, #20]
   22ccc:	ldr	r2, [r7, #24]
   22cd0:	ldr	r7, [r7, #28]
   22cd4:	stm	sp, {r0, r1, r6}
   22cd8:	str	r5, [sp, #12]
   22cdc:	str	r4, [sp, #16]
   22ce0:	str	r2, [sp, #20]
   22ce4:	str	r7, [sp, #24]
   22ce8:	mov	r0, r8
   22cec:	mov	r1, #1
   22cf0:	mov	r2, ip
   22cf4:	bl	116a8 <__fprintf_chk@plt>
   22cf8:	sub	sp, fp, #24
   22cfc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22d00:	push	{r4, sl, fp, lr}
   22d04:	add	fp, sp, #8
   22d08:	sub	sp, sp, #8
   22d0c:	mov	lr, #0
   22d10:	ldr	ip, [fp, #8]
   22d14:	ldr	r4, [ip, lr, lsl #2]
   22d18:	add	lr, lr, #1
   22d1c:	cmp	r4, #0
   22d20:	bne	22d14 <__assert_fail@plt+0x115a0>
   22d24:	sub	r4, lr, #1
   22d28:	str	ip, [sp]
   22d2c:	str	r4, [sp, #4]
   22d30:	bl	229cc <__assert_fail@plt+0x11258>
   22d34:	sub	sp, fp, #8
   22d38:	pop	{r4, sl, fp, pc}
   22d3c:	push	{r4, r5, fp, lr}
   22d40:	add	fp, sp, #8
   22d44:	sub	sp, sp, #48	; 0x30
   22d48:	mov	ip, #0
   22d4c:	ldr	r4, [fp, #8]
   22d50:	add	lr, sp, #8
   22d54:	ldr	r5, [r4]
   22d58:	str	r5, [lr, ip, lsl #2]
   22d5c:	cmp	r5, #0
   22d60:	beq	22d74 <__assert_fail@plt+0x11600>
   22d64:	add	ip, ip, #1
   22d68:	add	r4, r4, #4
   22d6c:	cmp	ip, #10
   22d70:	bcc	22d54 <__assert_fail@plt+0x115e0>
   22d74:	str	lr, [sp]
   22d78:	str	ip, [sp, #4]
   22d7c:	bl	229cc <__assert_fail@plt+0x11258>
   22d80:	sub	sp, fp, #8
   22d84:	pop	{r4, r5, fp, pc}
   22d88:	push	{fp, lr}
   22d8c:	mov	fp, sp
   22d90:	sub	sp, sp, #8
   22d94:	add	ip, fp, #8
   22d98:	str	ip, [sp, #4]
   22d9c:	str	ip, [sp]
   22da0:	bl	22d3c <__assert_fail@plt+0x115c8>
   22da4:	mov	sp, fp
   22da8:	pop	{fp, pc}
   22dac:	push	{fp, lr}
   22db0:	mov	fp, sp
   22db4:	movw	r0, #25020	; 0x61bc
   22db8:	movt	r0, #3
   22dbc:	ldr	r1, [r0]
   22dc0:	movw	r0, #20410	; 0x4fba
   22dc4:	movt	r0, #2
   22dc8:	bl	113e4 <fputs_unlocked@plt>
   22dcc:	movw	r1, #23512	; 0x5bd8
   22dd0:	movt	r1, #2
   22dd4:	mov	r0, #0
   22dd8:	mov	r2, #5
   22ddc:	bl	114ec <dcgettext@plt>
   22de0:	mov	r1, r0
   22de4:	movw	r2, #23532	; 0x5bec
   22de8:	movt	r2, #2
   22dec:	mov	r0, #1
   22df0:	bl	11684 <__printf_chk@plt>
   22df4:	movw	r1, #23554	; 0x5c02
   22df8:	movt	r1, #2
   22dfc:	mov	r0, #0
   22e00:	mov	r2, #5
   22e04:	bl	114ec <dcgettext@plt>
   22e08:	mov	r1, r0
   22e0c:	movw	r2, #19081	; 0x4a89
   22e10:	movt	r2, #2
   22e14:	movw	r3, #21575	; 0x5447
   22e18:	movt	r3, #2
   22e1c:	mov	r0, #1
   22e20:	bl	11684 <__printf_chk@plt>
   22e24:	movw	r1, #23574	; 0x5c16
   22e28:	movt	r1, #2
   22e2c:	mov	r0, #0
   22e30:	mov	r2, #5
   22e34:	bl	114ec <dcgettext@plt>
   22e38:	mov	r1, r0
   22e3c:	movw	r2, #23613	; 0x5c3d
   22e40:	movt	r2, #2
   22e44:	mov	r0, #1
   22e48:	pop	{fp, lr}
   22e4c:	b	11684 <__printf_chk@plt>
   22e50:	b	22e54 <__assert_fail@plt+0x116e0>
   22e54:	push	{r4, r5, r6, sl, fp, lr}
   22e58:	add	fp, sp, #16
   22e5c:	mov	r4, r2
   22e60:	mov	r5, r1
   22e64:	mov	r6, r0
   22e68:	bl	24620 <__assert_fail@plt+0x12eac>
   22e6c:	cmp	r0, #0
   22e70:	popne	{r4, r5, r6, sl, fp, pc}
   22e74:	cmp	r6, #0
   22e78:	beq	22e8c <__assert_fail@plt+0x11718>
   22e7c:	cmp	r5, #0
   22e80:	cmpne	r4, #0
   22e84:	bne	22e8c <__assert_fail@plt+0x11718>
   22e88:	pop	{r4, r5, r6, sl, fp, pc}
   22e8c:	bl	11870 <__assert_fail@plt+0xfc>
   22e90:	push	{fp, lr}
   22e94:	mov	fp, sp
   22e98:	bl	23e64 <__assert_fail@plt+0x126f0>
   22e9c:	bl	22ea4 <__assert_fail@plt+0x11730>
   22ea0:	pop	{fp, pc}
   22ea4:	cmp	r0, #0
   22ea8:	bxne	lr
   22eac:	push	{fp, lr}
   22eb0:	mov	fp, sp
   22eb4:	bl	11870 <__assert_fail@plt+0xfc>
   22eb8:	push	{fp, lr}
   22ebc:	mov	fp, sp
   22ec0:	bl	24554 <__assert_fail@plt+0x12de0>
   22ec4:	bl	22ea4 <__assert_fail@plt+0x11730>
   22ec8:	pop	{fp, pc}
   22ecc:	b	22e90 <__assert_fail@plt+0x1171c>
   22ed0:	push	{r4, r5, fp, lr}
   22ed4:	add	fp, sp, #8
   22ed8:	mov	r4, r1
   22edc:	mov	r5, r0
   22ee0:	bl	23e94 <__assert_fail@plt+0x12720>
   22ee4:	cmp	r0, #0
   22ee8:	popne	{r4, r5, fp, pc}
   22eec:	cmp	r5, #0
   22ef0:	beq	22f00 <__assert_fail@plt+0x1178c>
   22ef4:	cmp	r4, #0
   22ef8:	bne	22f00 <__assert_fail@plt+0x1178c>
   22efc:	pop	{r4, r5, fp, pc}
   22f00:	bl	11870 <__assert_fail@plt+0xfc>
   22f04:	push	{fp, lr}
   22f08:	mov	fp, sp
   22f0c:	bl	24558 <__assert_fail@plt+0x12de4>
   22f10:	bl	22ea4 <__assert_fail@plt+0x11730>
   22f14:	pop	{fp, pc}
   22f18:	push	{fp, lr}
   22f1c:	mov	fp, sp
   22f20:	bl	24568 <__assert_fail@plt+0x12df4>
   22f24:	bl	22ea4 <__assert_fail@plt+0x11730>
   22f28:	pop	{fp, pc}
   22f2c:	push	{fp, lr}
   22f30:	mov	fp, sp
   22f34:	mov	r2, r1
   22f38:	mov	r1, r0
   22f3c:	mov	r0, #0
   22f40:	bl	22e54 <__assert_fail@plt+0x116e0>
   22f44:	pop	{fp, pc}
   22f48:	mov	r2, r1
   22f4c:	mov	r1, r0
   22f50:	mov	r0, #0
   22f54:	b	22f18 <__assert_fail@plt+0x117a4>
   22f58:	mov	r2, #1
   22f5c:	b	22f60 <__assert_fail@plt+0x117ec>
   22f60:	push	{r4, r5, fp, lr}
   22f64:	add	fp, sp, #8
   22f68:	mov	r4, r1
   22f6c:	ldr	r5, [r1]
   22f70:	cmp	r0, #0
   22f74:	beq	22f8c <__assert_fail@plt+0x11818>
   22f78:	mov	r1, #1
   22f7c:	add	r1, r1, r5, lsr #1
   22f80:	adds	r5, r5, r1
   22f84:	bcc	22fa4 <__assert_fail@plt+0x11830>
   22f88:	bl	11870 <__assert_fail@plt+0xfc>
   22f8c:	cmp	r5, #0
   22f90:	bne	22fa4 <__assert_fail@plt+0x11830>
   22f94:	mov	r1, #64	; 0x40
   22f98:	udiv	r5, r1, r2
   22f9c:	cmp	r2, #64	; 0x40
   22fa0:	addhi	r5, r5, #1
   22fa4:	mov	r1, r5
   22fa8:	bl	22e54 <__assert_fail@plt+0x116e0>
   22fac:	str	r5, [r4]
   22fb0:	pop	{r4, r5, fp, pc}
   22fb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22fb8:	add	fp, sp, #24
   22fbc:	mov	r8, r1
   22fc0:	ldr	r6, [r1]
   22fc4:	add	r1, r6, r6, asr #1
   22fc8:	cmp	r1, r6
   22fcc:	mvnvs	r1, #-2147483648	; 0x80000000
   22fd0:	cmp	r1, r3
   22fd4:	mov	r5, r1
   22fd8:	movgt	r5, r3
   22fdc:	cmn	r3, #1
   22fe0:	movle	r5, r1
   22fe4:	ldr	r4, [fp, #8]
   22fe8:	cmn	r4, #1
   22fec:	ble	23014 <__assert_fail@plt+0x118a0>
   22ff0:	cmp	r4, #0
   22ff4:	beq	23068 <__assert_fail@plt+0x118f4>
   22ff8:	cmn	r5, #1
   22ffc:	ble	2303c <__assert_fail@plt+0x118c8>
   23000:	mvn	r7, #-2147483648	; 0x80000000
   23004:	udiv	r1, r7, r4
   23008:	cmp	r1, r5
   2300c:	bge	23068 <__assert_fail@plt+0x118f4>
   23010:	b	23078 <__assert_fail@plt+0x11904>
   23014:	cmn	r5, #1
   23018:	ble	23058 <__assert_fail@plt+0x118e4>
   2301c:	cmn	r4, #1
   23020:	beq	23068 <__assert_fail@plt+0x118f4>
   23024:	mov	r1, #-2147483648	; 0x80000000
   23028:	sdiv	r1, r1, r4
   2302c:	mvn	r7, #-2147483648	; 0x80000000
   23030:	cmp	r1, r5
   23034:	bge	23068 <__assert_fail@plt+0x118f4>
   23038:	b	23078 <__assert_fail@plt+0x11904>
   2303c:	beq	23068 <__assert_fail@plt+0x118f4>
   23040:	mov	r1, #-2147483648	; 0x80000000
   23044:	sdiv	r1, r1, r5
   23048:	mvn	r7, #-2147483648	; 0x80000000
   2304c:	cmp	r1, r4
   23050:	bge	23068 <__assert_fail@plt+0x118f4>
   23054:	b	23078 <__assert_fail@plt+0x11904>
   23058:	mvn	r7, #-2147483648	; 0x80000000
   2305c:	sdiv	r1, r7, r4
   23060:	cmp	r5, r1
   23064:	blt	23078 <__assert_fail@plt+0x11904>
   23068:	mul	r1, r5, r4
   2306c:	mov	r7, #64	; 0x40
   23070:	cmp	r1, #63	; 0x3f
   23074:	bgt	23080 <__assert_fail@plt+0x1190c>
   23078:	sdiv	r5, r7, r4
   2307c:	mul	r1, r5, r4
   23080:	cmp	r0, #0
   23084:	moveq	r7, #0
   23088:	streq	r7, [r8]
   2308c:	sub	r7, r5, r6
   23090:	cmp	r7, r2
   23094:	bge	23140 <__assert_fail@plt+0x119cc>
   23098:	add	r5, r6, r2
   2309c:	mov	r1, #0
   230a0:	cmp	r5, r3
   230a4:	mov	r2, #0
   230a8:	movwgt	r2, #1
   230ac:	cmn	r3, #1
   230b0:	movwgt	r1, #1
   230b4:	cmp	r5, r6
   230b8:	bvs	23128 <__assert_fail@plt+0x119b4>
   230bc:	ands	r1, r1, r2
   230c0:	bne	23128 <__assert_fail@plt+0x119b4>
   230c4:	cmn	r4, #1
   230c8:	ble	230f0 <__assert_fail@plt+0x1197c>
   230cc:	cmp	r4, #0
   230d0:	beq	2313c <__assert_fail@plt+0x119c8>
   230d4:	cmn	r5, #1
   230d8:	ble	23114 <__assert_fail@plt+0x119a0>
   230dc:	mvn	r1, #-2147483648	; 0x80000000
   230e0:	udiv	r1, r1, r4
   230e4:	cmp	r1, r5
   230e8:	bge	2313c <__assert_fail@plt+0x119c8>
   230ec:	b	23128 <__assert_fail@plt+0x119b4>
   230f0:	cmn	r5, #1
   230f4:	ble	2312c <__assert_fail@plt+0x119b8>
   230f8:	cmn	r4, #1
   230fc:	beq	2313c <__assert_fail@plt+0x119c8>
   23100:	mov	r1, #-2147483648	; 0x80000000
   23104:	sdiv	r1, r1, r4
   23108:	cmp	r1, r5
   2310c:	bge	2313c <__assert_fail@plt+0x119c8>
   23110:	b	23128 <__assert_fail@plt+0x119b4>
   23114:	beq	2313c <__assert_fail@plt+0x119c8>
   23118:	mov	r1, #-2147483648	; 0x80000000
   2311c:	sdiv	r1, r1, r5
   23120:	cmp	r1, r4
   23124:	bge	2313c <__assert_fail@plt+0x119c8>
   23128:	bl	11870 <__assert_fail@plt+0xfc>
   2312c:	mvn	r1, #-2147483648	; 0x80000000
   23130:	sdiv	r1, r1, r4
   23134:	cmp	r5, r1
   23138:	blt	23128 <__assert_fail@plt+0x119b4>
   2313c:	mul	r1, r5, r4
   23140:	bl	22ed0 <__assert_fail@plt+0x1175c>
   23144:	str	r5, [r8]
   23148:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2314c:	mov	r1, #1
   23150:	b	23154 <__assert_fail@plt+0x119e0>
   23154:	push	{fp, lr}
   23158:	mov	fp, sp
   2315c:	bl	23e10 <__assert_fail@plt+0x1269c>
   23160:	bl	22ea4 <__assert_fail@plt+0x11730>
   23164:	pop	{fp, pc}
   23168:	mov	r1, #1
   2316c:	b	23170 <__assert_fail@plt+0x119fc>
   23170:	push	{fp, lr}
   23174:	mov	fp, sp
   23178:	bl	24564 <__assert_fail@plt+0x12df0>
   2317c:	bl	22ea4 <__assert_fail@plt+0x11730>
   23180:	pop	{fp, pc}
   23184:	push	{r4, r5, r6, sl, fp, lr}
   23188:	add	fp, sp, #16
   2318c:	mov	r4, r1
   23190:	mov	r5, r0
   23194:	mov	r0, r1
   23198:	bl	22e90 <__assert_fail@plt+0x1171c>
   2319c:	mov	r6, r0
   231a0:	mov	r1, r5
   231a4:	mov	r2, r4
   231a8:	bl	1148c <memcpy@plt>
   231ac:	mov	r0, r6
   231b0:	pop	{r4, r5, r6, sl, fp, pc}
   231b4:	push	{r4, r5, r6, sl, fp, lr}
   231b8:	add	fp, sp, #16
   231bc:	mov	r4, r1
   231c0:	mov	r5, r0
   231c4:	mov	r0, r1
   231c8:	bl	22eb8 <__assert_fail@plt+0x11744>
   231cc:	mov	r6, r0
   231d0:	mov	r1, r5
   231d4:	mov	r2, r4
   231d8:	bl	1148c <memcpy@plt>
   231dc:	mov	r0, r6
   231e0:	pop	{r4, r5, r6, sl, fp, pc}
   231e4:	push	{r4, r5, r6, sl, fp, lr}
   231e8:	add	fp, sp, #16
   231ec:	mov	r4, r1
   231f0:	mov	r5, r0
   231f4:	add	r0, r1, #1
   231f8:	bl	22eb8 <__assert_fail@plt+0x11744>
   231fc:	mov	r6, r0
   23200:	mov	r0, #0
   23204:	strb	r0, [r6, r4]
   23208:	mov	r0, r6
   2320c:	mov	r1, r5
   23210:	mov	r2, r4
   23214:	bl	1148c <memcpy@plt>
   23218:	mov	r0, r6
   2321c:	pop	{r4, r5, r6, sl, fp, pc}
   23220:	push	{r4, sl, fp, lr}
   23224:	add	fp, sp, #8
   23228:	mov	r4, r0
   2322c:	bl	11624 <strlen@plt>
   23230:	add	r1, r0, #1
   23234:	mov	r0, r4
   23238:	pop	{r4, sl, fp, lr}
   2323c:	b	23184 <__assert_fail@plt+0x11a10>
   23240:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23244:	add	fp, sp, #24
   23248:	sub	sp, sp, #16
   2324c:	mov	r5, r3
   23250:	mov	r6, r2
   23254:	mov	r2, r1
   23258:	mov	r8, r0
   2325c:	ldr	r0, [fp, #16]
   23260:	str	r0, [sp]
   23264:	add	r3, sp, #8
   23268:	mov	r0, r8
   2326c:	mov	r1, #0
   23270:	bl	2334c <__assert_fail@plt+0x11bd8>
   23274:	cmp	r0, #0
   23278:	bne	23328 <__assert_fail@plt+0x11bb4>
   2327c:	ldr	r7, [sp, #8]
   23280:	ldr	r4, [sp, #12]
   23284:	subs	r0, r7, r6
   23288:	sbcs	r0, r4, r5
   2328c:	blt	232b0 <__assert_fail@plt+0x11b3c>
   23290:	ldr	r0, [fp, #12]
   23294:	ldr	r1, [fp, #8]
   23298:	subs	r1, r1, r7
   2329c:	sbcs	r0, r0, r4
   232a0:	ldrge	r0, [sp, #8]
   232a4:	ldrge	r1, [sp, #12]
   232a8:	subge	sp, fp, #24
   232ac:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   232b0:	subs	r0, r7, #1073741824	; 0x40000000
   232b4:	sbcs	r0, r4, #0
   232b8:	blt	232c8 <__assert_fail@plt+0x11b54>
   232bc:	bl	1163c <__errno_location@plt>
   232c0:	mov	r1, #75	; 0x4b
   232c4:	b	232e4 <__assert_fail@plt+0x11b70>
   232c8:	bl	1163c <__errno_location@plt>
   232cc:	mvn	r1, #0
   232d0:	mvn	r2, #1073741824	; 0x40000000
   232d4:	subs	r2, r2, r7
   232d8:	sbcs	r1, r1, r4
   232dc:	movlt	r1, #34	; 0x22
   232e0:	movge	r1, #75	; 0x4b
   232e4:	str	r1, [r0]
   232e8:	ldr	r5, [fp, #24]
   232ec:	ldr	r6, [fp, #20]
   232f0:	bl	1163c <__errno_location@plt>
   232f4:	ldr	r4, [r0]
   232f8:	mov	r0, r8
   232fc:	bl	158c8 <__assert_fail@plt+0x4154>
   23300:	str	r0, [sp]
   23304:	subs	r1, r4, #22
   23308:	movne	r1, r4
   2330c:	cmp	r5, #0
   23310:	movweq	r5, #1
   23314:	movw	r2, #22075	; 0x563b
   23318:	movt	r2, #2
   2331c:	mov	r0, r5
   23320:	mov	r3, r6
   23324:	bl	115ac <error@plt>
   23328:	cmp	r0, #1
   2332c:	beq	232bc <__assert_fail@plt+0x11b48>
   23330:	cmp	r0, #3
   23334:	bne	232e8 <__assert_fail@plt+0x11b74>
   23338:	bl	1163c <__errno_location@plt>
   2333c:	mov	r1, #0
   23340:	b	232e4 <__assert_fail@plt+0x11b70>
   23344:	mov	r1, #10
   23348:	b	23240 <__assert_fail@plt+0x11acc>
   2334c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23350:	add	fp, sp, #28
   23354:	sub	sp, sp, #20
   23358:	cmp	r2, #37	; 0x25
   2335c:	bcs	23770 <__assert_fail@plt+0x11ffc>
   23360:	mov	r9, r3
   23364:	mov	r7, r2
   23368:	mov	r6, r1
   2336c:	mov	r4, r0
   23370:	ldr	sl, [fp, #8]
   23374:	bl	1163c <__errno_location@plt>
   23378:	mov	r5, r0
   2337c:	mov	r0, #0
   23380:	str	r0, [r5]
   23384:	add	r8, sp, #16
   23388:	cmp	r6, #0
   2338c:	movne	r8, r6
   23390:	mov	r0, r4
   23394:	mov	r1, r8
   23398:	mov	r2, r7
   2339c:	bl	116b4 <strtoimax@plt>
   233a0:	str	r1, [sp, #12]
   233a4:	str	r0, [sp, #8]
   233a8:	ldr	r7, [r8]
   233ac:	cmp	r7, r4
   233b0:	beq	233dc <__assert_fail@plt+0x11c68>
   233b4:	ldr	r0, [r5]
   233b8:	cmp	r0, #0
   233bc:	beq	23414 <__assert_fail@plt+0x11ca0>
   233c0:	mov	r5, #4
   233c4:	cmp	r0, #34	; 0x22
   233c8:	bne	23764 <__assert_fail@plt+0x11ff0>
   233cc:	mov	r5, #1
   233d0:	cmp	sl, #0
   233d4:	bne	23420 <__assert_fail@plt+0x11cac>
   233d8:	b	23758 <__assert_fail@plt+0x11fe4>
   233dc:	mov	r5, #4
   233e0:	cmp	sl, #0
   233e4:	ldrbne	r1, [r7]
   233e8:	cmpne	r1, #0
   233ec:	beq	23764 <__assert_fail@plt+0x11ff0>
   233f0:	mov	r0, sl
   233f4:	bl	11630 <strchr@plt>
   233f8:	cmp	r0, #0
   233fc:	beq	23764 <__assert_fail@plt+0x11ff0>
   23400:	mov	r5, #0
   23404:	str	r5, [sp, #12]
   23408:	mov	r0, #1
   2340c:	str	r0, [sp, #8]
   23410:	b	23420 <__assert_fail@plt+0x11cac>
   23414:	mov	r5, r0
   23418:	cmp	sl, #0
   2341c:	beq	23758 <__assert_fail@plt+0x11fe4>
   23420:	ldrb	r4, [r7]
   23424:	cmp	r4, #0
   23428:	beq	23758 <__assert_fail@plt+0x11fe4>
   2342c:	mov	r0, sl
   23430:	mov	r1, r4
   23434:	bl	11630 <strchr@plt>
   23438:	cmp	r0, #0
   2343c:	beq	23654 <__assert_fail@plt+0x11ee0>
   23440:	sub	r0, r4, #69	; 0x45
   23444:	mov	r1, #1
   23448:	str	r1, [sp, #4]
   2344c:	mov	r6, #1024	; 0x400
   23450:	cmp	r0, #47	; 0x2f
   23454:	bhi	23550 <__assert_fail@plt+0x11ddc>
   23458:	add	r1, pc, #0
   2345c:	ldr	pc, [r1, r0, lsl #2]
   23460:	andeq	r3, r2, r0, lsr #10
   23464:	andeq	r3, r2, r0, asr r5
   23468:	andeq	r3, r2, r0, lsr #10
   2346c:	andeq	r3, r2, r0, asr r5
   23470:	andeq	r3, r2, r0, asr r5
   23474:	andeq	r3, r2, r0, asr r5
   23478:	andeq	r3, r2, r0, lsr #10
   2347c:	andeq	r3, r2, r0, asr r5
   23480:	andeq	r3, r2, r0, lsr #10
   23484:	andeq	r3, r2, r0, asr r5
   23488:	andeq	r3, r2, r0, asr r5
   2348c:	andeq	r3, r2, r0, lsr #10
   23490:	andeq	r3, r2, r0, asr r5
   23494:	andeq	r3, r2, r0, asr r5
   23498:	andeq	r3, r2, r0, asr r5
   2349c:	andeq	r3, r2, r0, lsr #10
   234a0:	andeq	r3, r2, r0, asr r5
   234a4:	andeq	r3, r2, r0, asr r5
   234a8:	andeq	r3, r2, r0, asr r5
   234ac:	andeq	r3, r2, r0, asr r5
   234b0:	andeq	r3, r2, r0, lsr #10
   234b4:	andeq	r3, r2, r0, lsr #10
   234b8:	andeq	r3, r2, r0, asr r5
   234bc:	andeq	r3, r2, r0, asr r5
   234c0:	andeq	r3, r2, r0, asr r5
   234c4:	andeq	r3, r2, r0, asr r5
   234c8:	andeq	r3, r2, r0, asr r5
   234cc:	andeq	r3, r2, r0, asr r5
   234d0:	andeq	r3, r2, r0, asr r5
   234d4:	andeq	r3, r2, r0, asr r5
   234d8:	andeq	r3, r2, r0, asr r5
   234dc:	andeq	r3, r2, r0, asr r5
   234e0:	andeq	r3, r2, r0, asr r5
   234e4:	andeq	r3, r2, r0, asr r5
   234e8:	andeq	r3, r2, r0, lsr #10
   234ec:	andeq	r3, r2, r0, asr r5
   234f0:	andeq	r3, r2, r0, asr r5
   234f4:	andeq	r3, r2, r0, asr r5
   234f8:	andeq	r3, r2, r0, lsr #10
   234fc:	andeq	r3, r2, r0, asr r5
   23500:	andeq	r3, r2, r0, lsr #10
   23504:	andeq	r3, r2, r0, asr r5
   23508:	andeq	r3, r2, r0, asr r5
   2350c:	andeq	r3, r2, r0, asr r5
   23510:	andeq	r3, r2, r0, asr r5
   23514:	andeq	r3, r2, r0, asr r5
   23518:	andeq	r3, r2, r0, asr r5
   2351c:	andeq	r3, r2, r0, lsr #10
   23520:	mov	r0, sl
   23524:	mov	r1, #48	; 0x30
   23528:	bl	11630 <strchr@plt>
   2352c:	cmp	r0, #0
   23530:	beq	23550 <__assert_fail@plt+0x11ddc>
   23534:	ldrb	r0, [r7, #1]
   23538:	cmp	r0, #66	; 0x42
   2353c:	cmpne	r0, #68	; 0x44
   23540:	bne	23668 <__assert_fail@plt+0x11ef4>
   23544:	mov	r0, #2
   23548:	str	r0, [sp, #4]
   2354c:	mov	r6, #1000	; 0x3e8
   23550:	sub	r1, r4, #66	; 0x42
   23554:	cmp	r1, #53	; 0x35
   23558:	bhi	23654 <__assert_fail@plt+0x11ee0>
   2355c:	mov	r0, #0
   23560:	add	r2, pc, #0
   23564:	ldr	pc, [r2, r1, lsl #2]
   23568:	ldrdeq	r3, [r2], -r8
   2356c:	andeq	r3, r2, r4, asr r6
   23570:	andeq	r3, r2, r4, asr r6
   23574:	andeq	r3, r2, r4, ror #13
   23578:	andeq	r3, r2, r4, asr r6
   2357c:	andeq	r3, r2, r0, asr #12
   23580:	andeq	r3, r2, r4, asr r6
   23584:	andeq	r3, r2, r4, asr r6
   23588:	andeq	r3, r2, r4, asr r6
   2358c:	andeq	r3, r2, r8, lsl #13
   23590:	andeq	r3, r2, r4, asr r6
   23594:	muleq	r2, ip, r6
   23598:	andeq	r3, r2, r4, asr r6
   2359c:	andeq	r3, r2, r4, asr r6
   235a0:	strdeq	r3, [r2], -r8
   235a4:	andeq	r3, r2, r4, asr r6
   235a8:	andeq	r3, r2, r4, asr r6
   235ac:	andeq	r3, r2, r4, asr r6
   235b0:			; <UNDEFINED> instruction: 0x000236b0
   235b4:	andeq	r3, r2, r4, asr r6
   235b8:	andeq	r3, r2, r4, asr r6
   235bc:	andeq	r3, r2, r4, asr r6
   235c0:	andeq	r3, r2, r4, asr r6
   235c4:	andeq	r3, r2, ip, lsl #14
   235c8:	andeq	r3, r2, r4, asr #13
   235cc:	andeq	r3, r2, r4, asr r6
   235d0:	andeq	r3, r2, r4, asr r6
   235d4:	andeq	r3, r2, r4, asr r6
   235d8:	andeq	r3, r2, r4, asr r6
   235dc:	andeq	r3, r2, r4, asr r6
   235e0:	andeq	r3, r2, r4, asr r6
   235e4:	andeq	r3, r2, r4, asr r6
   235e8:	andeq	r3, r2, r0, lsr #14
   235ec:	andeq	r3, r2, r8, lsr r7
   235f0:	andeq	r3, r2, r4, asr r6
   235f4:	andeq	r3, r2, r4, asr r6
   235f8:	andeq	r3, r2, r4, asr r6
   235fc:	andeq	r3, r2, r0, asr #12
   23600:	andeq	r3, r2, r4, asr r6
   23604:	andeq	r3, r2, r4, asr r6
   23608:	andeq	r3, r2, r4, asr r6
   2360c:	andeq	r3, r2, r8, lsl #13
   23610:	andeq	r3, r2, r4, asr r6
   23614:	muleq	r2, ip, r6
   23618:	andeq	r3, r2, r4, asr r6
   2361c:	andeq	r3, r2, r4, asr r6
   23620:	andeq	r3, r2, r4, asr r6
   23624:	andeq	r3, r2, r4, asr r6
   23628:	andeq	r3, r2, r4, asr r6
   2362c:	andeq	r3, r2, r4, asr r6
   23630:			; <UNDEFINED> instruction: 0x000236b0
   23634:	andeq	r3, r2, r4, asr r6
   23638:	andeq	r3, r2, r4, asr r6
   2363c:	andeq	r3, r2, ip, lsr #14
   23640:	add	r0, sp, #8
   23644:	mov	r1, r6
   23648:	mov	r2, #3
   2364c:	bl	23894 <__assert_fail@plt+0x12120>
   23650:	b	23738 <__assert_fail@plt+0x11fc4>
   23654:	ldr	r0, [sp, #8]
   23658:	ldr	r1, [sp, #12]
   2365c:	strd	r0, [r9]
   23660:	orr	r5, r5, #2
   23664:	b	23764 <__assert_fail@plt+0x11ff0>
   23668:	cmp	r0, #105	; 0x69
   2366c:	bne	23550 <__assert_fail@plt+0x11ddc>
   23670:	ldrb	r0, [r7, #2]
   23674:	mov	r1, #1
   23678:	cmp	r0, #66	; 0x42
   2367c:	movweq	r1, #3
   23680:	str	r1, [sp, #4]
   23684:	b	23550 <__assert_fail@plt+0x11ddc>
   23688:	add	r0, sp, #8
   2368c:	mov	r1, r6
   23690:	mov	r2, #1
   23694:	bl	23894 <__assert_fail@plt+0x12120>
   23698:	b	23738 <__assert_fail@plt+0x11fc4>
   2369c:	add	r0, sp, #8
   236a0:	mov	r1, r6
   236a4:	mov	r2, #2
   236a8:	bl	23894 <__assert_fail@plt+0x12120>
   236ac:	b	23738 <__assert_fail@plt+0x11fc4>
   236b0:	add	r0, sp, #8
   236b4:	mov	r1, r6
   236b8:	mov	r2, #4
   236bc:	bl	23894 <__assert_fail@plt+0x12120>
   236c0:	b	23738 <__assert_fail@plt+0x11fc4>
   236c4:	add	r0, sp, #8
   236c8:	mov	r1, r6
   236cc:	mov	r2, #7
   236d0:	bl	23894 <__assert_fail@plt+0x12120>
   236d4:	b	23738 <__assert_fail@plt+0x11fc4>
   236d8:	add	r0, sp, #8
   236dc:	mov	r1, #1024	; 0x400
   236e0:	b	23734 <__assert_fail@plt+0x11fc0>
   236e4:	add	r0, sp, #8
   236e8:	mov	r1, r6
   236ec:	mov	r2, #6
   236f0:	bl	23894 <__assert_fail@plt+0x12120>
   236f4:	b	23738 <__assert_fail@plt+0x11fc4>
   236f8:	add	r0, sp, #8
   236fc:	mov	r1, r6
   23700:	mov	r2, #5
   23704:	bl	23894 <__assert_fail@plt+0x12120>
   23708:	b	23738 <__assert_fail@plt+0x11fc4>
   2370c:	add	r0, sp, #8
   23710:	mov	r1, r6
   23714:	mov	r2, #8
   23718:	bl	23894 <__assert_fail@plt+0x12120>
   2371c:	b	23738 <__assert_fail@plt+0x11fc4>
   23720:	add	r0, sp, #8
   23724:	mov	r1, #512	; 0x200
   23728:	b	23734 <__assert_fail@plt+0x11fc0>
   2372c:	add	r0, sp, #8
   23730:	mov	r1, #2
   23734:	bl	23790 <__assert_fail@plt+0x1201c>
   23738:	ldr	r1, [r8]
   2373c:	ldr	r3, [sp, #4]
   23740:	add	r2, r1, r3
   23744:	str	r2, [r8]
   23748:	ldrb	r1, [r1, r3]
   2374c:	orr	r5, r0, r5
   23750:	cmp	r1, #0
   23754:	orrne	r5, r5, #2
   23758:	ldr	r0, [sp, #8]
   2375c:	ldr	r1, [sp, #12]
   23760:	strd	r0, [r9]
   23764:	mov	r0, r5
   23768:	sub	sp, fp, #28
   2376c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23770:	movw	r0, #23689	; 0x5c89
   23774:	movt	r0, #2
   23778:	movw	r1, #23727	; 0x5caf
   2377c:	movt	r1, #2
   23780:	movw	r3, #23743	; 0x5cbf
   23784:	movt	r3, #2
   23788:	mov	r2, #85	; 0x55
   2378c:	bl	11774 <__assert_fail@plt>
   23790:	push	{r4, r5, r6, r7, fp, lr}
   23794:	add	fp, sp, #16
   23798:	mov	r5, r1
   2379c:	mov	r4, r0
   237a0:	cmn	r1, #1
   237a4:	ble	237cc <__assert_fail@plt+0x12058>
   237a8:	cmp	r5, #0
   237ac:	beq	23830 <__assert_fail@plt+0x120bc>
   237b0:	ldrd	r6, [r4]
   237b4:	cmn	r7, #1
   237b8:	ble	23804 <__assert_fail@plt+0x12090>
   237bc:	asr	r3, r5, #31
   237c0:	mvn	r0, #0
   237c4:	mvn	r1, #-2147483648	; 0x80000000
   237c8:	b	237ec <__assert_fail@plt+0x12078>
   237cc:	ldrd	r6, [r4]
   237d0:	cmn	r7, #1
   237d4:	ble	2384c <__assert_fail@plt+0x120d8>
   237d8:	cmn	r5, #1
   237dc:	beq	23830 <__assert_fail@plt+0x120bc>
   237e0:	asr	r3, r5, #31
   237e4:	mov	r0, #0
   237e8:	mov	r1, #-2147483648	; 0x80000000
   237ec:	mov	r2, r5
   237f0:	bl	24768 <__assert_fail@plt+0x12ff4>
   237f4:	subs	r0, r0, r6
   237f8:	sbcs	r0, r1, r7
   237fc:	bge	23830 <__assert_fail@plt+0x120bc>
   23800:	b	2386c <__assert_fail@plt+0x120f8>
   23804:	and	r0, r6, r7
   23808:	cmn	r0, #1
   2380c:	beq	23830 <__assert_fail@plt+0x120bc>
   23810:	mov	r0, #0
   23814:	mov	r1, #-2147483648	; 0x80000000
   23818:	mov	r2, r6
   2381c:	mov	r3, r7
   23820:	bl	24768 <__assert_fail@plt+0x12ff4>
   23824:	subs	r0, r0, r5
   23828:	sbcs	r0, r1, r5, asr #31
   2382c:	blt	2386c <__assert_fail@plt+0x120f8>
   23830:	ldrd	r0, [r4]
   23834:	umull	r2, r3, r0, r5
   23838:	asr	r7, r5, #31
   2383c:	mla	r0, r0, r7, r3
   23840:	mla	r1, r1, r5, r0
   23844:	mov	r0, #0
   23848:	b	23888 <__assert_fail@plt+0x12114>
   2384c:	asr	r3, r5, #31
   23850:	mvn	r0, #0
   23854:	mvn	r1, #-2147483648	; 0x80000000
   23858:	mov	r2, r5
   2385c:	bl	24768 <__assert_fail@plt+0x12ff4>
   23860:	subs	r0, r6, r0
   23864:	sbcs	r0, r7, r1
   23868:	bge	23830 <__assert_fail@plt+0x120bc>
   2386c:	ldr	r0, [r4, #4]
   23870:	mvn	r1, #-2147483648	; 0x80000000
   23874:	cmp	r0, #0
   23878:	movlt	r1, #-2147483648	; 0x80000000
   2387c:	mvn	r2, #0
   23880:	movwlt	r2, #0
   23884:	mov	r0, #1
   23888:	str	r2, [r4]
   2388c:	str	r1, [r4, #4]
   23890:	pop	{r4, r5, r6, r7, fp, pc}
   23894:	push	{r4, r5, r6, r7, fp, lr}
   23898:	add	fp, sp, #16
   2389c:	cmp	r2, #0
   238a0:	moveq	r6, #0
   238a4:	moveq	r0, r6
   238a8:	popeq	{r4, r5, r6, r7, fp, pc}
   238ac:	mov	r4, r2
   238b0:	mov	r5, r1
   238b4:	mov	r7, r0
   238b8:	mov	r6, #0
   238bc:	mov	r0, r7
   238c0:	mov	r1, r5
   238c4:	bl	23790 <__assert_fail@plt+0x1201c>
   238c8:	orr	r6, r0, r6
   238cc:	subs	r4, r4, #1
   238d0:	bne	238bc <__assert_fail@plt+0x12148>
   238d4:	mov	r0, r6
   238d8:	pop	{r4, r5, r6, r7, fp, pc}
   238dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   238e0:	add	fp, sp, #28
   238e4:	sub	sp, sp, #20
   238e8:	cmp	r2, #37	; 0x25
   238ec:	bcs	23d1c <__assert_fail@plt+0x125a8>
   238f0:	mov	r5, r2
   238f4:	mov	r6, r1
   238f8:	mov	r4, r0
   238fc:	str	r3, [sp, #4]
   23900:	ldr	sl, [fp, #8]
   23904:	bl	1163c <__errno_location@plt>
   23908:	mov	r7, r0
   2390c:	mov	r0, #0
   23910:	str	r0, [r7]
   23914:	bl	1160c <__ctype_b_loc@plt>
   23918:	ldr	r1, [r0]
   2391c:	mov	r2, r4
   23920:	ldrb	r0, [r2], #1
   23924:	add	r3, r1, r0, lsl #1
   23928:	ldrb	r3, [r3, #1]
   2392c:	tst	r3, #32
   23930:	bne	23920 <__assert_fail@plt+0x121ac>
   23934:	add	r9, sp, #16
   23938:	cmp	r6, #0
   2393c:	movne	r9, r6
   23940:	mov	r8, #4
   23944:	cmp	r0, #45	; 0x2d
   23948:	beq	23d10 <__assert_fail@plt+0x1259c>
   2394c:	mov	r0, r4
   23950:	mov	r1, r9
   23954:	mov	r2, r5
   23958:	bl	1169c <strtoumax@plt>
   2395c:	str	r1, [sp, #12]
   23960:	str	r0, [sp, #8]
   23964:	ldr	r6, [r9]
   23968:	cmp	r6, r4
   2396c:	beq	23994 <__assert_fail@plt+0x12220>
   23970:	ldr	r0, [r7]
   23974:	cmp	r0, #0
   23978:	beq	239c8 <__assert_fail@plt+0x12254>
   2397c:	cmp	r0, #34	; 0x22
   23980:	bne	23d10 <__assert_fail@plt+0x1259c>
   23984:	mov	r8, #1
   23988:	cmp	sl, #0
   2398c:	bne	239d4 <__assert_fail@plt+0x12260>
   23990:	b	23d00 <__assert_fail@plt+0x1258c>
   23994:	cmp	sl, #0
   23998:	ldrbne	r1, [r6]
   2399c:	cmpne	r1, #0
   239a0:	beq	23d10 <__assert_fail@plt+0x1259c>
   239a4:	mov	r0, sl
   239a8:	bl	11630 <strchr@plt>
   239ac:	cmp	r0, #0
   239b0:	beq	23d10 <__assert_fail@plt+0x1259c>
   239b4:	mov	r8, #0
   239b8:	str	r8, [sp, #12]
   239bc:	mov	r0, #1
   239c0:	str	r0, [sp, #8]
   239c4:	b	239d4 <__assert_fail@plt+0x12260>
   239c8:	mov	r8, r0
   239cc:	cmp	sl, #0
   239d0:	beq	23d00 <__assert_fail@plt+0x1258c>
   239d4:	ldrb	r4, [r6]
   239d8:	cmp	r4, #0
   239dc:	beq	23d00 <__assert_fail@plt+0x1258c>
   239e0:	mov	r0, sl
   239e4:	mov	r1, r4
   239e8:	bl	11630 <strchr@plt>
   239ec:	cmp	r0, #0
   239f0:	beq	23c00 <__assert_fail@plt+0x1248c>
   239f4:	sub	r0, r4, #69	; 0x45
   239f8:	mov	r7, #1
   239fc:	mov	r5, #1024	; 0x400
   23a00:	cmp	r0, #47	; 0x2f
   23a04:	bhi	23afc <__assert_fail@plt+0x12388>
   23a08:	add	r1, pc, #0
   23a0c:	ldr	pc, [r1, r0, lsl #2]
   23a10:	ldrdeq	r3, [r2], -r0
   23a14:	strdeq	r3, [r2], -ip
   23a18:	ldrdeq	r3, [r2], -r0
   23a1c:	strdeq	r3, [r2], -ip
   23a20:	strdeq	r3, [r2], -ip
   23a24:	strdeq	r3, [r2], -ip
   23a28:	ldrdeq	r3, [r2], -r0
   23a2c:	strdeq	r3, [r2], -ip
   23a30:	ldrdeq	r3, [r2], -r0
   23a34:	strdeq	r3, [r2], -ip
   23a38:	strdeq	r3, [r2], -ip
   23a3c:	ldrdeq	r3, [r2], -r0
   23a40:	strdeq	r3, [r2], -ip
   23a44:	strdeq	r3, [r2], -ip
   23a48:	strdeq	r3, [r2], -ip
   23a4c:	ldrdeq	r3, [r2], -r0
   23a50:	strdeq	r3, [r2], -ip
   23a54:	strdeq	r3, [r2], -ip
   23a58:	strdeq	r3, [r2], -ip
   23a5c:	strdeq	r3, [r2], -ip
   23a60:	ldrdeq	r3, [r2], -r0
   23a64:	ldrdeq	r3, [r2], -r0
   23a68:	strdeq	r3, [r2], -ip
   23a6c:	strdeq	r3, [r2], -ip
   23a70:	strdeq	r3, [r2], -ip
   23a74:	strdeq	r3, [r2], -ip
   23a78:	strdeq	r3, [r2], -ip
   23a7c:	strdeq	r3, [r2], -ip
   23a80:	strdeq	r3, [r2], -ip
   23a84:	strdeq	r3, [r2], -ip
   23a88:	strdeq	r3, [r2], -ip
   23a8c:	strdeq	r3, [r2], -ip
   23a90:	strdeq	r3, [r2], -ip
   23a94:	strdeq	r3, [r2], -ip
   23a98:	ldrdeq	r3, [r2], -r0
   23a9c:	strdeq	r3, [r2], -ip
   23aa0:	strdeq	r3, [r2], -ip
   23aa4:	strdeq	r3, [r2], -ip
   23aa8:	ldrdeq	r3, [r2], -r0
   23aac:	strdeq	r3, [r2], -ip
   23ab0:	ldrdeq	r3, [r2], -r0
   23ab4:	strdeq	r3, [r2], -ip
   23ab8:	strdeq	r3, [r2], -ip
   23abc:	strdeq	r3, [r2], -ip
   23ac0:	strdeq	r3, [r2], -ip
   23ac4:	strdeq	r3, [r2], -ip
   23ac8:	strdeq	r3, [r2], -ip
   23acc:	ldrdeq	r3, [r2], -r0
   23ad0:	mov	r0, sl
   23ad4:	mov	r1, #48	; 0x30
   23ad8:	bl	11630 <strchr@plt>
   23adc:	cmp	r0, #0
   23ae0:	beq	23afc <__assert_fail@plt+0x12388>
   23ae4:	ldrb	r0, [r6, #1]
   23ae8:	cmp	r0, #66	; 0x42
   23aec:	cmpne	r0, #68	; 0x44
   23af0:	bne	23c18 <__assert_fail@plt+0x124a4>
   23af4:	mov	r7, #2
   23af8:	mov	r5, #1000	; 0x3e8
   23afc:	sub	r1, r4, #66	; 0x42
   23b00:	cmp	r1, #53	; 0x35
   23b04:	bhi	23c00 <__assert_fail@plt+0x1248c>
   23b08:	mov	r0, #0
   23b0c:	add	r2, pc, #0
   23b10:	ldr	pc, [r2, r1, lsl #2]
   23b14:	andeq	r3, r2, r4, lsl #25
   23b18:	andeq	r3, r2, r0, lsl #24
   23b1c:	andeq	r3, r2, r0, lsl #24
   23b20:	muleq	r2, r0, ip
   23b24:	andeq	r3, r2, r0, lsl #24
   23b28:	andeq	r3, r2, ip, ror #23
   23b2c:	andeq	r3, r2, r0, lsl #24
   23b30:	andeq	r3, r2, r0, lsl #24
   23b34:	andeq	r3, r2, r0, lsl #24
   23b38:	andeq	r3, r2, r4, lsr ip
   23b3c:	andeq	r3, r2, r0, lsl #24
   23b40:	andeq	r3, r2, r8, asr #24
   23b44:	andeq	r3, r2, r0, lsl #24
   23b48:	andeq	r3, r2, r0, lsl #24
   23b4c:	andeq	r3, r2, r4, lsr #25
   23b50:	andeq	r3, r2, r0, lsl #24
   23b54:	andeq	r3, r2, r0, lsl #24
   23b58:	andeq	r3, r2, r0, lsl #24
   23b5c:	andeq	r3, r2, ip, asr ip
   23b60:	andeq	r3, r2, r0, lsl #24
   23b64:	andeq	r3, r2, r0, lsl #24
   23b68:	andeq	r3, r2, r0, lsl #24
   23b6c:	andeq	r3, r2, r0, lsl #24
   23b70:			; <UNDEFINED> instruction: 0x00023cb8
   23b74:	andeq	r3, r2, r0, ror ip
   23b78:	andeq	r3, r2, r0, lsl #24
   23b7c:	andeq	r3, r2, r0, lsl #24
   23b80:	andeq	r3, r2, r0, lsl #24
   23b84:	andeq	r3, r2, r0, lsl #24
   23b88:	andeq	r3, r2, r0, lsl #24
   23b8c:	andeq	r3, r2, r0, lsl #24
   23b90:	andeq	r3, r2, r0, lsl #24
   23b94:	andeq	r3, r2, ip, asr #25
   23b98:	andeq	r3, r2, r4, ror #25
   23b9c:	andeq	r3, r2, r0, lsl #24
   23ba0:	andeq	r3, r2, r0, lsl #24
   23ba4:	andeq	r3, r2, r0, lsl #24
   23ba8:	andeq	r3, r2, ip, ror #23
   23bac:	andeq	r3, r2, r0, lsl #24
   23bb0:	andeq	r3, r2, r0, lsl #24
   23bb4:	andeq	r3, r2, r0, lsl #24
   23bb8:	andeq	r3, r2, r4, lsr ip
   23bbc:	andeq	r3, r2, r0, lsl #24
   23bc0:	andeq	r3, r2, r8, asr #24
   23bc4:	andeq	r3, r2, r0, lsl #24
   23bc8:	andeq	r3, r2, r0, lsl #24
   23bcc:	andeq	r3, r2, r0, lsl #24
   23bd0:	andeq	r3, r2, r0, lsl #24
   23bd4:	andeq	r3, r2, r0, lsl #24
   23bd8:	andeq	r3, r2, r0, lsl #24
   23bdc:	andeq	r3, r2, ip, asr ip
   23be0:	andeq	r3, r2, r0, lsl #24
   23be4:	andeq	r3, r2, r0, lsl #24
   23be8:	ldrdeq	r3, [r2], -r8
   23bec:	add	r0, sp, #8
   23bf0:	mov	r1, r5
   23bf4:	mov	r2, #3
   23bf8:	bl	23dc8 <__assert_fail@plt+0x12654>
   23bfc:	b	23ce4 <__assert_fail@plt+0x12570>
   23c00:	ldr	r0, [sp, #8]
   23c04:	ldr	r1, [sp, #12]
   23c08:	ldr	r2, [sp, #4]
   23c0c:	strd	r0, [r2]
   23c10:	orr	r8, r8, #2
   23c14:	b	23d10 <__assert_fail@plt+0x1259c>
   23c18:	cmp	r0, #105	; 0x69
   23c1c:	bne	23afc <__assert_fail@plt+0x12388>
   23c20:	ldrb	r0, [r6, #2]
   23c24:	mov	r7, #1
   23c28:	cmp	r0, #66	; 0x42
   23c2c:	movweq	r7, #3
   23c30:	b	23afc <__assert_fail@plt+0x12388>
   23c34:	add	r0, sp, #8
   23c38:	mov	r1, r5
   23c3c:	mov	r2, #1
   23c40:	bl	23dc8 <__assert_fail@plt+0x12654>
   23c44:	b	23ce4 <__assert_fail@plt+0x12570>
   23c48:	add	r0, sp, #8
   23c4c:	mov	r1, r5
   23c50:	mov	r2, #2
   23c54:	bl	23dc8 <__assert_fail@plt+0x12654>
   23c58:	b	23ce4 <__assert_fail@plt+0x12570>
   23c5c:	add	r0, sp, #8
   23c60:	mov	r1, r5
   23c64:	mov	r2, #4
   23c68:	bl	23dc8 <__assert_fail@plt+0x12654>
   23c6c:	b	23ce4 <__assert_fail@plt+0x12570>
   23c70:	add	r0, sp, #8
   23c74:	mov	r1, r5
   23c78:	mov	r2, #7
   23c7c:	bl	23dc8 <__assert_fail@plt+0x12654>
   23c80:	b	23ce4 <__assert_fail@plt+0x12570>
   23c84:	add	r0, sp, #8
   23c88:	mov	r1, #1024	; 0x400
   23c8c:	b	23ce0 <__assert_fail@plt+0x1256c>
   23c90:	add	r0, sp, #8
   23c94:	mov	r1, r5
   23c98:	mov	r2, #6
   23c9c:	bl	23dc8 <__assert_fail@plt+0x12654>
   23ca0:	b	23ce4 <__assert_fail@plt+0x12570>
   23ca4:	add	r0, sp, #8
   23ca8:	mov	r1, r5
   23cac:	mov	r2, #5
   23cb0:	bl	23dc8 <__assert_fail@plt+0x12654>
   23cb4:	b	23ce4 <__assert_fail@plt+0x12570>
   23cb8:	add	r0, sp, #8
   23cbc:	mov	r1, r5
   23cc0:	mov	r2, #8
   23cc4:	bl	23dc8 <__assert_fail@plt+0x12654>
   23cc8:	b	23ce4 <__assert_fail@plt+0x12570>
   23ccc:	add	r0, sp, #8
   23cd0:	mov	r1, #512	; 0x200
   23cd4:	b	23ce0 <__assert_fail@plt+0x1256c>
   23cd8:	add	r0, sp, #8
   23cdc:	mov	r1, #2
   23ce0:	bl	23d3c <__assert_fail@plt+0x125c8>
   23ce4:	ldr	r1, [r9]
   23ce8:	add	r2, r1, r7
   23cec:	str	r2, [r9]
   23cf0:	ldrb	r1, [r1, r7]
   23cf4:	orr	r8, r0, r8
   23cf8:	cmp	r1, #0
   23cfc:	orrne	r8, r8, #2
   23d00:	ldr	r0, [sp, #8]
   23d04:	ldr	r1, [sp, #12]
   23d08:	ldr	r2, [sp, #4]
   23d0c:	strd	r0, [r2]
   23d10:	mov	r0, r8
   23d14:	sub	sp, fp, #28
   23d18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23d1c:	movw	r0, #23689	; 0x5c89
   23d20:	movt	r0, #2
   23d24:	movw	r1, #23727	; 0x5caf
   23d28:	movt	r1, #2
   23d2c:	movw	r3, #23821	; 0x5d0d
   23d30:	movt	r3, #2
   23d34:	mov	r2, #85	; 0x55
   23d38:	bl	11774 <__assert_fail@plt>
   23d3c:	push	{r4, r5, r6, r7, fp, lr}
   23d40:	add	fp, sp, #16
   23d44:	mov	r5, r1
   23d48:	mov	r4, r0
   23d4c:	cmn	r1, #1
   23d50:	ble	23d88 <__assert_fail@plt+0x12614>
   23d54:	cmp	r5, #0
   23d58:	beq	23da8 <__assert_fail@plt+0x12634>
   23d5c:	asr	r3, r5, #31
   23d60:	mvn	r6, #0
   23d64:	mvn	r0, #0
   23d68:	mvn	r1, #0
   23d6c:	mov	r2, r5
   23d70:	bl	2483c <__assert_fail@plt+0x130c8>
   23d74:	ldrd	r2, [r4]
   23d78:	subs	r0, r0, r2
   23d7c:	sbcs	r0, r1, r3
   23d80:	bcc	23d98 <__assert_fail@plt+0x12624>
   23d84:	b	23da8 <__assert_fail@plt+0x12634>
   23d88:	ldrd	r0, [r4]
   23d8c:	orrs	r0, r0, r1
   23d90:	beq	23da8 <__assert_fail@plt+0x12634>
   23d94:	mvn	r6, #0
   23d98:	mov	r0, #1
   23d9c:	mvn	r7, #0
   23da0:	strd	r6, [r4]
   23da4:	pop	{r4, r5, r6, r7, fp, pc}
   23da8:	ldrd	r0, [r4]
   23dac:	umull	r6, r2, r0, r5
   23db0:	asr	r3, r5, #31
   23db4:	mla	r0, r0, r3, r2
   23db8:	mla	r7, r1, r5, r0
   23dbc:	mov	r0, #0
   23dc0:	strd	r6, [r4]
   23dc4:	pop	{r4, r5, r6, r7, fp, pc}
   23dc8:	push	{r4, r5, r6, r7, fp, lr}
   23dcc:	add	fp, sp, #16
   23dd0:	cmp	r2, #0
   23dd4:	moveq	r6, #0
   23dd8:	moveq	r0, r6
   23ddc:	popeq	{r4, r5, r6, r7, fp, pc}
   23de0:	mov	r4, r2
   23de4:	mov	r5, r1
   23de8:	mov	r7, r0
   23dec:	mov	r6, #0
   23df0:	mov	r0, r7
   23df4:	mov	r1, r5
   23df8:	bl	23d3c <__assert_fail@plt+0x125c8>
   23dfc:	orr	r6, r0, r6
   23e00:	subs	r4, r4, #1
   23e04:	bne	23df0 <__assert_fail@plt+0x1267c>
   23e08:	mov	r0, r6
   23e0c:	pop	{r4, r5, r6, r7, fp, pc}
   23e10:	clz	r2, r1
   23e14:	lsr	r2, r2, #5
   23e18:	clz	r3, r0
   23e1c:	lsr	r3, r3, #5
   23e20:	orrs	r2, r3, r2
   23e24:	movwne	r1, #1
   23e28:	movwne	r0, #1
   23e2c:	cmp	r1, #0
   23e30:	beq	23e60 <__assert_fail@plt+0x126ec>
   23e34:	mvn	r2, #-2147483648	; 0x80000000
   23e38:	udiv	r2, r2, r1
   23e3c:	cmp	r2, r0
   23e40:	bcs	23e60 <__assert_fail@plt+0x126ec>
   23e44:	push	{fp, lr}
   23e48:	mov	fp, sp
   23e4c:	bl	1163c <__errno_location@plt>
   23e50:	mov	r1, #12
   23e54:	str	r1, [r0]
   23e58:	mov	r0, #0
   23e5c:	pop	{fp, pc}
   23e60:	b	113d8 <calloc@plt>
   23e64:	cmp	r0, #0
   23e68:	movweq	r0, #1
   23e6c:	cmn	r0, #1
   23e70:	ble	23e78 <__assert_fail@plt+0x12704>
   23e74:	b	115c4 <malloc@plt>
   23e78:	push	{fp, lr}
   23e7c:	mov	fp, sp
   23e80:	bl	1163c <__errno_location@plt>
   23e84:	mov	r1, #12
   23e88:	str	r1, [r0]
   23e8c:	mov	r0, #0
   23e90:	pop	{fp, pc}
   23e94:	push	{fp, lr}
   23e98:	mov	fp, sp
   23e9c:	cmp	r0, #0
   23ea0:	beq	23ebc <__assert_fail@plt+0x12748>
   23ea4:	cmp	r1, #0
   23ea8:	beq	23ec8 <__assert_fail@plt+0x12754>
   23eac:	cmn	r1, #1
   23eb0:	ble	23ed4 <__assert_fail@plt+0x12760>
   23eb4:	pop	{fp, lr}
   23eb8:	b	11510 <realloc@plt>
   23ebc:	mov	r0, r1
   23ec0:	pop	{fp, lr}
   23ec4:	b	23e64 <__assert_fail@plt+0x126f0>
   23ec8:	bl	13f04 <__assert_fail@plt+0x2790>
   23ecc:	mov	r0, #0
   23ed0:	pop	{fp, pc}
   23ed4:	bl	1163c <__errno_location@plt>
   23ed8:	mov	r1, #12
   23edc:	str	r1, [r0]
   23ee0:	mov	r0, #0
   23ee4:	pop	{fp, pc}
   23ee8:	mov	r1, r0
   23eec:	sub	r2, r0, #65	; 0x41
   23ef0:	mov	r0, #1
   23ef4:	cmp	r2, #26
   23ef8:	subcs	r2, r1, #97	; 0x61
   23efc:	cmpcs	r2, #26
   23f00:	bcs	23f08 <__assert_fail@plt+0x12794>
   23f04:	bx	lr
   23f08:	sub	r1, r1, #48	; 0x30
   23f0c:	cmp	r1, #10
   23f10:	movcs	r0, #0
   23f14:	bx	lr
   23f18:	mov	r1, r0
   23f1c:	sub	r2, r0, #65	; 0x41
   23f20:	mov	r0, #1
   23f24:	cmp	r2, #26
   23f28:	subcs	r1, r1, #97	; 0x61
   23f2c:	cmpcs	r1, #26
   23f30:	movcs	r0, #0
   23f34:	bx	lr
   23f38:	mov	r1, #0
   23f3c:	cmp	r0, #128	; 0x80
   23f40:	movwcc	r1, #1
   23f44:	mov	r0, r1
   23f48:	bx	lr
   23f4c:	sub	r1, r0, #9
   23f50:	clz	r1, r1
   23f54:	lsr	r1, r1, #5
   23f58:	sub	r0, r0, #32
   23f5c:	clz	r0, r0
   23f60:	lsr	r0, r0, #5
   23f64:	orr	r0, r0, r1
   23f68:	bx	lr
   23f6c:	mov	r1, r0
   23f70:	mov	r0, #1
   23f74:	cmp	r1, #32
   23f78:	bxcc	lr
   23f7c:	cmp	r1, #127	; 0x7f
   23f80:	movne	r0, #0
   23f84:	bx	lr
   23f88:	sub	r1, r0, #48	; 0x30
   23f8c:	mov	r0, #0
   23f90:	cmp	r1, #10
   23f94:	movwcc	r0, #1
   23f98:	bx	lr
   23f9c:	sub	r1, r0, #33	; 0x21
   23fa0:	mov	r0, #0
   23fa4:	cmp	r1, #94	; 0x5e
   23fa8:	movwcc	r0, #1
   23fac:	bx	lr
   23fb0:	sub	r1, r0, #97	; 0x61
   23fb4:	mov	r0, #0
   23fb8:	cmp	r1, #26
   23fbc:	movwcc	r0, #1
   23fc0:	bx	lr
   23fc4:	sub	r1, r0, #32
   23fc8:	mov	r0, #0
   23fcc:	cmp	r1, #95	; 0x5f
   23fd0:	movwcc	r0, #1
   23fd4:	bx	lr
   23fd8:	sub	r1, r0, #33	; 0x21
   23fdc:	cmp	r1, #93	; 0x5d
   23fe0:	bhi	2416c <__assert_fail@plt+0x129f8>
   23fe4:	mov	r0, #1
   23fe8:	add	r2, pc, #0
   23fec:	ldr	pc, [r2, r1, lsl #2]
   23ff0:	andeq	r4, r2, r8, ror #2
   23ff4:	andeq	r4, r2, r8, ror #2
   23ff8:	andeq	r4, r2, r8, ror #2
   23ffc:	andeq	r4, r2, r8, ror #2
   24000:	andeq	r4, r2, r8, ror #2
   24004:	andeq	r4, r2, r8, ror #2
   24008:	andeq	r4, r2, r8, ror #2
   2400c:	andeq	r4, r2, r8, ror #2
   24010:	andeq	r4, r2, r8, ror #2
   24014:	andeq	r4, r2, r8, ror #2
   24018:	andeq	r4, r2, r8, ror #2
   2401c:	andeq	r4, r2, r8, ror #2
   24020:	andeq	r4, r2, r8, ror #2
   24024:	andeq	r4, r2, r8, ror #2
   24028:	andeq	r4, r2, r8, ror #2
   2402c:	andeq	r4, r2, ip, ror #2
   24030:	andeq	r4, r2, ip, ror #2
   24034:	andeq	r4, r2, ip, ror #2
   24038:	andeq	r4, r2, ip, ror #2
   2403c:	andeq	r4, r2, ip, ror #2
   24040:	andeq	r4, r2, ip, ror #2
   24044:	andeq	r4, r2, ip, ror #2
   24048:	andeq	r4, r2, ip, ror #2
   2404c:	andeq	r4, r2, ip, ror #2
   24050:	andeq	r4, r2, ip, ror #2
   24054:	andeq	r4, r2, r8, ror #2
   24058:	andeq	r4, r2, r8, ror #2
   2405c:	andeq	r4, r2, r8, ror #2
   24060:	andeq	r4, r2, r8, ror #2
   24064:	andeq	r4, r2, r8, ror #2
   24068:	andeq	r4, r2, r8, ror #2
   2406c:	andeq	r4, r2, r8, ror #2
   24070:	andeq	r4, r2, ip, ror #2
   24074:	andeq	r4, r2, ip, ror #2
   24078:	andeq	r4, r2, ip, ror #2
   2407c:	andeq	r4, r2, ip, ror #2
   24080:	andeq	r4, r2, ip, ror #2
   24084:	andeq	r4, r2, ip, ror #2
   24088:	andeq	r4, r2, ip, ror #2
   2408c:	andeq	r4, r2, ip, ror #2
   24090:	andeq	r4, r2, ip, ror #2
   24094:	andeq	r4, r2, ip, ror #2
   24098:	andeq	r4, r2, ip, ror #2
   2409c:	andeq	r4, r2, ip, ror #2
   240a0:	andeq	r4, r2, ip, ror #2
   240a4:	andeq	r4, r2, ip, ror #2
   240a8:	andeq	r4, r2, ip, ror #2
   240ac:	andeq	r4, r2, ip, ror #2
   240b0:	andeq	r4, r2, ip, ror #2
   240b4:	andeq	r4, r2, ip, ror #2
   240b8:	andeq	r4, r2, ip, ror #2
   240bc:	andeq	r4, r2, ip, ror #2
   240c0:	andeq	r4, r2, ip, ror #2
   240c4:	andeq	r4, r2, ip, ror #2
   240c8:	andeq	r4, r2, ip, ror #2
   240cc:	andeq	r4, r2, ip, ror #2
   240d0:	andeq	r4, r2, ip, ror #2
   240d4:	andeq	r4, r2, ip, ror #2
   240d8:	andeq	r4, r2, r8, ror #2
   240dc:	andeq	r4, r2, r8, ror #2
   240e0:	andeq	r4, r2, r8, ror #2
   240e4:	andeq	r4, r2, r8, ror #2
   240e8:	andeq	r4, r2, r8, ror #2
   240ec:	andeq	r4, r2, r8, ror #2
   240f0:	andeq	r4, r2, ip, ror #2
   240f4:	andeq	r4, r2, ip, ror #2
   240f8:	andeq	r4, r2, ip, ror #2
   240fc:	andeq	r4, r2, ip, ror #2
   24100:	andeq	r4, r2, ip, ror #2
   24104:	andeq	r4, r2, ip, ror #2
   24108:	andeq	r4, r2, ip, ror #2
   2410c:	andeq	r4, r2, ip, ror #2
   24110:	andeq	r4, r2, ip, ror #2
   24114:	andeq	r4, r2, ip, ror #2
   24118:	andeq	r4, r2, ip, ror #2
   2411c:	andeq	r4, r2, ip, ror #2
   24120:	andeq	r4, r2, ip, ror #2
   24124:	andeq	r4, r2, ip, ror #2
   24128:	andeq	r4, r2, ip, ror #2
   2412c:	andeq	r4, r2, ip, ror #2
   24130:	andeq	r4, r2, ip, ror #2
   24134:	andeq	r4, r2, ip, ror #2
   24138:	andeq	r4, r2, ip, ror #2
   2413c:	andeq	r4, r2, ip, ror #2
   24140:	andeq	r4, r2, ip, ror #2
   24144:	andeq	r4, r2, ip, ror #2
   24148:	andeq	r4, r2, ip, ror #2
   2414c:	andeq	r4, r2, ip, ror #2
   24150:	andeq	r4, r2, ip, ror #2
   24154:	andeq	r4, r2, ip, ror #2
   24158:	andeq	r4, r2, r8, ror #2
   2415c:	andeq	r4, r2, r8, ror #2
   24160:	andeq	r4, r2, r8, ror #2
   24164:	andeq	r4, r2, r8, ror #2
   24168:	bx	lr
   2416c:	mov	r0, #0
   24170:	bx	lr
   24174:	sub	r0, r0, #9
   24178:	cmp	r0, #23
   2417c:	movhi	r0, #0
   24180:	bxhi	lr
   24184:	bic	r0, r0, #-16777216	; 0xff000000
   24188:	movw	r1, #31
   2418c:	movt	r1, #128	; 0x80
   24190:	mov	r2, #1
   24194:	and	r0, r2, r1, lsr r0
   24198:	bx	lr
   2419c:	sub	r1, r0, #65	; 0x41
   241a0:	mov	r0, #0
   241a4:	cmp	r1, #26
   241a8:	movwcc	r0, #1
   241ac:	bx	lr
   241b0:	mov	r1, r0
   241b4:	sub	r2, r0, #48	; 0x30
   241b8:	mov	r0, #1
   241bc:	cmp	r2, #22
   241c0:	bhi	241d8 <__assert_fail@plt+0x12a64>
   241c4:	mov	ip, #1
   241c8:	movw	r3, #1023	; 0x3ff
   241cc:	movt	r3, #126	; 0x7e
   241d0:	tst	r3, ip, lsl r2
   241d4:	bxne	lr
   241d8:	sub	r1, r1, #97	; 0x61
   241dc:	cmp	r1, #6
   241e0:	movcs	r0, #0
   241e4:	bxcs	lr
   241e8:	bx	lr
   241ec:	sub	r1, r0, #65	; 0x41
   241f0:	cmp	r1, #26
   241f4:	addcc	r0, r0, #32
   241f8:	bx	lr
   241fc:	sub	r1, r0, #97	; 0x61
   24200:	cmp	r1, #26
   24204:	subcc	r0, r0, #32
   24208:	bx	lr
   2420c:	push	{r4, r5, r6, sl, fp, lr}
   24210:	add	fp, sp, #16
   24214:	mov	r4, r0
   24218:	bl	11588 <__fpending@plt>
   2421c:	mov	r5, r0
   24220:	mov	r0, r4
   24224:	bl	11594 <ferror_unlocked@plt>
   24228:	mov	r6, r0
   2422c:	mov	r0, r4
   24230:	bl	13ce0 <__assert_fail@plt+0x256c>
   24234:	cmp	r6, #0
   24238:	beq	24258 <__assert_fail@plt+0x12ae4>
   2423c:	mvn	r4, #0
   24240:	cmp	r0, #0
   24244:	bne	2428c <__assert_fail@plt+0x12b18>
   24248:	bl	1163c <__errno_location@plt>
   2424c:	mov	r1, #0
   24250:	str	r1, [r0]
   24254:	b	2428c <__assert_fail@plt+0x12b18>
   24258:	cmp	r0, #0
   2425c:	mov	r4, r0
   24260:	mvnne	r4, #0
   24264:	cmp	r5, #0
   24268:	bne	2428c <__assert_fail@plt+0x12b18>
   2426c:	cmp	r0, #0
   24270:	beq	2428c <__assert_fail@plt+0x12b18>
   24274:	bl	1163c <__errno_location@plt>
   24278:	ldr	r0, [r0]
   2427c:	subs	r4, r0, #9
   24280:	mvnne	r4, #0
   24284:	mov	r0, r4
   24288:	pop	{r4, r5, r6, sl, fp, pc}
   2428c:	mov	r0, r4
   24290:	pop	{r4, r5, r6, sl, fp, pc}
   24294:	push	{r4, r5, r6, r7, fp, lr}
   24298:	add	fp, sp, #16
   2429c:	mov	r5, r1
   242a0:	mov	r4, r0
   242a4:	ldr	r0, [r0, #4]
   242a8:	cmp	r0, r1
   242ac:	strcs	r5, [r4]
   242b0:	movcs	r0, #1
   242b4:	popcs	{r4, r5, r6, r7, fp, pc}
   242b8:	mov	r6, r3
   242bc:	cmp	r3, #0
   242c0:	beq	242e8 <__assert_fail@plt+0x12b74>
   242c4:	mvn	r0, #0
   242c8:	udiv	r0, r0, r6
   242cc:	cmp	r0, r5
   242d0:	bcs	242e8 <__assert_fail@plt+0x12b74>
   242d4:	bl	1163c <__errno_location@plt>
   242d8:	mov	r1, #12
   242dc:	str	r1, [r0]
   242e0:	mov	r0, #0
   242e4:	pop	{r4, r5, r6, r7, fp, pc}
   242e8:	mul	r1, r6, r5
   242ec:	ldr	r0, [r4, #8]
   242f0:	cmp	r0, r2
   242f4:	beq	2430c <__assert_fail@plt+0x12b98>
   242f8:	bl	23e94 <__assert_fail@plt+0x12720>
   242fc:	mov	r7, r0
   24300:	cmp	r0, #0
   24304:	bne	2433c <__assert_fail@plt+0x12bc8>
   24308:	b	2434c <__assert_fail@plt+0x12bd8>
   2430c:	mov	r0, r1
   24310:	bl	23e64 <__assert_fail@plt+0x126f0>
   24314:	cmp	r0, #0
   24318:	beq	2434c <__assert_fail@plt+0x12bd8>
   2431c:	mov	r7, r0
   24320:	ldr	r1, [r4, #8]
   24324:	cmp	r1, #0
   24328:	beq	2433c <__assert_fail@plt+0x12bc8>
   2432c:	ldr	r0, [r4]
   24330:	mul	r2, r0, r6
   24334:	mov	r0, r7
   24338:	bl	1148c <memcpy@plt>
   2433c:	str	r5, [r4]
   24340:	stmib	r4, {r5, r7}
   24344:	mov	r0, #1
   24348:	pop	{r4, r5, r6, r7, fp, pc}
   2434c:	mov	r0, #0
   24350:	pop	{r4, r5, r6, r7, fp, pc}
   24354:	sub	sp, sp, #8
   24358:	push	{fp, lr}
   2435c:	mov	fp, sp
   24360:	sub	sp, sp, #8
   24364:	str	r3, [fp, #12]
   24368:	str	r2, [fp, #8]
   2436c:	add	r2, fp, #8
   24370:	str	r2, [sp, #4]
   24374:	cmp	r1, #11
   24378:	bhi	243b8 <__assert_fail@plt+0x12c44>
   2437c:	mov	r2, #1
   24380:	movw	r3, #1300	; 0x514
   24384:	tst	r3, r2, lsl r1
   24388:	bne	24408 <__assert_fail@plt+0x12c94>
   2438c:	movw	r3, #2570	; 0xa0a
   24390:	tst	r3, r2, lsl r1
   24394:	bne	243e0 <__assert_fail@plt+0x12c6c>
   24398:	cmp	r1, #0
   2439c:	bne	243b8 <__assert_fail@plt+0x12c44>
   243a0:	ldr	r1, [sp, #4]
   243a4:	add	r2, r1, #4
   243a8:	str	r2, [sp, #4]
   243ac:	ldr	r1, [r1]
   243b0:	bl	2442c <__assert_fail@plt+0x12cb8>
   243b4:	b	2441c <__assert_fail@plt+0x12ca8>
   243b8:	sub	r2, r1, #1024	; 0x400
   243bc:	cmp	r2, #10
   243c0:	bhi	24408 <__assert_fail@plt+0x12c94>
   243c4:	mov	ip, #1
   243c8:	movw	r3, #645	; 0x285
   243cc:	tst	r3, ip, lsl r2
   243d0:	bne	24408 <__assert_fail@plt+0x12c94>
   243d4:	movw	r3, #1282	; 0x502
   243d8:	tst	r3, ip, lsl r2
   243dc:	beq	243e8 <__assert_fail@plt+0x12c74>
   243e0:	bl	116d8 <fcntl64@plt>
   243e4:	b	2441c <__assert_fail@plt+0x12ca8>
   243e8:	cmp	r2, #6
   243ec:	bne	24408 <__assert_fail@plt+0x12c94>
   243f0:	ldr	r1, [sp, #4]
   243f4:	add	r2, r1, #4
   243f8:	str	r2, [sp, #4]
   243fc:	ldr	r1, [r1]
   24400:	bl	24438 <__assert_fail@plt+0x12cc4>
   24404:	b	2441c <__assert_fail@plt+0x12ca8>
   24408:	ldr	r2, [sp, #4]
   2440c:	add	r3, r2, #4
   24410:	str	r3, [sp, #4]
   24414:	ldr	r2, [r2]
   24418:	bl	116d8 <fcntl64@plt>
   2441c:	mov	sp, fp
   24420:	pop	{fp, lr}
   24424:	add	sp, sp, #8
   24428:	bx	lr
   2442c:	mov	r2, r1
   24430:	mov	r1, #0
   24434:	b	116d8 <fcntl64@plt>
   24438:	push	{r4, r5, r6, r7, fp, lr}
   2443c:	add	fp, sp, #16
   24440:	mov	r5, r1
   24444:	mov	r6, r0
   24448:	movw	r7, #25584	; 0x63f0
   2444c:	movt	r7, #3
   24450:	ldr	r0, [r7]
   24454:	cmp	r0, #0
   24458:	blt	244bc <__assert_fail@plt+0x12d48>
   2445c:	mov	r0, r6
   24460:	movw	r1, #1030	; 0x406
   24464:	mov	r2, r5
   24468:	bl	116d8 <fcntl64@plt>
   2446c:	mov	r4, r0
   24470:	cmn	r0, #1
   24474:	bgt	244a8 <__assert_fail@plt+0x12d34>
   24478:	bl	1163c <__errno_location@plt>
   2447c:	ldr	r0, [r0]
   24480:	cmp	r0, #22
   24484:	bne	244a8 <__assert_fail@plt+0x12d34>
   24488:	mov	r0, r6
   2448c:	mov	r1, r5
   24490:	bl	2442c <__assert_fail@plt+0x12cb8>
   24494:	mov	r4, r0
   24498:	cmp	r0, #0
   2449c:	blt	2450c <__assert_fail@plt+0x12d98>
   244a0:	mvn	r0, #0
   244a4:	b	244ac <__assert_fail@plt+0x12d38>
   244a8:	mov	r0, #1
   244ac:	str	r0, [r7]
   244b0:	cmp	r4, #0
   244b4:	bge	244d4 <__assert_fail@plt+0x12d60>
   244b8:	b	2450c <__assert_fail@plt+0x12d98>
   244bc:	mov	r0, r6
   244c0:	mov	r1, r5
   244c4:	bl	2442c <__assert_fail@plt+0x12cb8>
   244c8:	mov	r4, r0
   244cc:	cmp	r4, #0
   244d0:	blt	2450c <__assert_fail@plt+0x12d98>
   244d4:	ldr	r0, [r7]
   244d8:	cmn	r0, #1
   244dc:	bne	2450c <__assert_fail@plt+0x12d98>
   244e0:	mov	r0, r4
   244e4:	mov	r1, #1
   244e8:	bl	116d8 <fcntl64@plt>
   244ec:	cmp	r0, #0
   244f0:	blt	24514 <__assert_fail@plt+0x12da0>
   244f4:	orr	r2, r0, #1
   244f8:	mov	r0, r4
   244fc:	mov	r1, #2
   24500:	bl	116d8 <fcntl64@plt>
   24504:	cmn	r0, #1
   24508:	beq	24514 <__assert_fail@plt+0x12da0>
   2450c:	mov	r0, r4
   24510:	pop	{r4, r5, r6, r7, fp, pc}
   24514:	bl	1163c <__errno_location@plt>
   24518:	mov	r5, r0
   2451c:	ldr	r6, [r0]
   24520:	mov	r0, r4
   24524:	bl	1175c <close@plt>
   24528:	str	r6, [r5]
   2452c:	mvn	r4, #0
   24530:	mov	r0, r4
   24534:	pop	{r4, r5, r6, r7, fp, pc}
   24538:	push	{fp, lr}
   2453c:	mov	fp, sp
   24540:	bl	1163c <__errno_location@plt>
   24544:	mov	r1, #12
   24548:	str	r1, [r0]
   2454c:	mov	r0, #0
   24550:	pop	{fp, pc}
   24554:	b	23e64 <__assert_fail@plt+0x126f0>
   24558:	cmp	r1, #0
   2455c:	orreq	r1, r1, #1
   24560:	b	23e94 <__assert_fail@plt+0x12720>
   24564:	b	23e10 <__assert_fail@plt+0x1269c>
   24568:	clz	r3, r2
   2456c:	lsr	ip, r3, #5
   24570:	clz	r3, r1
   24574:	lsr	r3, r3, #5
   24578:	orrs	r3, r3, ip
   2457c:	movwne	r1, #1
   24580:	movwne	r2, #1
   24584:	b	24620 <__assert_fail@plt+0x12eac>
   24588:	push	{fp, lr}
   2458c:	mov	fp, sp
   24590:	mov	r0, #14
   24594:	bl	11714 <nl_langinfo@plt>
   24598:	movw	r1, #20411	; 0x4fbb
   2459c:	movt	r1, #2
   245a0:	cmp	r0, #0
   245a4:	movne	r1, r0
   245a8:	ldrb	r2, [r1]
   245ac:	movw	r0, #23900	; 0x5d5c
   245b0:	movt	r0, #2
   245b4:	cmp	r2, #0
   245b8:	movne	r0, r1
   245bc:	pop	{fp, pc}
   245c0:	push	{r4, r5, r6, r7, fp, lr}
   245c4:	add	fp, sp, #16
   245c8:	sub	sp, sp, #8
   245cc:	mov	r7, r2
   245d0:	mov	r4, r1
   245d4:	add	r5, sp, #4
   245d8:	cmp	r0, #0
   245dc:	movne	r5, r0
   245e0:	mov	r0, r5
   245e4:	bl	115a0 <mbrtowc@plt>
   245e8:	mov	r6, r0
   245ec:	cmp	r7, #0
   245f0:	beq	24614 <__assert_fail@plt+0x12ea0>
   245f4:	cmn	r6, #2
   245f8:	bcc	24614 <__assert_fail@plt+0x12ea0>
   245fc:	mov	r0, #0
   24600:	bl	2465c <__assert_fail@plt+0x12ee8>
   24604:	cmp	r0, #0
   24608:	ldrbeq	r0, [r4]
   2460c:	streq	r0, [r5]
   24610:	moveq	r6, #1
   24614:	mov	r0, r6
   24618:	sub	sp, fp, #16
   2461c:	pop	{r4, r5, r6, r7, fp, pc}
   24620:	cmp	r2, #0
   24624:	beq	24654 <__assert_fail@plt+0x12ee0>
   24628:	mvn	r3, #0
   2462c:	udiv	r3, r3, r2
   24630:	cmp	r3, r1
   24634:	bcs	24654 <__assert_fail@plt+0x12ee0>
   24638:	push	{fp, lr}
   2463c:	mov	fp, sp
   24640:	bl	1163c <__errno_location@plt>
   24644:	mov	r1, #12
   24648:	str	r1, [r0]
   2464c:	mov	r0, #0
   24650:	pop	{fp, pc}
   24654:	mul	r1, r2, r1
   24658:	b	23e94 <__assert_fail@plt+0x12720>
   2465c:	push	{r4, sl, fp, lr}
   24660:	add	fp, sp, #8
   24664:	sub	sp, sp, #264	; 0x108
   24668:	add	r1, sp, #7
   2466c:	movw	r2, #257	; 0x101
   24670:	bl	246c0 <__assert_fail@plt+0x12f4c>
   24674:	mov	r4, #0
   24678:	cmp	r0, #0
   2467c:	bne	246b4 <__assert_fail@plt+0x12f40>
   24680:	add	r0, sp, #7
   24684:	movw	r1, #23906	; 0x5d62
   24688:	movt	r1, #2
   2468c:	bl	11420 <strcmp@plt>
   24690:	cmp	r0, #0
   24694:	beq	246b4 <__assert_fail@plt+0x12f40>
   24698:	add	r0, sp, #7
   2469c:	movw	r1, #23908	; 0x5d64
   246a0:	movt	r1, #2
   246a4:	bl	11420 <strcmp@plt>
   246a8:	mov	r4, r0
   246ac:	cmp	r0, #0
   246b0:	movwne	r4, #1
   246b4:	mov	r0, r4
   246b8:	sub	sp, fp, #8
   246bc:	pop	{r4, sl, fp, pc}
   246c0:	b	246c4 <__assert_fail@plt+0x12f50>
   246c4:	push	{r4, r5, r6, r7, fp, lr}
   246c8:	add	fp, sp, #16
   246cc:	mov	r6, r2
   246d0:	mov	r4, r1
   246d4:	bl	24760 <__assert_fail@plt+0x12fec>
   246d8:	cmp	r0, #0
   246dc:	beq	2470c <__assert_fail@plt+0x12f98>
   246e0:	mov	r7, r0
   246e4:	bl	11624 <strlen@plt>
   246e8:	cmp	r0, r6
   246ec:	bcs	2472c <__assert_fail@plt+0x12fb8>
   246f0:	add	r2, r0, #1
   246f4:	mov	r0, r4
   246f8:	mov	r1, r7
   246fc:	bl	1148c <memcpy@plt>
   24700:	mov	r5, #0
   24704:	mov	r0, r5
   24708:	pop	{r4, r5, r6, r7, fp, pc}
   2470c:	mov	r5, #22
   24710:	cmp	r6, #0
   24714:	movne	r0, #0
   24718:	strbne	r0, [r4]
   2471c:	movne	r0, r5
   24720:	popne	{r4, r5, r6, r7, fp, pc}
   24724:	mov	r0, r5
   24728:	pop	{r4, r5, r6, r7, fp, pc}
   2472c:	mov	r5, #34	; 0x22
   24730:	cmp	r6, #0
   24734:	beq	24754 <__assert_fail@plt+0x12fe0>
   24738:	sub	r6, r6, #1
   2473c:	mov	r0, r4
   24740:	mov	r1, r7
   24744:	mov	r2, r6
   24748:	bl	1148c <memcpy@plt>
   2474c:	mov	r0, #0
   24750:	strb	r0, [r4, r6]
   24754:	mov	r0, r5
   24758:	pop	{r4, r5, r6, r7, fp, pc}
   2475c:	b	24760 <__assert_fail@plt+0x12fec>
   24760:	mov	r1, #0
   24764:	b	116e4 <setlocale@plt>
   24768:	cmp	r3, #0
   2476c:	cmpeq	r2, #0
   24770:	bne	24794 <__assert_fail@plt+0x13020>
   24774:	cmp	r1, #0
   24778:	movlt	r1, #-2147483648	; 0x80000000
   2477c:	movlt	r0, #0
   24780:	blt	24790 <__assert_fail@plt+0x1301c>
   24784:	cmpeq	r0, #0
   24788:	mvnne	r1, #-2147483648	; 0x80000000
   2478c:	mvnne	r0, #0
   24790:	b	24878 <__assert_fail@plt+0x13104>
   24794:	sub	sp, sp, #8
   24798:	push	{sp, lr}
   2479c:	cmp	r1, #0
   247a0:	blt	247c0 <__assert_fail@plt+0x1304c>
   247a4:	cmp	r3, #0
   247a8:	blt	247f4 <__assert_fail@plt+0x13080>
   247ac:	bl	24888 <__assert_fail@plt+0x13114>
   247b0:	ldr	lr, [sp, #4]
   247b4:	add	sp, sp, #8
   247b8:	pop	{r2, r3}
   247bc:	bx	lr
   247c0:	rsbs	r0, r0, #0
   247c4:	sbc	r1, r1, r1, lsl #1
   247c8:	cmp	r3, #0
   247cc:	blt	24818 <__assert_fail@plt+0x130a4>
   247d0:	bl	24888 <__assert_fail@plt+0x13114>
   247d4:	ldr	lr, [sp, #4]
   247d8:	add	sp, sp, #8
   247dc:	pop	{r2, r3}
   247e0:	rsbs	r0, r0, #0
   247e4:	sbc	r1, r1, r1, lsl #1
   247e8:	rsbs	r2, r2, #0
   247ec:	sbc	r3, r3, r3, lsl #1
   247f0:	bx	lr
   247f4:	rsbs	r2, r2, #0
   247f8:	sbc	r3, r3, r3, lsl #1
   247fc:	bl	24888 <__assert_fail@plt+0x13114>
   24800:	ldr	lr, [sp, #4]
   24804:	add	sp, sp, #8
   24808:	pop	{r2, r3}
   2480c:	rsbs	r0, r0, #0
   24810:	sbc	r1, r1, r1, lsl #1
   24814:	bx	lr
   24818:	rsbs	r2, r2, #0
   2481c:	sbc	r3, r3, r3, lsl #1
   24820:	bl	24888 <__assert_fail@plt+0x13114>
   24824:	ldr	lr, [sp, #4]
   24828:	add	sp, sp, #8
   2482c:	pop	{r2, r3}
   24830:	rsbs	r2, r2, #0
   24834:	sbc	r3, r3, r3, lsl #1
   24838:	bx	lr
   2483c:	cmp	r3, #0
   24840:	cmpeq	r2, #0
   24844:	bne	2485c <__assert_fail@plt+0x130e8>
   24848:	cmp	r1, #0
   2484c:	cmpeq	r0, #0
   24850:	mvnne	r1, #0
   24854:	mvnne	r0, #0
   24858:	b	24878 <__assert_fail@plt+0x13104>
   2485c:	sub	sp, sp, #8
   24860:	push	{sp, lr}
   24864:	bl	24888 <__assert_fail@plt+0x13114>
   24868:	ldr	lr, [sp, #4]
   2486c:	add	sp, sp, #8
   24870:	pop	{r2, r3}
   24874:	bx	lr
   24878:	push	{r1, lr}
   2487c:	mov	r0, #8
   24880:	bl	113fc <raise@plt>
   24884:	pop	{r1, pc}
   24888:	cmp	r1, r3
   2488c:	cmpeq	r0, r2
   24890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24894:	mov	r4, r0
   24898:	movcc	r0, #0
   2489c:	mov	r5, r1
   248a0:	ldr	lr, [sp, #36]	; 0x24
   248a4:	movcc	r1, r0
   248a8:	bcc	249a4 <__assert_fail@plt+0x13230>
   248ac:	cmp	r3, #0
   248b0:	clzeq	ip, r2
   248b4:	clzne	ip, r3
   248b8:	addeq	ip, ip, #32
   248bc:	cmp	r5, #0
   248c0:	clzeq	r1, r4
   248c4:	addeq	r1, r1, #32
   248c8:	clzne	r1, r5
   248cc:	sub	ip, ip, r1
   248d0:	sub	sl, ip, #32
   248d4:	lsl	r9, r3, ip
   248d8:	rsb	fp, ip, #32
   248dc:	orr	r9, r9, r2, lsl sl
   248e0:	orr	r9, r9, r2, lsr fp
   248e4:	lsl	r8, r2, ip
   248e8:	cmp	r5, r9
   248ec:	cmpeq	r4, r8
   248f0:	movcc	r0, #0
   248f4:	movcc	r1, r0
   248f8:	bcc	24914 <__assert_fail@plt+0x131a0>
   248fc:	mov	r0, #1
   24900:	subs	r4, r4, r8
   24904:	lsl	r1, r0, sl
   24908:	orr	r1, r1, r0, lsr fp
   2490c:	lsl	r0, r0, ip
   24910:	sbc	r5, r5, r9
   24914:	cmp	ip, #0
   24918:	beq	249a4 <__assert_fail@plt+0x13230>
   2491c:	lsr	r6, r8, #1
   24920:	orr	r6, r6, r9, lsl #31
   24924:	lsr	r7, r9, #1
   24928:	mov	r2, ip
   2492c:	b	24950 <__assert_fail@plt+0x131dc>
   24930:	subs	r3, r4, r6
   24934:	sbc	r8, r5, r7
   24938:	adds	r3, r3, r3
   2493c:	adc	r8, r8, r8
   24940:	adds	r4, r3, #1
   24944:	adc	r5, r8, #0
   24948:	subs	r2, r2, #1
   2494c:	beq	2496c <__assert_fail@plt+0x131f8>
   24950:	cmp	r5, r7
   24954:	cmpeq	r4, r6
   24958:	bcs	24930 <__assert_fail@plt+0x131bc>
   2495c:	adds	r4, r4, r4
   24960:	adc	r5, r5, r5
   24964:	subs	r2, r2, #1
   24968:	bne	24950 <__assert_fail@plt+0x131dc>
   2496c:	lsr	r3, r4, ip
   24970:	orr	r3, r3, r5, lsl fp
   24974:	lsr	r2, r5, ip
   24978:	orr	r3, r3, r5, lsr sl
   2497c:	adds	r0, r0, r4
   24980:	mov	r4, r3
   24984:	lsl	r3, r2, ip
   24988:	orr	r3, r3, r4, lsl sl
   2498c:	lsl	ip, r4, ip
   24990:	orr	r3, r3, r4, lsr fp
   24994:	adc	r1, r1, r5
   24998:	subs	r0, r0, ip
   2499c:	mov	r5, r2
   249a0:	sbc	r1, r1, r3
   249a4:	cmp	lr, #0
   249a8:	strdne	r4, [lr]
   249ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   249b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   249b4:	mov	r7, r0
   249b8:	ldr	r6, [pc, #72]	; 24a08 <__assert_fail@plt+0x13294>
   249bc:	ldr	r5, [pc, #72]	; 24a0c <__assert_fail@plt+0x13298>
   249c0:	add	r6, pc, r6
   249c4:	add	r5, pc, r5
   249c8:	sub	r6, r6, r5
   249cc:	mov	r8, r1
   249d0:	mov	r9, r2
   249d4:	bl	113a0 <pthread_mutex_unlock@plt-0x20>
   249d8:	asrs	r6, r6, #2
   249dc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   249e0:	mov	r4, #0
   249e4:	add	r4, r4, #1
   249e8:	ldr	r3, [r5], #4
   249ec:	mov	r2, r9
   249f0:	mov	r1, r8
   249f4:	mov	r0, r7
   249f8:	blx	r3
   249fc:	cmp	r6, r4
   24a00:	bne	249e4 <__assert_fail@plt+0x13270>
   24a04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24a08:	andeq	r1, r1, r4, asr #10
   24a0c:	andeq	r1, r1, ip, lsr r5
   24a10:	bx	lr
   24a14:	ldr	r3, [pc, #12]	; 24a28 <__assert_fail@plt+0x132b4>
   24a18:	mov	r1, #0
   24a1c:	add	r3, pc, r3
   24a20:	ldr	r2, [r3]
   24a24:	b	11660 <__cxa_atexit@plt>
   24a28:	andeq	r1, r1, r0, lsr r7

Disassembly of section .fini:

00024a2c <.fini>:
   24a2c:	push	{r3, lr}
   24a30:	pop	{r3, pc}
