
../repos/coreutils/src/nproc:     file format elf32-littlearm


Disassembly of section .init:

00010dc4 <.init>:
   10dc4:	push	{r3, lr}
   10dc8:	bl	11084 <__assert_fail@plt+0x48>
   10dcc:	pop	{r3, pc}

Disassembly of section .plt:

00010dd0 <calloc@plt-0x14>:
   10dd0:	push	{lr}		; (str lr, [sp, #-4]!)
   10dd4:	ldr	lr, [pc, #4]	; 10de0 <calloc@plt-0x4>
   10dd8:	add	lr, pc, lr
   10ddc:	ldr	pc, [lr, #8]!
   10de0:	andeq	r5, r1, r0, lsr #4

00010de4 <calloc@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #86016	; 0x15000
   10dec:	ldr	pc, [ip, #544]!	; 0x220

00010df0 <fputs_unlocked@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #86016	; 0x15000
   10df8:	ldr	pc, [ip, #536]!	; 0x218

00010dfc <raise@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #86016	; 0x15000
   10e04:	ldr	pc, [ip, #528]!	; 0x210

00010e08 <strcmp@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #86016	; 0x15000
   10e10:	ldr	pc, [ip, #520]!	; 0x208

00010e14 <fflush@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #86016	; 0x15000
   10e1c:	ldr	pc, [ip, #512]!	; 0x200

00010e20 <free@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #86016	; 0x15000
   10e28:	ldr	pc, [ip, #504]!	; 0x1f8

00010e2c <_exit@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #86016	; 0x15000
   10e34:	ldr	pc, [ip, #496]!	; 0x1f0

00010e38 <memcpy@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #86016	; 0x15000
   10e40:	ldr	pc, [ip, #488]!	; 0x1e8

00010e44 <mbsinit@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #86016	; 0x15000
   10e4c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e50 <__sched_cpucount@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #86016	; 0x15000
   10e58:	ldr	pc, [ip, #472]!	; 0x1d8

00010e5c <memcmp@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #464]!	; 0x1d0

00010e68 <dcgettext@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #456]!	; 0x1c8

00010e74 <sysconf@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #448]!	; 0x1c0

00010e80 <realloc@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #440]!	; 0x1b8

00010e8c <textdomain@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #432]!	; 0x1b0

00010e98 <iswprint@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #86016	; 0x15000
   10ea0:	ldr	pc, [ip, #424]!	; 0x1a8

00010ea4 <fwrite@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #86016	; 0x15000
   10eac:	ldr	pc, [ip, #416]!	; 0x1a0

00010eb0 <lseek64@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #86016	; 0x15000
   10eb8:	ldr	pc, [ip, #408]!	; 0x198

00010ebc <__ctype_get_mb_cur_max@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #86016	; 0x15000
   10ec4:	ldr	pc, [ip, #400]!	; 0x190

00010ec8 <__fpending@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #86016	; 0x15000
   10ed0:	ldr	pc, [ip, #392]!	; 0x188

00010ed4 <ferror_unlocked@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #86016	; 0x15000
   10edc:	ldr	pc, [ip, #384]!	; 0x180

00010ee0 <mbrtowc@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #86016	; 0x15000
   10ee8:	ldr	pc, [ip, #376]!	; 0x178

00010eec <error@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #86016	; 0x15000
   10ef4:	ldr	pc, [ip, #368]!	; 0x170

00010ef8 <getenv@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #86016	; 0x15000
   10f00:	ldr	pc, [ip, #360]!	; 0x168

00010f04 <malloc@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #86016	; 0x15000
   10f0c:	ldr	pc, [ip, #352]!	; 0x160

00010f10 <__libc_start_main@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #86016	; 0x15000
   10f18:	ldr	pc, [ip, #344]!	; 0x158

00010f1c <__freading@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #86016	; 0x15000
   10f24:	ldr	pc, [ip, #336]!	; 0x150

00010f28 <__gmon_start__@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #86016	; 0x15000
   10f30:	ldr	pc, [ip, #328]!	; 0x148

00010f34 <getopt_long@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #86016	; 0x15000
   10f3c:	ldr	pc, [ip, #320]!	; 0x140

00010f40 <__ctype_b_loc@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #86016	; 0x15000
   10f48:	ldr	pc, [ip, #312]!	; 0x138

00010f4c <exit@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #86016	; 0x15000
   10f54:	ldr	pc, [ip, #304]!	; 0x130

00010f58 <strtoul@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #86016	; 0x15000
   10f60:	ldr	pc, [ip, #296]!	; 0x128

00010f64 <strlen@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #86016	; 0x15000
   10f6c:	ldr	pc, [ip, #288]!	; 0x120

00010f70 <strchr@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #86016	; 0x15000
   10f78:	ldr	pc, [ip, #280]!	; 0x118

00010f7c <__errno_location@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #86016	; 0x15000
   10f84:	ldr	pc, [ip, #272]!	; 0x110

00010f88 <__cxa_atexit@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #86016	; 0x15000
   10f90:	ldr	pc, [ip, #264]!	; 0x108

00010f94 <memset@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #86016	; 0x15000
   10f9c:	ldr	pc, [ip, #256]!	; 0x100

00010fa0 <__printf_chk@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #86016	; 0x15000
   10fa8:	ldr	pc, [ip, #248]!	; 0xf8

00010fac <fileno@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #86016	; 0x15000
   10fb4:	ldr	pc, [ip, #240]!	; 0xf0

00010fb8 <strtoumax@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #86016	; 0x15000
   10fc0:	ldr	pc, [ip, #232]!	; 0xe8

00010fc4 <__fprintf_chk@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #86016	; 0x15000
   10fcc:	ldr	pc, [ip, #224]!	; 0xe0

00010fd0 <fclose@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #86016	; 0x15000
   10fd8:	ldr	pc, [ip, #216]!	; 0xd8

00010fdc <fseeko64@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #86016	; 0x15000
   10fe4:	ldr	pc, [ip, #208]!	; 0xd0

00010fe8 <setlocale@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #86016	; 0x15000
   10ff0:	ldr	pc, [ip, #200]!	; 0xc8

00010ff4 <strrchr@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #86016	; 0x15000
   10ffc:	ldr	pc, [ip, #192]!	; 0xc0

00011000 <nl_langinfo@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #86016	; 0x15000
   11008:	ldr	pc, [ip, #184]!	; 0xb8

0001100c <sched_getaffinity@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #86016	; 0x15000
   11014:	ldr	pc, [ip, #176]!	; 0xb0

00011018 <bindtextdomain@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #86016	; 0x15000
   11020:	ldr	pc, [ip, #168]!	; 0xa8

00011024 <strncmp@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #86016	; 0x15000
   1102c:	ldr	pc, [ip, #160]!	; 0xa0

00011030 <abort@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #86016	; 0x15000
   11038:	ldr	pc, [ip, #152]!	; 0x98

0001103c <__assert_fail@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #86016	; 0x15000
   11044:	ldr	pc, [ip, #144]!	; 0x90

Disassembly of section .text:

00011048 <.text>:
   11048:	mov	fp, #0
   1104c:	mov	lr, #0
   11050:	pop	{r1}		; (ldr r1, [sp], #4)
   11054:	mov	r2, sp
   11058:	push	{r2}		; (str r2, [sp, #-4]!)
   1105c:	push	{r0}		; (str r0, [sp, #-4]!)
   11060:	ldr	ip, [pc, #16]	; 11078 <__assert_fail@plt+0x3c>
   11064:	push	{ip}		; (str ip, [sp, #-4]!)
   11068:	ldr	r0, [pc, #12]	; 1107c <__assert_fail@plt+0x40>
   1106c:	ldr	r3, [pc, #12]	; 11080 <__assert_fail@plt+0x44>
   11070:	bl	10f10 <__libc_start_main@plt>
   11074:	bl	11030 <abort@plt>
   11078:	andeq	r4, r1, ip, lsl #29
   1107c:	andeq	r1, r1, r4, asr #7
   11080:	andeq	r4, r1, ip, lsr #28
   11084:	ldr	r3, [pc, #20]	; 110a0 <__assert_fail@plt+0x64>
   11088:	ldr	r2, [pc, #20]	; 110a4 <__assert_fail@plt+0x68>
   1108c:	add	r3, pc, r3
   11090:	ldr	r2, [r3, r2]
   11094:	cmp	r2, #0
   11098:	bxeq	lr
   1109c:	b	10f28 <__gmon_start__@plt>
   110a0:	andeq	r4, r1, ip, ror #30
   110a4:	ldrdeq	r0, [r0], -r8
   110a8:	ldr	r0, [pc, #24]	; 110c8 <__assert_fail@plt+0x8c>
   110ac:	ldr	r3, [pc, #24]	; 110cc <__assert_fail@plt+0x90>
   110b0:	cmp	r3, r0
   110b4:	bxeq	lr
   110b8:	ldr	r3, [pc, #16]	; 110d0 <__assert_fail@plt+0x94>
   110bc:	cmp	r3, #0
   110c0:	bxeq	lr
   110c4:	bx	r3
   110c8:	andeq	r6, r2, r0, lsr r1
   110cc:	andeq	r6, r2, r0, lsr r1
   110d0:	andeq	r0, r0, r0
   110d4:	ldr	r0, [pc, #36]	; 11100 <__assert_fail@plt+0xc4>
   110d8:	ldr	r1, [pc, #36]	; 11104 <__assert_fail@plt+0xc8>
   110dc:	sub	r1, r1, r0
   110e0:	asr	r1, r1, #2
   110e4:	add	r1, r1, r1, lsr #31
   110e8:	asrs	r1, r1, #1
   110ec:	bxeq	lr
   110f0:	ldr	r3, [pc, #16]	; 11108 <__assert_fail@plt+0xcc>
   110f4:	cmp	r3, #0
   110f8:	bxeq	lr
   110fc:	bx	r3
   11100:	andeq	r6, r2, r0, lsr r1
   11104:	andeq	r6, r2, r0, lsr r1
   11108:	andeq	r0, r0, r0
   1110c:	push	{r4, lr}
   11110:	ldr	r4, [pc, #24]	; 11130 <__assert_fail@plt+0xf4>
   11114:	ldrb	r3, [r4]
   11118:	cmp	r3, #0
   1111c:	popne	{r4, pc}
   11120:	bl	110a8 <__assert_fail@plt+0x6c>
   11124:	mov	r3, #1
   11128:	strb	r3, [r4]
   1112c:	pop	{r4, pc}
   11130:	andeq	r6, r2, ip, asr #2
   11134:	b	110d4 <__assert_fail@plt+0x98>
   11138:	push	{fp, lr}
   1113c:	mov	fp, sp
   11140:	mov	r4, r0
   11144:	cmp	r0, #0
   11148:	bne	111fc <__assert_fail@plt+0x1c0>
   1114c:	movw	r1, #20187	; 0x4edb
   11150:	movt	r1, #1
   11154:	mov	r0, #0
   11158:	mov	r2, #5
   1115c:	bl	10e68 <dcgettext@plt>
   11160:	mov	r1, r0
   11164:	movw	r0, #24920	; 0x6158
   11168:	movt	r0, #2
   1116c:	ldr	r2, [r0]
   11170:	mov	r0, #1
   11174:	bl	10fa0 <__printf_chk@plt>
   11178:	movw	r1, #20210	; 0x4ef2
   1117c:	movt	r1, #1
   11180:	mov	r0, #0
   11184:	mov	r2, #5
   11188:	bl	10e68 <dcgettext@plt>
   1118c:	movw	r5, #24900	; 0x6144
   11190:	movt	r5, #2
   11194:	ldr	r1, [r5]
   11198:	bl	10df0 <fputs_unlocked@plt>
   1119c:	movw	r1, #20338	; 0x4f72
   111a0:	movt	r1, #1
   111a4:	mov	r0, #0
   111a8:	mov	r2, #5
   111ac:	bl	10e68 <dcgettext@plt>
   111b0:	ldr	r1, [r5]
   111b4:	bl	10df0 <fputs_unlocked@plt>
   111b8:	movw	r1, #20455	; 0x4fe7
   111bc:	movt	r1, #1
   111c0:	mov	r0, #0
   111c4:	mov	r2, #5
   111c8:	bl	10e68 <dcgettext@plt>
   111cc:	ldr	r1, [r5]
   111d0:	bl	10df0 <fputs_unlocked@plt>
   111d4:	movw	r1, #20500	; 0x5014
   111d8:	movt	r1, #1
   111dc:	mov	r0, #0
   111e0:	mov	r2, #5
   111e4:	bl	10e68 <dcgettext@plt>
   111e8:	ldr	r1, [r5]
   111ec:	bl	10df0 <fputs_unlocked@plt>
   111f0:	bl	11240 <__assert_fail@plt+0x204>
   111f4:	mov	r0, r4
   111f8:	bl	10f4c <exit@plt>
   111fc:	movw	r0, #24896	; 0x6140
   11200:	movt	r0, #2
   11204:	ldr	r5, [r0]
   11208:	movw	r1, #20148	; 0x4eb4
   1120c:	movt	r1, #1
   11210:	mov	r0, #0
   11214:	mov	r2, #5
   11218:	bl	10e68 <dcgettext@plt>
   1121c:	mov	r2, r0
   11220:	movw	r0, #24920	; 0x6158
   11224:	movt	r0, #2
   11228:	ldr	r3, [r0]
   1122c:	mov	r0, r5
   11230:	mov	r1, #1
   11234:	bl	10fc4 <__fprintf_chk@plt>
   11238:	mov	r0, r4
   1123c:	bl	10f4c <exit@plt>
   11240:	push	{r4, r5, fp, lr}
   11244:	add	fp, sp, #8
   11248:	sub	sp, sp, #56	; 0x38
   1124c:	movw	r0, #21072	; 0x5250
   11250:	movt	r0, #1
   11254:	add	r1, r0, #32
   11258:	mov	r5, sp
   1125c:	mov	r2, #48	; 0x30
   11260:	vld1.64	{d16-d17}, [r1]
   11264:	add	r1, r5, #32
   11268:	add	r3, r0, #16
   1126c:	vld1.64	{d18-d19}, [r0], r2
   11270:	vld1.64	{d20-d21}, [r3]
   11274:	vldr	d22, [r0]
   11278:	vst1.64	{d16-d17}, [r1]
   1127c:	add	r0, r5, #16
   11280:	vst1.64	{d20-d21}, [r0]
   11284:	mov	r0, r5
   11288:	vst1.64	{d18-d19}, [r0], r2
   1128c:	vstr	d22, [r0]
   11290:	ldr	r1, [sp]
   11294:	cmp	r1, #0
   11298:	beq	112c0 <__assert_fail@plt+0x284>
   1129c:	mov	r5, sp
   112a0:	movw	r4, #20554	; 0x504a
   112a4:	movt	r4, #1
   112a8:	mov	r0, r4
   112ac:	bl	10e08 <strcmp@plt>
   112b0:	cmp	r0, #0
   112b4:	ldrne	r1, [r5, #8]!
   112b8:	cmpne	r1, #0
   112bc:	bne	112a8 <__assert_fail@plt+0x26c>
   112c0:	ldr	r4, [r5, #4]
   112c4:	movw	r1, #20748	; 0x510c
   112c8:	movt	r1, #1
   112cc:	mov	r0, #0
   112d0:	mov	r2, #5
   112d4:	bl	10e68 <dcgettext@plt>
   112d8:	mov	r1, r0
   112dc:	movw	r2, #20584	; 0x5068
   112e0:	movt	r2, #1
   112e4:	movw	r3, #20771	; 0x5123
   112e8:	movt	r3, #1
   112ec:	mov	r0, #1
   112f0:	bl	10fa0 <__printf_chk@plt>
   112f4:	movw	r5, #20554	; 0x504a
   112f8:	movt	r5, #1
   112fc:	cmp	r4, #0
   11300:	moveq	r4, r5
   11304:	mov	r0, #5
   11308:	mov	r1, #0
   1130c:	bl	10fe8 <setlocale@plt>
   11310:	cmp	r0, #0
   11314:	beq	11354 <__assert_fail@plt+0x318>
   11318:	movw	r1, #20811	; 0x514b
   1131c:	movt	r1, #1
   11320:	mov	r2, #3
   11324:	bl	11024 <strncmp@plt>
   11328:	cmp	r0, #0
   1132c:	beq	11354 <__assert_fail@plt+0x318>
   11330:	movw	r1, #20815	; 0x514f
   11334:	movt	r1, #1
   11338:	mov	r0, #0
   1133c:	mov	r2, #5
   11340:	bl	10e68 <dcgettext@plt>
   11344:	movw	r1, #24900	; 0x6144
   11348:	movt	r1, #2
   1134c:	ldr	r1, [r1]
   11350:	bl	10df0 <fputs_unlocked@plt>
   11354:	movw	r1, #20886	; 0x5196
   11358:	movt	r1, #1
   1135c:	mov	r0, #0
   11360:	mov	r2, #5
   11364:	bl	10e68 <dcgettext@plt>
   11368:	mov	r1, r0
   1136c:	movw	r2, #20771	; 0x5123
   11370:	movt	r2, #1
   11374:	mov	r0, #1
   11378:	mov	r3, r5
   1137c:	bl	10fa0 <__printf_chk@plt>
   11380:	movw	r1, #20913	; 0x51b1
   11384:	movt	r1, #1
   11388:	mov	r0, #0
   1138c:	mov	r2, #5
   11390:	bl	10e68 <dcgettext@plt>
   11394:	mov	r1, r0
   11398:	movw	r0, #20681	; 0x50c9
   1139c:	movt	r0, #1
   113a0:	movw	r3, #20337	; 0x4f71
   113a4:	movt	r3, #1
   113a8:	cmp	r4, r5
   113ac:	moveq	r3, r0
   113b0:	mov	r0, #1
   113b4:	mov	r2, r4
   113b8:	bl	10fa0 <__printf_chk@plt>
   113bc:	sub	sp, fp, #8
   113c0:	pop	{r4, r5, fp, pc}
   113c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113c8:	add	fp, sp, #28
   113cc:	sub	sp, sp, #20
   113d0:	mov	r4, r1
   113d4:	mov	r5, r0
   113d8:	ldr	r0, [r1]
   113dc:	bl	11900 <__assert_fail@plt+0x8c4>
   113e0:	movw	sl, #20337	; 0x4f71
   113e4:	movt	sl, #1
   113e8:	mov	r0, #6
   113ec:	mov	r1, sl
   113f0:	bl	10fe8 <setlocale@plt>
   113f4:	movw	r6, #20588	; 0x506c
   113f8:	movt	r6, #1
   113fc:	movw	r1, #20560	; 0x5050
   11400:	movt	r1, #1
   11404:	mov	r0, r6
   11408:	bl	11018 <bindtextdomain@plt>
   1140c:	mov	r0, r6
   11410:	bl	10e8c <textdomain@plt>
   11414:	movw	r0, #5592	; 0x15d8
   11418:	movt	r0, #1
   1141c:	bl	14e90 <__assert_fail@plt+0x3e54>
   11420:	mov	r7, #2
   11424:	movw	r8, #20992	; 0x5200
   11428:	movt	r8, #1
   1142c:	mov	r6, #0
   11430:	b	11484 <__assert_fail@plt+0x448>
   11434:	movw	r0, #24904	; 0x6148
   11438:	movt	r0, #2
   1143c:	ldr	r6, [r0]
   11440:	mov	r0, #0
   11444:	movw	r1, #20616	; 0x5088
   11448:	movt	r1, #1
   1144c:	mov	r2, #5
   11450:	bl	10e68 <dcgettext@plt>
   11454:	mvn	r1, #0
   11458:	str	r1, [sp]
   1145c:	mov	r1, #0
   11460:	stmib	sp, {r1, sl}
   11464:	str	r0, [sp, #12]
   11468:	str	r1, [sp, #16]
   1146c:	mov	r0, r6
   11470:	mov	r2, #0
   11474:	mov	r3, #0
   11478:	bl	13ef4 <__assert_fail@plt+0x2eb8>
   1147c:	mov	r6, r0
   11480:	mov	r7, r9
   11484:	mov	r9, r7
   11488:	mov	r7, #0
   1148c:	str	r7, [sp]
   11490:	mov	r0, r5
   11494:	mov	r1, r4
   11498:	mov	r2, sl
   1149c:	mov	r3, r8
   114a0:	bl	10f34 <getopt_long@plt>
   114a4:	cmp	r0, #255	; 0xff
   114a8:	ble	114c4 <__assert_fail@plt+0x488>
   114ac:	cmp	r0, #256	; 0x100
   114b0:	beq	11484 <__assert_fail@plt+0x448>
   114b4:	movw	r1, #257	; 0x101
   114b8:	cmp	r0, r1
   114bc:	beq	11434 <__assert_fail@plt+0x3f8>
   114c0:	b	115b0 <__assert_fail@plt+0x574>
   114c4:	cmn	r0, #1
   114c8:	bne	11510 <__assert_fail@plt+0x4d4>
   114cc:	movw	r7, #24888	; 0x6138
   114d0:	movt	r7, #2
   114d4:	ldr	r0, [r7]
   114d8:	cmp	r0, r5
   114dc:	bne	11570 <__assert_fail@plt+0x534>
   114e0:	mov	r0, r9
   114e4:	bl	116c0 <__assert_fail@plt+0x684>
   114e8:	subs	r2, r0, r6
   114ec:	mov	r0, #1
   114f0:	movls	r2, r0
   114f4:	movw	r1, #20648	; 0x50a8
   114f8:	movt	r1, #1
   114fc:	mov	r0, #1
   11500:	bl	10fa0 <__printf_chk@plt>
   11504:	mov	r0, #0
   11508:	sub	sp, fp, #28
   1150c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11510:	cmn	r0, #3
   11514:	bne	11560 <__assert_fail@plt+0x524>
   11518:	movw	r0, #24808	; 0x60e8
   1151c:	movt	r0, #2
   11520:	ldr	r3, [r0]
   11524:	movw	r0, #24900	; 0x6144
   11528:	movt	r0, #2
   1152c:	ldr	r0, [r0]
   11530:	mov	r1, #0
   11534:	movw	r2, #20598	; 0x5076
   11538:	movt	r2, #1
   1153c:	str	r2, [sp]
   11540:	str	r1, [sp, #4]
   11544:	movw	r1, #20554	; 0x504a
   11548:	movt	r1, #1
   1154c:	movw	r2, #20584	; 0x5068
   11550:	movt	r2, #1
   11554:	bl	13908 <__assert_fail@plt+0x28cc>
   11558:	mov	r0, #0
   1155c:	bl	10f4c <exit@plt>
   11560:	cmn	r0, #2
   11564:	bne	115b0 <__assert_fail@plt+0x574>
   11568:	mov	r0, #0
   1156c:	bl	11138 <__assert_fail@plt+0xfc>
   11570:	movw	r1, #20631	; 0x5097
   11574:	movt	r1, #1
   11578:	mov	r0, #0
   1157c:	mov	r2, #5
   11580:	bl	10e68 <dcgettext@plt>
   11584:	mov	r5, r0
   11588:	ldr	r0, [r7]
   1158c:	ldr	r0, [r4, r0, lsl #2]
   11590:	bl	13138 <__assert_fail@plt+0x20fc>
   11594:	mov	r3, r0
   11598:	mov	r0, #0
   1159c:	mov	r1, #0
   115a0:	mov	r2, r5
   115a4:	bl	10eec <error@plt>
   115a8:	mov	r0, #1
   115ac:	bl	11138 <__assert_fail@plt+0xfc>
   115b0:	mov	r0, #1
   115b4:	bl	11138 <__assert_fail@plt+0xfc>
   115b8:	movw	r1, #24912	; 0x6150
   115bc:	movt	r1, #2
   115c0:	str	r0, [r1]
   115c4:	bx	lr
   115c8:	movw	r1, #24916	; 0x6154
   115cc:	movt	r1, #2
   115d0:	strb	r0, [r1]
   115d4:	bx	lr
   115d8:	push	{r4, r5, r6, sl, fp, lr}
   115dc:	add	fp, sp, #16
   115e0:	sub	sp, sp, #8
   115e4:	movw	r0, #24900	; 0x6144
   115e8:	movt	r0, #2
   115ec:	ldr	r0, [r0]
   115f0:	bl	1482c <__assert_fail@plt+0x37f0>
   115f4:	cmp	r0, #0
   115f8:	beq	11620 <__assert_fail@plt+0x5e4>
   115fc:	movw	r0, #24916	; 0x6154
   11600:	movt	r0, #2
   11604:	ldrb	r0, [r0]
   11608:	cmp	r0, #0
   1160c:	beq	11640 <__assert_fail@plt+0x604>
   11610:	bl	10f7c <__errno_location@plt>
   11614:	ldr	r0, [r0]
   11618:	cmp	r0, #32
   1161c:	bne	11640 <__assert_fail@plt+0x604>
   11620:	movw	r0, #24896	; 0x6140
   11624:	movt	r0, #2
   11628:	ldr	r0, [r0]
   1162c:	bl	1482c <__assert_fail@plt+0x37f0>
   11630:	cmp	r0, #0
   11634:	subeq	sp, fp, #16
   11638:	popeq	{r4, r5, r6, sl, fp, pc}
   1163c:	b	116b0 <__assert_fail@plt+0x674>
   11640:	movw	r1, #21143	; 0x5297
   11644:	movt	r1, #1
   11648:	mov	r0, #0
   1164c:	mov	r2, #5
   11650:	bl	10e68 <dcgettext@plt>
   11654:	mov	r4, r0
   11658:	movw	r0, #24912	; 0x6150
   1165c:	movt	r0, #2
   11660:	ldr	r6, [r0]
   11664:	bl	10f7c <__errno_location@plt>
   11668:	ldr	r5, [r0]
   1166c:	cmp	r6, #0
   11670:	bne	1168c <__assert_fail@plt+0x650>
   11674:	movw	r2, #21159	; 0x52a7
   11678:	movt	r2, #1
   1167c:	mov	r0, #0
   11680:	mov	r1, r5
   11684:	mov	r3, r4
   11688:	b	116ac <__assert_fail@plt+0x670>
   1168c:	mov	r0, r6
   11690:	bl	12fe8 <__assert_fail@plt+0x1fac>
   11694:	mov	r3, r0
   11698:	str	r4, [sp]
   1169c:	movw	r2, #21155	; 0x52a3
   116a0:	movt	r2, #1
   116a4:	mov	r0, #0
   116a8:	mov	r1, r5
   116ac:	bl	10eec <error@plt>
   116b0:	movw	r0, #24812	; 0x60ec
   116b4:	movt	r0, #2
   116b8:	ldr	r0, [r0]
   116bc:	bl	10e2c <_exit@plt>
   116c0:	push	{r4, r5, fp, lr}
   116c4:	add	fp, sp, #8
   116c8:	mvn	r4, #0
   116cc:	cmp	r0, #2
   116d0:	bne	11728 <__assert_fail@plt+0x6ec>
   116d4:	movw	r0, #21162	; 0x52aa
   116d8:	movt	r0, #1
   116dc:	bl	10ef8 <getenv@plt>
   116e0:	bl	1173c <__assert_fail@plt+0x700>
   116e4:	mov	r5, r0
   116e8:	movw	r0, #21178	; 0x52ba
   116ec:	movt	r0, #1
   116f0:	bl	10ef8 <getenv@plt>
   116f4:	bl	1173c <__assert_fail@plt+0x700>
   116f8:	mov	r1, r0
   116fc:	cmp	r0, #0
   11700:	mvneq	r1, #0
   11704:	cmp	r5, r1
   11708:	mov	r4, r1
   1170c:	movcc	r4, r5
   11710:	cmp	r5, #0
   11714:	beq	11720 <__assert_fail@plt+0x6e4>
   11718:	mov	r0, r4
   1171c:	pop	{r4, r5, fp, pc}
   11720:	mov	r0, #1
   11724:	mov	r4, r1
   11728:	bl	11830 <__assert_fail@plt+0x7f4>
   1172c:	cmp	r0, r4
   11730:	movcc	r4, r0
   11734:	mov	r0, r4
   11738:	pop	{r4, r5, fp, pc}
   1173c:	push	{r4, r5, r6, sl, fp, lr}
   11740:	add	fp, sp, #16
   11744:	sub	sp, sp, #8
   11748:	mov	r4, #0
   1174c:	cmp	r0, #0
   11750:	beq	1181c <__assert_fail@plt+0x7e0>
   11754:	mov	r5, r0
   11758:	ldrb	r0, [r0]
   1175c:	cmp	r0, #0
   11760:	bne	11774 <__assert_fail@plt+0x738>
   11764:	b	11784 <__assert_fail@plt+0x748>
   11768:	ldrb	r0, [r5, #1]!
   1176c:	cmp	r0, #0
   11770:	beq	11784 <__assert_fail@plt+0x748>
   11774:	uxtb	r0, r0
   11778:	bl	14794 <__assert_fail@plt+0x3758>
   1177c:	cmp	r0, #0
   11780:	bne	11768 <__assert_fail@plt+0x72c>
   11784:	ldrb	r0, [r5]
   11788:	bl	145a8 <__assert_fail@plt+0x356c>
   1178c:	cmp	r0, #0
   11790:	beq	1181c <__assert_fail@plt+0x7e0>
   11794:	mov	r0, #0
   11798:	str	r0, [sp, #4]
   1179c:	add	r1, sp, #4
   117a0:	mov	r0, r5
   117a4:	mov	r2, #10
   117a8:	bl	10f58 <strtoul@plt>
   117ac:	mov	r4, r0
   117b0:	ldr	r0, [sp, #4]
   117b4:	cmp	r0, #0
   117b8:	beq	11818 <__assert_fail@plt+0x7dc>
   117bc:	ldr	r5, [sp, #4]
   117c0:	ldrb	r0, [r5]
   117c4:	cmp	r0, #0
   117c8:	beq	1181c <__assert_fail@plt+0x7e0>
   117cc:	ldr	r6, [sp, #4]
   117d0:	bl	14794 <__assert_fail@plt+0x3758>
   117d4:	cmp	r0, #0
   117d8:	beq	11804 <__assert_fail@plt+0x7c8>
   117dc:	add	r5, r5, #1
   117e0:	ldrb	r0, [r5]
   117e4:	cmp	r0, #0
   117e8:	beq	11828 <__assert_fail@plt+0x7ec>
   117ec:	bl	14794 <__assert_fail@plt+0x3758>
   117f0:	add	r5, r5, #1
   117f4:	cmp	r0, #0
   117f8:	bne	117e0 <__assert_fail@plt+0x7a4>
   117fc:	sub	r6, r5, #1
   11800:	mov	r5, r6
   11804:	str	r6, [sp, #4]
   11808:	ldrb	r0, [r5]
   1180c:	cmp	r0, #0
   11810:	cmpne	r0, #44	; 0x2c
   11814:	beq	1181c <__assert_fail@plt+0x7e0>
   11818:	mov	r4, #0
   1181c:	mov	r0, r4
   11820:	sub	sp, fp, #16
   11824:	pop	{r4, r5, r6, sl, fp, pc}
   11828:	str	r5, [sp, #4]
   1182c:	b	1181c <__assert_fail@plt+0x7e0>
   11830:	push	{r4, sl, fp, lr}
   11834:	add	fp, sp, #8
   11838:	cmp	r0, #1
   1183c:	bne	1186c <__assert_fail@plt+0x830>
   11840:	bl	118b8 <__assert_fail@plt+0x87c>
   11844:	mov	r4, r0
   11848:	cmp	r0, #0
   1184c:	bne	118a4 <__assert_fail@plt+0x868>
   11850:	mov	r0, #84	; 0x54
   11854:	bl	10e74 <sysconf@plt>
   11858:	mov	r4, r0
   1185c:	cmp	r0, #0
   11860:	movle	r4, #1
   11864:	mov	r0, r4
   11868:	pop	{r4, sl, fp, pc}
   1186c:	mov	r0, #83	; 0x53
   11870:	bl	10e74 <sysconf@plt>
   11874:	mov	r4, r0
   11878:	sub	r0, r0, #1
   1187c:	cmp	r0, #1
   11880:	bhi	11894 <__assert_fail@plt+0x858>
   11884:	bl	118b8 <__assert_fail@plt+0x87c>
   11888:	cmp	r0, r4
   1188c:	bhi	11898 <__assert_fail@plt+0x85c>
   11890:	b	118a4 <__assert_fail@plt+0x868>
   11894:	mov	r0, r4
   11898:	cmp	r0, #0
   1189c:	mov	r4, r0
   118a0:	ble	118ac <__assert_fail@plt+0x870>
   118a4:	mov	r0, r4
   118a8:	pop	{r4, sl, fp, pc}
   118ac:	mov	r4, #1
   118b0:	mov	r0, r4
   118b4:	pop	{r4, sl, fp, pc}
   118b8:	push	{r4, sl, fp, lr}
   118bc:	add	fp, sp, #8
   118c0:	sub	sp, sp, #128	; 0x80
   118c4:	mov	r4, #0
   118c8:	mov	r2, sp
   118cc:	mov	r0, #0
   118d0:	mov	r1, #128	; 0x80
   118d4:	bl	1100c <sched_getaffinity@plt>
   118d8:	cmp	r0, #0
   118dc:	bne	118f4 <__assert_fail@plt+0x8b8>
   118e0:	mov	r1, sp
   118e4:	mov	r0, #128	; 0x80
   118e8:	bl	10e50 <__sched_cpucount@plt>
   118ec:	cmp	r0, #0
   118f0:	movne	r4, r0
   118f4:	mov	r0, r4
   118f8:	sub	sp, fp, #8
   118fc:	pop	{r4, sl, fp, pc}
   11900:	push	{r4, r5, fp, lr}
   11904:	add	fp, sp, #8
   11908:	cmp	r0, #0
   1190c:	beq	119a0 <__assert_fail@plt+0x964>
   11910:	mov	r4, r0
   11914:	mov	r1, #47	; 0x2f
   11918:	bl	10ff4 <strrchr@plt>
   1191c:	cmp	r0, #0
   11920:	mov	r5, r4
   11924:	addne	r5, r0, #1
   11928:	sub	r0, r5, r4
   1192c:	cmp	r0, #7
   11930:	blt	11984 <__assert_fail@plt+0x948>
   11934:	sub	r0, r5, #7
   11938:	movw	r1, #21251	; 0x5303
   1193c:	movt	r1, #1
   11940:	mov	r2, #7
   11944:	bl	11024 <strncmp@plt>
   11948:	cmp	r0, #0
   1194c:	bne	11984 <__assert_fail@plt+0x948>
   11950:	movw	r1, #21259	; 0x530b
   11954:	movt	r1, #1
   11958:	mov	r0, r5
   1195c:	mov	r2, #3
   11960:	bl	11024 <strncmp@plt>
   11964:	cmp	r0, #0
   11968:	beq	11974 <__assert_fail@plt+0x938>
   1196c:	mov	r4, r5
   11970:	b	11984 <__assert_fail@plt+0x948>
   11974:	add	r4, r5, #3
   11978:	movw	r0, #24880	; 0x6130
   1197c:	movt	r0, #2
   11980:	str	r4, [r0]
   11984:	movw	r0, #24884	; 0x6134
   11988:	movt	r0, #2
   1198c:	str	r4, [r0]
   11990:	movw	r0, #24920	; 0x6158
   11994:	movt	r0, #2
   11998:	str	r4, [r0]
   1199c:	pop	{r4, r5, fp, pc}
   119a0:	movw	r0, #24896	; 0x6140
   119a4:	movt	r0, #2
   119a8:	ldr	r3, [r0]
   119ac:	movw	r0, #21195	; 0x52cb
   119b0:	movt	r0, #1
   119b4:	mov	r1, #55	; 0x37
   119b8:	mov	r2, #1
   119bc:	bl	10ea4 <fwrite@plt>
   119c0:	bl	11030 <abort@plt>
   119c4:	push	{r4, r5, r6, sl, fp, lr}
   119c8:	add	fp, sp, #16
   119cc:	mov	r4, r0
   119d0:	movw	r0, #24928	; 0x6160
   119d4:	movt	r0, #2
   119d8:	cmp	r4, #0
   119dc:	moveq	r4, r0
   119e0:	bl	10f7c <__errno_location@plt>
   119e4:	mov	r5, r0
   119e8:	ldr	r6, [r0]
   119ec:	mov	r0, r4
   119f0:	mov	r1, #48	; 0x30
   119f4:	bl	13d04 <__assert_fail@plt+0x2cc8>
   119f8:	str	r6, [r5]
   119fc:	pop	{r4, r5, r6, sl, fp, pc}
   11a00:	movw	r1, #24928	; 0x6160
   11a04:	movt	r1, #2
   11a08:	cmp	r0, #0
   11a0c:	movne	r1, r0
   11a10:	ldr	r0, [r1]
   11a14:	bx	lr
   11a18:	movw	r2, #24928	; 0x6160
   11a1c:	movt	r2, #2
   11a20:	cmp	r0, #0
   11a24:	movne	r2, r0
   11a28:	str	r1, [r2]
   11a2c:	bx	lr
   11a30:	movw	r3, #24928	; 0x6160
   11a34:	movt	r3, #2
   11a38:	cmp	r0, #0
   11a3c:	movne	r3, r0
   11a40:	ubfx	r0, r1, #5, #3
   11a44:	add	r0, r3, r0, lsl #2
   11a48:	ldr	r3, [r0, #8]
   11a4c:	and	r1, r1, #31
   11a50:	eor	r2, r2, r3, lsr r1
   11a54:	and	r2, r2, #1
   11a58:	eor	r2, r3, r2, lsl r1
   11a5c:	str	r2, [r0, #8]
   11a60:	mov	r0, #1
   11a64:	and	r0, r0, r3, lsr r1
   11a68:	bx	lr
   11a6c:	movw	r2, #24928	; 0x6160
   11a70:	movt	r2, #2
   11a74:	cmp	r0, #0
   11a78:	movne	r2, r0
   11a7c:	ldr	r0, [r2, #4]
   11a80:	str	r1, [r2, #4]
   11a84:	bx	lr
   11a88:	movw	r3, #24928	; 0x6160
   11a8c:	movt	r3, #2
   11a90:	cmp	r0, #0
   11a94:	movne	r3, r0
   11a98:	mov	r0, #10
   11a9c:	str	r0, [r3]
   11aa0:	cmp	r1, #0
   11aa4:	cmpne	r2, #0
   11aa8:	bne	11ab8 <__assert_fail@plt+0xa7c>
   11aac:	push	{fp, lr}
   11ab0:	mov	fp, sp
   11ab4:	bl	11030 <abort@plt>
   11ab8:	str	r1, [r3, #40]	; 0x28
   11abc:	str	r2, [r3, #44]	; 0x2c
   11ac0:	bx	lr
   11ac4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ac8:	add	fp, sp, #28
   11acc:	sub	sp, sp, #20
   11ad0:	mov	r8, r3
   11ad4:	mov	r9, r2
   11ad8:	mov	sl, r1
   11adc:	mov	r7, r0
   11ae0:	ldr	r0, [fp, #8]
   11ae4:	movw	r5, #24928	; 0x6160
   11ae8:	movt	r5, #2
   11aec:	cmp	r0, #0
   11af0:	movne	r5, r0
   11af4:	bl	10f7c <__errno_location@plt>
   11af8:	mov	r4, r0
   11afc:	ldm	r5, {r0, r1}
   11b00:	ldr	r2, [r5, #40]	; 0x28
   11b04:	ldr	r3, [r5, #44]	; 0x2c
   11b08:	ldr	r6, [r4]
   11b0c:	add	r5, r5, #8
   11b10:	stm	sp, {r0, r1, r5}
   11b14:	str	r2, [sp, #12]
   11b18:	str	r3, [sp, #16]
   11b1c:	mov	r0, r7
   11b20:	mov	r1, sl
   11b24:	mov	r2, r9
   11b28:	mov	r3, r8
   11b2c:	bl	11b3c <__assert_fail@plt+0xb00>
   11b30:	str	r6, [r4]
   11b34:	sub	sp, fp, #28
   11b38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b40:	add	fp, sp, #28
   11b44:	sub	sp, sp, #156	; 0x9c
   11b48:	mov	r9, r3
   11b4c:	str	r2, [fp, #-84]	; 0xffffffac
   11b50:	mov	r6, r1
   11b54:	mov	r7, r0
   11b58:	ldr	r0, [fp, #12]
   11b5c:	and	r1, r0, #4
   11b60:	str	r1, [sp, #32]
   11b64:	and	r1, r0, #1
   11b68:	str	r1, [sp, #36]	; 0x24
   11b6c:	ubfx	sl, r0, #1, #1
   11b70:	bl	10ebc <__ctype_get_mb_cur_max@plt>
   11b74:	str	r0, [sp, #40]	; 0x28
   11b78:	ldr	r0, [fp, #24]
   11b7c:	str	r0, [sp, #76]	; 0x4c
   11b80:	ldr	r0, [fp, #20]
   11b84:	str	r0, [sp, #68]	; 0x44
   11b88:	ldr	r0, [fp, #8]
   11b8c:	str	r0, [fp, #-60]	; 0xffffffc4
   11b90:	mov	r0, #0
   11b94:	str	r0, [sp, #72]	; 0x48
   11b98:	mov	r0, #0
   11b9c:	str	r0, [sp, #92]	; 0x5c
   11ba0:	mov	r0, #0
   11ba4:	str	r0, [fp, #-72]	; 0xffffffb8
   11ba8:	mov	r0, #0
   11bac:	mov	r1, #0
   11bb0:	str	r1, [fp, #-56]	; 0xffffffc8
   11bb4:	mov	r1, #0
   11bb8:	str	r1, [sp, #56]	; 0x38
   11bbc:	mov	r5, #1
   11bc0:	str	r7, [sp, #80]	; 0x50
   11bc4:	mov	r4, r6
   11bc8:	ldr	r6, [fp, #-60]	; 0xffffffc4
   11bcc:	cmp	r6, #10
   11bd0:	bhi	12b38 <__assert_fail@plt+0x1afc>
   11bd4:	add	r1, pc, #20
   11bd8:	mov	r8, #0
   11bdc:	mov	r2, #1
   11be0:	mov	r3, #0
   11be4:	ldr	ip, [fp, #-84]	; 0xffffffac
   11be8:	mov	lr, r9
   11bec:	ldr	pc, [r1, r6, lsl #2]
   11bf0:	andeq	r1, r1, r8, asr #25
   11bf4:	strdeq	r1, [r1], -r8
   11bf8:			; <UNDEFINED> instruction: 0x00011cb8
   11bfc:			; <UNDEFINED> instruction: 0x00011cb0
   11c00:	andeq	r1, r1, ip, ror #25
   11c04:	andeq	r1, r1, ip, asr #26
   11c08:	ldrdeq	r1, [r1], -r8
   11c0c:	andeq	r1, r1, r8, lsr #27
   11c10:	andeq	r1, r1, ip, lsl ip
   11c14:	andeq	r1, r1, ip, lsl ip
   11c18:	andeq	r1, r1, r4, asr #24
   11c1c:	movw	r0, #21341	; 0x535d
   11c20:	movt	r0, #1
   11c24:	mov	r1, r6
   11c28:	bl	13144 <__assert_fail@plt+0x2108>
   11c2c:	str	r0, [sp, #68]	; 0x44
   11c30:	movw	r0, #21343	; 0x535f
   11c34:	movt	r0, #1
   11c38:	mov	r1, r6
   11c3c:	bl	13144 <__assert_fail@plt+0x2108>
   11c40:	str	r0, [sp, #76]	; 0x4c
   11c44:	mov	r8, #0
   11c48:	tst	sl, #1
   11c4c:	bne	11c84 <__assert_fail@plt+0xc48>
   11c50:	ldr	r0, [sp, #68]	; 0x44
   11c54:	ldrb	r0, [r0]
   11c58:	cmp	r0, #0
   11c5c:	beq	11c84 <__assert_fail@plt+0xc48>
   11c60:	ldr	r1, [sp, #68]	; 0x44
   11c64:	add	r1, r1, #1
   11c68:	mov	r8, #0
   11c6c:	cmp	r8, r4
   11c70:	strbcc	r0, [r7, r8]
   11c74:	ldrb	r0, [r1, r8]
   11c78:	add	r8, r8, #1
   11c7c:	cmp	r0, #0
   11c80:	bne	11c6c <__assert_fail@plt+0xc30>
   11c84:	ldr	r6, [sp, #76]	; 0x4c
   11c88:	mov	r0, r6
   11c8c:	bl	10f64 <strlen@plt>
   11c90:	str	r0, [fp, #-72]	; 0xffffffb8
   11c94:	str	r6, [sp, #92]	; 0x5c
   11c98:	mov	r2, #1
   11c9c:	mov	r3, sl
   11ca0:	ldr	ip, [fp, #-84]	; 0xffffffac
   11ca4:	mov	lr, r9
   11ca8:	ldr	r6, [fp, #-60]	; 0xffffffc4
   11cac:	b	11da8 <__assert_fail@plt+0xd6c>
   11cb0:	mov	r0, #1
   11cb4:	b	11cf8 <__assert_fail@plt+0xcbc>
   11cb8:	tst	sl, #1
   11cbc:	bne	11cf8 <__assert_fail@plt+0xcbc>
   11cc0:	mov	r2, r0
   11cc4:	b	11d20 <__assert_fail@plt+0xce4>
   11cc8:	mov	r6, #0
   11ccc:	mov	r8, #0
   11cd0:	mov	r2, r0
   11cd4:	b	11da4 <__assert_fail@plt+0xd68>
   11cd8:	mov	r0, #1
   11cdc:	str	r0, [fp, #-72]	; 0xffffffb8
   11ce0:	mov	r8, #0
   11ce4:	mov	r6, #5
   11ce8:	b	11d64 <__assert_fail@plt+0xd28>
   11cec:	mov	r2, #1
   11cf0:	tst	sl, #1
   11cf4:	beq	11d20 <__assert_fail@plt+0xce4>
   11cf8:	mov	r1, #1
   11cfc:	str	r1, [fp, #-72]	; 0xffffffb8
   11d00:	mov	r8, #0
   11d04:	mov	r6, #2
   11d08:	movw	r1, #21343	; 0x535f
   11d0c:	movt	r1, #1
   11d10:	str	r1, [sp, #92]	; 0x5c
   11d14:	mov	r2, r0
   11d18:	mov	r3, #1
   11d1c:	b	11da8 <__assert_fail@plt+0xd6c>
   11d20:	mov	r8, #1
   11d24:	mov	r6, #2
   11d28:	cmp	r4, #0
   11d2c:	movne	r0, #39	; 0x27
   11d30:	strbne	r0, [r7]
   11d34:	movw	r0, #21343	; 0x535f
   11d38:	movt	r0, #1
   11d3c:	str	r0, [sp, #92]	; 0x5c
   11d40:	mov	r0, #1
   11d44:	str	r0, [fp, #-72]	; 0xffffffb8
   11d48:	b	11da4 <__assert_fail@plt+0xd68>
   11d4c:	mov	r6, #5
   11d50:	tst	sl, #1
   11d54:	beq	11d7c <__assert_fail@plt+0xd40>
   11d58:	mov	r0, #1
   11d5c:	str	r0, [fp, #-72]	; 0xffffffb8
   11d60:	mov	r8, #0
   11d64:	movw	r0, #21339	; 0x535b
   11d68:	movt	r0, #1
   11d6c:	str	r0, [sp, #92]	; 0x5c
   11d70:	mov	r2, #1
   11d74:	mov	r3, #1
   11d78:	b	11da8 <__assert_fail@plt+0xd6c>
   11d7c:	cmp	r4, #0
   11d80:	movne	r0, #34	; 0x22
   11d84:	strbne	r0, [r7]
   11d88:	mov	r8, #1
   11d8c:	movw	r0, #21339	; 0x535b
   11d90:	movt	r0, #1
   11d94:	str	r0, [sp, #92]	; 0x5c
   11d98:	mov	r0, #1
   11d9c:	str	r0, [fp, #-72]	; 0xffffffb8
   11da0:	mov	r2, #1
   11da4:	mov	r3, #0
   11da8:	ldr	r0, [fp, #16]
   11dac:	cmp	r0, #0
   11db0:	movwne	r0, #1
   11db4:	and	r0, r0, r3
   11db8:	str	r0, [fp, #-88]	; 0xffffffa8
   11dbc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11dc0:	cmp	r0, #0
   11dc4:	movwne	r0, #1
   11dc8:	and	r1, r0, r3
   11dcc:	and	r1, r2, r1
   11dd0:	str	r1, [sp, #48]	; 0x30
   11dd4:	str	r6, [fp, #-60]	; 0xffffffc4
   11dd8:	subs	r6, r6, #2
   11ddc:	clz	r1, r6
   11de0:	lsr	r1, r1, #5
   11de4:	and	r1, r1, r3
   11de8:	str	r1, [sp, #60]	; 0x3c
   11dec:	str	r6, [fp, #-80]	; 0xffffffb0
   11df0:	mov	r1, r6
   11df4:	movwne	r1, #1
   11df8:	str	r3, [fp, #-76]	; 0xffffffb4
   11dfc:	eor	r3, r3, #1
   11e00:	str	r3, [sp, #88]	; 0x58
   11e04:	orr	r3, r1, r3
   11e08:	str	r3, [sp, #64]	; 0x40
   11e0c:	and	r1, r1, r2
   11e10:	str	r1, [fp, #-68]	; 0xffffffbc
   11e14:	and	r0, r0, r1
   11e18:	str	r0, [fp, #-64]	; 0xffffffc0
   11e1c:	str	r2, [sp, #84]	; 0x54
   11e20:	eor	r0, r2, #1
   11e24:	str	r0, [sp, #52]	; 0x34
   11e28:	mov	r6, #0
   11e2c:	cmn	lr, #1
   11e30:	beq	11e40 <__assert_fail@plt+0xe04>
   11e34:	cmp	r6, lr
   11e38:	bne	11e4c <__assert_fail@plt+0xe10>
   11e3c:	b	129b8 <__assert_fail@plt+0x197c>
   11e40:	ldrb	r0, [ip, r6]
   11e44:	cmp	r0, #0
   11e48:	beq	129b8 <__assert_fail@plt+0x197c>
   11e4c:	str	r5, [fp, #-48]	; 0xffffffd0
   11e50:	mov	sl, #0
   11e54:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11e58:	cmp	r0, #0
   11e5c:	beq	11e90 <__assert_fail@plt+0xe54>
   11e60:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11e64:	add	r5, r6, r0
   11e68:	cmp	r0, #2
   11e6c:	bcc	11e88 <__assert_fail@plt+0xe4c>
   11e70:	cmn	lr, #1
   11e74:	bne	11e88 <__assert_fail@plt+0xe4c>
   11e78:	mov	r0, ip
   11e7c:	bl	10f64 <strlen@plt>
   11e80:	ldr	ip, [fp, #-84]	; 0xffffffac
   11e84:	mov	lr, r0
   11e88:	cmp	r5, lr
   11e8c:	bls	11e9c <__assert_fail@plt+0xe60>
   11e90:	mov	r0, #0
   11e94:	str	r0, [fp, #-52]	; 0xffffffcc
   11e98:	b	11ee8 <__assert_fail@plt+0xeac>
   11e9c:	mov	r5, r4
   11ea0:	mov	r4, lr
   11ea4:	add	r0, ip, r6
   11ea8:	ldr	r1, [sp, #92]	; 0x5c
   11eac:	ldr	r2, [fp, #-72]	; 0xffffffb8
   11eb0:	bl	10e5c <memcmp@plt>
   11eb4:	cmp	r0, #0
   11eb8:	mov	r1, r0
   11ebc:	movwne	r1, #1
   11ec0:	ldr	r2, [sp, #88]	; 0x58
   11ec4:	orr	r1, r1, r2
   11ec8:	tst	r1, #1
   11ecc:	beq	12a7c <__assert_fail@plt+0x1a40>
   11ed0:	clz	r0, r0
   11ed4:	lsr	r0, r0, #5
   11ed8:	str	r0, [fp, #-52]	; 0xffffffcc
   11edc:	ldr	ip, [fp, #-84]	; 0xffffffac
   11ee0:	mov	lr, r4
   11ee4:	mov	r4, r5
   11ee8:	ldrb	r5, [ip, r6]
   11eec:	cmp	r5, #126	; 0x7e
   11ef0:	bhi	122ac <__assert_fail@plt+0x1270>
   11ef4:	mov	r9, #1
   11ef8:	mov	r2, #110	; 0x6e
   11efc:	mov	r0, #97	; 0x61
   11f00:	add	r3, pc, #4
   11f04:	mov	r1, #0
   11f08:	ldr	pc, [r3, r5, lsl #2]
   11f0c:	andeq	r2, r1, r4, lsr #3
   11f10:	andeq	r2, r1, ip, lsr #5
   11f14:	andeq	r2, r1, ip, lsr #5
   11f18:	andeq	r2, r1, ip, lsr #5
   11f1c:	andeq	r2, r1, ip, lsr #5
   11f20:	andeq	r2, r1, ip, lsr #5
   11f24:	andeq	r2, r1, ip, lsr #5
   11f28:	andeq	r2, r1, r0, ror r3
   11f2c:	andeq	r2, r1, r4, lsl #3
   11f30:	andeq	r2, r1, ip, ror r1
   11f34:	muleq	r1, r0, r1
   11f38:	andeq	r2, r1, r4, lsl r2
   11f3c:	andeq	r2, r1, r4, ror r1
   11f40:	andeq	r2, r1, ip, lsl #3
   11f44:	andeq	r2, r1, ip, lsr #5
   11f48:	andeq	r2, r1, ip, lsr #5
   11f4c:	andeq	r2, r1, ip, lsr #5
   11f50:	andeq	r2, r1, ip, lsr #5
   11f54:	andeq	r2, r1, ip, lsr #5
   11f58:	andeq	r2, r1, ip, lsr #5
   11f5c:	andeq	r2, r1, ip, lsr #5
   11f60:	andeq	r2, r1, ip, lsr #5
   11f64:	andeq	r2, r1, ip, lsr #5
   11f68:	andeq	r2, r1, ip, lsr #5
   11f6c:	andeq	r2, r1, ip, lsr #5
   11f70:	andeq	r2, r1, ip, lsr #5
   11f74:	andeq	r2, r1, ip, lsr #5
   11f78:	andeq	r2, r1, ip, lsr #5
   11f7c:	andeq	r2, r1, ip, lsr #5
   11f80:	andeq	r2, r1, ip, lsr #5
   11f84:	andeq	r2, r1, ip, lsr #5
   11f88:	andeq	r2, r1, ip, lsr #5
   11f8c:	andeq	r2, r1, r0, lsr #6
   11f90:	andeq	r2, r1, r4, lsr #6
   11f94:	andeq	r2, r1, r4, lsr #6
   11f98:	andeq	r2, r1, ip, lsl r1
   11f9c:	andeq	r2, r1, r4, lsr #6
   11fa0:	andeq	r2, r1, r8, lsl #2
   11fa4:	andeq	r2, r1, r4, lsr #6
   11fa8:	andeq	r2, r1, ip, lsl r2
   11fac:	andeq	r2, r1, r4, lsr #6
   11fb0:	andeq	r2, r1, r4, lsr #6
   11fb4:	andeq	r2, r1, r4, lsr #6
   11fb8:	andeq	r2, r1, r8, lsl #2
   11fbc:	andeq	r2, r1, r8, lsl #2
   11fc0:	andeq	r2, r1, r8, lsl #2
   11fc4:	andeq	r2, r1, r8, lsl #2
   11fc8:	andeq	r2, r1, r8, lsl #2
   11fcc:	andeq	r2, r1, r8, lsl #2
   11fd0:	andeq	r2, r1, r8, lsl #2
   11fd4:	andeq	r2, r1, r8, lsl #2
   11fd8:	andeq	r2, r1, r8, lsl #2
   11fdc:	andeq	r2, r1, r8, lsl #2
   11fe0:	andeq	r2, r1, r8, lsl #2
   11fe4:	andeq	r2, r1, r8, lsl #2
   11fe8:	andeq	r2, r1, r8, lsl #2
   11fec:	andeq	r2, r1, r8, lsl #2
   11ff0:	andeq	r2, r1, r8, lsl #2
   11ff4:	andeq	r2, r1, r8, lsl #2
   11ff8:	andeq	r2, r1, r4, lsr #6
   11ffc:	andeq	r2, r1, r4, lsr #6
   12000:	andeq	r2, r1, r4, lsr #6
   12004:	andeq	r2, r1, r4, lsr #6
   12008:	andeq	r2, r1, r4, ror #3
   1200c:	andeq	r2, r1, ip, lsr #5
   12010:	andeq	r2, r1, r8, lsl #2
   12014:	andeq	r2, r1, r8, lsl #2
   12018:	andeq	r2, r1, r8, lsl #2
   1201c:	andeq	r2, r1, r8, lsl #2
   12020:	andeq	r2, r1, r8, lsl #2
   12024:	andeq	r2, r1, r8, lsl #2
   12028:	andeq	r2, r1, r8, lsl #2
   1202c:	andeq	r2, r1, r8, lsl #2
   12030:	andeq	r2, r1, r8, lsl #2
   12034:	andeq	r2, r1, r8, lsl #2
   12038:	andeq	r2, r1, r8, lsl #2
   1203c:	andeq	r2, r1, r8, lsl #2
   12040:	andeq	r2, r1, r8, lsl #2
   12044:	andeq	r2, r1, r8, lsl #2
   12048:	andeq	r2, r1, r8, lsl #2
   1204c:	andeq	r2, r1, r8, lsl #2
   12050:	andeq	r2, r1, r8, lsl #2
   12054:	andeq	r2, r1, r8, lsl #2
   12058:	andeq	r2, r1, r8, lsl #2
   1205c:	andeq	r2, r1, r8, lsl #2
   12060:	andeq	r2, r1, r8, lsl #2
   12064:	andeq	r2, r1, r8, lsl #2
   12068:	andeq	r2, r1, r8, lsl #2
   1206c:	andeq	r2, r1, r8, lsl #2
   12070:	andeq	r2, r1, r8, lsl #2
   12074:	andeq	r2, r1, r8, lsl #2
   12078:	andeq	r2, r1, r4, lsr #6
   1207c:	andeq	r2, r1, r0, asr r1
   12080:	andeq	r2, r1, r8, lsl #2
   12084:	andeq	r2, r1, r4, lsr #6
   12088:	andeq	r2, r1, r8, lsl #2
   1208c:	andeq	r2, r1, r4, lsr #6
   12090:	andeq	r2, r1, r8, lsl #2
   12094:	andeq	r2, r1, r8, lsl #2
   12098:	andeq	r2, r1, r8, lsl #2
   1209c:	andeq	r2, r1, r8, lsl #2
   120a0:	andeq	r2, r1, r8, lsl #2
   120a4:	andeq	r2, r1, r8, lsl #2
   120a8:	andeq	r2, r1, r8, lsl #2
   120ac:	andeq	r2, r1, r8, lsl #2
   120b0:	andeq	r2, r1, r8, lsl #2
   120b4:	andeq	r2, r1, r8, lsl #2
   120b8:	andeq	r2, r1, r8, lsl #2
   120bc:	andeq	r2, r1, r8, lsl #2
   120c0:	andeq	r2, r1, r8, lsl #2
   120c4:	andeq	r2, r1, r8, lsl #2
   120c8:	andeq	r2, r1, r8, lsl #2
   120cc:	andeq	r2, r1, r8, lsl #2
   120d0:	andeq	r2, r1, r8, lsl #2
   120d4:	andeq	r2, r1, r8, lsl #2
   120d8:	andeq	r2, r1, r8, lsl #2
   120dc:	andeq	r2, r1, r8, lsl #2
   120e0:	andeq	r2, r1, r8, lsl #2
   120e4:	andeq	r2, r1, r8, lsl #2
   120e8:	andeq	r2, r1, r8, lsl #2
   120ec:	andeq	r2, r1, r8, lsl #2
   120f0:	andeq	r2, r1, r8, lsl #2
   120f4:	andeq	r2, r1, r8, lsl #2
   120f8:	andeq	r2, r1, r0, lsr r1
   120fc:	andeq	r2, r1, r4, lsr #6
   12100:	andeq	r2, r1, r0, lsr r1
   12104:	andeq	r2, r1, ip, lsl r1
   12108:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1210c:	cmp	r0, #0
   12110:	beq	12384 <__assert_fail@plt+0x1348>
   12114:	ldr	r0, [fp, #16]
   12118:	b	12388 <__assert_fail@plt+0x134c>
   1211c:	mov	r9, #0
   12120:	cmp	r6, #0
   12124:	beq	12320 <__assert_fail@plt+0x12e4>
   12128:	mov	sl, #0
   1212c:	b	12108 <__assert_fail@plt+0x10cc>
   12130:	mov	r9, #0
   12134:	cmn	lr, #1
   12138:	beq	12304 <__assert_fail@plt+0x12c8>
   1213c:	cmp	r6, #0
   12140:	bne	12128 <__assert_fail@plt+0x10ec>
   12144:	cmp	lr, #1
   12148:	beq	12320 <__assert_fail@plt+0x12e4>
   1214c:	b	12128 <__assert_fail@plt+0x10ec>
   12150:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12154:	cmp	r0, #2
   12158:	bne	1234c <__assert_fail@plt+0x1310>
   1215c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12160:	tst	r0, #1
   12164:	bne	12a94 <__assert_fail@plt+0x1a58>
   12168:	mov	sl, #0
   1216c:	mov	r0, #92	; 0x5c
   12170:	b	12360 <__assert_fail@plt+0x1324>
   12174:	mov	r0, #102	; 0x66
   12178:	b	12370 <__assert_fail@plt+0x1334>
   1217c:	mov	r2, #116	; 0x74
   12180:	b	12190 <__assert_fail@plt+0x1154>
   12184:	mov	r0, #98	; 0x62
   12188:	b	12370 <__assert_fail@plt+0x1334>
   1218c:	mov	r2, #114	; 0x72
   12190:	ldr	r0, [sp, #64]	; 0x40
   12194:	tst	r0, #1
   12198:	mov	r0, r2
   1219c:	bne	12370 <__assert_fail@plt+0x1334>
   121a0:	b	12a94 <__assert_fail@plt+0x1a58>
   121a4:	ldr	r0, [sp, #84]	; 0x54
   121a8:	tst	r0, #1
   121ac:	beq	12460 <__assert_fail@plt+0x1424>
   121b0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   121b4:	tst	r0, #1
   121b8:	bne	12a94 <__assert_fail@plt+0x1a58>
   121bc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   121c0:	cmp	r0, #2
   121c4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   121c8:	movwne	r0, #1
   121cc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   121d0:	orr	r0, r0, r2
   121d4:	tst	r0, #1
   121d8:	beq	12854 <__assert_fail@plt+0x1818>
   121dc:	mov	r0, r8
   121e0:	b	12888 <__assert_fail@plt+0x184c>
   121e4:	mov	sl, #0
   121e8:	mov	r5, #63	; 0x3f
   121ec:	ldr	r0, [fp, #-60]	; 0xffffffc4
   121f0:	cmp	r0, #5
   121f4:	beq	12614 <__assert_fail@plt+0x15d8>
   121f8:	cmp	r0, #2
   121fc:	bne	126b4 <__assert_fail@plt+0x1678>
   12200:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12204:	tst	r0, #1
   12208:	mov	r9, #0
   1220c:	beq	12108 <__assert_fail@plt+0x10cc>
   12210:	b	12a94 <__assert_fail@plt+0x1a58>
   12214:	mov	r0, #118	; 0x76
   12218:	b	12370 <__assert_fail@plt+0x1334>
   1221c:	mov	r5, #39	; 0x27
   12220:	mov	r0, #1
   12224:	str	r0, [sp, #56]	; 0x38
   12228:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1222c:	cmp	r0, #2
   12230:	bne	12480 <__assert_fail@plt+0x1444>
   12234:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12238:	tst	r0, #1
   1223c:	bne	12a94 <__assert_fail@plt+0x1a58>
   12240:	ldr	r2, [sp, #72]	; 0x48
   12244:	cmp	r2, #0
   12248:	mov	r0, r2
   1224c:	movwne	r0, #1
   12250:	clz	r1, r4
   12254:	lsr	r1, r1, #5
   12258:	orrs	r0, r0, r1
   1225c:	moveq	r2, r4
   12260:	str	r2, [sp, #72]	; 0x48
   12264:	moveq	r4, r0
   12268:	cmp	r8, r4
   1226c:	movcc	r0, #39	; 0x27
   12270:	strbcc	r0, [r7, r8]
   12274:	add	r0, r8, #1
   12278:	cmp	r0, r4
   1227c:	movcc	r1, #92	; 0x5c
   12280:	strbcc	r1, [r7, r0]
   12284:	add	r0, r8, #2
   12288:	cmp	r0, r4
   1228c:	movcc	r1, #39	; 0x27
   12290:	strbcc	r1, [r7, r0]
   12294:	add	r8, r8, #3
   12298:	mov	r0, #0
   1229c:	str	r0, [fp, #-56]	; 0xffffffc8
   122a0:	mov	sl, #0
   122a4:	mov	r9, #1
   122a8:	b	12108 <__assert_fail@plt+0x10cc>
   122ac:	str	r4, [sp, #24]
   122b0:	ldr	r0, [sp, #40]	; 0x28
   122b4:	cmp	r0, #1
   122b8:	bne	12488 <__assert_fail@plt+0x144c>
   122bc:	str	lr, [sp, #28]
   122c0:	bl	10f40 <__ctype_b_loc@plt>
   122c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   122c8:	ldr	r0, [r0]
   122cc:	add	r0, r0, r5, lsl #1
   122d0:	ldrb	r0, [r0, #1]
   122d4:	ubfx	r9, r0, #6, #1
   122d8:	mov	r1, #1
   122dc:	ldr	r4, [sp, #24]
   122e0:	ldr	r0, [sp, #52]	; 0x34
   122e4:	orr	r0, r9, r0
   122e8:	mov	r2, r1
   122ec:	cmp	r1, #1
   122f0:	bhi	126bc <__assert_fail@plt+0x1680>
   122f4:	tst	r0, #1
   122f8:	beq	126bc <__assert_fail@plt+0x1680>
   122fc:	ldr	lr, [sp, #28]
   12300:	b	12108 <__assert_fail@plt+0x10cc>
   12304:	cmp	r6, #0
   12308:	ldrbeq	r0, [ip, #1]
   1230c:	cmpeq	r0, #0
   12310:	beq	12320 <__assert_fail@plt+0x12e4>
   12314:	mvn	lr, #0
   12318:	mov	sl, #0
   1231c:	b	12108 <__assert_fail@plt+0x10cc>
   12320:	mov	r1, #1
   12324:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12328:	cmp	r0, #2
   1232c:	bne	12344 <__assert_fail@plt+0x1308>
   12330:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12334:	tst	r0, #1
   12338:	mov	r9, r1
   1233c:	beq	12108 <__assert_fail@plt+0x10cc>
   12340:	b	12a94 <__assert_fail@plt+0x1a58>
   12344:	mov	r9, r1
   12348:	b	12108 <__assert_fail@plt+0x10cc>
   1234c:	mov	sl, #0
   12350:	mov	r0, #92	; 0x5c
   12354:	ldr	r1, [sp, #48]	; 0x30
   12358:	cmp	r1, #0
   1235c:	beq	12370 <__assert_fail@plt+0x1334>
   12360:	mov	r9, #0
   12364:	cmp	sl, #0
   12368:	beq	12920 <__assert_fail@plt+0x18e4>
   1236c:	b	1295c <__assert_fail@plt+0x1920>
   12370:	mov	r9, #0
   12374:	ldr	r1, [sp, #84]	; 0x54
   12378:	tst	r1, #1
   1237c:	mov	sl, #0
   12380:	bne	123c0 <__assert_fail@plt+0x1384>
   12384:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12388:	cmp	r0, #0
   1238c:	mov	r0, r5
   12390:	beq	123b4 <__assert_fail@plt+0x1378>
   12394:	ubfx	r0, r5, #5, #3
   12398:	ldr	r1, [fp, #16]
   1239c:	ldr	r0, [r1, r0, lsl #2]
   123a0:	and	r1, r5, #31
   123a4:	mov	r2, #1
   123a8:	tst	r0, r2, lsl r1
   123ac:	mov	r0, r5
   123b0:	bne	123c0 <__assert_fail@plt+0x1384>
   123b4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   123b8:	cmp	r1, #0
   123bc:	beq	12918 <__assert_fail@plt+0x18dc>
   123c0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   123c4:	tst	r1, #1
   123c8:	bne	12a94 <__assert_fail@plt+0x1a58>
   123cc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   123d0:	cmp	r1, #2
   123d4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   123d8:	movwne	r1, #1
   123dc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   123e0:	orr	r1, r1, r2
   123e4:	tst	r1, #1
   123e8:	beq	123f4 <__assert_fail@plt+0x13b8>
   123ec:	ldr	r5, [fp, #-48]	; 0xffffffd0
   123f0:	b	12430 <__assert_fail@plt+0x13f4>
   123f4:	cmp	r8, r4
   123f8:	movcc	r1, #39	; 0x27
   123fc:	strbcc	r1, [r7, r8]
   12400:	add	r1, r8, #1
   12404:	cmp	r1, r4
   12408:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1240c:	movcc	r2, #36	; 0x24
   12410:	strbcc	r2, [r7, r1]
   12414:	add	r1, r8, #2
   12418:	cmp	r1, r4
   1241c:	movcc	r2, #39	; 0x27
   12420:	strbcc	r2, [r7, r1]
   12424:	add	r8, r8, #3
   12428:	mov	r1, #1
   1242c:	str	r1, [fp, #-56]	; 0xffffffc8
   12430:	cmp	r8, r4
   12434:	movcc	r1, #92	; 0x5c
   12438:	strbcc	r1, [r7, r8]
   1243c:	add	r8, r8, #1
   12440:	cmp	r8, r4
   12444:	strbcc	r0, [r7, r8]
   12448:	and	r5, r5, r9
   1244c:	add	r8, r8, #1
   12450:	add	r6, r6, #1
   12454:	cmn	lr, #1
   12458:	bne	11e34 <__assert_fail@plt+0xdf8>
   1245c:	b	11e40 <__assert_fail@plt+0xe04>
   12460:	mov	r9, #0
   12464:	ldr	r0, [sp, #36]	; 0x24
   12468:	cmp	r0, #0
   1246c:	mov	sl, #0
   12470:	mov	r5, #0
   12474:	beq	12384 <__assert_fail@plt+0x1348>
   12478:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1247c:	b	12450 <__assert_fail@plt+0x1414>
   12480:	mov	r9, #1
   12484:	b	12108 <__assert_fail@plt+0x10cc>
   12488:	mov	r0, #0
   1248c:	str	r0, [fp, #-36]	; 0xffffffdc
   12490:	str	r0, [fp, #-40]	; 0xffffffd8
   12494:	cmn	lr, #1
   12498:	bne	124ac <__assert_fail@plt+0x1470>
   1249c:	mov	r0, ip
   124a0:	bl	10f64 <strlen@plt>
   124a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   124a8:	mov	lr, r0
   124ac:	add	r0, ip, r6
   124b0:	str	r0, [sp, #20]
   124b4:	mov	r9, #1
   124b8:	mov	r7, #0
   124bc:	sub	r4, fp, #40	; 0x28
   124c0:	str	lr, [sp, #28]
   124c4:	str	r7, [sp, #44]	; 0x2c
   124c8:	add	r7, r7, r6
   124cc:	add	r1, ip, r7
   124d0:	sub	r2, lr, r7
   124d4:	sub	r0, fp, #44	; 0x2c
   124d8:	mov	r3, r4
   124dc:	bl	14b10 <__assert_fail@plt+0x3ad4>
   124e0:	cmp	r0, #0
   124e4:	beq	129a4 <__assert_fail@plt+0x1968>
   124e8:	cmn	r0, #1
   124ec:	beq	12964 <__assert_fail@plt+0x1928>
   124f0:	cmn	r0, #2
   124f4:	ldr	lr, [sp, #28]
   124f8:	beq	1296c <__assert_fail@plt+0x1930>
   124fc:	cmp	r0, #2
   12500:	mov	r1, #0
   12504:	movwcc	r1, #1
   12508:	ldr	r2, [sp, #60]	; 0x3c
   1250c:	eor	r2, r2, #1
   12510:	orrs	r1, r2, r1
   12514:	ldr	r4, [sp, #24]
   12518:	bne	125d8 <__assert_fail@plt+0x159c>
   1251c:	ldr	r1, [sp, #44]	; 0x2c
   12520:	ldr	r2, [sp, #20]
   12524:	add	r1, r2, r1
   12528:	mov	r2, #1
   1252c:	ldrb	r3, [r1, r2]
   12530:	sub	r3, r3, #91	; 0x5b
   12534:	cmp	r3, #33	; 0x21
   12538:	bhi	125cc <__assert_fail@plt+0x1590>
   1253c:	add	r7, pc, #0
   12540:	ldr	pc, [r7, r3, lsl #2]
   12544:	andeq	r2, r1, ip, lsl #21
   12548:	andeq	r2, r1, ip, lsl #21
   1254c:	andeq	r2, r1, ip, asr #11
   12550:	andeq	r2, r1, ip, lsl #21
   12554:	andeq	r2, r1, ip, asr #11
   12558:	andeq	r2, r1, ip, lsl #21
   1255c:	andeq	r2, r1, ip, asr #11
   12560:	andeq	r2, r1, ip, asr #11
   12564:	andeq	r2, r1, ip, asr #11
   12568:	andeq	r2, r1, ip, asr #11
   1256c:	andeq	r2, r1, ip, asr #11
   12570:	andeq	r2, r1, ip, asr #11
   12574:	andeq	r2, r1, ip, asr #11
   12578:	andeq	r2, r1, ip, asr #11
   1257c:	andeq	r2, r1, ip, asr #11
   12580:	andeq	r2, r1, ip, asr #11
   12584:	andeq	r2, r1, ip, asr #11
   12588:	andeq	r2, r1, ip, asr #11
   1258c:	andeq	r2, r1, ip, asr #11
   12590:	andeq	r2, r1, ip, asr #11
   12594:	andeq	r2, r1, ip, asr #11
   12598:	andeq	r2, r1, ip, asr #11
   1259c:	andeq	r2, r1, ip, asr #11
   125a0:	andeq	r2, r1, ip, asr #11
   125a4:	andeq	r2, r1, ip, asr #11
   125a8:	andeq	r2, r1, ip, asr #11
   125ac:	andeq	r2, r1, ip, asr #11
   125b0:	andeq	r2, r1, ip, asr #11
   125b4:	andeq	r2, r1, ip, asr #11
   125b8:	andeq	r2, r1, ip, asr #11
   125bc:	andeq	r2, r1, ip, asr #11
   125c0:	andeq	r2, r1, ip, asr #11
   125c4:	andeq	r2, r1, ip, asr #11
   125c8:	andeq	r2, r1, ip, lsl #21
   125cc:	add	r2, r2, #1
   125d0:	cmp	r2, r0
   125d4:	bcc	1252c <__assert_fail@plt+0x14f0>
   125d8:	ldr	r7, [sp, #44]	; 0x2c
   125dc:	add	r7, r0, r7
   125e0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   125e4:	bl	10e98 <iswprint@plt>
   125e8:	cmp	r0, #0
   125ec:	movwne	r0, #1
   125f0:	and	r9, r9, r0
   125f4:	sub	r4, fp, #40	; 0x28
   125f8:	mov	r0, r4
   125fc:	bl	10e44 <mbsinit@plt>
   12600:	ldr	lr, [sp, #28]
   12604:	cmp	r0, #0
   12608:	ldr	ip, [fp, #-84]	; 0xffffffac
   1260c:	beq	124c4 <__assert_fail@plt+0x1488>
   12610:	b	129ac <__assert_fail@plt+0x1970>
   12614:	ldr	r0, [sp, #32]
   12618:	cmp	r0, #0
   1261c:	beq	126b4 <__assert_fail@plt+0x1678>
   12620:	add	r0, r6, #2
   12624:	cmp	r0, lr
   12628:	bcs	126b4 <__assert_fail@plt+0x1678>
   1262c:	add	r1, ip, r6
   12630:	ldrb	r1, [r1, #1]
   12634:	cmp	r1, #63	; 0x3f
   12638:	bne	126b4 <__assert_fail@plt+0x1678>
   1263c:	ldrb	r9, [ip, r0]
   12640:	sub	r2, r9, #33	; 0x21
   12644:	cmp	r2, #29
   12648:	bhi	126b4 <__assert_fail@plt+0x1678>
   1264c:	mov	r3, #1
   12650:	movw	r1, #20929	; 0x51c1
   12654:	movt	r1, #14336	; 0x3800
   12658:	tst	r1, r3, lsl r2
   1265c:	beq	126b4 <__assert_fail@plt+0x1678>
   12660:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12664:	tst	r1, #1
   12668:	bne	12a94 <__assert_fail@plt+0x1a58>
   1266c:	cmp	r8, r4
   12670:	movcc	r1, #63	; 0x3f
   12674:	strbcc	r1, [r7, r8]
   12678:	add	r2, r8, #1
   1267c:	cmp	r2, r4
   12680:	movcc	r1, #34	; 0x22
   12684:	strbcc	r1, [r7, r2]
   12688:	add	r2, r8, #2
   1268c:	cmp	r2, r4
   12690:	movcc	r1, #34	; 0x22
   12694:	strbcc	r1, [r7, r2]
   12698:	add	r2, r8, #3
   1269c:	cmp	r2, r4
   126a0:	movcc	r1, #63	; 0x3f
   126a4:	strbcc	r1, [r7, r2]
   126a8:	add	r8, r8, #4
   126ac:	mov	r6, r0
   126b0:	mov	r5, r9
   126b4:	mov	r9, #0
   126b8:	b	12108 <__assert_fail@plt+0x10cc>
   126bc:	add	r1, r2, r6
   126c0:	str	r1, [sp, #44]	; 0x2c
   126c4:	add	r1, r6, #1
   126c8:	mov	r3, #0
   126cc:	ldr	lr, [sp, #28]
   126d0:	ldr	r6, [fp, #-60]	; 0xffffffc4
   126d4:	tst	r0, #1
   126d8:	bne	127cc <__assert_fail@plt+0x1790>
   126dc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   126e0:	tst	r2, #1
   126e4:	bne	12a94 <__assert_fail@plt+0x1a58>
   126e8:	cmp	r6, #2
   126ec:	ldr	r3, [fp, #-80]	; 0xffffffb0
   126f0:	movwne	r3, #1
   126f4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   126f8:	orr	r3, r3, r2
   126fc:	tst	r3, #1
   12700:	bne	1273c <__assert_fail@plt+0x1700>
   12704:	cmp	r8, r4
   12708:	movcc	r2, #39	; 0x27
   1270c:	strbcc	r2, [r7, r8]
   12710:	add	r3, r8, #1
   12714:	cmp	r3, r4
   12718:	movcc	r2, #36	; 0x24
   1271c:	strbcc	r2, [r7, r3]
   12720:	add	r3, r8, #2
   12724:	cmp	r3, r4
   12728:	movcc	r2, #39	; 0x27
   1272c:	strbcc	r2, [r7, r3]
   12730:	add	r8, r8, #3
   12734:	mov	r2, #1
   12738:	str	r2, [fp, #-56]	; 0xffffffc8
   1273c:	cmp	r8, r4
   12740:	movcc	r2, #92	; 0x5c
   12744:	strbcc	r2, [r7, r8]
   12748:	add	r3, r8, #1
   1274c:	cmp	r3, r4
   12750:	bcs	12770 <__assert_fail@plt+0x1734>
   12754:	and	r7, r5, #192	; 0xc0
   12758:	mov	r2, #48	; 0x30
   1275c:	orr	r7, r2, r7, lsr #6
   12760:	ldr	r6, [sp, #80]	; 0x50
   12764:	strb	r7, [r6, r3]
   12768:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1276c:	ldr	r7, [sp, #80]	; 0x50
   12770:	add	r3, r8, #2
   12774:	cmp	r3, r4
   12778:	bcs	12798 <__assert_fail@plt+0x175c>
   1277c:	lsr	r7, r5, #3
   12780:	mov	r2, #6
   12784:	bfi	r7, r2, #3, #29
   12788:	ldr	r6, [sp, #80]	; 0x50
   1278c:	strb	r7, [r6, r3]
   12790:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12794:	ldr	r7, [sp, #80]	; 0x50
   12798:	mov	r2, #6
   1279c:	bfi	r5, r2, #3, #29
   127a0:	add	r8, r8, #3
   127a4:	mov	r3, #1
   127a8:	b	127f0 <__assert_fail@plt+0x17b4>
   127ac:	ldr	r7, [sp, #80]	; 0x50
   127b0:	cmp	r8, r4
   127b4:	strbcc	r5, [r7, r8]
   127b8:	ldrb	r5, [ip, r1]
   127bc:	add	r1, r1, #1
   127c0:	add	r8, r8, #1
   127c4:	tst	r0, #1
   127c8:	beq	126dc <__assert_fail@plt+0x16a0>
   127cc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   127d0:	tst	r2, #1
   127d4:	beq	127e8 <__assert_fail@plt+0x17ac>
   127d8:	cmp	r8, r4
   127dc:	movcc	r2, #92	; 0x5c
   127e0:	strbcc	r2, [r7, r8]
   127e4:	add	r8, r8, #1
   127e8:	mov	r2, #0
   127ec:	str	r2, [fp, #-52]	; 0xffffffcc
   127f0:	and	sl, r3, #1
   127f4:	ldr	r2, [sp, #44]	; 0x2c
   127f8:	cmp	r2, r1
   127fc:	bls	12908 <__assert_fail@plt+0x18cc>
   12800:	cmp	sl, #0
   12804:	movwne	sl, #1
   12808:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1280c:	mvn	r7, r2
   12810:	orr	r7, r7, sl
   12814:	tst	r7, #1
   12818:	bne	127ac <__assert_fail@plt+0x1770>
   1281c:	cmp	r8, r4
   12820:	ldrcc	r7, [sp, #80]	; 0x50
   12824:	movcc	r2, #39	; 0x27
   12828:	strbcc	r2, [r7, r8]
   1282c:	add	r7, r8, #1
   12830:	cmp	r7, r4
   12834:	ldrcc	r6, [sp, #80]	; 0x50
   12838:	movcc	r2, #39	; 0x27
   1283c:	strbcc	r2, [r6, r7]
   12840:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   12844:	add	r8, r8, #2
   12848:	mov	r2, #0
   1284c:	str	r2, [fp, #-56]	; 0xffffffc8
   12850:	b	127ac <__assert_fail@plt+0x1770>
   12854:	cmp	r8, r4
   12858:	movcc	r0, #39	; 0x27
   1285c:	strbcc	r0, [r7, r8]
   12860:	add	r0, r8, #1
   12864:	cmp	r0, r4
   12868:	movcc	r1, #36	; 0x24
   1286c:	strbcc	r1, [r7, r0]
   12870:	add	r0, r8, #2
   12874:	cmp	r0, r4
   12878:	movcc	r1, #39	; 0x27
   1287c:	strbcc	r1, [r7, r0]
   12880:	add	r0, r8, #3
   12884:	mov	r2, #1
   12888:	cmp	r0, r4
   1288c:	movcc	r1, #92	; 0x5c
   12890:	strbcc	r1, [r7, r0]
   12894:	str	r2, [fp, #-56]	; 0xffffffc8
   12898:	add	r8, r0, #1
   1289c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   128a0:	cmp	r1, #2
   128a4:	beq	128f8 <__assert_fail@plt+0x18bc>
   128a8:	add	r1, r6, #1
   128ac:	mov	r9, #0
   128b0:	mov	sl, #1
   128b4:	mov	r5, #48	; 0x30
   128b8:	cmp	r1, lr
   128bc:	bcs	12108 <__assert_fail@plt+0x10cc>
   128c0:	ldrb	r1, [ip, r1]
   128c4:	sub	r1, r1, #48	; 0x30
   128c8:	uxtb	r1, r1
   128cc:	cmp	r1, #9
   128d0:	bhi	12108 <__assert_fail@plt+0x10cc>
   128d4:	cmp	r8, r4
   128d8:	movcc	r1, #48	; 0x30
   128dc:	strbcc	r1, [r7, r8]
   128e0:	add	r1, r0, #2
   128e4:	cmp	r1, r4
   128e8:	movcc	r2, #48	; 0x30
   128ec:	strbcc	r2, [r7, r1]
   128f0:	add	r8, r0, #3
   128f4:	b	12108 <__assert_fail@plt+0x10cc>
   128f8:	mov	r0, #48	; 0x30
   128fc:	mov	sl, #1
   12900:	mov	r9, #0
   12904:	b	123b4 <__assert_fail@plt+0x1378>
   12908:	sub	r6, r1, #1
   1290c:	cmp	sl, #0
   12910:	movwne	sl, #1
   12914:	mov	r0, r5
   12918:	cmp	sl, #0
   1291c:	bne	1295c <__assert_fail@plt+0x1920>
   12920:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12924:	tst	r1, #1
   12928:	beq	1295c <__assert_fail@plt+0x1920>
   1292c:	cmp	r8, r4
   12930:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12934:	movcc	r1, #39	; 0x27
   12938:	strbcc	r1, [r7, r8]
   1293c:	add	r1, r8, #1
   12940:	cmp	r1, r4
   12944:	movcc	r2, #39	; 0x27
   12948:	strbcc	r2, [r7, r1]
   1294c:	add	r8, r8, #2
   12950:	mov	r1, #0
   12954:	str	r1, [fp, #-56]	; 0xffffffc8
   12958:	b	12440 <__assert_fail@plt+0x1404>
   1295c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12960:	b	12440 <__assert_fail@plt+0x1404>
   12964:	mov	r9, #0
   12968:	b	129a4 <__assert_fail@plt+0x1968>
   1296c:	mov	r9, #0
   12970:	cmp	r7, lr
   12974:	bcs	129a4 <__assert_fail@plt+0x1968>
   12978:	ldr	ip, [fp, #-84]	; 0xffffffac
   1297c:	ldr	r7, [sp, #44]	; 0x2c
   12980:	ldr	r0, [sp, #20]
   12984:	ldrb	r0, [r0, r7]
   12988:	cmp	r0, #0
   1298c:	beq	129ac <__assert_fail@plt+0x1970>
   12990:	add	r7, r7, #1
   12994:	add	r0, r6, r7
   12998:	cmp	r0, lr
   1299c:	bcc	12980 <__assert_fail@plt+0x1944>
   129a0:	b	129ac <__assert_fail@plt+0x1970>
   129a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   129a8:	ldr	r7, [sp, #44]	; 0x2c
   129ac:	mov	r1, r7
   129b0:	ldr	r7, [sp, #80]	; 0x50
   129b4:	b	122dc <__assert_fail@plt+0x12a0>
   129b8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   129bc:	eor	r0, r1, #2
   129c0:	orr	r0, r0, r8
   129c4:	clz	r0, r0
   129c8:	lsr	r0, r0, #5
   129cc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   129d0:	tst	r2, r0
   129d4:	bne	12a94 <__assert_fail@plt+0x1a58>
   129d8:	cmp	r1, #2
   129dc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   129e0:	movwne	r0, #1
   129e4:	orr	r0, r2, r0
   129e8:	tst	r0, #1
   129ec:	ldreq	r0, [sp, #56]	; 0x38
   129f0:	eoreq	r0, r0, #1
   129f4:	tsteq	r0, #1
   129f8:	bne	12a2c <__assert_fail@plt+0x19f0>
   129fc:	mov	r9, lr
   12a00:	tst	r5, #1
   12a04:	bne	12afc <__assert_fail@plt+0x1ac0>
   12a08:	ldr	r0, [sp, #72]	; 0x48
   12a0c:	cmp	r0, #0
   12a10:	beq	12a2c <__assert_fail@plt+0x19f0>
   12a14:	mov	r5, #0
   12a18:	cmp	r4, #0
   12a1c:	ldr	r0, [sp, #84]	; 0x54
   12a20:	mov	sl, r2
   12a24:	ldr	r6, [sp, #72]	; 0x48
   12a28:	beq	11bc4 <__assert_fail@plt+0xb88>
   12a2c:	ldr	r1, [sp, #92]	; 0x5c
   12a30:	clz	r0, r1
   12a34:	lsr	r0, r0, #5
   12a38:	orr	r0, r0, r2
   12a3c:	tst	r0, #1
   12a40:	bne	12a6c <__assert_fail@plt+0x1a30>
   12a44:	ldrb	r0, [r1]
   12a48:	cmp	r0, #0
   12a4c:	beq	12a6c <__assert_fail@plt+0x1a30>
   12a50:	add	r1, r1, #1
   12a54:	cmp	r8, r4
   12a58:	strbcc	r0, [r7, r8]
   12a5c:	add	r8, r8, #1
   12a60:	ldrb	r0, [r1], #1
   12a64:	cmp	r0, #0
   12a68:	bne	12a54 <__assert_fail@plt+0x1a18>
   12a6c:	cmp	r8, r4
   12a70:	movcc	r0, #0
   12a74:	strbcc	r0, [r7, r8]
   12a78:	b	12af0 <__assert_fail@plt+0x1ab4>
   12a7c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a80:	mov	lr, r4
   12a84:	mov	r4, r5
   12a88:	b	12a94 <__assert_fail@plt+0x1a58>
   12a8c:	ldr	r7, [sp, #80]	; 0x50
   12a90:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a94:	mov	r0, #0
   12a98:	ldr	r1, [fp, #12]
   12a9c:	bic	r1, r1, #2
   12aa0:	ldr	r2, [sp, #84]	; 0x54
   12aa4:	tst	r2, #1
   12aa8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12aac:	mov	r2, r3
   12ab0:	movwne	r2, #4
   12ab4:	cmp	r3, #2
   12ab8:	movne	r2, r3
   12abc:	str	r2, [sp]
   12ac0:	str	r1, [sp, #4]
   12ac4:	str	r0, [sp, #8]
   12ac8:	ldr	r0, [sp, #68]	; 0x44
   12acc:	str	r0, [sp, #12]
   12ad0:	ldr	r0, [sp, #76]	; 0x4c
   12ad4:	str	r0, [sp, #16]
   12ad8:	mov	r0, r7
   12adc:	mov	r1, r4
   12ae0:	mov	r2, ip
   12ae4:	mov	r3, lr
   12ae8:	bl	11b3c <__assert_fail@plt+0xb00>
   12aec:	mov	r8, r0
   12af0:	mov	r0, r8
   12af4:	sub	sp, fp, #28
   12af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12afc:	mov	r0, #5
   12b00:	str	r0, [sp]
   12b04:	ldr	r0, [fp, #12]
   12b08:	str	r0, [sp, #4]
   12b0c:	ldr	r0, [fp, #16]
   12b10:	str	r0, [sp, #8]
   12b14:	ldr	r0, [sp, #68]	; 0x44
   12b18:	str	r0, [sp, #12]
   12b1c:	ldr	r0, [sp, #76]	; 0x4c
   12b20:	str	r0, [sp, #16]
   12b24:	mov	r0, r7
   12b28:	ldr	r1, [sp, #72]	; 0x48
   12b2c:	ldr	r2, [fp, #-84]	; 0xffffffac
   12b30:	mov	r3, r9
   12b34:	b	12ae8 <__assert_fail@plt+0x1aac>
   12b38:	bl	11030 <abort@plt>
   12b3c:	mov	r3, r2
   12b40:	mov	r2, #0
   12b44:	b	12b48 <__assert_fail@plt+0x1b0c>
   12b48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b4c:	add	fp, sp, #28
   12b50:	sub	sp, sp, #36	; 0x24
   12b54:	mov	r4, r2
   12b58:	str	r2, [sp, #24]
   12b5c:	mov	r5, r1
   12b60:	mov	r6, r0
   12b64:	str	r0, [sp, #20]
   12b68:	movw	r8, #24928	; 0x6160
   12b6c:	movt	r8, #2
   12b70:	cmp	r3, #0
   12b74:	movne	r8, r3
   12b78:	bl	10f7c <__errno_location@plt>
   12b7c:	str	r0, [sp, #28]
   12b80:	ldm	r8, {r3, r9}
   12b84:	ldr	r1, [r8, #40]	; 0x28
   12b88:	ldr	r2, [r8, #44]	; 0x2c
   12b8c:	ldr	r7, [r0]
   12b90:	str	r7, [sp, #32]
   12b94:	add	sl, r8, #8
   12b98:	cmp	r4, #0
   12b9c:	orreq	r9, r9, #1
   12ba0:	stm	sp, {r3, r9, sl}
   12ba4:	str	r1, [sp, #12]
   12ba8:	str	r2, [sp, #16]
   12bac:	mov	r0, #0
   12bb0:	mov	r1, #0
   12bb4:	mov	r2, r6
   12bb8:	mov	r3, r5
   12bbc:	mov	r7, r5
   12bc0:	bl	11b3c <__assert_fail@plt+0xb00>
   12bc4:	mov	r5, r0
   12bc8:	add	r4, r0, #1
   12bcc:	mov	r0, r4
   12bd0:	bl	13a4c <__assert_fail@plt+0x2a10>
   12bd4:	mov	r6, r0
   12bd8:	ldr	r0, [r8]
   12bdc:	ldr	r1, [r8, #40]	; 0x28
   12be0:	ldr	r2, [r8, #44]	; 0x2c
   12be4:	stm	sp, {r0, r9, sl}
   12be8:	str	r1, [sp, #12]
   12bec:	str	r2, [sp, #16]
   12bf0:	mov	r0, r6
   12bf4:	mov	r1, r4
   12bf8:	ldr	r2, [sp, #20]
   12bfc:	mov	r3, r7
   12c00:	bl	11b3c <__assert_fail@plt+0xb00>
   12c04:	ldr	r0, [sp, #24]
   12c08:	ldr	r1, [sp, #32]
   12c0c:	ldr	r2, [sp, #28]
   12c10:	str	r1, [r2]
   12c14:	cmp	r0, #0
   12c18:	strne	r5, [r0]
   12c1c:	mov	r0, r6
   12c20:	sub	sp, fp, #28
   12c24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12c2c:	add	fp, sp, #24
   12c30:	movw	r8, #24816	; 0x60f0
   12c34:	movt	r8, #2
   12c38:	ldr	r4, [r8]
   12c3c:	movw	r5, #24820	; 0x60f4
   12c40:	movt	r5, #2
   12c44:	ldr	r0, [r5]
   12c48:	cmp	r0, #2
   12c4c:	blt	12c78 <__assert_fail@plt+0x1c3c>
   12c50:	add	r7, r4, #12
   12c54:	mov	r6, #0
   12c58:	ldr	r0, [r7, r6, lsl #3]
   12c5c:	bl	149bc <__assert_fail@plt+0x3980>
   12c60:	add	r0, r6, #1
   12c64:	ldr	r1, [r5]
   12c68:	add	r2, r6, #2
   12c6c:	cmp	r2, r1
   12c70:	mov	r6, r0
   12c74:	blt	12c58 <__assert_fail@plt+0x1c1c>
   12c78:	ldr	r0, [r4, #4]
   12c7c:	movw	r7, #24976	; 0x6190
   12c80:	movt	r7, #2
   12c84:	cmp	r0, r7
   12c88:	beq	12ca0 <__assert_fail@plt+0x1c64>
   12c8c:	bl	149bc <__assert_fail@plt+0x3980>
   12c90:	movw	r0, #24824	; 0x60f8
   12c94:	movt	r0, #2
   12c98:	mov	r6, #256	; 0x100
   12c9c:	strd	r6, [r0]
   12ca0:	movw	r6, #24824	; 0x60f8
   12ca4:	movt	r6, #2
   12ca8:	cmp	r4, r6
   12cac:	beq	12cbc <__assert_fail@plt+0x1c80>
   12cb0:	mov	r0, r4
   12cb4:	bl	149bc <__assert_fail@plt+0x3980>
   12cb8:	str	r6, [r8]
   12cbc:	mov	r0, #1
   12cc0:	str	r0, [r5]
   12cc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12cc8:	movw	r3, #24928	; 0x6160
   12ccc:	movt	r3, #2
   12cd0:	mvn	r2, #0
   12cd4:	b	12cd8 <__assert_fail@plt+0x1c9c>
   12cd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cdc:	add	fp, sp, #28
   12ce0:	sub	sp, sp, #44	; 0x2c
   12ce4:	mov	r7, r3
   12ce8:	str	r2, [sp, #36]	; 0x24
   12cec:	str	r1, [sp, #32]
   12cf0:	mov	r5, r0
   12cf4:	bl	10f7c <__errno_location@plt>
   12cf8:	cmp	r5, #0
   12cfc:	blt	12e68 <__assert_fail@plt+0x1e2c>
   12d00:	cmn	r5, #-2147483647	; 0x80000001
   12d04:	beq	12e68 <__assert_fail@plt+0x1e2c>
   12d08:	movw	r4, #24816	; 0x60f0
   12d0c:	movt	r4, #2
   12d10:	ldr	r6, [r4]
   12d14:	str	r0, [sp, #28]
   12d18:	ldr	r0, [r0]
   12d1c:	str	r0, [sp, #24]
   12d20:	movw	r8, #24820	; 0x60f4
   12d24:	movt	r8, #2
   12d28:	ldr	r1, [r8]
   12d2c:	cmp	r1, r5
   12d30:	ble	12d3c <__assert_fail@plt+0x1d00>
   12d34:	mov	sl, r6
   12d38:	b	12da4 <__assert_fail@plt+0x1d68>
   12d3c:	str	r1, [fp, #-32]	; 0xffffffe0
   12d40:	mov	r0, #8
   12d44:	str	r0, [sp]
   12d48:	movw	r9, #24824	; 0x60f8
   12d4c:	movt	r9, #2
   12d50:	subs	r0, r6, r9
   12d54:	movne	r0, r6
   12d58:	add	r2, r5, #1
   12d5c:	sub	r2, r2, r1
   12d60:	sub	r1, fp, #32
   12d64:	mvn	r3, #-2147483648	; 0x80000000
   12d68:	bl	13b34 <__assert_fail@plt+0x2af8>
   12d6c:	mov	sl, r0
   12d70:	str	r0, [r4]
   12d74:	cmp	r6, r9
   12d78:	ldrdeq	r0, [r9]
   12d7c:	stmeq	sl, {r0, r1}
   12d80:	ldr	r1, [r8]
   12d84:	add	r0, sl, r1, lsl #3
   12d88:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12d8c:	sub	r1, r2, r1
   12d90:	lsl	r2, r1, #3
   12d94:	mov	r1, #0
   12d98:	bl	10f94 <memset@plt>
   12d9c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12da0:	str	r0, [r8]
   12da4:	mov	r9, sl
   12da8:	ldr	r6, [r9, r5, lsl #3]!
   12dac:	ldr	r4, [r9, #4]!
   12db0:	ldm	r7, {r0, r1}
   12db4:	ldr	r2, [r7, #40]	; 0x28
   12db8:	ldr	r3, [r7, #44]	; 0x2c
   12dbc:	orr	r8, r1, #1
   12dc0:	add	r1, r7, #8
   12dc4:	stm	sp, {r0, r8}
   12dc8:	str	r1, [sp, #20]
   12dcc:	add	r0, sp, #8
   12dd0:	stm	r0, {r1, r2, r3}
   12dd4:	mov	r0, r4
   12dd8:	mov	r1, r6
   12ddc:	ldr	r2, [sp, #32]
   12de0:	ldr	r3, [sp, #36]	; 0x24
   12de4:	bl	11b3c <__assert_fail@plt+0xb00>
   12de8:	cmp	r6, r0
   12dec:	bhi	12e50 <__assert_fail@plt+0x1e14>
   12df0:	add	r6, r0, #1
   12df4:	str	r6, [sl, r5, lsl #3]
   12df8:	movw	r0, #24976	; 0x6190
   12dfc:	movt	r0, #2
   12e00:	cmp	r4, r0
   12e04:	beq	12e10 <__assert_fail@plt+0x1dd4>
   12e08:	mov	r0, r4
   12e0c:	bl	149bc <__assert_fail@plt+0x3980>
   12e10:	mov	r0, r6
   12e14:	bl	13a4c <__assert_fail@plt+0x2a10>
   12e18:	mov	r4, r0
   12e1c:	str	r0, [r9]
   12e20:	ldr	r0, [r7]
   12e24:	ldr	r1, [r7, #40]	; 0x28
   12e28:	ldr	r2, [r7, #44]	; 0x2c
   12e2c:	stm	sp, {r0, r8}
   12e30:	ldr	r0, [sp, #20]
   12e34:	add	r3, sp, #8
   12e38:	stm	r3, {r0, r1, r2}
   12e3c:	mov	r0, r4
   12e40:	mov	r1, r6
   12e44:	ldr	r2, [sp, #32]
   12e48:	ldr	r3, [sp, #36]	; 0x24
   12e4c:	bl	11b3c <__assert_fail@plt+0xb00>
   12e50:	ldr	r0, [sp, #28]
   12e54:	ldr	r1, [sp, #24]
   12e58:	str	r1, [r0]
   12e5c:	mov	r0, r4
   12e60:	sub	sp, fp, #28
   12e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e68:	bl	11030 <abort@plt>
   12e6c:	movw	r3, #24928	; 0x6160
   12e70:	movt	r3, #2
   12e74:	b	12cd8 <__assert_fail@plt+0x1c9c>
   12e78:	mov	r1, r0
   12e7c:	mov	r0, #0
   12e80:	b	12cc8 <__assert_fail@plt+0x1c8c>
   12e84:	mov	r2, r1
   12e88:	mov	r1, r0
   12e8c:	mov	r0, #0
   12e90:	b	12e6c <__assert_fail@plt+0x1e30>
   12e94:	push	{r4, r5, r6, sl, fp, lr}
   12e98:	add	fp, sp, #16
   12e9c:	sub	sp, sp, #48	; 0x30
   12ea0:	mov	r4, r2
   12ea4:	mov	r5, r0
   12ea8:	mov	r6, sp
   12eac:	mov	r0, r6
   12eb0:	bl	12ed0 <__assert_fail@plt+0x1e94>
   12eb4:	mov	r0, r5
   12eb8:	mov	r1, r4
   12ebc:	mvn	r2, #0
   12ec0:	mov	r3, r6
   12ec4:	bl	12cd8 <__assert_fail@plt+0x1c9c>
   12ec8:	sub	sp, fp, #16
   12ecc:	pop	{r4, r5, r6, sl, fp, pc}
   12ed0:	vmov.i32	q8, #0	; 0x00000000
   12ed4:	mov	r2, #32
   12ed8:	mov	r3, r0
   12edc:	vst1.32	{d16-d17}, [r3], r2
   12ee0:	vst1.32	{d16-d17}, [r3]
   12ee4:	add	r2, r0, #16
   12ee8:	vst1.32	{d16-d17}, [r2]
   12eec:	cmp	r1, #10
   12ef0:	strne	r1, [r0]
   12ef4:	bxne	lr
   12ef8:	push	{fp, lr}
   12efc:	mov	fp, sp
   12f00:	bl	11030 <abort@plt>
   12f04:	push	{r4, r5, r6, r7, fp, lr}
   12f08:	add	fp, sp, #16
   12f0c:	sub	sp, sp, #48	; 0x30
   12f10:	mov	r4, r3
   12f14:	mov	r5, r2
   12f18:	mov	r6, r0
   12f1c:	mov	r7, sp
   12f20:	mov	r0, r7
   12f24:	bl	12ed0 <__assert_fail@plt+0x1e94>
   12f28:	mov	r0, r6
   12f2c:	mov	r1, r5
   12f30:	mov	r2, r4
   12f34:	mov	r3, r7
   12f38:	bl	12cd8 <__assert_fail@plt+0x1c9c>
   12f3c:	sub	sp, fp, #16
   12f40:	pop	{r4, r5, r6, r7, fp, pc}
   12f44:	mov	r2, r1
   12f48:	mov	r1, r0
   12f4c:	mov	r0, #0
   12f50:	b	12e94 <__assert_fail@plt+0x1e58>
   12f54:	mov	r3, r2
   12f58:	mov	r2, r1
   12f5c:	mov	r1, r0
   12f60:	mov	r0, #0
   12f64:	b	12f04 <__assert_fail@plt+0x1ec8>
   12f68:	push	{r4, r5, r6, sl, fp, lr}
   12f6c:	add	fp, sp, #16
   12f70:	sub	sp, sp, #48	; 0x30
   12f74:	mov	r4, r1
   12f78:	mov	r5, r0
   12f7c:	mov	r0, #32
   12f80:	movw	r1, #24928	; 0x6160
   12f84:	movt	r1, #2
   12f88:	add	r3, r1, #16
   12f8c:	vld1.64	{d16-d17}, [r1], r0
   12f90:	mov	r6, sp
   12f94:	vld1.64	{d18-d19}, [r3]
   12f98:	add	r3, r6, #16
   12f9c:	vld1.64	{d20-d21}, [r1]
   12fa0:	vst1.64	{d18-d19}, [r3]
   12fa4:	mov	r1, r6
   12fa8:	vst1.64	{d16-d17}, [r1], r0
   12fac:	vst1.64	{d20-d21}, [r1]
   12fb0:	mov	r0, r6
   12fb4:	mov	r1, r2
   12fb8:	mov	r2, #1
   12fbc:	bl	11a30 <__assert_fail@plt+0x9f4>
   12fc0:	mov	r0, #0
   12fc4:	mov	r1, r5
   12fc8:	mov	r2, r4
   12fcc:	mov	r3, r6
   12fd0:	bl	12cd8 <__assert_fail@plt+0x1c9c>
   12fd4:	sub	sp, fp, #16
   12fd8:	pop	{r4, r5, r6, sl, fp, pc}
   12fdc:	mov	r2, r1
   12fe0:	mvn	r1, #0
   12fe4:	b	12f68 <__assert_fail@plt+0x1f2c>
   12fe8:	mov	r1, #58	; 0x3a
   12fec:	b	12fdc <__assert_fail@plt+0x1fa0>
   12ff0:	mov	r2, #58	; 0x3a
   12ff4:	b	12f68 <__assert_fail@plt+0x1f2c>
   12ff8:	push	{r4, r5, r6, sl, fp, lr}
   12ffc:	add	fp, sp, #16
   13000:	sub	sp, sp, #48	; 0x30
   13004:	mov	r4, r2
   13008:	mov	r5, r0
   1300c:	mov	r6, sp
   13010:	mov	r0, r6
   13014:	bl	12ed0 <__assert_fail@plt+0x1e94>
   13018:	mov	r0, r6
   1301c:	mov	r1, #58	; 0x3a
   13020:	mov	r2, #1
   13024:	bl	11a30 <__assert_fail@plt+0x9f4>
   13028:	mov	r0, r5
   1302c:	mov	r1, r4
   13030:	mvn	r2, #0
   13034:	mov	r3, r6
   13038:	bl	12cd8 <__assert_fail@plt+0x1c9c>
   1303c:	sub	sp, fp, #16
   13040:	pop	{r4, r5, r6, sl, fp, pc}
   13044:	push	{fp, lr}
   13048:	mov	fp, sp
   1304c:	sub	sp, sp, #8
   13050:	mvn	ip, #0
   13054:	str	ip, [sp]
   13058:	bl	13064 <__assert_fail@plt+0x2028>
   1305c:	mov	sp, fp
   13060:	pop	{fp, pc}
   13064:	push	{r4, r5, r6, r7, fp, lr}
   13068:	add	fp, sp, #16
   1306c:	sub	sp, sp, #48	; 0x30
   13070:	mov	r7, r3
   13074:	mov	r5, r0
   13078:	mov	r0, #32
   1307c:	movw	r3, #24928	; 0x6160
   13080:	movt	r3, #2
   13084:	add	r4, r3, #16
   13088:	vld1.64	{d16-d17}, [r3], r0
   1308c:	mov	r6, sp
   13090:	vld1.64	{d18-d19}, [r4]
   13094:	add	r4, r6, #16
   13098:	vld1.64	{d20-d21}, [r3]
   1309c:	vst1.64	{d18-d19}, [r4]
   130a0:	mov	r3, r6
   130a4:	vst1.64	{d16-d17}, [r3], r0
   130a8:	vst1.64	{d20-d21}, [r3]
   130ac:	mov	r0, r6
   130b0:	bl	11a88 <__assert_fail@plt+0xa4c>
   130b4:	ldr	r2, [fp, #8]
   130b8:	mov	r0, r5
   130bc:	mov	r1, r7
   130c0:	mov	r3, r6
   130c4:	bl	12cd8 <__assert_fail@plt+0x1c9c>
   130c8:	sub	sp, fp, #16
   130cc:	pop	{r4, r5, r6, r7, fp, pc}
   130d0:	mov	r3, r2
   130d4:	mov	r2, r1
   130d8:	mov	r1, r0
   130dc:	mov	r0, #0
   130e0:	b	13044 <__assert_fail@plt+0x2008>
   130e4:	push	{fp, lr}
   130e8:	mov	fp, sp
   130ec:	sub	sp, sp, #8
   130f0:	mov	ip, r2
   130f4:	mov	r2, r1
   130f8:	mov	r1, r0
   130fc:	str	r3, [sp]
   13100:	mov	r0, #0
   13104:	mov	r3, ip
   13108:	bl	13064 <__assert_fail@plt+0x2028>
   1310c:	mov	sp, fp
   13110:	pop	{fp, pc}
   13114:	movw	r3, #24832	; 0x6100
   13118:	movt	r3, #2
   1311c:	b	12cd8 <__assert_fail@plt+0x1c9c>
   13120:	mov	r2, r1
   13124:	mov	r1, r0
   13128:	mov	r0, #0
   1312c:	b	13114 <__assert_fail@plt+0x20d8>
   13130:	mvn	r2, #0
   13134:	b	13114 <__assert_fail@plt+0x20d8>
   13138:	mov	r1, r0
   1313c:	mov	r0, #0
   13140:	b	13130 <__assert_fail@plt+0x20f4>
   13144:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13148:	add	fp, sp, #24
   1314c:	sub	sp, sp, #16
   13150:	mov	r4, r1
   13154:	mov	r5, r0
   13158:	mov	r7, #0
   1315c:	mov	r0, #0
   13160:	mov	r1, r5
   13164:	mov	r2, #5
   13168:	bl	10e68 <dcgettext@plt>
   1316c:	cmp	r0, r5
   13170:	beq	1317c <__assert_fail@plt+0x2140>
   13174:	sub	sp, fp, #24
   13178:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1317c:	bl	14ad8 <__assert_fail@plt+0x3a9c>
   13180:	mov	r6, r0
   13184:	mov	r8, #56	; 0x38
   13188:	mov	r0, #45	; 0x2d
   1318c:	stm	sp, {r0, r8}
   13190:	str	r7, [sp, #8]
   13194:	str	r7, [sp, #12]
   13198:	mov	r0, r6
   1319c:	mov	r1, #85	; 0x55
   131a0:	mov	r2, #84	; 0x54
   131a4:	mov	r3, #70	; 0x46
   131a8:	bl	13240 <__assert_fail@plt+0x2204>
   131ac:	cmp	r0, #0
   131b0:	beq	131cc <__assert_fail@plt+0x2190>
   131b4:	ldrb	r1, [r5]
   131b8:	movw	r2, #21345	; 0x5361
   131bc:	movt	r2, #1
   131c0:	movw	r0, #21349	; 0x5365
   131c4:	movt	r0, #1
   131c8:	b	13210 <__assert_fail@plt+0x21d4>
   131cc:	mov	r0, #48	; 0x30
   131d0:	mov	r1, #51	; 0x33
   131d4:	str	r8, [sp]
   131d8:	stmib	sp, {r0, r1}
   131dc:	str	r0, [sp, #12]
   131e0:	mov	r0, r6
   131e4:	mov	r1, #71	; 0x47
   131e8:	mov	r2, #66	; 0x42
   131ec:	mov	r3, #49	; 0x31
   131f0:	bl	13240 <__assert_fail@plt+0x2204>
   131f4:	cmp	r0, #0
   131f8:	beq	13220 <__assert_fail@plt+0x21e4>
   131fc:	ldrb	r1, [r5]
   13200:	movw	r2, #21353	; 0x5369
   13204:	movt	r2, #1
   13208:	movw	r0, #21357	; 0x536d
   1320c:	movt	r0, #1
   13210:	cmp	r1, #96	; 0x60
   13214:	moveq	r0, r2
   13218:	sub	sp, fp, #24
   1321c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13220:	movw	r1, #21339	; 0x535b
   13224:	movt	r1, #1
   13228:	movw	r0, #21343	; 0x535f
   1322c:	movt	r0, #1
   13230:	cmp	r4, #9
   13234:	moveq	r0, r1
   13238:	sub	sp, fp, #24
   1323c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13240:	push	{r4, r5, r6, r7, fp, lr}
   13244:	add	fp, sp, #16
   13248:	sub	sp, sp, #16
   1324c:	mov	r4, r3
   13250:	mov	r5, r2
   13254:	mov	r7, r1
   13258:	mov	r6, r0
   1325c:	mov	r0, r1
   13260:	bl	147bc <__assert_fail@plt+0x3780>
   13264:	ldrb	r1, [r6]
   13268:	cmp	r0, #0
   1326c:	andne	r1, r1, #223	; 0xdf
   13270:	mov	r0, #0
   13274:	cmp	r1, r7
   13278:	bne	132b8 <__assert_fail@plt+0x227c>
   1327c:	cmp	r7, #0
   13280:	moveq	r0, #1
   13284:	subeq	sp, fp, #16
   13288:	popeq	{r4, r5, r6, r7, fp, pc}
   1328c:	ldr	r0, [fp, #20]
   13290:	ldr	r1, [fp, #16]
   13294:	ldr	r2, [fp, #12]
   13298:	ldr	r3, [fp, #8]
   1329c:	str	r2, [sp]
   132a0:	str	r1, [sp, #4]
   132a4:	str	r0, [sp, #8]
   132a8:	mov	r0, r6
   132ac:	mov	r1, r5
   132b0:	mov	r2, r4
   132b4:	bl	132c0 <__assert_fail@plt+0x2284>
   132b8:	sub	sp, fp, #16
   132bc:	pop	{r4, r5, r6, r7, fp, pc}
   132c0:	push	{r4, r5, r6, r7, fp, lr}
   132c4:	add	fp, sp, #16
   132c8:	sub	sp, sp, #8
   132cc:	mov	r4, r3
   132d0:	mov	r5, r2
   132d4:	mov	r7, r1
   132d8:	mov	r6, r0
   132dc:	mov	r0, r1
   132e0:	bl	147bc <__assert_fail@plt+0x3780>
   132e4:	ldrb	r1, [r6, #1]
   132e8:	cmp	r0, #0
   132ec:	andne	r1, r1, #223	; 0xdf
   132f0:	mov	r0, #0
   132f4:	cmp	r1, r7
   132f8:	bne	13330 <__assert_fail@plt+0x22f4>
   132fc:	cmp	r7, #0
   13300:	moveq	r0, #1
   13304:	subeq	sp, fp, #16
   13308:	popeq	{r4, r5, r6, r7, fp, pc}
   1330c:	ldr	r0, [fp, #16]
   13310:	ldr	r1, [fp, #12]
   13314:	ldr	r3, [fp, #8]
   13318:	str	r1, [sp]
   1331c:	str	r0, [sp, #4]
   13320:	mov	r0, r6
   13324:	mov	r1, r5
   13328:	mov	r2, r4
   1332c:	bl	13338 <__assert_fail@plt+0x22fc>
   13330:	sub	sp, fp, #16
   13334:	pop	{r4, r5, r6, r7, fp, pc}
   13338:	push	{r4, r5, r6, r7, fp, lr}
   1333c:	add	fp, sp, #16
   13340:	sub	sp, sp, #8
   13344:	mov	r4, r3
   13348:	mov	r5, r2
   1334c:	mov	r7, r1
   13350:	mov	r6, r0
   13354:	mov	r0, r1
   13358:	bl	147bc <__assert_fail@plt+0x3780>
   1335c:	ldrb	r1, [r6, #2]
   13360:	cmp	r0, #0
   13364:	andne	r1, r1, #223	; 0xdf
   13368:	mov	r0, #0
   1336c:	cmp	r1, r7
   13370:	bne	133a0 <__assert_fail@plt+0x2364>
   13374:	cmp	r7, #0
   13378:	moveq	r0, #1
   1337c:	subeq	sp, fp, #16
   13380:	popeq	{r4, r5, r6, r7, fp, pc}
   13384:	ldr	r0, [fp, #12]
   13388:	ldr	r3, [fp, #8]
   1338c:	str	r0, [sp]
   13390:	mov	r0, r6
   13394:	mov	r1, r5
   13398:	mov	r2, r4
   1339c:	bl	133a8 <__assert_fail@plt+0x236c>
   133a0:	sub	sp, fp, #16
   133a4:	pop	{r4, r5, r6, r7, fp, pc}
   133a8:	push	{r4, r5, r6, r7, fp, lr}
   133ac:	add	fp, sp, #16
   133b0:	mov	r4, r3
   133b4:	mov	r5, r2
   133b8:	mov	r7, r1
   133bc:	mov	r6, r0
   133c0:	mov	r0, r1
   133c4:	bl	147bc <__assert_fail@plt+0x3780>
   133c8:	ldrb	r1, [r6, #3]
   133cc:	ldr	r3, [fp, #8]
   133d0:	cmp	r0, #0
   133d4:	andne	r1, r1, #223	; 0xdf
   133d8:	mov	r0, #0
   133dc:	cmp	r1, r7
   133e0:	popne	{r4, r5, r6, r7, fp, pc}
   133e4:	cmp	r7, #0
   133e8:	beq	13400 <__assert_fail@plt+0x23c4>
   133ec:	mov	r0, r6
   133f0:	mov	r1, r5
   133f4:	mov	r2, r4
   133f8:	pop	{r4, r5, r6, r7, fp, lr}
   133fc:	b	13408 <__assert_fail@plt+0x23cc>
   13400:	mov	r0, #1
   13404:	pop	{r4, r5, r6, r7, fp, pc}
   13408:	push	{r4, r5, r6, r7, fp, lr}
   1340c:	add	fp, sp, #16
   13410:	mov	r4, r3
   13414:	mov	r5, r2
   13418:	mov	r7, r1
   1341c:	mov	r6, r0
   13420:	mov	r0, r1
   13424:	bl	147bc <__assert_fail@plt+0x3780>
   13428:	ldrb	r1, [r6, #4]
   1342c:	cmp	r0, #0
   13430:	andne	r1, r1, #223	; 0xdf
   13434:	mov	r0, #0
   13438:	cmp	r1, r7
   1343c:	popne	{r4, r5, r6, r7, fp, pc}
   13440:	cmp	r7, #0
   13444:	beq	1345c <__assert_fail@plt+0x2420>
   13448:	mov	r0, r6
   1344c:	mov	r1, r5
   13450:	mov	r2, r4
   13454:	pop	{r4, r5, r6, r7, fp, lr}
   13458:	b	13464 <__assert_fail@plt+0x2428>
   1345c:	mov	r0, #1
   13460:	pop	{r4, r5, r6, r7, fp, pc}
   13464:	push	{r4, r5, r6, sl, fp, lr}
   13468:	add	fp, sp, #16
   1346c:	mov	r4, r2
   13470:	mov	r6, r1
   13474:	mov	r5, r0
   13478:	mov	r0, r1
   1347c:	bl	147bc <__assert_fail@plt+0x3780>
   13480:	ldrb	r1, [r5, #5]
   13484:	cmp	r0, #0
   13488:	andne	r1, r1, #223	; 0xdf
   1348c:	mov	r0, #0
   13490:	cmp	r1, r6
   13494:	popne	{r4, r5, r6, sl, fp, pc}
   13498:	cmp	r6, #0
   1349c:	beq	134b0 <__assert_fail@plt+0x2474>
   134a0:	mov	r0, r5
   134a4:	mov	r1, r4
   134a8:	pop	{r4, r5, r6, sl, fp, lr}
   134ac:	b	134b8 <__assert_fail@plt+0x247c>
   134b0:	mov	r0, #1
   134b4:	pop	{r4, r5, r6, sl, fp, pc}
   134b8:	push	{r4, r5, fp, lr}
   134bc:	add	fp, sp, #8
   134c0:	mov	r5, r1
   134c4:	mov	r4, r0
   134c8:	mov	r0, r1
   134cc:	bl	147bc <__assert_fail@plt+0x3780>
   134d0:	ldrb	r1, [r4, #6]
   134d4:	cmp	r0, #0
   134d8:	andne	r1, r1, #223	; 0xdf
   134dc:	mov	r0, #0
   134e0:	cmp	r1, r5
   134e4:	popne	{r4, r5, fp, pc}
   134e8:	cmp	r5, #0
   134ec:	beq	134fc <__assert_fail@plt+0x24c0>
   134f0:	mov	r0, r4
   134f4:	pop	{r4, r5, fp, lr}
   134f8:	b	13504 <__assert_fail@plt+0x24c8>
   134fc:	mov	r0, #1
   13500:	pop	{r4, r5, fp, pc}
   13504:	push	{r4, sl, fp, lr}
   13508:	add	fp, sp, #8
   1350c:	mov	r4, r0
   13510:	mov	r0, #0
   13514:	bl	147bc <__assert_fail@plt+0x3780>
   13518:	ldrb	r1, [r4, #7]
   1351c:	cmp	r0, #0
   13520:	beq	13538 <__assert_fail@plt+0x24fc>
   13524:	tst	r1, #223	; 0xdf
   13528:	moveq	r0, #1
   1352c:	popeq	{r4, sl, fp, pc}
   13530:	mov	r0, #0
   13534:	pop	{r4, sl, fp, pc}
   13538:	cmp	r1, #0
   1353c:	moveq	r0, #1
   13540:	popeq	{r4, sl, fp, pc}
   13544:	mov	r0, #0
   13548:	pop	{r4, sl, fp, pc}
   1354c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13550:	add	fp, sp, #24
   13554:	sub	sp, sp, #32
   13558:	mov	r4, r2
   1355c:	mov	r8, r0
   13560:	ldr	r6, [fp, #12]
   13564:	ldr	r7, [fp, #8]
   13568:	cmp	r1, #0
   1356c:	beq	13594 <__assert_fail@plt+0x2558>
   13570:	mov	r5, r1
   13574:	str	r4, [sp]
   13578:	str	r3, [sp, #4]
   1357c:	movw	r2, #21444	; 0x53c4
   13580:	movt	r2, #1
   13584:	mov	r0, r8
   13588:	mov	r1, #1
   1358c:	mov	r3, r5
   13590:	b	135ac <__assert_fail@plt+0x2570>
   13594:	str	r3, [sp]
   13598:	movw	r2, #21456	; 0x53d0
   1359c:	movt	r2, #1
   135a0:	mov	r0, r8
   135a4:	mov	r1, #1
   135a8:	mov	r3, r4
   135ac:	bl	10fc4 <__fprintf_chk@plt>
   135b0:	movw	r1, #21463	; 0x53d7
   135b4:	movt	r1, #1
   135b8:	mov	r0, #0
   135bc:	mov	r2, #5
   135c0:	bl	10e68 <dcgettext@plt>
   135c4:	mov	r3, r0
   135c8:	movw	r0, #2022	; 0x7e6
   135cc:	str	r0, [sp]
   135d0:	movw	r2, #22181	; 0x56a5
   135d4:	movt	r2, #1
   135d8:	mov	r0, r8
   135dc:	mov	r1, #1
   135e0:	bl	10fc4 <__fprintf_chk@plt>
   135e4:	movw	r4, #20336	; 0x4f70
   135e8:	movt	r4, #1
   135ec:	mov	r0, r4
   135f0:	mov	r1, r8
   135f4:	bl	10df0 <fputs_unlocked@plt>
   135f8:	movw	r1, #21467	; 0x53db
   135fc:	movt	r1, #1
   13600:	mov	r0, #0
   13604:	mov	r2, #5
   13608:	bl	10e68 <dcgettext@plt>
   1360c:	mov	r2, r0
   13610:	movw	r3, #21638	; 0x5486
   13614:	movt	r3, #1
   13618:	mov	r0, r8
   1361c:	mov	r1, #1
   13620:	bl	10fc4 <__fprintf_chk@plt>
   13624:	mov	r0, r4
   13628:	mov	r1, r8
   1362c:	bl	10df0 <fputs_unlocked@plt>
   13630:	cmp	r6, #9
   13634:	bhi	13670 <__assert_fail@plt+0x2634>
   13638:	add	r0, pc, #0
   1363c:	ldr	pc, [r0, r6, lsl #2]
   13640:	andeq	r3, r1, r8, ror #12
   13644:	andeq	r3, r1, ip, ror r6
   13648:	andeq	r3, r1, ip, lsr #13
   1364c:	ldrdeq	r3, [r1], -r4
   13650:	strdeq	r3, [r1], -ip
   13654:	andeq	r3, r1, r4, lsr #14
   13658:	andeq	r3, r1, ip, asr #14
   1365c:	andeq	r3, r1, r4, lsl #15
   13660:	andeq	r3, r1, r4, lsr #16
   13664:	andeq	r3, r1, ip, asr #15
   13668:	sub	sp, fp, #24
   1366c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13670:	movw	r1, #21991	; 0x55e7
   13674:	movt	r1, #1
   13678:	b	137d4 <__assert_fail@plt+0x2798>
   1367c:	movw	r1, #21672	; 0x54a8
   13680:	movt	r1, #1
   13684:	mov	r0, #0
   13688:	mov	r2, #5
   1368c:	bl	10e68 <dcgettext@plt>
   13690:	mov	r2, r0
   13694:	ldr	r3, [r7]
   13698:	mov	r0, r8
   1369c:	mov	r1, #1
   136a0:	sub	sp, fp, #24
   136a4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   136a8:	b	10fc4 <__fprintf_chk@plt>
   136ac:	movw	r1, #21688	; 0x54b8
   136b0:	movt	r1, #1
   136b4:	mov	r0, #0
   136b8:	mov	r2, #5
   136bc:	bl	10e68 <dcgettext@plt>
   136c0:	mov	r2, r0
   136c4:	ldr	r3, [r7]
   136c8:	ldr	r0, [r7, #4]
   136cc:	str	r0, [sp]
   136d0:	b	137c0 <__assert_fail@plt+0x2784>
   136d4:	movw	r1, #21711	; 0x54cf
   136d8:	movt	r1, #1
   136dc:	mov	r0, #0
   136e0:	mov	r2, #5
   136e4:	bl	10e68 <dcgettext@plt>
   136e8:	mov	r2, r0
   136ec:	ldr	r3, [r7]
   136f0:	ldmib	r7, {r0, r1}
   136f4:	stm	sp, {r0, r1}
   136f8:	b	137c0 <__assert_fail@plt+0x2784>
   136fc:	movw	r1, #21739	; 0x54eb
   13700:	movt	r1, #1
   13704:	mov	r0, #0
   13708:	mov	r2, #5
   1370c:	bl	10e68 <dcgettext@plt>
   13710:	mov	r2, r0
   13714:	ldr	r3, [r7]
   13718:	ldmib	r7, {r0, r1, r7}
   1371c:	stm	sp, {r0, r1, r7}
   13720:	b	137c0 <__assert_fail@plt+0x2784>
   13724:	movw	r1, #21771	; 0x550b
   13728:	movt	r1, #1
   1372c:	mov	r0, #0
   13730:	mov	r2, #5
   13734:	bl	10e68 <dcgettext@plt>
   13738:	mov	r2, r0
   1373c:	ldr	r3, [r7]
   13740:	ldmib	r7, {r0, r1, r6, r7}
   13744:	stm	sp, {r0, r1, r6, r7}
   13748:	b	137c0 <__assert_fail@plt+0x2784>
   1374c:	movw	r1, #21807	; 0x552f
   13750:	movt	r1, #1
   13754:	mov	r0, #0
   13758:	mov	r2, #5
   1375c:	bl	10e68 <dcgettext@plt>
   13760:	mov	r2, r0
   13764:	ldr	r3, [r7]
   13768:	ldmib	r7, {r0, r1, r6}
   1376c:	ldr	r5, [r7, #16]
   13770:	ldr	r7, [r7, #20]
   13774:	stm	sp, {r0, r1, r6}
   13778:	str	r5, [sp, #12]
   1377c:	str	r7, [sp, #16]
   13780:	b	137c0 <__assert_fail@plt+0x2784>
   13784:	movw	r1, #21847	; 0x5557
   13788:	movt	r1, #1
   1378c:	mov	r0, #0
   13790:	mov	r2, #5
   13794:	bl	10e68 <dcgettext@plt>
   13798:	mov	r2, r0
   1379c:	ldr	r3, [r7]
   137a0:	ldmib	r7, {r0, r1, r6}
   137a4:	ldr	r5, [r7, #16]
   137a8:	ldr	r4, [r7, #20]
   137ac:	ldr	r7, [r7, #24]
   137b0:	stm	sp, {r0, r1, r6}
   137b4:	str	r5, [sp, #12]
   137b8:	str	r4, [sp, #16]
   137bc:	str	r7, [sp, #20]
   137c0:	mov	r0, r8
   137c4:	mov	r1, #1
   137c8:	b	13874 <__assert_fail@plt+0x2838>
   137cc:	movw	r1, #21939	; 0x55b3
   137d0:	movt	r1, #1
   137d4:	mov	r0, #0
   137d8:	mov	r2, #5
   137dc:	bl	10e68 <dcgettext@plt>
   137e0:	mov	ip, r0
   137e4:	ldr	r3, [r7]
   137e8:	ldr	r0, [r7, #4]
   137ec:	ldr	r1, [r7, #8]
   137f0:	ldr	r6, [r7, #12]
   137f4:	ldr	r5, [r7, #16]
   137f8:	ldr	r4, [r7, #20]
   137fc:	ldr	r2, [r7, #24]
   13800:	ldr	lr, [r7, #28]
   13804:	ldr	r7, [r7, #32]
   13808:	stm	sp, {r0, r1, r6}
   1380c:	str	r5, [sp, #12]
   13810:	str	r4, [sp, #16]
   13814:	str	r2, [sp, #20]
   13818:	str	lr, [sp, #24]
   1381c:	str	r7, [sp, #28]
   13820:	b	13868 <__assert_fail@plt+0x282c>
   13824:	movw	r1, #21891	; 0x5583
   13828:	movt	r1, #1
   1382c:	mov	r0, #0
   13830:	mov	r2, #5
   13834:	bl	10e68 <dcgettext@plt>
   13838:	mov	ip, r0
   1383c:	ldr	r3, [r7]
   13840:	ldmib	r7, {r0, r1, r6}
   13844:	ldr	r5, [r7, #16]
   13848:	ldr	r4, [r7, #20]
   1384c:	ldr	r2, [r7, #24]
   13850:	ldr	r7, [r7, #28]
   13854:	stm	sp, {r0, r1, r6}
   13858:	str	r5, [sp, #12]
   1385c:	str	r4, [sp, #16]
   13860:	str	r2, [sp, #20]
   13864:	str	r7, [sp, #24]
   13868:	mov	r0, r8
   1386c:	mov	r1, #1
   13870:	mov	r2, ip
   13874:	bl	10fc4 <__fprintf_chk@plt>
   13878:	sub	sp, fp, #24
   1387c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13880:	push	{r4, sl, fp, lr}
   13884:	add	fp, sp, #8
   13888:	sub	sp, sp, #8
   1388c:	mov	lr, #0
   13890:	ldr	ip, [fp, #8]
   13894:	ldr	r4, [ip, lr, lsl #2]
   13898:	add	lr, lr, #1
   1389c:	cmp	r4, #0
   138a0:	bne	13894 <__assert_fail@plt+0x2858>
   138a4:	sub	r4, lr, #1
   138a8:	str	ip, [sp]
   138ac:	str	r4, [sp, #4]
   138b0:	bl	1354c <__assert_fail@plt+0x2510>
   138b4:	sub	sp, fp, #8
   138b8:	pop	{r4, sl, fp, pc}
   138bc:	push	{r4, r5, fp, lr}
   138c0:	add	fp, sp, #8
   138c4:	sub	sp, sp, #48	; 0x30
   138c8:	mov	ip, #0
   138cc:	ldr	r4, [fp, #8]
   138d0:	add	lr, sp, #8
   138d4:	ldr	r5, [r4]
   138d8:	str	r5, [lr, ip, lsl #2]
   138dc:	cmp	r5, #0
   138e0:	beq	138f4 <__assert_fail@plt+0x28b8>
   138e4:	add	ip, ip, #1
   138e8:	add	r4, r4, #4
   138ec:	cmp	ip, #10
   138f0:	bcc	138d4 <__assert_fail@plt+0x2898>
   138f4:	str	lr, [sp]
   138f8:	str	ip, [sp, #4]
   138fc:	bl	1354c <__assert_fail@plt+0x2510>
   13900:	sub	sp, fp, #8
   13904:	pop	{r4, r5, fp, pc}
   13908:	push	{fp, lr}
   1390c:	mov	fp, sp
   13910:	sub	sp, sp, #8
   13914:	add	ip, fp, #8
   13918:	str	ip, [sp, #4]
   1391c:	str	ip, [sp]
   13920:	bl	138bc <__assert_fail@plt+0x2880>
   13924:	mov	sp, fp
   13928:	pop	{fp, pc}
   1392c:	push	{fp, lr}
   13930:	mov	fp, sp
   13934:	movw	r0, #24900	; 0x6144
   13938:	movt	r0, #2
   1393c:	ldr	r1, [r0]
   13940:	movw	r0, #20336	; 0x4f70
   13944:	movt	r0, #1
   13948:	bl	10df0 <fputs_unlocked@plt>
   1394c:	movw	r1, #22051	; 0x5623
   13950:	movt	r1, #1
   13954:	mov	r0, #0
   13958:	mov	r2, #5
   1395c:	bl	10e68 <dcgettext@plt>
   13960:	mov	r1, r0
   13964:	movw	r2, #22071	; 0x5637
   13968:	movt	r2, #1
   1396c:	mov	r0, #1
   13970:	bl	10fa0 <__printf_chk@plt>
   13974:	movw	r1, #22093	; 0x564d
   13978:	movt	r1, #1
   1397c:	mov	r0, #0
   13980:	mov	r2, #5
   13984:	bl	10e68 <dcgettext@plt>
   13988:	mov	r1, r0
   1398c:	movw	r2, #20584	; 0x5068
   13990:	movt	r2, #1
   13994:	movw	r3, #20771	; 0x5123
   13998:	movt	r3, #1
   1399c:	mov	r0, #1
   139a0:	bl	10fa0 <__printf_chk@plt>
   139a4:	movw	r1, #22113	; 0x5661
   139a8:	movt	r1, #1
   139ac:	mov	r0, #0
   139b0:	mov	r2, #5
   139b4:	bl	10e68 <dcgettext@plt>
   139b8:	mov	r1, r0
   139bc:	movw	r2, #22152	; 0x5688
   139c0:	movt	r2, #1
   139c4:	mov	r0, #1
   139c8:	pop	{fp, lr}
   139cc:	b	10fa0 <__printf_chk@plt>
   139d0:	b	139d4 <__assert_fail@plt+0x2998>
   139d4:	push	{r4, r5, r6, sl, fp, lr}
   139d8:	add	fp, sp, #16
   139dc:	mov	r4, r2
   139e0:	mov	r5, r1
   139e4:	mov	r6, r0
   139e8:	bl	14b70 <__assert_fail@plt+0x3b34>
   139ec:	cmp	r0, #0
   139f0:	popne	{r4, r5, r6, sl, fp, pc}
   139f4:	cmp	r6, #0
   139f8:	beq	13a0c <__assert_fail@plt+0x29d0>
   139fc:	cmp	r5, #0
   13a00:	cmpne	r4, #0
   13a04:	bne	13a0c <__assert_fail@plt+0x29d0>
   13a08:	pop	{r4, r5, r6, sl, fp, pc}
   13a0c:	bl	13dc0 <__assert_fail@plt+0x2d84>
   13a10:	push	{fp, lr}
   13a14:	mov	fp, sp
   13a18:	bl	14484 <__assert_fail@plt+0x3448>
   13a1c:	bl	13a24 <__assert_fail@plt+0x29e8>
   13a20:	pop	{fp, pc}
   13a24:	cmp	r0, #0
   13a28:	bxne	lr
   13a2c:	push	{fp, lr}
   13a30:	mov	fp, sp
   13a34:	bl	13dc0 <__assert_fail@plt+0x2d84>
   13a38:	push	{fp, lr}
   13a3c:	mov	fp, sp
   13a40:	bl	14aa4 <__assert_fail@plt+0x3a68>
   13a44:	bl	13a24 <__assert_fail@plt+0x29e8>
   13a48:	pop	{fp, pc}
   13a4c:	b	13a10 <__assert_fail@plt+0x29d4>
   13a50:	push	{r4, r5, fp, lr}
   13a54:	add	fp, sp, #8
   13a58:	mov	r4, r1
   13a5c:	mov	r5, r0
   13a60:	bl	144b4 <__assert_fail@plt+0x3478>
   13a64:	cmp	r0, #0
   13a68:	popne	{r4, r5, fp, pc}
   13a6c:	cmp	r5, #0
   13a70:	beq	13a80 <__assert_fail@plt+0x2a44>
   13a74:	cmp	r4, #0
   13a78:	bne	13a80 <__assert_fail@plt+0x2a44>
   13a7c:	pop	{r4, r5, fp, pc}
   13a80:	bl	13dc0 <__assert_fail@plt+0x2d84>
   13a84:	push	{fp, lr}
   13a88:	mov	fp, sp
   13a8c:	bl	14aa8 <__assert_fail@plt+0x3a6c>
   13a90:	bl	13a24 <__assert_fail@plt+0x29e8>
   13a94:	pop	{fp, pc}
   13a98:	push	{fp, lr}
   13a9c:	mov	fp, sp
   13aa0:	bl	14ab8 <__assert_fail@plt+0x3a7c>
   13aa4:	bl	13a24 <__assert_fail@plt+0x29e8>
   13aa8:	pop	{fp, pc}
   13aac:	push	{fp, lr}
   13ab0:	mov	fp, sp
   13ab4:	mov	r2, r1
   13ab8:	mov	r1, r0
   13abc:	mov	r0, #0
   13ac0:	bl	139d4 <__assert_fail@plt+0x2998>
   13ac4:	pop	{fp, pc}
   13ac8:	mov	r2, r1
   13acc:	mov	r1, r0
   13ad0:	mov	r0, #0
   13ad4:	b	13a98 <__assert_fail@plt+0x2a5c>
   13ad8:	mov	r2, #1
   13adc:	b	13ae0 <__assert_fail@plt+0x2aa4>
   13ae0:	push	{r4, r5, fp, lr}
   13ae4:	add	fp, sp, #8
   13ae8:	mov	r4, r1
   13aec:	ldr	r5, [r1]
   13af0:	cmp	r0, #0
   13af4:	beq	13b0c <__assert_fail@plt+0x2ad0>
   13af8:	mov	r1, #1
   13afc:	add	r1, r1, r5, lsr #1
   13b00:	adds	r5, r5, r1
   13b04:	bcc	13b24 <__assert_fail@plt+0x2ae8>
   13b08:	bl	13dc0 <__assert_fail@plt+0x2d84>
   13b0c:	cmp	r5, #0
   13b10:	bne	13b24 <__assert_fail@plt+0x2ae8>
   13b14:	mov	r1, #64	; 0x40
   13b18:	udiv	r5, r1, r2
   13b1c:	cmp	r2, #64	; 0x40
   13b20:	addhi	r5, r5, #1
   13b24:	mov	r1, r5
   13b28:	bl	139d4 <__assert_fail@plt+0x2998>
   13b2c:	str	r5, [r4]
   13b30:	pop	{r4, r5, fp, pc}
   13b34:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b38:	add	fp, sp, #24
   13b3c:	mov	r8, r1
   13b40:	ldr	r6, [r1]
   13b44:	add	r1, r6, r6, asr #1
   13b48:	cmp	r1, r6
   13b4c:	mvnvs	r1, #-2147483648	; 0x80000000
   13b50:	cmp	r1, r3
   13b54:	mov	r5, r1
   13b58:	movgt	r5, r3
   13b5c:	cmn	r3, #1
   13b60:	movle	r5, r1
   13b64:	ldr	r4, [fp, #8]
   13b68:	cmn	r4, #1
   13b6c:	ble	13b94 <__assert_fail@plt+0x2b58>
   13b70:	cmp	r4, #0
   13b74:	beq	13be8 <__assert_fail@plt+0x2bac>
   13b78:	cmn	r5, #1
   13b7c:	ble	13bbc <__assert_fail@plt+0x2b80>
   13b80:	mvn	r7, #-2147483648	; 0x80000000
   13b84:	udiv	r1, r7, r4
   13b88:	cmp	r1, r5
   13b8c:	bge	13be8 <__assert_fail@plt+0x2bac>
   13b90:	b	13bf8 <__assert_fail@plt+0x2bbc>
   13b94:	cmn	r5, #1
   13b98:	ble	13bd8 <__assert_fail@plt+0x2b9c>
   13b9c:	cmn	r4, #1
   13ba0:	beq	13be8 <__assert_fail@plt+0x2bac>
   13ba4:	mov	r1, #-2147483648	; 0x80000000
   13ba8:	sdiv	r1, r1, r4
   13bac:	mvn	r7, #-2147483648	; 0x80000000
   13bb0:	cmp	r1, r5
   13bb4:	bge	13be8 <__assert_fail@plt+0x2bac>
   13bb8:	b	13bf8 <__assert_fail@plt+0x2bbc>
   13bbc:	beq	13be8 <__assert_fail@plt+0x2bac>
   13bc0:	mov	r1, #-2147483648	; 0x80000000
   13bc4:	sdiv	r1, r1, r5
   13bc8:	mvn	r7, #-2147483648	; 0x80000000
   13bcc:	cmp	r1, r4
   13bd0:	bge	13be8 <__assert_fail@plt+0x2bac>
   13bd4:	b	13bf8 <__assert_fail@plt+0x2bbc>
   13bd8:	mvn	r7, #-2147483648	; 0x80000000
   13bdc:	sdiv	r1, r7, r4
   13be0:	cmp	r5, r1
   13be4:	blt	13bf8 <__assert_fail@plt+0x2bbc>
   13be8:	mul	r1, r5, r4
   13bec:	mov	r7, #64	; 0x40
   13bf0:	cmp	r1, #63	; 0x3f
   13bf4:	bgt	13c00 <__assert_fail@plt+0x2bc4>
   13bf8:	sdiv	r5, r7, r4
   13bfc:	mul	r1, r5, r4
   13c00:	cmp	r0, #0
   13c04:	moveq	r7, #0
   13c08:	streq	r7, [r8]
   13c0c:	sub	r7, r5, r6
   13c10:	cmp	r7, r2
   13c14:	bge	13cc0 <__assert_fail@plt+0x2c84>
   13c18:	add	r5, r6, r2
   13c1c:	mov	r1, #0
   13c20:	cmp	r5, r3
   13c24:	mov	r2, #0
   13c28:	movwgt	r2, #1
   13c2c:	cmn	r3, #1
   13c30:	movwgt	r1, #1
   13c34:	cmp	r5, r6
   13c38:	bvs	13ca8 <__assert_fail@plt+0x2c6c>
   13c3c:	ands	r1, r1, r2
   13c40:	bne	13ca8 <__assert_fail@plt+0x2c6c>
   13c44:	cmn	r4, #1
   13c48:	ble	13c70 <__assert_fail@plt+0x2c34>
   13c4c:	cmp	r4, #0
   13c50:	beq	13cbc <__assert_fail@plt+0x2c80>
   13c54:	cmn	r5, #1
   13c58:	ble	13c94 <__assert_fail@plt+0x2c58>
   13c5c:	mvn	r1, #-2147483648	; 0x80000000
   13c60:	udiv	r1, r1, r4
   13c64:	cmp	r1, r5
   13c68:	bge	13cbc <__assert_fail@plt+0x2c80>
   13c6c:	b	13ca8 <__assert_fail@plt+0x2c6c>
   13c70:	cmn	r5, #1
   13c74:	ble	13cac <__assert_fail@plt+0x2c70>
   13c78:	cmn	r4, #1
   13c7c:	beq	13cbc <__assert_fail@plt+0x2c80>
   13c80:	mov	r1, #-2147483648	; 0x80000000
   13c84:	sdiv	r1, r1, r4
   13c88:	cmp	r1, r5
   13c8c:	bge	13cbc <__assert_fail@plt+0x2c80>
   13c90:	b	13ca8 <__assert_fail@plt+0x2c6c>
   13c94:	beq	13cbc <__assert_fail@plt+0x2c80>
   13c98:	mov	r1, #-2147483648	; 0x80000000
   13c9c:	sdiv	r1, r1, r5
   13ca0:	cmp	r1, r4
   13ca4:	bge	13cbc <__assert_fail@plt+0x2c80>
   13ca8:	bl	13dc0 <__assert_fail@plt+0x2d84>
   13cac:	mvn	r1, #-2147483648	; 0x80000000
   13cb0:	sdiv	r1, r1, r4
   13cb4:	cmp	r5, r1
   13cb8:	blt	13ca8 <__assert_fail@plt+0x2c6c>
   13cbc:	mul	r1, r5, r4
   13cc0:	bl	13a50 <__assert_fail@plt+0x2a14>
   13cc4:	str	r5, [r8]
   13cc8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ccc:	mov	r1, #1
   13cd0:	b	13cd4 <__assert_fail@plt+0x2c98>
   13cd4:	push	{fp, lr}
   13cd8:	mov	fp, sp
   13cdc:	bl	14430 <__assert_fail@plt+0x33f4>
   13ce0:	bl	13a24 <__assert_fail@plt+0x29e8>
   13ce4:	pop	{fp, pc}
   13ce8:	mov	r1, #1
   13cec:	b	13cf0 <__assert_fail@plt+0x2cb4>
   13cf0:	push	{fp, lr}
   13cf4:	mov	fp, sp
   13cf8:	bl	14ab4 <__assert_fail@plt+0x3a78>
   13cfc:	bl	13a24 <__assert_fail@plt+0x29e8>
   13d00:	pop	{fp, pc}
   13d04:	push	{r4, r5, r6, sl, fp, lr}
   13d08:	add	fp, sp, #16
   13d0c:	mov	r4, r1
   13d10:	mov	r5, r0
   13d14:	mov	r0, r1
   13d18:	bl	13a10 <__assert_fail@plt+0x29d4>
   13d1c:	mov	r6, r0
   13d20:	mov	r1, r5
   13d24:	mov	r2, r4
   13d28:	bl	10e38 <memcpy@plt>
   13d2c:	mov	r0, r6
   13d30:	pop	{r4, r5, r6, sl, fp, pc}
   13d34:	push	{r4, r5, r6, sl, fp, lr}
   13d38:	add	fp, sp, #16
   13d3c:	mov	r4, r1
   13d40:	mov	r5, r0
   13d44:	mov	r0, r1
   13d48:	bl	13a38 <__assert_fail@plt+0x29fc>
   13d4c:	mov	r6, r0
   13d50:	mov	r1, r5
   13d54:	mov	r2, r4
   13d58:	bl	10e38 <memcpy@plt>
   13d5c:	mov	r0, r6
   13d60:	pop	{r4, r5, r6, sl, fp, pc}
   13d64:	push	{r4, r5, r6, sl, fp, lr}
   13d68:	add	fp, sp, #16
   13d6c:	mov	r4, r1
   13d70:	mov	r5, r0
   13d74:	add	r0, r1, #1
   13d78:	bl	13a38 <__assert_fail@plt+0x29fc>
   13d7c:	mov	r6, r0
   13d80:	mov	r0, #0
   13d84:	strb	r0, [r6, r4]
   13d88:	mov	r0, r6
   13d8c:	mov	r1, r5
   13d90:	mov	r2, r4
   13d94:	bl	10e38 <memcpy@plt>
   13d98:	mov	r0, r6
   13d9c:	pop	{r4, r5, r6, sl, fp, pc}
   13da0:	push	{r4, sl, fp, lr}
   13da4:	add	fp, sp, #8
   13da8:	mov	r4, r0
   13dac:	bl	10f64 <strlen@plt>
   13db0:	add	r1, r0, #1
   13db4:	mov	r0, r4
   13db8:	pop	{r4, sl, fp, lr}
   13dbc:	b	13d04 <__assert_fail@plt+0x2cc8>
   13dc0:	push	{fp, lr}
   13dc4:	mov	fp, sp
   13dc8:	movw	r0, #24812	; 0x60ec
   13dcc:	movt	r0, #2
   13dd0:	ldr	r4, [r0]
   13dd4:	movw	r1, #22228	; 0x56d4
   13dd8:	movt	r1, #1
   13ddc:	mov	r0, #0
   13de0:	mov	r2, #5
   13de4:	bl	10e68 <dcgettext@plt>
   13de8:	mov	r3, r0
   13dec:	movw	r2, #21159	; 0x52a7
   13df0:	movt	r2, #1
   13df4:	mov	r0, r4
   13df8:	mov	r1, #0
   13dfc:	bl	10eec <error@plt>
   13e00:	bl	11030 <abort@plt>
   13e04:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e08:	add	fp, sp, #24
   13e0c:	sub	sp, sp, #16
   13e10:	mov	r5, r3
   13e14:	mov	r6, r2
   13e18:	mov	r2, r1
   13e1c:	mov	r8, r0
   13e20:	ldr	r0, [fp, #16]
   13e24:	str	r0, [sp]
   13e28:	add	r3, sp, #8
   13e2c:	mov	r0, r8
   13e30:	mov	r1, #0
   13e34:	bl	13efc <__assert_fail@plt+0x2ec0>
   13e38:	cmp	r0, #0
   13e3c:	bne	13ecc <__assert_fail@plt+0x2e90>
   13e40:	ldr	r7, [sp, #8]
   13e44:	ldr	r4, [sp, #12]
   13e48:	subs	r0, r7, r6
   13e4c:	sbcs	r0, r4, r5
   13e50:	bcc	13e74 <__assert_fail@plt+0x2e38>
   13e54:	ldr	r0, [fp, #12]
   13e58:	ldr	r1, [fp, #8]
   13e5c:	subs	r1, r1, r7
   13e60:	sbcs	r0, r0, r4
   13e64:	ldrcs	r0, [sp, #8]
   13e68:	ldrcs	r1, [sp, #12]
   13e6c:	subcs	sp, fp, #24
   13e70:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e74:	bl	10f7c <__errno_location@plt>
   13e78:	subs	r1, r7, #1073741824	; 0x40000000
   13e7c:	sbcs	r1, r4, #0
   13e80:	movcc	r1, #34	; 0x22
   13e84:	movcs	r1, #75	; 0x4b
   13e88:	str	r1, [r0]
   13e8c:	ldr	r5, [fp, #24]
   13e90:	ldr	r6, [fp, #20]
   13e94:	bl	10f7c <__errno_location@plt>
   13e98:	ldr	r4, [r0]
   13e9c:	mov	r0, r8
   13ea0:	bl	13138 <__assert_fail@plt+0x20fc>
   13ea4:	str	r0, [sp]
   13ea8:	subs	r1, r4, #22
   13eac:	movne	r1, r4
   13eb0:	cmp	r5, #0
   13eb4:	movweq	r5, #1
   13eb8:	movw	r2, #21155	; 0x52a3
   13ebc:	movt	r2, #1
   13ec0:	mov	r0, r5
   13ec4:	mov	r3, r6
   13ec8:	bl	10eec <error@plt>
   13ecc:	cmp	r0, #1
   13ed0:	beq	13ee8 <__assert_fail@plt+0x2eac>
   13ed4:	cmp	r0, #3
   13ed8:	bne	13e8c <__assert_fail@plt+0x2e50>
   13edc:	bl	10f7c <__errno_location@plt>
   13ee0:	mov	r1, #0
   13ee4:	b	13e88 <__assert_fail@plt+0x2e4c>
   13ee8:	bl	10f7c <__errno_location@plt>
   13eec:	mov	r1, #75	; 0x4b
   13ef0:	b	13e88 <__assert_fail@plt+0x2e4c>
   13ef4:	mov	r1, #10
   13ef8:	b	13e04 <__assert_fail@plt+0x2dc8>
   13efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f00:	add	fp, sp, #28
   13f04:	sub	sp, sp, #20
   13f08:	cmp	r2, #37	; 0x25
   13f0c:	bcs	1433c <__assert_fail@plt+0x3300>
   13f10:	mov	r5, r2
   13f14:	mov	r6, r1
   13f18:	mov	r4, r0
   13f1c:	str	r3, [sp, #4]
   13f20:	ldr	sl, [fp, #8]
   13f24:	bl	10f7c <__errno_location@plt>
   13f28:	mov	r7, r0
   13f2c:	mov	r0, #0
   13f30:	str	r0, [r7]
   13f34:	bl	10f40 <__ctype_b_loc@plt>
   13f38:	ldr	r1, [r0]
   13f3c:	mov	r2, r4
   13f40:	ldrb	r0, [r2], #1
   13f44:	add	r3, r1, r0, lsl #1
   13f48:	ldrb	r3, [r3, #1]
   13f4c:	tst	r3, #32
   13f50:	bne	13f40 <__assert_fail@plt+0x2f04>
   13f54:	add	r9, sp, #16
   13f58:	cmp	r6, #0
   13f5c:	movne	r9, r6
   13f60:	mov	r8, #4
   13f64:	cmp	r0, #45	; 0x2d
   13f68:	beq	14330 <__assert_fail@plt+0x32f4>
   13f6c:	mov	r0, r4
   13f70:	mov	r1, r9
   13f74:	mov	r2, r5
   13f78:	bl	10fb8 <strtoumax@plt>
   13f7c:	str	r1, [sp, #12]
   13f80:	str	r0, [sp, #8]
   13f84:	ldr	r6, [r9]
   13f88:	cmp	r6, r4
   13f8c:	beq	13fb4 <__assert_fail@plt+0x2f78>
   13f90:	ldr	r0, [r7]
   13f94:	cmp	r0, #0
   13f98:	beq	13fe8 <__assert_fail@plt+0x2fac>
   13f9c:	cmp	r0, #34	; 0x22
   13fa0:	bne	14330 <__assert_fail@plt+0x32f4>
   13fa4:	mov	r8, #1
   13fa8:	cmp	sl, #0
   13fac:	bne	13ff4 <__assert_fail@plt+0x2fb8>
   13fb0:	b	14320 <__assert_fail@plt+0x32e4>
   13fb4:	cmp	sl, #0
   13fb8:	ldrbne	r1, [r6]
   13fbc:	cmpne	r1, #0
   13fc0:	beq	14330 <__assert_fail@plt+0x32f4>
   13fc4:	mov	r0, sl
   13fc8:	bl	10f70 <strchr@plt>
   13fcc:	cmp	r0, #0
   13fd0:	beq	14330 <__assert_fail@plt+0x32f4>
   13fd4:	mov	r8, #0
   13fd8:	str	r8, [sp, #12]
   13fdc:	mov	r0, #1
   13fe0:	str	r0, [sp, #8]
   13fe4:	b	13ff4 <__assert_fail@plt+0x2fb8>
   13fe8:	mov	r8, r0
   13fec:	cmp	sl, #0
   13ff0:	beq	14320 <__assert_fail@plt+0x32e4>
   13ff4:	ldrb	r4, [r6]
   13ff8:	cmp	r4, #0
   13ffc:	beq	14320 <__assert_fail@plt+0x32e4>
   14000:	mov	r0, sl
   14004:	mov	r1, r4
   14008:	bl	10f70 <strchr@plt>
   1400c:	cmp	r0, #0
   14010:	beq	14220 <__assert_fail@plt+0x31e4>
   14014:	sub	r0, r4, #69	; 0x45
   14018:	mov	r7, #1
   1401c:	mov	r5, #1024	; 0x400
   14020:	cmp	r0, #47	; 0x2f
   14024:	bhi	1411c <__assert_fail@plt+0x30e0>
   14028:	add	r1, pc, #0
   1402c:	ldr	pc, [r1, r0, lsl #2]
   14030:	strdeq	r4, [r1], -r0
   14034:	andeq	r4, r1, ip, lsl r1
   14038:	strdeq	r4, [r1], -r0
   1403c:	andeq	r4, r1, ip, lsl r1
   14040:	andeq	r4, r1, ip, lsl r1
   14044:	andeq	r4, r1, ip, lsl r1
   14048:	strdeq	r4, [r1], -r0
   1404c:	andeq	r4, r1, ip, lsl r1
   14050:	strdeq	r4, [r1], -r0
   14054:	andeq	r4, r1, ip, lsl r1
   14058:	andeq	r4, r1, ip, lsl r1
   1405c:	strdeq	r4, [r1], -r0
   14060:	andeq	r4, r1, ip, lsl r1
   14064:	andeq	r4, r1, ip, lsl r1
   14068:	andeq	r4, r1, ip, lsl r1
   1406c:	strdeq	r4, [r1], -r0
   14070:	andeq	r4, r1, ip, lsl r1
   14074:	andeq	r4, r1, ip, lsl r1
   14078:	andeq	r4, r1, ip, lsl r1
   1407c:	andeq	r4, r1, ip, lsl r1
   14080:	strdeq	r4, [r1], -r0
   14084:	strdeq	r4, [r1], -r0
   14088:	andeq	r4, r1, ip, lsl r1
   1408c:	andeq	r4, r1, ip, lsl r1
   14090:	andeq	r4, r1, ip, lsl r1
   14094:	andeq	r4, r1, ip, lsl r1
   14098:	andeq	r4, r1, ip, lsl r1
   1409c:	andeq	r4, r1, ip, lsl r1
   140a0:	andeq	r4, r1, ip, lsl r1
   140a4:	andeq	r4, r1, ip, lsl r1
   140a8:	andeq	r4, r1, ip, lsl r1
   140ac:	andeq	r4, r1, ip, lsl r1
   140b0:	andeq	r4, r1, ip, lsl r1
   140b4:	andeq	r4, r1, ip, lsl r1
   140b8:	strdeq	r4, [r1], -r0
   140bc:	andeq	r4, r1, ip, lsl r1
   140c0:	andeq	r4, r1, ip, lsl r1
   140c4:	andeq	r4, r1, ip, lsl r1
   140c8:	strdeq	r4, [r1], -r0
   140cc:	andeq	r4, r1, ip, lsl r1
   140d0:	strdeq	r4, [r1], -r0
   140d4:	andeq	r4, r1, ip, lsl r1
   140d8:	andeq	r4, r1, ip, lsl r1
   140dc:	andeq	r4, r1, ip, lsl r1
   140e0:	andeq	r4, r1, ip, lsl r1
   140e4:	andeq	r4, r1, ip, lsl r1
   140e8:	andeq	r4, r1, ip, lsl r1
   140ec:	strdeq	r4, [r1], -r0
   140f0:	mov	r0, sl
   140f4:	mov	r1, #48	; 0x30
   140f8:	bl	10f70 <strchr@plt>
   140fc:	cmp	r0, #0
   14100:	beq	1411c <__assert_fail@plt+0x30e0>
   14104:	ldrb	r0, [r6, #1]
   14108:	cmp	r0, #66	; 0x42
   1410c:	cmpne	r0, #68	; 0x44
   14110:	bne	14238 <__assert_fail@plt+0x31fc>
   14114:	mov	r7, #2
   14118:	mov	r5, #1000	; 0x3e8
   1411c:	sub	r1, r4, #66	; 0x42
   14120:	cmp	r1, #53	; 0x35
   14124:	bhi	14220 <__assert_fail@plt+0x31e4>
   14128:	mov	r0, #0
   1412c:	add	r2, pc, #0
   14130:	ldr	pc, [r2, r1, lsl #2]
   14134:	andeq	r4, r1, r4, lsr #5
   14138:	andeq	r4, r1, r0, lsr #4
   1413c:	andeq	r4, r1, r0, lsr #4
   14140:			; <UNDEFINED> instruction: 0x000142b0
   14144:	andeq	r4, r1, r0, lsr #4
   14148:	andeq	r4, r1, ip, lsl #4
   1414c:	andeq	r4, r1, r0, lsr #4
   14150:	andeq	r4, r1, r0, lsr #4
   14154:	andeq	r4, r1, r0, lsr #4
   14158:	andeq	r4, r1, r4, asr r2
   1415c:	andeq	r4, r1, r0, lsr #4
   14160:	andeq	r4, r1, r8, ror #4
   14164:	andeq	r4, r1, r0, lsr #4
   14168:	andeq	r4, r1, r0, lsr #4
   1416c:	andeq	r4, r1, r4, asr #5
   14170:	andeq	r4, r1, r0, lsr #4
   14174:	andeq	r4, r1, r0, lsr #4
   14178:	andeq	r4, r1, r0, lsr #4
   1417c:	andeq	r4, r1, ip, ror r2
   14180:	andeq	r4, r1, r0, lsr #4
   14184:	andeq	r4, r1, r0, lsr #4
   14188:	andeq	r4, r1, r0, lsr #4
   1418c:	andeq	r4, r1, r0, lsr #4
   14190:	ldrdeq	r4, [r1], -r8
   14194:	muleq	r1, r0, r2
   14198:	andeq	r4, r1, r0, lsr #4
   1419c:	andeq	r4, r1, r0, lsr #4
   141a0:	andeq	r4, r1, r0, lsr #4
   141a4:	andeq	r4, r1, r0, lsr #4
   141a8:	andeq	r4, r1, r0, lsr #4
   141ac:	andeq	r4, r1, r0, lsr #4
   141b0:	andeq	r4, r1, r0, lsr #4
   141b4:	andeq	r4, r1, ip, ror #5
   141b8:	andeq	r4, r1, r4, lsl #6
   141bc:	andeq	r4, r1, r0, lsr #4
   141c0:	andeq	r4, r1, r0, lsr #4
   141c4:	andeq	r4, r1, r0, lsr #4
   141c8:	andeq	r4, r1, ip, lsl #4
   141cc:	andeq	r4, r1, r0, lsr #4
   141d0:	andeq	r4, r1, r0, lsr #4
   141d4:	andeq	r4, r1, r0, lsr #4
   141d8:	andeq	r4, r1, r4, asr r2
   141dc:	andeq	r4, r1, r0, lsr #4
   141e0:	andeq	r4, r1, r8, ror #4
   141e4:	andeq	r4, r1, r0, lsr #4
   141e8:	andeq	r4, r1, r0, lsr #4
   141ec:	andeq	r4, r1, r0, lsr #4
   141f0:	andeq	r4, r1, r0, lsr #4
   141f4:	andeq	r4, r1, r0, lsr #4
   141f8:	andeq	r4, r1, r0, lsr #4
   141fc:	andeq	r4, r1, ip, ror r2
   14200:	andeq	r4, r1, r0, lsr #4
   14204:	andeq	r4, r1, r0, lsr #4
   14208:	strdeq	r4, [r1], -r8
   1420c:	add	r0, sp, #8
   14210:	mov	r1, r5
   14214:	mov	r2, #3
   14218:	bl	143e8 <__assert_fail@plt+0x33ac>
   1421c:	b	14304 <__assert_fail@plt+0x32c8>
   14220:	ldr	r0, [sp, #8]
   14224:	ldr	r1, [sp, #12]
   14228:	ldr	r2, [sp, #4]
   1422c:	strd	r0, [r2]
   14230:	orr	r8, r8, #2
   14234:	b	14330 <__assert_fail@plt+0x32f4>
   14238:	cmp	r0, #105	; 0x69
   1423c:	bne	1411c <__assert_fail@plt+0x30e0>
   14240:	ldrb	r0, [r6, #2]
   14244:	mov	r7, #1
   14248:	cmp	r0, #66	; 0x42
   1424c:	movweq	r7, #3
   14250:	b	1411c <__assert_fail@plt+0x30e0>
   14254:	add	r0, sp, #8
   14258:	mov	r1, r5
   1425c:	mov	r2, #1
   14260:	bl	143e8 <__assert_fail@plt+0x33ac>
   14264:	b	14304 <__assert_fail@plt+0x32c8>
   14268:	add	r0, sp, #8
   1426c:	mov	r1, r5
   14270:	mov	r2, #2
   14274:	bl	143e8 <__assert_fail@plt+0x33ac>
   14278:	b	14304 <__assert_fail@plt+0x32c8>
   1427c:	add	r0, sp, #8
   14280:	mov	r1, r5
   14284:	mov	r2, #4
   14288:	bl	143e8 <__assert_fail@plt+0x33ac>
   1428c:	b	14304 <__assert_fail@plt+0x32c8>
   14290:	add	r0, sp, #8
   14294:	mov	r1, r5
   14298:	mov	r2, #7
   1429c:	bl	143e8 <__assert_fail@plt+0x33ac>
   142a0:	b	14304 <__assert_fail@plt+0x32c8>
   142a4:	add	r0, sp, #8
   142a8:	mov	r1, #1024	; 0x400
   142ac:	b	14300 <__assert_fail@plt+0x32c4>
   142b0:	add	r0, sp, #8
   142b4:	mov	r1, r5
   142b8:	mov	r2, #6
   142bc:	bl	143e8 <__assert_fail@plt+0x33ac>
   142c0:	b	14304 <__assert_fail@plt+0x32c8>
   142c4:	add	r0, sp, #8
   142c8:	mov	r1, r5
   142cc:	mov	r2, #5
   142d0:	bl	143e8 <__assert_fail@plt+0x33ac>
   142d4:	b	14304 <__assert_fail@plt+0x32c8>
   142d8:	add	r0, sp, #8
   142dc:	mov	r1, r5
   142e0:	mov	r2, #8
   142e4:	bl	143e8 <__assert_fail@plt+0x33ac>
   142e8:	b	14304 <__assert_fail@plt+0x32c8>
   142ec:	add	r0, sp, #8
   142f0:	mov	r1, #512	; 0x200
   142f4:	b	14300 <__assert_fail@plt+0x32c4>
   142f8:	add	r0, sp, #8
   142fc:	mov	r1, #2
   14300:	bl	1435c <__assert_fail@plt+0x3320>
   14304:	ldr	r1, [r9]
   14308:	add	r2, r1, r7
   1430c:	str	r2, [r9]
   14310:	ldrb	r1, [r1, r7]
   14314:	orr	r8, r0, r8
   14318:	cmp	r1, #0
   1431c:	orrne	r8, r8, #2
   14320:	ldr	r0, [sp, #8]
   14324:	ldr	r1, [sp, #12]
   14328:	ldr	r2, [sp, #4]
   1432c:	strd	r0, [r2]
   14330:	mov	r0, r8
   14334:	sub	sp, fp, #28
   14338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1433c:	movw	r0, #22245	; 0x56e5
   14340:	movt	r0, #1
   14344:	movw	r1, #22283	; 0x570b
   14348:	movt	r1, #1
   1434c:	movw	r3, #22299	; 0x571b
   14350:	movt	r3, #1
   14354:	mov	r2, #85	; 0x55
   14358:	bl	1103c <__assert_fail@plt>
   1435c:	push	{r4, r5, r6, r7, fp, lr}
   14360:	add	fp, sp, #16
   14364:	mov	r5, r1
   14368:	mov	r4, r0
   1436c:	cmn	r1, #1
   14370:	ble	143a8 <__assert_fail@plt+0x336c>
   14374:	cmp	r5, #0
   14378:	beq	143c8 <__assert_fail@plt+0x338c>
   1437c:	asr	r3, r5, #31
   14380:	mvn	r6, #0
   14384:	mvn	r0, #0
   14388:	mvn	r1, #0
   1438c:	mov	r2, r5
   14390:	bl	14cb8 <__assert_fail@plt+0x3c7c>
   14394:	ldrd	r2, [r4]
   14398:	subs	r0, r0, r2
   1439c:	sbcs	r0, r1, r3
   143a0:	bcc	143b8 <__assert_fail@plt+0x337c>
   143a4:	b	143c8 <__assert_fail@plt+0x338c>
   143a8:	ldrd	r0, [r4]
   143ac:	orrs	r0, r0, r1
   143b0:	beq	143c8 <__assert_fail@plt+0x338c>
   143b4:	mvn	r6, #0
   143b8:	mov	r0, #1
   143bc:	mvn	r7, #0
   143c0:	strd	r6, [r4]
   143c4:	pop	{r4, r5, r6, r7, fp, pc}
   143c8:	ldrd	r0, [r4]
   143cc:	umull	r6, r2, r0, r5
   143d0:	asr	r3, r5, #31
   143d4:	mla	r0, r0, r3, r2
   143d8:	mla	r7, r1, r5, r0
   143dc:	mov	r0, #0
   143e0:	strd	r6, [r4]
   143e4:	pop	{r4, r5, r6, r7, fp, pc}
   143e8:	push	{r4, r5, r6, r7, fp, lr}
   143ec:	add	fp, sp, #16
   143f0:	cmp	r2, #0
   143f4:	moveq	r6, #0
   143f8:	moveq	r0, r6
   143fc:	popeq	{r4, r5, r6, r7, fp, pc}
   14400:	mov	r4, r2
   14404:	mov	r5, r1
   14408:	mov	r7, r0
   1440c:	mov	r6, #0
   14410:	mov	r0, r7
   14414:	mov	r1, r5
   14418:	bl	1435c <__assert_fail@plt+0x3320>
   1441c:	orr	r6, r0, r6
   14420:	subs	r4, r4, #1
   14424:	bne	14410 <__assert_fail@plt+0x33d4>
   14428:	mov	r0, r6
   1442c:	pop	{r4, r5, r6, r7, fp, pc}
   14430:	clz	r2, r1
   14434:	lsr	r2, r2, #5
   14438:	clz	r3, r0
   1443c:	lsr	r3, r3, #5
   14440:	orrs	r2, r3, r2
   14444:	movwne	r1, #1
   14448:	movwne	r0, #1
   1444c:	cmp	r1, #0
   14450:	beq	14480 <__assert_fail@plt+0x3444>
   14454:	mvn	r2, #-2147483648	; 0x80000000
   14458:	udiv	r2, r2, r1
   1445c:	cmp	r2, r0
   14460:	bcs	14480 <__assert_fail@plt+0x3444>
   14464:	push	{fp, lr}
   14468:	mov	fp, sp
   1446c:	bl	10f7c <__errno_location@plt>
   14470:	mov	r1, #12
   14474:	str	r1, [r0]
   14478:	mov	r0, #0
   1447c:	pop	{fp, pc}
   14480:	b	10de4 <calloc@plt>
   14484:	cmp	r0, #0
   14488:	movweq	r0, #1
   1448c:	cmn	r0, #1
   14490:	ble	14498 <__assert_fail@plt+0x345c>
   14494:	b	10f04 <malloc@plt>
   14498:	push	{fp, lr}
   1449c:	mov	fp, sp
   144a0:	bl	10f7c <__errno_location@plt>
   144a4:	mov	r1, #12
   144a8:	str	r1, [r0]
   144ac:	mov	r0, #0
   144b0:	pop	{fp, pc}
   144b4:	push	{fp, lr}
   144b8:	mov	fp, sp
   144bc:	cmp	r0, #0
   144c0:	beq	144dc <__assert_fail@plt+0x34a0>
   144c4:	cmp	r1, #0
   144c8:	beq	144e8 <__assert_fail@plt+0x34ac>
   144cc:	cmn	r1, #1
   144d0:	ble	144f4 <__assert_fail@plt+0x34b8>
   144d4:	pop	{fp, lr}
   144d8:	b	10e80 <realloc@plt>
   144dc:	mov	r0, r1
   144e0:	pop	{fp, lr}
   144e4:	b	14484 <__assert_fail@plt+0x3448>
   144e8:	bl	149bc <__assert_fail@plt+0x3980>
   144ec:	mov	r0, #0
   144f0:	pop	{fp, pc}
   144f4:	bl	10f7c <__errno_location@plt>
   144f8:	mov	r1, #12
   144fc:	str	r1, [r0]
   14500:	mov	r0, #0
   14504:	pop	{fp, pc}
   14508:	mov	r1, r0
   1450c:	sub	r2, r0, #65	; 0x41
   14510:	mov	r0, #1
   14514:	cmp	r2, #26
   14518:	subcs	r2, r1, #97	; 0x61
   1451c:	cmpcs	r2, #26
   14520:	bcs	14528 <__assert_fail@plt+0x34ec>
   14524:	bx	lr
   14528:	sub	r1, r1, #48	; 0x30
   1452c:	cmp	r1, #10
   14530:	movcs	r0, #0
   14534:	bx	lr
   14538:	mov	r1, r0
   1453c:	sub	r2, r0, #65	; 0x41
   14540:	mov	r0, #1
   14544:	cmp	r2, #26
   14548:	subcs	r1, r1, #97	; 0x61
   1454c:	cmpcs	r1, #26
   14550:	movcs	r0, #0
   14554:	bx	lr
   14558:	mov	r1, #0
   1455c:	cmp	r0, #128	; 0x80
   14560:	movwcc	r1, #1
   14564:	mov	r0, r1
   14568:	bx	lr
   1456c:	sub	r1, r0, #9
   14570:	clz	r1, r1
   14574:	lsr	r1, r1, #5
   14578:	sub	r0, r0, #32
   1457c:	clz	r0, r0
   14580:	lsr	r0, r0, #5
   14584:	orr	r0, r0, r1
   14588:	bx	lr
   1458c:	mov	r1, r0
   14590:	mov	r0, #1
   14594:	cmp	r1, #32
   14598:	bxcc	lr
   1459c:	cmp	r1, #127	; 0x7f
   145a0:	movne	r0, #0
   145a4:	bx	lr
   145a8:	sub	r1, r0, #48	; 0x30
   145ac:	mov	r0, #0
   145b0:	cmp	r1, #10
   145b4:	movwcc	r0, #1
   145b8:	bx	lr
   145bc:	sub	r1, r0, #33	; 0x21
   145c0:	mov	r0, #0
   145c4:	cmp	r1, #94	; 0x5e
   145c8:	movwcc	r0, #1
   145cc:	bx	lr
   145d0:	sub	r1, r0, #97	; 0x61
   145d4:	mov	r0, #0
   145d8:	cmp	r1, #26
   145dc:	movwcc	r0, #1
   145e0:	bx	lr
   145e4:	sub	r1, r0, #32
   145e8:	mov	r0, #0
   145ec:	cmp	r1, #95	; 0x5f
   145f0:	movwcc	r0, #1
   145f4:	bx	lr
   145f8:	sub	r1, r0, #33	; 0x21
   145fc:	cmp	r1, #93	; 0x5d
   14600:	bhi	1478c <__assert_fail@plt+0x3750>
   14604:	mov	r0, #1
   14608:	add	r2, pc, #0
   1460c:	ldr	pc, [r2, r1, lsl #2]
   14610:	andeq	r4, r1, r8, lsl #15
   14614:	andeq	r4, r1, r8, lsl #15
   14618:	andeq	r4, r1, r8, lsl #15
   1461c:	andeq	r4, r1, r8, lsl #15
   14620:	andeq	r4, r1, r8, lsl #15
   14624:	andeq	r4, r1, r8, lsl #15
   14628:	andeq	r4, r1, r8, lsl #15
   1462c:	andeq	r4, r1, r8, lsl #15
   14630:	andeq	r4, r1, r8, lsl #15
   14634:	andeq	r4, r1, r8, lsl #15
   14638:	andeq	r4, r1, r8, lsl #15
   1463c:	andeq	r4, r1, r8, lsl #15
   14640:	andeq	r4, r1, r8, lsl #15
   14644:	andeq	r4, r1, r8, lsl #15
   14648:	andeq	r4, r1, r8, lsl #15
   1464c:	andeq	r4, r1, ip, lsl #15
   14650:	andeq	r4, r1, ip, lsl #15
   14654:	andeq	r4, r1, ip, lsl #15
   14658:	andeq	r4, r1, ip, lsl #15
   1465c:	andeq	r4, r1, ip, lsl #15
   14660:	andeq	r4, r1, ip, lsl #15
   14664:	andeq	r4, r1, ip, lsl #15
   14668:	andeq	r4, r1, ip, lsl #15
   1466c:	andeq	r4, r1, ip, lsl #15
   14670:	andeq	r4, r1, ip, lsl #15
   14674:	andeq	r4, r1, r8, lsl #15
   14678:	andeq	r4, r1, r8, lsl #15
   1467c:	andeq	r4, r1, r8, lsl #15
   14680:	andeq	r4, r1, r8, lsl #15
   14684:	andeq	r4, r1, r8, lsl #15
   14688:	andeq	r4, r1, r8, lsl #15
   1468c:	andeq	r4, r1, r8, lsl #15
   14690:	andeq	r4, r1, ip, lsl #15
   14694:	andeq	r4, r1, ip, lsl #15
   14698:	andeq	r4, r1, ip, lsl #15
   1469c:	andeq	r4, r1, ip, lsl #15
   146a0:	andeq	r4, r1, ip, lsl #15
   146a4:	andeq	r4, r1, ip, lsl #15
   146a8:	andeq	r4, r1, ip, lsl #15
   146ac:	andeq	r4, r1, ip, lsl #15
   146b0:	andeq	r4, r1, ip, lsl #15
   146b4:	andeq	r4, r1, ip, lsl #15
   146b8:	andeq	r4, r1, ip, lsl #15
   146bc:	andeq	r4, r1, ip, lsl #15
   146c0:	andeq	r4, r1, ip, lsl #15
   146c4:	andeq	r4, r1, ip, lsl #15
   146c8:	andeq	r4, r1, ip, lsl #15
   146cc:	andeq	r4, r1, ip, lsl #15
   146d0:	andeq	r4, r1, ip, lsl #15
   146d4:	andeq	r4, r1, ip, lsl #15
   146d8:	andeq	r4, r1, ip, lsl #15
   146dc:	andeq	r4, r1, ip, lsl #15
   146e0:	andeq	r4, r1, ip, lsl #15
   146e4:	andeq	r4, r1, ip, lsl #15
   146e8:	andeq	r4, r1, ip, lsl #15
   146ec:	andeq	r4, r1, ip, lsl #15
   146f0:	andeq	r4, r1, ip, lsl #15
   146f4:	andeq	r4, r1, ip, lsl #15
   146f8:	andeq	r4, r1, r8, lsl #15
   146fc:	andeq	r4, r1, r8, lsl #15
   14700:	andeq	r4, r1, r8, lsl #15
   14704:	andeq	r4, r1, r8, lsl #15
   14708:	andeq	r4, r1, r8, lsl #15
   1470c:	andeq	r4, r1, r8, lsl #15
   14710:	andeq	r4, r1, ip, lsl #15
   14714:	andeq	r4, r1, ip, lsl #15
   14718:	andeq	r4, r1, ip, lsl #15
   1471c:	andeq	r4, r1, ip, lsl #15
   14720:	andeq	r4, r1, ip, lsl #15
   14724:	andeq	r4, r1, ip, lsl #15
   14728:	andeq	r4, r1, ip, lsl #15
   1472c:	andeq	r4, r1, ip, lsl #15
   14730:	andeq	r4, r1, ip, lsl #15
   14734:	andeq	r4, r1, ip, lsl #15
   14738:	andeq	r4, r1, ip, lsl #15
   1473c:	andeq	r4, r1, ip, lsl #15
   14740:	andeq	r4, r1, ip, lsl #15
   14744:	andeq	r4, r1, ip, lsl #15
   14748:	andeq	r4, r1, ip, lsl #15
   1474c:	andeq	r4, r1, ip, lsl #15
   14750:	andeq	r4, r1, ip, lsl #15
   14754:	andeq	r4, r1, ip, lsl #15
   14758:	andeq	r4, r1, ip, lsl #15
   1475c:	andeq	r4, r1, ip, lsl #15
   14760:	andeq	r4, r1, ip, lsl #15
   14764:	andeq	r4, r1, ip, lsl #15
   14768:	andeq	r4, r1, ip, lsl #15
   1476c:	andeq	r4, r1, ip, lsl #15
   14770:	andeq	r4, r1, ip, lsl #15
   14774:	andeq	r4, r1, ip, lsl #15
   14778:	andeq	r4, r1, r8, lsl #15
   1477c:	andeq	r4, r1, r8, lsl #15
   14780:	andeq	r4, r1, r8, lsl #15
   14784:	andeq	r4, r1, r8, lsl #15
   14788:	bx	lr
   1478c:	mov	r0, #0
   14790:	bx	lr
   14794:	sub	r0, r0, #9
   14798:	cmp	r0, #23
   1479c:	movhi	r0, #0
   147a0:	bxhi	lr
   147a4:	bic	r0, r0, #-16777216	; 0xff000000
   147a8:	movw	r1, #31
   147ac:	movt	r1, #128	; 0x80
   147b0:	mov	r2, #1
   147b4:	and	r0, r2, r1, lsr r0
   147b8:	bx	lr
   147bc:	sub	r1, r0, #65	; 0x41
   147c0:	mov	r0, #0
   147c4:	cmp	r1, #26
   147c8:	movwcc	r0, #1
   147cc:	bx	lr
   147d0:	mov	r1, r0
   147d4:	sub	r2, r0, #48	; 0x30
   147d8:	mov	r0, #1
   147dc:	cmp	r2, #22
   147e0:	bhi	147f8 <__assert_fail@plt+0x37bc>
   147e4:	mov	ip, #1
   147e8:	movw	r3, #1023	; 0x3ff
   147ec:	movt	r3, #126	; 0x7e
   147f0:	tst	r3, ip, lsl r2
   147f4:	bxne	lr
   147f8:	sub	r1, r1, #97	; 0x61
   147fc:	cmp	r1, #6
   14800:	movcs	r0, #0
   14804:	bxcs	lr
   14808:	bx	lr
   1480c:	sub	r1, r0, #65	; 0x41
   14810:	cmp	r1, #26
   14814:	addcc	r0, r0, #32
   14818:	bx	lr
   1481c:	sub	r1, r0, #97	; 0x61
   14820:	cmp	r1, #26
   14824:	subcc	r0, r0, #32
   14828:	bx	lr
   1482c:	push	{r4, r5, r6, sl, fp, lr}
   14830:	add	fp, sp, #16
   14834:	mov	r4, r0
   14838:	bl	10ec8 <__fpending@plt>
   1483c:	mov	r5, r0
   14840:	mov	r0, r4
   14844:	bl	10ed4 <ferror_unlocked@plt>
   14848:	mov	r6, r0
   1484c:	mov	r0, r4
   14850:	bl	148b4 <__assert_fail@plt+0x3878>
   14854:	cmp	r6, #0
   14858:	beq	14878 <__assert_fail@plt+0x383c>
   1485c:	mvn	r4, #0
   14860:	cmp	r0, #0
   14864:	bne	148ac <__assert_fail@plt+0x3870>
   14868:	bl	10f7c <__errno_location@plt>
   1486c:	mov	r1, #0
   14870:	str	r1, [r0]
   14874:	b	148ac <__assert_fail@plt+0x3870>
   14878:	cmp	r0, #0
   1487c:	mov	r4, r0
   14880:	mvnne	r4, #0
   14884:	cmp	r5, #0
   14888:	bne	148ac <__assert_fail@plt+0x3870>
   1488c:	cmp	r0, #0
   14890:	beq	148ac <__assert_fail@plt+0x3870>
   14894:	bl	10f7c <__errno_location@plt>
   14898:	ldr	r0, [r0]
   1489c:	subs	r4, r0, #9
   148a0:	mvnne	r4, #0
   148a4:	mov	r0, r4
   148a8:	pop	{r4, r5, r6, sl, fp, pc}
   148ac:	mov	r0, r4
   148b0:	pop	{r4, r5, r6, sl, fp, pc}
   148b4:	push	{r4, r5, fp, lr}
   148b8:	add	fp, sp, #8
   148bc:	sub	sp, sp, #8
   148c0:	mov	r4, r0
   148c4:	bl	10fac <fileno@plt>
   148c8:	cmn	r0, #1
   148cc:	ble	14944 <__assert_fail@plt+0x3908>
   148d0:	mov	r0, r4
   148d4:	bl	10f1c <__freading@plt>
   148d8:	cmp	r0, #0
   148dc:	beq	14908 <__assert_fail@plt+0x38cc>
   148e0:	mov	r0, r4
   148e4:	bl	10fac <fileno@plt>
   148e8:	mov	r1, #1
   148ec:	str	r1, [sp]
   148f0:	mov	r2, #0
   148f4:	mov	r3, #0
   148f8:	bl	10eb0 <lseek64@plt>
   148fc:	and	r0, r0, r1
   14900:	cmn	r0, #1
   14904:	beq	14944 <__assert_fail@plt+0x3908>
   14908:	mov	r0, r4
   1490c:	bl	14954 <__assert_fail@plt+0x3918>
   14910:	cmp	r0, #0
   14914:	beq	14944 <__assert_fail@plt+0x3908>
   14918:	bl	10f7c <__errno_location@plt>
   1491c:	ldr	r5, [r0]
   14920:	mov	r0, r4
   14924:	bl	10fd0 <fclose@plt>
   14928:	cmp	r5, #0
   1492c:	beq	1493c <__assert_fail@plt+0x3900>
   14930:	bl	10f7c <__errno_location@plt>
   14934:	str	r5, [r0]
   14938:	mvn	r0, #0
   1493c:	sub	sp, fp, #8
   14940:	pop	{r4, r5, fp, pc}
   14944:	mov	r0, r4
   14948:	sub	sp, fp, #8
   1494c:	pop	{r4, r5, fp, lr}
   14950:	b	10fd0 <fclose@plt>
   14954:	push	{r4, sl, fp, lr}
   14958:	add	fp, sp, #8
   1495c:	mov	r4, r0
   14960:	cmp	r0, #0
   14964:	beq	1497c <__assert_fail@plt+0x3940>
   14968:	mov	r0, r4
   1496c:	bl	10f1c <__freading@plt>
   14970:	cmp	r0, #0
   14974:	movne	r0, r4
   14978:	blne	14988 <__assert_fail@plt+0x394c>
   1497c:	mov	r0, r4
   14980:	pop	{r4, sl, fp, lr}
   14984:	b	10e14 <fflush@plt>
   14988:	ldrb	r1, [r0, #1]
   1498c:	tst	r1, #1
   14990:	bxeq	lr
   14994:	push	{fp, lr}
   14998:	mov	fp, sp
   1499c:	sub	sp, sp, #8
   149a0:	mov	r1, #1
   149a4:	str	r1, [sp]
   149a8:	mov	r2, #0
   149ac:	mov	r3, #0
   149b0:	bl	149e4 <__assert_fail@plt+0x39a8>
   149b4:	mov	sp, fp
   149b8:	pop	{fp, pc}
   149bc:	push	{r4, r5, r6, sl, fp, lr}
   149c0:	add	fp, sp, #16
   149c4:	mov	r4, r0
   149c8:	bl	10f7c <__errno_location@plt>
   149cc:	mov	r5, r0
   149d0:	ldr	r6, [r0]
   149d4:	mov	r0, r4
   149d8:	bl	10e20 <free@plt>
   149dc:	str	r6, [r5]
   149e0:	pop	{r4, r5, r6, sl, fp, pc}
   149e4:	push	{r4, r5, r6, r7, fp, lr}
   149e8:	add	fp, sp, #16
   149ec:	sub	sp, sp, #8
   149f0:	mov	r5, r3
   149f4:	mov	r6, r2
   149f8:	mov	r4, r0
   149fc:	ldr	r0, [r0, #4]
   14a00:	ldr	r1, [r4, #8]
   14a04:	cmp	r1, r0
   14a08:	bne	14a24 <__assert_fail@plt+0x39e8>
   14a0c:	ldrd	r0, [r4, #16]
   14a10:	cmp	r1, r0
   14a14:	bne	14a24 <__assert_fail@plt+0x39e8>
   14a18:	ldr	r0, [r4, #36]	; 0x24
   14a1c:	cmp	r0, #0
   14a20:	beq	14a3c <__assert_fail@plt+0x3a00>
   14a24:	mov	r0, r4
   14a28:	mov	r2, r6
   14a2c:	mov	r3, r5
   14a30:	sub	sp, fp, #16
   14a34:	pop	{r4, r5, r6, r7, fp, lr}
   14a38:	b	10fdc <fseeko64@plt>
   14a3c:	ldr	r7, [fp, #8]
   14a40:	mov	r0, r4
   14a44:	bl	10fac <fileno@plt>
   14a48:	str	r7, [sp]
   14a4c:	mov	r2, r6
   14a50:	mov	r3, r5
   14a54:	bl	10eb0 <lseek64@plt>
   14a58:	and	r2, r0, r1
   14a5c:	cmn	r2, #1
   14a60:	mvneq	r0, #0
   14a64:	subeq	sp, fp, #16
   14a68:	popeq	{r4, r5, r6, r7, fp, pc}
   14a6c:	strd	r0, [r4, #80]	; 0x50
   14a70:	ldr	r0, [r4]
   14a74:	bic	r0, r0, #16
   14a78:	str	r0, [r4]
   14a7c:	mov	r0, #0
   14a80:	sub	sp, fp, #16
   14a84:	pop	{r4, r5, r6, r7, fp, pc}
   14a88:	push	{fp, lr}
   14a8c:	mov	fp, sp
   14a90:	bl	10f7c <__errno_location@plt>
   14a94:	mov	r1, #12
   14a98:	str	r1, [r0]
   14a9c:	mov	r0, #0
   14aa0:	pop	{fp, pc}
   14aa4:	b	14484 <__assert_fail@plt+0x3448>
   14aa8:	cmp	r1, #0
   14aac:	orreq	r1, r1, #1
   14ab0:	b	144b4 <__assert_fail@plt+0x3478>
   14ab4:	b	14430 <__assert_fail@plt+0x33f4>
   14ab8:	clz	r3, r2
   14abc:	lsr	ip, r3, #5
   14ac0:	clz	r3, r1
   14ac4:	lsr	r3, r3, #5
   14ac8:	orrs	r3, r3, ip
   14acc:	movwne	r1, #1
   14ad0:	movwne	r2, #1
   14ad4:	b	14b70 <__assert_fail@plt+0x3b34>
   14ad8:	push	{fp, lr}
   14adc:	mov	fp, sp
   14ae0:	mov	r0, #14
   14ae4:	bl	11000 <nl_langinfo@plt>
   14ae8:	movw	r1, #20337	; 0x4f71
   14aec:	movt	r1, #1
   14af0:	cmp	r0, #0
   14af4:	movne	r1, r0
   14af8:	ldrb	r2, [r1]
   14afc:	movw	r0, #22378	; 0x576a
   14b00:	movt	r0, #1
   14b04:	cmp	r2, #0
   14b08:	movne	r0, r1
   14b0c:	pop	{fp, pc}
   14b10:	push	{r4, r5, r6, r7, fp, lr}
   14b14:	add	fp, sp, #16
   14b18:	sub	sp, sp, #8
   14b1c:	mov	r7, r2
   14b20:	mov	r4, r1
   14b24:	add	r5, sp, #4
   14b28:	cmp	r0, #0
   14b2c:	movne	r5, r0
   14b30:	mov	r0, r5
   14b34:	bl	10ee0 <mbrtowc@plt>
   14b38:	mov	r6, r0
   14b3c:	cmp	r7, #0
   14b40:	beq	14b64 <__assert_fail@plt+0x3b28>
   14b44:	cmn	r6, #2
   14b48:	bcc	14b64 <__assert_fail@plt+0x3b28>
   14b4c:	mov	r0, #0
   14b50:	bl	14bac <__assert_fail@plt+0x3b70>
   14b54:	cmp	r0, #0
   14b58:	ldrbeq	r0, [r4]
   14b5c:	streq	r0, [r5]
   14b60:	moveq	r6, #1
   14b64:	mov	r0, r6
   14b68:	sub	sp, fp, #16
   14b6c:	pop	{r4, r5, r6, r7, fp, pc}
   14b70:	cmp	r2, #0
   14b74:	beq	14ba4 <__assert_fail@plt+0x3b68>
   14b78:	mvn	r3, #0
   14b7c:	udiv	r3, r3, r2
   14b80:	cmp	r3, r1
   14b84:	bcs	14ba4 <__assert_fail@plt+0x3b68>
   14b88:	push	{fp, lr}
   14b8c:	mov	fp, sp
   14b90:	bl	10f7c <__errno_location@plt>
   14b94:	mov	r1, #12
   14b98:	str	r1, [r0]
   14b9c:	mov	r0, #0
   14ba0:	pop	{fp, pc}
   14ba4:	mul	r1, r2, r1
   14ba8:	b	144b4 <__assert_fail@plt+0x3478>
   14bac:	push	{r4, sl, fp, lr}
   14bb0:	add	fp, sp, #8
   14bb4:	sub	sp, sp, #264	; 0x108
   14bb8:	add	r1, sp, #7
   14bbc:	movw	r2, #257	; 0x101
   14bc0:	bl	14c10 <__assert_fail@plt+0x3bd4>
   14bc4:	mov	r4, #0
   14bc8:	cmp	r0, #0
   14bcc:	bne	14c04 <__assert_fail@plt+0x3bc8>
   14bd0:	add	r0, sp, #7
   14bd4:	movw	r1, #22384	; 0x5770
   14bd8:	movt	r1, #1
   14bdc:	bl	10e08 <strcmp@plt>
   14be0:	cmp	r0, #0
   14be4:	beq	14c04 <__assert_fail@plt+0x3bc8>
   14be8:	add	r0, sp, #7
   14bec:	movw	r1, #22386	; 0x5772
   14bf0:	movt	r1, #1
   14bf4:	bl	10e08 <strcmp@plt>
   14bf8:	mov	r4, r0
   14bfc:	cmp	r0, #0
   14c00:	movwne	r4, #1
   14c04:	mov	r0, r4
   14c08:	sub	sp, fp, #8
   14c0c:	pop	{r4, sl, fp, pc}
   14c10:	b	14c14 <__assert_fail@plt+0x3bd8>
   14c14:	push	{r4, r5, r6, r7, fp, lr}
   14c18:	add	fp, sp, #16
   14c1c:	mov	r6, r2
   14c20:	mov	r4, r1
   14c24:	bl	14cb0 <__assert_fail@plt+0x3c74>
   14c28:	cmp	r0, #0
   14c2c:	beq	14c5c <__assert_fail@plt+0x3c20>
   14c30:	mov	r7, r0
   14c34:	bl	10f64 <strlen@plt>
   14c38:	cmp	r0, r6
   14c3c:	bcs	14c7c <__assert_fail@plt+0x3c40>
   14c40:	add	r2, r0, #1
   14c44:	mov	r0, r4
   14c48:	mov	r1, r7
   14c4c:	bl	10e38 <memcpy@plt>
   14c50:	mov	r5, #0
   14c54:	mov	r0, r5
   14c58:	pop	{r4, r5, r6, r7, fp, pc}
   14c5c:	mov	r5, #22
   14c60:	cmp	r6, #0
   14c64:	movne	r0, #0
   14c68:	strbne	r0, [r4]
   14c6c:	movne	r0, r5
   14c70:	popne	{r4, r5, r6, r7, fp, pc}
   14c74:	mov	r0, r5
   14c78:	pop	{r4, r5, r6, r7, fp, pc}
   14c7c:	mov	r5, #34	; 0x22
   14c80:	cmp	r6, #0
   14c84:	beq	14ca4 <__assert_fail@plt+0x3c68>
   14c88:	sub	r6, r6, #1
   14c8c:	mov	r0, r4
   14c90:	mov	r1, r7
   14c94:	mov	r2, r6
   14c98:	bl	10e38 <memcpy@plt>
   14c9c:	mov	r0, #0
   14ca0:	strb	r0, [r4, r6]
   14ca4:	mov	r0, r5
   14ca8:	pop	{r4, r5, r6, r7, fp, pc}
   14cac:	b	14cb0 <__assert_fail@plt+0x3c74>
   14cb0:	mov	r1, #0
   14cb4:	b	10fe8 <setlocale@plt>
   14cb8:	cmp	r3, #0
   14cbc:	cmpeq	r2, #0
   14cc0:	bne	14cd8 <__assert_fail@plt+0x3c9c>
   14cc4:	cmp	r1, #0
   14cc8:	cmpeq	r0, #0
   14ccc:	mvnne	r1, #0
   14cd0:	mvnne	r0, #0
   14cd4:	b	14cf4 <__assert_fail@plt+0x3cb8>
   14cd8:	sub	sp, sp, #8
   14cdc:	push	{sp, lr}
   14ce0:	bl	14d04 <__assert_fail@plt+0x3cc8>
   14ce4:	ldr	lr, [sp, #4]
   14ce8:	add	sp, sp, #8
   14cec:	pop	{r2, r3}
   14cf0:	bx	lr
   14cf4:	push	{r1, lr}
   14cf8:	mov	r0, #8
   14cfc:	bl	10dfc <raise@plt>
   14d00:	pop	{r1, pc}
   14d04:	cmp	r1, r3
   14d08:	cmpeq	r0, r2
   14d0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d10:	mov	r4, r0
   14d14:	movcc	r0, #0
   14d18:	mov	r5, r1
   14d1c:	ldr	lr, [sp, #36]	; 0x24
   14d20:	movcc	r1, r0
   14d24:	bcc	14e20 <__assert_fail@plt+0x3de4>
   14d28:	cmp	r3, #0
   14d2c:	clzeq	ip, r2
   14d30:	clzne	ip, r3
   14d34:	addeq	ip, ip, #32
   14d38:	cmp	r5, #0
   14d3c:	clzeq	r1, r4
   14d40:	addeq	r1, r1, #32
   14d44:	clzne	r1, r5
   14d48:	sub	ip, ip, r1
   14d4c:	sub	sl, ip, #32
   14d50:	lsl	r9, r3, ip
   14d54:	rsb	fp, ip, #32
   14d58:	orr	r9, r9, r2, lsl sl
   14d5c:	orr	r9, r9, r2, lsr fp
   14d60:	lsl	r8, r2, ip
   14d64:	cmp	r5, r9
   14d68:	cmpeq	r4, r8
   14d6c:	movcc	r0, #0
   14d70:	movcc	r1, r0
   14d74:	bcc	14d90 <__assert_fail@plt+0x3d54>
   14d78:	mov	r0, #1
   14d7c:	subs	r4, r4, r8
   14d80:	lsl	r1, r0, sl
   14d84:	orr	r1, r1, r0, lsr fp
   14d88:	lsl	r0, r0, ip
   14d8c:	sbc	r5, r5, r9
   14d90:	cmp	ip, #0
   14d94:	beq	14e20 <__assert_fail@plt+0x3de4>
   14d98:	lsr	r6, r8, #1
   14d9c:	orr	r6, r6, r9, lsl #31
   14da0:	lsr	r7, r9, #1
   14da4:	mov	r2, ip
   14da8:	b	14dcc <__assert_fail@plt+0x3d90>
   14dac:	subs	r3, r4, r6
   14db0:	sbc	r8, r5, r7
   14db4:	adds	r3, r3, r3
   14db8:	adc	r8, r8, r8
   14dbc:	adds	r4, r3, #1
   14dc0:	adc	r5, r8, #0
   14dc4:	subs	r2, r2, #1
   14dc8:	beq	14de8 <__assert_fail@plt+0x3dac>
   14dcc:	cmp	r5, r7
   14dd0:	cmpeq	r4, r6
   14dd4:	bcs	14dac <__assert_fail@plt+0x3d70>
   14dd8:	adds	r4, r4, r4
   14ddc:	adc	r5, r5, r5
   14de0:	subs	r2, r2, #1
   14de4:	bne	14dcc <__assert_fail@plt+0x3d90>
   14de8:	lsr	r3, r4, ip
   14dec:	orr	r3, r3, r5, lsl fp
   14df0:	lsr	r2, r5, ip
   14df4:	orr	r3, r3, r5, lsr sl
   14df8:	adds	r0, r0, r4
   14dfc:	mov	r4, r3
   14e00:	lsl	r3, r2, ip
   14e04:	orr	r3, r3, r4, lsl sl
   14e08:	lsl	ip, r4, ip
   14e0c:	orr	r3, r3, r4, lsr fp
   14e10:	adc	r1, r1, r5
   14e14:	subs	r0, r0, ip
   14e18:	mov	r5, r2
   14e1c:	sbc	r1, r1, r3
   14e20:	cmp	lr, #0
   14e24:	strdne	r4, [lr]
   14e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14e30:	mov	r7, r0
   14e34:	ldr	r6, [pc, #72]	; 14e84 <__assert_fail@plt+0x3e48>
   14e38:	ldr	r5, [pc, #72]	; 14e88 <__assert_fail@plt+0x3e4c>
   14e3c:	add	r6, pc, r6
   14e40:	add	r5, pc, r5
   14e44:	sub	r6, r6, r5
   14e48:	mov	r8, r1
   14e4c:	mov	r9, r2
   14e50:	bl	10dc4 <calloc@plt-0x20>
   14e54:	asrs	r6, r6, #2
   14e58:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e5c:	mov	r4, #0
   14e60:	add	r4, r4, #1
   14e64:	ldr	r3, [r5], #4
   14e68:	mov	r2, r9
   14e6c:	mov	r1, r8
   14e70:	mov	r0, r7
   14e74:	blx	r3
   14e78:	cmp	r6, r4
   14e7c:	bne	14e60 <__assert_fail@plt+0x3e24>
   14e80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e84:	andeq	r1, r1, r8, asr #1
   14e88:	andeq	r1, r1, r0, asr #1
   14e8c:	bx	lr
   14e90:	ldr	r3, [pc, #12]	; 14ea4 <__assert_fail@plt+0x3e68>
   14e94:	mov	r1, #0
   14e98:	add	r3, pc, r3
   14e9c:	ldr	r2, [r3]
   14ea0:	b	10f88 <__cxa_atexit@plt>
   14ea4:	andeq	r1, r1, r4, asr #4

Disassembly of section .fini:

00014ea8 <.fini>:
   14ea8:	push	{r3, lr}
   14eac:	pop	{r3, pc}
