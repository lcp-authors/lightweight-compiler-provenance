
../repos/findutils/xargs/xargs:     file format elf32-littlearm


Disassembly of section .init:

00011178 <.init>:
   11178:	push	{r3, lr}
   1117c:	bl	127f0 <__assert_fail@plt+0x1280>
   11180:	pop	{r3, pc}

Disassembly of section .plt:

00011184 <fdopen@plt-0x14>:
   11184:	push	{lr}		; (str lr, [sp, #-4]!)
   11188:	ldr	lr, [pc, #4]	; 11194 <fdopen@plt-0x4>
   1118c:	add	lr, pc, lr
   11190:	ldr	pc, [lr, #8]!
   11194:	andeq	lr, r1, ip, ror #28

00011198 <fdopen@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #122880	; 0x1e000
   111a0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111a4 <calloc@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #122880	; 0x1e000
   111ac:	ldr	pc, [ip, #3684]!	; 0xe64

000111b0 <strcmp@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #122880	; 0x1e000
   111b8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111bc <strtol@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #122880	; 0x1e000
   111c4:	ldr	pc, [ip, #3668]!	; 0xe54

000111c8 <printf@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #122880	; 0x1e000
   111d0:	ldr	pc, [ip, #3660]!	; 0xe4c

000111d4 <read@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #122880	; 0x1e000
   111dc:	ldr	pc, [ip, #3652]!	; 0xe44

000111e0 <fflush@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #122880	; 0x1e000
   111e8:	ldr	pc, [ip, #3644]!	; 0xe3c

000111ec <wcwidth@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #122880	; 0x1e000
   111f4:	ldr	pc, [ip, #3636]!	; 0xe34

000111f8 <free@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #122880	; 0x1e000
   11200:	ldr	pc, [ip, #3628]!	; 0xe2c

00011204 <ferror@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #122880	; 0x1e000
   1120c:	ldr	pc, [ip, #3620]!	; 0xe24

00011210 <_exit@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #122880	; 0x1e000
   11218:	ldr	pc, [ip, #3612]!	; 0xe1c

0001121c <memcpy@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #122880	; 0x1e000
   11224:	ldr	pc, [ip, #3604]!	; 0xe14

00011228 <execvp@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #122880	; 0x1e000
   11230:	ldr	pc, [ip, #3596]!	; 0xe0c

00011234 <mbsinit@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #122880	; 0x1e000
   1123c:	ldr	pc, [ip, #3588]!	; 0xe04

00011240 <signal@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #122880	; 0x1e000
   11248:	ldr	pc, [ip, #3580]!	; 0xdfc

0001124c <memcmp@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #122880	; 0x1e000
   11254:	ldr	pc, [ip, #3572]!	; 0xdf4

00011258 <dcgettext@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #122880	; 0x1e000
   11260:	ldr	pc, [ip, #3564]!	; 0xdec

00011264 <sysconf@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #122880	; 0x1e000
   1126c:	ldr	pc, [ip, #3556]!	; 0xde4

00011270 <dup2@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #122880	; 0x1e000
   11278:	ldr	pc, [ip, #3548]!	; 0xddc

0001127c <getrlimit64@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #122880	; 0x1e000
   11284:	ldr	pc, [ip, #3540]!	; 0xdd4

00011288 <realloc@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #122880	; 0x1e000
   11290:	ldr	pc, [ip, #3532]!	; 0xdcc

00011294 <textdomain@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #122880	; 0x1e000
   1129c:	ldr	pc, [ip, #3524]!	; 0xdc4

000112a0 <iswcntrl@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #122880	; 0x1e000
   112a8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112ac <iswprint@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #122880	; 0x1e000
   112b4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112b8 <poll@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #122880	; 0x1e000
   112c0:	ldr	pc, [ip, #3500]!	; 0xdac

000112c4 <sigaction@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #122880	; 0x1e000
   112cc:	ldr	pc, [ip, #3492]!	; 0xda4

000112d0 <fwrite@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #122880	; 0x1e000
   112d8:	ldr	pc, [ip, #3484]!	; 0xd9c

000112dc <lseek64@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #122880	; 0x1e000
   112e4:	ldr	pc, [ip, #3476]!	; 0xd94

000112e8 <waitpid@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #122880	; 0x1e000
   112f0:	ldr	pc, [ip, #3468]!	; 0xd8c

000112f4 <__ctype_get_mb_cur_max@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #122880	; 0x1e000
   112fc:	ldr	pc, [ip, #3460]!	; 0xd84

00011300 <strcpy@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #122880	; 0x1e000
   11308:	ldr	pc, [ip, #3452]!	; 0xd7c

0001130c <__fpending@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #122880	; 0x1e000
   11314:	ldr	pc, [ip, #3444]!	; 0xd74

00011318 <mbrtowc@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #122880	; 0x1e000
   11320:	ldr	pc, [ip, #3436]!	; 0xd6c

00011324 <error@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #122880	; 0x1e000
   1132c:	ldr	pc, [ip, #3428]!	; 0xd64

00011330 <opendir@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #122880	; 0x1e000
   11338:	ldr	pc, [ip, #3420]!	; 0xd5c

0001133c <open64@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #122880	; 0x1e000
   11344:	ldr	pc, [ip, #3412]!	; 0xd54

00011348 <getenv@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #122880	; 0x1e000
   11350:	ldr	pc, [ip, #3404]!	; 0xd4c

00011354 <malloc@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #122880	; 0x1e000
   1135c:	ldr	pc, [ip, #3396]!	; 0xd44

00011360 <__libc_start_main@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #122880	; 0x1e000
   11368:	ldr	pc, [ip, #3388]!	; 0xd3c

0001136c <__freading@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #122880	; 0x1e000
   11374:	ldr	pc, [ip, #3380]!	; 0xd34

00011378 <__gmon_start__@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #122880	; 0x1e000
   11380:	ldr	pc, [ip, #3372]!	; 0xd2c

00011384 <getopt_long@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #122880	; 0x1e000
   1138c:	ldr	pc, [ip, #3364]!	; 0xd24

00011390 <__ctype_b_loc@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #122880	; 0x1e000
   11398:	ldr	pc, [ip, #3356]!	; 0xd1c

0001139c <getpid@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #122880	; 0x1e000
   113a4:	ldr	pc, [ip, #3348]!	; 0xd14

000113a8 <exit@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #122880	; 0x1e000
   113b0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113b4 <strtoul@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #122880	; 0x1e000
   113bc:	ldr	pc, [ip, #3332]!	; 0xd04

000113c0 <strlen@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #122880	; 0x1e000
   113c8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113cc <strchr@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #122880	; 0x1e000
   113d4:	ldr	pc, [ip, #3316]!	; 0xcf4

000113d8 <setenv@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #122880	; 0x1e000
   113e0:	ldr	pc, [ip, #3308]!	; 0xcec

000113e4 <fprintf@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #122880	; 0x1e000
   113ec:	ldr	pc, [ip, #3300]!	; 0xce4

000113f0 <__errno_location@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #122880	; 0x1e000
   113f8:	ldr	pc, [ip, #3292]!	; 0xcdc

000113fc <snprintf@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #122880	; 0x1e000
   11404:	ldr	pc, [ip, #3284]!	; 0xcd4

00011408 <__cxa_atexit@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #122880	; 0x1e000
   11410:	ldr	pc, [ip, #3276]!	; 0xccc

00011414 <memset@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #122880	; 0x1e000
   1141c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011420 <strncpy@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #122880	; 0x1e000
   11428:	ldr	pc, [ip, #3260]!	; 0xcbc

0001142c <write@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #122880	; 0x1e000
   11434:	ldr	pc, [ip, #3252]!	; 0xcb4

00011438 <fileno@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #122880	; 0x1e000
   11440:	ldr	pc, [ip, #3244]!	; 0xcac

00011444 <memchr@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #122880	; 0x1e000
   1144c:	ldr	pc, [ip, #3236]!	; 0xca4

00011450 <fclose@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #122880	; 0x1e000
   11458:	ldr	pc, [ip, #3228]!	; 0xc9c

0001145c <strnlen@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #122880	; 0x1e000
   11464:	ldr	pc, [ip, #3220]!	; 0xc94

00011468 <pipe@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #122880	; 0x1e000
   11470:	ldr	pc, [ip, #3212]!	; 0xc8c

00011474 <fseeko64@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #122880	; 0x1e000
   1147c:	ldr	pc, [ip, #3204]!	; 0xc84

00011480 <fcntl64@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #122880	; 0x1e000
   11488:	ldr	pc, [ip, #3196]!	; 0xc7c

0001148c <setlocale@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #122880	; 0x1e000
   11494:	ldr	pc, [ip, #3188]!	; 0xc74

00011498 <sigemptyset@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #122880	; 0x1e000
   114a0:	ldr	pc, [ip, #3180]!	; 0xc6c

000114a4 <fork@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #122880	; 0x1e000
   114ac:	ldr	pc, [ip, #3172]!	; 0xc64

000114b0 <strrchr@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #122880	; 0x1e000
   114b8:	ldr	pc, [ip, #3164]!	; 0xc5c

000114bc <nl_langinfo@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #122880	; 0x1e000
   114c4:	ldr	pc, [ip, #3156]!	; 0xc54

000114c8 <fputc@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #122880	; 0x1e000
   114d0:	ldr	pc, [ip, #3148]!	; 0xc4c

000114d4 <readdir64@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #122880	; 0x1e000
   114dc:	ldr	pc, [ip, #3140]!	; 0xc44

000114e0 <fdopendir@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #122880	; 0x1e000
   114e8:	ldr	pc, [ip, #3132]!	; 0xc3c

000114ec <putc@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #122880	; 0x1e000
   114f4:	ldr	pc, [ip, #3124]!	; 0xc34

000114f8 <dirfd@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #122880	; 0x1e000
   11500:	ldr	pc, [ip, #3116]!	; 0xc2c

00011504 <bindtextdomain@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #122880	; 0x1e000
   1150c:	ldr	pc, [ip, #3108]!	; 0xc24

00011510 <isatty@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #122880	; 0x1e000
   11518:	ldr	pc, [ip, #3100]!	; 0xc1c

0001151c <unsetenv@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #122880	; 0x1e000
   11524:	ldr	pc, [ip, #3092]!	; 0xc14

00011528 <fputs@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #122880	; 0x1e000
   11530:	ldr	pc, [ip, #3084]!	; 0xc0c

00011534 <strncmp@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #122880	; 0x1e000
   1153c:	ldr	pc, [ip, #3076]!	; 0xc04

00011540 <abort@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #122880	; 0x1e000
   11548:	ldr	pc, [ip, #3068]!	; 0xbfc

0001154c <getc@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #122880	; 0x1e000
   11554:	ldr	pc, [ip, #3060]!	; 0xbf4

00011558 <close@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #122880	; 0x1e000
   11560:	ldr	pc, [ip, #3052]!	; 0xbec

00011564 <closedir@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #122880	; 0x1e000
   1156c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011570 <__assert_fail@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #122880	; 0x1e000
   11578:	ldr	pc, [ip, #3036]!	; 0xbdc

Disassembly of section .text:

0001157c <.text>:
   1157c:	ldr	r2, [r1]
   11580:	movw	r3, #59832	; 0xe9b8
   11584:	movt	r3, #1
   11588:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1158c:	strd	r6, [sp, #8]
   11590:	strd	r8, [sp, #16]
   11594:	mov	r8, r1
   11598:	ldr	r1, [r3]
   1159c:	cmp	r2, #0
   115a0:	strd	sl, [sp, #24]
   115a4:	mov	sl, r0
   115a8:	ldrb	r3, [r3, #4]
   115ac:	movweq	r0, #58092	; 0xe2ec
   115b0:	movne	r0, r2
   115b4:	str	lr, [sp, #32]
   115b8:	sub	sp, sp, #228	; 0xe4
   115bc:	movteq	r0, #1
   115c0:	movw	fp, #488	; 0x1e8
   115c4:	movt	fp, #3
   115c8:	str	r1, [sp, #76]	; 0x4c
   115cc:	strb	r3, [sp, #80]	; 0x50
   115d0:	bl	176b4 <__assert_fail@plt+0x6144>
   115d4:	bl	1531c <__assert_fail@plt+0x3dac>
   115d8:	bl	1139c <getpid@plt>
   115dc:	mov	r3, #0
   115e0:	movw	r1, #57200	; 0xdf70
   115e4:	movt	r1, #1
   115e8:	str	r0, [fp, #112]	; 0x70
   115ec:	mov	r0, #6
   115f0:	str	r3, [fp, #120]	; 0x78
   115f4:	bl	1148c <setlocale@plt>
   115f8:	movw	r1, #58100	; 0xe2f4
   115fc:	movt	r1, #1
   11600:	movw	r0, #60904	; 0xede8
   11604:	movt	r0, #1
   11608:	bl	11504 <bindtextdomain@plt>
   1160c:	movw	r0, #60904	; 0xede8
   11610:	movt	r0, #1
   11614:	bl	11294 <textdomain@plt>
   11618:	movw	r0, #23580	; 0x5c1c
   1161c:	movt	r0, #1
   11620:	bl	1d168 <__assert_fail@plt+0xbbf8>
   11624:	cmp	r0, #0
   11628:	bne	126a0 <__assert_fail@plt+0x1130>
   1162c:	movw	r0, #12792	; 0x31f8
   11630:	movt	r0, #1
   11634:	bl	1d168 <__assert_fail@plt+0xbbf8>
   11638:	subs	r3, r0, #0
   1163c:	str	r3, [sp, #32]
   11640:	bne	126a0 <__assert_fail@plt+0x1130>
   11644:	mov	r1, #2048	; 0x800
   11648:	add	r0, fp, #68	; 0x44
   1164c:	bl	14b20 <__assert_fail@plt+0x35b0>
   11650:	sub	r3, r0, #1
   11654:	str	r0, [sp, #52]	; 0x34
   11658:	cmp	r3, #1
   1165c:	movwls	r3, #10544	; 0x2930
   11660:	movtls	r3, #1
   11664:	strls	r3, [sp, #44]	; 0x2c
   11668:	bhi	11f28 <__assert_fail@plt+0x9b8>
   1166c:	movw	r3, #14988	; 0x3a8c
   11670:	movt	r3, #1
   11674:	ldr	r6, [pc, #4076]	; 12668 <__assert_fail@plt+0x10f8>
   11678:	movw	r4, #58968	; 0xe658
   1167c:	movt	r4, #1
   11680:	str	r3, [sp, #28]
   11684:	movw	r3, #58088	; 0xe2e8
   11688:	movt	r3, #1
   1168c:	movw	r9, #480	; 0x1e0
   11690:	movt	r9, #3
   11694:	str	r3, [sp, #36]	; 0x24
   11698:	mov	r3, #0
   1169c:	add	r5, sp, #68	; 0x44
   116a0:	str	r3, [sp, #40]	; 0x28
   116a4:	mov	r3, #1
   116a8:	str	r3, [sp, #48]	; 0x30
   116ac:	mov	r3, r6
   116b0:	mov	r2, r4
   116b4:	str	r5, [sp]
   116b8:	mov	r1, r8
   116bc:	mov	r0, sl
   116c0:	bl	11384 <getopt_long@plt>
   116c4:	cmn	r0, #1
   116c8:	beq	11f84 <__assert_fail@plt+0xa14>
   116cc:	sub	r0, r0, #48	; 0x30
   116d0:	cmp	r0, #208	; 0xd0
   116d4:	ldrls	pc, [pc, r0, lsl #2]
   116d8:	b	12660 <__assert_fail@plt+0x10f0>
   116dc:	andeq	r1, r1, ip, lsr #26
   116e0:	andeq	r2, r1, r0, ror #12
   116e4:	andeq	r2, r1, r0, ror #12
   116e8:	andeq	r2, r1, r0, ror #12
   116ec:	andeq	r2, r1, r0, ror #12
   116f0:	andeq	r2, r1, r0, ror #12
   116f4:	andeq	r2, r1, r0, ror #12
   116f8:	andeq	r2, r1, r0, ror #12
   116fc:	andeq	r2, r1, r0, ror #12
   11700:	andeq	r2, r1, r0, ror #12
   11704:	andeq	r2, r1, r0, ror #12
   11708:	andeq	r2, r1, r0, ror #12
   1170c:	andeq	r2, r1, r0, ror #12
   11710:	andeq	r2, r1, r0, ror #12
   11714:	andeq	r2, r1, r0, ror #12
   11718:	andeq	r2, r1, r0, ror #12
   1171c:	andeq	r2, r1, r0, ror #12
   11720:	andeq	r2, r1, r0, ror #12
   11724:	andeq	r2, r1, r0, ror #12
   11728:	andeq	r2, r1, r0, ror #12
   1172c:	andeq	r2, r1, r0, ror #12
   11730:	andeq	r1, r1, r8, lsl #26
   11734:	andeq	r2, r1, r0, ror #12
   11738:	andeq	r2, r1, r0, ror #12
   1173c:	andeq	r2, r1, r0, ror #12
   11740:	andeq	r1, r1, r4, asr #26
   11744:	andeq	r2, r1, r0, ror #12
   11748:	andeq	r2, r1, r0, ror #12
   1174c:	andeq	r1, r1, r4, lsr #25
   11750:	andeq	r2, r1, r0, ror #12
   11754:	andeq	r2, r1, r0, ror #12
   11758:	andeq	r2, r1, r0, ror #12
   1175c:	andeq	r1, r1, r0, lsr #27
   11760:	andeq	r2, r1, r0, ror #12
   11764:	andeq	r2, r1, r0, ror #12
   11768:	strdeq	r1, [r1], -ip
   1176c:	andeq	r2, r1, r0, ror #12
   11770:	andeq	r2, r1, r0, ror #12
   11774:	andeq	r2, r1, r0, ror #12
   11778:	andeq	r2, r1, r0, ror #12
   1177c:	andeq	r2, r1, r0, ror #12
   11780:	andeq	r2, r1, r0, ror #12
   11784:	andeq	r2, r1, r0, ror #12
   11788:	andeq	r2, r1, r0, ror #12
   1178c:	andeq	r2, r1, r0, ror #12
   11790:	andeq	r2, r1, r0, ror #12
   11794:	andeq	r2, r1, r0, ror #12
   11798:	andeq	r2, r1, r0, ror #12
   1179c:	andeq	r2, r1, r0, ror #12
   117a0:	muleq	r1, r4, sp
   117a4:	andeq	r2, r1, r0, ror #12
   117a8:	andeq	r2, r1, r0, ror #12
   117ac:	strdeq	r1, [r1], -ip
   117b0:	andeq	r1, r1, r8, lsl #26
   117b4:	andeq	r2, r1, r0, ror #12
   117b8:	andeq	r2, r1, r0, ror #12
   117bc:	andeq	r2, r1, r8, asr r6
   117c0:	andeq	r1, r1, r4, asr #26
   117c4:	andeq	r2, r1, r0, ror #12
   117c8:	andeq	r2, r1, r0, ror #12
   117cc:	muleq	r1, r4, fp
   117d0:	andeq	r2, r1, r0, ror #12
   117d4:	andeq	r1, r1, r8, lsr #22
   117d8:	andeq	r1, r1, ip, lsl fp
   117dc:	andeq	r1, r1, ip, lsl #22
   117e0:	andeq	r2, r1, r0, ror #12
   117e4:	andeq	r1, r1, r0, lsl #22
   117e8:	andeq	r1, r1, r4, asr #21
   117ec:			; <UNDEFINED> instruction: 0x00011ab8
   117f0:	andeq	r2, r1, r0, ror #12
   117f4:	andeq	r1, r1, ip, lsl #21
   117f8:	andeq	r2, r1, r0, ror #12
   117fc:	andeq	r1, r1, r0, lsl #21
   11800:	andeq	r2, r1, r0, ror #12
   11804:	andeq	r2, r1, r0, ror #12
   11808:	andeq	r2, r1, r0, ror #12
   1180c:	andeq	r2, r1, r0, ror #12
   11810:	andeq	r2, r1, r0, ror #12
   11814:	andeq	r2, r1, r0, ror #12
   11818:	andeq	r2, r1, r0, ror #12
   1181c:	andeq	r2, r1, r0, ror #12
   11820:	andeq	r2, r1, r0, ror #12
   11824:	andeq	r2, r1, r0, ror #12
   11828:	andeq	r2, r1, r0, ror #12
   1182c:	andeq	r2, r1, r0, ror #12
   11830:	andeq	r2, r1, r0, ror #12
   11834:	andeq	r2, r1, r0, ror #12
   11838:	andeq	r2, r1, r0, ror #12
   1183c:	andeq	r2, r1, r0, ror #12
   11840:	andeq	r2, r1, r0, ror #12
   11844:	andeq	r2, r1, r0, ror #12
   11848:	andeq	r2, r1, r0, ror #12
   1184c:	andeq	r2, r1, r0, ror #12
   11850:	andeq	r2, r1, r0, ror #12
   11854:	andeq	r2, r1, r0, ror #12
   11858:	andeq	r2, r1, r0, ror #12
   1185c:	andeq	r2, r1, r0, ror #12
   11860:	andeq	r2, r1, r0, ror #12
   11864:	andeq	r2, r1, r0, ror #12
   11868:	andeq	r2, r1, r0, ror #12
   1186c:	andeq	r2, r1, r0, ror #12
   11870:	andeq	r2, r1, r0, ror #12
   11874:	andeq	r2, r1, r0, ror #12
   11878:	andeq	r2, r1, r0, ror #12
   1187c:	andeq	r2, r1, r0, ror #12
   11880:	andeq	r2, r1, r0, ror #12
   11884:	andeq	r2, r1, r0, ror #12
   11888:	andeq	r2, r1, r0, ror #12
   1188c:	andeq	r2, r1, r0, ror #12
   11890:	andeq	r2, r1, r0, ror #12
   11894:	andeq	r2, r1, r0, ror #12
   11898:	andeq	r2, r1, r0, ror #12
   1189c:	andeq	r2, r1, r0, ror #12
   118a0:	andeq	r2, r1, r0, ror #12
   118a4:	andeq	r2, r1, r0, ror #12
   118a8:	andeq	r2, r1, r0, ror #12
   118ac:	andeq	r2, r1, r0, ror #12
   118b0:	andeq	r2, r1, r0, ror #12
   118b4:	andeq	r2, r1, r0, ror #12
   118b8:	andeq	r2, r1, r0, ror #12
   118bc:	andeq	r2, r1, r0, ror #12
   118c0:	andeq	r2, r1, r0, ror #12
   118c4:	andeq	r2, r1, r0, ror #12
   118c8:	andeq	r2, r1, r0, ror #12
   118cc:	andeq	r2, r1, r0, ror #12
   118d0:	andeq	r2, r1, r0, ror #12
   118d4:	andeq	r2, r1, r0, ror #12
   118d8:	andeq	r2, r1, r0, ror #12
   118dc:	andeq	r2, r1, r0, ror #12
   118e0:	andeq	r2, r1, r0, ror #12
   118e4:	andeq	r2, r1, r0, ror #12
   118e8:	andeq	r2, r1, r0, ror #12
   118ec:	andeq	r2, r1, r0, ror #12
   118f0:	andeq	r2, r1, r0, ror #12
   118f4:	andeq	r2, r1, r0, ror #12
   118f8:	andeq	r2, r1, r0, ror #12
   118fc:	andeq	r2, r1, r0, ror #12
   11900:	andeq	r2, r1, r0, ror #12
   11904:	andeq	r2, r1, r0, ror #12
   11908:	andeq	r2, r1, r0, ror #12
   1190c:	andeq	r2, r1, r0, ror #12
   11910:	andeq	r2, r1, r0, ror #12
   11914:	andeq	r2, r1, r0, ror #12
   11918:	andeq	r2, r1, r0, ror #12
   1191c:	andeq	r2, r1, r0, ror #12
   11920:	andeq	r2, r1, r0, ror #12
   11924:	andeq	r2, r1, r0, ror #12
   11928:	andeq	r2, r1, r0, ror #12
   1192c:	andeq	r2, r1, r0, ror #12
   11930:	andeq	r2, r1, r0, ror #12
   11934:	andeq	r2, r1, r0, ror #12
   11938:	andeq	r2, r1, r0, ror #12
   1193c:	andeq	r2, r1, r0, ror #12
   11940:	andeq	r2, r1, r0, ror #12
   11944:	andeq	r2, r1, r0, ror #12
   11948:	andeq	r2, r1, r0, ror #12
   1194c:	andeq	r2, r1, r0, ror #12
   11950:	andeq	r2, r1, r0, ror #12
   11954:	andeq	r2, r1, r0, ror #12
   11958:	andeq	r2, r1, r0, ror #12
   1195c:	andeq	r2, r1, r0, ror #12
   11960:	andeq	r2, r1, r0, ror #12
   11964:	andeq	r2, r1, r0, ror #12
   11968:	andeq	r2, r1, r0, ror #12
   1196c:	andeq	r2, r1, r0, ror #12
   11970:	andeq	r2, r1, r0, ror #12
   11974:	andeq	r2, r1, r0, ror #12
   11978:	andeq	r2, r1, r0, ror #12
   1197c:	andeq	r2, r1, r0, ror #12
   11980:	andeq	r2, r1, r0, ror #12
   11984:	andeq	r2, r1, r0, ror #12
   11988:	andeq	r2, r1, r0, ror #12
   1198c:	andeq	r2, r1, r0, ror #12
   11990:	andeq	r2, r1, r0, ror #12
   11994:	andeq	r2, r1, r0, ror #12
   11998:	andeq	r2, r1, r0, ror #12
   1199c:	andeq	r2, r1, r0, ror #12
   119a0:	andeq	r2, r1, r0, ror #12
   119a4:	andeq	r2, r1, r0, ror #12
   119a8:	andeq	r2, r1, r0, ror #12
   119ac:	andeq	r2, r1, r0, ror #12
   119b0:	andeq	r2, r1, r0, ror #12
   119b4:	andeq	r2, r1, r0, ror #12
   119b8:	andeq	r2, r1, r0, ror #12
   119bc:	andeq	r2, r1, r0, ror #12
   119c0:	andeq	r2, r1, r0, ror #12
   119c4:	andeq	r2, r1, r0, ror #12
   119c8:	andeq	r2, r1, r0, ror #12
   119cc:	andeq	r2, r1, r0, ror #12
   119d0:	andeq	r2, r1, r0, ror #12
   119d4:	andeq	r2, r1, r0, ror #12
   119d8:	andeq	r2, r1, r0, ror #12
   119dc:	andeq	r2, r1, r0, ror #12
   119e0:	andeq	r2, r1, r0, ror #12
   119e4:	andeq	r2, r1, r0, ror #12
   119e8:	andeq	r2, r1, r0, ror #12
   119ec:	andeq	r2, r1, r0, ror #12
   119f0:	andeq	r2, r1, r0, ror #12
   119f4:	andeq	r2, r1, r0, ror #12
   119f8:	andeq	r2, r1, r0, ror #12
   119fc:	andeq	r2, r1, r0, ror #12
   11a00:	andeq	r2, r1, r0, ror #12
   11a04:	andeq	r2, r1, r0, ror #12
   11a08:	andeq	r2, r1, r0, ror #12
   11a0c:	andeq	r2, r1, r0, ror #12
   11a10:	andeq	r2, r1, r0, ror #12
   11a14:	andeq	r2, r1, r0, ror #12
   11a18:	andeq	r2, r1, r0, ror #12
   11a1c:	andeq	r1, r1, r0, lsr #20
   11a20:	ldr	r7, [r9]
   11a24:	mov	r1, #61	; 0x3d
   11a28:	mov	r0, r7
   11a2c:	bl	113cc <strchr@plt>
   11a30:	subs	r3, r0, #0
   11a34:	str	r3, [sp, #56]	; 0x38
   11a38:	bne	12734 <__assert_fail@plt+0x11c4>
   11a3c:	mov	r0, r7
   11a40:	str	r7, [fp, #132]	; 0x84
   11a44:	bl	1151c <unsetenv@plt>
   11a48:	cmp	r0, #0
   11a4c:	beq	116ac <__assert_fail@plt+0x13c>
   11a50:	bl	113f0 <__errno_location@plt>
   11a54:	ldr	r4, [r0]
   11a58:	mov	r2, #5
   11a5c:	movw	r1, #58928	; 0xe630
   11a60:	movt	r1, #1
   11a64:	ldr	r0, [sp, #56]	; 0x38
   11a68:	bl	11258 <dcgettext@plt>
   11a6c:	mov	r2, r0
   11a70:	mov	r3, r7
   11a74:	mov	r1, r4
   11a78:	mov	r0, #1
   11a7c:	bl	11324 <error@plt>
   11a80:	mov	r3, #1
   11a84:	str	r3, [fp, #68]	; 0x44
   11a88:	b	116ac <__assert_fail@plt+0x13c>
   11a8c:	movw	r0, #58092	; 0xe2ec
   11a90:	movt	r0, #1
   11a94:	bl	15654 <__assert_fail@plt+0x40e4>
   11a98:	ldr	r0, [sp, #32]
   11a9c:	add	sp, sp, #228	; 0xe4
   11aa0:	ldrd	r4, [sp]
   11aa4:	ldrd	r6, [sp, #8]
   11aa8:	ldrd	r8, [sp, #16]
   11aac:	ldrd	sl, [sp, #24]
   11ab0:	add	sp, sp, #32
   11ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   11ab8:	mov	r3, #1
   11abc:	strb	r3, [fp, #129]	; 0x81
   11ac0:	b	116ac <__assert_fail@plt+0x13c>
   11ac4:	mov	r7, #0
   11ac8:	ldr	r3, [sp, #44]	; 0x2c
   11acc:	blx	r3
   11ad0:	mov	r2, #1
   11ad4:	mov	r1, #115	; 0x73
   11ad8:	str	r7, [sp]
   11adc:	ldr	r0, [r9]
   11ae0:	ldr	r3, [fp, #72]	; 0x48
   11ae4:	bl	13018 <__assert_fail@plt+0x1aa8>
   11ae8:	ldr	r2, [fp, #72]	; 0x48
   11aec:	mov	r3, r0
   11af0:	cmp	r2, r0
   11af4:	bcc	11eec <__assert_fail@plt+0x97c>
   11af8:	str	r3, [fp, #80]	; 0x50
   11afc:	b	116ac <__assert_fail@plt+0x13c>
   11b00:	mov	r3, #0
   11b04:	str	r3, [sp, #48]	; 0x30
   11b08:	b	116ac <__assert_fail@plt+0x13c>
   11b0c:	mov	r3, #1
   11b10:	strb	r3, [fp, #128]	; 0x80
   11b14:	strb	r3, [fp, #129]	; 0x81
   11b18:	b	116ac <__assert_fail@plt+0x13c>
   11b1c:	mov	r3, #1
   11b20:	strb	r3, [fp, #136]	; 0x88
   11b24:	b	116ac <__assert_fail@plt+0x13c>
   11b28:	mov	ip, #1
   11b2c:	mvn	r3, #0
   11b30:	ldr	r0, [r9]
   11b34:	mov	r2, ip
   11b38:	mov	r1, #110	; 0x6e
   11b3c:	str	ip, [sp]
   11b40:	bl	13018 <__assert_fail@plt+0x1aa8>
   11b44:	ldr	r3, [fp, #104]	; 0x68
   11b48:	str	r0, [fp, #108]	; 0x6c
   11b4c:	cmp	r3, #0
   11b50:	bne	11ecc <__assert_fail@plt+0x95c>
   11b54:	ldr	r3, [fp, #92]	; 0x5c
   11b58:	cmp	r3, #0
   11b5c:	beq	116ac <__assert_fail@plt+0x13c>
   11b60:	ldr	r3, [fp, #108]	; 0x6c
   11b64:	cmp	r3, #1
   11b68:	moveq	r3, #0
   11b6c:	streq	r3, [fp, #108]	; 0x6c
   11b70:	beq	116ac <__assert_fail@plt+0x13c>
   11b74:	movw	r1, #58756	; 0xe584
   11b78:	movt	r1, #1
   11b7c:	movw	r0, #58784	; 0xe5a0
   11b80:	movt	r0, #1
   11b84:	bl	128dc <__assert_fail@plt+0x136c>
   11b88:	mov	r3, #0
   11b8c:	str	r3, [fp, #92]	; 0x5c
   11b90:	b	116ac <__assert_fail@plt+0x13c>
   11b94:	ldr	r0, [r9]
   11b98:	cmp	r0, #0
   11b9c:	moveq	r3, #1
   11ba0:	streq	r3, [fp, #104]	; 0x68
   11ba4:	beq	11bc4 <__assert_fail@plt+0x654>
   11ba8:	mov	r1, #1
   11bac:	mvn	r3, #0
   11bb0:	mov	r2, r1
   11bb4:	str	r1, [sp]
   11bb8:	mov	r1, #108	; 0x6c
   11bbc:	bl	13018 <__assert_fail@plt+0x1aa8>
   11bc0:	str	r0, [fp, #104]	; 0x68
   11bc4:	ldr	r3, [fp, #108]	; 0x6c
   11bc8:	cmp	r3, #0
   11bcc:	bne	11e6c <__assert_fail@plt+0x8fc>
   11bd0:	ldr	r3, [fp, #92]	; 0x5c
   11bd4:	cmp	r3, #0
   11bd8:	beq	116ac <__assert_fail@plt+0x13c>
   11bdc:	movw	r1, #58756	; 0xe584
   11be0:	movt	r1, #1
   11be4:	movw	r0, #58768	; 0xe590
   11be8:	movt	r0, #1
   11bec:	bl	128dc <__assert_fail@plt+0x136c>
   11bf0:	mov	r3, #0
   11bf4:	str	r3, [fp, #92]	; 0x5c
   11bf8:	b	116ac <__assert_fail@plt+0x13c>
   11bfc:	ldr	r3, [r9]
   11c00:	mov	r0, r3
   11c04:	str	r3, [sp, #28]
   11c08:	bl	113c0 <strlen@plt>
   11c0c:	ldr	r3, [sp, #28]
   11c10:	cmp	r0, #1
   11c14:	ldrb	r7, [r3]
   11c18:	beq	11e58 <__assert_fail@plt+0x8e8>
   11c1c:	cmp	r7, #92	; 0x5c
   11c20:	bne	1276c <__assert_fail@plt+0x11fc>
   11c24:	ldrb	r7, [r3, #1]
   11c28:	sub	r2, r7, #92	; 0x5c
   11c2c:	cmp	r2, #26
   11c30:	ldrls	pc, [pc, r2, lsl #2]
   11c34:	b	11dcc <__assert_fail@plt+0x85c>
   11c38:	andeq	r1, r1, r8, asr lr
   11c3c:	andeq	r1, r1, ip, asr #27
   11c40:	andeq	r1, r1, ip, asr #27
   11c44:	andeq	r1, r1, ip, asr #27
   11c48:	andeq	r1, r1, ip, asr #27
   11c4c:	andeq	r2, r1, r0, asr #6
   11c50:	andeq	r2, r1, r8, asr #6
   11c54:	andeq	r1, r1, ip, asr #27
   11c58:	andeq	r1, r1, ip, asr #27
   11c5c:	andeq	r1, r1, ip, asr #27
   11c60:	andeq	r2, r1, r0, lsr r3
   11c64:	andeq	r1, r1, ip, asr #27
   11c68:	andeq	r1, r1, ip, asr #27
   11c6c:	andeq	r1, r1, ip, asr #27
   11c70:	andeq	r1, r1, ip, asr #27
   11c74:	andeq	r1, r1, ip, asr #27
   11c78:	andeq	r1, r1, ip, asr #27
   11c7c:	andeq	r1, r1, ip, asr #27
   11c80:	andeq	r2, r1, r0, asr r3
   11c84:	andeq	r1, r1, ip, asr #27
   11c88:	andeq	r1, r1, ip, asr #27
   11c8c:	andeq	r1, r1, ip, asr #27
   11c90:	andeq	r2, r1, r8, asr r3
   11c94:	andeq	r1, r1, ip, asr #27
   11c98:	andeq	r2, r1, r0, ror #6
   11c9c:	andeq	r1, r1, ip, asr #27
   11ca0:	andeq	r2, r1, r8, lsr r3
   11ca4:	mov	ip, #1
   11ca8:	mvn	r3, #0
   11cac:	ldr	r0, [r9]
   11cb0:	mov	r2, ip
   11cb4:	mov	r1, #76	; 0x4c
   11cb8:	str	ip, [sp]
   11cbc:	bl	13018 <__assert_fail@plt+0x1aa8>
   11cc0:	ldr	r3, [fp, #108]	; 0x6c
   11cc4:	str	r0, [fp, #104]	; 0x68
   11cc8:	cmp	r3, #0
   11ccc:	bne	11e8c <__assert_fail@plt+0x91c>
   11cd0:	ldr	r3, [fp, #92]	; 0x5c
   11cd4:	cmp	r3, #0
   11cd8:	beq	116ac <__assert_fail@plt+0x13c>
   11cdc:	movw	r1, #58756	; 0xe584
   11ce0:	movt	r1, #1
   11ce4:	movw	r0, #58752	; 0xe580
   11ce8:	movt	r0, #1
   11cec:	bl	128dc <__assert_fail@plt+0x136c>
   11cf0:	mov	r3, #0
   11cf4:	str	r3, [fp, #92]	; 0x5c
   11cf8:	b	116ac <__assert_fail@plt+0x13c>
   11cfc:	mov	r3, #1
   11d00:	str	r3, [sp, #40]	; 0x28
   11d04:	b	116ac <__assert_fail@plt+0x13c>
   11d08:	ldr	r3, [r9]
   11d0c:	cmp	r3, #0
   11d10:	beq	11d20 <__assert_fail@plt+0x7b0>
   11d14:	ldrb	r2, [r3]
   11d18:	cmp	r2, #0
   11d1c:	bne	11d24 <__assert_fail@plt+0x7b4>
   11d20:	mov	r3, #0
   11d24:	str	r3, [fp, #168]	; 0xa8
   11d28:	b	116ac <__assert_fail@plt+0x13c>
   11d2c:	mov	r3, #0
   11d30:	movw	r2, #14612	; 0x3914
   11d34:	movt	r2, #1
   11d38:	strb	r3, [fp, #156]	; 0x9c
   11d3c:	str	r2, [sp, #28]
   11d40:	b	116ac <__assert_fail@plt+0x13c>
   11d44:	ldr	r3, [r9]
   11d48:	movw	r2, #58084	; 0xe2e4
   11d4c:	movt	r2, #1
   11d50:	ldr	r1, [fp, #108]	; 0x6c
   11d54:	cmp	r3, #0
   11d58:	moveq	r3, r2
   11d5c:	cmp	r1, #0
   11d60:	str	r3, [fp, #92]	; 0x5c
   11d64:	bne	11eac <__assert_fail@plt+0x93c>
   11d68:	ldr	r3, [fp, #104]	; 0x68
   11d6c:	cmp	r3, #0
   11d70:	beq	116ac <__assert_fail@plt+0x13c>
   11d74:	movw	r1, #58740	; 0xe574
   11d78:	movt	r1, #1
   11d7c:	movw	r0, #58724	; 0xe564
   11d80:	movt	r0, #1
   11d84:	bl	128dc <__assert_fail@plt+0x136c>
   11d88:	mov	r3, #0
   11d8c:	str	r3, [fp, #104]	; 0x68
   11d90:	b	116ac <__assert_fail@plt+0x13c>
   11d94:	ldr	r3, [r9]
   11d98:	str	r3, [sp, #36]	; 0x24
   11d9c:	b	116ac <__assert_fail@plt+0x13c>
   11da0:	mov	ip, #1
   11da4:	mvn	r3, #-2147483648	; 0x80000000
   11da8:	ldr	r0, [r9]
   11dac:	mov	r2, #0
   11db0:	mov	r1, #80	; 0x50
   11db4:	movw	r7, #356	; 0x164
   11db8:	movt	r7, #3
   11dbc:	str	ip, [sp]
   11dc0:	bl	13018 <__assert_fail@plt+0x1aa8>
   11dc4:	str	r0, [r7]
   11dc8:	b	116ac <__assert_fail@plt+0x13c>
   11dcc:	cmp	r7, #120	; 0x78
   11dd0:	moveq	r1, #16
   11dd4:	addeq	r2, r3, #2
   11dd8:	streq	r1, [sp, #28]
   11ddc:	beq	11e0c <__assert_fail@plt+0x89c>
   11de0:	str	r3, [sp, #28]
   11de4:	lsl	r7, r7, #1
   11de8:	bl	11390 <__ctype_b_loc@plt>
   11dec:	ldr	r2, [r0]
   11df0:	ldr	r3, [sp, #28]
   11df4:	ldrh	r2, [r2, r7]
   11df8:	ands	r7, r2, #2048	; 0x800
   11dfc:	beq	126ec <__assert_fail@plt+0x117c>
   11e00:	mov	r1, #8
   11e04:	add	r2, r3, #1
   11e08:	str	r1, [sp, #28]
   11e0c:	strd	r2, [sp, #56]	; 0x38
   11e10:	mov	r7, #0
   11e14:	bl	113f0 <__errno_location@plt>
   11e18:	ldr	r2, [sp, #56]	; 0x38
   11e1c:	mov	r1, r0
   11e20:	str	r7, [sp, #84]	; 0x54
   11e24:	str	r7, [r1]
   11e28:	add	r1, sp, #84	; 0x54
   11e2c:	mov	r0, r2
   11e30:	ldr	r2, [sp, #28]
   11e34:	bl	113b4 <strtoul@plt>
   11e38:	cmp	r0, #255	; 0xff
   11e3c:	ldr	r3, [sp, #60]	; 0x3c
   11e40:	bhi	12614 <__assert_fail@plt+0x10a4>
   11e44:	ldr	r2, [sp, #84]	; 0x54
   11e48:	ldrb	r2, [r2]
   11e4c:	cmp	r2, #0
   11e50:	bne	126cc <__assert_fail@plt+0x115c>
   11e54:	uxtb	r7, r0
   11e58:	movw	r3, #14612	; 0x3914
   11e5c:	movt	r3, #1
   11e60:	strb	r7, [fp, #156]	; 0x9c
   11e64:	str	r3, [sp, #28]
   11e68:	b	116ac <__assert_fail@plt+0x13c>
   11e6c:	movw	r1, #58712	; 0xe558
   11e70:	movt	r1, #1
   11e74:	movw	r0, #58768	; 0xe590
   11e78:	movt	r0, #1
   11e7c:	bl	128dc <__assert_fail@plt+0x136c>
   11e80:	mov	r3, #0
   11e84:	str	r3, [fp, #108]	; 0x6c
   11e88:	b	11bd0 <__assert_fail@plt+0x660>
   11e8c:	movw	r1, #58712	; 0xe558
   11e90:	movt	r1, #1
   11e94:	movw	r0, #58752	; 0xe580
   11e98:	movt	r0, #1
   11e9c:	bl	128dc <__assert_fail@plt+0x136c>
   11ea0:	mov	r3, #0
   11ea4:	str	r3, [fp, #108]	; 0x6c
   11ea8:	b	11cd0 <__assert_fail@plt+0x760>
   11eac:	movw	r1, #58712	; 0xe558
   11eb0:	movt	r1, #1
   11eb4:	movw	r0, #58724	; 0xe564
   11eb8:	movt	r0, #1
   11ebc:	bl	128dc <__assert_fail@plt+0x136c>
   11ec0:	mov	r3, #0
   11ec4:	str	r3, [fp, #108]	; 0x6c
   11ec8:	b	11d68 <__assert_fail@plt+0x7f8>
   11ecc:	movw	r1, #58740	; 0xe574
   11ed0:	movt	r1, #1
   11ed4:	movw	r0, #58784	; 0xe5a0
   11ed8:	movt	r0, #1
   11edc:	bl	128dc <__assert_fail@plt+0x136c>
   11ee0:	mov	r3, #0
   11ee4:	str	r3, [fp, #104]	; 0x68
   11ee8:	b	11b54 <__assert_fail@plt+0x5e4>
   11eec:	mov	r2, #5
   11ef0:	movw	r1, #58800	; 0xe5b0
   11ef4:	movt	r1, #1
   11ef8:	mov	r0, r7
   11efc:	str	r3, [sp, #56]	; 0x38
   11f00:	bl	11258 <dcgettext@plt>
   11f04:	ldr	ip, [fp, #72]	; 0x48
   11f08:	mov	r2, r0
   11f0c:	mov	r1, r7
   11f10:	mov	r0, r7
   11f14:	ldr	r3, [sp, #56]	; 0x38
   11f18:	str	ip, [sp]
   11f1c:	bl	11324 <error@plt>
   11f20:	ldr	r3, [fp, #72]	; 0x48
   11f24:	b	11af8 <__assert_fail@plt+0x588>
   11f28:	ldr	r0, [sp, #32]
   11f2c:	bl	11264 <sysconf@plt>
   11f30:	cmp	r0, #0
   11f34:	ble	11f54 <__assert_fail@plt+0x9e4>
   11f38:	cmp	r0, #2048	; 0x800
   11f3c:	ble	12718 <__assert_fail@plt+0x11a8>
   11f40:	ldr	r3, [fp, #80]	; 0x50
   11f44:	sub	r0, r0, #2048	; 0x800
   11f48:	cmp	r3, r0
   11f4c:	movcc	r0, r3
   11f50:	str	r0, [fp, #80]	; 0x50
   11f54:	ldr	r3, [fp, #80]	; 0x50
   11f58:	cmp	r3, #2048	; 0x800
   11f5c:	bcc	12798 <__assert_fail@plt+0x1228>
   11f60:	movw	r3, #13488	; 0x34b0
   11f64:	movt	r3, #1
   11f68:	ldr	r0, [pc, #1788]	; 1266c <__assert_fail@plt+0x10fc>
   11f6c:	str	r3, [fp, #100]	; 0x64
   11f70:	movw	r3, #10404	; 0x28a4
   11f74:	movt	r3, #1
   11f78:	str	r3, [sp, #44]	; 0x2c
   11f7c:	bl	14c7c <__assert_fail@plt+0x370c>
   11f80:	b	1166c <__assert_fail@plt+0xfc>
   11f84:	ldr	r1, [sp, #28]
   11f88:	movw	r3, #14612	; 0x3914
   11f8c:	movt	r3, #1
   11f90:	ldr	r2, [fp, #168]	; 0xa8
   11f94:	sub	r3, r1, r3
   11f98:	clz	r3, r3
   11f9c:	lsr	r3, r3, #5
   11fa0:	cmp	r2, #0
   11fa4:	moveq	r3, #0
   11fa8:	cmp	r3, #0
   11fac:	bne	12678 <__assert_fail@plt+0x1108>
   11fb0:	ldr	r3, [sp, #44]	; 0x2c
   11fb4:	blx	r3
   11fb8:	ldr	r3, [sp, #52]	; 0x34
   11fbc:	cmp	r3, #0
   11fc0:	bne	1277c <__assert_fail@plt+0x120c>
   11fc4:	movw	r3, #10408	; 0x28a8
   11fc8:	movt	r3, #1
   11fcc:	add	r0, sp, #88	; 0x58
   11fd0:	str	r3, [sp, #84]	; 0x54
   11fd4:	bl	11498 <sigemptyset@plt>
   11fd8:	ldr	r3, [sp, #52]	; 0x34
   11fdc:	add	r1, sp, #84	; 0x54
   11fe0:	mov	r0, #10
   11fe4:	mov	r2, r3
   11fe8:	str	r3, [sp, #216]	; 0xd8
   11fec:	bl	112c4 <sigaction@plt>
   11ff0:	cmp	r0, #0
   11ff4:	bne	122fc <__assert_fail@plt+0xd8c>
   11ff8:	movw	r3, #12672	; 0x3180
   11ffc:	movt	r3, #1
   12000:	mov	r4, #0
   12004:	add	r0, sp, #88	; 0x58
   12008:	str	r3, [sp, #84]	; 0x54
   1200c:	bl	11498 <sigemptyset@plt>
   12010:	add	r1, sp, #84	; 0x54
   12014:	mov	r2, r4
   12018:	str	r4, [sp, #216]	; 0xd8
   1201c:	mov	r0, #12
   12020:	bl	112c4 <sigaction@plt>
   12024:	cmp	r0, r4
   12028:	bne	12230 <__assert_fail@plt+0xcc0>
   1202c:	movw	r1, #58088	; 0xe2e8
   12030:	movt	r1, #1
   12034:	ldr	r0, [sp, #36]	; 0x24
   12038:	bl	111b0 <strcmp@plt>
   1203c:	cmp	r0, #0
   12040:	bne	12260 <__assert_fail@plt+0xcf0>
   12044:	movw	r3, #472	; 0x1d8
   12048:	movt	r3, #3
   1204c:	ldr	r3, [r3]
   12050:	str	r3, [fp, #152]	; 0x98
   12054:	ldr	r3, [fp, #92]	; 0x5c
   12058:	cmp	r3, #0
   1205c:	beq	12604 <__assert_fail@plt+0x1094>
   12060:	mov	r3, #1
   12064:	str	r3, [fp, #68]	; 0x44
   12068:	movw	r3, #456	; 0x1c8
   1206c:	movt	r3, #3
   12070:	str	r3, [sp, #44]	; 0x2c
   12074:	ldr	r3, [r3]
   12078:	cmp	r3, sl
   1207c:	bne	1209c <__assert_fail@plt+0xb2c>
   12080:	add	r2, sp, #76	; 0x4c
   12084:	mov	r3, #0
   12088:	add	r8, sp, #72	; 0x48
   1208c:	mov	sl, #1
   12090:	str	r2, [sp, #72]	; 0x48
   12094:	ldr	r2, [sp, #44]	; 0x2c
   12098:	str	r3, [r2]
   1209c:	ldr	r3, [sp, #40]	; 0x28
   120a0:	cmp	r3, #0
   120a4:	bne	1246c <__assert_fail@plt+0xefc>
   120a8:	ldr	r0, [fp, #80]	; 0x50
   120ac:	add	r0, r0, #1
   120b0:	bl	1ba50 <__assert_fail@plt+0xa4e0>
   120b4:	ldr	r3, [fp, #80]	; 0x50
   120b8:	str	r0, [fp, #144]	; 0x90
   120bc:	add	r0, r3, #1
   120c0:	bl	1ba50 <__assert_fail@plt+0xa4e0>
   120c4:	mov	r1, #0
   120c8:	str	r0, [fp, #28]
   120cc:	mov	r0, #17
   120d0:	bl	11240 <signal@plt>
   120d4:	ldr	r4, [fp, #92]	; 0x5c
   120d8:	cmp	r4, #0
   120dc:	beq	123b0 <__assert_fail@plt+0xe40>
   120e0:	lsl	r4, sl, #2
   120e4:	mov	r0, r4
   120e8:	bl	1ba50 <__assert_fail@plt+0xa4e0>
   120ec:	ldr	r3, [sp, #44]	; 0x2c
   120f0:	str	r0, [sp, #32]
   120f4:	ldr	r3, [r3]
   120f8:	cmp	sl, r3
   120fc:	ble	12128 <__assert_fail@plt+0xbb8>
   12100:	ldr	r2, [sp, #32]
   12104:	lsl	r3, r3, #2
   12108:	add	r5, r8, r4
   1210c:	add	r6, r8, r3
   12110:	add	r7, r2, r3
   12114:	ldr	r0, [r6], #4
   12118:	bl	113c0 <strlen@plt>
   1211c:	str	r0, [r7], #4
   12120:	cmp	r5, r6
   12124:	bne	12114 <__assert_fail@plt+0xba4>
   12128:	ldr	r9, [pc, #1344]	; 12670 <__assert_fail@plt+0x1100>
   1212c:	movw	r5, #356	; 0x164
   12130:	movt	r5, #3
   12134:	mov	r6, #0
   12138:	ldr	r0, [fp, #92]	; 0x5c
   1213c:	bl	113c0 <strlen@plt>
   12140:	sub	r3, r8, #4
   12144:	str	r8, [sp, #36]	; 0x24
   12148:	mov	r8, r5
   1214c:	add	r3, r3, r4
   12150:	str	sl, [sp, #40]	; 0x28
   12154:	mov	sl, r3
   12158:	str	r0, [fp, #88]	; 0x58
   1215c:	ldr	r3, [sp, #28]
   12160:	blx	r3
   12164:	cmn	r0, #1
   12168:	mov	r7, r0
   1216c:	beq	1239c <__assert_fail@plt+0xe2c>
   12170:	mov	r1, r9
   12174:	ldr	r0, [pc, #1264]	; 1266c <__assert_fail@plt+0x10fc>
   12178:	sub	r7, r7, #1
   1217c:	bl	14d34 <__assert_fail@plt+0x37c4>
   12180:	ldr	r3, [sp, #32]
   12184:	mov	r1, r9
   12188:	ldr	r4, [sp, #44]	; 0x2c
   1218c:	ldrb	ip, [r8, #4]
   12190:	ldr	lr, [sp, #36]	; 0x24
   12194:	ldr	r2, [r4]
   12198:	ldr	r0, [pc, #1228]	; 1266c <__assert_fail@plt+0x10fc>
   1219c:	ldr	r3, [r3, r2, lsl #2]
   121a0:	ldr	r2, [lr, r2, lsl #2]
   121a4:	str	r6, [sp]
   121a8:	stmib	sp, {r6, ip}
   121ac:	add	r3, r3, #1
   121b0:	str	r6, [fp, #32]
   121b4:	bl	141dc <__assert_fail@plt+0x2c6c>
   121b8:	ldr	r5, [r4]
   121bc:	strb	r6, [r8, #4]
   121c0:	ldr	r1, [sp, #40]	; 0x28
   121c4:	add	r3, r5, #1
   121c8:	cmp	r1, r3
   121cc:	ble	12220 <__assert_fail@plt+0xcb0>
   121d0:	ldr	r2, [sp, #32]
   121d4:	lsl	r5, r5, #2
   121d8:	mov	r3, #0
   121dc:	ldr	lr, [sp, #36]	; 0x24
   121e0:	add	r4, lr, r5
   121e4:	add	r5, r2, r5
   121e8:	b	121f0 <__assert_fail@plt+0xc80>
   121ec:	ldrb	r3, [r8, #4]
   121f0:	mov	r1, r9
   121f4:	ldr	ip, [fp, #144]	; 0x90
   121f8:	ldr	r2, [r4, #4]!
   121fc:	str	r6, [sp]
   12200:	ldr	r0, [pc, #1124]	; 1266c <__assert_fail@plt+0x10fc>
   12204:	stmib	sp, {r6, ip}
   12208:	str	r7, [sp, #12]
   1220c:	str	r3, [sp, #16]
   12210:	ldr	r3, [r5, #4]!
   12214:	bl	1449c <__assert_fail@plt+0x2f2c>
   12218:	cmp	sl, r4
   1221c:	bne	121ec <__assert_fail@plt+0xc7c>
   12220:	mov	r1, r9
   12224:	ldr	r0, [pc, #1088]	; 1266c <__assert_fail@plt+0x10fc>
   12228:	bl	14728 <__assert_fail@plt+0x31b8>
   1222c:	b	1215c <__assert_fail@plt+0xbec>
   12230:	bl	113f0 <__errno_location@plt>
   12234:	ldr	r5, [r0]
   12238:	mov	r2, #5
   1223c:	mov	r0, r4
   12240:	movw	r1, #59124	; 0xe6f4
   12244:	movt	r1, #1
   12248:	bl	11258 <dcgettext@plt>
   1224c:	mov	r2, r0
   12250:	mov	r0, r4
   12254:	mov	r1, r5
   12258:	bl	11324 <error@plt>
   1225c:	b	1202c <__assert_fail@plt+0xabc>
   12260:	mov	r3, #1
   12264:	mov	r1, #0
   12268:	ldr	r0, [sp, #36]	; 0x24
   1226c:	str	r3, [fp, #140]	; 0x8c
   12270:	bl	153c4 <__assert_fail@plt+0x3e54>
   12274:	subs	r4, r0, #0
   12278:	movlt	r3, #0
   1227c:	strlt	r3, [fp, #152]	; 0x98
   12280:	blt	122b8 <__assert_fail@plt+0xd48>
   12284:	movw	r1, #59120	; 0xe6f0
   12288:	movt	r1, #1
   1228c:	bl	11198 <fdopen@plt>
   12290:	subs	r5, r0, #0
   12294:	strne	r5, [fp, #152]	; 0x98
   12298:	bne	12054 <__assert_fail@plt+0xae4>
   1229c:	bl	113f0 <__errno_location@plt>
   122a0:	mov	r6, r0
   122a4:	mov	r0, r4
   122a8:	ldr	r4, [r6]
   122ac:	bl	11558 <close@plt>
   122b0:	str	r5, [fp, #152]	; 0x98
   122b4:	str	r4, [r6]
   122b8:	bl	113f0 <__errno_location@plt>
   122bc:	ldr	r4, [r0]
   122c0:	mov	r2, #5
   122c4:	movw	r1, #59160	; 0xe718
   122c8:	movt	r1, #1
   122cc:	mov	r0, #0
   122d0:	bl	11258 <dcgettext@plt>
   122d4:	mov	r5, r0
   122d8:	mov	r1, #8
   122dc:	ldr	r2, [sp, #36]	; 0x24
   122e0:	mov	r0, #0
   122e4:	bl	19c1c <__assert_fail@plt+0x86ac>
   122e8:	mov	r3, r0
   122ec:	mov	r2, r5
   122f0:	mov	r1, r4
   122f4:	mov	r0, #1
   122f8:	bl	11324 <error@plt>
   122fc:	bl	113f0 <__errno_location@plt>
   12300:	ldr	r5, [sp, #52]	; 0x34
   12304:	mov	r2, #5
   12308:	movw	r1, #59088	; 0xe6d0
   1230c:	movt	r1, #1
   12310:	ldr	r4, [r0]
   12314:	mov	r0, r5
   12318:	bl	11258 <dcgettext@plt>
   1231c:	mov	r2, r0
   12320:	mov	r1, r4
   12324:	mov	r0, r5
   12328:	bl	11324 <error@plt>
   1232c:	b	11ff8 <__assert_fail@plt+0xa88>
   12330:	mov	r7, #12
   12334:	b	11e58 <__assert_fail@plt+0x8e8>
   12338:	mov	r7, #11
   1233c:	b	11e58 <__assert_fail@plt+0x8e8>
   12340:	mov	r7, #7
   12344:	b	11e58 <__assert_fail@plt+0x8e8>
   12348:	mov	r7, #8
   1234c:	b	11e58 <__assert_fail@plt+0x8e8>
   12350:	mov	r7, #10
   12354:	b	11e58 <__assert_fail@plt+0x8e8>
   12358:	mov	r7, #13
   1235c:	b	11e58 <__assert_fail@plt+0x8e8>
   12360:	mov	r7, #9
   12364:	b	11e58 <__assert_fail@plt+0x8e8>
   12368:	ldr	r2, [fp, #16]
   1236c:	ldr	r3, [fp, #96]	; 0x60
   12370:	cmp	r2, r3
   12374:	bne	12390 <__assert_fail@plt+0xe20>
   12378:	ldr	r3, [sp, #48]	; 0x30
   1237c:	cmp	r3, #0
   12380:	beq	1239c <__assert_fail@plt+0xe2c>
   12384:	ldrb	r3, [fp, #64]	; 0x40
   12388:	cmp	r3, #0
   1238c:	bne	1239c <__assert_fail@plt+0xe2c>
   12390:	ldr	r1, [pc, #728]	; 12670 <__assert_fail@plt+0x1100>
   12394:	add	r0, r1, #52	; 0x34
   12398:	bl	14728 <__assert_fail@plt+0x31b8>
   1239c:	ldr	r3, [fp, #60]	; 0x3c
   123a0:	str	r3, [fp, #120]	; 0x78
   123a4:	ldr	r3, [fp, #60]	; 0x3c
   123a8:	str	r3, [sp, #32]
   123ac:	b	11a98 <__assert_fail@plt+0x528>
   123b0:	ldr	r3, [sp, #44]	; 0x2c
   123b4:	movw	r5, #356	; 0x164
   123b8:	movt	r5, #3
   123bc:	ldr	r3, [r3]
   123c0:	cmp	r3, sl
   123c4:	ldrlt	r6, [pc, #676]	; 12670 <__assert_fail@plt+0x1100>
   123c8:	ldrlt	r7, [sp, #44]	; 0x2c
   123cc:	bge	12410 <__assert_fail@plt+0xea0>
   123d0:	ldr	r9, [r8, r3, lsl #2]
   123d4:	mov	r0, r9
   123d8:	bl	113c0 <strlen@plt>
   123dc:	ldrb	ip, [r5, #4]
   123e0:	add	r3, r0, #1
   123e4:	mov	r2, r9
   123e8:	mov	r1, r6
   123ec:	str	r4, [sp]
   123f0:	ldr	r0, [pc, #628]	; 1266c <__assert_fail@plt+0x10fc>
   123f4:	stmib	sp, {r4, ip}
   123f8:	bl	141dc <__assert_fail@plt+0x2c6c>
   123fc:	ldr	r3, [r7]
   12400:	add	r3, r3, #1
   12404:	cmp	r3, sl
   12408:	str	r3, [r7]
   1240c:	blt	123d0 <__assert_fail@plt+0xe60>
   12410:	mov	r3, #0
   12414:	ldr	r1, [fp, #16]
   12418:	mov	r4, r3
   1241c:	strb	r3, [r5, #4]
   12420:	ldr	r5, [pc, #584]	; 12670 <__assert_fail@plt+0x1100>
   12424:	ldr	r2, [fp, #32]
   12428:	str	r2, [fp, #36]	; 0x24
   1242c:	str	r1, [fp, #96]	; 0x60
   12430:	ldr	r3, [sp, #28]
   12434:	blx	r3
   12438:	cmn	r0, #1
   1243c:	beq	12368 <__assert_fail@plt+0xdf8>
   12440:	ldr	r3, [fp, #104]	; 0x68
   12444:	cmp	r3, #0
   12448:	beq	12430 <__assert_fail@plt+0xec0>
   1244c:	ldr	r2, [fp, #160]	; 0xa0
   12450:	cmp	r3, r2
   12454:	bhi	12430 <__assert_fail@plt+0xec0>
   12458:	mov	r1, r5
   1245c:	ldr	r0, [pc, #520]	; 1266c <__assert_fail@plt+0x10fc>
   12460:	bl	14728 <__assert_fail@plt+0x31b8>
   12464:	str	r4, [fp, #160]	; 0xa0
   12468:	b	12430 <__assert_fail@plt+0xec0>
   1246c:	movw	r4, #464	; 0x1d0
   12470:	movt	r4, #3
   12474:	ldr	r5, [r4]
   12478:	mov	r2, #5
   1247c:	movw	r1, #59188	; 0xe734
   12480:	movt	r1, #1
   12484:	mov	r0, #0
   12488:	bl	11258 <dcgettext@plt>
   1248c:	mov	r6, r0
   12490:	bl	14ac0 <__assert_fail@plt+0x3550>
   12494:	mov	r2, r0
   12498:	mov	r1, r6
   1249c:	mov	r3, #0
   124a0:	mov	r0, r5
   124a4:	bl	113e4 <fprintf@plt>
   124a8:	ldr	r5, [r4]
   124ac:	mov	r2, #5
   124b0:	movw	r1, #59236	; 0xe764
   124b4:	movt	r1, #1
   124b8:	mov	r0, #0
   124bc:	bl	11258 <dcgettext@plt>
   124c0:	mov	r1, r0
   124c4:	mov	r3, #0
   124c8:	ldr	r2, [fp, #72]	; 0x48
   124cc:	mov	r0, r5
   124d0:	bl	113e4 <fprintf@plt>
   124d4:	ldr	r5, [r4]
   124d8:	mov	r2, #5
   124dc:	movw	r1, #59296	; 0xe7a0
   124e0:	movt	r1, #1
   124e4:	mov	r0, #0
   124e8:	bl	11258 <dcgettext@plt>
   124ec:	mov	r1, r0
   124f0:	mov	r3, #0
   124f4:	ldr	r2, [fp, #76]	; 0x4c
   124f8:	mov	r0, r5
   124fc:	bl	113e4 <fprintf@plt>
   12500:	mov	r2, #5
   12504:	movw	r1, #59376	; 0xe7f0
   12508:	movt	r1, #1
   1250c:	mov	r0, #0
   12510:	ldr	r5, [r4]
   12514:	bl	11258 <dcgettext@plt>
   12518:	ldr	r6, [fp, #72]	; 0x48
   1251c:	mov	r7, r0
   12520:	bl	14ac0 <__assert_fail@plt+0x3550>
   12524:	mov	r3, #0
   12528:	mov	r1, r7
   1252c:	sub	r2, r6, r0
   12530:	mov	r0, r5
   12534:	bl	113e4 <fprintf@plt>
   12538:	ldr	r5, [r4]
   1253c:	mov	r2, #5
   12540:	movw	r1, #59432	; 0xe828
   12544:	movt	r1, #1
   12548:	mov	r0, #0
   1254c:	bl	11258 <dcgettext@plt>
   12550:	mov	r1, r0
   12554:	mov	r3, #0
   12558:	ldr	r2, [fp, #80]	; 0x50
   1255c:	mov	r0, r5
   12560:	bl	113e4 <fprintf@plt>
   12564:	ldr	r5, [r4]
   12568:	mov	r2, #5
   1256c:	movw	r1, #59484	; 0xe85c
   12570:	movt	r1, #1
   12574:	mov	r0, #0
   12578:	bl	11258 <dcgettext@plt>
   1257c:	mov	r1, r0
   12580:	mvn	r2, #-2147483648	; 0x80000000
   12584:	mov	r3, #0
   12588:	mov	r0, r5
   1258c:	bl	113e4 <fprintf@plt>
   12590:	mov	r0, #0
   12594:	bl	11510 <isatty@plt>
   12598:	cmp	r0, #0
   1259c:	beq	120a8 <__assert_fail@plt+0xb38>
   125a0:	ldr	r5, [r4]
   125a4:	mov	r2, #5
   125a8:	movw	r1, #59544	; 0xe898
   125ac:	movt	r1, #1
   125b0:	mov	r0, #0
   125b4:	bl	11258 <dcgettext@plt>
   125b8:	mov	r1, r0
   125bc:	mov	r0, r5
   125c0:	bl	113e4 <fprintf@plt>
   125c4:	ldr	r3, [sp, #48]	; 0x30
   125c8:	cmp	r3, #0
   125cc:	beq	120a8 <__assert_fail@plt+0xb38>
   125d0:	mov	r2, #5
   125d4:	movw	r1, #59720	; 0xe948
   125d8:	movt	r1, #1
   125dc:	mov	r0, #0
   125e0:	ldr	r4, [r4]
   125e4:	bl	11258 <dcgettext@plt>
   125e8:	ldr	r3, [sp, #44]	; 0x2c
   125ec:	mov	r1, r0
   125f0:	mov	r0, r4
   125f4:	ldr	r3, [r3]
   125f8:	ldr	r2, [r8, r3, lsl #2]
   125fc:	bl	113e4 <fprintf@plt>
   12600:	b	120a8 <__assert_fail@plt+0xb38>
   12604:	ldr	r3, [fp, #104]	; 0x68
   12608:	cmp	r3, #0
   1260c:	beq	12068 <__assert_fail@plt+0xaf8>
   12610:	b	12060 <__assert_fail@plt+0xaf0>
   12614:	ldr	r2, [sp, #28]
   12618:	mov	r0, r7
   1261c:	str	r3, [sp, #28]
   12620:	cmp	r2, #16
   12624:	mov	r2, #5
   12628:	movweq	r1, #58280	; 0xe3a8
   1262c:	movwne	r1, #58380	; 0xe40c
   12630:	movteq	r1, #1
   12634:	movtne	r1, #1
   12638:	bl	11258 <dcgettext@plt>
   1263c:	mov	ip, #255	; 0xff
   12640:	mov	r2, r0
   12644:	mov	r1, r7
   12648:	str	ip, [sp]
   1264c:	mov	r0, #1
   12650:	ldr	r3, [sp, #28]
   12654:	bl	11324 <error@plt>
   12658:	mov	r0, #0
   1265c:	bl	12cfc <__assert_fail@plt+0x178c>
   12660:	mov	r0, #1
   12664:	bl	12cfc <__assert_fail@plt+0x178c>
   12668:			; <UNDEFINED> instruction: 0x0001d1b4
   1266c:	andeq	r0, r3, ip, lsr #4
   12670:	strdeq	r0, [r3], -r8
   12674:	andeq	sp, r1, ip, lsr #3
   12678:	mov	r2, #5
   1267c:	movw	r1, #59004	; 0xe67c
   12680:	movt	r1, #1
   12684:	mov	r0, #0
   12688:	bl	11258 <dcgettext@plt>
   1268c:	mov	r1, #0
   12690:	mov	r2, r0
   12694:	mov	r0, r1
   12698:	bl	11324 <error@plt>
   1269c:	b	11fb0 <__assert_fail@plt+0xa40>
   126a0:	bl	113f0 <__errno_location@plt>
   126a4:	ldr	r4, [r0]
   126a8:	mov	r2, #5
   126ac:	movw	r1, #58124	; 0xe30c
   126b0:	movt	r1, #1
   126b4:	mov	r0, #0
   126b8:	bl	11258 <dcgettext@plt>
   126bc:	mov	r2, r0
   126c0:	mov	r0, #1
   126c4:	mov	r1, r4
   126c8:	bl	11324 <error@plt>
   126cc:	movw	r1, #58480	; 0xe470
   126d0:	movt	r1, #1
   126d4:	str	r3, [sp, #28]
   126d8:	mov	r2, #5
   126dc:	mov	r0, r7
   126e0:	bl	11258 <dcgettext@plt>
   126e4:	ldr	ip, [sp, #84]	; 0x54
   126e8:	b	12640 <__assert_fail@plt+0x10d0>
   126ec:	movw	r1, #58216	; 0xe368
   126f0:	movt	r1, #1
   126f4:	str	r3, [sp, #28]
   126f8:	mov	r2, #5
   126fc:	mov	r0, #0
   12700:	bl	11258 <dcgettext@plt>
   12704:	mov	r2, r0
   12708:	mov	r1, #0
   1270c:	ldr	r3, [sp, #28]
   12710:	mov	r0, #1
   12714:	bl	11324 <error@plt>
   12718:	movw	r1, #54276	; 0xd404
   1271c:	movt	r1, #1
   12720:	ldr	r3, [pc, #-180]	; 12674 <__assert_fail@plt+0x1104>
   12724:	movw	r0, #58160	; 0xe330
   12728:	movt	r0, #1
   1272c:	movw	r2, #483	; 0x1e3
   12730:	bl	11570 <__assert_fail@plt>
   12734:	mov	r2, #5
   12738:	movw	r1, #58868	; 0xe5f4
   1273c:	movt	r1, #1
   12740:	mov	r0, #0
   12744:	bl	11258 <dcgettext@plt>
   12748:	ldr	ip, [sp, #68]	; 0x44
   1274c:	movw	r3, #53644	; 0xd18c
   12750:	movt	r3, #1
   12754:	mov	r2, r0
   12758:	mov	r1, #0
   1275c:	mov	r0, #1
   12760:	add	r3, r3, ip, lsl #4
   12764:	ldr	r3, [r3, #40]	; 0x28
   12768:	bl	11324 <error@plt>
   1276c:	movw	r1, #58580	; 0xe4d4
   12770:	movt	r1, #1
   12774:	str	r3, [sp, #28]
   12778:	b	126f8 <__assert_fail@plt+0x1188>
   1277c:	movw	r1, #54276	; 0xd404
   12780:	movt	r1, #1
   12784:	ldr	r3, [pc, #-280]	; 12674 <__assert_fail@plt+0x1104>
   12788:	movw	r0, #59064	; 0xe6b8
   1278c:	movt	r0, #1
   12790:	movw	r2, #723	; 0x2d3
   12794:	bl	11570 <__assert_fail@plt>
   12798:	movw	r1, #54276	; 0xd404
   1279c:	movt	r1, #1
   127a0:	ldr	r3, [pc, #-308]	; 12674 <__assert_fail@plt+0x1104>
   127a4:	movw	r0, #58188	; 0xe34c
   127a8:	movt	r0, #1
   127ac:	movw	r2, #511	; 0x1ff
   127b0:	bl	11570 <__assert_fail@plt>
   127b4:	mov	fp, #0
   127b8:	mov	lr, #0
   127bc:	pop	{r1}		; (ldr r1, [sp], #4)
   127c0:	mov	r2, sp
   127c4:	push	{r2}		; (str r2, [sp, #-4]!)
   127c8:	push	{r0}		; (str r0, [sp, #-4]!)
   127cc:	ldr	ip, [pc, #16]	; 127e4 <__assert_fail@plt+0x1274>
   127d0:	push	{ip}		; (str ip, [sp, #-4]!)
   127d4:	ldr	r0, [pc, #12]	; 127e8 <__assert_fail@plt+0x1278>
   127d8:	ldr	r3, [pc, #12]	; 127ec <__assert_fail@plt+0x127c>
   127dc:	bl	11360 <__libc_start_main@plt>
   127e0:	bl	11540 <abort@plt>
   127e4:	andeq	sp, r1, r4, ror #2
   127e8:	andeq	r1, r1, ip, ror r5
   127ec:	andeq	sp, r1, r4, lsl #2
   127f0:	ldr	r3, [pc, #20]	; 1280c <__assert_fail@plt+0x129c>
   127f4:	ldr	r2, [pc, #20]	; 12810 <__assert_fail@plt+0x12a0>
   127f8:	add	r3, pc, r3
   127fc:	ldr	r2, [r3, r2]
   12800:	cmp	r2, #0
   12804:	bxeq	lr
   12808:	b	11378 <__gmon_start__@plt>
   1280c:	andeq	sp, r1, r0, lsl #16
   12810:	andeq	r0, r0, r8, asr r1
   12814:	ldr	r0, [pc, #24]	; 12834 <__assert_fail@plt+0x12c4>
   12818:	ldr	r3, [pc, #24]	; 12838 <__assert_fail@plt+0x12c8>
   1281c:	cmp	r3, r0
   12820:	bxeq	lr
   12824:	ldr	r3, [pc, #16]	; 1283c <__assert_fail@plt+0x12cc>
   12828:	cmp	r3, #0
   1282c:	bxeq	lr
   12830:	bx	r3
   12834:			; <UNDEFINED> instruction: 0x000301b4
   12838:			; <UNDEFINED> instruction: 0x000301b4
   1283c:	andeq	r0, r0, r0
   12840:	ldr	r0, [pc, #36]	; 1286c <__assert_fail@plt+0x12fc>
   12844:	ldr	r1, [pc, #36]	; 12870 <__assert_fail@plt+0x1300>
   12848:	sub	r1, r1, r0
   1284c:	asr	r1, r1, #2
   12850:	add	r1, r1, r1, lsr #31
   12854:	asrs	r1, r1, #1
   12858:	bxeq	lr
   1285c:	ldr	r3, [pc, #16]	; 12874 <__assert_fail@plt+0x1304>
   12860:	cmp	r3, #0
   12864:	bxeq	lr
   12868:	bx	r3
   1286c:			; <UNDEFINED> instruction: 0x000301b4
   12870:			; <UNDEFINED> instruction: 0x000301b4
   12874:	andeq	r0, r0, r0
   12878:	push	{r4, lr}
   1287c:	ldr	r4, [pc, #24]	; 1289c <__assert_fail@plt+0x132c>
   12880:	ldrb	r3, [r4]
   12884:	cmp	r3, #0
   12888:	popne	{r4, pc}
   1288c:	bl	12814 <__assert_fail@plt+0x12a4>
   12890:	mov	r3, #1
   12894:	strb	r3, [r4]
   12898:	pop	{r4, pc}
   1289c:	andeq	r0, r3, r4, ror #3
   128a0:	b	12840 <__assert_fail@plt+0x12d0>
   128a4:	bx	lr
   128a8:	movw	r3, #356	; 0x164
   128ac:	movt	r3, #3
   128b0:	ldr	r2, [r3]
   128b4:	cmn	r2, #-2147483647	; 0x80000001
   128b8:	beq	128c8 <__assert_fail@plt+0x1358>
   128bc:	ldr	r2, [r3]
   128c0:	add	r2, r2, #1
   128c4:	str	r2, [r3]
   128c8:	movw	r3, #488	; 0x1e8
   128cc:	movt	r3, #3
   128d0:	mov	r2, #1
   128d4:	str	r2, [r3]
   128d8:	bx	lr
   128dc:	mov	r2, #5
   128e0:	strd	r4, [sp, #-12]!
   128e4:	mov	r4, r1
   128e8:	mov	r5, r0
   128ec:	movw	r1, #53988	; 0xd2e4
   128f0:	movt	r1, #1
   128f4:	mov	r0, #0
   128f8:	str	lr, [sp, #8]
   128fc:	sub	sp, sp, #12
   12900:	bl	11258 <dcgettext@plt>
   12904:	mov	r1, #0
   12908:	mov	r2, r0
   1290c:	str	r5, [sp]
   12910:	mov	r3, r4
   12914:	mov	r0, r1
   12918:	str	r4, [sp, #4]
   1291c:	bl	11324 <error@plt>
   12920:	add	sp, sp, #12
   12924:	ldrd	r4, [sp]
   12928:	add	sp, sp, #8
   1292c:	pop	{pc}		; (ldr pc, [sp], #4)
   12930:	mov	r2, #5
   12934:	movw	r1, #54068	; 0xd334
   12938:	movt	r1, #1
   1293c:	mov	r0, #0
   12940:	str	r4, [sp, #-8]!
   12944:	str	lr, [sp, #4]
   12948:	bl	11258 <dcgettext@plt>
   1294c:	mov	r2, r0
   12950:	mov	r1, #0
   12954:	mov	r0, #1
   12958:	bl	11324 <error@plt>
   1295c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12960:	movw	r5, #488	; 0x1e8
   12964:	movt	r5, #3
   12968:	ldr	r3, [r5, #4]
   1296c:	strd	r6, [sp, #8]
   12970:	strd	r8, [sp, #16]
   12974:	strd	sl, [sp, #24]
   12978:	str	lr, [sp, #32]
   1297c:	sub	sp, sp, #28
   12980:	cmp	r3, #0
   12984:	beq	129f4 <__assert_fail@plt+0x1484>
   12988:	movw	fp, #54180	; 0xd3a4
   1298c:	movt	fp, #1
   12990:	movw	r3, #54220	; 0xd3cc
   12994:	movt	r3, #1
   12998:	movw	sl, #54248	; 0xd3e8
   1299c:	movt	sl, #1
   129a0:	mov	r8, r1
   129a4:	mov	r6, r0
   129a8:	str	r3, [sp, #12]
   129ac:	eor	r9, r0, #1
   129b0:	mov	r7, #0
   129b4:	mov	r3, #0
   129b8:	cmp	r8, r7
   129bc:	movhi	r4, #0
   129c0:	andls	r4, r9, #1
   129c4:	str	r3, [r5]
   129c8:	mov	r2, r4
   129cc:	add	r1, sp, #20
   129d0:	mvn	r0, #0
   129d4:	bl	112e8 <waitpid@plt>
   129d8:	cmn	r0, #1
   129dc:	mov	r2, r0
   129e0:	beq	12a10 <__assert_fail@plt+0x14a0>
   129e4:	cmp	r0, #0
   129e8:	bne	12a3c <__assert_fail@plt+0x14cc>
   129ec:	cmp	r4, #0
   129f0:	beq	12b8c <__assert_fail@plt+0x161c>
   129f4:	add	sp, sp, #28
   129f8:	ldrd	r4, [sp]
   129fc:	ldrd	r6, [sp, #8]
   12a00:	ldrd	r8, [sp, #16]
   12a04:	ldrd	sl, [sp, #24]
   12a08:	add	sp, sp, #32
   12a0c:	pop	{pc}		; (ldr pc, [sp], #4)
   12a10:	bl	113f0 <__errno_location@plt>
   12a14:	ldr	r3, [r0]
   12a18:	cmp	r3, #4
   12a1c:	bne	12bb4 <__assert_fail@plt+0x1644>
   12a20:	ldr	r3, [r5]
   12a24:	cmp	r3, #0
   12a28:	movne	r3, r6
   12a2c:	orreq	r3, r6, #1
   12a30:	cmp	r3, #0
   12a34:	moveq	r4, #1
   12a38:	b	129c8 <__assert_fail@plt+0x1458>
   12a3c:	ldr	ip, [r5, #8]
   12a40:	cmp	ip, #0
   12a44:	beq	129c8 <__assert_fail@plt+0x1458>
   12a48:	ldr	r1, [r5, #12]
   12a4c:	ldr	r3, [r1]
   12a50:	cmp	r0, r3
   12a54:	mov	r3, #0
   12a58:	beq	12a74 <__assert_fail@plt+0x1504>
   12a5c:	add	r3, r3, #1
   12a60:	cmp	r3, ip
   12a64:	beq	129c8 <__assert_fail@plt+0x1458>
   12a68:	ldr	r0, [r1, #4]!
   12a6c:	cmp	r0, r2
   12a70:	bne	12a5c <__assert_fail@plt+0x14ec>
   12a74:	mov	r4, #0
   12a78:	ldr	r1, [r5, #4]
   12a7c:	add	r7, r7, #1
   12a80:	ldr	r2, [r5, #12]
   12a84:	str	r4, [r2, r3, lsl #2]
   12a88:	sub	r3, r1, #1
   12a8c:	ldr	r2, [sp, #20]
   12a90:	str	r3, [r5, #4]
   12a94:	ubfx	r3, r2, #8, #8
   12a98:	cmp	r3, #255	; 0xff
   12a9c:	beq	12b5c <__assert_fail@plt+0x15ec>
   12aa0:	uxtb	r3, r2
   12aa4:	cmp	r3, #127	; 0x7f
   12aa8:	beq	12b24 <__assert_fail@plt+0x15b4>
   12aac:	and	r3, r2, #127	; 0x7f
   12ab0:	add	r3, r3, #1
   12ab4:	sbfx	r3, r3, #1, #7
   12ab8:	cmp	r3, #0
   12abc:	ble	12af8 <__assert_fail@plt+0x1588>
   12ac0:	mov	r2, #5
   12ac4:	mov	r1, sl
   12ac8:	mov	r0, #0
   12acc:	bl	11258 <dcgettext@plt>
   12ad0:	ldr	ip, [sp, #20]
   12ad4:	mov	r2, r0
   12ad8:	mov	r1, #0
   12adc:	mov	r0, #125	; 0x7d
   12ae0:	ldr	r3, [r5, #20]
   12ae4:	and	ip, ip, #127	; 0x7f
   12ae8:	ldr	r3, [r3]
   12aec:	str	ip, [sp]
   12af0:	bl	11324 <error@plt>
   12af4:	ldr	r2, [sp, #20]
   12af8:	tst	r2, #65280	; 0xff00
   12afc:	ldr	r3, [r5, #4]
   12b00:	beq	12b18 <__assert_fail@plt+0x15a8>
   12b04:	mov	r2, #123	; 0x7b
   12b08:	cmp	r3, #0
   12b0c:	str	r2, [r5, #60]	; 0x3c
   12b10:	bne	129b4 <__assert_fail@plt+0x1444>
   12b14:	b	129f4 <__assert_fail@plt+0x1484>
   12b18:	cmp	r3, #0
   12b1c:	bne	129b4 <__assert_fail@plt+0x1444>
   12b20:	b	129f4 <__assert_fail@plt+0x1484>
   12b24:	mov	r2, #5
   12b28:	mov	r0, #0
   12b2c:	ldr	r1, [sp, #12]
   12b30:	bl	11258 <dcgettext@plt>
   12b34:	ldrb	ip, [sp, #21]
   12b38:	mov	r2, r0
   12b3c:	mov	r1, #0
   12b40:	mov	r0, #125	; 0x7d
   12b44:	ldr	r3, [r5, #20]
   12b48:	ldr	r3, [r3]
   12b4c:	str	ip, [sp]
   12b50:	bl	11324 <error@plt>
   12b54:	ldr	r2, [sp, #20]
   12b58:	b	12aac <__assert_fail@plt+0x153c>
   12b5c:	mov	r2, #5
   12b60:	mov	r1, fp
   12b64:	mov	r0, r4
   12b68:	bl	11258 <dcgettext@plt>
   12b6c:	ldr	r3, [r5, #20]
   12b70:	mov	r2, r0
   12b74:	mov	r1, r4
   12b78:	mov	r0, #124	; 0x7c
   12b7c:	ldr	r3, [r3]
   12b80:	bl	11324 <error@plt>
   12b84:	ldr	r2, [sp, #20]
   12b88:	b	12aa0 <__assert_fail@plt+0x1530>
   12b8c:	mov	r2, #5
   12b90:	movw	r1, #54136	; 0xd378
   12b94:	movt	r1, #1
   12b98:	bl	11258 <dcgettext@plt>
   12b9c:	mov	r2, r0
   12ba0:	mov	r1, r4
   12ba4:	ldr	r3, [r5, #4]
   12ba8:	mov	r0, r4
   12bac:	bl	11324 <error@plt>
   12bb0:	b	129f4 <__assert_fail@plt+0x1484>
   12bb4:	mov	r2, #5
   12bb8:	movw	r1, #54104	; 0xd358
   12bbc:	movt	r1, #1
   12bc0:	mov	r0, #0
   12bc4:	str	r3, [sp, #12]
   12bc8:	bl	11258 <dcgettext@plt>
   12bcc:	ldr	r3, [sp, #12]
   12bd0:	mov	r2, r0
   12bd4:	mov	r0, #1
   12bd8:	mov	r1, r3
   12bdc:	bl	11324 <error@plt>
   12be0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12be4:	movw	r5, #488	; 0x1e8
   12be8:	movt	r5, #3
   12bec:	ldr	r4, [r5, #8]
   12bf0:	strd	r6, [sp, #8]
   12bf4:	mov	r6, r0
   12bf8:	str	r8, [sp, #16]
   12bfc:	str	lr, [sp, #20]
   12c00:	ldr	r0, [r5, #12]
   12c04:	cmp	r4, #0
   12c08:	beq	12cd0 <__assert_fail@plt+0x1760>
   12c0c:	ldr	r3, [r0]
   12c10:	cmp	r3, #0
   12c14:	beq	12cc4 <__assert_fail@plt+0x1754>
   12c18:	add	r2, r0, #4
   12c1c:	mov	r3, #0
   12c20:	b	12c38 <__assert_fail@plt+0x16c8>
   12c24:	mov	r1, r2
   12c28:	add	r2, r2, #4
   12c2c:	ldr	ip, [r1]
   12c30:	cmp	ip, #0
   12c34:	beq	12cc8 <__assert_fail@plt+0x1758>
   12c38:	add	r3, r3, #1
   12c3c:	cmp	r3, r4
   12c40:	lsl	r7, r3, #2
   12c44:	bne	12c24 <__assert_fail@plt+0x16b4>
   12c48:	mov	r2, #4
   12c4c:	ldr	r1, [pc, #164]	; 12cf8 <__assert_fail@plt+0x1788>
   12c50:	bl	1bca4 <__assert_fail@plt+0xa734>
   12c54:	ldr	r3, [r5, #8]
   12c58:	str	r0, [r5, #12]
   12c5c:	cmp	r3, r4
   12c60:	bls	12c84 <__assert_fail@plt+0x1714>
   12c64:	add	r2, r0, r4, lsl #2
   12c68:	mov	r3, r4
   12c6c:	mov	ip, #0
   12c70:	str	ip, [r2], #4
   12c74:	add	r3, r3, #1
   12c78:	ldr	r1, [r5, #8]
   12c7c:	cmp	r1, r3
   12c80:	bhi	12c70 <__assert_fail@plt+0x1700>
   12c84:	ldr	r3, [r0, r7]
   12c88:	add	r1, r0, r7
   12c8c:	cmp	r3, #0
   12c90:	bne	12cd8 <__assert_fail@plt+0x1768>
   12c94:	ldr	r3, [r5, #4]
   12c98:	mov	r2, #1
   12c9c:	mov	r0, r4
   12ca0:	strb	r2, [r5, #64]	; 0x40
   12ca4:	ldr	r8, [sp, #16]
   12ca8:	str	r6, [r1]
   12cac:	add	r3, r3, r2
   12cb0:	ldrd	r6, [sp, #8]
   12cb4:	str	r3, [r5, #4]
   12cb8:	ldrd	r4, [sp]
   12cbc:	add	sp, sp, #20
   12cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   12cc4:	mov	r1, r0
   12cc8:	mov	r4, r3
   12ccc:	b	12c94 <__assert_fail@plt+0x1724>
   12cd0:	mov	r7, r4
   12cd4:	b	12c48 <__assert_fail@plt+0x16d8>
   12cd8:	movw	r3, #53644	; 0xd18c
   12cdc:	movt	r3, #1
   12ce0:	movw	r1, #54276	; 0xd404
   12ce4:	movt	r1, #1
   12ce8:	movw	r0, #54284	; 0xd40c
   12cec:	movt	r0, #1
   12cf0:	movw	r2, #1477	; 0x5c5
   12cf4:	bl	11570 <__assert_fail@plt>
   12cf8:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   12cfc:	subs	r5, r0, #0
   12d00:	str	r7, [sp, #-8]!
   12d04:	str	lr, [sp, #4]
   12d08:	beq	12d4c <__assert_fail@plt+0x17dc>
   12d0c:	movw	r3, #464	; 0x1d0
   12d10:	movt	r3, #3
   12d14:	ldr	r4, [r3]
   12d18:	mov	r2, #5
   12d1c:	movw	r1, #54300	; 0xd41c
   12d20:	movt	r1, #1
   12d24:	mov	r0, #0
   12d28:	bl	11258 <dcgettext@plt>
   12d2c:	movw	r3, #692	; 0x2b4
   12d30:	movt	r3, #3
   12d34:	mov	r1, r0
   12d38:	ldr	r2, [r3]
   12d3c:	mov	r0, r4
   12d40:	bl	113e4 <fprintf@plt>
   12d44:	mov	r0, #1
   12d48:	bl	113a8 <exit@plt>
   12d4c:	movw	r4, #476	; 0x1dc
   12d50:	movt	r4, #3
   12d54:	ldr	r7, [r4]
   12d58:	mov	r2, #5
   12d5c:	movw	r1, #54340	; 0xd444
   12d60:	movt	r1, #1
   12d64:	movw	r6, #692	; 0x2b4
   12d68:	movt	r6, #3
   12d6c:	bl	11258 <dcgettext@plt>
   12d70:	mov	r1, r0
   12d74:	ldr	r2, [r6]
   12d78:	mov	r0, r7
   12d7c:	bl	113e4 <fprintf@plt>
   12d80:	mov	r2, #5
   12d84:	movw	r1, #54392	; 0xd478
   12d88:	movt	r1, #1
   12d8c:	mov	r0, r5
   12d90:	bl	11258 <dcgettext@plt>
   12d94:	ldr	r1, [r4]
   12d98:	bl	11528 <fputs@plt>
   12d9c:	mov	r2, #5
   12da0:	movw	r1, #54472	; 0xd4c8
   12da4:	movt	r1, #1
   12da8:	mov	r0, r5
   12dac:	bl	11258 <dcgettext@plt>
   12db0:	ldr	r1, [r4]
   12db4:	bl	11528 <fputs@plt>
   12db8:	mov	r2, #5
   12dbc:	movw	r1, #54592	; 0xd540
   12dc0:	movt	r1, #1
   12dc4:	mov	r0, r5
   12dc8:	bl	11258 <dcgettext@plt>
   12dcc:	ldr	r1, [r4]
   12dd0:	bl	11528 <fputs@plt>
   12dd4:	mov	r2, #5
   12dd8:	movw	r1, #54804	; 0xd614
   12ddc:	movt	r1, #1
   12de0:	mov	r0, r5
   12de4:	bl	11258 <dcgettext@plt>
   12de8:	ldr	r1, [r4]
   12dec:	bl	11528 <fputs@plt>
   12df0:	mov	r2, #5
   12df4:	movw	r1, #54884	; 0xd664
   12df8:	movt	r1, #1
   12dfc:	mov	r0, r5
   12e00:	bl	11258 <dcgettext@plt>
   12e04:	ldr	r1, [r4]
   12e08:	bl	11528 <fputs@plt>
   12e0c:	mov	r2, #5
   12e10:	movw	r1, #55120	; 0xd750
   12e14:	movt	r1, #1
   12e18:	mov	r0, r5
   12e1c:	bl	11258 <dcgettext@plt>
   12e20:	ldr	r1, [r4]
   12e24:	bl	11528 <fputs@plt>
   12e28:	mov	r2, #5
   12e2c:	movw	r1, #55348	; 0xd834
   12e30:	movt	r1, #1
   12e34:	mov	r0, r5
   12e38:	bl	11258 <dcgettext@plt>
   12e3c:	ldr	r1, [r4]
   12e40:	bl	11528 <fputs@plt>
   12e44:	mov	r2, #5
   12e48:	movw	r1, #55500	; 0xd8cc
   12e4c:	movt	r1, #1
   12e50:	mov	r0, r5
   12e54:	bl	11258 <dcgettext@plt>
   12e58:	ldr	r1, [r4]
   12e5c:	bl	11528 <fputs@plt>
   12e60:	mov	r2, #5
   12e64:	movw	r1, #55552	; 0xd900
   12e68:	movt	r1, #1
   12e6c:	mov	r0, r5
   12e70:	bl	11258 <dcgettext@plt>
   12e74:	ldr	r1, [r4]
   12e78:	bl	11528 <fputs@plt>
   12e7c:	mov	r2, #5
   12e80:	movw	r1, #55764	; 0xd9d4
   12e84:	movt	r1, #1
   12e88:	mov	r0, r5
   12e8c:	bl	11258 <dcgettext@plt>
   12e90:	ldr	r1, [r4]
   12e94:	bl	11528 <fputs@plt>
   12e98:	mov	r2, #5
   12e9c:	movw	r1, #55892	; 0xda54
   12ea0:	movt	r1, #1
   12ea4:	mov	r0, r5
   12ea8:	bl	11258 <dcgettext@plt>
   12eac:	ldr	r1, [r4]
   12eb0:	bl	11528 <fputs@plt>
   12eb4:	mov	r2, #5
   12eb8:	movw	r1, #56052	; 0xdaf4
   12ebc:	movt	r1, #1
   12ec0:	mov	r0, r5
   12ec4:	bl	11258 <dcgettext@plt>
   12ec8:	ldr	r1, [r4]
   12ecc:	bl	11528 <fputs@plt>
   12ed0:	mov	r2, #5
   12ed4:	movw	r1, #56132	; 0xdb44
   12ed8:	movt	r1, #1
   12edc:	mov	r0, r5
   12ee0:	bl	11258 <dcgettext@plt>
   12ee4:	ldr	r1, [r4]
   12ee8:	bl	11528 <fputs@plt>
   12eec:	mov	r2, #5
   12ef0:	movw	r1, #56348	; 0xdc1c
   12ef4:	movt	r1, #1
   12ef8:	mov	r0, r5
   12efc:	bl	11258 <dcgettext@plt>
   12f00:	ldr	r1, [r4]
   12f04:	bl	11528 <fputs@plt>
   12f08:	mov	r2, #5
   12f0c:	movw	r1, #56424	; 0xdc68
   12f10:	movt	r1, #1
   12f14:	mov	r0, r5
   12f18:	bl	11258 <dcgettext@plt>
   12f1c:	ldr	r1, [r4]
   12f20:	bl	11528 <fputs@plt>
   12f24:	mov	r2, #5
   12f28:	movw	r1, #56488	; 0xdca8
   12f2c:	movt	r1, #1
   12f30:	mov	r0, r5
   12f34:	bl	11258 <dcgettext@plt>
   12f38:	ldr	r1, [r4]
   12f3c:	bl	11528 <fputs@plt>
   12f40:	mov	r2, #5
   12f44:	movw	r1, #56568	; 0xdcf8
   12f48:	movt	r1, #1
   12f4c:	mov	r0, r5
   12f50:	bl	11258 <dcgettext@plt>
   12f54:	ldr	r1, [r4]
   12f58:	bl	11528 <fputs@plt>
   12f5c:	mov	r2, #5
   12f60:	movw	r1, #56784	; 0xddd0
   12f64:	movt	r1, #1
   12f68:	mov	r0, r5
   12f6c:	bl	11258 <dcgettext@plt>
   12f70:	ldr	r1, [r4]
   12f74:	bl	11528 <fputs@plt>
   12f78:	mov	r2, #5
   12f7c:	movw	r1, #56860	; 0xde1c
   12f80:	movt	r1, #1
   12f84:	mov	r0, r5
   12f88:	bl	11258 <dcgettext@plt>
   12f8c:	ldr	r1, [r4]
   12f90:	bl	11528 <fputs@plt>
   12f94:	mov	r2, #5
   12f98:	movw	r1, #56928	; 0xde60
   12f9c:	movt	r1, #1
   12fa0:	mov	r0, r5
   12fa4:	bl	11258 <dcgettext@plt>
   12fa8:	ldr	r1, [r4]
   12fac:	bl	11528 <fputs@plt>
   12fb0:	mov	r2, #5
   12fb4:	movw	r1, #57000	; 0xdea8
   12fb8:	movt	r1, #1
   12fbc:	mov	r0, r5
   12fc0:	bl	11258 <dcgettext@plt>
   12fc4:	ldr	r1, [r4]
   12fc8:	bl	11528 <fputs@plt>
   12fcc:	mov	r2, #5
   12fd0:	movw	r1, #57072	; 0xdef0
   12fd4:	movt	r1, #1
   12fd8:	mov	r0, r5
   12fdc:	bl	11258 <dcgettext@plt>
   12fe0:	ldr	r1, [r4]
   12fe4:	bl	11528 <fputs@plt>
   12fe8:	mov	r2, #5
   12fec:	movw	r1, #57132	; 0xdf2c
   12ff0:	movt	r1, #1
   12ff4:	mov	r0, r5
   12ff8:	bl	11258 <dcgettext@plt>
   12ffc:	ldr	r1, [r4]
   13000:	bl	11528 <fputs@plt>
   13004:	ldr	r0, [r4]
   13008:	ldr	r1, [r6]
   1300c:	bl	15844 <__assert_fail@plt+0x42d4>
   13010:	mov	r0, r5
   13014:	bl	113a8 <exit@plt>
   13018:	strd	r4, [sp, #-20]!	; 0xffffffec
   1301c:	mov	r5, r2
   13020:	mov	r2, #10
   13024:	strd	r6, [sp, #8]
   13028:	mov	r7, r1
   1302c:	mov	r4, r3
   13030:	str	lr, [sp, #16]
   13034:	sub	sp, sp, #20
   13038:	mov	r6, r0
   1303c:	add	r1, sp, #12
   13040:	bl	111bc <strtol@plt>
   13044:	ldr	r3, [sp, #12]
   13048:	cmp	r3, r6
   1304c:	beq	13138 <__assert_fail@plt+0x1bc8>
   13050:	ldrb	r3, [r3]
   13054:	cmp	r3, #0
   13058:	bne	13138 <__assert_fail@plt+0x1bc8>
   1305c:	cmp	r0, r5
   13060:	blt	130dc <__assert_fail@plt+0x1b6c>
   13064:	cmp	r4, #0
   13068:	cmpge	r0, r4
   1306c:	bgt	13084 <__assert_fail@plt+0x1b14>
   13070:	add	sp, sp, #20
   13074:	ldrd	r4, [sp]
   13078:	ldrd	r6, [sp, #8]
   1307c:	add	sp, sp, #16
   13080:	pop	{pc}		; (ldr pc, [sp], #4)
   13084:	movw	r2, #464	; 0x1d0
   13088:	movt	r2, #3
   1308c:	ldr	r5, [r2]
   13090:	mov	r0, r3
   13094:	mov	r2, #5
   13098:	movw	r1, #57292	; 0xdfcc
   1309c:	movt	r1, #1
   130a0:	bl	11258 <dcgettext@plt>
   130a4:	movw	r2, #692	; 0x2b4
   130a8:	movt	r2, #3
   130ac:	str	r7, [sp]
   130b0:	mov	r1, r0
   130b4:	mov	r3, r6
   130b8:	str	r4, [sp, #4]
   130bc:	mov	r0, r5
   130c0:	ldr	r2, [r2]
   130c4:	bl	113e4 <fprintf@plt>
   130c8:	ldr	r3, [sp, #40]	; 0x28
   130cc:	cmp	r3, #0
   130d0:	bne	13130 <__assert_fail@plt+0x1bc0>
   130d4:	mov	r0, r4
   130d8:	b	13070 <__assert_fail@plt+0x1b00>
   130dc:	movw	r2, #464	; 0x1d0
   130e0:	movt	r2, #3
   130e4:	ldr	r4, [r2]
   130e8:	mov	r0, r3
   130ec:	mov	r2, #5
   130f0:	movw	r1, #57244	; 0xdf9c
   130f4:	movt	r1, #1
   130f8:	bl	11258 <dcgettext@plt>
   130fc:	movw	r2, #692	; 0x2b4
   13100:	movt	r2, #3
   13104:	str	r7, [sp]
   13108:	mov	r1, r0
   1310c:	mov	r3, r6
   13110:	str	r5, [sp, #4]
   13114:	mov	r0, r4
   13118:	ldr	r2, [r2]
   1311c:	bl	113e4 <fprintf@plt>
   13120:	ldr	r3, [sp, #40]	; 0x28
   13124:	cmp	r3, #0
   13128:	moveq	r0, r5
   1312c:	beq	13070 <__assert_fail@plt+0x1b00>
   13130:	mov	r0, #1
   13134:	bl	12cfc <__assert_fail@plt+0x178c>
   13138:	movw	r3, #464	; 0x1d0
   1313c:	movt	r3, #3
   13140:	ldr	r4, [r3]
   13144:	mov	r2, #5
   13148:	movw	r1, #57204	; 0xdf74
   1314c:	movt	r1, #1
   13150:	mov	r0, #0
   13154:	bl	11258 <dcgettext@plt>
   13158:	movw	r2, #692	; 0x2b4
   1315c:	movt	r2, #3
   13160:	str	r7, [sp]
   13164:	mov	r1, r0
   13168:	mov	r3, r6
   1316c:	ldr	r2, [r2]
   13170:	mov	r0, r4
   13174:	bl	113e4 <fprintf@plt>
   13178:	mov	r0, #1
   1317c:	bl	12cfc <__assert_fail@plt+0x178c>
   13180:	movw	r3, #356	; 0x164
   13184:	movt	r3, #3
   13188:	ldr	r2, [r3]
   1318c:	cmp	r2, #1
   13190:	ble	131a0 <__assert_fail@plt+0x1c30>
   13194:	ldr	r2, [r3]
   13198:	sub	r2, r2, #1
   1319c:	str	r2, [r3]
   131a0:	bx	lr
   131a4:	movw	r0, #488	; 0x1e8
   131a8:	movt	r0, #3
   131ac:	ldr	r3, [r0, #92]	; 0x5c
   131b0:	cmp	r3, #0
   131b4:	beq	131bc <__assert_fail@plt+0x1c4c>
   131b8:	bx	lr
   131bc:	movw	r3, #356	; 0x164
   131c0:	movt	r3, #3
   131c4:	ldrb	r3, [r3, #4]
   131c8:	cmp	r3, #0
   131cc:	bne	131b8 <__assert_fail@plt+0x1c48>
   131d0:	ldr	r2, [r0, #16]
   131d4:	ldr	r3, [r0, #96]	; 0x60
   131d8:	cmp	r2, r3
   131dc:	beq	131b8 <__assert_fail@plt+0x1c48>
   131e0:	ldr	r3, [r0, #68]	; 0x44
   131e4:	cmp	r3, #0
   131e8:	bne	131b8 <__assert_fail@plt+0x1c48>
   131ec:	add	r1, r0, #16
   131f0:	add	r0, r0, #68	; 0x44
   131f4:	b	14728 <__assert_fail@plt+0x31b8>
   131f8:	strd	r4, [sp, #-16]!
   131fc:	movw	r4, #488	; 0x1e8
   13200:	movt	r4, #3
   13204:	str	r6, [sp, #8]
   13208:	str	lr, [sp, #12]
   1320c:	bl	1139c <getpid@plt>
   13210:	ldr	r3, [r4, #112]	; 0x70
   13214:	cmp	r0, r3
   13218:	bne	13268 <__assert_fail@plt+0x1cf8>
   1321c:	ldrb	r5, [r4, #116]	; 0x74
   13220:	cmp	r5, #0
   13224:	beq	13238 <__assert_fail@plt+0x1cc8>
   13228:	ldrd	r4, [sp]
   1322c:	ldr	r6, [sp, #8]
   13230:	add	sp, sp, #12
   13234:	pop	{pc}		; (ldr pc, [sp], #4)
   13238:	mov	r3, #1
   1323c:	mov	r1, r5
   13240:	mov	r0, r3
   13244:	strb	r3, [r4, #116]	; 0x74
   13248:	bl	1295c <__assert_fail@plt+0x13ec>
   1324c:	ldr	r2, [r4, #120]	; 0x78
   13250:	strb	r5, [r4, #116]	; 0x74
   13254:	ldr	r3, [r4, #60]	; 0x3c
   13258:	cmp	r2, r3
   1325c:	beq	13228 <__assert_fail@plt+0x1cb8>
   13260:	ldr	r0, [r4, #60]	; 0x3c
   13264:	bl	11210 <_exit@plt>
   13268:	movw	r1, #54276	; 0xd404
   1326c:	movt	r1, #1
   13270:	ldr	r3, [pc, #12]	; 13284 <__assert_fail@plt+0x1d14>
   13274:	movw	r0, #57340	; 0xdffc
   13278:	movt	r0, #1
   1327c:	movw	r2, #1605	; 0x645
   13280:	bl	11570 <__assert_fail@plt>
   13284:	muleq	r1, r8, r1
   13288:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1328c:	movw	r5, #488	; 0x1e8
   13290:	movt	r5, #3
   13294:	ldr	r3, [r5, #16]
   13298:	strd	r6, [sp, #8]
   1329c:	strd	r8, [sp, #16]
   132a0:	strd	sl, [sp, #24]
   132a4:	str	lr, [sp, #32]
   132a8:	sub	sp, sp, #12
   132ac:	cmp	r3, #1
   132b0:	str	r0, [sp, #4]
   132b4:	beq	13330 <__assert_fail@plt+0x1dc0>
   132b8:	movw	fp, #464	; 0x1d0
   132bc:	movt	fp, #3
   132c0:	movw	sl, #57200	; 0xdf70
   132c4:	movt	sl, #1
   132c8:	movw	r9, #57360	; 0xe010
   132cc:	movt	r9, #1
   132d0:	movw	r8, #57364	; 0xe014
   132d4:	movt	r8, #1
   132d8:	mov	r4, #0
   132dc:	ldr	r3, [r5, #20]
   132e0:	cmp	r4, #0
   132e4:	mov	r1, #3
   132e8:	mov	r0, #0
   132ec:	moveq	r7, sl
   132f0:	ldr	r6, [fp]
   132f4:	movne	r7, r9
   132f8:	ldr	r2, [r3, r4, lsl #2]
   132fc:	bl	19c1c <__assert_fail@plt+0x86ac>
   13300:	mov	r3, r0
   13304:	mov	r2, r7
   13308:	mov	r1, r8
   1330c:	mov	r0, r6
   13310:	bl	113e4 <fprintf@plt>
   13314:	cmp	r0, #0
   13318:	blt	13474 <__assert_fail@plt+0x1f04>
   1331c:	ldr	r3, [r5, #16]
   13320:	add	r4, r4, #1
   13324:	sub	r3, r3, #1
   13328:	cmp	r3, r4
   1332c:	bhi	132dc <__assert_fail@plt+0x1d6c>
   13330:	ldr	r3, [sp, #4]
   13334:	cmp	r3, #0
   13338:	beq	133d8 <__assert_fail@plt+0x1e68>
   1333c:	ldr	r4, [r5, #124]	; 0x7c
   13340:	cmp	r4, #0
   13344:	beq	133f4 <__assert_fail@plt+0x1e84>
   13348:	movw	r4, #464	; 0x1d0
   1334c:	movt	r4, #3
   13350:	mov	r2, #4
   13354:	mov	r1, #1
   13358:	ldr	r3, [r4]
   1335c:	movw	r0, #57448	; 0xe068
   13360:	movt	r0, #1
   13364:	bl	112d0 <fwrite@plt>
   13368:	ldr	r0, [r4]
   1336c:	bl	1c8ac <__assert_fail@plt+0xb33c>
   13370:	cmp	r0, #0
   13374:	bne	13474 <__assert_fail@plt+0x1f04>
   13378:	ldr	r0, [r5, #124]	; 0x7c
   1337c:	bl	1154c <getc@plt>
   13380:	cmp	r0, #10
   13384:	cmnne	r0, #1
   13388:	mov	r4, r0
   1338c:	beq	133a4 <__assert_fail@plt+0x1e34>
   13390:	ldr	r0, [r5, #124]	; 0x7c
   13394:	bl	1154c <getc@plt>
   13398:	cmp	r0, #10
   1339c:	cmnne	r0, #1
   133a0:	bne	13390 <__assert_fail@plt+0x1e20>
   133a4:	cmn	r0, #1
   133a8:	beq	134a0 <__assert_fail@plt+0x1f30>
   133ac:	bic	r0, r4, #32
   133b0:	sub	r0, r0, #89	; 0x59
   133b4:	clz	r0, r0
   133b8:	lsr	r0, r0, #5
   133bc:	add	sp, sp, #12
   133c0:	ldrd	r4, [sp]
   133c4:	ldrd	r6, [sp, #8]
   133c8:	ldrd	r8, [sp, #16]
   133cc:	ldrd	sl, [sp, #24]
   133d0:	add	sp, sp, #32
   133d4:	pop	{pc}		; (ldr pc, [sp], #4)
   133d8:	movw	r3, #464	; 0x1d0
   133dc:	movt	r3, #3
   133e0:	mov	r0, #10
   133e4:	ldr	r1, [r3]
   133e8:	bl	114ec <putc@plt>
   133ec:	ldr	r0, [sp, #4]
   133f0:	b	133bc <__assert_fail@plt+0x1e4c>
   133f4:	movw	r0, #57400	; 0xe038
   133f8:	movt	r0, #1
   133fc:	mov	r1, r4
   13400:	bl	153c4 <__assert_fail@plt+0x3e54>
   13404:	subs	r6, r0, #0
   13408:	blt	13464 <__assert_fail@plt+0x1ef4>
   1340c:	movw	r1, #59120	; 0xe6f0
   13410:	movt	r1, #1
   13414:	bl	11198 <fdopen@plt>
   13418:	subs	r4, r0, #0
   1341c:	strne	r4, [r5, #124]	; 0x7c
   13420:	bne	13348 <__assert_fail@plt+0x1dd8>
   13424:	bl	113f0 <__errno_location@plt>
   13428:	mov	r7, r0
   1342c:	mov	r0, r6
   13430:	ldr	r6, [r7]
   13434:	bl	11558 <close@plt>
   13438:	str	r4, [r5, #124]	; 0x7c
   1343c:	str	r6, [r7]
   13440:	mov	r2, #5
   13444:	movw	r1, #57412	; 0xe044
   13448:	movt	r1, #1
   1344c:	mov	r0, #0
   13450:	bl	11258 <dcgettext@plt>
   13454:	mov	r2, r0
   13458:	mov	r1, r6
   1345c:	mov	r0, #1
   13460:	bl	11324 <error@plt>
   13464:	str	r4, [r5, #124]	; 0x7c
   13468:	bl	113f0 <__errno_location@plt>
   1346c:	ldr	r6, [r0]
   13470:	b	13440 <__assert_fail@plt+0x1ed0>
   13474:	bl	113f0 <__errno_location@plt>
   13478:	movw	r1, #57372	; 0xe01c
   1347c:	movt	r1, #1
   13480:	ldr	r4, [r0]
   13484:	mov	r2, #5
   13488:	mov	r0, #0
   1348c:	bl	11258 <dcgettext@plt>
   13490:	mov	r2, r0
   13494:	mov	r0, #1
   13498:	mov	r1, r4
   1349c:	bl	11324 <error@plt>
   134a0:	bl	113f0 <__errno_location@plt>
   134a4:	movw	r1, #57456	; 0xe070
   134a8:	movt	r1, #1
   134ac:	b	13480 <__assert_fail@plt+0x1f10>
   134b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   134b4:	movw	r5, #356	; 0x164
   134b8:	movt	r5, #3
   134bc:	ldr	r2, [r5]
   134c0:	movw	r4, #488	; 0x1e8
   134c4:	movt	r4, #3
   134c8:	strd	r6, [sp, #8]
   134cc:	mov	r6, r3
   134d0:	str	r8, [sp, #16]
   134d4:	str	lr, [sp, #20]
   134d8:	sub	sp, sp, #32
   134dc:	cmp	r2, #0
   134e0:	beq	13510 <__assert_fail@plt+0x1fa0>
   134e4:	ldr	r3, [r5]
   134e8:	ldr	r2, [r4, #4]
   134ec:	cmp	r2, r3
   134f0:	bcc	13510 <__assert_fail@plt+0x1fa0>
   134f4:	mov	r1, #1
   134f8:	mov	r0, #0
   134fc:	bl	1295c <__assert_fail@plt+0x13ec>
   13500:	ldr	r3, [r5]
   13504:	ldr	r2, [r4, #4]
   13508:	cmp	r2, r3
   1350c:	bcs	134f4 <__assert_fail@plt+0x1f84>
   13510:	ldrb	r3, [r4, #128]	; 0x80
   13514:	cmp	r3, #0
   13518:	bne	13668 <__assert_fail@plt+0x20f8>
   1351c:	ldrb	r3, [r4, #129]	; 0x81
   13520:	cmp	r3, #0
   13524:	bne	136bc <__assert_fail@plt+0x214c>
   13528:	mov	r1, #0
   1352c:	mov	r0, r1
   13530:	bl	1295c <__assert_fail@plt+0x13ec>
   13534:	add	r0, sp, #4
   13538:	bl	1b2d8 <__assert_fail@plt+0x9d68>
   1353c:	subs	r7, r0, #0
   13540:	bne	13830 <__assert_fail@plt+0x22c0>
   13544:	mov	r2, #1
   13548:	mov	r1, #2
   1354c:	ldr	r0, [sp, #8]
   13550:	bl	1c6c4 <__assert_fail@plt+0xb154>
   13554:	b	13580 <__assert_fail@plt+0x2010>
   13558:	bl	113f0 <__errno_location@plt>
   1355c:	ldr	r3, [r0]
   13560:	cmp	r3, #11
   13564:	bne	1358c <__assert_fail@plt+0x201c>
   13568:	ldr	r3, [r4, #4]
   1356c:	cmp	r3, #0
   13570:	beq	1358c <__assert_fail@plt+0x201c>
   13574:	mov	r1, #1
   13578:	mov	r0, #0
   1357c:	bl	1295c <__assert_fail@plt+0x13ec>
   13580:	bl	114a4 <fork@plt>
   13584:	subs	r5, r0, #0
   13588:	blt	13558 <__assert_fail@plt+0x1fe8>
   1358c:	cmn	r5, #1
   13590:	beq	13804 <__assert_fail@plt+0x2294>
   13594:	cmp	r5, #0
   13598:	beq	136d8 <__assert_fail@plt+0x2168>
   1359c:	ldr	r0, [sp, #8]
   135a0:	bl	11558 <close@plt>
   135a4:	mov	r2, #4
   135a8:	mov	r1, sp
   135ac:	ldr	r0, [sp, #4]
   135b0:	bl	1b1b8 <__assert_fail@plt+0x9c48>
   135b4:	cmp	r0, #4
   135b8:	mov	r4, r0
   135bc:	beq	13688 <__assert_fail@plt+0x2118>
   135c0:	cmn	r0, #1
   135c4:	beq	13630 <__assert_fail@plt+0x20c0>
   135c8:	cmp	r0, #0
   135cc:	beq	13600 <__assert_fail@plt+0x2090>
   135d0:	bl	113f0 <__errno_location@plt>
   135d4:	ldr	r5, [r0]
   135d8:	mov	r2, #5
   135dc:	movw	r1, #57736	; 0xe188
   135e0:	movt	r1, #1
   135e4:	mov	r0, #0
   135e8:	bl	11258 <dcgettext@plt>
   135ec:	mov	r2, r0
   135f0:	mov	r3, r4
   135f4:	mov	r0, #1
   135f8:	mov	r1, r5
   135fc:	bl	11324 <error@plt>
   13600:	mov	r0, r5
   13604:	bl	12be0 <__assert_fail@plt+0x1670>
   13608:	ldr	r0, [sp, #4]
   1360c:	mov	r7, #1
   13610:	bl	11558 <close@plt>
   13614:	mov	r0, r7
   13618:	add	sp, sp, #32
   1361c:	ldrd	r4, [sp]
   13620:	ldrd	r6, [sp, #8]
   13624:	ldr	r8, [sp, #16]
   13628:	add	sp, sp, #20
   1362c:	pop	{pc}		; (ldr pc, [sp], #4)
   13630:	ldr	r0, [sp, #4]
   13634:	bl	11558 <close@plt>
   13638:	bl	113f0 <__errno_location@plt>
   1363c:	ldr	r4, [r0]
   13640:	mov	r2, #5
   13644:	movw	r1, #57644	; 0xe12c
   13648:	movt	r1, #1
   1364c:	mov	r0, #0
   13650:	bl	11258 <dcgettext@plt>
   13654:	mov	r2, r0
   13658:	mov	r0, #0
   1365c:	mov	r1, r4
   13660:	bl	11324 <error@plt>
   13664:	b	13608 <__assert_fail@plt+0x2098>
   13668:	mov	r0, #1
   1366c:	bl	13288 <__assert_fail@plt+0x1d18>
   13670:	cmp	r0, #0
   13674:	beq	136c8 <__assert_fail@plt+0x2158>
   13678:	ldrb	r3, [r4, #128]	; 0x80
   1367c:	cmp	r3, #0
   13680:	bne	13528 <__assert_fail@plt+0x1fb8>
   13684:	b	1351c <__assert_fail@plt+0x1fac>
   13688:	ldr	r0, [sp, #4]
   1368c:	bl	11558 <close@plt>
   13690:	mov	r0, r5
   13694:	mov	r2, #0
   13698:	add	r1, sp, #12
   1369c:	bl	112e8 <waitpid@plt>
   136a0:	ldr	r3, [sp]
   136a4:	cmp	r3, #7
   136a8:	beq	13614 <__assert_fail@plt+0x20a4>
   136ac:	cmp	r3, #2
   136b0:	beq	136d0 <__assert_fail@plt+0x2160>
   136b4:	mov	r0, #126	; 0x7e
   136b8:	bl	113a8 <exit@plt>
   136bc:	mov	r0, #0
   136c0:	bl	13288 <__assert_fail@plt+0x1d18>
   136c4:	b	13528 <__assert_fail@plt+0x1fb8>
   136c8:	mov	r7, #1
   136cc:	b	13614 <__assert_fail@plt+0x20a4>
   136d0:	mov	r0, #127	; 0x7f
   136d4:	bl	113a8 <exit@plt>
   136d8:	ldr	r0, [sp, #4]
   136dc:	bl	11558 <close@plt>
   136e0:	str	r5, [r4, #60]	; 0x3c
   136e4:	bl	154e0 <__assert_fail@plt+0x3f70>
   136e8:	cmp	r0, #0
   136ec:	bne	13840 <__assert_fail@plt+0x22d0>
   136f0:	mov	r0, #0
   136f4:	bl	12be0 <__assert_fail@plt+0x1670>
   136f8:	mov	r3, r0
   136fc:	mov	r1, #19
   13700:	movw	r2, #57544	; 0xe0c8
   13704:	movt	r2, #1
   13708:	add	r0, sp, #12
   1370c:	bl	113fc <snprintf@plt>
   13710:	bl	113f0 <__errno_location@plt>
   13714:	ldr	r5, [r4, #132]	; 0x84
   13718:	mov	r7, r0
   1371c:	cmp	r5, #0
   13720:	beq	1373c <__assert_fail@plt+0x21cc>
   13724:	add	r1, sp, #12
   13728:	mov	r2, #1
   1372c:	mov	r0, r5
   13730:	bl	113d8 <setenv@plt>
   13734:	cmp	r0, #0
   13738:	blt	13848 <__assert_fail@plt+0x22d8>
   1373c:	ldr	r3, [r4, #140]	; 0x8c
   13740:	ldrb	r2, [r4, #136]	; 0x88
   13744:	cmp	r3, #0
   13748:	beq	13878 <__assert_fail@plt+0x2308>
   1374c:	cmp	r2, #0
   13750:	beq	137a0 <__assert_fail@plt+0x2230>
   13754:	movw	r5, #57400	; 0xe038
   13758:	movt	r5, #1
   1375c:	mov	r0, #0
   13760:	bl	11558 <close@plt>
   13764:	mov	r1, #0
   13768:	mov	r0, r5
   1376c:	bl	15eec <__assert_fail@plt+0x497c>
   13770:	subs	r8, r0, #0
   13774:	blt	13894 <__assert_fail@plt+0x2324>
   13778:	beq	137a0 <__assert_fail@plt+0x2230>
   1377c:	mov	r1, #0
   13780:	bl	11270 <dup2@plt>
   13784:	cmp	r0, #0
   13788:	movwne	r1, #57588	; 0xe0f4
   1378c:	ldrne	r4, [r7]
   13790:	movtne	r1, #1
   13794:	bne	13814 <__assert_fail@plt+0x22a4>
   13798:	mov	r0, r8
   1379c:	bl	11558 <close@plt>
   137a0:	mov	r0, r6
   137a4:	bl	14d58 <__assert_fail@plt+0x37e8>
   137a8:	cmp	r0, #0
   137ac:	beq	138d8 <__assert_fail@plt+0x2368>
   137b0:	mov	r3, #7
   137b4:	str	r3, [r7]
   137b8:	mov	r2, #4
   137bc:	mov	r1, r7
   137c0:	ldr	r0, [sp, #8]
   137c4:	bl	1142c <write@plt>
   137c8:	ldr	r0, [sp, #8]
   137cc:	bl	11558 <close@plt>
   137d0:	ldr	r1, [r7]
   137d4:	cmp	r1, #7
   137d8:	beq	138d0 <__assert_fail@plt+0x2360>
   137dc:	movw	r2, #61384	; 0xefc8
   137e0:	movt	r2, #1
   137e4:	ldr	r3, [r6]
   137e8:	mov	r0, #0
   137ec:	bl	11324 <error@plt>
   137f0:	ldr	r3, [r7]
   137f4:	cmp	r3, #2
   137f8:	bne	138d0 <__assert_fail@plt+0x2360>
   137fc:	mov	r0, #127	; 0x7f
   13800:	bl	11210 <_exit@plt>
   13804:	bl	113f0 <__errno_location@plt>
   13808:	movw	r1, #57532	; 0xe0bc
   1380c:	movt	r1, #1
   13810:	ldr	r4, [r0]
   13814:	mov	r2, #5
   13818:	mov	r0, #0
   1381c:	bl	11258 <dcgettext@plt>
   13820:	mov	r2, r0
   13824:	mov	r1, r4
   13828:	mov	r0, #1
   1382c:	bl	11324 <error@plt>
   13830:	bl	113f0 <__errno_location@plt>
   13834:	movw	r1, #57496	; 0xe098
   13838:	movt	r1, #1
   1383c:	b	13810 <__assert_fail@plt+0x22a0>
   13840:	bl	15508 <__assert_fail@plt+0x3f98>
   13844:	b	136f0 <__assert_fail@plt+0x2180>
   13848:	ldr	r8, [r7]
   1384c:	mov	r2, #5
   13850:	movw	r1, #57548	; 0xe0cc
   13854:	movt	r1, #1
   13858:	mov	r0, #0
   1385c:	bl	11258 <dcgettext@plt>
   13860:	mov	r2, r0
   13864:	mov	r3, r5
   13868:	mov	r0, #0
   1386c:	mov	r1, r8
   13870:	bl	11324 <error@plt>
   13874:	b	1373c <__assert_fail@plt+0x21cc>
   13878:	movw	r3, #57484	; 0xe08c
   1387c:	movt	r3, #1
   13880:	cmp	r2, #0
   13884:	movw	r5, #57400	; 0xe038
   13888:	movt	r5, #1
   1388c:	moveq	r5, r3
   13890:	b	1375c <__assert_fail@plt+0x21ec>
   13894:	ldrb	r4, [r4, #136]	; 0x88
   13898:	mov	r2, r5
   1389c:	mov	r1, #8
   138a0:	ldr	r8, [r7]
   138a4:	cmp	r4, #0
   138a8:	bne	138f4 <__assert_fail@plt+0x2384>
   138ac:	mov	r0, r4
   138b0:	bl	19c1c <__assert_fail@plt+0x86ac>
   138b4:	mov	r3, r0
   138b8:	mov	r1, r8
   138bc:	mov	r0, r4
   138c0:	movw	r2, #61384	; 0xefc8
   138c4:	movt	r2, #1
   138c8:	bl	11324 <error@plt>
   138cc:	b	137a0 <__assert_fail@plt+0x2230>
   138d0:	mov	r0, #126	; 0x7e
   138d4:	b	13800 <__assert_fail@plt+0x2290>
   138d8:	mov	r1, r6
   138dc:	ldr	r0, [r6]
   138e0:	bl	11228 <execvp@plt>
   138e4:	ldr	r3, [r7]
   138e8:	cmp	r3, #0
   138ec:	beq	137c8 <__assert_fail@plt+0x2258>
   138f0:	b	137b8 <__assert_fail@plt+0x2248>
   138f4:	mov	r0, #0
   138f8:	bl	19c1c <__assert_fail@plt+0x86ac>
   138fc:	mov	r3, r0
   13900:	movw	r2, #61384	; 0xefc8
   13904:	movt	r2, #1
   13908:	mov	r1, r8
   1390c:	mov	r0, #1
   13910:	bl	11324 <error@plt>
   13914:	strd	r4, [sp, #-16]!
   13918:	movw	r5, #488	; 0x1e8
   1391c:	movt	r5, #3
   13920:	str	r6, [sp, #8]
   13924:	ldrb	r2, [r5, #148]	; 0x94
   13928:	str	lr, [sp, #12]
   1392c:	sub	sp, sp, #16
   13930:	ldr	r6, [r5, #80]	; 0x50
   13934:	ldr	r3, [r5, #36]	; 0x24
   13938:	cmp	r2, #0
   1393c:	ldr	r4, [r5, #144]	; 0x90
   13940:	sub	r6, r6, #1
   13944:	sub	r6, r6, r3
   13948:	add	r6, r4, r6
   1394c:	beq	1396c <__assert_fail@plt+0x23fc>
   13950:	b	13a10 <__assert_fail@plt+0x24a0>
   13954:	ldrb	r3, [r5, #156]	; 0x9c
   13958:	cmp	r3, r0
   1395c:	beq	139c0 <__assert_fail@plt+0x2450>
   13960:	cmp	r4, r6
   13964:	bcs	13a18 <__assert_fail@plt+0x24a8>
   13968:	strb	r0, [r4], #1
   1396c:	ldr	r0, [r5, #152]	; 0x98
   13970:	bl	1154c <getc@plt>
   13974:	cmn	r0, #1
   13978:	bne	13954 <__assert_fail@plt+0x23e4>
   1397c:	ldr	r2, [r5, #144]	; 0x90
   13980:	mov	r3, #1
   13984:	strb	r3, [r5, #148]	; 0x94
   13988:	cmp	r2, r4
   1398c:	beq	13a10 <__assert_fail@plt+0x24a0>
   13990:	mov	r3, #0
   13994:	strb	r3, [r4], #1
   13998:	sub	r4, r4, r2
   1399c:	ldr	r0, [r5, #92]	; 0x5c
   139a0:	cmp	r0, r3
   139a4:	beq	139e8 <__assert_fail@plt+0x2478>
   139a8:	mov	r0, r4
   139ac:	add	sp, sp, #16
   139b0:	ldrd	r4, [sp]
   139b4:	ldr	r6, [sp, #8]
   139b8:	add	sp, sp, #12
   139bc:	pop	{pc}		; (ldr pc, [sp], #4)
   139c0:	mov	r2, #0
   139c4:	ldr	r3, [r5, #160]	; 0xa0
   139c8:	strb	r2, [r4], #1
   139cc:	ldr	r0, [r5, #92]	; 0x5c
   139d0:	ldr	r2, [r5, #144]	; 0x90
   139d4:	add	r3, r3, #1
   139d8:	str	r3, [r5, #160]	; 0xa0
   139dc:	cmp	r0, #0
   139e0:	sub	r4, r4, r2
   139e4:	bne	139a8 <__assert_fail@plt+0x2438>
   139e8:	movw	ip, #356	; 0x164
   139ec:	movt	ip, #3
   139f0:	ldr	r1, [pc, #144]	; 13a88 <__assert_fail@plt+0x2518>
   139f4:	str	r0, [sp]
   139f8:	mov	r3, r4
   139fc:	ldrb	ip, [ip, #4]
   13a00:	stmib	sp, {r0, ip}
   13a04:	add	r0, r1, #52	; 0x34
   13a08:	bl	141dc <__assert_fail@plt+0x2c6c>
   13a0c:	b	139a8 <__assert_fail@plt+0x2438>
   13a10:	mvn	r4, #0
   13a14:	b	139a8 <__assert_fail@plt+0x2438>
   13a18:	ldr	r3, [r5, #92]	; 0x5c
   13a1c:	cmp	r3, #0
   13a20:	beq	13a48 <__assert_fail@plt+0x24d8>
   13a24:	mov	r2, #5
   13a28:	movw	r1, #57816	; 0xe1d8
   13a2c:	movt	r1, #1
   13a30:	mov	r0, #0
   13a34:	bl	11258 <dcgettext@plt>
   13a38:	mov	r2, r0
   13a3c:	mov	r1, #0
   13a40:	mov	r0, #1
   13a44:	bl	11324 <error@plt>
   13a48:	movw	r3, #356	; 0x164
   13a4c:	movt	r3, #3
   13a50:	ldrb	r3, [r3, #4]
   13a54:	cmp	r3, #0
   13a58:	bne	13a24 <__assert_fail@plt+0x24b4>
   13a5c:	ldr	r2, [r5, #16]
   13a60:	ldr	r3, [r5, #96]	; 0x60
   13a64:	cmp	r2, r3
   13a68:	beq	13a24 <__assert_fail@plt+0x24b4>
   13a6c:	ldr	r3, [r5, #68]	; 0x44
   13a70:	cmp	r3, #0
   13a74:	bne	13a24 <__assert_fail@plt+0x24b4>
   13a78:	ldr	r1, [pc, #8]	; 13a88 <__assert_fail@plt+0x2518>
   13a7c:	add	r0, r1, #52	; 0x34
   13a80:	bl	14728 <__assert_fail@plt+0x31b8>
   13a84:	b	13a24 <__assert_fail@plt+0x24b4>
   13a88:	strdeq	r0, [r3], -r8
   13a8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13a90:	strd	r6, [sp, #8]
   13a94:	movw	r6, #488	; 0x1e8
   13a98:	movt	r6, #3
   13a9c:	strd	r8, [sp, #16]
   13aa0:	ldrb	r7, [r6, #164]	; 0xa4
   13aa4:	strd	sl, [sp, #24]
   13aa8:	ldr	r8, [r6, #80]	; 0x50
   13aac:	str	lr, [sp, #32]
   13ab0:	sub	sp, sp, #28
   13ab4:	ldr	r3, [r6, #36]	; 0x24
   13ab8:	cmp	r7, #0
   13abc:	ldr	r4, [r6, #144]	; 0x90
   13ac0:	sub	r8, r8, #1
   13ac4:	sub	r8, r8, r3
   13ac8:	add	r8, r4, r8
   13acc:	bne	13e34 <__assert_fail@plt+0x28c4>
   13ad0:	ldr	r0, [r6, #152]	; 0x98
   13ad4:	bl	1154c <getc@plt>
   13ad8:	cmn	r0, #1
   13adc:	mov	r5, r0
   13ae0:	beq	14078 <__assert_fail@plt+0x2b08>
   13ae4:	movw	r9, #57944	; 0xe258
   13ae8:	movt	r9, #1
   13aec:	movw	sl, #356	; 0x164
   13af0:	movt	sl, #3
   13af4:	mov	r3, #1
   13af8:	mvn	fp, #0
   13afc:	str	r3, [sp, #20]
   13b00:	bics	r3, r5, #127	; 0x7f
   13b04:	bne	13b4c <__assert_fail@plt+0x25dc>
   13b08:	bl	11390 <__ctype_b_loc@plt>
   13b0c:	ldr	r2, [r0]
   13b10:	lsl	r3, r5, #1
   13b14:	ldrh	r3, [r2, r3]
   13b18:	tst	r3, #1
   13b1c:	bne	13b2c <__assert_fail@plt+0x25bc>
   13b20:	cmp	r5, #13
   13b24:	cmpne	r5, #10
   13b28:	bne	13b4c <__assert_fail@plt+0x25dc>
   13b2c:	ldr	r0, [r6, #152]	; 0x98
   13b30:	bl	1154c <getc@plt>
   13b34:	cmn	r0, #1
   13b38:	beq	1401c <__assert_fail@plt+0x2aac>
   13b3c:	mov	fp, r5
   13b40:	mov	r5, r0
   13b44:	bics	r3, r5, #127	; 0x7f
   13b48:	beq	13b08 <__assert_fail@plt+0x2598>
   13b4c:	sub	r3, r5, #11
   13b50:	cmp	r3, #1
   13b54:	bls	13b2c <__assert_fail@plt+0x25bc>
   13b58:	cmp	r5, #10
   13b5c:	beq	13bdc <__assert_fail@plt+0x266c>
   13b60:	mov	r7, r4
   13b64:	ldr	r3, [r6, #92]	; 0x5c
   13b68:	mov	r4, r7
   13b6c:	cmp	r3, #0
   13b70:	beq	13dc4 <__assert_fail@plt+0x2854>
   13b74:	cmp	r5, #39	; 0x27
   13b78:	beq	13cc4 <__assert_fail@plt+0x2754>
   13b7c:	cmp	r5, #92	; 0x5c
   13b80:	bne	13c74 <__assert_fail@plt+0x2704>
   13b84:	ldr	r0, [r6, #152]	; 0x98
   13b88:	bl	1154c <getc@plt>
   13b8c:	cmn	r0, #1
   13b90:	mov	fp, r0
   13b94:	beq	13f18 <__assert_fail@plt+0x29a8>
   13b98:	cmp	r0, #0
   13b9c:	bne	13bac <__assert_fail@plt+0x263c>
   13ba0:	ldr	r2, [r6, #172]	; 0xac
   13ba4:	cmp	r2, #0
   13ba8:	beq	13f30 <__assert_fail@plt+0x29c0>
   13bac:	cmp	r8, r7
   13bb0:	bls	13d54 <__assert_fail@plt+0x27e4>
   13bb4:	mov	r4, r7
   13bb8:	ldr	r0, [r6, #152]	; 0x98
   13bbc:	strb	fp, [r4], #1
   13bc0:	bl	1154c <getc@plt>
   13bc4:	cmn	r0, #1
   13bc8:	mov	r5, r0
   13bcc:	beq	1401c <__assert_fail@plt+0x2aac>
   13bd0:	cmp	r5, #10
   13bd4:	mov	r7, #1
   13bd8:	bne	13b60 <__assert_fail@plt+0x25f0>
   13bdc:	bics	r3, fp, #127	; 0x7f
   13be0:	bne	13c64 <__assert_fail@plt+0x26f4>
   13be4:	bl	11390 <__ctype_b_loc@plt>
   13be8:	ldr	r3, [r0]
   13bec:	lsl	fp, fp, #1
   13bf0:	ldrh	r3, [r3, fp]
   13bf4:	tst	r3, #1
   13bf8:	beq	13c64 <__assert_fail@plt+0x26f4>
   13bfc:	ldr	r5, [r6, #144]	; 0x90
   13c00:	cmp	r5, r4
   13c04:	orrne	r7, r7, #1
   13c08:	cmp	r7, #0
   13c0c:	beq	13f7c <__assert_fail@plt+0x2a0c>
   13c10:	ldr	r0, [r6, #168]	; 0xa8
   13c14:	mov	r3, #0
   13c18:	strb	r3, [r4], #1
   13c1c:	sub	r4, r4, r5
   13c20:	cmp	r0, r3
   13c24:	beq	13c38 <__assert_fail@plt+0x26c8>
   13c28:	ldrb	r2, [r0]
   13c2c:	ldrb	r3, [r5]
   13c30:	cmp	r2, r3
   13c34:	beq	13e6c <__assert_fail@plt+0x28fc>
   13c38:	ldr	r0, [r6, #92]	; 0x5c
   13c3c:	cmp	r0, #0
   13c40:	beq	13e88 <__assert_fail@plt+0x2918>
   13c44:	mov	r0, r4
   13c48:	add	sp, sp, #28
   13c4c:	ldrd	r4, [sp]
   13c50:	ldrd	r6, [sp, #8]
   13c54:	ldrd	r8, [sp, #16]
   13c58:	ldrd	sl, [sp, #24]
   13c5c:	add	sp, sp, #32
   13c60:	pop	{pc}		; (ldr pc, [sp], #4)
   13c64:	ldr	r3, [r6, #160]	; 0xa0
   13c68:	add	r3, r3, #1
   13c6c:	str	r3, [r6, #160]	; 0xa0
   13c70:	b	13bfc <__assert_fail@plt+0x268c>
   13c74:	cmp	r5, #34	; 0x22
   13c78:	beq	13cc4 <__assert_fail@plt+0x2754>
   13c7c:	cmp	r5, #0
   13c80:	bne	13e3c <__assert_fail@plt+0x28cc>
   13c84:	ldr	r3, [r6, #172]	; 0xac
   13c88:	cmp	r3, #0
   13c8c:	beq	13fe8 <__assert_fail@plt+0x2a78>
   13c90:	cmp	r8, r7
   13c94:	bls	13d54 <__assert_fail@plt+0x27e4>
   13c98:	strb	r5, [r4]
   13c9c:	add	r7, r7, #1
   13ca0:	ldr	r0, [r6, #152]	; 0x98
   13ca4:	mov	r4, r7
   13ca8:	bl	1154c <getc@plt>
   13cac:	cmn	r0, #1
   13cb0:	beq	1401c <__assert_fail@plt+0x2aac>
   13cb4:	cmp	r0, #10
   13cb8:	beq	14188 <__assert_fail@plt+0x2c18>
   13cbc:	mov	r5, r0
   13cc0:	b	13b64 <__assert_fail@plt+0x25f4>
   13cc4:	ldr	r0, [r6, #152]	; 0x98
   13cc8:	bl	1154c <getc@plt>
   13ccc:	cmn	r0, #1
   13cd0:	mov	fp, r0
   13cd4:	beq	14098 <__assert_fail@plt+0x2b28>
   13cd8:	cmp	fp, #10
   13cdc:	beq	140b4 <__assert_fail@plt+0x2b44>
   13ce0:	cmp	fp, r5
   13ce4:	beq	13f04 <__assert_fail@plt+0x2994>
   13ce8:	cmp	fp, #0
   13cec:	bne	13d84 <__assert_fail@plt+0x2814>
   13cf0:	ldr	r3, [r6, #172]	; 0xac
   13cf4:	cmp	r3, #0
   13cf8:	beq	13eb4 <__assert_fail@plt+0x2944>
   13cfc:	cmp	r8, r4
   13d00:	bls	13d54 <__assert_fail@plt+0x27e4>
   13d04:	sub	r7, r4, #1
   13d08:	mov	r3, #0
   13d0c:	add	r4, r7, #2
   13d10:	ldr	r0, [r6, #152]	; 0x98
   13d14:	strb	r3, [r7, #1]!
   13d18:	bl	1154c <getc@plt>
   13d1c:	cmn	r0, #1
   13d20:	mov	fp, r0
   13d24:	beq	14104 <__assert_fail@plt+0x2b94>
   13d28:	cmp	fp, #10
   13d2c:	beq	140b4 <__assert_fail@plt+0x2b44>
   13d30:	cmp	r5, fp
   13d34:	beq	13f04 <__assert_fail@plt+0x2994>
   13d38:	cmp	fp, #0
   13d3c:	bne	13d84 <__assert_fail@plt+0x2814>
   13d40:	ldr	r3, [r6, #172]	; 0xac
   13d44:	cmp	r3, #0
   13d48:	beq	13eb4 <__assert_fail@plt+0x2944>
   13d4c:	cmp	r8, r4
   13d50:	bhi	13d08 <__assert_fail@plt+0x2798>
   13d54:	ldr	r3, [r6, #92]	; 0x5c
   13d58:	cmp	r3, #0
   13d5c:	beq	14148 <__assert_fail@plt+0x2bd8>
   13d60:	mov	r2, #5
   13d64:	movw	r1, #57816	; 0xe1d8
   13d68:	movt	r1, #1
   13d6c:	mov	r0, #0
   13d70:	bl	11258 <dcgettext@plt>
   13d74:	mov	r2, r0
   13d78:	mov	r1, #0
   13d7c:	mov	r0, #1
   13d80:	bl	11324 <error@plt>
   13d84:	cmp	r8, r4
   13d88:	bls	13d54 <__assert_fail@plt+0x27e4>
   13d8c:	strb	fp, [r4], #1
   13d90:	ldr	r0, [r6, #152]	; 0x98
   13d94:	bl	1154c <getc@plt>
   13d98:	cmn	r0, #1
   13d9c:	mov	fp, r0
   13da0:	bne	13cd8 <__assert_fail@plt+0x2768>
   13da4:	ldr	r3, [r6, #144]	; 0x90
   13da8:	mov	r2, #1
   13dac:	strb	r2, [r6, #164]	; 0xa4
   13db0:	cmp	r3, r4
   13db4:	beq	13e34 <__assert_fail@plt+0x28c4>
   13db8:	mov	r3, #0
   13dbc:	strb	r3, [r4]
   13dc0:	b	140b4 <__assert_fail@plt+0x2b44>
   13dc4:	bics	fp, r5, #127	; 0x7f
   13dc8:	bne	13c7c <__assert_fail@plt+0x270c>
   13dcc:	bl	11390 <__ctype_b_loc@plt>
   13dd0:	ldr	r2, [r0]
   13dd4:	lsl	r3, r5, #1
   13dd8:	ldrh	r3, [r2, r3]
   13ddc:	tst	r3, #1
   13de0:	beq	13b74 <__assert_fail@plt+0x2604>
   13de4:	ldr	r0, [r6, #168]	; 0xa8
   13de8:	mov	r3, r7
   13dec:	ldr	r7, [r6, #144]	; 0x90
   13df0:	strb	fp, [r3], #1
   13df4:	cmp	r0, #0
   13df8:	sub	r4, r3, r7
   13dfc:	beq	13f98 <__assert_fail@plt+0x2a28>
   13e00:	ldrb	r2, [r0]
   13e04:	ldrb	r3, [r7]
   13e08:	cmp	r2, r3
   13e0c:	bne	13f98 <__assert_fail@plt+0x2a28>
   13e10:	mov	r1, r7
   13e14:	bl	111b0 <strcmp@plt>
   13e18:	cmp	r0, #0
   13e1c:	bne	13f98 <__assert_fail@plt+0x2a28>
   13e20:	ldr	r2, [sp, #20]
   13e24:	mov	r3, #1
   13e28:	strb	r3, [r6, #164]	; 0xa4
   13e2c:	cmp	r2, #0
   13e30:	beq	13c44 <__assert_fail@plt+0x26d4>
   13e34:	mvn	r4, #0
   13e38:	b	13c44 <__assert_fail@plt+0x26d4>
   13e3c:	cmp	r8, r7
   13e40:	bls	13d54 <__assert_fail@plt+0x27e4>
   13e44:	mov	r4, r7
   13e48:	ldr	r0, [r6, #152]	; 0x98
   13e4c:	strb	r5, [r4], #1
   13e50:	bl	1154c <getc@plt>
   13e54:	cmn	r0, #1
   13e58:	beq	13f18 <__assert_fail@plt+0x29a8>
   13e5c:	mov	fp, r5
   13e60:	mov	r7, #1
   13e64:	mov	r5, r0
   13e68:	b	13b58 <__assert_fail@plt+0x25e8>
   13e6c:	mov	r1, r5
   13e70:	bl	111b0 <strcmp@plt>
   13e74:	cmp	r0, #0
   13e78:	beq	13e20 <__assert_fail@plt+0x28b0>
   13e7c:	ldr	r0, [r6, #92]	; 0x5c
   13e80:	cmp	r0, #0
   13e84:	bne	13c44 <__assert_fail@plt+0x26d4>
   13e88:	movw	ip, #356	; 0x164
   13e8c:	movt	ip, #3
   13e90:	ldr	r1, [pc, #764]	; 14194 <__assert_fail@plt+0x2c24>
   13e94:	str	r0, [sp]
   13e98:	mov	r2, r5
   13e9c:	mov	r3, r4
   13ea0:	ldrb	ip, [ip, #4]
   13ea4:	stmib	sp, {r0, ip}
   13ea8:	add	r0, r1, #52	; 0x34
   13eac:	bl	141dc <__assert_fail@plt+0x2c6c>
   13eb0:	b	13c44 <__assert_fail@plt+0x26d4>
   13eb4:	mov	r2, #5
   13eb8:	mov	r1, r9
   13ebc:	mov	r0, #0
   13ec0:	bl	11258 <dcgettext@plt>
   13ec4:	mov	r1, #0
   13ec8:	mov	r2, r0
   13ecc:	mov	r0, r1
   13ed0:	bl	11324 <error@plt>
   13ed4:	mov	r3, #1
   13ed8:	cmp	r8, r4
   13edc:	str	r3, [r6, #172]	; 0xac
   13ee0:	bls	13d54 <__assert_fail@plt+0x27e4>
   13ee4:	mov	r3, #0
   13ee8:	ldr	r0, [r6, #152]	; 0x98
   13eec:	strb	r3, [r4], #1
   13ef0:	bl	1154c <getc@plt>
   13ef4:	cmn	r0, #1
   13ef8:	mov	fp, r0
   13efc:	bne	13cd8 <__assert_fail@plt+0x2768>
   13f00:	b	13da4 <__assert_fail@plt+0x2834>
   13f04:	ldr	r0, [r6, #152]	; 0x98
   13f08:	bl	1154c <getc@plt>
   13f0c:	cmn	r0, #1
   13f10:	mov	r5, r0
   13f14:	bne	13bd0 <__assert_fail@plt+0x2660>
   13f18:	ldr	r5, [r6, #144]	; 0x90
   13f1c:	mov	r3, #1
   13f20:	strb	r3, [r6, #164]	; 0xa4
   13f24:	cmp	r4, r5
   13f28:	bne	14030 <__assert_fail@plt+0x2ac0>
   13f2c:	b	13e34 <__assert_fail@plt+0x28c4>
   13f30:	mov	r2, #5
   13f34:	mov	r1, r9
   13f38:	bl	11258 <dcgettext@plt>
   13f3c:	mov	r2, r0
   13f40:	mov	r1, fp
   13f44:	mov	r0, fp
   13f48:	bl	11324 <error@plt>
   13f4c:	mov	r3, #1
   13f50:	cmp	r8, r7
   13f54:	str	r3, [r6, #172]	; 0xac
   13f58:	bls	13d54 <__assert_fail@plt+0x27e4>
   13f5c:	mov	r4, r7
   13f60:	ldr	r0, [r6, #152]	; 0x98
   13f64:	strb	fp, [r4], #1
   13f68:	bl	1154c <getc@plt>
   13f6c:	cmn	r0, #1
   13f70:	mov	r5, r0
   13f74:	bne	13bd0 <__assert_fail@plt+0x2660>
   13f78:	b	13f18 <__assert_fail@plt+0x29a8>
   13f7c:	ldr	r0, [r6, #152]	; 0x98
   13f80:	bl	1154c <getc@plt>
   13f84:	cmn	r0, #1
   13f88:	mov	r5, r0
   13f8c:	beq	13f18 <__assert_fail@plt+0x29a8>
   13f90:	mov	fp, #10
   13f94:	b	13b00 <__assert_fail@plt+0x2590>
   13f98:	ldrb	ip, [sl, #4]
   13f9c:	mov	r0, #0
   13fa0:	mov	r3, r4
   13fa4:	mov	r2, r7
   13fa8:	ldr	r1, [pc, #484]	; 14194 <__assert_fail@plt+0x2c24>
   13fac:	str	r0, [sp]
   13fb0:	stmib	sp, {r0, ip}
   13fb4:	add	r0, r1, #52	; 0x34
   13fb8:	bl	141dc <__assert_fail@plt+0x2c6c>
   13fbc:	ldr	r4, [r6, #144]	; 0x90
   13fc0:	ldr	r0, [r6, #152]	; 0x98
   13fc4:	bl	1154c <getc@plt>
   13fc8:	cmn	r0, #1
   13fcc:	beq	14124 <__assert_fail@plt+0x2bb4>
   13fd0:	mov	r3, #0
   13fd4:	mov	fp, r5
   13fd8:	mov	r7, #1
   13fdc:	mov	r5, r0
   13fe0:	str	r3, [sp, #20]
   13fe4:	b	13b00 <__assert_fail@plt+0x2590>
   13fe8:	mov	r2, #5
   13fec:	mov	r1, r9
   13ff0:	mov	r0, r5
   13ff4:	bl	11258 <dcgettext@plt>
   13ff8:	mov	r2, r0
   13ffc:	mov	r1, r5
   14000:	mov	r0, r5
   14004:	bl	11324 <error@plt>
   14008:	mov	r2, #1
   1400c:	cmp	r8, r7
   14010:	str	r2, [r6, #172]	; 0xac
   14014:	bhi	13e44 <__assert_fail@plt+0x28d4>
   14018:	b	13d54 <__assert_fail@plt+0x27e4>
   1401c:	ldr	r5, [r6, #144]	; 0x90
   14020:	mov	r3, #1
   14024:	strb	r3, [r6, #164]	; 0xa4
   14028:	cmp	r5, r4
   1402c:	beq	13e34 <__assert_fail@plt+0x28c4>
   14030:	mov	r3, #0
   14034:	strb	r3, [r4], #1
   14038:	sub	r4, r4, r5
   1403c:	ldr	r3, [sp, #20]
   14040:	cmp	r3, #0
   14044:	beq	13c38 <__assert_fail@plt+0x26c8>
   14048:	ldr	r0, [r6, #168]	; 0xa8
   1404c:	cmp	r0, #0
   14050:	beq	13c38 <__assert_fail@plt+0x26c8>
   14054:	ldrb	r2, [r0]
   14058:	ldrb	r3, [r5]
   1405c:	cmp	r2, r3
   14060:	bne	13c38 <__assert_fail@plt+0x26c8>
   14064:	mov	r1, r5
   14068:	bl	111b0 <strcmp@plt>
   1406c:	cmp	r0, #0
   14070:	bne	13c38 <__assert_fail@plt+0x26c8>
   14074:	b	13e34 <__assert_fail@plt+0x28c4>
   14078:	ldr	r5, [r6, #144]	; 0x90
   1407c:	mov	r3, #1
   14080:	strb	r3, [r6, #164]	; 0xa4
   14084:	cmp	r5, r4
   14088:	beq	13e34 <__assert_fail@plt+0x28c4>
   1408c:	strb	r7, [r4], #1
   14090:	sub	r4, r4, r5
   14094:	b	14048 <__assert_fail@plt+0x2ad8>
   14098:	ldr	r3, [r6, #144]	; 0x90
   1409c:	mov	r2, #1
   140a0:	strb	r2, [r6, #164]	; 0xa4
   140a4:	cmp	r3, r7
   140a8:	beq	13e34 <__assert_fail@plt+0x28c4>
   140ac:	mov	r3, #0
   140b0:	strb	r3, [r7]
   140b4:	bl	131a4 <__assert_fail@plt+0x1c34>
   140b8:	mov	r2, #5
   140bc:	movw	r1, #57840	; 0xe1f0
   140c0:	movt	r1, #1
   140c4:	mov	r0, #0
   140c8:	bl	11258 <dcgettext@plt>
   140cc:	cmp	r5, #34	; 0x22
   140d0:	mov	r4, r0
   140d4:	movweq	r1, #57928	; 0xe248
   140d8:	movwne	r1, #57936	; 0xe250
   140dc:	movteq	r1, #1
   140e0:	movtne	r1, #1
   140e4:	mov	r2, #5
   140e8:	mov	r0, #0
   140ec:	bl	11258 <dcgettext@plt>
   140f0:	mov	r3, r0
   140f4:	mov	r2, r4
   140f8:	mov	r1, #0
   140fc:	mov	r0, #1
   14100:	bl	11324 <error@plt>
   14104:	ldr	r3, [r6, #144]	; 0x90
   14108:	mov	r2, #1
   1410c:	strb	r2, [r6, #164]	; 0xa4
   14110:	cmp	r3, r4
   14114:	beq	13e34 <__assert_fail@plt+0x28c4>
   14118:	mov	r3, #0
   1411c:	strb	r3, [r4]
   14120:	b	140b4 <__assert_fail@plt+0x2b44>
   14124:	ldr	r5, [r6, #144]	; 0x90
   14128:	mov	r3, #1
   1412c:	strb	r3, [r6, #164]	; 0xa4
   14130:	cmp	r4, r5
   14134:	movne	r3, #0
   14138:	strbne	r3, [r4], #1
   1413c:	subne	r4, r4, r5
   14140:	bne	13c38 <__assert_fail@plt+0x26c8>
   14144:	b	13e34 <__assert_fail@plt+0x28c4>
   14148:	movw	r3, #356	; 0x164
   1414c:	movt	r3, #3
   14150:	ldrb	r3, [r3, #4]
   14154:	cmp	r3, #0
   14158:	bne	13d60 <__assert_fail@plt+0x27f0>
   1415c:	ldr	r2, [r6, #16]
   14160:	ldr	r3, [r6, #96]	; 0x60
   14164:	cmp	r2, r3
   14168:	beq	13d60 <__assert_fail@plt+0x27f0>
   1416c:	ldr	r3, [r6, #68]	; 0x44
   14170:	cmp	r3, #0
   14174:	bne	13d60 <__assert_fail@plt+0x27f0>
   14178:	ldr	r1, [pc, #20]	; 14194 <__assert_fail@plt+0x2c24>
   1417c:	add	r0, r1, #52	; 0x34
   14180:	bl	14728 <__assert_fail@plt+0x31b8>
   14184:	b	13d60 <__assert_fail@plt+0x27f0>
   14188:	mov	fp, r5
   1418c:	mov	r7, #1
   14190:	b	13be4 <__assert_fail@plt+0x2674>
   14194:	strdeq	r0, [r3], -r8
   14198:	mov	r0, #0
   1419c:	bx	lr
   141a0:	str	r4, [sp, #-8]!
   141a4:	mov	r5, r0
   141a8:	str	lr, [sp, #4]
   141ac:	bl	113f0 <__errno_location@plt>
   141b0:	ldr	r4, [r0]
   141b4:	mov	r2, #5
   141b8:	movw	r1, #60108	; 0xeacc
   141bc:	movt	r1, #1
   141c0:	mov	r0, #0
   141c4:	bl	11258 <dcgettext@plt>
   141c8:	mov	r2, r0
   141cc:	mov	r3, r5
   141d0:	mov	r0, #1
   141d4:	mov	r1, r4
   141d8:	bl	11324 <error@plt>
   141dc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   141e0:	strd	r6, [sp, #8]
   141e4:	str	sl, [sp, #24]
   141e8:	subs	sl, r2, #0
   141ec:	strd	r8, [sp, #16]
   141f0:	str	lr, [sp, #28]
   141f4:	ldr	r9, [sp, #36]	; 0x24
   141f8:	ldr	r7, [sp, #40]	; 0x28
   141fc:	beq	1444c <__assert_fail@plt+0x2edc>
   14200:	movw	r6, #60196	; 0xeb24
   14204:	movt	r6, #1
   14208:	cmp	sl, r6
   1420c:	mov	r5, r0
   14210:	mov	r4, r1
   14214:	mov	r8, r3
   14218:	beq	142c0 <__assert_fail@plt+0x2d50>
   1421c:	ldr	ip, [r1, #16]
   14220:	add	r3, r3, r9
   14224:	ldr	r2, [r0, #12]
   14228:	add	r3, r3, ip
   1422c:	cmp	r3, r2
   14230:	bls	143d8 <__assert_fail@plt+0x2e68>
   14234:	cmp	r7, #0
   14238:	bne	1446c <__assert_fail@plt+0x2efc>
   1423c:	ldr	r2, [r1]
   14240:	ldr	r3, [r0, #28]
   14244:	cmp	r2, r3
   14248:	beq	1446c <__assert_fail@plt+0x2efc>
   1424c:	ldr	r3, [r0, #24]
   14250:	cmp	r3, #0
   14254:	bne	14490 <__assert_fail@plt+0x2f20>
   14258:	ldr	r3, [r0]
   1425c:	cmp	r3, #0
   14260:	beq	1427c <__assert_fail@plt+0x2d0c>
   14264:	ldr	r3, [r0, #36]	; 0x24
   14268:	cmp	r3, #0
   1426c:	bne	14490 <__assert_fail@plt+0x2f20>
   14270:	ldr	r3, [r0, #40]	; 0x28
   14274:	cmp	r3, #0
   14278:	bne	14490 <__assert_fail@plt+0x2f20>
   1427c:	mov	r1, r4
   14280:	mov	r0, r5
   14284:	bl	14728 <__assert_fail@plt+0x31b8>
   14288:	ldr	r3, [r4]
   1428c:	ldr	r2, [r5, #40]	; 0x28
   14290:	cmp	r2, #0
   14294:	beq	142a8 <__assert_fail@plt+0x2d38>
   14298:	ldr	r1, [r5, #28]
   1429c:	sub	r1, r3, r1
   142a0:	cmp	r2, r1
   142a4:	beq	142b4 <__assert_fail@plt+0x2d44>
   142a8:	ldr	r2, [r5, #16]
   142ac:	cmp	r2, r3
   142b0:	bne	142cc <__assert_fail@plt+0x2d5c>
   142b4:	mov	r1, r4
   142b8:	mov	r0, r5
   142bc:	bl	14728 <__assert_fail@plt+0x31b8>
   142c0:	cmp	r7, #0
   142c4:	ldr	r3, [r4]
   142c8:	bne	142d4 <__assert_fail@plt+0x2d64>
   142cc:	mov	r2, #1
   142d0:	str	r2, [r4, #28]
   142d4:	ldrd	r0, [r4, #4]
   142d8:	cmp	r1, r3
   142dc:	bls	143b4 <__assert_fail@plt+0x2e44>
   142e0:	cmp	sl, r6
   142e4:	add	r1, r0, r3, lsl #2
   142e8:	add	r2, r3, #1
   142ec:	moveq	r1, #0
   142f0:	streq	r2, [r4]
   142f4:	streq	r1, [r0, r3, lsl #2]
   142f8:	beq	14394 <__assert_fail@plt+0x2e24>
   142fc:	ldr	ip, [r4, #16]
   14300:	str	r2, [r4]
   14304:	ldr	r3, [sp, #32]
   14308:	cmp	r3, #0
   1430c:	ldr	r3, [r4, #12]
   14310:	add	r3, r3, ip
   14314:	str	r3, [r1]
   14318:	beq	14338 <__assert_fail@plt+0x2dc8>
   1431c:	ldr	r0, [r4, #12]
   14320:	ldr	r1, [sp, #32]
   14324:	add	r0, r0, ip
   14328:	bl	11300 <strcpy@plt>
   1432c:	ldr	ip, [r4, #16]
   14330:	add	ip, r9, ip
   14334:	str	ip, [r4, #16]
   14338:	ldr	r0, [r4, #12]
   1433c:	mov	r1, sl
   14340:	add	r0, r0, ip
   14344:	bl	11300 <strcpy@plt>
   14348:	cmp	r7, #0
   1434c:	ldr	r2, [r4]
   14350:	ldr	r3, [r4, #16]
   14354:	add	r8, r8, r3
   14358:	str	r8, [r4, #16]
   1435c:	bne	14408 <__assert_fail@plt+0x2e98>
   14360:	ldr	r3, [r5, #40]	; 0x28
   14364:	cmp	r3, #0
   14368:	beq	1437c <__assert_fail@plt+0x2e0c>
   1436c:	ldr	r1, [r5, #28]
   14370:	sub	r1, r2, r1
   14374:	cmp	r3, r1
   14378:	beq	14388 <__assert_fail@plt+0x2e18>
   1437c:	ldr	r3, [r5, #16]
   14380:	cmp	r2, r3
   14384:	bne	1439c <__assert_fail@plt+0x2e2c>
   14388:	mov	r0, r5
   1438c:	mov	r1, r4
   14390:	bl	14728 <__assert_fail@plt+0x31b8>
   14394:	cmp	r7, #0
   14398:	bne	14424 <__assert_fail@plt+0x2eb4>
   1439c:	ldrd	r4, [sp]
   143a0:	ldrd	r6, [sp, #8]
   143a4:	ldrd	r8, [sp, #16]
   143a8:	ldr	sl, [sp, #24]
   143ac:	add	sp, sp, #28
   143b0:	pop	{pc}		; (ldr pc, [sp], #4)
   143b4:	cmp	r0, #0
   143b8:	beq	14430 <__assert_fail@plt+0x2ec0>
   143bc:	lsl	r3, r1, #1
   143c0:	lsl	r1, r1, #3
   143c4:	str	r3, [r4, #8]
   143c8:	bl	1babc <__assert_fail@plt+0xa54c>
   143cc:	str	r0, [r4, #4]
   143d0:	ldr	r3, [r4]
   143d4:	b	142e0 <__assert_fail@plt+0x2d70>
   143d8:	cmp	r7, #0
   143dc:	ldr	r3, [r1]
   143e0:	beq	1428c <__assert_fail@plt+0x2d1c>
   143e4:	ldr	r2, [r0, #16]
   143e8:	cmp	r3, r2
   143ec:	beq	142b4 <__assert_fail@plt+0x2d44>
   143f0:	ldrd	r0, [r1, #4]
   143f4:	cmp	r3, r1
   143f8:	bcs	143b4 <__assert_fail@plt+0x2e44>
   143fc:	add	r1, r0, r3, lsl #2
   14400:	add	r2, r3, #1
   14404:	b	14300 <__assert_fail@plt+0x2d90>
   14408:	ldr	r3, [r5, #16]
   1440c:	cmp	r2, r3
   14410:	bne	14428 <__assert_fail@plt+0x2eb8>
   14414:	mov	r0, r5
   14418:	mov	r1, r4
   1441c:	bl	14728 <__assert_fail@plt+0x31b8>
   14420:	b	14394 <__assert_fail@plt+0x2e24>
   14424:	ldr	r8, [r4, #16]
   14428:	str	r8, [r4, #20]
   1442c:	b	1439c <__assert_fail@plt+0x2e2c>
   14430:	mov	r3, #64	; 0x40
   14434:	mov	r0, #256	; 0x100
   14438:	str	r3, [r4, #8]
   1443c:	bl	1ba50 <__assert_fail@plt+0xa4e0>
   14440:	str	r0, [r4, #4]
   14444:	ldr	r3, [r4]
   14448:	b	142e0 <__assert_fail@plt+0x2d70>
   1444c:	movw	r3, #60036	; 0xea84
   14450:	movt	r3, #1
   14454:	movw	r1, #60172	; 0xeb0c
   14458:	movt	r1, #1
   1445c:	movw	r0, #60184	; 0xeb18
   14460:	movt	r0, #1
   14464:	movw	r2, #341	; 0x155
   14468:	bl	11570 <__assert_fail@plt>
   1446c:	movw	r1, #60208	; 0xeb30
   14470:	movt	r1, #1
   14474:	mov	r2, #5
   14478:	mov	r0, #0
   1447c:	bl	11258 <dcgettext@plt>
   14480:	mov	r2, r0
   14484:	mov	r1, #0
   14488:	mov	r0, #1
   1448c:	bl	11324 <error@plt>
   14490:	movw	r1, #60268	; 0xeb6c
   14494:	movt	r1, #1
   14498:	b	14474 <__assert_fail@plt+0x2f04>
   1449c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   144a0:	movw	r5, #664	; 0x298
   144a4:	movt	r5, #3
   144a8:	strd	r6, [sp, #8]
   144ac:	mov	r7, r3
   144b0:	mov	r4, r2
   144b4:	strd	r8, [sp, #16]
   144b8:	mov	r9, r0
   144bc:	strd	sl, [sp, #24]
   144c0:	str	lr, [sp, #32]
   144c4:	sub	sp, sp, #36	; 0x24
   144c8:	ldr	r0, [r0, #12]
   144cc:	str	r1, [sp, #24]
   144d0:	ldr	r3, [sp, #76]	; 0x4c
   144d4:	ldr	r1, [r5]
   144d8:	sub	r6, r0, #1
   144dc:	ldr	ip, [sp, #72]	; 0x48
   144e0:	ldr	sl, [sp, #84]	; 0x54
   144e4:	cmp	r1, #0
   144e8:	str	r3, [sp, #12]
   144ec:	ldr	r3, [sp, #80]	; 0x50
   144f0:	str	r3, [sp, #4]
   144f4:	ldr	r3, [sp, #88]	; 0x58
   144f8:	str	ip, [sp, #8]
   144fc:	str	r1, [sp, #20]
   14500:	str	r3, [sp, #28]
   14504:	beq	14714 <__assert_fail@plt+0x31a4>
   14508:	ldr	r3, [sp, #8]
   1450c:	cmp	r3, #0
   14510:	beq	14660 <__assert_fail@plt+0x30f0>
   14514:	ldr	r3, [sp, #12]
   14518:	str	sl, [sp, #16]
   1451c:	ldr	r5, [sp, #20]
   14520:	add	fp, sl, r3
   14524:	b	1459c <__assert_fail@plt+0x302c>
   14528:	sub	sl, r8, r4
   1452c:	cmp	r6, sl
   14530:	bls	14630 <__assert_fail@plt+0x30c0>
   14534:	mov	r0, r5
   14538:	mov	r1, r4
   1453c:	sub	r6, r6, sl
   14540:	mov	r2, sl
   14544:	bl	11420 <strncpy@plt>
   14548:	cmp	fp, r6
   1454c:	add	r5, r5, sl
   14550:	bcs	1462c <__assert_fail@plt+0x30bc>
   14554:	mov	r0, r5
   14558:	ldr	r1, [sp, #8]
   1455c:	sub	r6, r6, fp
   14560:	ldr	r3, [sp, #12]
   14564:	add	r5, r5, r3
   14568:	bl	11300 <strcpy@plt>
   1456c:	mov	r0, r5
   14570:	ldr	r1, [sp, #4]
   14574:	bl	11300 <strcpy@plt>
   14578:	ldr	r4, [r9, #20]
   1457c:	ldr	r3, [sp, #16]
   14580:	sub	r7, r7, r4
   14584:	add	r4, r8, r4
   14588:	sub	r7, r7, sl
   1458c:	add	r5, r5, r3
   14590:	ldrb	r3, [r4]
   14594:	cmp	r3, #0
   14598:	beq	145e4 <__assert_fail@plt+0x3074>
   1459c:	mov	r0, r4
   145a0:	ldr	r1, [r9, #24]
   145a4:	bl	169e4 <__assert_fail@plt+0x5474>
   145a8:	subs	r8, r0, #0
   145ac:	bne	14528 <__assert_fail@plt+0x2fb8>
   145b0:	cmp	r7, r6
   145b4:	bcs	14630 <__assert_fail@plt+0x30c0>
   145b8:	mov	r1, r4
   145bc:	mov	r0, r5
   145c0:	mov	r2, r7
   145c4:	add	r4, r4, r7
   145c8:	bl	11420 <strncpy@plt>
   145cc:	ldrb	r3, [r4]
   145d0:	sub	r6, r6, r7
   145d4:	add	r5, r5, r7
   145d8:	mov	r7, r8
   145dc:	cmp	r3, #0
   145e0:	bne	1459c <__assert_fail@plt+0x302c>
   145e4:	mov	ip, #0
   145e8:	ldr	r2, [sp, #20]
   145ec:	mov	r0, r9
   145f0:	strb	ip, [r5], #1
   145f4:	str	ip, [sp, #72]	; 0x48
   145f8:	str	ip, [sp, #76]	; 0x4c
   145fc:	ldr	r1, [sp, #24]
   14600:	sub	r3, r5, r2
   14604:	ldr	ip, [sp, #28]
   14608:	str	ip, [sp, #80]	; 0x50
   1460c:	add	sp, sp, #36	; 0x24
   14610:	ldrd	r4, [sp]
   14614:	ldrd	r6, [sp, #8]
   14618:	ldrd	r8, [sp, #16]
   1461c:	ldrd	sl, [sp, #24]
   14620:	ldr	lr, [sp, #32]
   14624:	add	sp, sp, #36	; 0x24
   14628:	b	141dc <__assert_fail@plt+0x2c6c>
   1462c:	mov	r4, r8
   14630:	ldrb	r3, [r4]
   14634:	cmp	r3, #0
   14638:	beq	145e4 <__assert_fail@plt+0x3074>
   1463c:	mov	r2, #5
   14640:	movw	r1, #60292	; 0xeb84
   14644:	movt	r1, #1
   14648:	mov	r0, #0
   1464c:	bl	11258 <dcgettext@plt>
   14650:	mov	r2, r0
   14654:	mov	r1, #0
   14658:	mov	r0, #1
   1465c:	bl	11324 <error@plt>
   14660:	ldr	r3, [sp, #12]
   14664:	str	sl, [sp, #8]
   14668:	ldr	r5, [sp, #20]
   1466c:	add	fp, sl, r3
   14670:	b	146d4 <__assert_fail@plt+0x3164>
   14674:	sub	sl, r8, r4
   14678:	cmp	sl, r6
   1467c:	bcs	14630 <__assert_fail@plt+0x30c0>
   14680:	mov	r0, r5
   14684:	mov	r1, r4
   14688:	sub	r6, r6, sl
   1468c:	mov	r2, sl
   14690:	bl	11420 <strncpy@plt>
   14694:	cmp	fp, r6
   14698:	add	r5, r5, sl
   1469c:	bcs	1462c <__assert_fail@plt+0x30bc>
   146a0:	mov	r0, r5
   146a4:	ldr	r1, [sp, #4]
   146a8:	sub	r6, r6, fp
   146ac:	bl	11300 <strcpy@plt>
   146b0:	ldr	r4, [r9, #20]
   146b4:	ldr	r3, [sp, #8]
   146b8:	sub	r7, r7, r4
   146bc:	add	r4, r8, r4
   146c0:	sub	r7, r7, sl
   146c4:	add	r5, r5, r3
   146c8:	ldrb	r3, [r4]
   146cc:	cmp	r3, #0
   146d0:	beq	145e4 <__assert_fail@plt+0x3074>
   146d4:	mov	r0, r4
   146d8:	ldr	r1, [r9, #24]
   146dc:	bl	169e4 <__assert_fail@plt+0x5474>
   146e0:	subs	r8, r0, #0
   146e4:	bne	14674 <__assert_fail@plt+0x3104>
   146e8:	cmp	r6, r7
   146ec:	bls	14630 <__assert_fail@plt+0x30c0>
   146f0:	mov	r1, r4
   146f4:	mov	r0, r5
   146f8:	mov	r2, r7
   146fc:	sub	r6, r6, r7
   14700:	add	r4, r4, r7
   14704:	add	r5, r5, r7
   14708:	bl	11420 <strncpy@plt>
   1470c:	mov	r7, r8
   14710:	b	146c8 <__assert_fail@plt+0x3158>
   14714:	add	r0, r0, #1
   14718:	bl	1ba50 <__assert_fail@plt+0xa4e0>
   1471c:	str	r0, [r5]
   14720:	str	r0, [sp, #20]
   14724:	b	14508 <__assert_fail@plt+0x2f98>
   14728:	mov	ip, #0
   1472c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14730:	movw	r2, #60196	; 0xeb24
   14734:	movt	r2, #1
   14738:	strd	r6, [sp, #8]
   1473c:	mov	r3, ip
   14740:	strd	r8, [sp, #16]
   14744:	mov	r8, r1
   14748:	mov	r9, r0
   1474c:	strd	sl, [sp, #24]
   14750:	str	lr, [sp, #32]
   14754:	sub	sp, sp, #28
   14758:	str	ip, [sp]
   1475c:	str	ip, [sp, #4]
   14760:	str	ip, [sp, #8]
   14764:	bl	141dc <__assert_fail@plt+0x2c6c>
   14768:	ldr	r3, [r8]
   1476c:	cmp	r3, #0
   14770:	beq	14a78 <__assert_fail@plt+0x3508>
   14774:	ldr	r2, [r8, #4]
   14778:	sub	r3, r3, #-1073741823	; 0xc0000001
   1477c:	lsl	r0, r3, #2
   14780:	ldr	r6, [r2, r3, lsl #2]
   14784:	cmp	r6, #0
   14788:	bne	14a5c <__assert_fail@plt+0x34ec>
   1478c:	add	r0, r0, #8
   14790:	mov	sl, r6
   14794:	bl	1ba50 <__assert_fail@plt+0xa4e0>
   14798:	add	r3, r0, #8
   1479c:	ldr	ip, [r8]
   147a0:	mov	r7, r0
   147a4:	str	r3, [sp, #20]
   147a8:	ldr	r3, [r9, #28]
   147ac:	mov	r4, ip
   147b0:	cmp	r3, #0
   147b4:	beq	14a18 <__assert_fail@plt+0x34a8>
   147b8:	ldr	r2, [r8, #4]
   147bc:	sub	r1, r3, #1
   147c0:	ldr	r5, [sp, #20]
   147c4:	add	r0, r2, #8
   147c8:	orr	lr, r7, r2
   147cc:	cmp	r2, r5
   147d0:	cmpcc	r7, r0
   147d4:	movcs	r0, #1
   147d8:	movcc	r0, #0
   147dc:	tst	lr, #7
   147e0:	movne	r0, #0
   147e4:	cmp	r1, #5
   147e8:	movls	r1, #0
   147ec:	andhi	r1, r0, #1
   147f0:	cmp	r1, #0
   147f4:	beq	149fc <__assert_fail@plt+0x348c>
   147f8:	lsr	lr, r3, #1
   147fc:	sub	fp, r2, #8
   14800:	mov	r5, r7
   14804:	add	lr, r7, lr, lsl #3
   14808:	ldrd	r0, [fp, #8]!
   1480c:	strd	r0, [r5], #8
   14810:	cmp	r5, lr
   14814:	bne	14808 <__assert_fail@plt+0x3298>
   14818:	bic	r1, r3, #1
   1481c:	cmp	r1, r3
   14820:	beq	1482c <__assert_fail@plt+0x32bc>
   14824:	ldr	r2, [r2, r1, lsl #2]
   14828:	str	r2, [r7, r1, lsl #2]
   1482c:	add	r0, r6, r3
   14830:	cmp	ip, r0
   14834:	cmphi	r4, r3
   14838:	movls	r5, r3
   1483c:	bls	14888 <__assert_fail@plt+0x3318>
   14840:	ldr	r1, [r8, #4]
   14844:	add	lr, r7, r3, lsl #2
   14848:	mov	r5, r3
   1484c:	add	r1, r1, r0, lsl #2
   14850:	add	r5, r5, #1
   14854:	ldr	fp, [r1], #4
   14858:	add	r2, r5, r0
   1485c:	sub	r2, r2, r3
   14860:	cmp	r2, ip
   14864:	movcs	r2, #0
   14868:	movcc	r2, #1
   1486c:	cmp	r4, r5
   14870:	str	fp, [lr], #4
   14874:	movls	r2, #0
   14878:	cmp	r2, #0
   1487c:	bne	14850 <__assert_fail@plt+0x32e0>
   14880:	cmp	r5, r3
   14884:	bcc	14a20 <__assert_fail@plt+0x34b0>
   14888:	mov	r3, r7
   1488c:	mov	r2, r5
   14890:	str	sl, [r7, r5, lsl #2]
   14894:	mov	r0, r9
   14898:	ldr	r1, [r8, #24]
   1489c:	ldr	fp, [r9, #32]
   148a0:	blx	fp
   148a4:	subs	fp, r0, #0
   148a8:	bne	14980 <__assert_fail@plt+0x3410>
   148ac:	ldr	r1, [r9, #28]
   148b0:	add	ip, r1, #1
   148b4:	cmp	ip, r4
   148b8:	bcs	14a3c <__assert_fail@plt+0x34cc>
   148bc:	ldr	r0, [r8, #36]	; 0x24
   148c0:	ldr	r2, [r8, #40]	; 0x28
   148c4:	clz	r3, r2
   148c8:	lsr	r3, r3, #5
   148cc:	cmp	r4, r2
   148d0:	orrcc	r3, r3, #1
   148d4:	cmp	r3, #0
   148d8:	movne	r2, r4
   148dc:	moveq	r3, r1
   148e0:	strne	r4, [r8, #40]	; 0x28
   148e4:	ldrne	r3, [r9, #28]
   148e8:	cmp	r0, #0
   148ec:	beq	14978 <__assert_fail@plt+0x3408>
   148f0:	cmp	r0, r2
   148f4:	bcs	14978 <__assert_fail@plt+0x3408>
   148f8:	sub	r2, r2, r0
   148fc:	cmp	r2, #1
   14900:	subne	r4, r4, r2, lsr #1
   14904:	subeq	r4, r4, #1
   14908:	cmp	r1, #0
   1490c:	beq	1491c <__assert_fail@plt+0x33ac>
   14910:	cmp	ip, r4
   14914:	bcc	14924 <__assert_fail@plt+0x33b4>
   14918:	mov	r4, ip
   1491c:	cmp	r4, #0
   14920:	moveq	r4, #1
   14924:	ldr	ip, [r8]
   14928:	add	r2, r6, #1
   1492c:	sub	r1, ip, r3
   14930:	cmp	r2, r1
   14934:	bcc	147b0 <__assert_fail@plt+0x3240>
   14938:	mov	r0, r7
   1493c:	bl	1c94c <__assert_fail@plt+0xb3dc>
   14940:	ldr	r2, [r8, #20]
   14944:	mov	r0, #0
   14948:	mvn	r1, #0
   1494c:	ldr	r3, [r9, #28]
   14950:	strd	r0, [r8, #28]
   14954:	str	r3, [r8]
   14958:	str	r2, [r8, #16]
   1495c:	add	sp, sp, #28
   14960:	ldrd	r4, [sp]
   14964:	ldrd	r6, [sp, #8]
   14968:	ldrd	r8, [sp, #16]
   1496c:	ldrd	sl, [sp, #24]
   14970:	add	sp, sp, #32
   14974:	pop	{pc}		; (ldr pc, [sp], #4)
   14978:	lsr	r4, r4, #1
   1497c:	b	14908 <__assert_fail@plt+0x3398>
   14980:	ldr	r1, [r8, #36]	; 0x24
   14984:	ldr	r2, [r9, #28]
   14988:	cmp	r4, r1
   1498c:	movhi	r1, r4
   14990:	strhi	r4, [r8, #36]	; 0x24
   14994:	movls	r3, r2
   14998:	ldrhi	r3, [r9, #28]
   1499c:	cmp	r1, #0
   149a0:	beq	149e8 <__assert_fail@plt+0x3478>
   149a4:	ldr	r0, [r8, #40]	; 0x28
   149a8:	cmp	r0, r1
   149ac:	bls	149e8 <__assert_fail@plt+0x3478>
   149b0:	sub	r1, r0, r1
   149b4:	cmp	r1, #1
   149b8:	addne	r4, r4, r1, lsr #1
   149bc:	addeq	r4, r4, #1
   149c0:	cmp	r2, #0
   149c4:	beq	149d4 <__assert_fail@plt+0x3464>
   149c8:	add	r2, r2, #1
   149cc:	cmp	r4, r2
   149d0:	movcc	r4, r2
   149d4:	cmp	r4, #0
   149d8:	moveq	r4, #1
   149dc:	add	r6, r6, r5
   149e0:	sub	r6, r6, r3
   149e4:	b	14924 <__assert_fail@plt+0x33b4>
   149e8:	cmn	r4, #1
   149ec:	addne	r4, r4, #1
   149f0:	cmp	r2, #0
   149f4:	bne	149c8 <__assert_fail@plt+0x3458>
   149f8:	b	149dc <__assert_fail@plt+0x346c>
   149fc:	add	lr, r2, r3, lsl #2
   14a00:	sub	r1, r7, #4
   14a04:	ldr	r0, [r2], #4
   14a08:	cmp	lr, r2
   14a0c:	str	r0, [r1, #4]!
   14a10:	bne	14a04 <__assert_fail@plt+0x3494>
   14a14:	b	1482c <__assert_fail@plt+0x32bc>
   14a18:	mov	r0, r6
   14a1c:	b	14830 <__assert_fail@plt+0x32c0>
   14a20:	movw	r1, #60172	; 0xeb0c
   14a24:	movt	r1, #1
   14a28:	ldr	r3, [pc, #100]	; 14a94 <__assert_fail@plt+0x3524>
   14a2c:	movw	r0, #60376	; 0xebd8
   14a30:	movt	r0, #1
   14a34:	mov	r2, #242	; 0xf2
   14a38:	bl	11570 <__assert_fail@plt>
   14a3c:	mov	r2, #5
   14a40:	movw	r1, #60408	; 0xebf8
   14a44:	movt	r1, #1
   14a48:	bl	11258 <dcgettext@plt>
   14a4c:	mov	r2, r0
   14a50:	mov	r1, fp
   14a54:	mov	r0, #1
   14a58:	bl	11324 <error@plt>
   14a5c:	movw	r1, #60172	; 0xeb0c
   14a60:	movt	r1, #1
   14a64:	ldr	r3, [pc, #44]	; 14a98 <__assert_fail@plt+0x3528>
   14a68:	movw	r0, #60332	; 0xebac
   14a6c:	movt	r0, #1
   14a70:	movw	r2, #262	; 0x106
   14a74:	bl	11570 <__assert_fail@plt>
   14a78:	movw	r1, #60172	; 0xeb0c
   14a7c:	movt	r1, #1
   14a80:	ldr	r3, [pc, #16]	; 14a98 <__assert_fail@plt+0x3528>
   14a84:	movw	r0, #60312	; 0xeb98
   14a88:	movt	r0, #1
   14a8c:	movw	r2, #261	; 0x105
   14a90:	bl	11570 <__assert_fail@plt>
   14a94:	muleq	r1, ip, sl
   14a98:	muleq	r1, r0, sl
   14a9c:	mov	r0, #0
   14aa0:	str	r4, [sp, #-8]!
   14aa4:	str	lr, [sp, #4]
   14aa8:	bl	11264 <sysconf@plt>
   14aac:	cmp	r0, #0
   14ab0:	ldr	r4, [sp]
   14ab4:	add	sp, sp, #4
   14ab8:	mvnle	r0, #-2147483648	; 0x80000000
   14abc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ac0:	movw	r3, #444	; 0x1bc
   14ac4:	movt	r3, #3
   14ac8:	strd	r4, [sp, #-16]!
   14acc:	ldr	r4, [r3]
   14ad0:	ldr	r3, [r4]
   14ad4:	str	r6, [sp, #8]
   14ad8:	str	lr, [sp, #12]
   14adc:	cmp	r3, #0
   14ae0:	beq	14b18 <__assert_fail@plt+0x35a8>
   14ae4:	mov	r5, #0
   14ae8:	mov	r0, r3
   14aec:	bl	113c0 <strlen@plt>
   14af0:	ldr	r3, [r4, #4]!
   14af4:	add	r0, r0, #1
   14af8:	add	r5, r5, r0
   14afc:	cmp	r3, #0
   14b00:	bne	14ae8 <__assert_fail@plt+0x3578>
   14b04:	mov	r0, r5
   14b08:	ldrd	r4, [sp]
   14b0c:	ldr	r6, [sp, #8]
   14b10:	add	sp, sp, #12
   14b14:	pop	{pc}		; (ldr pc, [sp], #4)
   14b18:	mov	r5, r3
   14b1c:	b	14b04 <__assert_fail@plt+0x3594>
   14b20:	movw	r3, #444	; 0x1bc
   14b24:	movt	r3, #3
   14b28:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14b2c:	strd	r6, [sp, #8]
   14b30:	mov	r4, r0
   14b34:	ldr	r7, [r3]
   14b38:	str	r8, [sp, #16]
   14b3c:	mov	r8, r1
   14b40:	str	lr, [sp, #20]
   14b44:	ldr	r5, [r7]
   14b48:	cmp	r5, #0
   14b4c:	beq	14c18 <__assert_fail@plt+0x36a8>
   14b50:	mov	r6, #0
   14b54:	mov	r0, r5
   14b58:	bl	113c0 <strlen@plt>
   14b5c:	ldr	r5, [r7, #4]!
   14b60:	add	r0, r0, #1
   14b64:	add	r6, r6, r0
   14b68:	cmp	r5, #0
   14b6c:	bne	14b54 <__assert_fail@plt+0x35e4>
   14b70:	mov	r3, #4096	; 0x1000
   14b74:	mov	r0, r5
   14b78:	str	r3, [r4, #8]
   14b7c:	bl	11264 <sysconf@plt>
   14b80:	cmp	r0, #0
   14b84:	str	r5, [r4]
   14b88:	mvnle	r0, #-2147483648	; 0x80000000
   14b8c:	cmp	r6, r0
   14b90:	mov	r3, r0
   14b94:	str	r0, [r4, #4]
   14b98:	bhi	14c08 <__assert_fail@plt+0x3698>
   14b9c:	add	r2, r8, r6
   14ba0:	cmp	r3, r2
   14ba4:	bls	14c10 <__assert_fail@plt+0x36a0>
   14ba8:	sub	r3, r3, r8
   14bac:	sub	r3, r3, r6
   14bb0:	lsr	r2, r3, #2
   14bb4:	str	r3, [r4, #4]
   14bb8:	sub	r2, r2, #2
   14bbc:	cmp	r2, #0
   14bc0:	str	r2, [r4, #16]
   14bc4:	beq	14c5c <__assert_fail@plt+0x36ec>
   14bc8:	str	r3, [r4, #12]
   14bcc:	mov	r3, #0
   14bd0:	movw	r2, #16792	; 0x4198
   14bd4:	movt	r2, #1
   14bd8:	mov	r0, r3
   14bdc:	str	r3, [r4, #20]
   14be0:	str	r3, [r4, #24]
   14be4:	str	r3, [r4, #28]
   14be8:	str	r2, [r4, #32]
   14bec:	str	r3, [r4, #36]	; 0x24
   14bf0:	str	r3, [r4, #40]	; 0x28
   14bf4:	ldrd	r4, [sp]
   14bf8:	ldrd	r6, [sp, #8]
   14bfc:	ldr	r8, [sp, #16]
   14c00:	add	sp, sp, #20
   14c04:	pop	{pc}		; (ldr pc, [sp], #4)
   14c08:	mov	r0, #1
   14c0c:	b	14bf4 <__assert_fail@plt+0x3684>
   14c10:	mov	r0, #2
   14c14:	b	14bf4 <__assert_fail@plt+0x3684>
   14c18:	mov	r3, #4096	; 0x1000
   14c1c:	mov	r0, r5
   14c20:	str	r3, [r4, #8]
   14c24:	bl	11264 <sysconf@plt>
   14c28:	subs	r3, r0, #0
   14c2c:	ble	14c44 <__assert_fail@plt+0x36d4>
   14c30:	mov	r6, r5
   14c34:	mov	r2, r8
   14c38:	str	r5, [r4]
   14c3c:	str	r3, [r4, #4]
   14c40:	b	14ba0 <__assert_fail@plt+0x3630>
   14c44:	mvn	r2, #-2147483648	; 0x80000000
   14c48:	mov	r6, r5
   14c4c:	str	r5, [r4]
   14c50:	mov	r3, r2
   14c54:	str	r2, [r4, #4]
   14c58:	b	14b9c <__assert_fail@plt+0x362c>
   14c5c:	movw	r1, #60172	; 0xeb0c
   14c60:	movt	r1, #1
   14c64:	ldr	r3, [pc, #12]	; 14c78 <__assert_fail@plt+0x3708>
   14c68:	movw	r0, #60460	; 0xec2c
   14c6c:	movt	r0, #1
   14c70:	movw	r2, #518	; 0x206
   14c74:	bl	11570 <__assert_fail@plt>
   14c78:	andeq	lr, r1, r8, lsr #21
   14c7c:	ldr	r3, [r0, #4]
   14c80:	cmp	r3, #131072	; 0x20000
   14c84:	bcc	14c94 <__assert_fail@plt+0x3724>
   14c88:	ldr	r3, [r0, #8]
   14c8c:	cmp	r3, #131072	; 0x20000
   14c90:	movls	r3, #131072	; 0x20000
   14c94:	str	r3, [r0, #12]
   14c98:	bx	lr
   14c9c:	ldr	r0, [r0, #12]
   14ca0:	movw	r3, #63487	; 0xf7ff
   14ca4:	movt	r3, #32767	; 0x7fff
   14ca8:	strd	r4, [sp, #-16]!
   14cac:	mov	r5, #0
   14cb0:	str	r6, [sp, #8]
   14cb4:	str	lr, [sp, #12]
   14cb8:	str	r5, [r1]
   14cbc:	cmp	r0, r3
   14cc0:	str	r5, [r1, #4]
   14cc4:	str	r5, [r1, #8]
   14cc8:	str	r5, [r1, #16]
   14ccc:	str	r5, [r1, #36]	; 0x24
   14cd0:	str	r5, [r1, #40]	; 0x28
   14cd4:	bhi	14d14 <__assert_fail@plt+0x37a4>
   14cd8:	add	r0, r0, #1
   14cdc:	mov	r4, r1
   14ce0:	mov	r6, r2
   14ce4:	bl	1ba50 <__assert_fail@plt+0xa4e0>
   14ce8:	mvn	r3, #0
   14cec:	str	r0, [r4, #12]
   14cf0:	str	r5, [r4, #16]
   14cf4:	str	r5, [r4, #20]
   14cf8:	str	r6, [r4, #24]
   14cfc:	str	r5, [r4, #28]
   14d00:	str	r3, [r4, #32]
   14d04:	ldrd	r4, [sp]
   14d08:	ldr	r6, [sp, #8]
   14d0c:	add	sp, sp, #12
   14d10:	pop	{pc}		; (ldr pc, [sp], #4)
   14d14:	movw	r1, #60172	; 0xeb0c
   14d18:	movt	r1, #1
   14d1c:	ldr	r3, [pc, #12]	; 14d30 <__assert_fail@plt+0x37c0>
   14d20:	movw	r0, #60484	; 0xec44
   14d24:	movt	r0, #1
   14d28:	mov	r2, #572	; 0x23c
   14d2c:	bl	11570 <__assert_fail@plt>
   14d30:			; <UNDEFINED> instruction: 0x0001eabc
   14d34:	ldr	r3, [r1, #20]
   14d38:	mov	ip, #0
   14d3c:	ldr	r2, [r0, #28]
   14d40:	mvn	r0, #0
   14d44:	str	ip, [r1, #28]
   14d48:	str	r0, [r1, #32]
   14d4c:	str	r2, [r1]
   14d50:	str	r3, [r1, #16]
   14d54:	bx	lr
   14d58:	ldr	r3, [r0]
   14d5c:	strd	r4, [sp, #-16]!
   14d60:	str	r6, [sp, #8]
   14d64:	str	lr, [sp, #12]
   14d68:	sub	sp, sp, #16
   14d6c:	cmp	r3, #0
   14d70:	beq	14e40 <__assert_fail@plt+0x38d0>
   14d74:	mov	r4, #0
   14d78:	mov	r5, r0
   14d7c:	mov	r6, r4
   14d80:	mov	r0, r3
   14d84:	add	r4, r4, #1
   14d88:	bl	113c0 <strlen@plt>
   14d8c:	ldr	r3, [r5, #4]!
   14d90:	add	r6, r6, r0
   14d94:	cmp	r3, #0
   14d98:	bne	14d80 <__assert_fail@plt+0x3810>
   14d9c:	movw	r0, #60520	; 0xec68
   14da0:	movt	r0, #1
   14da4:	bl	11348 <getenv@plt>
   14da8:	cmp	r0, #0
   14dac:	beq	14de0 <__assert_fail@plt+0x3870>
   14db0:	mov	ip, #0
   14db4:	add	r3, sp, #12
   14db8:	mov	r2, #10
   14dbc:	add	r1, sp, #8
   14dc0:	str	ip, [sp]
   14dc4:	bl	1c04c <__assert_fail@plt+0xaadc>
   14dc8:	cmp	r0, #0
   14dcc:	bne	14e58 <__assert_fail@plt+0x38e8>
   14dd0:	ldr	r3, [sp, #12]
   14dd4:	cmp	r4, r3
   14dd8:	movhi	r0, #1
   14ddc:	bhi	14e24 <__assert_fail@plt+0x38b4>
   14de0:	movw	r0, #60560	; 0xec90
   14de4:	movt	r0, #1
   14de8:	bl	11348 <getenv@plt>
   14dec:	subs	r3, r0, #0
   14df0:	beq	14e38 <__assert_fail@plt+0x38c8>
   14df4:	mov	ip, #0
   14df8:	add	r3, sp, #12
   14dfc:	mov	r2, #10
   14e00:	add	r1, sp, #8
   14e04:	str	ip, [sp]
   14e08:	bl	1c04c <__assert_fail@plt+0xaadc>
   14e0c:	cmp	r0, #0
   14e10:	bne	14e4c <__assert_fail@plt+0x38dc>
   14e14:	ldr	r0, [sp, #12]
   14e18:	cmp	r6, r0
   14e1c:	movls	r0, #0
   14e20:	movhi	r0, #1
   14e24:	add	sp, sp, #16
   14e28:	ldrd	r4, [sp]
   14e2c:	ldr	r6, [sp, #8]
   14e30:	add	sp, sp, #12
   14e34:	pop	{pc}		; (ldr pc, [sp], #4)
   14e38:	mov	r0, r3
   14e3c:	b	14e24 <__assert_fail@plt+0x38b4>
   14e40:	mov	r4, r3
   14e44:	mov	r6, r3
   14e48:	b	14d9c <__assert_fail@plt+0x382c>
   14e4c:	movw	r0, #60560	; 0xec90
   14e50:	movt	r0, #1
   14e54:	bl	141a0 <__assert_fail@plt+0x2c30>
   14e58:	movw	r0, #60520	; 0xec68
   14e5c:	movt	r0, #1
   14e60:	bl	141a0 <__assert_fail@plt+0x2c30>
   14e64:	movw	r0, #60628	; 0xecd4
   14e68:	movt	r0, #1
   14e6c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14e70:	strd	r6, [sp, #8]
   14e74:	strd	r8, [sp, #16]
   14e78:	str	sl, [sp, #24]
   14e7c:	str	lr, [sp, #28]
   14e80:	bl	15e50 <__assert_fail@plt+0x48e0>
   14e84:	subs	r6, r0, #0
   14e88:	beq	14f64 <__assert_fail@plt+0x39f4>
   14e8c:	mov	r9, #0
   14e90:	mvn	r5, #0
   14e94:	bl	113f0 <__errno_location@plt>
   14e98:	mov	r8, r9
   14e9c:	mov	r7, r0
   14ea0:	mov	r0, r6
   14ea4:	str	r8, [r7]
   14ea8:	bl	114d4 <readdir64@plt>
   14eac:	subs	r4, r0, #0
   14eb0:	mov	r1, #0
   14eb4:	beq	14ef4 <__assert_fail@plt+0x3984>
   14eb8:	ldrb	r3, [r4, #19]
   14ebc:	add	r0, r4, #19
   14ec0:	cmp	r3, #46	; 0x2e
   14ec4:	bne	14ee0 <__assert_fail@plt+0x3970>
   14ec8:	ldrb	r3, [r4, #20]
   14ecc:	cmp	r3, #0
   14ed0:	beq	14ea0 <__assert_fail@plt+0x3930>
   14ed4:	ldrh	r3, [r4, #20]
   14ed8:	cmp	r3, #46	; 0x2e
   14edc:	beq	14ea0 <__assert_fail@plt+0x3930>
   14ee0:	bl	1571c <__assert_fail@plt+0x41ac>
   14ee4:	cmp	r5, r0
   14ee8:	mov	r9, #1
   14eec:	movlt	r5, r0
   14ef0:	b	14ea0 <__assert_fail@plt+0x3930>
   14ef4:	ldr	r7, [r7]
   14ef8:	cmp	r7, r1
   14efc:	bne	14f2c <__assert_fail@plt+0x39bc>
   14f00:	mov	r0, r6
   14f04:	bl	11564 <closedir@plt>
   14f08:	cmp	r9, #0
   14f0c:	beq	14f64 <__assert_fail@plt+0x39f4>
   14f10:	mov	r0, r5
   14f14:	ldrd	r4, [sp]
   14f18:	ldrd	r6, [sp, #8]
   14f1c:	ldrd	r8, [sp, #16]
   14f20:	ldr	sl, [sp, #24]
   14f24:	add	sp, sp, #28
   14f28:	pop	{pc}		; (ldr pc, [sp], #4)
   14f2c:	mov	r1, #8
   14f30:	movw	r2, #60628	; 0xecd4
   14f34:	movt	r2, #1
   14f38:	mvn	r5, #0
   14f3c:	bl	19c1c <__assert_fail@plt+0x86ac>
   14f40:	mov	r3, r0
   14f44:	mov	r1, r7
   14f48:	mov	r0, r4
   14f4c:	movw	r2, #61384	; 0xefc8
   14f50:	movt	r2, #1
   14f54:	bl	11324 <error@plt>
   14f58:	mov	r0, r6
   14f5c:	bl	11564 <closedir@plt>
   14f60:	b	14f10 <__assert_fail@plt+0x39a0>
   14f64:	mvn	r5, #0
   14f68:	b	14f10 <__assert_fail@plt+0x39a0>
   14f6c:	strd	r4, [sp, #-16]!
   14f70:	mov	r4, r1
   14f74:	mov	r1, #1
   14f78:	str	r6, [sp, #8]
   14f7c:	mov	r6, r0
   14f80:	str	lr, [sp, #12]
   14f84:	bl	1c6c4 <__assert_fail@plt+0xb154>
   14f88:	ands	r5, r0, #1
   14f8c:	movne	r5, #0
   14f90:	beq	14fa8 <__assert_fail@plt+0x3a38>
   14f94:	mov	r0, r5
   14f98:	ldrd	r4, [sp]
   14f9c:	ldr	r6, [sp, #8]
   14fa0:	add	sp, sp, #12
   14fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   14fa8:	ldrd	r0, [r4]
   14fac:	add	r2, r4, #8
   14fb0:	add	r1, r1, #1
   14fb4:	lsl	r1, r1, #2
   14fb8:	bl	158b8 <__assert_fail@plt+0x4348>
   14fbc:	cmp	r0, #0
   14fc0:	beq	14fe0 <__assert_fail@plt+0x3a70>
   14fc4:	ldr	r3, [r4, #4]
   14fc8:	str	r0, [r4]
   14fcc:	str	r6, [r0, r3, lsl #2]
   14fd0:	ldr	r3, [r4, #4]
   14fd4:	add	r3, r3, #1
   14fd8:	str	r3, [r4, #4]
   14fdc:	b	14f94 <__assert_fail@plt+0x3a24>
   14fe0:	mvn	r5, #0
   14fe4:	b	14f94 <__assert_fail@plt+0x3a24>
   14fe8:	strd	r4, [sp, #-16]!
   14fec:	mov	r4, r1
   14ff0:	mov	r1, #1
   14ff4:	mov	r5, r0
   14ff8:	str	r6, [sp, #8]
   14ffc:	str	lr, [sp, #12]
   15000:	bl	1c6c4 <__assert_fail@plt+0xb154>
   15004:	tst	r0, #1
   15008:	bne	15070 <__assert_fail@plt+0x3b00>
   1500c:	ldmib	r4, {r0, r3}
   15010:	cmp	r3, r0
   15014:	bcs	15050 <__assert_fail@plt+0x3ae0>
   15018:	ldr	r2, [r4]
   1501c:	ldr	r1, [r2, r3, lsl #2]
   15020:	add	r2, r2, r3, lsl #2
   15024:	cmp	r1, r5
   15028:	bge	15068 <__assert_fail@plt+0x3af8>
   1502c:	add	r3, r3, #1
   15030:	b	15040 <__assert_fail@plt+0x3ad0>
   15034:	ldr	r1, [r2, #4]!
   15038:	cmp	r5, r1
   1503c:	ble	15068 <__assert_fail@plt+0x3af8>
   15040:	cmp	r0, r3
   15044:	str	r3, [r4, #8]
   15048:	add	r3, r3, #1
   1504c:	bne	15034 <__assert_fail@plt+0x3ac4>
   15050:	str	r5, [r4, #12]
   15054:	mvn	r0, #0
   15058:	ldrd	r4, [sp]
   1505c:	ldr	r6, [sp, #8]
   15060:	add	sp, sp, #12
   15064:	pop	{pc}		; (ldr pc, [sp], #4)
   15068:	cmp	r5, r1
   1506c:	bne	15050 <__assert_fail@plt+0x3ae0>
   15070:	ldrd	r4, [sp]
   15074:	mov	r0, #0
   15078:	ldr	r6, [sp, #8]
   1507c:	add	sp, sp, #12
   15080:	pop	{pc}		; (ldr pc, [sp], #4)
   15084:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15088:	strd	r6, [sp, #8]
   1508c:	strd	r8, [sp, #16]
   15090:	subs	r9, r0, #0
   15094:	movgt	r6, r1
   15098:	movgt	r7, #0
   1509c:	strd	sl, [sp, #24]
   150a0:	movgt	r8, #5
   150a4:	str	lr, [sp, #32]
   150a8:	sub	sp, sp, #516	; 0x204
   150ac:	ble	151b8 <__assert_fail@plt+0x3c48>
   150b0:	sub	r3, r9, r7
   150b4:	cmp	r3, #64	; 0x40
   150b8:	movlt	sl, r3
   150bc:	movge	sl, #64	; 0x40
   150c0:	cmp	r3, #0
   150c4:	ble	151c0 <__assert_fail@plt+0x3c50>
   150c8:	mov	r4, sp
   150cc:	mov	r2, sp
   150d0:	mov	r3, #0
   150d4:	add	r1, r7, r3
   150d8:	add	r3, r3, #1
   150dc:	str	r8, [r2, #4]
   150e0:	cmp	r3, sl
   150e4:	str	r1, [r2], #8
   150e8:	blt	150d4 <__assert_fail@plt+0x3b64>
   150ec:	mov	r2, #0
   150f0:	mov	r1, sl
   150f4:	mov	r0, sp
   150f8:	bl	112b8 <poll@plt>
   150fc:	cmn	r0, #1
   15100:	beq	151d8 <__assert_fail@plt+0x3c68>
   15104:	mov	fp, #0
   15108:	ldrsh	r3, [r4, #6]
   1510c:	cmp	r3, #32
   15110:	beq	1519c <__assert_fail@plt+0x3c2c>
   15114:	ldr	r5, [r4]
   15118:	mov	r1, #1
   1511c:	mov	r0, r5
   15120:	bl	1c6c4 <__assert_fail@plt+0xb154>
   15124:	tst	r0, #1
   15128:	bne	1519c <__assert_fail@plt+0x3c2c>
   1512c:	ldmib	r6, {r0, r3}
   15130:	cmp	r0, r3
   15134:	bls	15170 <__assert_fail@plt+0x3c00>
   15138:	ldr	r2, [r6]
   1513c:	ldr	r1, [r2, r3, lsl #2]
   15140:	add	r2, r2, r3, lsl #2
   15144:	cmp	r5, r1
   15148:	ble	15194 <__assert_fail@plt+0x3c24>
   1514c:	add	r3, r3, #1
   15150:	b	15160 <__assert_fail@plt+0x3bf0>
   15154:	ldr	r1, [r2, #4]!
   15158:	cmp	r5, r1
   1515c:	ble	15194 <__assert_fail@plt+0x3c24>
   15160:	cmp	r3, r0
   15164:	str	r3, [r6, #8]
   15168:	add	r3, r3, #1
   1516c:	bne	15154 <__assert_fail@plt+0x3be4>
   15170:	mvn	r0, #0
   15174:	str	r5, [r6, #12]
   15178:	add	sp, sp, #516	; 0x204
   1517c:	ldrd	r4, [sp]
   15180:	ldrd	r6, [sp, #8]
   15184:	ldrd	r8, [sp, #16]
   15188:	ldrd	sl, [sp, #24]
   1518c:	add	sp, sp, #32
   15190:	pop	{pc}		; (ldr pc, [sp], #4)
   15194:	cmp	r5, r1
   15198:	bne	15170 <__assert_fail@plt+0x3c00>
   1519c:	add	fp, fp, #1
   151a0:	add	r4, r4, #8
   151a4:	cmp	fp, sl
   151a8:	blt	15108 <__assert_fail@plt+0x3b98>
   151ac:	add	r7, r7, sl
   151b0:	cmp	r9, r7
   151b4:	bgt	150b0 <__assert_fail@plt+0x3b40>
   151b8:	mov	r0, #0
   151bc:	b	15178 <__assert_fail@plt+0x3c08>
   151c0:	mov	r2, #0
   151c4:	mov	r1, sl
   151c8:	mov	r0, sp
   151cc:	bl	112b8 <poll@plt>
   151d0:	cmn	r0, #1
   151d4:	bne	151ac <__assert_fail@plt+0x3c3c>
   151d8:	mvn	r0, #0
   151dc:	b	15178 <__assert_fail@plt+0x3c08>
   151e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   151e4:	strd	r6, [sp, #8]
   151e8:	strd	r8, [sp, #16]
   151ec:	subs	r9, r0, #0
   151f0:	strd	sl, [sp, #24]
   151f4:	movgt	sl, r1
   151f8:	movgt	r7, #0
   151fc:	addgt	r8, sl, #8
   15200:	str	lr, [sp, #32]
   15204:	sub	sp, sp, #516	; 0x204
   15208:	ble	152dc <__assert_fail@plt+0x3d6c>
   1520c:	sub	r3, r9, r7
   15210:	cmp	r3, #64	; 0x40
   15214:	movlt	r6, r3
   15218:	movge	r6, #64	; 0x40
   1521c:	cmp	r3, #0
   15220:	ble	152e4 <__assert_fail@plt+0x3d74>
   15224:	mov	r4, sp
   15228:	mov	r2, sp
   1522c:	mov	r3, #0
   15230:	mov	r0, #5
   15234:	add	r1, r7, r3
   15238:	add	r3, r3, #1
   1523c:	str	r0, [r2, #4]
   15240:	cmp	r3, r6
   15244:	str	r1, [r2], #8
   15248:	blt	15234 <__assert_fail@plt+0x3cc4>
   1524c:	mov	r2, #0
   15250:	mov	r1, r6
   15254:	mov	r0, sp
   15258:	bl	112b8 <poll@plt>
   1525c:	cmn	r0, #1
   15260:	beq	152fc <__assert_fail@plt+0x3d8c>
   15264:	mov	r5, #0
   15268:	ldrsh	r3, [r4, #6]
   1526c:	mov	r1, #1
   15270:	add	r5, r5, r1
   15274:	cmp	r3, #32
   15278:	beq	152c4 <__assert_fail@plt+0x3d54>
   1527c:	ldr	fp, [r4]
   15280:	mov	r0, fp
   15284:	bl	1c6c4 <__assert_fail@plt+0xb154>
   15288:	tst	r0, #1
   1528c:	mov	r2, r8
   15290:	bne	152c4 <__assert_fail@plt+0x3d54>
   15294:	ldrd	r0, [sl]
   15298:	add	r1, r1, #1
   1529c:	lsl	r1, r1, #2
   152a0:	bl	158b8 <__assert_fail@plt+0x4348>
   152a4:	cmp	r0, #0
   152a8:	beq	152fc <__assert_fail@plt+0x3d8c>
   152ac:	ldr	r3, [sl, #4]
   152b0:	str	r0, [sl]
   152b4:	str	fp, [r0, r3, lsl #2]
   152b8:	ldr	r3, [sl, #4]
   152bc:	add	r3, r3, #1
   152c0:	str	r3, [sl, #4]
   152c4:	cmp	r6, r5
   152c8:	add	r4, r4, #8
   152cc:	bgt	15268 <__assert_fail@plt+0x3cf8>
   152d0:	add	r7, r7, r6
   152d4:	cmp	r9, r7
   152d8:	bgt	1520c <__assert_fail@plt+0x3c9c>
   152dc:	mov	r0, #0
   152e0:	b	15300 <__assert_fail@plt+0x3d90>
   152e4:	mov	r2, #0
   152e8:	mov	r1, r6
   152ec:	mov	r0, sp
   152f0:	bl	112b8 <poll@plt>
   152f4:	cmn	r0, #1
   152f8:	bne	152d0 <__assert_fail@plt+0x3d60>
   152fc:	mvn	r0, #0
   15300:	add	sp, sp, #516	; 0x204
   15304:	ldrd	r4, [sp]
   15308:	ldrd	r6, [sp, #8]
   1530c:	ldrd	r8, [sp, #16]
   15310:	ldrd	sl, [sp, #24]
   15314:	add	sp, sp, #32
   15318:	pop	{pc}		; (ldr pc, [sp], #4)
   1531c:	strd	r4, [sp, #-12]!
   15320:	str	lr, [sp, #8]
   15324:	sub	sp, sp, #20
   15328:	bl	14e64 <__assert_fail@plt+0x38f4>
   1532c:	subs	r4, r0, #0
   15330:	movge	r5, sp
   15334:	blt	1537c <__assert_fail@plt+0x3e0c>
   15338:	cmn	r4, #-2147483647	; 0x80000001
   1533c:	mov	r3, #0
   15340:	addne	r4, r4, #1
   15344:	mov	r1, r5
   15348:	mov	r0, r4
   1534c:	str	r3, [sp]
   15350:	str	r3, [sp, #4]
   15354:	str	r3, [sp, #8]
   15358:	bl	151e0 <__assert_fail@plt+0x3c70>
   1535c:	ldm	sp, {r1, r2}
   15360:	movw	r3, #668	; 0x29c
   15364:	movt	r3, #3
   15368:	stm	r3, {r1, r2}
   1536c:	add	sp, sp, #20
   15370:	ldrd	r4, [sp]
   15374:	add	sp, sp, #8
   15378:	pop	{pc}		; (ldr pc, [sp], #4)
   1537c:	mov	r0, #4
   15380:	mov	r5, sp
   15384:	bl	11264 <sysconf@plt>
   15388:	cmn	r0, #1
   1538c:	mov	r1, r5
   15390:	movne	r4, r0
   15394:	mov	r0, #7
   15398:	moveq	r4, #20
   1539c:	bl	1127c <getrlimit64@plt>
   153a0:	cmp	r0, #0
   153a4:	bne	15338 <__assert_fail@plt+0x3dc8>
   153a8:	ldrd	r2, [sp]
   153ac:	mvn	r1, #0
   153b0:	mvn	r0, #0
   153b4:	cmp	r3, r1
   153b8:	cmpeq	r2, r0
   153bc:	movne	r4, r2
   153c0:	b	15338 <__assert_fail@plt+0x3dc8>
   153c4:	push	{r1, r2, r3}
   153c8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   153cc:	strd	r6, [sp, #8]
   153d0:	strd	r8, [sp, #16]
   153d4:	mov	r8, r0
   153d8:	str	lr, [sp, #24]
   153dc:	sub	sp, sp, #8
   153e0:	ldr	r5, [sp, #36]	; 0x24
   153e4:	ands	r6, r5, #64	; 0x40
   153e8:	bne	15470 <__assert_fail@plt+0x3f00>
   153ec:	movw	r4, #668	; 0x29c
   153f0:	movt	r4, #3
   153f4:	ldrb	r7, [r4, #8]
   153f8:	cmp	r7, #0
   153fc:	beq	15448 <__assert_fail@plt+0x3ed8>
   15400:	orr	r1, r5, #524288	; 0x80000
   15404:	mov	r2, r6
   15408:	mov	r0, r8
   1540c:	bl	15eec <__assert_fail@plt+0x497c>
   15410:	subs	r5, r0, #0
   15414:	blt	15424 <__assert_fail@plt+0x3eb4>
   15418:	ldrb	r3, [r4, #9]
   1541c:	cmp	r3, #0
   15420:	beq	15480 <__assert_fail@plt+0x3f10>
   15424:	mov	r0, r5
   15428:	add	sp, sp, #8
   1542c:	ldrd	r4, [sp]
   15430:	ldrd	r6, [sp, #8]
   15434:	ldrd	r8, [sp, #16]
   15438:	ldr	lr, [sp, #24]
   1543c:	add	sp, sp, #28
   15440:	add	sp, sp, #12
   15444:	bx	lr
   15448:	movw	r0, #60644	; 0xece4
   1544c:	movt	r0, #1
   15450:	mov	r1, #524288	; 0x80000
   15454:	bl	15eec <__assert_fail@plt+0x497c>
   15458:	subs	r9, r0, #0
   1545c:	bge	1548c <__assert_fail@plt+0x3f1c>
   15460:	mov	r3, #1
   15464:	strb	r3, [r4, #8]
   15468:	strb	r7, [r4, #9]
   1546c:	b	15400 <__assert_fail@plt+0x3e90>
   15470:	add	r3, sp, #40	; 0x28
   15474:	ldr	r6, [sp, #40]	; 0x28
   15478:	str	r3, [sp, #4]
   1547c:	b	153ec <__assert_fail@plt+0x3e7c>
   15480:	mov	r1, #1
   15484:	bl	15b8c <__assert_fail@plt+0x461c>
   15488:	b	15424 <__assert_fail@plt+0x3eb4>
   1548c:	mov	r1, #1
   15490:	bl	1c6c4 <__assert_fail@plt+0xb154>
   15494:	and	r7, r0, #1
   15498:	mov	r0, r9
   1549c:	bl	11558 <close@plt>
   154a0:	mov	r3, #1
   154a4:	strb	r3, [r4, #8]
   154a8:	strb	r7, [r4, #9]
   154ac:	b	15400 <__assert_fail@plt+0x3e90>
   154b0:	str	r4, [sp, #-8]!
   154b4:	movw	r4, #668	; 0x29c
   154b8:	movt	r4, #3
   154bc:	ldr	r0, [r4]
   154c0:	str	lr, [sp, #4]
   154c4:	bl	1c94c <__assert_fail@plt+0xb3dc>
   154c8:	mov	r3, #0
   154cc:	str	r3, [r4]
   154d0:	str	r3, [r4, #4]
   154d4:	ldr	r4, [sp]
   154d8:	add	sp, sp, #4
   154dc:	pop	{pc}		; (ldr pc, [sp], #4)
   154e0:	movw	r0, #60648	; 0xece8
   154e4:	movt	r0, #1
   154e8:	str	r4, [sp, #-8]!
   154ec:	str	lr, [sp, #4]
   154f0:	bl	11348 <getenv@plt>
   154f4:	adds	r0, r0, #0
   154f8:	ldr	r4, [sp]
   154fc:	add	sp, sp, #4
   15500:	movne	r0, #1
   15504:	pop	{pc}		; (ldr pc, [sp], #4)
   15508:	movw	r3, #668	; 0x29c
   1550c:	movt	r3, #3
   15510:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15514:	strd	r6, [sp, #8]
   15518:	str	r8, [sp, #16]
   1551c:	str	lr, [sp, #20]
   15520:	sub	sp, sp, #16
   15524:	ldr	r8, [r3]
   15528:	ldr	r7, [r3, #4]
   1552c:	bl	14e64 <__assert_fail@plt+0x38f4>
   15530:	subs	r4, r0, #0
   15534:	movge	r5, sp
   15538:	blt	15590 <__assert_fail@plt+0x4020>
   1553c:	cmn	r4, #-2147483647	; 0x80000001
   15540:	beq	15548 <__assert_fail@plt+0x3fd8>
   15544:	add	r4, r4, #1
   15548:	mov	r6, #0
   1554c:	mvn	r3, #0
   15550:	str	r8, [sp]
   15554:	mov	r0, r4
   15558:	mov	r1, r5
   1555c:	str	r7, [sp, #4]
   15560:	str	r6, [sp, #8]
   15564:	str	r3, [sp, #12]
   15568:	bl	15084 <__assert_fail@plt+0x3b14>
   1556c:	ldr	r4, [sp, #12]
   15570:	cmp	r4, r6
   15574:	bge	1560c <__assert_fail@plt+0x409c>
   15578:	add	sp, sp, #16
   1557c:	ldrd	r4, [sp]
   15580:	ldrd	r6, [sp, #8]
   15584:	ldr	r8, [sp, #16]
   15588:	add	sp, sp, #20
   1558c:	pop	{pc}		; (ldr pc, [sp], #4)
   15590:	mov	r0, #4
   15594:	mov	r5, sp
   15598:	bl	11264 <sysconf@plt>
   1559c:	mov	r4, r0
   155a0:	mov	r1, r5
   155a4:	cmn	r4, #1
   155a8:	mov	r0, #7
   155ac:	beq	155dc <__assert_fail@plt+0x406c>
   155b0:	bl	1127c <getrlimit64@plt>
   155b4:	cmp	r0, #0
   155b8:	bne	1553c <__assert_fail@plt+0x3fcc>
   155bc:	ldrd	r2, [sp]
   155c0:	mvn	r1, #0
   155c4:	mvn	r0, #0
   155c8:	cmp	r3, r1
   155cc:	cmpeq	r2, r0
   155d0:	beq	1553c <__assert_fail@plt+0x3fcc>
   155d4:	mov	r4, r2
   155d8:	b	1553c <__assert_fail@plt+0x3fcc>
   155dc:	bl	1127c <getrlimit64@plt>
   155e0:	cmp	r0, #0
   155e4:	movne	r4, #21
   155e8:	bne	15548 <__assert_fail@plt+0x3fd8>
   155ec:	ldrd	r2, [sp]
   155f0:	mvn	r1, #0
   155f4:	mvn	r0, #0
   155f8:	cmp	r3, r1
   155fc:	cmpeq	r2, r0
   15600:	moveq	r4, #20
   15604:	bne	155d4 <__assert_fail@plt+0x4064>
   15608:	b	15544 <__assert_fail@plt+0x3fd4>
   1560c:	mov	r2, #5
   15610:	movw	r1, #60676	; 0xed04
   15614:	movt	r1, #1
   15618:	mov	r0, r6
   1561c:	bl	11258 <dcgettext@plt>
   15620:	mov	r2, r0
   15624:	mov	r3, r4
   15628:	mov	r1, r6
   1562c:	mov	r0, r6
   15630:	bl	11324 <error@plt>
   15634:	movw	r3, #60600	; 0xecb8
   15638:	movt	r3, #1
   1563c:	movw	r1, #60828	; 0xed9c
   15640:	movt	r1, #1
   15644:	movw	r0, #60840	; 0xeda8
   15648:	movt	r0, #1
   1564c:	mov	r2, #396	; 0x18c
   15650:	bl	11570 <__assert_fail@plt>
   15654:	movw	r3, #464	; 0x1d0
   15658:	movt	r3, #3
   1565c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15660:	strd	r6, [sp, #8]
   15664:	mov	r6, r0
   15668:	str	r8, [sp, #16]
   1566c:	str	lr, [sp, #20]
   15670:	sub	sp, sp, #16
   15674:	ldr	r0, [r3]
   15678:	bl	1c8ac <__assert_fail@plt+0xb33c>
   1567c:	movw	r2, #476	; 0x1dc
   15680:	movt	r2, #3
   15684:	movw	r3, #364	; 0x16c
   15688:	movt	r3, #3
   1568c:	ldr	r4, [r2]
   15690:	movw	r1, #60852	; 0xedb4
   15694:	movt	r1, #1
   15698:	mov	r2, #5
   1569c:	mov	r0, #0
   156a0:	ldr	r8, [r3]
   156a4:	bl	11258 <dcgettext@plt>
   156a8:	mov	r7, r0
   156ac:	mov	r2, #5
   156b0:	movw	r1, #60868	; 0xedc4
   156b4:	movt	r1, #1
   156b8:	mov	r0, #0
   156bc:	bl	11258 <dcgettext@plt>
   156c0:	mov	r5, r0
   156c4:	mov	r2, #5
   156c8:	movw	r1, #60884	; 0xedd4
   156cc:	movt	r1, #1
   156d0:	mov	r0, #0
   156d4:	bl	11258 <dcgettext@plt>
   156d8:	mov	ip, #0
   156dc:	mov	r3, r8
   156e0:	str	r7, [sp]
   156e4:	mov	r1, r6
   156e8:	movw	r2, #60900	; 0xede4
   156ec:	movt	r2, #1
   156f0:	str	r5, [sp, #4]
   156f4:	str	r0, [sp, #8]
   156f8:	mov	r0, r4
   156fc:	str	ip, [sp, #12]
   15700:	bl	1b858 <__assert_fail@plt+0xa2e8>
   15704:	add	sp, sp, #16
   15708:	ldrd	r4, [sp]
   1570c:	ldrd	r6, [sp, #8]
   15710:	ldr	r8, [sp, #16]
   15714:	add	sp, sp, #20
   15718:	pop	{pc}		; (ldr pc, [sp], #4)
   1571c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15720:	mov	r4, r0
   15724:	strd	r6, [sp, #8]
   15728:	mov	r7, r1
   1572c:	mov	r6, #0
   15730:	str	r8, [sp, #16]
   15734:	str	lr, [sp, #20]
   15738:	sub	sp, sp, #16
   1573c:	bl	113f0 <__errno_location@plt>
   15740:	mov	r5, r0
   15744:	mov	r2, #10
   15748:	mov	r0, r4
   1574c:	add	r1, sp, #12
   15750:	str	r6, [r5]
   15754:	bl	111bc <strtol@plt>
   15758:	sub	r3, r0, #-2147483647	; 0x80000001
   1575c:	cmn	r3, #3
   15760:	bls	1577c <__assert_fail@plt+0x420c>
   15764:	ldr	r1, [r5]
   15768:	movw	r2, #61384	; 0xefc8
   1576c:	movt	r2, #1
   15770:	mov	r3, r4
   15774:	mov	r0, #1
   15778:	bl	11324 <error@plt>
   1577c:	ldr	r3, [sp, #12]
   15780:	ldrb	r8, [r3]
   15784:	cmp	r8, #0
   15788:	bne	157ac <__assert_fail@plt+0x423c>
   1578c:	cmp	r4, r3
   15790:	beq	15804 <__assert_fail@plt+0x4294>
   15794:	add	sp, sp, #16
   15798:	ldrd	r4, [sp]
   1579c:	ldrd	r6, [sp, #8]
   157a0:	ldr	r8, [sp, #16]
   157a4:	add	sp, sp, #20
   157a8:	pop	{pc}		; (ldr pc, [sp], #4)
   157ac:	mov	r2, #5
   157b0:	mov	r0, r6
   157b4:	ldr	r5, [r5]
   157b8:	movw	r1, #60932	; 0xee04
   157bc:	movt	r1, #1
   157c0:	bl	11258 <dcgettext@plt>
   157c4:	mov	r8, r0
   157c8:	mov	r1, r7
   157cc:	ldr	r2, [sp, #12]
   157d0:	mov	r0, r6
   157d4:	bl	19c1c <__assert_fail@plt+0x86ac>
   157d8:	mov	r6, r0
   157dc:	mov	r2, r4
   157e0:	mov	r1, r7
   157e4:	mov	r0, #1
   157e8:	bl	19c1c <__assert_fail@plt+0x86ac>
   157ec:	mov	r3, r6
   157f0:	mov	r2, r8
   157f4:	str	r0, [sp]
   157f8:	mov	r1, r5
   157fc:	mov	r0, #1
   15800:	bl	11324 <error@plt>
   15804:	ldr	r5, [r5]
   15808:	mov	r2, #5
   1580c:	movw	r1, #60960	; 0xee20
   15810:	movt	r1, #1
   15814:	mov	r0, r8
   15818:	bl	11258 <dcgettext@plt>
   1581c:	mov	r6, r0
   15820:	mov	r2, r4
   15824:	mov	r1, r7
   15828:	mov	r0, r8
   1582c:	bl	19c1c <__assert_fail@plt+0x86ac>
   15830:	mov	r3, r0
   15834:	mov	r2, r6
   15838:	mov	r1, r5
   1583c:	mov	r0, #1
   15840:	b	15778 <__assert_fail@plt+0x4208>
   15844:	mov	r2, #5
   15848:	strd	r4, [sp, #-12]!
   1584c:	mov	r5, r1
   15850:	mov	r4, r0
   15854:	movw	r1, #60984	; 0xee38
   15858:	movt	r1, #1
   1585c:	mov	r0, #0
   15860:	str	lr, [sp, #8]
   15864:	sub	sp, sp, #20
   15868:	bl	11258 <dcgettext@plt>
   1586c:	movw	r1, #61232	; 0xef30
   15870:	movt	r1, #1
   15874:	movw	r2, #61256	; 0xef48
   15878:	movt	r2, #1
   1587c:	movw	ip, #60900	; 0xede4
   15880:	movt	ip, #1
   15884:	mov	r3, r5
   15888:	str	ip, [sp]
   1588c:	str	r2, [sp, #4]
   15890:	movw	r2, #61192	; 0xef08
   15894:	movt	r2, #1
   15898:	str	r1, [sp, #8]
   1589c:	mov	r1, r0
   158a0:	mov	r0, r4
   158a4:	bl	113e4 <fprintf@plt>
   158a8:	add	sp, sp, #20
   158ac:	ldrd	r4, [sp]
   158b0:	add	sp, sp, #8
   158b4:	pop	{pc}		; (ldr pc, [sp], #4)
   158b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   158bc:	mov	r4, r1
   158c0:	mov	r5, r0
   158c4:	strd	r6, [sp, #8]
   158c8:	mov	r6, r2
   158cc:	str	r8, [sp, #16]
   158d0:	str	lr, [sp, #20]
   158d4:	bl	113f0 <__errno_location@plt>
   158d8:	cmp	r4, #0
   158dc:	ldr	r8, [r0]
   158e0:	beq	15a04 <__assert_fail@plt+0x4494>
   158e4:	ldr	r1, [r6]
   158e8:	mov	r7, r0
   158ec:	cmp	r1, #0
   158f0:	beq	15974 <__assert_fail@plt+0x4404>
   158f4:	cmp	r1, r4
   158f8:	bcs	159a0 <__assert_fail@plt+0x4430>
   158fc:	lsl	r2, r1, #1
   15900:	cmp	r1, r2
   15904:	bhi	159bc <__assert_fail@plt+0x444c>
   15908:	cmp	r4, r2
   1590c:	bls	159dc <__assert_fail@plt+0x446c>
   15910:	lsl	r3, r1, #2
   15914:	cmp	r3, r2
   15918:	bcs	15930 <__assert_fail@plt+0x43c0>
   1591c:	b	15994 <__assert_fail@plt+0x4424>
   15920:	lsl	ip, r3, #1
   15924:	cmp	ip, r3
   15928:	bcc	159b4 <__assert_fail@plt+0x4444>
   1592c:	mov	r3, ip
   15930:	cmp	r4, r3
   15934:	bhi	15920 <__assert_fail@plt+0x43b0>
   15938:	cmp	r1, #0
   1593c:	bne	15998 <__assert_fail@plt+0x4428>
   15940:	cmp	r5, #0
   15944:	bne	159e4 <__assert_fail@plt+0x4474>
   15948:	mov	r0, r3
   1594c:	str	r3, [r6]
   15950:	bl	1ca7c <__assert_fail@plt+0xb50c>
   15954:	cmp	r0, #0
   15958:	beq	159ac <__assert_fail@plt+0x443c>
   1595c:	str	r8, [r7]
   15960:	ldrd	r4, [sp]
   15964:	ldrd	r6, [sp, #8]
   15968:	ldr	r8, [sp, #16]
   1596c:	add	sp, sp, #20
   15970:	pop	{pc}		; (ldr pc, [sp], #4)
   15974:	cmp	r4, #16
   15978:	movls	r3, #16
   1597c:	bls	15940 <__assert_fail@plt+0x43d0>
   15980:	cmp	r4, #32
   15984:	movls	r3, #32
   15988:	bls	15940 <__assert_fail@plt+0x43d0>
   1598c:	mov	r3, #64	; 0x40
   15990:	b	15930 <__assert_fail@plt+0x43c0>
   15994:	mov	r3, r4
   15998:	cmp	r1, r3
   1599c:	bne	159c0 <__assert_fail@plt+0x4450>
   159a0:	mov	r0, r5
   159a4:	cmp	r0, #0
   159a8:	bne	1595c <__assert_fail@plt+0x43ec>
   159ac:	mov	r0, #0
   159b0:	b	15960 <__assert_fail@plt+0x43f0>
   159b4:	mov	r3, r4
   159b8:	b	15938 <__assert_fail@plt+0x43c8>
   159bc:	mov	r3, r4
   159c0:	mov	r0, r5
   159c4:	mov	r1, r3
   159c8:	str	r3, [r6]
   159cc:	bl	1cb28 <__assert_fail@plt+0xb5b8>
   159d0:	cmp	r0, #0
   159d4:	bne	1595c <__assert_fail@plt+0x43ec>
   159d8:	b	159ac <__assert_fail@plt+0x443c>
   159dc:	mov	r3, r2
   159e0:	b	15998 <__assert_fail@plt+0x4428>
   159e4:	movw	r3, #61304	; 0xef78
   159e8:	movt	r3, #1
   159ec:	movw	r1, #61316	; 0xef84
   159f0:	movt	r1, #1
   159f4:	movw	r0, #61340	; 0xef9c
   159f8:	movt	r0, #1
   159fc:	mov	r2, #79	; 0x4f
   15a00:	bl	11570 <__assert_fail@plt>
   15a04:	movw	r3, #61304	; 0xef78
   15a08:	movt	r3, #1
   15a0c:	movw	r1, #61316	; 0xef84
   15a10:	movt	r1, #1
   15a14:	movw	r0, #61328	; 0xef90
   15a18:	movt	r0, #1
   15a1c:	mov	r2, #71	; 0x47
   15a20:	bl	11570 <__assert_fail@plt>
   15a24:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15a28:	mov	r4, r1
   15a2c:	strd	r6, [sp, #8]
   15a30:	mov	r7, r0
   15a34:	mov	r6, r2
   15a38:	str	r8, [sp, #16]
   15a3c:	str	lr, [sp, #20]
   15a40:	bl	113f0 <__errno_location@plt>
   15a44:	cmp	r4, #0
   15a48:	ldr	r8, [r0]
   15a4c:	beq	15b4c <__assert_fail@plt+0x45dc>
   15a50:	ldr	r3, [r6]
   15a54:	mov	r5, r0
   15a58:	cmp	r3, #0
   15a5c:	beq	15ae0 <__assert_fail@plt+0x4570>
   15a60:	cmp	r4, r3
   15a64:	bls	15b0c <__assert_fail@plt+0x459c>
   15a68:	lsl	r2, r3, #1
   15a6c:	cmp	r3, r2
   15a70:	bhi	15b2c <__assert_fail@plt+0x45bc>
   15a74:	cmp	r4, r2
   15a78:	movls	r0, r2
   15a7c:	bls	15b04 <__assert_fail@plt+0x4594>
   15a80:	lsl	r0, r3, #2
   15a84:	cmp	r2, r0
   15a88:	bls	15aa0 <__assert_fail@plt+0x4530>
   15a8c:	b	15b00 <__assert_fail@plt+0x4590>
   15a90:	lsl	r1, r0, #1
   15a94:	cmp	r1, r0
   15a98:	bcc	15b24 <__assert_fail@plt+0x45b4>
   15a9c:	mov	r0, r1
   15aa0:	cmp	r4, r0
   15aa4:	bhi	15a90 <__assert_fail@plt+0x4520>
   15aa8:	cmp	r3, #0
   15aac:	bne	15b04 <__assert_fail@plt+0x4594>
   15ab0:	cmp	r7, #0
   15ab4:	bne	15b6c <__assert_fail@plt+0x45fc>
   15ab8:	str	r0, [r6]
   15abc:	bl	1ca7c <__assert_fail@plt+0xb50c>
   15ac0:	cmp	r0, #0
   15ac4:	beq	15b18 <__assert_fail@plt+0x45a8>
   15ac8:	ldrd	r6, [sp, #8]
   15acc:	str	r8, [r5]
   15ad0:	ldrd	r4, [sp]
   15ad4:	ldr	r8, [sp, #16]
   15ad8:	add	sp, sp, #20
   15adc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ae0:	cmp	r4, #16
   15ae4:	movls	r0, #16
   15ae8:	bls	15ab0 <__assert_fail@plt+0x4540>
   15aec:	cmp	r4, #32
   15af0:	movls	r0, #32
   15af4:	bls	15ab0 <__assert_fail@plt+0x4540>
   15af8:	mov	r0, #64	; 0x40
   15afc:	b	15aa0 <__assert_fail@plt+0x4530>
   15b00:	mov	r0, r4
   15b04:	cmp	r3, r0
   15b08:	bne	15b30 <__assert_fail@plt+0x45c0>
   15b0c:	mov	r0, r7
   15b10:	cmp	r0, #0
   15b14:	bne	15ac8 <__assert_fail@plt+0x4558>
   15b18:	mov	r0, r7
   15b1c:	bl	1c94c <__assert_fail@plt+0xb3dc>
   15b20:	bl	1c008 <__assert_fail@plt+0xaa98>
   15b24:	mov	r0, r4
   15b28:	b	15aa8 <__assert_fail@plt+0x4538>
   15b2c:	mov	r0, r4
   15b30:	mov	r1, r0
   15b34:	str	r0, [r6]
   15b38:	mov	r0, r7
   15b3c:	bl	1cb28 <__assert_fail@plt+0xb5b8>
   15b40:	cmp	r0, #0
   15b44:	bne	15ac8 <__assert_fail@plt+0x4558>
   15b48:	b	15b18 <__assert_fail@plt+0x45a8>
   15b4c:	movw	r3, #61304	; 0xef78
   15b50:	movt	r3, #1
   15b54:	movw	r1, #61316	; 0xef84
   15b58:	movt	r1, #1
   15b5c:	movw	r0, #61328	; 0xef90
   15b60:	movt	r0, #1
   15b64:	mov	r2, #71	; 0x47
   15b68:	bl	11570 <__assert_fail@plt>
   15b6c:	movw	r3, #61304	; 0xef78
   15b70:	movt	r3, #1
   15b74:	movw	r1, #61316	; 0xef84
   15b78:	movt	r1, #1
   15b7c:	movw	r0, #61340	; 0xef9c
   15b80:	movt	r0, #1
   15b84:	mov	r2, #79	; 0x4f
   15b88:	bl	11570 <__assert_fail@plt>
   15b8c:	mov	r2, #0
   15b90:	strd	r4, [sp, #-16]!
   15b94:	mov	r4, r1
   15b98:	mov	r1, #1
   15b9c:	mov	r5, r0
   15ba0:	str	r6, [sp, #8]
   15ba4:	str	lr, [sp, #12]
   15ba8:	bl	1c6c4 <__assert_fail@plt+0xb154>
   15bac:	cmp	r0, #0
   15bb0:	blt	15bf8 <__assert_fail@plt+0x4688>
   15bb4:	cmp	r4, #0
   15bb8:	biceq	r2, r0, #1
   15bbc:	orrne	r2, r0, #1
   15bc0:	cmp	r2, r0
   15bc4:	moveq	r0, #0
   15bc8:	beq	15be8 <__assert_fail@plt+0x4678>
   15bcc:	mov	r0, r5
   15bd0:	mov	r1, #2
   15bd4:	bl	1c6c4 <__assert_fail@plt+0xb154>
   15bd8:	cmn	r0, #1
   15bdc:	movne	r0, #0
   15be0:	moveq	r0, #1
   15be4:	rsb	r0, r0, #0
   15be8:	ldrd	r4, [sp]
   15bec:	ldr	r6, [sp, #8]
   15bf0:	add	sp, sp, #12
   15bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   15bf8:	mvn	r0, #0
   15bfc:	b	15be8 <__assert_fail@plt+0x4678>
   15c00:	mov	r2, #0
   15c04:	movw	r1, #1030	; 0x406
   15c08:	b	1c6c4 <__assert_fail@plt+0xb154>
   15c0c:	movw	r3, #680	; 0x2a8
   15c10:	movt	r3, #3
   15c14:	str	r0, [r3]
   15c18:	bx	lr
   15c1c:	strd	r4, [sp, #-16]!
   15c20:	movw	r4, #472	; 0x1d8
   15c24:	movt	r4, #3
   15c28:	ldr	r5, [r4]
   15c2c:	str	r6, [sp, #8]
   15c30:	str	lr, [sp, #12]
   15c34:	sub	sp, sp, #8
   15c38:	mov	r0, r5
   15c3c:	bl	1c90c <__assert_fail@plt+0xb39c>
   15c40:	cmp	r0, #0
   15c44:	bne	15cf4 <__assert_fail@plt+0x4784>
   15c48:	mov	r0, r5
   15c4c:	bl	1cbb8 <__assert_fail@plt+0xb648>
   15c50:	cmp	r0, #0
   15c54:	bne	15c84 <__assert_fail@plt+0x4714>
   15c58:	add	sp, sp, #8
   15c5c:	ldrd	r4, [sp]
   15c60:	ldr	r6, [sp, #8]
   15c64:	ldr	lr, [sp, #12]
   15c68:	add	sp, sp, #16
   15c6c:	b	15d64 <__assert_fail@plt+0x47f4>
   15c70:	bl	1c8ac <__assert_fail@plt+0xb33c>
   15c74:	cmp	r0, #0
   15c78:	ldr	r0, [r4]
   15c7c:	beq	15d18 <__assert_fail@plt+0x47a8>
   15c80:	bl	1cbb8 <__assert_fail@plt+0xb648>
   15c84:	mov	r2, #5
   15c88:	movw	r1, #61360	; 0xefb0
   15c8c:	movt	r1, #1
   15c90:	mov	r0, #0
   15c94:	bl	11258 <dcgettext@plt>
   15c98:	movw	r3, #680	; 0x2a8
   15c9c:	movt	r3, #3
   15ca0:	ldr	r4, [r3]
   15ca4:	mov	r5, r0
   15ca8:	bl	113f0 <__errno_location@plt>
   15cac:	mov	r2, r0
   15cb0:	cmp	r4, #0
   15cb4:	beq	15d28 <__assert_fail@plt+0x47b8>
   15cb8:	ldr	r6, [r2]
   15cbc:	mov	r0, r4
   15cc0:	bl	1a4a8 <__assert_fail@plt+0x8f38>
   15cc4:	mov	r3, r0
   15cc8:	movw	r2, #61380	; 0xefc4
   15ccc:	movt	r2, #1
   15cd0:	mov	r0, #0
   15cd4:	str	r5, [sp]
   15cd8:	mov	r1, r6
   15cdc:	bl	11324 <error@plt>
   15ce0:	bl	15d64 <__assert_fail@plt+0x47f4>
   15ce4:	movw	r3, #368	; 0x170
   15ce8:	movt	r3, #3
   15cec:	ldr	r0, [r3]
   15cf0:	bl	11210 <_exit@plt>
   15cf4:	mov	r1, #1
   15cf8:	mov	r0, r5
   15cfc:	mov	r2, #0
   15d00:	mov	r3, #0
   15d04:	str	r1, [sp]
   15d08:	bl	1c9ac <__assert_fail@plt+0xb43c>
   15d0c:	cmp	r0, #0
   15d10:	ldr	r0, [r4]
   15d14:	beq	15c70 <__assert_fail@plt+0x4700>
   15d18:	bl	1cbb8 <__assert_fail@plt+0xb648>
   15d1c:	cmp	r0, #0
   15d20:	beq	15c58 <__assert_fail@plt+0x46e8>
   15d24:	b	15c84 <__assert_fail@plt+0x4714>
   15d28:	mov	r3, r5
   15d2c:	mov	r0, r4
   15d30:	ldr	r1, [r2]
   15d34:	movw	r2, #61384	; 0xefc8
   15d38:	movt	r2, #1
   15d3c:	bl	11324 <error@plt>
   15d40:	b	15ce0 <__assert_fail@plt+0x4770>
   15d44:	movw	r3, #684	; 0x2ac
   15d48:	movt	r3, #3
   15d4c:	str	r0, [r3]
   15d50:	bx	lr
   15d54:	movw	r3, #684	; 0x2ac
   15d58:	movt	r3, #3
   15d5c:	strb	r0, [r3, #4]
   15d60:	bx	lr
   15d64:	movw	r3, #476	; 0x1dc
   15d68:	movt	r3, #3
   15d6c:	strd	r4, [sp, #-16]!
   15d70:	ldr	r0, [r3]
   15d74:	str	r6, [sp, #8]
   15d78:	str	lr, [sp, #12]
   15d7c:	sub	sp, sp, #8
   15d80:	bl	1cbb8 <__assert_fail@plt+0xb648>
   15d84:	cmp	r0, #0
   15d88:	beq	15db4 <__assert_fail@plt+0x4844>
   15d8c:	movw	r4, #684	; 0x2ac
   15d90:	movt	r4, #3
   15d94:	ldrb	r6, [r4, #4]
   15d98:	bl	113f0 <__errno_location@plt>
   15d9c:	mov	r5, r0
   15da0:	cmp	r6, #0
   15da4:	beq	15de0 <__assert_fail@plt+0x4870>
   15da8:	ldr	r3, [r0]
   15dac:	cmp	r3, #32
   15db0:	bne	15de0 <__assert_fail@plt+0x4870>
   15db4:	movw	r3, #464	; 0x1d0
   15db8:	movt	r3, #3
   15dbc:	ldr	r0, [r3]
   15dc0:	bl	1cbb8 <__assert_fail@plt+0xb648>
   15dc4:	cmp	r0, #0
   15dc8:	bne	15e28 <__assert_fail@plt+0x48b8>
   15dcc:	add	sp, sp, #8
   15dd0:	ldrd	r4, [sp]
   15dd4:	ldr	r6, [sp, #8]
   15dd8:	add	sp, sp, #12
   15ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   15de0:	movw	r1, #61388	; 0xefcc
   15de4:	movt	r1, #1
   15de8:	mov	r2, #5
   15dec:	mov	r0, #0
   15df0:	bl	11258 <dcgettext@plt>
   15df4:	mov	r6, r0
   15df8:	ldr	r0, [r4]
   15dfc:	cmp	r0, #0
   15e00:	beq	15e38 <__assert_fail@plt+0x48c8>
   15e04:	ldr	r4, [r5]
   15e08:	bl	1a4a8 <__assert_fail@plt+0x8f38>
   15e0c:	mov	r3, r0
   15e10:	movw	r2, #61380	; 0xefc4
   15e14:	movt	r2, #1
   15e18:	mov	r0, #0
   15e1c:	str	r6, [sp]
   15e20:	mov	r1, r4
   15e24:	bl	11324 <error@plt>
   15e28:	movw	r3, #368	; 0x170
   15e2c:	movt	r3, #3
   15e30:	ldr	r0, [r3]
   15e34:	bl	11210 <_exit@plt>
   15e38:	mov	r3, r6
   15e3c:	movw	r2, #61384	; 0xefc8
   15e40:	movt	r2, #1
   15e44:	ldr	r1, [r5]
   15e48:	bl	11324 <error@plt>
   15e4c:	b	15e28 <__assert_fail@plt+0x48b8>
   15e50:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15e54:	strd	r6, [sp, #8]
   15e58:	str	r8, [sp, #16]
   15e5c:	str	lr, [sp, #20]
   15e60:	bl	11330 <opendir@plt>
   15e64:	subs	r4, r0, #0
   15e68:	beq	15e78 <__assert_fail@plt+0x4908>
   15e6c:	bl	114f8 <dirfd@plt>
   15e70:	cmp	r0, #2
   15e74:	bls	15e90 <__assert_fail@plt+0x4920>
   15e78:	mov	r0, r4
   15e7c:	ldrd	r4, [sp]
   15e80:	ldrd	r6, [sp, #8]
   15e84:	ldr	r8, [sp, #16]
   15e88:	add	sp, sp, #20
   15e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e90:	mov	r2, #3
   15e94:	movw	r1, #1030	; 0x406
   15e98:	bl	1c6c4 <__assert_fail@plt+0xb154>
   15e9c:	mov	r6, r0
   15ea0:	bl	113f0 <__errno_location@plt>
   15ea4:	cmp	r6, #0
   15ea8:	mov	r5, r0
   15eac:	bge	15ecc <__assert_fail@plt+0x495c>
   15eb0:	ldr	r7, [r0]
   15eb4:	mov	r8, #0
   15eb8:	mov	r0, r4
   15ebc:	mov	r4, r8
   15ec0:	bl	11564 <closedir@plt>
   15ec4:	str	r7, [r5]
   15ec8:	b	15e78 <__assert_fail@plt+0x4908>
   15ecc:	mov	r0, r6
   15ed0:	bl	114e0 <fdopendir@plt>
   15ed4:	subs	r8, r0, #0
   15ed8:	ldr	r7, [r5]
   15edc:	bne	15eb8 <__assert_fail@plt+0x4948>
   15ee0:	mov	r0, r6
   15ee4:	bl	11558 <close@plt>
   15ee8:	b	15eb8 <__assert_fail@plt+0x4948>
   15eec:	push	{r1, r2, r3}
   15ef0:	push	{lr}		; (str lr, [sp, #-4]!)
   15ef4:	sub	sp, sp, #8
   15ef8:	ldr	r1, [sp, #12]
   15efc:	ands	r2, r1, #64	; 0x40
   15f00:	bne	15f1c <__assert_fail@plt+0x49ac>
   15f04:	bl	1133c <open64@plt>
   15f08:	bl	1b27c <__assert_fail@plt+0x9d0c>
   15f0c:	add	sp, sp, #8
   15f10:	pop	{lr}		; (ldr lr, [sp], #4)
   15f14:	add	sp, sp, #12
   15f18:	bx	lr
   15f1c:	add	r3, sp, #16
   15f20:	ldr	r2, [sp, #16]
   15f24:	str	r3, [sp, #4]
   15f28:	b	15f04 <__assert_fail@plt+0x4994>
   15f2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15f30:	mov	r5, r0
   15f34:	strd	r6, [sp, #8]
   15f38:	mov	r6, r2
   15f3c:	lsrs	r2, r6, #30
   15f40:	str	fp, [sp, #16]
   15f44:	add	fp, sp, #20
   15f48:	movne	r2, #1
   15f4c:	moveq	r2, #0
   15f50:	lsls	r0, r6, #2
   15f54:	str	lr, [sp, #20]
   15f58:	bmi	16080 <__assert_fail@plt+0x4b10>
   15f5c:	cmp	r2, #0
   15f60:	bne	16080 <__assert_fail@plt+0x4b10>
   15f64:	cmp	r0, #4016	; 0xfb0
   15f68:	mov	r4, r1
   15f6c:	mov	r7, r3
   15f70:	bhi	16074 <__assert_fail@plt+0x4b04>
   15f74:	add	r3, r0, #22
   15f78:	bic	r3, r3, #7
   15f7c:	sub	sp, sp, r3
   15f80:	add	r0, sp, #15
   15f84:	bic	r0, r0, #15
   15f88:	cmp	r0, #0
   15f8c:	beq	16080 <__assert_fail@plt+0x4b10>
   15f90:	mov	r3, #1
   15f94:	cmp	r6, #2
   15f98:	movhi	r2, r4
   15f9c:	movhi	ip, #0
   15fa0:	str	r3, [r0, #4]
   15fa4:	movhi	r3, #2
   15fa8:	bls	15ff0 <__assert_fail@plt+0x4a80>
   15fac:	ldrb	r1, [r2, #1]!
   15fb0:	ldrb	lr, [r4, ip]
   15fb4:	cmp	lr, r1
   15fb8:	bne	15fd4 <__assert_fail@plt+0x4a64>
   15fbc:	b	16098 <__assert_fail@plt+0x4b28>
   15fc0:	ldr	lr, [r0, ip, lsl #2]
   15fc4:	sub	ip, ip, lr
   15fc8:	ldrb	lr, [r4, ip]
   15fcc:	cmp	lr, r1
   15fd0:	beq	16098 <__assert_fail@plt+0x4b28>
   15fd4:	cmp	ip, #0
   15fd8:	bne	15fc0 <__assert_fail@plt+0x4a50>
   15fdc:	mov	ip, #0
   15fe0:	str	r3, [r0, r3, lsl #2]
   15fe4:	add	r3, r3, #1
   15fe8:	cmp	r6, r3
   15fec:	bne	15fac <__assert_fail@plt+0x4a3c>
   15ff0:	mov	r2, #0
   15ff4:	str	r2, [r7]
   15ff8:	ldrb	r3, [r5]
   15ffc:	cmp	r3, r2
   16000:	movne	r1, r5
   16004:	beq	16054 <__assert_fail@plt+0x4ae4>
   16008:	ldrb	ip, [r4, r2]
   1600c:	cmp	ip, r3
   16010:	beq	16034 <__assert_fail@plt+0x4ac4>
   16014:	cmp	r2, #0
   16018:	beq	16088 <__assert_fail@plt+0x4b18>
   1601c:	ldr	ip, [r0, r2, lsl #2]
   16020:	sub	r2, r2, ip
   16024:	add	r5, r5, ip
   16028:	ldrb	ip, [r4, r2]
   1602c:	cmp	ip, r3
   16030:	bne	16014 <__assert_fail@plt+0x4aa4>
   16034:	add	r2, r2, #1
   16038:	add	ip, r1, #1
   1603c:	cmp	r6, r2
   16040:	beq	160a8 <__assert_fail@plt+0x4b38>
   16044:	ldrb	r3, [r1, #1]
   16048:	mov	r1, ip
   1604c:	cmp	r3, #0
   16050:	bne	16008 <__assert_fail@plt+0x4a98>
   16054:	bl	1cd40 <__assert_fail@plt+0xb7d0>
   16058:	mov	r0, #1
   1605c:	sub	sp, fp, #20
   16060:	ldrd	r4, [sp]
   16064:	ldrd	r6, [sp, #8]
   16068:	ldr	fp, [sp, #16]
   1606c:	add	sp, sp, #20
   16070:	pop	{pc}		; (ldr pc, [sp], #4)
   16074:	bl	1cce8 <__assert_fail@plt+0xb778>
   16078:	cmp	r0, #0
   1607c:	bne	15f90 <__assert_fail@plt+0x4a20>
   16080:	mov	r0, #0
   16084:	b	1605c <__assert_fail@plt+0x4aec>
   16088:	ldrb	r3, [r1, #1]
   1608c:	add	r5, r5, #1
   16090:	add	r1, r1, #1
   16094:	b	1604c <__assert_fail@plt+0x4adc>
   16098:	add	ip, ip, #1
   1609c:	sub	r1, r3, ip
   160a0:	str	r1, [r0, r3, lsl #2]
   160a4:	b	15fe4 <__assert_fail@plt+0x4a74>
   160a8:	str	r5, [r7]
   160ac:	b	16054 <__assert_fail@plt+0x4ae4>
   160b0:	movw	r3, #61400	; 0xefd8
   160b4:	movt	r3, #1
   160b8:	str	r4, [sp, #-8]!
   160bc:	movw	r1, #61420	; 0xefec
   160c0:	movt	r1, #1
   160c4:	str	lr, [sp, #4]
   160c8:	movw	r0, #61432	; 0xeff8
   160cc:	movt	r0, #1
   160d0:	mov	r2, #172	; 0xac
   160d4:	bl	11570 <__assert_fail@plt>
   160d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   160dc:	mov	r4, r1
   160e0:	strd	r6, [sp, #8]
   160e4:	strd	r8, [sp, #16]
   160e8:	strd	sl, [sp, #24]
   160ec:	add	fp, sp, #32
   160f0:	str	lr, [sp, #32]
   160f4:	sub	sp, sp, #188	; 0xbc
   160f8:	str	r2, [fp, #-216]	; 0xffffff28
   160fc:	str	r0, [fp, #-212]	; 0xffffff2c
   16100:	mov	r0, r1
   16104:	bl	1ce28 <__assert_fail@plt+0xb8b8>
   16108:	mov	r3, #44	; 0x2c
   1610c:	str	r0, [fp, #-208]	; 0xffffff30
   16110:	umull	r0, r1, r0, r3
   16114:	adds	r2, r1, #0
   16118:	movne	r2, #1
   1611c:	cmp	r0, #0
   16120:	blt	164ec <__assert_fail@plt+0x4f7c>
   16124:	cmp	r2, #0
   16128:	bne	164ec <__assert_fail@plt+0x4f7c>
   1612c:	ldr	r2, [fp, #-208]	; 0xffffff30
   16130:	mul	r0, r3, r2
   16134:	cmp	r0, #4016	; 0xfb0
   16138:	bhi	1650c <__assert_fail@plt+0x4f9c>
   1613c:	add	r3, r0, #22
   16140:	bic	r3, r3, #7
   16144:	sub	sp, sp, r3
   16148:	add	r3, sp, #15
   1614c:	bic	sl, r3, #15
   16150:	cmp	sl, #0
   16154:	beq	164ec <__assert_fail@plt+0x4f7c>
   16158:	ldr	r3, [fp, #-208]	; 0xffffff30
   1615c:	mov	r0, #0
   16160:	mov	r1, #0
   16164:	movw	r8, #62656	; 0xf4c0
   16168:	movt	r8, #1
   1616c:	add	r5, sl, #16
   16170:	strd	r0, [fp, #-200]	; 0xffffff38
   16174:	str	r4, [fp, #-188]	; 0xffffff44
   16178:	add	r9, r3, r3, lsl #2
   1617c:	mov	r3, #0
   16180:	mov	r6, r3
   16184:	add	r9, sl, r9, lsl #3
   16188:	str	r9, [fp, #-220]	; 0xffffff24
   1618c:	strb	r3, [fp, #-204]	; 0xffffff34
   16190:	strb	r3, [fp, #-192]	; 0xffffff40
   16194:	b	16218 <__assert_fail@plt+0x4ca8>
   16198:	ldrb	r3, [r4]
   1619c:	lsr	r2, r3, #5
   161a0:	and	r3, r3, #31
   161a4:	ldr	r2, [r8, r2, lsl #2]
   161a8:	lsr	r3, r2, r3
   161ac:	tst	r3, #1
   161b0:	beq	16518 <__assert_fail@plt+0x4fa8>
   161b4:	mov	r3, #1
   161b8:	str	r3, [fp, #-184]	; 0xffffff48
   161bc:	ldrb	r2, [r4]
   161c0:	strb	r3, [fp, #-192]	; 0xffffff40
   161c4:	strb	r3, [fp, #-180]	; 0xffffff4c
   161c8:	mov	r4, r2
   161cc:	str	r2, [fp, #-176]	; 0xffffff50
   161d0:	cmp	r4, #0
   161d4:	beq	16290 <__assert_fail@plt+0x4d20>
   161d8:	mov	r9, #1
   161dc:	ldr	r4, [fp, #-188]	; 0xffffff44
   161e0:	sub	r2, fp, #172	; 0xac
   161e4:	ldr	r7, [fp, #-184]	; 0xffffff48
   161e8:	cmp	r4, r2
   161ec:	strne	r4, [r5, #-16]
   161f0:	beq	16538 <__assert_fail@plt+0x4fc8>
   161f4:	cmp	r9, #0
   161f8:	add	r4, r4, r7
   161fc:	str	r7, [r5, #-12]
   16200:	ldrne	r3, [fp, #-176]	; 0xffffff50
   16204:	add	r5, r5, #40	; 0x28
   16208:	strb	r9, [r5, #-48]	; 0xffffffd0
   1620c:	strb	r6, [fp, #-192]	; 0xffffff40
   16210:	str	r4, [fp, #-188]	; 0xffffff44
   16214:	strne	r3, [r5, #-44]	; 0xffffffd4
   16218:	ldrb	r3, [fp, #-204]	; 0xffffff34
   1621c:	cmp	r3, #0
   16220:	subne	r7, fp, #200	; 0xc8
   16224:	beq	16198 <__assert_fail@plt+0x4c28>
   16228:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   1622c:	mov	r1, r0
   16230:	mov	r0, r4
   16234:	bl	1b23c <__assert_fail@plt+0x9ccc>
   16238:	mov	r2, r0
   1623c:	mov	r3, r7
   16240:	mov	r1, r4
   16244:	sub	r0, fp, #176	; 0xb0
   16248:	bl	1cab8 <__assert_fail@plt+0xb548>
   1624c:	cmn	r0, #1
   16250:	str	r0, [fp, #-184]	; 0xffffff48
   16254:	beq	16550 <__assert_fail@plt+0x4fe0>
   16258:	cmn	r0, #2
   1625c:	beq	16568 <__assert_fail@plt+0x4ff8>
   16260:	cmp	r0, #0
   16264:	beq	16588 <__assert_fail@plt+0x5018>
   16268:	ldr	r4, [fp, #-176]	; 0xffffff50
   1626c:	mov	r9, #1
   16270:	mov	r0, r7
   16274:	strb	r9, [fp, #-180]	; 0xffffff4c
   16278:	bl	11234 <mbsinit@plt>
   1627c:	cmp	r0, #0
   16280:	strb	r9, [fp, #-192]	; 0xffffff40
   16284:	strbne	r6, [fp, #-204]	; 0xffffff34
   16288:	cmp	r4, #0
   1628c:	bne	161d8 <__assert_fail@plt+0x4c68>
   16290:	ldr	r9, [fp, #-220]	; 0xffffff24
   16294:	mov	r3, #1
   16298:	mov	r7, r4
   1629c:	ldr	r2, [fp, #-208]	; 0xffffff30
   162a0:	str	r3, [r9, #4]
   162a4:	cmp	r2, #2
   162a8:	bls	16330 <__assert_fail@plt+0x4dc0>
   162ac:	mov	r6, r2
   162b0:	mov	r5, sl
   162b4:	str	r4, [fp, #-220]	; 0xffffff24
   162b8:	mov	r8, #2
   162bc:	ldrb	r3, [r5, #48]	; 0x30
   162c0:	cmp	r3, #0
   162c4:	bne	165d0 <__assert_fail@plt+0x5060>
   162c8:	ldr	r7, [r5, #44]	; 0x2c
   162cc:	b	162e0 <__assert_fail@plt+0x4d70>
   162d0:	cmp	r4, #0
   162d4:	beq	16314 <__assert_fail@plt+0x4da4>
   162d8:	ldr	r3, [r9, r4, lsl #2]
   162dc:	sub	r4, r4, r3
   162e0:	add	r3, r4, r4, lsl #2
   162e4:	add	r2, sl, r3, lsl #3
   162e8:	ldr	r2, [r2, #4]
   162ec:	cmp	r7, r2
   162f0:	bne	162d0 <__assert_fail@plt+0x4d60>
   162f4:	mov	r2, r7
   162f8:	ldr	r1, [sl, r3, lsl #3]
   162fc:	ldr	r0, [r5, #40]	; 0x28
   16300:	bl	1124c <memcmp@plt>
   16304:	cmp	r0, #0
   16308:	beq	16608 <__assert_fail@plt+0x5098>
   1630c:	cmp	r4, #0
   16310:	bne	162d8 <__assert_fail@plt+0x4d68>
   16314:	str	r8, [r9, r8, lsl #2]
   16318:	add	r8, r8, #1
   1631c:	mov	r4, #0
   16320:	cmp	r6, r8
   16324:	add	r5, r5, #40	; 0x28
   16328:	bne	162bc <__assert_fail@plt+0x4d4c>
   1632c:	ldr	r7, [fp, #-220]	; 0xffffff24
   16330:	mov	r1, #0
   16334:	mov	r0, #0
   16338:	ldr	r3, [fp, #-212]	; 0xffffff2c
   1633c:	mov	r2, #0
   16340:	movw	ip, #62656	; 0xf4c0
   16344:	movt	ip, #1
   16348:	mov	r6, #1
   1634c:	str	r9, [fp, #-212]	; 0xffffff2c
   16350:	strd	r0, [fp, #-144]	; 0xffffff70
   16354:	mov	r9, ip
   16358:	strd	r0, [fp, #-88]	; 0xffffffa8
   1635c:	ldr	r1, [fp, #-216]	; 0xffffff28
   16360:	strb	r2, [fp, #-148]	; 0xffffff6c
   16364:	str	r3, [fp, #-132]	; 0xffffff7c
   16368:	str	r3, [fp, #-76]	; 0xffffffb4
   1636c:	mov	r3, r2
   16370:	strb	r2, [fp, #-136]	; 0xffffff78
   16374:	strb	r2, [fp, #-92]	; 0xffffffa4
   16378:	strb	r2, [fp, #-80]	; 0xffffffb0
   1637c:	str	r2, [r1]
   16380:	cmp	r3, #0
   16384:	ldreq	r5, [fp, #-76]	; 0xffffffb4
   16388:	beq	1643c <__assert_fail@plt+0x4ecc>
   1638c:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   16390:	cmp	r3, #0
   16394:	bne	16940 <__assert_fail@plt+0x53d0>
   16398:	add	r3, r7, r7, lsl #2
   1639c:	add	r3, sl, r3, lsl #3
   163a0:	ldr	r4, [fp, #-72]	; 0xffffffb8
   163a4:	ldr	r2, [r3, #4]
   163a8:	cmp	r2, r4
   163ac:	beq	166a4 <__assert_fail@plt+0x5134>
   163b0:	cmp	r7, #0
   163b4:	bne	166c8 <__assert_fail@plt+0x5158>
   163b8:	ldrb	r3, [fp, #-136]	; 0xffffff78
   163bc:	cmp	r3, #0
   163c0:	bne	1692c <__assert_fail@plt+0x53bc>
   163c4:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   163c8:	ldr	r4, [fp, #-132]	; 0xffffff7c
   163cc:	cmp	r3, #0
   163d0:	subne	r8, fp, #144	; 0x90
   163d4:	bne	16888 <__assert_fail@plt+0x5318>
   163d8:	ldrb	r3, [r4]
   163dc:	lsr	r2, r3, #5
   163e0:	and	r3, r3, #31
   163e4:	ldr	r2, [r9, r2, lsl #2]
   163e8:	lsr	r3, r2, r3
   163ec:	tst	r3, #1
   163f0:	beq	16870 <__assert_fail@plt+0x5300>
   163f4:	str	r6, [fp, #-128]	; 0xffffff80
   163f8:	ldrb	r4, [r4]
   163fc:	strb	r6, [fp, #-136]	; 0xffffff78
   16400:	strb	r6, [fp, #-124]	; 0xffffff84
   16404:	str	r4, [fp, #-120]	; 0xffffff88
   16408:	cmp	r4, #0
   1640c:	beq	16764 <__assert_fail@plt+0x51f4>
   16410:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16414:	mov	r3, #0
   16418:	ldr	r2, [fp, #-128]	; 0xffffff80
   1641c:	strb	r3, [fp, #-136]	; 0xffffff78
   16420:	strb	r3, [fp, #-80]	; 0xffffffb0
   16424:	ldr	r5, [fp, #-76]	; 0xffffffb4
   16428:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1642c:	add	r4, r4, r2
   16430:	str	r4, [fp, #-132]	; 0xffffff7c
   16434:	add	r5, r5, r3
   16438:	str	r5, [fp, #-76]	; 0xffffffb4
   1643c:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   16440:	cmp	r3, #0
   16444:	subne	r4, fp, #88	; 0x58
   16448:	bne	16640 <__assert_fail@plt+0x50d0>
   1644c:	ldrb	r3, [r5]
   16450:	lsr	r2, r3, #5
   16454:	and	r3, r3, #31
   16458:	ldr	r2, [r9, r2, lsl #2]
   1645c:	lsr	r3, r2, r3
   16460:	tst	r3, #1
   16464:	beq	16628 <__assert_fail@plt+0x50b8>
   16468:	str	r6, [fp, #-72]	; 0xffffffb8
   1646c:	ldrb	r3, [r5]
   16470:	strb	r6, [fp, #-80]	; 0xffffffb0
   16474:	strb	r6, [fp, #-68]	; 0xffffffbc
   16478:	mov	r5, r3
   1647c:	str	r3, [fp, #-64]	; 0xffffffc0
   16480:	cmp	r5, #0
   16484:	beq	164dc <__assert_fail@plt+0x4f6c>
   16488:	add	r3, r7, r7, lsl #2
   1648c:	add	r3, sl, r3, lsl #3
   16490:	ldrb	r2, [r3, #8]
   16494:	cmp	r2, #0
   16498:	beq	163a0 <__assert_fail@plt+0x4e30>
   1649c:	ldr	r3, [r3, #12]
   164a0:	cmp	r3, r5
   164a4:	bne	163b0 <__assert_fail@plt+0x4e40>
   164a8:	ldr	r5, [fp, #-76]	; 0xffffffb4
   164ac:	ldr	r4, [fp, #-72]	; 0xffffffb8
   164b0:	add	r7, r7, #1
   164b4:	add	r5, r5, r4
   164b8:	ldr	r2, [fp, #-208]	; 0xffffff30
   164bc:	mov	r3, #0
   164c0:	strb	r3, [fp, #-80]	; 0xffffffb0
   164c4:	str	r5, [fp, #-76]	; 0xffffffb4
   164c8:	cmp	r2, r7
   164cc:	bne	1643c <__assert_fail@plt+0x4ecc>
   164d0:	ldr	r2, [fp, #-216]	; 0xffffff28
   164d4:	ldr	r3, [fp, #-132]	; 0xffffff7c
   164d8:	str	r3, [r2]
   164dc:	mov	r0, sl
   164e0:	bl	1cd40 <__assert_fail@plt+0xb7d0>
   164e4:	mov	r0, #1
   164e8:	b	164f0 <__assert_fail@plt+0x4f80>
   164ec:	mov	r0, #0
   164f0:	sub	sp, fp, #32
   164f4:	ldrd	r4, [sp]
   164f8:	ldrd	r6, [sp, #8]
   164fc:	ldrd	r8, [sp, #16]
   16500:	ldrd	sl, [sp, #24]
   16504:	add	sp, sp, #32
   16508:	pop	{pc}		; (ldr pc, [sp], #4)
   1650c:	bl	1cce8 <__assert_fail@plt+0xb778>
   16510:	mov	sl, r0
   16514:	b	16150 <__assert_fail@plt+0x4be0>
   16518:	sub	r7, fp, #200	; 0xc8
   1651c:	mov	r0, r7
   16520:	bl	11234 <mbsinit@plt>
   16524:	cmp	r0, #0
   16528:	beq	169a4 <__assert_fail@plt+0x5434>
   1652c:	mov	r3, #1
   16530:	strb	r3, [fp, #-204]	; 0xffffff34
   16534:	b	16228 <__assert_fail@plt+0x4cb8>
   16538:	mov	r2, r7
   1653c:	mov	r1, r4
   16540:	mov	r0, r5
   16544:	bl	1121c <memcpy@plt>
   16548:	str	r5, [r5, #-16]
   1654c:	b	161f4 <__assert_fail@plt+0x4c84>
   16550:	mov	r2, #1
   16554:	mov	r9, #0
   16558:	strb	r2, [fp, #-192]	; 0xffffff40
   1655c:	str	r2, [fp, #-184]	; 0xffffff48
   16560:	strb	r6, [fp, #-180]	; 0xffffff4c
   16564:	b	161dc <__assert_fail@plt+0x4c6c>
   16568:	ldr	r0, [fp, #-188]	; 0xffffff44
   1656c:	mov	r9, #0
   16570:	bl	113c0 <strlen@plt>
   16574:	mov	r2, #1
   16578:	strb	r2, [fp, #-192]	; 0xffffff40
   1657c:	str	r0, [fp, #-184]	; 0xffffff48
   16580:	strb	r6, [fp, #-180]	; 0xffffff4c
   16584:	b	161dc <__assert_fail@plt+0x4c6c>
   16588:	ldr	r3, [fp, #-188]	; 0xffffff44
   1658c:	mov	r2, #1
   16590:	str	r2, [fp, #-184]	; 0xffffff48
   16594:	ldrb	r3, [r3]
   16598:	cmp	r3, #0
   1659c:	bne	169c4 <__assert_fail@plt+0x5454>
   165a0:	ldr	r4, [fp, #-176]	; 0xffffff50
   165a4:	cmp	r4, #0
   165a8:	beq	1626c <__assert_fail@plt+0x4cfc>
   165ac:	bl	160b0 <__assert_fail@plt+0x4b40>
   165b0:	ldr	r3, [r3, #12]
   165b4:	ldr	r2, [r5, #52]	; 0x34
   165b8:	cmp	r2, r3
   165bc:	beq	16608 <__assert_fail@plt+0x5098>
   165c0:	cmp	r4, #0
   165c4:	beq	16314 <__assert_fail@plt+0x4da4>
   165c8:	ldr	r3, [r9, r4, lsl #2]
   165cc:	sub	r4, r4, r3
   165d0:	add	r3, r4, r4, lsl #2
   165d4:	add	r3, sl, r3, lsl #3
   165d8:	ldrb	r2, [r3, #8]
   165dc:	cmp	r2, #0
   165e0:	bne	165b0 <__assert_fail@plt+0x5040>
   165e4:	ldr	r1, [r3, #4]
   165e8:	ldr	r2, [r5, #44]	; 0x2c
   165ec:	cmp	r2, r1
   165f0:	bne	165c0 <__assert_fail@plt+0x5050>
   165f4:	ldr	r1, [r3]
   165f8:	ldr	r0, [r5, #40]	; 0x28
   165fc:	bl	1124c <memcmp@plt>
   16600:	cmp	r0, #0
   16604:	bne	165c0 <__assert_fail@plt+0x5050>
   16608:	add	r4, r4, #1
   1660c:	add	r5, r5, #40	; 0x28
   16610:	sub	r3, r8, r4
   16614:	str	r3, [r9, r8, lsl #2]
   16618:	add	r8, r8, #1
   1661c:	cmp	r6, r8
   16620:	bne	162bc <__assert_fail@plt+0x4d4c>
   16624:	b	1632c <__assert_fail@plt+0x4dbc>
   16628:	sub	r4, fp, #88	; 0x58
   1662c:	mov	r0, r4
   16630:	bl	11234 <mbsinit@plt>
   16634:	cmp	r0, #0
   16638:	beq	169a4 <__assert_fail@plt+0x5434>
   1663c:	strb	r6, [fp, #-92]	; 0xffffffa4
   16640:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   16644:	mov	r1, r0
   16648:	mov	r0, r5
   1664c:	bl	1b23c <__assert_fail@plt+0x9ccc>
   16650:	mov	r2, r0
   16654:	mov	r3, r4
   16658:	mov	r1, r5
   1665c:	sub	r0, fp, #64	; 0x40
   16660:	bl	1cab8 <__assert_fail@plt+0xb548>
   16664:	cmn	r0, #1
   16668:	str	r0, [fp, #-72]	; 0xffffffb8
   1666c:	beq	1685c <__assert_fail@plt+0x52ec>
   16670:	cmn	r0, #2
   16674:	beq	168ec <__assert_fail@plt+0x537c>
   16678:	cmp	r0, #0
   1667c:	beq	16908 <__assert_fail@plt+0x5398>
   16680:	ldr	r5, [fp, #-64]	; 0xffffffc0
   16684:	mov	r0, r4
   16688:	strb	r6, [fp, #-68]	; 0xffffffbc
   1668c:	bl	11234 <mbsinit@plt>
   16690:	cmp	r0, #0
   16694:	strb	r6, [fp, #-80]	; 0xffffffb0
   16698:	movne	r3, #0
   1669c:	strbne	r3, [fp, #-92]	; 0xffffffa4
   166a0:	b	16480 <__assert_fail@plt+0x4f10>
   166a4:	ldr	r5, [fp, #-76]	; 0xffffffb4
   166a8:	mov	r2, r4
   166ac:	ldr	r0, [r3]
   166b0:	mov	r1, r5
   166b4:	bl	1124c <memcmp@plt>
   166b8:	cmp	r0, #0
   166bc:	beq	164b0 <__assert_fail@plt+0x4f40>
   166c0:	cmp	r7, #0
   166c4:	beq	163b8 <__assert_fail@plt+0x4e48>
   166c8:	ldr	r3, [fp, #-212]	; 0xffffff2c
   166cc:	ldr	r5, [r3, r7, lsl #2]
   166d0:	cmp	r5, #0
   166d4:	sub	r7, r7, r5
   166d8:	beq	1638c <__assert_fail@plt+0x4e1c>
   166dc:	ldrb	r3, [fp, #-136]	; 0xffffff78
   166e0:	cmp	r3, #0
   166e4:	beq	16948 <__assert_fail@plt+0x53d8>
   166e8:	ldrb	r3, [fp, #-124]	; 0xffffff84
   166ec:	cmp	r3, #0
   166f0:	bne	16854 <__assert_fail@plt+0x52e4>
   166f4:	ldr	r4, [fp, #-132]	; 0xffffff7c
   166f8:	mov	r2, #0
   166fc:	subs	r5, r5, #1
   16700:	ldr	r3, [fp, #-128]	; 0xffffff80
   16704:	strb	r2, [fp, #-136]	; 0xffffff78
   16708:	add	r4, r4, r3
   1670c:	ldrbeq	r3, [fp, #-80]	; 0xffffffb0
   16710:	str	r4, [fp, #-132]	; 0xffffff7c
   16714:	beq	16380 <__assert_fail@plt+0x4e10>
   16718:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   1671c:	cmp	r3, #0
   16720:	subne	r8, fp, #144	; 0x90
   16724:	bne	16780 <__assert_fail@plt+0x5210>
   16728:	ldrb	r3, [r4]
   1672c:	lsr	r2, r3, #5
   16730:	and	r3, r3, #31
   16734:	ldr	r2, [r9, r2, lsl #2]
   16738:	lsr	r3, r2, r3
   1673c:	tst	r3, #1
   16740:	beq	16768 <__assert_fail@plt+0x51f8>
   16744:	str	r6, [fp, #-128]	; 0xffffff80
   16748:	ldrb	r3, [r4]
   1674c:	strb	r6, [fp, #-136]	; 0xffffff78
   16750:	strb	r6, [fp, #-124]	; 0xffffff84
   16754:	mov	r4, r3
   16758:	str	r3, [fp, #-120]	; 0xffffff88
   1675c:	cmp	r4, #0
   16760:	bne	166f4 <__assert_fail@plt+0x5184>
   16764:	bl	11540 <abort@plt>
   16768:	sub	r8, fp, #144	; 0x90
   1676c:	mov	r0, r8
   16770:	bl	11234 <mbsinit@plt>
   16774:	cmp	r0, #0
   16778:	beq	169a4 <__assert_fail@plt+0x5434>
   1677c:	strb	r6, [fp, #-148]	; 0xffffff6c
   16780:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   16784:	mov	r1, r0
   16788:	mov	r0, r4
   1678c:	bl	1b23c <__assert_fail@plt+0x9ccc>
   16790:	mov	r2, r0
   16794:	mov	r3, r8
   16798:	mov	r1, r4
   1679c:	sub	r0, fp, #120	; 0x78
   167a0:	bl	1cab8 <__assert_fail@plt+0xb548>
   167a4:	cmn	r0, #1
   167a8:	str	r0, [fp, #-128]	; 0xffffff80
   167ac:	beq	167e4 <__assert_fail@plt+0x5274>
   167b0:	cmn	r0, #2
   167b4:	beq	167f8 <__assert_fail@plt+0x5288>
   167b8:	cmp	r0, #0
   167bc:	beq	16814 <__assert_fail@plt+0x52a4>
   167c0:	ldr	r4, [fp, #-120]	; 0xffffff88
   167c4:	mov	r0, r8
   167c8:	strb	r6, [fp, #-124]	; 0xffffff84
   167cc:	bl	11234 <mbsinit@plt>
   167d0:	cmp	r0, #0
   167d4:	strb	r6, [fp, #-136]	; 0xffffff78
   167d8:	movne	r3, #0
   167dc:	strbne	r3, [fp, #-148]	; 0xffffff6c
   167e0:	b	1675c <__assert_fail@plt+0x51ec>
   167e4:	mov	r3, #0
   167e8:	str	r6, [fp, #-128]	; 0xffffff80
   167ec:	ldr	r4, [fp, #-132]	; 0xffffff7c
   167f0:	strb	r3, [fp, #-124]	; 0xffffff84
   167f4:	b	166f8 <__assert_fail@plt+0x5188>
   167f8:	ldr	r4, [fp, #-132]	; 0xffffff7c
   167fc:	mov	r0, r4
   16800:	bl	113c0 <strlen@plt>
   16804:	mov	r3, #0
   16808:	str	r0, [fp, #-128]	; 0xffffff80
   1680c:	strb	r3, [fp, #-124]	; 0xffffff84
   16810:	b	166f8 <__assert_fail@plt+0x5188>
   16814:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16818:	str	r6, [fp, #-128]	; 0xffffff80
   1681c:	ldrb	r3, [r4]
   16820:	cmp	r3, #0
   16824:	bne	169c4 <__assert_fail@plt+0x5454>
   16828:	ldr	r4, [fp, #-120]	; 0xffffff88
   1682c:	cmp	r4, #0
   16830:	beq	167c4 <__assert_fail@plt+0x5254>
   16834:	movw	r3, #61400	; 0xefd8
   16838:	movt	r3, #1
   1683c:	movw	r1, #61420	; 0xefec
   16840:	movt	r1, #1
   16844:	movw	r0, #61432	; 0xeff8
   16848:	movt	r0, #1
   1684c:	mov	r2, #172	; 0xac
   16850:	bl	11570 <__assert_fail@plt>
   16854:	ldr	r4, [fp, #-120]	; 0xffffff88
   16858:	b	1675c <__assert_fail@plt+0x51ec>
   1685c:	mov	r3, #0
   16860:	strb	r6, [fp, #-80]	; 0xffffffb0
   16864:	str	r6, [fp, #-72]	; 0xffffffb8
   16868:	strb	r3, [fp, #-68]	; 0xffffffbc
   1686c:	b	16398 <__assert_fail@plt+0x4e28>
   16870:	sub	r8, fp, #144	; 0x90
   16874:	mov	r0, r8
   16878:	bl	11234 <mbsinit@plt>
   1687c:	cmp	r0, #0
   16880:	beq	169a4 <__assert_fail@plt+0x5434>
   16884:	strb	r6, [fp, #-148]	; 0xffffff6c
   16888:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   1688c:	mov	r1, r0
   16890:	mov	r0, r4
   16894:	bl	1b23c <__assert_fail@plt+0x9ccc>
   16898:	mov	r2, r0
   1689c:	mov	r3, r8
   168a0:	mov	r1, r4
   168a4:	sub	r0, fp, #120	; 0x78
   168a8:	bl	1cab8 <__assert_fail@plt+0xb548>
   168ac:	cmn	r0, #1
   168b0:	str	r0, [fp, #-128]	; 0xffffff80
   168b4:	beq	16950 <__assert_fail@plt+0x53e0>
   168b8:	cmn	r0, #2
   168bc:	beq	16964 <__assert_fail@plt+0x53f4>
   168c0:	cmp	r0, #0
   168c4:	beq	16980 <__assert_fail@plt+0x5410>
   168c8:	ldr	r4, [fp, #-120]	; 0xffffff88
   168cc:	mov	r0, r8
   168d0:	strb	r6, [fp, #-124]	; 0xffffff84
   168d4:	bl	11234 <mbsinit@plt>
   168d8:	cmp	r0, #0
   168dc:	strb	r6, [fp, #-136]	; 0xffffff78
   168e0:	movne	r3, #0
   168e4:	strbne	r3, [fp, #-148]	; 0xffffff6c
   168e8:	b	16408 <__assert_fail@plt+0x4e98>
   168ec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   168f0:	bl	113c0 <strlen@plt>
   168f4:	mov	r3, #0
   168f8:	strb	r6, [fp, #-80]	; 0xffffffb0
   168fc:	str	r0, [fp, #-72]	; 0xffffffb8
   16900:	strb	r3, [fp, #-68]	; 0xffffffbc
   16904:	b	16398 <__assert_fail@plt+0x4e28>
   16908:	ldr	r5, [fp, #-76]	; 0xffffffb4
   1690c:	str	r6, [fp, #-72]	; 0xffffffb8
   16910:	ldrb	r3, [r5]
   16914:	cmp	r3, #0
   16918:	bne	169c4 <__assert_fail@plt+0x5454>
   1691c:	ldr	r5, [fp, #-64]	; 0xffffffc0
   16920:	cmp	r5, #0
   16924:	beq	16684 <__assert_fail@plt+0x5114>
   16928:	b	165ac <__assert_fail@plt+0x503c>
   1692c:	ldrb	r3, [fp, #-124]	; 0xffffff84
   16930:	cmp	r3, #0
   16934:	beq	16410 <__assert_fail@plt+0x4ea0>
   16938:	ldr	r4, [fp, #-120]	; 0xffffff88
   1693c:	b	16408 <__assert_fail@plt+0x4e98>
   16940:	ldr	r5, [fp, #-64]	; 0xffffffc0
   16944:	b	16480 <__assert_fail@plt+0x4f10>
   16948:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1694c:	b	16718 <__assert_fail@plt+0x51a8>
   16950:	mov	r3, #0
   16954:	str	r6, [fp, #-128]	; 0xffffff80
   16958:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1695c:	strb	r3, [fp, #-124]	; 0xffffff84
   16960:	b	16414 <__assert_fail@plt+0x4ea4>
   16964:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16968:	mov	r0, r4
   1696c:	bl	113c0 <strlen@plt>
   16970:	mov	r3, #0
   16974:	str	r0, [fp, #-128]	; 0xffffff80
   16978:	strb	r3, [fp, #-124]	; 0xffffff84
   1697c:	b	16414 <__assert_fail@plt+0x4ea4>
   16980:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16984:	str	r6, [fp, #-128]	; 0xffffff80
   16988:	ldrb	r3, [r4]
   1698c:	cmp	r3, #0
   16990:	bne	169c4 <__assert_fail@plt+0x5454>
   16994:	ldr	r4, [fp, #-120]	; 0xffffff88
   16998:	cmp	r4, #0
   1699c:	beq	168cc <__assert_fail@plt+0x535c>
   169a0:	b	165ac <__assert_fail@plt+0x503c>
   169a4:	movw	r3, #61400	; 0xefd8
   169a8:	movt	r3, #1
   169ac:	movw	r1, #61420	; 0xefec
   169b0:	movt	r1, #1
   169b4:	movw	r0, #61452	; 0xf00c
   169b8:	movt	r0, #1
   169bc:	mov	r2, #143	; 0x8f
   169c0:	bl	11570 <__assert_fail@plt>
   169c4:	movw	r3, #61400	; 0xefd8
   169c8:	movt	r3, #1
   169cc:	movw	r1, #61420	; 0xefec
   169d0:	movt	r1, #1
   169d4:	movw	r0, #61476	; 0xf024
   169d8:	movt	r0, #1
   169dc:	mov	r2, #171	; 0xab
   169e0:	bl	11570 <__assert_fail@plt>
   169e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   169e8:	mov	r4, r0
   169ec:	strd	r6, [sp, #8]
   169f0:	strd	r8, [sp, #16]
   169f4:	mov	r8, r1
   169f8:	strd	sl, [sp, #24]
   169fc:	str	lr, [sp, #32]
   16a00:	sub	sp, sp, #316	; 0x13c
   16a04:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   16a08:	cmp	r0, #1
   16a0c:	bhi	16bfc <__assert_fail@plt+0x568c>
   16a10:	ldrb	r9, [r8]
   16a14:	cmp	r9, #0
   16a18:	beq	16b78 <__assert_fail@plt+0x5608>
   16a1c:	ldrb	r3, [r4]
   16a20:	add	r2, r8, #1
   16a24:	str	r2, [sp, #4]
   16a28:	cmp	r3, #0
   16a2c:	beq	170d4 <__assert_fail@plt+0x5b64>
   16a30:	mov	r6, #0
   16a34:	mov	fp, r8
   16a38:	mov	ip, r6
   16a3c:	mov	sl, r6
   16a40:	mov	r0, #1
   16a44:	b	16a9c <__assert_fail@plt+0x552c>
   16a48:	cmp	fp, #0
   16a4c:	beq	16a6c <__assert_fail@plt+0x54fc>
   16a50:	mov	r0, fp
   16a54:	sub	r1, r5, sl
   16a58:	bl	1145c <strnlen@plt>
   16a5c:	ldrb	r3, [fp, r0]!
   16a60:	cmp	r3, #0
   16a64:	bne	173b4 <__assert_fail@plt+0x5e44>
   16a68:	mov	sl, r5
   16a6c:	mov	r0, r8
   16a70:	bl	113c0 <strlen@plt>
   16a74:	mov	r2, r0
   16a78:	add	r3, sp, #256	; 0x100
   16a7c:	mov	r1, r8
   16a80:	mov	r0, r7
   16a84:	bl	15f2c <__assert_fail@plt+0x49bc>
   16a88:	cmp	r0, #0
   16a8c:	bne	1766c <__assert_fail@plt+0x60fc>
   16a90:	mov	fp, r0
   16a94:	mov	r4, r7
   16a98:	mov	ip, r5
   16a9c:	mov	r7, r4
   16aa0:	add	r6, r6, #1
   16aa4:	ldrb	r3, [r7], #1
   16aa8:	add	r5, ip, #1
   16aac:	cmp	r3, r9
   16ab0:	beq	16b98 <__assert_fail@plt+0x5628>
   16ab4:	ldrb	r3, [r4, #1]
   16ab8:	cmp	r3, #0
   16abc:	beq	170d4 <__assert_fail@plt+0x5b64>
   16ac0:	cmp	r6, #9
   16ac4:	movls	r4, #0
   16ac8:	andhi	r4, r0, #1
   16acc:	cmp	r4, #0
   16ad0:	beq	16a94 <__assert_fail@plt+0x5524>
   16ad4:	add	r3, r6, r6, lsl #2
   16ad8:	cmp	r5, r3
   16adc:	bcs	16a48 <__assert_fail@plt+0x54d8>
   16ae0:	mov	r0, r4
   16ae4:	b	16a94 <__assert_fail@plt+0x5524>
   16ae8:	add	r0, sp, #36	; 0x24
   16aec:	bl	11234 <mbsinit@plt>
   16af0:	cmp	r0, #0
   16af4:	beq	17674 <__assert_fail@plt+0x6104>
   16af8:	mov	r6, #1
   16afc:	strb	r6, [sp, #32]
   16b00:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   16b04:	mov	r1, r0
   16b08:	mov	r0, r8
   16b0c:	bl	1b23c <__assert_fail@plt+0x9ccc>
   16b10:	mov	r2, r0
   16b14:	add	r3, sp, #36	; 0x24
   16b18:	mov	r1, r8
   16b1c:	add	r0, sp, #60	; 0x3c
   16b20:	bl	1cab8 <__assert_fail@plt+0xb548>
   16b24:	cmn	r0, #1
   16b28:	str	r0, [sp, #52]	; 0x34
   16b2c:	strbeq	r6, [sp, #44]	; 0x2c
   16b30:	streq	r6, [sp, #52]	; 0x34
   16b34:	strbeq	r5, [sp, #56]	; 0x38
   16b38:	beq	16c6c <__assert_fail@plt+0x56fc>
   16b3c:	cmn	r0, #2
   16b40:	beq	16c58 <__assert_fail@plt+0x56e8>
   16b44:	cmp	r0, #0
   16b48:	beq	175d8 <__assert_fail@plt+0x6068>
   16b4c:	ldr	r5, [sp, #60]	; 0x3c
   16b50:	mov	r6, #1
   16b54:	add	r0, sp, #36	; 0x24
   16b58:	strb	r6, [sp, #56]	; 0x38
   16b5c:	bl	11234 <mbsinit@plt>
   16b60:	cmp	r0, #0
   16b64:	strb	r6, [sp, #44]	; 0x2c
   16b68:	movne	r3, #0
   16b6c:	strbne	r3, [sp, #32]
   16b70:	cmp	r5, #0
   16b74:	bne	16c6c <__assert_fail@plt+0x56fc>
   16b78:	mov	r0, r4
   16b7c:	add	sp, sp, #316	; 0x13c
   16b80:	ldrd	r4, [sp]
   16b84:	ldrd	r6, [sp, #8]
   16b88:	ldrd	r8, [sp, #16]
   16b8c:	ldrd	sl, [sp, #24]
   16b90:	add	sp, sp, #32
   16b94:	pop	{pc}		; (ldr pc, [sp], #4)
   16b98:	ldrb	r3, [r8, #1]
   16b9c:	cmp	r3, #0
   16ba0:	beq	16b78 <__assert_fail@plt+0x5608>
   16ba4:	ldrb	r2, [r7]
   16ba8:	cmp	r2, #0
   16bac:	beq	170d4 <__assert_fail@plt+0x5b64>
   16bb0:	cmp	r3, r2
   16bb4:	add	r5, ip, #2
   16bb8:	bne	16ac0 <__assert_fail@plt+0x5550>
   16bbc:	ldr	r3, [sp, #4]
   16bc0:	mov	r1, r7
   16bc4:	add	r3, r3, #1
   16bc8:	b	16bec <__assert_fail@plt+0x567c>
   16bcc:	ldrb	lr, [r1, #1]!
   16bd0:	cmp	lr, #0
   16bd4:	beq	170d4 <__assert_fail@plt+0x5b64>
   16bd8:	add	r3, r3, #1
   16bdc:	cmp	r2, lr
   16be0:	sub	r5, r3, r8
   16be4:	add	r5, r5, ip
   16be8:	bne	16ac0 <__assert_fail@plt+0x5550>
   16bec:	ldrb	r2, [r3]
   16bf0:	cmp	r2, #0
   16bf4:	bne	16bcc <__assert_fail@plt+0x565c>
   16bf8:	b	16b78 <__assert_fail@plt+0x5608>
   16bfc:	ldrb	r2, [r8]
   16c00:	mov	r3, #0
   16c04:	movw	sl, #62656	; 0xf4c0
   16c08:	movt	sl, #1
   16c0c:	mov	r6, #0
   16c10:	strb	r3, [sp, #32]
   16c14:	mov	r7, #0
   16c18:	strb	r3, [sp, #44]	; 0x2c
   16c1c:	lsr	r3, r2, #5
   16c20:	and	r1, r2, #31
   16c24:	strd	r6, [sp, #36]	; 0x24
   16c28:	str	r8, [sp, #48]	; 0x30
   16c2c:	ldr	r3, [sl, r3, lsl #2]
   16c30:	lsr	r3, r3, r1
   16c34:	ands	r5, r3, #1
   16c38:	beq	16ae8 <__assert_fail@plt+0x5578>
   16c3c:	mov	r3, #1
   16c40:	mov	r5, r2
   16c44:	strb	r3, [sp, #44]	; 0x2c
   16c48:	str	r3, [sp, #52]	; 0x34
   16c4c:	strb	r3, [sp, #56]	; 0x38
   16c50:	str	r2, [sp, #60]	; 0x3c
   16c54:	b	16b70 <__assert_fail@plt+0x5600>
   16c58:	ldr	r0, [sp, #48]	; 0x30
   16c5c:	bl	113c0 <strlen@plt>
   16c60:	strb	r6, [sp, #44]	; 0x2c
   16c64:	str	r0, [sp, #52]	; 0x34
   16c68:	strb	r5, [sp, #56]	; 0x38
   16c6c:	mov	r3, #0
   16c70:	mov	r0, #1
   16c74:	mov	r7, r3
   16c78:	mov	r6, r4
   16c7c:	str	r3, [sp, #4]
   16c80:	mov	r5, r0
   16c84:	mov	fp, r0
   16c88:	str	r0, [sp, #8]
   16c8c:	str	r3, [sp, #16]
   16c90:	str	r3, [sp, #20]
   16c94:	str	r3, [sp, #24]
   16c98:	strb	r3, [sp, #88]	; 0x58
   16c9c:	str	r3, [sp, #92]	; 0x5c
   16ca0:	str	r3, [sp, #96]	; 0x60
   16ca4:	strb	r3, [sp, #100]	; 0x64
   16ca8:	strb	r3, [sp, #144]	; 0x90
   16cac:	str	r3, [sp, #148]	; 0x94
   16cb0:	str	r3, [sp, #152]	; 0x98
   16cb4:	strb	r3, [sp, #156]	; 0x9c
   16cb8:	ldrb	r3, [sp, #144]	; 0x90
   16cbc:	str	r8, [sp, #12]
   16cc0:	str	r4, [sp, #28]
   16cc4:	str	r8, [sp, #104]	; 0x68
   16cc8:	str	r4, [sp, #160]	; 0xa0
   16ccc:	cmp	r3, #0
   16cd0:	addne	r4, sp, #148	; 0x94
   16cd4:	bne	16fe8 <__assert_fail@plt+0x5a78>
   16cd8:	ldrb	r3, [r6]
   16cdc:	lsr	r2, r3, #5
   16ce0:	and	r3, r3, #31
   16ce4:	ldr	r2, [sl, r2, lsl #2]
   16ce8:	lsr	r3, r2, r3
   16cec:	tst	r3, #1
   16cf0:	beq	171b4 <__assert_fail@plt+0x5c44>
   16cf4:	str	fp, [sp, #164]	; 0xa4
   16cf8:	ldrb	r6, [r6]
   16cfc:	strb	r5, [sp, #156]	; 0x9c
   16d00:	strb	r5, [sp, #168]	; 0xa8
   16d04:	str	r6, [sp, #172]	; 0xac
   16d08:	cmp	r6, #0
   16d0c:	beq	170d4 <__assert_fail@plt+0x5b64>
   16d10:	ldrd	r2, [sp, #4]
   16d14:	cmp	r2, #9
   16d18:	movls	r3, #0
   16d1c:	andhi	r3, r3, #1
   16d20:	cmp	r3, #0
   16d24:	addeq	r7, r7, #1
   16d28:	beq	16d40 <__assert_fail@plt+0x57d0>
   16d2c:	add	r2, r2, r2, lsl #2
   16d30:	cmp	r7, r2
   16d34:	addcc	r7, r7, #1
   16d38:	strcc	r3, [sp, #8]
   16d3c:	bcs	1720c <__assert_fail@plt+0x5c9c>
   16d40:	ldrb	r3, [sp, #56]	; 0x38
   16d44:	cmp	r3, #0
   16d48:	beq	17124 <__assert_fail@plt+0x5bb4>
   16d4c:	ldr	r3, [sp, #60]	; 0x3c
   16d50:	ldr	r2, [sp, #172]	; 0xac
   16d54:	cmp	r2, r3
   16d58:	bne	16fb4 <__assert_fail@plt+0x5a44>
   16d5c:	ldr	ip, [sp, #12]
   16d60:	ldr	r3, [sp, #16]
   16d64:	ldr	r0, [sp, #160]	; 0xa0
   16d68:	ldrb	r1, [ip]
   16d6c:	str	r3, [sp, #260]	; 0x104
   16d70:	ldr	r3, [sp, #20]
   16d74:	str	ip, [sp, #272]	; 0x110
   16d78:	ldr	r2, [sp, #164]	; 0xa4
   16d7c:	and	ip, r1, #31
   16d80:	ldrd	r8, [sp, #168]	; 0xa8
   16d84:	str	r3, [sp, #264]	; 0x108
   16d88:	lsr	r3, r1, #5
   16d8c:	str	r2, [sp, #220]	; 0xdc
   16d90:	ldr	r6, [sl, r3, lsl #2]
   16d94:	strd	r8, [sp, #224]	; 0xe0
   16d98:	ldrd	r2, [sp, #152]	; 0x98
   16d9c:	ldrd	r8, [sp, #184]	; 0xb8
   16da0:	lsr	r6, r6, ip
   16da4:	mov	ip, #0
   16da8:	ldr	lr, [sp, #220]	; 0xdc
   16dac:	strd	r2, [sp, #208]	; 0xd0
   16db0:	ands	r6, r6, #1
   16db4:	ldrd	r2, [sp, #144]	; 0x90
   16db8:	add	r0, lr, r0
   16dbc:	strd	r2, [sp, #200]	; 0xc8
   16dc0:	ldrd	r2, [sp, #176]	; 0xb0
   16dc4:	strb	ip, [sp, #212]	; 0xd4
   16dc8:	str	r0, [sp, #216]	; 0xd8
   16dcc:	strd	r8, [sp, #240]	; 0xf0
   16dd0:	strb	ip, [sp, #256]	; 0x100
   16dd4:	strd	r2, [sp, #232]	; 0xe8
   16dd8:	ldrd	r2, [sp, #192]	; 0xc0
   16ddc:	strb	ip, [sp, #268]	; 0x10c
   16de0:	strd	r2, [sp, #248]	; 0xf8
   16de4:	beq	1748c <__assert_fail@plt+0x5f1c>
   16de8:	mov	r4, r1
   16dec:	strb	r5, [sp, #268]	; 0x10c
   16df0:	cmp	r4, #0
   16df4:	str	fp, [sp, #276]	; 0x114
   16df8:	strb	r5, [sp, #280]	; 0x118
   16dfc:	str	r1, [sp, #284]	; 0x11c
   16e00:	beq	1750c <__assert_fail@plt+0x5f9c>
   16e04:	ldr	r4, [sp, #272]	; 0x110
   16e08:	mov	r3, #0
   16e0c:	add	r7, r7, #1
   16e10:	ldr	r2, [sp, #276]	; 0x114
   16e14:	mov	r9, r3
   16e18:	strb	r3, [sp, #268]	; 0x10c
   16e1c:	add	r4, r4, r2
   16e20:	str	r4, [sp, #272]	; 0x110
   16e24:	b	16f0c <__assert_fail@plt+0x599c>
   16e28:	ldrb	r3, [r4]
   16e2c:	lsr	r2, r3, #5
   16e30:	and	r3, r3, #31
   16e34:	ldr	r2, [sl, r2, lsl #2]
   16e38:	lsr	r3, r2, r3
   16e3c:	tst	r3, #1
   16e40:	beq	17108 <__assert_fail@plt+0x5b98>
   16e44:	str	fp, [sp, #276]	; 0x114
   16e48:	ldrb	r4, [r4]
   16e4c:	strb	r5, [sp, #268]	; 0x10c
   16e50:	strb	r5, [sp, #280]	; 0x118
   16e54:	cmp	r4, #0
   16e58:	str	r4, [sp, #284]	; 0x11c
   16e5c:	beq	16f88 <__assert_fail@plt+0x5a18>
   16e60:	ldrb	r3, [sp, #212]	; 0xd4
   16e64:	cmp	r3, #0
   16e68:	bne	170dc <__assert_fail@plt+0x5b6c>
   16e6c:	ldrb	r3, [sp, #200]	; 0xc8
   16e70:	ldr	r4, [sp, #216]	; 0xd8
   16e74:	cmp	r3, #0
   16e78:	addne	r8, sp, #204	; 0xcc
   16e7c:	bne	17064 <__assert_fail@plt+0x5af4>
   16e80:	ldrb	r3, [r4]
   16e84:	lsr	r2, r3, #5
   16e88:	and	r3, r3, #31
   16e8c:	ldr	r2, [sl, r2, lsl #2]
   16e90:	lsr	r3, r2, r3
   16e94:	tst	r3, #1
   16e98:	beq	1704c <__assert_fail@plt+0x5adc>
   16e9c:	str	fp, [sp, #220]	; 0xdc
   16ea0:	ldrb	r0, [r4]
   16ea4:	strb	r5, [sp, #212]	; 0xd4
   16ea8:	strb	r5, [sp, #224]	; 0xe0
   16eac:	mov	r6, r0
   16eb0:	str	r0, [sp, #228]	; 0xe4
   16eb4:	cmp	r6, #0
   16eb8:	beq	170d4 <__assert_fail@plt+0x5b64>
   16ebc:	ldrb	r3, [sp, #280]	; 0x118
   16ec0:	cmp	r3, #0
   16ec4:	beq	16fa4 <__assert_fail@plt+0x5a34>
   16ec8:	ldr	r0, [sp, #284]	; 0x11c
   16ecc:	subs	r0, r0, r6
   16ed0:	movne	r0, #1
   16ed4:	cmp	r0, #0
   16ed8:	add	r2, r7, #1
   16edc:	bne	16fb4 <__assert_fail@plt+0x5a44>
   16ee0:	mov	r7, r2
   16ee4:	ldr	r3, [sp, #216]	; 0xd8
   16ee8:	strb	r0, [sp, #212]	; 0xd4
   16eec:	ldr	r1, [sp, #220]	; 0xdc
   16ef0:	strb	r0, [sp, #268]	; 0x10c
   16ef4:	ldr	r4, [sp, #272]	; 0x110
   16ef8:	ldr	r2, [sp, #276]	; 0x114
   16efc:	add	r3, r3, r1
   16f00:	str	r3, [sp, #216]	; 0xd8
   16f04:	add	r4, r4, r2
   16f08:	str	r4, [sp, #272]	; 0x110
   16f0c:	ldrb	r3, [sp, #256]	; 0x100
   16f10:	cmp	r3, #0
   16f14:	beq	16e28 <__assert_fail@plt+0x58b8>
   16f18:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   16f1c:	mov	r1, r0
   16f20:	mov	r0, r4
   16f24:	bl	1b23c <__assert_fail@plt+0x9ccc>
   16f28:	mov	r2, r0
   16f2c:	add	r3, sp, #260	; 0x104
   16f30:	mov	r1, r4
   16f34:	add	r0, sp, #284	; 0x11c
   16f38:	bl	1cab8 <__assert_fail@plt+0xb548>
   16f3c:	cmn	r0, #1
   16f40:	str	r0, [sp, #276]	; 0x114
   16f44:	strbeq	r5, [sp, #268]	; 0x10c
   16f48:	streq	fp, [sp, #276]	; 0x114
   16f4c:	strbeq	r9, [sp, #280]	; 0x118
   16f50:	beq	16e60 <__assert_fail@plt+0x58f0>
   16f54:	cmn	r0, #2
   16f58:	beq	17154 <__assert_fail@plt+0x5be4>
   16f5c:	cmp	r0, #0
   16f60:	beq	1716c <__assert_fail@plt+0x5bfc>
   16f64:	ldr	r4, [sp, #284]	; 0x11c
   16f68:	add	r0, sp, #260	; 0x104
   16f6c:	strb	r5, [sp, #280]	; 0x118
   16f70:	bl	11234 <mbsinit@plt>
   16f74:	cmp	r0, #0
   16f78:	strb	r5, [sp, #268]	; 0x10c
   16f7c:	strbne	r9, [sp, #256]	; 0x100
   16f80:	cmp	r4, #0
   16f84:	bne	16e60 <__assert_fail@plt+0x58f0>
   16f88:	ldr	r0, [sp, #160]	; 0xa0
   16f8c:	b	16b7c <__assert_fail@plt+0x560c>
   16f90:	ldr	r0, [sp, #216]	; 0xd8
   16f94:	bl	113c0 <strlen@plt>
   16f98:	strb	r5, [sp, #212]	; 0xd4
   16f9c:	str	r0, [sp, #220]	; 0xdc
   16fa0:	strb	r9, [sp, #224]	; 0xe0
   16fa4:	ldr	r2, [sp, #220]	; 0xdc
   16fa8:	ldr	r3, [sp, #276]	; 0x114
   16fac:	cmp	r2, r3
   16fb0:	beq	170f0 <__assert_fail@plt+0x5b80>
   16fb4:	ldr	r6, [sp, #160]	; 0xa0
   16fb8:	ldr	r4, [sp, #164]	; 0xa4
   16fbc:	mov	r3, #0
   16fc0:	add	r6, r6, r4
   16fc4:	ldr	r2, [sp, #4]
   16fc8:	strb	r3, [sp, #156]	; 0x9c
   16fcc:	ldrb	r3, [sp, #144]	; 0x90
   16fd0:	str	r6, [sp, #160]	; 0xa0
   16fd4:	add	r2, r2, #1
   16fd8:	cmp	r3, #0
   16fdc:	str	r2, [sp, #4]
   16fe0:	addne	r4, sp, #148	; 0x94
   16fe4:	beq	16cd8 <__assert_fail@plt+0x5768>
   16fe8:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   16fec:	mov	r1, r0
   16ff0:	mov	r0, r6
   16ff4:	bl	1b23c <__assert_fail@plt+0x9ccc>
   16ff8:	mov	r2, r0
   16ffc:	mov	r3, r4
   17000:	mov	r1, r6
   17004:	add	r0, sp, #172	; 0xac
   17008:	bl	1cab8 <__assert_fail@plt+0xb548>
   1700c:	cmn	r0, #1
   17010:	str	r0, [sp, #164]	; 0xa4
   17014:	beq	171d0 <__assert_fail@plt+0x5c60>
   17018:	cmn	r0, #2
   1701c:	beq	17400 <__assert_fail@plt+0x5e90>
   17020:	cmp	r0, #0
   17024:	bne	173d0 <__assert_fail@plt+0x5e60>
   17028:	ldr	r6, [sp, #160]	; 0xa0
   1702c:	str	fp, [sp, #164]	; 0xa4
   17030:	ldrb	r3, [r6]
   17034:	cmp	r3, #0
   17038:	bne	17694 <__assert_fail@plt+0x6124>
   1703c:	ldr	r6, [sp, #172]	; 0xac
   17040:	cmp	r6, #0
   17044:	beq	173d4 <__assert_fail@plt+0x5e64>
   17048:	b	175f8 <__assert_fail@plt+0x6088>
   1704c:	add	r8, sp, #204	; 0xcc
   17050:	mov	r0, r8
   17054:	bl	11234 <mbsinit@plt>
   17058:	cmp	r0, #0
   1705c:	beq	17674 <__assert_fail@plt+0x6104>
   17060:	strb	r5, [sp, #200]	; 0xc8
   17064:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   17068:	mov	r1, r0
   1706c:	mov	r0, r4
   17070:	bl	1b23c <__assert_fail@plt+0x9ccc>
   17074:	mov	r2, r0
   17078:	mov	r3, r8
   1707c:	mov	r1, r4
   17080:	add	r0, sp, #228	; 0xe4
   17084:	bl	1cab8 <__assert_fail@plt+0xb548>
   17088:	cmn	r0, #1
   1708c:	str	r0, [sp, #220]	; 0xdc
   17090:	strbeq	r5, [sp, #212]	; 0xd4
   17094:	streq	fp, [sp, #220]	; 0xdc
   17098:	strbeq	r9, [sp, #224]	; 0xe0
   1709c:	beq	16fa4 <__assert_fail@plt+0x5a34>
   170a0:	cmn	r0, #2
   170a4:	beq	16f90 <__assert_fail@plt+0x5a20>
   170a8:	cmp	r0, #0
   170ac:	beq	17190 <__assert_fail@plt+0x5c20>
   170b0:	ldr	r6, [sp, #228]	; 0xe4
   170b4:	mov	r0, r8
   170b8:	strb	r5, [sp, #224]	; 0xe0
   170bc:	bl	11234 <mbsinit@plt>
   170c0:	cmp	r0, #0
   170c4:	strb	r5, [sp, #212]	; 0xd4
   170c8:	strbne	r9, [sp, #200]	; 0xc8
   170cc:	cmp	r6, #0
   170d0:	bne	16ebc <__assert_fail@plt+0x594c>
   170d4:	mov	r0, #0
   170d8:	b	16b7c <__assert_fail@plt+0x560c>
   170dc:	ldrb	r3, [sp, #224]	; 0xe0
   170e0:	cmp	r3, #0
   170e4:	beq	16fa4 <__assert_fail@plt+0x5a34>
   170e8:	ldr	r6, [sp, #228]	; 0xe4
   170ec:	b	16eb4 <__assert_fail@plt+0x5944>
   170f0:	ldr	r0, [sp, #216]	; 0xd8
   170f4:	ldr	r1, [sp, #272]	; 0x110
   170f8:	bl	1124c <memcmp@plt>
   170fc:	adds	r0, r0, #0
   17100:	movne	r0, #1
   17104:	b	16ed4 <__assert_fail@plt+0x5964>
   17108:	add	r0, sp, #260	; 0x104
   1710c:	bl	11234 <mbsinit@plt>
   17110:	cmp	r0, #0
   17114:	beq	17674 <__assert_fail@plt+0x6104>
   17118:	strb	r5, [sp, #256]	; 0x100
   1711c:	b	16f18 <__assert_fail@plt+0x59a8>
   17120:	add	r7, r7, #1
   17124:	ldr	r3, [sp, #52]	; 0x34
   17128:	ldr	r6, [sp, #160]	; 0xa0
   1712c:	ldr	r4, [sp, #164]	; 0xa4
   17130:	cmp	r4, r3
   17134:	bne	16fbc <__assert_fail@plt+0x5a4c>
   17138:	mov	r2, r4
   1713c:	mov	r0, r6
   17140:	ldr	r1, [sp, #48]	; 0x30
   17144:	bl	1124c <memcmp@plt>
   17148:	cmp	r0, #0
   1714c:	bne	16fbc <__assert_fail@plt+0x5a4c>
   17150:	b	16d5c <__assert_fail@plt+0x57ec>
   17154:	ldr	r0, [sp, #272]	; 0x110
   17158:	bl	113c0 <strlen@plt>
   1715c:	strb	r5, [sp, #268]	; 0x10c
   17160:	str	r0, [sp, #276]	; 0x114
   17164:	strb	r9, [sp, #280]	; 0x118
   17168:	b	16e60 <__assert_fail@plt+0x58f0>
   1716c:	ldr	r3, [sp, #272]	; 0x110
   17170:	str	fp, [sp, #276]	; 0x114
   17174:	ldrb	r3, [r3]
   17178:	cmp	r3, #0
   1717c:	bne	17694 <__assert_fail@plt+0x6124>
   17180:	ldr	r4, [sp, #284]	; 0x11c
   17184:	cmp	r4, #0
   17188:	beq	16f68 <__assert_fail@plt+0x59f8>
   1718c:	b	175f8 <__assert_fail@plt+0x6088>
   17190:	ldr	r3, [sp, #216]	; 0xd8
   17194:	str	fp, [sp, #220]	; 0xdc
   17198:	ldrb	r3, [r3]
   1719c:	cmp	r3, #0
   171a0:	bne	17694 <__assert_fail@plt+0x6124>
   171a4:	ldr	r6, [sp, #228]	; 0xe4
   171a8:	cmp	r6, #0
   171ac:	beq	170b4 <__assert_fail@plt+0x5b44>
   171b0:	b	175f8 <__assert_fail@plt+0x6088>
   171b4:	add	r4, sp, #148	; 0x94
   171b8:	mov	r0, r4
   171bc:	bl	11234 <mbsinit@plt>
   171c0:	cmp	r0, #0
   171c4:	beq	17674 <__assert_fail@plt+0x6104>
   171c8:	strb	r5, [sp, #144]	; 0x90
   171cc:	b	16fe8 <__assert_fail@plt+0x5a78>
   171d0:	mov	r3, #0
   171d4:	strb	r5, [sp, #156]	; 0x9c
   171d8:	str	fp, [sp, #164]	; 0xa4
   171dc:	strb	r3, [sp, #168]	; 0xa8
   171e0:	ldrd	r2, [sp, #4]
   171e4:	cmp	r2, #9
   171e8:	movls	r3, #0
   171ec:	andhi	r3, r3, #1
   171f0:	cmp	r3, #0
   171f4:	beq	17120 <__assert_fail@plt+0x5bb0>
   171f8:	add	r2, r2, r2, lsl #2
   171fc:	cmp	r7, r2
   17200:	addcc	r7, r7, #1
   17204:	strcc	r3, [sp, #8]
   17208:	bcc	17124 <__assert_fail@plt+0x5bb4>
   1720c:	ldr	r3, [sp, #24]
   17210:	subs	r6, r7, r3
   17214:	ldrb	r3, [sp, #100]	; 0x64
   17218:	beq	17650 <__assert_fail@plt+0x60e0>
   1721c:	cmp	r3, #0
   17220:	beq	173f4 <__assert_fail@plt+0x5e84>
   17224:	ldrb	r3, [sp, #112]	; 0x70
   17228:	cmp	r3, #0
   1722c:	bne	173c0 <__assert_fail@plt+0x5e50>
   17230:	ldrb	r1, [sp, #88]	; 0x58
   17234:	ldr	r4, [sp, #104]	; 0x68
   17238:	mov	r2, #0
   1723c:	subs	r6, r6, #1
   17240:	ldr	r3, [sp, #108]	; 0x6c
   17244:	strb	r2, [sp, #100]	; 0x64
   17248:	add	r4, r4, r3
   1724c:	mov	r9, r4
   17250:	str	r4, [sp, #104]	; 0x68
   17254:	beq	17424 <__assert_fail@plt+0x5eb4>
   17258:	cmp	r1, #0
   1725c:	addne	r8, sp, #92	; 0x5c
   17260:	bne	172d8 <__assert_fail@plt+0x5d68>
   17264:	ldrb	r3, [r4]
   17268:	lsr	r2, r3, #5
   1726c:	and	r3, r3, #31
   17270:	ldr	r2, [sl, r2, lsl #2]
   17274:	lsr	r3, r2, r3
   17278:	tst	r3, #1
   1727c:	beq	172c0 <__assert_fail@plt+0x5d50>
   17280:	str	fp, [sp, #108]	; 0x6c
   17284:	ldrb	r3, [r4]
   17288:	strb	r5, [sp, #100]	; 0x64
   1728c:	strb	r5, [sp, #112]	; 0x70
   17290:	cmp	r3, #0
   17294:	str	r3, [sp, #116]	; 0x74
   17298:	bne	17238 <__assert_fail@plt+0x5cc8>
   1729c:	add	r2, sp, #256	; 0x100
   172a0:	ldr	r1, [sp, #12]
   172a4:	ldr	r0, [sp, #28]
   172a8:	bl	160d8 <__assert_fail@plt+0x4b68>
   172ac:	subs	r3, r0, #0
   172b0:	str	r3, [sp, #8]
   172b4:	bne	1766c <__assert_fail@plt+0x60fc>
   172b8:	ldrb	r3, [sp, #168]	; 0xa8
   172bc:	b	17474 <__assert_fail@plt+0x5f04>
   172c0:	add	r8, sp, #92	; 0x5c
   172c4:	mov	r0, r8
   172c8:	bl	11234 <mbsinit@plt>
   172cc:	cmp	r0, #0
   172d0:	beq	17674 <__assert_fail@plt+0x6104>
   172d4:	strb	r5, [sp, #88]	; 0x58
   172d8:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   172dc:	mov	r1, r0
   172e0:	mov	r0, r4
   172e4:	bl	1b23c <__assert_fail@plt+0x9ccc>
   172e8:	mov	r2, r0
   172ec:	mov	r3, r8
   172f0:	mov	r1, r4
   172f4:	add	r0, sp, #116	; 0x74
   172f8:	bl	1cab8 <__assert_fail@plt+0xb548>
   172fc:	cmn	r0, #1
   17300:	str	r0, [sp, #108]	; 0x6c
   17304:	beq	17340 <__assert_fail@plt+0x5dd0>
   17308:	cmn	r0, #2
   1730c:	beq	17358 <__assert_fail@plt+0x5de8>
   17310:	cmp	r0, #0
   17314:	beq	17390 <__assert_fail@plt+0x5e20>
   17318:	ldr	r4, [sp, #116]	; 0x74
   1731c:	mov	r0, r8
   17320:	strb	r5, [sp, #112]	; 0x70
   17324:	bl	11234 <mbsinit@plt>
   17328:	cmp	r0, #0
   1732c:	bne	17378 <__assert_fail@plt+0x5e08>
   17330:	cmp	r4, #0
   17334:	strb	r5, [sp, #100]	; 0x64
   17338:	bne	17230 <__assert_fail@plt+0x5cc0>
   1733c:	b	1729c <__assert_fail@plt+0x5d2c>
   17340:	mov	r3, #0
   17344:	ldrb	r1, [sp, #88]	; 0x58
   17348:	str	fp, [sp, #108]	; 0x6c
   1734c:	strb	r3, [sp, #112]	; 0x70
   17350:	ldr	r4, [sp, #104]	; 0x68
   17354:	b	17238 <__assert_fail@plt+0x5cc8>
   17358:	ldr	r4, [sp, #104]	; 0x68
   1735c:	mov	r0, r4
   17360:	bl	113c0 <strlen@plt>
   17364:	mov	r3, #0
   17368:	ldrb	r1, [sp, #88]	; 0x58
   1736c:	str	r0, [sp, #108]	; 0x6c
   17370:	strb	r3, [sp, #112]	; 0x70
   17374:	b	17238 <__assert_fail@plt+0x5cc8>
   17378:	mov	r1, #0
   1737c:	cmp	r4, r1
   17380:	strb	r1, [sp, #88]	; 0x58
   17384:	strb	r5, [sp, #100]	; 0x64
   17388:	bne	17234 <__assert_fail@plt+0x5cc4>
   1738c:	b	1729c <__assert_fail@plt+0x5d2c>
   17390:	ldr	r4, [sp, #104]	; 0x68
   17394:	str	fp, [sp, #108]	; 0x6c
   17398:	ldrb	r3, [r4]
   1739c:	cmp	r3, #0
   173a0:	bne	17694 <__assert_fail@plt+0x6124>
   173a4:	ldr	r4, [sp, #116]	; 0x74
   173a8:	cmp	r4, #0
   173ac:	beq	1731c <__assert_fail@plt+0x5dac>
   173b0:	b	175f8 <__assert_fail@plt+0x6088>
   173b4:	mov	r0, r4
   173b8:	mov	sl, r5
   173bc:	b	16a94 <__assert_fail@plt+0x5524>
   173c0:	ldr	r3, [sp, #116]	; 0x74
   173c4:	cmp	r3, #0
   173c8:	bne	17230 <__assert_fail@plt+0x5cc0>
   173cc:	b	1729c <__assert_fail@plt+0x5d2c>
   173d0:	ldr	r6, [sp, #172]	; 0xac
   173d4:	mov	r0, r4
   173d8:	strb	r5, [sp, #168]	; 0xa8
   173dc:	bl	11234 <mbsinit@plt>
   173e0:	cmp	r0, #0
   173e4:	strb	r5, [sp, #156]	; 0x9c
   173e8:	movne	r3, #0
   173ec:	strbne	r3, [sp, #144]	; 0x90
   173f0:	b	16d08 <__assert_fail@plt+0x5798>
   173f4:	ldrb	r1, [sp, #88]	; 0x58
   173f8:	ldr	r4, [sp, #104]	; 0x68
   173fc:	b	17258 <__assert_fail@plt+0x5ce8>
   17400:	ldr	r0, [sp, #160]	; 0xa0
   17404:	bl	113c0 <strlen@plt>
   17408:	mov	r3, #0
   1740c:	strb	r5, [sp, #156]	; 0x9c
   17410:	str	r0, [sp, #164]	; 0xa4
   17414:	strb	r3, [sp, #168]	; 0xa8
   17418:	b	171e0 <__assert_fail@plt+0x5c70>
   1741c:	ldrb	r1, [sp, #88]	; 0x58
   17420:	ldr	r9, [sp, #104]	; 0x68
   17424:	cmp	r1, #0
   17428:	addne	r8, sp, #92	; 0x5c
   1742c:	bne	17528 <__assert_fail@plt+0x5fb8>
   17430:	ldrb	r3, [r9]
   17434:	lsr	r2, r3, #5
   17438:	and	r3, r3, #31
   1743c:	ldr	r2, [sl, r2, lsl #2]
   17440:	lsr	r3, r2, r3
   17444:	tst	r3, #1
   17448:	beq	17510 <__assert_fail@plt+0x5fa0>
   1744c:	str	fp, [sp, #108]	; 0x6c
   17450:	ldrb	r4, [r9]
   17454:	strb	r5, [sp, #100]	; 0x64
   17458:	strb	r5, [sp, #112]	; 0x70
   1745c:	str	r4, [sp, #116]	; 0x74
   17460:	cmp	r4, #0
   17464:	beq	1729c <__assert_fail@plt+0x5d2c>
   17468:	ldrb	r3, [sp, #168]	; 0xa8
   1746c:	mov	r2, #1
   17470:	str	r2, [sp, #8]
   17474:	cmp	r3, #0
   17478:	add	r3, r7, #1
   1747c:	str	r7, [sp, #24]
   17480:	mov	r7, r3
   17484:	bne	16d40 <__assert_fail@plt+0x57d0>
   17488:	b	17124 <__assert_fail@plt+0x5bb4>
   1748c:	add	r0, sp, #260	; 0x104
   17490:	bl	11234 <mbsinit@plt>
   17494:	cmp	r0, #0
   17498:	beq	17674 <__assert_fail@plt+0x6104>
   1749c:	strb	r5, [sp, #256]	; 0x100
   174a0:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   174a4:	ldr	r4, [sp, #12]
   174a8:	mov	r1, r0
   174ac:	mov	r0, r4
   174b0:	bl	1b23c <__assert_fail@plt+0x9ccc>
   174b4:	mov	r2, r0
   174b8:	add	r3, sp, #260	; 0x104
   174bc:	mov	r1, r4
   174c0:	add	r0, sp, #284	; 0x11c
   174c4:	bl	1cab8 <__assert_fail@plt+0xb548>
   174c8:	cmn	r0, #1
   174cc:	str	r0, [sp, #276]	; 0x114
   174d0:	beq	1758c <__assert_fail@plt+0x601c>
   174d4:	cmn	r0, #2
   174d8:	beq	1759c <__assert_fail@plt+0x602c>
   174dc:	cmp	r0, #0
   174e0:	beq	175b4 <__assert_fail@plt+0x6044>
   174e4:	ldr	r4, [sp, #284]	; 0x11c
   174e8:	add	r0, sp, #260	; 0x104
   174ec:	strb	r5, [sp, #280]	; 0x118
   174f0:	bl	11234 <mbsinit@plt>
   174f4:	cmp	r0, #0
   174f8:	strb	r5, [sp, #268]	; 0x10c
   174fc:	movne	r3, #0
   17500:	strbne	r3, [sp, #256]	; 0x100
   17504:	cmp	r4, #0
   17508:	bne	16e04 <__assert_fail@plt+0x5894>
   1750c:	bl	11540 <abort@plt>
   17510:	add	r8, sp, #92	; 0x5c
   17514:	mov	r0, r8
   17518:	bl	11234 <mbsinit@plt>
   1751c:	cmp	r0, #0
   17520:	beq	17674 <__assert_fail@plt+0x6104>
   17524:	strb	r5, [sp, #88]	; 0x58
   17528:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   1752c:	mov	r1, r0
   17530:	mov	r0, r9
   17534:	bl	1b23c <__assert_fail@plt+0x9ccc>
   17538:	mov	r2, r0
   1753c:	mov	r3, r8
   17540:	mov	r1, r9
   17544:	add	r0, sp, #116	; 0x74
   17548:	bl	1cab8 <__assert_fail@plt+0xb548>
   1754c:	cmn	r0, #1
   17550:	str	r0, [sp, #108]	; 0x6c
   17554:	beq	17618 <__assert_fail@plt+0x60a8>
   17558:	cmn	r0, #2
   1755c:	beq	175fc <__assert_fail@plt+0x608c>
   17560:	cmp	r0, #0
   17564:	beq	1762c <__assert_fail@plt+0x60bc>
   17568:	ldr	r4, [sp, #116]	; 0x74
   1756c:	mov	r0, r8
   17570:	strb	r5, [sp, #112]	; 0x70
   17574:	bl	11234 <mbsinit@plt>
   17578:	cmp	r0, #0
   1757c:	strb	r5, [sp, #100]	; 0x64
   17580:	movne	r3, #0
   17584:	strbne	r3, [sp, #88]	; 0x58
   17588:	b	17460 <__assert_fail@plt+0x5ef0>
   1758c:	str	fp, [sp, #276]	; 0x114
   17590:	strb	r6, [sp, #280]	; 0x118
   17594:	ldr	r4, [sp, #272]	; 0x110
   17598:	b	16e08 <__assert_fail@plt+0x5898>
   1759c:	ldr	r4, [sp, #272]	; 0x110
   175a0:	mov	r0, r4
   175a4:	bl	113c0 <strlen@plt>
   175a8:	str	r0, [sp, #276]	; 0x114
   175ac:	strb	r6, [sp, #280]	; 0x118
   175b0:	b	16e08 <__assert_fail@plt+0x5898>
   175b4:	ldr	r4, [sp, #272]	; 0x110
   175b8:	str	fp, [sp, #276]	; 0x114
   175bc:	ldrb	r3, [r4]
   175c0:	cmp	r3, #0
   175c4:	bne	17694 <__assert_fail@plt+0x6124>
   175c8:	ldr	r4, [sp, #284]	; 0x11c
   175cc:	cmp	r4, #0
   175d0:	beq	174e8 <__assert_fail@plt+0x5f78>
   175d4:	b	175f8 <__assert_fail@plt+0x6088>
   175d8:	ldr	r3, [sp, #48]	; 0x30
   175dc:	str	r6, [sp, #52]	; 0x34
   175e0:	ldrb	r3, [r3]
   175e4:	cmp	r3, #0
   175e8:	bne	17694 <__assert_fail@plt+0x6124>
   175ec:	ldr	r5, [sp, #60]	; 0x3c
   175f0:	cmp	r5, #0
   175f4:	beq	16b50 <__assert_fail@plt+0x55e0>
   175f8:	bl	160b0 <__assert_fail@plt+0x4b40>
   175fc:	ldr	r0, [sp, #104]	; 0x68
   17600:	bl	113c0 <strlen@plt>
   17604:	mov	r3, #0
   17608:	strb	r5, [sp, #100]	; 0x64
   1760c:	str	r0, [sp, #108]	; 0x6c
   17610:	strb	r3, [sp, #112]	; 0x70
   17614:	b	17468 <__assert_fail@plt+0x5ef8>
   17618:	mov	r3, #0
   1761c:	strb	r5, [sp, #100]	; 0x64
   17620:	str	fp, [sp, #108]	; 0x6c
   17624:	strb	r3, [sp, #112]	; 0x70
   17628:	b	17468 <__assert_fail@plt+0x5ef8>
   1762c:	ldr	r4, [sp, #104]	; 0x68
   17630:	str	fp, [sp, #108]	; 0x6c
   17634:	ldrb	r3, [r4]
   17638:	cmp	r3, #0
   1763c:	bne	17694 <__assert_fail@plt+0x6124>
   17640:	ldr	r4, [sp, #116]	; 0x74
   17644:	cmp	r4, #0
   17648:	beq	1756c <__assert_fail@plt+0x5ffc>
   1764c:	b	175f8 <__assert_fail@plt+0x6088>
   17650:	cmp	r3, #0
   17654:	beq	1741c <__assert_fail@plt+0x5eac>
   17658:	ldrb	r3, [sp, #112]	; 0x70
   1765c:	cmp	r3, #0
   17660:	ldrne	r4, [sp, #116]	; 0x74
   17664:	beq	17468 <__assert_fail@plt+0x5ef8>
   17668:	b	17460 <__assert_fail@plt+0x5ef0>
   1766c:	ldr	r0, [sp, #256]	; 0x100
   17670:	b	16b7c <__assert_fail@plt+0x560c>
   17674:	movw	r3, #61400	; 0xefd8
   17678:	movt	r3, #1
   1767c:	movw	r1, #61420	; 0xefec
   17680:	movt	r1, #1
   17684:	movw	r0, #61452	; 0xf00c
   17688:	movt	r0, #1
   1768c:	mov	r2, #143	; 0x8f
   17690:	bl	11570 <__assert_fail@plt>
   17694:	movw	r3, #61400	; 0xefd8
   17698:	movt	r3, #1
   1769c:	movw	r1, #61420	; 0xefec
   176a0:	movt	r1, #1
   176a4:	movw	r0, #61476	; 0xf024
   176a8:	movt	r0, #1
   176ac:	mov	r2, #171	; 0xab
   176b0:	bl	11570 <__assert_fail@plt>
   176b4:	strd	r4, [sp, #-16]!
   176b8:	subs	r4, r0, #0
   176bc:	str	r6, [sp, #8]
   176c0:	str	lr, [sp, #12]
   176c4:	beq	1775c <__assert_fail@plt+0x61ec>
   176c8:	mov	r1, #47	; 0x2f
   176cc:	bl	114b0 <strrchr@plt>
   176d0:	subs	r5, r0, #0
   176d4:	beq	17734 <__assert_fail@plt+0x61c4>
   176d8:	add	r6, r5, #1
   176dc:	sub	r3, r6, r4
   176e0:	cmp	r3, #6
   176e4:	ble	17734 <__assert_fail@plt+0x61c4>
   176e8:	movw	r1, #61556	; 0xf074
   176ec:	movt	r1, #1
   176f0:	mov	r2, #7
   176f4:	sub	r0, r5, #6
   176f8:	bl	11534 <strncmp@plt>
   176fc:	cmp	r0, #0
   17700:	bne	17734 <__assert_fail@plt+0x61c4>
   17704:	movw	r1, #61564	; 0xf07c
   17708:	movt	r1, #1
   1770c:	mov	r2, #3
   17710:	mov	r0, r6
   17714:	bl	11534 <strncmp@plt>
   17718:	cmp	r0, #0
   1771c:	movne	r4, r6
   17720:	bne	17734 <__assert_fail@plt+0x61c4>
   17724:	add	r4, r5, #4
   17728:	movw	r3, #440	; 0x1b8
   1772c:	movt	r3, #3
   17730:	str	r4, [r3]
   17734:	movw	r2, #692	; 0x2b4
   17738:	movt	r2, #3
   1773c:	ldr	r6, [sp, #8]
   17740:	movw	r3, #448	; 0x1c0
   17744:	movt	r3, #3
   17748:	str	r4, [r2]
   1774c:	str	r4, [r3]
   17750:	ldrd	r4, [sp]
   17754:	add	sp, sp, #12
   17758:	pop	{pc}		; (ldr pc, [sp], #4)
   1775c:	movw	r3, #464	; 0x1d0
   17760:	movt	r3, #3
   17764:	movw	r0, #61500	; 0xf03c
   17768:	movt	r0, #1
   1776c:	ldr	r3, [r3]
   17770:	mov	r2, #55	; 0x37
   17774:	mov	r1, #1
   17778:	bl	112d0 <fwrite@plt>
   1777c:	bl	11540 <abort@plt>
   17780:	mov	r2, #5
   17784:	strd	r4, [sp, #-16]!
   17788:	mov	r5, r0
   1778c:	str	r6, [sp, #8]
   17790:	mov	r6, r1
   17794:	mov	r1, r0
   17798:	mov	r0, #0
   1779c:	str	lr, [sp, #12]
   177a0:	bl	11258 <dcgettext@plt>
   177a4:	cmp	r5, r0
   177a8:	mov	r4, r0
   177ac:	beq	177c4 <__assert_fail@plt+0x6254>
   177b0:	mov	r0, r4
   177b4:	ldrd	r4, [sp]
   177b8:	ldr	r6, [sp, #8]
   177bc:	add	sp, sp, #12
   177c0:	pop	{pc}		; (ldr pc, [sp], #4)
   177c4:	bl	1cc9c <__assert_fail@plt+0xb72c>
   177c8:	ldrb	r3, [r0]
   177cc:	bic	r3, r3, #32
   177d0:	cmp	r3, #85	; 0x55
   177d4:	bne	1783c <__assert_fail@plt+0x62cc>
   177d8:	ldrb	r3, [r0, #1]
   177dc:	bic	r3, r3, #32
   177e0:	cmp	r3, #84	; 0x54
   177e4:	bne	178bc <__assert_fail@plt+0x634c>
   177e8:	ldrb	r3, [r0, #2]
   177ec:	bic	r3, r3, #32
   177f0:	cmp	r3, #70	; 0x46
   177f4:	bne	178bc <__assert_fail@plt+0x634c>
   177f8:	ldrb	r3, [r0, #3]
   177fc:	cmp	r3, #45	; 0x2d
   17800:	bne	178bc <__assert_fail@plt+0x634c>
   17804:	ldrb	r3, [r0, #4]
   17808:	cmp	r3, #56	; 0x38
   1780c:	bne	178bc <__assert_fail@plt+0x634c>
   17810:	ldrb	r3, [r0, #5]
   17814:	cmp	r3, #0
   17818:	bne	178bc <__assert_fail@plt+0x634c>
   1781c:	ldrb	r2, [r4]
   17820:	movw	r3, #61656	; 0xf0d8
   17824:	movt	r3, #1
   17828:	movw	r4, #61668	; 0xf0e4
   1782c:	movt	r4, #1
   17830:	cmp	r2, #96	; 0x60
   17834:	movne	r4, r3
   17838:	b	177b0 <__assert_fail@plt+0x6240>
   1783c:	cmp	r3, #71	; 0x47
   17840:	bne	178bc <__assert_fail@plt+0x634c>
   17844:	ldrb	r3, [r0, #1]
   17848:	bic	r3, r3, #32
   1784c:	cmp	r3, #66	; 0x42
   17850:	bne	178bc <__assert_fail@plt+0x634c>
   17854:	ldrb	r3, [r0, #2]
   17858:	cmp	r3, #49	; 0x31
   1785c:	bne	178bc <__assert_fail@plt+0x634c>
   17860:	ldrb	r3, [r0, #3]
   17864:	cmp	r3, #56	; 0x38
   17868:	bne	178bc <__assert_fail@plt+0x634c>
   1786c:	ldrb	r3, [r0, #4]
   17870:	cmp	r3, #48	; 0x30
   17874:	bne	178bc <__assert_fail@plt+0x634c>
   17878:	ldrb	r3, [r0, #5]
   1787c:	cmp	r3, #51	; 0x33
   17880:	bne	178bc <__assert_fail@plt+0x634c>
   17884:	ldrb	r3, [r0, #6]
   17888:	cmp	r3, #48	; 0x30
   1788c:	bne	178bc <__assert_fail@plt+0x634c>
   17890:	ldrb	r3, [r0, #7]
   17894:	cmp	r3, #0
   17898:	bne	178bc <__assert_fail@plt+0x634c>
   1789c:	ldrb	r2, [r4]
   178a0:	movw	r3, #61660	; 0xf0dc
   178a4:	movt	r3, #1
   178a8:	movw	r4, #61664	; 0xf0e0
   178ac:	movt	r4, #1
   178b0:	cmp	r2, #96	; 0x60
   178b4:	movne	r4, r3
   178b8:	b	177b0 <__assert_fail@plt+0x6240>
   178bc:	movw	r3, #61672	; 0xf0e8
   178c0:	movt	r3, #1
   178c4:	cmp	r6, #9
   178c8:	movw	r4, #61652	; 0xf0d4
   178cc:	movt	r4, #1
   178d0:	movne	r4, r3
   178d4:	b	177b0 <__assert_fail@plt+0x6240>
   178d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   178dc:	strd	r6, [sp, #8]
   178e0:	strd	r8, [sp, #16]
   178e4:	mov	r8, r3
   178e8:	strd	sl, [sp, #24]
   178ec:	mov	fp, r0
   178f0:	mov	sl, r1
   178f4:	str	lr, [sp, #32]
   178f8:	sub	sp, sp, #140	; 0x8c
   178fc:	ldr	r3, [sp, #180]	; 0xb4
   17900:	str	r2, [sp, #28]
   17904:	and	r4, r3, #2
   17908:	ubfx	r3, r3, #1, #1
   1790c:	str	r3, [sp, #44]	; 0x2c
   17910:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   17914:	ldr	r3, [sp, #176]	; 0xb0
   17918:	str	r0, [sp, #76]	; 0x4c
   1791c:	cmp	r3, #10
   17920:	ldrls	pc, [pc, r3, lsl #2]
   17924:	b	192c0 <__assert_fail@plt+0x7d50>
   17928:	andeq	r7, r1, r8, lsr #27
   1792c:	andeq	r7, r1, r4, asr #29
   17930:	andeq	r8, r1, r0, asr #8
   17934:	andeq	r7, r1, r0, lsr pc
   17938:			; <UNDEFINED> instruction: 0x00017cb0
   1793c:	andeq	r7, r1, ip, lsr #26
   17940:	andeq	r7, r1, r4, lsl #28
   17944:	andeq	r7, r1, ip, ror #28
   17948:	andeq	r7, r1, r4, asr r9
   1794c:	andeq	r7, r1, r4, asr r9
   17950:	andeq	r7, r1, r4, asr r9
   17954:	ldr	r3, [sp, #176]	; 0xb0
   17958:	cmp	r3, #10
   1795c:	beq	17988 <__assert_fail@plt+0x6418>
   17960:	mov	r1, r3
   17964:	movw	r0, #61676	; 0xf0ec
   17968:	movt	r0, #1
   1796c:	bl	17780 <__assert_fail@plt+0x6210>
   17970:	str	r0, [sp, #188]	; 0xbc
   17974:	movw	r0, #61672	; 0xf0e8
   17978:	movt	r0, #1
   1797c:	ldr	r1, [sp, #176]	; 0xb0
   17980:	bl	17780 <__assert_fail@plt+0x6210>
   17984:	str	r0, [sp, #192]	; 0xc0
   17988:	cmp	r4, #0
   1798c:	movne	r4, #0
   17990:	beq	1904c <__assert_fail@plt+0x7adc>
   17994:	mov	r5, #0
   17998:	ldr	r0, [sp, #192]	; 0xc0
   1799c:	mov	r9, r5
   179a0:	str	r5, [sp, #64]	; 0x40
   179a4:	bl	113c0 <strlen@plt>
   179a8:	mov	r3, #1
   179ac:	ldr	r2, [sp, #44]	; 0x2c
   179b0:	cmp	r0, r5
   179b4:	moveq	r2, r5
   179b8:	str	r3, [sp, #32]
   179bc:	str	r3, [sp, #48]	; 0x30
   179c0:	str	r5, [sp, #52]	; 0x34
   179c4:	str	r3, [sp, #60]	; 0x3c
   179c8:	ldr	r3, [sp, #180]	; 0xb4
   179cc:	str	r0, [sp, #56]	; 0x38
   179d0:	str	r5, [sp, #68]	; 0x44
   179d4:	str	r5, [sp, #80]	; 0x50
   179d8:	str	r5, [sp, #84]	; 0x54
   179dc:	and	r3, r3, #1
   179e0:	str	r2, [sp, #88]	; 0x58
   179e4:	str	r3, [sp, #92]	; 0x5c
   179e8:	ldr	r3, [sp, #180]	; 0xb4
   179ec:	and	r3, r3, #4
   179f0:	str	r3, [sp, #96]	; 0x60
   179f4:	ldr	r3, [sp, #192]	; 0xc0
   179f8:	str	r3, [sp, #72]	; 0x48
   179fc:	mov	r3, fp
   17a00:	mov	r7, #0
   17a04:	mov	fp, r9
   17a08:	mov	r9, r3
   17a0c:	cmn	r8, #1
   17a10:	beq	18014 <__assert_fail@plt+0x6aa4>
   17a14:	subs	r6, r8, r7
   17a18:	movne	r6, #1
   17a1c:	cmp	r6, #0
   17a20:	beq	1802c <__assert_fail@plt+0x6abc>
   17a24:	ldr	r0, [sp, #28]
   17a28:	ldr	r3, [sp, #48]	; 0x30
   17a2c:	cmp	r3, #0
   17a30:	add	r3, r0, r7
   17a34:	str	r3, [sp, #36]	; 0x24
   17a38:	beq	184b8 <__assert_fail@plt+0x6f48>
   17a3c:	ldr	r2, [sp, #56]	; 0x38
   17a40:	cmp	r2, #0
   17a44:	beq	189b8 <__assert_fail@plt+0x7448>
   17a48:	cmp	r2, #1
   17a4c:	mov	r3, r2
   17a50:	movls	r3, #0
   17a54:	movhi	r3, #1
   17a58:	cmn	r8, #1
   17a5c:	add	r5, r7, r2
   17a60:	movne	r3, #0
   17a64:	cmp	r3, #0
   17a68:	beq	17a74 <__assert_fail@plt+0x6504>
   17a6c:	bl	113c0 <strlen@plt>
   17a70:	mov	r8, r0
   17a74:	cmp	r5, r8
   17a78:	bhi	189b8 <__assert_fail@plt+0x7448>
   17a7c:	ldr	r0, [sp, #36]	; 0x24
   17a80:	ldr	r2, [sp, #56]	; 0x38
   17a84:	ldr	r1, [sp, #72]	; 0x48
   17a88:	bl	1124c <memcmp@plt>
   17a8c:	cmp	r0, #0
   17a90:	bne	189b8 <__assert_fail@plt+0x7448>
   17a94:	ldr	r3, [sp, #44]	; 0x2c
   17a98:	cmp	r3, #0
   17a9c:	bne	19164 <__assert_fail@plt+0x7bf4>
   17aa0:	ldr	r3, [sp, #36]	; 0x24
   17aa4:	ldrb	r5, [r3]
   17aa8:	cmp	r5, #126	; 0x7e
   17aac:	ldrls	pc, [pc, r5, lsl #2]
   17ab0:	b	18f4c <__assert_fail@plt+0x79dc>
   17ab4:	andeq	r8, r1, r8, lsl #3
   17ab8:	andeq	r8, r1, ip, asr #30
   17abc:	andeq	r8, r1, ip, asr #30
   17ac0:	andeq	r8, r1, ip, asr #30
   17ac4:	andeq	r8, r1, ip, asr #30
   17ac8:	andeq	r8, r1, ip, asr #30
   17acc:	andeq	r8, r1, ip, asr #30
   17ad0:	andeq	r8, r1, r0, ror #1
   17ad4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17ad8:	andeq	r8, r1, r8, ror #1
   17adc:	andeq	r8, r1, ip, ror #4
   17ae0:	andeq	r8, r1, ip, asr r2
   17ae4:	andeq	r7, r1, r4, lsl #31
   17ae8:	andeq	r8, r1, r8, lsr r2
   17aec:	andeq	r8, r1, ip, asr #30
   17af0:	andeq	r8, r1, ip, asr #30
   17af4:	andeq	r8, r1, ip, asr #30
   17af8:	andeq	r8, r1, ip, asr #30
   17afc:	andeq	r8, r1, ip, asr #30
   17b00:	andeq	r8, r1, ip, asr #30
   17b04:	andeq	r8, r1, ip, asr #30
   17b08:	andeq	r8, r1, ip, asr #30
   17b0c:	andeq	r8, r1, ip, asr #30
   17b10:	andeq	r8, r1, ip, asr #30
   17b14:	andeq	r8, r1, ip, asr #30
   17b18:	andeq	r8, r1, ip, asr #30
   17b1c:	andeq	r8, r1, ip, asr #30
   17b20:	andeq	r8, r1, ip, asr #30
   17b24:	andeq	r8, r1, ip, asr #30
   17b28:	andeq	r8, r1, ip, asr #30
   17b2c:	andeq	r8, r1, ip, asr #30
   17b30:	andeq	r8, r1, ip, asr #30
   17b34:	andeq	r8, r1, r4, ror #5
   17b38:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b3c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b40:	andeq	r8, r1, ip, asr #5
   17b44:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b48:			; <UNDEFINED> instruction: 0x000183b0
   17b4c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b50:	andeq	r8, r1, r0, lsr #8
   17b54:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b58:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b5c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17b60:			; <UNDEFINED> instruction: 0x000183b0
   17b64:			; <UNDEFINED> instruction: 0x000183b0
   17b68:			; <UNDEFINED> instruction: 0x000183b0
   17b6c:			; <UNDEFINED> instruction: 0x000183b0
   17b70:			; <UNDEFINED> instruction: 0x000183b0
   17b74:			; <UNDEFINED> instruction: 0x000183b0
   17b78:			; <UNDEFINED> instruction: 0x000183b0
   17b7c:			; <UNDEFINED> instruction: 0x000183b0
   17b80:			; <UNDEFINED> instruction: 0x000183b0
   17b84:			; <UNDEFINED> instruction: 0x000183b0
   17b88:			; <UNDEFINED> instruction: 0x000183b0
   17b8c:			; <UNDEFINED> instruction: 0x000183b0
   17b90:			; <UNDEFINED> instruction: 0x000183b0
   17b94:			; <UNDEFINED> instruction: 0x000183b0
   17b98:			; <UNDEFINED> instruction: 0x000183b0
   17b9c:			; <UNDEFINED> instruction: 0x000183b0
   17ba0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17ba4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17ba8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17bac:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17bb0:	ldrdeq	r8, [r1], -r0
   17bb4:	andeq	r8, r1, ip, asr #30
   17bb8:			; <UNDEFINED> instruction: 0x000183b0
   17bbc:			; <UNDEFINED> instruction: 0x000183b0
   17bc0:			; <UNDEFINED> instruction: 0x000183b0
   17bc4:			; <UNDEFINED> instruction: 0x000183b0
   17bc8:			; <UNDEFINED> instruction: 0x000183b0
   17bcc:			; <UNDEFINED> instruction: 0x000183b0
   17bd0:			; <UNDEFINED> instruction: 0x000183b0
   17bd4:			; <UNDEFINED> instruction: 0x000183b0
   17bd8:			; <UNDEFINED> instruction: 0x000183b0
   17bdc:			; <UNDEFINED> instruction: 0x000183b0
   17be0:			; <UNDEFINED> instruction: 0x000183b0
   17be4:			; <UNDEFINED> instruction: 0x000183b0
   17be8:			; <UNDEFINED> instruction: 0x000183b0
   17bec:			; <UNDEFINED> instruction: 0x000183b0
   17bf0:			; <UNDEFINED> instruction: 0x000183b0
   17bf4:			; <UNDEFINED> instruction: 0x000183b0
   17bf8:			; <UNDEFINED> instruction: 0x000183b0
   17bfc:			; <UNDEFINED> instruction: 0x000183b0
   17c00:			; <UNDEFINED> instruction: 0x000183b0
   17c04:			; <UNDEFINED> instruction: 0x000183b0
   17c08:			; <UNDEFINED> instruction: 0x000183b0
   17c0c:			; <UNDEFINED> instruction: 0x000183b0
   17c10:			; <UNDEFINED> instruction: 0x000183b0
   17c14:			; <UNDEFINED> instruction: 0x000183b0
   17c18:			; <UNDEFINED> instruction: 0x000183b0
   17c1c:			; <UNDEFINED> instruction: 0x000183b0
   17c20:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17c24:	andeq	r8, r1, r4, ror r3
   17c28:			; <UNDEFINED> instruction: 0x000183b0
   17c2c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17c30:			; <UNDEFINED> instruction: 0x000183b0
   17c34:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17c38:			; <UNDEFINED> instruction: 0x000183b0
   17c3c:			; <UNDEFINED> instruction: 0x000183b0
   17c40:			; <UNDEFINED> instruction: 0x000183b0
   17c44:			; <UNDEFINED> instruction: 0x000183b0
   17c48:			; <UNDEFINED> instruction: 0x000183b0
   17c4c:			; <UNDEFINED> instruction: 0x000183b0
   17c50:			; <UNDEFINED> instruction: 0x000183b0
   17c54:			; <UNDEFINED> instruction: 0x000183b0
   17c58:			; <UNDEFINED> instruction: 0x000183b0
   17c5c:			; <UNDEFINED> instruction: 0x000183b0
   17c60:			; <UNDEFINED> instruction: 0x000183b0
   17c64:			; <UNDEFINED> instruction: 0x000183b0
   17c68:			; <UNDEFINED> instruction: 0x000183b0
   17c6c:			; <UNDEFINED> instruction: 0x000183b0
   17c70:			; <UNDEFINED> instruction: 0x000183b0
   17c74:			; <UNDEFINED> instruction: 0x000183b0
   17c78:			; <UNDEFINED> instruction: 0x000183b0
   17c7c:			; <UNDEFINED> instruction: 0x000183b0
   17c80:			; <UNDEFINED> instruction: 0x000183b0
   17c84:			; <UNDEFINED> instruction: 0x000183b0
   17c88:			; <UNDEFINED> instruction: 0x000183b0
   17c8c:			; <UNDEFINED> instruction: 0x000183b0
   17c90:			; <UNDEFINED> instruction: 0x000183b0
   17c94:			; <UNDEFINED> instruction: 0x000183b0
   17c98:			; <UNDEFINED> instruction: 0x000183b0
   17c9c:			; <UNDEFINED> instruction: 0x000183b0
   17ca0:	andeq	r8, r1, r0, lsl #5
   17ca4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17ca8:	andeq	r8, r1, r0, lsl #5
   17cac:	andeq	r8, r1, ip, asr #5
   17cb0:	ldr	r3, [sp, #180]	; 0xb4
   17cb4:	cmp	r4, #0
   17cb8:	and	r3, r3, #1
   17cbc:	str	r3, [sp, #92]	; 0x5c
   17cc0:	ldr	r3, [sp, #180]	; 0xb4
   17cc4:	and	r3, r3, #4
   17cc8:	str	r3, [sp, #96]	; 0x60
   17ccc:	moveq	r3, #1
   17cd0:	streq	r3, [sp, #60]	; 0x3c
   17cd4:	beq	18464 <__assert_fail@plt+0x6ef4>
   17cd8:	mov	r3, #0
   17cdc:	mov	r2, #1
   17ce0:	mov	r4, r3
   17ce4:	mov	r9, r3
   17ce8:	str	r2, [sp, #32]
   17cec:	str	r2, [sp, #44]	; 0x2c
   17cf0:	str	r3, [sp, #48]	; 0x30
   17cf4:	str	r2, [sp, #52]	; 0x34
   17cf8:	str	r2, [sp, #56]	; 0x38
   17cfc:	str	r3, [sp, #60]	; 0x3c
   17d00:	str	r2, [sp, #64]	; 0x40
   17d04:	str	r2, [sp, #68]	; 0x44
   17d08:	str	r3, [sp, #80]	; 0x50
   17d0c:	str	r3, [sp, #84]	; 0x54
   17d10:	str	r3, [sp, #88]	; 0x58
   17d14:	movw	r3, #61672	; 0xf0e8
   17d18:	movt	r3, #1
   17d1c:	str	r3, [sp, #72]	; 0x48
   17d20:	mov	r3, #2
   17d24:	str	r3, [sp, #176]	; 0xb0
   17d28:	b	179fc <__assert_fail@plt+0x648c>
   17d2c:	ldr	r3, [sp, #180]	; 0xb4
   17d30:	cmp	r4, #0
   17d34:	and	r3, r3, #1
   17d38:	str	r3, [sp, #92]	; 0x5c
   17d3c:	ldr	r3, [sp, #180]	; 0xb4
   17d40:	and	r3, r3, #4
   17d44:	str	r3, [sp, #96]	; 0x60
   17d48:	bne	1911c <__assert_fail@plt+0x7bac>
   17d4c:	cmp	sl, #0
   17d50:	beq	18ec8 <__assert_fail@plt+0x7958>
   17d54:	mov	r3, #34	; 0x22
   17d58:	mov	r2, r4
   17d5c:	mov	r1, #1
   17d60:	mov	r9, r2
   17d64:	strb	r3, [fp]
   17d68:	movw	r3, #61652	; 0xf0d4
   17d6c:	movt	r3, #1
   17d70:	mov	r4, r1
   17d74:	str	r1, [sp, #32]
   17d78:	str	r2, [sp, #44]	; 0x2c
   17d7c:	str	r1, [sp, #48]	; 0x30
   17d80:	str	r2, [sp, #52]	; 0x34
   17d84:	str	r1, [sp, #56]	; 0x38
   17d88:	str	r1, [sp, #60]	; 0x3c
   17d8c:	str	r2, [sp, #64]	; 0x40
   17d90:	str	r2, [sp, #68]	; 0x44
   17d94:	str	r3, [sp, #72]	; 0x48
   17d98:	str	r2, [sp, #80]	; 0x50
   17d9c:	str	r2, [sp, #84]	; 0x54
   17da0:	str	r2, [sp, #88]	; 0x58
   17da4:	b	179fc <__assert_fail@plt+0x648c>
   17da8:	mov	r3, #0
   17dac:	mov	r2, #1
   17db0:	mov	r9, r3
   17db4:	str	r2, [sp, #32]
   17db8:	str	r3, [sp, #44]	; 0x2c
   17dbc:	str	r3, [sp, #48]	; 0x30
   17dc0:	str	r3, [sp, #52]	; 0x34
   17dc4:	str	r3, [sp, #60]	; 0x3c
   17dc8:	strd	r2, [sp, #64]	; 0x40
   17dcc:	str	r3, [sp, #72]	; 0x48
   17dd0:	str	r3, [sp, #80]	; 0x50
   17dd4:	str	r3, [sp, #88]	; 0x58
   17dd8:	ldr	r3, [sp, #180]	; 0xb4
   17ddc:	and	r3, r3, r2
   17de0:	str	r3, [sp, #92]	; 0x5c
   17de4:	ldr	r3, [sp, #180]	; 0xb4
   17de8:	and	r3, r3, #4
   17dec:	str	r3, [sp, #96]	; 0x60
   17df0:	ldr	r3, [sp, #176]	; 0xb0
   17df4:	mov	r4, r3
   17df8:	str	r3, [sp, #56]	; 0x38
   17dfc:	str	r3, [sp, #84]	; 0x54
   17e00:	b	179fc <__assert_fail@plt+0x648c>
   17e04:	mov	r3, #1
   17e08:	mov	r4, #0
   17e0c:	mov	r9, r4
   17e10:	str	r3, [sp, #32]
   17e14:	str	r3, [sp, #44]	; 0x2c
   17e18:	str	r3, [sp, #48]	; 0x30
   17e1c:	str	r4, [sp, #52]	; 0x34
   17e20:	str	r3, [sp, #56]	; 0x38
   17e24:	str	r3, [sp, #60]	; 0x3c
   17e28:	str	r3, [sp, #88]	; 0x58
   17e2c:	movw	r3, #61652	; 0xf0d4
   17e30:	movt	r3, #1
   17e34:	str	r4, [sp, #64]	; 0x40
   17e38:	str	r4, [sp, #68]	; 0x44
   17e3c:	str	r3, [sp, #72]	; 0x48
   17e40:	ldr	r3, [sp, #180]	; 0xb4
   17e44:	str	r4, [sp, #80]	; 0x50
   17e48:	str	r4, [sp, #84]	; 0x54
   17e4c:	and	r3, r3, #1
   17e50:	str	r3, [sp, #92]	; 0x5c
   17e54:	ldr	r3, [sp, #180]	; 0xb4
   17e58:	and	r3, r3, #4
   17e5c:	str	r3, [sp, #96]	; 0x60
   17e60:	mov	r3, #5
   17e64:	str	r3, [sp, #176]	; 0xb0
   17e68:	b	179fc <__assert_fail@plt+0x648c>
   17e6c:	mov	r3, #1
   17e70:	mov	r4, #0
   17e74:	mov	r9, r4
   17e78:	str	r3, [sp, #32]
   17e7c:	str	r4, [sp, #44]	; 0x2c
   17e80:	str	r3, [sp, #48]	; 0x30
   17e84:	str	r3, [sp, #60]	; 0x3c
   17e88:	ldr	r3, [sp, #180]	; 0xb4
   17e8c:	str	r4, [sp, #52]	; 0x34
   17e90:	str	r4, [sp, #56]	; 0x38
   17e94:	str	r4, [sp, #64]	; 0x40
   17e98:	str	r4, [sp, #68]	; 0x44
   17e9c:	and	r3, r3, #1
   17ea0:	str	r4, [sp, #72]	; 0x48
   17ea4:	str	r4, [sp, #80]	; 0x50
   17ea8:	str	r4, [sp, #84]	; 0x54
   17eac:	str	r3, [sp, #92]	; 0x5c
   17eb0:	ldr	r3, [sp, #180]	; 0xb4
   17eb4:	str	r4, [sp, #88]	; 0x58
   17eb8:	and	r3, r3, #4
   17ebc:	str	r3, [sp, #96]	; 0x60
   17ec0:	b	179fc <__assert_fail@plt+0x648c>
   17ec4:	mov	r3, #0
   17ec8:	mov	r2, #1
   17ecc:	ldr	r1, [sp, #176]	; 0xb0
   17ed0:	mov	r4, r3
   17ed4:	mov	r9, r3
   17ed8:	movw	r3, #61672	; 0xf0e8
   17edc:	movt	r3, #1
   17ee0:	str	r2, [sp, #32]
   17ee4:	str	r2, [sp, #44]	; 0x2c
   17ee8:	str	r4, [sp, #48]	; 0x30
   17eec:	strd	r2, [sp, #68]	; 0x44
   17ef0:	ldr	r3, [sp, #180]	; 0xb4
   17ef4:	str	r2, [sp, #52]	; 0x34
   17ef8:	str	r1, [sp, #56]	; 0x38
   17efc:	str	r4, [sp, #60]	; 0x3c
   17f00:	str	r2, [sp, #64]	; 0x40
   17f04:	and	r3, r3, r2
   17f08:	str	r4, [sp, #80]	; 0x50
   17f0c:	str	r4, [sp, #84]	; 0x54
   17f10:	str	r4, [sp, #88]	; 0x58
   17f14:	str	r3, [sp, #92]	; 0x5c
   17f18:	ldr	r3, [sp, #180]	; 0xb4
   17f1c:	and	r3, r3, #4
   17f20:	str	r3, [sp, #96]	; 0x60
   17f24:	mov	r3, #2
   17f28:	str	r3, [sp, #176]	; 0xb0
   17f2c:	b	179fc <__assert_fail@plt+0x648c>
   17f30:	mov	r3, #1
   17f34:	mov	r2, #0
   17f38:	mov	r4, r2
   17f3c:	mov	r9, r2
   17f40:	str	r3, [sp, #32]
   17f44:	str	r3, [sp, #44]	; 0x2c
   17f48:	str	r2, [sp, #48]	; 0x30
   17f4c:	str	r3, [sp, #52]	; 0x34
   17f50:	str	r3, [sp, #56]	; 0x38
   17f54:	str	r3, [sp, #60]	; 0x3c
   17f58:	str	r3, [sp, #64]	; 0x40
   17f5c:	str	r3, [sp, #68]	; 0x44
   17f60:	str	r3, [sp, #88]	; 0x58
   17f64:	movw	r3, #61672	; 0xf0e8
   17f68:	movt	r3, #1
   17f6c:	str	r3, [sp, #72]	; 0x48
   17f70:	ldr	r3, [sp, #180]	; 0xb4
   17f74:	str	r2, [sp, #80]	; 0x50
   17f78:	str	r2, [sp, #84]	; 0x54
   17f7c:	and	r3, r3, #1
   17f80:	b	17f14 <__assert_fail@plt+0x69a4>
   17f84:	mov	r5, #102	; 0x66
   17f88:	mov	r6, #0
   17f8c:	ldr	r3, [sp, #44]	; 0x2c
   17f90:	cmp	r3, #0
   17f94:	bne	18e44 <__assert_fail@plt+0x78d4>
   17f98:	ldr	r2, [sp, #52]	; 0x34
   17f9c:	eor	r3, fp, #1
   17fa0:	ands	r3, r2, r3
   17fa4:	beq	17fdc <__assert_fail@plt+0x6a6c>
   17fa8:	cmp	sl, r4
   17fac:	mov	fp, r3
   17fb0:	movhi	r2, #39	; 0x27
   17fb4:	strbhi	r2, [r9, r4]
   17fb8:	add	r2, r4, #1
   17fbc:	cmp	sl, r2
   17fc0:	movhi	r1, #36	; 0x24
   17fc4:	strbhi	r1, [r9, r2]
   17fc8:	add	r2, r4, #2
   17fcc:	add	r4, r4, #3
   17fd0:	cmp	sl, r2
   17fd4:	movhi	r1, #39	; 0x27
   17fd8:	strbhi	r1, [r9, r2]
   17fdc:	cmp	sl, r4
   17fe0:	add	r7, r7, #1
   17fe4:	movhi	r3, #92	; 0x5c
   17fe8:	strbhi	r3, [r9, r4]
   17fec:	add	r4, r4, #1
   17ff0:	cmp	r4, sl
   17ff4:	ldr	r3, [sp, #32]
   17ff8:	strbcc	r5, [r9, r4]
   17ffc:	cmp	r6, #0
   18000:	add	r4, r4, #1
   18004:	moveq	r3, #0
   18008:	cmn	r8, #1
   1800c:	str	r3, [sp, #32]
   18010:	bne	17a14 <__assert_fail@plt+0x64a4>
   18014:	ldr	r3, [sp, #28]
   18018:	ldrb	r6, [r3, r7]
   1801c:	adds	r6, r6, #0
   18020:	movne	r6, #1
   18024:	cmp	r6, #0
   18028:	bne	17a24 <__assert_fail@plt+0x64b4>
   1802c:	mov	r3, r9
   18030:	mov	r9, fp
   18034:	mov	fp, r3
   18038:	ldr	r3, [sp, #68]	; 0x44
   1803c:	cmp	r4, #0
   18040:	movne	r3, #0
   18044:	cmp	r3, #0
   18048:	bne	1923c <__assert_fail@plt+0x7ccc>
   1804c:	ldr	r3, [sp, #44]	; 0x2c
   18050:	ldr	r2, [sp, #52]	; 0x34
   18054:	eor	r3, r3, #1
   18058:	ands	r2, r3, r2
   1805c:	beq	19174 <__assert_fail@plt+0x7c04>
   18060:	ldr	r3, [sp, #80]	; 0x50
   18064:	cmp	r3, #0
   18068:	beq	19178 <__assert_fail@plt+0x7c08>
   1806c:	ldr	r3, [sp, #32]
   18070:	cmp	r3, #0
   18074:	bne	191ec <__assert_fail@plt+0x7c7c>
   18078:	ldr	r3, [sp, #84]	; 0x54
   1807c:	adds	r3, r3, #0
   18080:	movne	r3, #1
   18084:	cmp	sl, #0
   18088:	movne	r3, #0
   1808c:	cmp	r3, #0
   18090:	ldreq	r2, [sp, #80]	; 0x50
   18094:	beq	19178 <__assert_fail@plt+0x7c08>
   18098:	ldr	r2, [sp, #84]	; 0x54
   1809c:	mov	sl, r2
   180a0:	mov	r0, #0
   180a4:	mov	r4, #1
   180a8:	mov	r1, #39	; 0x27
   180ac:	str	r0, [sp, #44]	; 0x2c
   180b0:	strb	r1, [fp]
   180b4:	str	r0, [sp, #48]	; 0x30
   180b8:	str	r4, [sp, #52]	; 0x34
   180bc:	str	r4, [sp, #56]	; 0x38
   180c0:	str	r4, [sp, #64]	; 0x40
   180c4:	str	r0, [sp, #68]	; 0x44
   180c8:	str	r3, [sp, #80]	; 0x50
   180cc:	str	r2, [sp, #84]	; 0x54
   180d0:	str	r0, [sp, #88]	; 0x58
   180d4:	b	17d14 <__assert_fail@plt+0x67a4>
   180d8:	mov	r5, #98	; 0x62
   180dc:	b	17f88 <__assert_fail@plt+0x6a18>
   180e0:	mov	r5, #97	; 0x61
   180e4:	b	17f88 <__assert_fail@plt+0x6a18>
   180e8:	ldr	r3, [sp, #48]	; 0x30
   180ec:	str	r3, [sp, #40]	; 0x28
   180f0:	mov	r3, #116	; 0x74
   180f4:	ldr	r2, [sp, #68]	; 0x44
   180f8:	cmp	r2, #0
   180fc:	bne	182f8 <__assert_fail@plt+0x6d88>
   18100:	ldr	r2, [sp, #60]	; 0x3c
   18104:	cmp	r2, #0
   18108:	bne	18254 <__assert_fail@plt+0x6ce4>
   1810c:	ldr	r3, [sp, #44]	; 0x2c
   18110:	mov	r6, #0
   18114:	cmp	r3, #0
   18118:	beq	182c4 <__assert_fail@plt+0x6d54>
   1811c:	mov	r3, fp
   18120:	ldr	r2, [sp, #184]	; 0xb8
   18124:	cmp	r2, #0
   18128:	beq	18148 <__assert_fail@plt+0x6bd8>
   1812c:	ubfx	r1, r5, #5, #8
   18130:	mov	r0, r2
   18134:	and	r2, r5, #31
   18138:	ldr	r1, [r0, r1, lsl #2]
   1813c:	lsr	r2, r1, r2
   18140:	tst	r2, #1
   18144:	bne	17f8c <__assert_fail@plt+0x6a1c>
   18148:	ldr	r2, [sp, #40]	; 0x28
   1814c:	cmp	r2, #0
   18150:	addeq	r7, r7, #1
   18154:	bne	17f8c <__assert_fail@plt+0x6a1c>
   18158:	cmp	r3, #0
   1815c:	beq	17ff0 <__assert_fail@plt+0x6a80>
   18160:	cmp	sl, r4
   18164:	mov	fp, #0
   18168:	movhi	r3, #39	; 0x27
   1816c:	strbhi	r3, [r9, r4]
   18170:	add	r3, r4, #1
   18174:	add	r4, r4, #2
   18178:	cmp	sl, r3
   1817c:	movhi	r2, #39	; 0x27
   18180:	strbhi	r2, [r9, r3]
   18184:	b	17ff0 <__assert_fail@plt+0x6a80>
   18188:	ldr	r3, [sp, #48]	; 0x30
   1818c:	str	r3, [sp, #40]	; 0x28
   18190:	eor	r3, fp, #1
   18194:	ldr	r2, [sp, #52]	; 0x34
   18198:	ands	r2, r2, r3
   1819c:	beq	18e5c <__assert_fail@plt+0x78ec>
   181a0:	cmp	sl, r4
   181a4:	movhi	r3, #39	; 0x27
   181a8:	strbhi	r3, [r9, r4]
   181ac:	add	r3, r4, #1
   181b0:	cmp	sl, r3
   181b4:	movhi	r1, #36	; 0x24
   181b8:	strbhi	r1, [r9, r3]
   181bc:	add	r3, r4, #2
   181c0:	cmp	sl, r3
   181c4:	movhi	r1, #39	; 0x27
   181c8:	strbhi	r1, [r9, r3]
   181cc:	add	r3, r4, #3
   181d0:	cmp	sl, r3
   181d4:	bls	18ea8 <__assert_fail@plt+0x7938>
   181d8:	mov	r4, r3
   181dc:	mov	r3, #92	; 0x5c
   181e0:	mov	fp, r2
   181e4:	mov	r2, r4
   181e8:	strb	r3, [r9, r4]
   181ec:	ldr	r3, [sp, #176]	; 0xb0
   181f0:	add	r4, r4, #1
   181f4:	cmp	r3, #2
   181f8:	beq	18f10 <__assert_fail@plt+0x79a0>
   181fc:	add	r3, r7, #1
   18200:	cmp	r3, r8
   18204:	bcs	1821c <__assert_fail@plt+0x6cac>
   18208:	ldr	r1, [sp, #28]
   1820c:	ldrb	r3, [r1, r3]
   18210:	sub	r3, r3, #48	; 0x30
   18214:	cmp	r3, #9
   18218:	bls	18f20 <__assert_fail@plt+0x79b0>
   1821c:	mov	r3, #0
   18220:	mov	r5, #48	; 0x30
   18224:	ldr	r6, [sp, #64]	; 0x40
   18228:	cmp	r6, #0
   1822c:	beq	18120 <__assert_fail@plt+0x6bb0>
   18230:	mov	r6, #0
   18234:	b	18148 <__assert_fail@plt+0x6bd8>
   18238:	ldr	r3, [sp, #48]	; 0x30
   1823c:	str	r3, [sp, #40]	; 0x28
   18240:	ldr	r2, [sp, #60]	; 0x3c
   18244:	mov	r5, #13
   18248:	mov	r3, #114	; 0x72
   1824c:	cmp	r2, #0
   18250:	beq	1810c <__assert_fail@plt+0x6b9c>
   18254:	mov	r5, r3
   18258:	b	17f88 <__assert_fail@plt+0x6a18>
   1825c:	ldr	r3, [sp, #48]	; 0x30
   18260:	str	r3, [sp, #40]	; 0x28
   18264:	mov	r3, #118	; 0x76
   18268:	b	18100 <__assert_fail@plt+0x6b90>
   1826c:	ldr	r3, [sp, #48]	; 0x30
   18270:	str	r3, [sp, #40]	; 0x28
   18274:	mov	r5, #10
   18278:	mov	r3, #110	; 0x6e
   1827c:	b	18100 <__assert_fail@plt+0x6b90>
   18280:	ldr	r3, [sp, #48]	; 0x30
   18284:	cmn	r8, #1
   18288:	str	r3, [sp, #40]	; 0x28
   1828c:	beq	186d4 <__assert_fail@plt+0x7164>
   18290:	subs	r3, r8, #1
   18294:	movne	r3, #1
   18298:	cmp	r3, #0
   1829c:	bne	182a8 <__assert_fail@plt+0x6d38>
   182a0:	cmp	r7, #0
   182a4:	beq	182ec <__assert_fail@plt+0x6d7c>
   182a8:	mov	r6, #0
   182ac:	ldr	r3, [sp, #64]	; 0x40
   182b0:	cmp	r3, #0
   182b4:	beq	1811c <__assert_fail@plt+0x6bac>
   182b8:	ldr	r3, [sp, #44]	; 0x2c
   182bc:	cmp	r3, #0
   182c0:	bne	1811c <__assert_fail@plt+0x6bac>
   182c4:	mov	r3, fp
   182c8:	b	18148 <__assert_fail@plt+0x6bd8>
   182cc:	ldr	r3, [sp, #48]	; 0x30
   182d0:	str	r3, [sp, #40]	; 0x28
   182d4:	b	182a0 <__assert_fail@plt+0x6d30>
   182d8:	ldr	r3, [sp, #48]	; 0x30
   182dc:	str	r3, [sp, #40]	; 0x28
   182e0:	b	182a8 <__assert_fail@plt+0x6d38>
   182e4:	ldr	r6, [sp, #48]	; 0x30
   182e8:	str	r6, [sp, #40]	; 0x28
   182ec:	ldr	r3, [sp, #68]	; 0x44
   182f0:	cmp	r3, #0
   182f4:	beq	182ac <__assert_fail@plt+0x6d3c>
   182f8:	mov	r3, #2
   182fc:	mov	fp, r9
   18300:	str	r3, [sp, #176]	; 0xb0
   18304:	ldr	r3, [sp, #60]	; 0x3c
   18308:	cmp	r3, #0
   1830c:	ldr	r3, [sp, #176]	; 0xb0
   18310:	movne	r3, #4
   18314:	str	r3, [sp, #176]	; 0xb0
   18318:	mov	lr, #0
   1831c:	mov	r0, fp
   18320:	ldr	r2, [sp, #28]
   18324:	ldr	r3, [sp, #180]	; 0xb4
   18328:	ldr	r1, [sp, #188]	; 0xbc
   1832c:	bic	ip, r3, #2
   18330:	ldr	r3, [sp, #176]	; 0xb0
   18334:	stm	sp, {r3, ip, lr}
   18338:	mov	r3, r8
   1833c:	ldr	ip, [sp, #192]	; 0xc0
   18340:	str	r1, [sp, #12]
   18344:	mov	r1, sl
   18348:	str	ip, [sp, #16]
   1834c:	bl	178d8 <__assert_fail@plt+0x6368>
   18350:	mov	r4, r0
   18354:	mov	r0, r4
   18358:	add	sp, sp, #140	; 0x8c
   1835c:	ldrd	r4, [sp]
   18360:	ldrd	r6, [sp, #8]
   18364:	ldrd	r8, [sp, #16]
   18368:	ldrd	sl, [sp, #24]
   1836c:	add	sp, sp, #32
   18370:	pop	{pc}		; (ldr pc, [sp], #4)
   18374:	ldr	r3, [sp, #48]	; 0x30
   18378:	str	r3, [sp, #40]	; 0x28
   1837c:	ldr	r3, [sp, #176]	; 0xb0
   18380:	cmp	r3, #2
   18384:	beq	186fc <__assert_fail@plt+0x718c>
   18388:	ldr	r3, [sp, #88]	; 0x58
   1838c:	cmp	r3, #0
   18390:	moveq	r5, #92	; 0x5c
   18394:	moveq	r3, r5
   18398:	beq	18100 <__assert_fail@plt+0x6b90>
   1839c:	add	r7, r7, #1
   183a0:	mov	r3, fp
   183a4:	mov	r6, #0
   183a8:	mov	r5, #92	; 0x5c
   183ac:	b	18158 <__assert_fail@plt+0x6be8>
   183b0:	ldr	r3, [sp, #64]	; 0x40
   183b4:	cmp	r3, #0
   183b8:	bne	19230 <__assert_fail@plt+0x7cc0>
   183bc:	ldr	r2, [sp, #48]	; 0x30
   183c0:	mov	r3, fp
   183c4:	mov	r6, r2
   183c8:	str	r2, [sp, #40]	; 0x28
   183cc:	b	18120 <__assert_fail@plt+0x6bb0>
   183d0:	ldr	r3, [sp, #176]	; 0xb0
   183d4:	cmp	r3, #2
   183d8:	beq	1916c <__assert_fail@plt+0x7bfc>
   183dc:	cmp	r3, #5
   183e0:	ldr	r3, [sp, #48]	; 0x30
   183e4:	str	r3, [sp, #40]	; 0x28
   183e8:	bne	18414 <__assert_fail@plt+0x6ea4>
   183ec:	ldr	r3, [sp, #96]	; 0x60
   183f0:	cmp	r3, #0
   183f4:	beq	18e70 <__assert_fail@plt+0x7900>
   183f8:	add	r3, r7, #2
   183fc:	cmp	r3, r8
   18400:	bcs	18414 <__assert_fail@plt+0x6ea4>
   18404:	ldr	r2, [sp, #36]	; 0x24
   18408:	ldrb	r5, [r2, #1]
   1840c:	cmp	r5, #63	; 0x3f
   18410:	beq	18f58 <__assert_fail@plt+0x79e8>
   18414:	mov	r6, #0
   18418:	mov	r5, #63	; 0x3f
   1841c:	b	182ac <__assert_fail@plt+0x6d3c>
   18420:	ldr	r3, [sp, #176]	; 0xb0
   18424:	cmp	r3, #2
   18428:	ldr	r3, [sp, #48]	; 0x30
   1842c:	beq	18c14 <__assert_fail@plt+0x76a4>
   18430:	mov	r5, #39	; 0x27
   18434:	str	r3, [sp, #40]	; 0x28
   18438:	str	r6, [sp, #80]	; 0x50
   1843c:	b	182ac <__assert_fail@plt+0x6d3c>
   18440:	ldr	r3, [sp, #180]	; 0xb4
   18444:	cmp	r4, #0
   18448:	and	r3, r3, #1
   1844c:	str	r3, [sp, #92]	; 0x5c
   18450:	ldr	r3, [sp, #180]	; 0xb4
   18454:	and	r3, r3, #4
   18458:	str	r3, [sp, #96]	; 0x60
   1845c:	bne	1927c <__assert_fail@plt+0x7d0c>
   18460:	str	r4, [sp, #60]	; 0x3c
   18464:	cmp	sl, #0
   18468:	bne	19260 <__assert_fail@plt+0x7cf0>
   1846c:	mov	r3, #1
   18470:	movw	r2, #61672	; 0xf0e8
   18474:	movt	r2, #1
   18478:	mov	r4, r3
   1847c:	mov	r3, #2
   18480:	mov	r9, sl
   18484:	str	r4, [sp, #32]
   18488:	str	sl, [sp, #44]	; 0x2c
   1848c:	str	sl, [sp, #48]	; 0x30
   18490:	str	r4, [sp, #52]	; 0x34
   18494:	str	r4, [sp, #56]	; 0x38
   18498:	str	r4, [sp, #64]	; 0x40
   1849c:	str	sl, [sp, #68]	; 0x44
   184a0:	str	r2, [sp, #72]	; 0x48
   184a4:	str	sl, [sp, #80]	; 0x50
   184a8:	str	sl, [sp, #84]	; 0x54
   184ac:	str	sl, [sp, #88]	; 0x58
   184b0:	str	r3, [sp, #176]	; 0xb0
   184b4:	b	179fc <__assert_fail@plt+0x648c>
   184b8:	ldrb	r5, [r0, r7]
   184bc:	cmp	r5, #126	; 0x7e
   184c0:	ldrls	pc, [pc, r5, lsl #2]
   184c4:	b	18828 <__assert_fail@plt+0x72b8>
   184c8:	strdeq	r8, [r1], -r4
   184cc:	andeq	r8, r1, r8, lsr #16
   184d0:	andeq	r8, r1, r8, lsr #16
   184d4:	andeq	r8, r1, r8, lsr #16
   184d8:	andeq	r8, r1, r8, lsr #16
   184dc:	andeq	r8, r1, r8, lsr #16
   184e0:	andeq	r8, r1, r8, lsr #16
   184e4:	andeq	r8, r1, r4, ror #15
   184e8:	ldrdeq	r8, [r1], -r4
   184ec:	andeq	r8, r1, r8, asr r7
   184f0:	andeq	r8, r1, r4, asr #15
   184f4:	andeq	r8, r1, r8, lsr r7
   184f8:	andeq	r8, r1, r8, lsl r8
   184fc:	andeq	r8, r1, r4, lsr #15
   18500:	andeq	r8, r1, r8, lsr #16
   18504:	andeq	r8, r1, r8, lsr #16
   18508:	andeq	r8, r1, r8, lsr #16
   1850c:	andeq	r8, r1, r8, lsr #16
   18510:	andeq	r8, r1, r8, lsr #16
   18514:	andeq	r8, r1, r8, lsr #16
   18518:	andeq	r8, r1, r8, lsr #16
   1851c:	andeq	r8, r1, r8, lsr #16
   18520:	andeq	r8, r1, r8, lsr #16
   18524:	andeq	r8, r1, r8, lsr #16
   18528:	andeq	r8, r1, r8, lsr #16
   1852c:	andeq	r8, r1, r8, lsr #16
   18530:	andeq	r8, r1, r8, lsr #16
   18534:	andeq	r8, r1, r8, lsr #16
   18538:	andeq	r8, r1, r8, lsr #16
   1853c:	andeq	r8, r1, r8, lsr #16
   18540:	andeq	r8, r1, r8, lsr #16
   18544:	andeq	r8, r1, r8, lsr #16
   18548:	andeq	r8, r1, ip, asr #14
   1854c:			; <UNDEFINED> instruction: 0x000187b4
   18550:			; <UNDEFINED> instruction: 0x000187b4
   18554:	andeq	r8, r1, ip, lsr #14
   18558:			; <UNDEFINED> instruction: 0x000187b4
   1855c:	andeq	r8, r1, r0, lsr #14
   18560:			; <UNDEFINED> instruction: 0x000187b4
   18564:	muleq	r1, r0, r7
   18568:			; <UNDEFINED> instruction: 0x000187b4
   1856c:			; <UNDEFINED> instruction: 0x000187b4
   18570:			; <UNDEFINED> instruction: 0x000187b4
   18574:	andeq	r8, r1, r0, lsr #14
   18578:	andeq	r8, r1, r0, lsr #14
   1857c:	andeq	r8, r1, r0, lsr #14
   18580:	andeq	r8, r1, r0, lsr #14
   18584:	andeq	r8, r1, r0, lsr #14
   18588:	andeq	r8, r1, r0, lsr #14
   1858c:	andeq	r8, r1, r0, lsr #14
   18590:	andeq	r8, r1, r0, lsr #14
   18594:	andeq	r8, r1, r0, lsr #14
   18598:	andeq	r8, r1, r0, lsr #14
   1859c:	andeq	r8, r1, r0, lsr #14
   185a0:	andeq	r8, r1, r0, lsr #14
   185a4:	andeq	r8, r1, r0, lsr #14
   185a8:	andeq	r8, r1, r0, lsr #14
   185ac:	andeq	r8, r1, r0, lsr #14
   185b0:	andeq	r8, r1, r0, lsr #14
   185b4:			; <UNDEFINED> instruction: 0x000187b4
   185b8:			; <UNDEFINED> instruction: 0x000187b4
   185bc:			; <UNDEFINED> instruction: 0x000187b4
   185c0:			; <UNDEFINED> instruction: 0x000187b4
   185c4:	andeq	r8, r1, r8, ror #14
   185c8:	andeq	r8, r1, r8, lsr #16
   185cc:	andeq	r8, r1, r0, lsr #14
   185d0:	andeq	r8, r1, r0, lsr #14
   185d4:	andeq	r8, r1, r0, lsr #14
   185d8:	andeq	r8, r1, r0, lsr #14
   185dc:	andeq	r8, r1, r0, lsr #14
   185e0:	andeq	r8, r1, r0, lsr #14
   185e4:	andeq	r8, r1, r0, lsr #14
   185e8:	andeq	r8, r1, r0, lsr #14
   185ec:	andeq	r8, r1, r0, lsr #14
   185f0:	andeq	r8, r1, r0, lsr #14
   185f4:	andeq	r8, r1, r0, lsr #14
   185f8:	andeq	r8, r1, r0, lsr #14
   185fc:	andeq	r8, r1, r0, lsr #14
   18600:	andeq	r8, r1, r0, lsr #14
   18604:	andeq	r8, r1, r0, lsr #14
   18608:	andeq	r8, r1, r0, lsr #14
   1860c:	andeq	r8, r1, r0, lsr #14
   18610:	andeq	r8, r1, r0, lsr #14
   18614:	andeq	r8, r1, r0, lsr #14
   18618:	andeq	r8, r1, r0, lsr #14
   1861c:	andeq	r8, r1, r0, lsr #14
   18620:	andeq	r8, r1, r0, lsr #14
   18624:	andeq	r8, r1, r0, lsr #14
   18628:	andeq	r8, r1, r0, lsr #14
   1862c:	andeq	r8, r1, r0, lsr #14
   18630:	andeq	r8, r1, r0, lsr #14
   18634:			; <UNDEFINED> instruction: 0x000187b4
   18638:	andeq	r8, r1, r8, ror #13
   1863c:	andeq	r8, r1, r0, lsr #14
   18640:			; <UNDEFINED> instruction: 0x000187b4
   18644:	andeq	r8, r1, r0, lsr #14
   18648:			; <UNDEFINED> instruction: 0x000187b4
   1864c:	andeq	r8, r1, r0, lsr #14
   18650:	andeq	r8, r1, r0, lsr #14
   18654:	andeq	r8, r1, r0, lsr #14
   18658:	andeq	r8, r1, r0, lsr #14
   1865c:	andeq	r8, r1, r0, lsr #14
   18660:	andeq	r8, r1, r0, lsr #14
   18664:	andeq	r8, r1, r0, lsr #14
   18668:	andeq	r8, r1, r0, lsr #14
   1866c:	andeq	r8, r1, r0, lsr #14
   18670:	andeq	r8, r1, r0, lsr #14
   18674:	andeq	r8, r1, r0, lsr #14
   18678:	andeq	r8, r1, r0, lsr #14
   1867c:	andeq	r8, r1, r0, lsr #14
   18680:	andeq	r8, r1, r0, lsr #14
   18684:	andeq	r8, r1, r0, lsr #14
   18688:	andeq	r8, r1, r0, lsr #14
   1868c:	andeq	r8, r1, r0, lsr #14
   18690:	andeq	r8, r1, r0, lsr #14
   18694:	andeq	r8, r1, r0, lsr #14
   18698:	andeq	r8, r1, r0, lsr #14
   1869c:	andeq	r8, r1, r0, lsr #14
   186a0:	andeq	r8, r1, r0, lsr #14
   186a4:	andeq	r8, r1, r0, lsr #14
   186a8:	andeq	r8, r1, r0, lsr #14
   186ac:	andeq	r8, r1, r0, lsr #14
   186b0:	andeq	r8, r1, r0, lsr #14
   186b4:	andeq	r8, r1, r4, asr #13
   186b8:			; <UNDEFINED> instruction: 0x000187b4
   186bc:	andeq	r8, r1, r4, asr #13
   186c0:	andeq	r8, r1, ip, lsr #14
   186c4:	mov	r3, #0
   186c8:	cmn	r8, #1
   186cc:	str	r3, [sp, #40]	; 0x28
   186d0:	bne	18290 <__assert_fail@plt+0x6d20>
   186d4:	ldr	r3, [sp, #28]
   186d8:	ldrb	r3, [r3, #1]
   186dc:	adds	r3, r3, #0
   186e0:	movne	r3, #1
   186e4:	b	18298 <__assert_fail@plt+0x6d28>
   186e8:	mov	r3, #0
   186ec:	str	r3, [sp, #40]	; 0x28
   186f0:	ldr	r3, [sp, #176]	; 0xb0
   186f4:	cmp	r3, #2
   186f8:	bne	18388 <__assert_fail@plt+0x6e18>
   186fc:	ldr	r3, [sp, #44]	; 0x2c
   18700:	cmp	r3, #0
   18704:	bne	19044 <__assert_fail@plt+0x7ad4>
   18708:	mov	r6, r3
   1870c:	add	r7, r7, #1
   18710:	mov	r3, fp
   18714:	mov	r5, #92	; 0x5c
   18718:	b	18158 <__assert_fail@plt+0x6be8>
   1871c:	ldr	r6, [sp, #48]	; 0x30
   18720:	mov	r3, #0
   18724:	str	r3, [sp, #40]	; 0x28
   18728:	b	182ac <__assert_fail@plt+0x6d3c>
   1872c:	mov	r3, #0
   18730:	str	r3, [sp, #40]	; 0x28
   18734:	b	182a0 <__assert_fail@plt+0x6d30>
   18738:	mov	r3, #0
   1873c:	str	r3, [sp, #40]	; 0x28
   18740:	mov	r3, #118	; 0x76
   18744:	b	18100 <__assert_fail@plt+0x6b90>
   18748:	ldr	r6, [sp, #48]	; 0x30
   1874c:	mov	r3, #0
   18750:	str	r3, [sp, #40]	; 0x28
   18754:	b	182ec <__assert_fail@plt+0x6d7c>
   18758:	mov	r3, #0
   1875c:	str	r3, [sp, #40]	; 0x28
   18760:	mov	r3, #116	; 0x74
   18764:	b	180f4 <__assert_fail@plt+0x6b84>
   18768:	ldr	r3, [sp, #176]	; 0xb0
   1876c:	cmp	r3, #2
   18770:	beq	18c80 <__assert_fail@plt+0x7710>
   18774:	cmp	r3, #5
   18778:	mov	r3, #0
   1877c:	str	r3, [sp, #40]	; 0x28
   18780:	beq	183ec <__assert_fail@plt+0x6e7c>
   18784:	mov	r6, #0
   18788:	mov	r5, #63	; 0x3f
   1878c:	b	182ac <__assert_fail@plt+0x6d3c>
   18790:	ldr	r3, [sp, #176]	; 0xb0
   18794:	cmp	r3, #2
   18798:	beq	18c08 <__assert_fail@plt+0x7698>
   1879c:	mov	r3, #0
   187a0:	b	18430 <__assert_fail@plt+0x6ec0>
   187a4:	mov	r3, #0
   187a8:	str	r3, [sp, #40]	; 0x28
   187ac:	mov	r3, #114	; 0x72
   187b0:	b	180f4 <__assert_fail@plt+0x6b84>
   187b4:	mov	r3, #0
   187b8:	mov	r6, r3
   187bc:	str	r3, [sp, #40]	; 0x28
   187c0:	b	182ec <__assert_fail@plt+0x6d7c>
   187c4:	mov	r3, #0
   187c8:	str	r3, [sp, #40]	; 0x28
   187cc:	mov	r3, #110	; 0x6e
   187d0:	b	180f4 <__assert_fail@plt+0x6b84>
   187d4:	mov	r3, #0
   187d8:	str	r3, [sp, #40]	; 0x28
   187dc:	mov	r3, #98	; 0x62
   187e0:	b	18100 <__assert_fail@plt+0x6b90>
   187e4:	mov	r3, #0
   187e8:	str	r3, [sp, #40]	; 0x28
   187ec:	mov	r3, #97	; 0x61
   187f0:	b	18100 <__assert_fail@plt+0x6b90>
   187f4:	ldr	r3, [sp, #60]	; 0x3c
   187f8:	cmp	r3, #0
   187fc:	bne	18bec <__assert_fail@plt+0x767c>
   18800:	ldr	r3, [sp, #92]	; 0x5c
   18804:	cmp	r3, #0
   18808:	addne	r7, r7, #1
   1880c:	bne	17a0c <__assert_fail@plt+0x649c>
   18810:	str	r3, [sp, #40]	; 0x28
   18814:	b	1810c <__assert_fail@plt+0x6b9c>
   18818:	mov	r3, #0
   1881c:	str	r3, [sp, #40]	; 0x28
   18820:	mov	r3, #102	; 0x66
   18824:	b	18100 <__assert_fail@plt+0x6b90>
   18828:	mov	r3, #0
   1882c:	str	r3, [sp, #40]	; 0x28
   18830:	ldr	r3, [sp, #76]	; 0x4c
   18834:	cmp	r3, #1
   18838:	bne	18ca0 <__assert_fail@plt+0x7730>
   1883c:	bl	11390 <__ctype_b_loc@plt>
   18840:	ldr	r2, [r0]
   18844:	sxth	r3, r5
   18848:	lsl	r3, r3, #1
   1884c:	ldr	r1, [sp, #76]	; 0x4c
   18850:	ldrh	r3, [r2, r3]
   18854:	mov	r0, r1
   18858:	and	r3, r3, #16384	; 0x4000
   1885c:	cmp	r3, #0
   18860:	ldr	r3, [sp, #60]	; 0x3c
   18864:	movne	r6, #1
   18868:	moveq	r6, #0
   1886c:	movne	r2, #0
   18870:	andeq	r2, r3, #1
   18874:	cmp	r2, #0
   18878:	beq	182ac <__assert_fail@plt+0x6d3c>
   1887c:	ldr	r2, [sp, #60]	; 0x3c
   18880:	mov	r6, #0
   18884:	add	r1, r7, r0
   18888:	mov	ip, #39	; 0x27
   1888c:	str	r6, [sp, #100]	; 0x64
   18890:	mov	r0, #0
   18894:	ldr	lr, [sp, #36]	; 0x24
   18898:	str	r8, [sp, #36]	; 0x24
   1889c:	ldr	r6, [sp, #40]	; 0x28
   188a0:	ldr	r8, [sp, #44]	; 0x2c
   188a4:	b	18954 <__assert_fail@plt+0x73e4>
   188a8:	cmp	r8, #0
   188ac:	bne	18e88 <__assert_fail@plt+0x7918>
   188b0:	ldr	r0, [sp, #52]	; 0x34
   188b4:	eor	r3, fp, #1
   188b8:	ands	r3, r0, r3
   188bc:	beq	188ec <__assert_fail@plt+0x737c>
   188c0:	cmp	sl, r4
   188c4:	add	r0, r4, #1
   188c8:	strbhi	ip, [r9, r4]
   188cc:	cmp	sl, r0
   188d0:	movhi	fp, #36	; 0x24
   188d4:	strbhi	fp, [r9, r0]
   188d8:	add	r0, r4, #2
   188dc:	mov	fp, r3
   188e0:	cmp	sl, r0
   188e4:	add	r4, r4, #3
   188e8:	strbhi	ip, [r9, r0]
   188ec:	cmp	sl, r4
   188f0:	movhi	r3, #92	; 0x5c
   188f4:	strbhi	r3, [r9, r4]
   188f8:	add	r3, r4, #1
   188fc:	cmp	sl, r3
   18900:	bls	18910 <__assert_fail@plt+0x73a0>
   18904:	lsr	r0, r5, #6
   18908:	add	r0, r0, #48	; 0x30
   1890c:	strb	r0, [r9, r3]
   18910:	add	r3, r4, #2
   18914:	cmp	sl, r3
   18918:	bls	18928 <__assert_fail@plt+0x73b8>
   1891c:	ubfx	r0, r5, #3, #3
   18920:	add	r0, r0, #48	; 0x30
   18924:	strb	r0, [r9, r3]
   18928:	add	r7, r7, #1
   1892c:	and	r5, r5, #7
   18930:	cmp	r1, r7
   18934:	add	r5, r5, #48	; 0x30
   18938:	add	r4, r4, #3
   1893c:	bls	18e9c <__assert_fail@plt+0x792c>
   18940:	mov	r0, r2
   18944:	cmp	sl, r4
   18948:	strbhi	r5, [r9, r4]
   1894c:	add	r4, r4, #1
   18950:	ldrb	r5, [lr, #1]!
   18954:	cmp	r2, #0
   18958:	bne	188a8 <__assert_fail@plt+0x7338>
   1895c:	eor	r3, r0, #1
   18960:	cmp	r6, #0
   18964:	and	r3, r3, fp
   18968:	uxtb	r3, r3
   1896c:	beq	18980 <__assert_fail@plt+0x7410>
   18970:	cmp	sl, r4
   18974:	movhi	r6, #92	; 0x5c
   18978:	strbhi	r6, [r9, r4]
   1897c:	add	r4, r4, #1
   18980:	add	r7, r7, #1
   18984:	cmp	r7, r1
   18988:	bcs	18e7c <__assert_fail@plt+0x790c>
   1898c:	cmp	r3, #0
   18990:	beq	18ec0 <__assert_fail@plt+0x7950>
   18994:	cmp	sl, r4
   18998:	add	r3, r4, #1
   1899c:	mov	r6, #0
   189a0:	strbhi	ip, [r9, r4]
   189a4:	cmp	sl, r3
   189a8:	add	r4, r4, #2
   189ac:	mov	fp, r6
   189b0:	strbhi	ip, [r9, r3]
   189b4:	b	18944 <__assert_fail@plt+0x73d4>
   189b8:	ldr	r3, [sp, #36]	; 0x24
   189bc:	ldrb	r5, [r3]
   189c0:	cmp	r5, #126	; 0x7e
   189c4:	ldrls	pc, [pc, r5, lsl #2]
   189c8:	b	18828 <__assert_fail@plt+0x72b8>
   189cc:	andeq	r8, r1, ip, ror #23
   189d0:	andeq	r8, r1, r8, lsr #16
   189d4:	andeq	r8, r1, r8, lsr #16
   189d8:	andeq	r8, r1, r8, lsr #16
   189dc:	andeq	r8, r1, r8, lsr #16
   189e0:	andeq	r8, r1, r8, lsr #16
   189e4:	andeq	r8, r1, r8, lsr #16
   189e8:	andeq	r8, r1, r0, ror #1
   189ec:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   189f0:	andeq	r8, r1, r8, asr r7
   189f4:	andeq	r8, r1, r0, ror #23
   189f8:	andeq	r8, r1, r8, lsr r7
   189fc:	andeq	r7, r1, r4, lsl #31
   18a00:	ldrdeq	r8, [r1], -r4
   18a04:	andeq	r8, r1, r8, lsr #16
   18a08:	andeq	r8, r1, r8, lsr #16
   18a0c:	andeq	r8, r1, r8, lsr #16
   18a10:	andeq	r8, r1, r8, lsr #16
   18a14:	andeq	r8, r1, r8, lsr #16
   18a18:	andeq	r8, r1, r8, lsr #16
   18a1c:	andeq	r8, r1, r8, lsr #16
   18a20:	andeq	r8, r1, r8, lsr #16
   18a24:	andeq	r8, r1, r8, lsr #16
   18a28:	andeq	r8, r1, r8, lsr #16
   18a2c:	andeq	r8, r1, r8, lsr #16
   18a30:	andeq	r8, r1, r8, lsr #16
   18a34:	andeq	r8, r1, r8, lsr #16
   18a38:	andeq	r8, r1, r8, lsr #16
   18a3c:	andeq	r8, r1, r8, lsr #16
   18a40:	andeq	r8, r1, r8, lsr #16
   18a44:	andeq	r8, r1, r8, lsr #16
   18a48:	andeq	r8, r1, r8, lsr #16
   18a4c:	andeq	r8, r1, r8, asr #14
   18a50:	andeq	r8, r1, r8, asr #23
   18a54:	andeq	r8, r1, r8, asr #23
   18a58:	andeq	r8, r1, ip, lsr #14
   18a5c:	andeq	r8, r1, r8, asr #23
   18a60:	andeq	r8, r1, ip, lsl r7
   18a64:	andeq	r8, r1, r8, asr #23
   18a68:	muleq	r1, r0, r7
   18a6c:	andeq	r8, r1, r8, asr #23
   18a70:	andeq	r8, r1, r8, asr #23
   18a74:	andeq	r8, r1, r8, asr #23
   18a78:	andeq	r8, r1, ip, lsl r7
   18a7c:	andeq	r8, r1, ip, lsl r7
   18a80:	andeq	r8, r1, ip, lsl r7
   18a84:	andeq	r8, r1, ip, lsl r7
   18a88:	andeq	r8, r1, ip, lsl r7
   18a8c:	andeq	r8, r1, ip, lsl r7
   18a90:	andeq	r8, r1, ip, lsl r7
   18a94:	andeq	r8, r1, ip, lsl r7
   18a98:	andeq	r8, r1, ip, lsl r7
   18a9c:	andeq	r8, r1, ip, lsl r7
   18aa0:	andeq	r8, r1, ip, lsl r7
   18aa4:	andeq	r8, r1, ip, lsl r7
   18aa8:	andeq	r8, r1, ip, lsl r7
   18aac:	andeq	r8, r1, ip, lsl r7
   18ab0:	andeq	r8, r1, ip, lsl r7
   18ab4:	andeq	r8, r1, ip, lsl r7
   18ab8:	andeq	r8, r1, r8, asr #23
   18abc:	andeq	r8, r1, r8, asr #23
   18ac0:	andeq	r8, r1, r8, asr #23
   18ac4:	andeq	r8, r1, r8, asr #23
   18ac8:	andeq	r8, r1, r8, ror #14
   18acc:	andeq	r8, r1, r8, lsr #16
   18ad0:	andeq	r8, r1, ip, lsl r7
   18ad4:	andeq	r8, r1, ip, lsl r7
   18ad8:	andeq	r8, r1, ip, lsl r7
   18adc:	andeq	r8, r1, ip, lsl r7
   18ae0:	andeq	r8, r1, ip, lsl r7
   18ae4:	andeq	r8, r1, ip, lsl r7
   18ae8:	andeq	r8, r1, ip, lsl r7
   18aec:	andeq	r8, r1, ip, lsl r7
   18af0:	andeq	r8, r1, ip, lsl r7
   18af4:	andeq	r8, r1, ip, lsl r7
   18af8:	andeq	r8, r1, ip, lsl r7
   18afc:	andeq	r8, r1, ip, lsl r7
   18b00:	andeq	r8, r1, ip, lsl r7
   18b04:	andeq	r8, r1, ip, lsl r7
   18b08:	andeq	r8, r1, ip, lsl r7
   18b0c:	andeq	r8, r1, ip, lsl r7
   18b10:	andeq	r8, r1, ip, lsl r7
   18b14:	andeq	r8, r1, ip, lsl r7
   18b18:	andeq	r8, r1, ip, lsl r7
   18b1c:	andeq	r8, r1, ip, lsl r7
   18b20:	andeq	r8, r1, ip, lsl r7
   18b24:	andeq	r8, r1, ip, lsl r7
   18b28:	andeq	r8, r1, ip, lsl r7
   18b2c:	andeq	r8, r1, ip, lsl r7
   18b30:	andeq	r8, r1, ip, lsl r7
   18b34:	andeq	r8, r1, ip, lsl r7
   18b38:	andeq	r8, r1, r8, asr #23
   18b3c:	andeq	r8, r1, r8, ror #13
   18b40:	andeq	r8, r1, ip, lsl r7
   18b44:	andeq	r8, r1, r8, asr #23
   18b48:	andeq	r8, r1, ip, lsl r7
   18b4c:	andeq	r8, r1, r8, asr #23
   18b50:	andeq	r8, r1, ip, lsl r7
   18b54:	andeq	r8, r1, ip, lsl r7
   18b58:	andeq	r8, r1, ip, lsl r7
   18b5c:	andeq	r8, r1, ip, lsl r7
   18b60:	andeq	r8, r1, ip, lsl r7
   18b64:	andeq	r8, r1, ip, lsl r7
   18b68:	andeq	r8, r1, ip, lsl r7
   18b6c:	andeq	r8, r1, ip, lsl r7
   18b70:	andeq	r8, r1, ip, lsl r7
   18b74:	andeq	r8, r1, ip, lsl r7
   18b78:	andeq	r8, r1, ip, lsl r7
   18b7c:	andeq	r8, r1, ip, lsl r7
   18b80:	andeq	r8, r1, ip, lsl r7
   18b84:	andeq	r8, r1, ip, lsl r7
   18b88:	andeq	r8, r1, ip, lsl r7
   18b8c:	andeq	r8, r1, ip, lsl r7
   18b90:	andeq	r8, r1, ip, lsl r7
   18b94:	andeq	r8, r1, ip, lsl r7
   18b98:	andeq	r8, r1, ip, lsl r7
   18b9c:	andeq	r8, r1, ip, lsl r7
   18ba0:	andeq	r8, r1, ip, lsl r7
   18ba4:	andeq	r8, r1, ip, lsl r7
   18ba8:	andeq	r8, r1, ip, lsl r7
   18bac:	andeq	r8, r1, ip, lsl r7
   18bb0:	andeq	r8, r1, ip, lsl r7
   18bb4:	andeq	r8, r1, ip, lsl r7
   18bb8:	andeq	r8, r1, r4, asr #13
   18bbc:	andeq	r8, r1, r8, asr #23
   18bc0:	andeq	r8, r1, r4, asr #13
   18bc4:	andeq	r8, r1, ip, lsr #14
   18bc8:	mov	r3, #0
   18bcc:	str	r3, [sp, #40]	; 0x28
   18bd0:	b	182a8 <__assert_fail@plt+0x6d38>
   18bd4:	mov	r3, #0
   18bd8:	str	r3, [sp, #40]	; 0x28
   18bdc:	b	18240 <__assert_fail@plt+0x6cd0>
   18be0:	mov	r3, #0
   18be4:	str	r3, [sp, #40]	; 0x28
   18be8:	b	18274 <__assert_fail@plt+0x6d04>
   18bec:	ldr	r3, [sp, #44]	; 0x2c
   18bf0:	cmp	r3, #0
   18bf4:	beq	1818c <__assert_fail@plt+0x6c1c>
   18bf8:	ldr	r3, [sp, #52]	; 0x34
   18bfc:	mov	fp, r9
   18c00:	str	r3, [sp, #60]	; 0x3c
   18c04:	b	18304 <__assert_fail@plt+0x6d94>
   18c08:	ldr	r3, [sp, #44]	; 0x2c
   18c0c:	cmp	r3, #0
   18c10:	bne	19044 <__assert_fail@plt+0x7ad4>
   18c14:	str	r3, [sp, #40]	; 0x28
   18c18:	cmp	sl, #0
   18c1c:	ldr	r3, [sp, #84]	; 0x54
   18c20:	clz	r3, r3
   18c24:	lsr	r3, r3, #5
   18c28:	moveq	r3, #0
   18c2c:	cmp	r3, #0
   18c30:	strne	sl, [sp, #84]	; 0x54
   18c34:	movne	sl, #0
   18c38:	bne	18c68 <__assert_fail@plt+0x76f8>
   18c3c:	cmp	sl, r4
   18c40:	movhi	r3, #39	; 0x27
   18c44:	strbhi	r3, [r9, r4]
   18c48:	add	r3, r4, #1
   18c4c:	cmp	sl, r3
   18c50:	movhi	r2, #92	; 0x5c
   18c54:	strbhi	r2, [r9, r3]
   18c58:	add	r3, r4, #2
   18c5c:	cmp	sl, r3
   18c60:	movhi	r2, #39	; 0x27
   18c64:	strbhi	r2, [r9, r3]
   18c68:	mov	r3, #0
   18c6c:	add	r4, r4, #3
   18c70:	str	r6, [sp, #80]	; 0x50
   18c74:	mov	fp, r3
   18c78:	mov	r5, #39	; 0x27
   18c7c:	b	18148 <__assert_fail@plt+0x6bd8>
   18c80:	ldr	r3, [sp, #44]	; 0x2c
   18c84:	cmp	r3, #0
   18c88:	bne	19044 <__assert_fail@plt+0x7ad4>
   18c8c:	mov	r6, #0
   18c90:	mov	r5, #63	; 0x3f
   18c94:	str	r3, [sp, #40]	; 0x28
   18c98:	mov	r3, fp
   18c9c:	b	18148 <__assert_fail@plt+0x6bd8>
   18ca0:	mov	r2, #0
   18ca4:	mov	r3, #0
   18ca8:	cmn	r8, #1
   18cac:	strd	r2, [sp, #128]	; 0x80
   18cb0:	bne	18cc0 <__assert_fail@plt+0x7750>
   18cb4:	ldr	r0, [sp, #28]
   18cb8:	bl	113c0 <strlen@plt>
   18cbc:	mov	r8, r0
   18cc0:	str	r9, [sp, #100]	; 0x64
   18cc4:	mov	r3, #0
   18cc8:	strd	sl, [sp, #104]	; 0x68
   18ccc:	ldr	sl, [sp, #28]
   18cd0:	str	r5, [sp, #112]	; 0x70
   18cd4:	mov	r5, r3
   18cd8:	ldr	r9, [sp, #68]	; 0x44
   18cdc:	str	r4, [sp, #116]	; 0x74
   18ce0:	add	r4, r7, r5
   18ce4:	add	r3, sp, #128	; 0x80
   18ce8:	add	fp, sl, r4
   18cec:	sub	r2, r8, r4
   18cf0:	mov	r1, fp
   18cf4:	add	r0, sp, #124	; 0x7c
   18cf8:	bl	1cab8 <__assert_fail@plt+0xb548>
   18cfc:	subs	r1, r0, #0
   18d00:	beq	18d40 <__assert_fail@plt+0x77d0>
   18d04:	cmn	r1, #1
   18d08:	beq	19098 <__assert_fail@plt+0x7b28>
   18d0c:	cmn	r1, #2
   18d10:	beq	190b8 <__assert_fail@plt+0x7b48>
   18d14:	cmp	r9, #0
   18d18:	bne	18d70 <__assert_fail@plt+0x7800>
   18d1c:	ldr	r0, [sp, #124]	; 0x7c
   18d20:	add	r5, r5, r1
   18d24:	bl	112ac <iswprint@plt>
   18d28:	cmp	r0, #0
   18d2c:	add	r0, sp, #128	; 0x80
   18d30:	moveq	r6, #0
   18d34:	bl	11234 <mbsinit@plt>
   18d38:	cmp	r0, #0
   18d3c:	beq	18ce0 <__assert_fail@plt+0x7770>
   18d40:	ldr	r3, [sp, #60]	; 0x3c
   18d44:	add	r9, sp, #100	; 0x64
   18d48:	mov	r0, r5
   18d4c:	ldm	r9, {r9, sl, fp}
   18d50:	eor	r2, r6, #1
   18d54:	ldr	r5, [sp, #112]	; 0x70
   18d58:	and	r2, r2, r3
   18d5c:	uxtb	r2, r2
   18d60:	ldr	r4, [sp, #116]	; 0x74
   18d64:	cmp	r0, #1
   18d68:	bhi	18884 <__assert_fail@plt+0x7314>
   18d6c:	b	18874 <__assert_fail@plt+0x7304>
   18d70:	cmp	r1, #1
   18d74:	beq	18d1c <__assert_fail@plt+0x77ac>
   18d78:	add	r2, r4, #1
   18d7c:	add	r3, sl, r1
   18d80:	add	r2, sl, r2
   18d84:	add	r4, r3, r4
   18d88:	ldrb	r3, [r2], #1
   18d8c:	sub	r3, r3, #91	; 0x5b
   18d90:	cmp	r3, #33	; 0x21
   18d94:	ldrls	pc, [pc, r3, lsl #2]
   18d98:	b	18e24 <__assert_fail@plt+0x78b4>
   18d9c:	andeq	r8, r1, r0, lsr lr
   18da0:	andeq	r8, r1, r0, lsr lr
   18da4:	andeq	r8, r1, r4, lsr #28
   18da8:	andeq	r8, r1, r0, lsr lr
   18dac:	andeq	r8, r1, r4, lsr #28
   18db0:	andeq	r8, r1, r0, lsr lr
   18db4:	andeq	r8, r1, r4, lsr #28
   18db8:	andeq	r8, r1, r4, lsr #28
   18dbc:	andeq	r8, r1, r4, lsr #28
   18dc0:	andeq	r8, r1, r4, lsr #28
   18dc4:	andeq	r8, r1, r4, lsr #28
   18dc8:	andeq	r8, r1, r4, lsr #28
   18dcc:	andeq	r8, r1, r4, lsr #28
   18dd0:	andeq	r8, r1, r4, lsr #28
   18dd4:	andeq	r8, r1, r4, lsr #28
   18dd8:	andeq	r8, r1, r4, lsr #28
   18ddc:	andeq	r8, r1, r4, lsr #28
   18de0:	andeq	r8, r1, r4, lsr #28
   18de4:	andeq	r8, r1, r4, lsr #28
   18de8:	andeq	r8, r1, r4, lsr #28
   18dec:	andeq	r8, r1, r4, lsr #28
   18df0:	andeq	r8, r1, r4, lsr #28
   18df4:	andeq	r8, r1, r4, lsr #28
   18df8:	andeq	r8, r1, r4, lsr #28
   18dfc:	andeq	r8, r1, r4, lsr #28
   18e00:	andeq	r8, r1, r4, lsr #28
   18e04:	andeq	r8, r1, r4, lsr #28
   18e08:	andeq	r8, r1, r4, lsr #28
   18e0c:	andeq	r8, r1, r4, lsr #28
   18e10:	andeq	r8, r1, r4, lsr #28
   18e14:	andeq	r8, r1, r4, lsr #28
   18e18:	andeq	r8, r1, r4, lsr #28
   18e1c:	andeq	r8, r1, r4, lsr #28
   18e20:	andeq	r8, r1, r0, lsr lr
   18e24:	cmp	r4, r2
   18e28:	bne	18d88 <__assert_fail@plt+0x7818>
   18e2c:	b	18d1c <__assert_fail@plt+0x77ac>
   18e30:	mov	r3, #2
   18e34:	ldr	fp, [sp, #100]	; 0x64
   18e38:	str	r3, [sp, #176]	; 0xb0
   18e3c:	ldr	sl, [sp, #104]	; 0x68
   18e40:	b	18304 <__assert_fail@plt+0x6d94>
   18e44:	ldr	r2, [sp, #52]	; 0x34
   18e48:	mov	fp, r9
   18e4c:	ldr	r3, [sp, #60]	; 0x3c
   18e50:	and	r3, r3, r2
   18e54:	str	r3, [sp, #60]	; 0x3c
   18e58:	b	18304 <__assert_fail@plt+0x6d94>
   18e5c:	cmp	sl, r4
   18e60:	movhi	r2, fp
   18e64:	bhi	181dc <__assert_fail@plt+0x6c6c>
   18e68:	mov	r2, r4
   18e6c:	b	181ec <__assert_fail@plt+0x6c7c>
   18e70:	mov	r6, r3
   18e74:	mov	r5, #63	; 0x3f
   18e78:	b	182ac <__assert_fail@plt+0x6d3c>
   18e7c:	ldr	r8, [sp, #36]	; 0x24
   18e80:	ldr	r6, [sp, #100]	; 0x64
   18e84:	b	18158 <__assert_fail@plt+0x6be8>
   18e88:	mov	fp, r9
   18e8c:	ldr	r8, [sp, #36]	; 0x24
   18e90:	ldr	r3, [sp, #52]	; 0x34
   18e94:	str	r3, [sp, #60]	; 0x3c
   18e98:	b	18304 <__assert_fail@plt+0x6d94>
   18e9c:	ldr	r8, [sp, #36]	; 0x24
   18ea0:	ldr	r6, [sp, #100]	; 0x64
   18ea4:	b	17ff0 <__assert_fail@plt+0x6a80>
   18ea8:	mov	r3, #0
   18eac:	add	r4, r4, #4
   18eb0:	mov	fp, r2
   18eb4:	mov	r6, r3
   18eb8:	mov	r5, #48	; 0x30
   18ebc:	b	18148 <__assert_fail@plt+0x6bd8>
   18ec0:	mov	r6, r3
   18ec4:	b	18944 <__assert_fail@plt+0x73d4>
   18ec8:	mov	r3, #1
   18ecc:	movw	r2, #61652	; 0xf0d4
   18ed0:	movt	r2, #1
   18ed4:	mov	r4, r3
   18ed8:	mov	r9, sl
   18edc:	str	r3, [sp, #32]
   18ee0:	str	sl, [sp, #44]	; 0x2c
   18ee4:	str	r3, [sp, #48]	; 0x30
   18ee8:	str	sl, [sp, #52]	; 0x34
   18eec:	str	r3, [sp, #56]	; 0x38
   18ef0:	str	r3, [sp, #60]	; 0x3c
   18ef4:	str	sl, [sp, #64]	; 0x40
   18ef8:	str	sl, [sp, #68]	; 0x44
   18efc:	str	r2, [sp, #72]	; 0x48
   18f00:	str	sl, [sp, #80]	; 0x50
   18f04:	str	sl, [sp, #84]	; 0x54
   18f08:	str	sl, [sp, #88]	; 0x58
   18f0c:	b	179fc <__assert_fail@plt+0x648c>
   18f10:	mov	r3, #0
   18f14:	mov	r5, #48	; 0x30
   18f18:	mov	r6, r3
   18f1c:	b	18148 <__assert_fail@plt+0x6bd8>
   18f20:	cmp	sl, r4
   18f24:	mov	r5, #48	; 0x30
   18f28:	movhi	r3, #48	; 0x30
   18f2c:	strbhi	r3, [r9, r4]
   18f30:	add	r3, r2, #2
   18f34:	add	r4, r2, #3
   18f38:	cmp	sl, r3
   18f3c:	movhi	r1, #48	; 0x30
   18f40:	strbhi	r1, [r9, r3]
   18f44:	mov	r3, #0
   18f48:	b	18224 <__assert_fail@plt+0x6cb4>
   18f4c:	ldr	r3, [sp, #48]	; 0x30
   18f50:	str	r3, [sp, #40]	; 0x28
   18f54:	b	18830 <__assert_fail@plt+0x72c0>
   18f58:	ldr	r2, [sp, #28]
   18f5c:	ldrb	r2, [r2, r3]
   18f60:	sub	r1, r2, #33	; 0x21
   18f64:	cmp	r1, #29
   18f68:	ldrls	pc, [pc, r1, lsl #2]
   18f6c:	b	182a8 <__assert_fail@plt+0x6d38>
   18f70:	andeq	r8, r1, r8, ror #31
   18f74:	andeq	r8, r1, r8, lsr #5
   18f78:	andeq	r8, r1, r8, lsr #5
   18f7c:	andeq	r8, r1, r8, lsr #5
   18f80:	andeq	r8, r1, r8, lsr #5
   18f84:	andeq	r8, r1, r8, lsr #5
   18f88:	andeq	r8, r1, r8, ror #31
   18f8c:	andeq	r8, r1, r8, ror #31
   18f90:	andeq	r8, r1, r8, ror #31
   18f94:	andeq	r8, r1, r8, lsr #5
   18f98:	andeq	r8, r1, r8, lsr #5
   18f9c:	andeq	r8, r1, r8, lsr #5
   18fa0:	andeq	r8, r1, r8, ror #31
   18fa4:	andeq	r8, r1, r8, lsr #5
   18fa8:	andeq	r8, r1, r8, ror #31
   18fac:	andeq	r8, r1, r8, lsr #5
   18fb0:	andeq	r8, r1, r8, lsr #5
   18fb4:	andeq	r8, r1, r8, lsr #5
   18fb8:	andeq	r8, r1, r8, lsr #5
   18fbc:	andeq	r8, r1, r8, lsr #5
   18fc0:	andeq	r8, r1, r8, lsr #5
   18fc4:	andeq	r8, r1, r8, lsr #5
   18fc8:	andeq	r8, r1, r8, lsr #5
   18fcc:	andeq	r8, r1, r8, lsr #5
   18fd0:	andeq	r8, r1, r8, lsr #5
   18fd4:	andeq	r8, r1, r8, lsr #5
   18fd8:	andeq	r8, r1, r8, lsr #5
   18fdc:	andeq	r8, r1, r8, ror #31
   18fe0:	andeq	r8, r1, r8, ror #31
   18fe4:	andeq	r8, r1, r8, ror #31
   18fe8:	ldr	r1, [sp, #44]	; 0x2c
   18fec:	cmp	r1, #0
   18ff0:	bne	19250 <__assert_fail@plt+0x7ce0>
   18ff4:	cmp	sl, r4
   18ff8:	mov	r7, r3
   18ffc:	movhi	r1, #63	; 0x3f
   19000:	mov	r5, r2
   19004:	mov	r3, fp
   19008:	strbhi	r1, [r9, r4]
   1900c:	add	r1, r4, #1
   19010:	cmp	sl, r1
   19014:	movhi	r0, #34	; 0x22
   19018:	strbhi	r0, [r9, r1]
   1901c:	add	r1, r4, #2
   19020:	cmp	sl, r1
   19024:	movhi	r0, #34	; 0x22
   19028:	strbhi	r0, [r9, r1]
   1902c:	add	r1, r4, #3
   19030:	add	r4, r4, #4
   19034:	cmp	sl, r1
   19038:	movhi	r0, #63	; 0x3f
   1903c:	strbhi	r0, [r9, r1]
   19040:	b	18224 <__assert_fail@plt+0x6cb4>
   19044:	mov	fp, r9
   19048:	b	18304 <__assert_fail@plt+0x6d94>
   1904c:	ldr	r3, [sp, #188]	; 0xbc
   19050:	ldrb	r3, [r3]
   19054:	cmp	r3, #0
   19058:	beq	17994 <__assert_fail@plt+0x6424>
   1905c:	ldr	r2, [sp, #188]	; 0xbc
   19060:	cmp	sl, r4
   19064:	bls	19084 <__assert_fail@plt+0x7b14>
   19068:	strb	r3, [fp, r4]
   1906c:	add	r4, r4, #1
   19070:	ldrb	r3, [r2, #1]!
   19074:	cmp	r3, #0
   19078:	beq	17994 <__assert_fail@plt+0x6424>
   1907c:	cmp	sl, r4
   19080:	bhi	19068 <__assert_fail@plt+0x7af8>
   19084:	ldrb	r3, [r2, #1]!
   19088:	add	r4, r4, #1
   1908c:	cmp	r3, #0
   19090:	bne	19060 <__assert_fail@plt+0x7af0>
   19094:	b	17994 <__assert_fail@plt+0x6424>
   19098:	add	r9, sp, #100	; 0x64
   1909c:	mov	r0, r5
   190a0:	ldr	r2, [sp, #60]	; 0x3c
   190a4:	mov	r6, #0
   190a8:	ldm	r9, {r9, sl, fp}
   190ac:	ldr	r5, [sp, #112]	; 0x70
   190b0:	ldr	r4, [sp, #116]	; 0x74
   190b4:	b	18d64 <__assert_fail@plt+0x77f4>
   190b8:	cmp	r4, r8
   190bc:	add	r9, sp, #100	; 0x64
   190c0:	mov	r1, r4
   190c4:	mov	r2, fp
   190c8:	ldm	r9, {r9, sl, fp}
   190cc:	mov	r3, r5
   190d0:	mov	r0, r5
   190d4:	ldr	r5, [sp, #112]	; 0x70
   190d8:	ldr	r4, [sp, #116]	; 0x74
   190dc:	bcs	19110 <__assert_fail@plt+0x7ba0>
   190e0:	ldrb	r6, [r2]
   190e4:	cmp	r6, #0
   190e8:	bne	190fc <__assert_fail@plt+0x7b8c>
   190ec:	b	19248 <__assert_fail@plt+0x7cd8>
   190f0:	ldrb	r6, [r2, #1]!
   190f4:	cmp	r6, #0
   190f8:	beq	191e0 <__assert_fail@plt+0x7c70>
   190fc:	add	r3, r3, #1
   19100:	add	r1, r7, r3
   19104:	cmp	r8, r1
   19108:	bhi	190f0 <__assert_fail@plt+0x7b80>
   1910c:	mov	r0, r3
   19110:	mov	r6, #0
   19114:	ldr	r2, [sp, #60]	; 0x3c
   19118:	b	18d64 <__assert_fail@plt+0x77f4>
   1911c:	mov	r3, #1
   19120:	mov	r4, #0
   19124:	mov	r9, r4
   19128:	str	r3, [sp, #32]
   1912c:	str	r3, [sp, #44]	; 0x2c
   19130:	str	r3, [sp, #48]	; 0x30
   19134:	str	r4, [sp, #52]	; 0x34
   19138:	str	r3, [sp, #56]	; 0x38
   1913c:	str	r3, [sp, #60]	; 0x3c
   19140:	str	r3, [sp, #88]	; 0x58
   19144:	movw	r3, #61652	; 0xf0d4
   19148:	movt	r3, #1
   1914c:	str	r4, [sp, #64]	; 0x40
   19150:	str	r4, [sp, #68]	; 0x44
   19154:	str	r3, [sp, #72]	; 0x48
   19158:	str	r4, [sp, #80]	; 0x50
   1915c:	str	r4, [sp, #84]	; 0x54
   19160:	b	179fc <__assert_fail@plt+0x648c>
   19164:	mov	fp, r9
   19168:	b	18318 <__assert_fail@plt+0x6da8>
   1916c:	ldr	r3, [sp, #48]	; 0x30
   19170:	b	18c8c <__assert_fail@plt+0x771c>
   19174:	mov	r2, r3
   19178:	ldr	r3, [sp, #72]	; 0x48
   1917c:	cmp	r3, #0
   19180:	moveq	r2, #0
   19184:	andne	r2, r2, #1
   19188:	cmp	r2, #0
   1918c:	beq	191bc <__assert_fail@plt+0x7c4c>
   19190:	mov	r2, r3
   19194:	ldrb	r3, [r3]
   19198:	cmp	r3, #0
   1919c:	beq	191bc <__assert_fail@plt+0x7c4c>
   191a0:	cmp	sl, r4
   191a4:	bls	191cc <__assert_fail@plt+0x7c5c>
   191a8:	strb	r3, [fp, r4]
   191ac:	add	r4, r4, #1
   191b0:	ldrb	r3, [r2, #1]!
   191b4:	cmp	r3, #0
   191b8:	bne	191a0 <__assert_fail@plt+0x7c30>
   191bc:	cmp	sl, r4
   191c0:	movhi	r3, #0
   191c4:	strbhi	r3, [fp, r4]
   191c8:	b	18354 <__assert_fail@plt+0x6de4>
   191cc:	ldrb	r3, [r2, #1]!
   191d0:	add	r4, r4, #1
   191d4:	cmp	r3, #0
   191d8:	bne	191a0 <__assert_fail@plt+0x7c30>
   191dc:	b	191bc <__assert_fail@plt+0x7c4c>
   191e0:	mov	r0, r3
   191e4:	ldr	r2, [sp, #60]	; 0x3c
   191e8:	b	18d64 <__assert_fail@plt+0x77f4>
   191ec:	mov	ip, #5
   191f0:	mov	r3, r8
   191f4:	ldr	r1, [sp, #84]	; 0x54
   191f8:	str	ip, [sp]
   191fc:	ldr	r2, [sp, #180]	; 0xb4
   19200:	ldr	ip, [sp, #188]	; 0xbc
   19204:	ldr	r0, [sp, #184]	; 0xb8
   19208:	str	r2, [sp, #4]
   1920c:	ldr	r2, [sp, #28]
   19210:	str	ip, [sp, #12]
   19214:	ldr	ip, [sp, #192]	; 0xc0
   19218:	str	r0, [sp, #8]
   1921c:	mov	r0, fp
   19220:	str	ip, [sp, #16]
   19224:	bl	178d8 <__assert_fail@plt+0x6368>
   19228:	mov	r4, r0
   1922c:	b	18354 <__assert_fail@plt+0x6de4>
   19230:	mov	r6, r3
   19234:	str	r3, [sp, #40]	; 0x28
   19238:	b	182c4 <__assert_fail@plt+0x6d54>
   1923c:	mov	r3, #2
   19240:	str	r3, [sp, #176]	; 0xb0
   19244:	b	18304 <__assert_fail@plt+0x6d94>
   19248:	ldr	r2, [sp, #60]	; 0x3c
   1924c:	b	18d64 <__assert_fail@plt+0x77f4>
   19250:	mov	r3, #5
   19254:	mov	fp, r9
   19258:	str	r3, [sp, #176]	; 0xb0
   1925c:	b	18318 <__assert_fail@plt+0x6da8>
   19260:	mov	r1, #1
   19264:	mov	r3, #0
   19268:	mov	r2, r3
   1926c:	mov	r9, r3
   19270:	str	r1, [sp, #32]
   19274:	str	sl, [sp, #84]	; 0x54
   19278:	b	180a0 <__assert_fail@plt+0x6b30>
   1927c:	mov	r3, #0
   19280:	mov	r2, #1
   19284:	mov	r9, r3
   19288:	mov	r4, r3
   1928c:	str	r2, [sp, #32]
   19290:	strd	r2, [sp, #44]	; 0x2c
   19294:	strd	r2, [sp, #56]	; 0x38
   19298:	str	r3, [sp, #80]	; 0x50
   1929c:	str	r3, [sp, #84]	; 0x54
   192a0:	str	r3, [sp, #88]	; 0x58
   192a4:	movw	r3, #61672	; 0xf0e8
   192a8:	movt	r3, #1
   192ac:	str	r2, [sp, #52]	; 0x34
   192b0:	str	r2, [sp, #64]	; 0x40
   192b4:	str	r2, [sp, #68]	; 0x44
   192b8:	str	r3, [sp, #72]	; 0x48
   192bc:	b	179fc <__assert_fail@plt+0x648c>
   192c0:	bl	11540 <abort@plt>
   192c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   192c8:	mov	r4, r0
   192cc:	mov	r5, r3
   192d0:	strd	r6, [sp, #8]
   192d4:	movw	r7, #372	; 0x174
   192d8:	movt	r7, #3
   192dc:	strd	r8, [sp, #16]
   192e0:	strd	sl, [sp, #24]
   192e4:	mov	sl, r1
   192e8:	mov	fp, r2
   192ec:	str	lr, [sp, #32]
   192f0:	sub	sp, sp, #60	; 0x3c
   192f4:	bl	113f0 <__errno_location@plt>
   192f8:	mov	r8, r0
   192fc:	cmn	r4, #-2147483647	; 0x80000001
   19300:	ldr	r6, [r7]
   19304:	movne	r0, #0
   19308:	moveq	r0, #1
   1930c:	ldr	r3, [r8]
   19310:	orrs	r0, r0, r4, lsr #31
   19314:	str	r3, [sp, #28]
   19318:	bne	194a8 <__assert_fail@plt+0x7f38>
   1931c:	ldr	r3, [r7, #4]
   19320:	cmp	r3, r4
   19324:	bgt	19384 <__assert_fail@plt+0x7e14>
   19328:	add	r1, r7, #8
   1932c:	sub	r2, r4, r3
   19330:	str	r3, [sp, #52]	; 0x34
   19334:	cmp	r6, r1
   19338:	add	r2, r2, #1
   1933c:	beq	19480 <__assert_fail@plt+0x7f10>
   19340:	mov	r1, #8
   19344:	mov	r0, r6
   19348:	mvn	r3, #-2147483648	; 0x80000000
   1934c:	str	r1, [sp]
   19350:	add	r1, sp, #52	; 0x34
   19354:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   19358:	mov	r6, r0
   1935c:	str	r0, [r7]
   19360:	ldr	r0, [r7, #4]
   19364:	mov	r1, #0
   19368:	ldr	r2, [sp, #52]	; 0x34
   1936c:	sub	r2, r2, r0
   19370:	add	r0, r6, r0, lsl #3
   19374:	lsl	r2, r2, #3
   19378:	bl	11414 <memset@plt>
   1937c:	ldr	r3, [sp, #52]	; 0x34
   19380:	str	r3, [r7, #4]
   19384:	ldr	r1, [r5, #4]
   19388:	add	r0, r6, r4, lsl #3
   1938c:	add	ip, r5, #8
   19390:	mov	r3, fp
   19394:	mov	r2, sl
   19398:	ldr	r7, [r0, #4]
   1939c:	str	r0, [sp, #36]	; 0x24
   193a0:	str	ip, [sp, #40]	; 0x28
   193a4:	orr	r0, r1, #1
   193a8:	ldr	r9, [r6, r4, lsl #3]
   193ac:	str	ip, [sp, #8]
   193b0:	ldr	lr, [r5, #44]	; 0x2c
   193b4:	str	r0, [sp, #4]
   193b8:	ldr	ip, [r5]
   193bc:	mov	r1, r9
   193c0:	str	ip, [sp, #32]
   193c4:	ldr	ip, [r5, #40]	; 0x28
   193c8:	str	ip, [sp, #12]
   193cc:	ldr	ip, [sp, #32]
   193d0:	str	lr, [sp, #16]
   193d4:	str	r0, [sp, #44]	; 0x2c
   193d8:	mov	r0, r7
   193dc:	str	ip, [sp]
   193e0:	bl	178d8 <__assert_fail@plt+0x6368>
   193e4:	cmp	r9, r0
   193e8:	bhi	19458 <__assert_fail@plt+0x7ee8>
   193ec:	add	r9, r0, #1
   193f0:	movw	r3, #696	; 0x2b8
   193f4:	movt	r3, #3
   193f8:	cmp	r7, r3
   193fc:	str	r9, [r6, r4, lsl #3]
   19400:	beq	1940c <__assert_fail@plt+0x7e9c>
   19404:	mov	r0, r7
   19408:	bl	1c94c <__assert_fail@plt+0xb3dc>
   1940c:	mov	r0, r9
   19410:	bl	1ba98 <__assert_fail@plt+0xa528>
   19414:	ldr	ip, [r5]
   19418:	mov	r3, fp
   1941c:	mov	r2, sl
   19420:	mov	r1, r9
   19424:	mov	r7, r0
   19428:	ldr	lr, [sp, #36]	; 0x24
   1942c:	ldr	r4, [r5, #40]	; 0x28
   19430:	str	r0, [lr, #4]
   19434:	ldr	lr, [r5, #44]	; 0x2c
   19438:	str	ip, [sp]
   1943c:	ldr	ip, [sp, #44]	; 0x2c
   19440:	str	ip, [sp, #4]
   19444:	ldr	ip, [sp, #40]	; 0x28
   19448:	str	r4, [sp, #12]
   1944c:	str	lr, [sp, #16]
   19450:	str	ip, [sp, #8]
   19454:	bl	178d8 <__assert_fail@plt+0x6368>
   19458:	ldr	r3, [sp, #28]
   1945c:	mov	r0, r7
   19460:	str	r3, [r8]
   19464:	add	sp, sp, #60	; 0x3c
   19468:	ldrd	r4, [sp]
   1946c:	ldrd	r6, [sp, #8]
   19470:	ldrd	r8, [sp, #16]
   19474:	ldrd	sl, [sp, #24]
   19478:	add	sp, sp, #32
   1947c:	pop	{pc}		; (ldr pc, [sp], #4)
   19480:	mov	r1, #8
   19484:	mvn	r3, #-2147483648	; 0x80000000
   19488:	str	r1, [sp]
   1948c:	add	r1, sp, #52	; 0x34
   19490:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   19494:	ldrd	r2, [r7, #8]
   19498:	mov	r6, r0
   1949c:	str	r0, [r7]
   194a0:	strd	r2, [r0]
   194a4:	b	19360 <__assert_fail@plt+0x7df0>
   194a8:	bl	11540 <abort@plt>
   194ac:	strd	r4, [sp, #-16]!
   194b0:	mov	r5, r0
   194b4:	str	r6, [sp, #8]
   194b8:	str	lr, [sp, #12]
   194bc:	bl	113f0 <__errno_location@plt>
   194c0:	mov	r4, r0
   194c4:	cmp	r5, #0
   194c8:	ldr	r0, [pc, #32]	; 194f0 <__assert_fail@plt+0x7f80>
   194cc:	mov	r1, #48	; 0x30
   194d0:	movne	r0, r5
   194d4:	ldr	r6, [r4]
   194d8:	bl	1bedc <__assert_fail@plt+0xa96c>
   194dc:	str	r6, [r4]
   194e0:	ldrd	r4, [sp]
   194e4:	ldr	r6, [sp, #8]
   194e8:	add	sp, sp, #12
   194ec:	pop	{pc}		; (ldr pc, [sp], #4)
   194f0:			; <UNDEFINED> instruction: 0x000303b8
   194f4:	ldr	r3, [pc, #12]	; 19508 <__assert_fail@plt+0x7f98>
   194f8:	cmp	r0, #0
   194fc:	moveq	r0, r3
   19500:	ldr	r0, [r0]
   19504:	bx	lr
   19508:			; <UNDEFINED> instruction: 0x000303b8
   1950c:	ldr	r3, [pc, #12]	; 19520 <__assert_fail@plt+0x7fb0>
   19510:	cmp	r0, #0
   19514:	moveq	r0, r3
   19518:	str	r1, [r0]
   1951c:	bx	lr
   19520:			; <UNDEFINED> instruction: 0x000303b8
   19524:	ldr	r3, [pc, #52]	; 19560 <__assert_fail@plt+0x7ff0>
   19528:	cmp	r0, #0
   1952c:	push	{lr}		; (str lr, [sp, #-4]!)
   19530:	lsr	lr, r1, #5
   19534:	and	r1, r1, #31
   19538:	moveq	r0, r3
   1953c:	add	r3, r0, #8
   19540:	ldr	ip, [r3, lr, lsl #2]
   19544:	lsr	r0, ip, r1
   19548:	eor	r2, r2, r0
   1954c:	and	r0, r0, #1
   19550:	and	r2, r2, #1
   19554:	eor	r1, ip, r2, lsl r1
   19558:	str	r1, [r3, lr, lsl #2]
   1955c:	pop	{pc}		; (ldr pc, [sp], #4)
   19560:			; <UNDEFINED> instruction: 0x000303b8
   19564:	ldr	r3, [pc, #16]	; 1957c <__assert_fail@plt+0x800c>
   19568:	cmp	r0, #0
   1956c:	movne	r3, r0
   19570:	ldr	r0, [r3, #4]
   19574:	str	r1, [r3, #4]
   19578:	bx	lr
   1957c:			; <UNDEFINED> instruction: 0x000303b8
   19580:	ldr	r3, [pc, #48]	; 195b8 <__assert_fail@plt+0x8048>
   19584:	cmp	r0, #0
   19588:	mov	ip, #10
   1958c:	moveq	r0, r3
   19590:	cmp	r2, #0
   19594:	cmpne	r1, #0
   19598:	str	ip, [r0]
   1959c:	beq	195ac <__assert_fail@plt+0x803c>
   195a0:	str	r1, [r0, #40]	; 0x28
   195a4:	str	r2, [r0, #44]	; 0x2c
   195a8:	bx	lr
   195ac:	str	r4, [sp, #-8]!
   195b0:	str	lr, [sp, #4]
   195b4:	bl	11540 <abort@plt>
   195b8:			; <UNDEFINED> instruction: 0x000303b8
   195bc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   195c0:	strd	r6, [sp, #8]
   195c4:	mov	r7, r0
   195c8:	mov	r6, r1
   195cc:	strd	r8, [sp, #16]
   195d0:	mov	r8, r2
   195d4:	mov	r9, r3
   195d8:	str	lr, [sp, #24]
   195dc:	sub	sp, sp, #28
   195e0:	ldr	r4, [sp, #56]	; 0x38
   195e4:	ldr	ip, [pc, #104]	; 19654 <__assert_fail@plt+0x80e4>
   195e8:	cmp	r4, #0
   195ec:	moveq	r4, ip
   195f0:	bl	113f0 <__errno_location@plt>
   195f4:	ldr	ip, [r4, #44]	; 0x2c
   195f8:	mov	r5, r0
   195fc:	mov	r1, r6
   19600:	add	lr, r4, #8
   19604:	mov	r3, r9
   19608:	ldr	r6, [r5]
   1960c:	mov	r2, r8
   19610:	mov	r0, r7
   19614:	str	ip, [sp, #16]
   19618:	ldr	ip, [r4, #40]	; 0x28
   1961c:	str	lr, [sp, #8]
   19620:	str	ip, [sp, #12]
   19624:	ldr	ip, [r4, #4]
   19628:	str	ip, [sp, #4]
   1962c:	ldr	ip, [r4]
   19630:	str	ip, [sp]
   19634:	bl	178d8 <__assert_fail@plt+0x6368>
   19638:	str	r6, [r5]
   1963c:	add	sp, sp, #28
   19640:	ldrd	r4, [sp]
   19644:	ldrd	r6, [sp, #8]
   19648:	ldrd	r8, [sp, #16]
   1964c:	add	sp, sp, #24
   19650:	pop	{pc}		; (ldr pc, [sp], #4)
   19654:			; <UNDEFINED> instruction: 0x000303b8
   19658:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1965c:	cmp	r2, #0
   19660:	ldr	r4, [pc, #192]	; 19728 <__assert_fail@plt+0x81b8>
   19664:	movne	r4, r2
   19668:	strd	r6, [sp, #8]
   1966c:	strd	r8, [sp, #16]
   19670:	mov	r9, r1
   19674:	mov	r8, r0
   19678:	strd	sl, [sp, #24]
   1967c:	str	lr, [sp, #32]
   19680:	sub	sp, sp, #36	; 0x24
   19684:	bl	113f0 <__errno_location@plt>
   19688:	ldr	r5, [r4, #4]
   1968c:	mov	r6, r0
   19690:	add	r7, r4, #8
   19694:	mov	r1, #0
   19698:	mov	r3, r9
   1969c:	ldr	ip, [r4, #44]	; 0x2c
   196a0:	mov	r2, r8
   196a4:	mov	r0, r1
   196a8:	ldr	sl, [r6]
   196ac:	orr	r5, r5, #1
   196b0:	str	ip, [sp, #16]
   196b4:	ldr	ip, [r4, #40]	; 0x28
   196b8:	stmib	sp, {r5, r7, ip}
   196bc:	ldr	ip, [r4]
   196c0:	str	ip, [sp]
   196c4:	bl	178d8 <__assert_fail@plt+0x6368>
   196c8:	add	r1, r0, #1
   196cc:	mov	r0, r1
   196d0:	str	r1, [sp, #28]
   196d4:	bl	1ba98 <__assert_fail@plt+0xa528>
   196d8:	ldr	ip, [r4, #44]	; 0x2c
   196dc:	mov	fp, r0
   196e0:	mov	r3, r9
   196e4:	mov	r2, r8
   196e8:	ldr	r1, [sp, #28]
   196ec:	str	ip, [sp, #16]
   196f0:	ldr	ip, [r4, #40]	; 0x28
   196f4:	stmib	sp, {r5, r7, ip}
   196f8:	ldr	ip, [r4]
   196fc:	str	ip, [sp]
   19700:	bl	178d8 <__assert_fail@plt+0x6368>
   19704:	mov	r0, fp
   19708:	str	sl, [r6]
   1970c:	add	sp, sp, #36	; 0x24
   19710:	ldrd	r4, [sp]
   19714:	ldrd	r6, [sp, #8]
   19718:	ldrd	r8, [sp, #16]
   1971c:	ldrd	sl, [sp, #24]
   19720:	add	sp, sp, #32
   19724:	pop	{pc}		; (ldr pc, [sp], #4)
   19728:			; <UNDEFINED> instruction: 0x000303b8
   1972c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19730:	cmp	r3, #0
   19734:	ldr	r4, [pc, #220]	; 19818 <__assert_fail@plt+0x82a8>
   19738:	movne	r4, r3
   1973c:	strd	r6, [sp, #8]
   19740:	mov	r6, r2
   19744:	strd	r8, [sp, #16]
   19748:	mov	r9, r0
   1974c:	strd	sl, [sp, #24]
   19750:	mov	sl, r1
   19754:	str	lr, [sp, #32]
   19758:	sub	sp, sp, #44	; 0x2c
   1975c:	bl	113f0 <__errno_location@plt>
   19760:	ldr	r5, [r4, #4]
   19764:	mov	r7, r0
   19768:	mov	r1, #0
   1976c:	add	r8, r4, #8
   19770:	mov	r3, sl
   19774:	ldr	ip, [r4, #44]	; 0x2c
   19778:	mov	r2, r9
   1977c:	mov	r0, r1
   19780:	ldr	lr, [r7]
   19784:	cmp	r6, r1
   19788:	orreq	r5, r5, #1
   1978c:	str	ip, [sp, #16]
   19790:	ldr	ip, [r4, #40]	; 0x28
   19794:	stmib	sp, {r5, r8, ip}
   19798:	ldr	ip, [r4]
   1979c:	str	lr, [sp, #28]
   197a0:	str	ip, [sp]
   197a4:	bl	178d8 <__assert_fail@plt+0x6368>
   197a8:	add	r1, r0, #1
   197ac:	mov	fp, r0
   197b0:	mov	r0, r1
   197b4:	str	r1, [sp, #36]	; 0x24
   197b8:	bl	1ba98 <__assert_fail@plt+0xa528>
   197bc:	ldr	ip, [r4, #44]	; 0x2c
   197c0:	mov	r3, sl
   197c4:	mov	r2, r9
   197c8:	ldr	r1, [sp, #36]	; 0x24
   197cc:	str	ip, [sp, #16]
   197d0:	ldr	ip, [r4, #40]	; 0x28
   197d4:	str	r0, [sp, #32]
   197d8:	stmib	sp, {r5, r8, ip}
   197dc:	ldr	ip, [r4]
   197e0:	str	ip, [sp]
   197e4:	bl	178d8 <__assert_fail@plt+0x6368>
   197e8:	ldr	lr, [sp, #28]
   197ec:	cmp	r6, #0
   197f0:	ldr	r0, [sp, #32]
   197f4:	str	lr, [r7]
   197f8:	strne	fp, [r6]
   197fc:	add	sp, sp, #44	; 0x2c
   19800:	ldrd	r4, [sp]
   19804:	ldrd	r6, [sp, #8]
   19808:	ldrd	r8, [sp, #16]
   1980c:	ldrd	sl, [sp, #24]
   19810:	add	sp, sp, #32
   19814:	pop	{pc}		; (ldr pc, [sp], #4)
   19818:			; <UNDEFINED> instruction: 0x000303b8
   1981c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19820:	movw	r5, #372	; 0x174
   19824:	movt	r5, #3
   19828:	ldr	r3, [r5, #4]
   1982c:	strd	r6, [sp, #8]
   19830:	str	r8, [sp, #16]
   19834:	str	lr, [sp, #20]
   19838:	ldr	r7, [r5]
   1983c:	cmp	r3, #1
   19840:	ble	19864 <__assert_fail@plt+0x82f4>
   19844:	mov	r4, #1
   19848:	add	r6, r7, #4
   1984c:	ldr	r0, [r6, r4, lsl #3]
   19850:	add	r4, r4, #1
   19854:	bl	1c94c <__assert_fail@plt+0xb3dc>
   19858:	ldr	r3, [r5, #4]
   1985c:	cmp	r3, r4
   19860:	bgt	1984c <__assert_fail@plt+0x82dc>
   19864:	ldr	r0, [r7, #4]
   19868:	movw	r4, #696	; 0x2b8
   1986c:	movt	r4, #3
   19870:	cmp	r0, r4
   19874:	beq	19888 <__assert_fail@plt+0x8318>
   19878:	bl	1c94c <__assert_fail@plt+0xb3dc>
   1987c:	mov	r3, #256	; 0x100
   19880:	str	r3, [r5, #8]
   19884:	str	r4, [r5, #12]
   19888:	ldr	r4, [pc, #44]	; 198bc <__assert_fail@plt+0x834c>
   1988c:	cmp	r7, r4
   19890:	beq	198a0 <__assert_fail@plt+0x8330>
   19894:	mov	r0, r7
   19898:	bl	1c94c <__assert_fail@plt+0xb3dc>
   1989c:	str	r4, [r5]
   198a0:	mov	r3, #1
   198a4:	ldrd	r6, [sp, #8]
   198a8:	str	r3, [r5, #4]
   198ac:	ldrd	r4, [sp]
   198b0:	ldr	r8, [sp, #16]
   198b4:	add	sp, sp, #20
   198b8:	pop	{pc}		; (ldr pc, [sp], #4)
   198bc:	andeq	r0, r3, ip, ror r1
   198c0:	ldr	r3, [pc, #4]	; 198cc <__assert_fail@plt+0x835c>
   198c4:	mvn	r2, #0
   198c8:	b	192c4 <__assert_fail@plt+0x7d54>
   198cc:			; <UNDEFINED> instruction: 0x000303b8
   198d0:	ldr	r3, [pc]	; 198d8 <__assert_fail@plt+0x8368>
   198d4:	b	192c4 <__assert_fail@plt+0x7d54>
   198d8:			; <UNDEFINED> instruction: 0x000303b8
   198dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   198e0:	movw	r4, #372	; 0x174
   198e4:	movt	r4, #3
   198e8:	strd	r6, [sp, #8]
   198ec:	strd	r8, [sp, #16]
   198f0:	strd	sl, [sp, #24]
   198f4:	mov	sl, r0
   198f8:	str	lr, [sp, #32]
   198fc:	sub	sp, sp, #44	; 0x2c
   19900:	bl	113f0 <__errno_location@plt>
   19904:	ldr	r3, [r0]
   19908:	mov	r8, r0
   1990c:	ldr	r2, [r4, #4]
   19910:	ldr	r5, [r4]
   19914:	str	r3, [sp, #28]
   19918:	cmp	r2, #0
   1991c:	bgt	19978 <__assert_fail@plt+0x8408>
   19920:	add	r3, r4, #8
   19924:	str	r2, [sp, #36]	; 0x24
   19928:	rsb	r2, r2, #1
   1992c:	cmp	r5, r3
   19930:	beq	19a44 <__assert_fail@plt+0x84d4>
   19934:	mov	r1, #8
   19938:	mov	r0, r5
   1993c:	mvn	r3, #-2147483648	; 0x80000000
   19940:	str	r1, [sp]
   19944:	add	r1, sp, #36	; 0x24
   19948:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   1994c:	mov	r5, r0
   19950:	str	r0, [r4]
   19954:	ldr	r0, [r4, #4]
   19958:	mov	r1, #0
   1995c:	ldr	r2, [sp, #36]	; 0x24
   19960:	sub	r2, r2, r0
   19964:	add	r0, r5, r0, lsl #3
   19968:	lsl	r2, r2, #3
   1996c:	bl	11414 <memset@plt>
   19970:	ldr	r3, [sp, #36]	; 0x24
   19974:	str	r3, [r4, #4]
   19978:	movw	r4, #696	; 0x2b8
   1997c:	movt	r4, #3
   19980:	ldr	r9, [r5]
   19984:	add	fp, r4, #264	; 0x108
   19988:	mvn	r3, #0
   1998c:	ldr	r7, [r4, #260]	; 0x104
   19990:	mov	r2, sl
   19994:	ldr	r6, [r5, #4]
   19998:	str	fp, [sp, #8]
   1999c:	mov	r1, r9
   199a0:	ldr	ip, [r4, #256]	; 0x100
   199a4:	orr	r7, r7, #1
   199a8:	ldr	lr, [r4, #300]	; 0x12c
   199ac:	mov	r0, r6
   199b0:	str	ip, [sp]
   199b4:	str	r7, [sp, #4]
   199b8:	str	lr, [sp, #16]
   199bc:	ldr	ip, [r4, #296]	; 0x128
   199c0:	str	ip, [sp, #12]
   199c4:	bl	178d8 <__assert_fail@plt+0x6368>
   199c8:	cmp	r9, r0
   199cc:	bhi	19a1c <__assert_fail@plt+0x84ac>
   199d0:	add	r9, r0, #1
   199d4:	cmp	r6, r4
   199d8:	str	r9, [r5]
   199dc:	beq	199e8 <__assert_fail@plt+0x8478>
   199e0:	mov	r0, r6
   199e4:	bl	1c94c <__assert_fail@plt+0xb3dc>
   199e8:	mov	r0, r9
   199ec:	bl	1ba98 <__assert_fail@plt+0xa528>
   199f0:	ldr	r3, [r4, #256]	; 0x100
   199f4:	mov	r2, sl
   199f8:	mov	r1, r9
   199fc:	mov	r6, r0
   19a00:	ldr	lr, [r4, #296]	; 0x128
   19a04:	ldr	ip, [r4, #300]	; 0x12c
   19a08:	str	r0, [r5, #4]
   19a0c:	stm	sp, {r3, r7, fp, lr}
   19a10:	mvn	r3, #0
   19a14:	str	ip, [sp, #16]
   19a18:	bl	178d8 <__assert_fail@plt+0x6368>
   19a1c:	ldr	r3, [sp, #28]
   19a20:	mov	r0, r6
   19a24:	str	r3, [r8]
   19a28:	add	sp, sp, #44	; 0x2c
   19a2c:	ldrd	r4, [sp]
   19a30:	ldrd	r6, [sp, #8]
   19a34:	ldrd	r8, [sp, #16]
   19a38:	ldrd	sl, [sp, #24]
   19a3c:	add	sp, sp, #32
   19a40:	pop	{pc}		; (ldr pc, [sp], #4)
   19a44:	mov	r0, #8
   19a48:	mvn	r3, #-2147483648	; 0x80000000
   19a4c:	add	r1, sp, #36	; 0x24
   19a50:	str	r0, [sp]
   19a54:	mov	r0, #0
   19a58:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   19a5c:	ldrd	r2, [r4, #8]
   19a60:	mov	r5, r0
   19a64:	str	r0, [r4]
   19a68:	strd	r2, [r0]
   19a6c:	b	19954 <__assert_fail@plt+0x83e4>
   19a70:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19a74:	movw	r4, #372	; 0x174
   19a78:	movt	r4, #3
   19a7c:	strd	r6, [sp, #8]
   19a80:	strd	r8, [sp, #16]
   19a84:	strd	sl, [sp, #24]
   19a88:	mov	sl, r0
   19a8c:	mov	fp, r1
   19a90:	str	lr, [sp, #32]
   19a94:	sub	sp, sp, #44	; 0x2c
   19a98:	bl	113f0 <__errno_location@plt>
   19a9c:	ldr	r3, [r0]
   19aa0:	mov	r8, r0
   19aa4:	ldr	r2, [r4, #4]
   19aa8:	ldr	r5, [r4]
   19aac:	str	r3, [sp, #28]
   19ab0:	cmp	r2, #0
   19ab4:	bgt	19b10 <__assert_fail@plt+0x85a0>
   19ab8:	add	r3, r4, #8
   19abc:	str	r2, [sp, #36]	; 0x24
   19ac0:	rsb	r2, r2, #1
   19ac4:	cmp	r5, r3
   19ac8:	beq	19bec <__assert_fail@plt+0x867c>
   19acc:	mov	r1, #8
   19ad0:	mov	r0, r5
   19ad4:	mvn	r3, #-2147483648	; 0x80000000
   19ad8:	str	r1, [sp]
   19adc:	add	r1, sp, #36	; 0x24
   19ae0:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   19ae4:	mov	r5, r0
   19ae8:	str	r0, [r4]
   19aec:	ldr	r0, [r4, #4]
   19af0:	mov	r1, #0
   19af4:	ldr	r2, [sp, #36]	; 0x24
   19af8:	sub	r2, r2, r0
   19afc:	add	r0, r5, r0, lsl #3
   19b00:	lsl	r2, r2, #3
   19b04:	bl	11414 <memset@plt>
   19b08:	ldr	r3, [sp, #36]	; 0x24
   19b0c:	str	r3, [r4, #4]
   19b10:	movw	r4, #696	; 0x2b8
   19b14:	movt	r4, #3
   19b18:	ldr	r9, [r5]
   19b1c:	add	r0, r4, #264	; 0x108
   19b20:	mov	r3, fp
   19b24:	ldr	r7, [r4, #260]	; 0x104
   19b28:	mov	r2, sl
   19b2c:	ldr	r6, [r5, #4]
   19b30:	str	r0, [sp, #8]
   19b34:	mov	r1, r9
   19b38:	ldr	ip, [r4, #256]	; 0x100
   19b3c:	orr	r7, r7, #1
   19b40:	ldr	lr, [r4, #300]	; 0x12c
   19b44:	mov	r0, r6
   19b48:	str	ip, [sp]
   19b4c:	str	r7, [sp, #4]
   19b50:	str	lr, [sp, #16]
   19b54:	ldr	ip, [r4, #296]	; 0x128
   19b58:	str	ip, [sp, #12]
   19b5c:	bl	178d8 <__assert_fail@plt+0x6368>
   19b60:	cmp	r9, r0
   19b64:	bhi	19bc4 <__assert_fail@plt+0x8654>
   19b68:	add	r9, r0, #1
   19b6c:	cmp	r6, r4
   19b70:	str	r9, [r5]
   19b74:	beq	19b80 <__assert_fail@plt+0x8610>
   19b78:	mov	r0, r6
   19b7c:	bl	1c94c <__assert_fail@plt+0xb3dc>
   19b80:	mov	r0, r9
   19b84:	bl	1ba98 <__assert_fail@plt+0xa528>
   19b88:	ldr	ip, [r4, #256]	; 0x100
   19b8c:	mov	r1, r9
   19b90:	mov	r3, fp
   19b94:	mov	r2, sl
   19b98:	mov	r6, r0
   19b9c:	ldr	r9, [r4, #296]	; 0x128
   19ba0:	ldr	lr, [r4, #300]	; 0x12c
   19ba4:	str	r0, [r5, #4]
   19ba8:	str	ip, [sp]
   19bac:	ldr	ip, [pc, #100]	; 19c18 <__assert_fail@plt+0x86a8>
   19bb0:	str	r7, [sp, #4]
   19bb4:	str	ip, [sp, #8]
   19bb8:	str	r9, [sp, #12]
   19bbc:	str	lr, [sp, #16]
   19bc0:	bl	178d8 <__assert_fail@plt+0x6368>
   19bc4:	ldr	r3, [sp, #28]
   19bc8:	mov	r0, r6
   19bcc:	str	r3, [r8]
   19bd0:	add	sp, sp, #44	; 0x2c
   19bd4:	ldrd	r4, [sp]
   19bd8:	ldrd	r6, [sp, #8]
   19bdc:	ldrd	r8, [sp, #16]
   19be0:	ldrd	sl, [sp, #24]
   19be4:	add	sp, sp, #32
   19be8:	pop	{pc}		; (ldr pc, [sp], #4)
   19bec:	mov	r0, #8
   19bf0:	mvn	r3, #-2147483648	; 0x80000000
   19bf4:	add	r1, sp, #36	; 0x24
   19bf8:	str	r0, [sp]
   19bfc:	mov	r0, #0
   19c00:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   19c04:	ldrd	r2, [r4, #8]
   19c08:	mov	r5, r0
   19c0c:	str	r0, [r4]
   19c10:	strd	r2, [r0]
   19c14:	b	19aec <__assert_fail@plt+0x857c>
   19c18:	andeq	r0, r3, r0, asr #7
   19c1c:	strd	r4, [sp, #-20]!	; 0xffffffec
   19c20:	mov	r4, #0
   19c24:	mov	r5, #0
   19c28:	strd	r6, [sp, #8]
   19c2c:	cmp	r1, #10
   19c30:	str	lr, [sp, #16]
   19c34:	sub	sp, sp, #100	; 0x64
   19c38:	strd	r4, [sp, #48]	; 0x30
   19c3c:	beq	19c84 <__assert_fail@plt+0x8714>
   19c40:	mov	r3, sp
   19c44:	strd	r4, [sp, #8]
   19c48:	str	r1, [sp, #48]	; 0x30
   19c4c:	mov	r1, r2
   19c50:	mvn	r2, #0
   19c54:	ldrd	r6, [sp, #48]	; 0x30
   19c58:	strd	r6, [sp]
   19c5c:	strd	r4, [sp, #16]
   19c60:	strd	r4, [sp, #24]
   19c64:	strd	r4, [sp, #32]
   19c68:	strd	r4, [sp, #40]	; 0x28
   19c6c:	bl	192c4 <__assert_fail@plt+0x7d54>
   19c70:	add	sp, sp, #100	; 0x64
   19c74:	ldrd	r4, [sp]
   19c78:	ldrd	r6, [sp, #8]
   19c7c:	add	sp, sp, #16
   19c80:	pop	{pc}		; (ldr pc, [sp], #4)
   19c84:	bl	11540 <abort@plt>
   19c88:	strd	r4, [sp, #-20]!	; 0xffffffec
   19c8c:	mov	r4, #0
   19c90:	mov	r5, #0
   19c94:	strd	r6, [sp, #8]
   19c98:	cmp	r1, #10
   19c9c:	str	lr, [sp, #16]
   19ca0:	sub	sp, sp, #100	; 0x64
   19ca4:	strd	r4, [sp, #48]	; 0x30
   19ca8:	beq	19cf4 <__assert_fail@plt+0x8784>
   19cac:	mov	ip, r2
   19cb0:	mov	r2, r3
   19cb4:	strd	r4, [sp, #8]
   19cb8:	str	r1, [sp, #48]	; 0x30
   19cbc:	mov	r3, sp
   19cc0:	mov	r1, ip
   19cc4:	ldrd	r6, [sp, #48]	; 0x30
   19cc8:	strd	r6, [sp]
   19ccc:	strd	r4, [sp, #16]
   19cd0:	strd	r4, [sp, #24]
   19cd4:	strd	r4, [sp, #32]
   19cd8:	strd	r4, [sp, #40]	; 0x28
   19cdc:	bl	192c4 <__assert_fail@plt+0x7d54>
   19ce0:	add	sp, sp, #100	; 0x64
   19ce4:	ldrd	r4, [sp]
   19ce8:	ldrd	r6, [sp, #8]
   19cec:	add	sp, sp, #16
   19cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   19cf4:	bl	11540 <abort@plt>
   19cf8:	mov	r2, #0
   19cfc:	mov	r3, #0
   19d00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19d04:	strd	r6, [sp, #8]
   19d08:	cmp	r0, #10
   19d0c:	strd	r8, [sp, #16]
   19d10:	strd	sl, [sp, #24]
   19d14:	str	lr, [sp, #32]
   19d18:	sub	sp, sp, #124	; 0x7c
   19d1c:	strd	r2, [sp, #72]	; 0x48
   19d20:	strd	r2, [sp, #80]	; 0x50
   19d24:	strd	r2, [sp, #88]	; 0x58
   19d28:	strd	r2, [sp, #96]	; 0x60
   19d2c:	strd	r2, [sp, #104]	; 0x68
   19d30:	strd	r2, [sp, #112]	; 0x70
   19d34:	beq	19ed8 <__assert_fail@plt+0x8968>
   19d38:	mov	r6, r1
   19d3c:	movw	r4, #372	; 0x174
   19d40:	movt	r4, #3
   19d44:	str	r0, [sp, #72]	; 0x48
   19d48:	ldrd	r0, [sp, #72]	; 0x48
   19d4c:	strd	r0, [sp, #24]
   19d50:	strd	r2, [sp, #32]
   19d54:	strd	r2, [sp, #40]	; 0x28
   19d58:	strd	r2, [sp, #48]	; 0x30
   19d5c:	strd	r2, [sp, #56]	; 0x38
   19d60:	strd	r2, [sp, #64]	; 0x40
   19d64:	bl	113f0 <__errno_location@plt>
   19d68:	mov	r8, r0
   19d6c:	ldr	r5, [r4]
   19d70:	ldr	r2, [r4, #4]
   19d74:	ldr	r9, [r0]
   19d78:	cmp	r2, #0
   19d7c:	bgt	19dd8 <__assert_fail@plt+0x8868>
   19d80:	add	r3, r4, #8
   19d84:	str	r2, [sp, #72]	; 0x48
   19d88:	rsb	r2, r2, #1
   19d8c:	cmp	r5, r3
   19d90:	beq	19eac <__assert_fail@plt+0x893c>
   19d94:	mov	r3, #8
   19d98:	mov	r0, r5
   19d9c:	add	r1, sp, #72	; 0x48
   19da0:	str	r3, [sp]
   19da4:	mvn	r3, #-2147483648	; 0x80000000
   19da8:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   19dac:	mov	r5, r0
   19db0:	str	r0, [r4]
   19db4:	ldr	r0, [r4, #4]
   19db8:	mov	r1, #0
   19dbc:	ldr	r2, [sp, #72]	; 0x48
   19dc0:	sub	r2, r2, r0
   19dc4:	add	r0, r5, r0, lsl #3
   19dc8:	lsl	r2, r2, #3
   19dcc:	bl	11414 <memset@plt>
   19dd0:	ldr	r3, [sp, #72]	; 0x48
   19dd4:	str	r3, [r4, #4]
   19dd8:	ldr	sl, [r5]
   19ddc:	add	r0, sp, #32
   19de0:	mvn	r3, #0
   19de4:	mov	r2, r6
   19de8:	ldr	r7, [sp, #28]
   19dec:	ldr	r4, [r5, #4]
   19df0:	mov	r1, sl
   19df4:	str	r0, [sp, #8]
   19df8:	ldr	lr, [sp, #24]
   19dfc:	orr	r7, r7, #1
   19e00:	ldr	ip, [sp, #64]	; 0x40
   19e04:	mov	r0, r4
   19e08:	ldr	fp, [sp, #68]	; 0x44
   19e0c:	str	lr, [sp]
   19e10:	str	r7, [sp, #4]
   19e14:	str	ip, [sp, #12]
   19e18:	str	fp, [sp, #16]
   19e1c:	bl	178d8 <__assert_fail@plt+0x6368>
   19e20:	cmp	sl, r0
   19e24:	bhi	19e88 <__assert_fail@plt+0x8918>
   19e28:	add	sl, r0, #1
   19e2c:	movw	r3, #696	; 0x2b8
   19e30:	movt	r3, #3
   19e34:	cmp	r4, r3
   19e38:	str	sl, [r5]
   19e3c:	beq	19e48 <__assert_fail@plt+0x88d8>
   19e40:	mov	r0, r4
   19e44:	bl	1c94c <__assert_fail@plt+0xb3dc>
   19e48:	mov	r0, sl
   19e4c:	bl	1ba98 <__assert_fail@plt+0xa528>
   19e50:	ldr	r3, [sp, #24]
   19e54:	mov	r2, r6
   19e58:	mov	r1, sl
   19e5c:	mov	r4, r0
   19e60:	ldr	lr, [sp, #64]	; 0x40
   19e64:	ldr	ip, [sp, #68]	; 0x44
   19e68:	str	r0, [r5, #4]
   19e6c:	add	r5, sp, #32
   19e70:	stm	sp, {r3, r7}
   19e74:	mvn	r3, #0
   19e78:	str	r5, [sp, #8]
   19e7c:	str	lr, [sp, #12]
   19e80:	str	ip, [sp, #16]
   19e84:	bl	178d8 <__assert_fail@plt+0x6368>
   19e88:	mov	r0, r4
   19e8c:	str	r9, [r8]
   19e90:	add	sp, sp, #124	; 0x7c
   19e94:	ldrd	r4, [sp]
   19e98:	ldrd	r6, [sp, #8]
   19e9c:	ldrd	r8, [sp, #16]
   19ea0:	ldrd	sl, [sp, #24]
   19ea4:	add	sp, sp, #32
   19ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   19eac:	mov	r0, #8
   19eb0:	mvn	r3, #-2147483648	; 0x80000000
   19eb4:	add	r1, sp, #72	; 0x48
   19eb8:	str	r0, [sp]
   19ebc:	mov	r0, #0
   19ec0:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   19ec4:	ldrd	r2, [r4, #8]
   19ec8:	mov	r5, r0
   19ecc:	str	r0, [r4]
   19ed0:	strd	r2, [r0]
   19ed4:	b	19db4 <__assert_fail@plt+0x8844>
   19ed8:	bl	11540 <abort@plt>
   19edc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19ee0:	cmp	r0, #10
   19ee4:	strd	r6, [sp, #8]
   19ee8:	mov	r6, #0
   19eec:	mov	r7, #0
   19ef0:	strd	r8, [sp, #16]
   19ef4:	strd	sl, [sp, #24]
   19ef8:	str	lr, [sp, #32]
   19efc:	sub	sp, sp, #124	; 0x7c
   19f00:	strd	r6, [sp, #72]	; 0x48
   19f04:	strd	r6, [sp, #80]	; 0x50
   19f08:	strd	r6, [sp, #88]	; 0x58
   19f0c:	strd	r6, [sp, #96]	; 0x60
   19f10:	strd	r6, [sp, #104]	; 0x68
   19f14:	strd	r6, [sp, #112]	; 0x70
   19f18:	beq	1a0c4 <__assert_fail@plt+0x8b54>
   19f1c:	mov	sl, r2
   19f20:	movw	r5, #372	; 0x174
   19f24:	movt	r5, #3
   19f28:	str	r0, [sp, #72]	; 0x48
   19f2c:	mov	r9, r1
   19f30:	ldrd	r2, [sp, #72]	; 0x48
   19f34:	strd	r2, [sp, #24]
   19f38:	strd	r6, [sp, #32]
   19f3c:	strd	r6, [sp, #40]	; 0x28
   19f40:	strd	r6, [sp, #48]	; 0x30
   19f44:	strd	r6, [sp, #56]	; 0x38
   19f48:	strd	r6, [sp, #64]	; 0x40
   19f4c:	bl	113f0 <__errno_location@plt>
   19f50:	mov	r7, r0
   19f54:	ldr	r4, [r5]
   19f58:	ldr	r2, [r5, #4]
   19f5c:	ldr	fp, [r0]
   19f60:	cmp	r2, #0
   19f64:	bgt	19fc0 <__assert_fail@plt+0x8a50>
   19f68:	add	r3, r5, #8
   19f6c:	str	r2, [sp, #72]	; 0x48
   19f70:	rsb	r2, r2, #1
   19f74:	cmp	r4, r3
   19f78:	beq	1a098 <__assert_fail@plt+0x8b28>
   19f7c:	mov	r3, #8
   19f80:	mov	r0, r4
   19f84:	add	r1, sp, #72	; 0x48
   19f88:	str	r3, [sp]
   19f8c:	mvn	r3, #-2147483648	; 0x80000000
   19f90:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   19f94:	mov	r4, r0
   19f98:	str	r0, [r5]
   19f9c:	ldr	r0, [r5, #4]
   19fa0:	mov	r1, #0
   19fa4:	ldr	r2, [sp, #72]	; 0x48
   19fa8:	sub	r2, r2, r0
   19fac:	add	r0, r4, r0, lsl #3
   19fb0:	lsl	r2, r2, #3
   19fb4:	bl	11414 <memset@plt>
   19fb8:	ldr	r3, [sp, #72]	; 0x48
   19fbc:	str	r3, [r5, #4]
   19fc0:	ldr	ip, [sp, #24]
   19fc4:	add	r0, sp, #32
   19fc8:	mov	r3, sl
   19fcc:	mov	r2, r9
   19fd0:	ldr	r6, [sp, #28]
   19fd4:	ldr	r8, [r4]
   19fd8:	ldr	r5, [r4, #4]
   19fdc:	str	ip, [sp]
   19fe0:	orr	r6, r6, #1
   19fe4:	ldr	ip, [sp, #64]	; 0x40
   19fe8:	mov	r1, r8
   19fec:	str	r6, [sp, #4]
   19ff0:	ldr	lr, [sp, #68]	; 0x44
   19ff4:	str	r0, [sp, #8]
   19ff8:	mov	r0, r5
   19ffc:	str	ip, [sp, #12]
   1a000:	str	lr, [sp, #16]
   1a004:	bl	178d8 <__assert_fail@plt+0x6368>
   1a008:	cmp	r8, r0
   1a00c:	bhi	1a074 <__assert_fail@plt+0x8b04>
   1a010:	add	r8, r0, #1
   1a014:	movw	r3, #696	; 0x2b8
   1a018:	movt	r3, #3
   1a01c:	cmp	r5, r3
   1a020:	str	r8, [r4]
   1a024:	beq	1a030 <__assert_fail@plt+0x8ac0>
   1a028:	mov	r0, r5
   1a02c:	bl	1c94c <__assert_fail@plt+0xb3dc>
   1a030:	mov	r0, r8
   1a034:	bl	1ba98 <__assert_fail@plt+0xa528>
   1a038:	ldr	lr, [sp, #24]
   1a03c:	mov	r1, r8
   1a040:	mov	r3, sl
   1a044:	mov	r2, r9
   1a048:	mov	r5, r0
   1a04c:	ldr	r8, [sp, #64]	; 0x40
   1a050:	ldr	ip, [sp, #68]	; 0x44
   1a054:	str	r0, [r4, #4]
   1a058:	str	lr, [sp]
   1a05c:	add	lr, sp, #32
   1a060:	str	r6, [sp, #4]
   1a064:	str	lr, [sp, #8]
   1a068:	str	r8, [sp, #12]
   1a06c:	str	ip, [sp, #16]
   1a070:	bl	178d8 <__assert_fail@plt+0x6368>
   1a074:	mov	r0, r5
   1a078:	str	fp, [r7]
   1a07c:	add	sp, sp, #124	; 0x7c
   1a080:	ldrd	r4, [sp]
   1a084:	ldrd	r6, [sp, #8]
   1a088:	ldrd	r8, [sp, #16]
   1a08c:	ldrd	sl, [sp, #24]
   1a090:	add	sp, sp, #32
   1a094:	pop	{pc}		; (ldr pc, [sp], #4)
   1a098:	mov	r0, #8
   1a09c:	mvn	r3, #-2147483648	; 0x80000000
   1a0a0:	add	r1, sp, #72	; 0x48
   1a0a4:	str	r0, [sp]
   1a0a8:	mov	r0, #0
   1a0ac:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   1a0b0:	ldrd	r2, [r5, #8]
   1a0b4:	mov	r4, r0
   1a0b8:	str	r0, [r5]
   1a0bc:	strd	r2, [r0]
   1a0c0:	b	19f9c <__assert_fail@plt+0x8a2c>
   1a0c4:	bl	11540 <abort@plt>
   1a0c8:	ldr	r3, [pc, #492]	; 1a2bc <__assert_fail@plt+0x8d4c>
   1a0cc:	lsr	ip, r2, #5
   1a0d0:	and	r2, r2, #31
   1a0d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a0d8:	movw	r5, #372	; 0x174
   1a0dc:	movt	r5, #3
   1a0e0:	strd	r6, [sp, #8]
   1a0e4:	strd	r8, [sp, #16]
   1a0e8:	strd	sl, [sp, #24]
   1a0ec:	mov	sl, r0
   1a0f0:	mov	fp, r1
   1a0f4:	ldrd	r0, [r3]
   1a0f8:	str	lr, [sp, #32]
   1a0fc:	sub	sp, sp, #92	; 0x5c
   1a100:	ldrd	r8, [r3, #8]
   1a104:	add	r6, sp, #48	; 0x30
   1a108:	strd	r0, [sp, #40]	; 0x28
   1a10c:	ldrd	r0, [r3, #16]
   1a110:	strd	r8, [sp, #48]	; 0x30
   1a114:	ldrd	r8, [r3, #24]
   1a118:	strd	r0, [sp, #56]	; 0x38
   1a11c:	ldrd	r0, [r3, #32]
   1a120:	strd	r8, [sp, #64]	; 0x40
   1a124:	ldrd	r8, [r3, #40]	; 0x28
   1a128:	strd	r0, [sp, #72]	; 0x48
   1a12c:	strd	r8, [sp, #80]	; 0x50
   1a130:	ldr	r3, [r6, ip, lsl #2]
   1a134:	mvn	r1, r3, lsr r2
   1a138:	and	r1, r1, #1
   1a13c:	eor	r2, r3, r1, lsl r2
   1a140:	str	r2, [r6, ip, lsl #2]
   1a144:	bl	113f0 <__errno_location@plt>
   1a148:	ldr	r3, [r0]
   1a14c:	mov	r8, r0
   1a150:	ldr	r2, [r5, #4]
   1a154:	ldr	r4, [r5]
   1a158:	str	r3, [sp, #28]
   1a15c:	cmp	r2, #0
   1a160:	bgt	1a1bc <__assert_fail@plt+0x8c4c>
   1a164:	add	r3, r5, #8
   1a168:	str	r2, [sp, #36]	; 0x24
   1a16c:	rsb	r2, r2, #1
   1a170:	cmp	r4, r3
   1a174:	beq	1a290 <__assert_fail@plt+0x8d20>
   1a178:	mov	r1, #8
   1a17c:	mov	r0, r4
   1a180:	mvn	r3, #-2147483648	; 0x80000000
   1a184:	str	r1, [sp]
   1a188:	add	r1, sp, #36	; 0x24
   1a18c:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   1a190:	mov	r4, r0
   1a194:	str	r0, [r5]
   1a198:	ldr	r0, [r5, #4]
   1a19c:	mov	r1, #0
   1a1a0:	ldr	r2, [sp, #36]	; 0x24
   1a1a4:	sub	r2, r2, r0
   1a1a8:	add	r0, r4, r0, lsl #3
   1a1ac:	lsl	r2, r2, #3
   1a1b0:	bl	11414 <memset@plt>
   1a1b4:	ldr	r3, [sp, #36]	; 0x24
   1a1b8:	str	r3, [r5, #4]
   1a1bc:	ldr	ip, [sp, #40]	; 0x28
   1a1c0:	mov	r3, fp
   1a1c4:	mov	r2, sl
   1a1c8:	ldr	r7, [sp, #44]	; 0x2c
   1a1cc:	ldr	r9, [r4]
   1a1d0:	ldr	r5, [r4, #4]
   1a1d4:	str	ip, [sp]
   1a1d8:	orr	r7, r7, #1
   1a1dc:	ldr	ip, [sp, #80]	; 0x50
   1a1e0:	mov	r1, r9
   1a1e4:	str	r7, [sp, #4]
   1a1e8:	ldr	lr, [sp, #84]	; 0x54
   1a1ec:	mov	r0, r5
   1a1f0:	str	r6, [sp, #8]
   1a1f4:	str	ip, [sp, #12]
   1a1f8:	str	lr, [sp, #16]
   1a1fc:	bl	178d8 <__assert_fail@plt+0x6368>
   1a200:	cmp	r9, r0
   1a204:	bhi	1a268 <__assert_fail@plt+0x8cf8>
   1a208:	add	r9, r0, #1
   1a20c:	movw	r3, #696	; 0x2b8
   1a210:	movt	r3, #3
   1a214:	cmp	r5, r3
   1a218:	str	r9, [r4]
   1a21c:	beq	1a228 <__assert_fail@plt+0x8cb8>
   1a220:	mov	r0, r5
   1a224:	bl	1c94c <__assert_fail@plt+0xb3dc>
   1a228:	mov	r0, r9
   1a22c:	bl	1ba98 <__assert_fail@plt+0xa528>
   1a230:	mov	r1, r9
   1a234:	ldr	ip, [sp, #40]	; 0x28
   1a238:	mov	r3, fp
   1a23c:	mov	r2, sl
   1a240:	mov	r5, r0
   1a244:	ldr	r9, [sp, #80]	; 0x50
   1a248:	ldr	lr, [sp, #84]	; 0x54
   1a24c:	str	r0, [r4, #4]
   1a250:	str	ip, [sp]
   1a254:	str	r7, [sp, #4]
   1a258:	str	r6, [sp, #8]
   1a25c:	str	r9, [sp, #12]
   1a260:	str	lr, [sp, #16]
   1a264:	bl	178d8 <__assert_fail@plt+0x6368>
   1a268:	ldr	r3, [sp, #28]
   1a26c:	mov	r0, r5
   1a270:	str	r3, [r8]
   1a274:	add	sp, sp, #92	; 0x5c
   1a278:	ldrd	r4, [sp]
   1a27c:	ldrd	r6, [sp, #8]
   1a280:	ldrd	r8, [sp, #16]
   1a284:	ldrd	sl, [sp, #24]
   1a288:	add	sp, sp, #32
   1a28c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a290:	mov	r0, #8
   1a294:	mvn	r3, #-2147483648	; 0x80000000
   1a298:	add	r1, sp, #36	; 0x24
   1a29c:	str	r0, [sp]
   1a2a0:	mov	r0, #0
   1a2a4:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   1a2a8:	ldrd	r2, [r5, #8]
   1a2ac:	mov	r4, r0
   1a2b0:	str	r0, [r5]
   1a2b4:	strd	r2, [r0]
   1a2b8:	b	1a198 <__assert_fail@plt+0x8c28>
   1a2bc:			; <UNDEFINED> instruction: 0x000303b8
   1a2c0:	ldr	ip, [pc, #476]	; 1a4a4 <__assert_fail@plt+0x8f34>
   1a2c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a2c8:	movw	r4, #372	; 0x174
   1a2cc:	movt	r4, #3
   1a2d0:	ldrd	r2, [ip, #8]
   1a2d4:	strd	r6, [sp, #8]
   1a2d8:	lsr	r7, r1, #5
   1a2dc:	mov	r6, r0
   1a2e0:	strd	r8, [sp, #16]
   1a2e4:	str	lr, [sp, #32]
   1a2e8:	and	lr, r1, #31
   1a2ec:	ldrd	r0, [ip]
   1a2f0:	strd	sl, [sp, #24]
   1a2f4:	sub	sp, sp, #84	; 0x54
   1a2f8:	add	r5, sp, #40	; 0x28
   1a2fc:	strd	r0, [sp, #32]
   1a300:	strd	r2, [sp, #40]	; 0x28
   1a304:	ldrd	r0, [ip, #16]
   1a308:	ldrd	r2, [ip, #24]
   1a30c:	strd	r0, [sp, #48]	; 0x30
   1a310:	ldrd	r0, [ip, #32]
   1a314:	strd	r2, [sp, #56]	; 0x38
   1a318:	ldrd	r2, [ip, #40]	; 0x28
   1a31c:	strd	r0, [sp, #64]	; 0x40
   1a320:	strd	r2, [sp, #72]	; 0x48
   1a324:	ldr	r1, [r5, r7, lsl #2]
   1a328:	mvn	r3, r1, lsr lr
   1a32c:	and	r3, r3, #1
   1a330:	eor	r1, r1, r3, lsl lr
   1a334:	str	r1, [r5, r7, lsl #2]
   1a338:	bl	113f0 <__errno_location@plt>
   1a33c:	mov	r9, r0
   1a340:	ldr	sl, [r0]
   1a344:	ldr	r2, [r4, #4]
   1a348:	ldr	r7, [r4]
   1a34c:	cmp	r2, #0
   1a350:	bgt	1a3ac <__assert_fail@plt+0x8e3c>
   1a354:	add	r3, r4, #8
   1a358:	str	r2, [sp, #28]
   1a35c:	rsb	r2, r2, #1
   1a360:	cmp	r7, r3
   1a364:	beq	1a478 <__assert_fail@plt+0x8f08>
   1a368:	mov	r1, #8
   1a36c:	mov	r0, r7
   1a370:	mvn	r3, #-2147483648	; 0x80000000
   1a374:	str	r1, [sp]
   1a378:	add	r1, sp, #28
   1a37c:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   1a380:	mov	r7, r0
   1a384:	str	r0, [r4]
   1a388:	ldr	r0, [r4, #4]
   1a38c:	mov	r1, #0
   1a390:	ldr	r2, [sp, #28]
   1a394:	sub	r2, r2, r0
   1a398:	add	r0, r7, r0, lsl #3
   1a39c:	lsl	r2, r2, #3
   1a3a0:	bl	11414 <memset@plt>
   1a3a4:	ldr	r3, [sp, #28]
   1a3a8:	str	r3, [r4, #4]
   1a3ac:	ldr	ip, [sp, #32]
   1a3b0:	mvn	r3, #0
   1a3b4:	mov	r2, r6
   1a3b8:	ldr	r8, [sp, #36]	; 0x24
   1a3bc:	ldr	fp, [r7]
   1a3c0:	ldr	r4, [r7, #4]
   1a3c4:	str	ip, [sp]
   1a3c8:	orr	r8, r8, #1
   1a3cc:	ldr	ip, [sp, #72]	; 0x48
   1a3d0:	mov	r1, fp
   1a3d4:	str	r8, [sp, #4]
   1a3d8:	ldr	lr, [sp, #76]	; 0x4c
   1a3dc:	mov	r0, r4
   1a3e0:	str	r5, [sp, #8]
   1a3e4:	str	ip, [sp, #12]
   1a3e8:	str	lr, [sp, #16]
   1a3ec:	bl	178d8 <__assert_fail@plt+0x6368>
   1a3f0:	cmp	fp, r0
   1a3f4:	bhi	1a454 <__assert_fail@plt+0x8ee4>
   1a3f8:	add	fp, r0, #1
   1a3fc:	movw	r3, #696	; 0x2b8
   1a400:	movt	r3, #3
   1a404:	cmp	r4, r3
   1a408:	str	fp, [r7]
   1a40c:	beq	1a418 <__assert_fail@plt+0x8ea8>
   1a410:	mov	r0, r4
   1a414:	bl	1c94c <__assert_fail@plt+0xb3dc>
   1a418:	mov	r0, fp
   1a41c:	bl	1ba98 <__assert_fail@plt+0xa528>
   1a420:	ldr	r3, [sp, #32]
   1a424:	mov	r2, r6
   1a428:	mov	r1, fp
   1a42c:	mov	r4, r0
   1a430:	ldr	lr, [sp, #72]	; 0x48
   1a434:	ldr	ip, [sp, #76]	; 0x4c
   1a438:	str	r0, [r7, #4]
   1a43c:	stm	sp, {r3, r8}
   1a440:	mvn	r3, #0
   1a444:	str	r5, [sp, #8]
   1a448:	str	lr, [sp, #12]
   1a44c:	str	ip, [sp, #16]
   1a450:	bl	178d8 <__assert_fail@plt+0x6368>
   1a454:	mov	r0, r4
   1a458:	str	sl, [r9]
   1a45c:	add	sp, sp, #84	; 0x54
   1a460:	ldrd	r4, [sp]
   1a464:	ldrd	r6, [sp, #8]
   1a468:	ldrd	r8, [sp, #16]
   1a46c:	ldrd	sl, [sp, #24]
   1a470:	add	sp, sp, #32
   1a474:	pop	{pc}		; (ldr pc, [sp], #4)
   1a478:	mov	r0, #8
   1a47c:	mvn	r3, #-2147483648	; 0x80000000
   1a480:	add	r1, sp, #28
   1a484:	str	r0, [sp]
   1a488:	mov	r0, #0
   1a48c:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   1a490:	ldrd	r2, [r4, #8]
   1a494:	mov	r7, r0
   1a498:	str	r0, [r4]
   1a49c:	strd	r2, [r0]
   1a4a0:	b	1a388 <__assert_fail@plt+0x8e18>
   1a4a4:			; <UNDEFINED> instruction: 0x000303b8
   1a4a8:	ldr	ip, [pc, #472]	; 1a688 <__assert_fail@plt+0x9118>
   1a4ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a4b0:	mov	r5, r0
   1a4b4:	movw	r4, #372	; 0x174
   1a4b8:	movt	r4, #3
   1a4bc:	ldrd	r2, [ip]
   1a4c0:	ldrd	r0, [ip, #8]
   1a4c4:	strd	r6, [sp, #8]
   1a4c8:	strd	r8, [sp, #16]
   1a4cc:	strd	sl, [sp, #24]
   1a4d0:	str	lr, [sp, #32]
   1a4d4:	sub	sp, sp, #84	; 0x54
   1a4d8:	strd	r2, [sp, #32]
   1a4dc:	strd	r0, [sp, #40]	; 0x28
   1a4e0:	ldr	r6, [sp, #44]	; 0x2c
   1a4e4:	ldrd	r2, [ip, #16]
   1a4e8:	ldrd	r0, [ip, #24]
   1a4ec:	mvn	lr, r6
   1a4f0:	and	lr, lr, #67108864	; 0x4000000
   1a4f4:	eor	lr, lr, r6
   1a4f8:	ldrd	r6, [ip, #40]	; 0x28
   1a4fc:	strd	r2, [sp, #48]	; 0x30
   1a500:	ldrd	r2, [ip, #32]
   1a504:	str	lr, [sp, #44]	; 0x2c
   1a508:	strd	r0, [sp, #56]	; 0x38
   1a50c:	strd	r2, [sp, #64]	; 0x40
   1a510:	strd	r6, [sp, #72]	; 0x48
   1a514:	bl	113f0 <__errno_location@plt>
   1a518:	mov	r8, r0
   1a51c:	ldr	r9, [r0]
   1a520:	ldr	r2, [r4, #4]
   1a524:	ldr	r6, [r4]
   1a528:	cmp	r2, #0
   1a52c:	bgt	1a588 <__assert_fail@plt+0x9018>
   1a530:	add	r3, r4, #8
   1a534:	str	r2, [sp, #28]
   1a538:	rsb	r2, r2, #1
   1a53c:	cmp	r6, r3
   1a540:	beq	1a65c <__assert_fail@plt+0x90ec>
   1a544:	mov	r1, #8
   1a548:	mov	r0, r6
   1a54c:	mvn	r3, #-2147483648	; 0x80000000
   1a550:	str	r1, [sp]
   1a554:	add	r1, sp, #28
   1a558:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   1a55c:	mov	r6, r0
   1a560:	str	r0, [r4]
   1a564:	ldr	r0, [r4, #4]
   1a568:	mov	r1, #0
   1a56c:	ldr	r2, [sp, #28]
   1a570:	sub	r2, r2, r0
   1a574:	add	r0, r6, r0, lsl #3
   1a578:	lsl	r2, r2, #3
   1a57c:	bl	11414 <memset@plt>
   1a580:	ldr	r3, [sp, #28]
   1a584:	str	r3, [r4, #4]
   1a588:	ldr	sl, [r6]
   1a58c:	add	r0, sp, #40	; 0x28
   1a590:	mvn	r3, #0
   1a594:	mov	r2, r5
   1a598:	ldr	r7, [sp, #36]	; 0x24
   1a59c:	ldr	r4, [r6, #4]
   1a5a0:	mov	r1, sl
   1a5a4:	str	r0, [sp, #8]
   1a5a8:	ldr	lr, [sp, #32]
   1a5ac:	orr	r7, r7, #1
   1a5b0:	ldr	ip, [sp, #72]	; 0x48
   1a5b4:	mov	r0, r4
   1a5b8:	ldr	fp, [sp, #76]	; 0x4c
   1a5bc:	str	lr, [sp]
   1a5c0:	str	r7, [sp, #4]
   1a5c4:	str	ip, [sp, #12]
   1a5c8:	str	fp, [sp, #16]
   1a5cc:	bl	178d8 <__assert_fail@plt+0x6368>
   1a5d0:	cmp	sl, r0
   1a5d4:	bhi	1a638 <__assert_fail@plt+0x90c8>
   1a5d8:	add	sl, r0, #1
   1a5dc:	movw	r3, #696	; 0x2b8
   1a5e0:	movt	r3, #3
   1a5e4:	cmp	r4, r3
   1a5e8:	str	sl, [r6]
   1a5ec:	beq	1a5f8 <__assert_fail@plt+0x9088>
   1a5f0:	mov	r0, r4
   1a5f4:	bl	1c94c <__assert_fail@plt+0xb3dc>
   1a5f8:	mov	r0, sl
   1a5fc:	bl	1ba98 <__assert_fail@plt+0xa528>
   1a600:	ldr	r3, [sp, #32]
   1a604:	mov	r2, r5
   1a608:	add	r5, sp, #40	; 0x28
   1a60c:	mov	r1, sl
   1a610:	mov	r4, r0
   1a614:	ldr	lr, [sp, #72]	; 0x48
   1a618:	ldr	ip, [sp, #76]	; 0x4c
   1a61c:	str	r0, [r6, #4]
   1a620:	stm	sp, {r3, r7}
   1a624:	mvn	r3, #0
   1a628:	str	r5, [sp, #8]
   1a62c:	str	lr, [sp, #12]
   1a630:	str	ip, [sp, #16]
   1a634:	bl	178d8 <__assert_fail@plt+0x6368>
   1a638:	mov	r0, r4
   1a63c:	str	r9, [r8]
   1a640:	add	sp, sp, #84	; 0x54
   1a644:	ldrd	r4, [sp]
   1a648:	ldrd	r6, [sp, #8]
   1a64c:	ldrd	r8, [sp, #16]
   1a650:	ldrd	sl, [sp, #24]
   1a654:	add	sp, sp, #32
   1a658:	pop	{pc}		; (ldr pc, [sp], #4)
   1a65c:	mov	r0, #8
   1a660:	mvn	r3, #-2147483648	; 0x80000000
   1a664:	add	r1, sp, #28
   1a668:	str	r0, [sp]
   1a66c:	mov	r0, #0
   1a670:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   1a674:	ldrd	r2, [r4, #8]
   1a678:	mov	r6, r0
   1a67c:	str	r0, [r4]
   1a680:	strd	r2, [r0]
   1a684:	b	1a564 <__assert_fail@plt+0x8ff4>
   1a688:			; <UNDEFINED> instruction: 0x000303b8
   1a68c:	ldr	ip, [pc, #480]	; 1a874 <__assert_fail@plt+0x9304>
   1a690:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a694:	mov	r5, r0
   1a698:	movw	r4, #372	; 0x174
   1a69c:	movt	r4, #3
   1a6a0:	ldrd	r2, [ip]
   1a6a4:	strd	r6, [sp, #8]
   1a6a8:	mov	r6, r1
   1a6ac:	ldrd	r0, [ip, #8]
   1a6b0:	strd	r8, [sp, #16]
   1a6b4:	strd	sl, [sp, #24]
   1a6b8:	str	lr, [sp, #32]
   1a6bc:	sub	sp, sp, #84	; 0x54
   1a6c0:	ldrd	r8, [ip, #40]	; 0x28
   1a6c4:	strd	r2, [sp, #32]
   1a6c8:	strd	r0, [sp, #40]	; 0x28
   1a6cc:	ldrd	r2, [ip, #16]
   1a6d0:	ldr	r7, [sp, #44]	; 0x2c
   1a6d4:	ldrd	r0, [ip, #24]
   1a6d8:	strd	r2, [sp, #48]	; 0x30
   1a6dc:	ldrd	r2, [ip, #32]
   1a6e0:	mvn	lr, r7
   1a6e4:	and	lr, lr, #67108864	; 0x4000000
   1a6e8:	eor	lr, lr, r7
   1a6ec:	str	lr, [sp, #44]	; 0x2c
   1a6f0:	strd	r0, [sp, #56]	; 0x38
   1a6f4:	strd	r2, [sp, #64]	; 0x40
   1a6f8:	strd	r8, [sp, #72]	; 0x48
   1a6fc:	bl	113f0 <__errno_location@plt>
   1a700:	mov	r9, r0
   1a704:	ldr	sl, [r0]
   1a708:	ldr	r2, [r4, #4]
   1a70c:	ldr	r7, [r4]
   1a710:	cmp	r2, #0
   1a714:	bgt	1a770 <__assert_fail@plt+0x9200>
   1a718:	add	r3, r4, #8
   1a71c:	str	r2, [sp, #28]
   1a720:	rsb	r2, r2, #1
   1a724:	cmp	r7, r3
   1a728:	beq	1a848 <__assert_fail@plt+0x92d8>
   1a72c:	mov	r1, #8
   1a730:	mov	r0, r7
   1a734:	mvn	r3, #-2147483648	; 0x80000000
   1a738:	str	r1, [sp]
   1a73c:	add	r1, sp, #28
   1a740:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   1a744:	mov	r7, r0
   1a748:	str	r0, [r4]
   1a74c:	ldr	r0, [r4, #4]
   1a750:	mov	r1, #0
   1a754:	ldr	r2, [sp, #28]
   1a758:	sub	r2, r2, r0
   1a75c:	add	r0, r7, r0, lsl #3
   1a760:	lsl	r2, r2, #3
   1a764:	bl	11414 <memset@plt>
   1a768:	ldr	r3, [sp, #28]
   1a76c:	str	r3, [r4, #4]
   1a770:	ldr	ip, [sp, #32]
   1a774:	add	r0, sp, #40	; 0x28
   1a778:	mov	r3, r6
   1a77c:	mov	r2, r5
   1a780:	ldr	r8, [sp, #36]	; 0x24
   1a784:	ldr	fp, [r7]
   1a788:	ldr	r4, [r7, #4]
   1a78c:	str	ip, [sp]
   1a790:	orr	r8, r8, #1
   1a794:	ldr	ip, [sp, #72]	; 0x48
   1a798:	mov	r1, fp
   1a79c:	str	r8, [sp, #4]
   1a7a0:	ldr	lr, [sp, #76]	; 0x4c
   1a7a4:	str	r0, [sp, #8]
   1a7a8:	mov	r0, r4
   1a7ac:	str	ip, [sp, #12]
   1a7b0:	str	lr, [sp, #16]
   1a7b4:	bl	178d8 <__assert_fail@plt+0x6368>
   1a7b8:	cmp	fp, r0
   1a7bc:	bhi	1a824 <__assert_fail@plt+0x92b4>
   1a7c0:	add	fp, r0, #1
   1a7c4:	movw	r3, #696	; 0x2b8
   1a7c8:	movt	r3, #3
   1a7cc:	cmp	r4, r3
   1a7d0:	str	fp, [r7]
   1a7d4:	beq	1a7e0 <__assert_fail@plt+0x9270>
   1a7d8:	mov	r0, r4
   1a7dc:	bl	1c94c <__assert_fail@plt+0xb3dc>
   1a7e0:	mov	r0, fp
   1a7e4:	bl	1ba98 <__assert_fail@plt+0xa528>
   1a7e8:	ldr	lr, [sp, #32]
   1a7ec:	mov	r2, r5
   1a7f0:	mov	r3, r6
   1a7f4:	mov	r1, fp
   1a7f8:	mov	r4, r0
   1a7fc:	ldr	r5, [sp, #72]	; 0x48
   1a800:	ldr	ip, [sp, #76]	; 0x4c
   1a804:	str	r0, [r7, #4]
   1a808:	str	lr, [sp]
   1a80c:	add	lr, sp, #40	; 0x28
   1a810:	str	r8, [sp, #4]
   1a814:	str	lr, [sp, #8]
   1a818:	str	r5, [sp, #12]
   1a81c:	str	ip, [sp, #16]
   1a820:	bl	178d8 <__assert_fail@plt+0x6368>
   1a824:	mov	r0, r4
   1a828:	str	sl, [r9]
   1a82c:	add	sp, sp, #84	; 0x54
   1a830:	ldrd	r4, [sp]
   1a834:	ldrd	r6, [sp, #8]
   1a838:	ldrd	r8, [sp, #16]
   1a83c:	ldrd	sl, [sp, #24]
   1a840:	add	sp, sp, #32
   1a844:	pop	{pc}		; (ldr pc, [sp], #4)
   1a848:	mov	r0, #8
   1a84c:	mvn	r3, #-2147483648	; 0x80000000
   1a850:	add	r1, sp, #28
   1a854:	str	r0, [sp]
   1a858:	mov	r0, #0
   1a85c:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   1a860:	ldrd	r2, [r4, #8]
   1a864:	mov	r7, r0
   1a868:	str	r0, [r4]
   1a86c:	strd	r2, [r0]
   1a870:	b	1a74c <__assert_fail@plt+0x91dc>
   1a874:			; <UNDEFINED> instruction: 0x000303b8
   1a878:	strd	r4, [sp, #-12]!
   1a87c:	mov	r4, #0
   1a880:	mov	r5, #0
   1a884:	str	lr, [sp, #8]
   1a888:	sub	sp, sp, #100	; 0x64
   1a88c:	cmp	r1, #10
   1a890:	strd	r4, [sp]
   1a894:	strd	r4, [sp, #8]
   1a898:	strd	r4, [sp, #16]
   1a89c:	strd	r4, [sp, #24]
   1a8a0:	strd	r4, [sp, #32]
   1a8a4:	strd	r4, [sp, #40]	; 0x28
   1a8a8:	beq	1a8d8 <__assert_fail@plt+0x9368>
   1a8ac:	mov	ip, #67108864	; 0x4000000
   1a8b0:	mov	r3, sp
   1a8b4:	str	r1, [sp]
   1a8b8:	mov	r1, r2
   1a8bc:	mvn	r2, #0
   1a8c0:	str	ip, [sp, #12]
   1a8c4:	bl	192c4 <__assert_fail@plt+0x7d54>
   1a8c8:	add	sp, sp, #100	; 0x64
   1a8cc:	ldrd	r4, [sp]
   1a8d0:	add	sp, sp, #8
   1a8d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8d8:	bl	11540 <abort@plt>
   1a8dc:	ldr	ip, [pc, #156]	; 1a980 <__assert_fail@plt+0x9410>
   1a8e0:	cmp	r2, #0
   1a8e4:	cmpne	r1, #0
   1a8e8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a8ec:	strd	r6, [sp, #8]
   1a8f0:	mov	r6, r2
   1a8f4:	str	r8, [sp, #16]
   1a8f8:	mov	r8, r3
   1a8fc:	strd	sl, [sp, #20]
   1a900:	ldrd	r4, [ip]
   1a904:	str	lr, [sp, #28]
   1a908:	sub	sp, sp, #48	; 0x30
   1a90c:	mov	lr, #10
   1a910:	ldrd	r2, [ip, #8]
   1a914:	ldrd	sl, [ip, #16]
   1a918:	strd	r4, [sp]
   1a91c:	ldrd	r4, [ip, #32]
   1a920:	str	lr, [sp]
   1a924:	strd	r2, [sp, #8]
   1a928:	strd	sl, [sp, #16]
   1a92c:	ldrd	r2, [ip, #24]
   1a930:	ldrd	sl, [ip, #40]	; 0x28
   1a934:	strd	r2, [sp, #24]
   1a938:	strd	r4, [sp, #32]
   1a93c:	strd	sl, [sp, #40]	; 0x28
   1a940:	beq	1a97c <__assert_fail@plt+0x940c>
   1a944:	mov	r7, r1
   1a948:	mov	r3, sp
   1a94c:	mov	r1, r8
   1a950:	mvn	r2, #0
   1a954:	str	r7, [sp, #40]	; 0x28
   1a958:	str	r6, [sp, #44]	; 0x2c
   1a95c:	bl	192c4 <__assert_fail@plt+0x7d54>
   1a960:	add	sp, sp, #48	; 0x30
   1a964:	ldrd	r4, [sp]
   1a968:	ldrd	r6, [sp, #8]
   1a96c:	ldr	r8, [sp, #16]
   1a970:	ldrd	sl, [sp, #20]
   1a974:	add	sp, sp, #28
   1a978:	pop	{pc}		; (ldr pc, [sp], #4)
   1a97c:	bl	11540 <abort@plt>
   1a980:			; <UNDEFINED> instruction: 0x000303b8
   1a984:	ldr	ip, [pc, #156]	; 1aa28 <__assert_fail@plt+0x94b8>
   1a988:	cmp	r2, #0
   1a98c:	cmpne	r1, #0
   1a990:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a994:	strd	r6, [sp, #8]
   1a998:	mov	r6, r2
   1a99c:	str	r8, [sp, #16]
   1a9a0:	mov	r8, r3
   1a9a4:	strd	sl, [sp, #20]
   1a9a8:	ldrd	r4, [ip]
   1a9ac:	str	lr, [sp, #28]
   1a9b0:	sub	sp, sp, #48	; 0x30
   1a9b4:	mov	lr, #10
   1a9b8:	ldrd	r2, [ip, #8]
   1a9bc:	ldrd	sl, [ip, #16]
   1a9c0:	strd	r4, [sp]
   1a9c4:	ldrd	r4, [ip, #32]
   1a9c8:	str	lr, [sp]
   1a9cc:	strd	r2, [sp, #8]
   1a9d0:	strd	sl, [sp, #16]
   1a9d4:	ldrd	r2, [ip, #24]
   1a9d8:	ldrd	sl, [ip, #40]	; 0x28
   1a9dc:	strd	r2, [sp, #24]
   1a9e0:	strd	r4, [sp, #32]
   1a9e4:	strd	sl, [sp, #40]	; 0x28
   1a9e8:	beq	1aa24 <__assert_fail@plt+0x94b4>
   1a9ec:	ldr	r2, [sp, #80]	; 0x50
   1a9f0:	mov	r7, r1
   1a9f4:	mov	r3, sp
   1a9f8:	mov	r1, r8
   1a9fc:	str	r7, [sp, #40]	; 0x28
   1aa00:	str	r6, [sp, #44]	; 0x2c
   1aa04:	bl	192c4 <__assert_fail@plt+0x7d54>
   1aa08:	add	sp, sp, #48	; 0x30
   1aa0c:	ldrd	r4, [sp]
   1aa10:	ldrd	r6, [sp, #8]
   1aa14:	ldr	r8, [sp, #16]
   1aa18:	ldrd	sl, [sp, #20]
   1aa1c:	add	sp, sp, #28
   1aa20:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa24:	bl	11540 <abort@plt>
   1aa28:			; <UNDEFINED> instruction: 0x000303b8
   1aa2c:	ldr	ip, [pc, #512]	; 1ac34 <__assert_fail@plt+0x96c4>
   1aa30:	cmp	r0, #0
   1aa34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aa38:	ldrd	r4, [ip, #16]
   1aa3c:	strd	r6, [sp, #8]
   1aa40:	clz	r6, r1
   1aa44:	mov	r7, r1
   1aa48:	strd	r8, [sp, #16]
   1aa4c:	mov	r8, r0
   1aa50:	lsr	r6, r6, #5
   1aa54:	strd	sl, [sp, #24]
   1aa58:	mov	fp, r2
   1aa5c:	mov	sl, #10
   1aa60:	ldrd	r2, [ip]
   1aa64:	moveq	r6, #1
   1aa68:	str	lr, [sp, #32]
   1aa6c:	sub	sp, sp, #92	; 0x5c
   1aa70:	cmp	r6, #0
   1aa74:	ldrd	r0, [ip, #8]
   1aa78:	strd	r2, [sp, #40]	; 0x28
   1aa7c:	strd	r4, [sp, #56]	; 0x38
   1aa80:	ldrd	r2, [ip, #24]
   1aa84:	strd	r0, [sp, #48]	; 0x30
   1aa88:	ldrd	r0, [ip, #32]
   1aa8c:	str	sl, [sp, #40]	; 0x28
   1aa90:	ldrd	r4, [ip, #40]	; 0x28
   1aa94:	strd	r2, [sp, #64]	; 0x40
   1aa98:	strd	r0, [sp, #72]	; 0x48
   1aa9c:	strd	r4, [sp, #80]	; 0x50
   1aaa0:	bne	1ac30 <__assert_fail@plt+0x96c0>
   1aaa4:	movw	r5, #372	; 0x174
   1aaa8:	movt	r5, #3
   1aaac:	str	r8, [sp, #80]	; 0x50
   1aab0:	str	r7, [sp, #84]	; 0x54
   1aab4:	bl	113f0 <__errno_location@plt>
   1aab8:	ldr	r3, [r0]
   1aabc:	mov	r9, r0
   1aac0:	ldr	r2, [r5, #4]
   1aac4:	ldr	r4, [r5]
   1aac8:	str	r3, [sp, #28]
   1aacc:	cmp	r2, #0
   1aad0:	movgt	r1, sl
   1aad4:	bgt	1ab3c <__assert_fail@plt+0x95cc>
   1aad8:	add	r3, r5, #8
   1aadc:	str	r2, [sp, #36]	; 0x24
   1aae0:	rsb	r2, r2, #1
   1aae4:	cmp	r4, r3
   1aae8:	beq	1ac04 <__assert_fail@plt+0x9694>
   1aaec:	mov	r1, #8
   1aaf0:	mov	r0, r4
   1aaf4:	mvn	r3, #-2147483648	; 0x80000000
   1aaf8:	str	r1, [sp]
   1aafc:	add	r1, sp, #36	; 0x24
   1ab00:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   1ab04:	mov	r4, r0
   1ab08:	str	r0, [r5]
   1ab0c:	ldr	r0, [r5, #4]
   1ab10:	mov	r1, #0
   1ab14:	ldr	r2, [sp, #36]	; 0x24
   1ab18:	sub	r2, r2, r0
   1ab1c:	add	r0, r4, r0, lsl #3
   1ab20:	lsl	r2, r2, #3
   1ab24:	bl	11414 <memset@plt>
   1ab28:	ldr	r3, [sp, #36]	; 0x24
   1ab2c:	ldr	r1, [sp, #40]	; 0x28
   1ab30:	ldr	r8, [sp, #80]	; 0x50
   1ab34:	str	r3, [r5, #4]
   1ab38:	ldr	r7, [sp, #84]	; 0x54
   1ab3c:	mvn	r3, #0
   1ab40:	mov	r2, fp
   1ab44:	ldr	r6, [sp, #44]	; 0x2c
   1ab48:	ldr	sl, [r4]
   1ab4c:	ldr	r5, [r4, #4]
   1ab50:	orr	r6, r6, #1
   1ab54:	stm	sp, {r1, r6}
   1ab58:	add	r1, sp, #48	; 0x30
   1ab5c:	str	r8, [sp, #12]
   1ab60:	mov	r0, r5
   1ab64:	str	r1, [sp, #8]
   1ab68:	mov	r1, sl
   1ab6c:	str	r7, [sp, #16]
   1ab70:	bl	178d8 <__assert_fail@plt+0x6368>
   1ab74:	cmp	sl, r0
   1ab78:	bhi	1abdc <__assert_fail@plt+0x966c>
   1ab7c:	add	r7, r0, #1
   1ab80:	movw	r3, #696	; 0x2b8
   1ab84:	movt	r3, #3
   1ab88:	cmp	r5, r3
   1ab8c:	str	r7, [r4]
   1ab90:	beq	1ab9c <__assert_fail@plt+0x962c>
   1ab94:	mov	r0, r5
   1ab98:	bl	1c94c <__assert_fail@plt+0xb3dc>
   1ab9c:	mov	r0, r7
   1aba0:	bl	1ba98 <__assert_fail@plt+0xa528>
   1aba4:	ldr	r3, [sp, #40]	; 0x28
   1aba8:	mov	r2, fp
   1abac:	mov	r1, r7
   1abb0:	mov	r5, r0
   1abb4:	ldr	lr, [sp, #80]	; 0x50
   1abb8:	ldr	ip, [sp, #84]	; 0x54
   1abbc:	str	r0, [r4, #4]
   1abc0:	add	r4, sp, #48	; 0x30
   1abc4:	stm	sp, {r3, r6}
   1abc8:	mvn	r3, #0
   1abcc:	str	r4, [sp, #8]
   1abd0:	str	lr, [sp, #12]
   1abd4:	str	ip, [sp, #16]
   1abd8:	bl	178d8 <__assert_fail@plt+0x6368>
   1abdc:	ldr	r3, [sp, #28]
   1abe0:	mov	r0, r5
   1abe4:	str	r3, [r9]
   1abe8:	add	sp, sp, #92	; 0x5c
   1abec:	ldrd	r4, [sp]
   1abf0:	ldrd	r6, [sp, #8]
   1abf4:	ldrd	r8, [sp, #16]
   1abf8:	ldrd	sl, [sp, #24]
   1abfc:	add	sp, sp, #32
   1ac00:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac04:	mov	r1, #8
   1ac08:	mvn	r3, #-2147483648	; 0x80000000
   1ac0c:	mov	r0, r6
   1ac10:	str	r1, [sp]
   1ac14:	add	r1, sp, #36	; 0x24
   1ac18:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   1ac1c:	ldrd	r2, [r5, #8]
   1ac20:	mov	r4, r0
   1ac24:	str	r0, [r5]
   1ac28:	strd	r2, [r0]
   1ac2c:	b	1ab0c <__assert_fail@plt+0x959c>
   1ac30:	bl	11540 <abort@plt>
   1ac34:			; <UNDEFINED> instruction: 0x000303b8
   1ac38:	ldr	ip, [pc, #536]	; 1ae58 <__assert_fail@plt+0x98e8>
   1ac3c:	cmp	r0, #0
   1ac40:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ac44:	ldrd	r4, [ip, #16]
   1ac48:	strd	r6, [sp, #8]
   1ac4c:	mov	r6, r1
   1ac50:	mov	r7, r0
   1ac54:	strd	r8, [sp, #16]
   1ac58:	mov	r9, #10
   1ac5c:	strd	sl, [sp, #24]
   1ac60:	mov	sl, r2
   1ac64:	mov	fp, r3
   1ac68:	str	lr, [sp, #32]
   1ac6c:	clz	lr, r1
   1ac70:	sub	sp, sp, #92	; 0x5c
   1ac74:	ldrd	r2, [ip]
   1ac78:	lsr	lr, lr, #5
   1ac7c:	moveq	lr, #1
   1ac80:	ldrd	r0, [ip, #8]
   1ac84:	cmp	lr, #0
   1ac88:	strd	r4, [sp, #56]	; 0x38
   1ac8c:	ldrd	r4, [ip, #40]	; 0x28
   1ac90:	str	lr, [sp, #28]
   1ac94:	strd	r2, [sp, #40]	; 0x28
   1ac98:	ldrd	r2, [ip, #24]
   1ac9c:	strd	r0, [sp, #48]	; 0x30
   1aca0:	ldrd	r0, [ip, #32]
   1aca4:	str	r9, [sp, #40]	; 0x28
   1aca8:	strd	r2, [sp, #64]	; 0x40
   1acac:	strd	r4, [sp, #80]	; 0x50
   1acb0:	strd	r0, [sp, #72]	; 0x48
   1acb4:	bne	1ae54 <__assert_fail@plt+0x98e4>
   1acb8:	movw	r5, #372	; 0x174
   1acbc:	movt	r5, #3
   1acc0:	str	r7, [sp, #80]	; 0x50
   1acc4:	str	r6, [sp, #84]	; 0x54
   1acc8:	bl	113f0 <__errno_location@plt>
   1accc:	ldr	r3, [r0]
   1acd0:	mov	r8, r0
   1acd4:	ldr	r2, [r5, #4]
   1acd8:	ldr	r4, [r5]
   1acdc:	str	r3, [sp, #24]
   1ace0:	cmp	r2, #0
   1ace4:	movgt	r1, r9
   1ace8:	bgt	1ad50 <__assert_fail@plt+0x97e0>
   1acec:	add	r3, r5, #8
   1acf0:	str	r2, [sp, #36]	; 0x24
   1acf4:	rsb	r2, r2, #1
   1acf8:	cmp	r4, r3
   1acfc:	beq	1ae28 <__assert_fail@plt+0x98b8>
   1ad00:	mov	r1, #8
   1ad04:	mov	r0, r4
   1ad08:	mvn	r3, #-2147483648	; 0x80000000
   1ad0c:	str	r1, [sp]
   1ad10:	add	r1, sp, #36	; 0x24
   1ad14:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   1ad18:	mov	r4, r0
   1ad1c:	str	r0, [r5]
   1ad20:	ldr	r0, [r5, #4]
   1ad24:	mov	r1, #0
   1ad28:	ldr	r2, [sp, #36]	; 0x24
   1ad2c:	sub	r2, r2, r0
   1ad30:	add	r0, r4, r0, lsl #3
   1ad34:	lsl	r2, r2, #3
   1ad38:	bl	11414 <memset@plt>
   1ad3c:	ldr	r3, [sp, #36]	; 0x24
   1ad40:	ldr	r1, [sp, #40]	; 0x28
   1ad44:	ldr	r7, [sp, #80]	; 0x50
   1ad48:	str	r3, [r5, #4]
   1ad4c:	ldr	r6, [sp, #84]	; 0x54
   1ad50:	mov	r3, fp
   1ad54:	mov	r2, sl
   1ad58:	ldr	r0, [sp, #44]	; 0x2c
   1ad5c:	ldr	r9, [r4]
   1ad60:	ldr	r5, [r4, #4]
   1ad64:	orr	r0, r0, #1
   1ad68:	str	r1, [sp]
   1ad6c:	add	r1, sp, #48	; 0x30
   1ad70:	str	r0, [sp, #4]
   1ad74:	str	r1, [sp, #8]
   1ad78:	mov	r1, r9
   1ad7c:	str	r7, [sp, #12]
   1ad80:	str	r6, [sp, #16]
   1ad84:	str	r0, [sp, #28]
   1ad88:	mov	r0, r5
   1ad8c:	bl	178d8 <__assert_fail@plt+0x6368>
   1ad90:	cmp	r9, r0
   1ad94:	bhi	1ae00 <__assert_fail@plt+0x9890>
   1ad98:	add	r6, r0, #1
   1ad9c:	movw	r3, #696	; 0x2b8
   1ada0:	movt	r3, #3
   1ada4:	cmp	r5, r3
   1ada8:	str	r6, [r4]
   1adac:	beq	1adb8 <__assert_fail@plt+0x9848>
   1adb0:	mov	r0, r5
   1adb4:	bl	1c94c <__assert_fail@plt+0xb3dc>
   1adb8:	mov	r0, r6
   1adbc:	bl	1ba98 <__assert_fail@plt+0xa528>
   1adc0:	ldr	lr, [sp, #40]	; 0x28
   1adc4:	mov	r1, r6
   1adc8:	mov	r3, fp
   1adcc:	mov	r2, sl
   1add0:	mov	r5, r0
   1add4:	ldr	r6, [sp, #80]	; 0x50
   1add8:	ldr	ip, [sp, #84]	; 0x54
   1addc:	str	r0, [r4, #4]
   1ade0:	str	lr, [sp]
   1ade4:	ldr	lr, [sp, #28]
   1ade8:	str	lr, [sp, #4]
   1adec:	add	lr, sp, #48	; 0x30
   1adf0:	str	r6, [sp, #12]
   1adf4:	str	lr, [sp, #8]
   1adf8:	str	ip, [sp, #16]
   1adfc:	bl	178d8 <__assert_fail@plt+0x6368>
   1ae00:	ldr	r3, [sp, #24]
   1ae04:	mov	r0, r5
   1ae08:	str	r3, [r8]
   1ae0c:	add	sp, sp, #92	; 0x5c
   1ae10:	ldrd	r4, [sp]
   1ae14:	ldrd	r6, [sp, #8]
   1ae18:	ldrd	r8, [sp, #16]
   1ae1c:	ldrd	sl, [sp, #24]
   1ae20:	add	sp, sp, #32
   1ae24:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae28:	mov	r1, #8
   1ae2c:	mvn	r3, #-2147483648	; 0x80000000
   1ae30:	ldr	r0, [sp, #28]
   1ae34:	str	r1, [sp]
   1ae38:	add	r1, sp, #36	; 0x24
   1ae3c:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   1ae40:	ldrd	r2, [r5, #8]
   1ae44:	mov	r4, r0
   1ae48:	str	r0, [r5]
   1ae4c:	strd	r2, [r0]
   1ae50:	b	1ad20 <__assert_fail@plt+0x97b0>
   1ae54:	bl	11540 <abort@plt>
   1ae58:			; <UNDEFINED> instruction: 0x000303b8
   1ae5c:	ldr	r3, [pc]	; 1ae64 <__assert_fail@plt+0x98f4>
   1ae60:	b	192c4 <__assert_fail@plt+0x7d54>
   1ae64:	andeq	r0, r3, r4, lsl #3
   1ae68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ae6c:	movw	r4, #372	; 0x174
   1ae70:	movt	r4, #3
   1ae74:	strd	r6, [sp, #8]
   1ae78:	strd	r8, [sp, #16]
   1ae7c:	strd	sl, [sp, #24]
   1ae80:	mov	sl, r0
   1ae84:	mov	fp, r1
   1ae88:	str	lr, [sp, #32]
   1ae8c:	sub	sp, sp, #44	; 0x2c
   1ae90:	bl	113f0 <__errno_location@plt>
   1ae94:	ldr	r3, [r0]
   1ae98:	mov	r8, r0
   1ae9c:	ldr	r2, [r4, #4]
   1aea0:	ldr	r5, [r4]
   1aea4:	str	r3, [sp, #28]
   1aea8:	cmp	r2, #0
   1aeac:	bgt	1af08 <__assert_fail@plt+0x9998>
   1aeb0:	add	r3, r4, #8
   1aeb4:	str	r2, [sp, #36]	; 0x24
   1aeb8:	rsb	r2, r2, #1
   1aebc:	cmp	r5, r3
   1aec0:	beq	1afe4 <__assert_fail@plt+0x9a74>
   1aec4:	mov	r1, #8
   1aec8:	mov	r0, r5
   1aecc:	mvn	r3, #-2147483648	; 0x80000000
   1aed0:	str	r1, [sp]
   1aed4:	add	r1, sp, #36	; 0x24
   1aed8:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   1aedc:	mov	r5, r0
   1aee0:	str	r0, [r4]
   1aee4:	ldr	r0, [r4, #4]
   1aee8:	mov	r1, #0
   1aeec:	ldr	r2, [sp, #36]	; 0x24
   1aef0:	sub	r2, r2, r0
   1aef4:	add	r0, r5, r0, lsl #3
   1aef8:	lsl	r2, r2, #3
   1aefc:	bl	11414 <memset@plt>
   1af00:	ldr	r3, [sp, #36]	; 0x24
   1af04:	str	r3, [r4, #4]
   1af08:	ldr	ip, [r4, #16]
   1af0c:	mov	r3, fp
   1af10:	mov	r2, sl
   1af14:	ldr	r7, [r4, #20]
   1af18:	ldr	r0, [pc, #240]	; 1b010 <__assert_fail@plt+0x9aa0>
   1af1c:	ldr	r9, [r5]
   1af20:	orr	r7, r7, #1
   1af24:	ldr	r6, [r5, #4]
   1af28:	str	ip, [sp]
   1af2c:	ldr	ip, [r4, #56]	; 0x38
   1af30:	mov	r1, r9
   1af34:	str	r7, [sp, #4]
   1af38:	ldr	lr, [r4, #60]	; 0x3c
   1af3c:	str	r0, [sp, #8]
   1af40:	mov	r0, r6
   1af44:	str	ip, [sp, #12]
   1af48:	str	lr, [sp, #16]
   1af4c:	bl	178d8 <__assert_fail@plt+0x6368>
   1af50:	cmp	r9, r0
   1af54:	bhi	1afbc <__assert_fail@plt+0x9a4c>
   1af58:	add	r9, r0, #1
   1af5c:	movw	r3, #696	; 0x2b8
   1af60:	movt	r3, #3
   1af64:	cmp	r6, r3
   1af68:	str	r9, [r5]
   1af6c:	beq	1af78 <__assert_fail@plt+0x9a08>
   1af70:	mov	r0, r6
   1af74:	bl	1c94c <__assert_fail@plt+0xb3dc>
   1af78:	mov	r0, r9
   1af7c:	bl	1ba98 <__assert_fail@plt+0xa528>
   1af80:	ldr	ip, [r4, #16]
   1af84:	mov	r1, r9
   1af88:	mov	r3, fp
   1af8c:	mov	r2, sl
   1af90:	mov	r6, r0
   1af94:	ldr	r9, [r4, #56]	; 0x38
   1af98:	ldr	lr, [r4, #60]	; 0x3c
   1af9c:	str	r0, [r5, #4]
   1afa0:	str	ip, [sp]
   1afa4:	ldr	ip, [pc, #100]	; 1b010 <__assert_fail@plt+0x9aa0>
   1afa8:	str	r7, [sp, #4]
   1afac:	str	ip, [sp, #8]
   1afb0:	str	r9, [sp, #12]
   1afb4:	str	lr, [sp, #16]
   1afb8:	bl	178d8 <__assert_fail@plt+0x6368>
   1afbc:	ldr	r3, [sp, #28]
   1afc0:	mov	r0, r6
   1afc4:	str	r3, [r8]
   1afc8:	add	sp, sp, #44	; 0x2c
   1afcc:	ldrd	r4, [sp]
   1afd0:	ldrd	r6, [sp, #8]
   1afd4:	ldrd	r8, [sp, #16]
   1afd8:	ldrd	sl, [sp, #24]
   1afdc:	add	sp, sp, #32
   1afe0:	pop	{pc}		; (ldr pc, [sp], #4)
   1afe4:	mov	r0, #8
   1afe8:	mvn	r3, #-2147483648	; 0x80000000
   1afec:	add	r1, sp, #36	; 0x24
   1aff0:	str	r0, [sp]
   1aff4:	mov	r0, #0
   1aff8:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   1affc:	ldrd	r2, [r4, #8]
   1b000:	mov	r5, r0
   1b004:	str	r0, [r4]
   1b008:	strd	r2, [r0]
   1b00c:	b	1aee4 <__assert_fail@plt+0x9974>
   1b010:	andeq	r0, r3, ip, lsl #3
   1b014:	ldr	r3, [pc, #4]	; 1b020 <__assert_fail@plt+0x9ab0>
   1b018:	mvn	r2, #0
   1b01c:	b	192c4 <__assert_fail@plt+0x7d54>
   1b020:	andeq	r0, r3, r4, lsl #3
   1b024:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b028:	movw	r4, #372	; 0x174
   1b02c:	movt	r4, #3
   1b030:	strd	r6, [sp, #8]
   1b034:	strd	r8, [sp, #16]
   1b038:	strd	sl, [sp, #24]
   1b03c:	mov	sl, r0
   1b040:	str	lr, [sp, #32]
   1b044:	sub	sp, sp, #44	; 0x2c
   1b048:	bl	113f0 <__errno_location@plt>
   1b04c:	ldr	r3, [r0]
   1b050:	mov	r8, r0
   1b054:	ldr	r2, [r4, #4]
   1b058:	ldr	r5, [r4]
   1b05c:	str	r3, [sp, #28]
   1b060:	cmp	r2, #0
   1b064:	bgt	1b0c0 <__assert_fail@plt+0x9b50>
   1b068:	add	r3, r4, #8
   1b06c:	str	r2, [sp, #36]	; 0x24
   1b070:	rsb	r2, r2, #1
   1b074:	cmp	r5, r3
   1b078:	beq	1b188 <__assert_fail@plt+0x9c18>
   1b07c:	mov	r1, #8
   1b080:	mov	r0, r5
   1b084:	mvn	r3, #-2147483648	; 0x80000000
   1b088:	str	r1, [sp]
   1b08c:	add	r1, sp, #36	; 0x24
   1b090:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   1b094:	mov	r5, r0
   1b098:	str	r0, [r4]
   1b09c:	ldr	r0, [r4, #4]
   1b0a0:	mov	r1, #0
   1b0a4:	ldr	r2, [sp, #36]	; 0x24
   1b0a8:	sub	r2, r2, r0
   1b0ac:	add	r0, r5, r0, lsl #3
   1b0b0:	lsl	r2, r2, #3
   1b0b4:	bl	11414 <memset@plt>
   1b0b8:	ldr	r3, [sp, #36]	; 0x24
   1b0bc:	str	r3, [r4, #4]
   1b0c0:	ldr	ip, [r4, #16]
   1b0c4:	mvn	r3, #0
   1b0c8:	mov	r2, sl
   1b0cc:	ldr	r7, [r4, #20]
   1b0d0:	ldr	fp, [pc, #220]	; 1b1b4 <__assert_fail@plt+0x9c44>
   1b0d4:	ldr	r9, [r5]
   1b0d8:	orr	r7, r7, #1
   1b0dc:	ldr	r6, [r5, #4]
   1b0e0:	str	ip, [sp]
   1b0e4:	ldr	ip, [r4, #56]	; 0x38
   1b0e8:	mov	r1, r9
   1b0ec:	stmib	sp, {r7, fp}
   1b0f0:	ldr	lr, [r4, #60]	; 0x3c
   1b0f4:	mov	r0, r6
   1b0f8:	str	ip, [sp, #12]
   1b0fc:	str	lr, [sp, #16]
   1b100:	bl	178d8 <__assert_fail@plt+0x6368>
   1b104:	cmp	r9, r0
   1b108:	bhi	1b160 <__assert_fail@plt+0x9bf0>
   1b10c:	add	r9, r0, #1
   1b110:	movw	r3, #696	; 0x2b8
   1b114:	movt	r3, #3
   1b118:	cmp	r6, r3
   1b11c:	str	r9, [r5]
   1b120:	beq	1b12c <__assert_fail@plt+0x9bbc>
   1b124:	mov	r0, r6
   1b128:	bl	1c94c <__assert_fail@plt+0xb3dc>
   1b12c:	mov	r0, r9
   1b130:	bl	1ba98 <__assert_fail@plt+0xa528>
   1b134:	ldr	r3, [r4, #16]
   1b138:	mov	r2, sl
   1b13c:	mov	r1, r9
   1b140:	mov	r6, r0
   1b144:	ldr	lr, [r4, #56]	; 0x38
   1b148:	ldr	ip, [r4, #60]	; 0x3c
   1b14c:	str	r0, [r5, #4]
   1b150:	stm	sp, {r3, r7, fp, lr}
   1b154:	mvn	r3, #0
   1b158:	str	ip, [sp, #16]
   1b15c:	bl	178d8 <__assert_fail@plt+0x6368>
   1b160:	ldr	r3, [sp, #28]
   1b164:	mov	r0, r6
   1b168:	str	r3, [r8]
   1b16c:	add	sp, sp, #44	; 0x2c
   1b170:	ldrd	r4, [sp]
   1b174:	ldrd	r6, [sp, #8]
   1b178:	ldrd	r8, [sp, #16]
   1b17c:	ldrd	sl, [sp, #24]
   1b180:	add	sp, sp, #32
   1b184:	pop	{pc}		; (ldr pc, [sp], #4)
   1b188:	mov	r0, #8
   1b18c:	mvn	r3, #-2147483648	; 0x80000000
   1b190:	add	r1, sp, #36	; 0x24
   1b194:	str	r0, [sp]
   1b198:	mov	r0, #0
   1b19c:	bl	1bd3c <__assert_fail@plt+0xa7cc>
   1b1a0:	ldrd	r2, [r4, #8]
   1b1a4:	mov	r5, r0
   1b1a8:	str	r0, [r4]
   1b1ac:	strd	r2, [r0]
   1b1b0:	b	1b09c <__assert_fail@plt+0x9b2c>
   1b1b4:	andeq	r0, r3, ip, lsl #3
   1b1b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b1bc:	mov	r5, #0
   1b1c0:	movt	r5, #32752	; 0x7ff0
   1b1c4:	mov	r4, r2
   1b1c8:	strd	r6, [sp, #8]
   1b1cc:	mov	r7, r1
   1b1d0:	str	r8, [sp, #16]
   1b1d4:	mov	r8, r0
   1b1d8:	str	lr, [sp, #20]
   1b1dc:	mov	r2, r4
   1b1e0:	mov	r1, r7
   1b1e4:	mov	r0, r8
   1b1e8:	bl	111d4 <read@plt>
   1b1ec:	subs	r6, r0, #0
   1b1f0:	bge	1b224 <__assert_fail@plt+0x9cb4>
   1b1f4:	bl	113f0 <__errno_location@plt>
   1b1f8:	ldr	r2, [r0]
   1b1fc:	cmp	r2, #4
   1b200:	beq	1b1dc <__assert_fail@plt+0x9c6c>
   1b204:	sub	r3, r2, #22
   1b208:	cmp	r4, r5
   1b20c:	clz	r3, r3
   1b210:	mov	r4, r5
   1b214:	lsr	r3, r3, #5
   1b218:	movls	r3, #0
   1b21c:	cmp	r3, #0
   1b220:	bne	1b1dc <__assert_fail@plt+0x9c6c>
   1b224:	mov	r0, r6
   1b228:	ldrd	r4, [sp]
   1b22c:	ldrd	r6, [sp, #8]
   1b230:	ldr	r8, [sp, #16]
   1b234:	add	sp, sp, #20
   1b238:	pop	{pc}		; (ldr pc, [sp], #4)
   1b23c:	strd	r4, [sp, #-16]!
   1b240:	mov	r4, r1
   1b244:	mov	r1, #0
   1b248:	mov	r2, r4
   1b24c:	mov	r5, r0
   1b250:	str	r6, [sp, #8]
   1b254:	str	lr, [sp, #12]
   1b258:	bl	11444 <memchr@plt>
   1b25c:	cmp	r0, #0
   1b260:	ldr	r6, [sp, #8]
   1b264:	subne	r0, r0, r5
   1b268:	moveq	r0, r4
   1b26c:	ldrd	r4, [sp]
   1b270:	add	sp, sp, #12
   1b274:	addne	r0, r0, #1
   1b278:	pop	{pc}		; (ldr pc, [sp], #4)
   1b27c:	cmp	r0, #2
   1b280:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b284:	mov	r4, r0
   1b288:	strd	r6, [sp, #8]
   1b28c:	str	r8, [sp, #16]
   1b290:	str	lr, [sp, #20]
   1b294:	bls	1b2b0 <__assert_fail@plt+0x9d40>
   1b298:	mov	r0, r4
   1b29c:	ldrd	r4, [sp]
   1b2a0:	ldrd	r6, [sp, #8]
   1b2a4:	ldr	r8, [sp, #16]
   1b2a8:	add	sp, sp, #20
   1b2ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2b0:	bl	1d0f8 <__assert_fail@plt+0xbb88>
   1b2b4:	mov	r7, r0
   1b2b8:	bl	113f0 <__errno_location@plt>
   1b2bc:	mov	r5, r0
   1b2c0:	mov	r0, r4
   1b2c4:	ldr	r6, [r5]
   1b2c8:	mov	r4, r7
   1b2cc:	bl	11558 <close@plt>
   1b2d0:	str	r6, [r5]
   1b2d4:	b	1b298 <__assert_fail@plt+0x9d28>
   1b2d8:	strd	r4, [sp, #-16]!
   1b2dc:	mov	r4, r0
   1b2e0:	str	r6, [sp, #8]
   1b2e4:	str	lr, [sp, #12]
   1b2e8:	bl	11468 <pipe@plt>
   1b2ec:	subs	r5, r0, #0
   1b2f0:	bne	1b354 <__assert_fail@plt+0x9de4>
   1b2f4:	ldr	r0, [r4]
   1b2f8:	bl	1b27c <__assert_fail@plt+0x9d0c>
   1b2fc:	cmp	r0, #0
   1b300:	str	r0, [r4]
   1b304:	addlt	r4, r4, #4
   1b308:	blt	1b334 <__assert_fail@plt+0x9dc4>
   1b30c:	ldr	r0, [r4, #4]
   1b310:	bl	1b27c <__assert_fail@plt+0x9d0c>
   1b314:	cmp	r0, #0
   1b318:	str	r0, [r4, #4]
   1b31c:	blt	1b334 <__assert_fail@plt+0x9dc4>
   1b320:	mov	r0, r5
   1b324:	ldrd	r4, [sp]
   1b328:	ldr	r6, [sp, #8]
   1b32c:	add	sp, sp, #12
   1b330:	pop	{pc}		; (ldr pc, [sp], #4)
   1b334:	bl	113f0 <__errno_location@plt>
   1b338:	mov	r6, r0
   1b33c:	ldr	r0, [r4]
   1b340:	mvn	r5, #0
   1b344:	ldr	r4, [r6]
   1b348:	bl	11558 <close@plt>
   1b34c:	str	r4, [r6]
   1b350:	b	1b320 <__assert_fail@plt+0x9db0>
   1b354:	mvn	r5, #0
   1b358:	b	1b320 <__assert_fail@plt+0x9db0>
   1b35c:	cmp	r1, #0
   1b360:	strd	r4, [sp, #-16]!
   1b364:	mov	r4, r0
   1b368:	str	r6, [sp, #8]
   1b36c:	str	lr, [sp, #12]
   1b370:	sub	sp, sp, #32
   1b374:	ldr	r5, [sp, #48]	; 0x30
   1b378:	ldr	r6, [sp, #52]	; 0x34
   1b37c:	beq	1b4b0 <__assert_fail@plt+0x9f40>
   1b380:	mov	ip, r3
   1b384:	mov	r3, r2
   1b388:	mov	r2, r1
   1b38c:	movw	r1, #61780	; 0xf154
   1b390:	movt	r1, #1
   1b394:	str	ip, [sp]
   1b398:	bl	113e4 <fprintf@plt>
   1b39c:	mov	r2, #5
   1b3a0:	movw	r1, #61800	; 0xf168
   1b3a4:	movt	r1, #1
   1b3a8:	mov	r0, #0
   1b3ac:	bl	11258 <dcgettext@plt>
   1b3b0:	mov	r2, r0
   1b3b4:	movw	r3, #2022	; 0x7e6
   1b3b8:	movw	r1, #62504	; 0xf428
   1b3bc:	movt	r1, #1
   1b3c0:	mov	r0, r4
   1b3c4:	bl	113e4 <fprintf@plt>
   1b3c8:	mov	r1, r4
   1b3cc:	mov	r0, #10
   1b3d0:	bl	114c8 <fputc@plt>
   1b3d4:	mov	r2, #5
   1b3d8:	movw	r1, #61804	; 0xf16c
   1b3dc:	movt	r1, #1
   1b3e0:	mov	r0, #0
   1b3e4:	bl	11258 <dcgettext@plt>
   1b3e8:	mov	r1, r0
   1b3ec:	movw	r2, #61976	; 0xf218
   1b3f0:	movt	r2, #1
   1b3f4:	mov	r0, r4
   1b3f8:	bl	113e4 <fprintf@plt>
   1b3fc:	mov	r1, r4
   1b400:	mov	r0, #10
   1b404:	bl	114c8 <fputc@plt>
   1b408:	cmp	r6, #9
   1b40c:	ldrls	pc, [pc, r6, lsl #2]
   1b410:	b	1b6fc <__assert_fail@plt+0xa18c>
   1b414:	muleq	r1, ip, r4
   1b418:	andeq	fp, r1, r0, asr #9
   1b41c:	strdeq	fp, [r1], -r8
   1b420:	andeq	fp, r1, r0, lsr r5
   1b424:	andeq	fp, r1, r0, ror r5
   1b428:			; <UNDEFINED> instruction: 0x0001b5bc
   1b42c:	andeq	fp, r1, r0, lsl #12
   1b430:	andeq	fp, r1, ip, asr #12
   1b434:	andeq	fp, r1, r0, lsr #13
   1b438:	andeq	fp, r1, ip, lsr r4
   1b43c:	movw	r1, #62280	; 0xf348
   1b440:	movt	r1, #1
   1b444:	mov	r2, #5
   1b448:	mov	r0, #0
   1b44c:	bl	11258 <dcgettext@plt>
   1b450:	ldr	ip, [r5, #8]
   1b454:	mov	r1, r0
   1b458:	mov	r0, r4
   1b45c:	ldr	r3, [r5, #12]
   1b460:	ldr	r2, [r5, #32]
   1b464:	str	ip, [sp]
   1b468:	ldr	ip, [r5, #16]
   1b46c:	str	r2, [sp, #24]
   1b470:	ldr	r2, [r5, #28]
   1b474:	str	r3, [sp, #4]
   1b478:	ldr	r3, [r5, #20]
   1b47c:	str	ip, [sp, #8]
   1b480:	ldr	ip, [r5, #24]
   1b484:	str	r2, [sp, #20]
   1b488:	ldr	r2, [r5]
   1b48c:	str	r3, [sp, #12]
   1b490:	ldr	r3, [r5, #4]
   1b494:	str	ip, [sp, #16]
   1b498:	bl	113e4 <fprintf@plt>
   1b49c:	add	sp, sp, #32
   1b4a0:	ldrd	r4, [sp]
   1b4a4:	ldr	r6, [sp, #8]
   1b4a8:	add	sp, sp, #12
   1b4ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4b0:	movw	r1, #61792	; 0xf160
   1b4b4:	movt	r1, #1
   1b4b8:	bl	113e4 <fprintf@plt>
   1b4bc:	b	1b39c <__assert_fail@plt+0x9e2c>
   1b4c0:	mov	r2, #5
   1b4c4:	movw	r1, #62012	; 0xf23c
   1b4c8:	movt	r1, #1
   1b4cc:	mov	r0, #0
   1b4d0:	bl	11258 <dcgettext@plt>
   1b4d4:	ldr	r2, [r5]
   1b4d8:	mov	r1, r0
   1b4dc:	mov	r0, r4
   1b4e0:	add	sp, sp, #32
   1b4e4:	ldrd	r4, [sp]
   1b4e8:	ldr	r6, [sp, #8]
   1b4ec:	ldr	lr, [sp, #12]
   1b4f0:	add	sp, sp, #16
   1b4f4:	b	113e4 <fprintf@plt>
   1b4f8:	mov	r2, #5
   1b4fc:	movw	r1, #62028	; 0xf24c
   1b500:	movt	r1, #1
   1b504:	mov	r0, #0
   1b508:	bl	11258 <dcgettext@plt>
   1b50c:	ldrd	r2, [r5]
   1b510:	mov	r1, r0
   1b514:	mov	r0, r4
   1b518:	add	sp, sp, #32
   1b51c:	ldrd	r4, [sp]
   1b520:	ldr	r6, [sp, #8]
   1b524:	ldr	lr, [sp, #12]
   1b528:	add	sp, sp, #16
   1b52c:	b	113e4 <fprintf@plt>
   1b530:	mov	r2, #5
   1b534:	movw	r1, #62052	; 0xf264
   1b538:	movt	r1, #1
   1b53c:	mov	r0, #0
   1b540:	bl	11258 <dcgettext@plt>
   1b544:	ldrd	r2, [r5]
   1b548:	mov	r1, r0
   1b54c:	mov	r0, r4
   1b550:	ldr	ip, [r5, #8]
   1b554:	str	ip, [sp, #48]	; 0x30
   1b558:	add	sp, sp, #32
   1b55c:	ldrd	r4, [sp]
   1b560:	ldr	r6, [sp, #8]
   1b564:	ldr	lr, [sp, #12]
   1b568:	add	sp, sp, #16
   1b56c:	b	113e4 <fprintf@plt>
   1b570:	mov	r2, #5
   1b574:	movw	r1, #62080	; 0xf280
   1b578:	movt	r1, #1
   1b57c:	mov	r0, #0
   1b580:	bl	11258 <dcgettext@plt>
   1b584:	ldr	r2, [r5]
   1b588:	mov	r1, r0
   1b58c:	mov	r0, r4
   1b590:	ldr	r3, [r5, #8]
   1b594:	ldr	ip, [r5, #12]
   1b598:	str	r3, [sp, #48]	; 0x30
   1b59c:	ldr	r3, [r5, #4]
   1b5a0:	str	ip, [sp, #52]	; 0x34
   1b5a4:	add	sp, sp, #32
   1b5a8:	ldrd	r4, [sp]
   1b5ac:	ldr	r6, [sp, #8]
   1b5b0:	ldr	lr, [sp, #12]
   1b5b4:	add	sp, sp, #16
   1b5b8:	b	113e4 <fprintf@plt>
   1b5bc:	mov	r2, #5
   1b5c0:	movw	r1, #62112	; 0xf2a0
   1b5c4:	movt	r1, #1
   1b5c8:	mov	r0, #0
   1b5cc:	bl	11258 <dcgettext@plt>
   1b5d0:	ldr	r2, [r5, #8]
   1b5d4:	mov	r1, r0
   1b5d8:	mov	r0, r4
   1b5dc:	ldr	ip, [r5, #12]
   1b5e0:	ldr	r3, [r5, #16]
   1b5e4:	str	r2, [sp]
   1b5e8:	ldr	r2, [r5]
   1b5ec:	str	r3, [sp, #8]
   1b5f0:	ldr	r3, [r5, #4]
   1b5f4:	str	ip, [sp, #4]
   1b5f8:	bl	113e4 <fprintf@plt>
   1b5fc:	b	1b49c <__assert_fail@plt+0x9f2c>
   1b600:	mov	r2, #5
   1b604:	movw	r1, #62148	; 0xf2c4
   1b608:	movt	r1, #1
   1b60c:	mov	r0, #0
   1b610:	bl	11258 <dcgettext@plt>
   1b614:	ldr	ip, [r5, #8]
   1b618:	mov	r1, r0
   1b61c:	mov	r0, r4
   1b620:	ldr	r3, [r5, #12]
   1b624:	ldr	r2, [r5, #20]
   1b628:	str	ip, [sp]
   1b62c:	ldr	ip, [r5, #16]
   1b630:	str	r2, [sp, #12]
   1b634:	ldr	r2, [r5]
   1b638:	str	r3, [sp, #4]
   1b63c:	ldr	r3, [r5, #4]
   1b640:	str	ip, [sp, #8]
   1b644:	bl	113e4 <fprintf@plt>
   1b648:	b	1b49c <__assert_fail@plt+0x9f2c>
   1b64c:	mov	r2, #5
   1b650:	movw	r1, #62188	; 0xf2ec
   1b654:	movt	r1, #1
   1b658:	mov	r0, #0
   1b65c:	bl	11258 <dcgettext@plt>
   1b660:	ldr	r3, [r5, #8]
   1b664:	mov	r1, r0
   1b668:	mov	r0, r4
   1b66c:	ldr	r2, [r5, #12]
   1b670:	ldr	ip, [r5, #24]
   1b674:	str	r3, [sp]
   1b678:	ldr	r3, [r5, #16]
   1b67c:	str	ip, [sp, #16]
   1b680:	ldr	ip, [r5, #20]
   1b684:	str	r2, [sp, #4]
   1b688:	ldr	r2, [r5]
   1b68c:	str	r3, [sp, #8]
   1b690:	ldr	r3, [r5, #4]
   1b694:	str	ip, [sp, #12]
   1b698:	bl	113e4 <fprintf@plt>
   1b69c:	b	1b49c <__assert_fail@plt+0x9f2c>
   1b6a0:	mov	r2, #5
   1b6a4:	movw	r1, #62232	; 0xf318
   1b6a8:	movt	r1, #1
   1b6ac:	mov	r0, #0
   1b6b0:	bl	11258 <dcgettext@plt>
   1b6b4:	ldr	r2, [r5, #8]
   1b6b8:	mov	r1, r0
   1b6bc:	mov	r0, r4
   1b6c0:	ldr	ip, [r5, #12]
   1b6c4:	ldr	r3, [r5, #28]
   1b6c8:	str	r2, [sp]
   1b6cc:	ldr	r2, [r5, #16]
   1b6d0:	str	r3, [sp, #20]
   1b6d4:	ldr	r3, [r5, #24]
   1b6d8:	str	ip, [sp, #4]
   1b6dc:	ldr	ip, [r5, #20]
   1b6e0:	str	r2, [sp, #8]
   1b6e4:	ldr	r2, [r5]
   1b6e8:	str	r3, [sp, #16]
   1b6ec:	ldr	r3, [r5, #4]
   1b6f0:	str	ip, [sp, #12]
   1b6f4:	bl	113e4 <fprintf@plt>
   1b6f8:	b	1b49c <__assert_fail@plt+0x9f2c>
   1b6fc:	movw	r1, #62332	; 0xf37c
   1b700:	movt	r1, #1
   1b704:	b	1b444 <__assert_fail@plt+0x9ed4>
   1b708:	strd	r4, [sp, #-12]!
   1b70c:	str	lr, [sp, #8]
   1b710:	sub	sp, sp, #12
   1b714:	ldr	r5, [sp, #24]
   1b718:	ldr	ip, [r5]
   1b71c:	cmp	ip, #0
   1b720:	beq	1b73c <__assert_fail@plt+0xa1cc>
   1b724:	mov	lr, r5
   1b728:	mov	ip, #0
   1b72c:	ldr	r4, [lr, #4]!
   1b730:	add	ip, ip, #1
   1b734:	cmp	r4, #0
   1b738:	bne	1b72c <__assert_fail@plt+0xa1bc>
   1b73c:	stm	sp, {r5, ip}
   1b740:	bl	1b35c <__assert_fail@plt+0x9dec>
   1b744:	add	sp, sp, #12
   1b748:	ldrd	r4, [sp]
   1b74c:	add	sp, sp, #8
   1b750:	pop	{pc}		; (ldr pc, [sp], #4)
   1b754:	push	{lr}		; (str lr, [sp, #-4]!)
   1b758:	sub	sp, sp, #52	; 0x34
   1b75c:	ldr	ip, [sp, #56]	; 0x38
   1b760:	ldr	lr, [ip]
   1b764:	cmp	lr, #0
   1b768:	str	lr, [sp, #8]
   1b76c:	beq	1b804 <__assert_fail@plt+0xa294>
   1b770:	ldr	lr, [ip, #4]
   1b774:	cmp	lr, #0
   1b778:	str	lr, [sp, #12]
   1b77c:	beq	1b818 <__assert_fail@plt+0xa2a8>
   1b780:	ldr	lr, [ip, #8]
   1b784:	cmp	lr, #0
   1b788:	str	lr, [sp, #16]
   1b78c:	beq	1b820 <__assert_fail@plt+0xa2b0>
   1b790:	ldr	lr, [ip, #12]
   1b794:	cmp	lr, #0
   1b798:	str	lr, [sp, #20]
   1b79c:	beq	1b828 <__assert_fail@plt+0xa2b8>
   1b7a0:	ldr	lr, [ip, #16]
   1b7a4:	cmp	lr, #0
   1b7a8:	str	lr, [sp, #24]
   1b7ac:	beq	1b830 <__assert_fail@plt+0xa2c0>
   1b7b0:	ldr	lr, [ip, #20]
   1b7b4:	cmp	lr, #0
   1b7b8:	str	lr, [sp, #28]
   1b7bc:	beq	1b838 <__assert_fail@plt+0xa2c8>
   1b7c0:	ldr	lr, [ip, #24]
   1b7c4:	cmp	lr, #0
   1b7c8:	str	lr, [sp, #32]
   1b7cc:	beq	1b840 <__assert_fail@plt+0xa2d0>
   1b7d0:	ldr	lr, [ip, #28]
   1b7d4:	cmp	lr, #0
   1b7d8:	str	lr, [sp, #36]	; 0x24
   1b7dc:	beq	1b848 <__assert_fail@plt+0xa2d8>
   1b7e0:	ldr	lr, [ip, #32]
   1b7e4:	cmp	lr, #0
   1b7e8:	str	lr, [sp, #40]	; 0x28
   1b7ec:	beq	1b850 <__assert_fail@plt+0xa2e0>
   1b7f0:	ldr	ip, [ip, #36]	; 0x24
   1b7f4:	cmp	ip, #0
   1b7f8:	str	ip, [sp, #44]	; 0x2c
   1b7fc:	movne	lr, #10
   1b800:	moveq	lr, #9
   1b804:	add	ip, sp, #8
   1b808:	stm	sp, {ip, lr}
   1b80c:	bl	1b35c <__assert_fail@plt+0x9dec>
   1b810:	add	sp, sp, #52	; 0x34
   1b814:	pop	{pc}		; (ldr pc, [sp], #4)
   1b818:	mov	lr, #1
   1b81c:	b	1b804 <__assert_fail@plt+0xa294>
   1b820:	mov	lr, #2
   1b824:	b	1b804 <__assert_fail@plt+0xa294>
   1b828:	mov	lr, #3
   1b82c:	b	1b804 <__assert_fail@plt+0xa294>
   1b830:	mov	lr, #4
   1b834:	b	1b804 <__assert_fail@plt+0xa294>
   1b838:	mov	lr, #5
   1b83c:	b	1b804 <__assert_fail@plt+0xa294>
   1b840:	mov	lr, #6
   1b844:	b	1b804 <__assert_fail@plt+0xa294>
   1b848:	mov	lr, #7
   1b84c:	b	1b804 <__assert_fail@plt+0xa294>
   1b850:	mov	lr, #8
   1b854:	b	1b804 <__assert_fail@plt+0xa294>
   1b858:	push	{r3}		; (str r3, [sp, #-4]!)
   1b85c:	push	{lr}		; (str lr, [sp, #-4]!)
   1b860:	sub	sp, sp, #56	; 0x38
   1b864:	ldr	ip, [sp, #64]	; 0x40
   1b868:	add	r3, sp, #64	; 0x40
   1b86c:	str	r3, [sp, #12]
   1b870:	cmp	ip, #0
   1b874:	str	ip, [sp, #16]
   1b878:	beq	1b910 <__assert_fail@plt+0xa3a0>
   1b87c:	ldr	ip, [sp, #68]	; 0x44
   1b880:	cmp	ip, #0
   1b884:	str	ip, [sp, #20]
   1b888:	beq	1b934 <__assert_fail@plt+0xa3c4>
   1b88c:	ldr	ip, [sp, #72]	; 0x48
   1b890:	cmp	ip, #0
   1b894:	str	ip, [sp, #24]
   1b898:	beq	1b93c <__assert_fail@plt+0xa3cc>
   1b89c:	ldr	ip, [sp, #76]	; 0x4c
   1b8a0:	cmp	ip, #0
   1b8a4:	str	ip, [sp, #28]
   1b8a8:	beq	1b944 <__assert_fail@plt+0xa3d4>
   1b8ac:	ldr	ip, [sp, #80]	; 0x50
   1b8b0:	cmp	ip, #0
   1b8b4:	str	ip, [sp, #32]
   1b8b8:	beq	1b94c <__assert_fail@plt+0xa3dc>
   1b8bc:	ldr	ip, [sp, #84]	; 0x54
   1b8c0:	cmp	ip, #0
   1b8c4:	str	ip, [sp, #36]	; 0x24
   1b8c8:	beq	1b954 <__assert_fail@plt+0xa3e4>
   1b8cc:	ldr	ip, [sp, #88]	; 0x58
   1b8d0:	cmp	ip, #0
   1b8d4:	str	ip, [sp, #40]	; 0x28
   1b8d8:	beq	1b95c <__assert_fail@plt+0xa3ec>
   1b8dc:	ldr	ip, [sp, #92]	; 0x5c
   1b8e0:	cmp	ip, #0
   1b8e4:	str	ip, [sp, #44]	; 0x2c
   1b8e8:	beq	1b964 <__assert_fail@plt+0xa3f4>
   1b8ec:	ldr	ip, [sp, #96]	; 0x60
   1b8f0:	cmp	ip, #0
   1b8f4:	str	ip, [sp, #48]	; 0x30
   1b8f8:	beq	1b96c <__assert_fail@plt+0xa3fc>
   1b8fc:	ldr	r3, [sp, #100]	; 0x64
   1b900:	cmp	r3, #0
   1b904:	str	r3, [sp, #52]	; 0x34
   1b908:	movne	ip, #10
   1b90c:	moveq	ip, #9
   1b910:	ldr	r3, [sp, #60]	; 0x3c
   1b914:	add	lr, sp, #16
   1b918:	str	lr, [sp]
   1b91c:	str	ip, [sp, #4]
   1b920:	bl	1b35c <__assert_fail@plt+0x9dec>
   1b924:	add	sp, sp, #56	; 0x38
   1b928:	pop	{lr}		; (ldr lr, [sp], #4)
   1b92c:	add	sp, sp, #4
   1b930:	bx	lr
   1b934:	mov	ip, #1
   1b938:	b	1b910 <__assert_fail@plt+0xa3a0>
   1b93c:	mov	ip, #2
   1b940:	b	1b910 <__assert_fail@plt+0xa3a0>
   1b944:	mov	ip, #3
   1b948:	b	1b910 <__assert_fail@plt+0xa3a0>
   1b94c:	mov	ip, #4
   1b950:	b	1b910 <__assert_fail@plt+0xa3a0>
   1b954:	mov	ip, #5
   1b958:	b	1b910 <__assert_fail@plt+0xa3a0>
   1b95c:	mov	ip, #6
   1b960:	b	1b910 <__assert_fail@plt+0xa3a0>
   1b964:	mov	ip, #7
   1b968:	b	1b910 <__assert_fail@plt+0xa3a0>
   1b96c:	mov	ip, #8
   1b970:	b	1b910 <__assert_fail@plt+0xa3a0>
   1b974:	movw	r3, #476	; 0x1dc
   1b978:	movt	r3, #3
   1b97c:	str	r4, [sp, #-8]!
   1b980:	mov	r0, #10
   1b984:	ldr	r1, [r3]
   1b988:	str	lr, [sp, #4]
   1b98c:	bl	114c8 <fputc@plt>
   1b990:	mov	r2, #5
   1b994:	movw	r1, #62392	; 0xf3b8
   1b998:	movt	r1, #1
   1b99c:	mov	r0, #0
   1b9a0:	bl	11258 <dcgettext@plt>
   1b9a4:	movw	r1, #61232	; 0xef30
   1b9a8:	movt	r1, #1
   1b9ac:	bl	111c8 <printf@plt>
   1b9b0:	mov	r2, #5
   1b9b4:	movw	r1, #62412	; 0xf3cc
   1b9b8:	movt	r1, #1
   1b9bc:	mov	r0, #0
   1b9c0:	bl	11258 <dcgettext@plt>
   1b9c4:	movw	r2, #61192	; 0xef08
   1b9c8:	movt	r2, #1
   1b9cc:	movw	r1, #60900	; 0xede4
   1b9d0:	movt	r1, #1
   1b9d4:	bl	111c8 <printf@plt>
   1b9d8:	movw	r1, #62432	; 0xf3e0
   1b9dc:	movt	r1, #1
   1b9e0:	mov	r2, #5
   1b9e4:	mov	r0, #0
   1b9e8:	bl	11258 <dcgettext@plt>
   1b9ec:	movw	r1, #62472	; 0xf408
   1b9f0:	movt	r1, #1
   1b9f4:	ldr	r4, [sp]
   1b9f8:	ldr	lr, [sp, #4]
   1b9fc:	add	sp, sp, #8
   1ba00:	b	111c8 <printf@plt>
   1ba04:	strd	r4, [sp, #-16]!
   1ba08:	mov	r4, r0
   1ba0c:	mov	r5, r2
   1ba10:	str	r6, [sp, #8]
   1ba14:	mov	r6, r1
   1ba18:	str	lr, [sp, #12]
   1ba1c:	bl	1cb80 <__assert_fail@plt+0xb610>
   1ba20:	cmp	r0, #0
   1ba24:	beq	1ba38 <__assert_fail@plt+0xa4c8>
   1ba28:	ldrd	r4, [sp]
   1ba2c:	ldr	r6, [sp, #8]
   1ba30:	add	sp, sp, #12
   1ba34:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba38:	cmp	r4, #0
   1ba3c:	beq	1ba4c <__assert_fail@plt+0xa4dc>
   1ba40:	cmp	r6, #0
   1ba44:	cmpne	r5, #0
   1ba48:	beq	1ba28 <__assert_fail@plt+0xa4b8>
   1ba4c:	bl	1c008 <__assert_fail@plt+0xaa98>
   1ba50:	str	r4, [sp, #-8]!
   1ba54:	str	lr, [sp, #4]
   1ba58:	bl	1ca7c <__assert_fail@plt+0xb50c>
   1ba5c:	cmp	r0, #0
   1ba60:	beq	1ba70 <__assert_fail@plt+0xa500>
   1ba64:	ldr	r4, [sp]
   1ba68:	add	sp, sp, #4
   1ba6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba70:	bl	1c008 <__assert_fail@plt+0xaa98>
   1ba74:	str	r4, [sp, #-8]!
   1ba78:	str	lr, [sp, #4]
   1ba7c:	bl	1ca7c <__assert_fail@plt+0xb50c>
   1ba80:	cmp	r0, #0
   1ba84:	beq	1ba94 <__assert_fail@plt+0xa524>
   1ba88:	ldr	r4, [sp]
   1ba8c:	add	sp, sp, #4
   1ba90:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba94:	bl	1c008 <__assert_fail@plt+0xaa98>
   1ba98:	str	r4, [sp, #-8]!
   1ba9c:	str	lr, [sp, #4]
   1baa0:	bl	1ca7c <__assert_fail@plt+0xb50c>
   1baa4:	cmp	r0, #0
   1baa8:	beq	1bab8 <__assert_fail@plt+0xa548>
   1baac:	ldr	r4, [sp]
   1bab0:	add	sp, sp, #4
   1bab4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bab8:	bl	1c008 <__assert_fail@plt+0xaa98>
   1babc:	strd	r4, [sp, #-16]!
   1bac0:	mov	r5, r0
   1bac4:	mov	r4, r1
   1bac8:	str	r6, [sp, #8]
   1bacc:	str	lr, [sp, #12]
   1bad0:	bl	1cb28 <__assert_fail@plt+0xb5b8>
   1bad4:	cmp	r0, #0
   1bad8:	beq	1baec <__assert_fail@plt+0xa57c>
   1badc:	ldrd	r4, [sp]
   1bae0:	ldr	r6, [sp, #8]
   1bae4:	add	sp, sp, #12
   1bae8:	pop	{pc}		; (ldr pc, [sp], #4)
   1baec:	adds	r4, r4, #0
   1baf0:	movne	r4, #1
   1baf4:	cmp	r5, #0
   1baf8:	moveq	r4, #1
   1bafc:	cmp	r4, #0
   1bb00:	beq	1badc <__assert_fail@plt+0xa56c>
   1bb04:	bl	1c008 <__assert_fail@plt+0xaa98>
   1bb08:	cmp	r1, #0
   1bb0c:	orreq	r1, r1, #1
   1bb10:	str	r4, [sp, #-8]!
   1bb14:	str	lr, [sp, #4]
   1bb18:	bl	1cb28 <__assert_fail@plt+0xb5b8>
   1bb1c:	cmp	r0, #0
   1bb20:	beq	1bb30 <__assert_fail@plt+0xa5c0>
   1bb24:	ldr	r4, [sp]
   1bb28:	add	sp, sp, #4
   1bb2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb30:	bl	1c008 <__assert_fail@plt+0xaa98>
   1bb34:	strd	r4, [sp, #-16]!
   1bb38:	mov	r4, r0
   1bb3c:	mov	r5, r2
   1bb40:	str	r6, [sp, #8]
   1bb44:	mov	r6, r1
   1bb48:	str	lr, [sp, #12]
   1bb4c:	bl	1cb80 <__assert_fail@plt+0xb610>
   1bb50:	cmp	r0, #0
   1bb54:	beq	1bb68 <__assert_fail@plt+0xa5f8>
   1bb58:	ldrd	r4, [sp]
   1bb5c:	ldr	r6, [sp, #8]
   1bb60:	add	sp, sp, #12
   1bb64:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb68:	cmp	r4, #0
   1bb6c:	beq	1bb7c <__assert_fail@plt+0xa60c>
   1bb70:	cmp	r6, #0
   1bb74:	cmpne	r5, #0
   1bb78:	beq	1bb58 <__assert_fail@plt+0xa5e8>
   1bb7c:	bl	1c008 <__assert_fail@plt+0xaa98>
   1bb80:	cmp	r2, #0
   1bb84:	cmpne	r1, #0
   1bb88:	str	r4, [sp, #-8]!
   1bb8c:	moveq	r2, #1
   1bb90:	str	lr, [sp, #4]
   1bb94:	moveq	r1, r2
   1bb98:	bl	1cb80 <__assert_fail@plt+0xb610>
   1bb9c:	cmp	r0, #0
   1bba0:	beq	1bbb0 <__assert_fail@plt+0xa640>
   1bba4:	ldr	r4, [sp]
   1bba8:	add	sp, sp, #4
   1bbac:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbb0:	bl	1c008 <__assert_fail@plt+0xaa98>
   1bbb4:	mov	r2, r1
   1bbb8:	mov	r1, r0
   1bbbc:	str	r4, [sp, #-8]!
   1bbc0:	mov	r0, #0
   1bbc4:	str	lr, [sp, #4]
   1bbc8:	bl	1cb80 <__assert_fail@plt+0xb610>
   1bbcc:	cmp	r0, #0
   1bbd0:	beq	1bbe0 <__assert_fail@plt+0xa670>
   1bbd4:	ldr	r4, [sp]
   1bbd8:	add	sp, sp, #4
   1bbdc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbe0:	bl	1c008 <__assert_fail@plt+0xaa98>
   1bbe4:	cmp	r1, #0
   1bbe8:	cmpne	r0, #0
   1bbec:	str	r4, [sp, #-8]!
   1bbf0:	moveq	r2, #1
   1bbf4:	movne	r2, r1
   1bbf8:	str	lr, [sp, #4]
   1bbfc:	movne	r1, r0
   1bc00:	moveq	r1, r2
   1bc04:	mov	r0, #0
   1bc08:	bl	1cb80 <__assert_fail@plt+0xb610>
   1bc0c:	cmp	r0, #0
   1bc10:	beq	1bc20 <__assert_fail@plt+0xa6b0>
   1bc14:	ldr	r4, [sp]
   1bc18:	add	sp, sp, #4
   1bc1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc20:	bl	1c008 <__assert_fail@plt+0xaa98>
   1bc24:	cmp	r0, #0
   1bc28:	strd	r4, [sp, #-16]!
   1bc2c:	mov	r5, r1
   1bc30:	ldr	r4, [r1]
   1bc34:	str	r6, [sp, #8]
   1bc38:	str	lr, [sp, #12]
   1bc3c:	beq	1bc84 <__assert_fail@plt+0xa714>
   1bc40:	lsr	r3, r4, #1
   1bc44:	add	r3, r3, #1
   1bc48:	adds	r4, r4, r3
   1bc4c:	bcs	1bc80 <__assert_fail@plt+0xa710>
   1bc50:	mov	r2, #1
   1bc54:	mov	r1, r4
   1bc58:	bl	1cb80 <__assert_fail@plt+0xb610>
   1bc5c:	cmp	r0, #0
   1bc60:	beq	1bc78 <__assert_fail@plt+0xa708>
   1bc64:	ldr	r6, [sp, #8]
   1bc68:	str	r4, [r5]
   1bc6c:	ldrd	r4, [sp]
   1bc70:	add	sp, sp, #12
   1bc74:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc78:	cmp	r4, #0
   1bc7c:	beq	1bc64 <__assert_fail@plt+0xa6f4>
   1bc80:	bl	1c008 <__assert_fail@plt+0xaa98>
   1bc84:	cmp	r4, #0
   1bc88:	mov	r2, #1
   1bc8c:	moveq	r4, #64	; 0x40
   1bc90:	mov	r1, r4
   1bc94:	bl	1cb80 <__assert_fail@plt+0xb610>
   1bc98:	cmp	r0, #0
   1bc9c:	bne	1bc64 <__assert_fail@plt+0xa6f4>
   1bca0:	b	1bc80 <__assert_fail@plt+0xa710>
   1bca4:	cmp	r0, #0
   1bca8:	strd	r4, [sp, #-16]!
   1bcac:	mov	r5, r1
   1bcb0:	ldr	r4, [r1]
   1bcb4:	str	r6, [sp, #8]
   1bcb8:	mov	r6, r2
   1bcbc:	str	lr, [sp, #12]
   1bcc0:	beq	1bd08 <__assert_fail@plt+0xa798>
   1bcc4:	lsr	r3, r4, #1
   1bcc8:	add	r3, r3, #1
   1bccc:	adds	r4, r4, r3
   1bcd0:	bcs	1bd04 <__assert_fail@plt+0xa794>
   1bcd4:	mov	r1, r4
   1bcd8:	bl	1cb80 <__assert_fail@plt+0xb610>
   1bcdc:	cmp	r0, #0
   1bce0:	beq	1bcf8 <__assert_fail@plt+0xa788>
   1bce4:	ldr	r6, [sp, #8]
   1bce8:	str	r4, [r5]
   1bcec:	ldrd	r4, [sp]
   1bcf0:	add	sp, sp, #12
   1bcf4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bcf8:	cmp	r4, #0
   1bcfc:	cmpne	r6, #0
   1bd00:	beq	1bce4 <__assert_fail@plt+0xa774>
   1bd04:	bl	1c008 <__assert_fail@plt+0xaa98>
   1bd08:	cmp	r4, #0
   1bd0c:	bne	1bd20 <__assert_fail@plt+0xa7b0>
   1bd10:	mov	r4, #64	; 0x40
   1bd14:	udiv	r4, r4, r2
   1bd18:	cmp	r2, #64	; 0x40
   1bd1c:	addhi	r4, r4, #1
   1bd20:	mov	r2, r6
   1bd24:	mov	r1, r4
   1bd28:	mov	r0, #0
   1bd2c:	bl	1cb80 <__assert_fail@plt+0xb610>
   1bd30:	cmp	r0, #0
   1bd34:	bne	1bce4 <__assert_fail@plt+0xa774>
   1bd38:	b	1bd04 <__assert_fail@plt+0xa794>
   1bd3c:	ldr	ip, [r1]
   1bd40:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1bd44:	strd	r6, [sp, #8]
   1bd48:	mov	r7, r1
   1bd4c:	mov	r6, r0
   1bd50:	str	r8, [sp, #16]
   1bd54:	mvn	r8, r3
   1bd58:	lsr	r8, r8, #31
   1bd5c:	str	lr, [sp, #20]
   1bd60:	asr	r1, ip, #1
   1bd64:	ldr	lr, [sp, #24]
   1bd68:	adds	r4, ip, r1
   1bd6c:	mvnvs	r4, #-2147483648	; 0x80000000
   1bd70:	cmp	r3, r4
   1bd74:	movge	r1, #0
   1bd78:	andlt	r1, r8, #1
   1bd7c:	cmp	r1, #0
   1bd80:	movne	r4, r3
   1bd84:	smull	r0, r1, r4, lr
   1bd88:	cmp	r1, r0, asr #31
   1bd8c:	bne	1be3c <__assert_fail@plt+0xa8cc>
   1bd90:	cmp	r0, #63	; 0x3f
   1bd94:	mov	r5, r0
   1bd98:	ble	1be08 <__assert_fail@plt+0xa898>
   1bd9c:	cmp	r6, #0
   1bda0:	sub	r1, r4, ip
   1bda4:	streq	r6, [r7]
   1bda8:	cmp	r1, r2
   1bdac:	bge	1bddc <__assert_fail@plt+0xa86c>
   1bdb0:	adds	r4, ip, r2
   1bdb4:	bvs	1be38 <__assert_fail@plt+0xa8c8>
   1bdb8:	cmp	r4, r3
   1bdbc:	movle	r3, #0
   1bdc0:	andgt	r3, r8, #1
   1bdc4:	cmp	r3, #0
   1bdc8:	bne	1be38 <__assert_fail@plt+0xa8c8>
   1bdcc:	smull	r0, r1, r4, lr
   1bdd0:	cmp	r1, r0, asr #31
   1bdd4:	mov	r5, r0
   1bdd8:	bne	1be38 <__assert_fail@plt+0xa8c8>
   1bddc:	mov	r1, r5
   1bde0:	mov	r0, r6
   1bde4:	bl	1cb28 <__assert_fail@plt+0xb5b8>
   1bde8:	cmp	r0, #0
   1bdec:	beq	1be1c <__assert_fail@plt+0xa8ac>
   1bdf0:	ldr	r8, [sp, #16]
   1bdf4:	str	r4, [r7]
   1bdf8:	ldrd	r4, [sp]
   1bdfc:	ldrd	r6, [sp, #8]
   1be00:	add	sp, sp, #20
   1be04:	pop	{pc}		; (ldr pc, [sp], #4)
   1be08:	mov	r0, #64	; 0x40
   1be0c:	sdiv	r4, r0, lr
   1be10:	mls	r5, lr, r4, r0
   1be14:	sub	r5, r0, r5
   1be18:	b	1bd9c <__assert_fail@plt+0xa82c>
   1be1c:	adds	r5, r5, #0
   1be20:	movne	r5, #1
   1be24:	cmp	r6, #0
   1be28:	movne	r6, r5
   1be2c:	moveq	r6, #1
   1be30:	cmp	r6, #0
   1be34:	beq	1bdf0 <__assert_fail@plt+0xa880>
   1be38:	bl	1c008 <__assert_fail@plt+0xaa98>
   1be3c:	mvn	r0, #-2147483648	; 0x80000000
   1be40:	b	1be0c <__assert_fail@plt+0xa89c>
   1be44:	mov	r1, #1
   1be48:	str	r4, [sp, #-8]!
   1be4c:	str	lr, [sp, #4]
   1be50:	bl	1c650 <__assert_fail@plt+0xb0e0>
   1be54:	cmp	r0, #0
   1be58:	beq	1be68 <__assert_fail@plt+0xa8f8>
   1be5c:	ldr	r4, [sp]
   1be60:	add	sp, sp, #4
   1be64:	pop	{pc}		; (ldr pc, [sp], #4)
   1be68:	bl	1c008 <__assert_fail@plt+0xaa98>
   1be6c:	mov	r1, #1
   1be70:	str	r4, [sp, #-8]!
   1be74:	str	lr, [sp, #4]
   1be78:	bl	1c650 <__assert_fail@plt+0xb0e0>
   1be7c:	cmp	r0, #0
   1be80:	beq	1be90 <__assert_fail@plt+0xa920>
   1be84:	ldr	r4, [sp]
   1be88:	add	sp, sp, #4
   1be8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1be90:	bl	1c008 <__assert_fail@plt+0xaa98>
   1be94:	str	r4, [sp, #-8]!
   1be98:	str	lr, [sp, #4]
   1be9c:	bl	1c650 <__assert_fail@plt+0xb0e0>
   1bea0:	cmp	r0, #0
   1bea4:	beq	1beb4 <__assert_fail@plt+0xa944>
   1bea8:	ldr	r4, [sp]
   1beac:	add	sp, sp, #4
   1beb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1beb4:	bl	1c008 <__assert_fail@plt+0xaa98>
   1beb8:	str	r4, [sp, #-8]!
   1bebc:	str	lr, [sp, #4]
   1bec0:	bl	1c650 <__assert_fail@plt+0xb0e0>
   1bec4:	cmp	r0, #0
   1bec8:	beq	1bed8 <__assert_fail@plt+0xa968>
   1becc:	ldr	r4, [sp]
   1bed0:	add	sp, sp, #4
   1bed4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bed8:	bl	1c008 <__assert_fail@plt+0xaa98>
   1bedc:	strd	r4, [sp, #-16]!
   1bee0:	mov	r4, r1
   1bee4:	str	r6, [sp, #8]
   1bee8:	mov	r6, r0
   1beec:	mov	r0, r1
   1bef0:	str	lr, [sp, #12]
   1bef4:	bl	1ca7c <__assert_fail@plt+0xb50c>
   1bef8:	subs	r5, r0, #0
   1befc:	beq	1bf20 <__assert_fail@plt+0xa9b0>
   1bf00:	mov	r2, r4
   1bf04:	mov	r1, r6
   1bf08:	bl	1121c <memcpy@plt>
   1bf0c:	mov	r0, r5
   1bf10:	ldrd	r4, [sp]
   1bf14:	ldr	r6, [sp, #8]
   1bf18:	add	sp, sp, #12
   1bf1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf20:	bl	1c008 <__assert_fail@plt+0xaa98>
   1bf24:	strd	r4, [sp, #-16]!
   1bf28:	mov	r4, r1
   1bf2c:	str	r6, [sp, #8]
   1bf30:	mov	r6, r0
   1bf34:	mov	r0, r1
   1bf38:	str	lr, [sp, #12]
   1bf3c:	bl	1ca7c <__assert_fail@plt+0xb50c>
   1bf40:	subs	r5, r0, #0
   1bf44:	beq	1bf68 <__assert_fail@plt+0xa9f8>
   1bf48:	mov	r2, r4
   1bf4c:	mov	r1, r6
   1bf50:	bl	1121c <memcpy@plt>
   1bf54:	mov	r0, r5
   1bf58:	ldrd	r4, [sp]
   1bf5c:	ldr	r6, [sp, #8]
   1bf60:	add	sp, sp, #12
   1bf64:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf68:	bl	1c008 <__assert_fail@plt+0xaa98>
   1bf6c:	strd	r4, [sp, #-16]!
   1bf70:	mov	r4, r1
   1bf74:	str	r6, [sp, #8]
   1bf78:	mov	r6, r0
   1bf7c:	add	r0, r1, #1
   1bf80:	str	lr, [sp, #12]
   1bf84:	bl	1ca7c <__assert_fail@plt+0xb50c>
   1bf88:	subs	r5, r0, #0
   1bf8c:	beq	1bfb8 <__assert_fail@plt+0xaa48>
   1bf90:	mov	r3, #0
   1bf94:	mov	r1, r6
   1bf98:	mov	r2, r4
   1bf9c:	strb	r3, [r5, r4]
   1bfa0:	bl	1121c <memcpy@plt>
   1bfa4:	mov	r0, r5
   1bfa8:	ldrd	r4, [sp]
   1bfac:	ldr	r6, [sp, #8]
   1bfb0:	add	sp, sp, #12
   1bfb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bfb8:	bl	1c008 <__assert_fail@plt+0xaa98>
   1bfbc:	strd	r4, [sp, #-16]!
   1bfc0:	str	r6, [sp, #8]
   1bfc4:	mov	r6, r0
   1bfc8:	str	lr, [sp, #12]
   1bfcc:	bl	113c0 <strlen@plt>
   1bfd0:	add	r4, r0, #1
   1bfd4:	mov	r0, r4
   1bfd8:	bl	1ca7c <__assert_fail@plt+0xb50c>
   1bfdc:	subs	r5, r0, #0
   1bfe0:	beq	1c004 <__assert_fail@plt+0xaa94>
   1bfe4:	mov	r2, r4
   1bfe8:	mov	r1, r6
   1bfec:	bl	1121c <memcpy@plt>
   1bff0:	mov	r0, r5
   1bff4:	ldrd	r4, [sp]
   1bff8:	ldr	r6, [sp, #8]
   1bffc:	add	sp, sp, #12
   1c000:	pop	{pc}		; (ldr pc, [sp], #4)
   1c004:	bl	1c008 <__assert_fail@plt+0xaa98>
   1c008:	movw	r3, #368	; 0x170
   1c00c:	movt	r3, #3
   1c010:	str	r4, [sp, #-8]!
   1c014:	ldr	r4, [r3]
   1c018:	mov	r2, #5
   1c01c:	movw	r1, #62552	; 0xf458
   1c020:	movt	r1, #1
   1c024:	mov	r0, #0
   1c028:	str	lr, [sp, #4]
   1c02c:	bl	11258 <dcgettext@plt>
   1c030:	mov	r3, r0
   1c034:	movw	r2, #61384	; 0xefc8
   1c038:	movt	r2, #1
   1c03c:	mov	r1, #0
   1c040:	mov	r0, r4
   1c044:	bl	11324 <error@plt>
   1c048:	bl	11540 <abort@plt>
   1c04c:	cmp	r2, #36	; 0x24
   1c050:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c054:	strd	r6, [sp, #8]
   1c058:	strd	r8, [sp, #16]
   1c05c:	str	sl, [sp, #24]
   1c060:	str	lr, [sp, #28]
   1c064:	sub	sp, sp, #8
   1c068:	bhi	1c630 <__assert_fail@plt+0xb0c0>
   1c06c:	cmp	r1, #0
   1c070:	mov	r9, r2
   1c074:	mov	r6, r1
   1c078:	mov	r5, r0
   1c07c:	addeq	r6, sp, #4
   1c080:	mov	r8, r3
   1c084:	bl	113f0 <__errno_location@plt>
   1c088:	mov	r3, #0
   1c08c:	mov	r7, r0
   1c090:	str	r3, [r0]
   1c094:	ldrb	r4, [r5]
   1c098:	bl	11390 <__ctype_b_loc@plt>
   1c09c:	ldr	r2, [r0]
   1c0a0:	lsl	r3, r4, #1
   1c0a4:	ldrh	r3, [r2, r3]
   1c0a8:	tst	r3, #8192	; 0x2000
   1c0ac:	beq	1c0c8 <__assert_fail@plt+0xab58>
   1c0b0:	mov	r3, r5
   1c0b4:	ldrb	r4, [r3, #1]!
   1c0b8:	lsl	r1, r4, #1
   1c0bc:	ldrh	r1, [r2, r1]
   1c0c0:	tst	r1, #8192	; 0x2000
   1c0c4:	bne	1c0b4 <__assert_fail@plt+0xab44>
   1c0c8:	cmp	r4, #45	; 0x2d
   1c0cc:	beq	1c160 <__assert_fail@plt+0xabf0>
   1c0d0:	mov	r2, r9
   1c0d4:	mov	r1, r6
   1c0d8:	mov	r0, r5
   1c0dc:	bl	113b4 <strtoul@plt>
   1c0e0:	ldr	sl, [r6]
   1c0e4:	mov	r9, r0
   1c0e8:	cmp	sl, r5
   1c0ec:	beq	1c148 <__assert_fail@plt+0xabd8>
   1c0f0:	ldr	r4, [r7]
   1c0f4:	cmp	r4, #0
   1c0f8:	bne	1c138 <__assert_fail@plt+0xabc8>
   1c0fc:	ldr	r3, [sp, #40]	; 0x28
   1c100:	cmp	r3, #0
   1c104:	beq	1c114 <__assert_fail@plt+0xaba4>
   1c108:	ldrb	r5, [sl]
   1c10c:	cmp	r5, #0
   1c110:	bne	1c544 <__assert_fail@plt+0xafd4>
   1c114:	str	r9, [r8]
   1c118:	mov	r0, r4
   1c11c:	add	sp, sp, #8
   1c120:	ldrd	r4, [sp]
   1c124:	ldrd	r6, [sp, #8]
   1c128:	ldrd	r8, [sp, #16]
   1c12c:	ldr	sl, [sp, #24]
   1c130:	add	sp, sp, #28
   1c134:	pop	{pc}		; (ldr pc, [sp], #4)
   1c138:	cmp	r4, #34	; 0x22
   1c13c:	bne	1c160 <__assert_fail@plt+0xabf0>
   1c140:	mov	r4, #1
   1c144:	b	1c0fc <__assert_fail@plt+0xab8c>
   1c148:	ldr	r3, [sp, #40]	; 0x28
   1c14c:	cmp	r3, #0
   1c150:	beq	1c160 <__assert_fail@plt+0xabf0>
   1c154:	ldrb	r5, [r5]
   1c158:	cmp	r5, #0
   1c15c:	bne	1c168 <__assert_fail@plt+0xabf8>
   1c160:	mov	r4, #4
   1c164:	b	1c118 <__assert_fail@plt+0xaba8>
   1c168:	mov	r1, r5
   1c16c:	mov	r0, r3
   1c170:	bl	113cc <strchr@plt>
   1c174:	cmp	r0, #0
   1c178:	movne	r4, #0
   1c17c:	movne	r9, #1
   1c180:	beq	1c160 <__assert_fail@plt+0xabf0>
   1c184:	sub	r7, r5, #69	; 0x45
   1c188:	cmp	r7, #47	; 0x2f
   1c18c:	ldrls	pc, [pc, r7, lsl #2]
   1c190:	b	1c350 <__assert_fail@plt+0xade0>
   1c194:	andeq	ip, r1, r4, asr r2
   1c198:	andeq	ip, r1, r0, asr r3
   1c19c:	andeq	ip, r1, r4, asr r2
   1c1a0:	andeq	ip, r1, r0, asr r3
   1c1a4:	andeq	ip, r1, r0, asr r3
   1c1a8:	andeq	ip, r1, r0, asr r3
   1c1ac:	andeq	ip, r1, r4, asr r2
   1c1b0:	andeq	ip, r1, r0, asr r3
   1c1b4:	andeq	ip, r1, r4, asr r2
   1c1b8:	andeq	ip, r1, r0, asr r3
   1c1bc:	andeq	ip, r1, r0, asr r3
   1c1c0:	andeq	ip, r1, r4, asr r2
   1c1c4:	andeq	ip, r1, r0, asr r3
   1c1c8:	andeq	ip, r1, r0, asr r3
   1c1cc:	andeq	ip, r1, r0, asr r3
   1c1d0:	andeq	ip, r1, r4, asr r2
   1c1d4:	andeq	ip, r1, r0, asr r3
   1c1d8:	andeq	ip, r1, r0, asr r3
   1c1dc:	andeq	ip, r1, r0, asr r3
   1c1e0:	andeq	ip, r1, r0, asr r3
   1c1e4:	andeq	ip, r1, r4, asr r2
   1c1e8:	andeq	ip, r1, r4, asr r2
   1c1ec:	andeq	ip, r1, r0, asr r3
   1c1f0:	andeq	ip, r1, r0, asr r3
   1c1f4:	andeq	ip, r1, r0, asr r3
   1c1f8:	andeq	ip, r1, r0, asr r3
   1c1fc:	andeq	ip, r1, r0, asr r3
   1c200:	andeq	ip, r1, r0, asr r3
   1c204:	andeq	ip, r1, r0, asr r3
   1c208:	andeq	ip, r1, r0, asr r3
   1c20c:	andeq	ip, r1, r0, asr r3
   1c210:	andeq	ip, r1, r0, asr r3
   1c214:	andeq	ip, r1, r0, asr r3
   1c218:	andeq	ip, r1, r0, asr r3
   1c21c:	andeq	ip, r1, r4, asr r2
   1c220:	andeq	ip, r1, r0, asr r3
   1c224:	andeq	ip, r1, r0, asr r3
   1c228:	andeq	ip, r1, r0, asr r3
   1c22c:	andeq	ip, r1, r4, asr r2
   1c230:	andeq	ip, r1, r0, asr r3
   1c234:	andeq	ip, r1, r4, asr r2
   1c238:	andeq	ip, r1, r0, asr r3
   1c23c:	andeq	ip, r1, r0, asr r3
   1c240:	andeq	ip, r1, r0, asr r3
   1c244:	andeq	ip, r1, r0, asr r3
   1c248:	andeq	ip, r1, r0, asr r3
   1c24c:	andeq	ip, r1, r0, asr r3
   1c250:	andeq	ip, r1, r4, asr r2
   1c254:	mov	r1, #48	; 0x30
   1c258:	ldr	r0, [sp, #40]	; 0x28
   1c25c:	bl	113cc <strchr@plt>
   1c260:	cmp	r0, #0
   1c264:	beq	1c350 <__assert_fail@plt+0xade0>
   1c268:	ldrb	r3, [sl, #1]
   1c26c:	cmp	r3, #68	; 0x44
   1c270:	beq	1c624 <__assert_fail@plt+0xb0b4>
   1c274:	cmp	r3, #105	; 0x69
   1c278:	beq	1c55c <__assert_fail@plt+0xafec>
   1c27c:	cmp	r3, #66	; 0x42
   1c280:	beq	1c624 <__assert_fail@plt+0xb0b4>
   1c284:	cmp	r7, #47	; 0x2f
   1c288:	ldrls	pc, [pc, r7, lsl #2]
   1c28c:	b	1c520 <__assert_fail@plt+0xafb0>
   1c290:	andeq	ip, r1, r8, lsl #12
   1c294:	andeq	ip, r1, r0, lsr #10
   1c298:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c29c:	andeq	ip, r1, r0, lsr #10
   1c2a0:	andeq	ip, r1, r0, lsr #10
   1c2a4:	andeq	ip, r1, r0, lsr #10
   1c2a8:	andeq	ip, r1, r8, lsr #10
   1c2ac:	andeq	ip, r1, r0, lsr #10
   1c2b0:	muleq	r1, r8, r5
   1c2b4:	andeq	ip, r1, r0, lsr #10
   1c2b8:	andeq	ip, r1, r0, lsr #10
   1c2bc:	strdeq	ip, [r1], -r0
   1c2c0:	andeq	ip, r1, r0, lsr #10
   1c2c4:	andeq	ip, r1, r0, lsr #10
   1c2c8:	andeq	ip, r1, r0, lsr #10
   1c2cc:	andeq	ip, r1, r4, ror #11
   1c2d0:	andeq	ip, r1, r0, lsr #10
   1c2d4:	andeq	ip, r1, r0, lsr #10
   1c2d8:	andeq	ip, r1, r0, lsr #10
   1c2dc:	andeq	ip, r1, r0, lsr #10
   1c2e0:	andeq	ip, r1, r0, asr #8
   1c2e4:	ldrdeq	ip, [r1], -r8
   1c2e8:	andeq	ip, r1, r0, lsr #10
   1c2ec:	andeq	ip, r1, r0, lsr #10
   1c2f0:	andeq	ip, r1, r0, lsr #10
   1c2f4:	andeq	ip, r1, r0, lsr #10
   1c2f8:	andeq	ip, r1, r0, lsr #10
   1c2fc:	andeq	ip, r1, r0, lsr #10
   1c300:	andeq	ip, r1, r0, lsr #10
   1c304:	andeq	ip, r1, r4, lsl #11
   1c308:	andeq	ip, r1, r4, lsl r6
   1c30c:	andeq	ip, r1, r0, lsr #10
   1c310:	andeq	ip, r1, r0, lsr #10
   1c314:	andeq	ip, r1, r0, lsr #10
   1c318:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c31c:	andeq	ip, r1, r0, lsr #10
   1c320:	andeq	ip, r1, r0, lsr #10
   1c324:	andeq	ip, r1, r0, lsr #10
   1c328:	andeq	ip, r1, r8, lsr #10
   1c32c:	andeq	ip, r1, r0, lsr #10
   1c330:	muleq	r1, r8, r5
   1c334:	andeq	ip, r1, r0, lsr #10
   1c338:	andeq	ip, r1, r0, lsr #10
   1c33c:	andeq	ip, r1, r0, lsr #10
   1c340:	andeq	ip, r1, r0, lsr #10
   1c344:	andeq	ip, r1, r0, lsr #10
   1c348:	andeq	ip, r1, r0, lsr #10
   1c34c:	andeq	ip, r1, r4, ror #11
   1c350:	mov	r3, #1024	; 0x400
   1c354:	mov	r2, #1
   1c358:	sub	r5, r5, #66	; 0x42
   1c35c:	cmp	r5, #53	; 0x35
   1c360:	ldrls	pc, [pc, r5, lsl #2]
   1c364:	b	1c520 <__assert_fail@plt+0xafb0>
   1c368:	andeq	ip, r1, r8, asr #11
   1c36c:	andeq	ip, r1, r0, lsr #10
   1c370:	andeq	ip, r1, r0, lsr #10
   1c374:	andeq	ip, r1, r8, ror r4
   1c378:	andeq	ip, r1, r0, lsr #10
   1c37c:	andeq	ip, r1, r0, asr #9
   1c380:	andeq	ip, r1, r0, lsr #10
   1c384:	andeq	ip, r1, r0, lsr #10
   1c388:	andeq	ip, r1, r0, lsr #10
   1c38c:	andeq	ip, r1, r0, lsr r5
   1c390:	andeq	ip, r1, r0, lsr #10
   1c394:	andeq	ip, r1, r0, lsr #11
   1c398:	andeq	ip, r1, r0, lsr #10
   1c39c:	andeq	ip, r1, r0, lsr #10
   1c3a0:	muleq	r1, r0, r4
   1c3a4:	andeq	ip, r1, r0, lsr #10
   1c3a8:	andeq	ip, r1, r0, lsr #10
   1c3ac:	andeq	ip, r1, r0, lsr #10
   1c3b0:	andeq	ip, r1, r8, lsr #9
   1c3b4:	andeq	ip, r1, r0, lsr #10
   1c3b8:	andeq	ip, r1, r0, lsr #10
   1c3bc:	andeq	ip, r1, r0, lsr #10
   1c3c0:	andeq	ip, r1, r0, lsr #10
   1c3c4:	andeq	ip, r1, r8, asr #8
   1c3c8:	andeq	ip, r1, r0, ror #8
   1c3cc:	andeq	ip, r1, r0, lsr #10
   1c3d0:	andeq	ip, r1, r0, lsr #10
   1c3d4:	andeq	ip, r1, r0, lsr #10
   1c3d8:	andeq	ip, r1, r0, lsr #10
   1c3dc:	andeq	ip, r1, r0, lsr #10
   1c3e0:	andeq	ip, r1, r0, lsr #10
   1c3e4:	andeq	ip, r1, r0, lsr #10
   1c3e8:	andeq	ip, r1, r8, lsl #11
   1c3ec:	andeq	ip, r1, ip, lsl #10
   1c3f0:	andeq	ip, r1, r0, lsr #10
   1c3f4:	andeq	ip, r1, r0, lsr #10
   1c3f8:	andeq	ip, r1, r0, lsr #10
   1c3fc:	andeq	ip, r1, r0, asr #9
   1c400:	andeq	ip, r1, r0, lsr #10
   1c404:	andeq	ip, r1, r0, lsr #10
   1c408:	andeq	ip, r1, r0, lsr #10
   1c40c:	andeq	ip, r1, r0, lsr r5
   1c410:	andeq	ip, r1, r0, lsr #10
   1c414:	andeq	ip, r1, r0, lsr #11
   1c418:	andeq	ip, r1, r0, lsr #10
   1c41c:	andeq	ip, r1, r0, lsr #10
   1c420:	andeq	ip, r1, r0, lsr #10
   1c424:	andeq	ip, r1, r0, lsr #10
   1c428:	andeq	ip, r1, r0, lsr #10
   1c42c:	andeq	ip, r1, r0, lsr #10
   1c430:	andeq	ip, r1, r8, lsr #9
   1c434:	andeq	ip, r1, r0, lsr #10
   1c438:	andeq	ip, r1, r0, lsr #10
   1c43c:	andeq	ip, r1, r4, ror r5
   1c440:	mov	r2, #1
   1c444:	mov	r3, #1024	; 0x400
   1c448:	umull	r0, r1, r3, r9
   1c44c:	adds	r1, r1, #0
   1c450:	movne	r1, #1
   1c454:	cmp	r1, #0
   1c458:	bne	1c61c <__assert_fail@plt+0xb0ac>
   1c45c:	mul	r9, r9, r3
   1c460:	umull	r0, r1, r3, r9
   1c464:	adds	r1, r1, #0
   1c468:	movne	r1, #1
   1c46c:	cmp	r1, #0
   1c470:	bne	1c61c <__assert_fail@plt+0xb0ac>
   1c474:	mul	r9, r9, r3
   1c478:	umull	r0, r1, r3, r9
   1c47c:	adds	r1, r1, #0
   1c480:	movne	r1, #1
   1c484:	cmp	r1, #0
   1c488:	bne	1c61c <__assert_fail@plt+0xb0ac>
   1c48c:	mul	r9, r9, r3
   1c490:	umull	r0, r1, r3, r9
   1c494:	adds	r1, r1, #0
   1c498:	movne	r1, #1
   1c49c:	cmp	r1, #0
   1c4a0:	bne	1c61c <__assert_fail@plt+0xb0ac>
   1c4a4:	mul	r9, r3, r9
   1c4a8:	umull	r0, r1, r3, r9
   1c4ac:	adds	r1, r1, #0
   1c4b0:	movne	r1, #1
   1c4b4:	cmp	r1, #0
   1c4b8:	bne	1c61c <__assert_fail@plt+0xb0ac>
   1c4bc:	mul	r9, r3, r9
   1c4c0:	umull	r0, r1, r3, r9
   1c4c4:	adds	r1, r1, #0
   1c4c8:	movne	r1, #1
   1c4cc:	cmp	r1, #0
   1c4d0:	bne	1c61c <__assert_fail@plt+0xb0ac>
   1c4d4:	mul	r9, r3, r9
   1c4d8:	umull	r0, r1, r3, r9
   1c4dc:	adds	r1, r1, #0
   1c4e0:	movne	r1, #1
   1c4e4:	cmp	r1, #0
   1c4e8:	bne	1c61c <__assert_fail@plt+0xb0ac>
   1c4ec:	mul	r9, r9, r3
   1c4f0:	umull	r0, r1, r3, r9
   1c4f4:	adds	r1, r1, #0
   1c4f8:	movne	r1, #1
   1c4fc:	cmp	r1, #0
   1c500:	muleq	r9, r9, r3
   1c504:	bne	1c61c <__assert_fail@plt+0xb0ac>
   1c508:	orr	r4, r4, r1
   1c50c:	add	r3, sl, r2
   1c510:	str	r3, [r6]
   1c514:	ldrb	r3, [sl, r2]
   1c518:	cmp	r3, #0
   1c51c:	beq	1c114 <__assert_fail@plt+0xaba4>
   1c520:	orr	r4, r4, #2
   1c524:	b	1c114 <__assert_fail@plt+0xaba4>
   1c528:	mov	r2, #1
   1c52c:	mov	r3, #1024	; 0x400
   1c530:	umull	r0, r1, r3, r9
   1c534:	cmp	r1, #0
   1c538:	bne	1c5bc <__assert_fail@plt+0xb04c>
   1c53c:	mul	r9, r3, r9
   1c540:	b	1c50c <__assert_fail@plt+0xaf9c>
   1c544:	mov	r0, r3
   1c548:	mov	r1, r5
   1c54c:	bl	113cc <strchr@plt>
   1c550:	cmp	r0, #0
   1c554:	bne	1c184 <__assert_fail@plt+0xac14>
   1c558:	b	1c520 <__assert_fail@plt+0xafb0>
   1c55c:	ldrb	r2, [sl, #2]
   1c560:	mov	r3, #1024	; 0x400
   1c564:	cmp	r2, #66	; 0x42
   1c568:	movne	r2, #1
   1c56c:	moveq	r2, #3
   1c570:	b	1c358 <__assert_fail@plt+0xade8>
   1c574:	cmp	r9, #0
   1c578:	blt	1c5bc <__assert_fail@plt+0xb04c>
   1c57c:	lsl	r9, r9, #1
   1c580:	b	1c50c <__assert_fail@plt+0xaf9c>
   1c584:	mov	r2, #1
   1c588:	lsrs	r3, r9, #23
   1c58c:	bne	1c5bc <__assert_fail@plt+0xb04c>
   1c590:	lsl	r9, r9, #9
   1c594:	b	1c50c <__assert_fail@plt+0xaf9c>
   1c598:	mov	r2, #1
   1c59c:	mov	r3, #1024	; 0x400
   1c5a0:	umull	r0, r1, r3, r9
   1c5a4:	cmp	r1, #0
   1c5a8:	bne	1c5bc <__assert_fail@plt+0xb04c>
   1c5ac:	mul	r9, r9, r3
   1c5b0:	umull	r0, r1, r3, r9
   1c5b4:	cmp	r1, #0
   1c5b8:	beq	1c53c <__assert_fail@plt+0xafcc>
   1c5bc:	mov	r4, #1
   1c5c0:	mvn	r9, #0
   1c5c4:	b	1c50c <__assert_fail@plt+0xaf9c>
   1c5c8:	lsrs	r3, r9, #22
   1c5cc:	bne	1c5bc <__assert_fail@plt+0xb04c>
   1c5d0:	lsl	r9, r9, #10
   1c5d4:	b	1c50c <__assert_fail@plt+0xaf9c>
   1c5d8:	mov	r2, #1
   1c5dc:	mov	r3, #1024	; 0x400
   1c5e0:	b	1c460 <__assert_fail@plt+0xaef0>
   1c5e4:	mov	r2, #1
   1c5e8:	mov	r3, #1024	; 0x400
   1c5ec:	b	1c4a8 <__assert_fail@plt+0xaf38>
   1c5f0:	mov	r2, #1
   1c5f4:	mov	r3, #1024	; 0x400
   1c5f8:	b	1c490 <__assert_fail@plt+0xaf20>
   1c5fc:	mov	r2, #1
   1c600:	mov	r3, #1024	; 0x400
   1c604:	b	1c4c0 <__assert_fail@plt+0xaf50>
   1c608:	mov	r2, #1
   1c60c:	mov	r3, #1024	; 0x400
   1c610:	b	1c478 <__assert_fail@plt+0xaf08>
   1c614:	mov	r2, #1
   1c618:	b	1c50c <__assert_fail@plt+0xaf9c>
   1c61c:	mvn	r9, #0
   1c620:	b	1c508 <__assert_fail@plt+0xaf98>
   1c624:	mov	r3, #1000	; 0x3e8
   1c628:	mov	r2, #2
   1c62c:	b	1c358 <__assert_fail@plt+0xade8>
   1c630:	movw	r3, #62572	; 0xf46c
   1c634:	movt	r3, #1
   1c638:	movw	r1, #62584	; 0xf478
   1c63c:	movt	r1, #1
   1c640:	movw	r0, #62596	; 0xf484
   1c644:	movt	r0, #1
   1c648:	mov	r2, #84	; 0x54
   1c64c:	bl	11570 <__assert_fail@plt>
   1c650:	cmp	r1, #0
   1c654:	cmpne	r0, #0
   1c658:	beq	1c6a4 <__assert_fail@plt+0xb134>
   1c65c:	strd	r4, [sp, #-16]!
   1c660:	umull	r4, r5, r0, r1
   1c664:	str	r6, [sp, #8]
   1c668:	str	lr, [sp, #12]
   1c66c:	adds	r3, r5, #0
   1c670:	movne	r3, #1
   1c674:	cmp	r4, #0
   1c678:	blt	1c684 <__assert_fail@plt+0xb114>
   1c67c:	cmp	r3, #0
   1c680:	beq	1c6b0 <__assert_fail@plt+0xb140>
   1c684:	bl	113f0 <__errno_location@plt>
   1c688:	mov	r3, #12
   1c68c:	ldrd	r4, [sp]
   1c690:	ldr	r6, [sp, #8]
   1c694:	add	sp, sp, #12
   1c698:	str	r3, [r0]
   1c69c:	mov	r0, #0
   1c6a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6a4:	mov	r1, #1
   1c6a8:	mov	r0, r1
   1c6ac:	b	111a4 <calloc@plt>
   1c6b0:	ldrd	r4, [sp]
   1c6b4:	ldr	r6, [sp, #8]
   1c6b8:	ldr	lr, [sp, #12]
   1c6bc:	add	sp, sp, #16
   1c6c0:	b	111a4 <calloc@plt>
   1c6c4:	push	{r1, r2, r3}
   1c6c8:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c6cc:	strd	r6, [sp, #8]
   1c6d0:	str	lr, [sp, #16]
   1c6d4:	sub	sp, sp, #8
   1c6d8:	ldr	r1, [sp, #28]
   1c6dc:	add	r2, sp, #32
   1c6e0:	str	r2, [sp, #4]
   1c6e4:	cmp	r1, #0
   1c6e8:	beq	1c7c4 <__assert_fail@plt+0xb254>
   1c6ec:	movw	r3, #1030	; 0x406
   1c6f0:	mov	r6, r0
   1c6f4:	cmp	r1, r3
   1c6f8:	beq	1c7d4 <__assert_fail@plt+0xb264>
   1c6fc:	cmp	r1, #11
   1c700:	beq	1c77c <__assert_fail@plt+0xb20c>
   1c704:	ble	1c75c <__assert_fail@plt+0xb1ec>
   1c708:	movw	r2, #1031	; 0x407
   1c70c:	cmp	r1, r2
   1c710:	bgt	1c798 <__assert_fail@plt+0xb228>
   1c714:	cmp	r1, r3
   1c718:	bge	1c728 <__assert_fail@plt+0xb1b8>
   1c71c:	movw	r3, #1025	; 0x401
   1c720:	cmp	r1, r3
   1c724:	beq	1c77c <__assert_fail@plt+0xb20c>
   1c728:	ldr	r3, [sp, #4]
   1c72c:	mov	r0, r6
   1c730:	ldr	r2, [r3]
   1c734:	bl	11480 <fcntl64@plt>
   1c738:	mov	r4, r0
   1c73c:	mov	r0, r4
   1c740:	add	sp, sp, #8
   1c744:	ldrd	r4, [sp]
   1c748:	ldrd	r6, [sp, #8]
   1c74c:	ldr	lr, [sp, #16]
   1c750:	add	sp, sp, #20
   1c754:	add	sp, sp, #12
   1c758:	bx	lr
   1c75c:	cmp	r1, #4
   1c760:	beq	1c728 <__assert_fail@plt+0xb1b8>
   1c764:	bgt	1c78c <__assert_fail@plt+0xb21c>
   1c768:	cmp	r1, #2
   1c76c:	beq	1c728 <__assert_fail@plt+0xb1b8>
   1c770:	bgt	1c77c <__assert_fail@plt+0xb20c>
   1c774:	cmp	r1, #1
   1c778:	bne	1c728 <__assert_fail@plt+0xb1b8>
   1c77c:	mov	r0, r6
   1c780:	bl	11480 <fcntl64@plt>
   1c784:	mov	r4, r0
   1c788:	b	1c73c <__assert_fail@plt+0xb1cc>
   1c78c:	cmp	r1, #9
   1c790:	bne	1c728 <__assert_fail@plt+0xb1b8>
   1c794:	b	1c77c <__assert_fail@plt+0xb20c>
   1c798:	movw	r3, #1033	; 0x409
   1c79c:	cmp	r1, r3
   1c7a0:	beq	1c728 <__assert_fail@plt+0xb1b8>
   1c7a4:	blt	1c77c <__assert_fail@plt+0xb20c>
   1c7a8:	movw	r3, #1034	; 0x40a
   1c7ac:	cmp	r1, r3
   1c7b0:	bne	1c728 <__assert_fail@plt+0xb1b8>
   1c7b4:	mov	r0, r6
   1c7b8:	bl	11480 <fcntl64@plt>
   1c7bc:	mov	r4, r0
   1c7c0:	b	1c73c <__assert_fail@plt+0xb1cc>
   1c7c4:	ldr	r2, [sp, #32]
   1c7c8:	bl	11480 <fcntl64@plt>
   1c7cc:	mov	r4, r0
   1c7d0:	b	1c73c <__assert_fail@plt+0xb1cc>
   1c7d4:	movw	r5, #1000	; 0x3e8
   1c7d8:	movt	r5, #3
   1c7dc:	ldr	r7, [r2]
   1c7e0:	add	r2, sp, #36	; 0x24
   1c7e4:	ldr	r3, [r5]
   1c7e8:	str	r2, [sp, #4]
   1c7ec:	mov	r2, r7
   1c7f0:	cmp	r3, #0
   1c7f4:	blt	1c810 <__assert_fail@plt+0xb2a0>
   1c7f8:	bl	11480 <fcntl64@plt>
   1c7fc:	subs	r4, r0, #0
   1c800:	blt	1c878 <__assert_fail@plt+0xb308>
   1c804:	mov	r3, #1
   1c808:	str	r3, [r5]
   1c80c:	b	1c73c <__assert_fail@plt+0xb1cc>
   1c810:	mov	r1, #0
   1c814:	bl	11480 <fcntl64@plt>
   1c818:	subs	r4, r0, #0
   1c81c:	blt	1c73c <__assert_fail@plt+0xb1cc>
   1c820:	ldr	r3, [r5]
   1c824:	cmn	r3, #1
   1c828:	bne	1c73c <__assert_fail@plt+0xb1cc>
   1c82c:	mov	r1, #1
   1c830:	mov	r0, r4
   1c834:	bl	11480 <fcntl64@plt>
   1c838:	subs	r2, r0, #0
   1c83c:	blt	1c858 <__assert_fail@plt+0xb2e8>
   1c840:	orr	r2, r2, #1
   1c844:	mov	r1, #2
   1c848:	mov	r0, r4
   1c84c:	bl	11480 <fcntl64@plt>
   1c850:	cmn	r0, #1
   1c854:	bne	1c73c <__assert_fail@plt+0xb1cc>
   1c858:	bl	113f0 <__errno_location@plt>
   1c85c:	mov	r5, r0
   1c860:	mov	r0, r4
   1c864:	ldr	r6, [r5]
   1c868:	mvn	r4, #0
   1c86c:	bl	11558 <close@plt>
   1c870:	str	r6, [r5]
   1c874:	b	1c73c <__assert_fail@plt+0xb1cc>
   1c878:	bl	113f0 <__errno_location@plt>
   1c87c:	ldr	r3, [r0]
   1c880:	cmp	r3, #22
   1c884:	bne	1c804 <__assert_fail@plt+0xb294>
   1c888:	mov	r2, r7
   1c88c:	mov	r0, r6
   1c890:	mov	r1, #0
   1c894:	bl	11480 <fcntl64@plt>
   1c898:	subs	r4, r0, #0
   1c89c:	mvnge	r3, #0
   1c8a0:	strge	r3, [r5]
   1c8a4:	bge	1c82c <__assert_fail@plt+0xb2bc>
   1c8a8:	b	1c73c <__assert_fail@plt+0xb1cc>
   1c8ac:	str	r4, [sp, #-8]!
   1c8b0:	subs	r4, r0, #0
   1c8b4:	str	lr, [sp, #4]
   1c8b8:	sub	sp, sp, #8
   1c8bc:	beq	1c8d8 <__assert_fail@plt+0xb368>
   1c8c0:	bl	1136c <__freading@plt>
   1c8c4:	cmp	r0, #0
   1c8c8:	beq	1c8d8 <__assert_fail@plt+0xb368>
   1c8cc:	ldr	r3, [r4]
   1c8d0:	tst	r3, #256	; 0x100
   1c8d4:	bne	1c8f0 <__assert_fail@plt+0xb380>
   1c8d8:	mov	r0, r4
   1c8dc:	add	sp, sp, #8
   1c8e0:	ldr	r4, [sp]
   1c8e4:	ldr	lr, [sp, #4]
   1c8e8:	add	sp, sp, #8
   1c8ec:	b	111e0 <fflush@plt>
   1c8f0:	mov	r1, #1
   1c8f4:	mov	r2, #0
   1c8f8:	mov	r3, #0
   1c8fc:	mov	r0, r4
   1c900:	str	r1, [sp]
   1c904:	bl	1c9ac <__assert_fail@plt+0xb43c>
   1c908:	b	1c8d8 <__assert_fail@plt+0xb368>
   1c90c:	ldr	r3, [r0, #16]
   1c910:	ldr	r2, [r0, #20]
   1c914:	cmp	r2, r3
   1c918:	bhi	1c944 <__assert_fail@plt+0xb3d4>
   1c91c:	ldm	r0, {r1, r2, r3}
   1c920:	tst	r1, #256	; 0x100
   1c924:	sub	r3, r3, r2
   1c928:	beq	1c93c <__assert_fail@plt+0xb3cc>
   1c92c:	ldr	r1, [r0, #36]	; 0x24
   1c930:	ldr	r2, [r0, #44]	; 0x2c
   1c934:	sub	r2, r2, r1
   1c938:	add	r3, r3, r2
   1c93c:	mov	r0, r3
   1c940:	bx	lr
   1c944:	mov	r0, #0
   1c948:	bx	lr
   1c94c:	strd	r4, [sp, #-12]!
   1c950:	mov	r5, r0
   1c954:	str	lr, [sp, #8]
   1c958:	sub	sp, sp, #12
   1c95c:	bl	113f0 <__errno_location@plt>
   1c960:	mov	r4, r0
   1c964:	mov	r2, #0
   1c968:	ldr	r3, [r4]
   1c96c:	mov	r0, r5
   1c970:	str	r2, [r4]
   1c974:	str	r3, [sp]
   1c978:	str	r3, [sp, #4]
   1c97c:	bl	111f8 <free@plt>
   1c980:	ldr	r3, [r4]
   1c984:	add	r2, sp, #8
   1c988:	clz	r3, r3
   1c98c:	lsr	r3, r3, #5
   1c990:	add	r3, r2, r3, lsl #2
   1c994:	ldr	r3, [r3, #-8]
   1c998:	str	r3, [r4]
   1c99c:	add	sp, sp, #12
   1c9a0:	ldrd	r4, [sp]
   1c9a4:	add	sp, sp, #8
   1c9a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c9ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c9b0:	mov	r4, r0
   1c9b4:	ldr	ip, [r0, #4]
   1c9b8:	strd	r6, [sp, #8]
   1c9bc:	str	lr, [sp, #20]
   1c9c0:	ldr	lr, [r0, #8]
   1c9c4:	str	r8, [sp, #16]
   1c9c8:	sub	sp, sp, #8
   1c9cc:	ldr	r5, [sp, #32]
   1c9d0:	cmp	lr, ip
   1c9d4:	beq	1c9fc <__assert_fail@plt+0xb48c>
   1c9d8:	mov	r0, r4
   1c9dc:	str	r5, [sp, #32]
   1c9e0:	add	sp, sp, #8
   1c9e4:	ldrd	r4, [sp]
   1c9e8:	ldrd	r6, [sp, #8]
   1c9ec:	ldr	r8, [sp, #16]
   1c9f0:	ldr	lr, [sp, #20]
   1c9f4:	add	sp, sp, #24
   1c9f8:	b	11474 <fseeko64@plt>
   1c9fc:	ldr	ip, [r0, #16]
   1ca00:	ldr	lr, [r0, #20]
   1ca04:	cmp	lr, ip
   1ca08:	bne	1c9d8 <__assert_fail@plt+0xb468>
   1ca0c:	ldr	r8, [r0, #36]	; 0x24
   1ca10:	cmp	r8, #0
   1ca14:	bne	1c9d8 <__assert_fail@plt+0xb468>
   1ca18:	mov	r6, r2
   1ca1c:	mov	r7, r3
   1ca20:	bl	11438 <fileno@plt>
   1ca24:	mov	r2, r6
   1ca28:	mov	r3, r7
   1ca2c:	str	r5, [sp]
   1ca30:	bl	112dc <lseek64@plt>
   1ca34:	mvn	r3, #0
   1ca38:	mvn	r2, #0
   1ca3c:	cmp	r1, r3
   1ca40:	cmpeq	r0, r2
   1ca44:	beq	1ca74 <__assert_fail@plt+0xb504>
   1ca48:	ldr	r3, [r4]
   1ca4c:	strd	r0, [r4, #80]	; 0x50
   1ca50:	bic	r3, r3, #16
   1ca54:	str	r3, [r4]
   1ca58:	mov	r0, r8
   1ca5c:	add	sp, sp, #8
   1ca60:	ldrd	r4, [sp]
   1ca64:	ldrd	r6, [sp, #8]
   1ca68:	ldr	r8, [sp, #16]
   1ca6c:	add	sp, sp, #20
   1ca70:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca74:	mvn	r8, #0
   1ca78:	b	1ca58 <__assert_fail@plt+0xb4e8>
   1ca7c:	cmp	r0, #0
   1ca80:	beq	1ca8c <__assert_fail@plt+0xb51c>
   1ca84:	blt	1ca94 <__assert_fail@plt+0xb524>
   1ca88:	b	11354 <malloc@plt>
   1ca8c:	mov	r0, #1
   1ca90:	b	11354 <malloc@plt>
   1ca94:	str	r4, [sp, #-8]!
   1ca98:	str	lr, [sp, #4]
   1ca9c:	bl	113f0 <__errno_location@plt>
   1caa0:	mov	r3, #12
   1caa4:	ldr	r4, [sp]
   1caa8:	add	sp, sp, #4
   1caac:	str	r3, [r0]
   1cab0:	mov	r0, #0
   1cab4:	pop	{pc}		; (ldr pc, [sp], #4)
   1cab8:	strd	r4, [sp, #-20]!	; 0xffffffec
   1cabc:	mov	r5, r2
   1cac0:	strd	r6, [sp, #8]
   1cac4:	subs	r6, r0, #0
   1cac8:	mov	r7, r1
   1cacc:	str	lr, [sp, #16]
   1cad0:	sub	sp, sp, #12
   1cad4:	addeq	r6, sp, #4
   1cad8:	mov	r0, r6
   1cadc:	bl	11318 <mbrtowc@plt>
   1cae0:	cmp	r5, #0
   1cae4:	cmnne	r0, #3
   1cae8:	mov	r4, r0
   1caec:	bhi	1cb08 <__assert_fail@plt+0xb598>
   1caf0:	mov	r0, r4
   1caf4:	add	sp, sp, #12
   1caf8:	ldrd	r4, [sp]
   1cafc:	ldrd	r6, [sp, #8]
   1cb00:	add	sp, sp, #16
   1cb04:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb08:	mov	r0, #0
   1cb0c:	bl	1cc44 <__assert_fail@plt+0xb6d4>
   1cb10:	cmp	r0, #0
   1cb14:	bne	1caf0 <__assert_fail@plt+0xb580>
   1cb18:	ldrb	r3, [r7]
   1cb1c:	mov	r4, #1
   1cb20:	str	r3, [r6]
   1cb24:	b	1caf0 <__assert_fail@plt+0xb580>
   1cb28:	cmp	r0, #0
   1cb2c:	beq	1cb54 <__assert_fail@plt+0xb5e4>
   1cb30:	cmp	r1, #0
   1cb34:	str	r4, [sp, #-8]!
   1cb38:	str	lr, [sp, #4]
   1cb3c:	beq	1cb5c <__assert_fail@plt+0xb5ec>
   1cb40:	blt	1cb70 <__assert_fail@plt+0xb600>
   1cb44:	ldr	r4, [sp]
   1cb48:	ldr	lr, [sp, #4]
   1cb4c:	add	sp, sp, #8
   1cb50:	b	11288 <realloc@plt>
   1cb54:	mov	r0, r1
   1cb58:	b	1ca7c <__assert_fail@plt+0xb50c>
   1cb5c:	bl	1c94c <__assert_fail@plt+0xb3dc>
   1cb60:	ldr	r4, [sp]
   1cb64:	add	sp, sp, #4
   1cb68:	mov	r0, #0
   1cb6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb70:	bl	113f0 <__errno_location@plt>
   1cb74:	mov	r3, #12
   1cb78:	str	r3, [r0]
   1cb7c:	b	1cb60 <__assert_fail@plt+0xb5f0>
   1cb80:	umull	r2, r3, r1, r2
   1cb84:	cmp	r3, #0
   1cb88:	bne	1cb94 <__assert_fail@plt+0xb624>
   1cb8c:	mov	r1, r2
   1cb90:	b	1cb28 <__assert_fail@plt+0xb5b8>
   1cb94:	str	r4, [sp, #-8]!
   1cb98:	str	lr, [sp, #4]
   1cb9c:	bl	113f0 <__errno_location@plt>
   1cba0:	mov	r3, #12
   1cba4:	ldr	r4, [sp]
   1cba8:	add	sp, sp, #4
   1cbac:	str	r3, [r0]
   1cbb0:	mov	r0, #0
   1cbb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1cbb8:	strd	r4, [sp, #-16]!
   1cbbc:	mov	r4, r0
   1cbc0:	str	r6, [sp, #8]
   1cbc4:	str	lr, [sp, #12]
   1cbc8:	bl	1130c <__fpending@plt>
   1cbcc:	mov	r6, r0
   1cbd0:	mov	r0, r4
   1cbd4:	bl	11204 <ferror@plt>
   1cbd8:	mov	r5, r0
   1cbdc:	mov	r0, r4
   1cbe0:	bl	11450 <fclose@plt>
   1cbe4:	cmp	r5, #0
   1cbe8:	mov	r4, r0
   1cbec:	bne	1cc24 <__assert_fail@plt+0xb6b4>
   1cbf0:	cmp	r0, #0
   1cbf4:	beq	1cc10 <__assert_fail@plt+0xb6a0>
   1cbf8:	cmp	r6, #0
   1cbfc:	bne	1cc3c <__assert_fail@plt+0xb6cc>
   1cc00:	bl	113f0 <__errno_location@plt>
   1cc04:	ldr	r4, [r0]
   1cc08:	subs	r4, r4, #9
   1cc0c:	mvnne	r4, #0
   1cc10:	mov	r0, r4
   1cc14:	ldrd	r4, [sp]
   1cc18:	ldr	r6, [sp, #8]
   1cc1c:	add	sp, sp, #12
   1cc20:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc24:	cmp	r0, #0
   1cc28:	bne	1cc3c <__assert_fail@plt+0xb6cc>
   1cc2c:	bl	113f0 <__errno_location@plt>
   1cc30:	str	r4, [r0]
   1cc34:	mvn	r4, #0
   1cc38:	b	1cc10 <__assert_fail@plt+0xb6a0>
   1cc3c:	mvn	r4, #0
   1cc40:	b	1cc10 <__assert_fail@plt+0xb6a0>
   1cc44:	push	{lr}		; (str lr, [sp, #-4]!)
   1cc48:	sub	sp, sp, #268	; 0x10c
   1cc4c:	movw	r2, #257	; 0x101
   1cc50:	add	r1, sp, #4
   1cc54:	bl	1d034 <__assert_fail@plt+0xbac4>
   1cc58:	cmp	r0, #0
   1cc5c:	movne	r0, #0
   1cc60:	bne	1cc94 <__assert_fail@plt+0xb724>
   1cc64:	movw	r1, #62636	; 0xf4ac
   1cc68:	movt	r1, #1
   1cc6c:	add	r0, sp, #4
   1cc70:	bl	111b0 <strcmp@plt>
   1cc74:	cmp	r0, #0
   1cc78:	beq	1cc94 <__assert_fail@plt+0xb724>
   1cc7c:	add	r0, sp, #4
   1cc80:	movw	r1, #62640	; 0xf4b0
   1cc84:	movt	r1, #1
   1cc88:	bl	111b0 <strcmp@plt>
   1cc8c:	adds	r0, r0, #0
   1cc90:	movne	r0, #1
   1cc94:	add	sp, sp, #268	; 0x10c
   1cc98:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc9c:	mov	r0, #14
   1cca0:	str	r4, [sp, #-8]!
   1cca4:	str	lr, [sp, #4]
   1cca8:	bl	114bc <nl_langinfo@plt>
   1ccac:	cmp	r0, #0
   1ccb0:	beq	1ccd4 <__assert_fail@plt+0xb764>
   1ccb4:	ldrb	r2, [r0]
   1ccb8:	movw	r3, #62648	; 0xf4b8
   1ccbc:	movt	r3, #1
   1ccc0:	ldr	r4, [sp]
   1ccc4:	add	sp, sp, #4
   1ccc8:	cmp	r2, #0
   1cccc:	moveq	r0, r3
   1ccd0:	pop	{pc}		; (ldr pc, [sp], #4)
   1ccd4:	ldr	r4, [sp]
   1ccd8:	add	sp, sp, #4
   1ccdc:	movw	r0, #62648	; 0xf4b8
   1cce0:	movt	r0, #1
   1cce4:	pop	{pc}		; (ldr pc, [sp], #4)
   1cce8:	adds	r3, r0, #16
   1ccec:	bmi	1cd38 <__assert_fail@plt+0xb7c8>
   1ccf0:	cmp	r3, r0
   1ccf4:	bcc	1cd38 <__assert_fail@plt+0xb7c8>
   1ccf8:	mov	r0, r3
   1ccfc:	str	r4, [sp, #-8]!
   1cd00:	str	lr, [sp, #4]
   1cd04:	bl	11354 <malloc@plt>
   1cd08:	cmp	r0, #0
   1cd0c:	moveq	r0, #0
   1cd10:	beq	1cd2c <__assert_fail@plt+0xb7bc>
   1cd14:	add	r3, r0, #8
   1cd18:	rsb	r2, r0, #8
   1cd1c:	bic	r3, r3, #15
   1cd20:	add	r3, r3, r2
   1cd24:	add	r0, r0, r3
   1cd28:	strb	r3, [r0, #-1]
   1cd2c:	ldr	r4, [sp]
   1cd30:	add	sp, sp, #4
   1cd34:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd38:	mov	r0, #0
   1cd3c:	bx	lr
   1cd40:	tst	r0, #7
   1cd44:	bne	1cd5c <__assert_fail@plt+0xb7ec>
   1cd48:	tst	r0, #8
   1cd4c:	bxeq	lr
   1cd50:	ldrb	r3, [r0, #-1]
   1cd54:	sub	r0, r0, r3
   1cd58:	b	1c94c <__assert_fail@plt+0xb3dc>
   1cd5c:	str	r4, [sp, #-8]!
   1cd60:	str	lr, [sp, #4]
   1cd64:	bl	11540 <abort@plt>
   1cd68:	str	r4, [sp, #-8]!
   1cd6c:	mov	r4, r0
   1cd70:	str	lr, [sp, #4]
   1cd74:	bl	111ec <wcwidth@plt>
   1cd78:	cmp	r0, #0
   1cd7c:	bge	1cd90 <__assert_fail@plt+0xb820>
   1cd80:	mov	r0, r4
   1cd84:	bl	112a0 <iswcntrl@plt>
   1cd88:	clz	r0, r0
   1cd8c:	lsr	r0, r0, #5
   1cd90:	ldr	r4, [sp]
   1cd94:	add	sp, sp, #4
   1cd98:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd9c:	mov	r3, r1
   1cda0:	strd	r4, [sp, #-16]!
   1cda4:	mov	r4, r1
   1cda8:	ldr	r2, [r1, #4]
   1cdac:	mov	r5, r0
   1cdb0:	ldr	r1, [r3], #16
   1cdb4:	str	r6, [sp, #8]
   1cdb8:	str	lr, [sp, #12]
   1cdbc:	cmp	r1, r3
   1cdc0:	strne	r1, [r0]
   1cdc4:	beq	1cdf0 <__assert_fail@plt+0xb880>
   1cdc8:	ldrb	r3, [r4, #8]
   1cdcc:	str	r2, [r5, #4]
   1cdd0:	ldr	r6, [sp, #8]
   1cdd4:	cmp	r3, #0
   1cdd8:	strb	r3, [r5, #8]
   1cddc:	ldrne	r3, [r4, #12]
   1cde0:	strne	r3, [r5, #12]
   1cde4:	ldrd	r4, [sp]
   1cde8:	add	sp, sp, #12
   1cdec:	pop	{pc}		; (ldr pc, [sp], #4)
   1cdf0:	add	r3, r0, #16
   1cdf4:	mov	r0, r3
   1cdf8:	bl	1121c <memcpy@plt>
   1cdfc:	ldr	r2, [r4, #4]
   1ce00:	str	r0, [r5]
   1ce04:	b	1cdc8 <__assert_fail@plt+0xb858>
   1ce08:	lsr	r2, r0, #5
   1ce0c:	movw	r3, #62656	; 0xf4c0
   1ce10:	movt	r3, #1
   1ce14:	and	r0, r0, #31
   1ce18:	ldr	r3, [r3, r2, lsl #2]
   1ce1c:	lsr	r0, r3, r0
   1ce20:	and	r0, r0, #1
   1ce24:	bx	lr
   1ce28:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ce2c:	mov	r4, r0
   1ce30:	strd	r6, [sp, #8]
   1ce34:	str	r8, [sp, #16]
   1ce38:	str	lr, [sp, #20]
   1ce3c:	sub	sp, sp, #56	; 0x38
   1ce40:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   1ce44:	cmp	r0, #1
   1ce48:	bhi	1ce74 <__assert_fail@plt+0xb904>
   1ce4c:	mov	r0, r4
   1ce50:	bl	113c0 <strlen@plt>
   1ce54:	mov	r5, r0
   1ce58:	mov	r0, r5
   1ce5c:	add	sp, sp, #56	; 0x38
   1ce60:	ldrd	r4, [sp]
   1ce64:	ldrd	r6, [sp, #8]
   1ce68:	ldr	r8, [sp, #16]
   1ce6c:	add	sp, sp, #20
   1ce70:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce74:	mov	r3, #0
   1ce78:	mov	r0, #0
   1ce7c:	mov	r1, #0
   1ce80:	movw	r7, #62656	; 0xf4c0
   1ce84:	movt	r7, #1
   1ce88:	mov	r5, r3
   1ce8c:	strb	r3, [sp]
   1ce90:	mov	r6, #1
   1ce94:	strd	r0, [sp, #4]
   1ce98:	strb	r3, [sp, #12]
   1ce9c:	str	r4, [sp, #16]
   1cea0:	b	1cef8 <__assert_fail@plt+0xb988>
   1cea4:	ldrb	r3, [r4]
   1cea8:	lsr	r2, r3, #5
   1ceac:	and	r3, r3, #31
   1ceb0:	ldr	r2, [r7, r2, lsl #2]
   1ceb4:	lsr	r3, r2, r3
   1ceb8:	tst	r3, #1
   1cebc:	beq	1cf68 <__assert_fail@plt+0xb9f8>
   1cec0:	str	r6, [sp, #20]
   1cec4:	ldrb	r3, [r4]
   1cec8:	strb	r6, [sp, #24]
   1cecc:	mov	r4, r3
   1ced0:	str	r3, [sp, #28]
   1ced4:	cmp	r4, #0
   1ced8:	beq	1ce58 <__assert_fail@plt+0xb8e8>
   1cedc:	ldr	r4, [sp, #16]
   1cee0:	mov	r2, #0
   1cee4:	add	r5, r5, #1
   1cee8:	ldr	r3, [sp, #20]
   1ceec:	strb	r2, [sp, #12]
   1cef0:	add	r4, r4, r3
   1cef4:	str	r4, [sp, #16]
   1cef8:	ldrb	r3, [sp]
   1cefc:	cmp	r3, #0
   1cf00:	addne	r8, sp, #4
   1cf04:	beq	1cea4 <__assert_fail@plt+0xb934>
   1cf08:	bl	112f4 <__ctype_get_mb_cur_max@plt>
   1cf0c:	mov	r1, r0
   1cf10:	mov	r0, r4
   1cf14:	bl	1b23c <__assert_fail@plt+0x9ccc>
   1cf18:	mov	r2, r0
   1cf1c:	mov	r3, r8
   1cf20:	mov	r1, r4
   1cf24:	add	r0, sp, #28
   1cf28:	bl	1cab8 <__assert_fail@plt+0xb548>
   1cf2c:	cmn	r0, #1
   1cf30:	str	r0, [sp, #20]
   1cf34:	beq	1cf84 <__assert_fail@plt+0xba14>
   1cf38:	cmn	r0, #2
   1cf3c:	beq	1cf98 <__assert_fail@plt+0xba28>
   1cf40:	cmp	r0, #0
   1cf44:	beq	1cfb4 <__assert_fail@plt+0xba44>
   1cf48:	ldr	r4, [sp, #28]
   1cf4c:	mov	r0, r8
   1cf50:	strb	r6, [sp, #24]
   1cf54:	bl	11234 <mbsinit@plt>
   1cf58:	cmp	r0, #0
   1cf5c:	movne	r3, #0
   1cf60:	strbne	r3, [sp]
   1cf64:	b	1ced4 <__assert_fail@plt+0xb964>
   1cf68:	add	r8, sp, #4
   1cf6c:	mov	r0, r8
   1cf70:	bl	11234 <mbsinit@plt>
   1cf74:	cmp	r0, #0
   1cf78:	beq	1cff4 <__assert_fail@plt+0xba84>
   1cf7c:	strb	r6, [sp]
   1cf80:	b	1cf08 <__assert_fail@plt+0xb998>
   1cf84:	mov	r3, #0
   1cf88:	str	r6, [sp, #20]
   1cf8c:	ldr	r4, [sp, #16]
   1cf90:	strb	r3, [sp, #24]
   1cf94:	b	1cee0 <__assert_fail@plt+0xb970>
   1cf98:	ldr	r4, [sp, #16]
   1cf9c:	mov	r0, r4
   1cfa0:	bl	113c0 <strlen@plt>
   1cfa4:	mov	r3, #0
   1cfa8:	str	r0, [sp, #20]
   1cfac:	strb	r3, [sp, #24]
   1cfb0:	b	1cee0 <__assert_fail@plt+0xb970>
   1cfb4:	ldr	r4, [sp, #16]
   1cfb8:	str	r6, [sp, #20]
   1cfbc:	ldrb	r3, [r4]
   1cfc0:	cmp	r3, #0
   1cfc4:	bne	1d014 <__assert_fail@plt+0xbaa4>
   1cfc8:	ldr	r4, [sp, #28]
   1cfcc:	cmp	r4, #0
   1cfd0:	beq	1cf4c <__assert_fail@plt+0xb9dc>
   1cfd4:	movw	r3, #62688	; 0xf4e0
   1cfd8:	movt	r3, #1
   1cfdc:	movw	r1, #61420	; 0xefec
   1cfe0:	movt	r1, #1
   1cfe4:	movw	r0, #61432	; 0xeff8
   1cfe8:	movt	r0, #1
   1cfec:	mov	r2, #172	; 0xac
   1cff0:	bl	11570 <__assert_fail@plt>
   1cff4:	movw	r3, #62688	; 0xf4e0
   1cff8:	movt	r3, #1
   1cffc:	movw	r1, #61420	; 0xefec
   1d000:	movt	r1, #1
   1d004:	movw	r0, #61452	; 0xf00c
   1d008:	movt	r0, #1
   1d00c:	mov	r2, #143	; 0x8f
   1d010:	bl	11570 <__assert_fail@plt>
   1d014:	movw	r3, #62688	; 0xf4e0
   1d018:	movt	r3, #1
   1d01c:	movw	r1, #61420	; 0xefec
   1d020:	movt	r1, #1
   1d024:	movw	r0, #61476	; 0xf024
   1d028:	movt	r0, #1
   1d02c:	mov	r2, #171	; 0xab
   1d030:	bl	11570 <__assert_fail@plt>
   1d034:	strd	r4, [sp, #-16]!
   1d038:	mov	r5, r1
   1d03c:	mov	r1, #0
   1d040:	mov	r4, r2
   1d044:	str	r6, [sp, #8]
   1d048:	str	lr, [sp, #12]
   1d04c:	bl	1148c <setlocale@plt>
   1d050:	subs	r6, r0, #0
   1d054:	beq	1d0d4 <__assert_fail@plt+0xbb64>
   1d058:	bl	113c0 <strlen@plt>
   1d05c:	cmp	r4, r0
   1d060:	bhi	1d080 <__assert_fail@plt+0xbb10>
   1d064:	cmp	r4, #0
   1d068:	moveq	r0, #34	; 0x22
   1d06c:	bne	1d0a4 <__assert_fail@plt+0xbb34>
   1d070:	ldrd	r4, [sp]
   1d074:	ldr	r6, [sp, #8]
   1d078:	add	sp, sp, #12
   1d07c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d080:	add	r2, r0, #1
   1d084:	mov	r1, r6
   1d088:	mov	r0, r5
   1d08c:	bl	1121c <memcpy@plt>
   1d090:	ldrd	r4, [sp]
   1d094:	mov	r0, #0
   1d098:	ldr	r6, [sp, #8]
   1d09c:	add	sp, sp, #12
   1d0a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d0a4:	sub	r4, r4, #1
   1d0a8:	mov	r1, r6
   1d0ac:	mov	r2, r4
   1d0b0:	mov	r0, r5
   1d0b4:	bl	1121c <memcpy@plt>
   1d0b8:	mov	r3, #0
   1d0bc:	mov	r0, #34	; 0x22
   1d0c0:	strb	r3, [r5, r4]
   1d0c4:	ldrd	r4, [sp]
   1d0c8:	ldr	r6, [sp, #8]
   1d0cc:	add	sp, sp, #12
   1d0d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d0d4:	cmp	r4, #0
   1d0d8:	mov	r0, #22
   1d0dc:	strbne	r6, [r5]
   1d0e0:	ldrd	r4, [sp]
   1d0e4:	ldr	r6, [sp, #8]
   1d0e8:	add	sp, sp, #12
   1d0ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1d0f0:	mov	r1, #0
   1d0f4:	b	1148c <setlocale@plt>
   1d0f8:	mov	r2, #3
   1d0fc:	mov	r1, #0
   1d100:	b	1c6c4 <__assert_fail@plt+0xb154>
   1d104:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d108:	mov	r7, r0
   1d10c:	ldr	r6, [pc, #72]	; 1d15c <__assert_fail@plt+0xbbec>
   1d110:	ldr	r5, [pc, #72]	; 1d160 <__assert_fail@plt+0xbbf0>
   1d114:	add	r6, pc, r6
   1d118:	add	r5, pc, r5
   1d11c:	sub	r6, r6, r5
   1d120:	mov	r8, r1
   1d124:	mov	r9, r2
   1d128:	bl	11178 <fdopen@plt-0x20>
   1d12c:	asrs	r6, r6, #2
   1d130:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d134:	mov	r4, #0
   1d138:	add	r4, r4, #1
   1d13c:	ldr	r3, [r5], #4
   1d140:	mov	r2, r9
   1d144:	mov	r1, r8
   1d148:	mov	r0, r7
   1d14c:	blx	r3
   1d150:	cmp	r6, r4
   1d154:	bne	1d138 <__assert_fail@plt+0xbbc8>
   1d158:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d15c:	strdeq	r2, [r1], -r8
   1d160:	strdeq	r2, [r1], -r0
   1d164:	bx	lr
   1d168:	ldr	r3, [pc, #12]	; 1d17c <__assert_fail@plt+0xbc0c>
   1d16c:	mov	r1, #0
   1d170:	add	r3, pc, r3
   1d174:	ldr	r2, [r3]
   1d178:	b	11408 <__cxa_atexit@plt>
   1d17c:	andeq	r2, r1, r8, ror #31

Disassembly of section .fini:

0001d180 <.fini>:
   1d180:	push	{r3, lr}
   1d184:	pop	{r3, pc}
